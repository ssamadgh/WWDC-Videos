1
00:00:07,516 --> 00:00:14,500
[ Music ]


2
00:00:21,516 --> 00:00:26,236
[ Applause ]


3
00:00:26,736 --> 00:00:29,216
>> Good morning and welcome to


4
00:00:29,216 --> 00:00:31,026
the session, Live Screen


5
00:00:31,026 --> 00:00:32,176
Broadcast with ReplayKit.


6
00:00:32,926 --> 00:00:34,676
My name is Alexander and I'm


7
00:00:34,676 --> 00:00:36,376
very excited to be here and talk


8
00:00:36,376 --> 00:00:38,046
to you about ReplayKit concepts


9
00:00:38,356 --> 00:00:39,786
and new features that we bring


10
00:00:39,786 --> 00:00:40,906
to ReplayKit this year.


11
00:00:41,456 --> 00:00:43,976
We've got lots to discuss so


12
00:00:44,216 --> 00:00:47,276
let's get started.


13
00:00:47,386 --> 00:00:49,396
ReplayKit is a framework that


14
00:00:49,396 --> 00:00:51,086
allows you capture application


15
00:00:51,086 --> 00:00:53,136
screen audio and microphone


16
00:00:53,136 --> 00:00:55,666
content in real time or record


17
00:00:55,666 --> 00:00:57,406
to a video file that the users


18
00:00:57,436 --> 00:00:59,836
can later edit or share.


19
00:01:00,416 --> 00:01:03,756
And ReplayKit also supports live


20
00:01:03,756 --> 00:01:04,866
broadcast.


21
00:01:05,465 --> 00:01:06,786
For application generating


22
00:01:06,786 --> 00:01:10,106
content like games, ReplayKit


23
00:01:10,226 --> 00:01:12,296
provides tools that allow them


24
00:01:12,296 --> 00:01:14,026
to stream audio and visual


25
00:01:14,026 --> 00:01:16,066
content using [inaudible] and


26
00:01:16,066 --> 00:01:17,116
broadcast services.


27
00:01:17,616 --> 00:01:19,616
And for the broadcast


28
00:01:19,616 --> 00:01:21,886
applications ReplayKit provides


29
00:01:21,886 --> 00:01:23,566
ability to receive that content


30
00:01:23,566 --> 00:01:25,516
captured from other applications


31
00:01:25,706 --> 00:01:30,446
or entire iOS and encode and


32
00:01:30,446 --> 00:01:31,246
stream to the servers directly


33
00:01:31,246 --> 00:01:31,926
from the same device.


34
00:01:36,586 --> 00:01:38,196
ReplayKit delivers its content


35
00:01:38,696 --> 00:01:40,466
in high quality with lowest


36
00:01:40,466 --> 00:01:42,566
latency and very low performance


37
00:01:42,566 --> 00:01:44,196
overhead and better usage.


38
00:01:44,866 --> 00:01:46,656
It also safeguards the user's


39
00:01:46,656 --> 00:01:49,706
privacy by asking for approval


40
00:01:49,706 --> 00:01:51,526
before any recording or


41
00:01:51,526 --> 00:01:53,376
broadcast begins, and also


42
00:01:53,826 --> 00:01:55,776
showing a prominent indicator


43
00:01:55,886 --> 00:01:56,796
whenever content is being


44
00:01:56,796 --> 00:01:56,976
captured.


45
00:02:02,286 --> 00:02:03,436
In this session today I'm going


46
00:02:03,436 --> 00:02:05,726
to talk about the live broadcast


47
00:02:05,726 --> 00:02:07,246
functionality of ReplayKit and


48
00:02:07,576 --> 00:02:08,826
we're going to start with


49
00:02:08,886 --> 00:02:10,666
overview and talk about


50
00:02:10,726 --> 00:02:12,546
[inaudible] broadcast and iOS


51
00:02:12,546 --> 00:02:14,936
system broadcast, and then we


52
00:02:14,936 --> 00:02:16,666
are going to talk about the new


53
00:02:16,666 --> 00:02:18,826
API called System Broadcast


54
00:02:18,826 --> 00:02:19,216
Picker.


55
00:02:19,746 --> 00:02:22,136
Now, this is an API that allows


56
00:02:22,136 --> 00:02:23,856
you to initiate the broadcast


57
00:02:24,116 --> 00:02:25,496
directly from your broadcast


58
00:02:25,496 --> 00:02:26,246
application.


59
00:02:28,356 --> 00:02:29,576
After that we're going to


60
00:02:29,776 --> 00:02:31,526
discuss how you can actually


61
00:02:31,526 --> 00:02:32,936
implement the broadcast


62
00:02:32,936 --> 00:02:34,456
extensions and how that would


63
00:02:34,456 --> 00:02:36,906
work for you with the new API


64
00:02:39,016 --> 00:02:39,126
that [inaudible].


65
00:02:39,336 --> 00:02:40,796
Also, we're going to talk about


66
00:02:40,796 --> 00:02:43,606
the protecting of the content of


67
00:02:43,606 --> 00:02:44,666
your applications from being


68
00:02:44,666 --> 00:02:44,976
captured.


69
00:02:48,316 --> 00:02:50,336
So let's start with overview of


70
00:02:50,336 --> 00:02:51,156
the live broadcast.


71
00:02:53,916 --> 00:02:56,816
As I said, ReplayKit allows you


72
00:02:56,816 --> 00:02:58,556
to broadcast your app screen,


73
00:02:58,556 --> 00:03:00,216
audio and audio content to


74
00:03:00,216 --> 00:03:01,806
search a third-party broadcast


75
00:03:01,806 --> 00:03:04,116
service directly from your iOS


76
00:03:04,116 --> 00:03:05,376
or [inaudible], and on iOS you


77
00:03:06,066 --> 00:03:11,026
can also provide voice or video


78
00:03:11,026 --> 00:03:13,906
commentary using microphone or


79
00:03:13,906 --> 00:03:14,376
camera.


80
00:03:15,196 --> 00:03:16,606
And all this content is


81
00:03:16,606 --> 00:03:17,766
absolutely secure and only


82
00:03:17,766 --> 00:03:18,666
accessible to the servers that


83
00:03:18,666 --> 00:03:18,976
you're using.


84
00:03:23,276 --> 00:03:24,456
So when you're streaming your


85
00:03:24,456 --> 00:03:25,666
game play to Mobcrush or


86
00:03:25,666 --> 00:03:27,966
YouTube, share your screen in


87
00:03:27,966 --> 00:03:29,016
WebEx video call.


88
00:03:29,856 --> 00:03:31,226
Use TeamViewer to work as


89
00:03:31,226 --> 00:03:33,786
customer support, or maybe


90
00:03:33,786 --> 00:03:35,216
stream your drawing app on a


91
00:03:35,216 --> 00:03:35,796
Facebook.


92
00:03:36,456 --> 00:03:37,666
All of that is powered with


93
00:03:37,816 --> 00:03:38,976
ReplayKit technology.


94
00:03:41,836 --> 00:03:43,926
Originally, with the ReplayKit


95
00:03:43,926 --> 00:03:45,776
live broadcast the user would be


96
00:03:45,776 --> 00:03:47,756
in the app and would use the app


97
00:03:48,076 --> 00:03:49,556
to start and stop the broadcast.


98
00:03:50,516 --> 00:03:52,336
An app would do that by directly


99
00:03:52,336 --> 00:03:53,966
communicating to a ReplayKit API


100
00:03:54,826 --> 00:03:56,526
and ReplayKit itself would


101
00:03:56,526 --> 00:03:58,716
involve the broadcast extensions


102
00:03:58,906 --> 00:04:00,336
and begin providing it with


103
00:04:00,476 --> 00:04:02,256
visuals and audio content from


104
00:04:02,256 --> 00:04:04,216
that application, and the


105
00:04:04,216 --> 00:04:06,216
extension would encode the media


106
00:04:06,216 --> 00:04:07,766
and stream to the servers and


107
00:04:08,016 --> 00:04:10,106
this is what we call In-App


108
00:04:10,106 --> 00:04:10,766
Broadcast.


109
00:04:11,256 --> 00:04:16,276
And what was new with ReplayKit


110
00:04:16,386 --> 00:04:19,906
2 is that instead we have entire


111
00:04:19,906 --> 00:04:20,966
system in a pack being


112
00:04:20,966 --> 00:04:21,625
broadcasted.


113
00:04:22,136 --> 00:04:24,736
And how this works is the user


114
00:04:24,736 --> 00:04:26,256
would initiate that broadcast


115
00:04:26,776 --> 00:04:28,266
from within the Control Center.


116
00:04:28,726 --> 00:04:30,266
So this is where they start and


117
00:04:30,266 --> 00:04:31,196
stop the broadcast.


118
00:04:31,196 --> 00:04:35,176
And that begins a system wide


119
00:04:35,706 --> 00:04:37,546
ReplayKit 2 broadcast session


120
00:04:37,546 --> 00:04:39,356
and, thus, audio and video


121
00:04:39,356 --> 00:04:40,556
samples, again, go to the


122
00:04:40,556 --> 00:04:42,156
extension and upload it to the


123
00:04:42,156 --> 00:04:42,596
servers.


124
00:04:43,416 --> 00:04:45,076
And conceptually this is the


125
00:04:45,076 --> 00:04:46,186
difference between the two.


126
00:04:46,656 --> 00:04:49,416
And just to talk about the


127
00:04:50,706 --> 00:04:51,636
In-App Broadcast in the


128
00:04:51,636 --> 00:04:52,126
beginning.


129
00:04:52,756 --> 00:04:55,206
In the In-App Broadcast this is


130
00:04:55,206 --> 00:04:56,786
your app or your game that is


131
00:04:56,786 --> 00:04:59,006
providing the content that is


132
00:04:59,006 --> 00:05:01,436
captured live as you play in a


133
00:05:03,316 --> 00:05:05,096
game and your game is calling


134
00:05:05,096 --> 00:05:07,726
the ReplayKit API to start and


135
00:05:07,726 --> 00:05:08,636
stop the broadcast.


136
00:05:09,836 --> 00:05:12,076
And it also presents as


137
00:05:12,076 --> 00:05:13,766
broadcast activity controller so


138
00:05:13,766 --> 00:05:16,096
that the user would pick the


139
00:05:16,096 --> 00:05:16,566
service.


140
00:05:17,016 --> 00:05:20,836
And in line with that, the


141
00:05:21,076 --> 00:05:22,696
broadcast application is


142
00:05:22,696 --> 00:05:24,456
providing you the broadcast


143
00:05:24,456 --> 00:05:26,826
extension which ReplayKit is


144
00:05:26,826 --> 00:05:29,196
working on behalf of that game


145
00:05:29,816 --> 00:05:31,696
to sign users into the service


146
00:05:31,996 --> 00:05:33,816
and upload the broadcast content


147
00:05:34,786 --> 00:05:36,576
live to their servers.


148
00:05:37,516 --> 00:05:38,956
That was our original way of


149
00:05:39,036 --> 00:05:40,656
using ReplayKit Live Broadcast


150
00:05:41,456 --> 00:05:43,516
and we covered this before.


151
00:05:43,516 --> 00:05:44,756
And in case your application


152
00:05:44,756 --> 00:05:45,756
does need this fine [inaudible]


153
00:05:45,756 --> 00:05:47,196
control for starting and


154
00:05:47,196 --> 00:05:49,626
stopping the broadcast, for more


155
00:05:49,626 --> 00:05:51,056
information please find the


156
00:05:51,056 --> 00:05:53,236
session called Go Live with


157
00:05:53,236 --> 00:05:56,576
ReplayKit from a couple of years


158
00:05:56,576 --> 00:05:56,866
ago.


159
00:05:58,796 --> 00:06:00,416
But really, what today's session


160
00:06:00,416 --> 00:06:02,786
is about is what we call iOS


161
00:06:02,856 --> 00:06:03,726
system broadcast.


162
00:06:04,066 --> 00:06:05,276
Now, this is, again, the


163
00:06:05,276 --> 00:06:07,126
broadcast of all your onscreen


164
00:06:07,126 --> 00:06:09,726
activity and all your sounds,


165
00:06:10,486 --> 00:06:11,766
and instead of being initiated


166
00:06:11,766 --> 00:06:13,426
from within your application and


167
00:06:13,836 --> 00:06:15,246
starting and stopping when the


168
00:06:15,246 --> 00:06:19,326
app is paused, for example, this


169
00:06:19,326 --> 00:06:21,596
session is started and stopped


170
00:06:21,596 --> 00:06:23,386
within Control Center, and this


171
00:06:23,386 --> 00:06:25,056
is systemwide and it runs


172
00:06:25,056 --> 00:06:27,076
continuously as the user moves


173
00:06:27,076 --> 00:06:28,476
from the home screen to the app


174
00:06:29,196 --> 00:06:30,696
or as they move from one app to


175
00:06:30,696 --> 00:06:31,076
another.


176
00:06:31,766 --> 00:06:33,916
And all of this is built into


177
00:06:34,186 --> 00:06:36,196
iOS 11 and above and this is


178
00:06:36,196 --> 00:06:37,966
what was introduced last year as


179
00:06:37,966 --> 00:06:38,826
ReplayKit 2.


180
00:06:40,856 --> 00:06:42,376
So here's some game and you're


181
00:06:42,376 --> 00:06:44,466
playing a game and you want to


182
00:06:44,826 --> 00:06:46,466
start the live stream and


183
00:06:46,466 --> 00:06:47,576
initiate the broadcast.


184
00:06:49,036 --> 00:06:50,646
So you pull down the Control


185
00:06:50,696 --> 00:06:52,196
Center and say you touch into


186
00:06:52,196 --> 00:06:54,696
that screen recording button and


187
00:06:55,306 --> 00:06:57,606
that will bring up the picture


188
00:06:57,816 --> 00:06:59,866
for you to record your game


189
00:06:59,866 --> 00:07:02,776
play, or if you tap on one of


190
00:07:02,846 --> 00:07:04,296
the [inaudible] of broadcast


191
00:07:04,296 --> 00:07:05,996
providers, it will stream out to


192
00:07:05,996 --> 00:07:06,766
their service.


193
00:07:08,436 --> 00:07:10,026
So once you have done that,


194
00:07:10,056 --> 00:07:12,606
you're back to your game and now


195
00:07:12,606 --> 00:07:13,366
you're streaming to that


196
00:07:13,366 --> 00:07:13,956
service.


197
00:07:14,346 --> 00:07:16,146
The broadcast extension receives


198
00:07:16,466 --> 00:07:17,896
the media samples captured from


199
00:07:17,896 --> 00:07:20,076
the screen and uploads the video


200
00:07:20,076 --> 00:07:21,756
stream to its back end and the


201
00:07:21,756 --> 00:07:23,726
viewers they have in their web


202
00:07:23,766 --> 00:07:25,936
browsers, or however they want


203
00:07:25,936 --> 00:07:29,616
to use that stream, are watching


204
00:07:29,616 --> 00:07:30,946
your broadcast on their own


205
00:07:30,946 --> 00:07:31,976
devices around the world.


206
00:07:36,296 --> 00:07:38,836
This is how you start the iOS


207
00:07:39,026 --> 00:07:39,936
system broadcast.


208
00:07:40,296 --> 00:07:41,906
And now, what's interesting


209
00:07:41,966 --> 00:07:43,586
about this kind of broadcast


210
00:07:43,586 --> 00:07:45,416
again, is that, as I said, it


211
00:07:45,416 --> 00:07:46,666
continues regardless of you


212
00:07:47,046 --> 00:07:49,466
moving from one app to another.


213
00:07:50,106 --> 00:07:52,446
So I'm broadcasting from my home


214
00:07:52,446 --> 00:07:54,326
screen here and then my home


215
00:07:54,326 --> 00:07:55,426
screen is what is being


216
00:07:55,426 --> 00:07:55,996
broadcasted.


217
00:07:56,486 --> 00:07:59,096
And then if I'm launching a


218
00:07:59,096 --> 00:08:01,516
different app, that app is going


219
00:08:01,926 --> 00:08:03,796
to be broadcasted now, and


220
00:08:03,796 --> 00:08:05,306
that's really the core thing


221
00:08:05,346 --> 00:08:05,716
now.


222
00:08:05,806 --> 00:08:07,406
So the broadcast itself is a


223
00:08:07,406 --> 00:08:09,076
systemwide experience and you


224
00:08:09,076 --> 00:08:10,506
can go back to the Control


225
00:08:10,506 --> 00:08:13,466
Center and stop it or you can


226
00:08:13,466 --> 00:08:15,046
tap on the status bar at the top


227
00:08:15,046 --> 00:08:15,826
and it will bring up the


228
00:08:15,826 --> 00:08:17,376
controls to stop the broadcast.


229
00:08:17,836 --> 00:08:21,216
And another thing is that if


230
00:08:21,216 --> 00:08:23,216
next I ran as a landscape,


231
00:08:23,596 --> 00:08:24,736
there's also a way to support


232
00:08:24,736 --> 00:08:30,036
that and you can move between


233
00:08:30,036 --> 00:08:31,936
landscape and portrait as you go


234
00:08:31,936 --> 00:08:32,976
from one app to another.


235
00:08:38,226 --> 00:08:40,385
So this was an iOS system


236
00:08:40,385 --> 00:08:42,116
broadcast we enabled last year


237
00:08:42,206 --> 00:08:43,765
and the feedback and adoption


238
00:08:43,765 --> 00:08:46,296
we've seen since then was


239
00:08:46,296 --> 00:08:46,736
amazing.


240
00:08:47,186 --> 00:08:49,166
And our live broadcast API today


241
00:08:49,166 --> 00:08:51,166
is used in many apps in


242
00:08:51,166 --> 00:08:54,096
categories like communication,


243
00:08:54,346 --> 00:08:57,106
streaming, house, help desk,


244
00:08:57,106 --> 00:08:58,896
education and social.


245
00:08:59,426 --> 00:09:02,956
But at the same time we had a


246
00:09:02,956 --> 00:09:05,616
lot of feedback that people are


247
00:09:05,676 --> 00:09:07,226
having hard time finding this


248
00:09:07,266 --> 00:09:08,866
broadcast UI in the Control


249
00:09:08,866 --> 00:09:11,686
Center so we wanted to make it


250
00:09:11,686 --> 00:09:14,296
easy for you to edit right into


251
00:09:14,296 --> 00:09:15,536
your app.


252
00:09:15,856 --> 00:09:17,746
And this year our goal was to


253
00:09:17,746 --> 00:09:19,466
allow you integrate iOS system


254
00:09:19,466 --> 00:09:21,406
broadcast into your application,


255
00:09:21,576 --> 00:09:23,156
and we are very excited to


256
00:09:23,156 --> 00:09:24,856
announce System Broadcast


257
00:09:24,856 --> 00:09:24,976
Picker.


258
00:09:29,046 --> 00:09:30,636
So let me go back to my diagram.


259
00:09:30,916 --> 00:09:36,056
So what we added now is sort of


260
00:09:36,056 --> 00:09:38,826
a hybrid approach to last two


261
00:09:38,826 --> 00:09:39,546
[inaudible] styles.


262
00:09:40,036 --> 00:09:43,996
And in this hybrid approach we


263
00:09:43,996 --> 00:09:46,056
edit up the ability for your


264
00:09:46,056 --> 00:09:48,166
application to also be initiator


265
00:09:48,436 --> 00:09:49,626
of iOS system broadcast.


266
00:09:50,676 --> 00:09:52,406
So your app now can do the same


267
00:09:52,406 --> 00:09:54,146
thing as what Control Center is


268
00:09:54,146 --> 00:09:57,196
doing; start the broadcast and


269
00:09:57,196 --> 00:09:59,416
then allow it to continue as you


270
00:09:59,416 --> 00:10:01,636
move from one app to another and


271
00:10:02,016 --> 00:10:03,346
then move to the home screen,


272
00:10:03,516 --> 00:10:03,896
and so on.


273
00:10:03,896 --> 00:10:06,226
So as the user starts a


274
00:10:06,226 --> 00:10:08,136
broadcast from your application,


275
00:10:08,796 --> 00:10:10,116
he can later go to the Control


276
00:10:10,116 --> 00:10:12,976
Center and stop it from there or


277
00:10:13,276 --> 00:10:14,706
vice versa; he could start from


278
00:10:14,706 --> 00:10:16,456
the Control Center and then go


279
00:10:16,456 --> 00:10:17,666
to your app and tap the button


280
00:10:17,666 --> 00:10:17,976
that stops.


281
00:10:22,346 --> 00:10:24,456
So again, the System Broadcast


282
00:10:24,456 --> 00:10:27,906
Picker allows users to start the


283
00:10:27,906 --> 00:10:29,966
iOS system broadcast without


284
00:10:29,966 --> 00:10:31,886
leaving your application, and


285
00:10:32,056 --> 00:10:34,206
this is just a simple button in


286
00:10:34,206 --> 00:10:36,116
the view that we provide and


287
00:10:36,596 --> 00:10:38,476
this is a new feature we are


288
00:10:38,476 --> 00:10:41,476
enabling in iOS 12.


289
00:10:41,536 --> 00:10:44,766
Here is example of that.


290
00:10:44,766 --> 00:10:46,586
Here I have the sample app, Fox


291
00:10:46,586 --> 00:10:49,666
2 and I edit app with button at


292
00:10:50,216 --> 00:10:51,686
the top.


293
00:10:51,846 --> 00:10:53,446
So if I hit this Broadcast


294
00:10:53,446 --> 00:10:55,316
Picker button, that's going to


295
00:10:55,316 --> 00:10:56,986
bring up the same UI as you


296
00:10:56,986 --> 00:10:59,926
would have seen if you would go


297
00:10:59,926 --> 00:11:01,176
to the Control Center.


298
00:11:01,246 --> 00:11:04,886
So I pick out the broadcast


299
00:11:04,886 --> 00:11:07,366
provider and start my broadcast.


300
00:11:08,186 --> 00:11:10,366
Now I'm back in the app and now


301
00:11:10,366 --> 00:11:11,616
I'm just broadcasting to that


302
00:11:11,616 --> 00:11:14,386
provider and people around the


303
00:11:14,386 --> 00:11:17,606
world can watch my live stream.


304
00:11:20,376 --> 00:11:22,326
So how is this done?


305
00:11:23,746 --> 00:11:25,706
Okay. There is a new class


306
00:11:25,746 --> 00:11:26,166
called


307
00:11:26,556 --> 00:11:29,316
RPSystemBroadcastPickerView and


308
00:11:29,466 --> 00:11:31,726
it's just a subclass of UI View


309
00:11:31,956 --> 00:11:34,026
and you can add it to your


310
00:11:34,026 --> 00:11:35,796
application using the interface


311
00:11:35,796 --> 00:11:39,576
builder as a view with a custom


312
00:11:40,486 --> 00:11:41,816
class, or you can do it


313
00:11:41,816 --> 00:11:44,156
programmatically and all you


314
00:11:44,156 --> 00:11:45,856
need to do is just run it in


315
00:11:45,906 --> 00:11:46,576
instance of


316
00:11:46,816 --> 00:11:49,096
RPSystemBroadcastPickerView and


317
00:11:49,096 --> 00:11:50,796
add it to your view hierarchy.


318
00:11:51,336 --> 00:11:56,556
So this is a more simple way to


319
00:11:56,556 --> 00:11:59,976
use the broadcast picker, but I


320
00:11:59,976 --> 00:12:01,436
know that many of you in this


321
00:12:01,436 --> 00:12:04,206
room broadcast service


322
00:12:04,206 --> 00:12:04,866
developers.


323
00:12:05,756 --> 00:12:07,276
And finally, with this new API


324
00:12:07,426 --> 00:12:09,696
your users can start the


325
00:12:09,696 --> 00:12:11,616
broadcast directly from your


326
00:12:11,616 --> 00:12:13,746
application and there's no more


327
00:12:13,746 --> 00:12:14,816
need to include all those


328
00:12:14,816 --> 00:12:16,316
tutorials, how you can enable


329
00:12:16,316 --> 00:12:17,256
the screen recording and


330
00:12:17,256 --> 00:12:18,886
settings and how to find your


331
00:12:18,886 --> 00:12:19,816
service and that [inaudible] in


332
00:12:19,816 --> 00:12:20,756
the Control Center.


333
00:12:21,866 --> 00:12:24,306
But, however, you would probably


334
00:12:24,566 --> 00:12:26,436
like the Picker to show the


335
00:12:26,436 --> 00:12:28,786
broadcast extension for just


336
00:12:28,786 --> 00:12:33,916
your service, and ReplayKit


337
00:12:33,916 --> 00:12:35,956
provides API that lets you do


338
00:12:35,956 --> 00:12:37,596
exactly that.


339
00:12:38,116 --> 00:12:40,856
And it is just a property of


340
00:12:40,856 --> 00:12:43,946
that view and what you need to


341
00:12:43,946 --> 00:12:45,426
do is just get the bundle


342
00:12:45,426 --> 00:12:47,866
identifier from your broadcast


343
00:12:47,866 --> 00:12:49,836
extension and assign to the


344
00:12:50,046 --> 00:12:51,966
property of the view called


345
00:12:52,246 --> 00:12:53,306
preferredExtension.


346
00:12:55,976 --> 00:12:58,596
Here's a code example of how you


347
00:12:58,596 --> 00:12:59,256
could do this.


348
00:12:59,616 --> 00:13:02,926
You would probably like to set


349
00:13:02,926 --> 00:13:03,906
the property right after


350
00:13:03,906 --> 00:13:05,756
correcting the view, and the


351
00:13:05,756 --> 00:13:06,906
only difference from that


352
00:13:06,906 --> 00:13:08,606
example would be that you need


353
00:13:08,606 --> 00:13:11,116
to replace the string called


354
00:13:11,116 --> 00:13:12,686
com.your-app.broadcast.


355
00:13:12,686 --> 00:13:13,316
extension.


356
00:13:13,636 --> 00:13:14,836
It's a bundle idea of your


357
00:13:14,836 --> 00:13:15,356
extension.


358
00:13:15,926 --> 00:13:20,536
So here's a diagram, and I just


359
00:13:20,536 --> 00:13:23,676
want to emphasize the point


360
00:13:23,676 --> 00:13:24,986
about the picker view that you


361
00:13:24,986 --> 00:13:26,286
create in your app.


362
00:13:26,446 --> 00:13:28,766
So that view is just a shortcut


363
00:13:28,766 --> 00:13:30,716
that brings up a system UI of


364
00:13:30,716 --> 00:13:32,546
the broadcast picker, the same


365
00:13:32,546 --> 00:13:34,586
UI that you can access using the


366
00:13:34,586 --> 00:13:35,446
Control Center.


367
00:13:36,756 --> 00:13:39,256
And the picker itself belongs to


368
00:13:39,256 --> 00:13:41,156
the system and your application


369
00:13:41,446 --> 00:13:43,096
does not own any part of the


370
00:13:44,186 --> 00:13:46,786
broadcast state and also cannot


371
00:13:47,236 --> 00:13:49,036
start or stop the system


372
00:13:49,036 --> 00:13:49,976
broadcast programmatically.


373
00:13:54,376 --> 00:13:56,136
So this is what you need to do


374
00:13:56,326 --> 00:13:58,326
to add the iOS system broadcast


375
00:13:58,326 --> 00:13:59,296
to your app.


376
00:13:59,436 --> 00:14:01,136
There's a new API and it is


377
00:14:01,256 --> 00:14:03,406
fairly simple and you could


378
00:14:03,406 --> 00:14:04,616
really be done adopting it


379
00:14:05,016 --> 00:14:06,146
before leaving this session.


380
00:14:06,636 --> 00:14:09,696
And next we are going to walk


381
00:14:09,696 --> 00:14:11,096
through the process for the


382
00:14:11,096 --> 00:14:12,636
broadcast extension developers


383
00:14:13,196 --> 00:14:15,266
and discuss how you can actually


384
00:14:15,266 --> 00:14:16,586
implement the broadcast


385
00:14:16,586 --> 00:14:18,786
extension and how things would


386
00:14:18,786 --> 00:14:20,496
work for you if your app


387
00:14:20,496 --> 00:14:22,696
provides both the extension and


388
00:14:22,696 --> 00:14:23,576
the broadcast picker.


389
00:14:25,576 --> 00:14:26,966
So let me come back to that


390
00:14:26,966 --> 00:14:27,536
diagram.


391
00:14:27,536 --> 00:14:28,796
We are sort of moving to the


392
00:14:28,976 --> 00:14:31,306
broadcast extension site now and


393
00:14:31,836 --> 00:14:32,966
we want to show you the path


394
00:14:32,966 --> 00:14:33,976
assuming the system broadcast.


395
00:14:39,766 --> 00:14:41,006
Let's start with talking about


396
00:14:41,006 --> 00:14:42,966
the broadcast application and


397
00:14:43,516 --> 00:14:45,656
the broadcast extension and what


398
00:14:45,656 --> 00:14:48,726
each of them needs to do during


399
00:14:48,726 --> 00:14:50,796
the system broadcast session.


400
00:14:52,916 --> 00:14:54,796
So you install the broadcast


401
00:14:54,796 --> 00:14:56,376
extension along with the


402
00:14:56,796 --> 00:14:58,496
application that contains it.


403
00:14:58,666 --> 00:15:00,246
So if you install Facebook, you


404
00:15:00,246 --> 00:15:02,076
also install Facebook broadcast


405
00:15:02,486 --> 00:15:02,986
extension.


406
00:15:04,216 --> 00:15:08,306
And broadcast extension and the


407
00:15:08,306 --> 00:15:10,466
application are separate


408
00:15:10,466 --> 00:15:12,226
binaries and each runs in its


409
00:15:12,226 --> 00:15:16,266
own process and those processes


410
00:15:16,676 --> 00:15:18,926
are invoked directly by the user


411
00:15:19,186 --> 00:15:20,626
and independently from each


412
00:15:20,626 --> 00:15:20,916
other.


413
00:15:21,996 --> 00:15:23,706
And typically you would use


414
00:15:23,706 --> 00:15:25,556
application to allow user sign


415
00:15:25,556 --> 00:15:27,566
in or sign up for your service.


416
00:15:28,636 --> 00:15:31,636
And now for the apps that will


417
00:15:31,636 --> 00:15:33,476
adopt the broadcast picker API,


418
00:15:33,636 --> 00:15:37,416
you can also let user to type in


419
00:15:37,416 --> 00:15:38,966
some message before posting this


420
00:15:38,966 --> 00:15:40,726
particular broadcast to his


421
00:15:40,726 --> 00:15:41,146
Facebook.


422
00:15:41,626 --> 00:15:46,106
And the broadcast extension,


423
00:15:47,266 --> 00:15:49,426
that's all the actual work when


424
00:15:49,466 --> 00:15:51,226
everything required to start the


425
00:15:51,226 --> 00:15:53,376
broadcast is already available.


426
00:15:55,376 --> 00:15:57,336
So again, the extension does the


427
00:15:57,336 --> 00:15:59,836
work of taking samples edited by


428
00:15:59,836 --> 00:16:03,156
ReplayKit, the raw samples of


429
00:16:03,156 --> 00:16:05,646
the audio from the app, video of


430
00:16:05,646 --> 00:16:07,666
the screen and perhaps audio


431
00:16:07,846 --> 00:16:09,416
from the microphone and encoding


432
00:16:09,416 --> 00:16:11,516
starts and uploading to your


433
00:16:11,516 --> 00:16:12,676
service using whatever


434
00:16:12,676 --> 00:16:14,046
technology you prefer to use.


435
00:16:17,016 --> 00:16:18,506
To help you get started


436
00:16:18,816 --> 00:16:20,196
developing the new broadcast


437
00:16:20,196 --> 00:16:22,826
services we provide the Xcode


438
00:16:22,866 --> 00:16:26,036
template and just add the


439
00:16:26,036 --> 00:16:27,856
extension to your project using


440
00:16:27,856 --> 00:16:29,406
the template and you'll be ready


441
00:16:29,406 --> 00:16:30,096
to begin.


442
00:16:30,866 --> 00:16:32,316
So now let's look how you can


443
00:16:32,496 --> 00:16:35,386
code all of this.


444
00:16:35,566 --> 00:16:37,296
So when you create an extension


445
00:16:37,536 --> 00:16:39,236
in your project using Xcode


446
00:16:39,236 --> 00:16:40,386
template, you'll get a


447
00:16:40,386 --> 00:16:41,876
SampleHandler class like this


448
00:16:42,406 --> 00:16:45,756
and this is where you add your


449
00:16:45,756 --> 00:16:47,556
code to handle different events


450
00:16:47,556 --> 00:16:49,026
during the broadcast.


451
00:16:49,676 --> 00:16:51,226
And also, you would implement


452
00:16:51,226 --> 00:16:52,406
this function that handles


453
00:16:52,796 --> 00:16:53,746
incoming audio and video


454
00:16:53,746 --> 00:16:53,976
samples.


455
00:16:58,176 --> 00:17:00,136
This is how the life cycle of


456
00:17:00,136 --> 00:17:01,286
the broadcast usually looks


457
00:17:01,286 --> 00:17:01,526
like.


458
00:17:03,056 --> 00:17:05,685
So we have states called setup,


459
00:17:05,806 --> 00:17:09,496
initialized, started, processing


460
00:17:09,616 --> 00:17:10,156
and stopped.


461
00:17:10,286 --> 00:17:14,606
Over on the left there's this


462
00:17:14,646 --> 00:17:16,096
green square which corresponds


463
00:17:16,096 --> 00:17:18,476
to the state when your broadcast


464
00:17:18,476 --> 00:17:20,986
extension is not running yet and


465
00:17:20,986 --> 00:17:23,415
at this point your app could,


466
00:17:23,415 --> 00:17:24,646
for example, get the login


467
00:17:24,646 --> 00:17:26,526
credentials from the user and


468
00:17:26,526 --> 00:17:28,616
use a shared keychain to process


469
00:17:28,616 --> 00:17:31,126
credentials to the extension.


470
00:17:31,816 --> 00:17:34,226
Or again, here you could let the


471
00:17:34,226 --> 00:17:35,906
user to type in that message for


472
00:17:35,906 --> 00:17:39,326
the Facebook part and pass it to


473
00:17:39,376 --> 00:17:41,526
the extension like one way or


474
00:17:41,526 --> 00:17:41,856
another.


475
00:17:42,536 --> 00:17:45,356
So once the user initiates a


476
00:17:45,356 --> 00:17:47,386
broadcast, using the Control


477
00:17:47,386 --> 00:17:49,656
Center or your application that


478
00:17:49,656 --> 00:17:51,066
adopted the broadcast picker,


479
00:17:52,526 --> 00:17:55,136
ReplayKit launches an extension


480
00:17:55,136 --> 00:17:57,206
process and creates an instance


481
00:17:57,206 --> 00:17:58,756
of your SampleHandler class.


482
00:17:59,826 --> 00:18:02,626
And at that point you can


483
00:18:02,626 --> 00:18:04,896
override the default initializer


484
00:18:04,896 --> 00:18:07,086
of SampleHandler and do


485
00:18:07,086 --> 00:18:08,446
something essential for your


486
00:18:08,446 --> 00:18:09,776
broadcast and not directly


487
00:18:09,776 --> 00:18:11,216
related to handling the media


488
00:18:11,216 --> 00:18:11,626
samples.


489
00:18:12,216 --> 00:18:14,856
So, for example, you could get


490
00:18:15,626 --> 00:18:17,106
login credentials from this


491
00:18:17,106 --> 00:18:19,096
keychain and establish a


492
00:18:19,096 --> 00:18:20,526
broadcast session with your


493
00:18:20,526 --> 00:18:21,006
servers.


494
00:18:23,576 --> 00:18:25,316
So once the process is launched


495
00:18:25,346 --> 00:18:26,556
and the instance of your


496
00:18:26,556 --> 00:18:28,846
SampleHandler already exists,


497
00:18:30,456 --> 00:18:32,786
the extension is notified that


498
00:18:32,856 --> 00:18:34,436
ReplayKit will begin providing


499
00:18:34,436 --> 00:18:37,056
it with audio and video samples


500
00:18:37,466 --> 00:18:38,566
using the function called


501
00:18:38,626 --> 00:18:41,846
broadcastStarted, and in this


502
00:18:41,846 --> 00:18:44,046
function you'd probably like to


503
00:18:44,046 --> 00:18:46,646
create your media engine or do


504
00:18:46,686 --> 00:18:48,866
anything else that you need to


505
00:18:48,866 --> 00:18:50,336
start receiving the samples in


506
00:18:50,336 --> 00:18:52,336
real time and encoding them and


507
00:18:52,336 --> 00:18:53,376
uploading to your servers.


508
00:18:56,056 --> 00:18:57,806
So once a broadcast is running


509
00:18:57,806 --> 00:19:02,066
now ReplayKit will provide raw


510
00:19:02,066 --> 00:19:04,346
audio and video samples and your


511
00:19:04,346 --> 00:19:06,046
extension needs to encode it and


512
00:19:06,046 --> 00:19:08,146
upload it to your video service


513
00:19:08,396 --> 00:19:09,966
using whatever technology you


514
00:19:09,966 --> 00:19:10,736
prefer to use.


515
00:19:11,096 --> 00:19:13,686
ReplayKit provides your


516
00:19:13,686 --> 00:19:15,406
extension three types of the


517
00:19:15,406 --> 00:19:19,456
samples; samples with video


518
00:19:19,456 --> 00:19:20,576
captured from the screen,


519
00:19:21,236 --> 00:19:22,596
samples with audio tapped from


520
00:19:22,596 --> 00:19:25,586
the application and samples with


521
00:19:25,586 --> 00:19:27,236
audio captured from the


522
00:19:27,236 --> 00:19:29,226
microphone, and your extension


523
00:19:29,376 --> 00:19:31,076
will encode all of this and


524
00:19:31,126 --> 00:19:33,206
upload to the service.


525
00:19:35,236 --> 00:19:37,016
And all of those are going to


526
00:19:37,016 --> 00:19:38,976
the extension and are handled by


527
00:19:38,976 --> 00:19:39,786
the function called


528
00:19:40,576 --> 00:19:42,336
processSampleBuffer.


529
00:19:42,986 --> 00:19:45,546
This function receives a single


530
00:19:45,616 --> 00:19:47,716
CMSampleBuffer, as you see, and


531
00:19:47,716 --> 00:19:48,646
the type of the buffer.


532
00:19:49,696 --> 00:19:51,286
And what it needs to do is to


533
00:19:51,286 --> 00:19:52,576
encode and upload the media


534
00:19:52,576 --> 00:19:54,556
samples, and in this code


535
00:19:54,556 --> 00:19:56,096
example we show you how you can


536
00:19:56,096 --> 00:19:58,026
encode the video using the Video


537
00:19:58,026 --> 00:19:58,646
Toolbox.


538
00:19:59,736 --> 00:20:02,066
So we recommend using the Video


539
00:20:02,066 --> 00:20:04,356
Toolbox as it provides hardware


540
00:20:04,356 --> 00:20:05,716
accelerated encoding


541
00:20:05,716 --> 00:20:08,296
capabilities, and that is


542
00:20:08,296 --> 00:20:10,146
especially important for our use


543
00:20:10,146 --> 00:20:12,696
case because extensions have


544
00:20:12,756 --> 00:20:13,946
much lower memory limits


545
00:20:13,946 --> 00:20:14,976
compared to their applications.


546
00:20:19,186 --> 00:20:22,086
So once you're encoding and


547
00:20:22,086 --> 00:20:23,826
streaming the video to the


548
00:20:23,826 --> 00:20:26,056
broadcast servers the viewers


549
00:20:26,056 --> 00:20:28,266
around the world can or could


550
00:20:28,266 --> 00:20:30,846
watch your broadcast live, but


551
00:20:31,516 --> 00:20:32,796
they need some way to find your


552
00:20:32,796 --> 00:20:33,336
broadcast.


553
00:20:34,676 --> 00:20:36,766
And say if a person likes


554
00:20:37,146 --> 00:20:38,746
playing and watching Angry


555
00:20:38,746 --> 00:20:40,626
Birds, there should be someplace


556
00:20:40,626 --> 00:20:42,326
on your website or in your app


557
00:20:42,776 --> 00:20:44,656
where he can find all the live


558
00:20:44,656 --> 00:20:47,756
broadcasts with that game.


559
00:20:47,926 --> 00:20:50,626
And in order to implement this


560
00:20:50,976 --> 00:20:52,186
you need to add to your video


561
00:20:52,186 --> 00:20:54,096
stream some information about


562
00:20:54,096 --> 00:20:55,576
the game that is being


563
00:20:55,576 --> 00:20:58,806
broadcasted now, and for that


564
00:20:59,256 --> 00:21:01,206
ReplayKit provides API function


565
00:21:01,206 --> 00:21:03,386
called broadcastAnnotatedWith


566
00:21:03,386 --> 00:21:05,616
ApplicationInfo, and as soon as


567
00:21:05,616 --> 00:21:08,866
a player starts his game Angry


568
00:21:08,866 --> 00:21:10,256
Birds sends this example,


569
00:21:10,926 --> 00:21:12,266
ReplayKit notifies your


570
00:21:12,266 --> 00:21:14,516
extension that that has happened


571
00:21:14,846 --> 00:21:16,286
and provides a dictionary with


572
00:21:16,286 --> 00:21:17,676
details about the app that was


573
00:21:17,676 --> 00:21:17,996
started.


574
00:21:18,416 --> 00:21:23,556
And as an example, you can use


575
00:21:23,556 --> 00:21:25,306
the key defined by ReplayKit


576
00:21:25,356 --> 00:21:28,366
called RPApplicationInfoBundle


577
00:21:28,366 --> 00:21:31,146
IdentifierKey and get the bundle


578
00:21:31,146 --> 00:21:32,936
ID of that game and pass it as a


579
00:21:32,936 --> 00:21:34,476
metadata to your stream.


580
00:21:39,976 --> 00:21:41,316
When the user stops the


581
00:21:41,316 --> 00:21:43,156
broadcast, one way or another,


582
00:21:44,296 --> 00:21:45,616
ReplayKit is using function


583
00:21:45,616 --> 00:21:47,936
called broadcastFinished to


584
00:21:47,936 --> 00:21:49,296
communicate to your extension


585
00:21:49,296 --> 00:21:50,736
that broadcast session is over


586
00:21:50,736 --> 00:21:51,676
and there will be no more


587
00:21:51,676 --> 00:21:53,756
samples delivered to the


588
00:21:53,756 --> 00:21:54,486
SampleHandler.


589
00:21:54,486 --> 00:21:57,086
And in this function you would


590
00:21:57,086 --> 00:21:59,016
probably like to finish


591
00:21:59,016 --> 00:22:00,986
uploading your buffered video


592
00:22:00,986 --> 00:22:02,876
and [inaudible] your media


593
00:22:02,946 --> 00:22:04,616
engine or anything else that you


594
00:22:04,616 --> 00:22:04,976
need to release.


595
00:22:10,176 --> 00:22:13,386
So this is how the broadcast


596
00:22:13,386 --> 00:22:15,546
life cycle usually goes.


597
00:22:15,676 --> 00:22:17,296
And there's one more point that


598
00:22:17,296 --> 00:22:18,556
I would like to mention here.


599
00:22:18,646 --> 00:22:23,886
As we discussed, everything


600
00:22:23,886 --> 00:22:25,606
required to set up the broadcast


601
00:22:26,236 --> 00:22:28,396
should happen in the application


602
00:22:29,296 --> 00:22:31,256
and you would get the login


603
00:22:31,256 --> 00:22:33,806
credentials using the app or you


604
00:22:33,806 --> 00:22:35,046
could get the name for the


605
00:22:35,046 --> 00:22:36,666
broadcast in the application,


606
00:22:37,156 --> 00:22:40,166
and we have a state for this,


607
00:22:40,166 --> 00:22:41,676
this green square on the left


608
00:22:41,676 --> 00:22:41,946
side.


609
00:22:42,986 --> 00:22:44,896
However, this could be the case


610
00:22:44,896 --> 00:22:46,966
that when the broadcast has


611
00:22:46,966 --> 00:22:48,836
started, your extension is


612
00:22:48,836 --> 00:22:50,426
missing something to proceed as


613
00:22:50,426 --> 00:22:51,086
a broadcast.


614
00:22:51,126 --> 00:22:53,656
For example, the login process


615
00:22:53,686 --> 00:22:55,816
could have failed or something


616
00:22:55,856 --> 00:22:57,346
else is needed, and I want to


617
00:22:57,346 --> 00:23:00,066
show you how you can handle this


618
00:23:01,976 --> 00:23:02,106
case.


619
00:23:02,286 --> 00:23:04,026
ReplayKit provides an API that


620
00:23:04,126 --> 00:23:06,096
allows extension to communicate


621
00:23:06,096 --> 00:23:08,416
to the user that broadcast


622
00:23:08,416 --> 00:23:10,496
cannot be started and provide a


623
00:23:10,496 --> 00:23:12,006
particular action required to


624
00:23:12,006 --> 00:23:12,816
fix the problem.


625
00:23:13,316 --> 00:23:16,186
And the way it works, the


626
00:23:16,186 --> 00:23:19,116
extension calls some API


627
00:23:19,116 --> 00:23:20,886
function and ReplayKit will


628
00:23:20,886 --> 00:23:22,866
terminate the session and


629
00:23:22,906 --> 00:23:26,006
present the user the alert that


630
00:23:26,816 --> 00:23:29,406
will include the failure reason


631
00:23:29,636 --> 00:23:31,486
provided by the extension, and


632
00:23:31,486 --> 00:23:33,226
in this example this error


633
00:23:33,226 --> 00:23:34,956
message is from Mobcrush and it


634
00:23:34,956 --> 00:23:37,116
says that user is not logged in.


635
00:23:37,116 --> 00:23:41,316
So next is the user tabs at


636
00:23:41,316 --> 00:23:43,266
bottom go to the application,


637
00:23:44,096 --> 00:23:45,976
ReplayKit is launching your


638
00:23:45,976 --> 00:23:47,596
application and what you need to


639
00:23:47,596 --> 00:23:49,576
do there is handle this case in


640
00:23:49,576 --> 00:23:51,446
some way, present the UI by user


641
00:23:51,446 --> 00:23:53,166
will sign in or sign up, and the


642
00:23:53,166 --> 00:23:54,706
next time the broadcast will


643
00:23:54,706 --> 00:23:55,246
just work.


644
00:23:57,236 --> 00:23:59,566
So we have this code sample for


645
00:23:59,686 --> 00:24:01,736
the broadcastStarted before, and


646
00:24:01,846 --> 00:24:03,466
here I want to show you how do


647
00:24:03,466 --> 00:24:04,836
you handle this case when user


648
00:24:04,836 --> 00:24:05,726
is not logged in.


649
00:24:06,326 --> 00:24:07,946
So there's a function called


650
00:24:08,316 --> 00:24:11,416
finishBroadcastWithError, and


651
00:24:11,416 --> 00:24:13,246
what you need to do is provide


652
00:24:14,146 --> 00:24:15,746
the user info dictionary with a


653
00:24:15,746 --> 00:24:18,966
failure reason and ReplayKit is


654
00:24:18,966 --> 00:24:20,916
going to use that string and


655
00:24:20,916 --> 00:24:22,346
allow that is shown after the


656
00:24:22,346 --> 00:24:22,976
session is stopped.


657
00:24:29,686 --> 00:24:34,246
Okay. This is how you develop


658
00:24:34,246 --> 00:24:36,906
the broadcast extension, and as


659
00:24:36,906 --> 00:24:39,076
you see, the process is pretty


660
00:24:39,076 --> 00:24:39,726
straightforward.


661
00:24:40,296 --> 00:24:42,736
The application handles the


662
00:24:42,736 --> 00:24:44,786
broadcast setup and then


663
00:24:44,786 --> 00:24:45,616
communicates that info to the


664
00:24:45,616 --> 00:24:45,976
extension.


665
00:24:50,366 --> 00:24:52,396
And after that the session


666
00:24:52,396 --> 00:24:53,756
starts and you receive and


667
00:24:53,756 --> 00:24:56,086
encode the media samples.


668
00:24:56,876 --> 00:24:58,226
And also, you can get


669
00:24:58,226 --> 00:24:59,696
information about application on


670
00:24:59,696 --> 00:25:00,906
the screen so the viewers could


671
00:25:01,276 --> 00:25:03,726
find your broadcast.


672
00:25:05,016 --> 00:25:06,896
And so just one more point I


673
00:25:06,896 --> 00:25:08,476
would like to discuss today.


674
00:25:10,136 --> 00:25:12,726
This is protecting content of


675
00:25:12,726 --> 00:25:13,546
your applications.


676
00:25:14,816 --> 00:25:17,116
So your app may display some


677
00:25:17,286 --> 00:25:18,736
content that you don't want to


678
00:25:18,736 --> 00:25:21,526
be captured in screen recording


679
00:25:21,646 --> 00:25:23,076
or live broadcasts.


680
00:25:24,186 --> 00:25:26,436
That applies to both audio and


681
00:25:26,436 --> 00:25:28,296
visual content.


682
00:25:29,716 --> 00:25:31,616
There's an API that you can use


683
00:25:31,616 --> 00:25:33,796
to tell if your content is being


684
00:25:33,796 --> 00:25:35,926
captured and that API is


685
00:25:35,926 --> 00:25:38,926
provided UIKit framework and I'm


686
00:25:38,926 --> 00:25:40,476
talking about the property of


687
00:25:40,506 --> 00:25:42,706
UIScreen called Captured.


688
00:25:43,096 --> 00:25:45,496
So you can register to receive


689
00:25:45,496 --> 00:25:47,416
notifications whenever the value


690
00:25:47,416 --> 00:25:50,056
of this property is changed and


691
00:25:50,226 --> 00:25:52,166
stop your audio playback or hide


692
00:25:52,166 --> 00:25:54,796
the visual content when


693
00:25:54,796 --> 00:25:55,606
recording starts.


694
00:25:56,796 --> 00:25:58,726
There's also a special case that


695
00:25:58,726 --> 00:26:00,556
you need to take care of, which


696
00:26:00,556 --> 00:26:03,886
is Airplay Screen Mirroring, and


697
00:26:04,226 --> 00:26:05,386
I would like to show you how you


698
00:26:05,386 --> 00:26:07,236
could do this using this code


699
00:26:07,236 --> 00:26:08,956
example for the notification


700
00:26:08,956 --> 00:26:09,496
handler.


701
00:26:10,246 --> 00:26:12,796
And basically, in the case of a


702
00:26:12,796 --> 00:26:14,526
screen mirroring there's always


703
00:26:14,566 --> 00:26:16,496
more than one screen and this


704
00:26:16,496 --> 00:26:18,316
array called Screens is going to


705
00:26:18,316 --> 00:26:20,506
have more than one element, and


706
00:26:20,786 --> 00:26:22,776
even though that isCaptured is


707
00:26:22,776 --> 00:26:24,686
going to return yes during the


708
00:26:24,686 --> 00:26:26,906
screen mirroring session, we


709
00:26:26,906 --> 00:26:28,506
have this extra check that will


710
00:26:28,506 --> 00:26:30,386
allow your playback to continue.


711
00:26:30,896 --> 00:26:36,116
So this is the Live Screen


712
00:26:36,556 --> 00:26:37,826
Broadcast and how it really


713
00:26:37,826 --> 00:26:38,316
works.


714
00:26:38,316 --> 00:26:41,266
And to summarize, ReplayKit


715
00:26:41,266 --> 00:26:42,966
provides high level API that


716
00:26:42,966 --> 00:26:44,696
allows your broadcast content of


717
00:26:44,696 --> 00:26:47,736
just one app or all your


718
00:26:47,736 --> 00:26:48,716
onscreen activity.


719
00:26:50,116 --> 00:26:53,416
In iOS 12 we provide you an API


720
00:26:53,936 --> 00:26:55,466
or a way to initiate the system


721
00:26:55,466 --> 00:26:57,126
broadcast directly from your


722
00:26:57,126 --> 00:26:58,306
broadcast application.


723
00:26:59,756 --> 00:27:01,756
And what you actually need to


724
00:27:01,756 --> 00:27:03,876
code is a broadcast extension


725
00:27:04,166 --> 00:27:06,206
that does all the actual work of


726
00:27:06,206 --> 00:27:08,906
encoding the video.


727
00:27:09,026 --> 00:27:11,126
And also, we just discussed the


728
00:27:11,126 --> 00:27:12,696
way to protect the content of


729
00:27:12,696 --> 00:27:12,936
your apps.


730
00:27:17,336 --> 00:27:19,146
You can find more information on


731
00:27:19,146 --> 00:27:21,606
the website of our talk and we


732
00:27:21,606 --> 00:27:22,966
also will be having the


733
00:27:22,966 --> 00:27:25,156
ReplayKit labs later today at


734
00:27:25,156 --> 00:27:26,716
3:00 p.m. in the Technology Lab


735
00:27:26,806 --> 00:27:28,716
5, so if you have any questions


736
00:27:28,766 --> 00:27:30,396
or comments, please come.


737
00:27:30,396 --> 00:27:31,586
We'd love to hear from you.


738
00:27:33,596 --> 00:27:35,436
So thank you so much for being


739
00:27:35,436 --> 00:27:36,806
here with us today.


740
00:27:36,936 --> 00:27:38,116
We are really excited of


741
00:27:38,116 --> 00:27:40,036
bringing you the new approach


742
00:27:40,636 --> 00:27:42,376
for live stream broadcast in iOS


743
00:27:42,376 --> 00:27:44,356
and looking forward to see test


744
00:27:44,356 --> 00:27:46,026
applications adopting it.


745
00:27:46,616 --> 00:27:49,096
So please go ahead, create your


746
00:27:49,156 --> 00:27:51,186
first broadcast extension using


747
00:27:51,186 --> 00:27:53,356
the Xcode template, or open your


748
00:27:53,356 --> 00:27:56,026
existing project and add the


749
00:27:56,276 --> 00:27:58,426
broadcast picker to your app and


750
00:27:58,426 --> 00:27:59,866
enable live stream broadcast


751
00:28:00,106 --> 00:28:02,256
from iOS to your platform today.


752
00:28:02,256 --> 00:28:02,976
Thank you.


753
00:28:03,508 --> 00:28:05,508
[ Applause ]

