1
00:00:07,516 --> 00:00:14,500
[ Music ]


2
00:00:18,316 --> 00:00:21,796
>> Ladies and gentlemen, please


3
00:00:21,796 --> 00:00:22,946
welcome Vice President of


4
00:00:22,946 --> 00:00:23,426
Software, Sebastian


5
00:00:23,426 --> 00:00:23,976
Marineau-Mes.


6
00:00:24,516 --> 00:00:31,796
[ Applause ]


7
00:00:32,296 --> 00:00:34,136
>> Good afternoon, everyone.


8
00:00:34,606 --> 00:00:36,046
Welcome to the afternoon session


9
00:00:36,046 --> 00:00:38,416
of WWDC 2018.


10
00:00:39,166 --> 00:00:40,906
Now, we had a really, really


11
00:00:40,906 --> 00:00:42,226
great session this morning.


12
00:00:42,446 --> 00:00:43,476
I think you all enjoyed the


13
00:00:43,476 --> 00:00:44,446
keynote?


14
00:00:44,546 --> 00:00:45,456
Lots of great things were


15
00:00:45,456 --> 00:00:46,086
presented.


16
00:00:46,086 --> 00:00:48,166
And I think you saw that 2018 is


17
00:00:48,166 --> 00:00:49,736
a year with a strong focus on


18
00:00:49,736 --> 00:00:51,516
the fundamentals across our


19
00:00:51,516 --> 00:00:53,586
entire ecosystem where we pushed


20
00:00:53,586 --> 00:00:55,446
the boundaries in key technology


21
00:00:55,446 --> 00:00:55,816
areas.


22
00:00:56,636 --> 00:00:57,976
We're introducing numerous APIs


23
00:00:57,976 --> 00:01:00,326
and capabilities that enable new


24
00:01:00,326 --> 00:01:02,356
experiences covering a broad


25
00:01:02,356 --> 00:01:03,466
spectrum that ranges from


26
00:01:03,466 --> 00:01:05,056
machine learning, augmented


27
00:01:05,056 --> 00:01:06,566
reality, high performance


28
00:01:06,566 --> 00:01:08,446
graphics and of course, new


29
00:01:08,446 --> 00:01:09,236
development tools.


30
00:01:10,146 --> 00:01:11,686
Now, many of the improvements in


31
00:01:11,686 --> 00:01:13,456
the APIs apply to all of our


32
00:01:13,456 --> 00:01:15,396
operating systems so they all


33
00:01:15,396 --> 00:01:16,736
move forward together.


34
00:01:17,116 --> 00:01:18,856
And iCloud provides the fabric


35
00:01:18,856 --> 00:01:20,496
that enables a unified and


36
00:01:20,496 --> 00:01:23,056
consistent experience across all


37
00:01:23,056 --> 00:01:23,836
of our devices.


38
00:01:24,956 --> 00:01:27,166
In iOS 12, we've seen a huge


39
00:01:27,166 --> 00:01:28,126
number of incredible new


40
00:01:28,126 --> 00:01:29,706
features including these great


41
00:01:29,706 --> 00:01:31,476
new capabilities in AR, the


42
00:01:31,476 --> 00:01:32,906
camera effects in Messages,


43
00:01:33,276 --> 00:01:35,756
multi-way FaceTime, usage data


44
00:01:35,976 --> 00:01:38,136
with Screen Time, richer photos


45
00:01:38,136 --> 00:01:40,366
and of course, a great focus on


46
00:01:40,366 --> 00:01:40,946
performance.


47
00:01:41,906 --> 00:01:44,186
And with macOS, we're really


48
00:01:44,186 --> 00:01:46,266
excited to introduce Dark Mode,


49
00:01:46,556 --> 00:01:48,246
New Finder on desktop features,


50
00:01:48,736 --> 00:01:51,246
new apps like news and stocks, a


51
00:01:51,246 --> 00:01:53,306
redesigned Mac App Store, and a


52
00:01:53,306 --> 00:01:55,146
strong focus on security and


53
00:01:55,146 --> 00:01:58,406
privacy, watchOS 5 brings


54
00:01:58,496 --> 00:01:59,876
customizable interactive


55
00:01:59,876 --> 00:02:02,166
notifications, support for your


56
00:02:02,166 --> 00:02:03,906
app content and shortcuts on the


57
00:02:04,006 --> 00:02:05,966
Siri Watch face, background


58
00:02:05,966 --> 00:02:08,356
audio mode and improved workout


59
00:02:08,356 --> 00:02:08,626
API.


60
00:02:08,626 --> 00:02:12,526
And in tvOS, we're adding Dolby


61
00:02:12,526 --> 00:02:14,276
Atmos support so that video apps


62
00:02:14,276 --> 00:02:16,016
can deliver immersive audio


63
00:02:16,016 --> 00:02:16,736
experiences.


64
00:02:16,736 --> 00:02:17,706
We heard that this morning,


65
00:02:17,706 --> 00:02:18,386
really amazing.


66
00:02:18,886 --> 00:02:20,636
Secure password sharing from iOS


67
00:02:20,636 --> 00:02:22,596
devices so it makes it really


68
00:02:22,596 --> 00:02:23,686
easy to slide into through Apple


69
00:02:23,686 --> 00:02:26,376
TV apps, VPP support and


70
00:02:26,376 --> 00:02:28,416
enhancements to UIKit and TV ML


71
00:02:28,416 --> 00:02:30,816
Kit to make it even easier for


72
00:02:30,816 --> 00:02:32,136
you to build native apps that


73
00:02:32,136 --> 00:02:33,296
look and feel great.


74
00:02:34,526 --> 00:02:36,526
Now our great products are


75
00:02:36,526 --> 00:02:38,156
platforms and all of your apps


76
00:02:38,466 --> 00:02:39,676
truly impact the world.


77
00:02:39,676 --> 00:02:40,866
And when you think of the


78
00:02:40,866 --> 00:02:42,196
breadth and the scale of our


79
00:02:42,196 --> 00:02:44,126
ecosystem, it really makes us an


80
00:02:44,126 --> 00:02:45,866
essential part of our users'


81
00:02:45,866 --> 00:02:46,166
life.


82
00:02:47,016 --> 00:02:48,386
Be it helping them explore their


83
00:02:48,386 --> 00:02:50,516
creativity, connecting with the


84
00:02:50,516 --> 00:02:52,956
people they care most about or


85
00:02:52,956 --> 00:02:54,276
transforming the way that


86
00:02:54,276 --> 00:02:56,656
healthcare is delivered, we


87
00:02:56,656 --> 00:02:58,536
together focus on what's most


88
00:02:58,536 --> 00:03:00,416
important to our users and we


89
00:03:00,416 --> 00:03:02,396
deliver these great experiences.


90
00:03:03,586 --> 00:03:04,966
Now we think technology is most


91
00:03:05,016 --> 00:03:06,646
powerful when it empowers


92
00:03:06,936 --> 00:03:07,576
everyone.


93
00:03:08,506 --> 00:03:10,116
And so we work to make every


94
00:03:10,116 --> 00:03:12,636
Apple product accessible from


95
00:03:12,636 --> 00:03:13,456
the very start.


96
00:03:14,176 --> 00:03:15,826
We provide great capabilities


97
00:03:16,226 --> 00:03:18,026
that make our platforms and all


98
00:03:18,026 --> 00:03:19,816
of your apps accessible and we


99
00:03:19,816 --> 00:03:21,166
want to encourage you to take,


100
00:03:21,166 --> 00:03:22,496
keep taking advantage of these


101
00:03:22,866 --> 00:03:24,316
because it's really important to


102
00:03:24,316 --> 00:03:24,996
those users.


103
00:03:26,416 --> 00:03:28,166
Now, our users also entrust us


104
00:03:28,166 --> 00:03:29,786
with their most precious data.


105
00:03:30,216 --> 00:03:31,676
And so at Apple, we think deeply


106
00:03:31,676 --> 00:03:33,096
about privacy and security.


107
00:03:33,566 --> 00:03:35,216
And I'd like to invite Katie up


108
00:03:35,216 --> 00:03:36,756
on stage to tell you more about


109
00:03:36,756 --> 00:03:36,846
this.


110
00:03:36,846 --> 00:03:36,976
Katie?


111
00:03:37,516 --> 00:03:45,096
[ Applause ]


112
00:03:45,596 --> 00:03:46,246
>> Thanks, Sebastian.


113
00:03:46,246 --> 00:03:49,176
When we think about privacy, we


114
00:03:49,176 --> 00:03:51,066
think about how to build privacy


115
00:03:51,066 --> 00:03:52,236
into all their products and


116
00:03:52,236 --> 00:03:52,646
services.


117
00:03:52,646 --> 00:03:54,376
And there could be a lot of


118
00:03:54,376 --> 00:03:55,586
details to think about.


119
00:03:55,906 --> 00:03:57,006
But it's important to think of


120
00:03:57,006 --> 00:03:58,836
the big picture, trust.


121
00:03:58,836 --> 00:04:01,776
Now it's up to all of us to


122
00:04:01,776 --> 00:04:03,306
ensure that users can protect,


123
00:04:03,306 --> 00:04:06,306
can trust us to protect their


124
00:04:06,306 --> 00:04:07,426
most sensitive data.


125
00:04:08,056 --> 00:04:09,946
From financial data to


126
00:04:09,946 --> 00:04:12,446
communications to location and


127
00:04:12,446 --> 00:04:15,556
photos, trust is crucial as


128
00:04:15,556 --> 00:04:17,476
technology becomes more and more


129
00:04:17,476 --> 00:04:19,516
integrated into our lives.


130
00:04:20,016 --> 00:04:21,526
So how can you build trust with


131
00:04:21,526 --> 00:04:22,146
your users?


132
00:04:22,946 --> 00:04:25,366
We focus on four key pillars and


133
00:04:25,366 --> 00:04:26,606
let me show you an example of


134
00:04:26,606 --> 00:04:26,996
each.


135
00:04:28,286 --> 00:04:30,136
Now, we don't require users to


136
00:04:30,206 --> 00:04:32,186
sign into Maps but instead we


137
00:04:32,186 --> 00:04:34,296
use rotating random identifiers


138
00:04:34,676 --> 00:04:36,016
that can't be tied to an Apple


139
00:04:36,016 --> 00:04:38,366
ID to enable relevant results.


140
00:04:39,636 --> 00:04:41,926
We use on-device intelligence to


141
00:04:41,926 --> 00:04:43,906
enable powerful features like


142
00:04:43,906 --> 00:04:46,046
search and memories in photos


143
00:04:46,576 --> 00:04:49,466
without analyzing photos in the


144
00:04:50,016 --> 00:04:50,146
cloud.


145
00:04:50,326 --> 00:04:52,846
We designed Face ID so all Face


146
00:04:53,006 --> 00:04:55,106
ID data is encrypted, protected


147
00:04:55,106 --> 00:04:56,886
by the Secure Enclave and


148
00:04:56,886 --> 00:04:58,226
doesn't ever leave your device.


149
00:04:59,636 --> 00:05:01,266
And when we collect users' data


150
00:05:01,816 --> 00:05:03,076
or allow a third party to


151
00:05:03,076 --> 00:05:05,186
collect data like photos, we


152
00:05:05,186 --> 00:05:06,376
make sure we do so with the


153
00:05:06,376 --> 00:05:07,046
user's consent.


154
00:05:07,176 --> 00:05:09,886
So let's dive a little bit


155
00:05:09,886 --> 00:05:11,466
deeper into transparency and


156
00:05:11,466 --> 00:05:12,266
control.


157
00:05:12,916 --> 00:05:14,386
You have all seen these alerts


158
00:05:14,386 --> 00:05:16,026
when you request access to


159
00:05:16,026 --> 00:05:18,036
location or photos.


160
00:05:18,036 --> 00:05:20,506
And this alert includes a


161
00:05:20,506 --> 00:05:21,326
purpose string.


162
00:05:21,596 --> 00:05:23,606
Now this is what you provide in


163
00:05:23,606 --> 00:05:25,236
order to explain why you're


164
00:05:25,236 --> 00:05:27,446
requesting data and how you will


165
00:05:27,516 --> 00:05:28,366
use that data.


166
00:05:29,316 --> 00:05:31,036
Now a good string includes a


167
00:05:31,036 --> 00:05:32,966
clear explanation of what


168
00:05:32,966 --> 00:05:36,566
features it will enable and what


169
00:05:36,566 --> 00:05:38,236
functionality it will improve.


170
00:05:39,636 --> 00:05:42,186
Now, the more specific you are


171
00:05:42,186 --> 00:05:44,206
with your users, the more likely


172
00:05:44,206 --> 00:05:45,936
they are to grant you access.


173
00:05:47,516 --> 00:05:48,876
We think it's critically


174
00:05:48,876 --> 00:05:51,276
important to understand and for


175
00:05:51,276 --> 00:05:53,016
users to understand how their


176
00:05:53,016 --> 00:05:53,966
data will be used.


177
00:05:54,636 --> 00:05:56,756
So app review is paying closer


178
00:05:56,756 --> 00:05:58,146
attention to these purpose


179
00:05:58,146 --> 00:05:58,426
strings.


180
00:05:59,106 --> 00:06:01,176
So if you have a purpose string


181
00:06:01,176 --> 00:06:03,256
like this, which you know, it's


182
00:06:03,256 --> 00:06:05,686
clearly not valid, you may get


183
00:06:05,686 --> 00:06:06,666
dinged by app review.


184
00:06:06,666 --> 00:06:10,736
Now this string technically


185
00:06:10,736 --> 00:06:12,326
explains how data will be used.


186
00:06:12,976 --> 00:06:15,656
But it lacks detail so it's


187
00:06:15,656 --> 00:06:17,566
really hard for your user to


188
00:06:17,566 --> 00:06:20,286
make a decision.


189
00:06:20,356 --> 00:06:22,806
Now some users may have concerns


190
00:06:22,806 --> 00:06:24,326
about granting your app


191
00:06:24,586 --> 00:06:27,366
microphone access but it may be


192
00:06:27,366 --> 00:06:29,436
key to your app's functionality.


193
00:06:30,116 --> 00:06:31,706
So that's why it's important to


194
00:06:31,706 --> 00:06:33,386
have a clear purpose string like


195
00:06:33,436 --> 00:06:35,876
this one that explains exactly


196
00:06:35,876 --> 00:06:38,456
how you are going to use the


197
00:06:39,356 --> 00:06:39,496
data.


198
00:06:39,646 --> 00:06:41,476
Now great features don't have to


199
00:06:41,476 --> 00:06:42,946
be at the expense of privacy.


200
00:06:43,436 --> 00:06:45,506
But instead can support them by


201
00:06:45,506 --> 00:06:47,276
making it clear to users how


202
00:06:47,276 --> 00:06:48,176
you're going to protect their


203
00:06:48,176 --> 00:06:48,976
data and how it's being used.


204
00:06:54,276 --> 00:06:55,766
Now, we care deeply about


205
00:06:55,846 --> 00:06:56,426
security.


206
00:06:56,846 --> 00:06:58,436
And in order to protect all the


207
00:06:58,506 --> 00:07:00,706
sensitive data that resides on


208
00:07:00,706 --> 00:07:03,176
the device in apps and in the


209
00:07:03,176 --> 00:07:05,166
cloud, we think about security


210
00:07:05,166 --> 00:07:06,076
holistically.


211
00:07:06,806 --> 00:07:09,336
And we provide technologies to


212
00:07:09,336 --> 00:07:11,556
make it easy for you to build


213
00:07:11,616 --> 00:07:12,976
secure apps.


214
00:07:13,076 --> 00:07:14,606
Here's a few examples of the


215
00:07:14,606 --> 00:07:16,016
technologies that we provide.


216
00:07:17,336 --> 00:07:20,876
On iOS, we automatically encrypt


217
00:07:20,876 --> 00:07:22,316
app data by default.


218
00:07:23,416 --> 00:07:25,736
Over the network, App Transport


219
00:07:25,736 --> 00:07:27,506
Security means you never have to


220
00:07:27,506 --> 00:07:29,186
patch client networking


221
00:07:29,186 --> 00:07:29,816
libraries again.


222
00:07:31,516 --> 00:07:33,506
Now in CloudKit in the cloud,


223
00:07:33,506 --> 00:07:35,836
CloudKit securely stores and


224
00:07:35,936 --> 00:07:37,856
syncs data across devices.


225
00:07:39,186 --> 00:07:40,736
Letting you focus on building a


226
00:07:40,736 --> 00:07:42,546
great experience for your users


227
00:07:42,866 --> 00:07:44,186
without having to worry about


228
00:07:44,186 --> 00:07:46,446
managing account state or your


229
00:07:46,446 --> 00:07:47,326
cloud credentials.


230
00:07:48,076 --> 00:07:50,456
And it enables you to take the


231
00:07:50,456 --> 00:07:51,876
best, advantage the best


232
00:07:51,876 --> 00:07:54,026
in-class security including


233
00:07:54,026 --> 00:07:55,726
built-in two-factor


234
00:07:55,726 --> 00:07:56,466
authentication.


235
00:07:57,256 --> 00:07:59,076
Since its launch three years


236
00:07:59,076 --> 00:08:01,546
ago, more than two-thirds of


237
00:08:01,546 --> 00:08:03,766
Apple ID accounts have adopted


238
00:08:03,766 --> 00:08:05,536
two-factor authentication.


239
00:08:06,506 --> 00:08:08,956
This is a huge success compared


240
00:08:08,956 --> 00:08:10,206
to the rest of the industry


241
00:08:10,576 --> 00:08:13,196
where we see less than 10% of


242
00:08:13,196 --> 00:08:15,086
accounts protected by two-factor


243
00:08:15,086 --> 00:08:15,796
authentication.


244
00:08:16,686 --> 00:08:18,396
But this is very important to


245
00:08:18,396 --> 00:08:18,556
us.


246
00:08:19,206 --> 00:08:21,866
And we work continuously to make


247
00:08:21,866 --> 00:08:24,126
our users' accounts more secure


248
00:08:24,686 --> 00:08:26,396
so you're the only person who


249
00:08:26,396 --> 00:08:28,906
can access your account even if


250
00:08:28,906 --> 00:08:30,006
someone else knows your


251
00:08:30,006 --> 00:08:30,566
password.


252
00:08:31,146 --> 00:08:35,216
And new in iOS 12, we're making


253
00:08:35,216 --> 00:08:36,836
using passwords more convenient


254
00:08:37,015 --> 00:08:39,356
and more secure for you and your


255
00:08:39,356 --> 00:08:39,826
users.


256
00:08:41,416 --> 00:08:42,956
We all know that a secure


257
00:08:42,956 --> 00:08:44,646
password is critically important


258
00:08:44,976 --> 00:08:47,236
to keeping your information and


259
00:08:47,236 --> 00:08:48,546
your identity secure.


260
00:08:49,926 --> 00:08:51,936
But they can be hard to remember


261
00:08:51,936 --> 00:08:54,586
and it's tempting to use weak or


262
00:08:54,586 --> 00:08:55,656
reuse passwords.


263
00:08:56,416 --> 00:08:57,886
And this creates problems for


264
00:08:57,886 --> 00:08:59,506
you as a developer as well.


265
00:09:00,606 --> 00:09:03,236
Now, users may abandon account


266
00:09:03,306 --> 00:09:05,076
sign up and you have to deal


267
00:09:05,076 --> 00:09:06,386
with password reset requests.


268
00:09:07,536 --> 00:09:09,276
But worst of all, is the


269
00:09:09,276 --> 00:09:10,736
potential for compromised


270
00:09:10,736 --> 00:09:13,026
accounts due to weak passwords.


271
00:09:13,766 --> 00:09:18,036
So we have a solution -- iOS 12


272
00:09:18,036 --> 00:09:19,926
makes it easy for you and your


273
00:09:19,926 --> 00:09:21,696
users to always use a strong


274
00:09:21,976 --> 00:09:24,116
unique password by creating,


275
00:09:24,406 --> 00:09:26,006
storing and AutoFilling the


276
00:09:26,006 --> 00:09:26,606
password.


277
00:09:27,426 --> 00:09:29,826
But the really great thing is it


278
00:09:30,076 --> 00:09:31,816
will also work automatically in


279
00:09:31,816 --> 00:09:34,066
your iOS app too so they always


280
00:09:34,066 --> 00:09:35,936
get a strong password no matter


281
00:09:35,936 --> 00:09:38,016
where they create an account and


282
00:09:38,016 --> 00:09:39,386
it syncs to all of their


283
00:09:39,386 --> 00:09:39,766
devices.


284
00:09:39,766 --> 00:09:42,586
Now it couldn't be easier to


285
00:09:42,586 --> 00:09:43,896
offer automatic strong


286
00:09:43,896 --> 00:09:44,396
passwords.


287
00:09:45,066 --> 00:09:46,206
In fact, you may not need to


288
00:09:46,206 --> 00:09:47,536
make any changes within your


289
00:09:48,626 --> 00:09:48,696
app.


290
00:09:48,696 --> 00:09:51,396
So to ensure it just works, you


291
00:09:51,396 --> 00:09:53,126
need to associate your app with


292
00:09:53,126 --> 00:09:53,736
the domain.


293
00:09:54,416 --> 00:09:55,786
You may have already done this


294
00:09:56,196 --> 00:09:57,686
if you have adopted universal


295
00:09:57,686 --> 00:09:57,966
links.


296
00:09:59,326 --> 00:10:00,316
Then you need to label your user


297
00:10:00,316 --> 00:10:00,976
name and password fields.


298
00:10:01,056 --> 00:10:04,056
And if the passwords don't meet


299
00:10:04,056 --> 00:10:06,786
your app requirements, now you


300
00:10:06,786 --> 00:10:10,016
can even customize them.


301
00:10:10,216 --> 00:10:11,886
We've also made it easier for


302
00:10:11,886 --> 00:10:13,256
your users to get to their


303
00:10:13,256 --> 00:10:13,866
passwords.


304
00:10:14,796 --> 00:10:16,596
They can just ask Siri and once


305
00:10:16,596 --> 00:10:17,806
they've authenticated, they're


306
00:10:17,996 --> 00:10:19,476
taken right to their password


307
00:10:19,476 --> 00:10:19,666
list.


308
00:10:21,126 --> 00:10:23,256
And on top of that, to help


309
00:10:23,256 --> 00:10:25,486
clear up old password since,


310
00:10:26,216 --> 00:10:27,556
we're making it really easy to


311
00:10:27,556 --> 00:10:29,826
tell if any of your passwords


312
00:10:29,826 --> 00:10:31,516
have been reused across your


313
00:10:31,516 --> 00:10:32,456
existing accounts.


314
00:10:33,176 --> 00:10:35,846
Your iPhone would flag these


315
00:10:35,876 --> 00:10:37,456
passwords and take you right to


316
00:10:37,456 --> 00:10:39,136
the website where you'll be able


317
00:10:39,136 --> 00:10:40,766
to replace it with a strong


318
00:10:40,766 --> 00:10:41,326
password.


319
00:10:44,076 --> 00:10:45,796
We're also make it easier to


320
00:10:45,796 --> 00:10:47,076
deal with those one-time


321
00:10:47,076 --> 00:10:49,326
passcodes that are texted to you


322
00:10:49,616 --> 00:10:51,486
and your users much more


323
00:10:51,486 --> 00:10:52,106
convenient.


324
00:10:53,646 --> 00:10:54,886
They'll automatically appear


325
00:10:54,886 --> 00:10:57,176
right in the click tap bar and


326
00:10:57,176 --> 00:10:58,736
you can fill them in with just a


327
00:10:58,736 --> 00:10:58,856
tap.


328
00:10:59,516 --> 00:11:05,876
[ Applause ]


329
00:11:06,376 --> 00:11:08,026
We're also creating a new


330
00:11:08,026 --> 00:11:10,306
extension point for third-party


331
00:11:10,306 --> 00:11:12,586
password managers to enable them


332
00:11:12,586 --> 00:11:15,116
to supply passwords for AutoFill


333
00:11:15,116 --> 00:11:15,966
and apps in Safari.


334
00:11:16,516 --> 00:11:22,646
[ Applause ]


335
00:11:23,146 --> 00:11:24,906
Now these features work across


336
00:11:24,906 --> 00:11:27,896
iOS, the Mac and even Apple TV


337
00:11:28,176 --> 00:11:30,616
for a great experience across


338
00:11:30,616 --> 00:11:33,376
your Apple devices.


339
00:11:33,586 --> 00:11:35,566
We care deeply about privacy and


340
00:11:35,566 --> 00:11:36,146
security.


341
00:11:36,146 --> 00:11:38,266
And they're foundational to all


342
00:11:38,266 --> 00:11:38,906
of our products.


343
00:11:39,566 --> 00:11:42,686
So we provide the ability for


344
00:11:42,686 --> 00:11:44,696
you to build on this foundation


345
00:11:45,076 --> 00:11:47,726
to protect, secure and earn your


346
00:11:47,726 --> 00:11:48,536
users' trust.


347
00:11:49,156 --> 00:11:50,346
And now, handing it back to


348
00:11:50,606 --> 00:11:50,976
Sebastian.


349
00:11:51,516 --> 00:11:57,976
[ Applause ]


350
00:11:58,476 --> 00:11:59,266
>> Thank you, Katie.


351
00:11:59,586 --> 00:12:00,856
Isn't -- aren't these new


352
00:12:00,856 --> 00:12:02,436
password features amazing?


353
00:12:02,736 --> 00:12:03,676
Really, really great.


354
00:12:03,676 --> 00:12:04,326
That was great.


355
00:12:04,456 --> 00:12:05,046
Thank you.


356
00:12:06,096 --> 00:12:07,996
Now, ultimately, we also promise


357
00:12:07,996 --> 00:12:10,076
our users great experiences.


358
00:12:10,256 --> 00:12:11,606
And we usually think about great


359
00:12:11,606 --> 00:12:14,326
experiences as being great


360
00:12:14,326 --> 00:12:15,336
innovative features.


361
00:12:16,556 --> 00:12:17,926
But equally important is not to


362
00:12:17,926 --> 00:12:19,556
compromise that delight with


363
00:12:19,556 --> 00:12:21,576
unpredictable and slow software.


364
00:12:22,436 --> 00:12:23,796
This is top of mind for the


365
00:12:23,796 --> 00:12:24,956
Apple Engineering Team.


366
00:12:25,586 --> 00:12:27,326
We develop tools and practices


367
00:12:27,326 --> 00:12:28,396
that help us with this.


368
00:12:28,396 --> 00:12:30,576
And then we work to bring these


369
00:12:30,636 --> 00:12:32,396
same tools to all of you so that


370
00:12:32,396 --> 00:12:33,676
you can apply them through


371
00:12:33,676 --> 00:12:34,376
applications.


372
00:12:35,306 --> 00:12:36,586
Available to you are a number of


373
00:12:36,586 --> 00:12:38,956
tools and techniques to help you


374
00:12:38,956 --> 00:12:40,196
make your code more reliable and


375
00:12:40,196 --> 00:12:40,976
robust.


376
00:12:41,326 --> 00:12:42,356
It's important for your app to


377
00:12:42,356 --> 00:12:43,066
be predictable.


378
00:12:43,596 --> 00:12:45,006
And of course, making your app


379
00:12:45,006 --> 00:12:46,406
run fast is critical.


380
00:12:46,406 --> 00:12:47,746
And for that, we have a number


381
00:12:47,746 --> 00:12:49,136
of performance tools at your


382
00:12:49,136 --> 00:12:49,706
disposal.


383
00:12:50,586 --> 00:12:51,696
Now we understand that


384
00:12:51,696 --> 00:12:53,656
optimizing performance across


385
00:12:53,686 --> 00:12:55,416
complex systems and applications


386
00:12:55,686 --> 00:12:56,456
is challenging.


387
00:12:56,986 --> 00:12:59,006
And this year, we worked a lot


388
00:12:59,006 --> 00:12:59,696
on this.


389
00:12:59,986 --> 00:13:01,086
We've developed a lot of new


390
00:13:01,086 --> 00:13:02,806
tools and techniques and want to


391
00:13:02,806 --> 00:13:03,936
bring you some of these powerful


392
00:13:03,936 --> 00:13:04,736
new capabilities.


393
00:13:05,496 --> 00:13:07,696
So in Xcode 10, we've extended


394
00:13:07,696 --> 00:13:09,276
instruments capabilities and


395
00:13:09,496 --> 00:13:10,856
enabled you to take it even


396
00:13:10,856 --> 00:13:12,216
further with your own custom


397
00:13:12,216 --> 00:13:13,466
tools and work flows.


398
00:13:14,286 --> 00:13:15,706
Now this all starts from a


399
00:13:15,706 --> 00:13:16,806
legacy API.


400
00:13:17,106 --> 00:13:18,246
Some of you may know this and


401
00:13:18,246 --> 00:13:19,196
have used it.


402
00:13:19,616 --> 00:13:21,126
I know I'm guilty of it --


403
00:13:21,596 --> 00:13:23,286
printf, it's like the Swiss Army


404
00:13:23,286 --> 00:13:24,316
knife of APIs.


405
00:13:24,316 --> 00:13:25,816
We use it to debug and trace


406
00:13:25,816 --> 00:13:27,276
through our code but we all know


407
00:13:27,276 --> 00:13:28,166
that it's slow.


408
00:13:28,676 --> 00:13:30,156
And so two years ago, we brought


409
00:13:30,156 --> 00:13:32,546
you this new API called os log.


410
00:13:32,906 --> 00:13:34,266
It's an efficient and performant


411
00:13:34,266 --> 00:13:36,266
API that captures logs and


412
00:13:36,266 --> 00:13:38,006
tracepoints across all levels of


413
00:13:38,006 --> 00:13:38,626
the system.


414
00:13:39,076 --> 00:13:41,366
It's fast and lightweight and if


415
00:13:41,366 --> 00:13:42,836
you've not adopted it already,


416
00:13:42,836 --> 00:13:43,436
you really should.


417
00:13:43,436 --> 00:13:43,926
It's great.


418
00:13:44,566 --> 00:13:45,796
And our newest addition this


419
00:13:45,796 --> 00:13:47,466
year builds on top of os log and


420
00:13:47,466 --> 00:13:49,336
it's called os signpost.


421
00:13:50,016 --> 00:13:51,326
It's a powerful technique that


422
00:13:51,376 --> 00:13:53,656
provides rich, contextual data


423
00:13:53,656 --> 00:13:55,776
for your application in a format


424
00:13:55,776 --> 00:13:57,606
that instruments can interpret.


425
00:13:57,606 --> 00:13:59,996
So you could use signpost to


426
00:13:59,996 --> 00:14:01,816
trace through your code and you


427
00:14:01,816 --> 00:14:03,786
can also use it to bookend


428
00:14:03,936 --> 00:14:05,476
critical sections of your


429
00:14:05,476 --> 00:14:05,986
functions.


430
00:14:06,586 --> 00:14:08,226
And once you have the data, the


431
00:14:08,226 --> 00:14:09,986
real power comes in the built-in


432
00:14:10,306 --> 00:14:11,276
custom instruments


433
00:14:11,446 --> 00:14:12,266
visualization.


434
00:14:13,256 --> 00:14:14,756
Now, we have this new Custom


435
00:14:14,756 --> 00:14:16,656
Instruments support and the best


436
00:14:16,656 --> 00:14:18,086
way to convey the full power of


437
00:14:18,086 --> 00:14:19,556
this, I think, is through demo


438
00:14:19,846 --> 00:14:21,236
so Ken will show us what our


439
00:14:21,236 --> 00:14:21,886
tools can do.


440
00:14:21,886 --> 00:14:21,976
Ken?


441
00:14:22,516 --> 00:14:28,066
[ Applause ]


442
00:14:28,566 --> 00:14:29,536
>> Thank you, Sebastian.


443
00:14:30,176 --> 00:14:31,416
So I'm working on my Solar


444
00:14:31,416 --> 00:14:33,086
System Exploration app here.


445
00:14:33,656 --> 00:14:35,186
And I've noticed I've got a


446
00:14:35,186 --> 00:14:36,376
little bit of a performance


447
00:14:36,416 --> 00:14:36,746
problem.


448
00:14:36,996 --> 00:14:38,506
So every time the app goes to


449
00:14:38,506 --> 00:14:39,646
update its data, you know, when


450
00:14:39,646 --> 00:14:40,846
it launches or when I press


451
00:14:41,126 --> 00:14:43,106
command R like that, you can see


452
00:14:43,106 --> 00:14:45,306
the UI, it gets really choppy.


453
00:14:45,756 --> 00:14:46,576
The planets, they kind of


454
00:14:46,576 --> 00:14:47,766
stutter as they move around


455
00:14:47,766 --> 00:14:48,486
their orbits.


456
00:14:48,936 --> 00:14:49,786
And then once the update


457
00:14:49,786 --> 00:14:51,586
completes, well, it's pretty


458
00:14:51,586 --> 00:14:52,006
smooth.


459
00:14:52,556 --> 00:14:53,556
So I want to figure out what's


460
00:14:53,556 --> 00:14:54,126
going on here.


461
00:14:55,166 --> 00:14:56,996
Now back over in my code,


462
00:14:57,906 --> 00:15:00,426
PlanetUpdateService.swift --


463
00:15:00,426 --> 00:15:02,106
this is the file that handles


464
00:15:02,106 --> 00:15:03,056
that planetary update.


465
00:15:03,056 --> 00:15:05,096
So I want to add some logs, some


466
00:15:05,176 --> 00:15:06,926
signposts to help me understand


467
00:15:06,926 --> 00:15:08,266
what's going on in my code.


468
00:15:08,266 --> 00:15:10,696
So I'm going to start by adding


469
00:15:10,746 --> 00:15:11,506
a log handle.


470
00:15:11,676 --> 00:15:13,566
So I'm going to use the new


471
00:15:13,566 --> 00:15:17,296
pointsOfInterest category.


472
00:15:17,396 --> 00:15:19,536
Now this is a special new


473
00:15:19,536 --> 00:15:20,166
category.


474
00:15:20,676 --> 00:15:22,276
Anything that I log with it is


475
00:15:22,346 --> 00:15:23,636
automatically going to show up


476
00:15:23,636 --> 00:15:24,846
right inside instruments.


477
00:15:25,426 --> 00:15:27,256
Now, the first thing I want to


478
00:15:27,256 --> 00:15:29,956
see is when we kick off this


479
00:15:30,036 --> 00:15:30,596
update.


480
00:15:30,596 --> 00:15:32,276
And that happens in this method.


481
00:15:32,276 --> 00:15:33,756
So I'm going to add my first log


482
00:15:33,756 --> 00:15:34,906
statement here.


483
00:15:34,906 --> 00:15:36,186
I'm going to say requesting


484
00:15:36,186 --> 00:15:37,846
planet data so that we could see


485
00:15:37,846 --> 00:15:38,176
that.


486
00:15:39,296 --> 00:15:40,656
And then what I really want to


487
00:15:40,656 --> 00:15:43,156
know is how long is it taking to


488
00:15:43,156 --> 00:15:45,706
process and parse all the data


489
00:15:45,776 --> 00:15:46,666
that I'm doing here?


490
00:15:47,476 --> 00:15:49,646
So right here is where that


491
00:15:49,646 --> 00:15:50,336
happens.


492
00:15:50,796 --> 00:15:52,476
And to help me visualize this,


493
00:15:52,476 --> 00:15:53,196
I'm going to add a couple of


494
00:15:53,196 --> 00:15:53,906
signposts.


495
00:15:54,476 --> 00:15:55,866
So the first signpost is going


496
00:15:56,666 --> 00:15:58,946
to be a begin-type signpost


497
00:15:58,946 --> 00:16:00,666
here, just before I start doing


498
00:16:00,666 --> 00:16:00,966
the work.


499
00:16:00,966 --> 00:16:02,526
Then I'm going to add another


500
00:16:02,526 --> 00:16:05,206
signpost right here after I


501
00:16:05,206 --> 00:16:06,226
finish doing the work.


502
00:16:06,456 --> 00:16:08,166
That's an end-type signpost.


503
00:16:08,166 --> 00:16:09,056
So this is going to create a


504
00:16:09,056 --> 00:16:09,986
time interval for me,


505
00:16:10,706 --> 00:16:11,646
automatically calculate the


506
00:16:11,646 --> 00:16:13,436
delta and surface that right up


507
00:16:13,436 --> 00:16:14,196
through instruments.


508
00:16:15,056 --> 00:16:16,626
So let's profile this in


509
00:16:16,626 --> 00:16:17,956
Instruments and see what kind of


510
00:16:17,956 --> 00:16:18,486
data we get.


511
00:16:19,296 --> 00:16:21,236
So I go to Product, select


512
00:16:21,386 --> 00:16:22,546
Profile.


513
00:16:22,806 --> 00:16:24,086
Xcode's going to build my app,


514
00:16:24,876 --> 00:16:26,456
launch Instruments and then


515
00:16:26,486 --> 00:16:27,816
we'll start to see, well, we'll


516
00:16:27,816 --> 00:16:29,446
start seeing data stream in


517
00:16:29,976 --> 00:16:30,066
here.


518
00:16:30,486 --> 00:16:31,506
Now right here, you can see the


519
00:16:31,506 --> 00:16:32,536
pointsOfInterest track.


520
00:16:33,156 --> 00:16:34,596
So everything that I was logging


521
00:16:34,596 --> 00:16:35,376
with the pointsOfInterest


522
00:16:35,376 --> 00:16:37,236
category, that shows up here so


523
00:16:37,236 --> 00:16:38,026
this is my data.


524
00:16:38,756 --> 00:16:39,566
I want to zoom in.


525
00:16:39,566 --> 00:16:40,816
So I'm going to hold on Option


526
00:16:40,816 --> 00:16:42,026
and click and drag so we can get


527
00:16:42,026 --> 00:16:43,016
a closer look.


528
00:16:43,746 --> 00:16:45,086
And we can see this little flag


529
00:16:45,086 --> 00:16:46,226
right here that says requesting


530
00:16:46,226 --> 00:16:46,766
planet data.


531
00:16:47,326 --> 00:16:48,876
So that's a result of the first


532
00:16:48,876 --> 00:16:50,136
log I added in my code.


533
00:16:51,056 --> 00:16:52,506
Then these blue bars right here,


534
00:16:52,996 --> 00:16:54,746
this is where I'm processing and


535
00:16:54,746 --> 00:16:55,376
parsing data.


536
00:16:55,626 --> 00:16:56,866
So those are the results of the


537
00:16:56,866 --> 00:16:58,126
signpost I added.


538
00:16:58,906 --> 00:17:00,406
Now, as I look at this, I think


539
00:17:00,406 --> 00:17:02,126
I see what the problem might be


540
00:17:02,126 --> 00:17:02,626
right away.


541
00:17:02,886 --> 00:17:04,256
So every time I go to process


542
00:17:04,306 --> 00:17:05,756
data and parse it here, I can


543
00:17:05,756 --> 00:17:07,336
see a corresponding spike in the


544
00:17:07,336 --> 00:17:08,846
CPU use on the main thread.


545
00:17:08,846 --> 00:17:11,096
And to me, that is a bright red


546
00:17:11,096 --> 00:17:13,376
flag that I'm probably parsing


547
00:17:13,376 --> 00:17:14,886
and processing this on the main


548
00:17:14,886 --> 00:17:15,126
thread.


549
00:17:15,746 --> 00:17:17,326
Not a recipe for a smooth UI.


550
00:17:18,066 --> 00:17:19,876
So with just a log statement, a


551
00:17:19,876 --> 00:17:21,256
couple of signposts, you could


552
00:17:21,256 --> 00:17:22,366
see I can start to get some


553
00:17:22,366 --> 00:17:23,876
really great insight into the


554
00:17:23,876 --> 00:17:26,236
performance of my app.


555
00:17:26,486 --> 00:17:28,465
Now the new tools, they let you


556
00:17:28,465 --> 00:17:29,866
do way more than that.


557
00:17:30,286 --> 00:17:32,516
So with Xcode 10, there's a new


558
00:17:32,516 --> 00:17:34,366
template that lets you create a


559
00:17:34,546 --> 00:17:36,506
fully customized Instruments


560
00:17:36,686 --> 00:17:37,296
package.


561
00:17:37,786 --> 00:17:38,836
Now, one of my team mates, he's


562
00:17:38,836 --> 00:17:40,286
gone ahead and built one based


563
00:17:40,286 --> 00:17:41,686
on some network, some signposts


564
00:17:41,686 --> 00:17:43,386
that he added to our networking


565
00:17:43,596 --> 00:17:44,006
framework.


566
00:17:44,456 --> 00:17:45,516
And I've got the latest version


567
00:17:45,516 --> 00:17:46,796
he sent me here in my downloads.


568
00:17:47,236 --> 00:17:50,056
So let me open that up and when


569
00:17:50,056 --> 00:17:51,576
I do, Instruments offers to


570
00:17:51,576 --> 00:17:52,446
install it for me.


571
00:17:53,036 --> 00:17:54,376
So I'll say install.


572
00:17:54,786 --> 00:17:56,056
And now you'll see, I've got a


573
00:17:56,056 --> 00:17:56,756
new template.


574
00:17:56,756 --> 00:17:57,636
Here are my templates.


575
00:17:57,636 --> 00:17:58,696
These are called Solar Systems.


576
00:17:58,696 --> 00:17:59,866
I'm going to double click that.


577
00:17:59,866 --> 00:18:02,516
And then we'll start recording


578
00:18:02,516 --> 00:18:03,126
data again.


579
00:18:04,136 --> 00:18:05,826
Now, just like before, I have


580
00:18:05,826 --> 00:18:07,136
the pointsOfInterest tracked so


581
00:18:07,136 --> 00:18:08,126
that is on the data that I


582
00:18:08,126 --> 00:18:08,896
wanted to see.


583
00:18:09,436 --> 00:18:11,356
But now, I've got much more


584
00:18:11,356 --> 00:18:13,096
detailed information about the


585
00:18:13,096 --> 00:18:14,486
networking request that I'm


586
00:18:14,486 --> 00:18:15,076
making here.


587
00:18:15,536 --> 00:18:16,506
So again, let me zoom in so we


588
00:18:16,506 --> 00:18:16,976
can get a closer look.


589
00:18:22,406 --> 00:18:24,136
Now, this custom Instruments


590
00:18:24,466 --> 00:18:26,536
package here is giving me a


591
00:18:26,536 --> 00:18:28,706
great visualization into how I'm


592
00:18:28,706 --> 00:18:30,566
using this framework.


593
00:18:31,016 --> 00:18:32,426
So it's showing me things like


594
00:18:32,626 --> 00:18:34,226
for example here, how many


595
00:18:34,226 --> 00:18:35,746
network requests am I making on


596
00:18:35,746 --> 00:18:37,506
average every 10th of a second.


597
00:18:38,226 --> 00:18:39,456
Then down here, this track is


598
00:18:39,456 --> 00:18:41,256
showing me detailed information


599
00:18:41,256 --> 00:18:43,096
about each and every network


600
00:18:43,096 --> 00:18:43,536
request.


601
00:18:43,796 --> 00:18:44,726
How long did it take?


602
00:18:45,026 --> 00:18:46,326
It's even highlighting duplicate


603
00:18:46,326 --> 00:18:47,396
requests in red.


604
00:18:47,756 --> 00:18:48,766
So these are places where I'm


605
00:18:48,946 --> 00:18:50,386
asking for the exact same data


606
00:18:50,386 --> 00:18:51,816
more than once.


607
00:18:51,816 --> 00:18:53,066
It looks like I'm doing that


608
00:18:53,146 --> 00:18:55,186
maybe even more than 50% of the


609
00:18:55,186 --> 00:18:55,406
time.


610
00:18:55,666 --> 00:18:56,836
So I'm just leaving a ton of


611
00:18:56,836 --> 00:18:58,056
performance on the table and


612
00:18:58,536 --> 00:18:59,816
it's exactly these kinds of


613
00:18:59,816 --> 00:19:01,796
insights that I need to help me


614
00:19:01,796 --> 00:19:03,516
use this framework more


615
00:19:03,516 --> 00:19:04,086
effectively.


616
00:19:04,766 --> 00:19:07,126
So signposts, Custom Instruments


617
00:19:07,126 --> 00:19:09,146
packages, two really great new


618
00:19:09,146 --> 00:19:10,926
ways for you to visualize your


619
00:19:10,926 --> 00:19:12,516
data right in Instruments.


620
00:19:12,856 --> 00:19:13,566
And that's a look at the new


621
00:19:13,566 --> 00:19:14,316
performance tools.


622
00:19:14,476 --> 00:19:14,976
Sebastian?


623
00:19:15,516 --> 00:19:19,546
[ Applause ]


624
00:19:20,046 --> 00:19:20,356
>> All right.


625
00:19:20,706 --> 00:19:21,476
Thank you, Ken.


626
00:19:21,476 --> 00:19:23,116
That's a really, really amazing


627
00:19:23,116 --> 00:19:23,866
demo.


628
00:19:23,866 --> 00:19:25,276
Really great tools that all of


629
00:19:25,276 --> 00:19:27,046
you can use to make your apps


630
00:19:27,556 --> 00:19:28,856
run even faster.


631
00:19:29,796 --> 00:19:32,396
Now, to recap, we just reviewed


632
00:19:32,396 --> 00:19:33,886
a lot of great tools and best


633
00:19:33,886 --> 00:19:35,726
practices that we can use to


634
00:19:35,726 --> 00:19:37,626
ensure that we delight our users


635
00:19:37,896 --> 00:19:38,746
and keep their trust.


636
00:19:39,656 --> 00:19:41,676
Now, I'd like to turn our


637
00:19:41,676 --> 00:19:42,976
attention to the Mac.


638
00:19:43,186 --> 00:19:46,516
OS X was launched 17 years ago


639
00:19:46,516 --> 00:19:48,336
and we've constantly pushed the


640
00:19:48,336 --> 00:19:49,366
platform forward.


641
00:19:50,016 --> 00:19:53,346
64-bit support in Leopard, MacOS


642
00:19:53,346 --> 00:19:54,386
Mountain Lion introduced


643
00:19:54,386 --> 00:19:56,246
Gatekeeper, a key step forward


644
00:19:56,246 --> 00:19:56,976
in Mac security.


645
00:19:57,046 --> 00:19:59,296
And one of our key missions is


646
00:19:59,296 --> 00:20:00,626
to always push the Mac forward


647
00:20:00,626 --> 00:20:02,546
by extending its capabilities to


648
00:20:02,546 --> 00:20:03,766
take advantage of the latest


649
00:20:03,766 --> 00:20:04,436
technologies.


650
00:20:05,146 --> 00:20:06,236
But as we push the platform


651
00:20:06,236 --> 00:20:08,096
forward, we sometimes have to


652
00:20:08,096 --> 00:20:09,866
deprecate legacy functionality


653
00:20:10,166 --> 00:20:11,886
to ensure that we're not holding


654
00:20:11,886 --> 00:20:12,376
it back.


655
00:20:13,476 --> 00:20:14,986
Last year, we announced that


656
00:20:14,986 --> 00:20:16,976
High Sierra was the last MacOS


657
00:20:16,976 --> 00:20:19,046
release to fully support 32-bit


658
00:20:19,046 --> 00:20:20,766
apps without compromise.


659
00:20:21,586 --> 00:20:23,276
And this year, we're announcing


660
00:20:23,276 --> 00:20:25,326
that MacOS Mojave is the last


661
00:20:25,326 --> 00:20:27,756
release to support 32-bit at


662
00:20:27,756 --> 00:20:28,076
all.


663
00:20:29,346 --> 00:20:30,946
So as we remove 32-bit support


664
00:20:30,946 --> 00:20:33,286
next year, these 32-bit only


665
00:20:33,356 --> 00:20:35,256
frameworks will also be removed


666
00:20:35,256 --> 00:20:36,726
such as the QuickTime framework


667
00:20:37,036 --> 00:20:38,796
and the Apple Java framework.


668
00:20:39,336 --> 00:20:42,746
Next, let's look at security on


669
00:20:42,746 --> 00:20:43,126
the Mac.


670
00:20:43,696 --> 00:20:45,186
Gatekeeper has done a great job


671
00:20:45,186 --> 00:20:46,576
at avoiding large-scale malware


672
00:20:46,576 --> 00:20:48,456
attacks and this year, we want


673
00:20:48,456 --> 00:20:49,786
to push it even further.


674
00:20:50,666 --> 00:20:52,086
We're extending user consent,


675
00:20:52,436 --> 00:20:54,176
enhancing run time security and


676
00:20:54,176 --> 00:20:55,586
we're launching a new Notary


677
00:20:55,646 --> 00:20:56,006
Service.


678
00:20:56,246 --> 00:20:57,536
So let's look at these in more


679
00:20:57,536 --> 00:20:57,966
detail.


680
00:20:59,296 --> 00:21:00,986
As you heard this morning, we're


681
00:21:00,986 --> 00:21:02,086
extending the protections


682
00:21:02,086 --> 00:21:03,986
afforded to sensitive system


683
00:21:03,986 --> 00:21:04,666
resources.


684
00:21:05,976 --> 00:21:06,816
We've added camera and


685
00:21:06,816 --> 00:21:08,676
microphone and we now require


686
00:21:08,676 --> 00:21:10,936
user consent for API and direct


687
00:21:10,936 --> 00:21:12,626
access to all these resources.


688
00:21:13,606 --> 00:21:14,706
What does it mean in practice?


689
00:21:15,636 --> 00:21:16,376
Well, it means that your


690
00:21:16,376 --> 00:21:17,846
application has to gracefully


691
00:21:17,846 --> 00:21:19,466
handle those calls potentially


692
00:21:19,466 --> 00:21:22,156
blocking or failing as the user


693
00:21:22,156 --> 00:21:22,986
provides consent.


694
00:21:24,796 --> 00:21:26,076
It's also a really great idea,


695
00:21:26,076 --> 00:21:27,456
as Katie has pointed out, to


696
00:21:27,456 --> 00:21:28,546
provide meaningful purpose


697
00:21:28,546 --> 00:21:30,316
strings so when the user is


698
00:21:30,316 --> 00:21:31,226
faced with one of these


699
00:21:31,266 --> 00:21:33,326
dialogues, they understand why


700
00:21:33,326 --> 00:21:34,756
your app needs access.


701
00:21:35,396 --> 00:21:37,996
We're also going further in


702
00:21:37,996 --> 00:21:39,806
protecting sensitive user data.


703
00:21:40,456 --> 00:21:42,036
And only specialized apps like


704
00:21:42,036 --> 00:21:44,106
backup tools require access to


705
00:21:44,106 --> 00:21:45,006
this kind of data.


706
00:21:45,416 --> 00:21:46,396
And so we'll protect these


707
00:21:46,396 --> 00:21:48,336
locations by requiring user


708
00:21:48,336 --> 00:21:50,666
consent directly in the security


709
00:21:50,666 --> 00:21:53,776
and privacy preference pane.


710
00:21:53,946 --> 00:21:55,236
Next, we're introducing


711
00:21:55,236 --> 00:21:56,616
enhancements to run time


712
00:21:56,616 --> 00:21:57,246
protections.


713
00:21:58,086 --> 00:21:58,876
Now, a number of you have


714
00:21:58,876 --> 00:22:01,036
requested a way to extend the


715
00:22:01,146 --> 00:22:02,846
zip protections to your own


716
00:22:02,846 --> 00:22:03,146
apps.


717
00:22:03,886 --> 00:22:05,896
And our new enhanced run times,


718
00:22:05,936 --> 00:22:07,446
there's a new security baseline


719
00:22:07,736 --> 00:22:09,466
that requires risky capabilities


720
00:22:09,826 --> 00:22:10,726
to be opted in.


721
00:22:11,376 --> 00:22:12,456
So beyond strong code


722
00:22:12,456 --> 00:22:14,656
validation, if for example also


723
00:22:14,656 --> 00:22:16,056
protects your apps from code


724
00:22:16,056 --> 00:22:16,606
injection.


725
00:22:17,526 --> 00:22:18,826
The enhanced run time is fully


726
00:22:18,826 --> 00:22:19,906
backwards compatible.


727
00:22:20,146 --> 00:22:21,816
It's opt in through a simple


728
00:22:21,896 --> 00:22:23,176
switch in Xcode.


729
00:22:24,636 --> 00:22:25,876
And finally, we're introducing


730
00:22:25,876 --> 00:22:28,446
the concept of notarized apps.


731
00:22:28,996 --> 00:22:30,416
This is an extension to the


732
00:22:30,416 --> 00:22:32,036
Developer ID program for apps


733
00:22:32,036 --> 00:22:33,706
that are distributed outside of


734
00:22:33,706 --> 00:22:34,596
the Mac App Store.


735
00:22:34,596 --> 00:22:35,896
And it has two main goals.


736
00:22:36,406 --> 00:22:38,266
The first is to detect malware


737
00:22:38,266 --> 00:22:40,356
even faster than today before it


738
00:22:40,356 --> 00:22:41,746
gets distributed to our users.


739
00:22:42,346 --> 00:22:43,736
And second, provide a


740
00:22:43,826 --> 00:22:45,026
finer-grained revocation


741
00:22:45,026 --> 00:22:46,846
capability so that we can revoke


742
00:22:46,846 --> 00:22:48,256
a specific version of a


743
00:22:48,256 --> 00:22:50,246
compromised app as opposed to


744
00:22:50,246 --> 00:22:52,326
revoking the entire signing


745
00:22:52,326 --> 00:22:52,946
certificate.


746
00:22:53,786 --> 00:22:54,816
Now here's how it works.


747
00:22:55,316 --> 00:22:56,846
You develop the bug and build


748
00:22:56,846 --> 00:22:57,866
your app as before.


749
00:22:57,866 --> 00:22:59,126
And you sign it with your


750
00:22:59,126 --> 00:23:00,426
Developer ID Certificate.


751
00:23:01,096 --> 00:23:02,356
But before distributing it to


752
00:23:02,356 --> 00:23:04,156
your users, you submit to the


753
00:23:04,156 --> 00:23:05,626
Developer ID Notary Service.


754
00:23:06,336 --> 00:23:08,336
Once notarized, you distribute


755
00:23:08,526 --> 00:23:09,556
the app through your existing


756
00:23:09,556 --> 00:23:09,986
channel.


757
00:23:11,186 --> 00:23:13,266
Once your user runs the app on


758
00:23:13,266 --> 00:23:15,536
their system, MacOS Mojave will


759
00:23:15,536 --> 00:23:16,826
check with the Notary Service to


760
00:23:16,826 --> 00:23:18,006
make sure the app is properly


761
00:23:18,006 --> 00:23:20,556
notarized and is not known to be


762
00:23:20,556 --> 00:23:21,056
malicious.


763
00:23:22,106 --> 00:23:24,336
Now, the service is not app


764
00:23:24,336 --> 00:23:25,026
review.


765
00:23:25,026 --> 00:23:26,186
There are no new guidelines


766
00:23:26,186 --> 00:23:27,926
being imposed on Developer ID


767
00:23:27,926 --> 00:23:29,496
apps as a result of the Notary


768
00:23:29,556 --> 00:23:29,906
Service.


769
00:23:30,256 --> 00:23:32,216
It is used exclusively to


770
00:23:32,216 --> 00:23:34,156
analyze apps for security


771
00:23:34,156 --> 00:23:34,726
purposes.


772
00:23:35,996 --> 00:23:37,796
A future version of MacOS will


773
00:23:37,796 --> 00:23:40,316
require all Developer ID apps to


774
00:23:40,316 --> 00:23:41,546
be notarized by the service


775
00:23:41,546 --> 00:23:43,136
before they can be installed so


776
00:23:43,216 --> 00:23:44,356
we want you to get ready.


777
00:23:44,356 --> 00:23:46,616
It's available in beta today.


778
00:23:46,616 --> 00:23:48,596
We encourage you to try it out


779
00:23:48,596 --> 00:23:49,876
and give us feedback.


780
00:23:50,996 --> 00:23:52,136
And those are the enhancements


781
00:23:52,186 --> 00:23:54,846
to Gatekeeper in MacOS Mojave.


782
00:23:55,276 --> 00:23:56,796
Let's now switch gears and talk


783
00:23:56,796 --> 00:23:58,626
about the MacOS user experience.


784
00:23:59,056 --> 00:24:00,496
And to do that, I'd like to


785
00:24:00,496 --> 00:24:01,746
invite Kristen up on stage.


786
00:24:01,746 --> 00:24:01,976
Kristen?


787
00:24:02,516 --> 00:24:05,546
[ Applause ]


788
00:24:06,046 --> 00:24:06,906
>> Thank you, Sebastian.


789
00:24:06,906 --> 00:24:07,766
I'm excited to be here.


790
00:24:08,556 --> 00:24:09,806
We have a lot of great features


791
00:24:09,806 --> 00:24:11,546
in MacOS Mojave including


792
00:24:11,546 --> 00:24:12,656
improvements to Finder,


793
00:24:12,896 --> 00:24:14,836
SnapShots and desktops docs.


794
00:24:15,116 --> 00:24:17,046
I'd like to focus on one in


795
00:24:17,046 --> 00:24:18,166
particular that you, as


796
00:24:18,166 --> 00:24:19,466
developers, can take advantage


797
00:24:19,466 --> 00:24:19,536
of.


798
00:24:19,536 --> 00:24:20,956
And that's Quick Actions.


799
00:24:21,646 --> 00:24:26,746
With Finder Quick Actions, we've


800
00:24:26,746 --> 00:24:28,296
embedded the tools you need


801
00:24:28,296 --> 00:24:29,826
right where you need them in the


802
00:24:29,826 --> 00:24:30,846
Finder preview pane.


803
00:24:31,826 --> 00:24:33,766
You can perform common actions


804
00:24:33,826 --> 00:24:35,166
on your files without ever


805
00:24:35,166 --> 00:24:35,866
leaving Finder.


806
00:24:36,586 --> 00:24:38,646
And there's different actions


807
00:24:38,646 --> 00:24:39,626
for different file types.


808
00:24:39,626 --> 00:24:41,456
As you can see here with video


809
00:24:41,456 --> 00:24:46,366
and here, with a PDF.


810
00:24:47,416 --> 00:24:48,506
And it's not just built-in


811
00:24:48,576 --> 00:24:48,876
actions.


812
00:24:49,326 --> 00:24:51,296
We know pro users especially


813
00:24:51,296 --> 00:24:52,196
like to create their own.


814
00:24:52,776 --> 00:24:54,766
And those actions are shown here


815
00:24:54,976 --> 00:24:57,356
in Finder as well.


816
00:24:57,536 --> 00:24:58,856
New developers will be able to


817
00:24:58,856 --> 00:25:00,496
provide custom actions from your


818
00:25:00,496 --> 00:25:01,936
applications using app


819
00:25:01,936 --> 00:25:02,636
extensions.


820
00:25:03,466 --> 00:25:05,366
And as an end-user, you can also


821
00:25:05,366 --> 00:25:07,376
combine shell scripts,


822
00:25:07,376 --> 00:25:09,146
AppleScripts and Automator


823
00:25:09,146 --> 00:25:11,496
Actions in Automator to create


824
00:25:11,496 --> 00:25:12,186
an action bundle.


825
00:25:12,246 --> 00:25:14,816
And these action bundles will be


826
00:25:14,816 --> 00:25:17,046
shown here in Finder as well


827
00:25:17,046 --> 00:25:18,726
based on file type.


828
00:25:19,456 --> 00:25:20,986
These Custom Actions get some


829
00:25:20,986 --> 00:25:23,216
prime real estate in Finder and


830
00:25:23,216 --> 00:25:24,726
even more so in Touch Bar.


831
00:25:25,176 --> 00:25:26,346
Touch Bar is great when


832
00:25:26,346 --> 00:25:26,996
customized.


833
00:25:27,346 --> 00:25:28,686
And you can customize Touch Bar


834
00:25:28,686 --> 00:25:29,906
to show these actions all the


835
00:25:29,906 --> 00:25:31,576
time or on the tap of a button.


836
00:25:33,006 --> 00:25:35,546
Moving on, in the keynote this


837
00:25:35,626 --> 00:25:37,566
morning, you got a sneak peek at


838
00:25:37,566 --> 00:25:39,286
another technology we are really


839
00:25:39,286 --> 00:25:39,906
excited about.


840
00:25:39,906 --> 00:25:42,796
An easy way to bring iOS apps to


841
00:25:43,856 --> 00:25:44,626
the Mac.


842
00:25:44,896 --> 00:25:46,076
We are in the midst of


843
00:25:46,076 --> 00:25:48,016
developing this technology in


844
00:25:48,016 --> 00:25:49,426
the context of these four apps,


845
00:25:49,976 --> 00:25:52,166
News, Stocks, Voice Memos and


846
00:25:52,166 --> 00:25:52,486
Home.


847
00:25:53,216 --> 00:25:57,076
These apps utilize UIKit and


848
00:25:57,336 --> 00:25:59,376
this is a new way to delivery


849
00:25:59,376 --> 00:26:01,746
great Mac apps.


850
00:26:01,746 --> 00:26:03,396
Of course, AppKit is our primary


851
00:26:03,396 --> 00:26:04,846
native framework and it takes


852
00:26:04,846 --> 00:26:06,846
full advantage of all the Mac


853
00:26:06,846 --> 00:26:07,596
has to offer.


854
00:26:07,936 --> 00:26:09,156
And in no way are we


855
00:26:09,156 --> 00:26:11,066
de-emphasizing that.


856
00:26:11,066 --> 00:26:12,286
However, we note that a lot of


857
00:26:12,286 --> 00:26:14,186
you have iOS apps and you don't


858
00:26:14,186 --> 00:26:15,396
have a native Mac experience.


859
00:26:15,396 --> 00:26:17,306
And for these cases, we want you


860
00:26:17,306 --> 00:26:18,476
to -- we want to give you an


861
00:26:18,476 --> 00:26:20,436
easy way to bring your apps to


862
00:26:20,436 --> 00:26:21,226
the Mac as well.


863
00:26:22,346 --> 00:26:24,206
So how are we doing this?


864
00:26:25,216 --> 00:26:27,016
These UIKit apps are running in


865
00:26:27,016 --> 00:26:28,576
a native environment on top of a


866
00:26:28,576 --> 00:26:29,026
native stack.


867
00:26:29,196 --> 00:26:30,856
And if you look closely, you'll


868
00:26:30,856 --> 00:26:32,446
see that the stack below the


869
00:26:32,446 --> 00:26:34,206
UIKit app has a lot in common


870
00:26:34,206 --> 00:26:35,416
with the stack below the AppKit


871
00:26:35,536 --> 00:26:35,976
app.


872
00:26:35,976 --> 00:26:37,616
In fact, these environments were


873
00:26:37,616 --> 00:26:39,336
built on a common foundation


874
00:26:39,596 --> 00:26:40,816
which in some cases has drifted


875
00:26:40,816 --> 00:26:41,676
apart over time.


876
00:26:42,826 --> 00:26:44,696
So we're taking this opportunity


877
00:26:44,846 --> 00:26:46,466
to rationalize the substrate


878
00:26:47,136 --> 00:26:48,546
which is great news for you


879
00:26:48,546 --> 00:26:49,886
developers independent of this


880
00:26:49,886 --> 00:26:51,186
technology because it makes it


881
00:26:51,186 --> 00:26:52,556
easier for you to write portable


882
00:26:52,556 --> 00:26:52,836
code.


883
00:26:53,466 --> 00:26:56,336
These apps get all the typical


884
00:26:56,336 --> 00:26:59,026
Mac features and I'd like to


885
00:26:59,026 --> 00:26:59,976
show that to you now.


886
00:27:14,046 --> 00:27:15,466
You've seen the new Stocks app


887
00:27:15,946 --> 00:27:17,306
for iPad.


888
00:27:17,846 --> 00:27:19,426
I'm running a Mac version of


889
00:27:19,426 --> 00:27:20,486
this app built from the same


890
00:27:20,486 --> 00:27:20,906
sources.


891
00:27:22,046 --> 00:27:23,356
Mouse events are mapped to UI


892
00:27:23,356 --> 00:27:25,336
events so I can click on a


893
00:27:25,336 --> 00:27:27,116
ticker symbol in the watchlist


894
00:27:27,586 --> 00:27:28,636
to see more information.


895
00:27:29,306 --> 00:27:30,896
I can move my mouse over the


896
00:27:30,896 --> 00:27:32,366
interactive chart to see the


897
00:27:32,366 --> 00:27:34,056
price at a point in time and I


898
00:27:34,056 --> 00:27:35,416
can click and drag to see the


899
00:27:35,416 --> 00:27:36,926
price change over a period of


900
00:27:36,926 --> 00:27:37,086
time.


901
00:27:37,736 --> 00:27:39,406
I'm going to click on an article


902
00:27:39,406 --> 00:27:40,626
to open it right here in app.


903
00:27:40,626 --> 00:27:42,666
Now since this is a Mac window,


904
00:27:42,666 --> 00:27:44,766
I can resize it as I would like


905
00:27:45,266 --> 00:27:46,386
and I can also take it full


906
00:27:46,386 --> 00:27:46,686
screen.


907
00:27:46,766 --> 00:27:49,816
I can navigate using two-finger


908
00:27:49,816 --> 00:27:51,466
scroll which is another example


909
00:27:51,466 --> 00:27:52,296
of event mapping.


910
00:27:52,516 --> 00:27:54,216
And if I want to copy some text,


911
00:27:54,216 --> 00:27:57,126
I can select it, pick it up and


912
00:27:57,126 --> 00:28:02,066
drag it and drop it in my Notes


913
00:28:02,376 --> 00:28:02,686
app.


914
00:28:03,016 --> 00:28:04,426
Now in this Note, I have a link


915
00:28:04,586 --> 00:28:06,406
to a news article so I'm going


916
00:28:06,406 --> 00:28:07,826
to click that to open it


917
00:28:07,826 --> 00:28:09,736
directly in News.


918
00:28:10,126 --> 00:28:12,666
And we've populated the menu


919
00:28:12,786 --> 00:28:15,826
with items for this application.


920
00:28:16,126 --> 00:28:17,286
So for example, I can go to the


921
00:28:17,286 --> 00:28:19,036
file menu and I can follow this


922
00:28:19,076 --> 00:28:19,446
channel.


923
00:28:20,316 --> 00:28:22,406
And notice how ESPN appears


924
00:28:22,406 --> 00:28:23,666
directly in my transition


925
00:28:23,666 --> 00:28:24,096
sidebar.


926
00:28:24,916 --> 00:28:26,366
Another Mac touch can be seen in


927
00:28:26,366 --> 00:28:28,136
the toolbar here where there's a


928
00:28:28,136 --> 00:28:29,606
red color contribution coming


929
00:28:29,606 --> 00:28:31,206
from the content underneath it.


930
00:28:31,886 --> 00:28:33,256
Now we have controls for the


931
00:28:33,256 --> 00:28:34,996
window in the toolbar including


932
00:28:34,996 --> 00:28:36,906
the share button so I can click


933
00:28:36,906 --> 00:28:38,266
on the share button to show this


934
00:28:38,266 --> 00:28:39,396
article with a friend.


935
00:28:40,176 --> 00:28:44,186
So that's a quick look at UIKit


936
00:28:44,526 --> 00:28:44,966
apps on the Mac.


937
00:28:45,516 --> 00:28:50,636
[ Applause ]


938
00:28:51,136 --> 00:28:51,676
Now, thank you.


939
00:28:53,376 --> 00:28:54,686
We are continuing to develop


940
00:28:54,716 --> 00:28:56,266
this technology and we are


941
00:28:56,266 --> 00:28:57,756
working to fully vet it before


942
00:28:57,756 --> 00:28:59,316
making it available to you and


943
00:28:59,316 --> 00:29:00,856
your applications which we are


944
00:29:00,856 --> 00:29:02,886
planning to do next year.


945
00:29:04,496 --> 00:29:09,216
Next, Dark Mode -- you've seen


946
00:29:09,406 --> 00:29:12,196
that Dark Mode is a big thing


947
00:29:12,196 --> 00:29:13,966
for MacOS Mojave and we think it


948
00:29:13,966 --> 00:29:14,576
looks stunning.


949
00:29:14,576 --> 00:29:15,956
Let's take a quick tour.


950
00:29:20,076 --> 00:29:21,276
The window background is dark


951
00:29:21,566 --> 00:29:23,786
making the content pop.


952
00:29:24,346 --> 00:29:26,216
The sidebar is translucent and


953
00:29:26,456 --> 00:29:28,556
the content is blended vibrantly


954
00:29:28,976 --> 00:29:31,456
which preserves contrast with


955
00:29:31,486 --> 00:29:32,816
whatever may be underneath the


956
00:29:32,816 --> 00:29:33,076
window.


957
00:29:33,076 --> 00:29:36,506
And in a few cases, we found it


958
00:29:36,506 --> 00:29:38,356
valuable to change the icons


959
00:29:38,356 --> 00:29:40,136
slightly so you can see a slight


960
00:29:40,186 --> 00:29:42,236
darkening of this photo icon and


961
00:29:42,236 --> 00:29:44,126
a new dark trash can.


962
00:29:45,136 --> 00:29:46,346
But there's something very


963
00:29:46,346 --> 00:29:46,946
subtle here.


964
00:29:47,756 --> 00:29:49,176
The window background is


965
00:29:49,176 --> 00:29:50,536
actually picking up a slight


966
00:29:50,536 --> 00:29:52,096
hint of color from the desktop.


967
00:29:53,716 --> 00:29:55,316
To show you what I mean, here is


968
00:29:55,316 --> 00:29:57,296
a window on top of two very


969
00:29:57,296 --> 00:29:57,976
different desktop pictures.


970
00:29:59,736 --> 00:30:01,446
On the left side, there's a


971
00:30:01,446 --> 00:30:02,976
slight blue tint in the window


972
00:30:03,066 --> 00:30:04,746
from that slightly blue desktop


973
00:30:04,776 --> 00:30:05,166
picture.


974
00:30:05,666 --> 00:30:07,346
And on the right side, there's a


975
00:30:07,346 --> 00:30:08,516
slight orange tint from the


976
00:30:08,516 --> 00:30:09,956
predominantly orange desktop


977
00:30:09,996 --> 00:30:10,366
picture.


978
00:30:10,996 --> 00:30:12,406
This is not translucency.


979
00:30:12,406 --> 00:30:13,596
We're actually picking up our


980
00:30:13,596 --> 00:30:14,776
average color from the desktop


981
00:30:14,816 --> 00:30:16,446
and blending it into an opaque


982
00:30:16,496 --> 00:30:16,966
background.


983
00:30:16,966 --> 00:30:18,536
And we do this so that your


984
00:30:18,536 --> 00:30:20,056
window looks harmonious with a


985
00:30:20,056 --> 00:30:21,436
variety of desktop pictures.


986
00:30:21,436 --> 00:30:24,946
Let's look at what you need to


987
00:30:24,946 --> 00:30:26,796
do in your apps to support Dark


988
00:30:26,796 --> 00:30:26,986
Mode.


989
00:30:28,656 --> 00:30:30,516
Because we want to make sure to


990
00:30:30,516 --> 00:30:31,806
preserve compatibility with your


991
00:30:31,806 --> 00:30:32,986
applications, we are not


992
00:30:33,396 --> 00:30:34,836
automatically opting you in.


993
00:30:35,106 --> 00:30:36,426
You need to build against the


994
00:30:36,426 --> 00:30:38,726
MacOS Mojave STKit.


995
00:30:40,046 --> 00:30:42,026
For example, this is how Keynote


996
00:30:42,026 --> 00:30:43,906
looked when we first ran it


997
00:30:44,046 --> 00:30:46,096
after building on Mojave.


998
00:30:47,026 --> 00:30:48,696
It got a dark toolbar but it


999
00:30:48,696 --> 00:30:50,326
didn't otherwise adopt to Dark


1000
00:30:50,386 --> 00:30:51,756
Mode the way we wished.


1001
00:30:53,146 --> 00:30:54,506
The [inaudible] part is drawing


1002
00:30:54,506 --> 00:30:55,606
too light of a background.


1003
00:30:56,396 --> 00:30:58,866
The toolbar controls are faint


1004
00:30:58,866 --> 00:31:00,696
and hard to read.


1005
00:31:01,096 --> 00:31:02,546
The sidebar is the wrong


1006
00:31:02,546 --> 00:31:04,426
material so it's too


1007
00:31:04,426 --> 00:31:05,016
translucent.


1008
00:31:05,016 --> 00:31:11,246
And in the selected segment in


1009
00:31:11,246 --> 00:31:12,906
control, we have a white glyph


1010
00:31:13,086 --> 00:31:14,056
on a white background.


1011
00:31:15,626 --> 00:31:17,266
The good news is these issues


1012
00:31:17,266 --> 00:31:20,426
were all easy to fix.


1013
00:31:20,776 --> 00:31:22,426
We have simple API that support


1014
00:31:22,426 --> 00:31:23,426
all the needs of Dark Mode.


1015
00:31:23,426 --> 00:31:25,536
And in fact, most of these have


1016
00:31:25,536 --> 00:31:26,846
existed for years and we just


1017
00:31:26,846 --> 00:31:29,916
had to augment them a tiny bit.


1018
00:31:29,916 --> 00:31:30,576
There's NSColor.


1019
00:31:32,246 --> 00:31:34,376
There's Container Views with


1020
00:31:34,376 --> 00:31:35,796
background color properties.


1021
00:31:36,926 --> 00:31:38,456
There's Visual Effect View in


1022
00:31:38,456 --> 00:31:39,036
materials.


1023
00:31:40,606 --> 00:31:42,366
There's Template Images and a


1024
00:31:42,366 --> 00:31:44,236
new way to colorize your


1025
00:31:44,236 --> 00:31:44,476
content.


1026
00:31:46,316 --> 00:31:48,456
So we updated Keynote with these


1027
00:31:48,456 --> 00:31:50,476
APIs and this is the result.


1028
00:31:51,196 --> 00:31:51,976
It looks great.


1029
00:31:54,696 --> 00:31:55,906
These were pretty simple


1030
00:31:55,906 --> 00:31:56,416
changes.


1031
00:31:56,666 --> 00:31:58,436
We invite you to try this today.


1032
00:31:59,006 --> 00:32:00,236
If you're already following the


1033
00:32:00,236 --> 00:32:02,076
best practices of using asset


1034
00:32:02,076 --> 00:32:03,596
catalogs in system colors, you


1035
00:32:03,596 --> 00:32:05,136
could be pleasantly surprised at


1036
00:32:05,186 --> 00:32:06,646
how close you already are.


1037
00:32:07,306 --> 00:32:08,556
And since these techniques are


1038
00:32:08,556 --> 00:32:10,486
available on previous releases,


1039
00:32:10,756 --> 00:32:12,146
you can adopt and easily


1040
00:32:12,146 --> 00:32:12,866
back-deploy.


1041
00:32:13,706 --> 00:32:14,976
It, of course, depends on how


1042
00:32:14,976 --> 00:32:16,456
many custom controls you have in


1043
00:32:16,456 --> 00:32:18,256
your applications but for a few


1044
00:32:18,256 --> 00:32:20,356
of our apps, it was as little as


1045
00:32:20,356 --> 00:32:21,786
a day of work.


1046
00:32:22,006 --> 00:32:23,346
We give you some useful tools


1047
00:32:23,346 --> 00:32:24,096
for it as well.


1048
00:32:24,096 --> 00:32:26,536
Well, I'd like to welcome


1049
00:32:26,656 --> 00:32:28,306
Matthew to the stage to show you


1050
00:32:28,306 --> 00:32:30,296
how Xcode 10 supports adoption


1051
00:32:30,296 --> 00:32:31,976
of Dark Mode and much more.


1052
00:32:32,516 --> 00:32:38,726
[ Applause ]


1053
00:32:39,226 --> 00:32:39,916
>> Thank you, Kristen.


1054
00:32:40,676 --> 00:32:42,166
Our Xcode release this year is


1055
00:32:42,166 --> 00:32:43,486
focused on the productivity.


1056
00:32:44,156 --> 00:32:45,116
Work flow improvements,


1057
00:32:45,266 --> 00:32:47,236
performance improvements and new


1058
00:32:47,236 --> 00:32:49,106
feature support in all of our


1059
00:32:50,246 --> 00:32:50,586
STKits.


1060
00:32:50,586 --> 00:32:51,906
And of course, when running on


1061
00:32:51,906 --> 00:32:54,566
MacOS Mojave, Xcode has a whole


1062
00:32:54,566 --> 00:32:55,556
new look and feel.


1063
00:32:56,006 --> 00:32:57,956
So let's start by taking a sneak


1064
00:32:57,956 --> 00:32:59,676
peek at how Xcode can make your


1065
00:32:59,676 --> 00:33:01,786
Mac apps look great in Dark Mode


1066
00:33:01,836 --> 00:33:01,976
too.


1067
00:33:06,046 --> 00:33:07,946
So here we are back in our solar


1068
00:33:07,946 --> 00:33:08,826
system application.


1069
00:33:09,576 --> 00:33:10,886
We've been converting it over to


1070
00:33:10,886 --> 00:33:12,006
Dark Mode and we've made great


1071
00:33:12,006 --> 00:33:12,896
progress so far.


1072
00:33:13,356 --> 00:33:15,036
There's a couple of items left I


1073
00:33:15,036 --> 00:33:15,936
need to finish here.


1074
00:33:16,716 --> 00:33:17,786
There's a darker version of this


1075
00:33:17,786 --> 00:33:19,326
globe my designers have provided


1076
00:33:19,326 --> 00:33:19,746
to us.


1077
00:33:20,036 --> 00:33:21,806
And there's these two hard-coded


1078
00:33:22,006 --> 00:33:23,786
boxes that have colors that I


1079
00:33:23,786 --> 00:33:24,466
need to change.


1080
00:33:25,286 --> 00:33:27,006
Xcode's asset catalogs makes


1081
00:33:27,056 --> 00:33:27,546
this easy.


1082
00:33:28,166 --> 00:33:29,866
Let's start with this image.


1083
00:33:31,026 --> 00:33:32,406
I'll change over to the tab with


1084
00:33:32,406 --> 00:33:34,066
my assets and we can see, I've


1085
00:33:34,066 --> 00:33:35,946
already defined dark variance


1086
00:33:35,996 --> 00:33:37,116
for all of my colors.


1087
00:33:38,496 --> 00:33:39,896
I'll select the group with all


1088
00:33:39,896 --> 00:33:41,576
of my images and here's the


1089
00:33:41,686 --> 00:33:43,026
planet image I'd like to add a


1090
00:33:43,026 --> 00:33:43,926
dark variant for.


1091
00:33:44,796 --> 00:33:45,276
That's easy.


1092
00:33:46,126 --> 00:33:46,796
I'll select it.


1093
00:33:47,426 --> 00:33:49,416
Go in the Inspector and add a


1094
00:33:49,416 --> 00:33:50,096
dark variant.


1095
00:33:50,586 --> 00:33:52,246
And my designers have sent me


1096
00:33:52,246 --> 00:33:53,596
the assets here so I can just


1097
00:33:53,596 --> 00:33:54,606
pull them out of my downloads


1098
00:33:54,606 --> 00:33:56,676
folder and put them into the


1099
00:33:56,676 --> 00:33:57,146
catalog.


1100
00:33:58,176 --> 00:33:58,866
That's it.


1101
00:33:59,536 --> 00:34:00,786
You'll see when I go back to my


1102
00:34:00,786 --> 00:34:02,346
interface now, the globe is


1103
00:34:02,346 --> 00:34:03,886
updated to match the appearance


1104
00:34:04,206 --> 00:34:05,386
of the interface builder canvas.


1105
00:34:07,176 --> 00:34:08,886
Now, I've already specified all


1106
00:34:08,886 --> 00:34:10,096
the color variants that I need.


1107
00:34:10,666 --> 00:34:12,246
So to update these boxes, I'll


1108
00:34:12,246 --> 00:34:14,126
just select both of them, go to


1109
00:34:14,126 --> 00:34:15,666
the Inspector and change the


1110
00:34:15,666 --> 00:34:17,556
fill color to one of my catalog


1111
00:34:17,556 --> 00:34:17,966
colors.


1112
00:34:18,596 --> 00:34:19,846
We'll take the badge background


1113
00:34:19,926 --> 00:34:20,136
color.


1114
00:34:21,356 --> 00:34:22,846
Great, so now my interface is


1115
00:34:22,846 --> 00:34:23,466
looking pretty good.


1116
00:34:24,485 --> 00:34:26,255
Now when designing interfaces, I


1117
00:34:26,255 --> 00:34:27,545
often like to check the other


1118
00:34:27,545 --> 00:34:29,466
appearance as I'm going along to


1119
00:34:29,466 --> 00:34:30,565
evaluate my progress.


1120
00:34:31,326 --> 00:34:32,335
Interface Builder makes this


1121
00:34:32,335 --> 00:34:32,795
easy.


1122
00:34:33,835 --> 00:34:34,896
Down the bottom here, there's a


1123
00:34:34,896 --> 00:34:36,516
new appearance bar that allows


1124
00:34:36,516 --> 00:34:37,886
me to toggle between


1125
00:34:37,886 --> 00:34:38,576
appearances.


1126
00:34:39,356 --> 00:34:40,255
I'll just select the appearance


1127
00:34:40,255 --> 00:34:41,485
on the left and now I'm seeing


1128
00:34:41,485 --> 00:34:42,766
my application in the light


1129
00:34:42,826 --> 00:34:43,565
appearance as well.


1130
00:34:44,266 --> 00:34:45,636
So I can easily evaluate my


1131
00:34:45,676 --> 00:34:46,076
progress.


1132
00:34:46,906 --> 00:34:49,466
Let's run our application and


1133
00:34:49,466 --> 00:34:50,136
see how we've done.


1134
00:34:51,295 --> 00:34:52,536
We'll update our assets and


1135
00:34:52,536 --> 00:34:53,766
we'll launch our application.


1136
00:34:54,505 --> 00:34:55,916
And we'll see here that the


1137
00:34:55,916 --> 00:34:57,106
application launches.


1138
00:34:58,046 --> 00:34:59,356
And great, it's looking pretty


1139
00:34:59,356 --> 00:34:59,606
good.


1140
00:35:00,226 --> 00:35:02,406
Now the application launched in


1141
00:35:02,406 --> 00:35:03,856
the dark mode to match my


1142
00:35:03,936 --> 00:35:04,226
system.


1143
00:35:04,916 --> 00:35:06,466
But while I'm developing, I can


1144
00:35:06,466 --> 00:35:07,556
change the appearance.


1145
00:35:08,486 --> 00:35:09,866
Down here in the debug bar is a


1146
00:35:09,866 --> 00:35:11,516
new appearance toggle that's


1147
00:35:11,516 --> 00:35:13,476
also in Touch Bar, and it gives


1148
00:35:13,476 --> 00:35:14,446
me access to all the


1149
00:35:14,446 --> 00:35:15,146
appearances.


1150
00:35:15,666 --> 00:35:17,366
I can select the light mode, the


1151
00:35:17,366 --> 00:35:19,566
dark mode, even high-contrast


1152
00:35:19,566 --> 00:35:21,196
modes to evaluate accessibility.


1153
00:35:21,966 --> 00:35:23,766
So I'll select the light mode.


1154
00:35:23,766 --> 00:35:25,816
We'll load those assets, and


1155
00:35:25,816 --> 00:35:27,046
there's my application in light


1156
00:35:27,046 --> 00:35:27,446
mode as well.


1157
00:35:28,436 --> 00:35:30,496
So very simply, with asset


1158
00:35:30,496 --> 00:35:32,186
catalogs, interface builder, and


1159
00:35:32,186 --> 00:35:33,946
our debugging tools, it's really


1160
00:35:33,946 --> 00:35:35,176
easy to make your apps look


1161
00:35:35,176 --> 00:35:36,566
great in Dark Mode, too.


1162
00:35:37,516 --> 00:35:45,566
[ Applause ]


1163
00:35:46,066 --> 00:35:47,796
Now I know many of you have


1164
00:35:47,796 --> 00:35:49,456
wanted a dark mode appearance in


1165
00:35:49,566 --> 00:35:50,646
Xcode for a long time.


1166
00:35:51,396 --> 00:35:52,616
It's been one of our most


1167
00:35:52,616 --> 00:35:54,076
popular requests.


1168
00:35:54,076 --> 00:35:55,296
In fact, just a couple weeks


1169
00:35:55,296 --> 00:35:56,686
ago, there was a posting in the


1170
00:35:56,686 --> 00:35:58,596
App Store about this feature.


1171
00:35:58,856 --> 00:36:00,436
It was from a user name Ronnie


1172
00:36:00,436 --> 00:36:02,456
Bo Bonnie.


1173
00:36:02,456 --> 00:36:03,436
This is true -- I'm not making


1174
00:36:03,436 --> 00:36:04,216
this up.


1175
00:36:04,556 --> 00:36:05,556
But I just wanted to take a


1176
00:36:05,556 --> 00:36:07,436
moment and say Ronnie, if you


1177
00:36:07,436 --> 00:36:09,536
are out there, no charge.


1178
00:36:10,516 --> 00:36:12,516
[ Laughter ]


1179
00:36:13,516 --> 00:36:15,866
[ Applause ]


1180
00:36:16,366 --> 00:36:17,586
Now we also have some other


1181
00:36:17,586 --> 00:36:18,906
improvements to our design tools


1182
00:36:18,906 --> 00:36:19,666
to share with you today.


1183
00:36:21,286 --> 00:36:23,256
Form-based UIs like preferences


1184
00:36:23,256 --> 00:36:25,326
and inspectors are common in Mac


1185
00:36:25,776 --> 00:36:25,996
apps.


1186
00:36:26,036 --> 00:36:27,816
And Cocoa's NSGridView is the


1187
00:36:27,816 --> 00:36:29,366
perfect system for laying them


1188
00:36:30,296 --> 00:36:30,396
out.


1189
00:36:30,516 --> 00:36:31,766
So we're bringing the power of


1190
00:36:31,876 --> 00:36:33,656
NSGridView right into Interface


1191
00:36:33,656 --> 00:36:35,496
Builder where you can now design


1192
00:36:35,496 --> 00:36:37,166
your column- and row-based UIs


1193
00:36:37,506 --> 00:36:39,126
just like working with tables in


1194
00:36:39,126 --> 00:36:39,606
a spreadsheet.


1195
00:36:40,636 --> 00:36:41,676
Drag-and-drop content [applause]


1196
00:36:42,206 --> 00:36:42,696
-- yes.


1197
00:36:44,786 --> 00:36:48,696
Yeah, you can clap for that.


1198
00:36:48,806 --> 00:36:49,756
Spreadsheets can be cool.


1199
00:36:49,756 --> 00:36:52,866
You can drag-and-drop content,


1200
00:36:52,906 --> 00:36:54,476
use contextual actions, and you


1201
00:36:54,476 --> 00:36:56,296
get system access to things like


1202
00:36:56,356 --> 00:36:57,436
right-to-left layout.


1203
00:36:58,456 --> 00:36:59,476
Now when designing your


1204
00:36:59,476 --> 00:37:01,166
interfaces, the library is an


1205
00:37:01,266 --> 00:37:02,796
important tool, and we have a


1206
00:37:02,796 --> 00:37:04,046
whole new workflow for you


1207
00:37:04,676 --> 00:37:05,956
because the library is now


1208
00:37:06,126 --> 00:37:07,466
separate from the inspectors.


1209
00:37:08,246 --> 00:37:09,596
You can now take the library and


1210
00:37:09,596 --> 00:37:10,906
reposition it wherever you want.


1211
00:37:11,556 --> 00:37:13,196
you can adjust the size to match


1212
00:37:13,196 --> 00:37:13,666
your layout.


1213
00:37:14,286 --> 00:37:15,846
And you can keep the library up


1214
00:37:15,846 --> 00:37:17,276
while working or have it


1215
00:37:17,276 --> 00:37:18,746
automatically dismiss when you


1216
00:37:18,746 --> 00:37:18,966
are done.


1217
00:37:19,516 --> 00:37:25,066
[ Applause ]


1218
00:37:25,566 --> 00:37:26,896
And the library works great with


1219
00:37:26,896 --> 00:37:28,176
all of our content types,


1220
00:37:28,246 --> 00:37:29,946
including media and code


1221
00:37:31,056 --> 00:37:31,596
snippets.


1222
00:37:31,596 --> 00:37:32,746
And finally, with our design


1223
00:37:32,746 --> 00:37:33,876
tools, you'll notice they're


1224
00:37:33,876 --> 00:37:35,636
just snappier, with faster


1225
00:37:35,636 --> 00:37:37,536
document loading and more


1226
00:37:37,536 --> 00:37:39,436
responsive canvas interactions.


1227
00:37:40,666 --> 00:37:42,056
Now we've also spent time


1228
00:37:42,056 --> 00:37:43,706
focusing on our source editing


1229
00:37:43,756 --> 00:37:46,716
tools, keeping them fast, fluid,


1230
00:37:46,716 --> 00:37:47,286
and informative.


1231
00:37:47,286 --> 00:37:49,706
We started with performance,


1232
00:37:49,706 --> 00:37:50,626
where you'll now see the editor


1233
00:37:50,626 --> 00:37:52,246
loads large documents much


1234
00:37:52,306 --> 00:37:54,166
faster, all while keeping smooth


1235
00:37:54,166 --> 00:37:55,996
scrolling at 60 frames a second.


1236
00:37:57,016 --> 00:37:58,596
Next, we double down on


1237
00:37:58,666 --> 00:38:00,516
stability in SourceKit and


1238
00:38:00,516 --> 00:38:01,856
enhance the robustness of our


1239
00:38:01,856 --> 00:38:02,736
language integration.


1240
00:38:03,146 --> 00:38:04,966
So now more of your colorful


1241
00:38:04,966 --> 00:38:06,296
comments will stay inside of the


1242
00:38:06,296 --> 00:38:07,876
editor rather than being about


1243
00:38:07,876 --> 00:38:07,966
it.


1244
00:38:09,516 --> 00:38:15,786
[ Applause ]


1245
00:38:16,286 --> 00:38:17,766
Co-completion and navigation are


1246
00:38:17,826 --> 00:38:19,646
two essential workflows, and


1247
00:38:19,646 --> 00:38:20,686
we've improved on both.


1248
00:38:21,596 --> 00:38:23,106
Co-completion now provides more


1249
00:38:23,106 --> 00:38:24,896
targeted results and limits


1250
00:38:24,896 --> 00:38:26,496
completions to high-confidence


1251
00:38:26,536 --> 00:38:27,076
matches.


1252
00:38:28,046 --> 00:38:29,466
And when navigating, with jump


1253
00:38:29,466 --> 00:38:31,496
to definition, the destination


1254
00:38:31,496 --> 00:38:32,956
list will now provide contextual


1255
00:38:32,956 --> 00:38:34,676
details like file and line


1256
00:38:34,676 --> 00:38:36,276
information to help you easily


1257
00:38:36,276 --> 00:38:37,576
get to where you need to go.


1258
00:38:38,516 --> 00:38:43,166
[ Applause ]


1259
00:38:43,666 --> 00:38:44,576
And you'll see the same


1260
00:38:44,576 --> 00:38:46,096
contextual information in the


1261
00:38:46,096 --> 00:38:48,136
new callers option in the action


1262
00:38:48,136 --> 00:38:49,976
menu, which is a seamless way to


1263
00:38:49,976 --> 00:38:51,646
move throughout your projects.


1264
00:38:52,456 --> 00:38:54,756
Now last year, we introduced


1265
00:38:54,756 --> 00:38:56,436
refactoring for all languages,


1266
00:38:56,506 --> 00:38:57,156
including Swift.


1267
00:38:57,156 --> 00:38:59,286
And you, the Swift community,


1268
00:38:59,486 --> 00:39:01,126
embraced the opportunity and


1269
00:39:01,126 --> 00:39:02,536
added a number of new actions.


1270
00:39:03,936 --> 00:39:05,606
These actions all streamline


1271
00:39:05,606 --> 00:39:07,526
common programming scenarios and


1272
00:39:07,526 --> 00:39:08,956
are built right into Xcode now,


1273
00:39:09,446 --> 00:39:10,336
just a click away.


1274
00:39:11,766 --> 00:39:13,526
Now refactoring is just one of


1275
00:39:13,526 --> 00:39:15,266
many ways you can modify the


1276
00:39:15,356 --> 00:39:16,196
source in your project.


1277
00:39:16,846 --> 00:39:17,876
And to make it easier to keep


1278
00:39:17,876 --> 00:39:19,806
track of your changes, we're


1279
00:39:19,806 --> 00:39:21,326
introducing a source control


1280
00:39:21,326 --> 00:39:22,056
change bar.


1281
00:39:23,336 --> 00:39:24,706
The change bar is on the left


1282
00:39:24,706 --> 00:39:25,896
side of the editor and


1283
00:39:25,896 --> 00:39:27,326
highlights lines of code which


1284
00:39:27,326 --> 00:39:28,856
have changed since your last


1285
00:39:28,856 --> 00:39:29,156
checkout.


1286
00:39:29,946 --> 00:39:31,896
The style and color of the


1287
00:39:31,896 --> 00:39:33,576
indicator reveal the type of


1288
00:39:33,576 --> 00:39:35,326
change, making it easy for you


1289
00:39:35,326 --> 00:39:37,046
to see at a glance changes you


1290
00:39:37,046 --> 00:39:38,516
have made, your team members


1291
00:39:38,516 --> 00:39:40,176
have made, and those which might


1292
00:39:40,226 --> 00:39:41,016
be in conflict.


1293
00:39:41,836 --> 00:39:44,466
Now this feature is -- yes.


1294
00:39:45,516 --> 00:39:49,586
[ Applause ]


1295
00:39:50,086 --> 00:39:51,256
I agree. I think this feature is


1296
00:39:51,296 --> 00:39:51,796
pretty awesome.


1297
00:39:51,796 --> 00:39:52,706
And I'd actually like to show it


1298
00:39:52,706 --> 00:39:53,966
to you in a demo now.


1299
00:39:55,886 --> 00:39:57,336
So we're going to go back to our


1300
00:39:57,336 --> 00:39:59,686
solar system application, and I


1301
00:39:59,686 --> 00:40:00,906
have some changes I'd like to


1302
00:40:00,906 --> 00:40:03,236
make in one of our source files.


1303
00:40:03,346 --> 00:40:04,756
It's our scene view controller


1304
00:40:04,756 --> 00:40:04,946
here.


1305
00:40:05,676 --> 00:40:07,166
So I'll scroll down in the


1306
00:40:07,166 --> 00:40:08,446
editor to the place I'd like to


1307
00:40:08,446 --> 00:40:09,206
make changes.


1308
00:40:09,816 --> 00:40:10,996
And here we can see on the left


1309
00:40:11,076 --> 00:40:12,716
-- just to the left of the line


1310
00:40:12,716 --> 00:40:14,896
numbers -- the source control


1311
00:40:14,896 --> 00:40:16,206
change bar is indicating there's


1312
00:40:16,206 --> 00:40:17,826
some upstream changes a team


1313
00:40:17,826 --> 00:40:18,436
member has made.


1314
00:40:19,106 --> 00:40:20,346
In fact, if I had already made


1315
00:40:20,346 --> 00:40:21,576
the changes to this line, you'd


1316
00:40:21,616 --> 00:40:22,926
see the indicator turns red,


1317
00:40:23,276 --> 00:40:24,346
highlighting a conflict.


1318
00:40:24,976 --> 00:40:26,626
If I put my cursor over the


1319
00:40:26,626 --> 00:40:27,596
indicator, you'll see it


1320
00:40:27,666 --> 00:40:28,996
highlights the ranges of


1321
00:40:29,036 --> 00:40:30,356
characters which have changed


1322
00:40:30,356 --> 00:40:31,166
and are in conflict.


1323
00:40:32,106 --> 00:40:33,976
And if I click on the indicator,


1324
00:40:34,146 --> 00:40:35,776
it brings up an action menu with


1325
00:40:35,776 --> 00:40:36,726
both a description of the


1326
00:40:36,726 --> 00:40:38,546
changes and some actions I can


1327
00:40:38,546 --> 00:40:40,986
take I see my team member has


1328
00:40:40,986 --> 00:40:42,376
added more descriptive comments


1329
00:40:42,376 --> 00:40:42,556
here.


1330
00:40:43,316 --> 00:40:44,896
I think we'll take his change,


1331
00:40:45,246 --> 00:40:46,576
so I'll use the action menu to


1332
00:40:46,576 --> 00:40:48,946
discard my change, and go up


1333
00:40:48,946 --> 00:40:50,546
under the source control menu to


1334
00:40:50,606 --> 00:40:51,656
pull his changes in.


1335
00:40:53,046 --> 00:40:55,146
So here's his changes -- very


1336
00:40:55,146 --> 00:40:56,216
descriptive comments.


1337
00:40:56,916 --> 00:40:58,276
I can scroll to the bottom of


1338
00:40:58,276 --> 00:40:59,036
the editor, see if there's


1339
00:40:59,036 --> 00:41:00,666
anything else I'd like to look


1340
00:41:00,666 --> 00:41:01,096
at here.


1341
00:41:01,976 --> 00:41:02,976
Here's another new feature of


1342
00:41:02,976 --> 00:41:04,696
Xcode 10 -- our editor supports


1343
00:41:04,726 --> 00:41:05,376
overscroll now.


1344
00:41:06,516 --> 00:41:11,976
[ Applause ]


1345
00:41:12,476 --> 00:41:13,706
So going back to the lines of


1346
00:41:13,746 --> 00:41:15,226
code I'd like to change, I'd


1347
00:41:15,226 --> 00:41:16,616
like to convert these hard-coded


1348
00:41:16,656 --> 00:41:18,716
functions into properties that


1349
00:41:18,716 --> 00:41:19,996
pull the colors from the asset


1350
00:41:20,026 --> 00:41:20,406
catalog.


1351
00:41:21,376 --> 00:41:22,416
Now there are three of them that


1352
00:41:22,416 --> 00:41:23,636
I'd like to change, and they're


1353
00:41:23,636 --> 00:41:25,546
a bit spread out now because of


1354
00:41:25,546 --> 00:41:26,336
all these comments.


1355
00:41:27,076 --> 00:41:29,066
Well, no matter, with Xcode 10,


1356
00:41:29,066 --> 00:41:30,196
we've improved code folding.


1357
00:41:31,066 --> 00:41:32,356
Basically, you can now code fold


1358
00:41:32,356 --> 00:41:33,206
anything you want.


1359
00:41:33,686 --> 00:41:34,856
And we've brought back the code


1360
00:41:34,856 --> 00:41:35,636
folding ribbon.


1361
00:41:35,756 --> 00:41:36,716
So just to the right of the line


1362
00:41:36,716 --> 00:41:37,966
numbers, I can click --


1363
00:41:38,516 --> 00:41:42,546
[ Applause ]


1364
00:41:43,046 --> 00:41:43,876
-- to collapse the code away.


1365
00:41:44,326 --> 00:41:45,446
And we have this nice, svelte


1366
00:41:45,506 --> 00:41:47,046
presentation of the collapsing


1367
00:41:47,856 --> 00:41:47,923
now.


1368
00:41:48,546 --> 00:41:50,206
Now this is the first function


1369
00:41:50,206 --> 00:41:51,686
I'd like to change, and I see


1370
00:41:51,686 --> 00:41:52,916
that all of these functions are


1371
00:41:52,916 --> 00:41:54,256
very similar, and it would be


1372
00:41:54,256 --> 00:41:55,326
great if I could make all of


1373
00:41:55,326 --> 00:41:56,836
these changes all at the same


1374
00:41:56,836 --> 00:41:57,176
time.


1375
00:41:58,226 --> 00:41:59,456
Well, I can do that now, too,


1376
00:41:59,796 --> 00:42:01,146
with multi-cursor editing.


1377
00:42:02,016 --> 00:42:07,626
[ Applause ]


1378
00:42:08,126 --> 00:42:09,326
The key to multi-cursor editing


1379
00:42:09,326 --> 00:42:11,306
is two fingers, control and


1380
00:42:11,306 --> 00:42:11,506
shift.


1381
00:42:11,956 --> 00:42:13,806
So I'll hold down those two keys


1382
00:42:13,836 --> 00:42:15,086
and just click at the beginning


1383
00:42:15,086 --> 00:42:16,456
of each of the other functions.


1384
00:42:17,326 --> 00:42:18,766
We'll use range selection, and


1385
00:42:18,766 --> 00:42:20,166
we'll just change that to VAR.


1386
00:42:20,606 --> 00:42:22,246
We'll change those into colons.


1387
00:42:22,736 --> 00:42:24,786
And we're pretty good so far.


1388
00:42:25,896 --> 00:42:27,726
Now I happen to know that I've


1389
00:42:27,726 --> 00:42:29,356
named my colors in the catalog


1390
00:42:29,546 --> 00:42:31,096
the same name as my properties


1391
00:42:31,146 --> 00:42:31,426
here.


1392
00:42:32,006 --> 00:42:33,606
So we'll just select those names


1393
00:42:33,606 --> 00:42:34,236
and copy them.


1394
00:42:34,926 --> 00:42:35,716
And now let's go to the


1395
00:42:35,716 --> 00:42:37,136
implementation and change that.


1396
00:42:37,836 --> 00:42:39,256
So we'll drop three more


1397
00:42:39,256 --> 00:42:41,196
cursors, and we'll just select


1398
00:42:41,196 --> 00:42:43,506
all of this, type in named,


1399
00:42:43,506 --> 00:42:45,876
paste in those colors, and we've


1400
00:42:45,876 --> 00:42:46,766
made all those changes.


1401
00:42:46,766 --> 00:42:47,916
It's like three times faster.


1402
00:42:48,516 --> 00:42:55,016
[ Applause ]


1403
00:42:55,516 --> 00:42:56,876
Now multi-cursor editing also


1404
00:42:56,876 --> 00:42:58,526
works great with column


1405
00:42:58,526 --> 00:42:59,066
selection.


1406
00:42:59,626 --> 00:43:01,206
So here I have all of my


1407
00:43:01,206 --> 00:43:02,516
IBOutlets defined with week.


1408
00:43:03,006 --> 00:43:04,666
If I hold down the option key


1409
00:43:05,066 --> 00:43:06,766
and I select all of these in


1410
00:43:06,766 --> 00:43:08,806
here [cheering] -- oh, yeah.


1411
00:43:09,226 --> 00:43:10,266
Oh, yeah, so let's just convert


1412
00:43:10,266 --> 00:43:12,346
those into [applause] unowned.


1413
00:43:12,966 --> 00:43:13,896
And just like that, I can make


1414
00:43:13,896 --> 00:43:15,316
my changes, and then use the


1415
00:43:15,316 --> 00:43:16,516
source control bar to make sure


1416
00:43:16,516 --> 00:43:17,786
that I got the changes I want.


1417
00:43:18,546 --> 00:43:19,916
So those are some of the great


1418
00:43:19,916 --> 00:43:21,156
new editing features you'll find


1419
00:43:21,486 --> 00:43:22,846
in Xcode 10.


1420
00:43:23,516 --> 00:43:30,246
[ Applause ]


1421
00:43:30,746 --> 00:43:32,066
So additions like the source


1422
00:43:32,066 --> 00:43:33,246
control change bar and


1423
00:43:33,246 --> 00:43:35,106
multi-cursor editing alongside


1424
00:43:35,106 --> 00:43:36,356
performance and stability


1425
00:43:36,356 --> 00:43:36,946
improvements.


1426
00:43:37,276 --> 00:43:39,156
Xcode 10 continues to raise the


1427
00:43:39,156 --> 00:43:40,776
bar on our source editing


1428
00:43:40,776 --> 00:43:41,366
experience.


1429
00:43:41,906 --> 00:43:43,846
Now in addition to the source


1430
00:43:43,846 --> 00:43:45,456
control change bar, we are also


1431
00:43:45,456 --> 00:43:46,956
extending our source control


1432
00:43:46,956 --> 00:43:47,456
integration.


1433
00:43:47,456 --> 00:43:50,426
We started first by unifying our


1434
00:43:50,426 --> 00:43:52,286
conflict resolution system with


1435
00:43:52,286 --> 00:43:54,106
Git, making the results more


1436
00:43:54,106 --> 00:43:56,266
accurate, more predictable, and


1437
00:43:56,316 --> 00:43:57,316
significantly faster.


1438
00:43:58,466 --> 00:44:00,376
Next, we've enhanced the pull


1439
00:44:00,376 --> 00:44:02,146
action to support rebase.


1440
00:44:02,446 --> 00:44:03,896
So you can replay changes


1441
00:44:03,896 --> 00:44:04,656
between branches [applause] --


1442
00:44:04,656 --> 00:44:05,976
yes, it's okay to clap for that.


1443
00:44:06,516 --> 00:44:08,896
[ Applause ]


1444
00:44:09,396 --> 00:44:10,726
You can replay changes easily


1445
00:44:10,726 --> 00:44:12,106
between branches without the


1446
00:44:12,106 --> 00:44:13,346
unnecessary merge commits.


1447
00:44:13,976 --> 00:44:15,786
And to keep your connections


1448
00:44:15,786 --> 00:44:17,116
secure, Xcode will help you


1449
00:44:17,116 --> 00:44:19,836
create SSH keys and upload them


1450
00:44:19,836 --> 00:44:21,326
directly to your service


1451
00:44:21,326 --> 00:44:21,786
accounts.


1452
00:44:22,516 --> 00:44:26,516
[ Applause ]


1453
00:44:27,016 --> 00:44:27,866
And this is the perfect


1454
00:44:27,866 --> 00:44:29,006
accompaniment for our service


1455
00:44:29,086 --> 00:44:30,466
integrations, because in


1456
00:44:30,466 --> 00:44:32,196
addition to GitHub, we're adding


1457
00:44:32,376 --> 00:44:33,916
two new services this year,


1458
00:44:34,676 --> 00:44:35,616
support for Atlassian's


1459
00:44:35,676 --> 00:44:37,166
Bitbucket cloud and Bitbucket


1460
00:44:37,256 --> 00:44:37,566
server --


1461
00:44:38,516 --> 00:44:42,246
[ Applause ]


1462
00:44:42,746 --> 00:44:44,766
-- and support for GitLab.com


1463
00:44:45,096 --> 00:44:45,846
and self-hosting.


1464
00:44:46,516 --> 00:44:49,816
[ Applause ]


1465
00:44:50,316 --> 00:44:51,366
There's a lot of source control


1466
00:44:51,406 --> 00:44:51,836
love here.


1467
00:44:52,606 --> 00:44:54,366
And both of these work great


1468
00:44:54,496 --> 00:44:55,786
because their web interfaces


1469
00:44:55,786 --> 00:44:57,636
will check out directly into


1470
00:44:57,636 --> 00:44:57,976
Xcode.


1471
00:44:59,386 --> 00:45:01,006
Now as Sebastian mentioned


1472
00:45:01,006 --> 00:45:02,626
earlier, we are passionate about


1473
00:45:02,626 --> 00:45:04,186
giving you great tools to debug


1474
00:45:04,476 --> 00:45:05,696
and optimize your apps.


1475
00:45:06,056 --> 00:45:07,556
And this year, we focused on the


1476
00:45:07,556 --> 00:45:09,346
usability and performance of our


1477
00:45:09,346 --> 00:45:09,536
tools.


1478
00:45:09,536 --> 00:45:12,456
We started with LLDB, our


1479
00:45:12,456 --> 00:45:13,536
lower-level debugger.


1480
00:45:13,966 --> 00:45:15,656
Which now has faster startup and


1481
00:45:15,656 --> 00:45:16,966
more precise access to your


1482
00:45:16,966 --> 00:45:19,146
variables in the console and


1483
00:45:19,146 --> 00:45:20,186
Xcode's variables view.


1484
00:45:21,676 --> 00:45:23,176
Next, we've made downloading


1485
00:45:23,176 --> 00:45:25,246
debug symbols five-times faster.


1486
00:45:25,246 --> 00:45:26,496
So now it's more like seconds


1487
00:45:26,496 --> 00:45:26,976
rather than minutes.


1488
00:45:27,516 --> 00:45:33,146
[ Applause ]


1489
00:45:33,646 --> 00:45:34,646
We've enhanced our memory


1490
00:45:34,646 --> 00:45:35,966
debugging tools to have faster


1491
00:45:35,966 --> 00:45:37,106
loading, and saving of


1492
00:45:37,106 --> 00:45:39,176
documents, and a new compact


1493
00:45:39,176 --> 00:45:40,646
layout to help you visualize


1494
00:45:40,646 --> 00:45:42,286
even more of your application at


1495
00:45:42,326 --> 00:45:42,746
once.


1496
00:45:43,886 --> 00:45:45,456
And earlier this spring, we


1497
00:45:45,456 --> 00:45:47,386
introduced energy diagnostic


1498
00:45:47,386 --> 00:45:47,936
reports.


1499
00:45:48,416 --> 00:45:49,826
They're like crash logs, but for


1500
00:45:49,826 --> 00:45:50,606
energy usage.


1501
00:45:51,266 --> 00:45:52,796
These reports are automatically


1502
00:45:52,836 --> 00:45:54,656
collected on iOS for test flight


1503
00:45:54,656 --> 00:45:57,086
in App Store apps and surface


1504
00:45:57,086 --> 00:45:59,106
details for foreground and


1505
00:45:59,106 --> 00:46:00,016
background usage.


1506
00:46:01,086 --> 00:46:02,576
These reports show up in the


1507
00:46:02,576 --> 00:46:04,326
organizer and include stack


1508
00:46:04,326 --> 00:46:05,916
frames to illustrate the issue.


1509
00:46:06,896 --> 00:46:08,196
And just like with crash logs,


1510
00:46:08,196 --> 00:46:09,876
you can open these reports in


1511
00:46:09,876 --> 00:46:11,446
your project to navigate your


1512
00:46:11,446 --> 00:46:13,306
code and find and fix the


1513
00:46:13,306 --> 00:46:13,756
issues.


1514
00:46:15,006 --> 00:46:16,646
Oh, and to go alongside these,


1515
00:46:16,646 --> 00:46:17,776
we also have some improvements


1516
00:46:17,896 --> 00:46:19,456
in testing.


1517
00:46:19,806 --> 00:46:21,346
Earlier this spring, we enhanced


1518
00:46:21,386 --> 00:46:23,116
code coverage, adding a command


1519
00:46:23,116 --> 00:46:24,466
line tool to access coverage


1520
00:46:24,466 --> 00:46:26,456
data, and giving you the ability


1521
00:46:26,456 --> 00:46:28,476
to select individual targets to


1522
00:46:28,476 --> 00:46:29,396
collect coverage for.


1523
00:46:30,286 --> 00:46:31,436
This means your coverage reports


1524
00:46:31,436 --> 00:46:33,176
can now be actively focused on


1525
00:46:33,176 --> 00:46:34,766
the areas you are coding and


1526
00:46:34,766 --> 00:46:35,106
testing.


1527
00:46:36,266 --> 00:46:38,106
In addition to these, we're


1528
00:46:38,106 --> 00:46:40,216
adding two new testing workflows


1529
00:46:40,216 --> 00:46:41,676
this year -- actually, three.


1530
00:46:42,466 --> 00:46:44,226
The first is that you can now


1531
00:46:44,226 --> 00:46:45,976
automatically include or exclude


1532
00:46:45,976 --> 00:46:47,986
new tests in your test bundles.


1533
00:46:48,616 --> 00:46:50,486
Next, you can randomize the


1534
00:46:50,486 --> 00:46:51,626
order that your tests are


1535
00:46:51,626 --> 00:46:53,306
executed in to minimize


1536
00:46:53,306 --> 00:46:54,506
accidental dependencies.


1537
00:46:55,536 --> 00:46:56,726
And our biggest change for this


1538
00:46:56,726 --> 00:46:58,496
year is you can now execute your


1539
00:46:58,496 --> 00:47:00,626
tests in parallel inside of


1540
00:47:00,626 --> 00:47:00,906
Xcode.


1541
00:47:01,516 --> 00:47:07,066
[ Applause ]


1542
00:47:07,566 --> 00:47:09,236
Now last year, you could use


1543
00:47:09,236 --> 00:47:11,056
Xcodebuild to test on many


1544
00:47:11,056 --> 00:47:13,366
devices in parallel, sending all


1545
00:47:13,366 --> 00:47:15,056
the same tests to each device.


1546
00:47:15,056 --> 00:47:17,126
Now this is perfect for use with


1547
00:47:17,126 --> 00:47:18,476
continuous integration where you


1548
00:47:18,476 --> 00:47:19,536
want the broadest scale of


1549
00:47:19,536 --> 00:47:19,886
testing.


1550
00:47:20,956 --> 00:47:22,146
When you're working in Xcode,


1551
00:47:22,326 --> 00:47:23,386
you're more often focused on a


1552
00:47:23,546 --> 00:47:24,556
single configuration.


1553
00:47:24,966 --> 00:47:25,916
And once you're testing, to


1554
00:47:25,916 --> 00:47:27,586
finish as quickly as possible.


1555
00:47:28,696 --> 00:47:30,406
This is the configuration Xcode


1556
00:47:30,406 --> 00:47:33,376
10 dramatically improves with


1557
00:47:33,376 --> 00:47:34,016
parallel testing.


1558
00:47:35,126 --> 00:47:36,536
Behind the scenes, Xcode will


1559
00:47:36,536 --> 00:47:38,706
create copies of your Mac app or


1560
00:47:38,826 --> 00:47:40,906
clones of your iOS simulator and


1561
00:47:41,156 --> 00:47:42,866
then fan your tests suites out


1562
00:47:42,866 --> 00:47:43,106
to them.


1563
00:47:44,496 --> 00:47:45,756
This means you continue to test


1564
00:47:45,826 --> 00:47:47,716
a single configuration, but your


1565
00:47:47,716 --> 00:47:49,526
tests finish in a fraction of


1566
00:47:49,526 --> 00:47:49,856
the time.


1567
00:47:51,096 --> 00:47:51,926
And parallel testing


1568
00:47:51,966 --> 00:47:53,286
automatically scales to the


1569
00:47:53,286 --> 00:47:55,106
capacity of your machine, which


1570
00:47:55,106 --> 00:47:57,316
means on an iMac Pro, it can be


1571
00:47:57,316 --> 00:47:57,876
pretty awesome.


1572
00:47:59,796 --> 00:48:00,846
How awesome, you might ask?


1573
00:48:01,266 --> 00:48:02,776
Well, let's see in another demo.


1574
00:48:03,506 --> 00:48:06,386
So we're going to go back to our


1575
00:48:06,386 --> 00:48:07,586
solar system project one more


1576
00:48:07,586 --> 00:48:07,896
time.


1577
00:48:08,956 --> 00:48:11,986
And here we see the testing log


1578
00:48:12,056 --> 00:48:13,396
for our Mac tests that we ran


1579
00:48:13,396 --> 00:48:13,826
before.


1580
00:48:14,406 --> 00:48:15,866
Took about 14 seconds.


1581
00:48:16,986 --> 00:48:18,016
Let's run it with parallel


1582
00:48:18,016 --> 00:48:19,206
testing now.


1583
00:48:19,416 --> 00:48:20,276
I'll click and hold on the


1584
00:48:20,276 --> 00:48:21,936
toolbar and select the test


1585
00:48:21,936 --> 00:48:22,416
action.


1586
00:48:23,016 --> 00:48:23,916
And we'll bring up the scheme


1587
00:48:23,916 --> 00:48:24,216
sheet.


1588
00:48:25,696 --> 00:48:27,266
In the options, I'll just click


1589
00:48:27,316 --> 00:48:29,246
execute in parallel and click


1590
00:48:29,246 --> 00:48:31,236
test, and we're going to build


1591
00:48:31,236 --> 00:48:32,386
our tests for parallelization.


1592
00:48:32,386 --> 00:48:33,676
And if you watch the doc in the


1593
00:48:33,676 --> 00:48:35,246
lower right, you'll see that we


1594
00:48:35,246 --> 00:48:37,076
launch the tests, we now launch


1595
00:48:37,076 --> 00:48:38,596
many different processes -- this


1596
00:48:38,596 --> 00:48:39,786
is one for each of our test


1597
00:48:39,866 --> 00:48:41,246
suites -- and collect the


1598
00:48:41,246 --> 00:48:41,746
results.


1599
00:48:42,996 --> 00:48:44,116
And if we look at our testing


1600
00:48:44,116 --> 00:48:45,966
log, it finished almost four


1601
00:48:45,966 --> 00:48:46,646
times faster.


1602
00:48:47,516 --> 00:48:53,676
[ Applause ]


1603
00:48:54,176 --> 00:48:55,376
So where parallel testing works


1604
00:48:55,376 --> 00:48:57,376
great for unit tests, it works


1605
00:48:57,486 --> 00:48:58,546
awesomely for UI tests.


1606
00:48:59,786 --> 00:49:01,986
So I will select the iOS version


1607
00:49:01,986 --> 00:49:04,316
of our application, and we'll


1608
00:49:04,316 --> 00:49:04,936
kick off testing.


1609
00:49:05,526 --> 00:49:06,936
So behind the scenes, we're


1610
00:49:06,936 --> 00:49:08,156
going to go and clone the active


1611
00:49:08,156 --> 00:49:10,236
simulator, and then set up a


1612
00:49:10,236 --> 00:49:11,686
number of debug sessions for


1613
00:49:11,686 --> 00:49:13,126
each one of these, and then


1614
00:49:13,126 --> 00:49:14,816
switch over to a space with all


1615
00:49:14,816 --> 00:49:15,776
of those simulators running.


1616
00:49:16,676 --> 00:49:17,846
So you'll see we'll install


1617
00:49:17,846 --> 00:49:19,456
different test suites on each of


1618
00:49:19,456 --> 00:49:20,916
these simulators and kick off a


1619
00:49:20,916 --> 00:49:22,696
different set of tests on each.


1620
00:49:23,556 --> 00:49:25,386
So I can run all of my same


1621
00:49:25,386 --> 00:49:27,756
tests faster on all these


1622
00:49:27,756 --> 00:49:28,986
devices, which gives me the


1623
00:49:28,986 --> 00:49:30,716
ability to add more tests and


1624
00:49:30,716 --> 00:49:31,706
make a much better app.


1625
00:49:32,556 --> 00:49:34,316
This is ludicrously awesome


1626
00:49:34,316 --> 00:49:36,796
parallel testing in Xcode 10.


1627
00:49:37,516 --> 00:49:46,216
[ Applause ]


1628
00:49:46,716 --> 00:49:47,976
Last year, we introduced a


1629
00:49:48,026 --> 00:49:49,646
preview of our new build system


1630
00:49:49,826 --> 00:49:50,626
written in Swift.


1631
00:49:51,516 --> 00:49:52,466
Many of you tried it out with


1632
00:49:52,466 --> 00:49:54,186
your projects and provided great


1633
00:49:54,426 --> 00:49:54,716
feedback.


1634
00:49:55,446 --> 00:49:56,546
And so I'm happy to say our


1635
00:49:56,546 --> 00:49:58,156
modern build system is now on


1636
00:49:58,456 --> 00:49:59,306
for all projects.


1637
00:50:00,006 --> 00:50:01,116
In addition to greater


1638
00:50:01,116 --> 00:50:03,656
reliability and stability, we


1639
00:50:03,656 --> 00:50:05,316
also focused on overall build


1640
00:50:05,316 --> 00:50:05,916
performance.


1641
00:50:06,796 --> 00:50:07,936
You'll find the build system now


1642
00:50:07,936 --> 00:50:09,906
has faster rebuilds, better task


1643
00:50:10,136 --> 00:50:11,976
parallelization, and uses less


1644
00:50:11,976 --> 00:50:12,266
memory.


1645
00:50:13,126 --> 00:50:14,436
And the build system now


1646
00:50:14,436 --> 00:50:16,476
includes new richer diagnostics


1647
00:50:16,646 --> 00:50:17,946
to help you tune your project


1648
00:50:17,986 --> 00:50:19,516
configuration to achieve the


1649
00:50:19,516 --> 00:50:21,026
best build performance.


1650
00:50:21,446 --> 00:50:23,746
Now staying on build performance


1651
00:50:23,746 --> 00:50:24,956
for a second, I'd like to talk


1652
00:50:24,956 --> 00:50:26,466
up another core component of our


1653
00:50:26,466 --> 00:50:29,396
release, Swift 4.2.


1654
00:50:29,766 --> 00:50:31,156
Over the last year, we have made


1655
00:50:31,156 --> 00:50:33,016
steady improvements to compile


1656
00:50:33,086 --> 00:50:34,786
times with Swift projects.


1657
00:50:35,936 --> 00:50:37,126
We've sampled a number of open


1658
00:50:37,126 --> 00:50:39,526
source iOS applications, and


1659
00:50:39,526 --> 00:50:40,666
compared to our previous


1660
00:50:40,666 --> 00:50:42,776
release, debug build performance


1661
00:50:42,776 --> 00:50:45,356
with Xcode 10 is often twice as


1662
00:50:46,636 --> 00:50:46,996
fast.


1663
00:50:46,996 --> 00:50:49,566
And for release builds, code


1664
00:50:49,566 --> 00:50:52,316
size is up to 30% smaller using


1665
00:50:52,316 --> 00:50:54,306
the new size optimization, which


1666
00:50:54,306 --> 00:50:55,906
is a great win for cellular


1667
00:50:55,906 --> 00:50:56,436
downloads.


1668
00:50:57,976 --> 00:51:00,056
Now in addition to these, Swift


1669
00:51:00,056 --> 00:51:02,306
also adds a number of additions


1670
00:51:02,306 --> 00:51:04,036
and runtime language


1671
00:51:04,036 --> 00:51:04,576
improvements.


1672
00:51:05,326 --> 00:51:06,126
Some of these are


1673
00:51:06,126 --> 00:51:07,506
tongue-twisting APIs like


1674
00:51:07,566 --> 00:51:08,646
synthesized hashtable


1675
00:51:08,646 --> 00:51:09,276
conformance.


1676
00:51:10,786 --> 00:51:12,436
A perfect place to try out these


1677
00:51:12,436 --> 00:51:14,906
APIs is in Xcode Playgrounds


1678
00:51:15,596 --> 00:51:16,976
because Xcode Playgrounds now


1679
00:51:16,976 --> 00:51:18,676
include new [inaudible]-like


1680
00:51:18,676 --> 00:51:20,506
interaction that allows you to


1681
00:51:20,506 --> 00:51:21,996
evaluate new lines of code


1682
00:51:22,316 --> 00:51:23,726
without restarting the


1683
00:51:23,726 --> 00:51:24,486
Playground session.


1684
00:51:26,516 --> 00:51:30,186
[ Applause ]


1685
00:51:30,686 --> 00:51:31,756
Here's a Playground of our solar


1686
00:51:31,756 --> 00:51:32,346
system view.


1687
00:51:32,346 --> 00:51:34,216
And the new lines of code added


1688
00:51:34,506 --> 00:51:36,466
to move to the next planet are


1689
00:51:36,466 --> 00:51:38,616
evaluated and return results all


1690
00:51:38,616 --> 00:51:39,386
while the Playground continues


1691
00:51:39,386 --> 00:51:39,536
to run.


1692
00:51:42,046 --> 00:51:43,896
So all of these additions to the


1693
00:51:43,896 --> 00:51:45,546
runtime language and tools


1694
00:51:45,786 --> 00:51:47,646
continue Swift's great momentum


1695
00:51:48,046 --> 00:51:49,206
as part of Xcode 10.


1696
00:51:49,206 --> 00:51:52,036
And we also have another release


1697
00:51:52,036 --> 00:51:52,796
coming up for you in the


1698
00:51:52,796 --> 00:51:55,646
language, Swift 5.


1699
00:51:55,986 --> 00:51:57,806
The focus of Swift 5 is greater


1700
00:51:57,806 --> 00:51:59,856
adoption by delivering Swift as


1701
00:51:59,886 --> 00:52:01,166
part of the OS.


1702
00:52:01,796 --> 00:52:03,216
Apps will no longer need to


1703
00:52:03,216 --> 00:52:04,946
include the Swift runtime when


1704
00:52:04,946 --> 00:52:06,336
delivering on our newer OS


1705
00:52:06,336 --> 00:52:08,046
releases, resulting in smaller


1706
00:52:08,086 --> 00:52:09,636
downloads [applause] and faster


1707
00:52:09,636 --> 00:52:09,846
launches.


1708
00:52:10,516 --> 00:52:15,586
[ Applause ]


1709
00:52:16,086 --> 00:52:17,216
We're very excited about this,


1710
00:52:17,216 --> 00:52:18,666
too, and we have made great


1711
00:52:18,706 --> 00:52:19,976
progress toward this goal.


1712
00:52:20,396 --> 00:52:21,626
And you'll see it in a release


1713
00:52:21,696 --> 00:52:23,956
coming early next year.


1714
00:52:24,536 --> 00:52:27,996
So Xcode 10 includes a number of


1715
00:52:27,996 --> 00:52:29,566
great productivity improvements,


1716
00:52:29,886 --> 00:52:31,626
alongside deep investments in


1717
00:52:31,626 --> 00:52:33,496
performance, robustness, and


1718
00:52:33,496 --> 00:52:35,846
stability throughout our tools.


1719
00:52:36,436 --> 00:52:37,736
And all of this to help you do


1720
00:52:37,736 --> 00:52:39,596
your best work now faster than


1721
00:52:40,406 --> 00:52:40,586
ever.


1722
00:52:40,626 --> 00:52:42,246
And that is Xcode 10.


1723
00:52:43,516 --> 00:52:50,656
[ Applause ]


1724
00:52:51,156 --> 00:52:52,576
Next, I'd like to invite up John


1725
00:52:52,576 --> 00:52:54,236
to tell you what's new in


1726
00:52:54,236 --> 00:52:54,816
Machine Learning.


1727
00:52:55,356 --> 00:52:55,636
John?


1728
00:52:56,321 --> 00:52:58,321
[ Applause ]


1729
00:52:58,626 --> 00:52:59,306
>> Thank you, Matthew.


1730
00:53:02,286 --> 00:53:03,236
Machine Learning is at the


1731
00:53:03,236 --> 00:53:04,556
foundation of our operating


1732
00:53:04,556 --> 00:53:06,076
systems and many of our


1733
00:53:06,076 --> 00:53:06,736
applications.


1734
00:53:07,276 --> 00:53:09,206
But our goal has been to provide


1735
00:53:09,346 --> 00:53:12,476
simple and easy-to-use API to


1736
00:53:12,476 --> 00:53:14,206
make Machine Learning accessible


1737
00:53:14,206 --> 00:53:14,826
to everyone.


1738
00:53:15,726 --> 00:53:17,356
And you've all done a fantastic


1739
00:53:17,356 --> 00:53:19,606
job brining so many innovative


1740
00:53:19,606 --> 00:53:20,936
features and intelligence to


1741
00:53:20,936 --> 00:53:21,886
your applications.


1742
00:53:22,456 --> 00:53:26,426
Last year we introduced Core ML


1743
00:53:26,926 --> 00:53:29,196
with its base performance


1744
00:53:29,196 --> 00:53:31,096
frameworks as well as Vision and


1745
00:53:31,096 --> 00:53:32,396
Natural Language at a high


1746
00:53:32,396 --> 00:53:32,946
level.


1747
00:53:33,306 --> 00:53:34,506
And I'd like to start by showing


1748
00:53:34,506 --> 00:53:35,336
you some improvements we're


1749
00:53:35,336 --> 00:53:37,286
making with Vision and Natural


1750
00:53:37,286 --> 00:53:37,706
Language.


1751
00:53:38,776 --> 00:53:42,826
If we take Vision and, of


1752
00:53:42,826 --> 00:53:43,906
course, a photo that we want to


1753
00:53:43,906 --> 00:53:46,436
have depth, we now have APIs


1754
00:53:46,436 --> 00:53:47,996
that support object detection


1755
00:53:48,546 --> 00:53:50,126
and bounding boxes like this


1756
00:53:50,186 --> 00:53:51,306
sign being held in the picture.


1757
00:53:52,546 --> 00:53:55,396
We can do face detect, facial


1758
00:53:55,396 --> 00:53:56,446
landmark detection.


1759
00:53:57,546 --> 00:53:59,846
And also, barcode like this QR


1760
00:53:59,846 --> 00:54:01,636
code can be detected in your


1761
00:54:01,636 --> 00:54:01,886
image.


1762
00:54:03,276 --> 00:54:05,476
Now in addition to the APIs we


1763
00:54:05,536 --> 00:54:06,906
previously provided for depth,


1764
00:54:07,576 --> 00:54:08,876
we now support people


1765
00:54:08,876 --> 00:54:10,936
segmentation, so you can remove


1766
00:54:10,936 --> 00:54:12,576
a person from a photo and


1767
00:54:12,636 --> 00:54:13,296
separate them from the


1768
00:54:13,296 --> 00:54:15,736
background or substitute in the


1769
00:54:15,736 --> 00:54:16,536
background for something a


1770
00:54:16,536 --> 00:54:17,926
little different.


1771
00:54:19,926 --> 00:54:21,586
For Natural Language, we have a


1772
00:54:21,586 --> 00:54:23,836
brand-new, easy-to-use,


1773
00:54:23,836 --> 00:54:24,796
Swift-focused API.


1774
00:54:26,876 --> 00:54:28,696
So you can take simple sentences


1775
00:54:28,696 --> 00:54:30,846
like this one and automatically


1776
00:54:30,846 --> 00:54:32,226
identify it as the English


1777
00:54:32,226 --> 00:54:32,676
language.


1778
00:54:34,226 --> 00:54:35,596
You can tokenize the sentence


1779
00:54:37,116 --> 00:54:38,346
and convert it into its speech


1780
00:54:38,386 --> 00:54:40,086
parts all with simple API.


1781
00:54:40,336 --> 00:54:43,416
And as one other option, you can


1782
00:54:43,416 --> 00:54:45,256
do named-entity recognition.


1783
00:54:46,046 --> 00:54:47,596
Here, determining that the


1784
00:54:47,596 --> 00:54:49,096
sentence is talking about Apple


1785
00:54:49,096 --> 00:54:50,096
as the organization and a


1786
00:54:50,096 --> 00:54:51,506
location in San Jose.


1787
00:54:51,506 --> 00:54:54,726
Now you might think this is easy


1788
00:54:54,726 --> 00:54:56,666
in languages like English, but


1789
00:54:56,666 --> 00:54:59,106
we support many more, including


1790
00:54:59,516 --> 00:55:01,866
French, German, Japanese, and


1791
00:55:01,866 --> 00:55:03,186
this Simplified Chinese example.


1792
00:55:03,186 --> 00:55:07,836
now let's look at Core ML.


1793
00:55:08,456 --> 00:55:09,876
This is our foundation of our


1794
00:55:09,876 --> 00:55:11,106
Machine Learning technologies.


1795
00:55:12,676 --> 00:55:13,986
And just one year ago, we


1796
00:55:13,986 --> 00:55:15,146
introduced Core ML here.


1797
00:55:15,866 --> 00:55:17,016
And since then, we've got


1798
00:55:17,016 --> 00:55:18,876
adoption of every major Machine


1799
00:55:18,876 --> 00:55:20,466
Learning training framework and


1800
00:55:20,466 --> 00:55:20,876
format.


1801
00:55:21,716 --> 00:55:23,126
This is just incredible to have


1802
00:55:23,126 --> 00:55:24,366
achieved in only one year.


1803
00:55:24,366 --> 00:55:26,576
But we didn't want to stop


1804
00:55:26,576 --> 00:55:26,796
there.


1805
00:55:28,266 --> 00:55:29,936
We're introducing Core ML 2.


1806
00:55:29,936 --> 00:55:33,026
And we focused on making the


1807
00:55:33,026 --> 00:55:35,376
models execute faster, those


1808
00:55:35,376 --> 00:55:37,546
models smaller, and making it


1809
00:55:37,616 --> 00:55:38,736
far more customizable.


1810
00:55:39,956 --> 00:55:40,866
And we know these are the


1811
00:55:40,906 --> 00:55:41,806
features that were most


1812
00:55:41,806 --> 00:55:43,576
recommended -- requested.


1813
00:55:43,576 --> 00:55:46,676
To look at performance


1814
00:55:46,676 --> 00:55:48,336
improvements, we've added a new


1815
00:55:48,336 --> 00:55:48,906
batch API.


1816
00:55:49,896 --> 00:55:52,356
Where previously you needed to


1817
00:55:52,356 --> 00:55:53,786
do inference on each image,


1818
00:55:54,196 --> 00:55:55,836
passing them between the CPU and


1819
00:55:55,836 --> 00:55:58,526
GPU, you can now bundle those


1820
00:55:58,526 --> 00:56:00,196
inference requests together and


1821
00:56:00,196 --> 00:56:02,566
exploit the full performance of


1822
00:56:02,696 --> 00:56:04,066
the CPU and GPU.


1823
00:56:05,076 --> 00:56:06,486
Through this technique and


1824
00:56:06,486 --> 00:56:07,866
enhancements to the Metal


1825
00:56:07,866 --> 00:56:09,036
Performance Shaders underneath,


1826
00:56:09,756 --> 00:56:11,866
we now have up to 30%


1827
00:56:11,866 --> 00:56:13,596
performance improvement on large


1828
00:56:13,596 --> 00:56:14,846
networks like Resnet.


1829
00:56:15,536 --> 00:56:16,826
But if you're using a smaller


1830
00:56:16,826 --> 00:56:17,806
network like the kind you're


1831
00:56:17,806 --> 00:56:20,316
going to be using on iOS, we see


1832
00:56:20,316 --> 00:56:21,796
up to four times improvement


1833
00:56:21,876 --> 00:56:22,906
when running with MobileNet.


1834
00:56:23,646 --> 00:56:25,536
Now we didn't stop there.


1835
00:56:26,566 --> 00:56:27,806
We wanted to look at making the


1836
00:56:27,806 --> 00:56:29,706
model smaller, so we now support


1837
00:56:29,706 --> 00:56:30,386
quantization.


1838
00:56:30,886 --> 00:56:32,806
So we can take a model that


1839
00:56:32,806 --> 00:56:35,856
previously had shipped in 4.3 --


1840
00:56:36,626 --> 00:56:37,866
such as this example again from


1841
00:56:37,866 --> 00:56:40,216
MobileNet -- and reduce it down


1842
00:56:40,216 --> 00:56:42,756
to Int 8, and take its size from


1843
00:56:42,756 --> 00:56:44,566
17 megabytes to less than 5.


1844
00:56:45,546 --> 00:56:46,926
This is a huge saving for the


1845
00:56:46,926 --> 00:56:48,126
models that you bundle with your


1846
00:56:48,126 --> 00:56:48,636
applications.


1847
00:56:48,636 --> 00:56:53,676
Now you can do further reduction


1848
00:56:54,066 --> 00:56:55,566
through features like table


1849
00:56:55,566 --> 00:56:56,646
lookup quantization.


1850
00:56:56,726 --> 00:56:58,616
And we support many other


1851
00:56:58,616 --> 00:57:01,146
features, including support for


1852
00:57:01,146 --> 00:57:03,396
custom models now and, a very


1853
00:57:03,396 --> 00:57:04,886
popular feature, flexible


1854
00:57:04,886 --> 00:57:05,366
shapes.


1855
00:57:05,656 --> 00:57:06,826
So you no longer need to ship a


1856
00:57:06,826 --> 00:57:08,376
model for each shape that you


1857
00:57:08,376 --> 00:57:09,266
want to do inference on.


1858
00:57:09,586 --> 00:57:11,396
You ship one model, and our


1859
00:57:11,396 --> 00:57:13,076
simple API takes care of


1860
00:57:13,076 --> 00:57:17,076
everything for you.


1861
00:57:17,296 --> 00:57:18,936
now let's talk about Create ML,


1862
00:57:19,006 --> 00:57:21,776
our brand-new, easy-to-use


1863
00:57:21,776 --> 00:57:22,896
machine learning training


1864
00:57:22,896 --> 00:57:23,336
framework.


1865
00:57:24,096 --> 00:57:25,926
It brings together the power of


1866
00:57:25,926 --> 00:57:28,276
Machine Learning, Swift, and


1867
00:57:28,276 --> 00:57:29,716
Xcode, and Xcode Playgrounds.


1868
00:57:31,536 --> 00:57:33,166
No more downloading packages


1869
00:57:33,166 --> 00:57:34,206
from the Internet and going


1870
00:57:34,206 --> 00:57:35,256
through long, complicated


1871
00:57:35,256 --> 00:57:36,616
tutorials to portray a model.


1872
00:57:38,406 --> 00:57:39,636
We support feature-level


1873
00:57:39,636 --> 00:57:41,586
training such as image


1874
00:57:41,586 --> 00:57:42,676
classification and natural


1875
00:57:42,676 --> 00:57:43,076
language.


1876
00:57:44,256 --> 00:57:45,736
And if you do want to go deeper


1877
00:57:45,736 --> 00:57:47,336
in machine learning, we support


1878
00:57:47,336 --> 00:57:49,226
traditional types of algorithms


1879
00:57:49,276 --> 00:57:50,576
such as linear regression and


1880
00:57:50,576 --> 00:57:52,336
boosted trees as well as


1881
00:57:52,336 --> 00:57:53,516
traditional data processing.


1882
00:57:53,666 --> 00:57:56,106
But we think people will want to


1883
00:57:56,106 --> 00:57:57,906
use these feature type of


1884
00:57:57,906 --> 00:57:59,476
training far more, so let's look


1885
00:57:59,476 --> 00:58:00,596
at those examples.


1886
00:58:01,986 --> 00:58:05,106
For Natural Language, you can


1887
00:58:05,106 --> 00:58:06,976
now have your own custom Natural


1888
00:58:06,976 --> 00:58:08,816
Language model that does text


1889
00:58:08,816 --> 00:58:10,646
classification, word tagging,


1890
00:58:10,996 --> 00:58:12,096
and of course, we support


1891
00:58:12,096 --> 00:58:12,886
multiple languages.


1892
00:58:12,886 --> 00:58:16,576
So you could train a model with


1893
00:58:16,576 --> 00:58:18,236
very small datasets to do


1894
00:58:18,236 --> 00:58:20,536
sentiment analysis such as these


1895
00:58:20,536 --> 00:58:22,636
reviews for a movie where you


1896
00:58:22,636 --> 00:58:23,766
just train with positive and


1897
00:58:23,766 --> 00:58:25,046
negative in strings, and you


1898
00:58:25,046 --> 00:58:26,766
build your own custom image --


1899
00:58:26,796 --> 00:58:27,796
custom text classifier.


1900
00:58:28,846 --> 00:58:31,786
And then you could do the same


1901
00:58:32,266 --> 00:58:34,196
for domain analysis, being able


1902
00:58:34,196 --> 00:58:36,226
to train a model to understand


1903
00:58:36,226 --> 00:58:37,286
whether you're talking about a


1904
00:58:37,286 --> 00:58:38,886
hotel or a restaurant in a given


1905
00:58:38,886 --> 00:58:39,316
sentence.


1906
00:58:40,026 --> 00:58:43,636
Now we think, by far, image


1907
00:58:43,636 --> 00:58:44,986
classification will be the most


1908
00:58:45,036 --> 00:58:46,126
popular kind of training that


1909
00:58:46,126 --> 00:58:49,256
people want to do, and so we've


1910
00:58:49,256 --> 00:58:50,616
put a real focus on this.


1911
00:58:51,646 --> 00:58:52,896
Traditionally, if you were


1912
00:58:52,896 --> 00:58:55,466
training a very large model with


1913
00:58:55,466 --> 00:58:56,526
what might only be a small


1914
00:58:56,526 --> 00:58:58,086
dataset because as a developer


1915
00:58:58,086 --> 00:58:59,246
that's all you have access to,


1916
00:58:59,426 --> 00:59:01,096
your model wouldn't train well,


1917
00:59:01,096 --> 00:59:02,456
and it over-fed, and you get


1918
00:59:02,456 --> 00:59:03,236
poor predictions.


1919
00:59:03,846 --> 00:59:06,506
Now Apple has extensive


1920
00:59:06,506 --> 00:59:08,646
experience in training very


1921
00:59:08,646 --> 00:59:10,696
large models with datasets of


1922
00:59:10,746 --> 00:59:12,316
photos say in the -- with many


1923
00:59:12,316 --> 00:59:12,856
millions.


1924
00:59:13,236 --> 00:59:14,786
And we want to bring all that


1925
00:59:14,786 --> 00:59:16,416
experience to all of you.


1926
00:59:16,746 --> 00:59:19,136
And through a technique called


1927
00:59:19,136 --> 00:59:21,896
transfer learning, you can train


1928
00:59:22,156 --> 00:59:23,316
your own custom image


1929
00:59:23,316 --> 00:59:23,896
classifier.


1930
00:59:25,206 --> 00:59:27,506
So we'll bundle our model into


1931
00:59:27,506 --> 00:59:28,956
our OS, so there's no need for


1932
00:59:28,956 --> 00:59:29,666
you to ship that.


1933
00:59:30,096 --> 00:59:32,116
You take your data, and use


1934
00:59:32,116 --> 00:59:33,336
transfer learning with Create


1935
00:59:33,336 --> 00:59:35,366
ML, and augment our model.


1936
00:59:36,706 --> 00:59:38,076
That means you only need to ship


1937
00:59:38,136 --> 00:59:39,166
the part of the model that


1938
00:59:39,166 --> 00:59:41,636
you've augmented, bringing a


1939
00:59:41,636 --> 00:59:42,816
huge saving to your


1940
00:59:42,816 --> 00:59:43,516
applications.


1941
00:59:44,926 --> 00:59:45,926
So we've worked with a number of


1942
00:59:45,926 --> 00:59:47,626
developers who already have


1943
00:59:47,626 --> 00:59:48,606
models in the around


1944
00:59:48,606 --> 00:59:50,396
100-megabyte range, just to add


1945
00:59:50,396 --> 00:59:51,976
one intelligent feature to their


1946
00:59:51,976 --> 00:59:52,526
application.


1947
00:59:53,376 --> 00:59:54,506
And now, through transfer


1948
00:59:54,506 --> 00:59:55,886
learning, they can take that


1949
00:59:55,886 --> 00:59:57,266
model size down to three


1950
00:59:57,266 --> 00:59:57,726
megabytes.


1951
00:59:58,516 --> 01:00:05,856
[ Applause ]


1952
01:00:06,356 --> 01:00:08,296
Now this is far cooler to see if


1953
01:00:08,296 --> 01:00:09,716
you see how it's all done inside


1954
01:00:09,716 --> 01:00:11,726
Xcode and Xcode Playgrounds, so


1955
01:00:11,726 --> 01:00:13,166
I'd like to invite Lizzie up to


1956
01:00:13,166 --> 01:00:14,186
give you a demo of that now.


1957
01:00:14,856 --> 01:00:16,856
[ Applause ]


1958
01:00:17,196 --> 01:00:17,406
Lizzie?


1959
01:00:18,746 --> 01:00:19,276
>> Thank you, John.


1960
01:00:20,196 --> 01:00:21,506
Let's take a look at how to


1961
01:00:21,506 --> 01:00:23,456
create an app to classify


1962
01:00:23,456 --> 01:00:24,936
different types of flowers.


1963
01:00:25,686 --> 01:00:26,986
Now I've started by using a


1964
01:00:27,136 --> 01:00:28,146
state-of-the-art image


1965
01:00:28,146 --> 01:00:29,516
classifier model called


1966
01:00:29,516 --> 01:00:31,726
Inception B3, but there are two


1967
01:00:31,726 --> 01:00:33,076
problems with this approach.


1968
01:00:33,506 --> 01:00:35,486
One, this model is quite large.


1969
01:00:35,486 --> 01:00:37,846
It's taking up 100 megabytes in


1970
01:00:37,846 --> 01:00:39,076
our app.


1971
01:00:39,076 --> 01:00:40,916
And the second is even though


1972
01:00:40,916 --> 01:00:42,986
this model has support for 1000


1973
01:00:43,046 --> 01:00:44,976
classifications, it can't


1974
01:00:45,136 --> 01:00:47,396
correctly classify a rose.


1975
01:00:48,076 --> 01:00:49,826
Now normally what I'd have to do


1976
01:00:49,826 --> 01:00:51,276
is switch to a new development


1977
01:00:51,276 --> 01:00:52,936
environment, download an open


1978
01:00:52,996 --> 01:00:54,466
source machine learning library


1979
01:00:54,466 --> 01:00:56,216
and spend hours training a new


1980
01:00:56,216 --> 01:00:56,586
model.


1981
01:00:57,376 --> 01:00:59,686
But now with the power of Create


1982
01:00:59,796 --> 01:01:02,656
ML, you can do this in minutes


1983
01:01:02,896 --> 01:01:04,826
and in Xcode.


1984
01:01:04,826 --> 01:01:05,866
Now I'll switch to a new


1985
01:01:05,866 --> 01:01:08,026
Playground and import Create ML


1986
01:01:08,026 --> 01:01:08,226
UI.


1987
01:01:09,506 --> 01:01:11,296
The next step is to define a


1988
01:01:11,296 --> 01:01:14,066
builder that can build image


1989
01:01:14,066 --> 01:01:15,006
classifier models.


1990
01:01:16,256 --> 01:01:18,066
Then to enable drag-and-drop


1991
01:01:18,066 --> 01:01:20,166
interaction with this model, we


1992
01:01:20,166 --> 01:01:21,796
can show the builder in the live


1993
01:01:21,856 --> 01:01:22,136
view.


1994
01:01:22,736 --> 01:01:24,286
And see, on the side we get a


1995
01:01:24,326 --> 01:01:26,146
prompt to drag in images to


1996
01:01:26,146 --> 01:01:26,886
begin training.


1997
01:01:28,366 --> 01:01:30,936
Now over on my desktop, I happen


1998
01:01:30,936 --> 01:01:32,506
to have a bunch of different


1999
01:01:32,506 --> 01:01:35,096
images of flowers organized into


2000
01:01:35,096 --> 01:01:36,676
folders with the name of the


2001
01:01:36,676 --> 01:01:37,776
particular one that they are.


2002
01:01:38,596 --> 01:01:39,686
So we have some daisies,


2003
01:01:40,026 --> 01:01:43,226
hibiscuses, and of course, some


2004
01:01:43,226 --> 01:01:43,656
roses.


2005
01:01:45,416 --> 01:01:46,566
Now what I'll do is I'll take


2006
01:01:46,566 --> 01:01:48,316
this folder and drag it into the


2007
01:01:48,316 --> 01:01:48,636
UI.


2008
01:01:49,466 --> 01:01:50,936
And instantly, an image


2009
01:01:50,936 --> 01:01:52,816
classifier model begins training


2010
01:01:52,896 --> 01:01:55,026
on the Mac, accelerated by the


2011
01:01:55,156 --> 01:01:55,646
GPU.


2012
01:01:55,726 --> 01:01:58,156
And right away, I can see what


2013
01:01:58,156 --> 01:01:59,336
the accuracy was on this


2014
01:01:59,366 --> 01:02:00,116
training dataset.


2015
01:02:00,546 --> 01:02:01,856
But what I'd really like to know


2016
01:02:01,856 --> 01:02:03,586
is how it performs on new types


2017
01:02:03,636 --> 01:02:05,186
of flowers that it hasn't seen.


2018
01:02:05,316 --> 01:02:07,156
And I've set some of those aside


2019
01:02:07,206 --> 01:02:09,146
here, and I can just drag them


2020
01:02:09,246 --> 01:02:10,796
in to let the model begin


2021
01:02:10,796 --> 01:02:12,346
evaluating on these new ones.


2022
01:02:13,076 --> 01:02:15,266
And if I scroll, you can see


2023
01:02:15,456 --> 01:02:16,996
what the actual label was for


2024
01:02:16,996 --> 01:02:18,556
each type of flower and what the


2025
01:02:18,556 --> 01:02:19,436
model predicted.


2026
01:02:20,676 --> 01:02:24,006
Now 95% is pretty decent on this


2027
01:02:24,056 --> 01:02:24,486
dataset.


2028
01:02:25,236 --> 01:02:26,886
So what I'd like to do is add it


2029
01:02:26,886 --> 01:02:27,986
into my app.


2030
01:02:27,986 --> 01:02:29,456
And you can do so just by


2031
01:02:29,456 --> 01:02:31,406
dragging and dropping it.


2032
01:02:34,096 --> 01:02:34,736
I'll then add it.


2033
01:02:34,856 --> 01:02:36,616
And if we take a look at this


2034
01:02:36,616 --> 01:02:38,926
new model, we can see it's only


2035
01:02:39,116 --> 01:02:40,016
50 kilobytes.


2036
01:02:40,566 --> 01:02:41,866
That's a huge savings.


2037
01:02:42,396 --> 01:02:44,226
So I'll go ahead and delete --


2038
01:02:45,516 --> 01:02:52,046
[ Applause ]


2039
01:02:52,546 --> 01:02:53,966
-- I'll delete the 100-megabyte


2040
01:02:53,966 --> 01:02:55,496
model and initialize the new


2041
01:02:55,496 --> 01:02:56,966
image classifier.


2042
01:02:58,986 --> 01:03:01,976
Now if I rerun the app, it's


2043
01:03:02,046 --> 01:03:04,196
bundling this new model into the


2044
01:03:04,346 --> 01:03:05,026
application.


2045
01:03:05,696 --> 01:03:07,276
We can go ahead and test it to


2046
01:03:07,346 --> 01:03:08,806
see if it can correctly predict


2047
01:03:09,176 --> 01:03:10,626
on the images that we've trained


2048
01:03:10,626 --> 01:03:13,116
it on, or new images of the same


2049
01:03:13,116 --> 01:03:13,806
types of flowers.


2050
01:03:14,376 --> 01:03:16,146
And indeed, it can correctly


2051
01:03:16,146 --> 01:03:17,416
classify a rose.


2052
01:03:18,366 --> 01:03:19,546
Let's try it on a hibiscus.


2053
01:03:19,546 --> 01:03:22,006
And it can correctly predict on


2054
01:03:22,006 --> 01:03:23,346
those, too, since we've trained


2055
01:03:23,346 --> 01:03:24,896
it and incorporated it into our


2056
01:03:25,636 --> 01:03:25,703
app.


2057
01:03:25,996 --> 01:03:27,366
So as you've seen, we've been


2058
01:03:27,366 --> 01:03:29,536
able to train our own classifier


2059
01:03:29,536 --> 01:03:31,676
models using Create ML in a


2060
01:03:31,786 --> 01:03:33,056
fraction of the amount of time


2061
01:03:33,286 --> 01:03:34,886
to produce models a fraction of


2062
01:03:34,886 --> 01:03:37,536
the size, all using Swift and


2063
01:03:37,726 --> 01:03:38,036
Xcode.


2064
01:03:38,816 --> 01:03:39,746
Back over to you, John.


2065
01:03:40,516 --> 01:03:43,296
[ Applause ]


2066
01:03:43,796 --> 01:03:44,146
>> Thanks, Lizzie.


2067
01:03:47,296 --> 01:03:49,106
Isn't that cool, a custom image


2068
01:03:49,106 --> 01:03:50,496
classifier trained with three


2069
01:03:50,496 --> 01:03:52,776
lines of Swift, in seconds,


2070
01:03:53,066 --> 01:03:57,176
right there on a Mac?


2071
01:03:57,386 --> 01:03:59,836
So we've looked at new Vision


2072
01:03:59,836 --> 01:04:01,446
and Natural Language APIs and


2073
01:04:01,446 --> 01:04:02,626
the enhancements we've made


2074
01:04:02,626 --> 01:04:05,196
there; our improvements with


2075
01:04:05,196 --> 01:04:06,866
Core ML 2 with smaller, faster


2076
01:04:06,866 --> 01:04:08,486
models and even more


2077
01:04:08,486 --> 01:04:10,526
customization; and Create ML,


2078
01:04:10,526 --> 01:04:12,546
our brand-new machine learning


2079
01:04:12,546 --> 01:04:16,546
training framework for the Mac.


2080
01:04:16,756 --> 01:04:17,746
Now I'd like to talk about


2081
01:04:17,746 --> 01:04:19,016
another area of intelligence


2082
01:04:19,066 --> 01:04:20,046
that we've built into the OS,


2083
01:04:20,046 --> 01:04:23,296
and that's shortcuts, a powerful


2084
01:04:23,296 --> 01:04:25,106
new way for you to expose key


2085
01:04:25,106 --> 01:04:26,196
capabilities of your


2086
01:04:26,196 --> 01:04:27,776
applications through Siri.


2087
01:04:27,866 --> 01:04:31,176
And you can even expose these


2088
01:04:31,176 --> 01:04:34,196
key capabilities using voice


2089
01:04:34,196 --> 01:04:34,646
commands.


2090
01:04:36,316 --> 01:04:38,606
Previously, sections of the OS


2091
01:04:38,606 --> 01:04:40,536
that had suggested features and


2092
01:04:40,536 --> 01:04:42,846
actions for Apple's software are


2093
01:04:42,846 --> 01:04:44,306
now accessible to you through


2094
01:04:44,306 --> 01:04:44,856
shortcuts.


2095
01:04:46,266 --> 01:04:47,906
We do all this prediction on


2096
01:04:47,906 --> 01:04:49,576
device using machine learning


2097
01:04:49,856 --> 01:04:50,976
that preserves your users'


2098
01:04:51,036 --> 01:04:51,486
privacy.


2099
01:04:53,456 --> 01:04:54,666
So you're probably asking how do


2100
01:04:54,666 --> 01:04:55,526
you adopt shortcuts?


2101
01:04:56,666 --> 01:04:57,956
Well, many of you have already


2102
01:04:57,956 --> 01:05:00,306
adopted NSUserActivity for


2103
01:05:00,356 --> 01:05:01,936
features such as Spotlight


2104
01:05:01,936 --> 01:05:03,096
search and Handoff.


2105
01:05:03,256 --> 01:05:05,976
And if you have -- and it's as


2106
01:05:06,026 --> 01:05:07,496
simple as adding this one line


2107
01:05:07,496 --> 01:05:09,206
of code making them eligible to


2108
01:05:09,206 --> 01:05:10,796
prediction for the system.


2109
01:05:11,016 --> 01:05:12,496
[ Applause ]


2110
01:05:12,496 --> 01:05:13,436
Yeah, one line of code.


2111
01:05:13,436 --> 01:05:18,016
But if you want the full, rich


2112
01:05:18,046 --> 01:05:20,376
experience of shortcuts, then


2113
01:05:20,376 --> 01:05:21,826
you want to adopt the new Siri


2114
01:05:21,826 --> 01:05:22,756
kit Intense API.


2115
01:05:23,996 --> 01:05:26,406
That allows rich, inline


2116
01:05:28,046 --> 01:05:29,606
capabilities of your application


2117
01:05:29,606 --> 01:05:32,106
to be exposed in Siri, custom


2118
01:05:32,106 --> 01:05:33,726
voice triggers and responses,


2119
01:05:34,126 --> 01:05:35,866
and more importantly, more


2120
01:05:35,906 --> 01:05:37,776
targeted predictions of when


2121
01:05:37,776 --> 01:05:39,736
those shortcuts will be


2122
01:05:39,866 --> 01:05:41,226
interesting to your users in the


2123
01:05:41,226 --> 01:05:41,616
future.


2124
01:05:42,786 --> 01:05:45,856
Now a great shortcut is one that


2125
01:05:45,856 --> 01:05:47,276
accelerates engagement with your


2126
01:05:47,276 --> 01:05:48,996
application, and increases


2127
01:05:48,996 --> 01:05:49,886
engagement, too.


2128
01:05:50,656 --> 01:05:52,106
It's one that's likely to be


2129
01:05:52,566 --> 01:05:53,826
repeated more often.


2130
01:05:54,686 --> 01:05:56,566
So in the TeamSnap example you


2131
01:05:56,566 --> 01:05:58,426
want to be able to check your


2132
01:05:58,456 --> 01:06:00,656
kid's soccer game schedule every


2133
01:06:00,656 --> 01:06:01,536
Saturday morning.


2134
01:06:02,526 --> 01:06:03,796
And ideally, it's one that can


2135
01:06:03,796 --> 01:06:05,976
be engaged right there in the


2136
01:06:06,046 --> 01:06:08,196
Siri UI and handled without the


2137
01:06:08,196 --> 01:06:09,336
need to punch out to your app.


2138
01:06:09,336 --> 01:06:11,296
But you do have the option if


2139
01:06:11,376 --> 01:06:12,276
that's something that you want


2140
01:06:12,276 --> 01:06:13,826
to do.


2141
01:06:14,176 --> 01:06:15,806
Now when creating a shortcut,


2142
01:06:16,046 --> 01:06:17,336
you need to do three simple


2143
01:06:17,336 --> 01:06:17,686
things.


2144
01:06:18,336 --> 01:06:19,636
You obviously need to define the


2145
01:06:19,636 --> 01:06:21,066
shortcut and do it for those


2146
01:06:21,066 --> 01:06:22,246
actions that really are


2147
01:06:22,246 --> 01:06:23,366
interesting to the users.


2148
01:06:24,516 --> 01:06:25,716
You need to donate when those


2149
01:06:25,716 --> 01:06:27,446
shortcuts occur, even if that's


2150
01:06:27,446 --> 01:06:29,346
in your application, because we


2151
01:06:29,346 --> 01:06:30,496
need that signal to be able to


2152
01:06:30,496 --> 01:06:31,796
predict those shortcuts in the


2153
01:06:31,796 --> 01:06:32,106
future.


2154
01:06:32,106 --> 01:06:34,196
And of course, you want to


2155
01:06:34,196 --> 01:06:35,406
handle those shortcuts when they


2156
01:06:35,406 --> 01:06:35,566
occur.


2157
01:06:35,566 --> 01:06:38,676
Now if you've done all this, you


2158
01:06:38,676 --> 01:06:40,436
get something pretty cool in


2159
01:06:40,436 --> 01:06:41,916
that you can interact with your


2160
01:06:41,916 --> 01:06:43,496
shortcut directly from home pod.


2161
01:06:44,246 --> 01:06:45,626
So now without picking up your


2162
01:06:45,626 --> 01:06:47,166
phone, you can just ask Siri


2163
01:06:47,166 --> 01:06:48,816
from your home pod for your


2164
01:06:48,816 --> 01:06:50,656
kid's soccer roster, and it will


2165
01:06:50,656 --> 01:06:53,426
respond using the app.


2166
01:06:53,696 --> 01:06:55,766
Now if you also want your


2167
01:06:55,766 --> 01:06:57,096
shortcuts to be exposed through


2168
01:06:57,096 --> 01:06:59,016
the Siri Watch Face, you can


2169
01:06:59,016 --> 01:07:00,756
just adopt this new Relevant


2170
01:07:00,756 --> 01:07:01,046
API.


2171
01:07:02,066 --> 01:07:06,026
So that's shortcuts, a powerful


2172
01:07:06,026 --> 01:07:08,056
new way to expose key


2173
01:07:08,056 --> 01:07:09,606
capabilities of your application


2174
01:07:09,846 --> 01:07:11,526
and increase engagement through


2175
01:07:11,526 --> 01:07:12,016
Siri.


2176
01:07:13,686 --> 01:07:15,246
Now I'd like to hand it over to


2177
01:07:15,246 --> 01:07:16,626
Jeremy to talk to you about


2178
01:07:16,656 --> 01:07:17,676
what's new in Metal.


2179
01:07:17,866 --> 01:07:18,046
Jeremy?


2180
01:07:19,516 --> 01:07:22,816
[ Applause ]


2181
01:07:23,316 --> 01:07:23,816
>> Thanks, John.


2182
01:07:24,646 --> 01:07:26,526
So Metal is Apple's modern,


2183
01:07:26,526 --> 01:07:27,616
high-performance,


2184
01:07:27,856 --> 01:07:29,056
high-efficiency programming


2185
01:07:29,056 --> 01:07:30,646
interface to the awesome power


2186
01:07:30,646 --> 01:07:32,626
of the GPU at the heart of each


2187
01:07:32,626 --> 01:07:33,636
of Apple's platforms.


2188
01:07:34,076 --> 01:07:35,716
It accelerates both advanced 3D


2189
01:07:35,716 --> 01:07:37,526
graphics and general purpose


2190
01:07:37,526 --> 01:07:38,976
data parallel computations.


2191
01:07:39,756 --> 01:07:41,306
And since we introduced Metal in


2192
01:07:41,306 --> 01:07:43,416
2014, we've seen it used for


2193
01:07:43,416 --> 01:07:44,916
everything from smooth,


2194
01:07:44,916 --> 01:07:47,246
high-performance UI to modern 3D


2195
01:07:47,246 --> 01:07:49,266
games, advanced computational


2196
01:07:49,266 --> 01:07:51,396
photography, and the latest in


2197
01:07:51,396 --> 01:07:53,256
AR and VR experiences.


2198
01:07:53,936 --> 01:07:54,866
And when we introduced our


2199
01:07:54,866 --> 01:07:56,926
latest iPhones last fall, we


2200
01:07:56,926 --> 01:07:58,506
were incredibly excited to


2201
01:07:58,506 --> 01:08:00,096
reveal the next chapter in the


2202
01:08:00,096 --> 01:08:02,556
Metal story with the A11 Bionic


2203
01:08:02,846 --> 01:08:05,176
chip where Apple harnessed many


2204
01:08:05,176 --> 01:08:07,166
years of deep expertise in


2205
01:08:07,276 --> 01:08:09,246
hardware and software design to


2206
01:08:09,246 --> 01:08:11,586
bring the Apple-designed GPU,


2207
01:08:11,766 --> 01:08:14,246
optimized for Metal 2 with such


2208
01:08:14,286 --> 01:08:15,776
innovative new features as tile


2209
01:08:15,776 --> 01:08:17,076
shading and image blocks, and


2210
01:08:17,076 --> 01:08:18,305
advancing the state of the art


2211
01:08:18,305 --> 01:08:20,046
of GPU programming with both


2212
01:08:20,046 --> 01:08:21,765
faster performance and lower


2213
01:08:21,765 --> 01:08:22,106
power.


2214
01:08:22,106 --> 01:08:24,406
Now your applications can use


2215
01:08:24,406 --> 01:08:26,106
Metal directly for 3D graphics


2216
01:08:26,106 --> 01:08:27,386
and GPU Compute.


2217
01:08:27,555 --> 01:08:29,136
And Metal powers many of Apple's


2218
01:08:29,136 --> 01:08:31,126
system frameworks for graphics,


2219
01:08:31,345 --> 01:08:33,015
media, and data processing.


2220
01:08:33,015 --> 01:08:34,765
Let me give you just one


2221
01:08:34,765 --> 01:08:35,256
example.


2222
01:08:35,256 --> 01:08:37,716
Our iOS camera framework uses


2223
01:08:37,716 --> 01:08:38,886
Metal to calculate depth


2224
01:08:38,886 --> 01:08:41,196
information, identify people in


2225
01:08:41,196 --> 01:08:42,676
photos, and generate this


2226
01:08:42,716 --> 01:08:44,145
depth-of-field effect in this


2227
01:08:44,145 --> 01:08:45,395
gorgeous portrait image.


2228
01:08:46,176 --> 01:08:47,786
And developers like Epic Games


2229
01:08:47,786 --> 01:08:49,216
are using Metal's broad support


2230
01:08:49,216 --> 01:08:50,805
across all of our platforms to


2231
01:08:50,805 --> 01:08:52,026
bring their smash-hit game


2232
01:08:52,106 --> 01:08:54,836
Fortnight to iPhone, iPad, and


2233
01:08:54,836 --> 01:08:55,116
Mac.


2234
01:08:56,486 --> 01:08:58,796
AMB's metal-accelerated radion


2235
01:08:58,796 --> 01:08:59,395
[assumed spelling] pro-ender


2236
01:08:59,395 --> 01:09:01,805
plugins, are now driving high


2237
01:09:01,805 --> 01:09:03,946
performance, 3D contact creation


2238
01:09:03,946 --> 01:09:05,566
and professional editing in


2239
01:09:05,566 --> 01:09:08,086
Maxon Cinema4D and Autodesk


2240
01:09:08,086 --> 01:09:08,876
Maya.


2241
01:09:09,466 --> 01:09:11,526
And apps like Gravity Sketch are


2242
01:09:11,526 --> 01:09:13,256
using Metal to power the next


2243
01:09:13,256 --> 01:09:14,946
generations of artists in


2244
01:09:14,946 --> 01:09:16,196
immersive professional VR


2245
01:09:16,196 --> 01:09:17,106
editing.


2246
01:09:18,696 --> 01:09:20,055
Metal's machine learning


2247
01:09:20,055 --> 01:09:21,816
acceleration empowers iOS apps


2248
01:09:21,816 --> 01:09:23,386
like BeCasso to transform your


2249
01:09:23,386 --> 01:09:25,826
photos into beautiful paintings.


2250
01:09:26,225 --> 01:09:27,506
And drives automatic,


2251
01:09:27,616 --> 01:09:29,515
intelligent image editing in


2252
01:09:29,515 --> 01:09:31,435
Pixelmator Pro for macOS.


2253
01:09:32,225 --> 01:09:33,055
And those are just a few


2254
01:09:33,055 --> 01:09:34,996
examples as the developer


2255
01:09:34,996 --> 01:09:37,446
adoption of metal has been truly


2256
01:09:37,446 --> 01:09:38,486
astounding, with more than


2257
01:09:38,546 --> 01:09:40,626
400,000 apps now using the Metal


2258
01:09:40,626 --> 01:09:40,886
API.


2259
01:09:42,395 --> 01:09:44,316
And all systems running an iOS


2260
01:09:44,376 --> 01:09:46,536
12 and macOS Mojave support


2261
01:09:46,536 --> 01:09:48,185
Metal, which includes all iOS


2262
01:09:48,185 --> 01:09:49,716
devices and all Macs released in


2263
01:09:49,716 --> 01:09:51,296
at least the last five years,


2264
01:09:52,326 --> 01:09:53,856
which means there are now well


2265
01:09:53,856 --> 01:09:56,326
over 1 billion Metal systems for


2266
01:09:56,326 --> 01:09:56,976
your applications and games.


2267
01:09:57,106 --> 01:10:00,886
So with Metal's deep and broad


2268
01:10:00,886 --> 01:10:02,416
support across all of Apple's


2269
01:10:02,416 --> 01:10:04,626
desktop and mobile platforms, we


2270
01:10:04,626 --> 01:10:06,106
are now deprecating the legacy


2271
01:10:06,106 --> 01:10:08,476
OpenGL and OpenCL GPU framework,


2272
01:10:08,476 --> 01:10:10,686
starting in macOS Mojave, iOS


2273
01:10:10,686 --> 01:10:12,026
12, and tvOS 12.


2274
01:10:12,116 --> 01:10:14,786
Now apps using these legacy APIs


2275
01:10:14,786 --> 01:10:15,916
will still continue to work in


2276
01:10:15,916 --> 01:10:17,256
these releases, but deprecation


2277
01:10:17,256 --> 01:10:18,766
is a first step as we wind down


2278
01:10:18,766 --> 01:10:19,966
legacy technologies.


2279
01:10:20,096 --> 01:10:21,156
So if you've not already done


2280
01:10:21,156 --> 01:10:22,256
so, you should begin


2281
01:10:22,256 --> 01:10:23,336
transitioning your apps to


2282
01:10:23,336 --> 01:10:23,676
Metal.


2283
01:10:23,676 --> 01:10:24,806
And we'll communicate more


2284
01:10:24,806 --> 01:10:27,186
details about this transition in


2285
01:10:27,186 --> 01:10:27,786
the near future.


2286
01:10:28,716 --> 01:10:29,906
Now as you bring your apps to


2287
01:10:29,906 --> 01:10:30,966
metal, we are here to help.


2288
01:10:31,296 --> 01:10:33,016
The Metal API is dramatically


2289
01:10:33,016 --> 01:10:34,726
easier to use and much more


2290
01:10:34,726 --> 01:10:35,856
approachable than these other


2291
01:10:35,856 --> 01:10:37,246
GPU programming APIs.


2292
01:10:37,496 --> 01:10:38,856
It contains a familiar, yet


2293
01:10:38,856 --> 01:10:40,766
powerful, C++ GPU shading


2294
01:10:40,766 --> 01:10:41,186
language.


2295
01:10:41,436 --> 01:10:43,126
And we provide a full suite of


2296
01:10:43,126 --> 01:10:44,426
advanced debugging and


2297
01:10:44,426 --> 01:10:46,666
performance profiling tools for


2298
01:10:46,666 --> 01:10:48,346
using Metal, all built right


2299
01:10:48,346 --> 01:10:49,076
into Xcode.


2300
01:10:49,076 --> 01:10:51,286
We have GPU performance counters


2301
01:10:51,286 --> 01:10:52,456
with advanced profiling to


2302
01:10:52,456 --> 01:10:53,746
identify your most expensive


2303
01:10:53,746 --> 01:10:55,506
lines of shader code and a


2304
01:10:55,506 --> 01:10:57,476
visual API debugger for


2305
01:10:57,476 --> 01:10:58,646
navigating your Metal function


2306
01:10:58,646 --> 01:11:00,666
calls, a Metal System Trace to


2307
01:11:00,666 --> 01:11:02,226
put your Metal commands in the


2308
01:11:02,226 --> 01:11:03,506
context of everything else


2309
01:11:03,506 --> 01:11:04,506
happening on the system.


2310
01:11:04,996 --> 01:11:05,976
And we're really excited to


2311
01:11:05,976 --> 01:11:07,476
announce two new powerful tools


2312
01:11:07,516 --> 01:11:08,956
this year, a new Metal


2313
01:11:08,956 --> 01:11:10,586
Dependency Viewer where you can


2314
01:11:10,586 --> 01:11:11,776
investigate your complex,


2315
01:11:11,776 --> 01:11:13,326
multipass rendering and command


2316
01:11:13,326 --> 01:11:15,526
encoders, and an all-new,


2317
01:11:15,526 --> 01:11:17,666
interactive GPU source code


2318
01:11:17,666 --> 01:11:19,306
shader debugger where you can


2319
01:11:19,306 --> 01:11:20,806
actually explore your Metal code


2320
01:11:20,806 --> 01:11:22,966
right down to the pixel level.


2321
01:11:24,036 --> 01:11:25,046
Now you have to see these new


2322
01:11:25,046 --> 01:11:26,596
tools in action, so I'd like to


2323
01:11:26,596 --> 01:11:27,976
invite Seth to give you a


2324
01:11:27,976 --> 01:11:28,756
demonstration.


2325
01:11:29,346 --> 01:11:29,556
Seth?


2326
01:11:30,516 --> 01:11:35,466
[ Applause ]


2327
01:11:35,966 --> 01:11:36,496
>> Thank you, John.


2328
01:11:37,416 --> 01:11:39,556
Xcode's GP debugger is the tool


2329
01:11:39,556 --> 01:11:40,566
for developing your Metal


2330
01:11:40,566 --> 01:11:41,216
applications.


2331
01:11:41,576 --> 01:11:43,306
In the Debug Navigator on the


2332
01:11:43,306 --> 01:11:44,646
left, you can see all the Metal


2333
01:11:44,646 --> 01:11:45,926
API codes and [inaudible] codes


2334
01:11:46,126 --> 01:11:46,906
used in your frame.


2335
01:11:46,906 --> 01:11:48,956
And on the right, you can see


2336
01:11:48,956 --> 01:11:51,036
the results of the selected


2337
01:11:51,036 --> 01:11:51,406
[inaudible].


2338
01:11:51,406 --> 01:11:53,186
The main editor shows you the --


2339
01:11:53,186 --> 01:11:54,656
all the buffers, textures, and


2340
01:11:54,656 --> 01:11:56,196
other resources that were used


2341
01:11:56,196 --> 01:11:57,316
for that [inaudible].


2342
01:11:57,576 --> 01:11:59,086
Well, new in Xcode 10, we're


2343
01:11:59,086 --> 01:12:00,096
introducing the Dependency


2344
01:12:00,096 --> 01:12:01,556
Viewer, a powerful way to


2345
01:12:01,556 --> 01:12:04,236
understand how complex render


2346
01:12:04,236 --> 01:12:05,856
passes combine to form your


2347
01:12:05,856 --> 01:12:06,166
scene.


2348
01:12:07,706 --> 01:12:09,136
This gives you a blueprint of


2349
01:12:09,136 --> 01:12:12,296
your frame in explaining and


2350
01:12:12,296 --> 01:12:14,276
understanding how the complex


2351
01:12:14,276 --> 01:12:15,666
render graphs at one application


2352
01:12:15,746 --> 01:12:17,696
such as Unity's breathtaking


2353
01:12:17,696 --> 01:12:18,776
"Book of the Dead" demo shown


2354
01:12:18,776 --> 01:12:19,406
here.


2355
01:12:20,016 --> 01:12:23,556
I can zoom out to see more


2356
01:12:24,496 --> 01:12:24,656
detail.


2357
01:12:24,816 --> 01:12:26,486
Earlier render passes are shown


2358
01:12:26,486 --> 01:12:28,696
at the top, with the later


2359
01:12:28,696 --> 01:12:29,856
render passes shown at the


2360
01:12:29,856 --> 01:12:30,426
bottom.


2361
01:12:31,296 --> 01:12:32,206
The lines indicate the


2362
01:12:32,206 --> 01:12:34,176
dependencies between passes,


2363
01:12:34,876 --> 01:12:36,136
with those for the selected pass


2364
01:12:36,376 --> 01:12:37,426
highlighted in blue.


2365
01:12:38,306 --> 01:12:40,096
As you can see, with more than


2366
01:12:40,096 --> 01:12:41,616
100 render passes, there's


2367
01:12:41,616 --> 01:12:42,896
clearly a lot going on in this


2368
01:12:42,896 --> 01:12:43,146
scene.


2369
01:12:44,496 --> 01:12:46,516
Now as good as this scene looks,


2370
01:12:47,026 --> 01:12:48,276
there's always room for more


2371
01:12:48,276 --> 01:12:48,756
flair.


2372
01:12:49,256 --> 01:12:50,736
So I did an additional render


2373
01:12:50,736 --> 01:12:52,076
pass, the lens flare.


2374
01:12:52,076 --> 01:12:54,336
But as you can see, something


2375
01:12:54,336 --> 01:12:55,806
didn't [inaudible] quite right


2376
01:12:55,806 --> 01:12:57,156
-- far, far to green.


2377
01:12:58,176 --> 01:13:03,376
Well, let's zoom in, select a


2378
01:13:03,416 --> 01:13:06,186
pixel, and launch the new Shader


2379
01:13:06,186 --> 01:13:08,566
Debugger, a powerful interactive


2380
01:13:08,566 --> 01:13:09,956
tool to let you visually debug


2381
01:13:09,956 --> 01:13:10,476
shaders [inaudible].


2382
01:13:11,206 --> 01:13:14,676
In the main editor, I can see my


2383
01:13:14,676 --> 01:13:15,156
source code.


2384
01:13:15,816 --> 01:13:17,396
And in the sidebar to its right,


2385
01:13:17,526 --> 01:13:19,126
I can see variables touched by


2386
01:13:19,256 --> 01:13:21,176
each line of code.


2387
01:13:21,176 --> 01:13:22,806
Additionally, I can expand any


2388
01:13:22,806 --> 01:13:24,526
of these to see more details in


2389
01:13:24,526 --> 01:13:25,316
line.


2390
01:13:26,146 --> 01:13:27,876
These two views visualize the


2391
01:13:27,876 --> 01:13:29,486
area around the selected pixel,


2392
01:13:30,316 --> 01:13:31,906
corresponding to the highlighted


2393
01:13:31,906 --> 01:13:34,496
region in the frame attachment.


2394
01:13:36,016 --> 01:13:37,986
The view on the left visualizes


2395
01:13:37,986 --> 01:13:39,336
the variable value.


2396
01:13:39,336 --> 01:13:41,576
And the one on the right, the


2397
01:13:41,726 --> 01:13:44,276
pixel -- the execution mask.


2398
01:13:44,336 --> 01:13:45,946
This indicates which pixels


2399
01:13:45,996 --> 01:13:48,156
executed this line of code.


2400
01:13:48,326 --> 01:13:49,766
This is an incredibly powerful


2401
01:13:49,826 --> 01:13:52,256
way to debug the massively


2402
01:13:52,256 --> 01:13:53,296
[inaudible] execution of shaders


2403
01:13:53,396 --> 01:13:53,756
on the GPU.


2404
01:13:53,756 --> 01:13:57,586
Now you can see here that the


2405
01:13:57,586 --> 01:13:59,016
shape of the execution mask


2406
01:13:59,516 --> 01:14:00,596
matches that of the visual


2407
01:14:00,596 --> 01:14:02,296
aberration, telling me that the


2408
01:14:02,296 --> 01:14:04,656
issue exists on this line of


2409
01:14:05,206 --> 01:14:05,426
code.


2410
01:14:05,426 --> 01:14:06,386
Well, now that I know where the


2411
01:14:06,386 --> 01:14:07,806
issue is, I can see what I've


2412
01:14:07,806 --> 01:14:09,456
done wrong, using the vector


2413
01:14:09,456 --> 01:14:10,606
length of the lens flare rather


2414
01:14:10,606 --> 01:14:12,356
than the color of the lens


2415
01:14:12,356 --> 01:14:12,556
flare.


2416
01:14:12,556 --> 01:14:13,976
That will be easy to fix.


2417
01:14:17,286 --> 01:14:18,916
I can now hit the update shaders


2418
01:14:18,916 --> 01:14:20,576
button to quickly apply the fix,


2419
01:14:20,716 --> 01:14:22,386
recompiling the shader and


2420
01:14:22,386 --> 01:14:23,836
deploying it to the GPU.


2421
01:14:24,026 --> 01:14:26,876
And here we can see that my lens


2422
01:14:26,876 --> 01:14:28,266
flare is fixed, and the scene


2423
01:14:28,266 --> 01:14:28,776
looks cool.


2424
01:14:29,516 --> 01:14:36,246
[ Applause ]


2425
01:14:36,746 --> 01:14:37,936
So that's the new Dependency


2426
01:14:37,936 --> 01:14:39,946
Viewer and GP Shader Debugger in


2427
01:14:39,946 --> 01:14:41,626
Xcode 10, giving you powerful


2428
01:14:41,626 --> 01:14:42,856
new tools to build your Metal


2429
01:14:42,856 --> 01:14:43,416
applications.


2430
01:14:44,066 --> 01:14:44,446
Jeremy?


2431
01:14:45,276 --> 01:14:47,496
>> All right, [applause] thank


2432
01:14:47,496 --> 01:14:47,776
you, Seth.


2433
01:14:50,806 --> 01:14:52,036
So in addition to these amazing


2434
01:14:52,036 --> 01:14:53,396
new tools, we're continuing to


2435
01:14:53,396 --> 01:14:55,266
advance Metal with a fantastic


2436
01:14:55,266 --> 01:14:57,276
set of new features in iOS 12


2437
01:14:57,276 --> 01:14:58,606
and macOS Mojave.


2438
01:14:58,606 --> 01:14:59,866
Now I'm going to highlight just


2439
01:14:59,866 --> 01:15:00,856
three of them today --


2440
01:15:01,526 --> 01:15:03,096
GPU-driven command encoding,


2441
01:15:03,416 --> 01:15:04,556
machine learning training


2442
01:15:04,556 --> 01:15:06,576
acceleration, and ray tracing.


2443
01:15:07,496 --> 01:15:09,016
So first, GPU-driven command


2444
01:15:09,016 --> 01:15:09,466
encoding.


2445
01:15:09,676 --> 01:15:11,606
Now historically, your app would


2446
01:15:11,606 --> 01:15:13,536
encode its GPU commands using


2447
01:15:13,536 --> 01:15:14,936
the CPU and then subsequently


2448
01:15:14,936 --> 01:15:16,206
execute those commands on the


2449
01:15:16,206 --> 01:15:16,686
GPU.


2450
01:15:17,086 --> 01:15:18,196
And while Metal enabled this


2451
01:15:18,196 --> 01:15:20,326
encoding to be very fast, it


2452
01:15:20,326 --> 01:15:21,426
could still become bottlenecked


2453
01:15:21,456 --> 01:15:23,086
by the synchronization between


2454
01:15:23,086 --> 01:15:24,246
the CPU and the GPU.


2455
01:15:24,746 --> 01:15:26,506
Well, now in iOS 12 and macOS


2456
01:15:26,506 --> 01:15:28,026
Mojave, you can actually encode


2457
01:15:28,026 --> 01:15:29,836
those commands right on the GPU


2458
01:15:29,836 --> 01:15:32,046
itself, freeing up precious CPU


2459
01:15:32,046 --> 01:15:34,076
time for other use by your games


2460
01:15:34,076 --> 01:15:34,806
and apps.


2461
01:15:35,276 --> 01:15:36,746
And because you issue these


2462
01:15:36,746 --> 01:15:38,476
commands right on the GPU using


2463
01:15:38,476 --> 01:15:39,886
a compute shader, you can


2464
01:15:39,886 --> 01:15:41,016
actually officially construct


2465
01:15:41,016 --> 01:15:42,386
massive numbers of commands in


2466
01:15:42,386 --> 01:15:44,076
parallel as well, unlocking


2467
01:15:44,076 --> 01:15:45,666
completely new levels of


2468
01:15:45,666 --> 01:15:47,176
rendering performance and


2469
01:15:47,176 --> 01:15:47,976
sophistication.


2470
01:15:48,966 --> 01:15:50,876
Next, I'd like to share the


2471
01:15:50,876 --> 01:15:52,526
latest advances in Metal's


2472
01:15:52,716 --> 01:15:54,036
support for machine learning.


2473
01:15:54,396 --> 01:15:57,186
In iOS 12 and macOS Mojave, we


2474
01:15:57,186 --> 01:15:58,496
have augmented our existing


2475
01:15:58,496 --> 01:15:59,936
library of Metal performance


2476
01:15:59,936 --> 01:16:01,876
shaders with an enormous array


2477
01:16:01,876 --> 01:16:03,566
of all-new compute kernels,


2478
01:16:03,966 --> 01:16:05,626
optimized to support machine


2479
01:16:05,626 --> 01:16:07,196
learning training right on the


2480
01:16:07,196 --> 01:16:09,326
local GPU on your iOS and Mac


2481
01:16:09,366 --> 01:16:09,926
devices.


2482
01:16:10,246 --> 01:16:11,646
And the performance improvements


2483
01:16:11,646 --> 01:16:12,776
we are seeing from these new


2484
01:16:12,776 --> 01:16:14,076
Metal performance shaders on


2485
01:16:14,076 --> 01:16:15,706
training are truly stunning,


2486
01:16:15,706 --> 01:16:17,116
with an order of magnitude


2487
01:16:17,166 --> 01:16:18,456
faster training times.


2488
01:16:19,376 --> 01:16:20,846
We're also really excited to


2489
01:16:20,846 --> 01:16:21,826
announce we've been working with


2490
01:16:21,866 --> 01:16:22,796
Google to bring Metal


2491
01:16:22,796 --> 01:16:24,676
acceleration to TensorFlow later


2492
01:16:24,676 --> 01:16:25,966
this year, and the early


2493
01:16:25,966 --> 01:16:27,226
performance results are showing


2494
01:16:27,226 --> 01:16:29,406
an astonishing improvement of 20


2495
01:16:29,406 --> 01:16:30,436
times the previous


2496
01:16:30,436 --> 01:16:31,236
implementation.


2497
01:16:32,316 --> 01:16:33,936
[Applause] Yeah, it's awesome.


2498
01:16:34,516 --> 01:16:36,756
[ Applause ]


2499
01:16:37,256 --> 01:16:38,796
And last, ray tracing.


2500
01:16:38,796 --> 01:16:39,866
Now this is a time-honored


2501
01:16:39,866 --> 01:16:41,746
technique to achieve incredibly


2502
01:16:41,806 --> 01:16:44,076
realistic scenes, often used for


2503
01:16:44,076 --> 01:16:45,646
high-end rendering and 3D


2504
01:16:45,646 --> 01:16:46,336
product design.


2505
01:16:46,716 --> 01:16:48,116
However, it traditionally had to


2506
01:16:48,116 --> 01:16:49,466
be done offline because it was


2507
01:16:49,466 --> 01:16:51,206
so computationally expensive.


2508
01:16:51,346 --> 01:16:54,346
Now let me describe why very


2509
01:16:54,346 --> 01:16:54,796
quickly.


2510
01:16:55,126 --> 01:16:56,196
First, you would need to


2511
01:16:56,196 --> 01:16:58,036
mathematically model the rays


2512
01:16:58,036 --> 01:16:58,966
from a light source as they


2513
01:16:58,966 --> 01:17:00,636
bounce off of objects through


2514
01:17:00,636 --> 01:17:02,676
the scene, toward the screen,


2515
01:17:02,676 --> 01:17:03,686
and into your eye.


2516
01:17:04,326 --> 01:17:05,756
And to achieve higher and higher


2517
01:17:05,756 --> 01:17:07,126
resolutions, you would need to


2518
01:17:07,126 --> 01:17:09,796
add more, and more, and more


2519
01:17:10,866 --> 01:17:14,206
rays until you could reach the


2520
01:17:14,206 --> 01:17:15,486
desired resolution.


2521
01:17:15,486 --> 01:17:17,626
And this simple 1k-by-1k image


2522
01:17:17,626 --> 01:17:19,206
would take nearly 6 million rays


2523
01:17:19,206 --> 01:17:19,776
to generate.


2524
01:17:20,756 --> 01:17:22,066
Now each of those rays also must


2525
01:17:22,066 --> 01:17:23,256
be processed with at least two


2526
01:17:23,256 --> 01:17:24,856
sets of expensive mathematical


2527
01:17:24,856 --> 01:17:25,726
calculations.


2528
01:17:26,136 --> 01:17:27,496
First, you had to determine if a


2529
01:17:27,496 --> 01:17:28,606
given ray intersects a


2530
01:17:28,606 --> 01:17:29,746
particular triangle in your


2531
01:17:29,746 --> 01:17:30,226
scene.


2532
01:17:30,576 --> 01:17:31,966
And second, you must apply a


2533
01:17:31,966 --> 01:17:33,266
material-specific shader


2534
01:17:33,266 --> 01:17:35,106
necessary to generate the pixel.


2535
01:17:35,986 --> 01:17:37,166
Now originally, both of these


2536
01:17:37,166 --> 01:17:38,716
operations would have been


2537
01:17:38,716 --> 01:17:39,696
performed by the CPU.


2538
01:17:39,936 --> 01:17:41,656
But while the GPU can easily


2539
01:17:41,656 --> 01:17:43,336
handle the pixel shading, the


2540
01:17:43,336 --> 01:17:45,036
ray-triangle intersection itself


2541
01:17:45,036 --> 01:17:46,506
could remain an expensive CPU


2542
01:17:46,506 --> 01:17:47,716
bottleneck, and it would be


2543
01:17:47,716 --> 01:17:49,026
incredibly difficult to move


2544
01:17:49,026 --> 01:17:50,386
this to the GPU efficiently.


2545
01:17:51,546 --> 01:17:52,876
But the new Metal Ray-Triangle


2546
01:17:52,876 --> 01:17:54,526
Intersector solves this problem


2547
01:17:54,526 --> 01:17:55,016
for you.


2548
01:17:55,276 --> 01:17:56,726
And with this new API, you get a


2549
01:17:56,726 --> 01:17:58,306
dramatic increase in performance


2550
01:17:58,306 --> 01:18:00,106
of up to 10x in a very


2551
01:18:00,106 --> 01:18:01,336
simple-to-use package, all


2552
01:18:01,336 --> 01:18:03,336
pre-optimized for use with our


2553
01:18:03,516 --> 01:18:05,376
iOS and macOS GPUs.


2554
01:18:06,186 --> 01:18:07,956
And it really is that simple,


2555
01:18:07,956 --> 01:18:09,216
just a few lines of code.


2556
01:18:09,216 --> 01:18:12,216
And the ray tracing, like many


2557
01:18:12,216 --> 01:18:13,896
GPU compute operations, is


2558
01:18:13,896 --> 01:18:15,086
exactly the kind of operation


2559
01:18:15,086 --> 01:18:16,376
that can efficiently scale with


2560
01:18:16,376 --> 01:18:18,356
the available GPU horsepower.


2561
01:18:18,356 --> 01:18:20,066
So we can actually get even more


2562
01:18:20,066 --> 01:18:21,936
performance by using Metal 2


2563
01:18:21,936 --> 01:18:23,216
support for external GPUs.


2564
01:18:23,216 --> 01:18:25,266
Now you really have to see this


2565
01:18:25,266 --> 01:18:25,806
in action.


2566
01:18:25,976 --> 01:18:27,076
And I'd like to invite Rav to


2567
01:18:27,076 --> 01:18:28,366
give a quick demonstration.


2568
01:18:28,666 --> 01:18:29,406
Rav?


2569
01:18:30,516 --> 01:18:34,016
[ Applause ]


2570
01:18:34,516 --> 01:18:35,106
>> Thank you, Jeremy.


2571
01:18:35,806 --> 01:18:37,716
All right, let's bring up this


2572
01:18:37,716 --> 01:18:39,296
ray trace rendering of the


2573
01:18:39,476 --> 01:18:41,316
Amazon Lumberyard Bistro scene


2574
01:18:41,626 --> 01:18:43,536
using the CPU to perform the


2575
01:18:43,536 --> 01:18:44,956
intersection calculations.


2576
01:18:45,516 --> 01:18:47,186
And this implementation is


2577
01:18:47,316 --> 01:18:49,496
optimized to run on all 10 cores


2578
01:18:49,496 --> 01:18:50,686
in our iMac Pro.


2579
01:18:51,776 --> 01:18:52,786
We've also added a little


2580
01:18:52,786 --> 01:18:54,296
benchmark mode that times how


2581
01:18:54,296 --> 01:18:56,116
long it takes to do 80


2582
01:18:56,116 --> 01:18:57,596
iterations of our ray-tracing


2583
01:18:57,596 --> 01:18:58,116
algorithm.


2584
01:18:59,016 --> 01:19:01,016
And for context, that requires


2585
01:19:01,016 --> 01:19:03,206
performing over 6 billion


2586
01:19:03,206 --> 01:19:04,066
intersection tests.


2587
01:19:04,736 --> 01:19:05,676
And as you can see, we need


2588
01:19:05,676 --> 01:19:08,916
about 12 seconds to do that on


2589
01:19:08,916 --> 01:19:09,566
the CPU.


2590
01:19:09,626 --> 01:19:12,556
So let's compare that to using


2591
01:19:12,556 --> 01:19:14,286
the new ray -- the new Metal


2592
01:19:14,286 --> 01:19:15,796
Ray-Triangle Intersector on the


2593
01:19:15,796 --> 01:19:17,506
built-in GPU in the iMac Pro.


2594
01:19:17,686 --> 01:19:19,816
And you can immediately see that


2595
01:19:19,816 --> 01:19:21,546
it's much faster, and we only


2596
01:19:21,546 --> 01:19:23,926
need about 1.3 seconds to do the


2597
01:19:23,926 --> 01:19:24,606
same amount of work.


2598
01:19:24,986 --> 01:19:26,106
It's so good, I'm going to do it


2599
01:19:26,106 --> 01:19:26,256
again.


2600
01:19:26,256 --> 01:19:26,646
Here we go.


2601
01:19:28,436 --> 01:19:29,266
And it's done.


2602
01:19:30,046 --> 01:19:32,306
So getting an almost 10-times


2603
01:19:32,336 --> 01:19:33,886
performance increase is


2604
01:19:33,886 --> 01:19:34,836
fantastic.


2605
01:19:35,356 --> 01:19:36,336
But of course, we didn't just


2606
01:19:36,336 --> 01:19:36,816
stop there.


2607
01:19:36,816 --> 01:19:39,296
As Jeremy noted, ray tracing is


2608
01:19:39,296 --> 01:19:40,916
well-suited for parallelization


2609
01:19:40,916 --> 01:19:43,336
across multiple GPUs, so I can


2610
01:19:43,336 --> 01:19:44,976
enable an external GPU that I


2611
01:19:44,976 --> 01:19:46,556
previously attached to this iMac


2612
01:19:46,626 --> 01:19:49,556
Pro and get the render time cut


2613
01:19:49,556 --> 01:19:50,006
in half.


2614
01:19:50,176 --> 01:19:52,316
So you'll note the green line


2615
01:19:52,316 --> 01:19:53,676
that we've added to help


2616
01:19:53,796 --> 01:19:55,106
visualize how we're splitting


2617
01:19:55,106 --> 01:19:56,326
this workload across the two


2618
01:19:56,326 --> 01:19:59,026
GPUs, with each GPU rendering


2619
01:19:59,026 --> 01:20:00,776
half the frame in this case.


2620
01:20:01,416 --> 01:20:02,946
So this is a great improvement,


2621
01:20:03,456 --> 01:20:05,006
but as Jeremy says, you can


2622
01:20:05,006 --> 01:20:06,626
never have too many GPUs.


2623
01:20:07,186 --> 01:20:09,266
So let's add another two for a


2624
01:20:09,266 --> 01:20:11,766
total of four GPUs now rendering


2625
01:20:11,766 --> 01:20:12,306
the scene.


2626
01:20:12,756 --> 01:20:15,496
So that's over 40 teraflops of


2627
01:20:15,496 --> 01:20:17,836
compute capability with our iMac


2628
01:20:17,936 --> 01:20:20,286
Pro, and we're rendering the


2629
01:20:20,446 --> 01:20:22,616
scene 30 times faster than the


2630
01:20:22,726 --> 01:20:23,186
CPU.


2631
01:20:23,616 --> 01:20:25,156
We think that's pretty amazing,


2632
01:20:25,196 --> 01:20:25,466
yep.


2633
01:20:27,516 --> 01:20:34,266
[ Applause ]


2634
01:20:34,766 --> 01:20:35,896
And since ray tracing is so


2635
01:20:35,896 --> 01:20:37,076
great for rendering shadows, I'm


2636
01:20:37,076 --> 01:20:38,376
just going to turn off a couple


2637
01:20:38,376 --> 01:20:40,276
lights here to get them to pop.


2638
01:20:40,276 --> 01:20:41,826
And you can really appreciate


2639
01:20:41,916 --> 01:20:43,226
how much faster the image


2640
01:20:43,226 --> 01:20:44,856
converges on the GPUs.


2641
01:20:45,526 --> 01:20:48,126
So the new Metal Ray-Triangle


2642
01:20:48,156 --> 01:20:49,916
Intersector and external GPU


2643
01:20:49,916 --> 01:20:52,566
support on macOS we believe is


2644
01:20:52,566 --> 01:20:53,926
going to enable some great new


2645
01:20:53,926 --> 01:20:55,496
workflows on apps that are


2646
01:20:55,496 --> 01:20:57,116
taking advantage of ray tracing


2647
01:20:57,116 --> 01:20:57,566
techniques.


2648
01:20:58,116 --> 01:20:58,406
Thank you.


2649
01:20:58,856 --> 01:20:59,486
Back to you, Jeremy [applause].


2650
01:21:02,196 --> 01:21:03,886
>> All right, that is really


2651
01:21:04,046 --> 01:21:04,306
stunning.


2652
01:21:04,406 --> 01:21:04,936
Thanks, Rav.


2653
01:21:06,066 --> 01:21:08,116
So that's Metal 2 in iOS 12 and


2654
01:21:08,116 --> 01:21:10,466
macOS Mojave, an easy-to-use,


2655
01:21:10,466 --> 01:21:12,216
unified 3D graphics and GPU


2656
01:21:12,216 --> 01:21:14,466
compute API with broad support


2657
01:21:14,466 --> 01:21:16,046
across all of Apple's products,


2658
01:21:16,146 --> 01:21:18,926
including the A11 Bionic and the


2659
01:21:18,926 --> 01:21:20,186
Apple-designed GPU.


2660
01:21:21,086 --> 01:21:22,716
GPU developer tools integrated


2661
01:21:22,716 --> 01:21:24,206
right into Xcode and all-new


2662
01:21:24,206 --> 01:21:25,606
features to support the latest


2663
01:21:25,606 --> 01:21:27,016
advancements in machine learning


2664
01:21:27,016 --> 01:21:28,966
training and ray tracing.


2665
01:21:29,376 --> 01:21:30,546
There's never been a better time


2666
01:21:30,546 --> 01:21:31,686
to move your app to Metal, and


2667
01:21:31,686 --> 01:21:32,826
we can't wait to see what you'll


2668
01:21:32,856 --> 01:21:33,656
create next.


2669
01:21:33,856 --> 01:21:34,196
Thank you.


2670
01:21:35,276 --> 01:21:37,126
And now, I would like to hand it


2671
01:21:37,126 --> 01:21:38,786
over to Mike Rockwell to talk


2672
01:21:38,786 --> 01:21:40,486
about what's the latest news in


2673
01:21:40,486 --> 01:21:40,676
AR?


2674
01:21:40,676 --> 01:21:40,876
Thanks.


2675
01:21:41,516 --> 01:21:43,706
[ Applause ]


2676
01:21:44,206 --> 01:21:44,926
>> Thanks, Jeremy.


2677
01:21:47,936 --> 01:21:49,786
So last year has been an amazing


2678
01:21:49,786 --> 01:21:51,306
year for AR at Apple.


2679
01:21:51,896 --> 01:21:53,876
With the debut of ARKit at last


2680
01:21:53,876 --> 01:21:57,866
WWDC, iOS became the world's


2681
01:21:57,866 --> 01:22:01,186
largest AR platform by a lot.


2682
01:22:01,696 --> 01:22:03,146
There are hundreds of millions


2683
01:22:03,296 --> 01:22:06,576
of AR-enabled iOS devices, and


2684
01:22:06,576 --> 01:22:08,006
that number is growing rapidly.


2685
01:22:09,066 --> 01:22:09,966
As Craig showed you this


2686
01:22:09,966 --> 01:22:12,336
morning, with iOS 12, we're


2687
01:22:12,336 --> 01:22:14,446
taking things further by making


2688
01:22:14,446 --> 01:22:16,386
AR ubiquitous across the


2689
01:22:16,386 --> 01:22:17,326
operating system.


2690
01:22:18,126 --> 01:22:20,696
We can now experience AR content


2691
01:22:20,696 --> 01:22:22,946
via the new QuickLook Viewer in


2692
01:22:22,946 --> 01:22:26,116
Messages, News, Safari, and


2693
01:22:26,116 --> 01:22:26,606
more.


2694
01:22:27,456 --> 01:22:29,516
To do that, we had to work on


2695
01:22:29,516 --> 01:22:31,246
and create a file format that we


2696
01:22:31,296 --> 01:22:32,996
optimized for AR.


2697
01:22:32,996 --> 01:22:35,066
And we worked with Pixar and


2698
01:22:35,066 --> 01:22:37,836
Adobe to create a new mobile AR


2699
01:22:37,836 --> 01:22:39,886
format called USDZ.


2700
01:22:40,176 --> 01:22:41,776
It's based on the universal


2701
01:22:41,776 --> 01:22:43,616
scene description format that's


2702
01:22:43,616 --> 01:22:45,256
used across the industry for


2703
01:22:45,256 --> 01:22:46,786
professional content creation.


2704
01:22:47,286 --> 01:22:48,726
It's optimized for mobile


2705
01:22:48,726 --> 01:22:50,916
devices, and it supports Rich 3D


2706
01:22:50,916 --> 01:22:52,416
assets and animation.


2707
01:22:53,576 --> 01:22:56,946
It's incredibly easy to use


2708
01:22:57,256 --> 01:22:57,596
USDZ.


2709
01:22:58,016 --> 01:22:59,526
On the web, it just takes a


2710
01:22:59,526 --> 01:23:01,596
couple of lines of HTML, and


2711
01:23:01,596 --> 01:23:03,976
it's also natively supported in


2712
01:23:03,976 --> 01:23:06,196
SceneKit using Model I/O, so you


2713
01:23:06,196 --> 01:23:07,346
can easily use it in your


2714
01:23:07,346 --> 01:23:08,236
applications.


2715
01:23:09,596 --> 01:23:11,266
We've also been working closely


2716
01:23:11,266 --> 01:23:12,736
with industry leaders in content


2717
01:23:12,736 --> 01:23:14,116
creation tools to provide native


2718
01:23:14,116 --> 01:23:15,366
support for USDZ.


2719
01:23:16,406 --> 01:23:17,986
And as you heard this morning,


2720
01:23:17,986 --> 01:23:18,986
Abhay said this morning that he


2721
01:23:18,986 --> 01:23:20,726
had a sneak peek for you about


2722
01:23:20,726 --> 01:23:21,836
what they're doing at Adobe.


2723
01:23:21,836 --> 01:23:22,886
So I'd like to invite him to the


2724
01:23:22,886 --> 01:23:24,416
stage to give that to you right


2725
01:23:24,416 --> 01:23:24,666
now.


2726
01:23:25,226 --> 01:23:25,676
Abhay?


2727
01:23:26,516 --> 01:23:29,546
[ Applause ]


2728
01:23:30,046 --> 01:23:30,516
>> Thanks, Mike.


2729
01:23:32,996 --> 01:23:34,226
It's great to be back onstage.


2730
01:23:35,276 --> 01:23:36,186
So as you heard in this


2731
01:23:36,186 --> 01:23:38,116
morning's keynote, Adobe's


2732
01:23:38,116 --> 01:23:40,866
Creative Cloud and ARKit will be


2733
01:23:40,866 --> 01:23:42,806
able to reimagine and blend the


2734
01:23:42,806 --> 01:23:44,236
digital and the physical worlds.


2735
01:23:45,176 --> 01:23:47,496
Now this will require a complete


2736
01:23:47,496 --> 01:23:49,566
reimagination of new design


2737
01:23:49,566 --> 01:23:50,656
interaction models.


2738
01:23:52,086 --> 01:23:54,506
So earlier today, we announced a


2739
01:23:54,506 --> 01:23:56,546
new system for creating AR


2740
01:23:56,546 --> 01:23:58,986
experiences called Project Aero


2741
01:23:59,646 --> 01:24:02,286
that infused ARKit with the


2742
01:24:02,286 --> 01:24:03,916
power of familiar Creative Cloud


2743
01:24:03,916 --> 01:24:06,196
applications like Photoshop and


2744
01:24:06,196 --> 01:24:06,736
Dimension.


2745
01:24:07,646 --> 01:24:09,136
So in fact, for the first time,


2746
01:24:09,536 --> 01:24:11,816
with Creative Cloud and iOS, you


2747
01:24:11,816 --> 01:24:13,076
will now have a


2748
01:24:13,236 --> 01:24:14,606
what-you-see-is-what-you-get


2749
01:24:14,606 --> 01:24:16,066
editing in AR.


2750
01:24:16,066 --> 01:24:20,626
So as you think about this --


2751
01:24:20,626 --> 01:24:21,956
and we looked at it -- ARKit is


2752
01:24:21,956 --> 01:24:23,586
absolutely the leading platform


2753
01:24:23,586 --> 01:24:24,046
for AR.


2754
01:24:24,206 --> 01:24:26,236
And so we're really excited to


2755
01:24:26,236 --> 01:24:28,576
partner closely with Apple as we


2756
01:24:28,576 --> 01:24:31,216
go jointly explore and push the


2757
01:24:31,216 --> 01:24:32,936
boundaries of immersive design.


2758
01:24:33,526 --> 01:24:36,086
But to fully realize the


2759
01:24:36,086 --> 01:24:38,226
potential of AR, you really have


2760
01:24:38,226 --> 01:24:39,326
to work across the entire


2761
01:24:39,326 --> 01:24:40,066
ecosystem.


2762
01:24:40,416 --> 01:24:42,056
And so today, we are also


2763
01:24:42,056 --> 01:24:43,956
announcing that Adobe will


2764
01:24:43,956 --> 01:24:46,396
natively support USDZ format,


2765
01:24:46,646 --> 01:24:50,996
along with Apple and Pixar


2766
01:24:50,996 --> 01:24:51,063
[applause].


2767
01:24:51,063 --> 01:24:54,466
Now AR is a unique medium in


2768
01:24:54,466 --> 01:24:56,056
that it allows interactive


2769
01:24:56,106 --> 01:24:58,396
content to go extend well beyond


2770
01:24:58,396 --> 01:25:00,036
the screen, where physical


2771
01:25:00,036 --> 01:25:02,106
spaces around us literally


2772
01:25:02,106 --> 01:25:03,666
become a creative canvas.


2773
01:25:04,106 --> 01:25:05,506
So let's take a look.


2774
01:25:07,516 --> 01:26:23,516
[ Music ]


2775
01:26:24,016 --> 01:26:25,046
[ Applause ]


2776
01:26:25,046 --> 01:26:25,596
That's pretty cool.


2777
01:26:29,816 --> 01:26:32,876
So at its core, Project Aero is


2778
01:26:32,926 --> 01:26:34,456
part of Adobe's vision and


2779
01:26:34,456 --> 01:26:36,686
mission to truly democratize


2780
01:26:36,836 --> 01:26:38,376
creation of immersive content.


2781
01:26:39,186 --> 01:26:40,266
As you hopefully saw in that


2782
01:26:40,266 --> 01:26:42,906
video, creators and developers


2783
01:26:42,906 --> 01:26:44,266
will be able to collaborate


2784
01:26:44,266 --> 01:26:46,566
seamlessly to deliver a wide


2785
01:26:46,566 --> 01:26:48,866
range of AR experiences using


2786
01:26:49,526 --> 01:26:50,906
these tools.


2787
01:26:51,056 --> 01:26:53,356
Stay tuned for more updates on


2788
01:26:53,356 --> 01:26:55,136
Project Aero at our upcoming


2789
01:26:55,136 --> 01:26:56,526
conference, AdobeMax.


2790
01:26:57,286 --> 01:26:58,576
Personally, I couldn't be more


2791
01:26:58,576 --> 01:26:59,806
excited about our partnership


2792
01:26:59,806 --> 01:27:02,246
with Apple, as we go together


2793
01:27:02,246 --> 01:27:04,476
jointly explore the limits of


2794
01:27:04,476 --> 01:27:06,556
this emerging and powerful new


2795
01:27:06,556 --> 01:27:07,616
storytelling medium.


2796
01:27:07,706 --> 01:27:08,476
Thank you.


2797
01:27:08,526 --> 01:27:08,976
Back to you, Mike.


2798
01:27:09,516 --> 01:27:12,166
[ Applause ]


2799
01:27:12,666 --> 01:27:13,226
>> Thanks, Abhay.


2800
01:27:14,546 --> 01:27:15,516
Isn't that awesome?


2801
01:27:15,736 --> 01:27:16,776
Amazing stuff.


2802
01:27:17,386 --> 01:27:20,096
Of course, the foundation of AR


2803
01:27:20,096 --> 01:27:21,316
at Apple is ARKit.


2804
01:27:21,966 --> 01:27:23,676
With robust device position


2805
01:27:23,676 --> 01:27:25,626
localization, accurate lighting


2806
01:27:25,626 --> 01:27:27,986
and size estimation, ARKit has


2807
01:27:27,986 --> 01:27:29,956
made it easy to create AR


2808
01:27:29,956 --> 01:27:30,606
applications.


2809
01:27:31,616 --> 01:27:32,946
The iPhone X has provided


2810
01:27:32,946 --> 01:27:34,616
groundbreaking face tracking


2811
01:27:34,806 --> 01:27:36,196
that used to require custom


2812
01:27:36,196 --> 01:27:36,746
hardware.


2813
01:27:38,116 --> 01:27:39,806
After the initial release, we


2814
01:27:39,806 --> 01:27:41,306
quickly followed up with ARKit


2815
01:27:41,306 --> 01:27:43,866
1.5, adding 2D image triggers, a


2816
01:27:43,866 --> 01:27:45,206
high-resolution background


2817
01:27:45,206 --> 01:27:46,856
camera, and the ability to


2818
01:27:46,856 --> 01:27:49,216
suspend and resume tracking so


2819
01:27:49,216 --> 01:27:50,096
that you don't have to restart


2820
01:27:50,096 --> 01:27:51,696
an AR session if you get a phone


2821
01:27:51,696 --> 01:27:52,006
call.


2822
01:27:52,746 --> 01:27:54,366
Well, I'm incredibly excited to


2823
01:27:54,366 --> 01:27:56,576
tell you about our next big jump


2824
01:27:56,576 --> 01:28:00,706
forward, ARKit 2.


2825
01:28:00,706 --> 01:28:03,076
ARKit 2 delivers a big set of


2826
01:28:03,076 --> 01:28:06,116
advances, including improved


2827
01:28:06,116 --> 01:28:07,946
face tracking, with a new


2828
01:28:07,946 --> 01:28:11,106
ability to track your gaze and


2829
01:28:11,176 --> 01:28:11,826
tongue.


2830
01:28:12,386 --> 01:28:13,786
These highly-requested features


2831
01:28:13,786 --> 01:28:14,766
allow you to take facial


2832
01:28:14,766 --> 01:28:16,176
animation to a new level of


2833
01:28:16,176 --> 01:28:16,726
realism.


2834
01:28:17,566 --> 01:28:18,846
Turns out that the first thing


2835
01:28:18,846 --> 01:28:20,706
kids do when they play with


2836
01:28:20,706 --> 01:28:21,986
animojis is stick their tongue


2837
01:28:21,986 --> 01:28:22,226
out.


2838
01:28:22,226 --> 01:28:23,276
And I think a lot of you do,


2839
01:28:23,276 --> 01:28:23,536
too.


2840
01:28:23,536 --> 01:28:24,716
That's why we had to put that in


2841
01:28:24,716 --> 01:28:24,886
there.


2842
01:28:28,366 --> 01:28:29,956
To more accurately integrate


2843
01:28:29,956 --> 01:28:31,636
objects into a scene, we've


2844
01:28:31,636 --> 01:28:33,346
added environment texturing.


2845
01:28:33,726 --> 01:28:36,206
ARKit creates textures based on


2846
01:28:36,206 --> 01:28:37,986
what the camera sees in the real


2847
01:28:37,986 --> 01:28:40,116
world -- notice that the globe


2848
01:28:40,116 --> 01:28:41,346
is reflecting the real picture


2849
01:28:41,346 --> 01:28:42,466
on the table below.


2850
01:28:43,046 --> 01:28:44,966
But what about what the camera


2851
01:28:44,966 --> 01:28:45,706
can't see?


2852
01:28:46,346 --> 01:28:47,896
While using machine learning, we


2853
01:28:47,896 --> 01:28:49,286
trained a neural network on


2854
01:28:49,456 --> 01:28:50,646
thousands of typical


2855
01:28:50,646 --> 01:28:51,356
environments.


2856
01:28:51,786 --> 01:28:53,826
And this enables ARKit to


2857
01:28:53,826 --> 01:28:55,286
hallucinate the rest of the


2858
01:28:55,286 --> 01:28:55,876
scene.


2859
01:28:56,406 --> 01:28:57,336
This means that you'll get


2860
01:28:57,416 --> 01:28:58,906
plausible reflections of things


2861
01:28:58,906 --> 01:28:59,846
like overhead lighting -- you


2862
01:28:59,846 --> 01:29:01,026
can see that in the globe --


2863
01:29:01,236 --> 01:29:02,676
even though it's never seen the


2864
01:29:02,676 --> 01:29:04,036
lighting in the environment at


2865
01:29:04,036 --> 01:29:04,346
all.


2866
01:29:06,706 --> 01:29:09,016
We've extended the 2D image


2867
01:29:09,016 --> 01:29:11,486
detection to provide support for


2868
01:29:11,486 --> 01:29:13,206
those -- tracking those images


2869
01:29:13,256 --> 01:29:14,446
in three dimensions.


2870
01:29:15,166 --> 01:29:17,246
So you can now have 3D objects


2871
01:29:17,306 --> 01:29:18,606
that stick to images in the real


2872
01:29:18,606 --> 01:29:19,996
world when they're moved around


2873
01:29:20,366 --> 01:29:23,876
-- and not only in 2D, but also


2874
01:29:24,236 --> 01:29:24,856
in 3D.


2875
01:29:27,516 --> 01:29:33,336
[ Applause ]


2876
01:29:33,836 --> 01:29:37,306
ARKit can now detect 3D objects.


2877
01:29:37,796 --> 01:29:39,896
You can scan objects via an API,


2878
01:29:40,426 --> 01:29:42,416
or a simple developer tool we


2879
01:29:42,416 --> 01:29:46,596
provide, and then later, these


2880
01:29:46,596 --> 01:29:48,606
maps can be used to recognize


2881
01:29:48,606 --> 01:29:49,786
those objects and their


2882
01:29:49,786 --> 01:29:51,756
locations and trigger a


2883
01:29:51,756 --> 01:29:53,286
contextually-relevant AR


2884
01:29:53,286 --> 01:29:53,976
experience.


2885
01:29:56,516 --> 01:29:59,206
[ Applause ]


2886
01:29:59,706 --> 01:30:01,566
An incredibly important feature


2887
01:30:01,566 --> 01:30:03,576
of ARKit 2 is support for


2888
01:30:03,576 --> 01:30:04,936
persistent experiences.


2889
01:30:05,356 --> 01:30:06,356
You can see here in the video


2890
01:30:06,356 --> 01:30:07,866
that we've mapped an environment


2891
01:30:07,866 --> 01:30:09,386
and then placed a 3D object.


2892
01:30:10,276 --> 01:30:12,416
This map can be saved and then


2893
01:30:12,416 --> 01:30:14,196
later used to recognize the


2894
01:30:14,196 --> 01:30:16,066
space and relocalize to that


2895
01:30:16,066 --> 01:30:18,776
same coordinate system -- and


2896
01:30:18,806 --> 01:30:20,736
not only on that device.


2897
01:30:20,936 --> 01:30:22,206
You can share these maps to


2898
01:30:22,296 --> 01:30:23,856
other devices to allow them to


2899
01:30:23,856 --> 01:30:25,706
have the exact same experience.


2900
01:30:26,396 --> 01:30:27,936
This makes it possible to create


2901
01:30:27,936 --> 01:30:29,686
apps that provide persistent


2902
01:30:29,686 --> 01:30:31,586
experiences you can go back to


2903
01:30:31,586 --> 01:30:32,446
again and again.


2904
01:30:33,366 --> 01:30:34,836
You could, for example, have an


2905
01:30:34,836 --> 01:30:36,416
augmented reality pinboard in


2906
01:30:36,416 --> 01:30:37,836
your home with pictures and


2907
01:30:37,836 --> 01:30:38,266
artwork.


2908
01:30:38,856 --> 01:30:41,096
And you can share these maps


2909
01:30:41,096 --> 01:30:42,376
without having to go to the


2910
01:30:42,376 --> 01:30:42,726
cloud.


2911
01:30:43,186 --> 01:30:45,046
These can be done peer-to-peer


2912
01:30:45,226 --> 01:30:48,416
locally on your devices.


2913
01:30:49,206 --> 01:30:50,596
One other thing that we've done


2914
01:30:50,596 --> 01:30:51,916
is we've allowed you to have the


2915
01:30:51,916 --> 01:30:54,316
ability to share these maps in


2916
01:30:54,316 --> 01:30:55,006
real time.


2917
01:30:55,866 --> 01:30:57,596
And this lets you create


2918
01:30:57,926 --> 01:31:00,036
multiplayer AR games.


2919
01:31:00,746 --> 01:31:02,376
So to experiment with this, we


2920
01:31:02,376 --> 01:31:04,126
created a new game called


2921
01:31:04,126 --> 01:31:04,816
SwiftShot.


2922
01:31:05,226 --> 01:31:07,076
And I'll show you the video that


2923
01:31:07,076 --> 01:31:08,556
-- of it that we did.


2924
01:31:09,516 --> 01:31:45,186
[ Music ]


2925
01:31:45,686 --> 01:31:47,286
So SwiftShot is a blast to play,


2926
01:31:47,286 --> 01:31:48,546
and we actually have it here at


2927
01:31:48,546 --> 01:31:49,006
the show.


2928
01:31:49,006 --> 01:31:49,806
If you haven't had a chance to


2929
01:31:49,806 --> 01:31:51,416
go by, we have an AR game area.


2930
01:31:51,606 --> 01:31:53,636
We wanted to share it with you,


2931
01:31:53,636 --> 01:31:54,806
so we've actually made the full


2932
01:31:54,806 --> 01:31:56,396
source code available for you to


2933
01:31:56,396 --> 01:31:58,926
download under an open license.


2934
01:31:58,926 --> 01:32:00,496
You can play with it and modify


2935
01:32:00,496 --> 01:32:01,256
it as you like.


2936
01:32:01,256 --> 01:32:02,056
We can't wait to see the


2937
01:32:02,056 --> 01:32:03,086
creative things you'll do with


2938
01:32:03,086 --> 01:32:03,646
SwiftShot.


2939
01:32:05,046 --> 01:32:08,376
So that is ARKit 2, improved


2940
01:32:08,376 --> 01:32:10,616
face tracking, environment


2941
01:32:10,616 --> 01:32:13,186
texturing, image detection and


2942
01:32:13,186 --> 01:32:15,696
tracking, 3D object detection,


2943
01:32:16,146 --> 01:32:18,566
and persistent experiences as


2944
01:32:18,566 --> 01:32:20,726
well as multi-user experiences.


2945
01:32:21,786 --> 01:32:23,926
That combined with USDZ across


2946
01:32:23,956 --> 01:32:26,106
the operating system makes iOS


2947
01:32:26,106 --> 01:32:28,766
12 by far the most powerful


2948
01:32:28,766 --> 01:32:29,926
platform for AR.


2949
01:32:30,326 --> 01:32:31,756
And we're really excited to be


2950
01:32:31,756 --> 01:32:33,216
giving that to you today, and


2951
01:32:33,216 --> 01:32:34,496
can't wait to see what you'll do


2952
01:32:34,496 --> 01:32:34,706
with it.


2953
01:32:35,426 --> 01:32:36,546
So with that, I'll hand it back


2954
01:32:36,546 --> 01:32:37,176
to Sebastian.


2955
01:32:37,416 --> 01:32:37,786
Thank you.


2956
01:32:38,516 --> 01:32:42,726
[ Applause ]


2957
01:32:43,226 --> 01:32:43,996
>> Thank you, Mike.


2958
01:32:45,156 --> 01:32:47,946
Wow, I think we've seen a ton of


2959
01:32:47,946 --> 01:32:49,556
exciting new technologies today,


2960
01:32:49,556 --> 01:32:50,636
and I hope you're really,


2961
01:32:50,636 --> 01:32:51,976
really, really excited about


2962
01:32:51,976 --> 01:32:52,216
this.


2963
01:32:53,076 --> 01:32:54,716
We make it easy to leverage


2964
01:32:54,716 --> 01:32:56,406
machine learning, build great


2965
01:32:56,406 --> 01:32:58,456
new experiences with ARKit,


2966
01:32:58,456 --> 01:32:59,666
high-performance graphics with


2967
01:32:59,716 --> 01:33:01,546
Metal, a huge step forward on


2968
01:33:01,546 --> 01:33:02,946
the Mac with Dark Mode.


2969
01:33:02,946 --> 01:33:04,156
I know you all love this.


2970
01:33:04,156 --> 01:33:05,916
And it's all backed by great


2971
01:33:05,916 --> 01:33:07,136
advances in our development


2972
01:33:07,136 --> 01:33:09,366
tools that are really critical


2973
01:33:09,366 --> 01:33:10,526
to make the most of these


2974
01:33:10,696 --> 01:33:12,236
super-powerful technologies.


2975
01:33:12,916 --> 01:33:15,026
And we've also covered how we,


2976
01:33:15,066 --> 01:33:17,156
together, can focus on what's


2977
01:33:17,156 --> 01:33:18,966
most important to our users.


2978
01:33:20,056 --> 01:33:21,286
All these great technologies and


2979
01:33:21,286 --> 01:33:23,216
tools are available today as a


2980
01:33:23,216 --> 01:33:25,296
developer preview from the WWDC


2981
01:33:25,376 --> 01:33:26,716
attendee portal.


2982
01:33:26,716 --> 01:33:27,786
Who here has started downloading


2983
01:33:27,786 --> 01:33:27,986
them?


2984
01:33:29,286 --> 01:33:29,826
Few people?


2985
01:33:29,826 --> 01:33:31,276
Okay, you've got to hurry up.


2986
01:33:31,526 --> 01:33:32,666
Distribution is limited.


2987
01:33:34,966 --> 01:33:36,556
Please make sure to download it


2988
01:33:36,556 --> 01:33:37,456
right away.


2989
01:33:37,816 --> 01:33:39,836
And also, make the most of your


2990
01:33:39,836 --> 01:33:40,146
week.


2991
01:33:40,146 --> 01:33:41,636
There are more than 100 sessions


2992
01:33:41,736 --> 01:33:42,906
here at the conference that go


2993
01:33:42,906 --> 01:33:44,636
deep in all of these topics.


2994
01:33:45,126 --> 01:33:46,336
Really, really great sessions.


2995
01:33:46,706 --> 01:33:48,106
We also recommend that you make


2996
01:33:48,106 --> 01:33:49,976
good use of all of the labs that


2997
01:33:49,976 --> 01:33:51,276
we have, because you can get


2998
01:33:51,276 --> 01:33:52,456
help from the many Apple


2999
01:33:52,456 --> 01:33:53,986
engineers that are here onsite


3000
01:33:54,266 --> 01:33:56,306
to answer all of your questions.


3001
01:33:57,206 --> 01:33:58,826
So with that, I hope you have a


3002
01:33:58,826 --> 01:33:59,906
great conference, and I'm


3003
01:33:59,906 --> 01:34:00,986
looking forward to seeing you


3004
01:34:00,986 --> 01:34:01,996
around this week.


3005
01:34:02,166 --> 01:34:02,586
Thank you.


3006
01:34:03,508 --> 01:34:05,508
[ Applause ]

