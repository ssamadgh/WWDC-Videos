1
00:00:07,516 --> 00:00:18,500
[ Music ]


2
00:00:23,516 --> 00:00:28,356
[ Applause ]


3
00:00:28,856 --> 00:00:29,506
>> Hello, everyone.


4
00:00:29,946 --> 00:00:31,066
I'm Brian Weinstein.


5
00:00:31,346 --> 00:00:33,226
I'm an engineer on
the Safari team.


6
00:00:33,556 --> 00:00:37,856
And today Zach, Damian and
I are here to show you how


7
00:00:37,856 --> 00:00:41,326
to extend your Mac app
using Safari app extensions.


8
00:00:41,946 --> 00:00:45,586
In macOS Sierra and
Safari 10 on El Capitan,


9
00:00:45,926 --> 00:00:49,766
we are introducing a new
way of writing, packaging


10
00:00:49,926 --> 00:00:51,826
and distributing
Safari extensions.


11
00:00:52,376 --> 00:00:55,396
These extensions leverage
both web technologies


12
00:00:55,696 --> 00:00:57,696
and native code written
in Swift.


13
00:00:58,216 --> 00:01:01,356
They're bundled with the Mac
app and can be distributed


14
00:01:01,356 --> 00:01:02,296
through the App Store.


15
00:01:02,756 --> 00:01:07,796
That new way is Safari
app extensions.


16
00:01:08,286 --> 00:01:12,256
Safari app extensions have the
power to customize the contents


17
00:01:12,256 --> 00:01:16,326
of webpages using
JavaScript and CSS.


18
00:01:16,396 --> 00:01:19,726
They have the power to block
loading of specific resources


19
00:01:19,796 --> 00:01:21,426
or elements on a page.


20
00:01:22,326 --> 00:01:24,856
They can add toolbar
buttons to Safari's UI.


21
00:01:25,756 --> 00:01:27,776
And those toolbar
buttons have the power


22
00:01:27,776 --> 00:01:31,516
to display popovers using
fully native technologies


23
00:01:31,516 --> 00:01:32,516
to build the views.


24
00:01:32,906 --> 00:01:36,496
And lastly, Safari app
extensions can add items


25
00:01:36,496 --> 00:01:38,956
to context menus on webpages.


26
00:01:40,266 --> 00:01:43,576
Safari app extensions are
based on app extensions.


27
00:01:43,746 --> 00:01:46,206
Which are bundles of
code and resources


28
00:01:46,526 --> 00:01:49,326
that are packaged inside
of your app that are meant


29
00:01:49,326 --> 00:01:52,786
to give your users access
to your app's functionality


30
00:01:52,886 --> 00:01:54,906
and content throughout macOS.


31
00:01:55,856 --> 00:01:59,926
And so this means that they
are developed using Xcode


32
00:01:59,926 --> 00:02:02,926
and other developing tools you
might already be familiar with


33
00:02:03,736 --> 00:02:07,426
and it means that Safari app
extensions can run native code


34
00:02:07,676 --> 00:02:10,936
with the power of the APIs
available to Mac Apps.


35
00:02:11,646 --> 00:02:14,876
Another major benefit
about these being based


36
00:02:14,876 --> 00:02:18,956
on app extensions is that they
are distributed with your app.


37
00:02:19,136 --> 00:02:21,576
Which means that they can be
sold through the Mac App Store.


38
00:02:22,086 --> 00:02:24,236
And it means that
your users don't need


39
00:02:24,236 --> 00:02:26,126
to download your
extensions separately


40
00:02:26,356 --> 00:02:29,226
after installing your app.


41
00:02:29,226 --> 00:02:34,026
And for those of you who require
communication between your app


42
00:02:34,026 --> 00:02:36,396
and your extension,
a major benefit


43
00:02:36,396 --> 00:02:38,286
of Safari app extensions is


44
00:02:38,286 --> 00:02:41,066
that your extension is always
revlocked with your app


45
00:02:41,686 --> 00:02:43,046
because they're packaged
together.


46
00:02:43,596 --> 00:02:46,236
So, your users will always
have matching versions


47
00:02:46,236 --> 00:02:48,386
of your app and your extension.


48
00:02:49,366 --> 00:02:52,226
One of the best parts of
an extension platform is


49
00:02:52,226 --> 00:02:54,456
that it's capable of
building many different types


50
00:02:54,456 --> 00:02:55,176
of extensions.


51
00:02:55,596 --> 00:02:58,256
Today we're going to build
three types of extensions.


52
00:02:58,786 --> 00:03:01,966
The first type is a content
blocker which blocks,


53
00:03:01,966 --> 00:03:04,286
which can block the loading
of specific resources


54
00:03:04,656 --> 00:03:06,466
or hide elements on the page.


55
00:03:07,166 --> 00:03:09,226
The second type will
be an extension


56
00:03:09,226 --> 00:03:12,646
that modifies the contents
of webpages and communicates


57
00:03:12,646 --> 00:03:15,896
between the JavaScript code
provided by your app extension


58
00:03:16,276 --> 00:03:18,086
and the extension's native code.


59
00:03:18,726 --> 00:03:21,496
And the third type of
extension will show you how


60
00:03:21,496 --> 00:03:25,396
to extend Safari's UI to add
the power and functionality


61
00:03:25,396 --> 00:03:27,846
of your app directly to Safari.


62
00:03:28,686 --> 00:03:31,126
So, let's get started
with content blockers.


63
00:03:31,996 --> 00:03:33,796
To build a content
blocker for us,


64
00:03:34,126 --> 00:03:35,676
I'd like to bring Zach on stage.


65
00:03:35,976 --> 00:03:36,326
Zach?


66
00:03:38,016 --> 00:03:39,946
[ Applause ]


67
00:03:39,946 --> 00:03:40,706
>> Thanks, Ryan.


68
00:03:43,086 --> 00:03:47,636
Hi. I'm Zach Li and I'm also
an engineer on the Safari team.


69
00:03:48,616 --> 00:03:51,866
Last year in Safari we
introduced a new Content


70
00:03:51,866 --> 00:03:52,676
Blocking model.


71
00:03:53,136 --> 00:03:57,156
Rather than developing extension
code on runtime to block loads


72
00:03:57,156 --> 00:03:59,906
or hide elements,
we built a model


73
00:03:59,906 --> 00:04:03,026
where you can declare ahead
of time what content to block.


74
00:04:03,826 --> 00:04:06,646
And WebKit optimizes
such blocking mechanism


75
00:04:06,766 --> 00:04:08,786
to make it fast and
memory efficient.


76
00:04:09,556 --> 00:04:12,786
Best of all, this model
preserves user privacy


77
00:04:13,086 --> 00:04:15,396
because the host
app isn't consulted


78
00:04:15,506 --> 00:04:16,685
for the resources block.


79
00:04:17,896 --> 00:04:21,446
Since then, we've seen so many
awesome content blockers you


80
00:04:21,446 --> 00:04:24,296
have written that really
enhance the browsing experience.


81
00:04:24,756 --> 00:04:25,816
And users love them.


82
00:04:27,146 --> 00:04:30,996
Today, I'm excited to talk
about how to easily bring


83
00:04:30,996 --> 00:04:34,076
out existing iOS
content blocker to macOS.


84
00:04:34,886 --> 00:04:37,236
For those of you who haven't
written a content blocker


85
00:04:37,236 --> 00:04:39,146
before, that's no problem.


86
00:04:39,596 --> 00:04:41,946
You can check out the
WWDC talk last year


87
00:04:42,216 --> 00:04:44,116
on developer.Apple.com.


88
00:04:45,016 --> 00:04:47,886
Let's take a look at what
a content blocker can do.


89
00:04:49,066 --> 00:04:50,146
I really love eating.


90
00:04:50,516 --> 00:04:51,956
I basically eat all the time.


91
00:04:52,816 --> 00:04:55,706
Obviously I have a food
blog that's dedicated


92
00:04:55,706 --> 00:04:58,356
to the food I want to try.


93
00:04:58,556 --> 00:05:02,226
But unfortunately, well,
actually fortunately,


94
00:05:02,406 --> 00:05:03,956
I will attend my
friend's wedding


95
00:05:04,076 --> 00:05:05,626
as his best man next month.


96
00:05:05,936 --> 00:05:07,056
That I need to stay fit.


97
00:05:07,486 --> 00:05:09,836
At least I need to be
able to fit into the suit.


98
00:05:10,986 --> 00:05:13,456
So, I created this
iOS content blocker


99
00:05:13,626 --> 00:05:16,026
that blocks all the
desserts from my website,


100
00:05:16,376 --> 00:05:19,126
that even if I'm starving
and I look for something


101
00:05:19,576 --> 00:05:22,276
on my food blog, I wouldn't
think of desserts at all.


102
00:05:22,826 --> 00:05:26,056
Let me show you how the
dessert blocker works.


103
00:05:28,806 --> 00:05:32,426
So, this is my source code


104
00:05:32,816 --> 00:05:35,556
and my app dessert
blocker is already running.


105
00:05:36,766 --> 00:05:37,796
Let's go to Safari.


106
00:05:38,326 --> 00:05:41,816
And the desserts are present.


107
00:05:42,256 --> 00:05:45,186
Let's reload the page with
the dessert blocker enabled.


108
00:05:45,716 --> 00:05:48,486
All the desserts are gone.


109
00:05:49,666 --> 00:05:50,186
That's great.


110
00:05:50,796 --> 00:05:51,976
Although I'll be missing them.


111
00:05:52,586 --> 00:05:56,576
So, I am an iOS developer
with this content blocker


112
00:05:57,016 --> 00:06:00,246
and I really want to bring it
to the Mac and distribute it


113
00:06:00,296 --> 00:06:01,086
through the App Store.


114
00:06:02,086 --> 00:06:03,466
It's actually quite simple to do


115
00:06:03,876 --> 00:06:07,636
because the content blocker APIs
are the same on both platforms.


116
00:06:08,896 --> 00:06:12,906
So, let's first go to Xcode.


117
00:06:13,046 --> 00:06:19,686
Create a new Mac Application
target that's called dessert


118
00:06:19,686 --> 00:06:27,156
blocker for Mac.


119
00:06:27,156 --> 00:06:30,086
And let's quickly switch
the Mac Applications theme,


120
00:06:30,176 --> 00:06:33,516
because we are now
building a Mac Application.


121
00:06:34,356 --> 00:06:37,996
Then, create a new Mac
Application extension target.


122
00:06:42,256 --> 00:06:45,106
Use the content blocker
extension template.


123
00:06:47,956 --> 00:06:53,606
That's called dessert
blocker extension for Mac.


124
00:06:55,896 --> 00:07:00,126
When users get Apps from the
App Store, they don't have


125
00:07:00,126 --> 00:07:02,646
to run the application
in order for Safari


126
00:07:02,646 --> 00:07:03,906
to find the app extension.


127
00:07:04,266 --> 00:07:08,756
But outside the App Store,
Apps have to be run in order


128
00:07:08,756 --> 00:07:10,476
for Safari to see the extension.


129
00:07:11,026 --> 00:07:12,686
So, in this case,
I actually want


130
00:07:12,686 --> 00:07:15,336
to continue using the
application scheme.


131
00:07:15,916 --> 00:07:18,126
So, I'm just going
to click on cancel.


132
00:07:20,416 --> 00:07:23,746
This template will set
everything up correctly.


133
00:07:24,276 --> 00:07:26,946
And it comes with a simple
content blocking rule.


134
00:07:27,916 --> 00:07:30,016
To make your own content
blocker, you just need


135
00:07:30,016 --> 00:07:31,476
to modify this JSON file.


136
00:07:31,886 --> 00:07:33,036
It's really convenient.


137
00:07:33,756 --> 00:07:37,696
But in our case, we can actually
share resources with iOS app.


138
00:07:38,506 --> 00:07:40,616
So, we can get rid
of this JSON file.


139
00:07:41,726 --> 00:07:43,216
And the Swift file.


140
00:07:43,796 --> 00:07:47,886
And make the ones we
already have be available


141
00:07:47,886 --> 00:07:51,086
to the Mac Application,
Mac app extension target.


142
00:07:51,646 --> 00:07:55,596
To accomplish that,
go to utility sidebar.


143
00:07:56,576 --> 00:07:58,896
And in the target
membership section,


144
00:07:59,306 --> 00:08:01,186
check the Mac app
extension target


145
00:08:01,496 --> 00:08:03,296
for the resources
we want to share.


146
00:08:05,516 --> 00:08:08,116
Cool. We're pretty
much good to go.


147
00:08:08,636 --> 00:08:10,426
But before that, I do want


148
00:08:10,426 --> 00:08:12,786
to make my dessert
blocker more polished


149
00:08:13,066 --> 00:08:15,876
by displaying a better name
and a better description


150
00:08:16,106 --> 00:08:18,076
in Safari extensions
preferences.


151
00:08:18,726 --> 00:08:22,566
To accomplish that, let's go
to the app extension info list.


152
00:08:22,566 --> 00:08:29,006
Instead of dessert blocker
extension for Mac, let's check,


153
00:08:29,266 --> 00:08:30,516
just called it dessert blocker.


154
00:08:31,056 --> 00:08:34,395
And the description I want


155
00:08:34,395 --> 00:08:38,306
to provide is this content
blocker blocks dessert pictures


156
00:08:38,306 --> 00:08:40,905
on my food blog.com.


157
00:08:41,106 --> 00:08:44,556
Also, I want to provide
prettier and more vivid icons


158
00:08:44,626 --> 00:08:45,616
for my dessert blocker.


159
00:08:46,566 --> 00:08:48,666
Let's remove the
default Asset catalog.


160
00:08:49,676 --> 00:08:50,616
And drag the ones


161
00:08:50,616 --> 00:08:54,846
with predesigned ice cream
icons to my Xcode project.


162
00:08:55,516 --> 00:08:57,506
All right.


163
00:08:57,776 --> 00:09:04,346
Let's view it and run
the application for Mac


164
00:09:04,546 --> 00:09:06,516
and the application is run.


165
00:09:07,286 --> 00:09:08,476
So, let's go to Safari.


166
00:09:09,056 --> 00:09:14,506
As you can see, it shows up
in extensions preferences.


167
00:09:14,826 --> 00:09:16,616
Like all other Safari
extensions,


168
00:09:17,076 --> 00:09:19,136
content blocker is
off by default.


169
00:09:19,676 --> 00:09:21,356
Let's enable this
dessert blocker.


170
00:09:21,856 --> 00:09:24,656
Reload the page.


171
00:09:25,216 --> 00:09:29,136
Great. All the desserts
are gone.


172
00:09:30,366 --> 00:09:33,156
Awesome. Now that my urges


173
00:09:33,156 --> 00:09:35,166
to eat desserts are
completely blocked,


174
00:09:35,386 --> 00:09:38,106
I'm so ready to be the best man.


175
00:09:40,516 --> 00:09:45,186
[ Applause ]


176
00:09:45,686 --> 00:09:50,336
As you saw, without even writing
any code we ported an iOS


177
00:09:50,336 --> 00:09:51,986
content blocker to macOS.


178
00:09:53,376 --> 00:09:56,016
On top of that, we've
heard feedback from you


179
00:09:56,016 --> 00:09:58,866
that it would be nice to know
whether your content blocker


180
00:09:58,866 --> 00:09:59,636
is enabled.


181
00:10:00,296 --> 00:10:02,446
So, we are introducing
a new API,


182
00:10:03,286 --> 00:10:06,006
getStateOfContent
Blocker(identifier.


183
00:10:08,086 --> 00:10:13,106
With this API, for example, if
you recall my not so great UI


184
00:10:13,226 --> 00:10:16,966
in the app, I can provide a
better experience to users


185
00:10:17,306 --> 00:10:20,876
by giving instructions on how
to enable my content blocker


186
00:10:21,216 --> 00:10:24,026
if I detect my content
blocker is not enabled.


187
00:10:25,166 --> 00:10:28,926
This API along with other
APIs that my colleague Brian


188
00:10:28,966 --> 00:10:32,326
and Damian are going to
talk about will be available


189
00:10:32,326 --> 00:10:37,706
on Sierra and El Capitan if
users have installed Safari 10.


190
00:10:39,036 --> 00:10:44,066
Because El Capitan, the API
availability is dependent


191
00:10:44,066 --> 00:10:45,866
on the presence of Safari 10.


192
00:10:46,196 --> 00:10:50,466
We are providing you with a
handy Swift API that you can use


193
00:10:50,516 --> 00:10:53,586
to check at runtime whether
Safari services APIs whether


194
00:10:53,586 --> 00:10:55,046
Safari services APIs
are available.


195
00:10:56,266 --> 00:10:58,106
Let's step through
the Swift code API.


196
00:10:59,586 --> 00:11:02,606
If SFSafari service is
available returns true,


197
00:11:03,126 --> 00:11:05,026
you can safely use the new API.


198
00:11:05,936 --> 00:11:08,366
If not, fall back
to other behaviors.


199
00:11:09,756 --> 00:11:11,856
These are what's new
with content blockers.


200
00:11:12,276 --> 00:11:16,306
To talk about other powerful
capabilities you can view Safari


201
00:11:16,306 --> 00:11:20,616
app extensions, I would like to
hand the stage back to Brian.


202
00:11:22,516 --> 00:11:25,716
[ Applause ]


203
00:11:26,216 --> 00:11:26,856
>> Thanks, Zach.


204
00:11:28,126 --> 00:11:31,416
So, the next type of extension
I would like to show is one


205
00:11:31,416 --> 00:11:35,226
that modifies the contents of
a page and also has the ability


206
00:11:35,226 --> 00:11:38,226
to communicate with the
native code provided


207
00:11:38,226 --> 00:11:39,336
by your app extension.


208
00:11:39,726 --> 00:11:41,346
So, we're going to
build an extension


209
00:11:41,466 --> 00:11:43,536
that replaces instances
of one word


210
00:11:43,806 --> 00:11:45,456
with another throughout the web.


211
00:11:45,906 --> 00:11:48,936
It will get the word to
replace and what to replace it


212
00:11:48,936 --> 00:11:51,376
with from a app extension's
Swift code.


213
00:11:51,886 --> 00:11:54,326
There are 2 ways for
Safari app extension


214
00:11:54,326 --> 00:11:56,256
to modify the contents
of the webpage.


215
00:11:56,676 --> 00:11:59,376
extensions can inject
CSS style sheets


216
00:11:59,786 --> 00:12:02,196
and JavaScript content
scripts into pages.


217
00:12:02,776 --> 00:12:04,976
Let's take a look at how
to inject a style sheet.


218
00:12:05,786 --> 00:12:08,566
Stylesheets are injected
by specifying them


219
00:12:08,766 --> 00:12:12,806
in the app extensions Info.plist
in the NSExtension section.


220
00:12:13,376 --> 00:12:17,666
Stylesheets are specified using
the SFSafari style sheet section


221
00:12:18,056 --> 00:12:21,056
of the Info.plist file
which inspects an array


222
00:12:21,056 --> 00:12:23,486
of dictionaries defining
each style sheet.


223
00:12:24,346 --> 00:12:28,566
And each style sheet is defined
by a style sheet key-value pair


224
00:12:28,896 --> 00:12:32,586
where the value is the path
to the style sheet relative


225
00:12:32,586 --> 00:12:35,516
to the resources directory
of the extensions bundle.


226
00:12:36,206 --> 00:12:38,336
And any style sheet
you've written in the past


227
00:12:38,336 --> 00:12:41,996
for a Safari extension will just
work with Safari app extensions.


228
00:12:43,056 --> 00:12:45,026
Next up is injecting scripts.


229
00:12:45,266 --> 00:12:47,096
Which is almost exactly
the same,


230
00:12:47,516 --> 00:12:48,686
just with two different keys.


231
00:12:49,246 --> 00:12:50,386
Scripts are specified


232
00:12:50,446 --> 00:12:53,516
in the SFSafari content
script key of the dictionary.


233
00:12:54,456 --> 00:12:57,476
And the key representing
the path is script instead


234
00:12:57,476 --> 00:12:58,116
of style sheet.


235
00:12:59,246 --> 00:13:01,586
And all of your extensions
scripts are run


236
00:13:01,586 --> 00:13:03,536
in their own execution context


237
00:13:03,736 --> 00:13:05,946
which means there are never
there are never naming conflicts


238
00:13:06,166 --> 00:13:08,656
with variables in
webpages content scripts.


239
00:13:09,186 --> 00:13:13,116
This also allows Safari to
provide special JavaScript APIs


240
00:13:13,486 --> 00:13:15,156
to your extension's
content scripts


241
00:13:15,436 --> 00:13:17,286
that aren't available
to all webpages.


242
00:13:17,916 --> 00:13:20,836
For example, your extension
might need to communicate


243
00:13:20,836 --> 00:13:23,966
with the native code in your app
extension to read preferences


244
00:13:24,296 --> 00:13:27,806
or perform some action that can
only be done in native code.


245
00:13:28,296 --> 00:13:31,516
And to facilitate this, we've
added a message passing API


246
00:13:32,106 --> 00:13:34,556
so your app extension's
JavaScript code


247
00:13:34,826 --> 00:13:37,286
and Swift code can
communicate with each other.


248
00:13:38,516 --> 00:13:40,766
So, taking a look
at this diagram,


249
00:13:41,196 --> 00:13:45,186
you can see that we have Safari
and we have your app extension


250
00:13:45,356 --> 00:13:48,376
with a box representing
the Swift code running


251
00:13:48,376 --> 00:13:50,306
in your extension's
process which is


252
00:13:50,306 --> 00:13:51,916
of course completely sandboxed.


253
00:13:52,406 --> 00:13:56,386
And the extension has injected
a script into Apple.com


254
00:13:56,696 --> 00:13:58,146
and that script would
like to ask


255
00:13:58,146 --> 00:14:00,736
that app extension what
words it should replace.


256
00:14:01,566 --> 00:14:05,926
To do that, it just calls
Safari.extension.dispatch


257
00:14:05,926 --> 00:14:08,376
message and passes
along a message name.


258
00:14:08,916 --> 00:14:12,036
Now let's see how the Swift
code listens for this message


259
00:14:12,246 --> 00:14:15,076
and responds back with the
words it should replace.


260
00:14:16,246 --> 00:14:19,366
Each Safari app extension
has a principal class


261
00:14:19,936 --> 00:14:22,236
which is the class that
Safari calls methods


262
00:14:22,236 --> 00:14:24,686
on when the user
interacts with Safari.


263
00:14:25,286 --> 00:14:27,926
When a message is dispatched
from a content script


264
00:14:28,016 --> 00:14:31,556
to the app extension,
message received with name


265
00:14:31,866 --> 00:14:34,376
from page userInfo is called.


266
00:14:35,606 --> 00:14:37,426
And once that method is called


267
00:14:37,426 --> 00:14:39,246
on our extension's
principal object,


268
00:14:39,766 --> 00:14:43,986
the first thing we do is check
the message name and act on it.


269
00:14:44,456 --> 00:14:48,146
And to act on it, our extension
will be sending back a message


270
00:14:48,376 --> 00:14:51,686
to the SFSafari page
representing Apple.com


271
00:14:51,946 --> 00:14:55,336
with the words to replace and
what to replace them with.


272
00:14:55,886 --> 00:14:58,186
And we are structuring
this at the dictionary


273
00:14:58,446 --> 00:15:01,556
where each key represents the
word that we're going to replace


274
00:15:02,046 --> 00:15:04,936
and the value represents what
we're going to replace it with.


275
00:15:05,886 --> 00:15:11,306
So, when the app extension
calls dispatchMessageTo


276
00:15:11,306 --> 00:15:15,686
Script(withName,userInfo,
that message is sent


277
00:15:15,686 --> 00:15:18,786
from the extension process
back to the content script


278
00:15:19,076 --> 00:15:21,016
that is injected into Apple.com.


279
00:15:21,566 --> 00:15:24,066
Now let's see how that
content script listens


280
00:15:24,066 --> 00:15:25,946
for these messages
and acts on them.


281
00:15:27,406 --> 00:15:29,956
To listen for a message
inside a content script,


282
00:15:30,266 --> 00:15:33,846
we start by adding an event
listener to Safari.self.


283
00:15:34,076 --> 00:15:36,596
So, the content script can
listen for message events


284
00:15:36,896 --> 00:15:38,076
from the app extension.


285
00:15:38,496 --> 00:15:40,616
And if you've written a
Safari extension before,


286
00:15:41,016 --> 00:15:42,556
this will look very familiar.


287
00:15:42,856 --> 00:15:45,436
The API to receive
messages inside


288
00:15:45,436 --> 00:15:48,156
of a content script is
almost exactly the same.


289
00:15:49,096 --> 00:15:52,266
And when our event listener
fires because we got a message


290
00:15:52,266 --> 00:15:53,446
from our app extension,


291
00:15:54,036 --> 00:15:57,016
the first thing we do once
again is check the message name


292
00:15:57,016 --> 00:16:00,486
as a best practice
and then we act on it.


293
00:16:00,486 --> 00:16:05,176
To act on this message, we want
to iterate over our dictionary


294
00:16:05,696 --> 00:16:08,356
that was specified in the
userInfo of the message


295
00:16:08,356 --> 00:16:10,576
from the Swift code
and that is exposed


296
00:16:10,576 --> 00:16:12,886
to JavaScript as event.message.


297
00:16:13,356 --> 00:16:16,216
So, we get our dictionary
of words and replacements


298
00:16:16,496 --> 00:16:19,276
and we iterate over
them and call a function


299
00:16:19,276 --> 00:16:23,256
in our content script that
does those replacements.


300
00:16:23,876 --> 00:16:26,596
So, this word replacement
extension


301
00:16:26,596 --> 00:16:29,676
that we've been discussing is
meant to work on every website.


302
00:16:30,096 --> 00:16:32,326
But some extensions are
tailored to only run


303
00:16:32,326 --> 00:16:33,926
on particular websites.


304
00:16:34,706 --> 00:16:37,606
Safari app extensions
support a rich system


305
00:16:37,606 --> 00:16:41,686
for specifying what sites they
work on and additionally new


306
00:16:41,686 --> 00:16:44,426
in Safari 10, users
will be able to see


307
00:16:44,586 --> 00:16:47,766
which sites your Safari
extension requires access to.


308
00:16:49,196 --> 00:16:52,396
Like information about content
scripts and style sheets,


309
00:16:53,086 --> 00:16:55,776
your extension's website
access is described


310
00:16:55,776 --> 00:16:57,566
in the extension's Info.plist


311
00:16:57,946 --> 00:17:00,596
under the
SFSafariWebsiteAccess/key


312
00:17:00,966 --> 00:17:02,806
and it's a dictionary
with two parts.


313
00:17:03,166 --> 00:17:05,616
The first part is the
website access level.


314
00:17:06,266 --> 00:17:09,675
And this extension is specifying
an access level of all,


315
00:17:10,036 --> 00:17:11,496
which means it wants access


316
00:17:11,496 --> 00:17:13,766
to every webpage
that the user visits.


317
00:17:14,175 --> 00:17:17,705
And as you can see, Safari's
extensions preferences warn the


318
00:17:17,705 --> 00:17:20,516
user about this before they're
going to turn on the extension.


319
00:17:21,636 --> 00:17:22,685
And in this example,


320
00:17:23,136 --> 00:17:25,665
the extension has an
access level of some.


321
00:17:26,326 --> 00:17:30,556
When the access level is some,
the extension specifies a list


322
00:17:30,556 --> 00:17:32,786
of domains that it wants access


323
00:17:32,786 --> 00:17:36,216
to in the allowed domain
section of the dictionary.


324
00:17:36,716 --> 00:17:40,466
And if an allowed domain starts
with an asterisk, that marks it


325
00:17:40,466 --> 00:17:44,006
as a wildcard and it represents
access to all subdomains.


326
00:17:45,426 --> 00:17:49,346
So, now that we've discussed how
your extension can modify pages


327
00:17:49,686 --> 00:17:51,876
by injecting content
scripts and style sheets,


328
00:17:52,356 --> 00:17:54,646
how those content
scripts can communicate


329
00:17:54,646 --> 00:17:56,336
with your app extension's
Swift code


330
00:17:56,716 --> 00:17:59,496
and how you specify what
websites your extension would


331
00:17:59,496 --> 00:18:00,396
like access to.


332
00:18:00,796 --> 00:18:03,416
I'd like to put this all
together in a demo and write


333
00:18:03,416 --> 00:18:06,446
that word replacement extension
that we've been talking about.


334
00:18:09,976 --> 00:18:12,886
So, one of the interesting
things


335
00:18:12,956 --> 00:18:17,716
about Safari extensions is that
since the code that interacts


336
00:18:17,716 --> 00:18:21,146
with webpages is JavaScript
based, it's very easy


337
00:18:21,146 --> 00:18:23,926
to bring code that you've
written for, an extension


338
00:18:23,926 --> 00:18:27,116
for a different browser, and
bring it directly into Safari.


339
00:18:27,546 --> 00:18:31,156
So, what I'm going to do is I'm
going to take a Chrome extension


340
00:18:31,436 --> 00:18:33,886
that does this word
replacement and I'm going


341
00:18:33,886 --> 00:18:36,436
to create a Safari
app extension from it.


342
00:18:36,846 --> 00:18:41,206
And I'm going to extend it so
that we get the words to replace


343
00:18:41,456 --> 00:18:44,056
and what to replace them
with from Swift code.


344
00:18:44,966 --> 00:18:48,756
So, I already have an app
built with an icon and I would


345
00:18:48,756 --> 00:18:50,606
like to create a
Safari extension.


346
00:18:51,286 --> 00:18:53,696
To do that, I create
a new target in Xcode


347
00:18:55,036 --> 00:18:57,466
and select a macOS
Application Extension


348
00:18:58,116 --> 00:18:59,786
and select Safari extension.


349
00:19:00,526 --> 00:19:04,236
And we're going to call this
Animalify because we're going


350
00:19:04,236 --> 00:19:05,376
to Animalify the web


351
00:19:05,376 --> 00:19:07,586
by replacing animals
with their emoji.


352
00:19:09,776 --> 00:19:14,026
And as Zach mentioned
before, we want to run the app


353
00:19:14,026 --> 00:19:16,816
so I'm not going to activate
the extension scheme right now.


354
00:19:17,336 --> 00:19:22,386
So, we now have our
extension and I'm going


355
00:19:22,386 --> 00:19:24,206
to jump into the Info.plist.


356
00:19:24,636 --> 00:19:26,806
And open up that
NSextension section.


357
00:19:27,336 --> 00:19:32,166
And as you can see,
automatically created for us


358
00:19:32,166 --> 00:19:35,596
from the template, we have a
content script, a toolbar item


359
00:19:36,006 --> 00:19:38,736
and the website access that
our extension requires.


360
00:19:39,146 --> 00:19:41,016
I'm going to get rid
of this toolbar item


361
00:19:41,016 --> 00:19:42,446
because our extension
doesn't need it.


362
00:19:43,096 --> 00:19:47,256
And change the access level
to all and get rid of the list


363
00:19:47,256 --> 00:19:49,816
of allowed domains because
we want this extension


364
00:19:50,016 --> 00:19:51,586
to run on every page.


365
00:19:52,636 --> 00:19:55,866
The next thing I'm going to do
is open up our content script


366
00:19:56,456 --> 00:19:59,746
and I'm just going to bring in
the content script I've written


367
00:19:59,746 --> 00:20:01,496
for my Chrome extension
wholesale.


368
00:20:03,336 --> 00:20:05,896
And as you can see, when
the script is injected


369
00:20:05,896 --> 00:20:08,916
into the page, it just calls
our replacement function


370
00:20:09,176 --> 00:20:11,506
and replaces bear
with the bear emoji.


371
00:20:12,136 --> 00:20:15,156
Now, what I would like to
have my app do is I would


372
00:20:15,156 --> 00:20:17,036
like to have it replaced,


373
00:20:17,036 --> 00:20:18,966
I would like to have it
show a list of animals


374
00:20:19,146 --> 00:20:20,576
and the users can choose


375
00:20:20,576 --> 00:20:22,736
which animals they
would like to replace.


376
00:20:23,166 --> 00:20:25,956
I'm not going to design
any of that UI right now


377
00:20:26,356 --> 00:20:30,196
but to support that, we need
to get the list of replacements


378
00:20:30,196 --> 00:20:31,436
from the app extension.


379
00:20:31,926 --> 00:20:35,526
So, instead of doing this
replacement straightaway,


380
00:20:36,216 --> 00:20:38,926
we're going to send
a JavaScript message


381
00:20:38,926 --> 00:20:42,636
to the app extension asking it
for the words and replacements.


382
00:20:43,306 --> 00:20:45,606
And so one thing that's
interesting here is


383
00:20:45,606 --> 00:20:47,496
that Safari's extensions,


384
00:20:47,496 --> 00:20:51,176
Safari app extension content
scripts are injected before the


385
00:20:51,176 --> 00:20:54,486
dom has loaded for more
flexibility in your extensions.


386
00:20:55,016 --> 00:20:58,386
But since a word replacer
doesn't do much before there's a


387
00:20:58,386 --> 00:21:01,966
dom, we want to wait until the
dom is loaded before sending


388
00:21:01,966 --> 00:21:02,706
this message.


389
00:21:03,706 --> 00:21:05,666
So, now let's go to
our principal class


390
00:21:06,286 --> 00:21:09,376
and as you can see, we
already have an implementation


391
00:21:09,376 --> 00:21:13,836
for message received with
name from page userInfo.


392
00:21:14,646 --> 00:21:19,246
So, we're going to get rid
of this and just replace it


393
00:21:19,506 --> 00:21:22,786
with some, with the code that
we talked about in the slides.


394
00:21:23,166 --> 00:21:25,376
Which all it does is
check the message name


395
00:21:25,436 --> 00:21:28,376
and sends a response back
to the content script.


396
00:21:28,876 --> 00:21:31,196
And we're making two
replacements here just


397
00:21:31,226 --> 00:21:31,956
because we can.


398
00:21:33,356 --> 00:21:35,716
So, let's go back to the
content script and listen


399
00:21:35,716 --> 00:21:37,986
for this message and act on it.


400
00:21:42,776 --> 00:21:45,516
And once again, this is
just the code we talked


401
00:21:45,516 --> 00:21:47,046
about a few minutes ago.


402
00:21:47,456 --> 00:21:49,146
We start by adding
an event listener


403
00:21:49,146 --> 00:21:51,886
for the message event
to Safari.self.


404
00:21:52,766 --> 00:21:56,686
And when that event listener
fires, we check the message name


405
00:21:56,686 --> 00:22:00,236
and get our replacements
from event.message.


406
00:22:00,336 --> 00:22:03,976
And we act on them by iterating
over all of the replacements


407
00:22:04,256 --> 00:22:06,636
and calling that same
replace function that was


408
00:22:06,636 --> 00:22:08,106
at the beginning of
the script before.


409
00:22:08,856 --> 00:22:12,236
So, now I would like to build
and run this app so Safari


410
00:22:12,236 --> 00:22:13,706
to discover this new extension.


411
00:22:20,436 --> 00:22:23,036
And you can just imagine
a list of animals here


412
00:22:23,036 --> 00:22:23,866
and I've checked a few.


413
00:22:24,816 --> 00:22:28,996
So, I'm just trying out
Safari app extensions


414
00:22:28,996 --> 00:22:29,826
for the first time.


415
00:22:30,106 --> 00:22:32,496
So, I have not signed up for
the app, I have not signed


416
00:22:32,496 --> 00:22:33,896
up for the Apple
Developer Program


417
00:22:33,896 --> 00:22:36,546
yet which means I don't have
a Developer certificate.


418
00:22:36,976 --> 00:22:40,086
By default, Safari
will only show,


419
00:22:40,086 --> 00:22:42,676
allow users to enable
extensions that have been signed


420
00:22:42,676 --> 00:22:44,066
with the developer certificate.


421
00:22:44,466 --> 00:22:46,566
But for those of you who
just want to try this out,


422
00:22:46,876 --> 00:22:49,496
we've added way for
you to be able


423
00:22:49,496 --> 00:22:51,476
to test your unsigned
extensions.


424
00:22:51,946 --> 00:22:55,916
To do that, I'm going to open
up the Advanced Preferences


425
00:22:56,366 --> 00:22:58,526
and show the Develop
menu in the menu bar.


426
00:22:59,176 --> 00:23:00,456
And from the Develop menu,


427
00:23:00,716 --> 00:23:03,516
I'm going to select Allow
Unsigned extensions.


428
00:23:04,176 --> 00:23:05,376
I'm going to type my password


429
00:23:06,256 --> 00:23:09,966
and now the animal
extension shows


430
00:23:09,966 --> 00:23:11,286
up in our list of extensions.


431
00:23:11,966 --> 00:23:15,516
I'm going to turn it on and
before everyone got here,


432
00:23:15,516 --> 00:23:17,496
I was researching the
diet of a grizzly bear.


433
00:23:17,856 --> 00:23:21,676
So I'm just going to reload
this page and as you can see,


434
00:23:21,816 --> 00:23:24,436
bear has now been placed,
replaced with the bear emoji


435
00:23:24,726 --> 00:23:27,366
and salmon has been replaced
with a delicious sushi emoji.


436
00:23:29,446 --> 00:23:31,446
[ Applause ]


437
00:23:31,876 --> 00:23:34,056
And this is just going to
make the web a lot more fun


438
00:23:34,056 --> 00:23:34,776
for me to browse.


439
00:23:39,936 --> 00:23:43,596
So, that was how a Safari
app extension can modify page


440
00:23:43,596 --> 00:23:47,346
content and how your extension
specifies what websites it would


441
00:23:47,346 --> 00:23:48,276
like access to.


442
00:23:49,036 --> 00:23:51,456
The last type of extension that
we're going to show you how


443
00:23:51,456 --> 00:23:55,736
to make is one that extends
Safari's UI to add the power


444
00:23:55,736 --> 00:23:59,796
and functionality of your
native app directly into Safari.


445
00:24:00,296 --> 00:24:01,566
And to show us how to do that,


446
00:24:01,886 --> 00:24:03,456
I'd like to invite
Damian on stage.


447
00:24:03,886 --> 00:24:04,236
Damian?


448
00:24:06,516 --> 00:24:09,026
[ Applause ]


449
00:24:09,526 --> 00:24:11,006
>> Hello, everyone.


450
00:24:11,006 --> 00:24:13,956
My name is Damian Kaleta and I'm
an engineer on the Safari team.


451
00:24:15,106 --> 00:24:17,276
So, Brian already told
you about the fundamentals


452
00:24:17,276 --> 00:24:20,386
of Safari App Extensions and now
I want to build on top of that.


453
00:24:20,856 --> 00:24:22,916
I want to tell you how you
can extend Safari's UI.


454
00:24:23,916 --> 00:24:24,426
So, let's start.


455
00:24:25,686 --> 00:24:28,146
I've written this
simple macOS app.


456
00:24:28,706 --> 00:24:29,456
It's a notebook app.


457
00:24:30,186 --> 00:24:32,776
And as you can see
by the screenshot,


458
00:24:32,776 --> 00:24:34,366
the icon got some love
from the designers.


459
00:24:34,366 --> 00:24:35,886
Unfortunately, the
app itself didn't.


460
00:24:36,276 --> 00:24:38,926
But nevertheless, it
lets me insert some note,


461
00:24:39,086 --> 00:24:41,046
saves it so I can view it later.


462
00:24:41,996 --> 00:24:45,866
But now I want to be
able to grab notes off


463
00:24:45,866 --> 00:24:49,426
of web pages directly and
modify this note in Safari.


464
00:24:50,396 --> 00:24:52,516
And with the new Safari
app extension model,


465
00:24:53,606 --> 00:24:55,036
I have all the tools
I need in order


466
00:24:55,036 --> 00:24:56,836
to build my extension
really easily.


467
00:24:57,856 --> 00:25:00,096
I'm going to need
two different things.


468
00:25:00,606 --> 00:25:03,996
So, I want to be able to
select a text and I want


469
00:25:03,996 --> 00:25:05,076
to be able to save it.


470
00:25:06,156 --> 00:25:09,046
For that, I'll use
a context menu item.


471
00:25:10,406 --> 00:25:14,536
Secondly, I want to be able
to display my most recent note


472
00:25:15,336 --> 00:25:19,046
and I want to be
able to modify it.


473
00:25:19,586 --> 00:25:20,826
For that, I'll use a popover.


474
00:25:21,866 --> 00:25:25,186
The popover shows up when the
user clicks the toolbar button.


475
00:25:25,536 --> 00:25:28,296
So, let's talk about that first.


476
00:25:28,826 --> 00:25:32,646
The toolbar button
goes by default next


477
00:25:32,646 --> 00:25:33,796
to the Smart Search field.


478
00:25:34,436 --> 00:25:37,466
That way your users have
really quick and easy access


479
00:25:37,466 --> 00:25:40,516
to the functionality that
your extension provides.


480
00:25:41,476 --> 00:25:43,376
As you would expect, if
you're an Events user


481
00:25:43,376 --> 00:25:45,386
of course you can move
it around really easily.


482
00:25:46,566 --> 00:25:48,716
So, how did I add my button?


483
00:25:49,336 --> 00:25:52,826
I went to my extension's
Info.plist


484
00:25:53,246 --> 00:25:56,236
and I've added
SFSafariToolbarItem.


485
00:25:56,986 --> 00:25:59,656
Together with four
different key-value pairs.


486
00:26:00,546 --> 00:26:05,526
Identifier, label,
image and action.


487
00:26:06,786 --> 00:26:12,136
And as with all toolbar items
on the system, please notice


488
00:26:12,136 --> 00:26:14,036
that I'm using a PDF file here.


489
00:26:15,686 --> 00:26:19,256
Okay, so Safari now displays my
toolbar button but what happens


490
00:26:19,256 --> 00:26:22,906
to my extension when the user
clicks that toolbar button?


491
00:26:24,236 --> 00:26:27,016
Safari sends toolbar
item click in window


492
00:26:27,766 --> 00:26:29,166
to your principal object.


493
00:26:30,116 --> 00:26:33,006
And as a reminder, your
principal object is the object


494
00:26:33,426 --> 00:26:35,146
that handles all of
the communication


495
00:26:35,146 --> 00:26:37,846
between Safari and
your extension.


496
00:26:39,166 --> 00:26:41,936
And also if you want to gray
out the button depending


497
00:26:41,936 --> 00:26:45,756
on the context, Safari provides
you with the validation method.


498
00:26:46,346 --> 00:26:49,556
And you can also set batch
text for your button.


499
00:26:50,126 --> 00:26:51,916
That usually represents
a numerical value


500
00:26:51,916 --> 00:26:54,926
such as in red count.


501
00:26:55,516 --> 00:26:59,056
So, we've got ourselves a
button but now I want to be able


502
00:26:59,056 --> 00:27:03,566
to display a popover when
the user clicks the button.


503
00:27:03,876 --> 00:27:07,286
The popover lets me insert
any NSview inside of it


504
00:27:07,686 --> 00:27:11,556
which is great because if you
have written any macOS Apps


505
00:27:11,556 --> 00:27:13,946
before, you're going
to be able to reuse


506
00:27:13,946 --> 00:27:16,306
that code really
easily right over here.


507
00:27:16,996 --> 00:27:18,396
So, let me show you
how this works.


508
00:27:19,426 --> 00:27:23,406
You have your extension
with the principal object


509
00:27:24,466 --> 00:27:28,956
and then you'll want to define
popoverViewController method


510
00:27:28,956 --> 00:27:30,826
on your principal object.


511
00:27:32,036 --> 00:27:34,626
Inside that method,
you'll want to return


512
00:27:34,626 --> 00:27:38,696
to custom view controller it
represents a view that you want


513
00:27:38,696 --> 00:27:40,176
to insert in that popover.


514
00:27:40,716 --> 00:27:43,906
On the other side,
there's Safari process


515
00:27:44,676 --> 00:27:47,536
and Safari process is something
that we call remote view.


516
00:27:48,426 --> 00:27:51,656
That remote view will
simply grab your review


517
00:27:51,656 --> 00:27:55,776
and display its contents
in the popover.


518
00:27:56,516 --> 00:27:59,676
And as you would expect, we
will also forward you all


519
00:27:59,676 --> 00:28:01,286
of the events such
as click events.


520
00:28:01,786 --> 00:28:05,646
And a way to show the popover
is to simply specify an action


521
00:28:05,646 --> 00:28:11,356
of popover instead of command
on SFSafariToolbarItem.


522
00:28:11,726 --> 00:28:12,286
And that's it.


523
00:28:12,286 --> 00:28:15,286
At this point, Safari knows that
you want to display a popover,


524
00:28:15,286 --> 00:28:17,516
so you will look for that
custom view controller.


525
00:28:18,096 --> 00:28:22,736
The popover also comes with
a handful of useful APIs.


526
00:28:23,236 --> 00:28:26,336
And as you can see here, the
first two popoverWillShow


527
00:28:26,336 --> 00:28:27,736
and the popoverWillClose.


528
00:28:28,276 --> 00:28:30,336
It can help you do some
setup or cleanup work.


529
00:28:31,396 --> 00:28:33,226
And the third one
we've talked about.


530
00:28:33,256 --> 00:28:35,436
It's the one that
basically returns your custom


531
00:28:35,436 --> 00:28:36,006
view controller.


532
00:28:37,006 --> 00:28:38,456
Okay, so we've added the button.


533
00:28:38,456 --> 00:28:40,706
We can display a popover.


534
00:28:41,216 --> 00:28:44,096
Now let's talk about
context menu items.


535
00:28:44,096 --> 00:28:52,106
So, you typically want to use
context menu items when you want


536
00:28:52,106 --> 00:28:54,376
to act on part of the page.


537
00:28:54,986 --> 00:28:56,906
But in my case, I
want to be able


538
00:28:56,906 --> 00:28:59,516
to select the text
and then save it.


539
00:29:00,226 --> 00:29:02,786
So, I went again to my
extensions Info.plist


540
00:29:03,096 --> 00:29:06,236
and then I've added
SFSafariContextMenu.


541
00:29:07,496 --> 00:29:09,516
It's an array of dictionaries


542
00:29:09,516 --> 00:29:12,016
that hold two different
key-value pairs.


543
00:29:12,606 --> 00:29:14,556
Text and command.


544
00:29:15,966 --> 00:29:18,256
And then when the user presses


545
00:29:18,256 --> 00:29:20,596
or clicks your context
menu item,


546
00:29:21,466 --> 00:29:24,186
Safari will send
contextMenuItemSelected


547
00:29:24,646 --> 00:29:25,836
to the principal object.


548
00:29:27,596 --> 00:29:31,356
Please notice that we are
also passing along userInfo.


549
00:29:32,036 --> 00:29:35,846
This will simply represent any
additional information you might


550
00:29:35,846 --> 00:29:38,566
want to include from
your injected script.


551
00:29:39,516 --> 00:29:45,036
Such as in my case, I want to be
able to pass along selectedText.


552
00:29:45,616 --> 00:29:48,986
So, inside my injected script
I'm adding event listener


553
00:29:48,986 --> 00:29:49,906
for context menu.


554
00:29:50,706 --> 00:29:54,636
And then inside that function
I'm calling set context menu


555
00:29:54,636 --> 00:29:58,106
event userInfo on the
Safari extension object.


556
00:29:59,286 --> 00:30:03,086
And notice that I'm actually
sending along selectedText.


557
00:30:04,396 --> 00:30:08,536
Okay. So now I'm excited to show
you my macOS app how I extended


558
00:30:08,536 --> 00:30:09,296
it into Safari.


559
00:30:09,906 --> 00:30:15,226
So, let's do that.


560
00:30:16,036 --> 00:30:17,466
So, before I show you any code,


561
00:30:17,846 --> 00:30:20,556
this is my simple macOS
app right over here.


562
00:30:20,556 --> 00:30:22,636
As you can see, I
have just two notes.


563
00:30:23,066 --> 00:30:25,466
I can insert my note
here, delete last note,


564
00:30:25,936 --> 00:30:28,606
etc. So, let's go to Xcode.


565
00:30:29,176 --> 00:30:31,156
I want to show you
three different things.


566
00:30:31,826 --> 00:30:34,006
First, Info.plist.


567
00:30:35,916 --> 00:30:39,926
So, please notice that I'm
adding my context menu item


568
00:30:39,926 --> 00:30:40,656
right over here.


569
00:30:41,456 --> 00:30:43,426
Here's my text and my command.


570
00:30:44,326 --> 00:30:46,206
And I'm also adding
my toolbar item.


571
00:30:46,456 --> 00:30:50,006
I have my, all of my four
different fields right


572
00:30:50,006 --> 00:30:50,676
over here.


573
00:30:50,676 --> 00:30:54,496
And as you can see,
I'm using a PDF file.


574
00:30:55,376 --> 00:30:59,506
Second thing I want to show
you is my principal object.


575
00:31:00,286 --> 00:31:04,856
Let me just make it like that.


576
00:31:05,396 --> 00:31:08,466
And I have overridden
two different methods


577
00:31:08,466 --> 00:31:09,636
on my principal object.


578
00:31:09,816 --> 00:31:11,746
The first one is
popoverViewController.


579
00:31:12,176 --> 00:31:15,366
This will simply return
my view controller


580
00:31:15,696 --> 00:31:17,826
that represents the
view that goes to,


581
00:31:17,826 --> 00:31:19,636
that displaced in the popover.


582
00:31:20,276 --> 00:31:22,156
And the second one
is contextMenuItem


583
00:31:22,156 --> 00:31:23,286
Selected(withCommand.


584
00:31:24,066 --> 00:31:26,816
And as you can see, I'm getting
my userInfo right over here


585
00:31:26,926 --> 00:31:28,936
and assigning my
note here and here.


586
00:31:28,936 --> 00:31:36,916
And third thing I want to show
you is how I can easily reuse


587
00:31:36,916 --> 00:31:41,716
the code and share it between
my macOS app and my extension.


588
00:31:42,326 --> 00:31:45,616
Of course normally you
wouldn't use just simple files.


589
00:31:45,616 --> 00:31:48,436
You would use a framework
but that will give an idea.


590
00:31:49,536 --> 00:31:51,176
So, this is my notes manager.


591
00:31:51,686 --> 00:31:55,716
It will simply read and
save to the user defaults.


592
00:31:56,086 --> 00:31:58,816
It has some simple methods
such as removeAllNotes,


593
00:31:58,816 --> 00:32:03,266
removeLastNote, etc.
And please notice


594
00:32:03,266 --> 00:32:07,796
that my target membership is set
for both targets, my notebook,


595
00:32:08,336 --> 00:32:10,406
which is macOS app
and my extension.


596
00:32:11,646 --> 00:32:17,366
Okay. So, now let me go
to Safari right over here


597
00:32:17,766 --> 00:32:21,216
and as you can see, my
extension is right next


598
00:32:21,216 --> 00:32:22,326
to the Smart Search field.


599
00:32:23,476 --> 00:32:25,726
I can click it and
this is where my last,


600
00:32:25,886 --> 00:32:27,676
my most recent note will appear.


601
00:32:28,136 --> 00:32:32,106
So, let's say and, let me just
bring up my notebook app also.


602
00:32:33,106 --> 00:32:33,886
Side to side.


603
00:32:34,366 --> 00:32:37,316
So, let's say I'm
reading some blog posts


604
00:32:37,796 --> 00:32:43,026
and let's pick this one.


605
00:32:43,446 --> 00:32:48,006
And let's say that I want to
be able to save some notes.


606
00:32:48,006 --> 00:32:50,756
So, let's say I select
this thing.


607
00:32:50,976 --> 00:32:54,446
I command, CTL click it.


608
00:32:54,566 --> 00:32:57,386
And then I say add
snippet to notebook.


609
00:32:58,526 --> 00:33:03,916
Like so. As you can see, my note
was added right over here also.


610
00:33:04,536 --> 00:33:09,136
I can open my extension
and it's right over here.


611
00:33:09,496 --> 00:33:11,546
And now if I want to
let's say modify it,


612
00:33:11,846 --> 00:33:16,096
because let's say I don't
want to have my last sentence,


613
00:33:16,196 --> 00:33:20,236
I can simply delete that,
hit Modify and voila.


614
00:33:20,466 --> 00:33:22,076
It's reflected in my macOS app.


615
00:33:22,536 --> 00:33:26,426
So, it's that simple to create
an extension and share the code


616
00:33:26,426 --> 00:33:29,806
between your macOS
app and extension.


617
00:33:30,456 --> 00:33:36,206
So, I showed you
how to add a button.


618
00:33:36,446 --> 00:33:38,716
I showed you how to
display a popover


619
00:33:38,716 --> 00:33:41,176
and add multiple
context menu items.


620
00:33:42,666 --> 00:33:44,286
Now I want to hand
it back to Brian.


621
00:33:45,516 --> 00:33:48,500
[ Applause ]


622
00:33:54,286 --> 00:33:55,056
>> Thanks, Damian.


623
00:33:55,806 --> 00:33:57,176
Except for leaving
the clicker over here.


624
00:33:58,676 --> 00:34:02,366
So, today we showed you
three types of extensions


625
00:34:02,366 --> 00:34:04,746
that are made possible with
our new extension model.


626
00:34:05,506 --> 00:34:08,366
We showed how easy it is to
bring your content blocker


627
00:34:08,476 --> 00:34:11,896
from iOS to the Mac
and introduced new APIs


628
00:34:12,045 --> 00:34:14,126
to get the state of
your content blocker


629
00:34:14,446 --> 00:34:15,976
in response to your feedback.


630
00:34:16,656 --> 00:34:19,466
We saw how simple it is to
bring a Chrome extension


631
00:34:19,666 --> 00:34:23,985
that modifies webpages to Safari
and enhanced it to communicate


632
00:34:23,985 --> 00:34:26,775
with the native Swift code
in your app extension.


633
00:34:27,295 --> 00:34:30,906
And lastly, we saw how it had
the power and functionality


634
00:34:30,906 --> 00:34:33,346
of your app directly to Safari.


635
00:34:34,176 --> 00:34:37,706
And remember, Safari app
extensions are all based


636
00:34:37,706 --> 00:34:38,766
on app extensions.


637
00:34:39,146 --> 00:34:42,266
Which means you have the power
of native technologies and APIs


638
00:34:42,266 --> 00:34:46,176
in your app extension
alongside your JavaScript


639
00:34:46,335 --> 00:34:49,856
and your CSS used to
modify and enhance webpages.


640
00:34:50,616 --> 00:34:53,416
And since Safari app
extensions are distributed


641
00:34:53,416 --> 00:34:57,226
with your Mac app, there's an
easier installation experience


642
00:34:57,226 --> 00:35:00,516
for your users and you can
now sell your extensions


643
00:35:00,636 --> 00:35:01,686
in the Mac App Store.


644
00:35:02,356 --> 00:35:05,756
For more information about the
talk and some useful links,


645
00:35:06,066 --> 00:35:07,526
please visit this page.


646
00:35:07,906 --> 00:35:11,556
Safari app extensions are the
future and we need your help


647
00:35:11,596 --> 00:35:13,316
to make them the best
that they can be.


648
00:35:13,726 --> 00:35:15,866
Please give us some
feedback about our APIs


649
00:35:15,866 --> 00:35:17,796
and any bugs you find.


650
00:35:18,056 --> 00:35:20,806
On the More Information page,
you will find a link to leave


651
00:35:20,806 --> 00:35:24,296
that feedback and the email
address of John Davis,


652
00:35:24,296 --> 00:35:26,376
our Safari and WebKit
evangelist.


653
00:35:27,126 --> 00:35:29,966
And for related sessions,
I highly recommend checking


654
00:35:29,966 --> 00:35:33,126
out some of the app extension
talks from previous years.


655
00:35:34,266 --> 00:35:35,486
Thank you so much.


656
00:35:36,516 --> 00:35:40,500
[ Applause ]

