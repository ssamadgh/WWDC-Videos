1
00:00:07,516 --> 00:00:18,500
[ Music ]


2
00:00:21,516 --> 00:00:27,386
[ Applause ]


3
00:00:27,886 --> 00:00:28,706
>> Hello and welcome.


4
00:00:28,756 --> 00:00:31,466
I hope that everybody's
having a great WWDC.


5
00:00:32,116 --> 00:00:34,146
My name is Justin Stoyles,
I'm part of our Graphics


6
00:00:34,146 --> 00:00:35,216
and Media Group here at Apple.


7
00:00:35,736 --> 00:00:37,396
And I'm really excited
to talk to you today


8
00:00:37,396 --> 00:00:38,686
about working with wide color.


9
00:00:39,406 --> 00:00:41,296
We're going to cover
a few topics today.


10
00:00:41,296 --> 00:00:42,256
I'm going to start


11
00:00:42,256 --> 00:00:44,606
with discussing some
core color concepts.


12
00:00:45,066 --> 00:00:47,076
And we'll talk a little bit
about what is wide color


13
00:00:47,226 --> 00:00:48,026
and why does it matter.


14
00:00:48,926 --> 00:00:50,326
Then I'm going to hand
it over to Patrick,


15
00:00:50,556 --> 00:00:52,376
who's going to walk you
over some of the processes


16
00:00:52,666 --> 00:00:55,646
of getting wide color assets
into your application.


17
00:00:55,996 --> 00:00:58,136
And then I'm going to
hand it over to Steve,


18
00:00:58,316 --> 00:01:00,066
who's going to talk about
rendering wide color.


19
00:01:00,686 --> 00:01:01,426
So let's get started.


20
00:01:02,416 --> 00:01:04,336
As I mentioned, I'm
excited to talk to you


21
00:01:04,336 --> 00:01:06,476
about wide color today
and the reason why is


22
00:01:06,476 --> 00:01:08,236
because we're actually
transforming the way


23
00:01:08,236 --> 00:01:10,756
that we handle wide color,
and colors in general


24
00:01:10,856 --> 00:01:12,266
on the Mac and iOS platform.


25
00:01:12,986 --> 00:01:15,876
A good place to start
is in the '90s.


26
00:01:16,396 --> 00:01:18,226
So Apple has always
been at the forefront


27
00:01:18,226 --> 00:01:20,056
of solving the color
problem in computing.


28
00:01:20,466 --> 00:01:22,076
And a good place to
start with ColorSync.


29
00:01:22,276 --> 00:01:25,046
So ColorSync is our color
management platform on the Mac


30
00:01:25,496 --> 00:01:27,366
and it was developed in
the '90s and at the time,


31
00:01:27,606 --> 00:01:30,076
Apple and a number of other
like-minded companies got


32
00:01:30,076 --> 00:01:32,816
together with the idea that
standards in color management


33
00:01:32,816 --> 00:01:35,096
and color reproduction
would begin to solve some


34
00:01:35,096 --> 00:01:37,226
of the problems faced by
engineers and designers


35
00:01:37,546 --> 00:01:38,326
when working with color.


36
00:01:39,456 --> 00:01:40,746
That group later became known


37
00:01:40,746 --> 00:01:42,966
as the International
Color Consortium, or ICC,


38
00:01:42,966 --> 00:01:44,046
which you may be familiar with.


39
00:01:44,786 --> 00:01:47,546
The work of ICC was then
incorporated into ColorSync


40
00:01:47,546 --> 00:01:49,366
and we built that
fundamentally into OS X.


41
00:01:51,036 --> 00:01:53,716
Now Apple has also been at the
forefront of display technology.


42
00:01:54,036 --> 00:01:55,826
We now have these
beautiful retina displays


43
00:01:55,826 --> 00:01:56,766
across our product line.


44
00:01:56,976 --> 00:01:57,976
People really, really love them.


45
00:01:58,436 --> 00:01:59,896
But what really is
the next frontier?


46
00:02:00,686 --> 00:02:04,796
Well, last year we announced
the beautiful new iMacs


47
00:02:04,796 --> 00:02:05,676
with P3 displays.


48
00:02:06,146 --> 00:02:07,826
And the feedback we got
was really tremendous.


49
00:02:08,186 --> 00:02:09,966
They display 25 percent
more color.


50
00:02:10,316 --> 00:02:11,726
And they have the
P3 color space,


51
00:02:11,726 --> 00:02:12,796
which people really,
really love.


52
00:02:13,326 --> 00:02:14,816
And if you fast forward
another year,


53
00:02:15,136 --> 00:02:18,806
we have these new iPad Pro
9.7 displays with True Tones.


54
00:02:18,806 --> 00:02:20,096
So we've taken that
even further.


55
00:02:20,656 --> 00:02:22,226
Now, there's a lot
happening under the hood here,


56
00:02:22,266 --> 00:02:24,236
and we're going to try to get
into some of those topics today.


57
00:02:24,606 --> 00:02:26,846
And I'll start with
Core Color Concepts.


58
00:02:27,166 --> 00:02:29,436
Let's start very,
very, very simple.


59
00:02:29,576 --> 00:02:31,446
So, what is a color space?


60
00:02:31,446 --> 00:02:33,216
Well a color space
is an environment


61
00:02:33,296 --> 00:02:35,446
in which colors can be
compared and represented.


62
00:02:35,736 --> 00:02:38,626
It can be a 1, 2, 3,
or 4 dimensional space


63
00:02:38,756 --> 00:02:41,856
that is defined by the intensity
of its color components.


64
00:02:43,166 --> 00:02:45,586
Those color components
are also often referred


65
00:02:45,586 --> 00:02:46,386
to as color channels.


66
00:02:47,326 --> 00:02:49,876
One representation that you
might be familiar with is RGB.


67
00:02:50,276 --> 00:02:52,906
So, this is very
relevant with displays,


68
00:02:52,906 --> 00:02:54,726
where your subpixels are
red, green, and blue.


69
00:02:54,726 --> 00:02:57,046
And to think about these
color channels you can think


70
00:02:57,046 --> 00:02:58,446
that the intensity of each


71
00:02:58,446 --> 00:03:00,476
of these color channels
defines the color


72
00:03:00,476 --> 00:03:02,086
that you see on the other end.


73
00:03:03,276 --> 00:03:05,356
There's many different
types of color spaces.


74
00:03:05,536 --> 00:03:08,056
I mentioned RGB spaces, which
are very popular in displays.


75
00:03:08,446 --> 00:03:10,626
But there's also lots
more, there's gray spaces,


76
00:03:10,626 --> 00:03:11,966
which are used in
monochrome printing.


77
00:03:12,686 --> 00:03:15,286
In color printing we
often use CMYK spaces.


78
00:03:15,696 --> 00:03:17,646
And if you're trying
to do calculations


79
00:03:17,646 --> 00:03:20,286
and transformations, we
generally use color spaces


80
00:03:20,286 --> 00:03:22,056
like LAB, which are
device independent.


81
00:03:22,666 --> 00:03:28,056
So now we have color spaces, and
color channels, and we now want


82
00:03:28,056 --> 00:03:29,186
to create a coordinate system


83
00:03:29,186 --> 00:03:30,846
where we can compare
and compute colors.


84
00:03:31,246 --> 00:03:33,036
So there's the concept
of color primaries.


85
00:03:33,636 --> 00:03:37,076
So color primaries generally
fall at the most intense value


86
00:03:37,076 --> 00:03:39,456
that you can get with that
particular color channel.


87
00:03:40,296 --> 00:03:43,526
So in this example of an RGB
color space, you would see


88
00:03:43,526 --> 00:03:44,826
that the color primaries are


89
00:03:44,826 --> 00:03:47,766
where we anchor 1.0
in our color space.


90
00:03:48,236 --> 00:03:50,956
So for black, I would
have no saturation in each


91
00:03:50,956 --> 00:03:52,626
of my color channels,
so I have 0, 0, 0.


92
00:03:53,206 --> 00:03:54,676
For white I would have 1, 1, 1.


93
00:03:54,976 --> 00:03:57,116
And for red I would only
saturate the red channel,


94
00:03:57,426 --> 00:03:58,576
and I would have 1, 0, 0.


95
00:03:59,216 --> 00:03:59,656
Very simple.


96
00:04:00,846 --> 00:04:03,576
And when we refer to color
gamut, we're actually talking


97
00:04:03,576 --> 00:04:06,576
about all of the colors that
can be defined as a combination


98
00:04:06,576 --> 00:04:08,046
of those individual
color channels.


99
00:04:09,066 --> 00:04:11,266
So now you understand some
of the basic color concepts


100
00:04:11,296 --> 00:04:13,066
that we're going to be
discussing in this presentation.


101
00:04:13,306 --> 00:04:14,796
So then what is wide color?


102
00:04:15,206 --> 00:04:17,336
Well first we should
talk a little bit


103
00:04:17,375 --> 00:04:19,276
about what is the standard
in the industry today.


104
00:04:20,146 --> 00:04:24,586
So standard RGB, or sRGB is the
most widely used color space


105
00:04:24,586 --> 00:04:25,346
in computing today.


106
00:04:25,916 --> 00:04:28,206
It's based on the
BT.709 standard.


107
00:04:28,206 --> 00:04:30,096
We use an approximated
gamma of 2.2.


108
00:04:30,516 --> 00:04:32,056
Typical lighting conditions.


109
00:04:32,056 --> 00:04:33,456
Which in this case is D65.


110
00:04:34,226 --> 00:04:36,476
And it's the default
color space for iOS.


111
00:04:36,756 --> 00:04:38,236
And it's actually the
default color space


112
00:04:38,236 --> 00:04:39,286
for a lot of platforms.


113
00:04:39,666 --> 00:04:41,706
Which is very convenient,
because there are some platforms


114
00:04:41,706 --> 00:04:42,826
out there that are
color managed,


115
00:04:42,946 --> 00:04:43,826
and there are some that are not.


116
00:04:44,226 --> 00:04:45,756
And when a lot of
the content that is


117
00:04:45,756 --> 00:04:49,016
in existence today is sRGB,
you can make some assumptions


118
00:04:49,126 --> 00:04:50,286
on your incoming content


119
00:04:50,286 --> 00:04:52,396
and have it reproduce
faithfully on the other end.


120
00:04:52,776 --> 00:04:54,336
But that's not always
going to be case.


121
00:04:54,726 --> 00:04:57,496
sRGB does a good job of
describing colors that we work


122
00:04:57,496 --> 00:04:59,926
with on a daily basis, and our
systems have been really good


123
00:04:59,926 --> 00:05:01,236
at displaying those
colors to us.


124
00:05:01,746 --> 00:05:05,486
But really there's a lot of
colors that don't fit into sRGB.


125
00:05:06,316 --> 00:05:09,486
A lot of textiles are
designed using inks and dyes


126
00:05:09,886 --> 00:05:11,826
that have lots of colors
that are outside of sRGB,


127
00:05:11,826 --> 00:05:14,546
mainly because these
colors really catch our eye.


128
00:05:14,546 --> 00:05:16,026
They're really vivid
and impressive.


129
00:05:16,656 --> 00:05:18,296
If you're watching
soccer for example,


130
00:05:18,406 --> 00:05:21,026
a lot of the uniforms are
actually outside of sRGB,


131
00:05:21,026 --> 00:05:22,766
because they're striking,
they get our attention.


132
00:05:23,056 --> 00:05:24,676
Whether you're watching
your kid's soccer game,


133
00:05:24,676 --> 00:05:26,326
or you're watching the
Eurocup, you're going


134
00:05:26,326 --> 00:05:27,886
to see a lot these
jerseys with colors


135
00:05:27,886 --> 00:05:29,746
that are actually not
describable within sRGB.


136
00:05:29,746 --> 00:05:33,896
A lot of products are
also designed with colors


137
00:05:33,896 --> 00:05:34,766
that are outside of sRGB.


138
00:05:34,766 --> 00:05:37,176
And these are products that we
interact with on a daily basis.


139
00:05:38,166 --> 00:05:40,916
But really the most compelling
examples are in nature itself.


140
00:05:41,366 --> 00:05:44,866
Sunsets, autumn leaves,
tropical waters.


141
00:05:45,106 --> 00:05:47,246
These are all things in
nature that have colors


142
00:05:47,246 --> 00:05:48,176
that are outside of sRGB.


143
00:05:48,176 --> 00:05:50,786
And we actually want
to show those.


144
00:05:51,056 --> 00:05:53,896
And the nice thing is you
probably have a lot of images


145
00:05:53,896 --> 00:05:55,006
that you've taken
on your camera,


146
00:05:55,086 --> 00:05:56,516
especially if you're
capturing in RAW,


147
00:05:56,856 --> 00:05:58,616
that actually contain a
lot of this color data,


148
00:05:58,616 --> 00:06:00,316
but you're not seeing
it on your display


149
00:06:00,316 --> 00:06:01,786
if your display is only sRGB.


150
00:06:02,116 --> 00:06:06,016
So what do we do about this?


151
00:06:06,236 --> 00:06:08,826
Well, last year as I mentioned,
we introduced products


152
00:06:08,826 --> 00:06:09,886
with a new color space.


153
00:06:09,886 --> 00:06:12,246
And that color space
is Display P3.


154
00:06:12,456 --> 00:06:15,356
So in our iMacs, and in
our new iPad Pro 9.7,


155
00:06:15,716 --> 00:06:16,826
we use this color space.


156
00:06:16,826 --> 00:06:19,176
And it's based on the
SMPTE standard of DCI-P3.


157
00:06:19,176 --> 00:06:21,006
But it's a little bit different.


158
00:06:21,566 --> 00:06:25,006
DCI-P3 is a color space that is
defined for digital projection.


159
00:06:25,006 --> 00:06:27,116
And it works really great
for those viewing conditions.


160
00:06:27,616 --> 00:06:30,016
But our viewing conditions
are a little bit different.


161
00:06:30,126 --> 00:06:33,696
And sRGB is really great at
defining a standard that works


162
00:06:33,696 --> 00:06:34,856
with our viewing conditions.


163
00:06:34,856 --> 00:06:37,806
So we adopted the same gamma,
and typical lighting conditions


164
00:06:37,806 --> 00:06:39,516
for our white point, as sRGB.


165
00:06:39,516 --> 00:06:44,536
These are the key differences
between Display P3 and DCI-P3.


166
00:06:44,886 --> 00:06:47,656
In order to understand what
colors are actually outside


167
00:06:47,656 --> 00:06:50,166
of sRGB, but can be
described in Display P3,


168
00:06:50,166 --> 00:06:52,556
I'll try to show it
to you in action.


169
00:06:54,136 --> 00:06:56,136
So here's an image
from my photo library,


170
00:06:56,466 --> 00:06:59,686
and I exported it using photos
in a Display P3 color space.


171
00:07:00,106 --> 00:07:01,376
This is a really
beautiful image,


172
00:07:01,696 --> 00:07:04,186
and even though we're viewing
it on an sRGB projector today,


173
00:07:04,186 --> 00:07:06,706
or if you're viewing the video,
you're viewing it in sRGB today.


174
00:07:06,946 --> 00:07:08,486
This image still looks
really, really great.


175
00:07:08,486 --> 00:07:10,436
But there's a lot of
things in this image


176
00:07:10,436 --> 00:07:13,966
that you might not notice right
away, but there's actually a lot


177
00:07:13,966 --> 00:07:16,726
of colors that aren't
actually describable in sRGB.


178
00:07:16,726 --> 00:07:19,806
These are colors that are
outside of the sRGB color gamut.


179
00:07:20,156 --> 00:07:22,946
And in this case what you
end up with is posterization


180
00:07:22,946 --> 00:07:25,336
in those regions, so
those colors are flattened


181
00:07:25,336 --> 00:07:26,786
on the edge of the sRGB gamut.


182
00:07:28,016 --> 00:07:29,036
So how do we fix this?


183
00:07:29,036 --> 00:07:32,906
Well, we're moving more
professional workflows


184
00:07:33,026 --> 00:07:34,126
to our mobile platforms.


185
00:07:34,936 --> 00:07:36,206
And in order to enable that,


186
00:07:36,326 --> 00:07:38,896
it's not just putting a wide
gamut display into your system.


187
00:07:38,896 --> 00:07:41,726
There's a number of other things
that need to come along with it.


188
00:07:41,996 --> 00:07:43,356
One of those things is we need


189
00:07:43,356 --> 00:07:44,826
to upgrade our factory
calibration.


190
00:07:45,186 --> 00:07:49,016
So, now all of our products have
individually calibrated displays


191
00:07:49,216 --> 00:07:50,866
that from device to
device you can count


192
00:07:50,866 --> 00:07:52,706
on those colors being
accurate and consistent.


193
00:07:53,086 --> 00:07:54,906
And then finally, we had


194
00:07:54,906 --> 00:07:58,116
to build full system-wide
color management into iOS.


195
00:07:58,116 --> 00:07:59,936
And that's exactly
what we've done.


196
00:08:00,486 --> 00:08:04,886
But we can't just build the
same color management system


197
00:08:05,126 --> 00:08:06,836
with the same approach
as we did on the Mac.


198
00:08:07,526 --> 00:08:10,686
There's different considerations
and different restrictions


199
00:08:10,686 --> 00:08:11,936
when working with
a mobile platform.


200
00:08:12,556 --> 00:08:15,386
One of those considerations
are the countless applications


201
00:08:15,386 --> 00:08:17,386
that already exist
in the iOS ecosystem.


202
00:08:17,986 --> 00:08:21,886
These are applications that are
built in sRGB, tuned for color


203
00:08:21,886 --> 00:08:23,356
and performance in sRGB.


204
00:08:23,926 --> 00:08:26,706
So how do we make sure that
those applications can still run


205
00:08:26,706 --> 00:08:28,466
on our platforms that
are now color managed,


206
00:08:28,706 --> 00:08:30,396
without any impact
to performance,


207
00:08:30,616 --> 00:08:32,145
without any impact
to your colors.


208
00:08:32,746 --> 00:08:35,246
And what we did is we
built on top of sRGB.


209
00:08:36,326 --> 00:08:39,706
So we've introduced an
extended range sRGB color space.


210
00:08:40,086 --> 00:08:42,686
This is our working space
for working with wide color.


211
00:08:43,466 --> 00:08:45,696
We use the same sRGB primaries.


212
00:08:47,216 --> 00:08:48,846
We use the same gamma 2.2.


213
00:08:49,256 --> 00:08:50,396
The same white point.


214
00:08:51,176 --> 00:08:53,296
But, the interesting
difference here is


215
00:08:53,296 --> 00:08:55,666
that we actually allow values
that are greater than one


216
00:08:55,806 --> 00:08:58,156
and less than zero,
which allows us


217
00:08:58,156 --> 00:09:00,826
to not only keep the same
performance and look of all


218
00:09:00,826 --> 00:09:04,406
of your applications that are
built in sRGB, but using values


219
00:09:04,406 --> 00:09:05,916
that are negative and
values that are greater


220
00:09:05,916 --> 00:09:09,116
than one allow us to express any
color in the visual spectrum,


221
00:09:09,286 --> 00:09:11,516
while still keeping our
anchor points in sRGB.


222
00:09:12,196 --> 00:09:15,586
The best way to describe
this is with a demonstration.


223
00:09:16,766 --> 00:09:19,796
So let's say I want to
take the most saturated red


224
00:09:19,796 --> 00:09:20,436
in Display P3.


225
00:09:20,436 --> 00:09:22,466
So that would be 1, 0, 0.


226
00:09:23,146 --> 00:09:25,856
Now, if want to express
that in extended range sRGB,


227
00:09:25,856 --> 00:09:28,496
it would look a little
bit like this.


228
00:09:29,076 --> 00:09:31,066
So in the red channel,
I actually have a value


229
00:09:31,066 --> 00:09:32,056
that is greater than one.


230
00:09:32,656 --> 00:09:34,306
And in the green
and blue channels,


231
00:09:34,436 --> 00:09:36,166
I'm actually using
negative values.


232
00:09:36,166 --> 00:09:38,106
So I'm subtracting
green and blue,


233
00:09:38,316 --> 00:09:40,036
and adding oversaturated red.


234
00:09:40,036 --> 00:09:43,286
And what that allows me to do
is get a color that is outside


235
00:09:43,286 --> 00:09:47,736
of the sRGB gamut, while using
that same sRGB anchor points


236
00:09:48,116 --> 00:09:49,926
in extended range sRGB.


237
00:09:51,556 --> 00:09:54,186
The interesting thing is if
you're using a pixel format


238
00:09:54,366 --> 00:09:56,756
that allows you to go very
negative, and very positive,


239
00:09:57,126 --> 00:09:59,386
this approach allows
you to express any color


240
00:09:59,386 --> 00:09:59,976
in the visual spectrum.


241
00:10:00,056 --> 00:10:01,566
So this is scalable.


242
00:10:02,036 --> 00:10:05,906
Speaking of pixel formats,


243
00:10:07,336 --> 00:10:11,506
sRGB is largely standardized
in 8 bits.


244
00:10:11,506 --> 00:10:16,086
So 8 bits is largely enough
to describe colors in sRGB,


245
00:10:16,856 --> 00:10:17,896
not perfect, but great.


246
00:10:18,386 --> 00:10:20,846
Now an easy example to
describe the difference


247
00:10:20,846 --> 00:10:22,996
between the precision that
we would want for sRGB,


248
00:10:22,996 --> 00:10:24,856
and the precision
that we would want


249
00:10:24,926 --> 00:10:27,906
for wider gamut, is
with this example.


250
00:10:27,956 --> 00:10:30,646
So say I wanted to build
a staircase in my home


251
00:10:30,786 --> 00:10:32,076
from the basement
to my first floor.


252
00:10:32,456 --> 00:10:35,116
I would use, say 8 stairs, I'd
probably use 12, but let's say


253
00:10:35,116 --> 00:10:36,306
for simplicity I would use 8.


254
00:10:37,516 --> 00:10:38,946
This is the appropriate
height for me.


255
00:10:39,346 --> 00:10:42,056
Now, if I wanted to extend that
staircase up to my second floor,


256
00:10:42,566 --> 00:10:44,406
I wouldn't just use the
same number of stairs.


257
00:10:44,586 --> 00:10:46,496
And when we're using
digital encoding for color,


258
00:10:46,996 --> 00:10:49,566
it makes sense that if you're
trying to express more colors,


259
00:10:49,866 --> 00:10:51,556
you would want to
us more precision.


260
00:10:57,056 --> 00:11:00,106
So if we're talking about using
colors that are outside of sRGB,


261
00:11:00,446 --> 00:11:03,606
really our recommendation is to
use 16 bits per color channel.


262
00:11:04,186 --> 00:11:07,876
Now, before I hand
it over to Patrick,


263
00:11:08,006 --> 00:11:09,746
I wanted to end with
one more point.


264
00:11:09,746 --> 00:11:12,726
So, we've gone through our
entire system and upgraded all


265
00:11:12,726 --> 00:11:15,186
of our frameworks and
tools to be color savvy.


266
00:11:15,626 --> 00:11:17,236
But if you're building
your application


267
00:11:17,236 --> 00:11:18,436
with open source tools,


268
00:11:18,776 --> 00:11:21,406
or you've built your own
image processing pipeline


269
00:11:21,406 --> 00:11:24,456
from scratch, you need to
take some action to make sure


270
00:11:24,456 --> 00:11:27,376
that the tools that you've
used are color savvy.


271
00:11:28,036 --> 00:11:29,676
Otherwise, we've
got you covered.


272
00:11:30,136 --> 00:11:32,316
And for more on that, I'll
hand it over to Patrick.


273
00:11:33,516 --> 00:11:36,546
[ Applause ]


274
00:11:37,046 --> 00:11:37,556
>> Thank you Justin.


275
00:11:38,866 --> 00:11:39,806
Hi. I'm Patrick Heynen.


276
00:11:39,806 --> 00:11:42,156
I'm a Senior Engineering Manager
in the Cocoa Frameworks Group.


277
00:11:42,716 --> 00:11:45,716
And I'd like to ask where
does wide color come from?


278
00:11:45,906 --> 00:11:48,066
Well the answer is it turns
out, it's not just shirt.


279
00:11:48,536 --> 00:11:50,326
No, it comes from you.


280
00:11:51,336 --> 00:11:53,956
Namely, it comes from
apps and their content,


281
00:11:54,446 --> 00:11:55,756
and the user experiences


282
00:11:55,756 --> 00:11:57,236
that you provide in
your applications.


283
00:11:58,386 --> 00:12:01,596
So what kind of content types
are amenable for wide color?


284
00:12:02,566 --> 00:12:05,156
Well the first one is the one
you're probably most familiar


285
00:12:05,156 --> 00:12:06,766
with and that's static
image resources.


286
00:12:06,846 --> 00:12:09,406
These are the sort
of the PNG, or JPEG,


287
00:12:09,406 --> 00:12:11,906
or individual graphic files
that you may have bundled


288
00:12:11,906 --> 00:12:13,596
into your application
and shipped along


289
00:12:13,656 --> 00:12:16,056
with your application
bundle to your customers.


290
00:12:17,626 --> 00:12:19,936
The next category is document


291
00:12:19,936 --> 00:12:21,576
and network-based
image resources.


292
00:12:21,576 --> 00:12:24,136
These are individual
image content


293
00:12:24,456 --> 00:12:27,376
that you may either download
off of a network service,


294
00:12:27,666 --> 00:12:31,836
or store in your document data.


295
00:12:32,016 --> 00:12:34,376
There's also further
categories, like advanced media,


296
00:12:34,376 --> 00:12:37,186
which refers to things like
live photos, or content acquire


297
00:12:37,186 --> 00:12:40,566
from the build-in
iPhone cameras.


298
00:12:40,896 --> 00:12:43,426
I'm not going to go
into too much detail


299
00:12:43,426 --> 00:12:47,636
about wide color implications
for those kinds of types,


300
00:12:47,636 --> 00:12:49,966
but I refer you to the
Advances in iOS Photography


301
00:12:50,246 --> 00:12:53,466
and Editing Live Photos
and RAW on iOS Sessions


302
00:12:53,466 --> 00:12:54,476
for more details about that.


303
00:12:55,406 --> 00:12:58,566
And lastly, there's also
the concept of GPU textures.


304
00:12:58,566 --> 00:13:00,716
If your program -- if your
application is working


305
00:13:00,716 --> 00:13:04,266
at the GPU level, like your game
engine, or your advance piece


306
00:13:04,266 --> 00:13:07,416
of graphic software, and you're
sending color information


307
00:13:07,416 --> 00:13:09,366
in the form of either
textures or shader values


308
00:13:09,626 --> 00:13:12,156
to the GPU directly, there
are other considerations


309
00:13:12,156 --> 00:13:13,806
as well for wide content.


310
00:13:14,266 --> 00:13:16,696
I'm not going to go into much
detail about those either,


311
00:13:16,696 --> 00:13:19,946
but I refer you to my colleague,
Dan Omachi's excellent treatment


312
00:13:19,946 --> 00:13:23,296
of this in What's
New in Metal Part 2.


313
00:13:23,536 --> 00:13:26,046
Okay. So let's frame
the color problem.


314
00:13:26,756 --> 00:13:28,646
Justin gave a great
explanation earlier.


315
00:13:28,646 --> 00:13:31,016
But how does it apply to apps?


316
00:13:31,536 --> 00:13:37,286
Well app content can come from a
broad range of sources and come


317
00:13:37,286 --> 00:13:38,706
in a broad range
of color richness,


318
00:13:38,706 --> 00:13:39,926
all the way from grayscale,


319
00:13:39,926 --> 00:13:44,616
all the way through to even
16-bit wide color gamut content.


320
00:13:45,686 --> 00:13:49,756
At the same time, devices and
displays come in a broad range


321
00:13:49,756 --> 00:13:50,946
of color capabilities.


322
00:13:51,116 --> 00:13:54,726
For example, in iPhone
5 it was only capable


323
00:13:54,726 --> 00:13:58,246
of representing sRGB, all the
way through the latest iPad Pro


324
00:13:58,246 --> 00:14:01,146
which does a great job
with full P3 colors


325
00:14:01,146 --> 00:14:02,736
and extended range sRGB.


326
00:14:03,266 --> 00:14:05,036
So, how do you bridge
the difference?


327
00:14:06,096 --> 00:14:08,586
Well, we're going to
solve this color problem.


328
00:14:09,206 --> 00:14:12,346
And the backbone really
is color management.


329
00:14:14,676 --> 00:14:16,106
So, what is color management?


330
00:14:17,216 --> 00:14:20,066
The job of color
management is to ensure


331
00:14:20,676 --> 00:14:23,326
that an image looks the
same on any output device,


332
00:14:23,656 --> 00:14:25,896
no matter what color
space it is encoded in


333
00:14:25,896 --> 00:14:27,066
or how it was originally
created.


334
00:14:27,886 --> 00:14:28,726
That's pretty much it.


335
00:14:29,716 --> 00:14:33,526
But how does it work?


336
00:14:33,736 --> 00:14:36,666
Color management
starts with every image


337
00:14:36,666 --> 00:14:38,976
or content type having an
associated color space,


338
00:14:39,166 --> 00:14:40,816
sometimes referred
to as color profile.


339
00:14:42,416 --> 00:14:45,376
This informs the system what
the colors actually mean.


340
00:14:45,516 --> 00:14:49,136
And then the color matching
process algorithmically maps


341
00:14:49,136 --> 00:14:52,016
those colors to the
characteristics and output space


342
00:14:52,076 --> 00:14:53,486
of the device that
you're rendering to.


343
00:14:54,036 --> 00:14:57,646
Of course, this is a
computational process,


344
00:14:57,646 --> 00:14:58,736
and it is not for free.


345
00:14:58,736 --> 00:15:00,686
In fact, every single
pixel needs to be touched


346
00:15:00,686 --> 00:15:03,076
and converted and matched.


347
00:15:03,256 --> 00:15:05,636
Also, it's important to
note this is a potentially


348
00:15:05,636 --> 00:15:06,686
lossy operation.


349
00:15:06,916 --> 00:15:09,536
Especially if you're going
from a wider color gamut source


350
00:15:09,906 --> 00:15:13,076
down to a narrower one,
say a 16-bit P3 content


351
00:15:13,076 --> 00:15:16,156
down to an sRGB 8-bit,
there's going to be some loss


352
00:15:16,156 --> 00:15:18,456
of color fidelity
in that scenario.


353
00:15:18,456 --> 00:15:20,026
So that's something
to be aware of.


354
00:15:20,736 --> 00:15:23,996
So these are important
aspects, but there's good news.


355
00:15:24,576 --> 00:15:28,336
The first good news is that
the color matching operations,


356
00:15:28,406 --> 00:15:30,566
the way they're algorithmically
defined, I'm not going to go


357
00:15:30,566 --> 00:15:32,026
into the details of the
color science behind them.


358
00:15:32,026 --> 00:15:33,986
But it turns out
that computationally,


359
00:15:33,986 --> 00:15:35,516
they're very easily
hardware accelerated,


360
00:15:35,876 --> 00:15:37,916
either by the CPU or by GPU.


361
00:15:39,146 --> 00:15:41,016
Which leads to the
next good news which is


362
00:15:41,276 --> 00:15:42,896
that we've built
this functionality


363
00:15:42,896 --> 00:15:46,366
into the system itself, so that
it all works automatically via


364
00:15:46,366 --> 00:15:49,636
the Quartz 2D, ColorSync on
the Mac, and Core Animation.


365
00:15:50,216 --> 00:15:53,546
In fact, all you really
need to make sure of is


366
00:15:53,546 --> 00:15:57,906
that your content is tagged
properly, and in that case,


367
00:15:57,946 --> 00:16:00,266
there's no code required to
display your image correctly,


368
00:16:00,326 --> 00:16:03,326
and have the colors
appear correct.


369
00:16:03,466 --> 00:16:04,876
So, platform color management.


370
00:16:05,416 --> 00:16:08,986
Well, macOS, as Justin eluded


371
00:16:08,986 --> 00:16:10,856
to has been color managed
since its inception.


372
00:16:10,926 --> 00:16:12,966
Some might even say since
before its inception,


373
00:16:12,966 --> 00:16:15,266
when it was previously
known as macOS,


374
00:16:15,266 --> 00:16:16,536
during the ColorSync times.


375
00:16:17,316 --> 00:16:18,236
So there's nothing new there,


376
00:16:18,236 --> 00:16:20,116
but there is something
new on the iOS fronts.


377
00:16:20,116 --> 00:16:22,446
We have, since iOS 9.3,


378
00:16:22,446 --> 00:16:24,296
we now have automatic
color management support


379
00:16:24,446 --> 00:16:25,216
on most devices.


380
00:16:25,636 --> 00:16:28,946
So that's color management,
the backbone


381
00:16:28,946 --> 00:16:30,396
of solving the color problem.


382
00:16:32,316 --> 00:16:36,376
But now let's talk about how
some design consideration


383
00:16:36,376 --> 00:16:39,586
and how the toolchain and the
platform services have been


384
00:16:39,586 --> 00:16:42,736
enhanced to accommodate
getting wide content


385
00:16:42,736 --> 00:16:43,776
into your applications.


386
00:16:44,456 --> 00:16:47,126
First, as always it
starts with design.


387
00:16:48,656 --> 00:16:50,856
So, what is important to think


388
00:16:50,856 --> 00:16:53,116
about when you're
approaching the wide color


389
00:16:53,116 --> 00:16:54,206
from a design perspective?


390
00:16:56,316 --> 00:17:00,336
Well, the first thing I would
say is that it's important


391
00:17:00,336 --> 00:17:03,116
to use wide gamut content
where it makes sense.


392
00:17:04,036 --> 00:17:06,596
It doesn't mean everywhere,
remember most of the colors


393
00:17:06,596 --> 00:17:09,726
that we interact with on a daily
basis, are in fact contained


394
00:17:09,726 --> 00:17:11,165
within that nice sRGB triangle.


395
00:17:11,165 --> 00:17:12,526
That's where the bulk
of the colors are.


396
00:17:13,526 --> 00:17:16,776
There are however, these nice,
new vivid saturated colors


397
00:17:17,106 --> 00:17:20,306
that may make sense for
your application to use.


398
00:17:20,715 --> 00:17:22,715
So really it's important to
think about wide gamut content


399
00:17:22,715 --> 00:17:24,205
as being a tool that you can use


400
00:17:24,455 --> 00:17:27,046
where vivid colors really
enhance the user experience


401
00:17:27,046 --> 00:17:28,726
and add some value
to your application.


402
00:17:30,046 --> 00:17:33,716
There is no need to go and
update all of your content


403
00:17:33,966 --> 00:17:35,756
and immediately upgrade
it to P3.


404
00:17:35,756 --> 00:17:37,626
This is not that kind
of technology shift.


405
00:17:38,086 --> 00:17:40,846
This is merely a new
creative tool that you use


406
00:17:41,266 --> 00:17:43,136
where you want it,
when you want it.


407
00:17:43,436 --> 00:17:46,076
And the good news is we've
enhanced the toolchain support


408
00:17:46,356 --> 00:17:49,636
to make this gradual opt-in
of wide gamut possible.


409
00:17:51,636 --> 00:17:54,556
So let's say you do want
to upgrade some content


410
00:17:54,556 --> 00:17:56,216
to wide color, what are
some considerations?


411
00:17:56,586 --> 00:17:58,266
It's really important
to be careful


412
00:17:58,656 --> 00:18:02,616
when you upgrade a
design file to wide color.


413
00:18:03,226 --> 00:18:07,406
A common pitfall is to
just assign a new profile.


414
00:18:07,586 --> 00:18:10,876
It starts out as sRB, assigning
a new wider color profile.


415
00:18:11,236 --> 00:18:13,916
This is a mistake, because this
will just remap the existing


416
00:18:13,916 --> 00:18:15,476
color information
into new color space.


417
00:18:15,736 --> 00:18:18,206
It's a pretty effect, but it's
probably not what you want.


418
00:18:18,206 --> 00:18:21,066
Because it will just stretch
all the colors out to be vivid


419
00:18:21,066 --> 00:18:24,456
and the appearance of the design
file will be inevitably altered.


420
00:18:25,026 --> 00:18:29,736
Instead, it's important to
use convert to P3 instead.


421
00:18:30,686 --> 00:18:34,086
This will actually do a
color match operation,


422
00:18:34,086 --> 00:18:36,516
your resulting design should
not change its appearance,


423
00:18:36,786 --> 00:18:39,376
but it will be prepared
to go and have some


424
00:18:39,376 --> 00:18:41,386
of its content boosted
up into those nice,


425
00:18:41,386 --> 00:18:43,406
vivid saturated P3 colors.


426
00:18:45,256 --> 00:18:48,746
When you're working on wide
gamut designs, it's important


427
00:18:48,746 --> 00:18:50,316
to use, and we recommend
strongly


428
00:18:50,316 --> 00:18:52,366
that you use the
Display P3 color profile


429
00:18:52,626 --> 00:18:54,336
as your working document
profile.


430
00:18:55,956 --> 00:18:58,606
Also to maintain
maximum color precision


431
00:18:58,606 --> 00:19:00,966
and highest quality
it's a good idea to work


432
00:19:00,966 --> 00:19:02,896
in 16-bit per channel
color mode.


433
00:19:04,156 --> 00:19:08,856
And of course, it's nice to
be able to see your designs.


434
00:19:09,186 --> 00:19:11,606
So, if you are going
to be working


435
00:19:11,706 --> 00:19:14,186
with wide color it's good
to do that design work


436
00:19:14,186 --> 00:19:16,596
on a system capable of
rendering wide gamut color


437
00:19:16,596 --> 00:19:20,116
such as the late 2015 iMac,
or other capable hardware.


438
00:19:20,646 --> 00:19:24,606
When it comes time
for production,


439
00:19:24,606 --> 00:19:27,936
for exporting delivering
assets, it's important


440
00:19:27,936 --> 00:19:32,866
to use 16-bit PNG files with an
embedded Display P3 ICC profile.


441
00:19:33,216 --> 00:19:36,716
This is sort of the gold
standard of content interchange


442
00:19:36,716 --> 00:19:38,356
for wide color content.


443
00:19:40,336 --> 00:19:41,536
Now, a brief note.


444
00:19:42,426 --> 00:19:45,696
There are some very popular
content production workflows


445
00:19:45,696 --> 00:19:46,156
out there.


446
00:19:46,156 --> 00:19:47,516
They come under different names.


447
00:19:47,516 --> 00:19:48,456
I'm going to talk specifically


448
00:19:48,456 --> 00:19:50,536
about the Adobe Photoshop
Workflow.


449
00:19:50,646 --> 00:19:53,886
They come under the names of
Save for Web and Export Assets.


450
00:19:54,176 --> 00:19:56,516
Many of these workflows
have not made the transition


451
00:19:56,516 --> 00:19:59,766
to wide color yet, and
they are not compatible


452
00:19:59,766 --> 00:20:01,876
with exporting 16-bit
P3 content.


453
00:20:02,176 --> 00:20:04,206
So, stay away from them for now.


454
00:20:04,676 --> 00:20:08,656
And instead use the workaround
of using save as PNG format


455
00:20:09,016 --> 00:20:14,846
with 16-bit and embedded
display profile as a workaround.


456
00:20:14,846 --> 00:20:16,336
Okay, so that's the
design process


457
00:20:16,336 --> 00:20:17,796
and how wide color impacts that.


458
00:20:18,706 --> 00:20:21,966
Now, let's talk about tools
and how they can be used


459
00:20:22,106 --> 00:20:24,566
up to incorporate the
content you've produced


460
00:20:24,566 --> 00:20:25,816
out of the design process.


461
00:20:26,186 --> 00:20:27,706
Well the first thing
I'm going to talk about


462
00:20:27,706 --> 00:20:28,746
and really the epicenter


463
00:20:28,746 --> 00:20:32,036
of the content tool story
is Xcode asset catalogs.


464
00:20:32,486 --> 00:20:33,986
Now you may be familiar
with this.


465
00:20:34,286 --> 00:20:37,526
This is the general tool in
Xcode to allow you to organize


466
00:20:37,526 --> 00:20:40,066
and catalog your image
resources, mark it up


467
00:20:40,066 --> 00:20:40,936
and provide metadata,


468
00:20:40,936 --> 00:20:43,616
and deliver it inside
your applications.


469
00:20:44,126 --> 00:20:47,506
What do asset catalogs
do for you?


470
00:20:47,506 --> 00:20:49,426
Well, they're the best
deployment vehicle


471
00:20:49,426 --> 00:20:50,446
for static assets.


472
00:20:51,786 --> 00:20:56,216
We automatically color
correct your source content


473
00:20:56,216 --> 00:20:58,466
and optimize it for the target
that you're building for.


474
00:20:58,706 --> 00:21:01,606
So even if, maybe your
designers are prefect


475
00:21:01,606 --> 00:21:03,796
and always can deliver their
content with the right profile


476
00:21:03,796 --> 00:21:06,936
and all the right information
in their deliverables,


477
00:21:06,936 --> 00:21:08,676
but that may not
always be the case.


478
00:21:08,996 --> 00:21:11,376
That's where this automatic
color correction comes in handy


479
00:21:11,376 --> 00:21:13,146
to make sure that we
match and normalize it all


480
00:21:13,146 --> 00:21:17,846
into the appropriate working
space for the target device.


481
00:21:17,976 --> 00:21:20,386
Also, we do automatic
pixel format optimization,


482
00:21:20,386 --> 00:21:21,976
making sure that the
right bit depth ends


483
00:21:21,976 --> 00:21:22,946
up in the right device.


484
00:21:23,466 --> 00:21:27,706
And, last, but definitely
not least,


485
00:21:27,706 --> 00:21:29,916
asset catalogs are the
gateway to app slicing


486
00:21:30,366 --> 00:21:32,316
which is an important component
of the thinning feature


487
00:21:32,316 --> 00:21:35,186
that assures that only the
content that's relevant gets


488
00:21:35,186 --> 00:21:37,436
delivered to your customers on
a particular device and none


489
00:21:37,436 --> 00:21:40,226
of the content that doesn't.


490
00:21:40,296 --> 00:21:43,616
So, what have we done in asset
catalogs to make it easier


491
00:21:43,616 --> 00:21:44,996
to work with wide color content?


492
00:21:46,366 --> 00:21:49,706
Well the first important
enhancement is we now support 16


493
00:21:49,706 --> 00:21:53,086
bit source content and
provide a clean end-to-end path


494
00:21:53,476 --> 00:21:56,446
for 16 bit image resources.


495
00:21:56,446 --> 00:21:58,496
This, we store it
in 16 bit half load,


496
00:21:58,856 --> 00:22:02,196
but it is available
for you in Xcode 8.


497
00:22:03,126 --> 00:22:05,716
The next important thing
we've added is the ability


498
00:22:05,716 --> 00:22:08,186
to catalog a display gamut.


499
00:22:09,386 --> 00:22:10,046
What does this mean?


500
00:22:10,046 --> 00:22:13,976
This means that you really
introduced a new option


501
00:22:13,976 --> 00:22:18,876
in the inspector to provide
and tailor optimized assets


502
00:22:18,876 --> 00:22:22,126
for either the sRGB
or Display P3,


503
00:22:22,126 --> 00:22:25,136
display gamuts matching devices
with those characteristics.


504
00:22:25,696 --> 00:22:28,966
Okay so that's the feature.


505
00:22:28,966 --> 00:22:31,516
That's what Xcode has to
offer for organizing assets.


506
00:22:31,516 --> 00:22:32,276
But how do you use it?


507
00:22:32,276 --> 00:22:33,416
How do you think about using it?


508
00:22:33,486 --> 00:22:35,566
Well, there's really
three easy choices here.


509
00:22:36,106 --> 00:22:40,926
Choice number one, do nothing.


510
00:22:42,316 --> 00:22:44,616
This may seem radical, but it is


511
00:22:44,616 --> 00:22:47,836
in fact a perfectly
valid thing to do.


512
00:22:48,076 --> 00:22:50,396
Because if you make no
changes to your asset catalog,


513
00:22:50,396 --> 00:22:52,256
you may not need any of
these new vivid colors,


514
00:22:52,256 --> 00:22:55,986
we will continue to render your
8 bit sRGB content faithfully


515
00:22:56,326 --> 00:22:57,246
on all devices.


516
00:22:57,656 --> 00:22:58,606
So nothing will change.


517
00:22:58,606 --> 00:23:00,466
You don't need to go
update everything just


518
00:23:00,466 --> 00:23:02,176
to make sure it works
on this new hardware.


519
00:23:02,246 --> 00:23:04,416
So this is a perfectly
valid option.


520
00:23:04,416 --> 00:23:08,306
Of course, this does mean
your app will not contain any


521
00:23:08,306 --> 00:23:09,026
wide colors.


522
00:23:09,876 --> 00:23:11,836
That's a perfectly
fine design choice.


523
00:23:12,256 --> 00:23:14,586
That's the outcome of
this deployment choice.


524
00:23:15,246 --> 00:23:17,126
So let's say you do want


525
00:23:17,126 --> 00:23:19,606
to use some wide color
in your application.


526
00:23:19,826 --> 00:23:20,986
Brings us to choice number two.


527
00:23:21,066 --> 00:23:24,446
Upgrade to P3.


528
00:23:24,736 --> 00:23:27,366
So, the way this
works is something we


529
00:23:27,366 --> 00:23:28,936
like to call Universal P3 Asset.


530
00:23:29,436 --> 00:23:33,916
So, all it involves is taking
a 16 bit Display P3 file


531
00:23:33,916 --> 00:23:34,956
that you may have gotten
from your designer,


532
00:23:34,956 --> 00:23:37,416
and just replace your existing
asset in the asset catalog


533
00:23:37,676 --> 00:23:39,186
with this upgraded asset.


534
00:23:40,776 --> 00:23:42,556
What happens at build
time is we're going


535
00:23:42,556 --> 00:23:45,266
to automatically generate
an sRGB derivative


536
00:23:45,816 --> 00:23:48,586
from that 16 bit
Universal Display P3 master.


537
00:23:48,786 --> 00:23:51,226
We're going to do a
high-quality color match,


538
00:23:51,296 --> 00:23:53,546
and a high quality
dither down to that 8 bit.


539
00:23:54,046 --> 00:23:56,886
And then of course at
thinning and content selection,


540
00:23:56,886 --> 00:23:59,546
we're make sure the right
content variant gets selected


541
00:23:59,546 --> 00:24:01,216
on the appropriate device.


542
00:24:03,096 --> 00:24:04,836
But let's say you're
not really happy


543
00:24:04,836 --> 00:24:07,536
with this automatic conversion
and you want full control.


544
00:24:08,266 --> 00:24:10,486
Well the good news is we
have that for you as well.


545
00:24:10,486 --> 00:24:13,116
And that's choice number
three, optimize assets.


546
00:24:13,646 --> 00:24:15,366
It's a very simple option.


547
00:24:15,366 --> 00:24:20,806
It's basically, you provide
a 16 bit Display P3 content


548
00:24:20,806 --> 00:24:22,976
and your original
8 bit sRGB content.


549
00:24:23,236 --> 00:24:25,876
We provide places for
you to organize both


550
00:24:25,876 --> 00:24:26,826
of those in the asset catalog.


551
00:24:27,146 --> 00:24:29,346
And they'll get built
into your app and selected


552
00:24:29,346 --> 00:24:30,206
and thinned appropriately.


553
00:24:31,356 --> 00:24:36,876
Okay, that's wide color
assets and asset catalogs.


554
00:24:38,206 --> 00:24:40,296
I'd like to now give
a demonstration


555
00:24:40,296 --> 00:24:45,386
of creating content.


556
00:24:45,386 --> 00:24:49,906
Okay, so let's say I've got
this beautiful hue wheel here.


557
00:24:56,496 --> 00:24:58,586
Let's say I have this
beautiful hue wheel here.


558
00:24:58,706 --> 00:24:59,236
There we go.


559
00:24:59,236 --> 00:25:00,026
That's much better.


560
00:25:00,746 --> 00:25:04,286
And I really decided this
really could in fact benefit


561
00:25:04,286 --> 00:25:06,026
from some more vivid
saturated colors.


562
00:25:06,526 --> 00:25:07,346
How is this done?


563
00:25:07,656 --> 00:25:08,666
Let's take a look at this here.


564
00:25:08,666 --> 00:25:10,766
This is just a simple gradient
here, a radial gradient.


565
00:25:10,766 --> 00:25:13,236
And I just want to call
out here this point


566
00:25:13,236 --> 00:25:16,226
in the gradient is a
pure saturated green.


567
00:25:17,426 --> 00:25:18,706
Okay, that's what
I'm starting with.


568
00:25:20,316 --> 00:25:22,196
So what do I do to upgrade it?


569
00:25:22,196 --> 00:25:24,266
Well the first thing
I'm going to do


570
00:25:24,686 --> 00:25:28,026
because I'm an organized type,
is I'm going to create a copy


571
00:25:28,026 --> 00:25:30,246
of this and not just
destroy the existing asset,


572
00:25:30,246 --> 00:25:34,576
I'm going to name it
something new here.


573
00:25:34,576 --> 00:25:36,706
And, okay now I'm ready to work.


574
00:25:37,326 --> 00:25:39,736
So the first thing I'm going to
do is I'm going to update this


575
00:25:39,736 --> 00:25:41,646
to 16 bits per channel.


576
00:25:42,736 --> 00:25:44,076
Now, we're ready
to work in 16 bit.


577
00:25:44,326 --> 00:25:47,776
And now the all-important
convert to profile.


578
00:25:49,126 --> 00:25:51,806
And what I'm going to do
is I'm going to change this


579
00:25:51,806 --> 00:25:54,416
to the Display P3 color profile.


580
00:25:56,366 --> 00:25:58,216
Okay, now we're ready to go.


581
00:25:58,596 --> 00:26:01,066
In fact, I can confirm with
document profile down here,


582
00:26:01,446 --> 00:26:03,536
Display P3, 16 bits
per component.


583
00:26:03,536 --> 00:26:04,106
I'm good to go.


584
00:26:04,596 --> 00:26:05,526
Okay, so now let's take a look


585
00:26:05,526 --> 00:26:06,626
at what happened
to that gradient.


586
00:26:06,716 --> 00:26:09,576
And look at our favorite
green here.


587
00:26:10,886 --> 00:26:12,096
Okay, so that's interesting
right?


588
00:26:12,536 --> 00:26:13,856
That green it didn't change.


589
00:26:13,856 --> 00:26:16,546
Notice that the hue wheel didn't
change its appearance at all.


590
00:26:16,636 --> 00:26:18,366
That was actually the
intended goal of converting,


591
00:26:18,466 --> 00:26:19,186
as opposed to assigning.


592
00:26:20,056 --> 00:26:21,846
But I'm left with
the same green now,


593
00:26:21,846 --> 00:26:23,356
being only 70 percent saturated.


594
00:26:23,356 --> 00:26:26,026
Well this really indicates just
how much head room there really


595
00:26:26,026 --> 00:26:29,216
is to punch out into
that wider gamut


596
00:26:29,216 --> 00:26:31,156
and deploy a more purer green.


597
00:26:31,736 --> 00:26:34,426
So, well let's say I want to
do that, but I don't want to be


598
00:26:34,426 --> 00:26:37,226
on stage all day, I'm just going
to reapply the gradient preset.


599
00:26:37,606 --> 00:26:41,166
Now everything should be
back to what it was before,


600
00:26:41,166 --> 00:26:43,326
100 percent saturated, but now


601
00:26:43,756 --> 00:26:47,256
in that pure P3 wide
color space.


602
00:26:47,916 --> 00:26:48,496
So there we are.


603
00:26:48,496 --> 00:26:52,726
Now I have my beautiful asset,
I'm going to go ahead and save.


604
00:26:52,936 --> 00:26:56,366
And of course this is just a
design file, I can't use it


605
00:26:56,366 --> 00:26:58,756
in my app until I save it.


606
00:26:58,756 --> 00:26:59,756
So I'm going to do that.


607
00:26:59,826 --> 00:27:01,866
I'm going to save it as, whoops
not as a [inaudible] but as PNG.


608
00:27:01,866 --> 00:27:05,166
I'm going to make sure to
embed the color profile.


609
00:27:06,776 --> 00:27:07,806
And save it.


610
00:27:08,876 --> 00:27:10,056
And viola I'm done.


611
00:27:10,276 --> 00:27:11,696
Well, actually I'm not done,


612
00:27:11,696 --> 00:27:12,936
I've just finished
the design process.


613
00:27:12,936 --> 00:27:14,356
I haven't incorporated
it into my app.


614
00:27:15,186 --> 00:27:17,126
So, let's go do that.


615
00:27:20,436 --> 00:27:21,116
Where's my app?


616
00:27:21,166 --> 00:27:21,596
There's my app.


617
00:27:22,116 --> 00:27:24,266
So here's my app, unmodified.


618
00:27:24,566 --> 00:27:27,346
Here's my existing
sRGB P3 hue wheel.


619
00:27:28,706 --> 00:27:30,776
Well, what I want to do here
is I want to go over here


620
00:27:30,776 --> 00:27:35,186
to the pop-up here to expose
the sRGB and Display P3 gamut.


621
00:27:35,536 --> 00:27:37,516
This will immediately
reveal a couple


622
00:27:37,516 --> 00:27:38,896
of additional cataloging
options.


623
00:27:39,446 --> 00:27:41,986
And I take my P3 hue wheel


624
00:27:41,986 --> 00:27:43,936
and just drop it
right into that slot.


625
00:27:43,936 --> 00:27:45,296
And I'm ready to go.


626
00:27:45,296 --> 00:27:48,796
Now if I build in run, it
will compile both of these


627
00:27:48,796 --> 00:27:49,936
into my asset catalog.


628
00:27:50,126 --> 00:27:52,646
And if I was running on
an iPad Pro 9.7 inch,


629
00:27:52,956 --> 00:27:55,976
I would be getting the
16-bit Display P3 asset,


630
00:27:56,296 --> 00:27:59,006
whereas on an sRGB
device like an iPhone 6,


631
00:27:59,276 --> 00:28:01,816
I would be getting this asset.


632
00:28:02,006 --> 00:28:07,476
Okay. That's incorporating
content into your application.


633
00:28:11,236 --> 00:28:13,286
Okay so we talked about tools


634
00:28:13,286 --> 00:28:15,616
and how they work
with live content.


635
00:28:15,856 --> 00:28:18,096
Now it's time to talk about some
of the deployment considerations


636
00:28:18,096 --> 00:28:19,626
and what happens after
you've used that tool


637
00:28:19,626 --> 00:28:21,966
and how it might impact the
running of your application.


638
00:28:23,216 --> 00:28:27,726
So, with asset catalog
deployment, app slicing is going


639
00:28:27,726 --> 00:28:30,296
to ensure that the
appropriate variant is delivered


640
00:28:30,296 --> 00:28:31,376
to a given device.


641
00:28:31,756 --> 00:28:32,736
And this is really important


642
00:28:32,736 --> 00:28:34,956
because this is potentially a
lot more content now that's part


643
00:28:34,956 --> 00:28:35,706
of your application.


644
00:28:36,456 --> 00:28:38,346
And, with that slicing,


645
00:28:38,626 --> 00:28:40,596
we ensure that there's
no payload cost


646
00:28:40,766 --> 00:28:42,516
for your actual end-user
customers


647
00:28:42,516 --> 00:28:45,676
for adding this wide gamut
content into your application,


648
00:28:45,676 --> 00:28:47,376
because we make sure
that with app slicing,


649
00:28:47,706 --> 00:28:50,066
wide gamut content only
goes to wide gamut devices,


650
00:28:50,426 --> 00:28:52,336
sRGB content goes
to all the rest.


651
00:28:52,806 --> 00:28:54,936
And it doesn't waste
space on the devices


652
00:28:54,936 --> 00:28:55,986
that it's not relevant for.


653
00:28:56,516 --> 00:29:01,926
On the Mac, there's
actually nothing new here,


654
00:29:01,926 --> 00:29:04,476
NSImage has always been able to
select the best representation


655
00:29:04,476 --> 00:29:07,656
from available representations
in the asset catalog.


656
00:29:07,656 --> 00:29:11,086
It's going to continue to do
so based on the characteristics


657
00:29:11,086 --> 00:29:11,966
of your target display.


658
00:29:12,226 --> 00:29:14,906
So if you are on a wide
gamut iMac for example


659
00:29:14,906 --> 00:29:17,856
and you have P3 content
available in your asset catalog,


660
00:29:17,856 --> 00:29:20,466
it's going to go
ahead and select


661
00:29:20,466 --> 00:29:22,386
that when rendering its content.


662
00:29:22,906 --> 00:29:27,046
Also, just like the behavior
with 1X and 2X assets


663
00:29:27,046 --> 00:29:29,296
on the Mac, NSImage
and NSImage View


664
00:29:29,296 --> 00:29:31,116
and all the related app
kit classes make sure


665
00:29:31,116 --> 00:29:33,066
to refresh the content
automatically


666
00:29:33,066 --> 00:29:34,996
when the display
characteristics change.


667
00:29:35,246 --> 00:29:37,266
Such as when your window
goes before the internal


668
00:29:37,266 --> 00:29:40,836
and the external display, or
the color characteristics,


669
00:29:40,836 --> 00:29:42,546
or back end scale
factor changes.


670
00:29:43,736 --> 00:29:44,316
So that's great.


671
00:29:44,976 --> 00:29:47,676
Okay, but how is this
data actually stored


672
00:29:47,676 --> 00:29:50,976
and what impact can that
have on your application?


673
00:29:51,756 --> 00:29:55,566
Well the good news is that at
build time we tried really hard


674
00:29:55,566 --> 00:29:59,066
to optimize the pixel formats
and storage characteristics


675
00:29:59,106 --> 00:30:01,616
of all your image content
in the asset catalog.


676
00:30:02,486 --> 00:30:04,666
And do so in as efficient
a way as possible,


677
00:30:04,666 --> 00:30:06,746
to the best of our
ability anyways.


678
00:30:07,146 --> 00:30:10,176
We do now use 16 bit
per component storage


679
00:30:10,536 --> 00:30:12,426
for wide color content.


680
00:30:12,786 --> 00:30:13,706
I mentioned this before.


681
00:30:13,706 --> 00:30:17,286
This really allows you to
have end-to-end 16 bit color


682
00:30:17,286 --> 00:30:20,186
precision in your
application resources.


683
00:30:21,396 --> 00:30:24,116
And, we also have compression.


684
00:30:25,286 --> 00:30:29,326
Now this is quite handy because
more data, 16 bit versus 8 bit.


685
00:30:29,746 --> 00:30:32,596
More information is
inevitably going to lead


686
00:30:32,716 --> 00:30:35,226
to large footprint unless
you apply compression.


687
00:30:35,226 --> 00:30:36,426
Now, we've always
had compression,


688
00:30:36,426 --> 00:30:37,796
we've always had
lossless compression.


689
00:30:38,426 --> 00:30:40,676
Akin to what happens
with say PNG files.


690
00:30:41,456 --> 00:30:45,496
But what's new this year is
some lossy compression options


691
00:30:45,496 --> 00:30:49,946
to help counteract, you
know app footprint size.


692
00:30:49,946 --> 00:30:53,616
The first one of these is what
we call basic compression.


693
00:30:54,036 --> 00:30:57,366
Now this is a compression system
that's almost exactly like JPEG,


694
00:30:57,366 --> 00:30:59,766
except the added bonus that it
actually handles transparency


695
00:30:59,766 --> 00:31:00,506
and alpha as well.


696
00:31:01,086 --> 00:31:04,346
It has a similar
visual characteristics


697
00:31:04,346 --> 00:31:05,906
and performance characteristics.


698
00:31:06,366 --> 00:31:10,606
And the great news is it
really performs really well,


699
00:31:10,836 --> 00:31:13,166
on almost all, on
all devices really.


700
00:31:13,166 --> 00:31:14,116
Just like JPEG does.


701
00:31:14,116 --> 00:31:15,996
So it's something you can count


702
00:31:15,996 --> 00:31:19,676
on to give a very slight
reduction in visual quality


703
00:31:19,676 --> 00:31:21,546
to get a really excellent
storage characteristics.


704
00:31:22,986 --> 00:31:25,076
Now, new this year as well,


705
00:31:25,076 --> 00:31:27,406
we have this exciting option
called GPU compression


706
00:31:27,406 --> 00:31:28,636
using ASTC.


707
00:31:29,886 --> 00:31:32,706
So this stands for Advanced
Scalable Texture Compression,


708
00:31:32,706 --> 00:31:36,556
which is a GPU compressed
textured pixel format,


709
00:31:36,886 --> 00:31:41,306
which many modern GPUs
on Apple devices as well


710
00:31:41,306 --> 00:31:42,506
as other systems support.


711
00:31:44,276 --> 00:31:48,106
And we have brought this
option to you in asset catalogs


712
00:31:48,106 --> 00:31:49,706
in two different forms.


713
00:31:49,946 --> 00:31:54,226
One is GPU best quality,
which is a constant bit rate,


714
00:31:54,226 --> 00:31:56,786
4 bits per pixel,
ASTC compression mode.


715
00:31:57,056 --> 00:31:59,236
Which is a great choice,
roughly analogous in terms


716
00:31:59,236 --> 00:32:02,876
of visual performance and visual
fidelity to high quality JPEG.


717
00:32:03,366 --> 00:32:07,716
And then we also have
GPU smallest size


718
00:32:07,716 --> 00:32:10,156
where if you're really wanting
to optimize your footprint


719
00:32:10,386 --> 00:32:11,426
and your memory footprint,


720
00:32:11,786 --> 00:32:14,516
greatly then you
choose this size


721
00:32:14,516 --> 00:32:16,606
and that's a 1 bit per pixel
constant bit rate codec


722
00:32:16,606 --> 00:32:18,286
which has excellent
storage characteristics.


723
00:32:19,576 --> 00:32:23,246
Of course, since not
every GPU on every device


724
00:32:23,246 --> 00:32:27,166
that is supported today
can use the ASTC format,


725
00:32:28,406 --> 00:32:29,636
we take an extra step for you


726
00:32:29,636 --> 00:32:33,716
and automatically generate a
software fallback for devices


727
00:32:33,716 --> 00:32:34,916
that lack that capability.


728
00:32:35,266 --> 00:32:37,286
What's great about this is it
means you don't have to worry


729
00:32:37,286 --> 00:32:40,356
about having incompatibilities
of your content


730
00:32:40,666 --> 00:32:41,916
for all the supported devices,


731
00:32:41,916 --> 00:32:43,486
we're going to automatically
generate that fallback,


732
00:32:43,486 --> 00:32:45,446
and use it and thin it,
and route it appropriately


733
00:32:45,446 --> 00:32:47,576
to those devices that
cannot support ASTC.


734
00:32:48,746 --> 00:32:53,406
So you can use GPU compression
without any real risk


735
00:32:53,406 --> 00:32:54,546
of compatibility breakage.


736
00:32:55,506 --> 00:32:58,396
A brief note about how
GPU compression interacts


737
00:32:58,396 --> 00:33:00,116
with wide color assets
specifically.


738
00:33:01,116 --> 00:33:07,066
So, we use the ASTC Low Dynamic
Range, or LDR compression mode,


739
00:33:07,406 --> 00:33:09,736
which really means that
wide content actually needs


740
00:33:09,736 --> 00:33:12,116
to be reduced to 8 bits
before compression,


741
00:33:12,116 --> 00:33:15,466
because LDR is an 8 bits per
sample compression format.


742
00:33:16,416 --> 00:33:18,916
The good news is we
perform this work for you.


743
00:33:18,916 --> 00:33:21,276
We automatically do perform
a high quality dither


744
00:33:21,676 --> 00:33:24,806
down to 8 bit at build time when
we're processing your images.


745
00:33:26,116 --> 00:33:28,946
But we preserve the wide gamut
colors that may be contained


746
00:33:28,946 --> 00:33:32,016
within your original 16 bit
source content by encoding


747
00:33:32,396 --> 00:33:35,306
and compressing in the
Display P3 color space,


748
00:33:35,516 --> 00:33:38,606
thus preserving the ability
to represent all of the colors


749
00:33:38,606 --> 00:33:40,256
within the Display P3 gamut.


750
00:33:42,506 --> 00:33:44,276
Okay, so that's the deployment.


751
00:33:44,276 --> 00:33:45,976
A little talk about
deployment characteristic,


752
00:33:46,526 --> 00:33:49,176
but this talk was
supposedly about colors.


753
00:33:49,286 --> 00:33:50,346
Well what about colors?


754
00:33:51,406 --> 00:33:52,966
Specifically colors in UI.


755
00:33:53,796 --> 00:33:58,166
An important observation is
that most of the pixels you see


756
00:33:58,166 --> 00:34:00,596
on screen drawn by
most applications,


757
00:34:00,596 --> 00:34:02,266
don't come from images,
even though they tend


758
00:34:02,266 --> 00:34:04,736
to get top billing
in this kind of talk.


759
00:34:05,006 --> 00:34:07,436
Most pixels on screen are
actually solid colors drawn


760
00:34:07,436 --> 00:34:09,096
by your code in your
application.


761
00:34:10,346 --> 00:34:13,516
And wide gamut colors it turns
out, can present new challenges


762
00:34:13,516 --> 00:34:16,255
in just working at
that simple level.


763
00:34:16,386 --> 00:34:17,676
So let's talk about that.


764
00:34:18,766 --> 00:34:21,045
In particular, the first
challenge I'd like to talk


765
00:34:21,045 --> 00:34:22,795
about is actually
talking about colors,


766
00:34:22,795 --> 00:34:24,446
because this is an
under-appreciated problem,


767
00:34:24,996 --> 00:34:26,246
under-appreciate problem.


768
00:34:27,156 --> 00:34:30,246
Usually when designers
and engineers communicate


769
00:34:30,246 --> 00:34:32,446
in written form, or
perhaps even verbal form,


770
00:34:32,746 --> 00:34:35,676
or visual form code is
usually communicated


771
00:34:35,676 --> 00:34:38,065
with an assumed sRGB
color space.


772
00:34:38,525 --> 00:34:41,136
That means you're probably
used to seeing colors written


773
00:34:41,136 --> 00:34:44,826
down as something like
this, RGB 128, 45, 56.


774
00:34:45,686 --> 00:34:46,406
You know very simple.


775
00:34:46,406 --> 00:34:47,706
They don't tell you what
color space they're in.


776
00:34:48,025 --> 00:34:50,196
And it's just assumed everybody
knows what color that is,


777
00:34:50,226 --> 00:34:52,335
because everybody's
using sRGB, aren't they?


778
00:34:53,085 --> 00:34:54,346
Well, not anymore.


779
00:34:55,476 --> 00:34:58,836
This is no longer sufficient for
working with wide gamut colors?


780
00:34:59,516 --> 00:35:00,276
So what do you do?


781
00:35:00,406 --> 00:35:02,926
Well the most important step
you can take is be specific


782
00:35:02,926 --> 00:35:05,346
about what color space you're
working in when you communicate,


783
00:35:05,346 --> 00:35:08,976
or write down, or, you
know, transmit that color.


784
00:35:09,166 --> 00:35:12,946
Use Display P3, instead of
sRGB when you're working


785
00:35:12,946 --> 00:35:14,046
on wide gamut designs.


786
00:35:14,576 --> 00:35:15,676
And indicate that as such.


787
00:35:16,236 --> 00:35:18,156
And if you need more
precision than 0


788
00:35:18,156 --> 00:35:21,756
to 255 8-bit representation
can give you then go ahead


789
00:35:21,756 --> 00:35:22,526
and use floating point.


790
00:35:23,076 --> 00:35:26,056
So as an example, next time
you're sending colors in email,


791
00:35:26,656 --> 00:35:28,546
maybe you'll refer to them
as something like this,


792
00:35:28,656 --> 00:35:35,386
with an annotation, P3
255, 128, 191, etcetera.


793
00:35:35,486 --> 00:35:37,436
Okay that's how you communicate
a color, but where did


794
00:35:37,436 --> 00:35:39,396
that color come from
in the first place.


795
00:35:39,396 --> 00:35:40,176
You probably picked it,


796
00:35:40,176 --> 00:35:41,516
the designer probably
picked it somewhere.


797
00:35:41,796 --> 00:35:42,446
How do they pick it?


798
00:35:42,776 --> 00:35:44,706
Using a color panel.


799
00:35:44,876 --> 00:35:47,646
This is the standard color panel
that gets shipped with the Mac,


800
00:35:47,646 --> 00:35:49,826
it's part of AppKits,
known as NSColorPanel.


801
00:35:50,066 --> 00:35:56,346
This of course is a very
familiar UI, but it also suffers


802
00:35:56,346 --> 00:35:57,886
from some of the
limitations we just talked


803
00:35:57,886 --> 00:35:58,906
about in calling colors.


804
00:35:58,906 --> 00:36:00,096
Typically, you pick red,


805
00:36:00,096 --> 00:36:02,186
green and blue values,
0 to 55 numbers.


806
00:36:02,536 --> 00:36:05,436
The color panel is
always supported selecting


807
00:36:05,436 --> 00:36:06,236
in different color spaces,


808
00:36:06,236 --> 00:36:08,306
but that hasn't always
been a very obvious


809
00:36:08,306 --> 00:36:09,696
or easy user experience.


810
00:36:10,366 --> 00:36:12,786
So I'm excited to say that we've
actually made some enhancements


811
00:36:12,786 --> 00:36:15,566
in the color panel, in
macOS Sierra to make working


812
00:36:15,566 --> 00:36:16,786
with wide color a little easier.


813
00:36:17,596 --> 00:36:21,646
The first thing we've done
is we've put the most common


814
00:36:21,646 --> 00:36:24,676
and important working spaces,
mainly Display P3 and sRGB,


815
00:36:24,976 --> 00:36:28,186
right up there in a
context in the action menu


816
00:36:28,186 --> 00:36:32,626
for the number picker, sRGB,
and of course Display P3.


817
00:36:32,986 --> 00:36:35,596
The next thing we've done is
we've actually allowed an option


818
00:36:35,596 --> 00:36:38,716
to change the numerical
representation of the colors


819
00:36:38,716 --> 00:36:39,896
from integer to floating point.


820
00:36:40,386 --> 00:36:42,796
So that you can standardize
on floating point colors


821
00:36:42,796 --> 00:36:45,176
if that works for your workflow.


822
00:36:46,556 --> 00:36:50,446
Another exciting thing we've
done is in the hue wheel,


823
00:36:50,586 --> 00:36:54,796
or wheel picker, we've actually
changed its implementation


824
00:36:54,796 --> 00:36:58,426
so that it can actually render
the full gamut of P3 colors


825
00:36:58,896 --> 00:37:00,796
when placed on an
appropriate display.


826
00:37:02,206 --> 00:37:05,446
And we've added a new
context menu that allows you


827
00:37:05,446 --> 00:37:07,626
to either use this
automatic behavior,


828
00:37:07,626 --> 00:37:11,276
where it just basically switches
its capability between P3


829
00:37:11,276 --> 00:37:13,216
and sRGB as you cross displays,


830
00:37:13,216 --> 00:37:15,196
or pin it to a specific
color space,


831
00:37:15,896 --> 00:37:19,356
if that's more what
you'd like to see.


832
00:37:19,596 --> 00:37:22,716
Okay, now we've picked
our colors,


833
00:37:22,716 --> 00:37:23,786
we know how to communicate them.


834
00:37:23,786 --> 00:37:25,056
Well, to actually make
anything happen we have


835
00:37:25,056 --> 00:37:26,146
to code them don't we?


836
00:37:26,416 --> 00:37:28,616
How do we construct wide
gamut colors in code?


837
00:37:29,976 --> 00:37:33,436
We've introduced two new
convenience constructors


838
00:37:33,436 --> 00:37:37,286
in AppKit and UIKit to
take Display P3 color


839
00:37:37,286 --> 00:37:38,016
numbers directly.


840
00:37:38,966 --> 00:37:41,326
This is NSColor Display P3
red, green, blue, alpha,


841
00:37:41,326 --> 00:37:43,586
and UIColor Display P3
red, green, blue, alpha.


842
00:37:43,866 --> 00:37:45,926
Great way to work with P3
colors from your designer.


843
00:37:46,196 --> 00:37:49,056
But of course your code
may actually be working


844
00:37:49,056 --> 00:37:52,386
with extended range sRGB
colors that maybe didn't come


845
00:37:52,386 --> 00:37:54,676
from a designer, but maybe came
from a different subsystem,


846
00:37:55,016 --> 00:37:56,816
or an API that might
have vended,


847
00:37:56,816 --> 00:37:58,776
you know extended
range sRGB to colors.


848
00:37:59,196 --> 00:38:00,256
How do you work with those?


849
00:38:00,736 --> 00:38:05,106
Well the good news is we've
extended the existing standard


850
00:38:05,106 --> 00:38:07,676
red, green, blue alpha
constructors for NSColor


851
00:38:07,676 --> 00:38:11,136
and UIColor color to not
clamp their input components


852
00:38:11,136 --> 00:38:13,286
and allow values to
be expressed greater


853
00:38:13,286 --> 00:38:14,596
than one and less than zero.


854
00:38:14,946 --> 00:38:17,786
So now you can construct
extended range sRGB colors


855
00:38:17,786 --> 00:38:18,296
very easily.


856
00:38:20,216 --> 00:38:23,046
Okay, now storing colors.


857
00:38:24,386 --> 00:38:28,046
What if you actually
have to like put colors


858
00:38:28,046 --> 00:38:30,676
into your document data, or
archive them in some form?


859
00:38:31,116 --> 00:38:33,986
Well special care really needs
to be taken when doing that,


860
00:38:34,306 --> 00:38:37,826
because like many other
parts of the ecosystem,


861
00:38:38,206 --> 00:38:40,166
there has traditionally
been a lot of assumptions


862
00:38:40,166 --> 00:38:42,826
of assumed color spaces and
assuming everybody's talking


863
00:38:42,826 --> 00:38:44,246
about the same thing
when you pass a red,


864
00:38:44,246 --> 00:38:45,076
green and blue number.


865
00:38:45,076 --> 00:38:47,366
All you should ever need
is three numbers, right?


866
00:38:47,366 --> 00:38:48,546
That's all you need
to represent a color.


867
00:38:48,546 --> 00:38:49,536
What could be wrong with that?


868
00:38:50,066 --> 00:38:50,986
Well it turns out there is.


869
00:38:51,476 --> 00:38:54,716
Because you may not be able to
disambiguate between an sRGB


870
00:38:54,716 --> 00:38:56,756
and a P3 color, and you may
make the wrong choice and end


871
00:38:56,756 --> 00:38:59,146
up with the wrong
color in your document.


872
00:38:59,216 --> 00:39:02,136
So I'd like you to
consider, perhaps,


873
00:39:02,136 --> 00:39:07,166
encoding a compatible sRGB color
alongside the new wide gamut


874
00:39:07,166 --> 00:39:09,986
color, which allows
your application,


875
00:39:09,986 --> 00:39:12,246
especially older versions
of your application,


876
00:39:12,246 --> 00:39:13,916
because since this is
document data, you have forward


877
00:39:13,916 --> 00:39:15,876
and backward compatibility
to consider.


878
00:39:16,486 --> 00:39:19,876
Allows the older applications to
continue pulling that sRGB data


879
00:39:19,876 --> 00:39:21,386
and treat it as if it was sRGB,


880
00:39:21,386 --> 00:39:22,736
which is the assumption
it's making.


881
00:39:23,336 --> 00:39:25,126
Whereas the newer
software can know


882
00:39:25,126 --> 00:39:28,416
about this new wide gamut code
that you've stored alongside it.


883
00:39:28,736 --> 00:39:31,336
How do you create that
compatible sRGB color?


884
00:39:31,336 --> 00:39:33,976
On iOS you can use the
CGColor.convert API.


885
00:39:34,896 --> 00:39:36,726
And on the macOS you
can use the venerable


886
00:39:36,826 --> 00:39:39,756
NSColor.usingColorSpace
API to convert those colors


887
00:39:39,756 --> 00:39:41,006
to the sRGB color space.


888
00:39:42,116 --> 00:39:45,606
We actually ran into this in
the system itself in macOS.


889
00:39:46,176 --> 00:39:49,176
You may be familiar
with TextEdit.


890
00:39:49,176 --> 00:39:51,196
And the text editor
app on the Mac.


891
00:39:51,596 --> 00:39:54,556
And its document format is
RTF, or rich text format,


892
00:39:54,556 --> 00:39:56,886
which has been around
and is supported


893
00:39:56,886 --> 00:39:59,516
by the Cocoa Text System as its
needed document storage format.


894
00:40:00,056 --> 00:40:03,486
And it turns out that when you
actually applied a color to say,


895
00:40:03,486 --> 00:40:05,816
a range of text, the way
it would actually store


896
00:40:05,816 --> 00:40:10,246
that in the RTF document was
in fact as just simple red,


897
00:40:10,246 --> 00:40:12,786
green, blue, 0 to 55 values.


898
00:40:13,326 --> 00:40:15,706
Which is kind of a problem, I
think you'll understand now,


899
00:40:15,706 --> 00:40:18,036
because we have no idea which
color space those red, green,


900
00:40:18,036 --> 00:40:19,746
blue values are in, and
it doesn't allow you


901
00:40:19,746 --> 00:40:20,806
to express the full range.


902
00:40:21,646 --> 00:40:23,236
So, we had to take action.


903
00:40:23,676 --> 00:40:26,946
What we ended up doing
is revving the RTF spec


904
00:40:26,946 --> 00:40:30,546
and how we write and read
RTF on our platform at least.


905
00:40:31,146 --> 00:40:34,566
By including an expanded
color table


906
00:40:35,296 --> 00:40:37,996
which actually annotates
each of the color tuples,


907
00:40:37,996 --> 00:40:40,386
which have now been
turned into 16 bit integers


908
00:40:40,886 --> 00:40:43,546
with individual color space
information, allowing you


909
00:40:43,546 --> 00:40:45,656
to specify colors in
multiple color spaces.


910
00:40:46,176 --> 00:40:48,156
Okay. That's great.


911
00:40:48,226 --> 00:40:50,426
But this is California,
we're supposed


912
00:40:50,426 --> 00:40:51,266
to be surfing aren't we?


913
00:40:51,836 --> 00:40:53,816
Well, what does that
have to do with colors?


914
00:40:53,816 --> 00:40:57,756
Well, there's colors on the web.


915
00:40:58,106 --> 00:41:00,786
The good news with wide
gamut colors and the web is


916
00:41:00,786 --> 00:41:04,106
that as long as your image
content is tagged appropriately


917
00:41:04,106 --> 00:41:05,746
and has appropriate color
profile information,


918
00:41:06,426 --> 00:41:08,656
all of the content
is color matched


919
00:41:08,656 --> 00:41:09,996
when it's rendered on webpages.


920
00:41:10,416 --> 00:41:12,526
So as long as you do
that you're good to go.


921
00:41:14,026 --> 00:41:16,256
Also, there are now
medial queries available


922
00:41:16,256 --> 00:41:19,536
to resolve assets between
P3 and sRGB capable devices,


923
00:41:19,536 --> 00:41:22,056
which is really handy.


924
00:41:22,056 --> 00:41:24,386
And lastly, there's a WebKit
proposal out right now


925
00:41:24,686 --> 00:41:28,246
for specifying CSS colors
in color spaces other


926
00:41:28,246 --> 00:41:30,946
than the assumed sRGB,
which has been the case


927
00:41:30,946 --> 00:41:32,006
since CSS's inception.


928
00:41:32,706 --> 00:41:35,636
And with that I would like to
hand it over to Steve Holt,


929
00:41:35,636 --> 00:41:38,316
who will tell you a little
bit more about rending


930
00:41:38,536 --> 00:41:40,166
with wide color in your apps.


931
00:41:40,336 --> 00:41:40,896
Thank you.


932
00:41:41,516 --> 00:41:43,706
[ Applause ]


933
00:41:44,206 --> 00:41:46,376
>> Thank you Patrick.


934
00:41:47,086 --> 00:41:52,286
So, in your applications
you often have your assets


935
00:41:52,286 --> 00:41:53,636
that you get from
the asset catalog,


936
00:41:53,666 --> 00:41:57,286
but also you might get some
content generated by your users


937
00:41:57,286 --> 00:41:59,986
or pulled down from the internet
from sources you don't control.


938
00:42:00,456 --> 00:42:03,396
And maybe you want to
generate some additional assets


939
00:42:03,636 --> 00:42:05,316
as part of that.


940
00:42:05,386 --> 00:42:07,166
How do you deal with
this with wide color?


941
00:42:07,696 --> 00:42:10,736
Well, when you're
drawing with wide color,


942
00:42:10,736 --> 00:42:14,326
I'm going to take a
simplified example here.


943
00:42:14,556 --> 00:42:19,866
Now, this is a box where
one-half of the box is rendered


944
00:42:19,866 --> 00:42:23,046
with the most saturated
Display P3 red we can have.


945
00:42:23,456 --> 00:42:25,266
And the other half of
the box is rendered


946
00:42:25,266 --> 00:42:30,416
with the most saturated
sRGB color that we can have.


947
00:42:30,506 --> 00:42:34,266
Unfortunately, because
these videos are recorded,


948
00:42:34,466 --> 00:42:36,476
and you're watching it
live on a projector system


949
00:42:36,476 --> 00:42:38,856
that doesn't have the
same color fidelity


950
00:42:38,856 --> 00:42:40,926
as our new displays
have, we have to cheat.


951
00:42:42,316 --> 00:42:44,886
So, we've actually
de-saturated both colors here.


952
00:42:44,886 --> 00:42:48,846
So what you're seeing isn't
exactly what this code


953
00:42:49,006 --> 00:42:52,076
that I'm going to show you
will output, but render it


954
00:42:52,076 --> 00:42:53,326
on a device and it
will be there.


955
00:42:54,486 --> 00:42:58,776
So, I'm a Frameworks Engineer on
the Cocoa, or on the UIKit Team,


956
00:42:58,956 --> 00:43:05,116
so of course I'm going to start
with Cocoa on the desktop.


957
00:43:05,606 --> 00:43:07,206
When you're on the desktop,


958
00:43:07,266 --> 00:43:10,356
it already has some great
color management support


959
00:43:10,356 --> 00:43:13,126
for color profiles in your
images and in your drawing.


960
00:43:13,716 --> 00:43:17,236
If you have to do manual drawing
in your code, and it needs


961
00:43:17,236 --> 00:43:19,886
to be done off screen,
the recommended way


962
00:43:19,886 --> 00:43:23,976
to do this is using the
NSImage with drawinghandler API.


963
00:43:24,966 --> 00:43:27,176
It's called with
the current context.


964
00:43:27,956 --> 00:43:31,516
And you can use this anywhere
you use any other NSImage,


965
00:43:31,956 --> 00:43:32,706
it will just work there.


966
00:43:33,756 --> 00:43:37,346
So, let's look at some code.


967
00:43:37,536 --> 00:43:40,596
So, pretty simple,
just set up a size


968
00:43:41,466 --> 00:43:46,216
and we initialize our
NSImage with the size we want.


969
00:43:46,216 --> 00:43:47,406
We don't want this
to be flipped.


970
00:43:48,256 --> 00:43:51,206
And we configure
our drawing handler.


971
00:43:53,536 --> 00:43:55,876
We get the Rect from the
drawRect that gets passed in.


972
00:43:56,386 --> 00:43:57,846
We divide it up in halves,


973
00:43:58,796 --> 00:44:01,346
allocated displayP3Red
and draw it.


974
00:44:02,536 --> 00:44:05,546
Then allocate our sRGB
red and then draw that.


975
00:44:06,456 --> 00:44:09,036
And then return true,
because we true successfully.


976
00:44:09,036 --> 00:44:09,846
And we're done.


977
00:44:10,696 --> 00:44:11,116
There you go.


978
00:44:12,036 --> 00:44:12,866
It all just works.


979
00:44:13,416 --> 00:44:15,096
If you're using this in
your application today,


980
00:44:15,586 --> 00:44:18,476
you're already doing
the right thing.


981
00:44:18,666 --> 00:44:21,696
So, that's pretty
much the desktop.


982
00:44:21,836 --> 00:44:22,816
What about iOS?


983
00:44:23,326 --> 00:44:26,066
Should be just as simple right?


984
00:44:26,286 --> 00:44:30,956
So you must all be familiar with
UIGraphicsBeginImageContext.


985
00:44:31,776 --> 00:44:34,646
It's a nice little API.


986
00:44:34,886 --> 00:44:36,516
And, let's see the code again.


987
00:44:37,106 --> 00:44:39,796
We get the size, we made
the context with the size.


988
00:44:40,996 --> 00:44:46,646
We divide our Rects, draw our
P3 color, draw our sRGB color.


989
00:44:47,596 --> 00:44:51,096
We get our image and
then end the context.


990
00:44:51,096 --> 00:44:53,486
And this is what we get out.


991
00:44:54,356 --> 00:44:58,206
That's not correct.


992
00:44:58,356 --> 00:44:59,616
Why didn't this work?


993
00:45:00,046 --> 00:45:03,196
Well, if we look


994
00:45:03,196 --> 00:45:07,016
at the documentation we
have this fun little bit.


995
00:45:08,096 --> 00:45:11,886
We've documented that
BeginImageContext API is


996
00:45:12,096 --> 00:45:15,386
in the UIKit will only
every return you a 32-bit


997
00:45:15,386 --> 00:45:16,376
integer context.


998
00:45:16,676 --> 00:45:20,456
That means you only get 8 bits
per every channel per red,


999
00:45:20,456 --> 00:45:21,446
green, blue, and alpha.


1000
00:45:23,316 --> 00:45:28,016
This has a pretty big impact
on what we can draw with this.


1001
00:45:29,396 --> 00:45:31,406
Since we can't create
contexts that are larger


1002
00:45:31,406 --> 00:45:37,416
than 8 bits per color channel,
it can't represent any colors


1003
00:45:37,416 --> 00:45:41,046
in the extended sRGB
color gamut.


1004
00:45:41,046 --> 00:45:44,236
And, because of the existing
interface written in C,


1005
00:45:44,566 --> 00:45:48,636
well we can't expand
the options.


1006
00:45:48,756 --> 00:45:51,776
And we didn't want to make
UIGraphics be an image context


1007
00:45:51,776 --> 00:45:52,756
with more options.


1008
00:45:53,886 --> 00:45:57,506
So, we have some new
API for you in iOS X.


1009
00:45:58,406 --> 00:46:00,406
It's called
UIGraphicsImageRenderer.


1010
00:46:01,876 --> 00:46:04,066
And the way this works is
really straightforward.


1011
00:46:04,066 --> 00:46:07,526
So I'm just going to jump
into some code with this.


1012
00:46:07,716 --> 00:46:08,176
Here we are.


1013
00:46:08,326 --> 00:46:11,026
First we instantiate our
image renderer object.


1014
00:46:11,406 --> 00:46:12,436
You can reuse this.


1015
00:46:12,676 --> 00:46:14,436
And it retains the
same properties


1016
00:46:14,436 --> 00:46:17,196
across every implication
of the image you get


1017
00:46:17,196 --> 00:46:18,206
out with the drawing handler.


1018
00:46:20,296 --> 00:46:22,786
And you just call
renderer image.


1019
00:46:23,016 --> 00:46:26,236
You supply your block,
and you just draw


1020
00:46:27,046 --> 00:46:29,696
as you would otherwise.


1021
00:46:30,546 --> 00:46:32,626
The bounds you can
get off of the format


1022
00:46:32,626 --> 00:46:34,956
which describes the
exact properties


1023
00:46:34,986 --> 00:46:36,926
that this particular
renderer has.


1024
00:46:37,686 --> 00:46:40,536
And then you just
divide the bounds.


1025
00:46:40,686 --> 00:46:43,506
You get and render
the P3 red square.


1026
00:46:44,506 --> 00:46:48,036
And then you configure and
render the sRGB red square


1027
00:46:48,716 --> 00:46:50,376
and just like we had
before, in AppKit,


1028
00:46:51,096 --> 00:46:55,286
we have a correctly rendered
extended range half P3,


1029
00:46:55,546 --> 00:46:57,636
half sRGB red square.


1030
00:46:59,316 --> 00:47:01,606
So just a few other
notes about this new API.


1031
00:47:02,736 --> 00:47:04,896
It is fully color
managed by default.


1032
00:47:06,146 --> 00:47:10,146
And it also supports the
extended range sRGB color space


1033
00:47:10,146 --> 00:47:10,646
by default.


1034
00:47:11,896 --> 00:47:14,086
And it's pretty smart
about this.


1035
00:47:14,086 --> 00:47:17,286
If you have a device
that has a P3 display,


1036
00:47:17,946 --> 00:47:20,076
like the new iPad Pro 9.7 inch,


1037
00:47:20,586 --> 00:47:21,786
we'll just turn it
on by default.


1038
00:47:22,146 --> 00:47:23,696
You don't need to do
any additional work.


1039
00:47:23,696 --> 00:47:25,366
But if you're on a device


1040
00:47:25,366 --> 00:47:27,206
that does not have the
extended color display,


1041
00:47:27,206 --> 00:47:30,996
like every other iPad and
iPhone, then you're going


1042
00:47:30,996 --> 00:47:33,656
to get the more standard
8 bits per channel,


1043
00:47:34,086 --> 00:47:36,866
sRGB context to draw into.


1044
00:47:37,696 --> 00:47:39,466
So we don't waste
the additional memory


1045
00:47:39,766 --> 00:47:41,666
for having the 16
bit float context.


1046
00:47:42,366 --> 00:47:43,626
The other thing this does


1047
00:47:43,626 --> 00:47:46,476
for you is it manages
the CGContext lifetime.


1048
00:47:47,066 --> 00:47:49,276
You don't need to worry
about ending the context


1049
00:47:49,586 --> 00:47:52,656
or any other management
yourself.


1050
00:47:53,196 --> 00:47:57,346
And for any legacy code that
you have in your application,


1051
00:47:57,906 --> 00:48:00,376
it works with
UIGraphicsGetCurrentContext.


1052
00:48:00,786 --> 00:48:03,006
So if you call into some
function like a draw Rect,


1053
00:48:03,646 --> 00:48:06,656
you'll do the right thing.


1054
00:48:06,856 --> 00:48:09,476
So, that's rendering
off the screen.


1055
00:48:10,036 --> 00:48:11,106
What about to the screen?


1056
00:48:12,296 --> 00:48:15,056
Okay we'll start
a new iKit again.


1057
00:48:15,246 --> 00:48:18,046
On [inaudible] view we
have the new Swift 3, well,


1058
00:48:18,366 --> 00:48:20,446
newly named in Swift 3, Draw.


1059
00:48:20,846 --> 00:48:23,166
And we do the right
thing for you here.


1060
00:48:24,016 --> 00:48:27,666
When you call draw in
your UI view subclasses,


1061
00:48:28,456 --> 00:48:34,276
if you are on an iPad 9.7 inch,
we will call your draw method


1062
00:48:34,376 --> 00:48:37,956
in the correct, extended
range sRGB color space


1063
00:48:37,956 --> 00:48:39,996
with the floating
point pixel format.


1064
00:48:41,166 --> 00:48:44,496
And if you're not on one
of the new devices, then,


1065
00:48:45,316 --> 00:48:48,846
well you get what you get
now, 8 bits per channel sRGB.


1066
00:48:48,846 --> 00:48:53,916
And of course if you have
images, we have UIImageView,


1067
00:48:54,576 --> 00:48:58,296
which has been color managed
since iOS 9.3 and continues


1068
00:48:58,296 --> 00:49:02,606
to be color managed today.


1069
00:49:02,796 --> 00:49:06,326
If you need to know how
you're rendering, you can look


1070
00:49:06,326 --> 00:49:09,056
at a new trait on
UITraitCollection in your views


1071
00:49:09,056 --> 00:49:11,376
in view controllers
called display gamut.


1072
00:49:11,976 --> 00:49:17,776
It takes a UI display gamut
enum and its properties are P3


1073
00:49:17,776 --> 00:49:22,366
if you're on a new, P3 class
display or sRGB if you're


1074
00:49:22,366 --> 00:49:23,786
on a new sRGB class display.


1075
00:49:23,786 --> 00:49:26,616
And this can be very useful
in the case where you need


1076
00:49:26,616 --> 00:49:31,036
to match a particular UI
color with an asset pulled


1077
00:49:31,036 --> 00:49:32,116
from your asset catalog.


1078
00:49:32,116 --> 00:49:38,066
So you can properly match
colors to your assets.


1079
00:49:38,266 --> 00:49:43,226
Now, what if you know
that a view is never going


1080
00:49:43,226 --> 00:49:45,366
to need the extended
range sRGB context?


1081
00:49:46,396 --> 00:49:49,566
Well, there's a new
property on CALayer


1082
00:49:51,076 --> 00:49:52,736
and that is contents format.


1083
00:49:53,146 --> 00:49:58,496
And this controls exactly how
deep the context that CA creates


1084
00:49:58,496 --> 00:50:01,146
for you when it renders
that view will be.


1085
00:50:02,046 --> 00:50:04,856
By default, on the
iPad Pro 9.7 inch,


1086
00:50:06,016 --> 00:50:08,696
it is to use the
extended range context.


1087
00:50:08,916 --> 00:50:10,566
And on all of the
devices the default is


1088
00:50:10,566 --> 00:50:13,446
to use the traditional,
sRGB context.


1089
00:50:14,336 --> 00:50:15,986
And you control it with any one


1090
00:50:15,986 --> 00:50:18,006
of these various
format literals.


1091
00:50:19,476 --> 00:50:22,616
So on Cocoa, back
on the desktop,


1092
00:50:23,626 --> 00:50:26,906
NSView, same thing as UIView.


1093
00:50:27,136 --> 00:50:30,516
It will draw with the current
context that NSWindow has.


1094
00:50:31,386 --> 00:50:36,146
And you can look at any of the
traditional properties there


1095
00:50:36,426 --> 00:50:38,736
with the Window Backing Store,


1096
00:50:38,736 --> 00:50:40,526
the screen target
profile, etcetera.


1097
00:50:41,756 --> 00:50:43,206
If the window changes displays,


1098
00:50:44,086 --> 00:50:45,436
then you get the
view did change back


1099
00:50:45,436 --> 00:50:47,006
in properties callback
on your view.


1100
00:50:47,626 --> 00:50:50,736
And you can also listen
to the NSWindowDidChange


1101
00:50:50,766 --> 00:50:54,026
BackingPropertiesNotification,
which is omitted


1102
00:50:54,026 --> 00:50:55,066
from your view's window.


1103
00:50:55,746 --> 00:50:57,776
These are the same that
you've been working


1104
00:50:57,776 --> 00:51:02,306
with since a very long time now.


1105
00:51:02,306 --> 00:51:03,576
And just as a refresher.


1106
00:51:04,396 --> 00:51:05,346
The backing properties


1107
00:51:05,346 --> 00:51:12,226
on the NSWindow include the
display scale, color space


1108
00:51:12,556 --> 00:51:16,576
and the output display gamut.


1109
00:51:16,576 --> 00:51:19,746
And just like in iOS, you
can also control how deep


1110
00:51:19,746 --> 00:51:26,826
of a context you get in AppKit,
with the WindowDepth property


1111
00:51:26,826 --> 00:51:29,806
on NSWindow, and you
can set it to any one


1112
00:51:29,806 --> 00:51:31,146
of these depth properties.


1113
00:51:31,146 --> 00:51:35,666
So if you are on a wide
gamut display but don't need


1114
00:51:35,666 --> 00:51:40,296
that extra precision you can
set this to be 24 bit RGB,


1115
00:51:40,296 --> 00:51:43,696
and it will not create the
extended context for you.


1116
00:51:44,866 --> 00:51:47,116
So, what did we learn today?


1117
00:51:48,176 --> 00:51:53,696
Well, you've seen our vision
for wide color and how to bring


1118
00:51:53,696 --> 00:51:56,496
that to the next generation
of displays and your users.


1119
00:51:56,996 --> 00:51:59,286
We've talked a little
about color gamuts


1120
00:51:59,286 --> 00:52:02,476
and color management,
and how to work


1121
00:52:02,476 --> 00:52:04,436
with that wide gamut
content that you want


1122
00:52:04,436 --> 00:52:05,536
to bring to your users.


1123
00:52:06,056 --> 00:52:10,316
We've reviewed how to use
colors in your application.


1124
00:52:10,876 --> 00:52:15,576
And how to take your drawing
code to the next level of color


1125
00:52:16,946 --> 00:52:19,866
by making sure that
it draws properly


1126
00:52:19,866 --> 00:52:21,306
in these wide gamut scenarios.


1127
00:52:22,616 --> 00:52:26,796
Now for more information you can
of course check out the slides


1128
00:52:27,016 --> 00:52:29,096
on the session's website.


1129
00:52:30,006 --> 00:52:33,146
And there are a large
number of related sessions.


1130
00:52:34,336 --> 00:52:35,246
This is page 1.


1131
00:52:35,816 --> 00:52:38,796
So please check them out.


1132
00:52:38,796 --> 00:52:40,306
If they've already
passed, I'm not going


1133
00:52:40,306 --> 00:52:43,476
to enumerate them,
there are a lot.


1134
00:52:43,476 --> 00:52:45,926
See the videos through
the WWDC app


1135
00:52:45,926 --> 00:52:47,776
or online at the WWDC website.


1136
00:52:48,396 --> 00:52:48,896
Thank you.

