1
00:00:25,176 --> 00:00:26,316
>> ROGER PANTOS: Good
morning, everyone.


2
00:00:27,416 --> 00:00:31,096
Welcome to this year's
Worldwide Developers Conference.


3
00:00:31,526 --> 00:00:33,846
This is your first real session.


4
00:00:34,596 --> 00:00:35,826
So, welcome.


5
00:00:37,146 --> 00:00:39,106
Today -- thank you.


6
00:00:39,766 --> 00:00:44,416
Today we are going to be talking
about a pretty exciting addition


7
00:00:44,666 --> 00:00:46,366
to HTTP Live Streaming.


8
00:00:47,666 --> 00:00:49,746
You know, we are always looking


9
00:00:49,826 --> 00:00:53,536
at whatever it is that's
preventing you guys


10
00:00:53,536 --> 00:00:57,606
from using HLS to deploy your
content the way you want to,


11
00:00:58,296 --> 00:01:03,396
and content protection, which
is to say allowing your users


12
00:01:03,396 --> 00:01:05,706
to watch your content,
listen to your content


13
00:01:06,416 --> 00:01:08,626
without making unauthorized
use of it,


14
00:01:09,186 --> 00:01:12,616
has always been a really
difficult problem that a lot


15
00:01:12,616 --> 00:01:14,306
of you have had to
sort of contend with.


16
00:01:15,076 --> 00:01:17,286
And, as the bit rates
get higher,


17
00:01:17,286 --> 00:01:18,736
and the resolutions get higher,


18
00:01:18,906 --> 00:01:20,626
those demands are only
going to get louder.


19
00:01:21,496 --> 00:01:25,736
And that's why I am
extremely pleased, finally,


20
00:01:26,086 --> 00:01:30,376
to be able to announce
today FairPlay Streaming.


21
00:01:31,706 --> 00:01:33,266
So what is it?


22
00:01:34,386 --> 00:01:40,166
First and foremost, it is
our best content protection


23
00:01:40,166 --> 00:01:44,216
technology, packaged in a
way that allows you to use it


24
00:01:44,216 --> 00:01:46,136
to protect your HLS content.


25
00:01:47,146 --> 00:01:47,946
Now, it is not new.


26
00:01:48,816 --> 00:01:53,276
We have been working for the
past three years with some


27
00:01:53,276 --> 00:01:55,076
of our major content partners


28
00:01:55,856 --> 00:01:57,846
to help them deploy
FairPlay Streaming


29
00:01:57,846 --> 00:01:59,546
in their apps and on Apple TV.


30
00:02:00,176 --> 00:02:04,486
And at this point, it has
been used to protect a lot


31
00:02:04,486 --> 00:02:08,515
of content, including some
of the most popular movies


32
00:02:08,515 --> 00:02:10,606
and television shows
in the world.


33
00:02:15,826 --> 00:02:21,406
Now, you can use it on iOS,
on Apple TV, and on OS X.


34
00:02:22,906 --> 00:02:26,516
Of course, on our mobile
devices, battery life is king.


35
00:02:27,086 --> 00:02:30,216
And so, when we designed
FairPlay Streaming,


36
00:02:31,186 --> 00:02:34,026
every choice we made
was predicated


37
00:02:34,026 --> 00:02:35,506
on giving you good battery life.


38
00:02:35,746 --> 00:02:38,756
The codecs we chose,
the encryption we chose,


39
00:02:39,096 --> 00:02:41,926
how we implemented it, even the
hardware we took advantage of.


40
00:02:42,326 --> 00:02:43,716
And, so, you get great security,


41
00:02:43,716 --> 00:02:45,626
but you also get
great battery life.


42
00:02:46,046 --> 00:02:50,176
And it is also integrated
with AirPlay, seamlessly.


43
00:02:50,866 --> 00:02:52,806
And, so, with full protection.


44
00:02:54,156 --> 00:02:57,946
Now, you may be saying, okay,
well, that sounds pretty good,


45
00:02:58,416 --> 00:02:59,556
but I've got a lot of content.


46
00:02:59,686 --> 00:03:03,116
I mean, is Apple -- how is
Apple going to make me pay


47
00:03:03,116 --> 00:03:04,306
for this FairPlay
Streaming thing?


48
00:03:04,306 --> 00:03:05,906
Is going to be like
a per movie charge,


49
00:03:05,906 --> 00:03:07,456
per playback, as a flat rate?


50
00:03:08,726 --> 00:03:10,176
We went back and forth on that,


51
00:03:10,416 --> 00:03:12,316
and we eventually did
settle on a flat rate.


52
00:03:13,806 --> 00:03:19,256
Zero. If you guys are paying
your 99-dollar a year developer


53
00:03:19,256 --> 00:03:22,526
fee to us, you will not need
to pay Apple a penny more


54
00:03:22,756 --> 00:03:24,836
to use FairPlay Streaming
as much as you want.


55
00:03:26,256 --> 00:03:30,996
So, now, at this point,
any marketing folks


56
00:03:30,996 --> 00:03:33,146
in the audience are like:
Oh, that sounds awesome!


57
00:03:33,466 --> 00:03:35,576
And the engineer sitting
next to you is like: No,


58
00:03:35,576 --> 00:03:36,476
no, really, what is it?


59
00:03:36,856 --> 00:03:41,136
Okay. So, it is really
very simple.


60
00:03:41,906 --> 00:03:46,476
What we did is, we attacked the
most essential building block


61
00:03:46,476 --> 00:03:48,976
of a DRM system, which
is key protection.


62
00:03:49,976 --> 00:03:52,196
And so FairPlay Streaming
is essentially


63
00:03:52,366 --> 00:03:55,346
and really only a secure
key delivery system.


64
00:03:55,666 --> 00:03:59,006
It's a way to transfer the keys
from your server on the Internet


65
00:03:59,476 --> 00:04:03,896
to the device, and use it on
that device without allowing it


66
00:04:03,896 --> 00:04:07,636
to be obtained by an attacker so
they can decrypt your content.


67
00:04:08,826 --> 00:04:12,906
We designed it to be easy to
use and also easy to adopt.


68
00:04:13,476 --> 00:04:15,886
We recognized that a
lot of you, particularly


69
00:04:15,886 --> 00:04:20,416
if you are streaming premium
content or subscription content,


70
00:04:20,416 --> 00:04:22,956
you are already talking to
some kind of secure back end.


71
00:04:23,666 --> 00:04:26,306
And so we designed
FairPlay Streaming


72
00:04:26,306 --> 00:04:29,156
so that the delivery
part is agnostic,


73
00:04:29,156 --> 00:04:30,066
the protocol you're using.


74
00:04:30,066 --> 00:04:31,796
If you have got a
secure connection,


75
00:04:32,166 --> 00:04:34,836
you can adopt FairPlay
Streaming extremely easily.


76
00:04:35,296 --> 00:04:36,766
And if you don't, you
can just use HTTPS.


77
00:04:36,766 --> 00:04:37,856
It's a great choice.


78
00:04:39,346 --> 00:04:42,676
Finally, a lot of folks have
asked me about HDCP in the past.


79
00:04:43,256 --> 00:04:45,596
With FairPlay Streaming
is the answer to this.


80
00:04:46,996 --> 00:04:49,726
If your device is
connected to a television


81
00:04:49,886 --> 00:04:54,746
or another external
input, it must be HDMI,


82
00:04:54,746 --> 00:04:56,776
and HDCP must be active


83
00:04:57,176 --> 00:05:00,386
or any FairPlay Streaming
content playback will fail,


84
00:05:01,226 --> 00:05:02,006
no exceptions.


85
00:05:04,216 --> 00:05:09,166
Now, when we designed it,
we knew that there's a lot


86
00:05:09,166 --> 00:05:11,706
of difference, business
rules and logic,


87
00:05:11,706 --> 00:05:13,286
and everybody has
their own flavor.


88
00:05:13,286 --> 00:05:15,396
And so we didn't want to
build a big, complicated thing


89
00:05:15,746 --> 00:05:17,286
and force you into our box.


90
00:05:17,776 --> 00:05:21,256
So we built just the
key delivery mechanism.


91
00:05:21,706 --> 00:05:25,326
We didn't build a big rights
expression language evaluator


92
00:05:25,326 --> 00:05:27,576
or create a long
list of policies


93
00:05:27,576 --> 00:05:28,696
that you need to adhere to.


94
00:05:29,366 --> 00:05:33,726
And that means that if your
business logic requires those


95
00:05:33,726 --> 00:05:34,886
things, you are in control.


96
00:05:34,886 --> 00:05:35,946
You are still the gate keeper.


97
00:05:36,486 --> 00:05:39,346
So, once you give the media
stack a FairPlay Streaming key,


98
00:05:39,346 --> 00:05:39,876
we will play it.


99
00:05:39,876 --> 00:05:40,856
No questions asked.


100
00:05:40,856 --> 00:05:42,386
We will protect the key,
we'll go and play it.


101
00:05:43,086 --> 00:05:46,156
And so, if you need to do
some policy enforcement


102
00:05:46,246 --> 00:05:50,746
or user authentication or
per device slot management,


103
00:05:51,136 --> 00:05:53,986
then you can do that on
top of FairPlay Streaming.


104
00:05:54,436 --> 00:05:57,226
And so again, it goes into
being easy to integrate.


105
00:05:58,486 --> 00:06:00,696
So now let's talk about
some concrete steps.


106
00:06:00,696 --> 00:06:03,086
That's kind of what
FairPlay Streaming gives you.


107
00:06:03,446 --> 00:06:06,216
Let's talk about the steps that
you need to do to adopt it.


108
00:06:07,466 --> 00:06:09,006
Basically there are three steps.


109
00:06:09,606 --> 00:06:12,626
The first one and
probably the largest one is


110
00:06:12,626 --> 00:06:15,706
because FairPlay Streaming is
an online key delivery protocol,


111
00:06:16,346 --> 00:06:18,166
you must be online
to get your key,


112
00:06:18,166 --> 00:06:20,306
and once the playback
stops, the key goes poof.


113
00:06:21,236 --> 00:06:25,266
You need to integrate what
we call a key security module


114
00:06:25,336 --> 00:06:26,376
into your key server.


115
00:06:27,416 --> 00:06:29,946
And so that's the biggest
step, and we'll go into a lot


116
00:06:29,946 --> 00:06:31,026
of detail about that
in a second.


117
00:06:31,686 --> 00:06:34,026
But the second thing is, then
you need to add a little bit


118
00:06:34,026 --> 00:06:35,466
of code to your application,


119
00:06:36,036 --> 00:06:39,106
called an AV asset
resource loader delegate.


120
00:06:39,766 --> 00:06:41,506
And that code is going
to be responsible


121
00:06:41,546 --> 00:06:44,116
for relaying the key
requests from AV foundation


122
00:06:44,456 --> 00:06:47,436
to your back end, and then
returning the response


123
00:06:47,436 --> 00:06:49,606
from your back end
back to AV foundation.


124
00:06:50,306 --> 00:06:52,586
Then finally what you need to
do is, prepare your content.


125
00:06:52,586 --> 00:06:54,026
And that means you
need to encrypt it,


126
00:06:54,026 --> 00:06:57,776
using the AES Sample encryption.


127
00:06:58,086 --> 00:07:01,516
This is the format
that we introduced, oh,


128
00:07:01,676 --> 00:07:03,286
three years ago, coincidentally.


129
00:07:03,786 --> 00:07:07,916
And so, rather than the
traditional bulk entire segment


130
00:07:07,916 --> 00:07:10,806
encryption that HLS
is using originally,


131
00:07:11,086 --> 00:07:15,336
this just encrypts small slices
of each sample and it ensures


132
00:07:15,556 --> 00:07:17,346
that we can drive the decryption


133
00:07:17,556 --> 00:07:19,116
down to the lowest
level of the system.


134
00:07:20,136 --> 00:07:23,096
And so you need to pick a
content key, store that away


135
00:07:23,096 --> 00:07:25,466
in your back end database,
encrypt your content,


136
00:07:25,756 --> 00:07:29,356
and then put a reference to that
key into your playlist so that


137
00:07:29,356 --> 00:07:31,726
when you your little bit
of code receives a request


138
00:07:31,726 --> 00:07:33,856
for that key it knows which
one to ask your back end for.


139
00:07:34,016 --> 00:07:37,756
And so what I would like
to do next is have us go


140
00:07:37,756 --> 00:07:40,936
into greater detail on
all three of those steps.


141
00:07:41,316 --> 00:07:45,476
And to do that, I would like to
introduce a colleague of mine


142
00:07:45,476 --> 00:07:48,526
who works on the FairPlay
team, Gianpaolo Fasoli.


143
00:07:48,586 --> 00:07:48,936
Welcome.


144
00:07:50,516 --> 00:07:55,686
[Applause]


145
00:07:56,186 --> 00:07:56,856
>> GIANPAOLO FASOLI:
Thank you, Roger.


146
00:07:57,906 --> 00:07:58,836
Good morning, everyone.


147
00:07:58,836 --> 00:08:00,276
My name's Gianpaolo Fasoli,


148
00:08:00,276 --> 00:08:02,796
and I am a FairPlay
Streaming Engineer at Apple.


149
00:08:03,686 --> 00:08:06,826
So, with Roger's overview in
mind, I'd like to talk to you


150
00:08:06,826 --> 00:08:09,326
about what it takes to design
a FairPlay Streaming system.


151
00:08:09,326 --> 00:08:13,536
And the first thing I'm going
to talk about is the purpose


152
00:08:13,536 --> 00:08:15,346
and the importance
of what we refer


153
00:08:15,346 --> 00:08:17,716
to as the FairPlay
Streaming credentials.


154
00:08:17,716 --> 00:08:21,026
Next up, I'm going to
identify the actors


155
00:08:21,026 --> 00:08:23,276
in the system and
the data flows.


156
00:08:23,276 --> 00:08:26,546
Then I'm going to talk
about what Apple provides


157
00:08:26,546 --> 00:08:28,246
in the things that you are
going to build and in the things


158
00:08:28,246 --> 00:08:30,266
that you are going to build,
we're going to start by talking


159
00:08:30,266 --> 00:08:31,586
about the server side and how


160
00:08:31,586 --> 00:08:35,436
to integrate the key security
module that Roger was talking


161
00:08:35,436 --> 00:08:36,686
about into your key server.


162
00:08:37,206 --> 00:08:39,596
We're going to talk about
how to test that integration.


163
00:08:39,596 --> 00:08:43,116
We're going to move on to
the client side and how


164
00:08:43,116 --> 00:08:45,566
to integrate FairPlay
Streaming into your application,


165
00:08:45,566 --> 00:08:47,666
and then we're also
going to be talking


166
00:08:47,666 --> 00:08:49,666
about the updates you
are going to be making


167
00:08:49,666 --> 00:08:54,156
to your content authoring
workflow, in order to encrypt


168
00:08:54,156 --> 00:08:56,106
that content and
verify the changes


169
00:08:56,106 --> 00:08:57,336
that you are making
to your workflow.


170
00:08:59,236 --> 00:09:02,916
So when we talk about
FairPlay Streaming credentials,


171
00:09:03,006 --> 00:09:06,016
the reason we have those is


172
00:09:06,016 --> 00:09:09,226
so that we can differentiate
your FairPlay Streaming


173
00:09:09,226 --> 00:09:12,516
deployment from other FPS
deployments out there.


174
00:09:13,066 --> 00:09:16,236
And the reason they are required
is because you need them


175
00:09:16,236 --> 00:09:19,046
so that your customers can
actually play their content


176
00:09:19,236 --> 00:09:20,496
on the customer devices.


177
00:09:21,466 --> 00:09:24,196
For those reasons,
it is critical


178
00:09:24,196 --> 00:09:27,966
that you protect those FairPlay
Streaming credential assets


179
00:09:28,196 --> 00:09:30,276
at all times, when they are
deployed in your server,


180
00:09:30,276 --> 00:09:31,516
and when they're
used in your server.


181
00:09:32,316 --> 00:09:33,686
Make sure they are protected.


182
00:09:34,636 --> 00:09:39,216
So now moving on to the diagram,
we've got the server components


183
00:09:39,216 --> 00:09:42,326
on the left-hand side,
namely your key server


184
00:09:42,326 --> 00:09:45,806
that has the FairPlay Streaming
key security module integrated


185
00:09:45,806 --> 00:09:49,596
in it; the key database that
contains the content key values


186
00:09:49,596 --> 00:09:51,456
that were used to
encrypt your streams.


187
00:09:51,726 --> 00:09:54,746
And then on the right-hand side
we've got the client actors,


188
00:09:54,746 --> 00:09:56,026
namely your application,


189
00:09:56,406 --> 00:09:58,676
the AVFoundation Delegate
Roger was talking about,


190
00:09:58,946 --> 00:10:01,986
and AVFoundation that's provided
us part of the operating system


191
00:10:01,986 --> 00:10:04,376
with our iOS or Mac OS X.


192
00:10:04,946 --> 00:10:06,196
So lLet's talk about
what happens


193
00:10:06,196 --> 00:10:09,176
when the user hits play
in your application.


194
00:10:09,226 --> 00:10:10,556
First thing that's
going to happen is,


195
00:10:10,996 --> 00:10:13,566
your application is going
to invoke AVFoundation


196
00:10:13,566 --> 00:10:16,686
and provide it with the m3u8
URL to the encrypted content.


197
00:10:17,186 --> 00:10:20,256
AVFoundation is going to pull
that playlist from the Internet,


198
00:10:20,356 --> 00:10:22,586
it's going to parse
it, and when it notices


199
00:10:22,586 --> 00:10:24,566
that the content is encrypted,
it is going to call back


200
00:10:24,566 --> 00:10:26,166
into your delegate, telling it


201
00:10:26,166 --> 00:10:28,026
that it needs a key
to play the content.


202
00:10:28,506 --> 00:10:31,166
The delegate is going to
handle that by calling


203
00:10:31,306 --> 00:10:34,846
into AVFoundation and asking
it to create what we refer


204
00:10:34,846 --> 00:10:37,086
to as the Server
Playback Context.


205
00:10:37,976 --> 00:10:40,866
In FPS parlance we
use SPC for short.


206
00:10:40,916 --> 00:10:43,896
And what that is,
is a key request


207
00:10:43,896 --> 00:10:47,406
that your delegate then is
going to post to your key server


208
00:10:47,406 --> 00:10:50,666
in order for the key
server to do its job


209
00:10:50,666 --> 00:10:51,806
and deliver the content key.


210
00:10:52,216 --> 00:10:56,296
What is important to note here
is that the SPC is created


211
00:10:56,296 --> 00:11:01,046
in a FairPlay Streaming
delivery context on the client.


212
00:11:01,496 --> 00:11:05,676
And that is a session-specific
context that only


213
00:11:05,676 --> 00:11:07,806
that device was able to create,


214
00:11:07,806 --> 00:11:09,776
for which that device
will only be able


215
00:11:09,776 --> 00:11:11,986
to process the response
from the server.


216
00:11:11,986 --> 00:11:13,806
It is tied to the device
and to that session.


217
00:11:14,676 --> 00:11:18,926
So then your server is going
to make use of the KSM to crack


218
00:11:19,006 --> 00:11:22,536
that SPC queue request open,
validate it from a format point


219
00:11:22,536 --> 00:11:24,346
of view and from a
cryptographic point of view,


220
00:11:24,716 --> 00:11:26,566
and look up the corresponding
content key


221
00:11:26,566 --> 00:11:27,896
in the key server database.


222
00:11:28,586 --> 00:11:30,906
It's going to then wrap
that content key value


223
00:11:30,966 --> 00:11:34,836
into what we refer to as
a content key context,


224
00:11:35,156 --> 00:11:38,666
or CKC for short,
and the last step


225
00:11:38,666 --> 00:11:40,486
that your app delegate
is going to perform,


226
00:11:40,486 --> 00:11:43,516
is provide that CKC
back to AVFoundation.


227
00:11:44,456 --> 00:11:46,836
So, at this point the device
has everything it needs


228
00:11:46,836 --> 00:11:48,936
to decrypt and play the content.


229
00:11:49,636 --> 00:11:52,906
So now that we've covered
the actors and the data flows


230
00:11:52,906 --> 00:11:54,186
in a FairPlay Streaming system,


231
00:11:54,186 --> 00:11:55,666
let's talk about
what Apple provides.


232
00:11:56,586 --> 00:11:58,796
We provide AVFoundation,
of course.


233
00:11:58,856 --> 00:12:03,076
And part of AVFoundation in
iOS and Mac OS is the API


234
00:12:03,076 --> 00:12:05,736
that you are going to be using
to implement the delegate.


235
00:12:06,536 --> 00:12:09,546
Another thing we provide is
the FairPlay Streaming SDK


236
00:12:09,996 --> 00:12:11,426
on developer.apple.com.


237
00:12:11,936 --> 00:12:13,886
And that SDK contains a
certain number of things.


238
00:12:13,886 --> 00:12:17,026
First of all, it contains
a protocol specification


239
00:12:17,196 --> 00:12:20,316
that has all the
details on how the SPC


240
00:12:20,456 --> 00:12:22,726
and the CKC messages
are formatted,


241
00:12:23,096 --> 00:12:25,076
and which cryptographic
primitives you are going to use


242
00:12:25,076 --> 00:12:27,766
to process the incoming
key requests


243
00:12:27,766 --> 00:12:29,796
and also generate
the key response.


244
00:12:30,656 --> 00:12:34,996
It contains a key security
module server reference


245
00:12:34,996 --> 00:12:36,746
implementation in NCC.


246
00:12:37,826 --> 00:12:41,046
It contains a full suite
of server test vectors


247
00:12:41,046 --> 00:12:42,636
and validation tools
that you can use


248
00:12:42,636 --> 00:12:43,676
for your server development.


249
00:12:44,406 --> 00:12:47,346
It contains some
client-side example content.


250
00:12:48,466 --> 00:12:55,486
And the last bit it contains is
a set of client example code.


251
00:12:56,366 --> 00:13:00,136
So the responsibilities of your
key server are going to be,


252
00:13:00,136 --> 00:13:02,836
as Roger pointed out, first
of all, the decryption


253
00:13:02,836 --> 00:13:05,036
and the validation of
the SPC key request.


254
00:13:05,616 --> 00:13:07,966
Then it is going to look
up the content key based


255
00:13:07,966 --> 00:13:10,466
on the asset identifier that
the customer wants to play,


256
00:13:10,526 --> 00:13:13,336
and then it is going to
produce the CKC response.


257
00:13:13,336 --> 00:13:15,326
It's the first and third
operation that are going


258
00:13:15,326 --> 00:13:17,056
to be taking place in your KSM.


259
00:13:17,056 --> 00:13:21,386
And the way you go about
implementing that is two fold.


260
00:13:21,386 --> 00:13:23,896
You can either decide
to implement the logic


261
00:13:23,896 --> 00:13:26,576
from scratch using the protocol
specification that's provided


262
00:13:26,576 --> 00:13:27,716
in the FPS SDK.


263
00:13:28,546 --> 00:13:33,506
Or you can just take the
C reference implementation


264
00:13:33,506 --> 00:13:37,006
and customize it either by
using your language of choice


265
00:13:37,006 --> 00:13:40,646
or by integrating it directly
into your existing key server.


266
00:13:41,226 --> 00:13:43,376
So now that that's integrated,


267
00:13:43,376 --> 00:13:45,716
let's talk about how you
are going to test the KSM.


268
00:13:46,906 --> 00:13:48,756
Well, the first thing we
recommend you do is obviously


269
00:13:48,756 --> 00:13:51,266
use the supplied test vectors
that are part of the SDK


270
00:13:51,976 --> 00:13:53,846
to validate the correctness
of the responses


271
00:13:53,846 --> 00:13:55,256
that your KSM is
going to produce.


272
00:13:55,256 --> 00:13:56,396
And the way you go about doing


273
00:13:56,396 --> 00:14:01,066
that is using the
supplied SPC test vectors,


274
00:14:01,386 --> 00:14:04,156
feed them to your
KSM implementation,


275
00:14:04,546 --> 00:14:08,036
and then run the output
CKC that your KSM produced


276
00:14:08,426 --> 00:14:11,246
through the validation tool to
make sure they are correct both


277
00:14:11,246 --> 00:14:13,006
from a cryptographic
point of view


278
00:14:13,276 --> 00:14:14,566
and from a format point of view.


279
00:14:15,216 --> 00:14:17,686
It is important to note that
the test vectors we provide


280
00:14:17,686 --> 00:14:20,836
in the SDK are based on
development credentials.


281
00:14:20,836 --> 00:14:24,396
And they are there exclusively
for your development effort.


282
00:14:24,396 --> 00:14:26,856
They cannot be used
to deploy a solution


283
00:14:26,856 --> 00:14:28,636
to live customer devices.


284
00:14:28,636 --> 00:14:31,706
To do that you're going to
need production FairPlay


285
00:14:31,706 --> 00:14:32,626
Streaming credentials.


286
00:14:33,156 --> 00:14:35,096
So now that we've talked
about the server side,


287
00:14:35,436 --> 00:14:36,646
let's talk about
the client side.


288
00:14:36,646 --> 00:14:38,406
What does it take to
integrate FairPlay Streaming


289
00:14:38,406 --> 00:14:39,366
into your application?


290
00:14:39,366 --> 00:14:40,336
Well, the first thing
you're going to want


291
00:14:40,336 --> 00:14:43,996
to do is register an AV asset
resource loader delegate


292
00:14:44,266 --> 00:14:46,316
with AVAsset, and
the responsibilities


293
00:14:46,316 --> 00:14:48,446
of that delegate are three fold.


294
00:14:48,446 --> 00:14:50,496
The first thing it's going to
be doing is generating the SPC.


295
00:14:50,496 --> 00:14:53,646
And you do that by
implementing these two steps.


296
00:14:53,646 --> 00:14:56,026
You're first going to handle
'should wait for loading


297
00:14:56,026 --> 00:14:58,456
of requested resource'
for the key requests.


298
00:14:59,086 --> 00:15:00,336
And then second of
all you're going


299
00:15:00,336 --> 00:15:03,686
to call 'AVAsset resource
loading request streaming


300
00:15:03,686 --> 00:15:07,326
content key request data
for app' to produce the SPC.


301
00:15:07,326 --> 00:15:10,436
Once you've got that SPC
in hand, you're going


302
00:15:10,436 --> 00:15:11,896
to send it to your key server.


303
00:15:12,366 --> 00:15:14,326
And when your key server
responds, you're going


304
00:15:14,326 --> 00:15:15,556
to provide the CKC response


305
00:15:15,556 --> 00:15:17,566
to 'AVAsset resource
loading request.'


306
00:15:18,456 --> 00:15:20,146
So we've got the
server side implemented;


307
00:15:20,146 --> 00:15:21,476
we've got the client
side implemented.


308
00:15:21,476 --> 00:15:23,836
Let's talk about
the workflow updates


309
00:15:23,836 --> 00:15:25,016
in your content authoring.


310
00:15:25,676 --> 00:15:28,066
What are you going to have
to do to encrypt the content?


311
00:15:28,066 --> 00:15:30,546
Well, the first thing you should
do is go pull the HLS Sample


312
00:15:30,546 --> 00:15:33,376
Encryption specifications
from developer.apple.com,


313
00:15:33,716 --> 00:15:36,536
and that will provide you with
all the details you need to know


314
00:15:36,536 --> 00:15:39,716
about encrypting the bit stream
itself, whether audio or video.


315
00:15:39,716 --> 00:15:43,116
Once you have got that bit
stream encrypted you're going


316
00:15:43,116 --> 00:15:45,686
to have to update the
m3u8 playlist to signal,


317
00:15:45,686 --> 00:15:47,996
first of all, what type of
encryption mode you use.


318
00:15:48,056 --> 00:15:50,486
And that, you do that by
setting the method tag


319
00:15:50,966 --> 00:15:53,426
in the m3u8 playlist
to Sample-AES.


320
00:15:54,636 --> 00:15:57,906
Another signal you want to
send to the client is the fact


321
00:15:57,906 --> 00:16:00,066
that you want to use FairPlay
Streaming for the key delivery.


322
00:16:00,066 --> 00:16:02,786
And the way you do that is
an update to another tag


323
00:16:03,206 --> 00:16:05,456
in the m3u8 playlist,
that's the key format tag,


324
00:16:05,496 --> 00:16:07,726
you want it to set it to
com.apple.streamingkeydelivery.


325
00:16:10,256 --> 00:16:12,956
The fact that we've deployed it
for over three years now means


326
00:16:12,956 --> 00:16:15,236
that there's quite some
third-party support


327
00:16:15,236 --> 00:16:16,916
in the encoders out
there right now.


328
00:16:16,916 --> 00:16:19,966
And you can choose to go with
one of those as an alternative


329
00:16:19,966 --> 00:16:22,356
to making updates to
the workflow yourself.


330
00:16:23,426 --> 00:16:26,086
Once you have got your workflow
updated, here is how you go


331
00:16:26,086 --> 00:16:29,406
about checking the correctness
of that encryption workflow.


332
00:16:30,496 --> 00:16:33,896
You can do basically
two comparisons.


333
00:16:34,076 --> 00:16:36,616
But they both start
in the same way.


334
00:16:36,616 --> 00:16:39,636
You start by taking a
clear text piece of content


335
00:16:40,006 --> 00:16:43,956
from the sample SDK and run
that through your new workflow.


336
00:16:43,956 --> 00:16:46,236
And then you can
compare it either


337
00:16:46,236 --> 00:16:52,666
to the same encrypted asset in
the SDK, or you can compare it


338
00:16:52,666 --> 00:16:55,576
to an encrypted version
of that asset that you run


339
00:16:55,656 --> 00:16:57,346
through the HLS media
file segmenter.


340
00:16:57,666 --> 00:16:59,466
The reason why the second
point is interesting is


341
00:16:59,466 --> 00:17:01,536
because you can do it with
your own content as well rather


342
00:17:01,536 --> 00:17:02,486
than the sample content.


343
00:17:03,866 --> 00:17:05,496
So now that we've talked
about what it takes


344
00:17:05,496 --> 00:17:08,185
to develop the client
side and the server side,


345
00:17:08,185 --> 00:17:11,246
and updates to your
workflow, that leads us


346
00:17:11,246 --> 00:17:12,626
to functional local playback.


347
00:17:12,626 --> 00:17:13,616
I would like to now talk to you


348
00:17:13,616 --> 00:17:15,646
about FairPlay Streaming
support in AirPlay.


349
00:17:15,705 --> 00:17:19,296
And the support we have
for FairPlay Streaming


350
00:17:19,296 --> 00:17:23,445
and AirPlay is through
the AirPlay video path.


351
00:17:23,806 --> 00:17:26,776
And what that means is
that when you transition


352
00:17:26,776 --> 00:17:29,806
from local playback in your
application to the Apple TV,


353
00:17:29,806 --> 00:17:32,786
it is actually the Apple
TV that is pulling the bits


354
00:17:32,786 --> 00:17:34,406
from the Internet, right?


355
00:17:34,496 --> 00:17:36,766
It is not the sender
device anymore.


356
00:17:37,916 --> 00:17:40,636
And the good news here is that
no new additional code needs


357
00:17:40,636 --> 00:17:42,456
to be written either
in your application


358
00:17:42,456 --> 00:17:43,376
or on the server side.


359
00:17:43,376 --> 00:17:48,726
The KSM supports processing
increment key requests,


360
00:17:49,176 --> 00:17:51,176
both whether they are
coming from an Apple TV


361
00:17:51,176 --> 00:17:53,186
or from an iOS device.


362
00:17:53,826 --> 00:17:58,626
To be clear, the SPC is still
generated on the Apple TV


363
00:17:59,146 --> 00:18:01,806
and the CKC response that your
key server is producing will


364
00:18:01,806 --> 00:18:03,886
also be processed
on the Apple TV.


365
00:18:05,146 --> 00:18:07,076
However, your app
is still responsible


366
00:18:07,076 --> 00:18:08,376
for relaying the messages


367
00:18:08,376 --> 00:18:10,736
between the Apple TV
and the key server.


368
00:18:10,736 --> 00:18:12,676
So the sending device
has to be present.


369
00:18:13,316 --> 00:18:17,396
This gives us the same level
of security as local playback


370
00:18:17,446 --> 00:18:21,516
because the SPC and CKC
messages both originate and end


371
00:18:21,676 --> 00:18:23,896
on the device that is
actually playing the content,


372
00:18:24,006 --> 00:18:26,226
the Apple TV, in this
case, in the AirPlay case.


373
00:18:28,016 --> 00:18:30,136
One important point
to note is the fact


374
00:18:30,186 --> 00:18:32,626
that FairPlay Streaming
content will not be rendered


375
00:18:32,626 --> 00:18:33,856
in AirPlay Mirroring mode.


376
00:18:34,286 --> 00:18:36,996
That also applies to
screen shots and recordings


377
00:18:37,316 --> 00:18:39,086
for FairPlay Streaming
content that's played


378
00:18:39,086 --> 00:18:39,986
on your local device.


379
00:18:40,916 --> 00:18:43,026
So now that we've
spoken about how


380
00:18:43,026 --> 00:18:47,646
to consume the content locally
on your app or through AirPlay,


381
00:18:48,136 --> 00:18:50,346
I'm proud to announce this year


382
00:18:50,346 --> 00:18:52,926
that we are adding FairPlay
Streaming support to El Capitan.


383
00:18:54,656 --> 00:18:56,996
And the way we go about,
the way you would go


384
00:18:56,996 --> 00:18:59,876
about integrating this
into your website is


385
00:19:00,236 --> 00:19:03,216
through the encrypted media
extensions that are part


386
00:19:03,216 --> 00:19:07,136
of HTML5, that's a
W3C specification


387
00:19:07,136 --> 00:19:08,726
that you can download
on their website.


388
00:19:09,396 --> 00:19:13,246
The way you go about
integrating with EME is


389
00:19:13,306 --> 00:19:15,786
by writing your key
delivery code in JavaScript


390
00:19:15,916 --> 00:19:18,866
on your website, and
we provide an example


391
00:19:18,866 --> 00:19:21,146
of such an implementation
in the SDK.


392
00:19:21,146 --> 00:19:22,676
It is more of a snippet.


393
00:19:24,096 --> 00:19:29,006
The good news here is
that both on the KSM side


394
00:19:29,126 --> 00:19:32,666
and on the AirPlay side there
is no new code that is needed.


395
00:19:32,666 --> 00:19:34,486
It will work out of the box


396
00:19:34,906 --> 00:19:37,386
and everything is fully
supported once you have got your


397
00:19:37,386 --> 00:19:38,196
JavaScript written.


398
00:19:38,196 --> 00:19:39,986
So now let's talk about the
JavaScript you are going


399
00:19:39,986 --> 00:19:41,956
to be writing to add support


400
00:19:41,956 --> 00:19:43,636
for FairPlay Streaming
in your Webpage.


401
00:19:43,636 --> 00:19:46,756
The first thing you're going
to do is set the m3u8 URL


402
00:19:47,066 --> 00:19:51,106
as a source attribute of the
HTML5 video tag as you would


403
00:19:51,816 --> 00:19:53,426
for a non-encrypted
piece of content.


404
00:19:54,406 --> 00:19:56,066
Then you are going to
add an event listener


405
00:19:56,066 --> 00:20:00,636
for the Web kit need key
call to the video element.


406
00:20:01,536 --> 00:20:03,926
That event listener
when triggered is going


407
00:20:03,926 --> 00:20:06,466
to set the EME content
decryption module


408
00:20:06,466 --> 00:20:07,636
to FairPlay Streaming.


409
00:20:07,636 --> 00:20:11,136
It is also going to create
a key session on video/MP4


410
00:20:11,206 --> 00:20:13,466
to relay the messages
between the key system


411
00:20:13,466 --> 00:20:14,526
and your key server.


412
00:20:15,126 --> 00:20:16,726
And you're going to
add an event handler


413
00:20:16,726 --> 00:20:19,276
for web kit key message
to that key session.


414
00:20:19,776 --> 00:20:22,236
That event handler is going to
be the one that's responsible


415
00:20:22,236 --> 00:20:25,056
for sending the SPC key
request to your key server


416
00:20:25,416 --> 00:20:28,476
and then processing
the CKC response


417
00:20:28,796 --> 00:20:30,046
by updating the key session.


418
00:20:31,126 --> 00:20:33,916
In terms of the data flow,
we've got very similar actors


419
00:20:33,916 --> 00:20:34,776
on the left-hand side.


420
00:20:34,776 --> 00:20:36,766
We have the same ones
on the right-hand side.


421
00:20:36,766 --> 00:20:39,776
We have got Safari now
that Apple provides,


422
00:20:39,776 --> 00:20:41,226
along with the EME stack.


423
00:20:41,706 --> 00:20:45,026
Within Safari we have got
your site, and the new piece


424
00:20:45,026 --> 00:20:46,766
of JavaScript code that
you are going to be writing


425
00:20:47,116 --> 00:20:50,076
to support FairPlay
Streaming content playback


426
00:20:50,076 --> 00:20:50,696
in your website.


427
00:20:51,326 --> 00:20:54,146
Let's talk about what happens


428
00:20:54,146 --> 00:20:56,116
when the user hits
play in Safari.


429
00:20:56,116 --> 00:20:57,416
So, the user hits play.


430
00:20:57,416 --> 00:20:59,496
The first thing that is going
to happen is, obviously,


431
00:20:59,496 --> 00:21:03,376
the m3u8 is going to hit
the EME and AVFoundation


432
00:21:03,516 --> 00:21:06,006
in the operating system,
and EME is going to notice


433
00:21:06,046 --> 00:21:09,006
that the content is encrypted,
which is going to cause it


434
00:21:09,186 --> 00:21:12,786
to trigger the Web
kit need key message


435
00:21:12,786 --> 00:21:14,366
that your event listener
is going to receive.


436
00:21:16,396 --> 00:21:18,556
Then your event listener is
going to create the key session


437
00:21:18,556 --> 00:21:21,086
and is going to wait for
the Web kit key message,


438
00:21:21,186 --> 00:21:23,176
which in turn is going
to trigger the handler,


439
00:21:23,826 --> 00:21:26,666
and that handler is
going to receive the SPC,


440
00:21:26,726 --> 00:21:29,526
send it over to your key server,
which is going to process it


441
00:21:29,526 --> 00:21:31,076
as usual, pull the content key


442
00:21:31,146 --> 00:21:34,746
and then create the content key
response, send that CKC back


443
00:21:34,816 --> 00:21:37,576
to your JavaScript, which
will provide it back


444
00:21:37,616 --> 00:21:39,906
down to the EME layer
for playback.


445
00:21:41,126 --> 00:21:45,746
As Roger described, we've had
this solution deployed now


446
00:21:45,746 --> 00:21:49,986
for over three years, and over
the years we've learned a few


447
00:21:49,986 --> 00:21:53,676
tips and tricks on how to
troubleshoot integrating issues


448
00:21:53,916 --> 00:21:55,726
with FairPlay Streaming.


449
00:21:56,256 --> 00:21:58,876
And the typical issue
you may be facing,


450
00:21:59,596 --> 00:22:02,186
if unfortunately something goes
wrong with your integration,


451
00:22:02,466 --> 00:22:03,666
is that content doesn't play.


452
00:22:04,366 --> 00:22:08,086
So how do you go about
debugging that situation?


453
00:22:08,276 --> 00:22:11,286
Well, one thing we
recommend you do is --


454
00:22:11,286 --> 00:22:13,486
and this is for debug purposes
only, we don't recommend


455
00:22:13,486 --> 00:22:14,946
that you do this in a
production environment, but --


456
00:22:15,366 --> 00:22:19,196
set your key format tag in
the m3u8 playlist to identity,


457
00:22:19,806 --> 00:22:22,126
instead of
com.apple.streamingkeydelivery.


458
00:22:22,506 --> 00:22:25,956
What this does is, it allows
the same content to get


459
00:22:25,956 --> 00:22:28,536
to your client, but
instead of decrypting it


460
00:22:28,536 --> 00:22:29,916
with FairPlay Streaming,
it decrypts it


461
00:22:29,916 --> 00:22:31,716
with a clear text AES key.


462
00:22:32,596 --> 00:22:36,016
And what we end up is either
in one of two situations.


463
00:22:36,016 --> 00:22:37,446
Your content is still
not playing,


464
00:22:37,766 --> 00:22:41,686
in which case this is probably
facing a content authoring


465
00:22:41,686 --> 00:22:43,976
issue, and those
issues typically fall


466
00:22:43,976 --> 00:22:45,156
into one of four buckets.


467
00:22:45,776 --> 00:22:49,226
Either your sample of
encryption has an issue and in


468
00:22:49,226 --> 00:22:50,206
that case I'd refer you


469
00:22:50,206 --> 00:22:53,226
to the HLS Sample
encryption specification.


470
00:22:53,556 --> 00:22:56,126
It could be an issue with
your PAT/PMT audio set up.


471
00:22:56,406 --> 00:22:59,636
Those are steps that you need
to perform on audio streams


472
00:22:59,636 --> 00:23:01,216
that are encoded,
that are encrypted


473
00:23:01,216 --> 00:23:02,246
with FairPlay Streaming.


474
00:23:02,246 --> 00:23:04,706
There are a few metadata
updates that need to happen.


475
00:23:05,776 --> 00:23:07,336
It may be the case that
you are not using one


476
00:23:07,336 --> 00:23:08,396
of the supported codecs.


477
00:23:08,396 --> 00:23:10,676
And as Roger mentioned earlier,
what we support right now


478
00:23:10,676 --> 00:23:15,066
in FairPlay Streaming is
H.264, AAC, and encrypted AC3.


479
00:23:15,726 --> 00:23:18,406
Last but not least, it may be
you are rotating your content


480
00:23:18,466 --> 00:23:21,866
key on something that
isn't an HLS segment.


481
00:23:22,316 --> 00:23:26,106
So we recommend that you rotate
your keys either on HLS segments


482
00:23:26,186 --> 00:23:28,736
at the most granular level
or you can also decide


483
00:23:28,736 --> 00:23:32,386
to change your content key
value on a bit rate switch.


484
00:23:33,336 --> 00:23:37,096
If your content is playing after
you update the key format tag


485
00:23:37,166 --> 00:23:40,196
to identity, you are probably
facing a key delivery issue.


486
00:23:40,706 --> 00:23:43,696
And in that case, what you
want to do is you want to trace


487
00:23:43,796 --> 00:23:45,306
through the data
flow that we went


488
00:23:45,896 --> 00:23:48,366
through in the earlier
diagrams, and make sure


489
00:23:48,396 --> 00:23:50,546
that the SPC is properly
generated by the client,


490
00:23:50,546 --> 00:23:53,396
that it's sent to your server,
that your server can process


491
00:23:53,456 --> 00:23:55,236
that key request
without any failures,


492
00:23:55,416 --> 00:23:57,776
that your server is looking up
the right key in the database,


493
00:23:58,156 --> 00:24:02,206
that your server is also capable
of packaging the content key


494
00:24:02,206 --> 00:24:05,196
into content key response,
and that the client is able


495
00:24:05,196 --> 00:24:06,876
to process that without
any errors.


496
00:24:08,026 --> 00:24:11,706
So, now that we went
over all the various ways


497
00:24:11,936 --> 00:24:15,296
of consuming FairPlay Streaming
content in the Apple ecosystem,


498
00:24:15,296 --> 00:24:17,246
I would like to hand it back to
Roger to wrap the session up.


499
00:24:17,246 --> 00:24:17,976
Thank you very much
for your time.


500
00:24:18,516 --> 00:24:25,256
[Applause]


501
00:24:25,756 --> 00:24:26,966
>> ROGER PANTOS:
Thanks very much, GP.


502
00:24:27,486 --> 00:24:29,246
So, let's do a quick recap here.


503
00:24:30,086 --> 00:24:34,936
FairPlay Streaming for HTTP
Live Streaming, it provides you


504
00:24:34,936 --> 00:24:38,956
with industrial strength
tools to protect your content


505
00:24:39,316 --> 00:24:40,826
with HTTP live streaming.


506
00:24:40,826 --> 00:24:44,566
You have got it available
on iOS,


507
00:24:44,656 --> 00:24:49,156
on Apple TV, and now on OS X.


508
00:24:49,156 --> 00:24:52,416
iOS, it's available since iOS
6, so there's a fair amount


509
00:24:52,416 --> 00:24:56,806
of backward compatibility,
and also on Apple TV.


510
00:24:57,236 --> 00:25:00,176
OS X is a little bit newer, and
so you can come down and talk


511
00:25:00,176 --> 00:25:02,796
to us in the labs, and we
will give you the entire scoop


512
00:25:02,796 --> 00:25:03,796
on where you can use it.


513
00:25:03,946 --> 00:25:07,356
It has been deeply
integrated into the OS.


514
00:25:07,436 --> 00:25:10,676
That means that it is down
as low as we can get it,


515
00:25:10,756 --> 00:25:12,126
as secure as we can make it.


516
00:25:12,436 --> 00:25:14,896
It is as power efficient
as we can do.


517
00:25:15,206 --> 00:25:16,866
And so it gives you
great battery life


518
00:25:16,866 --> 00:25:18,086
as well as great security.


519
00:25:19,036 --> 00:25:22,996
And it also supports all
of our ecosystem features


520
00:25:23,346 --> 00:25:28,946
such as AirPlay, such as HDCP,
HTML5, and we will continue


521
00:25:28,946 --> 00:25:32,566
to do so as we roll out
new features going forward.


522
00:25:34,256 --> 00:25:38,346
So, what's next?


523
00:25:38,346 --> 00:25:41,886
First stop is our new
FairPlay Streaming portal


524
00:25:42,116 --> 00:25:44,046
on developer.apple.com.


525
00:25:44,086 --> 00:25:46,186
It's live now, so you
can go there, you know,


526
00:25:46,646 --> 00:25:48,466
you can go there right now.


527
00:25:48,466 --> 00:25:51,476
And you can, from there
you can download the SDK.


528
00:25:51,476 --> 00:25:53,976
You can look at the
overview document


529
00:25:53,976 --> 00:25:57,196
that gives you a little bit
of a deeper insight into some


530
00:25:57,196 --> 00:25:58,756
of the details of
FairPlay Streaming.


531
00:25:59,246 --> 00:26:01,706
And you can also,
through that site,


532
00:26:01,706 --> 00:26:04,696
apply for your production
developer credentials


533
00:26:04,696 --> 00:26:08,786
that are necessary for you to
do your round trip playback


534
00:26:09,116 --> 00:26:12,536
to an actual iOS
device or Safari.


535
00:26:13,416 --> 00:26:18,846
And the next thing, and I
should also mention, actually,


536
00:26:18,846 --> 00:26:22,156
that on that site, on
that landing page there,


537
00:26:22,506 --> 00:26:27,776
there may be some of you who
don't have an existing back end


538
00:26:28,146 --> 00:26:31,246
or are a little bit
intimidated by the idea


539
00:26:31,246 --> 00:26:34,246
of integrating FairPlay
Streaming into that back end.


540
00:26:34,616 --> 00:26:38,566
So on that landing page
we have a little list


541
00:26:38,856 --> 00:26:42,846
of integration partners we've
worked with, folks like Irdeto,


542
00:26:42,846 --> 00:26:49,796
folks like Adobe, who have
set up some support for folks


543
00:26:49,796 --> 00:26:52,276
who wish to use FairPlay
Streaming


544
00:26:52,516 --> 00:26:54,096
to protect their HLS content.


545
00:26:54,176 --> 00:26:57,026
And so I would recommend
checking


546
00:26:57,026 --> 00:26:58,116
out those folks as well.


547
00:26:58,116 --> 00:26:59,936
If you feel like you
need a little bit


548
00:26:59,936 --> 00:27:01,736
of help getting FairPlay
Streaming up


549
00:27:01,736 --> 00:27:03,886
and running for your content.


550
00:27:04,536 --> 00:27:06,486
It is, it's, I think
it's pretty easy to do,


551
00:27:06,486 --> 00:27:08,796
but not everyone is
in that business.


552
00:27:08,796 --> 00:27:10,886
And so there's help for
you there if you need it.


553
00:27:11,606 --> 00:27:18,276
Also, if you would like to
get HLS and FPS working,


554
00:27:18,616 --> 00:27:21,846
and it feels a little bit
like there're still questions


555
00:27:21,846 --> 00:27:23,426
or you've tried it and
you've got some problems,


556
00:27:23,776 --> 00:27:25,356
if you are not at WWDC,


557
00:27:25,976 --> 00:27:29,946
then your best first stop
is our developer forums.


558
00:27:30,106 --> 00:27:32,236
And we've actually
set up, I believe it's


559
00:27:32,236 --> 00:27:34,486
in the beta section
right now, but we've set


560
00:27:34,486 --> 00:27:37,816
up a new forum specifically
for FairPlay Streaming.


561
00:27:38,226 --> 00:27:41,226
And so check that out.


562
00:27:41,346 --> 00:27:43,146
If you are running
into a problem


563
00:27:43,146 --> 00:27:45,466
or you have got a question,
there's pretty good odds


564
00:27:45,526 --> 00:27:48,846
that somebody else has had the
same question, same problem,


565
00:27:49,106 --> 00:27:50,526
and you might just be
able to find the answer


566
00:27:50,526 --> 00:27:52,786
by looking in the forums.


567
00:27:52,846 --> 00:27:54,536
Failing that, there
is, of course,


568
00:27:54,536 --> 00:27:56,476
your friendly neighborhood
developer tech support


569
00:27:56,786 --> 00:27:59,786
representative who will be happy
to assist you for a small fee.


570
00:28:00,436 --> 00:28:02,516
I think that's it.


571
00:28:03,886 --> 00:28:05,046
Thank you again for coming.


572
00:28:05,366 --> 00:28:06,806
And have a great show!


573
00:28:07,508 --> 00:28:09,508
[Applause]

