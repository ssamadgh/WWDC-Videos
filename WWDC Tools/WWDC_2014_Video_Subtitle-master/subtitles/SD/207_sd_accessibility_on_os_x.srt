1
00:00:13,046 --> 00:00:16,406
>> Welcome, welcome to Session
207: Accessibility on OS X.


2
00:00:16,406 --> 00:00:18,976
My name is Patti Hoa.


3
00:00:18,976 --> 00:00:22,046
I'm a software engineer on
the OS X Accessibility team.


4
00:00:22,716 --> 00:00:27,396
Today my colleague Chris Dolan
and I are extremely excited


5
00:00:27,396 --> 00:00:30,886
to tell you about this brand
new API was have installed


6
00:00:30,886 --> 00:00:33,866
for you that's designed
to make your life simpler.


7
00:00:34,426 --> 00:00:38,216
But before I talk about
that, I want to just touch


8
00:00:38,216 --> 00:00:42,656
up on the importance of
accessibility, and what it means


9
00:00:42,766 --> 00:00:46,536
for your application to
be accessible to everyone.


10
00:00:47,236 --> 00:00:51,876
Then I'll show you some examples
of how to use this new API


11
00:00:52,656 --> 00:00:55,156
to make some UI's accessible,


12
00:00:55,676 --> 00:00:58,836
and then I'll also show you
some tools that you can use


13
00:00:58,836 --> 00:01:00,246
to verify your changes.


14
00:01:01,346 --> 00:01:04,926
Then in the latter half of this
session, Chris will come up


15
00:01:05,275 --> 00:01:09,066
and give you a live demo of
making a game accessible.


16
00:01:09,586 --> 00:01:12,906
So, at Apple, we really care


17
00:01:12,906 --> 00:01:17,456
about providing the best
platform for all users to have


18
00:01:17,456 --> 00:01:19,826
that great and wonderful
experience


19
00:01:20,136 --> 00:01:22,116
when using your application.


20
00:01:22,776 --> 00:01:25,486
And when I say all
users, I mean users


21
00:01:25,616 --> 00:01:28,506
with various ranges
of abilities.


22
00:01:29,276 --> 00:01:33,576
That includes those who may be
visually challenged, and may...


23
00:01:33,576 --> 00:01:38,096
(excuse me) ...those who
may be visually challenged


24
00:01:38,096 --> 00:01:41,386
and have trouble seeing
the colors and the graphics


25
00:01:41,386 --> 00:01:45,716
on the application: those who
are deaf and hard-of-hearing,


26
00:01:45,716 --> 00:01:48,386
who may not be able to
hear the sound feedback


27
00:01:48,386 --> 00:01:53,176
in the application; those who
may have mobility limitation,


28
00:01:53,436 --> 00:01:56,636
and may not be able to use the
physical mouse or keyboard.


29
00:01:57,146 --> 00:02:01,296
Well to achieve the
goal of making sure


30
00:02:01,296 --> 00:02:03,916
that everyone could
have equal access,


31
00:02:04,316 --> 00:02:08,076
at Apple we work really
hard to provide tons


32
00:02:08,076 --> 00:02:11,656
of accessibility solutions
built right into OS X,


33
00:02:11,656 --> 00:02:15,836
and that includes products
such as: VoiceOver,


34
00:02:16,196 --> 00:02:19,816
designed for the visually
impaired user; Switch Control,


35
00:02:20,146 --> 00:02:23,056
designed for mobility impaired
users who may only be able


36
00:02:23,056 --> 00:02:26,236
to use a single switch
to operate the computer;


37
00:02:26,936 --> 00:02:32,186
Closed Captioning for the deaf
and hard of hearing; and tons


38
00:02:32,186 --> 00:02:35,786
and tons of other great
accessibility features built


39
00:02:35,786 --> 00:02:36,786
right into OS X.


40
00:02:37,756 --> 00:02:42,066
But all of these features
are simply tools for the user


41
00:02:42,066 --> 00:02:43,966
to use your application.


42
00:02:45,766 --> 00:02:50,106
After all, it's your application
that they're looking at, whether


43
00:02:50,106 --> 00:02:55,176
or not it's to read an
article or to watch a movie.


44
00:02:55,776 --> 00:02:59,066
It is your application that
they're interacting with,


45
00:02:59,366 --> 00:03:05,156
whether it's to play a game
or to write a term paper.


46
00:03:05,156 --> 00:03:07,676
It's your application
at the end of the day


47
00:03:07,866 --> 00:03:10,636
that they're looking
forward to use every day.


48
00:03:10,636 --> 00:03:13,246
So how do you make sure


49
00:03:13,246 --> 00:03:16,326
that your application is
accessible to everyone?


50
00:03:17,206 --> 00:03:19,686
Well we've built a
foundation for you


51
00:03:19,686 --> 00:03:21,446
to build your application.


52
00:03:22,056 --> 00:03:25,456
And we have this what we
call "Accessibility API"


53
00:03:25,616 --> 00:03:28,276
that you can implement to
make sure your application's


54
00:03:28,276 --> 00:03:29,856
accessible to everyone.


55
00:03:30,526 --> 00:03:33,936
So, I want to spend the rest
of this session telling you


56
00:03:33,936 --> 00:03:38,176
about this API, but the first
thing I want to tell you is


57
00:03:38,226 --> 00:03:40,516
to give you the big picture


58
00:03:40,516 --> 00:03:43,866
of how this Accessibility
API works in the system.


59
00:03:44,636 --> 00:03:46,926
So first there's
your application,


60
00:03:47,076 --> 00:03:50,756
and then we have what we
call assistive softwares,


61
00:03:50,756 --> 00:03:54,746
such as VoiceOver and Switch
Control, that help users


62
00:03:54,966 --> 00:03:58,516
to perceive, understand, and
interact with your application.


63
00:03:58,516 --> 00:04:02,626
And that happens through a
channel, on what we call...


64
00:04:03,816 --> 00:04:05,986
Accessibility API.


65
00:04:06,766 --> 00:04:10,426
And so, that's what I want
to talk to you about today:


66
00:04:10,426 --> 00:04:15,486
it's this Accessibility API
which, for OS X Yosemite,


67
00:04:16,745 --> 00:04:19,466
we created from the ground
up -- this brand new API.


68
00:04:19,466 --> 00:04:22,506
I'm excited to tell
you about this.


69
00:04:22,766 --> 00:04:27,776
So, when we were first designing
this API we had a few things


70
00:04:27,776 --> 00:04:28,256
in mind...


71
00:04:29,276 --> 00:04:33,776
Actually, just one goal,
and that is to simplify --


72
00:04:33,776 --> 00:04:35,736
to make it easy for you to use.


73
00:04:36,546 --> 00:04:39,316
And to show you just how
easy it is to use this API,


74
00:04:39,886 --> 00:04:42,236
I'll walk you through
a few examples.


75
00:04:43,166 --> 00:04:46,786
So what you see on the screen
first is a window that contains,


76
00:04:47,356 --> 00:04:48,986
like, a media player controller.


77
00:04:49,056 --> 00:04:53,236
So what we're going to do is
focus on the UIs in the middle.


78
00:04:54,506 --> 00:04:58,406
What I see here is: a rewind,
play, and forward button.


79
00:04:59,096 --> 00:05:00,876
Well how did I come
to that conclusion?


80
00:05:01,546 --> 00:05:05,666
Because visually you can
see three distinct icons,


81
00:05:06,156 --> 00:05:09,066
and each of those icons
represents something.


82
00:05:10,226 --> 00:05:14,456
Well if you're not sighted, and
you depend on assistive software


83
00:05:14,456 --> 00:05:18,506
like VoiceOver to help you
perceive what's on the screen...


84
00:05:19,616 --> 00:05:23,046
Well, this is what a VoiceOver
user would probably see.


85
00:05:23,906 --> 00:05:24,966
Just a bunch of buttons.


86
00:05:25,676 --> 00:05:27,096
They wouldn't know
what to do with them.


87
00:05:28,246 --> 00:05:31,926
Even worse, if you
implemented them


88
00:05:31,926 --> 00:05:35,776
as custom views,
they'll see nothing.


89
00:05:36,726 --> 00:05:38,926
Not terribly accessible is it?


90
00:05:40,456 --> 00:05:42,216
Well today I'm going
to show you how


91
00:05:42,216 --> 00:05:44,016
to make these UIs accessible.


92
00:05:44,826 --> 00:05:48,676
So what we'll do first is
we'll focus on just one button


93
00:05:48,676 --> 00:05:50,696
in the middle: the Play button.


94
00:05:52,236 --> 00:05:55,306
If you say you're using
AppKit control you're in luck,


95
00:05:55,916 --> 00:05:59,236
because you get most of
that accessibility for free.


96
00:05:59,826 --> 00:06:05,186
By default, AppKit
will already fill


97
00:06:05,186 --> 00:06:07,676
in all the accessibility
information for that piece


98
00:06:07,676 --> 00:06:09,506
of UI knowing that
it's a button.


99
00:06:09,936 --> 00:06:11,366
However, AppKit is not psychic.


100
00:06:11,366 --> 00:06:14,506
It's not going to be able
to know what the function


101
00:06:14,506 --> 00:06:15,896
of that button will do.


102
00:06:16,216 --> 00:06:19,276
That's something only you,
the developer, will know...


103
00:06:19,636 --> 00:06:23,986
and so that's where you come
in: to help label this button.


104
00:06:24,446 --> 00:06:26,486
So, there's two ways
you could do it.


105
00:06:26,656 --> 00:06:30,096
You could go into Xcode
Identity Inspector.


106
00:06:30,816 --> 00:06:33,436
Under the Accessibility
Identity section,


107
00:06:33,436 --> 00:06:36,696
you could just add a
description: "Play."


108
00:06:37,286 --> 00:06:40,856
So this, you could do
that in your zip file.


109
00:06:41,246 --> 00:06:43,616
Or, if you'd like to do
this programmatically,


110
00:06:44,086 --> 00:06:46,726
you could simply go into
your initialization code


111
00:06:47,146 --> 00:06:52,306
and in your button cells simply
set the accessibility label


112
00:06:52,306 --> 00:06:58,366
property to be the localized
string that you want it to be.


113
00:06:58,496 --> 00:07:02,986
And with just that alone, now
a VoiceOver user could be able


114
00:07:02,986 --> 00:07:04,746
to be perceived this
as a Play button.


115
00:07:05,286 --> 00:07:08,756
What makes it so easy?


116
00:07:09,996 --> 00:07:13,516
Well with the new API --
which is a method-based API --


117
00:07:13,606 --> 00:07:16,826
we've converted all the
attributes into properties.


118
00:07:17,646 --> 00:07:23,686
So just like any objective-C
property, you could now get


119
00:07:23,686 --> 00:07:27,526
and set the property
directly on the object itself.


120
00:07:27,936 --> 00:07:29,526
So you no longer
have to subclass.


121
00:07:34,356 --> 00:07:37,306
So whenever possible,
use AppKit Control.


122
00:07:37,816 --> 00:07:41,146
But for any reason you can't
use AppKit Control and you have


123
00:07:41,146 --> 00:07:44,076
to do your own stuff, like
creating a custom view for each


124
00:07:44,076 --> 00:07:46,816
of the UIs, well in this case,


125
00:07:47,416 --> 00:07:49,736
obviously VoiceOver
will not be able


126
00:07:49,736 --> 00:07:51,116
to see anything on the screen.


127
00:07:51,116 --> 00:07:53,276
So now you're wondering, "Great,


128
00:07:53,836 --> 00:07:56,576
is there a lot more
I have to do?"


129
00:07:56,816 --> 00:08:01,746
Well the good thing
is: it's just as easy


130
00:08:01,746 --> 00:08:03,836
if you use this brand new API.


131
00:08:04,146 --> 00:08:06,916
You could continue to use
the accessibility property I


132
00:08:06,916 --> 00:08:07,596
just mentioned.


133
00:08:07,596 --> 00:08:09,916
I gave you an example
of tweaking one


134
00:08:09,916 --> 00:08:11,626
of the properties --
the label property.


135
00:08:12,006 --> 00:08:13,926
There's tons of properties
you could use.


136
00:08:13,926 --> 00:08:15,356
But one of the challenges


137
00:08:15,356 --> 00:08:17,366
for the developers
is knowing exactly


138
00:08:17,366 --> 00:08:19,066
which property you
have to implement.


139
00:08:19,666 --> 00:08:23,606
So now we've introduced an
accessibility protocol that's


140
00:08:23,606 --> 00:08:25,916
designed to take that
guesswork out of the equation.


141
00:08:26,056 --> 00:08:29,116
The protocols will guide you


142
00:08:29,116 --> 00:08:30,906
through that whole
implementation process


143
00:08:30,906 --> 00:08:33,506
so you know exactly which
property you have to implement,


144
00:08:34,046 --> 00:08:36,145
and we have protocols
that should cover most


145
00:08:36,145 --> 00:08:39,216
of the commonly used
types of UIs out there.


146
00:08:40,285 --> 00:08:42,586
So how do you go about
implementing this?


147
00:08:42,666 --> 00:08:44,686
Well first you have
to pick a protocol.


148
00:08:45,526 --> 00:08:48,156
So, we have a list of
protocols you could choose from.


149
00:08:48,536 --> 00:08:54,596
So you should pick one that
corresponds to the look and feel


150
00:08:54,596 --> 00:08:58,596
of your UI; the way or
the function of that UI.


151
00:08:59,176 --> 00:09:02,066
So in our case we have the
example I was showing you


152
00:09:02,156 --> 00:09:03,366
earlier with the Play button.


153
00:09:03,856 --> 00:09:05,496
It looks and behaves
like a button.


154
00:09:05,626 --> 00:09:07,406
So we're going to pick
the button protocol.


155
00:09:07,406 --> 00:09:11,326
So, in your interface
file simply say,


156
00:09:11,326 --> 00:09:14,106
adhere to the
NSAccessibilityButton.


157
00:09:14,966 --> 00:09:18,606
So now you add that;
you compile.


158
00:09:19,336 --> 00:09:19,906
The good thing is,


159
00:09:19,906 --> 00:09:22,246
now accessibility compiler
[1]will tell you...


160
00:09:23,386 --> 00:09:24,366
will give you some warning


161
00:09:24,366 --> 00:09:26,166
and tell you what you
need to implement.


162
00:09:26,626 --> 00:09:28,126
So in this case, you have


163
00:09:28,126 --> 00:09:31,156
to implement the
accessibilityPerformPress


164
00:09:31,676 --> 00:09:34,146
and accessibilityLabel methods.


165
00:09:34,416 --> 00:09:37,906
So let's go ahead and do that.


166
00:09:38,086 --> 00:09:41,586
So in your implementation
file, simply --


167
00:09:41,586 --> 00:09:44,266
for the accessibilityLabel
method --


168
00:09:44,606 --> 00:09:47,546
just return a localized
string of the word "play".


169
00:09:49,196 --> 00:09:51,686
For the
accessibilityPerformPress,


170
00:09:51,816 --> 00:09:57,886
we simply need to perform the
action of pressing that button.


171
00:09:58,496 --> 00:09:59,906
So what's next?


172
00:10:00,516 --> 00:10:01,616
There is no next step.


173
00:10:02,196 --> 00:10:03,086
That's all.


174
00:10:03,086 --> 00:10:05,176
That's just how easy it is


175
00:10:05,176 --> 00:10:08,316
to implement accessibility
even for a custom view.


176
00:10:08,316 --> 00:10:13,216
So what makes it so easy?


177
00:10:14,066 --> 00:10:17,066
Well it's because AppKit's doing
a lot of work on your behalf.


178
00:10:17,856 --> 00:10:21,886
By simply using this
protocol, AppKit will infer


179
00:10:21,886 --> 00:10:24,916
that these elements are
accessibility elements.


180
00:10:25,196 --> 00:10:27,856
And depending on which
protocol you use,


181
00:10:28,756 --> 00:10:31,716
AppKit will auto-populate
information


182
00:10:31,716 --> 00:10:32,796
like what the role is.


183
00:10:32,986 --> 00:10:36,846
So if, for example, if I use the
NSAccessibility button protocol,


184
00:10:37,106 --> 00:10:38,616
AppKit will automatically infer


185
00:10:38,616 --> 00:10:43,956
that the role for
this is "button."


186
00:10:44,106 --> 00:10:47,556
So as you can see how easy it
is to use, I also want to kind


187
00:10:47,556 --> 00:10:49,936
of give you a little bit more
detail about these protocols.


188
00:10:50,166 --> 00:10:53,596
First of all there's
the base protocol,


189
00:10:54,246 --> 00:10:57,386
which is what we call the
NSAccessibilityElement protocol.


190
00:10:57,976 --> 00:11:00,776
It has a few required
methods like the frame


191
00:11:00,776 --> 00:11:02,176
and the accessibility parent.


192
00:11:02,606 --> 00:11:04,086
Those are basic information


193
00:11:04,086 --> 00:11:06,576
that all accessibility
elements should have.


194
00:11:07,116 --> 00:11:09,806
And then you build
on top of that.


195
00:11:09,806 --> 00:11:11,476
We have all the other protocols,


196
00:11:12,076 --> 00:11:14,116
like the button protocol
I just talked about,


197
00:11:14,576 --> 00:11:17,396
which has two required
methods, the accessibilityLabel


198
00:11:17,446 --> 00:11:19,276
and the
accessibilityPerformPress.


199
00:11:19,706 --> 00:11:21,456
And as you saw earlier,


200
00:11:21,736 --> 00:11:25,356
Xcode compiler already warned
us about those methods.


201
00:11:31,046 --> 00:11:34,396
So that's just how easy it is
to implement a custom view.


202
00:11:35,216 --> 00:11:37,226
By the way, the protocols
are optional.


203
00:11:37,426 --> 00:11:39,876
So you don't have to
implement if you don't want to,


204
00:11:39,876 --> 00:11:41,946
but it's really, really handy.


205
00:11:42,856 --> 00:11:46,536
So let's go through another
example that's a little bit


206
00:11:46,536 --> 00:11:47,506
more complicated.


207
00:11:48,716 --> 00:11:53,296
On the screen you see six
different image shapes.


208
00:11:55,436 --> 00:11:58,986
The way the developer may have
implemented is simply a custom


209
00:11:58,986 --> 00:12:01,466
view where they're
doing their own drawing.


210
00:12:02,066 --> 00:12:07,976
So if you have something
like this,


211
00:12:08,176 --> 00:12:11,116
someone like a VoiceOver user
will still need to be able


212
00:12:11,116 --> 00:12:14,656
to know that there's
six distinct UIs sitting


213
00:12:14,656 --> 00:12:15,186
on the screen.


214
00:12:16,686 --> 00:12:21,396
So you have to give an
accessibility representation


215
00:12:21,586 --> 00:12:24,766
for each of the images that's
being displayed on the screen.


216
00:12:25,076 --> 00:12:30,336
So how do you do that for UIs
that you're rendering yourself


217
00:12:30,666 --> 00:12:32,636
and you don't have
an NSView backing?


218
00:12:33,976 --> 00:12:35,386
Well, for those of
you who are familiar


219
00:12:35,386 --> 00:12:37,636
with the old sample code,


220
00:12:37,636 --> 00:12:39,516
we have something called
[inaudible] element[2].


221
00:12:40,246 --> 00:12:43,766
And now with the new API we
have a formalized version


222
00:12:43,766 --> 00:12:46,356
of that called
NSAccessibilityElement.


223
00:12:46,626 --> 00:12:50,596
You can use this class
to support all those UIs


224
00:12:50,636 --> 00:12:54,006
that do not have a
backing in NSView.


225
00:12:54,366 --> 00:12:56,656
So let's see how you'd go
about implementing this.


226
00:12:57,326 --> 00:13:00,506
So for the example
earlier with the image --


227
00:13:01,086 --> 00:13:05,766
the six shape images -- for
each of those images you want


228
00:13:05,876 --> 00:13:09,036
to create an
NSAccessibilityElement instance


229
00:13:09,036 --> 00:13:11,446
for that.


230
00:13:12,296 --> 00:13:15,166
So you create one of those
instances, and then you set


231
00:13:15,166 --> 00:13:18,156
up some of the accessibility
properties for that,


232
00:13:18,196 --> 00:13:20,946
such as who the parent
is, what the role is...


233
00:13:21,076 --> 00:13:22,416
Well, in this case
we're just going


234
00:13:22,416 --> 00:13:23,916
to say these are image role.


235
00:13:23,916 --> 00:13:26,866
And then give it a unique label,


236
00:13:27,256 --> 00:13:29,566
and then set up what
the frame is.


237
00:13:30,596 --> 00:13:33,316
So when that custom view --


238
00:13:33,546 --> 00:13:35,396
containing custom
view is being asked


239
00:13:35,396 --> 00:13:38,206
for the accessibilityChildren,
then this is


240
00:13:38,206 --> 00:13:42,246
where you return your array
of NSAccessibilityElements.


241
00:13:44,746 --> 00:13:47,256
And one thing I do
want to note is:


242
00:13:47,726 --> 00:13:51,126
you should keep these
accessibility elements alive


243
00:13:51,416 --> 00:13:53,546
as long as they are on-screen.


244
00:13:54,006 --> 00:13:56,046
That's because assistive
software


245
00:13:56,046 --> 00:13:58,516
like VoiceOver could be
asking for information


246
00:13:58,516 --> 00:14:01,506
about these objects at any
time through IPC calls.


247
00:14:02,256 --> 00:14:05,976
So as long as they're on the
screen, cache them around.


248
00:14:10,346 --> 00:14:14,156
Okay so that was pretty simple,
even for something like that,


249
00:14:14,156 --> 00:14:16,026
where you are rendering
your own UI.


250
00:14:16,846 --> 00:14:19,366
So there might be a few
of you in the audience


251
00:14:19,466 --> 00:14:24,066
who may have already implemented
accessibility with the old API


252
00:14:24,266 --> 00:14:26,656
in your application
and you're wondering,


253
00:14:26,656 --> 00:14:28,716
"well how does this
apply to me?"


254
00:14:29,166 --> 00:14:31,606
Well, if you already
added accessibility


255
00:14:31,606 --> 00:14:35,196
into your application, there
is no extra work for you.


256
00:14:35,896 --> 00:14:39,946
Your old API code will
continue to work just fine


257
00:14:40,506 --> 00:14:44,466
because the new API is
binary and source compatible,


258
00:14:44,976 --> 00:14:46,076
so you don't have to worry.


259
00:14:46,456 --> 00:14:49,626
But if you do like to
try out the new API,


260
00:14:49,726 --> 00:14:53,816
and we do encourage you to do
so, you could continue to do so.


261
00:14:54,046 --> 00:14:58,166
The old code will continue to
work alongside the new code.


262
00:15:00,396 --> 00:15:03,426
So I just told you why you
should make your application


263
00:15:03,426 --> 00:15:07,096
accessible, and I ran
through a few examples of how


264
00:15:07,096 --> 00:15:11,216
to use this brand new API
to make some UIs accessible.


265
00:15:11,456 --> 00:15:15,946
You saw how quickly
and easily we were able


266
00:15:15,946 --> 00:15:21,516
to solve the three
examples I've shown you.


267
00:15:23,176 --> 00:15:27,686
And it really is fast, and it
will shave some time for you


268
00:15:27,686 --> 00:15:30,826
to develop in making sure
your app is accessible.


269
00:15:31,596 --> 00:15:35,096
So with some extra time
you may have on your hands,


270
00:15:35,096 --> 00:15:36,646
I really hope you
could take some


271
00:15:36,646 --> 00:15:39,046
of that time to do some testing.


272
00:15:39,506 --> 00:15:43,536
Because after all, you
know, the code you add?


273
00:15:43,536 --> 00:15:47,046
You want to make sure that it
will be usable by everyone.


274
00:15:47,876 --> 00:15:52,446
So how do you go about making
sure that your app is accessible


275
00:15:52,566 --> 00:15:53,876
after you make those changes?


276
00:15:54,366 --> 00:15:56,166
Well, we have two
tools you could use.


277
00:15:56,866 --> 00:15:59,676
The first is Accessibility
Inspector.


278
00:16:00,556 --> 00:16:05,166
This is a tool that displays all
of the accessibility information


279
00:16:05,166 --> 00:16:08,216
for any piece of UI that's
currently under the mouse.


280
00:16:08,876 --> 00:16:11,886
And with the newest
version of the Inspector,


281
00:16:12,016 --> 00:16:15,476
we will now display the
accessibility properties


282
00:16:15,576 --> 00:16:16,656
of that UI.


283
00:16:17,396 --> 00:16:19,446
So, this is really
helpful, so you know exactly


284
00:16:19,446 --> 00:16:22,526
which properties you
may need to tweak.


285
00:16:24,016 --> 00:16:28,526
The second tool we have
is called VoiceOver.


286
00:16:29,106 --> 00:16:32,336
VoiceOver is a screen
reader designed


287
00:16:32,576 --> 00:16:36,636
for the visually challenged
users to be able to explore


288
00:16:36,816 --> 00:16:39,466
and interact with the
content of the screen.


289
00:16:40,136 --> 00:16:45,206
And the users will get feedback
through speech or braille.


290
00:16:45,866 --> 00:16:47,786
So how do you go
about using this?


291
00:16:47,786 --> 00:16:49,406
First you've got to turn it on.


292
00:16:49,406 --> 00:16:51,926
If you just remember
the shortcut:


293
00:16:51,926 --> 00:16:54,036
command F5, that
will turn it on.


294
00:16:54,886 --> 00:16:57,366
Or you can go into the
Accessibility Pref Pane.


295
00:16:57,486 --> 00:17:00,116
There's an Enable
VoiceOver checkbox.


296
00:17:00,906 --> 00:17:03,576
Simply check that and you
can turn VoiceOver on.


297
00:17:04,935 --> 00:17:07,415
So the very first time
you turn VoiceOver on,


298
00:17:07,586 --> 00:17:09,616
it's going to prompt
you to see if you want


299
00:17:09,616 --> 00:17:10,586
to go through a tutorial.


300
00:17:10,586 --> 00:17:15,116
So if you just click on
the Learn More button,


301
00:17:15,486 --> 00:17:17,185
than it will run through
a tutorial with you.


302
00:17:18,106 --> 00:17:20,185
So I really encourage
you to try that.


303
00:17:20,326 --> 00:17:21,455
Run through the tutorial.


304
00:17:22,925 --> 00:17:25,986
Now, VoiceOver is a
very powerful tool,


305
00:17:26,415 --> 00:17:28,286
so it has hundreds of commands.


306
00:17:29,186 --> 00:17:33,336
Well, today I'm going to show
you just five simple commands


307
00:17:33,426 --> 00:17:36,846
you can use to be proficient
in testing with VoiceOver.


308
00:17:37,086 --> 00:17:41,816
The first of that is how you
navigate from one piece of UI


309
00:17:41,816 --> 00:17:44,716
to another: and that's
"control, option, right arrow."


310
00:17:45,566 --> 00:17:48,266
So just remember that once
you have VoiceOver turned on,


311
00:17:48,816 --> 00:17:53,046
any time you press control and
option, any other key you press


312
00:17:53,046 --> 00:17:55,446
at the same time will
automatically turn


313
00:17:55,446 --> 00:17:56,556
into a VoiceOver command.


314
00:17:57,106 --> 00:18:01,166
So we have "control, option,
right arrow" to go to next,


315
00:18:01,166 --> 00:18:02,836
and if you want to reverse,


316
00:18:03,266 --> 00:18:05,316
you do "control,
option, left arrow."


317
00:18:05,926 --> 00:18:09,006
And if you want to press a
button or activate something,


318
00:18:09,356 --> 00:18:11,436
simply do "control,
option, space."


319
00:18:11,836 --> 00:18:16,696
This is very similar to pressing
a space bar on something


320
00:18:16,696 --> 00:18:18,036
that has a keyboard focus.


321
00:18:18,606 --> 00:18:21,106
And then we have
two more commands.


322
00:18:21,586 --> 00:18:24,716
One is Enter Group -- which
is "control, option, shift,


323
00:18:24,716 --> 00:18:27,326
down arrow" -- and
Leave Group: "control,


324
00:18:27,326 --> 00:18:29,046
option, shift, up arrow."


325
00:18:29,896 --> 00:18:30,986
So what is "group?"


326
00:18:31,606 --> 00:18:35,356
Well VoiceOver has this
concept of "group" and it goes


327
00:18:35,356 --> 00:18:37,426
like this: If you
have, on the screen...


328
00:18:38,016 --> 00:18:41,456
what I have on the
screen is just some window


329
00:18:41,456 --> 00:18:42,456
with lots of UIs.


330
00:18:43,056 --> 00:18:47,706
Well, to be able to navigate
quickly to a certain piece of UI


331
00:18:48,006 --> 00:18:51,196
at any moment, VoiceOver has
this concept of grouping.


332
00:18:51,546 --> 00:18:53,346
On the screen you see
three different groups:


333
00:18:53,346 --> 00:18:57,886
one is the toolbar; the other
one is the table of folders;


334
00:18:58,416 --> 00:19:03,136
and also the collection
view of images.


335
00:19:03,256 --> 00:19:06,686
To be able to interact...


336
00:19:06,836 --> 00:19:10,796
or, you know, enter
and exit these groups,


337
00:19:11,516 --> 00:19:14,836
like I said earlier you could
just press the Enter Group


338
00:19:15,076 --> 00:19:16,426
or Leave Group command.


339
00:19:17,586 --> 00:19:21,236
So with just these five
VoiceOver commands alone,


340
00:19:21,236 --> 00:19:23,596
you should be pretty good
in testing with VoiceOver.


341
00:19:24,606 --> 00:19:29,466
So now that I have shown
you the tools and run you


342
00:19:29,466 --> 00:19:34,546
through some examples using
the API to implement some


343
00:19:35,146 --> 00:19:37,306
of the UI examples
I've shown you earlier,


344
00:19:37,746 --> 00:19:40,356
I would like to bring
up Chris Dolan to come


345
00:19:40,356 --> 00:19:42,386
up to give you a live demo


346
00:19:42,386 --> 00:19:45,296
of making the Tic Tac
Toe game accessible.


347
00:19:46,516 --> 00:19:48,666
[ Applause ]


348
00:19:49,166 --> 00:19:49,976
>> Thanks.


349
00:19:55,066 --> 00:19:55,526
Thanks Patti.


350
00:19:56,416 --> 00:19:58,646
Hi, my name is Chris, and
I'm a software engineer


351
00:19:58,646 --> 00:20:00,176
on the OS X Accessibility Team.


352
00:20:00,586 --> 00:20:03,386
And I'm really excited to
show you just how simple


353
00:20:03,676 --> 00:20:06,916
and just how easy it is to
add accessibility to your app


354
00:20:06,916 --> 00:20:07,906
with our brand new API.


355
00:20:08,836 --> 00:20:11,446
So to do this, I've written
a little test app here,


356
00:20:11,716 --> 00:20:14,156
and it's a very simple
game of Tic Tac Toe.


357
00:20:14,496 --> 00:20:17,146
So in this case the board
is full, the game is over,


358
00:20:17,146 --> 00:20:19,066
and it says the O
player has won.


359
00:20:19,216 --> 00:20:21,756
I can come in and
restart the game,


360
00:20:22,156 --> 00:20:23,896
place some pieces
on the board...


361
00:20:23,896 --> 00:20:27,816
I can even turn on the AI
opponent and play against that.


362
00:20:27,896 --> 00:20:30,736
This is a very simple
application,


363
00:20:30,736 --> 00:20:33,006
and I want to use this kind
of as our launching point


364
00:20:33,006 --> 00:20:35,256
to show you how you would
implement all the different


365
00:20:35,256 --> 00:20:37,956
techniques, that Patti just
told you, in this application.


366
00:20:38,696 --> 00:20:41,346
But before I do that, I
want to give you an idea


367
00:20:41,346 --> 00:20:42,756
of what this application looks


368
00:20:42,756 --> 00:20:45,156
like to someone who's
using VoiceOver.


369
00:20:45,616 --> 00:20:47,566
So, they may have just
heard from social media


370
00:20:47,566 --> 00:20:50,486
that this is the great new app
to have, or that you wrote it


371
00:20:50,486 --> 00:20:51,416
and they want to check it out,


372
00:20:51,746 --> 00:20:53,246
and this is their first
experience with it.


373
00:20:53,576 --> 00:20:54,546
I want you to keep that in mind.


374
00:20:55,476 --> 00:20:59,046
So I'm going to use the keyboard
command to turn on VoiceOver.


375
00:20:59,816 --> 00:21:01,406
So here, two things
have happened


376
00:21:01,406 --> 00:21:02,576
when I turn VoiceOver on.


377
00:21:03,056 --> 00:21:04,536
>> You are currently
on a text element.


378
00:21:05,816 --> 00:21:08,506
>> The first is that the
caption panel has shown


379
00:21:08,506 --> 00:21:10,476
up in the bottom corner.


380
00:21:10,836 --> 00:21:12,286
And all this does is it has all


381
00:21:12,286 --> 00:21:14,346
of the text that's
currently being spoken.


382
00:21:14,926 --> 00:21:17,806
So this is really, really
helpful if I'm collaborating


383
00:21:18,046 --> 00:21:19,616
with someone who's
using VoiceOver,


384
00:21:19,906 --> 00:21:22,106
and they often have their speech
cranked up really, really fast.


385
00:21:22,786 --> 00:21:25,636
So here I can read all of
the text that's being spoken,


386
00:21:25,636 --> 00:21:27,406
and it helps me when
I'm collaborating.


387
00:21:28,016 --> 00:21:32,276
The second thing you'll see is
that there's a black box drawn


388
00:21:32,276 --> 00:21:34,686
around the X wins label.


389
00:21:35,126 --> 00:21:36,886
And we call this the
VoiceOver cursor.


390
00:21:37,236 --> 00:21:39,906
You can kind of think of it as
an alternate keyboard focus.


391
00:21:40,286 --> 00:21:43,506
So just like I can press space
on a keyboard-focused element


392
00:21:43,506 --> 00:21:45,986
to do something with that
element, when I press one


393
00:21:45,986 --> 00:21:49,736
of the many VoiceOver commands
(keyboard commands) it normally


394
00:21:49,736 --> 00:21:52,486
acts on the currently
VoiceOver-focused element.


395
00:21:53,436 --> 00:21:57,936
So now what I'd like
to do is turn on a mode


396
00:21:58,226 --> 00:22:00,226
in VoiceOver called
Trackpad Commander.


397
00:22:00,436 --> 00:22:02,946
And all it allows me to
do is just explore the UI


398
00:22:02,946 --> 00:22:03,866
with my finger.


399
00:22:03,946 --> 00:22:07,926
Just like VoiceOver on iOS, I
can move around the interface


400
00:22:07,926 --> 00:22:10,196
and VoiceOver will
speak the descriptions


401
00:22:10,196 --> 00:22:12,386
of all the items
underneath my finger.


402
00:22:12,386 --> 00:22:13,686
I'm going to turn that on.


403
00:22:15,096 --> 00:22:16,506
>> Trackpad Commander on.


404
00:22:17,386 --> 00:22:19,656
>> And now I'm just gonna
explore around the interface,


405
00:22:19,656 --> 00:22:22,376
and you'll see a blue circle
wherever my finger is.


406
00:22:23,476 --> 00:22:24,216
>> Close button.


407
00:22:25,046 --> 00:22:26,266
Minimize button.


408
00:22:26,536 --> 00:22:27,586
Dimmed, zoom button.


409
00:22:27,786 --> 00:22:29,926
>> Great. So the
toolbar is looking good.


410
00:22:30,376 --> 00:22:32,816
But you'll notice anywhere


411
00:22:32,816 --> 00:22:34,906
where there's no elements
there's this sound being


412
00:22:34,906 --> 00:22:35,096
played [beeping].


413
00:22:35,096 --> 00:22:36,616
It says this is empty
space [beeping].


414
00:22:37,376 --> 00:22:39,256
>> Tic Tac Toe.


415
00:22:39,886 --> 00:22:42,236
>> Okay. Title is good.


416
00:22:42,476 --> 00:22:43,456
[Beeping] empty space here.


417
00:22:43,656 --> 00:22:44,326
>> X wins.


418
00:22:44,636 --> 00:22:46,216
>> Okay the label shows up fine.


419
00:22:47,216 --> 00:22:48,856
[Beeping] more empty space.


420
00:22:49,776 --> 00:22:51,796
Ah, we've hit our first
problem [beeping].


421
00:22:52,926 --> 00:22:55,346
There's nothing being
reported here


422
00:22:55,346 --> 00:22:57,166
for accessibility
for this checkbox.


423
00:22:57,396 --> 00:22:59,616
So this is one of the
problems we'll have to fix.


424
00:22:59,776 --> 00:23:00,436
>> Difficulty.


425
00:23:00,926 --> 00:23:02,086
>> Difficulty's fine.


426
00:23:02,086 --> 00:23:02,326
>> 2.


427
00:23:02,656 --> 00:23:03,436
>> As well as the level.


428
00:23:03,716 --> 00:23:04,636
>> Button, button.


429
00:23:05,116 --> 00:23:05,576
>> Hm.


430
00:23:05,666 --> 00:23:07,186
>> 2. Button, button.


431
00:23:07,436 --> 00:23:09,816
Delete. 1.41%.


432
00:23:10,586 --> 00:23:12,596
>> So we saw there's a
problem with the buttons.


433
00:23:12,596 --> 00:23:13,406
It just says "button."


434
00:23:13,706 --> 00:23:17,096
So if I'm not a sighted user,
I don't understand what's going


435
00:23:17,146 --> 00:23:21,616
on with this button; what
does it do when I click it?


436
00:23:21,696 --> 00:23:22,576
[Beeping] More empty space.


437
00:23:22,986 --> 00:23:25,726
And again, the Restart
Game button's the same way;


438
00:23:25,726 --> 00:23:27,426
there's absolutely
no information


439
00:23:27,426 --> 00:23:28,966
for accessibility there.


440
00:23:29,036 --> 00:23:30,996
What about the grid?


441
00:23:31,236 --> 00:23:32,606
Well I had the same
problem here.


442
00:23:32,886 --> 00:23:35,676
The grid isn't even being
reported to accessibility.


443
00:23:35,676 --> 00:23:36,246
>> VoiceOver off.


444
00:23:37,516 --> 00:23:39,376
>> So as you can see,
the user experience


445
00:23:39,376 --> 00:23:42,086
for this application is quite
poor when using VoiceOver.


446
00:23:42,086 --> 00:23:44,056
A lot of the major functionality


447
00:23:44,056 --> 00:23:45,626
for this app just
doesn't show up.


448
00:23:45,626 --> 00:23:46,666
I can't play a piece.


449
00:23:46,666 --> 00:23:48,136
I can't restart the game.


450
00:23:48,816 --> 00:23:50,336
I can't play against the AI


451
00:23:50,336 --> 00:23:52,186
because I can't click
that checkbox.


452
00:23:52,776 --> 00:23:55,056
So what I'd like to do
is take you through each


453
00:23:55,056 --> 00:23:57,966
of these individual
elements and show you how


454
00:23:57,966 --> 00:23:58,886
to make them accessible.


455
00:24:03,056 --> 00:24:04,696
So here's my Xcode project.


456
00:24:05,016 --> 00:24:06,676
And before we even
talk about the code,


457
00:24:07,196 --> 00:24:09,306
I just want to orient
you to, kind of,


458
00:24:09,306 --> 00:24:10,496
the layout of this project.


459
00:24:11,286 --> 00:24:11,976
So over here...


460
00:24:12,256 --> 00:24:14,716
this is a classic MVC style app.


461
00:24:14,716 --> 00:24:16,656
I have all of my models,
and these are the files


462
00:24:17,186 --> 00:24:19,746
that encapsulate, you know,
the Tic Tac Toe board...


463
00:24:19,746 --> 00:24:20,806
and the game rules...


464
00:24:20,806 --> 00:24:22,686
and what it means
to win the game.


465
00:24:23,216 --> 00:24:25,096
We're not going to touch
any of the model files here.


466
00:24:25,096 --> 00:24:25,996
This is the game state.


467
00:24:25,996 --> 00:24:27,656
We don't need that.


468
00:24:28,086 --> 00:24:30,156
The next folder is
all of the views.


469
00:24:30,726 --> 00:24:33,036
So we have a lot of custom
UI in this application


470
00:24:33,656 --> 00:24:36,046
and we need views to back them.


471
00:24:36,136 --> 00:24:38,256
These are all of the files
that we use to do that.


472
00:24:39,306 --> 00:24:41,186
This is where we're going
to be spending a majority


473
00:24:41,186 --> 00:24:42,696
of our time in the code.


474
00:24:43,086 --> 00:24:45,226
We also have the
controller section.


475
00:24:45,346 --> 00:24:46,846
The AppDelegate is
currently empty.


476
00:24:47,306 --> 00:24:50,136
And the Tic Tac Toe view
controller is the thing


477
00:24:50,136 --> 00:24:51,896
that hooks up all
the UI interactions


478
00:24:51,896 --> 00:24:52,956
with the monologue jacks.


479
00:24:53,896 --> 00:24:57,306
The last thing I want to point
out is the main menu nib.


480
00:24:57,446 --> 00:25:00,306
This is the one and only
nib for this entire project.


481
00:25:00,756 --> 00:25:03,426
And this is actually where
we're going to start.


482
00:25:03,896 --> 00:25:07,126
So the first elements we're
going to work on are the plus


483
00:25:07,126 --> 00:25:08,966
and minus buttons here
for the difficulty.


484
00:25:09,626 --> 00:25:11,916
If you remember, this is one of
the items that we could land on,


485
00:25:11,916 --> 00:25:13,686
but there was no
contextual information


486
00:25:13,686 --> 00:25:15,516
about what these buttons did.


487
00:25:16,276 --> 00:25:18,156
So I'd like to show you how
to add accessibility to that


488
00:25:18,156 --> 00:25:18,966
in two different ways.


489
00:25:20,266 --> 00:25:21,626
The first is actually
quite simple.


490
00:25:21,656 --> 00:25:25,766
I'm just going to select that
element in Interface Builder.


491
00:25:26,436 --> 00:25:29,386
And then up in the top right
I can open up the panel.


492
00:25:29,776 --> 00:25:35,566
And the third icon from the
left is the Identity Inspector.


493
00:25:36,376 --> 00:25:39,736
And in here is the Accessibility
Identity information.


494
00:25:39,736 --> 00:25:40,636
So this is where I'm going


495
00:25:40,636 --> 00:25:42,046
to add the description
for this button.


496
00:25:43,126 --> 00:25:44,126
So what does this button do?


497
00:25:44,126 --> 00:25:47,216
Well, when I click it, it
decreases the difficulty.


498
00:25:47,496 --> 00:25:51,736
So I'm just going to
type that in here.


499
00:25:52,126 --> 00:25:53,596
Great. And that's
all I had to do.


500
00:25:53,886 --> 00:25:54,336
Very simple.


501
00:25:55,696 --> 00:25:58,766
So what about if I
decide that I want


502
00:25:58,766 --> 00:26:00,866
to do the same thing,
but in code?


503
00:26:01,286 --> 00:26:02,846
Well it turns out
that's really simple too.


504
00:26:02,846 --> 00:26:04,986
So I can go over to
my view controller.


505
00:26:05,706 --> 00:26:10,056
And in my awakeFromNib, here I
can pull out the button cell.


506
00:26:16,126 --> 00:26:21,186
And I have an outlet
to that button.


507
00:26:21,736 --> 00:26:24,176
And then I can use one of the
new accessibility properties


508
00:26:24,176 --> 00:26:25,866
to just set the accessibility
label.


509
00:26:28,186 --> 00:26:31,776
And remember, you always want
to localize these strings.


510
00:26:37,106 --> 00:26:40,026
Okay. And this is the
increase difficulty button.


511
00:26:40,176 --> 00:26:43,136
So I'm just going
to add that in.


512
00:26:45,256 --> 00:26:46,986
Okay. Just like that.


513
00:26:46,986 --> 00:26:47,716
That's all I need to do.


514
00:26:48,196 --> 00:26:51,876
And with that, now when
a VoiceOver user lands


515
00:26:51,876 --> 00:26:53,836
on these plus and minus
buttons, they'll be read


516
00:26:53,836 --> 00:26:56,856
as the increase difficulty or
the decrease difficulty buttons.


517
00:26:57,146 --> 00:27:00,576
So why did we get that
accessibility for free?


518
00:27:00,576 --> 00:27:02,176
Why did they even show
up in the first place?


519
00:27:03,026 --> 00:27:06,716
Well, this custom class is
actually a subclass of NSButton.


520
00:27:07,176 --> 00:27:09,146
So we've done a lot of
work behind the scenes


521
00:27:09,146 --> 00:27:12,496
to bake accessibility in to all
of the standard AppKit controls.


522
00:27:12,856 --> 00:27:15,256
So whenever possible, try to
use those because we've done


523
00:27:15,256 --> 00:27:16,536
as much work as possible
for you.


524
00:27:16,886 --> 00:27:19,346
The one thing we needed to
do is just add a description


525
00:27:19,346 --> 00:27:20,106
which is quite simple.


526
00:27:22,366 --> 00:27:24,256
So now that we've worked on
the "plus" and "minus" buttons,


527
00:27:24,256 --> 00:27:27,006
let's move on to the
Restart Game button.


528
00:27:27,006 --> 00:27:30,236
You might recall that this
was one of the items that...


529
00:27:30,236 --> 00:27:32,156
nothing was reported
there for accessibility.


530
00:27:32,616 --> 00:27:33,676
Let's take a look at why.


531
00:27:35,236 --> 00:27:37,316
So I have a class
for this button.


532
00:27:38,556 --> 00:27:41,566
And the first thing I
immediately notice is


533
00:27:41,566 --> 00:27:43,056
that it's an NSView subclass.


534
00:27:43,886 --> 00:27:46,636
I'm doing a lot of extra
work behind the scenes


535
00:27:46,936 --> 00:27:49,586
to make this view act
and look like a button.


536
00:27:49,806 --> 00:27:51,326
This includes all
of my own keyboard


537
00:27:51,326 --> 00:27:54,566
and mouse event handling, as
well as all of my own drawing.


538
00:27:54,776 --> 00:27:56,256
I'm doing a ton of
extra work here.


539
00:27:57,276 --> 00:28:00,586
Well, how do I add
accessibility to this element?


540
00:28:01,046 --> 00:28:02,926
It turns out it's
also quite simple.


541
00:28:02,926 --> 00:28:05,856
All I need to do is pick
the accessibility protocol


542
00:28:06,256 --> 00:28:08,186
that best represents
this object.


543
00:28:09,246 --> 00:28:13,756
The protocol for this is the
NSAccessibilityButton protocol.


544
00:28:15,036 --> 00:28:16,916
Now that I've conformed
to that protocol,


545
00:28:17,336 --> 00:28:19,616
I can move into my
implemenntation file.


546
00:28:21,136 --> 00:28:24,526
And the first thing I see
is I get two new warnings.


547
00:28:24,896 --> 00:28:27,046
So this is really,
really helpful for me,


548
00:28:27,046 --> 00:28:29,576
because now I know exactly
what I need to implement


549
00:28:29,776 --> 00:28:32,676
to add accessibility
to this custom control.


550
00:28:33,676 --> 00:28:35,886
The two methods here
are accessibilityLabel


551
00:28:35,886 --> 00:28:37,636
and accessibilityPerformPress.


552
00:28:37,956 --> 00:28:39,166
So let's take those
one at a time.


553
00:28:40,616 --> 00:28:42,626
I have a section here
for Accessibility.


554
00:28:43,506 --> 00:28:45,446
The first one is
accessibilityLabel.


555
00:28:48,806 --> 00:28:52,966
Great. Now what do I
want to be returned here?


556
00:28:53,736 --> 00:28:56,926
I happen to know that this
button is only ever used


557
00:28:56,926 --> 00:28:58,776
to draw the Restart Game button.


558
00:28:59,326 --> 00:29:01,946
So the label for this is just
going to be "restart game."


559
00:29:11,166 --> 00:29:11,576
That's it.


560
00:29:12,156 --> 00:29:14,496
So now I can go back up
to the top of my file.


561
00:29:14,606 --> 00:29:16,376
I notice that warning
has gone away.


562
00:29:16,546 --> 00:29:18,326
So I only have one more
method to implement.


563
00:29:18,826 --> 00:29:20,386
And that's
accessibilityPerformPress.


564
00:29:21,706 --> 00:29:22,176
Let's do that.


565
00:29:27,046 --> 00:29:27,716
"performPress."


566
00:29:28,906 --> 00:29:30,696
So what should happen here?


567
00:29:31,476 --> 00:29:34,976
Well, when I use the mouse to
interact with this button --


568
00:29:35,476 --> 00:29:36,986
when I click it something
happens, right?


569
00:29:37,386 --> 00:29:39,066
That same something
should happen


570
00:29:39,156 --> 00:29:41,126
when an accessibility
client says, "hey,


571
00:29:41,196 --> 00:29:42,596
I want to activate this item."


572
00:29:43,366 --> 00:29:47,976
So in my case, I happen to have
a method called pressDown...


573
00:29:49,676 --> 00:29:50,766
or performPress rather.


574
00:29:51,286 --> 00:29:53,286
And performPress
is what gets called


575
00:29:53,286 --> 00:29:55,486
when the mouse handling
logic says "yes,


576
00:29:55,486 --> 00:29:56,576
this button has been pressed."


577
00:29:57,086 --> 00:29:59,116
So I want to call that
same, exact method.


578
00:30:06,046 --> 00:30:06,466
And now you notice


579
00:30:06,466 --> 00:30:09,316
that accessibilityPerformPress
return is a Boolean.


580
00:30:09,816 --> 00:30:11,906
This is a yes-or-no,
"did I handle this?"


581
00:30:11,906 --> 00:30:15,796
event. And I'm always handling
it, so yes, I return "YES."


582
00:30:17,036 --> 00:30:20,086
And with that I can go back
up to the top of my file


583
00:30:20,426 --> 00:30:22,886
and I see all of my
warnings have gone away.


584
00:30:23,546 --> 00:30:24,156
So that's it.


585
00:30:24,606 --> 00:30:26,286
The protocol has guided
me through what I needed


586
00:30:26,286 --> 00:30:27,486
to do to add accessibility.


587
00:30:27,756 --> 00:30:29,346
I implemented that
and I'm finished.


588
00:30:32,276 --> 00:30:34,626
So now that this lower
right section's finished,


589
00:30:34,776 --> 00:30:37,846
I want to work on the Artificial
Intelligence checkbox.


590
00:30:38,526 --> 00:30:40,266
If you recall again,
this was another element


591
00:30:40,266 --> 00:30:42,056
that wasn't visible to
accessibility at all.


592
00:30:43,116 --> 00:30:47,006
So I have my header file
here for the checkbox.


593
00:30:47,626 --> 00:30:50,256
And again I see the same
situation I had with the button.


594
00:30:50,936 --> 00:30:52,086
It's an NSView subclass.


595
00:30:52,396 --> 00:30:55,686
So I do a lot of work to make
it look and act like a checkbox.


596
00:30:56,646 --> 00:31:00,356
So in this case, I need
to pick a protocol.


597
00:31:00,606 --> 00:31:04,686
And the protocol for this is
the NSAccessibilityCheckBox


598
00:31:04,686 --> 00:31:05,126
protocol.


599
00:31:07,976 --> 00:31:12,426
And now when I go into my
implementation file I get a few


600
00:31:12,426 --> 00:31:13,016
new warnings.


601
00:31:13,016 --> 00:31:14,566
So this tells me
what I need to do


602
00:31:14,566 --> 00:31:15,866
to make the checkbox accessible.


603
00:31:16,526 --> 00:31:20,866
So the three warnings I have
here are accessibilityValue.


604
00:31:21,436 --> 00:31:22,496
accessibilityLabel.


605
00:31:22,666 --> 00:31:24,256
And accessibilityPerformPress.


606
00:31:25,006 --> 00:31:28,976
So I'm going to take
those one at a time.


607
00:31:29,216 --> 00:31:31,946
So the first one, we've
seen this one before,


608
00:31:31,946 --> 00:31:38,376
is accessibilityLabel, so
I'm going to do that first.


609
00:31:38,586 --> 00:31:40,736
So what should be the
label for this checkbox?


610
00:31:41,366 --> 00:31:43,146
Well this is a control
that I designed


611
00:31:43,146 --> 00:31:45,886
and I thought I might
reuse in other places.


612
00:31:45,946 --> 00:31:47,346
So I actually have an iVar


613
00:31:47,346 --> 00:31:49,106
around that keeps
the checkbox text.


614
00:31:49,276 --> 00:31:52,176
This is the string that actually
gets rendered in and drawn


615
00:31:52,356 --> 00:31:53,526
in the drawInRect method.


616
00:31:54,546 --> 00:31:58,276
So I can just return
the checkbox text here.


617
00:31:59,886 --> 00:32:01,916
Great. So one of my
warnings has gone away.


618
00:32:02,256 --> 00:32:06,136
The next one I want to work on
is accessibilityPerformPress.


619
00:32:06,726 --> 00:32:08,326
So just like the
button, when I interact


620
00:32:08,326 --> 00:32:11,126
with this control using the
mouse, something happens


621
00:32:11,456 --> 00:32:13,416
that changes the checked state.


622
00:32:13,656 --> 00:32:15,406
I need that same
something to happen


623
00:32:15,836 --> 00:32:17,676
when the accessibility
clients say "hey,


624
00:32:17,856 --> 00:32:19,416
I want to interact
with this element."


625
00:32:20,526 --> 00:32:23,226
So that's the
accessibilityPerformPress.


626
00:32:29,196 --> 00:32:32,056
And I have a method
called toggleCheckedState.


627
00:32:32,056 --> 00:32:35,366
And this is what gets called
from the mouse handling logic.


628
00:32:36,156 --> 00:32:38,416
And just like with the
button, I return "YES,"


629
00:32:38,526 --> 00:32:41,306
I did in fact handle
this action.


630
00:32:41,306 --> 00:32:45,576
So now if I go back
up to the top I see


631
00:32:45,576 --> 00:32:48,206
that I still have one more
method I need to implement.


632
00:32:48,776 --> 00:32:50,256
And this is accessibilityValue.


633
00:32:51,116 --> 00:32:52,486
And at this point
I ask myself, well,


634
00:32:52,796 --> 00:32:54,396
"what is the value
for a checkbox?


635
00:32:54,396 --> 00:32:55,356
What am I supposed to return?"


636
00:32:56,606 --> 00:32:59,266
We've worked really, really
hard to try to answer all


637
00:32:59,266 --> 00:33:00,706
of these questions in one place.


638
00:33:01,186 --> 00:33:04,246
We tried to make
NSAccessibilityProtocol file the


639
00:33:04,246 --> 00:33:05,566
one-stop-shop for this.


640
00:33:05,996 --> 00:33:08,926
This is where all the protocols
are implemented or defined.


641
00:33:10,076 --> 00:33:12,586
So in another tab I have
this protocol's file.


642
00:33:13,366 --> 00:33:16,746
And there is the
NSAccessibilityCheckbox protocol


643
00:33:16,746 --> 00:33:17,156
right here.


644
00:33:17,966 --> 00:33:21,606
And I see under the required
methods the AccessibilityValue


645
00:33:21,706 --> 00:33:22,776
returns an NSNumber.


646
00:33:23,086 --> 00:33:24,716
Okay, so that answers
my first question.


647
00:33:24,746 --> 00:33:28,556
And it says I return "yes" if
checked, or "no" if unchecked.


648
00:33:29,906 --> 00:33:31,656
Great. So now that I
have this information,


649
00:33:32,236 --> 00:33:36,556
I can come down here and
implement that method.


650
00:33:37,116 --> 00:33:39,576
So here I have another
iVar around,


651
00:33:40,166 --> 00:33:41,536
which is "am I checked or not.?"


652
00:33:41,536 --> 00:33:44,926
I can use that to
return "yes" or "no."


653
00:33:54,046 --> 00:33:54,436
Oh return.


654
00:33:55,646 --> 00:33:56,646
All right.


655
00:33:57,026 --> 00:33:59,466
Okay. So now I can go back
up to the top of my file.


656
00:33:59,816 --> 00:34:01,206
I see all the warnings
have gone away.


657
00:34:01,946 --> 00:34:02,906
So this is all I need to do


658
00:34:02,906 --> 00:34:04,846
to implement an accessible
CheckBox.


659
00:34:07,746 --> 00:34:09,565
So now the entire
right-hand side


660
00:34:09,565 --> 00:34:13,166
of our application has added
some basic accessibility to it.


661
00:34:14,056 --> 00:34:15,896
So let's work on the next
part, which is the grid,


662
00:34:15,896 --> 00:34:19,606
and this is perhaps the
most difficult part.


663
00:34:20,616 --> 00:34:22,706
Again, I'm going to
back into my project,


664
00:34:22,706 --> 00:34:26,025
and I have a view
representing the board --


665
00:34:26,136 --> 00:34:26,936
it's the board view.


666
00:34:27,505 --> 00:34:30,176
And here I notice:
it's, again, an NSView.


667
00:34:30,366 --> 00:34:31,876
I'm doing all of my
own drawing here.


668
00:34:32,536 --> 00:34:36,196
And in fact this class draws
the board and all of the pieces.


669
00:34:38,136 --> 00:34:39,906
So I need to make
this accessible.


670
00:34:40,376 --> 00:34:41,726
And I need to pick
a protocol now.


671
00:34:41,786 --> 00:34:44,056
So what protocol do I need?


672
00:34:45,036 --> 00:34:46,246
Well the way that
I like to think


673
00:34:46,246 --> 00:34:49,466
about the Tic Tac Toe board
is it's really a collection


674
00:34:49,496 --> 00:34:50,946
of squares, right?


675
00:34:51,315 --> 00:34:52,876
Every time I interact
with the board,


676
00:34:52,876 --> 00:34:55,856
it's not so much a board --
I want to play this square;


677
00:34:55,856 --> 00:34:58,496
I want to put my piece there;
I want to get three in a row


678
00:34:58,496 --> 00:34:59,976
to win; I want to
block my opponent


679
00:34:59,976 --> 00:35:00,896
from getting three in a row.


680
00:35:01,546 --> 00:35:04,546
And so this board is
really a collection to me.


681
00:35:05,176 --> 00:35:06,036
And the way that that's...


682
00:35:06,036 --> 00:35:08,716
the protocol that you
can use to represent


683
00:35:08,716 --> 00:35:11,406
that is the NSAccessibilityGroup
protocol.


684
00:35:11,456 --> 00:35:12,836
It's a collection of things.


685
00:35:14,776 --> 00:35:19,886
Great. So now I go to
my implementation file.


686
00:35:20,786 --> 00:35:25,276
And I notice I have no
warnings showing up.


687
00:35:32,446 --> 00:35:33,436
Okay. I have no warnings.


688
00:35:33,436 --> 00:35:34,556
So what does this mean?


689
00:35:34,976 --> 00:35:38,016
Well I have no required
methods that I need to implement


690
00:35:38,016 --> 00:35:39,726
for the accessibilityGroup
protocol.


691
00:35:40,576 --> 00:35:43,606
But just like with what we
saw with the other elements,


692
00:35:43,996 --> 00:35:45,926
I can still add accessibility
to it.


693
00:35:46,836 --> 00:35:48,476
So what's the first
thing I want to do?


694
00:35:49,026 --> 00:35:52,116
Well, the board view
-- when I land on it --


695
00:35:52,116 --> 00:35:54,926
it's a group and I want
some label to describe it.


696
00:35:55,436 --> 00:35:58,526
So just like with all the
other controls I'm going


697
00:35:58,526 --> 00:36:00,316
to add a label here.


698
00:36:00,606 --> 00:36:02,306
An accessibilityLabel
is very simple.


699
00:36:03,816 --> 00:36:04,906
So what am I going
to return here?


700
00:36:04,966 --> 00:36:06,886
Well just, it's the
Tic Tac Toe board.


701
00:36:07,166 --> 00:36:09,536
So when the VoiceOver
cursor lands on this,


702
00:36:09,536 --> 00:36:11,476
it says this is the "Tic
Tac Toe board" group.


703
00:36:13,236 --> 00:36:15,716
Okay, so I have a group
that contains things.


704
00:36:15,796 --> 00:36:17,216
Well what are these things?


705
00:36:17,866 --> 00:36:19,716
They're individual squares.


706
00:36:20,196 --> 00:36:22,786
But each of those squares
doesn't have a backing view


707
00:36:22,786 --> 00:36:23,176
to them.


708
00:36:23,566 --> 00:36:24,996
So I need to create some object


709
00:36:24,996 --> 00:36:26,616
to represent it to
accessibility.


710
00:36:26,756 --> 00:36:28,386
And the way that
we've done this is


711
00:36:28,386 --> 00:36:30,476
with the NSAccessibilityElement.


712
00:36:31,836 --> 00:36:34,116
Patti showed you in the slides
how you'd create an instance


713
00:36:34,116 --> 00:36:34,966
of this inline.


714
00:36:35,316 --> 00:36:38,236
And what I've chosen to do
here is just create a subclass


715
00:36:38,236 --> 00:36:39,326
of it in another file.


716
00:36:40,576 --> 00:36:45,536
So I have a subclass here
called the TicTacToeSquare


717
00:36:45,846 --> 00:36:46,956
AccessibilityElement.


718
00:36:47,556 --> 00:36:50,466
And it's a subclass of
NSAccessibilityElement.


719
00:36:50,816 --> 00:36:53,466
It has one initializer,
which takes a row,


720
00:36:53,466 --> 00:36:54,346
a column, and a delegate.


721
00:36:54,346 --> 00:36:57,756
And it has three properties: a
row, a column, and a delegate.


722
00:36:57,786 --> 00:37:00,786
So the delegate method
-- or the delegate --


723
00:37:00,786 --> 00:37:03,716
is just a class that can
answer questions about "hey,


724
00:37:03,716 --> 00:37:06,166
what pieces are at this
location on the board?


725
00:37:06,166 --> 00:37:07,246
Is the game over?


726
00:37:07,246 --> 00:37:08,256
Is it still in progress?"


727
00:37:08,256 --> 00:37:10,166
So it can answer a
lot of the questions


728
00:37:10,166 --> 00:37:12,396
that this piece is
going to need to ask.


729
00:37:13,726 --> 00:37:17,296
So I have this element
representing it.


730
00:37:17,936 --> 00:37:19,876
Well, I'm going to
pick a protocol now


731
00:37:19,876 --> 00:37:21,106
to use to implement it.


732
00:37:21,876 --> 00:37:24,636
So what best encapsulates
what a square does?


733
00:37:25,506 --> 00:37:27,656
Well when I click on
it, something happens.


734
00:37:27,656 --> 00:37:29,006
I place my piece there.


735
00:37:29,006 --> 00:37:30,136
I put my piece there.


736
00:37:30,136 --> 00:37:32,876
I play it, right?


737
00:37:32,876 --> 00:37:35,336
And elements where you click
them to interact with them


738
00:37:35,336 --> 00:37:36,396
and they do something
are buttons.


739
00:37:37,236 --> 00:37:37,996
So I can conform


740
00:37:37,996 --> 00:37:39,396
to the
accessibilityButtonProtocol


741
00:37:39,396 --> 00:37:39,666
here.


742
00:37:41,596 --> 00:37:43,576
And now when I move into
my implementation file,


743
00:37:46,376 --> 00:37:48,156
I'll get a bunch of
warnings for the items


744
00:37:48,156 --> 00:37:48,966
that I need to implement.


745
00:37:50,386 --> 00:37:54,386
So the four warnings I get here
are accessibilityParent, Label,


746
00:37:54,626 --> 00:37:57,106
PerformPress, and Frame
need to be implemented.


747
00:37:57,106 --> 00:37:59,036
So I'm going to take
these one at a time.


748
00:38:00,066 --> 00:38:04,606
For the frame and for the
parent, I'm just going


749
00:38:04,606 --> 00:38:07,166
to return whatever my
superclass' implementation is.


750
00:38:07,576 --> 00:38:10,156
So at some point these will need
to be set, so keep that in mind.


751
00:38:11,176 --> 00:38:13,716
The accessibilityLabel is a
little bit more interesting.


752
00:38:14,526 --> 00:38:17,666
And this is the description
for a particular square.


753
00:38:18,236 --> 00:38:22,096
So what I'm going to do is
ask my delegate for "hey,


754
00:38:22,096 --> 00:38:24,016
what's this square at
my row and column?"


755
00:38:24,786 --> 00:38:26,636
And this is actually an instance


756
00:38:26,636 --> 00:38:29,056
of the model object representing
a square on the board.


757
00:38:30,526 --> 00:38:34,406
And then I can ask the board,
using one of its class methods,


758
00:38:34,966 --> 00:38:36,436
"what's the description
for this square?"


759
00:38:36,766 --> 00:38:38,386
So this is going to
return something like,


760
00:38:38,746 --> 00:38:41,366
"this is an X square
at the top right."


761
00:38:41,476 --> 00:38:42,926
Or an "O square in the center."


762
00:38:43,336 --> 00:38:44,946
Or an "empty square
at the bottom left."


763
00:38:45,876 --> 00:38:47,936
And so when I land
on this element,


764
00:38:47,936 --> 00:38:49,396
that's what I want
to be spoken out.


765
00:38:50,756 --> 00:38:52,646
And then the last method I need


766
00:38:52,646 --> 00:38:55,056
to implement is
accessibilityPerformPress.


767
00:38:55,746 --> 00:38:57,756
So when this item is
pressed, what should it do?


768
00:38:57,836 --> 00:38:59,696
Well, I want to play my
piece there; I want to play


769
00:38:59,696 --> 00:39:01,416
that square; I want
to make my mark there.


770
00:39:02,236 --> 00:39:03,276
And my delegate knows how


771
00:39:03,276 --> 00:39:05,106
to play a square at
a row and column.


772
00:39:05,106 --> 00:39:08,076
So I'm just going to ask it to
do that and again, return "yes,


773
00:39:08,076 --> 00:39:08,926
I handled this event."


774
00:39:11,326 --> 00:39:14,466
So with that I can go back up
to the top of my file and I see


775
00:39:14,466 --> 00:39:15,686
that all the warnings
have gone away.


776
00:39:15,766 --> 00:39:16,726
So that's great.


777
00:39:16,726 --> 00:39:20,106
I have, now, a class that
represents an individual square


778
00:39:20,386 --> 00:39:22,846
for accessibility that
doesn't have a backing view.


779
00:39:24,336 --> 00:39:25,976
So now I need to go
back to my group.


780
00:39:26,846 --> 00:39:29,166
I need to create
instances of this class


781
00:39:29,166 --> 00:39:30,306
to represent each square.


782
00:39:31,316 --> 00:39:32,666
So I'm back in my board view.


783
00:39:32,666 --> 00:39:37,606
And I want to say, "this group
has children of these elements."


784
00:39:37,906 --> 00:39:41,586
And the way to do
that with our API is


785
00:39:41,586 --> 00:39:44,216
to override the
accessibilityChildren method.


786
00:39:44,846 --> 00:39:48,686
So I'm going to walk through
-- it looks like a lot of code;


787
00:39:48,686 --> 00:39:50,626
I promise it's not -- I'm
going to walk through,


788
00:39:50,626 --> 00:39:51,786
line-by-line, what this does.


789
00:39:53,606 --> 00:39:54,976
The first thing is,


790
00:39:54,976 --> 00:39:58,126
I'm overriding the
accessibilityChildren array.


791
00:39:58,166 --> 00:40:00,386
So, I'm the accessibility
ChildrenGetter


792
00:40:00,386 --> 00:40:02,946
and returning an array from it.


793
00:40:02,946 --> 00:40:03,866
I have iVar around.


794
00:40:04,246 --> 00:40:05,816
So if I've already
created my children,


795
00:40:05,816 --> 00:40:07,026
I don't need to create
them again.


796
00:40:07,906 --> 00:40:10,596
And if I haven't, I
create an array to hold all


797
00:40:10,756 --> 00:40:12,096
of the accessibility Children.


798
00:40:12,266 --> 00:40:14,276
And then I set up two
variables that I'm going


799
00:40:14,276 --> 00:40:16,256
to be using during
my computations.


800
00:40:17,706 --> 00:40:19,726
Now what I need to do
is create an instance


801
00:40:19,726 --> 00:40:22,916
of that accessibility element
for every square on the board.


802
00:40:22,916 --> 00:40:27,186
So I'm going to iterate over all
the rows and all the columns...


803
00:40:27,296 --> 00:40:29,756
and then instantiate one


804
00:40:29,756 --> 00:40:32,236
of those accessibility
elements for the square.


805
00:40:33,976 --> 00:40:37,196
Now remember that the parent
and the frame were just returned


806
00:40:37,196 --> 00:40:39,136
as whatever the super-classes'
implementation was.


807
00:40:39,776 --> 00:40:41,356
So I need to make sure
that they're set somewhere,


808
00:40:41,426 --> 00:40:42,766
and that's what I'm
going to do it here.


809
00:40:43,786 --> 00:40:46,156
So I can set the accessibility
parent using a property.


810
00:40:46,546 --> 00:40:48,736
And I just set it to
myself because the parent


811
00:40:49,046 --> 00:40:51,396
of a square is the board.


812
00:40:51,886 --> 00:40:53,726
And then I need to
set the frame.


813
00:40:55,126 --> 00:40:57,636
Typically the accessibility
frame has always been given


814
00:40:57,636 --> 00:40:58,826
in screen coordinates.


815
00:40:58,906 --> 00:41:01,116
And It's important for us
because that's what we use


816
00:41:01,116 --> 00:41:04,116
to draw the VoiceOver cursor
around a particular element.


817
00:41:05,096 --> 00:41:07,816
And we were thinking about this
with the new API and saying,


818
00:41:08,126 --> 00:41:09,896
you know, it'd be really
cool if we could just say,


819
00:41:09,896 --> 00:41:12,486
here's my frame relative
to my parent.


820
00:41:12,936 --> 00:41:15,656
And then I don't have to do
any work, when the window moves


821
00:41:15,656 --> 00:41:16,766
or my parent moves around,


822
00:41:16,766 --> 00:41:19,136
to recalculate my
frame in screen space.


823
00:41:20,016 --> 00:41:21,896
So we've added this nice
convenience property


824
00:41:21,896 --> 00:41:23,766
to NSAccessibilityElement


825
00:41:24,476 --> 00:41:26,506
and it's called
accessibiltyFrame InParentSpace.


826
00:41:26,506 --> 00:41:27,686
It does exactly that.


827
00:41:28,496 --> 00:41:30,716
I can calculate the actual rect


828
00:41:31,076 --> 00:41:33,216
that I'm using during
the -- for drawing.


829
00:41:34,206 --> 00:41:36,516
That's given in my parent space.


830
00:41:37,206 --> 00:41:39,376
And I can set that as
the accessibilityFrame


831
00:41:39,376 --> 00:41:39,966
InParentSpace.


832
00:41:39,966 --> 00:41:41,846
And now whenever
something moves,


833
00:41:41,896 --> 00:41:45,166
we have enough information
on our end to recalculate


834
00:41:45,246 --> 00:41:46,726
where the frame is,
and you don't have


835
00:41:46,726 --> 00:41:47,906
to do any of that bookkeeping.


836
00:41:49,926 --> 00:41:52,196
So now that we've created
this accessibility element


837
00:41:52,196 --> 00:41:54,346
for each square, we
want to make sure


838
00:41:54,346 --> 00:41:55,616
that we add them
all to the array.


839
00:41:56,356 --> 00:41:58,936
And then as Patti said,
you want to make sure


840
00:41:58,936 --> 00:42:00,396
that you cache these elements.


841
00:42:00,916 --> 00:42:04,426
So at any point in your
applications lifetime


842
00:42:04,636 --> 00:42:06,366
where this item is
being drawn onscreen,


843
00:42:06,926 --> 00:42:10,696
the accessibility element
representing it has to be there


844
00:42:10,696 --> 00:42:12,236
for accessibility
to be able to query.


845
00:42:13,456 --> 00:42:17,536
And then lastly, remember
we overrode the getter here


846
00:42:17,606 --> 00:42:19,796
so we need to make sure we
actually return these children.


847
00:42:22,166 --> 00:42:24,316
So with that I can go back
up to the top of my file...


848
00:42:24,726 --> 00:42:28,176
and I finally just made this
really complicated UI accessible


849
00:42:28,426 --> 00:42:30,356
with not too much extra work.


850
00:42:30,986 --> 00:42:33,446
I see that all of my warnings
have gone away (well we didn't


851
00:42:33,446 --> 00:42:35,006
have any warnings
here, for example).


852
00:42:35,976 --> 00:42:39,596
But this has now added a basic
level accessibility to my app.


853
00:42:40,346 --> 00:42:42,756
And so let's take a look at
what that looks like now.


854
00:42:48,356 --> 00:42:51,226
And the way I'm going to
verify that my changes worked,


855
00:42:51,756 --> 00:42:53,376
is by using one of the
tools Patti mentioned.


856
00:42:53,376 --> 00:42:54,896
It's called Accessibility
Inspector.


857
00:42:55,036 --> 00:42:57,286
And you can launch it
from the Xcode menu


858
00:42:58,076 --> 00:43:01,316
under Open Developer Tool
and Accessibility Inspector.


859
00:43:03,256 --> 00:43:05,676
Again, what this does is it
shows you the accessibility


860
00:43:05,676 --> 00:43:08,116
information for the
item under the mouse.


861
00:43:08,976 --> 00:43:12,086
So here, there's three
sections that are showing up.


862
00:43:12,706 --> 00:43:15,386
The very top is the
accessibility Hierarchy.


863
00:43:16,286 --> 00:43:17,576
So if this is analogous to...


864
00:43:17,576 --> 00:43:18,926
it's kind of like
the view Hierarchy.


865
00:43:19,366 --> 00:43:20,946
If your accessibility
elements aren't


866
00:43:20,946 --> 00:43:22,856
in the accessibility
Hierarchy, they're not going


867
00:43:22,856 --> 00:43:24,616
to be available to
accessibility clients.


868
00:43:24,866 --> 00:43:25,866
Much like a view that's not


869
00:43:25,866 --> 00:43:27,246
in the view Hierarchy
won't be shown.


870
00:43:28,646 --> 00:43:30,346
The next section
is the Attributes.


871
00:43:30,456 --> 00:43:32,506
So these are all the properties
that we have now added


872
00:43:32,796 --> 00:43:34,216
onto accessibility elements,


873
00:43:34,476 --> 00:43:36,356
and you can see each
of their values.


874
00:43:37,166 --> 00:43:40,056
And there's also some
more complicated ones


875
00:43:40,056 --> 00:43:41,526
like Parameterized Attributes.


876
00:43:42,726 --> 00:43:44,346
So the very first
thing that we worked


877
00:43:44,346 --> 00:43:45,866
on was the "plus and minus" one.


878
00:43:45,936 --> 00:43:47,246
And remember this
was to increase


879
00:43:47,246 --> 00:43:48,356
and decrease the difficulty.


880
00:43:48,356 --> 00:43:50,106
And we needed to just
add a label there.


881
00:43:50,106 --> 00:43:51,486
It was a standard
AppKit control.


882
00:43:51,906 --> 00:43:57,536
And what I can see
is that the access...


883
00:43:58,016 --> 00:44:01,096
down here is showing up
as decreased difficulty.


884
00:44:01,096 --> 00:44:01,636
So this is good.


885
00:44:01,636 --> 00:44:03,206
And we know that this
element is now labeled.


886
00:44:03,206 --> 00:44:05,896
It's going to be spoken when
it's navigated with VoiceOver.


887
00:44:07,186 --> 00:44:12,696
Same thing with the
Increase difficulty button.


888
00:44:13,146 --> 00:44:15,366
The label is there,
which is good.


889
00:44:16,316 --> 00:44:19,296
What about the Restart
Game button?


890
00:44:19,476 --> 00:44:22,006
Well remember this wasn't even
available to accessibility,


891
00:44:22,386 --> 00:44:24,276
and now we see that
it's in the Hierarchy


892
00:44:24,276 --> 00:44:25,696
as an accessibility button.


893
00:44:26,626 --> 00:44:28,676
And it also has a label
of "Restart Game."


894
00:44:28,906 --> 00:44:29,456
So this is great.


895
00:44:29,456 --> 00:44:31,356
it's going to be read out
as a Restart Game button.


896
00:44:32,626 --> 00:44:34,666
Similarly with a checkbox,


897
00:44:35,746 --> 00:44:38,096
it's now in the view
Hierarchy (which is awesome)


898
00:44:38,096 --> 00:44:40,736
so it will show up to
accessibility clients.


899
00:44:41,276 --> 00:44:42,466
It says it's a checkbox.


900
00:44:42,466 --> 00:44:44,576
It has a label of AI opponent.


901
00:44:45,876 --> 00:44:47,336
And now the grid.


902
00:44:49,196 --> 00:44:50,776
So the grid shows up as a group.


903
00:44:51,296 --> 00:44:53,346
And one of the accessibility
properties is the


904
00:44:53,346 --> 00:44:54,346
accessibility Children.


905
00:44:54,666 --> 00:44:57,336
And we see that it has nine
items and they're all buttons.


906
00:44:57,336 --> 00:45:02,146
So if you take a look at
just one button, it says it's


907
00:45:02,146 --> 00:45:04,436
in the Hierarchy, as well
as it has a label for


908
00:45:04,436 --> 00:45:05,746
"it's the empty top left."


909
00:45:06,676 --> 00:45:08,516
The next one says "empty top."


910
00:45:09,246 --> 00:45:10,026
"Empty top right."


911
00:45:10,196 --> 00:45:13,366
And you'll notice here also
there's an action section


912
00:45:13,366 --> 00:45:14,646
on the bottom saying
PerformPress.


913
00:45:14,646 --> 00:45:17,776
And it says, this is what this
element supports for actions.


914
00:45:17,936 --> 00:45:21,206
So that's actually really great.


915
00:45:21,566 --> 00:45:23,656
Okay so now that
I've audited my app


916
00:45:23,836 --> 00:45:26,786
with Accessibility
Inspector, I'm fairly certain


917
00:45:26,786 --> 00:45:29,456
that the accessibility I've
implemented is correct.


918
00:45:30,266 --> 00:45:33,446
So now I'm going to
turn on VoiceOver;


919
00:45:33,446 --> 00:45:37,626
I'm going to audit
it using VoiceOver.


920
00:45:37,626 --> 00:45:38,066
>> VoiceOver on.


921
00:45:38,066 --> 00:45:38,806
Tic Tac Toe.


922
00:45:39,196 --> 00:45:39,896
Tic Tac Toe.


923
00:45:39,966 --> 00:45:41,586
Window. AI Opponent.


924
00:45:41,876 --> 00:45:42,336
Unchecked.


925
00:45:42,416 --> 00:45:44,006
Checkbox has keyboard focus.


926
00:45:44,926 --> 00:45:46,706
>> Great. So we can now
land on this element.


927
00:45:47,236 --> 00:45:48,416
>> Check. AI Opponent.


928
00:45:48,486 --> 00:45:49,106
Checkbox.


929
00:45:49,266 --> 00:45:50,576
>> I can activate it.


930
00:45:50,696 --> 00:45:51,326
>> Difficult.


931
00:45:51,386 --> 00:45:52,926
Decrease difficulty, button.


932
00:45:53,256 --> 00:45:54,486
Press. Press.


933
00:45:54,586 --> 00:45:56,606
Press. Decrease difficulty,
button.


934
00:45:56,856 --> 00:45:59,146
>> The buttons are labeled,
and they support the actions.


935
00:45:59,186 --> 00:46:00,046
>>2. Increase difficulty.


936
00:46:00,046 --> 00:46:01,316
Restart Game, button.


937
00:46:01,696 --> 00:46:03,746
Press. Restart Game, button.


938
00:46:03,746 --> 00:46:05,006
>> I can press to
restart the game


939
00:46:05,006 --> 00:46:06,136
if I had the game in progress.


940
00:46:06,136 --> 00:46:08,896
>> Tic Tac Toe board ,group.


941
00:46:09,266 --> 00:46:10,816
>> I also land on
the board group.


942
00:46:11,156 --> 00:46:13,406
>> Interact with Tic
Tac Toe board group.


943
00:46:14,006 --> 00:46:16,326
9 items. Empty top left, button.


944
00:46:16,686 --> 00:46:17,976
>> And I can move
into this group


945
00:46:17,976 --> 00:46:19,586
to see the different pieces.


946
00:46:19,586 --> 00:46:20,726
>> Empty top, button.


947
00:46:21,176 --> 00:46:23,766
>> Now if I place a piece there
using the Activate option.


948
00:46:23,906 --> 00:46:25,456
>> Press X top, button.


949
00:46:25,886 --> 00:46:27,306
Empty top left, button.


950
00:46:27,506 --> 00:46:29,316
Press X top left, button.


951
00:46:30,046 --> 00:46:30,876
VoiceOver off.


952
00:46:31,016 --> 00:46:32,756
>> I can play a full
game of Tic Tac Toe now.


953
00:46:33,096 --> 00:46:35,716
So this is really exciting,
and I hope you've seen


954
00:46:35,716 --> 00:46:38,876
that with just a few lines of
code we can really walk you


955
00:46:38,876 --> 00:46:41,286
through what you need to
do to add accessibility


956
00:46:41,366 --> 00:46:42,946
to something like this.


957
00:46:43,116 --> 00:46:45,396
And I hope you really
see that the level


958
00:46:45,396 --> 00:46:46,876
of accessibility
is quite drastic.


959
00:46:47,306 --> 00:46:48,826
Before, there was hardly any,


960
00:46:48,826 --> 00:46:50,526
and now there's almost
full support.


961
00:46:51,506 --> 00:46:55,216
So there's a couple more
things that you can do here


962
00:46:55,416 --> 00:46:57,466
to make this app
even more accessible.


963
00:46:57,546 --> 00:46:58,856
I'm just going to point out one.


964
00:46:59,736 --> 00:47:02,136
Suppose for example that
I'm playing this game


965
00:47:02,386 --> 00:47:04,896
with a user who's
using VoiceOver


966
00:47:05,656 --> 00:47:06,966
and they're on the checkbox.


967
00:47:07,156 --> 00:47:08,346
And focus is on the checkbox.


968
00:47:09,246 --> 00:47:12,766
They can activate the item
using "command, option, space."


969
00:47:13,556 --> 00:47:16,576
But I can also go in and click
that checkbox with my mouse.


970
00:47:17,206 --> 00:47:20,416
So how does a VoiceOver user
know if I've changed the state


971
00:47:20,416 --> 00:47:22,536
of something out
from underneath them?


972
00:47:23,456 --> 00:47:25,056
Well we've solved
this problem using


973
00:47:25,056 --> 00:47:26,686
Accessibility Notifications.


974
00:47:26,766 --> 00:47:28,196
And there's always been
some questions about,


975
00:47:28,626 --> 00:47:29,996
"which ones do I use?


976
00:47:29,996 --> 00:47:31,056
When do I use them?"


977
00:47:31,576 --> 00:47:32,676
And we really tried to answer


978
00:47:32,676 --> 00:47:34,956
that with the new
protocols file.


979
00:47:35,386 --> 00:47:37,216
So again, this is
your one-stop-shop,


980
00:47:37,216 --> 00:47:38,586
and you can really
go back there.


981
00:47:39,396 --> 00:47:43,036
Here in the checkbox protocol
declaration, there's a comment


982
00:47:43,106 --> 00:47:45,486
which tells me about the
notifications I need to post.


983
00:47:46,106 --> 00:47:47,176
So in this case it says,


984
00:47:47,636 --> 00:47:50,546
"the AccessibilityValueChanged
Notification needs


985
00:47:50,546 --> 00:47:53,046
to be posted whenever
accessibilityValue changes."


986
00:47:53,446 --> 00:47:56,056
Recall that's the checked
or unchecked state.


987
00:47:56,706 --> 00:47:58,666
So if at any point it
changes for any reason,


988
00:47:59,106 --> 00:48:01,006
I need to send this
notification.


989
00:48:01,346 --> 00:48:02,466
And it's really easy to do.


990
00:48:02,466 --> 00:48:04,566
So I'm going to go back
to my checkbox view.


991
00:48:05,346 --> 00:48:07,996
And if you recall, we had
the toggleCheckedState


992
00:48:07,996 --> 00:48:09,576
and this is what got activated


993
00:48:09,576 --> 00:48:12,256
when you used the
AccessibilityActivate action.


994
00:48:12,966 --> 00:48:14,876
And here's where I need
to post that notification.


995
00:48:15,396 --> 00:48:19,186
So I can do that with
NSAccessibility PostNotificaton.


996
00:48:19,916 --> 00:48:22,186
The element this notification
should be associated


997
00:48:22,186 --> 00:48:23,696
with is the checkbox itself.


998
00:48:24,256 --> 00:48:27,346
And then the notification
type is an NSAccessibility


999
00:48:27,766 --> 00:48:29,646
ValueChangedNotification.


1000
00:48:30,626 --> 00:48:30,876
That's it.


1001
00:48:32,366 --> 00:48:35,726
So again, some of the more
advanced accessibility items now


1002
00:48:36,036 --> 00:48:38,056
don't actually take that
much more code either.


1003
00:48:38,916 --> 00:48:41,236
And so now if you were
to run this app again,


1004
00:48:41,516 --> 00:48:43,186
and you were collaborating
with the VoiceOver user,


1005
00:48:43,186 --> 00:48:45,066
and you clicked that button
they would now be announced --


1006
00:48:45,066 --> 00:48:46,826
ah, the new state would
now be announced to them.


1007
00:48:47,986 --> 00:48:49,566
So that's the end of the demo.


1008
00:48:50,316 --> 00:48:52,716
And I hope what you've seen
is that we've tried to make it


1009
00:48:52,916 --> 00:48:55,176
as easy as possible for you


1010
00:48:56,236 --> 00:48:58,886
to add accessibility
with our new API.


1011
00:49:00,016 --> 00:49:05,016
I should also mention that
we have a sample app --


1012
00:49:05,016 --> 00:49:06,106
you may have seen
this in the past --


1013
00:49:06,106 --> 00:49:08,496
we call it Accessibility
UIExamples.


1014
00:49:08,956 --> 00:49:10,996
And what it is, is a collection


1015
00:49:10,996 --> 00:49:12,736
of all different
types of elements.


1016
00:49:12,886 --> 00:49:16,326
So here there's a
button, text, images.


1017
00:49:16,526 --> 00:49:19,636
We also have more complicated
UI like layout areas,


1018
00:49:19,846 --> 00:49:22,196
collapsible outline
views, table views.


1019
00:49:22,706 --> 00:49:25,056
And what we've done
is implemented each


1020
00:49:25,056 --> 00:49:26,456
of these using different
methods.


1021
00:49:26,606 --> 00:49:30,226
So for example, subclassing
from standard AppKit controls,


1022
00:49:30,476 --> 00:49:35,046
making it a subclass of NSView,
but also OpenGL CALayers --


1023
00:49:35,046 --> 00:49:36,366
we have examples
for all of those.


1024
00:49:37,056 --> 00:49:39,556
And for this release we've
gone through, we've ripped


1025
00:49:39,556 --> 00:49:40,966
out the accessibility
that we had,


1026
00:49:41,306 --> 00:49:43,366
and added it right back
in with the new API.


1027
00:49:43,366 --> 00:49:47,556
And what we found was a
drastic code savings: many,


1028
00:49:47,596 --> 00:49:48,626
many fewer lines of code.


1029
00:49:48,626 --> 00:49:52,156
And what we hope to do
is have this available


1030
00:49:52,496 --> 00:49:53,346
as a reference for you.


1031
00:49:53,346 --> 00:49:55,486
Say "hey, I want to learn
how to use this protocol,"


1032
00:49:55,826 --> 00:49:56,676
you have an example


1033
00:49:56,676 --> 00:49:58,406
in a concrete implementation
that we've done.


1034
00:49:58,956 --> 00:50:01,556
This is available, along
with the Tic Tac Toe app,


1035
00:50:01,556 --> 00:50:03,686
on developer.apple.com today.


1036
00:50:04,246 --> 00:50:05,136
Please go check it out.


1037
00:50:05,256 --> 00:50:05,926
Download it.


1038
00:50:06,076 --> 00:50:09,856
We also have, in this particular
example, a nice readme file


1039
00:50:09,856 --> 00:50:11,776
that has kind of a
developer quickstart


1040
00:50:11,776 --> 00:50:12,826
on how to use our API.


1041
00:50:16,276 --> 00:50:19,816
So with that, in summary,
we really took this release


1042
00:50:19,816 --> 00:50:22,426
to think about "how
could we make it easier


1043
00:50:22,936 --> 00:50:24,766
to add accessibility
to your application?"


1044
00:50:25,386 --> 00:50:27,986
What we came away
with was a brand new,


1045
00:50:28,356 --> 00:50:30,016
really easy-to-use API.


1046
00:50:31,086 --> 00:50:33,086
And it's really easy
to use because all


1047
00:50:33,086 --> 00:50:35,656
of the accessibility
attributes are now properties


1048
00:50:35,656 --> 00:50:36,386
on the objects.


1049
00:50:36,466 --> 00:50:37,766
So they're really easy to set.


1050
00:50:37,996 --> 00:50:41,086
We also have the accessibility
protocols, which guide you


1051
00:50:41,086 --> 00:50:44,516
through the items that you
need to implement in order


1052
00:50:44,516 --> 00:50:46,606
to make your custom
UI accessible.


1053
00:50:47,216 --> 00:50:50,296
And then lastly we formalize
the faux UI element class


1054
00:50:50,636 --> 00:50:52,216
into NSAccessibility Element.


1055
00:50:52,456 --> 00:50:55,646
And it's there for you to be
an accessibility backing object


1056
00:50:55,946 --> 00:50:59,586
when there's no UI view for
it, or NSView backing it.


1057
00:51:00,206 --> 00:51:02,216
We'd like to encourage you
to test with VoiceOver.


1058
00:51:02,216 --> 00:51:05,356
It ships with every Mac and
it's a great way for you


1059
00:51:05,356 --> 00:51:08,296
to see what our customers
are going to experience using


1060
00:51:08,296 --> 00:51:10,756
that assistive technology
with your application.


1061
00:51:11,396 --> 00:51:14,256
If you'd like to just kind
of debug a little bit more,


1062
00:51:14,546 --> 00:51:16,796
we have Accessibility
Inspector there to really get


1063
00:51:16,796 --> 00:51:20,106
in at what exactly is going on
with your accessibility element.


1064
00:51:21,156 --> 00:51:23,296
And lastly, we wanted
to support you


1065
00:51:23,296 --> 00:51:24,716
in this transition
to the new API.


1066
00:51:24,716 --> 00:51:27,406
And we really want to
encourage you to use it.


1067
00:51:27,976 --> 00:51:30,456
And so we've built up these
really great developer examples


1068
00:51:30,456 --> 00:51:33,936
that we've now released, and we
hope you can use as a reference


1069
00:51:34,176 --> 00:51:35,756
for your implementation.


1070
00:51:36,356 --> 00:51:40,336
If you'd like more
information about our team,


1071
00:51:40,336 --> 00:51:43,796
or accessibility, or frameworks
in general, please feel free


1072
00:51:43,796 --> 00:51:45,916
to reach out to our App
Frameworks Evangelist,


1073
00:51:45,916 --> 00:51:46,546
Jake Behrens.


1074
00:51:46,676 --> 00:51:49,326
His email is behrens@apple.com.


1075
00:51:49,806 --> 00:51:52,416
And if you have more technical
questions, you can take a look


1076
00:51:52,416 --> 00:51:54,936
at the documentation
on developer.apple.com,


1077
00:51:55,236 --> 00:51:57,086
as well as ask questions
on the dev forums.


1078
00:51:59,116 --> 00:52:01,586
If you liked this session, and
you're interested in finding


1079
00:52:01,586 --> 00:52:04,236
out how accessibility works
on our other platforms,


1080
00:52:04,676 --> 00:52:07,806
there's an "Accessibility on
iOS" session in this room,


1081
00:52:07,856 --> 00:52:09,156
right after this presentation.


1082
00:52:09,776 --> 00:52:12,736
And then a Web Accessibility
presentation


1083
00:52:13,016 --> 00:52:14,486
on Friday at 9:00 am.


1084
00:52:15,196 --> 00:52:16,806
Thank you so much for
coming to our session.


1085
00:52:16,806 --> 00:52:18,186
We really appreciate
you being here.


1086
00:52:18,556 --> 00:52:19,756
And from all of us at Apple,


1087
00:52:19,906 --> 00:52:21,176
we hope you have a
fantastic rest of WWDC.


1088
00:52:21,176 --> 00:52:21,646
Thank you very much.


1089
00:52:21,646 --> 00:52:22,686
[1]Cannot tell if
speaker is saying


1090
00:52:22,936 --> 00:52:23,986
"accessibility compiler"
or "-Xcompiler".


1091
00:52:24,016 --> 00:52:24,856
[2]I think she's
saying "forUIElement".

