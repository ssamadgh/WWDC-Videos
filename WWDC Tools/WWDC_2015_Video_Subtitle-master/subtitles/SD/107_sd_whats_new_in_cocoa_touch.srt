1
00:00:24,406 --> 00:00:27,936
>> Jason Beaver: Good afternoon.


2
00:00:28,036 --> 00:00:29,216
Welcome to What's
New in Cocoa Touch.


3
00:00:29,546 --> 00:00:30,716
I'm Jason Beaver, I'm one


4
00:00:30,716 --> 00:00:33,036
of the senior engineering
managers in the iOS group.


5
00:00:35,206 --> 00:00:37,576
There is a lot that's
new to discuss in iOS 9,


6
00:00:37,766 --> 00:00:40,986
but first I want to take a look
back at some changes we've made


7
00:00:40,986 --> 00:00:42,276
over the past few years.


8
00:00:43,836 --> 00:00:48,056
Since iOS 6 we've been laying
the groundwork for major change


9
00:00:48,056 --> 00:00:51,016
in how applications are built
for iOS and we've been rolling


10
00:00:51,016 --> 00:00:53,846
out the changes in
each major release.


11
00:00:55,696 --> 00:00:57,786
In iOS 6 we added autolayout.


12
00:00:58,336 --> 00:01:00,576
This allows you to
easily build a dynamic


13
00:01:00,576 --> 00:01:03,246
and versatile interface
that responds to changes


14
00:01:03,246 --> 00:01:06,406
in available size and
screen orientation,


15
00:01:06,636 --> 00:01:07,786
as well as localization.


16
00:01:09,756 --> 00:01:12,476
In iOS 7 we introduced
dynamic type


17
00:01:13,176 --> 00:01:15,426
and this lets you achieve
beautiful typography


18
00:01:15,426 --> 00:01:18,736
in your application in a variety
of users' selectable text sizes.


19
00:01:19,556 --> 00:01:20,926
And coupled with autolayout,


20
00:01:20,926 --> 00:01:24,006
your interface will adapt
automatically to changes


21
00:01:24,006 --> 00:01:27,816
in the user's selected text size
and by adopting dynamic type,


22
00:01:27,966 --> 00:01:31,526
the system can make improvements
to the text rendering and layout


23
00:01:31,526 --> 00:01:33,356
that your application
will inherent for free.


24
00:01:35,646 --> 00:01:39,006
In iOS 8 we made what is
perhaps the biggest change.


25
00:01:39,096 --> 00:01:40,886
We introduced the
concept of adaptivity.


26
00:01:42,586 --> 00:01:44,576
This is the concept that
your application should adapt


27
00:01:45,166 --> 00:01:46,806
to changes in the
running environment.


28
00:01:47,566 --> 00:01:50,396
Fundamental to this
concept is size classes.


29
00:01:50,906 --> 00:01:54,916
Size classes drive
structural changes


30
00:01:54,916 --> 00:01:57,026
to your applications'
user interface based


31
00:01:57,026 --> 00:01:58,836
on whether space is constrained


32
00:01:58,836 --> 00:02:00,206
in a particular dimension
or not.


33
00:02:01,486 --> 00:02:05,136
In the settings application
shown here this is the identical


34
00:02:05,136 --> 00:02:08,395
code running on both
an iPad and an iPhone.


35
00:02:08,395 --> 00:02:11,246
The difference in size classes
driven structural changes


36
00:02:11,596 --> 00:02:12,596
to the user interface.


37
00:02:14,226 --> 00:02:17,376
Size classes drives the
adaptivity of many parts


38
00:02:17,376 --> 00:02:21,436
of the iKit view controllers,
view controller presentations,


39
00:02:22,286 --> 00:02:25,186
search results, action
sheets, and many more,


40
00:02:25,616 --> 00:02:29,516
all of these adapt to the size
class and to the available space


41
00:02:29,516 --> 00:02:30,576
that they have to work with.


42
00:02:32,886 --> 00:02:34,586
When we introduced the concept


43
00:02:34,586 --> 00:02:37,856
of adaptivity last year it
wasn't clear why we were moving


44
00:02:37,856 --> 00:02:38,546
in this direction.


45
00:02:39,326 --> 00:02:41,106
In applications we're
always full screen


46
00:02:41,106 --> 00:02:42,646
and they generally did not need


47
00:02:43,136 --> 00:02:46,446
to change their user interface
structure while the application


48
00:02:46,446 --> 00:02:46,946
was running.


49
00:02:48,386 --> 00:02:50,156
With the introduction
of multitasking,


50
00:02:50,886 --> 00:02:52,746
the reason for the
changes is now clear.


51
00:02:53,266 --> 00:02:57,626
You're no longer building two
distinct experiences tailored


52
00:02:57,866 --> 00:02:59,296
to specific pieces of hardware.


53
00:02:59,986 --> 00:03:04,046
You're providing a continuum of
experiences tailored to the size


54
00:03:04,046 --> 00:03:06,406
that your user is
running the app at.


55
00:03:06,686 --> 00:03:08,736
Adopting these foundational
technologies,


56
00:03:08,736 --> 00:03:12,166
not only is your app ready for
the entire range of hardware


57
00:03:12,166 --> 00:03:14,376
that we ship, it is also ready


58
00:03:14,376 --> 00:03:16,396
to support these new
multitasking features


59
00:03:17,086 --> 00:03:18,286
and developers that we worked


60
00:03:18,286 --> 00:03:20,896
with that had already
adopted all of these changes


61
00:03:21,566 --> 00:03:24,566
and in some cases literally
only needed a matter of minutes


62
00:03:24,886 --> 00:03:25,996
to get their app ready


63
00:03:25,996 --> 00:03:28,196
to run seamlessly
alongside our own apps.


64
00:03:30,546 --> 00:03:32,916
One special case to deal
with is picture-in-picture,


65
00:03:33,016 --> 00:03:36,926
if your application supports
background media playback you


66
00:03:36,926 --> 00:03:40,506
can use new API in iOS
9 to enable your player


67
00:03:40,506 --> 00:03:41,706
to support picture-in-picture.


68
00:03:42,566 --> 00:03:44,506
Keep in mind that with
picture-in-picture as well


69
00:03:44,506 --> 00:03:47,826
as all of multitasking,
your application needs


70
00:03:47,826 --> 00:03:50,206
to be a good citizen to make
sure it is not interfering


71
00:03:50,206 --> 00:03:52,046
with the overall
user experience.


72
00:03:52,576 --> 00:03:56,986
We have a number of sessions
on multitasking this week,


73
00:03:57,136 --> 00:03:59,206
Getting Started with
Multitasking on iPad,


74
00:03:59,586 --> 00:04:02,136
Multitasking Essentials
for Media-based Apps


75
00:04:02,486 --> 00:04:04,746
and Optimizing your
App for Multitasking.


76
00:04:05,286 --> 00:04:09,566
Let's move on and talk about
things that are new in iOS 9.


77
00:04:11,216 --> 00:04:12,396
The first is autolayout.


78
00:04:13,066 --> 00:04:18,706
We're introducing a new UI
layout guide class in cases


79
00:04:18,706 --> 00:04:21,446
where you would have
used extra views


80
00:04:21,446 --> 00:04:25,226
in your autolayout constraints
you now can use layout guides


81
00:04:25,226 --> 00:04:27,096
to avoid cluttering up
your view hierarchy.


82
00:04:28,776 --> 00:04:32,266
There are two layout guides
we're introducing by default,


83
00:04:33,426 --> 00:04:36,426
layout margins guide and
readable content guide.


84
00:04:36,896 --> 00:04:39,016
We can use these
properties on UIView


85
00:04:39,016 --> 00:04:42,266
to allow more expressiveness
in defining


86
00:04:42,266 --> 00:04:44,216
where within a view
content should be drawn.


87
00:04:45,616 --> 00:04:49,086
These supersede layout margins
that we've introduced in iOS 8


88
00:04:49,086 --> 00:04:52,146
and you should use layout
guides in any new code you write


89
00:04:52,146 --> 00:04:54,926
and as you revisit old code
you should replace margins


90
00:04:54,926 --> 00:04:55,706
with layout guides.


91
00:04:56,026 --> 00:05:00,036
I want to take a moment though
to talk about the second case,


92
00:05:00,096 --> 00:05:01,786
the readable content guide.


93
00:05:03,476 --> 00:05:07,106
When you have large
bodies of text,


94
00:05:07,706 --> 00:05:09,846
the length of the line
has a great deal to do


95
00:05:09,846 --> 00:05:12,446
with the readability and
legibility of that text.


96
00:05:13,846 --> 00:05:17,766
If the lines are too wide, as
we see here, it's harder to see


97
00:05:17,766 --> 00:05:21,206
where a line begins and ends and
it can be difficult to continue


98
00:05:21,206 --> 00:05:22,856
onto the next line
when you're reading.


99
00:05:23,746 --> 00:05:26,646
Conversely, if the lines
are too narrow your eye has


100
00:05:26,646 --> 00:05:28,546
to travel back too frequently


101
00:05:28,546 --> 00:05:29,986
which interrupts
the flow of reading.


102
00:05:31,106 --> 00:05:33,966
The optimal line length is
dependent on many factors,


103
00:05:33,966 --> 00:05:36,596
including the font, the
size, and line spacing,


104
00:05:37,566 --> 00:05:39,786
but by using the
readable content guide,


105
00:05:40,446 --> 00:05:43,126
you can be assured that your
text will be readable regardless


106
00:05:43,126 --> 00:05:46,746
of the user's text size
or the available space


107
00:05:46,826 --> 00:05:48,426
that your application
has to render the text.


108
00:05:48,426 --> 00:05:50,646
Let's talk about how
layout guides can be used


109
00:05:50,676 --> 00:05:51,936
to reduce the number of
views in your application.


110
00:05:52,006 --> 00:06:00,346
Let's say we have a view that
shows a number of planets


111
00:06:00,416 --> 00:06:03,626
and we want to show them all
centered in their parent view


112
00:06:04,056 --> 00:06:06,676
or show them spread
out along the x axis.


113
00:06:07,216 --> 00:06:09,786
Before using autolayout
constraints we would've had


114
00:06:09,786 --> 00:06:11,496
to introduce a number
of extra views


115
00:06:11,766 --> 00:06:13,086
into the view hierarchy
to do that.


116
00:06:13,596 --> 00:06:15,626
We can now simply
define the layout guides


117
00:06:15,626 --> 00:06:17,496
that define the proportion
of the space


118
00:06:17,946 --> 00:06:22,046
that the view is
using when laid out.


119
00:06:23,846 --> 00:06:26,696
We also will create an
additional set of constraints


120
00:06:26,696 --> 00:06:30,856
that will center the views
and then simply by changing


121
00:06:30,856 --> 00:06:34,216
which set of constraints is
active we get a nice animation


122
00:06:34,216 --> 00:06:34,836
like this.


123
00:06:35,526 --> 00:06:37,446
In this case we're changing
all of the constraints


124
00:06:37,446 --> 00:06:41,336
at the same time but if
we instead change the set


125
00:06:41,336 --> 00:06:44,846
of constraints at different
times using a keyframe animation


126
00:06:45,076 --> 00:06:47,756
we can achieve a number of
very interesting effects.


127
00:06:50,576 --> 00:06:55,376
We're also bringing the
StackView over to iOS in iOS 9.


128
00:06:56,296 --> 00:06:59,856
This allows you to manage
a set of sub views as stack


129
00:06:59,856 --> 00:07:02,106
that can be arranged either
horizontally or vertically,


130
00:07:02,396 --> 00:07:06,226
the StackView uses autolayout
under the covers but manages all


131
00:07:06,226 --> 00:07:07,396
of the constraints for you.


132
00:07:07,396 --> 00:07:11,016
It allows you to adjust
the spacing alignment,


133
00:07:11,546 --> 00:07:14,826
it can allow you to adjust
how the views are distributed


134
00:07:14,826 --> 00:07:17,316
within the available
space either equally


135
00:07:17,316 --> 00:07:18,136
or proportionately.


136
00:07:18,716 --> 00:07:21,276
StackViews also can be nested.


137
00:07:21,276 --> 00:07:26,236
You can have a StackView
as an element


138
00:07:26,236 --> 00:07:29,166
in another StackView allowing
you to create very rich layouts.


139
00:07:29,686 --> 00:07:32,716
These layouts will
automatically adjust


140
00:07:32,716 --> 00:07:35,916
to the content being
displayed as well


141
00:07:36,206 --> 00:07:39,936
as to the available
space that's there.


142
00:07:40,176 --> 00:07:42,616
So we also introduced
shortcuts bar.


143
00:07:43,176 --> 00:07:46,496
This appears over the software
keyboard or at the bottom


144
00:07:46,496 --> 00:07:48,536
of the screen when the
hardware keyboard is attached.


145
00:07:49,536 --> 00:07:53,556
This bar contains stock controls
for things like bold, italic,


146
00:07:53,556 --> 00:07:55,506
underline and cut,
copy and paste.


147
00:07:55,966 --> 00:07:58,216
It can also be customized
in your application.


148
00:07:59,676 --> 00:08:03,966
Anything that conforms to the UI
text input protocol can return


149
00:08:04,016 --> 00:08:06,036
an input-assistant
item using this method.


150
00:08:06,626 --> 00:08:11,566
UI text input-assistant
item is a new class in iOS 9


151
00:08:12,506 --> 00:08:15,816
and has two properties
for specifying the leading


152
00:08:15,846 --> 00:08:17,576
and trailing bar-button groups


153
00:08:17,576 --> 00:08:23,066
so you can easily add your
own elements in there.


154
00:08:23,266 --> 00:08:26,846
Now, as you saw in the State
of the Union, we no longer have


155
00:08:26,986 --> 00:08:29,226
to have the entire
interface for your application


156
00:08:29,226 --> 00:08:30,356
in a single storyboard.


157
00:08:30,356 --> 00:08:33,395
You can now link from one
storyboard to another.


158
00:08:34,645 --> 00:08:37,176
We also offer a way
now to unwind segues.


159
00:08:38,015 --> 00:08:43,486
[ Applause ]


160
00:08:43,986 --> 00:08:47,106
Also as you saw, we now have
full right-to-left support


161
00:08:47,106 --> 00:08:48,106
in the operating system.


162
00:08:49,076 --> 00:08:51,716
If you have a localization
for a right-to-left language


163
00:08:52,156 --> 00:08:53,136
and have linked to your app


164
00:08:53,136 --> 00:08:55,406
on iOS 9 this will
happen automatically


165
00:08:55,406 --> 00:08:56,436
in your app as well.


166
00:08:57,496 --> 00:09:00,246
All UI Kit controls will
automatically reverse.


167
00:09:00,816 --> 00:09:02,686
Notice that navigation
is reversed,


168
00:09:03,446 --> 00:09:05,186
all of the animations
are reversed,


169
00:09:05,536 --> 00:09:08,916
layout of table view cells,
even controls like sliders


170
00:09:08,916 --> 00:09:10,396
and switches are all reversed.


171
00:09:11,746 --> 00:09:14,506
Collection view will
automatically reverse its layout


172
00:09:14,506 --> 00:09:15,926
and will flow from
right-to-left.


173
00:09:16,546 --> 00:09:18,986
Here we see that the swipe to
the leader mark requires a swipe


174
00:09:18,986 --> 00:09:20,486
to the right and marking


175
00:09:20,486 --> 00:09:22,946
as unread requires
a swipe to the left.


176
00:09:29,286 --> 00:09:32,856
There's two properties
on both view controller


177
00:09:32,856 --> 00:09:34,896
and view called semantic
content attribute


178
00:09:35,696 --> 00:09:39,256
that let you specify how
content should lay out.


179
00:09:39,406 --> 00:09:42,246
By default, everything
will flip automatically,


180
00:09:43,166 --> 00:09:46,776
but you can override the
properties to customize


181
00:09:46,776 --> 00:09:48,386
that if it makes sense
in your application.


182
00:09:49,196 --> 00:09:51,566
There is also a method to
get the layout direction


183
00:09:52,046 --> 00:09:58,956
for a particular
content attribute.


184
00:09:59,086 --> 00:10:02,136
The semantic content attribute
has one of five values,


185
00:10:02,266 --> 00:10:03,496
the first is unspecified.


186
00:10:03,496 --> 00:10:04,456
This is the default.


187
00:10:05,096 --> 00:10:07,446
Unless you have a reason to
change what UI Kit is doing,


188
00:10:07,446 --> 00:10:09,176
this is the value you
should leave it at.


189
00:10:10,806 --> 00:10:15,116
If you have a set of controls
that represent playback controls


190
00:10:15,116 --> 00:10:18,216
like play, fast forward
and rewind,


191
00:10:18,216 --> 00:10:20,386
you can use the playback
content attribute.


192
00:10:21,496 --> 00:10:25,696
If you have a set of controls
that represent or result


193
00:10:25,696 --> 00:10:27,966
in some sort of directional
change in your UI,


194
00:10:28,486 --> 00:10:30,926
so let's say text alignment
controls, left, center,


195
00:10:30,926 --> 00:10:34,296
right in a text editor,
you can use the spatial


196
00:10:34,296 --> 00:10:35,266
content attribute.


197
00:10:36,256 --> 00:10:38,286
Finally, there is
two additional values


198
00:10:38,616 --> 00:10:40,436
that lets you force
either left to right


199
00:10:40,436 --> 00:10:41,676
or right-to-left layout.


200
00:10:46,016 --> 00:10:50,026
Now, for images, UI Kit can't
know whether an image should be


201
00:10:50,026 --> 00:10:51,676
flipped by default in all cases,


202
00:10:51,906 --> 00:10:53,836
things that represent user
content like photographs,


203
00:10:53,836 --> 00:10:56,516
shouldn't be flipped but
things that represent controls


204
00:10:56,516 --> 00:10:58,166
in your application
you may want to flip.


205
00:10:59,816 --> 00:11:02,666
So we have a property
or a method on UI image


206
00:11:02,756 --> 00:11:06,436
from right-to-left to allow
you to tell us that you want


207
00:11:06,436 --> 00:11:09,556
to use a flipped image
and also a property to ask


208
00:11:09,556 --> 00:11:10,636
if that image has been flipped.


209
00:11:10,716 --> 00:11:14,466
I encourage you all to come
to the new UI Kit support


210
00:11:14,466 --> 00:11:16,266
for international
interfaces and find


211
00:11:16,266 --> 00:11:19,476
out how you can make your app
support right-to-left languages.


212
00:11:23,116 --> 00:11:26,176
For accessibility you
now have the ability


213
00:11:26,176 --> 00:11:28,676
to use more speech
voices like Alex as well


214
00:11:28,676 --> 00:11:31,616
as high-quality voices
in AV speech synthesis.


215
00:11:32,116 --> 00:11:36,326
I encourage you to come out
to iOS Accessibility to find


216
00:11:36,326 --> 00:11:38,776
out more about how to
make your app accessible.


217
00:11:41,796 --> 00:11:44,376
You also saw that we're
introducing a number


218
00:11:44,836 --> 00:11:47,486
of new text editing
gestures in iOS 9.


219
00:11:48,226 --> 00:11:51,786
These gestures can be
performed either on the keyboard


220
00:11:51,786 --> 00:11:54,706
at the bottom of the screen
or in the text area itself.


221
00:11:55,376 --> 00:11:58,746
They allow you to move the
insertion point indirectly,


222
00:11:59,676 --> 00:12:02,386
they allow you to
select a word, sentence,


223
00:12:02,386 --> 00:12:07,026
or paragraph very easily just by
multiple taps and also allow you


224
00:12:07,026 --> 00:12:09,186
to easily extend an
existing selection.


225
00:12:10,416 --> 00:12:13,626
Coupled with the shortcut bar
we introduced, it allows you


226
00:12:13,626 --> 00:12:16,996
to easily access, copy and paste
without moving up to the text.


227
00:12:17,796 --> 00:12:20,626
Text interaction manipulation
has never been easier or faster.


228
00:12:21,506 --> 00:12:24,676
Now, there's nothing you need
to do in your application


229
00:12:24,676 --> 00:12:26,786
to adopt these text
editing gestures,


230
00:12:27,326 --> 00:12:30,366
but if you have customized
the gestures in a text view


231
00:12:30,366 --> 00:12:31,436
within your application,


232
00:12:31,856 --> 00:12:33,346
you should make sure
they're not conflicting


233
00:12:33,346 --> 00:12:37,806
with the new system
text gestures.


234
00:12:38,036 --> 00:12:41,916
In iOS 7 we added support for
application to find keyboard,


235
00:12:42,156 --> 00:12:43,876
hardware keyboard commands.


236
00:12:44,786 --> 00:12:46,966
App could have their own
commands like command


237
00:12:46,966 --> 00:12:48,316
in to create a new document.


238
00:12:49,376 --> 00:12:50,886
This was a benefit
to power users


239
00:12:50,886 --> 00:12:53,026
who already knew these
commands but there was no way


240
00:12:53,026 --> 00:12:54,696
to discover what
these commands are.


241
00:12:55,636 --> 00:12:59,636
In iOS 9 we're introducing a new
keyboard command discoverability


242
00:12:59,636 --> 00:13:02,656
HUD and if you press
and hold the command key


243
00:13:02,896 --> 00:13:07,116
on the hardware keyboard and
hold it for just a moment,


244
00:13:07,116 --> 00:13:09,676
the HUD will appear and
show you the set of commands


245
00:13:09,676 --> 00:13:12,476
that are available at
that particular moment.


246
00:13:12,476 --> 00:13:14,496
Notice that this is
context dependent.


247
00:13:15,466 --> 00:13:16,996
Depending on the state
of your application


248
00:13:16,996 --> 00:13:19,246
at that time you'll get a
different set of commands.


249
00:13:19,356 --> 00:13:22,866
So, instead of seeing the
entire set and some enabled


250
00:13:22,866 --> 00:13:25,586
and some are disabled, you
only see the ones that apply.


251
00:13:26,516 --> 00:13:29,376
All you need to do to adopt
this in your application is


252
00:13:29,376 --> 00:13:33,186
to set the discoverability title
for each of your key commands.


253
00:13:33,426 --> 00:13:35,536
UI Kit will take care
automatically to figure


254
00:13:35,536 --> 00:13:42,066
out what commands are applicable
in that moment in time.


255
00:13:42,326 --> 00:13:44,246
Let's take a moment to
talk about touch events.


256
00:13:45,386 --> 00:13:46,206
When a touch is tracking


257
00:13:46,206 --> 00:13:48,346
on the screen there
is some inherent lag


258
00:13:48,986 --> 00:13:52,356
between where the finger is
and any resulting drawing


259
00:13:52,356 --> 00:13:53,436
that you see on the screen.


260
00:13:54,396 --> 00:13:58,686
It simply takes time to
scan the hardware to do all


261
00:13:58,686 --> 00:14:01,016
of the intermediate
processing and drawing


262
00:14:01,016 --> 00:14:02,786
and then flush the
results to that display.


263
00:14:03,756 --> 00:14:05,866
This is called the
touch-to-display latency.


264
00:14:06,326 --> 00:14:08,796
Most users will never
notice this latency


265
00:14:08,796 --> 00:14:10,576
under most circumstances.


266
00:14:11,196 --> 00:14:13,446
It's perceptable when the user
moves their finger fast enough.


267
00:14:14,606 --> 00:14:17,516
Despite the fact that iOS
already has industry-leading


268
00:14:17,596 --> 00:14:20,786
touch-to-diplay latency,
in iOS 9 we set


269
00:14:20,786 --> 00:14:23,216
out to dramatically
improve this latency.


270
00:14:23,746 --> 00:14:26,956
When a touch is tracking
on the screen,


271
00:14:27,856 --> 00:14:29,996
UI Kit is notifying
the application


272
00:14:29,996 --> 00:14:32,826
with each screen refresh so
that the application can update


273
00:14:32,976 --> 00:14:34,656
its state.


274
00:14:35,106 --> 00:14:36,866
In some of our more
recent hardware,


275
00:14:37,676 --> 00:14:40,896
the touches are updated more
frequently than the display is.


276
00:14:41,946 --> 00:14:44,196
So there is now a new
method to get access


277
00:14:44,196 --> 00:14:47,236
to any intermediate touches
since the last display refresh.


278
00:14:47,786 --> 00:14:51,206
For drawing applications this
can result in much smoother


279
00:14:51,206 --> 00:14:52,376
and more accurate drawing.


280
00:14:52,976 --> 00:14:56,286
As a first step to improving


281
00:14:56,286 --> 00:14:59,356
that touch-to-display latency
we now offer touch prediction


282
00:14:59,356 --> 00:14:59,846
as well.


283
00:15:01,016 --> 00:15:03,866
This uses a sophisticated
algorithm that looks


284
00:15:03,866 --> 00:15:06,686
at the touches velocity,
acceleration and curvature


285
00:15:06,976 --> 00:15:08,676
to predict where
the touch is headed.


286
00:15:09,596 --> 00:15:13,216
That lets you reduce the
apparent latency for drawing


287
00:15:13,216 --> 00:15:17,956
where the touch will be rather
than where the touch is.


288
00:15:19,676 --> 00:15:25,116
[ Applause ]


289
00:15:25,616 --> 00:15:26,866
We went much further than that.


290
00:15:27,016 --> 00:15:28,756
In addition to offering
touch prediction,


291
00:15:28,756 --> 00:15:32,086
we have made a number of changes
throughout the entire software


292
00:15:32,086 --> 00:15:36,626
stack to reduce the latency
from over 60 milliseconds which,


293
00:15:36,626 --> 00:15:38,416
as I said, is already
industry leading,


294
00:15:38,976 --> 00:15:40,766
to less than 30 milliseconds.


295
00:15:42,516 --> 00:15:48,596
[ Applause ]


296
00:15:49,096 --> 00:15:52,896
We have also introduced a number
of changes in UI Kit dynamics.


297
00:15:54,116 --> 00:15:56,886
The first of these is now
we support non-rectangular


298
00:15:56,886 --> 00:15:59,806
collision bounds.


299
00:16:00,516 --> 00:16:04,376
[ Applause ]


300
00:16:04,876 --> 00:16:07,326
In addition to rectangular
we now support elliptical


301
00:16:07,326 --> 00:16:09,636
and path-based collisions
and this results


302
00:16:09,636 --> 00:16:12,396
in much more realistic
collision interactions.


303
00:16:14,006 --> 00:16:18,156
We also support a wide
variety of field behaviors.


304
00:16:19,206 --> 00:16:21,926
We now have linear and radial
gravity like you see here,


305
00:16:22,486 --> 00:16:27,736
spring, drag and velocity, or
noise and turbulence fields


306
00:16:27,736 --> 00:16:31,986
like you see here, electric
and magnetic fields as well.


307
00:16:32,916 --> 00:16:35,096
We also support the
ability for you


308
00:16:35,136 --> 00:16:38,076
to define your own
field effects.


309
00:16:40,436 --> 00:16:43,526
Finally, we have added a number


310
00:16:43,526 --> 00:16:45,246
of new additional
attachment types.


311
00:16:46,116 --> 00:16:49,076
Before we had a very simple
way to attach two objects


312
00:16:49,076 --> 00:16:50,986
and if you wanted to
constrain their movement


313
00:16:50,986 --> 00:16:53,936
in some way you had to set up a
number of external constraints.


314
00:16:54,606 --> 00:16:56,646
Now with these additional
attachment types,


315
00:16:56,926 --> 00:17:00,526
it can dramatically simplify
how you build your UI


316
00:17:00,526 --> 00:17:01,286
dynamics model.


317
00:17:04,876 --> 00:17:09,175
We're also adding the ability
to animate the blur radius.


318
00:17:10,516 --> 00:17:14,705
[ Applause ]


319
00:17:15,205 --> 00:17:17,955
To let you receive beautiful
effects here like you see here,


320
00:17:17,955 --> 00:17:20,626
moving into and out
of spotlight.


321
00:17:21,516 --> 00:17:25,185
We've also made a number
of EPI changes in iOS 9


322
00:17:25,425 --> 00:17:28,185
to optimize their
use with Swift.


323
00:17:29,446 --> 00:17:33,546
This is taking advantage of
the better expressiveness


324
00:17:33,546 --> 00:17:37,856
that Swift offers and to improve
compile-time type checking.


325
00:17:38,386 --> 00:17:44,266
For nullability, you can now
specify whether properties


326
00:17:44,266 --> 00:17:46,506
actions and return
values can be nil or not.


327
00:17:46,506 --> 00:17:49,856
We have gone through our entire
API and defined where it's valid


328
00:17:49,856 --> 00:17:52,656
to have nil arguments
or nil return values


329
00:17:52,966 --> 00:17:57,976
or whether it is
guaranteed not to be nil.


330
00:17:58,126 --> 00:17:59,756
We also have lightweight
generics.


331
00:17:59,886 --> 00:18:02,426
This is a lightweight form
of type parameterization


332
00:18:02,486 --> 00:18:06,166
that lets us better express
Cocoa and Cocoa Touch APIs.


333
00:18:06,546 --> 00:18:10,646
For example the sub views method
on UI views can now be typed


334
00:18:10,876 --> 00:18:15,286
to return an array of UI views
instead of an array of just ids.


335
00:18:15,836 --> 00:18:19,586
You can find out more about
this in What's New in Swift.


336
00:18:20,046 --> 00:18:26,616
New in iOS 9 is the
ability for notifications


337
00:18:26,616 --> 00:18:30,466
to allow text input for the user
or from the user in the same way


338
00:18:30,466 --> 00:18:34,786
as quick reply for
text messages.


339
00:18:35,516 --> 00:18:37,776
[ Applause ]


340
00:18:38,276 --> 00:18:41,916
The UI user-notification
action class has a new behavior


341
00:18:41,916 --> 00:18:44,996
property and if set to
the text-input behavior,


342
00:18:46,356 --> 00:18:48,706
your notification has
a text field allowing


343
00:18:48,706 --> 00:18:49,656
for a quick reply.


344
00:18:51,516 --> 00:18:55,116
[ Applause ]


345
00:18:55,616 --> 00:18:58,446
There is also an additional
action parameters dictionary


346
00:18:58,446 --> 00:19:01,186
that allows you to customize
the title of the Send button.


347
00:19:01,186 --> 00:19:04,326
You can find more at
What's New in Notifications.


348
00:19:04,836 --> 00:19:07,516
We're also introducing a new
SF Safari view controller


349
00:19:07,516 --> 00:19:10,726
and this allows you
to display web content


350
00:19:10,726 --> 00:19:15,186
in a native app surrounded by
all the key Safari UI elements


351
00:19:15,186 --> 00:19:17,306
that are already
familiar to your users.


352
00:19:18,206 --> 00:19:19,796
It even supports
advanced features


353
00:19:19,796 --> 00:19:21,176
like Reader and autofill.


354
00:19:21,176 --> 00:19:26,026
You can find more at Introducing
Safari View Controller.


355
00:19:26,026 --> 00:19:28,906
For iOS 9, we're introducing a
number of new extension points


356
00:19:28,906 --> 00:19:31,376
that allow you to extend other
applications in the system.


357
00:19:31,926 --> 00:19:35,236
For VPN we have three
new extension points.


358
00:19:35,996 --> 00:19:38,616
There is a packet-tunnel
provider which allows you


359
00:19:38,616 --> 00:19:41,586
to build the client side of
your own VPN-tunneling protocol.


360
00:19:43,256 --> 00:19:45,616
There is an app-proxy
provider that allows you


361
00:19:45,616 --> 00:19:46,906
to implement the client side


362
00:19:46,906 --> 00:19:50,516
of your own custom transparent
network proxy protocol


363
00:19:51,086 --> 00:19:54,486
and a filter-control provider
and filter-data provider


364
00:19:54,586 --> 00:19:56,986
that allows you to
perform dynamic on-device


365
00:19:57,076 --> 00:19:57,966
content filtering.


366
00:19:59,006 --> 00:20:01,056
For Safari there's two
new extension points.


367
00:20:02,336 --> 00:20:05,066
Shared Links lets your
application specify content


368
00:20:05,066 --> 00:20:09,266
that should appear in the
shared links users feed.


369
00:20:10,456 --> 00:20:14,476
The content blocking extension
allows you to identify subsets


370
00:20:14,476 --> 00:20:16,576
of content or resources
on a page


371
00:20:16,576 --> 00:20:17,856
and prevent them from showing.


372
00:20:18,386 --> 00:20:28,886
For Spotlight, there's now an
extension that allows the system


373
00:20:28,886 --> 00:20:34,266
to index your application
data and it can also do this


374
00:20:34,266 --> 00:20:41,376
in the background so you don't
have to fire up your application


375
00:20:41,376 --> 00:20:43,106
to re-index your apps content.


376
00:20:43,636 --> 00:20:49,666
You can find out more at
Introducing App Search.


377
00:20:50,406 --> 00:20:54,356
Finally, audio units or core
audio plug-ins that can act


378
00:20:54,356 --> 00:20:57,466
as musical instruments, audio
effects or audio generators,


379
00:20:58,896 --> 00:21:01,256
and until now iOS
users were limited


380
00:21:01,256 --> 00:21:03,866
to the built-in audio
units provided by Apple.


381
00:21:05,236 --> 00:21:07,476
In iOS 9 we added a
new extension point


382
00:21:07,476 --> 00:21:10,016
and you can bring your
audio units to iOS.


383
00:21:11,676 --> 00:21:15,046
[ Applause ]


384
00:21:15,546 --> 00:21:17,716
You can find more at
Audio Units Extensions.


385
00:21:18,236 --> 00:21:22,866
Many of you have asked, and
I'm now pleased to announce


386
00:21:22,906 --> 00:21:25,976
that we've delivered an all-new
Swift and Objective-C API


387
00:21:25,976 --> 00:21:27,136
for interacting with contacts.


388
00:21:27,676 --> 00:21:31,966
[ Applause ]


389
00:21:32,466 --> 00:21:32,966
Thank you.


390
00:21:35,276 --> 00:21:36,256
You can find out more


391
00:21:36,256 --> 00:21:41,706
at Introducing the Contacts
Framework for iOS in iOS 10.


392
00:21:42,076 --> 00:21:46,446
For Wallet and Passkit, you can
now provision cards from scratch


393
00:21:46,446 --> 00:21:48,166
in bank and merchant
applications


394
00:21:48,166 --> 00:21:49,466
if you have a special
entitlement.


395
00:21:50,036 --> 00:21:55,636
You can also suppress ApplePay
from coming up in situations


396
00:21:55,636 --> 00:21:57,556
where it would interfere
with your application.


397
00:21:57,816 --> 00:22:00,956
So say your application
needs to display a barcode


398
00:22:01,256 --> 00:22:03,546
in an environment where
there's an NFC terminal present.


399
00:22:03,876 --> 00:22:05,456
Normally that would
make ApplePay appear.


400
00:22:05,456 --> 00:22:08,976
You can suppress that so that
your barcode can be scanned.


401
00:22:09,046 --> 00:22:12,546
In core location, for
apps linked against iOS 9


402
00:22:12,546 --> 00:22:13,826
or later there are some changes


403
00:22:13,826 --> 00:22:16,196
to how the background
location tracking works.


404
00:22:17,036 --> 00:22:21,876
There is also a new bit of
API on CL Location Manager


405
00:22:22,736 --> 00:22:24,616
to request a one-time
location update


406
00:22:24,616 --> 00:22:28,306
if you don't need ongoing
updates to location,


407
00:22:28,306 --> 00:22:29,786
this is a much more
efficient way


408
00:22:29,926 --> 00:22:30,986
to get the user's
current location.


409
00:22:32,516 --> 00:22:36,586
[ Applause ]


410
00:22:37,086 --> 00:22:40,226
For MapKit there is several
new features with a map view,


411
00:22:40,396 --> 00:22:42,966
the first is access
to 3d Flyover View.


412
00:22:44,676 --> 00:22:47,546
[ Applause ]


413
00:22:48,046 --> 00:22:50,976
You can now show traffic as
well as the compass and scale


414
00:22:51,066 --> 00:22:54,336
and create your own
custom callouts now.


415
00:22:56,516 --> 00:22:59,546
[ Applause ]


416
00:23:00,046 --> 00:23:03,726
In HealthKit you have direct
real-time access to sensor data


417
00:23:03,836 --> 00:23:08,766
in Watch OS 2 and there is
a number of new data types.


418
00:23:09,396 --> 00:23:12,486
Tracking users intake of
water, tracking their exposure


419
00:23:12,486 --> 00:23:14,606
to sunlight and reproductive
health.


420
00:23:15,856 --> 00:23:18,586
There is new APIs for
better device tracking


421
00:23:18,586 --> 00:23:21,486
of HealthKit data, better
support for deleting data


422
00:23:22,096 --> 00:23:24,966
and a new workout session
API to track exercise.


423
00:23:25,566 --> 00:23:28,886
We announced ResearchKit a
few months ago to make it easy


424
00:23:28,886 --> 00:23:30,566
for developers and researchers


425
00:23:31,136 --> 00:23:32,926
to create apps for
medical research.


426
00:23:34,236 --> 00:23:39,016
ResearchKit now includes iPad
support, new active tasks


427
00:23:39,016 --> 00:23:41,456
for PureTone Audiometry
which is used


428
00:23:41,456 --> 00:23:44,036
to identify hearing
threshold levels


429
00:23:44,676 --> 00:23:47,116
and also a simple
reaction-time task


430
00:23:47,116 --> 00:23:49,406
to measure a user's
reaction time to an event.


431
00:23:49,406 --> 00:23:53,956
There is also a new image
capture step to use.


432
00:23:54,046 --> 00:23:57,466
As you saw yesterday, we made
a number of changes to HomeKit.


433
00:23:58,936 --> 00:24:01,446
We now support detailed
change notifications.


434
00:24:01,966 --> 00:24:03,256
When a light gets turned on,


435
00:24:03,736 --> 00:24:08,726
you now get a specific
delegate message identifying the


436
00:24:08,726 --> 00:24:12,156
characteristic and the
accessory that changed.


437
00:24:12,156 --> 00:24:15,776
So, you may get the particular
light turning on instead


438
00:24:15,776 --> 00:24:18,736
of just the generic something in
your house changed notification.


439
00:24:20,896 --> 00:24:24,986
HomeKit also has four predefined
action sets when you wake


440
00:24:24,986 --> 00:24:27,926
up in the morning, when you
leave, when you arrive home,


441
00:24:27,926 --> 00:24:31,366
when you go to bed, and you
can implement standard actions


442
00:24:31,366 --> 00:24:31,776
with these.


443
00:24:31,816 --> 00:24:34,936
Things like turning off the
lights, locking the doors,


444
00:24:34,936 --> 00:24:36,406
making sure the garage
is closed.


445
00:24:36,526 --> 00:24:38,766
Things like that, all
without requiring any


446
00:24:38,766 --> 00:24:39,786
user configuration.


447
00:24:43,416 --> 00:24:46,856
In iOS 8 you can create a
timer trigger to allow you


448
00:24:46,856 --> 00:24:48,516
to execute a scene
on a schedule.


449
00:24:49,556 --> 00:24:53,346
In iOS 9 you can now create
much more complicated triggers.


450
00:24:54,006 --> 00:24:56,056
For example, you know,
when this door is unlocked


451
00:24:56,056 --> 00:24:58,576
and this motion sensor
is detecting motion


452
00:24:58,656 --> 00:25:01,916
and it is 30 minutes
after sunset do something.


453
00:25:02,566 --> 00:25:07,616
Of course HomeKit is available
on the Watch and you can use it


454
00:25:07,616 --> 00:25:10,156
to control devices within your
home directly from your watch.


455
00:25:10,776 --> 00:25:15,976
Wi-fi enabled accessories can
now be accessed remotely even


456
00:25:15,976 --> 00:25:17,806
if you don't have an Apple TV.


457
00:25:18,866 --> 00:25:22,036
You will be able to
communicate with them directly


458
00:25:22,036 --> 00:25:22,836
through iCloud


459
00:25:22,976 --> 00:25:26,446
and bluetooth-enabled
accessories can be automatically


460
00:25:26,446 --> 00:25:27,666
bridged over Wi-Fi.


461
00:25:28,796 --> 00:25:31,486
Even if you are out of Bluetooth
range with an accessory,


462
00:25:31,486 --> 00:25:33,266
you can still control it.


463
00:25:33,816 --> 00:25:36,916
Finally, we've included
standard definitions of a number


464
00:25:36,916 --> 00:25:39,046
of new items within your house.


465
00:25:40,536 --> 00:25:46,866
For CloudKit, we have updated
the limits and the pricing


466
00:25:46,866 --> 00:25:50,336
for public databases but much
more exciting we have now


467
00:25:50,336 --> 00:25:52,896
offered CloudKit Web
Services to integrate


468
00:25:53,116 --> 00:25:54,536
with your web applications.


469
00:25:56,516 --> 00:25:58,956
[ Applause ]


470
00:25:59,456 --> 00:26:01,556
There are two sessions
discussing CloudKit this week:


471
00:26:02,296 --> 00:26:08,376
What's New in CloudKit and
CloudKit Tips and Tricks.


472
00:26:08,546 --> 00:26:10,266
So until now the UI document


473
00:26:10,266 --> 00:26:12,136
and action controller
would create copies


474
00:26:12,136 --> 00:26:14,086
of every document
sent to another app.


475
00:26:15,476 --> 00:26:18,316
Now, with open in
place, apps can request


476
00:26:18,316 --> 00:26:21,146
to open documents directly
if they're stored in iCloud.


477
00:26:22,286 --> 00:26:25,406
Adoption consists of adding
a key to your info.plist


478
00:26:25,816 --> 00:26:26,856
to declare conformance


479
00:26:26,856 --> 00:26:28,716
in implementing a
new delegate method


480
00:26:28,716 --> 00:26:29,926
to opening the document
directly.


481
00:26:29,926 --> 00:26:39,226
We'll discuss this at
Building Document-Based Apps.


482
00:26:39,466 --> 00:26:42,636
Now, many applications contain
resources that are not needed


483
00:26:42,636 --> 00:26:44,636
when a user first
starts your application,


484
00:26:45,866 --> 00:26:48,696
including every resource your
app might ever need makes your


485
00:26:48,696 --> 00:26:52,386
app bundle significantly larger,
slows down the installation


486
00:26:52,386 --> 00:26:54,476
and can even push you
over the OTA limit


487
00:26:54,476 --> 00:26:55,676
which can impact your sales.


488
00:26:57,406 --> 00:27:00,886
So to address this we're
introducing on-demand resources.


489
00:27:01,816 --> 00:27:04,726
Your application is uploaded
as single package exactly


490
00:27:04,726 --> 00:27:09,396
like you do today, but content
can be downloaded dynamically


491
00:27:09,396 --> 00:27:10,796
when the application needs it.


492
00:27:11,456 --> 00:27:15,366
These assets are intelligently
cached using heuristics based


493
00:27:15,366 --> 00:27:17,576
on your input as well
as user behavior.


494
00:27:19,586 --> 00:27:24,516
In Xcode, assets are grouped
together using simple tags


495
00:27:24,516 --> 00:27:28,476
and we're introducing a new
class called NS Bundle Resource


496
00:27:28,476 --> 00:27:30,856
Request that allows
you to request all


497
00:27:30,856 --> 00:27:32,466
of the resources
with a given tag.


498
00:27:33,706 --> 00:27:36,636
Once those resources have
downloaded you can use familiar


499
00:27:36,636 --> 00:27:39,826
API to access them, things
like UI Image, image named.


500
00:27:40,436 --> 00:27:44,476
There is even a way
to test this in Xcode


501
00:27:44,476 --> 00:27:47,556
to simulate not having the
resources and requesting them


502
00:27:47,556 --> 00:27:49,676
from the server, Xcode
will act as the server


503
00:27:49,876 --> 00:27:52,156
and deliver those resources
to your application.


504
00:27:53,326 --> 00:27:55,376
Now another new technology
we're introducing


505
00:27:55,546 --> 00:27:58,316
to address your application
size is app slicing.


506
00:27:59,406 --> 00:28:03,546
Now, applications often have
assets and executable content


507
00:28:03,576 --> 00:28:05,106
that aren't relevant
to the hardware


508
00:28:05,106 --> 00:28:07,016
that the user has
installed it in.


509
00:28:07,136 --> 00:28:11,056
This slicing takes care of
delivering just the resources


510
00:28:11,126 --> 00:28:14,536
and executable slices that
that user's device needs.


511
00:28:14,536 --> 00:28:18,976
Using app slicing the App Store
will generate automatically


512
00:28:19,076 --> 00:28:21,596
and deliver tailored
variants of your applications


513
00:28:21,596 --> 00:28:23,336
to all devices running iOS 9


514
00:28:23,336 --> 00:28:26,106
and these will only
contain the resources


515
00:28:26,106 --> 00:28:28,686
and executable slices
pertinent to that device.


516
00:28:30,466 --> 00:28:31,566
This happens on the server


517
00:28:31,566 --> 00:28:34,226
so the extraneous content
isn't even downloaded.


518
00:28:35,756 --> 00:28:37,066
This saves installation time


519
00:28:37,066 --> 00:28:39,886
and can hopefully even bring
the app under the OTA limit.


520
00:28:41,336 --> 00:28:44,346
We're also introducing a
new NS data asset class


521
00:28:44,346 --> 00:28:48,056
which allows you to easily fetch
content tailored to the memory


522
00:28:48,056 --> 00:28:50,036
and graphics capability
of your device.


523
00:28:50,366 --> 00:28:54,426
Now for Game Center we have
added guest players which allows


524
00:28:54,426 --> 00:28:57,106
for new configurations in
Game Center multiplayer.


525
00:28:58,536 --> 00:29:01,926
We've also unified the Game
Center server environment


526
00:29:01,926 --> 00:29:05,796
to streamline development
and testing.


527
00:29:05,796 --> 00:29:07,716
Finally we're introducing
ReplayKit


528
00:29:07,896 --> 00:29:11,586
which provides a new way
to share game experiences.


529
00:29:12,856 --> 00:29:15,846
It allows your apps to easily
record audio and visuals


530
00:29:15,846 --> 00:29:17,966
and share them with other users.


531
00:29:20,146 --> 00:29:23,096
In iOS 9 SpriteKit
is now Metal-backed


532
00:29:23,096 --> 00:29:24,606
on systems that support it.


533
00:29:25,376 --> 00:29:28,056
It is open GL on systems
that don't support Metal.


534
00:29:28,486 --> 00:29:30,806
This happens automatically
without your involvement.


535
00:29:32,196 --> 00:29:34,426
There is also an all
new action editor


536
00:29:34,976 --> 00:29:37,966
and of course it is
integrated tightly


537
00:29:38,166 --> 00:29:39,666
with on demand resources.


538
00:29:40,136 --> 00:29:44,966
You can find out more at
What's New in SpriteKit.


539
00:29:46,836 --> 00:29:51,416
For SceneKit there is an
all-new scene editor available


540
00:29:51,416 --> 00:29:54,366
in Xcode 7 that supports
particles, physics,


541
00:29:54,676 --> 00:29:56,036
actions, and much more.


542
00:29:56,036 --> 00:29:59,866
There is also a ton of new
features in SceneKit itself.


543
00:30:00,766 --> 00:30:05,316
Things like scene transitions,
audio nodes, model i/o,


544
00:30:05,956 --> 00:30:12,956
ambient occlusion and light
maps and many other features.


545
00:30:13,056 --> 00:30:15,956
Now while SpriteKit and SceneKit
are fantastic frameworks


546
00:30:15,956 --> 00:30:18,096
for building the graphical
interface for a game,


547
00:30:18,726 --> 00:30:23,476
there is far more to a great
game than just the graphics.


548
00:30:23,576 --> 00:30:27,246
Games have entities and
components, they have agents


549
00:30:27,446 --> 00:30:29,256
which are autonomous
objects within your game


550
00:30:29,256 --> 00:30:31,116
that have goals and behaviors.


551
00:30:31,436 --> 00:30:35,406
You need path-finding algorithms
to allow your agents to navigate


552
00:30:35,406 --> 00:30:39,996
around your game and you need
AI for allowing the agents


553
00:30:39,996 --> 00:30:44,076
to decide what moves
they're going to make.


554
00:30:44,286 --> 00:30:45,376
All of the elements you need


555
00:30:45,376 --> 00:30:48,656
to build really engaging
gameplay can be found now


556
00:30:48,656 --> 00:30:50,946
in GameplayKit and
you can find out more


557
00:30:50,946 --> 00:30:52,246
at Introducing GameplayKit.


558
00:30:52,736 --> 00:30:55,646
Finally, of course, we're
introducing WatchOS 2.


559
00:30:56,246 --> 00:30:59,076
In addition to direct access
to existing frameworks,


560
00:30:59,206 --> 00:31:01,826
there is now new frameworks
such as Watch connectivity


561
00:31:02,236 --> 00:31:05,596
for connecting to your app
on the phone and WatchKit


562
00:31:05,596 --> 00:31:07,216
for building Watch
face complications.


563
00:31:10,006 --> 00:31:11,546
You can find out more
at Introducing WatchKit


564
00:31:11,576 --> 00:31:15,326
for WatchOS 2 for an overview of
all of the sessions this week,


565
00:31:15,886 --> 00:31:17,856
the Talk About WatchOS 2.


566
00:31:18,876 --> 00:31:21,776
For more information, there is,
of course, the documentation,


567
00:31:22,546 --> 00:31:25,556
there is the online forums,
developer technical support.


568
00:31:26,856 --> 00:31:28,176
Thanks. I hope you
have a great week.


569
00:31:29,516 --> 00:31:46,360
[ Applause ]

