1
00:00:07,516 --> 00:00:19,516
[ Music ]


2
00:00:20,516 --> 00:00:24,546
[ Applause ]


3
00:00:25,046 --> 00:00:26,476
>> Hello everybody.


4
00:00:26,596 --> 00:00:27,776
Hello again if you just came


5
00:00:27,776 --> 00:00:29,476
from the previous session,
thanks for staying.


6
00:00:29,836 --> 00:00:30,786
And hello if you're new.


7
00:00:30,786 --> 00:00:31,926
Hello to everyone downstairs,


8
00:00:31,926 --> 00:00:33,886
and hello to everyone
watching online.


9
00:00:34,276 --> 00:00:38,036
My name is Nick, I'm joined
today by my colleague, Leo,


10
00:00:38,636 --> 00:00:40,516
and we're going to
talk about what's new


11
00:00:40,766 --> 00:00:42,166
with Wallet and Apple Pay.


12
00:00:44,326 --> 00:00:46,816
First of all, we're going to
have an update for Wallet.


13
00:00:47,376 --> 00:00:49,396
We're going to talk
about passes.


14
00:00:49,396 --> 00:00:51,156
We're going to talk
about some new features


15
00:00:51,156 --> 00:00:52,626
for banks and for retailers.


16
00:00:52,906 --> 00:00:55,186
And then we're going
to talk about WatchKit,


17
00:00:55,456 --> 00:00:58,626
now you can use Apple Pay
not just to pay in-store


18
00:00:58,626 --> 00:01:02,106
on Apple Watch, but also
inside WatchKit Apps.


19
00:01:03,236 --> 00:01:05,525
We'll also talk about something
I'm really excited about


20
00:01:05,606 --> 00:01:11,096
and that's the new extensions on
iOS, Siri, maps, and messages.


21
00:01:11,366 --> 00:01:12,866
All of these new
extension points


22
00:01:13,126 --> 00:01:14,846
that can be enabled
with Apple Pay.


23
00:01:15,206 --> 00:01:18,576
And finally we'll talk about
something exciting and new,


24
00:01:18,576 --> 00:01:21,046
I think you're all going
to love, testing Apple Pay


25
00:01:21,096 --> 00:01:23,036
and the new Sandbox environment.


26
00:01:23,416 --> 00:01:25,416
Let's get started.


27
00:01:26,996 --> 00:01:28,886
What's new with PassKit.


28
00:01:30,276 --> 00:01:31,996
So, hopefully you'll be aware


29
00:01:31,996 --> 00:01:36,346
that Wallet isn't just Apple
Pay, it's passes as well.


30
00:01:36,896 --> 00:01:40,156
And there's no better
time to start using passes


31
00:01:40,526 --> 00:01:43,516
because more users are
engaging with Wallet


32
00:01:43,516 --> 00:01:45,226
than ever, due to Apple Pay.


33
00:01:45,306 --> 00:01:47,126
More people are opening
the Wallet App,


34
00:01:47,126 --> 00:01:48,196
more people are using it.


35
00:01:48,276 --> 00:01:53,336
Now, we don't have time today to
run through the pass ecosystem,


36
00:01:53,756 --> 00:01:55,466
but we do have some
resources for you.


37
00:01:55,956 --> 00:01:57,896
I'll tell you a little bit
about them just to remind you,


38
00:01:58,076 --> 00:01:59,286
don't worry, not too much.


39
00:01:59,736 --> 00:02:03,656
Passes enable you to get
gift cards, boarding passes,


40
00:02:03,826 --> 00:02:07,416
rewards cards, event
tickets, membership cards,


41
00:02:07,816 --> 00:02:12,656
and more directly into the
user's iPhone or Apple Watch.


42
00:02:13,066 --> 00:02:15,286
And you can distribute
these passes in many ways,


43
00:02:15,316 --> 00:02:16,896
through an app, through email,


44
00:02:17,386 --> 00:02:20,086
SMS or iMessage,
web link or QR code.


45
00:02:20,086 --> 00:02:22,926
And these passes can
be updated remotely.


46
00:02:22,926 --> 00:02:25,326
And these updates show up
on a user's lock screen.


47
00:02:26,356 --> 00:02:30,416
Things like date changes, for
an airline ticket, or relevancy.


48
00:02:30,416 --> 00:02:33,146
Your passes can be relevant,
if you're near the store,


49
00:02:33,146 --> 00:02:34,266
they'll show up on
the lock screen.


50
00:02:34,896 --> 00:02:37,096
We have a session that talks
a little bit about some


51
00:02:37,096 --> 00:02:39,356
of these passes and provides
you some more resources.


52
00:02:39,596 --> 00:02:41,216
It's the home for
Apple Pay and more,


53
00:02:41,216 --> 00:02:42,206
it was last year's session.


54
00:02:42,396 --> 00:02:44,186
And there's plenty
of great resources


55
00:02:44,186 --> 00:02:45,636
at developer.apple.com.


56
00:02:46,106 --> 00:02:49,186
Let me talk now about
a few new changes.


57
00:02:49,276 --> 00:02:51,076
Some things we've
changed over the past year


58
00:02:51,236 --> 00:02:52,266
that maybe you didn't notice.


59
00:02:53,346 --> 00:02:54,736
One of them was app placement.


60
00:02:54,736 --> 00:02:56,866
We've actually changed the
pass design a little bit,


61
00:02:56,866 --> 00:02:58,796
this happened in iOS 9.3.


62
00:02:59,336 --> 00:03:02,836
Apps are now placed
on the front of passes


63
00:03:03,246 --> 00:03:06,056
and these app icons
can deep link directly


64
00:03:06,056 --> 00:03:07,706
into your applications.


65
00:03:08,036 --> 00:03:11,586
So these are great for
things like gift card top-up,


66
00:03:12,236 --> 00:03:14,966
if you're a gift card pass
and you want and easy way


67
00:03:14,966 --> 00:03:17,586
for the user to quickly
top it off, or an airline,


68
00:03:17,586 --> 00:03:18,776
you want to go to the app


69
00:03:18,776 --> 00:03:20,296
for more information
about the flight.


70
00:03:20,666 --> 00:03:24,546
And it's very easy to add this,
you just need to add the pass


71
00:03:24,956 --> 00:03:30,046
to your pass, the apps ID,
it's Adam ID from iTunes,


72
00:03:30,046 --> 00:03:36,496
and also its URL scheme to deep
link in if you want to do that.


73
00:03:36,496 --> 00:03:39,356
Last year we also
introduced a new type of pass,


74
00:03:39,936 --> 00:03:41,406
the value-added services pass.


75
00:03:41,406 --> 00:03:47,016
So passes can now transmit
information securely over NFC.


76
00:03:47,316 --> 00:03:49,426
Things like loyalty
card information,


77
00:03:49,456 --> 00:03:52,996
if you're in the US you might
have used the Walgreens Pass,


78
00:03:53,206 --> 00:03:54,916
which lets you transmit
over NFC.


79
00:03:54,966 --> 00:03:57,996
And support for value-added
passes has grown


80
00:03:57,996 --> 00:04:00,516
over the past year for many
points of sale systems.


81
00:04:00,836 --> 00:04:03,946
Verifone, Ingenico and
many other manufacturers


82
00:04:03,946 --> 00:04:07,086
of payment terminals now
support this protocol.


83
00:04:07,636 --> 00:04:09,486
There's some things
you may not know


84
00:04:09,486 --> 00:04:11,406
about value-added
service passes,


85
00:04:11,736 --> 00:04:14,826
they also support what we
call a one tap experience.


86
00:04:15,146 --> 00:04:16,286
It looks a little like this.


87
00:04:16,286 --> 00:04:18,346
It's where you actually
place the phone


88
00:04:18,346 --> 00:04:19,586
on the payment terminal


89
00:04:19,856 --> 00:04:22,036
and you'll transmit both
your payment information


90
00:04:22,516 --> 00:04:25,746
and your loyalty
information in a single tap.


91
00:04:26,146 --> 00:04:29,096
So it's deeply integrated
into the purchase process.


92
00:04:29,376 --> 00:04:31,876
This also works with
Apple Watch as well.


93
00:04:35,636 --> 00:04:38,786
Now these value-added service
passes can also be distributed


94
00:04:38,786 --> 00:04:42,766
over NFC, and you can even
sign up for loyalty programs


95
00:04:42,766 --> 00:04:45,536
from these NFC distributed
passes directly from Wallet,


96
00:04:46,006 --> 00:04:47,806
to be shared and personalized.


97
00:04:48,086 --> 00:04:50,856
You can actually sign up for
a loyalty program right there.


98
00:04:56,106 --> 00:04:59,386
Now, there are a few caveats to
the value-added service passes.


99
00:04:59,546 --> 00:05:01,836
One of them you might be
aware is that passes need


100
00:05:01,836 --> 00:05:03,956
to be signed using a
different certificate.


101
00:05:04,276 --> 00:05:06,456
Regular passes are signed
with a certificate you create


102
00:05:06,456 --> 00:05:09,356
at the developer portal, but
value-added service passes need


103
00:05:09,356 --> 00:05:12,076
to be signed with an
NFC signing certificate.


104
00:05:12,946 --> 00:05:14,926
Now, you need to request
these certificates.


105
00:05:14,926 --> 00:05:16,536
You can contact us
to find out more.


106
00:05:16,536 --> 00:05:17,746
I'm actually going
to have a link


107
00:05:17,746 --> 00:05:19,236
at the end of this presentation.


108
00:05:19,506 --> 00:05:22,066
So you can go and
request more information


109
00:05:22,066 --> 00:05:23,406
about using value-added
service passes.


110
00:05:23,406 --> 00:05:25,956
And we're also going to have
some engineers in the labs.


111
00:05:25,956 --> 00:05:28,036
We got a lab right
after this session,


112
00:05:28,516 --> 00:05:30,536
so if you have any
questions please come down,


113
00:05:30,606 --> 00:05:31,526
we'd love to talk to you.


114
00:05:31,756 --> 00:05:37,216
Let's talk about a few other
new features in PassKit.


115
00:05:37,216 --> 00:05:39,546
Now these are specific
to card issuers,


116
00:05:39,546 --> 00:05:40,646
but I think they're
pretty interesting,


117
00:05:40,646 --> 00:05:41,996
even if you're not
a card issuer,


118
00:05:41,996 --> 00:05:45,056
you might be interested
to know about them.


119
00:05:45,056 --> 00:05:46,876
We offer some unique features


120
00:05:46,876 --> 00:05:49,056
for card issuers
who use Apple Pay.


121
00:05:50,836 --> 00:05:54,386
We also now support store
credit and debit cards.


122
00:05:54,536 --> 00:05:55,606
Here's a Kohl's card.


123
00:05:55,866 --> 00:05:57,686
So if you have a store
card you can add them.


124
00:05:57,686 --> 00:06:00,366
So these aren't just for banks,
they're for retailers as well.


125
00:06:01,146 --> 00:06:04,356
One really great feature
is app provisioning.


126
00:06:04,576 --> 00:06:06,486
Now, we added this
last year and a couple


127
00:06:06,486 --> 00:06:09,986
of apps have already adopted
it, Discover is one of them.


128
00:06:10,246 --> 00:06:11,586
This lets you set up cards


129
00:06:11,586 --> 00:06:14,436
in Apple Pay directly
from your own app.


130
00:06:14,436 --> 00:06:16,176
You never need to leave you app,


131
00:06:16,176 --> 00:06:18,516
to open Wallet, to
open preferences.


132
00:06:18,926 --> 00:06:22,486
And it's available to any
existing Apple Pay issuer.


133
00:06:22,656 --> 00:06:27,146
Now the API is documented
on developers.apple.com.


134
00:06:27,416 --> 00:06:29,816
But you can also contact
us for more information.


135
00:06:29,856 --> 00:06:31,946
We actually have an email
address, which I'll show


136
00:06:31,946 --> 00:06:35,036
at the end, and we're going to
have people in the labs to help.


137
00:06:35,436 --> 00:06:38,456
We also have this
great new button style,


138
00:06:38,456 --> 00:06:40,946
which you can use
both for adding cards,


139
00:06:40,946 --> 00:06:43,226
but also for adding
regular passes.


140
00:06:43,296 --> 00:06:44,846
So if you're just
a pass developer,


141
00:06:44,846 --> 00:06:47,306
you can use the new
PKPaymentButton style I'm


142
00:06:47,306 --> 00:06:47,936
showing you here.


143
00:06:48,256 --> 00:06:50,696
I'll have some codes to show
you how to do that in a minute.


144
00:06:52,086 --> 00:06:56,276
Now something that's new
in iOS 10 is specifically


145
00:06:56,356 --> 00:06:59,956
for card issuers and retailers
who might have partnerships,


146
00:06:59,956 --> 00:07:03,006
either co-branded cards, or
they've got a partnership


147
00:07:03,006 --> 00:07:06,106
with a bank, we now
let you enable a new


148
00:07:06,106 --> 00:07:07,326
in-store experience.


149
00:07:07,386 --> 00:07:10,656
You can present your cards
directly from your apps.


150
00:07:11,016 --> 00:07:15,176
A really good use case of
this, you can redeem a coupon


151
00:07:15,276 --> 00:07:18,006
from your app and immediately
present a payment method.


152
00:07:18,006 --> 00:07:20,956
So maybe your app is
enabled with iBeacons,


153
00:07:20,956 --> 00:07:22,556
it's got a great
in-store experience.


154
00:07:22,556 --> 00:07:25,556
So you go into the store, you
redeem a coupon in the app,


155
00:07:25,816 --> 00:07:28,106
you just press a button
and you can immediately pay


156
00:07:28,106 --> 00:07:28,736
with Apple Pay.


157
00:07:28,926 --> 00:07:30,236
The card could be right
there in your app.


158
00:07:30,756 --> 00:07:32,626
It's a really easy API to use.


159
00:07:33,316 --> 00:07:34,576
It's just on the Pass Library.


160
00:07:36,286 --> 00:07:38,916
And you can use the new
PKPaymentButton style


161
00:07:38,916 --> 00:07:40,176
for some consistent branding.


162
00:07:40,546 --> 00:07:43,166
And this is the style .inStore.


163
00:07:43,616 --> 00:07:46,106
We have another style I
just showed you to add it


164
00:07:46,106 --> 00:07:49,306
to different class actually,
it's an Add to Pass Button,


165
00:07:49,306 --> 00:07:50,116
but take a look


166
00:07:50,116 --> 00:07:51,676
at the documentation
for more information.


167
00:07:52,976 --> 00:07:58,016
Another feature that's pretty
interesting is associating your


168
00:07:58,016 --> 00:07:59,956
applications with your cards.


169
00:08:00,286 --> 00:08:01,956
Again, this is great
if you're a retailer


170
00:08:02,186 --> 00:08:04,516
and you have a co-branded
card or you have a partnership


171
00:08:04,586 --> 00:08:08,366
with an issuing bank, you
can associate your app


172
00:08:08,366 --> 00:08:10,056
with your store or
program cards,


173
00:08:10,336 --> 00:08:13,416
which means it can default,
if the user wants to do that.


174
00:08:13,416 --> 00:08:15,936
Here's the screen you'll
get for a VAS pass,


175
00:08:15,936 --> 00:08:17,946
but it's the same
for payment passes.


176
00:08:18,856 --> 00:08:21,316
You can default your card
when paying over NFC,


177
00:08:21,316 --> 00:08:23,986
or new in iOS 10
you can also default


178
00:08:24,176 --> 00:08:25,956
when paying with an application.


179
00:08:25,956 --> 00:08:28,396
And also a website if
you're taking advantage


180
00:08:28,396 --> 00:08:29,876
of the new Apple Pay
on the web stuff.


181
00:08:30,046 --> 00:08:34,236
Now the great thing about most
of this is that no API required.


182
00:08:34,306 --> 00:08:36,155
It's actually built
into the card itself.


183
00:08:36,496 --> 00:08:40,456
All you need to do is get
your app, and its Adam ID


184
00:08:40,456 --> 00:08:43,775
and URL scheme into the pass
when it's added to device.


185
00:08:44,176 --> 00:08:46,516
Now to do that you can
talk to your issuing bank,


186
00:08:46,516 --> 00:08:48,216
or if you're an issuing
bank, you can come talk


187
00:08:48,216 --> 00:08:50,446
to us using the contact
information at the end


188
00:08:50,446 --> 00:08:53,616
of the session, or come
and see us in the labs.


189
00:08:53,616 --> 00:08:56,726
So that's some of the
new stuff in PassKit.


190
00:08:56,726 --> 00:09:01,466
I want to talk now about Apple
Pay and what's new in Apple Pay.


191
00:09:01,796 --> 00:09:04,706
And I also want to tell you
how Apple Pay has been doing.


192
00:09:05,866 --> 00:09:09,526
So Apple Pay is an easy,
secure and private way


193
00:09:09,526 --> 00:09:14,356
to pay both in-store
and within applications.


194
00:09:14,976 --> 00:09:17,156
And it's got amazing
customer satisfaction.


195
00:09:17,296 --> 00:09:19,566
It has one of the highest
customer satisfaction rates


196
00:09:19,566 --> 00:09:20,576
of any payment method.


197
00:09:21,066 --> 00:09:25,416
And Apple Pay is usable
today within applications.


198
00:09:25,866 --> 00:09:29,656
You can pay using Apple
Pay directly from apps.


199
00:09:30,036 --> 00:09:32,846
And thousands of apps have
already adopted worldwide


200
00:09:33,256 --> 00:09:36,656
in the US, in China,
an example here.


201
00:09:36,966 --> 00:09:38,496
We've recently announced
we're launching


202
00:09:38,496 --> 00:09:40,286
in France, also Australia.


203
00:09:40,286 --> 00:09:42,766
We've got many countries
that support Apple Pay.


204
00:09:42,916 --> 00:09:46,436
And millions of users are
enjoying using Apple Pay.


205
00:09:46,746 --> 00:09:50,376
And we've seen incredible growth
of Apple Pay, both in-store


206
00:09:50,376 --> 00:09:51,626
and within applications.


207
00:09:51,846 --> 00:09:54,716
And developers such as
yourselves have seen some great


208
00:09:54,716 --> 00:09:55,486
results too.


209
00:09:56,276 --> 00:09:58,896
Here's two apps that
I want to talk about.


210
00:09:58,896 --> 00:10:00,016
One of them is Chairish.


211
00:10:01,046 --> 00:10:02,216
Now the Chairish app, they found


212
00:10:02,216 --> 00:10:04,996
that when they used Apple Pay
their conversion rate tripled


213
00:10:05,166 --> 00:10:06,526
from other payment methods.


214
00:10:06,856 --> 00:10:08,166
That's a huge increase.


215
00:10:08,376 --> 00:10:09,826
I can't think of
another payment method


216
00:10:09,826 --> 00:10:11,736
that has such great results.


217
00:10:12,266 --> 00:10:15,796
And StubHub in their
iOS application found


218
00:10:15,796 --> 00:10:19,766
that Apple Pay was driving
twice as many new users


219
00:10:19,826 --> 00:10:21,056
than any other payment method.


220
00:10:21,336 --> 00:10:23,576
So this isn't just for
your existing customers,


221
00:10:23,696 --> 00:10:26,776
Apple Pay can bring you
new customers as well.


222
00:10:27,036 --> 00:10:29,336
Apple Pay apps are often
highlighted on the app store


223
00:10:29,336 --> 00:10:30,256
in their own sections.


224
00:10:30,436 --> 00:10:33,466
We often run promotions
of Apple Pay apps.


225
00:10:33,676 --> 00:10:35,466
We've also seen some
great results in some


226
00:10:35,466 --> 00:10:36,906
of the new countries
we've launched in.


227
00:10:37,596 --> 00:10:39,816
One country I want to
briefly talk about is China.


228
00:10:40,756 --> 00:10:43,166
We've seen some great
applications in China.


229
00:10:43,266 --> 00:10:45,686
I was so lucky to go to
Beijing a few months ago


230
00:10:45,686 --> 00:10:47,426
and taught some developers
using Apple Pay


231
00:10:47,726 --> 00:10:49,396
and they've seen some
great results too.


232
00:10:50,086 --> 00:10:52,636
Apple Pay in China
offers full support


233
00:10:52,636 --> 00:10:55,386
for China UnionPay
credit and debit cards.


234
00:10:55,866 --> 00:10:59,686
And the Apple Pay API
is accepted by CUP,


235
00:10:59,966 --> 00:11:04,686
that's China Union Pay, PayEase,
Lianlian Pay, YeePay, and UMS.


236
00:11:04,686 --> 00:11:07,526
These are major Chinese
payment processes.


237
00:11:07,746 --> 00:11:12,286
We also have documentation
both interface guidelines


238
00:11:12,286 --> 00:11:15,716
and our Getting Started Guide
are available in Chinese,


239
00:11:15,936 --> 00:11:18,066
they're also now
available in French as well,


240
00:11:18,066 --> 00:11:19,456
now that we're launching
in France.


241
00:11:19,686 --> 00:11:22,486
You can check out our developer
site for links to those.


242
00:11:22,486 --> 00:11:28,376
Now I want to talk about some
new API and if you're developing


243
00:11:28,376 --> 00:11:30,396
for Apple Pay already,


244
00:11:30,746 --> 00:11:32,326
you're probably really
going to love this.


245
00:11:32,516 --> 00:11:36,306
One of the problems with
Apple Pay has been the need


246
00:11:36,306 --> 00:11:38,466
to set your networks upfront.


247
00:11:39,296 --> 00:11:41,106
You need to tell us the
networks you want to use


248
00:11:41,106 --> 00:11:42,046
in your payment request.


249
00:11:42,046 --> 00:11:44,316
So that's hard coded
into your application.


250
00:11:46,126 --> 00:11:48,596
And adding new networks
is difficult.


251
00:11:48,646 --> 00:11:52,526
You either have to perform SDK
availability checks to tell


252
00:11:52,526 --> 00:11:55,386
if the constants are
available, or you have to try


253
00:11:55,386 --> 00:11:57,716
to hack something
together, it's not ideal.


254
00:11:58,806 --> 00:12:01,886
And for those of you who
have Apple Pay apps maybe you


255
00:12:01,886 --> 00:12:04,226
remember when we launched
Discover on Apple Pay,


256
00:12:04,566 --> 00:12:07,986
last year, unless you
went and updated your app,


257
00:12:07,986 --> 00:12:09,496
you probably weren't
able to accept them even


258
00:12:09,496 --> 00:12:10,826
if your payment processor could.


259
00:12:10,826 --> 00:12:14,936
So we're introducing something
new in iOS 10 to help with that,


260
00:12:15,476 --> 00:12:16,996
it's dynamic networks
and proxies.


261
00:12:17,726 --> 00:12:19,996
Firstly, we're adding
a new class method


262
00:12:19,996 --> 00:12:21,426
onto PKPaymentRequest.


263
00:12:21,576 --> 00:12:23,506
It's going to tell you
all of the networks


264
00:12:23,506 --> 00:12:25,066
that are available
on that device.


265
00:12:25,536 --> 00:12:27,836
There's PKPaymentRequest
available networks.


266
00:12:28,306 --> 00:12:30,426
We're also going to
enable something else.


267
00:12:30,666 --> 00:12:33,526
You're going to be able
to set payment process


268
00:12:33,526 --> 00:12:34,876
as supported networks.


269
00:12:35,136 --> 00:12:37,536
And these proxy down
to other networks.


270
00:12:37,536 --> 00:12:40,026
So for example, if my payment
processes supports Visa,


271
00:12:40,026 --> 00:12:43,356
MasterCard, AmEx and it's
enabled here, I just put them


272
00:12:43,356 --> 00:12:45,356
in as the supported
network and I'll get all


273
00:12:45,356 --> 00:12:46,516
of the networks automatically.


274
00:12:46,516 --> 00:12:49,216
And perhaps most importantly,
I'll get new networks


275
00:12:49,286 --> 00:12:51,976
as they're added to Apple Pay
without needing to do anything.


276
00:12:51,976 --> 00:12:55,346
So you can check our
developer site for information


277
00:12:55,346 --> 00:12:57,946
about payment processes that are
going to participate in this.


278
00:12:58,766 --> 00:13:01,306
It's a really cool feature,
it's going to save a lot


279
00:13:01,306 --> 00:13:05,196
of pain I think for writing
Apple Pay applications.


280
00:13:06,916 --> 00:13:11,486
One other thing we've changed, I
just want to touch on, Swift 3,


281
00:13:11,756 --> 00:13:15,486
maybe you've already seen some
of the big changes in Swift 3.


282
00:13:15,486 --> 00:13:17,716
We have improved our
API for Swift users.


283
00:13:18,016 --> 00:13:19,976
We've actually completely
rewritten our sample code,


284
00:13:20,136 --> 00:13:21,116
talk about that later.


285
00:13:21,506 --> 00:13:23,776
One change that's coming,
didn't make seed one,


286
00:13:23,776 --> 00:13:24,856
but it will be in seed two.


287
00:13:24,856 --> 00:13:27,766
PassKit now uses stringly
typed enumerations.


288
00:13:28,256 --> 00:13:31,346
If you're not sure what those
are, they're a very cool way


289
00:13:31,346 --> 00:13:33,366
in Swift to take string
constants and turn them


290
00:13:33,366 --> 00:13:35,246
into enums, which is
going to make developing


291
00:13:35,246 --> 00:13:37,186
for Apple Pay a lot easier.


292
00:13:37,186 --> 00:13:43,076
Now let's talk about
Apple Pay in general.


293
00:13:44,376 --> 00:13:47,806
This year we've got
three big new places


294
00:13:48,136 --> 00:13:49,946
where we're adding
support for Apple Pay.


295
00:13:50,906 --> 00:13:54,286
We're adding support to
WatchKit for WatchKit apps.


296
00:13:54,826 --> 00:13:58,506
And we're adding support to
new extension points on iOS.


297
00:13:59,216 --> 00:14:02,126
And finally we're
adding support to Safari,


298
00:14:02,426 --> 00:14:06,016
both on MacOS Sierra
and on iOS 10.


299
00:14:07,256 --> 00:14:10,256
Now we just talked about
Safari in the previous session.


300
00:14:10,436 --> 00:14:11,526
It's online right now.


301
00:14:11,796 --> 00:14:12,686
You can check it out.


302
00:14:14,056 --> 00:14:18,056
Let's focus today, right
now WatchKit and extensions.


303
00:14:18,716 --> 00:14:20,656
I'm going to start
off with WatchKit.


304
00:14:21,296 --> 00:14:23,986
And to talk more about WatchKit
and to show you how easy it is


305
00:14:23,986 --> 00:14:27,736
to integrate Apple Pay on to
Apple Watch, I'd like to ask Leo


306
00:14:28,036 --> 00:14:29,746
from the WatchKit
team to come up.


307
00:14:29,986 --> 00:14:30,246
Leo.


308
00:14:31,516 --> 00:14:37,546
[ Applause ]


309
00:14:38,046 --> 00:14:38,766
>> Thanks, Nick.


310
00:14:39,006 --> 00:14:39,786
Hello everyone.


311
00:14:40,126 --> 00:14:41,906
My name is Leo and I'm
a software engineer


312
00:14:41,906 --> 00:14:42,946
on the Apple Watch team.


313
00:14:43,646 --> 00:14:45,656
I'm really excited to tell
you about what we are doing


314
00:14:45,656 --> 00:14:47,396
with Apple Pay on
the watch this year.


315
00:14:48,316 --> 00:14:51,336
We're adding support for making
payments within WatchKit apps.


316
00:14:52,296 --> 00:14:54,186
We think this is going to
enable a whole new category


317
00:14:54,236 --> 00:14:55,116
of apps on the watch.


318
00:14:55,476 --> 00:14:56,936
And the great news
for you developers,


319
00:14:57,236 --> 00:14:59,746
if you have implemented
Apple Pay on your iOS app,


320
00:15:00,376 --> 00:15:02,096
the same code with
work on watchOS,


321
00:15:02,346 --> 00:15:03,526
with very minimal changes.


322
00:15:03,846 --> 00:15:05,996
So let's take a look at what
we're going to be covering.


323
00:15:06,356 --> 00:15:09,446
First we're going
to do a quick recap


324
00:15:09,446 --> 00:15:10,966
on how payments work
on the platform.


325
00:15:11,266 --> 00:15:13,876
I'm going to show you how to
create a payment request and how


326
00:15:13,876 --> 00:15:14,976
to present a payment sheet.


327
00:15:14,976 --> 00:15:17,186
And then we're going
to do a quick demo.


328
00:15:17,266 --> 00:15:19,576
So you get an idea of how
easy it is to get started


329
00:15:19,746 --> 00:15:20,806
with Apple Pay on the Watch.


330
00:15:21,846 --> 00:15:23,576
Finally, we're going
to talk about some


331
00:15:23,576 --> 00:15:25,866
of the design considerations
that you should keep in mind


332
00:15:26,046 --> 00:15:28,096
when designing specifically
for the watch.


333
00:15:28,496 --> 00:15:30,796
This is the Apply Pay experience


334
00:15:30,796 --> 00:15:32,936
that your users are
familiar with in iOS.


335
00:15:33,706 --> 00:15:34,816
Now let's bring up the watch.


336
00:15:35,376 --> 00:15:39,326
The first thing you notice is
that the UI is very simple.


337
00:15:39,976 --> 00:15:41,346
We only display the total amount


338
00:15:41,346 --> 00:15:42,526
and the merchant
name at the top.


339
00:15:42,996 --> 00:15:45,176
And users can simply
double press the side button


340
00:15:45,176 --> 00:15:46,156
to pay at any time.


341
00:15:46,736 --> 00:15:49,086
If they want to make
any changes,


342
00:15:49,086 --> 00:15:50,956
or review their information,
they can scroll down.


343
00:15:50,956 --> 00:15:53,206
And they can have access to
their different payment cards,


344
00:15:53,576 --> 00:15:56,326
as well as shipping, billing
and contact information.


345
00:15:56,976 --> 00:15:59,316
And they can see a detail
of what they are paying for.


346
00:15:59,766 --> 00:16:02,306
When they're ready to pay,


347
00:16:02,996 --> 00:16:05,676
they simply double click the
side button and it's done.


348
00:16:06,406 --> 00:16:07,416
It is that simple.


349
00:16:08,646 --> 00:16:10,916
Now let's take a look
at how payments work


350
00:16:11,146 --> 00:16:12,356
from a developer's
point of view.


351
00:16:13,596 --> 00:16:16,046
We follow the same flow that
we have on iOS right now.


352
00:16:16,736 --> 00:16:19,986
First you create a payment
request and you pass that in


353
00:16:20,156 --> 00:16:21,766
to a payment authorization
controller.


354
00:16:22,746 --> 00:16:24,576
This is the object that
drives the payment sheet


355
00:16:24,646 --> 00:16:25,456
on our platform.


356
00:16:25,836 --> 00:16:28,216
As the user interact
with the UI,


357
00:16:28,216 --> 00:16:29,936
we're going to call
your delegate,


358
00:16:30,066 --> 00:16:33,756
for example in the payment
method, or the shipping address.


359
00:16:34,376 --> 00:16:37,146
And you may use this opportunity
to perform some validations.


360
00:16:37,486 --> 00:16:39,386
For example, you may not
ship certain products


361
00:16:39,386 --> 00:16:40,126
to some countries.


362
00:16:40,666 --> 00:16:42,306
Or you may want to
update the shipping cost


363
00:16:42,306 --> 00:16:43,746
and the total amount on the UI.


364
00:16:43,746 --> 00:16:47,326
When the user confirms
the payment,


365
00:16:47,566 --> 00:16:49,946
we talk to the secure
element in our Apple servers


366
00:16:50,446 --> 00:16:52,616
and we issue a payment
token that you can use


367
00:16:52,696 --> 00:16:53,626
to process the payment.


368
00:16:55,236 --> 00:16:57,596
Now refer everyone to
the code, a quick note,


369
00:16:58,216 --> 00:16:59,486
there is some setup
that you need to do


370
00:16:59,486 --> 00:17:02,096
to enable Apple Pay
on your apps.


371
00:17:02,096 --> 00:17:04,126
First, you want to go
to the Developer Portal


372
00:17:04,126 --> 00:17:06,876
and register a merchant
identifier and a certificate.


373
00:17:07,955 --> 00:17:09,776
You may have done this
already for your iOS app.


374
00:17:11,296 --> 00:17:13,036
And then you want
to enable Apple Pay


375
00:17:13,246 --> 00:17:15,215
for your WatchKit
extension separately.


376
00:17:15,915 --> 00:17:17,336
And there are step
by step instructions


377
00:17:17,336 --> 00:17:20,486
on our website on
how to do this.


378
00:17:20,656 --> 00:17:21,846
Now let's take a
look at the code.


379
00:17:23,046 --> 00:17:25,276
This is how you create
a payment request.


380
00:17:25,856 --> 00:17:28,786
We use the same PKPaymentRequest
object that we have on iOS.


381
00:17:29,606 --> 00:17:32,486
You create one of this and
you set it up with a country


382
00:17:32,486 --> 00:17:34,926
and currency code, your
merchant identifier,


383
00:17:34,926 --> 00:17:37,766
and the payment network sync
capabilities that you support.


384
00:17:38,706 --> 00:17:41,116
And then you specify a
list of summary items


385
00:17:41,296 --> 00:17:42,946
that describe what the
user is paying for.


386
00:17:44,556 --> 00:17:46,276
Always remember that
the last item


387
00:17:46,276 --> 00:17:47,956
on the list represents
a total amount.


388
00:17:48,346 --> 00:17:51,316
And we recommend that you use
your merchant name as the label,


389
00:17:51,496 --> 00:17:56,086
since we display that at the
top of the payment sheet.


390
00:17:56,236 --> 00:17:57,726
When you want to
present a payment sheet,


391
00:17:57,956 --> 00:18:00,136
you create a PKPayment
AuthorizationController


392
00:18:00,316 --> 00:18:02,386
and you pass in the request
that we just created.


393
00:18:03,806 --> 00:18:06,856
Then you designate yourself or
some other object as a delegate,


394
00:18:07,226 --> 00:18:10,806
and you simply code present.


395
00:18:10,806 --> 00:18:12,386
Now, since you're
presenting the payment sheet,


396
00:18:12,386 --> 00:18:14,086
you're also responsible
for dismissing it.


397
00:18:14,556 --> 00:18:16,136
So make sure to do
that when we go


398
00:18:16,136 --> 00:18:18,466
to payment authorization
controller DidFinish


399
00:18:18,606 --> 00:18:19,266
in your delegate.


400
00:18:22,546 --> 00:18:25,336
So PKPayment
AuthorizationController.


401
00:18:25,506 --> 00:18:27,956
This is a new controller
class provided


402
00:18:27,956 --> 00:18:29,066
in the PassKit.framework.


403
00:18:30,286 --> 00:18:31,176
It is responsible


404
00:18:31,176 --> 00:18:32,966
for controlling the
payment authorization flow.


405
00:18:33,566 --> 00:18:35,426
And it has the same
API semantics


406
00:18:35,426 --> 00:18:38,036
as of PKPaymentAuthorization
ViewController.


407
00:18:38,456 --> 00:18:40,396
But since it's not
view controller based,


408
00:18:40,836 --> 00:18:42,626
it allows for presentation
of the payment sheet


409
00:18:42,936 --> 00:18:44,216
from your WatchKit extension.


410
00:18:45,276 --> 00:18:47,736
It is supported across
watchOS and iOS,


411
00:18:47,736 --> 00:18:51,376
so you can share your user
code across different apps


412
00:18:51,476 --> 00:18:53,866
and across different platforms.


413
00:18:53,866 --> 00:18:55,936
Now, let's put all of this
together and see a quick demo.


414
00:18:57,136 --> 00:18:59,136
So I have been working on
this app for a coffee shop,


415
00:18:59,386 --> 00:19:02,076
so that users can order and
pay for their drinks right


416
00:19:02,076 --> 00:19:04,476
on their watch and have it
ready when they get to the shop.


417
00:19:05,336 --> 00:19:07,486
Let's take a look at
my interface so far.


418
00:19:10,956 --> 00:19:14,896
Great. So we have a product view
almost done, now we just need


419
00:19:14,896 --> 00:19:16,806
to add a way for
users to pay for this.


420
00:19:17,336 --> 00:19:20,076
I'm going to go to
the Option Library


421
00:19:20,076 --> 00:19:23,036
in the bottom right corner and
search for a payment button.


422
00:19:23,536 --> 00:19:27,716
We provide you with this object
that you can use when you want


423
00:19:27,716 --> 00:19:28,716
to present the payment sheet.


424
00:19:29,826 --> 00:19:31,906
We just need to drag and
drop this into our view.


425
00:19:33,076 --> 00:19:34,426
And now let's add some code.


426
00:19:35,876 --> 00:19:37,796
I'm going to bring up
the assistant editor


427
00:19:37,796 --> 00:19:40,156
so I can have the code
and the UI side by side.


428
00:19:40,156 --> 00:19:44,746
I'm going to control drag from
my button to my interface.


429
00:19:45,406 --> 00:19:48,476
And create a new action
that I'm going to name Buy.


430
00:19:51,636 --> 00:19:57,906
Now let's just focus
on the code.


431
00:19:58,066 --> 00:19:59,086
First of all, since we're going


432
00:19:59,086 --> 00:20:00,436
to be using the PassKit
framework,


433
00:20:00,436 --> 00:20:03,836
let's make sure we import that.


434
00:20:04,046 --> 00:20:06,246
And now we're going to implement
the buy method and it's going


435
00:20:06,246 --> 00:20:08,536
to be pretty similar to what
we saw on the slides before.


436
00:20:09,816 --> 00:20:12,036
First, we're going to
create a payment request.


437
00:20:13,816 --> 00:20:17,266
In this case we're
setting it up for the US,


438
00:20:17,346 --> 00:20:19,206
we're going to be charging
this in US dollars.


439
00:20:20,106 --> 00:20:21,956
We specify the merchant
identifier


440
00:20:21,956 --> 00:20:23,896
that we registered
is available portal,


441
00:20:24,786 --> 00:20:26,956
and the payment networks
sync capabilities list


442
00:20:27,256 --> 00:20:27,956
that we support.


443
00:20:29,046 --> 00:20:31,086
And finally a list
of summary items,


444
00:20:31,086 --> 00:20:36,226
in this case we're just using
the total for the coffee.


445
00:20:36,386 --> 00:20:38,156
Now, if you want to
present the payment sheet,


446
00:20:39,066 --> 00:20:41,636
we create a PK Payment
Authorization Controller.


447
00:20:42,226 --> 00:20:44,566
We pass in the request,
we set our self


448
00:20:44,566 --> 00:20:46,646
as a delegate, and
we call present.


449
00:20:48,066 --> 00:20:50,136
Now for seed one we
ask you that you keep


450
00:20:50,136 --> 00:20:53,676
around Payment Controller while
the payment sheet is visible.


451
00:20:54,236 --> 00:20:58,556
Let's define the state
that we're using here.


452
00:21:00,046 --> 00:21:01,976
And then since we're
implementing the delegate


453
00:21:01,976 --> 00:21:05,546
protocol let's conform to that.


454
00:21:05,736 --> 00:21:07,286
And we only have
to implement two


455
00:21:07,286 --> 00:21:09,176
of the required methods
for this to work.


456
00:21:12,396 --> 00:21:15,166
The first one,
PaymentAuthorizationController,


457
00:21:15,166 --> 00:21:16,196
these authorize payment.


458
00:21:16,776 --> 00:21:20,146
It's going to be called when
the user confirms the payment.


459
00:21:20,276 --> 00:21:22,296
And we provide you with all
the information that you need


460
00:21:22,656 --> 00:21:24,926
to send to your payment
processor


461
00:21:24,926 --> 00:21:27,526
and to confirm calling
the completion handler


462
00:21:27,526 --> 00:21:28,146
with a status.


463
00:21:29,576 --> 00:21:31,276
The second one, as
I mentioned earlier,


464
00:21:31,636 --> 00:21:33,406
PaymentAuthorizationController
DidFinish.


465
00:21:33,796 --> 00:21:35,976
It's another opportunity for
you to dismiss the payment sheet


466
00:21:36,126 --> 00:21:39,636
and perhaps present an
order status at the end.


467
00:21:40,356 --> 00:21:41,626
This is all we have to do.


468
00:21:41,836 --> 00:21:43,736
So let's try bill and run this.


469
00:21:58,056 --> 00:21:59,636
Okay, there's our app.


470
00:21:59,636 --> 00:22:01,826
I'm just going to click the
Buy with Apple Pay Button,


471
00:22:02,456 --> 00:22:03,726
and there we have
the payment sheet.


472
00:22:04,366 --> 00:22:06,376
It's very simple, we have
different payment cards


473
00:22:06,376 --> 00:22:07,046
that we can try.


474
00:22:07,696 --> 00:22:08,946
And if you went to simulator,


475
00:22:08,946 --> 00:22:11,176
user action of double
clicking the side button,


476
00:22:11,566 --> 00:22:15,026
there's a new option on the
simulator menu, under Hardware,


477
00:22:15,546 --> 00:22:18,286
and it's called Authorize
Apple Pay.


478
00:22:19,116 --> 00:22:21,406
We just click on
this and it's done.


479
00:22:21,806 --> 00:22:24,816
Our payment is confirmed and
the coffee should be ready


480
00:22:24,896 --> 00:22:26,036
pretty soon.


481
00:22:26,136 --> 00:22:27,496
So that's our demo.


482
00:22:28,516 --> 00:22:33,976
[ Applause ]


483
00:22:34,476 --> 00:22:37,166
As you can see it's very
simple to implement Apple Pay.


484
00:22:37,326 --> 00:22:39,396
It only took us just
a few minutes and less


485
00:22:39,396 --> 00:22:42,386
than 50 lines of code.


486
00:22:42,386 --> 00:22:44,116
Now, before we finish
this section,


487
00:22:44,276 --> 00:22:45,556
I want to talk about design.


488
00:22:46,466 --> 00:22:49,256
How do we make something easy
for users of Apple Watch?


489
00:22:50,716 --> 00:22:54,006
Perhaps the most important thing
here is to consider what kind


490
00:22:54,006 --> 00:22:55,696
of experience you want
to bring to the watch.


491
00:22:56,626 --> 00:22:57,826
Users are not going
to spend more


492
00:22:57,826 --> 00:22:59,786
than just a few seconds
interacting with your app.


493
00:23:01,066 --> 00:23:02,786
So try to offer them
something they want,


494
00:23:02,966 --> 00:23:04,856
and direct them quickly
to the payment sheet.


495
00:23:05,746 --> 00:23:08,566
Remember that the interactions
are short and screens are small.


496
00:23:08,946 --> 00:23:12,866
Next, don't request
information that you don't need.


497
00:23:13,396 --> 00:23:15,506
This could be, for example,
a contact email address.


498
00:23:16,496 --> 00:23:19,076
While we offer users the same
options that they have available


499
00:23:19,076 --> 00:23:21,996
for billing and shipping on
the iPhone, there's no way


500
00:23:21,996 --> 00:23:24,906
to enter a new one right on the
watch, so keep that in mind.


501
00:23:25,436 --> 00:23:28,316
And then as we said in the demo,


502
00:23:28,446 --> 00:23:29,876
use the Payment Button
that we provide.


503
00:23:29,876 --> 00:23:32,036
If it's available on
the WatchKit framework,


504
00:23:32,266 --> 00:23:33,956
it is supported on
Interface Builder,


505
00:23:33,956 --> 00:23:35,116
so it is super easy to add.


506
00:23:35,736 --> 00:23:38,666
And please follow the guidelines
that we have on our website.


507
00:23:39,236 --> 00:23:41,426
This is probably more detail
how the Payment Button should be


508
00:23:41,426 --> 00:23:43,396
used in the context of your app.


509
00:23:44,966 --> 00:23:48,036
So to summarize, if
you have an iOS hub


510
00:23:48,036 --> 00:23:51,016
that implements Apple Pay most
of the same code will work.


511
00:23:51,446 --> 00:23:52,496
You just need to make sure


512
00:23:52,496 --> 00:23:54,926
to implement PKPayment
AuthorizationController


513
00:23:55,306 --> 00:23:57,876
and use the present and dismiss
methods that it provides.


514
00:23:59,266 --> 00:24:00,736
When you're designing
apps for the Watch,


515
00:24:00,816 --> 00:24:02,436
remember that the
interactions are short,


516
00:24:02,436 --> 00:24:03,596
and the screens are small.


517
00:24:04,836 --> 00:24:05,876
And use the Payment Button


518
00:24:05,876 --> 00:24:07,886
that we provide following
our guidelines.


519
00:24:09,436 --> 00:24:12,166
If you haven't done so already,
I highly recommend you checking


520
00:24:12,166 --> 00:24:14,396
out last year's session
on Apple Pay We Announce,


521
00:24:14,826 --> 00:24:16,676
which goes into a lot
more detail on how


522
00:24:16,676 --> 00:24:19,026
to create this kind
of experiences,


523
00:24:19,026 --> 00:24:21,246
and how to customize the
payment sheet in different ways.


524
00:24:21,736 --> 00:24:24,756
I'm really excited to
see what you'll create


525
00:24:24,846 --> 00:24:26,416
with Apply Pay on the Watch.


526
00:24:26,616 --> 00:24:28,386
And now I'm going to turn
it back to Nick who's going


527
00:24:28,386 --> 00:24:29,786
to tell you more
about extensions.


528
00:24:30,136 --> 00:24:30,876
Thank you very much.


529
00:24:31,516 --> 00:24:36,026
[ Applause ]


530
00:24:36,526 --> 00:24:37,126
Thank you Leo.


531
00:24:38,996 --> 00:24:40,826
Okay. Extensions.


532
00:24:41,276 --> 00:24:46,986
In previous releases, Apple
Pay hasn't really played


533
00:24:46,986 --> 00:24:48,316
that well with extensions.


534
00:24:48,646 --> 00:24:51,646
It's been difficult to
support in extensions,


535
00:24:51,716 --> 00:24:53,786
probably because we've always
needed a view controller


536
00:24:53,786 --> 00:24:57,206
to present from, and not
all extensions are UI based.


537
00:24:58,276 --> 00:24:59,756
Frankly, there also weren't


538
00:24:59,756 --> 00:25:01,696
that many interesting
places to use it.


539
00:25:02,156 --> 00:25:04,736
There weren't that many
extension points on iOS 9


540
00:25:04,736 --> 00:25:08,456
and iOS 8 that really lend
themselves to Apple Pay.


541
00:25:09,206 --> 00:25:11,576
But that's changing in iOS 10.


542
00:25:12,386 --> 00:25:13,816
We've got some new
opportunities.


543
00:25:15,116 --> 00:25:20,296
The new extensions, in iOS 10
work really well with Apple Pay


544
00:25:20,296 --> 00:25:22,526
and they have built-in
support for Apple Pay.


545
00:25:23,306 --> 00:25:25,786
And we've solved the
problem of not being able


546
00:25:25,786 --> 00:25:27,716
to display in a non-UI context.


547
00:25:28,016 --> 00:25:30,506
The PKPayment
AuthorizationController API


548
00:25:30,506 --> 00:25:34,376
that Leo showed you on watchOS,
is also available on iOS.


549
00:25:34,746 --> 00:25:37,986
You can actually use it anywhere
in an app, or an extension.


550
00:25:38,266 --> 00:25:41,436
I want to show you some
extensions that use Apple Pay.


551
00:25:41,876 --> 00:25:47,726
We gave the extension's API the
iMessage app API to Fandango


552
00:25:48,696 --> 00:25:53,166
and they use it to
purchase movie tickets.


553
00:25:53,416 --> 00:25:54,936
There's some other
things you can use it for.


554
00:25:54,936 --> 00:25:57,076
You can use it to split
items and purchases,


555
00:25:57,786 --> 00:26:01,386
send gifts to friends,
organize outings.


556
00:26:01,736 --> 00:26:04,936
So here you can see,
Fandango you picked a movie,


557
00:26:05,156 --> 00:26:07,736
suggest with your friends,
bought the tickets,


558
00:26:07,896 --> 00:26:10,236
we never leave messages,
we're still in messages.


559
00:26:10,856 --> 00:26:11,486
And you're done.


560
00:26:12,306 --> 00:26:13,736
It's really easy.


561
00:26:14,596 --> 00:26:16,626
I want to show you
another use of Apple Pay.


562
00:26:17,246 --> 00:26:21,206
It's Apple Pay in Siri and
Maps in the Intents framework.


563
00:26:21,686 --> 00:26:24,416
So there's a new ride
sharing extension point


564
00:26:24,416 --> 00:26:26,416
that works both in
Siri and in Maps.


565
00:26:26,796 --> 00:26:29,916
And you can use Apple Pay
within that extension point,


566
00:26:29,916 --> 00:26:31,046
it's actually built in.


567
00:26:31,046 --> 00:26:34,026
So you can pay directly
from the extension.


568
00:26:34,526 --> 00:26:35,926
I'll show you a short
video of that.


569
00:26:36,006 --> 00:26:38,046
The sample code that
we've developed this year,


570
00:26:38,146 --> 00:26:41,036
actually has a ride
sharing intent.


571
00:26:42,036 --> 00:26:43,166
So here we're asking Siri


572
00:26:43,166 --> 00:26:44,866
to book a ride using
our sample app.


573
00:26:45,686 --> 00:26:49,426
Siri asks us if we want
to get a ride, we say yes.


574
00:26:50,856 --> 00:26:52,696
The Apple Pay sheet's
immediately displayed.


575
00:26:53,246 --> 00:26:56,876
I can touch ID, and
then I can be on my way.


576
00:26:57,686 --> 00:26:58,496
It's that easy.


577
00:26:58,556 --> 00:27:00,586
I never have to leave
Siri, I stayed right there,


578
00:27:00,676 --> 00:27:01,826
never have to go to another app,


579
00:27:01,826 --> 00:27:03,526
never have to put any
payment information in.


580
00:27:03,996 --> 00:27:05,686
This is great if the user
never has a relationship


581
00:27:05,686 --> 00:27:07,686
with your app, if they've
never used your app before,


582
00:27:07,986 --> 00:27:09,316
they can still pay for things.


583
00:27:09,796 --> 00:27:13,606
They don't need to
have an account.


584
00:27:13,606 --> 00:27:15,186
And so requesting and
presenting payment


585
00:27:15,186 --> 00:27:17,756
in these extension points
is identical to WatchKit.


586
00:27:18,726 --> 00:27:19,586
There's no difference.


587
00:27:20,696 --> 00:27:23,476
You can use this new PKPayment
AuthorizationController


588
00:27:23,966 --> 00:27:26,806
in both your UI and
your non UI extensions.


589
00:27:27,206 --> 00:27:29,426
And I actually recommend that
you share your payment code.


590
00:27:29,916 --> 00:27:31,756
You can have a centralized
payment class,


591
00:27:31,966 --> 00:27:33,796
and you could share
that between Watch,


592
00:27:33,936 --> 00:27:35,726
iOS app, and iOS extension.


593
00:27:36,286 --> 00:27:38,746
That's actually what we've
done with our sample code.


594
00:27:38,746 --> 00:27:41,636
So we've rewritten the Emporium
sample app we released last


595
00:27:41,636 --> 00:27:43,416
year, it's been rewritten
in Swift 3.


596
00:27:44,196 --> 00:27:45,426
It's been simplified.


597
00:27:46,206 --> 00:27:47,596
So it's a lot easier
to understand.


598
00:27:48,206 --> 00:27:49,916
And it shows a shared
Apple Pay model,


599
00:27:50,166 --> 00:27:52,536
where the actual payment
logic is the same,


600
00:27:52,536 --> 00:27:53,936
regardless of the
platform that you're on.


601
00:27:55,116 --> 00:27:57,186
So, download that
and try it out.


602
00:27:58,026 --> 00:28:00,566
Of course, you might have a
little problem trying it out,


603
00:28:00,566 --> 00:28:03,806
and that brings me on
to testing Apple Pay.


604
00:28:04,226 --> 00:28:05,966
I saved the best
until last for you.


605
00:28:06,996 --> 00:28:08,176
Testing Apple Pay today


606
00:28:08,176 --> 00:28:09,786
if you've developed
an Apple Pay app,


607
00:28:10,016 --> 00:28:12,086
you'll notice it's
a little tricky.


608
00:28:12,516 --> 00:28:13,766
You can test on the simulator.


609
00:28:13,766 --> 00:28:15,916
And we've actually got
some great new support


610
00:28:15,916 --> 00:28:16,586
in the simulator.


611
00:28:16,586 --> 00:28:19,746
You saw the new authorized Apple
Pay Button on the simulator


612
00:28:19,746 --> 00:28:23,286
for Watch, we're also bringing
that to iPhone in seed two.


613
00:28:23,786 --> 00:28:27,726
And you can test your iOS,
your WatchKit, even Apple Pay


614
00:28:27,726 --> 00:28:30,446
on the web, you can test
on the simulator in Safari.


615
00:28:30,446 --> 00:28:33,446
Now the simulator returns
dummy payment data.


616
00:28:33,446 --> 00:28:35,066
Its payment data
is completely fake.


617
00:28:35,066 --> 00:28:36,916
It's not real and it's
not useable for anything.


618
00:28:37,826 --> 00:28:41,236
So it's really useful for UI
development and quick testing.


619
00:28:41,586 --> 00:28:44,636
But it's not particularly
useful for end-to-end testing.


620
00:28:45,846 --> 00:28:49,366
It's not real card data, and
the simulator is just not


621
00:28:49,366 --> 00:28:51,126
representative of
device behavior.


622
00:28:51,786 --> 00:28:54,766
You know we always tell you,
please don't use the simulator


623
00:28:54,766 --> 00:28:57,486
of your sole way of developing,
you have to test on hardware.


624
00:28:57,736 --> 00:29:00,206
But with Apple Pay that's
not always feasible.


625
00:29:00,306 --> 00:29:03,116
Apple Pay is available
in many countries,


626
00:29:03,116 --> 00:29:04,176
but not all countries.


627
00:29:04,176 --> 00:29:06,746
Maybe your developers
work abroad,


628
00:29:06,746 --> 00:29:09,076
or you don't have a
card that's eligible.


629
00:29:09,166 --> 00:29:11,996
Okay, we're going
to solve that today.


630
00:29:12,426 --> 00:29:15,596
We're going to introduce the
Apple Pay Sandbox environment.


631
00:29:16,556 --> 00:29:18,616
The Sandbox is a brand
new testing environment


632
00:29:18,616 --> 00:29:22,946
for Apple Pay and it lets you
provision test cards directly


633
00:29:23,146 --> 00:29:25,746
onto real devices and the data


634
00:29:25,746 --> 00:29:29,456
that it returns is real payment
data using these test cards.


635
00:29:30,166 --> 00:29:33,376
So it's just like paying for
something with a real credit


636
00:29:33,376 --> 00:29:34,516
or debit card in Apple Pay.


637
00:29:35,766 --> 00:29:38,616
It's really easy to use and
it's really easy to set up.


638
00:29:38,616 --> 00:29:40,966
And you can integrate it
into your QA environments,


639
00:29:40,966 --> 00:29:43,826
where previously perhaps you
couldn't due to restrictions


640
00:29:43,826 --> 00:29:45,596
on production financial data.


641
00:29:46,836 --> 00:29:49,246
Getting set up with the Sandbox
is really straightforward.


642
00:29:49,726 --> 00:29:52,726
All you need to do is create
a testing iCloud account


643
00:29:52,726 --> 00:29:53,696
at iTunes Connect.


644
00:29:54,126 --> 00:29:56,306
Now you can already do this
for various other features,


645
00:29:56,376 --> 00:29:58,976
so this already exists today.


646
00:29:59,056 --> 00:30:01,646
You then just log into that
account on your device.


647
00:30:02,596 --> 00:30:03,586
If you're not in a region


648
00:30:03,586 --> 00:30:06,316
that supports Apple Pay you
can change your region to,


649
00:30:06,316 --> 00:30:08,856
say the US, or to Canada.


650
00:30:09,036 --> 00:30:12,436
And then you just use the
test cards that are published


651
00:30:12,436 --> 00:30:13,906
at developer.apple.com.


652
00:30:13,906 --> 00:30:15,946
We have a list of test
numbers that you can input.


653
00:30:15,946 --> 00:30:17,326
There will be provisions


654
00:30:17,326 --> 00:30:19,336
to Apple Wallet just
like regular cards.


655
00:30:21,176 --> 00:30:23,476
There's no developer
setting or switch.


656
00:30:23,476 --> 00:30:25,386
Environment's a switch
automatically,


657
00:30:26,376 --> 00:30:27,966
where you sign in
and out of iCloud.


658
00:30:28,216 --> 00:30:31,216
Now you should still
validate your apps


659
00:30:31,216 --> 00:30:33,246
with production cards
before you launch.


660
00:30:33,246 --> 00:30:35,576
You still should do an
end-to-end transaction.


661
00:30:35,576 --> 00:30:38,436
I think this is going to be
a really great environment,


662
00:30:38,436 --> 00:30:40,296
a really great feature
to help you test.


663
00:30:40,426 --> 00:30:42,606
And actually if you're
using Apple Pay on the web,


664
00:30:42,846 --> 00:30:44,466
which we talked about
in previous session,


665
00:30:44,686 --> 00:30:47,096
initially you're only able
to test it in the Sandbox,


666
00:30:47,096 --> 00:30:49,066
because we're not going to
roll out production support


667
00:30:49,376 --> 00:30:53,266
until later, nearer the
time we actually GM iOS 10.


668
00:30:53,656 --> 00:30:57,986
So the Apple Pay Sandbox
today supports three networks,


669
00:30:57,986 --> 00:31:00,816
it supports American
Express, MasterCard and Visa.


670
00:31:01,106 --> 00:31:03,356
And more networks will be
coming on board overtime.


671
00:31:03,926 --> 00:31:06,556
We're also hoping that the
Sandbox can be integrated


672
00:31:06,556 --> 00:31:07,996
in various payment processes.


673
00:31:09,646 --> 00:31:10,706
So you can do that,


674
00:31:10,706 --> 00:31:12,456
it's available today
if you're on iOS 10.


675
00:31:12,456 --> 00:31:16,086
So let's have a quick
look at some


676
00:31:16,166 --> 00:31:17,476
of the stuff we talked
about today.


677
00:31:18,956 --> 00:31:21,676
We talked about some new Wallet
and Apple Pay API and features.


678
00:31:22,116 --> 00:31:23,516
Some of the new things
that we've introduced


679
00:31:23,516 --> 00:31:27,606
over the past year and in iOS
10 that help host developers,


680
00:31:27,856 --> 00:31:29,126
card issuers and retailers.


681
00:31:29,226 --> 00:31:31,106
And we talked about
Apple Pay and WatchKit.


682
00:31:32,046 --> 00:31:33,586
I think Apple Pay
WatchKit is really great.


683
00:31:33,586 --> 00:31:36,926
I can't wait to hail a ride
directly from my Apple Watch


684
00:31:36,926 --> 00:31:38,346
without ever needing
to pull out my phone.


685
00:31:39,236 --> 00:31:41,636
We also talked about
Apple Pay in extensions.


686
00:31:41,696 --> 00:31:43,346
I think there's so
much opportunity here


687
00:31:43,686 --> 00:31:46,466
to enable really compelling
experiences, where users can pay


688
00:31:46,466 --> 00:31:49,486
for things without having to go
into an app, straight from Siri,


689
00:31:49,486 --> 00:31:51,616
straight from maps,
straight from messages.


690
00:31:51,916 --> 00:31:54,236
And then we talked about testing


691
00:31:54,296 --> 00:31:56,036
in the Sandbox and
the simulator.


692
00:31:56,036 --> 00:32:00,036
There's one thing we didn't talk
about that's very big this year,


693
00:32:00,626 --> 00:32:01,636
that's Apple Pay on the Web.


694
00:32:03,056 --> 00:32:05,896
So, you can use Apple
Pay as well as in apps,


695
00:32:05,896 --> 00:32:07,976
as well as in extensions,
as well as in WebKit,


696
00:32:07,976 --> 00:32:12,916
you can now use it on mobile
websites and you can use it


697
00:32:12,916 --> 00:32:14,816
on the desktop, on MacOS Sierra.


698
00:32:15,136 --> 00:32:16,456
You can authorize payment


699
00:32:16,976 --> 00:32:19,156
in Safari using your
Apple Pay device,


700
00:32:19,156 --> 00:32:21,026
both iPhone and Apple Watch.


701
00:32:22,466 --> 00:32:24,286
Now, we talked about this
in the previous session.


702
00:32:24,286 --> 00:32:25,926
So if you're interested
you can go


703
00:32:25,926 --> 00:32:27,226
to the website, check
it out now.


704
00:32:28,626 --> 00:32:30,586
And if you want more information
about anything we talked


705
00:32:30,586 --> 00:32:33,356
about today you can check
our sessions microsite.


706
00:32:35,526 --> 00:32:38,076
Now I did promise some
contact information,


707
00:32:38,376 --> 00:32:39,196
and some other things.


708
00:32:39,196 --> 00:32:42,956
I promised you bank and co-brand
private label inquiries.


709
00:32:42,956 --> 00:32:45,676
If you're interested in taking
advantage of in-app provisioning


710
00:32:45,856 --> 00:32:48,936
or any of the features I
talked about for co-brands


711
00:32:48,936 --> 00:32:50,776
and card issuers, you
can email us here.


712
00:32:50,896 --> 00:32:53,656
And if you're interested in
value-added service passes,


713
00:32:53,816 --> 00:32:55,016
you can visit our website,


714
00:32:55,406 --> 00:32:57,746
the links up here,
developer.apple.com/


715
00:32:57,746 --> 00:32:59,536
contact/passkit.


716
00:32:59,536 --> 00:33:01,516
And you can put in a request


717
00:33:01,696 --> 00:33:04,876
to use the value-added
service signing certificates.


718
00:33:05,346 --> 00:33:08,696
We have some related
sessions, like I said,


719
00:33:08,696 --> 00:33:09,886
we just covered Apple
Pay on the web.


720
00:33:10,256 --> 00:33:14,266
There's also a WatchKit session
tomorrow, upstairs in Presidio,


721
00:33:14,476 --> 00:33:16,616
Designing Great Apple
Watch Experiences.


722
00:33:16,616 --> 00:33:18,686
I think you should
definitely go to that


723
00:33:18,686 --> 00:33:20,456
if you're interested
in WatchKit.


724
00:33:20,456 --> 00:33:23,156
See how you can really enable
WatchKit apps especially


725
00:33:23,156 --> 00:33:24,966
with the new changes
on watchOS3.


726
00:33:25,506 --> 00:33:27,616
So thank you so much for coming.


727
00:33:28,326 --> 00:33:30,076
Thank you for making
Apple Pay great


728
00:33:30,076 --> 00:33:31,186
with your own applications.


729
00:33:31,566 --> 00:33:32,916
And I can't wait to see some


730
00:33:32,916 --> 00:33:34,536
of the amazing things
you're going to build.


731
00:33:34,536 --> 00:33:36,816
And hopefully I'll see you
back here next year to talk


732
00:33:36,816 --> 00:33:38,396
about even more cool
things in Apple Pay.


733
00:33:38,766 --> 00:33:39,966
Have a great WWDC.

