1
00:00:12,086 --> 00:00:13,476
>> Good afternoon, everyone.


2
00:00:13,556 --> 00:00:16,226
My name is Anders, I am
an Engineer on the Safari


3
00:00:16,226 --> 00:00:18,956
and WebKit Team, and
I'll be joined later


4
00:00:19,046 --> 00:00:20,686
by my colleague Beth.


5
00:00:20,686 --> 00:00:22,786
And this session is Session 206,


6
00:00:22,786 --> 00:00:24,956
Introducing the Modern
WebKit API.


7
00:00:26,416 --> 00:00:28,006
We've got a lot of
really cool things


8
00:00:28,006 --> 00:00:30,526
to show you, so let's
get started.


9
00:00:31,516 --> 00:00:35,496
So first, I think I want to
give you a brief overview


10
00:00:35,496 --> 00:00:38,356
of what WebKit actually is.


11
00:00:39,466 --> 00:00:43,076
One way you can think of it
is that WebKit is the layout


12
00:00:43,076 --> 00:00:49,576
and rendering engine behind
Safari on Mac and iOS.


13
00:00:50,476 --> 00:00:55,856
So WebKit parses and
renders HTML, it loads


14
00:00:55,856 --> 00:00:59,036
and displays images, it runs
JavaScript, and so forth.


15
00:01:01,706 --> 00:01:05,696
Another way to look at
it is that WebKit starts


16
00:01:06,796 --> 00:01:08,956
where the Safari
user interface ends.


17
00:01:11,736 --> 00:01:15,446
But WebKit is also used by a
lot of other apps, such as mail


18
00:01:15,706 --> 00:01:17,476
for displaying rich HTML email.


19
00:01:19,256 --> 00:01:22,086
And iBooks for rendering
gorgeous ebooks.


20
00:01:24,136 --> 00:01:27,376
And even applications you
wouldn't normally think were


21
00:01:27,376 --> 00:01:30,516
using WebKit, like messages
for its conversation view.


22
00:01:31,076 --> 00:01:35,866
And of course most
important of all, your apps.


23
00:01:36,296 --> 00:01:38,446
You've done some really
amazing things with WebKit.


24
00:01:40,836 --> 00:01:45,216
So if you're using WebKit
in your app today on iOS,


25
00:01:45,356 --> 00:01:46,646
you're using UIWebView.


26
00:01:47,116 --> 00:01:48,726
So let's have a quick
show of hands,


27
00:01:48,726 --> 00:01:51,786
how many of you are using
UIWebView in an app today?


28
00:01:56,486 --> 00:01:59,276
Wow. On iOS X, you will
be using a WebView.


29
00:01:59,566 --> 00:02:01,546
And how many of you
are using a WebView?


30
00:02:02,946 --> 00:02:10,175
Cool. Now, over the years,
we've received a lot of requests


31
00:02:10,175 --> 00:02:14,926
from you especially on iOS for
something a bit more powerful.


32
00:02:16,526 --> 00:02:19,396
And we really think we have
something that you're going


33
00:02:19,396 --> 00:02:22,666
to like, and that is
the modern WebKit API.


34
00:02:24,066 --> 00:02:27,516
So what are you going
to learn today?


35
00:02:28,246 --> 00:02:31,306
You'll see how to adopt
the modern WebKit API


36
00:02:31,306 --> 00:02:35,036
and to use it in your apps.


37
00:02:35,236 --> 00:02:39,166
We'll take a look at few
new cool features and how


38
00:02:39,166 --> 00:02:40,486
to integrate those in your app.


39
00:02:41,296 --> 00:02:44,016
And then we'll dive a bit deeper


40
00:02:44,146 --> 00:02:48,656
and you can see how you can
customize the web WebKit loads


41
00:02:48,656 --> 00:02:52,096
web pages, and even customize
the web content itself.


42
00:02:54,596 --> 00:02:58,276
So the modern WebKit API.


43
00:02:58,816 --> 00:03:03,106
Class for class, this
API is exactly the same


44
00:03:03,146 --> 00:03:04,686
on iOS and OS X.


45
00:03:04,686 --> 00:03:06,976
Yeah, that's pretty cool.


46
00:03:07,516 --> 00:03:10,786
[ Applause ]


47
00:03:11,286 --> 00:03:14,756
Of course there are some minor
changes due to the way we hook


48
00:03:14,756 --> 00:03:20,726
into AppKit and UIKit, but
it's pretty much the same.


49
00:03:22,596 --> 00:03:26,116
We're also taking advantage of
the latest and greatest language


50
00:03:26,146 --> 00:03:29,956
and cocoa features, so you can
spend less time writing glue.


51
00:03:29,956 --> 00:03:33,186
code and more time focusing
on making your app great.


52
00:03:35,276 --> 00:03:37,416
And we've tried really hard


53
00:03:37,696 --> 00:03:41,246
to reduce the surface area
while still giving you access


54
00:03:41,246 --> 00:03:42,706
to a ton of cool features.


55
00:03:44,726 --> 00:03:47,816
And we're using the
multi-process architecture


56
00:03:48,276 --> 00:03:52,406
that we're also using on
Safari on both OS X and Lion,


57
00:03:52,696 --> 00:03:57,166
and now on iOS with iOS 8.


58
00:03:57,366 --> 00:04:01,556
In fact, one of the goals we
had with this modern API was


59
00:04:01,716 --> 00:04:05,506
to take a lot of features that
were previously only available


60
00:04:05,506 --> 00:04:08,736
to Safari and give
you access to them.


61
00:04:10,336 --> 00:04:14,526
For example, super smooth 60
frames per second scrolling


62
00:04:14,526 --> 00:04:17,305
using hardware acceleration
and Core Animation.


63
00:04:19,736 --> 00:04:22,936
The full power of the
JavaScript Nitro engine


64
00:04:22,986 --> 00:04:25,286
on both OS X and iOS.


65
00:04:27,516 --> 00:04:30,796
[ Applause ]


66
00:04:31,296 --> 00:04:34,876
And this includes the
fourth-tier compiler,


67
00:04:34,876 --> 00:04:36,746
that Greg was telling
you about yesterday.


68
00:04:37,056 --> 00:04:40,946
We've taken the back/forward
swipes and the pinch


69
00:04:40,946 --> 00:04:44,456
to zoom gestures and from Safari


70
00:04:44,456 --> 00:04:45,846
and built them right
into WebKit.


71
00:04:46,186 --> 00:04:52,276
And we have a really cool
way for your app to talk


72
00:04:52,516 --> 00:04:54,346
to web pages and vice versa.


73
00:04:57,086 --> 00:05:00,886
Now, I mentioned that
WebKit is multi-processed.


74
00:05:01,226 --> 00:05:03,196
And what does this really mean?


75
00:05:04,806 --> 00:05:07,706
It means the web content runs


76
00:05:08,236 --> 00:05:14,346
in a separate process completely
isolated from your app.


77
00:05:14,446 --> 00:05:17,046
Like this.


78
00:05:17,126 --> 00:05:18,356
Now, why is this a good idea?


79
00:05:19,746 --> 00:05:21,926
Well, it's great
for responsiveness.


80
00:05:22,076 --> 00:05:24,216
Let's say you have
loaded a web page


81
00:05:24,266 --> 00:05:29,196
and the web page is running a
lot of scripts and doing a lot


82
00:05:29,196 --> 00:05:33,436
of layout, your app will
still stay responsive even


83
00:05:33,436 --> 00:05:34,266
if this happens.


84
00:05:34,336 --> 00:05:37,266
And if you've loaded a web
page that is creating a lot


85
00:05:37,266 --> 00:05:41,016
of JavaScript objects and using
a lot of memory, we'll make sure


86
00:05:41,016 --> 00:05:42,716
to handle that gracefully
instead


87
00:05:42,716 --> 00:05:44,476
of having your app
be jettisoned.


88
00:05:47,286 --> 00:05:51,396
It's also really good for
battery life and power usage.


89
00:05:51,806 --> 00:05:55,566
Since each web page runs
separately in its own process,


90
00:05:56,006 --> 00:06:00,426
we can put individual web pages
into a low power mode for things


91
00:06:00,426 --> 00:06:03,386
like background tabs and
fully-occluded Windows.


92
00:06:03,926 --> 00:06:08,756
Now, this is also
completely transparent to you,


93
00:06:09,206 --> 00:06:13,916
when you create a WKWebView,
that is our new WebView class


94
00:06:13,916 --> 00:06:20,266
in the modern API, we'll spin
up a web content process.


95
00:06:20,266 --> 00:06:22,006
When you create another
WKWebView,


96
00:06:22,956 --> 00:06:24,806
we'll spin up another
web content process.


97
00:06:25,306 --> 00:06:28,266
Now, we do this up
to a limit and then


98
00:06:28,266 --> 00:06:30,386
when you create more WKWebViews,


99
00:06:31,296 --> 00:06:35,556
they'll share a web
content process.


100
00:06:35,556 --> 00:06:38,556
And when you deallocate
your WKWebViews,


101
00:06:39,276 --> 00:06:43,156
we tear down the processes
for you and you don't have


102
00:06:43,156 --> 00:06:44,066
to worry about a thing.


103
00:06:47,346 --> 00:06:51,086
So let's talk about how to
adopt the modern WebKit API.


104
00:06:51,306 --> 00:06:54,776
So Beth and I are both
huge Wikipedia fans.


105
00:06:54,776 --> 00:06:58,386
We love reading Wikipedia,
we read it all the time,


106
00:06:59,116 --> 00:07:02,686
and so we figured it would
be a kind of cool idea


107
00:07:02,686 --> 00:07:05,656
to write a dedicated
Wikipedia browser app using the


108
00:07:05,656 --> 00:07:06,266
modern API.


109
00:07:08,156 --> 00:07:09,436
This is what it looks like.


110
00:07:09,706 --> 00:07:10,916
It's called WKPedia.


111
00:07:11,396 --> 00:07:14,716
Now, if you think this is just
a WKWebView inside a [inaudible]


112
00:07:14,766 --> 00:07:16,986
Window, you're absolutely right.


113
00:07:17,856 --> 00:07:21,966
But don't worry, we're going to
add some more features to it.


114
00:07:22,566 --> 00:07:25,296
But how did we create
this WKWebView


115
00:07:25,296 --> 00:07:27,606
and how did we load
the web page?


116
00:07:28,226 --> 00:07:31,256
Well, creating a
WKWebView is really easy.


117
00:07:31,906 --> 00:07:35,456
Just as with any other view, you
call alloc and then you call it


118
00:07:35,456 --> 00:07:36,816
into a frame, and that's it.


119
00:07:37,316 --> 00:07:38,826
And how do you load a web page?


120
00:07:39,546 --> 00:07:44,936
You get the URL, you
get the URL request


121
00:07:45,516 --> 00:07:49,296
and then you call
WKWebView load request,


122
00:07:49,296 --> 00:07:50,676
and that'll load the
web page for you.


123
00:07:53,396 --> 00:07:58,386
So that's all good if you have
an app with a single WebView.


124
00:07:59,236 --> 00:08:04,436
But for WKPedia, we really want
to have support multiple windows


125
00:08:04,436 --> 00:08:08,336
so you can have more than
one article showing at once.


126
00:08:09,806 --> 00:08:14,106
And when you do this, there's
always some state that you want


127
00:08:14,106 --> 00:08:17,746
to share between your web
views, such as preferences,


128
00:08:17,746 --> 00:08:22,576
the set of processes to
create your web pages in,


129
00:08:23,096 --> 00:08:24,936
and this set of links.


130
00:08:25,456 --> 00:08:28,296
And the way to do this is


131
00:08:28,436 --> 00:08:31,976
to create a single
configuration object and then


132
00:08:31,976 --> 00:08:37,265
when you create your WKWebViews,
you pass along the configuration


133
00:08:37,996 --> 00:08:41,356
and that'll ensure that all
the state is correctly shared


134
00:08:41,486 --> 00:08:42,686
between the web use.


135
00:08:43,666 --> 00:08:45,076
This is what it looks
like in code.


136
00:08:45,186 --> 00:08:48,116
First, you create your
WKWebView configuration


137
00:08:49,436 --> 00:08:52,726
and then you create a WKWebView,


138
00:08:52,726 --> 00:08:55,646
but you use an input
frame configuration


139
00:08:56,096 --> 00:09:02,356
and you give it a configuration,
and that's all you have to do.


140
00:09:02,586 --> 00:09:03,886
Okay, back to WKPedia.


141
00:09:04,156 --> 00:09:06,576
Now, even though
this is not going


142
00:09:06,576 --> 00:09:08,326
to be a full-fledged browser,


143
00:09:08,936 --> 00:09:12,276
there's still some browser-like
features that we want to add,


144
00:09:12,896 --> 00:09:18,806
such as a back/forward button, a
title and a progress indicator.


145
00:09:20,096 --> 00:09:23,196
So let's take a look at
how we would do this.


146
00:09:23,486 --> 00:09:25,366
And let's go from left
to right and start


147
00:09:25,436 --> 00:09:26,776
with the back/forward buttons.


148
00:09:29,686 --> 00:09:34,106
For this, we have a bunch of
actions methods on WKWebView.


149
00:09:35,226 --> 00:09:37,636
Here are some of them.


150
00:09:37,856 --> 00:09:40,056
You can hook these up
in interface builder


151
00:09:40,236 --> 00:09:43,416
to your UI elements without
having to write any code.


152
00:09:44,006 --> 00:09:46,876
And so for WKPedia, the
ones we're interested


153
00:09:46,876 --> 00:09:49,046
in are go back and go forward.


154
00:09:49,716 --> 00:09:51,896
And these are also
auto-validating,


155
00:09:52,026 --> 00:09:55,616
which means that when you have
hooked these up to your UI,


156
00:09:55,616 --> 00:09:59,616
it will actually update the
enable/disable state based


157
00:09:59,616 --> 00:10:01,646
on whether you can
go back or forwards.


158
00:10:01,646 --> 00:10:05,666
So you don't have
to worry about that.


159
00:10:05,856 --> 00:10:08,696
So what about the title
and the progress indicator?


160
00:10:10,916 --> 00:10:14,766
For that we have a bunch
of properties on WKWebView.


161
00:10:16,426 --> 00:10:17,506
Here are some of them.


162
00:10:18,806 --> 00:10:21,716
These are Cocoa key value
observing compliant,


163
00:10:21,766 --> 00:10:26,826
which means that you can use
the normal Cocoa KDO methods


164
00:10:27,136 --> 00:10:29,706
to listen for any changes
to the property values.


165
00:10:30,236 --> 00:10:34,316
And if you're on OS X, you can
use Cocoa bindings to hook them


166
00:10:34,316 --> 00:10:37,196
up to your UI without having
to write a single line of code.


167
00:10:38,086 --> 00:10:42,276
So for WKPedia, we're
interested in the page title,


168
00:10:42,546 --> 00:10:46,206
just the title property, and
whether the page is loading


169
00:10:46,206 --> 00:10:48,196
or not, and that's
the loading property.


170
00:10:49,806 --> 00:10:53,426
Okay, so WKPedia is really
starting to come along here,


171
00:10:54,036 --> 00:11:02,596
but it's still not a
dedicated Wikipedia browser.


172
00:11:02,666 --> 00:11:03,896
Now, what do I mean by that?


173
00:11:04,256 --> 00:11:08,966
Well, let's say you go to the
WebKit article in Wikipedia


174
00:11:09,526 --> 00:11:14,426
and you click this link
to the WebKit homepage.


175
00:11:16,466 --> 00:11:19,836
That'll open the link
inside the WKPedia browser,


176
00:11:20,216 --> 00:11:23,216
but we want this to be a
dedicated Wikipedia app


177
00:11:23,866 --> 00:11:26,006
and we don't want to
load any external links.


178
00:11:27,576 --> 00:11:31,686
So what we want to do is
customize the way pages


179
00:11:31,686 --> 00:11:32,486
are loaded.


180
00:11:33,836 --> 00:11:35,556
But before I can
tell you about that,


181
00:11:36,066 --> 00:11:39,796
I need to explain how page
loading actually works


182
00:11:39,796 --> 00:11:43,296
in WebKit.


183
00:11:43,466 --> 00:11:48,306
So first, something happens
that triggers a page load,


184
00:11:49,056 --> 00:11:50,356
this can be one of many things.


185
00:11:50,356 --> 00:11:53,056
For example, the
user clicking a link


186
00:11:54,606 --> 00:11:56,116
or using the back/forward
buttons,


187
00:11:57,396 --> 00:12:00,186
it could be JavaScript setting
the window docile location


188
00:12:00,186 --> 00:12:04,106
property, or it can
be a subframe loading,


189
00:12:04,206 --> 00:12:07,796
because subframes and frames
are just documents inside


190
00:12:07,796 --> 00:12:09,716
of each other.


191
00:12:09,946 --> 00:12:12,996
And as we saw earlier, it
could be you calling WKWebView


192
00:12:12,996 --> 00:12:13,786
load request.


193
00:12:16,226 --> 00:12:19,696
Then we send a request
off to the server


194
00:12:20,246 --> 00:12:22,836
and we get back a response.


195
00:12:24,246 --> 00:12:26,096
This could be a positive
response


196
00:12:27,136 --> 00:12:31,766
or the server could send back
a 404, which means, sorry,


197
00:12:31,766 --> 00:12:34,396
I don't know what this
resource is, file not found.


198
00:12:34,896 --> 00:12:40,496
And then, the server sends
back some data and we're done.


199
00:12:42,166 --> 00:12:48,516
Now, what you can do with
WebKit is to have your app sort


200
00:12:48,516 --> 00:12:53,116
of inject itself after the
action and response phases.


201
00:12:54,456 --> 00:12:58,566
And to decide whether
to continue the load


202
00:12:58,566 --> 00:13:00,656
or whether to cancel it.


203
00:13:01,986 --> 00:13:05,656
And the way you do this
is by implementing methods


204
00:13:05,656 --> 00:13:08,026
on the WKWebView
navigation delegate.


205
00:13:09,736 --> 00:13:11,696
There are 2 methods
that correspond


206
00:13:11,696 --> 00:13:13,786
to the 2 different phases.


207
00:13:14,506 --> 00:13:16,086
The first one is decide policy


208
00:13:16,086 --> 00:13:19,236
for navigation action,
for the action phase.


209
00:13:20,386 --> 00:13:23,356
The second one is decide
policy for navigation response,


210
00:13:23,466 --> 00:13:25,776
for the response phase.


211
00:13:26,086 --> 00:13:30,366
And with both of these delegate
methods, you get data objects


212
00:13:30,366 --> 00:13:34,376
that contain enough
information for you to be able


213
00:13:34,376 --> 00:13:36,666
to make an informed decision
about whether you want


214
00:13:36,666 --> 00:13:38,116
to continue the load or not.


215
00:13:38,996 --> 00:13:42,546
So for decide policy
for navigation action,


216
00:13:42,956 --> 00:13:46,326
that object is a WK
navigation action object.


217
00:13:47,796 --> 00:13:49,716
It has properties.


218
00:13:50,076 --> 00:13:54,366
For example, the navigation type
lets you find out which type


219
00:13:54,366 --> 00:13:56,606
of navigation actually
started the load,


220
00:13:56,966 --> 00:14:00,616
like if it was a link being
clicked or if it was a go back,


221
00:14:00,776 --> 00:14:04,316
go forward request,
and so forth.


222
00:14:04,466 --> 00:14:06,316
Request is the request
that we're going


223
00:14:06,316 --> 00:14:07,406
to send to the server.


224
00:14:08,936 --> 00:14:12,696
And with the modifier flags
property, you can even tell


225
00:14:12,696 --> 00:14:15,556
if the user held down
shift or command or option


226
00:14:16,296 --> 00:14:17,266
when clicking the link.


227
00:14:20,536 --> 00:14:23,156
For decide policy for
navigation response,


228
00:14:23,256 --> 00:14:25,636
you get a WK navigation
response object.


229
00:14:27,056 --> 00:14:31,996
This also has some properties,
response is the HTTP.


230
00:14:31,996 --> 00:14:33,856
response that we get
back from the server.


231
00:14:34,366 --> 00:14:39,546
And in addition to
these data objects,


232
00:14:39,696 --> 00:14:42,826
you also get a decision
handler in the form of a block.


233
00:14:44,686 --> 00:14:47,936
This is how your app can
decide whether you want to go


234
00:14:47,936 --> 00:14:51,126
through with a load
or cancel it.


235
00:14:51,816 --> 00:14:56,086
And you do this by calling
the block with 1 of 2 values.


236
00:14:56,196 --> 00:14:59,646
So for decide policy
for navigation action,


237
00:15:00,046 --> 00:15:04,986
you either pass WK navigation
action policy cancel or allow.


238
00:15:05,236 --> 00:15:09,246
And for decide policy
for navigation response,


239
00:15:09,786 --> 00:15:13,936
you pass either WK navigation
response policy cancel or allow.


240
00:15:16,246 --> 00:15:19,156
Now, you can either call
these blocks right away


241
00:15:19,416 --> 00:15:22,516
or you can call them
sometime later,


242
00:15:22,516 --> 00:15:25,626
which can be really useful
if you want to put up some UI


243
00:15:25,626 --> 00:15:29,286
and let the user decide whether
the load should continue or not.


244
00:15:31,786 --> 00:15:35,406
So now I'd like to ask my
colleague Beth up on stage


245
00:15:35,666 --> 00:15:38,856
to show WKPedia and how to
add some of these features.


246
00:15:39,146 --> 00:15:39,346
Beth.


247
00:15:40,516 --> 00:15:44,156
[ Applause ]


248
00:15:44,656 --> 00:15:46,416
>> Hi everyone, I'm Beth Dakin.


249
00:15:46,966 --> 00:15:49,426
Anders and I work together
on Safari and WebKit,


250
00:15:49,426 --> 00:15:53,086
but lately we've been working
on our pet project, WKPedia.


251
00:15:53,436 --> 00:15:56,916
So I have a super bear-bones
version of the app to show you,


252
00:15:57,156 --> 00:15:59,216
and together we'll use
all of the information


253
00:15:59,216 --> 00:16:01,666
that Anders just gave us
to build it up and turn it


254
00:16:01,666 --> 00:16:03,926
into a dedicated browsing app.


255
00:16:04,626 --> 00:16:06,126
So I'll show you what we have


256
00:16:06,126 --> 00:16:08,566
and then we'll work
on improving it.


257
00:16:10,186 --> 00:16:11,346
Just going to build and run.


258
00:16:17,146 --> 00:16:19,446
Here we go, this is
WKPedia as it stands.


259
00:16:19,446 --> 00:16:22,676
It's really just a
WKWebView in a window,


260
00:16:22,676 --> 00:16:25,476
we get all of the great
WKWebView features,


261
00:16:25,476 --> 00:16:29,276
super fast scrolling, we get
the super fast JavaScript engine


262
00:16:29,276 --> 00:16:33,966
with the fourth-tier
compiler, can click on links,


263
00:16:34,206 --> 00:16:35,576
navigate to new pages.


264
00:16:36,056 --> 00:16:38,616
So that's great but I'm
clearly missing some basic


265
00:16:38,816 --> 00:16:39,896
browsing features.


266
00:16:40,006 --> 00:16:43,676
If I look at the same website
in Safari, for example,


267
00:16:44,126 --> 00:16:48,996
if I click on a new link, then
I get some progress indication


268
00:16:48,996 --> 00:16:51,586
at the top, indicating
how the load's going.


269
00:16:51,886 --> 00:16:55,806
The URL bar gives me some
indication of what page I'm on.


270
00:16:55,806 --> 00:16:56,856
I can go back.


271
00:16:57,066 --> 00:16:59,186
These are things that we
clearly want in our app for it


272
00:16:59,186 --> 00:17:00,706
to feel like a web browser.


273
00:17:01,156 --> 00:17:02,446
So let's add them.


274
00:17:03,286 --> 00:17:06,516
I'll give you a quick
tour of the code first.


275
00:17:07,165 --> 00:17:10,056
This is our main class, it's
a browser window controller,


276
00:17:10,056 --> 00:17:12,425
and that's an
NSWindowController.


277
00:17:12,425 --> 00:17:14,626
And if we look at the
implementation file,


278
00:17:14,955 --> 00:17:17,976
you'll see this is where we have
a property for the WKWebView.


279
00:17:19,156 --> 00:17:21,096
And down here in
window did load,


280
00:17:21,096 --> 00:17:23,915
this is where we allocate
our WebView and it's


281
00:17:23,915 --> 00:17:25,566
where we load our
initial request.


282
00:17:26,046 --> 00:17:28,435
Okay, but we want to
add some toolbar items,


283
00:17:28,435 --> 00:17:30,596
so let's go into
interface builder.


284
00:17:41,046 --> 00:17:45,456
I need to get my toolbar
here, there we go.


285
00:17:45,456 --> 00:17:48,546
First I want to make the
toolbar visible at launch,


286
00:17:48,846 --> 00:17:52,316
and then we'll double click
it to start adding some items.


287
00:17:52,316 --> 00:17:55,216
So first we wanted a
back and forward button,


288
00:17:55,216 --> 00:17:56,716
so I will drag those in.


289
00:17:57,236 --> 00:18:05,006
And if we go over to this panel
here, let me highlight one


290
00:18:05,006 --> 00:18:08,116
of these buttons, here
I'll zoom this up for you.


291
00:18:08,886 --> 00:18:10,746
You can see I've already
hooked these buttons


292
00:18:10,746 --> 00:18:14,006
up to the appropriate method, so
the back button's already hooked


293
00:18:14,006 --> 00:18:16,016
up to the go back action method,


294
00:18:16,016 --> 00:18:17,556
and the forward button's
already hooked


295
00:18:17,556 --> 00:18:19,226
up to go forward, so
those should work.


296
00:18:20,416 --> 00:18:23,306
Then we want some indication
of the page that we're on.


297
00:18:23,306 --> 00:18:25,616
So we don't want our URL field
here, because we want this


298
00:18:25,616 --> 00:18:28,636
to be a dedicated browser app,
we don't want people to type


299
00:18:28,636 --> 00:18:32,186
in random URL's, they'll use
this search field and Wikipedia


300
00:18:32,186 --> 00:18:33,156
to get to different pages.


301
00:18:33,156 --> 00:18:37,196
So we just want some texts, but
we want it to reflect the title


302
00:18:37,196 --> 00:18:39,556
of the Wikipedia page
that we're actually on.


303
00:18:39,956 --> 00:18:42,066
So that's very easy.


304
00:18:42,686 --> 00:18:45,596
Over here let me
zoom this up again.


305
00:18:47,056 --> 00:18:51,246
So for this text, we just want
to bind it to the file's owner,


306
00:18:51,446 --> 00:18:53,316
which is that browser
window controller class


307
00:18:53,356 --> 00:18:54,626
that I showed you a minute ago.


308
00:18:54,966 --> 00:18:57,326
And then we want to
set the model key path


309
00:18:57,586 --> 00:19:00,466
to WebView dot title.


310
00:19:01,756 --> 00:19:04,956
And so that's one of those
KVO-compliant properties


311
00:19:04,956 --> 00:19:08,136
on WKWebView that Anders
was telling us about.


312
00:19:08,136 --> 00:19:09,626
So this should be all
that we have to do,


313
00:19:09,626 --> 00:19:12,456
this should actually update
whenever the title value


314
00:19:12,456 --> 00:19:16,276
changes, just get all
of that KVO goodness.


315
00:19:18,136 --> 00:19:20,836
All right, and finally, we just
want some progress indication.


316
00:19:20,836 --> 00:19:21,936
So I'll drag in the spinner too.


317
00:19:22,376 --> 00:19:24,106
Okay, that looks about right.


318
00:19:24,106 --> 00:19:30,976
So let's see how that
works, let's build and run.


319
00:19:31,186 --> 00:19:33,266
Okay, so we have
some progress here.


320
00:19:33,496 --> 00:19:34,606
I'll zoom up a little.


321
00:19:35,466 --> 00:19:37,036
We have back/forward
buttons, great,


322
00:19:37,036 --> 00:19:38,546
we'll see if they
work in a second.


323
00:19:38,806 --> 00:19:41,076
We have a title that
reflects the page


324
00:19:41,076 --> 00:19:42,696
that we're on, San Francisco.


325
00:19:43,086 --> 00:19:45,626
Our spinner doesn't seem to be
doing quite the right thing,


326
00:19:45,626 --> 00:19:47,086
it's just kind of always there,


327
00:19:47,086 --> 00:19:50,066
and it's not indicating
any load progress yet.


328
00:19:50,596 --> 00:19:52,486
I navigate to a new page, great,


329
00:19:52,486 --> 00:19:55,336
the title updated right
away to reflect San Diego.


330
00:19:55,776 --> 00:19:58,906
Click my back button, and
we went back, awesome.


331
00:19:59,016 --> 00:20:00,456
Forward, great.


332
00:20:00,576 --> 00:20:02,596
Okay, so we've made a
lot of improvements.


333
00:20:02,596 --> 00:20:03,896
We need to fix that spinner.


334
00:20:04,156 --> 00:20:07,616
I also feel like this title is
really long and unnecessary.


335
00:20:07,616 --> 00:20:09,986
They all seem to have
this suffix, Wikipedia,


336
00:20:09,986 --> 00:20:10,976
the free encyclopedia.


337
00:20:11,276 --> 00:20:12,986
I think it would be
more useful in our app


338
00:20:12,986 --> 00:20:15,706
if we truncate the title down
just to be the beginning part.


339
00:20:15,706 --> 00:20:17,366
So we can handle
that very easily


340
00:20:17,716 --> 00:20:19,056
in interface builder as well.


341
00:20:19,116 --> 00:20:21,526
So let's make those two fixes.


342
00:20:23,576 --> 00:20:25,136
First let's fix that spinner.


343
00:20:27,806 --> 00:20:35,676
To fix that we want to go
over here again to this panel


344
00:20:35,676 --> 00:20:40,016
to the animation section,
and we want to bind


345
00:20:40,266 --> 00:20:41,456
to the file's owner again.


346
00:20:41,456 --> 00:20:43,516
Again, that's our browser
window controller class.


347
00:20:44,116 --> 00:20:49,596
And here the model key path
we WebView dot loading, yes.


348
00:20:50,196 --> 00:20:52,816
And again, that's one of those
KVO-compliant properties.


349
00:20:53,116 --> 00:20:55,526
That should be all we
have to do to get this


350
00:20:55,526 --> 00:20:58,246
to animate whenever
WebView dot loading is true.


351
00:20:59,086 --> 00:21:01,466
There's one other thing I
want to do with this though,


352
00:21:01,626 --> 00:21:07,856
which is over here, I want to
uncheck display when stopped.


353
00:21:07,856 --> 00:21:10,706
So then it should go away
when it's not animating.


354
00:21:12,036 --> 00:21:15,936
Okay, and now we want to
truncate that title also.


355
00:21:15,936 --> 00:21:19,976
So I did already write some
code that would do that.


356
00:21:20,286 --> 00:21:24,986
Down here if we look in here,
so this is just some simple code


357
00:21:24,986 --> 00:21:28,976
that I wrote that would take an
NS string and see if it had this


358
00:21:28,976 --> 00:21:32,716
as a suffix at the end,
and then return a string


359
00:21:32,716 --> 00:21:33,756
that doesn't have that part.


360
00:21:33,876 --> 00:21:37,046
So I already wrote some code
to do that and I can invoke it


361
00:21:37,206 --> 00:21:40,676
from within interface
builder right


362
00:21:40,676 --> 00:21:44,766
over here using the
value transformer option.


363
00:21:45,506 --> 00:21:48,076
Delete Wikipedia title
snippet value transformer.


364
00:21:48,076 --> 00:21:51,726
So that will take the title
and invoke this method


365
00:21:51,936 --> 00:21:55,566
with the title and then the
result will be what's reflected


366
00:21:55,566 --> 00:21:56,196
in the toolbar.


367
00:21:57,936 --> 00:22:00,626
So let's save, build
and run again.


368
00:22:06,746 --> 00:22:09,276
Okay, so progress has been made.


369
00:22:09,526 --> 00:22:11,306
Let's try clicking another link.


370
00:22:11,306 --> 00:22:12,186
We get our spinner.


371
00:22:12,186 --> 00:22:13,036
It's animating.


372
00:22:13,036 --> 00:22:14,266
It goes away when we're gone.


373
00:22:14,586 --> 00:22:19,996
Our title is now a much smaller
more useful thing for our app.


374
00:22:20,346 --> 00:22:21,786
We still have our
back/forward buttons.


375
00:22:22,086 --> 00:22:25,456
This is looking great, this is
really feeling like a browser.


376
00:22:25,826 --> 00:22:27,406
But I haven't done anything


377
00:22:27,406 --> 00:22:30,616
yet to make it a dedicated
Wikipedia browser besides just


378
00:22:30,616 --> 00:22:31,936
not providing a URL field.


379
00:22:31,936 --> 00:22:35,146
But if I go to a link like
this, and click on it,


380
00:22:35,146 --> 00:22:37,836
it's going to still
open right in my app,


381
00:22:37,836 --> 00:22:40,626
which is not the behavior
that I'm looking for that sort


382
00:22:40,626 --> 00:22:43,996
of defeats the purpose of this
being a dedicated Wikipedia


383
00:22:43,996 --> 00:22:44,626
browsing app.


384
00:22:44,626 --> 00:22:46,376
So we can easily fix this


385
00:22:46,376 --> 00:22:49,476
by implementing the
navigation delegate just


386
00:22:49,476 --> 00:22:50,596
like Anders taught us.


387
00:22:50,736 --> 00:22:52,406
So let's do that right now.


388
00:22:52,406 --> 00:22:54,716
Let's go back to the code.


389
00:22:58,256 --> 00:23:04,146
Okay, so first, I want
to add 1 line of code


390
00:23:04,146 --> 00:23:08,226
to window did load here, to
set the navigation delegate.


391
00:23:08,596 --> 00:23:11,366
Here I'm setting the
navigation delegate to self,


392
00:23:11,706 --> 00:23:15,676
so this way WebKit will know
to look here in my class to see


393
00:23:15,676 --> 00:23:19,256
if there's any implementations
of these delegate methods.


394
00:23:19,256 --> 00:23:23,706
And then we want to implement
1 of the 2 delegate methods.


395
00:23:23,706 --> 00:23:29,466
We want to implement decide
policy for navigation action.


396
00:23:29,466 --> 00:23:30,766
So let's quickly
step through this.


397
00:23:31,236 --> 00:23:34,926
So first I want to get
the URL that the app wants


398
00:23:34,926 --> 00:23:36,836
to navigate to, and then


399
00:23:37,096 --> 00:23:41,016
if the host URL does not
have a Wikipedia.org suffix,


400
00:23:41,016 --> 00:23:44,036
so this is a non-Wikipedia
link, then in that case,


401
00:23:44,246 --> 00:23:46,626
I want to pass the
navigation off


402
00:23:46,626 --> 00:23:48,196
to the default browser
on the system.


403
00:23:48,196 --> 00:23:50,246
So that's what will happen
with this line of code.


404
00:23:50,246 --> 00:23:52,186
Safari should open
that link instead.


405
00:23:52,516 --> 00:23:54,866
But we still need to
tell our WKWebView


406
00:23:55,046 --> 00:23:57,296
that it shouldn't go ahead
with the navigation also,


407
00:23:57,516 --> 00:23:59,576
so we'll invoke the
decision handler block


408
00:23:59,836 --> 00:24:03,506
with the WK navigation
action policy cancel value.


409
00:24:03,906 --> 00:24:05,906
And while we were here I
thought it would be cool just


410
00:24:05,906 --> 00:24:08,596
to add a feature to command
click a link and open it


411
00:24:08,596 --> 00:24:10,016
in a new window in my own app.


412
00:24:10,056 --> 00:24:11,706
So that's what I
added down here.


413
00:24:11,706 --> 00:24:14,876
So first I'm finding out if
this navigation is happening


414
00:24:15,186 --> 00:24:19,456
with the command key down,
and if it is, then I'm going


415
00:24:19,456 --> 00:24:22,416
to create a brand new browser
window controller and I'm giving


416
00:24:22,416 --> 00:24:24,606
that this navigation request.


417
00:24:25,536 --> 00:24:28,546
And then again, since I
don't want this WKWebView


418
00:24:28,546 --> 00:24:30,626
to also navigate
to the new page,


419
00:24:30,906 --> 00:24:34,286
I invoke the decision handler
block with the cancel value.


420
00:24:34,636 --> 00:24:38,066
And otherwise if we didn't fall
into any of those situations,


421
00:24:38,066 --> 00:24:41,916
then we'll invoke the decision
handler block with allow.


422
00:24:42,216 --> 00:24:48,426
So let's save and build and run.


423
00:24:48,616 --> 00:24:51,026
Okay, great, so regular
page loading still works,


424
00:24:51,026 --> 00:24:51,886
so that's good.


425
00:24:54,476 --> 00:24:58,806
Let's see, let's click on
this link, and awesome,


426
00:24:58,806 --> 00:25:01,036
we successfully handed
that navigation off


427
00:25:01,036 --> 00:25:02,266
to the default browser.


428
00:25:03,636 --> 00:25:06,096
And if I command click a link,


429
00:25:07,006 --> 00:25:09,136
I get it in a new
window in my own app.


430
00:25:09,136 --> 00:25:10,706
Each of these are
in its own process


431
00:25:10,706 --> 00:25:13,646
because this is modern
WebKit API, pretty cool.


432
00:25:15,136 --> 00:25:17,826
So this is awesome, in just
a few minutes, we have built


433
00:25:17,826 --> 00:25:21,756
up a dedicated browser app
using the modern WebKit API.


434
00:25:22,576 --> 00:25:25,676
But I still feel like there
are few modern features


435
00:25:25,896 --> 00:25:27,686
that I'm lacking here.


436
00:25:27,686 --> 00:25:30,686
For example, again, if
we look back in Safari,


437
00:25:31,076 --> 00:25:33,836
who really uses the back
button anymore, I mean,


438
00:25:33,836 --> 00:25:37,566
I typically use the swipe
back gesture to go back.


439
00:25:37,566 --> 00:25:39,876
And I also want to
be able to double tap


440
00:25:39,876 --> 00:25:40,956
to zoom and pinch out.


441
00:25:41,246 --> 00:25:45,446
If I try to do those things
in my app, nothing happens.


442
00:25:45,926 --> 00:25:48,566
Double tap, no, nothing's
happening.


443
00:25:48,806 --> 00:25:51,126
But it's really, really
easy to add these features.


444
00:25:51,126 --> 00:25:52,406
So I'm going to do
it really quickly,


445
00:25:52,406 --> 00:25:54,686
even though Anders hasn't shown
us how to do it quite yet.


446
00:25:55,156 --> 00:25:58,246
But we just need to
add 2 lines of code.


447
00:25:58,896 --> 00:26:00,746
Back up here in window did load.


448
00:26:05,996 --> 00:26:09,696
Okay, so this first line of code
allows back/forward navigation


449
00:26:09,696 --> 00:26:11,026
gestures, set that to yes,


450
00:26:11,266 --> 00:26:12,986
that gets you the
back/forward swiping.


451
00:26:13,386 --> 00:26:14,856
And allows magnification,


452
00:26:14,856 --> 00:26:16,706
that will get double
tap and pinch to zoom.


453
00:26:17,426 --> 00:26:22,826
Save that, build and run.


454
00:26:23,006 --> 00:26:26,426
Okay, so now if I go
forward, should be able


455
00:26:26,426 --> 00:26:28,456
to swipe back, awesome.


456
00:26:29,026 --> 00:26:32,096
Can double tap, pinch
right out, awesome.


457
00:26:32,326 --> 00:26:35,556
So there you have it,
we've built a modern --


458
00:26:35,826 --> 00:26:37,596
we've used the modern WebKit API


459
00:26:37,716 --> 00:26:40,666
to build a dedicated
Wikipedia browser app


460
00:26:40,916 --> 00:26:43,626
with modern filling features
in just a few minutes.


461
00:26:43,966 --> 00:26:45,206
So I'm going to hand
it back to Anders,


462
00:26:45,206 --> 00:26:48,226
he's going to teach you a lot
of the more advanced features


463
00:26:48,226 --> 00:26:49,356
that you can do with this API.


464
00:26:49,356 --> 00:26:50,986
And I'll be back up later


465
00:26:50,986 --> 00:26:53,316
to show you how you can
integrate some of those features


466
00:26:53,586 --> 00:26:55,866
into our iPad version
of WKPedia.


467
00:26:56,516 --> 00:26:57,456
Back to you, Anders.


468
00:26:58,516 --> 00:27:01,046
[ Applause ]


469
00:27:01,546 --> 00:27:02,036
>> Thanks, Beth.


470
00:27:02,276 --> 00:27:03,366
That was really cool.


471
00:27:03,706 --> 00:27:06,276
I especially like the
extra touch at the end


472
00:27:06,276 --> 00:27:08,006
where you added adjuster
support.


473
00:27:08,636 --> 00:27:10,266
Let's recap how Beth did that.


474
00:27:11,606 --> 00:27:14,676
So for the navigation gestures,
that's the swipe to go back


475
00:27:14,676 --> 00:27:17,856
and forward, you just set
the allow the stop forward


476
00:27:17,856 --> 00:27:21,696
navigation gestures property
to yes on your WKWebView.


477
00:27:23,256 --> 00:27:26,056
For zoom gestures on OS X,


478
00:27:26,646 --> 00:27:30,156
you set the allow
magnification property to yes.


479
00:27:31,576 --> 00:27:36,396
On iOS, this is handled by
the underlying UI scroll view,


480
00:27:36,396 --> 00:27:38,846
and it's already on by default,
so you don't have to do a thing.


481
00:27:41,506 --> 00:27:44,556
So let's talk about
WKPedia for iPad.


482
00:27:45,146 --> 00:27:46,806
This is what it looks like.


483
00:27:47,046 --> 00:27:49,286
It's really great, I
use it all the time


484
00:27:49,286 --> 00:27:51,516
for reading Wikipedia
articles on my way to work.


485
00:27:53,486 --> 00:27:58,316
But I've noticed something
that bothers me a little.


486
00:27:58,736 --> 00:28:04,086
See, I like to read certain
sections of an article,


487
00:28:04,506 --> 00:28:08,906
and that means that I have to
go find the table of contents,


488
00:28:08,906 --> 00:28:11,346
I have to scroll down to it.


489
00:28:11,346 --> 00:28:15,626
I find a section that I want
to read, I tap on that link.


490
00:28:16,726 --> 00:28:19,936
And then when I've read it, I
need to scroll all the way back


491
00:28:19,936 --> 00:28:24,226
up or swipe back and look for
another section and read that.


492
00:28:24,816 --> 00:28:27,976
So I told Beth about
this and she said, well,


493
00:28:27,976 --> 00:28:29,886
why don't we use some of
the more advanced features


494
00:28:29,886 --> 00:28:33,686
of the modern WebKit API
to take care of this?


495
00:28:33,876 --> 00:28:36,976
Like why don't we just
get rid of the table


496
00:28:36,976 --> 00:28:38,556
of contents from the web page?


497
00:28:39,436 --> 00:28:43,146
And while we're at it, we can
also get rid of this side bar


498
00:28:43,146 --> 00:28:45,446
to the left, to make
room for the article.


499
00:28:46,616 --> 00:28:51,226
And then we can put the table
of contents natively in the UI,


500
00:28:51,226 --> 00:28:54,646
so we have this little button
in the top left corner,


501
00:28:55,046 --> 00:28:57,956
and when you tap it, you
get the table of contents


502
00:28:57,986 --> 00:28:59,826
in a native UI table view.


503
00:29:00,666 --> 00:29:02,746
And when you're in
landscape mode,


504
00:29:02,826 --> 00:29:05,606
you can always have it visible
because of the extra space.


505
00:29:07,016 --> 00:29:08,096
So what we really want


506
00:29:08,096 --> 00:29:12,686
to do here is customize web
page contents from a Wikipedia.


507
00:29:13,486 --> 00:29:15,776
And we want to use two
features to do this.


508
00:29:16,706 --> 00:29:19,716
One is called user scripts.


509
00:29:19,716 --> 00:29:21,586
The other one is
called script messages.


510
00:29:23,266 --> 00:29:24,686
These are both handled


511
00:29:24,686 --> 00:29:27,786
by an object called WK
user content controller.


512
00:29:29,576 --> 00:29:33,356
WK user content controller
is part of the configuration.


513
00:29:34,526 --> 00:29:36,236
So it's a property


514
00:29:36,236 --> 00:29:39,786
on the WKWebView configuration
called user content controller.


515
00:29:44,126 --> 00:29:45,936
So let's talk about
user scripts.


516
00:29:47,376 --> 00:29:51,436
User scripts are a way
for you, app developers,


517
00:29:52,086 --> 00:29:56,426
to take some JavaScript and
inject it into the web page,


518
00:29:56,426 --> 00:29:57,956
and then have it do something.


519
00:29:59,416 --> 00:30:02,406
This will happen automatically
for every web page.


520
00:30:02,956 --> 00:30:05,686
So you don't have to manually
call it every time the


521
00:30:05,686 --> 00:30:06,496
page loads.


522
00:30:09,356 --> 00:30:12,856
So when you add user scripts,
you need to consider two things.


523
00:30:14,046 --> 00:30:17,486
The first one is when you
want your user script to run.


524
00:30:18,136 --> 00:30:22,966
You can either run your user
script at document start time.


525
00:30:23,356 --> 00:30:26,626
This is right after the document
element has been created


526
00:30:27,066 --> 00:30:32,806
but before any other
document has been parsed.


527
00:30:32,806 --> 00:30:34,966
Or you can run them
at document end,


528
00:30:34,966 --> 00:30:37,886
which is after the
document is finished parsing


529
00:30:38,416 --> 00:30:40,676
but before any subresources


530
00:30:40,676 --> 00:30:42,796
such as images have
necessarily finished loading.


531
00:30:44,036 --> 00:30:45,346
This corresponds to the


532
00:30:45,346 --> 00:30:48,626
down content loading
event, load event.


533
00:30:50,586 --> 00:30:53,386
You also want to consider
where these scripts should run.


534
00:30:54,106 --> 00:30:57,796
You can run them either for all
frames, so both the mainframe


535
00:30:57,836 --> 00:31:02,236
and the subframes, or just
for the mainframe only.


536
00:31:04,806 --> 00:31:06,596
So how do you create
a user script?


537
00:31:08,936 --> 00:31:12,526
First, you get the script
string from somewhere.


538
00:31:12,776 --> 00:31:16,606
In my case, I just have it as
a string literal in my code.


539
00:31:16,926 --> 00:31:22,236
Then you create a WK user script
object and pass the source code


540
00:31:22,596 --> 00:31:24,806
and here I've highlighted
the when and where.


541
00:31:25,276 --> 00:31:29,026
So we want this user script
to run at document start time


542
00:31:29,346 --> 00:31:30,596
but only for the mainframe.


543
00:31:30,786 --> 00:31:35,916
And then you tell the user
content controller to go ahead


544
00:31:35,916 --> 00:31:40,286
and add the user
scripts, and that's it.


545
00:31:40,556 --> 00:31:43,936
Now, what can user scripts do?


546
00:31:44,076 --> 00:31:47,626
User scripts can do
anything that scripts running


547
00:31:47,626 --> 00:31:48,656
on the web page can do.


548
00:31:49,956 --> 00:31:52,496
So that includes
using the down API


549
00:31:52,736 --> 00:31:54,456
to change the document
structures.


550
00:31:55,996 --> 00:32:00,746
Adding event listeners for
onload events or click events


551
00:32:00,746 --> 00:32:02,266
or keyboard events or any event.


552
00:32:04,156 --> 00:32:06,936
You can load external
resources like images


553
00:32:06,936 --> 00:32:08,776
and even XML-HTTP requests.


554
00:32:10,036 --> 00:32:14,586
And you can also communicate
back to the application,


555
00:32:14,866 --> 00:32:17,036
and this is where
script messages come in.


556
00:32:18,316 --> 00:32:20,656
So script messages are messages


557
00:32:20,746 --> 00:32:24,156
that user scripts send
to the application.


558
00:32:28,116 --> 00:32:33,076
They consist of JSON
data, so objects,


559
00:32:33,076 --> 00:32:35,096
arrays, strings, etcetera.


560
00:32:36,536 --> 00:32:38,356
When you send them
from your web page,


561
00:32:38,806 --> 00:32:40,476
we automatically convert them


562
00:32:40,476 --> 00:32:42,396
to the corresponding
objective C-types.


563
00:32:42,526 --> 00:32:46,616
So N as dictionaries, N as
arrays, N as strings, etcetera.


564
00:32:49,146 --> 00:32:52,156
So when you want to listen for
script messages in your app,


565
00:32:52,276 --> 00:32:54,696
you want to register a
script message handler.


566
00:32:57,366 --> 00:32:59,816
This involves creating
an object that conforms


567
00:32:59,816 --> 00:33:02,166
to the WK script
message handler protocol.


568
00:33:04,276 --> 00:33:06,856
This protocol has 1 method
that you have to implement


569
00:33:07,136 --> 00:33:08,586
that receives script message.


570
00:33:08,926 --> 00:33:13,906
And then you tell the
user content controller


571
00:33:14,066 --> 00:33:17,146
to add the script message
handler and you give it a name.


572
00:33:17,536 --> 00:33:20,656
And this name is
really important


573
00:33:20,926 --> 00:33:25,316
because it is how your web
page communicates back to you.


574
00:33:26,876 --> 00:33:29,706
So when you've added a
script message handler,


575
00:33:30,036 --> 00:33:34,066
we express it window dot WebKit
dot message handlers dot your


576
00:33:34,066 --> 00:33:35,986
name dot post message function.


577
00:33:37,796 --> 00:33:40,616
Here's how you use this
post message function.


578
00:33:41,106 --> 00:33:44,776
You get your message in
JSON form from somewhere,


579
00:33:45,306 --> 00:33:49,076
and then you call post message
and you pass along the message.


580
00:33:50,836 --> 00:33:52,776
So on the receiving side,


581
00:33:52,976 --> 00:33:56,656
WebKit will call it
receives script message


582
00:33:56,656 --> 00:33:59,006
on the correct user
script message handler,


583
00:33:59,956 --> 00:34:04,296
and the body property of
the WK script message object


584
00:34:04,296 --> 00:34:06,636
that is passed along here
will have your message


585
00:34:06,636 --> 00:34:07,816
automatically converted.


586
00:34:10,646 --> 00:34:13,755
There are also some other
properties in WK script message,


587
00:34:13,936 --> 00:34:18,876
you can find out which web page
posted the message, and the name


588
00:34:18,876 --> 00:34:20,326
that was used to
post the message.


589
00:34:23,755 --> 00:34:26,866
One interesting thing
about script messages is


590
00:34:27,065 --> 00:34:30,466
that it's just not user scripts
that can send script messages.


591
00:34:30,876 --> 00:34:33,346
Your web page can
also send messages.


592
00:34:35,275 --> 00:34:39,045
This is really cool if you
have a website and an app


593
00:34:39,045 --> 00:34:40,856
and you want the
website to be able


594
00:34:40,856 --> 00:34:42,826
to communicate with your app.


595
00:34:43,476 --> 00:34:46,916
But it also means that if
you have a generic browser


596
00:34:46,916 --> 00:34:49,516
that can load any
website, you don't want


597
00:34:49,516 --> 00:34:53,216
to blindly trust messages that
are posted by these websites.


598
00:34:53,786 --> 00:34:56,196
So make sure you do the
right message validation


599
00:34:56,196 --> 00:34:57,636
and then check that
the object is


600
00:34:57,636 --> 00:35:01,936
of the expected types
and so forth.


601
00:35:02,496 --> 00:35:06,406
So now I'd like to ask Beth
to come up on stage again


602
00:35:06,406 --> 00:35:08,476
and show off WKPedia for iPad.


603
00:35:08,796 --> 00:35:09,126
Beth.


604
00:35:13,516 --> 00:35:15,606
[ Applause ]


605
00:35:16,106 --> 00:35:16,676
>> Thanks, Anders.


606
00:35:17,576 --> 00:35:19,626
So I'll show you
WKPedia for iPad


607
00:35:19,626 --> 00:35:21,866
and then we'll add
some user scripts


608
00:35:21,866 --> 00:35:25,246
and some script messaging to
add these cool new features.


609
00:35:26,596 --> 00:35:30,926
Okay, so back into Xcode, so
I'm using the same Xcode project


610
00:35:31,286 --> 00:35:33,916
for both versions
of WKPedia actually.


611
00:35:34,246 --> 00:35:40,186
So I'm just going to close up
the OS X version, open iOS code,


612
00:35:40,616 --> 00:35:44,316
and switch my scheme to the iOS
scheme, so that now when I build


613
00:35:44,316 --> 00:35:47,806
and run, I'll be building and
running for the iPad simulator.


614
00:35:48,346 --> 00:35:50,386
All right, so let me
show you what we have.


615
00:36:05,056 --> 00:36:08,156
All right, here's
WKPedia for the iPad.


616
00:36:08,156 --> 00:36:11,426
So again, our idea that we
want to use user scripts


617
00:36:11,426 --> 00:36:14,116
for is we want to hide
some of this content,


618
00:36:14,116 --> 00:36:15,436
we're going to hide
this side bar


619
00:36:15,576 --> 00:36:18,096
so that we can maximize
the screen space


620
00:36:18,096 --> 00:36:20,046
on this smaller screen,
and we also want


621
00:36:20,046 --> 00:36:22,676
to hide this table
of contents section.


622
00:36:23,036 --> 00:36:26,356
And then we want to extract
all of the data from the table


623
00:36:26,356 --> 00:36:29,736
of contents section and
put it into a UI table view


624
00:36:29,736 --> 00:36:30,986
that we already have in place.


625
00:36:31,396 --> 00:36:33,326
So we can do this
with two user scripts.


626
00:36:33,636 --> 00:36:37,246
First we will add a user
script to hide the things


627
00:36:37,246 --> 00:36:38,326
on the page that we want hidden.


628
00:36:38,326 --> 00:36:40,686
And then we'll go back and fill


629
00:36:40,686 --> 00:36:42,776
in our UI table view
with another one.


630
00:36:43,946 --> 00:36:47,406
All right, so first I'm going


631
00:36:47,406 --> 00:36:49,916
to add a JavaScript
file to my project.


632
00:36:52,736 --> 00:36:55,916
So I have one here
called hide dot js.


633
00:37:00,436 --> 00:37:03,656
So this is a really
simple JavaScript file.


634
00:37:03,656 --> 00:37:06,636
First I'm creating
a style element


635
00:37:06,636 --> 00:37:09,206
and I'm appending it
into the document.


636
00:37:09,556 --> 00:37:12,086
And the style element, I'm
giving it just three styles.


637
00:37:12,226 --> 00:37:14,966
So we used the Safari
Web Inspector to look


638
00:37:15,206 --> 00:37:17,816
at what the Wikipedia
code looks like right now,


639
00:37:17,816 --> 00:37:20,166
and we saw that the table
of contents that we want


640
00:37:20,166 --> 00:37:22,456
to hide has a class name of TOC.


641
00:37:22,636 --> 00:37:25,566
So I'm adding another
style to that class.


642
00:37:25,886 --> 00:37:29,276
I'm setting it to display none,
and I'm making that important


643
00:37:29,276 --> 00:37:33,166
so that it will override any
other display styles they have


644
00:37:33,166 --> 00:37:33,706
set on it.


645
00:37:34,146 --> 00:37:38,176
And the side panel has an ID
of NW panel, so I'm setting


646
00:37:38,176 --> 00:37:39,486
that to display none as well.


647
00:37:39,936 --> 00:37:42,606
And finally, I just want to
adjust the margin on the content


648
00:37:42,746 --> 00:37:44,786
to make sure it fills
in that extra area now


649
00:37:44,786 --> 00:37:45,996
that the side panel's gone.


650
00:37:46,436 --> 00:37:49,926
Okay, so this is the JavaScript
that I want my app to invoke.


651
00:37:49,926 --> 00:37:54,226
So now we just need to add
some code to invoke it.


652
00:37:54,566 --> 00:37:58,016
So WebView controller,
this is my main class


653
00:37:58,016 --> 00:37:59,536
in my iPad version.


654
00:37:59,946 --> 00:38:02,316
You'll see this is where
again we have a property


655
00:38:02,316 --> 00:38:05,096
for our WKWebView should
look awfully familiar.


656
00:38:06,856 --> 00:38:11,356
So here I have a currently empty
method called add user scripts


657
00:38:11,356 --> 00:38:12,546
to content controller.


658
00:38:12,546 --> 00:38:15,596
So you can see this is
invoked from load view.


659
00:38:15,996 --> 00:38:19,186
So and then it's passing in
the WK user content controller,


660
00:38:19,186 --> 00:38:20,786
which is a part of
the configuration.


661
00:38:20,786 --> 00:38:23,486
So Anders mentioned the
configuration earlier


662
00:38:23,486 --> 00:38:24,766
on in the talk.


663
00:38:24,766 --> 00:38:26,466
So user scripts are an example


664
00:38:26,466 --> 00:38:28,246
of something that's part
of the configuration.


665
00:38:28,246 --> 00:38:31,356
So that's an example of why you
want your different WKWebViews


666
00:38:31,556 --> 00:38:34,296
to share a configuration, so
they all get the user scripts.


667
00:38:34,456 --> 00:38:39,276
All right, so let's
invoke this script.


668
00:38:39,716 --> 00:38:41,796
It's just three lines of code,


669
00:38:41,796 --> 00:38:43,786
so first we're creating
an N S string


670
00:38:43,936 --> 00:38:46,666
with the contents
of URL hide dot js.


671
00:38:46,666 --> 00:38:49,936
So we're going to take that file
that I just added to the project


672
00:38:50,236 --> 00:38:51,856
and turn it into an N S string.


673
00:38:52,386 --> 00:38:57,906
Then I'm creating a WK user
script object with that string.


674
00:38:57,906 --> 00:38:59,866
I'm giving it an injection time


675
00:39:00,116 --> 00:39:03,736
of WK script injection
time at document start.


676
00:39:03,876 --> 00:39:05,626
So this means this
script will be injected


677
00:39:05,626 --> 00:39:09,146
and it will run right after
the document element is created


678
00:39:09,146 --> 00:39:10,466
before anything else happens.


679
00:39:10,466 --> 00:39:12,866
That's good, that's what I
want to happen for this script,


680
00:39:12,866 --> 00:39:14,966
because I want to make
sure those styles are there


681
00:39:14,966 --> 00:39:15,576
right away.


682
00:39:15,576 --> 00:39:18,446
I don't want the chance
for the table of contents


683
00:39:18,446 --> 00:39:20,856
and the side bar to appear and
only then does my script run,


684
00:39:20,856 --> 00:39:21,866
so then they disappear.


685
00:39:22,126 --> 00:39:22,896
That would be terrible.


686
00:39:22,896 --> 00:39:24,706
So document start,
that's what I want.


687
00:39:24,706 --> 00:39:26,196
And yeah, for the
mainframe only.


688
00:39:26,736 --> 00:39:29,346
Okay, then finally I just
need to add the user script


689
00:39:29,736 --> 00:39:31,126
to the user content controller,


690
00:39:31,126 --> 00:39:33,626
and that should be
all I have to do.


691
00:39:33,626 --> 00:39:35,236
So let's build and run.


692
00:39:44,396 --> 00:39:47,966
And success, the side panel is
gone, it's not longer there.


693
00:39:47,966 --> 00:39:51,396
We just have the article taking
up the full width of the page.


694
00:39:51,726 --> 00:39:55,406
And we also have hidden the
table of contents section,


695
00:39:55,406 --> 00:39:57,086
we go right into
the history section.


696
00:39:57,466 --> 00:40:01,146
Awesome. So now let's
add a second user script


697
00:40:01,436 --> 00:40:04,186
to get the data from that
table of contents section,


698
00:40:04,396 --> 00:40:05,926
put it into our UI table view.


699
00:40:08,866 --> 00:40:12,946
So first we'll add a second
JavaScript file to our project.


700
00:40:17,206 --> 00:40:20,376
So this goes through to that
table of contents section,


701
00:40:20,536 --> 00:40:23,186
it bundles up all the data we
want, puts it into an array,


702
00:40:23,366 --> 00:40:25,146
and then it sends it -- this
is the important part --


703
00:40:25,146 --> 00:40:27,766
it sends it as a
message back to my app.


704
00:40:28,416 --> 00:40:30,276
So let's make sure
this code gets invoked,


705
00:40:30,276 --> 00:40:32,126
and then I'll show
you the code that runs


706
00:40:32,126 --> 00:40:36,766
when the JavaScript
sends the message back.


707
00:40:36,996 --> 00:40:39,016
So back here in my
add user scripts


708
00:40:39,016 --> 00:40:42,196
to content controller method,
I'll add a little bit more code.


709
00:40:45,896 --> 00:40:50,686
Okay, I'm creating another N S
string with the contents of URL.


710
00:40:50,856 --> 00:40:54,066
This time it's with
my fetch dot js class.


711
00:40:54,206 --> 00:40:56,996
So we're putting that
JavaScript into an NS string,


712
00:40:57,256 --> 00:41:00,776
then creating a WK user
script with that string.


713
00:41:01,066 --> 00:41:02,956
And this one I want
to be injected


714
00:41:02,956 --> 00:41:04,496
at the document end time.


715
00:41:04,756 --> 00:41:07,726
So this time I want to make sure
that the DOM has been built up,


716
00:41:08,036 --> 00:41:11,126
that it has all of those
elements representing the table


717
00:41:11,126 --> 00:41:13,186
of contents in it
before my script runs.


718
00:41:13,186 --> 00:41:15,106
Otherwise, it's not
going to find anything.


719
00:41:16,296 --> 00:41:18,066
And again, for the
mainframe only,


720
00:41:18,286 --> 00:41:19,776
I'll add that as a user script


721
00:41:19,776 --> 00:41:23,156
and then this is an important
line of code I need to call this


722
00:41:23,156 --> 00:41:26,486
so the JavaScript can
call back into my app.


723
00:41:26,486 --> 00:41:29,396
So add script message
handler, set it to self,


724
00:41:29,396 --> 00:41:31,356
and give it a name, did
fetch table of contents.


725
00:41:31,736 --> 00:41:33,916
So when the JavaScript
calls back into my app,


726
00:41:33,916 --> 00:41:38,136
I'll make this a little
wider, this is the method


727
00:41:38,286 --> 00:41:41,476
that will be called, did
receive script message.


728
00:41:41,836 --> 00:41:44,706
So what I'm doing in that
method is I'm making sure


729
00:41:44,706 --> 00:41:47,476
that this is the script that
I'm expecting to be calling,


730
00:41:47,476 --> 00:41:49,056
it did fetch table of contents.


731
00:41:49,556 --> 00:41:53,566
And if so, I'm calling
into my UI table view class


732
00:41:54,286 --> 00:41:56,026
with a method that
I've written there.


733
00:41:56,026 --> 00:41:57,496
So I'll show that to you.


734
00:41:57,926 --> 00:42:03,496
So here in my UI table
view code, I'm just going


735
00:42:03,496 --> 00:42:06,976
to make sure that this
message body this is the data


736
00:42:06,976 --> 00:42:09,006
that was sent to me
straight from the JavaScript,


737
00:42:09,146 --> 00:42:10,126
making sure it's an array


738
00:42:10,126 --> 00:42:11,796
because that's what
I'm expecting.


739
00:42:12,006 --> 00:42:15,536
Then I call make entries, which
is implemented right up here.


740
00:42:15,536 --> 00:42:18,476
And I go through that array and
I make sure it's all the data


741
00:42:18,476 --> 00:42:19,756
that I'm expecting it to be,


742
00:42:19,756 --> 00:42:21,916
that I've written my
script to send over.


743
00:42:22,196 --> 00:42:24,106
It's a string representing
the title.


744
00:42:24,326 --> 00:42:26,806
It's the URL representing
the URL


745
00:42:26,806 --> 00:42:28,656
that that title would
navigate to so


746
00:42:28,656 --> 00:42:30,696
that we can have our
app navigate to that URL


747
00:42:30,936 --> 00:42:34,046
when the user taps on it.


748
00:42:34,046 --> 00:42:37,006
And if I have all of that
data like I'm expecting it,


749
00:42:37,006 --> 00:42:40,656
I create a table of contents
entry and I add it to an array.


750
00:42:40,876 --> 00:42:44,316
And then finally back here this
is where I invoked that method,


751
00:42:44,316 --> 00:42:46,236
I'm going to tell the table view


752
00:42:46,236 --> 00:42:47,726
to reload its data
at this point.


753
00:42:47,726 --> 00:42:50,226
And then that data should
all be in there, okay.


754
00:42:51,176 --> 00:42:55,696
So set this all up,
let's see if it works.


755
00:42:55,696 --> 00:42:57,496
Let's build and run.


756
00:43:05,346 --> 00:43:08,646
So here we are, WKPedia, every
thing's hidden still, great.


757
00:43:09,226 --> 00:43:11,916
Contents did not
quite work, all right.


758
00:43:12,046 --> 00:43:16,536
So I suspect that I have
a bug in my JavaScript,


759
00:43:17,076 --> 00:43:19,576
and one thing that's
really cool is


760
00:43:19,576 --> 00:43:22,606
that I can actually inspect
all of the web content


761
00:43:22,606 --> 00:43:26,226
in my WKWebView using
the Safari web inspector.


762
00:43:26,666 --> 00:43:28,416
I can even inspect
the user scripts


763
00:43:28,416 --> 00:43:30,056
that I've injected,
which is pretty cool.


764
00:43:30,476 --> 00:43:32,956
But don't worry, only you
can do this with your app,


765
00:43:33,086 --> 00:43:34,886
other people won't be
able to inspect your app.


766
00:43:35,876 --> 00:43:38,066
So let me open the inspector.


767
00:43:40,296 --> 00:43:43,026
Let's make sure this
happens on all pages.


768
00:43:43,026 --> 00:43:48,516
Go to a new page, still no
table of contents, okay.


769
00:43:54,096 --> 00:43:54,896
So.


770
00:44:02,386 --> 00:44:05,396
Here, if I go over into
my resources panel,


771
00:44:06,106 --> 00:44:08,666
here let me zoom
this in for actually.


772
00:44:08,666 --> 00:44:12,396
You can see that I have
my user scripts over here


773
00:44:13,026 --> 00:44:14,656
under the extra scripts section.


774
00:44:14,966 --> 00:44:18,966
So under user script 2, this
is the script I want to look


775
00:44:18,966 --> 00:44:20,606
at so I can add a
breakpoint there


776
00:44:20,606 --> 00:44:22,436
and just reload right
in the inspector.


777
00:44:22,726 --> 00:44:25,506
All right, let's
get rid of that.


778
00:44:25,806 --> 00:44:28,966
Okay, let's step through
to OC links, all right.


779
00:44:29,016 --> 00:44:30,276
Do we get into the loop?


780
00:44:30,276 --> 00:44:35,246
We do. Great, we get the
texts, not a text break.


781
00:44:35,486 --> 00:44:38,146
Okay, well, there's the bug,
we had 2 breaks in a row


782
00:44:38,146 --> 00:44:39,996
so we never got to the
code that added any


783
00:44:39,996 --> 00:44:41,156
of this data to an array.


784
00:44:41,526 --> 00:44:45,076
So this should be an easy bug
to fix now that I've spotted it.


785
00:44:46,196 --> 00:44:47,846
So let's go back into Xcode.


786
00:44:47,846 --> 00:44:48,956
There she is, all right,
let's build and run.


787
00:45:04,196 --> 00:45:06,776
Yes, we have our
table of contents.


788
00:45:07,126 --> 00:45:10,176
So now I have our
table of contents.


789
00:45:10,836 --> 00:45:15,056
If I click around here, I'll
navigate to the right section


790
00:45:15,056 --> 00:45:17,526
of the document because I
was sure to include that data


791
00:45:17,526 --> 00:45:19,556
when I passed it
back from the script.


792
00:45:20,216 --> 00:45:21,536
And there you have it.


793
00:45:22,136 --> 00:45:27,046
So today we've built a
dedicated Wikipedia browser app


794
00:45:27,106 --> 00:45:29,186
for Mac and for iOS.


795
00:45:29,536 --> 00:45:31,336
We've added some
advanced features


796
00:45:31,336 --> 00:45:33,786
to make our app interact
with our web content.


797
00:45:34,026 --> 00:45:36,376
And we've done it all with
the modern WebKit API.


798
00:45:36,806 --> 00:45:40,976
So that's all I have for you,
I'll hand it back to Anders now.


799
00:45:41,046 --> 00:45:41,826
>> Thanks, Beth.


800
00:45:42,076 --> 00:45:44,976
Wow, this is really going to
make my Wikipedia browsing


801
00:45:45,026 --> 00:45:46,986
so much more efficient
on my way to work.


802
00:45:47,646 --> 00:45:53,666
So the Modern WebKit
API available for iOS 8


803
00:45:54,096 --> 00:45:58,306
and OS X Yosemite same
API on both platforms.


804
00:45:59,996 --> 00:46:02,656
You get the full
JavaScript Nitro engine,


805
00:46:02,746 --> 00:46:04,736
including the fourth
tier compiler.


806
00:46:06,326 --> 00:46:13,136
It's multi-process, which
is great for responsiveness


807
00:46:13,136 --> 00:46:15,046
and also for battery life.


808
00:46:16,116 --> 00:46:21,036
And with user script and script
messages, web pages can talk


809
00:46:21,036 --> 00:46:22,586
to your app and vice versa.


810
00:46:24,586 --> 00:46:28,666
Now, we've only shown a
handful of classes here,


811
00:46:29,176 --> 00:46:32,166
but the Modern WebKit API
has much more to offer.


812
00:46:34,836 --> 00:46:39,926
So here's what I want you to
do, adopt the Modern WebKit API.


813
00:46:40,726 --> 00:46:42,856
If you're thinking
of writing a new app,


814
00:46:44,066 --> 00:46:47,666
I would strongly consider
using the new API.


815
00:46:49,916 --> 00:46:53,066
If you already have an app
that is using either UIWebView


816
00:46:53,296 --> 00:46:56,706
or WebView, don't worry,
those API's are still there.


817
00:46:57,116 --> 00:47:00,976
But we are committed to this
new API, the Modern WebKit API,


818
00:47:01,416 --> 00:47:06,466
and some features, like faster
JavaScript are only available


819
00:47:06,466 --> 00:47:09,576
in the new API.


820
00:47:09,576 --> 00:47:13,026
And since this is a new
API, we would really love


821
00:47:13,026 --> 00:47:17,886
to hear what you think about it,
so buy radars, come to the labs,


822
00:47:17,886 --> 00:47:22,086
bring your code, post
in the developer forums.


823
00:47:23,806 --> 00:47:27,046
If you want to contact our
frameworks evangelism team,


824
00:47:27,046 --> 00:47:28,756
you can do so at
this email address.


825
00:47:29,116 --> 00:47:31,846
There's more information
on WebKit and Safari


826
00:47:31,846 --> 00:47:33,226
on the Safari Dev Center.


827
00:47:33,726 --> 00:47:35,616
And the Modern WebKit
API is part


828
00:47:35,616 --> 00:47:37,666
of the WebKit Open Source
Project, so you can go


829
00:47:37,666 --> 00:47:39,216
to WebKit.org and check it out.


830
00:47:39,676 --> 00:47:44,406
You can also go to the developer
forums and post your questions


831
00:47:44,606 --> 00:47:48,036
and we'll make sure
to answer them.


832
00:47:48,206 --> 00:47:52,906
Related sessions, if you have an
app and a website and you want


833
00:47:52,906 --> 00:47:54,586
to make sure they work together,


834
00:47:54,886 --> 00:47:57,566
there's a great session this
afternoon called Your App,


835
00:47:57,566 --> 00:47:58,996
Your Website, and Safari.


836
00:48:00,226 --> 00:48:03,346
On Thursday, there's a session
about the web inspector.


837
00:48:03,526 --> 00:48:06,616
And on Friday morning, there's
a really interesting session


838
00:48:06,616 --> 00:48:10,476
where engineers on the iWork
team talk about best practices


839
00:48:10,476 --> 00:48:13,156
for sharing code
between iOS and OS X.


840
00:48:13,206 --> 00:48:15,666
And thank you very
much for coming.


841
00:48:16,156 --> 00:48:16,856
Thanks

