1
00:00:07,016 --> 00:00:15,500
[ Music ]


2
00:00:19,566 --> 00:00:20,666
>> Hey guys!


3
00:00:21,436 --> 00:00:21,976
>> Good afternoon.


4
00:00:27,796 --> 00:00:29,846
Welcome to Adding Delight to


5
00:00:29,846 --> 00:00:30,556
your iOS App.


6
00:00:31,686 --> 00:00:32,426
My name's Ben.


7
00:00:32,586 --> 00:00:33,946
>> And, my name is Peter.


8
00:00:34,036 --> 00:00:35,296
And, we're going to show you six


9
00:00:35,326 --> 00:00:37,046
pro tips to make it magic.


10
00:00:38,016 --> 00:00:39,216
>> We're going to start with


11
00:00:39,216 --> 00:00:40,666
external display support,


12
00:00:41,536 --> 00:00:42,926
bringing your app's experiences


13
00:00:42,926 --> 00:00:43,876
to the big screen.


14
00:00:45,756 --> 00:00:47,316
>> Next, we're going to go


15
00:00:47,316 --> 00:00:49,196
through a brand-new programming


16
00:00:49,196 --> 00:00:50,396
pattern for you, called


17
00:00:50,396 --> 00:00:51,186
layout-driven UI.


18
00:00:52,206 --> 00:00:53,836
>> Then, we're going to show you


19
00:00:53,986 --> 00:00:55,376
how to get your customers to


20
00:00:55,376 --> 00:00:56,766
your delightful experiences as


21
00:00:56,766 --> 00:00:58,226
fast as possible, with


22
00:00:58,226 --> 00:00:59,466
laser-fast launches.


23
00:01:00,346 --> 00:01:01,596
>> We're going to focus hard on


24
00:01:01,596 --> 00:01:03,106
smooth scrolling, and keeping


25
00:01:03,106 --> 00:01:04,536
things feeling great.


26
00:01:05,676 --> 00:01:06,966
>> Continuity is one of the most


27
00:01:06,966 --> 00:01:08,546
magical experiences on iOS.


28
00:01:08,546 --> 00:01:09,656
And, we're going to show you


29
00:01:09,656 --> 00:01:11,066
just how easy it is to adopt


30
00:01:11,166 --> 00:01:12,766
Handoff in your applications.


31
00:01:13,706 --> 00:01:15,066
>> And, finally, we're going to


32
00:01:15,066 --> 00:01:16,906
teach you some Matrix-level


33
00:01:16,906 --> 00:01:18,566
debugging skills, in debugging


34
00:01:18,666 --> 00:01:19,316
like a pro.


35
00:01:20,306 --> 00:01:21,426
>> We have a lot to cover, so


36
00:01:21,426 --> 00:01:21,966
let's get started.


37
00:01:28,276 --> 00:01:31,166
iOS devices are defined by their


38
00:01:31,166 --> 00:01:33,416
stunning, integrated displays.


39
00:01:34,046 --> 00:01:36,846
And, you can bring your app's


40
00:01:36,846 --> 00:01:39,176
experience even further, by


41
00:01:39,176 --> 00:01:41,026
adding support for an external


42
00:01:41,026 --> 00:01:41,446
display.


43
00:01:42,016 --> 00:01:45,196
We've built a demo app to help


44
00:01:45,196 --> 00:01:45,926
illustrate this.


45
00:01:47,236 --> 00:01:49,546
Built right into iOS, is Display


46
00:01:49,546 --> 00:01:51,236
Mirroring, which replicates the


47
00:01:51,236 --> 00:01:53,776
entire system UI on the external


48
00:01:54,136 --> 00:01:55,016
connected display.


49
00:01:56,196 --> 00:01:58,046
Here's our demo app.


50
00:01:58,046 --> 00:01:59,076
As you can see, it's a simple


51
00:01:59,076 --> 00:01:59,786
photo viewer.


52
00:02:00,346 --> 00:02:01,256
When you tap on a photo


53
00:02:01,256 --> 00:02:03,626
thumbnail, the photo slides in,


54
00:02:03,706 --> 00:02:04,586
and it's full screen.


55
00:02:05,496 --> 00:02:07,556
And, this entire experience is


56
00:02:07,556 --> 00:02:09,166
replicated on the external


57
00:02:09,166 --> 00:02:09,566
display.


58
00:02:10,166 --> 00:02:12,646
To take full advantage of the


59
00:02:12,646 --> 00:02:14,606
size of the external display, we


60
00:02:14,606 --> 00:02:15,716
can rotate the iPhone to


61
00:02:15,716 --> 00:02:17,146
landscape to fill it up.


62
00:02:17,146 --> 00:02:20,916
And, this is great, with no work


63
00:02:20,916 --> 00:02:22,506
on our part, we were able to get


64
00:02:22,506 --> 00:02:23,276
this experience.


65
00:02:23,746 --> 00:02:27,136
But, we can do better than this.


66
00:02:28,506 --> 00:02:30,316
Built right into iOS, are APIs


67
00:02:30,316 --> 00:02:32,036
that allow you to create an


68
00:02:32,036 --> 00:02:34,576
entirely custom, second user


69
00:02:34,576 --> 00:02:36,446
interface on this externally


70
00:02:36,446 --> 00:02:36,976
connected display.


71
00:02:39,296 --> 00:02:40,766
Let's take a look at a couple of


72
00:02:40,766 --> 00:02:43,246
examples of apps that have done


73
00:02:45,296 --> 00:02:45,396
this.


74
00:02:45,606 --> 00:02:47,386
Keynote is a great example.


75
00:02:48,206 --> 00:02:49,856
On the external display, you


76
00:02:49,856 --> 00:02:51,996
remain focused on the primary


77
00:02:51,996 --> 00:02:52,796
slide at hand.


78
00:02:53,786 --> 00:02:55,106
But, on the integrated iPhone


79
00:02:55,106 --> 00:02:56,836
display, you can see presenter


80
00:02:56,836 --> 00:02:59,166
notes, and the next slide, tools


81
00:02:59,166 --> 00:03:01,026
essential to any presentation.


82
00:03:01,536 --> 00:03:04,126
Or, maybe you have a game.


83
00:03:05,496 --> 00:03:06,816
But, typically you'd have soft,


84
00:03:06,816 --> 00:03:07,986
overlaid controls.


85
00:03:08,966 --> 00:03:09,746
Well, you could create an


86
00:03:09,746 --> 00:03:11,756
entirely custom interface to


87
00:03:11,756 --> 00:03:14,106
control your game, and put that


88
00:03:14,106 --> 00:03:17,546
on the iOS device's display, and


89
00:03:17,546 --> 00:03:19,376
have your full, unobstructed and


90
00:03:19,376 --> 00:03:21,326
immersive gaming experience on


91
00:03:21,326 --> 00:03:22,276
the external display.


92
00:03:22,806 --> 00:03:27,536
When designing your applications


93
00:03:27,606 --> 00:03:30,016
for an external display, there


94
00:03:30,016 --> 00:03:31,066
are some key things that you


95
00:03:31,066 --> 00:03:32,506
should think about.


96
00:03:33,556 --> 00:03:35,386
Aside from the obvious size


97
00:03:35,386 --> 00:03:38,106
differences, your iPhone is


98
00:03:38,186 --> 00:03:38,736
personal.


99
00:03:39,496 --> 00:03:40,626
And so, you should consider the


100
00:03:40,626 --> 00:03:41,616
kind of information that you


101
00:03:41,616 --> 00:03:43,696
show on this display as private.


102
00:03:44,156 --> 00:03:46,896
Whereas, the external display


103
00:03:47,166 --> 00:03:49,056
will typically be situated in an


104
00:03:49,056 --> 00:03:50,586
environment where many people


105
00:03:50,586 --> 00:03:52,696
can see it, such as a TV in a


106
00:03:52,696 --> 00:03:54,806
living room, or a projection


107
00:03:54,806 --> 00:03:55,946
system in a conference hall.


108
00:03:57,666 --> 00:03:58,706
So, you should assume that the


109
00:03:58,706 --> 00:04:00,066
information shown on this


110
00:04:00,066 --> 00:04:02,126
display is public.


111
00:04:02,956 --> 00:04:04,416
>> Additionally, while the


112
00:04:04,416 --> 00:04:06,186
displays built into iPhone and


113
00:04:06,276 --> 00:04:08,406
iPad are interactive, the


114
00:04:08,406 --> 00:04:10,096
external display is not.


115
00:04:10,246 --> 00:04:12,656
So, you should avoid showing UI


116
00:04:12,656 --> 00:04:14,326
elements, or other interactable


117
00:04:14,326 --> 00:04:15,856
controls on the external


118
00:04:15,856 --> 00:04:16,276
display.


119
00:04:16,856 --> 00:04:19,526
>> So, let's apply this kind of


120
00:04:19,606 --> 00:04:21,685
thinking to our demo app, and


121
00:04:21,685 --> 00:04:24,086
see what we can come up with.


122
00:04:24,266 --> 00:04:26,316
Here's our optimized version for


123
00:04:26,316 --> 00:04:27,206
the external display.


124
00:04:28,516 --> 00:04:29,636
As you can see, we're now


125
00:04:29,636 --> 00:04:32,356
showing the selected photo full


126
00:04:32,356 --> 00:04:34,326
size on the external display.


127
00:04:34,326 --> 00:04:36,886
And, on the integrated display,


128
00:04:37,316 --> 00:04:38,206
we're showing just the


129
00:04:38,256 --> 00:04:39,816
thumbnails, and a new selection


130
00:04:39,816 --> 00:04:41,896
indicator to show the photo that


131
00:04:41,896 --> 00:04:43,086
is currently being shown full


132
00:04:43,086 --> 00:04:43,496
screen.


133
00:04:45,096 --> 00:04:46,886
While simple, this is a really


134
00:04:46,926 --> 00:04:49,386
powerful use of this design.


135
00:04:50,616 --> 00:04:52,166
To show you how we built this


136
00:04:52,166 --> 00:04:53,736
into our demo app, we're going


137
00:04:53,736 --> 00:04:54,886
to cover three topics.


138
00:04:56,176 --> 00:04:58,716
Connectivity, behavior, and


139
00:04:58,716 --> 00:04:59,886
connection transitions.


140
00:05:01,256 --> 00:05:02,566
Let's start with connectivity.


141
00:05:03,506 --> 00:05:05,146
How do you know if you have an


142
00:05:05,146 --> 00:05:06,446
external display connected?


143
00:05:07,836 --> 00:05:10,236
UIScreen has a class variable,


144
00:05:10,236 --> 00:05:12,076
screens, which contains a list


145
00:05:12,076 --> 00:05:13,576
of all the connected displays,


146
00:05:13,576 --> 00:05:15,226
including the device, built into


147
00:05:15,226 --> 00:05:15,506
the iPhone.


148
00:05:15,556 --> 00:05:18,256
So, if there's more than one


149
00:05:18,376 --> 00:05:20,596
element in this array, you know


150
00:05:20,596 --> 00:05:21,946
you have an external display


151
00:05:21,946 --> 00:05:22,526
connected.


152
00:05:24,296 --> 00:05:26,446
Additionally, because the


153
00:05:26,446 --> 00:05:27,556
external display can be


154
00:05:27,556 --> 00:05:29,366
connected and disconnected at


155
00:05:29,486 --> 00:05:31,986
will, UIKit will post


156
00:05:31,986 --> 00:05:33,666
notifications to help you know


157
00:05:33,666 --> 00:05:34,476
when this happens.


158
00:05:34,476 --> 00:05:36,576
So, you should listen for the


159
00:05:36,576 --> 00:05:37,356
UIScreen


160
00:05:37,616 --> 00:05:39,676
.didConnectNotification, and the


161
00:05:39,676 --> 00:05:40,296
UIScreen


162
00:05:40,296 --> 00:05:41,846
.didDisconnectNotifications.


163
00:05:42,446 --> 00:05:43,976
And, bring up and tear down your


164
00:05:43,976 --> 00:05:44,566
UI accordingly.


165
00:05:46,216 --> 00:05:47,346
Peter, can you show our


166
00:05:47,346 --> 00:05:48,836
developers just how easy it is


167
00:05:48,836 --> 00:05:49,856
to set up a second user


168
00:05:49,856 --> 00:05:50,286
interface?


169
00:05:50,856 --> 00:05:52,416
>> Ben, I'd be happy to.


170
00:05:52,836 --> 00:05:54,476
Let's jump into our code for our


171
00:05:54,476 --> 00:05:56,466
UIScreen connection callback.


172
00:05:57,776 --> 00:05:59,626
Here, we'll set a local variable


173
00:05:59,786 --> 00:06:01,086
to the last screen in the


174
00:06:01,086 --> 00:06:01,826
screens array.


175
00:06:02,416 --> 00:06:03,506
We know that this is the


176
00:06:03,506 --> 00:06:05,186
external screen, because we're


177
00:06:05,186 --> 00:06:05,686
inside of our


178
00:06:05,686 --> 00:06:07,696
didConnectNotification callback.


179
00:06:08,626 --> 00:06:10,926
Next, we'll make a new UI window


180
00:06:10,926 --> 00:06:12,186
to show on this external


181
00:06:12,186 --> 00:06:12,676
display.


182
00:06:12,676 --> 00:06:14,936
And, we'll assign its screen


183
00:06:14,936 --> 00:06:16,786
property to the screen.


184
00:06:17,266 --> 00:06:18,436
Next, we're going to want to


185
00:06:18,436 --> 00:06:19,906
make sure we set up this window.


186
00:06:20,356 --> 00:06:21,456
We factored this into a


187
00:06:21,456 --> 00:06:23,146
function, but all we're doing


188
00:06:23,146 --> 00:06:24,276
here is making a root view


189
00:06:24,276 --> 00:06:25,786
controller, and sticking it on


190
00:06:25,786 --> 00:06:27,856
the window, the same way we'd do


191
00:06:27,856 --> 00:06:29,146
for the onboard display.


192
00:06:29,896 --> 00:06:31,416
And, finally, we're going to


193
00:06:31,416 --> 00:06:33,436
mark this window as not hidden


194
00:06:33,566 --> 00:06:34,816
to show it on the external


195
00:06:34,816 --> 00:06:35,236
screen.


196
00:06:36,316 --> 00:06:37,386
So, that's connection.


197
00:06:37,756 --> 00:06:38,476
Now, let's look at


198
00:06:38,476 --> 00:06:39,956
disconnection, which is even


199
00:06:39,956 --> 00:06:40,496
easier.


200
00:06:41,326 --> 00:06:42,536
So, here we are inside of our


201
00:06:42,536 --> 00:06:43,436
UIScreen


202
00:06:43,506 --> 00:06:45,226
.didDisconnectNotification


203
00:06:45,226 --> 00:06:47,066
handler, and all we have to do


204
00:06:47,066 --> 00:06:49,486
here is hide the window, and nil


205
00:06:49,486 --> 00:06:50,826
out our local reference to it,


206
00:06:50,976 --> 00:06:52,366
to free up any resources.


207
00:06:52,366 --> 00:06:53,296
And, that's it.


208
00:06:53,296 --> 00:06:54,636
We've implemented screen


209
00:06:54,636 --> 00:06:56,266
connection and disconnection in


210
00:06:56,266 --> 00:06:56,596
our app.


211
00:06:57,236 --> 00:06:58,256
>> Wow, Peter, that was really


212
00:06:58,256 --> 00:06:58,696
easy.


213
00:07:00,376 --> 00:07:01,476
The next thing you're going to


214
00:07:01,476 --> 00:07:03,386
want to think about is changing


215
00:07:03,386 --> 00:07:04,686
your app's default behavior for


216
00:07:05,186 --> 00:07:06,616
when it has an external display


217
00:07:06,616 --> 00:07:07,106
connected.


218
00:07:07,106 --> 00:07:10,276
Let's look at an example of some


219
00:07:10,276 --> 00:07:12,266
code from our demo app.


220
00:07:13,256 --> 00:07:14,466
This is the code that's called


221
00:07:14,496 --> 00:07:16,216
when we tap on a photo in your


222
00:07:16,216 --> 00:07:16,806
collection view.


223
00:07:17,326 --> 00:07:19,436
When we're in single display


224
00:07:19,436 --> 00:07:21,236
mode, we create our


225
00:07:21,236 --> 00:07:23,186
photoViewController and push it


226
00:07:23,296 --> 00:07:24,396
onto our navigation stack.


227
00:07:25,576 --> 00:07:26,766
But, when we have an external


228
00:07:26,766 --> 00:07:28,596
display connected, we're already


229
00:07:28,596 --> 00:07:29,966
showing that photoViewController


230
00:07:30,026 --> 00:07:31,886
full screen in that second UI,


231
00:07:32,576 --> 00:07:34,466
so we just tell it to present


232
00:07:34,466 --> 00:07:35,066
that photo.


233
00:07:35,746 --> 00:07:37,046
Really easy.


234
00:07:37,836 --> 00:07:39,356
The third thing you should think


235
00:07:39,356 --> 00:07:40,976
about when designing for an


236
00:07:40,976 --> 00:07:43,616
external display is you should


237
00:07:43,616 --> 00:07:45,476
handle connection changes with


238
00:07:45,476 --> 00:07:46,556
graceful transitions.


239
00:07:47,046 --> 00:07:50,366
Let's go back to our demo app to


240
00:07:50,366 --> 00:07:51,006
illustrate this.


241
00:07:52,846 --> 00:07:54,776
Here you can see our demo app is


242
00:07:54,856 --> 00:07:56,056
currently showing a photo full


243
00:07:56,056 --> 00:07:56,446
size.


244
00:07:57,056 --> 00:07:58,436
And, we haven't yet connected


245
00:07:58,436 --> 00:07:59,496
the external display yet.


246
00:08:00,796 --> 00:08:01,736
Watch what happens when we plug


247
00:08:01,736 --> 00:08:01,976
it in.


248
00:08:06,416 --> 00:08:08,216
What happened here, is we popped


249
00:08:08,216 --> 00:08:09,406
our viewController back to the


250
00:08:09,406 --> 00:08:10,546
thumbnail view while


251
00:08:10,656 --> 00:08:12,616
simultaneously showing that


252
00:08:12,616 --> 00:08:14,546
previously selected photo full


253
00:08:14,546 --> 00:08:16,286
size on the external display.


254
00:08:16,286 --> 00:08:19,846
And, it's these graceful


255
00:08:19,846 --> 00:08:21,466
transitions that really help


256
00:08:21,466 --> 00:08:23,546
preserve the context, and help


257
00:08:23,546 --> 00:08:24,926
your customers understand where


258
00:08:24,926 --> 00:08:26,136
they are in your app's flow.


259
00:08:26,676 --> 00:08:29,416
So, that's external display


260
00:08:29,416 --> 00:08:29,916
support.


261
00:08:30,416 --> 00:08:31,846
It's really easy to set up.


262
00:08:32,635 --> 00:08:33,736
Just consider the different


263
00:08:33,736 --> 00:08:35,316
display contexts when designing


264
00:08:35,316 --> 00:08:37,395
your application, and be sure to


265
00:08:37,395 --> 00:08:38,426
handle connection changes


266
00:08:38,426 --> 00:08:38,996
gracefully.


267
00:08:40,226 --> 00:08:41,976
To learn more about this, check


268
00:08:41,976 --> 00:08:44,596
out this talk from WWDC 2011.


269
00:08:44,596 --> 00:08:44,876
Thank you.


270
00:08:45,516 --> 00:08:51,256
[ Applause ]


271
00:08:51,756 --> 00:08:53,586
>> Layout-driven UI is a


272
00:08:53,716 --> 00:08:55,726
powerful way to write your app


273
00:08:56,096 --> 00:08:57,376
to make it easier to add


274
00:08:57,376 --> 00:09:00,176
features, and easier to debug.


275
00:09:01,436 --> 00:09:03,486
Layout-driven UI helps us deal


276
00:09:03,486 --> 00:09:04,996
with the number one cause of


277
00:09:04,996 --> 00:09:07,786
issues in iOS apps, and that's


278
00:09:08,086 --> 00:09:10,026
managing UI complexity.


279
00:09:10,816 --> 00:09:12,226
I'm sure you've been here


280
00:09:12,226 --> 00:09:12,726
before.


281
00:09:12,816 --> 00:09:13,656
I know I have.


282
00:09:14,416 --> 00:09:16,016
You add some code, and a gesture


283
00:09:16,016 --> 00:09:16,636
callback.


284
00:09:17,246 --> 00:09:18,986
You add even more UI update code


285
00:09:19,016 --> 00:09:20,446
in a notification callback.


286
00:09:20,686 --> 00:09:22,376
And, more when you get a value


287
00:09:22,376 --> 00:09:24,376
trigger from a UI control.


288
00:09:25,076 --> 00:09:26,806
And, suddenly your app is in


289
00:09:26,806 --> 00:09:28,176
this weird, and hard to


290
00:09:28,176 --> 00:09:29,206
understand state.


291
00:09:29,986 --> 00:09:30,956
And, you have to follow these


292
00:09:30,956 --> 00:09:32,636
strange orders to reproduce


293
00:09:32,636 --> 00:09:33,966
these unusual bugs.


294
00:09:34,566 --> 00:09:36,026
And, as you add more features to


295
00:09:36,026 --> 00:09:38,186
your app, the problem gets worse


296
00:09:38,256 --> 00:09:38,806
and worse.


297
00:09:40,256 --> 00:09:42,286
If we instead follow a simple


298
00:09:42,286 --> 00:09:44,106
recipe, and push these UI


299
00:09:44,106 --> 00:09:47,706
updates into layout, we can get


300
00:09:47,706 --> 00:09:49,066
rid of these bugs, and make it


301
00:09:49,066 --> 00:09:50,506
much easier to add features.


302
00:09:51,426 --> 00:09:53,226
Let's walk through the recipe


303
00:09:53,476 --> 00:09:54,876
for adding layout-driven UI to


304
00:09:55,146 --> 00:09:56,146
your app.


305
00:09:57,276 --> 00:09:58,576
>> The first thing you should


306
00:09:58,576 --> 00:10:00,586
do, is you need to identify and


307
00:10:00,696 --> 00:10:02,386
track all of the state that


308
00:10:02,546 --> 00:10:03,596
affects your UI.


309
00:10:05,196 --> 00:10:07,356
Then, every time that states


310
00:10:07,356 --> 00:10:09,116
changes, you should dirty the


311
00:10:09,116 --> 00:10:10,476
layout system by calling


312
00:10:10,556 --> 00:10:11,466
setNeedsLayout.


313
00:10:12,696 --> 00:10:15,496
Finally, you'll want to update


314
00:10:15,496 --> 00:10:17,176
your UI with this state in


315
00:10:17,176 --> 00:10:18,006
layoutSubviews.


316
00:10:18,936 --> 00:10:19,826
And, that's it.


317
00:10:20,746 --> 00:10:21,706
>> So, what I love about this


318
00:10:21,706 --> 00:10:23,596
recipe is just how easy it is to


319
00:10:23,596 --> 00:10:24,036
follow.


320
00:10:24,576 --> 00:10:27,276
And, if we apply layout-driven


321
00:10:27,276 --> 00:10:29,216
UI to our app holistically,


322
00:10:30,376 --> 00:10:32,106
while considering the three core


323
00:10:32,106 --> 00:10:33,486
components of an iOS app,


324
00:10:34,196 --> 00:10:36,226
layout, animations, and


325
00:10:36,226 --> 00:10:38,646
gestures, you'll find that our


326
00:10:38,646 --> 00:10:40,226
implementation of all three of


327
00:10:40,226 --> 00:10:43,256
these works harmoniously, in a


328
00:10:43,256 --> 00:10:44,516
really awesome way.


329
00:10:45,956 --> 00:10:47,496
Let's start with layout.


330
00:10:49,556 --> 00:10:51,586
Layout is the process by which


331
00:10:51,586 --> 00:10:53,026
you position your application's


332
00:10:53,026 --> 00:10:54,476
content onscreen.


333
00:10:55,576 --> 00:10:57,056
But, we're also recommending


334
00:10:57,056 --> 00:10:59,446
that you do all other UI updates


335
00:10:59,636 --> 00:11:00,186
in layout.


336
00:11:00,836 --> 00:11:02,606
Let's look at a simple sample


337
00:11:02,606 --> 00:11:03,996
app that we wrote to highlight


338
00:11:03,996 --> 00:11:04,366
this.


339
00:11:04,986 --> 00:11:06,066
Ben, can you take us through


340
00:11:06,066 --> 00:11:06,456
this app?


341
00:11:07,326 --> 00:11:07,836
>> Sure, Peter.


342
00:11:09,166 --> 00:11:10,226
So, there's a really simple


343
00:11:10,226 --> 00:11:11,776
sample app, with this cool guy


344
00:11:11,776 --> 00:11:12,206
in the middle.


345
00:11:12,986 --> 00:11:14,046
He shows when we're feeling


346
00:11:14,046 --> 00:11:14,356
cool.


347
00:11:15,046 --> 00:11:16,496
When we're not, he hides away.


348
00:11:17,806 --> 00:11:18,976
But, we're feeling quite cool


349
00:11:18,976 --> 00:11:19,616
right now, Peter.


350
00:11:19,776 --> 00:11:20,666
So, let's bring him back in.


351
00:11:21,816 --> 00:11:23,716
>> Great. So, while this is a


352
00:11:23,716 --> 00:11:25,666
simple example, it's really


353
00:11:25,666 --> 00:11:27,006
important to walk through, so we


354
00:11:27,006 --> 00:11:28,636
can understand how layout-driven


355
00:11:28,636 --> 00:11:29,476
UI works.


356
00:11:29,756 --> 00:11:31,996
So, let's go through a skeleton


357
00:11:31,996 --> 00:11:34,146
of this app, and follow through


358
00:11:34,326 --> 00:11:36,256
the layout-driven UI recipe that


359
00:11:36,256 --> 00:11:37,306
Ben showed us earlier.


360
00:11:38,276 --> 00:11:40,016
So, here we've got our managing


361
00:11:40,016 --> 00:11:42,046
view that hosts this cool guy


362
00:11:42,046 --> 00:11:43,846
view, in our coolView, which I


363
00:11:43,846 --> 00:11:45,056
wrote ahead of time.


364
00:11:45,946 --> 00:11:47,296
So, Ben, what's the first step


365
00:11:47,296 --> 00:11:47,966
in our recipe?


366
00:11:48,646 --> 00:11:50,126
>> Well, we need to identify and


367
00:11:50,126 --> 00:11:52,386
track that state that affects


368
00:11:52,386 --> 00:11:52,766
our UI.


369
00:11:53,726 --> 00:11:55,116
>> So, remember what Ben said.


370
00:11:55,456 --> 00:11:56,856
The cool guy is there when we're


371
00:11:56,986 --> 00:11:57,986
feeling cool.


372
00:11:57,986 --> 00:11:59,656
And, he's not there when we're


373
00:11:59,656 --> 00:11:59,936
not.


374
00:12:00,816 --> 00:12:01,526
So, I guess we'll have a


375
00:12:01,526 --> 00:12:03,256
variable called feelingCool.


376
00:12:03,976 --> 00:12:06,206
OK. Ben, what's the second step


377
00:12:06,206 --> 00:12:06,846
in the recipe?


378
00:12:07,536 --> 00:12:08,906
>> Well, now, every time this


379
00:12:08,906 --> 00:12:10,626
state changes, we need to dirty


380
00:12:10,626 --> 00:12:12,066
the layout system by calling


381
00:12:12,066 --> 00:12:12,876
setNeedsLayout.


382
00:12:13,696 --> 00:12:15,336
But, we need to make sure that


383
00:12:15,336 --> 00:12:16,586
every time this state changes


384
00:12:16,586 --> 00:12:17,196
this happens.


385
00:12:17,196 --> 00:12:18,646
And, this state could change


386
00:12:19,256 --> 00:12:20,426
from various places in our


387
00:12:20,426 --> 00:12:21,076
application.


388
00:12:21,666 --> 00:12:23,016
So, Peter, how can we ensure


389
00:12:23,016 --> 00:12:24,196
that we're always dirtying the


390
00:12:24,196 --> 00:12:25,066
layout system when there's


391
00:12:25,066 --> 00:12:25,446
changes?


392
00:12:25,906 --> 00:12:27,226
>> I'm happy you asked, because


393
00:12:27,226 --> 00:12:28,386
I think I've got a good idea for


394
00:12:28,386 --> 00:12:28,756
this.


395
00:12:29,356 --> 00:12:30,506
We can use a feature called


396
00:12:30,506 --> 00:12:32,456
Swift property observers.


397
00:12:33,326 --> 00:12:35,526
These let us run code before or


398
00:12:35,526 --> 00:12:37,106
after a property is set.


399
00:12:37,106 --> 00:12:39,366
So, we can use the didSet


400
00:12:39,396 --> 00:12:41,146
property observer to call


401
00:12:41,146 --> 00:12:42,046
setNeedsLayout.


402
00:12:42,576 --> 00:12:44,286
This is a really excellent use


403
00:12:44,286 --> 00:12:45,776
of Swift property observers in


404
00:12:45,776 --> 00:12:47,276
your app.


405
00:12:47,336 --> 00:12:49,076
OK. So, we're almost done.


406
00:12:49,496 --> 00:12:50,766
Ben, what's the last step in the


407
00:12:50,766 --> 00:12:51,286
recipe?


408
00:12:51,766 --> 00:12:53,056
>> Well now, Peter, using this


409
00:12:53,056 --> 00:12:54,986
state, we need to update our UI


410
00:12:55,226 --> 00:12:56,236
in layoutSubviews.


411
00:12:57,396 --> 00:12:58,676
>> OK, easy.


412
00:12:59,336 --> 00:13:00,876
We'll override layoutSubviews,


413
00:13:00,986 --> 00:13:02,756
and we'll updated the isHidden


414
00:13:02,756 --> 00:13:04,306
property of our cool guy view


415
00:13:04,666 --> 00:13:05,766
based on the value of


416
00:13:05,766 --> 00:13:06,496
feelingCool.


417
00:13:07,136 --> 00:13:07,926
And, that's it.


418
00:13:08,236 --> 00:13:09,576
That's all you need to do to add


419
00:13:09,576 --> 00:13:10,986
layout-driven UI to your app.


420
00:13:11,616 --> 00:13:13,016
Now, while this works really


421
00:13:13,016 --> 00:13:14,996
well for this simple example, it


422
00:13:14,996 --> 00:13:16,746
works well for some more complex


423
00:13:16,746 --> 00:13:17,436
ones earlier.


424
00:13:18,336 --> 00:13:19,816
Ben and I were up really late


425
00:13:19,816 --> 00:13:21,326
last night playing this new


426
00:13:21,816 --> 00:13:23,766
macOS The Gathering trading card


427
00:13:23,766 --> 00:13:25,016
game, which is sweeping the


428
00:13:25,016 --> 00:13:25,806
Apple campus.


429
00:13:27,066 --> 00:13:28,406
We built this fun little deck


430
00:13:28,456 --> 00:13:29,896
builder app to help us win the


431
00:13:29,896 --> 00:13:31,076
tournament next weekend, which


432
00:13:31,076 --> 00:13:32,266
we're really going to do.


433
00:13:32,946 --> 00:13:34,266
It lets you pick up and drag


434
00:13:34,266 --> 00:13:35,596
these cards around, and you can


435
00:13:35,596 --> 00:13:36,856
fling them into this little deck


436
00:13:36,856 --> 00:13:37,146
area.


437
00:13:37,146 --> 00:13:39,176
And, it's really fast, and fun,


438
00:13:39,176 --> 00:13:39,646
and fluid.


439
00:13:39,826 --> 00:13:41,256
We can pick up two cards at the


440
00:13:41,256 --> 00:13:41,896
same time.


441
00:13:42,496 --> 00:13:44,156
I think with this app we can


442
00:13:44,156 --> 00:13:45,216
really show you how


443
00:13:45,216 --> 00:13:47,306
layout-driven UI works, and


444
00:13:47,306 --> 00:13:48,636
importantly, we can beat Ben's


445
00:13:48,636 --> 00:13:50,556
officemate next weekend.


446
00:13:51,486 --> 00:13:53,066
So, let's walk through the other


447
00:13:53,066 --> 00:13:55,636
two core aspects of an iOS app,


448
00:13:55,636 --> 00:13:56,526
and how we can apply


449
00:13:56,526 --> 00:13:57,846
layout-driven UI to them,


450
00:13:58,306 --> 00:14:00,096
starting with animations.


451
00:14:01,556 --> 00:14:03,546
>> Animations are the hallmark


452
00:14:03,626 --> 00:14:05,486
of any great iOS experience.


453
00:14:06,546 --> 00:14:08,116
The life-like motion of your


454
00:14:08,116 --> 00:14:10,716
user interface truly makes your


455
00:14:11,376 --> 00:14:12,486
apps feel alive.


456
00:14:12,486 --> 00:14:14,156
UIKit has some great API


457
00:14:14,296 --> 00:14:15,756
available to help you create


458
00:14:15,756 --> 00:14:17,746
these delightful animations.


459
00:14:18,636 --> 00:14:20,716
The UIViewPropertyAnimator API


460
00:14:21,096 --> 00:14:23,246
is a really powerful tool, and


461
00:14:23,246 --> 00:14:24,776
it was turbocharged last year


462
00:14:24,776 --> 00:14:26,006
with a bunch of new features.


463
00:14:27,036 --> 00:14:28,126
To learn all about how to use


464
00:14:28,126 --> 00:14:29,406
it, check out Advanced


465
00:14:29,406 --> 00:14:32,086
Animations from UIKit from WWDC


466
00:14:32,086 --> 00:14:33,246
2017.


467
00:14:34,866 --> 00:14:36,496
In addition to this, the tried


468
00:14:36,496 --> 00:14:38,536
and true UIView closure API is


469
00:14:38,536 --> 00:14:39,876
also a great way to make these


470
00:14:39,876 --> 00:14:40,436
animations.


471
00:14:42,356 --> 00:14:43,326
>> So, great.


472
00:14:43,976 --> 00:14:46,286
We can use UIViewAnimations with


473
00:14:46,286 --> 00:14:48,096
our layout-driven UI-based app.


474
00:14:49,086 --> 00:14:50,816
One thing to keep in mind, is


475
00:14:50,816 --> 00:14:51,756
we're always going to want to


476
00:14:51,756 --> 00:14:53,666
use the beginFromCurrentState


477
00:14:53,806 --> 00:14:54,726
animation option.


478
00:14:55,876 --> 00:14:57,746
This tells UIKit to take the


479
00:14:57,746 --> 00:14:59,486
current onscreen position of


480
00:14:59,486 --> 00:15:01,106
your view, even if it's


481
00:15:01,106 --> 00:15:02,946
mid-animation, when doing


482
00:15:02,946 --> 00:15:03,576
animation.


483
00:15:04,256 --> 00:15:06,116
And so, this lets us do these


484
00:15:06,116 --> 00:15:07,926
really wonderful, interruptible


485
00:15:07,926 --> 00:15:09,156
interactive animations.


486
00:15:09,906 --> 00:15:11,636
Let's look at an example in our


487
00:15:11,636 --> 00:15:13,266
macOS The Gathering trading card


488
00:15:13,266 --> 00:15:15,166
game app.


489
00:15:15,416 --> 00:15:17,036
So, here we've got a variable


490
00:15:17,036 --> 00:15:18,846
that tracks what cards are in


491
00:15:18,846 --> 00:15:19,406
our deck.


492
00:15:19,946 --> 00:15:21,386
And, using those Swift property


493
00:15:21,386 --> 00:15:22,406
observers we talked about


494
00:15:22,406 --> 00:15:24,236
earlier, we're dirtying the


495
00:15:24,236 --> 00:15:25,666
layout system every time this


496
00:15:25,666 --> 00:15:27,066
changes by calling


497
00:15:27,066 --> 00:15:27,896
setNeedsLayout.


498
00:15:28,346 --> 00:15:32,326
Next, when we want to put a card


499
00:15:32,326 --> 00:15:34,106
in the deck, all we have to do


500
00:15:34,456 --> 00:15:36,346
is add that card to this array,


501
00:15:36,616 --> 00:15:38,746
which will dirty our layout, and


502
00:15:38,746 --> 00:15:40,546
then inside of an animation


503
00:15:40,546 --> 00:15:41,546
block, using this


504
00:15:41,546 --> 00:15:43,746
beginFromCurrentState option, we


505
00:15:43,746 --> 00:15:45,276
call layoutIfNeeded.


506
00:15:46,146 --> 00:15:47,816
This will trigger a call to our


507
00:15:47,816 --> 00:15:49,576
code in layoutSubviews, which


508
00:15:49,576 --> 00:15:50,746
will move all of our views


509
00:15:50,746 --> 00:15:52,606
around, play the appropriate


510
00:15:52,606 --> 00:15:54,056
animation state transitions.


511
00:15:54,316 --> 00:15:55,836
And, what's really excellent


512
00:15:55,836 --> 00:15:57,056
about this, that I really want


513
00:15:57,056 --> 00:15:58,746
to highlight here, is notice how


514
00:15:58,746 --> 00:16:00,516
we didn't add any special case


515
00:16:00,516 --> 00:16:01,506
for these animations.


516
00:16:02,186 --> 00:16:03,296
We just kind of got this


517
00:16:03,296 --> 00:16:05,516
animated layout for free by


518
00:16:05,516 --> 00:16:07,466
doing our layout inside of an


519
00:16:07,466 --> 00:16:08,326
animation block.


520
00:16:09,266 --> 00:16:10,756
This is really, really awesome.


521
00:16:11,526 --> 00:16:12,946
So, that's how we can add


522
00:16:12,946 --> 00:16:14,356
animations to our layout-driven


523
00:16:14,356 --> 00:16:15,426
UI app.


524
00:16:16,176 --> 00:16:17,856
Finally, let's take about the


525
00:16:18,006 --> 00:16:20,136
third core aspect of an iOS app,


526
00:16:20,306 --> 00:16:21,536
and that's gestures.


527
00:16:22,166 --> 00:16:24,026
And, of course, we can't talk


528
00:16:24,026 --> 00:16:25,516
about gestures without talking


529
00:16:25,516 --> 00:16:27,386
about UIGestureRecognizer,


530
00:16:27,876 --> 00:16:29,916
UIKit's awesome API for adding


531
00:16:29,916 --> 00:16:31,386
gestural interactions to your


532
00:16:33,266 --> 00:16:33,346
app.


533
00:16:33,616 --> 00:16:35,186
>> UIKit provides a number of


534
00:16:35,226 --> 00:16:36,976
great concrete subclasses of


535
00:16:36,976 --> 00:16:38,086
UIgestureRecognizer.


536
00:16:38,936 --> 00:16:40,646
Everything from pans to pinches


537
00:16:40,646 --> 00:16:41,876
to swipes to rotation.


538
00:16:42,486 --> 00:16:43,496
You should be able to create the


539
00:16:43,496 --> 00:16:44,686
kind of interactions you want,


540
00:16:44,686 --> 00:16:45,346
using these.


541
00:16:45,856 --> 00:16:47,266
And, they're highly customizable


542
00:16:47,266 --> 00:16:47,656
as well.


543
00:16:49,026 --> 00:16:50,366
If you want something really


544
00:16:50,506 --> 00:16:52,366
crazy, you can always subclass


545
00:16:52,366 --> 00:16:53,696
UIGestureRecognizer yourself as


546
00:16:53,696 --> 00:16:53,936
well.


547
00:16:55,876 --> 00:16:57,206
>> When looking between the


548
00:16:57,206 --> 00:16:57,746
built-in


549
00:16:57,746 --> 00:17:00,206
UIKitGestureRecognizers, it's


550
00:17:00,206 --> 00:17:01,386
important to understand the


551
00:17:01,386 --> 00:17:03,356
difference between discrete and


552
00:17:03,356 --> 00:17:04,726
continuous gestures.


553
00:17:06,006 --> 00:17:07,796
Discrete gestures tell you that


554
00:17:07,796 --> 00:17:08,736
an event happened.


555
00:17:09,626 --> 00:17:10,826
They start in the Possible


556
00:17:10,826 --> 00:17:13,026
state, and then they don't pass


557
00:17:13,026 --> 00:17:14,945
go, they don't collect $200.


558
00:17:15,096 --> 00:17:16,496
They move immediately into the


559
00:17:16,496 --> 00:17:17,366
Recognized state.


560
00:17:18,536 --> 00:17:20,556
These are really useful for fire


561
00:17:20,556 --> 00:17:21,896
and forget interactions in your


562
00:17:21,896 --> 00:17:24,366
app, but won't tell you at every


563
00:17:24,366 --> 00:17:25,925
phase during the interaction.


564
00:17:26,455 --> 00:17:28,656
>> The other type of gestures


565
00:17:28,656 --> 00:17:30,116
are continuous gestures.


566
00:17:30,686 --> 00:17:31,806
These provide a much greater


567
00:17:31,806 --> 00:17:33,096
level of fidelity to you.


568
00:17:34,336 --> 00:17:35,586
Like discrete gestures, they


569
00:17:35,586 --> 00:17:37,036
start out in the Possible state,


570
00:17:37,816 --> 00:17:38,666
but as they begin to be


571
00:17:38,666 --> 00:17:40,326
recognized, they move to the


572
00:17:40,326 --> 00:17:41,096
Began state.


573
00:17:41,586 --> 00:17:44,236
As they track, they enter the


574
00:17:44,296 --> 00:17:45,196
Changed state.


575
00:17:45,716 --> 00:17:46,506
And, at this point you're


576
00:17:46,506 --> 00:17:48,026
receiving a continuous stream of


577
00:17:48,026 --> 00:17:49,716
events as the gesture moves


578
00:17:49,716 --> 00:17:49,976
around.


579
00:17:51,216 --> 00:17:52,766
Finally, when the gesture is


580
00:17:53,176 --> 00:17:55,126
complete, it moves to the Ended


581
00:17:55,126 --> 00:17:55,446
state.


582
00:17:57,356 --> 00:17:58,976
One of our favorite types of


583
00:17:58,976 --> 00:18:00,436
continuous gestures is the


584
00:18:00,466 --> 00:18:01,966
UIPanGestureRecognizer.


585
00:18:02,786 --> 00:18:03,776
And, there are two great


586
00:18:03,916 --> 00:18:05,766
functions available to help you


587
00:18:05,766 --> 00:18:06,656
get the most out of it.


588
00:18:08,136 --> 00:18:09,786
translationInView will tell you


589
00:18:09,786 --> 00:18:11,396
where the gesture is tracking,


590
00:18:11,656 --> 00:18:12,956
relative to your views.


591
00:18:13,456 --> 00:18:16,126
And, velocityInView will tell


592
00:18:16,126 --> 00:18:17,466
you how fast your gesture is


593
00:18:17,466 --> 00:18:17,866
moving.


594
00:18:18,366 --> 00:18:20,026
And, this is really powerful for


595
00:18:20,026 --> 00:18:21,596
handing off velocity between a


596
00:18:21,596 --> 00:18:23,166
gesture and a subsequent


597
00:18:23,166 --> 00:18:23,706
animation.


598
00:18:25,256 --> 00:18:26,686
To learn all about how to build


599
00:18:26,686 --> 00:18:28,416
really great gesture


600
00:18:28,416 --> 00:18:30,046
interactions using these, check


601
00:18:30,046 --> 00:18:31,386
out Building Interruptible and


602
00:18:31,386 --> 00:18:33,256
Responsive Interactions from


603
00:18:33,256 --> 00:18:34,866
WWDC 2014.


604
00:18:36,326 --> 00:18:37,536
>> So, I also love


605
00:18:37,586 --> 00:18:39,266
UIPanGestureRecognizer.


606
00:18:39,656 --> 00:18:40,896
And, we used it to help build


607
00:18:40,896 --> 00:18:42,886
that card dragging behavior you


608
00:18:42,886 --> 00:18:43,576
saw earlier.


609
00:18:44,436 --> 00:18:45,716
Let's look at how we did this


610
00:18:45,816 --> 00:18:46,886
using layout-driven UI.


611
00:18:48,856 --> 00:18:50,916
Again, we have a local variable,


612
00:18:51,026 --> 00:18:53,996
which tracks the offsets for


613
00:18:53,996 --> 00:18:55,486
each of our cards that the


614
00:18:55,486 --> 00:18:56,546
gesture has applied.


615
00:18:57,366 --> 00:18:59,136
And again notice every time this


616
00:18:59,136 --> 00:19:00,616
variable changes, we're


617
00:19:00,616 --> 00:19:02,916
triggering setNeedsLayout, using


618
00:19:02,916 --> 00:19:03,876
one of Swift's property


619
00:19:03,876 --> 00:19:04,466
observers.


620
00:19:06,306 --> 00:19:07,696
Next, inside of our


621
00:19:07,766 --> 00:19:09,636
panGestureRecognizer callback


622
00:19:09,636 --> 00:19:11,226
function, we're just going to


623
00:19:11,226 --> 00:19:12,936
grab the current translation and


624
00:19:12,936 --> 00:19:15,096
view out of the gesture, and


625
00:19:15,186 --> 00:19:17,356
associate this gesture to one of


626
00:19:17,356 --> 00:19:18,016
our cards.


627
00:19:18,916 --> 00:19:21,776
We'll then increment the offset


628
00:19:21,916 --> 00:19:23,336
for this card in this


629
00:19:23,336 --> 00:19:23,916
dictionary.


630
00:19:25,276 --> 00:19:27,876
And finally, in layoutSubviews,


631
00:19:28,546 --> 00:19:30,086
we'll make sure to update the


632
00:19:30,086 --> 00:19:32,676
position of our card views based


633
00:19:32,676 --> 00:19:34,336
on their offsets from this


634
00:19:34,336 --> 00:19:34,866
dictionary.


635
00:19:36,076 --> 00:19:37,926
Notice again how we're not


636
00:19:37,926 --> 00:19:39,866
really doing anything special,


637
00:19:40,266 --> 00:19:41,546
other than -- besides the


638
00:19:41,546 --> 00:19:42,806
traditional layout-driven UI


639
00:19:42,806 --> 00:19:43,356
case.


640
00:19:44,196 --> 00:19:45,816
We just have this piece of state


641
00:19:46,016 --> 00:19:47,296
that happens to be driven by a


642
00:19:47,296 --> 00:19:49,266
gesture, and we're responding to


643
00:19:49,266 --> 00:19:50,476
it in layoutSubviews.


644
00:19:51,616 --> 00:19:53,406
In fact, if you follow this


645
00:19:53,406 --> 00:19:54,886
pattern throughout your app,


646
00:19:55,476 --> 00:19:56,496
you'll find that it makes a lot


647
00:19:56,496 --> 00:19:57,646
of these types of interactions


648
00:19:57,786 --> 00:19:59,266
much easier to adopt.


649
00:20:00,586 --> 00:20:02,216
So that's layout-driven UI.


650
00:20:02,816 --> 00:20:03,916
Remember the recipe.


651
00:20:04,396 --> 00:20:06,826
Find and track all of that state


652
00:20:06,826 --> 00:20:07,906
that affects your UI.


653
00:20:08,236 --> 00:20:09,386
And, use Swift property


654
00:20:09,386 --> 00:20:10,746
observers to trigger


655
00:20:10,746 --> 00:20:12,726
setNeedsLayout whenever this


656
00:20:12,726 --> 00:20:13,636
state changes.


657
00:20:14,666 --> 00:20:16,426
Finally, in your implementation


658
00:20:16,426 --> 00:20:18,786
of layoutSubviews, make sure to


659
00:20:18,786 --> 00:20:21,216
update your view state based on


660
00:20:21,216 --> 00:20:22,746
this state that you tracked.


661
00:20:22,746 --> 00:20:22,926
Thank you.


662
00:20:23,516 --> 00:20:28,716
[ Applause ]


663
00:20:29,216 --> 00:20:31,276
>> The iOS experience is all


664
00:20:31,276 --> 00:20:32,626
about being responsive.


665
00:20:33,706 --> 00:20:35,036
And, you want to get your


666
00:20:35,036 --> 00:20:36,776
customers to your delightful


667
00:20:36,776 --> 00:20:39,046
experiences as quickly as


668
00:20:39,086 --> 00:20:39,546
possible.


669
00:20:40,736 --> 00:20:43,276
There is one step between them


670
00:20:43,276 --> 00:20:45,406
tapping on your icon, and being


671
00:20:45,406 --> 00:20:45,936
delighted.


672
00:20:47,036 --> 00:20:49,196
And, that one step is your


673
00:20:49,196 --> 00:20:50,606
launch time.


674
00:20:52,256 --> 00:20:54,986
To help you optimize this, we're


675
00:20:54,986 --> 00:20:56,206
going to take you through the


676
00:20:56,206 --> 00:20:58,516
five high-level components that


677
00:20:58,516 --> 00:21:00,876
make up the anatomy of a launch.


678
00:21:02,536 --> 00:21:03,986
Starting with number one,


679
00:21:04,716 --> 00:21:05,656
process forking.


680
00:21:07,096 --> 00:21:08,486
Peter, what can we do in this


681
00:21:08,486 --> 00:21:09,256
phase of the launch?


682
00:21:10,196 --> 00:21:12,066
>> Well, for process forking,


683
00:21:12,066 --> 00:21:13,396
it's really complicated.


684
00:21:13,796 --> 00:21:14,576
You're going to want to read the


685
00:21:14,576 --> 00:21:17,166
Man pages for fork and exec, and


686
00:21:17,166 --> 00:21:19,056
familiarize yourself with POSIX


687
00:21:19,056 --> 00:21:19,796
fundamentals.


688
00:21:20,076 --> 00:21:21,226
No, no, I'm just kidding.


689
00:21:21,266 --> 00:21:23,456
iOS will take care of process


690
00:21:23,456 --> 00:21:24,236
forking for you.


691
00:21:24,776 --> 00:21:26,726
>> We'll deal with number one


692
00:21:26,726 --> 00:21:27,096
for you.


693
00:21:27,156 --> 00:21:27,976
Let's look at number two.


694
00:21:28,516 --> 00:21:30,816
[ Audience Laughter ]


695
00:21:31,316 --> 00:21:32,416
Dynamic linking.


696
00:21:32,886 --> 00:21:36,666
At this phase, we're allocating


697
00:21:36,666 --> 00:21:38,236
memory to begin executing your


698
00:21:38,236 --> 00:21:38,876
application.


699
00:21:39,926 --> 00:21:41,096
We're linking libraries and


700
00:21:41,096 --> 00:21:41,766
frameworks.


701
00:21:42,676 --> 00:21:43,896
We're initializing Swift,


702
00:21:43,896 --> 00:21:45,476
Objective-C, and Foundation.


703
00:21:46,446 --> 00:21:47,626
And, we're doing static object


704
00:21:47,626 --> 00:21:48,746
initialization as well.


705
00:21:49,286 --> 00:21:51,636
And, typically we see this can


706
00:21:51,636 --> 00:21:54,686
take 40 to 50% of the typical


707
00:21:54,686 --> 00:21:56,466
launch time of an app.


708
00:21:57,016 --> 00:21:58,606
And, one key thing to remember


709
00:21:58,956 --> 00:22:00,476
is at this point, none of your


710
00:22:00,476 --> 00:22:01,146
code has run.


711
00:22:01,706 --> 00:22:03,496
So, it's vital that you


712
00:22:03,496 --> 00:22:05,396
understand how to optimize this.


713
00:22:06,306 --> 00:22:07,186
Peter, do you have any great


714
00:22:07,186 --> 00:22:08,266
advice for our developers?


715
00:22:08,916 --> 00:22:10,206
>> I'm happy you asked, Ben.


716
00:22:10,626 --> 00:22:11,886
It's important that you take


717
00:22:11,886 --> 00:22:14,076
great care when optimizing the


718
00:22:14,076 --> 00:22:15,366
linking phase of your app's


719
00:22:15,366 --> 00:22:15,896
launch time.


720
00:22:16,236 --> 00:22:18,256
Because it takes up such a large


721
00:22:18,256 --> 00:22:21,326
amount of your launch time.


722
00:22:21,546 --> 00:22:23,016
My first piece of advice for you


723
00:22:23,326 --> 00:22:25,066
is to avoid code duplication


724
00:22:25,156 --> 00:22:26,316
wherever possible.


725
00:22:26,546 --> 00:22:29,386
If you have redundant functions,


726
00:22:29,576 --> 00:22:31,846
objects, or structs, remove them


727
00:22:31,846 --> 00:22:32,376
from your app.


728
00:22:32,746 --> 00:22:33,976
Don't repeat yourself.


729
00:22:35,266 --> 00:22:36,716
Next, you're going to want to


730
00:22:36,716 --> 00:22:38,456
limit your use of third-party


731
00:22:38,456 --> 00:22:39,156
libraries.


732
00:22:40,066 --> 00:22:42,056
iOS first-party libraries are


733
00:22:42,056 --> 00:22:44,536
cached, and may already be in


734
00:22:44,536 --> 00:22:46,036
active memory if another


735
00:22:46,036 --> 00:22:47,376
application is using them.


736
00:22:48,466 --> 00:22:50,006
But, third-party libraries are


737
00:22:50,006 --> 00:22:50,856
not cached.


738
00:22:51,256 --> 00:22:52,726
Even if another app is using the


739
00:22:52,726 --> 00:22:54,326
same version of a library as


740
00:22:54,326 --> 00:22:56,246
you, we'll still have to pull in


741
00:22:56,246 --> 00:22:58,026
the framework if your app uses


742
00:22:58,026 --> 00:22:58,166
it.


743
00:22:58,386 --> 00:23:00,166
So, you should really limit your


744
00:23:00,166 --> 00:23:01,226
use of these third-party


745
00:23:01,226 --> 00:23:02,906
libraries as much as possible.


746
00:23:04,006 --> 00:23:05,546
And, finally, you're going to


747
00:23:05,546 --> 00:23:06,926
want to avoid static


748
00:23:06,926 --> 00:23:09,586
initializers, and having any


749
00:23:09,586 --> 00:23:11,076
behavior in methods like plus


750
00:23:11,076 --> 00:23:12,966
initialize, and plus load.


751
00:23:13,426 --> 00:23:15,116
Because these have to run before


752
00:23:15,116 --> 00:23:16,706
your app can do any meaningful


753
00:23:16,706 --> 00:23:17,026
work.


754
00:23:18,556 --> 00:23:19,566
>> To learn more about this


755
00:23:19,566 --> 00:23:21,366
vital part of your launch time,


756
00:23:21,856 --> 00:23:23,316
check out App Start-up Time:


757
00:23:23,366 --> 00:23:25,116
Past, Present, and Future from


758
00:23:25,116 --> 00:23:27,376
WWDC 2017.


759
00:23:28,436 --> 00:23:30,786
The next phase of your launch is


760
00:23:30,786 --> 00:23:31,976
your UI Construction.


761
00:23:32,916 --> 00:23:34,796
At this point, you're preparing


762
00:23:34,796 --> 00:23:36,366
your UI, building up your


763
00:23:36,366 --> 00:23:37,076
viewControllers.


764
00:23:37,516 --> 00:23:40,136
The system is doing state


765
00:23:40,136 --> 00:23:41,596
restoration, and loading in your


766
00:23:41,596 --> 00:23:42,256
preferences.


767
00:23:42,856 --> 00:23:45,026
And, you're loading in the data


768
00:23:45,026 --> 00:23:46,746
that you need for your app to


769
00:23:46,746 --> 00:23:47,626
become responsive.


770
00:23:48,186 --> 00:23:50,996
So, Peter, what can we do at


771
00:23:50,996 --> 00:23:52,026
this phase of the launch to


772
00:23:52,026 --> 00:23:52,536
optimize?


773
00:23:53,636 --> 00:23:54,896
>> You'll want to optimize the


774
00:23:54,896 --> 00:23:56,686
UI construction phase to be as


775
00:23:56,686 --> 00:23:58,276
fast as possible for your app.


776
00:23:59,376 --> 00:24:01,226
This means returning as quickly


777
00:24:01,226 --> 00:24:02,726
as possible from the UI


778
00:24:02,826 --> 00:24:05,076
application activation methods.


779
00:24:05,576 --> 00:24:06,726
WillFinishLaunching,


780
00:24:07,156 --> 00:24:08,606
didFinishLaunching, and


781
00:24:08,606 --> 00:24:09,686
didBecomeActive.


782
00:24:10,096 --> 00:24:11,696
Because UIKit waits for you to


783
00:24:11,696 --> 00:24:13,036
return from these functions


784
00:24:13,356 --> 00:24:15,006
before we can mark your app as


785
00:24:15,006 --> 00:24:15,506
active.


786
00:24:17,096 --> 00:24:18,656
Next, you're going to want to


787
00:24:18,656 --> 00:24:21,436
avoid any file system writes


788
00:24:21,436 --> 00:24:22,886
during your application launch,


789
00:24:23,566 --> 00:24:24,836
as these are blocking, and


790
00:24:24,836 --> 00:24:25,906
require a sys call.


791
00:24:26,916 --> 00:24:28,206
Hand in hand with these, you're


792
00:24:28,206 --> 00:24:29,516
going to want to avoid very


793
00:24:29,516 --> 00:24:31,856
large reads during app launch as


794
00:24:31,856 --> 00:24:32,226
well.


795
00:24:33,076 --> 00:24:35,066
Instead, consider streaming in


796
00:24:35,066 --> 00:24:36,926
only the data you absolutely


797
00:24:36,926 --> 00:24:37,916
need right now.


798
00:24:39,176 --> 00:24:41,106
And, finally I encourage you to


799
00:24:41,106 --> 00:24:42,546
check your database hygiene.


800
00:24:42,776 --> 00:24:44,076
It's always a good idea to stay


801
00:24:44,076 --> 00:24:44,496
clean.


802
00:24:45,486 --> 00:24:47,006
If you're using a library like


803
00:24:47,006 --> 00:24:49,546
CoreData, consider optimizing


804
00:24:49,546 --> 00:24:51,586
your schema, to make it as fast


805
00:24:51,586 --> 00:24:52,216
as possible.


806
00:24:52,886 --> 00:24:53,936
And, if you're rolling your own


807
00:24:53,936 --> 00:24:56,006
solution with SQLite, or similar


808
00:24:56,006 --> 00:24:58,126
technology, consider vacuuming


809
00:24:58,126 --> 00:25:00,026
your database at a periodic


810
00:25:00,026 --> 00:25:00,396
interval.


811
00:25:00,706 --> 00:25:02,476
For example, every time your app


812
00:25:02,476 --> 00:25:03,106
gets updated.


813
00:25:04,326 --> 00:25:04,826
>> Thanks, Peter.


814
00:25:06,216 --> 00:25:08,066
The next phase of the launch is


815
00:25:08,066 --> 00:25:09,276
when we create your very first


816
00:25:09,276 --> 00:25:09,586
frame.


817
00:25:10,216 --> 00:25:13,286
At this point, core animation is


818
00:25:13,316 --> 00:25:14,266
doing all the rendering


819
00:25:14,266 --> 00:25:15,526
necessary to get that frame


820
00:25:15,526 --> 00:25:15,776
ready.


821
00:25:17,146 --> 00:25:18,376
It's doing text drawing.


822
00:25:18,626 --> 00:25:19,666
And, we're loading and


823
00:25:19,666 --> 00:25:21,026
decompressing any images that


824
00:25:21,026 --> 00:25:23,186
need to be shown in your UI.


825
00:25:23,186 --> 00:25:25,536
So, Peter, do you have any more


826
00:25:25,536 --> 00:25:27,356
sage advice for this phase of


827
00:25:27,356 --> 00:25:27,806
the launch?


828
00:25:28,776 --> 00:25:29,516
>> Oh, do I.


829
00:25:29,926 --> 00:25:31,416
When preparing your first frame,


830
00:25:31,416 --> 00:25:32,996
it's really important that you


831
00:25:32,996 --> 00:25:35,196
take great care to only prepare


832
00:25:35,196 --> 00:25:36,256
the user interface that you


833
00:25:36,256 --> 00:25:37,896
absolutely need during launch


834
00:25:37,896 --> 00:25:38,196
time.


835
00:25:38,896 --> 00:25:41,106
If your user hasn't navigated to


836
00:25:41,106 --> 00:25:42,486
a particular section of your


837
00:25:42,486 --> 00:25:44,186
app, avoid loading it.


838
00:25:44,386 --> 00:25:46,286
And, instead, pull it in lazily


839
00:25:46,416 --> 00:25:47,616
when you absolutely need it.


840
00:25:48,426 --> 00:25:51,036
Also, you should avoid hiding


841
00:25:51,036 --> 00:25:52,616
views and layers that should not


842
00:25:52,616 --> 00:25:53,936
be visible when we first


843
00:25:53,936 --> 00:25:54,846
navigate to your app.


844
00:25:56,106 --> 00:25:57,296
Even when views and layers are


845
00:25:57,296 --> 00:25:59,456
hidden, they still have a cost.


846
00:25:59,656 --> 00:26:00,866
So, only bring in the views and


847
00:26:00,866 --> 00:26:02,576
layers that you absolutely need


848
00:26:02,806 --> 00:26:03,726
for your first frame.


849
00:26:05,456 --> 00:26:07,016
>> The final phase of your


850
00:26:07,016 --> 00:26:09,636
launch is what we call extended


851
00:26:09,636 --> 00:26:10,536
launch actions.


852
00:26:12,156 --> 00:26:13,716
These are tasks that you have


853
00:26:13,716 --> 00:26:15,656
potentially deferred from your


854
00:26:15,656 --> 00:26:17,286
launch path to help you get


855
00:26:17,286 --> 00:26:18,266
responsive faster.


856
00:26:19,736 --> 00:26:20,586
So, while your app may be


857
00:26:20,586 --> 00:26:22,766
responsive at this point, it may


858
00:26:22,766 --> 00:26:24,016
not be very usable yet.


859
00:26:24,446 --> 00:26:26,936
This phase is really all about


860
00:26:26,986 --> 00:26:28,786
prioritizing what to do next.


861
00:26:29,506 --> 00:26:30,596
Bring in the content that needs


862
00:26:30,596 --> 00:26:31,676
to be onscreen right now.


863
00:26:33,036 --> 00:26:34,026
And also, if you're loading


864
00:26:34,026 --> 00:26:36,536
content from a remote server, be


865
00:26:36,536 --> 00:26:38,156
sure to consider that you may be


866
00:26:38,156 --> 00:26:39,066
in challenging network


867
00:26:39,066 --> 00:26:39,566
conditions.


868
00:26:40,096 --> 00:26:42,836
And, have a placeholder UI ready


869
00:26:42,836 --> 00:26:43,806
to go if necessary.


870
00:26:44,356 --> 00:26:47,326
So, those are the five


871
00:26:47,326 --> 00:26:49,016
high-level components that make


872
00:26:49,016 --> 00:26:50,836
up the anatomy of a launch.


873
00:26:51,376 --> 00:26:53,776
We've one more thing for you


874
00:26:55,436 --> 00:26:56,486
today.


875
00:26:56,766 --> 00:26:59,116
ABM. A: Always.


876
00:26:59,226 --> 00:27:01,216
B: Be. M: Measuring.


877
00:27:01,676 --> 00:27:03,516
>> Coffee is for quick apps.


878
00:27:04,466 --> 00:27:05,516
>> It's essential that you


879
00:27:05,516 --> 00:27:07,316
understand where your launch


880
00:27:07,316 --> 00:27:07,966
time is going.


881
00:27:08,636 --> 00:27:10,156
So, measure it regularly using


882
00:27:10,156 --> 00:27:11,076
the Time Profiler.


883
00:27:12,126 --> 00:27:13,326
Any time you change code in the


884
00:27:13,326 --> 00:27:14,566
path -- in your launch path,


885
00:27:14,566 --> 00:27:16,636
you'll want to remeasure.


886
00:27:17,286 --> 00:27:18,936
And, take statistical averages.


887
00:27:19,166 --> 00:27:20,856
Don't depend on a single profile


888
00:27:21,156 --> 00:27:23,896
to check your launch time.


889
00:27:24,086 --> 00:27:25,536
So, laser-fast launches.


890
00:27:26,076 --> 00:27:27,406
Get responsive fast.


891
00:27:27,706 --> 00:27:28,976
Use only what you need.


892
00:27:29,476 --> 00:27:31,226
And, measure, measure, measure.


893
00:27:31,506 --> 00:27:31,686
Thank you.


894
00:27:32,516 --> 00:27:38,826
[ Applause ]


895
00:27:39,326 --> 00:27:41,986
>> Scrolling is a key part of


896
00:27:41,986 --> 00:27:44,466
the iOS user experience, and a


897
00:27:44,566 --> 00:27:46,246
huge part of the experience


898
00:27:46,296 --> 00:27:48,956
inside your apps.


899
00:27:48,956 --> 00:27:51,086
iPhone and iPad are magical


900
00:27:51,086 --> 00:27:52,806
sheets of glass that can


901
00:27:52,806 --> 00:27:54,916
transform into anything your app


902
00:27:54,916 --> 00:27:55,806
would like them to be.


903
00:27:57,096 --> 00:27:58,896
So, it's important that you work


904
00:27:58,986 --> 00:28:00,536
to help preserve this illusion


905
00:28:00,536 --> 00:28:02,416
of your app's content sliding on


906
00:28:02,416 --> 00:28:03,826
this magic sheet of glass.


907
00:28:05,116 --> 00:28:06,776
At Apple, we've got a phrase


908
00:28:06,776 --> 00:28:07,956
that we like to say, that your


909
00:28:07,956 --> 00:28:09,736
app should feel smooth like


910
00:28:09,736 --> 00:28:10,046
butter.


911
00:28:10,896 --> 00:28:13,446
But, from time to time, you have


912
00:28:13,446 --> 00:28:15,226
some hitches and stutters that


913
00:28:15,226 --> 00:28:16,936
make it feel less like butter,


914
00:28:17,606 --> 00:28:18,926
and more like peanut butter.


915
00:28:20,296 --> 00:28:21,426
And, you've seen this before.


916
00:28:21,426 --> 00:28:22,786
Your app feels choppy or


917
00:28:22,786 --> 00:28:23,316
stuttery.


918
00:28:24,786 --> 00:28:26,726
Ben, what are some causes of the


919
00:28:26,726 --> 00:28:28,256
slow behavior in apps?


920
00:28:29,186 --> 00:28:30,656
>> Well, Peter, this slow


921
00:28:30,656 --> 00:28:31,866
behavior that you're describing


922
00:28:32,076 --> 00:28:34,166
is really that we're dropping


923
00:28:34,166 --> 00:28:34,646
frames.


924
00:28:35,316 --> 00:28:36,476
And so, we need to understand


925
00:28:36,476 --> 00:28:37,466
why that might be happening.


926
00:28:37,466 --> 00:28:39,216
And, there are two key areas


927
00:28:39,416 --> 00:28:40,316
where this can happen.


928
00:28:41,046 --> 00:28:42,386
The first is you could be doing


929
00:28:42,426 --> 00:28:43,666
too much computation.


930
00:28:44,716 --> 00:28:46,366
And, the second is you could be


931
00:28:46,366 --> 00:28:48,196
doing too much complex graphics


932
00:28:48,196 --> 00:28:48,836
compositing.


933
00:28:50,236 --> 00:28:51,416
Let's look at each of these in


934
00:28:51,416 --> 00:28:53,766
turn, starting with computation.


935
00:28:55,056 --> 00:28:56,346
How do you know if you're doing


936
00:28:56,346 --> 00:28:57,286
too much computation?


937
00:28:58,656 --> 00:29:00,656
Well, the Time Profiler, built


938
00:29:00,656 --> 00:29:01,816
into Instruments, is the


939
00:29:01,816 --> 00:29:02,796
ultimate tool for this.


940
00:29:04,036 --> 00:29:05,586
It can give you down to the line


941
00:29:05,916 --> 00:29:07,686
measurements for just how much


942
00:29:07,796 --> 00:29:09,366
CPU time your code is using.


943
00:29:10,236 --> 00:29:12,226
It's a really powerful tool, and


944
00:29:12,226 --> 00:29:13,336
we encourage you to go and check


945
00:29:13,336 --> 00:29:14,876
out Using the Time Profiler in


946
00:29:14,876 --> 00:29:17,556
Instruments from WWDC 2016.


947
00:29:18,936 --> 00:29:20,176
>> So, once you've identified


948
00:29:20,176 --> 00:29:21,956
these hot spots, using the Time


949
00:29:21,956 --> 00:29:23,916
Profiler tool, we've got some


950
00:29:23,916 --> 00:29:25,716
great tips for you to optimize


951
00:29:25,716 --> 00:29:25,896
them.


952
00:29:27,306 --> 00:29:28,476
The first is to use


953
00:29:28,476 --> 00:29:30,686
UICollectionView and UITableView


954
00:29:30,686 --> 00:29:31,496
prefetching.


955
00:29:32,296 --> 00:29:33,656
These are pieces of API that


956
00:29:33,656 --> 00:29:35,456
will tell you while the user is


957
00:29:35,456 --> 00:29:36,976
scrolling towards particular


958
00:29:36,976 --> 00:29:38,816
cells, and can give you an


959
00:29:38,816 --> 00:29:40,386
opportunity to preload that


960
00:29:40,386 --> 00:29:40,696
data.


961
00:29:41,676 --> 00:29:43,396
There was a wonderful talk given


962
00:29:43,396 --> 00:29:45,096
by two very handsome presenters


963
00:29:45,096 --> 00:29:47,136
on this in 2016 that I encourage


964
00:29:47,136 --> 00:29:47,636
you to watch.


965
00:29:49,216 --> 00:29:51,146
The next tip that I have for


966
00:29:51,146 --> 00:29:53,226
you, is to push as much work as


967
00:29:53,226 --> 00:29:55,226
possible off of the main queue


968
00:29:55,436 --> 00:29:56,876
and onto background queues,


969
00:29:57,166 --> 00:29:58,446
freeing up the main queue to


970
00:29:58,636 --> 00:30:00,606
update your UI and handle user


971
00:30:00,606 --> 00:30:00,946
input.


972
00:30:01,046 --> 00:30:04,136
Ben, what kind of work can we


973
00:30:04,136 --> 00:30:05,156
push off the main queue?


974
00:30:06,186 --> 00:30:06,956
>> Well, there's some usual


975
00:30:06,956 --> 00:30:08,086
stuff that you might expect,


976
00:30:08,736 --> 00:30:10,696
like network and file system


977
00:30:10,696 --> 00:30:11,216
access.


978
00:30:11,566 --> 00:30:12,606
These should never be running on


979
00:30:12,606 --> 00:30:13,156
the main thread.


980
00:30:13,456 --> 00:30:15,116
But, maybe some other stuff that


981
00:30:15,116 --> 00:30:16,836
you might not expect, like image


982
00:30:16,836 --> 00:30:17,866
drawing and text sizing.


983
00:30:18,996 --> 00:30:20,916
UIGraphicsImageRenderer, and its


984
00:30:20,916 --> 00:30:22,826
distributed string, both have


985
00:30:22,976 --> 00:30:24,456
functions available that are


986
00:30:24,456 --> 00:30:25,606
safe to use on a background


987
00:30:25,606 --> 00:30:27,216
thread, that might just help you


988
00:30:27,216 --> 00:30:29,546
move some of that complex


989
00:30:29,576 --> 00:30:31,236
computation off of your main


990
00:30:31,236 --> 00:30:31,506
queue.


991
00:30:32,776 --> 00:30:34,406
>> Wow, Ben, those are great


992
00:30:34,406 --> 00:30:34,756
tips.


993
00:30:34,756 --> 00:30:35,946
I never would have thought to do


994
00:30:35,946 --> 00:30:37,376
that off of the main queue.


995
00:30:38,246 --> 00:30:40,396
So, let's say I've run the Time


996
00:30:40,396 --> 00:30:40,996
Profiler.


997
00:30:41,316 --> 00:30:42,896
I've used prefetching, just like


998
00:30:42,896 --> 00:30:44,046
those guys told me to.


999
00:30:44,226 --> 00:30:45,466
And, I've pushed as much work as


1000
00:30:45,466 --> 00:30:46,836
possible off of the main queue,


1001
00:30:47,816 --> 00:30:49,296
but my app is still slow.


1002
00:30:50,016 --> 00:30:51,516
Surely this isn't my problem,


1003
00:30:51,516 --> 00:30:51,986
right Ben?


1004
00:30:53,056 --> 00:30:54,226
>> Well, Peter, we may not be


1005
00:30:54,226 --> 00:30:55,576
out of the woods just yet.


1006
00:30:56,416 --> 00:30:57,976
While we may have optimized our


1007
00:30:57,976 --> 00:31:00,276
computation, we could still be


1008
00:31:00,276 --> 00:31:01,666
having problems with our


1009
00:31:01,666 --> 00:31:02,486
graphics system.


1010
00:31:04,946 --> 00:31:06,156
Fortunately, there's another


1011
00:31:06,156 --> 00:31:07,346
great tool available here.


1012
00:31:07,936 --> 00:31:11,286
The Core Animation instrument is


1013
00:31:11,286 --> 00:31:12,986
a really powerful way to see


1014
00:31:12,986 --> 00:31:14,306
exactly what your frame rate is


1015
00:31:14,346 --> 00:31:14,656
doing.


1016
00:31:15,296 --> 00:31:16,686
And, also at the same time,


1017
00:31:16,936 --> 00:31:18,636
looking at your GPU utilization.


1018
00:31:20,076 --> 00:31:21,506
It's another really powerful


1019
00:31:21,506 --> 00:31:21,866
tool.


1020
00:31:22,156 --> 00:31:23,276
And, to learn all about how to


1021
00:31:23,276 --> 00:31:24,846
use it, check out Advanced


1022
00:31:24,846 --> 00:31:26,306
Graphics and Animations for iOS


1023
00:31:26,306 --> 00:31:30,636
Apps from WWDC 2014.


1024
00:31:30,746 --> 00:31:31,956
>> Once you've identified that


1025
00:31:31,956 --> 00:31:33,816
your app is graphics-bound,


1026
00:31:34,146 --> 00:31:35,776
we've got some great low-hanging


1027
00:31:35,776 --> 00:31:37,096
fruit for you to investigate.


1028
00:31:38,396 --> 00:31:39,396
Usually, you have a


1029
00:31:39,396 --> 00:31:40,886
graphics-bound app due to


1030
00:31:40,886 --> 00:31:42,986
overuse of one of two things:


1031
00:31:43,696 --> 00:31:45,826
visual effects, or masking and


1032
00:31:45,826 --> 00:31:46,276
clipping.


1033
00:31:47,186 --> 00:31:49,226
Visual effects, like blur and


1034
00:31:49,226 --> 00:31:51,476
vibrancy, are expensive, and so


1035
00:31:51,476 --> 00:31:52,876
you should use them tastefully


1036
00:31:53,056 --> 00:31:53,936
within your apps.


1037
00:31:54,896 --> 00:31:56,766
You should also definitely avoid


1038
00:31:56,906 --> 00:31:58,686
things like blurs on blurs on


1039
00:31:58,686 --> 00:32:00,616
blurs, as this will cause the


1040
00:32:00,616 --> 00:32:02,576
GPU to work in overdrive,


1041
00:32:02,726 --> 00:32:03,746
slowing down your app.


1042
00:32:04,756 --> 00:32:07,196
Also, you should avoid masking


1043
00:32:07,196 --> 00:32:09,116
and clipping wherever possible.


1044
00:32:10,056 --> 00:32:11,926
Instead, if you can achieve the


1045
00:32:11,926 --> 00:32:14,636
same visual appearance by just


1046
00:32:14,636 --> 00:32:16,576
placing opaque content on top of


1047
00:32:16,576 --> 00:32:18,186
your views, then I would


1048
00:32:18,186 --> 00:32:19,286
encourage you to too that,


1049
00:32:19,536 --> 00:32:20,706
instead of using the masked


1050
00:32:20,706 --> 00:32:23,126
view, or masked property of


1051
00:32:23,166 --> 00:32:24,406
UIViewer CA Layer.


1052
00:32:25,496 --> 00:32:27,046
So, that's how we can optimize


1053
00:32:27,206 --> 00:32:28,756
smooth scrolling performance.


1054
00:32:29,366 --> 00:32:30,656
Make sure to run the Time


1055
00:32:30,656 --> 00:32:32,216
Profiler, and Core Animation


1056
00:32:32,216 --> 00:32:33,786
instruments on your apps.


1057
00:32:35,066 --> 00:32:36,756
Use prefetching, and push as


1058
00:32:36,756 --> 00:32:38,326
much work as possible off of the


1059
00:32:38,326 --> 00:32:38,986
main queue.


1060
00:32:39,526 --> 00:32:42,866
And, try to use visual effects,


1061
00:32:42,866 --> 00:32:44,086
and masking and clipping


1062
00:32:44,366 --> 00:32:45,046
sparingly.


1063
00:32:46,006 --> 00:32:47,766
For even more information about


1064
00:32:47,766 --> 00:32:49,656
profiling, check out this great


1065
00:32:49,656 --> 00:32:51,726
talk from WWDC 2015.


1066
00:32:51,726 --> 00:32:51,956
Thank you.


1067
00:32:52,516 --> 00:32:56,306
[ Applause ]


1068
00:32:56,806 --> 00:32:58,446
>> Continuity is one of the most


1069
00:32:58,446 --> 00:33:00,486
magical experiences across Apple


1070
00:33:00,486 --> 00:33:01,096
platforms.


1071
00:33:02,356 --> 00:33:04,676
And, Handoff is a fantastic way


1072
00:33:04,676 --> 00:33:06,486
to truly delight your customers.


1073
00:33:07,746 --> 00:33:10,096
The ability to take a task from


1074
00:33:10,096 --> 00:33:12,476
one device, and seamlessly


1075
00:33:12,476 --> 00:33:14,516
transition it to another device


1076
00:33:15,306 --> 00:33:16,976
is an absolutely awesome


1077
00:33:16,976 --> 00:33:17,546
experience.


1078
00:33:19,096 --> 00:33:20,836
Handoff works between iOS,


1079
00:33:21,306 --> 00:33:22,596
macOS, and watchOS.


1080
00:33:23,736 --> 00:33:24,906
It doesn't require an internet


1081
00:33:24,906 --> 00:33:26,006
connection because it uses


1082
00:33:26,046 --> 00:33:27,806
peer-to-peer connectivity, and


1083
00:33:28,436 --> 00:33:30,626
best of all for all of you, is


1084
00:33:30,626 --> 00:33:32,606
it's really easy to set up.


1085
00:33:33,396 --> 00:33:35,016
So, how should you think about


1086
00:33:35,016 --> 00:33:36,136
using Handoff in your


1087
00:33:36,136 --> 00:33:36,706
applications?


1088
00:33:38,106 --> 00:33:39,116
Well, let's go through a few


1089
00:33:39,116 --> 00:33:41,346
examples of how we do it in some


1090
00:33:41,346 --> 00:33:42,776
of our Apple apps.


1091
00:33:43,466 --> 00:33:45,506
Let's say I get a message from


1092
00:33:45,506 --> 00:33:47,926
my handsome co-presenter, and I


1093
00:33:47,926 --> 00:33:49,726
want to reply on my iPhone X


1094
00:33:49,726 --> 00:33:50,946
with a humorous animoji.


1095
00:33:52,286 --> 00:33:53,636
Well, I can get right back into


1096
00:33:53,636 --> 00:33:55,356
that conversation, right from


1097
00:33:55,356 --> 00:33:57,986
the App Switcher on iOS.


1098
00:33:58,876 --> 00:34:00,316
>> Or, if I'm editing a document


1099
00:34:00,316 --> 00:34:03,496
in Pages on my Mac, and I have


1100
00:34:03,496 --> 00:34:04,726
to run, and I want to hand it


1101
00:34:04,726 --> 00:34:06,956
off to my iPad, I can do so by


1102
00:34:06,956 --> 00:34:10,056
tapping the icon in the Dock.


1103
00:34:10,206 --> 00:34:11,626
>> Or, again, if I'm casually


1104
00:34:11,626 --> 00:34:14,366
browsing photos on my watch, and


1105
00:34:14,366 --> 00:34:16,436
I find one from a previous WWDC,


1106
00:34:16,436 --> 00:34:17,485
and I just want to go and look


1107
00:34:17,485 --> 00:34:18,755
at all the photos in that album,


1108
00:34:19,585 --> 00:34:21,085
I can get right back into my


1109
00:34:21,085 --> 00:34:22,456
Photo library on my iPhone,


1110
00:34:22,656 --> 00:34:23,906
without having to go search for


1111
00:34:23,906 --> 00:34:24,786
that one photo.


1112
00:34:26,176 --> 00:34:28,266
Handoff is really powerful, and


1113
00:34:28,266 --> 00:34:29,706
it can save your customers so


1114
00:34:29,706 --> 00:34:31,306
much time when moving from


1115
00:34:31,306 --> 00:34:32,116
device to device.


1116
00:34:32,815 --> 00:34:35,346
So, we're going to show you just


1117
00:34:35,346 --> 00:34:36,556
how easy it is to adopt.


1118
00:34:36,856 --> 00:34:38,565
And, it's all built on top of


1119
00:34:38,565 --> 00:34:40,936
the NSUserActivity API.


1120
00:34:41,806 --> 00:34:44,266
NSUserActivity represents a


1121
00:34:44,266 --> 00:34:46,335
current state or activity that


1122
00:34:46,335 --> 00:34:47,255
you're currently doing.


1123
00:34:47,806 --> 00:34:49,126
In this case, we're composing an


1124
00:34:49,126 --> 00:34:49,416
email.


1125
00:34:52,636 --> 00:34:54,616
When this activity is created,


1126
00:34:55,085 --> 00:34:56,726
all of the nearby devices that


1127
00:34:56,726 --> 00:34:58,186
are signed into the same iCloud


1128
00:34:58,186 --> 00:35:01,006
account all show that Handoff is


1129
00:35:01,006 --> 00:35:01,476
available.


1130
00:35:02,586 --> 00:35:04,106
On the Mac, you'll see an icon


1131
00:35:04,346 --> 00:35:06,516
down in the Dock.


1132
00:35:06,746 --> 00:35:08,706
When you click on this Mail


1133
00:35:08,706 --> 00:35:10,216
icon, the activity will be


1134
00:35:10,216 --> 00:35:13,366
transferred over to the Mac, and


1135
00:35:13,366 --> 00:35:14,906
Mail can launch and continue


1136
00:35:14,906 --> 00:35:15,956
exactly where you left off.


1137
00:35:18,416 --> 00:35:19,686
So, let's look at the code


1138
00:35:19,686 --> 00:35:21,926
necessary to set this up.


1139
00:35:24,416 --> 00:35:26,236
On the originating device, you


1140
00:35:26,236 --> 00:35:27,386
start by creating your


1141
00:35:27,426 --> 00:35:29,076
NSUserActivity with a given


1142
00:35:29,166 --> 00:35:29,356
type.


1143
00:35:30,536 --> 00:35:31,546
And, this type represents the


1144
00:35:31,546 --> 00:35:33,456
kind of activity that your user


1145
00:35:33,456 --> 00:35:34,366
is currently doing.


1146
00:35:34,906 --> 00:35:37,906
You then set a title, and set


1147
00:35:37,906 --> 00:35:39,636
isEligibleForHandoff to true.


1148
00:35:40,996 --> 00:35:42,186
And you then want to populate


1149
00:35:42,186 --> 00:35:43,606
your userInfo dictionary.


1150
00:35:44,576 --> 00:35:45,636
And, you need to fill this with


1151
00:35:45,686 --> 00:35:47,736
all the information necessary to


1152
00:35:47,736 --> 00:35:48,996
be able to continue the


1153
00:35:48,996 --> 00:35:49,636
activity.


1154
00:35:50,806 --> 00:35:52,356
In this case, our example is a


1155
00:35:52,356 --> 00:35:53,876
video, and we're including a


1156
00:35:53,876 --> 00:35:55,766
video ID, and a current play


1157
00:35:55,836 --> 00:35:55,976
time.


1158
00:35:58,266 --> 00:35:59,966
Finally, you'll want to set this


1159
00:35:59,966 --> 00:36:00,816
activity to your


1160
00:36:00,816 --> 00:36:02,376
viewController's userActivity


1161
00:36:02,376 --> 00:36:02,876
property.


1162
00:36:04,016 --> 00:36:05,276
This will cause it to become the


1163
00:36:05,276 --> 00:36:06,836
current activity, whenever that


1164
00:36:06,836 --> 00:36:08,056
viewController is presented.


1165
00:36:09,526 --> 00:36:10,326
And, that's all you need to do


1166
00:36:10,326 --> 00:36:11,356
on the originating device.


1167
00:36:12,946 --> 00:36:14,776
On the continuing device, first


1168
00:36:14,776 --> 00:36:15,886
of all, your app needs to


1169
00:36:15,886 --> 00:36:18,096
declare support for the type of


1170
00:36:18,096 --> 00:36:19,316
activity that you created.


1171
00:36:20,186 --> 00:36:21,606
Then, you need to implement two


1172
00:36:21,846 --> 00:36:23,656
UIApplicationDelegate callbacks.


1173
00:36:24,736 --> 00:36:25,926
The first is application


1174
00:36:25,926 --> 00:36:26,796
willContinueUser


1175
00:36:26,796 --> 00:36:27,616
ActivityWithType.


1176
00:36:27,956 --> 00:36:29,646
And, this is called as soon as


1177
00:36:29,646 --> 00:36:32,086
you click or tap on the icon to


1178
00:36:32,086 --> 00:36:33,216
initiate the handoff.


1179
00:36:34,356 --> 00:36:36,016
At this point, we don't have the


1180
00:36:36,016 --> 00:36:37,616
NSUserActivity object ready yet,


1181
00:36:38,376 --> 00:36:39,436
but you know the kind of


1182
00:36:39,436 --> 00:36:40,306
activity that's going to be


1183
00:36:40,306 --> 00:36:42,136
continued, so you can begin


1184
00:36:42,136 --> 00:36:43,916
preparing your UI.


1185
00:36:44,506 --> 00:36:46,316
Very shortly after, you'll


1186
00:36:46,316 --> 00:36:46,696
receive


1187
00:36:46,696 --> 00:36:48,716
applicationContinueRestoration


1188
00:36:48,716 --> 00:36:50,876
handler, which will contain the


1189
00:36:50,876 --> 00:36:52,016
fully reconstructed


1190
00:36:52,016 --> 00:36:53,296
NSUserActivity object.


1191
00:36:53,706 --> 00:36:56,496
From that point, you can set up


1192
00:36:56,496 --> 00:36:58,766
and continue the experience


1193
00:36:58,766 --> 00:36:59,526
right on that device.


1194
00:37:01,006 --> 00:37:01,896
>> If you've got more


1195
00:37:01,896 --> 00:37:03,376
information than can fit in a


1196
00:37:03,376 --> 00:37:05,206
userInfo dictionary, there's


1197
00:37:05,206 --> 00:37:07,006
great feature of NSUserActivity


1198
00:37:07,006 --> 00:37:08,506
that you can use, called


1199
00:37:08,506 --> 00:37:10,006
continuation streams.


1200
00:37:10,776 --> 00:37:12,366
All you have to do is set the


1201
00:37:12,366 --> 00:37:14,126
supportsContinuationStreams


1202
00:37:14,126 --> 00:37:15,356
property to true.


1203
00:37:16,276 --> 00:37:18,706
Then, on the continuing device,


1204
00:37:19,206 --> 00:37:19,836
you'll call the


1205
00:37:19,836 --> 00:37:22,986
getContinuationStreams method on


1206
00:37:22,986 --> 00:37:24,836
the NSUserActivity, which will


1207
00:37:24,836 --> 00:37:26,466
provide you with an input and an


1208
00:37:26,466 --> 00:37:27,386
output stream.


1209
00:37:28,506 --> 00:37:30,196
Back on the originating device,


1210
00:37:30,796 --> 00:37:32,586
the NSUserActivity's delegate


1211
00:37:32,586 --> 00:37:33,846
will receive a callback


1212
00:37:34,076 --> 00:37:35,586
providing it with input and


1213
00:37:35,586 --> 00:37:36,836
output streams as well.


1214
00:37:37,856 --> 00:37:39,526
And, through these channels, you


1215
00:37:39,526 --> 00:37:40,556
can do bi-directional


1216
00:37:40,556 --> 00:37:42,276
communication between the


1217
00:37:42,276 --> 00:37:44,076
originating and the continuing


1218
00:37:44,076 --> 00:37:44,566
device.


1219
00:37:45,236 --> 00:37:46,006
But, you're going to want to


1220
00:37:46,006 --> 00:37:47,906
finish this as fast as possible,


1221
00:37:47,906 --> 00:37:49,736
because the user may be moving


1222
00:37:49,736 --> 00:37:51,286
the devices apart to leave.


1223
00:37:52,536 --> 00:37:54,276
For more about streams, check


1224
00:37:54,276 --> 00:37:55,886
out the Stream Programming Guide


1225
00:37:55,886 --> 00:37:57,376
on developer.apple.com.


1226
00:37:57,896 --> 00:38:00,176
>> Now, this is great for moving


1227
00:38:00,176 --> 00:38:01,096
things that wouldn't be


1228
00:38:01,096 --> 00:38:01,976
appropriate to put in the


1229
00:38:01,976 --> 00:38:03,986
userInfo dictionary, like images


1230
00:38:03,986 --> 00:38:05,856
or video content, such as in our


1231
00:38:05,856 --> 00:38:07,336
email handoff example earlier.


1232
00:38:08,376 --> 00:38:09,816
But, for document-based apps,


1233
00:38:10,326 --> 00:38:11,676
the handoff story is even


1234
00:38:11,726 --> 00:38:12,216
easier.


1235
00:38:13,166 --> 00:38:14,216
Because you get much of this


1236
00:38:14,216 --> 00:38:15,146
behavior for free.


1237
00:38:16,296 --> 00:38:17,846
UIDocument and NSDocument


1238
00:38:17,846 --> 00:38:19,066
automatically create


1239
00:38:19,196 --> 00:38:20,976
NSUserActivity objects to


1240
00:38:20,976 --> 00:38:22,446
represent the document that is


1241
00:38:22,446 --> 00:38:23,546
currently being edited.


1242
00:38:24,086 --> 00:38:26,846
And, this works great for all


1243
00:38:26,846 --> 00:38:29,746
documents stored in iCloud.


1244
00:38:30,006 --> 00:38:31,096
All you have to do in your


1245
00:38:31,096 --> 00:38:32,726
applications is configure your


1246
00:38:32,726 --> 00:38:33,836
info.plist accordingly.


1247
00:38:34,426 --> 00:38:37,416
In addition to app-to-app


1248
00:38:37,416 --> 00:38:39,856
handoff, we also support


1249
00:38:39,856 --> 00:38:41,776
app-to-web browser handoff.


1250
00:38:43,146 --> 00:38:44,476
If you have a great web


1251
00:38:44,476 --> 00:38:46,516
experience to go alongside your


1252
00:38:46,516 --> 00:38:49,226
native app experience, and the


1253
00:38:49,226 --> 00:38:50,596
continuing device doesn't have


1254
00:38:50,596 --> 00:38:52,856
your native app installed, you


1255
00:38:52,856 --> 00:38:54,906
can handoff to Safari, and


1256
00:38:54,906 --> 00:38:56,496
continue the activity right in


1257
00:38:56,526 --> 00:38:58,696
the web browser.


1258
00:38:58,856 --> 00:39:00,846
>> Handoff also supports web


1259
00:39:00,846 --> 00:39:02,606
browser-to-app handoffs.


1260
00:39:03,576 --> 00:39:05,206
You need to configure a list of


1261
00:39:05,206 --> 00:39:06,766
approved app IDs on your web


1262
00:39:06,766 --> 00:39:08,756
server, and then you need to add


1263
00:39:08,756 --> 00:39:10,576
an associated domain entitlement


1264
00:39:11,066 --> 00:39:12,106
in your iOS app.


1265
00:39:12,646 --> 00:39:13,986
And then, the user can


1266
00:39:13,986 --> 00:39:15,516
seamlessly continue from your


1267
00:39:15,516 --> 00:39:17,616
web experience to your app on


1268
00:39:17,616 --> 00:39:18,126
iOS.


1269
00:39:18,876 --> 00:39:20,616
For even more about this, check


1270
00:39:20,616 --> 00:39:22,706
out this great Handoff talk from


1271
00:39:22,706 --> 00:39:23,726
2014.


1272
00:39:24,246 --> 00:39:26,796
>> So, that's Handoff.


1273
00:39:27,566 --> 00:39:28,896
Go out and implement it in your


1274
00:39:28,896 --> 00:39:29,706
applications.


1275
00:39:29,936 --> 00:39:32,256
Truly delight your users, and as


1276
00:39:32,256 --> 00:39:33,756
an added bonus, the


1277
00:39:33,756 --> 00:39:35,806
NSUserActivity API is used all


1278
00:39:35,806 --> 00:39:37,146
over the system experiences.


1279
00:39:37,296 --> 00:39:38,656
In things like Spotlight search,


1280
00:39:38,796 --> 00:39:40,116
and the new Siri Shortcuts


1281
00:39:40,116 --> 00:39:40,426
feature.


1282
00:39:41,826 --> 00:39:43,376
For more about these, check out


1283
00:39:43,376 --> 00:39:44,676
these talks, from previous


1284
00:39:44,676 --> 00:39:44,916
WWDCs.


1285
00:39:44,916 --> 00:39:45,446
Thank you.


1286
00:39:46,516 --> 00:39:52,500
[ Applause ]


1287
00:39:56,866 --> 00:39:58,936
>> You write amazing apps and


1288
00:39:58,936 --> 00:39:59,846
experiences.


1289
00:40:00,956 --> 00:40:02,996
But, from time to time, you have


1290
00:40:03,076 --> 00:40:04,006
problems that you need to


1291
00:40:04,006 --> 00:40:04,706
investigate.


1292
00:40:05,466 --> 00:40:07,286
And, for that, we're going to


1293
00:40:07,286 --> 00:40:09,256
teach you some Matrix-level


1294
00:40:09,256 --> 00:40:10,176
debugging skills.


1295
00:40:10,566 --> 00:40:12,866
But first, a word of warning.


1296
00:40:14,236 --> 00:40:15,986
Before we give you this red


1297
00:40:15,986 --> 00:40:17,616
pill, and show you just how deep


1298
00:40:17,616 --> 00:40:19,836
the rabbit hole goes, I want to


1299
00:40:19,836 --> 00:40:21,056
let you know that the methods


1300
00:40:21,056 --> 00:40:22,246
that we're going to show you in


1301
00:40:22,246 --> 00:40:23,976
this section are great for


1302
00:40:23,976 --> 00:40:25,866
debugging, but must not be


1303
00:40:25,866 --> 00:40:27,116
submitted to the App Store.


1304
00:40:27,946 --> 00:40:29,726
If you do, your application will


1305
00:40:29,726 --> 00:40:31,046
be rejected, and you'll have a


1306
00:40:31,046 --> 00:40:31,606
bad day.


1307
00:40:32,476 --> 00:40:34,056
So, with that warning, let's get


1308
00:40:34,056 --> 00:40:34,516
started.


1309
00:40:35,036 --> 00:40:37,276
We're going to start with a


1310
00:40:37,276 --> 00:40:38,576
detective mindset.


1311
00:40:38,966 --> 00:40:40,836
How you should approach problems


1312
00:40:40,836 --> 00:40:41,946
that you find in your program.


1313
00:40:42,976 --> 00:40:44,366
Next, we're going to talk to you


1314
00:40:44,366 --> 00:40:45,886
about how to debug issues with


1315
00:40:45,886 --> 00:40:47,466
your views and view controllers.


1316
00:40:48,306 --> 00:40:49,406
We're going to teach you about


1317
00:40:49,406 --> 00:40:51,436
LLDB, and how you can use it to


1318
00:40:51,436 --> 00:40:53,066
identify state issues in your


1319
00:40:53,066 --> 00:40:53,386
app.


1320
00:40:54,336 --> 00:40:55,516
And finally, we're going to look


1321
00:40:55,516 --> 00:40:56,906
at some techniques for some


1322
00:40:56,906 --> 00:40:58,716
great memory issues that you


1323
00:40:58,716 --> 00:41:00,356
might run into that make you


1324
00:41:00,356 --> 00:41:01,646
feel less than great.


1325
00:41:01,996 --> 00:41:04,326
So, let's start with a detective


1326
00:41:04,326 --> 00:41:04,956
mindset.


1327
00:41:05,896 --> 00:41:07,716
When you're looking at a problem


1328
00:41:07,716 --> 00:41:09,286
in your program, you want to


1329
00:41:09,286 --> 00:41:10,566
make sure to verify your


1330
00:41:10,566 --> 00:41:11,266
assumptions.


1331
00:41:11,656 --> 00:41:13,206
What do you expect your program


1332
00:41:13,206 --> 00:41:13,866
to be doing?


1333
00:41:14,006 --> 00:41:15,356
And then, verify that it's


1334
00:41:15,356 --> 00:41:16,336
actually doing that.


1335
00:41:17,086 --> 00:41:18,686
This can be a great step, when


1336
00:41:18,686 --> 00:41:20,056
you start to debug issues in


1337
00:41:20,056 --> 00:41:20,476
your app.


1338
00:41:21,996 --> 00:41:23,516
Once you're pretty sure which of


1339
00:41:23,516 --> 00:41:24,656
your assumptions is being


1340
00:41:24,656 --> 00:41:27,956
violated, you can start by


1341
00:41:27,956 --> 00:41:29,196
looking for clues.


1342
00:41:30,126 --> 00:41:31,316
You'll use the tools that we'll


1343
00:41:31,316 --> 00:41:33,196
show you during this section to


1344
00:41:33,196 --> 00:41:34,956
poke and prod at your objects


1345
00:41:34,956 --> 00:41:35,676
and structs.


1346
00:41:36,736 --> 00:41:38,126
And then, you're going to want


1347
00:41:38,126 --> 00:41:40,156
to test your hunches, by


1348
00:41:40,156 --> 00:41:42,176
changing state in your app, and


1349
00:41:42,176 --> 00:41:43,256
verifying that you found the


1350
00:41:43,256 --> 00:41:43,656
issue.


1351
00:41:44,816 --> 00:41:46,416
Let's start with a sample bug


1352
00:41:46,576 --> 00:41:47,666
that's a real bug.


1353
00:41:47,726 --> 00:41:50,406
One of the great things that I


1354
00:41:50,406 --> 00:41:51,596
get the privilege of working on


1355
00:41:51,596 --> 00:41:53,466
here at Apple, is the screenshot


1356
00:41:53,466 --> 00:41:53,846
editor.


1357
00:41:54,896 --> 00:41:56,456
Recently, we were debugging an


1358
00:41:56,456 --> 00:41:58,576
issue, where my screenshot pen


1359
00:41:58,576 --> 00:42:00,346
tools were missing, which is


1360
00:42:00,346 --> 00:42:00,986
pretty bad.


1361
00:42:01,546 --> 00:42:04,656
Ben, are there any tools we can


1362
00:42:04,656 --> 00:42:06,276
use to help diagnose this issue?


1363
00:42:07,246 --> 00:42:07,826
>> Absolutely.


1364
00:42:08,556 --> 00:42:10,566
Built right into Xcode, is the


1365
00:42:10,566 --> 00:42:11,466
View Debugger.


1366
00:42:12,476 --> 00:42:13,726
You can launch it by simply


1367
00:42:13,726 --> 00:42:14,696
clicking on this icon in the


1368
00:42:14,696 --> 00:42:15,526
bottom toolbar.


1369
00:42:16,606 --> 00:42:18,526
And, Xcode will show you a 3D


1370
00:42:18,526 --> 00:42:20,136
representation of your entire


1371
00:42:20,136 --> 00:42:20,986
view hierarchy.


1372
00:42:21,516 --> 00:42:24,596
As you can see here, our pencil


1373
00:42:24,596 --> 00:42:26,506
controls are still there, but


1374
00:42:26,506 --> 00:42:27,956
they're being occluded by this


1375
00:42:27,956 --> 00:42:29,406
full screen view in front of it.


1376
00:42:30,686 --> 00:42:31,576
So, we need to go and look at


1377
00:42:31,626 --> 00:42:32,736
where we're building this UI,


1378
00:42:32,846 --> 00:42:33,736
and see what's happening with


1379
00:42:33,736 --> 00:42:34,526
the ordering there, Peter, I


1380
00:42:34,526 --> 00:42:34,786
think.


1381
00:42:36,036 --> 00:42:36,726
>> That's great.


1382
00:42:36,936 --> 00:42:38,396
The Xcode View Debugger is a


1383
00:42:38,396 --> 00:42:40,046
wonderful tool for debugging


1384
00:42:40,046 --> 00:42:41,616
view issues in your app.


1385
00:42:42,806 --> 00:42:44,216
There are even more tools that


1386
00:42:44,216 --> 00:42:46,536
you can use to help out with


1387
00:42:47,776 --> 00:42:47,876
this.


1388
00:42:48,096 --> 00:42:50,036
UIView recursiveDescription,


1389
00:42:50,696 --> 00:42:52,826
UIView parentDescription, and


1390
00:42:53,096 --> 00:42:54,156
the class method


1391
00:42:54,156 --> 00:42:56,196
UIViewController printHierarchy


1392
00:42:56,796 --> 00:42:58,566
are great tools for debugging


1393
00:42:58,566 --> 00:42:59,856
view and view controller issues


1394
00:43:00,036 --> 00:43:01,796
in your app.


1395
00:43:01,956 --> 00:43:03,966
Again, they're also great things


1396
00:43:03,966 --> 00:43:05,326
to not include when you submit


1397
00:43:05,326 --> 00:43:06,006
to the App Store.


1398
00:43:07,436 --> 00:43:08,716
It's important to note that


1399
00:43:08,716 --> 00:43:10,646
these are Objective-C selectors.


1400
00:43:11,146 --> 00:43:12,466
So, before using them, you'll


1401
00:43:12,466 --> 00:43:14,316
want to put your debugger into


1402
00:43:14,316 --> 00:43:16,706
Objective-C mode, using this


1403
00:43:16,706 --> 00:43:17,166
command.


1404
00:43:18,276 --> 00:43:19,826
We're going to walk through each


1405
00:43:19,826 --> 00:43:20,996
of these debugging methods,


1406
00:43:21,146 --> 00:43:22,976
step-by-step, and how they can


1407
00:43:22,976 --> 00:43:25,366
help you, starting with UIView


1408
00:43:25,526 --> 00:43:27,196
recursiveDescription.


1409
00:43:28,616 --> 00:43:29,526
>> So, UIView


1410
00:43:29,526 --> 00:43:31,796
recursiveDescription will print


1411
00:43:31,826 --> 00:43:34,136
the view hierarchy of the


1412
00:43:34,136 --> 00:43:35,156
receiver -- the subview


1413
00:43:35,156 --> 00:43:35,606
hierarchy.


1414
00:43:36,096 --> 00:43:37,996
And, some associated properties


1415
00:43:38,196 --> 00:43:39,256
to help you understand the


1416
00:43:39,256 --> 00:43:40,216
layout attributes.


1417
00:43:40,706 --> 00:43:42,896
Let's take a look at an example.


1418
00:43:43,696 --> 00:43:44,536
We have another bug in our


1419
00:43:44,536 --> 00:43:46,086
screenshots UI with a missing


1420
00:43:46,086 --> 00:43:46,386
view.


1421
00:43:47,686 --> 00:43:48,276
So, we're going to call


1422
00:43:48,276 --> 00:43:49,926
recursiveDescription on our


1423
00:43:49,926 --> 00:43:51,516
viewController's view.


1424
00:43:52,086 --> 00:43:55,086
Now, this might look like a wall


1425
00:43:55,086 --> 00:43:56,346
of debug text, and that's


1426
00:43:56,346 --> 00:43:57,166
because it is.


1427
00:43:57,626 --> 00:43:59,916
But, we know what we're looking


1428
00:43:59,916 --> 00:44:00,196
for.


1429
00:44:00,196 --> 00:44:02,206
Our screenshots view is there.


1430
00:44:02,206 --> 00:44:03,256
We can see it.


1431
00:44:03,506 --> 00:44:05,606
And, on inspection, we can see


1432
00:44:05,606 --> 00:44:06,656
that it is currently hidden.


1433
00:44:07,226 --> 00:44:09,266
So, we need to go and look at


1434
00:44:09,266 --> 00:44:10,786
everywhere we're setting the


1435
00:44:10,786 --> 00:44:11,876
hidden property on this view,


1436
00:44:11,876 --> 00:44:13,366
and really understand why it's


1437
00:44:14,086 --> 00:44:15,406
not showing.


1438
00:44:16,236 --> 00:44:16,736
In addition to


1439
00:44:16,736 --> 00:44:18,626
recursiveDescription, UIView


1440
00:44:18,626 --> 00:44:20,166
also has parentDescription,


1441
00:44:20,476 --> 00:44:21,666
which will walk up the view


1442
00:44:21,666 --> 00:44:24,046
hierarchy to the parent views,


1443
00:44:24,946 --> 00:44:26,486
until it reaches no -- to a nil


1444
00:44:26,486 --> 00:44:26,866
parent.


1445
00:44:27,536 --> 00:44:28,626
It'll print the same kind of


1446
00:44:28,626 --> 00:44:29,536
debugging information.


1447
00:44:31,856 --> 00:44:33,476
>> RecursiveDescription and


1448
00:44:33,476 --> 00:44:35,206
parentDescription are great for


1449
00:44:35,206 --> 00:44:36,326
UIView issues.


1450
00:44:36,946 --> 00:44:38,066
But, sometimes you have a


1451
00:44:38,066 --> 00:44:40,016
problem with UIViewControllers.


1452
00:44:40,246 --> 00:44:41,736
And, for that you can use the


1453
00:44:41,736 --> 00:44:43,026
great class method,


1454
00:44:43,406 --> 00:44:45,686
UIViewController printHierarchy.


1455
00:44:47,026 --> 00:44:48,536
Recently we had a bug in our


1456
00:44:48,536 --> 00:44:50,286
screenshot editor, where one of


1457
00:44:50,286 --> 00:44:51,676
our viewControllers had not yet


1458
00:44:51,676 --> 00:44:53,296
received the viewDidAppear


1459
00:44:53,296 --> 00:44:53,846
message.


1460
00:44:54,266 --> 00:44:55,366
And so, it hadn't set up its


1461
00:44:55,366 --> 00:44:56,256
state appropriately.


1462
00:44:57,316 --> 00:44:58,916
By running UIViewController


1463
00:44:58,986 --> 00:45:01,136
printHierarchy, we can get an


1464
00:45:01,136 --> 00:45:02,746
output of all of our presenting


1465
00:45:02,746 --> 00:45:04,826
viewControllers, our presented


1466
00:45:04,826 --> 00:45:06,926
viewControllers, our


1467
00:45:06,976 --> 00:45:08,246
parentViewControllers and


1468
00:45:08,246 --> 00:45:10,466
childViewControllers, and even


1469
00:45:10,466 --> 00:45:11,966
our presentationControllers.


1470
00:45:12,306 --> 00:45:13,616
It's Controllerpalooza.


1471
00:45:14,436 --> 00:45:16,466
So, let's run printHierarchy in


1472
00:45:16,466 --> 00:45:17,296
our screenshot UI.


1473
00:45:19,176 --> 00:45:20,906
Here we can see our


1474
00:45:20,906 --> 00:45:22,136
viewController hierarchy.


1475
00:45:22,476 --> 00:45:23,506
And, when we inspect the


1476
00:45:23,506 --> 00:45:24,716
viewController that we're having


1477
00:45:24,716 --> 00:45:26,476
the problem with, we can see


1478
00:45:26,476 --> 00:45:28,096
that it's stuck in the appearing


1479
00:45:28,096 --> 00:45:28,486
state.


1480
00:45:29,366 --> 00:45:30,936
So, we had missed a callback.


1481
00:45:31,136 --> 00:45:32,666
And so, we need to look into our


1482
00:45:32,666 --> 00:45:34,256
app to where we're calling this


1483
00:45:34,286 --> 00:45:35,986
callback, and then we found the


1484
00:45:35,986 --> 00:45:36,396
issue.


1485
00:45:37,516 --> 00:45:38,136
So, great.


1486
00:45:38,576 --> 00:45:39,956
Using these methods, you can


1487
00:45:39,956 --> 00:45:41,926
identify view and viewController


1488
00:45:41,926 --> 00:45:42,476
issues.


1489
00:45:43,156 --> 00:45:44,366
But, sometimes you have a more


1490
00:45:44,366 --> 00:45:46,156
fundamental issue with your app.


1491
00:45:46,976 --> 00:45:48,716
And, for that we can use some


1492
00:45:48,716 --> 00:45:50,326
great state debugging tips that


1493
00:45:50,326 --> 00:45:50,986
we have for you.


1494
00:45:52,016 --> 00:45:55,066
LLDB's expression command can


1495
00:45:55,066 --> 00:45:56,766
let you run arbitrary code in


1496
00:45:56,766 --> 00:45:57,296
the debugger.


1497
00:45:58,066 --> 00:45:58,786
Think about that.


1498
00:45:58,786 --> 00:46:00,676
Any code that you can run in the


1499
00:46:00,676 --> 00:46:02,376
source editor, you can write


1500
00:46:02,376 --> 00:46:03,986
right in the debugger, and run


1501
00:46:04,216 --> 00:46:05,696
while your program is running.


1502
00:46:06,406 --> 00:46:08,446
This is so useful for debugging.


1503
00:46:09,166 --> 00:46:10,416
You can call functions on your


1504
00:46:10,416 --> 00:46:12,496
structs, get properties on your


1505
00:46:12,496 --> 00:46:14,816
objects, and better diagnose


1506
00:46:14,926 --> 00:46:16,146
what your program is doing.


1507
00:46:17,176 --> 00:46:18,726
For even more about debugging,


1508
00:46:19,136 --> 00:46:20,856
check out this great talk on how


1509
00:46:20,856 --> 00:46:23,286
to debug with LLDB from 2012,


1510
00:46:23,866 --> 00:46:25,776
and how to debug with Swift from


1511
00:46:25,776 --> 00:46:26,826
2014.


1512
00:46:27,796 --> 00:46:29,376
There's some great functions


1513
00:46:29,376 --> 00:46:31,346
that you can run inside of LLDB


1514
00:46:31,346 --> 00:46:33,006
with the expression command,


1515
00:46:33,116 --> 00:46:34,236
that we're going to teach you.


1516
00:46:34,486 --> 00:46:35,976
And, the first one, is dump.


1517
00:46:36,516 --> 00:46:40,906
[ Laughter ]


1518
00:46:41,406 --> 00:46:43,446
>> Dump will print all of your


1519
00:46:43,446 --> 00:46:45,866
Swift objects and structs


1520
00:46:46,286 --> 00:46:46,816
properties.


1521
00:46:48,246 --> 00:46:49,656
Let's go through another bug


1522
00:46:50,066 --> 00:46:51,536
that we have in some of our


1523
00:46:51,536 --> 00:46:52,106
custom UI.


1524
00:46:53,686 --> 00:46:55,076
We have a view with a number of


1525
00:46:55,156 --> 00:46:57,906
subviews, including some labels,


1526
00:46:57,906 --> 00:46:58,676
and an imageView.


1527
00:46:59,026 --> 00:47:00,566
And, right now one of our labels


1528
00:47:00,566 --> 00:47:01,046
is missing.


1529
00:47:02,276 --> 00:47:03,286
So, we're going to run dump on


1530
00:47:03,286 --> 00:47:05,636
our parent view, and take a look


1531
00:47:05,636 --> 00:47:06,396
at what's going on here.


1532
00:47:07,906 --> 00:47:08,796
So, we've found our missing


1533
00:47:08,796 --> 00:47:09,246
label.


1534
00:47:09,246 --> 00:47:12,046
It is here, but it's -- if we


1535
00:47:12,046 --> 00:47:13,076
bring up and look at the


1536
00:47:13,116 --> 00:47:14,906
imageView that's alongside it,


1537
00:47:15,756 --> 00:47:18,236
we notice that the frame of


1538
00:47:18,236 --> 00:47:19,896
these two things, they both have


1539
00:47:19,896 --> 00:47:20,926
the same origin.


1540
00:47:22,126 --> 00:47:22,916
So, what's likely happening


1541
00:47:22,916 --> 00:47:24,366
here, is that the label is


1542
00:47:24,366 --> 00:47:26,226
obstructed by the imageView.


1543
00:47:27,296 --> 00:47:28,086
So, we need to go and look at


1544
00:47:28,086 --> 00:47:29,826
our layout code again, I think.


1545
00:47:30,576 --> 00:47:34,136
In addition to dump for Swift


1546
00:47:34,136 --> 00:47:36,406
objects, if you still have some


1547
00:47:36,406 --> 00:47:37,816
Objective-C code lying around,


1548
00:47:38,606 --> 00:47:40,306
NSObject also has the


1549
00:47:40,366 --> 00:47:41,546
ivarDescription method.


1550
00:47:42,856 --> 00:47:44,146
This will print all of the


1551
00:47:44,146 --> 00:47:45,676
instance variables of your


1552
00:47:45,676 --> 00:47:46,806
Objective-C objects.


1553
00:47:48,546 --> 00:47:49,986
We have another bug in our


1554
00:47:49,986 --> 00:47:51,716
screenshot's code, where our


1555
00:47:51,716 --> 00:47:53,176
crop handles aren't working for


1556
00:47:53,176 --> 00:47:53,626
some reason.


1557
00:47:54,116 --> 00:47:57,786
If we call ivarDescription on


1558
00:47:57,786 --> 00:47:59,926
our screenshot's view, we can


1559
00:47:59,926 --> 00:48:02,826
see by looking closely, that our


1560
00:48:02,826 --> 00:48:06,156
cropEnabled ivar is currently


1561
00:48:06,776 --> 00:48:07,686
set to no.


1562
00:48:07,766 --> 00:48:09,156
So, we have a good place to


1563
00:48:09,306 --> 00:48:10,536
start investigating this bug.


1564
00:48:11,876 --> 00:48:12,596
>> That's great.


1565
00:48:13,296 --> 00:48:15,756
Using dump and ivarDescription


1566
00:48:15,876 --> 00:48:17,436
are great ways to diagnose


1567
00:48:17,466 --> 00:48:20,016
problems with your app.


1568
00:48:20,246 --> 00:48:22,226
Another wonderful debugging tip


1569
00:48:22,226 --> 00:48:23,426
and trick that we have for you


1570
00:48:23,726 --> 00:48:24,726
is breakpoints.


1571
00:48:25,726 --> 00:48:27,366
Breakpoints let you pause the


1572
00:48:27,366 --> 00:48:28,966
program at arbitrary states of


1573
00:48:28,966 --> 00:48:31,526
execution, and run commands.


1574
00:48:32,546 --> 00:48:34,916
And, using the LLDB command


1575
00:48:34,916 --> 00:48:37,396
line, or the Xcode UI, you can


1576
00:48:37,396 --> 00:48:39,296
even add conditions before these


1577
00:48:39,296 --> 00:48:40,976
breakpoints are run, and


1578
00:48:40,976 --> 00:48:42,586
commands to run every time the


1579
00:48:42,586 --> 00:48:43,486
breakpoint is hit.


1580
00:48:44,676 --> 00:48:46,086
Breakpoints are an essential


1581
00:48:46,086 --> 00:48:47,586
part of your debugging workflow.


1582
00:48:48,126 --> 00:48:49,476
And, you can use the expression


1583
00:48:49,476 --> 00:48:51,246
command, and dump, and


1584
00:48:51,246 --> 00:48:52,956
ivarDescription, with the


1585
00:48:52,956 --> 00:48:54,136
breakpoints that you set up in


1586
00:48:54,136 --> 00:48:54,496
Xcode.


1587
00:48:54,956 --> 00:48:56,736
I really encourage you to use


1588
00:48:56,736 --> 00:48:58,166
breakpoints next time you're


1589
00:48:58,166 --> 00:48:59,586
debugging an issue with your


1590
00:49:00,296 --> 00:49:00,386
app.


1591
00:49:01,296 --> 00:49:02,846
But, sometimes we don't have an


1592
00:49:02,846 --> 00:49:03,736
issue with views or


1593
00:49:03,736 --> 00:49:04,706
viewControllers.


1594
00:49:05,316 --> 00:49:06,656
We don't have an issue with


1595
00:49:06,656 --> 00:49:09,126
state, instead we have a really


1596
00:49:09,126 --> 00:49:11,036
hairy memory management issue.


1597
00:49:12,246 --> 00:49:13,626
Ben, are there any tools we can


1598
00:49:13,626 --> 00:49:14,316
use for this?


1599
00:49:15,416 --> 00:49:16,196
>> Well, I'm glad you asked


1600
00:49:16,196 --> 00:49:17,826
Peter, because yes, there is


1601
00:49:17,826 --> 00:49:19,456
another great tool built into


1602
00:49:19,456 --> 00:49:19,886
Xcode.


1603
00:49:20,486 --> 00:49:21,746
The Xcode memory debugger.


1604
00:49:22,346 --> 00:49:24,776
This tool will help you


1605
00:49:24,776 --> 00:49:26,396
visualize exactly how your


1606
00:49:26,396 --> 00:49:27,806
application is using memory.


1607
00:49:29,296 --> 00:49:30,796
Peter and I were debugging an


1608
00:49:30,796 --> 00:49:31,666
issue the other day, where we


1609
00:49:31,666 --> 00:49:32,916
had a leaking viewController.


1610
00:49:33,816 --> 00:49:35,046
And, we could see that here that


1611
00:49:35,046 --> 00:49:36,516
it's being held onto by a block.


1612
00:49:37,846 --> 00:49:39,106
By enabling Malloc stack


1613
00:49:39,106 --> 00:49:40,616
logging, we were able to see the


1614
00:49:40,616 --> 00:49:42,966
full backtrace of exactly when


1615
00:49:42,966 --> 00:49:44,066
this block was allocated.


1616
00:49:44,626 --> 00:49:47,486
By zooming in, we can see that


1617
00:49:47,486 --> 00:49:49,026
this block was actually created


1618
00:49:49,266 --> 00:49:50,356
by that viewController.


1619
00:49:51,406 --> 00:49:52,666
And so, that block is holding


1620
00:49:52,666 --> 00:49:53,696
onto that viewController.


1621
00:49:54,116 --> 00:49:55,246
But that viewController is also


1622
00:49:55,246 --> 00:49:56,076
holding onto the block.


1623
00:49:57,236 --> 00:49:58,316
And, there's our retain cycle.


1624
00:49:59,616 --> 00:49:59,976
>> Wow.


1625
00:50:00,086 --> 00:50:01,966
Great! The Xcode memory graph


1626
00:50:01,966 --> 00:50:03,766
debugger is such a great tool


1627
00:50:03,766 --> 00:50:05,606
for diagnosing issues like this


1628
00:50:05,736 --> 00:50:06,276
in your app.


1629
00:50:07,156 --> 00:50:08,656
For even more, check out the


1630
00:50:08,656 --> 00:50:10,426
Debugging with Xcode 9 talk from


1631
00:50:10,426 --> 00:50:11,656
2017.


1632
00:50:12,176 --> 00:50:14,756
So, that's how you can debug


1633
00:50:14,756 --> 00:50:16,256
your app like a pro.


1634
00:50:18,496 --> 00:50:20,426
Make sure to think like a


1635
00:50:20,426 --> 00:50:22,356
detective whenever you encounter


1636
00:50:22,356 --> 00:50:23,746
problems with your program.


1637
00:50:25,166 --> 00:50:27,776
Use the Xcode view debugger, and


1638
00:50:27,776 --> 00:50:29,896
memory graph debugger to dive


1639
00:50:29,896 --> 00:50:31,796
deep on view- and memory-related


1640
00:50:31,796 --> 00:50:32,326
issues.


1641
00:50:33,026 --> 00:50:36,066
And, use LLDB's expression


1642
00:50:36,586 --> 00:50:39,216
command with dump, and all the


1643
00:50:39,216 --> 00:50:40,596
other great debugging methods we


1644
00:50:40,596 --> 00:50:41,446
talked about here.


1645
00:50:44,316 --> 00:50:44,976
Thank you.


1646
00:50:45,516 --> 00:50:51,846
[ Applause ]


1647
00:50:52,346 --> 00:50:54,356
>> So, we've covered six really


1648
00:50:54,356 --> 00:50:55,716
exciting topics this morning,


1649
00:50:56,306 --> 00:50:56,946
this afternoon.


1650
00:50:56,946 --> 00:50:59,836
But, we've barely scratched the


1651
00:50:59,836 --> 00:51:00,436
surface.


1652
00:51:00,966 --> 00:51:02,036
We encourage you to go out and


1653
00:51:02,036 --> 00:51:03,036
check out the talks that we


1654
00:51:03,036 --> 00:51:03,886
referenced throughout this


1655
00:51:03,886 --> 00:51:05,916
presentation, and add even more


1656
00:51:05,916 --> 00:51:07,566
delight to your applications.


1657
00:51:08,536 --> 00:51:10,156
>> For more information, check


1658
00:51:10,156 --> 00:51:11,456
out our page on the developer


1659
00:51:11,456 --> 00:51:13,156
portal, and thank you.


1660
00:51:13,156 --> 00:51:14,036
We hope you had a great


1661
00:51:14,036 --> 00:51:14,606
conference.


1662
00:51:14,756 --> 00:51:15,336
>> Thank you.

