1
00:00:23,516 --> 00:00:28,006
[Applause]


2
00:00:28,506 --> 00:00:29,076
>> ANTONIO CAVEDONI:
Hi, everyone.


3
00:00:30,006 --> 00:00:31,256
My name is Antonio Cavedoni.


4
00:00:31,906 --> 00:00:33,556
I am a member of the team


5
00:00:33,636 --> 00:00:35,286
who designed the new
San Francisco fonts,


6
00:00:35,506 --> 00:00:37,966
and I am thrilled to be here
to introduce them to you.


7
00:00:38,596 --> 00:00:41,476
So on the agenda today
we are going to look


8
00:00:41,476 --> 00:00:44,686
at the San Francisco fonts,
how they were designed,


9
00:00:44,686 --> 00:00:46,066
and what they mean
for our platforms.


10
00:00:46,606 --> 00:00:48,906
We are going to look
at some new features


11
00:00:49,216 --> 00:00:51,816
and how you can make your
apps more awesome with them,


12
00:00:52,396 --> 00:00:54,516
both coding-wise
and design-wise.


13
00:00:55,506 --> 00:00:56,916
And lastly, we are going to talk


14
00:00:56,916 --> 00:00:59,536
about some potential API
pitfalls that you may run


15
00:00:59,536 --> 00:01:05,436
into when adopting these
new fonts in your apps.


16
00:01:05,846 --> 00:01:06,776
So let's get started.


17
00:01:09,386 --> 00:01:10,356
Text is everywhere.


18
00:01:12,836 --> 00:01:17,236
And fonts make text possible.


19
00:01:19,376 --> 00:01:20,966
But fonts also have a voice.


20
00:01:21,496 --> 00:01:29,326
And good fonts enhance your app
content and your user interface,


21
00:01:29,836 --> 00:01:34,006
and they do not get in your way.


22
00:01:34,266 --> 00:01:38,086
You read fonts all the
time, and you read them


23
00:01:38,386 --> 00:01:41,396
on different screens,
on different devices,


24
00:01:41,896 --> 00:01:43,676
and at different point sizes.


25
00:01:44,546 --> 00:01:46,796
You also read them at
different viewing conditions,


26
00:01:46,796 --> 00:01:49,676
such as light conditions
or viewing distances


27
00:01:50,026 --> 00:01:51,916
or screen sizes and resolutions.


28
00:01:52,636 --> 00:01:58,596
So we set out to improve on
the typography of our platform,


29
00:01:58,596 --> 00:02:01,806
and we came up with
a new typeface design


30
00:02:01,806 --> 00:02:03,336
that we call San Francisco.


31
00:02:05,446 --> 00:02:11,036
San Francisco is a new family
of typefaces designed by Apple


32
00:02:11,146 --> 00:02:17,046
in California, and it is both
inconspicuous and beautiful.


33
00:02:18,586 --> 00:02:21,756
San Francisco unifies
our platform


34
00:02:21,756 --> 00:02:25,646
with a consistent typographic
voice and a reading experience.


35
00:02:26,756 --> 00:02:28,466
So this is what it looks like.


36
00:02:28,466 --> 00:02:33,866
San Francisco is what is called
in typography as a grotesque,


37
00:02:33,866 --> 00:02:35,926
which is another word
for a sans serif.


38
00:02:37,236 --> 00:02:39,636
And this is the family tree.


39
00:02:39,636 --> 00:02:41,866
The San Francisco
design is comprised


40
00:02:41,866 --> 00:02:43,066
of two main subfamilies.


41
00:02:44,336 --> 00:02:48,436
We have SF, which ships on
iOS and OS X, and SF Compact,


42
00:02:48,656 --> 00:02:49,756
which ships on the Watch.


43
00:02:50,306 --> 00:02:56,396
Both families have two cuts
that are called optical sizes,


44
00:02:56,396 --> 00:02:58,546
and they are text and
display, and I will talk


45
00:02:58,546 --> 00:02:59,826
about these in a second.


46
00:03:00,886 --> 00:03:04,246
And all of the fonts have six
weights for the text families


47
00:03:04,716 --> 00:03:07,436
and nine for the display ones.


48
00:03:08,416 --> 00:03:12,346
So again, SF ships
on iOS and OS X,


49
00:03:13,336 --> 00:03:15,966
and SF Compact ships
on the Watch.


50
00:03:18,026 --> 00:03:20,206
So now let's look at the
difference between these two.


51
00:03:21,876 --> 00:03:26,416
SF and SF Compact
are sibling designs,


52
00:03:26,506 --> 00:03:28,146
meaning they are
related but not equal,


53
00:03:28,806 --> 00:03:30,076
and the biggest formal
difference


54
00:03:30,076 --> 00:03:32,616
between the two is how we
handle the round shapes.


55
00:03:34,546 --> 00:03:36,616
In SF, they are round,
and in SF Compact,


56
00:03:36,616 --> 00:03:38,826
they are actually slightly flat.


57
00:03:39,316 --> 00:03:41,566
So that achieves two main goals.


58
00:03:42,006 --> 00:03:45,566
The first is stylistic, but the
second one, more importantly,


59
00:03:45,836 --> 00:03:48,676
is functional, so these
flat sides allow us


60
00:03:48,676 --> 00:03:50,036
to have more space
between the letters,


61
00:03:50,306 --> 00:03:52,486
which means they are more
legible when they are smaller.


62
00:03:53,306 --> 00:03:56,226
And this seemingly
inconsequential feature repeated


63
00:03:56,226 --> 00:03:59,416
over and over and over again


64
00:03:59,586 --> 00:04:02,036
in text really does
make a big difference.


65
00:04:03,786 --> 00:04:06,396
So now let's look
at proportions,


66
00:04:06,456 --> 00:04:08,706
which are actually similar
between SF and SF Compact.


67
00:04:08,706 --> 00:04:11,276
So I will just focus
on SF for a minute.


68
00:04:11,736 --> 00:04:14,446
I am going to go over some
typographic terms you may


69
00:04:14,446 --> 00:04:16,315
already be familiar with,
so please bear with me.


70
00:04:17,266 --> 00:04:21,516
Latin text lies on what
is called the baseline.


71
00:04:23,006 --> 00:04:26,216
Lowercase letter align with
something that is known


72
00:04:26,216 --> 00:04:28,816
as the x-height, which is the
height of the lowercase x.


73
00:04:29,706 --> 00:04:31,596
And the uppercase
aligns at the cap height.


74
00:04:33,136 --> 00:04:36,136
We also have a descender, which
is where lowercase letters


75
00:04:36,136 --> 00:04:39,666
that are below the baseline
align, and an ascender.


76
00:04:40,326 --> 00:04:44,846
Now, for proportions,


77
00:04:45,246 --> 00:04:48,916
the SF family has
compatible overall metrics


78
00:04:49,246 --> 00:04:51,446
with the previous UI
fonts that we shipped,


79
00:04:51,776 --> 00:04:54,336
which means your apps
won't experience a lot


80
00:04:54,546 --> 00:04:55,866
of vertical reflow.


81
00:04:55,866 --> 00:04:58,356
In fact, they won't experience
any vertical reflow at all.


82
00:04:59,376 --> 00:05:02,206
But within these
compatible vertical metrics,


83
00:05:02,606 --> 00:05:04,256
we actually change the
proportions a little bit.


84
00:05:04,746 --> 00:05:08,156
For example, we made the
uppercase shorter a little bit.


85
00:05:08,776 --> 00:05:10,326
The reason we did this
is because we wanted it


86
00:05:10,326 --> 00:05:12,056
to work better in
mixed-case settings.


87
00:05:13,226 --> 00:05:15,436
And also, we increased
the height


88
00:05:15,436 --> 00:05:17,366
of the x-height a little bit.


89
00:05:17,706 --> 00:05:20,046
So we made the lowercase
go towards the uppercase.


90
00:05:20,926 --> 00:05:22,726
And again, that improves
mixed-case settings


91
00:05:22,826 --> 00:05:24,606
but also makes the
lowercase larger,


92
00:05:24,606 --> 00:05:26,006
which is what you read the most,


93
00:05:26,006 --> 00:05:28,556
and so it's for better
legibility.


94
00:05:29,576 --> 00:05:32,056
And lastly, the numbers
align with the uppercase.


95
00:05:32,626 --> 00:05:38,876
So SF is a pan-European font,


96
00:05:39,196 --> 00:05:43,246
which means it covers the Latin
script, which includes languages


97
00:05:43,246 --> 00:05:48,906
like Polish or Icelandic or
Hungarian or even languages


98
00:05:48,906 --> 00:05:50,966
that need stacking
accents, like Vietnamese.


99
00:05:51,716 --> 00:05:54,836
But it also covers the
Cyrillic script, which is used


100
00:05:54,836 --> 00:05:57,536
in Russian, and the
Greek script.


101
00:05:58,226 --> 00:06:02,236
So that's San Francisco.


102
00:06:03,056 --> 00:06:10,016
It is a new family of typefaces
that we designed at Apple.


103
00:06:10,216 --> 00:06:13,026
iOS and OS X ship with
a font family called SF,


104
00:06:14,276 --> 00:06:16,526
and SF Compact ships
on the Watch.


105
00:06:18,326 --> 00:06:20,036
The families have
different proportions --


106
00:06:20,036 --> 00:06:23,376
sorry, similar proportions,
but they are different designs.


107
00:06:24,356 --> 00:06:29,566
Now, both fonts are available
for download for you today --


108
00:06:30,166 --> 00:06:32,696
actually, right now --
and you can get them


109
00:06:32,806 --> 00:06:37,116
from the Apple fonts page,
developer.apple.com/fonts.


110
00:06:37,806 --> 00:06:39,886
But please remember that
these are prerelease,


111
00:06:40,896 --> 00:06:43,676
so they will get finalized
once the final OSes ship.


112
00:06:46,426 --> 00:06:50,256
So before I move on to talk
to you about optical sizing,


113
00:06:50,256 --> 00:06:53,676
which is the big idea in the San
Francisco family of typefaces,


114
00:06:54,176 --> 00:06:59,556
I need to tell you about
some principles of design.


115
00:06:59,726 --> 00:07:02,546
Visual perception is
largely about illusion.


116
00:07:03,466 --> 00:07:06,976
And what I mean by that is
imagine you have two shapes.


117
00:07:07,146 --> 00:07:08,276
You have a square and a circle.


118
00:07:08,436 --> 00:07:12,286
And you want to make people
think that they are looking


119
00:07:12,286 --> 00:07:13,436
at shapes that are
the same height.


120
00:07:14,146 --> 00:07:16,276
So you put them side by side,


121
00:07:16,276 --> 00:07:18,516
and you align them
mathematically,


122
00:07:19,146 --> 00:07:21,906
and the circle actually
looks too short.


123
00:07:22,756 --> 00:07:27,426
So to address that, you actually
have to cheat, meaning you have


124
00:07:27,506 --> 00:07:29,736
to make the circle larger.


125
00:07:30,526 --> 00:07:32,846
In typography, we say that
you make the circle overshoot


126
00:07:33,006 --> 00:07:33,546
the square.


127
00:07:35,046 --> 00:07:39,476
So in other words, if you want
to make two shapes look similar,


128
00:07:40,006 --> 00:07:41,986
you often have to
make them dissimilar.


129
00:07:43,016 --> 00:07:45,396
Now, this does not apply just
to the shapes themselves,


130
00:07:46,126 --> 00:07:49,136
but it applies to the space
around the shapes as well --


131
00:07:49,136 --> 00:07:51,056
I'm going meta here and
showing you the slides --


132
00:07:51,576 --> 00:07:55,386
and what I am trying to get
at here is if I put that text


133
00:07:55,386 --> 00:07:57,556
in the middle of the
slide, like this,


134
00:07:58,206 --> 00:07:59,556
it would actually look too low.


135
00:08:00,396 --> 00:08:03,096
So again, to make
shapes look similar,


136
00:08:03,216 --> 00:08:04,896
you have to actually
make them divergent.


137
00:08:06,166 --> 00:08:09,166
And as a bonus, do you guys
know what this character is,


138
00:08:09,246 --> 00:08:10,376
what it's called?


139
00:08:11,186 --> 00:08:12,806
The pound, the hashtag.


140
00:08:12,806 --> 00:08:15,006
In Italy, we call
it the cancelletto,


141
00:08:15,006 --> 00:08:16,196
which means small gate.


142
00:08:16,196 --> 00:08:18,956
It is, of course,
the octothorpe,


143
00:08:20,046 --> 00:08:25,516
and the octothorpe is the
intersection of four lines,


144
00:08:26,076 --> 00:08:27,506
and where these four lines meet,


145
00:08:28,506 --> 00:08:31,516
that area in the middle can get
very dark and actually can kind


146
00:08:31,516 --> 00:08:33,226
of clog up at smaller sizes.


147
00:08:33,635 --> 00:08:35,885
So if you see it small, you can
hardly notice that it's there.


148
00:08:36,316 --> 00:08:41,496
So what have you to do there is
you kind of have to cheat again.


149
00:08:41,966 --> 00:08:43,616
You have to not actually
make the intersection


150
00:08:43,616 --> 00:08:47,316
of these four lines but
make it a larger square.


151
00:08:48,426 --> 00:08:52,646
So that's the octothorpe in our
heavy weight of San Francisco,


152
00:08:53,076 --> 00:08:57,846
and we do this in type
design all the time.


153
00:08:58,096 --> 00:09:00,516
So again, visual
perception is about illusion.


154
00:09:01,536 --> 00:09:05,326
And with that, I want to talk
to you about optical sizes.


155
00:09:06,546 --> 00:09:11,916
Which is this branch of the
family tree that you saw before.


156
00:09:12,066 --> 00:09:16,346
Imagine you have a piece of text
in two sizes in the same font.


157
00:09:16,826 --> 00:09:18,726
By the way, this word doesn't
actually mean anything.


158
00:09:19,106 --> 00:09:22,256
It's something that we type
designers use to look at fonts


159
00:09:22,256 --> 00:09:23,906
and kind of judge their rhythm


160
00:09:23,906 --> 00:09:25,676
because it has flat
and round shapes.


161
00:09:26,596 --> 00:09:28,126
Anyway, you look at
it, and you may notice


162
00:09:28,126 --> 00:09:32,226
that the smaller version of
this text is not really legible,


163
00:09:32,376 --> 00:09:35,236
and the reason is in a
grotesque typeface like this,


164
00:09:35,466 --> 00:09:37,626
where letters are nice
and close to each other,


165
00:09:38,506 --> 00:09:41,136
if I simulate low vision
by blurring it out,


166
00:09:41,456 --> 00:09:45,156
the smaller size font -- in the
smaller size font, letters start


167
00:09:45,186 --> 00:09:46,586
to kind of blend, right?


168
00:09:47,096 --> 00:09:49,716
So what you want to
do there is you want


169
00:09:49,716 --> 00:09:50,686
to do something like this.


170
00:09:51,566 --> 00:09:53,206
Meaning you want to
kind of adjust it


171
00:09:53,206 --> 00:09:54,696
so it's more legible
when it's small.


172
00:09:55,796 --> 00:09:58,176
So you may be thinking that all
I did there was just animate it


173
00:09:58,176 --> 00:10:00,306
and make it slightly
wider, and actually,


174
00:10:00,526 --> 00:10:03,976
I am changing the
outlines completely on you.


175
00:10:04,866 --> 00:10:06,306
So before I show
you the differences


176
00:10:06,306 --> 00:10:09,366
between these two fonts
that are called Display


177
00:10:09,366 --> 00:10:10,316
and Text, by the way.


178
00:10:10,716 --> 00:10:14,146
Display doesn't mean screen,
but it means typing sizes


179
00:10:14,146 --> 00:10:16,246
in typography, and
text is the text sizes,


180
00:10:16,666 --> 00:10:18,996
so the display font is
used for larger sizes


181
00:10:18,996 --> 00:10:20,156
and text for smaller ones.


182
00:10:20,696 --> 00:10:24,146
I have to tell you
about negative space,


183
00:10:24,526 --> 00:10:27,846
which is the space inside
letters, around letters,


184
00:10:28,916 --> 00:10:30,286
and inside the contours.


185
00:10:30,996 --> 00:10:32,056
Negative space is critical


186
00:10:32,056 --> 00:10:35,026
for telling shapes apart
and for reading them.


187
00:10:36,026 --> 00:10:38,756
And in the example before,
actually, in the bottom --


188
00:10:39,046 --> 00:10:42,676
in the text font, there was
almost twice as much the space


189
00:10:42,946 --> 00:10:44,706
than in the display font.


190
00:10:46,346 --> 00:10:50,696
So another thing that could be
an issue in grotesque typefaces,


191
00:10:50,856 --> 00:10:54,046
such as San Francisco, is that
these shapes look beautiful


192
00:10:54,046 --> 00:10:58,026
when they are really large, but
they have similar structures,


193
00:10:58,086 --> 00:10:59,386
and they can become confusable.


194
00:10:59,886 --> 00:11:03,466
So when you superimpose
them, you may notice


195
00:11:03,566 --> 00:11:06,186
that they all have the
same overall morphology,


196
00:11:06,186 --> 00:11:08,636
which means they all have
these areas at the top


197
00:11:08,636 --> 00:11:09,836
and at the bottom
that are curvy.


198
00:11:10,686 --> 00:11:15,376
They all have these two areas
that we call counters that are


199
00:11:15,376 --> 00:11:17,176
in the same -- roughly
the same position


200
00:11:17,176 --> 00:11:18,306
and roughly the same size.


201
00:11:19,176 --> 00:11:20,826
They also have this
semi-horizontal area


202
00:11:20,826 --> 00:11:24,866
in the middle, and they are
really defined by these areas


203
00:11:24,866 --> 00:11:26,136
that we call apertures.


204
00:11:26,836 --> 00:11:28,326
If you imagine air
going to the letter,


205
00:11:28,326 --> 00:11:29,696
that's where it would flow in.


206
00:11:30,946 --> 00:11:33,526
So you really want to
change the display --


207
00:11:33,726 --> 00:11:37,336
the text fonts versus the
display one, and when we do so,


208
00:11:37,336 --> 00:11:39,076
let me just show
you some examples.


209
00:11:41,226 --> 00:11:45,716
In a lowercase a, for example,
we actually change the size


210
00:11:45,716 --> 00:11:49,616
of the overshoots because we
want the round shapes to pop


211
00:11:49,616 --> 00:11:52,366
out more from the
x-height at smaller sizes.


212
00:11:53,176 --> 00:11:54,986
We also open up the
aperture right there.


213
00:11:56,246 --> 00:11:59,236
And we do the same at the
bottom of the lowercase g.


214
00:11:59,896 --> 00:12:05,286
In the lowercase s, we open
up these apertures as well.


215
00:12:06,936 --> 00:12:14,156
We make the r nose or flag
larger, and we do the same


216
00:12:14,156 --> 00:12:16,816
with the lowercase f
and the lowercase t;


217
00:12:16,816 --> 00:12:18,446
they're larger and
slightly taller.


218
00:12:19,246 --> 00:12:21,356
The lowercase i is
an interesting one


219
00:12:21,356 --> 00:12:25,826
because what happens there is
the dot on the i visually starts


220
00:12:25,826 --> 00:12:29,566
to collide with the stem
at really small sizes,


221
00:12:29,566 --> 00:12:32,476
and so we actually make
it larger and higher up.


222
00:12:34,066 --> 00:12:38,286
So there are two distinct font
families in SF and SF Compact.


223
00:12:38,506 --> 00:12:41,186
They are called Display
and Text, and they are used


224
00:12:41,186 --> 00:12:42,236
at different point sizes.


225
00:12:42,746 --> 00:12:45,386
The system automatically
switches between the two for you


226
00:12:45,556 --> 00:12:47,146
so you don't have to do
anything to adopt them.


227
00:12:48,446 --> 00:12:50,136
And that's optical sizes.


228
00:12:50,736 --> 00:12:51,216
Thank you.


229
00:12:52,516 --> 00:12:58,066
[Applause]


230
00:12:58,566 --> 00:13:00,456
There are two optical,
size-specific families


231
00:13:00,456 --> 00:13:03,376
in San Francisco:
Text and Display.


232
00:13:03,856 --> 00:13:05,916
The system switches between
the two at 20 points,


233
00:13:06,136 --> 00:13:08,266
so you don't need to know
this if you are coding


234
00:13:08,266 --> 00:13:10,326
for the new platforms; however,


235
00:13:10,326 --> 00:13:11,536
you do need to know
the difference


236
00:13:11,676 --> 00:13:14,616
if you are designing your
app because design apps


237
00:13:14,616 --> 00:13:16,756
like Photoshop, or
Sketch, or other apps


238
00:13:16,756 --> 00:13:18,356
like these don't
actually do this for you,


239
00:13:18,546 --> 00:13:22,716
so just know you have to
switch between these two fonts.


240
00:13:22,906 --> 00:13:25,236
So now that we looked at
size-specific features


241
00:13:25,236 --> 00:13:28,376
such as optical sizes, I want
to tell you about something else


242
00:13:28,376 --> 00:13:32,726
which is size specific,
and that is tracking.


243
00:13:33,416 --> 00:13:37,796
Tracking is a modifier on the
native spacing of letters,


244
00:13:38,786 --> 00:13:40,986
and if you saw that animation
and you thought, oh, yeah,


245
00:13:40,986 --> 00:13:44,046
he changed the kerning on that
string, you are almost right.


246
00:13:44,046 --> 00:13:46,816
There is a subtle difference
between tracking and kerning.


247
00:13:47,736 --> 00:13:54,356
Tracking applies both positively
and negatively to all the glyphs


248
00:13:54,356 --> 00:13:58,576
in a font, and kerning
really only applies


249
00:13:58,576 --> 00:14:00,576
to a specific pair,
individual pair.


250
00:14:01,806 --> 00:14:03,246
So that's kind of
the big difference.


251
00:14:04,716 --> 00:14:07,306
Tracking is global,
and kerning is local.


252
00:14:08,006 --> 00:14:13,026
Now, the San Francisco
fonts have inside


253
00:14:13,026 --> 00:14:17,886
of them embedded per each
font a tracking table


254
00:14:17,886 --> 00:14:18,956
which is size specific,


255
00:14:19,196 --> 00:14:21,506
and it defines point
sizes and tracking values.


256
00:14:22,336 --> 00:14:24,256
It achieves something
like this, right?


257
00:14:24,256 --> 00:14:26,486
So it makes the smaller
text spread apart


258
00:14:26,686 --> 00:14:28,786
and the bigger text
closer together.


259
00:14:29,996 --> 00:14:33,956
And you don't need to know these
values, again, if you are coding


260
00:14:33,956 --> 00:14:36,826
to the new San Francisco fonts,
but you do need to know them


261
00:14:36,826 --> 00:14:39,346
if you are drawing your app
in Photoshop because, again,


262
00:14:39,346 --> 00:14:42,496
they do not do this for you.


263
00:14:43,496 --> 00:14:45,586
This tracking table is
available for download


264
00:14:45,586 --> 00:14:47,986
with the system fonts
with the same page


265
00:14:47,986 --> 00:14:48,796
that I showed you earlier.


266
00:14:50,266 --> 00:14:53,446
So that's what tracking
is all about.


267
00:14:54,786 --> 00:15:00,346
Next, I would like to
talk to you about weight.


268
00:15:04,416 --> 00:15:08,306
Font weight is the
measure of how thick


269
00:15:08,306 --> 00:15:10,506
or thin the strokes
of the letters are.


270
00:15:10,506 --> 00:15:16,056
Now, the text families of
San Francisco and SF Compact


271
00:15:16,056 --> 00:15:20,716
as well, SF and SF Compact, have
six weights for the text fonts


272
00:15:21,366 --> 00:15:24,346
with their italics, and
they have nine weights


273
00:15:24,346 --> 00:15:25,296
in the display fonts.


274
00:15:25,576 --> 00:15:28,836
And you may be wondering why
it is that we have more weights


275
00:15:28,836 --> 00:15:32,106
in Display than in Text.


276
00:15:32,186 --> 00:15:34,946
And the reason is that
the extreme weights


277
00:15:34,946 --> 00:15:36,876
of the family are really
designed for titles,


278
00:15:37,576 --> 00:15:39,306
and so it wouldn't
make sense for them


279
00:15:39,306 --> 00:15:42,386
to be used below 20 points.


280
00:15:43,126 --> 00:15:47,116
So some of these
weights are actually new,


281
00:15:47,116 --> 00:15:51,346
brand-new in our platforms, and
so previously it was hard to get


282
00:15:51,346 --> 00:15:53,556
to them or the ones that
were there previously,


283
00:15:53,916 --> 00:15:56,756
and now we are giving you
new APIs to actually get


284
00:15:56,756 --> 00:15:58,656
to all the range of
weights and system font.


285
00:15:59,336 --> 00:16:01,186
They are both in
UIKit and AppKit,


286
00:16:01,256 --> 00:16:03,026
and they are a new
parameter added


287
00:16:03,026 --> 00:16:05,236
to the systemFontOfSize
API call,


288
00:16:06,586 --> 00:16:10,586
and these are the
arguments that are taken.


289
00:16:12,636 --> 00:16:15,366
Now, you have all these weights,
and you may be wondering,


290
00:16:15,556 --> 00:16:16,626
how do we actually use them?


291
00:16:16,626 --> 00:16:18,226
And I don't mean from
a coding point of view,


292
00:16:18,226 --> 00:16:19,416
but from a design point of view.


293
00:16:20,256 --> 00:16:22,856
So you have three main goals


294
00:16:22,856 --> 00:16:23,896
that you can achieve
with weight.


295
00:16:24,266 --> 00:16:25,576
The first one is
differentiation.


296
00:16:25,576 --> 00:16:27,586
You can create difference
in a piece of text,


297
00:16:27,586 --> 00:16:28,936
and you can create a hierarchy.


298
00:16:29,366 --> 00:16:31,916
The second is to
achieve similitude.


299
00:16:32,966 --> 00:16:35,446
And the third is a
stylistic purpose,


300
00:16:35,446 --> 00:16:37,556
so you want to achieve
some sort of voice.


301
00:16:38,476 --> 00:16:39,256
So let's look at these.


302
00:16:41,826 --> 00:16:44,886
Imagine you have a piece of text
and you want to call out a word,


303
00:16:45,626 --> 00:16:48,386
make it active, make it a
link, make it emphasized.


304
00:16:48,966 --> 00:16:51,246
Weight is a great
way of doing that.


305
00:16:52,626 --> 00:16:55,306
You can also have a list of
items and create a hierarchy


306
00:16:55,306 --> 00:16:58,976
in there by saying the first one
actually is the one I want to --


307
00:16:58,976 --> 00:17:01,466
it is the title of the list, and
the other ones are the things


308
00:17:01,466 --> 00:17:02,516
that are being enumerated.


309
00:17:03,926 --> 00:17:06,396
But you can also use
weight in a more subtle way,


310
00:17:06,396 --> 00:17:07,675
which is to create similitude.


311
00:17:08,636 --> 00:17:10,445
Consider this example,
which is kind


312
00:17:10,445 --> 00:17:13,136
of vernacular to
Watch Glances UI.


313
00:17:13,136 --> 00:17:16,866
You have a bigger number and
some smaller text underneath it.


314
00:17:17,786 --> 00:17:20,215
Now, if you set them both
in the same font weight,


315
00:17:20,656 --> 00:17:22,156
the smaller text
might look too light.


316
00:17:22,945 --> 00:17:25,116
So if you want to achieve
similitude there, what you have


317
00:17:25,146 --> 00:17:27,306
to do is you have to make
the weights dissimilar


318
00:17:27,306 --> 00:17:28,146
to make them similar.


319
00:17:29,126 --> 00:17:32,606
So you can make the bottom
font regular rather than light.


320
00:17:34,626 --> 00:17:37,246
So if you follow this principle
of larger sizes, lighter weight;


321
00:17:37,246 --> 00:17:39,006
and smaller sizes,
heavier weight,


322
00:17:39,376 --> 00:17:42,836
you can roughly make
things go towards each other


323
00:17:43,356 --> 00:17:45,026
and be harmonious.


324
00:17:46,256 --> 00:17:48,966
But lastly, you can also
use weight for voice.


325
00:17:49,136 --> 00:17:52,006
To show you what I mean, I
created a new revolutionary app.


326
00:17:52,846 --> 00:17:57,226
It's called Bee Weather, and
it's a weather app for bees.


327
00:17:58,026 --> 00:18:03,726
I really wanted to be punchy
and bold, but what I want


328
00:18:03,726 --> 00:18:05,676
to show you is that if
I just take the same --


329
00:18:05,676 --> 00:18:09,316
exact same layout and I
change only the font weight,


330
00:18:09,976 --> 00:18:11,986
I can create a completely
different stylistic effect,


331
00:18:11,986 --> 00:18:12,906
a completely different voice.


332
00:18:12,906 --> 00:18:15,876
And if you are sitting there
and you are thinking, oh,


333
00:18:15,876 --> 00:18:19,186
but the color is deceiving me,
I actually made Zebra Weather


334
00:18:19,186 --> 00:18:22,786
as well, which -- [Laughter]
-- proves my point better.


335
00:18:23,286 --> 00:18:27,886
So you can really use weight
to achieve a stylistic effect.


336
00:18:28,596 --> 00:18:35,066
However, remember that fonts
are there to serve the text,


337
00:18:35,126 --> 00:18:37,066
so legibility is
our first concern.


338
00:18:38,456 --> 00:18:39,526
You want to establish
a hierarchy


339
00:18:39,526 --> 00:18:41,076
with consistency and clarity.


340
00:18:41,726 --> 00:18:43,666
And if you don't feel
comfortable doing that,


341
00:18:43,666 --> 00:18:45,946
iOS already has a
system that you can adopt


342
00:18:46,486 --> 00:18:49,446
that has a hierarchy embedded
within it of sizes and weights


343
00:18:49,586 --> 00:18:50,526
that go along together.


344
00:18:51,026 --> 00:18:54,126
These are the text style APIs
that are used for Dynamic Type,


345
00:18:54,306 --> 00:18:56,546
which also give you all the
Dynamic Type advantages,


346
00:18:57,056 --> 00:18:59,886
such as users can go
in their preferences,


347
00:19:00,286 --> 00:19:03,576
change their font size, and
your app will react accordingly.


348
00:19:04,226 --> 00:19:07,626
When working with weight,
you also have to remember


349
00:19:07,716 --> 00:19:11,976
that there is a setting
both in iOS and watchOS


350
00:19:12,416 --> 00:19:16,276
to change the weight of the
fonts on people's devices,


351
00:19:16,906 --> 00:19:20,386
and so if you are relying on
weights that are too bold,


352
00:19:20,936 --> 00:19:24,986
you might hit a ceiling
there, and on the other hand,


353
00:19:24,986 --> 00:19:27,546
if you are relying on
fonts that are too light,


354
00:19:27,546 --> 00:19:28,886
text might be illegible.


355
00:19:29,406 --> 00:19:33,606
So there is no hard-and-fast
rule about how to use weight.


356
00:19:34,336 --> 00:19:38,756
But these rough guidelines
can give you some ideas.


357
00:19:40,226 --> 00:19:44,046
So these are the weights of
the San Francisco font family.


358
00:19:44,046 --> 00:19:48,556
There are new ones
available to you and APIs


359
00:19:48,556 --> 00:19:49,656
that go along with them.


360
00:19:51,266 --> 00:19:54,476
The same guidelines about
legibility, hierarchy,


361
00:19:54,776 --> 00:19:57,626
and the elusive quality of
taste apply to their usage.


362
00:19:58,126 --> 00:20:03,146
Next I want to talk to
you about another feature


363
00:20:03,146 --> 00:20:07,806
of the San Francisco family,
which are typographic features.


364
00:20:08,386 --> 00:20:14,746
So features make fonts active
because they are pieces


365
00:20:14,746 --> 00:20:17,516
of behavior that is
embedded inside a font.


366
00:20:19,036 --> 00:20:22,066
They primarily make
complex scripts possible,


367
00:20:22,766 --> 00:20:23,886
but they can also be used


368
00:20:24,036 --> 00:20:26,526
to access extended
glyphs inside a font.


369
00:20:27,086 --> 00:20:29,296
Sometimes they can
be the only mechanism


370
00:20:29,296 --> 00:20:30,856
or sometimes they can be
a convenience mechanism


371
00:20:30,856 --> 00:20:32,096
to access these extended glyphs.


372
00:20:32,736 --> 00:20:35,176
So to give you an example
of what features can do,


373
00:20:35,646 --> 00:20:37,566
let me tell you about fractions.


374
00:20:38,546 --> 00:20:41,216
So you are looking at this, and
you are typesetting in your app,


375
00:20:41,216 --> 00:20:44,586
and you are thinking, actually,
I know that there is a glyph


376
00:20:44,626 --> 00:20:48,896
like that in Unicode,
and I can just go see


377
00:20:48,896 --> 00:20:50,526
if San Francisco has
it, which it does,


378
00:20:50,526 --> 00:20:52,336
and you typeset it,
and you are done.


379
00:20:53,006 --> 00:20:55,356
Great. But what happens
when you have


380
00:20:55,356 --> 00:20:56,766
to typeset something like this?


381
00:20:57,346 --> 00:20:59,216
Which is not in the font
and is not in Unicode?


382
00:21:00,016 --> 00:21:06,866
So you could write code that
iterates through that string,


383
00:21:07,236 --> 00:21:10,686
and moves along, and
creates some other versions


384
00:21:10,686 --> 00:21:13,726
and repositioned versions
of all these glyphs,


385
00:21:13,806 --> 00:21:16,606
and you may also change
the weight because you want


386
00:21:16,606 --> 00:21:18,886
to make it look similar
to what's next to it.


387
00:21:19,476 --> 00:21:20,296
Maybe you even remember


388
00:21:20,296 --> 00:21:22,426
that there is a fraction
slash inside the font.


389
00:21:22,426 --> 00:21:23,636
You go check it out
in San Francisco,


390
00:21:23,636 --> 00:21:25,276
it's there, boom, you put it in.


391
00:21:26,346 --> 00:21:27,646
And you just wrote
a bunch of code


392
00:21:27,646 --> 00:21:29,856
that you could have
just thrown away


393
00:21:29,946 --> 00:21:33,626
because the fraction
feature does exactly the same


394
00:21:33,696 --> 00:21:35,266
for you automatically.


395
00:21:36,426 --> 00:21:39,116
And it also works for
arbitrary fractions.


396
00:21:39,866 --> 00:21:45,366
So the way this works is not by
having a ligature for 65/324.


397
00:21:45,776 --> 00:21:48,686
I don't have that
glyph in my font.


398
00:21:48,686 --> 00:21:51,446
I actually have smaller
versions of all these numbers


399
00:21:51,656 --> 00:21:56,176
and of this fraction slash
that get assembled together


400
00:21:56,346 --> 00:21:58,176
by the system based
off of the font.


401
00:21:58,836 --> 00:22:01,166
And the great thing
about this is


402
00:22:01,166 --> 00:22:02,276
that these are individual
glyphs,


403
00:22:02,276 --> 00:22:04,526
which means tracking will
apply to them as well.


404
00:22:05,936 --> 00:22:09,966
So features are discoverable,
and you can enable them


405
00:22:09,966 --> 00:22:11,516
in the Typography
panel, which is a piece


406
00:22:11,516 --> 00:22:14,176
of UI inside the
Font panel of OS X.


407
00:22:15,106 --> 00:22:16,906
But you can also
enable them in code,


408
00:22:16,906 --> 00:22:19,346
which is the most common
scenario for you guys.


409
00:22:20,316 --> 00:22:25,256
So here I am using the new
systemFontOfSize weight API


410
00:22:25,256 --> 00:22:26,716
to get the light weight.


411
00:22:27,856 --> 00:22:29,726
I can get a font
descriptor out of it.


412
00:22:30,626 --> 00:22:34,286
Once I have that, I can actually
modify it by adding attributes


413
00:22:34,386 --> 00:22:37,786
to it, and some of the
attributes can be the features.


414
00:22:38,456 --> 00:22:41,766
I can turn on one feature at
a time, I can turn it off,


415
00:22:41,766 --> 00:22:44,396
I can also do groups of
features all together.


416
00:22:45,276 --> 00:22:46,676
And once I have that
font descriptor,


417
00:22:46,676 --> 00:22:48,416
I can create another
UIFont out of it.


418
00:22:49,036 --> 00:22:50,306
Or NSFont.


419
00:22:51,036 --> 00:22:55,006
So other features that are
available to you are things


420
00:22:55,006 --> 00:23:00,266
like superiors and superscripts
or inferiors and subscripts.


421
00:23:01,556 --> 00:23:05,576
Or also uppercase forms
that are used when you want


422
00:23:05,576 --> 00:23:07,906
to typeset math symbols
or other symbols


423
00:23:07,906 --> 00:23:10,236
in between numbers
or capital letters.


424
00:23:11,936 --> 00:23:13,696
But there are some
features in San Francisco


425
00:23:13,696 --> 00:23:15,986
that are really special to
this design, and I just want


426
00:23:15,986 --> 00:23:16,806
to call them out to you.


427
00:23:17,966 --> 00:23:20,086
The first one is the
vertically centered colon,


428
00:23:21,466 --> 00:23:24,776
which is by default the colon
aligns with the lowercase,


429
00:23:24,776 --> 00:23:25,846
so it sits on the baseline,


430
00:23:25,846 --> 00:23:28,866
but when you are typesetting the
time, you really want it to be


431
00:23:28,866 --> 00:23:30,706
in the middle of these
numbers vertically.


432
00:23:31,236 --> 00:23:34,866
So we use this everywhere,
in our lock screen in iOS,


433
00:23:35,306 --> 00:23:39,316
we use it on the title
bar of OS X, on the Watch,


434
00:23:39,906 --> 00:23:43,016
we use it on our stopwatch
apps, so we decided


435
00:23:43,056 --> 00:23:45,886
to make this automatic
because it's so common


436
00:23:45,886 --> 00:23:48,546
to typeset the time
in UI design.


437
00:23:51,306 --> 00:23:54,406
But you may want to opt
out of it if necessary.


438
00:23:54,406 --> 00:23:57,016
The feature code to opt out
of it is the same as the one


439
00:23:57,016 --> 00:23:58,276
to opt into it, essentially.


440
00:23:59,196 --> 00:24:02,986
Another feature is alternate
shapes for numerals 6 and 9.


441
00:24:03,946 --> 00:24:06,906
So these two shapes are
beautiful when they are large


442
00:24:06,906 --> 00:24:09,846
in their vernacular, their
grotesque genre; however,


443
00:24:09,846 --> 00:24:12,636
they do have an issue
with confusability.


444
00:24:12,986 --> 00:24:15,206
They can be confused when
they are really small either


445
00:24:15,206 --> 00:24:16,966
with each other or with an 8.


446
00:24:17,916 --> 00:24:21,906
So for that, we actually
designed alternate shapes of 6


447
00:24:21,906 --> 00:24:23,796
and 9s inside the
San Francisco fonts


448
00:24:24,186 --> 00:24:27,716
that have these flat sides,
and we use them in situations


449
00:24:27,716 --> 00:24:30,166
like the small dials
on the Watch.


450
00:24:30,616 --> 00:24:33,946
We use them on the serial number
on the back of your Watch.


451
00:24:34,136 --> 00:24:35,986
But you can also use
them in serial numbers


452
00:24:35,986 --> 00:24:37,086
where the context is not enough


453
00:24:37,086 --> 00:24:38,736
to tell you what
are you looking at.


454
00:24:39,896 --> 00:24:42,686
So because their usage
is context dependent,


455
00:24:43,116 --> 00:24:45,656
we don't actually turn it
on for you automatically.


456
00:24:46,646 --> 00:24:50,166
But it's available with the --
this feature code that you see.


457
00:24:50,806 --> 00:24:55,596
And next I want to kind
of combine two ideas.


458
00:24:55,836 --> 00:24:58,246
The first is typographic
features that we just saw,


459
00:24:58,686 --> 00:25:00,806
and the second one is optical
sizes that we saw earlier.


460
00:25:01,806 --> 00:25:05,046
And so the display and text
fonts are really designed


461
00:25:05,046 --> 00:25:08,236
differently, and we take into
consideration the point sizes


462
00:25:08,626 --> 00:25:09,516
that they will be used at.


463
00:25:10,316 --> 00:25:12,896
So if you are typesetting a
fraction in display sizes,


464
00:25:12,896 --> 00:25:15,886
it's fine if you have the curly
shape of the 6, but if you are


465
00:25:15,886 --> 00:25:19,366
in text fonts, you really
want the other shape


466
00:25:19,366 --> 00:25:22,146
because that's -- imagine that
would be set at 12 points.


467
00:25:22,476 --> 00:25:24,526
The fraction would be
probably 6 points, right?


468
00:25:25,086 --> 00:25:26,676
So we actually designed
them differently


469
00:25:26,996 --> 00:25:28,776
and spaced them further apart.


470
00:25:29,196 --> 00:25:31,406
And we do this for a
whole host of glyphs


471
00:25:31,436 --> 00:25:32,786
in our San Francisco font.


472
00:25:32,786 --> 00:25:34,756
So we make them different
between text and display


473
00:25:35,136 --> 00:25:38,716
on purpose to make them
either be more beautiful


474
00:25:38,716 --> 00:25:39,406
or more legible.


475
00:25:41,916 --> 00:25:44,186
So these are typographic
features.


476
00:25:44,646 --> 00:25:46,916
They are behavior that is
embedded inside a font.


477
00:25:48,456 --> 00:25:51,136
Some features are
automatically turned on for you


478
00:25:51,136 --> 00:25:58,836
by System Font, and others
require you to opt into them.


479
00:25:59,076 --> 00:26:02,986
So next I want to talk to you
about numbers for a second,


480
00:26:03,156 --> 00:26:06,376
not the app, but actual
numbers inside the font.


481
00:26:07,606 --> 00:26:11,646
So we type designers spend a lot
of time thinking about the shape


482
00:26:11,646 --> 00:26:13,436
of numbers to make
them look beautiful


483
00:26:13,436 --> 00:26:15,306
or functional or
all these things.


484
00:26:16,316 --> 00:26:18,556
But I want to tell
you about the spacing


485
00:26:18,556 --> 00:26:21,566
of numbers, their widths.


486
00:26:21,936 --> 00:26:25,246
By default, on our platforms,
numbers are always monospaced,


487
00:26:25,286 --> 00:26:29,366
meaning they all have the
same width, which is great


488
00:26:29,736 --> 00:26:33,596
if you need typeset something
like tables, for example.


489
00:26:33,956 --> 00:26:35,446
Monospaced numbers
are really handy


490
00:26:35,446 --> 00:26:36,986
because they make
everything align.


491
00:26:36,986 --> 00:26:39,406
You can also achieve
layouts with, like,


492
00:26:39,406 --> 00:26:42,186
multiple columns with them.


493
00:26:42,396 --> 00:26:44,266
However, they are
not the only numbers


494
00:26:44,266 --> 00:26:46,496
in the San Francisco fonts.


495
00:26:46,496 --> 00:26:49,056
We also have what are
called proportional numbers,


496
00:26:49,366 --> 00:26:53,086
where each number has
its own "natural" width.


497
00:26:54,256 --> 00:26:56,646
So there are situations
where, of course,


498
00:26:56,646 --> 00:26:59,646
monospaced numbers are
clearly what you want.


499
00:27:01,096 --> 00:27:06,426
For example, like this, when
you have proportional numbers,


500
00:27:06,496 --> 00:27:08,476
they will actually
wiggle around,


501
00:27:09,046 --> 00:27:10,546
and monospace numbers
actually stay put.


502
00:27:11,866 --> 00:27:16,946
But you may also typeset
numbers in static labels,


503
00:27:16,946 --> 00:27:20,766
such as when typesetting
a date or a phone number


504
00:27:21,336 --> 00:27:26,876
or a read count in an inbox
or an email address or a URL.


505
00:27:27,356 --> 00:27:31,286
In those cases, really, you want
proportional numbers instead.


506
00:27:32,636 --> 00:27:36,076
So let's take a -- do a case
study with an app like Calendar,


507
00:27:36,076 --> 00:27:37,846
which is fairly numbers heavy.


508
00:27:38,186 --> 00:27:41,466
And if you look at how we
use numbers in this app


509
00:27:41,466 --> 00:27:43,236
and how we typeset
them, you will notice


510
00:27:43,236 --> 00:27:45,076
that they don't really
align with anything else,


511
00:27:45,076 --> 00:27:47,036
and they really are in
line with other text,


512
00:27:47,276 --> 00:27:49,906
meaning they could use
-- they should use,


513
00:27:49,976 --> 00:27:52,506
and they do use proportional
numbers.


514
00:27:53,516 --> 00:27:58,746
So knowing this, we decided
to take a big leap here,


515
00:27:59,406 --> 00:28:02,096
and change the default
of our platforms


516
00:28:02,186 --> 00:28:04,516
to actually give you
proportional numbers by default


517
00:28:04,516 --> 00:28:07,146
and make you opt into
monospaced numbers.


518
00:28:08,406 --> 00:28:11,366
Now, there is a precedent for
this, and that's the Watch,


519
00:28:11,826 --> 00:28:14,036
which actually ships with
proportional numbers by default.


520
00:28:15,296 --> 00:28:17,546
But it is a big change,
and it may affect layout.


521
00:28:17,826 --> 00:28:21,106
So because of that, we
have provisions in place.


522
00:28:21,596 --> 00:28:25,216
If your app is not linked
against iOS 10.11 --


523
00:28:25,216 --> 00:28:28,036
sorry, OS X 10.11 and iOS 9,


524
00:28:28,356 --> 00:28:29,986
you still get monospaced
numbers by default.


525
00:28:30,336 --> 00:28:32,526
The system turns on the
monospace feature for you.


526
00:28:34,066 --> 00:28:38,876
And -- but if you do recompile,
you get proportionals.


527
00:28:39,996 --> 00:28:43,746
And there is a new shortcut API
available in AppKit that kind


528
00:28:43,746 --> 00:28:45,316
of abstracts away
the feature code


529
00:28:45,536 --> 00:28:47,296
that I was showing you
earlier, so it makes it easier


530
00:28:47,296 --> 00:28:51,896
for you to adopt this.


531
00:28:51,996 --> 00:28:55,136
So lastly, we are going to
look at some potential pitfalls


532
00:28:55,136 --> 00:28:57,686
in our font APIs, both
with these new fonts


533
00:28:57,686 --> 00:28:58,986
and with existing fonts.


534
00:29:01,796 --> 00:29:04,636
First of all, the curious
amongst you may have noticed


535
00:29:04,636 --> 00:29:09,526
that in the preview builds of
OS X and iOS, the SF fonts ship


536
00:29:09,586 --> 00:29:12,766
with a name that is --
it starts with a dot.


537
00:29:13,576 --> 00:29:17,176
What that dot means is that
that name is Apple private,


538
00:29:17,566 --> 00:29:21,666
so please don't rely
on it being stable.


539
00:29:22,336 --> 00:29:25,096
We've also seen some
framework developers


540
00:29:25,196 --> 00:29:27,056
that use their own
font-loading code,


541
00:29:27,056 --> 00:29:29,486
such as game framework
developers, for example,


542
00:29:29,966 --> 00:29:32,196
where they rely on the fact --


543
00:29:32,526 --> 00:29:34,186
on the assumption that
fonts are going to be


544
00:29:34,186 --> 00:29:35,846
in a specific place
on the file system.


545
00:29:36,346 --> 00:29:39,726
Now, this is very brittle,
and we would like you


546
00:29:39,766 --> 00:29:45,516
to treat font paths as opaque,
meaning you can access them


547
00:29:45,516 --> 00:29:47,746
through Core text -- you can
access font through Core text,


548
00:29:47,746 --> 00:29:52,956
and you don't have to go hunt
for them on the file system.


549
00:29:52,956 --> 00:29:56,846
Also, if you access
system font by name,


550
00:29:57,416 --> 00:30:00,376
the fontWithName API is
really meant for user fonts.


551
00:30:00,376 --> 00:30:02,646
So if you have your own fonts,
you can call them that way


552
00:30:02,646 --> 00:30:05,176
and that's great, but if you
instantiate a system font,


553
00:30:05,606 --> 00:30:07,586
later on you extract its
name and then you try


554
00:30:07,586 --> 00:30:10,536
to create another font out of
that, well, now you are opting


555
00:30:10,536 --> 00:30:13,346
out of all the automatic things
that system font does for you,


556
00:30:13,546 --> 00:30:16,366
such as the automatic features,
the size-specific behavior,


557
00:30:16,756 --> 00:30:18,616
the automatic tracking,
and all these things,


558
00:30:18,616 --> 00:30:20,746
so we recommend you
don't do this.


559
00:30:21,476 --> 00:30:23,966
And instead, you can
actually use font descriptors,


560
00:30:24,476 --> 00:30:29,336
which completely encapsulate
the behavior of a font,


561
00:30:29,576 --> 00:30:34,466
so this is the recommended
way for using font objects.


562
00:30:35,206 --> 00:30:37,126
Lastly, with optical sizes,


563
00:30:37,196 --> 00:30:40,916
we are really challenging
some old assumption


564
00:30:40,966 --> 00:30:45,056
as to how fonts work, so for
example, if you typeset a word


565
00:30:45,056 --> 00:30:49,616
at 15 points and later on you
apply a scale to your matrix


566
00:30:49,616 --> 00:30:52,166
and you reuse the same
font object, well,


567
00:30:52,166 --> 00:30:55,836
you are getting a font that
is designed for 15 points at,


568
00:30:55,836 --> 00:30:57,686
I don't know, 120 points.


569
00:30:58,446 --> 00:31:00,976
What you really want to be doing
there is actually reinstantiate


570
00:31:00,976 --> 00:31:03,506
the font again for that
specific point size,


571
00:31:03,506 --> 00:31:05,406
and you will get
the right behavior.


572
00:31:06,806 --> 00:31:11,346
So we really want you to
treat fonts as opaque objects


573
00:31:11,416 --> 00:31:13,936
if possible, so use the
system APIs to get to them.


574
00:31:15,276 --> 00:31:18,846
Fonts with optical qualities
really break old assumptions.


575
00:31:20,246 --> 00:31:24,306
And relying on the system font
APIs will give you the right


576
00:31:24,356 --> 00:31:25,876
behavior all the time.


577
00:31:25,876 --> 00:31:28,176
So that's -- please use these.


578
00:31:30,116 --> 00:31:32,276
And that's all we
have for today.


579
00:31:32,276 --> 00:31:33,886
So we looked at the new
San Francisco fonts,


580
00:31:34,346 --> 00:31:36,336
we looked at concepts
like optical sizes,


581
00:31:36,336 --> 00:31:38,176
the big idea in San Francisco.


582
00:31:38,746 --> 00:31:41,546
We looked at automatic
tracking, the weights


583
00:31:41,546 --> 00:31:42,856
and the features
of San Francisco.


584
00:31:43,356 --> 00:31:45,716
We looked at the big
change coming up in numbers


585
00:31:45,776 --> 00:31:47,076
in our platforms, which means


586
00:31:47,076 --> 00:31:50,036
that they are becoming
proportional by default.


587
00:31:50,526 --> 00:31:53,426
And we looked at some
potential pitfalls in our APIs.


588
00:31:54,416 --> 00:31:57,896
So if you have questions, you
can get in touch with Mike


589
00:31:57,896 --> 00:32:00,786
or Curt, or go on our
Developer websites.


590
00:32:01,626 --> 00:32:04,456
There's also a session
about Watch Design Tips


591
00:32:04,456 --> 00:32:07,026
and Tricks later and
a Text and Fonts Lab


592
00:32:07,026 --> 00:32:08,386
where we can answer
your questions.


593
00:32:08,976 --> 00:32:10,556
So thank you very much.


594
00:32:11,508 --> 00:32:13,508
[Applause]

