1
00:00:00,506 --> 00:00:10,516
[ Silence ]


2
00:00:11,016 --> 00:00:15,000
[ Applause ]


3
00:00:15,086 --> 00:00:15,616
>> Jay Bruins: My
name is Jay Bruins


4
00:00:15,656 --> 00:00:18,546
and I'm a Core Location Engineer
and I'm here today to share


5
00:00:18,546 --> 00:00:20,846
with you some exciting new
changes that we've made


6
00:00:20,846 --> 00:00:25,126
to the Core Location APIs and
so let's get right into it.


7
00:00:26,366 --> 00:00:28,006
We've got a number of things
we're going to cover today.


8
00:00:28,256 --> 00:00:30,696
The first thing that we're going
to cover is changes related


9
00:00:30,696 --> 00:00:32,345
to the new Multitasking
Behaviors.


10
00:00:32,746 --> 00:00:35,176
And so some of the multitasking
behaviors change the way


11
00:00:35,176 --> 00:00:37,746
location work and so we're
going to cover those today.


12
00:00:39,016 --> 00:00:40,936
The next thing I want
to dive into is going


13
00:00:40,936 --> 00:00:42,456
to be Creating Fitness
Applications.


14
00:00:42,856 --> 00:00:45,346
Many of you guys already have
applications in the store


15
00:00:45,346 --> 00:00:49,016
that allow a user to track
their fitness but, with a couple


16
00:00:49,016 --> 00:00:50,996
of changes you can actually
get much better battery life.


17
00:00:52,066 --> 00:00:54,606
And lastly, we've got some
exciting new region monitoring


18
00:00:54,606 --> 00:00:56,176
changes today that I'm
happy to share with you.


19
00:00:56,866 --> 00:00:59,726
I'd like to start by
saying this is not a review.


20
00:00:59,966 --> 00:01:01,996
If you're watching this
online you might want to pause


21
00:01:01,996 --> 00:01:03,646
and go back to last year's
video, which is going


22
00:01:03,646 --> 00:01:04,586
to be much more basic.


23
00:01:05,306 --> 00:01:07,826
This review-- today I'm
going to move very quickly.


24
00:01:07,826 --> 00:01:09,736
So, if you're in the
audience stick around.


25
00:01:09,736 --> 00:01:12,446
You're going to experience
our exciting new features


26
00:01:12,876 --> 00:01:15,936
but you might want to kind of
review our documents online


27
00:01:15,936 --> 00:01:18,226
to get yourself grounded a bit
better before diving into Code.


28
00:01:18,706 --> 00:01:20,636
So with that, let's
start talking


29
00:01:20,636 --> 00:01:23,046
about the Multitasking
changes and how they relate


30
00:01:23,046 --> 00:01:24,166
to your location application.


31
00:01:25,406 --> 00:01:27,156
So, one thing to keep in mind


32
00:01:27,156 --> 00:01:30,286
with the new multitasking UPIs
is that we've allowed the user


33
00:01:30,406 --> 00:01:32,946
to take control over
multitasking behavior on iOS.


34
00:01:33,616 --> 00:01:36,766
So, with that the user can
actually disable multitasking


35
00:01:36,896 --> 00:01:37,876
across the device.


36
00:01:38,686 --> 00:01:42,806
Similarly they can single
out your application to say


37
00:01:42,806 --> 00:01:44,516
that I don't want it to be
running in the background.


38
00:01:44,816 --> 00:01:47,076
Usually it's to save
power or some sort


39
00:01:47,076 --> 00:01:48,596
of conception issue like that.


40
00:01:49,546 --> 00:01:52,736
And lastly, they can temporarily
override multitasking


41
00:01:52,906 --> 00:01:54,956
by quitting your app
from the app switcher.


42
00:01:55,496 --> 00:01:57,526
And if they do this,
this is a signal to us


43
00:01:57,526 --> 00:01:59,686
that they're not really
interested in the features


44
00:01:59,686 --> 00:02:02,146
that your application
provide for a period of time


45
00:02:02,316 --> 00:02:04,356
and they'll manually
launch their application


46
00:02:04,796 --> 00:02:06,206
when their interested


47
00:02:06,206 --> 00:02:08,895
in receiving your
functionality again.


48
00:02:09,515 --> 00:02:11,836
So, with that let's talk
about the Core Location APIs


49
00:02:11,836 --> 00:02:14,256
that are affected by this
multitasking ability.


50
00:02:14,976 --> 00:02:17,446
Specifically, continuous
background location.


51
00:02:18,126 --> 00:02:19,716
So, if you're a fitness
application


52
00:02:19,916 --> 00:02:22,366
or you're providing turn-by-turn
directions and you want


53
00:02:22,366 --> 00:02:24,316
to continue running the
background with the power


54
00:02:24,316 --> 00:02:28,056
on we're-- this is going to
be affected by the switch.


55
00:02:29,176 --> 00:02:31,466
Similarly, if you're using
significant location change


56
00:02:31,776 --> 00:02:34,406
to provide overall
day-to-day tracking of the user


57
00:02:34,836 --> 00:02:37,706
or if you're using fences to
provide notifications of arrival


58
00:02:37,706 --> 00:02:40,286
or departure, these
APIs are disabled


59
00:02:40,286 --> 00:02:42,776
in the even the user
turns off Multitasking


60
00:02:42,986 --> 00:02:43,676
for your application.


61
00:02:43,676 --> 00:02:48,126
So, we have a couple of
recommendations for you


62
00:02:48,326 --> 00:02:49,436
and these really dovetail


63
00:02:49,496 --> 00:02:51,956
with the recommendations we've
always been providing you


64
00:02:52,336 --> 00:02:54,496
with regards to authorization
on the app.


65
00:02:55,306 --> 00:02:57,256
Be clear about why
you're using Location.


66
00:02:58,276 --> 00:03:00,776
These goes beyond just
specifying NS Location usage


67
00:03:00,776 --> 00:03:02,406
description key inside
of your infoplist.


68
00:03:02,406 --> 00:03:05,736
What we'd actually like you to
do is use location in response


69
00:03:05,776 --> 00:03:07,816
to users interaction
with your application.


70
00:03:08,276 --> 00:03:10,806
Start location when the user
presses the location button


71
00:03:11,266 --> 00:03:13,966
or does a search and they
need to know where they are.


72
00:03:15,226 --> 00:03:16,846
Be selective about
using location.


73
00:03:16,916 --> 00:03:19,326
If you turn off location
and the user sees


74
00:03:19,326 --> 00:03:22,546
that you're responsibly
turning off, they're more likely


75
00:03:22,546 --> 00:03:24,626
to trust you with their
location and they're more likely


76
00:03:24,726 --> 00:03:26,026
to leave Multitasking enabled.


77
00:03:27,086 --> 00:03:29,396
Similarly don't start
on every launch.


78
00:03:30,206 --> 00:03:32,566
Realize that your application
can launch for a number


79
00:03:32,566 --> 00:03:34,286
of reasons, including
into the background.


80
00:03:34,456 --> 00:03:36,316
And so if you're
launching location,


81
00:03:36,316 --> 00:03:38,606
if you're starting location
every time you're running,


82
00:03:39,056 --> 00:03:40,026
you're just going to guarantee


83
00:03:40,026 --> 00:03:41,406
that you drain the
user's battery.


84
00:03:42,136 --> 00:03:45,996
And if we're talking about
launching our app proactively


85
00:03:45,996 --> 00:03:48,046
to do fetches in order
to have a fresh UI,


86
00:03:48,046 --> 00:03:50,586
we're going to be throttling
you more aggressively,


87
00:03:50,586 --> 00:03:51,476
if you're using location.


88
00:03:51,936 --> 00:03:53,546
But that's not to say
that you shouldn't do it.


89
00:03:53,886 --> 00:03:57,076
It's just that you need to be
cognizant of these changes.


90
00:03:57,416 --> 00:04:00,586
And especially when you're
fetching proactively understand


91
00:04:00,586 --> 00:04:02,726
that the location that
you're going to achieve


92
00:04:02,996 --> 00:04:05,316
for the user might
not actually go


93
00:04:05,316 --> 00:04:07,576
to a user's specific experience


94
00:04:07,606 --> 00:04:09,096
because the user might
choose not to launch you.


95
00:04:10,356 --> 00:04:13,796
And so with it, turn off as
appropriate in the background.


96
00:04:14,056 --> 00:04:15,606
If you have a location
that's good enough


97
00:04:15,606 --> 00:04:18,875
to hit your server query
or a certain amount


98
00:04:18,875 --> 00:04:22,246
of time has passed and you're
just not going to get a kind


99
00:04:22,246 --> 00:04:24,586
of quality location because
the user is in a bad location,


100
00:04:25,206 --> 00:04:28,586
then turning off location
will really allow you


101
00:04:28,586 --> 00:04:30,676
to save battery,
prevent being throttled


102
00:04:30,916 --> 00:04:33,486
and overall have the best
user experience possible.


103
00:04:34,026 --> 00:04:38,676
With that we actually
made some changes


104
00:04:38,716 --> 00:04:40,636
to continuous location
behavior in order


105
00:04:40,636 --> 00:04:43,256
to help you avoid
killing battery.


106
00:04:44,096 --> 00:04:48,306
So, to remind you this API is
what you get when you specify


107
00:04:48,306 --> 00:04:50,136
that you want to be a
Location background app.


108
00:04:50,136 --> 00:04:52,666
And if you put this
in your infoplist


109
00:04:52,856 --> 00:04:55,136
when you start location
we will keep--


110
00:04:55,476 --> 00:04:57,266
we keep the device awake as long


111
00:04:57,266 --> 00:04:58,816
as you can tune in
to use location.


112
00:05:00,156 --> 00:05:04,686
But in iOS 7 because of these
extra launching tasks we


113
00:05:04,686 --> 00:05:06,256
actually don't want to
start in the background.


114
00:05:06,896 --> 00:05:10,176
We see Continuous Location as
an extension of the foreground.


115
00:05:10,576 --> 00:05:13,496
So, a user starts
navigating to a location


116
00:05:13,966 --> 00:05:16,336
and then they suspend their
application and they lock it


117
00:05:16,336 --> 00:05:17,796
and they put it on
their dashboard.


118
00:05:18,936 --> 00:05:20,196
Turn by turn should continue


119
00:05:20,566 --> 00:05:22,096
but you shouldn't start
in the background.


120
00:05:22,556 --> 00:05:25,566
Similarly if they go for a
run you know the user had an


121
00:05:25,566 --> 00:05:27,286
opportunity to start your
app before they switched


122
00:05:27,286 --> 00:05:28,066
to their music player.


123
00:05:28,446 --> 00:05:30,526
So, starting in the
foreground is not


124
00:05:30,876 --> 00:05:32,246
that stringent of a requirement.


125
00:05:32,976 --> 00:05:34,836
We realize that there are
a handful of applications


126
00:05:34,836 --> 00:05:37,266
that are trying to do day-to-day
tracking using significant


127
00:05:37,266 --> 00:05:38,016
location change.


128
00:05:38,336 --> 00:05:41,446
And for those applications we
will still honor the background


129
00:05:41,446 --> 00:05:43,106
modes key and keep
the device awake


130
00:05:43,106 --> 00:05:44,126
when you are using location.


131
00:05:44,656 --> 00:05:46,686
But in general, if
you start Location


132
00:05:46,686 --> 00:05:48,836
in the background
we'll simply leave--


133
00:05:49,376 --> 00:05:51,416
we'll give you location services
as long as these are running,


134
00:05:51,416 --> 00:05:53,276
but we won't guarantee
that we'll keep you running


135
00:05:53,416 --> 00:05:56,586
and this is the best tradeoff
for power and user satisfaction.


136
00:05:57,916 --> 00:06:02,656
With these changes
however, it's possible


137
00:06:02,656 --> 00:06:05,146
that the user could
tell you that hey,


138
00:06:05,146 --> 00:06:08,246
I'd like to get directions
to dinner and tell us,


139
00:06:08,246 --> 00:06:10,406
I don't want any
applications to do multitasking.


140
00:06:11,286 --> 00:06:14,386
And so, in that situation
it would be a good idea


141
00:06:14,386 --> 00:06:18,526
to check a new property on
the UI application instance,


142
00:06:18,886 --> 00:06:20,286
backgroundRefreshStatus.


143
00:06:21,006 --> 00:06:25,536
If your status is currently
available then APIs will behave


144
00:06:25,536 --> 00:06:26,536
exactly as expected.


145
00:06:27,216 --> 00:06:30,916
However, if it's denied this
means that the user has chosen


146
00:06:30,916 --> 00:06:32,226
that they don't want
your application


147
00:06:32,226 --> 00:06:34,306
to be running right
now or running


148
00:06:34,306 --> 00:06:35,276
in the background I should say.


149
00:06:35,866 --> 00:06:38,876
So, as a result we won't launch
you and we won't allow you


150
00:06:38,876 --> 00:06:40,126
to continue running
indefinitely.


151
00:06:41,436 --> 00:06:45,416
There's-- and if this happens
and you have specific indication


152
00:06:45,416 --> 00:06:47,566
from the user that
you actually--


153
00:06:47,756 --> 00:06:50,876
they do want your app to
function it might be a good idea


154
00:06:50,876 --> 00:06:52,876
to pop a dialog and tell
them to go to settings


155
00:06:52,966 --> 00:06:54,396
and correct their situation


156
00:06:54,686 --> 00:06:56,406
so that they can get
the app functionality


157
00:06:57,156 --> 00:06:59,966
that you want, that they want.


158
00:06:59,966 --> 00:07:02,656
Now, there's one other option
and this is restricted.


159
00:07:03,086 --> 00:07:05,276
And this is if parental controls


160
00:07:05,326 --> 00:07:07,276
or an enterprise
profile were installed


161
00:07:07,706 --> 00:07:10,726
and Multitasking is locked off.


162
00:07:11,346 --> 00:07:15,196
In this case, there's not really
much point in telling the user


163
00:07:15,196 --> 00:07:16,636
to go to Settings
because there's nothing


164
00:07:16,636 --> 00:07:18,276
that they're going to be able
to do inside of Settings.


165
00:07:18,926 --> 00:07:22,766
So, instead please have your
application degrade gracefully,


166
00:07:22,766 --> 00:07:25,546
gray-out some menu options
or just hide them completely


167
00:07:25,906 --> 00:07:28,276
and don't tell them that hey,
there's these great features


168
00:07:28,276 --> 00:07:31,736
that your phone can't do because
your system administrator locked


169
00:07:32,316 --> 00:07:33,186
it out.


170
00:07:33,456 --> 00:07:35,436
Lastly, if you're running into
the background at the point


171
00:07:35,526 --> 00:07:38,756
that a change occurs we'll give
you a notification of this fact


172
00:07:39,136 --> 00:07:40,066
and you can check this.


173
00:07:40,546 --> 00:07:41,746
Now that's one caveat
and that is


174
00:07:41,746 --> 00:07:44,096
that this API is actually not
available in the first seed.


175
00:07:44,436 --> 00:07:46,026
So, the second seed
which is going


176
00:07:46,026 --> 00:07:48,826
to be available shortly will
actually have this API in it


177
00:07:48,826 --> 00:07:51,386
and that will allow you to
start tuning your applications


178
00:07:51,386 --> 00:07:52,696
to provide the best
user experience.


179
00:07:53,226 --> 00:07:58,626
With that, let's talk about
creating a fitness application.


180
00:07:59,236 --> 00:08:00,366
As many of you already know


181
00:08:00,366 --> 00:08:02,646
because we've gotten many
great examples in the store,


182
00:08:03,276 --> 00:08:04,816
creating a fitness
application is easy.


183
00:08:05,506 --> 00:08:09,006
Start-- allocate a
locationManager, set yourself


184
00:08:09,006 --> 00:08:11,566
as the delegate,
specify the fact


185
00:08:11,566 --> 00:08:12,676
that you're a fitness
application.


186
00:08:13,006 --> 00:08:14,696
Now this is a step that
not everyone is doing


187
00:08:14,696 --> 00:08:16,056
and I would highly
encourage you to do


188
00:08:16,056 --> 00:08:18,586
so because it tunes the
way that auto pause works.


189
00:08:18,946 --> 00:08:20,586
So, if your user is
running around a track


190
00:08:21,126 --> 00:08:25,626
and it looks overall at a high
level view like they're moving


191
00:08:25,626 --> 00:08:30,116
about 100 yards, stopping and
moving about another 100 yards,


192
00:08:30,586 --> 00:08:31,486
now this is in an oval.


193
00:08:32,096 --> 00:08:34,706
But if you're in a car
that's not a lot of movement


194
00:08:35,046 --> 00:08:37,126
and so we'll assume that if
you were navigating in a car


195
00:08:37,126 --> 00:08:39,895
that actually the user would
rather pause their activity


196
00:08:39,895 --> 00:08:42,155
right now because navigation
is not really relevant anymore.


197
00:08:42,956 --> 00:08:44,726
But if you're in a
fitness application,


198
00:08:44,726 --> 00:08:46,086
clearly the user
is still running


199
00:08:46,406 --> 00:08:47,286
and we should keep going.


200
00:08:48,386 --> 00:08:51,016
Similarly if you specify
fitness activityType.


201
00:08:52,146 --> 00:08:54,706
When we're considering
mat matching scenarios,


202
00:08:55,056 --> 00:08:58,126
we're far more likely to leave
you meandering around a park


203
00:08:58,456 --> 00:09:00,966
and less likely to snap you
to a freeway if you tell us


204
00:09:00,966 --> 00:09:02,046
that you're a fitness
application.


205
00:09:03,346 --> 00:09:07,786
So, doing this will help
tune Core Locations behavior


206
00:09:07,786 --> 00:09:11,356
to maximize your fitness
application's quality.


207
00:09:12,256 --> 00:09:14,666
And, of course, the most
important step start


208
00:09:14,666 --> 00:09:15,376
location updates.


209
00:09:16,236 --> 00:09:19,696
At this point you've got an
application that's happily


210
00:09:19,696 --> 00:09:22,176
collecting a location and
its going about its business


211
00:09:22,176 --> 00:09:23,976
and your user is
usually pretty happy.


212
00:09:24,516 --> 00:09:25,896
But it's also starting


213
00:09:25,896 --> 00:09:28,096
to actively drain the
user's battery life.


214
00:09:28,436 --> 00:09:32,106
To understand why, let's look at
how GPS works on an iOS device.


215
00:09:32,636 --> 00:09:34,346
So, inside any iPhone


216
00:09:34,346 --> 00:09:38,716
or any device that's got a GPS
chip there's actually a specific


217
00:09:38,716 --> 00:09:42,216
chip that's sole purpose is to
decode signals from a satellite


218
00:09:42,216 --> 00:09:45,466
and encode them as locations
and deliver them to the device


219
00:09:45,926 --> 00:09:48,116
at which point we
can deliver them


220
00:09:48,116 --> 00:09:49,706
to you via the Core
Location APIs.


221
00:09:50,436 --> 00:09:51,726
And this is an ongoing process


222
00:09:51,726 --> 00:09:54,816
that occurs whenever
you've turned on GPS


223
00:09:55,276 --> 00:09:56,816
and it consumes a
certain amount of battery.


224
00:09:57,666 --> 00:10:00,716
Beyond just the battery that's
consumed by the chip itself,


225
00:10:01,596 --> 00:10:03,006
the phone stays awake.


226
00:10:03,436 --> 00:10:05,636
So, if we had a way
to turn off the device


227
00:10:05,896 --> 00:10:09,446
and let it sleep while the
GPS was continuing to function


228
00:10:09,946 --> 00:10:13,156
and coalescing updates
into a single--


229
00:10:13,626 --> 00:10:17,056
coalescing updates on
that chip then we can end


230
00:10:17,056 --> 00:10:18,276
up leaving the device asleep.


231
00:10:18,716 --> 00:10:20,546
And now if the user pulled
the device off their arm


232
00:10:20,546 --> 00:10:22,886
and they wanted to check the
status of their run and woke


233
00:10:22,886 --> 00:10:25,716
up the phone, we could deliver
all of the location updates


234
00:10:25,716 --> 00:10:28,186
in one deferred updates to you.


235
00:10:28,766 --> 00:10:32,196
And it turns out that
if we leave the phone of


236
00:10:32,356 --> 00:10:35,556
but leave the GPS on that
roughly equates to up


237
00:10:35,556 --> 00:10:38,406
to 40 percent power savings.


238
00:10:38,506 --> 00:10:40,846
So, that's basically the
difference between going


239
00:10:40,846 --> 00:10:43,206
for an all day hike and having
a completely dead battery


240
00:10:43,666 --> 00:10:45,646
or getting back to the
trail head and being able


241
00:10:45,646 --> 00:10:49,466
to call your family member
and ask for a ride home.


242
00:10:49,666 --> 00:10:52,536
So, this is really exciting.


243
00:10:53,736 --> 00:10:56,966
To come with an API that would
work and allow us to defer


244
00:10:56,966 --> 00:10:59,746
as maximally as possible,
first we had to come


245
00:10:59,746 --> 00:11:02,306
up with what an idealized
fitness application looks like.


246
00:11:03,106 --> 00:11:06,596
And so for us, and we model this
basically off of apps that are


247
00:11:06,596 --> 00:11:09,956
in the app store and usually the
script goes something like this.


248
00:11:10,566 --> 00:11:13,786
User turns on their phone,
starts running applications.


249
00:11:14,156 --> 00:11:15,716
You give some sort
of notification being


250
00:11:15,716 --> 00:11:17,286
like hey, I've started the run.


251
00:11:18,736 --> 00:11:20,216
And now this is where
we'd actually


252
00:11:20,276 --> 00:11:22,626
like the phone to go off.


253
00:11:22,626 --> 00:11:26,516
And so we realize that some
users like to be motivated


254
00:11:26,516 --> 00:11:29,716
as they're running so that
at some point later there--


255
00:11:29,716 --> 00:11:31,416
they've gone a certain
amount of distance.


256
00:11:32,156 --> 00:11:33,626
It would be nice if the
phone could wake up,


257
00:11:34,346 --> 00:11:35,706
know that they've gone a mile


258
00:11:35,706 --> 00:11:38,226
and say congratulations
you've made a six minute mile.


259
00:11:38,466 --> 00:11:39,206
Keep up the good work!


260
00:11:40,616 --> 00:11:42,336
And again, going back to sleep


261
00:11:43,686 --> 00:11:46,766
and similarly sometime
later say,


262
00:11:46,766 --> 00:11:48,786
hey look you have
45 minutes remaining


263
00:11:48,786 --> 00:11:50,386
in your workout, keep it up.


264
00:11:51,326 --> 00:11:52,876
And then do this a
couple more times


265
00:11:53,226 --> 00:11:55,426
and eventually know
work out's completed.


266
00:11:55,696 --> 00:11:57,976
You've gone 9.6 miles, awesome.


267
00:11:59,476 --> 00:12:01,126
So, if we could do this


268
00:12:01,396 --> 00:12:04,866
and if we could defer location
updates during this period then


269
00:12:04,866 --> 00:12:07,326
we can actually save a
significant amount of power.


270
00:12:08,106 --> 00:12:11,956
And so, to achieve this we left
the API more or less alone.


271
00:12:12,726 --> 00:12:14,216
You set up your fitness
application just


272
00:12:14,216 --> 00:12:14,856
as you did before.


273
00:12:15,406 --> 00:12:17,126
The magic is going to come


274
00:12:17,126 --> 00:12:20,086
in from how you handle
locations from us.


275
00:12:20,626 --> 00:12:23,666
So, if you receive an
array of locations inside


276
00:12:23,666 --> 00:12:25,796
of the DidUpdate
Locations Delegate Method


277
00:12:27,136 --> 00:12:28,166
when you update your model


278
00:12:28,166 --> 00:12:30,206
with your run information
this is the model


279
00:12:30,206 --> 00:12:31,856
that you guys have written
that's going to keep track


280
00:12:31,856 --> 00:12:33,756
of how fast they're
running, how far they've run


281
00:12:34,286 --> 00:12:36,626
and be able to plot it on a map.


282
00:12:36,626 --> 00:12:38,256
Do this step as you've
done before,


283
00:12:38,716 --> 00:12:42,816
but now if you're not currently
deferring location updates go


284
00:12:42,816 --> 00:12:44,226
ahead and query that
model to figure


285
00:12:44,226 --> 00:12:47,036
out how much further you
have until the next goal


286
00:12:47,036 --> 00:12:50,306
for that user the next time
you want to motivate them.


287
00:12:50,506 --> 00:12:53,056
And similarly you might have
a time-based motivation.


288
00:12:53,226 --> 00:12:55,836
So, let's say you've got a
date that's you're next audible


289
00:12:55,836 --> 00:12:58,456
that you want to give
and you compute how far


290
00:12:58,456 --> 00:12:59,326
in the future it is.


291
00:12:59,966 --> 00:13:02,276
Now if you tell your
locationManager


292
00:13:02,676 --> 00:13:05,206
that I'm allowing you to
defer location updates


293
00:13:05,206 --> 00:13:07,206
until the user has
made it this far


294
00:13:07,516 --> 00:13:09,016
or this amount of time has past.


295
00:13:09,676 --> 00:13:12,976
This is the clue to us that
we can sleep the device


296
00:13:13,006 --> 00:13:14,306
if possible to save power.


297
00:13:15,416 --> 00:13:18,466
And the last thing you need to
do is keep track of the fact


298
00:13:18,576 --> 00:13:20,856
that you're deferringUpdates
because this is useful


299
00:13:20,856 --> 00:13:24,126
for your application to know.


300
00:13:24,376 --> 00:13:26,656
When your event finishes,


301
00:13:26,696 --> 00:13:30,616
when the users reach their goal
we'll send you a notification


302
00:13:31,026 --> 00:13:34,026
to a new delegate method
DidFinishDeferred updates


303
00:13:34,026 --> 00:13:34,456
with error.


304
00:13:35,316 --> 00:13:37,926
And in the normal case
this is not a problem.


305
00:13:38,036 --> 00:13:39,046
We just have to mark the fact


306
00:13:39,086 --> 00:13:42,666
that deferred updates are
completed and will rearmor logic


307
00:13:42,666 --> 00:13:44,346
for the next time so that
the next goal can fire,


308
00:13:44,406 --> 00:13:46,056
the next goal can be
scheduled and fire.


309
00:13:47,686 --> 00:13:49,576
Now, of course, there's
a handful of errors


310
00:13:49,706 --> 00:13:52,046
that we could return to
you in this situation.


311
00:13:52,716 --> 00:13:54,566
And so I'd like to take
an opportunity now to go


312
00:13:54,566 --> 00:13:55,586
over a couple of those reviews


313
00:13:55,586 --> 00:13:56,856
to help give you a
better understanding


314
00:13:56,856 --> 00:13:59,746
of how this API is
working under the hood.


315
00:13:59,956 --> 00:14:01,576
So, the first error
that you could run


316
00:14:01,576 --> 00:14:04,136
into is NotUpdatingLocation.


317
00:14:04,916 --> 00:14:08,246
Needless to say its impossible
for us to defer location updates


318
00:14:08,286 --> 00:14:09,756
if there are no location
updates.


319
00:14:10,206 --> 00:14:11,526
So, please remember


320
00:14:11,526 --> 00:14:15,796
to startUpdatingLocations
before you defer them.


321
00:14:15,966 --> 00:14:19,746
Similarly, if you don't
specify that you would


322
00:14:19,746 --> 00:14:22,706
like to use a GPS, if you're
using a much less accurate


323
00:14:23,066 --> 00:14:26,696
request for location, we don't
have a GPS chip that's going


324
00:14:26,696 --> 00:14:29,386
to be running and so we have no
way to offload location to it.


325
00:14:29,866 --> 00:14:31,056
Quite frankly there's
a good chance


326
00:14:31,126 --> 00:14:32,236
that if you're not using GPS


327
00:14:32,236 --> 00:14:34,536
that you're already saving a
significant amount of power.


328
00:14:35,076 --> 00:14:36,376
So, this is a GPS technology.


329
00:14:36,506 --> 00:14:40,156
So, to put your desired accuracy
back to the default value


330
00:14:40,156 --> 00:14:43,606
and just leave it alone in the
first place and specify best.


331
00:14:44,326 --> 00:14:47,746
And lastly it's possible that
you've told us that you'd


332
00:14:47,746 --> 00:14:50,896
like to filter locations via
the DistanceFilter property.


333
00:14:51,586 --> 00:14:54,796
And quite frankly us
collecting a significant number


334
00:14:54,796 --> 00:14:57,186
of locations and then
deliver it you all at once.


335
00:14:57,526 --> 00:15:00,406
If you're not interested in most
of them is it really beneficial.


336
00:15:00,606 --> 00:15:03,416
So, to use this API
you need to specify


337
00:15:03,416 --> 00:15:04,686
that you don't want
a distance filter


338
00:15:04,686 --> 00:15:06,176
or just leave again
the default value.


339
00:15:07,656 --> 00:15:10,536
So, these three errors once
you've established your


340
00:15:10,536 --> 00:15:13,046
application really
shouldn't ever crop up again.


341
00:15:13,336 --> 00:15:15,276
If they do, it's pretty
much a programming error.


342
00:15:16,116 --> 00:15:18,656
Normally, we would like
to assert in the case


343
00:15:18,656 --> 00:15:19,876
that you've got a
programming error


344
00:15:19,876 --> 00:15:21,836
so that we call your attention
to it as fast as possible.


345
00:15:22,266 --> 00:15:24,196
But because these
properties already existed


346
00:15:24,196 --> 00:15:26,846
and it's possible that your
code's already using them,


347
00:15:27,226 --> 00:15:30,036
we didn't want new assertions
to pop up in your code.


348
00:15:30,716 --> 00:15:33,726
So, inside of your
UpdatesDidFinish,


349
00:15:33,756 --> 00:15:37,676
the DeferredUpdatesDidFinish
delegate callback consider


350
00:15:37,676 --> 00:15:38,776
throwing your own assertion


351
00:15:39,006 --> 00:15:40,456
so you can call your
own attention to it.


352
00:15:40,456 --> 00:15:42,706
That way when debug builds
you can iron out these issues


353
00:15:43,006 --> 00:15:44,076
and your users will never see it


354
00:15:45,366 --> 00:15:48,056
and we can maximize
battery life.


355
00:15:48,276 --> 00:15:50,796
Now an error that you
actually can get that's normal


356
00:15:51,536 --> 00:15:53,336
is DeferredCanceled.


357
00:15:54,486 --> 00:15:58,746
This simply means that you
disallowed deferred updates


358
00:15:59,126 --> 00:16:03,056
and if this happens while we're
currently updating we give you a


359
00:16:03,056 --> 00:16:07,426
callback saying hey we're done
because you told us we're done.


360
00:16:07,426 --> 00:16:09,556
But it's also possible to
get a cancellation event


361
00:16:10,026 --> 00:16:12,966
if you reschedule deferred
updates with new parameters.


362
00:16:13,876 --> 00:16:15,686
And the reason why is
because this is a fully


363
00:16:15,686 --> 00:16:16,436
asynchronous API.


364
00:16:17,666 --> 00:16:20,766
So, if you're attempting
to tell us hey, go ahead


365
00:16:20,976 --> 00:16:23,866
and change the parameters
by how far I want to run,


366
00:16:24,136 --> 00:16:26,256
at the same time we're trying
to tell you, by the way,


367
00:16:26,256 --> 00:16:27,616
you're previous criteria
was hit.


368
00:16:28,696 --> 00:16:30,616
Now you have an impossible
situation


369
00:16:30,616 --> 00:16:33,856
where you can't know whether
or not we're telling you hey,


370
00:16:33,856 --> 00:16:36,376
you finished the new one or
you finished the old one.


371
00:16:37,496 --> 00:16:39,406
And so to resolve this issue,


372
00:16:39,406 --> 00:16:42,796
you will get exactly one
callback for every call


373
00:16:42,796 --> 00:16:44,456
to allow
DeferredLocationUpdates.


374
00:16:45,076 --> 00:16:48,266
So, if you're already deferring
and you call either disallow


375
00:16:48,266 --> 00:16:50,726
or allow you will get
a cancellation event.


376
00:16:51,436 --> 00:16:53,316
And again assuming
that we're not already


377
00:16:53,316 --> 00:16:56,646
in flight telling you that
you hit your exit criteria.


378
00:16:58,936 --> 00:17:00,686
So, if you look back
at the sample


379
00:17:00,686 --> 00:17:03,306
that I provided earlier this
is why we're keeping track


380
00:17:03,306 --> 00:17:05,205
of whether or not we're
deferring location updates.


381
00:17:05,675 --> 00:17:07,106
Because if you're not doing this


382
00:17:07,106 --> 00:17:09,406
and you're constantly
rescheduling us you're getting


383
00:17:09,406 --> 00:17:10,896
spurious cancellation errors.


384
00:17:11,496 --> 00:17:13,836
And worse than that you're
causing us to recompute


385
00:17:13,836 --> 00:17:15,076
when the device is
allowed to sleep,


386
00:17:15,465 --> 00:17:17,256
which basically is just going
to keep pushing that date


387
00:17:17,256 --> 00:17:19,146
out into the future and
there's no guarantee


388
00:17:19,146 --> 00:17:19,915
that we'll ever sleep


389
00:17:19,915 --> 00:17:21,646
and there's no guarantee
you'll ever get power savings.


390
00:17:22,986 --> 00:17:25,965
So, keep track of whether or
not you're deferring updates


391
00:17:26,296 --> 00:17:28,306
and know that cancellations
can occur


392
00:17:28,796 --> 00:17:30,856
because you've told us
to change something.


393
00:17:30,856 --> 00:17:34,706
Another error that you
can run into is kind


394
00:17:34,706 --> 00:17:36,456
of a general catch-all error.


395
00:17:36,746 --> 00:17:39,066
It's specifically saying
that DeferredUpdates failed.


396
00:17:39,936 --> 00:17:42,306
Now the easiest way for you
to get this error is simply


397
00:17:42,306 --> 00:17:44,566
because you're trying to
defer updates on a platform


398
00:17:44,566 --> 00:17:45,816
that doesn't support this.


399
00:17:46,506 --> 00:17:49,776
So, if you don't have a GPS,
for example, there's no way


400
00:17:49,776 --> 00:17:54,516
that we could possibly defer
updates to the GPS chip.


401
00:17:54,726 --> 00:17:57,616
Before starting DeferredUpdates
if you check to see whether


402
00:17:57,616 --> 00:18:01,396
or not it's available this will
save you again spurious errors.


403
00:18:02,536 --> 00:18:04,696
This can actually happen
under real circumstances.


404
00:18:05,136 --> 00:18:07,356
Consider the case where
GPS simply isn't available.


405
00:18:08,346 --> 00:18:09,596
Usually this can happen


406
00:18:09,686 --> 00:18:11,766
if you start a run
inside your apartment


407
00:18:12,056 --> 00:18:12,906
and you haven't made it back


408
00:18:12,906 --> 00:18:14,246
down to the ground
floor to go outside.


409
00:18:15,016 --> 00:18:16,386
The GPS simply isn't ready yet.


410
00:18:16,386 --> 00:18:19,836
It's not fixing so if you
try to tell us let me know


411
00:18:19,836 --> 00:18:20,896
when the user's gone a mile,


412
00:18:20,896 --> 00:18:22,836
and we don't have
a solid start point


413
00:18:22,836 --> 00:18:25,406
that we can agree upon
then we can't tell you


414
00:18:25,406 --> 00:18:26,326
when the user's gone a mile.


415
00:18:27,636 --> 00:18:30,476
So, we'll go ahead and
give you a deferred error.


416
00:18:31,246 --> 00:18:33,026
Similarly along the course


417
00:18:33,026 --> 00:18:34,956
of their run you can
have a minor hiccup


418
00:18:35,896 --> 00:18:37,816
that stops location updates.


419
00:18:38,656 --> 00:18:39,936
This could be moving
through a tunnel


420
00:18:40,366 --> 00:18:42,266
or any other temporary problem.


421
00:18:43,136 --> 00:18:45,676
And so in either of these
situations the simplest thing


422
00:18:45,676 --> 00:18:49,026
to do is simply to retry
the next time we give you a


423
00:18:49,026 --> 00:18:49,796
location update.


424
00:18:50,396 --> 00:18:53,086
Because if we can compute a new
location update there's a good


425
00:18:53,086 --> 00:18:54,626
chance that we've
already solved the problem


426
00:18:54,626 --> 00:18:57,346
that caused this issue and so
it's a good time to reschedule.


427
00:18:57,346 --> 00:18:58,746
So, if you look back


428
00:18:58,906 --> 00:19:02,416
at the sample code this is the
reason why we defer location


429
00:19:02,416 --> 00:19:04,496
updates from within
the location,


430
00:19:05,896 --> 00:19:08,146
didUpdateLocation
delegate method.


431
00:19:08,986 --> 00:19:11,256
And so if you use this
as your entry point


432
00:19:11,256 --> 00:19:14,056
into the API you've already
armed yourself to retry


433
00:19:14,056 --> 00:19:15,516
when it's probably
most appropriate.


434
00:19:15,516 --> 00:19:16,976
And you're not going
to constantly spam us


435
00:19:16,976 --> 00:19:18,896
with deferred updates just
because the previous one failed.


436
00:19:19,606 --> 00:19:21,126
A couple other notes
on this API.


437
00:19:21,786 --> 00:19:26,026
The first is that we actually
deliver LocationUpdates


438
00:19:26,236 --> 00:19:27,246
immediately in the foreground.


439
00:19:28,206 --> 00:19:30,546
If the user is actively
looking at your device,


440
00:19:31,066 --> 00:19:34,856
their own device, then
there's no way for us


441
00:19:34,856 --> 00:19:37,626
to sleep the device
because the device is on.


442
00:19:38,556 --> 00:19:39,766
Similarly if they're looking


443
00:19:39,766 --> 00:19:41,946
at your application
there's a good chance


444
00:19:41,946 --> 00:19:44,836
that they actually want to
see your traces being drawn


445
00:19:44,836 --> 00:19:46,266
in real-time on their map.


446
00:19:47,346 --> 00:19:49,236
And so we're not going
to penalize you for that


447
00:19:49,236 --> 00:19:51,146
and actually we'll keep
track of your foreground


448
00:19:51,146 --> 00:19:53,826
and background behavior for
you and guarantee that as long


449
00:19:53,826 --> 00:19:55,676
as you're in the
foreground whatever--


450
00:19:55,996 --> 00:19:58,226
we're going to temporarily
ignore deferred updates


451
00:19:58,226 --> 00:19:59,516
and just keep giving
you live ones.


452
00:19:59,516 --> 00:20:03,266
And when you back into the
background we'll gladly try


453
00:20:03,356 --> 00:20:06,346
to sleep.


454
00:20:06,536 --> 00:20:08,986
Now distance is completely
optional.


455
00:20:09,446 --> 00:20:11,766
If you don't care about how far
you want to go but you just want


456
00:20:11,766 --> 00:20:14,186
to tell the user how far they've
gone every fifteen minutes you


457
00:20:14,186 --> 00:20:16,266
can just leave the distance
field off by specifying


458
00:20:16,266 --> 00:20:18,386
that you want it to be
the maximal distance.


459
00:20:19,156 --> 00:20:21,626
Similarly if you want to
motivate people just by distance


460
00:20:21,626 --> 00:20:23,356
and not by time,
you could specify


461
00:20:23,356 --> 00:20:24,296
that you don't care about time.


462
00:20:24,996 --> 00:20:27,866
And, of course, together
these are optional--


463
00:20:27,866 --> 00:20:29,736
these are both optional
so the reality is


464
00:20:29,736 --> 00:20:33,286
that if you specify a max for
both fields we'll run as long


465
00:20:33,286 --> 00:20:36,036
as we are technically capable
of running and then when we run


466
00:20:36,036 --> 00:20:38,576
out of memory on the chip
we'll wake up temporarily,


467
00:20:38,846 --> 00:20:41,016
give you the current
location updates that we have


468
00:20:41,366 --> 00:20:43,006
and then go back to
sleep and keep going.


469
00:20:43,416 --> 00:20:45,866
And we can rinse and repeat
this until the next time


470
00:20:45,866 --> 00:20:47,946
that your user-- the next time


471
00:20:47,946 --> 00:20:50,426
that your user launches your
application and then you decide,


472
00:20:50,426 --> 00:20:52,046
hey I want to defer-- I want


473
00:20:52,046 --> 00:20:54,566
to cancel deferred
updates by disallowing it.


474
00:20:55,256 --> 00:20:57,786
And lastly, this is
actually available starting


475
00:20:57,786 --> 00:20:58,406
with iPhone 5.


476
00:20:59,476 --> 00:21:01,536
And this is why we
actually weren't able


477
00:21:01,536 --> 00:21:02,676
to talk about this last year.


478
00:21:02,806 --> 00:21:05,566
So, it's actually
available starting in iOS 6.


479
00:21:06,026 --> 00:21:08,476
So, if you're curious about
targeting your APIs against 7


480
00:21:08,476 --> 00:21:10,446
and 6 this API is
already available;


481
00:21:10,806 --> 00:21:12,246
go ahead and try using it.


482
00:21:14,556 --> 00:21:16,416
So, with that I'd like
to move on to a couple


483
00:21:16,416 --> 00:21:17,656
of New Region Monitoring
Features.


484
00:21:18,476 --> 00:21:23,926
The first feature I want to talk
about is solving a little bit


485
00:21:23,926 --> 00:21:28,176
of a problem; it's a minor
problem where let's say


486
00:21:28,176 --> 00:21:30,786
that your user decided that they
wanted to monitor for arrival


487
00:21:30,786 --> 00:21:31,666
at a particular location.


488
00:21:32,076 --> 00:21:35,846
Let's say and you already
have a Placemark for it


489
00:21:35,846 --> 00:21:37,256
that you've already
done a Geocode for.


490
00:21:37,256 --> 00:21:39,806
So you take the region out and
you start monitoring for it.


491
00:21:40,346 --> 00:21:42,456
That's all pretty simple, but
let's say that I was trying


492
00:21:42,456 --> 00:21:45,056
to remember that tomorrow
when I get to Mascone Center


493
00:21:45,406 --> 00:21:48,156
that I want to remember
to talk to somebody.


494
00:21:49,086 --> 00:21:52,796
Now, if I do this
then the result is


495
00:21:52,796 --> 00:21:55,876
that when I leave Mascone
tonight my application is going


496
00:21:55,876 --> 00:21:57,116
to launch, it's going to run.


497
00:21:57,346 --> 00:21:59,566
It's going to realize this
location update was not really


498
00:21:59,566 --> 00:22:01,216
relevant to me and
then go back to sleep.


499
00:22:02,456 --> 00:22:07,126
So, it would be nice if we could
save that step and allow you


500
00:22:07,126 --> 00:22:09,986
to specify that you only
want to be notified on entry


501
00:22:10,346 --> 00:22:12,466
and you don't care about
being notified on exit.


502
00:22:13,536 --> 00:22:17,126
And so by separating
these two entry criteria


503
00:22:17,336 --> 00:22:20,156
or by separating the
notifications between exit


504
00:22:20,196 --> 00:22:22,966
and entry we can launch
your application less often


505
00:22:23,386 --> 00:22:24,786
which will allow your
device to sleep more,


506
00:22:25,386 --> 00:22:26,476
which is good for your users.


507
00:22:27,656 --> 00:22:29,166
And these properties
that are hanging off


508
00:22:29,166 --> 00:22:30,706
of the CLRegion object


509
00:22:31,576 --> 00:22:34,426
and if you specify
them before telling us


510
00:22:34,426 --> 00:22:38,136
to monitor then we'll go ahead
and honor what your request is.


511
00:22:38,986 --> 00:22:40,486
And they both default to yes.


512
00:22:40,786 --> 00:22:42,496
This is for backwards
compatibility and just


513
00:22:42,496 --> 00:22:44,426
because it's kind of a
reasonable default value


514
00:22:44,826 --> 00:22:46,626
when you haven't told
us anything otherwise.


515
00:22:49,736 --> 00:22:53,636
Next, another Region Monitoring
tweak that we've made is


516
00:22:53,636 --> 00:22:56,396
to address specifically the case
where you're trying to monitor


517
00:22:56,396 --> 00:22:58,526
for a user's departure
from a particular location.


518
00:22:59,016 --> 00:23:00,826
Let's say you want a
temporary reminder saying hey,


519
00:23:01,056 --> 00:23:01,946
remember your car keys.


520
00:23:02,046 --> 00:23:04,366
That way if you get six
blocks from your friends house


521
00:23:04,366 --> 00:23:07,216
and go find your car you don't--
you actually can unlock the car


522
00:23:07,216 --> 00:23:10,256
as opposed to waiting and having
to go back to their house.


523
00:23:11,216 --> 00:23:13,286
So, this relatively
easy to achieve,


524
00:23:13,426 --> 00:23:17,656
assuming you already have a
recent location then you can


525
00:23:17,656 --> 00:23:21,126
construct a circular region
around this user's location.


526
00:23:21,816 --> 00:23:23,796
And, of course, you can use
the new properties too to say


527
00:23:23,796 --> 00:23:25,016
that you really only
care about exit.


528
00:23:25,936 --> 00:23:29,176
But, once you start a
monitoring for this region,


529
00:23:30,076 --> 00:23:33,266
Location will go off and try to
figure out where the user is.


530
00:23:34,146 --> 00:23:37,986
Now, depending on how long
ago that last location was


531
00:23:38,236 --> 00:23:41,286
and how fast the user is
moving, it's entirely possible


532
00:23:41,376 --> 00:23:44,216
that at the time that the
fence initializes your user has


533
00:23:44,216 --> 00:23:46,066
already left their friends house


534
00:23:46,906 --> 00:23:49,176
at which point there is no
exit notification to give you,


535
00:23:49,176 --> 00:23:50,256
because there is no exit event.


536
00:23:50,366 --> 00:23:52,596
It's simply that we
started outside the fence.


537
00:23:53,566 --> 00:23:57,176
So, in iOS 7 we're providing
a new delegate method.


538
00:23:57,636 --> 00:23:59,996
LocationManager did
determine state for region.


539
00:24:01,066 --> 00:24:02,846
Now anytime that we
determine the state


540
00:24:02,846 --> 00:24:04,476
for your region we
will call this method


541
00:24:05,296 --> 00:24:09,556
and if you say compare
the fence identifier


542
00:24:09,556 --> 00:24:12,906
against the departure
fence and then check to see


543
00:24:13,026 --> 00:24:14,006
that that state is outside,


544
00:24:14,536 --> 00:24:16,396
it doesn't really
matter how you got here.


545
00:24:16,396 --> 00:24:18,226
If it's a departure fence
you've already departed.


546
00:24:18,626 --> 00:24:20,826
It could have happened before
the fence monitoring started.


547
00:24:21,186 --> 00:24:24,226
Now you what the state is and
you can tell your user about it.


548
00:24:26,036 --> 00:24:29,516
This delegate method is
available on Location.


549
00:24:29,656 --> 00:24:31,656
This is the delegate
matter method


550
00:24:31,706 --> 00:24:33,766
that if you implement
we will call


551
00:24:33,766 --> 00:24:37,786
and we'll call it whenever your
application is already running.


552
00:24:38,636 --> 00:24:41,396
We won't relaunch your
application for all


553
00:24:41,396 --> 00:24:43,766
of the little details, but
we will gladly tell you


554
00:24:43,766 --> 00:24:46,476
about the state for a
region in detail as long


555
00:24:46,476 --> 00:24:47,206
as you're currently running.


556
00:24:47,756 --> 00:24:49,956
And there's three
possible states.


557
00:24:50,486 --> 00:24:53,506
The first is the fact that
you are inside the fence.


558
00:24:54,286 --> 00:24:56,286
Obviously the other
option is outside the fence


559
00:24:56,466 --> 00:24:58,556
and the third option is
simply we don't know.


560
00:24:59,636 --> 00:25:02,896
And usually this
happens when your--


561
00:25:03,046 --> 00:25:05,866
you've just installed the fence
and so we haven't had a chance


562
00:25:05,866 --> 00:25:09,806
to start monitoring for it yet
or alternatively it could happen


563
00:25:09,806 --> 00:25:11,756
if the device was rebooted
because we don't track--


564
00:25:11,786 --> 00:25:13,846
we don't persist
where the user was.


565
00:25:14,336 --> 00:25:16,936
If you reboot the device we
temporarily lose the state


566
00:25:16,936 --> 00:25:19,066
of all of our fences and we
have to reestablish ourselves.


567
00:25:19,446 --> 00:25:22,576
This is why a Mac Book
Pro if you shut it off


568
00:25:22,576 --> 00:25:24,426
and then you wake-- and
you reboot it inside


569
00:25:24,426 --> 00:25:26,196
of a new location
your fence won't fire.


570
00:25:26,466 --> 00:25:27,526
It's because we don't secure--


571
00:25:27,526 --> 00:25:29,806
we don't save your location
information to disk.


572
00:25:30,386 --> 00:25:33,936
So, with that there's one
more thing and that is


573
00:25:33,936 --> 00:25:34,736
that this is queryable.


574
00:25:35,296 --> 00:25:37,446
So if at any point in
time you're curious


575
00:25:37,446 --> 00:25:39,396
to know whether your fence
will fire and try to figure


576
00:25:39,396 --> 00:25:41,676
out which side of the
event criteria you're on,


577
00:25:42,016 --> 00:25:45,636
you can ask us for the
state of the region


578
00:25:45,776 --> 00:25:47,936
that we're already
monitoring and we'll tell you.


579
00:25:48,796 --> 00:25:52,096
This is particularly useful
if the radius boundary--


580
00:25:52,136 --> 00:25:54,096
where the user is and where
the center is and the radius


581
00:25:54,096 --> 00:25:57,106
in a straight line suggests
that you're inside the fence.


582
00:25:57,536 --> 00:25:59,026
But if the user has
been moving inside


583
00:25:59,026 --> 00:26:02,256
and outside the fence every
couple of seconds we're going


584
00:26:02,256 --> 00:26:03,466
to coalesce those updates


585
00:26:03,466 --> 00:26:05,176
into something that's
a bit more filtered


586
00:26:05,176 --> 00:26:07,016
and much more reasonable
for the user


587
00:26:07,276 --> 00:26:09,556
so they're not constantly being
spammed by new notifications.


588
00:26:10,006 --> 00:26:12,256
So, in that case it's
useful to query us


589
00:26:12,296 --> 00:26:13,466
to know what the
current state is


590
00:26:13,806 --> 00:26:16,206
so that you can decide
whether or not--


591
00:26:16,206 --> 00:26:17,996
so that you can be
in sync with us.


592
00:26:18,226 --> 00:26:22,066
So, we'd like to move on to talk
about a case that many of you


593
00:26:22,066 --> 00:26:24,506
that have retail shops
are familiar with


594
00:26:24,786 --> 00:26:27,956
and that is the idea of
basically how to interact


595
00:26:27,956 --> 00:26:30,156
with your user in a
meaningful way while the user is


596
00:26:30,156 --> 00:26:30,836
at your store.


597
00:26:31,766 --> 00:26:33,086
So, to do this, I want to talk


598
00:26:33,086 --> 00:26:35,226
about my side business,
Jay's Donut Shop.


599
00:26:36,066 --> 00:26:38,476
Now, it's a good point in
time to remind you you're all


600
00:26:38,476 --> 00:26:40,826
under NDA which means that
you can't tell my boss


601
00:26:40,826 --> 00:26:41,576
that you've been moonlighting.


602
00:26:43,486 --> 00:26:49,396
[Laughter] So, hopefully
my store has been quite


603
00:26:49,396 --> 00:26:50,096
successful lately.


604
00:26:50,236 --> 00:26:52,246
I've got a lot of stores
in a lot of locations.


605
00:26:52,706 --> 00:26:55,876
And so I'm looking to expand
and the most obvious choice


606
00:26:55,876 --> 00:26:58,756
for me is build an iOS app.


607
00:26:59,826 --> 00:27:01,646
It helps that I actually
know something about iOS


608
00:27:01,646 --> 00:27:04,426
and I can familiar with
this so it's not that hard.


609
00:27:04,426 --> 00:27:07,256
But engaging my customer
in their store is useful.


610
00:27:07,826 --> 00:27:10,876
You know knowing where stores
are, what they're hours are,


611
00:27:11,306 --> 00:27:14,306
what nutrition information
each donut has that's useful


612
00:27:14,306 --> 00:27:15,516
information that
anybody could have.


613
00:27:16,066 --> 00:27:18,116
But actually coming up
with a rich experience


614
00:27:18,406 --> 00:27:20,916
when my user's already in my
store and want to be engaged


615
00:27:20,916 --> 00:27:22,826
with my donut shop
is really cool.


616
00:27:23,996 --> 00:27:29,546
So, my first prototype for
this experience was resolved


617
00:27:29,546 --> 00:27:32,136
around welcoming my
customers to my shop.


618
00:27:33,036 --> 00:27:34,586
Being a location
engineer I already know


619
00:27:34,586 --> 00:27:35,956
that we have region
monitoring in API.


620
00:27:36,646 --> 00:27:39,026
So, I took my first
shop in Cupertino


621
00:27:39,026 --> 00:27:40,346
and I started monitoring
for that region.


622
00:27:40,996 --> 00:27:43,486
Now anytime I showed up at my
donut shop I got a notification


623
00:27:43,486 --> 00:27:44,916
saying, welcome to Jay's.


624
00:27:46,276 --> 00:27:49,156
Well that's great but let's
go ahead and expand it


625
00:27:49,156 --> 00:27:50,146
out to all my other stores.


626
00:27:50,236 --> 00:27:52,396
So, we first installed a fence
in San Francisco and then,


627
00:27:52,396 --> 00:27:54,306
of course, there's
a shop downstairs


628
00:27:54,306 --> 00:27:56,336
and then there's a shop over in
Twin Peaks and then there's one


629
00:27:56,336 --> 00:27:58,216
in San Jose and Los Angeles
and New York and Denver


630
00:27:58,216 --> 00:28:01,466
and quite frankly
this is both tedious


631
00:28:01,866 --> 00:28:04,486
and at some point we hit a wall
and we can't actually monitor


632
00:28:04,486 --> 00:28:05,496
for all of these regions.


633
00:28:05,646 --> 00:28:06,746
So, this is not going to work.


634
00:28:06,746 --> 00:28:10,336
What would be nice is instead
of monitoring for a region


635
00:28:10,336 --> 00:28:12,316
on the globe we actually
monitored


636
00:28:12,606 --> 00:28:15,976
for what we're actually looking
for, which is Jay's Donut Shop.


637
00:28:17,076 --> 00:28:19,446
And so conceptually
this is what we would


638
00:28:19,446 --> 00:28:23,376
like to achieve is just
specify that whenever I'm inside


639
00:28:23,376 --> 00:28:25,256
of Jay's I'd like to know
that I'm inside of Jay's.


640
00:28:25,746 --> 00:28:29,636
And so to set out to build this
core location team first looked


641
00:28:29,636 --> 00:28:30,836
at the actual physical store.


642
00:28:31,746 --> 00:28:34,226
And inside of every store
there's a glowing employee


643
00:28:34,226 --> 00:28:36,656
sitting behind the counter
saying, "Welcome to Jay's.


644
00:28:36,876 --> 00:28:39,146
Have a donut."


645
00:28:39,276 --> 00:28:41,886
So when we looked to build
something in the virtual world


646
00:28:41,886 --> 00:28:44,806
around this we wanted something
that approximated this behavior


647
00:28:45,416 --> 00:28:46,476
and we noticed that a lot


648
00:28:46,476 --> 00:28:50,766
of stores already are switching
their cash registers to iPads.


649
00:28:52,156 --> 00:28:54,656
So, wouldn't it be nice if
there was a way for your iPad


650
00:28:54,966 --> 00:28:56,836
to communicate with
your customer's iPhone


651
00:28:56,936 --> 00:28:58,766
to tell them they're
inside of Jay's Donut Shop


652
00:28:59,226 --> 00:29:01,936
and for your application
on their phone to pick up


653
00:29:02,336 --> 00:29:04,316
and give them an
immersive experience.


654
00:29:04,696 --> 00:29:08,846
Wouldn't it be even better if
instead of saying you're inside


655
00:29:08,846 --> 00:29:11,606
of Jay's to actually be able to
encode some extra information


656
00:29:11,606 --> 00:29:12,506
like you're inside


657
00:29:12,506 --> 00:29:14,566
of the Cupertino store,
try an apple fritter.


658
00:29:15,166 --> 00:29:20,936
[Laughter] So this is
what we set out to build.


659
00:29:21,626 --> 00:29:24,196
And to do this we
came up with a concept


660
00:29:24,196 --> 00:29:25,386
that we're calling iBeacons.


661
00:29:26,386 --> 00:29:31,466
And so with an iBeacon take a
Bluetooth device like an iPad


662
00:29:31,466 --> 00:29:34,076
and if we set a field around--


663
00:29:34,076 --> 00:29:36,416
if we start advertising
a particular packet


664
00:29:36,556 --> 00:29:41,756
from that Bluetooth device
and we can basically end


665
00:29:41,756 --> 00:29:45,366
up creating a field around the
device that is roughly a circle


666
00:29:46,526 --> 00:29:50,956
and if a customer walked by the
store and then entered the store


667
00:29:51,366 --> 00:29:55,456
with their own iPhone our iPhone
could see this Bluetooth low


668
00:29:55,456 --> 00:29:57,996
energy field and know
that I'm inside the store


669
00:29:58,356 --> 00:30:00,016
and change its behaviors
based on that.


670
00:30:01,256 --> 00:30:02,706
And similarly when
the user leaves


671
00:30:02,706 --> 00:30:07,776
that store we can know this and
we can have an exit notification


672
00:30:07,776 --> 00:30:10,806
as well and this allows
you to build context


673
00:30:10,806 --> 00:30:12,246
around multiple places.


674
00:30:12,396 --> 00:30:15,226
You know any store, any Jay's
store is roughly equivalent


675
00:30:15,226 --> 00:30:16,786
because each one has a beacon.


676
00:30:17,156 --> 00:30:18,496
It doesn't matter where
it is in the world.


677
00:30:18,836 --> 00:30:22,396
And so going back to code, this
is what we were trying to do.


678
00:30:23,156 --> 00:30:25,456
And to make this actually
feasible in practice you have


679
00:30:25,456 --> 00:30:27,946
to realize that Jay's
Donut Shop is not unique.


680
00:30:28,466 --> 00:30:32,076
Jay although not the most
common name isn't even unique


681
00:30:32,076 --> 00:30:33,906
in the donut world and
there's a lot of competitors.


682
00:30:33,986 --> 00:30:35,836
So, the first thing I'm
going to need is I'm going


683
00:30:35,836 --> 00:30:37,586
to need a universal
unique identifier


684
00:30:38,076 --> 00:30:39,846
to represent Jay's Donut Shop.


685
00:30:40,886 --> 00:30:43,986
Now if I go into an OS
X machine and I create--


686
00:30:43,986 --> 00:30:46,626
I use uuidgen I can
get one of these.


687
00:30:46,786 --> 00:30:50,076
And so, once I've done this
once I now have an identifier


688
00:30:50,076 --> 00:30:51,626
that I'm going to use
to represent my stores.


689
00:30:51,706 --> 00:30:55,416
And the odds that anybody else
could accidentally use this


690
00:30:55,416 --> 00:30:58,016
identifier to represent
my store is very slim.


691
00:30:59,026 --> 00:31:02,186
Now obviously somebody could
maliciously copy my identifier


692
00:31:02,686 --> 00:31:07,196
but in general this is a unique
way for me to see my stores.


693
00:31:07,746 --> 00:31:12,246
To turn this into
practice I'm going


694
00:31:12,246 --> 00:31:14,576
to have an application delegate
that's going to go ahead


695
00:31:14,576 --> 00:31:17,676
and construct a uuid
object from this string


696
00:31:17,676 --> 00:31:20,656
that I've precomputed and
also going to store the fact


697
00:31:20,656 --> 00:31:21,826
that this is Jay's Donut Shop.


698
00:31:22,706 --> 00:31:25,476
Uuids are great but it's
also much easier to code


699
00:31:25,476 --> 00:31:27,516
if you have a human
readable identifier,


700
00:31:28,036 --> 00:31:28,956
especially if you're
going to deal


701
00:31:28,956 --> 00:31:31,106
with multiple beacons
inside of one app.


702
00:31:31,646 --> 00:31:34,066
And, of course, this is based
around a location manager


703
00:31:34,066 --> 00:31:35,206
so you're going to
have to create one


704
00:31:35,206 --> 00:31:36,726
of these and set yourself up.


705
00:31:37,416 --> 00:31:39,646
Now when I'm ready
to start monitoring


706
00:31:39,646 --> 00:31:43,666
for my stores I can implement
a function that looks something


707
00:31:43,666 --> 00:31:46,276
like this,
startMonitoringForStores.


708
00:31:46,736 --> 00:31:49,546
And all I have to do is
construct a CLBeaconRegion


709
00:31:49,546 --> 00:31:54,556
object, specify the proximity
uuid that I've generated.


710
00:31:54,556 --> 00:31:57,106
This is the one that all of my
stores are going to advertise


711
00:31:57,856 --> 00:31:59,316
and then specify identifier.


712
00:31:59,826 --> 00:32:02,806
This identifier is what uniquely
identifies it to your instance


713
00:32:02,806 --> 00:32:05,306
of core location such
that if you decide


714
00:32:05,306 --> 00:32:06,816
to change its parameters
after the fact


715
00:32:06,816 --> 00:32:11,156
or uninstall it you can use
that identifier to do so.


716
00:32:11,396 --> 00:32:13,236
Lastly,
startMonitoringForRegion.


717
00:32:13,516 --> 00:32:15,306
This is the exact same
region monitor in API


718
00:32:15,306 --> 00:32:17,736
that you're already familiar
with and now it's been expanded


719
00:32:17,736 --> 00:32:19,846
to handle these BeaconRegion
objects.


720
00:32:20,496 --> 00:32:25,536
This means in turn that when you
get an entry notification you


721
00:32:25,536 --> 00:32:28,466
handle it exactly like you
would a geolocation update.


722
00:32:28,856 --> 00:32:33,196
Specifically saying that hey,
is the identifier of the region


723
00:32:33,196 --> 00:32:35,416
that I've entered the same
as the one that I care about?


724
00:32:35,876 --> 00:32:37,646
Okay, go ahead and tell the user


725
00:32:37,846 --> 00:32:39,386
that they are at
Jay's Donut Shop.


726
00:32:40,996 --> 00:32:43,036
This is a great first
step at a product.


727
00:32:43,386 --> 00:32:46,106
Now my friends can, that
are trying this app can go


728
00:32:46,106 --> 00:32:48,536
to a store and get
immediately notified


729
00:32:48,536 --> 00:32:49,986
that hey look you're
inside of Jay's Donut Shop.


730
00:32:50,526 --> 00:32:52,866
But one of my friends came
back to me and said hey look,


731
00:32:53,286 --> 00:32:55,436
you've got that Jay's Donut
Shop over at Valley Fair Mall


732
00:32:55,876 --> 00:32:57,576
and whenever I go inside there


733
00:32:57,576 --> 00:32:59,576
and I go buy some
shoes the result is


734
00:32:59,576 --> 00:33:00,926
that my phone starts vibrating


735
00:33:00,926 --> 00:33:02,436
because I go by Jay's
Donut Shop.


736
00:33:02,436 --> 00:33:04,396
So this is relatively annoying.


737
00:33:05,976 --> 00:33:08,606
The reality is that users
don't necessarily care


738
00:33:08,606 --> 00:33:09,816
that they're inside of Jay's.


739
00:33:10,266 --> 00:33:12,356
They're usually seeking to
interact with your store.


740
00:33:12,606 --> 00:33:15,296
And when they're ready to do
that they're perfectly capable


741
00:33:15,296 --> 00:33:16,676
of pulling their phone
out of their pocket


742
00:33:16,676 --> 00:33:17,756
and turning their display on


743
00:33:18,006 --> 00:33:19,516
and launching their
application themselves.


744
00:33:20,716 --> 00:33:25,206
So, but we can still speed the
process up by letting you know


745
00:33:25,356 --> 00:33:27,106
when they've turned on their
phone inside of a store.


746
00:33:28,266 --> 00:33:30,266
And so to do that
there's an added property


747
00:33:30,266 --> 00:33:33,976
that BeaconRegions support which
is notifyEntryStateOnDisplay.


748
00:33:34,816 --> 00:33:39,086
And now any time a user
turns on their phone inside


749
00:33:39,086 --> 00:33:41,796
of my stores my application
will get a launch event


750
00:33:42,136 --> 00:33:43,646
and I'll have the
ability to respond


751
00:33:43,646 --> 00:33:44,496
to the user's interaction.


752
00:33:45,076 --> 00:33:49,116
And, of course, we can
disable the notifyOnEntry.


753
00:33:49,276 --> 00:33:50,506
This is spurious wake


754
00:33:50,506 --> 00:33:52,076
that wasn't really
relevant to the user.


755
00:33:52,446 --> 00:33:54,486
There's no reason to know
that we've walked by Jay's


756
00:33:54,486 --> 00:33:56,556
or even stepped into
Jay's until I'm ready


757
00:33:56,556 --> 00:33:57,606
to interact with my phone.


758
00:33:58,216 --> 00:34:00,796
And we're going to
leave the notification


759
00:34:01,136 --> 00:34:03,976
on exit around in a second.


760
00:34:04,036 --> 00:34:08,186
But now if I monitor for
regions this way that--


761
00:34:08,186 --> 00:34:10,356
my friend that's walking through
Valley Fair doesn't have their


762
00:34:10,356 --> 00:34:12,025
phone vibrating in their
pocket all the time,


763
00:34:12,525 --> 00:34:14,266
they can go get their shoes
and then when they're ready


764
00:34:14,266 --> 00:34:16,826
for a donut they can now
interact with my app.


765
00:34:18,266 --> 00:34:19,886
The problem is that when
they interact with their app


766
00:34:20,096 --> 00:34:23,266
in line they get that fantastic
notification welcome to Jay's.


767
00:34:23,266 --> 00:34:24,436
Here's all these cool
things you can do.


768
00:34:24,436 --> 00:34:26,976
They buy their donut, they
sit back down at the table.


769
00:34:26,976 --> 00:34:28,446
They're drinking their coffee,
they pull out their phone


770
00:34:28,446 --> 00:34:30,286
to check their email;
hey welcome to Jay's.


771
00:34:31,886 --> 00:34:33,626
So, it's important
to keep in mind


772
00:34:33,626 --> 00:34:35,815
that this will fire every
time their display turns


773
00:34:35,815 --> 00:34:37,076
on if they're inside your store.


774
00:34:37,295 --> 00:34:38,866
So, what you're going
to want to do is


775
00:34:38,866 --> 00:34:41,926
if you haven't already presented
a notification then go ahead


776
00:34:41,926 --> 00:34:42,856
and present a notification.


777
00:34:43,275 --> 00:34:44,746
If you've previously
notified them that hey,


778
00:34:44,746 --> 00:34:46,485
you're in Jay's you
don't really need


779
00:34:46,485 --> 00:34:49,045
to have another notification pop
up on their lock screen or worse


780
00:34:49,045 --> 00:34:50,726
over what application
they're trying to use.


781
00:34:52,186 --> 00:34:54,936
So, this is on you guys
to figure out how to not--


782
00:34:54,936 --> 00:34:57,386
to keep track of the fact
that you're inside of a store.


783
00:34:58,126 --> 00:35:00,506
And it I might be a
good idea to then--


784
00:35:00,506 --> 00:35:03,296
track when you leave the
store so any notifications


785
00:35:03,296 --> 00:35:05,586
that are still lying around on
the lock screen you can clear


786
00:35:05,936 --> 00:35:07,646
and similarly you
can rearm yourself


787
00:35:07,646 --> 00:35:10,406
for the next time the
user uses the phone inside


788
00:35:10,406 --> 00:35:14,056
of a different store.


789
00:35:14,266 --> 00:35:17,566
So, that's a great first
step, but the reality is


790
00:35:17,566 --> 00:35:20,386
that welcoming people to Jay's
Donut Shop doesn't really buy


791
00:35:20,386 --> 00:35:20,816
them much.


792
00:35:20,816 --> 00:35:22,536
What can you do with
a warm welcome?


793
00:35:22,536 --> 00:35:23,786
That's what my employees
are for.


794
00:35:23,786 --> 00:35:26,106
I pay them a lot of money to be
very smiley and friendly to me.


795
00:35:27,256 --> 00:35:29,186
So, wouldn't it better--


796
00:35:29,336 --> 00:35:32,246
so let's come up with
a use case around this.


797
00:35:32,666 --> 00:35:33,916
So, one of the things
that you can do


798
00:35:33,916 --> 00:35:36,346
on my website is you
can order donuts online


799
00:35:36,666 --> 00:35:39,936
and you can have them ready for
pickup at a store which means


800
00:35:39,936 --> 00:35:41,546
that you know you go home,
you print off a receipt,


801
00:35:41,546 --> 00:35:42,526
you bring the receipt
in the store


802
00:35:42,526 --> 00:35:43,606
and they bring you
a box of donuts.


803
00:35:44,326 --> 00:35:45,056
Wouldn't it be better


804
00:35:45,056 --> 00:35:47,806
if you could turn your
iPhone into that receipt?


805
00:35:49,216 --> 00:35:52,056
The reality is that we have
had this technology for a while


806
00:35:52,386 --> 00:35:53,446
and anybody can do it.


807
00:35:54,236 --> 00:35:56,286
What's going to make my
application unique is


808
00:35:56,286 --> 00:35:59,396
that when I approach the cash
register my phone is going


809
00:35:59,396 --> 00:36:01,936
to know that I'm at the
cash register and it's going


810
00:36:01,936 --> 00:36:05,286
to present me a notification
saying, hey now's a good time


811
00:36:05,286 --> 00:36:07,066
to pull out your receipt
because your donuts are ready;


812
00:36:07,066 --> 00:36:07,586
you can pick them up.


813
00:36:08,956 --> 00:36:11,806
To do this we need to know
approximately how far we are


814
00:36:11,806 --> 00:36:13,576
from the cash register
not just the fact


815
00:36:13,576 --> 00:36:15,266
that we're physically
inside of Jay's Donut Shop.


816
00:36:16,596 --> 00:36:19,896
So, to achieve this iBeacon
supports a notion of ranging.


817
00:36:20,706 --> 00:36:24,496
And so if we took that same
Bluetooth little energy signal


818
00:36:24,976 --> 00:36:27,476
and if we kind of
conceptualize it as a field


819
00:36:27,786 --> 00:36:30,426
where the closer you are to
Jay's Donuts the stronger


820
00:36:30,686 --> 00:36:31,826
that signal's going to be


821
00:36:31,826 --> 00:36:33,886
and the further away you are
the weaker its going to be,


822
00:36:34,596 --> 00:36:38,416
we can ascribe rough
categories to that distance.


823
00:36:38,416 --> 00:36:40,366
So, you're immediately
on top of the beacon.


824
00:36:40,736 --> 00:36:44,466
You're somewhat close by or
really far away or we don't


825
00:36:44,466 --> 00:36:45,776
where the beacon is, probably


826
00:36:45,776 --> 00:36:47,046
because we've never
seen it before


827
00:36:47,046 --> 00:36:47,976
or we can't see it right now.


828
00:36:49,026 --> 00:36:51,446
So, with this rough notion


829
00:36:51,446 --> 00:36:55,466
of ranging we can actually
achieve this notification that's


830
00:36:55,466 --> 00:36:58,416
specifically tied to a
location inside of my store


831
00:36:58,586 --> 00:37:00,176
and not just the
store more broadly.


832
00:37:01,256 --> 00:37:04,086
So, going back to my region
monitoring example when I know


833
00:37:04,086 --> 00:37:06,946
that my user's turned on their
phone inside of the store,


834
00:37:07,016 --> 00:37:09,726
because again I'm
not notifyingOnEntry


835
00:37:09,726 --> 00:37:10,536
when the display is on.


836
00:37:11,916 --> 00:37:15,616
Now, whenever this happens I
can start ranging for beacons


837
00:37:15,756 --> 00:37:21,246
in this region and so any beacon
in the store that I can see


838
00:37:21,396 --> 00:37:24,246
after I start ranging
I'll get an individual--


839
00:37:24,246 --> 00:37:26,856
I'll get an update that
coalesces all of them


840
00:37:26,856 --> 00:37:29,186
and tells me the approximate
range to each of them.


841
00:37:30,256 --> 00:37:34,026
So, locationManager
didRangeBeacons


842
00:37:34,026 --> 00:37:36,566
In Region will have this array
of beacons that I can see.


843
00:37:37,296 --> 00:37:40,436
And as long as that beacon count
is positive I can take the first


844
00:37:40,436 --> 00:37:44,246
object in that array,
which is roughly equivalent


845
00:37:44,246 --> 00:37:45,136
to the closest beacon.


846
00:37:45,196 --> 00:37:48,706
Now, you have to realize that
this not 100 percent precise


847
00:37:49,086 --> 00:37:51,876
and so it might not actually
be physically the closest,


848
00:37:52,216 --> 00:37:55,506
but it is the one that we're
seeing and its roughly--


849
00:37:56,256 --> 00:37:58,696
it's approximately the closest.


850
00:37:58,996 --> 00:38:00,516
And more importantly in
Jay's Donut Shop there's only


851
00:38:00,516 --> 00:38:00,976
one anyway.


852
00:38:02,076 --> 00:38:05,266
So, if I check to see if
that proximity is immediately


853
00:38:05,266 --> 00:38:08,136
in my vicinity then
now's a good time


854
00:38:08,136 --> 00:38:09,326
to show the receipt
notification.


855
00:38:10,486 --> 00:38:12,766
And of course, if all the
beacons drop down to zero


856
00:38:13,216 --> 00:38:14,626
that means that I've
left the store


857
00:38:14,626 --> 00:38:15,746
and I can't see any beacons


858
00:38:15,746 --> 00:38:17,356
and so it's a good time
to hide the receipt.


859
00:38:18,716 --> 00:38:20,956
And similarly to before,
we want to bookend this


860
00:38:21,216 --> 00:38:23,976
with clearing out notifications.


861
00:38:23,976 --> 00:38:27,906
So, when we exit my store it's
a good idea to stop ranging


862
00:38:27,906 --> 00:38:29,486
for beacons in the region,
because you're not going


863
00:38:29,486 --> 00:38:31,066
to see any more if you're
not inside that field


864
00:38:32,026 --> 00:38:34,946
and similarly hide the
receipt if you haven't already.


865
00:38:36,636 --> 00:38:43,496
So, this is a great way to do
approximate ranging to things


866
00:38:43,746 --> 00:38:46,676
and know where you are
and relative to a beacon.


867
00:38:47,186 --> 00:38:50,656
So what beacons actually
are is they support a number


868
00:38:50,906 --> 00:38:52,246
of properties.


869
00:38:52,286 --> 00:38:53,736
The first is the proximity uuid.


870
00:38:54,216 --> 00:38:56,076
This is the universal
unique identifier


871
00:38:56,146 --> 00:38:57,766
that you've told
us to monitor for.


872
00:38:58,156 --> 00:39:00,096
And when we find the
beacon that matches it,


873
00:39:00,096 --> 00:39:01,476
this is the beacon
that we return to.


874
00:39:02,016 --> 00:39:05,366
And every beacon that--
every beacon has one.


875
00:39:05,856 --> 00:39:09,176
And when we get-- when we see
one we have the approximate


876
00:39:09,176 --> 00:39:10,156
range to that beacon.


877
00:39:10,616 --> 00:39:12,696
And this is one of
four types the unknown,


878
00:39:13,046 --> 00:39:16,196
immediate, near or far.


879
00:39:16,266 --> 00:39:18,766
And lastly there's
these two other fields,


880
00:39:18,866 --> 00:39:20,426
a major and a minor number.


881
00:39:21,186 --> 00:39:25,006
These are two 16 bit values
that are completely customizable


882
00:39:25,066 --> 00:39:26,826
that you can program
onto the beacon yourself.


883
00:39:27,876 --> 00:39:28,826
What can you do with these?


884
00:39:29,396 --> 00:39:32,066
Well, in Jay's Donut
Shop I had this problem.


885
00:39:32,746 --> 00:39:34,706
I had a friend that like
really liked Jay's Donut Shop


886
00:39:34,706 --> 00:39:36,186
and he went to the shop
multiple times a day.


887
00:39:36,186 --> 00:39:39,296
And when he tried to use my
pickup order system he went


888
00:39:39,296 --> 00:39:41,996
to one store in the morning and
then his donuts were available


889
00:39:41,996 --> 00:39:43,156
at a different store
in the afternoon.


890
00:39:43,156 --> 00:39:44,416
But when he got to the store


891
00:39:44,416 --> 00:39:45,796
in the morning he
got a notification.


892
00:39:45,796 --> 00:39:47,116
It would be like hey
your donuts are ready.


893
00:39:48,226 --> 00:39:52,176
So, if we encoded the store
number as the major identifier


894
00:39:52,176 --> 00:39:55,716
and we got, read that off the
beacon as we arranged for it


895
00:39:56,436 --> 00:39:59,716
and we compared that to the
receipt that I already knew


896
00:39:59,716 --> 00:40:00,816
where the store was--


897
00:40:01,026 --> 00:40:03,066
which store was involved
in the purchase,


898
00:40:03,836 --> 00:40:06,556
now I can notify the user only
when they're at the right store.


899
00:40:06,726 --> 00:40:07,846
They go to the wrong store.


900
00:40:08,356 --> 00:40:10,216
I'm glad you like donuts,
but they're not going


901
00:40:10,216 --> 00:40:11,796
to get the donuts they
previously ordered they'll have


902
00:40:11,796 --> 00:40:14,376
to get some new donuts.


903
00:40:14,376 --> 00:40:15,906
And so, this is just
one example.


904
00:40:16,206 --> 00:40:18,506
A common example is
setting the major identifier


905
00:40:18,506 --> 00:40:21,876
to represent a particular store
location and so you can monitor


906
00:40:21,876 --> 00:40:25,226
for a uuid of your
stores that's universal


907
00:40:25,226 --> 00:40:26,306
across all of your stores.


908
00:40:26,576 --> 00:40:28,346
But the major identifier
is just tied


909
00:40:28,346 --> 00:40:29,666
to this one particular instance.


910
00:40:29,666 --> 00:40:32,506
So what about the minor ID?


911
00:40:32,946 --> 00:40:34,966
Forget the stores, what
can we do with a minor ID?


912
00:40:35,116 --> 00:40:37,306
Let's go back to the
original donut shop example.


913
00:40:37,906 --> 00:40:40,096
Welcome to Cupertino,
try an apple fritter.


914
00:40:40,876 --> 00:40:42,946
If each store which
we're representing


915
00:40:42,946 --> 00:40:47,486
by a major identifier also
advertised a particular donut,


916
00:40:47,846 --> 00:40:50,216
that it was its particular
specialty,


917
00:40:50,816 --> 00:40:52,326
now without even bothering


918
00:40:52,326 --> 00:40:55,156
to hit the internet you could
just look up for that donut


919
00:40:55,536 --> 00:40:57,036
on your database in your app


920
00:40:57,396 --> 00:41:00,236
and say hey look this number
corresponds with apple fritter.


921
00:41:00,526 --> 00:41:01,976
Tell the user that if you're


922
00:41:01,976 --> 00:41:03,906
in Cupertino you really should
be trying an apple fritter.


923
00:41:05,126 --> 00:41:10,026
And so this is just one example
of how you could customize major


924
00:41:10,026 --> 00:41:11,496
and minor for your application.


925
00:41:11,656 --> 00:41:13,336
Let's look at another example.


926
00:41:13,336 --> 00:41:15,266
Let's look at something
bigger than Jay's Donut Shop.


927
00:41:16,006 --> 00:41:16,976
Let's take a department store.


928
00:41:17,936 --> 00:41:20,106
Now you can monitor for all
of your department stores


929
00:41:20,106 --> 00:41:21,526
and when you're inside of
a department store you know


930
00:41:21,526 --> 00:41:22,876
which one you're at, but all


931
00:41:22,876 --> 00:41:24,726
of your department stores
are pretty much uniform.


932
00:41:24,726 --> 00:41:25,986
They all have the
same departments.


933
00:41:26,686 --> 00:41:29,636
What if each department had
it's own beacon inside of it.


934
00:41:30,106 --> 00:41:33,636
Again this are Bluetooth
low energy devices so its--


935
00:41:33,926 --> 00:41:36,516
will be possible to manufacture
relatively cheap ones


936
00:41:36,926 --> 00:41:40,276
and we're intending to release
a Bluetooth profile for those


937
00:41:40,276 --> 00:41:41,166
of you that are familiar with it


938
00:41:41,166 --> 00:41:43,516
that will allow other
manufacturers to produce these.


939
00:41:44,296 --> 00:41:46,326
But if you embedded one of
these cheap devices inside


940
00:41:46,326 --> 00:41:49,476
of each department now when
your user is inside the store


941
00:41:49,476 --> 00:41:52,426
and they're at the jewelry
section and they pull


942
00:41:52,426 --> 00:41:55,466
up on their phone they could
see a list like current sales


943
00:41:55,546 --> 00:41:57,286
or promotions on jewelry.


944
00:41:57,866 --> 00:42:01,126
Or if they walk into the
menswear section they could


945
00:42:01,126 --> 00:42:03,356
realize Father's Day
is coming up in a week.


946
00:42:03,356 --> 00:42:06,216
It might be a good
time to buy dad a tie.


947
00:42:06,606 --> 00:42:09,576
These are the types
of specific things


948
00:42:09,576 --> 00:42:13,496
that you can do once you
know more information


949
00:42:13,496 --> 00:42:16,216
about a particular beacon
and how far you are to it.


950
00:42:17,286 --> 00:42:19,746
You could have a museum where
each painting was tagged


951
00:42:19,746 --> 00:42:21,676
with different beacon and you
could pull it up in your catalog


952
00:42:21,676 --> 00:42:26,076
of paintings and know all of the
information relative to that,


953
00:42:26,726 --> 00:42:31,596
maybe that section of the
museum that you're in.


954
00:42:31,596 --> 00:42:34,336
There's another example
and that is keep in mind


955
00:42:34,336 --> 00:42:35,756
that these are small devices.


956
00:42:35,866 --> 00:42:36,366
They're mobile.


957
00:42:36,766 --> 00:42:37,756
You can put one in your pocket.


958
00:42:37,756 --> 00:42:38,626
You can walk around with it.


959
00:42:39,066 --> 00:42:41,446
You could also glue one
onto the side of a bus.


960
00:42:42,586 --> 00:42:44,956
Now if you did this and you
encoded the major identifier


961
00:42:44,956 --> 00:42:48,656
as the route information
now when you're seeing a bus


962
00:42:48,746 --> 00:42:51,506
and you're looking at your
phone you could know exactly


963
00:42:51,506 --> 00:42:52,446
where this route takes you.


964
00:42:52,996 --> 00:42:55,776
And, in fact, we already
code this in human lands


965
00:42:55,836 --> 00:42:58,446
to integers anyway, because
quite frankly bus numbers are


966
00:42:58,446 --> 00:43:00,886
sometimes easier to deal
with than route names.


967
00:43:01,756 --> 00:43:04,066
But there's an added
problem with buses and trains


968
00:43:04,066 --> 00:43:07,756
and that sometimes a train
might run express versus not.


969
00:43:07,756 --> 00:43:10,646
And if it's going to run
express it might only stop


970
00:43:10,646 --> 00:43:11,676
at a handful of stops.


971
00:43:12,416 --> 00:43:15,356
So if I encoded the particular
bus number on a minor identifier


972
00:43:15,986 --> 00:43:18,856
and my user was using my
transportation app in a station


973
00:43:19,156 --> 00:43:21,036
and was ranging,
when that bus pulls


974
00:43:21,036 --> 00:43:24,406
into the station they could
immediately know hey this is the


975
00:43:24,406 --> 00:43:26,756
bus that's going to take me home
or no actually this is going


976
00:43:26,756 --> 00:43:28,346
to skip my stop; I should
wait for the next one.


977
00:43:29,516 --> 00:43:31,586
This is some important
information that you could--


978
00:43:31,766 --> 00:43:33,586
this is just one
example of information


979
00:43:33,586 --> 00:43:36,416
that you could encode
that's contextually relevant


980
00:43:37,006 --> 00:43:38,146
to the user.


981
00:43:38,146 --> 00:43:39,286
Now I mentioned that
we're planning


982
00:43:39,286 --> 00:43:42,006
on allowing other people
to manufacture beacons.


983
00:43:42,426 --> 00:43:44,586
But for starters
let's take something


984
00:43:44,586 --> 00:43:46,536
that you probably already have
and turn it into a beacon.


985
00:43:47,146 --> 00:43:52,266
Modern iOS devices that are
capable of Bluetooth energy are


986
00:43:52,766 --> 00:43:55,516
in scanning for beacons can
also themselves become beacons.


987
00:43:56,246 --> 00:43:58,736
And so if you create
a beacon region


988
00:43:58,836 --> 00:44:02,126
with the same proximity uuid
major value and minor value


989
00:44:02,126 --> 00:44:06,406
that you'd like to scan for,
then you can actually ask


990
00:44:06,406 --> 00:44:10,276
for a location to encode that
information as peripheral data.


991
00:44:11,396 --> 00:44:12,816
And you can then pass that on


992
00:44:13,226 --> 00:44:15,086
to a core Bluetooth
peripheral manager


993
00:44:15,086 --> 00:44:16,526
that you've already
instantiated inside your app


994
00:44:17,096 --> 00:44:18,626
and you can start
advertising that data.


995
00:44:19,196 --> 00:44:22,416
And of course this
is calibratable


996
00:44:22,416 --> 00:44:24,666
and so you can specify
exactly how loudly


997
00:44:24,666 --> 00:44:25,946
that beacon should advertise.


998
00:44:26,416 --> 00:44:28,356
So, if you've got a small
store you might not want


999
00:44:28,356 --> 00:44:31,076
to shout quite as loud,
that way it doesn't blast


1000
00:44:31,226 --> 00:44:32,636
out into the street, but maybe


1001
00:44:32,716 --> 00:44:34,376
if you've got a bigger store
you need a bigger field


1002
00:44:34,606 --> 00:44:35,526
and this is tunable.


1003
00:44:36,256 --> 00:44:37,986
And there's going to
be sample code online


1004
00:44:38,356 --> 00:44:39,736
for a project called Air Locate.


1005
00:44:39,906 --> 00:44:43,256
It's both going to show you
usage of our API in terms


1006
00:44:43,256 --> 00:44:45,526
of using beacons for
fencing and ranging


1007
00:44:45,836 --> 00:44:48,016
but also turning a
device into a beacon


1008
00:44:48,526 --> 00:44:50,636
and letting you experience--


1009
00:44:50,766 --> 00:44:53,066
guiding you through
the calibration process


1010
00:44:53,066 --> 00:44:56,386
of exactly how to tune
the advertisement suitably


1011
00:44:56,386 --> 00:44:59,346
for your store.


1012
00:44:59,546 --> 00:45:04,736
So, tying beacons back
into the CLRegion API.


1013
00:45:05,716 --> 00:45:08,056
Previously we had
a CLRegionObject.


1014
00:45:08,056 --> 00:45:10,236
This is what all of the
APIs could take in terms


1015
00:45:10,236 --> 00:45:11,546
of a startingMonitoringForRegion


1016
00:45:11,546 --> 00:45:14,216
for getting the current
list of regions.


1017
00:45:15,076 --> 00:45:16,006
So, to expand this


1018
00:45:16,006 --> 00:45:18,826
to BeaconRegions we
subclassed CLRegion


1019
00:45:18,916 --> 00:45:20,436
to support a CLBeaconRegion.


1020
00:45:21,816 --> 00:45:23,116
Now you might be aware


1021
00:45:23,116 --> 00:45:26,166
that because the CLRegions were
geared towards geospecific data


1022
00:45:26,866 --> 00:45:29,476
they had a center on the
earth and they had a radius.


1023
00:45:30,076 --> 00:45:32,146
This doesn't really make sense
in the context of a beacon


1024
00:45:32,146 --> 00:45:36,076
which could be glued to a bus or
kept in your pocket or just is--


1025
00:45:36,286 --> 00:45:37,896
doesn't really have a center.


1026
00:45:38,656 --> 00:45:39,896
So, we refactored the code


1027
00:45:40,726 --> 00:45:43,906
and we made available a new
class, CLCircularRegion.


1028
00:45:44,606 --> 00:45:47,596
So, now in iOS 7 BeaconRegions


1029
00:45:47,596 --> 00:45:51,416
and CircularRegions are
your concrete classes


1030
00:45:51,596 --> 00:45:53,346
and CLRegion is just
this abstract class


1031
00:45:53,396 --> 00:45:54,816
that the APIs support
for monitoring.


1032
00:45:55,546 --> 00:45:57,936
And we're-- so we've
deprecated CLRegion.


1033
00:45:58,156 --> 00:46:01,416
If you're targeting 6 and
7 and you need to be able


1034
00:46:01,416 --> 00:46:03,206
to be backwards compatible
go ahead


1035
00:46:03,206 --> 00:46:04,426
and keep creating CLRegions.


1036
00:46:04,426 --> 00:46:08,936
They'll still work like
CircularRegions did on iOS 6


1037
00:46:09,196 --> 00:46:10,336
and they'll be backwards
compatible.


1038
00:46:11,076 --> 00:46:12,996
But if you're just targeting 7


1039
00:46:13,056 --> 00:46:15,316
and you're leveraging the beacon
APIs obviously you need beacon


1040
00:46:15,316 --> 00:46:17,806
and CircularRegions as
your preferred target.


1041
00:46:18,676 --> 00:46:23,556
So, in summary please be aware
of the multitasking changes


1042
00:46:23,846 --> 00:46:26,396
with a little bit of--
a little simple check


1043
00:46:26,556 --> 00:46:30,956
to your application, your
UI application instance.


1044
00:46:31,246 --> 00:46:32,186
You can figure out whether


1045
00:46:32,186 --> 00:46:34,426
or not these are exchangeable
behavior for your application


1046
00:46:34,946 --> 00:46:38,166
and you could tune their
experience to make sure


1047
00:46:38,166 --> 00:46:40,746
that they're aware of what
limitations they've placed


1048
00:46:40,746 --> 00:46:42,656
on you inside of
the settings pane.


1049
00:46:43,566 --> 00:46:46,386
Similarly if you have a fitness
application, please go ahead


1050
00:46:46,386 --> 00:46:47,556
and defer location updates.


1051
00:46:47,876 --> 00:46:49,776
Honestly it's about an
hour's worth of work


1052
00:46:49,816 --> 00:46:52,426
to make your application
defer updates available


1053
00:46:52,486 --> 00:46:54,796
or support deferred
location updates


1054
00:46:55,186 --> 00:47:00,196
and 40 percent battery savings
is kind of the upper bound


1055
00:47:00,196 --> 00:47:01,746
of what you can achieve
if you use this.


1056
00:47:01,746 --> 00:47:03,586
So, it would be really
great to just take


1057
00:47:03,746 --> 00:47:04,906
that little bit of
effort to do it.


1058
00:47:05,456 --> 00:47:08,026
And lastly iBeacons
are brand new.


1059
00:47:08,026 --> 00:47:11,016
We've just scratched the
surface on sort of the things


1060
00:47:11,016 --> 00:47:12,166
that you could even
achieve with them.


1061
00:47:12,496 --> 00:47:14,396
And I'm sure that there's
going to be many more use cases


1062
00:47:14,396 --> 00:47:15,446
that you're going
to surprise us with.


1063
00:47:15,446 --> 00:47:17,736
So, please go out
and experiment.


1064
00:47:19,516 --> 00:47:24,746
[ Applause ]


1065
00:47:25,246 --> 00:47:25,496
>> Thanks.


1066
00:47:26,476 --> 00:47:29,636
So, if you need more information
Paul Marcos is our Evangelist


1067
00:47:29,636 --> 00:47:31,386
for our team, pmarcos@apple.com.


1068
00:47:31,446 --> 00:47:34,036
If he can't answer a question
for some reason he can get


1069
00:47:34,036 --> 00:47:35,746
in touch with one
of us and he can--


1070
00:47:35,926 --> 00:47:38,446
he's a great frontline resource.


1071
00:47:38,976 --> 00:47:41,846
Documentation is always
available online and, of course,


1072
00:47:41,846 --> 00:47:43,266
you can go to the
Apple Developer Forums.


1073
00:47:44,286 --> 00:47:47,606
What's New in Multitasking,
already happened on Tuesday.


1074
00:47:47,606 --> 00:47:51,446
This talks about the high level
system multitasking changes


1075
00:47:51,876 --> 00:47:54,156
and it would be a really good
idea to review that session


1076
00:47:54,156 --> 00:47:54,886
if you haven't already,


1077
00:47:55,156 --> 00:47:56,436
especially with regards
to location.


1078
00:47:56,436 --> 00:47:57,406
And if you're going


1079
00:47:57,406 --> 00:47:59,276
to be leveraging the
advertisement feature


1080
00:47:59,276 --> 00:48:02,576
of iBeacons then go ahead and
check the Air Locate project


1081
00:48:02,576 --> 00:48:05,666
and also review the
core Bluetooth session.


1082
00:48:06,836 --> 00:48:08,836
MapKit was this morning
and there's a bit more


1083
00:48:08,836 --> 00:48:11,776
on it this afternoon and
the app store guys are going


1084
00:48:11,776 --> 00:48:13,626
to be talking about using
region monitoring inside


1085
00:48:13,626 --> 00:48:15,336
of the app store app tomorrow.


1086
00:48:15,336 --> 00:48:16,676
So, that might be a
good idea to check out.


1087
00:48:17,026 --> 00:48:18,356
So, again thank you for
coming and thank you


1088
00:48:18,356 --> 00:48:19,606
for making fantastic
applications.


1089
00:48:20,516 --> 00:48:30,060
[ Applause ]

