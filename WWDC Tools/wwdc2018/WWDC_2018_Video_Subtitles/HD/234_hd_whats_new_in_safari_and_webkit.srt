1
00:00:07,516 --> 00:00:15,500
[ Music ]


2
00:00:21,516 --> 00:00:24,546
[ Applause ]


3
00:00:25,046 --> 00:00:27,986
>> Good afternoon, everyone.


4
00:00:29,536 --> 00:00:30,756
Good af-- alright.


5
00:00:31,116 --> 00:00:32,896
I hope you've been enjoying WWDC


6
00:00:32,936 --> 00:00:33,356
so far.


7
00:00:33,356 --> 00:00:34,636
I know it's been an exciting


8
00:00:34,636 --> 00:00:36,336
week filled with announcements,


9
00:00:36,336 --> 00:00:38,136
features, updates, developer


10
00:00:38,136 --> 00:00:38,496
tools.


11
00:00:39,196 --> 00:00:41,706
My name is Shloka Kini, and I


12
00:00:41,706 --> 00:00:43,256
work in developer publications,


13
00:00:43,256 --> 00:00:46,066
which means-- to borrow a phrase


14
00:00:46,066 --> 00:00:48,246
from Cardi B., I don't just code


15
00:00:48,246 --> 00:00:48,976
now, I write docs too.


16
00:00:49,516 --> 00:00:51,886
[ Laughter ]


17
00:00:52,386 --> 00:00:53,896
Specifically, the docs that'll


18
00:00:53,896 --> 00:00:55,606
help you to write amazing


19
00:00:55,606 --> 00:00:56,286
applications.


20
00:00:57,476 --> 00:00:58,956
Today, I'm privileged to call


21
00:00:58,956 --> 00:01:00,606
out some great features in


22
00:01:00,606 --> 00:01:01,596
Safari and WebKit.


23
00:01:01,756 --> 00:01:03,486
So, if you develop websites, and


24
00:01:03,486 --> 00:01:05,385
want to make use of the latest


25
00:01:05,385 --> 00:01:06,926
web technologies, and the latest


26
00:01:06,926 --> 00:01:08,836
versions of Safari, this talk is


27
00:01:08,836 --> 00:01:09,336
for you.


28
00:01:09,816 --> 00:01:10,706
And, if you're a native app


29
00:01:10,866 --> 00:01:12,426
developer that uses web views,


30
00:01:12,496 --> 00:01:14,876
or extensions developers, this


31
00:01:14,876 --> 00:01:15,856
talk is for you, too.


32
00:01:16,376 --> 00:01:17,486
And, even if you're not in any


33
00:01:17,486 --> 00:01:18,476
of these categories, you should


34
00:01:18,476 --> 00:01:20,136
still stick around, because the


35
00:01:20,136 --> 00:01:21,726
latest version of Safari has


36
00:01:21,726 --> 00:01:23,036
some great features that will


37
00:01:23,036 --> 00:01:23,906
improve your browsing


38
00:01:23,906 --> 00:01:24,466
experience.


39
00:01:25,226 --> 00:01:28,076
Now, there've been a lot-- a


40
00:01:28,076 --> 00:01:29,936
lot-- of new improvements since


41
00:01:29,936 --> 00:01:31,256
we last had a What's New talk.


42
00:01:31,256 --> 00:01:32,626
But, today I'm going to


43
00:01:32,626 --> 00:01:34,046
highlight a few that can really


44
00:01:34,046 --> 00:01:35,936
help you get secure, performant


45
00:01:36,956 --> 00:01:38,156
apps, and use the latest web


46
00:01:38,156 --> 00:01:39,236
technologies for a rich


47
00:01:39,236 --> 00:01:39,986
experience.


48
00:01:40,266 --> 00:01:41,316
And, many of them you can get


49
00:01:41,316 --> 00:01:41,766
for free.


50
00:01:42,476 --> 00:01:43,986
So, let's kick things off with


51
00:01:43,986 --> 00:01:44,616
security.


52
00:01:44,926 --> 00:01:45,956
And, a few announcements.


53
00:01:49,166 --> 00:01:49,496
WKWebView.


54
00:01:49,496 --> 00:01:50,156
Now, I know what you're


55
00:01:50,156 --> 00:01:50,856
thinking.


56
00:01:50,956 --> 00:01:53,096
WKWebView has been around since


57
00:01:53,096 --> 00:01:57,956
2014, so it's not technically


58
00:01:57,956 --> 00:01:58,086
new.


59
00:01:58,786 --> 00:02:00,316
However, it's worth mentioning


60
00:02:00,316 --> 00:02:02,026
again because we are now


61
00:02:02,026 --> 00:02:03,636
officially deprecating


62
00:02:03,636 --> 00:02:03,976
UIWebView.


63
00:02:04,516 --> 00:02:08,996
[ Applause ]


64
00:02:09,496 --> 00:02:10,806
So, if you're starting a new


65
00:02:10,806 --> 00:02:12,486
app, or a new project, and would


66
00:02:12,486 --> 00:02:13,996
like to display web content


67
00:02:13,996 --> 00:02:16,346
that's not easily put into a


68
00:02:16,346 --> 00:02:18,426
native view, use the WKWebView.


69
00:02:18,916 --> 00:02:20,196
And, even if you've used


70
00:02:20,196 --> 00:02:21,806
UIWebView in the past, switching


71
00:02:21,806 --> 00:02:22,936
might be easy for you.


72
00:02:23,516 --> 00:02:24,856
It can definitely save you time


73
00:02:24,856 --> 00:02:25,916
in development, if you're


74
00:02:25,916 --> 00:02:27,596
developing apps for both macOS


75
00:02:27,596 --> 00:02:30,426
and iOS, because WKWebView works


76
00:02:30,586 --> 00:02:31,796
on both platforms.


77
00:02:32,216 --> 00:02:34,396
Unlike UIWebView for iOS, and


78
00:02:34,476 --> 00:02:35,336
WebView for macOS.


79
00:02:35,336 --> 00:02:37,396
So, you can share a lot of code


80
00:02:37,396 --> 00:02:38,526
between the two versions.


81
00:02:39,926 --> 00:02:41,946
WKWebView also runs in a


82
00:02:41,946 --> 00:02:43,436
completely separate process from


83
00:02:43,436 --> 00:02:44,646
the rest of your app.


84
00:02:44,766 --> 00:02:46,936
So, unlike UIWebView, even if


85
00:02:46,936 --> 00:02:48,746
your web process is compromised,


86
00:02:49,086 --> 00:02:50,816
it won't compromise your app.


87
00:02:50,816 --> 00:02:52,386
If your web view has complex


88
00:02:52,456 --> 00:02:54,576
content, you can't accidentally


89
00:02:54,576 --> 00:02:55,766
cause your app to stall.


90
00:02:56,296 --> 00:02:58,626
And, even if WKWebView crashes,


91
00:02:59,726 --> 00:03:01,326
it's confined to the web view,


92
00:03:01,796 --> 00:03:03,596
not the app.


93
00:03:03,596 --> 00:03:05,816
WKWebView can provide security


94
00:03:05,816 --> 00:03:07,536
benefits while keeping your apps


95
00:03:07,586 --> 00:03:08,936
performant and reliable.


96
00:03:09,466 --> 00:03:10,696
So, whether it's hard or easy,


97
00:03:10,696 --> 00:03:12,546
the benefits you get using


98
00:03:12,546 --> 00:03:14,766
WKWebView are worth the switch.


99
00:03:15,316 --> 00:03:18,556
The next announcement involves


100
00:03:18,756 --> 00:03:20,946
extensions, but extending


101
00:03:20,946 --> 00:03:24,476
Safari-- I mean, it's evolved a


102
00:03:24,576 --> 00:03:25,716
lot over the years.


103
00:03:26,446 --> 00:03:27,736
So, let me start with a quick


104
00:03:27,736 --> 00:03:30,806
recap of the history of Safari


105
00:03:30,806 --> 00:03:31,336
extensions.


106
00:03:32,116 --> 00:03:34,066
Now, in 2010, before we had a


107
00:03:34,246 --> 00:03:35,496
platform concept of app


108
00:03:35,646 --> 00:03:38,116
extensibility, we had legacy


109
00:03:38,246 --> 00:03:39,486
Safari extensions.


110
00:03:40,106 --> 00:03:42,096
Now, these were the Safari EXTZ


111
00:03:42,096 --> 00:03:43,876
files you could build in Safari


112
00:03:43,876 --> 00:03:44,816
Extensions Builder.


113
00:03:45,266 --> 00:03:46,216
They could be distributed


114
00:03:46,216 --> 00:03:47,466
through the Safari Extensions


115
00:03:47,466 --> 00:03:49,116
Gallery, or in some unusual


116
00:03:49,116 --> 00:03:51,036
cases, by developers directly.


117
00:03:51,986 --> 00:03:53,476
These legacy extensions were


118
00:03:53,476 --> 00:03:55,216
incredibly powerful, because


119
00:03:55,256 --> 00:03:56,666
they had access to all your


120
00:03:56,666 --> 00:03:59,056
browsing data, which made them


121
00:03:59,056 --> 00:04:00,896
popular, especially for fraud


122
00:04:00,896 --> 00:04:01,406
and malware.


123
00:04:02,236 --> 00:04:03,556
We needed to create a safeguard,


124
00:04:03,556 --> 00:04:04,876
so that's why we didn't just


125
00:04:04,876 --> 00:04:06,546
leave it at these Legacy Safari


126
00:04:06,546 --> 00:04:07,136
Extensions.


127
00:04:07,136 --> 00:04:09,046
So, the next milestone in our


128
00:04:09,046 --> 00:04:12,036
story came in 2014, when we


129
00:04:12,036 --> 00:04:13,976
introduced app extensibility for


130
00:04:13,976 --> 00:04:15,536
macOS and iOS.


131
00:04:15,756 --> 00:04:18,875
App extensions, though, are a


132
00:04:18,875 --> 00:04:22,106
way to extend apps, not Safari.


133
00:04:22,336 --> 00:04:24,126
However, this move greatly


134
00:04:24,126 --> 00:04:25,436
changed how we thought about


135
00:04:25,436 --> 00:04:26,996
extensions in Apple platforms.


136
00:04:27,486 --> 00:04:29,096
Here, you could clearly extend


137
00:04:29,096 --> 00:04:30,306
the system while users are


138
00:04:30,346 --> 00:04:32,356
interacting with other apps.


139
00:04:32,356 --> 00:04:33,616
And, like apps, they could be


140
00:04:33,616 --> 00:04:34,496
built in Xcode.


141
00:04:35,236 --> 00:04:36,196
Because of this better


142
00:04:36,196 --> 00:04:37,936
extensions model, we wanted to


143
00:04:37,936 --> 00:04:39,226
apply some of these concepts


144
00:04:39,516 --> 00:04:41,656
back to those legacy Safari


145
00:04:41,656 --> 00:04:43,836
extensions, and at the time, the


146
00:04:43,836 --> 00:04:45,116
most popular ones were


147
00:04:45,176 --> 00:04:45,986
adblockers.


148
00:04:46,596 --> 00:04:48,506
So, we introduced content


149
00:04:48,506 --> 00:04:50,306
blockers in 2015.


150
00:04:51,046 --> 00:04:52,506
Content blockers were a type of


151
00:04:52,506 --> 00:04:54,446
app extension built in Xcode,


152
00:04:54,556 --> 00:04:56,236
that worked on both macOS and


153
00:04:56,236 --> 00:04:56,466
iOS.


154
00:04:57,106 --> 00:04:58,386
They have a special architecture


155
00:04:58,386 --> 00:04:59,086
that makes them fast.


156
00:04:59,786 --> 00:05:01,646
So, any content blocker is


157
00:05:01,646 --> 00:05:03,176
faster at blocking than any


158
00:05:03,176 --> 00:05:04,606
legacy Safari extension.


159
00:05:05,376 --> 00:05:06,456
They don't have the power to


160
00:05:06,556 --> 00:05:08,236
slow down browsing, and they're


161
00:05:08,286 --> 00:05:09,906
private, because the extensions


162
00:05:09,906 --> 00:05:11,666
never see what web pages your


163
00:05:11,666 --> 00:05:12,386
users visit.


164
00:05:13,296 --> 00:05:14,876
And, by this point, the app


165
00:05:14,876 --> 00:05:16,516
extension model offered so many


166
00:05:16,516 --> 00:05:17,976
performance benefits we thought,


167
00:05:18,316 --> 00:05:19,536
maybe we can bring all these


168
00:05:19,536 --> 00:05:20,996
concepts back to the legacy


169
00:05:20,996 --> 00:05:22,686
Safari extensions, so we can get


170
00:05:22,686 --> 00:05:23,946
the best of both worlds.


171
00:05:24,896 --> 00:05:26,416
An extension that extends


172
00:05:26,416 --> 00:05:28,956
Safari's functionality, but also


173
00:05:28,956 --> 00:05:30,866
extends your app to talk to


174
00:05:30,866 --> 00:05:31,276
Safari.


175
00:05:31,276 --> 00:05:34,666
So, in 2016, the modern Safari


176
00:05:34,666 --> 00:05:36,076
app extensions for macOS were


177
00:05:36,076 --> 00:05:37,016
introduced.


178
00:05:37,186 --> 00:05:39,066
A way to extend Safari that


179
00:05:39,066 --> 00:05:40,296
could be built in Xcode.


180
00:05:40,726 --> 00:05:42,236
And, unlike previous extensions,


181
00:05:42,456 --> 00:05:43,366
you get them through the App


182
00:05:43,606 --> 00:05:44,896
Store, which means they can be


183
00:05:44,896 --> 00:05:46,396
free, or you can charge for


184
00:05:46,396 --> 00:05:46,646
them.


185
00:05:46,816 --> 00:05:48,406
Either way, you don't have to do


186
00:05:48,406 --> 00:05:49,076
your own billing.


187
00:05:50,446 --> 00:05:52,226
So, compared to those legacy


188
00:05:52,226 --> 00:05:54,486
extensions in 2010, content


189
00:05:54,486 --> 00:05:55,666
blockers and Safari app


190
00:05:55,666 --> 00:05:57,146
extensions have great benefits.


191
00:05:57,556 --> 00:05:58,806
So, the best thing for you to


192
00:05:58,806 --> 00:06:00,116
do, is if you have a legacy


193
00:06:00,116 --> 00:06:02,356
Safari extension, switch over to


194
00:06:02,356 --> 00:06:03,736
a Safari app extension.


195
00:06:03,806 --> 00:06:05,086
And, if it happens to be an ad


196
00:06:05,086 --> 00:06:07,086
blocker, use content blockers.


197
00:06:07,866 --> 00:06:08,996
And now that we've done all this


198
00:06:08,996 --> 00:06:11,136
work, what can we do about the


199
00:06:11,136 --> 00:06:13,396
use of legacy Safari extensions


200
00:06:13,396 --> 00:06:14,266
for fraud?


201
00:06:14,936 --> 00:06:17,566
Starting with Safari 12, we're


202
00:06:17,566 --> 00:06:19,556
officially blocking support for


203
00:06:19,556 --> 00:06:21,376
legacy extensions distributed


204
00:06:21,376 --> 00:06:23,196
outside of the Safari Extensions


205
00:06:23,196 --> 00:06:23,666
Gallery.


206
00:06:24,636 --> 00:06:26,126
Legacy extensions will still


207
00:06:26,126 --> 00:06:28,896
work in Safari 12 as long as


208
00:06:28,956 --> 00:06:29,796
they're in the Gallery.


209
00:06:31,066 --> 00:06:32,316
The only exception are those


210
00:06:32,316 --> 00:06:33,986
extensions using the deprecated


211
00:06:34,036 --> 00:06:36,016
Can Load API, which we turn off


212
00:06:36,016 --> 00:06:36,666
by default.


213
00:06:37,436 --> 00:06:38,566
We'll continue to accept


214
00:06:38,786 --> 00:06:40,466
submissions to the Gallery until


215
00:06:40,466 --> 00:06:41,706
the end of 2018.


216
00:06:42,426 --> 00:06:44,106
However, we will be coming up


217
00:06:44,136 --> 00:06:45,386
with more updates in the


218
00:06:45,386 --> 00:06:46,406
following year, and will


219
00:06:46,406 --> 00:06:48,386
eventually transition entirely


220
00:06:48,716 --> 00:06:50,166
to Safari app extensions.


221
00:06:50,526 --> 00:06:52,066
So, the best thing for you to do


222
00:06:52,246 --> 00:06:53,166
is learn how to develop


223
00:06:53,166 --> 00:06:54,626
extensions in these two models.


224
00:06:54,936 --> 00:06:56,106
And, to learn how to do that,


225
00:06:56,376 --> 00:06:58,576
check out the docs, courtesy of


226
00:06:58,576 --> 00:06:59,586
yours truly and Developer


227
00:06:59,586 --> 00:06:59,976
Publications.


228
00:07:00,516 --> 00:07:07,076
[ Applause ]


229
00:07:07,576 --> 00:07:09,076
Now that we've covered the two


230
00:07:09,076 --> 00:07:11,316
biggest announcements for native


231
00:07:11,316 --> 00:07:12,866
developers using WebViews, and


232
00:07:12,866 --> 00:07:14,376
extensions developers, the


233
00:07:14,376 --> 00:07:15,656
remainder of these features are


234
00:07:15,716 --> 00:07:17,336
primarily going to be about web


235
00:07:17,336 --> 00:07:17,906
development.


236
00:07:18,346 --> 00:07:20,016
So, let's start with subresource


237
00:07:20,136 --> 00:07:20,756
integrity.


238
00:07:21,626 --> 00:07:23,286
Now, as a developer, you may


239
00:07:23,356 --> 00:07:25,396
serve your content over an HTTPS


240
00:07:25,396 --> 00:07:26,596
connection to your user.


241
00:07:26,596 --> 00:07:28,546
And, that resulting content may


242
00:07:28,676 --> 00:07:31,056
also include content distributed


243
00:07:31,056 --> 00:07:33,356
over a third-party server, like


244
00:07:33,356 --> 00:07:34,696
a content delivery network.


245
00:07:35,576 --> 00:07:36,876
Now, both connections may be


246
00:07:36,876 --> 00:07:39,316
secure, both may use HTTPS,


247
00:07:39,806 --> 00:07:40,906
which means you maintain the


248
00:07:41,126 --> 00:07:43,156
confidentiality, authentication,


249
00:07:43,156 --> 00:07:44,616
and integrity of the data


250
00:07:44,616 --> 00:07:45,216
transferred.


251
00:07:45,826 --> 00:07:48,326
But, what happens if that third


252
00:07:48,326 --> 00:07:50,686
party itself is compromised?


253
00:07:51,066 --> 00:07:51,726
It could happen.


254
00:07:52,296 --> 00:07:54,526
And, in this case, while HTTPS


255
00:07:54,526 --> 00:07:56,256
secures the connection, it


256
00:07:56,256 --> 00:07:57,446
doesn't secure against a


257
00:07:57,446 --> 00:07:58,816
compromised server.


258
00:07:59,436 --> 00:08:01,356
It can modify the scripts, and


259
00:08:01,356 --> 00:08:03,086
styles you serve to users if


260
00:08:03,086 --> 00:08:04,296
that third-party server is


261
00:08:04,296 --> 00:08:05,026
compromised.


262
00:08:06,156 --> 00:08:08,076
Subresource integrity ensures


263
00:08:08,076 --> 00:08:09,516
that you don't serve compromised


264
00:08:09,516 --> 00:08:10,936
scripts to your users.


265
00:08:10,936 --> 00:08:12,076
So, how does it work?


266
00:08:12,396 --> 00:08:13,566
Well, with hashing.


267
00:08:14,256 --> 00:08:15,626
First, you add the integrity


268
00:08:15,626 --> 00:08:17,196
property for a script or link


269
00:08:17,196 --> 00:08:18,306
element in your markup.


270
00:08:18,826 --> 00:08:20,316
The value for this property is a


271
00:08:20,476 --> 00:08:21,786
hash that you create using a


272
00:08:21,786 --> 00:08:22,986
secure hash algorithm.


273
00:08:23,306 --> 00:08:24,996
When a user fetches the files,


274
00:08:25,286 --> 00:08:26,886
then another hash is calculated.


275
00:08:27,116 --> 00:08:28,456
The two are compared, and if


276
00:08:28,456 --> 00:08:30,096
they don't match, your script


277
00:08:30,096 --> 00:08:31,106
will fail to execute.


278
00:08:31,846 --> 00:08:33,826
This process ensures that


279
00:08:33,826 --> 00:08:35,535
scripts won't execute if they're


280
00:08:35,535 --> 00:08:36,076
compromised.


281
00:08:36,456 --> 00:08:38,616
Unless they match what you


282
00:08:38,616 --> 00:08:41,056
intended, your scripts will not


283
00:08:41,056 --> 00:08:41,476
execute.


284
00:08:42,376 --> 00:08:43,726
And, to make sure you don't lose


285
00:08:43,756 --> 00:08:45,306
functionality, you can also


286
00:08:45,306 --> 00:08:47,316
provide a fallback to reload a


287
00:08:47,316 --> 00:08:49,026
resource from your server, in


288
00:08:49,026 --> 00:08:50,676
case the third-party script


289
00:08:50,936 --> 00:08:51,896
fails to execute.


290
00:08:52,446 --> 00:08:55,516
Now, keeping compromised


291
00:08:55,516 --> 00:08:57,636
resources from executing keeps


292
00:08:57,816 --> 00:08:58,706
users secure.


293
00:08:59,086 --> 00:09:00,336
And, intelligent tracking


294
00:09:00,336 --> 00:09:01,816
prevention can keep the browsing


295
00:09:01,816 --> 00:09:02,786
experience private.


296
00:09:03,296 --> 00:09:04,376
Now, I'm sure you heard about


297
00:09:04,376 --> 00:09:05,826
intelligent tracking prevention


298
00:09:05,946 --> 00:09:06,626
in the Keynote.


299
00:09:06,676 --> 00:09:08,386
It's a Safari feature that


300
00:09:08,386 --> 00:09:10,326
reduces cross-site tracking by


301
00:09:10,326 --> 00:09:12,126
limiting cookies and website


302
00:09:12,126 --> 00:09:13,416
data for domains with tracking


303
00:09:13,416 --> 00:09:13,836
abilities.


304
00:09:14,416 --> 00:09:15,636
And, in previous versions,


305
00:09:15,906 --> 00:09:17,316
cookies were kept according to


306
00:09:17,366 --> 00:09:17,966
two rules.


307
00:09:18,396 --> 00:09:19,996
One, cookies could be used in


308
00:09:19,996 --> 00:09:22,276
third-party context for 24 hours


309
00:09:22,586 --> 00:09:24,306
after user interaction in a


310
00:09:24,306 --> 00:09:25,446
first-party context.


311
00:09:25,916 --> 00:09:28,166
And two, for 30 days of Safari


312
00:09:28,166 --> 00:09:30,336
use, including that initial 24


313
00:09:30,336 --> 00:09:31,806
hours, those cookies would be


314
00:09:31,836 --> 00:09:33,856
kept in isolated storage before


315
00:09:33,856 --> 00:09:34,556
being purged.


316
00:09:34,966 --> 00:09:37,336
But, now we're tightening the


317
00:09:37,336 --> 00:09:37,936
belt a little.


318
00:09:38,806 --> 00:09:40,856
And, we're removing the 24-hour


319
00:09:40,856 --> 00:09:42,516
general cookie access window for


320
00:09:42,516 --> 00:09:43,536
domains with cross-site


321
00:09:43,536 --> 00:09:44,036
tracking.


322
00:09:45,316 --> 00:09:47,806
But, by default, all cookies are


323
00:09:47,806 --> 00:09:49,786
kept in isolated storage, and as


324
00:09:49,946 --> 00:09:51,596
developers, I know authenticated


325
00:09:51,596 --> 00:09:53,786
embeds are already important to


326
00:09:54,006 --> 00:09:55,546
many of your workflows and


327
00:09:55,546 --> 00:09:57,036
interactions with web content.


328
00:09:57,686 --> 00:09:58,666
So, how do you allow


329
00:09:59,036 --> 00:09:59,976
authenticated embeds?


330
00:10:01,656 --> 00:10:04,156
Using the Storage Access API.


331
00:10:04,916 --> 00:10:08,056
With the Storage Access API,


332
00:10:08,056 --> 00:10:10,116
every time a domain with


333
00:10:10,206 --> 00:10:11,446
cross-site tracking would like


334
00:10:11,496 --> 00:10:13,006
to access cookie in a


335
00:10:13,006 --> 00:10:14,826
third-party context, you'll need


336
00:10:14,826 --> 00:10:16,866
to request storage access.


337
00:10:17,436 --> 00:10:19,016
If the user has not granted


338
00:10:19,016 --> 00:10:20,766
access previously, a prompt


339
00:10:20,766 --> 00:10:22,616
appears, asking the user whether


340
00:10:22,616 --> 00:10:25,256
to permit cookie access or not


341
00:10:25,686 --> 00:10:26,596
under this website.


342
00:10:27,486 --> 00:10:29,036
By enabling users to provide


343
00:10:29,106 --> 00:10:31,026
explicit consent for cookie


344
00:10:31,026 --> 00:10:33,306
access, we're empowering them to


345
00:10:33,366 --> 00:10:35,096
take control of their cookies,


346
00:10:35,136 --> 00:10:36,406
and what websites can track,


347
00:10:36,886 --> 00:10:38,026
keeping their browsing


348
00:10:38,026 --> 00:10:41,046
experience more private if they


349
00:10:41,046 --> 00:10:41,356
choose.


350
00:10:42,136 --> 00:10:45,386
Now, next, we'll move on to


351
00:10:45,386 --> 00:10:47,166
authentication with automatic


352
00:10:47,246 --> 00:10:48,106
strong passwords.


353
00:10:48,106 --> 00:10:49,366
Now, I'm sure you saw this in


354
00:10:49,366 --> 00:10:50,556
the State of the Union and


355
00:10:50,586 --> 00:10:51,636
session earlier this week.


356
00:10:51,906 --> 00:10:53,436
Automatic strong passwords is a


357
00:10:53,436 --> 00:10:55,296
great way to guarantee that


358
00:10:55,296 --> 00:10:56,836
users will always select and


359
00:10:56,836 --> 00:10:58,526
save a password that's strong


360
00:10:58,756 --> 00:10:59,896
when signing up for a new


361
00:10:59,896 --> 00:11:00,356
account.


362
00:11:00,996 --> 00:11:02,066
And, this is good for everyone.


363
00:11:02,066 --> 00:11:03,926
I mean, I like to think of


364
00:11:03,926 --> 00:11:05,416
myself as someone who chooses


365
00:11:05,416 --> 00:11:06,866
strong passwords, but give it a


366
00:11:06,866 --> 00:11:08,716
little bit of time, and I'll


367
00:11:08,716 --> 00:11:09,956
realize that password wasn't as


368
00:11:09,956 --> 00:11:10,746
strong as I thought.


369
00:11:11,256 --> 00:11:12,376
And, I probably used it in a


370
00:11:12,376 --> 00:11:13,066
couple places.


371
00:11:14,276 --> 00:11:15,666
For most developers, you won't


372
00:11:15,666 --> 00:11:16,886
need to do anything to get this


373
00:11:16,886 --> 00:11:18,436
feature, because heuristics will


374
00:11:18,436 --> 00:11:20,156
determine if you're on a sign up


375
00:11:20,156 --> 00:11:21,056
or login page.


376
00:11:21,526 --> 00:11:23,186
But, to guarantee this works,


377
00:11:23,566 --> 00:11:26,376
regardless of login flow, add


378
00:11:26,376 --> 00:11:28,086
the AutoComplete attribute to


379
00:11:28,086 --> 00:11:29,446
the appropriate input fields.


380
00:11:30,226 --> 00:11:32,516
Now, the strong passwords we


381
00:11:32,516 --> 00:11:34,466
choose are by default 20


382
00:11:34,466 --> 00:11:35,926
characters in length, including


383
00:11:36,276 --> 00:11:38,086
upper case, lower case letters,


384
00:11:38,566 --> 00:11:39,426
digits and hyphens.


385
00:11:40,306 --> 00:11:41,436
Now, while this was designed to


386
00:11:41,436 --> 00:11:42,466
be compatible with most


387
00:11:42,466 --> 00:11:43,846
services, we acknowledge that


388
00:11:44,196 --> 00:11:45,986
sometimes your passwords need to


389
00:11:45,986 --> 00:11:47,916
have specific requirements to be


390
00:11:47,916 --> 00:11:49,116
compatible with the back-end


391
00:11:49,116 --> 00:11:49,566
system.


392
00:11:50,136 --> 00:11:51,516
For this reason, there is a


393
00:11:51,586 --> 00:11:53,486
passwordRules attribute that you


394
00:11:53,486 --> 00:11:55,236
can add to your text elements to


395
00:11:55,236 --> 00:11:56,686
specify those requirements.


396
00:11:57,176 --> 00:11:58,396
And, on the developers site,


397
00:11:58,486 --> 00:11:59,816
there's a password validation


398
00:11:59,816 --> 00:12:01,156
tool, to help you test


399
00:12:01,246 --> 00:12:02,766
compatibility with automatic


400
00:12:02,766 --> 00:12:04,686
strong passwords, and develop


401
00:12:04,856 --> 00:12:06,646
your own password rules.


402
00:12:08,396 --> 00:12:09,776
Another feature mentioned in the


403
00:12:09,776 --> 00:12:11,736
State of the Union, security


404
00:12:11,786 --> 00:12:13,316
code AutoFill.


405
00:12:13,346 --> 00:12:14,656
Another feature most of you will


406
00:12:14,656 --> 00:12:15,336
get for free.


407
00:12:15,766 --> 00:12:17,136
This is one I'm going to be


408
00:12:17,136 --> 00:12:18,936
making good use for, because I


409
00:12:18,936 --> 00:12:20,256
find it tedious to switch


410
00:12:20,286 --> 00:12:22,536
between my app and the website,


411
00:12:22,536 --> 00:12:24,076
and the messages, and then find


412
00:12:24,076 --> 00:12:25,636
out those numbers for the code,


413
00:12:25,636 --> 00:12:27,016
and input it and try to remember


414
00:12:27,016 --> 00:12:27,126
it.


415
00:12:27,456 --> 00:12:29,096
So, having Safari figure out


416
00:12:29,466 --> 00:12:30,916
when I have to input a security


417
00:12:30,916 --> 00:12:32,246
code, and then suggesting it in


418
00:12:32,246 --> 00:12:33,106
the quick type bar?


419
00:12:33,376 --> 00:12:35,556
Makes this much more convenient.


420
00:12:36,346 --> 00:12:38,206
And, just like before, you get


421
00:12:38,256 --> 00:12:40,206
this feature for free, because


422
00:12:40,356 --> 00:12:41,666
it uses heuristics, but to


423
00:12:41,666 --> 00:12:43,246
ensure that these heuristics


424
00:12:43,246 --> 00:12:44,786
work, and you get that quick


425
00:12:44,846 --> 00:12:47,596
type suggestion, mark your input


426
00:12:47,596 --> 00:12:49,236
fields with the one-time code


427
00:12:49,236 --> 00:12:50,896
value in the AutoComplete


428
00:12:51,026 --> 00:12:51,596
attribute.


429
00:12:52,266 --> 00:12:53,806
For more details, I encourage


430
00:12:53,806 --> 00:12:55,426
you to check out the Automatic


431
00:12:55,476 --> 00:12:56,936
Strong Passwords and Security


432
00:12:56,936 --> 00:12:58,956
Code AutoFill session online.


433
00:12:59,526 --> 00:13:01,946
So, that's security.


434
00:13:02,666 --> 00:13:04,556
Switch over to WKWebView, more


435
00:13:04,556 --> 00:13:05,966
over to content blockers in


436
00:13:05,966 --> 00:13:07,346
Safari app extensions,


437
00:13:07,716 --> 00:13:09,476
subresource integrity is a


438
00:13:09,476 --> 00:13:10,886
failsafe to ensure you don't


439
00:13:10,886 --> 00:13:12,406
serve compromised scripts to


440
00:13:12,406 --> 00:13:14,566
users, and intelligent tracking


441
00:13:14,566 --> 00:13:16,146
prevention improves privacy with


442
00:13:16,146 --> 00:13:17,406
the Storage Access API.


443
00:13:17,506 --> 00:13:19,126
And, with automatic strong


444
00:13:19,126 --> 00:13:20,536
passwords, and security code


445
00:13:20,536 --> 00:13:22,266
AutoFill, you get features that


446
00:13:22,266 --> 00:13:24,446
are secure and convenient for


447
00:13:24,446 --> 00:13:25,056
your users.


448
00:13:25,186 --> 00:13:30,176
Whew. You all still with me so


449
00:13:30,516 --> 00:13:30,806
far?


450
00:13:30,806 --> 00:13:32,596
OK, moving right along, let's


451
00:13:32,666 --> 00:13:34,146
talk about performance features,


452
00:13:34,176 --> 00:13:36,086
starting with font collections.


453
00:13:36,826 --> 00:13:38,346
Now, for those of you who may


454
00:13:38,346 --> 00:13:39,376
not have caught it at the top of


455
00:13:39,376 --> 00:13:41,256
this talk, my name is Shloka


456
00:13:41,716 --> 00:13:41,856
Kini.


457
00:13:41,856 --> 00:13:44,376
And that ain't no Anglo-Saxon


458
00:13:44,846 --> 00:13:44,976
name.


459
00:13:46,276 --> 00:13:48,026
And so, here's my first and last


460
00:13:48,026 --> 00:13:49,856
names, using the Devanagari


461
00:13:49,856 --> 00:13:51,486
script in the Hindi language.


462
00:13:51,926 --> 00:13:53,616
Multiple fonts, different


463
00:13:53,616 --> 00:13:55,366
weights and styles, but the same


464
00:13:55,366 --> 00:13:55,976
character set.


465
00:13:56,776 --> 00:13:58,476
New this year, we support font


466
00:13:58,476 --> 00:14:00,566
collections, WOFF 2 and TrueType


467
00:14:00,566 --> 00:14:01,046
collections.


468
00:14:01,656 --> 00:14:03,496
Bundling related fonts together


469
00:14:03,496 --> 00:14:05,076
inside a single collection file


470
00:14:05,316 --> 00:14:07,076
can eliminate duplicated tables


471
00:14:07,076 --> 00:14:08,796
for character maps.


472
00:14:08,796 --> 00:14:10,746
For example, one of our built-in


473
00:14:10,746 --> 00:14:13,626
fonts, PingFang has an 84%


474
00:14:13,626 --> 00:14:15,286
reduction of file size from


475
00:14:15,286 --> 00:14:16,046
using a collection.


476
00:14:16,846 --> 00:14:17,826
Font collections can


477
00:14:17,826 --> 00:14:19,736
substantially reduce the size of


478
00:14:19,736 --> 00:14:21,136
your font files, because the


479
00:14:21,136 --> 00:14:23,296
fonts share a table for the same


480
00:14:23,296 --> 00:14:23,956
character set.


481
00:14:24,536 --> 00:14:27,226
Now, this next feature,


482
00:14:27,226 --> 00:14:29,776
font-display, requires no change


483
00:14:29,956 --> 00:14:30,826
for most developers.


484
00:14:31,126 --> 00:14:32,826
Essentially if you have web


485
00:14:32,826 --> 00:14:34,746
content that uses custom fonts,


486
00:14:35,146 --> 00:14:36,576
if they don't display for your


487
00:14:36,576 --> 00:14:38,496
user for whatever reason, by


488
00:14:38,496 --> 00:14:40,116
default we leave a blank


489
00:14:40,276 --> 00:14:42,076
placeholder for the text for up


490
00:14:42,156 --> 00:14:44,386
to three seconds, before your


491
00:14:44,386 --> 00:14:46,206
font displays, to maintain the


492
00:14:46,206 --> 00:14:47,866
position of all the content on


493
00:14:47,866 --> 00:14:48,376
the screen.


494
00:14:48,826 --> 00:14:51,166
But, if this default behavior


495
00:14:51,166 --> 00:14:52,686
isn't quite right for you, and


496
00:14:52,686 --> 00:14:54,006
you want to have more control


497
00:14:54,006 --> 00:14:55,616
over what happens instead of


498
00:14:55,616 --> 00:14:57,446
those three seconds, you can use


499
00:14:57,446 --> 00:14:59,136
the font-display descriptor.


500
00:14:59,806 --> 00:15:01,066
Using different values, you can


501
00:15:01,066 --> 00:15:02,396
specify another font as a


502
00:15:02,396 --> 00:15:04,286
fallback, or check if the


503
00:15:04,286 --> 00:15:06,386
browser has that font in the


504
00:15:06,386 --> 00:15:06,916
cache.


505
00:15:09,316 --> 00:15:11,116
Now, one cool trick you can use


506
00:15:11,116 --> 00:15:12,446
to improve the performance of


507
00:15:12,446 --> 00:15:15,366
animated images is using video.


508
00:15:15,366 --> 00:15:18,386
Now, I love the colored dust


509
00:15:18,386 --> 00:15:20,726
explosion background on my Mac.


510
00:15:20,726 --> 00:15:23,136
It's really great, but it's


511
00:15:23,216 --> 00:15:23,716
static.


512
00:15:25,366 --> 00:15:27,156
I mean I want this thing to bam,


513
00:15:27,156 --> 00:15:27,746
pop!


514
00:15:28,526 --> 00:15:29,796
I mean, I want motion.


515
00:15:30,116 --> 00:15:31,066
I want a GIF.


516
00:15:31,876 --> 00:15:33,306
But, animated GIFs take much


517
00:15:33,306 --> 00:15:34,806
longer to load, they use more


518
00:15:34,806 --> 00:15:36,626
battery power, and give lower


519
00:15:36,666 --> 00:15:37,956
performance than a video file


520
00:15:37,956 --> 00:15:41,976
showing the exact same thing.


521
00:15:42,176 --> 00:15:44,936
Now, in Safari, MP4 video files


522
00:15:44,936 --> 00:15:46,316
are supported in image elements,


523
00:15:46,316 --> 00:15:48,176
making use of Apple's built-in


524
00:15:48,176 --> 00:15:49,606
support for hardware video


525
00:15:49,606 --> 00:15:50,176
decoding.


526
00:15:50,906 --> 00:15:52,666
My content loads faster, uses


527
00:15:52,666 --> 00:15:53,856
less battery, gets better


528
00:15:53,856 --> 00:15:56,056
performance, but I can also use


529
00:15:56,056 --> 00:15:58,886
MP4s in the CSS background image


530
00:15:58,946 --> 00:15:59,386
property.


531
00:16:00,556 --> 00:16:01,446
Now, if you adopt this


532
00:16:01,446 --> 00:16:03,706
technique, in the simplest way,


533
00:16:04,516 --> 00:16:05,876
you could come up with a version


534
00:16:05,876 --> 00:16:07,556
that isn't compatible with older


535
00:16:07,556 --> 00:16:08,086
browsers.


536
00:16:08,726 --> 00:16:10,086
Older browsers don't support


537
00:16:10,086 --> 00:16:11,286
MP4s and image elements.


538
00:16:11,646 --> 00:16:13,916
Luckily, using existing


539
00:16:13,916 --> 00:16:16,216
technology, you can specify a


540
00:16:16,376 --> 00:16:18,536
fallback image to display if the


541
00:16:18,536 --> 00:16:19,466
MP4 doesn't work.


542
00:16:19,986 --> 00:16:22,636
Now, listen up, because now


543
00:16:22,716 --> 00:16:25,876
we're going to move on to event


544
00:16:26,276 --> 00:16:26,926
listeners.


545
00:16:27,306 --> 00:16:29,606
Yes? No. Another feature that


546
00:16:29,606 --> 00:16:31,476
has some great defaults, and


547
00:16:31,476 --> 00:16:33,016
some customizability in special


548
00:16:33,016 --> 00:16:33,466
cases.


549
00:16:34,556 --> 00:16:36,286
When any user tries to navigate


550
00:16:36,286 --> 00:16:37,536
a web page with a touch screen,


551
00:16:37,696 --> 00:16:39,096
they're going to need to scroll.


552
00:16:39,096 --> 00:16:40,976
And, for every touch to scroll,


553
00:16:41,206 --> 00:16:42,896
a touch event listener can fire,


554
00:16:43,596 --> 00:16:45,506
which can interrupt scrolling


555
00:16:45,506 --> 00:16:47,726
and cause it to jump a little.


556
00:16:48,576 --> 00:16:49,476
Take a look at these two


557
00:16:49,476 --> 00:16:49,966
examples.


558
00:16:50,726 --> 00:16:52,896
Now, the one on the left is


559
00:16:52,946 --> 00:16:55,546
interrupted much more than the


560
00:16:55,546 --> 00:16:56,156
one on the right.


561
00:16:56,536 --> 00:16:57,606
I mean, it's barely moving.


562
00:16:58,536 --> 00:17:00,966
So, what's the one on the right


563
00:17:01,306 --> 00:17:02,016
doing right?


564
00:17:02,816 --> 00:17:03,946
It's using passive event


565
00:17:03,946 --> 00:17:04,366
listeners.


566
00:17:04,965 --> 00:17:06,675
By default, we enable passive


567
00:17:06,675 --> 00:17:08,366
event listeners on the document,


568
00:17:08,366 --> 00:17:10,306
window, and body elements, so


569
00:17:10,306 --> 00:17:11,675
any touch events on these


570
00:17:11,675 --> 00:17:13,356
elements indicate to the browser


571
00:17:13,826 --> 00:17:15,806
to continue scrolling, and not


572
00:17:15,866 --> 00:17:17,836
be interrupted waiting for the


573
00:17:17,836 --> 00:17:19,146
event listeners to finish.


574
00:17:19,806 --> 00:17:21,445
If there are additional elements


575
00:17:21,445 --> 00:17:22,726
with event listeners that you


576
00:17:22,726 --> 00:17:24,546
want to make passive, you can


577
00:17:24,546 --> 00:17:25,935
set the passive property to


578
00:17:25,935 --> 00:17:27,526
"true" for those event


579
00:17:27,526 --> 00:17:27,935
listeners.


580
00:17:28,816 --> 00:17:30,816
Essentially, without preventing


581
00:17:30,886 --> 00:17:32,576
default event handling, this


582
00:17:32,576 --> 00:17:34,546
flag tells the browser not to


583
00:17:34,546 --> 00:17:36,306
wait for event listeners to


584
00:17:36,306 --> 00:17:37,936
finish, and lets your users


585
00:17:38,026 --> 00:17:40,226
continue scrolling smoothly.


586
00:17:40,696 --> 00:17:44,356
Next, we move on to asynchronous


587
00:17:44,356 --> 00:17:46,546
calls, with async image


588
00:17:46,546 --> 00:17:47,056
decoding.


589
00:17:47,786 --> 00:17:49,236
Now, typically, images are


590
00:17:49,236 --> 00:17:50,456
decoded synchronously.


591
00:17:50,656 --> 00:17:51,976
So, the main thread is blocked.


592
00:17:52,506 --> 00:17:54,656
All the images are decoded, and


593
00:17:54,656 --> 00:17:55,346
then they display.


594
00:17:56,136 --> 00:17:57,796
By blocking the main thread,


595
00:17:57,796 --> 00:17:59,486
this blocks user interactions.


596
00:17:59,906 --> 00:18:01,356
But, with asynchronous decoding,


597
00:18:01,356 --> 00:18:02,546
the operations happen in


598
00:18:02,546 --> 00:18:04,476
parallel, and on a separate


599
00:18:04,536 --> 00:18:05,626
thread, which means the


600
00:18:05,666 --> 00:18:07,726
interactions aren't blocked.


601
00:18:08,236 --> 00:18:09,856
And now, new this year, async


602
00:18:09,946 --> 00:18:12,276
image decoding happens by


603
00:18:12,276 --> 00:18:14,226
default on the first page load,


604
00:18:15,136 --> 00:18:16,906
which can cover most cases for


605
00:18:16,906 --> 00:18:17,476
web content.


606
00:18:17,796 --> 00:18:20,286
However we know that some of you


607
00:18:20,286 --> 00:18:21,576
may have special cases.


608
00:18:21,656 --> 00:18:24,426
Say, you have a tiled map on


609
00:18:24,426 --> 00:18:26,216
your webpage that loads after


610
00:18:26,216 --> 00:18:27,356
the initial page load.


611
00:18:27,586 --> 00:18:28,986
And, if it has lots of images,


612
00:18:28,986 --> 00:18:31,706
some of the tiles may be delayed


613
00:18:32,096 --> 00:18:32,796
in their display.


614
00:18:33,356 --> 00:18:35,716
Or, maybe you have a carousel of


615
00:18:35,716 --> 00:18:37,016
images in your app that you want


616
00:18:37,016 --> 00:18:38,516
to fade into each other, but


617
00:18:38,516 --> 00:18:40,086
when you try to advance the


618
00:18:40,186 --> 00:18:41,726
slides, if the images are


619
00:18:41,726 --> 00:18:43,296
decoded synchronously, they


620
00:18:43,296 --> 00:18:44,886
might not be ready for display.


621
00:18:45,436 --> 00:18:49,336
And, they abruptly switch.


622
00:18:50,816 --> 00:18:53,216
But, on the right, asynchronous


623
00:18:53,216 --> 00:18:54,776
decoding gives you a smoother


624
00:18:54,886 --> 00:18:55,246
fade.


625
00:18:55,296 --> 00:18:58,656
Now, if you want to fall into


626
00:18:58,776 --> 00:18:59,916
one of these special dynamic


627
00:18:59,916 --> 00:19:01,176
cases, you have two options.


628
00:19:01,456 --> 00:19:03,436
One, you can add the decoding


629
00:19:03,486 --> 00:19:05,176
async attribute to your images


630
00:19:05,176 --> 00:19:06,136
elements in markup.


631
00:19:06,756 --> 00:19:09,536
Or, you can use the JavaScript


632
00:19:09,536 --> 00:19:11,996
API's HTMLImageElements.decode


633
00:19:11,996 --> 00:19:13,856
method, which returns a promise,


634
00:19:14,106 --> 00:19:15,726
making sure that you know when


635
00:19:15,726 --> 00:19:17,756
an image can be added to the dom


636
00:19:17,836 --> 00:19:19,546
without causing a decoding delay


637
00:19:19,866 --> 00:19:20,796
on the next frame.


638
00:19:21,306 --> 00:19:24,216
And, continuing with


639
00:19:24,216 --> 00:19:26,336
asynchronous calls is support


640
00:19:26,336 --> 00:19:27,416
for the Beacon API.


641
00:19:28,266 --> 00:19:29,566
We know, as developers, you want


642
00:19:29,566 --> 00:19:31,466
to send data on an unload event.


643
00:19:31,956 --> 00:19:33,936
Perhaps to track outgoing links.


644
00:19:34,416 --> 00:19:35,896
And normally, asynchronous


645
00:19:35,896 --> 00:19:37,766
requests on unload are ignored,


646
00:19:37,906 --> 00:19:38,776
so you're stuck using a


647
00:19:38,776 --> 00:19:40,266
synchronous request, which can


648
00:19:40,266 --> 00:19:41,816
stall the next page load.


649
00:19:42,756 --> 00:19:44,206
However, we now support the


650
00:19:44,206 --> 00:19:45,066
Beacon API.


651
00:19:45,706 --> 00:19:47,086
So, as long as Safari is


652
00:19:47,086 --> 00:19:48,816
running, you can send your data


653
00:19:48,816 --> 00:19:50,866
to the server and forget about


654
00:19:50,866 --> 00:19:52,666
it, with the guarantee that it


655
00:19:52,666 --> 00:19:53,466
will be delivered.


656
00:19:53,966 --> 00:19:57,036
But, you've heard me talk


657
00:19:57,036 --> 00:19:57,446
enough.


658
00:19:57,926 --> 00:19:59,096
I mean, I'm sure you want to see


659
00:19:59,096 --> 00:20:00,036
some of these security and


660
00:20:00,036 --> 00:20:01,316
performance features in action.


661
00:20:01,316 --> 00:20:03,056
So, I'd like to call Jason onto


662
00:20:03,056 --> 00:20:04,826
the stage to show you how they


663
00:20:04,826 --> 00:20:05,216
all work.


664
00:20:05,436 --> 00:20:05,826
Jason?


665
00:20:06,516 --> 00:20:10,876
[ Applause ]


666
00:20:11,376 --> 00:20:12,176
>> Hi, everyone.


667
00:20:12,316 --> 00:20:13,986
My name is Jason Sandmeyer, and


668
00:20:13,986 --> 00:20:15,626
I'm a developer on Apple.com.


669
00:20:16,436 --> 00:20:18,046
In my free time, I enjoy doing


670
00:20:18,046 --> 00:20:20,286
arts and crafts, like building


671
00:20:20,286 --> 00:20:22,156
birdhouses, and I recently


672
00:20:22,156 --> 00:20:23,636
started this blog to share some


673
00:20:23,636 --> 00:20:25,116
of my projects and inspire


674
00:20:25,116 --> 00:20:25,526
others.


675
00:20:25,816 --> 00:20:27,676
I spent a lot of time picking


676
00:20:27,676 --> 00:20:29,146
just the right fonts, the right


677
00:20:29,146 --> 00:20:29,746
colors.


678
00:20:30,296 --> 00:20:31,246
I'm pretty proud of it.


679
00:20:31,996 --> 00:20:33,236
But, you know what, I don't just


680
00:20:33,266 --> 00:20:34,696
pride myself on good design, I


681
00:20:34,696 --> 00:20:36,576
also pride myself on providing a


682
00:20:36,576 --> 00:20:38,326
good, secure, and performant


683
00:20:38,326 --> 00:20:39,526
experience for my users.


684
00:20:40,056 --> 00:20:41,506
So, I'm really excited about all


685
00:20:41,506 --> 00:20:42,756
these new performance and


686
00:20:42,756 --> 00:20:44,186
security features in WebKit and


687
00:20:44,186 --> 00:20:46,066
Safari, and I really want to


688
00:20:46,066 --> 00:20:47,646
take advantage of them on my own


689
00:20:48,346 --> 00:20:48,476
site.


690
00:20:48,646 --> 00:20:49,816
I'd love to show you how easy


691
00:20:49,816 --> 00:20:50,316
that can be.


692
00:20:52,056 --> 00:20:53,546
So, I have my site loaded on my


693
00:20:53,546 --> 00:20:54,416
MacBook Pro here.


694
00:20:56,716 --> 00:20:58,366
And-- whoa.


695
00:20:58,366 --> 00:20:58,586
OK.


696
00:20:58,586 --> 00:21:01,006
>> Dude! Jason, what did you do?


697
00:21:01,566 --> 00:21:03,716
>> Yes, this isn't the elegant


698
00:21:03,716 --> 00:21:05,226
blog I was just bragging about,


699
00:21:05,226 --> 00:21:06,096
is it?


700
00:21:07,506 --> 00:21:08,526
Let's see-- that's the right


701
00:21:08,526 --> 00:21:08,986
URL.


702
00:21:10,156 --> 00:21:11,806
You know, I think I know what


703
00:21:11,806 --> 00:21:12,406
happened here.


704
00:21:12,996 --> 00:21:15,586
When I first started this site,


705
00:21:15,586 --> 00:21:19,436
my friends, they warned me that


706
00:21:19,436 --> 00:21:20,866
the lifestyle blogging industry


707
00:21:20,866 --> 00:21:23,516
can be pretty cutthroat.


708
00:21:24,856 --> 00:21:27,176
Clearly, this is sabotage.


709
00:21:27,906 --> 00:21:29,436
Someone's replaced my style


710
00:21:29,436 --> 00:21:30,826
sheet on my content delivery


711
00:21:30,826 --> 00:21:31,266
network.


712
00:21:32,016 --> 00:21:33,736
But, luckily, I have a backup,


713
00:21:33,796 --> 00:21:34,396
fortunately.


714
00:21:34,986 --> 00:21:36,536
And, we can use subresource


715
00:21:36,536 --> 00:21:37,936
integrity to add a little bit of


716
00:21:37,936 --> 00:21:39,596
an extra layer of security, and


717
00:21:39,596 --> 00:21:40,706
ensure this doesn't happen


718
00:21:40,706 --> 00:21:40,976
again.


719
00:21:46,286 --> 00:21:49,106
So, I'll start by adding the new


720
00:21:49,106 --> 00:21:51,856
integrity attribute to my link


721
00:21:51,856 --> 00:21:52,246
tag.


722
00:21:52,246 --> 00:21:53,896
I should also mention this works


723
00:21:53,896 --> 00:21:55,356
on scripts, but we're going to


724
00:21:55,356 --> 00:21:57,046
make some changes later, so


725
00:21:57,426 --> 00:21:58,756
we'll add that later on.


726
00:21:59,286 --> 00:22:03,516
So, the value of this attribute


727
00:22:03,956 --> 00:22:06,266
is the hashing algorithm that


728
00:22:06,266 --> 00:22:07,406
was used to generate the


729
00:22:07,406 --> 00:22:09,316
checksum for the file that I


730
00:22:09,316 --> 00:22:12,586
expect my users to see.


731
00:22:12,826 --> 00:22:14,196
I've already prepared a hash


732
00:22:14,316 --> 00:22:15,566
with SHA256.


733
00:22:16,896 --> 00:22:20,156
Next, a hyphen, and then a


734
00:22:20,156 --> 00:22:22,336
base64 representation of the


735
00:22:22,336 --> 00:22:22,786
hash.


736
00:22:24,006 --> 00:22:26,296
Now, let's save this, go back to


737
00:22:26,296 --> 00:22:28,256
our page, reload.


738
00:22:29,436 --> 00:22:30,866
And, we'll see there's no


739
00:22:30,866 --> 00:22:31,326
styles.


740
00:22:31,876 --> 00:22:32,916
Because the hash for the


741
00:22:32,916 --> 00:22:34,666
downloaded file doesn't match


742
00:22:34,666 --> 00:22:36,026
the hash in the HTML.


743
00:22:36,606 --> 00:22:38,396
So, Safari has blocked it from


744
00:22:38,396 --> 00:22:38,986
being loaded.


745
00:22:41,916 --> 00:22:43,376
Now, let's connect to my CDN.


746
00:22:43,376 --> 00:22:46,256
And, here's my backup on my


747
00:22:46,256 --> 00:22:46,726
desktop.


748
00:22:47,246 --> 00:22:50,786
Let's drag in my backup to the


749
00:22:50,886 --> 00:22:53,456
CDN, replace the compromised


750
00:22:53,456 --> 00:22:53,876
file.


751
00:22:54,806 --> 00:22:57,036
And now, when we reload, that


752
00:22:57,356 --> 00:22:57,976
looks a lot better.


753
00:22:58,516 --> 00:23:01,936
[ Applause ]


754
00:23:02,436 --> 00:23:05,416
Thanks. So, with subresource


755
00:23:05,416 --> 00:23:06,566
integrity, I'll be more


756
00:23:06,566 --> 00:23:08,146
confident that my visitors will


757
00:23:08,146 --> 00:23:09,926
see the styles and scripts that


758
00:23:09,926 --> 00:23:12,686
I expect them to get.


759
00:23:12,886 --> 00:23:13,926
Now, let's switch gears a little


760
00:23:13,926 --> 00:23:15,006
bit and talk about some


761
00:23:15,006 --> 00:23:16,166
performance improvements we can


762
00:23:16,166 --> 00:23:16,426
make.


763
00:23:16,426 --> 00:23:19,556
I found it insightful to know


764
00:23:19,556 --> 00:23:20,806
which links are being clicked on


765
00:23:20,806 --> 00:23:22,446
my site, and which ones aren't.


766
00:23:22,716 --> 00:23:23,586
It helps me make more informed


767
00:23:23,586 --> 00:23:23,976
design decisions.


768
00:23:29,346 --> 00:23:30,956
So, I have this click handler


769
00:23:30,956 --> 00:23:32,106
that reports which links are


770
00:23:32,106 --> 00:23:33,666
being clicked to a server that I


771
00:23:33,666 --> 00:23:35,176
control that aggregates that


772
00:23:35,176 --> 00:23:35,856
data so I can take a look at it


773
00:23:35,856 --> 00:23:35,976
later.


774
00:23:40,736 --> 00:23:43,106
But, notice this delay when I


775
00:23:43,106 --> 00:23:44,686
click on this Woodworking link


776
00:23:44,846 --> 00:23:45,976
that goes to a page that


777
00:23:45,976 --> 00:23:46,756
showcases other


778
00:23:46,756 --> 00:23:48,616
woodworking-related sites on my


779
00:23:48,616 --> 00:23:49,066
page.


780
00:23:50,086 --> 00:23:51,126
I'm going to click the link now.


781
00:23:52,816 --> 00:23:55,136
Took about a half a second to a


782
00:23:55,136 --> 00:23:59,036
second, and this is happening


783
00:23:59,036 --> 00:24:00,706
because I'm making a synchronous


784
00:24:00,706 --> 00:24:02,416
request in the click handler,


785
00:24:02,666 --> 00:24:04,206
which blocks Safari from


786
00:24:04,206 --> 00:24:05,706
navigating to the next page.


787
00:24:06,446 --> 00:24:08,026
Making a synchronous request


788
00:24:08,026 --> 00:24:09,306
ensures the browser doesn't


789
00:24:09,306 --> 00:24:10,766
cancel the request when


790
00:24:10,766 --> 00:24:12,226
navigating to the next page.


791
00:24:13,636 --> 00:24:14,636
But, this is waiting for my


792
00:24:14,636 --> 00:24:16,066
server to respond, which can


793
00:24:16,066 --> 00:24:16,766
take a while.


794
00:24:16,906 --> 00:24:18,046
And, the thing is, I don't


795
00:24:18,046 --> 00:24:19,256
really care about the response,


796
00:24:19,256 --> 00:24:20,286
I just want to make sure that


797
00:24:20,286 --> 00:24:21,636
that data hits my server.


798
00:24:22,536 --> 00:24:24,406
So, the Beacon API is actually a


799
00:24:24,406 --> 00:24:25,826
perfect replacement for this.


800
00:24:26,376 --> 00:24:29,776
I'm going to start by checking


801
00:24:30,416 --> 00:24:32,266
that the Beacon API is available


802
00:24:32,266 --> 00:24:33,746
in the browser by looking for


803
00:24:33,746 --> 00:24:35,396
the sendBeacon method on the


804
00:24:35,396 --> 00:24:36,386
navigator object.


805
00:24:37,366 --> 00:24:38,656
If it's not available, I'll


806
00:24:38,656 --> 00:24:39,996
continue doing what I was doing


807
00:24:39,996 --> 00:24:40,346
before.


808
00:24:41,526 --> 00:24:43,626
Then, we can just use it.


809
00:24:46,496 --> 00:24:49,106
Passing in the endpoint I want


810
00:24:49,756 --> 00:24:53,666
to hit, along with the data.


811
00:24:53,666 --> 00:24:54,356
Let's save that.


812
00:24:55,196 --> 00:24:57,726
We'll go back, reload to get the


813
00:24:57,726 --> 00:24:58,236
new script.


814
00:24:59,336 --> 00:25:00,676
And now, when I click this link


815
00:25:00,676 --> 00:25:02,256
you'll see it's nearly instant.


816
00:25:02,296 --> 00:25:03,216
I'm going to click the link


817
00:25:03,216 --> 00:25:03,696
right now.


818
00:25:04,486 --> 00:25:05,056
And, there we go.


819
00:25:06,046 --> 00:25:08,746
So, compared to the XML/http


820
00:25:08,746 --> 00:25:10,576
request this is even less code,


821
00:25:10,576 --> 00:25:11,796
and it's just as reliable.


822
00:25:12,126 --> 00:25:13,696
And now, it'll be much faster


823
00:25:13,696 --> 00:25:14,826
for my users to navigate around


824
00:25:14,826 --> 00:25:14,976
my site.


825
00:25:15,516 --> 00:25:17,736
[ Applause ]


826
00:25:18,236 --> 00:25:22,956
Thanks. So, next I want to take


827
00:25:22,956 --> 00:25:24,036
a look at a problem that I've


828
00:25:24,036 --> 00:25:25,446
noticed is more apparent on my


829
00:25:25,446 --> 00:25:25,956
iPad here.


830
00:25:33,136 --> 00:25:34,666
So, I've organized each step for


831
00:25:34,666 --> 00:25:36,016
building this birdhouse as a


832
00:25:36,016 --> 00:25:37,386
slide in this crossfading


833
00:25:37,386 --> 00:25:37,926
carousel.


834
00:25:39,776 --> 00:25:41,596
Tapping the right-facing arrow


835
00:25:41,596 --> 00:25:42,916
advances this to the next slide.


836
00:25:44,356 --> 00:25:45,856
But, you may have noticed that


837
00:25:45,856 --> 00:25:48,066
brief moment of a blank white


838
00:25:48,176 --> 00:25:49,826
space where the image should be.


839
00:25:50,286 --> 00:25:51,446
Let me go through a few more


840
00:25:51,446 --> 00:25:51,846
slides.


841
00:25:56,066 --> 00:25:57,316
Let's take a look at some of the


842
00:25:57,316 --> 00:25:58,636
code for this carousel, and see


843
00:25:58,636 --> 00:25:59,356
what's going on.


844
00:25:59,356 --> 00:26:00,326
I think this can be a lot


845
00:26:00,326 --> 00:26:00,776
smoother.


846
00:26:06,066 --> 00:26:07,796
So, here's my carousel class.


847
00:26:08,516 --> 00:26:10,036
I want to focus on this method


848
00:26:10,036 --> 00:26:11,336
here, setCurrentSlide.


849
00:26:11,896 --> 00:26:13,086
This is the method that's called


850
00:26:13,086 --> 00:26:14,256
when the button is clicked to


851
00:26:14,256 --> 00:26:15,656
transition to the slide at the


852
00:26:15,656 --> 00:26:16,476
given index.


853
00:26:18,816 --> 00:26:20,376
Because each slide isn't


854
00:26:20,376 --> 00:26:21,896
immediately visible on page


855
00:26:21,896 --> 00:26:24,056
load, my carousel only loads the


856
00:26:24,056 --> 00:26:25,826
next slide's image when the user


857
00:26:25,826 --> 00:26:26,826
taps the button to advance to


858
00:26:26,826 --> 00:26:26,976
it.


859
00:26:31,176 --> 00:26:33,036
The problem that we're seeing is


860
00:26:33,086 --> 00:26:35,266
that the transition is happening


861
00:26:35,866 --> 00:26:36,506
immediately.


862
00:26:37,716 --> 00:26:39,026
It's not waiting for the image


863
00:26:39,026 --> 00:26:39,446
to load.


864
00:26:39,956 --> 00:26:41,356
And, after the image has loaded,


865
00:26:41,356 --> 00:26:42,746
it still needs to be decoded


866
00:26:42,746 --> 00:26:43,676
before it's ready to be


867
00:26:43,676 --> 00:26:44,816
displayed on the screen.


868
00:26:45,876 --> 00:26:47,486
So, what I really want to do is


869
00:26:47,486 --> 00:26:49,036
wait until the image has been


870
00:26:49,036 --> 00:26:51,316
loaded and decoded, and I'm sure


871
00:26:51,316 --> 00:26:52,466
that we can show the image.


872
00:26:53,156 --> 00:26:54,996
And, I can use the new decode


873
00:26:54,996 --> 00:26:57,486
method on the HTML image element


874
00:26:58,936 --> 00:27:01,276
to make this a lot better.


875
00:27:02,506 --> 00:27:04,056
So, I have my image-- a


876
00:27:04,056 --> 00:27:04,886
reference to my image element


877
00:27:04,886 --> 00:27:04,976
here.


878
00:27:09,046 --> 00:27:10,406
The decode method will


879
00:27:10,616 --> 00:27:12,326
asynchronously decode the image,


880
00:27:12,566 --> 00:27:14,206
and return a promise that


881
00:27:14,206 --> 00:27:16,316
resolves when the image has been


882
00:27:16,316 --> 00:27:19,646
loaded and decoded.


883
00:27:19,746 --> 00:27:21,716
So, I'll just pass my transition


884
00:27:21,756 --> 00:27:23,236
function in as the callback for


885
00:27:23,236 --> 00:27:23,696
the promise.


886
00:27:24,326 --> 00:27:26,676
Now, let's switch back to the


887
00:27:26,746 --> 00:27:26,946
iPad.


888
00:27:33,256 --> 00:27:35,536
And, we'll refresh to get the


889
00:27:35,536 --> 00:27:36,036
new script.


890
00:27:37,076 --> 00:27:38,236
And now, when I advance, you'll


891
00:27:38,236 --> 00:27:39,386
see this is much smoother.


892
00:27:40,006 --> 00:27:41,566
No flashing.


893
00:27:41,566 --> 00:27:42,296
It's really great.


894
00:27:43,516 --> 00:27:45,626
[ Applause ]


895
00:27:46,126 --> 00:27:46,936
Thank you.


896
00:27:51,126 --> 00:27:54,886
Now, let's switch back to the


897
00:27:55,056 --> 00:27:55,146
Mac.


898
00:27:55,146 --> 00:27:56,616
Now, finally, at the bottom of


899
00:27:56,616 --> 00:27:58,626
my page, I have this animated


900
00:27:58,626 --> 00:28:00,756
GIF of a bird furnishing its new


901
00:28:00,756 --> 00:28:01,196
birdhouse.


902
00:28:01,966 --> 00:28:05,156
This image is-- this video's


903
00:28:05,156 --> 00:28:09,266
pretty large-- well, it's a GIF.


904
00:28:09,406 --> 00:28:10,946
Seven-- it's roughly a little


905
00:28:10,946 --> 00:28:12,236
over 7 megabytes.


906
00:28:12,596 --> 00:28:13,926
And, honestly the quality isn't


907
00:28:13,926 --> 00:28:14,366
that great.


908
00:28:15,116 --> 00:28:15,876
But, I happen to have the


909
00:28:15,876 --> 00:28:18,676
original H264-encoded MP4, and


910
00:28:19,226 --> 00:28:20,846
now I can just use that directly


911
00:28:20,846 --> 00:28:21,626
on my page.


912
00:28:22,066 --> 00:28:24,086
So, let's go back to my HTML,


913
00:28:24,926 --> 00:28:25,986
and find that image.


914
00:28:26,786 --> 00:28:28,556
Here it is.


915
00:28:28,766 --> 00:28:30,056
So, I can just change the


916
00:28:30,056 --> 00:28:31,846
extension to point to the MP4


917
00:28:31,846 --> 00:28:32,236
file.


918
00:28:33,646 --> 00:28:37,486
Reload. And, now I'm using the


919
00:28:37,486 --> 00:28:38,286
actual video.


920
00:28:38,286 --> 00:28:39,916
The quality's a lot better, and


921
00:28:39,916 --> 00:28:41,366
this is only about a megabyte.


922
00:28:41,906 --> 00:28:43,386
Plus, it's a little bit longer


923
00:28:43,476 --> 00:28:44,606
than the animated GIF.


924
00:28:45,076 --> 00:28:49,096
And, as Shloka mentioned, this


925
00:28:49,096 --> 00:28:50,876
can also be used in the source


926
00:28:50,876 --> 00:28:52,766
attribute to provide a fallback


927
00:28:52,766 --> 00:28:53,686
image for browsers that don't


928
00:28:53,686 --> 00:28:53,966
support this.


929
00:29:00,076 --> 00:29:02,086
So, that's just four of the many


930
00:29:02,086 --> 00:29:03,276
new security performance


931
00:29:03,276 --> 00:29:04,836
features in Safari and WebKit.


932
00:29:05,276 --> 00:29:07,626
I hope you'll take advantage of


933
00:29:07,626 --> 00:29:08,766
them on your own site, and I


934
00:29:08,766 --> 00:29:09,906
think your users will thank you


935
00:29:09,906 --> 00:29:10,866
for it.


936
00:29:10,866 --> 00:29:11,936
Now, I'd like to welcome Shloka


937
00:29:11,936 --> 00:29:13,256
back up on the stage to tell you


938
00:29:13,256 --> 00:29:14,506
about even more new and exciting


939
00:29:14,506 --> 00:29:14,666
features.


940
00:29:14,666 --> 00:29:14,976
Thank you.


941
00:29:15,516 --> 00:29:21,500
[ Applause ]


942
00:29:25,186 --> 00:29:26,066
>> Thank you, Jason.


943
00:29:26,656 --> 00:29:30,036
And, I had no idea it was that


944
00:29:30,036 --> 00:29:31,246
brutal in the blogosphere.


945
00:29:33,346 --> 00:29:34,336
You stay safe out there.


946
00:29:37,086 --> 00:29:38,496
And, thank you so much for that


947
00:29:38,496 --> 00:29:39,106
great demo.


948
00:29:39,726 --> 00:29:41,686
To recap performance, using font


949
00:29:41,686 --> 00:29:43,566
collections can reduce font file


950
00:29:43,566 --> 00:29:44,086
sizes.


951
00:29:44,376 --> 00:29:46,276
The font-display property lets


952
00:29:46,276 --> 00:29:47,876
you have more control over what


953
00:29:47,876 --> 00:29:49,356
happens with custom fonts.


954
00:29:50,066 --> 00:29:51,776
Using videos in image elements


955
00:29:51,826 --> 00:29:53,026
can help with performance


956
00:29:53,026 --> 00:29:53,766
instead of GIFs.


957
00:29:54,446 --> 00:29:55,876
Passive event listeners can


958
00:29:55,876 --> 00:29:57,606
improve scrolling, and using


959
00:29:57,606 --> 00:29:59,316
asynchronous calls, both with


960
00:29:59,316 --> 00:30:01,326
the Beacon API, and with image


961
00:30:01,326 --> 00:30:03,166
decoding keeps the main thread


962
00:30:03,346 --> 00:30:03,976
from stalling.


963
00:30:04,496 --> 00:30:07,876
Last, we move onto rich


964
00:30:07,876 --> 00:30:08,486
experience.


965
00:30:08,486 --> 00:30:10,486
Some cool new features that can


966
00:30:10,486 --> 00:30:11,896
really improve your users


967
00:30:11,896 --> 00:30:12,506
experience.


968
00:30:13,146 --> 00:30:15,316
Starting with drag and drop.


969
00:30:15,846 --> 00:30:17,556
Now, first, some general


970
00:30:17,556 --> 00:30:18,816
improvements to drag and drop,


971
00:30:19,126 --> 00:30:21,546
thanks to some API updates, now


972
00:30:21,546 --> 00:30:23,306
you can drag and drop entire


973
00:30:23,306 --> 00:30:25,066
directories of files to upload


974
00:30:25,066 --> 00:30:25,916
them to the server.


975
00:30:26,446 --> 00:30:28,216
No compression or zipping


976
00:30:28,296 --> 00:30:28,856
required.


977
00:30:29,746 --> 00:30:31,156
And, we support reading and


978
00:30:31,156 --> 00:30:33,336
writing MIME types for rich


979
00:30:33,336 --> 00:30:36,476
HTML, plain text, and URLs to


980
00:30:36,476 --> 00:30:37,476
the system pasteboard.


981
00:30:38,646 --> 00:30:40,646
And, specifically for iOS, we've


982
00:30:40,646 --> 00:30:41,916
made some new updates to the


983
00:30:41,916 --> 00:30:43,966
data transfer API, so now you


984
00:30:43,996 --> 00:30:45,996
can customize drag and drop with


985
00:30:45,996 --> 00:30:48,076
the getData and setData methods.


986
00:30:48,246 --> 00:30:50,926
So, for example, if I wanted to


987
00:30:50,926 --> 00:30:53,036
drag groceries into my online


988
00:30:53,036 --> 00:30:54,906
grocery shopping cart, I can


989
00:30:54,906 --> 00:30:56,596
customize the drag and drop


990
00:30:56,636 --> 00:30:57,146
behavior.


991
00:30:57,726 --> 00:30:59,586
So, dragging an image element


992
00:30:59,806 --> 00:31:01,226
will drop the name of that


993
00:31:01,226 --> 00:31:03,506
element and its price into my


994
00:31:03,506 --> 00:31:03,846
cart.


995
00:31:04,676 --> 00:31:05,916
Now, you can specify what


996
00:31:05,916 --> 00:31:07,236
happens with drag and drop


997
00:31:07,266 --> 00:31:08,696
behavior, which lets you


998
00:31:08,696 --> 00:31:10,316
implement richer user


999
00:31:10,446 --> 00:31:11,186
interactions.


1000
00:31:11,766 --> 00:31:14,706
Next, we move into the API


1001
00:31:14,706 --> 00:31:16,146
section of this talk, starting


1002
00:31:16,146 --> 00:31:17,896
with the Payment Request API and


1003
00:31:18,246 --> 00:31:18,936
Apple Pay.


1004
00:31:19,616 --> 00:31:20,916
So, let's talk about Apple Pay.


1005
00:31:21,316 --> 00:31:22,646
Apple Pay's not just a way to


1006
00:31:22,646 --> 00:31:22,926
pay.


1007
00:31:22,926 --> 00:31:24,516
It's a way to rethink electronic


1008
00:31:24,566 --> 00:31:25,666
payments entirely.


1009
00:31:26,046 --> 00:31:28,036
With Apple Pay, vendors won't


1010
00:31:28,036 --> 00:31:29,466
directly receive credit card


1011
00:31:29,466 --> 00:31:31,376
information of your customers,


1012
00:31:31,376 --> 00:31:32,576
which keeps them more secure.


1013
00:31:33,466 --> 00:31:34,676
Now, we know that many of you


1014
00:31:34,676 --> 00:31:36,336
have been requesting a way to


1015
00:31:36,336 --> 00:31:37,616
support Apple Pay using a


1016
00:31:37,686 --> 00:31:38,326
standard API.


1017
00:31:39,096 --> 00:31:40,516
And, I'm pleased to tell you, we


1018
00:31:40,516 --> 00:31:42,246
listened, and with collaborative


1019
00:31:42,246 --> 00:31:44,456
efforts, Apple Pay now works


1020
00:31:44,456 --> 00:31:46,596
with the W3C Payment Request


1021
00:31:46,746 --> 00:31:46,936
API.


1022
00:31:50,516 --> 00:31:53,866
[ Applause ]


1023
00:31:54,366 --> 00:31:56,116
So, while you have the option to


1024
00:31:56,116 --> 00:31:58,906
use this API, remember that to


1025
00:31:58,906 --> 00:32:00,416
get the benefits of Apple Pay


1026
00:32:00,416 --> 00:32:02,036
for you and your customers, you


1027
00:32:02,036 --> 00:32:03,446
will need to make a few changes.


1028
00:32:03,756 --> 00:32:05,806
For example, adding an Apple Pay


1029
00:32:05,806 --> 00:32:07,376
button to your interface, rather


1030
00:32:07,376 --> 00:32:08,836
than adding Apple Pay as an


1031
00:32:08,836 --> 00:32:10,376
extra option in existing


1032
00:32:10,376 --> 00:32:11,016
checkout flow.


1033
00:32:11,826 --> 00:32:13,186
And, at the moment there are a


1034
00:32:13,326 --> 00:32:15,856
few features incorporated in the


1035
00:32:15,856 --> 00:32:18,266
Payment Request API, like


1036
00:32:19,176 --> 00:32:20,706
granular error-handling,


1037
00:32:20,706 --> 00:32:22,356
handling cobranded cards, and


1038
00:32:22,356 --> 00:32:23,136
phonetic names.


1039
00:32:23,226 --> 00:32:25,006
Features that only appear in


1040
00:32:25,116 --> 00:32:25,676
Apple Pay JS.


1041
00:32:25,676 --> 00:32:28,176
So, if you need those specific


1042
00:32:28,346 --> 00:32:30,776
features for Apple Pay, use


1043
00:32:30,776 --> 00:32:32,496
Apple Pay JS.


1044
00:32:33,416 --> 00:32:35,586
The next API we're supporting is


1045
00:32:35,666 --> 00:32:37,166
the Service Worker API.


1046
00:32:39,716 --> 00:32:42,036
And, if your user's network


1047
00:32:42,036 --> 00:32:43,536
connection isn't ideal, maybe--


1048
00:32:43,846 --> 00:32:45,306
I don't know, they have poor


1049
00:32:45,306 --> 00:32:47,016
connectivity, or they're


1050
00:32:47,016 --> 00:32:48,636
completely offline, you want to


1051
00:32:48,636 --> 00:32:49,866
make sure that you handle that


1052
00:32:49,866 --> 00:32:50,956
situation gracefully.


1053
00:32:51,106 --> 00:32:52,326
And Service Workers can do that.


1054
00:32:52,946 --> 00:32:54,576
A Service Worker is registered


1055
00:32:54,576 --> 00:32:56,506
by a unique origin, and it can


1056
00:32:56,506 --> 00:32:58,336
cache offline interactions, and


1057
00:32:58,436 --> 00:33:00,336
intercept requests made by


1058
00:33:00,336 --> 00:33:02,066
scripts associated with that


1059
00:33:02,066 --> 00:33:02,556
origin.


1060
00:33:03,016 --> 00:33:04,866
Now, every page in your domain


1061
00:33:05,096 --> 00:33:06,586
can share the same Service


1062
00:33:06,586 --> 00:33:07,356
Worker instance.


1063
00:33:08,116 --> 00:33:09,556
So, you can have multiple tabs


1064
00:33:09,666 --> 00:33:11,826
open at the same time, and all


1065
00:33:11,826 --> 00:33:12,976
those requests will be


1066
00:33:13,036 --> 00:33:15,386
intercepted by the same script.


1067
00:33:16,436 --> 00:33:17,966
So, you can keep a persistent


1068
00:33:17,966 --> 00:33:19,136
store of resources.


1069
00:33:20,166 --> 00:33:22,136
Service Workers makes your web


1070
00:33:22,416 --> 00:33:25,566
page, whether its a web app, or


1071
00:33:25,566 --> 00:33:27,036
whether you're using SF Safari


1072
00:33:27,036 --> 00:33:29,066
viewController, more resilient


1073
00:33:29,226 --> 00:33:30,656
to variants in network


1074
00:33:30,716 --> 00:33:31,366
connectivity.


1075
00:33:31,876 --> 00:33:35,286
And, the last of the APIs is the


1076
00:33:35,286 --> 00:33:37,146
Fullscreen API for iPad.


1077
00:33:38,526 --> 00:33:39,706
Now, you can customize


1078
00:33:39,796 --> 00:33:40,976
fullscreen controls for the


1079
00:33:40,976 --> 00:33:41,616
iPad.


1080
00:33:41,986 --> 00:33:44,296
Any arbitrary element in Safari.


1081
00:33:44,746 --> 00:33:45,996
And, clicking on that elements


1082
00:33:45,996 --> 00:33:47,546
will bring up a complete


1083
00:33:48,066 --> 00:33:48,976
fullscreen experience.


1084
00:33:51,516 --> 00:33:56,146
[ Applause ]


1085
00:33:56,646 --> 00:33:58,276
Now, for videos we auto-detect


1086
00:33:58,336 --> 00:33:59,866
the content, and a Cancel button


1087
00:33:59,866 --> 00:34:00,286
appears.


1088
00:34:00,526 --> 00:34:02,586
And, after a short delay, if the


1089
00:34:02,586 --> 00:34:04,646
content is playing, the button


1090
00:34:04,646 --> 00:34:05,266
will disappear.


1091
00:34:07,536 --> 00:34:08,976
Now, if you're presenting


1092
00:34:08,976 --> 00:34:10,505
content that ends up being


1093
00:34:10,505 --> 00:34:12,126
blocked by this Cancel button,


1094
00:34:12,356 --> 00:34:14,186
you can use the CSS Environment


1095
00:34:14,186 --> 00:34:16,646
Variable fullscreen-inset-top to


1096
00:34:16,646 --> 00:34:17,045
avoid it.


1097
00:34:18,056 --> 00:34:20,485
You can also have your content


1098
00:34:20,545 --> 00:34:21,985
hide at the same time as the


1099
00:34:21,985 --> 00:34:23,545
button, by using the


1100
00:34:23,666 --> 00:34:25,286
fullscreen-auto-hide-delay


1101
00:34:25,436 --> 00:34:26,416
environment variable.


1102
00:34:26,906 --> 00:34:31,386
Last, a couple of cool callouts,


1103
00:34:31,626 --> 00:34:33,525
starting with AR.


1104
00:34:34,255 --> 00:34:35,755
Oh, you've heard so much about


1105
00:34:35,755 --> 00:34:37,126
AR at this conference so far.


1106
00:34:37,356 --> 00:34:39,335
And now, you can add AR models


1107
00:34:39,335 --> 00:34:40,846
to your UI with image


1108
00:34:40,846 --> 00:34:41,366
thumbnails.


1109
00:34:41,366 --> 00:34:42,866
So, your websites can take


1110
00:34:42,866 --> 00:34:45,036
advantage of the brand-new AR


1111
00:34:45,096 --> 00:34:45,505
Quick Look.


1112
00:34:45,536 --> 00:34:47,246
And, the code's fairly short.


1113
00:34:47,556 --> 00:34:48,806
You start with an anchor tag,


1114
00:34:49,065 --> 00:34:50,876
set the del attribute to "AR"


1115
00:34:51,235 --> 00:34:53,106
and set the HREF link to your


1116
00:34:53,306 --> 00:34:55,065
USDZ file, then you file format


1117
00:34:55,065 --> 00:34:55,886
for AR models.


1118
00:34:56,426 --> 00:34:58,076
You add a single child, either


1119
00:34:58,076 --> 00:34:59,426
an image or a picture element


1120
00:34:59,666 --> 00:35:01,006
containing an image of the


1121
00:35:01,006 --> 00:35:01,376
model.


1122
00:35:01,756 --> 00:35:03,456
So, the resulting image looks


1123
00:35:03,456 --> 00:35:04,076
like this.


1124
00:35:04,816 --> 00:35:06,596
In the top corner of the image,


1125
00:35:06,646 --> 00:35:09,046
a small icon appears, indicating


1126
00:35:09,126 --> 00:35:11,336
an AR model is available if you


1127
00:35:11,336 --> 00:35:12,296
click on the image.


1128
00:35:12,806 --> 00:35:14,706
It's a great way to add more


1129
00:35:14,706 --> 00:35:16,736
depth to the content in your


1130
00:35:16,736 --> 00:35:17,196
websites.


1131
00:35:18,796 --> 00:35:20,516
And, for more details on Quick


1132
00:35:20,516 --> 00:35:21,676
Look, you can check out the


1133
00:35:21,676 --> 00:35:23,886
session online for Integrating


1134
00:35:24,046 --> 00:35:25,776
Apps and Content with AR Quick


1135
00:35:26,476 --> 00:35:26,566
Look.


1136
00:35:27,816 --> 00:35:29,756
And, last, watchOS.


1137
00:35:30,696 --> 00:35:32,506
You can already view websites on


1138
00:35:32,506 --> 00:35:35,746
the MacBook, and the iPad, and


1139
00:35:36,786 --> 00:35:38,686
an even smaller screen with the


1140
00:35:38,686 --> 00:35:40,076
iPhone, a screen that can fit in


1141
00:35:40,076 --> 00:35:40,636
your pocket.


1142
00:35:41,316 --> 00:35:42,956
But, now we're going to downsize


1143
00:35:42,956 --> 00:35:45,866
one more time.


1144
00:35:46,086 --> 00:35:48,076
We've brought you websites on


1145
00:35:48,076 --> 00:35:48,916
watchOS.


1146
00:35:49,516 --> 00:35:53,816
[ Applause ]


1147
00:35:54,316 --> 00:35:55,856
Now, I'm personally really


1148
00:35:55,856 --> 00:35:57,366
excited about this one, because


1149
00:35:57,366 --> 00:35:59,676
I receive recipes from my mom


1150
00:35:59,936 --> 00:36:00,636
all the time.


1151
00:36:00,776 --> 00:36:02,716
I cannot cook, and I see them in


1152
00:36:02,716 --> 00:36:04,736
Messages and emails and now,


1153
00:36:04,736 --> 00:36:06,596
when I get that recipe I can see


1154
00:36:06,596 --> 00:36:08,116
it right there on my wrist while


1155
00:36:08,116 --> 00:36:09,056
I'm following along.


1156
00:36:10,116 --> 00:36:11,256
Now, if you use responsive


1157
00:36:11,256 --> 00:36:12,606
design, great.


1158
00:36:12,856 --> 00:36:14,136
We do all the work for you and


1159
00:36:14,136 --> 00:36:15,126
your websites are going to look


1160
00:36:15,156 --> 00:36:16,426
great on watchOS.


1161
00:36:16,866 --> 00:36:17,716
But, if you would like to


1162
00:36:17,816 --> 00:36:19,326
further optimize your webpages


1163
00:36:19,326 --> 00:36:21,086
for Apple Watch, there's a video


1164
00:36:21,086 --> 00:36:22,926
for Designing Web Content for


1165
00:36:22,926 --> 00:36:24,546
watchOS in the WWDC app.


1166
00:36:24,546 --> 00:36:26,056
Excuse me.


1167
00:36:26,566 --> 00:36:28,306
Designing, yes.


1168
00:36:29,596 --> 00:36:32,476
And now, I bet Jason's birdhouse


1169
00:36:32,526 --> 00:36:35,056
blog could really up the ante


1170
00:36:35,056 --> 00:36:36,316
with some of these great new


1171
00:36:36,316 --> 00:36:37,486
rich experience features.


1172
00:36:37,986 --> 00:36:39,416
So, I'd like to call Jason back


1173
00:36:39,416 --> 00:36:40,716
on the stage to show us how some


1174
00:36:40,716 --> 00:36:41,586
of them can be used.


1175
00:36:41,796 --> 00:36:41,976
Jason?


1176
00:36:42,516 --> 00:36:46,106
[ Applause ]


1177
00:36:46,606 --> 00:36:47,136
>> Thanks again.


1178
00:36:48,046 --> 00:36:49,256
So, I've been thinking about


1179
00:36:49,256 --> 00:36:50,816
ways to make it more fun for my


1180
00:36:50,816 --> 00:36:51,996
readers to get started with


1181
00:36:51,996 --> 00:36:53,066
their birdhouse project.


1182
00:36:53,466 --> 00:36:56,836
Let's switch back to the iPad.


1183
00:37:01,536 --> 00:37:03,246
So, I have this list of all the


1184
00:37:03,246 --> 00:37:04,866
supplies that my readers will


1185
00:37:04,866 --> 00:37:05,866
need to get started.


1186
00:37:06,856 --> 00:37:07,456
And, I thought it'd be


1187
00:37:07,456 --> 00:37:10,906
convenient if I could actually


1188
00:37:10,906 --> 00:37:13,226
provide them with a way to add


1189
00:37:13,226 --> 00:37:14,156
to their shopping list, the


1190
00:37:14,156 --> 00:37:15,406
things they might need, and


1191
00:37:15,406 --> 00:37:16,726
maybe even purchase some of


1192
00:37:16,726 --> 00:37:18,136
these directly from my site.


1193
00:37:18,926 --> 00:37:20,006
Plus, I figured I can make a


1194
00:37:20,006 --> 00:37:22,266
little extra cash in the


1195
00:37:23,136 --> 00:37:23,326
process.


1196
00:37:23,456 --> 00:37:26,456
So, I have the ability to drag


1197
00:37:26,456 --> 00:37:28,256
and drop the supplies from the


1198
00:37:28,256 --> 00:37:29,976
left onto this shopping list.


1199
00:37:43,496 --> 00:37:45,286
And, this works great now on my


1200
00:37:45,286 --> 00:37:45,976
iPad as well.


1201
00:37:46,076 --> 00:37:48,686
So, let's take a look at some of


1202
00:37:48,686 --> 00:37:49,766
the code that's used to achieve


1203
00:37:49,876 --> 00:37:49,976
this.


1204
00:37:57,046 --> 00:37:57,916
Doesn't actually take a lot of


1205
00:37:57,916 --> 00:37:58,856
code to do this.


1206
00:37:59,766 --> 00:38:02,126
So, for each supply, I add a


1207
00:38:02,126 --> 00:38:04,366
dragStart eventListener, which


1208
00:38:04,366 --> 00:38:07,576
stores the element's text, using


1209
00:38:07,576 --> 00:38:09,556
the Data Transfer API.


1210
00:38:10,816 --> 00:38:12,896
Then, in my drop zone, which is


1211
00:38:12,896 --> 00:38:15,186
my shopping list area, I have a


1212
00:38:15,186 --> 00:38:17,066
drop event listener, that


1213
00:38:17,066 --> 00:38:18,886
retrieves the previously stored


1214
00:38:20,156 --> 00:38:22,286
text from the Data Transfer API.


1215
00:38:22,286 --> 00:38:24,046
And, appends that to the


1216
00:38:24,046 --> 00:38:24,976
shopping list element.


1217
00:38:29,166 --> 00:38:30,526
Note that you do also need to


1218
00:38:30,526 --> 00:38:32,146
add a dragOver eventListener,


1219
00:38:32,636 --> 00:38:34,886
and for the area where you want


1220
00:38:34,886 --> 00:38:36,596
the element to be dropped, to


1221
00:38:36,596 --> 00:38:39,226
prevent the default event, and


1222
00:38:39,226 --> 00:38:41,316
indicate that a drop is allowed


1223
00:38:41,316 --> 00:38:42,536
on that element.


1224
00:38:43,086 --> 00:38:45,716
So, with very little code, I was


1225
00:38:45,716 --> 00:38:47,236
able to create this fun shopping


1226
00:38:47,236 --> 00:38:48,986
UI that works great on my Mac,


1227
00:38:49,306 --> 00:38:50,786
and now on my iPad as well.


1228
00:38:51,076 --> 00:38:54,726
So, now that I can place


1229
00:38:54,726 --> 00:38:56,546
supplies in my shopping list, I


1230
00:38:56,546 --> 00:38:57,726
need a way for my users to


1231
00:38:57,726 --> 00:38:58,756
actually make a purchase.


1232
00:38:59,406 --> 00:39:02,726
Let's take a look at how we can


1233
00:39:02,726 --> 00:39:03,886
provide a great Apple Pay


1234
00:39:03,886 --> 00:39:05,256
experience with the Payment


1235
00:39:05,256 --> 00:39:06,796
Request API.


1236
00:39:08,836 --> 00:39:10,156
So, I've already added the


1237
00:39:10,156 --> 00:39:12,726
necessary HTML and CSS to my


1238
00:39:12,726 --> 00:39:14,036
site to display an Apple Pay


1239
00:39:14,036 --> 00:39:15,996
button, but I've hidden it by


1240
00:39:15,996 --> 00:39:16,396
default.


1241
00:39:16,976 --> 00:39:17,976
You should only show the Apple


1242
00:39:17,976 --> 00:39:20,626
Pay button if the user's device


1243
00:39:20,626 --> 00:39:23,126
is capable of using Apple Pay.


1244
00:39:24,176 --> 00:39:27,966
so, let's check for that, using


1245
00:39:27,966 --> 00:39:28,033
the


1246
00:39:28,366 --> 00:39:30,256
ApplePaySession.canMakePayments


1247
00:39:30,256 --> 00:39:30,616
method.


1248
00:39:30,776 --> 00:39:33,556
If Apple Pay is available, we


1249
00:39:33,556 --> 00:39:33,976
can show the button.


1250
00:39:38,326 --> 00:39:41,036
Let's add an eventListener to


1251
00:39:42,816 --> 00:39:43,396
the button.


1252
00:39:43,396 --> 00:39:44,666
Now, inside this function is


1253
00:39:44,666 --> 00:39:45,606
where we'll create a new


1254
00:39:45,606 --> 00:39:47,736
paymentRequest instance to


1255
00:39:47,736 --> 00:39:48,976
initiate the transaction.


1256
00:39:54,436 --> 00:39:55,866
If paymentRequest isn't


1257
00:39:55,866 --> 00:39:57,146
available, we should consider


1258
00:39:57,146 --> 00:39:57,976
using Apple Pay JS instead.


1259
00:40:02,256 --> 00:40:03,616
Here's the constructor for the


1260
00:40:03,616 --> 00:40:04,596
Payment Request API.


1261
00:40:05,456 --> 00:40:07,406
It accepts three arguments.


1262
00:40:07,596 --> 00:40:10,466
We'll start by adding the


1263
00:40:10,466 --> 00:40:13,036
paymentMethod data object.


1264
00:40:16,636 --> 00:40:18,456
This contains the Apple Pay


1265
00:40:18,456 --> 00:40:20,826
paymentMethod identifier, along


1266
00:40:20,826 --> 00:40:22,256
with some options specific to


1267
00:40:22,256 --> 00:40:26,496
Apple Pay.


1268
00:40:26,696 --> 00:40:29,396
Following that, are the payment


1269
00:40:29,396 --> 00:40:29,956
details.


1270
00:40:30,406 --> 00:40:31,976
This is where we specify details


1271
00:40:31,976 --> 00:40:33,716
about the transaction, such as


1272
00:40:33,716 --> 00:40:35,366
my website's name, the total


1273
00:40:35,366 --> 00:40:37,086
amount, and each line time.


1274
00:40:37,636 --> 00:40:40,546
I kept things simple, and


1275
00:40:40,546 --> 00:40:41,556
decided that I'm just going to


1276
00:40:41,556 --> 00:40:43,396
charge $5 for everything on this


1277
00:40:43,396 --> 00:40:43,696
list.


1278
00:40:48,076 --> 00:40:50,346
Finally, the options argument


1279
00:40:50,776 --> 00:40:52,466
specifies what information I


1280
00:40:52,466 --> 00:40:54,006
need to collect from my user to


1281
00:40:54,006 --> 00:40:55,206
complete the transaction.


1282
00:40:55,746 --> 00:40:58,626
Let's switch back to the iPad


1283
00:40:58,626 --> 00:41:01,606
and add some supplies to my


1284
00:41:01,606 --> 00:41:01,916
list.


1285
00:41:11,186 --> 00:41:12,676
So, now that we've passed all


1286
00:41:12,676 --> 00:41:13,936
the information in, we actually


1287
00:41:13,936 --> 00:41:16,006
need to call another method to


1288
00:41:16,006 --> 00:41:17,016
show the sheet.


1289
00:41:17,286 --> 00:41:20,716
And, that's the show method on


1290
00:41:20,716 --> 00:41:21,606
the paymentRequest.


1291
00:41:22,106 --> 00:41:23,086
And, this method returns a


1292
00:41:23,086 --> 00:41:24,766
promise that resolves with a


1293
00:41:24,986 --> 00:41:26,506
payment response when the user


1294
00:41:26,506 --> 00:41:28,036
authorizes the transaction.


1295
00:41:28,036 --> 00:41:29,546
So, [inaudible] with Face ID or


1296
00:41:29,546 --> 00:41:30,206
Touch ID.


1297
00:41:30,906 --> 00:41:32,066
In here, is where you would


1298
00:41:32,066 --> 00:41:33,446
process the transaction.


1299
00:41:33,946 --> 00:41:37,456
And then, finally, you'll call


1300
00:41:37,456 --> 00:41:39,846
complete with a value of success


1301
00:41:39,846 --> 00:41:41,626
or failure, depending on the


1302
00:41:41,626 --> 00:41:42,796
state of the transaction.


1303
00:41:42,796 --> 00:41:45,436
Alright, now let's check that


1304
00:41:45,436 --> 00:41:45,966
out on the iPad.


1305
00:41:50,276 --> 00:41:50,976
There we go.


1306
00:41:51,516 --> 00:41:56,046
[ Applause ]


1307
00:41:56,546 --> 00:41:58,156
So, there are a few additional


1308
00:41:58,156 --> 00:41:59,626
steps you'll need to take, like


1309
00:41:59,626 --> 00:42:01,026
obtaining a payment session from


1310
00:42:01,026 --> 00:42:02,076
the Apple Pay server.


1311
00:42:02,346 --> 00:42:04,396
To learn more about that, please


1312
00:42:04,426 --> 00:42:06,476
see the sessions page on the


1313
00:42:06,476 --> 00:42:08,056
Apple developer website for


1314
00:42:08,056 --> 00:42:09,046
links to those additional


1315
00:42:09,046 --> 00:42:09,626
resources.


1316
00:42:11,076 --> 00:42:14,256
Now, finally, I realize I


1317
00:42:14,256 --> 00:42:15,446
haven't given a glimpse of my


1318
00:42:15,446 --> 00:42:18,716
readers-- what they're actually


1319
00:42:18,946 --> 00:42:19,536
building.


1320
00:42:20,326 --> 00:42:21,956
So, I want to add an image near


1321
00:42:21,956 --> 00:42:23,826
the top of my page of the final


1322
00:42:23,826 --> 00:42:24,296
product.


1323
00:42:25,626 --> 00:42:27,266
But, why stop at a static image?


1324
00:42:27,266 --> 00:42:28,236
Wouldn't it be great if you


1325
00:42:28,236 --> 00:42:29,626
could actually see the birdhouse


1326
00:42:29,986 --> 00:42:31,206
in your own environment, get a


1327
00:42:31,206 --> 00:42:32,206
sense of its size?


1328
00:42:33,106 --> 00:42:34,486
So, with the new AR Quick Look


1329
00:42:34,486 --> 00:42:36,066
feature in iOS 12, we can do


1330
00:42:36,066 --> 00:42:36,736
this with just a few lines of


1331
00:42:36,736 --> 00:42:36,976
code.


1332
00:42:42,296 --> 00:42:43,886
So, we'll go into my HTML.


1333
00:42:43,886 --> 00:42:45,916
And, I think this is a good


1334
00:42:45,916 --> 00:42:46,606
place of it.


1335
00:42:47,586 --> 00:42:49,256
So, all I'm doing here is adding


1336
00:42:49,256 --> 00:42:49,736
an image.


1337
00:42:50,166 --> 00:42:52,536
And, linking to a USDZ file,


1338
00:42:52,866 --> 00:42:53,666
that is the model of my


1339
00:42:53,666 --> 00:42:56,226
birdhouse, with a rel attribute


1340
00:42:56,336 --> 00:42:56,936
of AR.


1341
00:42:57,206 --> 00:43:02,066
Switch back to the iPad, and


1342
00:43:03,076 --> 00:43:04,726
there's our finished product.


1343
00:43:04,766 --> 00:43:06,656
That looks pretty nice, but now


1344
00:43:06,656 --> 00:43:08,166
my users can also tap on this


1345
00:43:08,166 --> 00:43:09,936
Quick Look, AR Quick Look icon


1346
00:43:09,936 --> 00:43:10,926
in the corner here.


1347
00:43:11,296 --> 00:43:15,136
We can see the model, move it


1348
00:43:15,136 --> 00:43:18,726
around, and I can also place it


1349
00:43:18,726 --> 00:43:20,586
in the real world, and actually


1350
00:43:20,586 --> 00:43:22,296
get a sense of what I'm going to


1351
00:43:22,756 --> 00:43:22,886
build.


1352
00:43:23,516 --> 00:43:29,836
[ Applause ]


1353
00:43:30,336 --> 00:43:33,576
So, it's actually really easy to


1354
00:43:34,356 --> 00:43:34,806
do this.


1355
00:43:35,196 --> 00:43:36,416
Please check out that session if


1356
00:43:36,416 --> 00:43:37,226
you have the chance.


1357
00:43:37,386 --> 00:43:38,796
I'd like to bring Shloka back up


1358
00:43:38,796 --> 00:43:39,776
on stage to wrap things up.


1359
00:43:39,776 --> 00:43:39,956
Thank you.


1360
00:43:40,516 --> 00:43:46,916
[ Applause ]


1361
00:43:47,416 --> 00:43:49,076
>> Thank you so much, Jason.


1362
00:43:49,076 --> 00:43:51,716
And, the AR model looks really,


1363
00:43:51,716 --> 00:43:52,416
really cool.


1364
00:43:52,656 --> 00:43:54,536
And, I think its inspired me to


1365
00:43:55,626 --> 00:43:57,896
try to build a birdhouse.


1366
00:43:58,886 --> 00:44:00,186
Not making any promises.


1367
00:44:02,026 --> 00:44:03,686
So, you can add custom drag and


1368
00:44:03,686 --> 00:44:04,466
drop features.


1369
00:44:04,756 --> 00:44:07,096
And custom fullscreen controls


1370
00:44:07,476 --> 00:44:08,226
for the iPad.


1371
00:44:08,896 --> 00:44:10,296
You can use the Payment Request


1372
00:44:10,296 --> 00:44:12,106
API to support Apple Pay, and


1373
00:44:12,106 --> 00:44:13,576
the Service Worker API to


1374
00:44:13,576 --> 00:44:15,226
support offline experiences.


1375
00:44:15,746 --> 00:44:17,656
Or, you can add AR models to


1376
00:44:17,656 --> 00:44:18,826
your content to give it depth.


1377
00:44:19,296 --> 00:44:20,836
And now your websites can be


1378
00:44:20,836 --> 00:44:22,406
viewed in Apple Watch.


1379
00:44:22,956 --> 00:44:25,646
I've called out several sessions


1380
00:44:25,696 --> 00:44:27,146
that you can reference for


1381
00:44:27,146 --> 00:44:28,976
individual features, but if you


1382
00:44:28,976 --> 00:44:30,786
have any questions right after


1383
00:44:30,786 --> 00:44:32,886
this talk, stop by the Safari,


1384
00:44:32,886 --> 00:44:34,466
WebKit, and Password AutoFill


1385
00:44:34,466 --> 00:44:34,746
Lab.


1386
00:44:35,186 --> 00:44:36,476
And, check out the link to this


1387
00:44:36,476 --> 00:44:38,066
session for, of course,


1388
00:44:38,236 --> 00:44:40,656
documentation resources and


1389
00:44:40,656 --> 00:44:41,746
related sessions.


1390
00:44:42,076 --> 00:44:45,576
Now, there are a lot, a lot of


1391
00:44:45,576 --> 00:44:47,336
features when it comes to Web,


1392
00:44:47,756 --> 00:44:48,946
and I hope that this quick


1393
00:44:48,946 --> 00:44:51,246
overview gives you a taste of


1394
00:44:51,246 --> 00:44:53,656
how Apple constantly improves


1395
00:44:53,656 --> 00:44:56,066
Safari and WebKit support.


1396
00:44:56,066 --> 00:44:58,646
So, web developers, native


1397
00:44:58,646 --> 00:45:00,046
developers, and extensions


1398
00:45:00,046 --> 00:45:01,966
developers can always offer the


1399
00:45:01,966 --> 00:45:04,496
best experiences possible for


1400
00:45:04,496 --> 00:45:05,076
their users.


1401
00:45:06,446 --> 00:45:07,356
Thank you for so much for


1402
00:45:07,356 --> 00:45:08,826
enjoying us for this-- for


1403
00:45:08,826 --> 00:45:10,356
joining us for this session.


1404
00:45:10,706 --> 00:45:12,526
Hope you enjoyed it.


1405
00:45:12,526 --> 00:45:13,496
And, enjoy the rest of your


1406
00:45:13,556 --> 00:45:13,976
afternoon at WWDC.


1407
00:45:14,516 --> 00:45:18,500
[ Applause ]

