1
00:00:00,506 --> 00:00:10,416
[Silence]


2
00:00:10,916 --> 00:00:12,066
>> Nick Colet: My name is
Nick Colet [assumed spelling]


3
00:00:12,856 --> 00:00:14,716
[applause] I'm a
[laughter] -- thank you.


4
00:00:17,296 --> 00:00:20,426
I'm a software engineer on the
Core Data team here at Apple,


5
00:00:20,426 --> 00:00:24,086
and I'm excited to take you
through what's new in Core Data


6
00:00:24,586 --> 00:00:26,886
in iOS 7 and Mac OS X 10.9.


7
00:00:28,356 --> 00:00:29,676
We've done a lot of great work


8
00:00:29,676 --> 00:00:31,676
in the Core Data framework
over the last year.


9
00:00:32,686 --> 00:00:35,616
We've made a significant number
of improvements to key areas


10
00:00:35,616 --> 00:00:39,316
to improve performance,
reliability and stability,


11
00:00:39,996 --> 00:00:42,986
but today, we want to take a
moment to focus on just a few


12
00:00:42,986 --> 00:00:45,676
of them, beginning with iCloud.


13
00:00:45,846 --> 00:00:47,596
Now, we've made a
number of improvements


14
00:00:47,596 --> 00:00:48,826
to our iCloud integration.


15
00:00:49,036 --> 00:00:51,276
We've been iterating on
it for almost 12 months


16
00:00:51,276 --> 00:00:53,436
since our WWDC session
last year,


17
00:00:54,016 --> 00:00:57,346
and we took into account a lot
of your feedback that we've seen


18
00:00:57,346 --> 00:01:00,786
on developer forums, in
radars and around the web.


19
00:01:01,606 --> 00:01:04,626
And so, the improvements
that we've made require us


20
00:01:04,626 --> 00:01:07,546
to revisit a few of the topics
that we discussed last year,


21
00:01:08,296 --> 00:01:10,346
beginning with improvements
we've made


22
00:01:10,346 --> 00:01:14,116
to the fallback store, as
well as changes to how you set


23
00:01:14,116 --> 00:01:18,246
up the store asynchronously;
and what happens


24
00:01:18,246 --> 00:01:21,586
with iCloud transition events
like when the account changes.


25
00:01:22,626 --> 00:01:25,076
We're also going to
talk about some new API


26
00:01:25,116 --> 00:01:26,386
that we're introducing today.


27
00:01:26,386 --> 00:01:30,316
And finally, I'll
introduce you to some changes


28
00:01:30,316 --> 00:01:33,166
that have happened across the
organization and developer tools


29
00:01:33,436 --> 00:01:36,846
and frameworks to change how
you live and work on iCloud.


30
00:01:37,556 --> 00:01:38,826
They'll make it easier to use


31
00:01:39,016 --> 00:01:40,806
and provide a lot
more transparency


32
00:01:40,806 --> 00:01:42,336
than was previously
available to you.


33
00:01:44,116 --> 00:01:46,036
Then, Melissa Turner
will come up


34
00:01:46,036 --> 00:01:47,326
and take you through some demos.


35
00:01:48,216 --> 00:01:51,276
And finally, Ben Trumbull will
come up and give you an overview


36
00:01:51,536 --> 00:01:54,216
of several enhancements that
we've made to the SQLite store.


37
00:01:55,406 --> 00:01:58,246
Now, before I dive into
the meat of the discussion,


38
00:01:58,736 --> 00:02:01,826
I'd like to take a moment
to frame it by talking


39
00:02:01,826 --> 00:02:04,476
about our goals and
objectives related to iCloud.


40
00:02:05,146 --> 00:02:09,015
You see, last year after iOS
6 and Mac OS X 10.8 shipped,


41
00:02:09,576 --> 00:02:11,796
we took a look at our
iCloud integration and tried


42
00:02:11,796 --> 00:02:15,116
to identify several key
areas where we could focus


43
00:02:15,116 --> 00:02:17,886
on providing valuable
improvements toward integration,


44
00:02:18,536 --> 00:02:20,486
the first of which is speed.


45
00:02:21,246 --> 00:02:23,576
This year, we've made a
number of improvements


46
00:02:23,576 --> 00:02:26,106
that will change not only how
efficient our integration is


47
00:02:26,106 --> 00:02:29,316
in terms of its memory
usage, its processing usage


48
00:02:29,606 --> 00:02:33,086
and battery consumption,
but also how well it deals


49
00:02:33,086 --> 00:02:34,406
with iCloud under the hood.


50
00:02:34,866 --> 00:02:36,106
We've made a number
of improvements


51
00:02:36,106 --> 00:02:39,056
to downloading files so
that changes appear faster


52
00:02:39,426 --> 00:02:42,326
and peers can communicate
their changes faster than ever.


53
00:02:43,726 --> 00:02:45,966
We also strove to
improve simplicity.


54
00:02:46,696 --> 00:02:48,986
You see, after we
shipped last year,


55
00:02:49,226 --> 00:02:51,906
we felt the developers
still had to write a number


56
00:02:51,936 --> 00:02:55,726
of complex pieces of code
to integrate successfully


57
00:02:55,726 --> 00:02:58,246
with our iCloud integration
and we found


58
00:02:58,246 --> 00:03:01,656
that this hampered your ability
to build effective applications


59
00:03:01,996 --> 00:03:03,706
that worked on top
of our integration.


60
00:03:04,716 --> 00:03:08,036
And finally, we really want
to focus on consistency.


61
00:03:08,606 --> 00:03:11,926
As you may have noticed, we
didn't have a clear paradigm


62
00:03:11,926 --> 00:03:15,156
that you could reuse over
and over again, when working


63
00:03:15,156 --> 00:03:18,336
with our integration, and this
made it exceptionally difficult,


64
00:03:18,536 --> 00:03:20,966
or at least more difficult
than we had originally planned


65
00:03:21,346 --> 00:03:24,296
to handle transition events
like when the account changes.


66
00:03:24,566 --> 00:03:28,376
So with that in mind, let's take
a look at the fallback store.


67
00:03:28,956 --> 00:03:32,756
As you may remember, the
fallback store is a concept


68
00:03:32,756 --> 00:03:36,176
that we introduced last
year at WWDC as a way


69
00:03:36,176 --> 00:03:38,246
of providing a local
persistent store


70
00:03:38,346 --> 00:03:41,146
that your application
could use in the event


71
00:03:41,146 --> 00:03:43,846
that the iCloud store was
unavailable for a certain period


72
00:03:43,846 --> 00:03:47,386
of time, and your application
would simply add the store


73
00:03:47,386 --> 00:03:49,496
to the coordinator
to make it available


74
00:03:49,496 --> 00:03:51,096
to your managed object context


75
00:03:51,276 --> 00:03:54,426
so that your user could
write changes to disk while


76
00:03:54,426 --> 00:03:57,166
in the background we set up
the iCloud store for you.


77
00:03:58,676 --> 00:04:00,986
And this would produce
a pairing, if you will,


78
00:04:01,056 --> 00:04:03,226
of a local persistent store file


79
00:04:03,226 --> 00:04:05,196
and an iCloud persistent
store file


80
00:04:05,196 --> 00:04:07,196
that were tied to
the same account.


81
00:04:08,276 --> 00:04:11,766
Now, this worked out
rather well until,


82
00:04:12,946 --> 00:04:14,556
you ended up with
multiple accounts,


83
00:04:15,536 --> 00:04:17,766
and this is when things
became a bit cumbersome


84
00:04:18,245 --> 00:04:20,136
because developers would
end up spending a lot


85
00:04:20,136 --> 00:04:21,736
of their time writing codes


86
00:04:21,736 --> 00:04:24,896
and manage these different
persistent store files instead


87
00:04:24,896 --> 00:04:26,886
of focusing on building
our applications.


88
00:04:27,596 --> 00:04:30,686
And so for iOS 7
and Mac OS X 10.9,


89
00:04:31,166 --> 00:04:33,096
we've completely
eliminated the need for you


90
00:04:33,096 --> 00:04:34,456
to manage the fallback store.


91
00:04:35,036 --> 00:04:36,866
We've subsumed that
responsibility


92
00:04:36,866 --> 00:04:39,996
into the framework and it
will be entirely managed


93
00:04:39,996 --> 00:04:40,746
by Core Data.


94
00:04:42,096 --> 00:04:45,766
This also means [applause]
[laughter] -- thank you.


95
00:04:46,986 --> 00:04:49,906
This also means that your
application will only ever use


96
00:04:49,996 --> 00:04:51,956
one persistent store
file per account.


97
00:04:52,956 --> 00:04:57,056
Now, we say "per account"
because we still have


98
00:04:57,056 --> 00:04:59,706
to provide a different
actual persistent store file


99
00:04:59,706 --> 00:05:02,186
for each iCloud account
that's in use on a system,


100
00:05:03,136 --> 00:05:04,806
and this requires
that we change a bit


101
00:05:04,806 --> 00:05:06,536
of our guidance from
previous years.


102
00:05:07,286 --> 00:05:09,846
You see, we had previously
advised


103
00:05:10,126 --> 00:05:12,456
that you could keep
the iCloud store inside


104
00:05:12,456 --> 00:05:15,236
of the iCloud container
in a .nosync folder.


105
00:05:15,906 --> 00:05:17,766
This had a rather
convenient advantage


106
00:05:18,006 --> 00:05:20,446
of automatically deleting
the store file for you


107
00:05:20,696 --> 00:05:21,866
when the account went away.


108
00:05:22,796 --> 00:05:25,896
However, because we
now take responsibility


109
00:05:25,896 --> 00:05:27,456
for managing the fallback store


110
00:05:27,816 --> 00:05:30,556
and the fallback store must
exist in local storage,


111
00:05:31,106 --> 00:05:33,916
we now require that you store
the persistent store file


112
00:05:33,916 --> 00:05:37,946
somewhere in local storage,
usually the application sandbox.


113
00:05:38,236 --> 00:05:40,376
However, if your
application isn't sandboxed,


114
00:05:40,646 --> 00:05:42,976
you can keep it wherever you
normally keep your persistent


115
00:05:42,976 --> 00:05:43,726
store files.


116
00:05:47,036 --> 00:05:51,306
Additionally, and because this
is now being taken over entirely


117
00:05:51,306 --> 00:05:55,086
by Core Data, we want to
provide a bit more transparency


118
00:05:55,186 --> 00:05:58,836
than we used to about events
that are happening related


119
00:05:58,836 --> 00:06:01,596
to the fallback store,
and for this reason,


120
00:06:01,596 --> 00:06:03,606
we'll log some new
events to console


121
00:06:03,606 --> 00:06:05,906
so that you can see them
during your development.


122
00:06:06,796 --> 00:06:08,776
You may be familiar with
our Core Data logging.


123
00:06:09,016 --> 00:06:11,896
All of our messages start
with CoreData: Ubiquity:


124
00:06:11,896 --> 00:06:14,646
and when we're using
the fallback store,


125
00:06:14,906 --> 00:06:16,786
you'll see Using
Local Storage 1.


126
00:06:17,606 --> 00:06:20,406
You'll see Using Local
Storage 0 if we've been able


127
00:06:20,406 --> 00:06:22,356
to transition off
the fallback store


128
00:06:22,356 --> 00:06:24,636
and your application is
fully connected to iCloud.


129
00:06:25,576 --> 00:06:27,926
Now, it's important that you
understand the expectations


130
00:06:27,926 --> 00:06:30,236
associated with each
of these log messages.


131
00:06:30,866 --> 00:06:34,616
Using Local Storage 1 means
that changes that you make


132
00:06:34,616 --> 00:06:37,186
to the persistent store
are being persisted vocally


133
00:06:37,986 --> 00:06:40,616
and they won't be available
to other peers over iCloud


134
00:06:40,996 --> 00:06:43,576
until you see Using
Local Storage 0.


135
00:06:44,186 --> 00:06:45,496
This is when you can expect


136
00:06:45,496 --> 00:06:47,496
to start seeing import
notifications.


137
00:06:47,856 --> 00:06:50,676
And when you should expect
seeing your changes uploaded


138
00:06:50,716 --> 00:06:52,516
and made available
to other peers.


139
00:06:53,066 --> 00:06:57,876
So that's the fallback store,
and now I'd like to tell you


140
00:06:57,876 --> 00:06:59,956
about some of the changes
we've made to how you set


141
00:06:59,956 --> 00:07:01,356
up the store asynchronously.


142
00:07:02,736 --> 00:07:05,046
You may be familiar
with this line of code.


143
00:07:05,426 --> 00:07:07,916
It simply adds persistent
store to an instance


144
00:07:07,966 --> 00:07:12,236
of NSPersistentStoreCoordinator;
and when you call it,


145
00:07:12,726 --> 00:07:15,886
you expect to get a store
file back fairly quickly.


146
00:07:16,596 --> 00:07:19,886
In most situations,
especially those without iCloud,


147
00:07:20,716 --> 00:07:23,016
we only have to do a
small amount of network --


148
00:07:23,016 --> 00:07:26,486
of local I/O to bring the
persistent store file up,


149
00:07:26,756 --> 00:07:28,236
so it returns immediately.


150
00:07:29,136 --> 00:07:33,416
However, when it is connected
to iCloud, we sometimes have


151
00:07:33,416 --> 00:07:35,626
to do a significant
amount of network I/O


152
00:07:35,966 --> 00:07:37,556
to make sure the
persistent store is


153
00:07:37,556 --> 00:07:40,146
in a state that's consistent
and ready to be used


154
00:07:40,146 --> 00:07:44,746
by your application, and in iOS
6, we did this synchronously.


155
00:07:45,586 --> 00:07:48,386
That meant that whenever you
called add persistent store


156
00:07:48,446 --> 00:07:50,996
and you didn't have a
persistent store file on disk,


157
00:07:51,506 --> 00:07:53,796
we would go out to the
network and discover the state


158
00:07:53,796 --> 00:07:55,606
of the contents of
the iCloud container.


159
00:07:56,656 --> 00:07:59,536
In iOS 7 and Mac OS X 10.9,


160
00:08:00,066 --> 00:08:03,366
we no longer do this work
synchronously within the call


161
00:08:03,366 --> 00:08:04,546
to addPersistentStore,


162
00:08:05,136 --> 00:08:08,256
so addPersistentStore will
always return immediately.


163
00:08:09,156 --> 00:08:11,456
And this is a huge
benefit to your application


164
00:08:11,686 --> 00:08:13,366
because it eliminates
the need for you


165
00:08:13,366 --> 00:08:15,766
to call addPersistentStore
on a background thread.


166
00:08:15,796 --> 00:08:17,686
Now, have we done this?


167
00:08:18,336 --> 00:08:21,126
Well, we've done it by
using the fallback store.


168
00:08:21,916 --> 00:08:24,966
We will transparently pass
the fallback store back


169
00:08:24,966 --> 00:08:27,986
to your application and so that
you can begin working with it


170
00:08:28,196 --> 00:08:30,876
and your user can begin
making changes immediately.


171
00:08:32,736 --> 00:08:36,466
But, because we manage the
fallback store now, we were able


172
00:08:36,466 --> 00:08:38,535
to take the integration
one step further


173
00:08:38,696 --> 00:08:40,736
than we felt developers
could on their own.


174
00:08:41,626 --> 00:08:44,346
We now store individual
transaction records


175
00:08:44,346 --> 00:08:46,726
for each change that's
made to the fallback store


176
00:08:47,376 --> 00:08:51,136
and this has implications for
both performance and bandwidth.


177
00:08:51,746 --> 00:08:55,236
You see, last year, if your
application took responsibility


178
00:08:55,236 --> 00:08:57,426
for migrating contents
from the fallback store


179
00:08:57,426 --> 00:09:00,486
to the iCloud store after the
iCloud store was available,


180
00:09:01,186 --> 00:09:04,116
you would have to do a
lot of extra work to scope


181
00:09:04,116 --> 00:09:05,756
that migration and ensure


182
00:09:05,756 --> 00:09:07,606
that it didn't consume
too much memory


183
00:09:07,926 --> 00:09:09,336
or bandwidth over the wire.


184
00:09:10,146 --> 00:09:12,566
However, now because
we keep our record


185
00:09:12,566 --> 00:09:16,106
of each individual transaction,
all that work is done for you.


186
00:09:16,956 --> 00:09:19,936
And this means that once the
iCloud store is available,


187
00:09:20,646 --> 00:09:23,796
we can transport those changes
into the container immediately


188
00:09:23,946 --> 00:09:25,796
and make them available
to other peers.


189
00:09:26,166 --> 00:09:28,696
So there's no additional work
for you to do the migrate data


190
00:09:28,696 --> 00:09:30,756
from the fallback store
to the iCloud store.


191
00:09:31,726 --> 00:09:35,106
But we also wanted to give
you a better way to tie


192
00:09:35,106 --> 00:09:38,006
in with this transition
and that requires


193
00:09:38,006 --> 00:09:39,466
that we introduce some new API.


194
00:09:40,706 --> 00:09:43,276
Today, we're introducing
NSPersistentStoreCoordinator


195
00:09:43,276 --> 00:09:47,236
Storage Will Change notification
as a way that we can tell you


196
00:09:47,576 --> 00:09:50,606
that an event has occurred where
we need to change the contents


197
00:09:50,606 --> 00:09:52,336
of the persistent
store file on disk.


198
00:09:53,356 --> 00:09:55,976
When you receive it,
you can optionally call


199
00:09:56,036 --> 00:09:59,196
NSManagedObjectContext
save if there are changes


200
00:09:59,196 --> 00:10:01,706
in your managed object context
that you wish to persist,


201
00:10:02,286 --> 00:10:05,126
and then you can call
NSManagedObjectContext reset


202
00:10:05,126 --> 00:10:09,706
and prepare your
UI for new data.


203
00:10:10,876 --> 00:10:13,526
When we get control back from
your notification observer,


204
00:10:13,916 --> 00:10:16,226
we'll remove the store from
the coordinator for you


205
00:10:16,716 --> 00:10:19,186
and then post
NSPersistentStoreCoordinator


206
00:10:19,186 --> 00:10:21,066
Storage Did Change notification


207
00:10:21,436 --> 00:10:22,846
when the store is
ready to come up.


208
00:10:23,726 --> 00:10:25,086
Now, it's important
that you realize


209
00:10:25,156 --> 00:10:26,916
that this transition
is very fast.


210
00:10:27,526 --> 00:10:30,466
It's almost as fast as if
you called addPersistentStore


211
00:10:30,466 --> 00:10:34,046
on a store file without iCloud
options, so you shouldn't expect


212
00:10:34,046 --> 00:10:35,736
to notice any interruption


213
00:10:35,786 --> 00:10:37,726
in what your user sees
in the application.


214
00:10:39,096 --> 00:10:41,066
You can then start working
with the storage just


215
00:10:41,066 --> 00:10:44,306
as you normally would, and call
NSManagedObjectContext save


216
00:10:44,726 --> 00:10:45,956
to make changes to
the iCloud store.


217
00:10:46,086 --> 00:10:50,196
Now, once you've
handle this transition,


218
00:10:50,816 --> 00:10:53,936
your application will be
fully up and running on iCloud


219
00:10:53,936 --> 00:10:54,896
and you can expect that at


220
00:10:54,896 --> 00:10:57,456
that point changes will be
available to other peers.


221
00:10:58,686 --> 00:11:01,866
Now, I need to mention that
this is a special case scenario.


222
00:11:02,516 --> 00:11:04,686
You will only see these
notifications during our


223
00:11:04,686 --> 00:11:06,146
asynchronous setup process


224
00:11:06,656 --> 00:11:09,376
if there is no persistent
store file on disk,


225
00:11:09,736 --> 00:11:11,846
or there are has been a
change to the iCloud account


226
00:11:11,946 --> 00:11:14,836
or the contents of the container
since we last launched.


227
00:11:15,776 --> 00:11:19,246
Normally, you'll just start
seeing NSPersistentStore Did


228
00:11:19,246 --> 00:11:21,666
Import Ubiquitous Content
Changes notification


229
00:11:22,056 --> 00:11:24,396
which you can merge into
your managed object context


230
00:11:24,646 --> 00:11:26,986
by using merged changes
from Context Did Save.


231
00:11:28,296 --> 00:11:30,956
This is important to
realize because the goal


232
00:11:30,956 --> 00:11:33,906
of our integration this year
for asynchronous setup was


233
00:11:33,906 --> 00:11:35,546
to eliminate any work
that you had to do


234
00:11:35,546 --> 00:11:36,996
by your application at all.


235
00:11:37,496 --> 00:11:41,516
However, we're providing this
new transition paradigm as a way


236
00:11:41,516 --> 00:11:45,366
of enabling you to have a
consistent implement once use


237
00:11:45,366 --> 00:11:47,706
case that you only
have to pay attention


238
00:11:47,706 --> 00:11:49,056
to for our integration.


239
00:11:49,636 --> 00:11:54,566
And so with that, let's
take a look at changes


240
00:11:54,836 --> 00:11:57,456
for how you handle changes
in the iCloud account.


241
00:11:58,776 --> 00:12:02,126
Normally in iOS 6
and Mac OS X 10.8,


242
00:12:02,696 --> 00:12:05,966
when the iCloud account changes,
the only way to notice this is


243
00:12:05,966 --> 00:12:08,736
by subscribing to the NS
UbiquityIdentityToken Did


244
00:12:08,736 --> 00:12:09,846
Change notification.


245
00:12:10,976 --> 00:12:13,886
When that happens, you have
to remove the persistent store


246
00:12:13,886 --> 00:12:17,846
from the coordinator and then
replace it with a new one


247
00:12:18,566 --> 00:12:19,716
to talk to the new account.


248
00:12:21,076 --> 00:12:24,906
In code, this looks a
little bit like this.


249
00:12:25,776 --> 00:12:27,996
You call NSManagedObjectContext
reset


250
00:12:27,996 --> 00:12:30,036
and then remove persistent
store,


251
00:12:30,716 --> 00:12:33,726
and then you call
NSPersistentStoreCoordinator


252
00:12:34,046 --> 00:12:37,246
addPersistentStore to add the
new file to the coordinator


253
00:12:37,246 --> 00:12:40,826
for use of the new account;
and this would work just fine


254
00:12:40,826 --> 00:12:43,296
in iOS 7 and Mac OS X 10.9.


255
00:12:43,936 --> 00:12:46,946
However, because we
control the fallback store


256
00:12:47,416 --> 00:12:49,076
and because we have
a new integration


257
00:12:49,076 --> 00:12:51,656
for asynchronous setup,
we thought that we might


258
00:12:51,656 --> 00:12:53,976
as well extend that to
account changes, as well.


259
00:12:55,306 --> 00:12:58,906
And so now, you'd no longer
have to subscribe to any


260
00:12:58,906 --> 00:13:00,556
of the iCloud notifications
at all.


261
00:13:01,206 --> 00:13:04,096
You simply implement your will
change handlers and respond


262
00:13:04,096 --> 00:13:06,886
to NSPersistentStoreCoordinator
Stores Will Change


263
00:13:07,226 --> 00:13:09,616
and will notify you
automatically when we need


264
00:13:09,616 --> 00:13:11,286
to change the persistent
store file


265
00:13:11,556 --> 00:13:13,246
because there's new
account on the system.


266
00:13:14,466 --> 00:13:17,456
Of course, you can then call
NSManagedObjectContext save


267
00:13:17,886 --> 00:13:20,126
and NSManagedObjectContext
reset.


268
00:13:20,956 --> 00:13:24,846
Now once you've done that,
we'll remove the store


269
00:13:24,846 --> 00:13:26,426
from the coordinator just


270
00:13:26,426 --> 00:13:28,396
as with the asynchronous
setup process


271
00:13:29,346 --> 00:13:31,646
and then we'll send you
NSPersistentStoreCoordinator


272
00:13:31,646 --> 00:13:34,226
Storage Did Change
notification, again,


273
00:13:34,696 --> 00:13:38,056
just like asynchronous setup
and you can begin working


274
00:13:38,056 --> 00:13:39,876
with your application
as you normally would.


275
00:13:40,986 --> 00:13:44,356
Now, let's talk about this
in a little bit more detail.


276
00:13:45,556 --> 00:13:48,106
When you receive
NSPersistentStoreCoordinator


277
00:13:48,106 --> 00:13:49,976
Stores Will Change notification,


278
00:13:50,446 --> 00:13:53,046
the persistent store is
still available to use,


279
00:13:53,476 --> 00:13:57,306
and so unlike what we advised
you of last year where you had


280
00:13:57,306 --> 00:13:59,966
to immediately drop the
persistent store and wipe


281
00:13:59,966 --> 00:14:02,926
out your managed object
context, you can still write


282
00:14:02,926 --> 00:14:04,426
to the managed object context


283
00:14:04,826 --> 00:14:07,036
and those changes will
be persistent locally


284
00:14:07,376 --> 00:14:09,906
to be imported to the account
if it every comes back.


285
00:14:10,776 --> 00:14:13,806
This means that although your
user's changes won't make it


286
00:14:13,806 --> 00:14:16,466
to iCloud immediately, if
they ever sign in again,


287
00:14:16,746 --> 00:14:20,736
they'll be there and waiting.


288
00:14:20,866 --> 00:14:22,246
Another thing you should know is


289
00:14:22,246 --> 00:14:24,746
that once you receive
NSPersistentStoreCoordinator


290
00:14:24,746 --> 00:14:26,606
Storage Did Change notification,


291
00:14:27,666 --> 00:14:32,146
the store file may no longer be
available to you to use on disk.


292
00:14:32,886 --> 00:14:35,796
This is because Core Data
automatically manages all


293
00:14:35,796 --> 00:14:37,626
of the stores associated
with the account.


294
00:14:38,956 --> 00:14:42,256
You provide us a single store
URL inside the application's


295
00:14:42,256 --> 00:14:46,106
local sandbox and we then
create an opaque container


296
00:14:46,706 --> 00:14:49,546
with an entry inside of it for
each account on the system,


297
00:14:50,526 --> 00:14:53,646
including the local
account, which is our term


298
00:14:53,646 --> 00:14:56,726
for what happens when there is
no iCloud account on the system.


299
00:14:58,026 --> 00:15:01,006
This is a special store
that's managed by Core Data


300
00:15:01,006 --> 00:15:02,766
so that you don't have
to do anything special


301
00:15:02,766 --> 00:15:05,406
because your user doesn't
have an iCloud account.


302
00:15:06,276 --> 00:15:07,436
How does this work?


303
00:15:08,656 --> 00:15:12,736
Well, you give us a store URL
somewhere inside the application


304
00:15:13,346 --> 00:15:18,236
samples, and we chop
that up and put


305
00:15:18,236 --> 00:15:20,686
in a special root directory
called Core Data Ubiquity


306
00:15:20,686 --> 00:15:24,456
Support, followed by a
directory tree that allows us


307
00:15:24,456 --> 00:15:31,336
to uniquely identify each store
and tie it into an account.


308
00:15:31,516 --> 00:15:32,876
Now for simplicity's sake,


309
00:15:33,356 --> 00:15:35,646
we've kept the persistent
store file name the same


310
00:15:35,646 --> 00:15:36,986
as the one you pass into us


311
00:15:37,676 --> 00:15:40,006
so that you can identify
the store files inside


312
00:15:40,006 --> 00:15:44,246
of this container
if you need to.


313
00:15:44,386 --> 00:15:47,406
Finally, all of these
store files will be managed


314
00:15:47,406 --> 00:15:49,216
by Core Data and that means


315
00:15:49,216 --> 00:15:51,206
that we could remove
them at any time.


316
00:15:52,946 --> 00:15:57,016
Each store will be removed
once its account has gone away


317
00:15:57,506 --> 00:16:00,006
because we can rebuild
the file from the cloud.


318
00:16:00,366 --> 00:16:02,716
So we want to free up as
much disk space as possible


319
00:16:02,716 --> 00:16:05,966
for your application to use and
not have old store files lying


320
00:16:05,966 --> 00:16:08,346
around that could take
up additional resources.


321
00:16:08,646 --> 00:16:12,966
And so that's our
changes to the account.


322
00:16:14,996 --> 00:16:17,366
So now let's talk
about some new API


323
00:16:17,366 --> 00:16:18,836
that we're introducing
this year.


324
00:16:20,326 --> 00:16:25,286
I'm sure you recognized
this line of code.


325
00:16:26,746 --> 00:16:30,026
This calls NSFileManager's
URLForUbiquitous


326
00:16:30,026 --> 00:16:33,096
ContainerIdentifier
method, and it allows you


327
00:16:33,096 --> 00:16:35,746
to get the URL inside
of the iCloud container


328
00:16:36,216 --> 00:16:38,676
where your application can
store files and write data.


329
00:16:40,546 --> 00:16:44,416
However as you may know, when
you change iCloud accounts,


330
00:16:44,476 --> 00:16:46,606
this method can take a
little while to return,


331
00:16:47,476 --> 00:16:49,966
and so we couldn't provide
you a truly seamless


332
00:16:49,966 --> 00:16:52,926
and fast integration without
a eliminating the need


333
00:16:52,926 --> 00:16:53,746
for you to call it.


334
00:16:54,816 --> 00:16:57,796
Normally, you take the value
from this method and pass it


335
00:16:57,866 --> 00:17:00,686
to us and as an option
called NSPersistentStore


336
00:17:00,836 --> 00:17:04,896
UbiquitousContentURLKey,
and this is how we know


337
00:17:04,896 --> 00:17:07,366
where to keep all of your
data in the iCloud account.


338
00:17:08,425 --> 00:17:12,185
So in iOS 7 and Mac OS X
10.9, you'll no longer need


339
00:17:12,185 --> 00:17:16,986
to pass a value for that at all,


340
00:17:16,986 --> 00:17:19,746
and we'll call URLForUbiquitous
ContainerIdentifier


341
00:17:19,996 --> 00:17:21,536
automatically under
the hood for you.


342
00:17:22,646 --> 00:17:24,406
Now as you may remember,


343
00:17:24,665 --> 00:17:27,336
our advice in past
years has always been


344
00:17:27,336 --> 00:17:30,436
that you should keep our
transaction log content inside


345
00:17:30,436 --> 00:17:32,426
of a special subdirectory
in the container,


346
00:17:33,696 --> 00:17:36,266
and you may be wondering
how it is that we'll know


347
00:17:36,266 --> 00:17:39,686
where to find this if you're
not passing a URL into us.


348
00:17:40,546 --> 00:17:41,036
Well,


349
00:17:41,806 --> 00:17:46,756
NSPersistentStoreUbiquitous
ContentURLKey now takes a string


350
00:17:46,756 --> 00:17:48,266
subpath, as well.


351
00:17:48,836 --> 00:17:53,006
This is optional, but if your
application already exists


352
00:17:53,006 --> 00:17:55,516
in iCloud and you have
a special subdirectory


353
00:17:55,516 --> 00:17:57,286
where you've been keeping
all of our content,


354
00:17:57,836 --> 00:18:00,326
you need to pass this
value in so we can find it.


355
00:18:00,936 --> 00:18:03,186
Otherwise, we'll
create our own value


356
00:18:03,186 --> 00:18:05,316
by default called
Core Data Support.


357
00:18:05,906 --> 00:18:08,796
This is a special directory we
create in your iCloud account


358
00:18:09,216 --> 00:18:11,586
and store all of our
transaction log content in.


359
00:18:12,126 --> 00:18:13,966
One of our main goals
this year is


360
00:18:13,966 --> 00:18:18,216
to provide a very simple
integration; and that means


361
00:18:18,216 --> 00:18:21,336
that we really need to consider
all of the cases of applications


362
00:18:21,426 --> 00:18:22,626
that are going to
be in use with it.


363
00:18:23,416 --> 00:18:26,186
So this year, we're
introducing NSPersistentStore


364
00:18:26,186 --> 00:18:30,216
UbiquitousContainerIdentifier
key as a way for applications


365
00:18:30,216 --> 00:18:32,706
that have multiple iCloud
container identifiers


366
00:18:32,706 --> 00:18:36,216
in their entitlements.plist to
tell us which one they want us


367
00:18:36,216 --> 00:18:38,806
to use when we call
URLForUbiquitous


368
00:18:38,806 --> 00:18:39,936
ContainerIdentifier.


369
00:18:40,666 --> 00:18:42,666
So how does this work?


370
00:18:43,526 --> 00:18:47,236
Well, if you're application has
multiple container identifiers


371
00:18:47,236 --> 00:18:50,436
in its entitlements.plist,
by default,


372
00:18:50,816 --> 00:18:53,636
NSFileManagerURLFor
UbiquitousContainerIdentifier


373
00:18:53,636 --> 00:18:56,116
will select the first
one if pass No.


374
00:18:56,996 --> 00:18:58,756
However, if you want
to use something


375
00:18:58,756 --> 00:19:02,116
that isn't the first one, you
need to pass us this option


376
00:19:02,116 --> 00:19:03,836
so that we know which
one to use,


377
00:19:04,236 --> 00:19:06,326
and this value will
be passed directly


378
00:19:06,496 --> 00:19:08,706
to URLForUbiquitous
ContainerIdentifier


379
00:19:08,706 --> 00:19:11,146
under the hood.


380
00:19:11,306 --> 00:19:16,016
We're also trying to help you
manage iCloud content and for


381
00:19:16,016 --> 00:19:19,156
that reason we're introducing
NSPersistentStore Rebuild


382
00:19:19,156 --> 00:19:20,706
From Ubiquitous Content option.


383
00:19:21,546 --> 00:19:23,236
This is an option
that allows you


384
00:19:23,596 --> 00:19:25,866
to remove the persistent
store file on disk


385
00:19:26,146 --> 00:19:28,466
and examine what happens
when we rebuild it


386
00:19:28,466 --> 00:19:29,706
from the iCloud content.


387
00:19:30,446 --> 00:19:33,766
It's important that you know
addPersistentStore will always


388
00:19:33,766 --> 00:19:36,176
return an empty store
when you pass this option,


389
00:19:36,716 --> 00:19:38,346
that's because we need to switch


390
00:19:38,346 --> 00:19:41,976
over to the fallback store
while we -- excuse me --


391
00:19:42,636 --> 00:19:45,186
while we rebuild
the iCloud store


392
00:19:45,186 --> 00:19:47,626
from the transaction log
content in the cloud.


393
00:19:47,626 --> 00:19:50,766
So how does this work?


394
00:19:51,096 --> 00:19:52,686
Well, you just pass it --


395
00:19:52,906 --> 00:19:53,396
pass us a [inaudible]


396
00:19:53,396 --> 00:19:57,016
that evaluates TS inside
the options dictionary,


397
00:19:57,166 --> 00:19:59,256
and we go off and
replace the store file


398
00:19:59,256 --> 00:20:00,976
with one that's freshly
built from the cloud.


399
00:20:03,116 --> 00:20:05,056
We're also introducing
a new option


400
00:20:05,056 --> 00:20:08,426
to help you create
backups or local copies


401
00:20:08,426 --> 00:20:12,556
of the iCloud persistent store
called NSPersistentStore Remove


402
00:20:12,556 --> 00:20:14,116
Ubiquitous Metadata Option.


403
00:20:14,806 --> 00:20:18,246
This removes all associated
metadata from the iCloud store;


404
00:20:18,436 --> 00:20:19,836
that means, anything
that we write


405
00:20:19,836 --> 00:20:23,046
into the metadata dictionary as
well as the store file itself,


406
00:20:23,576 --> 00:20:26,526
and it's critical if you
want to use the migration API


407
00:20:27,036 --> 00:20:28,996
to create backups
or local copies


408
00:20:28,996 --> 00:20:30,916
at a persistent store
you wish to open


409
00:20:30,916 --> 00:20:32,386
without the iCloud options.


410
00:20:34,296 --> 00:20:37,586
Finally, we're adding
a class method


411
00:20:37,666 --> 00:20:41,126
to NSPersistentStoreCoordinator
which removes all


412
00:20:41,126 --> 00:20:44,546
of the iCloud content and the
persistent store files on disk.


413
00:20:45,286 --> 00:20:47,956
This is our way of providing
you with a clean slate.


414
00:20:48,686 --> 00:20:51,736
If you call this method, we
will go into the iCloud account


415
00:20:51,736 --> 00:20:53,926
and delete all of the
content associated


416
00:20:53,926 --> 00:20:55,376
with a given persistent store.


417
00:20:56,266 --> 00:20:59,786
You pass us the store URL
and the options dictionary


418
00:20:59,786 --> 00:21:03,276
that you normally pass so that
we can correctly identify the


419
00:21:03,276 --> 00:21:05,586
store and its content
in the iCloud account.


420
00:21:06,656 --> 00:21:08,486
Now, I can't over
state this enough.


421
00:21:08,866 --> 00:21:10,306
This is our clean slate.


422
00:21:10,836 --> 00:21:14,076
If you call this method, none
of the data will remain on disk


423
00:21:14,336 --> 00:21:17,096
or in the iCloud account that's
associated with a given store,


424
00:21:17,826 --> 00:21:20,726
but it is the easiest way
for you to start over.


425
00:21:21,666 --> 00:21:24,846
And because of that, we've
made this method synchronous.


426
00:21:25,566 --> 00:21:28,386
There is a significant amount
of network I/O that it has to do


427
00:21:28,386 --> 00:21:32,316
under the hood when it talks
to iCloud, and because of this,


428
00:21:32,466 --> 00:21:34,496
it may take a little
while to run.


429
00:21:34,886 --> 00:21:36,746
However, you can't work


430
00:21:36,746 --> 00:21:39,226
with a persistent store
until it's finished.


431
00:21:40,086 --> 00:21:41,986
And so, it will be synchronous


432
00:21:42,146 --> 00:21:43,766
and once it returns
successfully,


433
00:21:44,376 --> 00:21:45,676
you can work with a store again.


434
00:21:46,956 --> 00:21:47,856
How does this work?


435
00:21:48,906 --> 00:21:52,556
Well, you'll have some content
and a persistent store file


436
00:21:52,556 --> 00:21:56,566
on disk and we'll erase the
persistent store file first


437
00:21:57,266 --> 00:22:00,566
and then nuke the
iCloud content, as well.


438
00:22:01,276 --> 00:22:03,846
And we have some special
integration under the hood


439
00:22:03,846 --> 00:22:06,726
to make sure that this is
robust and reliable as possible.


440
00:22:08,206 --> 00:22:12,226
It actually only requires
one I/O operation with iCloud


441
00:22:12,226 --> 00:22:14,546
to propagate the delete
to all of your devices


442
00:22:15,006 --> 00:22:18,746
and that makes it very
fast and very robust,


443
00:22:18,746 --> 00:22:21,076
but we still recommend
that you only do it


444
00:22:21,076 --> 00:22:22,716
when you have a good
network connection


445
00:22:23,106 --> 00:22:25,596
such as an Ethernet
connection from a Mac.


446
00:22:25,596 --> 00:22:28,466
It works just fine on
iOS devices, however,


447
00:22:28,466 --> 00:22:32,016
if the connection isn't great
or iCloud isn't available


448
00:22:32,016 --> 00:22:34,566
on that device, you won't
see the change propagate


449
00:22:34,566 --> 00:22:38,786
for quite some time.


450
00:22:38,996 --> 00:22:40,256
Now as you've already seen,


451
00:22:40,616 --> 00:22:43,386
we're introducing a new
notification this year called


452
00:22:43,416 --> 00:22:45,916
NSPersistentStoreCoordinator
Storage Will Change


453
00:22:45,916 --> 00:22:48,666
notification, and
this only applies


454
00:22:48,666 --> 00:22:50,406
to iCloud persistent stores.


455
00:22:50,896 --> 00:22:53,386
You won't see it with any
other type of persistent store


456
00:22:53,386 --> 00:22:56,786
on the system as it's our
way of creating a consistent


457
00:22:56,996 --> 00:22:58,446
and reusable paradigm


458
00:22:58,826 --> 00:23:01,166
for handling transition
events related to iCloud.


459
00:23:02,736 --> 00:23:05,346
The user info dictionary
will contain instances


460
00:23:05,346 --> 00:23:08,906
of NSPersistentStore that
identify the iCloud store that's


461
00:23:08,906 --> 00:23:13,876
about to change, and you
can subscribe to it just


462
00:23:13,876 --> 00:23:15,256
like any other notification.


463
00:23:15,786 --> 00:23:18,676
We recommend that you scope
this using the persistent store


464
00:23:18,676 --> 00:23:21,056
coordinator that your
application uses to talk


465
00:23:21,056 --> 00:23:24,716
to iCloud as the object when you
subscribe to the notification.


466
00:23:25,576 --> 00:23:27,306
As well, you should subscribe


467
00:23:27,306 --> 00:23:30,676
to NSPersistentStoreCoordinator
Storage Did Change method --


468
00:23:31,016 --> 00:23:34,526
or, sorry -- Storage Did
Change notification and scope


469
00:23:34,526 --> 00:23:36,846
that by the persistent
store coordinator, as well.


470
00:23:38,106 --> 00:23:39,976
And this is because
the implementation


471
00:23:39,976 --> 00:23:43,116
of your Did Change handler will
probably be slightly different


472
00:23:43,116 --> 00:23:45,116
for the iCloud store
than it will


473
00:23:45,116 --> 00:23:47,466
for the other persistent
stores on your system.


474
00:23:48,966 --> 00:23:51,206
So let's take a look at
those notification handlers.


475
00:23:52,366 --> 00:23:54,846
Now, I mentioned earlier that
our goal for this year was


476
00:23:54,846 --> 00:23:56,766
to provide a very
simple integration


477
00:23:57,116 --> 00:23:59,686
that significantly reduced
the amount of complex code


478
00:23:59,686 --> 00:24:00,906
that developers have to write.


479
00:24:01,726 --> 00:24:04,836
And so, with the Will
Change notification,


480
00:24:05,326 --> 00:24:08,146
we've tried to make it as easy
possible to get up and running


481
00:24:08,626 --> 00:24:11,156
and all you have to
do is optionally call


482
00:24:11,156 --> 00:24:12,916
NSManagedObjectContext Save


483
00:24:12,916 --> 00:24:15,596
and then NSManagedObjectContext
reset.


484
00:24:16,046 --> 00:24:18,716
This will completely prepare
your application for use


485
00:24:18,956 --> 00:24:20,156
with the new iCloud store.


486
00:24:20,236 --> 00:24:24,426
Of course, you may have some
custom code you need to run


487
00:24:24,606 --> 00:24:26,536
to prepare your user
interface for this.


488
00:24:27,136 --> 00:24:28,016
Now as I mentioned,


489
00:24:28,016 --> 00:24:30,146
this transition will
happen fairly quickly


490
00:24:30,596 --> 00:24:33,706
and so you should not need to
block your UI while you wait


491
00:24:33,706 --> 00:24:35,586
for the store file
to be swapped out.


492
00:24:35,856 --> 00:24:38,466
However, you may wish to
prevent the user from trying


493
00:24:38,466 --> 00:24:41,586
to write new data to disk
such as blocking a Save button


494
00:24:42,606 --> 00:24:45,716
which you can then enable inside
of the Did Change handler.


495
00:24:46,516 --> 00:24:49,996
And as you can see, this
is only a handful of code.


496
00:24:50,256 --> 00:24:52,156
In fact, most of the
sample applications


497
00:24:52,156 --> 00:24:55,616
that we use internally
have completely changed


498
00:24:55,926 --> 00:24:59,656
by reducing a ton of code to
just a few lines to integrate


499
00:24:59,656 --> 00:25:00,986
with our iCloud integration.


500
00:25:00,986 --> 00:25:03,376
And so that's all
for the new API.


501
00:25:03,376 --> 00:25:07,556
Let's talk a little bit
about how things have changed


502
00:25:07,556 --> 00:25:11,366
for living on iCloud and
iOS 7 and Mac OS X 10.9.


503
00:25:12,016 --> 00:25:14,136
There have been a number
of substantial improvements


504
00:25:14,136 --> 00:25:16,956
to the developer tools and
frameworks that are available


505
00:25:16,956 --> 00:25:20,266
to you as well as the underlying
infrastructure related


506
00:25:20,266 --> 00:25:20,706
to iCloud.


507
00:25:21,436 --> 00:25:24,446
Perhaps one of the most
significant is Xcode's new


508
00:25:24,586 --> 00:25:25,756
iCloud Debugging pane.


509
00:25:26,066 --> 00:25:29,066
This is a pane that
automatically runs inside


510
00:25:29,066 --> 00:25:31,626
of the debugger when your
application uses iCloud,


511
00:25:32,116 --> 00:25:34,936
and you can see the amount
of storage space you consumed


512
00:25:35,266 --> 00:25:38,406
as well as the status of a given
iCloud account whether it's


513
00:25:38,406 --> 00:25:41,826
idle, uploading,
downloading, or actively working


514
00:25:41,826 --> 00:25:42,826
to set up the account.


515
00:25:43,896 --> 00:25:47,526
But I think the real gem here
is the file transfer graph.


516
00:25:48,086 --> 00:25:50,726
This shows all of the
activity on the iCloud account,


517
00:25:50,896 --> 00:25:52,656
both uploads and downloads,


518
00:25:53,036 --> 00:25:56,286
and so you can see any activity
that's generated on your behalf


519
00:25:56,596 --> 00:25:58,796
by the Core Data
integration under the hood.


520
00:25:59,136 --> 00:26:02,016
You can also see a list of
every single file inside the


521
00:26:02,016 --> 00:26:04,526
container, including
our hidden directories


522
00:26:04,526 --> 00:26:07,666
and special files that's in use
by the Core Data integration;


523
00:26:08,156 --> 00:26:12,336
and as you can see, the
status of each file is printed


524
00:26:12,766 --> 00:26:13,886
in the column to the right.


525
00:26:14,566 --> 00:26:15,796
This will let you know whether


526
00:26:15,796 --> 00:26:19,016
or not a file is what
we call current on disk,


527
00:26:19,396 --> 00:26:21,806
meaning that it has been
downloaded and is available


528
00:26:21,806 --> 00:26:23,526
to the Core Data
integration to use.


529
00:26:23,986 --> 00:26:26,776
And so if you're looking through
our transaction log directories,


530
00:26:27,076 --> 00:26:30,076
you can actually see whether
or not files from other peers


531
00:26:30,336 --> 00:26:32,746
that were changed recently
have been downloaded


532
00:26:32,746 --> 00:26:34,426
and are available
to us to import.


533
00:26:35,156 --> 00:26:36,316
So this can be a big help


534
00:26:36,316 --> 00:26:38,946
when you're wondering why you're
not seeing NSPersistentStore


535
00:26:38,946 --> 00:26:42,116
Ubiquitous Content Changes
notification without having


536
00:26:42,116 --> 00:26:43,316
to enable a ton of logging.


537
00:26:45,496 --> 00:26:48,956
The iOS simulator also
now fully supports iCloud.


538
00:26:49,626 --> 00:26:52,206
You can use the same
account with your application


539
00:26:52,206 --> 00:26:55,116
that you're using on your Mac
or a completely different one,


540
00:26:55,646 --> 00:26:58,036
and this allows you to
test iCloud integration


541
00:26:58,036 --> 00:27:00,016
without having to change
settings on your Mac.


542
00:27:00,586 --> 00:27:05,806
As well, you can also test sync
between a Mac and an iOS device


543
00:27:06,006 --> 00:27:09,546
without actually connecting
to any devices, and to me,


544
00:27:09,546 --> 00:27:11,756
this is a huge advantage
because it allows you


545
00:27:11,756 --> 00:27:15,006
to evaluate your cross-platform
integration without having


546
00:27:15,006 --> 00:27:16,776
to worry about carrying
devices with you.


547
00:27:17,336 --> 00:27:20,686
It fully supports
iCloud document storage


548
00:27:21,136 --> 00:27:23,946
and the iCloud key
value store, as well,


549
00:27:23,946 --> 00:27:26,836
you'll also receive support
for pushing notifications now


550
00:27:26,836 --> 00:27:27,646
in the simulator [applause].


551
00:27:28,016 --> 00:27:30,296
[Laughter] Thank you.


552
00:27:33,086 --> 00:27:34,566
But it wouldn't be
a Core Data session


553
00:27:34,566 --> 00:27:36,336
if I didn't tell
you about logging.


554
00:27:37,256 --> 00:27:40,446
Now, all of this has existed
in our iCode integration


555
00:27:40,446 --> 00:27:41,706
for the last couple of years.


556
00:27:42,266 --> 00:27:46,866
But, in iOS 7 and Mac OS X 10.9,
we've made it possible for you


557
00:27:46,866 --> 00:27:49,676
to enable the logging by
setting a user default inside


558
00:27:49,676 --> 00:27:50,506
your application.


559
00:27:51,146 --> 00:27:52,716
Of course, you can still pass it


560
00:27:52,716 --> 00:27:56,686
as a launch argument
using com.apple.coredata.


561
00:27:56,686 --> 00:27:58,056
ubiquity.logLevel.


562
00:27:58,476 --> 00:28:01,026
Number 3 is the highest,
so if you turn that up,


563
00:28:01,086 --> 00:28:02,716
expect to get a lot of logs.


564
00:28:03,016 --> 00:28:07,176
Of course, we also have
com.apple.CoreData.SQLDebug


565
00:28:07,506 --> 00:28:09,466
which allows us to
see what activity


566
00:28:09,466 --> 00:28:13,406
and what SQL we're generating
when you use the iCloud store.


567
00:28:13,986 --> 00:28:16,106
And I have to mention that
if you're having problems


568
00:28:16,106 --> 00:28:19,806
with iCloud related to your
local managed object context


569
00:28:19,806 --> 00:28:22,476
that is the one that's in
use by your persistent store,


570
00:28:22,846 --> 00:28:25,246
this is a critical tool
for us to help you debug


571
00:28:25,246 --> 00:28:29,266
that because we need to see what
activity your store is at --


572
00:28:29,266 --> 00:28:32,476
or, sorry, your managed object
context is actually attempting


573
00:28:32,476 --> 00:28:34,866
to do in relation
to the iCloud store.


574
00:28:34,866 --> 00:28:38,846
Of course, you can pass
both of these arguments


575
00:28:38,846 --> 00:28:41,916
as a launch argument
through application inside


576
00:28:41,916 --> 00:28:43,126
of Xcode scheme editor.


577
00:28:43,706 --> 00:28:46,826
There have also been
improvements


578
00:28:46,826 --> 00:28:50,196
to the underlying logging
system related to iCloud itself.


579
00:28:50,196 --> 00:28:55,016
On OS X, we're introducing a new
tool this year called ubcontrol,


580
00:28:55,016 --> 00:28:57,776
and ubcontrol interface
is directly


581
00:28:57,776 --> 00:28:59,966
with the underlying
daemons that talk to iCloud.


582
00:29:00,946 --> 00:29:03,426
It allows you to do things
like enable debug logging


583
00:29:04,396 --> 00:29:08,096
and you do this by
calling ubcontrol-k7.


584
00:29:08,836 --> 00:29:12,316
Now, 7 is the highest
logging level that they allow


585
00:29:12,676 --> 00:29:15,936
and it's what we need to debug
any iCloud issues related


586
00:29:15,936 --> 00:29:18,116
to the actual file
transfer on the system.


587
00:29:18,686 --> 00:29:22,296
So if you see a bug, enable
this, reproduce the issue


588
00:29:22,486 --> 00:29:23,506
and then follow radar.


589
00:29:23,506 --> 00:29:28,276
Of course, on iOS, we still have
the iCloud Debug Provisioning


590
00:29:28,276 --> 00:29:30,286
profile and this is available


591
00:29:30,286 --> 00:29:32,826
from developer.apple.com
as a download.


592
00:29:34,136 --> 00:29:37,146
You can download and unzip
this file on your Mac


593
00:29:37,476 --> 00:29:38,966
and then email it yourself.


594
00:29:39,376 --> 00:29:41,836
Finally, on iOS, open the email.


595
00:29:43,016 --> 00:29:44,536
Follow the onscreen instructions


596
00:29:44,686 --> 00:29:47,906
and then reboot the device
once the profile is installed.


597
00:29:48,776 --> 00:29:50,596
It's critical that
you reboot your device


598
00:29:50,726 --> 00:29:52,766
because this is what
restarts all of the daemons


599
00:29:52,766 --> 00:29:54,766
on your iOS device
that talk to iCloud.


600
00:29:55,296 --> 00:29:57,846
Without it, they won't pick
up the new logging level.


601
00:29:58,486 --> 00:29:59,966
Once you've reproduced
the issue,


602
00:30:00,676 --> 00:30:02,946
you should sync your
device directly with iTunes


603
00:30:03,626 --> 00:30:04,766
and then gather the logs


604
00:30:04,766 --> 00:30:08,746
from Library/Logs/CrashReporter
/MobileDevice


605
00:30:08,956 --> 00:30:12,366
and then the device name
and diagnostic logs,


606
00:30:12,696 --> 00:30:14,266
and you can file a
bug with those in it


607
00:30:14,266 --> 00:30:14,976
and we'll take a look.


608
00:30:16,156 --> 00:30:19,106
Now, I want to talk for a
minute just about filing bugs.


609
00:30:19,776 --> 00:30:22,686
We received a lot of bug reports
from you over the last year


610
00:30:22,936 --> 00:30:24,126
and this has been critical


611
00:30:24,126 --> 00:30:26,186
in not only helping us
scope our integration


612
00:30:26,696 --> 00:30:29,506
but also decide what areas
of improvement we can provide


613
00:30:29,506 --> 00:30:31,536
to you that will
have the most value.


614
00:30:32,306 --> 00:30:36,596
So when you file bugs, please,
please, please include all


615
00:30:36,596 --> 00:30:39,446
of the logs that you
can, and if possible,


616
00:30:39,446 --> 00:30:41,226
your local persistent
store files


617
00:30:41,526 --> 00:30:44,536
because this helps us get all
the information that we need


618
00:30:44,856 --> 00:30:46,766
to identify the issue
that you're running into.


619
00:30:47,896 --> 00:30:51,386
So with that, I'd like to
bring Melissa Turner up


620
00:30:51,656 --> 00:30:54,276
and she'll take you through some
demos of a few other changes


621
00:30:54,276 --> 00:30:55,166
that we've made this year.


622
00:30:57,516 --> 00:31:02,186
[ Applause ]


623
00:31:02,686 --> 00:31:03,836
>> Melissa Turner:
I'm Melissa Turner.


624
00:31:03,836 --> 00:31:05,416
I'm one of the Core
Data engineers,


625
00:31:06,086 --> 00:31:09,746
and I totally thought I was
going to go out talking on stage


626
00:31:09,746 --> 00:31:12,306
at WWDC this year until
a couple of weeks ago


627
00:31:12,306 --> 00:31:14,766
when my manager came to me
and said, "Hey, Melissa,


628
00:31:15,386 --> 00:31:17,086
you totally are the
one who's going


629
00:31:17,086 --> 00:31:18,856
to see all the weird
esoteric bugs


630
00:31:18,856 --> 00:31:20,066
that nobody else
is going to hit.


631
00:31:20,306 --> 00:31:23,966
I want you to do a demo,
take one for the team."


632
00:31:24,316 --> 00:31:24,976
So here we are.


633
00:31:26,236 --> 00:31:26,956
We'll do it this way.


634
00:31:27,046 --> 00:31:30,596
If my demo fails gloriously
on stage, I'll have found bugs


635
00:31:30,596 --> 00:31:34,246
that we will then not be
shipping to you, guys.


636
00:31:34,246 --> 00:31:37,246
OK. So here we have
a little application;


637
00:31:37,376 --> 00:31:39,156
it's a note-taking application.


638
00:31:39,156 --> 00:31:40,046
I'm going to add a note.


639
00:31:40,046 --> 00:31:44,186
I need to add another note.


640
00:31:46,496 --> 00:31:47,376
It's pretty simple.


641
00:31:48,306 --> 00:31:52,006
Not much to see here,
but as important


642
00:31:52,006 --> 00:31:54,776
as what you're seeing is,


643
00:31:55,206 --> 00:31:57,256
what's more important is
what you're not seeing.


644
00:31:57,256 --> 00:32:02,926
And what you're not seeing
here is, well, a hang as I wait


645
00:32:02,926 --> 00:32:07,796
for addPersistentStore to return
with my ubiquitized store.


646
00:32:09,366 --> 00:32:12,666
You can see that as I
was sitting there waiting


647
00:32:12,666 --> 00:32:14,816
and as I was talking to
you, as I was working


648
00:32:14,816 --> 00:32:18,026
with that responsive UI,
our iCloud integration off


649
00:32:18,026 --> 00:32:20,306
in the background was going
off and fetching information


650
00:32:20,306 --> 00:32:22,566
about our lab times today
-- for the next week.


651
00:32:22,996 --> 00:32:25,326
So, you can see as Nick said,


652
00:32:25,326 --> 00:32:27,756
this is the asynchronous
store setup.


653
00:32:27,926 --> 00:32:30,936
We've made things a lot better,
a lot smoother, a lot easier


654
00:32:30,936 --> 00:32:36,086
for you, guys --
one line of code.


655
00:32:36,286 --> 00:32:38,796
So, because I'm me and
this is a demo on stage,


656
00:32:38,796 --> 00:32:41,196
there was a good potential
something was going to go wrong


657
00:32:41,196 --> 00:32:43,196
and I was going to
have to come in here


658
00:32:43,196 --> 00:32:45,716
and try debugging whatever
had gone wrong on stage.


659
00:32:46,216 --> 00:32:51,176
So this is, as Nick said,
the iCloud Debugging pane


660
00:32:51,226 --> 00:32:52,776
and it comes up whenever
you are trying


661
00:32:52,776 --> 00:32:54,756
to debug an application
that uses iCloud.


662
00:32:55,366 --> 00:32:58,396
The top left-hand side, you
can see some information


663
00:32:58,396 --> 00:33:01,546
about your application and
about your iCloud status.


664
00:33:02,096 --> 00:33:04,466
If you bring up this pane when
you're running an application


665
00:33:04,466 --> 00:33:06,426
and all you see is the
little cloud on the left


666
00:33:06,646 --> 00:33:09,266
and a thing saying,
"iCloud not enabled," well,


667
00:33:10,006 --> 00:33:11,686
that would be why you're
not seeing any of the data


668
00:33:11,686 --> 00:33:13,246
that you're expecting
to see from the cloud


669
00:33:13,396 --> 00:33:15,206
because you haven't enabled
iCloud on your computer.


670
00:33:17,296 --> 00:33:20,086
There's a storage meter,
it tells you how much


671
00:33:20,086 --> 00:33:21,086
of your quota is there.


672
00:33:21,366 --> 00:33:24,156
If you're not seeing data and
that meter is pegged red, well,


673
00:33:24,156 --> 00:33:25,546
probably you're not seeing it


674
00:33:25,546 --> 00:33:27,856
because the client
couldn't write it.


675
00:33:28,216 --> 00:33:30,366
Below that, we have the
transfer activity gauge.


676
00:33:30,366 --> 00:33:32,166
You can see some
green stripes there.


677
00:33:32,696 --> 00:33:34,616
This coincides with
those notes I created


678
00:33:34,616 --> 00:33:36,266
that were then pushed
up into the cloud.


679
00:33:36,386 --> 00:33:38,616
Green stripes are
data being pushed;


680
00:33:38,716 --> 00:33:40,136
blue stripes are
data being pulled.


681
00:33:40,136 --> 00:33:42,846
Because this is a Mac and
it's [inaudible] up here


682
00:33:42,846 --> 00:33:44,816
and it's been sitting on
stage connected for a while,


683
00:33:44,816 --> 00:33:46,096
we don't see any blue stripes.


684
00:33:46,096 --> 00:33:47,946
All of the data that
would've been downloaded


685
00:33:47,946 --> 00:33:49,986
for this application was
downloaded well before


686
00:33:49,986 --> 00:33:50,646
we launched.


687
00:33:51,546 --> 00:33:55,826
And below that, we have
the documents in data view.


688
00:33:56,856 --> 00:33:59,656
This is showing you a listing
of all the files that are


689
00:33:59,656 --> 00:34:03,286
in your ubiquity container,
and you really don't need


690
00:34:03,286 --> 00:34:05,376
to pay attention to the
stuff that starts with a dot,


691
00:34:05,376 --> 00:34:07,976
that's our private stuff; you're
not going to be able to figure


692
00:34:07,976 --> 00:34:09,545
out very much from there.


693
00:34:10,985 --> 00:34:17,356
But under that, you'll
see some directories


694
00:34:17,356 --> 00:34:18,626
that have an accountname.uuid


695
00:34:18,626 --> 00:34:21,926
and these are your
peer containers.


696
00:34:21,926 --> 00:34:24,436
And digging notes inside
those can be interesting


697
00:34:24,436 --> 00:34:26,755
because that's where you'll
see the Core Data receipts.


698
00:34:26,886 --> 00:34:30,466
And if you've got data coming,
you're debugging an application


699
00:34:30,466 --> 00:34:34,356
on two pairs and you're
expecting data from one to show


700
00:34:34,356 --> 00:34:36,716
up in the other, this is where
you'll find out whether or not


701
00:34:36,716 --> 00:34:38,576
that data has actually
made it through the cloud.


702
00:34:38,996 --> 00:34:41,936
If you've got five receipts
on one file and only three --


703
00:34:41,936 --> 00:34:44,646
on one machine and only
three on the other, well,


704
00:34:44,646 --> 00:34:46,076
that's some transactions
that have not


705
00:34:46,076 --> 00:34:47,386
yet made it across the network.


706
00:34:49,116 --> 00:34:52,326
Transaction logs appear in
these lines and you can see


707
00:34:52,326 --> 00:34:58,226
over on the right-hand side the
status whether data is current,


708
00:34:58,646 --> 00:35:01,056
whether we know it exists
but it's still in the cloud


709
00:35:01,056 --> 00:35:02,746
because it's a large file
and we haven't managed


710
00:35:02,746 --> 00:35:06,366
to download it yet, whether
it's current but waiting


711
00:35:06,366 --> 00:35:09,966
to be pushed to the cloud.


712
00:35:09,966 --> 00:35:15,636
So, and here's that using local
storage that Nick was talking


713
00:35:15,636 --> 00:35:17,226
about -- logs that
Nick was talking about.


714
00:35:18,546 --> 00:35:23,116
We're not using it in this
case; we're using the cloud.


715
00:35:23,196 --> 00:35:27,126
So, on top of that,
Nick also talked


716
00:35:27,126 --> 00:35:30,566
about account transitions,
about how Core Data has taken


717
00:35:30,896 --> 00:35:34,276
over managing the iCloud
state transitions for you.


718
00:35:35,436 --> 00:35:37,426
And, well, how to demo that?


719
00:35:37,936 --> 00:35:39,926
Well, that's pretty easy.


720
00:35:39,926 --> 00:35:45,436
You need to go off.


721
00:35:45,676 --> 00:35:47,276
I'm going to go into
system preferences.


722
00:35:48,076 --> 00:35:50,656
I'm going to hit
the Sign Out button.


723
00:35:53,556 --> 00:35:55,166
And voila!


724
00:35:55,806 --> 00:35:59,606
Automatically, we have noticed
that the account was signed out,


725
00:36:00,536 --> 00:36:02,386
sent you a notification
saying --


726
00:36:02,576 --> 00:36:04,536
oh, by the way, that
file is going away,


727
00:36:05,186 --> 00:36:07,746
and my application
received that,


728
00:36:08,546 --> 00:36:11,606
and basically refreshed its UI
and you can see all of the data


729
00:36:11,606 --> 00:36:13,136
that was in the cloud
is now gone.


730
00:36:13,606 --> 00:36:16,296
That's because once you
remove an account, well,


731
00:36:17,716 --> 00:36:19,876
you no longer have
that iCloud data.


732
00:36:19,876 --> 00:36:21,946
It's off in the cloud,
not on your local system.


733
00:36:22,106 --> 00:36:25,726
So our local store, because we
had not created any data before


734
00:36:25,726 --> 00:36:28,346
we logged into cloud is empty.


735
00:36:28,916 --> 00:36:31,396
So, well let's signing out


736
00:36:31,396 --> 00:36:33,226
and you're probably
saying, "Well, sign out?


737
00:36:33,326 --> 00:36:34,006
Yeah, that's easy.


738
00:36:34,006 --> 00:36:34,966
How about sign in?


739
00:36:35,236 --> 00:36:36,026
Can you do that?"


740
00:36:36,336 --> 00:36:37,636
Well, we can do that, too.


741
00:36:38,336 --> 00:36:41,006
And to show you that, I'm
going to actually switch


742
00:36:41,006 --> 00:36:48,146
over to my other computer
here, and actually [inaudible]


743
00:36:48,586 --> 00:36:51,976
that demo with the First
Launch Experience demo.


744
00:36:52,576 --> 00:36:55,656
So, for those of you who
are extremely perceptive,


745
00:36:56,136 --> 00:36:59,586
you might notice that up here
in the corner I'm not connected


746
00:36:59,586 --> 00:37:02,356
to Wi-Fi, and those
of you who are


747
00:37:02,356 --> 00:37:04,646
in the front rows
can probably see


748
00:37:04,646 --> 00:37:07,126
that I'm waving Ethernet
cable at you.


749
00:37:07,426 --> 00:37:09,816
This laptop is not
connected to the network


750
00:37:09,816 --> 00:37:11,546
and has not been
connected to the network


751
00:37:11,956 --> 00:37:14,876
since I airdropped
my project on to it.


752
00:37:14,926 --> 00:37:18,976
So this is your canonical
first launch situation.


753
00:37:19,636 --> 00:37:23,766
The application has never seen
the network, but there is data


754
00:37:23,766 --> 00:37:25,096
in the cloud out there.


755
00:37:25,356 --> 00:37:26,196
So how does this work?


756
00:37:26,976 --> 00:37:32,306
Well, we need to run my
application and it comes up


757
00:37:32,306 --> 00:37:34,236
and as we expect, it's empty.


758
00:37:34,896 --> 00:37:36,336
We're not attached to the cloud,


759
00:37:36,336 --> 00:37:43,626
no reason there should
be data there.


760
00:37:43,816 --> 00:37:45,726
Create an offline note.


761
00:37:46,746 --> 00:37:48,356
OK? It's a note.


762
00:37:49,106 --> 00:37:53,646
And then I'm going to come
into system preferences,


763
00:37:58,856 --> 00:38:04,506
but first I'm going to find
my Ethernet cable and plug


764
00:38:04,506 --> 00:38:10,236
in my Ethernet cable and log in.


765
00:38:11,516 --> 00:38:25,256
[ Pause ]


766
00:38:25,756 --> 00:38:28,786
I don't care.


767
00:38:28,786 --> 00:38:29,516
I don't care.


768
00:38:30,096 --> 00:38:31,806
I don't care [laughter].


769
00:38:32,396 --> 00:38:36,526
Do show me documents and data.


770
00:38:37,066 --> 00:38:41,966
Let's see.


771
00:38:42,196 --> 00:38:47,676
And it looks like something
has gone wrong, of course,


772
00:38:49,036 --> 00:38:52,426
because something
would have to go wrong.


773
00:38:52,636 --> 00:38:54,266
Oh well. You could see
that we actually --


774
00:38:54,266 --> 00:38:55,596
oh, I see what's happened.


775
00:38:55,596 --> 00:38:57,716
We're blocking waiting for
the initial sync to happen.


776
00:38:59,356 --> 00:39:03,016
This is the log you'll see
when Core Data tries to go out


777
00:39:03,016 --> 00:39:09,836
and connect to the iCloud
account, will basically have


778
00:39:09,836 --> 00:39:11,536
to block as we sync data in.


779
00:39:12,116 --> 00:39:16,516
And eventually because,
you know,


780
00:39:16,516 --> 00:39:18,026
you guys are probably
hammering the network


781
00:39:18,026 --> 00:39:22,346
and that took a little while,
we come back and we say, "OK.


782
00:39:22,346 --> 00:39:24,016
Now we're not using the
local storage anymore.


783
00:39:24,016 --> 00:39:28,766
But you can see that offline
note I created is still there.


784
00:39:28,966 --> 00:39:32,146
So, yes, this is what
we've been working on.


785
00:39:32,146 --> 00:39:35,296
This is how we've been trying to
make your developer experience


786
00:39:35,296 --> 00:39:39,066
with iCloud and your customer's
experience while using iCloud a


787
00:39:39,066 --> 00:39:39,796
lot easier.


788
00:39:40,296 --> 00:39:44,376
You've seen asynchronous
setup, it worked.


789
00:39:44,376 --> 00:39:47,586
You've seen account transitions
to and fro and you've seen,


790
00:39:47,586 --> 00:39:49,986
you know, how you might
go about debugging issues


791
00:39:49,986 --> 00:39:52,726
that you're seeing with
a Core Data application.


792
00:39:53,386 --> 00:39:55,396
And at this point I'm going
to bring my manager, Ben,


793
00:39:55,396 --> 00:39:59,166
on stage to talk to
you about the changes


794
00:39:59,166 --> 00:40:01,936
that we've been making to
the Core Data SQLite store.


795
00:40:03,516 --> 00:40:09,526
[ Applause ]


796
00:40:10,026 --> 00:40:10,236
>> Ben Trumbull: Great.


797
00:40:10,606 --> 00:40:11,416
Thank you very much, Melissa.


798
00:40:11,416 --> 00:40:13,176
Good morning, everyone.


799
00:40:14,366 --> 00:40:16,286
So I'd like to talk to
you a little bit today


800
00:40:16,286 --> 00:40:17,676
about the changes we've made


801
00:40:17,676 --> 00:40:20,696
to some interest structure
items underneath it covers here


802
00:40:20,696 --> 00:40:23,236
with the Core Data and the
SQLite store, and there's one


803
00:40:23,236 --> 00:40:26,586
in particularly, which is we've
changed the default journaling


804
00:40:26,586 --> 00:40:28,916
mode that Core Data is
using with the SQLite store.


805
00:40:29,446 --> 00:40:32,596
And this change is going
to be active for every app


806
00:40:32,646 --> 00:40:36,186
that rebuilds against
iOS 7 and Mac OS X 10.9.


807
00:40:36,546 --> 00:40:37,876
Now just to sort of recap,


808
00:40:38,276 --> 00:40:41,046
we've been using the original
SQLite journaling mode,


809
00:40:41,046 --> 00:40:44,686
the rollback journaling for
years now -- since about 2004,


810
00:40:45,006 --> 00:40:47,806
and we're switching over
to the write-ahead logging


811
00:40:47,806 --> 00:40:48,256
journal mode.


812
00:40:48,886 --> 00:40:51,386
So this is going to be something
that apps need to accommodate.


813
00:40:51,726 --> 00:40:55,956
So the difference is that
in rollback journaling,


814
00:40:57,336 --> 00:41:00,836
SQLite copies the original pages
out of the main database file


815
00:41:00,836 --> 00:41:04,136
into a file on the side just
in case something goes wrong


816
00:41:04,136 --> 00:41:07,006
with the transaction, and then
it updates the main database


817
00:41:07,006 --> 00:41:08,236
file directly in place.


818
00:41:08,886 --> 00:41:11,666
And when it's done, in
order to do the commit,


819
00:41:11,666 --> 00:41:14,726
it just deletes the
journal file.


820
00:41:15,526 --> 00:41:16,526
For write-ahead logging,


821
00:41:16,526 --> 00:41:18,836
it actually leaves the
main database file alone


822
00:41:18,836 --> 00:41:22,406
and it just keeps appending
transactions to this WAL file,


823
00:41:23,026 --> 00:41:25,486
and it uses the shared
memory file to keep track


824
00:41:25,486 --> 00:41:27,626
of which page it --
the most recent copies


825
00:41:27,626 --> 00:41:28,856
of each individual pages.


826
00:41:29,246 --> 00:41:32,486
And then once you've aggregated
enough [inaudible] together,


827
00:41:32,706 --> 00:41:35,786
a series of transactions,
several megabytes of data,


828
00:41:35,966 --> 00:41:38,146
it'll perform a checkpoint
operation automatically


829
00:41:38,296 --> 00:41:41,216
to merge the WAL file back
into the main database file.


830
00:41:42,286 --> 00:41:46,066
So, to give you a little
diagram of what exactly is going


831
00:41:46,066 --> 00:41:48,776
on here, generally, as you're
going along with the SQLite


832
00:41:49,156 --> 00:41:52,576
in the rollback mode, you'll
only see the main database file.


833
00:41:53,616 --> 00:41:55,326
But, when you start
a transaction,


834
00:41:56,226 --> 00:41:59,306
you'll end up with this
intermediary-journal file


835
00:41:59,466 --> 00:42:00,966
floating alongside of it.


836
00:42:01,346 --> 00:42:05,306
And then when you commit the
transaction, it'll go through


837
00:42:05,306 --> 00:42:12,396
and basically delete
the journal file.


838
00:42:12,756 --> 00:42:15,136
In WAL mode, you're going
to end up having all three


839
00:42:15,136 --> 00:42:17,976
of these files around almost
all of the time, and this is one


840
00:42:17,976 --> 00:42:20,536
of the behavioral changes
that you'll need to sort


841
00:42:20,536 --> 00:42:21,846
of accommodate yourself.


842
00:42:23,036 --> 00:42:26,296
So what ends up happening is
when you begin the transaction,


843
00:42:27,526 --> 00:42:30,396
it'll start appending these
transactions to the WAL file.


844
00:42:30,776 --> 00:42:33,496
And unlike delete mode,
when you come through


845
00:42:33,496 --> 00:42:34,866
and you commit the transaction,


846
00:42:35,256 --> 00:42:37,206
it actually does almost
no additional work,


847
00:42:37,616 --> 00:42:40,856
so the transaction stays
appended to the WAL file.


848
00:42:41,666 --> 00:42:44,466
And then, once you've aggregated
several megabytes of data


849
00:42:44,466 --> 00:42:46,446
in the WAL file,
it'll come through


850
00:42:46,446 --> 00:42:48,036
and then perform a
checkpoint operation.


851
00:42:48,576 --> 00:42:51,696
And the checkpoint operation
will merge the WAL file back


852
00:42:51,696 --> 00:42:52,866
into the main database file.


853
00:42:53,386 --> 00:42:57,626
And then you may end up
sporadically in a place


854
00:42:57,626 --> 00:42:59,836
where there is no WAL file, the
WAL file is being truncated,


855
00:42:59,836 --> 00:43:02,306
but that's going to be a fairly
transient state of affairs,


856
00:43:02,506 --> 00:43:04,366
and generally you're
going to see in WAL mode


857
00:43:04,366 --> 00:43:09,056
that you have all
three of these files.


858
00:43:09,446 --> 00:43:12,696
So, the reasons why
we're doing this is


859
00:43:12,696 --> 00:43:14,996
that on the consumer grade
hardware we've experienced,


860
00:43:15,326 --> 00:43:16,656
there have been some
difficulties


861
00:43:16,656 --> 00:43:18,866
in getting the level of
reliability that we really want


862
00:43:18,946 --> 00:43:21,326
to have across kernel
panics, and power loss,


863
00:43:21,326 --> 00:43:24,196
and some very severe
failure modes,


864
00:43:24,646 --> 00:43:26,366
and updating the
main database file


865
00:43:26,366 --> 00:43:29,446
in place has been somewhat
difficult to manage.


866
00:43:29,926 --> 00:43:32,836
So under WAL mode --
because that's not happening,


867
00:43:33,076 --> 00:43:37,496
we're able to do a more
expensive sync operation that's


868
00:43:37,596 --> 00:43:40,196
basically being managed
by the WAL


869
00:43:40,196 --> 00:43:43,316
and the checkpoint
aggregating several megabytes


870
00:43:43,316 --> 00:43:45,026
of work together.


871
00:43:45,216 --> 00:43:47,666
We also see some very
substantial performance


872
00:43:47,666 --> 00:43:50,076
improvements because
we're doing fewer syncs.


873
00:43:50,396 --> 00:43:54,086
There isn't any actual
syncing going on in WAL mode


874
00:43:54,086 --> 00:43:56,116
with the individual
commits, right?


875
00:43:56,116 --> 00:43:58,966
So it's just appending these
things to the WAL file.


876
00:43:59,346 --> 00:44:01,666
And this has actually been
a pretty big difference


877
00:44:01,716 --> 00:44:03,786
on [inaudible] devices and iOS.


878
00:44:04,976 --> 00:44:08,186
And finally, then we see
some improved concurrency.


879
00:44:08,186 --> 00:44:10,096
Under WAL mode, it's possible


880
00:44:10,096 --> 00:44:13,306
to have multiple readers going
concurrently with the writer.


881
00:44:13,796 --> 00:44:16,496
So, I'm going to talk
about this in a second,


882
00:44:16,746 --> 00:44:18,626
but it's actually much better


883
00:44:18,626 --> 00:44:21,876
than the standard
reader/writer lock model


884
00:44:21,876 --> 00:44:23,196
that rollback journaling uses.


885
00:44:24,016 --> 00:44:25,916
And we've adopted this
internally at Apple


886
00:44:25,916 --> 00:44:28,426
across the system and it's
seen some great benefits,


887
00:44:28,426 --> 00:44:30,846
so that's part of the
motivation of rolling this out.


888
00:44:31,936 --> 00:44:34,466
So WAL databases support --


889
00:44:34,466 --> 00:44:37,246
or write going concurrently
with the readers as opposed


890
00:44:37,246 --> 00:44:39,176
to blocking out readers
the way it does


891
00:44:39,176 --> 00:44:40,216
in the traditional journaling.


892
00:44:41,176 --> 00:44:43,456
Now for Core Data itself,


893
00:44:43,636 --> 00:44:46,786
NSPersistentStoreCoordinator
still serializes each individual


894
00:44:46,786 --> 00:44:47,686
fetch and save.


895
00:44:47,686 --> 00:44:51,776
So to maximize concurrency using
WAL journaling within Core Data,


896
00:44:51,776 --> 00:44:53,896
you're going to need to
have two Core Data stacks.


897
00:44:55,596 --> 00:45:00,556
So for leveraging concurrency,
you have this SQLite file


898
00:45:00,556 --> 00:45:02,496
that you're sharing between
multiple coordinators;


899
00:45:03,256 --> 00:45:05,716
and you'll set up an
additional coordinator


900
00:45:05,716 --> 00:45:08,356
and managed object context
for each of these types


901
00:45:08,356 --> 00:45:11,116
of operations and they
can both be pointed


902
00:45:11,116 --> 00:45:12,446
at the same SQLite store.


903
00:45:12,856 --> 00:45:16,086
And with this kind of setup you
have, you can basically have one


904
00:45:16,086 --> 00:45:19,656
of these coordinators doing
reads while another one is


905
00:45:20,386 --> 00:45:20,976
doing writes.


906
00:45:22,546 --> 00:45:24,256
Now when you're using
multiple coordinators,


907
00:45:24,256 --> 00:45:26,816
you can't really pass
any objects between them,


908
00:45:26,886 --> 00:45:29,816
so there is some friction there,
and this includes object IDs.


909
00:45:29,906 --> 00:45:31,146
So if you want to
pass references


910
00:45:31,146 --> 00:45:32,446
between these two stacks,


911
00:45:32,846 --> 00:45:34,606
you'll need to use the
URI representation.


912
00:45:36,216 --> 00:45:37,856
Nevertheless, this
is actually excellent


913
00:45:37,856 --> 00:45:39,186
for doing background imports


914
00:45:39,576 --> 00:45:42,396
where you have a very segregated
stack that's sort of siloed away


915
00:45:42,396 --> 00:45:44,206
from the main UI and
everything else you're doing.


916
00:45:45,446 --> 00:45:48,716
You can do importing, all kinds
of background batch changes,


917
00:45:48,786 --> 00:45:51,556
and stuff like that, and
it allows the UI thread


918
00:45:51,556 --> 00:45:54,006
to remain unblocked and to do
a lot of aggressive reading


919
00:45:54,006 --> 00:45:56,276
or faulting and fulfill the UI


920
00:45:56,276 --> 00:45:59,426
and the main thread while you're
doing a fairly substantial write


921
00:45:59,426 --> 00:46:00,486
operation in the background.


922
00:46:00,486 --> 00:46:03,196
So this is particularly
useful for responsiveness


923
00:46:03,196 --> 00:46:05,046
around launch time
where you might want


924
00:46:05,046 --> 00:46:07,316
to be importing changes
from some other data source


925
00:46:07,596 --> 00:46:13,426
around the time the user
starts up the app again.


926
00:46:13,596 --> 00:46:16,256
Now, there are some sharp edges
using the WAL database file,


927
00:46:16,256 --> 00:46:18,686
but we don't recommend
this for any kind of file


928
00:46:18,686 --> 00:46:20,236
that you're going to be
moving around yourself.


929
00:46:20,236 --> 00:46:22,496
So if you're using file
system operations now


930
00:46:23,036 --> 00:46:27,046
on the database file, then
WAL mode is probably not going


931
00:46:27,046 --> 00:46:28,916
to be very compatible
with the code you have


932
00:46:28,916 --> 00:46:31,066
because there are going
to be two additional files


933
00:46:31,226 --> 00:46:33,336
that your code probably
isn't prepared for.


934
00:46:34,196 --> 00:46:36,146
And we don't recommend
this for read-only files,


935
00:46:36,146 --> 00:46:38,766
so there's been some
issues there


936
00:46:38,766 --> 00:46:41,446
and this is primarily
useful for library files


937
00:46:41,616 --> 00:46:43,386
that you're going to be writing.


938
00:46:43,826 --> 00:46:45,916
And finally, we don't
recommend this obviously


939
00:46:45,916 --> 00:46:47,966
for a document format
that you already have


940
00:46:48,146 --> 00:46:50,876
if you have a standalone SQLite
file as part of your document.


941
00:46:51,446 --> 00:46:52,716
Now, you can put a wall


942
00:46:52,716 --> 00:46:55,696
of database inside a document
package, and that's fine,


943
00:46:56,016 --> 00:46:58,246
but a lot of people
we've seen have sort


944
00:46:58,246 --> 00:47:01,586
of free standing SQLite files
as their documents and some


945
00:47:01,586 --> 00:47:03,056
of them is running
to some challenges


946
00:47:03,336 --> 00:47:06,696
where the journal file itself
is also outside of any kind


947
00:47:06,696 --> 00:47:10,056
of wrapper package, so that can
be a little bit of a friction.


948
00:47:10,056 --> 00:47:12,516
We definitely recommend that
if you're going to use SQLite


949
00:47:12,516 --> 00:47:15,276
for a document file, you put
it inside a package wrapper.


950
00:47:16,306 --> 00:47:18,276
And something else to keep


951
00:47:18,276 --> 00:47:20,776
in mind is the WAL journaling
really only goes back


952
00:47:20,776 --> 00:47:22,326
as far as MAC OS X 10.7.


953
00:47:23,356 --> 00:47:26,176
So, if you need to communicate
these files persistently


954
00:47:26,176 --> 00:47:30,056
with older systems, you'll need
to use the rollback journaling.


955
00:47:30,456 --> 00:47:33,716
So to get back to
rollback journaling,


956
00:47:34,316 --> 00:47:37,586
the SQL command is
fragmentjournalmode=delete,


957
00:47:37,996 --> 00:47:40,326
and to set this in Core Data,


958
00:47:40,326 --> 00:47:42,336
you just set the
options dictionary


959
00:47:42,416 --> 00:47:44,286
that you passed
addPersistentStore with type,


960
00:47:44,616 --> 00:47:47,746
and you just pass in this
pragma on the journal mode


961
00:47:47,846 --> 00:47:48,966
to set it to the delete mode.


962
00:47:49,386 --> 00:47:50,256
And this will get you back


963
00:47:50,256 --> 00:47:52,746
to the same behavior you
had in previous releases.


964
00:47:57,336 --> 00:48:01,046
Now, some general caveats is you
really shouldn't be using any


965
00:48:01,046 --> 00:48:03,046
file system routines directly


966
00:48:03,046 --> 00:48:05,936
against any open SQLite database
file and we've seen a lot


967
00:48:05,936 --> 00:48:08,386
of people try to try
to like delete files


968
00:48:08,386 --> 00:48:09,976
or maybe they're trying
to make backup copies


969
00:48:09,976 --> 00:48:10,626
or something like that.


970
00:48:10,976 --> 00:48:14,186
And this really messes
up file locks and a bunch


971
00:48:14,186 --> 00:48:15,756
of other things that
are going under the hood


972
00:48:15,956 --> 00:48:19,106
and at its core using
NSFileManager


973
00:48:19,106 --> 00:48:20,736
or at the POSIX file routines,


974
00:48:21,036 --> 00:48:22,916
it's going to be
bypassing the SQLite API.


975
00:48:23,486 --> 00:48:26,966
So if the files open, we
really strongly discourage this


976
00:48:26,966 --> 00:48:28,466
and you have gotten
away with this


977
00:48:28,466 --> 00:48:31,596
in the old classic
delete mode for journaling


978
00:48:31,886 --> 00:48:34,046
but it's not going to work out
very well under WAL journaling.


979
00:48:35,206 --> 00:48:37,746
Also for network file
systems, we've seen a bunch


980
00:48:37,746 --> 00:48:39,396
of people try and
they keep trying.


981
00:48:39,756 --> 00:48:43,036
But at the end of the day
-- at the end of the day,


982
00:48:43,036 --> 00:48:47,006
the caching that's going on
in the kernel is not going


983
00:48:47,006 --> 00:48:49,746
to be coherent between multiple
different physical machines.


984
00:48:49,746 --> 00:48:53,306
Right? So it's OK to
have an SQLite file


985
00:48:53,306 --> 00:48:55,016
in a network home
directory that's being used


986
00:48:55,016 --> 00:48:58,136
by a single machine,
but sharing these files


987
00:48:58,136 --> 00:49:01,956
across multiple different
machines simultaneously is not


988
00:49:01,956 --> 00:49:02,946
going to end very well.


989
00:49:04,006 --> 00:49:06,966
And finally, a lot of
people try to change


990
00:49:06,966 --> 00:49:09,536
for performance reasons
the synchronous pragma,


991
00:49:10,946 --> 00:49:13,996
and especially under WAL mode,
we've customized this behavior


992
00:49:13,996 --> 00:49:15,596
for Apple's build of SQLite,


993
00:49:15,656 --> 00:49:18,576
so please just don't
change it at all.


994
00:49:19,746 --> 00:49:21,826
And if you want to continue
doing whatever it is you're


995
00:49:21,826 --> 00:49:25,766
doing with the rollback
journaling, that's fine.


996
00:49:26,316 --> 00:49:28,506
And as part of some
of this other work,


997
00:49:28,506 --> 00:49:30,266
there are general
infrastructure changes going


998
00:49:30,266 --> 00:49:33,666
on with the SQLite store,
in particular to integrate


999
00:49:33,846 --> 00:49:37,536
with the power and I/O
changes, the throttling changes


1000
00:49:37,536 --> 00:49:39,116
that have been talked
about earlier in the week


1001
00:49:39,326 --> 00:49:41,976
to improve battery
life on Mac OS X.


1002
00:49:42,096 --> 00:49:46,026
So, we've done some extra
work in Core Data to integrate


1003
00:49:46,026 --> 00:49:51,056
with I/O throttling and improve
the amount of battery time


1004
00:49:51,096 --> 00:49:55,236
that SQLite is using if you have
multiple contending connections.


1005
00:49:55,756 --> 00:49:59,416
And finally, there's also a
guarded file descriptor concept


1006
00:49:59,416 --> 00:50:00,176
that's being used.


1007
00:50:00,176 --> 00:50:02,436
We're not going to go
into this very much,


1008
00:50:02,436 --> 00:50:05,586
but you should be aware that
it exists and SQLite is going


1009
00:50:05,586 --> 00:50:08,716
to be making efforts to
prevent accidentally corrupting


1010
00:50:08,716 --> 00:50:11,006
databases by smashing
the file descriptor


1011
00:50:11,196 --> 00:50:13,126
by closing a file
descriptor that doesn't belong


1012
00:50:13,126 --> 00:50:14,376
to you and things like that.


1013
00:50:14,726 --> 00:50:18,096
So that's available on
Mac OS X 10.9 and iOS.


1014
00:50:19,486 --> 00:50:20,486
And so that's most


1015
00:50:20,486 --> 00:50:23,196
of the infrastructure
we've done this release,


1016
00:50:23,926 --> 00:50:26,256
and for more information,
you can contact Dave DeLong,


1017
00:50:26,656 --> 00:50:28,776
or send your email to
the Cocoa feedback group,


1018
00:50:28,776 --> 00:50:31,626
and we have documentation
in all the usual places


1019
00:50:31,626 --> 00:50:34,516
and we have some
related sessions.


1020
00:50:34,626 --> 00:50:37,536
Tim Isted is going to be doing a
Core Data performance talk this


1021
00:50:37,536 --> 00:50:40,756
afternoon and there
will also be a --


1022
00:50:40,756 --> 00:50:43,726
hidden gems in Cocoa and
Cocoa Touch on Friday.


1023
00:50:43,726 --> 00:50:44,956
Thank you very much.


1024
00:50:45,516 --> 00:50:47,516
[Applause]


1025
00:50:48,016 --> 00:50:58,146
[Silence]

