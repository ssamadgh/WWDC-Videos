1
00:00:07,516 --> 00:00:19,500
[ Music ]


2
00:00:32,516 --> 00:00:39,196
[ Applause ]


3
00:00:39,696 --> 00:00:40,306
>> Good afternoon.


4
00:00:40,786 --> 00:00:43,236
Welcome to "iMessage Apps
and Stickers, Part 2".


5
00:00:44,006 --> 00:00:46,776
My name's Alex and with me today
helping present is Stephen.


6
00:00:46,776 --> 00:00:47,796
He's going to do the demos.


7
00:00:49,226 --> 00:00:51,526
So, in the first part
of this talk, Bhaskar


8
00:00:51,526 --> 00:00:54,876
and Lily introduced
stickers, sticker packs,


9
00:00:54,966 --> 00:00:56,876
and simple iMessage apps focused


10
00:00:56,946 --> 00:00:59,386
on providing sticker
data to messages.


11
00:01:01,976 --> 00:01:05,105
Today we're going to talk
about interactive messages


12
00:01:05,146 --> 00:01:07,376
and we're going to dive
deeper into the iMessage apps


13
00:01:07,376 --> 00:01:08,356
and the Messages framework.


14
00:01:10,216 --> 00:01:12,526
So, what are interactive
messages?


15
00:01:13,776 --> 00:01:15,966
Well, you can see one
here behind me highlighted


16
00:01:15,966 --> 00:01:17,146
in the Messages transcript.


17
00:01:18,926 --> 00:01:21,826
This is a special type of
message bubble provided


18
00:01:21,826 --> 00:01:25,926
by a Messages extension and
you can see that's shown here


19
00:01:25,926 --> 00:01:27,226
in the screenshot highlighted.


20
00:01:29,256 --> 00:01:34,836
Messages extensions
allow your users


21
00:01:34,836 --> 00:01:38,776
to compose interactive messages
and then they allow them


22
00:01:38,776 --> 00:01:41,766
to insert them on the
input field, as shown here.


23
00:01:43,006 --> 00:01:48,186
They also allow a user to
reply to an interactive message


24
00:01:48,186 --> 00:01:50,976
by tapping one in the transcript


25
00:01:51,366 --> 00:01:54,046
and in this point an extension
will be launched full screen,


26
00:01:54,176 --> 00:01:54,816
as shown here.


27
00:01:54,816 --> 00:02:00,866
The user can interact with this
extension to compose a reply.


28
00:02:00,866 --> 00:02:05,866
Your extension can then
insert this new content


29
00:02:06,806 --> 00:02:08,895
into the messages and it will
show here on the input field


30
00:02:08,895 --> 00:02:11,656
and the user can send it.


31
00:02:12,056 --> 00:02:14,316
So, now we're going to
welcome Stephen to the stage


32
00:02:14,316 --> 00:02:16,196
and he's going to show
you our sample app running


33
00:02:16,196 --> 00:02:16,956
in the simulator.


34
00:02:18,516 --> 00:02:23,500
[ Applause ]


35
00:02:26,266 --> 00:02:28,866
>> I'm going to show you a
completed iMessage application


36
00:02:29,306 --> 00:02:31,916
that I've written to demo all
of the APIs that we're going


37
00:02:31,916 --> 00:02:32,906
to learn in today's session.


38
00:02:33,626 --> 00:02:35,776
If you look here in the
simulator, you'll see the icon


39
00:02:35,976 --> 00:02:37,506
from my iMessage app
called Ice Cream.


40
00:02:38,856 --> 00:02:42,086
When I tap this, my iMessage
app is revealed here running


41
00:02:42,136 --> 00:02:43,576
within the context of Messages.


42
00:02:44,486 --> 00:02:47,506
All of the UI with this
pink background is code--


43
00:02:47,686 --> 00:02:49,336
is UI provided by my extension.


44
00:02:50,696 --> 00:02:53,266
Now, my iMessage app is
a collaborative ice cream


45
00:02:53,266 --> 00:02:56,486
sticker-building application
and here you see a history


46
00:02:56,486 --> 00:02:58,136
of ice cream stickers
that I've already built.


47
00:02:59,296 --> 00:03:03,946
When I tap this Add button here,
my iMessage app will expand


48
00:03:03,946 --> 00:03:07,236
to take the full screen and I'll
have this nice sticker-building


49
00:03:07,926 --> 00:03:08,546
experience here.


50
00:03:09,946 --> 00:03:13,236
If I choose an ice cream cone,
my iMessage app dismisses


51
00:03:13,606 --> 00:03:15,296
and stages an interactive
message


52
00:03:15,296 --> 00:03:16,676
in the input field
for the user to send.


53
00:03:19,236 --> 00:03:23,126
Now, on iOS 10, we've
added support for you to--


54
00:03:23,466 --> 00:03:26,206
for you to develop and test
your iMessage apps right


55
00:03:26,206 --> 00:03:26,966
within the simulator.


56
00:03:27,916 --> 00:03:29,936
If you go back to the
conversation list here,


57
00:03:30,596 --> 00:03:33,516
you'll see two ends of a
simulated conversation.


58
00:03:35,186 --> 00:03:38,506
Tapping the second one shows
the simulated received message.


59
00:03:40,286 --> 00:03:44,086
When I tap this, my iMessage app
is launched with the next step


60
00:03:44,086 --> 00:03:45,346
in the ice cream
building process.


61
00:03:46,146 --> 00:03:47,966
I can select my favorite
ice cream, mint chip,


62
00:03:49,606 --> 00:03:52,076
stage that message, and send it.


63
00:03:54,016 --> 00:03:57,086
Now, if I go back to that first
conversation or the first end


64
00:03:57,086 --> 00:03:59,826
of the conversation
and tap this message


65
00:04:00,986 --> 00:04:03,276
and select the final part of
the ice cream, my topping,


66
00:04:05,486 --> 00:04:08,766
and send it, I now have
a completed ice cream


67
00:04:09,336 --> 00:04:09,906
that I've built.


68
00:04:10,536 --> 00:04:13,526
In fact, now when I go
back into my iMessage app,


69
00:04:14,686 --> 00:04:17,536
you'll see that it appears
here in my ice cream history


70
00:04:17,805 --> 00:04:20,935
as a sticker that I can then
apply anywhere I want to.


71
00:04:22,236 --> 00:04:23,756
And that's a quick
sample of what you can do


72
00:04:23,756 --> 00:04:24,756
with interactive messages.


73
00:04:25,186 --> 00:04:26,026
And now back to Alex.


74
00:04:27,516 --> 00:04:29,546
[ Applause ]


75
00:04:30,046 --> 00:04:30,596
>> Thanks, Stephen.


76
00:04:31,906 --> 00:04:34,736
That was just a great
quick demo of some


77
00:04:34,736 --> 00:04:35,956
of the features of
iMessage apps.


78
00:04:36,986 --> 00:04:41,426
So, let's talk about how we can
accomplish this with our APIs.


79
00:04:41,976 --> 00:04:43,326
I'm going to go through
four things.


80
00:04:44,466 --> 00:04:47,266
One of them-- so I'm going
to give you an overview


81
00:04:47,266 --> 00:04:50,246
of the API followed by
number two, a little look


82
00:04:50,246 --> 00:04:51,706
into the extension lifecycle.


83
00:04:52,696 --> 00:04:56,546
Number three, we're
going to talk about how


84
00:04:56,546 --> 00:04:58,686
to compose a message
using our APIs.


85
00:04:59,156 --> 00:05:01,476
Number four, we're going
to talk a little bit


86
00:05:01,476 --> 00:05:02,816
about how the message is sent.


87
00:05:04,206 --> 00:05:06,736
So, starting with
the API overview.


88
00:05:08,796 --> 00:05:10,806
We have our iMessage
app running here,


89
00:05:10,806 --> 00:05:15,126
shown in compact presentation
mode and this is an extension.


90
00:05:15,696 --> 00:05:17,436
Extensions have a
principal class


91
00:05:17,476 --> 00:05:19,946
and for iMessage apps
this will be a subclass


92
00:05:19,946 --> 00:05:22,236
of the
MSMessagesAppViewController.


93
00:05:22,236 --> 00:05:23,836
Now, ultimately,


94
00:05:23,836 --> 00:05:26,516
the MSMessagesAppViewController
is a subclass


95
00:05:26,516 --> 00:05:29,436
of UIViewController, so it's
providing your extension's UI.


96
00:05:29,436 --> 00:05:34,436
Above the extension, we
have the conversation


97
00:05:35,026 --> 00:05:37,376
and specifically the
conversation transcript.


98
00:05:38,456 --> 00:05:42,136
This is represented in our API
by the MSConversation object.


99
00:05:43,676 --> 00:05:45,916
And finally we have
a message itself.


100
00:05:45,916 --> 00:05:47,696
We have this bubble
here in the transcript


101
00:05:48,056 --> 00:05:51,196
and this is represented
by the MSMessage class.


102
00:05:52,106 --> 00:05:55,096
Also, you'll note in this slide
we have another two classes


103
00:05:55,096 --> 00:05:58,536
shown, the MSSession and
MSMessageTemplateLayout.


104
00:05:58,836 --> 00:06:01,426
These provide some control
over how the message is sent


105
00:06:01,726 --> 00:06:03,736
and how the message
appears in the transcript.


106
00:06:05,656 --> 00:06:10,406
So, let's move on and talk about
iMessage extension lifecycle.


107
00:06:10,406 --> 00:06:17,086
Here we have a timeline and
when an extension is launched,


108
00:06:18,126 --> 00:06:22,466
perhaps from the app drawer,
we're going to launch a process.


109
00:06:25,346 --> 00:06:28,246
Shortly afterwards, we'll
call didBecomeActive


110
00:06:28,276 --> 00:06:30,176
with conversation and
we're going to pass


111
00:06:30,176 --> 00:06:31,316
in a conversation object


112
00:06:31,316 --> 00:06:33,896
that represents the conversation
your app is running within.


113
00:06:33,896 --> 00:06:37,476
And since this is a
UIViewController subclass,


114
00:06:37,476 --> 00:06:40,816
we'll also call will--
viewWillAppear and viewDidAppear


115
00:06:41,906 --> 00:06:43,756
as your extension
appears onscreen.


116
00:06:45,756 --> 00:06:47,666
Now, what happens
when your app remove--


117
00:06:47,666 --> 00:06:48,696
is removed from the screen?


118
00:06:48,696 --> 00:06:51,096
We're going to call
this resigning active


119
00:06:51,096 --> 00:06:54,646
and what happens is first you
will receive viewWillDisappear,


120
00:06:55,286 --> 00:06:57,666
viewDidDisappear calls
on your principal class.


121
00:06:58,836 --> 00:07:01,086
This is followed by
a viewWill-- sorry--


122
00:07:01,326 --> 00:07:01,926
this is followed


123
00:07:01,926 --> 00:07:04,716
by a willResignActive
call with conversation.


124
00:07:05,116 --> 00:07:08,016
At this point, we're about
to teardown the connection


125
00:07:08,016 --> 00:07:10,206
between Messages
and your extension.


126
00:07:10,976 --> 00:07:13,076
So, this is the last time
you get to do anything


127
00:07:13,076 --> 00:07:14,016
with the conversation.


128
00:07:14,216 --> 00:07:17,466
And then at some point later
your process will be terminated


129
00:07:17,796 --> 00:07:20,786
and this-- just to stress-- is
because your process is built


130
00:07:20,786 --> 00:07:23,606
on extensions and extensions
are short-lived processes


131
00:07:23,606 --> 00:07:25,236
and they're terminated
aggressively.


132
00:07:26,396 --> 00:07:32,516
So, let's see now that we have
a process running and showing UI


133
00:07:32,516 --> 00:07:36,656
within Messages, your user is
going to interact with this UI


134
00:07:36,656 --> 00:07:38,556
and build a message and
let's see how we're going


135
00:07:38,556 --> 00:07:40,166
to deal with that in our API.


136
00:07:40,166 --> 00:07:41,856
Well, the first thing
you're going


137
00:07:41,856 --> 00:07:44,986
to do is create an MSMessage
object and we're going


138
00:07:44,986 --> 00:07:46,576
to set some properties
on that object.


139
00:07:47,096 --> 00:07:50,816
In this case, I'm
setting an https URL


140
00:07:50,816 --> 00:07:54,486
so the message is URL property
and I'm encoding some detail


141
00:07:54,486 --> 00:07:55,966
about the ice cream
that we're building


142
00:07:55,966 --> 00:07:57,796
in the query string of that URL.


143
00:07:57,796 --> 00:08:00,676
The only platform that is
able to generate iMessage--


144
00:08:00,936 --> 00:08:04,386
these messages is iOS, but
these messages will be sent


145
00:08:04,676 --> 00:08:06,386
to macOS and to watchOS.


146
00:08:08,106 --> 00:08:09,806
When they're delivered on
macOS, they'll be shown


147
00:08:09,806 --> 00:08:12,336
in full fidelity in the
conversation transcript


148
00:08:12,336 --> 00:08:15,986
and clicking on a message
in the transcript will try


149
00:08:15,986 --> 00:08:18,276
and get this URL and open
it in your web browser.


150
00:08:18,746 --> 00:08:23,586
So, if you provide an https URL
here, then your website is able


151
00:08:23,586 --> 00:08:27,286
to show-- should be able
to show some representation


152
00:08:27,286 --> 00:08:30,136
of the message for
users on macOS.


153
00:08:30,696 --> 00:08:32,846
Moving on, we have an
accessibility label


154
00:08:32,846 --> 00:08:33,466
property here.


155
00:08:33,966 --> 00:08:36,616
This is used by screen readers
when reading the transcript.


156
00:08:37,226 --> 00:08:39,126
So, I'm setting this
to a description


157
00:08:39,126 --> 00:08:41,176
of the message bubble
so that our users


158
00:08:41,176 --> 00:08:43,566
who use screen readers get
a great rich description


159
00:08:43,616 --> 00:08:46,766
of the bubble as it is
displayed in the transcript.


160
00:08:47,566 --> 00:08:50,836
And finally I'm going to talk
about-- we've got layout.


161
00:08:50,836 --> 00:08:54,576
And I'm going to talk about this
in a little bit more detail now.


162
00:08:55,156 --> 00:08:59,596
The layout object is how
we specify the appearance


163
00:09:00,116 --> 00:09:01,436
of a message in the transcript.


164
00:09:01,956 --> 00:09:03,426
Right now we only
have one layout


165
00:09:03,426 --> 00:09:05,766
and that's the
MSMessageTemplateLayout.


166
00:09:06,796 --> 00:09:08,246
We can set some properties
on this


167
00:09:08,246 --> 00:09:10,236
and this affects how
the bubble is built.


168
00:09:11,456 --> 00:09:13,596
So, right here we
have an image property


169
00:09:13,596 --> 00:09:16,626
and this takes a UI image
and it provides content


170
00:09:16,626 --> 00:09:18,036
for the area highlighted
onscreen.


171
00:09:19,626 --> 00:09:21,726
We also have a mediaFileURL
property.


172
00:09:22,376 --> 00:09:26,456
The mediaFileURL also provides
content for the same area


173
00:09:26,456 --> 00:09:29,566
as the image, but here you
can provide content that's not


174
00:09:29,566 --> 00:09:30,796
supported by UI image.


175
00:09:31,056 --> 00:09:33,806
For instance, you could provide
a URL to a local video file.


176
00:09:34,176 --> 00:09:36,386
A short video would be then
looped in the background


177
00:09:36,386 --> 00:09:38,056
of the message bubble
in the transcript.


178
00:09:38,656 --> 00:09:41,046
Let's take a second to
focus a little bit more


179
00:09:41,046 --> 00:09:42,026
on these two properties.


180
00:09:42,866 --> 00:09:46,176
We should note first
that if the image


181
00:09:46,396 --> 00:09:49,276
and the URL are both provided,
then the image is going


182
00:09:49,276 --> 00:09:51,266
to take precedence over the URL.


183
00:09:51,266 --> 00:09:56,256
We had some recommended--
recommendations for the size


184
00:09:56,256 --> 00:09:58,446
of the assets provided
in these properties.


185
00:09:59,166 --> 00:10:01,156
We're recommending that
you provide your assets


186
00:10:01,156 --> 00:10:03,646
at roughly 300 point
by 300 point.


187
00:10:04,116 --> 00:10:06,396
You can provide slightly
larger assets


188
00:10:06,396 --> 00:10:08,516
and slightly smaller assets
and I really encourage you


189
00:10:08,516 --> 00:10:11,956
to experiment with asset
sizes here in order


190
00:10:11,956 --> 00:10:14,946
to find what best suits
your app and your needs.


191
00:10:16,046 --> 00:10:19,616
All of these assets, as with
stickers, are provided at 3x


192
00:10:19,856 --> 00:10:23,376
and Messages will downsample
and downscale these images


193
00:10:23,376 --> 00:10:25,626
when they arrive on other
devices as appropriate


194
00:10:25,626 --> 00:10:28,416
for the screen resolution on
that-- on the receiving device.


195
00:10:28,996 --> 00:10:35,446
In the mediaFileURL, we support
PNG, JPEG, GIF, and video.


196
00:10:35,836 --> 00:10:37,736
When I say video,
what I mean here is


197
00:10:37,736 --> 00:10:39,976
that we support any
videos that can be played


198
00:10:39,976 --> 00:10:42,506
with our media player frameworks
and I'd like to refer you


199
00:10:42,506 --> 00:10:44,346
to the media player
framework documentation


200
00:10:44,346 --> 00:10:47,066
to find out more about this.


201
00:10:48,236 --> 00:10:49,496
The other thing that
we're going to do


202
00:10:49,496 --> 00:10:50,906
with this media is we're going


203
00:10:50,906 --> 00:10:52,646
to transcode the assets
when they're sent.


204
00:10:52,946 --> 00:10:54,336
This is in order
to optimize them


205
00:10:54,336 --> 00:10:55,826
for transfer over our networks.


206
00:10:56,386 --> 00:11:00,436
And finally I'd like
to encourage you


207
00:11:00,436 --> 00:11:02,986
to avoid rendering
text into this image.


208
00:11:04,376 --> 00:11:07,186
As I said, these images
are scaled down for display


209
00:11:07,186 --> 00:11:10,496
on devices with 1x and 2x
screens, yet we're asking you


210
00:11:10,496 --> 00:11:12,136
to provide them at 3x.


211
00:11:12,556 --> 00:11:14,286
If you were to render
text into this image,


212
00:11:14,286 --> 00:11:17,666
particularly small text, when
these images are scaled down,


213
00:11:17,666 --> 00:11:21,686
the text could be rendered
illegible, but you'll notice


214
00:11:21,686 --> 00:11:24,796
that we actually do show in this
example some text drawn on top


215
00:11:24,796 --> 00:11:27,946
of the image, so let's
talk about how this is done


216
00:11:28,126 --> 00:11:29,426
without degrading quality.


217
00:11:30,676 --> 00:11:34,586
The layout has some additional
properties over image--


218
00:11:34,586 --> 00:11:37,566
the two that provide images--
and these are text properties.


219
00:11:38,746 --> 00:11:42,906
They're transformatted with
the message and drawn natively


220
00:11:42,906 --> 00:11:45,656
on the receiving devices
so we can draw the text


221
00:11:46,146 --> 00:11:49,866
on the receiving devices as
crisply and cleanly as possible.


222
00:11:50,546 --> 00:11:52,976
We have here shown
the image title


223
00:11:52,976 --> 00:11:55,756
and this is text that's
drawn on top of the image


224
00:11:56,386 --> 00:11:57,586
in the lower left hand corner.


225
00:11:59,016 --> 00:12:02,476
We have an image subtitle that's
drawn again on top of the image,


226
00:12:02,596 --> 00:12:04,566
right below the image
title as shown.


227
00:12:04,566 --> 00:12:06,566
And we have these
caption properties


228
00:12:06,566 --> 00:12:09,406
and these are drawn below
the image in the caption bar.


229
00:12:09,476 --> 00:12:10,876
That's this gray area onscreen.


230
00:12:11,296 --> 00:12:16,996
So, we have caption,
trailing caption, subcaption,


231
00:12:17,046 --> 00:12:20,206
and trailing subcaption.


232
00:12:20,766 --> 00:12:29,786
Now, if you look at the caption
properties, it's also possible


233
00:12:29,786 --> 00:12:33,596
to omit these altogether
or set them all to nil.


234
00:12:34,466 --> 00:12:36,986
If you do that, then
you'll get a bubble


235
00:12:36,986 --> 00:12:38,926
that doesn't have the
caption bar at the bottom


236
00:12:38,996 --> 00:12:40,546
and it'll look something
more like this.


237
00:12:41,686 --> 00:12:43,896
And one last thing to
note on this slide.


238
00:12:44,746 --> 00:12:47,536
We have an icon in the top
left-hand corner of a bubble.


239
00:12:48,026 --> 00:12:50,786
This icon is provided and
drawn by Messages on top


240
00:12:50,786 --> 00:12:53,116
of your content and
this is always going


241
00:12:53,116 --> 00:12:57,886
to be the iMessage app icon of
the app that sent the message.


242
00:12:59,836 --> 00:13:03,116
So, let's move on now and talk
about how we send this message


243
00:13:03,116 --> 00:13:03,996
that we've constructed.


244
00:13:04,666 --> 00:13:08,426
To do that, we're going to need


245
00:13:08,426 --> 00:13:10,356
to get an MSConversation
instance.


246
00:13:10,856 --> 00:13:12,866
You can get this from
your principal class's


247
00:13:12,866 --> 00:13:14,066
active conversation.


248
00:13:15,316 --> 00:13:16,746
Once you have a conversation,


249
00:13:17,206 --> 00:13:18,716
you can call the
insert(message),


250
00:13:19,066 --> 00:13:21,916
pass the message you
constructed, and make sure


251
00:13:21,916 --> 00:13:23,526
that you handle any
errors that are returned.


252
00:13:24,756 --> 00:13:26,156
Doing this will cause
the message


253
00:13:26,156 --> 00:13:27,496
to appear in the input field.


254
00:13:28,166 --> 00:13:33,026
Of course, as mentioned
in the first talk,


255
00:13:33,026 --> 00:13:34,796
you can also send some
other types of data.


256
00:13:34,996 --> 00:13:39,056
We support sending
text, attachments,


257
00:13:39,626 --> 00:13:45,226
and of course stickers.


258
00:13:46,066 --> 00:13:48,876
Once you've got your
content on the input field,


259
00:13:48,876 --> 00:13:50,706
the user is able
to send the message


260
00:13:50,736 --> 00:13:53,176
by tapping the blue Send
button and I should note here


261
00:13:53,176 --> 00:13:54,656
that there's no way
for your extension


262
00:13:54,656 --> 00:13:56,756
to actually automatically
send a message


263
00:13:56,756 --> 00:13:59,186
and we always want the
user to have the final say


264
00:13:59,716 --> 00:14:01,516
as to what gets sent
to their friends.


265
00:14:02,126 --> 00:14:05,926
So, now I'd like to hand
you back over to Stephen


266
00:14:05,926 --> 00:14:07,996
who is going to show you
how we implement this


267
00:14:08,156 --> 00:14:09,396
in our sample project.


268
00:14:12,516 --> 00:14:17,056
[ Applause ]


269
00:14:17,556 --> 00:14:18,446
>> Thanks again, Alex.


270
00:14:19,526 --> 00:14:21,846
OK. I've taken the
sample iMessage app


271
00:14:21,896 --> 00:14:24,046
that I showed earlier in
the session and stripped it


272
00:14:24,046 --> 00:14:26,616
down to a very basic minimum
for our starting point.


273
00:14:27,416 --> 00:14:29,146
Here we still have our
history of ice cream stickers


274
00:14:29,146 --> 00:14:31,026
that have already been
built, but you'll notice


275
00:14:31,026 --> 00:14:33,426
that if I tap the Add
button, nothing happens.


276
00:14:34,156 --> 00:14:38,796
Here in Xcode, I have my
MSMessagesAppViewController


277
00:14:38,796 --> 00:14:39,976
subclass shown.


278
00:14:40,566 --> 00:14:42,806
I override the lifecycle
method did become active


279
00:14:42,806 --> 00:14:44,656
with conversation, call super,


280
00:14:45,086 --> 00:14:46,916
and then call present
child view controller


281
00:14:46,916 --> 00:14:48,316
which is a helper
method I've written


282
00:14:49,096 --> 00:14:51,856
which will instantiate an
ice cream history controller


283
00:14:52,886 --> 00:14:54,286
and add it as a child
view controller.


284
00:14:55,466 --> 00:14:56,536
And that's all I have so far.


285
00:14:58,366 --> 00:14:59,846
Now, what I'd like to do is


286
00:14:59,846 --> 00:15:02,656
when I tap this Add
button is start the


287
00:15:02,656 --> 00:15:03,856
sticker-building process.


288
00:15:05,006 --> 00:15:07,706
Now, this ice cream history
view controller has a delegate


289
00:15:07,706 --> 00:15:10,796
protocol and I have an extension
on my messages view controller


290
00:15:11,226 --> 00:15:12,416
which conforms to this delegate


291
00:15:12,416 --> 00:15:14,326
by implementing the method
historyViewController


292
00:15:14,516 --> 00:15:15,376
AddButtonTapped.


293
00:15:17,056 --> 00:15:19,976
This is where I'm going to
trigger my functionality


294
00:15:19,976 --> 00:15:22,536
and I'm going to also start


295
00:15:22,536 --> 00:15:26,796
by adding a helper method called
composeMessage for iceCream,


296
00:15:27,246 --> 00:15:29,856
which will take an ice cream
model object and will turn it


297
00:15:29,856 --> 00:15:32,696
into an MSMessage for me to
stage in my conversation.


298
00:15:34,146 --> 00:15:37,746
To do so, I'm going to create
an instance of URL components


299
00:15:38,176 --> 00:15:40,436
and set the query items
property of that URL components


300
00:15:40,436 --> 00:15:42,826
to be a query items
representation of my model.


301
00:15:44,236 --> 00:15:46,836
Next thing I'm going to
do is create an instance


302
00:15:46,836 --> 00:15:50,176
of MSMessageTemplateLayout and
set the image of that layout


303
00:15:50,426 --> 00:15:52,316
to be a rendered
version of my model.


304
00:15:53,306 --> 00:15:55,316
I also want to set a
caption for my message


305
00:15:56,056 --> 00:16:01,996
and I'll declare
my caption up here.


306
00:16:02,456 --> 00:16:04,606
Now I'm ready to create
my MSMessage object.


307
00:16:05,646 --> 00:16:09,776
I'll do so by declaring
an instance of MSMessage


308
00:16:10,206 --> 00:16:11,466
and set the URL property


309
00:16:11,466 --> 00:16:13,696
to be the URL representation
of my components.


310
00:16:14,556 --> 00:16:16,546
Then I'll set the layout
and the accessibility label.


311
00:16:17,276 --> 00:16:18,546
For brevity in the
demo, I'm just going


312
00:16:18,546 --> 00:16:21,816
to reuse my message caption
as my accessibility label.


313
00:16:22,446 --> 00:16:24,806
Now that I have my message,


314
00:16:24,806 --> 00:16:26,216
I'm ready to stage it
in the conversation.


315
00:16:27,176 --> 00:16:29,086
I'll get a reference to
my active conversation


316
00:16:30,576 --> 00:16:32,846
and call conversation.insert


317
00:16:34,576 --> 00:16:36,796
to insert the message
so it is staged.


318
00:16:38,296 --> 00:16:40,086
Now that I've written my
composeMessage function,


319
00:16:41,056 --> 00:16:42,056
here I'm ready to call it


320
00:16:42,056 --> 00:16:44,266
from my historyViewController
AddButtonTapped method.


321
00:16:44,786 --> 00:16:49,496
And I'll start off
by always adding


322
00:16:50,026 --> 00:16:52,296
or passing a new ice
cream model instance.


323
00:16:52,906 --> 00:16:56,516
Now when I run this
in the iOS simulator


324
00:16:57,896 --> 00:16:59,486
and launch my iMessage
application,


325
00:17:00,236 --> 00:17:05,415
wait for that debugger to attach
and tap the Plus (+) button.


326
00:17:06,276 --> 00:17:07,876
My message is staged
for the user to send.


327
00:17:08,776 --> 00:17:10,886
Now, because I haven't actually
selected any ice cream parts,


328
00:17:10,886 --> 00:17:13,516
I just have a placeholder
image for the ice cream


329
00:17:13,996 --> 00:17:15,685
and you see my caption
below the message.


330
00:17:17,096 --> 00:17:19,866
Now, this is a great start,
but I'd like to get closer


331
00:17:19,866 --> 00:17:21,756
to that final demo that
I showed you earlier.


332
00:17:22,866 --> 00:17:24,836
When I tap that Plus
(+) button, I want to go


333
00:17:24,836 --> 00:17:26,766
into my sticker-building
UI experience.


334
00:17:27,656 --> 00:17:30,546
To do so, I need to introduce
a new concept to you.


335
00:17:31,766 --> 00:17:33,356
Here my iMessage
app is presented


336
00:17:33,356 --> 00:17:35,006
in a compact presentation style.


337
00:17:36,176 --> 00:17:38,186
I can choose to have my
iMessage app presented


338
00:17:38,186 --> 00:17:40,716
in an expanded presentation
style by requesting it.


339
00:17:42,746 --> 00:17:44,086
Instead of calling
composeMessage


340
00:17:44,086 --> 00:17:47,386
for iceCream here, I'll call
a method on my super class,


341
00:17:48,036 --> 00:17:51,006
request presentation style
with the expanded enum case.


342
00:17:52,386 --> 00:17:55,686
This will trigger a lifecycle
callback method called


343
00:17:55,686 --> 00:17:58,256
willTransition to
presentationStyle.


344
00:17:59,816 --> 00:18:01,676
I'll call the super
implementation


345
00:18:05,376 --> 00:18:06,906
and then I'll call
my helper method


346
00:18:07,196 --> 00:18:09,126
to present the right
child view controller


347
00:18:09,186 --> 00:18:10,256
for this presentation style.


348
00:18:12,456 --> 00:18:12,596
Now,


349
00:18:12,596 --> 00:18:15,366
my presentChildViewController
currently always presents my ice


350
00:18:15,366 --> 00:18:17,436
cream history view
controller and so I need


351
00:18:17,436 --> 00:18:19,916
to change the logic to take into
account the presentation style


352
00:18:20,306 --> 00:18:21,906
so I present the
correct view controller.


353
00:18:23,116 --> 00:18:25,346
First, I'm going to add a
parameter here so I know


354
00:18:25,346 --> 00:18:26,906
which presentation
style I'm dealing with.


355
00:18:28,246 --> 00:18:30,086
Then I'm going to change this


356
00:18:30,856 --> 00:18:33,626
to only present my history
view controller when I'm


357
00:18:33,626 --> 00:18:35,046
in the compact presentation
style.


358
00:18:36,566 --> 00:18:39,546
If I'm in the expanded
case, I'm instead going


359
00:18:39,546 --> 00:18:41,926
to declare a new instance
of my ice cream model


360
00:18:42,826 --> 00:18:45,416
and let my controller
be an instance


361
00:18:45,416 --> 00:18:48,456
of an ice cream builder
view controller


362
00:18:49,166 --> 00:18:50,526
to which I'll pass
that ice cream model.


363
00:18:52,406 --> 00:18:55,776
Now, lastly, before I add this
as a child view controller,


364
00:18:56,236 --> 00:18:59,666
I need to remove any previous
child view controllers


365
00:19:00,146 --> 00:19:01,156
to clean up my view hierarchy.


366
00:19:01,156 --> 00:19:08,246
Now I need to update the call
sites to my helper method.


367
00:19:08,766 --> 00:19:11,826
Here I'm going to add that--


368
00:19:11,926 --> 00:19:16,316
pass that pending presentation
style and in the didBecomeActive


369
00:19:16,316 --> 00:19:17,396
with conversation method,


370
00:19:17,956 --> 00:19:20,396
I'm going to pass the
current presentation style,


371
00:19:20,776 --> 00:19:24,026
which I can get as a property
on my parent view controller.


372
00:19:28,676 --> 00:19:29,216
Should be right.


373
00:19:31,096 --> 00:19:34,416
Lastly-- actually, let's see--


374
00:19:34,416 --> 00:19:37,306
let's see what this looks like
if I can get this to work.


375
00:19:46,646 --> 00:19:47,846
And I tap that Plus (+) button.


376
00:19:48,826 --> 00:19:51,136
My iMessage application
goes to that expanded state


377
00:19:51,446 --> 00:19:54,106
and I'm presenting that ice
cream builder view-- experience.


378
00:19:55,216 --> 00:19:57,126
However, you'll notice that
when I tap Select nothing


379
00:19:57,126 --> 00:19:57,606
happens yet.


380
00:19:58,286 --> 00:20:00,586
Now, this is because my ice
cream builder view controller


381
00:20:00,706 --> 00:20:03,686
also has a delegate protocol
and I have an extension


382
00:20:04,306 --> 00:20:07,896
on my view controller here--
sorry to take you through that


383
00:20:08,676 --> 00:20:12,146
so fast-- that implements
this delegate protocol


384
00:20:12,436 --> 00:20:14,636
by implementing the method
iceCreamBuilderView controller


385
00:20:14,716 --> 00:20:16,276
didSelect iceCreamPart
for iceCream.


386
00:20:17,666 --> 00:20:20,016
This is called whenever that
Select button is tapped.


387
00:20:21,476 --> 00:20:23,156
So, this is the right
point for me to call


388
00:20:23,156 --> 00:20:26,406
that helper method I wrote,
compose message, and I'll pass


389
00:20:26,406 --> 00:20:28,466
in the updated ice cream
model from this method.


390
00:20:29,796 --> 00:20:32,226
The other thing I'm going
to do is call dismiss here


391
00:20:32,986 --> 00:20:37,356
because my iMessage app is done
preparing content and so I'd


392
00:20:37,356 --> 00:20:38,726
like my iMessage app to dismiss


393
00:20:38,726 --> 00:20:40,546
and display the staged
message for the user.


394
00:20:51,046 --> 00:20:54,466
Now when we launch this,
tap the Plus (+) button


395
00:20:55,216 --> 00:20:56,476
and select an ice cream cone.


396
00:20:57,666 --> 00:20:59,816
I dismiss my iMessage app


397
00:20:59,816 --> 00:21:02,326
and the correct interactive
message is stage ready


398
00:21:02,326 --> 00:21:03,086
for the user to send.


399
00:21:03,086 --> 00:21:05,106
And that's a quick
demo of what it looks


400
00:21:05,106 --> 00:21:06,976
like to send an interactive
message.


401
00:21:07,446 --> 00:21:07,976
Now back to Alex.


402
00:21:08,516 --> 00:21:15,266
[ Applause ]


403
00:21:15,766 --> 00:21:16,476
>> Thank you, Stephen.


404
00:21:16,556 --> 00:21:17,026
Great demo.


405
00:21:19,686 --> 00:21:25,056
So, Stephen has introduced
to you and shown you how


406
00:21:25,056 --> 00:21:28,416
to use our APIs to
insert content


407
00:21:28,416 --> 00:21:30,026
into the conversation
and send it.


408
00:21:30,986 --> 00:21:33,286
Stephen also introduced
presentation styles,


409
00:21:33,916 --> 00:21:35,036
so we're going to
have a quick look


410
00:21:35,036 --> 00:21:36,296
at that in some more detail.


411
00:21:37,656 --> 00:21:41,076
We have two presentation
styles, compact and expanded.


412
00:21:42,376 --> 00:21:46,076
Compact one is shown here
and here we have expanded.


413
00:21:48,766 --> 00:21:50,206
So, there's a couple
of differences


414
00:21:50,206 --> 00:21:52,056
between these two
presentation styles.


415
00:21:52,986 --> 00:21:55,386
In compact mode, you don't
have access to the keyboard.


416
00:21:56,496 --> 00:22:00,296
You also don't have access
to horizontal scrolling,


417
00:22:00,426 --> 00:22:02,096
swipe gesture recognizes.


418
00:22:02,726 --> 00:22:05,986
This is because in the compact
mode the user can swipe left


419
00:22:05,986 --> 00:22:10,896
and right to switch between
iMessage apps quickly.


420
00:22:11,566 --> 00:22:14,506
However, you do have
access to the input field,


421
00:22:14,506 --> 00:22:16,316
so whenever insert
message is called


422
00:22:16,366 --> 00:22:18,386
in compact presentation style,


423
00:22:19,056 --> 00:22:20,466
the message will
be inserted right


424
00:22:20,466 --> 00:22:21,816
into the input fields right away


425
00:22:21,816 --> 00:22:24,046
and the user can
see it immediately.


426
00:22:24,896 --> 00:22:28,356
Subsequent calls to insert
message will cause the current


427
00:22:28,356 --> 00:22:30,096
message to be replaced
with the new one,


428
00:22:30,246 --> 00:22:32,096
so what you can do
here is allow your user


429
00:22:32,476 --> 00:22:36,106
to iteratively build a
message, see it as it progresses


430
00:22:36,106 --> 00:22:37,746
on the input field,
and when they're happy


431
00:22:37,746 --> 00:22:39,906
with it they can send it.


432
00:22:41,616 --> 00:22:45,186
To contrast, in expanded
presentation style we obviously


433
00:22:45,186 --> 00:22:46,836
don't have access to
the input field here,


434
00:22:47,406 --> 00:22:49,056
but we do have access


435
00:22:49,056 --> 00:22:51,556
to horizontal swipe gesture
recognizes and scrolling


436
00:22:52,286 --> 00:22:53,696
and you can use the keyboard.


437
00:22:56,796 --> 00:23:01,566
The user can always
transition your extension


438
00:23:01,686 --> 00:23:04,566
between these two styles by
tapping on the top chevron


439
00:23:04,566 --> 00:23:08,336
from expanded to collapse to
compact presentation style


440
00:23:08,766 --> 00:23:11,956
and when in compact they can
tap on the chevron at the bottom


441
00:23:11,956 --> 00:23:13,576
of the screen to expand your app


442
00:23:13,576 --> 00:23:15,256
into expanded presentation
style.


443
00:23:15,856 --> 00:23:17,796
So, when you're using
iMessage apps,


444
00:23:17,796 --> 00:23:21,956
you need to be very
responsive to the area


445
00:23:21,956 --> 00:23:23,586
in which your app is displayed.


446
00:23:23,586 --> 00:23:28,916
Whenever these transitions
happen, you're going


447
00:23:28,916 --> 00:23:31,226
to get some callbacks
on your principal class.


448
00:23:31,936 --> 00:23:35,016
The willTransition to
presentationStyle will be called


449
00:23:35,016 --> 00:23:38,456
as the transition
starts and at the end


450
00:23:38,946 --> 00:23:42,076
when the transition is complete
will call didTransition(to:


451
00:23:42,076 --> 00:23:43,056
presentationStyle).


452
00:23:44,526 --> 00:23:47,936
As Stephen showed, you can
request presentation style


453
00:23:47,936 --> 00:23:52,856
expanded or compact by calling
the requestPresentationStyle


454
00:23:52,856 --> 00:23:54,606
method on your principal class.


455
00:23:55,056 --> 00:23:57,886
And again, as was shown in
the demo, you can call dismiss


456
00:23:57,886 --> 00:23:59,506
and this will dismiss
your iMessage app


457
00:23:59,836 --> 00:24:00,766
and show the keyboard.


458
00:24:02,796 --> 00:24:06,176
So, let's move on and talk
about how we reply to a message.


459
00:24:06,846 --> 00:24:10,056
We have two cases here to cover.


460
00:24:11,396 --> 00:24:13,996
One case when your extension is
inactive and there's a bubble


461
00:24:13,996 --> 00:24:16,476
in the transcript that the
user taps and we're going


462
00:24:16,476 --> 00:24:17,496
to look at that first.


463
00:24:18,636 --> 00:24:19,986
We'll come back to
the second case.


464
00:24:22,796 --> 00:24:24,246
So, looking at our
timeline again,


465
00:24:24,806 --> 00:24:26,896
this should be very familiar.


466
00:24:27,716 --> 00:24:29,526
The bubble is tapped by the user


467
00:24:30,756 --> 00:24:32,106
and your process
will be launched.


468
00:24:32,186 --> 00:24:36,676
And now we go through exactly
the same set of steps that we do


469
00:24:36,676 --> 00:24:38,576
when your app is launched
from the app drawer.


470
00:24:39,686 --> 00:24:42,786
You'll get a didBecomeActive
with conversation followed


471
00:24:42,786 --> 00:24:45,186
by the viewWillAppear
and viewDidAppear.


472
00:24:46,076 --> 00:24:47,726
When this is done, you'll--


473
00:24:47,726 --> 00:24:50,666
your app will be presented in
expanded presentation style.


474
00:24:51,936 --> 00:24:56,476
We always present apps in
expanded presentation style


475
00:24:56,476 --> 00:24:58,846
when the user taps a button
to launch it-- sorry--


476
00:24:58,846 --> 00:25:01,466
taps a bubble in the
transcript to launch it.


477
00:25:02,106 --> 00:25:07,696
Now, looking at our second case,
the extension is already active.


478
00:25:07,696 --> 00:25:11,456
In this case it's showing UI in
the compact presentation style.


479
00:25:13,056 --> 00:25:16,286
So, looking again at our
timeline, in this case,


480
00:25:16,286 --> 00:25:18,836
the bubble is tapped
and the app is active.


481
00:25:19,496 --> 00:25:21,986
So, we're not going to
call willBecomeActive


482
00:25:21,986 --> 00:25:22,866
or didBecomeActive.


483
00:25:23,726 --> 00:25:26,326
Instead, you'll receive
a call to willTransition


484
00:25:26,326 --> 00:25:28,236
to presentationStyle expanded.


485
00:25:29,356 --> 00:25:32,596
This is followed by a didSelect
message and conversation.


486
00:25:33,906 --> 00:25:36,286
This is called on your principal
class and it lets you know


487
00:25:36,286 --> 00:25:38,346
that the user tapped on a
bubble in the transcript


488
00:25:38,346 --> 00:25:39,876
and selected a message.


489
00:25:41,106 --> 00:25:42,536
Then finally as the transition


490
00:25:42,536 --> 00:25:45,186
to expanded presentation
style completes you'll get the


491
00:25:45,186 --> 00:25:47,146
didTransition to
presentationStyle.


492
00:25:47,146 --> 00:25:52,466
So, now at the end of
both of these timelines,


493
00:25:53,096 --> 00:25:56,606
your app is presenting the UI in
the expanded presentation style


494
00:25:56,856 --> 00:25:59,686
and you'll want to get that
message that was tapped,


495
00:26:00,196 --> 00:26:03,976
so this is done using the
MSConversation's selectedMessage


496
00:26:03,976 --> 00:26:05,676
property and you can get this


497
00:26:05,676 --> 00:26:07,306
from the current
active conversation


498
00:26:07,306 --> 00:26:09,966
on your principal class.


499
00:26:10,606 --> 00:26:13,706
You're going to want to show
the selected message in your UI


500
00:26:13,736 --> 00:26:16,216
and allow the user to
compose a response.


501
00:26:18,386 --> 00:26:20,126
Now I'd like you to hand
you back over to Stephen


502
00:26:20,126 --> 00:26:21,486
for one final demo
showing you how


503
00:26:21,486 --> 00:26:23,986
to implement reply
in our sample app.


504
00:26:25,516 --> 00:26:30,696
[ Applause ]


505
00:26:31,196 --> 00:26:32,376
>> OK, so we left off


506
00:26:32,626 --> 00:26:34,336
with a staged message
we're sending here,


507
00:26:34,756 --> 00:26:35,786
which I'll go ahead and send.


508
00:26:36,126 --> 00:26:40,326
And now if I go back to the
conversation list and go


509
00:26:40,326 --> 00:26:42,776
to the other end of
that conversation I have


510
00:26:42,776 --> 00:26:43,676
that received message.


511
00:26:44,916 --> 00:26:46,026
When I tap that message,


512
00:26:46,376 --> 00:26:49,086
my iMessage app is
correctly launched; however,


513
00:26:49,266 --> 00:26:51,916
my ice cream building experience
doesn't show the next step


514
00:26:51,916 --> 00:26:52,956
in the ice cream
building process.


515
00:26:52,956 --> 00:26:56,156
I'm not ready to select ice
cream scoops yet and this is


516
00:26:56,156 --> 00:26:57,046
because every time


517
00:26:57,046 --> 00:26:59,016
that I currently present
this view controller,


518
00:26:59,276 --> 00:27:01,226
I'm always passing in a
new ice cream model object.


519
00:27:02,206 --> 00:27:04,216
What I need to do is look
at the selected message


520
00:27:04,216 --> 00:27:06,766
on the conversation and use
an ice cream model object


521
00:27:06,766 --> 00:27:08,466
from that selected
message if it exists.


522
00:27:10,136 --> 00:27:14,476
So, I'll go back up here
to where I'm instantiating


523
00:27:14,476 --> 00:27:18,306
that ice cream builder
controller and get a reference


524
00:27:18,306 --> 00:27:24,196
to my active conversation
.Then I will use a failable


525
00:27:24,196 --> 00:27:28,796
initializer here that looks at
the message on the conversation


526
00:27:29,966 --> 00:27:31,856
and if that initializer
fails then I know


527
00:27:31,856 --> 00:27:34,316
that I don't have anything in
progress and I'll just create


528
00:27:34,316 --> 00:27:37,546
that new ice cream model, but
if it does exist then I can pass


529
00:27:37,546 --> 00:27:38,726
in the in progress ice cream.


530
00:27:40,406 --> 00:27:42,546
The other thing I want
to do is make sure


531
00:27:42,546 --> 00:27:45,096
that I am passing the
correct caption text depending


532
00:27:45,166 --> 00:27:47,886
on the ice cream part
that has been selected.


533
00:27:50,026 --> 00:27:54,246
To do so, I'm going to need
to pass a new parameter


534
00:27:54,246 --> 00:27:56,606
into this method, which is
the selectedIceCreamPart.


535
00:27:57,726 --> 00:28:02,486
Now, this message caption here
I'll change to a declaration


536
00:28:03,266 --> 00:28:07,216
of the string type and
then I'm going to switch


537
00:28:08,616 --> 00:28:09,896
on the selectedIceCreamPart


538
00:28:10,196 --> 00:28:11,606
to choose a correct
message caption.


539
00:28:11,606 --> 00:28:19,996
Oh, and I also need to update
the call site to my method here


540
00:28:19,996 --> 00:28:21,546
to pass in that new parameter.


541
00:28:22,586 --> 00:28:38,596
Now when I launch my iMessage
app, tap the Plus (+) button,


542
00:28:39,306 --> 00:28:43,926
send that first message and then
go back to the conversation list


543
00:28:44,286 --> 00:28:45,766
and to the other end
of the conversation


544
00:28:47,346 --> 00:28:49,566
and now I'll tap the received
message and you'll see


545
00:28:49,916 --> 00:28:52,376
that my ice cream builder view
controller is correctly set


546
00:28:52,376 --> 00:28:53,626
up to pick an ice cream scoop.


547
00:28:55,946 --> 00:29:00,006
Now I can select some
mint chip, send it,


548
00:29:01,746 --> 00:29:02,646
go back to the other end


549
00:29:02,646 --> 00:29:06,056
of the conversation once
more, and select a topping.


550
00:29:06,056 --> 00:29:11,056
So, now you can see
what it looks


551
00:29:11,056 --> 00:29:13,016
like to send interactive
messages back and forth


552
00:29:13,266 --> 00:29:14,956
and accomplish a
task collaboratively.


553
00:29:16,786 --> 00:29:18,546
However, you'll see that
in my conversation UI,


554
00:29:18,546 --> 00:29:20,516
my partially built ice
creams are starting


555
00:29:20,516 --> 00:29:21,896
to pollute my conversation
a little bit.


556
00:29:23,296 --> 00:29:25,306
I don't really need to see the
partially built ice creams,


557
00:29:25,306 --> 00:29:27,056
I only really care about
the completed ice cream.


558
00:29:28,876 --> 00:29:31,746
What I'd like to do is
collapse those previous messages


559
00:29:32,006 --> 00:29:33,716
and maybe leave behind
a succinct summary


560
00:29:34,226 --> 00:29:34,996
of those messages.


561
00:29:35,996 --> 00:29:38,576
To do so, I'm going to make use
of a new object called MSSession


562
00:29:39,046 --> 00:29:40,116
to group messages together.


563
00:29:43,406 --> 00:29:44,986
Here when I'm composing
my message,


564
00:29:46,016 --> 00:29:48,166
I'm going to move my reference


565
00:29:48,166 --> 00:29:51,566
to my active conversation
a little bit so that


566
00:29:52,256 --> 00:29:57,366
when I declare my session
object I can look to see


567
00:29:57,366 --> 00:30:01,616
if I have a session already on
the selected message and use


568
00:30:01,616 --> 00:30:04,086
that if it exists so that it
will continue the same grouping.


569
00:30:05,196 --> 00:30:07,046
Otherwise, I'll create
a new MSSession object.


570
00:30:09,386 --> 00:30:10,736
I'll then pass that session here


571
00:30:12,406 --> 00:30:14,456
into my initializer
for MSMessage.


572
00:30:17,576 --> 00:30:19,806
Now, the other thing I want to
do is provide a nice summary


573
00:30:19,806 --> 00:30:21,306
of messages when
they're collapsed.


574
00:30:23,956 --> 00:30:25,136
Here I'm going to
declare a method


575
00:30:25,366 --> 00:30:27,826
or declare a variable
called summary Text


576
00:30:29,896 --> 00:30:35,126
and here I'll choose the right
summaryText depending upon the


577
00:30:35,126 --> 00:30:36,176
ice cream part that was chosen.


578
00:30:39,756 --> 00:30:42,746
Now I could take that
summaryText variable and set it


579
00:30:42,746 --> 00:30:43,916
on my MSMessage object.


580
00:30:45,856 --> 00:30:47,756
And that's it.


581
00:30:50,256 --> 00:30:53,476
Oh, maybe I should
actually assign it.


582
00:30:54,666 --> 00:31:01,096
There we go.


583
00:31:01,736 --> 00:31:06,416
Now when I launch my iMessage
app and go about the process


584
00:31:06,416 --> 00:31:10,756
of building an ice cream--


585
00:31:12,356 --> 00:31:15,686
doesn't ice cream
sound good right now?


586
00:31:16,586 --> 00:31:20,586
I can pick my flavor of
ice cream and you'll see


587
00:31:20,586 --> 00:31:24,436
that that summary text has
already been collapsed and shown


588
00:31:24,436 --> 00:31:26,536
for me there when
I send my message.


589
00:31:28,966 --> 00:31:32,446
Now if I go-- sorry-- I'm going
to go back to the first part


590
00:31:32,446 --> 00:31:35,856
of the conversation, tap
this message once more.


591
00:31:35,926 --> 00:31:41,456
I think chocolate sounds like
a good topping right now.


592
00:31:42,166 --> 00:31:44,326
Now when I send that I have a
completed ice cream message,


593
00:31:44,766 --> 00:31:47,626
but I'm only showing the one--


594
00:31:47,626 --> 00:31:51,206
the one image here and I have a
nice summary text throughout my


595
00:31:51,206 --> 00:31:53,556
transcript there.


596
00:31:53,796 --> 00:31:56,906
Also, when I go into
my Ice Cream app here,


597
00:31:57,836 --> 00:32:00,776
you'll see my newly completed
ice cream sticker ready for me


598
00:32:00,776 --> 00:32:01,946
to use however I'd like.


599
00:32:03,186 --> 00:32:03,716
And that's it.


600
00:32:03,716 --> 00:32:05,146
We have a completed
demo application.


601
00:32:05,756 --> 00:32:07,666
Now, this was an example of how


602
00:32:07,666 --> 00:32:11,066
to build an interactive
sticker-building application,


603
00:32:11,436 --> 00:32:13,266
but you could take
this to do anything.


604
00:32:13,266 --> 00:32:14,676
You can build-- you
can integrate


605
00:32:14,676 --> 00:32:15,786
with wonderful services


606
00:32:16,146 --> 00:32:18,386
and build nice awesome
collaborative games


607
00:32:18,386 --> 00:32:19,386
and I can't wait to
see what you build.


608
00:32:20,036 --> 00:32:20,636
Now, back to Alex.


609
00:32:21,516 --> 00:32:23,926
[ Applause ]


610
00:32:24,426 --> 00:32:24,886
Thanks, Stephen.


611
00:32:24,886 --> 00:32:26,166
That was another awesome demo


612
00:32:26,456 --> 00:32:28,716
and Stephen implemented
the reply


613
00:32:28,806 --> 00:32:32,486
and also introduced
something new, the MSSession.


614
00:32:33,066 --> 00:32:34,996
So, let's dive into
the MSSession.


615
00:32:35,526 --> 00:32:42,146
What we saw in the demo was a
messy transcript containing lots


616
00:32:42,146 --> 00:32:45,626
of half-completed ice creams
and we saw how to use MSSession


617
00:32:46,026 --> 00:32:48,486
to take that and turn it into
something that looks a bit more


618
00:32:48,486 --> 00:32:51,806
like this, which is a lot
neater and less cluttered.


619
00:32:52,536 --> 00:32:52,916
It's great.


620
00:32:53,666 --> 00:32:58,476
So, to implement this, we
used an MSSession object.


621
00:32:58,676 --> 00:33:03,026
We created an MSSession and
then for our first message


622
00:33:03,026 --> 00:33:05,496
that was part of the session,
we passed that session


623
00:33:05,836 --> 00:33:08,646
into its initializer and we
have this session message.


624
00:33:09,556 --> 00:33:12,486
We can set some summary text


625
00:33:13,016 --> 00:33:17,356
and then we send it using the
conversation's insert message,


626
00:33:17,446 --> 00:33:18,406
as we've seen before.


627
00:33:18,406 --> 00:33:24,626
When we're replying to a
session message, we don't want


628
00:33:24,626 --> 00:33:27,406
to create a new session; we
need to reuse an existing one


629
00:33:27,456 --> 00:33:29,726
and we can get the
existing session


630
00:33:29,936 --> 00:33:31,786
from the current conversation


631
00:33:31,786 --> 00:33:34,036
so the activeConversation
selectedMessage.


632
00:33:34,276 --> 00:33:36,836
The selected message will
have a second session property


633
00:33:37,096 --> 00:33:38,356
if it's a session message.


634
00:33:40,016 --> 00:33:44,716
Then we take that session, we
pass it into the sessions--


635
00:33:44,716 --> 00:33:47,186
the messages initializer,
as we saw before.


636
00:33:49,316 --> 00:33:53,036
We see here the summaryText
is providing text


637
00:33:53,096 --> 00:33:55,646
for the message summary in
the conversation transcript.


638
00:33:56,816 --> 00:34:00,116
You can now also omit this
property or set it to nil


639
00:34:00,116 --> 00:34:04,826
and if you do that then there
will not be a summaryText entry


640
00:34:04,826 --> 00:34:07,656
in the transcript, but your
message will still partake


641
00:34:08,146 --> 00:34:09,275
in the session behavior.


642
00:34:09,576 --> 00:34:12,116
So, now we've covered the basics
of the API and we've seen how


643
00:34:12,116 --> 00:34:14,295
to build a very simple
iMessage app


644
00:34:14,826 --> 00:34:18,545
that sends interactive
messages between your friends.


645
00:34:19,045 --> 00:34:22,106
We're going to move
on and talk about some


646
00:34:22,106 --> 00:34:28,295
of the more advanced
features of the API.


647
00:34:28,876 --> 00:34:31,616
We'll start by looking at
some more override methods


648
00:34:31,616 --> 00:34:32,636
on your principal class.


649
00:34:34,085 --> 00:34:36,565
We'll move on and talk
about group conversations


650
00:34:37,666 --> 00:34:40,656
and finally we'll discuss
how to identify the sender


651
00:34:40,656 --> 00:34:41,726
of a particular message.


652
00:34:43,835 --> 00:34:48,426
First, when the user
sends a message,


653
00:34:48,426 --> 00:34:51,596
we realize that your app may wan
to know that this has happened.


654
00:34:52,585 --> 00:34:55,266
For instance, if you're a game
and the user plays a move,


655
00:34:55,976 --> 00:34:58,726
we need to know when to update
our model to record that move


656
00:34:58,726 --> 00:34:59,896
and that should really
only happen


657
00:34:59,896 --> 00:35:01,736
when the message
is actually sent.


658
00:35:03,896 --> 00:35:06,246
So, we have a
didStartSendingMessage method


659
00:35:06,686 --> 00:35:12,366
on the principal class
and this is called


660
00:35:12,366 --> 00:35:13,946
when the user taps
the send button.


661
00:35:14,516 --> 00:35:15,446
Now, this is important.


662
00:35:15,706 --> 00:35:16,996
That message-- that
does not mean


663
00:35:16,996 --> 00:35:20,096
that the message has actually
been sent or delivered.


664
00:35:20,386 --> 00:35:23,226
All it means is the user
has hit the Send button


665
00:35:23,226 --> 00:35:28,336
and it communicates the
intent to send this message.


666
00:35:29,056 --> 00:35:31,916
We also have, similarly,
a didCancelSending.


667
00:35:32,906 --> 00:35:34,936
This happens when the
user taps the cross


668
00:35:35,336 --> 00:35:38,626
in the top right hand corner of
the message bubble on the shelf.


669
00:35:39,526 --> 00:35:41,646
didCancelSending is your
opportunity to clean


670
00:35:41,646 --> 00:35:44,046
up any resources that have
been accumulated during the


671
00:35:44,046 --> 00:35:45,306
composition of that message.


672
00:35:45,956 --> 00:35:49,866
And lastly we have
didRecieveMessage.


673
00:35:51,256 --> 00:35:56,416
didRecieveMessage happens-- is
called when your app is running


674
00:35:56,896 --> 00:36:01,556
or active and a message has come
in from one of the recipient--


675
00:36:01,556 --> 00:36:03,316
one of the participants
in the conversation.


676
00:36:03,316 --> 00:36:08,246
And it's a-- this is useful,
for example, if your app has--


677
00:36:08,336 --> 00:36:11,006
if your user is editing
a session message


678
00:36:11,006 --> 00:36:13,146
and another message comes
in on the same session,


679
00:36:13,456 --> 00:36:17,006
it's an updated state and
you need to update the UI


680
00:36:17,006 --> 00:36:18,316
that represents this state.


681
00:36:19,316 --> 00:36:22,176
So, let's move on and talk
about group conversations.


682
00:36:22,676 --> 00:36:25,296
iMessage apps are going to be
used in group conversations,


683
00:36:25,606 --> 00:36:26,776
so you're going to
have to consider


684
00:36:26,776 --> 00:36:29,266
that when you're building them.


685
00:36:29,866 --> 00:36:32,516
We have here an example
conversation


686
00:36:32,516 --> 00:36:35,466
between three friends:
Amber, Ben, and Chris.


687
00:36:36,766 --> 00:36:41,336
Ben's getting ice cream
for everyone and he sent


688
00:36:41,336 --> 00:36:43,396
out a question to
Amber and Chris.


689
00:36:43,766 --> 00:36:45,766
Which topping do you-- would
you like on your ice cream?


690
00:36:46,016 --> 00:36:47,776
Chocolate sauce or sprinkles?


691
00:36:48,286 --> 00:36:53,756
Amber is going to reply
with chocolate sauce


692
00:36:54,726 --> 00:36:57,446
and Chris here is going
to reply with sprinkles.


693
00:36:59,056 --> 00:37:01,966
Both users send these messages
at exactly the same time.


694
00:37:02,526 --> 00:37:09,206
Let's focus a little bit now
on Ben and see what happens


695
00:37:09,206 --> 00:37:10,966
on his device as
these messages arrive.


696
00:37:11,486 --> 00:37:17,306
First, Amber's reply is going
to arrive on Ben's device


697
00:37:17,486 --> 00:37:19,226
and this is followed
very shortly afterwards


698
00:37:19,456 --> 00:37:20,516
by the reply from Chris.


699
00:37:20,516 --> 00:37:26,526
So, you note Amber's reply was
turned into a summary message


700
00:37:26,846 --> 00:37:28,356
and Chris's reply is shown


701
00:37:28,356 --> 00:37:30,056
as the last bubble
in this conversation.


702
00:37:30,606 --> 00:37:34,956
This could just as easily have
happened the other way around


703
00:37:37,156 --> 00:37:40,836
and we should note that only
the tapped message is available


704
00:37:40,836 --> 00:37:45,286
to your iMessage app, so
we don't really have access


705
00:37:45,286 --> 00:37:47,456
to Amber's reply in our example.


706
00:37:48,266 --> 00:37:49,776
How do we deal with this?


707
00:37:49,866 --> 00:37:51,896
Well, right now we're
recommending


708
00:37:51,896 --> 00:37:54,586
that you store state in
the cloud and this means


709
00:37:54,586 --> 00:37:57,166
that the URL property of the
MSMessage that's passed to


710
00:37:57,166 --> 00:38:02,076
and from the participants in
the conversation only needs to--


711
00:38:02,076 --> 00:38:05,846
only needs to take a token
that represents the session


712
00:38:07,806 --> 00:38:10,166
and then you receive the
current state of the session


713
00:38:10,796 --> 00:38:13,066
when the user taps on a message.


714
00:38:13,376 --> 00:38:15,076
And when a user sends a message,


715
00:38:15,076 --> 00:38:16,486
you should push the
current state


716
00:38:16,486 --> 00:38:20,046
of the session up to the cloud.


717
00:38:20,736 --> 00:38:22,906
Moving on, we're going to
talk about sender identifiers.


718
00:38:23,516 --> 00:38:29,126
Here we have a conversation


719
00:38:29,516 --> 00:38:31,116
between Amber, Ben,
and Chris again.


720
00:38:31,706 --> 00:38:35,706
In this scenario,
Amber has replied


721
00:38:36,876 --> 00:38:38,386
with a preference
for chocolate sauce.


722
00:38:38,816 --> 00:38:40,066
Chris has not yet replied.


723
00:38:42,456 --> 00:38:46,816
Focusing again on Ben's
device, we have a message here


724
00:38:46,816 --> 00:38:52,396
and we don't know who to
attribute it to, but we can find


725
00:38:52,506 --> 00:38:55,316
out some information about that.


726
00:38:55,316 --> 00:38:59,686
Now, what we have here are some
sender participant identifiers--


727
00:38:59,996 --> 00:39:01,846
sorry, let me rephrase that.


728
00:39:01,946 --> 00:39:04,816
What we have here are some
participant identifiers.


729
00:39:05,656 --> 00:39:08,456
Apple is very, very
concerned about user privacy


730
00:39:08,516 --> 00:39:12,156
and we really very highly value
the privacy of our customers,


731
00:39:12,476 --> 00:39:14,576
so we don't expose
contact information


732
00:39:14,576 --> 00:39:17,806
at all to iMessage apps.


733
00:39:18,346 --> 00:39:20,926
Instead, we provide these
participant identifiers.


734
00:39:22,486 --> 00:39:25,626
On Ben's device, he has a
local participant identifier


735
00:39:25,756 --> 00:39:29,846
and this is a UUID that
represents Ben on this device.


736
00:39:31,056 --> 00:39:34,766
He also has two remote
participant identifiers.


737
00:39:35,766 --> 00:39:39,336
These represent the
other participants


738
00:39:39,336 --> 00:39:40,226
in the conversation.


739
00:39:40,316 --> 00:39:41,406
In this case, we have two.


740
00:39:41,406 --> 00:39:42,956
We have Amber and we have Chris.


741
00:39:43,006 --> 00:39:46,606
Looking at the incoming message,


742
00:39:46,646 --> 00:39:48,946
we see that the message
has a sender identifier


743
00:39:49,516 --> 00:39:51,176
and this will map to one


744
00:39:51,176 --> 00:39:54,466
of the local participant
identifiers in Ben's list.


745
00:39:56,036 --> 00:39:59,526
Moving back to the big
picture, looking at Amber


746
00:39:59,526 --> 00:40:06,276
and Chris's device, the sending
messages have sender identifiers


747
00:40:06,346 --> 00:40:12,716
and these map to the local
identifier on each device


748
00:40:12,716 --> 00:40:14,266
that sent that message.


749
00:40:14,836 --> 00:40:22,246
You can use these identifiers
to get a handle on the number


750
00:40:22,246 --> 00:40:23,856
of participants in
a conversation.


751
00:40:25,066 --> 00:40:26,886
You can attribute
messages to a sender


752
00:40:26,886 --> 00:40:28,566
so once you've received
one message


753
00:40:28,656 --> 00:40:30,306
with a particular
sender identifier


754
00:40:30,306 --> 00:40:32,716
and you receive a second
with the same identifier,


755
00:40:32,986 --> 00:40:34,526
you know they've come
from the same user.


756
00:40:35,986 --> 00:40:40,586
They can also be used in
conjunction with a web service.


757
00:40:41,156 --> 00:40:44,266
They can be used to
help establish identity.


758
00:40:45,526 --> 00:40:46,356
And one more thing.


759
00:40:48,466 --> 00:40:51,116
You can use these identifiers
or the string representation


760
00:40:51,116 --> 00:40:55,336
of these identifiers prefixed
with a dollar sign in any


761
00:40:55,336 --> 00:40:56,636
of the text passed


762
00:40:56,636 --> 00:40:58,956
to the MessageTemplateLayout's
text properties.


763
00:40:59,476 --> 00:41:02,806
You can also use-- similarly,
you can use these identifiers


764
00:41:02,806 --> 00:41:06,296
in the text passed to the
Messages sumamaryText.


765
00:41:07,656 --> 00:41:10,936
When Messages displays the UI
for the bubbles with this type


766
00:41:10,936 --> 00:41:14,766
of formatting in their text,
it will replace the identifiers


767
00:41:14,766 --> 00:41:17,396
with the contact
name of the person


768
00:41:17,396 --> 00:41:23,456
that their identifier maps to.


769
00:41:26,156 --> 00:41:30,916
These identifiers are
unique on each device.


770
00:41:31,256 --> 00:41:33,326
If you noticed on the
earlier slide, every device


771
00:41:33,326 --> 00:41:35,376
for every person the
identifier was different.


772
00:41:37,356 --> 00:41:40,716
And they're scoped to the
install of the iMessage app


773
00:41:40,716 --> 00:41:42,766
and what I mean by this is


774
00:41:42,766 --> 00:41:45,936
that the identifiers themselves
will be stable over time,


775
00:41:47,486 --> 00:41:50,356
but if the user removes
your iMessage app


776
00:41:50,356 --> 00:41:52,176
and then later reinstalls it,


777
00:41:52,906 --> 00:41:56,016
you'll get a completely
different set of identifiers


778
00:41:56,016 --> 00:41:57,776
within the same conversation.


779
00:41:58,366 --> 00:42:02,806
You can get the sender
participant identifier


780
00:42:02,806 --> 00:42:06,176
from an MSMessage using the
senderParticipantIdentifier


781
00:42:06,176 --> 00:42:10,736
property and you can get the
local participant identifier via


782
00:42:10,736 --> 00:42:14,236
conversation using the
localParticipantIdentifier


783
00:42:14,236 --> 00:42:14,696
property.


784
00:42:16,326 --> 00:42:19,746
And you can get the list of
remote participant identifiers


785
00:42:19,746 --> 00:42:21,976
from the
remoteParticipantIdentifier


786
00:42:28,236 --> 00:42:28,456
property.


787
00:42:30,046 --> 00:42:33,946
So, that wraps our more
advanced topics on the API.


788
00:42:33,946 --> 00:42:37,886
We're going to talk a little bit
more about supported platforms.


789
00:42:39,366 --> 00:42:44,006
Interactive messages will be
delivered on these platforms:


790
00:42:44,006 --> 00:42:47,136
watchOS 3, macOS
Sierra, and iOS 10.


791
00:42:47,956 --> 00:42:51,626
Of these platforms, only iOS 10
will actually generate messages.


792
00:42:53,026 --> 00:42:55,916
On macOS Sierra, the user
can click on a bubble


793
00:42:55,916 --> 00:43:00,106
in the conversation
transcript and the URL passed


794
00:43:00,106 --> 00:43:04,456
to the Messages URL property
will be opened with Safari.


795
00:43:04,456 --> 00:43:08,656
That will only be if it's
an https or http URL.


796
00:43:09,706 --> 00:43:13,426
On watch, you can hand off
interactive messages to a device


797
00:43:13,426 --> 00:43:23,616
where you're able
to compose a reply.


798
00:43:24,726 --> 00:43:28,316
We also support some
fallback for older platforms.


799
00:43:28,806 --> 00:43:32,566
These messages will be
delivered to watchOS 2, iOS 10--


800
00:43:32,566 --> 00:43:36,426
iOS 9, and OS 10.11,
but they'll be delivered


801
00:43:36,426 --> 00:43:37,456
in a fallback format.


802
00:43:37,596 --> 00:43:39,086
There's two separate messages.


803
00:43:39,996 --> 00:43:42,316
The first one will be
the image as provided


804
00:43:42,316 --> 00:43:43,376
in the template layout.


805
00:43:44,326 --> 00:43:48,996
The second one will be a URL
as provided in the message.


806
00:43:49,836 --> 00:43:53,216
Now, again note if this is
an https URL, we'll send it.


807
00:43:53,606 --> 00:43:55,186
If it's a data URL, we won't.


808
00:43:56,036 --> 00:44:00,076
So, we only-- we'll only
send the https or http URLs


809
00:44:00,076 --> 00:44:01,286
in the fallback message.


810
00:44:01,866 --> 00:44:05,776
So, that wraps up our talk.


811
00:44:06,596 --> 00:44:08,946
In summary, we have-- this week,


812
00:44:09,006 --> 00:44:12,556
we've introduced the Messages
framework, iMessage apps.


813
00:44:13,166 --> 00:44:17,976
In the first part of this talk,
Bhaskar and Lily introduced us


814
00:44:18,256 --> 00:44:20,306
to sticker packs
and showed us how


815
00:44:20,306 --> 00:44:23,416
to create simple iMessage apps
that create sticker content.


816
00:44:24,906 --> 00:44:26,966
Today, we've created
iMessage apps


817
00:44:26,966 --> 00:44:30,636
that send interactive
content and we've talked


818
00:44:30,636 --> 00:44:32,516
about how they work
in group conversations


819
00:44:32,516 --> 00:44:35,586
and a few other things.


820
00:44:35,996 --> 00:44:38,476
Now I'm really excited to
see what you guys go out


821
00:44:38,476 --> 00:44:39,876
and make with this API.


822
00:44:39,876 --> 00:44:45,426
I can't wait to see what you
produce and that-- that's it.


823
00:44:46,516 --> 00:44:52,896
[ Applause ]


824
00:44:53,396 --> 00:44:56,296
For more information, you can
check out our session's website


825
00:44:56,296 --> 00:44:57,766
on developer.apple.com.


826
00:44:59,386 --> 00:45:00,606
We have a related session.


827
00:45:00,606 --> 00:45:03,786
If you haven't already seen
"iMessage Apps and Stickers,


828
00:45:03,786 --> 00:45:06,176
Part 1", then please go
and watch it on the web.


829
00:45:07,446 --> 00:45:09,456
And that wraps up our talk.


830
00:45:09,456 --> 00:45:11,496
Thanks to Stephen
for doing our demos.


831
00:45:11,796 --> 00:45:12,916
Thanks to you guys for coming.


832
00:45:13,516 --> 00:45:17,500
[ Applause ]

