1
00:00:07,516 --> 00:00:15,500
[ Music ]


2
00:00:20,456 --> 00:00:22,206
>> Hello. Good morning,


3
00:00:22,426 --> 00:00:22,976
everyone.


4
00:00:23,516 --> 00:00:27,016
[ Applause ]


5
00:00:27,516 --> 00:00:28,696
And welcome to this year's


6
00:00:28,696 --> 00:00:30,586
session on HTP Light Streaming.


7
00:00:31,486 --> 00:00:32,786
My name is Emil Andriescu.


8
00:00:33,476 --> 00:00:35,286
Today's talk is about measuring


9
00:00:35,286 --> 00:00:37,516
and optimizing HLS performance.


10
00:00:38,516 --> 00:00:40,226
First, let's reflect for a


11
00:00:40,226 --> 00:00:42,936
second on why we should care and


12
00:00:42,936 --> 00:00:44,126
why it is essential for


13
00:00:44,126 --> 00:00:44,796
application.


14
00:00:45,336 --> 00:00:48,646
Let's pretend it's Saturday


15
00:00:48,646 --> 00:00:50,276
night, you're in your favorite


16
00:00:50,276 --> 00:00:52,076
spot on the couch, you've


17
00:00:52,076 --> 00:00:53,676
skillfully browsed through all


18
00:00:53,676 --> 00:00:55,446
the reviews, title is set,


19
00:00:55,886 --> 00:00:58,046
popcorn is ready, and you


20
00:00:58,046 --> 00:01:00,936
eagerly tap play when this


21
00:01:00,936 --> 00:01:01,526
happens.


22
00:01:02,916 --> 00:01:05,336
Faced with this mysteriously and


23
00:01:05,336 --> 00:01:07,376
never-ending animation, you ask


24
00:01:07,376 --> 00:01:09,096
yourself, what could be worse.


25
00:01:10,506 --> 00:01:12,296
Let's face it, you know it, it's


26
00:01:12,296 --> 00:01:13,136
a playback error.


27
00:01:13,706 --> 00:01:17,846
But what do customers really


28
00:01:17,906 --> 00:01:20,306
expect from HTP Light Streaming?


29
00:01:21,016 --> 00:01:22,126
Well, they expect


30
00:01:22,256 --> 00:01:24,176
high-definition image, high


31
00:01:24,176 --> 00:01:26,506
fidelity sound, and instant


32
00:01:26,506 --> 00:01:28,256
media response when they tap


33
00:01:28,376 --> 00:01:28,686
play.


34
00:01:29,466 --> 00:01:31,096
Yet, streaming applications over


35
00:01:31,096 --> 00:01:32,836
the internet are always at the


36
00:01:32,836 --> 00:01:34,706
mercy of the network, so how do


37
00:01:34,706 --> 00:01:35,616
we reconcile?


38
00:01:36,696 --> 00:01:38,656
Well, HTP Light Streaming was


39
00:01:38,656 --> 00:01:40,176
designed to address this, that


40
00:01:40,176 --> 00:01:42,246
is to provide the best possible


41
00:01:42,516 --> 00:01:43,786
uninterrupted streaming


42
00:01:43,786 --> 00:01:46,166
experience in an unpredictable


43
00:01:46,166 --> 00:01:47,156
network environment.


44
00:01:47,156 --> 00:01:48,406
So why are we here?


45
00:01:48,666 --> 00:01:49,576
Well, there's more.


46
00:01:50,006 --> 00:01:52,696
Over time, HLS has evolved into


47
00:01:52,696 --> 00:01:54,336
a more dynamic ecosystem,


48
00:01:54,546 --> 00:01:56,566
supporting new offering features


49
00:01:56,566 --> 00:01:58,376
such as I-frame playback, new


50
00:01:58,376 --> 00:02:00,276
media formats, and of course new


51
00:02:00,276 --> 00:02:00,896
codecs.


52
00:02:01,336 --> 00:02:03,316
At the same time, we're


53
00:02:03,316 --> 00:02:05,896
constantly adding powerful iOS,


54
00:02:06,046 --> 00:02:08,985
tvOS, and macOS APIs such as you


55
00:02:09,316 --> 00:02:12,236
can tune and adjust playback to


56
00:02:12,236 --> 00:02:13,946
your target audience and provide


57
00:02:13,946 --> 00:02:15,786
a much richer user experience.


58
00:02:16,876 --> 00:02:18,686
Delivery patterns and transport


59
00:02:18,726 --> 00:02:20,136
protocols, they are also


60
00:02:20,136 --> 00:02:22,186
evolving, so it is important to


61
00:02:22,186 --> 00:02:23,776
look at your server side


62
00:02:23,776 --> 00:02:26,046
performance in connection to how


63
00:02:26,046 --> 00:02:27,506
content is being consumed,


64
00:02:27,776 --> 00:02:29,916
either on a mobile device or in


65
00:02:29,916 --> 00:02:33,996
the living room.


66
00:02:34,216 --> 00:02:36,266
Given all these options, how can


67
00:02:36,266 --> 00:02:37,616
you be sure that you are


68
00:02:37,616 --> 00:02:39,616
providing the best possible user


69
00:02:39,616 --> 00:02:41,016
experience to your audience?


70
00:02:41,016 --> 00:02:43,256
Well, the first step is to


71
00:02:43,256 --> 00:02:45,376
understand and quantify the user


72
00:02:45,376 --> 00:02:47,296
experience in conjunction to


73
00:02:47,296 --> 00:02:48,796
changes that you make to your


74
00:02:49,056 --> 00:02:50,506
content, application, or


75
00:02:50,506 --> 00:02:51,056
delivery.


76
00:02:52,176 --> 00:02:53,866
This is an area where we believe


77
00:02:53,866 --> 00:02:55,456
it is imperative to measure


78
00:02:55,906 --> 00:02:57,416
rather than to guess which


79
00:02:57,416 --> 00:02:58,996
configuration is optimal.


80
00:03:00,246 --> 00:03:01,416
What is this session about?


81
00:03:02,176 --> 00:03:03,846
First, we want to establish a


82
00:03:03,846 --> 00:03:05,456
common language for discussing


83
00:03:05,456 --> 00:03:06,946
streaming quality of service.


84
00:03:07,636 --> 00:03:09,436
Second, we want to discuss how


85
00:03:09,436 --> 00:03:11,156
to objectively measure your


86
00:03:11,156 --> 00:03:12,096
application streaming


87
00:03:12,096 --> 00:03:12,836
performance.


88
00:03:13,766 --> 00:03:15,266
Third, we want to help you


89
00:03:15,266 --> 00:03:17,796
identify and solve some of the


90
00:03:17,796 --> 00:03:19,746
problems that impair streaming


91
00:03:19,746 --> 00:03:20,906
quality of service.


92
00:03:22,416 --> 00:03:24,196
And finally, we want to get


93
00:03:24,196 --> 00:03:25,606
those master playlists right.


94
00:03:25,976 --> 00:03:27,486
This is because many of the


95
00:03:27,616 --> 00:03:29,376
problems and issues that we see


96
00:03:29,596 --> 00:03:31,056
with streaming quality are


97
00:03:31,056 --> 00:03:33,226
actually rooted in the authoring


98
00:03:33,256 --> 00:03:34,626
of the master playlist.


99
00:03:35,446 --> 00:03:37,216
Before going into detail, let's


100
00:03:37,216 --> 00:03:38,916
begin with a brief overview of


101
00:03:38,916 --> 00:03:40,246
an HLS playback session.


102
00:03:41,216 --> 00:03:42,736
As you'd expect, it begins with


103
00:03:42,736 --> 00:03:43,766
the download of a master


104
00:03:43,766 --> 00:03:44,426
playlist.


105
00:03:44,896 --> 00:03:47,396
Once the playlist is passed by


106
00:03:47,396 --> 00:03:49,356
AV Player, it knows what content


107
00:03:49,356 --> 00:03:50,176
it refers to.


108
00:03:50,416 --> 00:03:51,496
In this case, we have two


109
00:03:51,496 --> 00:03:53,356
bitrates, 1 megabit and 2


110
00:03:53,356 --> 00:03:53,836
megabit.


111
00:03:53,836 --> 00:03:55,546
AV Player will pick one of


112
00:03:55,546 --> 00:03:57,406
these, will go ahead and


113
00:03:57,406 --> 00:03:58,846
download a media playlist


114
00:03:58,846 --> 00:03:59,816
together with additional


115
00:03:59,816 --> 00:04:01,806
artifacts such as keys, and then


116
00:04:01,806 --> 00:04:03,026
continue to download media


117
00:04:03,026 --> 00:04:05,216
segments until the buffer level


118
00:04:05,216 --> 00:04:06,596
is sufficient for playback.


119
00:04:07,106 --> 00:04:10,446
When that happens, the AV Player


120
00:04:10,446 --> 00:04:11,916
item will communicate a


121
00:04:11,916 --> 00:04:14,516
prediction of playability by


122
00:04:14,516 --> 00:04:16,176
setting the is playback likely


123
00:04:16,176 --> 00:04:17,766
to keep up property to true.


124
00:04:18,406 --> 00:04:20,466
If you've preset the AV Player


125
00:04:20,546 --> 00:04:22,125
Rate to 1, so you're using the


126
00:04:22,125 --> 00:04:24,026
Autoplay feature of a AV Player,


127
00:04:24,026 --> 00:04:26,426
the player will go ahead and


128
00:04:26,426 --> 00:04:27,886
start playback immediately.


129
00:04:28,476 --> 00:04:29,946
We call this Time Interval


130
00:04:29,946 --> 00:04:30,786
Startup Time.


131
00:04:31,666 --> 00:04:33,426
From this point on, the wall


132
00:04:33,426 --> 00:04:35,516
clock, also known as real time,


133
00:04:35,866 --> 00:04:37,516
and the player item time base


134
00:04:37,516 --> 00:04:39,076
will advance at the same speed,


135
00:04:39,436 --> 00:04:41,396
with one condition, which is


136
00:04:41,396 --> 00:04:43,786
that content must arrive at an


137
00:04:43,786 --> 00:04:46,056
equivalent or faster rate than


138
00:04:46,056 --> 00:04:47,296
that which AV Player is


139
00:04:47,296 --> 00:04:47,926
consuming.


140
00:04:48,586 --> 00:04:49,916
If that's not the case, AV


141
00:04:49,966 --> 00:04:52,036
Player will try and switch down


142
00:04:52,036 --> 00:04:53,336
to the 1 megabit here.


143
00:04:53,766 --> 00:04:55,426
If network still cannot keep up


144
00:04:55,426 --> 00:04:57,446
with real time at 1 megabit,


145
00:04:57,726 --> 00:04:59,276
well the buffer will eventually


146
00:04:59,276 --> 00:05:01,566
run dry, and AV Player has no


147
00:05:01,566 --> 00:05:03,006
choice here, it needs to stop


148
00:05:03,006 --> 00:05:04,526
playback, event which we call a


149
00:05:04,526 --> 00:05:04,926
stall.


150
00:05:05,816 --> 00:05:07,246
The player will remain in this


151
00:05:07,246 --> 00:05:09,196
state not only until data starts


152
00:05:09,196 --> 00:05:10,776
flowing again, but up until


153
00:05:10,776 --> 00:05:11,996
there's a sufficient level of


154
00:05:11,996 --> 00:05:13,796
buffer for the player item to


155
00:05:13,796 --> 00:05:15,346
trigger another positive


156
00:05:15,416 --> 00:05:16,516
playability prediction.


157
00:05:17,286 --> 00:05:18,596
After that, playback can


158
00:05:18,596 --> 00:05:19,576
continue normally.


159
00:05:20,666 --> 00:05:22,166
Now let's discuss about


160
00:05:22,456 --> 00:05:24,176
quantifying the user experience


161
00:05:24,176 --> 00:05:25,116
for such a session.


162
00:05:26,216 --> 00:05:27,926
We do that by defining a set of


163
00:05:27,926 --> 00:05:29,526
Key Performance Indicators or


164
00:05:29,526 --> 00:05:30,396
KPIs.


165
00:05:31,056 --> 00:05:32,596
We picked five of them that we


166
00:05:32,596 --> 00:05:34,166
believe are most representative


167
00:05:34,196 --> 00:05:35,556
for HTP Light Streaming.


168
00:05:36,946 --> 00:05:38,776
One question you may ask is how


169
00:05:38,776 --> 00:05:40,436
much time do my users spend


170
00:05:40,836 --> 00:05:42,996
waiting for playback to start.


171
00:05:42,996 --> 00:05:44,256
Is it one second?


172
00:05:44,256 --> 00:05:46,646
Is it five seconds or maybe 30


173
00:05:46,646 --> 00:05:47,166
seconds?


174
00:05:47,486 --> 00:05:49,036
This is an essential point in


175
00:05:49,036 --> 00:05:50,486
terms of user experience.


176
00:05:51,336 --> 00:05:53,906
Further, playback stalls, like


177
00:05:53,906 --> 00:05:55,616
the one we just saw, they are


178
00:05:55,616 --> 00:05:56,966
disruptive to the user.


179
00:05:57,076 --> 00:05:59,156
We care both about how often


180
00:05:59,156 --> 00:06:00,936
they occur, but maybe more


181
00:06:00,936 --> 00:06:02,646
importantly, how long does it


182
00:06:02,676 --> 00:06:04,126
take to recover from a stall?


183
00:06:05,126 --> 00:06:07,466
Yet, the best strategy without


184
00:06:07,466 --> 00:06:09,126
knowledge of the future to not


185
00:06:09,126 --> 00:06:11,136
stall is to deliver content at


186
00:06:11,136 --> 00:06:12,666
the lowest available bitrate.


187
00:06:13,106 --> 00:06:14,386
But of course that's not what we


188
00:06:14,386 --> 00:06:14,666
want.


189
00:06:14,666 --> 00:06:16,076
We want to deliver the best


190
00:06:16,076 --> 00:06:18,206
audio and video quality while


191
00:06:18,206 --> 00:06:19,356
still not stalling.


192
00:06:19,686 --> 00:06:21,116
So there's a clear tradeoff


193
00:06:21,116 --> 00:06:23,136
between risk of stalling and


194
00:06:23,136 --> 00:06:24,526
media quality, right.


195
00:06:24,626 --> 00:06:26,606
For that, we need another


196
00:06:26,606 --> 00:06:28,566
measure of the overall media


197
00:06:28,566 --> 00:06:29,776
quality for a session.


198
00:06:30,736 --> 00:06:32,976
And finally, playback errors.


199
00:06:32,976 --> 00:06:33,806
We talked about that.


200
00:06:34,166 --> 00:06:35,366
They are more disruptive than


201
00:06:35,366 --> 00:06:36,166
stalls, right.


202
00:06:36,826 --> 00:06:39,806
What can we do to track playback


203
00:06:39,806 --> 00:06:40,276
errors?


204
00:06:41,196 --> 00:06:41,586
Okay.


205
00:06:41,736 --> 00:06:42,866
Let's begin with startup time.


206
00:06:43,676 --> 00:06:45,526
There are multiple APIs that you


207
00:06:45,526 --> 00:06:47,506
can use to obtain or compute


208
00:06:47,506 --> 00:06:48,296
startup time.


209
00:06:48,666 --> 00:06:50,786
First, don't use the AV Player


210
00:06:51,046 --> 00:06:52,476
status changing to ready to


211
00:06:52,476 --> 00:06:52,836
play.


212
00:06:52,836 --> 00:06:53,796
That doesn't tell you that


213
00:06:53,836 --> 00:06:56,256
playback is going to start.


214
00:06:56,446 --> 00:06:58,086
However, if you are using


215
00:06:58,086 --> 00:06:59,346
Autoplay, so you're setting the


216
00:06:59,346 --> 00:07:00,726
rate, the player's rate in


217
00:07:00,726 --> 00:07:02,716
advance, you can use the AV


218
00:07:02,716 --> 00:07:04,506
Player item status changing to


219
00:07:04,506 --> 00:07:06,606
ready to play or the AV Player


220
00:07:06,606 --> 00:07:08,536
item is playback likely to keep


221
00:07:08,536 --> 00:07:09,516
out changing to true.


222
00:07:09,516 --> 00:07:11,026
These are observable properties.


223
00:07:12,176 --> 00:07:13,836
When that happens, you know that


224
00:07:13,886 --> 00:07:15,876
playback is about to start, but


225
00:07:15,876 --> 00:07:16,916
there might be a few


226
00:07:17,076 --> 00:07:18,716
milliseconds before playback


227
00:07:18,716 --> 00:07:19,616
actually starts.


228
00:07:19,876 --> 00:07:21,346
So what we recommend is to


229
00:07:21,346 --> 00:07:23,766
either use the AV Player time


230
00:07:23,766 --> 00:07:25,056
control status changing to


231
00:07:25,056 --> 00:07:26,836
playing or to track the player


232
00:07:26,836 --> 00:07:28,376
item time base, and there's a


233
00:07:28,376 --> 00:07:29,696
notification that allows you to


234
00:07:29,696 --> 00:07:30,086
do that.


235
00:07:30,596 --> 00:07:34,526
AV Player relies on heuristics


236
00:07:34,526 --> 00:07:36,696
to avoid stalls, but we know it,


237
00:07:36,696 --> 00:07:38,026
sometimes they're unavoidable.


238
00:07:38,846 --> 00:07:40,946
You can monitor as stalls occur


239
00:07:40,946 --> 00:07:42,556
by registering to the AV Player


240
00:07:42,556 --> 00:07:43,946
item playback stall


241
00:07:43,946 --> 00:07:44,736
notification.


242
00:07:45,136 --> 00:07:46,816
The suggestion here is to count


243
00:07:46,876 --> 00:07:48,126
the occurrence of stalls.


244
00:07:48,736 --> 00:07:49,776
Of course, if you want to


245
00:07:49,776 --> 00:07:52,346
compare and aggregate stall


246
00:07:52,346 --> 00:07:54,466
behavior across sessions of


247
00:07:54,466 --> 00:07:56,016
different duration, then you


248
00:07:56,016 --> 00:07:57,096
need to normalize this.


249
00:07:57,096 --> 00:07:57,826
How do you do that?


250
00:07:58,296 --> 00:08:00,056
Well, we recommend that you use


251
00:08:00,296 --> 00:08:01,996
the total duration watched and


252
00:08:01,996 --> 00:08:04,636
compute the stall rate in terms


253
00:08:04,636 --> 00:08:07,476
of stalls per unit of time


254
00:08:07,476 --> 00:08:08,986
watched, such as stalls per


255
00:08:08,986 --> 00:08:09,326
hour.


256
00:08:09,926 --> 00:08:13,976
A stall of 30 seconds is much


257
00:08:13,976 --> 00:08:16,296
worse to the user than a stall


258
00:08:16,296 --> 00:08:17,206
of one second.


259
00:08:17,436 --> 00:08:19,296
This is why we also care about


260
00:08:19,506 --> 00:08:20,806
rebuffering time or stall


261
00:08:20,806 --> 00:08:21,356
duration.


262
00:08:22,276 --> 00:08:23,716
By measuring the time interval


263
00:08:23,716 --> 00:08:25,026
between playback stalled


264
00:08:25,026 --> 00:08:26,956
notification and when the player


265
00:08:26,956 --> 00:08:28,566
item time base changes back to


266
00:08:28,566 --> 00:08:31,306
1, you can compute an accurate


267
00:08:31,306 --> 00:08:32,206
stall duration.


268
00:08:32,936 --> 00:08:34,956
Again, the total duration can be


269
00:08:34,956 --> 00:08:37,206
normalized using the duration


270
00:08:37,206 --> 00:08:38,746
watched of the session.


271
00:08:39,025 --> 00:08:40,106
Well, you might be wondering at


272
00:08:40,106 --> 00:08:41,356
this point, how do I compute the


273
00:08:41,356 --> 00:08:43,006
duration watched of a session?


274
00:08:43,395 --> 00:08:44,826
And the answer is, through the


275
00:08:44,826 --> 00:08:45,636
Access Log.


276
00:08:45,636 --> 00:08:46,596
Let's see how we do that.


277
00:08:47,686 --> 00:08:49,866
So this is a snippet of code.


278
00:08:50,806 --> 00:08:52,396
First, we get a reference to the


279
00:08:52,396 --> 00:08:54,126
Access Log from the player item.


280
00:08:55,096 --> 00:08:57,386
We iterate through the events in


281
00:08:57,386 --> 00:08:59,316
the Access Log, and we simply


282
00:08:59,316 --> 00:09:02,156
sum up each events duration


283
00:09:02,156 --> 00:09:02,456
watch.


284
00:09:02,456 --> 00:09:03,056
And there you have it.


285
00:09:03,056 --> 00:09:04,466
We computed a total duration


286
00:09:04,466 --> 00:09:05,406
watch for a session.


287
00:09:05,936 --> 00:09:07,416
And now you may be wondering,


288
00:09:07,416 --> 00:09:08,576
well what is this event?


289
00:09:08,576 --> 00:09:09,946
What is an event in the access


290
00:09:09,946 --> 00:09:10,456
log mean?


291
00:09:10,726 --> 00:09:12,206
Well, for that let's look at how


292
00:09:12,206 --> 00:09:14,486
AV Player Item Access Log works.


293
00:09:15,306 --> 00:09:16,976
So the AV Player Item Access Log


294
00:09:16,976 --> 00:09:18,356
provides a history of your


295
00:09:18,356 --> 00:09:18,876
session.


296
00:09:19,476 --> 00:09:21,196
It is initially null, but as


297
00:09:21,196 --> 00:09:23,476
playback occurs, you're going to


298
00:09:23,476 --> 00:09:25,476
receive an AV Player Item New


299
00:09:25,476 --> 00:09:27,086
Access Log Entry notification,


300
00:09:27,086 --> 00:09:28,746
and by that time, you'll have an


301
00:09:28,746 --> 00:09:29,396
Access Log.


302
00:09:29,916 --> 00:09:30,946
You'll see that events in the


303
00:09:30,946 --> 00:09:33,136
Access Log contain information


304
00:09:33,856 --> 00:09:36,426
on various areas such as the


305
00:09:36,426 --> 00:09:38,436
current variant URL, the current


306
00:09:38,436 --> 00:09:41,326
bitrate, duration watch, number


307
00:09:41,326 --> 00:09:42,466
of stalls, and so on.


308
00:09:43,296 --> 00:09:45,636
These values are initially by


309
00:09:45,636 --> 00:09:47,076
convention initialized to a


310
00:09:47,786 --> 00:09:49,326
negative value or null.


311
00:09:49,906 --> 00:09:52,316
As playback occurs, they are


312
00:09:52,316 --> 00:09:53,706
updated with actual measurement


313
00:09:53,706 --> 00:09:55,756
data and the actual variant URL


314
00:09:55,756 --> 00:09:56,406
that you're playing.


315
00:09:56,406 --> 00:09:59,016
There are two cases in which we


316
00:09:59,016 --> 00:10:00,576
will add new events to the


317
00:10:00,576 --> 00:10:02,886
Access Log, and that is variant


318
00:10:02,886 --> 00:10:04,916
switch, like in this case, or a


319
00:10:04,916 --> 00:10:05,806
playback seek.


320
00:10:06,256 --> 00:10:08,056
But before a new event is added,


321
00:10:08,126 --> 00:10:10,036
the old one becomes immutable,


322
00:10:10,416 --> 00:10:11,926
and then we add the new event.


323
00:10:12,226 --> 00:10:13,606
Now, keep in mind that while


324
00:10:13,606 --> 00:10:16,066
these values here are constantly


325
00:10:16,066 --> 00:10:17,876
updating as playback occurs, so


326
00:10:17,876 --> 00:10:20,286
the values in the last event,


327
00:10:21,436 --> 00:10:22,586
they are not observable


328
00:10:22,586 --> 00:10:22,976
properties.


329
00:10:25,116 --> 00:10:26,966
We also mentioned that we care


330
00:10:26,966 --> 00:10:29,466
about media quality.


331
00:10:29,956 --> 00:10:31,566
How do we compute that?


332
00:10:33,376 --> 00:10:35,326
A way to measure if the user is


333
00:10:35,326 --> 00:10:36,966
presented with the best possible


334
00:10:36,966 --> 00:10:38,346
media quality is of course to


335
00:10:38,346 --> 00:10:39,686
look at the video bitrate being


336
00:10:39,686 --> 00:10:40,136
served.


337
00:10:40,636 --> 00:10:42,646
Here we don't really care about


338
00:10:42,646 --> 00:10:44,416
the startup time or the stall


339
00:10:44,416 --> 00:10:46,026
duration, so let's remove those.


340
00:10:46,396 --> 00:10:47,646
So we're left with the playback


341
00:10:47,646 --> 00:10:47,946
state.


342
00:10:48,446 --> 00:10:50,066
In this example, we see that we


343
00:10:50,066 --> 00:10:52,426
played for a longer time on the


344
00:10:52,426 --> 00:10:55,536
2 megabit variant and less time


345
00:10:55,576 --> 00:10:56,476
at 1 megabit.


346
00:10:57,016 --> 00:10:59,166
By time weighting each bitrate,


347
00:10:59,466 --> 00:11:01,326
we can obtain a single value of


348
00:11:01,326 --> 00:11:02,766
video quality that we can


349
00:11:02,766 --> 00:11:04,956
compare across sessions.


350
00:11:06,046 --> 00:11:07,226
We call this measure a


351
00:11:07,226 --> 00:11:09,206
Time-Weighted Indicated Bitrate,


352
00:11:09,586 --> 00:11:11,706
and computing it is just as


353
00:11:11,836 --> 00:11:13,656
simple as with the total


354
00:11:13,656 --> 00:11:14,266
duration.


355
00:11:15,116 --> 00:11:17,496
Once again, we get a reference


356
00:11:17,496 --> 00:11:19,176
to the Player Items Access Log.


357
00:11:19,546 --> 00:11:21,076
We iterate through the events in


358
00:11:21,076 --> 00:11:21,526
the log.


359
00:11:21,846 --> 00:11:23,526
We compute the time weight of


360
00:11:23,526 --> 00:11:25,026
each event with respect to the


361
00:11:25,026 --> 00:11:26,936
total duration watch we computed


362
00:11:26,936 --> 00:11:29,396
earlier, and finally, we sum up


363
00:11:29,586 --> 00:11:31,126
the weighted bitrate value.


364
00:11:31,526 --> 00:11:33,036
Now keep in mind that some of


365
00:11:33,036 --> 00:11:35,546
these properties may not be


366
00:11:35,546 --> 00:11:36,516
initialized, so do the


367
00:11:36,516 --> 00:11:39,206
appropriate checks in your code.


368
00:11:41,076 --> 00:11:42,656
Another event which you must


369
00:11:42,656 --> 00:11:44,286
absolutely track is of course


370
00:11:44,376 --> 00:11:45,306
playback failure.


371
00:11:45,866 --> 00:11:47,526
To do that, you observe the AV


372
00:11:47,526 --> 00:11:48,796
Player item status.


373
00:11:49,646 --> 00:11:51,256
If the value ever changes to


374
00:11:51,256 --> 00:11:52,986
false, it means AV Player


375
00:11:52,986 --> 00:11:54,376
encountered an unrecoverable


376
00:11:54,376 --> 00:11:54,746
error.


377
00:11:55,666 --> 00:11:56,926
A good way to transform this


378
00:11:56,926 --> 00:11:58,576
observation into a KPI?


379
00:11:59,736 --> 00:12:02,856
Well, one way to do it is to


380
00:12:03,026 --> 00:12:04,636
look at the percentage of failed


381
00:12:04,636 --> 00:12:06,526
sessions with respect to total


382
00:12:06,526 --> 00:12:07,436
sessions, but there might be


383
00:12:07,436 --> 00:12:08,206
other ways to do it.


384
00:12:08,856 --> 00:12:10,636
One thing I want to stress here


385
00:12:10,636 --> 00:12:12,596
is that not all errors in your


386
00:12:12,596 --> 00:12:14,246
stream may be fatal.


387
00:12:14,376 --> 00:12:16,316
Some may impact media quality


388
00:12:16,536 --> 00:12:18,066
while some might not even be


389
00:12:18,066 --> 00:12:19,386
perceivable by the user.


390
00:12:19,676 --> 00:12:21,046
But nonetheless, if there are


391
00:12:21,046 --> 00:12:23,806
errors, they convey that there


392
00:12:23,806 --> 00:12:25,656
is an issue with your stream.


393
00:12:25,876 --> 00:12:29,286
So how do I get more insights on


394
00:12:29,286 --> 00:12:30,176
the stream, right, what


395
00:12:30,176 --> 00:12:30,626
happened?


396
00:12:31,176 --> 00:12:32,986
And the answer is from the


397
00:12:32,986 --> 00:12:34,586
Player Item Error Log.


398
00:12:35,436 --> 00:12:37,046
The AV Player Item Error Log.


399
00:12:37,156 --> 00:12:38,756
The Error Log conveys failures


400
00:12:38,756 --> 00:12:40,186
with varying degrees of user


401
00:12:40,186 --> 00:12:40,636
impact.


402
00:12:41,136 --> 00:12:43,626
It works in a similar fashion as


403
00:12:43,836 --> 00:12:45,446
the Access Log except that


404
00:12:45,446 --> 00:12:47,426
events represent error rather


405
00:12:47,426 --> 00:12:48,806
than player access states.


406
00:12:49,936 --> 00:12:52,766
They cover various areas, such


407
00:12:52,766 --> 00:12:54,586
as delivery issues, network


408
00:12:54,586 --> 00:12:56,416
issues, content authoring


409
00:12:56,416 --> 00:12:57,476
errors, and so on.


410
00:12:57,666 --> 00:12:59,476
For instance, they can give you


411
00:12:59,476 --> 00:13:01,076
an insight on why a stall


412
00:13:01,076 --> 00:13:03,296
occurred, such as no response


413
00:13:03,296 --> 00:13:04,766
for a media file for about ten


414
00:13:04,766 --> 00:13:05,286
seconds.


415
00:13:05,886 --> 00:13:09,126
So we talked about startup time


416
00:13:09,126 --> 00:13:10,456
that you can track for every


417
00:13:10,456 --> 00:13:11,006
session.


418
00:13:11,646 --> 00:13:12,876
We encourage you to take a look


419
00:13:12,876 --> 00:13:14,256
at the distribution of startup


420
00:13:14,286 --> 00:13:15,666
times for your application.


421
00:13:16,346 --> 00:13:18,086
We also talked about stall


422
00:13:18,086 --> 00:13:19,906
occurrence and stall duration.


423
00:13:20,926 --> 00:13:22,356
We mentioned that Time-Weighted


424
00:13:22,436 --> 00:13:23,816
Indicated Bitrate is a good


425
00:13:23,816 --> 00:13:25,716
indication of experienced media


426
00:13:25,716 --> 00:13:27,946
quality across a session, and


427
00:13:27,946 --> 00:13:29,526
finally, you probably want to


428
00:13:29,526 --> 00:13:30,916
keep the percentage of failed


429
00:13:30,916 --> 00:13:32,806
sessions as low as possible.


430
00:13:36,716 --> 00:13:39,066
Keep in mind that not all KPIs


431
00:13:39,066 --> 00:13:41,606
are comparable across sessions.


432
00:13:42,246 --> 00:13:44,256
One example of that is that AV


433
00:13:44,256 --> 00:13:46,476
Player foundation uses the AV


434
00:13:46,476 --> 00:13:48,696
Player layer size on the screen


435
00:13:48,916 --> 00:13:50,606
to evaluate illegible variants


436
00:13:50,606 --> 00:13:51,116
for HLS.


437
00:13:51,686 --> 00:13:53,246
So for instance, if you've got


438
00:13:53,336 --> 00:13:55,556
10 ATP content, it will probably


439
00:13:55,556 --> 00:13:57,486
not be displayed on a 200 pixel


440
00:13:57,486 --> 00:13:58,856
view, but it doesn't mean the


441
00:13:58,856 --> 00:14:01,046
user experienced poor image


442
00:14:01,046 --> 00:14:01,486
quality.


443
00:14:02,026 --> 00:14:03,826
What to do then?


444
00:14:03,966 --> 00:14:05,366
We recommend that you gather


445
00:14:05,366 --> 00:14:07,276
additional context information


446
00:14:07,346 --> 00:14:08,296
along with your streaming


447
00:14:08,296 --> 00:14:08,886
metrics.


448
00:14:09,466 --> 00:14:10,876
This will allow you to later


449
00:14:10,926 --> 00:14:12,556
partition your playback sessions


450
00:14:12,776 --> 00:14:14,296
in classes that make sense for


451
00:14:14,296 --> 00:14:15,106
your application.


452
00:14:16,396 --> 00:14:18,726
Sample code for this section is


453
00:14:18,726 --> 00:14:20,306
available on the Apple developer


454
00:14:20,306 --> 00:14:21,786
website as part of the HLS


455
00:14:21,786 --> 00:14:23,136
catalogue sample.


456
00:14:24,276 --> 00:14:26,776
Now, please let me welcome


457
00:14:26,776 --> 00:14:28,026
Zhenheng Li, who will talk to


458
00:14:28,026 --> 00:14:29,186
you about ways to improve HLS


459
00:14:29,186 --> 00:14:29,636
performance.


460
00:14:29,636 --> 00:14:29,976
Thank you.


461
00:14:30,516 --> 00:14:34,666
[ Applause ]


462
00:14:35,166 --> 00:14:35,866
>> Thank you, Emil.


463
00:14:43,076 --> 00:14:43,626
Hello, everyone.


464
00:14:43,736 --> 00:14:44,816
My name is Zhenheng.


465
00:14:45,376 --> 00:14:50,236
We have discussed all the KPIs


466
00:14:50,556 --> 00:14:52,636
that our users care the most.


467
00:14:53,256 --> 00:14:55,166
In this part of talk, let's


468
00:14:55,246 --> 00:14:57,076
focus on ways to improve these


469
00:14:57,076 --> 00:14:57,416
APIs.


470
00:14:57,456 --> 00:14:59,826
We will look deeper in three


471
00:14:59,826 --> 00:15:00,376
areas.


472
00:15:00,976 --> 00:15:03,646
One, how to reduce the startup


473
00:15:03,746 --> 00:15:04,036
time.


474
00:15:05,136 --> 00:15:07,486
Two, how to investigate and


475
00:15:07,486 --> 00:15:08,346
avoid stalls.


476
00:15:09,186 --> 00:15:11,736
Three, how to investigate and


477
00:15:11,736 --> 00:15:12,906
avoid errors.


478
00:15:13,506 --> 00:15:14,276
Let's get started.


479
00:15:15,756 --> 00:15:17,616
So what can delay start of


480
00:15:17,676 --> 00:15:18,166
playback?


481
00:15:19,006 --> 00:15:20,596
Here is an example of the


482
00:15:20,596 --> 00:15:23,056
operations from the user clicks


483
00:15:23,056 --> 00:15:25,186
play until the video start to


484
00:15:25,186 --> 00:15:25,536
play back.


485
00:15:27,096 --> 00:15:28,606
The application create every


486
00:15:28,606 --> 00:15:31,026
asset and start inspection of


487
00:15:31,026 --> 00:15:33,756
the asset to find out durations


488
00:15:34,146 --> 00:15:36,646
and awardable media options of


489
00:15:36,646 --> 00:15:37,226
the asset.


490
00:15:38,106 --> 00:15:40,016
It takes a few round trip


491
00:15:40,516 --> 00:15:42,526
between the device and the


492
00:15:42,526 --> 00:15:44,946
content server to download the


493
00:15:45,136 --> 00:15:47,096
master playlist and [inaudible]


494
00:15:47,236 --> 00:15:47,656
playlist.


495
00:15:48,606 --> 00:15:50,756
After that, the application


496
00:15:50,756 --> 00:15:53,256
create AV Player and AV Player


497
00:15:53,256 --> 00:15:53,696
Item.


498
00:15:54,646 --> 00:15:55,426
Buffering starts.


499
00:15:56,966 --> 00:15:59,096
Oftentime, buffering is


500
00:15:59,096 --> 00:16:01,136
interrupted, content is


501
00:16:01,136 --> 00:16:01,716
encrypted.


502
00:16:02,606 --> 00:16:04,386
It takes a few round trips


503
00:16:04,436 --> 00:16:06,216
between the device and


504
00:16:06,216 --> 00:16:07,846
[inaudible] to fetch the


505
00:16:07,846 --> 00:16:08,776
decryption keys.


506
00:16:09,576 --> 00:16:11,256
Once the keys are fetched,


507
00:16:12,876 --> 00:16:14,306
buffering resumes.


508
00:16:15,046 --> 00:16:17,336
However, it may be interrupted


509
00:16:17,336 --> 00:16:17,756
again.


510
00:16:18,346 --> 00:16:20,846
Let's say the application offers


511
00:16:20,936 --> 00:16:22,986
a feature, resumes from the


512
00:16:22,986 --> 00:16:24,506
previously watched point.


513
00:16:25,546 --> 00:16:27,816
Application sets a sic time, a


514
00:16:27,816 --> 00:16:28,876
set [inaudible] time on the


515
00:16:28,916 --> 00:16:31,116
player on behalf of the user.


516
00:16:32,096 --> 00:16:34,366
Every player discard the


517
00:16:34,366 --> 00:16:36,396
existing buffer and start


518
00:16:36,396 --> 00:16:37,966
download from a new location.


519
00:16:38,656 --> 00:16:39,856
Segment 100.


520
00:16:41,776 --> 00:16:43,516
Again, it maybe interrupted.


521
00:16:44,026 --> 00:16:47,246
Users has a language preference


522
00:16:47,326 --> 00:16:49,356
setting in the application.


523
00:16:50,186 --> 00:16:52,316
She or he prefers Spanish audio.


524
00:16:53,226 --> 00:16:55,596
Thus, application sets media


525
00:16:55,596 --> 00:16:56,966
selection on the player item,


526
00:16:57,996 --> 00:16:59,656
existing audio buffer being


527
00:16:59,656 --> 00:17:01,906
discarded, player start


528
00:17:01,906 --> 00:17:04,046
downloading from a different


529
00:17:04,425 --> 00:17:05,266
language variant.


530
00:17:05,266 --> 00:17:08,736
In a few seconds later, player


531
00:17:08,736 --> 00:17:11,965
item notifies playback is like


532
00:17:11,996 --> 00:17:14,306
to keep up, application sets a


533
00:17:14,306 --> 00:17:14,626
rate.


534
00:17:15,376 --> 00:17:17,106
Playback starts, and it


535
00:17:17,106 --> 00:17:17,746
continues.


536
00:17:18,465 --> 00:17:20,856
All this time, user is waiting.


537
00:17:22,165 --> 00:17:25,746
So as we can see, it does take a


538
00:17:25,746 --> 00:17:28,266
few time-consuming operations to


539
00:17:28,266 --> 00:17:30,686
start up, run a trip between the


540
00:17:31,076 --> 00:17:33,436
device and the content server


541
00:17:33,896 --> 00:17:34,796
and the key servers.


542
00:17:35,326 --> 00:17:37,726
Round trip times between AV


543
00:17:37,726 --> 00:17:39,556
Player and applications,


544
00:17:40,156 --> 00:17:42,236
oftentimes these two sit at


545
00:17:42,236 --> 00:17:43,266
different processes.


546
00:17:44,446 --> 00:17:46,176
So how the application measures


547
00:17:46,516 --> 00:17:48,506
the time cost and startup time?


548
00:17:49,536 --> 00:17:52,776
It may measure the time spent


549
00:17:52,776 --> 00:17:55,426
between the API calls and the


550
00:17:55,426 --> 00:17:56,936
player and the Player Item


551
00:17:57,156 --> 00:17:58,916
status change notifications.


552
00:17:59,516 --> 00:18:02,836
Every player item also offers


553
00:18:02,936 --> 00:18:05,546
startup time in the Access Log.


554
00:18:06,146 --> 00:18:09,416
This time is measured by the AV


555
00:18:09,456 --> 00:18:11,986
Player item, represents the time


556
00:18:11,986 --> 00:18:13,476
for buffering only.


557
00:18:14,506 --> 00:18:15,816
It's measured from the start


558
00:18:15,816 --> 00:18:17,896
media downloading until the


559
00:18:17,896 --> 00:18:19,976
first playback is selected to


560
00:18:19,976 --> 00:18:20,376
keep up.


561
00:18:21,676 --> 00:18:23,366
So our user wants the video to


562
00:18:23,366 --> 00:18:26,326
start fast, in at most a few


563
00:18:26,326 --> 00:18:26,876
seconds.


564
00:18:27,366 --> 00:18:29,546
There are ways to achieve that.


565
00:18:30,236 --> 00:18:33,606
One option, we can move some


566
00:18:33,606 --> 00:18:36,006
operations to a different stage


567
00:18:36,826 --> 00:18:39,886
before the user clicks play.


568
00:18:40,676 --> 00:18:43,776
For example, AV Asset creation


569
00:18:44,556 --> 00:18:46,266
and inspection can be moved out.


570
00:18:46,966 --> 00:18:50,376
Key fetching can be moved out.


571
00:18:51,756 --> 00:18:54,456
Thus, when the users starts a


572
00:18:54,456 --> 00:18:57,766
video playback, there is less


573
00:18:57,766 --> 00:18:58,616
waiting time.


574
00:18:59,296 --> 00:19:00,886
So where do we move those


575
00:19:00,886 --> 00:19:01,866
operations to?


576
00:19:03,916 --> 00:19:06,156
While your user is viewing the


577
00:19:06,156 --> 00:19:09,286
video catalogue or video info,


578
00:19:09,776 --> 00:19:11,336
it's a good time to create an


579
00:19:12,356 --> 00:19:15,026
inspect AV Asset before the user


580
00:19:15,026 --> 00:19:17,696
decides to play.


581
00:19:17,916 --> 00:19:19,926
Now, last year we had introduced


582
00:19:19,926 --> 00:19:21,446
AV Content Key Session API.


583
00:19:22,346 --> 00:19:25,646
This new API decouples the media


584
00:19:25,646 --> 00:19:27,056
load from key fetching.


585
00:19:27,596 --> 00:19:29,836
It gives the application total


586
00:19:29,836 --> 00:19:31,326
control on key management.


587
00:19:31,926 --> 00:19:35,336
It offers ways to optimize key


588
00:19:35,336 --> 00:19:37,416
fetching, such as bundling up


589
00:19:37,416 --> 00:19:39,316
multiple key requests back to


590
00:19:39,816 --> 00:19:40,686
the key server.


591
00:19:41,566 --> 00:19:43,346
If you happen to adopt AV


592
00:19:43,346 --> 00:19:45,906
Content Key Session, spending a


593
00:19:45,906 --> 00:19:47,686
few hours of engineering hours,


594
00:19:48,566 --> 00:19:50,886
your user will notice a faster


595
00:19:50,886 --> 00:19:52,356
startup time.


596
00:19:53,476 --> 00:19:56,136
So we have moved the AV Asset


597
00:19:56,186 --> 00:19:58,436
creation and key fetching out of


598
00:19:58,436 --> 00:19:59,316
startup time.


599
00:19:59,896 --> 00:20:03,256
Now what's left is mainly the AV


600
00:20:03,306 --> 00:20:05,906
Player Item buffering time and


601
00:20:05,906 --> 00:20:08,576
the communication time from AV


602
00:20:08,576 --> 00:20:10,286
Player and your application.


603
00:20:11,356 --> 00:20:14,686
Oftentime, app may be able to


604
00:20:14,906 --> 00:20:18,266
avoid buffering, such as due to


605
00:20:19,176 --> 00:20:19,846
[inaudible] or due to media


606
00:20:19,846 --> 00:20:20,346
options.


607
00:20:20,906 --> 00:20:24,036
We can even try to reduce the


608
00:20:24,036 --> 00:20:26,736
round trip time between the


609
00:20:26,736 --> 00:20:28,136
player and the application.


610
00:20:29,186 --> 00:20:30,946
Thus the startup is further


611
00:20:30,946 --> 00:20:31,646
reduced.


612
00:20:33,056 --> 00:20:33,806
Let's take a look.


613
00:20:34,386 --> 00:20:38,386
When you create AV Player Item,


614
00:20:38,996 --> 00:20:42,246
if you know where your user is


615
00:20:42,246 --> 00:20:44,016
intending to start the playback,


616
00:20:45,056 --> 00:20:46,716
set the current time on player


617
00:20:46,716 --> 00:20:47,176
item.


618
00:20:47,846 --> 00:20:49,106
If you know what are the media


619
00:20:49,106 --> 00:20:51,476
options such as which language


620
00:20:51,476 --> 00:20:53,966
to download for playback, set


621
00:20:53,966 --> 00:20:56,956
that as well before you set the


622
00:20:56,956 --> 00:20:58,906
AV Player item onto the player.


623
00:20:59,806 --> 00:21:01,456
Same with the AV plyer.


624
00:21:02,006 --> 00:21:03,946
As soon as the user click play,


625
00:21:05,106 --> 00:21:07,336
set rate before the start


626
00:21:07,336 --> 00:21:11,056
downloading for the AV Player


627
00:21:11,116 --> 00:21:11,406
Item.


628
00:21:12,086 --> 00:21:13,496
Thus, the playback will start


629
00:21:13,496 --> 00:21:16,586
automatically as soon as Player


630
00:21:16,586 --> 00:21:18,176
Item has enough to play back.


631
00:21:19,016 --> 00:21:22,386
In summary, set up AV Player


632
00:21:22,646 --> 00:21:23,366
before buffering.


633
00:21:24,486 --> 00:21:27,476
Set AV Player rate before


634
00:21:28,366 --> 00:21:31,076
setting the player item onto the


635
00:21:31,146 --> 00:21:31,646
player.


636
00:21:31,696 --> 00:21:36,096
A lot of application offers a


637
00:21:36,096 --> 00:21:38,626
feature to allow the user choose


638
00:21:39,176 --> 00:21:41,696
multiple videos and play one


639
00:21:41,746 --> 00:21:43,936
after another, such as binge


640
00:21:43,936 --> 00:21:45,576
watching TV episodes.


641
00:21:46,756 --> 00:21:48,636
We have seen implementation such


642
00:21:48,636 --> 00:21:50,986
as one player and one player


643
00:21:50,986 --> 00:21:52,266
item per video.


644
00:21:52,846 --> 00:21:54,616
There's always a startup


645
00:21:54,746 --> 00:21:56,616
buffering time for each new


646
00:21:56,616 --> 00:21:57,036
video.


647
00:21:57,706 --> 00:21:59,686
You may reduce that buffering


648
00:22:00,236 --> 00:22:02,956
time for the new video by AV


649
00:22:02,956 --> 00:22:03,936
Queue Player.


650
00:22:05,576 --> 00:22:07,916
Create multiple player items,


651
00:22:08,426 --> 00:22:10,356
include them all on the play


652
00:22:10,356 --> 00:22:10,706
queue.


653
00:22:11,256 --> 00:22:14,356
While the player is playing the


654
00:22:14,356 --> 00:22:17,796
current item, when the media


655
00:22:17,796 --> 00:22:19,186
download finishes for the


656
00:22:19,186 --> 00:22:22,246
current item, player will start


657
00:22:22,246 --> 00:22:23,626
downloading for the next one


658
00:22:24,226 --> 00:22:25,546
while the current one is still


659
00:22:25,546 --> 00:22:26,016
playing.


660
00:22:27,346 --> 00:22:30,666
Thus, the next player item will


661
00:22:30,666 --> 00:22:32,656
start playback as soon as


662
00:22:32,706 --> 00:22:34,916
current event play to the end.


663
00:22:35,526 --> 00:22:39,446
So do use AV Queue Player to


664
00:22:39,446 --> 00:22:42,086
play multiple items and enqueue


665
00:22:42,086 --> 00:22:44,256
second AV Player Item well in


666
00:22:44,256 --> 00:22:44,826
advance.


667
00:22:47,406 --> 00:22:48,266
So what's left now?


668
00:22:49,516 --> 00:22:50,266
Buffering time.


669
00:22:51,446 --> 00:22:54,316
First, what determine network


670
00:22:54,316 --> 00:22:55,086
buffering time.


671
00:22:55,696 --> 00:22:56,566
Four factors.


672
00:22:57,796 --> 00:23:00,886
The choice of your variant, the


673
00:23:01,136 --> 00:23:04,556
content bitrate, your playlist


674
00:23:04,556 --> 00:23:06,696
target duration, and of course,


675
00:23:06,696 --> 00:23:09,276
last, the network bandwidth.


676
00:23:09,806 --> 00:23:13,706
Let's take a look a few examples


677
00:23:13,706 --> 00:23:14,776
of buffering time.


678
00:23:16,286 --> 00:23:18,476
First, it's a simple master


679
00:23:18,476 --> 00:23:19,016
playlist.


680
00:23:19,396 --> 00:23:22,236
It specifies an ATP video at


681
00:23:22,236 --> 00:23:24,386
about 5 mbps.


682
00:23:24,386 --> 00:23:26,656
Let's assume the network


683
00:23:26,656 --> 00:23:28,986
bandwidth is around 6 mbps.


684
00:23:28,986 --> 00:23:31,436
Our target duration is 10


685
00:23:31,436 --> 00:23:31,896
seconds.


686
00:23:32,886 --> 00:23:35,116
In most of the cases, player


687
00:23:35,186 --> 00:23:38,556
item buffers one segment before


688
00:23:39,446 --> 00:23:41,216
it notifies playback it like to


689
00:23:41,216 --> 00:23:42,526
keep up.


690
00:23:42,636 --> 00:23:46,336
However, the same master


691
00:23:46,336 --> 00:23:48,816
playlist, almost the same


692
00:23:48,816 --> 00:23:51,676
network condition, the user may


693
00:23:51,676 --> 00:23:54,246
observe slower startup.


694
00:23:55,996 --> 00:23:58,216
The reason is, remember, the


695
00:23:58,216 --> 00:24:00,256
network bandwidths change, and


696
00:24:00,256 --> 00:24:02,366
the content bitrate also change.


697
00:24:02,776 --> 00:24:04,506
In this case, there are a few


698
00:24:04,506 --> 00:24:05,686
segments take longer to


699
00:24:05,686 --> 00:24:06,176
download.


700
00:24:06,566 --> 00:24:08,106
Thus, it takes longer to start.


701
00:24:09,086 --> 00:24:11,946
To solve this problem, offering


702
00:24:13,286 --> 00:24:14,916
a variant with lower bitrate may


703
00:24:14,916 --> 00:24:15,236
help.


704
00:24:16,896 --> 00:24:19,936
Player may decide to switch down


705
00:24:20,426 --> 00:24:23,586
and start up sooner.


706
00:24:24,336 --> 00:24:26,056
When all other information is


707
00:24:26,056 --> 00:24:29,026
absent, the first listed variant


708
00:24:29,026 --> 00:24:30,946
will be your startup variant.


709
00:24:31,586 --> 00:24:34,636
So in this example, same two


710
00:24:35,006 --> 00:24:35,536
variants.


711
00:24:36,216 --> 00:24:37,466
The lower bitrate is listed


712
00:24:37,506 --> 00:24:39,496
first with same network


713
00:24:39,496 --> 00:24:40,106
condition.


714
00:24:40,636 --> 00:24:43,666
Player will start faster, start


715
00:24:45,196 --> 00:24:47,446
up faster and also switch up


716
00:24:47,766 --> 00:24:50,086
pretty quickly given the network


717
00:24:50,086 --> 00:24:52,196
bandwidth is sufficient for


718
00:24:52,196 --> 00:24:52,646
playback.


719
00:24:53,936 --> 00:24:58,466
In summary, to reduce network


720
00:24:58,466 --> 00:25:00,306
buffering time, make a wise


721
00:25:00,306 --> 00:25:01,736
choice of initial variant.


722
00:25:02,936 --> 00:25:04,516
Lower content bitrate means


723
00:25:05,266 --> 00:25:07,676
shorter buffering time, but it


724
00:25:07,676 --> 00:25:09,826
is a tradeoff of video quality.


725
00:25:11,406 --> 00:25:13,486
If you are offering multiple


726
00:25:13,486 --> 00:25:16,366
media formats such as HDR and


727
00:25:16,496 --> 00:25:19,646
SDR videos or stereo audio and


728
00:25:19,646 --> 00:25:22,976
multiple-channel audios, make


729
00:25:22,976 --> 00:25:26,276
sure the initial variant for


730
00:25:26,316 --> 00:25:29,246
each media format are on similar


731
00:25:29,246 --> 00:25:32,216
level of bitrate so your user


732
00:25:32,216 --> 00:25:33,706
will have a similar experience


733
00:25:34,066 --> 00:25:36,166
regardless what kind of viewing


734
00:25:36,166 --> 00:25:37,826
setup they have.


735
00:25:38,536 --> 00:25:41,926
That's all about reduce startup


736
00:25:41,926 --> 00:25:42,216
time.


737
00:25:42,746 --> 00:25:43,926
Our video has started.


738
00:25:45,556 --> 00:25:47,566
Next, let's talk about stalls.


739
00:25:48,526 --> 00:25:51,186
To be really clear, stalls can


740
00:25:51,186 --> 00:25:53,396
happen, especially when the


741
00:25:53,396 --> 00:25:55,456
network bandwidth is really low.


742
00:25:56,176 --> 00:25:58,116
So in this part of talk, let's


743
00:25:58,116 --> 00:25:59,796
focus on how to investigate


744
00:25:59,906 --> 00:26:03,096
stalls and how to improve or


745
00:26:03,096 --> 00:26:03,636
avoid stalls.


746
00:26:04,196 --> 00:26:08,346
How the application investigate


747
00:26:08,346 --> 00:26:08,696
stalls.


748
00:26:09,246 --> 00:26:10,366
The application should be


749
00:26:10,366 --> 00:26:12,616
listening to the stall


750
00:26:12,616 --> 00:26:14,416
notification at all time.


751
00:26:16,296 --> 00:26:17,786
And the application should be


752
00:26:17,786 --> 00:26:20,286
also checking the AV Player


753
00:26:20,286 --> 00:26:23,096
status such as is playback


754
00:26:23,456 --> 00:26:27,546
likely to keep up.


755
00:26:27,546 --> 00:26:30,106
AV Player Item also offers Error


756
00:26:30,106 --> 00:26:32,006
Log and Access Logs.


757
00:26:32,576 --> 00:26:33,666
The application should be


758
00:26:33,906 --> 00:26:37,846
listening to an exam those logs


759
00:26:37,846 --> 00:26:38,996
when the stall happens.


760
00:26:39,546 --> 00:26:43,016
Next, let's take a look two


761
00:26:43,016 --> 00:26:43,896
stall examples.


762
00:26:44,716 --> 00:26:47,206
First, stall notification has


763
00:26:47,206 --> 00:26:48,476
been received by the


764
00:26:48,476 --> 00:26:49,096
application.


765
00:26:49,616 --> 00:26:51,956
The application should have


766
00:26:52,076 --> 00:26:54,116
received the Error Log as well.


767
00:26:55,126 --> 00:26:58,236
The error comments give you


768
00:26:58,396 --> 00:27:00,456
detailed information on what has


769
00:27:00,456 --> 00:27:00,886
happened.


770
00:27:01,456 --> 00:27:03,266
In this case, it says media file


771
00:27:03,266 --> 00:27:05,206
not received in 15 seconds.


772
00:27:06,406 --> 00:27:09,056
Application checks Access Log to


773
00:27:09,056 --> 00:27:12,286
find out what the AV Player was


774
00:27:12,346 --> 00:27:14,086
playing at the moment when the


775
00:27:14,086 --> 00:27:14,856
stall happened.


776
00:27:15,846 --> 00:27:17,886
It tells you detailed


777
00:27:17,886 --> 00:27:20,046
information such as the player


778
00:27:20,046 --> 00:27:22,746
was playing what content and


779
00:27:22,746 --> 00:27:23,186
such URI.


780
00:27:24,506 --> 00:27:26,036
The indicated bitrate is the


781
00:27:26,036 --> 00:27:27,046
content bitrate.


782
00:27:27,416 --> 00:27:30,656
In this case, 36 mbps, and that


783
00:27:30,656 --> 00:27:31,756
is a [inaudible] content.


784
00:27:32,606 --> 00:27:35,166
An observed bitrate is the


785
00:27:35,356 --> 00:27:36,766
current network bandwidth.


786
00:27:37,066 --> 00:27:39,616
In this case is 2.8 mbps.


787
00:27:40,236 --> 00:27:43,126
It's obviously due to the


788
00:27:43,126 --> 00:27:45,276
network bandwidth can't catch up


789
00:27:45,316 --> 00:27:47,286
with the content bitrate.


790
00:27:47,916 --> 00:27:50,536
So to deal with variable


791
00:27:50,536 --> 00:27:53,686
networks, remember to provide a


792
00:27:53,686 --> 00:27:54,706
full set of bitrate.


793
00:27:55,226 --> 00:27:57,436
Remember some of your users may


794
00:27:57,436 --> 00:27:58,966
have a slower network


795
00:27:58,966 --> 00:28:01,336
connection, or your user may be


796
00:28:01,336 --> 00:28:03,306
on the go, such as on cellular


797
00:28:03,596 --> 00:28:04,886
while viewing the video.


798
00:28:05,746 --> 00:28:07,236
If you're offering multiple


799
00:28:07,236 --> 00:28:09,846
video, multiple media formats,


800
00:28:10,616 --> 00:28:12,216
each codec combination needs


801
00:28:12,216 --> 00:28:15,826
it's own set of tiers.


802
00:28:16,806 --> 00:28:20,166
Not all stalls are due to


803
00:28:20,166 --> 00:28:21,096
network condition.


804
00:28:22,356 --> 00:28:23,416
Let's look at this one.


805
00:28:24,536 --> 00:28:26,986
Stall happened, Error Log tells


806
00:28:26,986 --> 00:28:28,486
you a different story this time.


807
00:28:29,786 --> 00:28:32,756
It says playlist file unchanged


808
00:28:32,756 --> 00:28:34,956
for two consecutive reads.


809
00:28:35,976 --> 00:28:37,976
If you check the Access Log at


810
00:28:37,976 --> 00:28:40,566
the time, player was playing


811
00:28:40,566 --> 00:28:40,986
live.


812
00:28:42,336 --> 00:28:43,816
They indicated the bitrate is


813
00:28:43,816 --> 00:28:44,456
rather low.


814
00:28:44,996 --> 00:28:48,296
The content is about 400K, and


815
00:28:48,296 --> 00:28:51,116
the network bandwidth is 3.7


816
00:28:51,116 --> 00:28:51,546
mbps.


817
00:28:51,956 --> 00:28:53,646
This look like a content


818
00:28:53,646 --> 00:28:54,586
delivery issue.


819
00:28:57,016 --> 00:28:59,156
So to reduce or to avoid stalls


820
00:28:59,156 --> 00:29:01,696
due to content delivery, content


821
00:29:01,696 --> 00:29:04,626
server and CDN must deliver


822
00:29:04,626 --> 00:29:07,166
media files, segments, keys


823
00:29:07,166 --> 00:29:08,246
without any delay.


824
00:29:09,196 --> 00:29:11,776
Update live playlist at least


825
00:29:11,776 --> 00:29:13,046
every target duration.


826
00:29:13,566 --> 00:29:15,446
The CDN [inaudible] must be


827
00:29:15,666 --> 00:29:17,576
configured to deliver most


828
00:29:17,576 --> 00:29:21,506
recent playlist to avoid stale


829
00:29:22,136 --> 00:29:22,416
playlists.


830
00:29:22,466 --> 00:29:24,146
Synchronized discontinuity


831
00:29:24,446 --> 00:29:25,516
sequence number between


832
00:29:25,516 --> 00:29:26,086
playlist.


833
00:29:27,996 --> 00:29:29,466
Indicate server-side failure


834
00:29:29,466 --> 00:29:32,736
clearly using right HTTP status


835
00:29:32,736 --> 00:29:33,096
code.


836
00:29:35,416 --> 00:29:36,856
That's all about stall.


837
00:29:37,336 --> 00:29:38,026
What about error?


838
00:29:39,206 --> 00:29:42,066
How do we investigate errors?


839
00:29:42,066 --> 00:29:44,746
There are a few ways.


840
00:29:45,906 --> 00:29:49,346
We have Error Log and Access Log


841
00:29:49,346 --> 00:29:51,226
from AV Player Item.


842
00:29:52,186 --> 00:29:55,486
We also have error property from


843
00:29:55,486 --> 00:29:57,196
every player and player item


844
00:29:57,516 --> 00:29:59,756
that the application can


845
00:30:00,326 --> 00:30:00,506
observe.


846
00:30:02,016 --> 00:30:04,066
In addition, we have some media


847
00:30:04,066 --> 00:30:06,176
validation tools for you to


848
00:30:06,486 --> 00:30:08,926
detect the content issue.


849
00:30:09,536 --> 00:30:11,076
Let's look at them one by one.


850
00:30:11,686 --> 00:30:15,086
AV Player Item Error Log, they


851
00:30:15,086 --> 00:30:17,116
have talked a little bit about


852
00:30:17,116 --> 00:30:17,696
[inaudible] in this one.


853
00:30:19,146 --> 00:30:21,056
This type of Error Log is an


854
00:30:21,056 --> 00:30:22,906
indication that there is a


855
00:30:22,906 --> 00:30:24,756
problem with network or content


856
00:30:24,756 --> 00:30:25,186
format.


857
00:30:25,746 --> 00:30:27,656
However, they are not always


858
00:30:27,656 --> 00:30:28,136
fatal.


859
00:30:28,726 --> 00:30:31,666
When the error is indicated,


860
00:30:31,856 --> 00:30:33,406
playback may be perfectly fine


861
00:30:33,626 --> 00:30:34,446
at that moment.


862
00:30:36,516 --> 00:30:38,126
However, the application showed


863
00:30:38,126 --> 00:30:40,356
the check in the error comments


864
00:30:40,706 --> 00:30:42,796
to find out details, such as


865
00:30:42,796 --> 00:30:43,306
this one.


866
00:30:44,366 --> 00:30:46,486
We have seen it before, media


867
00:30:46,486 --> 00:30:48,766
file not received in 15 seconds.


868
00:30:49,476 --> 00:30:51,286
So it's an indication that your


869
00:30:51,286 --> 00:30:54,286
user may have observed or will


870
00:30:54,286 --> 00:30:55,096
observe stalls.


871
00:30:56,916 --> 00:31:00,206
Now next one is HTTP error, it


872
00:31:00,206 --> 00:31:01,336
says file not found.


873
00:31:01,916 --> 00:31:03,716
This an indication of a content


874
00:31:03,716 --> 00:31:04,566
delivery issue.


875
00:31:05,376 --> 00:31:07,696
The user may observe audio loss,


876
00:31:07,916 --> 00:31:13,926
video loss, or both.


877
00:31:13,926 --> 00:31:15,516
[inaudible] specified bandwidth


878
00:31:15,516 --> 00:31:16,206
for variant.


879
00:31:16,576 --> 00:31:17,836
Now this is an interesting one.


880
00:31:18,096 --> 00:31:19,416
It's an indication of a stall


881
00:31:19,416 --> 00:31:19,856
risk.


882
00:31:20,236 --> 00:31:22,546
However, the playback may be


883
00:31:22,616 --> 00:31:24,656
perfectly fine when the error is


884
00:31:24,656 --> 00:31:25,296
indicated.


885
00:31:25,836 --> 00:31:28,336
It means some of the segments


886
00:31:28,336 --> 00:31:30,466
bitrate is higher than what is


887
00:31:30,466 --> 00:31:32,006
specified in the master


888
00:31:32,046 --> 00:31:32,556
playlist.


889
00:31:32,996 --> 00:31:36,276
Last example, crypto format


890
00:31:37,046 --> 00:31:39,196
error, unsupported crypto


891
00:31:39,196 --> 00:31:39,626
format.


892
00:31:40,026 --> 00:31:42,316
This may be an indication of a


893
00:31:42,316 --> 00:31:43,926
failure, a playback failure.


894
00:31:44,816 --> 00:31:47,926
All this error message and a few


895
00:31:47,926 --> 00:31:49,556
more that are not talked about


896
00:31:49,556 --> 00:31:52,006
here are very helpful when we


897
00:31:52,006 --> 00:31:54,586
have AV Player and Player Item


898
00:31:54,586 --> 00:31:54,966
errors.


899
00:31:55,816 --> 00:31:57,046
Let's take a look.


900
00:31:59,016 --> 00:32:00,476
The application should be


901
00:32:01,076 --> 00:32:03,476
observing AV Player Item status


902
00:32:04,006 --> 00:32:05,576
and AV Player Item error


903
00:32:05,576 --> 00:32:07,716
property to find out this type


904
00:32:07,716 --> 00:32:08,086
of error.


905
00:32:09,146 --> 00:32:10,816
These errors are fatal errors.


906
00:32:11,916 --> 00:32:13,056
When the error indicated


907
00:32:13,406 --> 00:32:15,106
playback has been terminated


908
00:32:15,106 --> 00:32:17,586
already, so what should we do?


909
00:32:18,306 --> 00:32:19,626
How do we find out the cause?


910
00:32:20,206 --> 00:32:22,016
Here is example.


911
00:32:22,806 --> 00:32:24,576
The application is observing


912
00:32:24,986 --> 00:32:27,706
player item status when the


913
00:32:27,706 --> 00:32:29,346
status changed to failed.


914
00:32:30,286 --> 00:32:32,936
Application go off to check the


915
00:32:32,936 --> 00:32:35,636
AV Player error properties as


916
00:32:35,636 --> 00:32:37,766
well as the Error Log from the


917
00:32:37,766 --> 00:32:39,416
AV Player Item.


918
00:32:41,376 --> 00:32:45,766
Here is the error property from


919
00:32:45,766 --> 00:32:46,716
the player item.


920
00:32:47,146 --> 00:32:48,446
It provides some useful


921
00:32:48,446 --> 00:32:49,056
information.


922
00:32:50,206 --> 00:32:52,296
Error code from AV foundation


923
00:32:52,296 --> 00:32:53,026
error domain.


924
00:32:53,746 --> 00:32:56,536
It also provides some hint, go


925
00:32:56,536 --> 00:32:59,246
off and check the Error Log from


926
00:32:59,246 --> 00:33:00,516
AV Player Item.


927
00:33:01,526 --> 00:33:05,446
So corresponding AV Player Error


928
00:33:05,446 --> 00:33:07,766
Log gives you much more details.


929
00:33:08,506 --> 00:33:10,706
It tells you on this data and


930
00:33:10,706 --> 00:33:13,786
the time and what URI with what


931
00:33:13,786 --> 00:33:14,396
type of error.


932
00:33:14,396 --> 00:33:16,546
So in this case, it's


933
00:33:16,546 --> 00:33:18,066
unsupported crypto format.


934
00:33:19,056 --> 00:33:22,226
It also tells you what type of


935
00:33:22,566 --> 00:33:24,496
network interface the device was


936
00:33:24,606 --> 00:33:29,356
on when the error happens.


937
00:33:29,606 --> 00:33:31,776
Next type of error, HDCP.


938
00:33:33,006 --> 00:33:34,796
If you are offering content that


939
00:33:34,796 --> 00:33:38,086
requires HDCP protection, your


940
00:33:38,086 --> 00:33:39,666
application should be observing


941
00:33:39,666 --> 00:33:42,336
this long property name,


942
00:33:42,736 --> 00:33:43,186
property.


943
00:33:43,736 --> 00:33:45,776
It's output obscured due to


944
00:33:46,076 --> 00:33:47,366
insufficient external


945
00:33:47,366 --> 00:33:48,066
protection.


946
00:33:49,236 --> 00:33:50,566
The value of this property


947
00:33:50,566 --> 00:33:52,406
changes to two means three


948
00:33:52,406 --> 00:33:52,726
things.


949
00:33:54,166 --> 00:33:57,386
Current item requires external


950
00:33:57,386 --> 00:33:57,996
protection.


951
00:33:58,726 --> 00:34:00,566
Device does not meet the


952
00:34:00,916 --> 00:34:01,696
protection level.


953
00:34:02,326 --> 00:34:04,506
User will observe or is already


954
00:34:04,506 --> 00:34:06,566
observing video loss, like


955
00:34:06,566 --> 00:34:07,866
through [inaudible] for example.


956
00:34:08,866 --> 00:34:13,255
To avoid this issue, your master


957
00:34:13,255 --> 00:34:16,565
playlist should offer at least


958
00:34:16,565 --> 00:34:19,226
one variant that does not


959
00:34:19,226 --> 00:34:21,926
require HDCP for fallback.


960
00:34:22,626 --> 00:34:24,656
Remember, not all your users has


961
00:34:24,876 --> 00:34:27,326
the viewing setup that is HDCP


962
00:34:27,326 --> 00:34:28,065
capable.


963
00:34:28,996 --> 00:34:31,436
App user interface should


964
00:34:31,436 --> 00:34:33,706
reflect the property change to


965
00:34:33,706 --> 00:34:35,116
timely hint the user.


966
00:34:36,496 --> 00:34:38,766
A lot of playback issues are


967
00:34:38,766 --> 00:34:40,616
introduced by content authoring


968
00:34:41,176 --> 00:34:43,396
such as audio and video out of


969
00:34:43,396 --> 00:34:46,166
syncope or glitches while


970
00:34:46,376 --> 00:34:46,916
[inaudible] switching.


971
00:34:48,085 --> 00:34:49,076
In addition to the error


972
00:34:49,076 --> 00:34:50,815
investigation and handling that


973
00:34:50,815 --> 00:34:53,146
we have talked about, we would


974
00:34:53,146 --> 00:34:55,755
encourage you to use our media


975
00:34:55,755 --> 00:34:58,656
stream validator too, which is


976
00:34:58,656 --> 00:35:00,596
available on the developer


977
00:35:00,596 --> 00:35:01,256
website.


978
00:35:02,026 --> 00:35:03,316
That's all I want to talk about


979
00:35:03,316 --> 00:35:03,826
it today.


980
00:35:04,606 --> 00:35:06,226
Now let's welcome my colleague,


981
00:35:06,266 --> 00:35:08,806
Eryk Vershen, to talk about how


982
00:35:10,136 --> 00:35:12,006
to author the master playlist


983
00:35:12,676 --> 00:35:13,266
the correct way.


984
00:35:13,796 --> 00:35:14,166
Thank you.


985
00:35:15,516 --> 00:35:18,500
[ Applause ]


986
00:35:25,046 --> 00:35:25,976
>> Thanks, Zhenheng.


987
00:35:26,346 --> 00:35:27,336
My name's Eryk Vershen.


988
00:35:27,336 --> 00:35:28,956
I'm an engineer working on HLS


989
00:35:28,956 --> 00:35:29,566
Tools.


990
00:35:29,566 --> 00:35:31,596
We've spoken about how to


991
00:35:31,596 --> 00:35:33,606
measure your performance and


992
00:35:33,826 --> 00:35:35,406
also how to address many of


993
00:35:35,406 --> 00:35:36,236
those concerns.


994
00:35:36,746 --> 00:35:38,166
However, one of the key elements


995
00:35:38,786 --> 00:35:40,436
to successful and error-free


996
00:35:40,436 --> 00:35:42,656
playback experience is to ensure


997
00:35:42,656 --> 00:35:44,636
that your master playlist is


998
00:35:44,636 --> 00:35:45,566
authored correctly.


999
00:35:46,246 --> 00:35:47,826
The master playlist is what


1000
00:35:47,826 --> 00:35:49,216
allows the player to make


1001
00:35:49,216 --> 00:35:51,426
intelligent decisions both


1002
00:35:51,476 --> 00:35:53,226
before and during playback.


1003
00:35:53,756 --> 00:35:55,196
So getting it right is critical.


1004
00:35:56,466 --> 00:35:57,176
There we go.


1005
00:35:57,176 --> 00:35:57,846
That's my advice.


1006
00:35:58,046 --> 00:35:59,246
No, I'm just kidding.


1007
00:35:59,646 --> 00:36:01,066
I think I need to give you a


1008
00:36:01,066 --> 00:36:02,356
little more background to


1009
00:36:02,356 --> 00:36:03,476
understand what Roger meant.


1010
00:36:04,426 --> 00:36:06,086
We want you to put all of the


1011
00:36:06,086 --> 00:36:07,706
encoding options you have into


1012
00:36:07,756 --> 00:36:09,666
your master playlist and to


1013
00:36:09,666 --> 00:36:11,256
describe them as completely as


1014
00:36:11,256 --> 00:36:11,796
possible.


1015
00:36:12,556 --> 00:36:13,676
Let's pretend you're asking me


1016
00:36:13,676 --> 00:36:14,296
questions.


1017
00:36:14,846 --> 00:36:17,876
This is the crucial question and


1018
00:36:17,876 --> 00:36:18,976
the main thing you have to get


1019
00:36:18,976 --> 00:36:19,296
right.


1020
00:36:20,316 --> 00:36:22,866
Now, first you have to remember


1021
00:36:22,866 --> 00:36:24,396
that just because a master


1022
00:36:24,396 --> 00:36:26,486
playlist works doesn't mean it's


1023
00:36:26,486 --> 00:36:26,826
right.


1024
00:36:27,446 --> 00:36:28,686
I've actually seen master


1025
00:36:28,686 --> 00:36:30,026
playlists that look remarkably


1026
00:36:30,026 --> 00:36:30,596
like this.


1027
00:36:30,996 --> 00:36:32,576
This is technically legal, and


1028
00:36:32,576 --> 00:36:33,756
it's next to useless.


1029
00:36:34,356 --> 00:36:36,456
I say, okay, well how about this


1030
00:36:36,456 --> 00:36:36,616
one?


1031
00:36:36,616 --> 00:36:37,956
It has a few more variants.


1032
00:36:38,816 --> 00:36:40,146
Well, it's a little bit better,


1033
00:36:40,146 --> 00:36:41,386
but it's still terrible.


1034
00:36:41,856 --> 00:36:42,836
Can we even play this?


1035
00:36:42,836 --> 00:36:43,986
What codec is it using?


1036
00:36:44,266 --> 00:36:45,156
Is it HDR?


1037
00:36:45,156 --> 00:36:46,166
Is it 60 fps?


1038
00:36:46,916 --> 00:36:48,316
You need to tell us everything.


1039
00:36:48,316 --> 00:36:49,636
We want you to tell us


1040
00:36:49,636 --> 00:36:50,096
everything.


1041
00:36:50,716 --> 00:36:52,256
For example, average bandwidth.


1042
00:36:52,536 --> 00:36:54,486
Average bandwidth enables us to


1043
00:36:54,486 --> 00:36:56,396
make better decisions about


1044
00:36:56,396 --> 00:36:57,616
which variant to switch to.


1045
00:36:58,446 --> 00:36:59,396
It's a better predictor or


1046
00:36:59,396 --> 00:37:00,626
whether we'll be able to keep up


1047
00:37:00,626 --> 00:37:01,306
with a stream.


1048
00:37:02,276 --> 00:37:04,276
Codecs is what enables us to


1049
00:37:04,276 --> 00:37:06,416
filter out things that we can't


1050
00:37:06,416 --> 00:37:08,806
play, and resolution allows us


1051
00:37:08,806 --> 00:37:10,156
to make good decisions about


1052
00:37:10,156 --> 00:37:11,236
which variant to choose.


1053
00:37:12,086 --> 00:37:13,806
Remember, we don't read the


1054
00:37:13,806 --> 00:37:15,776
media playlists or the media


1055
00:37:15,776 --> 00:37:17,436
segments until we have to.


1056
00:37:17,816 --> 00:37:19,246
So you need to tell us things


1057
00:37:19,466 --> 00:37:20,846
ahead of time in your master


1058
00:37:20,846 --> 00:37:21,406
playlist.


1059
00:37:22,616 --> 00:37:25,406
So here's a sample of a simple


1060
00:37:25,406 --> 00:37:26,266
master playlist.


1061
00:37:26,766 --> 00:37:28,306
This playlist allows the player


1062
00:37:28,306 --> 00:37:30,266
to adapt to bandwidth changes


1063
00:37:30,266 --> 00:37:31,876
and make good choices about


1064
00:37:31,876 --> 00:37:32,816
which variant to use.


1065
00:37:33,756 --> 00:37:36,436
Now, everything that we've done


1066
00:37:36,436 --> 00:37:38,066
here is invisible to the user.


1067
00:37:38,066 --> 00:37:39,576
It just makes the stream play


1068
00:37:39,576 --> 00:37:39,896
better.


1069
00:37:41,156 --> 00:37:41,506
Okay.


1070
00:37:41,986 --> 00:37:43,516
Let's look at a common problem.


1071
00:37:43,516 --> 00:37:45,546
Your stream plays, but you're


1072
00:37:45,546 --> 00:37:46,876
not seeing any images in fast


1073
00:37:46,876 --> 00:37:48,186
forward, or your not seeing a


1074
00:37:48,186 --> 00:37:49,496
thumbnail in the scrubber bar.


1075
00:37:50,826 --> 00:37:52,376
Here's the Apple TV scrubber


1076
00:37:52,376 --> 00:37:52,656
bar.


1077
00:37:53,616 --> 00:37:54,506
You can see how long your


1078
00:37:54,506 --> 00:37:55,356
content is.


1079
00:37:55,596 --> 00:37:56,586
You can see where you are in the


1080
00:37:56,586 --> 00:37:57,826
content, where you want to go.


1081
00:37:58,756 --> 00:37:59,976
Now, in order to get that


1082
00:37:59,976 --> 00:38:02,126
thumbnail image, you need to


1083
00:38:02,126 --> 00:38:04,316
give us an I-frame playlist, and


1084
00:38:04,356 --> 00:38:06,226
the I-frame playlist is also


1085
00:38:06,506 --> 00:38:09,166
what allows us to provide images


1086
00:38:09,206 --> 00:38:10,646
in fast forward and reverse


1087
00:38:10,646 --> 00:38:13,156
playback on your iPad or your


1088
00:38:13,156 --> 00:38:13,526
iPhone.


1089
00:38:14,046 --> 00:38:15,616
Now in order to talk about


1090
00:38:15,616 --> 00:38:17,526
I-frame playlist, we first need


1091
00:38:17,616 --> 00:38:18,986
to talk just for a moment about


1092
00:38:18,986 --> 00:38:19,716
normal video.


1093
00:38:20,516 --> 00:38:22,286
Now, here's a way of visualizing


1094
00:38:22,866 --> 00:38:24,406
regular video segments in HLS.


1095
00:38:25,076 --> 00:38:26,796
Each segment has content for a


1096
00:38:26,796 --> 00:38:28,136
number of frames, so it has a


1097
00:38:28,136 --> 00:38:30,266
duration in frames, and it has a


1098
00:38:30,266 --> 00:38:31,776
particular average bitrate, and


1099
00:38:31,776 --> 00:38:34,346
that bitrate varies from segment


1100
00:38:34,866 --> 00:38:36,176
to segment.


1101
00:38:36,516 --> 00:38:38,586
Now, because of compression


1102
00:38:38,586 --> 00:38:40,096
techniques, most frames in a


1103
00:38:40,096 --> 00:38:41,326
video can only be decoded


1104
00:38:41,326 --> 00:38:42,756
relative to other frames.


1105
00:38:43,676 --> 00:38:45,436
But I-frames, the I stands for


1106
00:38:45,436 --> 00:38:47,056
intercoded frames, these are


1107
00:38:47,056 --> 00:38:48,536
frames that are independently


1108
00:38:48,536 --> 00:38:49,876
decodable, and they're the base


1109
00:38:49,876 --> 00:38:51,056
frames that allow everything


1110
00:38:51,056 --> 00:38:52,126
else to be decoded.


1111
00:38:52,996 --> 00:38:54,846
Now, as I've shown you here, you


1112
00:38:54,846 --> 00:38:56,716
might have more than one I-frame


1113
00:38:56,716 --> 00:38:58,696
in a single segment, and the


1114
00:38:58,696 --> 00:39:02,836
I-frames need not be in a, occur


1115
00:39:02,836 --> 00:39:03,826
at regular intervals.


1116
00:39:05,676 --> 00:39:07,366
An I-frame playlist is a


1117
00:39:07,366 --> 00:39:09,036
playlist which just points to


1118
00:39:09,036 --> 00:39:10,806
the I-frame content, that is


1119
00:39:10,806 --> 00:39:12,276
only the I-frame data will be


1120
00:39:12,276 --> 00:39:12,926
downloaded.


1121
00:39:13,236 --> 00:39:14,786
And when we talk about the


1122
00:39:14,786 --> 00:39:16,016
duration of an I-frame, we


1123
00:39:16,016 --> 00:39:17,536
always mean the time from that


1124
00:39:17,536 --> 00:39:19,626
I-frame till the next I-frame.


1125
00:39:20,456 --> 00:39:21,596
Now, this particular set of


1126
00:39:21,596 --> 00:39:23,956
I-frames, I've shown as


1127
00:39:23,956 --> 00:39:24,976
extracted from my normal


1128
00:39:24,976 --> 00:39:26,986
content, but you can also make


1129
00:39:26,986 --> 00:39:28,156
what we call a high-density


1130
00:39:28,156 --> 00:39:29,066
I-frame playlist.


1131
00:39:29,996 --> 00:39:31,376
This isn't something just


1132
00:39:31,376 --> 00:39:32,396
extracted from your normal


1133
00:39:32,396 --> 00:39:32,886
content.


1134
00:39:32,886 --> 00:39:33,696
Instead, you make it


1135
00:39:33,946 --> 00:39:35,696
deliberately with more evenly


1136
00:39:35,696 --> 00:39:36,846
spaced I-frames.


1137
00:39:37,516 --> 00:39:38,556
This will allow us to work


1138
00:39:38,556 --> 00:39:38,756
better.


1139
00:39:38,756 --> 00:39:40,716
It allows us to give a much


1140
00:39:40,716 --> 00:39:42,336
smoother result when you're fast


1141
00:39:42,336 --> 00:39:42,736
forwarding.


1142
00:39:44,376 --> 00:39:45,576
Now, here I'm showing you a


1143
00:39:45,576 --> 00:39:47,096
master playlist without I-frame


1144
00:39:47,096 --> 00:39:47,866
playlist added.


1145
00:39:49,236 --> 00:39:51,956
Now, notice that the I-frame


1146
00:39:51,956 --> 00:39:53,816
playlist has almost exactly the


1147
00:39:53,816 --> 00:39:55,766
same tags as the normal


1148
00:39:55,766 --> 00:39:56,336
playlist.


1149
00:39:56,946 --> 00:39:58,656
The only difference is the


1150
00:39:58,656 --> 00:39:59,906
I-frame playlist does not


1151
00:39:59,906 --> 00:40:01,786
support the frame rate attribute


1152
00:40:02,096 --> 00:40:02,886
because it doesn't make any


1153
00:40:02,886 --> 00:40:04,136
sense in that context.


1154
00:40:04,986 --> 00:40:06,166
Now, a good test for your


1155
00:40:06,166 --> 00:40:07,936
I-frame playlist is to try and


1156
00:40:07,936 --> 00:40:08,746
play it directly.


1157
00:40:09,346 --> 00:40:11,376
That is, take the URI of your


1158
00:40:11,376 --> 00:40:13,116
I-frame playlist and paste it


1159
00:40:13,116 --> 00:40:13,846
into Safari.


1160
00:40:14,316 --> 00:40:16,496
It should play at 1X speed, and


1161
00:40:16,496 --> 00:40:18,136
you should see the I-frames


1162
00:40:18,136 --> 00:40:20,916
displayed one after another in a


1163
00:40:20,916 --> 00:40:22,216
slowly changing sequence.


1164
00:40:23,596 --> 00:40:24,886
Now also I want to point out the


1165
00:40:24,886 --> 00:40:26,266
difference in the bitrate.


1166
00:40:27,036 --> 00:40:28,516
Notice that the I-frame bitrate


1167
00:40:28,516 --> 00:40:30,266
is much lower than the normal


1168
00:40:30,266 --> 00:40:30,796
bitrate.


1169
00:40:30,936 --> 00:40:33,806
That should always be the case.


1170
00:40:34,256 --> 00:40:36,326
Now, speaking of bitrates, we've


1171
00:40:36,616 --> 00:40:39,366
defined how to compute the peak


1172
00:40:39,436 --> 00:40:40,766
bitrate in the HLS


1173
00:40:40,766 --> 00:40:41,616
specification.


1174
00:40:42,396 --> 00:40:43,976
Make sure you do it that way.


1175
00:40:43,976 --> 00:40:44,986
Otherwise, you may get that


1176
00:40:45,086 --> 00:40:46,616
segment exceeds playlist,


1177
00:40:46,616 --> 00:40:49,066
exceeds specified bandwidth


1178
00:40:49,066 --> 00:40:49,436
error.


1179
00:40:50,026 --> 00:40:52,306
Now, we're going to move away


1180
00:40:52,306 --> 00:40:54,316
from video and talk about audio


1181
00:40:54,316 --> 00:40:54,986
for a little bit.


1182
00:40:55,426 --> 00:40:57,046
Now the most common question is


1183
00:40:57,046 --> 00:40:57,936
how do I support multiple


1184
00:40:57,936 --> 00:40:58,606
languages?


1185
00:40:59,306 --> 00:41:00,646
Here's what the interface looks


1186
00:41:00,646 --> 00:41:00,986
like.


1187
00:41:01,296 --> 00:41:03,846
I've got a list of languages,


1188
00:41:03,846 --> 00:41:05,146
and the user can select one.


1189
00:41:06,336 --> 00:41:08,786
And here's a sample playlist.


1190
00:41:09,036 --> 00:41:10,746
Now, notice what we did is we've


1191
00:41:10,746 --> 00:41:13,836
added an audio tag, sorry, an


1192
00:41:13,836 --> 00:41:17,356
audio attribute onto each of our


1193
00:41:17,356 --> 00:41:19,976
video variants, and we've added


1194
00:41:19,976 --> 00:41:21,966
a group, the media tags with


1195
00:41:21,966 --> 00:41:22,716
group ID's.


1196
00:41:23,126 --> 00:41:27,646
The group ID is simply a tag


1197
00:41:27,646 --> 00:41:30,496
that allows you to associate the


1198
00:41:30,596 --> 00:41:32,296
audio renditions with the video


1199
00:41:32,296 --> 00:41:32,876
variants.


1200
00:41:33,546 --> 00:41:34,996
So notice there are a number of


1201
00:41:34,996 --> 00:41:37,266
differences between the two


1202
00:41:37,266 --> 00:41:38,316
audio renditions.


1203
00:41:38,846 --> 00:41:40,266
Just as with your variants, we


1204
00:41:40,266 --> 00:41:42,196
want you to tell us as much as


1205
00:41:42,196 --> 00:41:43,726
you can about your media.


1206
00:41:44,626 --> 00:41:46,216
Now, there are two attributes


1207
00:41:46,216 --> 00:41:47,396
that people tend to have trouble


1208
00:41:47,396 --> 00:41:49,446
with on the media tags, and


1209
00:41:49,446 --> 00:41:51,096
that's Default and Autoselect.


1210
00:41:52,306 --> 00:41:52,706
Okay.


1211
00:41:53,196 --> 00:41:56,376
So Autoselect says that the


1212
00:41:56,376 --> 00:41:57,426
media selection code in the


1213
00:41:57,426 --> 00:42:00,576
player is allowed to choose this


1214
00:42:00,576 --> 00:42:02,596
rendition without any special


1215
00:42:02,596 --> 00:42:03,586
input from the user.


1216
00:42:04,316 --> 00:42:05,836
Most of the time, you want


1217
00:42:05,836 --> 00:42:07,436
Autoselect set to yes.


1218
00:42:08,506 --> 00:42:10,066
If you don't set this, the


1219
00:42:10,066 --> 00:42:11,156
user's going to have to make an


1220
00:42:11,156 --> 00:42:13,036
explicit choice to get that


1221
00:42:13,036 --> 00:42:13,546
rendition.


1222
00:42:15,276 --> 00:42:17,496
The default on the other hand is


1223
00:42:17,496 --> 00:42:19,496
what to pick when the user has


1224
00:42:19,496 --> 00:42:20,916
not given a preferred language.


1225
00:42:22,216 --> 00:42:23,406
Generally this should be the


1226
00:42:23,406 --> 00:42:25,566
original language of your video,


1227
00:42:26,066 --> 00:42:27,186
and the default must be


1228
00:42:27,186 --> 00:42:28,986
autoselectable because the


1229
00:42:28,986 --> 00:42:30,436
system has to do the choosing.


1230
00:42:31,136 --> 00:42:33,696
Now, this default has nothing to


1231
00:42:33,696 --> 00:42:34,936
do with the default video


1232
00:42:34,936 --> 00:42:35,326
variant.


1233
00:42:35,326 --> 00:42:37,346
This is the default within the


1234
00:42:37,346 --> 00:42:38,426
group of renditions.


1235
00:42:39,916 --> 00:42:41,676
So, okay, great.


1236
00:42:41,676 --> 00:42:43,166
I've got multiple language, but


1237
00:42:43,166 --> 00:42:44,496
I'd really like to have some


1238
00:42:44,566 --> 00:42:45,496
multichannel audio.


1239
00:42:45,496 --> 00:42:47,186
I've got 5.1.


1240
00:42:48,126 --> 00:42:48,816
Okay.


1241
00:42:48,816 --> 00:42:50,086
Well the first thing to remember


1242
00:42:50,086 --> 00:42:52,126
is not all devices can play


1243
00:42:52,126 --> 00:42:53,156
multichannel audio.


1244
00:42:53,516 --> 00:42:56,606
So you want to also provide the


1245
00:42:56,606 --> 00:42:58,236
user with a stereo option.


1246
00:42:58,826 --> 00:43:00,066
And you should think of this


1247
00:43:00,066 --> 00:43:01,676
always as filling out a matrix.


1248
00:43:02,256 --> 00:43:04,516
You need to have every format


1249
00:43:04,676 --> 00:43:05,796
having every language.


1250
00:43:07,456 --> 00:43:10,296
You may say, well, I don't have


1251
00:43:10,296 --> 00:43:12,706
a multichannel original for my


1252
00:43:13,276 --> 00:43:14,076
French.


1253
00:43:14,076 --> 00:43:16,206
I don't have a 5.1 French.


1254
00:43:16,396 --> 00:43:17,616
In that case what you should do


1255
00:43:17,616 --> 00:43:19,936
is put stereo, your stereo


1256
00:43:19,936 --> 00:43:22,546
content in that group instead.


1257
00:43:23,786 --> 00:43:25,396
You need to have something in


1258
00:43:25,396 --> 00:43:26,906
every slot of this matrix.


1259
00:43:27,586 --> 00:43:30,756
So let's see a sample playlist


1260
00:43:30,756 --> 00:43:31,116
again.


1261
00:43:31,256 --> 00:43:34,666
This one is just like the


1262
00:43:34,666 --> 00:43:36,626
previous example except I've


1263
00:43:36,626 --> 00:43:38,256
changed the group ID, and


1264
00:43:38,256 --> 00:43:39,566
remember that's perfectly fine


1265
00:43:39,566 --> 00:43:41,426
because the group ID just serves


1266
00:43:41,426 --> 00:43:43,686
to connect the audio renditions


1267
00:43:43,686 --> 00:43:44,806
with the video variants.


1268
00:43:45,406 --> 00:43:48,356
Now, here we had the


1269
00:43:48,356 --> 00:43:50,396
multichannel group, and then


1270
00:43:50,396 --> 00:43:52,956
I've set this up with French as


1271
00:43:52,956 --> 00:43:54,366
stereo, so you can see how


1272
00:43:54,366 --> 00:43:54,986
that's done.


1273
00:43:55,566 --> 00:43:58,146
What you need to do is make sure


1274
00:43:58,146 --> 00:44:00,306
that the codecs tag indicates


1275
00:44:00,716 --> 00:44:04,096
all the different codecs that


1276
00:44:04,096 --> 00:44:06,226
can occur within that rendition


1277
00:44:07,516 --> 00:44:07,766
group.


1278
00:44:08,086 --> 00:44:09,126
Now, notice that we had to


1279
00:44:09,126 --> 00:44:11,506
duplicate our video variant.


1280
00:44:12,196 --> 00:44:13,986
So now we've got two entries,


1281
00:44:13,986 --> 00:44:16,186
one pointing to one audio group,


1282
00:44:16,536 --> 00:44:17,416
and the other pointing to the


1283
00:44:17,416 --> 00:44:18,256
other audio group.


1284
00:44:18,476 --> 00:44:19,286
And you'll see this kind of


1285
00:44:19,286 --> 00:44:21,106
duplication again in later


1286
00:44:21,106 --> 00:44:21,596
slides.


1287
00:44:22,936 --> 00:44:25,856
Well let's say rather than 5.1,


1288
00:44:25,856 --> 00:44:27,566
I've got several audio bitrates.


1289
00:44:27,566 --> 00:44:30,616
I've got some high bitrate


1290
00:44:30,616 --> 00:44:32,176
audio, and I know I need to


1291
00:44:32,176 --> 00:44:35,476
provide a low bitrate for some


1292
00:44:35,786 --> 00:44:36,326
users.


1293
00:44:36,996 --> 00:44:38,566
So in terms of the renditions,


1294
00:44:38,736 --> 00:44:40,386
this is similar to what we had


1295
00:44:40,816 --> 00:44:41,386
before.


1296
00:44:41,596 --> 00:44:42,636
We still got a matrix.


1297
00:44:42,636 --> 00:44:43,676
We want to fill it out with


1298
00:44:44,046 --> 00:44:45,506
every language for every


1299
00:44:45,506 --> 00:44:45,996
bitrate.


1300
00:44:47,126 --> 00:44:48,606
And since these are both AAC,


1301
00:44:48,606 --> 00:44:49,566
they're considered the same


1302
00:44:49,566 --> 00:44:50,266
format.


1303
00:44:50,706 --> 00:44:52,426
So if I also want to have


1304
00:44:52,886 --> 00:44:55,556
another format, all I do is


1305
00:44:55,556 --> 00:44:56,606
extend that matrix.


1306
00:44:57,096 --> 00:44:58,306
Now, I want to mention that I've


1307
00:44:58,306 --> 00:44:59,256
been saying language for


1308
00:44:59,256 --> 00:45:00,296
convenience, but you should


1309
00:45:00,296 --> 00:45:01,876
remember that it's the name


1310
00:45:01,876 --> 00:45:03,906
attribute which is the unique


1311
00:45:04,466 --> 00:45:05,956
attribute, not the language


1312
00:45:06,086 --> 00:45:06,616
attribute.


1313
00:45:07,056 --> 00:45:09,286
Now, in this playlist I'm not


1314
00:45:09,286 --> 00:45:10,346
going to show you the media


1315
00:45:10,346 --> 00:45:10,726
tags.


1316
00:45:10,726 --> 00:45:11,776
I'm just going to show you the


1317
00:45:11,776 --> 00:45:13,276
video variants with their audio


1318
00:45:13,276 --> 00:45:13,876
group names.


1319
00:45:14,416 --> 00:45:16,426
Now you want your low bitrate


1320
00:45:16,426 --> 00:45:18,006
video associated with your low


1321
00:45:18,006 --> 00:45:19,726
bitrate audio, and you want you


1322
00:45:19,726 --> 00:45:21,476
high bitrate video associated


1323
00:45:21,476 --> 00:45:22,936
with your high bitrate audio.


1324
00:45:23,986 --> 00:45:25,506
And you'll always want to split


1325
00:45:25,506 --> 00:45:26,346
this up like this.


1326
00:45:27,036 --> 00:45:29,316
Don't do a situation where you


1327
00:45:29,316 --> 00:45:30,556
have a complete set of video


1328
00:45:30,556 --> 00:45:31,866
variants associated with your


1329
00:45:31,866 --> 00:45:33,716
low bitrate audio and a complete


1330
00:45:33,716 --> 00:45:35,016
set of variants associated with


1331
00:45:35,016 --> 00:45:36,156
your high bitrate audio.


1332
00:45:36,156 --> 00:45:37,786
Because if you do that, you can


1333
00:45:37,786 --> 00:45:39,876
be at a high video bitrate and


1334
00:45:39,876 --> 00:45:41,816
be bouncing between high and low


1335
00:45:41,816 --> 00:45:42,726
audio bitrates.


1336
00:45:43,236 --> 00:45:48,506
Now, here I've added in the AC3


1337
00:45:48,586 --> 00:45:49,376
content.


1338
00:45:50,006 --> 00:45:51,876
Notice that again we had to


1339
00:45:51,876 --> 00:45:54,446
duplicate our video variant


1340
00:45:54,446 --> 00:45:56,176
entries, but they point to the


1341
00:45:56,176 --> 00:45:57,346
same video playlist.


1342
00:45:58,196 --> 00:45:59,926
Now, notice also that the


1343
00:45:59,926 --> 00:46:01,996
bitrate on the video variants


1344
00:46:01,996 --> 00:46:02,536
changes.


1345
00:46:02,826 --> 00:46:03,926
Remember that's because the


1346
00:46:03,926 --> 00:46:06,486
video, I'm sorry, the bitrate


1347
00:46:06,486 --> 00:46:07,496
associated with the video


1348
00:46:07,496 --> 00:46:08,966
variant is the bitrate of the


1349
00:46:08,966 --> 00:46:11,136
video itself plus any associated


1350
00:46:11,136 --> 00:46:11,806
renditions.


1351
00:46:12,406 --> 00:46:16,056
Now, let's go back to the video


1352
00:46:16,056 --> 00:46:18,406
for just a second because I want


1353
00:46:18,406 --> 00:46:19,896
to have multiple video formats.


1354
00:46:19,896 --> 00:46:22,756
I like to have HEVC, so I can


1355
00:46:23,186 --> 00:46:25,366
have better quality at the same


1356
00:46:25,366 --> 00:46:26,816
bitrate or I'd like to have


1357
00:46:26,816 --> 00:46:28,196
Dolby Vision so I can have some


1358
00:46:28,196 --> 00:46:29,266
HDR content.


1359
00:46:29,806 --> 00:46:33,326
Again, we're kind of filling out


1360
00:46:33,326 --> 00:46:33,936
a matrix.


1361
00:46:34,116 --> 00:46:35,556
In this case, no matter which


1362
00:46:35,556 --> 00:46:37,886
video format we choose, we want


1363
00:46:37,886 --> 00:46:39,406
to end up with a reasonable set


1364
00:46:39,496 --> 00:46:40,136
of variants.


1365
00:46:40,626 --> 00:46:42,576
So the rows here are tiers based


1366
00:46:42,576 --> 00:46:46,006
on quality, and we want to fill


1367
00:46:46,006 --> 00:46:47,906
out the matrix with a variant in


1368
00:46:47,906 --> 00:46:49,466
each tier in each format.


1369
00:46:50,846 --> 00:46:52,956
Now, we don't have to


1370
00:46:52,956 --> 00:46:55,576
necessarily fill out the higher


1371
00:46:55,576 --> 00:46:57,496
portions of the tiers on our


1372
00:46:57,496 --> 00:46:58,686
older formats.


1373
00:46:58,686 --> 00:46:59,586
You can skimp a little bit


1374
00:46:59,586 --> 00:46:59,906
there.


1375
00:47:00,336 --> 00:47:02,876
But similar to audio, not every


1376
00:47:02,876 --> 00:47:04,586
device supports things like


1377
00:47:04,586 --> 00:47:06,516
Dolby Vision, so you want to


1378
00:47:06,516 --> 00:47:09,916
provide an H.264 variant as a


1379
00:47:09,916 --> 00:47:10,476
fallback.


1380
00:47:11,476 --> 00:47:12,586
The main thing to remember is


1381
00:47:12,586 --> 00:47:13,806
that in each column you want to


1382
00:47:13,806 --> 00:47:15,476
have the bitrate form a nice


1383
00:47:15,476 --> 00:47:16,066
progression.


1384
00:47:16,616 --> 00:47:19,266
Now, this playlist has gotten a


1385
00:47:19,266 --> 00:47:20,876
little too big to show on one


1386
00:47:20,876 --> 00:47:21,946
slide, so I'm going to split it


1387
00:47:21,946 --> 00:47:22,806
over three slides.


1388
00:47:23,276 --> 00:47:25,196
This one shows you the H.264


1389
00:47:25,196 --> 00:47:25,686
variant.


1390
00:47:26,336 --> 00:47:29,466
On this slide, we have the HEVC


1391
00:47:29,466 --> 00:47:29,946
variant.


1392
00:47:30,026 --> 00:47:31,906
Now, notice everything has a


1393
00:47:31,906 --> 00:47:34,206
different video playlist that


1394
00:47:34,206 --> 00:47:36,046
it's pointing to, and here's our


1395
00:47:36,046 --> 00:47:37,926
Dolby Vision variant, and notice


1396
00:47:37,926 --> 00:47:40,016
that everything here has had the


1397
00:47:40,016 --> 00:47:40,956
same audio group.


1398
00:47:41,336 --> 00:47:42,976
So, again, if we wanted to have


1399
00:47:42,976 --> 00:47:45,216
multiple audio formats, we would


1400
00:47:45,216 --> 00:47:47,146
need to replicate the video


1401
00:47:47,146 --> 00:47:49,466
variants for each audio format.


1402
00:47:49,796 --> 00:47:51,326
And again this wouldn't increase


1403
00:47:51,326 --> 00:47:52,516
the number of video playlists we


1404
00:47:52,516 --> 00:47:53,206
had to have.


1405
00:47:53,646 --> 00:47:54,566
It would just increase the


1406
00:47:54,566 --> 00:47:56,046
number of entries that we had in


1407
00:47:56,046 --> 00:47:56,666
the playlist.


1408
00:47:57,696 --> 00:47:57,836
Okay.


1409
00:47:58,086 --> 00:48:00,016
We're almost done.


1410
00:48:00,436 --> 00:48:02,366
Our last bit is about subtitles


1411
00:48:02,366 --> 00:48:03,316
and closed captions.


1412
00:48:03,316 --> 00:48:05,946
Now, you can probably guess how


1413
00:48:05,946 --> 00:48:06,536
this works.


1414
00:48:07,316 --> 00:48:09,676
Our variants need to point at


1415
00:48:10,206 --> 00:48:12,316
the subtitle and closed caption


1416
00:48:12,446 --> 00:48:13,616
groups that we're using.


1417
00:48:14,096 --> 00:48:15,946
So we need to add an attribute


1418
00:48:15,946 --> 00:48:18,686
to our video variant, and we


1419
00:48:18,686 --> 00:48:20,166
need to describe the renditions.


1420
00:48:20,826 --> 00:48:22,496
Now, notice that the closed


1421
00:48:22,496 --> 00:48:24,146
caption rendition does not have


1422
00:48:24,146 --> 00:48:25,456
a URI attribute.


1423
00:48:26,526 --> 00:48:28,456
That tells the system that the


1424
00:48:28,456 --> 00:48:30,396
closed caption data is found


1425
00:48:30,616 --> 00:48:33,516
within the video content, not in


1426
00:48:33,516 --> 00:48:34,396
a separate playlist.


1427
00:48:34,946 --> 00:48:38,216
So, there you go, the right


1428
00:48:38,216 --> 00:48:38,816
thing to do is to give us


1429
00:48:38,816 --> 00:48:39,456
everything you've got.


1430
00:48:39,616 --> 00:48:41,166
See, now you understand better


1431
00:48:41,166 --> 00:48:41,666
what I meant.


1432
00:48:42,476 --> 00:48:42,756
Okay.


1433
00:48:42,756 --> 00:48:44,836
I'd like to quickly summarize


1434
00:48:44,836 --> 00:48:46,186
the talk we've given today.


1435
00:48:47,036 --> 00:48:48,236
Emil talked about key


1436
00:48:48,236 --> 00:48:49,976
performance indicators, about


1437
00:48:49,976 --> 00:48:51,406
how to get or compute the values


1438
00:48:51,406 --> 00:48:52,156
and what they mean.


1439
00:48:52,776 --> 00:48:55,246
And Zhenheng talked about ways


1440
00:48:55,246 --> 00:48:57,476
to reduce startup time and how


1441
00:48:57,476 --> 00:49:00,426
to go about resolving stalls and


1442
00:49:00,426 --> 00:49:01,206
other errors.


1443
00:49:01,336 --> 00:49:02,896
And I've talked about how to do


1444
00:49:02,896 --> 00:49:03,756
master playlists.


1445
00:49:04,216 --> 00:49:06,156
I'd like to briefly mention the


1446
00:49:06,156 --> 00:49:07,586
HLS validation tools.


1447
00:49:08,266 --> 00:49:10,466
They do identify many issues


1448
00:49:10,466 --> 00:49:12,316
with master and media playlists,


1449
00:49:12,566 --> 00:49:14,246
and it's worth your time to use


1450
00:49:14,246 --> 00:49:14,446
them.


1451
00:49:15,616 --> 00:49:17,816
As always, you can get more


1452
00:49:17,816 --> 00:49:20,316
information from the WWDC app or


1453
00:49:20,366 --> 00:49:21,496
the developer website.


1454
00:49:21,946 --> 00:49:22,906
That's all we have today.


1455
00:49:23,136 --> 00:49:23,956
Thanks very much for your


1456
00:49:23,956 --> 00:49:24,706
attention and time.


1457
00:49:25,508 --> 00:49:27,508
[ Applause ]

