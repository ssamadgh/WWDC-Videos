1
00:00:24,046 --> 00:00:25,446
>> Welcome to Session 507.


2
00:00:25,716 --> 00:00:26,576
I'm Brad Ford.


3
00:00:26,756 --> 00:00:27,786
I'm from the Camera Software


4
00:00:27,786 --> 00:00:30,076
Team, and I'm very excited to


5
00:00:30,076 --> 00:00:31,626
share some deep thoughts with


6
00:00:31,626 --> 00:00:32,485
you this afternoon.


7
00:00:32,746 --> 00:00:34,786
Did you see what I did there?


8
00:00:35,196 --> 00:00:36,286
All right [applause].


9
00:00:38,666 --> 00:00:40,216
This session is part one of a


10
00:00:40,216 --> 00:00:41,946
two-part series on a very


11
00:00:41,946 --> 00:00:43,126
important initiative for Apple


12
00:00:43,126 --> 00:00:44,556
this year, and that is media


13
00:00:44,706 --> 00:00:46,376
containing depth information.


14
00:00:47,056 --> 00:00:48,136
I'll introduce depth at the


15
00:00:48,136 --> 00:00:49,506
conceptual level, I'll


16
00:00:49,506 --> 00:00:51,526
familiarize you with key terms,


17
00:00:51,776 --> 00:00:52,556
and I'll teach you how to


18
00:00:52,556 --> 00:00:53,976
capture depth data on the


19
00:00:53,976 --> 00:00:55,666
iPhone, much like this.


20
00:00:55,666 --> 00:00:56,946
You'll see a lot of ghostly


21
00:00:56,946 --> 00:00:58,146
images in this session.


22
00:00:59,406 --> 00:01:00,416
Here's the agenda.


23
00:01:01,476 --> 00:01:03,096
First we're going to cover depth


24
00:01:03,096 --> 00:01:04,756
and disparity on iPhone 7 Plus


25
00:01:05,215 --> 00:01:06,166
at a high level.


26
00:01:07,126 --> 00:01:08,636
Then we'll move on to streaming


27
00:01:08,636 --> 00:01:09,846
depth data from the camera,


28
00:01:11,046 --> 00:01:12,296
capturing photos with depth


29
00:01:12,296 --> 00:01:15,396
data, and finally we'll end with


30
00:01:15,486 --> 00:01:16,836
a slight tangent, which is dual


31
00:01:16,836 --> 00:01:17,696
photo capture.


32
00:01:18,116 --> 00:01:19,596
It is the most highly requested


33
00:01:19,596 --> 00:01:20,706
feature we've had on dual


34
00:01:20,706 --> 00:01:22,206
camera, and I'm very excited to


35
00:01:22,206 --> 00:01:22,836
talk about it.


36
00:01:23,486 --> 00:01:25,566
Your job is to listen for all


37
00:01:25,566 --> 00:01:28,316
the truly horrible depth puns


38
00:01:28,496 --> 00:01:29,656
that I have sprinkled throughout


39
00:01:29,706 --> 00:01:31,936
this session, and let's make a


40
00:01:31,936 --> 00:01:32,456
game of it.


41
00:01:32,456 --> 00:01:34,326
Okay? Every time you hear one,


42
00:01:34,426 --> 00:01:36,276
just give me a nice big groan to


43
00:01:36,276 --> 00:01:37,376
let me know that you care.


44
00:01:37,376 --> 00:01:37,676
All right?


45
00:01:38,016 --> 00:01:38,856
Here, let's practice.


46
00:01:39,416 --> 00:01:40,976
Everybody ready for a deep dive?


47
00:01:41,031 --> 00:01:43,031
[ Group groaning ]


48
00:01:43,046 --> 00:01:43,826
Thank you, from the bottom of my


49
00:01:43,856 --> 00:01:43,976
heart.


50
00:01:44,051 --> 00:01:46,051
[ Group groaning ]


51
00:01:46,086 --> 00:01:47,086
All right.


52
00:01:47,466 --> 00:01:49,816
Good. The reason you're all here


53
00:01:49,816 --> 00:01:51,726
today is this guy right here.


54
00:01:52,006 --> 00:01:53,526
This is the iPhone 7 Plus.


55
00:01:53,996 --> 00:01:55,226
The product, of course, has sold


56
00:01:55,226 --> 00:01:57,196
exceptionally well, even better


57
00:01:57,196 --> 00:01:58,716
than its plus size predecessor,


58
00:01:59,356 --> 00:02:00,746
and that's thanks in large part


59
00:02:00,746 --> 00:02:01,986
to the quality of the dual


60
00:02:01,986 --> 00:02:02,796
camera system.


61
00:02:03,786 --> 00:02:06,666
It is a dual prime lens system


62
00:02:06,816 --> 00:02:08,656
consisting of a 28-millimeter


63
00:02:08,656 --> 00:02:10,136
equivalent wide-angle camera,


64
00:02:10,536 --> 00:02:12,326
and a 56-millimeter equivalent


65
00:02:12,326 --> 00:02:13,276
telephoto camera.


66
00:02:13,836 --> 00:02:15,686
Both of them are 12 megapixels.


67
00:02:16,006 --> 00:02:17,396
They share the same feature set,


68
00:02:17,546 --> 00:02:18,576
the same formats.


69
00:02:19,146 --> 00:02:20,196
You can run either of these


70
00:02:20,196 --> 00:02:22,176
cameras on its own, or you can


71
00:02:22,176 --> 00:02:24,466
address them in tandem using a


72
00:02:24,466 --> 00:02:26,506
third virtual camera, the first


73
00:02:26,506 --> 00:02:27,826
time we've ever delivered one on


74
00:02:27,936 --> 00:02:29,566
iOS, and it's called the dual


75
00:02:29,566 --> 00:02:29,996
camera.


76
00:02:30,586 --> 00:02:32,076
It runs them in a synchronized


77
00:02:32,076 --> 00:02:33,916
fashion, the same frame rate,


78
00:02:34,446 --> 00:02:35,476
and running them together


79
00:02:35,476 --> 00:02:37,296
enables two marquee features.


80
00:02:38,316 --> 00:02:40,176
The first is dual camera zoom.


81
00:02:41,186 --> 00:02:42,826
This switches between the wide


82
00:02:42,826 --> 00:02:44,486
and the tele automatically as


83
00:02:44,486 --> 00:02:45,106
you zoom.


84
00:02:45,656 --> 00:02:47,816
It matches exposure, focus and


85
00:02:47,816 --> 00:02:49,156
frame rate so that it's kind of


86
00:02:49,156 --> 00:02:49,586
magical.


87
00:02:49,586 --> 00:02:50,496
You don't even realize that


88
00:02:50,496 --> 00:02:52,136
we're switching cameras, but all


89
00:02:52,136 --> 00:02:53,636
of this happens very seamlessly.


90
00:02:54,056 --> 00:02:55,476
We also are compensating for the


91
00:02:55,476 --> 00:02:57,556
parallax shift to make it a


92
00:02:57,556 --> 00:02:59,056
smooth transition as you go back


93
00:02:59,056 --> 00:03:00,216
and forth between the wide and


94
00:03:00,216 --> 00:03:00,676
the tele.


95
00:03:01,246 --> 00:03:03,226
And the second marquee feature


96
00:03:03,226 --> 00:03:04,456
is, of course, the Portrait


97
00:03:04,456 --> 00:03:05,996
mode, where the dual camera


98
00:03:05,996 --> 00:03:08,026
system locks into the tele


99
00:03:08,026 --> 00:03:10,126
camera's narrower field of view,


100
00:03:10,956 --> 00:03:13,086
but then uses images from both


101
00:03:13,136 --> 00:03:15,026
the wide and the tele to


102
00:03:15,026 --> 00:03:16,666
generate a beautiful shallow


103
00:03:16,666 --> 00:03:18,216
depth of field effect that you'd


104
00:03:18,216 --> 00:03:19,256
expect from a much more


105
00:03:19,256 --> 00:03:21,066
expensive camera with a fast,


106
00:03:21,066 --> 00:03:22,106
wide-open lens.


107
00:03:22,866 --> 00:03:24,766
The foreground is sharply in


108
00:03:24,766 --> 00:03:26,596
focus, while the background is


109
00:03:26,596 --> 00:03:28,376
progressively blurred in these


110
00:03:28,376 --> 00:03:30,056
pleasing little bouquet circles.


111
00:03:30,896 --> 00:03:33,196
The depth effect has gotten even


112
00:03:33,196 --> 00:03:34,716
better in iOS 11.


113
00:03:35,286 --> 00:03:36,516
We've made improvements to the


114
00:03:36,516 --> 00:03:38,076
rendering of the out-of-focus


115
00:03:38,076 --> 00:03:38,486
area.


116
00:03:38,896 --> 00:03:40,956
It more accurately represents a


117
00:03:40,956 --> 00:03:43,416
wide-open fast lens with sharp


118
00:03:43,466 --> 00:03:44,876
and well-defined bouquet


119
00:03:44,876 --> 00:03:45,476
circles.


120
00:03:45,996 --> 00:03:47,016
We've also improved how the


121
00:03:47,016 --> 00:03:48,666
rendering handles the edges


122
00:03:48,776 --> 00:03:50,116
between the foreground and the


123
00:03:50,116 --> 00:03:50,656
background.


124
00:03:50,956 --> 00:03:51,846
Please check it out if you


125
00:03:51,846 --> 00:03:52,386
haven't yet.


126
00:03:52,386 --> 00:03:53,306
I think you'll be pleasantly


127
00:03:53,306 --> 00:03:54,646
surprised at how great the


128
00:03:54,646 --> 00:03:56,226
quality of the shallow depth of


129
00:03:56,226 --> 00:03:57,866
field effect is in iOS 11.


130
00:03:58,886 --> 00:04:01,076
To generate an effect like this


131
00:04:01,206 --> 00:04:02,466
you need to be able to separate


132
00:04:02,466 --> 00:04:04,096
foreground from background.


133
00:04:04,156 --> 00:04:05,836
In other words, you need depth.


134
00:04:06,606 --> 00:04:07,916
And up to now that depth


135
00:04:07,916 --> 00:04:09,416
information has been exclusive


136
00:04:09,616 --> 00:04:10,956
to the Apple camera app's


137
00:04:10,956 --> 00:04:13,846
Portrait mode, but now new in


138
00:04:13,926 --> 00:04:15,806
iOS 11 we are opening up depth


139
00:04:15,806 --> 00:04:17,375
maps to third party apps.


140
00:04:18,646 --> 00:04:19,435
Here's a gray scale


141
00:04:19,435 --> 00:04:21,036
visualization of the depth map


142
00:04:21,196 --> 00:04:22,496
that was embedded in this image


143
00:04:22,496 --> 00:04:22,796
file.


144
00:04:24,036 --> 00:04:26,036
Having depth information opens


145
00:04:26,036 --> 00:04:28,096
up a world of possibilities for


146
00:04:28,096 --> 00:04:30,156
image editing, such as applying


147
00:04:30,156 --> 00:04:31,126
different filters to the


148
00:04:31,316 --> 00:04:32,636
background and the foreground,


149
00:04:32,936 --> 00:04:35,176
like this.


150
00:04:35,616 --> 00:04:37,366
I've applied a noir black and


151
00:04:37,366 --> 00:04:39,136
white filter to the background


152
00:04:39,266 --> 00:04:40,436
and the fade filter to the


153
00:04:40,436 --> 00:04:40,956
foreground.


154
00:04:41,446 --> 00:04:42,546
And notice how the little girl's


155
00:04:42,546 --> 00:04:43,776
tights are still pink, but


156
00:04:43,776 --> 00:04:45,236
everything behind them is black


157
00:04:45,236 --> 00:04:45,556
and white.


158
00:04:46,216 --> 00:04:47,656
Knowing the gradations of depth,


159
00:04:48,016 --> 00:04:49,936
I can get even fancier and I can


160
00:04:49,936 --> 00:04:51,346
move the switch-over point


161
00:04:51,516 --> 00:04:53,356
forward or backward, like this.


162
00:04:53,706 --> 00:04:54,876
Keep your eyes on the flower.


163
00:04:56,356 --> 00:04:58,166
So now notice that just her hand


164
00:04:58,166 --> 00:04:59,366
and her flower are in color,


165
00:04:59,366 --> 00:05:00,296
while everything else is in


166
00:05:00,296 --> 00:05:00,886
black and white.


167
00:05:02,126 --> 00:05:03,716
You can even control foreground


168
00:05:03,716 --> 00:05:05,056
and background exposures


169
00:05:05,056 --> 00:05:06,496
differently, like this.


170
00:05:07,736 --> 00:05:09,736
So now she looks like she was


171
00:05:09,736 --> 00:05:11,106
photoshopped into her very own


172
00:05:11,106 --> 00:05:11,436
photo.


173
00:05:12,196 --> 00:05:13,486
I'm not saying you should do it.


174
00:05:13,486 --> 00:05:15,416
I'm saying you could do it.


175
00:05:16,676 --> 00:05:17,096
All right.


176
00:05:17,096 --> 00:05:17,606
Enough fun.


177
00:05:17,656 --> 00:05:18,516
Let's get technical.


178
00:05:18,946 --> 00:05:21,276
I like to call this section deep


179
00:05:21,676 --> 00:05:22,196
learning [group groaning].


180
00:05:23,566 --> 00:05:23,976
Thank you.


181
00:05:24,036 --> 00:05:25,996
First we need to define what a


182
00:05:25,996 --> 00:05:26,986
depth map is.


183
00:05:27,696 --> 00:05:29,456
In the real world depth means


184
00:05:29,456 --> 00:05:31,786
the distance between you and an


185
00:05:31,786 --> 00:05:32,596
observed object.


186
00:05:33,326 --> 00:05:34,856
A depth map is a transformation


187
00:05:34,856 --> 00:05:36,586
of a three-dimensional scene


188
00:05:36,836 --> 00:05:38,146
into a two-dimensional


189
00:05:38,146 --> 00:05:39,916
representation, and you do that


190
00:05:39,916 --> 00:05:41,036
by setting the depth to a


191
00:05:41,036 --> 00:05:42,336
constant distance.


192
00:05:43,076 --> 00:05:44,066
Let me explain what I mean.


193
00:05:44,356 --> 00:05:45,926
I'm going to use a diagram of a


194
00:05:46,036 --> 00:05:48,066
pinhole camera often during this


195
00:05:48,066 --> 00:05:48,766
presentation.


196
00:05:49,416 --> 00:05:50,636
If you've studied computer


197
00:05:50,636 --> 00:05:51,426
vision, you'll be really


198
00:05:51,426 --> 00:05:52,916
familiar with pinhole cameras.


199
00:05:53,066 --> 00:05:54,436
A pinhole camera is a simple


200
00:05:54,436 --> 00:05:56,976
lightproof box without a lens.


201
00:05:56,976 --> 00:05:58,306
Instead, it just has a little


202
00:05:58,306 --> 00:05:59,926
poked hole, a single small


203
00:05:59,926 --> 00:06:01,986
aperture that permits light to


204
00:06:01,986 --> 00:06:04,446
enter in and project itself as


205
00:06:04,446 --> 00:06:06,126
an inverted image on the other


206
00:06:06,126 --> 00:06:08,766
side of the image plane, or a


207
00:06:08,766 --> 00:06:09,256
sensor.


208
00:06:09,836 --> 00:06:12,606
The opposite side is known as


209
00:06:12,886 --> 00:06:13,866
image plane or sensor.


210
00:06:14,766 --> 00:06:15,926
The aperture through which the


211
00:06:15,926 --> 00:06:17,556
light rays pass is called the


212
00:06:17,556 --> 00:06:19,476
focal point, and the field of


213
00:06:19,476 --> 00:06:20,766
view of the image captured


214
00:06:20,936 --> 00:06:23,306
depends on the focal length.


215
00:06:23,896 --> 00:06:24,876
So the focal length is the


216
00:06:24,876 --> 00:06:26,936
distance from the focal point to


217
00:06:26,936 --> 00:06:27,676
the image plane.


218
00:06:27,946 --> 00:06:30,376
A shorter focal length means


219
00:06:30,376 --> 00:06:32,636
wider field of view; whereas,


220
00:06:32,636 --> 00:06:34,376
longer focal length, longer box,


221
00:06:34,376 --> 00:06:35,656
means narrower field of view.


222
00:06:36,426 --> 00:06:38,116
The focal length is that


223
00:06:38,166 --> 00:06:40,376
constant distance by which real


224
00:06:40,376 --> 00:06:41,646
world distances are flattened


225
00:06:41,646 --> 00:06:42,816
into a 2D image.


226
00:06:43,456 --> 00:06:44,956
Put simply, a depth map is a


227
00:06:44,956 --> 00:06:47,176
transformation of a 3D depth


228
00:06:47,446 --> 00:06:49,826
into a 2D, single channel image


229
00:06:50,116 --> 00:06:51,476
where each pixel value is a


230
00:06:51,476 --> 00:06:52,746
different depth, like five


231
00:06:52,746 --> 00:06:54,396
meters, four meters, three


232
00:06:54,396 --> 00:06:54,846
meters.


233
00:06:56,556 --> 00:06:58,906
Now, to truly measure depth you


234
00:06:58,906 --> 00:07:00,776
need a purpose-built camera for


235
00:07:00,776 --> 00:07:01,506
this, something like a


236
00:07:01,506 --> 00:07:02,686
time-of-flight camera.


237
00:07:03,146 --> 00:07:04,596
For instance, a system that


238
00:07:04,976 --> 00:07:07,076
bounces light signals off of


239
00:07:07,076 --> 00:07:08,386
objects and then measures the


240
00:07:08,386 --> 00:07:09,766
time that it takes to return


241
00:07:09,766 --> 00:07:10,656
back to the sensor.


242
00:07:10,986 --> 00:07:13,696
The iPhone 7 dual camera is not


243
00:07:14,026 --> 00:07:15,276
a time-of-flight camera.


244
00:07:16,106 --> 00:07:18,336
Instead, it is a disparity-based


245
00:07:18,336 --> 00:07:18,846
system.


246
00:07:19,366 --> 00:07:21,376
Disparity is a measure of the


247
00:07:21,376 --> 00:07:24,006
magnitude of shift of an object


248
00:07:24,006 --> 00:07:25,276
when observed from two different


249
00:07:25,276 --> 00:07:26,546
cameras, like your eyeballs.


250
00:07:27,116 --> 00:07:28,276
Disparity is another name for


251
00:07:28,276 --> 00:07:28,966
parallax.


252
00:07:29,926 --> 00:07:31,586
You can observe this effect by


253
00:07:31,586 --> 00:07:33,616
holding your head steady and


254
00:07:33,616 --> 00:07:35,496
fixing your gaze on something


255
00:07:35,726 --> 00:07:37,866
close, and then without moving


256
00:07:37,866 --> 00:07:39,446
your head, close one eye and


257
00:07:39,446 --> 00:07:40,106
then the other eye.


258
00:07:40,236 --> 00:07:41,126
So, for instance, this would be


259
00:07:41,126 --> 00:07:44,666
left eye, right eye; left eye,


260
00:07:45,836 --> 00:07:46,266
right eye.


261
00:07:46,766 --> 00:07:47,756
And you can see the colored


262
00:07:47,756 --> 00:07:49,546
pencils appear to shift a lot


263
00:07:49,546 --> 00:07:50,726
more than the markers in the


264
00:07:50,726 --> 00:07:52,106
back because they are closer.


265
00:07:52,246 --> 00:07:53,646
That's the parallax effect, or


266
00:07:53,646 --> 00:07:54,216
disparity.


267
00:07:55,776 --> 00:07:56,976
Now back to our pinhole camera


268
00:07:56,976 --> 00:07:57,306
model.


269
00:07:57,966 --> 00:07:59,676
Now I've taken a bird's eye view


270
00:07:59,906 --> 00:08:02,046
of two cameras that are said to


271
00:08:02,046 --> 00:08:03,756
be stereo rectified.


272
00:08:04,296 --> 00:08:06,146
That means, one, that they are


273
00:08:06,146 --> 00:08:07,456
parallel to one another, they're


274
00:08:07,456 --> 00:08:08,846
pointing in the same direction,


275
00:08:09,506 --> 00:08:11,386
and two, they have the same


276
00:08:11,386 --> 00:08:12,666
focal length, which is very


277
00:08:12,666 --> 00:08:13,156
important.


278
00:08:13,936 --> 00:08:14,986
That's the distance from the


279
00:08:14,986 --> 00:08:16,386
focal point to the image plane


280
00:08:16,386 --> 00:08:16,976
or sensor.


281
00:08:17,636 --> 00:08:19,426
Each camera will have a measured


282
00:08:19,466 --> 00:08:21,386
optical center or a principal


283
00:08:21,386 --> 00:08:23,336
point, and if you draw a


284
00:08:23,336 --> 00:08:24,726
perpendicular line from the


285
00:08:24,726 --> 00:08:27,816
pinhole to the image plane, then


286
00:08:27,816 --> 00:08:29,166
the optical center is the point


287
00:08:29,166 --> 00:08:30,776
at which it intersects with the


288
00:08:30,776 --> 00:08:31,396
image plane.


289
00:08:31,986 --> 00:08:32,966
Now, there's another term that


290
00:08:32,966 --> 00:08:33,986
you should be familiar with and


291
00:08:33,986 --> 00:08:35,086
that is baseline.


292
00:08:35,716 --> 00:08:37,446
Baseline refers to the distance


293
00:08:37,446 --> 00:08:39,246
between the two optical centers


294
00:08:39,246 --> 00:08:40,336
of the lenses in a


295
00:08:40,336 --> 00:08:41,706
stereo-rectified system.


296
00:08:42,385 --> 00:08:43,176
Here's how it works.


297
00:08:43,756 --> 00:08:45,886
Rays of light from an observed


298
00:08:45,886 --> 00:08:48,236
object pass through the optical


299
00:08:48,236 --> 00:08:51,196
centers and -- or through the


300
00:08:51,196 --> 00:08:53,646
apertures and land at different


301
00:08:53,646 --> 00:08:55,386
points on the image planes of


302
00:08:55,386 --> 00:08:56,196
the two cameras.


303
00:08:57,416 --> 00:08:58,676
A fourth term that I'm going to


304
00:08:58,676 --> 00:09:00,266
throw at you right now is Z.


305
00:09:00,446 --> 00:09:02,926
Z is the canonical term for


306
00:09:02,926 --> 00:09:06,316
depth, or real-world depth.


307
00:09:06,316 --> 00:09:07,496
Now, watch what happens to the


308
00:09:07,496 --> 00:09:09,536
points on the image plane as the


309
00:09:09,536 --> 00:09:11,426
observed point gets farther


310
00:09:11,426 --> 00:09:11,766
away.


311
00:09:13,876 --> 00:09:15,396
They moved closer together.


312
00:09:15,396 --> 00:09:16,176
I'm going to show that to you


313
00:09:16,176 --> 00:09:16,786
one more time.


314
00:09:17,896 --> 00:09:19,246
So as the real point gets


315
00:09:19,246 --> 00:09:21,716
farther away, they get closer


316
00:09:21,716 --> 00:09:24,296
together on the image plane, and


317
00:09:24,836 --> 00:09:26,726
as the object gets closer, the


318
00:09:26,726 --> 00:09:28,356
dots move farther away from each


319
00:09:28,356 --> 00:09:28,576
other.


320
00:09:29,106 --> 00:09:30,626
So when the cameras are stereo


321
00:09:30,626 --> 00:09:32,456
rectified, these shifts only


322
00:09:32,456 --> 00:09:33,566
move in one direction.


323
00:09:34,036 --> 00:09:35,516
They either move closer or


324
00:09:35,516 --> 00:09:36,926
farther away from one another,


325
00:09:36,926 --> 00:09:39,176
but on the same line, or the


326
00:09:39,176 --> 00:09:40,196
epipolar line.


327
00:09:41,796 --> 00:09:42,886
Now, knowing the baseline you


328
00:09:42,886 --> 00:09:43,986
can essentially line up the


329
00:09:43,986 --> 00:09:45,266
cameras along their optical


330
00:09:45,266 --> 00:09:47,746
centers like this and subtract


331
00:09:47,746 --> 00:09:48,756
the distance between the


332
00:09:48,756 --> 00:09:50,546
observed points on the image


333
00:09:50,546 --> 00:09:52,726
planes to get the disparity.


334
00:09:53,286 --> 00:09:54,316
That's what disparity is.


335
00:09:55,076 --> 00:09:56,626
You can express this distance in


336
00:09:56,626 --> 00:09:57,986
whatever units make sense for


337
00:09:57,986 --> 00:09:58,746
your processing.


338
00:09:58,916 --> 00:10:00,696
It could be pixels, meters,


339
00:10:00,696 --> 00:10:01,436
microns.


340
00:10:02,026 --> 00:10:03,286
And it's common to store it in


341
00:10:03,286 --> 00:10:05,616
pixels since we think of RGB


342
00:10:05,616 --> 00:10:07,436
images in pixels.


343
00:10:08,206 --> 00:10:09,606
Now, storing pixel shifts works


344
00:10:09,606 --> 00:10:11,326
fine, as long as the image that


345
00:10:11,326 --> 00:10:13,236
they accompany never changes


346
00:10:13,336 --> 00:10:13,966
size.


347
00:10:14,946 --> 00:10:16,376
It's not so good if you're going


348
00:10:16,376 --> 00:10:18,386
to edit that image because if


349
00:10:18,386 --> 00:10:19,746
you've scaled the image down,


350
00:10:20,066 --> 00:10:21,556
you've now effectively changed


351
00:10:21,556 --> 00:10:22,436
the pixel size.


352
00:10:22,726 --> 00:10:23,966
So you have to go through the


353
00:10:23,966 --> 00:10:26,046
map and you have to scale each


354
00:10:26,046 --> 00:10:27,196
value in the depth map.


355
00:10:27,616 --> 00:10:28,406
That's a very brittle


356
00:10:28,406 --> 00:10:29,246
representation.


357
00:10:30,626 --> 00:10:32,576
Instead, we at Apple have chosen


358
00:10:32,576 --> 00:10:34,036
to express disparity using


359
00:10:34,196 --> 00:10:36,376
normalized values that are


360
00:10:36,376 --> 00:10:37,976
resilient to scaling operations.


361
00:10:38,376 --> 00:10:39,856
So here's how we do that.


362
00:10:40,206 --> 00:10:41,516
Again, going to our observed


363
00:10:41,516 --> 00:10:43,806
point, you'll notice that there


364
00:10:43,806 --> 00:10:45,376
are two similar triangles being


365
00:10:45,376 --> 00:10:45,776
formed.


366
00:10:46,086 --> 00:10:47,236
I'll highlight them for you.


367
00:10:48,716 --> 00:10:51,056
These triangles have equal


368
00:10:51,056 --> 00:10:53,146
ratios of sides and proportions.


369
00:10:53,836 --> 00:10:55,286
Now, if I get rid of the cameras


370
00:10:55,286 --> 00:10:56,436
to just show you the triangles,


371
00:10:56,906 --> 00:10:58,556
the real-world triangle sides


372
00:10:58,556 --> 00:11:01,856
are Z, or meters, and baseline,


373
00:11:01,926 --> 00:11:02,936
the distance between the two


374
00:11:02,936 --> 00:11:03,716
optical centers.


375
00:11:04,996 --> 00:11:06,506
Inside the light box, or the


376
00:11:06,506 --> 00:11:09,496
lightproof box, that same


377
00:11:09,496 --> 00:11:11,356
triangle is represented as the


378
00:11:11,356 --> 00:11:13,366
focal length in pixels and the


379
00:11:13,366 --> 00:11:14,916
disparity in pixels.


380
00:11:15,196 --> 00:11:17,146
Do you feel math coming on?


381
00:11:17,186 --> 00:11:18,036
I feel math coming on.


382
00:11:18,646 --> 00:11:19,766
So stay with me here.


383
00:11:19,766 --> 00:11:21,976
This is pretty painless.


384
00:11:22,736 --> 00:11:29,566
Baseline is to Z as pixel


385
00:11:30,596 --> 00:11:32,936
disparity is to focal length.


386
00:11:33,666 --> 00:11:36,116
Okay. Well, what if we divide


387
00:11:36,116 --> 00:11:38,396
both sides by the baseline so


388
00:11:38,396 --> 00:11:41,026
the b's cancel out on the left,


389
00:11:41,506 --> 00:11:43,646
and what you're left with is 1


390
00:11:43,646 --> 00:11:44,306
over z.


391
00:11:45,286 --> 00:11:45,976
That's pretty nice.


392
00:11:46,636 --> 00:11:48,886
1 over z is inverse depth.


393
00:11:49,386 --> 00:11:50,956
That is literally what disparity


394
00:11:50,956 --> 00:11:51,426
means.


395
00:11:51,896 --> 00:11:53,126
When an object moves farther


396
00:11:53,126 --> 00:11:55,156
away, the disparity shrinks.


397
00:11:55,756 --> 00:11:57,146
When it moves closer, the


398
00:11:57,146 --> 00:11:58,026
disparity grows.


399
00:11:58,026 --> 00:11:59,606
So it is the inverse of depth.


400
00:12:01,336 --> 00:12:02,626
What remains on the right is


401
00:12:02,626 --> 00:12:04,426
what we call normalized


402
00:12:04,426 --> 00:12:05,026
disparity.


403
00:12:05,096 --> 00:12:06,356
So it's not a pixel shift


404
00:12:06,356 --> 00:12:09,156
anymore, it's d over focal


405
00:12:09,156 --> 00:12:11,066
length times baseline.


406
00:12:11,526 --> 00:12:13,236
The baseline is baked in so you


407
00:12:13,236 --> 00:12:14,196
don't need to carry that


408
00:12:14,196 --> 00:12:15,916
information with you separately


409
00:12:16,136 --> 00:12:17,076
when you're dealing with the


410
00:12:17,076 --> 00:12:17,646
depth map.


411
00:12:18,256 --> 00:12:20,176
The units are 1 over meters,


412
00:12:20,176 --> 00:12:22,166
just as it's 1 over z, and it


413
00:12:22,286 --> 00:12:23,896
withstands scaling operations,


414
00:12:24,436 --> 00:12:25,666
and as you can see, converting


415
00:12:25,666 --> 00:12:27,736
from depth to disparity is


416
00:12:27,736 --> 00:12:29,016
trivial, since it's just a


417
00:12:29,016 --> 00:12:30,086
1-over operation.


418
00:12:31,166 --> 00:12:33,416
Is anyone feeling way beyond


419
00:12:33,416 --> 00:12:33,976
their depth at this point?


420
00:12:34,516 --> 00:12:36,586
[ Group groaning ]


421
00:12:37,086 --> 00:12:38,256
This is a little tricky stuff,


422
00:12:38,296 --> 00:12:40,386
but the takeaways are simple.


423
00:12:41,986 --> 00:12:43,326
We have a disparity-based


424
00:12:43,326 --> 00:12:44,206
system, not a true


425
00:12:44,206 --> 00:12:46,066
time-of-flight camera, but


426
00:12:46,066 --> 00:12:47,806
disparity is a great proxy for


427
00:12:47,806 --> 00:12:50,476
depth, and normalized disparity


428
00:12:50,476 --> 00:12:55,176
is the inverse of depth.


429
00:12:55,346 --> 00:12:56,766
Hey, speaking of normalized


430
00:12:56,766 --> 00:12:58,296
disparity as being the inverse


431
00:12:58,296 --> 00:12:58,956
of depth, here's a deep thought.


432
00:13:03,286 --> 00:13:05,906
This image has a disparity map,


433
00:13:06,636 --> 00:13:08,476
so I guess this would make this


434
00:13:08,476 --> 00:13:09,976
a depth-defying leap.


435
00:13:10,516 --> 00:13:12,596
[ Group groaning ]


436
00:13:13,096 --> 00:13:13,556
Thank you.


437
00:13:13,806 --> 00:13:14,796
All right.


438
00:13:15,206 --> 00:13:17,756
So in our depth API set we use


439
00:13:17,756 --> 00:13:20,096
the term depth data, and this is


440
00:13:20,096 --> 00:13:21,436
a generic term for anything


441
00:13:21,436 --> 00:13:22,236
that's depthy.


442
00:13:22,656 --> 00:13:24,746
It can refer to either a true


443
00:13:24,746 --> 00:13:26,636
depth map or a disparity map.


444
00:13:26,766 --> 00:13:28,156
Both are related to depth,


445
00:13:28,356 --> 00:13:29,686
they're both depthy, so they are


446
00:13:29,686 --> 00:13:30,846
both depth data.


447
00:13:32,466 --> 00:13:34,236
And we have a purpose-built


448
00:13:34,236 --> 00:13:35,276
object for this.


449
00:13:35,396 --> 00:13:36,956
The canonical representation on


450
00:13:36,956 --> 00:13:38,456
our platform for depth is called


451
00:13:38,456 --> 00:13:40,136
an AVDepthData.


452
00:13:40,516 --> 00:13:42,886
It's available on iOS, macOS and


453
00:13:42,886 --> 00:13:43,376
tvOS.


454
00:13:43,946 --> 00:13:45,386
It's a class in the AVFoundation


455
00:13:45,386 --> 00:13:47,286
framework and it represents


456
00:13:47,286 --> 00:13:49,026
either depth or disparity maps.


457
00:13:49,516 --> 00:13:50,986
It also provides some nice


458
00:13:50,986 --> 00:13:52,606
facilities to convert between


459
00:13:52,606 --> 00:13:53,676
depth and disparity.


460
00:13:54,716 --> 00:13:55,826
Okay. Let's get into the nuts


461
00:13:55,826 --> 00:13:57,406
and bolts of depth maps.


462
00:13:58,106 --> 00:13:59,886
Depth maps are images, if you


463
00:13:59,886 --> 00:14:00,966
haven't figured out by now.


464
00:14:01,026 --> 00:14:02,766
They're kind of like RGB images,


465
00:14:02,766 --> 00:14:04,106
except they're single channel,


466
00:14:04,606 --> 00:14:05,846
but they can still be expressed


467
00:14:05,846 --> 00:14:08,016
as CV pixel buffers, and now


468
00:14:08,016 --> 00:14:09,866
CoreVideo defines four new pixel


469
00:14:09,866 --> 00:14:12,206
formats for the types that we


470
00:14:12,206 --> 00:14:13,456
saw on the previous slide.


471
00:14:13,516 --> 00:14:14,996
They're all floating point.


472
00:14:15,706 --> 00:14:18,166
The first two are for normalized


473
00:14:18,166 --> 00:14:20,026
disparity and it's measured in 1


474
00:14:20,026 --> 00:14:20,866
over meters.


475
00:14:20,866 --> 00:14:22,296
Notice that there's a 16-bit


476
00:14:22,296 --> 00:14:24,216
flavor and a 32-bit flavor.


477
00:14:24,916 --> 00:14:27,146
The second two are for depth and


478
00:14:27,146 --> 00:14:28,206
they're measured in meters.


479
00:14:29,156 --> 00:14:31,006
They also come in 16- or 32-bit


480
00:14:31,006 --> 00:14:31,456
flavors.


481
00:14:31,586 --> 00:14:32,536
Why would we do this?


482
00:14:33,226 --> 00:14:34,096
Well, if you're going to be


483
00:14:34,096 --> 00:14:35,756
working with depth on the GPU,


484
00:14:35,756 --> 00:14:36,956
it would make sense for you to


485
00:14:36,956 --> 00:14:39,186
request 16-bit or half float


486
00:14:39,306 --> 00:14:40,716
values of depth.


487
00:14:40,716 --> 00:14:42,156
If you'll be working on the CPU,


488
00:14:42,446 --> 00:14:43,846
you should work with the full


489
00:14:43,846 --> 00:14:46,116
32-bit float variants.


490
00:14:46,116 --> 00:14:46,736
They'll work better.


491
00:14:48,476 --> 00:14:49,646
We'll talk later about where an


492
00:14:49,646 --> 00:14:51,436
AVDepthData object might come


493
00:14:51,436 --> 00:14:52,636
from, but for right now let's


494
00:14:52,636 --> 00:14:53,706
just focus on its core


495
00:14:53,706 --> 00:14:54,366
properties.


496
00:14:55,136 --> 00:14:57,156
Given an AVDepthData object you


497
00:14:57,156 --> 00:14:58,856
can query its depth data type,


498
00:14:59,216 --> 00:15:00,536
which is one of those four pixel


499
00:15:00,536 --> 00:15:02,976
formats; you can get access to


500
00:15:02,976 --> 00:15:04,926
the depthDataMap itself which,


501
00:15:04,926 --> 00:15:06,876
again, is a CV pixel buffer; you


502
00:15:06,876 --> 00:15:08,346
can iterate through it by row


503
00:15:08,346 --> 00:15:09,926
and column using standard CV


504
00:15:09,926 --> 00:15:10,766
pixel buffer APIs.


505
00:15:10,766 --> 00:15:13,566
And the final two properties I


506
00:15:13,566 --> 00:15:15,036
want to highlight here have to


507
00:15:15,036 --> 00:15:16,966
do with inherent problems in


508
00:15:16,966 --> 00:15:19,326
capturing depth data, and we're


509
00:15:19,326 --> 00:15:19,906
going to go through these


510
00:15:19,906 --> 00:15:21,426
problems one at a time and


511
00:15:21,426 --> 00:15:22,646
discuss the solutions.


512
00:15:23,236 --> 00:15:25,646
The first problem is holes,


513
00:15:25,956 --> 00:15:27,416
holes in the depth data.


514
00:15:27,606 --> 00:15:29,626
To calculate disparity both


515
00:15:29,626 --> 00:15:31,386
cameras need to observe that


516
00:15:31,386 --> 00:15:32,886
same point, but from two


517
00:15:32,886 --> 00:15:33,736
different perspectives.


518
00:15:34,156 --> 00:15:36,116
If they can't see it, no


519
00:15:36,116 --> 00:15:36,676
disparity.


520
00:15:37,256 --> 00:15:38,616
So why might they not be able to


521
00:15:38,616 --> 00:15:38,966
see it?


522
00:15:39,756 --> 00:15:42,286
For one, occlusions, such as a


523
00:15:42,286 --> 00:15:43,756
creepy finger coming in and


524
00:15:43,946 --> 00:15:45,286
suddenly blocking one of your


525
00:15:45,286 --> 00:15:45,826
cameras.


526
00:15:45,826 --> 00:15:47,886
If it's partially obscuring it


527
00:15:47,886 --> 00:15:49,426
or obscuring it, you don't have


528
00:15:49,486 --> 00:15:52,356
two points of view anymore,


529
00:15:52,356 --> 00:15:53,326
therefore, you have no


530
00:15:53,326 --> 00:15:53,886
disparity.


531
00:15:55,066 --> 00:15:56,856
Another more common reason is


532
00:15:56,896 --> 00:15:58,706
difficulty in finding features.


533
00:15:59,536 --> 00:16:01,106
When camera one and camera two's


534
00:16:01,106 --> 00:16:03,006
images are compared, remember,


535
00:16:03,006 --> 00:16:04,906
they line them up by optical


536
00:16:04,906 --> 00:16:06,306
center and look for features


537
00:16:07,176 --> 00:16:08,426
matching key points.


538
00:16:08,996 --> 00:16:10,866
Let's say it's dark out and the


539
00:16:10,866 --> 00:16:12,506
observed point may not have very


540
00:16:12,506 --> 00:16:13,986
well-defined features anymore,


541
00:16:14,406 --> 00:16:16,716
the color is a little bit noisy,


542
00:16:16,716 --> 00:16:18,106
the edges are hard to find.


543
00:16:18,806 --> 00:16:20,136
Another example would be if you


544
00:16:20,136 --> 00:16:21,396
point the cameras at a flat,


545
00:16:21,396 --> 00:16:24,146
white wall with no texture to


546
00:16:24,146 --> 00:16:26,086
it, there are no features so


547
00:16:26,086 --> 00:16:27,346
it's very hard to find


548
00:16:27,346 --> 00:16:29,346
differences in matching.


549
00:16:29,466 --> 00:16:30,866
For any of these reasons you


550
00:16:30,866 --> 00:16:32,456
might have areas in your image


551
00:16:32,886 --> 00:16:35,156
where there is no disparity, and


552
00:16:35,156 --> 00:16:36,096
those are called holes.


553
00:16:37,306 --> 00:16:39,106
Holes are expressed in the


554
00:16:39,106 --> 00:16:41,766
depthDataMap as not a number


555
00:16:42,186 --> 00:16:43,526
standard floating-point


556
00:16:43,526 --> 00:16:45,096
representation, either 16-bit or


557
00:16:45,096 --> 00:16:45,796
32-bit.


558
00:16:46,506 --> 00:16:48,616
Depth maps may also be processed


559
00:16:48,886 --> 00:16:50,046
to fill in the holes.


560
00:16:50,526 --> 00:16:52,706
We can do this by interpolating


561
00:16:52,706 --> 00:16:54,226
based on surrounding depth data


562
00:16:54,226 --> 00:16:56,436
that's good or by using metadata


563
00:16:56,436 --> 00:16:58,166
present in the RGB image.


564
00:16:58,866 --> 00:17:01,176
The isDepthDataFiltered property


565
00:17:01,176 --> 00:17:03,266
of AVDepthData tells you whether


566
00:17:03,266 --> 00:17:04,876
the map has been processed in


567
00:17:04,876 --> 00:17:05,346
this way.


568
00:17:06,336 --> 00:17:08,036
If you receive an unfiltered


569
00:17:08,036 --> 00:17:09,786
AVDepthData, you can expect to


570
00:17:09,786 --> 00:17:11,756
find not a number values within


571
00:17:11,906 --> 00:17:13,046
that map.


572
00:17:13,326 --> 00:17:14,715
Okay. We'll talk a little bit


573
00:17:14,715 --> 00:17:16,435
more about how you can request


574
00:17:16,435 --> 00:17:17,576
filtering later on.


575
00:17:18,616 --> 00:17:20,376
The second problem that


576
00:17:20,376 --> 00:17:21,486
interferes with accurate


577
00:17:21,486 --> 00:17:22,955
disparity generation is


578
00:17:23,156 --> 00:17:24,056
calibration error.


579
00:17:24,556 --> 00:17:25,715
There are lots of different


580
00:17:25,715 --> 00:17:26,915
kinds of calibration errors that


581
00:17:26,915 --> 00:17:28,836
can happen that we can correct,


582
00:17:29,246 --> 00:17:30,366
but there's one that we can't,


583
00:17:30,806 --> 00:17:32,516
and that is incorrect accounting


584
00:17:32,516 --> 00:17:34,606
of the optical center in either


585
00:17:34,606 --> 00:17:36,346
of the two cameras.


586
00:17:36,746 --> 00:17:38,886
So for this one I've shifted our


587
00:17:39,476 --> 00:17:40,816
pinhole cameras down to the


588
00:17:40,816 --> 00:17:42,276
bottom by 90 degrees to give


589
00:17:42,276 --> 00:17:43,386
myself a little more room at the


590
00:17:43,386 --> 00:17:43,786
top.


591
00:17:44,356 --> 00:17:46,026
In an ideal stereo-rectified


592
00:17:46,026 --> 00:17:48,346
system, perspective only shifts


593
00:17:48,346 --> 00:17:50,426
in one direction, left or right,


594
00:17:51,216 --> 00:17:52,696
along these same lines.


595
00:17:53,096 --> 00:17:54,596
So if there's a ray that's


596
00:17:54,596 --> 00:17:56,936
observed from camera one, it


597
00:17:56,936 --> 00:17:58,816
would be viewed as a series of


598
00:17:58,866 --> 00:18:01,056
intersecting points on a line


599
00:18:01,306 --> 00:18:01,956
from camera two, like this.


600
00:18:06,046 --> 00:18:06,956
So for disparities to be


601
00:18:06,956 --> 00:18:09,496
measured accurately you must


602
00:18:09,496 --> 00:18:11,236
have an accurate baseline.


603
00:18:11,526 --> 00:18:12,886
And baseline, again, is the


604
00:18:12,886 --> 00:18:14,096
distance between the two optical


605
00:18:14,096 --> 00:18:14,506
centers.


606
00:18:15,066 --> 00:18:16,156
If you don't have an accurate


607
00:18:16,156 --> 00:18:18,186
baseline, you can't align those


608
00:18:18,186 --> 00:18:19,786
two cameras' optical centers and


609
00:18:19,786 --> 00:18:21,146
you can't figure out how much


610
00:18:21,146 --> 00:18:22,106
disparity there is.


611
00:18:23,336 --> 00:18:24,676
Now, what happens if the optical


612
00:18:24,676 --> 00:18:27,196
center is calculated wrong or


613
00:18:27,196 --> 00:18:28,156
just misreported?


614
00:18:28,916 --> 00:18:29,856
Let's say the true optical


615
00:18:29,856 --> 00:18:32,746
center is here, but for some


616
00:18:32,746 --> 00:18:35,116
reason it's misreported as being


617
00:18:35,846 --> 00:18:36,106
here.


618
00:18:36,956 --> 00:18:38,196
Now suddenly all of our


619
00:18:38,326 --> 00:18:39,856
disparity points on camera two's


620
00:18:39,856 --> 00:18:41,216
image plane are shifted to the


621
00:18:41,216 --> 00:18:44,176
left by the same fixed amount.


622
00:18:44,896 --> 00:18:46,556
Now all the objects will be


623
00:18:46,556 --> 00:18:48,266
reported as being farther than


624
00:18:48,266 --> 00:18:49,066
they truly are.


625
00:18:50,106 --> 00:18:51,216
If the error were in the other


626
00:18:51,216 --> 00:18:52,496
direction, then the objects


627
00:18:52,496 --> 00:18:53,646
would be misreported as being


628
00:18:53,646 --> 00:18:54,286
too close.


629
00:18:55,026 --> 00:18:56,936
So we can detect and fix a lot


630
00:18:56,936 --> 00:18:57,936
of problems, but this one we


631
00:18:57,936 --> 00:18:59,616
can't detect and fix because,


632
00:18:59,616 --> 00:19:00,986
again, all of those points still


633
00:19:00,986 --> 00:19:02,136
look like they're on the same


634
00:19:02,186 --> 00:19:03,086
correct line.


635
00:19:03,376 --> 00:19:04,146
We don't know the difference


636
00:19:04,146 --> 00:19:05,656
between the baseline being wrong


637
00:19:06,046 --> 00:19:07,926
and the person actually moving


638
00:19:08,046 --> 00:19:08,916
further or closer.


639
00:19:10,136 --> 00:19:11,136
Now, how can this happen; why


640
00:19:11,136 --> 00:19:12,446
would there be problems with


641
00:19:12,656 --> 00:19:15,106
optical center calculation?


642
00:19:16,096 --> 00:19:17,766
iPhone cameras don't use


643
00:19:17,766 --> 00:19:20,606
pinholes, they have lenses, and


644
00:19:20,606 --> 00:19:23,106
on iPhones those lenses don't


645
00:19:23,106 --> 00:19:23,686
stay still.


646
00:19:24,366 --> 00:19:26,916
If OIS is engaged, then the lens


647
00:19:26,916 --> 00:19:28,436
may be moving laterally to


648
00:19:28,436 --> 00:19:30,006
counteract hand shake.


649
00:19:30,706 --> 00:19:32,386
Gravity can come into play


650
00:19:32,386 --> 00:19:33,576
because it can cause the lenses


651
00:19:33,576 --> 00:19:34,156
to sag.


652
00:19:34,896 --> 00:19:36,746
The focus actuators are actually


653
00:19:36,746 --> 00:19:38,666
springs to which an electrical


654
00:19:38,666 --> 00:19:39,556
current is applied.


655
00:19:40,166 --> 00:19:41,676
So all of these reasons might


656
00:19:41,676 --> 00:19:43,056
cause it to move around


657
00:19:43,056 --> 00:19:44,016
laterally a little bit, and


658
00:19:44,456 --> 00:19:45,736
these very small errors in


659
00:19:45,736 --> 00:19:46,856
optical center position can


660
00:19:46,856 --> 00:19:49,146
result in large errors in


661
00:19:49,146 --> 00:19:49,656
disparity.


662
00:19:50,506 --> 00:19:52,176
When this occurs, the result is


663
00:19:52,176 --> 00:19:54,886
a constant amount of error in


664
00:19:54,886 --> 00:19:56,016
every pixel in the map.


665
00:19:57,336 --> 00:19:58,816
The disparity values are still


666
00:19:59,066 --> 00:20:01,336
usable relative to one another,


667
00:20:01,736 --> 00:20:04,566
but they no longer reflect


668
00:20:04,566 --> 00:20:05,876
real-world distances.


669
00:20:07,016 --> 00:20:09,546
For this reason AVDepthData


670
00:20:09,546 --> 00:20:11,046
objects have to have a concept


671
00:20:11,046 --> 00:20:12,086
of accuracy.


672
00:20:12,896 --> 00:20:15,086
An accuracy value of absolute


673
00:20:15,086 --> 00:20:17,676
would mean the units do reflect


674
00:20:17,676 --> 00:20:19,026
real-world distances, there's no


675
00:20:19,026 --> 00:20:20,076
calibration problem.


676
00:20:20,716 --> 00:20:22,876
Relative accuracy means that the


677
00:20:22,876 --> 00:20:24,436
Z ordering is still preserved,


678
00:20:25,116 --> 00:20:26,946
but the real-world scale has


679
00:20:26,946 --> 00:20:27,546
been lost.


680
00:20:28,436 --> 00:20:29,846
Depth data captured from, say, a


681
00:20:29,846 --> 00:20:31,486
third-party camera can be


682
00:20:31,486 --> 00:20:33,656
reported as either absolute or


683
00:20:33,656 --> 00:20:36,276
relative, but iPhone 7 Plus


684
00:20:36,276 --> 00:20:38,916
always reports relative accuracy


685
00:20:39,246 --> 00:20:40,466
due to the calibration errors


686
00:20:40,466 --> 00:20:41,306
that I just mentioned.


687
00:20:41,886 --> 00:20:42,706
But I don't want you to be


688
00:20:42,706 --> 00:20:43,476
frightened by that.


689
00:20:43,876 --> 00:20:46,816
Relative accuracy is not bad


690
00:20:46,816 --> 00:20:47,456
accuracy.


691
00:20:47,946 --> 00:20:49,246
Dual camera depth is still


692
00:20:49,246 --> 00:20:51,376
totally usable, and let me show


693
00:20:51,376 --> 00:20:53,426
you how.


694
00:20:53,656 --> 00:20:55,156
Awesome, formulas on slides.


695
00:20:55,966 --> 00:20:56,986
Okay. Here comes a bit of math


696
00:20:56,986 --> 00:20:57,196
again.


697
00:20:57,436 --> 00:20:59,286
Let's say we've got a relative


698
00:20:59,286 --> 00:21:00,986
accuracy disparity value on the


699
00:21:00,986 --> 00:21:03,126
left, which is the d with the


700
00:21:03,126 --> 00:21:05,266
little dunce cap over it because


701
00:21:05,266 --> 00:21:07,696
it's bad, and that's equivalent


702
00:21:07,696 --> 00:21:10,166
to an absolute disparity d plus


703
00:21:10,166 --> 00:21:11,876
a fixed amount of error.


704
00:21:12,486 --> 00:21:13,336
We don't know what the fixed


705
00:21:13,336 --> 00:21:14,346
amount of error is, but it's


706
00:21:14,386 --> 00:21:14,576
there.


707
00:21:15,986 --> 00:21:16,926
Now, let's take a common


708
00:21:16,926 --> 00:21:18,996
operation such as finding the


709
00:21:18,996 --> 00:21:20,166
difference between two


710
00:21:20,166 --> 00:21:22,176
disparities in the same map,


711
00:21:22,826 --> 00:21:23,896
it's like subtracting the


712
00:21:23,896 --> 00:21:24,416
differences.


713
00:21:24,876 --> 00:21:27,416
So let's say the equation looks


714
00:21:27,416 --> 00:21:27,996
like this.


715
00:21:28,946 --> 00:21:31,056
You have two bad datas where


716
00:21:31,056 --> 00:21:33,276
you're subtracting two bad


717
00:21:33,276 --> 00:21:34,926
disparities, and that's the same


718
00:21:34,926 --> 00:21:36,116
as two good disparities with the


719
00:21:36,116 --> 00:21:37,006
same fixed error.


720
00:21:37,466 --> 00:21:39,436
If we reorder things, we find


721
00:21:39,436 --> 00:21:41,486
that actually we can get rid of


722
00:21:41,486 --> 00:21:43,806
the errors because they cancel


723
00:21:43,806 --> 00:21:45,736
each other out and we're left


724
00:21:45,736 --> 00:21:47,756
with a very happy coincidence


725
00:21:47,756 --> 00:21:47,996
here.


726
00:21:49,456 --> 00:21:51,056
This happy discovery is that the


727
00:21:51,056 --> 00:21:52,476
differences are the same,


728
00:21:53,106 --> 00:21:54,076
whether your disparity is


729
00:21:54,076 --> 00:21:55,796
perfect or your disparity is


730
00:21:55,796 --> 00:21:56,256
relative.


731
00:21:56,876 --> 00:21:58,356
This formula kind of proves that


732
00:21:58,356 --> 00:21:59,756
relative is just as good as


733
00:21:59,756 --> 00:22:01,306
absolute if you're creating


734
00:22:01,306 --> 00:22:03,276
effects that only rely on, say,


735
00:22:03,276 --> 00:22:04,766
differences within the same map.


736
00:22:05,046 --> 00:22:06,176
And that's why the effects


737
00:22:06,176 --> 00:22:08,416
produced from relative accuracy


738
00:22:08,416 --> 00:22:09,956
depth still look fantastic.


739
00:22:10,276 --> 00:22:13,276
And with that I think we've


740
00:22:13,276 --> 00:22:15,006
wrapped up our AVDepthData


741
00:22:15,006 --> 00:22:16,456
intro, or maybe we've gotten to


742
00:22:16,456 --> 00:22:17,426
the bottom of it [group


743
00:22:17,426 --> 00:22:19,256
groaning].


744
00:22:19,256 --> 00:22:20,436
It's time to move on to our


745
00:22:20,436 --> 00:22:21,936
first capture case, which is


746
00:22:21,986 --> 00:22:24,446
streaming depth, and I feel a


747
00:22:24,446 --> 00:22:24,976
demo coming on.


748
00:22:32,046 --> 00:22:33,956
Okay. Let's start with a demo


749
00:22:33,956 --> 00:22:35,666
called AVCamPhotoFilter.


750
00:22:36,316 --> 00:22:37,646
This is an app that we released


751
00:22:37,646 --> 00:22:39,756
last year as sample code with


752
00:22:39,756 --> 00:22:41,216
the show, and this was to show


753
00:22:41,216 --> 00:22:43,156
you how to apply an effect in


754
00:22:43,156 --> 00:22:46,716
real time to a preview and


755
00:22:46,786 --> 00:22:48,106
render that same effect to the


756
00:22:48,106 --> 00:22:48,626
photo.


757
00:22:49,026 --> 00:22:50,246
So last year it just had one


758
00:22:50,246 --> 00:22:51,526
button at the top and that was


759
00:22:51,526 --> 00:22:53,026
to filter the video, and it did,


760
00:22:53,096 --> 00:22:54,086
you know, kind of a cheesy


761
00:22:54,086 --> 00:22:56,786
little rosy effect to the video,


762
00:22:56,786 --> 00:22:57,946
but it shows it to you in real


763
00:22:57,946 --> 00:23:00,356
time on the preview and it also


764
00:23:00,356 --> 00:23:01,716
renders it to the photo when you


765
00:23:01,716 --> 00:23:02,456
take a photo.


766
00:23:02,906 --> 00:23:05,546
This year we've added some depth


767
00:23:05,606 --> 00:23:08,226
to this sample by showing you


768
00:23:08,226 --> 00:23:11,156
how to preview depth in a


769
00:23:11,156 --> 00:23:11,976
streaming fashion.


770
00:23:12,666 --> 00:23:13,866
So now what we're doing is


771
00:23:13,866 --> 00:23:16,106
turning on depth and we're


772
00:23:16,106 --> 00:23:19,186
previewing it by mixing between


773
00:23:19,186 --> 00:23:24,096
full RGB and full depth.


774
00:23:24,256 --> 00:23:25,576
I'm going to call up my lovely


775
00:23:25,576 --> 00:23:26,796
assistant Vanna -- actually,


776
00:23:26,796 --> 00:23:27,246
it's Eric.


777
00:23:27,356 --> 00:23:27,856
Thanks, Eric.


778
00:23:28,256 --> 00:23:29,336
He's going to come up and show


779
00:23:30,546 --> 00:23:32,046
us something that's dynamic,


780
00:23:32,046 --> 00:23:32,976
like a baseball glove.


781
00:23:33,056 --> 00:23:33,506
I love it.


782
00:23:34,026 --> 00:23:35,546
Now, notice that it's quite


783
00:23:35,546 --> 00:23:36,966
noisy, there's a lot of jumping


784
00:23:36,966 --> 00:23:37,586
around happening.


785
00:23:37,586 --> 00:23:38,556
You can definitely see what it


786
00:23:38,556 --> 00:23:40,716
is, but it's not perfect and


787
00:23:40,716 --> 00:23:41,746
there's a lot of temporal


788
00:23:41,746 --> 00:23:43,256
problems going on, but I can


789
00:23:43,256 --> 00:23:45,456
click the Smooth button and


790
00:23:45,456 --> 00:23:47,246
suddenly we have filtered the


791
00:23:47,246 --> 00:23:49,096
depth to fill in the holes and


792
00:23:49,096 --> 00:23:50,416
temporally smooth them, and now


793
00:23:50,416 --> 00:23:51,706
it's a really nice-looking


794
00:23:52,086 --> 00:23:52,646
disparity.


795
00:23:52,646 --> 00:23:54,076
I'm going to go ahead and take a


796
00:23:54,076 --> 00:23:54,536
photo.


797
00:23:54,596 --> 00:23:58,546
And now if I go back to the


798
00:23:58,546 --> 00:24:00,886
Photos app, we'll find that we


799
00:24:00,886 --> 00:24:03,146
just captured a really lovely


800
00:24:03,776 --> 00:24:05,326
looking depth representation,


801
00:24:05,796 --> 00:24:07,466
and now this is an educational


802
00:24:07,466 --> 00:24:09,486
app because finally we can


803
00:24:09,536 --> 00:24:11,496
answer the question how deep is


804
00:24:11,496 --> 00:24:13,456
your glove, how deep is your


805
00:24:13,456 --> 00:24:13,836
glove [group groaning].


806
00:24:14,396 --> 00:24:15,486
You really need to learn.


807
00:24:16,366 --> 00:24:17,186
All right.


808
00:24:17,186 --> 00:24:20,466
Let's go back to slides.


809
00:24:20,946 --> 00:24:21,646
I know it's late.


810
00:24:21,646 --> 00:24:22,776
I'm trying to keep you awake.


811
00:24:24,656 --> 00:24:24,996
All right.


812
00:24:24,996 --> 00:24:25,816
How did we do that.


813
00:24:27,666 --> 00:24:29,236
AVFoundation frameworks camera


814
00:24:29,236 --> 00:24:30,876
capture classes are divided into


815
00:24:30,876 --> 00:24:32,376
three main groups.


816
00:24:32,776 --> 00:24:33,406
The first is the


817
00:24:33,406 --> 00:24:34,936
AVCaptureSession, which is just


818
00:24:34,936 --> 00:24:36,046
a control object.


819
00:24:36,536 --> 00:24:37,816
You tell it to start or stop


820
00:24:37,816 --> 00:24:38,856
running, but it doesn't do


821
00:24:38,856 --> 00:24:40,216
anything unless you give it some


822
00:24:40,216 --> 00:24:42,466
input, and for that we have AV


823
00:24:42,466 --> 00:24:44,316
capture inputs, such as an


824
00:24:44,316 --> 00:24:46,416
AVCaptureDeviceInput, I've made


825
00:24:46,416 --> 00:24:48,216
one here associated with the


826
00:24:48,216 --> 00:24:50,076
dual camera, and that provides


827
00:24:50,076 --> 00:24:51,796
input to the session, but now


828
00:24:51,796 --> 00:24:53,206
you need to direct it somewhere


829
00:24:53,206 --> 00:24:53,886
as an output.


830
00:24:54,256 --> 00:24:55,796
And now we have a new kind of


831
00:24:55,796 --> 00:24:56,476
output called an


832
00:24:56,476 --> 00:24:58,406
AVCaptureDepthDataOutput.


833
00:24:59,216 --> 00:25:01,586
This is affectionately referred


834
00:25:01,586 --> 00:25:04,256
to on our team as the DDO, and


835
00:25:04,256 --> 00:25:05,686
it functions similarly to our


836
00:25:05,686 --> 00:25:07,806
VideoDataOutput, except that


837
00:25:07,806 --> 00:25:09,126
instead of delivering CoreMedia


838
00:25:09,126 --> 00:25:11,056
sample buffers, it delivers


839
00:25:11,196 --> 00:25:14,006
AVDepthData objects, that


840
00:25:14,006 --> 00:25:15,316
canonical representation that I


841
00:25:15,316 --> 00:25:15,996
was talking about.


842
00:25:16,456 --> 00:25:17,566
It delivers them in a streaming


843
00:25:17,566 --> 00:25:17,976
fashion.


844
00:25:23,046 --> 00:25:24,366
Now, where is


845
00:25:24,366 --> 00:25:25,476
AVCaptureDepthDataOutput


846
00:25:25,476 --> 00:25:26,176
supported?


847
00:25:26,176 --> 00:25:27,266
You can, of course, add it to


848
00:25:27,266 --> 00:25:29,366
any session anywhere, but you're


849
00:25:29,366 --> 00:25:31,066
not going to get depth unless


850
00:25:31,066 --> 00:25:32,266
you are on the dual camera


851
00:25:32,266 --> 00:25:33,816
because that is the only dual


852
00:25:34,256 --> 00:25:35,976
system or stereo system that we


853
00:25:35,976 --> 00:25:37,766
have for calculating disparity.


854
00:25:39,176 --> 00:25:40,246
When you attach a


855
00:25:40,246 --> 00:25:42,166
DepthDataOutput to your session,


856
00:25:42,446 --> 00:25:43,306
some things happen.


857
00:25:43,716 --> 00:25:45,146
The dual camera automatically


858
00:25:45,146 --> 00:25:48,286
zooms to 2X, that is the full


859
00:25:48,286 --> 00:25:50,136
field of view of the tele, and


860
00:25:50,136 --> 00:25:51,276
that's because in order to


861
00:25:51,276 --> 00:25:53,066
calculate disparity, the focal


862
00:25:53,066 --> 00:25:55,106
lengths need to be the same and


863
00:25:55,166 --> 00:25:57,086
at 2X zoom the wide-angle


864
00:25:57,086 --> 00:25:58,776
camera's focal length matches


865
00:25:58,826 --> 00:25:59,246
the tele.


866
00:26:00,536 --> 00:26:02,366
Also zoom is disabled while you


867
00:26:02,366 --> 00:26:03,776
are calculating depth.


868
00:26:04,656 --> 00:26:06,646
We've added some new accessors


869
00:26:06,646 --> 00:26:08,256
to AVCaptureDevice.


870
00:26:08,926 --> 00:26:10,526
On the dual camera you can


871
00:26:10,526 --> 00:26:12,536
discover which video formats


872
00:26:12,536 --> 00:26:14,196
support depth by querying the


873
00:26:14,196 --> 00:26:15,526
supportedDepthDataFormats


874
00:26:15,526 --> 00:26:16,046
property.


875
00:26:16,196 --> 00:26:18,296
And there's also a new


876
00:26:18,496 --> 00:26:20,656
activeDepthDataFormat property


877
00:26:20,656 --> 00:26:22,186
that lets you see what the


878
00:26:22,186 --> 00:26:23,846
activeDepthDataFormat is or


879
00:26:23,846 --> 00:26:26,766
select a new DepthDataFormat.


880
00:26:28,276 --> 00:26:30,526
We currently support three video


881
00:26:30,526 --> 00:26:33,396
resolutions or presets for


882
00:26:33,396 --> 00:26:34,406
depth, and let me go through


883
00:26:34,406 --> 00:26:35,176
them one at a time.


884
00:26:35,446 --> 00:26:37,116
The first is the ever-popular


885
00:26:37,116 --> 00:26:38,016
Photo Preset.


886
00:26:38,656 --> 00:26:41,416
In the Photo Preset you get a


887
00:26:41,416 --> 00:26:43,186
screen-sized preview coming out


888
00:26:43,186 --> 00:26:44,716
of VideoDataOutput, and you get


889
00:26:44,716 --> 00:26:46,676
full res 12-megapixel images


890
00:26:46,906 --> 00:26:48,466
coming out of the photoOutput.


891
00:26:48,916 --> 00:26:49,696
So here you see that the


892
00:26:49,696 --> 00:26:50,966
VideoDataOutput is delivering


893
00:26:50,966 --> 00:26:52,506
1440x1080, which is


894
00:26:52,506 --> 00:26:53,336
screen-sized.


895
00:26:53,836 --> 00:26:54,986
Accompanying that, if you use a


896
00:26:54,986 --> 00:26:57,966
DepthDataOutput, you get 320x240


897
00:26:58,146 --> 00:27:00,086
at a maximum of 24 fps.


898
00:27:00,496 --> 00:27:01,236
Why so small?


899
00:27:01,756 --> 00:27:03,096
Well, it takes a lot of


900
00:27:03,096 --> 00:27:04,736
horsepower to do that disparity


901
00:27:04,736 --> 00:27:06,206
map 24 times a second.


902
00:27:06,916 --> 00:27:08,446
You can also get it at a lower


903
00:27:08,556 --> 00:27:09,956
resolution if you would like,


904
00:27:09,956 --> 00:27:11,356
160x120.


905
00:27:11,666 --> 00:27:13,976
Next we have a 16x9 format.


906
00:27:13,976 --> 00:27:15,476
This is a new format this year.


907
00:27:16,066 --> 00:27:18,496
Last year we had a 720p 16x9


908
00:27:18,496 --> 00:27:19,766
format that went up to 60 fps.


909
00:27:19,766 --> 00:27:21,566
This is a new one that goes up


910
00:27:21,566 --> 00:27:23,106
to 30 fps, but it supports


911
00:27:23,106 --> 00:27:23,526
depth.


912
00:27:23,796 --> 00:27:25,816
And again, it is aspect correct


913
00:27:25,816 --> 00:27:26,926
in the DepthDataOutput at


914
00:27:26,926 --> 00:27:29,356
320x180 or 160x90.


915
00:27:29,936 --> 00:27:31,076
And finally, we have a very


916
00:27:31,076 --> 00:27:34,326
small VGA-sized preset or active


917
00:27:34,326 --> 00:27:35,566
format that you can use if you


918
00:27:35,566 --> 00:27:36,616
just want something very small


919
00:27:36,616 --> 00:27:36,976
very fast.


920
00:27:41,426 --> 00:27:42,566
Let's talk about frame rates.


921
00:27:42,756 --> 00:27:44,266
AVCaptureDevice allows you to


922
00:27:44,266 --> 00:27:46,286
set the min and max video frame


923
00:27:46,286 --> 00:27:47,676
rates, but it does not allow you


924
00:27:47,676 --> 00:27:50,126
to set the depth frame rates


925
00:27:50,226 --> 00:27:51,626
independent of the video frame


926
00:27:51,626 --> 00:27:51,816
rate.


927
00:27:52,206 --> 00:27:54,146
That is because depth needs to


928
00:27:54,146 --> 00:27:56,266
be delivered coincident with the


929
00:27:56,266 --> 00:28:00,046
video or at an even fraction of


930
00:28:00,516 --> 00:28:01,586
the video frame rate.


931
00:28:02,316 --> 00:28:04,786
So, for example, if you select a


932
00:28:04,786 --> 00:28:08,106
max video frame rate of 24, the


933
00:28:08,106 --> 00:28:09,536
depth can keep up with that, so


934
00:28:09,536 --> 00:28:11,226
you get 24 fps of depth.


935
00:28:11,736 --> 00:28:13,896
If, however, you select 30 fps


936
00:28:13,896 --> 00:28:16,466
video, the depth cannot keep up


937
00:28:16,566 --> 00:28:18,376
so it will select not 24, but


938
00:28:18,376 --> 00:28:20,206
15, so that you got nice even


939
00:28:20,326 --> 00:28:20,936
multiples.


940
00:28:22,176 --> 00:28:24,776
DepthDataOutput supports


941
00:28:25,016 --> 00:28:26,416
filtering depth data, as I just


942
00:28:26,416 --> 00:28:26,886
showed you in the


943
00:28:26,886 --> 00:28:28,216
AVCamPhotoFilter demo.


944
00:28:28,746 --> 00:28:30,806
That fills the holes and it also


945
00:28:30,806 --> 00:28:32,886
smooths things out as you move


946
00:28:32,886 --> 00:28:34,176
around so that you don't see


947
00:28:34,286 --> 00:28:35,456
temporal jumps from


948
00:28:35,456 --> 00:28:37,616
frame-to-frame.


949
00:28:38,196 --> 00:28:38,636
All right.


950
00:28:38,906 --> 00:28:39,856
Let's look at our current


951
00:28:40,056 --> 00:28:42,176
landscape as far as data


952
00:28:42,176 --> 00:28:42,836
outputs.


953
00:28:43,316 --> 00:28:44,666
We have four of them now.


954
00:28:45,326 --> 00:28:45,936
The first is the


955
00:28:45,936 --> 00:28:47,146
VideoDataOutput, which has been


956
00:28:47,146 --> 00:28:49,686
around since iOS 4, and it is


957
00:28:49,686 --> 00:28:51,106
the thing that gives you video


958
00:28:51,106 --> 00:28:52,666
frames one at a time in a


959
00:28:52,666 --> 00:28:54,786
streaming fashion at 30 fps or


960
00:28:54,786 --> 00:28:56,316
60 fps, whatever you set it to.


961
00:28:57,066 --> 00:28:58,886
We also have an AudioDataOutput


962
00:28:59,226 --> 00:29:00,726
which typically gives you pushes


963
00:29:00,726 --> 00:29:03,576
of PCM frames in 1024 at a time


964
00:29:03,956 --> 00:29:05,416
at 44.1.


965
00:29:05,846 --> 00:29:08,186
We also have a MetadataOutput


966
00:29:08,186 --> 00:29:10,126
that can deliver either faces,


967
00:29:10,126 --> 00:29:12,536
detected faces or barcodes, and


968
00:29:12,536 --> 00:29:13,736
these come in sporadically.


969
00:29:14,136 --> 00:29:15,446
They may have some latency, up


970
00:29:15,446 --> 00:29:16,776
to four frames of latency for


971
00:29:16,776 --> 00:29:17,566
finding faces.


972
00:29:18,536 --> 00:29:19,446
And now we're adding


973
00:29:19,446 --> 00:29:21,276
DepthDataOutput, which, as I


974
00:29:21,276 --> 00:29:22,516
just mentioned, is either


975
00:29:22,516 --> 00:29:23,696
delivered at the frame rate of


976
00:29:23,696 --> 00:29:26,626
the video or at a rate evenly


977
00:29:26,706 --> 00:29:28,176
divisible by the video.


978
00:29:28,576 --> 00:29:30,246
So now this is kind of getting


979
00:29:30,246 --> 00:29:30,876
ridiculous.


980
00:29:31,366 --> 00:29:32,266
In order to work with all of


981
00:29:32,266 --> 00:29:33,806
these data outputs you have to


982
00:29:33,806 --> 00:29:34,996
have a very sophisticated


983
00:29:34,996 --> 00:29:37,216
buffering mechanism to keep


984
00:29:37,216 --> 00:29:38,276
track of when everything's


985
00:29:38,276 --> 00:29:39,706
coming in if you care about


986
00:29:39,796 --> 00:29:41,106
dealing with all of them at the


987
00:29:41,106 --> 00:29:42,856
same time, or dealing with a


988
00:29:42,856 --> 00:29:44,086
certain presentation time


989
00:29:44,086 --> 00:29:44,696
altogether.


990
00:29:45,556 --> 00:29:47,826
We have recognized this as a


991
00:29:47,826 --> 00:29:51,206
problem for a while now, but the


992
00:29:51,206 --> 00:29:52,966
DepthDataOutput has proven to be


993
00:29:53,046 --> 00:29:54,756
the bridge too far.


994
00:29:54,756 --> 00:29:58,026
That wasn't very loud.


995
00:29:58,246 --> 00:29:59,626
Next one, better effort, please.


996
00:30:00,116 --> 00:30:01,916
In iOS 11 we've added a new


997
00:30:01,916 --> 00:30:05,136
synchronizing object called an


998
00:30:05,136 --> 00:30:06,186
AVCaptureDataOutput


999
00:30:06,186 --> 00:30:06,806
Synchronizer.


1000
00:30:07,356 --> 00:30:08,886
It delivers all of the available


1001
00:30:08,886 --> 00:30:10,316
data for a given presentation


1002
00:30:10,316 --> 00:30:12,426
time in a single unified


1003
00:30:12,646 --> 00:30:14,926
callback, and it delivers a


1004
00:30:14,976 --> 00:30:16,656
collection object called an


1005
00:30:16,656 --> 00:30:18,406
AVCaptureSynchronizedData


1006
00:30:18,406 --> 00:30:18,806
Collection.


1007
00:30:19,396 --> 00:30:21,136
So this allows you to designate


1008
00:30:21,136 --> 00:30:22,906
a master output, the one that's


1009
00:30:22,906 --> 00:30:24,106
most important to you, the one


1010
00:30:24,106 --> 00:30:25,136
that you want everything else to


1011
00:30:25,136 --> 00:30:27,186
be synchronized to, and then it


1012
00:30:27,316 --> 00:30:28,856
will do the job of holding on to


1013
00:30:28,856 --> 00:30:30,296
the media as long as it needs


1014
00:30:30,296 --> 00:30:31,986
to, to ensure that all of the


1015
00:30:31,986 --> 00:30:33,356
data for a given presentation


1016
00:30:33,356 --> 00:30:34,906
time is available before it


1017
00:30:34,906 --> 00:30:36,136
gives you that single unified


1018
00:30:36,136 --> 00:30:36,676
callback.


1019
00:30:36,966 --> 00:30:38,986
It will either give you all of


1020
00:30:38,986 --> 00:30:40,566
the data for all of the outputs,


1021
00:30:40,566 --> 00:30:41,856
or if it's assured that there is


1022
00:30:41,856 --> 00:30:43,676
no data for a particular output,


1023
00:30:43,676 --> 00:30:44,686
it will go ahead and give you


1024
00:30:44,686 --> 00:30:46,226
the collection with what it had.


1025
00:30:47,316 --> 00:30:48,786
So here's a little code snippet


1026
00:30:48,786 --> 00:30:49,736
showing how to work with the


1027
00:30:49,736 --> 00:30:51,036
data output synchronizer's


1028
00:30:51,036 --> 00:30:53,096
unified delegate callback, which


1029
00:30:53,096 --> 00:30:54,316
passes you, again, a


1030
00:30:54,316 --> 00:30:55,986
SynchronizedDataCollection.


1031
00:30:56,526 --> 00:30:57,066
It's cool.


1032
00:30:57,226 --> 00:30:59,176
You can use it like an array or


1033
00:30:59,176 --> 00:31:00,476
like a dictionary, depending on


1034
00:31:00,476 --> 00:31:01,226
what you want to do with it.


1035
00:31:01,226 --> 00:31:03,876
You can iterate through it like


1036
00:31:03,876 --> 00:31:06,066
you would an array, using fast


1037
00:31:06,066 --> 00:31:07,316
enumeration if you just want to


1038
00:31:07,316 --> 00:31:08,516
get a list of everything that's


1039
00:31:08,516 --> 00:31:09,526
in the current collection.


1040
00:31:10,526 --> 00:31:13,166
Or if you want to deal with it


1041
00:31:13,166 --> 00:31:14,936
in a dictionary like fashion,


1042
00:31:15,286 --> 00:31:18,446
you can index by subscripting a


1043
00:31:18,446 --> 00:31:19,246
data output that you're


1044
00:31:19,246 --> 00:31:19,896
concerned with.


1045
00:31:19,896 --> 00:31:21,486
For instance, here I'm just


1046
00:31:21,486 --> 00:31:22,546
looking for the particular


1047
00:31:22,546 --> 00:31:23,586
result that came from the


1048
00:31:23,586 --> 00:31:25,306
DepthDataOutput and if it's


1049
00:31:25,306 --> 00:31:26,846
present, it will give it to me.


1050
00:31:27,166 --> 00:31:28,766
You have to guard your code to


1051
00:31:28,766 --> 00:31:30,096
look for nil because, again,


1052
00:31:30,096 --> 00:31:31,426
there might not be any depth for


1053
00:31:31,426 --> 00:31:32,706
that given presentation time.


1054
00:31:32,786 --> 00:31:33,036
All right.


1055
00:31:34,136 --> 00:31:36,626
For an example of how to use


1056
00:31:36,626 --> 00:31:37,636
AVCaptureDataOutput


1057
00:31:37,636 --> 00:31:38,906
Synchronizer, again, use


1058
00:31:38,906 --> 00:31:40,726
AVCamPhotoFilter.


1059
00:31:41,016 --> 00:31:42,186
That sample code is already


1060
00:31:42,186 --> 00:31:42,716
available.


1061
00:31:42,796 --> 00:31:43,716
It's associated with this


1062
00:31:43,716 --> 00:31:44,206
session.


1063
00:31:44,206 --> 00:31:45,226
You can download it right now.


1064
00:31:47,226 --> 00:31:48,176
There's another new streaming


1065
00:31:48,176 --> 00:31:50,076
feature in iOS 11, a slight


1066
00:31:50,076 --> 00:31:51,916
tangent here, and that is


1067
00:31:51,916 --> 00:31:53,966
support for delivering camera


1068
00:31:53,966 --> 00:31:56,366
intrinsics with each video frame


1069
00:31:56,666 --> 00:31:57,296
when you're using


1070
00:31:57,296 --> 00:31:58,156
VideoDataOutput.


1071
00:31:58,336 --> 00:32:00,186
If you recall our pinhole


1072
00:32:00,186 --> 00:32:02,506
camera, in order to transform


1073
00:32:02,506 --> 00:32:04,186
points from a 3D space to a 2D


1074
00:32:04,186 --> 00:32:05,596
space, we needed two bits of


1075
00:32:05,596 --> 00:32:06,226
information.


1076
00:32:06,566 --> 00:32:08,786
We needed the optical center, or


1077
00:32:08,786 --> 00:32:10,916
principal point, and we needed


1078
00:32:10,916 --> 00:32:12,156
the focal length.


1079
00:32:12,156 --> 00:32:13,616
In computer vision you can use


1080
00:32:13,616 --> 00:32:16,286
these properties to re-project a


1081
00:32:16,286 --> 00:32:18,706
2D image back to the 3D space by


1082
00:32:18,706 --> 00:32:19,716
using the inverse


1083
00:32:19,886 --> 00:32:22,716
transformation, and this figures


1084
00:32:22,716 --> 00:32:24,356
prominently in the new AR kit.


1085
00:32:25,296 --> 00:32:27,366
New in iOS 11 you can opt in to


1086
00:32:27,366 --> 00:32:30,496
receive such a set of intrinsics


1087
00:32:30,886 --> 00:32:33,006
with each and every video frame


1088
00:32:33,006 --> 00:32:34,256
that you're delivered, and you


1089
00:32:34,256 --> 00:32:35,556
opt in by calling the


1090
00:32:35,556 --> 00:32:36,746
AVCaptureConnection


1091
00:32:37,236 --> 00:32:38,806
isCameraIntrinsic


1092
00:32:38,806 --> 00:32:40,376
MatrixDeliveryEnabled.


1093
00:32:41,156 --> 00:32:42,846
When you do that you can expect


1094
00:32:42,846 --> 00:32:45,416
to get one attachment per buffer


1095
00:32:45,546 --> 00:32:46,526
with the intrinsics.


1096
00:32:47,066 --> 00:32:48,686
Let me show you what the matrix


1097
00:32:48,686 --> 00:32:49,606
itself looks like.


1098
00:32:49,776 --> 00:32:51,336
It may look imposing, but it's


1099
00:32:51,336 --> 00:32:52,126
really quite simple.


1100
00:32:52,996 --> 00:32:55,126
Camera intrinsics are a 3x3


1101
00:32:55,126 --> 00:32:56,976
matrix that describe the


1102
00:32:57,406 --> 00:32:58,576
geometric properties of the


1103
00:32:58,576 --> 00:32:59,006
camera.


1104
00:32:59,826 --> 00:33:02,686
fx and fy are the pixel focal


1105
00:33:02,686 --> 00:33:02,996
length.


1106
00:33:03,626 --> 00:33:05,106
They're separate x and y values


1107
00:33:05,106 --> 00:33:06,916
because sometimes cameras have


1108
00:33:07,226 --> 00:33:09,216
anamorphic lens or anamorphic


1109
00:33:09,266 --> 00:33:09,766
pixels.


1110
00:33:10,416 --> 00:33:12,326
On iOS devices, our cameras


1111
00:33:12,326 --> 00:33:14,756
always have square pixels, so fx


1112
00:33:14,756 --> 00:33:15,956
and fy are always going to be


1113
00:33:15,956 --> 00:33:16,706
the same value.


1114
00:33:17,776 --> 00:33:20,956
Then x naught and y naught are


1115
00:33:20,956 --> 00:33:22,266
the pixel coordinates of the


1116
00:33:22,266 --> 00:33:23,866
lens' principal point, or


1117
00:33:23,866 --> 00:33:24,566
optical center.


1118
00:33:25,176 --> 00:33:27,146
These are all in pixel values


1119
00:33:27,146 --> 00:33:27,816
and they're given at the


1120
00:33:27,816 --> 00:33:29,356
resolution of the video buffer


1121
00:33:29,456 --> 00:33:30,736
with which they're provided.


1122
00:33:30,986 --> 00:33:32,646
So, once you've opted in, you


1123
00:33:32,646 --> 00:33:34,686
can expect to get sample buffers


1124
00:33:34,686 --> 00:33:35,806
in a streaming fashion and you


1125
00:33:35,806 --> 00:33:37,476
can get this attachment from


1126
00:33:37,476 --> 00:33:39,706
them, and the payload is a C/F


1127
00:33:39,706 --> 00:33:42,106
data that wraps a matrix float


1128
00:33:42,106 --> 00:33:44,656
3x3, which is a SIMD data type.


1129
00:33:45,326 --> 00:33:46,836
If you're doing computer vision,


1130
00:33:47,236 --> 00:33:48,316
you'll be really interested in


1131
00:33:48,316 --> 00:33:48,996
this new feature.


1132
00:33:50,246 --> 00:33:52,016
Okay. I think we've officially


1133
00:33:52,016 --> 00:33:52,976
deep sixed the streaming topics.


1134
00:33:53,516 --> 00:33:55,546
[ Group groaning ]


1135
00:33:56,046 --> 00:33:57,086
Better effort.


1136
00:33:57,086 --> 00:33:58,656
Let's move on to the photo


1137
00:33:58,656 --> 00:33:59,856
capture, and let's start with a


1138
00:33:59,856 --> 00:33:59,976
demo.


1139
00:34:07,726 --> 00:34:08,846
This is a two-for-one.


1140
00:34:08,916 --> 00:34:10,436
We're going to do two apps here.


1141
00:34:11,176 --> 00:34:13,056
AVCam is the venerable piece of


1142
00:34:13,056 --> 00:34:14,636
sample code that shows how to


1143
00:34:14,636 --> 00:34:17,726
take photos and movies using


1144
00:34:17,726 --> 00:34:18,436
AVFoundation.


1145
00:34:19,735 --> 00:34:21,306
And notice here, though we've


1146
00:34:21,306 --> 00:34:22,966
added depth support to it, you


1147
00:34:22,966 --> 00:34:24,226
don't see anything happening


1148
00:34:24,226 --> 00:34:24,755
with depth.


1149
00:34:25,206 --> 00:34:27,416
That's because while I'm able to


1150
00:34:27,416 --> 00:34:30,246
take a picture of these pencils


1151
00:34:30,246 --> 00:34:32,286
here, you don't actually see a


1152
00:34:32,286 --> 00:34:34,706
representation of the depth, but


1153
00:34:34,706 --> 00:34:35,906
it was stored in the photo.


1154
00:34:35,956 --> 00:34:37,735
So when I go into the Photos app


1155
00:34:38,755 --> 00:34:40,226
and I look at it, and let's say


1156
00:34:40,226 --> 00:34:42,936
I go into the Editing menu, look


1157
00:34:42,936 --> 00:34:44,626
what popped up, Depth at the


1158
00:34:44,626 --> 00:34:44,896
top.


1159
00:34:44,896 --> 00:34:47,056
So I can now touch the Depth and


1160
00:34:47,056 --> 00:34:48,606
suddenly it will apply that blur


1161
00:34:48,606 --> 00:34:50,266
effect to the background, which


1162
00:34:50,266 --> 00:34:50,856
is pretty cool.


1163
00:34:51,216 --> 00:34:53,876
So now photos that you take in


1164
00:34:53,876 --> 00:34:57,286
your app are eligible to have


1165
00:34:57,406 --> 00:34:58,566
the shallow depth of field


1166
00:34:58,566 --> 00:34:59,936
effect applied to them as well.


1167
00:34:59,936 --> 00:35:01,076
That's pretty cool.


1168
00:35:02,006 --> 00:35:03,286
We can also do other more


1169
00:35:03,286 --> 00:35:05,456
interesting things with depth,


1170
00:35:05,536 --> 00:35:06,716
knowing now that we've got them


1171
00:35:06,716 --> 00:35:07,706
in all of these photos.


1172
00:35:08,056 --> 00:35:10,516
And by the way, in iOS 11 all of


1173
00:35:10,516 --> 00:35:11,546
the photos that you take in the


1174
00:35:11,546 --> 00:35:13,116
Portrait mode are now storing


1175
00:35:13,116 --> 00:35:15,466
depth information in the photos,


1176
00:35:15,516 --> 00:35:18,036
so they are fodder for your new


1177
00:35:18,036 --> 00:35:18,756
creative apps.


1178
00:35:19,296 --> 00:35:20,906
I'm going to use this app called


1179
00:35:20,906 --> 00:35:23,336
Wiggle Me to show some creative


1180
00:35:23,336 --> 00:35:24,586
things that you can do with the


1181
00:35:24,586 --> 00:35:24,976
depth.


1182
00:35:26,956 --> 00:35:29,426
I'll select an easy one for


1183
00:35:29,936 --> 00:35:30,626
beginning.


1184
00:35:31,176 --> 00:35:32,096
What it's doing is taking


1185
00:35:32,096 --> 00:35:34,336
something that was flat and it's


1186
00:35:34,426 --> 00:35:36,556
re-projecting it out into a 3D


1187
00:35:36,726 --> 00:35:39,456
space and it's kind of rolling


1188
00:35:39,456 --> 00:35:41,766
it around, or I can just stop it


1189
00:35:41,766 --> 00:35:43,116
from rolling and I'm just going


1190
00:35:43,116 --> 00:35:45,326
to use the gyro to move my phone


1191
00:35:45,326 --> 00:35:45,736
around.


1192
00:35:45,806 --> 00:35:47,766
Isn't that a neat effect?


1193
00:35:48,096 --> 00:35:49,436
It sort of comes to life.


1194
00:35:49,436 --> 00:35:50,866
I'm going to pick a different


1195
00:35:50,866 --> 00:35:51,116
one.


1196
00:35:51,836 --> 00:35:53,966
I really like the dog.


1197
00:35:55,076 --> 00:35:55,936
The dog looks great.


1198
00:35:56,176 --> 00:35:59,576
So now he kind of moves around


1199
00:35:59,576 --> 00:36:00,626
from side-to-side.


1200
00:36:01,296 --> 00:36:02,746
You can also do something which


1201
00:36:02,746 --> 00:36:04,216
is force the perspective to


1202
00:36:04,216 --> 00:36:04,836
change.


1203
00:36:04,836 --> 00:36:07,556
Knowing where the depth is, you


1204
00:36:07,556 --> 00:36:09,406
can mess with the depth, like


1205
00:36:09,406 --> 00:36:09,806
this.


1206
00:36:10,816 --> 00:36:11,846
Dolly zoom [laughter].


1207
00:36:13,236 --> 00:36:14,746
Dolly zoom, dog in your face.


1208
00:36:15,046 --> 00:36:16,726
I have preferred to rotate it


1209
00:36:16,726 --> 00:36:18,186
while Dolly zooming, because


1210
00:36:18,186 --> 00:36:19,246
it's sort of like a gangster


1211
00:36:19,246 --> 00:36:19,576
dog.


1212
00:36:19,576 --> 00:36:23,496
I think the appropriate music


1213
00:36:23,496 --> 00:36:24,396
for this part would be "Rolling


1214
00:36:24,396 --> 00:36:24,976
in the Deep," don't you?


1215
00:36:25,516 --> 00:36:28,066
[ Group groaning ]


1216
00:36:28,566 --> 00:36:29,926
You guys are doing a great job.


1217
00:36:29,926 --> 00:36:30,486
I appreciate.


1218
00:36:30,486 --> 00:36:30,976
I really appreciate it.


1219
00:36:37,046 --> 00:36:39,016
Okay. When taking photos with


1220
00:36:39,016 --> 00:36:41,146
depth, we support a wide gamut


1221
00:36:41,186 --> 00:36:42,276
of capture options.


1222
00:36:43,156 --> 00:36:44,776
You can do flash captures with


1223
00:36:44,806 --> 00:36:46,446
depth, you can do still image


1224
00:36:46,446 --> 00:36:48,026
stabilization with depth.


1225
00:36:48,466 --> 00:36:49,776
You can even do auto exposure


1226
00:36:49,776 --> 00:36:51,746
brackets, such as a plus 2,


1227
00:36:51,746 --> 00:36:52,886
minus 2, 0 EV.


1228
00:36:52,886 --> 00:36:56,626
You can do Live Photos with the


1229
00:36:56,626 --> 00:36:58,096
depth stored in the photo


1230
00:36:58,096 --> 00:36:58,606
itself.


1231
00:37:00,686 --> 00:37:02,526
AVCapturePhotoOutput is what you


1232
00:37:02,526 --> 00:37:04,966
need to use to get photos with


1233
00:37:05,016 --> 00:37:05,256
depth.


1234
00:37:05,726 --> 00:37:06,576
This is a class that we


1235
00:37:06,576 --> 00:37:07,846
introduced last year as the


1236
00:37:07,846 --> 00:37:08,726
successor to


1237
00:37:08,726 --> 00:37:10,126
AVCaptureStillImageOutput.


1238
00:37:10,946 --> 00:37:13,376
It excels at handling complex


1239
00:37:13,376 --> 00:37:14,396
photo requests.


1240
00:37:14,796 --> 00:37:15,846
I'm talking about a request


1241
00:37:15,846 --> 00:37:17,526
where you expect to get multiple


1242
00:37:17,526 --> 00:37:19,306
assets and they need to be


1243
00:37:19,306 --> 00:37:21,256
tracked and delivered, such as


1244
00:37:21,726 --> 00:37:24,016
you're going to get a raw and a


1245
00:37:24,016 --> 00:37:27,286
JPEG, and a live photo movie, et


1246
00:37:27,286 --> 00:37:27,586
cetera.


1247
00:37:27,586 --> 00:37:28,956
You could get multiple things


1248
00:37:28,956 --> 00:37:29,636
and they're coming in at


1249
00:37:29,636 --> 00:37:30,316
different points.


1250
00:37:30,706 --> 00:37:31,836
The programming model is that


1251
00:37:31,836 --> 00:37:34,136
you fill out a request, which is


1252
00:37:34,136 --> 00:37:34,426
called an


1253
00:37:34,426 --> 00:37:36,396
AVCapturePhotoSettings, you


1254
00:37:36,396 --> 00:37:37,676
initiate the photo capture by


1255
00:37:37,676 --> 00:37:39,456
passing the request and the


1256
00:37:39,456 --> 00:37:40,796
delegate to be called later.


1257
00:37:41,576 --> 00:37:44,046
And as your photoOutput is the


1258
00:37:44,046 --> 00:37:45,506
one and only interface for


1259
00:37:45,506 --> 00:37:49,956
capturing Live Photos, bare RAW


1260
00:37:49,956 --> 00:37:52,946
images, and Apple P3 wide-color


1261
00:37:52,946 --> 00:37:53,436
images.


1262
00:37:54,426 --> 00:37:56,676
Also, now in iOS 11 it is the


1263
00:37:56,676 --> 00:37:59,636
one and only way to capture HEIF


1264
00:37:59,756 --> 00:38:01,846
file format, which was mentioned


1265
00:38:01,846 --> 00:38:02,516
in the keynote.


1266
00:38:04,066 --> 00:38:05,366
A great many changes needed to


1267
00:38:05,366 --> 00:38:06,396
be made to the


1268
00:38:06,396 --> 00:38:08,266
AVCapturePhotoOutput to support


1269
00:38:08,436 --> 00:38:11,096
HEIF and so in iOS 11, to


1270
00:38:11,096 --> 00:38:13,296
accommodate those great many


1271
00:38:13,296 --> 00:38:15,156
changes, we have added a new


1272
00:38:15,156 --> 00:38:16,156
delegate callback.


1273
00:38:17,036 --> 00:38:18,676
It's a simple one.


1274
00:38:19,126 --> 00:38:21,026
This is a replacement for the


1275
00:38:21,026 --> 00:38:22,766
callbacks where you would get a


1276
00:38:22,766 --> 00:38:23,476
sample buffer.


1277
00:38:23,896 --> 00:38:25,166
Instead, you now get a new


1278
00:38:25,406 --> 00:38:27,316
object called an AVCapturePhoto.


1279
00:38:27,316 --> 00:38:30,486
AVCapturePhoto is the only


1280
00:38:30,556 --> 00:38:32,756
delivery vehicle for depth, so


1281
00:38:32,756 --> 00:38:34,486
if you want depth, you need to


1282
00:38:34,566 --> 00:38:36,856
opt in by implementing this new


1283
00:38:36,856 --> 00:38:37,676
delegate callback.


1284
00:38:39,096 --> 00:38:41,116
In addition, you need to


1285
00:38:41,116 --> 00:38:42,786
explicitly opt in for


1286
00:38:42,786 --> 00:38:44,536
DepthDataDelivery before


1287
00:38:44,536 --> 00:38:45,486
starting your session.


1288
00:38:46,166 --> 00:38:48,496
Why? Well, remember, the dual


1289
00:38:48,496 --> 00:38:49,806
camera needs to do some special


1290
00:38:49,806 --> 00:38:51,186
behavior when it's doing depth.


1291
00:38:51,186 --> 00:38:53,036
It needs to zoom up to 2X so


1292
00:38:53,036 --> 00:38:54,846
that the focal lengths match,


1293
00:38:55,326 --> 00:38:56,506
and it needs to lock itself


1294
00:38:56,506 --> 00:38:57,446
there so that you're not


1295
00:38:57,446 --> 00:38:57,836
zooming.


1296
00:38:58,616 --> 00:39:00,736
So the way that you do that is


1297
00:39:00,736 --> 00:39:01,696
before you start running your


1298
00:39:01,696 --> 00:39:02,746
session, you tell the


1299
00:39:02,746 --> 00:39:04,436
photoOutput I want


1300
00:39:04,436 --> 00:39:06,066
DepthDataDeliveryEnabled, and


1301
00:39:06,706 --> 00:39:08,946
then on a per photo request


1302
00:39:08,946 --> 00:39:10,196
basis, that would be when you


1303
00:39:10,196 --> 00:39:11,816
actually snap the photo, you


1304
00:39:11,816 --> 00:39:13,096
would fill out a settings object


1305
00:39:13,096 --> 00:39:15,286
and say, again, I want depth in


1306
00:39:15,286 --> 00:39:16,276
this particular photo.


1307
00:39:17,916 --> 00:39:19,526
Then you work with the resulting


1308
00:39:19,826 --> 00:39:21,776
AVCapturePhoto that comes back


1309
00:39:22,236 --> 00:39:23,706
and it has an accessor called


1310
00:39:23,776 --> 00:39:25,326
AVDepthData.


1311
00:39:25,326 --> 00:39:26,526
Wow, that AVDepthData, it's


1312
00:39:26,526 --> 00:39:26,966
everywhere.


1313
00:39:26,966 --> 00:39:27,826
It's like pervasive.


1314
00:39:28,596 --> 00:39:29,756
It's like deeply integrated into


1315
00:39:29,756 --> 00:39:29,976
the API.


1316
00:39:30,516 --> 00:39:33,996
[ Group groaning ]


1317
00:39:34,496 --> 00:39:36,576
On iOS most AVCaptureDevice


1318
00:39:36,576 --> 00:39:38,056
formats have the ability to take


1319
00:39:38,186 --> 00:39:40,526
higher resolution stills than


1320
00:39:40,526 --> 00:39:41,836
their streaming resolution.


1321
00:39:42,326 --> 00:39:43,436
Looking at our formats that


1322
00:39:43,436 --> 00:39:45,786
support depth on iPhone 7 Plus,


1323
00:39:46,256 --> 00:39:49,056
here you see the streaming video


1324
00:39:49,056 --> 00:39:50,626
resolution compared to the high


1325
00:39:50,626 --> 00:39:51,966
res photo resolution that you


1326
00:39:51,966 --> 00:39:52,246
get.


1327
00:39:52,736 --> 00:39:54,596
So, for instance, for photo, if


1328
00:39:54,596 --> 00:39:55,606
you're streaming, you only get


1329
00:39:55,606 --> 00:39:56,976
screen-sized buffers, but you


1330
00:39:56,976 --> 00:39:58,786
get 12-megapixel stills.


1331
00:39:59,706 --> 00:40:01,366
The same holds true for depth.


1332
00:40:02,576 --> 00:40:03,586
Remember what I told you that


1333
00:40:03,586 --> 00:40:04,536
when we're streaming depth,


1334
00:40:04,536 --> 00:40:05,996
there's a lot of work to be done


1335
00:40:06,096 --> 00:40:08,026
in a real-time fashion to meet


1336
00:40:08,026 --> 00:40:10,746
that 24 fps, but when doing a


1337
00:40:10,746 --> 00:40:12,186
photo, we have a little extra


1338
00:40:12,186 --> 00:40:13,946
time since it doesn't need to be


1339
00:40:13,946 --> 00:40:15,526
delivered real time, so we can


1340
00:40:15,526 --> 00:40:17,246
give you a very high quality,


1341
00:40:17,496 --> 00:40:18,746
great looking map that's over


1342
00:40:18,746 --> 00:40:20,106
twice the resolution of the


1343
00:40:20,106 --> 00:40:20,596
streaming.


1344
00:40:21,826 --> 00:40:24,026
The aspect ratio always matches


1345
00:40:24,026 --> 00:40:24,896
that of the video.


1346
00:40:24,896 --> 00:40:26,446
So if you're doing 16x9 video,


1347
00:40:26,706 --> 00:40:29,776
you get a 16x9 map.


1348
00:40:30,456 --> 00:40:30,946
All right.


1349
00:40:31,226 --> 00:40:32,636
Now it's time to talk about the


1350
00:40:32,636 --> 00:40:33,936
dirty little subject of


1351
00:40:34,206 --> 00:40:35,056
distortions.


1352
00:40:36,246 --> 00:40:37,876
The depth maps that we capture


1353
00:40:37,876 --> 00:40:39,546
and embed in photos are


1354
00:40:40,326 --> 00:40:40,986
distorted.


1355
00:40:41,956 --> 00:40:43,416
I'm sorry to be the bearer of


1356
00:40:43,416 --> 00:40:44,816
that news, but it's actually a


1357
00:40:44,816 --> 00:40:45,276
good thing.


1358
00:40:45,846 --> 00:40:46,716
Let me explain why.


1359
00:40:47,766 --> 00:40:49,066
All the camera diagrams that I


1360
00:40:49,066 --> 00:40:51,026
showed you up to this point were


1361
00:40:51,026 --> 00:40:52,176
pinhole cameras.


1362
00:40:52,866 --> 00:40:54,576
Pinhole cameras have no lenses


1363
00:40:55,186 --> 00:40:57,526
so the images are rectilinear;


1364
00:40:58,216 --> 00:41:00,006
that is, light passes through


1365
00:41:00,006 --> 00:41:01,856
the little aperture in straight


1366
00:41:01,856 --> 00:41:04,976
lines and presents a


1367
00:41:04,976 --> 00:41:08,046
geometrically perfect replicated


1368
00:41:08,046 --> 00:41:09,606
inverted object on the image


1369
00:41:09,606 --> 00:41:09,946
plane.


1370
00:41:10,666 --> 00:41:12,506
So if you had a perfect grid of


1371
00:41:12,506 --> 00:41:14,206
squares like this and you took a


1372
00:41:14,206 --> 00:41:15,706
picture of it with a pinhole


1373
00:41:15,706 --> 00:41:17,366
camera, it would look like this


1374
00:41:17,366 --> 00:41:18,266
on the image plane, but


1375
00:41:18,266 --> 00:41:18,806
upside-down.


1376
00:41:19,486 --> 00:41:21,866
So straight lines would remain


1377
00:41:21,866 --> 00:41:22,226
straight.


1378
00:41:23,876 --> 00:41:25,416
Unfortunately, in the real world


1379
00:41:25,416 --> 00:41:26,986
we need to let more light in, so


1380
00:41:26,986 --> 00:41:29,126
we need lenses, and lenses have


1381
00:41:29,126 --> 00:41:30,066
radial distortions.


1382
00:41:30,816 --> 00:41:32,376
These distortions are present in


1383
00:41:32,376 --> 00:41:33,686
the captured images as well


1384
00:41:33,686 --> 00:41:36,486
because they were sort of bent


1385
00:41:36,486 --> 00:41:39,396
in slightly odd ways to get to


1386
00:41:39,396 --> 00:41:40,146
the image sensor.


1387
00:41:40,396 --> 00:41:42,336
And in an extreme case, straight


1388
00:41:42,336 --> 00:41:43,586
lines captured through a bad


1389
00:41:43,586 --> 00:41:44,776
lens might look something like


1390
00:41:44,776 --> 00:41:45,186
this.


1391
00:41:45,726 --> 00:41:47,196
This is no good for finding


1392
00:41:47,196 --> 00:41:49,396
disparity, since two images need


1393
00:41:49,396 --> 00:41:51,136
to be matched to find features.


1394
00:41:51,506 --> 00:41:53,506
Well, if camera one has got a


1395
00:41:53,506 --> 00:41:54,856
set of distortions and camera


1396
00:41:54,856 --> 00:41:56,036
two has got a different set of


1397
00:41:56,036 --> 00:41:57,416
distortions, how are you going


1398
00:41:57,416 --> 00:41:59,246
to find the same set of features


1399
00:41:59,246 --> 00:42:01,126
in those two images since


1400
00:42:01,126 --> 00:42:02,246
they're warped differently?


1401
00:42:02,406 --> 00:42:06,216
I left out an important step


1402
00:42:06,216 --> 00:42:07,236
when I described how we


1403
00:42:07,236 --> 00:42:09,286
calculate disparities and I'm


1404
00:42:09,286 --> 00:42:10,316
going to fill it in right now.


1405
00:42:10,976 --> 00:42:12,696
Before comparing the tele and


1406
00:42:12,696 --> 00:42:14,696
the wide images, we have to do


1407
00:42:14,696 --> 00:42:15,336
an extra step.


1408
00:42:15,966 --> 00:42:17,176
We have to make those warped


1409
00:42:17,176 --> 00:42:20,546
images rectilinear; that is, we


1410
00:42:20,596 --> 00:42:22,656
unwarp them using a calibrated


1411
00:42:22,656 --> 00:42:25,196
set of coefficients and those


1412
00:42:25,196 --> 00:42:26,456
characterize the lens'


1413
00:42:26,736 --> 00:42:27,406
distortions.


1414
00:42:28,536 --> 00:42:30,086
After each image is corrected


1415
00:42:30,546 --> 00:42:32,206
they look like this; satisfying,


1416
00:42:32,526 --> 00:42:33,656
straight lines, straight.


1417
00:42:34,406 --> 00:42:35,736
Now we can, with certainty,


1418
00:42:35,736 --> 00:42:37,396
compare points in the two images


1419
00:42:37,396 --> 00:42:40,536
and find a perfect, real-world,


1420
00:42:40,976 --> 00:42:43,446
rectilinear disparity map, which


1421
00:42:43,446 --> 00:42:44,966
looks like that.


1422
00:42:45,656 --> 00:42:46,606
Now we have the opposite


1423
00:42:46,606 --> 00:42:47,036
problem.


1424
00:42:47,676 --> 00:42:49,016
The disparity map matches the


1425
00:42:49,016 --> 00:42:51,296
physical world, but it doesn't


1426
00:42:51,296 --> 00:42:53,036
match the image that we just


1427
00:42:53,036 --> 00:42:54,636
took, which has warping due to


1428
00:42:54,636 --> 00:42:56,376
the lens, so now we have to do


1429
00:42:56,376 --> 00:42:59,246
another step, which is to rewarp


1430
00:42:59,666 --> 00:43:01,966
the disparity map back to the


1431
00:43:01,966 --> 00:43:04,276
image so that it -- we use a set


1432
00:43:04,276 --> 00:43:06,216
of inverse lens coefficients to


1433
00:43:06,216 --> 00:43:08,026
do this, and the final disparity


1434
00:43:08,026 --> 00:43:09,846
map has the same geometric


1435
00:43:10,006 --> 00:43:11,856
distortions as its accompanying


1436
00:43:11,856 --> 00:43:12,246
image.


1437
00:43:13,296 --> 00:43:14,546
So I said that this was a good


1438
00:43:14,546 --> 00:43:14,776
thing.


1439
00:43:14,776 --> 00:43:15,596
Let me explain why.


1440
00:43:16,146 --> 00:43:18,396
It means that out of the box our


1441
00:43:18,396 --> 00:43:20,496
depthDataMaps that come with


1442
00:43:20,496 --> 00:43:23,586
photos are meant for filters,


1443
00:43:23,666 --> 00:43:24,256
for effects.


1444
00:43:24,636 --> 00:43:26,756
They always match the image that


1445
00:43:26,756 --> 00:43:27,356
they accompany.


1446
00:43:27,766 --> 00:43:29,506
So if you're working on effects,


1447
00:43:29,506 --> 00:43:31,386
if you want to do stuff with


1448
00:43:31,496 --> 00:43:33,676
like the Wiggle Me app, you want


1449
00:43:33,676 --> 00:43:36,146
to do interesting effects with


1450
00:43:36,266 --> 00:43:37,596
the image such as I showed at


1451
00:43:37,596 --> 00:43:39,256
the very beginning, they're


1452
00:43:39,256 --> 00:43:40,046
perfect for that.


1453
00:43:40,676 --> 00:43:42,126
What they're not perfect for is


1454
00:43:42,176 --> 00:43:43,926
reconstructing a 3D scene.


1455
00:43:44,426 --> 00:43:45,556
If you want to do that, you


1456
00:43:45,556 --> 00:43:47,086
should make them rectilinear,


1457
00:43:48,066 --> 00:43:48,896
and you can do that.


1458
00:43:48,896 --> 00:43:49,866
I'm going to talk about that in


1459
00:43:51,236 --> 00:43:52,136
a minute.


1460
00:43:52,136 --> 00:43:53,736
I'd like to just touch briefly


1461
00:43:53,736 --> 00:43:55,656
on the physical structure of the


1462
00:43:55,656 --> 00:43:57,946
depth data in our image files.


1463
00:43:58,556 --> 00:44:01,056
In iOS 11 we support two kinds


1464
00:44:01,056 --> 00:44:02,506
of images with depth.


1465
00:44:02,616 --> 00:44:05,056
The first is HEIF HEVC, the new


1466
00:44:05,056 --> 00:44:08,156
format, also called HEIC files,


1467
00:44:08,816 --> 00:44:10,776
and there, there is first-class


1468
00:44:10,776 --> 00:44:11,786
support for depth.


1469
00:44:12,346 --> 00:44:13,986
There's an area inside the file


1470
00:44:13,986 --> 00:44:15,646
called the auxiliary image,


1471
00:44:15,646 --> 00:44:17,736
which can store a disparity or a


1472
00:44:17,736 --> 00:44:20,096
depth or an alpha map, and


1473
00:44:20,096 --> 00:44:21,006
that's where we store it.


1474
00:44:21,586 --> 00:44:24,786
We encode it as monochrome HEVC,


1475
00:44:25,476 --> 00:44:27,016
and we also store metadata


1476
00:44:27,016 --> 00:44:29,466
that's important for working


1477
00:44:29,466 --> 00:44:32,256
with that depth, such as


1478
00:44:32,256 --> 00:44:33,396
information about whether or not


1479
00:44:33,396 --> 00:44:35,766
it was filtered, what is its


1480
00:44:35,766 --> 00:44:38,166
accuracy, camera calibration


1481
00:44:38,166 --> 00:44:39,176
information like lens


1482
00:44:39,176 --> 00:44:41,036
distortions, and also some


1483
00:44:41,036 --> 00:44:42,086
rendering instructions.


1484
00:44:42,546 --> 00:44:45,496
All of those are encoded as XMP


1485
00:44:45,626 --> 00:44:47,196
along with the auxiliary image.


1486
00:44:48,636 --> 00:44:50,296
The second format we support is


1487
00:44:50,296 --> 00:44:50,596
JPEG.


1488
00:44:51,406 --> 00:44:53,336
Boy, JPEG wasn't meant to do


1489
00:44:53,336 --> 00:44:54,546
tricks like this, but we made it


1490
00:44:54,546 --> 00:44:55,486
do this trick anyway.


1491
00:44:56,086 --> 00:44:59,426
The map is 8-bit lossy JPEG if


1492
00:44:59,426 --> 00:45:01,246
it's filtered, or if it has not


1493
00:45:01,246 --> 00:45:04,156
a numbers in it, we use 16-bit


1494
00:45:04,156 --> 00:45:06,126
lossless JPEG encoding to


1495
00:45:06,126 --> 00:45:07,156
preserve all of the not a


1496
00:45:07,156 --> 00:45:09,426
numbers, and we store it as a


1497
00:45:09,426 --> 00:45:11,056
second image at the bottom of


1498
00:45:11,056 --> 00:45:12,146
the JPEG, so it's like a


1499
00:45:12,146 --> 00:45:13,486
multipicture object, if you're


1500
00:45:13,486 --> 00:45:14,196
familiar with that.


1501
00:45:15,036 --> 00:45:17,096
Again, we store the metadata as


1502
00:45:17,186 --> 00:45:20,136
XMP, just as we do with HEIF


1503
00:45:21,956 --> 00:45:22,356
HEVC.


1504
00:45:23,436 --> 00:45:23,826
All right.


1505
00:45:23,826 --> 00:45:25,096
On to the most requested


1506
00:45:25,096 --> 00:45:26,656
developer feature for the dual


1507
00:45:26,656 --> 00:45:28,416
camera, and that's dual photo


1508
00:45:28,416 --> 00:45:28,836
capture.


1509
00:45:29,786 --> 00:45:31,626
What do I mean by this.


1510
00:45:32,136 --> 00:45:33,836
So far, when you use the dual


1511
00:45:33,836 --> 00:45:35,936
camera and take a picture, you


1512
00:45:35,936 --> 00:45:37,226
still just get one image.


1513
00:45:37,316 --> 00:45:38,706
It's either from the wide or


1514
00:45:38,706 --> 00:45:40,016
it's from the tele, depending


1515
00:45:40,016 --> 00:45:41,386
where you're zoomed, or if


1516
00:45:41,386 --> 00:45:43,036
you're in the area between one


1517
00:45:43,036 --> 00:45:45,266
and 2X you might get portions of


1518
00:45:45,356 --> 00:45:46,926
both as we do some blending to


1519
00:45:46,926 --> 00:45:48,716
make an even nicer picture, but


1520
00:45:48,716 --> 00:45:49,746
you still only get one.


1521
00:45:50,486 --> 00:45:52,556
You've been clamoring for both


1522
00:45:52,686 --> 00:45:53,836
images and that's what we're


1523
00:45:53,836 --> 00:45:54,426
giving you now.


1524
00:45:54,736 --> 00:45:56,186
With a single request, you can


1525
00:45:56,186 --> 00:45:58,396
get both the wide and the tele


1526
00:45:58,466 --> 00:46:00,736
in their full 12-megapixel glory


1527
00:46:00,736 --> 00:46:01,506
and you can do whatever the heck


1528
00:46:01,506 --> 00:46:01,976
you want with them.


1529
00:46:02,516 --> 00:46:08,256
[ Applause ]


1530
00:46:08,756 --> 00:46:09,616
Here's how you do it.


1531
00:46:09,746 --> 00:46:11,026
It's very similar to opting in


1532
00:46:11,026 --> 00:46:11,576
for depth.


1533
00:46:12,446 --> 00:46:13,606
Before starting the capture


1534
00:46:13,606 --> 00:46:15,436
session, you need to opt in by


1535
00:46:15,436 --> 00:46:16,656
telling the photoOutput I'm


1536
00:46:17,276 --> 00:46:19,416
going to ask for dual photo so


1537
00:46:19,646 --> 00:46:20,166
enable it.


1538
00:46:21,246 --> 00:46:23,406
And then as you are capturing on


1539
00:46:23,406 --> 00:46:25,836
a per photo request basis you


1540
00:46:25,836 --> 00:46:27,316
can fill out your settings by


1541
00:46:27,316 --> 00:46:28,706
saying I would like this


1542
00:46:28,706 --> 00:46:30,536
particular photo to be a dual


1543
00:46:30,536 --> 00:46:32,246
photo, give me both wide and


1544
00:46:32,246 --> 00:46:32,546
tele.


1545
00:46:34,316 --> 00:46:36,286
When you do that, the number of


1546
00:46:36,286 --> 00:46:37,976
photo callbacks that you get


1547
00:46:38,036 --> 00:46:38,726
doubles.


1548
00:46:38,886 --> 00:46:39,926
It's not just that you get two


1549
00:46:39,926 --> 00:46:40,506
callbacks.


1550
00:46:40,916 --> 00:46:43,466
Let's say you're asking for RAW


1551
00:46:43,466 --> 00:46:45,796
plus HEIF dual photo.


1552
00:46:45,796 --> 00:46:47,216
Well, that would be four because


1553
00:46:47,216 --> 00:46:48,886
you're going to get two wides


1554
00:46:48,886 --> 00:46:52,416
and two teles of RAW and HEIF.


1555
00:46:53,006 --> 00:46:54,416
So whatever you were expecting


1556
00:46:54,416 --> 00:46:55,986
to get before, the number of


1557
00:46:55,986 --> 00:46:56,746
callbacks will double.


1558
00:46:58,936 --> 00:47:01,666
Now, we support all of the same


1559
00:47:01,666 --> 00:47:03,146
gamut of features that we do


1560
00:47:03,146 --> 00:47:04,966
with depth, and that is you can


1561
00:47:04,966 --> 00:47:07,686
do flash with dual photo, auto


1562
00:47:07,686 --> 00:47:10,556
SIS, exposure brackets and you


1563
00:47:10,556 --> 00:47:12,536
can optionally get depth if you


1564
00:47:12,536 --> 00:47:13,406
need it.


1565
00:47:14,016 --> 00:47:16,866
How do we deal with zoom?


1566
00:47:17,056 --> 00:47:20,136
This is a problem of security


1567
00:47:20,136 --> 00:47:21,346
and confidence.


1568
00:47:21,746 --> 00:47:23,176
Let's say that your app only


1569
00:47:23,176 --> 00:47:25,126
shows the field of view of the


1570
00:47:25,126 --> 00:47:25,606
tele.


1571
00:47:26,396 --> 00:47:28,256
Well, the wide-angle camera has


1572
00:47:28,256 --> 00:47:29,816
more information, so if you take


1573
00:47:29,816 --> 00:47:30,866
a picture, you're actually


1574
00:47:30,866 --> 00:47:32,986
giving people something outside


1575
00:47:32,986 --> 00:47:34,386
of the viewable area and that


1576
00:47:34,386 --> 00:47:35,696
might be a privacy concern.


1577
00:47:36,156 --> 00:47:38,306
So if you are zooming, we


1578
00:47:38,306 --> 00:47:40,216
deliver dual photos, but with


1579
00:47:40,276 --> 00:47:43,016
the outside blackened so that


1580
00:47:43,016 --> 00:47:44,226
they match the field of view


1581
00:47:44,226 --> 00:47:45,336
that's seen in preview.


1582
00:47:45,776 --> 00:47:46,876
If you want the full image, you


1583
00:47:46,876 --> 00:47:48,476
can, just don't set the zoom to


1584
00:47:48,476 --> 00:47:49,516
anything other than one.


1585
00:47:50,496 --> 00:47:52,136
How do you know if it has this


1586
00:47:52,136 --> 00:47:53,776
blackened area on the outside?


1587
00:47:54,186 --> 00:47:56,096
Well, inside the image we store


1588
00:47:56,096 --> 00:47:57,676
a clean aperture rectangle that


1589
00:47:57,676 --> 00:47:59,306
defines the area with valid


1590
00:47:59,306 --> 00:47:59,816
pixels.


1591
00:47:59,816 --> 00:48:03,856
Dual photos can be delivered


1592
00:48:03,856 --> 00:48:05,706
with camera calibration data,


1593
00:48:05,706 --> 00:48:05,996
too.


1594
00:48:06,536 --> 00:48:08,456
Camera calibration data is the


1595
00:48:08,456 --> 00:48:10,756
kind of data that you need to do


1596
00:48:11,116 --> 00:48:13,976
augmented reality, virtual


1597
00:48:13,976 --> 00:48:15,896
reality, lens distortion


1598
00:48:15,896 --> 00:48:17,086
correction, et cetera.


1599
00:48:17,666 --> 00:48:20,896
So with both a wide and a tele


1600
00:48:21,376 --> 00:48:23,846
and camera calibration data, you


1601
00:48:23,846 --> 00:48:25,416
can make your own depth maps.


1602
00:48:25,796 --> 00:48:26,996
I challenge you to make one


1603
00:48:26,996 --> 00:48:29,196
better than Apple does.


1604
00:48:29,586 --> 00:48:30,846
You can also augment reality, of


1605
00:48:30,846 --> 00:48:31,936
course, because you get the


1606
00:48:31,936 --> 00:48:32,636
intrinsics.


1607
00:48:33,016 --> 00:48:34,826
Let's talk about the individual


1608
00:48:34,826 --> 00:48:35,996
properties of camera


1609
00:48:35,996 --> 00:48:36,716
calibration.


1610
00:48:36,716 --> 00:48:37,906
This is the last object that I'm


1611
00:48:37,906 --> 00:48:38,926
going to introduce tonight.


1612
00:48:39,876 --> 00:48:42,596
The AVCameraCalibrationData is


1613
00:48:42,596 --> 00:48:44,376
our model class for camera


1614
00:48:44,376 --> 00:48:45,166
calibrations.


1615
00:48:46,166 --> 00:48:46,936
Where does it live?


1616
00:48:47,146 --> 00:48:49,076
Well, if you ask for depth, you


1617
00:48:49,076 --> 00:48:50,686
get it with an AVDepthData.


1618
00:48:50,786 --> 00:48:53,076
It is a property of that.


1619
00:48:53,356 --> 00:48:54,886
You can also get it if you've


1620
00:48:54,886 --> 00:48:57,276
opted in from an AVCapturePhoto.


1621
00:48:57,276 --> 00:48:59,826
So you opt in by saying I would


1622
00:48:59,826 --> 00:49:01,256
like to camera calibration with


1623
00:49:01,256 --> 00:49:03,166
this photo, which works rather


1624
00:49:03,166 --> 00:49:03,536
nicely.


1625
00:49:03,536 --> 00:49:04,426
If you're doing dual photo


1626
00:49:04,426 --> 00:49:06,016
capture, you ask for dual photo


1627
00:49:06,016 --> 00:49:07,166
and you ask for the camera


1628
00:49:07,166 --> 00:49:09,496
calibrations, you get two photo


1629
00:49:09,496 --> 00:49:10,866
callbacks and you get the


1630
00:49:10,866 --> 00:49:12,336
calibrations for the wide, with


1631
00:49:12,406 --> 00:49:13,756
the wide result and the tele


1632
00:49:13,756 --> 00:49:14,666
with the tele result.


1633
00:49:16,206 --> 00:49:17,496
What does an intrinsicMatrix


1634
00:49:17,496 --> 00:49:17,936
look like?


1635
00:49:18,196 --> 00:49:19,306
I hope this is a little bit


1636
00:49:19,306 --> 00:49:20,926
familiar, since it's the same as


1637
00:49:20,976 --> 00:49:22,256
what we looked at earlier for


1638
00:49:22,256 --> 00:49:23,606
the streaming VideoDataOutput


1639
00:49:23,606 --> 00:49:23,996
case.


1640
00:49:24,696 --> 00:49:27,146
Again, it's a 3x3 matrix and the


1641
00:49:27,466 --> 00:49:31,566
CameraCalibrationData, it's used


1642
00:49:31,566 --> 00:49:35,006
for going from the 3D space to


1643
00:49:35,006 --> 00:49:37,486
the 2D space when flattening an


1644
00:49:37,486 --> 00:49:37,926
image.


1645
00:49:38,076 --> 00:49:39,386
You can apply the inverse when


1646
00:49:39,386 --> 00:49:40,846
going back to the 3D space.


1647
00:49:41,666 --> 00:49:46,466
It has pixel focal length which,


1648
00:49:46,466 --> 00:49:48,496
again, are two different


1649
00:49:48,496 --> 00:49:49,596
numbers, but because we have


1650
00:49:49,596 --> 00:49:50,836
square pixels, they are the same


1651
00:49:50,836 --> 00:49:51,156
number.


1652
00:49:53,036 --> 00:49:55,596
And it also has an x and y for


1653
00:49:55,596 --> 00:49:56,846
the optical center.


1654
00:49:58,456 --> 00:50:00,246
The pixel values are given at a


1655
00:50:00,246 --> 00:50:02,936
resolution of a reference frame.


1656
00:50:04,016 --> 00:50:05,376
Again, the depth data might be


1657
00:50:05,376 --> 00:50:06,476
very low resolution.


1658
00:50:06,476 --> 00:50:07,466
We don't want to give it to you


1659
00:50:07,466 --> 00:50:08,776
at that low resolution so,


1660
00:50:08,776 --> 00:50:10,936
therefore, we provide a separate


1661
00:50:11,096 --> 00:50:12,116
set of dimensions.


1662
00:50:12,286 --> 00:50:13,556
Typically, they're the full size


1663
00:50:13,556 --> 00:50:14,916
of the sensor, therefore, you


1664
00:50:14,916 --> 00:50:17,366
get a lot of accuracy, a lot of


1665
00:50:17,366 --> 00:50:18,686
resolution in the


1666
00:50:18,686 --> 00:50:19,916
intrinsicMatrix.


1667
00:50:19,976 --> 00:50:24,176
Next is the extrinsicMatrix.


1668
00:50:24,726 --> 00:50:25,886
This is a property that


1669
00:50:25,886 --> 00:50:27,906
describes the camera's pose in


1670
00:50:27,906 --> 00:50:28,366
the world.


1671
00:50:29,456 --> 00:50:30,506
You need it when you're working


1672
00:50:30,506 --> 00:50:31,456
with images from


1673
00:50:31,456 --> 00:50:33,526
stereo-rectified cameras to


1674
00:50:33,526 --> 00:50:35,216
triangulate where one is


1675
00:50:35,366 --> 00:50:36,476
compared to another one.


1676
00:50:37,006 --> 00:50:39,036
And our extrinsics are presented


1677
00:50:39,306 --> 00:50:42,816
as a single matrix, but kind of


1678
00:50:42,956 --> 00:50:44,646
two matrices squashed together.


1679
00:50:45,356 --> 00:50:46,596
So the first one, the one on the


1680
00:50:46,596 --> 00:50:48,746
left, is the rotation matrix.


1681
00:50:49,096 --> 00:50:51,486
It's a 3x3 that describes how


1682
00:50:51,486 --> 00:50:53,676
the camera is rotated with


1683
00:50:53,676 --> 00:50:55,726
respect to the world origin,


1684
00:50:55,726 --> 00:50:56,826
wherever that happens to be.


1685
00:50:57,306 --> 00:50:59,266
And there's also a 1x3 matrix


1686
00:50:59,346 --> 00:51:00,486
describing the camera's


1687
00:51:00,846 --> 00:51:02,846
translation, or sort of distance


1688
00:51:03,106 --> 00:51:04,686
from the world origin.


1689
00:51:05,756 --> 00:51:07,566
It's important to note that the


1690
00:51:07,566 --> 00:51:10,396
tele camera is the origin of the


1691
00:51:10,396 --> 00:51:11,766
world when you're using the dual


1692
00:51:11,766 --> 00:51:13,206
camera, which makes it very


1693
00:51:13,206 --> 00:51:13,536
easy.


1694
00:51:13,536 --> 00:51:14,566
If you're just getting a tele


1695
00:51:14,566 --> 00:51:17,626
image, the matrix that you get


1696
00:51:17,626 --> 00:51:19,336
will be an identity matrix.


1697
00:51:19,956 --> 00:51:21,586
If you're working with wide and


1698
00:51:21,616 --> 00:51:23,606
tele, then the wide will, of


1699
00:51:23,606 --> 00:51:24,796
course, not be an identity


1700
00:51:24,796 --> 00:51:26,546
matrix, since it's describing


1701
00:51:26,546 --> 00:51:29,466
its pose and distance from the


1702
00:51:29,696 --> 00:51:31,366
tele camera.


1703
00:51:31,726 --> 00:51:32,896
But using the extrinsics, you


1704
00:51:32,896 --> 00:51:34,056
could, for instance, compute the


1705
00:51:34,056 --> 00:51:35,556
baseline between the wide and


1706
00:51:35,556 --> 00:51:35,946
the tele.


1707
00:51:37,456 --> 00:51:39,236
There are also several


1708
00:51:39,236 --> 00:51:40,146
properties dealing with the


1709
00:51:40,146 --> 00:51:41,586
geometric distortions of the


1710
00:51:41,586 --> 00:51:42,806
lens, as we talked about


1711
00:51:42,806 --> 00:51:43,166
earlier.


1712
00:51:43,806 --> 00:51:44,906
These are useful for when you


1713
00:51:44,906 --> 00:51:46,976
need to make either an image or


1714
00:51:46,976 --> 00:51:48,706
a depth map rectilinear.


1715
00:51:49,936 --> 00:51:51,916
There are two properties that


1716
00:51:51,916 --> 00:51:52,896
you need to be concerned with.


1717
00:51:52,896 --> 00:51:53,516
The first is


1718
00:51:53,566 --> 00:51:55,646
lensDistortionCenter.


1719
00:51:56,646 --> 00:51:58,166
This describes the point on the


1720
00:51:58,166 --> 00:51:59,936
sensor that coincides with the


1721
00:51:59,936 --> 00:52:02,866
center of the lens' distortion.


1722
00:52:03,186 --> 00:52:05,206
This is frequently different


1723
00:52:05,206 --> 00:52:06,506
from the optical center of the


1724
00:52:06,506 --> 00:52:06,896
lens.


1725
00:52:07,116 --> 00:52:08,196
It's like if you looked at all


1726
00:52:08,196 --> 00:52:09,966
of the distortions, radial


1727
00:52:09,966 --> 00:52:11,306
distortions on the lens sort of


1728
00:52:11,306 --> 00:52:13,176
like tree rings, this would be


1729
00:52:13,176 --> 00:52:15,276
the center of the tree rings.


1730
00:52:16,226 --> 00:52:17,956
Also, along with this distortion


1731
00:52:17,956 --> 00:52:19,416
center we have a


1732
00:52:19,416 --> 00:52:22,406
lensDistortionLookupTable, which


1733
00:52:22,406 --> 00:52:23,856
you can think of as being a


1734
00:52:23,856 --> 00:52:26,686
number of floating point dots


1735
00:52:27,226 --> 00:52:27,996
connecting the


1736
00:52:27,996 --> 00:52:29,516
lensDistortionCenter to the


1737
00:52:29,516 --> 00:52:30,846
longest radius.


1738
00:52:31,196 --> 00:52:32,076
Again, if you drew little


1739
00:52:32,076 --> 00:52:34,086
circles from each of these dots,


1740
00:52:34,336 --> 00:52:35,126
you would get something that


1741
00:52:35,126 --> 00:52:36,226
looks like tree rings that would


1742
00:52:36,226 --> 00:52:37,686
show you the radial distortions


1743
00:52:37,686 --> 00:52:38,306
of the lens.


1744
00:52:39,216 --> 00:52:41,256
The lensDistortionLookupTable is


1745
00:52:41,256 --> 00:52:43,096
a C array of floats that are


1746
00:52:43,096 --> 00:52:43,896
wrapped in a data.


1747
00:52:45,246 --> 00:52:46,926
If each and every point along


1748
00:52:46,926 --> 00:52:49,256
those dotted lines was a 0, you


1749
00:52:49,256 --> 00:52:50,656
would have the one and only


1750
00:52:50,716 --> 00:52:52,016
perfect lens in the world.


1751
00:52:52,176 --> 00:52:54,026
It has no radial distortions at


1752
00:52:54,026 --> 00:52:54,296
all.


1753
00:52:54,566 --> 00:52:57,006
If there is a positive value, it


1754
00:52:57,006 --> 00:52:58,016
indicates that there is a


1755
00:52:58,016 --> 00:52:59,816
lengthening of the radius there.


1756
00:53:00,516 --> 00:53:01,976
If you have a negative value, it


1757
00:53:01,976 --> 00:53:03,676
indicates that it was shrunk


1758
00:53:03,676 --> 00:53:03,906
there.


1759
00:53:04,356 --> 00:53:06,196
But looking at this entire table


1760
00:53:06,326 --> 00:53:07,916
together, you can sort of get a


1761
00:53:07,916 --> 00:53:10,586
feel for where the bumps in the


1762
00:53:10,586 --> 00:53:11,126
lens are.


1763
00:53:12,236 --> 00:53:14,716
To apply distortion correction


1764
00:53:14,716 --> 00:53:16,096
to an image you'd begin with an


1765
00:53:16,096 --> 00:53:18,396
empty destination buffer and


1766
00:53:18,396 --> 00:53:19,226
then iterate through it


1767
00:53:19,226 --> 00:53:21,316
row-by-row and for each point


1768
00:53:21,806 --> 00:53:22,416
you would use the


1769
00:53:22,416 --> 00:53:24,426
lensDistortionLookupTable to


1770
00:53:24,426 --> 00:53:26,186
find the corresponding value in


1771
00:53:26,186 --> 00:53:27,976
the distorted image, and then


1772
00:53:28,016 --> 00:53:29,296
write that value to the right


1773
00:53:29,296 --> 00:53:30,786
position in your output buffer.


1774
00:53:31,556 --> 00:53:33,536
This is extremely tricky code to


1775
00:53:33,536 --> 00:53:33,836
write.


1776
00:53:34,076 --> 00:53:34,786
We know this.


1777
00:53:34,906 --> 00:53:36,856
So, we've provided a reference


1778
00:53:36,856 --> 00:53:38,736
implementation for you in


1779
00:53:38,736 --> 00:53:41,436
AVCameraCalibrationData.h. We


1780
00:53:41,516 --> 00:53:44,816
actually put code in a header


1781
00:53:44,816 --> 00:53:45,176
file.


1782
00:53:45,886 --> 00:53:46,866
It's all commented out.


1783
00:53:46,866 --> 00:53:48,356
It's a big objective C function.


1784
00:53:48,826 --> 00:53:50,166
Please take a look at it.


1785
00:53:50,166 --> 00:53:53,146
It describes how to rectify an


1786
00:53:53,146 --> 00:53:55,626
image or how to rewarp an image,


1787
00:53:55,856 --> 00:53:57,356
depending on which table you


1788
00:53:57,356 --> 00:53:59,166
pass it.


1789
00:53:59,686 --> 00:54:00,556
There is also, as you might


1790
00:54:00,556 --> 00:54:02,456
expect, the inverse of that


1791
00:54:02,456 --> 00:54:04,486
table, which describes how to go


1792
00:54:04,846 --> 00:54:08,106
from the warped back to


1793
00:54:08,306 --> 00:54:08,786
unwarped.


1794
00:54:10,816 --> 00:54:12,266
It's really easier to show you


1795
00:54:12,266 --> 00:54:12,626
with a demo.


1796
00:54:12,626 --> 00:54:12,976
Let's do a demo.


1797
00:54:18,286 --> 00:54:20,076
This will be our fourth and


1798
00:54:20,336 --> 00:54:22,416
final sample app of the day, and


1799
00:54:22,986 --> 00:54:24,866
it's called Straighten Up.


1800
00:54:25,076 --> 00:54:26,176
I bet you can guess what it


1801
00:54:26,216 --> 00:54:26,526
does.


1802
00:54:28,626 --> 00:54:30,536
This is an app that uses the


1803
00:54:30,536 --> 00:54:33,076
AVCameraCalibrationData,


1804
00:54:33,076 --> 00:54:34,556
specifically the lens distortion


1805
00:54:34,556 --> 00:54:36,606
characterizations, to make an


1806
00:54:36,606 --> 00:54:37,846
image rectilinear.


1807
00:54:38,896 --> 00:54:41,576
This morning I went outside and


1808
00:54:41,576 --> 00:54:43,646
I took a series of dual photos.


1809
00:54:44,046 --> 00:54:44,976
You can tell that they're dual


1810
00:54:44,976 --> 00:54:46,546
photos and that I was zoomed in


1811
00:54:46,546 --> 00:54:48,086
to 2X because of the black


1812
00:54:48,446 --> 00:54:50,286
border around them.


1813
00:54:50,286 --> 00:54:52,446
This one is, of course, from the


1814
00:54:52,576 --> 00:54:55,946
tele and this is the distorted


1815
00:54:55,946 --> 00:54:56,406
image.


1816
00:54:57,426 --> 00:54:59,146
Now, when I press the Undistort


1817
00:54:59,146 --> 00:55:01,126
button, you'll see something


1818
00:55:01,126 --> 00:55:02,726
that's a little bit subtle.


1819
00:55:07,046 --> 00:55:08,156
You can definitely see it, but


1820
00:55:08,156 --> 00:55:08,836
it's pretty subtle.


1821
00:55:09,336 --> 00:55:12,676
Typically telephoto lenses have


1822
00:55:12,676 --> 00:55:13,986
less curvature so they have


1823
00:55:14,106 --> 00:55:15,956
fewer radial distortions at the


1824
00:55:16,146 --> 00:55:19,236
edges than wide lenses.


1825
00:55:19,526 --> 00:55:20,766
I'll zoom in to a portion so you


1826
00:55:20,766 --> 00:55:22,306
can see the difference.


1827
00:55:22,656 --> 00:55:24,486
This is rectilinear, straight


1828
00:55:24,486 --> 00:55:26,606
lines are straight, and this is


1829
00:55:26,606 --> 00:55:27,146
distorted.


1830
00:55:28,006 --> 00:55:29,976
Now, if I go into the wide


1831
00:55:29,976 --> 00:55:33,906
image, again, we don't have the


1832
00:55:33,906 --> 00:55:38,176
corners, but you can see in the


1833
00:55:38,176 --> 00:55:39,316
image data that we do have


1834
00:55:39,316 --> 00:55:41,516
already that the distortions are


1835
00:55:41,516 --> 00:55:42,206
more prominent.


1836
00:55:43,656 --> 00:55:46,526
So distorted, undistorted.


1837
00:55:46,766 --> 00:55:48,426
Distorted, undistorted.


1838
00:55:48,426 --> 00:55:49,466
You can definitely see around


1839
00:55:49,466 --> 00:55:51,276
the edges that they are pulling


1840
00:55:51,276 --> 00:55:51,846
in more.


1841
00:55:54,416 --> 00:55:55,406
Undistorted.


1842
00:55:55,686 --> 00:55:57,076
Distorted, undistorted.


1843
00:55:59,146 --> 00:55:59,446
All right.


1844
00:55:59,566 --> 00:55:59,976
Back to slides.


1845
00:56:07,616 --> 00:56:10,046
Time for the wrap-up.


1846
00:56:10,046 --> 00:56:13,116
iPhone 7 Plus dual camera is not


1847
00:56:13,206 --> 00:56:14,856
a time-of-flight camera system.


1848
00:56:14,856 --> 00:56:15,386
It's a?


1849
00:56:16,406 --> 00:56:17,126
>> [Group] Disparity.


1850
00:56:17,126 --> 00:56:18,126
>> Disparity system.


1851
00:56:18,126 --> 00:56:19,476
If you leave with only one piece


1852
00:56:19,476 --> 00:56:20,696
of knowledge, it's that, and I


1853
00:56:20,696 --> 00:56:22,186
hope you know how disparity


1854
00:56:22,186 --> 00:56:23,186
differs from depth.


1855
00:56:24,676 --> 00:56:25,716
Also, the canonical


1856
00:56:25,716 --> 00:56:27,146
representation on our platform


1857
00:56:27,146 --> 00:56:29,566
for depth is AVDepthData.


1858
00:56:30,596 --> 00:56:32,576
We learned about intrinsics,


1859
00:56:32,576 --> 00:56:34,896
extrinsics, lens distortion


1860
00:56:34,896 --> 00:56:35,336
info.


1861
00:56:35,446 --> 00:56:37,136
These are all properties of an


1862
00:56:37,136 --> 00:56:38,716
AVCameraCalibrationData.


1863
00:56:40,376 --> 00:56:41,126
We learned about the


1864
00:56:41,126 --> 00:56:43,556
AVCaptureDepthDataOutput, and


1865
00:56:43,556 --> 00:56:45,596
that it provides streaming depth


1866
00:56:45,966 --> 00:56:47,556
which you can filter, or not.


1867
00:56:48,136 --> 00:56:50,976
And we learned that you can


1868
00:56:50,976 --> 00:56:52,696
capture photos using


1869
00:56:52,696 --> 00:56:55,336
AVCapturePhotoOutput and have


1870
00:56:55,336 --> 00:56:56,946
depth delivery enabled.


1871
00:56:58,616 --> 00:57:00,446
Finally, we spent a little bit


1872
00:57:00,446 --> 00:57:01,696
of time talking about the dual


1873
00:57:01,696 --> 00:57:03,736
camera, dual photo delivery


1874
00:57:04,066 --> 00:57:05,896
which produces a wide and a tele


1875
00:57:05,896 --> 00:57:07,626
for a single image with which


1876
00:57:07,626 --> 00:57:09,046
you can do interesting computer


1877
00:57:09,046 --> 00:57:12,476
vision tasks, and I hope you do.


1878
00:57:12,716 --> 00:57:13,856
We have three pieces of sample


1879
00:57:13,856 --> 00:57:14,836
code that are available right


1880
00:57:14,836 --> 00:57:16,216
now and are associated with this


1881
00:57:16,216 --> 00:57:19,226
session; AVCam, PhotoFilter and


1882
00:57:19,226 --> 00:57:19,636
Wiggle Me.


1883
00:57:21,176 --> 00:57:23,076
For more information, here is


1884
00:57:23,826 --> 00:57:24,786
the URL for the site.


1885
00:57:26,346 --> 00:57:29,236
And don't tune me out just yet.


1886
00:57:29,846 --> 00:57:31,286
Directly following this session


1887
00:57:31,286 --> 00:57:32,406
there is an informal


1888
00:57:32,406 --> 00:57:35,046
get-together for developers with


1889
00:57:35,046 --> 00:57:36,596
an interest in photography.


1890
00:57:37,016 --> 00:57:38,946
[Whispering] That's all of you.


1891
00:57:39,116 --> 00:57:40,816
So you can come and mingle with


1892
00:57:40,846 --> 00:57:43,126
members of the Apple Media


1893
00:57:43,126 --> 00:57:44,326
Technologies Group.


1894
00:57:45,436 --> 00:57:46,296
You can ask questions, of


1895
00:57:46,296 --> 00:57:49,366
course, or we can just talk and


1896
00:57:49,366 --> 00:57:49,856
socialize.


1897
00:57:50,426 --> 00:57:52,286
Tomorrow there is a sister


1898
00:57:52,286 --> 00:57:54,436
session at 11:00 a.m. where


1899
00:57:54,436 --> 00:57:56,016
you'll learn how to read and


1900
00:57:56,016 --> 00:57:57,726
manipulate the depth data that's


1901
00:57:57,726 --> 00:57:58,686
in image files.


1902
00:57:58,896 --> 00:58:00,176
Today we just briefly touched on


1903
00:58:00,176 --> 00:58:01,446
the surface of what you can do


1904
00:58:01,446 --> 00:58:03,466
with images with depth.


1905
00:58:04,046 --> 00:58:05,526
Tomorrow you get a whole host of


1906
00:58:05,526 --> 00:58:05,936
demos.


1907
00:58:05,936 --> 00:58:06,946
So I really hope you'll make


1908
00:58:06,946 --> 00:58:07,956
time for that tomorrow.


1909
00:58:08,346 --> 00:58:10,706
If you do, I'd deeply appreciate


1910
00:58:10,706 --> 00:58:10,836
it [group groaning].


1911
00:58:12,306 --> 00:58:14,346
And finally, I will be


1912
00:58:14,346 --> 00:58:15,976
presenting a dedicated session


1913
00:58:16,016 --> 00:58:18,206
on working with HEIF on Friday


1914
00:58:18,206 --> 00:58:19,816
morning that I also hope you'll


1915
00:58:20,626 --> 00:58:21,086
attend.


1916
00:58:21,376 --> 00:58:24,136
In that one I will delve deeply


1917
00:58:24,346 --> 00:58:25,756
into the AVCapturePhoto


1918
00:58:25,756 --> 00:58:26,506
interface.


1919
00:58:26,646 --> 00:58:28,816
Thank you, and enjoy the rest of


1920
00:58:28,816 --> 00:58:28,936
the show.


1921
00:58:29,516 --> 00:58:32,500
[ Applause ]

