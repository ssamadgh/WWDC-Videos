1
00:00:16,696 --> 00:00:17,666
>> Ladies and gentlemen,


2
00:00:18,056 --> 00:00:23,176
please welcome Vice President
OS X Platform, Andreas Wendker.


3
00:00:25,476 --> 00:00:30,936
[ Cheers and applause ]


4
00:00:31,436 --> 00:00:32,125
>> ANDREAS WENDKER:
Good afternoon.


5
00:00:33,066 --> 00:00:35,466
Welcome to WWDC 2015.


6
00:00:35,986 --> 00:00:39,646
This is another exciting year
to be an Apple developer.


7
00:00:39,646 --> 00:00:41,686
With the addition of
the new watchOS SDK,


8
00:00:41,686 --> 00:00:45,936
there are now three major
platforms for your apps.


9
00:00:46,166 --> 00:00:48,856
Our approach with these
platforms is integrating great


10
00:00:48,856 --> 00:00:50,906
products with unique
user experiences,


11
00:00:51,606 --> 00:00:54,306
while leveraging the same
underlying OS technologies,


12
00:00:54,546 --> 00:00:57,916
APIs, and programming
concepts so it's easy to move


13
00:00:57,916 --> 00:00:59,896
between these platforms
to share code


14
00:01:00,246 --> 00:01:02,856
and make these apps work
together across the platforms.


15
00:01:03,036 --> 00:01:05,506
But we are preserving a unique
flavor for each of them.


16
00:01:06,176 --> 00:01:09,656
The SDKs with these
three platforms are going


17
00:01:09,656 --> 00:01:12,666
to ship later this year with a
new version of our Xcode IDE.


18
00:01:12,666 --> 00:01:14,306
It's going to be version 7.


19
00:01:15,356 --> 00:01:17,136
It contains a number
of great new features.


20
00:01:17,316 --> 00:01:19,036
I just want to highlight
one here at the beginning


21
00:01:19,036 --> 00:01:21,976
of the session, that is that
we are going to allow anyone


22
00:01:22,046 --> 00:01:24,176
with an Apple ID
to download Xcode


23
00:01:24,246 --> 00:01:26,186
and run their apps
on their own devices.


24
00:01:27,676 --> 00:01:36,186
[ Applause ]


25
00:01:36,686 --> 00:01:39,216
If you really want to make
becoming a developer a lot more


26
00:01:39,216 --> 00:01:41,706
approachable, especially
for our younger students,


27
00:01:42,066 --> 00:01:44,396
so this will work with
all three platforms.


28
00:01:46,296 --> 00:01:48,986
Once you have worked on your
app and you want to deploy it,


29
00:01:48,986 --> 00:01:50,516
we have another bit
of good news for you.


30
00:01:51,096 --> 00:01:54,186
As of today, a single paid
developer program membership


31
00:01:54,406 --> 00:01:58,196
will be enough to deploy your
apps in all our App Stores.


32
00:01:58,296 --> 00:01:59,736
You don't have to
sign up and pay


33
00:01:59,736 --> 00:02:01,066
for multiple memberships
anymore.


34
00:02:02,516 --> 00:02:09,506
[ Applause ]


35
00:02:10,006 --> 00:02:11,446
Of course, with that
single paid membership,


36
00:02:11,706 --> 00:02:14,006
you get many additional
benefits,


37
00:02:14,276 --> 00:02:16,046
like access to pre-release
software,


38
00:02:16,396 --> 00:02:19,256
or our powerful store analytics
and crash reporting tools.


39
00:02:20,066 --> 00:02:25,856
Now, let me talk about
software updates a little bit.


40
00:02:25,906 --> 00:02:27,546
The iOS adoption
curve is, of course,


41
00:02:27,546 --> 00:02:30,906
the envy of the entire industry,
and it's a huge advantage


42
00:02:30,906 --> 00:02:33,246
to U.S. developers because
you don't have to deal


43
00:02:33,246 --> 00:02:35,076
with the same fragmentation
that you find


44
00:02:35,076 --> 00:02:36,496
in other app ecosystems.


45
00:02:38,226 --> 00:02:40,746
However, with iOS 8,
we found that a number


46
00:02:40,746 --> 00:02:42,676
of users had a difficult
time upgrading


47
00:02:42,676 --> 00:02:43,686
because of the large amount


48
00:02:43,686 --> 00:02:45,756
of free space required
for the installation.


49
00:02:46,496 --> 00:02:47,406
We've been bringing that number


50
00:02:47,406 --> 00:02:49,636
down with our subsequent
iOS 8 updates,


51
00:02:49,926 --> 00:02:52,176
and we are continuing
to do so with iOS 9.


52
00:02:52,326 --> 00:02:53,976
As you already heard this
morning in the keynote,


53
00:02:54,176 --> 00:02:57,526
iOS 9 will only require 1.3
gigabytes of free space.


54
00:02:57,526 --> 00:03:01,666
We are also changing the way
software updates are presented


55
00:03:01,666 --> 00:03:02,176
to the user.


56
00:03:02,576 --> 00:03:05,676
Users will be given a choice
to install right now or later


57
00:03:05,676 --> 00:03:08,346
at night, when they might not
need access to their devices.


58
00:03:08,346 --> 00:03:11,506
So we think this is going
to keep pushing users


59
00:03:11,506 --> 00:03:14,966
to update quickly and allow
you to focus your energies


60
00:03:15,136 --> 00:03:20,466
on the latest version of iOS.


61
00:03:20,656 --> 00:03:22,636
Now, we are also working
on a number of technologies


62
00:03:22,636 --> 00:03:25,116
that we call App Thinning
that will enable you


63
00:03:25,116 --> 00:03:26,936
to return some space
to your users.


64
00:03:28,006 --> 00:03:31,176
App Thinning consists of three
technologies: App Slicing,


65
00:03:31,526 --> 00:03:33,716
On Demand Resources,
and Bitcode.


66
00:03:34,396 --> 00:03:35,906
Let's go over these
one after the other,


67
00:03:36,006 --> 00:03:36,926
starting with Slicing.


68
00:03:39,296 --> 00:03:41,876
Developing an app for iOS
actually means developing


69
00:03:41,876 --> 00:03:43,526
multiple variants
of the same app


70
00:03:43,576 --> 00:03:45,256
and then packaging
them all together


71
00:03:45,256 --> 00:03:46,446
into a single app bundle.


72
00:03:47,126 --> 00:03:49,146
So if you look inside an
app, you find a number


73
00:03:49,146 --> 00:03:51,946
of redundant components
to cover the full breadth


74
00:03:51,946 --> 00:03:52,776
of Apple devices.


75
00:03:53,906 --> 00:03:57,126
There are binaries for 32- and
64-bit processor architectures;


76
00:03:58,086 --> 00:04:00,386
images for different screen
sizes and resolutions;


77
00:04:01,466 --> 00:04:03,666
and resources like
shaders, potentially written


78
00:04:03,666 --> 00:04:06,246
in different languages for
the various kinds of GPUs.


79
00:04:07,556 --> 00:04:09,836
But to run an app on each
given kind of device,


80
00:04:10,276 --> 00:04:12,606
you only need a single
slice of these components.


81
00:04:14,006 --> 00:04:16,036
So to make the most of the
available storage space,


82
00:04:16,036 --> 00:04:18,536
we are going to strip
away all the components


83
00:04:18,536 --> 00:04:19,696
that are not actually needed


84
00:04:19,696 --> 00:04:21,156
on the device the
app is running on.


85
00:04:22,746 --> 00:04:25,656
So you would still develop and
submit the same universal app


86
00:04:25,656 --> 00:04:29,526
that you are used to, but the
store will only deliver a thin


87
00:04:29,526 --> 00:04:31,976
variant of the app to
the user at install time.


88
00:04:34,476 --> 00:04:40,766
[ Applause ]


89
00:04:41,266 --> 00:04:44,046
So this leads to quite
impressive size reductions.


90
00:04:44,046 --> 00:04:48,086
As you can see on the chart,
typical apps will get savings


91
00:04:48,086 --> 00:04:49,886
in the range of 20
percent to 40 percent.


92
00:04:51,116 --> 00:04:54,016
And leveraging App Slicing
is particularly interesting


93
00:04:54,016 --> 00:04:55,876
for apps like games
that often bump


94
00:04:55,876 --> 00:04:58,986
up against the download size
limit for cellular app installs.


95
00:04:59,636 --> 00:05:01,956
The thin variants will have
a much easier time staying


96
00:05:01,956 --> 00:05:02,896
under that size limit,


97
00:05:03,326 --> 00:05:06,016
so you can now pack more
device-specific resources


98
00:05:06,016 --> 00:05:07,666
into your apps and
provide the users


99
00:05:07,666 --> 00:05:09,156
with a more refined experience.


100
00:05:10,556 --> 00:05:13,236
And best of all, assuming
you are using Xcode's asset


101
00:05:13,236 --> 00:05:14,306
catalogues, you don't have


102
00:05:14,306 --> 00:05:15,976
to change a single
thing in your projects.


103
00:05:16,026 --> 00:05:17,686
The Store will simply
do this automatically


104
00:05:17,686 --> 00:05:19,916
for you the next time
you submit your app.


105
00:05:21,036 --> 00:05:23,186
If you're using additional
custom data formats,


106
00:05:23,496 --> 00:05:26,966
we ask that you opt into slicing
by creating an Asset Catalog


107
00:05:26,966 --> 00:05:30,406
and using the new asset
categories we added to declare


108
00:05:30,406 --> 00:05:32,766
for what kind of devices
your resources are needed.


109
00:05:32,766 --> 00:05:39,346
Now, some apps benefit from
using even more resources,


110
00:05:39,486 --> 00:05:41,566
through they usually don't
need them all at the same time.


111
00:05:42,196 --> 00:05:44,166
For those kind of
situations, we are introducing


112
00:05:44,346 --> 00:05:48,646
On Demand Resources,
or in short, ODR.


113
00:05:48,646 --> 00:05:51,156
With ODR, the store will
separate your resources


114
00:05:51,156 --> 00:05:52,946
into the appropriate
device slices


115
00:05:53,026 --> 00:05:54,896
and then host them
on Apple servers.


116
00:05:55,756 --> 00:05:56,896
But downloading gets delayed


117
00:05:56,896 --> 00:05:58,866
until your app explicitly
requests them,


118
00:05:59,176 --> 00:06:01,726
and then later iOS
will reclaim that space


119
00:06:01,786 --> 00:06:03,776
when your app doesn't need
the resources anymore.


120
00:06:05,696 --> 00:06:09,366
Typical candidates for
ODR are level-based games,


121
00:06:09,536 --> 00:06:12,416
but many other apps can
benefit from ODR as well.


122
00:06:12,806 --> 00:06:15,656
For example, you might want to
consider offloading tutorials


123
00:06:16,006 --> 00:06:18,926
into ODR assets so that
they only get downloaded


124
00:06:18,926 --> 00:06:23,366
when the user actually
wants to watch them.


125
00:06:23,566 --> 00:06:26,076
Using ODR requires a little
more planning on your part,


126
00:06:26,386 --> 00:06:28,346
but the important point
is that you can use more


127
00:06:28,346 --> 00:06:32,326
than 4 gigabytes of resources,
just not all at the same time.


128
00:06:32,956 --> 00:06:36,436
So App Slicing and On
Demand Resources are going


129
00:06:36,436 --> 00:06:39,886
to help greatly with the
storage space for an app.


130
00:06:39,886 --> 00:06:41,886
But we are also working
on a new technology


131
00:06:41,886 --> 00:06:42,946
that is a little
more forward-looking.


132
00:06:42,946 --> 00:06:44,666
We are introducing Bitcode


133
00:06:44,666 --> 00:06:46,416
into the App Store
submission process.


134
00:06:47,756 --> 00:06:51,106
Bitcode is an LLVM Intermediate
Representation of your binary,


135
00:06:51,406 --> 00:06:54,816
which allows the store
to reoptimize your apps


136
00:06:54,816 --> 00:06:58,146
for each kind of device before
they get delivered to the user.


137
00:06:59,206 --> 00:07:01,866
You develop and debug the
app the normal way in Xcode,


138
00:07:02,556 --> 00:07:03,886
but the store will
be in a position


139
00:07:03,886 --> 00:07:08,166
to constantly reapply the latest
compiler optimizations we have


140
00:07:08,166 --> 00:07:10,676
been working on so that
your apps run great


141
00:07:10,806 --> 00:07:11,936
on all kinds of devices.


142
00:07:12,826 --> 00:07:16,626
It also future-proofs your apps
because it will allow the store


143
00:07:16,836 --> 00:07:18,616
to let your apps take advantage


144
00:07:19,066 --> 00:07:22,816
of new processor capabilities we
might be adding in the future,


145
00:07:23,266 --> 00:07:24,546
and all that without you having


146
00:07:24,546 --> 00:07:25,996
to resubmit your
app to the store.


147
00:07:28,476 --> 00:07:34,736
[ Applause ]


148
00:07:35,236 --> 00:07:37,246
So generating Bitcode
is controlled


149
00:07:37,246 --> 00:07:38,766
with a simple setting in Xcode.


150
00:07:38,766 --> 00:07:41,856
It will be mandatory for
all watchOS apps right


151
00:07:41,856 --> 00:07:44,956
from the beginning, and for iOS
it will be optional for now,


152
00:07:45,756 --> 00:07:47,646
though we feel that the
benefits are so strong


153
00:07:47,646 --> 00:07:48,216
that we are you are going


154
00:07:48,216 --> 00:07:50,516
to opt all your projects
into it by default.


155
00:07:51,976 --> 00:07:53,476
So that's App Thinning.


156
00:07:53,476 --> 00:07:57,256
It consists of App Slicing, On
Demand Resources, and Bitcode.


157
00:07:57,646 --> 00:07:59,356
These will greatly
optimize your apps,


158
00:08:00,736 --> 00:08:02,156
especially for storage space.


159
00:08:03,176 --> 00:08:04,586
Now let's take another
quick look


160
00:08:04,806 --> 00:08:06,226
at the binaries in your apps.


161
00:08:06,226 --> 00:08:08,566
The store currently requires
you to submit both 32-


162
00:08:08,566 --> 00:08:10,266
and 64-bit versions
of your apps.


163
00:08:11,536 --> 00:08:13,866
Over the last few years,
we've seen an explosion


164
00:08:13,866 --> 00:08:16,516
in processor capabilities
on our iOS devices.


165
00:08:17,146 --> 00:08:19,976
For our CPUs and even
more so for our GPUs,


166
00:08:20,536 --> 00:08:23,466
and all that especially since
we introduced our 64-bit


167
00:08:23,466 --> 00:08:24,586
processor architectures.


168
00:08:25,406 --> 00:08:28,286
So this category of apps
that are really only possible


169
00:08:28,716 --> 00:08:30,736
when they target these
64-bit processors --


170
00:08:31,996 --> 00:08:33,346
64-bit architectures.


171
00:08:33,346 --> 00:08:36,606
So going forward, we will allow
you to submit 64-bit only apps


172
00:08:36,606 --> 00:08:39,785
to the store, starting
with iOS 9 later this year.


173
00:08:41,476 --> 00:08:45,656
[ Applause ]


174
00:08:46,156 --> 00:08:47,936
So next we want to talk
about the watchOS SDK,


175
00:08:47,936 --> 00:08:50,186
and to talk more about
that, I am going to hand it


176
00:08:50,186 --> 00:08:51,816
over to my colleague,
Eliza Block.


177
00:08:53,516 --> 00:09:01,416
[ Applause ]


178
00:09:01,916 --> 00:09:02,666
>> ELIZA BLOCK: Thank
you, Andreas.


179
00:09:04,786 --> 00:09:07,726
We're delighted by the reception
that the Watch has gotten


180
00:09:07,726 --> 00:09:08,936
in the developer community.


181
00:09:10,676 --> 00:09:12,496
There are already thousands


182
00:09:12,496 --> 00:09:14,896
of your WatchKit applications
available in the Store,


183
00:09:14,896 --> 00:09:18,246
and today I am excited to
get to tell you a little more


184
00:09:18,246 --> 00:09:20,756
about some of the great new
features we're introducing


185
00:09:21,016 --> 00:09:26,446
in the watchOS 2 SDK.


186
00:09:26,726 --> 00:09:28,606
First, let's talk
about the architecture


187
00:09:28,606 --> 00:09:30,656
of an existing watchOS
application.


188
00:09:31,976 --> 00:09:34,486
You have a user interface,
which you've constructed


189
00:09:34,486 --> 00:09:37,306
as a storyboard, and this
is installed on the watch.


190
00:09:38,806 --> 00:09:42,516
Powering this user interface
is your app extension,


191
00:09:42,816 --> 00:09:47,396
which runs on the iPhone.


192
00:09:47,606 --> 00:09:51,446
In watchOS 2, we are
making a significant change


193
00:09:51,616 --> 00:09:52,406
to this architecture.


194
00:09:53,676 --> 00:09:56,566
The user interface remains the
same, but the extension moves


195
00:09:56,566 --> 00:09:58,336
over to run natively
on the Watch,


196
00:09:58,706 --> 00:10:00,376
and this has a number
of advantages.


197
00:10:02,916 --> 00:10:06,436
Because interactions with your
Watch application no longer


198
00:10:06,436 --> 00:10:11,076
require a round-trip to the
iPhone, your users are going


199
00:10:11,076 --> 00:10:13,786
to notice a substantial
improvement to the speed


200
00:10:13,786 --> 00:10:15,476
and responsiveness
of your application.


201
00:10:16,506 --> 00:10:18,146
And of course, for
the same reason,


202
00:10:18,416 --> 00:10:20,856
your Watch application
can now work even


203
00:10:21,126 --> 00:10:23,896
when the iPhone isn't present.


204
00:10:23,896 --> 00:10:26,376
And since the extension is
running natively on the Watch,


205
00:10:26,616 --> 00:10:28,406
it gets access to
the Watch hardware,


206
00:10:28,726 --> 00:10:30,616
which opens up tons
of possibilities.


207
00:10:36,056 --> 00:10:40,196
Okay. So now that you're writing
a native watchOS application,


208
00:10:40,706 --> 00:10:42,226
what APIs are you going to use?


209
00:10:43,586 --> 00:10:46,166
The good news is it's many
of the same frameworks


210
00:10:46,526 --> 00:10:50,666
that you're already familiar
with from developing for iOS.


211
00:10:54,556 --> 00:10:56,496
There's one important addition.


212
00:10:58,236 --> 00:11:01,836
The watch connectivity framework
allows your extension to talk


213
00:11:01,836 --> 00:11:03,726
to the iPhone app, which,
of course, is now running


214
00:11:03,726 --> 00:11:05,346
on a different device.


215
00:11:08,556 --> 00:11:11,516
In addition, your
extension can talk directly


216
00:11:11,516 --> 00:11:14,566
to web services using
the NSURLSession API.


217
00:11:15,346 --> 00:11:21,136
And this works even when
your iPhone is out of range.


218
00:11:22,476 --> 00:11:33,546
[ Applause ]


219
00:11:34,046 --> 00:11:36,076
There are three ways
of surfacing your data


220
00:11:36,076 --> 00:11:37,886
in an existing watchOS
application --


221
00:11:38,226 --> 00:11:42,006
Glances, Notifications,
and the app itself.


222
00:11:42,006 --> 00:11:44,776
But wouldn't it be cool


223
00:11:45,456 --> 00:11:47,636
if you could see your
app's content just


224
00:11:47,636 --> 00:11:50,806
by raising your wrist without
even having to touch the screen?


225
00:11:51,996 --> 00:11:54,146
In watchOS 2, this is possible


226
00:11:54,256 --> 00:11:57,746
because now you can create a
Complication for the Watch face.


227
00:12:00,676 --> 00:12:04,436
We designed the Watch
for brief interactions,


228
00:12:04,756 --> 00:12:06,946
and the quickest way
to see your content is


229
00:12:06,946 --> 00:12:09,856
through Complications,
Glances, and Notifications.


230
00:12:10,446 --> 00:12:18,486
So let's take a closer
look at these.


231
00:12:18,616 --> 00:12:19,826
Despite their name,


232
00:12:19,826 --> 00:12:21,756
Complications are
actually quite simple.


233
00:12:22,426 --> 00:12:24,406
They're snippets of
information that appear


234
00:12:24,406 --> 00:12:28,186
on your Watch face
alongside the time.


235
00:12:28,416 --> 00:12:31,686
So if we take these Watch
faces and we remove the time,


236
00:12:32,006 --> 00:12:33,866
everything left is
a Complication.


237
00:12:35,376 --> 00:12:38,206
Now, the ones you see here are
all built right into the OS,


238
00:12:39,386 --> 00:12:43,236
but now you can create your own.


239
00:12:43,456 --> 00:12:46,386
Now, you might not
all be aware of this,


240
00:12:46,386 --> 00:12:49,736
but the fictional San Francisco
Soccer Club is currently holding


241
00:12:49,736 --> 00:12:51,086
its 2015 tournament.


242
00:12:52,966 --> 00:12:55,566
So we could create
a Complication


243
00:12:55,566 --> 00:12:58,276
for the modular face to
show what match is coming


244
00:12:58,276 --> 00:13:03,276
up next in the tournament.


245
00:13:03,276 --> 00:13:05,136
If I were to install
this on my Watch,


246
00:13:05,246 --> 00:13:09,406
I am going to see it every time
I raise my wrist right away,


247
00:13:09,406 --> 00:13:13,216
and that's great, but for
it to be a good experience,


248
00:13:13,876 --> 00:13:16,986
it's important that as time
goes by and the content


249
00:13:16,986 --> 00:13:19,116
that the Complication
needs to show changes,


250
00:13:19,696 --> 00:13:22,916
this has already happened by
the time the screen turns on.


251
00:13:23,526 --> 00:13:28,406
And to make that possible, we're
going to be collecting the data


252
00:13:28,406 --> 00:13:34,616
for your Complications in
the form of a timeline.


253
00:13:34,726 --> 00:13:37,646
That way, as I glance at my
watch throughout the day,


254
00:13:38,046 --> 00:13:40,436
the Complication will always
be showing the information


255
00:13:40,436 --> 00:13:49,546
that makes sense at that moment.


256
00:13:49,756 --> 00:13:52,396
So creating a timeline
for the schedule


257
00:13:52,396 --> 00:13:54,506
of a fictional soccer
tournament is pretty easy.


258
00:13:55,016 --> 00:13:56,816
For one thing, I
made up the schedule,


259
00:13:56,816 --> 00:14:00,396
and for a second thing, it's
pretty unlikely to ever change.


260
00:14:01,006 --> 00:14:03,526
But that might not be the
case for your Complications.


261
00:14:04,156 --> 00:14:08,556
As things change in the
world, you're likely to need


262
00:14:08,556 --> 00:14:10,396
to update your timelines
accordingly.


263
00:14:11,586 --> 00:14:13,626
And we've provided a couple
ways to go about this.


264
00:14:14,666 --> 00:14:16,836
The first is Scheduled Updates.


265
00:14:20,436 --> 00:14:21,976
Scheduled updates are perfect


266
00:14:23,356 --> 00:14:25,616
for Complications
whose data changes


267
00:14:25,616 --> 00:14:30,006
on a predictable schedule,
like a weather forecast.


268
00:14:30,636 --> 00:14:33,286
If you've written a weather
forecast Complication,


269
00:14:33,686 --> 00:14:35,526
you may know that
your server has access


270
00:14:35,616 --> 00:14:38,646
to more accurate weather
data maybe once an hour.


271
00:14:39,446 --> 00:14:42,026
So when you load your timeline,
you can tell us a good time


272
00:14:42,026 --> 00:14:46,296
to next wake you up
to refresh your data.


273
00:14:46,476 --> 00:14:48,396
Your extension will be
given the opportunity


274
00:14:48,396 --> 00:14:49,326
to run in the background.


275
00:14:49,566 --> 00:14:52,606
You can hit your server,
pull down new forecast data,


276
00:14:53,146 --> 00:14:58,946
and reload your timeline.


277
00:14:59,026 --> 00:15:01,096
But not all data
can be refreshed


278
00:15:01,096 --> 00:15:02,166
at predictable intervals.


279
00:15:03,326 --> 00:15:06,236
Suppose I wanted
to add live scores


280
00:15:07,176 --> 00:15:08,226
to my soccer Complication.


281
00:15:09,046 --> 00:15:10,596
It's not going to be
good enough for me


282
00:15:10,596 --> 00:15:14,326
to hit my server every hour
or so or even every 15 minutes


283
00:15:14,706 --> 00:15:17,426
to pull down the current score
because when a goal is scored,


284
00:15:17,656 --> 00:15:20,456
that needs to show up right
away in my Complication.


285
00:15:21,736 --> 00:15:25,036
To support this kind of case,
we're introducing a new kind


286
00:15:25,036 --> 00:15:27,196
of high-priority
push notification.


287
00:15:29,716 --> 00:15:33,066
If you are providing data that
is needed for a Complication,


288
00:15:33,336 --> 00:15:36,166
you can send this push
notification to your iPhone,


289
00:15:36,166 --> 00:15:38,316
and it will be delivered
immediately


290
00:15:38,316 --> 00:15:39,666
to your extension on the Watch.


291
00:15:45,496 --> 00:15:48,516
So timelines are great for
making sure the content


292
00:15:48,516 --> 00:15:50,376
in your Complications
is always up to date,


293
00:15:50,956 --> 00:15:53,996
but they also serve an
important additional purpose.


294
00:15:54,476 --> 00:15:57,986
If you went to the Keynote this
morning, you will have heard


295
00:15:57,986 --> 00:16:00,346
about the Time Travel feature
that we are introducing


296
00:16:00,346 --> 00:16:03,256
in watchOS 2, which allows
you to turn the Digital Crown


297
00:16:03,536 --> 00:16:05,326
to peek forwards and backwards


298
00:16:05,376 --> 00:16:07,386
and see what your
Complications will be showing


299
00:16:07,386 --> 00:16:08,496
at different times of day.


300
00:16:09,676 --> 00:16:11,796
For example, here it looks


301
00:16:11,796 --> 00:16:14,466
like the Marina Noe Valley
game has already ended


302
00:16:14,626 --> 00:16:17,436
and I missed it because I was
on stage talking about WatchKit.


303
00:16:18,376 --> 00:16:22,426
Luckily, I can Time Travel
backwards to see what happened.


304
00:16:29,826 --> 00:16:32,676
It looks like Noe Valley
won in stoppage time.


305
00:16:32,736 --> 00:16:34,156
That must have been
really exciting.


306
00:16:34,746 --> 00:16:38,186
So that's Complications.


307
00:16:38,186 --> 00:16:41,026
They are a really quick way to
access data that's important.


308
00:16:41,736 --> 00:16:42,576
Small amounts of data.


309
00:16:43,526 --> 00:16:45,476
But what if you wanted to
see a little more detail?


310
00:16:46,246 --> 00:16:47,686
That's when you might
use a Glance.


311
00:16:47,936 --> 00:16:54,776
You get to your Glances by
swiping up on the clock face,


312
00:16:55,436 --> 00:16:58,636
and Glances give
you the opportunity


313
00:16:58,636 --> 00:17:01,486
to display an entire screen
full of data to your user.


314
00:17:01,916 --> 00:17:04,546
Here, for example, my soccer
club Glance is showing me the


315
00:17:04,656 --> 00:17:07,836
standings for Group
A in my tournament.


316
00:17:10,836 --> 00:17:13,236
Complications and
Glances allow me


317
00:17:13,236 --> 00:17:16,036
to access your app's
data on my own schedule.


318
00:17:16,626 --> 00:17:20,156
But sometimes you need to
get information in front


319
00:17:20,156 --> 00:17:22,215
of your user right
when it matters,


320
00:17:22,756 --> 00:17:29,496
and for that you would
use a Notification.


321
00:17:29,496 --> 00:17:32,166
Notifications on the Watch
are incredibly powerful.


322
00:17:32,646 --> 00:17:35,046
You can take full
advantage of the screen


323
00:17:35,836 --> 00:17:37,416
to show an entirely custom UI.


324
00:17:38,976 --> 00:17:42,616
For example, here I am being
alerted that it's my last chance


325
00:17:42,666 --> 00:17:45,746
to pick the winners in
this afternoon's SoMa Cow


326
00:17:45,746 --> 00:17:46,296
Hollow game.


327
00:17:46,296 --> 00:17:49,296
In addition to the custom UI,


328
00:17:49,296 --> 00:17:51,606
you can also provide
custom actions.


329
00:17:52,556 --> 00:17:55,316
Pressing either of these
buttons would register my pick


330
00:17:55,316 --> 00:17:56,116
with the application.


331
00:17:57,356 --> 00:17:58,116
But that's not all.


332
00:17:58,726 --> 00:18:00,316
Because in watchOS 2,


333
00:18:00,316 --> 00:18:03,946
we are introducing
Notification in-line text reply,


334
00:18:04,786 --> 00:18:07,996
so I can add a button to
my Notification allowing me


335
00:18:07,996 --> 00:18:10,336
to compose a message to send.


336
00:18:10,336 --> 00:18:12,986
I am a really big SoMa fan, and
I want the world to know it,


337
00:18:13,276 --> 00:18:16,416
so I am going to
choose that option.


338
00:18:16,586 --> 00:18:20,266
When I pick the Reply option, I
am given the Quick Reply sheet,


339
00:18:20,616 --> 00:18:23,426
and I can even use dictation
to compose a message,


340
00:18:23,426 --> 00:18:26,386
all from inside the Notification
without switching context.


341
00:18:26,976 --> 00:18:29,226
Thank you.


342
00:18:29,456 --> 00:18:30,626
You are very kind.


343
00:18:31,516 --> 00:18:34,706
[ Applause ]


344
00:18:35,206 --> 00:18:37,006
So that's Notifications.


345
00:18:37,946 --> 00:18:40,706
So Complications, Glances,
and Notifications are so easy


346
00:18:40,706 --> 00:18:42,336
to access, they are
probably the way


347
00:18:42,336 --> 00:18:44,546
that your users will
most commonly interact


348
00:18:44,546 --> 00:18:45,526
with your app's content.


349
00:18:46,026 --> 00:18:48,036
But sometimes you have
a little more time


350
00:18:49,056 --> 00:18:51,756
and you want a more interactive,
immersive experience,


351
00:18:51,756 --> 00:18:54,046
and that's when you would
launch the full application.


352
00:18:54,046 --> 00:18:59,806
And there is so much you can do
with applications in watchOS 2.


353
00:19:00,856 --> 00:19:04,816
To give one example here, now
that you have access to input


354
00:19:04,816 --> 00:19:08,126
from the Digital Crown, you
can use it to scroll quickly


355
00:19:08,166 --> 00:19:09,576
through the groups
of your tournament


356
00:19:10,236 --> 00:19:12,956
to quickly find your favorite
team and get more information.


357
00:19:13,486 --> 00:19:18,456
But that's just one of
tons of new opportunities


358
00:19:18,506 --> 00:19:20,216
that you have with watchOS 2.


359
00:19:21,296 --> 00:19:24,646
You can also add
animations to your UI now.


360
00:19:24,996 --> 00:19:26,886
You can access the
Taptic Engine.


361
00:19:28,296 --> 00:19:30,616
You can do audio recording
right from the Watch.


362
00:19:30,816 --> 00:19:33,646
And you can embed audio
and video playback.


363
00:19:34,916 --> 00:19:37,116
You can make a phone call
from your application,


364
00:19:37,676 --> 00:19:39,646
and you get access
-- live access --


365
00:19:39,646 --> 00:19:42,046
to the data from the health
sensors and the Accelerometer.


366
00:19:42,806 --> 00:19:45,566
We are so excited to see
what you guys create with all


367
00:19:45,566 --> 00:19:48,846
of these possibilities, and
now to show you how easy it is


368
00:19:48,846 --> 00:19:50,546
to bring your app to watchOS 2,


369
00:19:50,806 --> 00:19:54,976
I'd like to invite
up Josh Shaffer.


370
00:19:55,516 --> 00:20:00,456
[ Applause ]


371
00:20:00,956 --> 00:20:01,586
>> JOSH SHAFFER: Thanks, Eliza.


372
00:20:02,326 --> 00:20:05,516
So I am really excited to
show you how easy it can be


373
00:20:05,516 --> 00:20:09,816
to take your existing watchOS 1
app and upgrade it to watchOS 2


374
00:20:09,816 --> 00:20:11,146
to run natively on the Watch.


375
00:20:11,676 --> 00:20:15,156
If you have downloaded
the WWDC app this year,


376
00:20:15,626 --> 00:20:19,196
you may have noticed that it now
includes a WatchKit extension


377
00:20:19,626 --> 00:20:21,636
to install and run
on your Watch.


378
00:20:21,986 --> 00:20:24,666
So what we are going to do is
take a look at how we can update


379
00:20:24,666 --> 00:20:29,016
that application and use it as
a native watchOS 2 application,


380
00:20:29,016 --> 00:20:31,486
and we'll add a few
features to it using some


381
00:20:31,486 --> 00:20:32,746
of the things Eliza showed us.


382
00:20:34,236 --> 00:20:39,576
So over here, you can see that
I have the Xcode project open


383
00:20:39,876 --> 00:20:42,876
for the WWDC app,
and Xcode has noticed


384
00:20:42,876 --> 00:20:45,546
that I have a watchOS 1
extension and is offering


385
00:20:45,546 --> 00:20:48,086
to upgrade it for me to
a watchOS 2 extension.


386
00:20:48,086 --> 00:20:49,836
I am just going to click here


387
00:20:49,836 --> 00:20:51,106
and let it perform
those changes.


388
00:20:51,746 --> 00:20:53,666
It's going to take all
my existing targets


389
00:20:54,026 --> 00:20:57,176
and update them, leaving my
source code and storyboards


390
00:20:57,176 --> 00:21:00,316
in place so I can reuse all
of what I've already done.


391
00:21:00,976 --> 00:21:04,726
We can go over here and check
out our controller context,


392
00:21:05,336 --> 00:21:08,866
and what we have to do first of
all is make a few code changes


393
00:21:08,866 --> 00:21:09,946
to the way we access our data.


394
00:21:10,756 --> 00:21:12,346
Now that we are running
on a different device,


395
00:21:12,766 --> 00:21:15,036
we need to be able to move
the data from our iPhone


396
00:21:15,036 --> 00:21:18,116
over to the Watch, and we can
use the new Watch Connectivity


397
00:21:18,116 --> 00:21:19,046
frameworks to do that.


398
00:21:19,486 --> 00:21:22,576
So I will start adding the
Watch Connectivity framework,


399
00:21:23,236 --> 00:21:26,056
and we will replace the open
parent application call,


400
00:21:26,056 --> 00:21:28,086
which is what I used in
the watchOS 1 version,


401
00:21:28,466 --> 00:21:31,636
with the new Watch Connectivity
code that will ask for the data


402
00:21:31,636 --> 00:21:34,086
to be copied from the
phone to the Watch.


403
00:21:34,606 --> 00:21:37,956
With that changed, now we
can add some additional


404
00:21:37,956 --> 00:21:40,716
functionality, and one really
cool thing to take advantage


405
00:21:40,716 --> 00:21:43,266
of is the ability to interact
with the Digital Crown.


406
00:21:44,516 --> 00:21:46,486
Now, the way that you
interact with the Digital Crown


407
00:21:46,486 --> 00:21:51,006
in a watchOS app is using a
new interface picker control.


408
00:21:52,006 --> 00:21:54,726
We will drag that out in our
Storyboard in just a minute,


409
00:21:54,826 --> 00:21:57,066
but first we are going to add
some code to hook up to it.


410
00:21:57,576 --> 00:22:00,766
We will make some
references to be able to hook


411
00:22:00,766 --> 00:22:02,716
up to the Storyboard
object once we drag it out,


412
00:22:02,716 --> 00:22:05,576
and you add the items
that you want to choose


413
00:22:05,646 --> 00:22:07,496
from the picker
programmatically.


414
00:22:07,986 --> 00:22:10,746
So we are going to loop through
all of the session tracks


415
00:22:10,746 --> 00:22:13,556
that exist throughout
the week and add an entry


416
00:22:13,556 --> 00:22:14,996
to our picker for each track.


417
00:22:15,386 --> 00:22:17,576
This way we will be able to
sort the list of sessions


418
00:22:17,796 --> 00:22:20,266
and view just the ones for the
track that we are interested in.


419
00:22:21,206 --> 00:22:23,836
Then finally, we have to add
an IBAction that will hook


420
00:22:23,836 --> 00:22:26,626
up to our control that will get
called every time it changes.


421
00:22:26,626 --> 00:22:28,346
So we will add that code there.


422
00:22:28,346 --> 00:22:31,886
Now we can switch over to our
Storyboard and figure out where


423
00:22:31,886 --> 00:22:33,086
to put this in our app.


424
00:22:33,336 --> 00:22:36,506
So I will come over here and
find the new picker control,


425
00:22:36,556 --> 00:22:39,726
and we will drag it out and put
it in our session controller.


426
00:22:40,246 --> 00:22:42,796
The session controller is the
view that displays all the list


427
00:22:42,796 --> 00:22:45,636
of sessions, so by adding at
the top, it will provide a way


428
00:22:45,636 --> 00:22:46,846
to filter that session list.


429
00:22:47,366 --> 00:22:49,446
Just make it a little shorter
so it's not quite so tall.


430
00:22:49,446 --> 00:22:51,836
Now, the picker control
is really flexible,


431
00:22:51,836 --> 00:22:53,546
and there's three
different appearances


432
00:22:53,546 --> 00:22:55,806
that you can choose --
list, stack, and sequence --


433
00:22:55,906 --> 00:22:57,416
that you can learn about
throughout the week.


434
00:22:58,846 --> 00:23:00,856
The list one is a
really good choice


435
00:23:00,856 --> 00:23:02,506
for what we are doing here,
so we are going to leave that.


436
00:23:02,506 --> 00:23:04,926
And we are going to
turn on a focus outline


437
00:23:04,926 --> 00:23:07,286
so that we can make
sure the user can tell


438
00:23:07,286 --> 00:23:09,516
when they turn the Digital
Crown what's going to happen.


439
00:23:11,016 --> 00:23:13,276
So with those changes made,
we'll then hook up our picker


440
00:23:13,276 --> 00:23:15,026
to the code that we
pasted in a minute ago.


441
00:23:16,066 --> 00:23:18,306
We'll drag out the
connection to our IBOutlet


442
00:23:18,736 --> 00:23:20,896
and drag a connection
into our IBAction


443
00:23:20,926 --> 00:23:22,746
so that it gets called every
time the picker changes.


444
00:23:24,136 --> 00:23:25,016
And that's it.


445
00:23:25,216 --> 00:23:26,626
So with that, we are going
to hit Build and Run,


446
00:23:27,206 --> 00:23:29,016
and we can switch over
to the Watch simulator


447
00:23:29,336 --> 00:23:30,576
and see how this works.


448
00:23:30,976 --> 00:23:33,696
The great thing about the
watch simulator in watchOS 2 is


449
00:23:33,696 --> 00:23:35,776
that it's a full
simulator in the watchOS,


450
00:23:36,416 --> 00:23:39,346
so you can run your entire
watch app side by side


451
00:23:39,346 --> 00:23:41,886
with your iPhone app,
debug at the same time,


452
00:23:42,086 --> 00:23:44,066
and test the connectivity
code between them.


453
00:23:44,676 --> 00:23:51,506
[ Applause ]


454
00:23:52,006 --> 00:23:53,676
So now we can jump over
here, and you can see


455
00:23:53,676 --> 00:23:55,466
in our session list, we
can scroll through the list


456
00:23:55,466 --> 00:23:57,896
of sessions, and we
can also filter based


457
00:23:57,896 --> 00:23:59,086
on what track we want to see,


458
00:23:59,676 --> 00:24:01,046
and it all updates
as we change it.


459
00:24:02,076 --> 00:24:03,926
Now, one last feature
that I would really


460
00:24:03,926 --> 00:24:07,136
like to add is the ability
to display the sessions right


461
00:24:07,136 --> 00:24:09,146
on our Watch face, and
to do that, we are going


462
00:24:09,146 --> 00:24:10,986
to add a Complication
to our app.


463
00:24:11,286 --> 00:24:13,366
Now, I wrote most of the
code for this earlier,


464
00:24:13,506 --> 00:24:15,616
so I am just going to drag
the file out and add it


465
00:24:15,616 --> 00:24:16,856
into my project right here.


466
00:24:18,386 --> 00:24:20,916
The one thing that I haven't
done yet is added the code


467
00:24:20,916 --> 00:24:23,506
that will iterate through
and build the timeline.


468
00:24:24,006 --> 00:24:26,496
Now, Eliza mentioned that we are
going to be providing the data


469
00:24:26,756 --> 00:24:30,236
in the form of a timeline, so
we want to iterate through all


470
00:24:30,236 --> 00:24:32,746
of the sessions that
I favorited so that


471
00:24:32,746 --> 00:24:35,406
on the Watch face I can see my
favorite sessions all week long.


472
00:24:36,336 --> 00:24:38,586
Now, to save us some time,
I built and installed this


473
00:24:38,586 --> 00:24:41,016
on a Watch earlier today,
so I am just going to switch


474
00:24:41,016 --> 00:24:42,906
over here and take a
look at how we can add


475
00:24:42,906 --> 00:24:44,056
that to our Watch face.


476
00:24:44,926 --> 00:24:48,026
So right at the beginning, I
had a Watch face configured


477
00:24:48,026 --> 00:24:50,736
with Calendar in the middle,
but because I've got all this


478
00:24:50,736 --> 00:24:53,246
on the WWDC app, we will
just switch over here


479
00:24:53,246 --> 00:24:56,166
and customize it, and then we
can scroll down to the bottom


480
00:24:56,166 --> 00:24:58,226
of the list of Complications,
and you will see


481
00:24:58,226 --> 00:25:01,286
that now the WWDC app has an
entry all the way at the bottom.


482
00:25:02,026 --> 00:25:04,976
We can click there to
turn that on and go back


483
00:25:04,976 --> 00:25:06,516
and view our session list.


484
00:25:06,836 --> 00:25:08,076
Now, obviously, the
platform State


485
00:25:08,076 --> 00:25:10,226
of the Union is the session
I favorited for right now,


486
00:25:10,846 --> 00:25:14,156
but with no additional work,
we can Time Travel forward


487
00:25:14,376 --> 00:25:16,536
through that session
list and see


488
00:25:16,536 --> 00:25:18,236
that up next is the
Apple Design Awards,


489
00:25:18,476 --> 00:25:21,726
which I definitely don't want to
miss, and then looking forward


490
00:25:22,156 --> 00:25:25,566
to tomorrow we've got the
Intro to WatchKit for watchOS 2


491
00:25:25,566 --> 00:25:27,356
in the morning, which is
definitely something I want


492
00:25:27,356 --> 00:25:27,626
to see.


493
00:25:28,836 --> 00:25:31,466
So that's how easy it can be to
update your existing Watch app


494
00:25:31,856 --> 00:25:34,856
to run natively on the watch
as a watchOS 2 application,


495
00:25:35,456 --> 00:25:37,606
and add some support for
some great new features.


496
00:25:38,406 --> 00:25:39,076
So next up --


497
00:25:40,016 --> 00:25:45,586
[ Applause ]


498
00:25:46,086 --> 00:25:48,036
Next up, Sebastien
Marineau-Mes is going to tell us


499
00:25:48,036 --> 00:25:50,136
about some great new
foundation technologies.


500
00:25:50,456 --> 00:25:51,146
>> SEBASTIEN MARINEAU-MES:
Thank you, Josh.


501
00:25:52,606 --> 00:25:53,196
That was great.


502
00:25:54,606 --> 00:25:57,626
Let me now talk about a number
of foundation technologies


503
00:25:58,106 --> 00:26:01,396
that apply across our platforms,
and I am going to start


504
00:26:01,396 --> 00:26:04,006
with the first one that's
in the theme of performance,


505
00:26:04,526 --> 00:26:05,816
and it is compression.


506
00:26:05,816 --> 00:26:07,376
We are going to make
compression exciting.


507
00:26:08,126 --> 00:26:11,466
[Laughter] So Apple's
always delivered a number


508
00:26:11,466 --> 00:26:15,006
of compression algorithms as
part of our core frameworks,


509
00:26:15,006 --> 00:26:17,276
LZ4, which is optimized
for speed; LZMA,


510
00:26:17,276 --> 00:26:21,686
which has high compression, and
zlib, which many of you use,


511
00:26:21,686 --> 00:26:24,636
which hits the sweet spot
between compression and speed.


512
00:26:25,146 --> 00:26:28,306
We set out to build a
better compression algorithm


513
00:26:28,306 --> 00:26:29,686
that improves on zlib.


514
00:26:29,906 --> 00:26:32,476
As you may know, zlib
is over 20 years old.


515
00:26:32,746 --> 00:26:34,876
It was built when processor
architectures were very


516
00:26:34,876 --> 00:26:37,986
different, so we thought let's
build something optimized


517
00:26:38,286 --> 00:26:41,246
for today's processors
and microarchitectures.


518
00:26:42,186 --> 00:26:46,816
Now, we call this new algorithm
Lempel Ziv Finite State Entropy.


519
00:26:46,816 --> 00:26:48,146
You may know of them.


520
00:26:48,836 --> 00:26:50,036
They are also a great
Indie band.


521
00:26:50,866 --> 00:26:51,926
You should go check
them on Connect.


522
00:26:52,716 --> 00:27:01,286
To avoid any confusion, we are
going to simply call this LZFSE.


523
00:27:01,456 --> 00:27:03,796
[Laughter] So now
LZFSE -- thank you --


524
00:27:04,416 --> 00:27:07,466
improves on zlib on compression,
but more importantly,


525
00:27:07,786 --> 00:27:11,896
it actually is three
times faster than zlib.


526
00:27:11,896 --> 00:27:13,616
This is a great improvement
in terms


527
00:27:13,616 --> 00:27:15,936
of making your apps
more responsive.


528
00:27:16,526 --> 00:27:18,756
On top of that, it
helps with battery life.


529
00:27:19,426 --> 00:27:22,456
It gives you a 60 percent
reduction in energy use


530
00:27:23,036 --> 00:27:24,326
with the same compression
algorithm,


531
00:27:24,326 --> 00:27:26,806
it also gives you a
3x speed improvement.


532
00:27:27,316 --> 00:27:29,826
Finally, we've made it
super easy to adopt.


533
00:27:30,026 --> 00:27:31,676
We've added it to our
standard framework.


534
00:27:32,086 --> 00:27:35,926
All you need to do is switch
your algorithm to use LZFSE.


535
00:27:36,156 --> 00:27:38,206
We do all the hard
work for you, and you


536
00:27:38,546 --> 00:27:40,926
and your users can
reap the benefits.


537
00:27:40,926 --> 00:27:43,876
So this is LZFSE, really
redefining the sweet spot


538
00:27:44,306 --> 00:27:45,736
in mainstream compression.


539
00:27:46,706 --> 00:27:48,846
Next up, I want to talk
about battery life.


540
00:27:49,206 --> 00:27:50,766
Craig mentioned battery
life this morning.


541
00:27:51,366 --> 00:27:55,726
Now, in our industry,
when we test battery life,


542
00:27:55,986 --> 00:27:59,106
we often do so using
repetitive tests.


543
00:27:59,206 --> 00:28:01,036
For example, we'll
do web browsing over


544
00:28:01,036 --> 00:28:02,536
and over again as our test.


545
00:28:02,536 --> 00:28:05,866
And we know that
in the real world,


546
00:28:06,826 --> 00:28:08,676
the way that we use our
devices is very different


547
00:28:08,676 --> 00:28:10,546
from these synthetic
lab tests; right?


548
00:28:10,606 --> 00:28:13,226
We take the device in
and out of our pocket,


549
00:28:13,326 --> 00:28:16,496
we receive notifications and
messages, we may use a variety


550
00:28:16,496 --> 00:28:19,266
of applications, we may go in
and out of network coverage.


551
00:28:19,626 --> 00:28:23,606
So what we've done in iOS 9 is
really focused on a broad set


552
00:28:23,606 --> 00:28:25,186
of optimizations that apply


553
00:28:25,186 --> 00:28:28,846
across all the most popular
apps on our platform.


554
00:28:29,876 --> 00:28:30,596
That's step one.


555
00:28:30,706 --> 00:28:33,886
Step two, we focused on a number
of infrastructure improvements.


556
00:28:34,116 --> 00:28:37,486
For example, the algorithms that
drive the backlight intensity,


557
00:28:37,926 --> 00:28:40,776
facedown detection so that
if you receive a notification


558
00:28:41,116 --> 00:28:43,686
and are not able to see it
because the phone is face down,


559
00:28:43,746 --> 00:28:45,416
we will simply not
light up the screen.


560
00:28:45,756 --> 00:28:49,496
A number of other optimizations
in how the system, for example,


561
00:28:49,606 --> 00:28:52,736
sleeps, and optimizing
its lowest power states.


562
00:28:53,916 --> 00:28:57,376
All together, these
optimizations add up to one hour


563
00:28:57,376 --> 00:29:01,756
of extra use -- sorry -- of
typical use for average users.


564
00:29:02,176 --> 00:29:02,866
Great improvement.


565
00:29:03,186 --> 00:29:06,226
Craig also talked about Low
Power Mode this morning.


566
00:29:07,516 --> 00:29:10,116
Well, we've made it easy
to turn on Low Power Mode.


567
00:29:10,456 --> 00:29:12,056
Simply go in Settings
and turn it on.


568
00:29:12,926 --> 00:29:16,236
It activates a number
of internal levers.


569
00:29:16,746 --> 00:29:19,126
For example, preventing
the CPU and GPU


570
00:29:19,126 --> 00:29:21,096
from entering the
highest performance,


571
00:29:21,516 --> 00:29:24,586
but most power-hungry,
states; preventing applications


572
00:29:24,586 --> 00:29:27,496
from doing too much work in
the background; preventing them


573
00:29:27,496 --> 00:29:31,546
from doing unnecessary
network activity; and finally,


574
00:29:31,846 --> 00:29:35,056
turning off a number of
power-hungry animations.


575
00:29:35,396 --> 00:29:37,836
And altogether, Low Power
Mode, when you start


576
00:29:37,836 --> 00:29:40,936
from a full charge, will
give you an extra three hours


577
00:29:41,496 --> 00:29:42,136
of usage.


578
00:29:42,546 --> 00:29:43,806
So again, great improvement.


579
00:29:44,536 --> 00:29:47,196
Let me now turn to
protecting customer data.


580
00:29:48,766 --> 00:29:50,746
So from the start,
iOS has really focused


581
00:29:50,746 --> 00:29:53,436
on protecting customer
data, and with iOS 9,


582
00:29:53,726 --> 00:29:56,616
we are taking a number of
important steps to protect data,


583
00:29:56,616 --> 00:29:58,746
both on device and in the cloud.


584
00:29:59,066 --> 00:30:00,076
So let's start with the cloud.


585
00:30:01,406 --> 00:30:05,176
Of course, use your Apple ID
and use that to access a number


586
00:30:05,176 --> 00:30:07,296
of services in the
cloud, your photos.


587
00:30:07,296 --> 00:30:11,386
You might have documents that
are on iCloud, your purchases.


588
00:30:11,646 --> 00:30:13,876
Use it for messaging with
iMessage and FaceTime.


589
00:30:14,176 --> 00:30:18,036
And the biggest threat to
your data in the cloud is


590
00:30:18,036 --> 00:30:20,526
that somebody gains
access to your password,


591
00:30:21,176 --> 00:30:23,136
either because you've
shared that password


592
00:30:23,396 --> 00:30:25,196
on another website
that's been compromised


593
00:30:25,716 --> 00:30:28,216
or perhaps an attacker,
through a phishing attack,


594
00:30:28,396 --> 00:30:30,066
is able to gain that password.


595
00:30:30,596 --> 00:30:33,506
The solution to this is
two-factor authentication,


596
00:30:33,816 --> 00:30:36,376
and we are making it easy
for everyone to adopt.


597
00:30:36,846 --> 00:30:38,016
So let me show you how it works.


598
00:30:39,166 --> 00:30:42,536
So with iOS 9, when you get
a new device and you want


599
00:30:42,536 --> 00:30:45,646
to sign it up to your existing
iCloud account, you will be,


600
00:30:45,646 --> 00:30:48,476
of course, prompted for your
password, but on top of that,


601
00:30:48,476 --> 00:30:50,276
you will have to enter
in a verification code.


602
00:30:51,136 --> 00:30:54,586
Simultaneously, we send a
notification to your existing,


603
00:30:54,806 --> 00:30:58,216
trusted devices, and that
notification includes the


604
00:30:58,216 --> 00:31:01,116
location of this new
device that's signing in.


605
00:31:01,746 --> 00:31:03,266
So if that's you
that's signing in,


606
00:31:03,676 --> 00:31:05,716
you can simply enter
the verification code.


607
00:31:06,086 --> 00:31:07,866
But if it's an attacker
that's trying to sign


608
00:31:07,866 --> 00:31:10,856
in to your account, you can
stop them in their tracks.


609
00:31:12,226 --> 00:31:13,166
That's the cloud side.


610
00:31:13,166 --> 00:31:14,446
Let's now talk about the device


611
00:31:14,836 --> 00:31:16,776
where the passcode
is your last line


612
00:31:16,776 --> 00:31:19,336
of defense protecting
your personal data.


613
00:31:19,866 --> 00:31:24,316
So historically, we've kept
that passcode at four digits


614
00:31:24,426 --> 00:31:26,896
because you had to enter
it every time you wanted


615
00:31:26,896 --> 00:31:27,576
to use your phone.


616
00:31:28,466 --> 00:31:30,976
But of course, these days
we don't enter the passcode


617
00:31:30,976 --> 00:31:31,646
very often.


618
00:31:32,276 --> 00:31:35,636
We use our fingerprint
with Touch ID to sign


619
00:31:35,636 --> 00:31:37,866
in seamlessly into our phones.


620
00:31:38,356 --> 00:31:41,986
So now with iOS 9, we are
able to extend the length


621
00:31:41,986 --> 00:31:46,176
of the passcode from four digits
to six, increasing the strength


622
00:31:46,176 --> 00:31:48,266
of the passcode by a
factor of a hundred,


623
00:31:48,746 --> 00:31:51,976
without compromising ease
of use for our devices.


624
00:31:52,816 --> 00:31:54,606
Now that we've talked
about the device,


625
00:31:55,066 --> 00:31:58,306
let me introduce a
new technology on all


626
00:31:58,306 --> 00:32:00,716
of our platforms, which we
call App Transport Security.


627
00:32:01,116 --> 00:32:04,336
App Transport Security is
really all about securing data


628
00:32:04,336 --> 00:32:07,546
as it transits over the
Internet from a device


629
00:32:07,546 --> 00:32:10,136
or from your applications
to your backend servers.


630
00:32:11,236 --> 00:32:14,416
So of course we want that
information as it transits


631
00:32:14,416 --> 00:32:15,696
over the network to be secure.


632
00:32:16,236 --> 00:32:18,666
But it turns out that
today it's actually hard


633
00:32:18,666 --> 00:32:19,356
for you to do that.


634
00:32:19,516 --> 00:32:20,406
It's hard to get it right.


635
00:32:20,916 --> 00:32:21,896
You can't use HTTP.


636
00:32:21,946 --> 00:32:24,756
You have to use a secure
protocol, but then you have


637
00:32:24,756 --> 00:32:27,606
to worry about protocol
versions, downgrade attacks,


638
00:32:28,106 --> 00:32:29,756
encryption, vulnerabilities.


639
00:32:30,166 --> 00:32:33,376
Keeping it straight and
doing what is best practice


640
00:32:33,786 --> 00:32:34,446
is difficult.


641
00:32:34,886 --> 00:32:37,876
With App Transport Security,
we are building this right


642
00:32:37,876 --> 00:32:39,416
in to our core frameworks.


643
00:32:39,986 --> 00:32:43,116
And so now when you use our
standard networking frameworks,


644
00:32:43,516 --> 00:32:47,546
we will enforce a secure
best practice connection


645
00:32:47,786 --> 00:32:50,586
between your application
and your backend servers.


646
00:32:51,396 --> 00:32:55,146
Today that best practice is
TLS 1.2 and Forward secrecy,


647
00:32:55,146 --> 00:32:58,796
but as the standards and the
state of the art evolves,


648
00:32:59,246 --> 00:33:01,356
of course the framework will
implement that new state


649
00:33:01,356 --> 00:33:05,176
of the art and will enforce
it for you automatically.


650
00:33:06,676 --> 00:33:12,696
[ Applause ]


651
00:33:13,196 --> 00:33:15,846
So where do you go from here?


652
00:33:16,126 --> 00:33:17,956
If you use out standard
networking frameworks,


653
00:33:17,956 --> 00:33:20,886
for example, NSURLSession,
it is built right in.


654
00:33:21,186 --> 00:33:23,386
It is on by default with iOS 9,


655
00:33:23,436 --> 00:33:25,146
so when you download
the developer beta --


656
00:33:25,146 --> 00:33:27,026
which I am sure many
of you already did --


657
00:33:27,816 --> 00:33:29,266
and you recompile your app,


658
00:33:29,266 --> 00:33:31,636
we will enforce best
practices secure connections


659
00:33:31,696 --> 00:33:32,426
to your backend.


660
00:33:32,946 --> 00:33:35,856
It is possible that you
haven't updated your backend


661
00:33:35,856 --> 00:33:37,446
yet to support best practices


662
00:33:37,526 --> 00:33:39,516
or perhaps you are using
a third-party library.


663
00:33:39,986 --> 00:33:43,246
If that's the case, we have
provided an exception mechanism


664
00:33:43,246 --> 00:33:47,336
to give you time to update your
backends through your info.pls.


665
00:33:48,316 --> 00:33:50,116
So that's App Transport
Security.


666
00:33:50,426 --> 00:33:52,606
Let me now switch and
talk about the Mac


667
00:33:52,926 --> 00:33:54,336
and introduce a new technology


668
00:33:54,336 --> 00:33:56,596
which we call system
integrity protection.


669
00:33:57,656 --> 00:34:01,136
Now, on the Mac, user accounts
typically have administrative


670
00:34:01,176 --> 00:34:03,766
privilege, and that
administrative privilege is


671
00:34:03,766 --> 00:34:05,286
really equal to kernel-level
access,


672
00:34:05,286 --> 00:34:07,056
and it makes it difficult


673
00:34:07,056 --> 00:34:08,766
to protect the integrity
of the system.


674
00:34:09,755 --> 00:34:11,295
With system integrity
protection,


675
00:34:11,666 --> 00:34:13,156
we break that equivalency


676
00:34:13,636 --> 00:34:17,585
and administrative-level access
is no longer sufficient in order


677
00:34:17,585 --> 00:34:19,346
to do a number of
operations in the system.


678
00:34:19,346 --> 00:34:20,755
Let me show you some
examples of this.


679
00:34:21,556 --> 00:34:24,545
So for example, if you have
administrative-level privilege,


680
00:34:24,815 --> 00:34:26,726
you cannot modify system files.


681
00:34:27,346 --> 00:34:29,335
You can't install
to system locations.


682
00:34:29,835 --> 00:34:33,755
You can't attach to system
processes and, for example,


683
00:34:33,755 --> 00:34:35,706
introspect the memory or
change the control flow.


684
00:34:36,485 --> 00:34:39,206
So with the beta that's
out today, we encourage you


685
00:34:39,206 --> 00:34:42,946
to download it, test your apps
to make sure that you are able


686
00:34:42,946 --> 00:34:46,416
to basically adhere
to all of these rules.


687
00:34:46,966 --> 00:34:51,606
Now, you might also be wondering
how will this affect the way


688
00:34:51,606 --> 00:34:52,246
that I develop?


689
00:34:52,246 --> 00:34:54,286
Well, the good news
is we've updated Xcode


690
00:34:54,286 --> 00:34:56,926
and the development tool chain,
and for the vast majority


691
00:34:56,926 --> 00:34:58,826
of you, you will
see no difference.


692
00:34:59,606 --> 00:35:02,176
For those that have a specific
development requirement --


693
00:35:02,176 --> 00:35:05,446
for example, you are developing
kernel extensions on OS X --


694
00:35:05,726 --> 00:35:08,806
we do provide a utility that's
part of the recovery partition


695
00:35:09,136 --> 00:35:11,566
that allows you to disable
system integrity protection.


696
00:35:12,116 --> 00:35:16,796
Which takes me now to the last
technology that I want to cover,


697
00:35:16,796 --> 00:35:20,046
one that underpins the
modern Internet, IPv6.


698
00:35:21,566 --> 00:35:23,056
Now, why is IPv6 important?


699
00:35:23,556 --> 00:35:26,406
We've all heard about the
shortage of IPv4 addresses.


700
00:35:26,826 --> 00:35:27,546
Well, guess what.


701
00:35:27,946 --> 00:35:28,906
It's finally here.


702
00:35:29,236 --> 00:35:33,306
In fact, in China and Asia, they
ran out of IPv4 addresses back


703
00:35:33,306 --> 00:35:36,076
in 2011, and in the
U.S., we will be running


704
00:35:36,076 --> 00:35:37,846
out in the next couple
of months.


705
00:35:39,056 --> 00:35:41,316
What it means in
practice is that a number


706
00:35:41,316 --> 00:35:44,356
of carriers are now
deploying IPv6-only networks.


707
00:35:44,866 --> 00:35:47,306
And if your application
doesn't work properly with IPv6,


708
00:35:47,416 --> 00:35:51,116
it will simply not function on
those carriers, those networks,


709
00:35:51,196 --> 00:35:52,176
and for those customers.


710
00:35:52,326 --> 00:35:54,046
So really important
to support IPv6.


711
00:35:55,006 --> 00:35:57,936
Now, the good news is we've
had IPv6 support as part


712
00:35:57,936 --> 00:36:01,256
of the platform for a long
time, well over a decade on Mac.


713
00:36:01,806 --> 00:36:04,096
It is field proven,
and many of you


714
00:36:04,096 --> 00:36:06,726
that are using our standard
networking frameworks are making


715
00:36:06,726 --> 00:36:07,406
use of IPv6.


716
00:36:07,496 --> 00:36:09,336
But we want to go further.


717
00:36:09,336 --> 00:36:11,486
We want to make sure that every
one of you is building an app


718
00:36:11,896 --> 00:36:13,866
that works on IPv6 networks,


719
00:36:14,076 --> 00:36:16,476
so we've got a simple
recipe for you.


720
00:36:17,396 --> 00:36:19,206
Use the standard
networking frameworks.


721
00:36:19,696 --> 00:36:21,266
We've mentioned NSULSession.


722
00:36:22,036 --> 00:36:22,746
It really takes care


723
00:36:22,746 --> 00:36:24,696
of extracting the
complexities of the network.


724
00:36:25,276 --> 00:36:28,006
Avoid the use of
IPv4-specific APIs,


725
00:36:28,476 --> 00:36:32,596
many of which were developed
before IPv6 was even conceived.


726
00:36:33,166 --> 00:36:35,086
And finally, don't
hard-code addresses.


727
00:36:35,986 --> 00:36:38,886
Once you follow the recipe,
you might say, how do I test


728
00:36:38,926 --> 00:36:39,866
that it works properly?


729
00:36:40,406 --> 00:36:43,126
Because not all of us have
access to an IPv6 network.


730
00:36:43,996 --> 00:36:47,036
The good news is again you
all use Macs for development,


731
00:36:47,496 --> 00:36:48,686
and we are turning your Mac


732
00:36:48,686 --> 00:36:52,616
into an IPv6 network
emulator with the latest beta.


733
00:36:53,626 --> 00:36:55,396
So all you need to do is set


734
00:36:55,396 --> 00:36:58,336
up through a new connection
sharing mode a personal hot


735
00:36:58,336 --> 00:37:00,826
spot, you check the
IPv6 only box,


736
00:37:01,226 --> 00:37:04,146
then you can connect your test
device, test your applications,


737
00:37:04,256 --> 00:37:05,576
and make sure that
they work on IPv6.


738
00:37:05,676 --> 00:37:06,996
It's as easy as that.


739
00:37:08,016 --> 00:37:15,086
[ Applause ]


740
00:37:15,586 --> 00:37:18,556
So finally, because IPv6
support is so critical


741
00:37:18,556 --> 00:37:21,256
to ensuring your applications
work across the world


742
00:37:21,796 --> 00:37:22,826
for every customer,


743
00:37:23,176 --> 00:37:26,626
we are making it an App Store
submission requirement starting


744
00:37:26,626 --> 00:37:27,436
with iOS 9.


745
00:37:28,086 --> 00:37:32,186
So that takes me to the end
of my foundation technologies.


746
00:37:32,566 --> 00:37:35,976
Let me now hand it over to my
fellow Canadian, Toby Paterson,


747
00:37:35,976 --> 00:37:38,036
who will be talking
about higher-level APIs.


748
00:37:38,506 --> 00:37:38,866
Toby?


749
00:37:40,016 --> 00:37:46,866
[ Applause ]


750
00:37:47,366 --> 00:37:49,256
>> TOBY PATERSON: Well, I know
many of you have come from all


751
00:37:49,256 --> 00:37:51,876
over the world to be here
today, some of you from even


752
00:37:51,876 --> 00:37:53,296
as far away as Canada.


753
00:37:55,876 --> 00:37:58,506
[Laughter] Well, your customers
are just as diverse as you are.


754
00:37:59,496 --> 00:38:01,666
Here is an interesting fact
you may not have realized


755
00:38:01,666 --> 00:38:02,256
about them.


756
00:38:02,736 --> 00:38:05,776
This chart shows the worldwide
App Store sales broken


757
00:38:05,776 --> 00:38:06,716
down by country.


758
00:38:07,316 --> 00:38:09,246
One of the interesting
things it tells you is


759
00:38:09,496 --> 00:38:11,846
that if your app is
not localized properly,


760
00:38:11,846 --> 00:38:15,486
you are not going to reach
potentially the vast majority


761
00:38:15,486 --> 00:38:16,866
of your customers out there.


762
00:38:17,686 --> 00:38:19,886
Now, the good news is it's
not hard for you to do.


763
00:38:21,096 --> 00:38:24,226
We have an internationalization
and localization guide


764
00:38:24,446 --> 00:38:27,206
that tells you everything you
need to know, and of course,


765
00:38:27,206 --> 00:38:28,556
we've got some great support


766
00:38:28,556 --> 00:38:30,776
in our frameworks
and SDKs for this.


767
00:38:31,546 --> 00:38:33,746
We have formatters
for dates and numbers.


768
00:38:34,386 --> 00:38:36,776
And this year we are
introducing a new formatter


769
00:38:36,776 --> 00:38:39,336
to help you display
people's names properly.


770
00:38:40,546 --> 00:38:42,096
Now, names are a tricky thing.


771
00:38:42,346 --> 00:38:43,976
Everybody has one, of course,


772
00:38:44,436 --> 00:38:46,826
but different cultures
represent them differently


773
00:38:46,826 --> 00:38:49,136
and have different
conventions around their use.


774
00:38:50,246 --> 00:38:53,796
In English, we typically write a
name as first, middle, and last.


775
00:38:54,346 --> 00:38:56,936
Chinese, on the other hand,
leads with the family name


776
00:38:57,046 --> 00:38:59,806
and doesn't even have the
notion of a middle name at all.


777
00:39:01,136 --> 00:39:03,796
The NS person name
component formatter --


778
00:39:04,296 --> 00:39:06,646
which I promise looks better
in code than it sounds


779
00:39:06,646 --> 00:39:07,816
when you say it out loud --


780
00:39:08,396 --> 00:39:11,886
[laughter and applause]
-- thank you.


781
00:39:12,706 --> 00:39:14,936
This takes care of all
of the details for you.


782
00:39:15,446 --> 00:39:17,606
And it even has some
cultural smarts.


783
00:39:17,606 --> 00:39:20,586
So if you ask it for the short
version of a person's name,


784
00:39:20,976 --> 00:39:23,036
it knows when it might
be inappropriate to use


785
00:39:23,036 --> 00:39:25,876
that person's first
name all by itself.


786
00:39:26,646 --> 00:39:30,526
Now, we have some really
exciting news for Arabic


787
00:39:30,526 --> 00:39:32,046
and Hebrew speakers out there.


788
00:39:32,666 --> 00:39:36,006
We've had rudimentary support
-- welcome -- [laughter] --


789
00:39:36,606 --> 00:39:38,676
we've had some rudimentary
support


790
00:39:38,676 --> 00:39:40,256
for these languages for years.


791
00:39:40,256 --> 00:39:43,346
On iOS it was limited
strictly to text; whereas,


792
00:39:43,346 --> 00:39:45,986
the Mac had some more
sophisticated layout


793
00:39:46,046 --> 00:39:47,276
of your UI elements.


794
00:39:47,986 --> 00:39:50,496
Well, I am really pleased
to tell you that in iOS 9,


795
00:39:50,496 --> 00:39:54,586
we have full mirrored UI support
for right-to-left languages.


796
00:39:56,516 --> 00:39:59,596
[ Applause ]


797
00:40:00,096 --> 00:40:01,776
Here's what it looks
like in Springboard.


798
00:40:02,486 --> 00:40:05,656
Now, we haven't just
reversed some


799
00:40:05,656 --> 00:40:07,456
of the UI elements
on screen here.


800
00:40:07,456 --> 00:40:09,516
This is a much deeper
conversion,


801
00:40:09,886 --> 00:40:12,776
where we've reversed the flow
between your view controllers,


802
00:40:13,136 --> 00:40:16,256
your user interactions,
and the system gestures.


803
00:40:16,776 --> 00:40:19,896
This is what the UI would look
like if it had been designed


804
00:40:19,896 --> 00:40:22,166
by a native Hebrew
or Arabic speaker.


805
00:40:23,186 --> 00:40:25,326
Let's take a look at what
this looks like on the phone.


806
00:40:25,526 --> 00:40:27,626
I'd like to bring
Sara Radi up on stage


807
00:40:27,626 --> 00:40:29,566
to give you a quick tour.


808
00:40:30,476 --> 00:40:35,076
[ Applause ]


809
00:40:35,576 --> 00:40:36,466
>> SARA RADI: So
let's take a look


810
00:40:36,466 --> 00:40:39,106
at the new right-to-left
languages support on iOS 9.


811
00:40:39,616 --> 00:40:42,266
So here I am running my
iPhone in Arabic, and starting


812
00:40:42,266 --> 00:40:44,506
from the lock screen,
I slide from right


813
00:40:44,506 --> 00:40:45,896
to left to unlock my device.


814
00:40:46,466 --> 00:40:50,216
Here, my app icons are also
laid out from right to left,


815
00:40:50,956 --> 00:40:52,846
and my page view flows naturally


816
00:40:52,886 --> 00:40:54,916
from the first page
to the second.


817
00:40:56,966 --> 00:41:00,686
So the whole system and all our
native apps fully support user


818
00:41:00,686 --> 00:41:03,746
interface mirroring or running
in right-to-left localizations.


819
00:41:04,106 --> 00:41:06,366
So let's take a look at the
Photos app, for example.


820
00:41:07,846 --> 00:41:11,876
Here, all of my photos are laid
out the way I expect them to be.


821
00:41:12,216 --> 00:41:16,056
The entire UI feels just
right from the navigation bar


822
00:41:16,056 --> 00:41:20,786
at the top to the
bar at the bottom.


823
00:41:20,786 --> 00:41:22,206
Now let me show you Mail.


824
00:41:22,996 --> 00:41:28,316
In addition to the standard
layout, navigation, gestures,


825
00:41:28,316 --> 00:41:30,866
and animations also
flow as expected.


826
00:41:31,356 --> 00:41:34,056
So hitting Mail to trigger
the quick message actions,


827
00:41:34,446 --> 00:41:36,466
I am going to swipe
from the left edge


828
00:41:36,466 --> 00:41:38,206
of the screen to the right.


829
00:41:38,206 --> 00:41:42,956
And that compliments the layout
flow of the table view cell.


830
00:41:44,196 --> 00:41:48,066
Also, the navigation
gesture works as expected


831
00:41:48,366 --> 00:41:51,906
from the right edge
of the screen.


832
00:41:52,076 --> 00:41:53,486
Now rotating my device


833
00:41:53,576 --> 00:41:55,886
to landscape reveals
the Message view.


834
00:41:56,346 --> 00:41:59,286
As a native speaker, this
feels so natural to me


835
00:41:59,496 --> 00:42:01,616
since all my emails
are on the right side


836
00:42:02,226 --> 00:42:03,606
and the details are on the left.


837
00:42:04,406 --> 00:42:07,016
And since we've built
all of this into UIKit,


838
00:42:07,346 --> 00:42:10,096
your apps will get the
exact same behavior for free


839
00:42:10,196 --> 00:42:12,046
for running in right-to-left
localizations.


840
00:42:13,286 --> 00:42:15,246
Now let me show you
a third-party app


841
00:42:15,766 --> 00:42:18,936
from the App Store.


842
00:42:19,156 --> 00:42:20,816
And just in case
you are wondering,


843
00:42:20,816 --> 00:42:23,516
we didn't choose Kayak because
the name is a palindrome


844
00:42:23,516 --> 00:42:26,796
and you can also read
this from right to left.


845
00:42:27,476 --> 00:42:32,666
[ Applause ]


846
00:42:33,166 --> 00:42:36,336
So since it is using
autolayouts and our new APIs


847
00:42:36,336 --> 00:42:40,346
with very minimal work,
they just add translations,


848
00:42:40,346 --> 00:42:42,066
and their app just
works as expected.


849
00:42:42,066 --> 00:42:46,456
So after WWDC, I am planning to
go on vacation, so I am going


850
00:42:46,456 --> 00:42:47,556
to explore some views.


851
00:42:48,186 --> 00:42:52,456
So the first slider lets
me pick the number of days


852
00:42:52,456 --> 00:42:55,186
of my vacation, so I am
going to drag that slider


853
00:42:55,666 --> 00:42:57,916
to the right side to
decrease the number of days.


854
00:42:57,916 --> 00:43:00,796
Since they are using
a stock UI slider,


855
00:43:00,876 --> 00:43:02,256
they got this behavior for free.


856
00:43:03,556 --> 00:43:06,386
I also prefer nonstop flight
only, so I am going to turn


857
00:43:06,386 --> 00:43:09,926
on that switch at the
bottom, and as you can see,


858
00:43:09,926 --> 00:43:11,446
it also flows from
right to left.


859
00:43:11,706 --> 00:43:15,976
So the entire UI feels just
right and feels very intuitive


860
00:43:16,286 --> 00:43:17,736
for natives of these languages.


861
00:43:18,536 --> 00:43:22,396
And that's how easy it can be to
add right-to-left localizations


862
00:43:22,396 --> 00:43:23,906
to your apps on iOS 9.


863
00:43:24,086 --> 00:43:24,626
Thank you so much.


864
00:43:25,206 --> 00:43:27,206
[ Applause ]


865
00:43:27,396 --> 00:43:28,316
Now back to Toby.


866
00:43:30,146 --> 00:43:30,736
>> TOBY PATERSON:
Thank you, Sara.


867
00:43:33,596 --> 00:43:36,626
Well, as Sara mentioned, we have
full support for this in UIKit


868
00:43:36,626 --> 00:43:38,526
and our other system frameworks.


869
00:43:38,886 --> 00:43:40,796
So you can get a lot
of this just for free


870
00:43:40,796 --> 00:43:42,156
in your own applications.


871
00:43:42,826 --> 00:43:45,356
If you have custom views
or gesture recognizers,


872
00:43:45,686 --> 00:43:47,596
you do need to think
about what they mean


873
00:43:47,766 --> 00:43:49,186
in a right-to-left language.


874
00:43:50,066 --> 00:43:52,846
We have this API here, which I
am not even going to try and say


875
00:43:52,846 --> 00:43:56,016
out loud, to tell you
which way the UI is flowing


876
00:43:56,016 --> 00:43:59,086
so you can make the appropriate
decision for your UI.


877
00:44:00,686 --> 00:44:02,846
Next I'd like to
talk about links,


878
00:44:03,516 --> 00:44:06,436
and by these I mean the kind of
links that you get from a friend


879
00:44:06,436 --> 00:44:07,636
in a message or an email.


880
00:44:08,456 --> 00:44:11,526
You tap on it, and invariably
it opens up in a web page.


881
00:44:12,126 --> 00:44:14,316
Well, this is exactly
what you want on the Mac


882
00:44:14,376 --> 00:44:17,766
because Safari is a natural
home for web applications.


883
00:44:18,936 --> 00:44:21,706
iOS, on the other hand, is
all about the native app.


884
00:44:21,806 --> 00:44:24,386
Wouldn't it be great if that
same link when you tapped


885
00:44:24,386 --> 00:44:28,346
on it could open up right in
the associated application?


886
00:44:29,826 --> 00:44:33,806
Well, that's exactly what
we've made possible in iOS 9.


887
00:44:33,806 --> 00:44:34,466
[ Applause ]


888
00:44:34,466 --> 00:44:41,096
This kind of universal app
linking that takes you to the --


889
00:44:41,096 --> 00:44:44,026
the same link that can take
you to the natural destination


890
00:44:44,026 --> 00:44:45,446
for the platform
that you are on.


891
00:44:45,816 --> 00:44:48,736
Safari on the Mac or
native apps on iOS.


892
00:44:49,386 --> 00:44:50,266
Here's how it works.


893
00:44:51,446 --> 00:44:55,416
You host a file on your website
that lists the kind of URLs


894
00:44:55,416 --> 00:44:57,566
that your application
can handle natively.


895
00:44:58,236 --> 00:45:00,446
When the user taps
on one of those URLs,


896
00:45:00,886 --> 00:45:04,986
we wrap it up in an
NSUserActivity and hand it off


897
00:45:04,986 --> 00:45:06,656
to your application the same way


898
00:45:06,656 --> 00:45:09,016
that Handoff does,
and that's it.


899
00:45:09,016 --> 00:45:09,806
It's that easy.


900
00:45:09,806 --> 00:45:14,656
Now I'd like to talk about some
of the new things in iOS 9,


901
00:45:15,466 --> 00:45:16,466
starting with HomeKit.


902
00:45:18,176 --> 00:45:20,926
So this morning we announced
a number of great new features


903
00:45:20,926 --> 00:45:24,046
for the HomeKit platform, and
of course, we've been continuing


904
00:45:24,046 --> 00:45:26,206
to enhance the HomeKit
framework.


905
00:45:27,936 --> 00:45:32,116
Certain classes of accessories
can now post push notifications


906
00:45:32,376 --> 00:45:36,256
right to your devices, doors,
windows, and alarm systems.


907
00:45:37,026 --> 00:45:39,606
And we have a new
system UI for managing


908
00:45:39,676 --> 00:45:41,926
who you are sharing your
HomeKit network with.


909
00:45:42,866 --> 00:45:45,516
This is available in Settings,
and we also have an API


910
00:45:45,516 --> 00:45:48,756
so you can bring it up right
in your own application.


911
00:45:50,286 --> 00:45:52,626
But I think the really
interesting things are


912
00:45:52,626 --> 00:45:53,496
event triggers.


913
00:45:54,236 --> 00:45:58,336
These let you set up "if this,
then that" sequence of actions


914
00:45:58,336 --> 00:46:00,176
so that you can turn
the lights off


915
00:46:00,176 --> 00:46:02,746
when you activate the alarm
system or, more importantly,


916
00:46:02,746 --> 00:46:05,106
turn the coffee machine on
first thing in the morning.


917
00:46:05,686 --> 00:46:07,526
I think these are going
to be really powerful.


918
00:46:09,316 --> 00:46:10,736
Now we have some
new things in Search


919
00:46:10,796 --> 00:46:12,646
that I think you are
probably all interested in.


920
00:46:13,816 --> 00:46:15,826
The big news for iOS
Search, of course,


921
00:46:15,826 --> 00:46:18,426
is that now it can search
your application content.


922
00:46:18,966 --> 00:46:21,656
We can show rich results, and
when the user taps on them,


923
00:46:22,006 --> 00:46:22,716
take them straight


924
00:46:22,716 --> 00:46:25,026
to the appropriate spot
in your application.


925
00:46:26,216 --> 00:46:29,246
There are three ways that you
can index your application data.


926
00:46:29,956 --> 00:46:33,116
Core Spotlight lets you
explicitly index all


927
00:46:33,116 --> 00:46:35,286
of the application
content that you have.


928
00:46:36,016 --> 00:46:39,296
Now, some of that data may only
be valid for a limited time,


929
00:46:39,756 --> 00:46:42,316
and so you can optionally
provide an app indexing


930
00:46:42,316 --> 00:46:45,456
extension, which Core
Spotlight will call out to


931
00:46:45,456 --> 00:46:48,836
at the appropriate time to
make sure your indices are


932
00:46:48,836 --> 00:46:49,426
up to date.


933
00:46:51,226 --> 00:46:55,096
Another way of indexing
data is via NSUserActivity.


934
00:46:55,776 --> 00:46:59,036
This lets you index things that
the user is seeing or doing


935
00:46:59,036 --> 00:47:02,216
in your application so that
they can easily find them


936
00:47:02,326 --> 00:47:04,136
and get back to your
application.


937
00:47:05,276 --> 00:47:08,586
And finally, if your
app is mirroring content


938
00:47:08,586 --> 00:47:12,576
from your website, you can
mark up that website content


939
00:47:12,576 --> 00:47:15,256
so that our web crawler
will find it, index it,


940
00:47:15,476 --> 00:47:20,476
and provide results when
searching locally on the device.


941
00:47:20,956 --> 00:47:23,596
Now, you saw this morning
that when you swipe


942
00:47:23,596 --> 00:47:27,176
into the new Search UI,
we already have a series


943
00:47:27,176 --> 00:47:29,206
of suggestions ready
and waiting for you


944
00:47:29,206 --> 00:47:30,786
without you having
to type anything.


945
00:47:31,986 --> 00:47:34,556
Well, Siri can even
suggest results from deep


946
00:47:34,616 --> 00:47:36,096
within your application.


947
00:47:36,676 --> 00:47:40,886
If you are using
NSUserActivity to make a note


948
00:47:40,886 --> 00:47:44,386
of what the user is doing in
your application, Siri can take


949
00:47:44,386 --> 00:47:45,836
that into account when coming


950
00:47:45,836 --> 00:47:47,926
up with these proactive
suggestions.


951
00:47:48,136 --> 00:47:50,676
You've probably noticed we
are building a lot on top


952
00:47:50,676 --> 00:47:52,286
of NSUserActivity here.


953
00:47:52,286 --> 00:47:53,686
There's Handoff, of course,


954
00:47:53,986 --> 00:47:57,306
universal links,
Search, Suggestions.


955
00:47:57,356 --> 00:48:00,126
I think this is a great
example of how we are building


956
00:48:00,126 --> 00:48:02,656
on our existing foundations
to make your apps


957
00:48:02,656 --> 00:48:04,556
and the whole ecosystem
much richer.


958
00:48:05,166 --> 00:48:09,636
Now, the big news this morning,
of course, was Multitasking,


959
00:48:09,736 --> 00:48:12,056
and we are really excited
to bring this to you today.


960
00:48:13,686 --> 00:48:16,536
There's slideover
and split view,


961
00:48:17,216 --> 00:48:20,106
which lets you pin apps
side by side so you can work


962
00:48:20,106 --> 00:48:21,306
on them at the same time.


963
00:48:21,696 --> 00:48:24,856
I could almost hear many of you
wondering out loud this morning,


964
00:48:24,856 --> 00:48:27,796
oh, gosh, what do I have
to do on my application now


965
00:48:27,796 --> 00:48:29,156
to take advantage of this?


966
00:48:30,186 --> 00:48:33,886
Well, the answer hopefully
is not very much at all.


967
00:48:34,686 --> 00:48:36,956
You may remember last year
we introduced this notion


968
00:48:36,956 --> 00:48:40,146
of Adaptive UI, which is
a really simple concept.


969
00:48:40,606 --> 00:48:42,956
It says that instead
of designing your UI


970
00:48:42,956 --> 00:48:47,826
for fixed screen sizes, instead
pick a layout and then adapt it


971
00:48:47,826 --> 00:48:50,076
to changes in your
window bounds.


972
00:48:50,736 --> 00:48:53,286
And we provide a number of
tools to help you with this.


973
00:48:53,826 --> 00:48:56,506
There's Dynamic Type
for laying out your text


974
00:48:56,506 --> 00:48:57,946
and autolayout constraints


975
00:48:57,946 --> 00:49:01,216
for adapting your UI
to changes in bounds.


976
00:49:01,806 --> 00:49:03,066
Now, we recognize, of course,


977
00:49:03,066 --> 00:49:05,236
that a single layout is
not going to make sense


978
00:49:05,236 --> 00:49:07,376
across all these
different screen sizes,


979
00:49:07,676 --> 00:49:11,276
so we introduced this
abstraction called Size Classes,


980
00:49:11,566 --> 00:49:14,606
which try to allow you to
choose the appropriate layout


981
00:49:14,606 --> 00:49:17,386
without having to resort
to a device-specific check.


982
00:49:19,026 --> 00:49:22,306
This works by broadly
categorizing sizes,


983
00:49:22,306 --> 00:49:26,116
screen sizes, into two
buckets, regular and compact.


984
00:49:26,116 --> 00:49:29,996
You can see here that the iPad
has a regular horizontal size


985
00:49:29,996 --> 00:49:34,076
class, and the iPhone has a
compact horizontal size class.


986
00:49:34,766 --> 00:49:37,236
We are using these
exact same mechanisms


987
00:49:37,236 --> 00:49:38,916
for the Multitasking UI.


988
00:49:39,996 --> 00:49:42,836
You can see here in the slide
overview it has a compact


989
00:49:42,996 --> 00:49:44,576
horizontal size class.


990
00:49:44,876 --> 00:49:48,066
And when I tap to pin those
two apps in split view,


991
00:49:48,946 --> 00:49:51,986
we adjust the bounds of the
main app there on the left


992
00:49:52,556 --> 00:49:55,576
but keep it with a regular
horizontal size class.


993
00:49:55,816 --> 00:49:59,336
Now, the interesting thing,
when you resize that split view


994
00:49:59,696 --> 00:50:03,916
to 50/50, is not only do we
adjust the window bounds there,


995
00:50:03,916 --> 00:50:07,336
but we also change the
size class of the main app


996
00:50:07,336 --> 00:50:09,196
on the left from
regular to compact.


997
00:50:10,126 --> 00:50:13,786
We found in our own applications
that this is the best layout


998
00:50:13,946 --> 00:50:15,546
for these window dimensions.


999
00:50:16,886 --> 00:50:20,576
So if you have already adopted
Adaptive UI in your app,


1000
00:50:21,046 --> 00:50:23,426
there's actually very
little left for you to do.


1001
00:50:24,936 --> 00:50:26,706
You need to use a
launch Storyboard,


1002
00:50:26,706 --> 00:50:30,126
which is a more flexible
replacement for default pings,


1003
00:50:31,066 --> 00:50:33,766
and then declare that you
support all orientations,


1004
00:50:33,926 --> 00:50:34,606
and that's it.


1005
00:50:35,106 --> 00:50:37,966
As Craig mentioned this morning,
we have literally converted apps


1006
00:50:37,966 --> 00:50:41,236
in a matter of minutes and
had them up and running.


1007
00:50:41,386 --> 00:50:42,236
It's really great.


1008
00:50:43,606 --> 00:50:45,946
Now, this morning we also
announced Picture in Picture,


1009
00:50:46,266 --> 00:50:49,246
which lets you continue
to watch videos over top


1010
00:50:49,246 --> 00:50:50,686
of your other applications.


1011
00:50:51,106 --> 00:50:53,696
And if you are a
video application,


1012
00:50:53,696 --> 00:50:55,106
it's really straightforward
for you


1013
00:50:55,106 --> 00:50:56,826
to take advantage
of this yourself.


1014
00:50:57,876 --> 00:50:59,246
The first thing you
need to do, of course,


1015
00:50:59,246 --> 00:51:03,186
is just support background media
playback, and then you need


1016
00:51:03,186 --> 00:51:05,946
to enable Picture in Picture
support in your controller.


1017
00:51:06,716 --> 00:51:09,846
We have this built into
our standard media playback


1018
00:51:09,846 --> 00:51:13,506
controls, and we provide an AV
Picture in Picture controller


1019
00:51:13,816 --> 00:51:15,736
to give you very
fine-grain control


1020
00:51:16,296 --> 00:51:18,466
over entering Picture
in Picture.


1021
00:51:19,016 --> 00:51:22,176
Next I'd like to
talk about the Mac.


1022
00:51:23,056 --> 00:51:26,426
So OS X, of course,
has had Multitasking,


1023
00:51:26,426 --> 00:51:28,096
multiple windows forever,


1024
00:51:28,606 --> 00:51:31,706
and this year we announced some
new window management features


1025
00:51:31,986 --> 00:51:33,976
that make that even
more compelling.


1026
00:51:35,046 --> 00:51:37,256
The key element of
this is the ability


1027
00:51:37,256 --> 00:51:40,836
to tile two applications
side by side in a split view,


1028
00:51:41,316 --> 00:51:43,096
as you can see in
this screenshot here.


1029
00:51:44,806 --> 00:51:47,586
Now, adoption of
this is really easy.


1030
00:51:48,546 --> 00:51:53,916
Any resizable window can partake
in this, and the key thing


1031
00:51:53,916 --> 00:51:56,706
for you to do there is to make
sure that your window lays


1032
00:51:56,706 --> 00:51:59,966
out nicely in both
narrow and wide geometries


1033
00:52:00,296 --> 00:52:01,896
so that it can play
along well with just


1034
00:52:01,896 --> 00:52:03,806
about any other window
in the system there.


1035
00:52:03,806 --> 00:52:07,926
And of course, we've added some
new APIs and behaviors to AppKit


1036
00:52:08,076 --> 00:52:09,576
to make this really
easy for you,


1037
00:52:09,956 --> 00:52:12,016
such as automatically
hiding the sidebar


1038
00:52:12,016 --> 00:52:13,606
in the NS split view controller.


1039
00:52:14,086 --> 00:52:18,086
Another key development on
the Mac is the introduction


1040
00:52:18,086 --> 00:52:22,256
of Force Touch, which we
released a few months ago.


1041
00:52:23,276 --> 00:52:26,736
So Force Touch opens up a
whole new dimension of Touch,


1042
00:52:27,066 --> 00:52:30,896
with pressure sensitivity and
haptic feedback on the Trackpad.


1043
00:52:32,016 --> 00:52:34,976
We use this in our own apps
for things like text lookup,


1044
00:52:34,976 --> 00:52:38,126
pressure-sensitive playback
controls, and finer control


1045
00:52:38,126 --> 00:52:40,276
over drawing, preview,
and markup.


1046
00:52:42,586 --> 00:52:45,986
Naturally, we've added some
API for you to take advantage


1047
00:52:45,986 --> 00:52:47,516
of this in your own application.


1048
00:52:48,226 --> 00:52:50,576
You can set the pressure
configuration for the kind


1049
00:52:50,576 --> 00:52:51,976
of Force Touch that you want,


1050
00:52:52,306 --> 00:52:55,586
configure the default haptic
feedback on the Trackpad,


1051
00:52:56,096 --> 00:52:58,936
and have pressure changed
events delivered to your views


1052
00:52:58,986 --> 00:53:00,556
and gesture recognizers.


1053
00:53:01,226 --> 00:53:04,316
We think Force Touch is a
really exciting new capability


1054
00:53:04,316 --> 00:53:04,836
for the Mac.


1055
00:53:05,206 --> 00:53:07,226
We can't wait to
see what you guys do


1056
00:53:07,226 --> 00:53:08,356
with it in your own apps.


1057
00:53:10,016 --> 00:53:12,556
Now, I have some updates
on iCloud for you.


1058
00:53:14,176 --> 00:53:17,736
Last year we launched iCloud
Drive, and this is a great way


1059
00:53:17,736 --> 00:53:19,956
for accessing all
of your documents


1060
00:53:19,956 --> 00:53:23,306
across your mobile devices,
your computers, and the web.


1061
00:53:25,066 --> 00:53:28,886
Now, on iOS, apps provide
a great in-app experience


1062
00:53:28,886 --> 00:53:30,426
for managing your documents,


1063
00:53:30,816 --> 00:53:33,786
and we think this simple
app-centric model is great


1064
00:53:33,786 --> 00:53:35,176
for many people out there.


1065
00:53:35,576 --> 00:53:38,606
But Mac users, of course,
are accustomed to working


1066
00:53:38,606 --> 00:53:41,746
with their documents
directly in iCloud Drive.


1067
00:53:42,776 --> 00:53:45,556
So for those folks, we are
adding a new application


1068
00:53:45,556 --> 00:53:48,386
to iOS, the iCloud Drive app.


1069
00:53:49,516 --> 00:53:54,986
[ Applause ]


1070
00:53:55,486 --> 00:53:56,576
This is what it looks like.


1071
00:53:56,636 --> 00:53:58,146
You can see all of
your documents


1072
00:53:58,146 --> 00:54:01,016
in iCloud Drive organized
just as you would expect.


1073
00:54:01,636 --> 00:54:05,146
You can preview many document
types right in the application.


1074
00:54:05,806 --> 00:54:09,656
And naturally, you can open a
document in its own application.


1075
00:54:11,386 --> 00:54:14,716
Now, prior to iOS 9, the only
way of accomplishing this was


1076
00:54:14,716 --> 00:54:18,066
to copy the document into
the application container,


1077
00:54:18,346 --> 00:54:20,456
and of course, that's
exactly what you don't want


1078
00:54:20,456 --> 00:54:22,166
for documents in iCloud Drive


1079
00:54:22,546 --> 00:54:24,616
or any other document
provider for that matter.


1080
00:54:25,696 --> 00:54:28,486
What you really want is to be
able to edit those documents


1081
00:54:28,486 --> 00:54:31,066
in place without
moving or copying them.


1082
00:54:31,906 --> 00:54:34,136
So if you are a document-based
application,


1083
00:54:34,366 --> 00:54:36,186
here's what you need
to do to enable that.


1084
00:54:37,326 --> 00:54:38,996
You need to support
file coordination


1085
00:54:38,996 --> 00:54:41,676
since there may be multiple
processes trying to access


1086
00:54:41,726 --> 00:54:43,526
that document simultaneously.


1087
00:54:43,696 --> 00:54:46,846
And then you just add this
key to your Info.plist


1088
00:54:47,176 --> 00:54:49,536
and handle the application
open callback.


1089
00:54:50,136 --> 00:54:50,826
And that's it.


1090
00:54:52,296 --> 00:54:56,626
iCloud Drive is built on top
of CloudKit as are, in fact,


1091
00:54:57,096 --> 00:54:58,996
many of our iCloud services.


1092
00:54:59,676 --> 00:55:02,516
CloudKit is a public API,
and when we launched it,


1093
00:55:02,876 --> 00:55:04,866
we said it was going
to be basically free


1094
00:55:04,866 --> 00:55:06,286
for probably most of you.


1095
00:55:06,686 --> 00:55:09,236
Well, what does that
actually mean in practice?


1096
00:55:10,586 --> 00:55:13,496
Here's what you can store in
iCloud Drive for free right


1097
00:55:13,496 --> 00:55:15,516
from the get-go with no users.


1098
00:55:16,126 --> 00:55:18,526
As you add more users
to your application,


1099
00:55:18,866 --> 00:55:23,406
these grow commensurately up
to these maximum data limits.


1100
00:55:25,126 --> 00:55:27,846
Now, we've built a
CloudKit Dashboard for you


1101
00:55:27,846 --> 00:55:31,116
that shows you all of the
key metrics at a glance


1102
00:55:31,376 --> 00:55:34,626
and includes a line below which
everything is free for you.


1103
00:55:35,396 --> 00:55:38,146
We project that line a short
ways out into the future


1104
00:55:38,146 --> 00:55:41,076
so you can have some advance
notice before crossing it.


1105
00:55:41,696 --> 00:55:44,816
And if you do cross that
line, we've published a clear


1106
00:55:44,816 --> 00:55:47,186
and simple pricing guide here.


1107
00:55:48,346 --> 00:55:51,076
You can also find tons of
other interesting information


1108
00:55:51,076 --> 00:55:54,676
about CloudKit here, such as
the details of a new feature


1109
00:55:54,676 --> 00:55:58,456
that we are launching this
year, CloudKit Web Services.


1110
00:55:59,276 --> 00:56:02,656
This is basically a full-on
CloudKit implementation


1111
00:56:02,766 --> 00:56:03,926
for web apps.


1112
00:56:04,746 --> 00:56:06,046
Anything that you can do


1113
00:56:06,486 --> 00:56:10,506
with the native CloudKit
API you can now do via JSON.


1114
00:56:11,036 --> 00:56:14,126
We provide a JavaScript
library that mimics as closely


1115
00:56:14,126 --> 00:56:16,496
as possible the native
CloudKit API.


1116
00:56:16,496 --> 00:56:19,446
And we provide a web login flow


1117
00:56:19,446 --> 00:56:21,786
so that you can authenticate
your users securely.


1118
00:56:22,556 --> 00:56:24,556
We think this is going
to make it really easy


1119
00:56:24,556 --> 00:56:26,896
to write a CloudKit-based
web application


1120
00:56:27,196 --> 00:56:30,746
to run alongside your
iPad, iPhone, and Mac apps.


1121
00:56:31,276 --> 00:56:33,306
And that's what I
have for CloudKit.


1122
00:56:33,306 --> 00:56:34,026
Thank you.


1123
00:56:35,476 --> 00:56:38,506
[ Applause ]


1124
00:56:39,006 --> 00:56:40,696
Now I'd like to hand off to
Chris Lattner, who is going


1125
00:56:40,696 --> 00:56:42,136
to tell you something
about Swift.


1126
00:56:42,176 --> 00:56:44,006
[ Cheers and applause ]


1127
00:56:44,006 --> 00:56:44,156
>> CHRIS LATTNER: All right.


1128
00:56:44,156 --> 00:56:45,456
Thank you.


1129
00:56:50,046 --> 00:56:50,766
Thank you, Toby.


1130
00:56:51,276 --> 00:56:53,126
The response to Swift
has been amazing,


1131
00:56:53,376 --> 00:56:55,616
and it's really actually
hard to believe


1132
00:56:55,616 --> 00:56:57,376
that it was unveiled
just one year ago.


1133
00:56:58,496 --> 00:57:00,436
When we talked about Swift
back then, we talked about some


1134
00:57:00,436 --> 00:57:03,656
of its major features
like performance, safety,


1135
00:57:03,976 --> 00:57:05,766
and also the interactivity
of Playgrounds.


1136
00:57:06,446 --> 00:57:09,036
But we want Swift to be
pervasively available


1137
00:57:09,036 --> 00:57:12,396
to everybody, and so we are
open sourcing the compiler


1138
00:57:12,756 --> 00:57:15,746
and the standard library
and even kicking things off


1139
00:57:15,866 --> 00:57:17,796
with the Linux board as well.


1140
00:57:18,516 --> 00:57:24,756
[ Applause ]


1141
00:57:25,256 --> 00:57:26,296
This project is going to be run


1142
00:57:26,296 --> 00:57:30,636
under an OSI-approved permissive
license starting later this year


1143
00:57:30,636 --> 00:57:32,266
after we wrap up
work on Swift 2.


1144
00:57:32,986 --> 00:57:35,416
We look forward to working
even more closely with you all,


1145
00:57:36,456 --> 00:57:37,956
incorporating both your ideas


1146
00:57:38,116 --> 00:57:39,616
and your code contributions
as well.


1147
00:57:40,246 --> 00:57:44,996
So there's been a lot written
about Swift, and we're not going


1148
00:57:45,026 --> 00:57:47,216
to go through all the quotes,
but one of our favorite was


1149
00:57:47,216 --> 00:57:48,936
when Swift topped the list


1150
00:57:49,006 --> 00:57:51,946
of Stack Overflow's most-loved
programming languages.


1151
00:57:53,076 --> 00:57:55,086
And there's a lot of
reasons to love Swift; right?


1152
00:57:55,906 --> 00:57:58,376
One of which is it's built
to run your applications


1153
00:57:58,376 --> 00:58:00,096
at top speed, and
over the last year,


1154
00:58:00,166 --> 00:58:02,236
performance of Swift code
has grown tremendously


1155
00:58:02,236 --> 00:58:04,326
as we've implemented new
optimizations in the compiler.


1156
00:58:05,446 --> 00:58:07,586
And there is a ton
new in Swift 2


1157
00:58:07,726 --> 00:58:09,636
with improvements
across the board.


1158
00:58:09,636 --> 00:58:13,806
But let's talk about a few of
these, and maybe we will start


1159
00:58:13,806 --> 00:58:15,606
with one of the most
requested features,


1160
00:58:15,676 --> 00:58:17,456
a new error handling model.


1161
00:58:18,556 --> 00:58:21,926
So error handling is a
very well-known field.


1162
00:58:22,286 --> 00:58:23,866
There's a lot of
known approaches.


1163
00:58:24,836 --> 00:58:27,146
But all these approaches
have very well-known problems


1164
00:58:27,146 --> 00:58:27,496
as well.


1165
00:58:27,756 --> 00:58:30,756
So we weren't satisfied with
any of the existing approaches,


1166
00:58:30,756 --> 00:58:33,366
so we came up with something
we think will feel familiar


1167
00:58:33,406 --> 00:58:36,616
but will solve these
kinds of problems.


1168
00:58:37,126 --> 00:58:38,316
So let's talk about it now.


1169
00:58:39,626 --> 00:58:40,476
It starts out simple.


1170
00:58:41,326 --> 00:58:43,596
A method or function in
Swift can now be marked


1171
00:58:43,596 --> 00:58:44,766
as being able to
produce an error.


1172
00:58:45,786 --> 00:58:48,226
This greatly simplifies
many common Cocoa APIs


1173
00:58:48,226 --> 00:58:51,136
and also allows the
compiler to verify


1174
00:58:51,456 --> 00:58:53,176
that you are handling
your errors properly.


1175
00:58:54,546 --> 00:58:57,356
Swift now has familiar catch
syntax to handle errors


1176
00:58:57,776 --> 00:59:01,276
and uses powerful pattern
matching to enable you


1177
00:59:01,276 --> 00:59:03,046
to express rich cache
conditions.


1178
00:59:04,586 --> 00:59:07,246
Swift uses the try keyword
but uses in a different way.


1179
00:59:08,216 --> 00:59:10,596
It uses it to mark
calls to methods


1180
00:59:10,596 --> 00:59:11,746
that can produce an error.


1181
00:59:12,686 --> 00:59:15,986
This defines the way an entire
class of errors that happen


1182
00:59:15,986 --> 00:59:18,616
when you have unanticipated
control flow by making


1183
00:59:18,616 --> 00:59:20,546
that control flow
explicit in the code


1184
00:59:20,546 --> 00:59:21,596
so you can reason about it.


1185
00:59:22,966 --> 00:59:25,956
Of course, it's easy to throw
an error, like you'd expect,


1186
00:59:25,956 --> 00:59:30,036
and Swift is the perfect way
to define your own categories


1187
00:59:30,276 --> 00:59:32,866
and families of your own
custom error conditions.


1188
00:59:33,386 --> 00:59:34,226
It works really great.


1189
00:59:35,696 --> 00:59:36,506
Now, we think that Swift --


1190
00:59:36,926 --> 00:59:40,206
error handling in Swift
will be super familiar


1191
00:59:40,206 --> 00:59:41,736
and will feel really natural,


1192
00:59:41,736 --> 00:59:43,876
but it will also greatly
increase the quality


1193
00:59:43,876 --> 00:59:45,146
of Swift code across the board.


1194
00:59:46,566 --> 00:59:48,506
Let's move on now and talk
about our next big feature,


1195
00:59:48,506 --> 00:59:49,486
availability checking.


1196
00:59:50,126 --> 00:59:55,326
So we introduce great
new APIs all the time.


1197
00:59:55,866 --> 00:59:58,526
Often you want to adopt
some of these new APIs


1198
00:59:58,526 --> 01:00:00,826
to get new capabilities in
your applications as well,


1199
01:00:01,266 --> 01:00:02,756
but you can't always
drop support


1200
01:00:02,756 --> 01:00:05,076
for the previous OS
X or iOS release.


1201
01:00:05,986 --> 01:00:09,806
Now, this brings a challenge
because some symbols you want


1202
01:00:09,806 --> 01:00:11,626
to use are unconditionally
available,


1203
01:00:12,376 --> 01:00:14,566
where other symbols are
conditionally available


1204
01:00:15,156 --> 01:00:18,356
depending on the OS that your
app is running on in the field.


1205
01:00:19,476 --> 01:00:21,156
With Swift 2, handling
this is a breeze.


1206
01:00:22,066 --> 01:00:24,536
Now if you try to use a symbol
that's conditionally available


1207
01:00:24,536 --> 01:00:25,406
without checking for it,


1208
01:00:25,686 --> 01:00:27,276
the compiler will
produce an error message,


1209
01:00:27,276 --> 01:00:28,566
so you can't mess it up.


1210
01:00:29,476 --> 01:00:30,686
And Xcode goes even farther


1211
01:00:30,686 --> 01:00:32,796
by giving you several
great ways to handle this.


1212
01:00:33,416 --> 01:00:36,506
The first is you can use the
new "if available" statement


1213
01:00:36,806 --> 01:00:39,176
to add a fine-grain check
right where you need it.


1214
01:00:40,516 --> 01:00:45,776
[ Applause ]


1215
01:00:46,276 --> 01:00:48,306
But I think even
better than that is


1216
01:00:48,306 --> 01:00:53,246
that you can also mark an entire
method or even an entire class


1217
01:00:53,246 --> 01:00:55,636
as dependent on new OS features.


1218
01:00:56,026 --> 01:00:58,086
This eliminates the need
to do fine-grain checks


1219
01:00:58,346 --> 01:01:00,676
and directly expresses
many common situations


1220
01:01:00,676 --> 01:01:01,696
that you will have in your code.


1221
01:01:02,146 --> 01:01:04,646
It's a great solution that
works really well together.


1222
01:01:05,046 --> 01:01:06,506
Now, the error handling features


1223
01:01:06,506 --> 01:01:07,946
and the availability
checking features


1224
01:01:07,946 --> 01:01:10,866
of Swift 2 are two great
ways to make it easier


1225
01:01:10,866 --> 01:01:12,016
to write correct code.


1226
01:01:12,996 --> 01:01:16,186
But, of course, we want your
code to be beautiful as well.


1227
01:01:17,106 --> 01:01:20,656
So we've done several great
changes in Swift 2 to help this.


1228
01:01:20,886 --> 01:01:22,486
Swift 1 introduced a number


1229
01:01:22,486 --> 01:01:24,716
of really powerful
global generic functions


1230
01:01:25,146 --> 01:01:28,236
to do powerful things
with algorithms.


1231
01:01:28,736 --> 01:01:30,736
[Laughter]


1232
01:01:31,236 --> 01:01:32,476
Powerful and wonderful.


1233
01:01:32,846 --> 01:01:35,596
The problem is these were
not always beautiful to use.


1234
01:01:36,036 --> 01:01:38,746
Let's say I have a collection of
numbers, I want to scale them up


1235
01:01:38,746 --> 01:01:39,906
and drop some of the results.


1236
01:01:40,406 --> 01:01:42,296
With Swift 2, this is easy,


1237
01:01:42,766 --> 01:01:45,346
but writing it requires
rearranging a lot of code,


1238
01:01:45,926 --> 01:01:48,906
and when you look at it, you
have to read it inside out,


1239
01:01:48,906 --> 01:01:50,416
which makes it difficult
to reason about.


1240
01:01:50,856 --> 01:01:53,356
Swift 2 introduces a new
language procedure called


1241
01:01:53,406 --> 01:01:54,346
protocol extensions.


1242
01:01:55,346 --> 01:01:56,636
With protocol extensions,


1243
01:01:57,056 --> 01:02:00,216
we can now recast these
global functions as methods,


1244
01:02:00,306 --> 01:02:01,936
the way they should
have been all along.


1245
01:02:03,146 --> 01:02:05,666
This means that the new code
that you write is beautiful.


1246
01:02:05,666 --> 01:02:07,436
It's simple to write,
and it's simple to read.


1247
01:02:08,016 --> 01:02:15,006
[ Applause ]


1248
01:02:15,506 --> 01:02:17,346
Let's talk about early exits.


1249
01:02:18,496 --> 01:02:21,086
It's very common to want to exit
a scope early for some reason,


1250
01:02:21,216 --> 01:02:23,216
so maybe you have a method
that takes a parameter


1251
01:02:23,486 --> 01:02:26,076
that could be nil, and if
it's nil it doesn't want


1252
01:02:26,076 --> 01:02:26,456
to do anything.


1253
01:02:26,616 --> 01:02:29,676
Well, the "if let" statement
gives you a very familiar,


1254
01:02:29,676 --> 01:02:32,166
comfortable, and great way
to check these conditions,


1255
01:02:32,356 --> 01:02:36,366
but it requires you to indent
all your code an extra level.


1256
01:02:36,366 --> 01:02:39,146
To solve this problem, we have
introduced a new guard statement


1257
01:02:39,146 --> 01:02:40,556
that allows you to
check a condition


1258
01:02:40,556 --> 01:02:41,916
and then bail out early.


1259
01:02:41,916 --> 01:02:44,516
It allows you to write
nice straight-line code


1260
01:02:44,516 --> 01:02:45,956
without the excess indentation.


1261
01:02:47,516 --> 01:02:52,756
[ Applause ]


1262
01:02:53,256 --> 01:02:54,886
Next, a huge component


1263
01:02:54,886 --> 01:02:57,616
of how Swift feels is how
well it works with Cocoa.


1264
01:02:58,846 --> 01:03:00,626
But with a plain
Objective-C API,


1265
01:03:01,156 --> 01:03:03,426
the Swift compiler
has no idea whether


1266
01:03:03,426 --> 01:03:04,766
or not a pointer is nullable


1267
01:03:04,766 --> 01:03:06,666
or what the element types
of a collection are.


1268
01:03:07,886 --> 01:03:10,656
We solve this by introducing
new features subjective C,


1269
01:03:10,656 --> 01:03:13,306
including the ability to express
nullability for pointer types,


1270
01:03:13,806 --> 01:03:19,606
and in Xcode 7, we introduced an
entirely new first class generic


1271
01:03:19,606 --> 01:03:23,316
system to Objective-C
that allows you


1272
01:03:23,356 --> 01:03:24,976
to express element types


1273
01:03:24,976 --> 01:03:27,236
and many other things
right in Objective-C.


1274
01:03:29,016 --> 01:03:33,646
[ Applause ]


1275
01:03:34,146 --> 01:03:37,086
Through the adoption of this and
a whole bunch of other features,


1276
01:03:37,466 --> 01:03:39,066
Cocoa is feeling quite swift.


1277
01:03:40,856 --> 01:03:42,506
Finally, let's talk about Xcode.


1278
01:03:43,556 --> 01:03:48,716
Xcode 7 introduces a
revamped Swift migrator.


1279
01:03:49,436 --> 01:03:52,376
It automatically will move your
Swift 1 code to Swift 2 syntax,


1280
01:03:52,656 --> 01:03:54,836
including adoption of the
new error handling model.


1281
01:03:55,596 --> 01:03:58,166
As we continue to evolve the
Swift language going forward,


1282
01:03:58,356 --> 01:04:00,476
we will keep moving the
migrator forward to match.


1283
01:04:01,946 --> 01:04:04,326
Next, let's talk
about header files.


1284
01:04:05,976 --> 01:04:09,496
But wait. Header files and not
having header files are a huge


1285
01:04:09,536 --> 01:04:10,826
feature of Swift; right?


1286
01:04:11,516 --> 01:04:14,016
The problem is, is that
sometimes you actually do want


1287
01:04:14,016 --> 01:04:16,206
to skim a bunch of code
to understand what it does


1288
01:04:16,206 --> 01:04:19,406
at a glance, and all the
implementation details get


1289
01:04:19,486 --> 01:04:20,006
in the way.


1290
01:04:21,236 --> 01:04:23,246
Well, Xcode has solved
this problem


1291
01:04:23,246 --> 01:04:24,966
by introducing a new
Assistant editor,


1292
01:04:25,256 --> 01:04:26,916
which gives you a
header file-like view


1293
01:04:26,916 --> 01:04:28,626
of an arbitrary Swift
source file.


1294
01:04:29,396 --> 01:04:31,126
This gives you all the
skimmability advantages


1295
01:04:31,126 --> 01:04:33,756
of a header file without the
maintenance burden of having


1296
01:04:33,756 --> 01:04:35,996
to write, maintain,
and edit it yourself.


1297
01:04:37,066 --> 01:04:37,616
That's great.


1298
01:04:39,476 --> 01:04:43,946
[ Applause ]


1299
01:04:44,446 --> 01:04:45,766
Next, rich comments.


1300
01:04:46,886 --> 01:04:50,646
Xcode allows you to write
beautiful Swift Playgrounds


1301
01:04:50,916 --> 01:04:54,506
by writing rich comments
directly into the Xcode editor.


1302
01:04:55,526 --> 01:04:58,876
These rich comments use the
very popular Markdown syntax,


1303
01:04:59,226 --> 01:05:00,646
and now we've brought
in the syntax


1304
01:05:00,896 --> 01:05:02,546
to documentation
comments as well.


1305
01:05:03,516 --> 01:05:06,096
We've even added support for new
features, like in-line images


1306
01:05:06,096 --> 01:05:08,666
and links, giving you a
great, consistent experience


1307
01:05:08,666 --> 01:05:10,416
between Playgrounds
and doc comments.


1308
01:05:11,486 --> 01:05:11,906
Finally --


1309
01:05:12,676 --> 01:05:16,046
[ Applause ]


1310
01:05:16,546 --> 01:05:18,386
-- finally, let's talk about
Playgrounds themselves.


1311
01:05:19,066 --> 01:05:21,086
Playgrounds are very
important to us.


1312
01:05:21,566 --> 01:05:23,386
We know that they are a great
way to experiment with API


1313
01:05:23,386 --> 01:05:25,856
and with the Swift
program language itself.


1314
01:05:26,166 --> 01:05:29,386
But we think that Playgrounds
can be a great way for teaching


1315
01:05:29,386 --> 01:05:30,756
and learning programming
as well.


1316
01:05:30,966 --> 01:05:32,726
And so we have been
adding a number of features


1317
01:05:32,726 --> 01:05:35,386
to Playgrounds, including
most recently support


1318
01:05:35,386 --> 01:05:37,086
for multiple pages
within a Playground.


1319
01:05:38,156 --> 01:05:41,446
To show you this and more, I'd
like to invite up Max Drukman.


1320
01:05:43,016 --> 01:05:46,546
[ Applause ]


1321
01:05:47,046 --> 01:05:47,556
>> MAX DRUKMAN: Thanks, Chris.


1322
01:05:48,546 --> 01:05:51,436
Today I'd like to show you
how easy it is to learn


1323
01:05:51,646 --> 01:05:54,826
and to teach using
Playgrounds in Xcode 7.


1324
01:05:55,366 --> 01:06:00,406
Let's start off with a
playground that I am developing


1325
01:06:00,406 --> 01:06:04,146
to teach students about some
of Apple's great graphics APIs,


1326
01:06:05,486 --> 01:06:07,986
and in this section,
I am introducing them


1327
01:06:08,046 --> 01:06:10,706
to a brand-new one, GameplayKit.


1328
01:06:12,126 --> 01:06:14,526
As you Playground says,
GameplayKit is used


1329
01:06:14,526 --> 01:06:17,236
to develop the mechanics
that drive your gameplay.


1330
01:06:17,736 --> 01:06:21,616
We will see a little bit
more of that in a minute.


1331
01:06:21,766 --> 01:06:25,316
This Playground uses a
car chase visualization


1332
01:06:25,316 --> 01:06:28,086
to demonstrate some of the
GameplayKit capabilities,


1333
01:06:28,866 --> 01:06:30,616
and I have created
this Playground


1334
01:06:30,616 --> 01:06:35,456
so that my students have the
ability to edit the bad guy cars


1335
01:06:36,486 --> 01:06:39,086
by tweaking these three
Sprite Node variables.


1336
01:06:39,576 --> 01:06:44,646
Now, Playgrounds have always had
the ability to show you results


1337
01:06:44,646 --> 01:06:45,896
for each line of code.


1338
01:06:46,546 --> 01:06:50,376
This year, we added the
ability to add them in line.


1339
01:06:55,276 --> 01:06:59,976
So now I can start by editing my
Playground the way my students


1340
01:06:59,976 --> 01:07:02,666
will, by changing the values


1341
01:07:03,386 --> 01:07:05,296
to get a different
look to the bad guy.


1342
01:07:06,686 --> 01:07:08,686
And you can see that
as I make my edits,


1343
01:07:09,176 --> 01:07:14,936
the changes are updated live.


1344
01:07:15,006 --> 01:07:15,986
Now that's a bad guy car.


1345
01:07:18,096 --> 01:07:19,926
[Laughter] Down here,
I am asking my students


1346
01:07:20,216 --> 01:07:23,686
to write a little bit of
code to put the pieces


1347
01:07:23,756 --> 01:07:26,626
of the bad guy together
into one Sprite.


1348
01:07:27,996 --> 01:07:29,756
So now as I write that code,


1349
01:07:30,356 --> 01:07:36,876
it's going to assemble my bad
guy, and now I am ready to go.


1350
01:07:37,996 --> 01:07:39,336
That's it for the setup.


1351
01:07:39,576 --> 01:07:41,516
Now it's time to move
on to the main event,


1352
01:07:41,906 --> 01:07:43,726
which is making stuff move.


1353
01:07:44,366 --> 01:07:46,256
Which I have on another page.


1354
01:07:47,326 --> 01:07:50,306
Now, pages are a great way
to divide up your Playgrounds


1355
01:07:50,556 --> 01:07:52,616
into subtopics, kind
of like a book.


1356
01:07:53,706 --> 01:07:57,456
You can navigate to pages using
the handy navigation links


1357
01:07:57,456 --> 01:07:58,546
at the bottom of the page.


1358
01:07:59,716 --> 01:08:00,836
You can use the jump bar.


1359
01:08:02,386 --> 01:08:04,166
And of course, the navigator.


1360
01:08:05,316 --> 01:08:07,186
Here are all the pages
in my Playground.


1361
01:08:08,036 --> 01:08:12,676
Now, each page can have its
own sources and resources,


1362
01:08:13,006 --> 01:08:15,946
so you can factor your
Playgrounds exactly the way


1363
01:08:15,946 --> 01:08:16,496
you want.


1364
01:08:16,946 --> 01:08:19,576
Let's check out the next page.


1365
01:08:19,996 --> 01:08:25,756
I am going to put away
the navigator for now.


1366
01:08:25,986 --> 01:08:27,626
So this page talks


1367
01:08:27,626 --> 01:08:30,706
about GameplayKit's
flocking behaviors.


1368
01:08:31,336 --> 01:08:34,026
Now, flocking is what's
going to take the bad guys


1369
01:08:34,246 --> 01:08:36,185
and make them move as a unit.


1370
01:08:36,805 --> 01:08:39,796
Now, without any further ado,


1371
01:08:40,145 --> 01:08:43,106
I am going to open
Xcode's timeline Assistant


1372
01:08:43,816 --> 01:08:46,116
and let's meet the flockers.


1373
01:08:46,636 --> 01:08:50,466
Okay. Here are all my evil


1374
01:08:50,466 --> 01:08:53,826
but colorful bad guys tracing
our intrepid truck-driving hero.


1375
01:08:53,826 --> 01:08:56,946
But you can see they are kind
of driving all over the place.


1376
01:08:57,876 --> 01:08:59,305
They are a flocking disaster.


1377
01:08:59,866 --> 01:09:02,666
[Laughter] Let's see
if we can fix that.


1378
01:09:03,816 --> 01:09:07,136
So there are several parameters
that you can adjust in order


1379
01:09:07,136 --> 01:09:08,845
to govern the flocking behavior.


1380
01:09:09,435 --> 01:09:11,116
Here is an interesting
one, cohesion,


1381
01:09:11,765 --> 01:09:15,676
which governs how much the bad
guys want to stick together.


1382
01:09:16,185 --> 01:09:17,916
I can just play around
with that value


1383
01:09:18,305 --> 01:09:20,356
and see immediately
what the effect is.


1384
01:09:21,395 --> 01:09:23,376
That's a little bit
too much cohesion,


1385
01:09:23,376 --> 01:09:24,746
so I think I will
back that one off.


1386
01:09:29,595 --> 01:09:31,876
That's a little better
in terms of spacing,


1387
01:09:31,876 --> 01:09:35,426
but they're still not quite
as goal-oriented as I'd like,


1388
01:09:36,026 --> 01:09:38,536
so I am going to play
with the seek parameter,


1389
01:09:39,876 --> 01:09:42,036
and give that a different
value and see


1390
01:09:42,036 --> 01:09:44,836
if I can get a good
flock going here.


1391
01:09:46,296 --> 01:09:46,996
All right.


1392
01:09:48,426 --> 01:09:49,216
Now they're flocked.


1393
01:09:50,395 --> 01:09:54,636
So now I know what kind
of range of values I want


1394
01:09:54,636 --> 01:09:56,426
to tell my students
to play with.


1395
01:09:56,936 --> 01:10:01,376
I am going to put away the
assistant, and I am going


1396
01:10:01,376 --> 01:10:06,026
to switch the editor
to be in raw markup.


1397
01:10:07,156 --> 01:10:10,466
So now I can edit the prose


1398
01:10:10,466 --> 01:10:13,446
of my Playground using
familiar Markdown syntax.


1399
01:10:14,606 --> 01:10:18,716
And I can go back down
here to the seek parameter,


1400
01:10:19,346 --> 01:10:23,686
and I can add a little bit of
extra prose to tell my students


1401
01:10:23,686 --> 01:10:25,316
to play around with
these values.


1402
01:10:25,786 --> 01:10:30,736
I can even come up here
and add some branding


1403
01:10:30,916 --> 01:10:34,026
in the form of an icon.


1404
01:10:35,186 --> 01:10:38,536
And now whenever anyone asks
me if I know about flocking,


1405
01:10:38,536 --> 01:10:40,626
I say I wrote the flocking book.


1406
01:10:40,836 --> 01:10:42,836
[Laughter]


1407
01:10:43,046 --> 01:10:43,356
Thank you.


1408
01:10:43,356 --> 01:10:44,696
You are very kind.


1409
01:10:45,676 --> 01:10:49,976
[ Applause ]


1410
01:10:50,476 --> 01:10:53,526
These are just a few of the
authoring features we've added


1411
01:10:53,526 --> 01:10:55,046
to Playgrounds in Xcode 7.


1412
01:10:55,546 --> 01:10:57,116
Can't wait to see what
you build with them.


1413
01:10:57,576 --> 01:11:00,666
And now, to tell you about
some more great Xcode features,


1414
01:11:00,906 --> 01:11:02,906
I'd like to invite
up Matthew Firlik.


1415
01:11:04,476 --> 01:11:09,616
[ Applause ]


1416
01:11:10,116 --> 01:11:13,036
>> MATTHEW FIRLIK:
Thank you, Max.


1417
01:11:13,216 --> 01:11:17,336
Alongside the new releases
of watchOS, iOS, and OS X,


1418
01:11:17,746 --> 01:11:20,216
we are excited to
bring you Xcode 7.


1419
01:11:21,296 --> 01:11:25,096
This new release includes
features and support for all


1420
01:11:25,096 --> 01:11:28,466
of our platforms, and
the unique experience


1421
01:11:28,466 --> 01:11:31,396
of each platform has been
integrated into the tools


1422
01:11:31,546 --> 01:11:34,566
to allow you to target and
deliver your applications


1423
01:11:34,916 --> 01:11:36,586
to all of our devices.


1424
01:11:37,106 --> 01:11:40,206
That unique experience is
where I'd like to start today,


1425
01:11:40,516 --> 01:11:42,696
with our design tool
Interface Builder.


1426
01:11:43,456 --> 01:11:45,866
And first up is a new
way for you to lay


1427
01:11:45,866 --> 01:11:48,306
out your applications
called stack view.


1428
01:11:49,016 --> 01:11:53,456
[ Applause ]


1429
01:11:53,956 --> 01:11:56,716
With stack view, you can
design your applications using


1430
01:11:56,716 --> 01:11:58,806
horizontal and vertical stacks.


1431
01:11:59,506 --> 01:12:01,246
You start by selecting
an orientation


1432
01:12:01,586 --> 01:12:02,596
and add your controls.


1433
01:12:03,576 --> 01:12:04,936
With each control that you add,


1434
01:12:05,006 --> 01:12:08,366
stack view automatically
adjusts sizing and positioning


1435
01:12:09,066 --> 01:12:10,836
to give you just the right look.


1436
01:12:12,246 --> 01:12:15,156
Stack views nest
beautifully, and they allow you


1437
01:12:15,156 --> 01:12:16,396
to change orientations,


1438
01:12:16,396 --> 01:12:19,036
so you can get the
precise layout you want.


1439
01:12:20,906 --> 01:12:23,306
Now, we've built stack
view on top of autolayout,


1440
01:12:23,546 --> 01:12:25,876
and it handles all the
constraints for you.


1441
01:12:26,906 --> 01:12:30,566
Zero constraints gives you
control over alignment, spaces,


1442
01:12:30,786 --> 01:12:32,386
and distribution in the stack.


1443
01:12:33,406 --> 01:12:36,716
And we've made stack view
flexible as well, allowing you


1444
01:12:36,716 --> 01:12:37,856
to play with your interface


1445
01:12:38,196 --> 01:12:40,196
in Interface Builder
and at runtime.


1446
01:12:41,846 --> 01:12:45,006
When you add controls into a
stack view, you can reorder them


1447
01:12:45,166 --> 01:12:48,676
to try out different layouts
and, perhaps best of all,


1448
01:12:49,006 --> 01:12:50,506
when you hide views at runtime,


1449
01:12:51,026 --> 01:12:53,096
stack view automatically
adjusts.


1450
01:12:54,516 --> 01:13:00,006
[ Applause ]


1451
01:13:00,506 --> 01:13:03,296
So stack view, a new way in
Interface Builder for you


1452
01:13:03,296 --> 01:13:05,516
to get the precise
layout you want.


1453
01:13:06,476 --> 01:13:08,916
Next up are Storyboard
references.


1454
01:13:09,646 --> 01:13:13,716
With storyboards, you can
create and design scenes


1455
01:13:13,806 --> 01:13:15,666
and connect them
together with zero code


1456
01:13:15,916 --> 01:13:17,786
to make complete
user interfaces.


1457
01:13:19,036 --> 01:13:21,626
Now, knowing that your scenes
and the interfaces evolve


1458
01:13:21,626 --> 01:13:23,386
and become a little
bit more complex,


1459
01:13:23,676 --> 01:13:25,436
we wanted to make
this easy to manage.


1460
01:13:26,136 --> 01:13:29,266
Storyboard references
allow you to take a section


1461
01:13:29,266 --> 01:13:32,676
of your interface and move it
to a separate storyboard file,


1462
01:13:33,026 --> 01:13:36,116
continuing to make connections
to and from the scene.


1463
01:13:37,516 --> 01:13:43,086
[ Applause ]


1464
01:13:43,586 --> 01:13:46,426
With storyboard references, you
can keep your interfaces focused


1465
01:13:46,726 --> 01:13:49,616
and modular, the same way you
do as your application code,


1466
01:13:50,056 --> 01:13:52,906
and still easily design
your application flow.


1467
01:13:53,506 --> 01:13:58,316
Now, equally important
to the flow and layout


1468
01:13:58,316 --> 01:14:00,566
of your application is the look.


1469
01:14:01,346 --> 01:14:02,116
And in this release,


1470
01:14:02,116 --> 01:14:04,446
we are making Interface
Builder something to see.


1471
01:14:04,496 --> 01:14:08,856
In an upcoming scene,
you will see more of iOS


1472
01:14:08,856 --> 01:14:11,206
and OS X's visualizations
brought right


1473
01:14:11,456 --> 01:14:13,836
into Interface Builder.


1474
01:14:13,966 --> 01:14:17,106
Blurs and shadows will
render inside of the canvas.


1475
01:14:18,596 --> 01:14:21,526
Vibrancy will become a standard
part of the presentation.


1476
01:14:22,896 --> 01:14:26,536
And your own designable controls
can present masking and shadows


1477
01:14:26,686 --> 01:14:29,226
that compose with other
views in your scene.


1478
01:14:30,446 --> 01:14:34,366
And the combination of these
visualizations alongside our


1479
01:14:34,366 --> 01:14:37,356
preview editors, which allow
you to further refine the look


1480
01:14:37,666 --> 01:14:40,196
and layout of your interface
for specific devices,


1481
01:14:40,836 --> 01:14:42,456
means that now, more than ever,


1482
01:14:42,806 --> 01:14:45,546
you can design your interfaces
right in Interface Builder


1483
01:14:45,946 --> 01:14:48,376
and see what your users
will on their devices.


1484
01:14:50,476 --> 01:14:55,956
[ Applause ]


1485
01:14:56,456 --> 01:15:00,246
Another aspect of building your
applications is managing assets,


1486
01:15:00,786 --> 01:15:03,066
and Xcode includes tools
to work with the new


1487
01:15:03,316 --> 01:15:04,636
On Demand Resource APIs.


1488
01:15:05,646 --> 01:15:09,156
With Xcode 7, you can tag assets


1489
01:15:09,156 --> 01:15:10,826
and files throughout
your project


1490
01:15:11,466 --> 01:15:13,486
to be downloaded
and used on demand.


1491
01:15:14,576 --> 01:15:16,916
Each tag represents a
collection of resources,


1492
01:15:17,216 --> 01:15:18,576
and we call these a pack.


1493
01:15:19,676 --> 01:15:23,266
And you can apply multiple tags
to any individual resource,


1494
01:15:23,446 --> 01:15:24,976
allowing you to use
that resource


1495
01:15:25,186 --> 01:15:26,006
in different situations.


1496
01:15:27,276 --> 01:15:29,936
To help you manage
your tagged resources,


1497
01:15:30,236 --> 01:15:33,276
Xcode includes an overview of
your tags in the Project Editor.


1498
01:15:34,276 --> 01:15:37,126
Here you can easily add,
remove, and rename tags.


1499
01:15:37,766 --> 01:15:39,266
You can change the
pack contents.


1500
01:15:39,756 --> 01:15:41,966
And you can also
configure various aspects


1501
01:15:41,966 --> 01:15:44,516
of On Demand Resources,
such as the download order


1502
01:15:44,846 --> 01:15:46,006
and the download priority.


1503
01:15:46,586 --> 01:15:49,236
When you build your
applications,


1504
01:15:49,506 --> 01:15:51,976
your tagged assets are
automatically assembled


1505
01:15:52,036 --> 01:15:53,216
into resource packs.


1506
01:15:53,826 --> 01:15:57,636
You just need to tag your
assets and you are ready to go.


1507
01:15:57,876 --> 01:15:59,536
When you deploy your
applications,


1508
01:15:59,826 --> 01:16:02,466
your On Demand Resources will
be hosted by the App Store.


1509
01:16:03,516 --> 01:16:05,806
While you are debugging,
Xcode will host your


1510
01:16:05,806 --> 01:16:08,706
On Demand Resources on
your Mac and stream them


1511
01:16:08,706 --> 01:16:10,356
down to your devices on demand


1512
01:16:10,626 --> 01:16:12,476
to simulate the Store
download behavior.


1513
01:16:13,806 --> 01:16:16,416
And for those of you using
Xcode's continuous integration,


1514
01:16:16,876 --> 01:16:19,956
your bots will build and host
your On Demand Resources,


1515
01:16:19,956 --> 01:16:24,996
so you can easily test your apps
over the air amongst your team.


1516
01:16:25,226 --> 01:16:29,026
And finally, to help
you track your packs,


1517
01:16:29,616 --> 01:16:32,516
the debug gauges will show
you the progress and status


1518
01:16:32,556 --> 01:16:35,146
of all your On Demand Resources
while you are debugging.


1519
01:16:36,546 --> 01:16:39,606
So the combination of all these
tools makes it really easy


1520
01:16:39,606 --> 01:16:43,296
for you to adopt On Demand
Resources in your apps.


1521
01:16:45,456 --> 01:16:49,756
Xcode 7 also has some great new
debugging and profiling tools


1522
01:16:49,756 --> 01:16:53,026
to help you further enhance the
quality of your applications.


1523
01:16:54,416 --> 01:16:57,776
Sebastien mentioned earlier
our focus on battery life.


1524
01:16:58,526 --> 01:17:00,826
Getting the most out of
your devices and getting


1525
01:17:00,826 --> 01:17:03,066
through the day on a
charge is very important.


1526
01:17:03,656 --> 01:17:05,106
So we are making it easy for you


1527
01:17:05,106 --> 01:17:07,366
to track the energy use
of your application.


1528
01:17:08,716 --> 01:17:12,256
The new Energy gauge for
iOS will show you CPU usage,


1529
01:17:12,746 --> 01:17:15,866
calls to networking APIs
and location services,


1530
01:17:16,316 --> 01:17:18,566
and also show you
your apps' transitions


1531
01:17:18,716 --> 01:17:20,756
from foregrounds to
background states.


1532
01:17:21,786 --> 01:17:24,576
And as with our other debugging
gauges, you can gain insight


1533
01:17:24,636 --> 01:17:27,036
into the behavior of
your application and,


1534
01:17:27,036 --> 01:17:28,216
when you need more information,


1535
01:17:28,556 --> 01:17:31,556
dive into Instruments
for all the details.


1536
01:17:32,796 --> 01:17:35,576
And speaking of which,
Instruments has been updated


1537
01:17:35,576 --> 01:17:37,006
to be better than ever.


1538
01:17:38,036 --> 01:17:40,916
The track view is now more
compact and makes it easier


1539
01:17:40,916 --> 01:17:44,056
to visualize your data
with new fluid gestures.


1540
01:17:45,296 --> 01:17:48,446
We also have a number of updated
instruments and new instruments


1541
01:17:48,446 --> 01:17:51,356
for you to use, such as
core location profiling


1542
01:17:51,666 --> 01:17:54,326
and a new GPU system trace.


1543
01:17:55,646 --> 01:17:56,976
And in this release,


1544
01:17:57,026 --> 01:17:59,636
we are integrating
Clang's Address Sanitizer


1545
01:17:59,856 --> 01:18:01,066
into our debugging workflow.


1546
01:18:02,306 --> 01:18:05,226
Address Sanitizer is a
memory error detection system


1547
01:18:05,476 --> 01:18:06,716
for C-based languages.


1548
01:18:07,936 --> 01:18:11,636
When enabled, Xcode will monitor
memory used by your application


1549
01:18:11,916 --> 01:18:15,346
and can detect common issues,
such as buffer overruns.


1550
01:18:16,396 --> 01:18:18,506
When these are detected,
Xcode alerts you


1551
01:18:18,666 --> 01:18:21,716
and provides essential
details to help you diagnose


1552
01:18:21,996 --> 01:18:23,066
and debug the problem.


1553
01:18:24,076 --> 01:18:28,356
And unlike other similar tools,
Address Sanitizer is fast,


1554
01:18:29,286 --> 01:18:31,386
so fast you can use it with all


1555
01:18:31,386 --> 01:18:33,046
of your interactive
applications.


1556
01:18:33,566 --> 01:18:38,776
But even with great
debugging and profiling tools,


1557
01:18:39,096 --> 01:18:40,336
sometimes -- sometimes --


1558
01:18:40,796 --> 01:18:43,546
bugs get out and will cause
crashes for your users.


1559
01:18:44,296 --> 01:18:45,846
To help you get these
fixed quickly,


1560
01:18:46,166 --> 01:18:49,406
Xcode has integrated
support for crash logs.


1561
01:18:50,816 --> 01:18:53,526
For your apps submitted to --


1562
01:18:53,526 --> 01:18:54,666
[ Applause ]


1563
01:18:54,666 --> 01:18:57,596
-- for your apps submitted to
TestFlight and the App Store,


1564
01:18:57,826 --> 01:19:01,386
Xcode will provide symbolicated
crashes for each submission.


1565
01:19:02,936 --> 01:19:05,496
The integrated view will
provide an updated list


1566
01:19:05,586 --> 01:19:09,256
of the top crashes for your
apps, showing you the backtrace,


1567
01:19:09,726 --> 01:19:13,436
details about the crash, and
charts of recent occurrences.


1568
01:19:14,486 --> 01:19:16,646
You can retitle the
crashes for easier tracking,


1569
01:19:17,236 --> 01:19:19,966
you can add notes to yourself,
and you can mark the crash


1570
01:19:19,966 --> 01:19:21,946
as resolved once
you fix the issue.


1571
01:19:23,556 --> 01:19:26,406
Now, when reviewing a backtrace,
you want to make it easy,


1572
01:19:27,006 --> 01:19:29,336
so Xcode has this
Open In Project button


1573
01:19:29,736 --> 01:19:32,416
that will load the backtrace
into the debug navigator


1574
01:19:32,416 --> 01:19:35,336
in your project, giving you
the very familiar workflow


1575
01:19:35,486 --> 01:19:38,076
to navigate your source
code for the crashing frames


1576
01:19:38,426 --> 01:19:40,006
and find and fix the problem.


1577
01:19:41,516 --> 01:19:48,686
[ Applause ]


1578
01:19:49,186 --> 01:19:51,376
Earlier this spring, we
brought you crash logs


1579
01:19:51,376 --> 01:19:52,926
for your iOS applications.


1580
01:19:53,506 --> 01:19:56,266
Starting today with Xcode
7, you can get crash logs


1581
01:19:56,266 --> 01:19:59,206
for your OS X applications,
and crash logs


1582
01:19:59,206 --> 01:20:01,686
for your watchOS applications
will be coming soon.


1583
01:20:02,896 --> 01:20:06,016
And in this release, we will
also be bringing you crash logs


1584
01:20:06,256 --> 01:20:10,046
for all app extensions on all
platforms, so you can track


1585
01:20:10,096 --> 01:20:11,316
and improve those as well.


1586
01:20:12,516 --> 01:20:17,466
[ Applause ]


1587
01:20:17,966 --> 01:20:20,806
Now, another way to improve your
applications is with testing.


1588
01:20:21,366 --> 01:20:23,106
And we all love testing; right?


1589
01:20:24,236 --> 01:20:26,266
I am going to try that again.


1590
01:20:26,346 --> 01:20:28,086
We all love testing; right?


1591
01:20:28,676 --> 01:20:31,966
[ Cheers and applause ]


1592
01:20:32,466 --> 01:20:34,956
That's good because
testing is an essential part


1593
01:20:35,206 --> 01:20:36,746
to delivering a great
application,


1594
01:20:37,116 --> 01:20:39,366
and we have two big new
additions for you this year.


1595
01:20:40,956 --> 01:20:43,966
The core of our testing solution
is the XE test framework


1596
01:20:44,236 --> 01:20:47,356
and our test navigator, which
combine to provide great ways


1597
01:20:47,356 --> 01:20:49,726
for you to design and
organize your tests.


1598
01:20:50,836 --> 01:20:53,696
Building on top of these, Xcode
has provided a number of ways


1599
01:20:53,696 --> 01:20:54,866
for you to test your
application.


1600
01:20:55,396 --> 01:20:59,066
You can test the correctness
of your APIs and measure


1601
01:20:59,066 --> 01:21:00,816
and track their performance
over time.


1602
01:21:02,176 --> 01:21:04,776
You can evaluate synchronous
and asynchronous behaviors


1603
01:21:04,776 --> 01:21:08,746
in your code, and you can run
your tests locally in Xcode


1604
01:21:09,026 --> 01:21:11,486
and continuously on
your integration bots.


1605
01:21:12,576 --> 01:21:14,156
And all of this combines
together


1606
01:21:14,156 --> 01:21:17,176
to make it a really powerful
unit testing solution.


1607
01:21:18,176 --> 01:21:19,646
But we wanted to
kick it up a notch.


1608
01:21:19,936 --> 01:21:23,366
So this year we are adding
in user interface testing.


1609
01:21:24,516 --> 01:21:31,026
[ Applause ]


1610
01:21:31,526 --> 01:21:33,646
This is built on the
same testing foundation,


1611
01:21:33,906 --> 01:21:35,556
so now you can develop
correctness


1612
01:21:35,716 --> 01:21:38,886
and performance tests that work
through your user interface


1613
01:21:39,146 --> 01:21:41,466
to further extend
your testing coverage.


1614
01:21:42,496 --> 01:21:45,826
And speaking of coverage,
we are adding that as well.


1615
01:21:47,016 --> 01:21:52,286
[ Applause ]


1616
01:21:52,786 --> 01:21:54,606
Code coverage is a
great new way for you


1617
01:21:54,606 --> 01:21:56,316
to evaluate your
testing progress


1618
01:21:56,566 --> 01:21:58,746
and ensure you have
all the tests you need.


1619
01:21:59,736 --> 01:22:01,706
So let's take a quick
look at a demonstration


1620
01:22:01,706 --> 01:22:09,596
of the new UI testing and code
coverage features in Xcode 7.


1621
01:22:10,046 --> 01:22:13,896
So here I have an application my
team and I have been working on.


1622
01:22:13,896 --> 01:22:17,966
It's a SpriteKit game for iOS
and iOS X called Demo Bots.


1623
01:22:18,976 --> 01:22:20,886
As we have been developing
the application,


1624
01:22:20,886 --> 01:22:22,926
we have been working on
tests, and you can see here


1625
01:22:22,926 --> 01:22:25,936
in the test navigator we have
quite a few of our tests.


1626
01:22:26,796 --> 01:22:29,896
It's helpful to know which
area of our code has not


1627
01:22:29,976 --> 01:22:32,426
yet been tested either
because we have not


1628
01:22:32,426 --> 01:22:35,706
yet written the tests or
because our current tests are


1629
01:22:35,706 --> 01:22:36,436
not complete.


1630
01:22:37,996 --> 01:22:40,926
With Xcode 7, this is exactly
the kind of insight you can gain


1631
01:22:40,926 --> 01:22:42,696
about testing with
code coverage.


1632
01:22:44,046 --> 01:22:46,506
Xcode collects coverage
data each time you test,


1633
01:22:47,136 --> 01:22:49,186
so I am going to jump
to the testing report,


1634
01:22:49,766 --> 01:22:51,506
and we'll see there's
a new coverage section.


1635
01:22:53,196 --> 01:22:56,066
Inside of the coverage
section, all of the files


1636
01:22:56,066 --> 01:22:58,706
in my application are
listed with an indicator


1637
01:22:58,706 --> 01:23:00,296
on the right showing
the percentage


1638
01:23:00,296 --> 01:23:02,076
of coverage each file has.


1639
01:23:03,016 --> 01:23:04,776
Now, in this list, I've
sorted it from highest


1640
01:23:04,906 --> 01:23:07,386
to lowest coverage, so
all this might look good.


1641
01:23:07,386 --> 01:23:12,316
As we scroll down, we see I
have some work to do here still.


1642
01:23:12,536 --> 01:23:15,536
For each file in the list,
you can disclose the contents


1643
01:23:15,676 --> 01:23:17,236
and see the coverage
of the methods


1644
01:23:17,236 --> 01:23:19,046
and functions contained therein.


1645
01:23:19,796 --> 01:23:21,066
For the file I've disclosed,


1646
01:23:21,066 --> 01:23:23,696
the first two functions
have 100 percent coverage,


1647
01:23:24,006 --> 01:23:27,716
but the other three
have no coverage at all.


1648
01:23:28,116 --> 01:23:30,546
The report gives you a
good high-level overview


1649
01:23:30,596 --> 01:23:32,916
of the coverage for your
project, but we wanted


1650
01:23:32,916 --> 01:23:35,046
to bring this information
directly to you.


1651
01:23:35,776 --> 01:23:37,716
So we'll see here
when I navigate to one


1652
01:23:37,716 --> 01:23:40,656
of the source files, we bring
the code coverage information


1653
01:23:40,656 --> 01:23:41,836
right into the source editor.


1654
01:23:42,526 --> 01:23:44,666
The darkened areas are
the parts of my code


1655
01:23:44,666 --> 01:23:46,136
that have not yet been tested.


1656
01:23:46,936 --> 01:23:47,636
And this is great.


1657
01:23:47,636 --> 01:23:49,786
It allows me to see
where I need to focus,


1658
01:23:50,616 --> 01:23:52,806
and it also works great
with our assistant editor


1659
01:23:53,216 --> 01:23:56,406
because you can have your source
code and the tests side by side,


1660
01:23:56,756 --> 01:23:59,676
and as you continually test,
get updated information.


1661
01:24:00,316 --> 01:24:04,526
If we go back to the report
and look at the classes


1662
01:24:04,526 --> 01:24:07,926
that were not covered, many of
them are user interface classes.


1663
01:24:08,016 --> 01:24:09,346
They are view controllers
and the like.


1664
01:24:10,186 --> 01:24:11,116
So to help me with that,


1665
01:24:11,116 --> 01:24:13,086
I am going to create
a user interface test.


1666
01:24:14,686 --> 01:24:17,226
I've already set up a user
interface testing bundle


1667
01:24:17,266 --> 01:24:19,816
and class, and so I
will select that here.


1668
01:24:20,876 --> 01:24:23,556
The test I want to write is
testing the options panel


1669
01:24:23,556 --> 01:24:24,086
of our game.


1670
01:24:25,216 --> 01:24:28,866
Now, the new APIs and XE tests
give you the ability to interact


1671
01:24:28,866 --> 01:24:31,966
with user interface elements,
accessing their properties


1672
01:24:32,236 --> 01:24:34,946
and triggering actions, and
it's really easy to write.


1673
01:24:34,946 --> 01:24:39,146
But you know what's actually
easier than writing a UI test?


1674
01:24:39,146 --> 01:24:39,786
Recording one.


1675
01:24:39,856 --> 01:24:41,736
Let me show you how that works.


1676
01:24:42,736 --> 01:24:44,766
I am going to collapse
the project navigator


1677
01:24:44,766 --> 01:24:46,276
to give myself a
little bit more space,


1678
01:24:46,876 --> 01:24:49,596
and with my insertion point in
the test I want to implement,


1679
01:24:50,096 --> 01:24:52,276
I am going to click this
little Record button down here


1680
01:24:52,276 --> 01:24:53,146
at the bottom of the editor.


1681
01:24:53,956 --> 01:24:56,786
You will see when I do this,
Xcode launches my application.


1682
01:24:57,796 --> 01:24:59,766
I want you to pay
attention in the test


1683
01:24:59,766 --> 01:25:00,986
in the upper left-hand corner.


1684
01:25:01,936 --> 01:25:04,086
The first thing I want to do
is click the Options button


1685
01:25:04,086 --> 01:25:06,456
in my application,
and you can see


1686
01:25:06,726 --> 01:25:09,196
that Xcode's recording
inserted the corresponding line


1687
01:25:09,196 --> 01:25:09,866
of testing code.


1688
01:25:10,516 --> 01:25:18,076
[ Applause ]


1689
01:25:18,576 --> 01:25:19,836
You can see it's
pretty simple API.


1690
01:25:20,036 --> 01:25:23,036
It's asking the application
for the window and the button


1691
01:25:23,326 --> 01:25:24,846
and telling it to click.


1692
01:25:25,496 --> 01:25:27,656
For the next piece of my
test here, I want to fill


1693
01:25:27,656 --> 01:25:29,916
out my player name here,
so I will start typing


1694
01:25:29,916 --> 01:25:32,636
in my standard gamer
handle, and you will see here


1695
01:25:32,636 --> 01:25:34,046
that two cool things
are happening.


1696
01:25:34,536 --> 01:25:36,446
One, while I am typing
in the text field,


1697
01:25:36,446 --> 01:25:39,256
the editor is updating
live to show me the values.


1698
01:25:39,686 --> 01:25:40,386
That's pretty cool.


1699
01:25:41,416 --> 01:25:42,666
The other thing that happened is


1700
01:25:42,666 --> 01:25:44,986
that UI recording
noticed I was interacting


1701
01:25:44,986 --> 01:25:47,796
with the same user interface
element more than once,


1702
01:25:48,096 --> 01:25:50,646
and it refactored my test to
create a local variable for it.


1703
01:25:51,416 --> 01:25:54,556
This keeps the tests readable
and means that refactoring


1704
01:25:54,556 --> 01:25:56,976
and reusing this code
later is really easy.


1705
01:25:58,436 --> 01:26:00,666
Let's continue selecting
some options here.


1706
01:26:00,786 --> 01:26:02,066
You'll see that the
test updates.


1707
01:26:02,796 --> 01:26:05,476
For the last element, I want to
select a different robot here,


1708
01:26:05,796 --> 01:26:08,816
so I will click this button
and select the blue robot.


1709
01:26:08,816 --> 01:26:13,446
I will click Done, and go
back and look at my test.


1710
01:26:13,576 --> 01:26:15,716
Just like that recording
was easily able


1711
01:26:15,886 --> 01:26:17,016
to track all of my actions.


1712
01:26:18,006 --> 01:26:20,296
Now a test should probably do
more than just poke things.


1713
01:26:20,296 --> 01:26:22,506
We should probably
validate some values here.


1714
01:26:23,186 --> 01:26:25,866
So before we click the Done
button, let's insert some code


1715
01:26:26,076 --> 01:26:27,756
to check that I have
the right settings.


1716
01:26:29,096 --> 01:26:31,656
I am going to insert a little
bit of code here that gets


1717
01:26:31,656 --> 01:26:34,066
that value of the active
robot from the interface.


1718
01:26:34,246 --> 01:26:35,076
It's in a text field.


1719
01:26:35,386 --> 01:26:38,586
I will compare it to the
value I expected, blue bot.


1720
01:26:40,076 --> 01:26:42,316
With no further ado,
let's run our test.


1721
01:26:42,316 --> 01:26:44,346
I will stand back.


1722
01:26:44,346 --> 01:26:47,236
Here we see it's
updating the values,


1723
01:26:47,546 --> 01:26:48,516
selecting the right robot,


1724
01:26:48,886 --> 01:26:50,986
validating our test,
and our test passes.


1725
01:26:52,476 --> 01:27:00,186
[ Applause ]


1726
01:27:00,686 --> 01:27:03,146
So recording makes writing
UI tests really easy.


1727
01:27:04,536 --> 01:27:07,386
We can look at our tests inside
of Xcode and run them locally,


1728
01:27:07,726 --> 01:27:10,336
and we can also have them run on
our continuous integration bots.


1729
01:27:11,106 --> 01:27:13,726
I have bots set up for both
the iOS and the OS X version


1730
01:27:13,726 --> 01:27:18,176
of the application, and if I
select my iOS version and look


1731
01:27:18,176 --> 01:27:21,066
at my tests, when I filter
down to the failed ones,


1732
01:27:21,066 --> 01:27:22,086
I see something interesting.


1733
01:27:22,896 --> 01:27:26,156
I have four user interface tests
that are passing on an iPhone


1734
01:27:26,486 --> 01:27:29,206
but they are failing on an iPad.


1735
01:27:29,566 --> 01:27:31,936
To make it easy to
diagnose your test failures,


1736
01:27:32,056 --> 01:27:34,626
each test run includes
a transcript


1737
01:27:34,626 --> 01:27:38,276
of all the testing actions that
took place, and I can see these


1738
01:27:38,276 --> 01:27:39,186
by expanding the test.


1739
01:27:39,946 --> 01:27:42,116
Here's a list of all the
actions that took place


1740
01:27:42,276 --> 01:27:43,196
in this test that's
been running.


1741
01:27:44,756 --> 01:27:46,746
Because user interface
tests are visual, though,


1742
01:27:46,746 --> 01:27:48,136
we wanted to go a step further.


1743
01:27:48,646 --> 01:27:51,236
So each one of these actions
includes a screenshot.


1744
01:27:52,186 --> 01:27:54,816
So if I look over at
the passing iPhone test,


1745
01:27:55,076 --> 01:27:57,436
I can get the screenshot
for how the test starts,


1746
01:27:57,726 --> 01:27:58,676
there's the start of our game.


1747
01:27:59,196 --> 01:28:01,556
I can look partway
through at the test.


1748
01:28:02,106 --> 01:28:03,026
Here we've typed a value


1749
01:28:03,026 --> 01:28:04,836
into the text field
with the keyboard up.


1750
01:28:05,476 --> 01:28:07,286
And I can also look at
the very end of the test.


1751
01:28:07,606 --> 01:28:10,586
Here's the state of the UI just
before we click the Done button.


1752
01:28:11,946 --> 01:28:14,416
If I flip over and look
at the tests on the iPad


1753
01:28:14,416 --> 01:28:16,696
and jump all the way
to that last action,


1754
01:28:17,466 --> 01:28:20,406
we can see here's our iPad UI
with all the right settings,


1755
01:28:21,036 --> 01:28:21,846
but there's no Done button.


1756
01:28:22,516 --> 01:28:24,006
Clearly we misconfigured
something in our UI,


1757
01:28:24,006 --> 01:28:26,626
but the screenshot was
able to help us narrow


1758
01:28:26,626 --> 01:28:27,996
that down really quickly.


1759
01:28:29,506 --> 01:28:31,566
So code coverage showed
me where to write tests.


1760
01:28:32,056 --> 01:28:33,636
UI testing and recording
made it easy


1761
01:28:33,636 --> 01:28:34,726
for me to get more coverage.


1762
01:28:34,926 --> 01:28:36,906
And the new testing
reports helped me narrow


1763
01:28:36,906 --> 01:28:37,956
in on my problems.


1764
01:28:38,706 --> 01:28:40,166
That's just a little
bit of code coverage


1765
01:28:40,246 --> 01:28:42,226
and UI testing in Xcode 7.


1766
01:28:43,676 --> 01:28:51,676
[ Applause ]


1767
01:28:52,176 --> 01:28:54,046
User interface testing makes use


1768
01:28:54,046 --> 01:28:56,406
of our systems' accessibility
APIs


1769
01:28:56,666 --> 01:28:58,276
to interact with UI elements.


1770
01:28:58,986 --> 01:29:00,886
This means if you've
already invested


1771
01:29:00,886 --> 01:29:04,086
in making your app accessible,
you've also already invested


1772
01:29:04,086 --> 01:29:05,096
in making it testable.


1773
01:29:06,646 --> 01:29:10,076
UI testing also works great with
UIs designed with size classes


1774
01:29:10,416 --> 01:29:13,096
and localizations, including
right-to-left support,


1775
01:29:13,616 --> 01:29:15,796
which means your
UI tests can scale


1776
01:29:16,086 --> 01:29:19,146
to all presentations of your UI.


1777
01:29:20,096 --> 01:29:23,946
The new APIs -- yes,
you can clap for that.


1778
01:29:24,516 --> 01:29:27,366
[ Applause ]


1779
01:29:27,866 --> 01:29:33,906
The new APIs and XE tests
are available in Swift


1780
01:29:33,976 --> 01:29:34,816
and Objective-C,


1781
01:29:35,236 --> 01:29:37,936
and UI recording will generate
whichever one you are using.


1782
01:29:38,586 --> 01:29:43,066
So these have been some of the
many new features you will find


1783
01:29:43,066 --> 01:29:47,066
in Xcode 7 as you build your
apps for all of our platforms.


1784
01:29:48,516 --> 01:29:55,116
[ Applause ]


1785
01:29:55,616 --> 01:29:58,086
Now, we also have some exciting
new technologies to share


1786
01:29:58,086 --> 01:30:01,206
with you for games and
graphics, and for that I'd


1787
01:30:01,206 --> 01:30:03,466
like to invite my
colleague up, Geoff Stahl.


1788
01:30:04,516 --> 01:30:06,916
[ Applause ]


1789
01:30:07,416 --> 01:30:08,086
>> GEOFF STAHL: Thank
you, Matthew.


1790
01:30:10,096 --> 01:30:13,936
Xcode 7 looks amazing, and I
am really excited to be here


1791
01:30:13,936 --> 01:30:15,256
to talk about games
and graphics.


1792
01:30:15,256 --> 01:30:17,696
It does not seem
like so long ago


1793
01:30:17,696 --> 01:30:22,216
that we were here introducing
our first game-related API Game


1794
01:30:22,286 --> 01:30:23,656
Center or social gaming network.


1795
01:30:24,816 --> 01:30:28,226
Since then, we've been busy
with APIs for key input


1796
01:30:28,226 --> 01:30:31,636
and graphics technologies, like
game controllers, SceneKit,


1797
01:30:31,996 --> 01:30:34,146
SpriteKit, most recently Metal.


1798
01:30:35,606 --> 01:30:39,076
This year, we are introducing a
number of new game technologies,


1799
01:30:39,816 --> 01:30:43,776
including things like Model I/O
for modernizing your graphics;


1800
01:30:44,706 --> 01:30:47,566
ReplayKit for extending
your game's social reach;


1801
01:30:48,396 --> 01:30:51,966
and Game Center for
adding super-smart brains


1802
01:30:52,256 --> 01:30:52,816
to your games.


1803
01:30:53,556 --> 01:30:58,026
Also, we're packaging all of
these together into GameKit,


1804
01:30:58,896 --> 01:31:01,636
so with one include, you
get all this functionality


1805
01:31:01,636 --> 01:31:04,316
at your fingertips,
a great solution,


1806
01:31:04,616 --> 01:31:06,556
great complete solution
for game development


1807
01:31:06,826 --> 01:31:08,076
across our platforms.


1808
01:31:08,576 --> 01:31:11,696
So let's take a look at some
of the new cool features


1809
01:31:11,786 --> 01:31:13,696
in GameKit, starting with Metal.


1810
01:31:14,946 --> 01:31:18,706
So as you know, Metal is a 3D
API we introduced last year


1811
01:31:18,706 --> 01:31:19,286
for iOS.


1812
01:31:19,896 --> 01:31:25,096
We are really excited that this
year we are bringing it to OS X.


1813
01:31:25,096 --> 01:31:28,096
And let's, as a recap,
look at an example we ran


1814
01:31:28,096 --> 01:31:30,456
into just recently of
game development moving


1815
01:31:30,456 --> 01:31:32,106
from OpenGL to Metal.


1816
01:31:33,556 --> 01:31:36,666
So here you have a game
when we started out on --


1817
01:31:36,666 --> 01:31:38,976
running on OpenGL,
and what you notice is


1818
01:31:39,116 --> 01:31:43,596
that OpenGL command processing
is keeping one CPU completely


1819
01:31:43,596 --> 01:31:46,726
saturated, which has pushed the
game play to the second CPU,


1820
01:31:47,136 --> 01:31:49,296
and the GPU is not very busy.


1821
01:31:49,496 --> 01:31:52,946
In fact, in this example, we
saw the GPU was 40 percent idle.


1822
01:31:53,556 --> 01:31:58,606
Moving to Metal, we
drastically reduce the command


1823
01:31:58,606 --> 01:31:59,536
processing time.


1824
01:31:59,846 --> 01:32:02,036
We have an API that you
can program more directly


1825
01:32:02,036 --> 01:32:02,816
to the GPU.


1826
01:32:02,816 --> 01:32:05,526
And if you choose, you can
split your command processing


1827
01:32:05,776 --> 01:32:07,036
across multiple cores.


1828
01:32:07,486 --> 01:32:12,586
In this case, we've unlocked
the full performance of the GPU.


1829
01:32:13,196 --> 01:32:17,196
We've been working with some
third-party developers on Metal


1830
01:32:17,196 --> 01:32:20,466
for OS X, and let's
take a minute


1831
01:32:20,466 --> 01:32:23,506
to see what they've
done on the Mac.


1832
01:32:24,996 --> 01:32:27,496
So it's my pleasure to
introduce David McGavran


1833
01:32:27,656 --> 01:32:30,266
from Adobe Systems up to
show what they've done


1834
01:32:30,396 --> 01:32:31,656
with OS X in Metal.


1835
01:32:32,076 --> 01:32:32,916
David, welcome.


1836
01:32:33,516 --> 01:32:38,046
[ Applause ]


1837
01:32:38,546 --> 01:32:39,046
>> DAVID McGAVRAN:
Thank you very much.


1838
01:32:39,046 --> 01:32:39,546
Thank you.


1839
01:32:39,546 --> 01:32:41,726
Adobe was very excited
when Apple brought iOS


1840
01:32:42,296 --> 01:32:44,166
to Metal's iOS last spring.


1841
01:32:44,726 --> 01:32:47,046
In fact, we have already been
using it to optimize some


1842
01:32:47,046 --> 01:32:50,386
of our popular iOS apps like
Premier Flip and Photoshop Mix


1843
01:32:50,776 --> 01:32:51,816
and seen great results.


1844
01:32:51,816 --> 01:32:55,056
So we were thrilled when Apple
told us they were bringing Metal


1845
01:32:55,406 --> 01:32:55,836
to OS X.


1846
01:32:56,896 --> 01:32:59,456
This way we can share our code
on both of those platforms.


1847
01:33:00,066 --> 01:33:02,086
So today I would like to
show you some of our progress


1848
01:33:02,516 --> 01:33:04,556
with two of our flagship
Mac OS products,


1849
01:33:05,116 --> 01:33:06,346
Illustrator and After Effects.


1850
01:33:07,036 --> 01:33:08,386
Let's take a look.


1851
01:33:15,016 --> 01:33:18,186
So here we are in the current
version of Adobe Illustrator


1852
01:33:18,856 --> 01:33:23,046
with a massive piece of artwork
with over 300,000 points,


1853
01:33:23,516 --> 01:33:25,206
gradients, and blend modes.


1854
01:33:25,206 --> 01:33:29,696
I want to go ahead and do a
zoom on this piece of artwork.


1855
01:33:29,696 --> 01:33:34,886
You are going to notice a bit
of lag as it works its way


1856
01:33:34,886 --> 01:33:36,246
into that complex piece of art.


1857
01:33:37,216 --> 01:33:38,776
We really wanted to see if
we could do something better.


1858
01:33:40,086 --> 01:33:42,656
So with this version, we are
demonstrating what we can do


1859
01:33:42,656 --> 01:33:45,956
with Metal when we take
the entire rendering engine


1860
01:33:46,086 --> 01:33:46,876
and put it on Metal.


1861
01:33:47,436 --> 01:33:49,516
In fact, it was so
performant, they were able


1862
01:33:49,516 --> 01:33:54,266
to demonstrate a brand-new
feature with continuous zoom.


1863
01:33:55,156 --> 01:33:58,506
So here you can see the
results are amazingly different


1864
01:33:59,066 --> 01:34:00,586
when you are looking at
what we can do with Metal.


1865
01:34:01,386 --> 01:34:05,176
In fact, I can zoom all the
way in here extremely far


1866
01:34:07,526 --> 01:34:08,936
until you can actually
read the text.


1867
01:34:10,016 --> 01:34:16,816
[ Applause ]


1868
01:34:17,316 --> 01:34:19,356
So this just drastically
changed the way artists can work


1869
01:34:19,356 --> 01:34:20,026
with our products.


1870
01:34:21,326 --> 01:34:23,166
Now we want to talk
about After Effects.


1871
01:34:23,166 --> 01:34:25,656
So here is a video
from extreme sports


1872
01:34:25,656 --> 01:34:27,356
videographer Devinsupertramp.


1873
01:34:27,866 --> 01:34:29,936
Let's take a quick look at this.


1874
01:34:30,476 --> 01:34:42,506
[ Music ]


1875
01:34:43,006 --> 01:34:43,506
That's pretty fun.


1876
01:34:44,196 --> 01:34:46,376
What we want to do is
take one of those shots


1877
01:34:46,376 --> 01:34:48,486
into After Effects
and add some effects


1878
01:34:48,486 --> 01:34:49,706
into it to make a promo spot.


1879
01:34:50,016 --> 01:34:51,296
So here we are.


1880
01:34:51,296 --> 01:34:54,496
I am going to turn on some
color correction, some ripples,


1881
01:34:54,826 --> 01:34:56,946
and some lens flares,
and go ahead and play


1882
01:34:56,946 --> 01:34:58,116
that back without Metal.


1883
01:34:58,656 --> 01:35:03,396
And you can see while it's
working quite hard on the CPU,


1884
01:35:03,946 --> 01:35:04,886
it's not really giving


1885
01:35:04,886 --> 01:35:06,656
that interactive performance
we'd love to be able


1886
01:35:06,656 --> 01:35:07,996
to give our compositors.


1887
01:35:09,206 --> 01:35:11,636
So we really challenged our
programmers to take a look


1888
01:35:11,636 --> 01:35:13,496
at this and see what
they can do with Metal.


1889
01:35:14,146 --> 01:35:15,416
So in a very short
time, they were able


1890
01:35:15,416 --> 01:35:18,376
to port those three effects
to Metal, and they are going


1891
01:35:18,376 --> 01:35:20,666
to show you a pretty
astounding difference.


1892
01:35:20,666 --> 01:35:22,856
So now I am going to switch
to the same composition,


1893
01:35:23,146 --> 01:35:24,646
but this time those
effects have been replaced


1894
01:35:24,646 --> 01:35:26,676
with the Metal versions, and
I am going to play that back.


1895
01:35:27,546 --> 01:35:29,566
Immediately you are going to
see it's playing in real-time


1896
01:35:30,306 --> 01:35:33,486
without dropping any
frames, and we are seeing


1897
01:35:33,486 --> 01:35:35,926
that in these effects up to
an 8x performance improvement


1898
01:35:36,176 --> 01:35:38,716
and drastically reduced
CPU usage.


1899
01:35:39,466 --> 01:35:42,016
So Adobe is committed
to bringing Metal to all


1900
01:35:42,016 --> 01:35:44,846
of its Mac OS creative
cloud applications,


1901
01:35:45,146 --> 01:35:47,046
such as Illustrator and After
Effects I showed you today,


1902
01:35:47,076 --> 01:35:49,466
as well as Photoshop
and Premier Pro.


1903
01:35:50,076 --> 01:35:51,526
We are very excited to
see what Metal can do


1904
01:35:51,526 --> 01:35:52,586
for our Cloud users.


1905
01:35:52,856 --> 01:35:53,556
Thank you very much.


1906
01:35:54,516 --> 01:35:59,326
[ Applause ]


1907
01:35:59,826 --> 01:36:00,476
>> GEOFF STAHL: David,
thank you.


1908
01:36:00,516 --> 01:36:01,796
That is amazing.


1909
01:36:01,846 --> 01:36:02,756
I agree with Craig.


1910
01:36:02,756 --> 01:36:04,136
It's really interesting to see


1911
01:36:04,136 --> 01:36:07,876
when you can take an interaction
that's not real-time and move it


1912
01:36:07,876 --> 01:36:11,196
to a silky smooth
user interaction.


1913
01:36:11,196 --> 01:36:13,366
But Metal is not just
for applications.


1914
01:36:13,676 --> 01:36:15,056
As we spoke about this morning,


1915
01:36:15,616 --> 01:36:18,946
we are bringing key graphics
technologies for both OS X


1916
01:36:18,946 --> 01:36:22,166
and iOS onto the Metal API.


1917
01:36:22,166 --> 01:36:25,916
Up to now, technologies
like core animation


1918
01:36:26,296 --> 01:36:28,116
and our hardware
accelerated Core Graphics,


1919
01:36:28,406 --> 01:36:31,696
PDF and Safari page rendering,
have been on top of OpenGL.


1920
01:36:32,416 --> 01:36:37,376
That meant the CPU was very
busy feeding the GPU commands.


1921
01:36:37,916 --> 01:36:41,676
With Metal, we get improved
efficiency and performance


1922
01:36:41,916 --> 01:36:46,166
for critical user-level tasks.


1923
01:36:46,306 --> 01:36:54,956
Also, we didn't want to just
increase the system performance;


1924
01:36:54,956 --> 01:36:58,686
we wanted to actually make
it really easy for all


1925
01:36:58,686 --> 01:36:59,956
of you to adopt Metal.


1926
01:37:00,026 --> 01:37:01,806
So we are introducing MetalKit.


1927
01:37:02,676 --> 01:37:04,506
So MetalKit is your
gateway to Metal.


1928
01:37:04,846 --> 01:37:06,676
It does the heavy
lifting for you.


1929
01:37:07,186 --> 01:37:09,456
MetalKit can do anything from
set up your rendering loop


1930
01:37:09,876 --> 01:37:13,596
to load 3D models
via its interaction


1931
01:37:13,596 --> 01:37:14,956
with Model I/O from your artist.


1932
01:37:15,176 --> 01:37:17,666
In fact, MetalKit can
load meshes directly


1933
01:37:17,666 --> 01:37:19,026
into Metal buffers and set


1934
01:37:19,026 --> 01:37:22,466
up pretty much everything you
can do to render your scene.


1935
01:37:23,736 --> 01:37:24,676
We didn't stop there.


1936
01:37:25,376 --> 01:37:28,396
Metal performance shaders
are high-performance image-


1937
01:37:28,396 --> 01:37:30,296
processing shaders for
Metal applications.


1938
01:37:31,166 --> 01:37:34,646
These are GPU-based parallel
compute shaders individually


1939
01:37:34,646 --> 01:37:39,496
tuned for all of our GPUs,
again, making it really easy


1940
01:37:39,796 --> 01:37:41,006
for all of you to adopt Metal.


1941
01:37:42,376 --> 01:37:44,256
So now you have a great
rendering pipeline,


1942
01:37:44,256 --> 01:37:46,256
but you need great content.


1943
01:37:46,756 --> 01:37:47,796
So we have Model I/O.


1944
01:37:48,776 --> 01:37:51,396
Sometimes loading and working
with 3D models can be tricky.


1945
01:37:52,726 --> 01:37:54,016
So that's what Model
I/O comes in.


1946
01:37:54,346 --> 01:37:56,726
It makes it simple
to load content


1947
01:37:56,726 --> 01:38:00,186
from all the file formats you
expect directly into SceneKit


1948
01:38:00,186 --> 01:38:02,566
or Metal with this
interaction with MetalKit.


1949
01:38:02,566 --> 01:38:05,896
But where it sets itself apart
is the way it handles lighting.


1950
01:38:07,356 --> 01:38:11,206
Model I/O offers
state-of-the-art, raytraced,


1951
01:38:11,206 --> 01:38:17,526
materials-based lighting
solution for you.


1952
01:38:17,796 --> 01:38:20,916
What this really means
is it offers amazingly


1953
01:38:20,916 --> 01:38:21,886
realistic graphics.


1954
01:38:22,046 --> 01:38:22,786
Let's take a look.


1955
01:38:23,226 --> 01:38:24,346
So let's start with a baseline.


1956
01:38:24,666 --> 01:38:27,216
This is just a model
with textures loaded.


1957
01:38:28,036 --> 01:38:29,286
This is not really interesting.


1958
01:38:29,286 --> 01:38:30,096
It's actually pretty flat,


1959
01:38:30,236 --> 01:38:33,376
and I think the '90s is
calling this model back.


1960
01:38:33,686 --> 01:38:35,246
If we strip away the textures


1961
01:38:35,246 --> 01:38:37,486
and apply a global
illumination solution,


1962
01:38:37,486 --> 01:38:38,216
what we see is something


1963
01:38:38,216 --> 01:38:40,106
that immediately
looks more realistic.


1964
01:38:41,056 --> 01:38:43,266
We add the textures back
in, and we get something


1965
01:38:43,266 --> 01:38:44,246
that looks really good.


1966
01:38:44,446 --> 01:38:47,046
Finally, of course,
even with Model I/O


1967
01:38:47,046 --> 01:38:48,866
and its lighting solution, you
can add your own lighting in


1968
01:38:48,866 --> 01:38:52,336
and shadows to get something
that looks amazingly realistic,


1969
01:38:52,336 --> 01:38:55,046
giving you those amazing
results, from ordinary


1970
01:38:55,406 --> 01:38:58,436
to extraordinary, Model I/O
provides you a great solution


1971
01:38:58,816 --> 01:39:00,656
for your models and
for lighting.


1972
01:39:01,526 --> 01:39:03,386
So now you have a great
rendering pipeline,


1973
01:39:03,816 --> 01:39:05,476
you have great models,
great content,


1974
01:39:05,726 --> 01:39:06,786
you need great Gameplay.


1975
01:39:07,596 --> 01:39:08,526
So we have GameplayKit.


1976
01:39:09,606 --> 01:39:11,906
Gameplay is divided
really into two areas.


1977
01:39:11,906 --> 01:39:14,746
We have navigation or how you
move your objects in your game.


1978
01:39:15,106 --> 01:39:17,806
We also have your strategy
or how your game thinks.


1979
01:39:17,906 --> 01:39:19,836
GameplayKit has solutions
for both of these.


1980
01:39:20,966 --> 01:39:24,276
GameplayKit is a component-based
API that is a full coverage


1981
01:39:24,506 --> 01:39:25,726
of solutions for Gameplay.


1982
01:39:25,726 --> 01:39:28,316
Whether you need to track the
gold from each of your players


1983
01:39:28,776 --> 01:39:31,456
or need to navigate your bad
guys from point A to point B


1984
01:39:31,456 --> 01:39:33,066
and avoid the obstacles
in between,


1985
01:39:33,576 --> 01:39:35,856
or you need to generate
deterministic random numbers


1986
01:39:35,856 --> 01:39:38,076
for your next online
multiplayer game,


1987
01:39:38,406 --> 01:39:39,806
Gameplay has solutions for you.


1988
01:39:39,896 --> 01:39:42,456
From very simple
games to very complex,


1989
01:39:42,666 --> 01:39:44,976
we think Gameplay will do a
very good job helping you guys


1990
01:39:44,976 --> 01:39:45,916
develop your games.


1991
01:39:46,426 --> 01:39:51,816
We started out with a
social piece, Game Center.


1992
01:39:52,736 --> 01:39:55,336
ReplayKit can extend
the social interaction.


1993
01:39:55,676 --> 01:39:59,866
ReplayKit allows your players
to record video replays


1994
01:39:59,866 --> 01:40:00,856
of their gaming exploits.


1995
01:40:01,186 --> 01:40:03,406
They can save them or
they can share them.


1996
01:40:03,706 --> 01:40:05,826
It's hardware accelerated,
it's high performance,


1997
01:40:05,826 --> 01:40:09,186
and it's absolutely brilliantly
easy for you guys to adopt,


1998
01:40:09,556 --> 01:40:11,876
really easy to add it to your
game, and maybe it's the thing


1999
01:40:11,876 --> 01:40:14,206
that kicks off that next
viral marketing campaign


2000
01:40:14,566 --> 01:40:16,246
for your game project.


2001
01:40:17,796 --> 01:40:20,016
Finally, SceneKit and SpriteKit.


2002
01:40:20,016 --> 01:40:22,486
We have some great updates
for SceneKit and SpriteKit,


2003
01:40:22,486 --> 01:40:23,666
but I think the most
interesting,


2004
01:40:23,666 --> 01:40:26,966
maybe the most compelling,
is we have built tools


2005
01:40:27,246 --> 01:40:31,506
for both SceneKit and
SpriteKit directly into Xcode 7,


2006
01:40:31,586 --> 01:40:34,286
and I'd like to hand
it off to my colleague,


2007
01:40:34,486 --> 01:40:35,706
Jacques Gasselin de Richebourg,


2008
01:40:36,106 --> 01:40:38,956
to show you these tools
inside of Xcode 7.


2009
01:40:39,516 --> 01:40:45,196
[ Applause ]


2010
01:40:45,696 --> 01:40:45,956
>> JACQUES GASSELIN
DE RICHEBOURG: Thanks.


2011
01:40:46,606 --> 01:40:49,906
So last year with Xcode 6, we
introduced visual scene editing


2012
01:40:49,976 --> 01:40:51,266
for SpriteKit right
inside Xcode.


2013
01:40:51,946 --> 01:40:53,356
This year we are
kicking it up a notch


2014
01:40:53,626 --> 01:40:56,546
and have added animation
editing right inside Xcode.


2015
01:40:56,866 --> 01:40:59,426
So here we have a little
cut scene I am making.


2016
01:40:59,726 --> 01:41:03,156
It's got this cute red panda
and he is about to make his way


2017
01:41:03,156 --> 01:41:05,296
across the two chasms
to the other side.


2018
01:41:05,296 --> 01:41:07,066
These are the base
animations I have on there.


2019
01:41:07,426 --> 01:41:11,336
I want to layer these into
the animation we expect.


2020
01:41:11,786 --> 01:41:13,936
First off, obviously,
you need to make him run.


2021
01:41:14,626 --> 01:41:16,416
So let's go down
and grab an action.


2022
01:41:16,546 --> 01:41:18,616
Now, here we have a
really interesting action.


2023
01:41:18,806 --> 01:41:19,956
It's a reference action,


2024
01:41:20,386 --> 01:41:22,766
which means it actually
lives in a different file.


2025
01:41:22,866 --> 01:41:24,846
It lives in this
actions.sks file.


2026
01:41:25,026 --> 01:41:28,156
I am referencing here so I
can make composed actions.


2027
01:41:28,496 --> 01:41:29,756
So I am going to grab that.


2028
01:41:30,136 --> 01:41:32,516
Of course, it's just as
easy to just copy and paste.


2029
01:41:32,826 --> 01:41:36,296
I am going to do that a couple
times, and naturally it appends


2030
01:41:36,686 --> 01:41:37,646
after on the same track.


2031
01:41:37,966 --> 01:41:40,066
Let's have a look at
that, and we are going


2032
01:41:40,066 --> 01:41:42,656
to use the scrubber this
time, so it's a timeline


2033
01:41:42,656 --> 01:41:45,616
with a scrubber, and you can
basically preview what the


2034
01:41:45,616 --> 01:41:47,396
animation is going to
look like at any time.


2035
01:41:49,306 --> 01:41:52,106
That's not just a
great preview tool;


2036
01:41:52,376 --> 01:41:53,906
it's actually great
for editing as well.


2037
01:41:54,416 --> 01:41:56,566
So you noticed he didn't
jump over the chasms,


2038
01:41:56,566 --> 01:41:59,276
and that's a problem and
something we are going to fix.


2039
01:42:00,136 --> 01:42:02,256
So let's figure out a
good spot for him to jump.


2040
01:42:03,246 --> 01:42:05,066
Looks like here is
about perfect.


2041
01:42:05,066 --> 01:42:08,756
And then we are going to grab
a move action, and we are going


2042
01:42:08,756 --> 01:42:09,796
to build the jump right here.


2043
01:42:09,856 --> 01:42:11,536
Now, notice how it's
snapping to the timeline.


2044
01:42:12,246 --> 01:42:15,476
Okay. I am going to
make it go up 100 units,


2045
01:42:16,476 --> 01:42:18,576
and then I am going to
use the timeline yet again


2046
01:42:19,276 --> 01:42:20,296
to figure out the apex.


2047
01:42:20,296 --> 01:42:21,196
I want it to be about there.


2048
01:42:21,196 --> 01:42:23,446
Now I am going to
snap the duration.


2049
01:42:24,196 --> 01:42:25,536
Okay? It's that easy.


2050
01:42:26,396 --> 01:42:29,276
Obviously, when he jumps,
I want him to ease out.


2051
01:42:29,276 --> 01:42:31,146
That means he is going to have
a lot of velocity at the start


2052
01:42:31,146 --> 01:42:32,726
and very little at the apex.


2053
01:42:33,276 --> 01:42:35,496
Going to copy and paste
that and reverse it.


2054
01:42:36,886 --> 01:42:37,716
Minus 100.


2055
01:42:37,716 --> 01:42:39,976
That's going to ease in so


2056
01:42:39,976 --> 01:42:42,096
that he has some hang
time up at the apex.


2057
01:42:42,976 --> 01:42:44,246
Okay. Let's scrub across that.


2058
01:42:44,246 --> 01:42:46,206
That's a parabolic jump.


2059
01:42:46,346 --> 01:42:48,926
Perfect. Now, obviously,
it looks a bit weird


2060
01:42:48,926 --> 01:42:52,156
if he just runs in the air,
so let's add an animation.


2061
01:42:52,786 --> 01:42:55,496
You notice here I am layering
animations on top of each other,


2062
01:42:55,606 --> 01:42:57,046
and SpriteKit handles
that for you.


2063
01:42:57,046 --> 01:43:01,376
Here I am going to snap
the animation to the length


2064
01:43:01,376 --> 01:43:04,266
of the jump, and I am going
to hop into the media library


2065
01:43:04,746 --> 01:43:05,896
and fetch my jump frames.


2066
01:43:06,636 --> 01:43:10,796
So I am filtering jump, select
that one, select all of them,


2067
01:43:11,626 --> 01:43:13,546
drag and drop, perfect.


2068
01:43:14,166 --> 01:43:14,386
All right.


2069
01:43:14,386 --> 01:43:15,246
Now scrub.


2070
01:43:15,696 --> 01:43:16,856
Okay. That's a cute jump.


2071
01:43:18,216 --> 01:43:20,246
Now, there are two
chasms, so I am going


2072
01:43:20,246 --> 01:43:21,486
to have to do this twice.


2073
01:43:21,776 --> 01:43:24,716
The easiest thing to do here is
to turn this into a reference,


2074
01:43:24,816 --> 01:43:27,416
so I am going to select
all those, right-click,


2075
01:43:28,336 --> 01:43:31,256
convert to reference, and I
am going to call that Jump.


2076
01:43:31,256 --> 01:43:34,616
That's going to store
in the actions.sks file


2077
01:43:34,796 --> 01:43:35,986
that I used the run from before.


2078
01:43:35,986 --> 01:43:36,936
All right.


2079
01:43:36,936 --> 01:43:37,676
Great. That's a jump.


2080
01:43:37,676 --> 01:43:40,916
I'm going to use the scrubber
again to lay down another jump.


2081
01:43:41,106 --> 01:43:43,676
The excellent thing about
references is they turn up here


2082
01:43:43,676 --> 01:43:44,696
in the object library
straightaway.


2083
01:43:45,446 --> 01:43:47,406
So I am just going to
drag and drop that in.


2084
01:43:48,586 --> 01:43:51,996
And here we should have
our final cut scene.


2085
01:43:52,216 --> 01:43:53,676
Okay. Jump and jump.


2086
01:43:54,166 --> 01:43:54,336
Great.


2087
01:43:55,156 --> 01:43:55,516
[Applause] Okay.


2088
01:43:56,616 --> 01:43:56,936
Thanks.


2089
01:44:02,506 --> 01:44:03,196
The great things


2090
01:44:03,196 --> 01:44:06,266
about references is they also
help you structure not just your


2091
01:44:06,266 --> 01:44:07,776
other scenes, but
your code as well.


2092
01:44:08,366 --> 01:44:11,956
So here using SK action
named, I am going to load


2093
01:44:11,956 --> 01:44:14,096
up those very same actions,
and I am going to hook them


2094
01:44:14,096 --> 01:44:16,876
up to the left and right keys
and the space bar for jump.


2095
01:44:17,486 --> 01:44:18,606
Let's run that and
have a look at it.


2096
01:44:20,506 --> 01:44:22,176
So here we have the panda
doing the cut scene.


2097
01:44:22,676 --> 01:44:23,146
Excellent.


2098
01:44:23,146 --> 01:44:24,306
Now I am going to control it.


2099
01:44:24,306 --> 01:44:25,236
Look at that.


2100
01:44:25,236 --> 01:44:25,746
Left and right.


2101
01:44:26,536 --> 01:44:27,486
Jump, jump.


2102
01:44:28,186 --> 01:44:29,706
It's that easy.


2103
01:44:31,016 --> 01:44:35,086
[ Applause ]


2104
01:44:35,586 --> 01:44:39,536
Now, we've been busy,
so we took this


2105
01:44:39,636 --> 01:44:41,156
to the next dimension as well.


2106
01:44:42,506 --> 01:44:45,556
So new in Xcode 7, we have
full visual scene editing


2107
01:44:45,816 --> 01:44:47,606
of 3D content using
SceneKit as well.


2108
01:44:48,956 --> 01:44:51,116
This editor is very much like
the 2D editor for SpriteKit.


2109
01:44:51,766 --> 01:44:52,476
Same things work.


2110
01:44:52,936 --> 01:44:54,316
Drag and drop to
add new content.


2111
01:44:55,136 --> 01:44:57,846
You can use the manipulators
in 3D to drag it around.


2112
01:44:58,386 --> 01:44:59,806
You can snap to other objects.


2113
01:45:00,246 --> 01:45:01,276
You can even duplicate.


2114
01:45:03,006 --> 01:45:04,406
And we have physics


2115
01:45:04,526 --> 01:45:07,556
and animations live
inside the editor.


2116
01:45:07,746 --> 01:45:10,456
So we are going to now animate.


2117
01:45:11,946 --> 01:45:15,136
Perfect. And let's
interact with this as well.


2118
01:45:16,286 --> 01:45:17,406
So I am going to play.


2119
01:45:17,406 --> 01:45:25,386
And we got the same cute
panda from the previous demo.


2120
01:45:25,576 --> 01:45:25,956
Here we go.


2121
01:45:28,246 --> 01:45:31,806
[Music] This is a red panda,
not a fox; a red panda.


2122
01:45:31,806 --> 01:45:35,686
I am going to walk up,
and I am going to interact


2123
01:45:35,686 --> 01:45:37,606
with that little
block I had before.


2124
01:45:38,246 --> 01:45:40,416
Oh, yeah, kick you down.


2125
01:45:40,416 --> 01:45:44,046
Great. So in this game, you
are playing a little red panda


2126
01:45:44,046 --> 01:45:47,076
that collecting flowers
and pearls and -- oh.


2127
01:45:48,536 --> 01:45:49,536
Sorry about that.


2128
01:45:50,516 --> 01:45:56,756
I promise, no pandas
were hurt in the making.


2129
01:45:56,756 --> 01:45:58,746
Okay. This is not just
a demo for stage here.


2130
01:45:58,746 --> 01:46:02,086
We are actually handing this
out to you, and this is a sample


2131
01:46:02,086 --> 01:46:06,676
that you can use to build your
next 3D SceneKit game using this


2132
01:46:06,676 --> 01:46:08,386
editor, SceneKit, and Xcode 7.


2133
01:46:09,176 --> 01:46:09,446
Thank you.


2134
01:46:09,786 --> 01:46:11,126
I am going to hand
you back to Andreas.


2135
01:46:11,626 --> 01:46:17,486
[ Applause ]


2136
01:46:17,986 --> 01:46:18,326
>> ANDREAS WENDKER: All right.


2137
01:46:18,996 --> 01:46:21,696
Let's quickly review the
technologies we discussed


2138
01:46:21,696 --> 01:46:22,216
in this session.


2139
01:46:22,216 --> 01:46:25,826
We announced new versions of
our OSs today, and of course,


2140
01:46:25,826 --> 01:46:27,326
the new native watchOS SDK.


2141
01:46:27,326 --> 01:46:32,396
The SDKs contain many new APIs
you can take advantage of,


2142
01:46:32,396 --> 01:46:33,746
particularly for gaming.


2143
01:46:34,726 --> 01:46:37,116
The new optimization
techniques with App Thinning.


2144
01:46:37,866 --> 01:46:40,406
A new version of Swift that
advances your apps faster


2145
01:46:40,406 --> 01:46:43,076
and at the same time lets you
write more effective code.


2146
01:46:43,076 --> 01:46:46,816
And of course, this new
version of our Xcode now


2147
01:46:46,816 --> 01:46:49,066
with user interface
recording and testing.


2148
01:46:50,336 --> 01:46:52,936
And all these technologies
will be available for download


2149
01:46:52,936 --> 01:46:56,106
from the WWDC attendee
portal this afternoon.


2150
01:46:56,106 --> 01:46:58,466
We hope that you will
quickly adopt them all


2151
01:46:58,466 --> 01:47:01,396
and create even more
innovative apps for users.


2152
01:47:02,296 --> 01:47:04,466
Please go ahead and
install all this stuff


2153
01:47:04,466 --> 01:47:06,836
and let us know what
you think about it.


2154
01:47:07,756 --> 01:47:08,916
Also we are doing something new


2155
01:47:08,916 --> 01:47:10,886
with our TestFlight
service for you this year.


2156
01:47:11,076 --> 01:47:14,536
Starting today, you will be
able to deploy apps written


2157
01:47:14,536 --> 01:47:18,596
to the iOS 9 SDK in TestFlight,
and over the next several weeks,


2158
01:47:18,696 --> 01:47:21,476
it's even going to add
support for App Slicing,


2159
01:47:22,056 --> 01:47:25,316
on-demand resources, and Bitcode
so you can test your apps even


2160
01:47:25,316 --> 01:47:28,746
with those new technologies
before we launch iOS 9 later


2161
01:47:28,746 --> 01:47:29,526
this year.


2162
01:47:30,516 --> 01:47:36,506
[ Applause ]


2163
01:47:37,006 --> 01:47:39,286
So there are, of course, many
opportunities to learn more


2164
01:47:39,286 --> 01:47:41,076
about these technologies
here at the conference.


2165
01:47:41,366 --> 01:47:43,266
There's more than a hundred
sessions you can attend,


2166
01:47:43,806 --> 01:47:46,866
numerous labs where you can go
and get help with your projects.


2167
01:47:46,866 --> 01:47:49,146
In fact, there's more than a
thousand Apple engineers here


2168
01:47:49,146 --> 01:47:50,976
on site to answer
your questions.


2169
01:47:51,056 --> 01:47:53,276
So I hope you enjoyed
this session.


2170
01:47:53,326 --> 01:47:54,826
I hope to hear from
you later this week.


2171
01:47:55,676 --> 01:48:13,290
[ Applause ]

