1
00:00:07,516 --> 00:00:15,500
[ Music ]


2
00:00:21,516 --> 00:00:29,106
[ Applause ]


3
00:00:29,606 --> 00:00:30,276
>> Good afternoon.


4
00:00:30,686 --> 00:00:31,776
My name is Ali Ozer.


5
00:00:31,916 --> 00:00:33,346
I, with my colleagues, Chris


6
00:00:33,346 --> 00:00:34,876
Dreessen and Jesse Donaldson,


7
00:00:35,196 --> 00:00:36,206
will be talking to you about


8
00:00:36,206 --> 00:00:37,986
what's new in Cocoa in macOS


9
00:00:38,196 --> 00:00:38,596
Mojave.


10
00:00:40,986 --> 00:00:42,286
As you saw yesterday, we have


11
00:00:42,286 --> 00:00:43,696
some amazing new features in


12
00:00:43,696 --> 00:00:44,456
AppKit this year.


13
00:00:44,976 --> 00:00:45,936
We'll be touching up on many


14
00:00:45,936 --> 00:00:47,826
topics, among which are these.


15
00:00:48,286 --> 00:00:49,106
We'll be talking about some of


16
00:00:49,106 --> 00:00:50,266
the API refinements we've been


17
00:00:50,266 --> 00:00:50,606
doing.


18
00:00:51,036 --> 00:00:52,476
The amazing new Dark Mode, and


19
00:00:52,476 --> 00:00:54,496
related features, some changes


20
00:00:54,496 --> 00:00:56,476
in layer backing, and also


21
00:00:56,476 --> 00:00:57,616
custom Quick Actions.


22
00:00:58,896 --> 00:00:59,776
So, let's dive right in.


23
00:01:00,396 --> 00:01:01,986
Now, as you know, we pride


24
00:01:01,986 --> 00:01:04,105
ourselves on our API's, and our


25
00:01:04,105 --> 00:01:05,876
goal always, is to have API's


26
00:01:05,876 --> 00:01:07,446
that are capable, and


27
00:01:07,446 --> 00:01:08,686
consistent, and powerful.


28
00:01:09,796 --> 00:01:10,756
So, with that in mind, we


29
00:01:10,756 --> 00:01:12,806
continue to do refinements that


30
00:01:12,806 --> 00:01:14,516
improve both the Objective-C and


31
00:01:14,516 --> 00:01:16,086
Swift exposure of our API's.


32
00:01:16,086 --> 00:01:18,436
And, this is not just in AppKit


33
00:01:18,436 --> 00:01:20,306
or Foundation, but also other


34
00:01:20,306 --> 00:01:21,906
frameworks including UIKit, as


35
00:01:21,956 --> 00:01:23,166
you might have heard in this


36
00:01:23,166 --> 00:01:24,596
morning's "What's New in Cocoa


37
00:01:24,596 --> 00:01:24,966
Touch."


38
00:01:26,226 --> 00:01:28,236
Now, the API changes we're doing


39
00:01:28,236 --> 00:01:30,586
are fully source compatible in


40
00:01:30,586 --> 00:01:32,646
Objective-C, and we also expect


41
00:01:32,646 --> 00:01:34,466
them to be 100% migratable in


42
00:01:34,466 --> 00:01:36,846
Swift by the time we GM the SDK.


43
00:01:37,516 --> 00:01:38,756
So, with that, let's look at


44
00:01:38,756 --> 00:01:39,906
some of the API refinements


45
00:01:39,906 --> 00:01:40,886
within this release.


46
00:01:41,416 --> 00:01:44,226
First I'm going to talk about


47
00:01:44,656 --> 00:01:47,036
some updates to string types.


48
00:01:48,296 --> 00:01:49,486
Last release, we introduced


49
00:01:49,486 --> 00:01:51,016
string enumeration types as a


50
00:01:51,016 --> 00:01:52,476
way to collect groups of related


51
00:01:52,476 --> 00:01:53,616
string constants together.


52
00:01:54,286 --> 00:01:55,696
These helped make API's that


53
00:01:55,746 --> 00:01:56,876
deal in these types much


54
00:01:56,876 --> 00:01:57,236
clearer.


55
00:01:58,896 --> 00:02:00,116
And, here are some examples.


56
00:02:00,326 --> 00:02:02,326
The first one is declared as NS


57
00:02:02,356 --> 00:02:03,286
STRING ENUM.


58
00:02:03,596 --> 00:02:05,356
This is used for string


59
00:02:05,356 --> 00:02:07,206
enumerations, where we provide


60
00:02:07,206 --> 00:02:08,156
some values out of the


61
00:02:08,156 --> 00:02:09,666
frameworks with no ability to


62
00:02:09,666 --> 00:02:11,206
extend them, so it's a fixed set


63
00:02:11,206 --> 00:02:12,016
of values.


64
00:02:12,536 --> 00:02:14,556
The next two here, NS EXTENSIBLE


65
00:02:14,556 --> 00:02:17,456
STRING ENUM, this is used to


66
00:02:17,456 --> 00:02:19,416
declare string enumerations


67
00:02:19,676 --> 00:02:20,646
where we might provide some


68
00:02:20,646 --> 00:02:22,346
values out of the box, but other


69
00:02:22,346 --> 00:02:23,936
frameworks and applications can


70
00:02:23,936 --> 00:02:25,746
also add to that set.


71
00:02:26,556 --> 00:02:28,176
So, we've done two changes here.


72
00:02:28,526 --> 00:02:29,866
First one is a simple one.


73
00:02:30,276 --> 00:02:31,896
We've simply replaced NS STRING


74
00:02:31,896 --> 00:02:34,766
ENUM and NS STRING EXTENSIBLE


75
00:02:34,766 --> 00:02:36,226
ENUM with their typed variants.


76
00:02:36,226 --> 00:02:37,566
This is effectively a no-op


77
00:02:37,566 --> 00:02:38,076
change.


78
00:02:38,336 --> 00:02:39,376
These are just more general


79
00:02:39,376 --> 00:02:40,866
forms of the same declarations.


80
00:02:41,196 --> 00:02:43,056
So, no changes in your code, or


81
00:02:43,056 --> 00:02:44,076
call sites, or anything.


82
00:02:44,736 --> 00:02:46,216
Now, the next one, NSImageName,


83
00:02:46,876 --> 00:02:49,066
underwent a bigger change, a


84
00:02:49,066 --> 00:02:50,726
more significant change, instead


85
00:02:50,726 --> 00:02:52,256
of a string enumeration, it's


86
00:02:52,256 --> 00:02:54,226
now declared as NS SWIFT BRIDGED


87
00:02:54,226 --> 00:02:56,316
TYPEDEF, which is effectively a


88
00:02:56,316 --> 00:02:56,766
typedef.


89
00:02:56,766 --> 00:02:58,456
Now, here's what the Swift


90
00:02:58,456 --> 00:02:59,716
exposure of this looks like.


91
00:03:00,926 --> 00:03:03,846
In Swift 4, NSImage.Name came


92
00:03:03,846 --> 00:03:05,216
across as a struct, which is the


93
00:03:05,216 --> 00:03:06,686
way you would declare the string


94
00:03:06,686 --> 00:03:07,596
enumerations.


95
00:03:07,926 --> 00:03:09,886
In Swift 4.2, it's as a


96
00:03:09,886 --> 00:03:12,276
typealias, a simple, good old,


97
00:03:12,366 --> 00:03:13,926
garden variety typealias.


98
00:03:14,286 --> 00:03:14,936
Much simpler.


99
00:03:16,046 --> 00:03:17,246
So, the question is, why did we


100
00:03:17,246 --> 00:03:17,726
do this?


101
00:03:18,136 --> 00:03:19,216
Let's look at a call site


102
00:03:19,306 --> 00:03:19,826
example.


103
00:03:22,056 --> 00:03:24,786
Here in Swift 4 is how you would


104
00:03:24,826 --> 00:03:26,486
take a string, and create an


105
00:03:26,486 --> 00:03:28,946
NSImage with it, by using the


106
00:03:28,946 --> 00:03:29,606
named method.


107
00:03:29,976 --> 00:03:31,686
As you'll see here, you'll be


108
00:03:31,686 --> 00:03:32,986
taking the string, and we're


109
00:03:32,986 --> 00:03:34,936
converting it to an NSImage.Name


110
00:03:34,936 --> 00:03:36,126
into the [inaudible] name before


111
00:03:36,126 --> 00:03:37,456
we call NSImage named.


112
00:03:37,966 --> 00:03:38,796
This does not feel


113
00:03:38,796 --> 00:03:40,526
super-streamlined to have to


114
00:03:40,656 --> 00:03:42,316
repeat NSImage.Name here.


115
00:03:42,956 --> 00:03:44,806
Now, with changes in Swift 4.2,


116
00:03:45,296 --> 00:03:46,206
this is all we have to write.


117
00:03:46,286 --> 00:03:47,536
You do not have to convert to


118
00:03:47,536 --> 00:03:49,246
the NSImage name, which is more


119
00:03:49,246 --> 00:03:50,736
streamlined, a little cleaner,


120
00:03:50,846 --> 00:03:51,846
less redundancy there.


121
00:03:52,426 --> 00:03:53,636
So, we believe this typedef


122
00:03:53,636 --> 00:03:55,576
approach is appropriate for


123
00:03:55,576 --> 00:03:55,976
passed-through values.


124
00:03:56,516 --> 00:04:01,126
[ Applause ]


125
00:04:01,626 --> 00:04:02,726
Yes, we had heard from some of


126
00:04:02,726 --> 00:04:02,916
you.


127
00:04:04,616 --> 00:04:05,856
So, we believe this appropriate


128
00:04:05,856 --> 00:04:07,336
for passed-through values, such


129
00:04:07,336 --> 00:04:08,636
as resource names or


130
00:04:08,636 --> 00:04:09,396
identifiers.


131
00:04:09,396 --> 00:04:11,756
Basically, values that are not


132
00:04:11,756 --> 00:04:13,266
interpreted by the framework but


133
00:04:13,266 --> 00:04:14,026
are just used in a


134
00:04:14,026 --> 00:04:14,926
passed-through fashion.


135
00:04:15,156 --> 00:04:16,886
So, image name, color name,


136
00:04:16,886 --> 00:04:18,495
window frame autosave names, and


137
00:04:18,495 --> 00:04:18,875
so on.


138
00:04:18,875 --> 00:04:19,906
So, these are the types that are


139
00:04:19,906 --> 00:04:21,136
appropriate for this.


140
00:04:21,245 --> 00:04:23,386
Now, note that you still have


141
00:04:23,386 --> 00:04:25,056
the benefits of a specific API


142
00:04:25,096 --> 00:04:26,446
declaration however with this


143
00:04:26,446 --> 00:04:27,046
new approach.


144
00:04:27,386 --> 00:04:28,826
Here's the declaration for


145
00:04:28,826 --> 00:04:30,146
NSImage named method.


146
00:04:30,146 --> 00:04:31,226
You'll note that the argument is


147
00:04:31,226 --> 00:04:33,656
still NSImage.Name, as opposed


148
00:04:33,656 --> 00:04:34,166
to a string.


149
00:04:34,166 --> 00:04:35,386
So, we still have that come


150
00:04:35,386 --> 00:04:35,676
through.


151
00:04:36,516 --> 00:04:37,526
Now, here's the full list of


152
00:04:37,526 --> 00:04:37,926
types.


153
00:04:37,926 --> 00:04:39,086
We did this to NSAppKit.


154
00:04:39,136 --> 00:04:42,476
Turns out a lot of types could


155
00:04:42,686 --> 00:04:43,656
benefit from this.


156
00:04:45,356 --> 00:04:46,746
It's not just this, it's also


157
00:04:46,746 --> 00:04:47,606
this set as well.


158
00:04:47,706 --> 00:04:48,906
So, a number of types have


159
00:04:49,176 --> 00:04:50,236
changed in this fashion.


160
00:04:52,126 --> 00:04:54,546
So, next, I'm going to talk


161
00:04:54,546 --> 00:04:55,816
about common prefixes.


162
00:04:56,376 --> 00:04:57,446
As you've seen in previous


163
00:04:57,446 --> 00:04:58,576
years, over time, we've been


164
00:04:58,576 --> 00:05:00,866
switching from common suffixes,


165
00:05:00,866 --> 00:05:02,436
which is what we used to to many


166
00:05:02,436 --> 00:05:04,066
years ago, to common prefixes in


167
00:05:04,066 --> 00:05:04,796
Objective-C.


168
00:05:05,186 --> 00:05:07,466
Using common prefixes enables


169
00:05:07,466 --> 00:05:08,936
names to group together, and


170
00:05:08,936 --> 00:05:10,446
become more easily discoverable,


171
00:05:10,686 --> 00:05:12,266
and come across better in Swift.


172
00:05:13,586 --> 00:05:16,776
So, let's look at an example.


173
00:05:16,846 --> 00:05:18,996
Here is NSLineJoinStyle as it


174
00:05:18,996 --> 00:05:21,156
appears in the 10.13 SDK.


175
00:05:21,156 --> 00:05:22,996
And, here is how it appears in


176
00:05:22,996 --> 00:05:23,866
10.14.


177
00:05:24,226 --> 00:05:25,866
You'll note that enumeration


178
00:05:25,866 --> 00:05:26,786
values such as


179
00:05:26,826 --> 00:05:28,516
MiterLineJoinStyle now have


180
00:05:28,546 --> 00:05:30,316
become LineJoinStyleMiter.


181
00:05:30,936 --> 00:05:32,486
So, a common prefix.


182
00:05:33,116 --> 00:05:34,936
The Swift exposure changes from


183
00:05:35,436 --> 00:05:37,986
miterLineJoinStyle to just


184
00:05:38,176 --> 00:05:38,606
miter.


185
00:05:38,886 --> 00:05:40,616
So, it's-- you know, you don't


186
00:05:40,616 --> 00:05:41,756
have to repeat the type any


187
00:05:41,756 --> 00:05:43,076
more; it's pretty obvious in the


188
00:05:43,076 --> 00:05:44,506
call site, so much cleaner.


189
00:05:44,846 --> 00:05:46,506
And, so good it deserves a happy


190
00:05:46,506 --> 00:05:46,936
emoji.


191
00:05:47,151 --> 00:05:49,151
[ Scattered Applause ]


192
00:05:49,286 --> 00:05:49,876
Thank you.


193
00:05:51,186 --> 00:05:53,246
And, we did this to a number of


194
00:05:53,246 --> 00:05:54,366
other types that we had not


195
00:05:54,756 --> 00:05:56,396
done, applied this change to,


196
00:05:56,396 --> 00:05:57,956
and here is that list of types.


197
00:06:00,496 --> 00:06:01,376
Next, I want to talk about


198
00:06:01,376 --> 00:06:02,506
formalized protocols.


199
00:06:03,446 --> 00:06:04,966
In the olden days, we used to


200
00:06:04,966 --> 00:06:06,936
use informal protocols, which


201
00:06:06,936 --> 00:06:08,176
are basically categories on


202
00:06:08,246 --> 00:06:09,556
NSObject to group related


203
00:06:09,596 --> 00:06:10,356
methods together.


204
00:06:10,966 --> 00:06:11,906
And, since then, we added


205
00:06:11,906 --> 00:06:13,056
features such as optional


206
00:06:13,056 --> 00:06:14,846
methods on protocols and so on,


207
00:06:14,846 --> 00:06:15,626
and we've been switching to


208
00:06:15,626 --> 00:06:17,096
formal protocols where possible.


209
00:06:17,716 --> 00:06:19,336
And, I'll show you an example of


210
00:06:19,336 --> 00:06:20,996
one of the ones we did this


211
00:06:20,996 --> 00:06:21,476
release.


212
00:06:23,156 --> 00:06:24,056
Here is the method


213
00:06:24,116 --> 00:06:26,106
validateMenuItem, and it used to


214
00:06:26,106 --> 00:06:28,826
be an informal protocol, a


215
00:06:28,826 --> 00:06:31,026
categorization object in 10.13.


216
00:06:31,346 --> 00:06:32,526
Now, it's a formal protocol,


217
00:06:32,526 --> 00:06:34,376
called NSMenuItemValidation,


218
00:06:34,376 --> 00:06:35,216
with .method in it.


219
00:06:35,706 --> 00:06:37,336
The Swift exposure changes from


220
00:06:37,336 --> 00:06:39,866
an extension NSObject to a


221
00:06:39,866 --> 00:06:41,016
formal protocol, of course.


222
00:06:41,016 --> 00:06:42,886
NSMenuItemValidation in Swift


223
00:06:42,886 --> 00:06:43,566
4.2.


224
00:06:43,936 --> 00:06:44,986
Of course, the benefits here are


225
00:06:44,986 --> 00:06:46,846
that objects that do menu item


226
00:06:46,846 --> 00:06:48,416
validation now have a way to


227
00:06:48,596 --> 00:06:49,956
formally declare that they do


228
00:06:49,956 --> 00:06:51,036
that by conforming to this


229
00:06:51,036 --> 00:06:51,506
protocol.


230
00:06:52,096 --> 00:06:53,426
Again, we like this so much, we


231
00:06:53,426 --> 00:06:54,526
did it across a bunch of other


232
00:06:54,526 --> 00:06:55,246
API's.


233
00:06:55,806 --> 00:06:57,656
So, here's the full list of


234
00:06:57,656 --> 00:06:59,146
formal protocols we added in


235
00:06:59,146 --> 00:06:59,586
AppKit.


236
00:07:00,056 --> 00:07:01,136
You'll notice things like color


237
00:07:01,136 --> 00:07:02,486
changing, font changing,


238
00:07:02,646 --> 00:07:04,846
NSEditor, NSEditorRegistration


239
00:07:05,176 --> 00:07:06,476
combines the bindings-related


240
00:07:06,516 --> 00:07:07,816
methods, and so on.


241
00:07:07,816 --> 00:07:09,236
So, it's a good list of new,


242
00:07:09,236 --> 00:07:10,306
formal protocols.


243
00:07:12,016 --> 00:07:13,066
Next, I want to talk about


244
00:07:13,066 --> 00:07:14,876
direct instance variable access.


245
00:07:15,826 --> 00:07:19,716
Now, most-- in our API's almost


246
00:07:19,716 --> 00:07:21,096
all of the instance variables


247
00:07:21,196 --> 00:07:22,136
are private.


248
00:07:22,586 --> 00:07:24,346
And, we've said so, but in a way


249
00:07:24,736 --> 00:07:25,826
that they have been declared,


250
00:07:25,826 --> 00:07:27,156
especially in some older AppKit


251
00:07:27,186 --> 00:07:29,466
classes, subclasses were allowed


252
00:07:29,556 --> 00:07:31,256
to touch the instance variables,


253
00:07:31,526 --> 00:07:32,896
directly access those instance


254
00:07:32,896 --> 00:07:33,216
variables.


255
00:07:33,716 --> 00:07:34,816
Now, some of you may not even be


256
00:07:34,816 --> 00:07:36,286
aware of this, so please don't


257
00:07:36,286 --> 00:07:37,356
go ahead and start using them,


258
00:07:37,706 --> 00:07:39,576
because this is probably an old


259
00:07:39,576 --> 00:07:40,956
code, code I'm sure you didn't


260
00:07:40,956 --> 00:07:42,656
write, but maybe inherited, that


261
00:07:42,656 --> 00:07:43,956
may be using instance variables


262
00:07:43,956 --> 00:07:44,316
directly.


263
00:07:44,766 --> 00:07:46,306
So, for now, we are going to be


264
00:07:46,306 --> 00:07:47,666
frowning upon this practice a


265
00:07:47,666 --> 00:07:49,656
bit more vigorously by


266
00:07:50,006 --> 00:07:50,656
deprecating it.


267
00:07:51,166 --> 00:07:52,446
Now, you'll be-- code that


268
00:07:52,446 --> 00:07:53,756
accesses instance variables


269
00:07:53,756 --> 00:07:55,436
directly will get a warning, and


270
00:07:55,436 --> 00:07:57,106
our intent is to break this in


271
00:07:57,106 --> 00:07:57,896
future updates.


272
00:07:57,896 --> 00:07:59,446
So, as you get the chance,


273
00:07:59,486 --> 00:08:00,596
please go ahead and clean these


274
00:08:00,596 --> 00:08:01,186
usages.


275
00:08:02,406 --> 00:08:04,346
And, the fix is pretty


276
00:08:04,346 --> 00:08:05,086
straightforward.


277
00:08:05,086 --> 00:08:06,196
Instead of accessing the


278
00:08:06,196 --> 00:08:07,366
instance variable directly,


279
00:08:07,686 --> 00:08:08,866
please go ahead and call the


280
00:08:08,866 --> 00:08:10,006
getter, or the property


281
00:08:10,006 --> 00:08:11,346
accessed, or whatever there


282
00:08:11,346 --> 00:08:11,806
might be.


283
00:08:11,986 --> 00:08:14,116
And, if you have some reason to


284
00:08:14,116 --> 00:08:15,246
access the instance variable,


285
00:08:15,246 --> 00:08:16,266
and you don't see a way around


286
00:08:16,266 --> 00:08:17,496
it, you might want to let us


287
00:08:17,496 --> 00:08:17,706
know.


288
00:08:18,936 --> 00:08:20,216
Now, speaking of deprecation,


289
00:08:20,576 --> 00:08:21,626
we're doing one more thing


290
00:08:23,276 --> 00:08:25,326
called formal soft deprecation.


291
00:08:25,976 --> 00:08:26,906
So, over the years we have


292
00:08:26,906 --> 00:08:28,866
deprecated a lot of API's, and


293
00:08:28,866 --> 00:08:29,986
have replaced them with better


294
00:08:30,016 --> 00:08:30,416
ones.


295
00:08:30,966 --> 00:08:32,275
In cases where the deprecation


296
00:08:32,275 --> 00:08:33,976
isn't urgent, we usually go


297
00:08:33,976 --> 00:08:35,346
through an informal deprecation


298
00:08:35,346 --> 00:08:36,765
phase, where we tell you the


299
00:08:36,765 --> 00:08:38,336
API's deprecated, we release


300
00:08:38,336 --> 00:08:39,916
note it, we comment it, and so


301
00:08:39,916 --> 00:08:41,426
on, before we actually mark the


302
00:08:41,426 --> 00:08:42,456
API's deprecated.


303
00:08:42,836 --> 00:08:44,116
Usually to reduce disruption.


304
00:08:44,916 --> 00:08:46,016
But now, we have a way to mark


305
00:08:46,016 --> 00:08:47,366
API's as to be formally


306
00:08:47,366 --> 00:08:47,956
deprecated.


307
00:08:48,566 --> 00:08:49,556
Let me give you an example.


308
00:08:50,726 --> 00:08:51,626
Here we have a symbol,


309
00:08:51,676 --> 00:08:54,356
NSBoxOldStyle, which of course


310
00:08:54,356 --> 00:08:55,846
happens to be a name that begs


311
00:08:55,846 --> 00:08:56,626
to be deprecated.


312
00:08:57,186 --> 00:08:58,176
And, you'll note that we've


313
00:08:58,206 --> 00:08:59,696
marked it as deprecated.


314
00:09:00,316 --> 00:09:01,386
And, the version number for the


315
00:09:01,386 --> 00:09:02,846
deprecation is API TO BE


316
00:09:02,846 --> 00:09:03,416
DEPRECATED.


317
00:09:04,836 --> 00:09:07,386
So, what this does is, it tells


318
00:09:07,386 --> 00:09:09,186
the compiler not to generate a


319
00:09:09,186 --> 00:09:10,706
deprecation warning or an error,


320
00:09:11,206 --> 00:09:12,906
however our intent is that if


321
00:09:12,906 --> 00:09:14,396
you try to use the symbol in


322
00:09:14,426 --> 00:09:16,516
Xcode, or new code, or in access


323
00:09:16,516 --> 00:09:18,026
documentation, you will get a


324
00:09:18,026 --> 00:09:19,216
warning that the symbol is


325
00:09:19,216 --> 00:09:20,216
deprecated, and it will be


326
00:09:20,216 --> 00:09:21,356
pointed at the replacement


327
00:09:21,356 --> 00:09:21,736
symbol.


328
00:09:22,336 --> 00:09:23,546
So, of course, comes across in


329
00:09:23,546 --> 00:09:24,466
Swift as well.


330
00:09:24,556 --> 00:09:26,856
As you can see here, one thing


331
00:09:26,856 --> 00:09:28,126
to note, the version number


332
00:09:28,156 --> 00:09:29,016
100,000.


333
00:09:29,706 --> 00:09:30,996
This is not a pre-announcement,


334
00:09:30,996 --> 00:09:32,676
or a leak of some far, future


335
00:09:32,676 --> 00:09:32,956
SDK.


336
00:09:32,956 --> 00:09:34,996
It's just that's a placeholder


337
00:09:34,996 --> 00:09:36,526
number we're using for now to


338
00:09:36,526 --> 00:09:39,036
indicate this feature.


339
00:09:40,196 --> 00:09:41,206
Now, we use formal soft


340
00:09:41,206 --> 00:09:42,126
deprecation in a few other


341
00:09:42,126 --> 00:09:42,806
cases.


342
00:09:43,826 --> 00:09:45,286
Earlier I showed you this.


343
00:09:46,146 --> 00:09:47,436
And, I told you that we renamed


344
00:09:47,436 --> 00:09:49,076
MiterLineJoinStyle to by


345
00:09:49,076 --> 00:09:50,126
LineJoinStyleMiter.


346
00:09:50,956 --> 00:09:51,846
And, I also said that


347
00:09:51,846 --> 00:09:53,786
Objective-C source code was 100%


348
00:09:53,786 --> 00:09:54,326
compatible.


349
00:09:54,826 --> 00:09:56,066
So, you might be wondering,


350
00:09:56,066 --> 00:09:57,076
well, what happened to that old


351
00:09:57,076 --> 00:09:58,336
symbol that you renamed?


352
00:09:58,876 --> 00:10:00,066
Well, we actually declared that


353
00:10:00,066 --> 00:10:02,596
old symbol, as you see here, by


354
00:10:02,596 --> 00:10:03,496
using this new API TO BE


355
00:10:03,496 --> 00:10:03,976
DEPRECATED.


356
00:10:04,046 --> 00:10:06,896
So, we declare it as deprecated,


357
00:10:07,016 --> 00:10:08,936
as API TO BE DEPRECATED, meaning


358
00:10:08,936 --> 00:10:11,406
any new attempts to use it will


359
00:10:11,406 --> 00:10:13,336
get warnings, but existing uses


360
00:10:13,336 --> 00:10:14,806
will be left alone, because we


361
00:10:14,806 --> 00:10:15,766
really don't want to disrupt


362
00:10:16,236 --> 00:10:17,236
uses of the symbol in


363
00:10:17,236 --> 00:10:21,346
Objective-C source code.


364
00:10:21,446 --> 00:10:22,576
Now, turns out there was a lot


365
00:10:22,576 --> 00:10:25,186
of symbols that were waiting for


366
00:10:25,186 --> 00:10:27,546
this facility, so a lot of API's


367
00:10:27,666 --> 00:10:29,006
are marked with API TO BE


368
00:10:29,006 --> 00:10:29,626
DEPRECATED.


369
00:10:29,966 --> 00:10:31,246
A bunch of these are because we


370
00:10:31,246 --> 00:10:33,326
did the common suffix to common


371
00:10:33,426 --> 00:10:35,046
prefix naming, and some of the


372
00:10:35,046 --> 00:10:36,406
others are symbols that we are


373
00:10:36,636 --> 00:10:38,156
de-emphasizing deprecating,


374
00:10:38,636 --> 00:10:39,766
because we're bringing new ones


375
00:10:39,766 --> 00:10:39,926
in.


376
00:10:39,926 --> 00:10:40,936
Especially in support of


377
00:10:40,936 --> 00:10:42,276
features such as Dark Mode,


378
00:10:42,606 --> 00:10:43,586
which you'll hear about later


379
00:10:43,586 --> 00:10:43,836
today.


380
00:10:44,486 --> 00:10:46,996
So, the last topic I want to


381
00:10:46,996 --> 00:10:48,326
talk about is secure coding.


382
00:10:49,186 --> 00:10:50,116
As you may be aware, we


383
00:10:50,116 --> 00:10:53,016
introduced the concept of secure


384
00:10:53,016 --> 00:10:56,336
coding back in 10.8 and iOS 6.


385
00:10:56,446 --> 00:10:59,196
It basically allows class-- when


386
00:10:59,196 --> 00:11:00,366
you are archiving, basically


387
00:11:00,366 --> 00:11:01,286
allows you to specify what


388
00:11:01,286 --> 00:11:03,226
classes are expected, that way


389
00:11:03,226 --> 00:11:04,916
it can be an explicit error if


390
00:11:04,916 --> 00:11:05,766
those classes are not


391
00:11:05,766 --> 00:11:06,946
encountered in the archive.


392
00:11:08,126 --> 00:11:09,106
Now, the way we did secure


393
00:11:09,106 --> 00:11:13,626
coding, the secure coding was an


394
00:11:13,626 --> 00:11:14,436
optional feature.


395
00:11:14,906 --> 00:11:16,766
But, we now have new API's that


396
00:11:16,766 --> 00:11:18,886
enable both secure coding as a


397
00:11:18,886 --> 00:11:20,376
default behavior, and as a


398
00:11:20,376 --> 00:11:21,866
bonus, they enable error


399
00:11:21,866 --> 00:11:22,556
returns.


400
00:11:23,076 --> 00:11:24,526
Our archiver and unarchiver


401
00:11:24,526 --> 00:11:25,836
API's worked with exceptions,


402
00:11:25,836 --> 00:11:27,016
but of course we prefer error


403
00:11:27,016 --> 00:11:27,576
returns.


404
00:11:27,576 --> 00:11:29,606
And, the new API's enabled error


405
00:11:29,606 --> 00:11:31,006
return behaviors by default.


406
00:11:32,296 --> 00:11:34,086
So, I'll show you the API's


407
00:11:34,086 --> 00:11:35,616
NSKeyedUnarchiver, since that's


408
00:11:35,616 --> 00:11:36,546
the most interesting.


409
00:11:37,126 --> 00:11:38,506
Here is an NSKeyedUnarchiver.


410
00:11:38,886 --> 00:11:39,896
One new method is in it.


411
00:11:39,976 --> 00:11:40,866
It simply creates a


412
00:11:40,866 --> 00:11:43,296
keyedUnarchiver, securely, and


413
00:11:43,296 --> 00:11:44,876
in a way will return errors.


414
00:11:45,736 --> 00:11:47,736
Two other new methods are these


415
00:11:47,736 --> 00:11:49,296
convenience API's,


416
00:11:49,296 --> 00:11:51,506
unarchivedObject(ofClasses from,


417
00:11:51,756 --> 00:11:53,556
and unarchivedObject(ofClass


418
00:11:53,646 --> 00:11:53,986
from.


419
00:11:54,256 --> 00:11:56,086
These basically unarchive a


420
00:11:56,086 --> 00:11:57,466
single object and return it.


421
00:11:57,926 --> 00:11:59,046
They do it securely, and they


422
00:11:59,046 --> 00:12:01,246
will return an error if some


423
00:12:01,246 --> 00:12:02,386
problem's encountered.


424
00:12:02,946 --> 00:12:04,086
Now, note the second method


425
00:12:04,086 --> 00:12:04,306
here.


426
00:12:04,306 --> 00:12:05,526
It's sort of decorated like a


427
00:12:06,116 --> 00:12:07,706
crazy fancy peacock.


428
00:12:08,296 --> 00:12:12,006
All that decoration enables


429
00:12:12,006 --> 00:12:13,596
Swift to infer the return type


430
00:12:13,596 --> 00:12:14,666
much better, which is of course


431
00:12:14,716 --> 00:12:16,066
a trick Swift is really good at.


432
00:12:16,866 --> 00:12:18,166
Now, note that all the way out


433
00:12:18,166 --> 00:12:20,156
at this SDK this year, they do


434
00:12:20,156 --> 00:12:24,026
work back to 10.13, and iOS 11.


435
00:12:24,196 --> 00:12:25,296
So, you can start using them,


436
00:12:25,616 --> 00:12:26,606
even with those deployment


437
00:12:26,636 --> 00:12:27,146
targets.


438
00:12:28,886 --> 00:12:30,576
These methods replace the


439
00:12:30,576 --> 00:12:32,056
methods on this slide here.


440
00:12:32,886 --> 00:12:34,416
Now, you'll note that these are


441
00:12:34,416 --> 00:12:36,596
being deprecated in 10.14 and


442
00:12:36,596 --> 00:12:37,856
also iOS 12.


443
00:12:38,586 --> 00:12:40,226
Since these are not doing secure


444
00:12:40,226 --> 00:12:42,116
coding, we are deprecating them


445
00:12:42,116 --> 00:12:43,486
immediately, rather than going


446
00:12:43,486 --> 00:12:44,426
through that formal soft


447
00:12:44,426 --> 00:12:45,826
deprecation, because we really


448
00:12:45,826 --> 00:12:47,086
encourage you, we really want


449
00:12:47,086 --> 00:12:48,146
you to switch to the secure


450
00:12:48,146 --> 00:12:49,376
coding if you haven't done so


451
00:12:49,636 --> 00:12:49,826
yet.


452
00:12:51,426 --> 00:12:53,636
Now, one more thing about secure


453
00:12:53,636 --> 00:12:54,856
coding is a new value


454
00:12:54,856 --> 00:12:55,616
transformer.


455
00:12:56,046 --> 00:12:56,676
As you may know,


456
00:12:56,786 --> 00:12:58,316
NSValueTransformer is a class


457
00:12:58,606 --> 00:12:59,446
used for automatically


458
00:12:59,446 --> 00:13:00,906
transforming values from one to


459
00:13:01,026 --> 00:13:01,526
another.


460
00:13:02,076 --> 00:13:03,466
These two valueTransformers


461
00:13:03,466 --> 00:13:05,416
here-- unarchiveFromData and


462
00:13:05,416 --> 00:13:07,806
keyedUnarchivedFromData-- the


463
00:13:07,806 --> 00:13:09,436
first one does unkeyed


464
00:13:09,436 --> 00:13:10,426
archiving, the second one does


465
00:13:10,426 --> 00:13:11,366
keyed archiving, but not


466
00:13:11,366 --> 00:13:11,966
securely.


467
00:13:12,436 --> 00:13:14,506
And so, these are now not


468
00:13:14,756 --> 00:13:16,026
working in the way we like, so


469
00:13:16,026 --> 00:13:17,396
we're deprecating these two.


470
00:13:17,396 --> 00:13:18,616
And, replacing them with this


471
00:13:18,616 --> 00:13:19,696
new secure Unarchive


472
00:13:19,696 --> 00:13:21,156
FromDataTransformerName, which


473
00:13:21,156 --> 00:13:22,526
will do the unarchiving


474
00:13:22,526 --> 00:13:23,086
securely.


475
00:13:23,316 --> 00:13:24,476
So, we urge you to switch to


476
00:13:24,476 --> 00:13:25,386
this one as well.


477
00:13:25,716 --> 00:13:28,696
Now, on the secure coding front,


478
00:13:28,696 --> 00:13:29,666
we've also gone ahead and


479
00:13:29,666 --> 00:13:30,806
adopted secure coding in a


480
00:13:30,806 --> 00:13:32,036
number of AppKit classes that


481
00:13:32,036 --> 00:13:32,716
didn't do it yet.


482
00:13:33,646 --> 00:13:35,536
Note here, NSAppearance, which


483
00:13:36,106 --> 00:13:38,186
is a recent, relatively recent


484
00:13:38,186 --> 00:13:39,156
class that is increasingly


485
00:13:39,156 --> 00:13:40,566
becoming your friend, as you'll


486
00:13:40,566 --> 00:13:42,106
see in later talks about Dark


487
00:13:42,106 --> 00:13:43,476
Mode and other features we've


488
00:13:43,476 --> 00:13:44,246
added in AppKit.


489
00:13:44,906 --> 00:13:46,246
We've also added secure coding


490
00:13:46,246 --> 00:13:47,716
to a few foundation API's that


491
00:13:47,746 --> 00:13:48,356
did not have it.


492
00:13:48,756 --> 00:13:49,946
And, here is that list.


493
00:13:51,136 --> 00:13:52,296
Now, one more note on secure


494
00:13:52,296 --> 00:13:52,686
coding.


495
00:13:53,016 --> 00:13:54,756
We have a talk Thursday morning,


496
00:13:55,856 --> 00:13:58,196
"Data You Can Trust," where


497
00:13:58,196 --> 00:13:59,666
we'll talk about doing coding


498
00:14:00,166 --> 00:14:01,776
and archiving and unarchiving in


499
00:14:01,776 --> 00:14:03,296
a robust and secure fashion.


500
00:14:03,396 --> 00:14:05,146
So, I invite you to attend that.


501
00:14:05,196 --> 00:14:07,716
Thursday morning at 9.


502
00:14:07,916 --> 00:14:09,566
So, at this point, the rest of


503
00:14:09,566 --> 00:14:10,756
the talk is going to be about


504
00:14:10,756 --> 00:14:12,036
the new features in AppKit and


505
00:14:12,036 --> 00:14:12,876
related areas.


506
00:14:13,156 --> 00:14:14,466
And, to kick that off I invite


507
00:14:14,506 --> 00:14:14,976
Chris on stage.


508
00:14:15,516 --> 00:14:20,966
[ Applause ]


509
00:14:21,466 --> 00:14:21,986
>> Thanks, Ali.


510
00:14:22,596 --> 00:14:23,806
So, Dark Mode is one of the most


511
00:14:23,806 --> 00:14:25,036
exciting new features in macOS


512
00:14:25,036 --> 00:14:25,946
10.14.


513
00:14:26,406 --> 00:14:27,386
And, I'm sure you all saw


514
00:14:27,386 --> 00:14:28,796
yesterday, I bet some of you are


515
00:14:28,796 --> 00:14:29,656
running it right now.


516
00:14:29,656 --> 00:14:30,796
But, let's go ahead and take a


517
00:14:30,796 --> 00:14:31,076
look.


518
00:14:32,036 --> 00:14:34,666
So, we have these great new sets


519
00:14:34,666 --> 00:14:35,556
of system artwork.


520
00:14:36,126 --> 00:14:37,336
It makes our system UI look


521
00:14:37,336 --> 00:14:37,616
great.


522
00:14:37,616 --> 00:14:38,676
It makes your application look


523
00:14:38,676 --> 00:14:38,936
great.


524
00:14:39,156 --> 00:14:39,996
It's going to make your user


525
00:14:39,996 --> 00:14:40,836
content look great.


526
00:14:41,186 --> 00:14:42,436
And, what we all want to know is


527
00:14:42,436 --> 00:14:44,586
what we need to do to adopt


528
00:14:45,216 --> 00:14:45,326
this.


529
00:14:45,526 --> 00:14:47,146
So, the first step is really


530
00:14:47,146 --> 00:14:47,536
simple.


531
00:14:47,906 --> 00:14:49,246
We need to relink against the


532
00:14:49,246 --> 00:14:50,906
macOS 10.14 SDK.


533
00:14:51,336 --> 00:14:52,146
That's easy enough.


534
00:14:52,436 --> 00:14:53,496
That might be enough for some of


535
00:14:53,496 --> 00:14:54,736
us, too, but most of us are


536
00:14:54,736 --> 00:14:55,836
going to need to do a little bit


537
00:14:55,836 --> 00:14:57,406
more work to make an app that


538
00:14:57,406 --> 00:14:57,896
looks great.


539
00:14:58,676 --> 00:14:59,656
So, the next thing we're going


540
00:14:59,656 --> 00:15:01,176
to want to do, is we're going to


541
00:15:01,176 --> 00:15:02,406
search our application for


542
00:15:02,406 --> 00:15:03,936
places we've hardcoded color


543
00:15:03,936 --> 00:15:04,376
values.


544
00:15:04,566 --> 00:15:05,266
And, we're going to want to


545
00:15:05,266 --> 00:15:05,966
replace them with an


546
00:15:05,966 --> 00:15:07,086
appearance-sensitive color


547
00:15:07,086 --> 00:15:07,486
instead.


548
00:15:08,696 --> 00:15:10,646
For, most system UI elements,


549
00:15:10,906 --> 00:15:12,656
AppKit actually offers a lot of


550
00:15:12,656 --> 00:15:14,226
dynamic system colors that will


551
00:15:14,226 --> 00:15:15,106
react with the current


552
00:15:15,106 --> 00:15:16,546
appearance, and look great for


553
00:15:16,546 --> 00:15:18,166
whatever UI element you're


554
00:15:18,166 --> 00:15:19,216
trying to come across with.


555
00:15:19,476 --> 00:15:20,466
And, to flesh out the list,


556
00:15:20,466 --> 00:15:22,156
we've added even more in macOS


557
00:15:22,156 --> 00:15:23,006
10.14.


558
00:15:24,186 --> 00:15:25,836
But, in some cases you're not


559
00:15:25,836 --> 00:15:26,676
trying to make a system UI


560
00:15:26,676 --> 00:15:28,026
element, you're trying to make


561
00:15:28,026 --> 00:15:29,206
some piece of your document


562
00:15:29,206 --> 00:15:30,596
model that also looks great in


563
00:15:30,596 --> 00:15:31,156
Dark Mode.


564
00:15:31,266 --> 00:15:32,836
Now, you can do this by sorting


565
00:15:32,836 --> 00:15:34,806
your colors in asset catalogs.


566
00:15:35,796 --> 00:15:37,276
So, if you go to the color


567
00:15:37,276 --> 00:15:39,166
editor in Xcode, you can


568
00:15:39,166 --> 00:15:40,416
configure which appearances


569
00:15:40,676 --> 00:15:42,246
you'd like to set up specific


570
00:15:42,246 --> 00:15:44,206
colors for, using the sidebar on


571
00:15:44,206 --> 00:15:44,526
the right.


572
00:15:45,046 --> 00:15:46,466
In this case, we've picked


573
00:15:46,466 --> 00:15:47,986
colors explicitly for the light


574
00:15:47,986 --> 00:15:49,266
appearance, for the dark


575
00:15:49,266 --> 00:15:50,396
appearance, and a general


576
00:15:50,396 --> 00:15:51,706
fallback color for any other


577
00:15:51,706 --> 00:15:52,246
appearances.


578
00:15:52,756 --> 00:15:56,296
Similar to with colors, we're


579
00:15:56,296 --> 00:15:57,436
going to want to go through our


580
00:15:57,436 --> 00:15:59,096
UI's and find places we can use


581
00:15:59,156 --> 00:15:59,876
template images.


582
00:16:00,406 --> 00:16:01,506
Template images are great


583
00:16:01,546 --> 00:16:02,876
because the image artwork will


584
00:16:02,876 --> 00:16:04,616
be tinted with the right color


585
00:16:04,726 --> 00:16:05,776
for whatever appearance we're


586
00:16:05,776 --> 00:16:06,086
using.


587
00:16:06,526 --> 00:16:07,476
And, you might have been skating


588
00:16:07,476 --> 00:16:08,676
by with places in your app where


589
00:16:08,676 --> 00:16:10,046
you included a dark gray piece


590
00:16:10,046 --> 00:16:11,576
of artwork, or solid black


591
00:16:11,576 --> 00:16:12,826
artwork, which looked fine in


592
00:16:12,826 --> 00:16:14,146
light mode, and is going to look


593
00:16:14,146 --> 00:16:15,626
absolutely wrong in Dark Mode.


594
00:16:16,206 --> 00:16:18,016
So, you can make template images


595
00:16:18,066 --> 00:16:18,786
programatically.


596
00:16:19,016 --> 00:16:20,566
You can also set them up in your


597
00:16:20,566 --> 00:16:21,336
asset catalog.


598
00:16:22,286 --> 00:16:23,526
But, you don't need to limit


599
00:16:23,526 --> 00:16:24,816
yourself to template images to


600
00:16:24,816 --> 00:16:25,706
make your Dark Mode UI.


601
00:16:26,276 --> 00:16:27,826
You can also specify colors--


602
00:16:28,156 --> 00:16:30,126
or, sorry, images that look


603
00:16:30,126 --> 00:16:30,926
different in Dark Mode.


604
00:16:30,926 --> 00:16:32,086
In this case, for our planet


605
00:16:32,086 --> 00:16:33,756
app, we decided that we wanted


606
00:16:33,756 --> 00:16:35,116
nighttime view of North America


607
00:16:35,116 --> 00:16:36,736
more in Dark Mode, but for other


608
00:16:36,736 --> 00:16:37,936
appearances, we're going to use


609
00:16:37,936 --> 00:16:38,606
a daytime view.


610
00:16:40,286 --> 00:16:43,746
So, something that's really


611
00:16:43,746 --> 00:16:45,936
great about Dark Mode is how we


612
00:16:45,936 --> 00:16:47,116
handle desktop pictures.


613
00:16:47,226 --> 00:16:48,226
And, let me show you what I mean


614
00:16:48,226 --> 00:16:48,676
by this.


615
00:16:49,036 --> 00:16:50,896
If you take a look at the system


616
00:16:50,896 --> 00:16:52,986
preferences UI, it kind of looks


617
00:16:52,986 --> 00:16:54,106
like it's just a dark gray at


618
00:16:54,106 --> 00:16:55,146
first glance, but it's more


619
00:16:55,146 --> 00:16:56,086
complicated than that.


620
00:16:56,796 --> 00:16:58,666
If we look behind the window, we


621
00:16:58,666 --> 00:16:59,516
can see that we have these


622
00:16:59,516 --> 00:17:00,706
gorgeous sand dunes, and there's


623
00:17:00,706 --> 00:17:02,326
a lot of blues and light and


624
00:17:02,326 --> 00:17:03,156
dark grays in there.


625
00:17:03,516 --> 00:17:04,715
And, if we do the masked pick,


626
00:17:04,715 --> 00:17:05,876
an average color for this


627
00:17:05,876 --> 00:17:07,546
rectangle, we wind up with this


628
00:17:07,546 --> 00:17:09,276
nice dark blue color instead.


629
00:17:10,266 --> 00:17:11,626
So, when we construct our UI and


630
00:17:11,695 --> 00:17:12,955
add back in this gray color,


631
00:17:13,136 --> 00:17:14,156
it's not solid gray.


632
00:17:14,425 --> 00:17:15,506
We're keeping that dark blue


633
00:17:15,506 --> 00:17:16,256
color with us.


634
00:17:16,526 --> 00:17:18,086
And, this permeates even when we


635
00:17:18,086 --> 00:17:19,526
add back the individual controls


636
00:17:19,526 --> 00:17:20,036
in the window.


637
00:17:20,036 --> 00:17:20,935
They all have this nice


638
00:17:20,935 --> 00:17:22,136
character from the desktop


639
00:17:22,136 --> 00:17:22,465
picture.


640
00:17:23,425 --> 00:17:24,746
So, let me show you what this


641
00:17:24,746 --> 00:17:25,506
looks like with a different


642
00:17:25,506 --> 00:17:26,986
desktop picture, in this case, a


643
00:17:26,986 --> 00:17:27,425
flower.


644
00:17:28,036 --> 00:17:29,866
You can see we have these much


645
00:17:29,866 --> 00:17:31,646
brighter purples and greens in


646
00:17:31,646 --> 00:17:32,606
this desktop picture.


647
00:17:32,886 --> 00:17:33,906
And, that affects the system


648
00:17:33,906 --> 00:17:34,886
preferences window here.


649
00:17:35,496 --> 00:17:36,556
Likewise, if we used a red


650
00:17:36,556 --> 00:17:38,106
flower instead, you can really


651
00:17:38,106 --> 00:17:39,546
see in this case, how the System


652
00:17:39,546 --> 00:17:41,286
Preferences window is taking


653
00:17:41,286 --> 00:17:42,826
that wonderful warm character


654
00:17:42,826 --> 00:17:44,196
from the desktop picture and


655
00:17:44,196 --> 00:17:45,536
propagating it to all of the UI


656
00:17:45,626 --> 00:17:46,126
elements.


657
00:17:47,106 --> 00:17:49,506
So, a really common thing you


658
00:17:49,506 --> 00:17:50,786
might be wondering with this is,


659
00:17:50,786 --> 00:17:52,176
that sounds like a lot of work


660
00:17:52,176 --> 00:17:53,736
to dynamically figure out where


661
00:17:53,736 --> 00:17:55,276
a window is, what the average


662
00:17:55,276 --> 00:17:57,206
color is, and you know, update


663
00:17:57,206 --> 00:17:57,646
it live.


664
00:17:57,986 --> 00:17:59,626
So, my first advice to you is


665
00:17:59,926 --> 00:18:01,536
don't be daunted by this task.


666
00:18:01,786 --> 00:18:03,026
AppKit is going to help you.


667
00:18:04,336 --> 00:18:05,976
So, there's some great classes


668
00:18:05,976 --> 00:18:06,826
you're already familiar with


669
00:18:06,826 --> 00:18:07,886
that are just going to do the


670
00:18:07,886 --> 00:18:09,056
right thing out of the box.


671
00:18:09,376 --> 00:18:10,486
And, it's Window, and it's


672
00:18:10,486 --> 00:18:11,806
ScrollView, and it's TableView,


673
00:18:11,806 --> 00:18:12,546
and it's CollectionView.


674
00:18:12,816 --> 00:18:14,266
All of these will look great in


675
00:18:14,266 --> 00:18:15,716
Dark Mode without any changes.


676
00:18:16,126 --> 00:18:16,876
But, if you want to get your


677
00:18:16,876 --> 00:18:18,596
hands on them, you can also


678
00:18:18,596 --> 00:18:20,466
tweak these a little bit.


679
00:18:20,816 --> 00:18:21,926
Each of these classes has a


680
00:18:21,926 --> 00:18:23,126
background color property.


681
00:18:23,336 --> 00:18:24,706
And, there's four very special


682
00:18:24,816 --> 00:18:26,386
NS colors I want to mention, the


683
00:18:26,386 --> 00:18:27,806
control background color, the


684
00:18:27,806 --> 00:18:29,336
window background color, and the


685
00:18:29,336 --> 00:18:30,766
underpage and text background


686
00:18:30,796 --> 00:18:31,126
colors.


687
00:18:31,456 --> 00:18:32,676
And these all, when used with


688
00:18:32,676 --> 00:18:34,586
these classes, get that nice bit


689
00:18:34,586 --> 00:18:36,356
of desktop picture infusion, and


690
00:18:36,356 --> 00:18:37,436
all look slightly different


691
00:18:37,436 --> 00:18:38,566
depending on the role of the UI


692
00:18:38,646 --> 00:18:39,406
element you're trying to


693
00:18:39,406 --> 00:18:39,996
construct.


694
00:18:41,176 --> 00:18:42,526
One other class I really want to


695
00:18:42,526 --> 00:18:44,566
call out for this purpose is the


696
00:18:44,566 --> 00:18:45,516
NSBox class.


697
00:18:45,916 --> 00:18:47,386
If you configure a box as a


698
00:18:47,386 --> 00:18:49,066
custom style, you can use its


699
00:18:49,066 --> 00:18:50,626
fill color property with one of


700
00:18:50,626 --> 00:18:51,826
these special NS colors, or


701
00:18:51,826 --> 00:18:53,186
really any other NS color, too.


702
00:18:53,666 --> 00:18:55,106
But, that's significant, because


703
00:18:55,106 --> 00:18:56,466
NSBox can be used to just add


704
00:18:56,466 --> 00:18:57,856
wonderful color fills to pieces


705
00:18:57,856 --> 00:18:59,296
of your UI, whereas these other


706
00:18:59,296 --> 00:19:00,546
classes are a little bit more


707
00:19:00,546 --> 00:19:01,296
special case.


708
00:19:02,446 --> 00:19:04,656
So, if you really want to get


709
00:19:04,656 --> 00:19:05,926
into detail on this, there's


710
00:19:05,926 --> 00:19:07,336
another AppKit class I want to


711
00:19:07,336 --> 00:19:08,186
mention, which is


712
00:19:08,276 --> 00:19:09,356
NSVisualEffectView.


713
00:19:09,956 --> 00:19:11,376
And, NSVisualEffectView has this


714
00:19:11,376 --> 00:19:13,336
material property that allows


715
00:19:13,336 --> 00:19:14,606
you to determine how the visual


716
00:19:14,606 --> 00:19:15,256
effect you use is going to


717
00:19:15,256 --> 00:19:16,576
process the background behind


718
00:19:16,576 --> 00:19:17,746
it, and what sort of blending


719
00:19:17,746 --> 00:19:19,146
operations it's going to do.


720
00:19:19,366 --> 00:19:20,376
And, we have a few of these to


721
00:19:20,376 --> 00:19:21,736
describe where the


722
00:19:21,736 --> 00:19:23,426
visualEffectView's being used in


723
00:19:23,426 --> 00:19:24,316
your UI.


724
00:19:24,456 --> 00:19:26,546
In macOS 10.14, we've added a


725
00:19:26,546 --> 00:19:27,226
lot more.


726
00:19:27,476 --> 00:19:28,686
So, pretty much whatever sort of


727
00:19:28,686 --> 00:19:30,016
UI you're trying to construct,


728
00:19:30,016 --> 00:19:31,286
we should have a material that's


729
00:19:31,286 --> 00:19:32,636
appropriate for that use case.


730
00:19:33,376 --> 00:19:34,876
In previous OS's, you'll note we


731
00:19:34,876 --> 00:19:36,116
had some materials labeled


732
00:19:36,436 --> 00:19:38,026
explicitly as light or dark.


733
00:19:38,276 --> 00:19:38,986
And, you're going to want to


734
00:19:38,986 --> 00:19:40,156
stay away from those, as they're


735
00:19:40,156 --> 00:19:41,726
not going to look right across


736
00:19:41,726 --> 00:19:42,836
our many new appearances.


737
00:19:43,426 --> 00:19:46,466
So, that brings me to another


738
00:19:46,466 --> 00:19:47,986
topic, which is accent colors.


739
00:19:48,686 --> 00:19:49,966
If we go ahead and look at these


740
00:19:49,966 --> 00:19:51,296
UI elements, we can see there's


741
00:19:51,296 --> 00:19:53,086
this delightful splash of view,


742
00:19:53,086 --> 00:19:55,376
of color, in a lot of these


743
00:19:55,376 --> 00:19:55,826
elements.


744
00:19:56,336 --> 00:19:59,826
And, in macOS 10.14, we've added


745
00:20:00,116 --> 00:20:01,226
a number of new accent colors


746
00:20:01,226 --> 00:20:01,976
for users to select.


747
00:20:02,096 --> 00:20:03,336
And, all of these look


748
00:20:03,336 --> 00:20:04,056
absolutely great.


749
00:20:04,876 --> 00:20:06,256
But, if you're making your own


750
00:20:06,256 --> 00:20:07,536
UI elements-- I'll pause for


751
00:20:07,536 --> 00:20:07,946
applause.


752
00:20:08,516 --> 00:20:12,806
[ Applause ]


753
00:20:13,306 --> 00:20:14,256
Thank you, accent colors.


754
00:20:14,906 --> 00:20:16,146
Anyway, if you're making your


755
00:20:16,146 --> 00:20:17,156
own UI elements, you might be


756
00:20:17,156 --> 00:20:18,286
trying to make this motif


757
00:20:18,286 --> 00:20:19,426
yourself, and incorporate that


758
00:20:19,426 --> 00:20:20,196
splash of color.


759
00:20:20,516 --> 00:20:21,856
So, if you've done that in the


760
00:20:21,856 --> 00:20:23,366
past, you've probably been using


761
00:20:23,366 --> 00:20:25,266
the NSColor.currentControlTint


762
00:20:25,266 --> 00:20:26,296
method, which returns this


763
00:20:26,296 --> 00:20:27,546
enumeration saying whether the


764
00:20:27,546 --> 00:20:28,796
system's running in aqua or


765
00:20:28,796 --> 00:20:29,476
graphite mode.


766
00:20:29,886 --> 00:20:31,256
So, we have way more colors than


767
00:20:31,256 --> 00:20:31,666
that now.


768
00:20:31,896 --> 00:20:32,976
That enumeration's not going to


769
00:20:32,976 --> 00:20:33,616
do the job.


770
00:20:34,046 --> 00:20:36,386
So, in macOS 10.14, we'd urge


771
00:20:36,386 --> 00:20:37,776
you to instead, switch to the


772
00:20:37,776 --> 00:20:39,736
controlAccentColor method on


773
00:20:39,776 --> 00:20:40,316
NSColor.


774
00:20:41,416 --> 00:20:44,066
So, NSColor doesn't stop helping


775
00:20:44,066 --> 00:20:45,196
you with accent colors.


776
00:20:45,456 --> 00:20:46,436
There's a number of other things


777
00:20:46,436 --> 00:20:46,836
it does.


778
00:20:47,386 --> 00:20:48,686
If you're making a UI element,


779
00:20:48,906 --> 00:20:50,116
one of the common features


780
00:20:50,116 --> 00:20:51,556
you're going to want to do is


781
00:20:51,646 --> 00:20:52,946
adjusting the color of that UI


782
00:20:53,016 --> 00:20:54,176
element to reflect user


783
00:20:54,176 --> 00:20:54,956
interaction with it.


784
00:20:55,416 --> 00:20:56,956
So, NSColor introduces a new


785
00:20:56,956 --> 00:20:58,716
method called .withSystemEffect.


786
00:20:59,336 --> 00:21:00,396
And, we've defined a number of


787
00:21:00,396 --> 00:21:01,686
system effects for interaction,


788
00:21:01,686 --> 00:21:02,576
like the pressed state or the


789
00:21:02,576 --> 00:21:04,036
disabled state, and we'll go


790
00:21:04,036 --> 00:21:05,616
ahead and apply a recipe to a


791
00:21:05,616 --> 00:21:07,066
base color to produce a new


792
00:21:07,066 --> 00:21:08,736
color that's appropriate for the


793
00:21:08,736 --> 00:21:10,176
current appearance as well as a


794
00:21:10,176 --> 00:21:11,716
sort of interaction being done


795
00:21:11,716 --> 00:21:12,406
with that control.


796
00:21:12,956 --> 00:21:13,806
So, this will save you the


797
00:21:13,806 --> 00:21:14,906
trouble of having to develop a


798
00:21:14,906 --> 00:21:17,366
formula yourself for modifying a


799
00:21:17,366 --> 00:21:18,506
color for these states.


800
00:21:18,506 --> 00:21:19,636
And, it'll also save you from


801
00:21:19,636 --> 00:21:20,676
cases where you might have a


802
00:21:20,676 --> 00:21:22,266
really long list of hard-coded


803
00:21:22,266 --> 00:21:23,136
colors for different


804
00:21:23,136 --> 00:21:23,766
interactions.


805
00:21:24,126 --> 00:21:25,846
So, it's a great API to make use


806
00:21:25,846 --> 00:21:25,966
of.


807
00:21:26,996 --> 00:21:29,576
We're going to talk about color


808
00:21:29,576 --> 00:21:30,136
for a bit more.


809
00:21:30,446 --> 00:21:31,926
In this case, a new feature of


810
00:21:31,926 --> 00:21:34,086
macOS 10.14, is what we call the


811
00:21:34,086 --> 00:21:34,966
content tint color.


812
00:21:35,996 --> 00:21:36,906
If you look at my mock


813
00:21:36,906 --> 00:21:38,706
application here, you can see


814
00:21:38,706 --> 00:21:40,036
it's mostly user content, it's


815
00:21:40,036 --> 00:21:40,816
mostly text.


816
00:21:41,296 --> 00:21:42,426
But, there's a few elements that


817
00:21:42,426 --> 00:21:44,316
I want to call attention to.


818
00:21:45,336 --> 00:21:47,516
These are things where the user


819
00:21:47,516 --> 00:21:48,596
can click on them to perform


820
00:21:48,596 --> 00:21:49,146
more actions.


821
00:21:49,476 --> 00:21:50,486
And, I didn't want to use the


822
00:21:50,486 --> 00:21:52,276
normal button borders because I


823
00:21:52,276 --> 00:21:53,536
felt that, kind of, overwhelmed


824
00:21:53,536 --> 00:21:54,026
the content.


825
00:21:54,586 --> 00:21:56,606
But, in macOS 10.14, we're going


826
00:21:56,606 --> 00:21:57,686
to let you tint borderless


827
00:21:57,686 --> 00:21:59,236
buttons and image views to call


828
00:21:59,236 --> 00:22:00,386
them out, so the user can still


829
00:22:00,386 --> 00:22:02,066
recognize these as clickable and


830
00:22:02,066 --> 00:22:02,616
interactable.


831
00:22:03,846 --> 00:22:05,146
So, that's really easy to do.


832
00:22:06,116 --> 00:22:08,586
NSButton and NSImageView, both


833
00:22:08,586 --> 00:22:09,536
have a new property called


834
00:22:09,536 --> 00:22:10,456
contentTintColor.


835
00:22:10,816 --> 00:22:11,916
You can set it to any color you


836
00:22:11,916 --> 00:22:13,236
want, to those dynamic colors I


837
00:22:13,236 --> 00:22:14,276
mentioned earlier are great


838
00:22:14,276 --> 00:22:14,856
candidates.


839
00:22:15,776 --> 00:22:16,826
You can also set these up in


840
00:22:16,826 --> 00:22:17,596
Interface Builder.


841
00:22:17,926 --> 00:22:19,256
So, this is what the UI looks


842
00:22:19,256 --> 00:22:20,436
like for configuring buttons.


843
00:22:20,726 --> 00:22:21,986
And, this is what it looks like


844
00:22:21,986 --> 00:22:23,106
for configuring image views.


845
00:22:23,576 --> 00:22:25,066
The tint option is here on the


846
00:22:25,066 --> 00:22:27,936
right, in the sidebar.


847
00:22:28,396 --> 00:22:29,836
So, we've covered a lot of great


848
00:22:29,836 --> 00:22:31,516
stuff about what you can do with


849
00:22:31,516 --> 00:22:32,706
the new appearance in macOS


850
00:22:32,706 --> 00:22:33,446
10.14.


851
00:22:33,706 --> 00:22:35,146
We have more sessions on it, but


852
00:22:35,146 --> 00:22:36,696
they're in the WWDC app, if you


853
00:22:36,696 --> 00:22:37,666
look at our latest sessions.


854
00:22:37,976 --> 00:22:40,376
They're both absolutely great.


855
00:22:40,556 --> 00:22:41,406
Which brings me to my next


856
00:22:41,406 --> 00:22:41,706
topic.


857
00:22:42,896 --> 00:22:44,026
No discussion of Cocoa is


858
00:22:44,026 --> 00:22:45,316
complete without some talk of


859
00:22:45,316 --> 00:22:45,976
layer backing.


860
00:22:47,436 --> 00:22:48,946
So, I wanted to let you all know


861
00:22:49,096 --> 00:22:51,056
that in macOS 10.14, when you


862
00:22:51,056 --> 00:22:52,046
link against the new SDK,


863
00:22:52,046 --> 00:22:54,666
AppKit's not going to use a


864
00:22:54,666 --> 00:22:56,066
legacy window backing store any


865
00:22:56,066 --> 00:22:56,296
more.


866
00:22:56,596 --> 00:22:58,016
It's going to provide all of


867
00:22:58,016 --> 00:22:59,246
this content to the window


868
00:22:59,246 --> 00:23:00,906
server using core animation


869
00:23:00,906 --> 00:23:01,376
layers.


870
00:23:02,106 --> 00:23:03,326
And, a lot of you who do


871
00:23:03,326 --> 00:23:04,456
development on iOS are going to


872
00:23:04,456 --> 00:23:05,476
think this sounds really


873
00:23:05,476 --> 00:23:06,156
familiar to me.


874
00:23:06,156 --> 00:23:07,476
But, let's take a look at what


875
00:23:07,476 --> 00:23:08,416
actually goes on here.


876
00:23:09,186 --> 00:23:11,256
So, if we have a tree of views


877
00:23:11,256 --> 00:23:12,596
like this, in UIKit, the


878
00:23:12,626 --> 00:23:13,936
relationship between views and


879
00:23:13,936 --> 00:23:14,966
layers is really simple.


880
00:23:15,306 --> 00:23:16,716
Every view gets exactly one


881
00:23:16,716 --> 00:23:17,076
layer.


882
00:23:17,516 --> 00:23:18,506
And, the parent/child


883
00:23:18,506 --> 00:23:20,196
relationship between views is


884
00:23:20,196 --> 00:23:21,676
mirrored in the layer tree also.


885
00:23:22,686 --> 00:23:24,446
But in AppKit, we create the


886
00:23:24,446 --> 00:23:26,696
layer tree as a process of-- or


887
00:23:26,696 --> 00:23:28,106
as a side effect of processing


888
00:23:28,416 --> 00:23:29,156
the view hierarchy.


889
00:23:29,986 --> 00:23:31,856
So, we can wind up in cases


890
00:23:31,856 --> 00:23:33,246
where we might decide to take


891
00:23:33,246 --> 00:23:34,836
many views, and use a single


892
00:23:34,836 --> 00:23:35,436
layer for that.


893
00:23:35,806 --> 00:23:37,166
And, that's great because it can


894
00:23:37,166 --> 00:23:38,036
reduce system memory


895
00:23:38,036 --> 00:23:39,786
consumption, and GPU memory


896
00:23:39,786 --> 00:23:41,736
consumption, and also gives the


897
00:23:41,736 --> 00:23:43,276
window server a little less load


898
00:23:43,276 --> 00:23:44,416
to process when it's rendering


899
00:23:44,416 --> 00:23:44,946
the screen.


900
00:23:45,456 --> 00:23:46,896
Something I really want to point


901
00:23:46,896 --> 00:23:48,126
out here, though, is that this


902
00:23:48,126 --> 00:23:49,276
is dynamic based on the


903
00:23:49,276 --> 00:23:50,256
configuration of the view


904
00:23:50,256 --> 00:23:51,276
hierarchy.


905
00:23:51,376 --> 00:23:52,646
So, it can change moment to


906
00:23:52,646 --> 00:23:52,966
moment.


907
00:23:53,306 --> 00:23:55,196
So, you really can't rely on


908
00:23:55,196 --> 00:23:56,506
having this fixed parent/child


909
00:23:56,506 --> 00:23:58,006
relationship between views and


910
00:23:58,006 --> 00:23:58,946
layers like you might on iOS.


911
00:24:03,436 --> 00:24:05,126
So, programmatically one of the


912
00:24:05,126 --> 00:24:06,776
changes you no longer have to


913
00:24:06,776 --> 00:24:08,726
care about here is that you


914
00:24:08,726 --> 00:24:09,946
don't have to explicitly set


915
00:24:09,946 --> 00:24:11,436
.wantsLayer on your views to use


916
00:24:11,436 --> 00:24:12,206
layers anymore.


917
00:24:12,206 --> 00:24:13,386
AppKit will take care of this


918
00:24:13,386 --> 00:24:14,846
for you when you're deploying


919
00:24:14,846 --> 00:24:16,506
against macOS 10.14.


920
00:24:16,936 --> 00:24:19,976
If you're deploying against--


921
00:24:20,516 --> 00:24:24,566
[ Applause ]


922
00:24:25,066 --> 00:24:27,576
In fact, we generally encourage


923
00:24:27,576 --> 00:24:28,986
you not to even use this


924
00:24:28,986 --> 00:24:30,596
property, because if you set it


925
00:24:30,596 --> 00:24:32,056
explicitly to true, we're going


926
00:24:32,056 --> 00:24:33,146
to make sure your view gets its


927
00:24:33,146 --> 00:24:34,326
own layer, and we're not going


928
00:24:34,326 --> 00:24:35,666
to do the optimizations we can


929
00:24:35,666 --> 00:24:37,306
do, where we render multiple


930
00:24:37,306 --> 00:24:38,476
views into a single layer.


931
00:24:39,056 --> 00:24:40,406
You might also need to still use


932
00:24:40,406 --> 00:24:41,176
this if you're deploying to


933
00:24:41,176 --> 00:24:42,956
earlier OS's, but usually you


934
00:24:42,956 --> 00:24:44,136
can still get away with ignoring


935
00:24:45,446 --> 00:24:45,516
it.


936
00:24:45,846 --> 00:24:46,826
I wanted to talk about some


937
00:24:46,826 --> 00:24:48,546
other patterns you might have in


938
00:24:48,636 --> 00:24:50,256
NSView UI's you are making that


939
00:24:50,256 --> 00:24:51,076
use CALayers.


940
00:24:51,456 --> 00:24:53,206
So, one of the easiest ways to


941
00:24:53,206 --> 00:24:54,606
draw a CALayer, is to just


942
00:24:54,606 --> 00:24:56,006
override the draw method in the


943
00:24:56,006 --> 00:24:56,776
CALayer class.


944
00:24:57,196 --> 00:24:58,916
Or, implement a delegate method.


945
00:24:59,536 --> 00:25:00,966
And, this is mostly fine, but


946
00:25:00,966 --> 00:25:02,306
NSView actually gives you a lot


947
00:25:02,306 --> 00:25:03,636
of functionality you probably


948
00:25:03,636 --> 00:25:04,796
don't want to have to replicate


949
00:25:04,796 --> 00:25:05,276
yourself.


950
00:25:05,836 --> 00:25:08,526
If you use NSView's draw method,


951
00:25:08,706 --> 00:25:09,886
it'll go ahead and take care of


952
00:25:09,886 --> 00:25:11,056
things like making sure that the


953
00:25:11,056 --> 00:25:12,226
appearance works correctly for


954
00:25:12,226 --> 00:25:13,056
dynamic colors.


955
00:25:13,336 --> 00:25:14,586
It'll manage the backing store


956
00:25:14,586 --> 00:25:15,476
resolution for you.


957
00:25:15,876 --> 00:25:17,156
And, it's really just as simple


958
00:25:17,156 --> 00:25:18,266
as implementing the layer


959
00:25:18,266 --> 00:25:18,706
methods.


960
00:25:18,986 --> 00:25:19,986
So, I really encourage you to


961
00:25:19,986 --> 00:25:21,166
override drawing at the view


962
00:25:21,166 --> 00:25:22,206
level instead of the layer


963
00:25:22,206 --> 00:25:22,516
level.


964
00:25:23,626 --> 00:25:25,576
Sometimes you'll have cases


965
00:25:25,916 --> 00:25:27,606
where you were implementing the


966
00:25:27,606 --> 00:25:29,016
display method of CALayer


967
00:25:29,016 --> 00:25:30,216
instead, and you're updating


968
00:25:30,216 --> 00:25:31,486
layer properties directly,


969
00:25:31,716 --> 00:25:32,486
because maybe it's more


970
00:25:32,486 --> 00:25:33,706
efficient, or really expresses


971
00:25:33,706 --> 00:25:34,786
what you're trying to accomplish


972
00:25:34,786 --> 00:25:35,136
better.


973
00:25:35,446 --> 00:25:37,426
You can still do that using the


974
00:25:37,426 --> 00:25:39,196
NSView API by overriding the


975
00:25:39,196 --> 00:25:40,806
update layer method, and you get


976
00:25:40,806 --> 00:25:42,106
all the same benefits you do by


977
00:25:42,106 --> 00:25:43,446
using the NSView draw rect


978
00:25:43,446 --> 00:25:43,786
method.


979
00:25:44,556 --> 00:25:46,756
A quirk I want to point out, is


980
00:25:46,756 --> 00:25:48,026
you can implement both update


981
00:25:48,026 --> 00:25:49,646
layer, and the draw methods on


982
00:25:49,686 --> 00:25:50,226
NSView.


983
00:25:50,846 --> 00:25:52,256
If you do this, when your view


984
00:25:52,256 --> 00:25:53,576
has a single layer backing it,


985
00:25:53,576 --> 00:25:54,496
we'll go ahead and use the


986
00:25:54,496 --> 00:25:55,546
optimal layer version.


987
00:25:56,006 --> 00:25:57,296
And, if you're being merged with


988
00:25:57,296 --> 00:25:58,546
other views to save memory,


989
00:25:58,896 --> 00:25:59,976
we'll go ahead and use the draw


990
00:25:59,976 --> 00:26:00,536
rect version.


991
00:26:00,746 --> 00:26:01,996
And, we also use that for things


992
00:26:01,996 --> 00:26:02,556
like printing.


993
00:26:02,616 --> 00:26:03,916
So, it's fine to implement both


994
00:26:03,916 --> 00:26:04,296
of these.


995
00:26:05,056 --> 00:26:06,386
If you have a view that you


996
00:26:06,386 --> 00:26:07,726
really can't express using the


997
00:26:07,806 --> 00:26:09,346
CG drawing API's, or the AppKit


998
00:26:09,346 --> 00:26:11,336
drawing API's, you can, in


999
00:26:11,336 --> 00:26:12,406
addition to the update layer


1000
00:26:12,406 --> 00:26:13,576
method, override


1001
00:26:13,576 --> 00:26:15,796
wantsUpdateLayer, and if you


1002
00:26:15,796 --> 00:26:16,906
just return "true" from that, we


1003
00:26:16,906 --> 00:26:18,186
know that you need an explicit


1004
00:26:18,186 --> 00:26:19,716
layer to do what you want to


1005
00:26:19,716 --> 00:26:20,216
accomplish.


1006
00:26:22,276 --> 00:26:24,626
There's another way of taking


1007
00:26:24,626 --> 00:26:26,476
best advantage of AppKit and


1008
00:26:26,476 --> 00:26:27,746
core animations features here,


1009
00:26:27,976 --> 00:26:29,236
and that's just to build your


1010
00:26:29,236 --> 00:26:30,206
UI's out of a very simple


1011
00:26:30,206 --> 00:26:33,096
vocabulary of basic NSViews.


1012
00:26:33,456 --> 00:26:35,166
NSImageView, NSBox, and


1013
00:26:35,166 --> 00:26:36,926
NSTextField, these are all


1014
00:26:36,926 --> 00:26:38,336
really great building blocks to


1015
00:26:38,336 --> 00:26:39,446
make complicated UI's, and


1016
00:26:39,666 --> 00:26:40,766
they'll do the right thing no


1017
00:26:40,766 --> 00:26:42,286
matter what technologies we pick


1018
00:26:42,286 --> 00:26:43,546
to actually render to the


1019
00:26:43,546 --> 00:26:43,966
screen.


1020
00:26:45,606 --> 00:26:46,546
With our changes to layer


1021
00:26:46,546 --> 00:26:48,376
backing, there's a few patterns


1022
00:26:48,376 --> 00:26:49,566
I want to call out that aren't


1023
00:26:49,566 --> 00:26:50,996
going to work in macOS 10.14


1024
00:26:50,996 --> 00:26:51,396
anymore.


1025
00:26:51,996 --> 00:26:53,616
If you're using NSView lockFocus


1026
00:26:53,616 --> 00:26:55,106
and unlockFocus, or trying to


1027
00:26:55,106 --> 00:26:56,566
access the window's graphics


1028
00:26:56,566 --> 00:26:59,046
contents directly, there's a


1029
00:26:59,046 --> 00:27:00,116
better way of doing that.


1030
00:27:00,116 --> 00:27:01,656
You should just subclass NSView


1031
00:27:01,656 --> 00:27:02,556
and implement draw rect.


1032
00:27:02,846 --> 00:27:04,786
Both of those methods have been


1033
00:27:04,786 --> 00:27:06,876
kind of finicky for a while.


1034
00:27:06,916 --> 00:27:07,836
So, you'll be saving yourself


1035
00:27:07,836 --> 00:27:08,326
some trouble.


1036
00:27:08,756 --> 00:27:09,716
The other thing I want to point


1037
00:27:09,716 --> 00:27:10,686
out is I've actually written


1038
00:27:10,686 --> 00:27:12,236
these in Objective-C, which is a


1039
00:27:12,236 --> 00:27:13,606
little weird for a talk that's


1040
00:27:13,606 --> 00:27:14,986
mostly in Swift.


1041
00:27:14,986 --> 00:27:16,486
And, the really great news about


1042
00:27:16,486 --> 00:27:18,146
this is I've never actually seen


1043
00:27:18,146 --> 00:27:19,676
any Swift code using these.


1044
00:27:20,276 --> 00:27:21,656
The takeaway from that is I


1045
00:27:21,656 --> 00:27:22,986
really don't want any of you to


1046
00:27:22,986 --> 00:27:24,456
be the first to go ahead and


1047
00:27:24,456 --> 00:27:25,056
surprise me.


1048
00:27:26,456 --> 00:27:29,816
So, we have one more thing about


1049
00:27:29,816 --> 00:27:31,086
our changes with layer backing.


1050
00:27:31,456 --> 00:27:33,326
If you're using NSOpenGL classes


1051
00:27:33,326 --> 00:27:34,726
to render with OpenGL, and you


1052
00:27:34,726 --> 00:27:37,106
link against macOS 10.14, some


1053
00:27:37,106 --> 00:27:38,466
of our implementation details


1054
00:27:38,466 --> 00:27:39,756
for how we bind the OpenGL


1055
00:27:39,756 --> 00:27:41,576
system to our layers are a bit


1056
00:27:41,576 --> 00:27:41,976
different.


1057
00:27:41,976 --> 00:27:43,146
And, you may notice a few small


1058
00:27:43,146 --> 00:27:43,816
changes there.


1059
00:27:44,576 --> 00:27:45,846
But, more importantly, I want to


1060
00:27:45,846 --> 00:27:48,206
call out that as of macOS 10.14,


1061
00:27:48,426 --> 00:27:49,756
OpenGL on our platform is


1062
00:27:49,806 --> 00:27:50,426
deprecated.


1063
00:27:51,016 --> 00:27:52,626
If you've been using NSOpenGL


1064
00:27:52,626 --> 00:27:54,286
view, we really encourage you to


1065
00:27:54,286 --> 00:27:55,846
adopt MTKView instead.


1066
00:27:55,956 --> 00:27:57,166
And, there's a great session


1067
00:27:57,166 --> 00:27:58,676
coming up later today about


1068
00:27:58,676 --> 00:27:59,986
adopting Metal for OpenGL


1069
00:27:59,986 --> 00:28:00,556
developers.


1070
00:28:03,286 --> 00:28:04,816
There's one last change I want


1071
00:28:04,816 --> 00:28:06,256
to talk about, which is a change


1072
00:28:06,256 --> 00:28:07,706
we've made to font antialiasing.


1073
00:28:08,526 --> 00:28:09,796
If you go ahead and look at this


1074
00:28:09,796 --> 00:28:11,386
screen comparison, I have macOS


1075
00:28:11,386 --> 00:28:13,546
10.13 on the left, and macOS


1076
00:28:13,546 --> 00:28:14,656
10.14 on the right.


1077
00:28:14,656 --> 00:28:16,036
And, if you look at the text in


1078
00:28:16,036 --> 00:28:17,616
this window, it's basically


1079
00:28:17,616 --> 00:28:18,186
identical.


1080
00:28:18,896 --> 00:28:21,416
But, if we zoom in, all the way


1081
00:28:21,416 --> 00:28:23,676
to a 48X scale factor, we can


1082
00:28:23,766 --> 00:28:26,246
see that macOS 10.13 is using


1083
00:28:26,246 --> 00:28:27,506
this color-fringing effect for


1084
00:28:27,506 --> 00:28:28,366
its font rendering.


1085
00:28:29,216 --> 00:28:32,836
In macOS 10.14, we no longer use


1086
00:28:32,836 --> 00:28:33,326
that effect.


1087
00:28:33,596 --> 00:28:34,796
And, this means our text looks


1088
00:28:34,796 --> 00:28:36,806
great on a much wider variety of


1089
00:28:36,806 --> 00:28:38,436
panel technologies, as well as


1090
00:28:38,436 --> 00:28:39,276
scaling modes.


1091
00:28:40,316 --> 00:28:42,166
So, we have a bunch of other


1092
00:28:42,166 --> 00:28:43,096
great things to cover.


1093
00:28:43,406 --> 00:28:44,226
And, at this point I'd like to


1094
00:28:44,226 --> 00:28:45,676
invite Jesse onstage to go over


1095
00:28:45,676 --> 00:28:45,956
those.


1096
00:28:46,516 --> 00:28:51,686
[ Applause ]


1097
00:28:52,186 --> 00:28:52,716
>> Thanks, Chris.


1098
00:28:53,116 --> 00:28:53,536
Hi everyone.


1099
00:28:53,536 --> 00:28:54,466
It's great to see you here


1100
00:28:54,466 --> 00:28:54,876
today.


1101
00:28:55,506 --> 00:28:56,746
I have a bunch of topics to


1102
00:28:56,746 --> 00:28:57,236
cover.


1103
00:28:57,236 --> 00:28:58,236
And, I'd like to start with the


1104
00:28:58,236 --> 00:28:59,546
user notifications framework.


1105
00:28:59,976 --> 00:29:01,506
This has been available in iOS


1106
00:29:01,506 --> 00:29:02,806
for some time now, and with


1107
00:29:02,806 --> 00:29:04,846
macOS Mojave, we're bringing it


1108
00:29:04,846 --> 00:29:05,316
to the Mac.


1109
00:29:07,646 --> 00:29:09,546
This allows for better control


1110
00:29:09,546 --> 00:29:10,676
of user notifications.


1111
00:29:11,226 --> 00:29:12,126
And, it also means that your


1112
00:29:12,126 --> 00:29:13,246
apps can interact with them the


1113
00:29:13,296 --> 00:29:14,986
same way that they do on iOS.


1114
00:29:15,676 --> 00:29:17,576
They should do that using the


1115
00:29:17,576 --> 00:29:18,666
NSApplication method,


1116
00:29:18,886 --> 00:29:20,486
registerForRemoteNotifications,


1117
00:29:21,176 --> 00:29:21,976
as well as the


1118
00:29:21,976 --> 00:29:24,296
requestAuthorization method on


1119
00:29:24,476 --> 00:29:25,536
userNotificationCenter.


1120
00:29:27,306 --> 00:29:28,676
As a part of this work, we're


1121
00:29:28,676 --> 00:29:30,406
also deprecating some existing


1122
00:29:30,806 --> 00:29:32,786
user notification-related API's.


1123
00:29:32,826 --> 00:29:34,956
Specifically, in NSApplication,


1124
00:29:35,316 --> 00:29:36,126
we're deprecating the


1125
00:29:36,126 --> 00:29:37,296
remoteNotificationType


1126
00:29:37,386 --> 00:29:39,416
OptionSet, as well as the


1127
00:29:39,656 --> 00:29:41,276
registerForRemoteNotifications


1128
00:29:41,276 --> 00:29:41,776
method and the


1129
00:29:41,776 --> 00:29:43,566
enabledRemoteNotificationTypes


1130
00:29:44,186 --> 00:29:44,576
property.


1131
00:29:45,326 --> 00:29:46,686
We're also deprecating all of


1132
00:29:46,686 --> 00:29:47,846
NSUserNotification.


1133
00:29:49,256 --> 00:29:50,716
So, as you rebuild with the new


1134
00:29:50,876 --> 00:29:52,866
SDK, you should try to update to


1135
00:29:52,866 --> 00:29:53,846
the user notifications


1136
00:29:53,846 --> 00:29:54,256
framework.


1137
00:29:56,586 --> 00:29:57,796
Next, I'd like to talk a little


1138
00:29:57,796 --> 00:29:59,356
bit about NSToolbar.


1139
00:30:00,396 --> 00:30:01,556
When you wanted to center an


1140
00:30:01,556 --> 00:30:02,876
item in the toolbar, you've


1141
00:30:02,876 --> 00:30:05,226
maybe been tempted to put a


1142
00:30:05,226 --> 00:30:07,236
flexible space on both sides of


1143
00:30:07,236 --> 00:30:07,686
your item.


1144
00:30:07,686 --> 00:30:09,446
And, this works, but it has some


1145
00:30:09,446 --> 00:30:09,926
drawbacks.


1146
00:30:10,076 --> 00:30:11,706
Notably, when you add extra


1147
00:30:11,706 --> 00:30:13,106
items to the toolbar, it'll push


1148
00:30:13,106 --> 00:30:14,246
your item off-center.


1149
00:30:14,946 --> 00:30:16,716
So, NSToolbar now exposes a new


1150
00:30:16,716 --> 00:30:17,456
property, the


1151
00:30:17,516 --> 00:30:18,616
centeredItemIdentifier.


1152
00:30:19,406 --> 00:30:20,596
You can set this to the


1153
00:30:20,596 --> 00:30:21,906
identifier of an item you'd like


1154
00:30:21,906 --> 00:30:23,416
to remain centered, and


1155
00:30:23,456 --> 00:30:24,876
NSToolbar will put it there.


1156
00:30:25,486 --> 00:30:26,736
It should stay there unless


1157
00:30:26,736 --> 00:30:28,376
other Toolbar items actually


1158
00:30:28,376 --> 00:30:29,696
force it to be out of place.


1159
00:30:31,276 --> 00:30:32,326
There's another change here


1160
00:30:32,326 --> 00:30:35,426
worth noting as well, which is


1161
00:30:35,426 --> 00:30:38,616
that auto layout is now used to


1162
00:30:38,616 --> 00:30:40,036
measure toolbar items when the


1163
00:30:40,036 --> 00:30:41,816
minimum and maximum sizes are


1164
00:30:41,816 --> 00:30:42,616
not specified.


1165
00:30:44,846 --> 00:30:46,466
This applies only to apps on the


1166
00:30:46,466 --> 00:30:48,746
10.14 SDK, but it means that you


1167
00:30:48,746 --> 00:30:50,066
can do things like change the


1168
00:30:50,066 --> 00:30:52,046
size of the button, and the


1169
00:30:52,046 --> 00:30:52,976
measurement will happen for you.


1170
00:30:53,516 --> 00:30:59,546
[ Applause ]


1171
00:31:00,046 --> 00:31:01,546
The centeredItemIdentifier


1172
00:31:01,766 --> 00:31:03,306
behavior is also available


1173
00:31:03,306 --> 00:31:04,546
through Interface Builder.


1174
00:31:04,546 --> 00:31:05,916
So, here's the inspector pane


1175
00:31:05,916 --> 00:31:08,016
for a Toolbar item.


1176
00:31:08,016 --> 00:31:08,846
You can see there's a new


1177
00:31:08,846 --> 00:31:10,196
checkbox at the bottom, "Is


1178
00:31:10,196 --> 00:31:10,906
Centered Item."


1179
00:31:11,206 --> 00:31:12,766
You can click this instead of


1180
00:31:12,766 --> 00:31:13,836
setting the property from your


1181
00:31:13,836 --> 00:31:15,336
code, and so there's no need to


1182
00:31:15,336 --> 00:31:16,486
fall back to the programmatic


1183
00:31:16,486 --> 00:31:16,666
API.


1184
00:31:16,666 --> 00:31:18,366
You can continue to do all your


1185
00:31:18,366 --> 00:31:20,016
UI work inside Interface


1186
00:31:20,056 --> 00:31:20,306
Builder.


1187
00:31:21,916 --> 00:31:22,916
And, speaking of Interface


1188
00:31:22,916 --> 00:31:24,696
Builder, I can't tell you how


1189
00:31:24,696 --> 00:31:26,286
excited I am about Interface


1190
00:31:26,326 --> 00:31:27,826
Builder's new support for


1191
00:31:27,826 --> 00:31:29,436
editing, NSGridViews.


1192
00:31:30,726 --> 00:31:31,646
If you're not familiar with


1193
00:31:31,646 --> 00:31:33,066
gridView, we introduced it a


1194
00:31:33,066 --> 00:31:34,636
couple of years ago, and it's a


1195
00:31:34,636 --> 00:31:36,046
layout primitive for rendering


1196
00:31:36,046 --> 00:31:37,216
your views in a grid-like


1197
00:31:37,336 --> 00:31:37,656
pattern.


1198
00:31:38,136 --> 00:31:39,166
This is an example from a


1199
00:31:39,166 --> 00:31:40,276
keychain access app.


1200
00:31:40,276 --> 00:31:42,026
And, you can imagine how many


1201
00:31:42,026 --> 00:31:43,326
little constraints would be


1202
00:31:43,326 --> 00:31:45,116
necessary to create this layout


1203
00:31:45,146 --> 00:31:45,716
by hand.


1204
00:31:46,186 --> 00:31:47,206
You could also build it with


1205
00:31:47,326 --> 00:31:49,436
stackViews, but NSGridView makes


1206
00:31:49,436 --> 00:31:51,456
the whole thing much easier, and


1207
00:31:51,456 --> 00:31:52,936
the new editing support in


1208
00:31:52,936 --> 00:31:54,266
Interface Builder is just


1209
00:31:54,266 --> 00:31:54,826
fantastic.


1210
00:31:54,826 --> 00:31:56,066
Let me show it to you.


1211
00:31:57,396 --> 00:31:58,896
So, here's some UI from a


1212
00:31:58,896 --> 00:31:59,846
storyboard file.


1213
00:32:00,286 --> 00:32:01,846
You can select these controls,


1214
00:32:02,176 --> 00:32:03,766
and embed them in a grid view.


1215
00:32:03,766 --> 00:32:05,216
And, once you've done that, you


1216
00:32:05,216 --> 00:32:06,486
can go through and adjust the


1217
00:32:06,486 --> 00:32:07,826
padding and the alignment of the


1218
00:32:07,946 --> 00:32:09,586
cells in order to achieve the


1219
00:32:09,586 --> 00:32:10,646
layout that you want.


1220
00:32:11,876 --> 00:32:13,756
The editing UI works a lot like


1221
00:32:13,756 --> 00:32:14,916
the numbered spreadsheet app.


1222
00:32:15,256 --> 00:32:16,896
So, you can drag and drop views


1223
00:32:16,896 --> 00:32:17,596
into cells.


1224
00:32:17,706 --> 00:32:19,356
You can select cells in rows and


1225
00:32:19,356 --> 00:32:21,016
columns, and adjust their


1226
00:32:21,016 --> 00:32:21,586
properties.


1227
00:32:22,426 --> 00:32:23,836
You can even merge cells, as you


1228
00:32:23,836 --> 00:32:25,436
see in the bottom two rows here.


1229
00:32:26,506 --> 00:32:28,376
Here's an example where we


1230
00:32:28,456 --> 00:32:29,236
select a column.


1231
00:32:29,786 --> 00:32:31,466
And, this is what the inspector


1232
00:32:31,466 --> 00:32:32,866
pane looks like, so you can see


1233
00:32:32,866 --> 00:32:34,366
you can adjust the placement of


1234
00:32:34,366 --> 00:32:35,706
the cells in that column.


1235
00:32:36,066 --> 00:32:37,156
You can adjust the leading and


1236
00:32:37,186 --> 00:32:37,936
trailing padding.


1237
00:32:38,356 --> 00:32:39,546
If we switch over to the Size


1238
00:32:39,546 --> 00:32:41,336
Inspector, you can specify an


1239
00:32:41,336 --> 00:32:42,976
explicit width for the column.


1240
00:32:42,976 --> 00:32:44,206
Or, if you don't do that, then


1241
00:32:44,206 --> 00:32:45,216
the column will be sized


1242
00:32:45,216 --> 00:32:46,526
automatically based on the


1243
00:32:46,526 --> 00:32:46,946
content.


1244
00:32:49,036 --> 00:32:50,106
And, one of the other really


1245
00:32:50,106 --> 00:32:51,816
nice things about this feature


1246
00:32:52,606 --> 00:32:53,136
is that it's


1247
00:32:53,186 --> 00:32:54,216
backwards-deployable.


1248
00:32:54,426 --> 00:32:56,216
GridViews authored in Interface


1249
00:32:56,216 --> 00:32:58,456
Builder can be used back to


1250
00:32:58,456 --> 00:33:01,686
macOS 10.13.4, or if you're not


1251
00:33:01,686 --> 00:33:03,306
using merged cells, you can


1252
00:33:03,306 --> 00:33:04,256
actually go all the way back to


1253
00:33:04,336 --> 00:33:05,016
10.12.


1254
00:33:05,556 --> 00:33:07,616
So, if you need to deploy your


1255
00:33:07,616 --> 00:33:08,696
app to an older version of


1256
00:33:08,696 --> 00:33:10,776
macOS, there's still no reason


1257
00:33:10,776 --> 00:33:12,176
to wait to use this great new


1258
00:33:12,176 --> 00:33:12,796
functionality.


1259
00:33:15,186 --> 00:33:17,076
The next topic I'd like to cover


1260
00:33:17,126 --> 00:33:18,826
is some changes to NSTextView.


1261
00:33:20,176 --> 00:33:21,286
First off,there's a few new


1262
00:33:21,286 --> 00:33:22,046
factory methods.


1263
00:33:22,756 --> 00:33:24,466
The first one here, fieldEditor


1264
00:33:24,896 --> 00:33:27,756
configures a textView to act as


1265
00:33:27,756 --> 00:33:29,156
the fieldEditor for an


1266
00:33:29,216 --> 00:33:29,816
NSTextField.


1267
00:33:29,936 --> 00:33:32,716
These all provide a much easier


1268
00:33:32,716 --> 00:33:34,276
way to configure textViews for


1269
00:33:34,276 --> 00:33:35,226
common use cases.


1270
00:33:36,256 --> 00:33:38,666
The latter three provide


1271
00:33:38,746 --> 00:33:39,806
textViews wrapped in


1272
00:33:39,806 --> 00:33:40,366
scrollViews.


1273
00:33:40,946 --> 00:33:42,296
This is by far the most common


1274
00:33:42,296 --> 00:33:44,266
use case for a textView, but if


1275
00:33:44,266 --> 00:33:45,156
you have to do additional


1276
00:33:45,156 --> 00:33:46,406
configuration on the textView,


1277
00:33:46,406 --> 00:33:47,786
it's important to remember to


1278
00:33:47,786 --> 00:33:49,526
look at the scrollView's


1279
00:33:49,576 --> 00:33:50,146
documentView.


1280
00:33:51,426 --> 00:33:52,756
These are also available through


1281
00:33:52,756 --> 00:33:53,526
Interface Builder.


1282
00:33:53,526 --> 00:33:54,566
So, again, there's no need to


1283
00:33:54,566 --> 00:33:55,816
fall back to the programmatic


1284
00:33:55,816 --> 00:33:56,436
API here.


1285
00:33:57,366 --> 00:33:58,246
So, let's see what they look


1286
00:33:58,246 --> 00:33:58,446
like.


1287
00:33:59,356 --> 00:34:00,776
Here's a sample window that


1288
00:34:00,776 --> 00:34:01,616
shows all four.


1289
00:34:02,236 --> 00:34:03,226
TextViews are sometimes


1290
00:34:03,226 --> 00:34:04,916
misconfigured when clients need


1291
00:34:04,916 --> 00:34:06,506
to override the fieldEditor in a


1292
00:34:06,576 --> 00:34:07,066
textField.


1293
00:34:07,236 --> 00:34:08,766
And so, using a fieldEditor


1294
00:34:08,766 --> 00:34:10,186
factory method can help avoid


1295
00:34:10,186 --> 00:34:10,856
problems there.


1296
00:34:11,815 --> 00:34:13,636
The next one, scrollableTextView


1297
00:34:14,346 --> 00:34:15,716
should be used for textViews


1298
00:34:15,815 --> 00:34:17,946
that are for auxiliary text in


1299
00:34:17,946 --> 00:34:19,726
popovers and inspector panes.


1300
00:34:19,726 --> 00:34:20,386
Things like that.


1301
00:34:20,386 --> 00:34:22,376
And then, the bottom two are for


1302
00:34:22,376 --> 00:34:23,876
text that's main document


1303
00:34:23,876 --> 00:34:24,266
content.


1304
00:34:24,456 --> 00:34:25,996
The one on the left is for rich


1305
00:34:25,996 --> 00:34:27,376
text; the one on the right is


1306
00:34:27,376 --> 00:34:28,025
for plain text.


1307
00:34:28,846 --> 00:34:29,846
You might be wondering at this


1308
00:34:29,926 --> 00:34:31,466
point what the distinction is,


1309
00:34:31,516 --> 00:34:32,666
because they all look fairly


1310
00:34:32,706 --> 00:34:33,106
similar.


1311
00:34:33,596 --> 00:34:34,696
The main benefit is that you


1312
00:34:34,696 --> 00:34:35,775
don't need to worry about the


1313
00:34:35,775 --> 00:34:36,755
system configuration.


1314
00:34:37,496 --> 00:34:38,936
For example, if the system's in


1315
00:34:38,936 --> 00:34:40,565
Dark Mode, they begin to look


1316
00:34:40,565 --> 00:34:41,326
more distinct.


1317
00:34:42,266 --> 00:34:44,746
The rich text's textView retains


1318
00:34:44,746 --> 00:34:46,045
its white background, and the


1319
00:34:46,045 --> 00:34:47,926
plain text turns dark to match


1320
00:34:48,016 --> 00:34:48,996
the rest of the system for


1321
00:34:48,996 --> 00:34:49,406
example.


1322
00:34:50,106 --> 00:34:51,396
So, in general if you use these


1323
00:34:51,396 --> 00:34:52,815
factory methods, it'll help keep


1324
00:34:52,815 --> 00:34:54,366
your application consistent with


1325
00:34:54,366 --> 00:34:55,775
the specifications for the rest


1326
00:34:55,775 --> 00:34:56,255
of the system.


1327
00:34:58,696 --> 00:34:59,876
The other change to textView


1328
00:34:59,876 --> 00:35:01,206
that I'd like to talk about is a


1329
00:35:01,206 --> 00:35:03,176
new method for modifying the


1330
00:35:03,256 --> 00:35:03,486
text,


1331
00:35:04,176 --> 00:35:05,686
PerformValidatedReplacement.


1332
00:35:06,276 --> 00:35:07,916
The idea behind this method is


1333
00:35:07,966 --> 00:35:09,186
that it gives you a very easy


1334
00:35:09,186 --> 00:35:10,866
way to manipulate the text in


1335
00:35:10,866 --> 00:35:12,936
the textView, and it gives you


1336
00:35:12,936 --> 00:35:14,516
behavior as if the user had


1337
00:35:14,516 --> 00:35:15,876
performed the change themselves.


1338
00:35:16,916 --> 00:35:17,936
So, it performs all the


1339
00:35:17,936 --> 00:35:19,656
appropriate delegate methods, as


1340
00:35:19,656 --> 00:35:20,286
you'd expect.


1341
00:35:20,696 --> 00:35:21,936
But, the really interesting part


1342
00:35:21,936 --> 00:35:23,716
is that any attributes that are


1343
00:35:23,716 --> 00:35:25,336
not specified on the input


1344
00:35:25,336 --> 00:35:27,196
string are automatically filled


1345
00:35:27,196 --> 00:35:28,506
in using the textView's


1346
00:35:28,616 --> 00:35:29,296
typingAttributes.


1347
00:35:30,466 --> 00:35:31,976
So, let me give you an example.


1348
00:35:32,506 --> 00:35:33,856
Here's a window with some rich


1349
00:35:33,856 --> 00:35:35,216
text in it, and a little snippet


1350
00:35:35,216 --> 00:35:36,196
of code that calls


1351
00:35:36,266 --> 00:35:38,346
performValidatedReplacement to


1352
00:35:38,346 --> 00:35:39,886
insert the word "Developers" in


1353
00:35:39,886 --> 00:35:40,196
the middle.


1354
00:35:41,266 --> 00:35:42,996
If we run this, this is what we


1355
00:35:42,996 --> 00:35:43,256
get.


1356
00:35:43,256 --> 00:35:45,226
The word appears and it matches


1357
00:35:45,226 --> 00:35:46,346
the style of the surrounding


1358
00:35:46,406 --> 00:35:48,126
text, and we didn't have to


1359
00:35:48,126 --> 00:35:49,436
specify any attributes.


1360
00:35:50,246 --> 00:35:51,896
There's a subtlety here to be


1361
00:35:51,896 --> 00:35:52,576
aware of, though.


1362
00:35:52,646 --> 00:35:55,236
And, that's because the fallback


1363
00:35:55,236 --> 00:35:56,376
attributes come from the


1364
00:35:56,446 --> 00:35:57,316
typingAttributes.


1365
00:35:57,426 --> 00:35:59,226
So, if you start with some rich


1366
00:35:59,336 --> 00:36:00,436
text like this, and the


1367
00:36:00,436 --> 00:36:02,506
insertion point is in the


1368
00:36:02,506 --> 00:36:04,156
lighter portion at the end, and


1369
00:36:04,156 --> 00:36:06,496
we run the same code; this is


1370
00:36:06,496 --> 00:36:06,966
the result.


1371
00:36:07,896 --> 00:36:09,746
The style attributes come from


1372
00:36:09,746 --> 00:36:10,896
the lighter portion at the end.


1373
00:36:12,486 --> 00:36:14,036
So, for this reason, you may


1374
00:36:14,036 --> 00:36:15,316
find that you need to set the


1375
00:36:15,316 --> 00:36:16,896
selective range for the range


1376
00:36:16,896 --> 00:36:18,136
you're about to replace before


1377
00:36:18,136 --> 00:36:18,606
you call


1378
00:36:18,606 --> 00:36:19,956
performValidatedReplacement.


1379
00:36:22,896 --> 00:36:24,416
If you do that, this is the


1380
00:36:24,416 --> 00:36:25,216
result that you get.


1381
00:36:27,336 --> 00:36:28,966
So, the next topic I'd like to


1382
00:36:28,966 --> 00:36:30,436
cover very briefly, is


1383
00:36:30,466 --> 00:36:31,406
continuity camera.


1384
00:36:31,856 --> 00:36:33,346
This is another fantastic


1385
00:36:33,446 --> 00:36:35,376
feature in macOS Mojave.


1386
00:36:36,196 --> 00:36:37,216
And, if you're just using the


1387
00:36:37,216 --> 00:36:38,746
standard framework classes like


1388
00:36:38,746 --> 00:36:40,196
NSTextView, there's nothing


1389
00:36:40,196 --> 00:36:41,746
special you need to do in order


1390
00:36:41,746 --> 00:36:42,766
to take advantage of it.


1391
00:36:42,806 --> 00:36:43,606
So, framework will handle


1392
00:36:43,606 --> 00:36:44,336
everything for you.


1393
00:36:45,016 --> 00:36:45,996
But, if you have a more


1394
00:36:45,996 --> 00:36:49,136
application-specific need for


1395
00:36:49,306 --> 00:36:50,536
this, it is possible to use it


1396
00:36:50,536 --> 00:36:51,186
more directly.


1397
00:36:51,336 --> 00:36:52,296
And then, it's important to


1398
00:36:52,296 --> 00:36:53,806
understand that it's implemented


1399
00:36:53,806 --> 00:36:55,766
using the existing services


1400
00:36:55,766 --> 00:36:56,066
API's.


1401
00:36:56,726 --> 00:36:58,236
So, all you need to do is tell a


1402
00:36:58,236 --> 00:36:59,756
framework that your responder


1403
00:36:59,756 --> 00:37:01,306
class is able to handle image


1404
00:37:01,336 --> 00:37:01,606
data.


1405
00:37:01,926 --> 00:37:02,876
And, you can do this by


1406
00:37:02,876 --> 00:37:04,366
implementing validRequestor.


1407
00:37:05,166 --> 00:37:07,006
If you want to try this out, I'd


1408
00:37:07,006 --> 00:37:08,046
encourage you to check out the


1409
00:37:08,046 --> 00:37:09,866
documentation for validRequestor


1410
00:37:09,866 --> 00:37:11,126
and some of the related methods.


1411
00:37:13,686 --> 00:37:15,196
Next, I'd like to talk about


1412
00:37:15,326 --> 00:37:16,296
custom Quick Actions.


1413
00:37:16,436 --> 00:37:17,496
You heard a little bit about


1414
00:37:17,496 --> 00:37:19,716
Quick Actions from the State of


1415
00:37:19,716 --> 00:37:21,126
the Union session yesterday.


1416
00:37:21,126 --> 00:37:23,746
And, they make it very easy to


1417
00:37:24,466 --> 00:37:26,496
perform simple actions like


1418
00:37:26,496 --> 00:37:27,916
opening a favorite app, for


1419
00:37:27,916 --> 00:37:29,476
complex ones like filtering


1420
00:37:29,476 --> 00:37:33,076
files, or invoking scripts.


1421
00:37:33,326 --> 00:37:35,406
You can build custom Quick


1422
00:37:35,406 --> 00:37:38,936
Actions using app extensions or


1423
00:37:38,936 --> 00:37:40,296
action bundles from Automator.


1424
00:37:41,136 --> 00:37:42,116
They're useful in so many


1425
00:37:42,116 --> 00:37:43,926
different places that there's a


1426
00:37:43,926 --> 00:37:45,406
variety of ways to invoke them.


1427
00:37:45,406 --> 00:37:47,176
But, my favorite by far is the


1428
00:37:47,246 --> 00:37:47,676
Touch Bar.


1429
00:37:48,376 --> 00:37:49,816
If you put your Quick Actions in


1430
00:37:49,816 --> 00:37:51,036
the Touch Bar, it just makes it


1431
00:37:51,036 --> 00:37:52,246
very easy to get to them,


1432
00:37:52,536 --> 00:37:53,746
wherever you are, whenever you


1433
00:37:53,746 --> 00:37:54,186
need them.


1434
00:37:54,656 --> 00:37:55,786
And, you can get this behavior


1435
00:37:55,786 --> 00:37:56,816
by looking in the keyboard


1436
00:37:56,816 --> 00:37:58,326
preferences panel, and


1437
00:37:58,326 --> 00:37:59,846
reconfiguring your Touch Bar to


1438
00:37:59,846 --> 00:38:01,726
either always show them, or to


1439
00:38:01,726 --> 00:38:03,076
flip to them when you hold down


1440
00:38:03,076 --> 00:38:03,776
the function key.


1441
00:38:04,416 --> 00:38:05,736
Or, you can customize your Touch


1442
00:38:05,806 --> 00:38:07,796
Bar and drag the workflows


1443
00:38:07,796 --> 00:38:09,146
button into your control script.


1444
00:38:11,596 --> 00:38:12,706
It's also worth noting that you


1445
00:38:12,706 --> 00:38:13,876
can go over to the Shortcuts


1446
00:38:13,936 --> 00:38:15,926
pane, and look under Services.


1447
00:38:16,496 --> 00:38:18,096
And, here you can turn them on


1448
00:38:18,096 --> 00:38:19,346
and off to control which ones


1449
00:38:19,576 --> 00:38:21,416
show up.


1450
00:38:21,416 --> 00:38:22,366
They don't only show up in the


1451
00:38:22,366 --> 00:38:23,336
Touch Bar, though, as I


1452
00:38:23,336 --> 00:38:23,776
mentioned.


1453
00:38:23,776 --> 00:38:25,006
So, here's a Finder window for


1454
00:38:25,006 --> 00:38:25,576
example.


1455
00:38:25,636 --> 00:38:27,366
And, the contextual menu has a


1456
00:38:27,366 --> 00:38:29,106
Quick Actions submenu where


1457
00:38:29,186 --> 00:38:31,086
you'll see them.


1458
00:38:31,466 --> 00:38:33,386
Finder's preview pane also has a


1459
00:38:33,386 --> 00:38:34,436
couple of Quick Actions at the


1460
00:38:34,436 --> 00:38:36,026
bottom, and then the full list


1461
00:38:36,296 --> 00:38:37,406
underneath the "More" button.


1462
00:38:38,056 --> 00:38:39,456
And, action bundles from


1463
00:38:39,456 --> 00:38:41,046
Automator will show up inside


1464
00:38:41,046 --> 00:38:41,866
the Services menu.


1465
00:38:42,396 --> 00:38:44,036
So, TrimLogs is one that I wrote


1466
00:38:44,036 --> 00:38:45,556
to filter my debug logs, for


1467
00:38:45,556 --> 00:38:45,936
example.


1468
00:38:47,176 --> 00:38:48,776
And, that brings me to the next


1469
00:38:48,776 --> 00:38:50,176
topic I'd like to talk about,


1470
00:38:50,516 --> 00:38:52,166
building action bundles, also


1471
00:38:52,166 --> 00:38:53,816
known as contextual workflows.


1472
00:38:54,406 --> 00:38:55,636
This is a new feature in


1473
00:38:55,636 --> 00:38:56,216
Automator.


1474
00:38:56,516 --> 00:38:57,456
When you go to Automator, and


1475
00:38:57,456 --> 00:38:58,546
create a new document, there's a


1476
00:38:58,546 --> 00:38:59,886
new option available now for


1477
00:38:59,886 --> 00:39:01,006
contextual workflows.


1478
00:39:01,646 --> 00:39:02,896
They look a lot like regular


1479
00:39:02,896 --> 00:39:04,146
workflows except there's a new


1480
00:39:04,146 --> 00:39:06,306
block at the top that allows you


1481
00:39:06,306 --> 00:39:07,596
to configure the input and


1482
00:39:07,596 --> 00:39:09,586
output as well as pick an icon


1483
00:39:09,586 --> 00:39:10,116
and the color.


1484
00:39:11,716 --> 00:39:12,996
So, let's go though a quick


1485
00:39:12,996 --> 00:39:13,526
example.


1486
00:39:14,026 --> 00:39:15,516
I often have a problem where


1487
00:39:15,516 --> 00:39:16,886
there's some file I want to open


1488
00:39:16,886 --> 00:39:18,586
in TextEdit, but I can't because


1489
00:39:18,586 --> 00:39:19,646
it doesn't have a file


1490
00:39:19,646 --> 00:39:20,156
extension.


1491
00:39:20,616 --> 00:39:23,066
This is super easy to fix with


1492
00:39:23,066 --> 00:39:23,546
Automator.


1493
00:39:24,666 --> 00:39:25,816
All you need to do is look


1494
00:39:25,816 --> 00:39:27,676
inside the library, and drag out


1495
00:39:27,676 --> 00:39:29,396
the Open Finder Items action.


1496
00:39:30,096 --> 00:39:32,166
You can configure it to open the


1497
00:39:32,166 --> 00:39:33,656
items with TextEdit instead of


1498
00:39:33,656 --> 00:39:34,886
with a default application.


1499
00:39:35,646 --> 00:39:37,326
Any file selected in the Finder


1500
00:39:37,326 --> 00:39:38,736
automatically become the input


1501
00:39:38,736 --> 00:39:41,376
to this action, and then if you


1502
00:39:41,376 --> 00:39:43,926
save it with some name, it will


1503
00:39:43,926 --> 00:39:44,816
automatically show up in the


1504
00:39:44,876 --> 00:39:46,626
Touch Bar, or in other contexts


1505
00:39:46,876 --> 00:39:47,896
where it's useful.


1506
00:39:50,686 --> 00:39:54,216
So, to summarize, we've talked


1507
00:39:54,216 --> 00:39:55,906
about a variety of new features,


1508
00:39:56,176 --> 00:39:57,666
and other changes that will make


1509
00:39:57,666 --> 00:39:59,006
your development experience


1510
00:39:59,006 --> 00:40:00,596
richer, and your applications


1511
00:40:00,596 --> 00:40:00,976
even more awesome.


1512
00:40:01,046 --> 00:40:04,936
Check out the new SDK and begin


1513
00:40:05,416 --> 00:40:07,426
implementing some of these


1514
00:40:07,696 --> 00:40:08,866
things in your applications.


1515
00:40:10,046 --> 00:40:11,756
They'll make your applications


1516
00:40:11,756 --> 00:40:13,266
shine, and your customers will


1517
00:40:13,266 --> 00:40:14,356
appreciate it.


1518
00:40:15,046 --> 00:40:16,476
For more information, you can


1519
00:40:16,476 --> 00:40:17,436
follow this URL.


1520
00:40:17,436 --> 00:40:20,666
And, also look inside the WWDC


1521
00:40:20,666 --> 00:40:21,846
app under this session.


1522
00:40:22,156 --> 00:40:23,826
All of the related sessions are


1523
00:40:23,826 --> 00:40:24,306
linked there.


1524
00:40:24,396 --> 00:40:24,926
Thank you very much.


1525
00:40:25,516 --> 00:40:31,500
[ Applause ]

