1
00:00:07,516 --> 00:00:17,500
[ Music ]


2
00:00:26,516 --> 00:00:31,556
[ Applause ]


3
00:00:32,055 --> 00:00:32,326
>> All right.


4
00:00:32,786 --> 00:00:33,676
Thanks very much.


5
00:00:34,266 --> 00:00:37,946
So I'm excited to tell you all
about what's new in watchOS 3.


6
00:00:38,596 --> 00:00:41,926
Now, of course we've
really focused in watchOS 3


7
00:00:42,326 --> 00:00:44,616
on optimizing the
performance of the system,


8
00:00:44,776 --> 00:00:47,426
and there's been a ton
of changes in this area


9
00:00:47,426 --> 00:00:50,766
to make sure that all of your
apps run as fast as possible.


10
00:00:51,986 --> 00:00:54,916
We've also spent a bunch of
time optimizing navigation,


11
00:00:55,486 --> 00:00:58,496
and that's really in service
of optimizing performance,


12
00:00:58,996 --> 00:01:01,346
because the faster we can
get a user into your app,


13
00:01:01,786 --> 00:01:03,196
the faster they can
start using it,


14
00:01:03,196 --> 00:01:04,936
and the faster we can
get them to be able


15
00:01:05,016 --> 00:01:07,436
to drop their wrist again,
and move on to the next thing.


16
00:01:08,696 --> 00:01:11,896
Now in addition to all these
enhancements to the system,


17
00:01:12,266 --> 00:01:15,716
we've also spent a bunch of
time optimizing different things


18
00:01:15,716 --> 00:01:17,156
in all of our apps as well.


19
00:01:19,256 --> 00:01:21,296
Now all of those
enhancements really revolve


20
00:01:21,626 --> 00:01:25,336
around three key qualities for
watch apps that I promise you


21
00:01:25,336 --> 00:01:27,366
and warn you you will
continue to hear a lot


22
00:01:27,366 --> 00:01:29,176
about throughout the rest of
the watch sessions [laughter].


23
00:01:30,286 --> 00:01:33,316
So the first one is making
sure that they're glanceable.


24
00:01:34,256 --> 00:01:37,016
Now, being a glanceable
watch app does mean a bunch


25
00:01:37,016 --> 00:01:40,126
of different things, and it
starts right at the watch face,


26
00:01:40,706 --> 00:01:42,066
because having a complication


27
00:01:42,066 --> 00:01:44,936
on the watch face gives you
a really great opportunity


28
00:01:44,936 --> 00:01:48,356
to present the most important
bit of information from your app


29
00:01:48,476 --> 00:01:50,366
to the user at just a glance.


30
00:01:51,606 --> 00:01:55,076
Of course, in watchOS
2, we also had glances.


31
00:01:55,166 --> 00:01:58,316
In watchOS 3, that functionality
has merged into the dock,


32
00:01:58,786 --> 00:02:01,456
which is a great place to
present glanceable information


33
00:02:01,456 --> 00:02:04,166
as well, because it's really
quick to get to from anywhere


34
00:02:04,166 --> 00:02:07,286
on the system and gives you
an easy way to get an overview


35
00:02:07,286 --> 00:02:10,476
and summary of the best and
most important information


36
00:02:10,476 --> 00:02:11,116
from your apps.


37
00:02:11,926 --> 00:02:14,906
So in addition to being
glanceable, we wanted all


38
00:02:14,906 --> 00:02:18,686
of our apps to be actionable,
and actionable can mean a number


39
00:02:18,686 --> 00:02:19,696
of different things as well.


40
00:02:20,806 --> 00:02:23,316
It might mean that you take
the action on the watch itself.


41
00:02:23,926 --> 00:02:25,616
You've seen that we've
redesigned a bunch


42
00:02:25,616 --> 00:02:27,336
of our built-in apps
to make sure


43
00:02:27,336 --> 00:02:30,386
that the most common actions
that we take are easy to access


44
00:02:30,386 --> 00:02:31,706
with just a couple of taps.


45
00:02:32,536 --> 00:02:34,956
The Workout app, you can
now get into really quickly


46
00:02:34,956 --> 00:02:36,486
and start a workout
with a single tap.


47
00:02:37,666 --> 00:02:40,386
The timer app now raises
the most common timers


48
00:02:40,386 --> 00:02:42,206
that you'll want to set
right to the top level


49
00:02:42,566 --> 00:02:43,556
so that once you're in it,


50
00:02:43,556 --> 00:02:46,416
with just one tap you can
start really common timers.


51
00:02:47,486 --> 00:02:49,086
And so this kind of
pattern is something


52
00:02:49,086 --> 00:02:50,796
that we definitely would
encourage you to think about,


53
00:02:50,856 --> 00:02:53,206
figure out the things that
are the most common actions


54
00:02:53,206 --> 00:02:55,906
in your apps, and brings
them up to the top level,


55
00:02:55,906 --> 00:02:57,376
and make them really
easy to get to.


56
00:02:59,176 --> 00:03:01,466
Of course, being actionable
doesn't necessarily mean


57
00:03:01,466 --> 00:03:03,936
that you have to be able to take
the action on the watch itself.


58
00:03:04,416 --> 00:03:07,966
It might just mean presenting
content that your users want


59
00:03:07,966 --> 00:03:10,636
to act on, even if they're
not ultimately going


60
00:03:10,636 --> 00:03:12,116
to take an action on the watch.


61
00:03:12,626 --> 00:03:14,956
Again, complications are
a great place to do this


62
00:03:14,956 --> 00:03:16,206
and the new dock as well,


63
00:03:16,446 --> 00:03:18,406
presenting the most
important information


64
00:03:18,406 --> 00:03:21,306
that users can then go and act
on outside in the real world.


65
00:03:21,786 --> 00:03:25,736
And then the third quality,
of course, is responsiveness,


66
00:03:26,046 --> 00:03:29,206
making sure that your apps are
up to date and ready to respond


67
00:03:29,206 --> 00:03:30,646
as soon as the users want them.


68
00:03:31,806 --> 00:03:33,466
And a bunch of the
performance work that we've done


69
00:03:33,466 --> 00:03:36,246
in watchOS 3 is really
geared towards this aspect


70
00:03:36,316 --> 00:03:39,086
of making all of the apps
as responsive as possible.


71
00:03:39,536 --> 00:03:40,866
By keeping them in memory,


72
00:03:40,866 --> 00:03:42,826
which we'll talk a little bit
more about, and making sure


73
00:03:42,826 --> 00:03:45,836
that they can resume really
fast, we can make sure


74
00:03:45,836 --> 00:03:47,486
that they're as responsive
as they can be.


75
00:03:47,946 --> 00:03:49,796
And the best thing that you
can do to help make sure


76
00:03:49,796 --> 00:03:51,246
that your apps remain
responsive is


77
00:03:51,246 --> 00:03:53,486
to do adopt the new background
app refresh technologies,


78
00:03:53,486 --> 00:03:55,686
which we'll talk about in
a little bit, to make sure


79
00:03:55,686 --> 00:03:58,006
that your apps already have
the content that they need


80
00:03:58,006 --> 00:04:03,666
to display to the user when
they're ready to be used.


81
00:04:03,666 --> 00:04:06,516
So thinking about apps,
of course, we can go back


82
00:04:06,516 --> 00:04:08,566
to a full-screen view of an app.


83
00:04:08,626 --> 00:04:10,776
That's what a lot
of people think


84
00:04:10,776 --> 00:04:12,976
about when they first
think of an app,


85
00:04:13,106 --> 00:04:15,686
but that may not be the
most common place for users


86
00:04:15,686 --> 00:04:17,546
to interact with your
apps on Apple Watch,


87
00:04:18,356 --> 00:04:19,736
because to keep interaction
short,


88
00:04:19,815 --> 00:04:22,756
there's some other really great
interfaces that are even faster


89
00:04:22,756 --> 00:04:25,306
to use for a lot of the most
common things that we do.


90
00:04:26,036 --> 00:04:28,286
Of course, there's
complications, which start right


91
00:04:28,286 --> 00:04:30,056
on the watch face,
giving you info you want.


92
00:04:30,516 --> 00:04:33,026
And notifications,
which can pop up info


93
00:04:33,026 --> 00:04:34,216
at the most relevant time.


94
00:04:35,226 --> 00:04:38,516
And notifications on Apple
Watch are great, because you get


95
00:04:38,516 --> 00:04:41,276
to run code to populate the
notification with content


96
00:04:41,276 --> 00:04:44,876
and custom UI to present
just the interface you want.


97
00:04:45,846 --> 00:04:50,716
And of course, with the new dock
in watchOS 3, you can now get


98
00:04:50,716 --> 00:04:52,936
to your apps with just the
tap of the side button,


99
00:04:53,326 --> 00:04:54,796
no matter where you
are in the system.


100
00:04:55,446 --> 00:04:57,726
Now, apps in the doc are great,


101
00:04:57,796 --> 00:04:59,876
because they're immediately
responsive.


102
00:04:59,976 --> 00:05:02,416
As soon as you tap on
one, it comes full-screen,


103
00:05:02,416 --> 00:05:04,046
and you can interact
with it right away


104
00:05:04,046 --> 00:05:05,226
without having to wait at all.


105
00:05:06,356 --> 00:05:09,366
The dock is great, not just for
directly interacting with apps,


106
00:05:09,366 --> 00:05:11,196
but also for consuming
information.


107
00:05:11,676 --> 00:05:14,676
Glances in watchOS 2, that
functionality has now moved


108
00:05:14,676 --> 00:05:17,886
into the dock in watchOS
3, so you can quickly slide


109
00:05:17,886 --> 00:05:20,576
through a view of
the information


110
00:05:20,576 --> 00:05:22,926
from your favorite
apps really quickly


111
00:05:22,926 --> 00:05:25,846
to get a high-level overview of
the info from all of those apps.


112
00:05:26,626 --> 00:05:29,506
So the dock combines the best
of what glance has provided


113
00:05:29,506 --> 00:05:31,176
with quick access to your apps


114
00:05:31,446 --> 00:05:33,176
to provide even more
functionality.


115
00:05:33,746 --> 00:05:36,256
So for something like reminders,
it's really great for both.


116
00:05:36,786 --> 00:05:39,886
You can get a quick overview of
the things that you need to do,


117
00:05:40,426 --> 00:05:42,776
and you can tap in to
immediately bring it full screen


118
00:05:42,776 --> 00:05:44,516
and make it interactive,
so you can check them off.


119
00:05:45,826 --> 00:05:49,076
For other kinds of apps, you
may just have functionality.


120
00:05:49,656 --> 00:05:51,726
For example, the Workout app,


121
00:05:51,726 --> 00:05:53,896
we've brought those most
common workouts that you want


122
00:05:53,896 --> 00:05:56,736
to perform right to the top
level, so you can tap on them,


123
00:05:56,736 --> 00:05:59,996
tap in to bring the app full
screen, and with one tap,


124
00:06:00,106 --> 00:06:01,496
be starting your workouts.


125
00:06:02,526 --> 00:06:04,536
But the dock is also,
as we said,


126
00:06:04,536 --> 00:06:06,506
great for just viewing
information.


127
00:06:06,976 --> 00:06:09,446
So an app like the
Activity app is really great


128
00:06:09,446 --> 00:06:12,326
for just getting a summary of
the information from this app.


129
00:06:12,516 --> 00:06:16,226
And with the Activity
rings basically taking


130
00:06:16,226 --> 00:06:18,836
up the full screen, you can
get a great high-level summary


131
00:06:18,836 --> 00:06:21,336
that's really glanceable
and really easy to digest.


132
00:06:21,866 --> 00:06:25,406
The Activity app itself has
also been redesigned when you go


133
00:06:25,406 --> 00:06:28,016
into it to simplify the
navigation in the app.


134
00:06:28,646 --> 00:06:32,146
So where in watchOS 2 it was
four tabs arranged horizontally,


135
00:06:32,376 --> 00:06:35,016
each of which could scroll
vertically, in watchOS 3,


136
00:06:35,016 --> 00:06:37,056
there's just one view,
vertically scrolling,


137
00:06:37,056 --> 00:06:39,446
that has the summary of
the activity at the top


138
00:06:39,446 --> 00:06:40,686
and some of the detail below.


139
00:06:41,066 --> 00:06:42,886
So it's really easy
and even faster


140
00:06:42,886 --> 00:06:47,346
to get the information
you want out of this app.


141
00:06:47,346 --> 00:06:49,916
Now, we want to keep
interactions with the watch


142
00:06:49,916 --> 00:06:53,766
as short as possible, and
so this new navigation model


143
00:06:53,766 --> 00:06:56,156
and the enhancements
to make apps responsive


144
00:06:56,156 --> 00:06:59,846
and live right away
really helped to make sure


145
00:07:00,046 --> 00:07:02,016
that the most tasks
that you want to perform


146
00:07:02,016 --> 00:07:03,916
on Apple Watch can
be accomplished


147
00:07:03,916 --> 00:07:05,286
in just a couple of seconds.


148
00:07:06,326 --> 00:07:08,546
And so as you're thinking about
how you want to update your app


149
00:07:08,546 --> 00:07:11,916
for Apple Watch, for watchOS
3, or if you don't have one yet


150
00:07:11,916 --> 00:07:13,626
and you're contemplating
what to put in it,


151
00:07:14,016 --> 00:07:16,156
I would definitely
encourage you to spend a bunch


152
00:07:16,156 --> 00:07:19,456
of time thinking about how
to shorten your interactions.


153
00:07:20,006 --> 00:07:23,046
Two seconds is obviously a
very short time, but striving


154
00:07:23,046 --> 00:07:25,346
for that can really help
you to figure out the best


155
00:07:25,346 --> 00:07:29,456
to design your apps to make
them as great an experience


156
00:07:29,456 --> 00:07:30,766
on Apple Watch as possible.


157
00:07:31,366 --> 00:07:35,476
So with the rest of our time, I
want to talk about four things.


158
00:07:36,336 --> 00:07:38,036
The first is Background
App Refresh.


159
00:07:38,276 --> 00:07:41,356
As I mentioned, this is a
huge enhancement in watchOS 3


160
00:07:41,356 --> 00:07:42,736
that is Background App
Refresh that is really critical


161
00:07:42,736 --> 00:07:44,856
for building responsive
watch apps, so we're going


162
00:07:44,856 --> 00:07:47,796
to spend a bunch of
time talking about that.


163
00:07:47,876 --> 00:07:49,326
Then I also wanted
to talk a little bit


164
00:07:49,326 --> 00:07:52,506
about simplifying navigation,
because we've done a lot of work


165
00:07:52,506 --> 00:07:54,206
to simplify navigation
on the system,


166
00:07:54,696 --> 00:07:56,556
but the next step is
simplifying navigation


167
00:07:56,556 --> 00:07:57,716
within your apps as well.


168
00:07:57,856 --> 00:08:00,286
And so we've got some ideas of
how we've done that ourselves


169
00:08:00,286 --> 00:08:03,126
that we'll share, and
there's also plenty of ways


170
00:08:03,126 --> 00:08:05,426
that I'm sure you can come up
with to simplify navigation


171
00:08:05,426 --> 00:08:06,456
in your own apps as well.


172
00:08:07,686 --> 00:08:08,936
Then we'll spend
some time talking


173
00:08:09,036 --> 00:08:10,836
about expanding API
availability.


174
00:08:11,176 --> 00:08:12,486
We've brought some
great frameworks


175
00:08:12,486 --> 00:08:14,126
from our platforms,
the watch SDK.


176
00:08:14,126 --> 00:08:15,956
We've got some brand new ones,


177
00:08:16,286 --> 00:08:17,836
and we've got some
great enhancements


178
00:08:17,836 --> 00:08:20,316
to our existing frameworks
as well, so we'll talk


179
00:08:20,316 --> 00:08:22,706
about a bunch of the
high-level points in there


180
00:08:22,706 --> 00:08:24,976
and give you some great
pointers to other sessions


181
00:08:25,056 --> 00:08:26,346
that have even more detail.


182
00:08:26,906 --> 00:08:28,986
And then we'll end by
talking about discoverability


183
00:08:28,986 --> 00:08:32,076
and configuration, because
building your great app is just


184
00:08:32,076 --> 00:08:32,726
the first step.


185
00:08:33,006 --> 00:08:34,746
You also need to get
it in front of users


186
00:08:34,746 --> 00:08:36,006
and configure it on their watch.


187
00:08:36,895 --> 00:08:39,326
So let's get started with
Background App Refresh.


188
00:08:40,666 --> 00:08:42,976
Background App Refresh
is a critical part


189
00:08:43,206 --> 00:08:45,206
of building a responsive
app for Apple Watch.


190
00:08:46,556 --> 00:08:48,836
And before you've
even done any work,


191
00:08:49,256 --> 00:08:51,456
Background App Refresh is
already working for you.


192
00:08:52,116 --> 00:08:54,446
You don't actually
need to adopt any APIs


193
00:08:54,446 --> 00:08:55,846
to get some of its benefits.


194
00:08:56,736 --> 00:08:58,796
So the first thing is that all


195
00:08:58,796 --> 00:09:01,686
of the users favorite
apps are kept in memory.


196
00:09:02,666 --> 00:09:05,296
They're launched in the
background, and then suspended,


197
00:09:05,446 --> 00:09:08,086
and kept there ready to go so
that as soon as the user wants


198
00:09:08,086 --> 00:09:10,876
to get them, it's just a short
resume away, and we don't have


199
00:09:10,876 --> 00:09:12,646
to wait for a full
application launch.


200
00:09:13,966 --> 00:09:15,266
Now, I mentioned
that that applies


201
00:09:15,266 --> 00:09:16,546
to the user's favorite apps,


202
00:09:16,906 --> 00:09:18,786
and I do mean something
pretty specific by that.


203
00:09:19,406 --> 00:09:20,896
This is all of the apps that are


204
00:09:20,896 --> 00:09:23,966
on the user's current watch
face, so any complication


205
00:09:24,176 --> 00:09:25,616
on the current watch
face that has an app,


206
00:09:26,056 --> 00:09:27,436
that app is one of
their favorites.


207
00:09:27,676 --> 00:09:29,676
And all of the apps
that the user has placed


208
00:09:29,676 --> 00:09:31,326
in their dock are
their favorite apps.


209
00:09:32,136 --> 00:09:34,826
These apps are the ones that
they're kept in memory and ready


210
00:09:34,826 --> 00:09:36,576
to go as soon as they're needed.


211
00:09:36,856 --> 00:09:39,406
They're the ones that the user
has the easiest access to,


212
00:09:39,406 --> 00:09:41,406
because they're either a
tap away on the watch face


213
00:09:41,746 --> 00:09:43,526
or just an easy scroll
through the dock away.


214
00:09:43,986 --> 00:09:46,066
And so we want them to
be there, ready to go,


215
00:09:46,066 --> 00:09:47,426
and as responsive as possible.


216
00:09:48,046 --> 00:09:50,046
And as I mentioned, you don't
have to do anything to get this.


217
00:09:50,046 --> 00:09:52,296
Even your existing watchOS
2 apps will get this


218
00:09:52,296 --> 00:09:53,196
behavior automatically.


219
00:09:54,356 --> 00:09:57,816
But of course, there
are APIs involved


220
00:09:57,816 --> 00:09:59,556
with Background App
Refresh that you can adopt


221
00:09:59,906 --> 00:10:02,146
to make your apps even more
responsive once they become


222
00:10:02,146 --> 00:10:03,936
to the foreground and
making sure that they're


223
00:10:03,936 --> 00:10:05,156
up to date and ready to go.


224
00:10:06,716 --> 00:10:08,726
And so the first
things that you can do


225
00:10:08,726 --> 00:10:11,026
with this are obviously
updating your complication


226
00:10:11,026 --> 00:10:12,036
and updating your app.


227
00:10:12,576 --> 00:10:14,616
Keeping your app up to date
means updating these things.


228
00:10:15,516 --> 00:10:17,886
But there's another
important aspect to it as well


229
00:10:18,216 --> 00:10:19,806
that might be immediately
obvious,


230
00:10:20,186 --> 00:10:23,166
and that is that you want to
also update your snapshot.


231
00:10:24,366 --> 00:10:26,176
Now you might be wondering
what do I mean by a snapshot,


232
00:10:26,436 --> 00:10:29,466
because you haven't
written code for snapshots.


233
00:10:29,856 --> 00:10:32,636
And this applies specifically
to apps that are in the dock.


234
00:10:33,476 --> 00:10:36,776
Now, when the dock first
comes to the foreground,


235
00:10:36,776 --> 00:10:39,716
all of the apps that are in
the dock are sitting in memory,


236
00:10:39,716 --> 00:10:41,446
but they're suspended and
not currently running.


237
00:10:42,216 --> 00:10:43,496
So what's displayed as soon


238
00:10:43,496 --> 00:10:46,046
as the dock comes forward is a
snapshot of what the app looked


239
00:10:46,046 --> 00:10:47,226
like in its last state.


240
00:10:48,416 --> 00:10:50,856
Once the user settles on
one of the apps in the dock,


241
00:10:50,996 --> 00:10:52,716
it will be resumed
and become live,


242
00:10:52,716 --> 00:10:54,516
even while it's still
shrunk down in the dock.


243
00:10:54,786 --> 00:10:56,566
But in the meantime, we're
displaying a snapshot


244
00:10:56,566 --> 00:10:58,176
of what was there
in the last state.


245
00:10:58,756 --> 00:11:00,806
So it's important that that
snapshot remain up to date


246
00:11:00,806 --> 00:11:03,146
as well, so that you're
displaying old information


247
00:11:03,146 --> 00:11:04,226
until the app gets resumed.


248
00:11:06,056 --> 00:11:08,766
Even more importantly, if I
quickly scroll through the dock


249
00:11:08,766 --> 00:11:10,466
and don't land on
any of the apps,


250
00:11:10,956 --> 00:11:12,356
they're not being unsuspended


251
00:11:12,356 --> 00:11:14,266
and resumed the entire
time while I'm scrolling.


252
00:11:14,266 --> 00:11:16,656
So we're just scrolling
through the set


253
00:11:16,656 --> 00:11:18,286
of the last snapshots
that were displayed.


254
00:11:18,326 --> 00:11:20,976
So you definitely want to make
sure that these snapshots are


255
00:11:20,976 --> 00:11:23,106
up to date and displaying
current information,


256
00:11:23,106 --> 00:11:25,976
and the Background App Refresh
APIs make it really easy


257
00:11:25,976 --> 00:11:26,646
to do this.


258
00:11:27,846 --> 00:11:30,156
Starting off, there's actually
some automatic behaviors


259
00:11:30,156 --> 00:11:32,406
that you get from the
system before you even have


260
00:11:32,406 --> 00:11:34,796
to add any new requests
to update things.


261
00:11:36,696 --> 00:11:38,586
Now, the first one is
probably pretty obvious.


262
00:11:38,836 --> 00:11:40,806
If you've actually gone
into the app and used it,


263
00:11:41,276 --> 00:11:43,886
then the user has probably
seen some new information


264
00:11:43,886 --> 00:11:46,396
or performed some action
in there and will want


265
00:11:46,396 --> 00:11:48,506
to update the snapshot that
will be displayed the next time.


266
00:11:49,466 --> 00:11:50,706
So when the user
leaves your app,


267
00:11:50,846 --> 00:11:53,516
the system will automatically
schedule a snapshot update


268
00:11:53,576 --> 00:11:55,346
to happen on your behalf.


269
00:11:56,356 --> 00:11:57,796
Now, it's really
easy to handle this,


270
00:11:57,796 --> 00:11:59,956
because there's one new
Background App Refresh method


271
00:12:00,306 --> 00:12:02,976
that all of the background
refresh activity goes through.


272
00:12:03,236 --> 00:12:04,926
So it's just a simple
method that you add


273
00:12:04,926 --> 00:12:06,556
on your WatchKit
extension delegate,


274
00:12:06,556 --> 00:12:08,676
and it'll get called
back when any


275
00:12:08,676 --> 00:12:10,096
of these refresh
activities occur.


276
00:12:10,556 --> 00:12:13,686
And so the first one is the
automatic snapshot that happens


277
00:12:13,686 --> 00:12:15,066
when your app is suspended.


278
00:12:16,806 --> 00:12:19,896
But there's also other times
that users may see information


279
00:12:19,896 --> 00:12:23,306
from your app, where you'll want
to update the snapshot so often


280
00:12:23,306 --> 00:12:24,476
that we just do it
automatically.


281
00:12:25,266 --> 00:12:27,076
And the other one, which
may not be as obvious,


282
00:12:27,266 --> 00:12:29,026
is after a notification
has been viewed.


283
00:12:29,736 --> 00:12:32,796
So if the user looks at a long
look of your notification,


284
00:12:32,796 --> 00:12:35,096
they may have seen some new
information that informs them


285
00:12:35,096 --> 00:12:36,276
of some new state in your app.


286
00:12:36,976 --> 00:12:38,126
If they then go into the dock


287
00:12:38,126 --> 00:12:40,246
and see something else displayed
there and it's out of date,


288
00:12:40,306 --> 00:12:41,696
that would probably
be surprising.


289
00:12:42,686 --> 00:12:44,836
So when your notification
is dismissed,


290
00:12:45,066 --> 00:12:47,576
the system will automatically
schedule a background snapshot


291
00:12:47,576 --> 00:12:49,366
task for you in that
case as well


292
00:12:49,366 --> 00:12:51,036
so that you can update
your snapshot,


293
00:12:51,356 --> 00:12:53,856
update your complication, and
make sure that everything stays


294
00:12:53,856 --> 00:12:55,066
up to date and in sync.


295
00:12:55,996 --> 00:12:58,466
Of course, there are also
times that you'll want


296
00:12:58,466 --> 00:13:00,096
to schedule updates
on your behalf.


297
00:13:00,446 --> 00:13:03,186
You know your users and you know
your data, so there are times


298
00:13:03,186 --> 00:13:04,136
where you actually just want


299
00:13:04,136 --> 00:13:06,196
to proactively be
updating your content,


300
00:13:06,196 --> 00:13:09,236
and there's really
two ways to do this.


301
00:13:09,646 --> 00:13:11,346
The first is going to
be about complications.


302
00:13:11,846 --> 00:13:14,236
The question then becomes, what
do you put in your snapshot?


303
00:13:14,606 --> 00:13:16,166
So the first and most
obvious thing to put


304
00:13:16,166 --> 00:13:18,046
in your snapshot is just
whatever the content


305
00:13:18,046 --> 00:13:21,406
of your app normally is,
that way it looks up to date


306
00:13:21,406 --> 00:13:23,106
and it's showing exactly
what you would want


307
00:13:23,106 --> 00:13:24,316
when a user goes into the app.


308
00:13:26,176 --> 00:13:27,756
But you might also
decide that you want


309
00:13:27,756 --> 00:13:29,936
to provide some custom
information that is different


310
00:13:29,936 --> 00:13:32,126
so that it looks nicer
in the dock and is easier


311
00:13:32,126 --> 00:13:34,946
to glance at and digest.


312
00:13:35,236 --> 00:13:38,846
For example, the Dexcom G5
mobile app, with that app,


313
00:13:38,846 --> 00:13:40,436
the most important
thing that I would care


314
00:13:40,436 --> 00:13:42,986
about is my current
blood glucose level.


315
00:13:43,736 --> 00:13:44,936
So if I look at it in the dock,


316
00:13:44,936 --> 00:13:47,996
I'll see that highlighted really
big in the center of the screen.


317
00:13:48,546 --> 00:13:52,116
But when I actually go
into the app, I might care


318
00:13:52,116 --> 00:13:54,406
about more detail than
just the current reading.


319
00:13:55,686 --> 00:13:58,146
So as I bring the app full
screen, it can transition


320
00:13:58,146 --> 00:14:01,356
and show more information
when I'm actually in the app,


321
00:14:01,446 --> 00:14:03,896
displaying, in this
case, a historical graph


322
00:14:03,896 --> 00:14:05,886
of more information
going back in time.


323
00:14:05,886 --> 00:14:09,416
Now, you don't necessarily have
to display different information


324
00:14:09,416 --> 00:14:11,596
in the dock snapshot, and a
very common thing would be


325
00:14:11,596 --> 00:14:14,626
to not do that, and just have
it be the content of your app.


326
00:14:15,166 --> 00:14:16,776
But you do have a lot
of flexibility here,


327
00:14:16,776 --> 00:14:19,286
so if it makes sense in your app
to display something different


328
00:14:19,286 --> 00:14:21,806
in the dock snapshot, just
make sure that the transition


329
00:14:21,806 --> 00:14:24,036
as you go into the
app is still smooth


330
00:14:24,036 --> 00:14:28,146
and not really jarring
when it happens.


331
00:14:30,096 --> 00:14:32,556
Okay, so in addition to these
automatic snapshot tasks


332
00:14:32,556 --> 00:14:34,976
and keeping your snapshot up
to date, you may also want


333
00:14:34,976 --> 00:14:37,746
to periodically be able to
update the data behind your app


334
00:14:37,746 --> 00:14:40,136
in the background, and
there's a few different ways


335
00:14:40,136 --> 00:14:41,276
that you would go
about doing that.


336
00:14:41,276 --> 00:14:43,686
Now, you might just
be interested in going


337
00:14:43,686 --> 00:14:46,726
out to the Internet to fetch
some new data, and you can do


338
00:14:46,776 --> 00:14:49,546
that with a NSURLSession
and Watch Connectivity,


339
00:14:51,286 --> 00:14:53,706
but there's plenty of other
ways as well, and the first one


340
00:14:53,706 --> 00:14:56,126
to focus on is complication
updates.


341
00:14:56,556 --> 00:14:59,176
Now, complications are visible
right on the watch face,


342
00:14:59,536 --> 00:15:01,526
so it's even more
important that they stay


343
00:15:01,526 --> 00:15:02,736
as up to date as possible.


344
00:15:03,136 --> 00:15:05,726
So there's a kind of update
that is available just to apps


345
00:15:05,726 --> 00:15:07,206
that are on the current
watch face,


346
00:15:07,596 --> 00:15:09,736
and that's the silent
complication push update.


347
00:15:10,556 --> 00:15:13,276
Now, these types of updates
existed in watchOS 2,


348
00:15:13,886 --> 00:15:15,556
but they were a little
bit difficult to use,


349
00:15:15,556 --> 00:15:17,036
because you couldn't
be guaranteed


350
00:15:17,036 --> 00:15:19,336
of how many you would get
over the course of the day,


351
00:15:19,336 --> 00:15:22,426
so it was a little difficult to
plan for how many you would use


352
00:15:22,426 --> 00:15:23,256
and when you would send them.


353
00:15:23,946 --> 00:15:26,196
In watchOS 3, there's
been a big enhancement


354
00:15:26,196 --> 00:15:29,096
for complication push
updates, and we now guarantee


355
00:15:29,096 --> 00:15:30,206
that over the course of the day,


356
00:15:30,206 --> 00:15:33,146
each app on the watch face
can get 50 push updates.


357
00:15:34,296 --> 00:15:36,926
This is great, because it gives
you the opportunity to plan


358
00:15:36,926 --> 00:15:38,696
for how you want to use them
over the course of the day.


359
00:15:39,776 --> 00:15:41,836
So for example, let's
say we took a stocks app.


360
00:15:42,726 --> 00:15:44,336
If we just did the
most naïve thing


361
00:15:44,336 --> 00:15:47,376
and distributed our 50
updates over the full day,


362
00:15:47,746 --> 00:15:49,776
that would give us about
one every 30 minutes.


363
00:15:50,666 --> 00:15:53,656
And that's not too bad, but we
could do a lot better if we took


364
00:15:53,656 --> 00:15:56,226
into account a little bit
information about the data


365
00:15:56,226 --> 00:15:59,296
that we were displaying and
about our user behavior.


366
00:16:00,416 --> 00:16:01,836
For example, let's
say that we know


367
00:16:01,836 --> 00:16:04,756
that our user generally sleeps
between midnight and 6:00 a.m.


368
00:16:06,176 --> 00:16:08,896
If that's the case, then
we really don't need


369
00:16:08,896 --> 00:16:11,246
to update during
that period of time,


370
00:16:11,246 --> 00:16:13,506
and we can distribute the
updates we would have used then


371
00:16:13,506 --> 00:16:14,376
through the rest of the day.


372
00:16:15,406 --> 00:16:17,426
So that'll increase
our update frequency


373
00:16:17,426 --> 00:16:20,586
to once every 20 minutes, which
is a pretty big improvement


374
00:16:20,586 --> 00:16:22,176
with only a small
amount of effort.


375
00:16:23,176 --> 00:16:25,516
But of course, it we
know a little bit more


376
00:16:25,516 --> 00:16:28,446
about the data itself and
could take that into account,


377
00:16:29,076 --> 00:16:31,296
then we might be able to
do even better than that.


378
00:16:31,876 --> 00:16:34,306
So let's say that we knew
that our stocks were only


379
00:16:34,306 --> 00:16:35,716
from the New York
Stock Exchange.


380
00:16:36,146 --> 00:16:38,646
In that case, we'd only need
to update between 9:00 a.m.


381
00:16:38,646 --> 00:16:40,366
and 4:00 p.m. when
the exchange is open,


382
00:16:40,366 --> 00:16:42,526
and that would increase
our frequency


383
00:16:42,526 --> 00:16:44,246
to once every eight-and-a-half
minutes.


384
00:16:45,476 --> 00:16:48,046
So now, obviously, this
specific example will not apply


385
00:16:48,046 --> 00:16:50,526
to the vast majority of
your apps, but the idea


386
00:16:50,526 --> 00:16:52,106
in general definitely can.


387
00:16:52,556 --> 00:16:54,906
Taking into account a little
bit of extra information


388
00:16:54,906 --> 00:16:57,576
that you have about your user
behavior and the kinds of data


389
00:16:57,576 --> 00:17:00,516
that you're displaying can
give you a lot of opportunity


390
00:17:00,616 --> 00:17:03,306
to even further enhance
the experience


391
00:17:03,306 --> 00:17:04,776
when using your app
on the watch face.


392
00:17:06,586 --> 00:17:10,435
Okay, but those are just
for complications displayed


393
00:17:10,435 --> 00:17:11,465
on the current watch face.


394
00:17:12,626 --> 00:17:14,106
Now, if you have an
app that's either not


395
00:17:14,106 --> 00:17:16,396
on the current watch
face but in the dock,


396
00:17:16,806 --> 00:17:17,986
or an app on the
current watch face


397
00:17:17,986 --> 00:17:19,766
where push updates maybe
don't make the most sense.


398
00:17:19,766 --> 00:17:21,996
There are other ways to
update your data as well.


399
00:17:23,116 --> 00:17:24,685
In these cases, you'll
probably want


400
00:17:24,685 --> 00:17:27,656
to do some periodic scheduled
updates in the background


401
00:17:27,656 --> 00:17:32,536
over the course of the day.


402
00:17:32,776 --> 00:17:34,446
So there's another
Background App Refresh API


403
00:17:34,446 --> 00:17:36,846
that will let you schedule
the next time that you'd


404
00:17:36,846 --> 00:17:40,196
like to run, and each time
you run, there's a number


405
00:17:40,196 --> 00:17:41,636
of different things that
you could choose to do.


406
00:17:42,316 --> 00:17:45,106
You could start some data
downloads using NSURLSession


407
00:17:45,106 --> 00:17:46,136
or Watch Connectivity.


408
00:17:47,256 --> 00:17:49,406
Or you could just load new
data out of your database


409
00:17:49,406 --> 00:17:51,796
on the watch if you already have
all the information present.


410
00:17:53,636 --> 00:17:55,616
But in addition to that,
you'll also have the ability


411
00:17:55,616 --> 00:17:57,276
to schedule the next
update session.


412
00:17:57,966 --> 00:18:01,386
So it's not a fixed period that
you have to decide on upfront.


413
00:18:01,666 --> 00:18:03,306
Each time you run, you
have the opportunity


414
00:18:03,306 --> 00:18:05,506
to choose the next best
time to run after it


415
00:18:05,856 --> 00:18:08,926
so that you can optimize
for your data style


416
00:18:08,926 --> 00:18:11,116
and when you know that
it will be updated.


417
00:18:11,536 --> 00:18:14,906
Now, at a minimum,
you'll be guaranteed


418
00:18:14,906 --> 00:18:17,226
that your application can
run at least once an hour,


419
00:18:18,266 --> 00:18:20,926
but there are some other
things can enable you


420
00:18:20,926 --> 00:18:23,706
to run even more
frequently than that.


421
00:18:23,706 --> 00:18:26,706
So the first would be if
your application is backed


422
00:18:26,706 --> 00:18:27,896
by a complication.


423
00:18:28,276 --> 00:18:30,526
So if a complication is
on the current watch face,


424
00:18:30,816 --> 00:18:32,106
then your app will
have the ability


425
00:18:32,106 --> 00:18:33,916
to update more frequently
than once an hour.


426
00:18:34,976 --> 00:18:37,046
But even if you're not on
the current watch face,


427
00:18:37,196 --> 00:18:39,856
you may be able to run more
frequently than this as well.


428
00:18:41,346 --> 00:18:45,126
So the total number of updates
that are available is fixed


429
00:18:45,126 --> 00:18:47,126
for all of the apps that
are currently in the dock.


430
00:18:47,626 --> 00:18:50,136
So if the dock is full, and
all ten apps are present,


431
00:18:50,386 --> 00:18:51,836
then each of the apps
in there will be able


432
00:18:51,836 --> 00:18:52,906
to update once an hour.


433
00:18:53,486 --> 00:18:55,186
But if the user hasn't
filled their dock,


434
00:18:55,186 --> 00:18:56,536
and there are fewer
apps in there,


435
00:18:57,056 --> 00:18:59,426
the updates that would have been
given to the ones that aren't


436
00:18:59,426 --> 00:19:01,706
in use can be distributed
amongst the rest.


437
00:19:02,496 --> 00:19:05,266
So in that case, you
could end up having more


438
00:19:05,266 --> 00:19:06,816
than one update per hour.


439
00:19:08,116 --> 00:19:11,186
Of course, as you're designed
your app, it's probably easiest


440
00:19:11,186 --> 00:19:12,586
to plan for once an hour,


441
00:19:12,586 --> 00:19:14,256
because that's the
minimum guarantee.


442
00:19:14,656 --> 00:19:16,536
But just keep in mind
that it may be possible


443
00:19:16,536 --> 00:19:18,316
that you could be running
more frequently than that,


444
00:19:18,406 --> 00:19:19,956
depending on these
other situations.


445
00:19:20,506 --> 00:19:24,726
So there's one last thing
that I wanted to mention


446
00:19:24,726 --> 00:19:26,286
about complication pushes.


447
00:19:27,356 --> 00:19:30,346
Complication pushes, when you
think of a push, the first thing


448
00:19:30,346 --> 00:19:33,426
that may come to mind is a push
that's initiated from a server,


449
00:19:33,906 --> 00:19:35,536
and that's definitely
one option.


450
00:19:35,536 --> 00:19:37,456
You can start a complication
silent push update


451
00:19:37,456 --> 00:19:38,006
from the server.


452
00:19:38,976 --> 00:19:40,586
But what you may not
have thought of is


453
00:19:40,586 --> 00:19:42,746
that you can also start
complication pushes


454
00:19:42,746 --> 00:19:45,096
from your iPhone app running
on your iPhone as well.


455
00:19:46,106 --> 00:19:48,146
The push update API
is actually part


456
00:19:48,146 --> 00:19:49,626
of the Watch Connectivity
framework.


457
00:19:50,036 --> 00:19:53,096
So if your app on your iPhone is
running for some other reason,


458
00:19:53,096 --> 00:19:54,786
either the user is
directly using it


459
00:19:54,786 --> 00:19:57,866
or it's using some Background
App Refresh API on the phone,


460
00:19:58,276 --> 00:20:00,966
it can initiate a complication
push update to the watch


461
00:20:01,406 --> 00:20:03,396
to update the UI on
your complication.


462
00:20:04,756 --> 00:20:06,716
So even if you don't
have a server


463
00:20:06,716 --> 00:20:08,706
that has the knowledge
necessary to do pushing,


464
00:20:09,346 --> 00:20:11,656
you may actually still be
able to take advantage of this


465
00:20:11,656 --> 00:20:13,346
to keep your watch
face up to date.


466
00:20:13,426 --> 00:20:15,056
So just something
to keep in mind


467
00:20:15,056 --> 00:20:16,586
as you're designing
your complications


468
00:20:16,636 --> 00:20:18,496
and your refresh
strategies for your apps.


469
00:20:19,566 --> 00:20:23,356
So that's just a quick summary
of Background App Refresh


470
00:20:23,356 --> 00:20:27,136
and how all this stuff works,
and I really want to reemphasize


471
00:20:27,136 --> 00:20:30,506
that it's really a critical part
of building responsive apps.


472
00:20:30,856 --> 00:20:32,796
So no matter what kind of app
it is that you're building


473
00:20:32,796 --> 00:20:35,016
for Apple Watch, I'd strongly
encourage you to check


474
00:20:35,016 --> 00:20:38,706
out the Keeping Your Watch Up
to Date session to learn more


475
00:20:38,706 --> 00:20:41,036
about Background App Refresh
and how you can use it


476
00:20:41,036 --> 00:20:43,496
to keep your apps live,
responsive, and up to date.


477
00:20:45,396 --> 00:20:48,456
So next, let's talk about
navigation enhancements.


478
00:20:49,026 --> 00:20:52,516
Now, as I've mentioned, we've
already done a whole bunch


479
00:20:52,516 --> 00:20:56,066
of work to optimize navigation
on Apple Watch itself.


480
00:20:56,416 --> 00:20:59,166
So the system is already really
fast to get into your apps.


481
00:20:59,506 --> 00:21:02,916
The next step is optimizing
navigation within your apps


482
00:21:03,116 --> 00:21:05,416
so that it's really fast
to get to the information


483
00:21:05,416 --> 00:21:06,876
and actions that the users want.


484
00:21:07,876 --> 00:21:10,806
Now, there's one common
pattern in particular


485
00:21:10,806 --> 00:21:11,676
that I want to start with.


486
00:21:12,586 --> 00:21:15,456
There's many apps that have
a hierarchical organization


487
00:21:15,456 --> 00:21:16,106
to their data.


488
00:21:16,826 --> 00:21:20,046
For example, there's a
top-level view that has a bunch


489
00:21:20,046 --> 00:21:22,956
of information on a
list of top-level items.


490
00:21:23,086 --> 00:21:25,486
In this case, I've written
an app to keep track of all


491
00:21:25,486 --> 00:21:27,056
of the beverages that
I've consumed today.


492
00:21:28,196 --> 00:21:31,066
Now, if you want information
on any one particular item,


493
00:21:31,266 --> 00:21:33,886
you can tap on it, and it'll
slide into a detail page.


494
00:21:34,126 --> 00:21:35,936
So here we can see that
I've had three cups


495
00:21:35,936 --> 00:21:36,806
of coffee so far today.


496
00:21:38,406 --> 00:21:41,476
In watchOS 2, if you wanted to
get more information about one


497
00:21:41,476 --> 00:21:44,056
of those other items, you
would tap the Back button,


498
00:21:44,056 --> 00:21:46,196
find the other item,
and slide into that one.


499
00:21:46,196 --> 00:21:49,856
Now, that may not seem
like a lot of overhead,


500
00:21:50,376 --> 00:21:54,246
but given how short we're trying
to keep these interactions,


501
00:21:54,456 --> 00:21:56,196
that additional time
just moving back


502
00:21:56,196 --> 00:21:58,726
and forth can actually
really add up pretty quickly.


503
00:21:59,386 --> 00:22:02,116
So in watchOS 3, you'll find
that there's a lot of apps


504
00:22:02,116 --> 00:22:04,646
that have this kind of
pattern, where we've now moved


505
00:22:04,646 --> 00:22:06,636
to a new style of
navigation for them,


506
00:22:06,636 --> 00:22:09,656
where you can just use your
finger or the digital crown


507
00:22:09,916 --> 00:22:12,826
to quickly scroll and page
between each of those items


508
00:22:13,106 --> 00:22:15,696
without having to do the back
and forth navigation transition.


509
00:22:16,996 --> 00:22:19,116
So if you look at, for
example, the Stocks app


510
00:22:19,116 --> 00:22:20,816
or the Weather app,
they've been redesigned


511
00:22:20,816 --> 00:22:23,356
to enable this ok
interaction, and we wanted


512
00:22:23,356 --> 00:22:24,556
to make it really easy for you


513
00:22:24,556 --> 00:22:26,126
to adopt this in
your apps as well.


514
00:22:26,736 --> 00:22:29,696
So the WatchKit table interface
control now has an option


515
00:22:29,696 --> 00:22:34,126
to enable this vertical paging
mode when you're navigated


516
00:22:34,126 --> 00:22:37,356
into a detail view, and it's
really easy to opt into it.


517
00:22:37,356 --> 00:22:38,916
There's just a couple of
things you have to do.


518
00:22:39,316 --> 00:22:41,836
First, obviously you can enable
the option on your table.


519
00:22:42,786 --> 00:22:44,426
But then you also
have to make sure


520
00:22:44,426 --> 00:22:46,386
that in your storyboard
you're using segues


521
00:22:46,386 --> 00:22:48,746
to represent the
transitions from your table


522
00:22:48,746 --> 00:22:49,926
into the detail views.


523
00:22:50,476 --> 00:22:53,256
By doing that, you give WatchKit
all the information it needs


524
00:22:53,256 --> 00:22:56,036
to be able to pre-generate
the views above and below,


525
00:22:56,036 --> 00:22:58,876
and place them in a
vertical paging interface


526
00:22:59,146 --> 00:23:01,786
so that it can move
between them.


527
00:23:01,896 --> 00:23:04,096
So not too much adoption,
and it's really easy.


528
00:23:04,096 --> 00:23:07,086
The only other thing to keep in
mind is that to get the behavior


529
00:23:07,716 --> 00:23:11,506
to match this, you also need
to make sure that the design


530
00:23:11,506 --> 00:23:13,946
of your detail views
fits all the content


531
00:23:13,946 --> 00:23:16,046
of the detail view
onto a single screen.


532
00:23:16,806 --> 00:23:19,876
If the actual detail view
itself is also scrollable,


533
00:23:20,146 --> 00:23:22,646
then that scrolling in the
detail view will take precedence


534
00:23:22,646 --> 00:23:25,516
over the outer paging interface.


535
00:23:26,026 --> 00:23:27,506
So you definitely want to focus


536
00:23:27,506 --> 00:23:30,236
on simplifying the views
for the detail items.


537
00:23:30,526 --> 00:23:32,706
You'll find, again, in the
Stocks and Weather apps


538
00:23:32,706 --> 00:23:34,216
that these views now, while


539
00:23:34,216 --> 00:23:36,616
in watchOS 2 they scrolled
vertically and had a bunch


540
00:23:36,616 --> 00:23:39,366
of information in them, are now
just single-page interfaces,


541
00:23:39,366 --> 00:23:42,626
so that they can easily
transition like this.


542
00:23:44,636 --> 00:23:47,496
Okay, so we've gotten our
users into our app really fast.


543
00:23:48,126 --> 00:23:50,626
We've optimized the background
refresh so that our data is


544
00:23:50,626 --> 00:23:53,496
up to date, and we've
optimized navigation


545
00:23:53,496 --> 00:23:54,456
within our app as well.


546
00:23:55,246 --> 00:23:58,506
The last part of ensuring
that individual interactions


547
00:23:58,506 --> 00:24:00,926
with Apple Watch are short
is to get our users back


548
00:24:00,926 --> 00:24:02,536
out of our app as
quickly as we can.


549
00:24:03,236 --> 00:24:04,496
And of course, on Apple Watch,


550
00:24:04,496 --> 00:24:05,806
that means giving
them the confidence


551
00:24:05,806 --> 00:24:06,886
that they can drop their wrists.


552
00:24:08,256 --> 00:24:10,196
So there's a number of ways that
you might go about doing this.


553
00:24:10,196 --> 00:24:12,046
Let's just take one
example here.


554
00:24:12,656 --> 00:24:16,086
Let's say that I've got an app
where I'm purchasing my dinner.


555
00:24:17,196 --> 00:24:19,396
When I tap this Buy
button, I'm going to go


556
00:24:19,396 --> 00:24:22,036
and do some network activity
to a server, which is going


557
00:24:22,036 --> 00:24:23,906
to perform some actions
to decide whether


558
00:24:23,906 --> 00:24:25,396
or not I can actually
make this purchase.


559
00:24:25,906 --> 00:24:27,036
Now, that might take a while.


560
00:24:27,566 --> 00:24:29,066
So my first inclination might be


561
00:24:29,066 --> 00:24:31,946
to display an indeterminate
progress indicator to the user,


562
00:24:31,946 --> 00:24:33,566
letting them know that
something's happening,


563
00:24:33,836 --> 00:24:35,216
but I'm not sure how
long it's going to take.


564
00:24:35,936 --> 00:24:37,946
Now, unfortunately, that means
that they're going to sit there


565
00:24:37,946 --> 00:24:39,876
with their arm up, waiting
for something to happen


566
00:24:39,876 --> 00:24:41,686
until this task finishes.


567
00:24:42,356 --> 00:24:44,966
But if I'm really confident
that the vast majority


568
00:24:44,966 --> 00:24:46,996
of the time the task
is going to succeed,


569
00:24:47,456 --> 00:24:49,016
I'm not actually
getting anything


570
00:24:49,016 --> 00:24:50,476
by having them sit
there and wait for it.


571
00:24:51,326 --> 00:24:52,826
So instead, you could decide


572
00:24:52,826 --> 00:24:55,706
that you could present
some confirmation interface


573
00:24:56,026 --> 00:24:57,176
that really gives
them the confidence


574
00:24:57,176 --> 00:24:59,426
that you're taking care
of the task without having


575
00:24:59,426 --> 00:25:00,486
to wait for it to occur.


576
00:25:00,966 --> 00:25:02,516
So in this case, I've
just said, "Got it!


577
00:25:02,766 --> 00:25:03,636
We're working on your order."


578
00:25:04,136 --> 00:25:08,236
Once they read that, they have
the confidence they can drop


579
00:25:08,236 --> 00:25:11,906
their wrist, and you can
continue the operation


580
00:25:11,996 --> 00:25:13,116
in the background for up


581
00:25:13,116 --> 00:25:16,146
to 30 seconds using the
background activity APIs


582
00:25:16,146 --> 00:25:17,366
on NSProcessInfo.


583
00:25:19,156 --> 00:25:21,696
Generally, everything
works, and so you don't have


584
00:25:21,696 --> 00:25:22,686
to get their attention back.


585
00:25:23,106 --> 00:25:25,836
Now, of course, sometimes
something may go wrong.


586
00:25:26,106 --> 00:25:27,556
Maybe your server's
not reachable,


587
00:25:27,556 --> 00:25:28,666
or there's some other issue.


588
00:25:29,266 --> 00:25:33,476
In that case, watchOS 3 includes
a brand new User Notification


589
00:25:33,476 --> 00:25:36,646
framework that lets you
schedule local notifications


590
00:25:36,646 --> 00:25:39,396
on the watch itself,
and that's a great way,


591
00:25:39,436 --> 00:25:40,996
during this background
time to be able


592
00:25:40,996 --> 00:25:42,546
to get the user's
attention back,


593
00:25:42,786 --> 00:25:45,796
let them know something went
wrong, and have them be able


594
00:25:45,796 --> 00:25:46,736
to fix it really easily.


595
00:25:47,956 --> 00:25:49,996
So in this case, let's
say that, unfortunately,


596
00:25:49,996 --> 00:25:51,846
my order of chicken
was not available.


597
00:25:52,216 --> 00:25:54,806
I can pop up a notification,
letting them know that happened.


598
00:25:55,456 --> 00:25:58,076
Of course, because notifications
can include actions,


599
00:25:58,306 --> 00:26:00,156
I can have some buttons
right there with options


600
00:26:00,156 --> 00:26:02,766
to resolve the issue, or I
can get them quickly back


601
00:26:02,766 --> 00:26:06,796
into my app so that they can fix
it themselves in the full app.


602
00:26:06,796 --> 00:26:09,456
The User Notification framework
is a great way to do this,


603
00:26:09,456 --> 00:26:12,986
but of course, it's not just for
letting users know about issues.


604
00:26:13,476 --> 00:26:15,346
Local notifications can
be a great enhancement


605
00:26:15,346 --> 00:26:16,746
for many different
kinds of apps.


606
00:26:17,536 --> 00:26:19,676
And the great thing about the
User Notification framework


607
00:26:19,676 --> 00:26:21,936
in watchOS 3 is that it can work


608
00:26:21,936 --> 00:26:23,536
when the watch is
entirely standalone,


609
00:26:23,536 --> 00:26:25,076
because it's scheduling
the notifications


610
00:26:25,076 --> 00:26:26,076
on the watch itself.


611
00:26:27,096 --> 00:26:29,246
But now you do have a choice
to make with notifications,


612
00:26:29,276 --> 00:26:32,066
because you can either use the
notification framework directly


613
00:26:32,066 --> 00:26:33,926
on the watch to schedule
your notifications,


614
00:26:34,276 --> 00:26:36,946
or you can continue doing what
you were doing in watchOS 2,


615
00:26:37,376 --> 00:26:38,866
sending a message
back to your phone app


616
00:26:38,866 --> 00:26:41,216
with Watch Connectivity and
scheduling a notification there.


617
00:26:42,076 --> 00:26:44,536
These are actually both
totally valid things to do,


618
00:26:44,536 --> 00:26:45,576
and it depends a little bit


619
00:26:45,576 --> 00:26:46,926
on what you're trying
to accomplish.


620
00:26:48,176 --> 00:26:49,416
The important distinction is


621
00:26:49,416 --> 00:26:50,806
where the notifications
will appear.


622
00:26:51,496 --> 00:26:53,706
So if you send a message
back to your phone app


623
00:26:53,836 --> 00:26:56,046
with Watch Connectivity, and
schedule the notification there,


624
00:26:56,656 --> 00:26:59,256
the notification will appear on
both your phone and your watch,


625
00:26:59,556 --> 00:27:01,726
and you'll be notified on
whichever device you're using.


626
00:27:01,726 --> 00:27:05,116
So if you were using your
phone, it would appear there.


627
00:27:05,176 --> 00:27:07,396
If you're using your watch,
it would notify you there.


628
00:27:08,256 --> 00:27:10,536
If you use the new User
Notification framework


629
00:27:10,536 --> 00:27:14,236
on the watch itself, that
notification will only appear


630
00:27:14,236 --> 00:27:16,736
on the watch and will not
propagate back to the phone.


631
00:27:17,756 --> 00:27:20,376
Now, that actually might
be exactly what you want.


632
00:27:20,376 --> 00:27:22,266
There are many cases
where you really do want


633
00:27:22,266 --> 00:27:24,296
to schedule a notification
that would only ever show


634
00:27:24,296 --> 00:27:27,406
up on the watch at all, and
that's now easy and possible


635
00:27:27,486 --> 00:27:28,986
with the new User
Notification framework.


636
00:27:29,986 --> 00:27:31,516
But even better is
you-- [clapping].


637
00:27:36,836 --> 00:27:37,486
Thanks. But even better,


638
00:27:37,486 --> 00:27:39,356
you don't necessarily
have to make the choice.


639
00:27:39,726 --> 00:27:42,526
If your goal is that you want
the notification to appear


640
00:27:42,526 --> 00:27:43,966
in the right spot,
no matter what,


641
00:27:44,266 --> 00:27:46,806
even if the user leaves their
phone behind, you could choose


642
00:27:46,806 --> 00:27:49,576
to schedule it in both places
using Watch Connectivity


643
00:27:49,576 --> 00:27:51,126
to send a message
back to your phone app


644
00:27:51,126 --> 00:27:54,086
and scheduling it there, or
maybe it was just data that was


645
00:27:54,086 --> 00:27:55,446
in your cloud service,
so you just,


646
00:27:55,516 --> 00:27:56,676
by default, schedule it there.


647
00:27:57,286 --> 00:27:59,906
And also scheduling it with the
new User Notification framework


648
00:27:59,986 --> 00:28:00,706
on the watch.


649
00:28:01,436 --> 00:28:02,526
If you do that, as long


650
00:28:02,526 --> 00:28:05,766
as you've used the same
notification identifier both


651
00:28:05,766 --> 00:28:06,706
times that you schedule it,


652
00:28:07,306 --> 00:28:09,466
watchOS will de-duplicate
those notifications


653
00:28:09,466 --> 00:28:12,476
so that you only have it appear
on the watch once, not twice.


654
00:28:13,026 --> 00:28:16,246
So some great new stuff with
the User Notification framework.


655
00:28:19,416 --> 00:28:21,936
Now, while individual
interactions


656
00:28:21,936 --> 00:28:24,856
with the watch are short, there
may be some apps that you want


657
00:28:24,856 --> 00:28:27,306
to use multiple times
over a longer period.


658
00:28:28,086 --> 00:28:30,226
For example, here I've got
my chicken pot pie recipe,


659
00:28:30,226 --> 00:28:31,276
and I'm going to
the store to pick


660
00:28:31,276 --> 00:28:32,496
up all the items
I need to cook it.


661
00:28:33,886 --> 00:28:37,446
Now, in watchOS 3, each time I
raise my wrist, I'm brought back


662
00:28:37,506 --> 00:28:39,136
to the last app that I was used


663
00:28:39,566 --> 00:28:42,926
to that I can really quickly
see the items that I still need


664
00:28:42,926 --> 00:28:45,136
to pick up, and check off the
ones that I've already gotten.


665
00:28:45,696 --> 00:28:49,676
I'll be brought back
to that last app for up


666
00:28:49,676 --> 00:28:51,566
to eight minutes
after I last used it.


667
00:28:52,466 --> 00:28:54,686
This is great, because
it lets you design apps


668
00:28:54,686 --> 00:28:56,376
that have this kind of
interaction pattern,


669
00:28:56,376 --> 00:28:59,156
where you use it for
many brief interactions,


670
00:28:59,156 --> 00:29:00,716
but over a longer
period of time.


671
00:29:01,396 --> 00:29:04,746
This is the new user default
for all users in watchOS 3,


672
00:29:04,746 --> 00:29:06,566
so it's to plan for this


673
00:29:06,786 --> 00:29:09,106
and build your apps
and design around it.


674
00:29:10,516 --> 00:29:13,876
These are just a few of the
ways that we've been thinking


675
00:29:13,876 --> 00:29:16,776
about improving app
interactions in watchOS 3,


676
00:29:17,576 --> 00:29:19,686
and there's a ton of other ways.


677
00:29:19,776 --> 00:29:22,136
I'd encourage you to check out
the Quick Interaction Techniques


678
00:29:22,136 --> 00:29:24,906
for watchOS session, where you
can get more detail on a bunch


679
00:29:24,906 --> 00:29:27,866
of these kinds of ideas and
a bunch of others as well.


680
00:29:28,446 --> 00:29:31,586
So that's navigation.


681
00:29:32,726 --> 00:29:33,896
Now let's talk a little bit more


682
00:29:33,896 --> 00:29:37,156
about the enhanced API
availability in watchOS 3.


683
00:29:41,236 --> 00:29:43,336
As I mentioned earlier,
we've brought a bunch


684
00:29:43,336 --> 00:29:45,646
of great frameworks from
some of our other platforms.


685
00:29:45,886 --> 00:29:47,456
We've got some great
new frameworks.


686
00:29:47,456 --> 00:29:49,316
For example, the User
Notification framework,


687
00:29:49,736 --> 00:29:52,646
and we've also added a
whole bunch of APIs to many


688
00:29:52,646 --> 00:29:55,066
of the frameworks that are
already on Apple Watch.


689
00:29:56,476 --> 00:29:58,616
So let's start with one
we've already talked about,


690
00:29:59,296 --> 00:30:00,346
Background App Refresh.


691
00:30:00,476 --> 00:30:02,146
I wanted to bring
it up again just


692
00:30:02,146 --> 00:30:04,876
to reinforce how important
I feel like this stuff is.


693
00:30:05,466 --> 00:30:08,596
And the three key things that
it gives you are the ability


694
00:30:08,596 --> 00:30:12,856
to schedule updates, perform
complication push updates


695
00:30:12,856 --> 00:30:15,566
with that guarantee of 50
over the course of the day,


696
00:30:16,406 --> 00:30:18,856
and make sure that your snapshot
and your doc is up to date


697
00:30:18,856 --> 00:30:20,996
and in sync with
your notifications


698
00:30:21,286 --> 00:30:22,496
and your complications.


699
00:30:23,926 --> 00:30:26,186
Again, definitely check out
the Keeping Your Watch App


700
00:30:26,186 --> 00:30:31,316
Up to Date session as well for
far more information about this.


701
00:30:31,536 --> 00:30:34,806
Now, fitness apps have a unique
need for staying up to date,


702
00:30:35,246 --> 00:30:37,446
because during a workout
it's really important


703
00:30:37,446 --> 00:30:40,316
that they be displaying
current information and up


704
00:30:40,316 --> 00:30:41,546
to date throughout the workout.


705
00:30:42,166 --> 00:30:45,036
So the big enhancement for
workout apps this year is that,


706
00:30:45,036 --> 00:30:47,506
in watchOS 3, they will continue
to run in the background


707
00:30:47,506 --> 00:30:50,286
for the entire duration
of your workout session.


708
00:30:50,826 --> 00:30:54,816
This gives you the opportunity
to monitor workout progress,


709
00:30:55,136 --> 00:30:58,616
watch-- use all of the
sensor API to keep track


710
00:30:58,616 --> 00:30:59,506
of where things are going,


711
00:30:59,506 --> 00:31:01,806
and notify the user
using notifications,


712
00:31:01,806 --> 00:31:03,296
or haptics, or sounds.


713
00:31:04,576 --> 00:31:07,166
And of course, we've enhanced
the access to the heart rate


714
00:31:07,386 --> 00:31:11,146
and accelerometer so they
now provide continuous values


715
00:31:11,146 --> 00:31:14,476
throughout the entire workout,
instead of batching those values


716
00:31:14,476 --> 00:31:16,616
in increments that are
delivered in chunks.


717
00:31:17,236 --> 00:31:19,926
So it makes it really easy to
keep track of the current state


718
00:31:19,926 --> 00:31:22,856
of the workout the entire
time and stay up to date.


719
00:31:23,776 --> 00:31:26,126
Because they're running,
you can also update your UI,


720
00:31:26,416 --> 00:31:28,996
which makes sure that as
the user raises their wrist,


721
00:31:28,996 --> 00:31:31,326
they can very quickly see
the correct current state


722
00:31:31,326 --> 00:31:33,356
of the workout without
any extra delays.


723
00:31:34,816 --> 00:31:37,526
It's a really, really big year,
actually, for fitness apps,


724
00:31:37,526 --> 00:31:40,226
and there's an entire session
just about these and a number


725
00:31:40,226 --> 00:31:42,766
of other enhancements for
these apps, so definitely check


726
00:31:42,766 --> 00:31:45,646
out Building Great Workout
Apps to learn all about how


727
00:31:45,646 --> 00:31:48,386
to make your workout apps
really amazing in watchOS 3.


728
00:31:50,236 --> 00:31:51,446
But there is one
bit I want to focus


729
00:31:51,446 --> 00:31:52,816
on a little bit more here first,


730
00:31:52,816 --> 00:31:54,176
and that's the background
runtime.


731
00:31:54,736 --> 00:31:57,606
Because there's a bit of
a balance to be had here,


732
00:31:58,086 --> 00:31:59,786
you absolutely want
to have your app


733
00:31:59,786 --> 00:32:01,446
up to date during the workout.


734
00:32:01,996 --> 00:32:03,236
But you also want to make sure


735
00:32:03,236 --> 00:32:04,956
that you're preserving
a great experience


736
00:32:04,956 --> 00:32:07,916
for users throughout the rest
of their day by being careful


737
00:32:07,916 --> 00:32:09,256
to preserve their battery life.


738
00:32:10,616 --> 00:32:12,996
And a big components
of that is making sure


739
00:32:12,996 --> 00:32:14,976
that you're keeping track
of the amount of CPU


740
00:32:14,976 --> 00:32:16,356
that you're using
during the workout.


741
00:32:17,486 --> 00:32:20,176
And Xcode now has a great
interface to help you keep track


742
00:32:20,176 --> 00:32:22,676
of that, both how much
you're using at an instant


743
00:32:23,196 --> 00:32:25,496
and the amount that
you're using in aggregate


744
00:32:25,496 --> 00:32:28,186
over a period of time.


745
00:32:28,386 --> 00:32:30,916
So for the first part,
there's a clear view,


746
00:32:30,916 --> 00:32:33,636
right up here near the top, that
will tell you the amount of CPU


747
00:32:33,636 --> 00:32:36,566
that you're currently using,
and then down in the center,


748
00:32:36,566 --> 00:32:39,666
there's a great graph that shows
you some historical information


749
00:32:40,006 --> 00:32:41,756
about the CPU usage over time.


750
00:32:43,646 --> 00:32:45,566
Now, you can clearly
see here the spikes,


751
00:32:45,566 --> 00:32:46,776
where we've been
doing a bunch of work.


752
00:32:47,416 --> 00:32:49,216
But in yellow, in
the center there,


753
00:32:49,216 --> 00:32:51,526
you can see that we've got a
rolling average of the amount


754
00:32:51,526 --> 00:32:54,266
of CPU that's being consumed
by our app in the background


755
00:32:54,266 --> 00:32:55,366
over some period of time.


756
00:32:55,966 --> 00:32:57,566
Now this part is the
one I want to focus on,


757
00:32:57,566 --> 00:32:58,556
and it's the most important,


758
00:32:59,006 --> 00:33:01,206
because while your workout app
is running in the background,


759
00:33:01,626 --> 00:33:04,746
there's a cap imposed
on the total amount


760
00:33:04,746 --> 00:33:06,836
of average CPU usage
that it can be using


761
00:33:06,836 --> 00:33:07,936
over this period of time.


762
00:33:08,446 --> 00:33:10,756
And you want to stay below
that cap to make sure


763
00:33:11,056 --> 00:33:12,906
that your app continues
to run in the background,


764
00:33:12,906 --> 00:33:14,636
and preserves the
battery life of the user


765
00:33:14,636 --> 00:33:15,916
over the whole rest of the day.


766
00:33:17,596 --> 00:33:20,176
So that cap here is
indicated clearly by Xcode


767
00:33:20,176 --> 00:33:22,406
by the red dotted
line, and you can watch


768
00:33:22,406 --> 00:33:24,706
as your average approaches
it, and make sure


769
00:33:24,706 --> 00:33:25,506
that you stay below it.


770
00:33:26,906 --> 00:33:28,916
So there's, again,
a ton of information


771
00:33:28,916 --> 00:33:31,576
about the background
fitness workout experience,


772
00:33:31,576 --> 00:33:32,226
improvements.


773
00:33:32,226 --> 00:33:34,466
Definitely go check out more of
that, but this is the one thing


774
00:33:34,466 --> 00:33:37,186
that you really should keep
in mind about CPU usage


775
00:33:37,376 --> 00:33:38,656
as you're developing these apps.


776
00:33:39,246 --> 00:33:43,096
So in addition to the sensor
enhancements for these kinds


777
00:33:43,096 --> 00:33:44,416
of apps with making heart rate


778
00:33:44,416 --> 00:33:46,486
and accelerometer
continuously available,


779
00:33:46,786 --> 00:33:50,006
we've also got a bunch of
great new hardware access APIs.


780
00:33:50,646 --> 00:33:53,506
So crown events give you raw
access to rotation events


781
00:33:53,506 --> 00:33:54,506
from the digital crown.


782
00:33:55,596 --> 00:33:59,036
In watchOS 2, your apps could
use the crown for scrolling


783
00:33:59,036 --> 00:34:02,446
within your interface or for
picking items from a list


784
00:34:02,446 --> 00:34:03,286
with the picker control.


785
00:34:03,916 --> 00:34:07,336
But of course, we saw
many innovative uses


786
00:34:07,336 --> 00:34:10,396
of the picker control for
other interesting things,


787
00:34:10,676 --> 00:34:13,315
and we realize that everybody,
obviously, wants raw access


788
00:34:13,315 --> 00:34:14,326
to digital crown events.


789
00:34:14,556 --> 00:34:16,716
So that's now available, and
you can use it for all kinds


790
00:34:16,716 --> 00:34:18,466
of other interactions
in your apps as well.


791
00:34:19,676 --> 00:34:19,755
Now--


792
00:34:20,516 --> 00:34:24,676
[ Applause ]


793
00:34:25,176 --> 00:34:28,045
Now just gesture recognizers
really make it easy


794
00:34:28,306 --> 00:34:30,755
to add touch interactions
to your apps.


795
00:34:31,156 --> 00:34:32,616
There's a whole bunch


796
00:34:32,616 --> 00:34:37,106
of single-finger interactions
available, like tap, swipe, pan,


797
00:34:37,106 --> 00:34:40,346
long-press, and it's really
easy to add these to all


798
00:34:40,346 --> 00:34:42,136
of your different
WatchKit interface elements


799
00:34:42,436 --> 00:34:43,985
so that you can have
different parts


800
00:34:43,985 --> 00:34:46,346
of your app screen
respond in different ways.


801
00:34:47,246 --> 00:34:49,626
And of course, we've also made
the gyroscope accessible now


802
00:34:49,626 --> 00:34:50,926
in addition to the
accelerometer,


803
00:34:51,235 --> 00:34:53,186
so you've got a ton of
information about the motion


804
00:34:53,186 --> 00:34:56,436
of the device available for all
kinds of interesting use cases.


805
00:34:57,706 --> 00:34:58,726
Again, the quick-- oop.


806
00:34:59,066 --> 00:34:59,816
Go for it [clapping].


807
00:35:02,556 --> 00:35:04,736
Again, the quick interaction
technique session has a bunch


808
00:35:04,736 --> 00:35:07,026
of information on this
and other use cases.


809
00:35:07,526 --> 00:35:09,456
I do want to give you a
couple examples of some


810
00:35:09,456 --> 00:35:11,076
of the cool things that you
can do with this though.


811
00:35:12,006 --> 00:35:15,436
So first off, you can see here
Acorns has made use of the crown


812
00:35:15,926 --> 00:35:18,326
to let you quickly scrub
through information


813
00:35:18,326 --> 00:35:21,986
on a graph showing you
the historical information


814
00:35:22,356 --> 00:35:23,166
about your account.


815
00:35:23,876 --> 00:35:26,146
So in a single simple
interface, you can quickly move


816
00:35:26,146 --> 00:35:28,926
through a lot of information,
all visible on one screen.


817
00:35:31,376 --> 00:35:34,706
Here we have Sweat with Kayla,
which has taken advantage


818
00:35:34,776 --> 00:35:38,566
of the swipe gestures to
be able to quickly move


819
00:35:38,566 --> 00:35:40,066
between these different workouts


820
00:35:40,066 --> 00:35:41,426
and choose just the
one that they want.


821
00:35:41,556 --> 00:35:44,576
Of course, you can also use
the digital crown to move


822
00:35:44,576 --> 00:35:47,086
between them, and with just a
tap, you can activate the one


823
00:35:47,086 --> 00:35:47,876
that you're interested in.


824
00:35:48,936 --> 00:35:50,016
Now you'll notice
that there's some kind


825
00:35:50,016 --> 00:35:51,226
of interesting visuals here


826
00:35:51,226 --> 00:35:54,026
that are adding a little
liveliness to the interface.


827
00:35:54,026 --> 00:35:56,636
And to help make that
possible in all your apps,


828
00:35:56,876 --> 00:35:58,816
we've got some great
graphics and media frameworks


829
00:35:58,816 --> 00:36:00,236
that we've bought
over to Apple Watch.


830
00:36:00,906 --> 00:36:04,186
SpriteKit and SceneKit make
it really easy to add both 2D


831
00:36:04,186 --> 00:36:06,316
and 3D graphics and animations


832
00:36:06,576 --> 00:36:08,176
to enhance different
parts of your apps.


833
00:36:08,746 --> 00:36:10,006
And of course you can use them


834
00:36:10,006 --> 00:36:13,436
in your long look
notifications interfaces as well


835
00:36:13,756 --> 00:36:16,676
to make your notifications
really interesting and lively.


836
00:36:18,446 --> 00:36:19,816
And because we've
been talking a lot


837
00:36:19,816 --> 00:36:22,776
about simplifying navigation, we
also wanted to make it possible


838
00:36:22,776 --> 00:36:24,216
to play back video in line


839
00:36:24,216 --> 00:36:25,976
in your application
interfaces as well.


840
00:36:26,876 --> 00:36:29,966
In watchOS 2, we introduced
video playback in watchOS apps,


841
00:36:30,476 --> 00:36:32,416
but for it to work there,
it actually took you


842
00:36:32,416 --> 00:36:34,276
out into a separate
full-screen interface,


843
00:36:34,276 --> 00:36:35,276
where you watched a video


844
00:36:35,276 --> 00:36:36,616
and then dismissed it
when you were done.


845
00:36:37,176 --> 00:36:38,826
With inline video
playback, you don't have


846
00:36:38,826 --> 00:36:41,166
to leave your application's
primary interface at all,


847
00:36:41,226 --> 00:36:42,696
and you can play it
back right there.


848
00:36:43,346 --> 00:36:45,376
Even better, it supports
autoplay,


849
00:36:45,656 --> 00:36:48,066
so as soon as the video
becomes visible on screen,


850
00:36:48,066 --> 00:36:50,376
it will start playing and
can pause when it goes off.


851
00:36:50,826 --> 00:36:53,566
If you have multiple short
videos on a scrolling list,


852
00:36:53,566 --> 00:36:55,886
the one on screen at any one
time will automatically play


853
00:36:55,886 --> 00:36:57,306
while all the others pause.


854
00:36:57,816 --> 00:36:58,836
It's a really great way


855
00:36:58,836 --> 00:37:00,666
to add some really
short interaction videos


856
00:37:00,666 --> 00:37:01,496
into your apps.


857
00:37:02,156 --> 00:37:04,966
And because apps in the dock are
live while they're in the dock,


858
00:37:05,586 --> 00:37:07,656
the autoplay feature can
actually even work there.


859
00:37:08,046 --> 00:37:10,766
So if you have a quick video
that needs to be displayed


860
00:37:10,766 --> 00:37:13,116
as you scroll through the
dock, when users come to rest


861
00:37:13,116 --> 00:37:15,666
on your app, that video can
start playing right in line


862
00:37:15,666 --> 00:37:17,256
without even taking
your app full screen.


863
00:37:17,896 --> 00:37:19,216
So some really great
enhancements


864
00:37:19,216 --> 00:37:20,446
for video in watchOS 3.


865
00:37:20,826 --> 00:37:25,596
SpriteKit and SceneKit can be
used for all kinds of things.


866
00:37:25,646 --> 00:37:28,656
Here you can see a Seven
Minute Workout has taken great


867
00:37:28,656 --> 00:37:32,256
advantage of SceneKit to bring a
lot of the visuals that they had


868
00:37:32,256 --> 00:37:34,486
on their iPhone app to
Apple Watch as well.


869
00:37:35,126 --> 00:37:37,286
So you can see exactly the
workout that you want to perform


870
00:37:37,356 --> 00:37:40,736
and get a lot of clarity
on how you should do it.


871
00:37:41,246 --> 00:37:43,986
So in addition to adding a
lot of interesting visuals


872
00:37:43,986 --> 00:37:47,016
to your apps, SpriteKit and
SceneKit are obviously great


873
00:37:47,016 --> 00:37:48,506
for short interaction games.


874
00:37:50,296 --> 00:37:53,226
We've also bought GameKit to
Apple Watch and watchOS 3,


875
00:37:53,726 --> 00:37:55,066
which makes it really
easy for you


876
00:37:55,066 --> 00:37:58,126
to add turn-based gaming
to your watch apps.


877
00:37:59,396 --> 00:38:01,996
Because GameKit's turn-based
gaming APIs are built on top


878
00:38:01,996 --> 00:38:04,236
of NSURLSession,
they can work even


879
00:38:04,236 --> 00:38:05,286
if your phone is not present,


880
00:38:05,286 --> 00:38:07,246
when your watch is near
known WiFi networks.


881
00:38:09,586 --> 00:38:12,306
The GameKit achievement
APIs can also be used


882
00:38:12,306 --> 00:38:15,356
to earn achievements on Apple
Watch, which can then be viewed


883
00:38:15,356 --> 00:38:18,506
on iPhone, or iPad, or
your other platforms


884
00:38:18,506 --> 00:38:19,206
where you've got your game.


885
00:38:19,756 --> 00:38:23,156
And of course, with AV
foundation, it's not really easy


886
00:38:23,156 --> 00:38:25,266
to play sounds out
of the watch speaker.


887
00:38:25,866 --> 00:38:30,456
Now, gaming on Apple Watch is
really just getting started,


888
00:38:30,456 --> 00:38:32,796
and with some of these new
frameworks, I'm really excited


889
00:38:32,796 --> 00:38:34,506
to see what kinds of
things you guys come up with


890
00:38:34,856 --> 00:38:37,016
for short interaction
games on the watch.


891
00:38:37,556 --> 00:38:40,036
To give you just one idea
of how this can result


892
00:38:40,036 --> 00:38:41,996
in a really interesting game,


893
00:38:42,326 --> 00:38:46,086
I want to show you a quick
video here of a new game


894
00:38:46,086 --> 00:38:48,216
that WoGa is developing
called Fish Time


895
00:38:49,286 --> 00:38:51,666
that lets us go fishing at
short intervals on our watch.


896
00:38:52,186 --> 00:38:55,116
So with just a swipe,
I can go cast my line,


897
00:38:55,116 --> 00:38:57,646
and I can use the digital
crown to drop my lure


898
00:38:57,646 --> 00:38:59,336
down to just the right
depth where I want.


899
00:38:59,336 --> 00:39:03,146
Now, I could leave it there for
a while and wait, or I can tap


900
00:39:03,146 --> 00:39:04,066
to go fishing right now.


901
00:39:04,736 --> 00:39:05,526
Looks like I got a bite.


902
00:39:06,146 --> 00:39:08,226
Now you can use the crown
again to reel it in,


903
00:39:08,606 --> 00:39:10,886
but now I actually--
I didn't catch it.


904
00:39:11,266 --> 00:39:13,126
That'll probably make the
fish a little happier,


905
00:39:13,456 --> 00:39:16,376
although our fisherman might
not be so happy about it.


906
00:39:17,586 --> 00:39:21,636
So really cool how you can add
some really interesting graphics


907
00:39:21,636 --> 00:39:24,996
and get some great animations
using SpriteKit on Apple Watch.


908
00:39:25,336 --> 00:39:27,296
Really, really looking
forward to see what kinds


909
00:39:27,296 --> 00:39:28,986
of things you guys do with this.


910
00:39:30,566 --> 00:39:32,536
So next up, I want
to mention CloudKit.


911
00:39:33,906 --> 00:39:35,856
We've brought CloudKit
to the watchOS SDK,


912
00:39:36,106 --> 00:39:39,346
including the new CK Share
APIs, which make it really easy


913
00:39:40,236 --> 00:39:42,466
to share data between
different users.


914
00:39:42,836 --> 00:39:46,246
Again, because it's built on an
NSURLSession, it's really easy


915
00:39:46,246 --> 00:39:48,326
for it to work, even when
your phone isn't present.


916
00:39:48,326 --> 00:39:51,316
There's a whole session on
CloudKit with What's New


917
00:39:51,316 --> 00:39:55,096
in CloudKit that I definitely
encourage you to check out.


918
00:39:56,576 --> 00:39:58,016
And finally, we've
got Apple Pay.


919
00:39:58,106 --> 00:40:00,956
Apple Watch is a great way
to pay for physical goods


920
00:40:00,956 --> 00:40:03,906
in stores, and of course with
Apple Pay on Apple Watch,


921
00:40:04,086 --> 00:40:07,136
you can now offer physical goods
for purchase within your apps


922
00:40:07,406 --> 00:40:09,016
with just a double tap
of the side button.


923
00:40:09,016 --> 00:40:12,186
Now, there's many different
ways that you might go


924
00:40:12,186 --> 00:40:15,846
about using this, but for
example, you might choose


925
00:40:16,206 --> 00:40:19,636
to offer for purchase the most
common item that I buy every day


926
00:40:19,636 --> 00:40:22,626
for lunch, so that I can
make that order really easily


927
00:40:22,626 --> 00:40:24,706
at lunchtime every day,
right from my watch.


928
00:40:25,226 --> 00:40:27,106
There's a lot of ways that
you can offer physical goods


929
00:40:27,106 --> 00:40:28,926
for sale within your
watch using Apple Pay.


930
00:40:29,526 --> 00:40:32,576
So that's just some of the APIs


931
00:40:32,966 --> 00:40:35,166
that are a part of
the watchOS 3 SDK.


932
00:40:35,166 --> 00:40:36,936
There's a bunch of
new s tuff in there.


933
00:40:36,936 --> 00:40:38,876
Definitely go check it all out.


934
00:40:39,716 --> 00:40:41,966
I'd like to end by talking
about discoverability


935
00:40:41,966 --> 00:40:43,956
and configuration,
because, again,


936
00:40:44,016 --> 00:40:46,016
building a great watch app
is just the first step.


937
00:40:46,366 --> 00:40:48,946
You also want to make sure
that it's really easy for users


938
00:40:48,946 --> 00:40:50,736
to discover it and
get it installed.


939
00:40:51,546 --> 00:40:54,226
So the first enhancement
for this comes


940
00:40:54,226 --> 00:40:57,006
in the iOS 10 Apple Watch app.


941
00:40:57,736 --> 00:41:00,556
There's a brand new watch face
gallery, which displays all


942
00:41:00,556 --> 00:41:02,926
of the watch faces that
users can add on their watch.


943
00:41:03,546 --> 00:41:05,716
And even better, right
at the top of the screen,


944
00:41:05,716 --> 00:41:08,546
it includes an entire
section dedicated just to all


945
00:41:08,546 --> 00:41:11,546
of your apps, and getting
in here is really easy


946
00:41:11,546 --> 00:41:13,136
and requires just
a couple of steps.


947
00:41:14,046 --> 00:41:17,476
So first off, you have to
adopt a new ClockKit API.


948
00:41:18,776 --> 00:41:20,866
You already had an
API in watchOS 2


949
00:41:20,866 --> 00:41:23,016
for specifying a template
complication view.


950
00:41:24,406 --> 00:41:26,546
This API has been in
enhanced in watchOS 3


951
00:41:26,926 --> 00:41:30,856
to not just return a string
for your complication data,


952
00:41:31,166 --> 00:41:33,186
but actually the
localization key


953
00:41:33,436 --> 00:41:35,726
to get localized strings
for all languages.


954
00:41:36,426 --> 00:41:38,396
This is important,
because the second step is


955
00:41:38,396 --> 00:41:40,296
to build a complication bundle.


956
00:41:40,796 --> 00:41:43,126
You use the-- you do
this using the simulator.


957
00:41:43,756 --> 00:41:46,246
You run your app, and build
a complication bundle,


958
00:41:46,246 --> 00:41:48,186
and this creates a
static representation


959
00:41:48,356 --> 00:41:49,626
of your complication template


960
00:41:49,626 --> 00:41:52,706
that you can then include
in your iPhone app.


961
00:41:52,966 --> 00:41:54,896
It's really easy to
do, and by doing it,


962
00:41:54,946 --> 00:41:58,866
it gets you into this gallery
section so that you can show up.


963
00:41:59,976 --> 00:42:01,436
We need the static
representation,


964
00:42:01,436 --> 00:42:03,856
because that way we can display
your complication in line


965
00:42:03,856 --> 00:42:06,066
in a watch face here,
even if your app isn't


966
00:42:06,066 --> 00:42:07,496
yet installed on the watch.


967
00:42:08,446 --> 00:42:11,396
So just a couple of steps,
and the payoff is really big.


968
00:42:11,396 --> 00:42:13,336
You'll be right here
in the gallery.


969
00:42:14,016 --> 00:42:16,506
The gallery is the first thing
that new watch owners see


970
00:42:16,506 --> 00:42:19,496
after they've paired, so
it's definitely a place


971
00:42:19,496 --> 00:42:21,376
that you'll want to be.


972
00:42:21,726 --> 00:42:24,286
In addition to the gallery,
we've also made it a lot easier


973
00:42:24,286 --> 00:42:26,876
to customize watch faces
and get your apps onto them.


974
00:42:27,326 --> 00:42:29,476
It was always possible to
configure your watch faces


975
00:42:29,476 --> 00:42:33,056
on the Apple Watch, and in
iOS 10, the Apple Watch app


976
00:42:33,056 --> 00:42:36,396
on iPhone now includes an entire
face configuration UI as well.


977
00:42:36,786 --> 00:42:38,906
Obviously, they're kept in
sync, so any changes you make


978
00:42:38,906 --> 00:42:42,706
in one will be reflected in the
other, and it's not really easy


979
00:42:42,706 --> 00:42:45,226
on your phone to select all
the complications that you'd


980
00:42:45,226 --> 00:42:48,116
like on all your watch
faces on Apple Watch.


981
00:42:48,626 --> 00:42:50,216
And with quick watch
face switching,


982
00:42:50,506 --> 00:42:53,816
there's now even more reason
to have a complication,


983
00:42:54,096 --> 00:42:56,486
because more users will
have more watch faces,


984
00:42:56,816 --> 00:42:58,426
and your apps can
be right on them.


985
00:42:59,026 --> 00:43:02,736
So then the last part of
configuration is the dock,


986
00:43:03,176 --> 00:43:05,616
and obviously, you
can configure the dock


987
00:43:05,616 --> 00:43:07,116
in the Apple Watch
app on your iPhone.


988
00:43:07,396 --> 00:43:10,146
It's really easy to add and
remove apps from the dock,


989
00:43:10,146 --> 00:43:11,176
and reorder them right there.


990
00:43:11,866 --> 00:43:14,546
But even more importantly, you
can do it on the watch itself.


991
00:43:14,616 --> 00:43:16,596
And there's one feature
in particular


992
00:43:16,596 --> 00:43:18,596
that makes it really
easy to find


993
00:43:18,596 --> 00:43:20,206
that you can add
apps into the dock.


994
00:43:20,856 --> 00:43:24,086
The last app that you used is
always displayed in the dock,


995
00:43:24,086 --> 00:43:25,836
even if you hadn't
chosen to put it there.


996
00:43:26,286 --> 00:43:29,426
So if a user installs your
app and doesn't even yet know


997
00:43:29,426 --> 00:43:30,786
that they can add
things to the dock,


998
00:43:31,156 --> 00:43:33,396
they go to the home screen, they
find the icon and launch it.


999
00:43:33,736 --> 00:43:35,696
The next time they go to the
dock, they'll see your app


1000
00:43:35,696 --> 00:43:38,536
in there with a big button
under it that says Keep In Dock,


1001
00:43:38,946 --> 00:43:40,416
which, with one tab, will add it


1002
00:43:40,416 --> 00:43:41,956
to their permanent list
of apps in the dock.


1003
00:43:42,706 --> 00:43:45,216
So it's really easy to discover
that you can add them there,


1004
00:43:45,376 --> 00:43:47,626
and also easy to add them
there from the watch itself.


1005
00:43:48,086 --> 00:43:53,426
So again, you're going to hear
a lot about building glanceable,


1006
00:43:53,716 --> 00:43:55,596
actionable, and responsive apps,


1007
00:43:56,216 --> 00:43:58,256
and I really do encourage
you to keep that in mind.


1008
00:43:58,706 --> 00:44:00,736
There's a great design
session that Michael gave


1009
00:44:00,806 --> 00:44:04,936
that you can go check out for
Designing Great Apple Watch


1010
00:44:04,936 --> 00:44:06,946
Experiences, where
he'll talk even more


1011
00:44:06,946 --> 00:44:09,176
about all these things, so
definitely check that out.


1012
00:44:09,686 --> 00:44:13,316
And the responsive part
of this is so important


1013
00:44:13,496 --> 00:44:15,976
that there are really two
sessions focused just on this,


1014
00:44:16,156 --> 00:44:18,386
with Architecting for
Performance on watchOS 3,


1015
00:44:18,796 --> 00:44:20,186
and Keeping Your
Watch App Up to Date.


1016
00:44:20,766 --> 00:44:22,266
These are two that you'll
definitely want to check


1017
00:44:22,266 --> 00:44:24,816
out to get all the benefits
of Background App Refresh


1018
00:44:25,086 --> 00:44:26,816
and making sure that
your apps are up to date


1019
00:44:26,816 --> 00:44:28,466
and responsive for watchOS 3.


1020
00:44:28,806 --> 00:44:30,256
And there's a whole bunch


1021
00:44:30,256 --> 00:44:32,666
of other sessions throughout
the week that have a lot


1022
00:44:32,666 --> 00:44:35,696
of information, many focused on
Apple Watch, and a whole bunch


1023
00:44:35,696 --> 00:44:37,576
that just include Apple
Watch information.


1024
00:44:38,076 --> 00:44:40,226
Thanks so much for coming
and joining, and I can't wait


1025
00:44:40,226 --> 00:44:41,676
to see what you do
with Apple Watch.


1026
00:44:42,196 --> 00:44:42,976
Enjoy the rest of the week.


1027
00:44:43,516 --> 00:44:46,500
[ Applause ]

