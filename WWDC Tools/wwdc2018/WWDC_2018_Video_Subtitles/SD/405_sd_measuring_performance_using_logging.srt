1
00:00:06,516 --> 00:00:16,500
[ Music ]


2
00:00:22,516 --> 00:00:30,756
[ Applause ]


3
00:00:31,256 --> 00:00:33,646
>> Good afternoon.


4
00:00:34,516 --> 00:00:35,556
My name is Shane.


5
00:00:35,956 --> 00:00:37,156
I'm with the Darwin Runtime


6
00:00:37,156 --> 00:00:37,476
team.


7
00:00:37,756 --> 00:00:39,146
And I'd like to welcome you to


8
00:00:39,146 --> 00:00:40,856
measuring performance using


9
00:00:40,856 --> 00:00:41,226
logging.


10
00:00:42,616 --> 00:00:44,676
So we heard a lot about


11
00:00:44,766 --> 00:00:46,086
performance on Monday.


12
00:00:46,706 --> 00:00:47,696
Performance is one of those


13
00:00:47,696 --> 00:00:49,526
things that's key to a great


14
00:00:49,526 --> 00:00:50,516
user experience.


15
00:00:50,936 --> 00:00:52,816
People love it when their games


16
00:00:52,906 --> 00:00:54,176
and their apps are fast,


17
00:00:54,936 --> 00:00:56,126
dynamic, and responsive.


18
00:00:57,416 --> 00:01:02,066
But software is complex so that


19
00:01:02,066 --> 00:01:04,036
means that when your app is


20
00:01:04,036 --> 00:01:04,916
trying to do something,


21
00:01:05,036 --> 00:01:06,596
sometimes a ton of things can be


22
00:01:06,596 --> 00:01:09,876
going on and that means you can


23
00:01:09,876 --> 00:01:11,486
find some performance wins in


24
00:01:11,486 --> 00:01:12,746
some pretty unlikely places.


25
00:01:13,716 --> 00:01:16,106
But doing so, unearthing those


26
00:01:16,106 --> 00:01:18,066
of performance wins requires an


27
00:01:18,136 --> 00:01:20,076
understanding, sometimes a deep


28
00:01:20,076 --> 00:01:21,616
understanding of what it is your


29
00:01:21,616 --> 00:01:22,416
program is doing.


30
00:01:23,046 --> 00:01:24,746
It requires you to know when


31
00:01:24,746 --> 00:01:26,376
your code is executing exactly,


32
00:01:26,506 --> 00:01:28,126
how long a particular operation


33
00:01:28,126 --> 00:01:28,696
is taking.


34
00:01:29,546 --> 00:01:31,256
So this is one place where a


35
00:01:31,406 --> 00:01:33,226
good tool can make a real


36
00:01:33,376 --> 00:01:33,706
difference.


37
00:01:34,536 --> 00:01:36,146
And we know that building better


38
00:01:36,146 --> 00:01:37,816
tools, making them available to


39
00:01:37,816 --> 00:01:39,936
you, is one of the ways that we


40
00:01:39,936 --> 00:01:41,136
can help you be a more


41
00:01:41,136 --> 00:01:42,116
productive developer.


42
00:01:42,776 --> 00:01:44,416
So today I'm going to talk about


43
00:01:44,416 --> 00:01:45,236
one of those tools.


44
00:01:45,636 --> 00:01:47,076
Today, I'm going to talk about


45
00:01:47,406 --> 00:01:48,226
signposts.


46
00:01:48,796 --> 00:01:50,796
Signposts are a new member of


47
00:01:50,796 --> 00:01:51,756
the OSLog family.


48
00:01:52,696 --> 00:01:54,636
And we're making them available


49
00:01:54,636 --> 00:01:56,296
to you in macOS.


50
00:01:56,436 --> 00:01:57,436
We're making them available to


51
00:01:57,436 --> 00:01:58,206
you in iOs.


52
00:01:58,296 --> 00:01:59,866
And you can use them in Swift


53
00:02:00,196 --> 00:02:02,596
and in C, but the coolest thing


54
00:02:02,736 --> 00:02:04,236
is we've integrated them with


55
00:02:04,426 --> 00:02:04,936
Instruments.


56
00:02:05,466 --> 00:02:06,606
So that means Instruments can


57
00:02:06,606 --> 00:02:07,766
take the data that signposts


58
00:02:07,766 --> 00:02:09,936
produce and give you a deep


59
00:02:09,936 --> 00:02:11,356
understanding of what it is your


60
00:02:11,356 --> 00:02:12,136
program is doing.


61
00:02:13,496 --> 00:02:15,476
So first a little history.


62
00:02:16,556 --> 00:02:18,396
We introduced OSLog a couple of


63
00:02:18,396 --> 00:02:18,926
years ago.


64
00:02:19,696 --> 00:02:21,826
It's our modern take on a


65
00:02:21,826 --> 00:02:22,746
logging facility.


66
00:02:23,006 --> 00:02:23,986
It's our way of getting


67
00:02:24,186 --> 00:02:25,596
debugging information out of the


68
00:02:25,596 --> 00:02:26,076
system.


69
00:02:26,456 --> 00:02:29,186
And it was built with our goals


70
00:02:29,356 --> 00:02:31,316
of efficiency and privacy in


71
00:02:31,316 --> 00:02:31,586
mind.


72
00:02:32,696 --> 00:02:34,146
Here you can see an example of


73
00:02:34,146 --> 00:02:35,796
OSLog code where I've just


74
00:02:35,796 --> 00:02:37,256
created a simple log handle and


75
00:02:37,256 --> 00:02:39,566
posted a hello world to it.


76
00:02:40,326 --> 00:02:43,016
Signposts extend the OSLog API,


77
00:02:43,796 --> 00:02:44,536
but they do it for the


78
00:02:44,536 --> 00:02:45,576
performance use case.


79
00:02:45,816 --> 00:02:46,486
And that means they are


80
00:02:46,486 --> 00:02:48,156
conveying performance related


81
00:02:48,156 --> 00:02:49,676
information, and they're


82
00:02:49,756 --> 00:02:51,026
integrated with our developer


83
00:02:51,026 --> 00:02:52,846
tools and that means you can


84
00:02:52,936 --> 00:02:53,876
annotate your code with


85
00:02:53,876 --> 00:02:55,486
signposts and then pull up


86
00:02:55,486 --> 00:02:56,546
Instruments and see something


87
00:02:56,546 --> 00:02:57,176
like this.


88
00:02:58,526 --> 00:02:59,866
So Instruments is showing you


89
00:03:00,406 --> 00:03:02,266
this beautiful visualization of


90
00:03:02,266 --> 00:03:03,736
a timeline of what your program


91
00:03:03,736 --> 00:03:04,906
is doing and the signpost


92
00:03:04,906 --> 00:03:05,596
activity there.


93
00:03:06,046 --> 00:03:07,186
And then on the bottom there's


94
00:03:07,186 --> 00:03:09,486
that table with statistical


95
00:03:09,546 --> 00:03:11,316
aggregation and analysis of the


96
00:03:11,316 --> 00:03:13,216
signpost data, slicing and


97
00:03:13,216 --> 00:03:15,056
dicing to see what your


98
00:03:15,056 --> 00:03:16,706
program's behavior is really


99
00:03:16,876 --> 00:03:17,126
like.


100
00:03:18,506 --> 00:03:20,476
In this session, I'll talk about


101
00:03:20,706 --> 00:03:21,986
adopting signposts into your


102
00:03:21,986 --> 00:03:23,366
code and show you some of what


103
00:03:23,366 --> 00:03:24,086
they're capable of.


104
00:03:24,536 --> 00:03:25,226
And then we're going to


105
00:03:25,226 --> 00:03:26,836
demonstrate the new Instrument


106
00:03:26,836 --> 00:03:29,436
signpost visualization to give


107
00:03:29,436 --> 00:03:31,296
you an idea how signposts and


108
00:03:31,296 --> 00:03:33,976
Instruments work together.


109
00:03:34,096 --> 00:03:34,736
So let's start.


110
00:03:35,556 --> 00:03:37,856
I'm going to start with a really


111
00:03:37,996 --> 00:03:38,946
basic example.


112
00:03:39,766 --> 00:03:42,466
Imagine that this is your app.


113
00:03:43,116 --> 00:03:44,586
And what you're trying to


114
00:03:44,586 --> 00:03:46,836
investigate is the amount of


115
00:03:46,896 --> 00:03:48,116
time a particular part of the


116
00:03:48,116 --> 00:03:49,456
interface takes to refresh.


117
00:03:49,966 --> 00:03:51,856
And you know to do that you want


118
00:03:51,856 --> 00:03:53,566
to load some images and put them


119
00:03:53,566 --> 00:03:54,176
on the screen.


120
00:03:54,696 --> 00:03:57,576
So once again, an abstract,


121
00:03:57,576 --> 00:03:59,086
simple view of this app might be


122
00:03:59,086 --> 00:04:00,626
that you're doing the work to


123
00:04:00,626 --> 00:04:01,346
grab an asset.


124
00:04:01,486 --> 00:04:02,456
And after you've gotten them


125
00:04:02,456 --> 00:04:04,296
all, the interface is refreshed.


126
00:04:05,436 --> 00:04:07,116
What a signpost allows us to do


127
00:04:07,176 --> 00:04:09,466
is to mark the beginning and the


128
00:04:09,466 --> 00:04:11,196
end of a piece of work and then


129
00:04:11,196 --> 00:04:12,586
associate those two points in


130
00:04:12,586 --> 00:04:14,046
time, those two log events with


131
00:04:14,046 --> 00:04:14,476
each other.


132
00:04:15,326 --> 00:04:18,086
And they do it with an os


133
00:04:18,086 --> 00:04:19,106
signpost function call.


134
00:04:19,305 --> 00:04:20,516
There are two calls.


135
00:04:20,616 --> 00:04:22,806
One with .begin and one with


136
00:04:23,016 --> 00:04:23,296
.end.


137
00:04:23,726 --> 00:04:25,776
Here I've represented the begin


138
00:04:25,776 --> 00:04:26,976
with that arrow with the b


139
00:04:26,976 --> 00:04:27,526
underneath it.


140
00:04:27,926 --> 00:04:29,446
And I represented the end with


141
00:04:29,446 --> 00:04:31,626
the arrow with the e under it.


142
00:04:31,626 --> 00:04:32,936
And then we're going to relate


143
00:04:32,936 --> 00:04:34,126
those two points to each other


144
00:04:34,126 --> 00:04:36,296
to give you a sense of what the


145
00:04:36,366 --> 00:04:37,486
elapsed time is for that


146
00:04:37,486 --> 00:04:37,736
interval.


147
00:04:37,736 --> 00:04:39,276
All right.


148
00:04:40,126 --> 00:04:42,246
In code, there's this simple


149
00:04:42,246 --> 00:04:44,076
implementation of that algorithm


150
00:04:44,556 --> 00:04:45,886
where for each element in our


151
00:04:45,886 --> 00:04:47,236
interface, we're going to fetch


152
00:04:47,236 --> 00:04:49,296
that asset and that's the piece


153
00:04:49,296 --> 00:04:50,496
of operation that we're


154
00:04:50,646 --> 00:04:51,506
interested in measuring.


155
00:04:52,426 --> 00:04:53,786
So to incorporate signpost into


156
00:04:53,786 --> 00:04:55,716
this code base, we're going to


157
00:04:55,716 --> 00:04:57,396
simply import the module


158
00:04:57,596 --> 00:04:58,986
os.signpost that contains that


159
00:04:58,986 --> 00:04:59,636
functionality.


160
00:05:00,506 --> 00:05:02,496
And then because signposts are


161
00:05:02,496 --> 00:05:04,146
part of the OSLog functionality,


162
00:05:04,586 --> 00:05:05,946
we're going to create a log


163
00:05:05,946 --> 00:05:06,276
handle.


164
00:05:06,796 --> 00:05:08,406
Here, this log handle takes two


165
00:05:08,406 --> 00:05:09,746
arguments, a subsystem and a


166
00:05:09,746 --> 00:05:10,296
category.


167
00:05:11,216 --> 00:05:13,896
The subsystem is just probably


168
00:05:13,896 --> 00:05:14,566
the same throughout your


169
00:05:14,566 --> 00:05:15,096
project.


170
00:05:15,516 --> 00:05:16,596
It looks a lot like your bundle


171
00:05:16,596 --> 00:05:16,676
ID.


172
00:05:16,676 --> 00:05:18,666
And it represents the component


173
00:05:18,666 --> 00:05:19,996
or the piece of software, maybe


174
00:05:19,996 --> 00:05:20,776
the framework that you're


175
00:05:20,776 --> 00:05:21,246
working on.


176
00:05:22,816 --> 00:05:24,726
The category is used to relate


177
00:05:25,346 --> 00:05:27,266
-- to group related operations


178
00:05:27,266 --> 00:05:28,586
together or related signposts.


179
00:05:29,136 --> 00:05:30,236
And you'll see why that could be


180
00:05:30,236 --> 00:05:33,096
useful later in the session.


181
00:05:33,256 --> 00:05:34,596
Once we have that log handle,


182
00:05:35,416 --> 00:05:36,316
we're just going to make two


183
00:05:36,316 --> 00:05:37,516
calls to os signpost.


184
00:05:37,826 --> 00:05:38,536
One with .begin.


185
00:05:38,536 --> 00:05:39,036
One with .end.


186
00:05:39,036 --> 00:05:41,486
We're going to pass that log


187
00:05:41,486 --> 00:05:42,876
handle into those calls.


188
00:05:42,876 --> 00:05:44,566
And then for the third argument,


189
00:05:44,956 --> 00:05:46,686
we have a signpost name.


190
00:05:47,826 --> 00:05:49,396
The signpost name is a string


191
00:05:49,396 --> 00:05:51,156
literal that identifies the


192
00:05:51,186 --> 00:05:52,996
interval that identifies the


193
00:05:53,056 --> 00:05:54,246
operation that we're interested


194
00:05:54,246 --> 00:05:54,676
in measuring.


195
00:05:55,696 --> 00:05:57,326
That string literal is used to


196
00:05:57,326 --> 00:05:59,346
match up the begin point that


197
00:05:59,346 --> 00:06:00,806
we've annotated or that gets


198
00:06:00,806 --> 00:06:02,756
marked up with that os signpost


199
00:06:02,966 --> 00:06:04,606
begin called and the end point.


200
00:06:05,026 --> 00:06:07,416
So on our timeline, it just


201
00:06:07,416 --> 00:06:08,086
looks like this.


202
00:06:08,086 --> 00:06:09,676
At the beginning of each piece


203
00:06:09,676 --> 00:06:11,696
of work, we've dropped an os


204
00:06:11,696 --> 00:06:12,246
signpost.


205
00:06:12,366 --> 00:06:13,336
At the end of each piece of


206
00:06:13,336 --> 00:06:14,306
work, we've dropped an os


207
00:06:14,306 --> 00:06:14,776
signpost.


208
00:06:15,086 --> 00:06:16,646
And because those string


209
00:06:16,646 --> 00:06:17,756
literals at the begin and end


210
00:06:17,756 --> 00:06:19,286
call sites line up with each


211
00:06:19,286 --> 00:06:20,526
other, we can match those two


212
00:06:20,526 --> 00:06:20,856
together.


213
00:06:20,856 --> 00:06:23,266
But what if we're interested in


214
00:06:23,266 --> 00:06:25,346
also measuring the entire amount


215
00:06:25,346 --> 00:06:26,836
of time the whole operation,


216
00:06:26,836 --> 00:06:27,866
that whole refresh took?


217
00:06:28,526 --> 00:06:31,236
Well, in our code, we're just


218
00:06:31,236 --> 00:06:32,966
going to add another pair of os


219
00:06:32,966 --> 00:06:34,646
signpost begin and end calls.


220
00:06:34,836 --> 00:06:35,346
Pretty simple.


221
00:06:35,836 --> 00:06:37,196
And this time I've given it a


222
00:06:37,306 --> 00:06:38,446
different string literal, so a


223
00:06:38,556 --> 00:06:39,756
different signpost name.


224
00:06:39,836 --> 00:06:41,616
This time refresh panel to


225
00:06:41,616 --> 00:06:43,206
indicate that this is a separate


226
00:06:43,206 --> 00:06:44,486
interval, separate from the one


227
00:06:44,486 --> 00:06:45,166
inside the loop.


228
00:06:47,236 --> 00:06:50,536
In our timeline, we're just


229
00:06:50,536 --> 00:06:51,846
marking two additional


230
00:06:51,846 --> 00:06:52,656
signposts.


231
00:06:54,166 --> 00:06:55,606
And that matching string literal


232
00:06:55,606 --> 00:06:57,296
of refresh panel will let the


233
00:06:57,296 --> 00:06:58,426
system know that those two


234
00:06:58,426 --> 00:07:01,156
points are associated with each


235
00:07:01,156 --> 00:07:01,326
other.


236
00:07:02,846 --> 00:07:03,136
All right.


237
00:07:03,926 --> 00:07:05,796
It's not a super simple example.


238
00:07:06,226 --> 00:07:07,876
If your program ever does step


239
00:07:07,906 --> 00:07:09,736
one and then step two then step


240
00:07:09,736 --> 00:07:11,046
three in a sequential fashion


241
00:07:11,166 --> 00:07:11,816
then that would work.


242
00:07:12,256 --> 00:07:14,706
But in our systems, often we


243
00:07:14,706 --> 00:07:16,026
have a lot of work that happens


244
00:07:16,026 --> 00:07:16,686
asynchronously.


245
00:07:17,146 --> 00:07:17,386
Right.


246
00:07:17,796 --> 00:07:19,816
So instead of having step one,


247
00:07:19,816 --> 00:07:21,066
step two, step three, we're


248
00:07:21,066 --> 00:07:23,136
often kicking things off in


249
00:07:23,136 --> 00:07:24,796
sequence, right, and then


250
00:07:24,796 --> 00:07:25,956
letting them complete later.


251
00:07:26,296 --> 00:07:27,106
So that means that these


252
00:07:27,736 --> 00:07:28,766
operations can happen


253
00:07:28,766 --> 00:07:29,346
concurrently.


254
00:07:29,346 --> 00:07:30,086
They can overlap.


255
00:07:31,226 --> 00:07:32,786
In that case, we need to give


256
00:07:32,786 --> 00:07:34,046
some additional piece of


257
00:07:34,046 --> 00:07:35,636
information to the system in


258
00:07:35,636 --> 00:07:36,836
order for it to tell those


259
00:07:36,836 --> 00:07:38,126
signposts apart from each other.


260
00:07:39,156 --> 00:07:42,096
And to do that, so far we've


261
00:07:42,096 --> 00:07:43,366
only used that name.


262
00:07:43,716 --> 00:07:43,886
Right.


263
00:07:43,886 --> 00:07:45,726
That name will match up the end


264
00:07:45,726 --> 00:07:46,566
and the beginning point.


265
00:07:47,276 --> 00:07:48,436
So that string literal so far


266
00:07:48,436 --> 00:07:50,026
has identified intervals, but it


267
00:07:50,026 --> 00:07:51,236
hasn't given us a way to


268
00:07:51,236 --> 00:07:53,036
discriminate between overlapping


269
00:07:53,036 --> 00:07:53,436
intervals.


270
00:07:54,236 --> 00:07:55,346
To do that, we're going to add


271
00:07:55,346 --> 00:07:56,606
another piece of data to our


272
00:07:56,606 --> 00:07:58,516
signpost calls called a signpost


273
00:07:58,516 --> 00:07:58,816
ID.


274
00:08:00,256 --> 00:08:02,196
The signpost ID will tell the


275
00:08:02,196 --> 00:08:04,076
system that these are the same


276
00:08:04,076 --> 00:08:06,516
kind of operation but each one


277
00:08:06,546 --> 00:08:07,586
is different from each other.


278
00:08:08,366 --> 00:08:11,276
So if two operations overlap but


279
00:08:11,276 --> 00:08:12,376
they have different signpost


280
00:08:12,376 --> 00:08:13,446
IDs, the system will know that


281
00:08:13,486 --> 00:08:14,686
they're two different intervals.


282
00:08:15,096 --> 00:08:16,516
As long as you pass the same


283
00:08:16,516 --> 00:08:18,046
signpost ID at the begin call


284
00:08:18,046 --> 00:08:19,196
site and the end call site,


285
00:08:19,626 --> 00:08:21,096
those two signposts will be


286
00:08:21,316 --> 00:08:22,546
associated with each other.


287
00:08:23,596 --> 00:08:25,936
You can make signpost IDs with


288
00:08:25,936 --> 00:08:27,196
this constructor here that takes


289
00:08:27,196 --> 00:08:29,666
a log handle, but you can also


290
00:08:29,666 --> 00:08:31,736
make them with an object.


291
00:08:32,606 --> 00:08:33,765
This could be useful if you have


292
00:08:33,765 --> 00:08:35,226
some object that represents the


293
00:08:35,226 --> 00:08:36,426
work that you're trying to do


294
00:08:36,895 --> 00:08:38,515
and the same signpost ID will be


295
00:08:38,515 --> 00:08:39,736
generated as long as you use the


296
00:08:39,736 --> 00:08:41,456
same instance of that object.


297
00:08:41,826 --> 00:08:42,756
So this means you don't have to


298
00:08:42,806 --> 00:08:44,386
carry or store the signpost ID


299
00:08:44,386 --> 00:08:44,876
around.


300
00:08:44,876 --> 00:08:46,316
You can just use the object


301
00:08:46,316 --> 00:08:46,756
that's handy.


302
00:08:48,966 --> 00:08:51,646
Visually, you can think of


303
00:08:51,646 --> 00:08:53,616
signpost IDs as allowing us to


304
00:08:53,616 --> 00:08:55,086
pass a little bit of extra


305
00:08:55,086 --> 00:08:56,926
context to each signpost call


306
00:08:57,926 --> 00:09:00,576
which can relate the begin and


307
00:09:00,576 --> 00:09:01,776
end markers for a particular


308
00:09:01,776 --> 00:09:03,036
operation with each other.


309
00:09:03,716 --> 00:09:04,916
And this is important because


310
00:09:04,916 --> 00:09:06,336
not only can these operations


311
00:09:06,336 --> 00:09:08,116
overlap, but they often take


312
00:09:08,186 --> 00:09:11,896
differing amounts of time.


313
00:09:12,116 --> 00:09:14,236
Let's see this in our code


314
00:09:14,236 --> 00:09:14,666
example.


315
00:09:15,716 --> 00:09:16,466
So here's our code.


316
00:09:16,466 --> 00:09:18,026
I'm going to transform that


317
00:09:18,026 --> 00:09:20,066
synchronous fetch async call in


318
00:09:20,066 --> 00:09:21,036
to an asynchronous one.


319
00:09:21,946 --> 00:09:23,266
So here I'm just going to give


320
00:09:23,396 --> 00:09:24,436
it a completion handler.


321
00:09:24,436 --> 00:09:25,756
This is a closure that will run


322
00:09:25,846 --> 00:09:26,846
after the fetch asset is


323
00:09:26,846 --> 00:09:27,236
complete.


324
00:09:28,446 --> 00:09:29,486
And then I've also added a


325
00:09:29,486 --> 00:09:30,946
closure, a completion handler


326
00:09:31,346 --> 00:09:33,236
for running after all the assets


327
00:09:33,416 --> 00:09:34,076
have been fetched.


328
00:09:35,006 --> 00:09:36,676
In each case, I've moved that os


329
00:09:36,676 --> 00:09:38,266
signpost end call inside of a


330
00:09:38,306 --> 00:09:40,426
closure to indicate that that's


331
00:09:40,426 --> 00:09:42,256
when I want that marked period


332
00:09:42,256 --> 00:09:42,916
of time to end.


333
00:09:44,266 --> 00:09:44,526
Okay.


334
00:09:45,796 --> 00:09:47,426
So because we think that these


335
00:09:48,296 --> 00:09:49,616
intervals will overlap with each


336
00:09:49,616 --> 00:09:51,046
other, we're going to create new


337
00:09:51,076 --> 00:09:52,456
signpost IDs for each of them.


338
00:09:52,876 --> 00:09:54,416
Notice in the top example I've


339
00:09:54,606 --> 00:09:55,756
created one with the constructor


340
00:09:55,756 --> 00:09:56,576
taking a log handle.


341
00:09:56,686 --> 00:09:58,106
And the second one, I've made


342
00:09:58,106 --> 00:09:59,776
off that object that is being


343
00:09:59,776 --> 00:10:00,666
worked on, the element.


344
00:10:01,116 --> 00:10:03,436
And then I simply pass those


345
00:10:03,436 --> 00:10:06,226
signpost IDs into the call sites


346
00:10:06,676 --> 00:10:07,126
and we're done.


347
00:10:07,876 --> 00:10:10,706
You can think of signpost as


348
00:10:10,706 --> 00:10:12,146
being organized as a kind of


349
00:10:12,146 --> 00:10:13,846
classification or hierarchy.


350
00:10:14,336 --> 00:10:14,566
Right.


351
00:10:15,066 --> 00:10:16,616
All these operations are related


352
00:10:16,616 --> 00:10:17,936
together by the log handle


353
00:10:18,036 --> 00:10:19,396
meaning that log category.


354
00:10:20,106 --> 00:10:21,456
And then for each operation that


355
00:10:21,456 --> 00:10:22,706
we're interested in, we've given


356
00:10:22,706 --> 00:10:23,616
it a signpost name.


357
00:10:25,096 --> 00:10:26,786
Then because those signposts


358
00:10:26,986 --> 00:10:28,256
could overlap with each other,


359
00:10:28,256 --> 00:10:29,626
we've given them that signpost


360
00:10:29,626 --> 00:10:32,016
ID that tells the system that


361
00:10:32,016 --> 00:10:34,656
that's a specific instance of


362
00:10:34,656 --> 00:10:35,136
that interval.


363
00:10:36,596 --> 00:10:39,396
This interface was built


364
00:10:39,666 --> 00:10:42,836
specifically to be flexible so


365
00:10:42,836 --> 00:10:44,196
you control all the arguments


366
00:10:44,196 --> 00:10:45,996
into your begin site and your


367
00:10:45,996 --> 00:10:46,416
end site.


368
00:10:46,416 --> 00:10:47,956
You control that signpost name,


369
00:10:47,956 --> 00:10:49,466
the log handle you give it, and


370
00:10:50,616 --> 00:10:51,036
the ID.


371
00:10:51,036 --> 00:10:52,276
We've done this because as long


372
00:10:52,276 --> 00:10:53,966
as you can give the same


373
00:10:54,126 --> 00:10:55,656
arguments at the begin site and


374
00:10:55,656 --> 00:10:57,406
the end site, those two


375
00:10:57,406 --> 00:10:58,756
signposts will get matched with


376
00:10:58,756 --> 00:10:59,126
each other.


377
00:10:59,526 --> 00:11:00,576
That means your begin and end


378
00:11:00,576 --> 00:11:01,586
sites can be in separate


379
00:11:01,586 --> 00:11:02,096
functions.


380
00:11:02,736 --> 00:11:03,816
They can be associated with


381
00:11:03,816 --> 00:11:04,776
separate objects.


382
00:11:04,816 --> 00:11:05,946
They may even live in separate


383
00:11:05,946 --> 00:11:06,646
source files.


384
00:11:07,356 --> 00:11:08,746
We've done this because we want


385
00:11:08,746 --> 00:11:09,986
you to be able to adopt it into


386
00:11:09,986 --> 00:11:10,556
your code base.


387
00:11:10,856 --> 00:11:12,366
And so whatever entry and exit


388
00:11:12,366 --> 00:11:14,576
conventions you have, you can


389
00:11:14,626 --> 00:11:17,726
use these calls.


390
00:11:17,876 --> 00:11:20,886
So that's how to measure


391
00:11:20,886 --> 00:11:22,366
intervals with signposts.


392
00:11:22,906 --> 00:11:24,516
You may want to convey some


393
00:11:24,516 --> 00:11:25,716
additional information, some


394
00:11:25,716 --> 00:11:26,916
additional performance relevant


395
00:11:26,916 --> 00:11:27,926
information along with your


396
00:11:27,926 --> 00:11:28,496
signposts.


397
00:11:28,496 --> 00:11:30,396
And for that, we have a way to


398
00:11:30,396 --> 00:11:32,306
add metadata to signpost calls.


399
00:11:33,526 --> 00:11:35,486
So here's your basic signpost


400
00:11:35,516 --> 00:11:35,796
call.


401
00:11:36,106 --> 00:11:37,256
To that, we can add an


402
00:11:37,256 --> 00:11:38,576
additional string literal


403
00:11:38,576 --> 00:11:39,056
parameter.


404
00:11:39,796 --> 00:11:40,846
This allows you to add some


405
00:11:40,846 --> 00:11:42,626
context to your begin and end


406
00:11:42,626 --> 00:11:43,316
call sites.


407
00:11:44,366 --> 00:11:46,016
Perhaps you have multiple begin


408
00:11:46,206 --> 00:11:47,896
and exit points for a particular


409
00:11:47,896 --> 00:11:50,416
operation, but the string


410
00:11:50,416 --> 00:11:52,476
literal is also an OSLog format


411
00:11:52,476 --> 00:11:52,756
string.


412
00:11:53,226 --> 00:11:54,756
And that means I can use it to


413
00:11:54,756 --> 00:11:56,746
pass additional data into the


414
00:11:56,746 --> 00:11:57,406
signpost.


415
00:11:57,686 --> 00:11:59,226
So here, for example, I've used


416
00:11:59,226 --> 00:12:01,096
that %d to pass in four


417
00:12:01,096 --> 00:12:01,556
integers.


418
00:12:02,806 --> 00:12:04,846
But because it's an OSLog format


419
00:12:04,846 --> 00:12:06,986
string, I can also use it to


420
00:12:06,986 --> 00:12:08,316
pass many arguments of different


421
00:12:08,316 --> 00:12:08,626
types.


422
00:12:08,786 --> 00:12:09,766
So here I've passed in some


423
00:12:09,766 --> 00:12:10,796
floating-point numbers.


424
00:12:10,916 --> 00:12:12,266
And I've even used the format


425
00:12:12,266 --> 00:12:14,726
specifier to tell the system how


426
00:12:14,726 --> 00:12:15,736
much precision I want.


427
00:12:16,246 --> 00:12:19,396
You can pass dynamic strings in


428
00:12:19,396 --> 00:12:20,446
with the string literal


429
00:12:20,446 --> 00:12:20,926
formatter.


430
00:12:21,746 --> 00:12:23,086
And that'll let us pass in


431
00:12:23,086 --> 00:12:24,186
information that comes from a


432
00:12:24,186 --> 00:12:25,656
function call or comes from a


433
00:12:25,656 --> 00:12:26,596
user entered piece of


434
00:12:26,596 --> 00:12:27,186
information.


435
00:12:28,046 --> 00:12:30,036
And we reference that format


436
00:12:30,036 --> 00:12:31,756
string literal with a fixed


437
00:12:31,756 --> 00:12:33,516
amount of storage which means


438
00:12:33,516 --> 00:12:34,906
that you can feel free to make


439
00:12:34,906 --> 00:12:36,746
it as long and as human readable


440
00:12:36,746 --> 00:12:37,136
as you like.


441
00:12:39,136 --> 00:12:41,356
This human readable string is


442
00:12:41,356 --> 00:12:42,346
the same one that will be


443
00:12:42,346 --> 00:12:43,656
rendered up in the Instruments.


444
00:12:44,046 --> 00:12:45,246
So you can feel free to give it


445
00:12:45,246 --> 00:12:45,986
some context.


446
00:12:45,986 --> 00:12:47,106
I've given it here for the


447
00:12:47,106 --> 00:12:48,006
various arguments.


448
00:12:48,446 --> 00:12:49,866
And Instruments will be able to


449
00:12:49,866 --> 00:12:51,146
show that full rendered string,


450
00:12:51,576 --> 00:12:53,146
or it still has programmatic


451
00:12:53,146 --> 00:12:54,806
access to the data that's


452
00:12:55,296 --> 00:12:55,486
attached.


453
00:12:57,756 --> 00:12:59,816
In addition to metadata for


454
00:12:59,816 --> 00:13:01,226
those intervals, you may want to


455
00:13:01,226 --> 00:13:03,496
add individual points in time.


456
00:13:04,156 --> 00:13:06,236
That is, in addition to the


457
00:13:06,236 --> 00:13:08,246
begin signpost and the end


458
00:13:08,246 --> 00:13:09,356
signpost, you may have a


459
00:13:09,356 --> 00:13:10,726
signpost that's not tethered to


460
00:13:10,786 --> 00:13:12,646
a particular time interval but


461
00:13:12,646 --> 00:13:14,406
rather just some fixed moment.


462
00:13:14,636 --> 00:13:16,596
And for that, we have an os


463
00:13:16,596 --> 00:13:17,946
signpost with the event type.


464
00:13:18,886 --> 00:13:20,136
The os signpost with the event


465
00:13:20,136 --> 00:13:21,926
type call looks just like the


466
00:13:21,926 --> 00:13:23,676
same as the begin and end, this


467
00:13:23,676 --> 00:13:24,966
time with the event type.


468
00:13:25,706 --> 00:13:27,376
And it marks a single point in


469
00:13:27,376 --> 00:13:27,706
time.


470
00:13:28,656 --> 00:13:29,806
You could use this within the


471
00:13:29,806 --> 00:13:32,186
context of an interval or maybe


472
00:13:32,186 --> 00:13:33,266
because you want to track


473
00:13:33,266 --> 00:13:34,506
something that's independent of


474
00:13:34,506 --> 00:13:35,606
an interval like a user


475
00:13:35,606 --> 00:13:36,176
interaction.


476
00:13:36,966 --> 00:13:39,436
So for that fetch asset interval


477
00:13:39,436 --> 00:13:41,066
we're talking about, maybe you


478
00:13:41,066 --> 00:13:42,206
want to know when you've


479
00:13:42,206 --> 00:13:43,556
connected to the service that


480
00:13:43,596 --> 00:13:44,616
provides that asset.


481
00:13:45,066 --> 00:13:45,906
Or maybe you want to know when


482
00:13:45,906 --> 00:13:47,336
you've received a few bytes of


483
00:13:47,336 --> 00:13:47,466
it.


484
00:13:48,416 --> 00:13:49,636
You can use this to update the


485
00:13:49,636 --> 00:13:51,056
status or progress of a


486
00:13:51,056 --> 00:13:52,556
particular interval many times


487
00:13:52,596 --> 00:13:54,706
throughout that time of that


488
00:13:54,706 --> 00:13:54,986
interval.


489
00:13:56,426 --> 00:13:58,416
Or you might be tracking maybe a


490
00:13:58,416 --> 00:14:00,776
triggering event like maybe a


491
00:14:00,776 --> 00:14:02,336
user interface interaction like


492
00:14:02,336 --> 00:14:04,196
somebody has just swiped to


493
00:14:04,196 --> 00:14:05,276
update that interface.


494
00:14:05,816 --> 00:14:07,206
Although, if you're really


495
00:14:07,206 --> 00:14:08,306
investigating in a performance


496
00:14:08,336 --> 00:14:09,846
problem, they might be swiping a


497
00:14:09,846 --> 00:14:11,916
lot so this might be what you


498
00:14:11,916 --> 00:14:12,436
see instead.


499
00:14:14,786 --> 00:14:17,136
If you have signpost enabled,


500
00:14:17,636 --> 00:14:18,686
they're usually on by default,


501
00:14:19,396 --> 00:14:20,366
but I'd like to talk about


502
00:14:20,486 --> 00:14:21,786
conditionally turning them on


503
00:14:21,836 --> 00:14:22,216
and off.


504
00:14:23,986 --> 00:14:25,546
First I'd like to emphasize that


505
00:14:25,546 --> 00:14:26,766
we built signpost to be


506
00:14:26,906 --> 00:14:27,536
lightweight.


507
00:14:28,066 --> 00:14:29,986
That means we've done a lot of


508
00:14:29,986 --> 00:14:31,776
work to optimize them at emit


509
00:14:31,896 --> 00:14:32,146
time.


510
00:14:32,666 --> 00:14:33,376
We've done this through some


511
00:14:33,376 --> 00:14:34,796
compiler optimizations that make


512
00:14:34,796 --> 00:14:36,546
sure that work is done in front


513
00:14:36,606 --> 00:14:37,436
instead of runtime.


514
00:14:37,926 --> 00:14:39,416
We've also deferred a lot of our


515
00:14:39,416 --> 00:14:40,796
work so that they're done on the


516
00:14:40,796 --> 00:14:41,656
Instruments backend.


517
00:14:41,946 --> 00:14:43,406
And that means that while


518
00:14:43,406 --> 00:14:44,376
signposts are being emitted,


519
00:14:44,376 --> 00:14:45,796
they should take very few system


520
00:14:45,796 --> 00:14:46,416
resources.


521
00:14:46,876 --> 00:14:47,896
We've done this because we want


522
00:14:47,896 --> 00:14:49,456
to minimize the impact to


523
00:14:49,456 --> 00:14:50,436
whatever your code is running.


524
00:14:50,916 --> 00:14:52,096
And we've also done it because


525
00:14:52,096 --> 00:14:53,236
we want to make sure that even


526
00:14:53,236 --> 00:14:55,076
if you have very small time


527
00:14:55,076 --> 00:14:56,946
span, you can emit a lot of


528
00:14:56,946 --> 00:14:57,866
signposts to get some


529
00:14:57,866 --> 00:14:58,976
fine-grained measurements.


530
00:15:00,236 --> 00:15:01,566
But you may want to be able to


531
00:15:01,566 --> 00:15:03,066
turn your signposts off.


532
00:15:03,406 --> 00:15:05,186
Maybe you want to eliminate as


533
00:15:05,186 --> 00:15:06,836
much overhead as you can from a


534
00:15:06,836 --> 00:15:07,656
particular code path.


535
00:15:08,176 --> 00:15:10,186
Or you might have two categories


536
00:15:10,186 --> 00:15:11,386
of signposts, both of which are


537
00:15:11,386 --> 00:15:13,126
super-high volume and you really


538
00:15:13,126 --> 00:15:14,546
are only interested in debugging


539
00:15:14,546 --> 00:15:16,016
one or the other at a given


540
00:15:16,016 --> 00:15:17,096
point in time.


541
00:15:17,876 --> 00:15:19,536
Well, to do that we're going to


542
00:15:19,536 --> 00:15:20,806
take advantage of a feature of


543
00:15:20,856 --> 00:15:23,266
OSLog, the disabled log handle.


544
00:15:24,136 --> 00:15:25,896
So the disabled log handle is a


545
00:15:26,386 --> 00:15:27,226
simple handle.


546
00:15:27,276 --> 00:15:30,036
And what it does is every OSLog


547
00:15:30,096 --> 00:15:31,846
and os signpost call made


548
00:15:31,846 --> 00:15:33,766
against that handle will just


549
00:15:33,766 --> 00:15:35,226
turn into something very close


550
00:15:35,226 --> 00:15:35,736
to a no-op.


551
00:15:36,556 --> 00:15:38,186
In fact, if you adopt this in C,


552
00:15:38,466 --> 00:15:39,576
we'll even do the check for you


553
00:15:39,626 --> 00:15:41,506
in line and then we won't even


554
00:15:41,506 --> 00:15:42,346
evaluate the rest of the


555
00:15:42,346 --> 00:15:42,856
arguments.


556
00:15:43,546 --> 00:15:45,246
So you can just change this


557
00:15:45,246 --> 00:15:46,156
handle at runtime.


558
00:15:46,566 --> 00:15:47,746
Let me show you an example.


559
00:15:48,426 --> 00:15:51,226
So we're going to go back to the


560
00:15:51,226 --> 00:15:52,816
very first example code that we


561
00:15:52,816 --> 00:15:53,146
had.


562
00:15:53,146 --> 00:15:54,846
And you see that initialization


563
00:15:54,846 --> 00:15:56,066
of that log handle up top.


564
00:15:56,896 --> 00:15:59,066
Well, instead I'm going to make


565
00:15:59,106 --> 00:16:00,596
that initialization conditional.


566
00:16:01,076 --> 00:16:02,866
So I'm either going to assign it


567
00:16:02,976 --> 00:16:04,546
to the normal os log constructor


568
00:16:05,066 --> 00:16:05,906
or I'm going to assign it to


569
00:16:05,906 --> 00:16:07,196
that disabled log handle.


570
00:16:07,776 --> 00:16:11,126
If we take the first path, all


571
00:16:11,126 --> 00:16:12,776
the os signpost calls will work


572
00:16:12,776 --> 00:16:14,546
as I described, but if we take


573
00:16:14,546 --> 00:16:15,996
the second path, those os


574
00:16:15,996 --> 00:16:17,256
signpost calls will turn into


575
00:16:17,256 --> 00:16:18,026
near no-ops.


576
00:16:18,876 --> 00:16:21,696
So as I said before, notice that


577
00:16:21,696 --> 00:16:22,886
I didn't have to call any of my


578
00:16:22,886 --> 00:16:24,196
call -- I didn't have to change


579
00:16:24,196 --> 00:16:25,126
any of my call sites.


580
00:16:25,126 --> 00:16:25,976
I only had to change the


581
00:16:25,976 --> 00:16:26,756
initialization.


582
00:16:27,566 --> 00:16:29,346
And I made the initialization


583
00:16:29,346 --> 00:16:31,066
conditional on an environment


584
00:16:31,066 --> 00:16:31,446
variable.


585
00:16:31,696 --> 00:16:32,716
This is the kind of thing that


586
00:16:32,716 --> 00:16:34,046
you can set up in your Xcode


587
00:16:34,046 --> 00:16:35,136
scheme while you're debugging


588
00:16:35,136 --> 00:16:37,236
your program.


589
00:16:37,836 --> 00:16:39,126
Now I said you didn't have to


590
00:16:39,126 --> 00:16:40,346
change in the call sites, but


591
00:16:40,346 --> 00:16:41,326
maybe you have some


592
00:16:41,326 --> 00:16:42,916
functionality that is


593
00:16:43,036 --> 00:16:44,506
instrumentation specific.


594
00:16:44,586 --> 00:16:46,346
That is, it might be expensive


595
00:16:46,346 --> 00:16:47,586
but it might only be used for


596
00:16:47,586 --> 00:16:48,086
while debugging.


597
00:16:48,926 --> 00:16:50,976
So in that case, you can check a


598
00:16:50,976 --> 00:16:52,486
particular log handle to see if


599
00:16:52,486 --> 00:16:53,736
signposts are turned on for it


600
00:16:54,076 --> 00:16:55,126
with the signposts enabled


601
00:16:55,126 --> 00:16:55,536
property.


602
00:16:56,036 --> 00:16:57,256
The signposts enabled property


603
00:16:57,256 --> 00:16:58,656
can then be used to gate that


604
00:16:58,656 --> 00:17:00,526
additional operation.


605
00:17:02,586 --> 00:17:02,876
Okay.


606
00:17:03,426 --> 00:17:05,076
So all the examples that I've


607
00:17:05,076 --> 00:17:06,646
shown so far have been in Swift,


608
00:17:07,356 --> 00:17:09,976
but signposts are also available


609
00:17:10,695 --> 00:17:11,175
in C.


610
00:17:13,086 --> 00:17:13,925
All the functionality I've


611
00:17:13,955 --> 00:17:15,476
talked about so far is


612
00:17:15,476 --> 00:17:17,266
available: the long handles,


613
00:17:17,675 --> 00:17:18,665
emitting the three different


614
00:17:18,665 --> 00:17:21,236
kinds of signposts, and managing


615
00:17:21,236 --> 00:17:22,476
your signpost identifiers.


616
00:17:23,066 --> 00:17:23,816
For those of you who are


617
00:17:23,816 --> 00:17:25,726
interested in adopting in C, I


618
00:17:25,726 --> 00:17:26,636
encourage you to read the header


619
00:17:26,636 --> 00:17:26,876
doc.


620
00:17:26,876 --> 00:17:28,086
and header doc covers all this


621
00:17:28,086 --> 00:17:29,566
information that I have but from


622
00:17:29,566 --> 00:17:30,896
a C developer's perspective.


623
00:17:32,236 --> 00:17:32,806
All right.


624
00:17:33,476 --> 00:17:34,876
Now you've seen how to adopt


625
00:17:34,876 --> 00:17:35,866
signposts in your code.


626
00:17:36,356 --> 00:17:38,006
And maybe you have a mental


627
00:17:38,006 --> 00:17:39,386
model of what they represent.


628
00:17:39,956 --> 00:17:41,436
So I would love for you to see


629
00:17:41,436 --> 00:17:43,126
how signposts work in concert


630
00:17:43,306 --> 00:17:43,926
with Instruments.


631
00:17:44,486 --> 00:17:45,936
And for that, I'm going to turn


632
00:17:45,936 --> 00:17:46,906
it over for the rest of the


633
00:17:46,906 --> 00:17:48,416
session to my colleague, Chad.


634
00:17:49,016 --> 00:17:49,276
Thank you.


635
00:17:50,516 --> 00:17:56,796
[ Applause ]


636
00:17:57,296 --> 00:17:57,926
>> All right.


637
00:17:58,646 --> 00:17:59,246
Thank you, Shane.


638
00:18:00,486 --> 00:18:02,606
Now today I want to show you and


639
00:18:02,606 --> 00:18:04,036
demonstrate for you three new


640
00:18:04,036 --> 00:18:05,016
important features in


641
00:18:05,016 --> 00:18:06,776
Instruments 10 to help you work


642
00:18:06,776 --> 00:18:07,616
with signpost data.


643
00:18:08,506 --> 00:18:09,896
The first is the new os signpost


644
00:18:09,896 --> 00:18:10,436
instrument.


645
00:18:10,686 --> 00:18:11,656
And that instrument allows you


646
00:18:11,656 --> 00:18:13,186
to record, visualize, and


647
00:18:13,186 --> 00:18:14,986
analyze all of the signpost


648
00:18:14,986 --> 00:18:16,736
activity in your application.


649
00:18:17,636 --> 00:18:19,446
The next feature is points of


650
00:18:19,446 --> 00:18:20,036
interest.


651
00:18:20,036 --> 00:18:20,846
I'll talk a little bit about


652
00:18:20,846 --> 00:18:22,316
what points of interest are and


653
00:18:22,426 --> 00:18:23,946
when you might want to emit one.


654
00:18:24,396 --> 00:18:26,026
And then I'm also going to show


655
00:18:26,026 --> 00:18:27,636
you the new custom instruments


656
00:18:27,636 --> 00:18:29,086
feature and how you can use it


657
00:18:29,086 --> 00:18:31,946
with os signposts to get a more,


658
00:18:32,286 --> 00:18:34,536
I guess, refined presentation of


659
00:18:34,536 --> 00:18:35,386
your signposts.


660
00:18:35,986 --> 00:18:37,616
So let's take a look at that in


661
00:18:37,616 --> 00:18:38,346
a demonstration.


662
00:18:39,116 --> 00:18:39,216
Okay.


663
00:18:42,626 --> 00:18:44,526
Now to start with, we're going


664
00:18:44,526 --> 00:18:46,206
to take a look at our example


665
00:18:46,206 --> 00:18:47,106
application first.


666
00:18:47,256 --> 00:18:48,386
And that is our Trailblazer


667
00:18:48,386 --> 00:18:48,986
application.


668
00:18:50,046 --> 00:18:53,016
This app is -- shows you the


669
00:18:53,016 --> 00:18:54,056
local hiking trails.


670
00:18:54,476 --> 00:18:56,626
And it basically downloads these


671
00:18:56,656 --> 00:18:58,376
beautiful images for you as we


672
00:18:58,376 --> 00:18:58,756
scroll.


673
00:18:59,916 --> 00:19:01,476
Now you'll notice that initially


674
00:19:01,566 --> 00:19:03,216
we have a white background and


675
00:19:03,216 --> 00:19:04,426
then the image comes in later


676
00:19:04,426 --> 00:19:04,896
and fills in.


677
00:19:04,896 --> 00:19:06,486
And this is a pretty common


678
00:19:06,486 --> 00:19:08,296
pattern in an application like


679
00:19:08,296 --> 00:19:08,536
this.


680
00:19:08,536 --> 00:19:09,526
And sometimes it's implemented


681
00:19:09,526 --> 00:19:12,466
with a future or a promise but


682
00:19:12,466 --> 00:19:13,796
this pattern -- as much as it


683
00:19:13,896 --> 00:19:15,746
helps with performance, it's


684
00:19:15,746 --> 00:19:16,976
also pretty difficult to


685
00:19:16,976 --> 00:19:17,496
profile.


686
00:19:17,556 --> 00:19:19,176
And the reason for that is


687
00:19:19,176 --> 00:19:19,896
because there are a lot of


688
00:19:19,896 --> 00:19:21,226
asynchronous activities going


689
00:19:21,226 --> 00:19:21,486
on.


690
00:19:21,876 --> 00:19:23,796
As the user scrolls, there are


691
00:19:23,796 --> 00:19:25,206
downloads that are in-flight at


692
00:19:25,206 --> 00:19:25,996
the same time.


693
00:19:25,996 --> 00:19:27,316
And if the user scrolls really


694
00:19:27,316 --> 00:19:29,226
quickly like this then the


695
00:19:29,226 --> 00:19:31,646
download may not complete before


696
00:19:31,776 --> 00:19:33,066
the image cell needs to be


697
00:19:33,066 --> 00:19:33,536
reused.


698
00:19:34,066 --> 00:19:35,256
And so then we have to cancel


699
00:19:35,256 --> 00:19:35,826
that download.


700
00:19:36,076 --> 00:19:37,986
If we fail to do that, then we


701
00:19:37,986 --> 00:19:40,236
end up with several downloads


702
00:19:40,236 --> 00:19:41,326
running in parallel that we


703
00:19:41,326 --> 00:19:42,276
didn't really want.


704
00:19:42,936 --> 00:19:44,196
So let's take a look at how we


705
00:19:44,196 --> 00:19:46,416
can use signposts to analyze the


706
00:19:46,416 --> 00:19:47,866
application of our Trailblazer.


707
00:19:48,546 --> 00:19:51,326
Now inside the trail cell, we


708
00:19:51,326 --> 00:19:53,026
have a method called


709
00:19:53,206 --> 00:19:54,956
startImageDownload.


710
00:19:55,286 --> 00:19:56,486
And this is invoked when we need


711
00:19:56,486 --> 00:19:58,736
to download that new image, and


712
00:19:58,996 --> 00:20:00,726
it's passed in the image name


713
00:20:01,016 --> 00:20:01,856
that should be downloaded.


714
00:20:02,506 --> 00:20:03,666
Now we have a download helper


715
00:20:04,256 --> 00:20:05,896
class here that we create an


716
00:20:05,896 --> 00:20:07,386
instance of an pass in the name


717
00:20:07,386 --> 00:20:08,546
and set ourself as the delegate


718
00:20:08,546 --> 00:20:09,626
so it'll call us back when it's


719
00:20:09,656 --> 00:20:10,136
downloaded.


720
00:20:10,136 --> 00:20:13,486
And in this case, since the


721
00:20:13,486 --> 00:20:15,386
downloader represents the


722
00:20:15,566 --> 00:20:16,816
concurrent activity that's going


723
00:20:16,816 --> 00:20:19,016
on, this asynchronous work, it's


724
00:20:19,016 --> 00:20:20,836
a great basis for a signpost ID.


725
00:20:21,046 --> 00:20:22,046
So we're going to create our


726
00:20:22,046 --> 00:20:24,656
signpost ID using our downloader


727
00:20:24,756 --> 00:20:25,156
object.


728
00:20:26,606 --> 00:20:27,746
Now to start our signposts,


729
00:20:27,746 --> 00:20:28,926
we're going to do an os signpost


730
00:20:28,926 --> 00:20:29,356
begin.


731
00:20:29,656 --> 00:20:30,886
And we're going to send it to


732
00:20:30,886 --> 00:20:32,836
our networking log handle so


733
00:20:32,876 --> 00:20:34,606
take a real quick look at our


734
00:20:34,606 --> 00:20:35,616
networking log handle.


735
00:20:35,926 --> 00:20:37,516
You see we're using our


736
00:20:37,516 --> 00:20:39,446
Trailblazer bundle ID and a


737
00:20:39,446 --> 00:20:40,906
category of networking.


738
00:20:41,606 --> 00:20:45,786
Now we're going to pass an image


739
00:20:45,786 --> 00:20:47,896
or, sorry, a signpost name of


740
00:20:47,896 --> 00:20:49,086
background image so that way we


741
00:20:49,086 --> 00:20:50,216
can see all of our background


742
00:20:50,216 --> 00:20:51,106
image downloads.


743
00:20:51,106 --> 00:20:52,936
And it will pass that signpost


744
00:20:52,936 --> 00:20:53,756
ID that we created.


745
00:20:53,816 --> 00:20:56,356
And we'll attach some metadata


746
00:20:56,356 --> 00:20:59,206
to begin to convey the name of


747
00:20:59,206 --> 00:21:00,456
the image that we are


748
00:21:00,606 --> 00:21:01,016
downloading.


749
00:21:01,636 --> 00:21:02,476
So then we'll start our


750
00:21:02,476 --> 00:21:04,556
download, and we'll set our


751
00:21:04,796 --> 00:21:06,526
property to track that.


752
00:21:06,526 --> 00:21:07,226
We have it currently


753
00:21:07,366 --> 00:21:08,096
runningDownloader.


754
00:21:09,196 --> 00:21:10,406
Now when that finishes, we'll


755
00:21:10,406 --> 00:21:11,906
get this didReceiveImage


756
00:21:11,986 --> 00:21:12,736
callback here.


757
00:21:13,126 --> 00:21:15,266
And we'll set our image view to


758
00:21:15,266 --> 00:21:16,266
the image that we received.


759
00:21:17,376 --> 00:21:19,086
And we'll call end on the


760
00:21:19,086 --> 00:21:19,686
signpost.


761
00:21:19,926 --> 00:21:21,316
And we'll use the exact same log


762
00:21:21,316 --> 00:21:23,266
handle, the same name, the same


763
00:21:23,266 --> 00:21:25,666
signpost ID but this time we're


764
00:21:25,666 --> 00:21:27,686
going to attach some end


765
00:21:27,686 --> 00:21:29,286
metadata to say finished with


766
00:21:29,286 --> 00:21:29,846
size.


767
00:21:30,726 --> 00:21:32,686
And you'll notice here that


768
00:21:33,296 --> 00:21:35,896
we've annotated this particular


769
00:21:35,896 --> 00:21:37,526
parameter with Xcode colon


770
00:21:37,526 --> 00:21:38,406
size-in-bytes.


771
00:21:38,406 --> 00:21:40,056
And what this does is it tells


772
00:21:40,336 --> 00:21:42,276
Xcode and Instruments that this


773
00:21:42,276 --> 00:21:43,676
argument should be treated as a


774
00:21:43,676 --> 00:21:45,566
size-in-bytes for both display


775
00:21:45,716 --> 00:21:46,536
and analysis.


776
00:21:47,756 --> 00:21:48,756
Now these are called engineering


777
00:21:48,756 --> 00:21:49,166
types.


778
00:21:49,166 --> 00:21:50,336
And they can be read about in


779
00:21:50,336 --> 00:21:51,656
the Instruments developer help


780
00:21:51,656 --> 00:21:52,986
guide which is under the help


781
00:21:52,986 --> 00:21:54,206
menu in Instruments.


782
00:21:54,956 --> 00:21:57,676
Now once we've completed our


783
00:21:57,676 --> 00:21:59,026
downloading, we can set that


784
00:21:59,026 --> 00:21:59,556
back to nil.


785
00:22:00,106 --> 00:22:02,366
Now there are two ways that we


786
00:22:02,366 --> 00:22:03,656
can finish a download.


787
00:22:03,656 --> 00:22:05,766
That was the success path.


788
00:22:06,036 --> 00:22:07,576
And then we have to consider the


789
00:22:07,576 --> 00:22:08,206
cancel path.


790
00:22:08,896 --> 00:22:11,176
So in prepare for reuse, if we


791
00:22:11,176 --> 00:22:12,136
currently have a running


792
00:22:12,136 --> 00:22:13,656
downloader, we're going to need


793
00:22:13,716 --> 00:22:15,486
to first cancel that downloader.


794
00:22:16,316 --> 00:22:17,406
So in that case, we're going to


795
00:22:17,406 --> 00:22:18,916
emit an end for the interval,


796
00:22:19,106 --> 00:22:20,936
and we're going to use that same


797
00:22:21,306 --> 00:22:23,376
logging handle, signpost name,


798
00:22:23,956 --> 00:22:24,766
signpost ID.


799
00:22:25,296 --> 00:22:27,046
And we're going to use cancelled


800
00:22:27,046 --> 00:22:29,456
as the end metadata to separate


801
00:22:29,456 --> 00:22:30,496
it from when we finish


802
00:22:30,496 --> 00:22:31,066
successfully.


803
00:22:32,116 --> 00:22:33,606
Now that's enough to actually do


804
00:22:33,606 --> 00:22:34,356
some profiling.


805
00:22:34,356 --> 00:22:35,936
So we're going to go over here


806
00:22:35,996 --> 00:22:38,146
to a product profile.


807
00:22:38,146 --> 00:22:40,086
And that will start up


808
00:22:40,086 --> 00:22:43,876
Instruments once we've finished


809
00:22:43,916 --> 00:22:44,816
building and installing.


810
00:22:44,816 --> 00:22:46,956
That will start up Instruments


811
00:22:46,956 --> 00:22:47,146
here.


812
00:22:47,266 --> 00:22:49,666
And we can create a new blank


813
00:22:49,666 --> 00:22:50,156
document.


814
00:22:50,536 --> 00:22:52,456
Then we can go to the library,


815
00:22:52,546 --> 00:22:54,156
and I can show you how to use


816
00:22:54,156 --> 00:22:56,126
that new os signpost instrument.


817
00:22:56,646 --> 00:22:58,556
So we have our new os signpost


818
00:22:58,556 --> 00:22:59,256
instrument here.


819
00:22:59,386 --> 00:23:02,046
And we'll just drag and drop


820
00:23:02,046 --> 00:23:03,806
that out into the trace.


821
00:23:04,186 --> 00:23:05,116
We'll make a little bit of room


822
00:23:05,116 --> 00:23:07,176
here for it and then we will


823
00:23:07,176 --> 00:23:08,376
press record.


824
00:23:08,646 --> 00:23:12,226
And I'll bring our iPhone back


825
00:23:12,396 --> 00:23:13,556
up here to the beginning.


826
00:23:13,876 --> 00:23:14,066
All right.


827
00:23:14,066 --> 00:23:15,076
So now we'll do some scrolling


828
00:23:15,076 --> 00:23:16,226
and then we'll also do some


829
00:23:16,226 --> 00:23:17,126
really, really quick scrolling.


830
00:23:17,196 --> 00:23:19,816
And then we'll let that settle


831
00:23:19,816 --> 00:23:20,116
down.


832
00:23:20,576 --> 00:23:22,236
Now we can go back to


833
00:23:22,236 --> 00:23:23,326
Instruments and see what kind of


834
00:23:23,326 --> 00:23:24,096
data we recorded.


835
00:23:24,796 --> 00:23:26,286
So I'm going to stop the


836
00:23:26,286 --> 00:23:26,776
recording.


837
00:23:27,636 --> 00:23:29,716
And now you'll notice here that,


838
00:23:30,006 --> 00:23:31,406
in the track view, we have a


839
00:23:31,406 --> 00:23:33,206
visualization of all of our


840
00:23:33,206 --> 00:23:34,636
background image intervals.


841
00:23:34,636 --> 00:23:35,706
Now that's the signpost name.


842
00:23:35,996 --> 00:23:37,706
Now if we hold down the option


843
00:23:37,706 --> 00:23:40,236
key and we zoom in, you can see


844
00:23:40,646 --> 00:23:41,546
there are intervals.


845
00:23:41,766 --> 00:23:43,946
And intervals are annotated with


846
00:23:43,946 --> 00:23:45,846
the start metadata and the end


847
00:23:45,846 --> 00:23:47,176
metadata.


848
00:23:48,126 --> 00:23:50,106
Now if we zoom back out and then


849
00:23:50,386 --> 00:23:52,066
take a look at the trace here


850
00:23:52,066 --> 00:23:54,786
again, we'll notice that we have


851
00:23:54,876 --> 00:23:57,546
no more than five images that


852
00:23:57,546 --> 00:23:58,466
are running downloads in


853
00:23:58,466 --> 00:23:59,546
parallel, which is a good thing.


854
00:24:00,006 --> 00:24:01,296
That means that our cancellation


855
00:24:01,296 --> 00:24:01,646
worked.


856
00:24:01,646 --> 00:24:04,276
And if we want to confirm that,


857
00:24:04,276 --> 00:24:05,346
we can come in here and you can


858
00:24:05,346 --> 00:24:07,606
see that a lot of these


859
00:24:07,606 --> 00:24:09,536
intervals have metadata that


860
00:24:09,536 --> 00:24:11,346
says that it was cancelled in


861
00:24:11,416 --> 00:24:11,936
the download.


862
00:24:12,706 --> 00:24:14,506
Now if you want to take -- if


863
00:24:14,506 --> 00:24:16,716
you want to look at a numerical


864
00:24:17,076 --> 00:24:18,346
-- or let's say you want to look


865
00:24:18,346 --> 00:24:19,586
at the durations of these


866
00:24:19,586 --> 00:24:22,196
intervals then you can come down


867
00:24:22,246 --> 00:24:23,166
here to the summary of


868
00:24:23,166 --> 00:24:23,726
intervals.


869
00:24:24,126 --> 00:24:26,726
And we see a breakdown by


870
00:24:26,726 --> 00:24:28,886
category and then by signpost


871
00:24:28,886 --> 00:24:30,616
name and then by the start


872
00:24:30,616 --> 00:24:32,026
message and then by the end


873
00:24:32,026 --> 00:24:32,456
message.


874
00:24:33,386 --> 00:24:35,326
So if we make this a little bit


875
00:24:35,326 --> 00:24:38,056
smaller, you can see that we


876
00:24:38,056 --> 00:24:41,306
made 93 image download requests.


877
00:24:42,236 --> 00:24:43,986
Of those, 12 were for location


878
00:24:43,986 --> 00:24:44,236
one.


879
00:24:45,426 --> 00:24:46,506
Of those 12, seven were


880
00:24:46,506 --> 00:24:48,776
cancelled and five finished with


881
00:24:48,806 --> 00:24:50,736
a size of 3.31 megabytes.


882
00:24:52,006 --> 00:24:53,036
Now if you look over here, these


883
00:24:53,036 --> 00:24:54,716
are the statistics about our


884
00:24:54,716 --> 00:24:55,386
durations.


885
00:24:55,776 --> 00:24:58,496
And you can see that the minimum


886
00:24:58,736 --> 00:25:00,506
and the average of the cancelled


887
00:25:01,106 --> 00:25:02,966
intervals is significantly


888
00:25:02,966 --> 00:25:04,816
smaller than when we finished


889
00:25:05,066 --> 00:25:06,056
with the full downloads.


890
00:25:06,056 --> 00:25:07,086
And that's exactly what you


891
00:25:07,086 --> 00:25:08,466
would expect to see in this


892
00:25:08,466 --> 00:25:08,826
pattern.


893
00:25:09,866 --> 00:25:11,086
Now if you want to see all of


894
00:25:11,086 --> 00:25:12,926
the cancelled events because


895
00:25:12,926 --> 00:25:13,966
you're interested in seeing


896
00:25:13,966 --> 00:25:16,186
those, you can put this -- focus


897
00:25:16,216 --> 00:25:19,586
arrow and it will take you to a


898
00:25:19,586 --> 00:25:21,586
list view where you can see all


899
00:25:21,586 --> 00:25:24,186
the places where location one


900
00:25:24,186 --> 00:25:25,626
had an end message of cancelled.


901
00:25:26,386 --> 00:25:28,156
And as we go through this,


902
00:25:28,156 --> 00:25:29,146
you'll see that the inspection


903
00:25:29,146 --> 00:25:30,636
head on the top of the trace


904
00:25:31,016 --> 00:25:32,566
will move forward to each one of


905
00:25:32,566 --> 00:25:33,206
those intervals.


906
00:25:33,336 --> 00:25:35,066
So you can track all the failure


907
00:25:35,066 --> 00:25:36,086
cases if that's what you're


908
00:25:36,086 --> 00:25:36,556
interested in.


909
00:25:36,666 --> 00:25:40,076
Now that's a great way to view


910
00:25:40,316 --> 00:25:42,756
the times of those intervals,


911
00:25:42,756 --> 00:25:44,096
the timing of those intervals.


912
00:25:44,456 --> 00:25:46,926
But what if you wanted to do an


913
00:25:46,926 --> 00:25:48,536
analysis of the metadata?


914
00:25:49,316 --> 00:25:50,886
What if you wanted to determine


915
00:25:51,046 --> 00:25:53,426
how many bytes of image data


916
00:25:53,426 --> 00:25:54,406
that we've downloaded over the


917
00:25:54,526 --> 00:25:54,916
network?


918
00:25:55,696 --> 00:25:57,906
Well, we've emitted metadata


919
00:25:57,906 --> 00:25:59,946
messages like finished with size


920
00:25:59,996 --> 00:26:01,026
and then the size.


921
00:26:01,026 --> 00:26:02,516
It would be great if we could


922
00:26:02,576 --> 00:26:04,536
total that argument up.


923
00:26:05,266 --> 00:26:06,546
So if you want to do that, you


924
00:26:06,546 --> 00:26:07,256
can come over here to the


925
00:26:07,256 --> 00:26:09,286
summary of metadata statistics.


926
00:26:10,616 --> 00:26:11,696
You can see that we have it


927
00:26:11,696 --> 00:26:13,276
broken down by the subsystem,


928
00:26:13,826 --> 00:26:15,326
the category, and then the


929
00:26:15,326 --> 00:26:17,076
format string and then below the


930
00:26:17,076 --> 00:26:18,636
format string, the arguments


931
00:26:18,636 --> 00:26:19,606
within that format string.


932
00:26:19,816 --> 00:26:20,996
And since our format string only


933
00:26:20,996 --> 00:26:22,926
has one, that's simply arg0.


934
00:26:22,926 --> 00:26:26,216
Now Instruments has totaled this


935
00:26:26,216 --> 00:26:26,416
up.


936
00:26:26,416 --> 00:26:27,896
And it knows that this is a


937
00:26:27,896 --> 00:26:28,776
size-in-bytes.


938
00:26:28,776 --> 00:26:29,866
And so it gives us a nice


939
00:26:29,866 --> 00:26:31,986
calculation of 80 megabytes.


940
00:26:32,036 --> 00:26:33,626
So we've downloaded 80 megabytes


941
00:26:33,656 --> 00:26:34,856
of image data total.


942
00:26:35,046 --> 00:26:37,666
Now you can see the different


943
00:26:37,666 --> 00:26:38,186
columns here.


944
00:26:38,186 --> 00:26:39,196
You've got it min, max, average,


945
00:26:39,196 --> 00:26:40,166
and standard deviation.


946
00:26:40,256 --> 00:26:41,776
So this is a great way to take a


947
00:26:41,846 --> 00:26:43,976
look at just statistical


948
00:26:43,976 --> 00:26:45,556
analysis of the values that


949
00:26:45,556 --> 00:26:46,636
you're conveying through your


950
00:26:46,666 --> 00:26:47,706
metadata.


951
00:26:48,306 --> 00:26:49,296
Now Shane mentioned that


952
00:26:49,296 --> 00:26:51,766
signposts were very lightweight


953
00:26:52,056 --> 00:26:54,596
and that is totally true except


954
00:26:54,806 --> 00:26:55,916
when you run Instruments the way


955
00:26:55,916 --> 00:26:56,816
I just ran Instruments.


956
00:26:57,016 --> 00:27:00,056
In what we call immediate mode,


957
00:27:00,056 --> 00:27:01,166
which is the default recording


958
00:27:01,166 --> 00:27:03,126
mode, Instruments is trying to


959
00:27:03,126 --> 00:27:05,876
show and record the data in near


960
00:27:05,906 --> 00:27:06,416
real time.


961
00:27:07,056 --> 00:27:07,926
And so when it goes into


962
00:27:07,926 --> 00:27:09,556
immediate mode recording, all


963
00:27:09,626 --> 00:27:11,636
the signposts have to be sent


964
00:27:11,636 --> 00:27:12,826
directly to Instruments.


965
00:27:13,326 --> 00:27:15,106
And we have to bypass all of


966
00:27:15,106 --> 00:27:16,176
those optimizations that you get


967
00:27:16,176 --> 00:27:18,136
from buffering in the operating


968
00:27:18,136 --> 00:27:18,486
system.


969
00:27:19,196 --> 00:27:21,966
Now with our signposts -- with


970
00:27:21,966 --> 00:27:23,576
our signposts application here,


971
00:27:24,036 --> 00:27:25,546
we're not really emitting enough


972
00:27:25,546 --> 00:27:27,176
intervals to really notice that


973
00:27:27,176 --> 00:27:29,186
overhead, but if you have a game


974
00:27:29,186 --> 00:27:30,156
engine and you want to emit


975
00:27:30,156 --> 00:27:32,146
thousands of signposts per


976
00:27:32,146 --> 00:27:34,106
second, that overhead will start


977
00:27:34,106 --> 00:27:34,836
to build up.


978
00:27:35,266 --> 00:27:37,336
So in order to work around that,


979
00:27:37,756 --> 00:27:39,376
what you can do is change the


980
00:27:39,376 --> 00:27:41,176
recording mode of Instruments


981
00:27:41,616 --> 00:27:42,736
before you take your recording.


982
00:27:43,286 --> 00:27:45,016
And the way you do that is by


983
00:27:45,016 --> 00:27:46,956
holding down on the record


984
00:27:46,956 --> 00:27:48,656
button and selecting recording


985
00:27:48,656 --> 00:27:49,266
options.


986
00:27:50,706 --> 00:27:52,496
And then in this section here


987
00:27:52,646 --> 00:27:55,326
for the global options, you can


988
00:27:55,326 --> 00:27:56,566
see that we have our immediate


989
00:27:56,566 --> 00:27:57,176
mode selected.


990
00:27:57,496 --> 00:27:58,976
And we can change that to last


991
00:27:58,976 --> 00:27:59,876
five second mode.


992
00:28:00,436 --> 00:28:01,656
Now this is often called


993
00:28:01,656 --> 00:28:02,376
windowed mode.


994
00:28:03,206 --> 00:28:04,736
And what it tells the operating


995
00:28:04,736 --> 00:28:05,416
system and the recording


996
00:28:05,416 --> 00:28:07,416
technology is that we don't need


997
00:28:07,416 --> 00:28:08,306
every single event.


998
00:28:08,306 --> 00:28:09,386
We just want the last five


999
00:28:09,386 --> 00:28:10,046
seconds worth.


1000
00:28:10,366 --> 00:28:11,786
And when you do that,


1001
00:28:11,786 --> 00:28:12,946
Instruments will step out of the


1002
00:28:12,946 --> 00:28:14,066
way and let the operating system


1003
00:28:14,066 --> 00:28:15,416
do what it does.


1004
00:28:15,836 --> 00:28:16,966
Now this is a very common mode.


1005
00:28:16,966 --> 00:28:18,296
We use this in system trace.


1006
00:28:18,296 --> 00:28:19,976
We use this in metal system


1007
00:28:19,976 --> 00:28:20,906
trace and the new game


1008
00:28:20,906 --> 00:28:21,806
performance template.


1009
00:28:22,276 --> 00:28:23,736
And so it's a very common way to


1010
00:28:23,736 --> 00:28:25,136
look for stutters and hangs in


1011
00:28:25,136 --> 00:28:25,776
your application.


1012
00:28:25,846 --> 00:28:26,646
All right.


1013
00:28:27,256 --> 00:28:30,916
So that is our os signpost


1014
00:28:30,996 --> 00:28:31,426
instrument.


1015
00:28:32,756 --> 00:28:34,416
Now let's talk about points of


1016
00:28:34,416 --> 00:28:34,756
interest.


1017
00:28:36,046 --> 00:28:38,216
Now if we come back to our


1018
00:28:38,326 --> 00:28:39,476
Trailblazer application here,


1019
00:28:40,216 --> 00:28:43,176
you notice that when I tap on a


1020
00:28:43,176 --> 00:28:45,166
trail, it pushes a detail.


1021
00:28:46,026 --> 00:28:47,326
If I go back and tap on a


1022
00:28:47,326 --> 00:28:48,676
different trail, it'll push a


1023
00:28:48,676 --> 00:28:49,316
different detail.


1024
00:28:50,476 --> 00:28:53,186
Now it would be great if we


1025
00:28:53,326 --> 00:28:55,026
could track every time these


1026
00:28:55,026 --> 00:28:56,516
detail views come forward


1027
00:28:56,896 --> 00:28:57,986
because then we can tell what


1028
00:28:57,986 --> 00:28:59,266
our user is trying to do, and we


1029
00:28:59,266 --> 00:29:00,856
can tell where our user is in


1030
00:29:00,856 --> 00:29:01,606
the application.


1031
00:29:02,626 --> 00:29:04,466
Now you could certainly do this


1032
00:29:04,466 --> 00:29:07,246
with a signpost, but you'd have


1033
00:29:07,296 --> 00:29:08,526
to drag in the os signpost


1034
00:29:08,526 --> 00:29:10,366
instrument and record all of the


1035
00:29:10,366 --> 00:29:11,556
signpost activity on the


1036
00:29:11,556 --> 00:29:12,146
application.


1037
00:29:12,146 --> 00:29:14,316
And it sort of dilutes how


1038
00:29:14,316 --> 00:29:16,456
important these user navigation


1039
00:29:16,456 --> 00:29:17,086
events are.


1040
00:29:17,756 --> 00:29:19,386
So what we allow you to do is


1041
00:29:19,386 --> 00:29:20,826
promote them to what are called


1042
00:29:20,936 --> 00:29:21,796
points of interest.


1043
00:29:22,566 --> 00:29:23,746
Now if I go to our code for the


1044
00:29:23,746 --> 00:29:26,636
detail controller and we look at


1045
00:29:26,636 --> 00:29:28,406
our viewDidAppear method, you


1046
00:29:28,406 --> 00:29:31,006
can see that I'm posting -- I'm


1047
00:29:31,006 --> 00:29:32,426
creating an os signpost event


1048
00:29:33,076 --> 00:29:34,296
saying that a detail appeared


1049
00:29:34,696 --> 00:29:36,136
and with the name of the detail.


1050
00:29:37,186 --> 00:29:38,206
Now this is sent to a special


1051
00:29:38,206 --> 00:29:39,486
log handle that we've created


1052
00:29:39,486 --> 00:29:40,516
called points of interest.


1053
00:29:40,986 --> 00:29:42,116
And the way that you create that


1054
00:29:42,556 --> 00:29:43,836
is by creating a log handle with


1055
00:29:43,946 --> 00:29:46,166
your subsystem identifier and


1056
00:29:46,256 --> 00:29:47,976
the systems points of interest


1057
00:29:47,976 --> 00:29:48,466
category.


1058
00:29:48,666 --> 00:29:49,946
So this is a special category


1059
00:29:49,946 --> 00:29:50,886
that Instruments will be looking


1060
00:29:50,886 --> 00:29:51,196
for.


1061
00:29:51,656 --> 00:29:52,896
And when it sees points here,


1062
00:29:53,246 --> 00:29:55,746
it'll place them into the points


1063
00:29:55,786 --> 00:29:57,196
of interest instrument.


1064
00:29:57,336 --> 00:29:59,856
So if we come back here and take


1065
00:29:59,856 --> 00:30:01,636
a time profile, you can see that


1066
00:30:01,636 --> 00:30:03,636
we have our points of interest


1067
00:30:03,636 --> 00:30:04,576
instrument automatically


1068
00:30:04,576 --> 00:30:04,976
included.


1069
00:30:05,146 --> 00:30:08,706
And if we do a recording and we


1070
00:30:08,936 --> 00:30:11,246
do that same basic action, we go


1071
00:30:11,246 --> 00:30:12,636
into the Matt Davis Trail and


1072
00:30:12,636 --> 00:30:13,426
then we'll come back here to


1073
00:30:13,426 --> 00:30:15,536
Skyline Trail and then we'll go


1074
00:30:15,536 --> 00:30:17,466
back and we'll do one more for


1075
00:30:17,466 --> 00:30:17,896
good measure.


1076
00:30:19,366 --> 00:30:20,856
Now when you go back to


1077
00:30:21,236 --> 00:30:25,176
Instruments, you can see that we


1078
00:30:25,176 --> 00:30:26,276
have those points of interest


1079
00:30:26,606 --> 00:30:27,806
prominently displayed.


1080
00:30:27,806 --> 00:30:29,776
So you can see where your user


1081
00:30:29,776 --> 00:30:31,036
was in the navigation of your


1082
00:30:31,036 --> 00:30:31,236
app.


1083
00:30:31,236 --> 00:30:32,406
And you can correlate this with


1084
00:30:32,406 --> 00:30:33,316
other performance data.


1085
00:30:33,986 --> 00:30:34,986
And so points of interest are


1086
00:30:34,986 --> 00:30:37,236
really a way for you to pick and


1087
00:30:37,236 --> 00:30:38,626
choose some of the most


1088
00:30:38,626 --> 00:30:40,546
important points of interest in


1089
00:30:40,546 --> 00:30:42,016
your application and make them


1090
00:30:42,016 --> 00:30:44,036
available to every developer


1091
00:30:44,036 --> 00:30:45,446
that's on your team or in your


1092
00:30:45,446 --> 00:30:46,306
development community.


1093
00:30:46,566 --> 00:30:47,736
And they can be seen right here


1094
00:30:47,736 --> 00:30:48,596
in the points of interest.


1095
00:30:49,956 --> 00:30:50,156
All right.


1096
00:30:50,156 --> 00:30:51,756
So that is the points of


1097
00:30:51,756 --> 00:30:53,596
interest instrument and how you


1098
00:30:53,596 --> 00:30:54,956
create points of interest from


1099
00:30:54,956 --> 00:30:55,646
signposts.


1100
00:30:56,966 --> 00:30:58,926
Now another great feature of


1101
00:30:59,276 --> 00:31:01,006
Instruments 10 is the ability


1102
00:31:01,006 --> 00:31:02,376
for you to create custom


1103
00:31:02,376 --> 00:31:03,026
instruments.


1104
00:31:03,576 --> 00:31:05,096
And so to demonstrate what you


1105
00:31:05,096 --> 00:31:06,456
can do with custom instruments


1106
00:31:06,456 --> 00:31:08,816
in os signpost, we've created,


1107
00:31:08,816 --> 00:31:11,256
as part of our project, a


1108
00:31:11,256 --> 00:31:12,836
Trailblazer instruments package.


1109
00:31:13,916 --> 00:31:15,336
Now I'm going to build and run


1110
00:31:15,336 --> 00:31:16,226
that now.


1111
00:31:16,306 --> 00:31:20,306
And you'll see when we do that,


1112
00:31:20,586 --> 00:31:21,996
we start a separate copy of


1113
00:31:21,996 --> 00:31:24,566
Instruments that has our just


1114
00:31:24,566 --> 00:31:25,796
built package installed.


1115
00:31:25,796 --> 00:31:28,796
And if we bring that version


1116
00:31:28,796 --> 00:31:30,666
forward, we'll see that we now


1117
00:31:30,726 --> 00:31:32,356
have a Trailblazer networking


1118
00:31:32,856 --> 00:31:33,826
trace template.


1119
00:31:33,826 --> 00:31:36,296
And if we choose that, we can


1120
00:31:36,456 --> 00:31:38,046
see that we have a Trailblazer


1121
00:31:38,046 --> 00:31:39,616
networking instrument in our


1122
00:31:39,616 --> 00:31:40,246
trace document.


1123
00:31:41,546 --> 00:31:43,266
And let's take a recording and


1124
00:31:43,326 --> 00:31:44,226
see what the difference is


1125
00:31:44,226 --> 00:31:46,666
between our points of interest


1126
00:31:46,666 --> 00:31:48,176
or, I'm sorry, our os signpost


1127
00:31:48,376 --> 00:31:49,736
and what this custom instrument


1128
00:31:49,736 --> 00:31:50,016
can do.


1129
00:31:50,106 --> 00:31:51,086
So we'll do the same type of


1130
00:31:51,086 --> 00:31:51,416
thing.


1131
00:31:51,956 --> 00:31:53,156
We'll do some basic downloading.


1132
00:31:53,246 --> 00:31:57,046
And then we'll come back and


1133
00:31:57,046 --> 00:31:58,086
we'll analyze our trace.


1134
00:31:59,036 --> 00:32:00,656
Now the presentation here is


1135
00:32:00,656 --> 00:32:01,646
significantly different.


1136
00:32:01,786 --> 00:32:02,946
So let's zoom in and take a look


1137
00:32:02,946 --> 00:32:04,676
at it.


1138
00:32:04,676 --> 00:32:07,076
You'll notice here on the left,


1139
00:32:07,076 --> 00:32:08,066
instead of breaking it down by


1140
00:32:08,066 --> 00:32:09,396
signpost name, we've broken it


1141
00:32:09,396 --> 00:32:10,376
down by the image being


1142
00:32:10,376 --> 00:32:10,906
downloaded.


1143
00:32:11,416 --> 00:32:13,466
So now we can see that image two


1144
00:32:13,656 --> 00:32:16,606
was downloaded at this point and


1145
00:32:16,606 --> 00:32:17,406
at this point.


1146
00:32:18,256 --> 00:32:20,456
Now we've labeled each one with


1147
00:32:20,716 --> 00:32:21,896
the size in megabytes of the


1148
00:32:21,896 --> 00:32:22,386
download.


1149
00:32:22,996 --> 00:32:25,546
And we've also colored them red


1150
00:32:25,546 --> 00:32:27,576
if the download size is larger


1151
00:32:27,576 --> 00:32:28,896
than 3 1/2 megabytes.


1152
00:32:29,656 --> 00:32:31,846
So this is a custom graph that


1153
00:32:31,846 --> 00:32:33,226
we created as part of our custom


1154
00:32:33,226 --> 00:32:33,636
instrument.


1155
00:32:33,956 --> 00:32:35,536
Now we've also defined some


1156
00:32:35,536 --> 00:32:36,446
details down here.


1157
00:32:36,536 --> 00:32:38,516
We've got a very simple list of


1158
00:32:38,516 --> 00:32:39,716
our download events.


1159
00:32:39,836 --> 00:32:41,266
And, again, you can navigate


1160
00:32:41,266 --> 00:32:42,516
through the trace with those.


1161
00:32:43,476 --> 00:32:46,116
And we also have -- let me see


1162
00:32:46,116 --> 00:32:47,036
if I can get this back into


1163
00:32:47,096 --> 00:32:47,796
focus here.


1164
00:32:47,996 --> 00:32:50,846
We also have a summary for all


1165
00:32:50,846 --> 00:32:51,466
the downloads.


1166
00:32:51,536 --> 00:32:52,096
Very simple.


1167
00:32:52,506 --> 00:32:53,596
We just want to do a count and a


1168
00:32:53,596 --> 00:32:54,016
sum.


1169
00:32:54,226 --> 00:32:56,136
And then we also have this cool


1170
00:32:56,136 --> 00:32:57,266
thing called Timeslice.


1171
00:32:58,026 --> 00:32:59,806
And in a Timeslice view, what


1172
00:33:00,226 --> 00:33:01,746
we're trying to do is answer


1173
00:33:01,746 --> 00:33:02,716
that question I was asking


1174
00:33:02,716 --> 00:33:04,146
before of how many of these


1175
00:33:04,146 --> 00:33:05,636
things are actually running in


1176
00:33:05,636 --> 00:33:06,096
parallel?


1177
00:33:06,676 --> 00:33:07,656
Well, if you want to take a look


1178
00:33:07,656 --> 00:33:08,506
at the intervals running in


1179
00:33:08,506 --> 00:33:09,736
parallel, you just scrub the


1180
00:33:09,736 --> 00:33:11,876
inspection head over here


1181
00:33:11,876 --> 00:33:13,216
through time, and you can see


1182
00:33:13,216 --> 00:33:14,886
exactly what is intersecting


1183
00:33:15,276 --> 00:33:16,976
that inspection head at any


1184
00:33:16,976 --> 00:33:18,196
given point in time.


1185
00:33:18,706 --> 00:33:20,016
So it's a great and a different


1186
00:33:20,016 --> 00:33:21,556
way to look at your signpost


1187
00:33:21,556 --> 00:33:21,746
data.


1188
00:33:23,036 --> 00:33:24,556
Now if you are working with


1189
00:33:24,556 --> 00:33:26,056
others on a project or you're


1190
00:33:26,056 --> 00:33:26,776
part of the development


1191
00:33:26,776 --> 00:33:28,606
community, using a custom


1192
00:33:28,606 --> 00:33:29,646
instrument is a great way to


1193
00:33:29,646 --> 00:33:31,606
take the signpost data and


1194
00:33:31,606 --> 00:33:33,336
reshape it in a way that someone


1195
00:33:33,386 --> 00:33:35,286
else can use and interpret


1196
00:33:35,286 --> 00:33:36,126
without having to know the


1197
00:33:36,126 --> 00:33:37,956
details of how your code works


1198
00:33:37,956 --> 00:33:38,926
so they are a very important


1199
00:33:38,926 --> 00:33:39,216
feature.


1200
00:33:39,576 --> 00:33:42,746
Now the great news is that to


1201
00:33:42,746 --> 00:33:44,246
create an instrument like that,


1202
00:33:44,956 --> 00:33:46,926
the entire package definition is


1203
00:33:46,926 --> 00:33:51,636
about 115 lines of XML and so


1204
00:33:51,716 --> 00:33:53,386
custom instruments is very


1205
00:33:53,386 --> 00:33:55,236
expressive and very powerful but


1206
00:33:55,236 --> 00:33:56,506
also very easy.


1207
00:33:57,466 --> 00:33:59,876
And that is the conclusion of


1208
00:33:59,876 --> 00:34:00,226
our demo.


1209
00:34:01,516 --> 00:34:08,536
[ Applause ]


1210
00:34:09,036 --> 00:34:10,666
So in today's session, we took a


1211
00:34:10,666 --> 00:34:13,065
look at the signpost API, and we


1212
00:34:13,065 --> 00:34:14,545
showed you how to use it to


1213
00:34:14,896 --> 00:34:16,216
annotate interesting periods of


1214
00:34:16,216 --> 00:34:17,536
activity and intervals inside


1215
00:34:17,536 --> 00:34:18,235
your application.


1216
00:34:19,005 --> 00:34:20,126
We showed you how to collect


1217
00:34:20,126 --> 00:34:21,835
metadata and get that metadata


1218
00:34:22,076 --> 00:34:23,065
into Instruments for


1219
00:34:23,065 --> 00:34:24,826
visualization and analysis.


1220
00:34:25,406 --> 00:34:27,916
And we showed you how to combine


1221
00:34:28,246 --> 00:34:29,755
custom instruments in os


1222
00:34:29,755 --> 00:34:32,646
signpost to create a more


1223
00:34:32,786 --> 00:34:34,045
tailored presentation of your


1224
00:34:34,045 --> 00:34:34,856
signpost data.


1225
00:34:36,056 --> 00:34:38,626
Now all this really comes down


1226
00:34:38,686 --> 00:34:41,085
to us being able to give you the


1227
00:34:41,085 --> 00:34:42,346
kind of information that you


1228
00:34:42,346 --> 00:34:44,686
need to help you tune the


1229
00:34:44,686 --> 00:34:46,106
performance of your application.


1230
00:34:46,485 --> 00:34:47,856
And so we're really excited to


1231
00:34:47,856 --> 00:34:49,946
see how you use os signpost and


1232
00:34:49,946 --> 00:34:51,866
Instruments together to improve


1233
00:34:51,866 --> 00:34:53,076
the user experience of your


1234
00:34:53,076 --> 00:34:53,656
application.


1235
00:34:54,985 --> 00:34:56,576
That is the content for today.


1236
00:34:57,016 --> 00:34:58,856
For more information, you can


1237
00:34:58,856 --> 00:35:00,946
come see us in a lab, technology


1238
00:35:00,946 --> 00:35:03,546
lab 8 at 3:00 today.


1239
00:35:03,546 --> 00:35:05,896
And I also have session 410,


1240
00:35:05,896 --> 00:35:06,996
creating custom instruments


1241
00:35:07,076 --> 00:35:08,876
tomorrow where I'll be going


1242
00:35:08,876 --> 00:35:10,106
over the details of how custom


1243
00:35:10,106 --> 00:35:11,686
instruments works and show you


1244
00:35:11,686 --> 00:35:13,156
how we created our Trailblazer


1245
00:35:13,156 --> 00:35:14,836
networking instruments package.


1246
00:35:15,696 --> 00:35:16,386
Thank you very much.


1247
00:35:16,386 --> 00:35:16,996
Enjoy the rest of your


1248
00:35:16,996 --> 00:35:17,936
conference.


1249
00:35:18,516 --> 00:35:24,480
[ Applause ]

