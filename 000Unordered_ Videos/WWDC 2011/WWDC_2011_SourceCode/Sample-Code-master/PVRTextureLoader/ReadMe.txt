### PVRTextureLoader ###

===========================================================================
DESCRIPTION:

This application illustrates how to load a PVR texture file using the included PVRTexture class and then display it using OpenGL ES.

The sample image, encoded as an xcode project build phase, is rendered on a rotatable and scalable quad. Controls are provided for experimenting with various texture compression and filter settings.

Further details are given as comments in the code.

===========================================================================
BUILD REQUIREMENTS:

iOS 4.0 SDK

===========================================================================
RUNTIME REQUIREMENTS:

iPhone OS 3.2 or later

===========================================================================
PACKAGING LIST:

Classes/PVRTexture.h
Classes/PVRTexture.m
The PVRTexture class is responsible for loading the pvr files generated by texturetool. The class handles loading mipmapped and non-mipmapped pvr files.
The method calls to create a PVRTexture object will also generate a GL texture name and upload as many texture levels as are present.

Classes/EAGLView.h
Classes/EAGLView.m
The OpenGL ES code that is responsible for displaying the encoded pvr data.

Brick_mipmap_4.pvr
Brick_mipmap_2.pvr
Brick_4.pvr
Brick_2.pvr
These are the pvr files generated from the Brick.png image by the "Encode Images" build phase.

===========================================================================
CHANGES FROM PREVIOUS VERSIONS:

Version 1.5 
- Changed deployment target back to iPhone OS 3.2 and added CFBundleIconFiles in Info.plist.

Version 1.4
- Upgraded project to build with the iOS 4 SDK.

Version 1.3
- Modified the script so that it works regardless of where texturetool is installed.

Version 1.2
- Check for availablility of any GL extensions used. Disable UI if extensions aren't present.
- Set proper min filter param depending on if texture is going to be mipmapped or not. This provides a hint to GL in order to help decrease memory usage.
- Use calloc instead of malloc when allocating memory for use in texture generation. We need to guarantee that our memory is zero filled for the cases where the 
  dimensions of the cg image might be smaller than the cg bitmap context. Set the kCGBlendModeCopy flag since we don't care about the previous contents of memory.

Version 1.1
- Quote instances of $SRCROOT variable in the encode shell script to handle paths with spaces.

Version 1.0
- First version.

===========================================================================
Copyright (C) 2008-2010 Apple Inc. All rights reserved.
