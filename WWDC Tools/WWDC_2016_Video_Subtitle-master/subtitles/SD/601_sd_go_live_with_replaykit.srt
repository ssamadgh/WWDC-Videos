1
00:00:07,516 --> 00:00:17,500
[ Music ]


2
00:00:20,196 --> 00:00:20,856
>> Good morning.


3
00:00:21,356 --> 00:00:23,756
Welcome everyone to Go
Live with ReplayKit.


4
00:00:24,326 --> 00:00:25,926
In this session, we
are going to tell you


5
00:00:25,926 --> 00:00:28,226
about all the new features that
we've added to the framework.


6
00:00:29,006 --> 00:00:30,956
I am Ben Harry, a
software engineer


7
00:00:30,956 --> 00:00:32,786
on the Game Technologies
Team here at Apple.


8
00:00:33,326 --> 00:00:35,506
And later, you'll be
hearing from Edwin Iskander.


9
00:00:36,556 --> 00:00:39,776
Now we know people love
to record their gameplay


10
00:00:40,086 --> 00:00:42,036
and share those recordings
on social media.


11
00:00:43,196 --> 00:00:45,256
ReplayKit gives our
users those abilities


12
00:00:45,476 --> 00:00:47,876
with little effort required
from you, the developer.


13
00:00:49,716 --> 00:00:52,316
To get started today, I am going
to take a few minutes to talk


14
00:00:52,316 --> 00:00:54,746
about the existing features
that are offered with ReplayKit.


15
00:00:57,696 --> 00:00:59,116
ReplayKit provides the ability


16
00:00:59,116 --> 00:01:01,166
to record your app's
audio and visual content.


17
00:01:01,836 --> 00:01:04,406
In addition, you may
enable microphone recording.


18
00:01:05,036 --> 00:01:07,846
By doing so, your users can
provide voice commentary while


19
00:01:07,846 --> 00:01:08,416
playing their games.


20
00:01:09,376 --> 00:01:10,906
After a user trays a recording,


21
00:01:11,366 --> 00:01:12,946
they may share the
recording directly


22
00:01:12,946 --> 00:01:15,006
from their game using
the System Share sheet.


23
00:01:16,646 --> 00:01:19,576
ReplayKit has a simple API, and
as you're going to see today,


24
00:01:19,986 --> 00:01:21,726
a small amount of
code is required


25
00:01:21,726 --> 00:01:23,436
to bring these features
to your games.


26
00:01:24,046 --> 00:01:28,686
Moving along, ReplayKit will
generate HD-quality videos


27
00:01:29,036 --> 00:01:31,196
with little impact on
your game's performance,


28
00:01:31,316 --> 00:01:34,446
and uses a minimal amount of
power from the device's battery.


29
00:01:35,886 --> 00:01:39,556
Here at Apple, user privacy
is very important to us,


30
00:01:40,216 --> 00:01:42,356
so we have implemented
some privacy safeguards.


31
00:01:42,736 --> 00:01:46,386
For example, we present a user
prompt before recording begins,


32
00:01:46,936 --> 00:01:50,036
so user's can give permission
before recording their gameplay.


33
00:01:50,856 --> 00:01:53,756
Furthermore, recording
will exclude system UI,


34
00:01:53,756 --> 00:01:55,176
including notifications.


35
00:01:55,786 --> 00:01:58,306
Therefore, when you receive
a text message while you're


36
00:01:58,306 --> 00:02:01,066
playing a game, that message
is not going to be recorded.


37
00:02:03,186 --> 00:02:06,476
Finally, ReplayKit was
made available in iOS 9.


38
00:02:07,196 --> 00:02:08,806
So this is a list of
the current features


39
00:02:08,806 --> 00:02:10,126
that we offer with ReplayKit.


40
00:02:10,866 --> 00:02:14,426
Now, I am going to take a
minute to list the new features


41
00:02:14,426 --> 00:02:15,926
that have been added
to ReplayKit framework.


42
00:02:17,376 --> 00:02:20,506
First up, we are bringing
ReplayKit support to Apple TV.


43
00:02:21,296 --> 00:02:23,976
So now, you'll be able
to record your gameplay


44
00:02:23,976 --> 00:02:26,236
and share it directly
from your TV OS games.


45
00:02:27,076 --> 00:02:29,716
The next new feature we've
added is live broadcasting.


46
00:02:30,206 --> 00:02:33,496
Now, users will be able
to broadcast for gameplay


47
00:02:33,566 --> 00:02:36,326
in real-time to third
party broadcast services.


48
00:02:36,906 --> 00:02:40,686
And for our third and final
feature, we're adding support


49
00:02:40,876 --> 00:02:42,406
to record the Face Time camera.


50
00:02:43,256 --> 00:02:45,086
In addition, we've
made enhancements


51
00:02:45,296 --> 00:02:47,076
to the microphone recording API.


52
00:02:49,596 --> 00:02:51,716
So before I get into
ReplayKit and Apple TV,


53
00:02:51,826 --> 00:02:53,486
I'm going to take a minute
to give you an overview


54
00:02:53,486 --> 00:02:54,696
of the ReplayKit architecture.


55
00:02:55,426 --> 00:02:58,566
I want to show you how your app
uses the framework to interact


56
00:02:58,566 --> 00:03:00,826
with the operating system
to create a recording.


57
00:03:01,786 --> 00:03:05,126
So here we have your
application.


58
00:03:05,566 --> 00:03:07,856
Your application needs to
notify the operating system


59
00:03:07,856 --> 00:03:09,186
when it wants to
begin recording.


60
00:03:10,306 --> 00:03:12,856
So ReplayKit provides an
RPScreenRecorder class.


61
00:03:13,556 --> 00:03:15,346
You will tell this class
to start recording.


62
00:03:16,326 --> 00:03:19,056
At this moment, a message is
sent to the Replay Daemon.


63
00:03:19,436 --> 00:03:22,056
The Replay Daemon will start
writing your app's data


64
00:03:22,686 --> 00:03:24,026
to a movie file.


65
00:03:25,936 --> 00:03:27,526
When you tell the
RPScreenRecorder


66
00:03:27,526 --> 00:03:31,046
to stop recording, the Replay
Daemon will finish writing your


67
00:03:31,046 --> 00:03:34,096
movie, and now we have
a movie on the system.


68
00:03:34,236 --> 00:03:37,056
Now this movie needs to get
back up to your application


69
00:03:37,056 --> 00:03:41,466
so your users can preview
the recording they just made.


70
00:03:42,036 --> 00:03:46,226
To do so, we provide the
RPpreviewViewController.


71
00:03:46,936 --> 00:03:48,956
You present this view
controller in your game,


72
00:03:49,396 --> 00:03:51,056
so now your users
have an interface


73
00:03:51,056 --> 00:03:52,616
where they can preview,
they can edit


74
00:03:52,616 --> 00:03:54,906
and they can share the
video that they just made.


75
00:03:55,886 --> 00:04:00,476
As we just saw, we have
the RPScreenRecorder class.


76
00:04:01,086 --> 00:04:02,816
This is the class you
will use to start,


77
00:04:02,916 --> 00:04:04,766
stop and to discard recordings.


78
00:04:05,316 --> 00:04:07,386
You will also use it to
check the availability


79
00:04:07,386 --> 00:04:08,636
to record on the device.


80
00:04:09,646 --> 00:04:11,966
There is a delegate property
on the RPScreenRecorder,


81
00:04:12,086 --> 00:04:15,776
and it will notify you if the
availability to record changes.


82
00:04:16,516 --> 00:04:19,916
Also it will let you know of
recording stops due to an error.


83
00:04:20,846 --> 00:04:24,626
The second class I brought up
was the RPPreviewController.


84
00:04:24,996 --> 00:04:26,826
You present this view
controller in your game


85
00:04:27,166 --> 00:04:32,556
to give your users ability to
preview the recording on iOS,


86
00:04:32,556 --> 00:04:35,516
and to share that recording
directly from the game.


87
00:04:36,646 --> 00:04:38,676
We also have a delegate
method on this class,


88
00:04:38,726 --> 00:04:41,156
and this delegate will let you
know when the user is finished


89
00:04:41,156 --> 00:04:42,696
with the preview user interface.


90
00:04:43,546 --> 00:04:46,346
So this is the reflected
architecture


91
00:04:46,346 --> 00:04:49,076
and the classes you will use
to record and share content


92
00:04:49,076 --> 00:04:52,516
on both iOS and tvOS,
which now brings me


93
00:04:52,516 --> 00:04:53,856
to ReplayKit and Apple TV.


94
00:04:54,526 --> 00:04:57,966
And to begin I'm going
to show you a demo.


95
00:05:06,116 --> 00:05:08,016
So here I have a
game called Fox.


96
00:05:08,256 --> 00:05:11,186
Fox was developed
for WWDC, 2015.


97
00:05:11,186 --> 00:05:12,406
It was developed using SceneKit.


98
00:05:13,386 --> 00:05:15,506
You may also recognize it
because it is available


99
00:05:15,506 --> 00:05:17,196
as sample code on our
developer website.


100
00:05:18,216 --> 00:05:19,916
The goal of this game
is to walk on the level,


101
00:05:20,006 --> 00:05:21,826
and collect these flowers
like the one I just got.


102
00:05:21,826 --> 00:05:23,996
I'm going to make my
way through the level,


103
00:05:23,996 --> 00:05:25,556
and collect the flowers.


104
00:05:25,556 --> 00:05:27,556
There's three on the
level, and I got the first.


105
00:05:28,196 --> 00:05:30,206
You can optionally collect
these pearls along the way,


106
00:05:30,206 --> 00:05:32,446
but I'm just going to
focus on the flowers.


107
00:05:32,446 --> 00:05:32,976
I got two.


108
00:05:33,856 --> 00:05:36,646
I know the third flower is on
the top, and is in the middle,


109
00:05:36,856 --> 00:05:37,746
on the topo of the rock.


110
00:05:37,866 --> 00:05:43,066
So I'm over here, so
here I'm going to take,


111
00:05:43,066 --> 00:05:44,836
I'm going to bring
up my game menu,


112
00:05:45,966 --> 00:05:47,056
because I want to record this.


113
00:05:47,056 --> 00:05:48,486
There is an obstacle
at the head,


114
00:05:48,776 --> 00:05:50,626
and I've been practicing
this a lot this past week,


115
00:05:51,326 --> 00:05:53,396
so I wanted to share this
with my friends to show them


116
00:05:53,476 --> 00:05:56,206
that I can get through
this most of the time now.


117
00:05:56,206 --> 00:05:58,476
So I'm going to start
my recording,


118
00:05:58,986 --> 00:06:01,076
and here is the consent
prompt I mentioned.


119
00:06:01,616 --> 00:06:02,906
And I am going to
give permission.


120
00:06:04,626 --> 00:06:05,446
So now I'm recording.


121
00:06:06,856 --> 00:06:08,136
So notice the recording
indicator


122
00:06:08,136 --> 00:06:09,186
at the top of the screen.


123
00:06:10,836 --> 00:06:12,916
This lets me know that our
recording is taking place.


124
00:06:12,916 --> 00:06:14,176
Okay, so I made it
through the flier.


125
00:06:14,756 --> 00:06:16,946
So all I have to do now
is make my way to the end,


126
00:06:17,266 --> 00:06:20,576
to do the final flower,
so I can finish the level,


127
00:06:21,146 --> 00:06:22,876
and ultimately finish
the recording.


128
00:06:26,666 --> 00:06:27,456
Okay so that's it.


129
00:06:28,296 --> 00:06:29,456
I'm going to stop my recording.


130
00:06:30,436 --> 00:06:32,906
Now, once I'm stopped, I have
the option where I can preview


131
00:06:32,906 --> 00:06:34,686
or share the video I
just made, so I'm going


132
00:06:34,686 --> 00:06:35,656
to start off by previewing.


133
00:06:36,646 --> 00:06:38,196
So we have a video playback,


134
00:06:38,196 --> 00:06:40,546
and we have a timeline we can
scrub forward and backward.


135
00:06:41,386 --> 00:06:42,726
I'm just going to
start playing it.


136
00:06:44,906 --> 00:06:47,146
Notice here that recording
indicator is not included


137
00:06:47,146 --> 00:06:47,746
in the recording.


138
00:06:47,746 --> 00:06:49,636
I'm going to show you
how this was accomplished


139
00:06:49,636 --> 00:06:50,396
in just a few minutes.


140
00:06:51,556 --> 00:06:54,196
So I have a video, I'm happy
with how it turned out.


141
00:06:54,786 --> 00:06:55,666
So now I want to share it.


142
00:06:55,666 --> 00:06:58,026
So I'm going to go over
here and select share.


143
00:07:00,136 --> 00:07:02,066
And now we are presented
with an AirDrop interface.


144
00:07:03,036 --> 00:07:04,056
So I'm going to grab my phone.


145
00:07:08,536 --> 00:07:09,846
I'm going to select my phone.


146
00:07:15,216 --> 00:07:19,186
Anyway, when I do accept
the file on my phone


147
00:07:19,506 --> 00:07:21,886
and the file is transferred,
once it's on my phone,


148
00:07:21,886 --> 00:07:24,676
I do have the ability where
I can preview the video,


149
00:07:24,676 --> 00:07:27,606
I can edit and trim the
video if I wanted to,


150
00:07:27,606 --> 00:07:29,976
and finally I can share it to
my favorite social media sites.


151
00:07:36,326 --> 00:07:38,556
So that was how ReplayKit
looks on Apple TV.


152
00:07:39,886 --> 00:07:43,016
I now want to take a few moments
to call out four main points


153
00:07:43,016 --> 00:07:46,306
from the demo, and then I'm
going to show you the code


154
00:07:46,306 --> 00:07:48,766
that corresponds with each
of those points in a minute.


155
00:07:49,326 --> 00:07:50,276
So first I'm going to begin.


156
00:07:50,276 --> 00:07:51,506
I'm going to have
the end game menu


157
00:07:51,506 --> 00:07:52,596
where I started my recording.


158
00:07:53,186 --> 00:07:56,766
Then we have the gameplay where
we have the recording indicator


159
00:07:56,766 --> 00:08:01,316
on screen, back to the game
menu to stop the recording,


160
00:08:02,556 --> 00:08:04,646
and finally when I stop the
recording I have the options


161
00:08:04,646 --> 00:08:07,136
to preview or share
the recorded video.


162
00:08:08,206 --> 00:08:10,026
So I'm going to walk
through each one of these,


163
00:08:10,026 --> 00:08:11,946
and show you the code that
corresponds to each one.


164
00:08:12,606 --> 00:08:13,876
We began or start our recording.


165
00:08:14,896 --> 00:08:16,996
So when I press my
start recording button,


166
00:08:16,996 --> 00:08:18,916
first I'm going to grab
the shared instance


167
00:08:18,916 --> 00:08:20,086
of the RPScreeningRecorder.


168
00:08:20,666 --> 00:08:23,386
And I simply am going to
tell it to start recording.


169
00:08:24,066 --> 00:08:24,946
Now once I'm recording,


170
00:08:25,026 --> 00:08:26,666
I'm going to present
the indicator view.


171
00:08:27,476 --> 00:08:31,256
As I mentioned in the video,


172
00:08:31,256 --> 00:08:33,385
the indicator was not
included in the recording.


173
00:08:33,775 --> 00:08:36,706
This is because ReplayKit will
only record the application's


174
00:08:36,706 --> 00:08:37,405
main window.


175
00:08:37,785 --> 00:08:40,756
Therefore, I'm going to
create a new UI window.


176
00:08:41,466 --> 00:08:43,346
And then the indicator view.


177
00:08:43,346 --> 00:08:45,876
The indicator view will be
your responsibility to create.


178
00:08:45,876 --> 00:08:48,896
This is because now you can make
it match the style of your game.


179
00:08:49,356 --> 00:08:50,376
So we have an indicator view,


180
00:08:50,376 --> 00:08:52,886
I'm going to instantiate an
instance of that indicator view,


181
00:08:53,186 --> 00:08:56,116
and simply add it as a sub view
to that main window I created,


182
00:08:56,116 --> 00:08:58,106
to the window I created above.


183
00:08:58,626 --> 00:09:00,276
Now the indicator
view is on screen,


184
00:09:01,186 --> 00:09:02,166
and we know we're recording.


185
00:09:02,356 --> 00:09:06,886
When we are done recording, we
press the stop record button.


186
00:09:07,316 --> 00:09:09,166
Again, I'm going to
grab the shared instance


187
00:09:09,166 --> 00:09:10,346
of the RPScreenRecorder.


188
00:09:11,616 --> 00:09:14,166
Now notice we return the
preview view controller,


189
00:09:14,166 --> 00:09:17,216
which is the RPPreviewController
class I mentioned earlier.


190
00:09:17,906 --> 00:09:20,116
I'm going to hide
my indicator view.


191
00:09:20,336 --> 00:09:23,156
And here it's important that
we hold onto a reference


192
00:09:23,156 --> 00:09:26,196
of the preview view controller,
because we are going to use it


193
00:09:26,196 --> 00:09:28,736
to present in the next
step for previewing


194
00:09:28,736 --> 00:09:29,846
and sharing the video.


195
00:09:30,976 --> 00:09:34,996
Finally I'm going
to set the delegate.


196
00:09:34,996 --> 00:09:37,046
So we saw that we have
one preview controller,


197
00:09:37,046 --> 00:09:38,116
but we have two interfaces,


198
00:09:38,116 --> 00:09:39,756
one for previewing,
and one for sharing.


199
00:09:40,866 --> 00:09:43,626
So at Apple TV, we have
introduced a new mode property.


200
00:09:44,426 --> 00:09:47,586
When we want a preview, we
simply set the mode to preview,


201
00:09:47,586 --> 00:09:51,136
and then present
the view controller.


202
00:09:51,206 --> 00:09:54,486
Similarly, to share, we
have the mode property.


203
00:09:54,486 --> 00:09:58,306
We are going to set the
mode to share, and again,


204
00:09:58,306 --> 00:09:59,266
present the view controller.


205
00:09:59,976 --> 00:10:02,116
Now we will be presented
with the AirDrop interface.


206
00:10:03,956 --> 00:10:07,546
In both cases, when the user
is done with each interface,


207
00:10:07,696 --> 00:10:09,526
we have a delegate method
that is going to be called.


208
00:10:10,086 --> 00:10:11,536
Preview Controller did finish.


209
00:10:12,736 --> 00:10:14,596
It's important when this
is called that you just--


210
00:10:15,086 --> 00:10:16,866
that you dismiss the
preview controller,


211
00:10:16,866 --> 00:10:19,906
since your app was
responsible for presenting it.


212
00:10:20,526 --> 00:10:24,166
Finally, when we are done
with the recording and we know


213
00:10:24,166 --> 00:10:26,706
that we no longer need
it, it's good practice


214
00:10:26,756 --> 00:10:27,866
to discard that recording.


215
00:10:28,456 --> 00:10:31,606
Now ReplayKit will automatically
discard the previous recording


216
00:10:31,606 --> 00:10:32,906
when a new recording begins.


217
00:10:33,566 --> 00:10:36,146
This is because one recording
is allowed at a time per app.


218
00:10:37,406 --> 00:10:39,416
You could also explicitly
discard the recording


219
00:10:39,706 --> 00:10:41,806
when you know that the preview
will no longer be available.


220
00:10:42,326 --> 00:10:43,926
For example, maybe at
the end of a level,


221
00:10:43,926 --> 00:10:45,946
there could be no
more opportunity


222
00:10:45,946 --> 00:10:46,796
to present a preview.


223
00:10:47,296 --> 00:10:49,146
So now you can explicitly
discard it


224
00:10:49,146 --> 00:10:52,056
by calling RPScreenRecorder's
discard recording method.


225
00:10:54,266 --> 00:10:57,076
Through these last few slides,
I've shown you the small amount


226
00:10:57,076 --> 00:10:58,146
of code that is required


227
00:10:58,196 --> 00:11:00,956
to bring these features
to your tvOS games.


228
00:11:01,896 --> 00:11:04,626
I encourage you all to add
ReplayKit to your tvOS apps,


229
00:11:05,016 --> 00:11:07,546
and also to your iOS apps, if
you have not done so already.


230
00:11:08,206 --> 00:11:11,766
So now, let me take a minute


231
00:11:11,766 --> 00:11:13,396
to summarize ReplayKit
and Apple TV.


232
00:11:14,426 --> 00:11:15,876
Now, with ReplayKit
and Apple TV,


233
00:11:15,876 --> 00:11:18,626
you can record your app
audio and video content.


234
00:11:20,046 --> 00:11:23,366
Under Apple TV, the microphone
is reserved by the system,


235
00:11:23,896 --> 00:11:27,126
so you cannot provide voice
commentary on the platform.


236
00:11:27,816 --> 00:11:30,286
But you can allow users
to preview their videos,


237
00:11:30,286 --> 00:11:32,586
and they can share their videos
directly from their games.


238
00:11:34,236 --> 00:11:36,866
As you saw, we have
a very simple API.


239
00:11:37,186 --> 00:11:40,006
In fact, it's the same
API that we offer for iOS.


240
00:11:41,326 --> 00:11:43,106
All these features
for Apple TV are going


241
00:11:43,106 --> 00:11:45,336
to be available new in tvOS 10.


242
00:11:46,366 --> 00:11:48,626
So that was ReplayKit
and Apple TV.


243
00:11:49,416 --> 00:11:52,216
So now it's time to move on to
the second of our new features,


244
00:11:52,216 --> 00:11:54,426
which I personally am
very excited about.


245
00:11:55,066 --> 00:11:57,966
So, at this time, please welcome
Edwin Iskandar up to the stage.


246
00:11:58,516 --> 00:12:02,616
[ Applause ]


247
00:12:03,116 --> 00:12:04,716
>> Alright, thanks guys.


248
00:12:04,966 --> 00:12:06,616
Hey, how is everyone doing?


249
00:12:06,616 --> 00:12:07,786
My name is Edwin Iskandar.


250
00:12:07,846 --> 00:12:08,896
I am a Software Engineer


251
00:12:09,016 --> 00:12:10,816
on the Game Technologies
Team here at Apple.


252
00:12:11,406 --> 00:12:14,156
And like Ben, I'm super
excited to talk to you guys


253
00:12:14,156 --> 00:12:16,676
about our next feature,
Live Broadcast.


254
00:12:17,086 --> 00:12:20,656
So with Live Broadcast,
players will be able


255
00:12:20,656 --> 00:12:23,446
to broadcast gameplay to
third party streaming services


256
00:12:23,736 --> 00:12:26,556
directly from their
iOS or tvOS device.


257
00:12:27,426 --> 00:12:29,726
So this is really exciting,
because this is the first time


258
00:12:29,726 --> 00:12:32,496
that this will be possible
without any additional hardware


259
00:12:32,956 --> 00:12:36,636
or third party SDKs, will
also be allowing your users


260
00:12:36,636 --> 00:12:38,926
to take advantage of their
device's powerful Face Time


261
00:12:38,926 --> 00:12:42,256
camera and microphone to
provide rich commentary all


262
00:12:42,256 --> 00:12:42,876
in real-time.


263
00:12:43,846 --> 00:12:46,436
And finally, we are going to
do this all securely and ensure


264
00:12:46,436 --> 00:12:49,676
that all audio and video data
is only accessible to the system


265
00:12:50,236 --> 00:12:51,296
and the broadcast service.


266
00:12:51,736 --> 00:12:55,026
Alright, so to illustrate how
this works, we've been working


267
00:12:55,026 --> 00:12:57,646
with flair games to implement
the broadcast feature,


268
00:12:57,676 --> 00:12:59,756
and the flagship
game, Olympus Rising.


269
00:13:00,226 --> 00:13:01,436
So it's a really awesome game.


270
00:13:01,436 --> 00:13:03,246
It's available in
the app store today.


271
00:13:03,346 --> 00:13:05,426
And it has this unique
blend of strategy,


272
00:13:05,656 --> 00:13:07,016
RPG and action elements.


273
00:13:07,956 --> 00:13:10,406
Okay, now that we have a
game to broadcast from,


274
00:13:10,726 --> 00:13:12,496
we also need somewhere
to broadcast to.


275
00:13:13,856 --> 00:13:17,086
So we've also been working with
Mob Crush, a broadcast service


276
00:13:17,086 --> 00:13:18,686
that specializes
in mobile games.


277
00:13:19,896 --> 00:13:21,206
Alright, so now that
we have a game


278
00:13:21,296 --> 00:13:22,956
and a service, we're
ready to roll.


279
00:13:23,276 --> 00:13:24,246
So let's see this in action.


280
00:13:25,736 --> 00:13:27,216
Alright so in Olympus Rising,


281
00:13:27,216 --> 00:13:29,696
the Flair developers have
implemented an end game button


282
00:13:29,696 --> 00:13:30,866
to start broadcasting.


283
00:13:31,086 --> 00:13:33,786
To initiate a broadcast,
the user taps this button,


284
00:13:33,896 --> 00:13:36,636
and are pesented with
broadcast services


285
00:13:36,636 --> 00:13:38,486
that they have pre-installed
on their device.


286
00:13:38,946 --> 00:13:40,176
In this particular example,


287
00:13:40,176 --> 00:13:41,816
the user has installed
the Mob Crush app,


288
00:13:42,296 --> 00:13:43,306
so it appears on this list.


289
00:13:43,346 --> 00:13:47,516
So at this point, the user
taps on the Mob Crush icon,


290
00:13:47,936 --> 00:13:49,506
and they are presented
with Mob Crush's UI


291
00:13:49,506 --> 00:13:50,786
to set up the broadcast.


292
00:13:52,096 --> 00:13:55,146
The user then goes ahead and
adds a title for the broadcast,


293
00:13:56,146 --> 00:13:57,916
and once they're done,
they simply press


294
00:13:57,916 --> 00:14:01,646
on the start broadcast button,
which returns to the game,


295
00:14:01,916 --> 00:14:03,226
which then presents a countdown,


296
00:14:03,596 --> 00:14:06,396
so that the player can get
ready, and finally, go live.


297
00:14:06,866 --> 00:14:10,746
And now that they're live,
and the user is playing,


298
00:14:10,746 --> 00:14:13,426
video and audio data is streamed
to the broadcast service.


299
00:14:13,796 --> 00:14:16,456
Spectators all around the world
can now launch the Mob Crush app


300
00:14:16,656 --> 00:14:19,836
from their device, and watch
the gameplay in near real time.


301
00:14:20,566 --> 00:14:21,576
Within the Mob Crush app,


302
00:14:21,576 --> 00:14:24,116
spectators can also discuss
the gameplay as they watch.


303
00:14:24,436 --> 00:14:27,806
And even cooler, broadcasters
can even be instantly notified


304
00:14:28,146 --> 00:14:29,696
when this happens while
playing their game.


305
00:14:30,846 --> 00:14:32,026
So it's just like in sports,


306
00:14:32,116 --> 00:14:33,386
there is something
really special


307
00:14:33,386 --> 00:14:34,956
about watching an event live.


308
00:14:35,786 --> 00:14:38,176
Now, this will be
possible natively with iOS


309
00:14:38,476 --> 00:14:39,976
and tvOS games as well.


310
00:14:44,056 --> 00:14:45,746
Alright so now that we've
seen the entire flow,


311
00:14:45,926 --> 00:14:48,266
as a game developer, you're
probably wondering what it takes


312
00:14:48,266 --> 00:14:49,736
to implement this
feature in your games?


313
00:14:49,936 --> 00:14:52,636
Here is the player
flow broken down.


314
00:14:53,186 --> 00:14:55,026
As you can see, there
are many steps.


315
00:14:55,376 --> 00:14:58,786
Initiating the broadcast,
selecting a broadcast service,


316
00:14:59,386 --> 00:15:03,146
setting up the broadcast,
starting


317
00:15:03,146 --> 00:15:06,016
and stopping the broadcast,
indicating a broadcast is


318
00:15:06,016 --> 00:15:08,966
in progress, and also uploading
that video and audio data


319
00:15:08,966 --> 00:15:10,016
to the back-end servers.


320
00:15:10,766 --> 00:15:12,586
So this might look a little
bit daunting at first,


321
00:15:12,886 --> 00:15:15,246
but the good news for
game developers is three


322
00:15:15,246 --> 00:15:16,856
of these steps are
handled by ReplayKit


323
00:15:17,126 --> 00:15:19,106
and the broadcast service.


324
00:15:24,646 --> 00:15:26,906
So let's take a look at the
code for each of these steps.


325
00:15:27,286 --> 00:15:29,676
So to initiate a
broadcast programmatically,


326
00:15:30,046 --> 00:15:32,416
we use a new class
called RPBroadcastActivity


327
00:15:32,416 --> 00:15:34,506
ViewController, and
call its load method


328
00:15:34,506 --> 00:15:35,446
to get an instance of it.


329
00:15:36,266 --> 00:15:39,386
We then simply present it as you
would any UI view controller,


330
00:15:40,116 --> 00:15:41,646
which will then present
the user with a list


331
00:15:41,646 --> 00:15:43,926
of broadcast services, and
ultimately allow the user


332
00:15:44,146 --> 00:15:45,166
to set up the broadcast.


333
00:15:46,306 --> 00:15:47,566
Just before we do that, though,


334
00:15:47,646 --> 00:15:49,566
we also set the
ActivityViewController's


335
00:15:49,706 --> 00:15:50,376
delegate method.


336
00:15:50,416 --> 00:15:53,596
Because we want to be notified
when the setup is complete.


337
00:15:55,436 --> 00:15:57,536
At this point, the user
can select the service


338
00:15:57,536 --> 00:15:59,916
to broadcast to, sets
up the broadcast,


339
00:16:00,096 --> 00:16:01,606
and once we you done setting up,


340
00:16:02,176 --> 00:16:04,346
the activity view controller's
delegate method is fired,


341
00:16:05,286 --> 00:16:07,376
and this delegate method
is supplied an incidence


342
00:16:07,376 --> 00:16:10,206
of another new class,
RPBroadcastController,


343
00:16:10,606 --> 00:16:12,316
which allows us to
start a broadcast.


344
00:16:12,996 --> 00:16:15,006
But before we do that,
though, we also want


345
00:16:15,006 --> 00:16:17,506
to dismiss the
ActivityViewController,


346
00:16:17,886 --> 00:16:19,506
since we are the ones
that presented it.


347
00:16:20,166 --> 00:16:21,816
Start our in game
countdown timer,


348
00:16:22,606 --> 00:16:24,246
and when the countdown
timer ends,


349
00:16:24,856 --> 00:16:28,256
we finally start the broadcast
by calling Start Broadcast


350
00:16:28,446 --> 00:16:32,266
on the new RPBroadcastController
instance, that was passed in.


351
00:16:32,696 --> 00:16:35,156
And now we are live.


352
00:16:35,576 --> 00:16:36,946
And since we're live
broadcasting,


353
00:16:37,266 --> 00:16:39,196
we need to clearly
indicate this to the user.


354
00:16:39,896 --> 00:16:41,696
So Olympus Rising
does this very well


355
00:16:42,066 --> 00:16:43,566
by animating the
broadcast button.


356
00:16:44,146 --> 00:16:46,666
Since the game has
fairly complex controls,


357
00:16:46,666 --> 00:16:48,996
they're reusing the button
UI to also indicate an


358
00:16:48,996 --> 00:16:50,206
in progress broadcast,


359
00:16:50,606 --> 00:16:52,276
maximizing the available
screen space.


360
00:16:53,346 --> 00:16:55,946
Something to note is that the
indicator is strictly required


361
00:16:55,946 --> 00:16:58,966
during broadcasting and will
be enforced during app review


362
00:17:00,296 --> 00:17:01,596
before you add this
to your games.


363
00:17:01,596 --> 00:17:05,326
So programmatically check
if broadcast is in progress,


364
00:17:05,496 --> 00:17:07,506
simply query is broadcasting
prompt


365
00:17:07,506 --> 00:17:08,636
of the broadcast controller.


366
00:17:09,435 --> 00:17:11,965
You can use the value of
this property to start


367
00:17:12,326 --> 00:17:14,776
or stop animating
your indicator UI.


368
00:17:16,576 --> 00:17:18,695
To allow users to
finish broadcasting,


369
00:17:18,816 --> 00:17:21,215
the Flair developers have
implemented a fly out UI


370
00:17:21,215 --> 00:17:23,886
that reveals a sub menu
which includes a stop button.


371
00:17:24,736 --> 00:17:26,386
When the player presses
on the stop button,


372
00:17:27,136 --> 00:17:30,366
we simply call finish
broadcast on the controller.


373
00:17:31,426 --> 00:17:33,666
When broadcasting is
finished, we update our UI.


374
00:17:33,666 --> 00:17:36,846
Alright, now that we
covered the basic flow,


375
00:17:36,996 --> 00:17:39,696
let's look at a few more
details, like error handling.


376
00:17:41,656 --> 00:17:43,956
So since there are a lot of
moving parts to this feature,


377
00:17:44,146 --> 00:17:45,726
it's possible that
things could go wrong.


378
00:17:45,726 --> 00:17:47,936
So it is important to
handle this gracefully.


379
00:17:48,546 --> 00:17:51,586
And so let's take a look at how
we do this during a broadcast.


380
00:17:52,716 --> 00:17:54,586
To handle errors,
simply set the delegate


381
00:17:54,586 --> 00:17:55,786
to the broadcast controller.


382
00:17:55,866 --> 00:17:59,736
Once set, your delegate
will now have its did finish


383
00:17:59,736 --> 00:18:03,926
with error method called
and when this is triggered,


384
00:18:03,926 --> 00:18:05,496
you should let the
user know about it


385
00:18:05,596 --> 00:18:06,976
and update any necessary UI.


386
00:18:07,626 --> 00:18:10,816
So now another detail
to consider is


387
00:18:10,816 --> 00:18:12,246
when the user backgrounds
the app,


388
00:18:12,246 --> 00:18:14,606
or the app is interrupted
during a broadcast,


389
00:18:14,936 --> 00:18:16,546
like when receiving a
phone call, or example.


390
00:18:16,586 --> 00:18:19,616
So when the application
goes to the background,


391
00:18:19,616 --> 00:18:21,996
ReplayKit will automatically
pause the broadcast.


392
00:18:21,996 --> 00:18:24,286
So in this particular example,


393
00:18:24,286 --> 00:18:26,476
when the application is
reactivated and comes back


394
00:18:26,476 --> 00:18:29,256
to the foreground, we prompt
the user and ask if they would


395
00:18:29,256 --> 00:18:30,516
like to resume the broadcast.


396
00:18:30,676 --> 00:18:33,506
If the user wants
to resume, call,


397
00:18:33,506 --> 00:18:35,856
the resume broadcast
method, if they don't,


398
00:18:36,086 --> 00:18:38,216
simply call the finish
broadcast method.


399
00:18:38,466 --> 00:18:40,456
And that's it.


400
00:18:40,756 --> 00:18:43,186
For the entire flow, the game
developer needs to only interact


401
00:18:43,186 --> 00:18:45,196
with two classes,
and its delegates.


402
00:18:45,566 --> 00:18:47,466
RPBroadcastActivity
ViewController,


403
00:18:47,916 --> 00:18:50,276
to present broadcast services,
and allow users to set


404
00:18:50,276 --> 00:18:53,796
up a broadcast, and
RPBroadcastController to start,


405
00:18:53,886 --> 00:18:56,086
pause, resume and
finish a broadcast.


406
00:18:57,156 --> 00:18:59,866
As you can see, it couldn't
be easier to add broadcasting


407
00:18:59,866 --> 00:19:01,796
into your games, and
I urge you to do so,


408
00:19:01,796 --> 00:19:03,456
because the benefits are huge.


409
00:19:03,716 --> 00:19:05,856
There is really no better
way to spread the word,


410
00:19:06,466 --> 00:19:07,986
increase player engagement


411
00:19:08,256 --> 00:19:10,536
and even build a
community around your games.


412
00:19:10,856 --> 00:19:14,636
So that covers game
implementation,


413
00:19:14,806 --> 00:19:16,436
but what about the
broadcast services


414
00:19:16,536 --> 00:19:18,716
that players are streaming
to, like Mob Crush?


415
00:19:18,936 --> 00:19:21,466
Let's take a moment
to talk briefly


416
00:19:21,466 --> 00:19:23,466
about what those services
are responsible for.


417
00:19:24,186 --> 00:19:25,966
So for all the game
developers in the audience,


418
00:19:26,106 --> 00:19:28,796
or watching online, I just
want to make it extra clear


419
00:19:28,966 --> 00:19:29,836
that the topics discussed


420
00:19:29,836 --> 00:19:32,386
in the next section are
not your responsibility


421
00:19:32,386 --> 00:19:35,876
to implement in your games.


422
00:19:35,876 --> 00:19:37,376
So let's go back to
that flow diagram.


423
00:19:37,996 --> 00:19:39,476
We've seen that the
gamer is responsible


424
00:19:39,476 --> 00:19:42,676
for initiating the
broadcast, and controlling


425
00:19:42,676 --> 00:19:44,216
when to start and
stop a broadcast.


426
00:19:44,716 --> 00:19:45,796
We have also seen that the UI


427
00:19:46,046 --> 00:19:47,846
for broadcast selection
is taken care


428
00:19:47,846 --> 00:19:50,366
of by ReplayKit's
BroadcastActivityViewController.


429
00:19:51,306 --> 00:19:53,136
So this leaves us with
two remaining tasks.


430
00:19:53,926 --> 00:19:57,626
Setting up the broadcast, and
uploading video and audio data


431
00:19:57,626 --> 00:19:58,616
to the back-up servers.


432
00:19:59,096 --> 00:20:02,586
So to allow broadcast services
to accomplish these steps,


433
00:20:02,586 --> 00:20:03,746
we're introducing a new pair


434
00:20:03,746 --> 00:20:05,976
of app extensions
specifically for this feature.


435
00:20:07,296 --> 00:20:10,596
A UI extension, to allow the
user to set up a broadcast,


436
00:20:11,806 --> 00:20:13,686
and a non-UI extension
for processing


437
00:20:13,876 --> 00:20:16,606
and uploading the
audio and video data.


438
00:20:18,026 --> 00:20:20,306
For those of you
unfamiliar with extensions,


439
00:20:20,606 --> 00:20:23,896
they're target embedded in your
parent application and are a way


440
00:20:24,106 --> 00:20:26,446
to extend your app so that
you can execute alongside


441
00:20:26,446 --> 00:20:26,986
other apps.


442
00:20:27,876 --> 00:20:30,456
They run in a separate
process from your parent app,


443
00:20:30,886 --> 00:20:32,916
but can share data with
your parent application,


444
00:20:33,016 --> 00:20:34,386
which can be handy
or sharing things


445
00:20:34,386 --> 00:20:35,956
like authentication
data, for example.


446
00:20:37,156 --> 00:20:38,836
So one thing to keep
in mind, though,


447
00:20:39,206 --> 00:20:40,346
is that extensions are limited


448
00:20:40,346 --> 00:20:42,126
in resources compared
to applications.


449
00:20:42,126 --> 00:20:45,326
So try to refrain from doing
resource intensive tasks


450
00:20:45,326 --> 00:20:46,246
within them.


451
00:20:47,196 --> 00:20:49,086
We made it incredibly
easy to set


452
00:20:49,086 --> 00:20:50,916
up these extensions
via an exotemplate.


453
00:20:51,676 --> 00:20:55,056
These are available as new
targets for both iOS and tvOS.


454
00:20:56,326 --> 00:20:57,776
If created from this template,


455
00:20:57,776 --> 00:21:00,206
the extensions will be
pre-configured so they will show


456
00:21:00,206 --> 00:21:02,316
up in the broadcast
activity control list.


457
00:21:03,986 --> 00:21:06,516
So let's take a look at
the two new extensions


458
00:21:06,516 --> 00:21:08,136
that a broadcast service
needs to implement,


459
00:21:08,696 --> 00:21:10,726
starting with the
broadcast UI extension.


460
00:21:12,196 --> 00:21:14,876
UI extension has a few
key responsibilities,


461
00:21:15,106 --> 00:21:17,326
first it's responsible for
authenticating the user,


462
00:21:17,656 --> 00:21:19,826
and providing sign up if the
user is not yet registered.


463
00:21:20,686 --> 00:21:23,176
Ideally, this should all be
done within the extension


464
00:21:23,176 --> 00:21:25,326
so that the user's
experience is not interrupted.


465
00:21:25,956 --> 00:21:28,056
But is also perfectly
acceptable to link


466
00:21:28,056 --> 00:21:31,106
up to the parent application
as long as the user has a way


467
00:21:31,106 --> 00:21:34,376
to get back to the game.


468
00:21:34,376 --> 00:21:36,066
So, during sign up
it is also required


469
00:21:36,066 --> 00:21:37,606
that the user be shown
terms and conditions


470
00:21:37,606 --> 00:21:40,756
for using the service, and be
provided the ability to accept


471
00:21:40,956 --> 00:21:42,366
or decline those
terms and conditions.


472
00:21:43,766 --> 00:21:46,806
So as we saw earlier, UI
extension is also responsible


473
00:21:46,806 --> 00:21:48,646
for allowing the user to
set up their broadcasts,


474
00:21:48,646 --> 00:21:52,776
like adding a title to it,
and it can also allow the user


475
00:21:52,906 --> 00:21:54,556
to notify others
that broadcasting is


476
00:21:54,556 --> 00:21:56,416
about to begin via social media.


477
00:21:58,066 --> 00:22:00,616
Finally, its final
responsibility is notifying


478
00:22:00,616 --> 00:22:02,626
ReplayKit, and ultimately
the game


479
00:22:03,126 --> 00:22:04,736
that broadcast set
up is complete.


480
00:22:04,986 --> 00:22:09,396
So now that we looked at the
UI extension, let's switch


481
00:22:09,396 --> 00:22:10,586
over to the upload extension.


482
00:22:11,396 --> 00:22:14,166
It is responsible for
receiving and processing video


483
00:22:14,166 --> 00:22:17,036
and audio data, and
uploading that data


484
00:22:17,086 --> 00:22:18,036
to the back-end servers.


485
00:22:18,756 --> 00:22:21,706
So we are aware there are
many different implementations


486
00:22:21,706 --> 00:22:24,416
of data processing and
uploading to live streaming.


487
00:22:24,976 --> 00:22:27,566
So I won't be getting into any
specific implementations during


488
00:22:27,566 --> 00:22:28,106
this session.


489
00:22:28,546 --> 00:22:32,386
Instead, if you are a broadcast
service, please get in touch


490
00:22:32,556 --> 00:22:34,346
with us, so we can
work directly with you.


491
00:22:34,906 --> 00:22:36,386
This way we can implement
a solution


492
00:22:36,446 --> 00:22:38,756
that delivers the best
experience to our customers.


493
00:22:41,046 --> 00:22:43,806
So going back to our flow
diagram, now we have looked


494
00:22:43,806 --> 00:22:46,086
at the broadcast
set up and upload.


495
00:22:46,246 --> 00:22:49,576
We have gone through the
entire broadcast slow.


496
00:22:50,506 --> 00:22:52,786
And we've clearly broken
down the responsibilities


497
00:22:52,786 --> 00:22:56,666
of the game, ReplayKit
and the broadcast service,


498
00:22:57,096 --> 00:22:59,566
and that was live broadcasting.


499
00:23:00,246 --> 00:23:02,666
We really feel this is
a game changing feature


500
00:23:03,216 --> 00:23:05,026
that you players
are going to love,


501
00:23:05,296 --> 00:23:07,596
and for developers it is
going to introduce a new way


502
00:23:07,596 --> 00:23:10,586
for your fans to experience your
games, not only by playing them,


503
00:23:10,946 --> 00:23:12,006
but by watching them as well.


504
00:23:14,386 --> 00:23:16,086
So before we go, I'd like to end


505
00:23:16,086 --> 00:23:17,916
with a few new enhancements
we made to the API


506
00:23:18,536 --> 00:23:20,146
around commentary for iOS.


507
00:23:20,276 --> 00:23:21,956
Namely, support for the
front-facing camera,


508
00:23:22,516 --> 00:23:24,666
and also a new capability
for the microphone.


509
00:23:26,006 --> 00:23:28,586
So first up, we've added
Face Time camera support,


510
00:23:28,796 --> 00:23:30,866
making it incredibly convenient
for you to add picture


511
00:23:30,866 --> 00:23:32,916
in picture video
commentary to your games.


512
00:23:33,806 --> 00:23:36,406
Player reaction is
priceless, and always adds


513
00:23:36,406 --> 00:23:38,876
that special flavor to
recordings and broadcasts.


514
00:23:39,156 --> 00:23:41,266
So to enable this
in Olympus Rising,


515
00:23:41,346 --> 00:23:43,776
the Flair developers have added
a button to toggle the camera


516
00:23:43,776 --> 00:23:44,596
in their fly out menu.


517
00:23:45,386 --> 00:23:48,106
Pressing this button enables
the camera displaying a preview


518
00:23:48,106 --> 00:23:48,956
at the top left.


519
00:23:50,566 --> 00:23:53,376
So let's look at the API
they used to achieve this.


520
00:23:54,736 --> 00:23:55,986
To toggle the camera on,


521
00:23:55,986 --> 00:23:58,446
we simply set the
IsCameraEnabled property to true


522
00:23:58,446 --> 00:24:01,736
on RPScreenRecorder, this
turns on the camera hardware,


523
00:24:02,236 --> 00:24:05,186
and populates a new
RPScreenRecorder called


524
00:24:05,216 --> 00:24:07,806
CameraPreviewView, which
is a subclass of UI view.


525
00:24:08,096 --> 00:24:11,766
Since it is UI view, you can
simply add it as a sub view


526
00:24:11,766 --> 00:24:14,146
to your game view, and
even freely position it


527
00:24:14,146 --> 00:24:16,266
so that it does not
obstruct gameplay.


528
00:24:16,706 --> 00:24:19,956
You can even attach a Adjust
or Recognize It to it,


529
00:24:19,956 --> 00:24:21,996
and allows you to position
it manually if you wanted.


530
00:24:23,306 --> 00:24:24,826
So looking at the code here,


531
00:24:25,176 --> 00:24:27,256
we're simply setting the
IsCameraEnabled property


532
00:24:27,256 --> 00:24:29,036
to True during recording
of broadcast.


533
00:24:29,526 --> 00:24:36,796
Then we get a CameraPreviewView
instance, then set its geometry


534
00:24:36,846 --> 00:24:39,806
to position it, and
then simply add it


535
00:24:39,806 --> 00:24:41,326
as a sub view to your game view.


536
00:24:43,446 --> 00:24:45,916
So now that we have video
commentary, we also need


537
00:24:45,916 --> 00:24:46,906
to pair that with audio.


538
00:24:47,796 --> 00:24:50,876
So microphone recording was
included last year in iOS 9,


539
00:24:51,416 --> 00:24:52,726
but now we are including
the ability


540
00:24:52,726 --> 00:24:54,676
to mute it during
recordings as well.


541
00:24:55,266 --> 00:24:57,496
So we all know broadcasters
always have something


542
00:24:57,496 --> 00:24:58,376
interesting to say,


543
00:24:58,706 --> 00:25:00,546
but sometimes even
they need a break.


544
00:25:01,866 --> 00:25:03,516
So Olympus Rising
makes this really easy


545
00:25:03,516 --> 00:25:05,936
by including a microphone
toggle in their fly out menu.


546
00:25:07,406 --> 00:25:08,576
Implementing the action


547
00:25:08,636 --> 00:25:10,716
to microphone toggle
couldn't be simpler.


548
00:25:10,966 --> 00:25:13,436
The existing IsMicrophoneEnabled
property


549
00:25:13,706 --> 00:25:16,576
on RPScreenRecorder can
be set to true if you want


550
00:25:16,576 --> 00:25:19,786
to enable the microphone, and
false when you want to mute it.


551
00:25:20,906 --> 00:25:23,236
Again this can all be
done during a broadcast


552
00:25:23,306 --> 00:25:23,966
or recording session.


553
00:25:27,516 --> 00:25:28,966
Alright so that concludes
our session,


554
00:25:29,056 --> 00:25:30,496
and I really hope
you enjoyed it.


555
00:25:30,966 --> 00:25:33,636
With the powerful new broadcast
feature and now support


556
00:25:33,686 --> 00:25:36,006
for Apple TV, we
can't wait to play


557
00:25:36,416 --> 00:25:40,806
and watch your games live
on both iOS and tvOS.


558
00:25:41,326 --> 00:25:44,356
For more information,
visit Developer.apple.com,


559
00:25:44,356 --> 00:25:48,476
session 601, and during the
week, also make sure to check


560
00:25:48,476 --> 00:25:50,386
out our other game
technology sessions,


561
00:25:50,516 --> 00:25:53,956
what's new in GameplayKit,
SpriteKit and Game Center.


562
00:25:54,396 --> 00:25:56,546
Okay, so that's it for me.


563
00:25:56,776 --> 00:25:58,516
Thanks so much for attending
this session and I hope


564
00:25:58,516 --> 00:26:01,966
that you enjoy the rest
of your week here at WWDC.


565
00:26:02,076 --> 00:26:02,816
Thanks so much.


566
00:26:03,508 --> 00:26:05,508
[ Applause ]

