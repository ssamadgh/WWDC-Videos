1
00:00:20,516 --> 00:00:23,106
[ Applause ]


2
00:00:23,606 --> 00:00:24,436
>> BRIAN WEINSTEIN:
Hi, everyone.


3
00:00:24,776 --> 00:00:25,876
I'm Brian Weinstein.


4
00:00:25,996 --> 00:00:29,456
I'm a Safari and WebKit engineer
and here to talk to you guys


5
00:00:29,626 --> 00:00:32,066
about What's New In
Safari Extensibility.


6
00:00:33,386 --> 00:00:37,006
Today we are announcing a few
new ways you can extend Safari.


7
00:00:37,596 --> 00:00:42,196
You can write content
blockers for iOS and OS X.


8
00:00:42,196 --> 00:00:44,686
There are changes to the
Safari Extensions Gallery.


9
00:00:45,786 --> 00:00:48,336
And a new type of
app extension for you


10
00:00:48,336 --> 00:00:51,556
to put your content directly
in Safari's Shared Links.


11
00:00:53,216 --> 00:00:55,956
Let's get started and
jump right into talking


12
00:00:55,956 --> 00:00:56,976
about content blockers.


13
00:01:00,166 --> 00:01:01,876
Let's start with the
big question here:


14
00:01:02,176 --> 00:01:03,616
What are content blockers?


15
00:01:04,186 --> 00:01:08,686
Content blockers identify
subsets of content or resources


16
00:01:08,686 --> 00:01:12,036
on a page to not
show or even load.


17
00:01:12,576 --> 00:01:15,176
I'm sure you can all imagine
content you might want to block


18
00:01:15,176 --> 00:01:16,096
when browsing the Web.


19
00:01:17,466 --> 00:01:20,526
There are two main ways you
can block content using a


20
00:01:20,526 --> 00:01:21,396
content blocker.


21
00:01:21,926 --> 00:01:25,396
You can hide elements on a
page or you can block resources


22
00:01:25,396 --> 00:01:26,516
from loading altogether.


23
00:01:26,836 --> 00:01:29,226
You have been able
to do this for awhile


24
00:01:29,396 --> 00:01:32,706
with Safari extensions on OS
X, but today we are bringing


25
00:01:32,706 --> 00:01:34,206
that capability to iOS.


26
00:01:35,046 --> 00:01:38,586
Apps will tell Safari the
content they want to block ahead


27
00:01:38,586 --> 00:01:42,016
of time instead of
Safari consulting


28
00:01:42,016 --> 00:01:44,946
with the app during the
actual loading process.


29
00:01:45,366 --> 00:01:48,106
This new model is very
fast and efficient


30
00:01:48,386 --> 00:01:50,376
because Safari doesn't
have to consult


31
00:01:50,576 --> 00:01:52,216
with the app during loading,


32
00:01:52,586 --> 00:01:56,156
and the content blockers
are compiled into byte code


33
00:01:56,306 --> 00:01:58,296
that can be evaluated
very efficiently.


34
00:01:58,846 --> 00:02:02,486
Additionally this new model is
great for your user's privacy


35
00:02:02,746 --> 00:02:05,986
because content blockers have
no knowledge of the browsing


36
00:02:06,096 --> 00:02:07,356
that its users are doing.


37
00:02:08,746 --> 00:02:12,116
And to get started creating a
content blocker you will create


38
00:02:12,116 --> 00:02:16,596
an app extension on iOS
that will return a list,


39
00:02:16,596 --> 00:02:18,686
a JSON string containing
the list


40
00:02:18,686 --> 00:02:21,956
of rules describing the
content that you want to block.


41
00:02:23,326 --> 00:02:27,236
So there's this website I go to
regularly where the author talks


42
00:02:27,236 --> 00:02:29,106
about different golf
courses he's played


43
00:02:29,356 --> 00:02:30,996
and posts some beautiful
pictures.


44
00:02:31,536 --> 00:02:34,586
However, there are a few things
that annoy me about this site.


45
00:02:35,096 --> 00:02:36,746
I would like to write
a content blocker


46
00:02:37,046 --> 00:02:38,746
to block the content
that bothered me.


47
00:02:39,256 --> 00:02:41,726
The most obvious
annoyance is this list


48
00:02:41,726 --> 00:02:43,286
of click bait links on the left.


49
00:02:44,816 --> 00:02:47,826
They even follow me around
on the page when I scroll.


50
00:02:48,166 --> 00:02:50,496
So let's write a rule that
will hide this element.


51
00:02:53,356 --> 00:02:56,616
So we get started by seeing
which element we should hide.


52
00:02:56,946 --> 00:03:00,436
Looking at web inspector we see
there's a div with ID leaks.


53
00:03:00,436 --> 00:03:03,296
When that is selected
in web inspector,


54
00:03:04,106 --> 00:03:10,186
we actually get an overlay
on the device itself showing


55
00:03:10,186 --> 00:03:12,846
that this is the correct
element that we want to hide.


56
00:03:13,366 --> 00:03:15,906
So now that we know the
element we want to hide,


57
00:03:16,246 --> 00:03:17,676
let's write a rule to do it.


58
00:03:19,346 --> 00:03:23,276
So each rule, each content
blocking rule is a JSON object


59
00:03:23,536 --> 00:03:26,436
containing action and
trigger dictionaries.


60
00:03:26,576 --> 00:03:30,726
The action tells Safari what to
do when the trigger is matched


61
00:03:31,096 --> 00:03:32,816
and the trigger tells Safari


62
00:03:32,816 --> 00:03:35,146
when it should perform
the corresponding action.


63
00:03:35,816 --> 00:03:39,026
So let's start by taking a
look at our action dictionary


64
00:03:39,226 --> 00:03:41,206
to hide the element,
to hide this element.


65
00:03:41,686 --> 00:03:45,826
Our action has the
type CSS display none


66
00:03:46,126 --> 00:03:48,806
which means we are applying
the display none style


67
00:03:49,006 --> 00:03:50,526
to an element on the page.


68
00:03:50,896 --> 00:03:54,236
When the action type
is CSS display none,


69
00:03:54,476 --> 00:03:57,466
a selector is required
in the action dictionary.


70
00:03:57,876 --> 00:04:00,136
All selectors that are
supported by Safari


71
00:04:00,136 --> 00:04:02,706
and WebKit are supported
by content blockers.


72
00:04:03,106 --> 00:04:05,096
So for this example we want


73
00:04:05,096 --> 00:04:07,746
to block the content
with the ID Links.


74
00:04:08,886 --> 00:04:11,986
Now we define when we want
this action to take place.


75
00:04:12,306 --> 00:04:15,786
The trigger dictionary
is used for that.


76
00:04:16,016 --> 00:04:19,766
Since Links is a pretty generic
selector and could be used


77
00:04:19,766 --> 00:04:24,366
for real content on other pages,
I only want this rule to apply


78
00:04:24,576 --> 00:04:28,276
when the user is on a page
on bigbearsgolfblog.com.


79
00:04:28,866 --> 00:04:31,646
If I wanted this rule to
apply when the user was


80
00:04:31,646 --> 00:04:34,686
on any site except
bigbearsgolfblog.com,


81
00:04:35,146 --> 00:04:38,906
I would just replace the if
domain key with unless domain


82
00:04:38,986 --> 00:04:40,426
and keep the value the same.


83
00:04:41,196 --> 00:04:44,656
And I would like this action to
apply when loading any resource.


84
00:04:44,836 --> 00:04:48,396
Once again, as long as I'm
on bigbearsgolfblog.com,


85
00:04:48,696 --> 00:04:52,906
so I set my URL filter which is
a regular expression that is run


86
00:04:52,906 --> 00:04:55,686
against the URL of every
resource being loaded


87
00:04:55,946 --> 00:04:57,396
to match all URLs.


88
00:04:57,666 --> 00:04:58,706
And we'll talk a little more


89
00:04:58,706 --> 00:05:01,006
about URL filter
in a later example.


90
00:05:01,806 --> 00:05:04,316
So let's see what this rule
looks like all together.


91
00:05:05,356 --> 00:05:08,096
We have our action
type, CSS display none,


92
00:05:08,336 --> 00:05:09,986
which says that we
are hiding an element.


93
00:05:11,046 --> 00:05:14,036
Our selector which describes
the element we are hiding.


94
00:05:14,576 --> 00:05:16,866
And then in our trigger,


95
00:05:17,046 --> 00:05:21,626
we specify which domains we
want this style to apply to.


96
00:05:21,846 --> 00:05:24,826
And which resources we want
to apply it to when loading.


97
00:05:25,986 --> 00:05:28,876
So when the content
blocker is applied,


98
00:05:29,146 --> 00:05:30,436
here's what the page looks like.


99
00:05:31,576 --> 00:05:34,256
The list of links is
gone and I can just focus


100
00:05:34,256 --> 00:05:36,216
on the content that
interests me.


101
00:05:39,156 --> 00:05:41,626
However, when looking
at Web inspector,


102
00:05:41,896 --> 00:05:43,996
I found another annoyance
on the page.


103
00:05:44,916 --> 00:05:47,306
If you look at the
resources on this page,


104
00:05:47,716 --> 00:05:50,476
you can see that there's a
script loaded called Tracking


105
00:05:50,476 --> 00:05:55,126
script.JS from example.com and
this script actually tracks me


106
00:05:55,126 --> 00:05:58,786
across various pages that I
visit and can build up a profile


107
00:05:58,786 --> 00:06:00,576
about me from my
browsing history.


108
00:06:00,966 --> 00:06:04,596
When I look in the console
it also helpfully warns me


109
00:06:04,596 --> 00:06:05,596
that I'm being tracked.


110
00:06:06,616 --> 00:06:07,726
Thanks, Tracking script.


111
00:06:08,376 --> 00:06:12,386
Let's block this script
from loading altogether.


112
00:06:15,316 --> 00:06:18,486
We start by defining the
action for this rule.


113
00:06:21,956 --> 00:06:26,066
The action type is block, which
means we will block the load


114
00:06:26,066 --> 00:06:28,976
of any resource matching
the corresponding trigger.


115
00:06:29,276 --> 00:06:30,726
So let's take a look
at that trigger.


116
00:06:31,686 --> 00:06:34,626
The trigger defines when
the action should fire.


117
00:06:34,976 --> 00:06:37,626
So in this case we've
defined a URL filter,


118
00:06:37,956 --> 00:06:40,036
a resource type,
and a load type.


119
00:06:40,556 --> 00:06:43,886
The trigger will file when
all three, the URL filter,


120
00:06:44,056 --> 00:06:47,056
the resource type, and
the load type all match.


121
00:06:47,876 --> 00:06:50,216
Let's start by talking
about the URL filter.


122
00:06:50,966 --> 00:06:54,326
It is a regular expression
that is run against each URL


123
00:06:54,326 --> 00:06:55,356
that is being requested.


124
00:06:55,896 --> 00:06:58,446
So in this case it
will match any URLs


125
00:06:58,726 --> 00:07:01,676
that contain the string
Tracking underscore script.


126
00:07:02,026 --> 00:07:06,636
This will match
example.com/Tracking script.js.


127
00:07:07,986 --> 00:07:10,106
The rest of the components


128
00:07:10,106 --> 00:07:13,396
of the trigger increase the
specificity of the trigger


129
00:07:13,706 --> 00:07:16,086
so we don't block more
content than we want to.


130
00:07:17,386 --> 00:07:20,206
The first way we do this
is by specifying a list


131
00:07:20,206 --> 00:07:22,076
of resource types
to match against.


132
00:07:22,216 --> 00:07:26,016
In this case we only want to
block the loading of scripts.


133
00:07:26,406 --> 00:07:29,736
So we pass script as the one
resource type we want to match.


134
00:07:30,526 --> 00:07:34,076
Lastly, we specify a
load type of third-party.


135
00:07:34,596 --> 00:07:36,816
There are two possible
values for load type.


136
00:07:37,226 --> 00:07:39,426
There's first party
and third party.


137
00:07:39,656 --> 00:07:42,466
A load is considered
first party when it comes


138
00:07:42,466 --> 00:07:44,736
from the same scheme, domain,


139
00:07:44,896 --> 00:07:47,626
and port as the main
resource on the page.


140
00:07:48,056 --> 00:07:50,676
In our case, we only
want to block the loading


141
00:07:50,676 --> 00:07:53,296
of tracking script when
it is a third-party load.


142
00:07:53,626 --> 00:07:56,446
So this means if the
user was on example.com,


143
00:07:56,746 --> 00:07:58,646
this script would still
load successfully.


144
00:07:58,646 --> 00:08:02,316
So let's see what the rule
looks like all put together.


145
00:08:03,566 --> 00:08:06,716
And when we reload the page
with this content blocking rule,


146
00:08:07,216 --> 00:08:13,106
you can see that we are not
loading Tracking script.js


147
00:08:13,106 --> 00:08:17,066
at all and there are no
warnings in the console


148
00:08:17,326 --> 00:08:18,346
that we're being tracked.


149
00:08:19,376 --> 00:08:19,736
Great!


150
00:08:20,516 --> 00:08:25,556
[ Applause ]


151
00:08:26,056 --> 00:08:29,826
So your content blockers
will just be JSON arrays


152
00:08:29,826 --> 00:08:30,786
of these rules.


153
00:08:30,786 --> 00:08:33,436
Now that you've described the
content that you want to block,


154
00:08:33,895 --> 00:08:36,456
the next step is to get
your content blocker


155
00:08:36,596 --> 00:08:37,866
on an iOS device.


156
00:08:38,385 --> 00:08:41,926
As I mentioned before, content
blockers on iOS are loaded


157
00:08:41,926 --> 00:08:42,926
from an app extension.


158
00:08:43,226 --> 00:08:45,256
It is very simple
to make your own.


159
00:08:45,496 --> 00:08:48,486
To begin, you just need to add
a new target to your project


160
00:08:48,936 --> 00:08:51,946
and select content blocker
extension from the list


161
00:08:51,946 --> 00:08:53,766
of iOS application extensions.


162
00:08:54,236 --> 00:08:57,006
This app extension
will be instantiated


163
00:08:57,066 --> 00:08:59,336
when your content blocker
is enabled in settings.


164
00:08:59,846 --> 00:09:01,846
And like all other
app extensions,


165
00:09:01,896 --> 00:09:03,116
it's disabled by default.


166
00:09:04,156 --> 00:09:07,156
Your rules will be compiled
into byte code by Safari


167
00:09:07,156 --> 00:09:08,456
so they can can be loaded


168
00:09:08,456 --> 00:09:11,536
and evaluated quickly each
time Safari is launched.


169
00:09:12,116 --> 00:09:14,456
Once you've created
your app extension,


170
00:09:14,616 --> 00:09:18,006
you'll have an action
request handler


171
00:09:18,236 --> 00:09:19,566
that looks something like this.


172
00:09:20,316 --> 00:09:24,506
All this app extension
does is return the contents


173
00:09:24,556 --> 00:09:27,356
of blocker list.JSON to Safari


174
00:09:27,456 --> 00:09:29,516
when your app extension
is instantiated.


175
00:09:29,866 --> 00:09:32,836
And blocker list.JSON
is automatically


176
00:09:33,236 --> 00:09:35,596
in your extensions target,
so all you have to do


177
00:09:35,596 --> 00:09:37,346
to write your own
content blocker is


178
00:09:37,346 --> 00:09:38,806
to fill in this JSON file.


179
00:09:39,976 --> 00:09:45,146
And content blockers are
automatically applied in Safari


180
00:09:45,366 --> 00:09:47,686
or any apps that use
Safari View Controller.


181
00:09:47,856 --> 00:09:51,386
If you have an app that displays
Web content you should check


182
00:09:51,386 --> 00:09:54,116
out the talk from earlier
this week introducing Safari


183
00:09:54,116 --> 00:09:54,856
View Controller.


184
00:09:55,266 --> 00:10:00,006
However, a static block
list might not be enough


185
00:10:00,006 --> 00:10:01,046
for some of your apps.


186
00:10:01,376 --> 00:10:03,176
You might want to
provide customization


187
00:10:03,176 --> 00:10:06,496
of your content blockers, either
by letting your users select


188
00:10:06,496 --> 00:10:08,276
from multiple different
block lists


189
00:10:08,616 --> 00:10:11,536
or by letting your users pick
certain sites they don't want it


190
00:10:11,536 --> 00:10:12,276
to apply to.


191
00:10:12,816 --> 00:10:16,736
To do this, just like with other
app extensions we recommend


192
00:10:16,736 --> 00:10:20,016
that you put your management
settings in your app.


193
00:10:20,016 --> 00:10:22,976
When your users perform actions
that would change the contents


194
00:10:22,976 --> 00:10:26,176
of your block list, all you
need to do is tell Safari


195
00:10:26,386 --> 00:10:28,296
to re-instantiate
your app extension,


196
00:10:28,416 --> 00:10:30,946
which will cause your content
blocker to be recompiled.


197
00:10:31,796 --> 00:10:34,216
To do this, we've
added a new API


198
00:10:34,376 --> 00:10:38,556
in the Safari services framework
called SF content blocker


199
00:10:38,556 --> 00:10:41,606
manager reload content
blocker with identifier.


200
00:10:42,126 --> 00:10:44,996
All you need to do is pass
it the bundle identifier


201
00:10:44,996 --> 00:10:46,106
of your content blocker.


202
00:10:46,446 --> 00:10:49,506
This will cause Safari to
rerun your app extension


203
00:10:49,696 --> 00:10:51,486
and update the byte
code generated


204
00:10:51,486 --> 00:10:53,046
from parsing your
content blocker.


205
00:10:54,116 --> 00:10:57,266
That was just some of the things
that content blockers can do


206
00:10:57,346 --> 00:10:59,836
and how easy it is to get
started making your own.


207
00:10:59,836 --> 00:11:02,836
I would like to bring up Alex
Christensen to show us a demo.


208
00:11:03,186 --> 00:11:03,646
Alex?


209
00:11:04,516 --> 00:11:10,246
[ Applause ]


210
00:11:10,746 --> 00:11:11,276
>> ALEX CHRISTENSEN:
Thanks, Brian.


211
00:11:13,376 --> 00:11:15,656
I'm Alex Christensen from
the Safari and WebKit team.


212
00:11:15,656 --> 00:11:18,526
I'm going to show you how to
make a content blocker in iOS.


213
00:11:19,306 --> 00:11:21,496
We will block content
in two ways,


214
00:11:22,106 --> 00:11:24,006
we're going to hide some
elements on a Web page


215
00:11:24,006 --> 00:11:25,106
and we're going to
block some loads.


216
00:11:26,986 --> 00:11:31,016
Now, I don't know about you,
but I surf the Web all the time


217
00:11:31,086 --> 00:11:35,296
and I feel like I can really
enhance a user's experience


218
00:11:35,296 --> 00:11:37,246
by making an extension


219
00:11:37,246 --> 00:11:39,266
that removes some
content from the page.


220
00:11:39,266 --> 00:11:42,806
Now, let me show you one
of my favorite Web pages.


221
00:11:43,246 --> 00:11:44,326
You'll see what I'm
talking about.


222
00:11:50,146 --> 00:11:51,296
There we go.


223
00:11:51,486 --> 00:11:56,766
Oh! Now, I just love
Web pages like this.


224
00:11:56,766 --> 00:12:01,076
I got to stay up to date with
what's going on in the world


225
00:12:01,076 --> 00:12:02,386
of cute puppy dog pictures.


226
00:12:02,966 --> 00:12:09,556
So I check one of these at
least every day and I only have


227
00:12:09,556 --> 00:12:12,196
so much valuable screen space.


228
00:12:13,886 --> 00:12:17,996
The comments here are kind of
annoying and they are taking


229
00:12:17,996 --> 00:12:20,576
up the valuable screen
space that I want to use


230
00:12:20,626 --> 00:12:21,916
for cute puppy dog pictures.


231
00:12:22,836 --> 00:12:24,796
Let's go to the Web inspector


232
00:12:24,796 --> 00:12:26,676
and see what we can
do about this problem.


233
00:12:28,106 --> 00:12:32,456
Open up Safari on Mac.


234
00:12:32,536 --> 00:12:35,686
If we go to the develop
menu, simulator,


235
00:12:36,316 --> 00:12:37,706
cute puppies and cats.com.


236
00:12:37,826 --> 00:12:39,386
You can see we are going


237
00:12:39,386 --> 00:12:41,356
to inspect this iOS
simulator instance.


238
00:12:42,606 --> 00:12:45,476
If we hold our mouse
over this we can see


239
00:12:45,476 --> 00:12:47,736
that this is the div
that I want to hide.


240
00:12:50,106 --> 00:12:52,246
It has a class comment.


241
00:12:53,436 --> 00:12:56,516
And if we explore the structure
of this Web page we can see


242
00:12:56,516 --> 00:12:59,096
that all the other
divs that I want


243
00:12:59,096 --> 00:13:00,796
to hide also have
the class comment.


244
00:13:00,906 --> 00:13:04,236
It's pretty easy to write
a selector div.comments


245
00:13:04,706 --> 00:13:08,156
that finds all of the
elements I want to hide


246
00:13:08,156 --> 00:13:14,226
on this page using the
CSS display none style.


247
00:13:14,226 --> 00:13:17,356
Let's make a rule that does
that in an iOS content blocker.


248
00:13:24,546 --> 00:13:29,976
Open up Xcode, create
a new project, iOS,


249
00:13:31,276 --> 00:13:32,966
single view application for now.


250
00:13:33,816 --> 00:13:38,126
My app. Hopefully you have
a better name than "my app".


251
00:13:38,956 --> 00:13:40,846
Create it on the
desktop for now.


252
00:13:41,036 --> 00:13:42,846
All right.


253
00:13:43,396 --> 00:13:52,336
So from here we go to file,
new, target, and under iOS,


254
00:13:53,436 --> 00:13:57,486
application extension, we have
the content blocker extension


255
00:13:57,486 --> 00:13:59,546
template that Brian
just mentioned.


256
00:14:04,556 --> 00:14:05,706
My content blocker.


257
00:14:06,306 --> 00:14:10,016
Let's not activate this
scheme because we will want


258
00:14:10,016 --> 00:14:12,246
to run our app in
the iOS simulator.


259
00:14:13,126 --> 00:14:16,866
Now, adding that new
target made this right here:


260
00:14:16,916 --> 00:14:17,896
mycontentblocker.


261
00:14:19,136 --> 00:14:22,616
Inside of this, it made
this blocker list.JSON.


262
00:14:22,616 --> 00:14:25,086
This is where we want
to put the rules.


263
00:14:27,446 --> 00:14:39,986
Now, I have a rule that applies
the selector div.comments


264
00:14:40,966 --> 00:14:44,896
and applies the style
CSS display none to all


265
00:14:44,896 --> 00:14:48,566
of the elements in the page
that match that selector.


266
00:14:54,126 --> 00:14:57,246
And let's have this
apply everywhere for now.


267
00:14:57,326 --> 00:15:01,506
So we have the dot star regular
expression, meaning everywhere.


268
00:15:03,706 --> 00:15:05,306
Let's run this in simulator.


269
00:15:06,126 --> 00:15:06,796
Here is my app.


270
00:15:09,076 --> 00:15:19,316
Okay. Now if we go to settings,
Safari, content blockers,


271
00:15:20,506 --> 00:15:22,116
here is my app's
content blocker.


272
00:15:22,996 --> 00:15:29,166
Let's turn this on and reload
this page and see what it did.


273
00:15:30,516 --> 00:15:35,736
[ Applause ]


274
00:15:36,236 --> 00:15:39,756
All those comments are gone
and I can use the screen space


275
00:15:39,756 --> 00:15:42,906
for the cute puppy dog pictures,
why I came to the site.


276
00:15:42,906 --> 00:15:47,096
If you look really carefully,
you might notice something else


277
00:15:47,096 --> 00:15:49,866
that is also not a
cute puppy dog picture.


278
00:15:51,236 --> 00:15:55,366
Now, I've always been more of
a dog person than a cat person


279
00:15:56,006 --> 00:16:02,386
and I don't want to
see these cat pictures.


280
00:16:02,826 --> 00:16:06,426
(Laughter) I don't want to wait
for the cat pictures to load


281
00:16:06,426 --> 00:16:08,226
and don't want to
use my bandwidth


282
00:16:08,806 --> 00:16:11,376
to download cat pictures
that I didn't want to see


283
00:16:11,376 --> 00:16:15,366
in the first place, so let's
block these loads completely.


284
00:16:21,946 --> 00:16:24,456
Back in the Web inspector
and the resources tab,


285
00:16:25,936 --> 00:16:32,146
you can see that the resources
on this page have some names


286
00:16:32,146 --> 00:16:34,226
that I can write regular
expressions to recognize.


287
00:16:34,686 --> 00:16:39,616
If it contains slash cat,
probably a cat picture.


288
00:16:42,186 --> 00:16:43,486
So let's block those loads.


289
00:16:47,376 --> 00:16:49,806
Here we have another rule.


290
00:16:51,926 --> 00:16:59,646
Action type block, and if it
matches the regular expression


291
00:16:59,646 --> 00:17:01,666
slash cat, let's block it.


292
00:17:01,996 --> 00:17:04,036
I think this is a
little bit too generic.


293
00:17:04,036 --> 00:17:06,346
I think this will probably
block things on pages


294
00:17:06,346 --> 00:17:09,326
that I'm not expecting, like
if there's slash category


295
00:17:09,326 --> 00:17:11,506
in the URL anywhere on
the, this will block it


296
00:17:11,506 --> 00:17:12,955
but that could cause problems.


297
00:17:13,536 --> 00:17:14,396
Let's just have it


298
00:17:14,396 --> 00:17:17,546
on cutepuppiesandcats.com cause
I'm pretty sure that anything


299
00:17:17,546 --> 00:17:19,396
on this website that
has slash cat


300
00:17:19,396 --> 00:17:22,195
in its URL is probably a cat
picture that I want to block.


301
00:17:22,516 --> 00:17:26,486
All right, let's run this
and see what happens.


302
00:17:34,046 --> 00:17:35,896
Let's go back to
settings and toggle this


303
00:17:35,896 --> 00:17:37,436
to recompile the
content blocker.


304
00:17:37,836 --> 00:17:41,606
You can also use the API to
do this from within your app.


305
00:17:44,176 --> 00:17:48,496
Go back to Safari, reload
the page, there we go.


306
00:17:48,496 --> 00:17:52,236
The cat pictures are gone, but
something has gone wrong here.


307
00:17:52,576 --> 00:17:55,486
My dog picture is too big.


308
00:17:55,746 --> 00:17:57,116
I have no background color.


309
00:17:57,436 --> 00:17:59,156
It looks like the
CSS is also gone.


310
00:17:59,706 --> 00:18:03,636
(Laughter) That's
definitely not what we wanted.


311
00:18:03,636 --> 00:18:05,616
Let's go back to
the Web inspector


312
00:18:05,616 --> 00:18:09,046
and see what's going on.


313
00:18:09,306 --> 00:18:14,766
Right here, you can see
that my CSS also starts


314
00:18:14,766 --> 00:18:17,556
with /cat in its URL.


315
00:18:17,876 --> 00:18:18,906
It's cats and dogs.css.


316
00:18:19,486 --> 00:18:21,586
We are blocking that
unintentionally.


317
00:18:22,256 --> 00:18:26,886
There are a couple ways
we could let this through.


318
00:18:27,016 --> 00:18:32,966
We can have the other rule
only apply to images or --


319
00:18:33,546 --> 00:18:39,506
well, be creative, but I'm
going to make it so that


320
00:18:40,586 --> 00:18:42,356
if it also matches
cats and dogs,


321
00:18:42,876 --> 00:18:45,866
we want to ignore this
rule that would block it.


322
00:18:51,196 --> 00:18:51,936
There we go.


323
00:18:51,936 --> 00:18:55,446
Has cats and dogs in it,
ignore the previous rules.


324
00:18:55,826 --> 00:18:58,926
This will block the cat
pictures, which is what I want


325
00:18:58,926 --> 00:19:02,676
to do, but it will let the
cats and dogs.css through.


326
00:19:06,586 --> 00:19:08,726
All right, let's rerun this.


327
00:19:16,726 --> 00:19:19,916
Toggle this to recompile
the content blocker


328
00:19:20,696 --> 00:19:25,046
and reload the page.


329
00:19:26,766 --> 00:19:27,416
There we go.


330
00:19:28,516 --> 00:19:31,636
[ Applause ]


331
00:19:32,136 --> 00:19:35,016
This is how I want users
of my content blocker


332
00:19:35,346 --> 00:19:36,566
to view web pages like this,


333
00:19:37,036 --> 00:19:38,776
straight to the puppy
dog pictures.


334
00:19:39,086 --> 00:19:40,426
All right.


335
00:19:41,736 --> 00:19:45,956
so today we blocked some cat
pictures, we hid some comments.


336
00:19:46,636 --> 00:19:49,476
Who knows what you might
want to block tomorrow?


337
00:19:49,476 --> 00:19:50,626
So give it a shot.


338
00:19:50,706 --> 00:19:52,936
Try making a content
blocker on iOS.


339
00:19:53,206 --> 00:19:53,976
Brian, come on back.


340
00:19:54,516 --> 00:20:01,096
[ Applause ]


341
00:20:01,596 --> 00:20:02,636
>> BRIAN WEINSTEIN:
Thanks, Alex.


342
00:20:03,076 --> 00:20:04,526
So that was an overview of how


343
00:20:04,526 --> 00:20:06,536
to create a content
blocker on iOS.


344
00:20:06,936 --> 00:20:08,876
And just some of the
things you can do with them.


345
00:20:11,306 --> 00:20:14,626
So since we think that this
block list model is the best way


346
00:20:14,626 --> 00:20:17,496
to block content on the Web
we've brought the same model


347
00:20:17,496 --> 00:20:20,106
back to the Mac via
the traditional Safari


348
00:20:20,106 --> 00:20:20,836
extensions API.


349
00:20:20,836 --> 00:20:24,576
You have been able to block
content using Safari extensions


350
00:20:24,786 --> 00:20:27,126
for a few years now,
but the current model


351
00:20:27,126 --> 00:20:30,466
of blocking can actually
adversely affect performance


352
00:20:30,616 --> 00:20:31,826
of your users' browsing.


353
00:20:32,316 --> 00:20:36,186
With this new block list
model, since Safari knows


354
00:20:36,186 --> 00:20:38,856
about the block list before
any loading takes place,


355
00:20:39,176 --> 00:20:40,366
it is a lot faster.


356
00:20:40,646 --> 00:20:43,726
Since we've optimized our
compiled byte code that each


357
00:20:43,726 --> 00:20:45,086
of these block lists creates,


358
00:20:45,286 --> 00:20:46,986
it's a lot more memory
efficient.


359
00:20:47,946 --> 00:20:51,346
So if anyone has written
extensions using --


360
00:20:51,346 --> 00:20:54,366
if anyone has written content
blocking extensions in the past,


361
00:20:54,956 --> 00:20:56,576
they know about the
can load method


362
00:20:57,186 --> 00:20:59,446
and so we are deprecating
the can load method


363
00:20:59,786 --> 00:21:03,086
and if your Safari extension
specifies a block list,


364
00:21:03,406 --> 00:21:06,646
calls to can load will become
no ops in your extension.


365
00:21:06,646 --> 00:21:11,526
To add a content blocker to your
Safari extension, all you have


366
00:21:11,586 --> 00:21:14,036
to do is set the
content blocker file


367
00:21:14,386 --> 00:21:17,156
in Safari's extension builder.


368
00:21:17,476 --> 00:21:22,166
This can be the exact same JSON
file that your iOS app uses.


369
00:21:23,566 --> 00:21:26,026
However, if you would
like to provide your users


370
00:21:26,026 --> 00:21:28,956
with customization options
for what content to block,


371
00:21:29,256 --> 00:21:32,206
once again letting them choose
between different block lists


372
00:21:32,466 --> 00:21:35,376
or making a block list
not apply when a user is


373
00:21:35,376 --> 00:21:38,126
on a certain page, we've
added a JavaScript API


374
00:21:38,576 --> 00:21:41,516
to configure your content
blocker dynamically.


375
00:21:42,346 --> 00:21:46,186
You can call
Safari.extension.set content


376
00:21:46,186 --> 00:21:48,526
blocker from your
extensions global page


377
00:21:48,756 --> 00:21:51,386
and pass it your
content blocker.


378
00:21:51,876 --> 00:21:55,176
And the content blocker
can either be an object


379
00:21:55,516 --> 00:21:56,686
or a JSON string.


380
00:21:56,876 --> 00:21:57,976
This API accepts both.


381
00:22:00,456 --> 00:22:02,456
So that was an overview


382
00:22:02,456 --> 00:22:06,166
of content blockers
for iOS and OS X.


383
00:22:06,166 --> 00:22:07,176
And while we are talking


384
00:22:07,176 --> 00:22:09,996
about traditional Safari
extensions we've made some


385
00:22:09,996 --> 00:22:11,976
changes to the Safari
Extensions Gallery.


386
00:22:18,056 --> 00:22:20,516
And so for anyone
who is not familiar


387
00:22:20,516 --> 00:22:23,386
with the Safari Extensions
Gallery, it is the best place


388
00:22:23,386 --> 00:22:25,976
for your users to find
your Safari extensions.


389
00:22:26,346 --> 00:22:28,966
It is directly accessible
from Safari's menu


390
00:22:29,266 --> 00:22:31,496
and from Safari's
extensions preferences


391
00:22:31,986 --> 00:22:33,546
and it is the only place


392
00:22:33,546 --> 00:22:37,406
that your users can install your
extensions with only one click.


393
00:22:38,616 --> 00:22:41,206
If you're serious about
making Safari extensions,


394
00:22:41,346 --> 00:22:42,846
you are already in the gallery.


395
00:22:43,106 --> 00:22:45,966
Like I said before, it is the
easiest way for your users


396
00:22:46,176 --> 00:22:48,236
to discover and install
your extensions.


397
00:22:48,916 --> 00:22:51,546
To make things even more
secure for our users,


398
00:22:51,776 --> 00:22:53,536
coming soon all extensions


399
00:22:53,536 --> 00:22:57,176
in the gallery will be both
signed and hosted by Apple.


400
00:22:57,426 --> 00:22:59,716
To take advantage of
this, all you have


401
00:22:59,776 --> 00:23:02,566
to do is resubmit your
extensions to the gallery.


402
00:23:03,576 --> 00:23:06,066
And another great
thing about this is


403
00:23:06,066 --> 00:23:09,076
that once you've submitted
a version to the gallery,


404
00:23:09,436 --> 00:23:12,756
if you submit an update your
users will get automatic updates


405
00:23:12,756 --> 00:23:14,426
of your extension for free.


406
00:23:14,866 --> 00:23:17,266
You don't have to write an
update manifest anymore.


407
00:23:18,236 --> 00:23:20,776
But if you have a version
that is not in the gallery,


408
00:23:21,286 --> 00:23:25,196
when you want your users to
update to your newest version


409
00:23:25,226 --> 00:23:28,486
in the gallery, you
need to add a new flag


410
00:23:28,516 --> 00:23:31,926
to your update manifest
saying that we,


411
00:23:31,926 --> 00:23:33,906
Safari should update
your extension


412
00:23:34,096 --> 00:23:35,376
to the version in the gallery.


413
00:23:35,786 --> 00:23:39,946
Also coming soon, the automatic
updates will only be available


414
00:23:40,016 --> 00:23:42,916
for extensions in the
Extensions Gallery.


415
00:23:43,456 --> 00:23:47,306
So those were the changes to
the Safari Extensions Gallery.


416
00:23:47,666 --> 00:23:50,256
I would like to move on to
the last topic of the session,


417
00:23:50,536 --> 00:23:52,056
Shared Links app extensions.


418
00:23:55,136 --> 00:23:59,126
Shared Links is a Safari feature
that shows up next to your list


419
00:23:59,126 --> 00:24:00,956
of bookmarks and reading lists.


420
00:24:01,206 --> 00:24:02,926
It contains a stream of links


421
00:24:03,336 --> 00:24:05,276
from various sources
you are interested in.


422
00:24:05,976 --> 00:24:08,946
Links will show up from
your Twitter, LinkedIn,


423
00:24:09,006 --> 00:24:10,836
and Weibo accounts
automatically.


424
00:24:11,416 --> 00:24:14,786
Additionally, in iOS 8
and Safari for Yosemite,


425
00:24:15,116 --> 00:24:17,736
we added the ability
for users to subscribe


426
00:24:17,736 --> 00:24:21,156
to their favorite websites'
RSS feeds to get them to show


427
00:24:21,156 --> 00:24:22,816
up directly in Shared Links.


428
00:24:23,346 --> 00:24:26,236
In this screen shot you can see
links from my Twitter account


429
00:24:26,516 --> 00:24:29,466
and some websites I
subscribe to, interspersed.


430
00:24:29,946 --> 00:24:35,546
In iOS 9 and Safari for OS X El
Capitan, we're adding a new way


431
00:24:35,546 --> 00:24:38,086
for you to get your
content directly


432
00:24:38,086 --> 00:24:39,476
into Safari's Shared Links,


433
00:24:39,846 --> 00:24:41,806
and they are Shared
Links app extensions.


434
00:24:42,186 --> 00:24:43,926
It's a new type of app extension


435
00:24:44,206 --> 00:24:47,736
that has the same
API for iOS and OS X.


436
00:24:48,746 --> 00:24:51,996
To get started you create
a new app extension just


437
00:24:51,996 --> 00:24:53,826
like we talked about
for content blocking.


438
00:24:54,326 --> 00:24:58,666
You create a new target, and
select Shared Links extension


439
00:24:58,846 --> 00:25:00,476
on the platform you're
interested in.


440
00:25:01,366 --> 00:25:06,126
How an app extension works
on a high level is that,


441
00:25:06,336 --> 00:25:09,716
your app extension is
called at the right time


442
00:25:09,896 --> 00:25:13,076
and you return a list
of NSExtension items.


443
00:25:13,596 --> 00:25:15,706
In the case of a Shared
Links app extension,


444
00:25:16,586 --> 00:25:19,246
every NSExtension
item turns directly


445
00:25:19,296 --> 00:25:21,346
into a Shared Links item.


446
00:25:21,666 --> 00:25:24,226
We have a blank slate
of an NSExtension item


447
00:25:25,286 --> 00:25:27,816
and we have the Shared Links
item we are trying to create.


448
00:25:27,936 --> 00:25:30,646
I would like to take you
through the code to do this.


449
00:25:31,086 --> 00:25:34,806
We start by defining some user
info on the NSExtension item,


450
00:25:35,266 --> 00:25:37,936
and the first thing we
define is an identifier


451
00:25:37,986 --> 00:25:39,496
for each NSExtension item.


452
00:25:39,936 --> 00:25:41,806
No two NSExtension items


453
00:25:41,866 --> 00:25:45,136
that your app extension returns
can have the same identifier.


454
00:25:46,166 --> 00:25:50,336
Next we define the URL string
and this is just what's loaded


455
00:25:50,516 --> 00:25:53,696
when the user selects your
Shared Links item in Safari.


456
00:25:54,136 --> 00:25:59,146
Next, we define the published
date of the Shared Links item


457
00:25:59,486 --> 00:26:03,156
and Safari uses the date of
each item to intersperse items


458
00:26:03,156 --> 00:26:07,726
from various sources inside
of your user Shared Links.


459
00:26:08,526 --> 00:26:12,866
Lastly, you can define a display
name which shows up at the top


460
00:26:12,866 --> 00:26:13,926
of the Shared Links item.


461
00:26:14,466 --> 00:26:15,726
A couple notes.


462
00:26:16,046 --> 00:26:18,636
Unique identifier
must be consistent


463
00:26:18,766 --> 00:26:21,676
across multiple instantiations
of your extension.


464
00:26:22,096 --> 00:26:24,976
So if your extension gets
called multiple times


465
00:26:24,976 --> 00:26:27,046
and returns the same
Shared Links item,


466
00:26:27,466 --> 00:26:30,566
the unique identifier needs
to be the same both times


467
00:26:31,076 --> 00:26:33,646
and display name is
completely optional.


468
00:26:34,656 --> 00:26:37,986
If it is not set, Safari will
just use the display name


469
00:26:38,196 --> 00:26:39,826
of your Shared Links
app extension.


470
00:26:39,826 --> 00:26:44,476
Next, we define the title
of the Shared Links item,


471
00:26:44,726 --> 00:26:48,626
which is just the attributed the
title of the NSExtension item.


472
00:26:49,576 --> 00:26:53,046
Then we define the description
text of the Shared Links item,


473
00:26:53,606 --> 00:26:55,836
which is just the
attributed content text


474
00:26:55,836 --> 00:26:58,006
of the NSExtension item.


475
00:26:58,006 --> 00:27:00,556
Both of these will be
automatically ellipsized


476
00:27:00,556 --> 00:27:02,186
for you if they are too long.


477
00:27:02,716 --> 00:27:05,976
So that was all the text
of the Shared Links item.


478
00:27:06,286 --> 00:27:07,876
What about the images
that we see?


479
00:27:08,096 --> 00:27:11,376
The icon in the top left
corner is the first entry


480
00:27:11,376 --> 00:27:13,836
in the NSExtension
items attachments array.


481
00:27:14,486 --> 00:27:17,926
In this example I'm using an
image from my extensions bundle


482
00:27:18,086 --> 00:27:20,386
but you could fetch an
image from the Web here.


483
00:27:20,786 --> 00:27:24,606
And the icon in the top right
corner is just your apps icon.


484
00:27:24,956 --> 00:27:27,586
So if you're returning
multiple Shared Links items


485
00:27:28,126 --> 00:27:30,016
and with different
display names,


486
00:27:30,976 --> 00:27:35,296
the icon in the top right corner
will provide your app's branding


487
00:27:35,996 --> 00:27:41,496
and to let your users know that
this content is from your app.


488
00:27:41,496 --> 00:27:45,066
A pro tip, if this is your first
time using NSExtension item,


489
00:27:45,466 --> 00:27:47,736
all of the properties
on NSExtension item,


490
00:27:48,046 --> 00:27:50,666
the attributed title, the
attributed content text


491
00:27:50,826 --> 00:27:54,536
and attachment, must be set
after setting the user info.


492
00:27:55,616 --> 00:27:59,026
That's all it takes to get your
content inside Shared Links.


493
00:27:59,026 --> 00:28:01,726
I would like to bring Alex
back up to give another demo.


494
00:28:02,316 --> 00:28:02,826
Alex?


495
00:28:03,516 --> 00:28:10,036
[ Applause ]


496
00:28:10,536 --> 00:28:13,216
>> ALEX CHRISTENSEN: All right.


497
00:28:13,726 --> 00:28:17,336
I have some content that I want
to put in with the Shared Links.


498
00:28:17,536 --> 00:28:19,116
I'm going to make a
Shared Links extension.


499
00:28:20,396 --> 00:28:21,696
Let me show you what
I'm talking about first.


500
00:28:27,076 --> 00:28:27,446
All right.


501
00:28:30,476 --> 00:28:34,166
If we open up Safari, you
can see here in the side bar


502
00:28:34,956 --> 00:28:39,896
that I have a bunch of
links from my Twitter feed.


503
00:28:40,546 --> 00:28:43,996
This is where I want to
put my content for users


504
00:28:44,446 --> 00:28:45,786
of my Shared Links extension.


505
00:28:46,826 --> 00:28:48,686
So let's make a Shared
Links extension.


506
00:28:51,046 --> 00:28:51,926
Open up Xcode.


507
00:28:53,446 --> 00:28:55,796
Create a new project.


508
00:28:55,796 --> 00:28:58,296
Let's make it for OS X, but you
can do the same thing for iOS.


509
00:29:06,766 --> 00:29:08,386
Put it on the desktop for now.


510
00:29:10,546 --> 00:29:15,936
Okay. Now, from here we
go to file, new, target,


511
00:29:17,366 --> 00:29:22,726
and under OS X application
extension we have the Shared


512
00:29:22,726 --> 00:29:24,896
Links extension template
that Brian just showed you.


513
00:29:27,606 --> 00:29:28,376
Let's go to next.


514
00:29:29,596 --> 00:29:33,596
My Shared Links extension.


515
00:29:34,986 --> 00:29:35,636
That's a good name.


516
00:29:37,006 --> 00:29:40,326
Activate my extension scheme.


517
00:29:40,946 --> 00:29:42,316
Yeah, let's activate
it, because we'll want


518
00:29:42,316 --> 00:29:44,766
to run the extension
with Safari.


519
00:29:47,756 --> 00:29:50,636
Now, that new target -- whoa --


520
00:29:50,636 --> 00:29:53,786
made this My Shared
Links extension


521
00:29:54,796 --> 00:29:57,526
and it put some template
Swift right here.


522
00:30:00,226 --> 00:30:03,406
And this Swift is
pretty straightforward.


523
00:30:04,306 --> 00:30:09,456
It just creates an NSExtension
item, populates its user info,


524
00:30:10,516 --> 00:30:13,476
gives it an attributed
title and some context text.


525
00:30:14,856 --> 00:30:16,316
Content text, excuse me.


526
00:30:16,736 --> 00:30:21,516
And it calls complete request
returning items with an array


527
00:30:21,516 --> 00:30:23,296
of in this case one item.


528
00:30:25,346 --> 00:30:26,666
Let's see what it does
right out of the box.


529
00:30:30,196 --> 00:30:31,766
Let's run it with Safari.


530
00:30:36,056 --> 00:30:37,646
We are debugging
this with Xcode.


531
00:30:37,806 --> 00:30:39,736
Instruments wants to
know what's going on.


532
00:30:46,076 --> 00:30:47,416
There we go.


533
00:30:47,416 --> 00:30:52,096
Now, right here we
have something


534
00:30:52,096 --> 00:30:56,086
from My Shared Links
extension and if I click on it,


535
00:30:57,316 --> 00:31:00,766
then it takes me to
Apple.com, which is great.


536
00:31:00,896 --> 00:31:02,416
That's what the template
said to do.


537
00:31:03,296 --> 00:31:08,326
Now, this is where I want
to put my content, though.


538
00:31:08,376 --> 00:31:13,926
So I'm going to modify
this Swift a little bit.


539
00:31:18,166 --> 00:31:22,916
And let me go through
with you what this does.


540
00:31:22,916 --> 00:31:23,866
It's pretty straightforward,


541
00:31:24,076 --> 00:31:30,466
it just sends an NSURL
request to my server.


542
00:31:31,396 --> 00:31:34,396
HTTPS, make sure you use HTTPS,


543
00:31:34,396 --> 00:31:39,806
cutepuppiesandcats.com
slash data.JSON.


544
00:31:39,806 --> 00:31:42,586
Let me show you the data
that will be received


545
00:31:42,736 --> 00:31:43,846
when this request is sent.


546
00:31:46,756 --> 00:31:50,506
It is just a JSON API with
some links and some content


547
00:31:50,506 --> 00:31:53,336
that I might want to put
into the Shared Links.


548
00:31:55,506 --> 00:32:00,796
All right, so it will make
a request, get this JSON.


549
00:32:01,656 --> 00:32:06,316
It will parse that
JSON and for each value


550
00:32:06,316 --> 00:32:08,006
in that parsed JSON array,


551
00:32:08,896 --> 00:32:11,856
it will get some
strings out of there.


552
00:32:12,766 --> 00:32:16,056
And it will populate
an NSExtension item


553
00:32:16,056 --> 00:32:19,146
that it just made
with some things.


554
00:32:19,326 --> 00:32:25,396
I used my URL as my unique
identifier because I know


555
00:32:25,396 --> 00:32:26,796
that for my data
they are all unique.


556
00:32:27,416 --> 00:32:30,106
If that's not true for
your data, then find a way


557
00:32:30,106 --> 00:32:32,476
to get unique values
for each of these.


558
00:32:33,716 --> 00:32:43,026
I have an icon that
I need to add.


559
00:32:43,796 --> 00:32:44,776
There we go.


560
00:32:45,336 --> 00:32:47,206
There's my puppy icon.


561
00:32:48,396 --> 00:32:49,556
I put it in the wrong place.


562
00:32:51,126 --> 00:32:52,626
Let's put it in this demo.


563
00:32:55,516 --> 00:32:57,276
I need to add it.


564
00:33:02,426 --> 00:33:03,606
Adding puppy icon.


565
00:33:05,486 --> 00:33:09,616
And I need to also
add it to this target,


566
00:33:10,116 --> 00:33:11,246
My Shared Links extension,


567
00:33:11,246 --> 00:33:14,536
so My Shared Links extension
has access to this icon.


568
00:33:17,356 --> 00:33:18,876
And let's run this.


569
00:33:18,876 --> 00:33:19,836
Let's see what it does.


570
00:33:24,426 --> 00:33:25,556
Let's close Safari first.


571
00:33:29,296 --> 00:33:31,616
There we go.


572
00:33:32,106 --> 00:33:33,966
Let's run this and
see what it does.


573
00:33:36,466 --> 00:33:38,886
Instruments still wants
to know what's going on.


574
00:33:45,046 --> 00:33:47,866
And my content is
not showing up.


575
00:33:48,016 --> 00:33:48,976
Let's see what went wrong.


576
00:33:49,956 --> 00:33:55,456
If you see right here, we
have a bunch of errors.


577
00:33:55,456 --> 00:33:58,876
If you open up the
console and look


578
00:33:58,876 --> 00:34:02,196
at the sys log console
you'll see a bunch


579
00:34:04,066 --> 00:34:05,576
of sandbox exceptions.


580
00:34:06,486 --> 00:34:09,966
And that's because my
extension is sandboxed;


581
00:34:10,206 --> 00:34:12,226
to keep users safe,


582
00:34:13,056 --> 00:34:15,436
these extensions only have
access to what they need to.


583
00:34:15,585 --> 00:34:18,775
This particular extension
right now does not have access


584
00:34:18,775 --> 00:34:19,235
to the network.


585
00:34:19,735 --> 00:34:23,126
So we are trying to
make an NSURL request,


586
00:34:23,126 --> 00:34:26,636
we definitely need
access to the network.


587
00:34:26,636 --> 00:34:29,906
So if I click on
the project here,


588
00:34:31,146 --> 00:34:37,005
and then go to capabilities,
right here I need


589
00:34:37,005 --> 00:34:38,525
to check outgoing connections


590
00:34:39,196 --> 00:34:44,376
to let this extension have
the ability to be able to send


591
00:34:44,376 --> 00:34:46,835
and initiate outgoing
connections


592
00:34:46,886 --> 00:34:49,136
to get this JSON data.


593
00:34:51,996 --> 00:34:53,716
All right.


594
00:34:54,476 --> 00:34:55,326
Now, let's run it.


595
00:35:08,296 --> 00:35:09,216
There we go!


596
00:35:10,516 --> 00:35:14,306
[ Applause ]


597
00:35:14,806 --> 00:35:16,206
Right where we wanted it.


598
00:35:16,206 --> 00:35:20,446
Now we have my content
and links to my content


599
00:35:20,816 --> 00:35:23,776
so I can take users
to my website


600
00:35:24,116 --> 00:35:26,096
from the Safari Shared Links.


601
00:35:27,396 --> 00:35:29,016
So if you have some
content that you want to put


602
00:35:29,016 --> 00:35:32,686
in the Safari Shared Links, try
making a Shared Links extension.


603
00:35:32,686 --> 00:35:34,766
All right, back to you, Brian!


604
00:35:35,516 --> 00:35:44,196
[ Applause ]


605
00:35:44,696 --> 00:35:45,566
>> BRIAN WEINSTEIN:
Thanks, Alex,


606
00:35:45,566 --> 00:35:47,606
for showing us just
how easy it is


607
00:35:47,796 --> 00:35:51,076
to help your users discover
your content using Shared Links


608
00:35:51,076 --> 00:35:51,776
app extensions.


609
00:35:52,686 --> 00:35:54,286
So what have we talked
about today?


610
00:35:54,836 --> 00:35:56,396
We've unleashed the
ability for you


611
00:35:56,396 --> 00:35:58,126
to write content
blockers for iOS.


612
00:35:58,816 --> 00:36:00,976
If you have a content
blocker on the Mac,


613
00:36:01,316 --> 00:36:03,106
you should definitely
adopt this new API.


614
00:36:03,106 --> 00:36:05,756
It will give your
users a much faster


615
00:36:05,956 --> 00:36:08,266
and more memory efficient
browsing experience.


616
00:36:08,906 --> 00:36:12,906
And if you have an extension in
the Safari Extensions Gallery,


617
00:36:13,146 --> 00:36:16,286
please submit it again so
your new version can be signed


618
00:36:16,286 --> 00:36:17,426
and hosted by Apple.


619
00:36:17,886 --> 00:36:19,336
If you don't have
an extension there,


620
00:36:19,566 --> 00:36:21,056
this is a great time to start.


621
00:36:21,746 --> 00:36:24,596
Lastly, if you have a set
of links that makes sense


622
00:36:24,636 --> 00:36:28,006
in Shared Links, you now have
the power to put them directly


623
00:36:28,006 --> 00:36:30,726
into Safari where your
users can discover them


624
00:36:30,726 --> 00:36:32,076
and go back to your website.


625
00:36:32,456 --> 00:36:37,126
If you have any more
questions, contact John Davis,


626
00:36:37,126 --> 00:36:41,706
the Web technologies
evangelist and coming soon,


627
00:36:41,706 --> 00:36:45,056
we will have a blog
post detailing all


628
00:36:45,056 --> 00:36:48,856
of the capabilities of
content blocking for Safari


629
00:36:49,186 --> 00:36:51,136
on the WebKit.org blog.


630
00:36:51,506 --> 00:36:55,416
Feel free to contact us on
the Apple developer forums.


631
00:36:56,626 --> 00:36:59,876
Related sessions,
if you have an app


632
00:36:59,916 --> 00:37:01,796
that displays Web content check


633
00:37:01,796 --> 00:37:04,256
out the talk Introducing
Safari View Controller.


634
00:37:04,256 --> 00:37:07,146
As you saw, we used
Web inspector


635
00:37:07,146 --> 00:37:09,636
to help create content blockers.


636
00:37:09,636 --> 00:37:11,416
For more information
about Web inspector,


637
00:37:11,706 --> 00:37:14,246
check out Using Safari
to Deliver


638
00:37:14,246 --> 00:37:18,686
and Debug a Responsive Web
Design, and I will be --


639
00:37:18,686 --> 00:37:22,296
Alex and I will be in Media
Lab A directly after this.


640
00:37:22,566 --> 00:37:24,286
Come find us if you
have any questions.


641
00:37:25,576 --> 00:37:26,036
Thank you!


642
00:37:26,036 --> 00:37:26,976
Enjoy the rest of your Friday.


643
00:37:27,516 --> 00:37:30,500
[ Applause ]

