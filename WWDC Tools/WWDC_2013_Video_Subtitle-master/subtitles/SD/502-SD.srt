1
00:00:00,506 --> 00:00:09,456
[ Silence ]


2
00:00:09,956 --> 00:00:10,856
>> Thank you everyone.


3
00:00:11,366 --> 00:00:13,506
My name is Jacques
Gasselin de Richebourg


4
00:00:13,906 --> 00:00:15,766
and I manage the Game
[inaudible] team here at Apple.


5
00:00:16,716 --> 00:00:20,686
I am extremely excited to tell
you about this feature today


6
00:00:20,686 --> 00:00:22,926
and this is the Introduction
to Sprite Kit.


7
00:00:23,436 --> 00:00:25,836
But before we get in to the
nitty-gritty details of it,


8
00:00:25,836 --> 00:00:30,866
I'll like to look at where we
are and I think we all know


9
00:00:30,866 --> 00:00:33,776
that games are incredibly
successful in our platform.


10
00:00:34,726 --> 00:00:36,736
Just this morning I had
a look on the App Store.


11
00:00:37,186 --> 00:00:41,246
I looked at the US
Top 100 paid icon apps


12
00:00:41,596 --> 00:00:44,496
and 60 out of 100 are games.


13
00:00:44,546 --> 00:00:46,806
And that's a pretty
good indicator


14
00:00:46,806 --> 00:00:47,606
that we're on to something.


15
00:00:48,256 --> 00:00:52,806
Now, a lot of these
games are truly iconic.


16
00:00:53,896 --> 00:00:58,136
We have games like Angry Birds,
Cut the Rope, Doodle Jump,


17
00:00:58,196 --> 00:01:00,036
Where is My Water, Tiny Wings,


18
00:01:01,286 --> 00:01:02,876
I'm sure you're all
aware of these games.


19
00:01:03,656 --> 00:01:05,056
And many of them are 2D.


20
00:01:05,465 --> 00:01:07,636
We look to this and we realize


21
00:01:07,636 --> 00:01:09,636
that developers have
a lot in common needs.


22
00:01:10,796 --> 00:01:15,436
2D game developers need a lot of
beautiful graphics, really fast.


23
00:01:16,866 --> 00:01:19,586
They need particle systems,
they need visual effects,


24
00:01:20,216 --> 00:01:22,406
and they need physics
and animation


25
00:01:22,746 --> 00:01:24,856
to really give you a great
game play experience.


26
00:01:25,146 --> 00:01:30,296
So, we thought about
this and really,


27
00:01:30,296 --> 00:01:34,166
to make a really
efficient 2D game engine,


28
00:01:34,856 --> 00:01:37,886
you need to build it from the
ground up where the focus is


29
00:01:37,886 --> 00:01:41,656
on speed and efficiency
and that's what we did.


30
00:01:42,256 --> 00:01:47,446
So Sprite Kit, there's the heavy
lifting for you so you can focus


31
00:01:47,446 --> 00:01:49,706
on making games instead
of game engines.


32
00:01:49,706 --> 00:01:52,446
All right, let's
get to the features.


33
00:01:53,106 --> 00:01:56,766
Sprite Kit, enhancing
2D games development.


34
00:01:57,686 --> 00:02:00,746
It has features that you would
expect from the Sprite engine


35
00:02:00,856 --> 00:02:02,556
like Sprites animating
of course,


36
00:02:02,756 --> 00:02:04,666
tinted, particle effects.


37
00:02:05,336 --> 00:02:07,416
It has geometric
primitives that you might use


38
00:02:07,416 --> 00:02:08,756
for debugging or even shipping.


39
00:02:09,425 --> 00:02:12,316
You can do rectangles,
circles, pads.


40
00:02:12,506 --> 00:02:13,666
You can do arbitrary pads.


41
00:02:14,526 --> 00:02:16,406
So you can do subpads
inside them,


42
00:02:16,716 --> 00:02:18,186
you can even have them
self-intersecting,


43
00:02:18,186 --> 00:02:21,156
and this is all rendered on
the GPU extremely efficiently.


44
00:02:22,496 --> 00:02:24,296
You also have animations
and physics.


45
00:02:24,296 --> 00:02:27,316
And what we did here
is we went above


46
00:02:27,316 --> 00:02:29,656
and beyond what you
really need for every game.


47
00:02:30,076 --> 00:02:30,866
We really want to make sure


48
00:02:30,866 --> 00:02:33,656
that you could do whatever
your imagination had in mind.


49
00:02:34,416 --> 00:02:37,026
So, animations and physics
are tied together so closely


50
00:02:37,636 --> 00:02:39,846
that you can animate
an object that is


51
00:02:39,946 --> 00:02:41,206
under the influence of physics.


52
00:02:41,746 --> 00:02:43,806
That should be quite special
if you've ever tried to do


53
00:02:43,806 --> 00:02:44,766
in 2D game with physics.


54
00:02:45,926 --> 00:02:47,596
We've also gone above
and beyond when it comes


55
00:02:47,646 --> 00:02:50,346
to system integration of
current media frameworks.


56
00:02:50,876 --> 00:02:55,256
Core audio, core image and even
foundation are all super easy


57
00:02:55,256 --> 00:02:56,216
to integrate into your game.


58
00:02:56,686 --> 00:03:00,026
So you can have video sprites,
you can apply core image effects


59
00:03:00,426 --> 00:03:02,016
to your whole scene
or individual sprites


60
00:03:02,496 --> 00:03:05,396
and you can also play sounds
as part of your animations.


61
00:03:05,936 --> 00:03:07,316
We want to make it
even easier for you.


62
00:03:07,866 --> 00:03:10,736
So, Sprite Kit is tightly
integrated into Xcode.


63
00:03:11,056 --> 00:03:14,876
We have a particle
editor that you can edit


64
00:03:14,876 --> 00:03:16,936
and create particles
with as you develop


65
00:03:17,726 --> 00:03:21,866
and we also have a very special
tool that you will notice


66
00:03:22,026 --> 00:03:23,276
or probably not look
at too often.


67
00:03:23,336 --> 00:03:26,266
And this is an Automatic
Texture Atlas generator.


68
00:03:27,226 --> 00:03:30,586
What it does is it analyzes
the files that you have in one


69
00:03:30,586 --> 00:03:32,106
of your source image folders.


70
00:03:33,016 --> 00:03:34,966
And if you say, I would
like this to be in Atlas,


71
00:03:35,046 --> 00:03:37,626
we will go through it, pack
it as efficiently as we can,


72
00:03:38,716 --> 00:03:39,846
but here's the real magic.


73
00:03:40,346 --> 00:03:42,986
If you started out using single
images and referencing them


74
00:03:42,986 --> 00:03:45,486
in code that way, when
you move to an Atlas,


75
00:03:45,846 --> 00:03:46,916
you won't have to
change the code.


76
00:03:47,326 --> 00:03:48,346
We figure it out for you.


77
00:03:48,766 --> 00:03:50,476
Okay, so let's get into it.


78
00:03:50,786 --> 00:03:53,666
So today, we have the
agenda of introducing


79
00:03:53,666 --> 00:03:54,846
of Sprite Kit of course to you.


80
00:03:55,026 --> 00:03:56,196
We'll go through
the known types.


81
00:03:57,266 --> 00:03:58,856
We will show you the
different effects and actions


82
00:03:58,856 --> 00:04:01,186
that you can apply and
we'll also show you physics.


83
00:04:02,346 --> 00:04:04,726
In the second session,
we're going to focus


84
00:04:04,726 --> 00:04:06,326
on designing games
using Sprite Kit.


85
00:04:06,936 --> 00:04:09,786
We have a legendary game
they offer here and we talk


86
00:04:09,786 --> 00:04:12,236
to you a little bit about
experimenting with Sprite Kit


87
00:04:12,786 --> 00:04:15,826
and the take-home demo that you
hopefully have all downloaded


88
00:04:15,826 --> 00:04:21,206
on the iOS 7 WWDC sample code
site called Adventure was


89
00:04:21,206 --> 00:04:23,076
actually designed and
developed very quickly


90
00:04:23,076 --> 00:04:23,746
about this gentleman.


91
00:04:24,216 --> 00:04:25,396
And I'm very excited
to have him here.


92
00:04:26,556 --> 00:04:30,516
Wilson talked about managing the
art pipeline, creating, editing,


93
00:04:30,516 --> 00:04:32,636
and using the art that
your artist has created.


94
00:04:32,636 --> 00:04:35,136
And then we'll have a bit
more of an in-depth look


95
00:04:35,136 --> 00:04:37,916
at the Xcode Support Sprite Kit.


96
00:04:37,916 --> 00:04:41,576
Okay? Now I'm going to show
you a demo of Adventure,


97
00:04:41,606 --> 00:04:43,076
in case you haven't seen it.


98
00:04:43,866 --> 00:04:44,806
So here we have Adventure,


99
00:04:45,186 --> 00:04:48,906
it's a multiplayer
controlling 2D game, topdown.


100
00:04:50,156 --> 00:04:52,166
I'm going to select
the archer in this case


101
00:04:52,546 --> 00:04:54,216
and we're going to
start playing.


102
00:04:55,016 --> 00:04:57,176
So this works with Game
Controllers, works on iOS


103
00:04:57,336 --> 00:05:02,066
and OS X and you can use the
keyboard and mouse to go around.


104
00:05:02,396 --> 00:05:05,636
So, we have an archer here who's
animating using frame-based


105
00:05:05,636 --> 00:05:06,666
animation on Sprites.


106
00:05:07,226 --> 00:05:09,526
We have particle systems that
are affecting the leaves here.


107
00:05:09,526 --> 00:05:10,716
You see the leaves
are falling down.


108
00:05:11,456 --> 00:05:14,156
We're doing some really
funky actions to fade


109
00:05:14,156 --> 00:05:15,416
up the trees as you
go under them.


110
00:05:15,926 --> 00:05:18,276
And you'll notice there's
even a parallax effect applied


111
00:05:18,276 --> 00:05:20,986
to this giving it
more of a depth feel.


112
00:05:21,846 --> 00:05:27,226
As you walk around and fire
arrows at the problems,


113
00:05:28,416 --> 00:05:30,476
these are all done
using particle systems.


114
00:05:31,296 --> 00:05:33,326
Not always are the flames
but particle systems too.


115
00:05:34,696 --> 00:05:37,616
Okay. Now I want you all to
have a look at that yourselves,


116
00:05:37,896 --> 00:05:41,236
download it, play with it,
modify it, it's yours to have.


117
00:05:42,106 --> 00:05:43,536
So, thank you for your time.


118
00:05:43,536 --> 00:05:46,506
I'm going to hand you over
now to our principal engineer


119
00:05:46,506 --> 00:05:48,826
on Sprite Kit, Tim Oriol,
and he's going to take you


120
00:05:48,826 --> 00:05:49,626
through all the details.


121
00:05:50,466 --> 00:05:52,466
Thank you so much for your
time and I hope you enjoy it.


122
00:05:52,786 --> 00:05:53,246
>> Thank you, Jacques.


123
00:05:53,576 --> 00:05:56,516
So what I'd like to do now
is give you a tour of the API


124
00:05:57,166 --> 00:05:59,646
and show you what Sprite Kit
has to offer for your games.


125
00:05:59,646 --> 00:06:01,786
So I'm going to start
with the basics.


126
00:06:02,416 --> 00:06:06,566
There's three basic parts to any
Sprite Kit game and not consists


127
00:06:06,566 --> 00:06:11,106
of your scenes, your animations
and actions, and physics.


128
00:06:11,626 --> 00:06:14,306
So scenes is the visual
layout of your game,


129
00:06:14,616 --> 00:06:16,596
all of your game
objects, your heroes,


130
00:06:16,596 --> 00:06:18,106
your bad guys, stuff like that.


131
00:06:18,596 --> 00:06:24,656
And actions in Sprite Kit allow
you to perform basic animations


132
00:06:24,656 --> 00:06:27,896
on these game objects
like Rotate,


133
00:06:27,986 --> 00:06:30,556
Scale, Movement, Tinting.


134
00:06:31,076 --> 00:06:34,956
And then the third component
is our built-in physics engine


135
00:06:34,956 --> 00:06:37,686
which you can use
with animations,


136
00:06:37,776 --> 00:06:40,416
or instead of animations
to bring life


137
00:06:40,506 --> 00:06:42,266
and excitement to your game.


138
00:06:43,656 --> 00:06:45,866
So let's take a closer look
at what we mean by scenes.


139
00:06:46,476 --> 00:06:50,196
So in Sprite Kit, your
scene is composed of a tree


140
00:06:50,196 --> 00:06:52,856
of multiple elements
which we call nodes.


141
00:06:53,616 --> 00:06:54,616
So these are all nodes.


142
00:06:55,206 --> 00:06:58,196
You know what, some of them
represent visual content


143
00:06:58,196 --> 00:07:03,566
such as shapes or images like
our background image or trees


144
00:07:03,626 --> 00:07:05,676
or the character
sprite for our hero.


145
00:07:06,206 --> 00:07:08,286
And other nodes are merely used


146
00:07:08,286 --> 00:07:10,886
as organizational
elements or for grouping.


147
00:07:11,256 --> 00:07:15,196
For example, we have one to
represent our background layer


148
00:07:15,506 --> 00:07:18,276
so this gives us a single
point where we could move


149
00:07:18,276 --> 00:07:19,686
and translate that one node


150
00:07:19,686 --> 00:07:21,096
and have it affect
all of our children.


151
00:07:21,396 --> 00:07:25,136
So, not every node in your scene
necessarily represents explicit


152
00:07:25,136 --> 00:07:25,806
visual content.


153
00:07:26,836 --> 00:07:28,336
And once you have
your scene built,


154
00:07:28,336 --> 00:07:31,676
you can then apply actions
and physics to any node


155
00:07:31,676 --> 00:07:36,966
within your scene and that's
how you put together the parts


156
00:07:36,966 --> 00:07:37,516
of Sprite Kit.


157
00:07:37,966 --> 00:07:39,816
But of course we also have
to get this into your app.


158
00:07:40,346 --> 00:07:42,226
And to do that, you're
going to want


159
00:07:42,406 --> 00:07:44,626
to add an SKView to your app.


160
00:07:44,626 --> 00:07:48,286
SKView is on both platforms,
so we subclass NSView on OS X


161
00:07:48,286 --> 00:07:50,296
and the UIView on iOS.


162
00:07:51,706 --> 00:07:54,356
So you drop that in and then
you simply tell the view


163
00:07:54,356 --> 00:07:55,386
to present your scene.


164
00:07:56,516 --> 00:07:58,496
So once you've done that,


165
00:07:58,496 --> 00:08:00,706
the basic Sprite Kit
game loop kicks in.


166
00:08:01,606 --> 00:08:03,546
And so this is the sequence
of events that's going


167
00:08:03,546 --> 00:08:06,306
to happen every frame once
your scene is in the view.


168
00:08:06,926 --> 00:08:10,186
And it will start off by calling
the update method on your scene.


169
00:08:10,806 --> 00:08:12,866
And, so this is where you're
going to be doing the majority


170
00:08:12,866 --> 00:08:15,306
of your game logic, this
is maybe where I'd choose


171
00:08:15,396 --> 00:08:16,746
to spawn additional enemies.


172
00:08:16,806 --> 00:08:21,576
Maybe I'm going to update the
high score or I'm going to check


173
00:08:21,576 --> 00:08:24,256
and see if my character has
completed all the necessary


174
00:08:24,256 --> 00:08:26,046
requirements to advance
to the next level.


175
00:08:26,046 --> 00:08:28,466
This is your basic
area to do game logic.


176
00:08:29,786 --> 00:08:31,626
After you've done all that,


177
00:08:31,706 --> 00:08:34,885
Sprite Kit will then evaluate
any actions attached to nodes


178
00:08:34,885 --> 00:08:36,275
in your scene for
the current frame.


179
00:08:36,916 --> 00:08:40,486
After all these actions
have been evaluated,


180
00:08:40,756 --> 00:08:42,885
Sprite Kit will let you know
that it's done doing that


181
00:08:43,126 --> 00:08:46,766
and give you a chance to react
to the result of those actions.


182
00:08:47,306 --> 00:08:50,896
So, at this point, this is after
the actions have been applied


183
00:08:51,266 --> 00:08:52,906
so the position of
all the elements


184
00:08:52,906 --> 00:08:54,936
in your game will be
exactly where they are


185
00:08:55,176 --> 00:08:56,706
when they're rendered
for this frame.


186
00:08:57,096 --> 00:09:00,246
So if I have a game where maybe
I've got some fireballs lying


187
00:09:00,246 --> 00:09:03,326
across the screen and I'm doing
that with some movement actions


188
00:09:03,326 --> 00:09:06,436
that I set up, this will be a
great place to check and see


189
00:09:06,436 --> 00:09:08,736
if the-- one of those fireballs
is completely off screen


190
00:09:08,736 --> 00:09:10,936
and we can go ahead
and clean that up


191
00:09:10,936 --> 00:09:12,016
and remove it from our scene.


192
00:09:13,436 --> 00:09:17,026
After that, Sprite Kit will
then simulate any physics


193
00:09:17,026 --> 00:09:19,806
that you may have set up on
some of the nodes in your scene.


194
00:09:20,496 --> 00:09:23,206
And it'll give you an
additional callback after that


195
00:09:23,616 --> 00:09:25,786
to let you know that the
physics have been simulated.


196
00:09:26,356 --> 00:09:28,256
This is where you can
clean up the results


197
00:09:28,256 --> 00:09:31,346
of the physics simulation or
react to different effects


198
00:09:31,346 --> 00:09:32,856
that may have been
done by physics.


199
00:09:33,136 --> 00:09:35,826
This is also your final
callback and your last chance


200
00:09:35,826 --> 00:09:40,836
to change state in the node
before Sprite Kit goes off


201
00:09:40,836 --> 00:09:42,626
and renders that to the view.


202
00:09:43,976 --> 00:09:47,166
You should note that after
the actions have been applied,


203
00:09:47,476 --> 00:09:49,856
any new action that
you've added to your scene


204
00:09:50,186 --> 00:09:53,096
in the following two
callbacks will not be evaluated


205
00:09:53,096 --> 00:09:54,806
into the next frame
because they've already been


206
00:09:54,806 --> 00:09:55,926
taken place.


207
00:09:57,136 --> 00:09:59,986
So, I'm going to give you
a complete tour of the API


208
00:09:59,986 --> 00:10:02,226
and we're going to go
through a lot of the headers.


209
00:10:02,626 --> 00:10:04,806
But first, I want to
give you a demo of part


210
00:10:04,806 --> 00:10:07,226
of the Xcode template that
we have available for you


211
00:10:07,226 --> 00:10:08,086
in the developer seed.


212
00:10:08,596 --> 00:10:12,156
And I really just wanted to
show you how much you can do


213
00:10:12,386 --> 00:10:16,956
with very little code and
really how approachable


214
00:10:16,956 --> 00:10:18,276
and readable this API is.


215
00:10:18,726 --> 00:10:22,576
And even without seeing the
API before, you should be able


216
00:10:22,576 --> 00:10:25,696
to follow along with
exactly what's going on even


217
00:10:25,696 --> 00:10:28,626
if you've never been
in the game before.


218
00:10:28,766 --> 00:10:29,986
So here, I've got
my zib [phonetic],


219
00:10:29,986 --> 00:10:33,346
I just got a big SKView
that I've put in here.


220
00:10:34,276 --> 00:10:38,136
And then in application
didFinishLaunching,


221
00:10:38,456 --> 00:10:41,466
I'm creating a new instance
of my scene which is the size


222
00:10:41,466 --> 00:10:44,826
of the view and just telling
my view to present that scene.


223
00:10:47,776 --> 00:10:50,706
So, let's take a look at
that subclass myScene.


224
00:10:52,296 --> 00:10:54,916
So, when the scene is
created where it looks


225
00:10:54,916 --> 00:10:56,906
like we're setting a
background color to what looks


226
00:10:56,906 --> 00:10:59,286
like a dark gray
on our scene here.


227
00:11:00,446 --> 00:11:03,626
And then we've implemented the
mouseDown handler and looks


228
00:11:03,626 --> 00:11:05,926
like we're getting the
location of the touch--


229
00:11:05,986 --> 00:11:10,406
excuse me, the mouseEvent
in our scene space.


230
00:11:10,926 --> 00:11:14,876
And then we're going to create
a Sprite using this selector


231
00:11:14,876 --> 00:11:17,606
SpriteNode with image
named "Spaceship",


232
00:11:17,816 --> 00:11:18,526
I wonder what that is.


233
00:11:18,976 --> 00:11:22,246
And then I have-- I'm just
going to add that to myScene


234
00:11:22,246 --> 00:11:25,746
and then I'll set the
position of the Sprite equal


235
00:11:25,746 --> 00:11:28,066
to the location of
that mouseEvent.


236
00:11:28,796 --> 00:11:31,006
Then I'm creating
something called an Action,


237
00:11:31,306 --> 00:11:35,566
looks like it's doing a rotation
by Pi for a duration of one.


238
00:11:35,896 --> 00:11:39,046
And I'm telling my Sprite to
repeat that action forever.


239
00:11:40,096 --> 00:11:42,786
So, this is-- we got about
28 lines of code here.


240
00:11:43,666 --> 00:11:46,406
So if I go ahead and run this,


241
00:11:47,736 --> 00:11:50,376
hopefully we'll get what
we'd expect to happen.


242
00:11:51,516 --> 00:11:56,536
[ Pause ]


243
00:11:57,036 --> 00:11:58,326
That's what I expect to happen.


244
00:11:58,776 --> 00:12:01,106
So we have our gray screen
here, that's what we set


245
00:12:01,106 --> 00:12:02,246
for our background color.


246
00:12:02,316 --> 00:12:04,676
And if I try clicking
in the scene,


247
00:12:04,926 --> 00:12:07,466
we've already got a Sprite
in our game and animating


248
00:12:07,536 --> 00:12:08,896
with just 28 lines of code.


249
00:12:08,956 --> 00:12:09,226
And then [inaudible].


250
00:12:10,516 --> 00:12:14,666
[ Applause ]


251
00:12:15,166 --> 00:12:17,406
And of course we can go crazy
and do that multiple times


252
00:12:17,406 --> 00:12:19,056
because we've implemented
as a mouseHandler.


253
00:12:19,416 --> 00:12:21,656
So, we just want to make it
really easy to get started


254
00:12:21,656 --> 00:12:23,736
and get you right into
making the actual game.


255
00:12:24,516 --> 00:12:29,526
[ Pause ]


256
00:12:30,026 --> 00:12:32,286
OK, so let's take a look at
the different types of nodes


257
00:12:32,286 --> 00:12:35,566
that we have available
in the SpriteKit.


258
00:12:35,566 --> 00:12:37,986
So, these are all the
nodes that we have.


259
00:12:38,116 --> 00:12:40,476
They all inherit from
the base class of SKNode


260
00:12:40,786 --> 00:12:42,836
and then we have
specialized subclasses


261
00:12:42,916 --> 00:12:45,356
to do various things
for you in your game.


262
00:12:45,356 --> 00:12:48,986
We have nodes for texts, we have
nodes of course for sprites,


263
00:12:49,456 --> 00:12:52,216
we have nodes for doing shapes


264
00:12:52,216 --> 00:12:54,506
and particle systems,
a lot of good stuff.


265
00:12:54,506 --> 00:12:58,626
And we're going to take a
look at each of these now.


266
00:12:58,676 --> 00:13:01,366
We'll start with the
base class, SKNode.


267
00:13:02,026 --> 00:13:03,936
SKNode has no inherent size


268
00:13:04,106 --> 00:13:05,656
because it has no
inherent content.


269
00:13:06,176 --> 00:13:08,566
So this is one of the nodes
that you would use as one


270
00:13:08,566 --> 00:13:10,726
of those organizational
elements within your scene.


271
00:13:11,146 --> 00:13:13,456
It has all of the basic
transform properties


272
00:13:13,456 --> 00:13:14,226
that you would want.


273
00:13:14,276 --> 00:13:17,786
You can do position,
rotation, scale on both axis,


274
00:13:17,786 --> 00:13:22,406
you can apply alpha to the node
which will also be multiplied


275
00:13:22,406 --> 00:13:25,366
down through to its children, so
you can fade out an entire tree.


276
00:13:25,366 --> 00:13:28,936
You can also disable the
rendering of an entire node tree


277
00:13:28,936 --> 00:13:31,276
by setting the hidden
flag on any of your nodes.


278
00:13:33,996 --> 00:13:35,456
The next stop is SpriteNode.


279
00:13:35,916 --> 00:13:37,686
This is the MVP of
the framework.


280
00:13:37,686 --> 00:13:38,496
This is the one they're going


281
00:13:38,496 --> 00:13:40,176
to be using all the
time in your game.


282
00:13:40,176 --> 00:13:43,056
This is going to be 80 percent
of the nodes in your scene.


283
00:13:43,806 --> 00:13:46,576
SpriteNode absolutely
does have an explicit size


284
00:13:47,016 --> 00:13:48,836
because it actually
provides content.


285
00:13:49,456 --> 00:13:50,796
It can do one of two things.


286
00:13:50,796 --> 00:13:52,806
It can be a solid color


287
00:13:52,806 --> 00:13:58,746
or it can also present a
texture like our Spaceship.


288
00:13:59,696 --> 00:14:02,166
So, let's talk about
textures for a minute.


289
00:14:03,416 --> 00:14:07,856
Textures are how SpriteKit
represents bitmap--


290
00:14:08,016 --> 00:14:10,976
reusable bitmap data
inside the framework.


291
00:14:11,586 --> 00:14:13,636
And they're automatically
managed by the framework,


292
00:14:14,016 --> 00:14:15,616
so you don't have to
worry too much about them.


293
00:14:15,926 --> 00:14:18,586
And we provided a number of
different ways that you can use


294
00:14:18,636 --> 00:14:21,276
to get your content into
a SpriteKit texture.


295
00:14:21,676 --> 00:14:24,646
The most common one of course
is the image name to one


296
00:14:24,646 --> 00:14:25,776
that we've seen a few times.


297
00:14:25,926 --> 00:14:29,776
You got image in your bundle,
this works exactly like UIImage


298
00:14:29,776 --> 00:14:32,296
or NSImage and we'll
go find that


299
00:14:32,296 --> 00:14:34,226
and load it up into the texture.


300
00:14:34,706 --> 00:14:41,146
You can also supply data using
CGImageRef, UIImage, NSImage


301
00:14:41,466 --> 00:14:44,766
or even your own buffer
of RGBA bitmap data.


302
00:14:46,106 --> 00:14:48,576
You can also even create
an additional texture


303
00:14:48,746 --> 00:14:51,476
from a subregion
of an existing one.


304
00:14:51,476 --> 00:14:54,676
So if I only wanted to show
that part of the Spaceship


305
00:14:55,186 --> 00:14:58,476
as another node, I can just
create a new texture using


306
00:14:58,476 --> 00:15:01,626
that subregion and it's actually
really cheap, SpriteKit's going


307
00:15:01,626 --> 00:15:03,366
to take care all the
work behind the scenes.


308
00:15:03,366 --> 00:15:05,886
We're not actually creating
an extra texture for that.


309
00:15:08,036 --> 00:15:11,326
So, here's some basic
that you might use


310
00:15:11,326 --> 00:15:12,716
to put a Sprite into your game.


311
00:15:13,106 --> 00:15:15,596
You can see, we create a
SpriteNode and then I'm going


312
00:15:15,596 --> 00:15:19,636
to create a texture using
my hero image then I'll set


313
00:15:19,636 --> 00:15:22,696
that texture on my sprite and
then I want to set the size


314
00:15:22,696 --> 00:15:26,126
of my sprite to match the size
of that image file that I used.


315
00:15:26,876 --> 00:15:28,266
This seems like something
that people are going


316
00:15:28,266 --> 00:15:29,196
to be doing all the time.


317
00:15:29,456 --> 00:15:30,506
So, we didn't want
you to have to go


318
00:15:30,506 --> 00:15:31,766
through all those four steps.


319
00:15:31,856 --> 00:15:34,306
One of the basic principles
in SpriteKit is we wanted


320
00:15:34,306 --> 00:15:36,466
to make things super
simple to do.


321
00:15:36,776 --> 00:15:39,206
And we have a convenience method


322
00:15:39,206 --> 00:15:40,636
that you can do this
all in one line.


323
00:15:41,006 --> 00:15:43,376
We'll go fetch the
image from your bundle,


324
00:15:43,796 --> 00:15:45,686
set that on the Sprite
and automatically set


325
00:15:45,836 --> 00:15:47,896
up its size to match the image.


326
00:15:48,086 --> 00:15:53,546
So, I've been telling the whole
truth before, it doesn't have


327
00:15:53,546 --> 00:15:55,446
to be just a color or a texture.


328
00:15:55,966 --> 00:15:58,966
SpriteNodes can also do a
blend of the two together.


329
00:15:59,566 --> 00:16:02,256
So, if you have both a
color and a texture set


330
00:16:02,666 --> 00:16:05,206
on your SpriteNode, you
can control the mixing


331
00:16:05,206 --> 00:16:07,416
of the this two through
a third property


332
00:16:07,416 --> 00:16:08,726
called colorBlendFactor.


333
00:16:09,436 --> 00:16:13,306
So, this will allow you to tint
the texture using that color


334
00:16:13,306 --> 00:16:16,186
that you've set on the
node, where 0 is no tinting


335
00:16:16,186 --> 00:16:17,446
and we get the full texture.


336
00:16:17,856 --> 00:16:23,386
And 1.0 is fully tinted and
the textures then only used


337
00:16:23,386 --> 00:16:25,346
for alpha and luminance
information.


338
00:16:25,696 --> 00:16:27,946
And it's really cool that the
alpha doesn't get overwritten


339
00:16:27,946 --> 00:16:31,476
as well which means that I
can use these game elements


340
00:16:31,476 --> 00:16:33,736
at different parts in my game.


341
00:16:33,736 --> 00:16:36,976
For example, I can tint my
hero red when it gets hit


342
00:16:36,976 --> 00:16:38,236
by an enemy projectile.


343
00:16:38,596 --> 00:16:41,396
I can also have background
elements like this crystal here.


344
00:16:41,396 --> 00:16:45,106
Maybe I wanted to look cool
in icy-blue in my ice world


345
00:16:45,106 --> 00:16:47,826
and I'm going to use it later on
in my fire world and I'm going


346
00:16:47,826 --> 00:16:48,806
to have it be glowy red.


347
00:16:48,806 --> 00:16:52,236
It just allows you a lot more
freedom, so you're not tied


348
00:16:52,236 --> 00:16:56,206
to a generating explicit
images for every type of effect


349
00:16:56,206 --> 00:17:00,596
that you want to
do in your game.


350
00:17:01,016 --> 00:17:03,686
So, we want to take
a look at the effect


351
00:17:04,185 --> 00:17:07,016
of all the different properties
that we have on SpriteNode,


352
00:17:07,126 --> 00:17:09,976
many of them inherited from
SKNode that we just talked about


353
00:17:10,425 --> 00:17:12,256
and how they would affect
how the Sprite will look.


354
00:17:12,766 --> 00:17:15,546
So, the first two lines
here just gets our Sprite


355
00:17:15,546 --> 00:17:17,996
on a screen, so that's
exactly what we would expect.


356
00:17:18,496 --> 00:17:20,326
And then we can play
around with the alpha,


357
00:17:20,836 --> 00:17:22,425
maybe fade it out a little bit.


358
00:17:22,906 --> 00:17:26,396
We can modify the scale and
the texture will be stretched.


359
00:17:26,896 --> 00:17:31,316
And then we can also
do a rotation


360
00:17:31,616 --> 00:17:34,016
or we can set the color as well.


361
00:17:34,736 --> 00:17:36,876
You notice when you do set
the color, it's not going


362
00:17:36,876 --> 00:17:37,976
to have an immediate effect


363
00:17:37,976 --> 00:17:40,796
until you also set
the colorBlendFactor


364
00:17:40,796 --> 00:17:42,396
because it will default to 0


365
00:17:42,396 --> 00:17:44,626
when you've created a
Sprite using an image.


366
00:17:45,126 --> 00:17:49,136
And that's what we'd get if
we set the colorblend factor


367
00:17:49,136 --> 00:17:51,436
to 1 using green as our color.


368
00:17:51,896 --> 00:17:54,456
Next up, emitters.


369
00:17:55,076 --> 00:17:56,426
How can you have
a 2D game engine


370
00:17:56,426 --> 00:17:57,806
without having particle systems?


371
00:17:58,096 --> 00:17:59,466
So, SpriteKit of course shift


372
00:17:59,466 --> 00:18:02,986
to the fully featured
2D particle system.


373
00:18:03,116 --> 00:18:05,606
We support all of the basic
functionality that you know


374
00:18:05,606 --> 00:18:08,886
and love from particle
systems like startValue


375
00:18:08,886 --> 00:18:11,646
for all the different properties
we have to configure as well


376
00:18:11,646 --> 00:18:13,846
as variants about
those values and speed


377
00:18:13,846 --> 00:18:15,826
over time once the
particles are emitted.


378
00:18:15,826 --> 00:18:19,916
But we also support advance
features like keyframe sequences


379
00:18:19,916 --> 00:18:21,366
for certain values on particles.


380
00:18:21,776 --> 00:18:25,106
For example, I can set
up a keyframe sequence


381
00:18:25,506 --> 00:18:29,106
that ties the lifetime of
the particle to color values.


382
00:18:29,106 --> 00:18:31,096
And we can get a really cool
effect like the fire here


383
00:18:31,096 --> 00:18:32,526
where the particles
actually pass


384
00:18:32,556 --> 00:18:35,306
through numerous different color
values over their lifetime.


385
00:18:35,576 --> 00:18:40,866
We have-- there's a number of
different things, of course,


386
00:18:40,866 --> 00:18:42,326
you can set on your
particle systems.


387
00:18:42,816 --> 00:18:44,726
Of course, you can set the
texture that's going to be used


388
00:18:44,726 --> 00:18:47,296
to render those particles,
scale, and rotation.


389
00:18:47,656 --> 00:18:49,226
You can set the emission
angle that they're going


390
00:18:49,226 --> 00:18:50,236
to be launched out at.


391
00:18:50,296 --> 00:18:53,586
You can set variants
around that emission angle,


392
00:18:53,586 --> 00:18:55,616
so you can create a cone,


393
00:18:55,876 --> 00:18:59,236
the speed at which they're
launched out, blend modes.


394
00:18:59,296 --> 00:19:01,146
There're just really so
many things you can surround


395
00:19:01,146 --> 00:19:02,676
and just tweak these
things for hours.


396
00:19:03,536 --> 00:19:05,586
Which is of course why we
didn't want you to do an encode


397
00:19:05,666 --> 00:19:07,566
and we have the editor
built right in to Xcode.


398
00:19:07,946 --> 00:19:10,776
This allows you to use data
driven particle effects,


399
00:19:11,086 --> 00:19:13,296
it allows you to empower
your artist and allow them


400
00:19:13,296 --> 00:19:15,826
to iterate independently
from development in the code,


401
00:19:16,206 --> 00:19:19,096
and it'll greatly
reduce iteration time


402
00:19:19,196 --> 00:19:21,256
for tweaking these
tiny visual effects


403
00:19:21,256 --> 00:19:23,356
and lets you get exactly
the affects you want.


404
00:19:24,096 --> 00:19:28,046
The editor in Xcode is built
off of a Sprite Kit view itself,


405
00:19:28,046 --> 00:19:30,236
so you're getting real
life content there.


406
00:19:30,236 --> 00:19:31,566
You're going to know
exactly what it's going


407
00:19:31,566 --> 00:19:32,476
to look like in your game.


408
00:19:33,086 --> 00:19:35,806
So, next I want to talk a
little bit about video in games.


409
00:19:36,266 --> 00:19:39,946
So, up until now what I've
seen in terms of video


410
00:19:39,946 --> 00:19:42,756
in games is people have put
video above their game view.


411
00:19:43,366 --> 00:19:46,236
Some people have even made
transparent game using put video


412
00:19:46,236 --> 00:19:46,816
behind it.


413
00:19:47,406 --> 00:19:48,846
Or if you wanted
to do anything else


414
00:19:48,846 --> 00:19:50,906
that was pretty much
roll your own in OpenGL.


415
00:19:51,506 --> 00:19:55,246
But in Sprite Kit, video is
truly a first class sprite.


416
00:19:55,936 --> 00:19:57,026
So, what does this mean?


417
00:19:57,366 --> 00:19:59,606
This means of course we have
an easy one line convenience


418
00:19:59,606 --> 00:20:00,806
function for you to get video


419
00:20:00,806 --> 00:20:01,976
from a file directly
into your game.


420
00:20:02,046 --> 00:20:06,846
You can create a VideoNode using
a video file in your bundle,


421
00:20:07,326 --> 00:20:10,496
and this supports playback
and pausing of that video.


422
00:20:11,376 --> 00:20:13,076
If you want more
advanced controls,


423
00:20:13,076 --> 00:20:16,596
we also support using AV
foundations, AVPlayer,


424
00:20:16,596 --> 00:20:18,776
as a means to create
a video node


425
00:20:18,776 --> 00:20:22,226
which will allow you
advanced playback controls


426
00:20:22,226 --> 00:20:25,306
like playback speed,
asynchronous loading,


427
00:20:25,306 --> 00:20:27,306
even queuing up multiple videos.


428
00:20:27,306 --> 00:20:29,546
So you can really
do a lot with this.


429
00:20:29,906 --> 00:20:31,606
And it opens up like
a whole new world


430
00:20:31,606 --> 00:20:33,516
of possibilities
for video in games.


431
00:20:33,876 --> 00:20:35,856
So, I can now place it
anywhere in my node tree.


432
00:20:35,856 --> 00:20:38,716
I can have spaceships lying
behind and in front of my video.


433
00:20:39,116 --> 00:20:41,656
I can run actions no my
videos since this is a node.


434
00:20:41,656 --> 00:20:42,346
I can rotate.


435
00:20:42,346 --> 00:20:43,556
I can scale it, fade it.


436
00:20:44,216 --> 00:20:46,726
I can even use video
as my level background.


437
00:20:47,126 --> 00:20:49,276
If I wanted to be really
creative, I could enable physics


438
00:20:49,276 --> 00:20:51,436
on my video and have them
floating around my scene.


439
00:20:51,826 --> 00:20:53,086
Anything you can
do with the Sprite,


440
00:20:53,086 --> 00:20:54,206
you can now do with video.


441
00:20:54,986 --> 00:20:56,446
Next, ShapeNodes.


442
00:20:56,646 --> 00:21:00,656
ShapeNodes are a great way to
display dynamic geometric shapes


443
00:21:00,656 --> 00:21:02,986
within your game, we've
made it really easy


444
00:21:02,986 --> 00:21:05,236
and we're using CGPath
as the container for you


445
00:21:05,236 --> 00:21:07,546
to supply shapes to Sprite Kit


446
00:21:07,546 --> 00:21:09,686
so you can use all the
great core graphics,


447
00:21:09,686 --> 00:21:13,786
convenience functions to create
ellipsis, rectangles, circles.


448
00:21:13,786 --> 00:21:16,696
You can have complex shapes


449
00:21:17,376 --> 00:21:19,666
like this animating
doughnut above here.


450
00:21:20,176 --> 00:21:23,216
We support stroking and
feeling the path as well.


451
00:21:23,216 --> 00:21:27,616
We even allow you to do a glow
effect like the yellow line


452
00:21:27,616 --> 00:21:29,226
in the bottom here,
sort of fringes out,


453
00:21:29,226 --> 00:21:31,296
create a cool laser
light effect.


454
00:21:32,286 --> 00:21:33,656
We also have LabelNodes.


455
00:21:34,126 --> 00:21:36,836
So, for most of the UI in your
game, you're going to want


456
00:21:36,836 --> 00:21:39,236
to use UIKit or AppKit
for buttons


457
00:21:39,236 --> 00:21:40,906
and editable texts
and stuff like that.


458
00:21:41,416 --> 00:21:44,056
But sometimes you really
want text in your app.


459
00:21:44,056 --> 00:21:45,346
I mean directly in your game.


460
00:21:45,486 --> 00:21:48,496
I want to apply those same
Sprite Kit actions to my text.


461
00:21:48,806 --> 00:21:54,026
I want them to be between
nodes within my scene and to do


462
00:21:54,026 --> 00:21:57,196
that Sprite Kit allows
you to use LabelNodes


463
00:21:57,196 --> 00:22:00,346
to have single line text
in your game as a sprite.


464
00:22:00,806 --> 00:22:04,316
And we support all the system
fonts in either platform


465
00:22:04,316 --> 00:22:06,196
and any custom fonts
that you may have added


466
00:22:06,196 --> 00:22:07,026
to your apps bundle.


467
00:22:07,666 --> 00:22:10,636
We also support, since it's
a node, all of the SKActions


468
00:22:11,686 --> 00:22:13,476
which means I can animate,


469
00:22:13,476 --> 00:22:16,326
rotate my text using the exact
same actions that I've built


470
00:22:16,376 --> 00:22:18,026
to animate my game characters.


471
00:22:18,296 --> 00:22:23,156
EffectNode, this
one is really cool.


472
00:22:23,606 --> 00:22:26,766
So, what EffectNodes do
is they will render all


473
00:22:26,766 --> 00:22:29,616
of their children into
an offscreen image


474
00:22:29,696 --> 00:22:33,186
when we're generating
the frame and then


475
00:22:33,186 --> 00:22:35,376
that image will then
be presented


476
00:22:35,376 --> 00:22:37,066
into the final frame buffer.


477
00:22:37,416 --> 00:22:40,516
So, this allows you to do
some really cool effects


478
00:22:40,516 --> 00:22:42,946
like group opacity
and group blend modes


479
00:22:43,306 --> 00:22:45,446
by having the children
of the EffectNode render


480
00:22:45,446 --> 00:22:47,796
into that offscreen image
using their own opacity


481
00:22:48,076 --> 00:22:51,196
and blend modes and then
the resulting image is then


482
00:22:52,156 --> 00:22:55,446
presented into the frame buffer
using the EffectNodes' opacity


483
00:22:55,446 --> 00:22:56,066
and blend mode.


484
00:22:56,646 --> 00:22:58,816
And we've also-- since we
already have this offscreen


485
00:22:58,816 --> 00:23:00,676
image, we thought it'd be
really cool to allow you


486
00:23:00,676 --> 00:23:02,776
to apply our vast library


487
00:23:02,776 --> 00:23:05,516
of core image filters
on both platforms.


488
00:23:05,516 --> 00:23:08,696
We got a lot of great new
ones in iOS for iOS 7 now too


489
00:23:09,216 --> 00:23:10,826
to that image before
we render it.


490
00:23:11,086 --> 00:23:15,396
So you can take the output
of an EffectNode and send it


491
00:23:15,396 --> 00:23:17,356
through a blur filter
or a pinch filter


492
00:23:17,596 --> 00:23:20,396
and you can do this anywhere in
your game scene or I can do it


493
00:23:20,396 --> 00:23:22,446
on the entire game
scene like we have here.


494
00:23:22,976 --> 00:23:27,846
You can also cache the
output of that filter


495
00:23:28,166 --> 00:23:29,686
if you're not going
to be animating it.


496
00:23:30,096 --> 00:23:32,696
So if I want to apply a
really nice Gaussian blur


497
00:23:32,696 --> 00:23:36,486
to my game world and then put a
Pause menu above that and I know


498
00:23:36,486 --> 00:23:39,126
that my game is not going to
be animated during that time,


499
00:23:39,426 --> 00:23:41,966
I can tell my EffectNode
that it should rasterize


500
00:23:42,366 --> 00:23:44,706
and then we only
incurred the cost of doing


501
00:23:44,706 --> 00:23:48,366
that full screen Gaussian blur
once and then it will be reused


502
00:23:48,446 --> 00:23:50,126
from the cache every time
the frame is rendered


503
00:23:50,126 --> 00:23:53,506
so you can still animate your
menus and your icons on top


504
00:23:53,506 --> 00:23:55,246
of that and not have to worry


505
00:23:55,246 --> 00:23:57,266
about having the filter
applied every frame.


506
00:23:57,716 --> 00:24:00,656
We also support a form
of superfast masking


507
00:24:00,656 --> 00:24:03,076
in Sprite Kit using
the CropNode.


508
00:24:03,446 --> 00:24:06,676
So, what a CropNode will do
is it will mask out a portion


509
00:24:07,016 --> 00:24:08,156
of its children's content.


510
00:24:08,746 --> 00:24:11,746
And the way you supply that
mask is not via an image


511
00:24:12,046 --> 00:24:13,146
but via a node.


512
00:24:13,216 --> 00:24:15,336
So any node that's not
currently in your scene.


513
00:24:15,596 --> 00:24:18,406
So that means I can use an
image by using a SpriteNode,


514
00:24:18,636 --> 00:24:20,576
I can use a shape if
I use a ShapeNode.


515
00:24:20,856 --> 00:24:23,066
I can even have children
in that node.


516
00:24:23,066 --> 00:24:24,836
So, it doesn't have
to be just one node.


517
00:24:24,836 --> 00:24:27,466
I can have an entire tree
that makes up this mask.


518
00:24:28,586 --> 00:24:30,526
And since those masks are nodes,


519
00:24:30,986 --> 00:24:32,506
of course we can
animate them as well.


520
00:24:32,816 --> 00:24:36,556
So we can have dynamic
masking on the fly in our app


521
00:24:36,896 --> 00:24:39,716
and we can animate both the
objects that are being masked--


522
00:24:39,946 --> 00:24:42,746
masked as well as
the mask itself.


523
00:24:43,476 --> 00:24:45,806
So we can have a
spaceship flying


524
00:24:45,806 --> 00:24:49,926
around with a particle system
massive exhaust trail being used


525
00:24:49,926 --> 00:24:52,606
in real time to mask, let's
say a video node in our scene.


526
00:24:52,606 --> 00:24:54,426
Now, let's talk a
little bit more


527
00:24:54,426 --> 00:24:56,486
about those actions
and animations.


528
00:24:57,216 --> 00:25:00,596
So, when we went to design the
action system for Sprite Kit,


529
00:25:00,986 --> 00:25:02,526
we want it to be super simple,


530
00:25:02,586 --> 00:25:05,566
we want it to be really
readable, we wanted it


531
00:25:05,566 --> 00:25:07,006
to not be confusing at all.


532
00:25:07,376 --> 00:25:09,346
So, we only have one
class where you need to go


533
00:25:09,346 --> 00:25:12,816
to find these actions and
every action, that's SKAction,


534
00:25:13,276 --> 00:25:16,396
and every action can be created
using a single line convenience


535
00:25:16,396 --> 00:25:18,486
method just like all of the
other nodes that we offer.


536
00:25:18,996 --> 00:25:21,926
We wanted them to be
extremely readable.


537
00:25:21,926 --> 00:25:24,456
We wanted the actions to be
reusable so you didn't have


538
00:25:24,456 --> 00:25:26,046
to build them again for
every Sprite you wanted


539
00:25:26,046 --> 00:25:26,646
to run them on.


540
00:25:26,646 --> 00:25:28,596
We want them to be chainable


541
00:25:28,596 --> 00:25:30,246
so you can sequence
them really easily.


542
00:25:30,246 --> 00:25:33,356
We wanted actions to
directly affect your nodes.


543
00:25:33,356 --> 00:25:37,386
We wanted you to know that
if you inspect a value


544
00:25:37,726 --> 00:25:39,356
on your node before
it gets rendered,


545
00:25:39,356 --> 00:25:41,376
that's the exact value that's
going to be rendered at.


546
00:25:42,606 --> 00:25:44,386
And we really wanted
to be almost


547
00:25:44,386 --> 00:25:46,726
like a scripting
language for Sprite Kit.


548
00:25:48,856 --> 00:25:51,586
So of course we've had-- we
have all the basic actions,


549
00:25:51,586 --> 00:25:55,236
movements, scaling,
translate, fade-in, fade-out,


550
00:25:55,886 --> 00:26:00,726
and how do I run
those on my nodes?


551
00:26:00,896 --> 00:26:04,176
I just tell my SpriteNode
or any node


552
00:26:04,176 --> 00:26:05,716
in my scene to run that action.


553
00:26:06,176 --> 00:26:07,526
I'll say runAction, pass it in.


554
00:26:08,006 --> 00:26:10,666
Like I said, they're copied
on ads so you can go ahead


555
00:26:10,666 --> 00:26:13,446
and reuse this action later
on or if you're not going


556
00:26:13,446 --> 00:26:15,716
to reuse it, you can even
create the action inline


557
00:26:15,926 --> 00:26:18,356
like the second sample
here without the need


558
00:26:18,356 --> 00:26:19,566
for making that explicit object.


559
00:26:20,926 --> 00:26:23,286
They're automatically removed
on completion so you don't have


560
00:26:23,286 --> 00:26:24,776
to worry about managing
the actions


561
00:26:24,776 --> 00:26:26,646
that are currently
playing on a node.


562
00:26:28,816 --> 00:26:30,796
We also support repeating
an action.


563
00:26:30,796 --> 00:26:34,106
So, if you've already built a
rotate action and you're going


564
00:26:34,106 --> 00:26:36,286
to be applying it to different
nodes but maybe some are going


565
00:26:36,286 --> 00:26:39,586
to rotate longer than others,
you can repeat an action


566
00:26:39,716 --> 00:26:42,886
by using as input
to the repeat action


567
00:26:42,886 --> 00:26:45,746
in already existing action and
this will work on any action.


568
00:26:46,286 --> 00:26:48,106
And you can specify a
repeat count for that.


569
00:26:48,436 --> 00:26:49,866
Or if you wanted
to keep animating


570
00:26:49,866 --> 00:26:51,756
until that Sprite is
removed from the scene,


571
00:26:52,026 --> 00:26:53,956
you can do that as well
using repeat forever.


572
00:26:56,996 --> 00:27:00,246
So, I mentioned the actions,
they'll run immediately


573
00:27:00,246 --> 00:27:01,166
when you put them on the node


574
00:27:01,166 --> 00:27:02,546
and they directly
affect the node.


575
00:27:02,976 --> 00:27:05,396
So the way that I would
sequence my actions is


576
00:27:05,766 --> 00:27:07,606
of course by using a sequence.


577
00:27:08,006 --> 00:27:11,926
We have a sequence
constructor that takes an array


578
00:27:11,926 --> 00:27:14,826
of existing actions and we'll
play them back in order,


579
00:27:14,946 --> 00:27:18,106
run the first one to completion,
then the second, then the third.


580
00:27:18,646 --> 00:27:21,796
I don't know if all of you know
about the NSArray literal syntax


581
00:27:21,796 --> 00:27:24,846
in Objective-C but it's awesome
and I highly recommend using it


582
00:27:24,846 --> 00:27:27,986
in Sprite Kit, it's fantastic
for building up your sequences


583
00:27:28,876 --> 00:27:32,146
with very little code.


584
00:27:32,356 --> 00:27:33,606
We also have groups.


585
00:27:34,056 --> 00:27:37,436
So, groups will allow you to
use the same basic paradigm


586
00:27:37,436 --> 00:27:39,546
by passing in an array
of existing actions,


587
00:27:39,986 --> 00:27:41,736
and this time we'll
run them in parallel.


588
00:27:42,136 --> 00:27:44,606
So, on a group, the duration


589
00:27:44,606 --> 00:27:47,756
of a group is the
longest of its components.


590
00:27:47,806 --> 00:27:51,736
So, if the longest action in my
group is two, the group will run


591
00:27:51,786 --> 00:27:54,726
until the duration of
its longest component,


592
00:27:55,056 --> 00:27:58,736
whereas the sequence
duration is the sum


593
00:27:58,736 --> 00:28:01,186
of all of its components.


594
00:28:01,186 --> 00:28:04,176
Now, groups and sequences
are themselves actions.


595
00:28:04,846 --> 00:28:07,696
So this means that we can
use groups as sequences


596
00:28:08,366 --> 00:28:10,806
as building blocks for
other groups and sequences.


597
00:28:11,936 --> 00:28:15,136
So, we can have a group
that is part of a sequence.


598
00:28:15,556 --> 00:28:19,196
If I wanted a spaceship to fly
in from the side of the scene


599
00:28:19,496 --> 00:28:22,016
and then I wanted to rotate
and scale up at the same time,


600
00:28:22,016 --> 00:28:23,456
and then I'm going
to fade it out,


601
00:28:23,796 --> 00:28:27,976
I can do that by first creating
a group that performs the rotate


602
00:28:27,976 --> 00:28:31,366
in scale together and then I'll
use that as a second element


603
00:28:31,366 --> 00:28:34,846
in my sequence like here and we
can get the exact desired effect


604
00:28:35,116 --> 00:28:36,106
by running that on my node.


605
00:28:36,596 --> 00:28:39,936
So, if actions run immediately,
what do I do about timing?


606
00:28:40,156 --> 00:28:42,796
We don't want you to have
to set up timers or worry


607
00:28:42,796 --> 00:28:46,756
about counting ticks yourselves
so we've created another action


608
00:28:46,836 --> 00:28:48,076
which pretty much does nothing.


609
00:28:48,396 --> 00:28:50,066
It's a waitForDuration action.


610
00:28:50,386 --> 00:28:52,066
I don't recommend just
running this on a node,


611
00:28:52,066 --> 00:28:53,386
it's going to do
absolutely nothing


612
00:28:53,776 --> 00:28:57,266
but where it's really useful
is using it as a component


613
00:28:57,626 --> 00:28:59,326
of the sequences that
we just mentioned.


614
00:28:59,666 --> 00:29:02,286
So if I want to kick off in
animation one second from now,


615
00:29:02,666 --> 00:29:03,726
I'll create a sequence,


616
00:29:03,776 --> 00:29:06,816
do a wait for one second
first followed by the action


617
00:29:06,816 --> 00:29:10,126
that I want to perform and
tell my Sprite to run that.


618
00:29:12,616 --> 00:29:16,976
Those are you basic actions
in terms of translation


619
00:29:16,976 --> 00:29:21,116
and transformation as well
as timing and grouping.


620
00:29:21,656 --> 00:29:23,686
We also have a number
of specialty actions


621
00:29:23,726 --> 00:29:25,716
that do specific tasks
within your game.


622
00:29:26,276 --> 00:29:28,526
One that we definitely
need to have


623
00:29:28,526 --> 00:29:31,216
of course is
animateWithTextures.


624
00:29:31,616 --> 00:29:35,246
So this will allow you to
specify an array of textures


625
00:29:35,366 --> 00:29:38,416
that you want to use on your
node and the timePerFrame


626
00:29:38,416 --> 00:29:40,336
that you want those
textures to be displayed.


627
00:29:41,036 --> 00:29:43,356
And this is how we've done
all the character animations


628
00:29:43,356 --> 00:29:44,386
in the Adventure sample.


629
00:29:46,816 --> 00:29:51,056
We also found that people like
to follow paths a lot in games.


630
00:29:51,056 --> 00:29:53,666
So we built in a
followPath action as well.


631
00:29:54,146 --> 00:29:58,276
And you can specify the path
using a CGPath and a duration


632
00:29:58,276 --> 00:30:00,286
for the sprite to
follow that path.


633
00:30:00,286 --> 00:30:02,126
And by default we'll
do what most--


634
00:30:02,126 --> 00:30:05,326
what we expect most people to
want to happen is for the Sprite


635
00:30:05,326 --> 00:30:07,026
to automatically
orient to the past.


636
00:30:07,166 --> 00:30:09,086
So you don't have to worry
about which way it's facing


637
00:30:09,086 --> 00:30:09,976
at every point along the path.


638
00:30:10,046 --> 00:30:12,636
It will also treat
that path as an offset


639
00:30:12,636 --> 00:30:14,796
from its current position so
it doesn't immediately jump


640
00:30:14,796 --> 00:30:15,816
when you start following
the path


641
00:30:16,626 --> 00:30:18,896
and we have an expanded form
of that action if you want


642
00:30:18,896 --> 00:30:20,686
to configure any of
those two options.


643
00:30:21,126 --> 00:30:24,046
If I have a platform
that's moving around


644
00:30:24,046 --> 00:30:25,726
and I always want it to
stay vertical you can do


645
00:30:25,726 --> 00:30:30,036
that as well, just use
the extended forms.


646
00:30:30,696 --> 00:30:32,366
Removing a sprite from parent.


647
00:30:32,876 --> 00:30:35,146
So a lot of times in
my game, I go through,


648
00:30:35,146 --> 00:30:37,896
I find all the bad guys that
were hit and then I want


649
00:30:37,896 --> 00:30:39,486
to run some sort
of death animation


650
00:30:39,486 --> 00:30:40,746
on them, fade them out.


651
00:30:41,146 --> 00:30:42,816
But then I still have
this SpriteNode hanging


652
00:30:42,816 --> 00:30:45,366
out in my game and a lot of
times we find people have


653
00:30:45,366 --> 00:30:48,456
to build up these arrays of
Sprites that are to be removed


654
00:30:48,456 --> 00:30:50,086
in the future and
then periodically go


655
00:30:50,086 --> 00:30:50,736
and clean them out.


656
00:30:51,186 --> 00:30:52,106
It sounds like a
pain in the butt.


657
00:30:52,696 --> 00:30:56,406
So, what we did is we made
removeFromParent in action.


658
00:30:56,776 --> 00:30:59,036
And you can use this as
part of your sequences.


659
00:30:59,316 --> 00:31:01,076
So, if I already
built up a sequence


660
00:31:01,076 --> 00:31:05,136
that has my fadeout animation
for any of these characters


661
00:31:05,136 --> 00:31:07,406
and they need to be removed,
I can just insert or remove


662
00:31:07,406 --> 00:31:09,586
from parent at the end of
the sequence, I never have


663
00:31:09,586 --> 00:31:10,416
to worry about it again.


664
00:31:10,656 --> 00:31:12,696
We also found that people want
to play sound in their game.


665
00:31:12,696 --> 00:31:14,886
They wanted to really easy
to play sound in their game


666
00:31:15,336 --> 00:31:17,436
and for short sound
effects I want


667
00:31:17,436 --> 00:31:18,846
to time those with my actions.


668
00:31:19,106 --> 00:31:20,926
If I have a [inaudible]
that's casting a spell


669
00:31:20,926 --> 00:31:22,676
and I have an action
for that and I want


670
00:31:22,676 --> 00:31:25,236
to fire a sound effect
directly timed with that action,


671
00:31:25,536 --> 00:31:27,926
we don't want you setting up a
timer and hope that it lines up.


672
00:31:28,576 --> 00:31:30,206
We've actually built
in a way for you


673
00:31:30,206 --> 00:31:32,316
to play short sound
effects right


674
00:31:32,316 --> 00:31:36,536
in an SKAction using the same
one line convenience method


675
00:31:36,536 --> 00:31:39,526
that we do for everything else
directly from a sound file


676
00:31:39,526 --> 00:31:41,496
in your bundle right
into your game.


677
00:31:42,566 --> 00:31:47,986
And so, this allows you a really
simple use of sounds of course


678
00:31:47,986 --> 00:31:50,736
if you want to do longer
playback or you want


679
00:31:50,736 --> 00:31:55,226
to have complex control over the
volume or asynchronous loading


680
00:31:55,226 --> 00:31:57,836
of these assets then
we recommend checking


681
00:31:57,836 --> 00:31:59,536
out our AVFoundation framework


682
00:31:59,566 --> 00:32:01,896
for more fine grain
control of the sounds.


683
00:32:01,936 --> 00:32:03,786
But this is a fantastic
way if you just want


684
00:32:03,786 --> 00:32:06,316
to kick off a sound effect
every time you play an action


685
00:32:06,316 --> 00:32:06,776
in your game.


686
00:32:07,286 --> 00:32:08,336
We also have runBlock.


687
00:32:08,386 --> 00:32:09,896
People want callbacks
in their games.


688
00:32:09,896 --> 00:32:13,096
Sometimes you have logic in
your game that isn't really tied


689
00:32:13,096 --> 00:32:14,696
to an action on one
of your sprites.


690
00:32:15,016 --> 00:32:15,766
Well, now it can be.


691
00:32:16,086 --> 00:32:19,856
So, now you can insert
a runBlock into any


692
00:32:19,856 --> 00:32:22,346
of your sequences that
you use in your game


693
00:32:22,636 --> 00:32:25,216
and will automatically execute
that exactly at the point


694
00:32:25,216 --> 00:32:26,316
in the sequence when
it gets there.


695
00:32:26,316 --> 00:32:29,636
In which we really tried
to provide a vast variety


696
00:32:29,636 --> 00:32:32,706
of different actions that you
can use but we're not going


697
00:32:32,706 --> 00:32:33,926
to think of absolutely
everything


698
00:32:33,926 --> 00:32:34,866
that people want to do.


699
00:32:34,866 --> 00:32:38,136
So we've created a way for you
to make your own custom actions.


700
00:32:38,586 --> 00:32:41,416
You can do a custom action,
specify a duration for that


701
00:32:41,906 --> 00:32:44,946
as well as a block that
will be executed every frame


702
00:32:44,946 --> 00:32:46,506
when this animation
is evaluated.


703
00:32:46,506 --> 00:32:48,476
And we're going to give
you a reference to the node


704
00:32:48,476 --> 00:32:51,716
that it's currently being
evaluated on as well


705
00:32:51,716 --> 00:32:54,736
as the elapse time that
the action has already run.


706
00:32:54,736 --> 00:32:56,766
So you can use this
to do any sort


707
00:32:56,836 --> 00:32:58,486
of things you want
to the Sprite.


708
00:32:58,546 --> 00:33:01,276
You can even animate things
that aren't even in your game.


709
00:33:01,276 --> 00:33:05,286
If I wanted to automatically
swirl around the emission point


710
00:33:05,286 --> 00:33:07,596
for one of my particle systems
I could do it like this.


711
00:33:07,596 --> 00:33:09,406
I can get some really
cool effects.


712
00:33:10,326 --> 00:33:11,886
And those are just a
few of the actions.


713
00:33:11,886 --> 00:33:13,356
We've got a ton more
for you to look at.


714
00:33:13,356 --> 00:33:14,586
We don't have to time
to go through them all


715
00:33:14,986 --> 00:33:16,846
but I'm sure we'll have a lot
of fun playing with these.


716
00:33:17,206 --> 00:33:19,626
As you mentioned before,
actions are only half the story.


717
00:33:20,096 --> 00:33:22,806
We also have a built-in
physics engine right inside the


718
00:33:22,806 --> 00:33:25,246
framework that you can
use as an alternative


719
00:33:25,246 --> 00:33:27,836
or complementary means
to animate your nodes.


720
00:33:30,856 --> 00:33:35,376
So, usually when you do physics
in the game, you have all


721
00:33:35,376 --> 00:33:38,656
of your game and display
objects in your game engine


722
00:33:39,016 --> 00:33:40,866
and you manipulate
and animate those


723
00:33:40,976 --> 00:33:43,726
and then you have your
physics engine over here


724
00:33:43,906 --> 00:33:46,536
and I'm simulating those
bodies and then I'll have


725
00:33:46,536 --> 00:33:48,976
to do some sort of
synchronization between the two


726
00:33:48,976 --> 00:33:50,826
to get the effects of
the physics in your game.


727
00:33:50,826 --> 00:33:53,776
We didn't want you to have
to do that in Sprite Kit


728
00:33:54,256 --> 00:33:55,116
so we built it right in.


729
00:33:55,666 --> 00:33:59,266
So, all you have to do is create
a physicsBody that represents


730
00:33:59,376 --> 00:34:01,456
that node and simply
set it on the node.


731
00:34:02,186 --> 00:34:03,086
It's one property you set


732
00:34:03,086 --> 00:34:05,846
on the node immediately physics
starts acting on that node.


733
00:34:06,066 --> 00:34:07,746
So, it's built right
into the framework.


734
00:34:08,045 --> 00:34:09,886
It's not all on or all off.


735
00:34:09,886 --> 00:34:11,656
You can set it on only
one node in your game,


736
00:34:11,656 --> 00:34:13,096
you don't have to
be a physics game.


737
00:34:13,545 --> 00:34:17,446
It's-- If you really want to
use your own physics framework,


738
00:34:17,446 --> 00:34:20,186
you can do that too, tie it into
Sprite Kit however you want.


739
00:34:20,505 --> 00:34:23,016
If you're not using our physics
engine you pay absolutely no


740
00:34:23,016 --> 00:34:24,666
cost for it.


741
00:34:26,065 --> 00:34:28,106
We have a variety of
shapes that you can use


742
00:34:28,106 --> 00:34:30,136
to represent physics
objects in your game.


743
00:34:30,466 --> 00:34:32,226
Of course we have
circles, rectangles,


744
00:34:32,226 --> 00:34:36,976
we also have hallow rectangles,
even custom polygons or paths


745
00:34:37,306 --> 00:34:38,466
that you can use in your game


746
00:34:38,795 --> 00:34:41,735
and all using our signature
one line convenience method


747
00:34:41,735 --> 00:34:43,806
to create those objects.


748
00:34:45,536 --> 00:34:49,426
So once you've created a physics
object, like I said before,


749
00:34:49,426 --> 00:34:51,806
you just set the physicsBody
properly on your sprite.


750
00:34:52,275 --> 00:34:55,216
So if I wanted to create
a circle with a radius 50,


751
00:34:55,646 --> 00:34:57,976
I'll do that in one line
and I'll set that property


752
00:34:58,386 --> 00:35:01,806
on my SpriteNode and then
physics will immediately start


753
00:35:02,316 --> 00:35:02,916
running on there.


754
00:35:03,266 --> 00:35:04,716
So, in the second sample


755
00:35:04,716 --> 00:35:08,966
down here I'm creating these
golf ball nodes that I'm going


756
00:35:08,966 --> 00:35:11,776
to add into my scene and
then I'm making a physicsBody


757
00:35:11,776 --> 00:35:13,766
that matches the
size of that texture.


758
00:35:13,906 --> 00:35:20,386
It's a circle and then I add it
to the scene and we get this.


759
00:35:20,586 --> 00:35:22,686
So, they're currently falling
off the bottom of the scene,


760
00:35:22,686 --> 00:35:24,426
maybe that's not what
we expected to happen


761
00:35:24,796 --> 00:35:26,776
but some games might want that
behavior, so we didn't want


762
00:35:26,776 --> 00:35:28,286
to restrict you to
just the scene.


763
00:35:28,916 --> 00:35:31,556
It's really, really simple to
set it up a bounding volume


764
00:35:31,556 --> 00:35:34,766
if you do want to have that
attached to your scene.


765
00:35:34,766 --> 00:35:38,296
We can use that hallow
rectangle using the edge loop


766
00:35:38,296 --> 00:35:43,016
with rect constructor and I can
just ask my scene for its size,


767
00:35:43,406 --> 00:35:45,846
for its frame and
use that as the input


768
00:35:45,846 --> 00:35:48,576
to create a physicsBody
representing the boundaries


769
00:35:48,576 --> 00:35:49,196
of my scene.


770
00:35:49,746 --> 00:35:51,596
And since the scene
itself is a node,


771
00:35:51,596 --> 00:35:54,686
I can just set the physicsBody
on the scene because that seems


772
00:35:54,686 --> 00:35:57,006
that like an appropriate area
to represent the boundary


773
00:35:57,526 --> 00:36:00,326
and now this time when I
add the nodes to my scene,


774
00:36:00,326 --> 00:36:01,466
you'll see they're
being constrained


775
00:36:01,466 --> 00:36:02,316
by the bounding volume.


776
00:36:03,516 --> 00:36:08,186
[ Applause ]


777
00:36:08,686 --> 00:36:11,886
And so, we also allow
more fine-tuned control


778
00:36:11,886 --> 00:36:15,456
of how these bodies interact
on every scene in Sprite Kit.


779
00:36:15,456 --> 00:36:17,556
You'll find a physicsWorld
property


780
00:36:18,016 --> 00:36:20,276
and here you'll have
access to a number


781
00:36:20,276 --> 00:36:25,506
of functionalities including
doing hit test within rectangles


782
00:36:25,506 --> 00:36:26,656
to see what bodies are in there.


783
00:36:26,656 --> 00:36:29,186
You can do ray casts from
any points if you want to use


784
00:36:29,186 --> 00:36:31,706
that to drive your AI
or pathfinding system.


785
00:36:31,706 --> 00:36:34,496
You can also add
joints between nodes.


786
00:36:34,496 --> 00:36:36,396
You can set up springs
or sliding


787
00:36:36,396 --> 00:36:38,216
or glue different
bodies together.


788
00:36:38,216 --> 00:36:39,526
You can do all of that as well.


789
00:36:39,946 --> 00:36:41,756
You can also change gravity.


790
00:36:41,956 --> 00:36:44,426
Things always don't--
always have to fall down,


791
00:36:44,426 --> 00:36:46,486
that's how it is by
default but I can just


792
00:36:46,486 --> 00:36:49,066
as easily flip the
gravity and make all


793
00:36:49,066 --> 00:36:50,466
of my sprites fallout as well.


794
00:36:51,056 --> 00:36:54,646
And that's physicsWorld.


795
00:36:55,166 --> 00:36:59,636
And you can also sign up
to receive notifications


796
00:36:59,636 --> 00:37:02,196
when any two bodies are
colliding 'cause we've already


797
00:37:02,196 --> 00:37:04,936
had to figure this out to
calculate the collisions.


798
00:37:05,276 --> 00:37:08,366
We're offering this as a way
for you to be easily notified


799
00:37:08,366 --> 00:37:10,946
and perform collision
test within your games


800
00:37:10,946 --> 00:37:12,226
if you set up physics bodies.


801
00:37:13,006 --> 00:37:17,496
So, I can implement the
contactDelegate protocol and set


802
00:37:17,496 --> 00:37:21,206
that property on my physicsWorld
and I'll be called back


803
00:37:21,206 --> 00:37:24,976
on these two methods anytime
two bodies begin contacting


804
00:37:24,976 --> 00:37:26,276
or cease to be in contact.


805
00:37:26,276 --> 00:37:28,176
And what do I get back there?


806
00:37:28,876 --> 00:37:33,636
So, I get back each body that
participate in that contact


807
00:37:33,636 --> 00:37:36,436
as well as the point of first
contact where they connected


808
00:37:36,846 --> 00:37:39,786
and the magnitude of
the collision impulse


809
00:37:39,786 --> 00:37:40,976
that was applied at that point,


810
00:37:40,976 --> 00:37:42,766
so I can know how
hard they were hit.


811
00:37:44,296 --> 00:37:47,726
So if I wanted to know anytime
that my hero character collided


812
00:37:47,726 --> 00:37:50,346
with another physicsBody
in my scene,


813
00:37:50,696 --> 00:37:52,926
I could implement
the delegate protocol


814
00:37:53,346 --> 00:37:56,276
and I'd simply check
whether the bodies


815
00:37:56,546 --> 00:37:59,336
in this contact was
associated with my heroSprite


816
00:37:59,336 --> 00:38:04,186
and then I can go up and do
something cool with that.


817
00:38:04,406 --> 00:38:06,636
By default, you'll be
notified of every collision


818
00:38:06,636 --> 00:38:08,996
between any two bodies
in your game and a lot


819
00:38:08,996 --> 00:38:10,766
of times this is way
too much information


820
00:38:10,766 --> 00:38:12,326
and we don't really
need to use all of that.


821
00:38:12,716 --> 00:38:16,566
So we allow our advance users to
filter out different collisions


822
00:38:16,566 --> 00:38:19,576
within your game and only get
back exactly the information


823
00:38:19,576 --> 00:38:20,306
you're interested in.


824
00:38:21,176 --> 00:38:24,576
So, in this game here, I've got
a couple of cooperative players


825
00:38:24,876 --> 00:38:27,486
and I've got some bad guys
and some cooled power ups


826
00:38:27,486 --> 00:38:28,566
that they can collect
in the game.


827
00:38:28,566 --> 00:38:31,486
And I'm going to divide this
up into some logical groups.


828
00:38:32,526 --> 00:38:36,506
So this logical group will help
us set up the three BitMask


829
00:38:36,506 --> 00:38:38,366
that we have available
on every physicsBody.


830
00:38:38,806 --> 00:38:41,766
The first one, is
the categoryBitMask


831
00:38:42,086 --> 00:38:44,446
and this will allow you
to specify which groups,


832
00:38:44,446 --> 00:38:47,066
which logical groups
this body belongs


833
00:38:47,066 --> 00:38:48,766
to using a bit for each group.


834
00:38:48,906 --> 00:38:51,026
So, I can belong to more
than one groups, no groups,


835
00:38:51,026 --> 00:38:51,946
no groups, all groups.


836
00:38:52,646 --> 00:38:55,676
The second BitMask will
allow me to determine


837
00:38:55,676 --> 00:38:58,686
which other groups I'm going
to actually collide with.


838
00:38:59,146 --> 00:39:00,336
So, if I don't collide
with anyone,


839
00:39:00,336 --> 00:39:02,306
the physics bodies will
simply past through each other


840
00:39:02,636 --> 00:39:05,056
or I can only have
my nodes collide


841
00:39:05,056 --> 00:39:06,166
with certain other nodes.


842
00:39:06,706 --> 00:39:08,636
And independently from
that, importantly,


843
00:39:08,986 --> 00:39:11,406
the third one allows
you to specify


844
00:39:11,756 --> 00:39:13,776
which contacts I will
be notified about.


845
00:39:14,126 --> 00:39:16,406
So, I don't have to always
be notified if I want them


846
00:39:16,406 --> 00:39:18,886
to collide and I could
have nodes completely pass


847
00:39:18,926 --> 00:39:20,696
through each other and
still get the notification


848
00:39:20,696 --> 00:39:21,346
when they intersect.


849
00:39:21,906 --> 00:39:24,776
So how are we going
to set this up?


850
00:39:24,946 --> 00:39:28,636
First I'm going to define my
three logical groups, GOOD GUYS,


851
00:39:28,776 --> 00:39:30,406
BAD GUYS and POWER UPS.


852
00:39:31,476 --> 00:39:32,236
And what I'm interested


853
00:39:32,236 --> 00:39:35,416
in having happened is I
want the players to collide


854
00:39:35,416 --> 00:39:37,696
with the enemies and I want them
to be able to walk through them


855
00:39:37,696 --> 00:39:38,626
if they're blocking the way.


856
00:39:39,116 --> 00:39:41,156
And I also want the enemies
to collide with each other


857
00:39:41,156 --> 00:39:44,376
so they don't clump up and we
don't get killed in immediately


858
00:39:44,376 --> 00:39:45,826
when we walk into the
big group of them.


859
00:39:46,426 --> 00:39:47,836
I don't want the
players to collide


860
00:39:47,836 --> 00:39:49,916
with each other 'cause it's
sort of a cooperative game,


861
00:39:49,916 --> 00:39:51,256
I should let them pass
through each other.


862
00:39:51,606 --> 00:39:53,046
So, I don't want that to happen.


863
00:39:53,096 --> 00:39:55,976
But what I also interested
in is I want


864
00:39:55,976 --> 00:39:59,106
to be notified anytime one
of the enemies touches one


865
00:39:59,106 --> 00:40:01,896
of the heroes so that
I can apply damage,


866
00:40:01,936 --> 00:40:03,626
change the life counters,
stuff like that.


867
00:40:04,146 --> 00:40:07,226
I also want to be notified when
one of my heroes collects one


868
00:40:07,226 --> 00:40:09,536
of the POWER UPS so that I
can go and remove that POWER


869
00:40:09,536 --> 00:40:12,066
UP from the game and apply
some really cool effects


870
00:40:12,146 --> 00:40:13,886
and abilities to my heroes.


871
00:40:15,516 --> 00:40:16,996
So, here's how we set that up.


872
00:40:17,156 --> 00:40:19,626
We have our three
categories and we're going


873
00:40:19,626 --> 00:40:24,296
to set the categoryBit on our
player to be the GOOD GUYS


874
00:40:24,946 --> 00:40:27,726
and I'm going to set
his collisionBitMask


875
00:40:28,466 --> 00:40:29,946
to be just BAD GUYS.


876
00:40:29,946 --> 00:40:31,446
I only want him to
collide with the baddies.


877
00:40:32,076 --> 00:40:36,176
And then the contactBitMask of
course will be both BAD GUYS


878
00:40:36,596 --> 00:40:38,266
and POWER UPS 'cause I
need to know when any


879
00:40:38,266 --> 00:40:39,616
of those two contacts occurs.


880
00:40:40,376 --> 00:40:43,996
The same holds true for Player
2 and then for all of the--


881
00:40:44,236 --> 00:40:48,426
all of the goblins in my scene
I want to set their category


882
00:40:48,686 --> 00:40:52,286
to BAD GUYS and they're going to
collide with both of each other


883
00:40:52,516 --> 00:40:55,126
as well as our hero characters.


884
00:40:55,126 --> 00:40:57,896
Let's also do that for the
collision mask and I'll--


885
00:40:57,896 --> 00:41:03,806
I'm also interested in being
notified whenever they intersect


886
00:41:04,076 --> 00:41:05,056
with the hero characters.


887
00:41:05,056 --> 00:41:07,596
So that's some advanced
functionality that we offer


888
00:41:07,596 --> 00:41:08,276
in the physics engine.


889
00:41:08,276 --> 00:41:10,946
They're really customized
exactly what interactions you


890
00:41:10,946 --> 00:41:11,526
want to occur.


891
00:41:12,106 --> 00:41:17,286
So, there's a number
of other features


892
00:41:17,286 --> 00:41:18,816
that we have available
in the Sprite Kit.


893
00:41:19,156 --> 00:41:21,006
I'm not going to go
in depth with them


894
00:41:21,006 --> 00:41:24,856
but I want a list a couple
of them and call them out.


895
00:41:25,006 --> 00:41:27,696
We have transitions between
multiple scenes in your game.


896
00:41:27,956 --> 00:41:32,946
We support rotations and
doorway openings and fade


897
00:41:32,946 --> 00:41:34,816
through a color as
well as cross fade.


898
00:41:34,816 --> 00:41:36,436
We've got a lot of
really cool stuff there.


899
00:41:37,496 --> 00:41:38,736
You can reverse any action


900
00:41:38,736 --> 00:41:40,436
that you've constructed
including a sequence


901
00:41:40,436 --> 00:41:41,576
of multiple actions.


902
00:41:41,926 --> 00:41:44,426
We also have some really
nice debugging stats


903
00:41:44,426 --> 00:41:46,206
that you can overlay
on you SpriteKitView


904
00:41:46,206 --> 00:41:48,106
that will let you know how
many dropped calls are being


905
00:41:48,106 --> 00:41:51,306
executed, how many nodes
are currently in your scene.


906
00:41:51,836 --> 00:41:57,046
We also support, instead of
applying filters at runtime,


907
00:41:57,046 --> 00:41:59,676
when we render their frame,
you can also apply a CIFilter


908
00:41:59,676 --> 00:42:03,436
to any texture in your game
by taking an existing texture


909
00:42:03,436 --> 00:42:06,236
and running it through a
filter to create a new one.


910
00:42:07,006 --> 00:42:09,296
We have automatic
texture atlas generation


911
00:42:09,646 --> 00:42:12,586
and we have some
really great new pieces


912
00:42:12,586 --> 00:42:14,546
of developer documentation
available to you.


913
00:42:14,956 --> 00:42:18,146
We have a complete sample of
Adventure available for you


914
00:42:18,396 --> 00:42:20,736
and a complete Code Explained
guide that really walks


915
00:42:20,736 --> 00:42:22,686
through the development
process for that game


916
00:42:23,096 --> 00:42:25,846
and shows you how the game
is constructed and organized.


917
00:42:26,266 --> 00:42:29,016
We also have a fantastic
programming guide.


918
00:42:29,016 --> 00:42:31,116
You should be able to read
this and get up and running


919
00:42:31,116 --> 00:42:33,786
within a day making
some really great games.


920
00:42:34,126 --> 00:42:36,526
Any additional questions,
please contact Allan Schaffer.


921
00:42:37,666 --> 00:42:40,356
We had a controller session
yesterday, if you missed


922
00:42:40,386 --> 00:42:42,876
that that's a really great
new feature that you can add


923
00:42:42,876 --> 00:42:44,306
to you Sprite Kit games as well.


924
00:42:44,486 --> 00:42:45,566
Check out the video for that.


925
00:42:46,156 --> 00:42:48,686
We have an additional Sprite
Kit session right after lunch,


926
00:42:48,686 --> 00:42:51,576
so come back and join
us again for that one.


927
00:42:51,576 --> 00:42:53,396
We're going to be talking a
little bit more about Adventure


928
00:42:53,396 --> 00:42:55,026
and some of the Xcode
tools that we have.


929
00:42:55,726 --> 00:42:55,976
Thank you.


930
00:42:56,016 --> 00:42:58,016
[ Applause ]


931
00:42:58,016 --> 00:43:05,616
[ Silence ]

