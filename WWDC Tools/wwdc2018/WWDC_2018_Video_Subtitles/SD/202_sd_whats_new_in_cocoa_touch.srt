1
00:00:06,516 --> 00:00:14,500
[ Music ]


2
00:00:18,516 --> 00:00:24,456
[ Applause ]


3
00:00:24,956 --> 00:00:25,896
>> Alright, good morning.


4
00:00:26,406 --> 00:00:28,416
Thanks so much for coming out


5
00:00:28,706 --> 00:00:30,316
this morning to learn all about


6
00:00:30,516 --> 00:00:32,195
what's new in Cocoa Touch.


7
00:00:33,456 --> 00:00:34,816
Now normally, Eliza would join


8
00:00:34,816 --> 00:00:35,816
me up here a little bit later


9
00:00:35,816 --> 00:00:37,556
although this year actually


10
00:00:37,556 --> 00:00:38,446
you're just going to be hearing


11
00:00:38,446 --> 00:00:38,846
from me.


12
00:00:39,386 --> 00:00:41,036
So, she'll be back in later


13
00:00:41,036 --> 00:00:41,216
years.


14
00:00:41,216 --> 00:00:42,626
Don't worry about it.


15
00:00:43,046 --> 00:00:44,236
This morning we're going to talk


16
00:00:44,556 --> 00:00:46,046
about things in three main


17
00:00:46,046 --> 00:00:46,596
categories.


18
00:00:47,656 --> 00:00:48,466
We're going to start with some


19
00:00:48,576 --> 00:00:50,436
framework updates including


20
00:00:50,436 --> 00:00:51,956
things like performance and


21
00:00:51,956 --> 00:00:52,556
security.


22
00:00:52,556 --> 00:00:54,376
Then we're going to talk about


23
00:00:54,416 --> 00:00:56,476
some API enhancements across a


24
00:00:56,476 --> 00:00:57,876
number of different existing


25
00:00:57,876 --> 00:01:00,056
APIs in the SDK, including


26
00:01:00,056 --> 00:01:01,566
notifications and messages.


27
00:01:02,566 --> 00:01:04,025
And then we're going to end with


28
00:01:04,156 --> 00:01:05,086
Siri Shortcuts.


29
00:01:05,816 --> 00:01:07,126
So let's get started with our


30
00:01:07,196 --> 00:01:08,936
first topic: Performance


31
00:01:09,196 --> 00:01:09,776
Updates.


32
00:01:11,106 --> 00:01:12,716
Now we're going to talk about


33
00:01:12,716 --> 00:01:14,506
performance across three main


34
00:01:14,506 --> 00:01:17,876
areas: scrolling, memory, and


35
00:01:17,876 --> 00:01:18,546
auto layout.


36
00:01:19,786 --> 00:01:21,726
Now before we get in to it, it's


37
00:01:21,726 --> 00:01:23,106
important to keep in mind one


38
00:01:23,106 --> 00:01:24,146
little bit of background


39
00:01:24,146 --> 00:01:25,496
information about scrolling.


40
00:01:27,796 --> 00:01:30,076
Scrolling on iOS follows a


41
00:01:30,156 --> 00:01:31,836
pretty common pattern in most


42
00:01:31,876 --> 00:01:32,236
places.


43
00:01:32,876 --> 00:01:34,536
We load content to be displayed


44
00:01:34,536 --> 00:01:36,336
into the views and then we're


45
00:01:36,336 --> 00:01:38,096
just moving that content around.


46
00:01:38,846 --> 00:01:39,666
And while we're moving it


47
00:01:39,666 --> 00:01:41,546
around, most of those frames are


48
00:01:41,546 --> 00:01:43,036
really cheap to generate because


49
00:01:43,036 --> 00:01:44,376
we don't have to load anything


50
00:01:44,376 --> 00:01:44,656
new.


51
00:01:45,656 --> 00:01:47,226
But every now and then, a new


52
00:01:47,226 --> 00:01:49,506
view first becomes visible and


53
00:01:49,506 --> 00:01:51,096
the one frame when that first


54
00:01:51,096 --> 00:01:53,206
happens is quite a bit more


55
00:01:53,206 --> 00:01:54,816
expensive to generate than those


56
00:01:54,816 --> 00:01:55,776
other cheaper ones.


57
00:01:56,286 --> 00:01:58,656
Now, of course, once that one


58
00:01:58,696 --> 00:02:00,476
frame is loaded, we're just back


59
00:02:00,526 --> 00:02:02,246
to moving content around, so the


60
00:02:02,246 --> 00:02:03,696
amount of work we do on the CPU


61
00:02:03,696 --> 00:02:05,236
goes back to being pretty small


62
00:02:05,236 --> 00:02:06,276
for most of that other


63
00:02:06,276 --> 00:02:06,806
scrolling.


64
00:02:07,386 --> 00:02:10,235
So what's happening during that


65
00:02:10,295 --> 00:02:11,676
really expensive frame that


66
00:02:11,676 --> 00:02:13,446
causes that one to be more than


67
00:02:13,446 --> 00:02:14,116
all the others?


68
00:02:14,776 --> 00:02:15,986
Well, let's take a look from the


69
00:02:16,026 --> 00:02:18,096
perspective UI Table View but


70
00:02:18,096 --> 00:02:19,276
everything we look at here will


71
00:02:19,276 --> 00:02:20,326
really be the same for UI


72
00:02:20,326 --> 00:02:22,066
Collection View or really any of


73
00:02:22,066 --> 00:02:23,226
your own custom views that you


74
00:02:23,226 --> 00:02:24,786
may build that behave in similar


75
00:02:24,786 --> 00:02:25,156
ways.


76
00:02:25,866 --> 00:02:28,706
So the work in that expensive


77
00:02:28,756 --> 00:02:30,386
frame probably starts in your


78
00:02:30,386 --> 00:02:32,296
implementation of TableView,


79
00:02:32,396 --> 00:02:33,616
cell For Row At index Path


80
00:02:33,676 --> 00:02:34,306
delegate method.


81
00:02:34,906 --> 00:02:36,906
Now the first thing we're going


82
00:02:36,906 --> 00:02:38,416
to do in there is get the cell


83
00:02:38,416 --> 00:02:39,316
that we want to display.


84
00:02:39,746 --> 00:02:40,786
And so we're going to try and


85
00:02:40,856 --> 00:02:42,166
dequeue it ideally from the


86
00:02:42,166 --> 00:02:44,666
reuse queue although if one is


87
00:02:44,666 --> 00:02:45,966
not available already in the


88
00:02:45,966 --> 00:02:46,936
queue, we might actually have to


89
00:02:46,936 --> 00:02:48,326
do some memory allocation in


90
00:02:48,326 --> 00:02:50,176
order to get it ready.


91
00:02:51,036 --> 00:02:52,196
Once we have the cell, we're


92
00:02:52,196 --> 00:02:53,446
then going to populate it with


93
00:02:53,446 --> 00:02:54,316
your model data.


94
00:02:54,916 --> 00:02:56,496
Now how expensive that is will


95
00:02:56,496 --> 00:02:57,686
vary depending on your


96
00:02:57,686 --> 00:02:59,496
application but it can be


97
00:02:59,496 --> 00:03:01,476
including a fairly large amount


98
00:03:01,476 --> 00:03:02,856
of expensive operations like


99
00:03:02,896 --> 00:03:05,416
reading files, loading data out


100
00:03:05,416 --> 00:03:06,916
of databases, or other things of


101
00:03:06,916 --> 00:03:07,516
that nature.


102
00:03:07,936 --> 00:03:09,056
So you'll definitely want to


103
00:03:09,056 --> 00:03:10,536
look at the expense here in your


104
00:03:10,536 --> 00:03:13,396
own apps but it tends to be this


105
00:03:13,396 --> 00:03:14,616
is where a good portion of it


106
00:03:14,926 --> 00:03:15,686
will exist.


107
00:03:17,276 --> 00:03:18,956
Now, you may think looking here


108
00:03:18,956 --> 00:03:19,936
that that's the end of the


109
00:03:19,936 --> 00:03:21,766
expensive work but even once you


110
00:03:21,766 --> 00:03:23,006
return from this method, there's


111
00:03:23,006 --> 00:03:24,316
actually more work that has to


112
00:03:24,376 --> 00:03:25,956
happen in order to get the cell


113
00:03:25,956 --> 00:03:27,086
prepared to have it show up on


114
00:03:27,086 --> 00:03:27,506
screen.


115
00:03:28,206 --> 00:03:29,786
So, of course, next, we have to


116
00:03:29,786 --> 00:03:31,306
lay out all of the content in


117
00:03:31,306 --> 00:03:31,836
that cell.


118
00:03:32,336 --> 00:03:33,936
We need to size all the views


119
00:03:33,936 --> 00:03:34,866
and position them in the right


120
00:03:34,926 --> 00:03:35,686
spot.


121
00:03:36,086 --> 00:03:37,276
Now, this can actually be a


122
00:03:37,276 --> 00:03:38,476
pretty substantial amount of the


123
00:03:38,476 --> 00:03:39,736
total time that we're spending


124
00:03:39,736 --> 00:03:41,176
because it can include other


125
00:03:41,176 --> 00:03:42,946
expensive operations like


126
00:03:43,036 --> 00:03:44,666
measuring text.


127
00:03:45,296 --> 00:03:46,886
Once everything is properly


128
00:03:46,886 --> 00:03:48,666
sized and positioned, then it's


129
00:03:48,666 --> 00:03:50,736
time to generate any content


130
00:03:50,736 --> 00:03:52,276
that would need to be drawn


131
00:03:52,276 --> 00:03:54,116
using drawing calls and to do


132
00:03:54,116 --> 00:03:55,606
that we have to call draw Rect


133
00:03:55,606 --> 00:03:57,246
on all of the subviews within


134
00:03:57,246 --> 00:03:57,746
that cell.


135
00:03:58,276 --> 00:03:59,816
Again, this can be a pretty


136
00:03:59,816 --> 00:04:01,216
large amount of the time because


137
00:04:01,216 --> 00:04:03,036
we'll also be doing things like


138
00:04:03,036 --> 00:04:04,426
drawing text.


139
00:04:05,536 --> 00:04:07,196
So overall, there's a lot of


140
00:04:07,196 --> 00:04:08,506
work that has to happen across


141
00:04:08,646 --> 00:04:11,436
this whole piece of code and it


142
00:04:11,436 --> 00:04:12,826
has to happen in a really short


143
00:04:12,826 --> 00:04:13,696
period of time.


144
00:04:14,126 --> 00:04:15,656
On our 60-hertz devices, you


145
00:04:15,656 --> 00:04:17,565
have 16 milliseconds to complete


146
00:04:17,565 --> 00:04:19,046
all this work in order to make


147
00:04:19,046 --> 00:04:20,726
sure you don't drop any frames,


148
00:04:20,726 --> 00:04:22,296
and maintain smooth scrolling.


149
00:04:23,056 --> 00:04:25,346
On our 12-hertz iPads, on the


150
00:04:25,346 --> 00:04:27,836
iPad Pro, you have only 8


151
00:04:27,836 --> 00:04:29,256
milliseconds to complete all of


152
00:04:29,256 --> 00:04:29,696
that work.


153
00:04:30,166 --> 00:04:31,736
So, it really needs to be done


154
00:04:31,816 --> 00:04:32,956
as quickly as possible.


155
00:04:34,226 --> 00:04:36,126
Now, to help with that, in iOS


156
00:04:36,326 --> 00:04:37,796
10, we introduced a cell


157
00:04:37,836 --> 00:04:40,096
prefetching API and the idea


158
00:04:40,096 --> 00:04:42,186
with the prefetch API is to take


159
00:04:42,256 --> 00:04:43,906
some of this work, populating


160
00:04:43,906 --> 00:04:45,756
your cell with model data, and


161
00:04:45,826 --> 00:04:47,086
pull it out of this critical


162
00:04:47,086 --> 00:04:48,746
section that's happening on


163
00:04:48,746 --> 00:04:50,916
demand in that short window, do


164
00:04:50,916 --> 00:04:52,646
it earlier, and do it on a


165
00:04:52,646 --> 00:04:53,796
background thread so it can


166
00:04:53,796 --> 00:04:55,386
happen asynchronously with some


167
00:04:55,386 --> 00:04:57,036
of the other work, in particular


168
00:04:57,036 --> 00:04:58,656
those cheaper scrolling frames


169
00:04:58,656 --> 00:04:59,286
we talked about.


170
00:05:00,586 --> 00:05:02,296
Now adopting this is really


171
00:05:02,296 --> 00:05:02,676
easy.


172
00:05:03,076 --> 00:05:04,736
It's just a UI Table View Data


173
00:05:04,736 --> 00:05:06,976
Source Prefetching protocol and


174
00:05:06,976 --> 00:05:08,786
it only has two methods, only


175
00:05:08,786 --> 00:05:09,766
one of which is actually


176
00:05:09,766 --> 00:05:10,346
required.


177
00:05:10,916 --> 00:05:12,196
And the idea here is to move


178
00:05:12,236 --> 00:05:13,536
some of that expensive work of


179
00:05:13,536 --> 00:05:14,956
loading things from files or


180
00:05:14,956 --> 00:05:17,626
reading your database into here


181
00:05:17,626 --> 00:05:18,766
so that you don't have to do it


182
00:05:18,766 --> 00:05:19,416
on demand.


183
00:05:19,636 --> 00:05:21,436
You data is already prepared


184
00:05:21,596 --> 00:05:22,736
when the cell is needed for


185
00:05:22,736 --> 00:05:22,956
display.


186
00:05:23,126 --> 00:05:28,346
So this in most cases can be a


187
00:05:28,406 --> 00:05:31,346
really big win although while we


188
00:05:31,346 --> 00:05:32,606
were looking at some of our own


189
00:05:32,606 --> 00:05:34,546
apps in iOS 12, we actually


190
00:05:34,546 --> 00:05:36,456
noticed a case where this was


191
00:05:36,516 --> 00:05:38,006
causing an issue instead of


192
00:05:38,006 --> 00:05:38,546
helping us.


193
00:05:39,146 --> 00:05:40,236
So let's take a look at what


194
00:05:40,236 --> 00:05:42,846
that looked like.


195
00:05:43,126 --> 00:05:45,476
Now here's an example of a trace


196
00:05:45,476 --> 00:05:47,156
that we took while scrolling on


197
00:05:47,156 --> 00:05:48,236
an iPhone 6 Plus.


198
00:05:49,176 --> 00:05:50,986
The vertical bars across the


199
00:05:51,046 --> 00:05:53,166
top, those represent frames that


200
00:05:53,166 --> 00:05:54,166
we want to display.


201
00:05:55,006 --> 00:05:56,506
The alternating light and dark


202
00:05:56,586 --> 00:05:58,246
blue colors represent frames


203
00:05:58,246 --> 00:05:59,896
that we did swap to the display


204
00:05:59,936 --> 00:06:01,096
as they were changing.


205
00:06:01,096 --> 00:06:03,556
And that double wide light blue


206
00:06:03,556 --> 00:06:05,806
bar, that is a place where we


207
00:06:05,846 --> 00:06:08,386
drew the same frame for two full


208
00:06:08,436 --> 00:06:09,196
frame durations.


209
00:06:09,946 --> 00:06:11,306
So for a customer looking at the


210
00:06:11,306 --> 00:06:12,556
device while this was happening,


211
00:06:12,556 --> 00:06:14,156
that looked like a dropped frame


212
00:06:14,246 --> 00:06:15,456
or a scrolling hitch, which


213
00:06:15,456 --> 00:06:16,486
obviously is what we're trying


214
00:06:16,486 --> 00:06:16,916
to avoid.


215
00:06:18,276 --> 00:06:19,116
So what was happening in this


216
00:06:19,146 --> 00:06:19,386
case?


217
00:06:20,276 --> 00:06:22,296
Well, here you can see that red


218
00:06:22,426 --> 00:06:23,996
bar is representing the time


219
00:06:23,996 --> 00:06:24,716
that we're spending in the


220
00:06:24,716 --> 00:06:26,126
critical section we just talked


221
00:06:26,126 --> 00:06:27,656
about, all the self-[inaudible]


222
00:06:27,746 --> 00:06:29,646
index path, layout, and drawing.


223
00:06:30,206 --> 00:06:31,396
And here, it's actually taking


224
00:06:31,396 --> 00:06:33,166
longer than the 16 milliseconds


225
00:06:33,166 --> 00:06:34,206
we had to draw the frame.


226
00:06:34,946 --> 00:06:36,456
Now because the device can only


227
00:06:36,456 --> 00:06:39,216
swap new frames onto the screen


228
00:06:39,216 --> 00:06:41,966
at fixed positions in time, once


229
00:06:41,966 --> 00:06:43,376
we miss that deadline, we ended


230
00:06:43,376 --> 00:06:45,196
up displaying the same frame for


231
00:06:45,196 --> 00:06:46,776
two full durations, which was


232
00:06:46,776 --> 00:06:47,526
obviously not great.


233
00:06:48,206 --> 00:06:49,746
So why did that happen here?


234
00:06:49,746 --> 00:06:50,696
In this case, we're looking at


235
00:06:50,696 --> 00:06:52,136
an app where we actually had


236
00:06:52,136 --> 00:06:53,706
implemented the cell prefetching


237
00:06:53,706 --> 00:06:55,106
method so our data should've


238
00:06:55,106 --> 00:06:55,606
been ready.


239
00:06:55,806 --> 00:06:56,956
Ideally, this could've been done


240
00:06:56,956 --> 00:06:57,466
more quickly.


241
00:06:58,346 --> 00:06:59,256
Well, if we look at a little


242
00:06:59,256 --> 00:07:00,286
more of the trace, we can see


243
00:07:00,286 --> 00:07:01,066
what was going on.


244
00:07:01,866 --> 00:07:03,326
The cell prefetching API was


245
00:07:03,436 --> 00:07:05,536
being called at the same time


246
00:07:05,536 --> 00:07:06,826
that we were requesting the


247
00:07:06,826 --> 00:07:07,496
current cell.


248
00:07:08,056 --> 00:07:09,326
Now it wasn't being called for


249
00:07:09,326 --> 00:07:10,626
the data for the current cell.


250
00:07:10,626 --> 00:07:11,706
It was being called for data


251
00:07:11,706 --> 00:07:12,976
that we might need in a future


252
00:07:12,976 --> 00:07:14,706
cell, but it was getting run at


253
00:07:14,736 --> 00:07:15,606
the same time.


254
00:07:15,976 --> 00:07:17,596
And so there was now contention


255
00:07:17,596 --> 00:07:19,616
for the CPU as we tried to both


256
00:07:19,616 --> 00:07:21,766
load the current frame and also


257
00:07:21,766 --> 00:07:23,146
load data for a future frame


258
00:07:23,146 --> 00:07:24,276
that we don't actually need yet.


259
00:07:25,736 --> 00:07:27,006
So because of that contention,


260
00:07:27,006 --> 00:07:28,846
it actually caused both tasks to


261
00:07:28,846 --> 00:07:29,996
take a little bit longer.


262
00:07:30,666 --> 00:07:33,126
Now in iOS 12, we're much more


263
00:07:33,126 --> 00:07:35,226
intelligent about scheduling


264
00:07:35,956 --> 00:07:37,166
these background prefetch


265
00:07:37,166 --> 00:07:39,046
operations so that rather than


266
00:07:39,096 --> 00:07:40,226
happening concurrently and


267
00:07:40,286 --> 00:07:42,056
causing some CPU contention,


268
00:07:42,386 --> 00:07:43,776
they'll now happen serially,


269
00:07:44,136 --> 00:07:45,176
shortening the time that you


270
00:07:45,176 --> 00:07:47,626
need to take to load the current


271
00:07:47,626 --> 00:07:49,486
cell and helping avoid dropped


272
00:07:49,486 --> 00:07:50,886
frames in many cases.


273
00:07:52,516 --> 00:07:56,456
[ Applause ]


274
00:07:56,956 --> 00:07:58,016
So once we had that fixed, we


275
00:07:58,016 --> 00:08:00,086
kept profiling our apps and we


276
00:08:00,086 --> 00:08:01,846
actually found another case


277
00:08:01,846 --> 00:08:02,756
where there was a bit of a


278
00:08:02,756 --> 00:08:04,236
surprising cause of some dropped


279
00:08:04,236 --> 00:08:04,676
frames.


280
00:08:05,336 --> 00:08:07,316
Now what we found was that when


281
00:08:07,316 --> 00:08:09,096
the device was not under load,


282
00:08:09,396 --> 00:08:10,276
there was no background


283
00:08:10,276 --> 00:08:12,016
activity, all we were doing was


284
00:08:12,016 --> 00:08:13,056
a little bit of scrolling in the


285
00:08:13,056 --> 00:08:13,726
foreground app.


286
00:08:14,346 --> 00:08:15,916
Counterintuitively, we could


287
00:08:15,916 --> 00:08:18,336
actually drop more frames than


288
00:08:18,336 --> 00:08:19,896
times when there was some small


289
00:08:19,896 --> 00:08:21,226
amount of light background work


290
00:08:21,266 --> 00:08:21,766
going on.


291
00:08:22,396 --> 00:08:23,536
That didn't really make a lot of


292
00:08:23,536 --> 00:08:23,866
sense.


293
00:08:24,366 --> 00:08:25,636
And to understand why it was


294
00:08:25,636 --> 00:08:27,306
happening, we had to drop down a


295
00:08:27,306 --> 00:08:29,126
level and take a look at the


296
00:08:29,126 --> 00:08:31,736
behavior of the CPU when it was


297
00:08:31,736 --> 00:08:33,096
scheduling our workloads.


298
00:08:33,096 --> 00:08:34,876
So let's take a look at another


299
00:08:34,876 --> 00:08:35,196
trace.


300
00:08:36,306 --> 00:08:37,155
Here, we've got the same


301
00:08:37,155 --> 00:08:37,836
situation.


302
00:08:38,206 --> 00:08:39,836
Double wide blue bar is causing


303
00:08:39,836 --> 00:08:42,096
us to drop a frame or rather is


304
00:08:42,096 --> 00:08:42,746
our dropped frame.


305
00:08:43,506 --> 00:08:45,326
Now here we can see a graph of


306
00:08:45,326 --> 00:08:47,086
our CPU's performance over time.


307
00:08:47,686 --> 00:08:49,176
Now during most of those cheap


308
00:08:49,256 --> 00:08:50,876
frames, our CPU performance is


309
00:08:50,876 --> 00:08:52,116
staying pretty low.


310
00:08:52,366 --> 00:08:53,496
There's no background work going


311
00:08:53,496 --> 00:08:53,806
on.


312
00:08:53,806 --> 00:08:55,256
All we're doing is scrolling


313
00:08:55,256 --> 00:08:56,896
things and that's exactly what


314
00:08:56,896 --> 00:08:58,416
you would want because when


315
00:08:58,416 --> 00:08:59,976
we're not doing expensive work


316
00:08:59,976 --> 00:09:01,556
for scrolling, you want to keep


317
00:09:01,606 --> 00:09:04,196
the CPU as low as possible to


318
00:09:04,196 --> 00:09:05,186
preserve battery life.


319
00:09:05,526 --> 00:09:06,246
So that was great.


320
00:09:07,006 --> 00:09:08,566
What wasn't great is that it


321
00:09:08,646 --> 00:09:10,176
took a little bit of time before


322
00:09:10,176 --> 00:09:11,226
it could ramp up.


323
00:09:11,426 --> 00:09:12,716
You heard about this yesterday


324
00:09:12,816 --> 00:09:14,566
in the keynote.


325
00:09:14,726 --> 00:09:17,396
Now when it did finally ramp up,


326
00:09:17,396 --> 00:09:18,876
it was already too late to have


327
00:09:18,876 --> 00:09:20,126
completed the work to load the


328
00:09:20,126 --> 00:09:21,606
cell that we needed to display


329
00:09:21,676 --> 00:09:23,326
and so we ended up missing that


330
00:09:23,376 --> 00:09:24,016
frame again.


331
00:09:24,806 --> 00:09:26,446
Now because we own the full


332
00:09:26,446 --> 00:09:27,616
software stack from top to


333
00:09:27,616 --> 00:09:29,976
bottom, in iOS 12 we took all


334
00:09:29,976 --> 00:09:31,316
the information we have in the


335
00:09:31,436 --> 00:09:33,606
high-level UIKit framework about


336
00:09:33,676 --> 00:09:34,916
what scrolling is happening and


337
00:09:34,916 --> 00:09:36,446
when these critical sections are


338
00:09:36,446 --> 00:09:38,016
occurring and pass that


339
00:09:38,016 --> 00:09:39,706
information all the way down to


340
00:09:39,706 --> 00:09:41,296
the low-level CPU performance


341
00:09:41,326 --> 00:09:42,996
controller so that it can now


342
00:09:43,116 --> 00:09:45,116
much more intelligently reason


343
00:09:45,336 --> 00:09:46,546
about the work that's happening


344
00:09:46,756 --> 00:09:48,176
and predict both when these


345
00:09:48,236 --> 00:09:50,346
bursts will occur and how much


346
00:09:50,346 --> 00:09:51,926
CPU performance will be required


347
00:09:52,006 --> 00:09:53,626
to meet the deadline for the


348
00:09:53,626 --> 00:09:55,066
historical demand that your app


349
00:09:55,066 --> 00:09:55,596
has had.


350
00:09:56,486 --> 00:09:58,136
So once that change happens,


351
00:09:58,716 --> 00:10:00,346
where the load starts right


352
00:10:00,346 --> 00:10:02,066
here, we end up seeing that


353
00:10:02,066 --> 00:10:03,676
we've ramped the CPU far more


354
00:10:03,676 --> 00:10:05,746
frequently or, far more quickly,


355
00:10:05,806 --> 00:10:07,206
to the exact amount of perform


356
00:10:07,206 --> 00:10:08,736
it needs to make sure that we


357
00:10:08,736 --> 00:10:10,426
hit that deadline and don't drop


358
00:10:10,476 --> 00:10:10,976
frames.


359
00:10:12,286 --> 00:10:13,806
This has caused a really great


360
00:10:13,806 --> 00:10:14,976
improvement across many


361
00:10:14,976 --> 00:10:16,226
different scrolling scenarios


362
00:10:16,226 --> 00:10:16,976
around iOS.


363
00:10:20,956 --> 00:10:24,086
So all of your applications will


364
00:10:24,086 --> 00:10:25,666
get all of this enhancements,


365
00:10:25,666 --> 00:10:27,146
both of them and a number of


366
00:10:27,146 --> 00:10:28,526
others, for free with no


367
00:10:28,526 --> 00:10:29,686
additional work on your part,


368
00:10:30,156 --> 00:10:31,266
but there are a couple of things


369
00:10:31,266 --> 00:10:32,466
that you can do to make sure


370
00:10:32,466 --> 00:10:33,666
that you get the most out of


371
00:10:33,666 --> 00:10:34,136
both of them.


372
00:10:34,996 --> 00:10:36,216
So first of all, if you haven't


373
00:10:36,216 --> 00:10:37,666
already adopted that tableView


374
00:10:37,666 --> 00:10:39,116
cell prefetching API or the


375
00:10:39,116 --> 00:10:40,596
Collection View one, definitely


376
00:10:40,596 --> 00:10:42,096
look into that because having


377
00:10:42,096 --> 00:10:43,336
your data ready is one of the


378
00:10:43,336 --> 00:10:44,596
best things you can do to make


379
00:10:44,596 --> 00:10:46,076
sure that loading cells is as


380
00:10:46,076 --> 00:10:46,836
quick as possible.


381
00:10:47,406 --> 00:10:50,506
Of course, it's also important


382
00:10:50,506 --> 00:10:51,856
that you profile your full


383
00:10:51,856 --> 00:10:53,116
critical sections of your cell


384
00:10:53,116 --> 00:10:55,186
loading and reduce that demand


385
00:10:55,186 --> 00:10:56,076
as much as you can.


386
00:10:56,076 --> 00:10:58,966
iOS 12 will now try to match the


387
00:10:58,966 --> 00:11:00,416
CPU performance to the needs of


388
00:11:00,416 --> 00:11:01,546
your application during this


389
00:11:01,616 --> 00:11:03,396
period but the best thing that


390
00:11:03,396 --> 00:11:04,996
you can do will always remain to


391
00:11:04,996 --> 00:11:06,016
reduce the amount of work that


392
00:11:06,016 --> 00:11:07,646
you have to do to make sure that


393
00:11:07,646 --> 00:11:09,076
you give your customers a really


394
00:11:09,146 --> 00:11:10,336
smooth scrolling experience.


395
00:11:11,676 --> 00:11:13,416
So that's scrolling in iOS 12.


396
00:11:14,396 --> 00:11:16,056
Next, let's turn our attention


397
00:11:16,096 --> 00:11:17,416
to our next performance topic:


398
00:11:18,006 --> 00:11:18,416
memory.


399
00:11:19,626 --> 00:11:21,166
Now, you might wonder why memory


400
00:11:21,166 --> 00:11:22,206
is showing up right here in the


401
00:11:22,206 --> 00:11:23,176
middle of a performance


402
00:11:23,226 --> 00:11:25,726
discussion, but I assure you


403
00:11:25,726 --> 00:11:26,966
that that actually makes a lot


404
00:11:26,966 --> 00:11:28,746
of sense and, in fact, the


405
00:11:28,746 --> 00:11:30,816
reason is because memory really


406
00:11:30,816 --> 00:11:32,026
is performance.


407
00:11:32,746 --> 00:11:34,106
The more memory that your app is


408
00:11:34,196 --> 00:11:36,066
going to use, the more that it


409
00:11:36,066 --> 00:11:37,386
will have an impact on the


410
00:11:37,386 --> 00:11:38,896
performance of your application.


411
00:11:39,626 --> 00:11:41,756
So to understand why, let's take


412
00:11:41,756 --> 00:11:43,756
a look at a really high-level


413
00:11:43,756 --> 00:11:45,326
overview of what the overall


414
00:11:45,326 --> 00:11:46,996
memory on the system might look


415
00:11:46,996 --> 00:11:48,296
like in a common situation.


416
00:11:49,136 --> 00:11:50,576
So, of course, you can see here,


417
00:11:50,576 --> 00:11:52,186
a lot of the system's memory is


418
00:11:52,186 --> 00:11:54,536
being used by other applications


419
00:11:54,536 --> 00:11:55,666
and the system itself.


420
00:11:56,276 --> 00:11:57,706
Your app is using some amount


421
00:11:57,736 --> 00:11:58,246
for the moment.


422
00:11:58,676 --> 00:11:59,906
And there's some that's being


423
00:11:59,906 --> 00:12:02,136
kept free to service new


424
00:12:02,136 --> 00:12:03,646
allocation requests as they come


425
00:12:03,646 --> 00:12:03,876
in.


426
00:12:04,546 --> 00:12:05,896
Now, most of that memory is


427
00:12:05,896 --> 00:12:07,666
probably not truly free.


428
00:12:07,666 --> 00:12:08,946
It's likely including things


429
00:12:08,946 --> 00:12:11,006
like caches or other things that


430
00:12:11,006 --> 00:12:12,426
can be quickly thrown away to


431
00:12:12,426 --> 00:12:13,276
make sure that the memory is


432
00:12:13,276 --> 00:12:15,276
available to satisfy demand


433
00:12:15,486 --> 00:12:17,856
right away but in general it's


434
00:12:17,856 --> 00:12:19,056
probably actually being used for


435
00:12:19,056 --> 00:12:21,196
something, but it is readily


436
00:12:21,196 --> 00:12:21,626
available.


437
00:12:22,546 --> 00:12:23,556
So let's look at what happens


438
00:12:23,556 --> 00:12:24,826
when your application requests


439
00:12:24,826 --> 00:12:25,276
some memory.


440
00:12:25,906 --> 00:12:26,716
Maybe you'll make a small


441
00:12:26,716 --> 00:12:29,116
request, something that can be


442
00:12:29,156 --> 00:12:30,376
satisfied by the amount that's


443
00:12:30,486 --> 00:12:31,686
currently available in that free


444
00:12:31,736 --> 00:12:31,956
pool.


445
00:12:32,466 --> 00:12:33,516
Well, if that's the case, it'll


446
00:12:33,516 --> 00:12:35,526
be return right away to your app


447
00:12:35,526 --> 00:12:36,826
and you can continue on with


448
00:12:36,826 --> 00:12:37,966
your work.


449
00:12:39,256 --> 00:12:40,526
Now, let's say, though, that


450
00:12:40,526 --> 00:12:42,136
your application makes a larger


451
00:12:42,136 --> 00:12:44,326
request, and maybe it doesn't


452
00:12:44,326 --> 00:12:45,756
need it for a long period of


453
00:12:45,756 --> 00:12:47,186
time, so you might not be real


454
00:12:47,186 --> 00:12:47,886
worried about it.


455
00:12:48,246 --> 00:12:49,316
Perhaps you're just going to


456
00:12:49,316 --> 00:12:50,866
load an image off disc and


457
00:12:51,006 --> 00:12:52,656
decompress it, perform some


458
00:12:52,656 --> 00:12:54,056
quick operation on some of the


459
00:12:54,056 --> 00:12:55,536
pixels and then throw it away.


460
00:12:55,876 --> 00:12:56,926
So it seems like a quick


461
00:12:56,926 --> 00:12:57,976
operation that you don't have to


462
00:12:57,976 --> 00:12:58,806
worry too much about.


463
00:12:59,506 --> 00:13:00,406
Well, we'll make that big


464
00:13:00,406 --> 00:13:02,826
request and now that is more


465
00:13:02,826 --> 00:13:04,556
memory that is currently easily


466
00:13:04,556 --> 00:13:05,916
readily available to the system.


467
00:13:06,176 --> 00:13:07,596
So it won't be able to satisfy


468
00:13:07,596 --> 00:13:09,156
it immediately and we'll have to


469
00:13:09,156 --> 00:13:10,566
go find that memory from


470
00:13:10,636 --> 00:13:11,216
somewhere else.


471
00:13:12,206 --> 00:13:13,596
And, in fact, the most likely


472
00:13:13,596 --> 00:13:15,436
place to come from is from other


473
00:13:15,436 --> 00:13:17,966
applications or things on the


474
00:13:18,536 --> 00:13:18,756
system.


475
00:13:18,876 --> 00:13:20,156
Now, that might not worry you


476
00:13:20,156 --> 00:13:21,106
too much because you're trying


477
00:13:21,106 --> 00:13:22,106
to get the memory for your app


478
00:13:22,106 --> 00:13:23,386
right now, so you're not so


479
00:13:23,386 --> 00:13:24,376
worried about what's happening


480
00:13:24,376 --> 00:13:24,906
elsewhere.


481
00:13:25,536 --> 00:13:28,076
But, of course, this will have


482
00:13:28,076 --> 00:13:29,356
an impact on something else


483
00:13:29,436 --> 00:13:30,696
later that your customers will


484
00:13:30,696 --> 00:13:32,066
be expecting will be working,


485
00:13:32,636 --> 00:13:33,906
but more importantly to you


486
00:13:33,906 --> 00:13:35,496
right now, it will have an


487
00:13:35,496 --> 00:13:37,146
impact on your app as well


488
00:13:37,146 --> 00:13:39,106
because the system has to do


489
00:13:39,106 --> 00:13:40,906
work to go get this memory for


490
00:13:40,906 --> 00:13:41,126
you.


491
00:13:41,366 --> 00:13:42,666
The fact that it's not readily


492
00:13:42,666 --> 00:13:44,776
available means that the kernel


493
00:13:44,776 --> 00:13:46,936
has to go find it and perform


494
00:13:46,936 --> 00:13:49,446
operations on the CPU in order


495
00:13:49,446 --> 00:13:50,216
to make it available.


496
00:13:50,726 --> 00:13:51,856
And that time it's spending


497
00:13:51,856 --> 00:13:53,386
getting that memory for you is


498
00:13:53,416 --> 00:13:54,796
time that could be better spent


499
00:13:54,796 --> 00:13:56,086
doing whatever your app does


500
00:13:56,156 --> 00:13:56,466
best.


501
00:13:57,126 --> 00:13:58,656
So finding ways to either chunk


502
00:13:58,686 --> 00:14:00,036
these larger requests or just


503
00:14:00,036 --> 00:14:01,376
reduce those overall peak


504
00:14:01,376 --> 00:14:03,376
demands can actually have both a


505
00:14:03,496 --> 00:14:05,186
big impact on the performance of


506
00:14:05,186 --> 00:14:07,236
your app while you're using it


507
00:14:07,236 --> 00:14:08,816
and also improve the customer


508
00:14:08,816 --> 00:14:10,366
experience across other apps


509
00:14:10,426 --> 00:14:10,716
later.


510
00:14:12,716 --> 00:14:14,006
So there's many ways that you


511
00:14:14,006 --> 00:14:16,186
can reduce the total memory


512
00:14:16,186 --> 00:14:17,806
usage of your apps and starting


513
00:14:17,806 --> 00:14:19,146
with a profile and instruments


514
00:14:19,146 --> 00:14:20,326
is a great way to look at that.


515
00:14:20,746 --> 00:14:21,886
But for this morning, we're just


516
00:14:21,886 --> 00:14:23,496
going to take a look at one new


517
00:14:23,496 --> 00:14:25,306
technique that iOS 12 brings


518
00:14:25,306 --> 00:14:26,666
along that helps reduce the


519
00:14:26,666 --> 00:14:29,216
memory usage of your apps and


520
00:14:29,216 --> 00:14:30,786
that's Automatic Backing Stores.


521
00:14:31,856 --> 00:14:32,966
So let's say we want to draw


522
00:14:32,966 --> 00:14:34,616
this lazy prairie dog in


523
00:14:34,656 --> 00:14:36,356
portrait mode on an iPhone X.


524
00:14:37,266 --> 00:14:38,826
Now, how big is that going to


525
00:14:38,826 --> 00:14:38,893
be?


526
00:14:39,436 --> 00:14:41,666
Portrait mode on iPhone X, 375


527
00:14:41,736 --> 00:14:43,376
points wide and, to preserve our


528
00:14:43,376 --> 00:14:45,346
aspect ratio, it'll be 250


529
00:14:45,346 --> 00:14:46,176
points tall.


530
00:14:46,706 --> 00:14:48,646
So how much memory will that


531
00:14:48,646 --> 00:14:48,896
use?


532
00:14:49,536 --> 00:14:54,956
Well, 375 by 250 at 3x, with 64


533
00:14:54,956 --> 00:14:56,346
bits per pixel because this is a


534
00:14:56,346 --> 00:14:58,226
deep color device, is going to


535
00:14:58,226 --> 00:15:00,406
be 2.2 megabytes of memory to


536
00:15:00,406 --> 00:15:00,976
draw a prairie dog.


537
00:15:02,096 --> 00:15:03,426
That seems like a pretty decent


538
00:15:03,426 --> 00:15:05,186
amount, but in this case that's


539
00:15:05,186 --> 00:15:06,586
actually probably memory well


540
00:15:06,586 --> 00:15:06,966
spent.


541
00:15:07,216 --> 00:15:08,306
We're actually trying to


542
00:15:08,306 --> 00:15:10,226
represent this full-fidelity


543
00:15:10,226 --> 00:15:11,816
image and that's the amount of


544
00:15:11,816 --> 00:15:13,116
memory that's needed to draw it


545
00:15:13,116 --> 00:15:13,736
into this buffer.


546
00:15:14,086 --> 00:15:15,576
So that's probably expected.


547
00:15:16,376 --> 00:15:17,736
But now let's say that we were


548
00:15:17,736 --> 00:15:20,266
going to draw a lower-fidelity


549
00:15:20,266 --> 00:15:21,316
version of our prairie dog,


550
00:15:21,626 --> 00:15:22,606
maybe something in black and


551
00:15:22,606 --> 00:15:23,416
white that we were going to


552
00:15:23,416 --> 00:15:25,186
sketch out with core graphics,


553
00:15:25,486 --> 00:15:26,556
maybe it was drawn with an Apple


554
00:15:26,616 --> 00:15:27,666
pencil on an iPad.


555
00:15:28,196 --> 00:15:29,096
That might look something like


556
00:15:29,096 --> 00:15:29,456
this.


557
00:15:30,496 --> 00:15:32,636
So how much memory is our


558
00:15:32,866 --> 00:15:34,156
low-fidelity prairie dog going


559
00:15:34,156 --> 00:15:34,606
to use?


560
00:15:35,506 --> 00:15:37,556
Well, it'll actually use the


561
00:15:37,556 --> 00:15:38,766
exact same amount of memory.


562
00:15:39,266 --> 00:15:41,286
Now here, that clearly is not as


563
00:15:41,286 --> 00:15:42,236
good of a use of memory.


564
00:15:42,236 --> 00:15:43,306
It's all grayscale.


565
00:15:43,796 --> 00:15:45,236
All of that deep color


566
00:15:45,646 --> 00:15:47,436
information is not even being


567
00:15:47,436 --> 00:15:48,736
used in this image.


568
00:15:49,196 --> 00:15:50,416
So hopefully we could do much


569
00:15:50,466 --> 00:15:53,456
better and iOS 12 introduces


570
00:15:53,456 --> 00:15:54,906
automatic backing store support


571
00:15:54,906 --> 00:15:57,456
to help make that exactly be the


572
00:15:57,456 --> 00:15:57,686
case.


573
00:15:58,766 --> 00:16:00,866
So all of your views now that


574
00:16:00,866 --> 00:16:02,176
implement draw Rect will have


575
00:16:02,296 --> 00:16:04,826
their backing stores defined by


576
00:16:04,826 --> 00:16:06,126
the depth of the content being


577
00:16:06,126 --> 00:16:06,986
drawn into them.


578
00:16:07,376 --> 00:16:08,366
So in this case where we're


579
00:16:08,366 --> 00:16:09,796
using Core Graphics to sketch


580
00:16:09,796 --> 00:16:11,906
out only grayscale content will


581
00:16:11,906 --> 00:16:13,396
actually automatically use an


582
00:16:13,486 --> 00:16:15,186
8-bit per pixel backing store


583
00:16:15,366 --> 00:16:17,156
instead of a 64-bit per pixel


584
00:16:17,156 --> 00:16:17,436
one.


585
00:16:17,946 --> 00:16:19,466
This reduces the memory demand


586
00:16:19,466 --> 00:16:21,226
for that drawn view by an order


587
00:16:21,226 --> 00:16:23,896
of magnitude down to 275


588
00:16:24,146 --> 00:16:26,216
kilobytes from 2.2 megabytes.


589
00:16:26,216 --> 00:16:28,806
That's a really big improvement


590
00:16:28,806 --> 00:16:29,956
across many different


591
00:16:29,956 --> 00:16:30,746
applications, both yours and


592
00:16:30,816 --> 00:16:30,966
ours.


593
00:16:31,516 --> 00:16:36,356
[ Applause ]


594
00:16:36,856 --> 00:16:38,266
So Automatic Backing Stores are


595
00:16:38,266 --> 00:16:40,206
enabled by default for all apps


596
00:16:40,266 --> 00:16:41,646
built with the iOS 12 SDK.


597
00:16:42,586 --> 00:16:44,806
All implementations of draw Rect


598
00:16:44,806 --> 00:16:46,316
on UIView will have this happen


599
00:16:46,396 --> 00:16:48,476
automatically as well as all


600
00:16:48,476 --> 00:16:49,856
content that you draw with UI


601
00:16:49,856 --> 00:16:51,406
Graphics Image Renderer into


602
00:16:51,406 --> 00:16:52,316
offscreen bitmaps.


603
00:16:53,156 --> 00:16:54,436
Now in the case of UI Graphics


604
00:16:54,436 --> 00:16:55,856
Image Renderer, we don't


605
00:16:55,856 --> 00:16:57,496
necessarily know what you're


606
00:16:57,596 --> 00:16:58,896
planning on doing with the image


607
00:16:58,896 --> 00:17:00,086
that you get out at the end.


608
00:17:00,606 --> 00:17:02,516
So in cases where you actually


609
00:17:02,516 --> 00:17:03,866
know that the automatic behavior


610
00:17:03,866 --> 00:17:05,675
is not what you want, from Image


611
00:17:05,675 --> 00:17:07,146
Renderer, you can specify the


612
00:17:07,146 --> 00:17:09,106
specific backing store style


613
00:17:09,106 --> 00:17:10,636
that you want, for example using


614
00:17:10,636 --> 00:17:12,386
the new Range API to specify


615
00:17:12,715 --> 00:17:13,915
specifically that you want an


616
00:17:13,915 --> 00:17:15,306
extended-range image.


617
00:17:15,866 --> 00:17:17,626
Now you can learn all about this


618
00:17:18,006 --> 00:17:20,306
and many more techniques around


619
00:17:20,306 --> 00:17:22,205
UI Image in the Images and


620
00:17:22,205 --> 00:17:23,796
Graphics Best Practices Session


621
00:17:23,796 --> 00:17:24,455
later this week.


622
00:17:24,915 --> 00:17:27,205
So that's our second top for


623
00:17:27,205 --> 00:17:27,656
performance.


624
00:17:28,425 --> 00:17:30,266
Next, let's move on to Auto


625
00:17:30,266 --> 00:17:30,636
Layout.


626
00:17:31,756 --> 00:17:34,766
Now Auto Layout in iOS 10 has


627
00:17:34,986 --> 00:17:36,386
some really great improvements.


628
00:17:36,866 --> 00:17:37,946
The team has been working


629
00:17:37,946 --> 00:17:40,076
incredibly hard to optimize Auto


630
00:17:40,076 --> 00:17:41,586
Layout for your apps as much as


631
00:17:41,626 --> 00:17:42,076
possible.


632
00:17:42,676 --> 00:17:44,726
So you'll find that Auto Layout


633
00:17:44,726 --> 00:17:46,856
is now faster by default in iOS


634
00:17:46,856 --> 00:17:47,146
12.


635
00:17:47,556 --> 00:17:48,306
We'll talk about a number of


636
00:17:48,306 --> 00:17:49,096
ways that's the case.


637
00:17:49,996 --> 00:17:52,016
But while they were profiling


638
00:17:52,016 --> 00:17:53,406
and optimizing Auto Layout, they


639
00:17:53,406 --> 00:17:54,866
also were looking across the


640
00:17:54,946 --> 00:17:56,476
system at many of our own apps


641
00:17:56,476 --> 00:17:57,896
and how they were using Auto


642
00:17:57,896 --> 00:17:59,686
Layout and they found a number


643
00:17:59,686 --> 00:18:00,726
of cases where there were some


644
00:18:00,726 --> 00:18:02,496
common pitfalls that different


645
00:18:02,566 --> 00:18:03,546
apps were falling in to.


646
00:18:04,026 --> 00:18:05,086
So we'll show you some of the


647
00:18:05,156 --> 00:18:06,406
simple best practices that you


648
00:18:06,406 --> 00:18:08,376
can follow in order to optimize


649
00:18:08,376 --> 00:18:09,486
your app layout as well.


650
00:18:10,796 --> 00:18:11,766
So this morning, though, let's


651
00:18:11,816 --> 00:18:13,466
look at how Auto Layout is


652
00:18:13,466 --> 00:18:16,306
faster by default in iOS 12 by


653
00:18:16,386 --> 00:18:17,976
looking at the asymptotic


654
00:18:18,016 --> 00:18:20,996
behavior of Auto Layout as we


655
00:18:20,996 --> 00:18:23,336
add more views in some common


656
00:18:23,446 --> 00:18:24,296
user scenarios.


657
00:18:25,646 --> 00:18:26,346
Now, we're looking at the


658
00:18:26,346 --> 00:18:28,196
asymptotics because we really


659
00:18:28,196 --> 00:18:29,476
want to look at what happens as


660
00:18:29,476 --> 00:18:31,056
we dramatically increase the


661
00:18:31,056 --> 00:18:31,956
number of views.


662
00:18:32,366 --> 00:18:33,776
This can really make performance


663
00:18:33,776 --> 00:18:35,486
issues show up quickly when we


664
00:18:35,486 --> 00:18:37,216
go to a really like absurdly


665
00:18:37,216 --> 00:18:38,356
large number of views.


666
00:18:38,866 --> 00:18:39,916
That just helps us see it


667
00:18:39,916 --> 00:18:40,186
though.


668
00:18:40,406 --> 00:18:41,776
The optimizations really do


669
00:18:41,776 --> 00:18:43,316
apply and make things faster


670
00:18:43,316 --> 00:18:44,906
even for small numbers of views.


671
00:18:45,366 --> 00:18:46,506
So let's start with a really


672
00:18:46,506 --> 00:18:48,366
common pattern, the simplest


673
00:18:48,366 --> 00:18:50,246
case really, Independent Sibling


674
00:18:50,246 --> 00:18:52,576
Views inside of some container.


675
00:18:53,006 --> 00:18:54,156
Now, these views are positioned


676
00:18:54,156 --> 00:18:55,386
with constraints against the


677
00:18:55,386 --> 00:18:57,596
container or other views but not


678
00:18:57,596 --> 00:18:58,536
against each other.


679
00:18:58,666 --> 00:18:59,566
They're independent of one


680
00:18:59,566 --> 00:18:59,876
another.


681
00:19:00,636 --> 00:19:02,846
Now in iOS 11, the cost of these


682
00:19:02,846 --> 00:19:04,446
independent siblings, as you


683
00:19:04,446 --> 00:19:06,246
continue to add more, grew


684
00:19:06,246 --> 00:19:06,816
linearly.


685
00:19:07,526 --> 00:19:08,996
So that's actually pretty great.


686
00:19:08,996 --> 00:19:10,536
That's exactly what you'd expect


687
00:19:10,536 --> 00:19:11,906
for a situation like this.


688
00:19:12,306 --> 00:19:13,706
Basically, what we're saying is


689
00:19:13,706 --> 00:19:15,116
that there's a fixed constant


690
00:19:15,116 --> 00:19:17,046
cost for each additional new


691
00:19:17,046 --> 00:19:18,326
view that you added into your


692
00:19:18,326 --> 00:19:19,876
hierarchy that was positioned


693
00:19:19,876 --> 00:19:20,926
independent of those other


694
00:19:20,926 --> 00:19:21,336
views.


695
00:19:22,516 --> 00:19:23,406
Now because that was already


696
00:19:23,506 --> 00:19:24,896
growing with the exponentials


697
00:19:24,896 --> 00:19:26,746
that we expected, that remains


698
00:19:26,746 --> 00:19:28,976
the case in iOS 12; however, the


699
00:19:29,096 --> 00:19:30,966
team has worked really hard to


700
00:19:30,966 --> 00:19:33,386
reduce that constant cost to


701
00:19:33,386 --> 00:19:34,956
make additional views as cheap


702
00:19:35,146 --> 00:19:36,076
to add as possible.


703
00:19:37,376 --> 00:19:38,326
So let's look at a more


704
00:19:38,326 --> 00:19:39,596
interesting example next.


705
00:19:39,986 --> 00:19:41,156
And in this case, we're going to


706
00:19:41,156 --> 00:19:42,236
take a look at Dependent


707
00:19:42,236 --> 00:19:42,846
Siblings.


708
00:19:43,326 --> 00:19:44,406
So this is the case where you


709
00:19:44,406 --> 00:19:46,826
have multiple child views and


710
00:19:46,826 --> 00:19:47,676
they're now, they have


711
00:19:47,726 --> 00:19:49,296
constraints between each other.


712
00:19:49,296 --> 00:19:51,146
So their layout is dependent on


713
00:19:51,146 --> 00:19:51,616
one another.


714
00:19:52,666 --> 00:19:54,536
Now, unfortunately, in iOS 11,


715
00:19:54,896 --> 00:19:56,226
you'll find that the asymptotics


716
00:19:56,226 --> 00:19:58,206
here weren't quite as nice.


717
00:19:58,206 --> 00:19:59,416
In fact, it was growing


718
00:19:59,496 --> 00:20:00,316
exponentially.


719
00:20:00,686 --> 00:20:03,186
So the more views that you


720
00:20:03,186 --> 00:20:04,786
added, the surprisingly larger


721
00:20:04,786 --> 00:20:05,496
cost you would find as you added


722
00:20:05,546 --> 00:20:05,976
additional ones.


723
00:20:07,826 --> 00:20:09,146
Now, the team worked really hard


724
00:20:09,146 --> 00:20:10,396
to identify the source of this


725
00:20:10,396 --> 00:20:12,796
exponential growth and fixed the


726
00:20:12,796 --> 00:20:14,436
algorithm so that is no longer


727
00:20:14,436 --> 00:20:14,826
the case.


728
00:20:15,386 --> 00:20:17,556
So on iOS 12, these now grow


729
00:20:17,726 --> 00:20:17,976
linearly.


730
00:20:18,516 --> 00:20:23,396
[ Applause ]


731
00:20:23,896 --> 00:20:24,866
And, of course, the team's also


732
00:20:24,866 --> 00:20:25,956
been working to reduce those


733
00:20:25,956 --> 00:20:27,586
constant costs for these cases


734
00:20:27,586 --> 00:20:28,016
as well.


735
00:20:29,096 --> 00:20:30,096
Now in addition to dependent


736
00:20:30,096 --> 00:20:31,366
siblings, there's another common


737
00:20:31,366 --> 00:20:32,506
type of layout that you'll find


738
00:20:32,506 --> 00:20:34,056
and that's Nested Views, when


739
00:20:34,056 --> 00:20:35,656
one view is inside of another


740
00:20:35,726 --> 00:20:36,966
and there's constraints out to


741
00:20:36,966 --> 00:20:37,706
those outer ones.


742
00:20:38,136 --> 00:20:39,506
This is obviously also a pretty


743
00:20:39,586 --> 00:20:41,586
common pattern in your apps and,


744
00:20:41,586 --> 00:20:42,866
unfortunately, here as well in


745
00:20:42,956 --> 00:20:44,566
iOS 11, we found some


746
00:20:44,566 --> 00:20:45,286
exponential growth.


747
00:20:45,966 --> 00:20:47,456
And again, great news.


748
00:20:47,456 --> 00:20:48,726
The team has also made this


749
00:20:48,796 --> 00:20:49,836
linear in iOS 12 as well.


750
00:20:50,516 --> 00:20:54,546
[ Applause ]


751
00:20:55,046 --> 00:20:56,566
So there's a number of really


752
00:20:56,566 --> 00:20:58,226
great improvements across Auto


753
00:20:58,226 --> 00:21:00,256
Layout in iOS 12 and you'll see


754
00:21:00,256 --> 00:21:01,346
these improvements in your apps


755
00:21:01,346 --> 00:21:02,406
as soon as you start running


756
00:21:02,406 --> 00:21:03,936
them on iOS 12 yourselves.


757
00:21:04,646 --> 00:21:06,296
To learn more about all of that,


758
00:21:06,956 --> 00:21:08,886
get a better sense, develop a


759
00:21:08,976 --> 00:21:11,016
good sense of how to get some


760
00:21:11,586 --> 00:21:13,346
gut feel for the performance of


761
00:21:13,346 --> 00:21:15,446
different layouts and here are


762
00:21:15,446 --> 00:21:16,846
some of these topics I was


763
00:21:16,846 --> 00:21:17,936
talking about that are common


764
00:21:18,046 --> 00:21:18,596
pitfalls.


765
00:21:18,896 --> 00:21:19,996
Definitely check out the High


766
00:21:19,996 --> 00:21:21,326
Performance Auto Layout talk


767
00:21:21,436 --> 00:21:22,726
later this week.


768
00:21:23,636 --> 00:21:26,156
So for our final framework


769
00:21:26,156 --> 00:21:28,216
update topic, let's turn to


770
00:21:28,216 --> 00:21:29,106
Swiftification.


771
00:21:29,676 --> 00:21:32,906
As you heard, iOS 12 introduces


772
00:21:32,986 --> 00:21:34,136
Swift 4.2.


773
00:21:34,586 --> 00:21:36,116
And for Swift 4.2 we really


774
00:21:36,116 --> 00:21:38,326
wanted to make sure that UIKit


775
00:21:38,406 --> 00:21:40,596
had a really great feel when


776
00:21:40,596 --> 00:21:42,676
used in Swift across your app,


777
00:21:43,026 --> 00:21:44,376
especially where it interacted


778
00:21:44,376 --> 00:21:45,726
with other Swift Standard


779
00:21:45,726 --> 00:21:48,106
Library or places that Swift had


780
00:21:48,106 --> 00:21:48,786
common patterns.


781
00:21:49,606 --> 00:21:51,906
So, we audited all of UIKit and


782
00:21:51,906 --> 00:21:53,376
made sure that everything feels


783
00:21:53,376 --> 00:21:54,936
like it fits really naturally.


784
00:21:55,636 --> 00:21:56,936
Even better, we made sure that


785
00:21:56,936 --> 00:21:58,226
all of the changes that we made


786
00:21:58,226 --> 00:22:00,096
to UIKit are all automatically


787
00:22:00,096 --> 00:22:01,706
migratable so there's no


788
00:22:01,706 --> 00:22:02,546
additional work that you should


789
00:22:02,546 --> 00:22:03,966
have to do in order to get these


790
00:22:03,966 --> 00:22:04,536
updates.


791
00:22:05,746 --> 00:22:07,536
Now, these updates fall into


792
00:22:07,536 --> 00:22:08,766
really three categories that


793
00:22:08,766 --> 00:22:09,736
we'll talk about this morning,


794
00:22:10,016 --> 00:22:11,756
although there's actually a ton


795
00:22:11,756 --> 00:22:13,856
of improvements and consistency


796
00:22:13,856 --> 00:22:15,076
improvements that you'll find as


797
00:22:15,076 --> 00:22:15,816
you look at the SDK.


798
00:22:16,566 --> 00:22:17,326
But today we'll talk about


799
00:22:17,326 --> 00:22:19,126
nesting of types, constants, and


800
00:22:19,166 --> 00:22:19,586
functions.


801
00:22:19,656 --> 00:22:22,176
So let's first look at nesting


802
00:22:22,176 --> 00:22:22,636
types.


803
00:22:23,516 --> 00:22:25,476
Now in Swift 4, there were a


804
00:22:25,476 --> 00:22:26,776
number of types that were in the


805
00:22:26,776 --> 00:22:28,766
global name space, things like


806
00:22:28,806 --> 00:22:30,006
UI Application State.


807
00:22:30,666 --> 00:22:32,916
For types like this that have a


808
00:22:32,966 --> 00:22:35,096
really strong use along with


809
00:22:35,096 --> 00:22:37,276
another class, we've now nested


810
00:22:37,276 --> 00:22:38,016
them within this class.


811
00:22:38,796 --> 00:22:39,746
So we looked at all the


812
00:22:39,746 --> 00:22:42,156
enumerations and other global


813
00:22:42,206 --> 00:22:43,796
types of this sort and now have


814
00:22:43,796 --> 00:22:45,476
moved them to be child types of


815
00:22:45,646 --> 00:22:46,576
the relevant class.


816
00:22:46,906 --> 00:22:47,576
So this becomes


817
00:22:47,576 --> 00:22:49,326
UIApplication.State.


818
00:22:49,796 --> 00:22:51,536
This sends a much stronger


819
00:22:51,536 --> 00:22:52,786
message about the relationship


820
00:22:52,786 --> 00:22:54,216
between these two and makes them


821
00:22:54,216 --> 00:22:55,276
easier to find as well.


822
00:22:56,046 --> 00:22:57,546
Now in comes cases this can also


823
00:22:57,546 --> 00:23:00,286
help improve understandability


824
00:23:00,286 --> 00:23:02,246
and remove some confusion.


825
00:23:02,696 --> 00:23:03,546
So in this case, let's look at


826
00:23:03,546 --> 00:23:05,016
UI Tab Bar Item Positioning.


827
00:23:05,626 --> 00:23:06,216
Now do you think that's


828
00:23:06,306 --> 00:23:09,086
UITabBarItemPositioning or


829
00:23:09,226 --> 00:23:10,896
UITabBarItem Positioning?


830
00:23:10,896 --> 00:23:12,586
It could actually be either.


831
00:23:12,836 --> 00:23:13,906
Those are both classes.


832
00:23:14,406 --> 00:23:16,546
And in Swift 42, it is now


833
00:23:16,616 --> 00:23:17,726
perfectly clear that it is, in


834
00:23:17,726 --> 00:23:20,066
fact, UITabBar ItemPositioning.


835
00:23:20,646 --> 00:23:23,226
So in addition to nested types,


836
00:23:23,546 --> 00:23:25,036
we've also nested a bunch of


837
00:23:25,036 --> 00:23:25,666
constants.


838
00:23:26,106 --> 00:23:27,486
So if we look here at Swift 4,


839
00:23:27,486 --> 00:23:29,926
we had NS notifications were all


840
00:23:29,926 --> 00:23:30,636
in the global


841
00:23:30,706 --> 00:23:32,796
NSNotification.Name namespace


842
00:23:33,206 --> 00:23:34,616
and their associated user info


843
00:23:34,616 --> 00:23:35,956
keys were actually just global


844
00:23:35,956 --> 00:23:37,206
constants that were floating out


845
00:23:37,206 --> 00:23:37,386
there.


846
00:23:38,026 --> 00:23:39,676
So for consistency with AppKit


847
00:23:39,676 --> 00:23:41,146
and to make it easier to find


848
00:23:41,146 --> 00:23:42,656
and associate these types


849
00:23:42,706 --> 00:23:44,196
together, they've now all been


850
00:23:44,196 --> 00:23:45,436
nested under the class that


851
00:23:45,436 --> 00:23:46,026
they're used with.


852
00:23:46,456 --> 00:23:47,426
So something like did Change


853
00:23:47,426 --> 00:23:49,006
Status Bar Orientation is now


854
00:23:49,316 --> 00:23:51,336
under UI Application did Change


855
00:23:51,336 --> 00:23:52,346
Status Bar Orientation


856
00:23:52,346 --> 00:23:54,106
Notification and its user info


857
00:23:54,106 --> 00:23:55,436
key moved along with it so that


858
00:23:55,436 --> 00:23:56,486
they're all co-located.


859
00:23:57,126 --> 00:23:59,656
Now we've also audited all of


860
00:23:59,656 --> 00:24:01,326
the other global constants all


861
00:24:01,326 --> 00:24:03,806
throughout UIKit and nested all


862
00:24:03,806 --> 00:24:05,006
of them in appropriate places.


863
00:24:05,346 --> 00:24:06,486
So things like UI Float Range


864
00:24:06,486 --> 00:24:08,536
Zero and UI Float Range Infinite


865
00:24:08,536 --> 00:24:10,216
have not just become properties


866
00:24:10,216 --> 00:24:12,396
on UI Float Range so they're


867
00:24:12,396 --> 00:24:14,326
both easy to find and easier to


868
00:24:14,326 --> 00:24:14,786
use.


869
00:24:15,096 --> 00:24:16,686
In places to take a UI Float


870
00:24:16,686 --> 00:24:18,096
Range, you can now just type


871
00:24:18,206 --> 00:24:20,386
.zero or .infinite and, in fact,


872
00:24:20,616 --> 00:24:21,656
because they're now properties,


873
00:24:21,906 --> 00:24:23,226
Xcode can suggest them as


874
00:24:23,226 --> 00:24:24,866
auto-completions for you in


875
00:24:24,866 --> 00:24:26,666
places where they make sense.


876
00:24:27,776 --> 00:24:29,046
Now in addition to constants,


877
00:24:29,046 --> 00:24:30,316
we've also audited all of our


878
00:24:30,316 --> 00:24:31,056
global functions.


879
00:24:31,536 --> 00:24:32,776
So things like UI Edge Inserts


880
00:24:32,776 --> 00:24:36,206
and UI Image had some global


881
00:24:36,206 --> 00:24:37,376
functions for operating on


882
00:24:37,376 --> 00:24:38,076
different types.


883
00:24:38,556 --> 00:24:40,326
Now in Swift 4.2, these had


884
00:24:40,326 --> 00:24:42,676
become methods on the


885
00:24:42,676 --> 00:24:43,796
appropriate type.


886
00:24:44,576 --> 00:24:46,286
So it's now really easy to inset


887
00:24:46,326 --> 00:24:48,196
Rect or get png Data from an


888
00:24:48,196 --> 00:24:50,366
image in a really natural Swift


889
00:24:50,366 --> 00:24:51,046
feeling way.


890
00:24:52,516 --> 00:24:57,166
[ Applause ]


891
00:24:57,666 --> 00:24:59,176
Now, here was one other big


892
00:24:59,176 --> 00:25:00,286
class of functions that I want


893
00:25:00,286 --> 00:25:01,236
to mention this morning and that


894
00:25:01,236 --> 00:25:02,446
was all of these string


895
00:25:02,446 --> 00:25:03,956
conversion functions for all of


896
00:25:03,956 --> 00:25:05,306
the many types in UIKit,


897
00:25:05,776 --> 00:25:07,206
CGPoint, CGRect, CGSize,


898
00:25:07,346 --> 00:25:09,706
CGVector, all of them, there's


899
00:25:09,706 --> 00:25:11,726
quite a lot, both to and from


900
00:25:11,726 --> 00:25:12,106
strings.


901
00:25:12,516 --> 00:25:14,676
Now, when we looked at these and


902
00:25:14,676 --> 00:25:15,386
tried to decide where they


903
00:25:15,386 --> 00:25:16,836
should go, we realized that they


904
00:25:16,836 --> 00:25:18,596
actually have two different use


905
00:25:18,596 --> 00:25:19,086
cases.


906
00:25:19,386 --> 00:25:20,716
One is for encoding and


907
00:25:20,716 --> 00:25:21,216
decoding.


908
00:25:21,676 --> 00:25:22,586
But the other is that they're


909
00:25:22,666 --> 00:25:24,276
commonly used to print things


910
00:25:24,466 --> 00:25:25,296
when you're just trying to get


911
00:25:25,296 --> 00:25:26,276
some debug descriptions.


912
00:25:26,826 --> 00:25:28,586
And those are two very different


913
00:25:28,586 --> 00:25:30,886
uses but, in fact, Swift has


914
00:25:30,946 --> 00:25:32,466
first-class support for both of


915
00:25:32,466 --> 00:25:33,166
those cases.


916
00:25:33,626 --> 00:25:34,846
And so we've made sure that all


917
00:25:34,846 --> 00:25:36,166
of these types will work really


918
00:25:36,166 --> 00:25:37,436
great with Swift's built-in


919
00:25:37,436 --> 00:25:38,156
support for both.


920
00:25:38,776 --> 00:25:40,706
So in Swift 4.2, all of these


921
00:25:40,786 --> 00:25:42,436
types will conform to Codable so


922
00:25:42,706 --> 00:25:44,526
that you can very easily do


923
00:25:44,526 --> 00:25:46,146
things such as encode and decode


924
00:25:46,146 --> 00:25:47,616
JSON for all of these different


925
00:25:47,616 --> 00:25:47,896
types.


926
00:25:48,516 --> 00:25:53,656
[ Applause ]


927
00:25:54,156 --> 00:25:55,236
Of course, debug printing in


928
00:25:55,306 --> 00:25:56,766
Swift is actually even easier


929
00:25:56,766 --> 00:25:58,296
than in Objective-C because you


930
00:25:58,296 --> 00:26:00,106
don't have to do any additional


931
00:26:00,106 --> 00:26:00,706
conversion.


932
00:26:01,276 --> 00:26:03,246
The built-in introspection of


933
00:26:03,246 --> 00:26:04,356
the types can allow you to print


934
00:26:04,356 --> 00:26:04,916
them directly.


935
00:26:05,226 --> 00:26:06,396
So in Swift 4.2, you just


936
00:26:06,396 --> 00:26:07,486
actually pass these types


937
00:26:07,486 --> 00:26:08,726
directly to your print functions


938
00:26:09,146 --> 00:26:10,416
if you want to print them out


939
00:26:10,446 --> 00:26:12,056
for debug purposes or log them.


940
00:26:12,916 --> 00:26:14,186
And then finally, you may


941
00:26:14,186 --> 00:26:15,786
already have some existing code


942
00:26:15,786 --> 00:26:17,196
that was using the behavior of


943
00:26:17,196 --> 00:26:18,826
the old string conversion


944
00:26:18,826 --> 00:26:20,986
functions and need a compatible


945
00:26:20,986 --> 00:26:22,766
functionality going forward.


946
00:26:23,366 --> 00:26:24,346
And so for that we've actually


947
00:26:24,346 --> 00:26:25,476
just renamed all of these and


948
00:26:25,476 --> 00:26:27,326
moved them to be properties on


949
00:26:27,496 --> 00:26:28,126
NSCoder.


950
00:26:28,526 --> 00:26:29,826
This really helps to emphasize


951
00:26:29,826 --> 00:26:30,926
the fact that the intent of


952
00:26:30,926 --> 00:26:32,516
these methods was to be used for


953
00:26:32,516 --> 00:26:34,276
encoding and decoding, so it's a


954
00:26:34,276 --> 00:26:35,476
pretty natural fit for them to


955
00:26:35,476 --> 00:26:36,066
go over there.


956
00:26:37,966 --> 00:26:39,476
So these are just a few of the


957
00:26:39,476 --> 00:26:40,666
consistency improvements that


958
00:26:40,666 --> 00:26:43,106
you'll find across the iOS 12


959
00:26:43,806 --> 00:26:46,946
SDK for Swift 4.2 but you'll


960
00:26:46,946 --> 00:26:48,056
find many more as well.


961
00:26:49,476 --> 00:26:51,176
Now speaking of encoding and


962
00:26:51,176 --> 00:26:54,246
decoding, NS Secure Coding, in


963
00:26:55,096 --> 00:26:57,566
iOS 12 there are now new secure


964
00:26:57,566 --> 00:26:59,456
by default encoding and decoding


965
00:26:59,456 --> 00:26:59,856
APIs.


966
00:27:01,246 --> 00:27:02,846
Adopting NS Secure Coding for


967
00:27:02,846 --> 00:27:04,546
all of your encoding needs on NS


968
00:27:04,586 --> 00:27:07,056
Keyed Archiver is really key to


969
00:27:07,056 --> 00:27:08,186
ensuring that you're protecting


970
00:27:08,186 --> 00:27:09,446
your customers from both


971
00:27:09,446 --> 00:27:11,646
malicious and corrupted data.


972
00:27:12,606 --> 00:27:13,876
You'll also find that the older


973
00:27:13,876 --> 00:27:15,246
insecure APIs are not


974
00:27:15,296 --> 00:27:15,856
deprecated.


975
00:27:16,776 --> 00:27:18,396
So you can learn all about that


976
00:27:18,396 --> 00:27:20,066
and get much more detail on it


977
00:27:20,156 --> 00:27:21,346
in the Data You Can Trust


978
00:27:21,346 --> 00:27:23,266
Session on Thursday at 9:00 a.m.


979
00:27:23,826 --> 00:27:25,996
And that's framework updates.


980
00:27:26,946 --> 00:27:28,496
Next, let's turn our attention


981
00:27:28,586 --> 00:27:30,056
to some enhancements to a number


982
00:27:30,056 --> 00:27:32,486
of existing APIs and we'll start


983
00:27:32,486 --> 00:27:33,466
with notifications.


984
00:27:34,256 --> 00:27:36,096
Notifications has a number of


985
00:27:36,096 --> 00:27:37,756
really great improvements in iOS


986
00:27:37,756 --> 00:27:39,296
12 but we're going to focus on


987
00:27:39,296 --> 00:27:40,436
just three this morning.


988
00:27:41,176 --> 00:27:42,496
Interaction within custom


989
00:27:42,496 --> 00:27:44,376
notifications, grouping of


990
00:27:44,376 --> 00:27:46,326
notifications, and access to


991
00:27:46,326 --> 00:27:47,866
your notification settings


992
00:27:47,866 --> 00:27:48,696
within your own apps.


993
00:27:50,206 --> 00:27:51,606
So let's start with interaction.


994
00:27:52,286 --> 00:27:54,866
Now custom notifications have


995
00:27:54,936 --> 00:27:56,486
for a while now allowed you to


996
00:27:56,486 --> 00:27:58,306
define a predefined set of


997
00:27:58,466 --> 00:28:00,686
actions for those notifications.


998
00:28:01,246 --> 00:28:03,436
In iOS 12, this set of actions


999
00:28:03,436 --> 00:28:04,756
is now no longer static.


1000
00:28:05,136 --> 00:28:05,856
It can be defined


1001
00:28:05,906 --> 00:28:07,506
programmatically and you can


1002
00:28:07,506 --> 00:28:09,406
change them at runtime.


1003
00:28:09,536 --> 00:28:11,916
In addition to these actions,


1004
00:28:12,296 --> 00:28:13,956
and even better than that, the


1005
00:28:13,956 --> 00:28:16,226
notifications themselves can now


1006
00:28:16,226 --> 00:28:17,616
be made interactive.


1007
00:28:18,156 --> 00:28:19,326
So for example, here, you can


1008
00:28:19,326 --> 00:28:21,286
see Messages is now allowing you


1009
00:28:21,366 --> 00:28:23,266
to reply quickly to a message


1010
00:28:23,466 --> 00:28:25,276
inline directly in that


1011
00:28:25,276 --> 00:28:26,046
notification.


1012
00:28:28,066 --> 00:28:29,266
Now in addition to interaction,


1013
00:28:29,596 --> 00:28:32,026
iOS 12 now includes grouping of


1014
00:28:32,026 --> 00:28:33,796
notifications by default and the


1015
00:28:33,796 --> 00:28:34,846
default behavior will be to


1016
00:28:34,886 --> 00:28:36,536
group all the notifications for


1017
00:28:36,536 --> 00:28:38,446
a particular app into a single


1018
00:28:38,446 --> 00:28:38,816
group.


1019
00:28:39,246 --> 00:28:40,606
But, of course, your app may


1020
00:28:40,606 --> 00:28:42,296
have custom needs to have more


1021
00:28:42,296 --> 00:28:44,256
granular groupings so something


1022
00:28:44,256 --> 00:28:46,036
like iMessage will group all of


1023
00:28:46,036 --> 00:28:47,296
the messages from a particular


1024
00:28:47,296 --> 00:28:49,046
conversation together and


1025
00:28:49,116 --> 00:28:50,556
separate from all the rest of


1026
00:28:50,596 --> 00:28:51,836
the notifications for that app.


1027
00:28:53,116 --> 00:28:54,536
Now you can adopt this in your


1028
00:28:54,536 --> 00:28:56,716
app as well by just tagging your


1029
00:28:56,716 --> 00:28:58,706
notifications with a particular


1030
00:28:58,806 --> 00:29:00,526
thread identifier and then all


1031
00:29:00,526 --> 00:29:01,776
the notifications for that


1032
00:29:01,856 --> 00:29:03,976
threat identifier will appear in


1033
00:29:03,976 --> 00:29:04,586
a single group.


1034
00:29:05,106 --> 00:29:08,106
Now the UI updates for


1035
00:29:08,106 --> 00:29:10,746
notifications in iOS 12 also


1036
00:29:10,746 --> 00:29:13,246
include some new ability for


1037
00:29:13,246 --> 00:29:16,026
users to customize the delivery


1038
00:29:16,026 --> 00:29:17,526
behavior of their notifications.


1039
00:29:18,436 --> 00:29:19,836
But, of course, your apps may


1040
00:29:19,836 --> 00:29:21,436
also include some existing, more


1041
00:29:21,436 --> 00:29:22,996
granular controls for


1042
00:29:22,996 --> 00:29:24,966
notification management within


1043
00:29:24,966 --> 00:29:25,876
your apps as well.


1044
00:29:26,436 --> 00:29:28,316
And iOS 12 introduces a new API


1045
00:29:28,536 --> 00:29:29,686
that makes it easy for your


1046
00:29:29,686 --> 00:29:31,546
customers to get directly deep


1047
00:29:31,546 --> 00:29:33,336
linked into your notification


1048
00:29:33,336 --> 00:29:35,056
settings UI exactly when they're


1049
00:29:35,056 --> 00:29:36,486
looking for those more granular


1050
00:29:36,486 --> 00:29:37,096
controls.


1051
00:29:37,096 --> 00:29:39,836
So you can learn more about all


1052
00:29:39,836 --> 00:29:41,576
of these notification things in


1053
00:29:41,576 --> 00:29:43,266
What's New in User Notifications


1054
00:29:43,476 --> 00:29:45,076
and Using Grouped Notifications


1055
00:29:45,226 --> 00:29:45,866
later this week.


1056
00:29:46,906 --> 00:29:48,086
That's notifications.


1057
00:29:49,006 --> 00:29:52,516
Next, let's talk about messages.


1058
00:29:52,586 --> 00:29:54,856
Now messages in iOS 12 includes


1059
00:29:54,856 --> 00:29:56,336
some really new and exciting


1060
00:29:56,336 --> 00:29:57,396
features in the camera.


1061
00:29:58,166 --> 00:29:59,426
And you can bring all of your


1062
00:29:59,426 --> 00:30:01,126
iMessage stickers directly into


1063
00:30:01,126 --> 00:30:02,316
the camera as well.


1064
00:30:02,916 --> 00:30:04,006
If you're using the Xcode


1065
00:30:04,046 --> 00:30:05,696
sticker template, this will work


1066
00:30:05,696 --> 00:30:07,196
automatically by default with no


1067
00:30:07,196 --> 00:30:07,976
additional work on your behalf.


1068
00:30:08,116 --> 00:30:11,776
But if you're building a more


1069
00:30:11,776 --> 00:30:14,336
custom sticker experience using


1070
00:30:14,376 --> 00:30:15,376
the MS Messages App View


1071
00:30:15,376 --> 00:30:17,726
Controller, some small amount of


1072
00:30:17,726 --> 00:30:18,846
adoption is required.


1073
00:30:18,846 --> 00:30:21,076
Now there's a new MS Messages


1074
00:30:21,116 --> 00:30:22,786
Supported Presentation Contexts


1075
00:30:22,786 --> 00:30:25,166
API that you can add into your


1076
00:30:25,166 --> 00:30:27,436
user info plist and then specify


1077
00:30:27,436 --> 00:30:28,786
that you want to appear both in


1078
00:30:28,786 --> 00:30:30,446
the messages context and the


1079
00:30:30,446 --> 00:30:31,326
media context.


1080
00:30:32,076 --> 00:30:33,506
Once you've done that, your apps


1081
00:30:33,506 --> 00:30:34,706
will appear both in the App


1082
00:30:34,706 --> 00:30:37,806
Strip and also within the


1083
00:30:37,806 --> 00:30:38,176
camera.


1084
00:30:39,046 --> 00:30:40,696
Now if at runtime you need to


1085
00:30:40,696 --> 00:30:41,956
figure out which context you're


1086
00:30:41,956 --> 00:30:43,596
in so that for example you want


1087
00:30:43,596 --> 00:30:45,076
to customize the display of your


1088
00:30:45,076 --> 00:30:46,646
stickers a little bit, there's a


1089
00:30:46,646 --> 00:30:48,036
new API for that as well.


1090
00:30:48,676 --> 00:30:51,316
By checking the presentation


1091
00:30:51,316 --> 00:30:52,586
context, you can quickly see


1092
00:30:52,586 --> 00:30:54,246
whether you're in messages or in


1093
00:30:55,176 --> 00:30:56,026
the camera.


1094
00:30:56,176 --> 00:30:57,526
Now in addition to these


1095
00:30:57,526 --> 00:30:59,716
features, iOS 12 also brings a


1096
00:30:59,716 --> 00:31:01,456
new access for interaction to


1097
00:31:01,456 --> 00:31:02,396
your messages apps.


1098
00:31:02,906 --> 00:31:05,746
In compact mode, previously


1099
00:31:05,906 --> 00:31:07,506
swiping horizontally down in


1100
00:31:07,506 --> 00:31:09,106
your messages app would switch


1101
00:31:09,156 --> 00:31:10,066
between apps.


1102
00:31:10,746 --> 00:31:13,146
In iOS 12, these horizontal


1103
00:31:13,206 --> 00:31:14,416
swipes and interactions that


1104
00:31:14,416 --> 00:31:15,576
move horizontally are now


1105
00:31:15,576 --> 00:31:17,136
available for us by your apps


1106
00:31:17,206 --> 00:31:19,106
directly so they'll interact


1107
00:31:19,206 --> 00:31:20,506
with your apps rather than


1108
00:31:20,506 --> 00:31:22,286
switching to a different app.


1109
00:31:23,106 --> 00:31:24,196
And that's Messages.


1110
00:31:25,096 --> 00:31:27,196
Next, let's talk about automatic


1111
00:31:27,246 --> 00:31:28,906
passwords and security code


1112
00:31:28,906 --> 00:31:29,526
autofill.


1113
00:31:30,596 --> 00:31:33,936
Now iOS 11 introduced automatic


1114
00:31:34,296 --> 00:31:37,326
passwords or password entry into


1115
00:31:37,326 --> 00:31:39,176
your apps.


1116
00:31:39,176 --> 00:31:40,796
And in iOS 12, we're taking


1117
00:31:40,796 --> 00:31:42,186
these a whole step further.


1118
00:31:42,786 --> 00:31:45,296
But let's go back to the


1119
00:31:45,296 --> 00:31:46,436
beginning for a minute and talk


1120
00:31:46,436 --> 00:31:48,586
about the entire experience.


1121
00:31:49,146 --> 00:31:51,996
So for users that have passwords


1122
00:31:51,996 --> 00:31:54,186
stored in iCloud Keychain, since


1123
00:31:54,266 --> 00:31:55,726
iOS 11 it's now been possible to


1124
00:31:55,726 --> 00:31:56,796
have those automatically get


1125
00:31:56,866 --> 00:31:58,556
populated into your app in your


1126
00:31:58,556 --> 00:31:59,406
login flows.


1127
00:32:00,146 --> 00:32:02,206
Now in iOS 12, these passwords


1128
00:32:02,206 --> 00:32:04,596
can also be stored into iCloud


1129
00:32:04,686 --> 00:32:06,506
Keychain from your apps both


1130
00:32:06,506 --> 00:32:09,006
from your login window flows and


1131
00:32:09,006 --> 00:32:10,926
also from your password change


1132
00:32:10,926 --> 00:32:12,086
request UIs.


1133
00:32:13,296 --> 00:32:14,666
As soon as a user logs in,


1134
00:32:14,956 --> 00:32:16,156
they'll be prompted to save the


1135
00:32:16,156 --> 00:32:17,626
password to iCloud Keychain.


1136
00:32:18,436 --> 00:32:20,226
Now even better, iOS 12 can


1137
00:32:20,226 --> 00:32:22,146
automatically generate passwords


1138
00:32:22,486 --> 00:32:25,026
in your new account flows and in


1139
00:32:25,026 --> 00:32:26,496
your password change flows.


1140
00:32:26,896 --> 00:32:28,536
Adopting this is really easy.


1141
00:32:28,896 --> 00:32:29,886
You just make sure that you've


1142
00:32:29,936 --> 00:32:31,996
tagged your password fields with


1143
00:32:32,116 --> 00:32:33,856
either the password text content


1144
00:32:33,856 --> 00:32:35,906
type, if it's a login field, or


1145
00:32:35,906 --> 00:32:37,726
the new password text content


1146
00:32:37,726 --> 00:32:39,146
type if it's either a new


1147
00:32:39,146 --> 00:32:40,416
account or password change


1148
00:32:40,416 --> 00:32:40,696
field.


1149
00:32:41,336 --> 00:32:45,226
If your services have a specific


1150
00:32:45,226 --> 00:32:47,166
requirement on passwords for


1151
00:32:47,166 --> 00:32:49,056
example if they got required or


1152
00:32:49,096 --> 00:32:51,226
disallowed characters or if they


1153
00:32:51,226 --> 00:32:53,146
have other requirements such as


1154
00:32:53,146 --> 00:32:55,026
maximum number of consecutive


1155
00:32:55,026 --> 00:32:56,586
repeated characters, you can


1156
00:32:56,586 --> 00:32:58,026
specify these requirements as


1157
00:32:58,026 --> 00:32:59,466
well to make sure that the


1158
00:32:59,466 --> 00:33:00,526
automatically generated


1159
00:33:00,526 --> 00:33:02,256
passwords are fully compatible


1160
00:33:02,256 --> 00:33:03,426
with all of your requirements.


1161
00:33:04,146 --> 00:33:06,946
Now, the final bit of friction


1162
00:33:06,946 --> 00:33:07,896
during some of your login


1163
00:33:07,896 --> 00:33:09,706
experiences is when you have to


1164
00:33:09,706 --> 00:33:10,716
take that two-factor


1165
00:33:10,716 --> 00:33:12,426
authentication code, get it out


1166
00:33:12,426 --> 00:33:14,066
of a text message and into your


1167
00:33:15,036 --> 00:33:15,226
apps.


1168
00:33:15,226 --> 00:33:17,496
IOS 12 makes this really easy by


1169
00:33:17,496 --> 00:33:19,046
automatically identifying these


1170
00:33:19,046 --> 00:33:21,216
notifications, noting the


1171
00:33:21,326 --> 00:33:23,176
security code in them, and


1172
00:33:23,176 --> 00:33:24,416
suggesting it right in the Quick


1173
00:33:24,416 --> 00:33:25,796
Type candidate bar so that it's


1174
00:33:25,836 --> 00:33:27,156
really easy to get it right into


1175
00:33:27,186 --> 00:33:27,656
your app.


1176
00:33:28,506 --> 00:33:29,466
Now the only thing you have to


1177
00:33:29,526 --> 00:33:30,726
do to make sure this works in


1178
00:33:30,726 --> 00:33:32,086
your app is to be sure that


1179
00:33:32,086 --> 00:33:34,126
you're using standard iOS text


1180
00:33:34,126 --> 00:33:37,126
interaction APIs in order to


1181
00:33:37,196 --> 00:33:40,786
accept these passcodes.


1182
00:33:40,866 --> 00:33:42,126
With all of these new features,


1183
00:33:42,316 --> 00:33:44,196
iOS 12 is enabling a much more


1184
00:33:44,286 --> 00:33:47,456
secure future with unique,


1185
00:33:47,686 --> 00:33:49,546
strong passwords used for every


1186
00:33:49,626 --> 00:33:51,426
service that you never have to


1187
00:33:51,426 --> 00:33:52,996
memorize or type ever again.


1188
00:33:52,996 --> 00:33:55,636
You can learn all about this in


1189
00:33:55,636 --> 00:33:57,036
the Automatic Strong Passwords


1190
00:33:57,176 --> 00:33:58,426
and Security Code Autofill


1191
00:33:58,426 --> 00:34:01,096
Session later this week.


1192
00:34:01,576 --> 00:34:04,286
Now, our final API enhancement


1193
00:34:04,286 --> 00:34:05,826
topic is actually a bit of a


1194
00:34:05,826 --> 00:34:07,616
review but now with a little bit


1195
00:34:07,616 --> 00:34:08,366
more context.


1196
00:34:09,505 --> 00:34:11,356
So in iOS 11, we introduced Safe


1197
00:34:11,356 --> 00:34:12,176
Area insets.


1198
00:34:12,766 --> 00:34:14,666
Safe Area insets are a really


1199
00:34:14,775 --> 00:34:16,716
great way to make sure that your


1200
00:34:16,716 --> 00:34:19,446
content is avoiding any overlap


1201
00:34:19,596 --> 00:34:21,525
from other parts of the user


1202
00:34:21,525 --> 00:34:23,376
interface such as bars on the


1203
00:34:23,446 --> 00:34:24,576
top and bottom of the screen.


1204
00:34:25,906 --> 00:34:27,755
This is really great on iPhones


1205
00:34:27,755 --> 00:34:28,726
where bars are pretty


1206
00:34:28,726 --> 00:34:30,886
straightforward, but it's really


1207
00:34:30,976 --> 00:34:31,936
powerful as well.


1208
00:34:32,565 --> 00:34:34,005
Safe Area insets give you that


1209
00:34:34,076 --> 00:34:35,426
safe area coordinate in the


1210
00:34:35,426 --> 00:34:37,596
local coordinate space of any


1211
00:34:37,596 --> 00:34:39,795
view in your application, so it


1212
00:34:39,795 --> 00:34:41,266
scales even the much more


1213
00:34:41,266 --> 00:34:43,646
complex interfaces, things like


1214
00:34:43,646 --> 00:34:45,466
iPad Split View which has


1215
00:34:45,755 --> 00:34:48,346
different height bars on the


1216
00:34:48,346 --> 00:34:49,706
master and detail side of the


1217
00:34:49,706 --> 00:34:50,186
Split View.


1218
00:34:50,735 --> 00:34:54,116
The Safe Area insets in any view


1219
00:34:54,116 --> 00:34:55,326
underneath these bars will be


1220
00:34:55,326 --> 00:34:56,426
appropriate for the amount that


1221
00:34:56,426 --> 00:34:58,086
they're overlapped by the bar on


1222
00:34:58,126 --> 00:34:59,156
their side of the split.


1223
00:35:01,156 --> 00:35:02,606
So this is really great on


1224
00:35:02,606 --> 00:35:04,366
devices with rectangular screens


1225
00:35:04,866 --> 00:35:06,906
but it also is really powerful


1226
00:35:06,906 --> 00:35:07,946
on devices that have


1227
00:35:08,126 --> 00:35:09,636
non-rectangular screens like


1228
00:35:09,636 --> 00:35:10,286
iPhone X.


1229
00:35:11,676 --> 00:35:12,986
Now, you can see here we've got


1230
00:35:12,986 --> 00:35:14,916
our larger bars at the top and


1231
00:35:14,916 --> 00:35:16,236
bottom than we have on devices


1232
00:35:16,236 --> 00:35:17,066
that have home buttons.


1233
00:35:17,686 --> 00:35:18,616
And the Safe Area insets


1234
00:35:18,616 --> 00:35:19,956
obviously have just grown to


1235
00:35:19,956 --> 00:35:21,286
accommodate that larger size.


1236
00:35:21,946 --> 00:35:23,796
Now, unique to iPhone X is that


1237
00:35:23,846 --> 00:35:25,746
there are Safe Area insets even


1238
00:35:25,746 --> 00:35:27,226
in cases where no bars are


1239
00:35:27,296 --> 00:35:29,586
present and this extends the


1240
00:35:29,586 --> 00:35:31,806
landscape mode too where it can


1241
00:35:31,806 --> 00:35:32,826
really help you make sure that


1242
00:35:32,826 --> 00:35:34,596
you've got a rectangular area at


1243
00:35:34,596 --> 00:35:36,426
all times that's safe to display


1244
00:35:36,426 --> 00:35:38,606
content and will never be


1245
00:35:40,676 --> 00:35:40,846
clipped.


1246
00:35:41,036 --> 00:35:43,426
So I want to thank you all for


1247
00:35:43,426 --> 00:35:44,856
those of you who have adopted


1248
00:35:44,956 --> 00:35:46,256
Safe Area insets and updated


1249
00:35:46,256 --> 00:35:48,306
your apps for iPhone X.


1250
00:35:48,536 --> 00:35:49,806
It's been a really great


1251
00:35:49,806 --> 00:35:51,076
experience over the last year


1252
00:35:51,146 --> 00:35:52,326
and I'm sure most of you have


1253
00:35:52,326 --> 00:35:52,996
already done that.


1254
00:35:53,536 --> 00:35:55,206
If you haven't, now is a really


1255
00:35:55,206 --> 00:35:56,176
great time to do so.


1256
00:35:56,836 --> 00:35:57,986
Your customers will always


1257
00:35:57,986 --> 00:35:59,466
prefer apps that are being kept


1258
00:35:59,466 --> 00:36:01,716
up to date and support for


1259
00:36:01,756 --> 00:36:03,256
iPhone X is a really visible


1260
00:36:03,256 --> 00:36:04,296
indicator of that being the


1261
00:36:04,296 --> 00:36:04,596
case.


1262
00:36:05,166 --> 00:36:06,606
So if you haven't, definitely go


1263
00:36:06,606 --> 00:36:07,126
do it now.


1264
00:36:07,126 --> 00:36:08,626
And to help make sure you have


1265
00:36:08,626 --> 00:36:10,136
all the information necessary to


1266
00:36:10,136 --> 00:36:11,576
do that, you can check out the


1267
00:36:11,576 --> 00:36:13,526
UIKit Apps for Every Size and


1268
00:36:13,526 --> 00:36:15,226
Shape Session later this week


1269
00:36:15,446 --> 00:36:16,616
which will tell you both all


1270
00:36:16,616 --> 00:36:18,486
about Safe Area insets and all


1271
00:36:18,486 --> 00:36:20,776
of the other related inset APIs


1272
00:36:20,776 --> 00:36:22,336
all throughout UIKit making it


1273
00:36:22,336 --> 00:36:23,616
easy to make sure you have apps


1274
00:36:23,676 --> 00:36:26,646
that scale to every shape and


1275
00:36:27,716 --> 00:36:27,836
size.


1276
00:36:28,086 --> 00:36:29,186
So that's our framework updates


1277
00:36:29,816 --> 00:36:31,686
and our API enhancements.


1278
00:36:31,986 --> 00:36:33,606
Next, let's talk about Siri


1279
00:36:33,606 --> 00:36:34,296
Shortcuts.


1280
00:36:34,986 --> 00:36:37,056
So Siri Shortcuts is an exciting


1281
00:36:37,056 --> 00:36:39,316
new API in iOS 12.


1282
00:36:41,516 --> 00:36:42,886
Siri Shortcuts makes it easy to


1283
00:36:42,886 --> 00:36:44,716
get common actions out of your


1284
00:36:45,416 --> 00:36:47,296
app and make them accessible via


1285
00:36:47,296 --> 00:36:48,096
Siri.


1286
00:36:49,526 --> 00:36:50,726
Now, Siri Shortcuts can be


1287
00:36:50,726 --> 00:36:52,646
suggested proactively right on


1288
00:36:52,646 --> 00:36:54,286
the coversheet making it easy to


1289
00:36:54,416 --> 00:36:55,466
access actions that you would


1290
00:36:55,466 --> 00:36:57,426
want to access at the exact time


1291
00:36:57,426 --> 00:36:58,656
and place that you want to


1292
00:36:59,426 --> 00:37:00,436
access them.


1293
00:37:00,606 --> 00:37:01,866
Even better, they can also be


1294
00:37:01,866 --> 00:37:03,456
suggested right on the Siri


1295
00:37:03,456 --> 00:37:05,126
watch face on Apple Watch.


1296
00:37:06,696 --> 00:37:08,246
Now not only are Siri actions


1297
00:37:08,276 --> 00:37:09,916
suggested proactively but they


1298
00:37:09,916 --> 00:37:11,236
can also be set up to be


1299
00:37:11,236 --> 00:37:13,146
executed using a custom voice


1300
00:37:13,226 --> 00:37:13,596
phrase.


1301
00:37:17,256 --> 00:37:19,296
Now, adding Siri Action Support


1302
00:37:19,296 --> 00:37:21,786
to your apps is really easy.


1303
00:37:21,786 --> 00:37:22,946
You can use two APIs.


1304
00:37:23,266 --> 00:37:24,826
There's NS User Activity, which


1305
00:37:24,826 --> 00:37:26,306
you may already be using for


1306
00:37:26,306 --> 00:37:28,916
support for Handoff and


1307
00:37:28,916 --> 00:37:29,886
Spotlight integration, and


1308
00:37:30,356 --> 00:37:32,016
there's also support for Siri


1309
00:37:32,016 --> 00:37:33,346
Intents for more complex


1310
00:37:33,396 --> 00:37:35,316
scenarios where you have more


1311
00:37:35,316 --> 00:37:36,246
custom interactions.


1312
00:37:36,816 --> 00:37:38,156
So let's look first at NS User


1313
00:37:38,156 --> 00:37:38,606
Activity.


1314
00:37:39,406 --> 00:37:40,466
Now as I mentioned, NS User


1315
00:37:40,466 --> 00:37:42,056
Activity is a common API with


1316
00:37:42,056 --> 00:37:43,856
Handoff and Spotlight and this


1317
00:37:43,856 --> 00:37:45,116
could be a really great API to


1318
00:37:45,116 --> 00:37:46,826
use if your Siri Shortcuts


1319
00:37:46,826 --> 00:37:48,416
should get your customers back


1320
00:37:48,466 --> 00:37:50,116
to a specific place in your app,


1321
00:37:50,316 --> 00:37:51,516
for example loading a particular


1322
00:37:51,516 --> 00:37:54,226
message or document, the same as


1323
00:37:54,226 --> 00:37:55,056
you would do if you were trying


1324
00:37:55,056 --> 00:37:55,986
to hand that off to another


1325
00:37:55,986 --> 00:37:56,516
device.


1326
00:37:57,176 --> 00:37:58,706
If you're already doing this,


1327
00:37:58,806 --> 00:38:00,336
it's really easy to add support


1328
00:38:00,336 --> 00:38:01,256
for Siri Shortcuts.


1329
00:38:01,516 --> 00:38:02,696
You just set Eligible for


1330
00:38:02,696 --> 00:38:03,686
Prediction to true.


1331
00:38:04,096 --> 00:38:05,116
And if you're not, this may


1332
00:38:05,116 --> 00:38:06,596
still be a great way if your


1333
00:38:06,776 --> 00:38:07,816
shortcut fits into one of these


1334
00:38:07,816 --> 00:38:08,486
categories.


1335
00:38:09,836 --> 00:38:11,846
Now, if your app has other more


1336
00:38:11,846 --> 00:38:13,426
custom needs or if you just want


1337
00:38:13,426 --> 00:38:14,886
a lot more control, you can


1338
00:38:14,886 --> 00:38:16,856
adopt the Siri Kit Intents API.


1339
00:38:17,836 --> 00:38:18,986
Now Siri Kit Intents provides a


1340
00:38:18,986 --> 00:38:20,636
number of predefined intents


1341
00:38:20,796 --> 00:38:22,596
that you can easily adopt on


1342
00:38:22,596 --> 00:38:22,966
your own.


1343
00:38:23,036 --> 00:38:24,456
These are the same as the Siri


1344
00:38:24,456 --> 00:38:25,866
Kit Intents in previous years.


1345
00:38:26,666 --> 00:38:27,696
Now if your apps have more


1346
00:38:27,896 --> 00:38:29,396
custom behaviors, though, you


1347
00:38:29,396 --> 00:38:30,966
can now in iOS 12 define your


1348
00:38:30,966 --> 00:38:32,936
own custom intents.


1349
00:38:33,736 --> 00:38:35,176
Custom intents can be really


1350
00:38:35,216 --> 00:38:36,696
flexible and they do anything


1351
00:38:36,696 --> 00:38:37,336
that you would want.


1352
00:38:37,846 --> 00:38:38,956
In this case here, I've created


1353
00:38:38,956 --> 00:38:40,526
one to help me create my WWDC


1354
00:38:40,526 --> 00:38:41,296
slides next year.


1355
00:38:42,436 --> 00:38:43,436
Now the categories that you


1356
00:38:43,436 --> 00:38:45,066
could put your intents in to are


1357
00:38:45,066 --> 00:38:45,966
pretty broad already.


1358
00:38:46,236 --> 00:38:47,506
So here I've used the Create


1359
00:38:47,646 --> 00:38:48,236
category.


1360
00:38:48,766 --> 00:38:50,306
But if your intents are even


1361
00:38:50,306 --> 00:38:51,866
more generic than that, there


1362
00:38:51,866 --> 00:38:53,046
are even more general ones


1363
00:38:53,046 --> 00:38:54,886
available such as General Do,


1364
00:38:54,886 --> 00:38:56,336
Run, and Go options.


1365
00:38:57,776 --> 00:38:59,266
Now once you've created your


1366
00:38:59,266 --> 00:39:00,376
intent, you also want to make it


1367
00:39:00,376 --> 00:39:01,586
really easy for your customers


1368
00:39:01,586 --> 00:39:02,916
to create these custom shortcuts


1369
00:39:02,916 --> 00:39:03,426
to get to them.


1370
00:39:03,926 --> 00:39:05,526
And so there's now an API from


1371
00:39:05,526 --> 00:39:06,796
right within your app you can


1372
00:39:06,796 --> 00:39:08,396
allow customers to create a


1373
00:39:08,466 --> 00:39:09,466
custom voice shortcut.


1374
00:39:09,876 --> 00:39:10,816
So here I've got a button that


1375
00:39:10,816 --> 00:39:12,066
will just bring up a new panel


1376
00:39:12,326 --> 00:39:14,336
enabling me to create a new


1377
00:39:14,336 --> 00:39:15,956
shortcut right within my app as


1378
00:39:16,036 --> 00:39:17,346
soon as I finished an operation.


1379
00:39:17,936 --> 00:39:18,666
So if you're doing something


1380
00:39:18,666 --> 00:39:19,716
like ordering a coffee in the


1381
00:39:19,716 --> 00:39:21,326
morning and you notice it's


1382
00:39:22,086 --> 00:39:23,756
something that might be done


1383
00:39:23,756 --> 00:39:25,176
again, this is a great


1384
00:39:25,176 --> 00:39:27,186
opportunity to offer to create a


1385
00:39:27,266 --> 00:39:28,506
Siri Shortcut to do that next


1386
00:39:28,506 --> 00:39:28,736
time.


1387
00:39:29,616 --> 00:39:30,596
Now even better, you can also


1388
00:39:30,596 --> 00:39:32,066
combine these shortcuts together


1389
00:39:32,066 --> 00:39:34,236
using the new Shortcuts app


1390
00:39:34,236 --> 00:39:35,196
available from the app store.


1391
00:39:35,696 --> 00:39:37,176
So you can learn all about this


1392
00:39:37,176 --> 00:39:38,056
and much more in the


1393
00:39:38,056 --> 00:39:40,326
Introduction to Siri Shortcuts,


1394
00:39:40,856 --> 00:39:41,776
Building for Voice Siri


1395
00:39:41,776 --> 00:39:44,006
Shortcuts, and Siri Shortcuts on


1396
00:39:44,006 --> 00:39:45,326
the Siri Watch Face Sessions


1397
00:39:45,526 --> 00:39:45,976
later this week.


1398
00:39:46,136 --> 00:39:48,886
So we've talked a lot this


1399
00:39:48,886 --> 00:39:50,376
morning about what's new in iOS


1400
00:39:50,466 --> 00:39:52,796
12, but there are also a number


1401
00:39:52,796 --> 00:39:54,076
of great sessions that are worth


1402
00:39:54,076 --> 00:39:54,986
mentioning that aren't


1403
00:39:54,986 --> 00:39:56,286
necessarily about what's new.


1404
00:39:56,886 --> 00:39:58,386
So if you're new to creating


1405
00:39:58,386 --> 00:40:00,386
apps for iOS, there's a really


1406
00:40:00,386 --> 00:40:01,296
great session you should check


1407
00:40:01,296 --> 00:40:03,436
out called I have This Idea For


1408
00:40:03,436 --> 00:40:03,556
an App.


1409
00:40:03,796 --> 00:40:05,366
So definitely check that out.


1410
00:40:06,426 --> 00:40:07,516
And if you already have an app,


1411
00:40:07,516 --> 00:40:08,636
and are just looking to add more


1412
00:40:08,636 --> 00:40:10,106
polish, there's a couple other


1413
00:40:10,106 --> 00:40:11,776
great sessions as well, A Tour


1414
00:40:11,776 --> 00:40:13,646
of UI Collection View and Adding


1415
00:40:13,646 --> 00:40:14,996
Delight to Your IOS App.


1416
00:40:15,846 --> 00:40:17,516
So thanks so much for coming out


1417
00:40:17,516 --> 00:40:18,946
this morning to hear what's new.


1418
00:40:19,406 --> 00:40:20,266
Look forward to seeing you in


1419
00:40:20,266 --> 00:40:21,766
the labs and I hope you have a


1420
00:40:21,846 --> 00:40:22,336
great week.


1421
00:40:22,336 --> 00:40:22,576
Thanks.


1422
00:40:23,516 --> 00:40:30,570
[ Applause ]

