1
00:00:29,046 --> 00:00:29,966
>> RICKY MONDELLO: Good
afternoon everyone.


2
00:00:30,456 --> 00:00:33,106
Welcome. Before we get
started I just want


3
00:00:33,106 --> 00:00:34,966
to get a little feel
for the crowd.


4
00:00:35,136 --> 00:00:36,036
Little show of hands.


5
00:00:36,716 --> 00:00:37,796
Please raise your hand


6
00:00:37,796 --> 00:00:39,986
if you have an app that's
currently being distributed


7
00:00:39,986 --> 00:00:40,896
on one of the App Stores.


8
00:00:41,646 --> 00:00:42,846
That's a lot of you.


9
00:00:43,096 --> 00:00:44,946
Welcome, you're at the
right place, it's WWDC.


10
00:00:45,576 --> 00:00:48,706
And how many of you are just
learning how to write iOS, Mac,


11
00:00:48,706 --> 00:00:50,466
or Watch apps now and
just getting started?


12
00:00:50,466 --> 00:00:52,306
A few of you.


13
00:00:52,466 --> 00:00:53,726
Welcome to you as well.


14
00:00:54,326 --> 00:00:57,196
And of all of those apps that
you've built or you're thinking


15
00:00:57,196 --> 00:01:01,196
about building, how many of them
are a dedicated web browser?


16
00:01:02,526 --> 00:01:03,966
Okay. A few of you.


17
00:01:04,696 --> 00:01:05,355
Not that many.


18
00:01:07,036 --> 00:01:09,366
But how many of you have a
miniature web browser that's


19
00:01:09,366 --> 00:01:12,426
within your application that you
show whenever a user taps on --


20
00:01:12,426 --> 00:01:13,446
oh my God, all the hands are up.


21
00:01:13,816 --> 00:01:17,696
Yes, my name is Ricky Mondello,
I'm an engineer on the Safari


22
00:01:17,696 --> 00:01:21,636
and WebKit team, and my goal for
the next half hour is to get all


23
00:01:21,636 --> 00:01:22,786
of you out of the business


24
00:01:22,786 --> 00:01:24,506
of writing those
miniature web browsers.


25
00:01:25,516 --> 00:01:30,646
[ Cheers and applause ]


26
00:01:31,146 --> 00:01:31,336
>> RICKY MONDELLO: I'm going


27
00:01:31,336 --> 00:01:33,726
to show you how you
can use either Safari


28
00:01:34,386 --> 00:01:38,056
or the new Safari View
Controller to give you more time


29
00:01:38,056 --> 00:01:39,446
to focus on the parts
of your app


30
00:01:40,066 --> 00:01:41,076
that are special to your app.


31
00:01:41,596 --> 00:01:43,206
And to give your users features


32
00:01:43,206 --> 00:01:44,736
that they already
love from Safari.


33
00:01:45,736 --> 00:01:46,796
So if you're ready,
let's get started.


34
00:01:47,426 --> 00:01:52,096
At the center of this
topic is web content.


35
00:01:52,816 --> 00:01:55,126
And web content comes in all
sorts of different shapes


36
00:01:55,126 --> 00:01:58,026
and sizes, but for today's
discussion I'm going to lump it


37
00:01:58,026 --> 00:01:59,916
into two different buckets.


38
00:02:00,656 --> 00:02:03,316
The first bucket is
content within your app


39
00:02:03,826 --> 00:02:07,526
that just happens to be written
in HTML, JavaScript, and CSS.


40
00:02:08,166 --> 00:02:10,406
It's content that
you own or content


41
00:02:10,406 --> 00:02:12,216
that you're giving a
special presentation to.


42
00:02:13,116 --> 00:02:15,566
The important part, is that
it's not content that looks


43
00:02:15,566 --> 00:02:16,816
like a traditional web browser.


44
00:02:17,356 --> 00:02:19,306
It's not when a user is
browsing on a website.


45
00:02:20,616 --> 00:02:22,026
Which brings us to
the second case.


46
00:02:22,526 --> 00:02:26,146
When a user taps a link
in your app and you want


47
00:02:26,146 --> 00:02:27,986
to show them a view
that's kind of like Safari,


48
00:02:28,336 --> 00:02:30,036
so they can do some
short-term browsing.


49
00:02:31,616 --> 00:02:35,526
This session is primarily
focused on the second use case.


50
00:02:36,026 --> 00:02:37,726
We're going to see
how both Safari


51
00:02:38,026 --> 00:02:41,456
and Safari View Controller
can add years of features


52
00:02:41,456 --> 00:02:43,036
and polish to your applications.


53
00:02:44,036 --> 00:02:46,066
But before we do
that I want to touch


54
00:02:46,066 --> 00:02:47,306
on that other use
case real quick.


55
00:02:47,706 --> 00:02:51,216
If you're using web content
within your app but in a way


56
00:02:51,216 --> 00:02:51,786
that doesn't look


57
00:02:51,786 --> 00:02:55,676
like a traditional web browser
you might be using WKWebView


58
00:02:56,076 --> 00:02:59,896
or UIWebView, but WKWebView
is the preferred tool


59
00:02:59,896 --> 00:03:01,696
to do this; it's your friend.


60
00:03:02,896 --> 00:03:06,136
It was introduced in
iOS 8 and OS X Yosemite,


61
00:03:06,876 --> 00:03:09,416
and basically it's just a
rectangle around web content.


62
00:03:10,536 --> 00:03:14,166
You load a page into it,
you can evaluate JavaScript


63
00:03:14,166 --> 00:03:15,716
and get a result
from that JavaScript


64
00:03:15,716 --> 00:03:16,716
against the current page.


65
00:03:17,736 --> 00:03:20,226
You can modify navigations
or outright block them.


66
00:03:20,926 --> 00:03:23,056
And it's up to you to add
your own user interface.


67
00:03:23,716 --> 00:03:27,556
Back, forward buttons,
communicate progress, et cetera.


68
00:03:28,256 --> 00:03:33,856
And new on iOS 9 and OS X
El Capitan we've heard your


69
00:03:33,856 --> 00:03:36,416
feedback and we've
incorporated some of the pieces


70
00:03:36,486 --> 00:03:38,406
of WKWebView that were missing.


71
00:03:40,056 --> 00:03:43,946
First and foremost, you can
securely loadFileURLs now.


72
00:03:45,516 --> 00:03:50,546
[ Applause ]


73
00:03:51,046 --> 00:03:52,306
>> RICKY MONDELLO:
You can also loadData,


74
00:03:52,306 --> 00:03:55,156
say literal HTML string
that you wanted this way.


75
00:03:55,806 --> 00:03:57,126
No need to spin up a server.


76
00:03:57,426 --> 00:04:01,906
And if you like, you can
set your own customUserAgent


77
00:04:02,896 --> 00:04:03,296
string [applause].


78
00:04:07,966 --> 00:04:11,206
We've also added a new API to
manage the data that is stored


79
00:04:11,206 --> 00:04:14,526
by websites like cookies
and caches and other stuff.


80
00:04:14,616 --> 00:04:17,896
And it's called
WKWebsiteDataStore.


81
00:04:18,486 --> 00:04:21,276
It's a read/write property


82
00:04:21,396 --> 00:04:23,886
on your web view's
WKWebViewConfiguration.


83
00:04:24,896 --> 00:04:28,116
And with the data store you
can remove data by its type


84
00:04:28,816 --> 00:04:31,936
or you can do something like
remove all data that was added


85
00:04:31,936 --> 00:04:33,806
in the last hour,
which is pretty cool.


86
00:04:34,406 --> 00:04:37,336
And because the property,


87
00:04:37,626 --> 00:04:41,526
the store on your configuration
is writable you can replace it


88
00:04:41,526 --> 00:04:43,446
with a configuration
that's non-persistent


89
00:04:43,876 --> 00:04:45,036
which is exactly how you'd go


90
00:04:45,036 --> 00:04:46,466
about implementing
private browsing.


91
00:04:47,166 --> 00:04:53,366
So for web content that's
in your app that you own,


92
00:04:53,366 --> 00:04:55,426
you control, or you're
customizing,


93
00:04:55,986 --> 00:04:58,246
WKWebView is the right
tool for the job.


94
00:04:59,116 --> 00:05:03,936
And in iOS 9 and OS X El Capitan
we've given you more flexibility


95
00:05:03,936 --> 00:05:04,756
than ever before.


96
00:05:04,756 --> 00:05:10,476
But if you've have been sitting
here thinking: I don't need


97
00:05:10,476 --> 00:05:12,356
that flexibility, I don't want


98
00:05:12,356 --> 00:05:14,236
to evaluate JavaScript
against the page.


99
00:05:14,886 --> 00:05:17,116
I don't need to modify
navigations.


100
00:05:17,276 --> 00:05:19,926
I don't want to wire up my
own back and forward buttons,


101
00:05:20,766 --> 00:05:22,076
then the rest of
this talk is for you.


102
00:05:25,836 --> 00:05:28,296
We're going to talk about
how you can use either Safari


103
00:05:28,706 --> 00:05:31,546
or Safari View Controller
to get a better experience


104
00:05:31,546 --> 00:05:34,586
for your users and to give
you less code to write.


105
00:05:35,316 --> 00:05:37,036
And your first option is


106
00:05:37,036 --> 00:05:39,296
to simply delegate
the responsibility


107
00:05:39,296 --> 00:05:41,416
of showing web content
to Safari itself.


108
00:05:41,966 --> 00:05:44,036
And this is super easy to do.


109
00:05:44,326 --> 00:05:47,156
You just call UIApplications,
openURL method


110
00:05:47,716 --> 00:05:50,616
and iOS will switch away from
your app and over to Safari.


111
00:05:51,296 --> 00:05:55,786
And new to iOS 9,
the system affordance


112
00:05:55,786 --> 00:05:58,296
that you saw yesterday for
going back to the last app,


113
00:05:58,716 --> 00:06:00,216
makes this a better
option than ever.


114
00:06:00,696 --> 00:06:02,606
It's more lightweight
than iOS 8 was.


115
00:06:03,516 --> 00:06:08,596
[ Applause ]


116
00:06:09,096 --> 00:06:10,796
>> RICKY MONDELLO: And
delegating the responsibility


117
00:06:10,796 --> 00:06:13,246
of showing web content
to Safari ensures


118
00:06:13,246 --> 00:06:15,356
that users get a
first class experience


119
00:06:15,356 --> 00:06:16,266
with that web content.


120
00:06:16,846 --> 00:06:18,076
That's what Safari is all about.


121
00:06:19,396 --> 00:06:22,286
But if you'd like to maintain
your app's current experience,


122
00:06:22,706 --> 00:06:26,016
where users never even leave
your app, then you're going


123
00:06:26,016 --> 00:06:27,796
to be interested in
Safari View Controller.


124
00:06:29,176 --> 00:06:30,566
Let's take a look.


125
00:06:32,296 --> 00:06:35,626
This is Safari View Controller
with the page from apple.com


126
00:06:35,806 --> 00:06:38,146
with the web contents
slightly grayed out.


127
00:06:39,456 --> 00:06:41,726
The first thing you'll
probably notice is


128
00:06:41,726 --> 00:06:44,366
that Safari View Controller
looks a lot like Safari


129
00:06:44,866 --> 00:06:46,336
with a few intentional
differences.


130
00:06:47,646 --> 00:06:50,856
Safari View Controller's
job is to make it fast,


131
00:06:50,946 --> 00:06:54,066
easy and enjoyable for users to
tap on a link within your app,


132
00:06:55,236 --> 00:06:58,456
view a web page and press done
to go right back to your app.


133
00:07:00,006 --> 00:07:02,336
Safari View Controller
eliminates distractions.


134
00:07:03,126 --> 00:07:05,826
The URL field that you see
up there, it's read only.


135
00:07:06,136 --> 00:07:06,986
You can't change it.


136
00:07:06,986 --> 00:07:09,136
And there's just this one page.


137
00:07:09,486 --> 00:07:11,206
No other tabs to
distract the user.


138
00:07:11,746 --> 00:07:14,316
And with Safari in the name,


139
00:07:14,706 --> 00:07:16,746
Safari View Controller
brings features


140
00:07:17,586 --> 00:07:19,736
that your users already
love from Safari,


141
00:07:20,486 --> 00:07:22,096
but now they're in your app.


142
00:07:23,156 --> 00:07:25,346
Let's start off, first


143
00:07:25,346 --> 00:07:28,286
and foremost Safari View
Controller shares cookies


144
00:07:28,286 --> 00:07:30,016
with Safari and other
website data.


145
00:07:31,086 --> 00:07:34,126
So what this means is if one
of your users is already logged


146
00:07:34,126 --> 00:07:38,376
into a website in Safari, if
they tap a link in your app


147
00:07:38,376 --> 00:07:39,546
and Safari View Controller comes


148
00:07:39,546 --> 00:07:41,466
up they might still
be logged in.


149
00:07:42,366 --> 00:07:43,966
But if they're not
logged in already,


150
00:07:44,366 --> 00:07:45,366
we've got that covered too,


151
00:07:46,756 --> 00:07:48,656
because Safari View
Controller allows you


152
00:07:48,656 --> 00:07:52,166
to use Password Autofill to
fill any of the passwords synced


153
00:07:52,166 --> 00:07:55,096
across all of the user's
devices with iCloud Keychain.


154
00:07:56,226 --> 00:07:59,196
But before we go further it's
really important to point


155
00:07:59,196 --> 00:08:02,316
out this is completely
safe for your users.


156
00:08:02,676 --> 00:08:05,386
And the reason that
this is safe is


157
00:08:05,386 --> 00:08:08,906
because we're giving your users
access to their credentials,


158
00:08:09,176 --> 00:08:12,346
their user names and passwords,
but we're not giving access


159
00:08:12,346 --> 00:08:13,796
to the host app to this data.


160
00:08:14,916 --> 00:08:18,716
In fact, Safari View Controller
runs in a separate process


161
00:08:18,716 --> 00:08:19,636
from your application.


162
00:08:20,186 --> 00:08:23,086
Which categorically frees
you from the responsibility


163
00:08:23,206 --> 00:08:25,946
of thinking about this
important sensitive user data.


164
00:08:26,786 --> 00:08:27,326
That's on us.


165
00:08:27,396 --> 00:08:29,986
All right, let's go
back to features.


166
00:08:30,556 --> 00:08:35,216
When a user wants to have
something shipped to their home


167
00:08:35,216 --> 00:08:38,696
or to their work they'll be able
to use Contact Card Autofill


168
00:08:38,696 --> 00:08:41,056
to fill that information just
like they could in Safari.


169
00:08:41,746 --> 00:08:45,526
And when it comes time to make
a purchase they'll be able


170
00:08:45,526 --> 00:08:50,216
to fill their credit
cards as well.


171
00:08:50,406 --> 00:08:51,616
And if one of your users comes


172
00:08:51,616 --> 00:08:55,896
across an article that's
interesting, compelling,


173
00:08:56,366 --> 00:08:58,856
but difficult to
read, she will be able


174
00:08:58,856 --> 00:09:01,496
to use the Safari
Reader button in order


175
00:09:01,496 --> 00:09:05,146
to show a simplified cleaned
up version of that content.


176
00:09:05,736 --> 00:09:06,316
Super great.


177
00:09:06,446 --> 00:09:10,946
And new to iOS 9 in both
Safari and, of course,


178
00:09:10,946 --> 00:09:14,246
in Safari View Controller,
Reader is customizable,


179
00:09:14,946 --> 00:09:17,366
offering a bunch of themes
and some fonts to choose from.


180
00:09:17,856 --> 00:09:19,596
So it's never been
easier to read articles


181
00:09:19,596 --> 00:09:23,296
on the web exactly the way you
want to and your users want to.


182
00:09:26,866 --> 00:09:29,946
From the share button you'll
find exactly what you expect.


183
00:09:31,346 --> 00:09:33,986
You'll find the system
wide options for sharing


184
00:09:34,326 --> 00:09:37,356
to social networks and you'll
also find the ability to add


185
00:09:37,356 --> 00:09:39,716
to one's reading list,
but that's not all


186
00:09:39,716 --> 00:09:40,376
that you'll find here.


187
00:09:41,416 --> 00:09:44,286
Because alongside these
activities are activities


188
00:09:44,286 --> 00:09:46,716
that your app provides to
Safari View Controller.


189
00:09:47,866 --> 00:09:49,976
So if your app is
a social network,


190
00:09:50,366 --> 00:09:52,526
you can have a dedicated
button in the share sheet


191
00:09:52,736 --> 00:09:55,356
to share the current web
page to the social network.


192
00:09:56,066 --> 00:09:56,536
Really cool.


193
00:09:57,106 --> 00:09:59,946
And while we're on the
topic of customization,


194
00:10:00,956 --> 00:10:04,126
Safari View Controller will
respect a custom tint color


195
00:10:04,416 --> 00:10:06,606
that your app sets on it.


196
00:10:06,606 --> 00:10:09,996
So in this case up on the slide
the tint color has been changed


197
00:10:09,996 --> 00:10:12,216
from Safari's default
blue to orange.


198
00:10:12,966 --> 00:10:15,186
This is a great way to let
users know which app they're


199
00:10:15,186 --> 00:10:16,826
in when using Safari
View Controller.


200
00:10:18,756 --> 00:10:22,826
This next feature is really
awesome and it's new to iOS 9.


201
00:10:24,006 --> 00:10:27,836
It's called Content Blocking
-- go ahead [chuckles]!


202
00:10:28,516 --> 00:10:31,546
[ Applause ]


203
00:10:32,046 --> 00:10:33,786
>> RICKY MONDELLO: So the big
idea behind Content Blocking,


204
00:10:34,326 --> 00:10:36,746
is that it's possible to add
something to the experience


205
00:10:36,746 --> 00:10:39,376
of viewing a web page by
taking something away.


206
00:10:40,386 --> 00:10:44,346
In iOS 9, any app can write
a description of web content


207
00:10:44,676 --> 00:10:47,716
that Safari and Safari View
Controller should block


208
00:10:47,716 --> 00:10:48,976
as the user browses the Web.


209
00:10:48,976 --> 00:10:50,966
So lets take a look
at an example.


210
00:10:51,536 --> 00:10:56,446
Here's a web page that has
some pretty cool content,


211
00:10:57,076 --> 00:10:59,486
but in my case I
really don't like all


212
00:10:59,486 --> 00:11:01,676
of the clickbait headlines
that are in that side bar.


213
00:11:02,536 --> 00:11:05,056
So if you install the right
content blocker you won't


214
00:11:05,056 --> 00:11:06,156
believe what happens
next [chuckles].


215
00:11:06,666 --> 00:11:08,586
Oh, well, you will.


216
00:11:10,266 --> 00:11:11,196
The content disappears.


217
00:11:12,516 --> 00:11:16,096
[ Applause ]


218
00:11:16,596 --> 00:11:17,356
>> RICKY MONDELLO:
But that's not all


219
00:11:17,356 --> 00:11:18,956
that Content Blocking
is capable of.


220
00:11:19,476 --> 00:11:21,126
Content Blocking
can do a lot more


221
00:11:21,126 --> 00:11:22,956
than hiding elements on a page.


222
00:11:23,546 --> 00:11:25,716
You can out right block
loads from happening.


223
00:11:26,316 --> 00:11:28,846
You can block all
images or all scripts


224
00:11:28,896 --> 00:11:31,506
from a third-party domain that
you're not really fond of.


225
00:11:32,556 --> 00:11:35,006
And all of the content
blockers that a user turns


226
00:11:35,056 --> 00:11:38,126
on in settings will
apply in both Safari


227
00:11:38,746 --> 00:11:40,016
and in Safari View Controller.


228
00:11:41,176 --> 00:11:42,416
So what this means for you is


229
00:11:42,946 --> 00:11:45,286
after you've switched
your miniature web browser


230
00:11:45,286 --> 00:11:48,816
implementation over to using
Safari View Controller you won't


231
00:11:48,816 --> 00:11:50,986
get any complaints that
your users' ad blocker is


232
00:11:50,986 --> 00:11:51,426
not working.


233
00:11:52,206 --> 00:11:53,226
Pretty cool.


234
00:11:54,296 --> 00:11:55,496
So that's a bunch of features.


235
00:11:56,556 --> 00:11:57,706
Let's talk about safety.


236
00:11:58,286 --> 00:12:02,346
I mentioned a moment ago that
Safari View Controller runs


237
00:12:02,346 --> 00:12:05,306
in a separate process from your
app which frees you from a lot


238
00:12:05,306 --> 00:12:07,996
of responsibilities of thinking
about important user data.


239
00:12:08,826 --> 00:12:11,176
But when it comes to
browsing web content,


240
00:12:11,916 --> 00:12:14,456
it's just as important to
have an expressive interface


241
00:12:14,546 --> 00:12:16,296
that communicates
security to a user,


242
00:12:16,996 --> 00:12:19,406
and Safari View Controller
does the same exact job


243
00:12:19,696 --> 00:12:20,986
that Safari does in this regard.


244
00:12:21,496 --> 00:12:25,046
First and foremost secure pages.


245
00:12:25,846 --> 00:12:28,856
Safari View Controller
communicates the validity of SSL


246
00:12:29,346 --> 00:12:31,196
to your users just
like Safari does.


247
00:12:32,476 --> 00:12:34,876
But if the user is having
a bad day and they come


248
00:12:34,876 --> 00:12:35,966
across a phishing page,


249
00:12:36,736 --> 00:12:38,976
Safari View Controller will
also warn them about that


250
00:12:39,096 --> 00:12:40,466
and ask them to turn around,


251
00:12:41,016 --> 00:12:42,966
exactly the same way
that Safari would.


252
00:12:43,546 --> 00:12:49,556
So to recap, Safari View
Controller has all the great


253
00:12:49,556 --> 00:12:51,336
features of Safari itself.


254
00:12:51,636 --> 00:12:53,306
The features that your
users already love.


255
00:12:54,306 --> 00:12:57,576
Like the ability to fill their
passwords, have shared cookies,


256
00:12:58,186 --> 00:12:59,906
clean up articles
with Safari Reader


257
00:13:00,306 --> 00:13:02,686
and in iOS 9, Content Blocking.


258
00:13:03,996 --> 00:13:06,236
There are also a few
other minor things


259
00:13:06,966 --> 00:13:10,126
like correctly communicating
progress while progress is


260
00:13:10,126 --> 00:13:11,496
loading with a nice
progress bar.


261
00:13:12,626 --> 00:13:14,426
And showing informative
error pages


262
00:13:14,426 --> 00:13:16,336
when something goes
wrong during a load.


263
00:13:17,256 --> 00:13:20,076
Your miniature web browsers
may or may not be doing all


264
00:13:20,076 --> 00:13:23,746
of these things, but with Safari
View Controller it doesn't have


265
00:13:23,816 --> 00:13:27,906
to, because adopting it will
add years of Safari features


266
00:13:27,906 --> 00:13:30,646
and polish to your
apps and future years


267
00:13:30,646 --> 00:13:32,226
of polish in the future.


268
00:13:32,776 --> 00:13:36,996
I'm happy to say that adopting
Safari View Controller is


269
00:13:36,996 --> 00:13:37,656
really easy.


270
00:13:38,906 --> 00:13:43,166
Let's take a quick
walk through the API.


271
00:13:43,416 --> 00:13:46,136
In code, Safari View
Controller is known


272
00:13:46,526 --> 00:13:48,296
as SFSafariViewController.


273
00:13:48,866 --> 00:13:50,646
It's part of the Safari
Services Framework.


274
00:13:51,606 --> 00:13:53,736
And as you might have
guessed it's a subclass


275
00:13:53,736 --> 00:13:54,646
of UIViewController.


276
00:13:55,236 --> 00:13:59,166
It has a delegate which
I'll get to in a moment,


277
00:13:59,956 --> 00:14:02,096
and initializer which
takes a URL.


278
00:14:02,826 --> 00:14:05,256
This is the URL of the web
page that your user tapped on,


279
00:14:05,796 --> 00:14:06,906
the web page that
you want to show.


280
00:14:08,206 --> 00:14:10,086
Let's look at that
delegate real quick.


281
00:14:12,256 --> 00:14:15,506
The first method in the delegate
is how you can provide your own


282
00:14:15,506 --> 00:14:17,176
custom activities
to the share sheet


283
00:14:17,486 --> 00:14:18,796
when the user taps
on the share button.


284
00:14:19,376 --> 00:14:23,656
And the second delegate method
is called when the user taps


285
00:14:23,656 --> 00:14:25,396
on the done button, when
they're done browsing.


286
00:14:25,916 --> 00:14:27,656
You're going to want to
implement this in order


287
00:14:27,656 --> 00:14:28,926
to dismiss the View Controller.


288
00:14:29,416 --> 00:14:35,296
Taken all together it's
a pretty simple API.


289
00:14:35,296 --> 00:14:39,776
And to show you just how
powerful this simple API can be


290
00:14:40,206 --> 00:14:42,686
and how many lines of code it
will remove from your apps,


291
00:14:43,276 --> 00:14:45,336
I'm delighted to invite
my colleague Yongjun


292
00:14:45,336 --> 00:14:46,736
to the stage for a demo.


293
00:14:47,306 --> 00:14:47,626
Yongjun.


294
00:14:56,136 --> 00:14:58,256
>> YONGJUN ZHANG:
Thank you, Ricky.


295
00:14:58,416 --> 00:14:59,026
Hi, everyone.


296
00:14:59,086 --> 00:15:00,106
My name is Yongjun.


297
00:15:00,366 --> 00:15:02,196
I'm a Safari and
WebKit engineer.


298
00:15:02,806 --> 00:15:07,286
I don't know about
you, but I really want


299
00:15:07,286 --> 00:15:08,326
to have some pizza today.


300
00:15:09,506 --> 00:15:12,956
So I'm writing an app to
find pizza stores around me.


301
00:15:14,286 --> 00:15:15,086
Here it is.


302
00:15:15,976 --> 00:15:16,896
I call it pizza finder.


303
00:15:17,586 --> 00:15:18,966
I got a list of pizza stores.


304
00:15:20,026 --> 00:15:23,456
If I select the first store, I
got the phone number, address,


305
00:15:24,096 --> 00:15:26,696
I also get a link to the
website of the store.


306
00:15:28,086 --> 00:15:31,146
My task now is to make
my app show the website


307
00:15:31,706 --> 00:15:35,166
so I can know more
about a store.


308
00:15:35,366 --> 00:15:38,276
As Rick mentioned we
got three options.


309
00:15:39,146 --> 00:15:44,206
Option one, use openURL and let
Safari open the website for us.


310
00:15:45,406 --> 00:15:47,736
Option two, you establish
a web view


311
00:15:48,476 --> 00:15:51,156
and make our own browsing app.


312
00:15:51,156 --> 00:15:53,526
And option three, use
Safari View Controller.


313
00:15:54,396 --> 00:15:56,056
I am going to try
option one first.


314
00:15:57,376 --> 00:15:58,916
So I go to my Xcode project.


315
00:16:00,036 --> 00:16:04,996
And here in my store view
controller I got a function


316
00:16:04,996 --> 00:16:06,386
here, showStoreWebsite.


317
00:16:08,926 --> 00:16:13,036
I just need to drag one line
of code UIApplication, openURL.


318
00:16:13,586 --> 00:16:15,896
This will let Safari
open the URL.


319
00:16:16,806 --> 00:16:18,146
Let's test it.


320
00:16:19,516 --> 00:16:25,286
I run the app and select
the first store, left click.


321
00:16:26,326 --> 00:16:28,726
Now, Safari opens
the website for me


322
00:16:29,486 --> 00:16:31,826
and I can see this
page has a Reader.


323
00:16:33,306 --> 00:16:39,536
And if I try to order
pizza, I got my user name


324
00:16:39,536 --> 00:16:41,096
and password autofilled.


325
00:16:41,906 --> 00:16:43,686
So I must have been
to this site before


326
00:16:43,686 --> 00:16:47,106
and maybe I ordered
a pizza before.


327
00:16:47,666 --> 00:16:48,786
Now I'm in Safari.


328
00:16:49,956 --> 00:16:53,096
What I really want is my users
to always stay in my app.


329
00:16:53,096 --> 00:16:55,196
I don't want them to
switch to Safari just


330
00:16:55,196 --> 00:16:57,606
for visiting one
or two websites.


331
00:16:58,346 --> 00:16:59,886
Because they can get distracted


332
00:16:59,956 --> 00:17:02,266
and might not come
back to my app later.


333
00:17:03,286 --> 00:17:05,256
So I really need a
browser in my app.


334
00:17:05,866 --> 00:17:10,215
I'm going to try option 2
now to make my own browser.


335
00:17:11,705 --> 00:17:16,736
So first thing I want to do,
I want to go back to my app.


336
00:17:17,026 --> 00:17:21,726
So as we know, if we have
some web content in the app


337
00:17:21,726 --> 00:17:26,256
and if the web content happens
to be my UI or part of my UI,


338
00:17:27,556 --> 00:17:29,506
WKWebView is the best
tool for that job.


339
00:17:30,836 --> 00:17:34,366
In my case I wanted
to use WKWebView


340
00:17:34,366 --> 00:17:37,446
to load web pages
certainly, but I also want


341
00:17:37,446 --> 00:17:38,626
to have some UI around that.


342
00:17:38,726 --> 00:17:41,446
For example, I want
to have a URL bar


343
00:17:41,446 --> 00:17:43,226
on the top to show the URL.


344
00:17:43,226 --> 00:17:47,576
I also would like to have
a toolbar in the bottom


345
00:17:47,746 --> 00:17:49,196
to do back and forth navigation.


346
00:17:50,626 --> 00:17:53,616
WKWebView is a very rich
API, it provides a number


347
00:17:53,616 --> 00:17:55,596
of delegates I can use to listen


348
00:17:55,596 --> 00:17:57,646
to page load events
or navigation events.


349
00:17:58,276 --> 00:18:00,596
I can use this delegate
to drive my UI.


350
00:18:01,826 --> 00:18:04,436
So to save us some
time for this demo,


351
00:18:04,436 --> 00:18:06,036
I already have a single browser.


352
00:18:06,766 --> 00:18:07,376
Let's take a look.


353
00:18:07,516 --> 00:18:10,956
So in the Xcode project I
switched to another tab.


354
00:18:12,466 --> 00:18:17,026
I wrapped my simple browser
into one view controller.


355
00:18:17,816 --> 00:18:20,226
And in the middle
I got WKWebView.


356
00:18:21,086 --> 00:18:24,176
On the top I got
the navigation bar.


357
00:18:24,176 --> 00:18:26,796
I use the navigation bar's
title to show the URL.


358
00:18:26,796 --> 00:18:31,226
In the bottom I have a back
and forth button to do back


359
00:18:31,226 --> 00:18:32,136
and forward navigation.


360
00:18:33,246 --> 00:18:34,956
Now this is a simple class.


361
00:18:34,956 --> 00:18:36,746
It has about eighty
lines of code.


362
00:18:37,316 --> 00:18:38,636
It took me about one hour.


363
00:18:38,636 --> 00:18:40,506
I believe we can do better.


364
00:18:41,206 --> 00:18:43,226
But anyway, let's
test this browser.


365
00:18:44,296 --> 00:18:47,526
So I go back to my
store view controller,


366
00:18:48,306 --> 00:18:52,526
remove this line we just added
and drag a couple lines here.


367
00:18:53,906 --> 00:18:57,226
What I am doing now is I
load my view controller


368
00:18:57,226 --> 00:19:01,886
from the story board assigned
a URL to it and presented it.


369
00:19:02,936 --> 00:19:04,366
Now let's take a look.


370
00:19:06,836 --> 00:19:07,786
I run my app.


371
00:19:08,606 --> 00:19:11,526
Select the first store
and tap the link.


372
00:19:12,256 --> 00:19:13,426
This is my browser.


373
00:19:14,126 --> 00:19:16,806
It runs in my app.


374
00:19:17,066 --> 00:19:20,716
I don't have to switch to Safari
to visit this site anymore.


375
00:19:20,806 --> 00:19:21,296
That's good.


376
00:19:22,276 --> 00:19:24,026
The URL bar is actually
grayed out.


377
00:19:24,026 --> 00:19:25,656
So it won't be distracting.


378
00:19:26,866 --> 00:19:30,456
But also notice when I drag the
page I don't have the dynamics


379
00:19:30,496 --> 00:19:31,386
of Safari's UI.


380
00:19:32,796 --> 00:19:34,456
And this page doesn't
have a Reader.


381
00:19:34,456 --> 00:19:36,136
It will be harder
for me to read now.


382
00:19:37,216 --> 00:19:41,236
And if I try to order pizza,
I don't have my user name


383
00:19:41,236 --> 00:19:42,356
and password autofilled.


384
00:19:42,786 --> 00:19:45,056
So it will be harder for me
to order pizza now especially


385
00:19:45,316 --> 00:19:46,866
when I'm hungry, and impatient,


386
00:19:46,866 --> 00:19:47,806
and I don't have my
password [laughter].


387
00:19:49,616 --> 00:19:54,176
>> YONGJUN ZHANG: So, what
I really need is some simple


388
00:19:54,176 --> 00:19:59,076
and easy way to show
a website from my app.


389
00:19:59,846 --> 00:20:01,246
I don't want to spend my time


390
00:20:01,246 --> 00:20:03,886
to implement missing
features like progress bar.


391
00:20:04,356 --> 00:20:07,576
Even though I want to spend time
there are some features I will


392
00:20:07,576 --> 00:20:08,306
never get to.


393
00:20:08,306 --> 00:20:11,866
For example, Password Autofill.


394
00:20:12,906 --> 00:20:15,496
I would never get users'
passwords for this website.


395
00:20:16,836 --> 00:20:19,796
Luckily in iOS 9 we have
a Safari View Controller.


396
00:20:20,186 --> 00:20:21,406
Let's take a look.


397
00:20:23,256 --> 00:20:25,546
So to take Safari View
Controller into use,


398
00:20:26,236 --> 00:20:29,436
first thing I need to do is
import Safari Services Framework


399
00:20:30,626 --> 00:20:33,826
and then I need to make
my view controller conform


400
00:20:33,826 --> 00:20:35,576
to
SFSafariViewControllerDelegate


401
00:20:35,646 --> 00:20:36,046
protocol.


402
00:20:36,776 --> 00:20:41,456
In the code, let's go
back to showStoreWebsite.


403
00:20:42,456 --> 00:20:45,036
I don't need my browser
anymore, so I remove that.


404
00:20:46,306 --> 00:20:49,026
And just drag a couple
of lines here.


405
00:20:49,666 --> 00:20:53,506
What I'm doing now
is I instantiate my


406
00:20:53,786 --> 00:20:58,786
SafariViewControler object,
gives delegate and present it.


407
00:20:59,616 --> 00:21:02,056
Before we test it I also need


408
00:21:02,056 --> 00:21:05,386
to implement
safariViewControllerDidFinish,


409
00:21:05,826 --> 00:21:08,846
when the user taps
the done button,


410
00:21:09,376 --> 00:21:11,006
and we can dismiss
the view controller.


411
00:21:12,136 --> 00:21:16,236
Since we are here we don't
need our browser anymore,


412
00:21:16,436 --> 00:21:19,936
so we can delete the whole
thing, move to Trash, yes.


413
00:21:20,336 --> 00:21:23,726
Eighty lines of code
down and one hour saved.


414
00:21:24,536 --> 00:21:25,246
Let's run again.


415
00:21:26,036 --> 00:21:30,126
Select the first store.


416
00:21:31,536 --> 00:21:33,236
Look! I have Safari in my app.


417
00:21:34,936 --> 00:21:38,166
So I got Reader back.


418
00:21:38,776 --> 00:21:42,206
The same dynamics as
Safari, and if I try


419
00:21:42,206 --> 00:21:47,266
to order pizza now I have my
user name and password back.


420
00:21:48,406 --> 00:21:52,466
As you see, with a couple lines
of code I have Safari in my app.


421
00:21:53,396 --> 00:21:54,876
You can do that for
your app, too.


422
00:21:55,026 --> 00:21:56,606
And the user would be
really happy about it.


423
00:21:56,956 --> 00:21:57,526
Thank you.


424
00:21:58,516 --> 00:22:02,926
[ Applause ]


425
00:22:03,426 --> 00:22:07,176
>> YONGJUN ZHANG:
Back to you, Ricky.


426
00:22:09,556 --> 00:22:10,576
>> RICKY MONDELLO:
Thank you, Yongjun.


427
00:22:10,786 --> 00:22:11,586
That is awesome.


428
00:22:12,526 --> 00:22:16,366
So Yongjun just showed you
that although it's easy


429
00:22:16,366 --> 00:22:20,886
to write your in-app web browser
in WKWebView, it's kinda hard


430
00:22:20,886 --> 00:22:22,356
to get all of the details right.


431
00:22:23,236 --> 00:22:26,156
He also showed you by
changing about seven lines


432
00:22:26,156 --> 00:22:28,746
of code he was able to
replace the whole thing


433
00:22:29,306 --> 00:22:30,526
with Safari View Controller.


434
00:22:31,696 --> 00:22:34,156
You got to see how Safari
View Controller has features


435
00:22:34,156 --> 00:22:37,846
like Password Autofill and
Reader and little touches


436
00:22:37,846 --> 00:22:39,986
like the dynamics when you
scroll down on a web page.


437
00:22:43,956 --> 00:22:47,356
When we started a few moments
ago I divided the world


438
00:22:47,356 --> 00:22:48,946
of web content into two buckets.


439
00:22:49,896 --> 00:22:51,896
The kind of stuff that
is custom within your app


440
00:22:52,406 --> 00:22:54,196
that you're going to
use WKWebView for,


441
00:22:55,206 --> 00:22:58,616
or actual websites when a user
taps on a link in your app


442
00:22:59,016 --> 00:23:01,916
which you'll use Safari or
Safari View Controller for.


443
00:23:02,956 --> 00:23:03,896
But for a number of you


444
00:23:03,896 --> 00:23:07,116
in the audience there's actually
a third use case for web content


445
00:23:07,116 --> 00:23:09,306
that I would like to
talk about real quick.


446
00:23:10,696 --> 00:23:13,746
That's doing Web-based
authentication using


447
00:23:13,746 --> 00:23:14,386
web content.


448
00:23:15,486 --> 00:23:17,236
So you've all probably
seen this before.


449
00:23:17,816 --> 00:23:19,716
You're in an app
and the app wants


450
00:23:19,716 --> 00:23:22,706
to use some third-party
website's accounts.


451
00:23:23,346 --> 00:23:24,796
The app pulls up a web view.


452
00:23:24,946 --> 00:23:27,656
You type in your user
name and password.


453
00:23:28,426 --> 00:23:32,536
Log in. Then you accept
or deny the app's request


454
00:23:32,536 --> 00:23:35,106
for the resource from
the third-party service.


455
00:23:35,966 --> 00:23:37,376
You've all probably
done this before.


456
00:23:37,876 --> 00:23:40,126
But one flow that
does this is OAuth.


457
00:23:40,126 --> 00:23:43,566
I would like to walk through
at a high level exactly how


458
00:23:43,566 --> 00:23:44,136
that works.


459
00:23:44,686 --> 00:23:51,156
So in this flow there are
three different actors.


460
00:23:51,736 --> 00:23:54,546
The first actor is an app.


461
00:23:55,366 --> 00:23:57,006
Let's say that it's your app.


462
00:23:57,596 --> 00:23:59,166
The second actor is a user.


463
00:23:59,896 --> 00:24:01,126
Let's say it's one
of your users.


464
00:24:02,536 --> 00:24:05,096
And of course, there is
the third-party web service


465
00:24:05,266 --> 00:24:07,726
that your app would like
to authenticate against.


466
00:24:08,376 --> 00:24:11,656
So what will happen is in this
flow while the user is using the


467
00:24:11,836 --> 00:24:13,806
app, presumably they'll tap


468
00:24:13,806 --> 00:24:15,526
on a button somewhere
that says log in.


469
00:24:16,156 --> 00:24:17,846
The app is going
to package the user


470
00:24:17,846 --> 00:24:20,236
up with a token representing
what it wants


471
00:24:20,236 --> 00:24:21,626
to request from the website.


472
00:24:22,156 --> 00:24:26,486
And then, the app is
going to present, somehow,


473
00:24:26,546 --> 00:24:28,766
a web page to log in against.


474
00:24:29,346 --> 00:24:31,386
And the user will enter
their credentials,


475
00:24:32,696 --> 00:24:34,816
log in and accept
or deny the request.


476
00:24:35,536 --> 00:24:38,316
And then be sent
back over to the app.


477
00:24:38,316 --> 00:24:40,986
At that point the website is
going to remember that token


478
00:24:41,276 --> 00:24:43,996
and know whether it was
approved or denied for use.


479
00:24:44,126 --> 00:24:46,046
And when the app
wants to connect


480
00:24:46,046 --> 00:24:47,196
to that third-party service


481
00:24:47,196 --> 00:24:49,936
in the future it will
do it using that token.


482
00:24:50,496 --> 00:24:55,586
The major goal of a
scheme like this is


483
00:24:55,586 --> 00:24:57,346
to protect a user's credentials


484
00:24:57,986 --> 00:24:59,696
so that an app doesn't
have to remember them.


485
00:25:00,236 --> 00:25:01,676
Instead the app gets a token.


486
00:25:02,686 --> 00:25:05,926
That token can be used at a
later date to request resources


487
00:25:06,546 --> 00:25:09,296
or the user could revoke
the token without having


488
00:25:09,296 --> 00:25:10,316
to change their password.


489
00:25:10,826 --> 00:25:11,916
This is great for users.


490
00:25:13,086 --> 00:25:14,836
If you are implementing
this today,


491
00:25:14,906 --> 00:25:19,306
you are probably using
UIWebView or WKWebView to do it.


492
00:25:19,516 --> 00:25:20,586
But I'm happy to tell you


493
00:25:20,986 --> 00:25:24,396
that Safari View Controller
is great for this purpose.


494
00:25:24,536 --> 00:25:26,386
It's awesome for
web-based authentication.


495
00:25:26,386 --> 00:25:30,066
One of the reasons it is awesome


496
00:25:30,066 --> 00:25:32,686
for web-based authentication
is the security story.


497
00:25:33,456 --> 00:25:35,696
It's just as secure
as Safari itself.


498
00:25:36,576 --> 00:25:39,496
Because it runs out of process,
and Apple will never get


499
00:25:39,496 --> 00:25:41,056
to see a user's user name


500
00:25:41,326 --> 00:25:43,046
and password while
they're logging in.


501
00:25:43,046 --> 00:25:45,996
And when it comes to
protecting a user's data,


502
00:25:46,646 --> 00:25:50,026
one of the best ways to do
that is never to have access


503
00:25:50,026 --> 00:25:51,016
to it in the first place.


504
00:25:51,786 --> 00:25:53,556
That's our approach
whenever possible at Apple.


505
00:25:54,086 --> 00:25:57,056
But it is also an
awesome user story.


506
00:25:58,026 --> 00:26:00,816
Because since Safari View
Controller has access


507
00:26:00,816 --> 00:26:04,436
to a user's credentials, synced
across all of their devices


508
00:26:04,436 --> 00:26:07,286
with iCloud Keychain, logging
in is going to be a breeze.


509
00:26:07,746 --> 00:26:09,916
They may not need
to use Autofill.


510
00:26:10,316 --> 00:26:11,396
They might already be logged


511
00:26:11,396 --> 00:26:12,986
into that third-party
web service.


512
00:26:15,616 --> 00:26:19,466
Simply put, users will be much
more likely to authenticate


513
00:26:19,466 --> 00:26:21,086
against that third-party
web service,


514
00:26:21,176 --> 00:26:24,186
if you are using Safari View
Controller compared to something


515
00:26:24,186 --> 00:26:24,966
that you rolled yourself.


516
00:26:26,176 --> 00:26:28,836
And I'm happy to say this
is also super easy to adopt.


517
00:26:29,356 --> 00:26:30,446
It takes two steps.


518
00:26:32,916 --> 00:26:37,196
The first is where you would've
used your own in-app browser,


519
00:26:37,766 --> 00:26:40,656
just present an instance
of SFSafariViewController.


520
00:26:41,746 --> 00:26:43,516
And once the user is
finished logging in


521
00:26:44,066 --> 00:26:48,046
and the third-party web service
redirects back to your app


522
00:26:48,386 --> 00:26:51,926
with the custom URL scheme
that you fed it, you can accept


523
00:26:51,976 --> 00:26:54,776
that in your AppDelegate's
handleOpenURL method.


524
00:26:55,556 --> 00:26:57,526
From there you can
inspect the response


525
00:26:58,146 --> 00:27:01,036
and dismiss the instance
of SFSafariViewController


526
00:27:01,416 --> 00:27:03,226
because you know that the
authentication is done.


527
00:27:04,426 --> 00:27:05,116
That's it.


528
00:27:05,556 --> 00:27:06,206
Two steps.


529
00:27:06,916 --> 00:27:10,206
And you've replaced your in-app
browser with one that has all


530
00:27:10,206 --> 00:27:11,396
of the user's user names


531
00:27:11,396 --> 00:27:13,436
and passwords available
for Autofill.


532
00:27:14,016 --> 00:27:16,116
Users are going to be delighted
by this and you are going


533
00:27:16,116 --> 00:27:18,836
to have more users log into
that third-party web service.


534
00:27:19,336 --> 00:27:26,746
Okay, let's cover everything
we talked about today.


535
00:27:26,936 --> 00:27:29,876
Web content is everywhere
and it comes


536
00:27:29,876 --> 00:27:31,656
in all sorts of shapes
and sizes.


537
00:27:33,096 --> 00:27:36,206
But if you are using it within
your app in a custom way


538
00:27:36,236 --> 00:27:40,636
where you own the experience
or you're customizing it,


539
00:27:40,636 --> 00:27:42,746
WKWebView is the right
tool for the job.


540
00:27:44,096 --> 00:27:46,546
You might still be using
the older UIWebView,


541
00:27:47,216 --> 00:27:48,986
but WKWebView is modern


542
00:27:49,396 --> 00:27:51,636
and includes the
modern JavaScript engine


543
00:27:51,826 --> 00:27:54,686
that Safari itself
uses, it's much faster.


544
00:27:55,496 --> 00:27:59,096
And now in iOS 9
and OS X El Capitan,


545
00:27:59,816 --> 00:28:01,546
it has much more
flexibility for you.


546
00:28:03,196 --> 00:28:05,866
If you'd like to learn more
about adopting WKWebView,


547
00:28:06,136 --> 00:28:07,376
you can see last year's session,


548
00:28:08,346 --> 00:28:09,866
Introducing the Modern
WebKit API.


549
00:28:10,526 --> 00:28:14,776
But if your task with
web content is different,


550
00:28:15,876 --> 00:28:19,696
if your task is to show a
website when a user taps


551
00:28:19,696 --> 00:28:23,596
on a link, your use case and
needs are completely different.


552
00:28:24,856 --> 00:28:27,876
In the past, you may have built
your own in-app web browser


553
00:28:27,876 --> 00:28:31,866
with UIWebView or WKWebView,
but that's always had downsides,


554
00:28:32,856 --> 00:28:34,416
it didn't have any
of the features


555
00:28:34,716 --> 00:28:36,096
or state that Safari has.


556
00:28:36,976 --> 00:28:38,926
And more likely than
not through no fault


557
00:28:38,926 --> 00:28:41,896
of your own your app's
implementation was different


558
00:28:41,896 --> 00:28:44,266
than that of other apps
that the user has installed,


559
00:28:44,896 --> 00:28:46,946
which leads to a confusing
experience sometimes.


560
00:28:47,546 --> 00:28:50,086
Your first option forgetting


561
00:28:50,086 --> 00:28:53,466
out of the scenario is
delegating the responsibility


562
00:28:53,466 --> 00:28:56,056
of showing web content
to Safari itself.


563
00:28:56,666 --> 00:28:58,316
And the system wide
ability to go back


564
00:28:58,436 --> 00:29:00,566
to the last app makes
this much better


565
00:29:00,566 --> 00:29:01,606
than it has ever been before.


566
00:29:02,116 --> 00:29:05,236
But if you would like to
maintain your current user


567
00:29:05,236 --> 00:29:08,916
experience where users
never leave your app,


568
00:29:08,916 --> 00:29:12,836
Safari View Controller will add
years of features and polish


569
00:29:13,276 --> 00:29:15,176
and features and
polish in the future.


570
00:29:16,206 --> 00:29:19,476
For you, it'll mean having
more time to work on the parts


571
00:29:19,476 --> 00:29:21,426
of your app that are
special about your app,


572
00:29:21,916 --> 00:29:23,256
the parts that you
want to work on.


573
00:29:23,286 --> 00:29:26,716
For your users, it will
mean having new features


574
00:29:27,296 --> 00:29:31,276
like Safari Autofill, Safari
Reader and Content Blocking.


575
00:29:31,836 --> 00:29:37,356
And while I still have your
attention I have a quick favor


576
00:29:37,356 --> 00:29:39,296
to ask of you.


577
00:29:39,506 --> 00:29:42,926
Please keep filing bugs
and feature requests,


578
00:29:43,336 --> 00:29:47,656
when there is a gap between what
is and what you think should be


579
00:29:48,096 --> 00:29:49,756
on the platforms that
you are developing on.


580
00:29:50,726 --> 00:29:54,046
One of the reasons that Safari
View Controller exists is


581
00:29:54,046 --> 00:29:56,326
because so many of you
told us that you wanted it.


582
00:29:57,406 --> 00:29:59,686
And now that it does
exist as you're trying it


583
00:29:59,686 --> 00:30:00,946
out over the next few months,


584
00:30:01,396 --> 00:30:04,976
please let us know how we can
make it more useful to you.


585
00:30:05,056 --> 00:30:08,866
We really do appreciate
your feedback.


586
00:30:09,866 --> 00:30:11,206
Okay. You can get
more information


587
00:30:11,206 --> 00:30:13,866
about anything we covered
today at the usual places.


588
00:30:14,436 --> 00:30:16,746
Or you can hit up
John Davis, the Safari


589
00:30:16,746 --> 00:30:17,796
and WebKit Evangelist.


590
00:30:18,156 --> 00:30:21,856
And we have some
related sessions


591
00:30:21,856 --> 00:30:22,906
that you might be interested in.


592
00:30:24,106 --> 00:30:27,106
To call out two in
particular, in Seamless Linking


593
00:30:27,106 --> 00:30:30,386
to Your App you'll learn about
Apple's solution to the problem


594
00:30:30,606 --> 00:30:31,676
of inner app linking


595
00:30:32,296 --> 00:30:34,556
which involves taking
your website's URLs


596
00:30:35,186 --> 00:30:37,906
and making them universal,
allowing them to open your app


597
00:30:38,566 --> 00:30:40,016
on your users' iOS devices.


598
00:30:40,646 --> 00:30:41,286
It's really cool.


599
00:30:42,206 --> 00:30:44,796
In Safari Extensibility,
you'll learn to write one


600
00:30:44,796 --> 00:30:46,816
of those content blockers
that I mentioned earlier,


601
00:30:47,296 --> 00:30:50,216
that will apply to all pages
that are loaded in either Safari


602
00:30:51,026 --> 00:30:52,466
or in Safari View Controller.


603
00:30:52,966 --> 00:30:57,266
If you want help with anything
I covered today, the Safari


604
00:30:57,266 --> 00:30:58,936
and WebKit Labs are
the right place to go.


605
00:30:58,936 --> 00:31:00,616
And the first one is happening


606
00:31:00,616 --> 00:31:03,136
in about a half an
hour in Media Lab A.


607
00:31:04,536 --> 00:31:06,376
Alright, thank you
so much everybody.


608
00:31:06,566 --> 00:31:08,336
I hope you have a
fantastic WWDC.


609
00:31:10,516 --> 00:31:23,690
[ Applause ]

