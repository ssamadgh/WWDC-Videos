1
00:00:26,596 --> 00:00:26,716
>> VIPUL PRAKASH: Hello.


2
00:00:26,716 --> 00:00:30,166
Welcome to session 709.


3
00:00:30,936 --> 00:00:33,826
I'm Vipul Prakash
and I'll be joined


4
00:00:33,826 --> 00:00:36,286
by my colleagues Dave
Salim and Jason Douglas.


5
00:00:36,786 --> 00:00:41,846
We'll give you an in-depth tour
of the new Search APIs in iOS 9.


6
00:00:42,396 --> 00:00:46,846
As you saw in the Keynote, deep
links, the content in your apps,


7
00:00:46,846 --> 00:00:50,036
they can now appear as tightly
integrated search results


8
00:00:50,106 --> 00:00:50,746
in Spotlight.


9
00:00:51,316 --> 00:00:52,766
This is tremendously exciting.


10
00:00:53,726 --> 00:00:56,376
On iOS users spent most of
their time inside of apps,


11
00:00:56,516 --> 00:00:58,956
this is where all the great
content is, this is really


12
00:00:58,956 --> 00:01:01,366
where people live their
digital lives these days.


13
00:01:01,816 --> 00:01:04,766
We have been interested
in connecting all


14
00:01:04,766 --> 00:01:06,436
of this great content
through Search.


15
00:01:06,816 --> 00:01:11,936
We didn't want to create an ad
hoc one-size-fits-all course


16
00:01:11,936 --> 00:01:14,656
of indexing scheme going
inside of your apps


17
00:01:14,656 --> 00:01:17,136
to grab whatever it can
and stuffs it in Spotlight.


18
00:01:17,636 --> 00:01:20,156
That's an approach to indexing
that worked well for the web


19
00:01:20,646 --> 00:01:24,316
because it is uniform but
it is the wrong approach


20
00:01:24,586 --> 00:01:25,546
for app search.


21
00:01:26,596 --> 00:01:30,006
What we wanted to do was
create an experience where you


22
00:01:30,006 --> 00:01:33,106
as developers choose
exactly what is in the index,


23
00:01:33,556 --> 00:01:37,306
how results appear in search
and where the user goes


24
00:01:37,306 --> 00:01:39,086
to when they tap on the results.


25
00:01:39,946 --> 00:01:41,506
I think we have been
able to achieve this


26
00:01:41,616 --> 00:01:44,896
with search APIs keeping
them simple and lightweight.


27
00:01:46,216 --> 00:01:51,286
The goal of search APIs
is to bring the content


28
00:01:51,346 --> 00:01:55,926
in your apps more deeply
in a search context.


29
00:01:56,756 --> 00:01:59,316
In addition to results appearing


30
00:01:59,316 --> 00:02:02,156
in Spotlight they
also appear in Safari.


31
00:02:03,916 --> 00:02:08,485
This works in a way similar to
how Spotlight suggestions work


32
00:02:08,485 --> 00:02:10,606
which are produced in iOS 8.


33
00:02:11,466 --> 00:02:14,676
As the user types a query
into the Safari address bar,


34
00:02:14,676 --> 00:02:17,946
you have the results from the
Internet like Maps, Wikipedia,


35
00:02:17,946 --> 00:02:22,046
App Store and the user can tap
on the results to jump directly


36
00:02:22,046 --> 00:02:23,366
to the content they're
looking for.


37
00:02:23,956 --> 00:02:27,176
In iOS 9 users will be
able to jump directly


38
00:02:27,576 --> 00:02:30,326
to content inside of your apps.


39
00:02:31,596 --> 00:02:36,306
This is another vector
of distribution


40
00:02:36,306 --> 00:02:38,166
and exposure we provide.


41
00:02:38,776 --> 00:02:42,866
Public deep links inside of
your app, will now appear


42
00:02:43,096 --> 00:02:46,186
in search results for users that
don't have your app installed.


43
00:02:46,666 --> 00:02:49,056
This is super exciting.


44
00:02:49,706 --> 00:02:54,776
This provides a whole
new level of exposure


45
00:02:54,776 --> 00:02:57,506
for your app potentially
to hundreds


46
00:02:57,506 --> 00:02:59,586
of millions of iOS users.


47
00:03:00,516 --> 00:03:06,386
[Applause]


48
00:03:06,886 --> 00:03:08,146
>> VIPUL PRAKASH: Let's
look at how this works.


49
00:03:08,146 --> 00:03:09,736
Let's look at examples.


50
00:03:11,316 --> 00:03:15,106
We invited the folks from
Airbnb to look at the APIs


51
00:03:15,106 --> 00:03:18,606
and they were able to do an
integration within a few hours.


52
00:03:19,206 --> 00:03:22,906
What they did, they took
reservations that users make


53
00:03:23,276 --> 00:03:25,806
and the communications that
they have on the platform


54
00:03:26,036 --> 00:03:28,026
and index them to
the search APIs.


55
00:03:28,826 --> 00:03:32,786
Now when I look for the
reservation I made in Napa,


56
00:03:32,786 --> 00:03:36,316
I put that in Spotlight,
the reservation comes


57
00:03:36,316 --> 00:03:37,426
up as the first result.


58
00:03:38,266 --> 00:03:40,976
It has the dates --
it is really cool.


59
00:03:41,146 --> 00:03:43,146
[Applause]


60
00:03:43,276 --> 00:03:45,496
>> VIPUL PRAKASH: It has
the dates, number of guests,


61
00:03:45,566 --> 00:03:49,316
descriptions, and when I
tap on it it takes me inside


62
00:03:49,316 --> 00:03:51,516
of the rich experience
in the app.


63
00:03:52,776 --> 00:03:56,326
Another result that you will see
here, this is result number 2,


64
00:03:56,326 --> 00:04:01,036
which is a message from the
host of the reservation.


65
00:04:01,386 --> 00:04:06,736
As you can see, I can read
the message, it is very useful


66
00:04:06,736 --> 00:04:09,026
and there is also a
call glyph on the right,


67
00:04:09,846 --> 00:04:13,796
when they indexed this,
they are added data


68
00:04:13,796 --> 00:04:16,995
to include the phone
number of the host


69
00:04:17,466 --> 00:04:20,446
and Spotlight picked this
up, rendered a call glyph


70
00:04:20,636 --> 00:04:23,136
and when it happens, it
does what you expect.


71
00:04:23,716 --> 00:04:25,446
It makes the call.


72
00:04:26,026 --> 00:04:31,116
So this is a really beautifully
integrated integration


73
00:04:31,396 --> 00:04:33,346
to achieve search APIs.


74
00:04:33,346 --> 00:04:34,606
Let's look at other examples.


75
00:04:36,166 --> 00:04:38,636
Here is LinkedIn, a
professional networking app.


76
00:04:39,116 --> 00:04:41,006
What's happening
in this example,


77
00:04:41,636 --> 00:04:44,426
my first degree network,
all of the communications


78
00:04:44,426 --> 00:04:47,546
that I have had on LinkedIn have
been added to the search index.


79
00:04:47,886 --> 00:04:52,286
Now they're available in the
same way as built-in Contacts


80
00:04:52,486 --> 00:04:54,046
and built-in messages
that are available.


81
00:04:57,996 --> 00:05:00,896
Now search APIs, are not
limited to just content.


82
00:05:01,456 --> 00:05:06,136
One really handy use case
is to make navigation points


83
00:05:06,356 --> 00:05:08,846
and features inside
of apps searchable.


84
00:05:09,416 --> 00:05:13,526
As an example, our very
own Health app does this.


85
00:05:14,286 --> 00:05:17,746
It indexes all the deep
links of all the sessions.


86
00:05:17,746 --> 00:05:21,546
If I want to see how many steps
I have taken, I type steps


87
00:05:21,546 --> 00:05:24,306
in Spotlight, get this
deep link, tap on it,


88
00:05:24,406 --> 00:05:25,686
go straight to the steps screen.


89
00:05:27,516 --> 00:05:31,306
[Applause]


90
00:05:31,806 --> 00:05:32,796
>> VIPUL PRAKASH: I
think this is very cool.


91
00:05:32,796 --> 00:05:37,536
One of the most popular
users of Spotlight Search is


92
00:05:37,616 --> 00:05:39,016
to find and launch apps.


93
00:05:39,446 --> 00:05:43,226
We believe in iOS
9 going straight


94
00:05:43,276 --> 00:05:46,346
to deep navigation points
inside of apps is going


95
00:05:46,346 --> 00:05:49,826
to be another very
popular use case.


96
00:05:50,076 --> 00:05:54,556
In all these examples
the results came


97
00:05:54,556 --> 00:05:57,686
from your own device index,
the deep links were put


98
00:05:57,686 --> 00:05:59,886
in the device index and
they never crossed the


99
00:05:59,886 --> 00:06:00,616
device boundary.


100
00:06:01,156 --> 00:06:03,866
What if the user does not
have your app installed?


101
00:06:04,436 --> 00:06:09,006
We maintain a massive
index of deep links


102
00:06:09,506 --> 00:06:10,796
in Apple's cloud servers.


103
00:06:11,266 --> 00:06:15,586
We can serve results
seamlessly from this index.


104
00:06:15,586 --> 00:06:22,286
We have come up with a novel
way of populating this index.


105
00:06:23,636 --> 00:06:28,986
Developers, you can tag content
which is public as public


106
00:06:29,516 --> 00:06:33,266
and once enough users engage
with it, it is then promoted


107
00:06:33,466 --> 00:06:37,346
to the cloud index where now
it is available to all users


108
00:06:37,346 --> 00:06:40,286
of your app and if there
are web links associated


109
00:06:40,646 --> 00:06:46,506
with the deep links then it is
available to all users of iOS.


110
00:06:46,696 --> 00:06:53,746
Now indexing and crawling apps
is nonsensical in some ways


111
00:06:53,746 --> 00:06:56,076
but on the web, it is not.


112
00:06:56,076 --> 00:06:59,136
If your app mirrors its content


113
00:06:59,296 --> 00:07:03,276
on a website what
we can do is go out


114
00:07:03,276 --> 00:07:07,036
and proactively go index your
website, find the deep links


115
00:07:07,406 --> 00:07:09,006
and bring them in a cloud index


116
00:07:09,066 --> 00:07:11,416
when they're seamlessly
available in search.


117
00:07:11,746 --> 00:07:19,486
This logic of seamlessness of on
device search and cloud search,


118
00:07:19,486 --> 00:07:21,906
it is very important to
the App Search story.


119
00:07:22,506 --> 00:07:25,236
There is a lot of content
in apps that's private


120
00:07:25,896 --> 00:07:29,236
and then content that's public,
it is not both at the same time.


121
00:07:29,706 --> 00:07:33,446
What we can do with this
approach is present a seamless


122
00:07:33,636 --> 00:07:36,996
search interface to the user
where the results are coming


123
00:07:36,996 --> 00:07:38,796
from the device index
or the cloud index.


124
00:07:39,266 --> 00:07:42,466
Let's look at examples of this.


125
00:07:42,606 --> 00:07:46,676
I searched for "northern lights"
a music festival, I'm presented


126
00:07:46,676 --> 00:07:49,156
with a result from the cloud
index from the EventBrite app,


127
00:07:50,186 --> 00:07:52,996
I don't have this app installed,
this result has a web link.


128
00:07:53,326 --> 00:07:59,796
I tap on it, it takes me to
Safari and opens the space.


129
00:07:59,886 --> 00:08:03,446
You notice that EventBrite
users, the smart app banner


130
00:08:04,256 --> 00:08:06,896
which encourages me
to download the app


131
00:08:07,326 --> 00:08:09,846
and experience this
content in a richer way,


132
00:08:10,526 --> 00:08:11,666
which is what I do now.


133
00:08:12,636 --> 00:08:16,376
Imagine if this was your
app, wouldn't it be awesome


134
00:08:16,746 --> 00:08:19,886
to get your content in
front of all iOS users


135
00:08:19,886 --> 00:08:23,246
in this very contextual way when
they're looking for something


136
00:08:23,466 --> 00:08:26,086
that your app provides
to promote app discovery?


137
00:08:26,186 --> 00:08:31,476
Here is an example where I
searched for "sprained ankle".


138
00:08:31,976 --> 00:08:36,515
I don't have an app for
medical conditions on my device.


139
00:08:36,515 --> 00:08:42,416
I'm offered multiple results
by App Search based on the apps


140
00:08:42,466 --> 00:08:45,226
that users have previously
found interesting


141
00:08:45,276 --> 00:08:46,986
or useful for this quarry.


142
00:08:47,856 --> 00:08:51,356
I can tap on this,
install the app


143
00:08:51,726 --> 00:08:57,296
and continue my exploration
inside of the app.


144
00:08:57,516 --> 00:08:59,726
So how does this work?


145
00:09:01,166 --> 00:09:06,456
App Search has three APIs
that are distinct but related.


146
00:09:06,846 --> 00:09:10,856
They're designed for
enabling different use cases


147
00:09:10,996 --> 00:09:11,716
of App Search.


148
00:09:12,786 --> 00:09:14,816
The first one is NSUserActivity.


149
00:09:14,816 --> 00:09:17,276
This is an extension
of the Handoff API


150
00:09:17,886 --> 00:09:19,126
that we released in iOS 8.


151
00:09:20,336 --> 00:09:23,726
When we looked at the
pattern of information access


152
00:09:23,856 --> 00:09:27,796
and search one of the things
we found is that users want


153
00:09:27,796 --> 00:09:31,286
to certainly for things
they have seen in the past.


154
00:09:31,286 --> 00:09:34,626
NSUserActivity makes
searching this information


155
00:09:34,626 --> 00:09:36,296
and indexing it very easy.


156
00:09:36,566 --> 00:09:41,246
It sort of works like how a web
browser maintains your browsing


157
00:09:41,246 --> 00:09:44,296
history and the user
activity maintains the form


158
00:09:44,296 --> 00:09:46,266
of app history and
makes it searchable.


159
00:09:46,836 --> 00:09:50,866
The second API is
called CoreSpotlight.


160
00:09:50,866 --> 00:09:53,716
This is a very powerful way


161
00:09:53,716 --> 00:09:58,756
of comprehensively indexing
any content inside of your app.


162
00:09:58,756 --> 00:10:02,846
All built in apps in iOS
9, Mail, Notes, Calendar,


163
00:10:02,846 --> 00:10:04,416
they use this CoreSpotlight.


164
00:10:04,676 --> 00:10:11,966
It gives you low level access
to the index on the device,


165
00:10:11,966 --> 00:10:14,806
it sort of works like a
database API you can add


166
00:10:14,806 --> 00:10:20,196
and remove items,
and it's the best way


167
00:10:20,476 --> 00:10:23,736
to index any private
content that you have inside


168
00:10:23,736 --> 00:10:24,656
of your app for the user.


169
00:10:25,746 --> 00:10:28,976
Third API is web markup.


170
00:10:29,976 --> 00:10:33,126
This is for apps that mirror
their content on a website.


171
00:10:33,796 --> 00:10:37,746
You can simply markup your
web content with deep links,


172
00:10:37,816 --> 00:10:40,526
annotation information,
we go out, crawl it,


173
00:10:41,046 --> 00:10:45,246
put it in the cloud index and
it is then seamlessly available


174
00:10:45,296 --> 00:10:47,196
to users through iOS 9 search.


175
00:10:47,746 --> 00:10:53,026
Here is the Agenda for
the rest of the session.


176
00:10:54,056 --> 00:10:57,196
We'll do a deep dive
into each of these APIs,


177
00:10:57,916 --> 00:11:02,166
show you how they work,
and we'll look at how best


178
00:11:02,166 --> 00:11:04,986
to adopt these APIs
in your apps.


179
00:11:07,496 --> 00:11:10,496
We'll talk about NSUserActivity
and CoreSpotlight,


180
00:11:10,496 --> 00:11:11,506
I would like to ask Dave Salim.


181
00:11:12,516 --> 00:11:20,616
[Applause]


182
00:11:21,116 --> 00:11:25,346
>> DAVE SALIM: I'm Dave Salim,
a developer on App Search.


183
00:11:26,686 --> 00:11:29,116
We just heard about some
exciting new features


184
00:11:29,686 --> 00:11:32,096
to make the content in
your apps searchable


185
00:11:32,386 --> 00:11:33,256
and more discoverable.


186
00:11:34,196 --> 00:11:37,226
Now we'll take a look at some
of the APIs you can adopt


187
00:11:37,226 --> 00:11:38,116
to enable these features.


188
00:11:38,686 --> 00:11:43,576
We'll start off by taking
a look at NSUserActivity.


189
00:11:45,096 --> 00:11:48,306
A little background,
NSUserActivity was introduced


190
00:11:48,306 --> 00:11:50,686
in iOS 8 to support Handoff.


191
00:11:51,616 --> 00:11:53,806
Handoff is the amazing
feature that allows you


192
00:11:53,806 --> 00:11:56,546
to start an activity on one
device and pick up right


193
00:11:56,546 --> 00:11:57,936
where you left off on another.


194
00:11:59,246 --> 00:12:03,306
NSUserActivity is a lightweight
way to capture application state


195
00:12:03,486 --> 00:12:04,606
which can be restored later.


196
00:12:06,766 --> 00:12:11,916
Now new in iOS 9 is we're adding
the ability for NSUserActivities


197
00:12:12,036 --> 00:12:16,346
to be indexed and searchable
from iOS search and Safari.


198
00:12:16,976 --> 00:12:20,246
You will now be able
to associate metadata


199
00:12:20,246 --> 00:12:22,966
with your activities so you
can describe your activities.


200
00:12:23,396 --> 00:12:25,756
And that information
can be used to index


201
00:12:25,756 --> 00:12:27,676
and provide rich search results.


202
00:12:28,826 --> 00:12:30,626
When users engage with
your search results,


203
00:12:31,106 --> 00:12:32,106
your app will be launched


204
00:12:32,266 --> 00:12:34,666
and passed the activity
with that result.


205
00:12:35,326 --> 00:12:38,426
You can continue restoring the
state bringing the user right


206
00:12:38,426 --> 00:12:39,256
back to its content.


207
00:12:40,676 --> 00:12:42,566
Let's take a look at an example


208
00:12:42,836 --> 00:12:46,996
of how NSUserActivities
are added to the index.


209
00:12:47,036 --> 00:12:50,976
Here we have a recipe app and
as a user browses a recipe


210
00:12:50,976 --> 00:12:53,986
in this app, we create an
NSUserActivity capturing its


211
00:12:53,986 --> 00:12:56,656
state, providing it
the information needed


212
00:12:56,656 --> 00:12:57,786
to get back to this recipe.


213
00:12:58,336 --> 00:13:01,746
We then describe that
activity with information


214
00:13:01,746 --> 00:13:05,546
from the recipe, the title,
description, even a thumbnail.


215
00:13:07,066 --> 00:13:08,396
Then we inform the system


216
00:13:08,676 --> 00:13:11,316
that this activity represents
the user's current state


217
00:13:11,846 --> 00:13:14,076
and that activity is added
to the on-device index.


218
00:13:15,716 --> 00:13:19,246
So as a user moves about the
app we follow the same pattern


219
00:13:19,586 --> 00:13:22,076
of creating activities,
describing them,


220
00:13:22,156 --> 00:13:23,446
and informing the system


221
00:13:23,706 --> 00:13:25,596
that these represent
the users current state


222
00:13:26,036 --> 00:13:28,426
and these activities will be
added to the on-device index.


223
00:13:28,986 --> 00:13:34,156
Let's take a look at some of
the new and existing properties


224
00:13:34,156 --> 00:13:37,376
on NSUserActivity used
to support App Search.


225
00:13:38,846 --> 00:13:40,656
First, there is now properties


226
00:13:41,116 --> 00:13:44,276
to designate an activity's
capabilities, there is one


227
00:13:44,276 --> 00:13:48,206
for Handoff, by default Handoff
is enabled, if you choose not


228
00:13:48,206 --> 00:13:49,786
to enable Handoff
for your users,


229
00:13:49,786 --> 00:13:51,126
you can easily set
this to false.


230
00:13:51,196 --> 00:13:52,986
There is one for search


231
00:13:53,346 --> 00:13:56,086
which allows on-device
indexing of the activity.


232
00:13:57,176 --> 00:13:58,596
There is one for Public Indexing


233
00:13:58,666 --> 00:14:02,076
which we'll talk
about in a minute.


234
00:14:02,226 --> 00:14:04,156
Next, how do you
describe your activity?


235
00:14:04,566 --> 00:14:06,536
First you give your
activity a title.


236
00:14:07,436 --> 00:14:10,246
This title is used both for
indexing and for display


237
00:14:10,246 --> 00:14:11,156
in the search results.


238
00:14:12,226 --> 00:14:14,616
You can also provide keywords
to describe your activity,


239
00:14:14,786 --> 00:14:15,896
these will also be indexed.


240
00:14:16,516 --> 00:14:19,776
To fully more describe your
activity you can use a new class


241
00:14:19,776 --> 00:14:20,406
we're introducing


242
00:14:20,406 --> 00:14:23,536
in CoreSpotlight named
CSSearchableItem.attributeSet


243
00:14:23,646 --> 00:14:25,426
which makes it easy to
describe the activity


244
00:14:25,596 --> 00:14:27,596
by setting properties
and you can set this


245
00:14:27,596 --> 00:14:30,436
on the contentAttributes
property of NSUserActivity.


246
00:14:31,526 --> 00:14:34,676
If you prefer for your
activity to only be shown


247
00:14:34,676 --> 00:14:40,206
until a certain date, you can
provide an expiration date.


248
00:14:40,406 --> 00:14:43,976
Also if your activity's content
can be restored on the web


249
00:14:44,836 --> 00:14:47,056
or you support Safari's
universal links,


250
00:14:47,606 --> 00:14:49,186
set the webpage URL property


251
00:14:49,566 --> 00:14:51,206
and the system will
appropriately launch your


252
00:14:51,206 --> 00:14:54,346
activity in Safari
or in your app.


253
00:14:57,216 --> 00:14:59,506
Now let's take a look at
how we create an activity.


254
00:15:00,046 --> 00:15:05,076
Here we're instantiating an
instance of an NSUserActivity


255
00:15:05,256 --> 00:15:07,446
and we're providing
it an activity type.


256
00:15:08,376 --> 00:15:10,106
This is a unique
string that you provide,


257
00:15:10,106 --> 00:15:12,426
this is the same string
you provide to the system


258
00:15:12,786 --> 00:15:15,736
to let it know what activities
your app is capable of handling.


259
00:15:17,046 --> 00:15:19,936
We recommend a reverse DNS-style
notation for these types


260
00:15:19,936 --> 00:15:22,976
of strings to keep them unique.


261
00:15:23,116 --> 00:15:24,756
Next, our activity
needs a title.


262
00:15:25,366 --> 00:15:28,096
Again, the title is used
for indexing and used


263
00:15:28,096 --> 00:15:29,816
as a display title in
the search results.


264
00:15:30,296 --> 00:15:33,346
Next, we're setting a dictionary


265
00:15:33,346 --> 00:15:36,356
on the userInfo property
containing the information we


266
00:15:36,356 --> 00:15:38,346
need to recreate the state.


267
00:15:38,726 --> 00:15:44,456
Next we're enabling on-device
indexing of the activity


268
00:15:44,766 --> 00:15:46,836
by setting eligibleForSearch
to true,


269
00:15:47,166 --> 00:15:51,346
and with this activity it
represents what the user's


270
00:15:51,346 --> 00:15:54,566
current state is and we inform
the system by becomeCurrent


271
00:15:54,566 --> 00:15:56,536
on the activity and the
activity will be added


272
00:15:56,716 --> 00:15:57,726
to the on-device index.


273
00:15:58,146 --> 00:16:00,766
What does this look
like for your users?


274
00:16:01,456 --> 00:16:04,036
Now users can be
returned search results


275
00:16:04,176 --> 00:16:06,766
for activities indexed
from your apps.


276
00:16:08,236 --> 00:16:11,336
Here we can see how the title
property maps to the title


277
00:16:11,626 --> 00:16:17,196
in the search result and if you
provide more information using


278
00:16:17,196 --> 00:16:20,186
the contentAttributes set we
can provide richer results.


279
00:16:20,786 --> 00:16:24,136
So now what happens
when a user taps on one


280
00:16:24,136 --> 00:16:25,016
of your search results?


281
00:16:26,506 --> 00:16:29,106
A UI application delegate
method in your app is called,


282
00:16:29,686 --> 00:16:31,136
the same one used for Handoff.


283
00:16:31,596 --> 00:16:34,076
Here we see continueUserActivity
restorationHandler.


284
00:16:35,116 --> 00:16:37,456
And we pass that activity
for the search result.


285
00:16:37,976 --> 00:16:42,696
We check its activity
type and we can continue


286
00:16:42,696 --> 00:16:45,456
to restore the state using
the information populated


287
00:16:45,456 --> 00:16:46,206
in the user info.


288
00:16:48,396 --> 00:16:52,106
So now users can tap on results
for activities from your app


289
00:16:52,106 --> 00:17:00,216
and you can restore them right
back to the proper state.


290
00:17:00,216 --> 00:17:03,516
NSUserActivity in App
Search is a great way


291
00:17:03,516 --> 00:17:05,425
to let your users get back


292
00:17:05,425 --> 00:17:06,976
to the content they
previously visited.


293
00:17:08,286 --> 00:17:09,695
We wanted to take
it a step further.


294
00:17:09,695 --> 00:17:13,796
So when we were designing this
feature we took a look at a lot


295
00:17:13,796 --> 00:17:16,636
of apps in the App
Store and noticed a lot


296
00:17:16,636 --> 00:17:20,766
of apps have content that's
available to many other users.


297
00:17:21,406 --> 00:17:25,826
So we thought wouldn't it
be great for discoverability


298
00:17:25,976 --> 00:17:29,106
if we could take the activities
representing public content


299
00:17:29,866 --> 00:17:32,896
and make them searchable by all
users of the app not just ones


300
00:17:32,896 --> 00:17:34,796
that previously visited
that content?


301
00:17:37,196 --> 00:17:38,386
That's what we're doing


302
00:17:38,386 --> 00:17:40,696
with NSUserActivity
and Public Indexing.


303
00:17:42,226 --> 00:17:42,966
So how does this work?


304
00:17:43,746 --> 00:17:46,056
As a user navigates
the public content


305
00:17:46,356 --> 00:17:50,006
in your apps you create
NSUserActivities capturing


306
00:17:50,006 --> 00:17:54,046
that state and you
designate them as public.


307
00:17:55,436 --> 00:17:58,276
As users engage with
the search results


308
00:17:58,276 --> 00:18:01,936
for these activities
the activity is shared


309
00:18:01,936 --> 00:18:05,496
with our cloud index and
made searchable by all users


310
00:18:05,496 --> 00:18:08,276
of the app, not just ones that
previously visited the content.


311
00:18:09,486 --> 00:18:11,866
If your activity can
be restored on the web


312
00:18:11,916 --> 00:18:15,536
and you set the webpageURL
property you can massively


313
00:18:15,536 --> 00:18:19,126
increase its audience by being
searchable in iOS Safari.


314
00:18:21,116 --> 00:18:25,056
So let's see how we designate
an activity as public.


315
00:18:26,016 --> 00:18:28,336
We can start off with the
activity we previously saw


316
00:18:29,766 --> 00:18:31,366
and we can set one
additional property.


317
00:18:31,366 --> 00:18:34,156
Here we're setting
eligibleForPublicIndexing


318
00:18:34,376 --> 00:18:38,366
to true and we just designated
this activity as public.


319
00:18:40,196 --> 00:18:42,666
Even though we have set
this property to true,


320
00:18:43,836 --> 00:18:45,546
that doesn't mean
that the contents


321
00:18:45,546 --> 00:18:48,666
of the activity are immediately
shared with our cloud index.


322
00:18:49,126 --> 00:18:55,326
For an activity to be shared
it first needs to appear


323
00:18:55,326 --> 00:18:58,706
in search results and be
engaged with by many users.


324
00:18:59,356 --> 00:19:06,016
We track these engagements using
a zero-knowledge proof method


325
00:19:06,316 --> 00:19:08,656
which keeps the activities'
contents private


326
00:19:09,276 --> 00:19:13,116
until an engagement
threshold is met.


327
00:19:13,326 --> 00:19:17,166
So here in more detail as a user
engages with the search result


328
00:19:17,166 --> 00:19:20,726
for an activity designated
as public a one-way hash


329
00:19:21,076 --> 00:19:23,456
of the activity is sent
to our cloud index.


330
00:19:23,946 --> 00:19:30,276
Not until the cloud index has
seen the same hash many times


331
00:19:30,276 --> 00:19:32,076
from users is the content


332
00:19:32,346 --> 00:19:34,296
of the activity shared
with our cloud index.


333
00:19:34,816 --> 00:19:37,886
We took extra measure


334
00:19:37,886 --> 00:19:42,596
in defining the feature this way
first to respect user privacy


335
00:19:43,156 --> 00:19:46,216
and second to prevent
any user specific data


336
00:19:46,216 --> 00:19:48,956
from accidentally being
shared with our cloud index.


337
00:19:50,696 --> 00:19:55,906
In addition, the properties on
NSUserActivity eligibleForSearch


338
00:19:55,986 --> 00:19:59,166
and eligibleForPublicIndexing
are false by default


339
00:20:00,076 --> 00:20:02,836
and for everyone here,
only designate public


340
00:20:03,076 --> 00:20:06,036
on your activities that
represent content and features


341
00:20:06,226 --> 00:20:08,866
that are popular among
many of your users.


342
00:20:13,656 --> 00:20:16,246
Now let's take a look at some
additional benefits you get


343
00:20:16,246 --> 00:20:17,836
for adopting NSUserActivity.


344
00:20:18,636 --> 00:20:20,006
The first is Handoff.


345
00:20:20,866 --> 00:20:23,646
So by adopting the API you've
just added support for Handoff.


346
00:20:23,646 --> 00:20:26,986
If you choose, you can allow
your users to start an activity


347
00:20:27,706 --> 00:20:30,376
in your app on one device
and continue it on another.


348
00:20:34,136 --> 00:20:37,056
The next two are related
to new features from Siri.


349
00:20:39,216 --> 00:20:43,176
As shown in the keynote, swiping
left of home presents the user


350
00:20:43,446 --> 00:20:44,486
with Siri suggestions.


351
00:20:45,706 --> 00:20:48,516
Along with suggested
Contacts and suggested apps


352
00:20:48,516 --> 00:20:52,866
and nearby places, activities
from your app can be suggested.


353
00:20:53,566 --> 00:20:56,696
Here we see a suggestion for
an upcoming calendar event


354
00:20:57,396 --> 00:21:00,126
and a suggestion to
resume a podcast.


355
00:21:00,566 --> 00:21:05,106
Next is the Siri
smart reminders.


356
00:21:06,016 --> 00:21:10,096
Now users can ask Siri to
remind them of specific content


357
00:21:10,256 --> 00:21:13,706
from your apps and when
they do the activity


358
00:21:13,706 --> 00:21:15,686
from your app is
embedded in the reminder.


359
00:21:15,686 --> 00:21:18,366
It is an easy way
for users to get back


360
00:21:18,366 --> 00:21:20,586
to the content they want
to be reminded about.


361
00:21:21,746 --> 00:21:26,536
NSUserActivity in App Search
makes it easy for your users


362
00:21:26,536 --> 00:21:28,536
to get back to the content
they previously visited


363
00:21:28,536 --> 00:21:31,586
and it can make the
public content


364
00:21:31,586 --> 00:21:33,156
in your apps more discoverable.


365
00:21:37,576 --> 00:21:39,926
Next let's talk about
the next API you can use


366
00:21:39,926 --> 00:21:41,896
to make the content in
your apps searchable,


367
00:21:42,496 --> 00:21:44,086
that's CoreSpotlight.


368
00:21:47,316 --> 00:21:50,346
CoreSpotlight is a
brand-new framework on iOS 9.


369
00:21:50,816 --> 00:21:54,206
It provides a database-like API


370
00:21:54,746 --> 00:21:57,136
so you can add, update,
delete items.


371
00:21:58,526 --> 00:22:01,286
The items you indexed using
CoreSpotlight will be searchable


372
00:22:01,856 --> 00:22:06,266
in iOS search and it is used by
our own built-in apps, Messages,


373
00:22:06,266 --> 00:22:09,226
Mail, Calendar, Notes,
you can get an idea


374
00:22:09,516 --> 00:22:11,886
of what you can index
with CoreSpotlight.


375
00:22:12,406 --> 00:22:17,706
Let's take a look at the API.


376
00:22:17,936 --> 00:22:19,886
First we start off with
a CSSearchableItem.


377
00:22:21,056 --> 00:22:23,826
This will represent the
unique item we wish to index.


378
00:22:24,256 --> 00:22:29,526
Next we associate a
CSSearchableItemAttributeSet


379
00:22:30,176 --> 00:22:33,076
which is an easy way to describe
the item by setting properties.


380
00:22:35,716 --> 00:22:39,346
Then we pass the CSSearchItem
to the CSSearchableIndex


381
00:22:39,926 --> 00:22:42,476
and the item is added
to the on-device index.


382
00:22:47,616 --> 00:22:52,156
Let's see how we go
about creating an item.


383
00:22:52,356 --> 00:22:53,926
First we start off
by creating the


384
00:22:53,926 --> 00:22:55,556
CSSearchableItemAttributeSet.


385
00:22:56,816 --> 00:22:58,736
Here we have one for an image.


386
00:23:02,756 --> 00:23:05,596
Next we set a few properties
on the attribute set


387
00:23:05,596 --> 00:23:07,976
to describe the item
we wish to index.


388
00:23:07,976 --> 00:23:10,576
Here we're setting a
title and a description.


389
00:23:11,966 --> 00:23:14,096
We'll see how the title
and the description map


390
00:23:14,206 --> 00:23:19,366
to the search result in a bit.


391
00:23:19,576 --> 00:23:21,516
Next we create the
CSSearchableItem


392
00:23:21,516 --> 00:23:24,606
and we supply a unique
identifier,


393
00:23:24,766 --> 00:23:26,566
this is an identifier
that the app can use


394
00:23:26,566 --> 00:23:29,856
to reference the actual
data that we wish to index.


395
00:23:30,416 --> 00:23:33,426
We can supply a domain
identifier.


396
00:23:33,566 --> 00:23:36,216
This is a way of
grouping items together.


397
00:23:36,216 --> 00:23:38,666
In our example here
we're indexing a photo.


398
00:23:38,796 --> 00:23:42,046
We may want to group all
of our photos together


399
00:23:42,046 --> 00:23:44,126
under a domain identifier
representing an album.


400
00:23:45,286 --> 00:23:47,656
And we provide an attribute
set which we created


401
00:23:47,656 --> 00:23:52,416
above describing the item.


402
00:23:52,626 --> 00:23:56,106
Next, we index the item
calling indexSearchableItems


403
00:23:56,266 --> 00:23:58,956
on the CSSearchableIndex
passing it an array


404
00:23:58,956 --> 00:24:00,206
of items we wish to index.


405
00:24:00,726 --> 00:24:04,236
What does this look
like for users?


406
00:24:05,216 --> 00:24:07,176
Users can now go into iOS search


407
00:24:07,626 --> 00:24:09,856
and be returned search
results things in your app


408
00:24:09,926 --> 00:24:11,886
that have been indexed
using CoreSpotlight.


409
00:24:16,916 --> 00:24:19,986
Here is how some of the
attributes, properties we set


410
00:24:19,986 --> 00:24:22,686
on the attribute set map
to the search result.


411
00:24:23,096 --> 00:24:28,936
What happens when a user taps
on one of your search results,


412
00:24:31,396 --> 00:24:34,256
a UI application delegate
method in your app is called,


413
00:24:34,946 --> 00:24:36,526
the same one used for Handoff


414
00:24:37,056 --> 00:24:42,206
and here we see again
ContinuousUserActivity


415
00:24:42,206 --> 00:24:45,776
RestorationHandler and this time
you know you're being launched


416
00:24:45,776 --> 00:24:50,346
by a CoreSpotlight item
because the activity type is set


417
00:24:50,346 --> 00:24:51,956
to CSSearchableItemActionType


418
00:24:52,326 --> 00:24:55,386
and the unique identifier
we used


419
00:24:55,386 --> 00:24:59,096
when we initialized the
searchable item is accessible


420
00:24:59,276 --> 00:25:00,956
for the value


421
00:25:01,086 --> 00:25:03,426
in CSSearchableItem
ActivityIdentifier


422
00:25:03,706 --> 00:25:04,476
in the userInfo.


423
00:25:07,156 --> 00:25:11,286
So now users can tap on search
results and you can return them


424
00:25:11,286 --> 00:25:13,216
to the right context
for that item.


425
00:25:13,316 --> 00:25:19,186
Now let's talk about
maintaining your index.


426
00:25:20,256 --> 00:25:22,676
The index supports
updating items.


427
00:25:23,796 --> 00:25:27,246
Over time the title of
your item may change,


428
00:25:27,246 --> 00:25:30,666
the description may change, the
user updates, certain fields


429
00:25:30,666 --> 00:25:33,606
of your -- representing your
item, you can update them


430
00:25:34,646 --> 00:25:37,136
by calling the same method
you used to index items


431
00:25:37,606 --> 00:25:40,286
by creating a CSSearchableItem
with a unique identifier


432
00:25:40,766 --> 00:25:44,466
that you wish to update
associating an updated


433
00:25:44,466 --> 00:25:46,056
CSSearchableItemAttributeSet


434
00:25:47,036 --> 00:25:49,536
and indexing the item
calling CSSearchableItems.


435
00:25:52,136 --> 00:25:55,146
Another common maintenance
routine is deleting items.


436
00:25:55,786 --> 00:25:58,256
It is good practice
to delete any items


437
00:25:58,256 --> 00:26:00,116
that are no longer
relevant from the index.


438
00:26:00,636 --> 00:26:02,886
We support multiple
ways to delete items.


439
00:26:03,716 --> 00:26:05,356
First, you can delete
by identifier


440
00:26:06,296 --> 00:26:08,506
so you can pass an
array of identifiers


441
00:26:09,236 --> 00:26:11,206
to delete searchable
items with identifiers.


442
00:26:11,726 --> 00:26:14,356
Those items will be
deleted from the index.


443
00:26:14,776 --> 00:26:18,416
You can delete by
domain identifier.


444
00:26:18,716 --> 00:26:21,156
You saw earlier when
creating our item,


445
00:26:21,906 --> 00:26:24,976
you can use a domain identifier
to group items together.


446
00:26:25,506 --> 00:26:29,596
You can pass the
identifier and the group


447
00:26:29,596 --> 00:26:30,556
of items will be deleted


448
00:26:30,626 --> 00:26:32,026
when calling
deleteSearchableItems


449
00:26:32,216 --> 00:26:33,206
WithDomainIdentifiers.


450
00:26:33,616 --> 00:26:38,036
Last, you can delete all
the items from your index


451
00:26:38,566 --> 00:26:40,736
by calling
deleteAllSearchableItems


452
00:26:41,106 --> 00:26:41,986
WithCompletion handler.


453
00:26:42,466 --> 00:26:49,926
Now let's take a look at a
demo to see how easy it is


454
00:26:49,926 --> 00:26:51,856
to add CoreSpotlight
to your apps.


455
00:26:52,616 --> 00:26:55,566
Our demo app is a photo
viewer displaying a collection


456
00:26:55,566 --> 00:26:55,986
of photos.


457
00:26:56,396 --> 00:26:59,496
I'll show you how easy it is to
index the items by their title


458
00:27:00,606 --> 00:27:02,246
and we'll look at
the user experience


459
00:27:02,606 --> 00:27:04,056
of searching and restoring.


460
00:27:12,636 --> 00:27:16,326
Here we have Xcode and
the iPhone simulator.


461
00:27:16,946 --> 00:27:20,446
Let's launch our app
first to get an idea


462
00:27:20,446 --> 00:27:21,146
of what it looks like.


463
00:27:22,306 --> 00:27:24,786
Here we have a collection
of photos,


464
00:27:25,436 --> 00:27:28,186
each photo has a title below it.


465
00:27:28,286 --> 00:27:29,596
There are some nice
sunsets in here.


466
00:27:30,966 --> 00:27:32,906
Okay. Let's see how easy it is


467
00:27:33,066 --> 00:27:34,676
to index these photos
using their title.


468
00:27:36,736 --> 00:27:40,816
You go in Spotlight, and we
have a method, index items


469
00:27:41,616 --> 00:27:44,946
and we'll call this when
the data model initializes


470
00:27:45,516 --> 00:27:50,806
and we'll enumerate over all
of the photos in the data store


471
00:27:50,806 --> 00:27:54,356
and we'll add each photo
using CoreSpotlight.


472
00:27:55,486 --> 00:28:00,786
We'll start off by creating
the attribute set describing


473
00:28:02,756 --> 00:28:03,666
the photo.


474
00:28:03,666 --> 00:28:06,816
Here we're creating a
CSSearchableItemAttributeSet


475
00:28:08,616 --> 00:28:09,516
for an image.


476
00:28:10,376 --> 00:28:14,036
Then we'll take the title
from the data model and set it


477
00:28:14,036 --> 00:28:16,426
on the Title property
of the attribute set.


478
00:28:17,836 --> 00:28:20,356
We'll also include a
description based on that title.


479
00:28:25,716 --> 00:28:27,876
Next we'll create
the item itself.


480
00:28:28,676 --> 00:28:32,116
Here we're passing in a unique
identifier which represents


481
00:28:32,256 --> 00:28:35,886
that we can use to reference
the image in our data store.


482
00:28:40,756 --> 00:28:46,626
Then we'll call
indexSearchableItems passing


483
00:28:46,626 --> 00:28:49,176
in the item into the
CSSearchableIndex.


484
00:28:50,726 --> 00:28:54,396
Now let's build and run this app
and here we are back in our app


485
00:28:54,396 --> 00:28:59,146
and this time when our app
initialized it called index


486
00:28:59,146 --> 00:29:01,856
items and enumerated all of
the photos in the collection


487
00:29:01,886 --> 00:29:05,896
and added each photo
to the on-device index.


488
00:29:07,806 --> 00:29:10,336
Now we can go into iOS search


489
00:29:11,166 --> 00:29:14,226
and I remember seeing some
nice sunsets in there.


490
00:29:14,226 --> 00:29:18,976
We can see results from
our app for these sunsets


491
00:29:19,306 --> 00:29:23,376
with the Title of
"sunset" in them.


492
00:29:23,586 --> 00:29:26,286
Tapping on one of
the results allows us


493
00:29:26,286 --> 00:29:27,966
to restore the app right back


494
00:29:28,186 --> 00:29:29,496
to the proper context
for that item.


495
00:29:30,516 --> 00:29:37,306
[Applause]


496
00:29:37,806 --> 00:29:39,586
>> DAVE SALIM: That's
how easy it is


497
00:29:40,196 --> 00:29:41,986
to index items using
CoreSpotlight.


498
00:29:42,956 --> 00:29:44,146
So some additional features


499
00:29:44,846 --> 00:29:47,156
in CoreSpotlight is
support for batching.


500
00:29:47,926 --> 00:29:51,136
Your app may choose to index a
large number of items and wish


501
00:29:51,456 --> 00:29:52,856
to break it up in batches.


502
00:29:53,366 --> 00:29:56,616
The index supports saving
the State of where you are


503
00:29:56,616 --> 00:29:58,356
in your batch process
and retrieving it


504
00:29:58,356 --> 00:30:00,386
so that you can resume
where you left off.


505
00:30:01,186 --> 00:30:04,016
There is also support for
a delegate and extension


506
00:30:04,016 --> 00:30:06,146
so that the index can
communicate with your app


507
00:30:06,476 --> 00:30:08,116
in the foreground, background,


508
00:30:08,116 --> 00:30:09,216
or when it is not
currently running.


509
00:30:10,316 --> 00:30:12,256
There is support for
data protection classes


510
00:30:12,636 --> 00:30:14,816
so you can choose the
appropriate security policy


511
00:30:15,236 --> 00:30:16,536
for the information
that you're indexing.


512
00:30:17,856 --> 00:30:21,446
CoreSpotlight is an easy
to adopt database-like API


513
00:30:22,336 --> 00:30:25,206
which you can use to
index any features


514
00:30:25,206 --> 00:30:27,326
and content from your apps.


515
00:30:28,536 --> 00:30:30,576
So now I'll hand it over
to Jason Douglas talk


516
00:30:30,576 --> 00:30:32,596
about the third API, web markup.


517
00:30:33,516 --> 00:30:43,176
[Applause]


518
00:30:43,676 --> 00:30:44,546
>> JASON DOUGLAS: Hello.


519
00:30:45,196 --> 00:30:46,416
My name is Jason Douglas.


520
00:30:46,446 --> 00:30:47,626
I'm from the Siri team.


521
00:30:47,856 --> 00:30:49,576
We'll talk about web markup.


522
00:30:49,956 --> 00:30:53,476
You have seen two amazing ways


523
00:30:53,476 --> 00:30:55,446
to make your app
contents searchable both


524
00:30:55,536 --> 00:30:59,956
in NSUserActivity and
CoreSpotlight, the third set


525
00:30:59,956 --> 00:31:02,226
of those APIs is web markup.


526
00:31:02,596 --> 00:31:04,666
And this is for content
from the app


527
00:31:04,976 --> 00:31:06,746
which is also available
on a website.


528
00:31:07,276 --> 00:31:11,966
The key to making this
connection is a mobile


529
00:31:11,966 --> 00:31:12,446
deep link.


530
00:31:12,746 --> 00:31:14,856
A deep link is a lot
like a URL but rather


531
00:31:14,856 --> 00:31:17,896
than to a webpage
it links to content,


532
00:31:18,046 --> 00:31:23,966
specific content directly
inside of your app.


533
00:31:24,236 --> 00:31:25,656
You saw this diagram earlier


534
00:31:26,026 --> 00:31:28,786
where we're building
both an on-device index


535
00:31:28,786 --> 00:31:31,086
and a cloud index
from public items


536
00:31:31,086 --> 00:31:32,526
that are sourced
from the device.


537
00:31:33,346 --> 00:31:35,236
Well, to call crawl content


538
00:31:35,236 --> 00:31:38,566
from websites Apple now has
a web crawler called AppleBot


539
00:31:38,826 --> 00:31:41,246
which is going out and
crawling app websites


540
00:31:41,276 --> 00:31:42,346
for quite some time now.


541
00:31:43,106 --> 00:31:45,576
And for a lot of this content,
you didn't have to do anything.


542
00:31:45,676 --> 00:31:49,876
If your website supports
mobile deep links, we were able


543
00:31:49,876 --> 00:31:53,056
to go ahead, discover that
content and make it searchable


544
00:31:53,096 --> 00:31:54,926
from iOS search and Safari.


545
00:31:56,736 --> 00:32:00,296
This content when
pulled from the website,


546
00:32:00,296 --> 00:32:04,396
we surface it directly in search
and Safari like you see here.


547
00:32:05,816 --> 00:32:07,096
And when a user taps on one


548
00:32:07,096 --> 00:32:09,276
of the results they're
deep linked directly


549
00:32:09,276 --> 00:32:11,386
into your app seeing the content


550
00:32:11,386 --> 00:32:13,276
that they saw from
search results.


551
00:32:13,746 --> 00:32:18,076
You will notice there is a
link to get back to your app


552
00:32:18,466 --> 00:32:19,346
which you get for free.


553
00:32:19,686 --> 00:32:21,096
You don't have to
do anything special


554
00:32:21,096 --> 00:32:22,516
in your app to get
this behavior.


555
00:32:23,486 --> 00:32:26,116
Users simply have to tap on
that link in the top left corner


556
00:32:26,366 --> 00:32:27,836
and they're taken
back to searching.


557
00:32:27,836 --> 00:32:29,946
This makes it seamless
to go back and forth.


558
00:32:31,396 --> 00:32:34,686
There are four simple steps


559
00:32:34,786 --> 00:32:38,706
to making your apps content
searchable via the web markup.


560
00:32:39,606 --> 00:32:43,086
The first step is making
sure Apple can discover


561
00:32:43,416 --> 00:32:45,216
and index your website.


562
00:32:46,436 --> 00:32:50,206
The second step is ensuring that
your website contains markup


563
00:32:50,206 --> 00:32:51,256
for mobile deep links.


564
00:32:51,706 --> 00:32:54,486
Next you want to also be sure


565
00:32:54,486 --> 00:32:59,546
that your app can handle opening
those deep links and finally,


566
00:32:59,546 --> 00:33:01,526
this is optional, but
highly recommended,


567
00:33:01,736 --> 00:33:03,756
is adding mark-up
for structured data.


568
00:33:03,876 --> 00:33:06,096
We'll talk more about
what this is.


569
00:33:06,136 --> 00:33:09,566
This allows your results to
look rich and engaging to users.


570
00:33:10,106 --> 00:33:14,806
So the first step, making your
website discoverable by Apple.


571
00:33:14,806 --> 00:33:18,066
We have been going out crawling
the web for a while looking


572
00:33:18,066 --> 00:33:20,426
for sites with deep
links, the easiest way


573
00:33:20,426 --> 00:33:23,286
to make sure we can find the
app's website is to use it


574
00:33:23,286 --> 00:33:25,486
as either your support
or marketing URL


575
00:33:25,726 --> 00:33:28,426
when you submit the
site to iTunes Connect.


576
00:33:29,836 --> 00:33:33,096
When you submit your app there
is two text boxes for this.


577
00:33:33,096 --> 00:33:34,116
It is very easy.


578
00:33:34,426 --> 00:33:37,496
We use them as a starting
point for going out


579
00:33:37,496 --> 00:33:38,986
and finding mobile deep links.


580
00:33:39,376 --> 00:33:43,526
The next thing is making sure


581
00:33:43,526 --> 00:33:46,696
that your website has
markup for deep links.


582
00:33:47,506 --> 00:33:50,076
The most popular way, you have
probably seen this before,


583
00:33:50,496 --> 00:33:52,296
are something called
Smart App Banners,


584
00:33:52,296 --> 00:33:53,896
they have been around
for a while.


585
00:33:53,946 --> 00:33:57,396
This is a simple <meta>
tag specifying the app


586
00:33:57,396 --> 00:34:00,016
and what the deep
link URL should be.


587
00:34:01,006 --> 00:34:04,296
Users when they visit your app's
website in Safari see a banner.


588
00:34:04,706 --> 00:34:07,266
If the app is not installed
it allows them to go directly


589
00:34:07,266 --> 00:34:08,576
to the App Store to install it


590
00:34:08,835 --> 00:34:12,255
or if it is already installed
you can click the view button


591
00:34:12,525 --> 00:34:14,956
to view that content
directly inside of your app.


592
00:34:15,835 --> 00:34:18,856
If you want to learn more
about Smart App Banners check


593
00:34:18,856 --> 00:34:21,856
out the Safari Web Content Guide
which has more information.


594
00:34:22,436 --> 00:34:29,116
In iOS 9 there is a new
feature called Universal Links


595
00:34:29,436 --> 00:34:30,926
which is an even
better alternative


596
00:34:30,926 --> 00:34:31,926
to Smart App Banners.


597
00:34:33,085 --> 00:34:37,266
There are a few advantages
over the custom URL schemes


598
00:34:37,266 --> 00:34:39,545
that you may have used in
the past for deep links.


599
00:34:40,766 --> 00:34:42,576
The first of the features
is they're unique.


600
00:34:43,056 --> 00:34:47,156
Multiple apps can't
claim the same custom --


601
00:34:47,156 --> 00:34:49,076
they can claim the
same custom URL scheme


602
00:34:49,076 --> 00:34:51,416
but with universal
links they can't collide


603
00:34:51,676 --> 00:34:55,505
because we use the app website
as a way to uniquely identify.


604
00:34:56,565 --> 00:35:00,226
It is secure, just because
you say that an app belongs


605
00:35:00,226 --> 00:35:03,036
to a certain website we
don't take it for granted.


606
00:35:03,656 --> 00:35:06,946
A signed certificate is
uploaded to the website


607
00:35:06,946 --> 00:35:10,366
and when the user installs your
app we check the certificate


608
00:35:10,366 --> 00:35:13,716
to make sure that they're
truly linked together.


609
00:35:15,296 --> 00:35:19,656
They're also flexible so users
can control the behavior whether


610
00:35:19,656 --> 00:35:22,596
they prefer being within the
website or within the app,


611
00:35:22,596 --> 00:35:24,476
they can easily toggle
this behavior


612
00:35:24,556 --> 00:35:26,536
and choose the default
they want the most.


613
00:35:26,806 --> 00:35:29,336
This means that you can
also avoid using things


614
00:35:29,336 --> 00:35:31,646
like JavaScript to
try to ask the user


615
00:35:31,866 --> 00:35:32,866
which they would prefer.


616
00:35:33,176 --> 00:35:35,716
Another great advantage of not
using Javascript is it's one


617
00:35:35,716 --> 00:35:38,066
of the types of deep
link which we have a bit


618
00:35:38,066 --> 00:35:39,606
of a hard time understanding.


619
00:35:39,606 --> 00:35:42,606
Using something like Universal
Links ensures we're able


620
00:35:42,606 --> 00:35:44,296
to parse your deep
links correctly.


621
00:35:45,436 --> 00:35:47,586
The final advantage,
they're universal.


622
00:35:48,276 --> 00:35:52,916
A Universal Link is a single URL
used both for your web content


623
00:35:52,916 --> 00:35:54,496
as well as your app's content.


624
00:35:54,756 --> 00:35:57,416
You don't need to have two
separate URLs, one for web


625
00:35:57,416 --> 00:35:59,416
and one for the deep
link content.


626
00:35:59,966 --> 00:36:06,326
If using Universal Links
we'll still need to know


627
00:36:06,326 --> 00:36:09,026
about your deep links
via your web markup,


628
00:36:09,026 --> 00:36:11,406
so you want to use
Smart App Banners


629
00:36:11,726 --> 00:36:13,696
or an alternative
supported standard.


630
00:36:14,006 --> 00:36:16,976
This also ensures that if a user
doesn't have the app installed


631
00:36:17,206 --> 00:36:19,796
they're still able to go
discover your app, and find it,


632
00:36:19,796 --> 00:36:23,496
install it since Universal Links
is a feature that's enabled once


633
00:36:23,496 --> 00:36:24,636
your app is installed.


634
00:36:25,536 --> 00:36:28,596
To learn more, I highly
recommend that you check


635
00:36:28,596 --> 00:36:30,966
out the session Seamless
Linking to Your App


636
00:36:31,176 --> 00:36:31,926
which will be tomorrow.


637
00:36:35,636 --> 00:36:39,936
So the next step or the other
alternatives we also support


638
00:36:39,936 --> 00:36:42,776
for deep linking, one of
those is Twitter cards


639
00:36:43,616 --> 00:36:48,236
which also uses <meta> tags
and Facebook app links.


640
00:36:48,426 --> 00:36:52,556
In addition to just supporting
smart app banners we support


641
00:36:52,556 --> 00:36:54,536
these as well and
we'll add support


642
00:36:54,536 --> 00:36:57,916
for other popular standards
that may come along later.


643
00:37:01,876 --> 00:37:04,896
Finally, making sure that
your app can open deep links.


644
00:37:05,056 --> 00:37:08,396
In the past and you may
be familiar with this,


645
00:37:08,396 --> 00:37:09,896
you may have already
done this for your app,


646
00:37:10,146 --> 00:37:12,406
is making sure you've
implemented openURL.


647
00:37:13,526 --> 00:37:16,066
Here is a simple
example of using openURL.


648
00:37:16,796 --> 00:37:19,526
In this case in our
example we have a URL


649
00:37:19,526 --> 00:37:22,416
which can view profiles and
it simply takes a profile ID.


650
00:37:22,416 --> 00:37:26,896
We simply parse the URL
with NSURL components


651
00:37:28,026 --> 00:37:31,396
and pass the profile ID
from the query parameters


652
00:37:31,696 --> 00:37:32,656
to the view controller.


653
00:37:33,026 --> 00:37:35,736
This is a very simple
example of how easy it is


654
00:37:35,766 --> 00:37:38,046
to support deep linking
for your app.


655
00:37:40,916 --> 00:37:43,386
So now I want to talk
about structured data


656
00:37:43,386 --> 00:37:44,726
which I alluded to earlier.


657
00:37:45,786 --> 00:37:49,376
Structured data is something in
addition to the mobile deep link


658
00:37:49,736 --> 00:37:51,306
which lets us understand


659
00:37:51,306 --> 00:37:53,336
and parse information
about your results.


660
00:37:53,956 --> 00:37:57,476
Parsing freeform web
text is not an easy task


661
00:37:57,476 --> 00:37:59,576
and this helps us
out significantly.


662
00:38:00,366 --> 00:38:03,126
It also ensures that
your results can stand


663
00:38:03,126 --> 00:38:06,516
out to the user rather than
just having text you can have an


664
00:38:06,516 --> 00:38:09,436
image, ratings, and
other key things


665
00:38:09,476 --> 00:38:10,876
that are called out
in the result.


666
00:38:11,276 --> 00:38:12,976
It can also help
improve your ranking


667
00:38:13,346 --> 00:38:16,276
because we know this result is
rich and engaging to the user,


668
00:38:16,566 --> 00:38:19,136
we may tend to surface it
more than other results.


669
00:38:19,806 --> 00:38:23,316
So one standard for
adding this type


670
00:38:23,316 --> 00:38:25,276
of structured data
is open graph.


671
00:38:25,976 --> 00:38:28,916
Open graph you can
specify an image, an audio,


672
00:38:28,916 --> 00:38:31,006
or even a video file
with your result.


673
00:38:31,316 --> 00:38:33,606
You simply place this
markup on your webpage


674
00:38:33,606 --> 00:38:34,776
and we'll then associate it


675
00:38:34,776 --> 00:38:39,976
with the deep link we also
find on the same page.


676
00:38:40,996 --> 00:38:42,766
Another very common format


677
00:38:42,846 --> 00:38:46,006
for structured data is
schema.org that's been


678
00:38:46,006 --> 00:38:50,046
around for a while and we're
adding support for it rapidly.


679
00:38:50,846 --> 00:38:53,876
A common schema.org
is AggregateRatings


680
00:38:53,876 --> 00:38:55,566
for ratings and reviews.


681
00:38:56,326 --> 00:38:59,286
This example we're showing
adding the AggregateRating


682
00:38:59,286 --> 00:39:05,586
markup with the schema.org micro
data and we support RDFA as well


683
00:39:05,586 --> 00:39:09,196
as JSON-LD depending on
what you're comfortable


684
00:39:09,196 --> 00:39:12,716
with implementing on your
website we'll support that


685
00:39:12,716 --> 00:39:14,616
and parse that to
be all-inclusive.


686
00:39:17,196 --> 00:39:19,326
Now let's dissect an example


687
00:39:19,326 --> 00:39:20,756
of how this works
in the real world.


688
00:39:21,106 --> 00:39:23,536
Here is an Airbnb
result and the first


689
00:39:23,536 --> 00:39:26,156
and most obvious thing is
the title which we parsed


690
00:39:26,156 --> 00:39:30,256
with standard HTML <title> tags
and then we go a step further.


691
00:39:31,186 --> 00:39:33,066
There is a price
per night shown.


692
00:39:33,426 --> 00:39:38,936
We're able to do this because
on this webpage the Offer schema


693
00:39:38,936 --> 00:39:41,736
was added and it is
associated with a hotel.


694
00:39:42,846 --> 00:39:45,586
We're able to parse that price
and price currency and show


695
00:39:45,586 --> 00:39:47,406
that directly in the result.


696
00:39:48,876 --> 00:39:53,106
We're also able to show number
of reviews via AggregateRating


697
00:39:53,106 --> 00:39:56,086
from schema.org and
a rating value


698
00:39:56,086 --> 00:39:57,436
which we can render as stars.


699
00:39:59,946 --> 00:40:03,316
Finally, the image has been
provided using open graph's


700
00:40:03,356 --> 00:40:04,066
image tag.


701
00:40:04,646 --> 00:40:09,726
So now to talk about
some of the schemas


702
00:40:09,726 --> 00:40:11,606
which we support
from schema.org.


703
00:40:12,406 --> 00:40:18,066
The first is AggregateRatings,
another is offers, prices,


704
00:40:18,586 --> 00:40:22,166
or if you have a consumer
shopping site, you offer things


705
00:40:22,166 --> 00:40:26,686
for sale and as we saw
with hotels maybe, booking,


706
00:40:28,036 --> 00:40:30,426
price range in case you
don't have a fixed price


707
00:40:30,476 --> 00:40:35,366
but rather a range of prices,
interactionCount for things


708
00:40:35,366 --> 00:40:38,576
like likes, views, comments,


709
00:40:40,076 --> 00:40:43,786
also interactionCount will
be superseded in schema.org


710
00:40:43,836 --> 00:40:49,186
by the new Action set of schemas
which we'll support that as well


711
00:40:49,356 --> 00:40:50,966
if you're thinking of migrating


712
00:40:50,966 --> 00:40:52,846
from interactionCount
to Actions.


713
00:40:54,406 --> 00:40:56,726
Organization for things
such as businesses,


714
00:40:56,766 --> 00:41:00,166
you can also have
addresses associated


715
00:41:00,166 --> 00:41:03,426
with these contact information,
like telephone numbers


716
00:41:03,426 --> 00:41:04,436
and we'll see a bit later how


717
00:41:04,436 --> 00:41:06,886
that can help make your
result more richer.


718
00:41:07,276 --> 00:41:11,336
Recipes, this one
is self-explanatory.


719
00:41:13,026 --> 00:41:16,636
SearchActions, in case your
website has a landing page


720
00:41:16,636 --> 00:41:18,826
for searches by marking it


721
00:41:18,826 --> 00:41:21,686
up in a special way we're also
then able to treat your result


722
00:41:21,786 --> 00:41:23,426
in a little bit differently,


723
00:41:23,426 --> 00:41:25,726
we know it is a landing
page for search.


724
00:41:26,986 --> 00:41:28,616
Finally, ImageObjects.


725
00:41:28,906 --> 00:41:31,136
This is for nothing
else but images.


726
00:41:31,136 --> 00:41:36,076
So now I want to also
talk about Actions.


727
00:41:36,736 --> 00:41:39,076
Actions are a way
using structured data


728
00:41:39,076 --> 00:41:41,396
to allow your results
to become actionable.


729
00:41:42,976 --> 00:41:46,456
There's a set of actions that
we'll be supporting on launch,


730
00:41:46,496 --> 00:41:50,676
the first of which is dialing a
phone number, getting directions


731
00:41:50,676 --> 00:41:53,786
to an address and playing
an audio or video file.


732
00:41:53,786 --> 00:42:00,796
For the first of these
examples dialing a phone number.


733
00:42:01,326 --> 00:42:04,706
As we saw before with the
Organization schema you can add


734
00:42:04,706 --> 00:42:07,066
something like a
telephone as a property.


735
00:42:07,696 --> 00:42:10,746
When we see this telephone
number we can parse it


736
00:42:10,746 --> 00:42:13,186
and put a call button
directly in the result.


737
00:42:13,516 --> 00:42:16,356
This makes your result
actionable now.


738
00:42:17,516 --> 00:42:20,606
Another is using an
AudioObject schema


739
00:42:21,486 --> 00:42:24,836
with AudioObject you can
specify a URL to an audio file


740
00:42:24,836 --> 00:42:28,486
and the users will play it from
the result, they don't have


741
00:42:28,536 --> 00:42:32,886
to deep link into the app
and play it from there.


742
00:42:34,326 --> 00:42:35,886
Finally, getting directions.


743
00:42:36,606 --> 00:42:39,836
Providing a postal address
we can then allow the user


744
00:42:39,836 --> 00:42:42,166
to navigate directly
without having


745
00:42:42,166 --> 00:42:43,276
to deep link into the app.


746
00:42:43,636 --> 00:42:46,766
This has the benefit of
making your result much more


747
00:42:46,766 --> 00:42:48,626
potentially interactive
to the user.


748
00:42:49,366 --> 00:42:51,206
If a user sees a list
of results and sees


749
00:42:51,206 --> 00:42:53,466
that they can get
directly to the action


750
00:42:53,466 --> 00:42:56,516
that they want they may be more
likely to click on your result.


751
00:42:56,516 --> 00:43:04,306
So we have shown a lot of
different schemas, markups,


752
00:43:04,536 --> 00:43:07,046
we'll add testing
tools later this year


753
00:43:07,156 --> 00:43:09,856
for testing the markup
on your website.


754
00:43:09,856 --> 00:43:13,636
This will be available on the
developer site later this year.


755
00:43:13,966 --> 00:43:16,956
We'll be having testing tools
for both the deep link markup


756
00:43:16,956 --> 00:43:19,846
and the structured data markup.


757
00:43:20,856 --> 00:43:23,686
Finally, I just wanted to
call out a few more resources


758
00:43:24,006 --> 00:43:26,776
as you're adding both
either mobile deep links


759
00:43:26,856 --> 00:43:31,446
or structured data to the
website, do check out some


760
00:43:31,506 --> 00:43:34,256
of these resources,
provide a lot of information


761
00:43:34,256 --> 00:43:40,006
and again we'll hopefully
help get you started.


762
00:43:40,356 --> 00:43:40,696
Thanks.


763
00:43:42,516 --> 00:43:47,696
[Applause]


764
00:43:48,196 --> 00:43:51,626
>> JASON DOUGLAS: Now I
hand it back to Vipul.


765
00:43:55,756 --> 00:43:58,776
>> VIPUL PRAKASH: So those
are three simple, powerful,


766
00:43:58,776 --> 00:44:05,056
and flexible ways of making
your app searchable on iOS 9.


767
00:44:05,276 --> 00:44:06,256
Which one should you use?


768
00:44:06,516 --> 00:44:10,316
It is a function of the
nature of your content as well


769
00:44:10,316 --> 00:44:12,976
as the kind of search experience
that you're trying to create.


770
00:44:13,696 --> 00:44:17,846
CoreSpotlight is for
private data which is indexed


771
00:44:17,846 --> 00:44:20,686
on the device and you
can use CoreSpotlight


772
00:44:20,896 --> 00:44:24,586
to comprehensively
index data in your app.


773
00:44:24,586 --> 00:44:27,976
If you're building or you
have a social networking app


774
00:44:28,016 --> 00:44:30,656
for instance and you wanted
to index all of the messages


775
00:44:31,016 --> 00:44:32,836
that the user has
sent and received,


776
00:44:33,206 --> 00:44:35,086
CoreSpotlight is the
right tool for the job.


777
00:44:36,036 --> 00:44:39,336
Web markup is for apps that
mirror their content on the web.


778
00:44:39,756 --> 00:44:42,866
If you do that, you should
absolutely adopt that markup,


779
00:44:42,866 --> 00:44:46,866
because it creates tremendous
opportunity for your app


780
00:44:46,976 --> 00:44:49,046
and content to be
discovered by users


781
00:44:49,216 --> 00:44:51,586
that don't have your app yet.


782
00:44:51,856 --> 00:44:55,356
Use NSUserActivity for both
public and private content


783
00:44:55,356 --> 00:44:58,906
as well as for indexing
navigation points inside


784
00:44:58,906 --> 00:44:59,306
of your app.


785
00:45:00,316 --> 00:45:03,366
Now there is another flavor of
NSUserActivity that Dave touched


786
00:45:03,366 --> 00:45:04,766
on which is Public Indexing.


787
00:45:05,436 --> 00:45:06,576
This is really powerful.


788
00:45:06,816 --> 00:45:09,986
If your app has a large
number of items, millions


789
00:45:09,986 --> 00:45:13,486
or even hundreds of millions
you can use Public Indexing


790
00:45:13,486 --> 00:45:16,246
to essentially move those
items and have them indexed


791
00:45:16,246 --> 00:45:18,126
in Apple's cloud index.


792
00:45:20,316 --> 00:45:22,966
These APIs while distinct,


793
00:45:24,336 --> 00:45:26,166
they're really designed
to work together.


794
00:45:26,736 --> 00:45:31,646
In the same app for the
same content you can adopt


795
00:45:31,646 --> 00:45:32,506
multiple APIs.


796
00:45:33,856 --> 00:45:38,706
The only thing to remember
is for items that are indexed


797
00:45:39,616 --> 00:45:42,766
from multiple places, you
want to connect these items


798
00:45:43,396 --> 00:45:44,796
by giving them the same ID.


799
00:45:45,306 --> 00:45:51,176
If you're using all three APIs,
the obvious ID is the URL.


800
00:45:52,946 --> 00:45:56,346
You would set CSSearchableItems
UniqueIdentifier to the URL


801
00:45:56,896 --> 00:45:59,626
and NSUserActivity related to
the unique identifier as well


802
00:45:59,626 --> 00:46:01,226
as the webpage URL to the URL.


803
00:46:01,966 --> 00:46:05,516
if you use NSUserActivity
and CoreSpotlight together,


804
00:46:05,516 --> 00:46:08,126
which is a very common
pattern, you just want to ensure


805
00:46:08,476 --> 00:46:09,686
that they have the same ID.


806
00:46:10,146 --> 00:46:13,896
Now this help search
deduplicate results


807
00:46:14,316 --> 00:46:16,576
but it also helps
items rank stronger.


808
00:46:17,126 --> 00:46:19,446
Let's talk a bit about ranking.


809
00:46:21,916 --> 00:46:23,896
The magic of search really is


810
00:46:23,976 --> 00:46:28,166
to provide the most relevant
result based on a few keystrokes


811
00:46:28,166 --> 00:46:29,176
of input from the user.


812
00:46:29,616 --> 00:46:31,826
We have done a lot of work here.


813
00:46:32,996 --> 00:46:36,176
Relevance and ranking,
is a complex function


814
00:46:36,176 --> 00:46:38,236
of matching the query
to the items.


815
00:46:38,516 --> 00:46:40,906
Most of this is completely
transparent


816
00:46:41,186 --> 00:46:43,136
to you developers
and to our users.


817
00:46:44,796 --> 00:46:50,996
However, an important component
of ranking is interaction


818
00:46:50,996 --> 00:46:52,586
with the content and results.


819
00:46:52,586 --> 00:46:57,616
What you can do is help ensure
that search can capture all


820
00:46:57,616 --> 00:46:58,496
of these interactions.


821
00:46:58,996 --> 00:47:03,646
The three types of
interactions that we care about,


822
00:47:03,646 --> 00:47:08,156
one is URL popularity,
this is applicable


823
00:47:08,336 --> 00:47:13,316
to content that's indexed via
web markup and this is based


824
00:47:13,316 --> 00:47:16,866
on any quality indications
you add through schemas


825
00:47:16,866 --> 00:47:22,016
like ratings, likes, reviews, as
well as the position of the URL


826
00:47:22,076 --> 00:47:23,396
in the web's link graph.


827
00:47:24,336 --> 00:47:29,076
The URL improved this
position based on popularity


828
00:47:29,076 --> 00:47:30,246
and this happens automatically.


829
00:47:30,836 --> 00:47:36,436
The second interaction
is the frequency of views


830
00:47:36,436 --> 00:47:39,226
that your content
receives inside of the app.


831
00:47:39,696 --> 00:47:43,386
Really the only way to capture
this is through NSUserActivity


832
00:47:43,386 --> 00:47:46,876
which is why we encourage that
you always adopt NSUserActivity.


833
00:47:47,766 --> 00:47:49,546
The third and most
important form


834
00:47:49,546 --> 00:47:51,756
of interaction is engagement
with search results.


835
00:47:51,826 --> 00:47:54,856
This is when a search result
is presented to the user,


836
00:47:55,386 --> 00:47:58,456
whether they tap on the
result, or if they're satisfied


837
00:47:58,456 --> 00:48:02,846
by the description in the result
which we call silent engagement


838
00:48:02,846 --> 00:48:04,496
and we capture through
session analytics.


839
00:48:08,316 --> 00:48:11,316
A quick checklist of what
to do to optimize relevance.


840
00:48:11,316 --> 00:48:13,946
First, continue to
do what you're doing,


841
00:48:13,946 --> 00:48:15,516
make great apps and
great content.


842
00:48:15,516 --> 00:48:18,646
Really, the search
system is designed to find


843
00:48:18,646 --> 00:48:20,456
and bubble up the best content.


844
00:48:21,406 --> 00:48:24,506
You can help by ensuring
that we can capture all


845
00:48:24,506 --> 00:48:26,396
of the interactions,
using NSUserActivity,


846
00:48:26,936 --> 00:48:29,866
use NSUserActivity with Public
Indexing where applicable


847
00:48:30,466 --> 00:48:33,356
because now we can
capture the engagements


848
00:48:33,356 --> 00:48:35,536
with your content
across the user base.


849
00:48:36,596 --> 00:48:40,536
Adopt schema mark-up
for interactions counts


850
00:48:40,626 --> 00:48:41,796
and quality indications.


851
00:48:42,236 --> 00:48:45,176
Finally follow user
interface guidelines I'll talk


852
00:48:45,176 --> 00:48:45,836
about in a moment.


853
00:48:48,696 --> 00:48:50,226
The flip side of bubbling


854
00:48:50,226 --> 00:48:55,306
up great content is suppressing
content that is not relevant.


855
00:48:55,826 --> 00:49:00,486
We have done a lot of
work on this as well.


856
00:49:00,486 --> 00:49:03,306
If malicious or a poorly
considered app is spamming the


857
00:49:03,306 --> 00:49:07,066
index, we will downrank
their results


858
00:49:07,436 --> 00:49:09,216
or suppress them entirely.


859
00:49:09,576 --> 00:49:10,726
The most important sort


860
00:49:10,726 --> 00:49:15,286
of measure here is
engagements-to-shown ratios,


861
00:49:15,286 --> 00:49:17,866
the amount of times your
results are shown in search


862
00:49:18,236 --> 00:49:20,196
and how many times are engaged.


863
00:49:20,746 --> 00:49:22,896
Low engagements will
be suppressed


864
00:49:23,246 --> 00:49:27,196
and high engagement ratios
will help your content rank


865
00:49:27,196 --> 00:49:28,056
up higher in search.


866
00:49:28,586 --> 00:49:33,896
One of the best ways to
get high engagements is


867
00:49:33,936 --> 00:49:36,626
to follow a few simple
user guidelines.


868
00:49:37,196 --> 00:49:39,806
One of the things
you will notice


869
00:49:39,806 --> 00:49:42,356
in iOS 9 is search results even


870
00:49:42,356 --> 00:49:46,376
from built-in apps are very
descriptive and rich and this is


871
00:49:46,376 --> 00:49:50,266
because we found that richer
results get more engagements.


872
00:49:50,806 --> 00:49:55,286
A few things here,
provide a thumbnail,


873
00:49:55,546 --> 00:49:58,916
provide a well-structured
readable description, ratings


874
00:49:58,916 --> 00:50:00,276
and actions where applicable.


875
00:50:00,946 --> 00:50:04,026
The image in the thumbnail
is really powerful,


876
00:50:04,256 --> 00:50:06,676
it gives the user a
sense of what they'll see


877
00:50:06,676 --> 00:50:08,986
when they tap on the result.


878
00:50:08,986 --> 00:50:10,486
Provide a good thumbnail.


879
00:50:11,056 --> 00:50:13,376
Provide key information that
the user is looking for.


880
00:50:13,776 --> 00:50:16,686
For instance, if the user is
looking for a booking number,


881
00:50:16,686 --> 00:50:19,086
a reference number, include
it in the description


882
00:50:19,306 --> 00:50:22,376
so that the search task can be
completed right there in search.


883
00:50:22,966 --> 00:50:29,226
Now another powerful provision
is support for keywords.


884
00:50:29,746 --> 00:50:32,786
In all the APIs you can
provide a number of keywords


885
00:50:33,116 --> 00:50:35,596
that will then trigger
search results.


886
00:50:35,836 --> 00:50:39,366
Category keywords tend
to be very, very useful.


887
00:50:40,566 --> 00:50:43,546
Users may search type
"ticket" when searching


888
00:50:43,546 --> 00:50:46,276
for a specific ticket
rather than typing the name,


889
00:50:46,576 --> 00:50:49,376
they may type "recipe"
when looking for protein.


890
00:50:49,596 --> 00:50:51,956
This creates a magical,


891
00:50:51,956 --> 00:50:54,356
intelligent experience
for users.


892
00:50:54,846 --> 00:51:01,496
Other types of keywords
that are useful are synonyms


893
00:51:01,566 --> 00:51:05,236
and abbreviations, users want
to type as little as possible,


894
00:51:05,536 --> 00:51:08,376
so instead of searching "San
Francisco Giants" they may type


895
00:51:08,376 --> 00:51:11,696
"sf giants" and you can provide
this recall through keywords.


896
00:51:16,226 --> 00:51:20,466
Just as important, is
behavior on launch.


897
00:51:20,496 --> 00:51:23,066
This is what happens when
the user taps on the result.


898
00:51:23,366 --> 00:51:25,596
You want to take them
straight to the content


899
00:51:25,726 --> 00:51:29,816
that they're looking for without
interstitials, without pop-ups,


900
00:51:30,086 --> 00:51:32,796
without screens,
without spending a lot


901
00:51:32,796 --> 00:51:34,196
of time loading that screen.


902
00:51:35,096 --> 00:51:37,296
This is, in fact, so
important that we measure


903
00:51:37,296 --> 00:51:42,096
and estimate the time from tap
to the content shown and use it


904
00:51:42,096 --> 00:51:43,226
as a factor in ranking.


905
00:51:43,646 --> 00:51:47,606
Here is two examples.


906
00:51:47,606 --> 00:51:48,246
One is right.


907
00:51:48,596 --> 00:51:49,466
One is wrong.


908
00:51:49,466 --> 00:51:51,976
Let me show you what to do.


909
00:51:52,516 --> 00:51:59,516
[Pause]


910
00:52:00,016 --> 00:52:04,000
[Laughter]


911
00:52:04,046 --> 00:52:04,966
>> VIPUL PRAKASH: I'm sure none
of you have apps that do that!


912
00:52:05,516 --> 00:52:09,866
[Applause]


913
00:52:10,366 --> 00:52:12,426
>> VIPUL PRAKASH: It is
frustrating for the user


914
00:52:12,786 --> 00:52:16,056
and you want to find ways
of completely avoiding it.


915
00:52:16,616 --> 00:52:20,986
Let's talk about
what to do next.


916
00:52:22,536 --> 00:52:26,916
You can, of course, index your
app content comprehensively,


917
00:52:27,256 --> 00:52:30,046
these are certain things that
we have found to be very useful


918
00:52:30,046 --> 00:52:30,926
in the search context.


919
00:52:31,096 --> 00:52:33,086
Any content that the user
has viewed in the past


920
00:52:33,086 --> 00:52:36,136
that you can capture with
NSUserActivity and content


921
00:52:36,136 --> 00:52:38,996
that the user may have
created or curated by starring


922
00:52:38,996 --> 00:52:42,006
or creating lists inside of
the app, people want to go back


923
00:52:42,146 --> 00:52:45,846
to things that they
have done in the past.


924
00:52:45,996 --> 00:52:49,436
Navigation points and
features are very, very useful.


925
00:52:50,036 --> 00:52:56,896
New messages, new content
arriving that the user may want


926
00:52:56,896 --> 00:52:59,586
to look for inside of your
app, you would also want


927
00:52:59,586 --> 00:53:01,036
to look for this in search.


928
00:53:02,456 --> 00:53:05,206
You can get creative.


929
00:53:05,296 --> 00:53:07,046
You can proactively index items


930
00:53:07,316 --> 00:53:09,216
that the user may
want to look at.


931
00:53:09,306 --> 00:53:13,496
Say I bought a ticket to a music
festival, I may be interested


932
00:53:13,746 --> 00:53:15,136
in other music festivals
in the area.


933
00:53:15,136 --> 00:53:17,906
You can use your app
analytics to figure


934
00:53:17,906 --> 00:53:22,896
out interesting content
and put it in the index.


935
00:53:22,896 --> 00:53:26,756
Really the APIs are
flexible and allow you


936
00:53:27,026 --> 00:53:29,426
to create novel search
experiences.


937
00:53:29,466 --> 00:53:31,846
The possibilities here
are really limitless.


938
00:53:35,816 --> 00:53:38,056
So summary, just
let's take a look


939
00:53:38,056 --> 00:53:39,846
of things we covered
in the session.


940
00:53:40,266 --> 00:53:46,546
We introduced fast on-device
and cloud architecture that used


941
00:53:46,616 --> 00:53:48,646
for indexing deep links
and for App Search.


942
00:53:49,156 --> 00:53:50,496
We showed you three APIs


943
00:53:50,736 --> 00:53:54,176
and deep linking methods
which you can adopt.


944
00:53:54,796 --> 00:53:59,556
We showed you how great
content, descriptive results,


945
00:53:59,726 --> 00:54:04,026
and fast content-to-result
interaction can provide engaging


946
00:54:04,026 --> 00:54:04,976
search experience.


947
00:54:06,336 --> 00:54:11,116
Provisions built in the APIs
that are taking your content


948
00:54:11,336 --> 00:54:14,636
and showing it to iOS
users around the world.


949
00:54:18,956 --> 00:54:20,586
We have some more information.


950
00:54:21,386 --> 00:54:23,036
If you're looking for
details, you can head


951
00:54:23,086 --> 00:54:27,796
to our search API documentation
portal, we have forums


952
00:54:27,796 --> 00:54:29,906
for more interactive help.


953
00:54:31,986 --> 00:54:36,596
I'd recommend going to the
session on seamless linking


954
00:54:36,596 --> 00:54:37,696
that Jason introduced.


955
00:54:42,776 --> 00:54:46,516
We also have two labs, one


956
00:54:46,516 --> 00:54:48,896
that starts immediately
after I stop talking.


957
00:54:49,266 --> 00:54:53,546
You should come and join us
there and another one on Friday


958
00:54:53,936 --> 00:54:58,616
and we would love to see some
integrations with search APIs


959
00:54:58,816 --> 00:55:03,206
on Friday that you
made during WWDC.


960
00:55:03,756 --> 00:55:05,866
That's it for App Search.


961
00:55:06,516 --> 00:55:11,500
[Applause]

