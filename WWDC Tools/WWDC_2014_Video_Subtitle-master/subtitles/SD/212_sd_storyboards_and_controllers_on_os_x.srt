1
00:00:13,276 --> 00:00:13,976
>> Good afternoon.


2
00:00:15,056 --> 00:00:18,246
Welcome to Storyboards
and Controllers on OS X.


3
00:00:18,476 --> 00:00:21,236
My name's Mike, and I work on
the Interface Builder team.


4
00:00:22,026 --> 00:00:24,976
Today, I'd like to show you
how you can build your OS X


5
00:00:24,976 --> 00:00:28,886
applications faster and easier
using the all-new Storyboards


6
00:00:29,286 --> 00:00:31,046
in Xcode 6 and Yosemite.


7
00:00:31,556 --> 00:00:34,156
I'm also going to be joined
later by my colleague Raleigh


8
00:00:34,156 --> 00:00:36,946
from the AppKit team, who
will come up and take us


9
00:00:36,946 --> 00:00:38,706
under the hood of the
new controllers API


10
00:00:38,706 --> 00:00:40,236
that make Storyboards work.


11
00:00:40,746 --> 00:00:42,936
So just a quick show
of hands here,


12
00:00:43,336 --> 00:00:47,856
who is already building an app
today for iOS using Storyboards?


13
00:00:48,926 --> 00:00:50,616
Oh, awesome, cool.


14
00:00:51,206 --> 00:00:54,306
So you'll probably notice
a little bit of what I'm


15
00:00:54,306 --> 00:00:56,636
about to show you is going
to look pretty familiar.


16
00:00:57,136 --> 00:01:00,176
So what are we going to see?


17
00:01:01,576 --> 00:01:03,936
First, I'm going to start by
giving you a brief overview


18
00:01:03,936 --> 00:01:05,385
of how storyboards work.


19
00:01:05,976 --> 00:01:08,966
Then, I'm going to give a demo
showing how you can quickly


20
00:01:08,966 --> 00:01:10,586
connect the top-level
controllers


21
00:01:10,776 --> 00:01:13,676
and interface your app
together using Xcode 6.


22
00:01:14,286 --> 00:01:16,816
Hopefully, you'll see how
Storyboards can help you


23
00:01:16,816 --> 00:01:20,036
structure your app into modular
and reusable view controllers.


24
00:01:20,756 --> 00:01:22,396
Then, Raleigh's going to come up


25
00:01:22,396 --> 00:01:24,316
and show us the view
controller API.


26
00:01:24,996 --> 00:01:27,836
We'll see how all of the pieces
click together underneath the


27
00:01:27,836 --> 00:01:30,916
Storyboard scenes, and he'll
show you the best places to hook


28
00:01:30,916 --> 00:01:31,766
into the infrastructure.


29
00:01:33,036 --> 00:01:35,496
And finally, as a bonus,
he's going to show you how


30
00:01:35,496 --> 00:01:38,386
to use the new gesture
recognizers in OS X


31
00:01:38,706 --> 00:01:40,966
without having to write
an NS event tracking loop.


32
00:01:41,326 --> 00:01:42,646
All you have to do is just drag,


33
00:01:42,756 --> 00:01:44,236
connect to your target
in action.


34
00:01:44,416 --> 00:01:47,196
They're so simple,
it's simply amazing.


35
00:01:48,736 --> 00:01:53,646
So in Xcode, Storyboards are a
great way to see all UI parts


36
00:01:53,646 --> 00:01:56,346
of your application laid out in
a way that's easy to understand.


37
00:01:56,966 --> 00:01:58,866
Take for example an
application like Pages.


38
00:01:59,926 --> 00:02:03,036
We can decompose each of
the major pieces of the UI


39
00:02:03,486 --> 00:02:05,456
into each major section
of functionality,


40
00:02:05,876 --> 00:02:07,196
like the window toolbar,


41
00:02:07,286 --> 00:02:08,816
the document area,
and the shape picker.


42
00:02:09,666 --> 00:02:12,106
Each of these views has a
corresponding controller,


43
00:02:12,386 --> 00:02:17,436
and we show that in the
storyboard as a scene.


44
00:02:17,646 --> 00:02:20,916
Each scene represents a view
and view controller pair.


45
00:02:21,406 --> 00:02:24,076
The lines connecting the
scenes, known as segues,


46
00:02:24,316 --> 00:02:26,736
show the relationships
between them.


47
00:02:27,586 --> 00:02:30,076
Some of these relationships
represent a containment


48
00:02:30,076 --> 00:02:31,606
of view controllers
inside of each other.


49
00:02:32,366 --> 00:02:34,436
Other segue lines
represent transitions


50
00:02:34,436 --> 00:02:35,676
between view controllers.


51
00:02:36,696 --> 00:02:38,536
But each one represents
a flow of data


52
00:02:38,536 --> 00:02:43,706
in some form within the app.


53
00:02:44,386 --> 00:02:47,506
In your code, view controllers
are where you, the developer,


54
00:02:47,636 --> 00:02:50,046
actually get your hands
into controlling both the UI


55
00:02:50,366 --> 00:02:51,706
and the underlying data model.


56
00:02:52,546 --> 00:02:53,826
Each top-level scene


57
00:02:53,956 --> 00:02:57,066
in a storyboard represents one
view controller in your code.


58
00:02:58,616 --> 00:03:02,096
Each controller is a
reusable self-contained module


59
00:03:02,096 --> 00:03:03,776
of user interface
and control logic.


60
00:03:04,436 --> 00:03:05,736
Within that controller scene,


61
00:03:05,806 --> 00:03:07,536
you can do everything you
would normally do inside


62
00:03:07,536 --> 00:03:10,426
of a ZIB file, like
place the UI,


63
00:03:10,736 --> 00:03:14,416
set up auto layout constraints,
connect outlets and actions


64
00:03:15,286 --> 00:03:17,966
to their parent view controllers
and its represented object.


65
00:03:19,616 --> 00:03:22,296
So how do these scenes actually
connect with each other?


66
00:03:23,426 --> 00:03:27,516
Well, segues are really the
glue, or the connective tissues,


67
00:03:27,736 --> 00:03:31,206
between each of the major
blocks of your apps UI.


68
00:03:31,206 --> 00:03:33,406
You may have noticed
that on iOS,


69
00:03:33,486 --> 00:03:35,376
segues usually represent
a transition


70
00:03:35,696 --> 00:03:37,726
between whole full-screen views.


71
00:03:38,096 --> 00:03:40,726
When we took a look
at the relationships


72
00:03:40,766 --> 00:03:42,756
between view controllers
on OS X, though,


73
00:03:43,116 --> 00:03:46,546
we noticed a somewhat different
relationship: containment.


74
00:03:47,056 --> 00:03:49,376
On OS X, most applications tend


75
00:03:49,376 --> 00:03:51,626
to group their views
together in the same window.


76
00:03:52,236 --> 00:03:54,256
There aren't many
transitions bringing views on-


77
00:03:54,256 --> 00:03:57,296
and off-screen because you
actually have the screen real


78
00:03:57,296 --> 00:03:59,366
estate to show them all
inside the same window.


79
00:03:59,666 --> 00:04:02,486
Some are grouped in splits
or sometimes hidden in tabs.


80
00:04:02,886 --> 00:04:06,776
That's not to say that we
don't have presentation segues


81
00:04:06,776 --> 00:04:08,916
on OS X as well.


82
00:04:08,916 --> 00:04:12,116
We just have fewer of
them: at modal dialogues,


83
00:04:12,276 --> 00:04:14,516
window modal sheets,
and popovers.


84
00:04:15,346 --> 00:04:17,656
Like the presentation
segues on iOS,


85
00:04:18,236 --> 00:04:20,176
in order to make these work
it's your responsibility


86
00:04:20,176 --> 00:04:22,486
to override the Prepare
for Segue method


87
00:04:22,796 --> 00:04:25,526
in your parent view controller.


88
00:04:26,296 --> 00:04:28,336
From there, you can
take the passed in


89
00:04:28,336 --> 00:04:29,976
and a storyboard segue object,


90
00:04:30,326 --> 00:04:33,516
get the destination view
controller and configure it


91
00:04:33,516 --> 00:04:35,056
and set the represented object,


92
00:04:35,056 --> 00:04:36,656
or do any other initialization
you need,


93
00:04:36,946 --> 00:04:39,256
right before it's
presented up on screen.


94
00:04:41,636 --> 00:04:43,946
So if there's one line of code
that is absolutely necessary


95
00:04:43,946 --> 00:04:49,016
and that you need to remember,
it's Prepare for Segue.


96
00:04:49,646 --> 00:04:52,816
So at build time, each
storyboard scene is broken


97
00:04:52,816 --> 00:04:54,966
down into each of its
constituent parts.


98
00:04:55,606 --> 00:04:57,596
Views are separated
from view controllers,


99
00:04:57,956 --> 00:04:59,976
windows are separated
from window controllers,


100
00:05:00,526 --> 00:05:03,296
and the transition
segues are embedded inside


101
00:05:03,296 --> 00:05:04,556
of their parent controllers.


102
00:05:05,016 --> 00:05:08,526
This is done to make the process
of loading your user interface


103
00:05:08,796 --> 00:05:10,446
as lazy as possible at runtime.


104
00:05:11,176 --> 00:05:13,066
Then, as a performance
optimization,


105
00:05:13,146 --> 00:05:15,776
the container controllers
absorb all


106
00:05:15,776 --> 00:05:18,646
of their child controllers
together in the same unit.


107
00:05:19,366 --> 00:05:21,456
This is because all of
those controllers are going


108
00:05:21,456 --> 00:05:23,486
to be needed at the
initial load time


109
00:05:23,486 --> 00:05:25,536
of the top-level
container controller,


110
00:05:26,176 --> 00:05:28,716
and it's just more efficient
to unarchive one file.


111
00:05:29,636 --> 00:05:33,846
Then, each unit is compiled
into a NIB file, and then all


112
00:05:33,846 --> 00:05:37,036
of the NIBs are bundled together
inside of a .storyboardc bundle.


113
00:05:38,176 --> 00:05:40,246
Then, that bundle
is nestled inside


114
00:05:40,246 --> 00:05:41,926
of your Applications
Resources Directory,


115
00:05:42,366 --> 00:05:45,036
and then Up Your App
can go to the store.


116
00:05:46,216 --> 00:05:48,446
So we've put a lot
of thought and work


117
00:05:48,446 --> 00:05:49,776
into the Storyboard Compiler


118
00:05:49,876 --> 00:05:51,976
to make sure you get the
most efficient loading


119
00:05:51,976 --> 00:05:55,756
at runtime while letting you use
the most flexible UI to be able


120
00:05:55,756 --> 00:05:58,546
to connect and rewire
the relationships


121
00:05:58,546 --> 00:06:00,466
between your controllers
on the canvas,


122
00:06:00,906 --> 00:06:02,846
all with the absolute
minimum of glue code.


123
00:06:03,786 --> 00:06:06,456
So let's see how this all works
over here on the demo machine.


124
00:06:07,996 --> 00:06:12,086
So as our way of testing
storyboards and to make sure


125
00:06:12,086 --> 00:06:15,006
that everything that we're
building is actually working,


126
00:06:15,416 --> 00:06:18,396
we started by rewriting an
old piece of sample code


127
00:06:18,486 --> 00:06:20,786
that you may be familiar
with called Sketch.


128
00:06:21,906 --> 00:06:25,066
In our storyboard based
Sketch: The Next Generation,


129
00:06:25,116 --> 00:06:28,176
we're taking a classic
document based app


130
00:06:28,496 --> 00:06:31,156
and we're remodeling
much of the control logic


131
00:06:31,156 --> 00:06:32,066
into view controllers.


132
00:06:33,206 --> 00:06:36,606
So as you can see here, we
have the main storyboard


133
00:06:36,606 --> 00:06:37,446
of our application.


134
00:06:37,706 --> 00:06:40,906
It already has a number of
scenes that we've prepopulated


135
00:06:41,246 --> 00:06:47,446
with view controllers, and what
we want to do is to show a UI


136
00:06:47,446 --> 00:06:52,756
that has our canvas where you
can drop shapes and use gestures


137
00:06:52,756 --> 00:06:55,656
to manipulate them
and then have a split.


138
00:06:55,656 --> 00:06:58,746
And on the other side of that
will be the inspector area


139
00:06:59,686 --> 00:07:01,526
where you can see the
different properties


140
00:07:01,526 --> 00:07:02,656
of the currently selected shape.


141
00:07:03,386 --> 00:07:07,496
So to model this, I'm going to
use a split view controller,


142
00:07:08,576 --> 00:07:10,926
and I'm just going to drag
that out into the canvas here.


143
00:07:11,836 --> 00:07:14,226
And it comes with two
view controllers already,


144
00:07:14,226 --> 00:07:17,236
which I don't really need
because I already have my canvas


145
00:07:17,636 --> 00:07:23,606
that I can just wire up
here and drag, connect


146
00:07:23,996 --> 00:07:25,996
and create a split
item out of that.


147
00:07:26,326 --> 00:07:29,026
And then we want to wire
up the inspector as well.


148
00:07:30,636 --> 00:07:33,056
And you can see here we
have like a little preview


149
00:07:33,086 --> 00:07:35,656
of what the canvas and
the inspector look like.


150
00:07:35,656 --> 00:07:38,256
And it's using the
auto layout constraints


151
00:07:38,346 --> 00:07:40,156
that have already been
set in those views.


152
00:07:41,056 --> 00:07:42,296
Also, to get this to show up,


153
00:07:42,296 --> 00:07:44,826
we want to take our
window controller


154
00:07:44,856 --> 00:07:47,456
and connect the new split
view controller and say


155
00:07:47,456 --> 00:07:51,216
that this is going to be the
windows content view controller.


156
00:07:52,066 --> 00:07:55,376
So looks like all of
our boxes have all


157
00:07:55,376 --> 00:07:56,326
of the lines connected to them.


158
00:07:56,326 --> 00:07:59,386
Let's run this and
see what shows up.


159
00:08:00,136 --> 00:08:06,126
So here is our application,
and as I resize it,


160
00:08:07,026 --> 00:08:08,956
you'll notice that, you know,


161
00:08:08,956 --> 00:08:11,556
we have a good enforced
minimum size


162
00:08:11,556 --> 00:08:13,176
from our auto layout
constraints,


163
00:08:13,236 --> 00:08:17,856
but the split is not
sticking kind of to the side


164
00:08:17,856 --> 00:08:18,826
where we would want it.


165
00:08:18,826 --> 00:08:21,066
As we resize the window it
just keeps getting bigger.


166
00:08:21,636 --> 00:08:23,386
So I know what I
can do to fix this.


167
00:08:23,476 --> 00:08:28,146
I just have to go to the
split view controller


168
00:08:28,146 --> 00:08:31,656
and find the split view item
that corresponds to that.


169
00:08:32,446 --> 00:08:36,966
And I can set the holding
priority of the split


170
00:08:37,035 --> 00:08:39,145
to be just a little bit
more than the default.


171
00:08:39,916 --> 00:08:41,785
And while we're here,
we might as well mark it


172
00:08:41,785 --> 00:08:44,086
as saying it can collapse
because, you know,


173
00:08:44,166 --> 00:08:47,026
we might not want to always
see the details of all


174
00:08:47,026 --> 00:08:48,396
of the shapes on canvas.


175
00:08:48,396 --> 00:08:53,926
So let's run this
and see how it looks.


176
00:08:54,096 --> 00:08:54,566
All right.


177
00:08:54,846 --> 00:08:57,396
Now, as I drag this, we notice


178
00:08:57,396 --> 00:09:00,816
that the split view edge is
actually hugging the side


179
00:09:00,816 --> 00:09:03,806
of the window, as we want it,
so let's try and add a shape.


180
00:09:05,216 --> 00:09:10,866
Oh, and it looks like we don't
have our Shape Add button hooked


181
00:09:10,866 --> 00:09:14,806
up, so I'm going to
create a new kind of segue.


182
00:09:15,426 --> 00:09:20,876
And I'm going to show the shape
picker controller as a popover.


183
00:09:22,556 --> 00:09:28,636
And in order to make this work
though, there is one piece


184
00:09:28,636 --> 00:09:32,156
of code that we all have to
remember to implement in order


185
00:09:32,726 --> 00:09:36,366
for these to work is
the Prepare for Segue.


186
00:09:36,366 --> 00:09:39,616
So I'm actually going to
open up the Assistant Editor


187
00:09:41,376 --> 00:09:47,456
and I should see the
canvas view controller.


188
00:09:47,836 --> 00:09:48,226
Here we go.


189
00:09:48,376 --> 00:09:51,596
And it looks like somebody has
already helpfully written the


190
00:09:51,596 --> 00:09:53,686
code for me, so I'm just
going to uncomment it here.


191
00:09:54,346 --> 00:09:58,476
And what it does is it takes
the destination view controller


192
00:09:58,476 --> 00:10:01,446
out of the Passed In
and a storyboard segue.


193
00:10:01,446 --> 00:10:05,706
And what we're doing is we're
initializing it and saying


194
00:10:05,706 --> 00:10:09,406
that the shape container
is going to be the canvas,


195
00:10:09,406 --> 00:10:11,056
which is ourself in this case.


196
00:10:11,056 --> 00:10:14,516
The canvas is initiating the
segue and it's also going


197
00:10:14,516 --> 00:10:17,386
to be the destination where we
want to add new shapes to it.


198
00:10:17,846 --> 00:10:19,286
So let's build and run this.


199
00:10:24,236 --> 00:10:28,366
And when we click on it, great.


200
00:10:28,626 --> 00:10:29,596
So now we have a shape.


201
00:10:30,106 --> 00:10:34,146
I can't seem to do
anything with it.


202
00:10:34,146 --> 00:10:38,226
I can't move it, but I think
I'll leave that for Raleigh.


203
00:10:38,376 --> 00:10:43,766
But as one more little bonus
before I leave, I want to hook


204
00:10:43,996 --> 00:10:46,966
up what is going to be
a Preferences window.


205
00:10:47,196 --> 00:10:50,726
And I just want to show you just
how easy this is 'cause this is


206
00:10:50,886 --> 00:10:52,046
one of my favorite features.


207
00:10:52,046 --> 00:10:55,306
I just couldn't wait
to show you guys.


208
00:10:55,936 --> 00:10:58,716
Right here we have
a TabViewController


209
00:10:59,056 --> 00:11:01,546
that has both a General
Pref pane


210
00:11:01,656 --> 00:11:03,126
and some keyboard shortcuts.


211
00:11:03,636 --> 00:11:05,876
And what I can do
is I can wire this


212
00:11:05,876 --> 00:11:09,256
up to the Preferences menu item.


213
00:11:09,916 --> 00:11:12,306
And just say for the sake
of demo we're just going


214
00:11:12,306 --> 00:11:14,136
to show this as a
modal dialogue.


215
00:11:14,746 --> 00:11:21,496
And if I run this, you'll
notice that we have a sketch


216
00:11:22,226 --> 00:11:25,186
with fully functional
preferences.


217
00:11:25,186 --> 00:11:27,356
And you notice the
nice new crossfade


218
00:11:27,536 --> 00:11:28,606
between these two views,


219
00:11:28,606 --> 00:11:30,576
which comes with the
TabViewController.


220
00:11:31,456 --> 00:11:33,156
But this doesn't look exactly


221
00:11:33,156 --> 00:11:34,876
like Preferences windows
that you're used to.


222
00:11:36,126 --> 00:11:39,016
One of the really cool
options that have been added


223
00:11:39,166 --> 00:11:42,816
to the TabViewController
is a new style that,


224
00:11:42,986 --> 00:11:46,286
besides just tabs on
top or tabs on bottom,


225
00:11:46,716 --> 00:11:49,836
we can actually say we
want toolbar style tabs.


226
00:11:50,516 --> 00:11:55,586
And if we actually specify the
class of our view controllers --


227
00:11:56,036 --> 00:11:59,606
in this case this is the General
Prefs pane view controller,


228
00:12:00,366 --> 00:12:04,626
and then this one is the
keyboard shortcuts view


229
00:12:04,626 --> 00:12:12,216
controller -- we will find
within your document the images


230
00:12:12,276 --> 00:12:17,976
that are named the same as the
class of the view controller.


231
00:12:18,486 --> 00:12:26,936
So when we run this now, you'll
see a new Preferences window


232
00:12:27,606 --> 00:12:31,356
that has the icons
and the titles


233
00:12:31,356 --> 00:12:34,566
of the child view controllers.


234
00:12:35,516 --> 00:12:39,876
[ Applause ]


235
00:12:40,376 --> 00:12:44,556
So let's switch back to slides.


236
00:12:44,556 --> 00:12:45,556
So how easy was that?


237
00:12:45,976 --> 00:12:48,096
Just by wiring up a few
segues on the canvas


238
00:12:48,476 --> 00:12:50,096
and overriding Prepare
for Segue,


239
00:12:50,096 --> 00:12:52,906
we are able to plumb
together the view controllers


240
00:12:52,906 --> 00:12:54,456
into a fully functional
application.


241
00:12:54,866 --> 00:12:57,876
And that Preferences window
didn't even use a single line


242
00:12:57,876 --> 00:12:58,296
of code.


243
00:12:59,336 --> 00:13:01,536
So now I'd like to
ask Raleigh to come up


244
00:13:01,696 --> 00:13:04,216
and show us how storyboards
actually works under the hood.


245
00:13:04,666 --> 00:13:05,096
>> Thank you, Mike.


246
00:13:06,516 --> 00:13:11,866
[ Applause ]


247
00:13:12,366 --> 00:13:15,146
Now that you've seen how
incredibly easy it is


248
00:13:15,686 --> 00:13:17,826
to design your application
using storyboards


249
00:13:17,826 --> 00:13:21,146
and to wire everything up,
I'm going to pop open the hood


250
00:13:21,146 --> 00:13:23,016
and we're going to take a look
at the machinery underneath


251
00:13:23,406 --> 00:13:24,766
that drives this whole thing.


252
00:13:24,766 --> 00:13:28,736
We've got a lot to cover here.


253
00:13:29,276 --> 00:13:31,596
Just a little bit of API
with storyboards itself.


254
00:13:31,836 --> 00:13:33,926
There's a lot of new API
with view controllers.


255
00:13:34,286 --> 00:13:35,316
We're going to talk a little bit


256
00:13:35,316 --> 00:13:38,996
about how window controllers
fits in with our proliferation


257
00:13:38,996 --> 00:13:40,316
of view controllers
that we're now adding.


258
00:13:41,096 --> 00:13:43,816
And we'll wrap it up
with gesture recognizers


259
00:13:43,946 --> 00:13:47,906
and how they really mesh really
nicely with view controllers


260
00:13:48,186 --> 00:13:49,516
and designing your application.


261
00:13:49,846 --> 00:13:50,606
It's really awesome.


262
00:13:51,306 --> 00:13:53,136
So let's dig right
in with storyboards.


263
00:13:53,896 --> 00:13:58,296
Storyboards are a resource file
in your project like NIBs are.


264
00:13:59,666 --> 00:14:02,536
By default if you
do the checkbox


265
00:14:02,536 --> 00:14:03,406
when you create a new project,


266
00:14:03,406 --> 00:14:04,816
you can start off
with a storyboard.


267
00:14:05,176 --> 00:14:07,636
Or if you just create a
storyboard in your project,


268
00:14:07,636 --> 00:14:11,016
a new one in the settings of
your project for your target,


269
00:14:11,206 --> 00:14:13,476
you could just right there
in the main interface set


270
00:14:13,476 --> 00:14:15,976
which storyboard to use
as your main interface.


271
00:14:16,166 --> 00:14:19,526
Or even a NIB file, if you
happen to be transitioning


272
00:14:19,526 --> 00:14:20,656
from an old project
to a new one,


273
00:14:20,766 --> 00:14:21,756
and the right thing will happen.


274
00:14:22,786 --> 00:14:24,906
If you find yourself
with the need to dig


275
00:14:24,906 --> 00:14:27,426
down into the Info.plist
and set the keys manually,


276
00:14:27,906 --> 00:14:29,766
this is the
NSMainStoryboardFile.


277
00:14:29,826 --> 00:14:32,726
This is the key you need
to set in your Info.plist


278
00:14:32,726 --> 00:14:33,946
to bring up the storyboard.


279
00:14:36,636 --> 00:14:39,576
When we load the initial
storyboard, it's going to go


280
00:14:39,576 --> 00:14:42,376
through this path just like
you can use this API storyboard


281
00:14:42,376 --> 00:14:45,576
with name to load any storyboard
that you have in your resources,


282
00:14:45,816 --> 00:14:46,946
and you could load
it from a name.


283
00:14:47,466 --> 00:14:49,136
And then you'd need


284
00:14:49,136 --> 00:14:51,196
to instantiate the
initial controller.


285
00:14:52,006 --> 00:14:53,606
What's the initial
controller you might ask?


286
00:14:53,606 --> 00:14:56,866
Well, that's the controller that
has the arrow pointing to it


287
00:14:56,866 --> 00:14:59,006
without some beginning
part to it.


288
00:14:59,356 --> 00:15:00,446
This is the initial guy.


289
00:15:00,736 --> 00:15:02,486
There's always one of
them with your storyboard.


290
00:15:02,746 --> 00:15:04,236
That's going to be the
initial controller,


291
00:15:04,236 --> 00:15:05,876
and it's generally the
one you want to load up.


292
00:15:06,746 --> 00:15:08,896
When we load your
main storyboard file,


293
00:15:08,946 --> 00:15:11,166
we'll automatically instantiate
the initial controller


294
00:15:11,166 --> 00:15:12,846
and set it running
on your behalf.


295
00:15:14,686 --> 00:15:18,116
Not every controller that you
have in your storyboard needs


296
00:15:18,116 --> 00:15:20,616
to be wired back up to that
initial view controller.


297
00:15:20,956 --> 00:15:23,466
You can have some that just
stand alone all on their own


298
00:15:23,466 --> 00:15:24,836
and you can give
them an identifier.


299
00:15:24,836 --> 00:15:27,506
And you can access
them by asking


300
00:15:27,586 --> 00:15:30,086
to instantiate the
controller with identifier.


301
00:15:30,496 --> 00:15:32,156
We'll find it in the
storyboard with that name.


302
00:15:32,156 --> 00:15:34,946
We'll instantiate, start doing
the wiring up and hand it back


303
00:15:34,946 --> 00:15:37,106
to you, then you can
take it from there.


304
00:15:38,866 --> 00:15:42,276
So that's really all there is
with storyboards as far as API.


305
00:15:42,496 --> 00:15:45,076
There's not much
there; they just work.


306
00:15:45,076 --> 00:15:45,856
It's really nice.


307
00:15:47,976 --> 00:15:50,916
With view controllers -- we'll
move on to view controllers --


308
00:15:50,966 --> 00:15:53,806
there's a ton of new API here.


309
00:15:53,806 --> 00:15:55,606
There's so much new API in
view controllers that I've got


310
00:15:55,606 --> 00:15:56,926
to break it down into sections.


311
00:15:56,926 --> 00:15:59,936
So we'll talk about loading and
layout and the life cycle there.


312
00:16:00,476 --> 00:16:02,606
About containerships; we've
got some really nice new stuff


313
00:16:02,606 --> 00:16:03,346
with containership.


314
00:16:03,996 --> 00:16:05,546
Triggered segues, as you saw


315
00:16:05,546 --> 00:16:07,116
with the Plus button
to do the popover.


316
00:16:07,556 --> 00:16:10,086
And we'll wrap it up with how
to do things completely manual


317
00:16:10,326 --> 00:16:11,776
if you need to get
down to that level.


318
00:16:11,776 --> 00:16:17,066
So we have a lot of new
properties in NSViewController


319
00:16:17,066 --> 00:16:18,416
for loading, display,
and layout.


320
00:16:18,726 --> 00:16:21,066
All of these methods
here are new except


321
00:16:21,066 --> 00:16:22,696
for View Loaded,
which is the top one.


322
00:16:23,236 --> 00:16:26,856
And the way I want
to talk about them is


323
00:16:26,856 --> 00:16:28,926
in the life cycle
and how they're used.


324
00:16:29,886 --> 00:16:30,916
You'll have your
view controller.


325
00:16:30,916 --> 00:16:32,626
It will get initted
and allocated.


326
00:16:33,286 --> 00:16:35,506
And it doesn't have a view
yet because view controllers


327
00:16:35,506 --> 00:16:37,746
like to lazily load their
views, so there's no view yet.


328
00:16:38,076 --> 00:16:40,246
View loaded is going
to return no if you ask


329
00:16:40,246 --> 00:16:41,406
for its property at this point.


330
00:16:43,286 --> 00:16:45,836
Then load view is
going to get called.


331
00:16:46,326 --> 00:16:48,376
This has generally been the
place where you've gone ahead


332
00:16:48,376 --> 00:16:52,536
and subclassed NSViewController
and overrode load view just


333
00:16:52,536 --> 00:16:53,916
to call supernormally.


334
00:16:54,256 --> 00:16:57,966
By default, AppKit will go
ahead and try and load the NIB


335
00:16:58,666 --> 00:16:59,806
with the name that you gave it


336
00:16:59,806 --> 00:17:03,086
if you initialized it
init with NIB name.


337
00:17:04,195 --> 00:17:07,546
But new on Yosemite is
AppKit will go ahead


338
00:17:07,546 --> 00:17:10,665
and if your NIB name is
nil, will look for a NIB


339
00:17:10,996 --> 00:17:13,536
that has the same name
as your view controller


340
00:17:13,656 --> 00:17:15,455
and automatically
load that NIB for you.


341
00:17:15,806 --> 00:17:17,906
So now you don't have to
subclass your view controller


342
00:17:17,906 --> 00:17:19,336
to get the right NIB loaded.


343
00:17:19,856 --> 00:17:23,806
You just name your NIB file
the right thing and it'll do it


344
00:17:23,806 --> 00:17:24,526
for you automatically.


345
00:17:26,705 --> 00:17:29,036
During load view, set view
is going to get called


346
00:17:29,036 --> 00:17:31,026
and your view is finally
set on your view controller.


347
00:17:31,446 --> 00:17:33,026
View loaded will now return yes.


348
00:17:33,386 --> 00:17:35,336
And then we return
from load view,


349
00:17:35,336 --> 00:17:38,096
but before we continue the
run load, before we go back


350
00:17:38,096 --> 00:17:40,026
to giving control to you
and your application,


351
00:17:40,396 --> 00:17:43,576
view did load is going to be
called on your view controller.


352
00:17:44,116 --> 00:17:46,576
It is at this point now
instead of overriding load view,


353
00:17:46,726 --> 00:17:47,916
you override view did load


354
00:17:48,006 --> 00:17:51,416
and you do your one-time
instantiation finalization stuff


355
00:17:51,416 --> 00:17:52,236
that you need to do there.


356
00:17:52,636 --> 00:17:55,316
So this is something that
you only want to do once


357
00:17:55,366 --> 00:17:57,956
when the view is loaded and
you'll never need to do again


358
00:17:57,956 --> 00:18:00,336
because your view is going
to be hanging around.


359
00:18:00,336 --> 00:18:05,506
Now you're going to go ahead
and put your view in a window,


360
00:18:05,506 --> 00:18:08,006
get the window on screen
and we're going to go


361
00:18:08,006 --> 00:18:09,176
through the life
cycle of the view.


362
00:18:11,886 --> 00:18:14,566
So before your view gets
in the window as you add it


363
00:18:14,566 --> 00:18:17,216
into the window, we'll
call view will appear.


364
00:18:17,216 --> 00:18:19,066
And there are a few other places


365
00:18:19,066 --> 00:18:20,396
that view will appear
gets called.


366
00:18:21,326 --> 00:18:23,676
Whenever the window is
becoming visible for example,


367
00:18:23,846 --> 00:18:25,056
as you're ordering it front,


368
00:18:25,676 --> 00:18:27,896
perhaps the user has
previously hidden the window


369
00:18:27,896 --> 00:18:30,696
or minimized it and now
they're unminimizing the window.


370
00:18:30,976 --> 00:18:32,016
And so this is another case


371
00:18:32,016 --> 00:18:33,446
where you'll get a
view will appear.


372
00:18:34,016 --> 00:18:35,816
So you could do some really
interesting things here.


373
00:18:35,816 --> 00:18:40,856
For example, you might want
to set your highlight color.


374
00:18:41,376 --> 00:18:43,916
So the first time that
your view is asked to draw,


375
00:18:43,916 --> 00:18:46,226
it draws with the correct
highlight color for example.


376
00:18:47,966 --> 00:18:49,876
The animation is
now going to occur


377
00:18:50,086 --> 00:18:51,526
after you return from this.


378
00:18:51,876 --> 00:18:53,536
The window will be
animated on screen.


379
00:18:53,536 --> 00:18:55,546
If you're unhiding the view
or you're doing some kind


380
00:18:55,546 --> 00:18:57,446
of transition, that
transition animation occurs.


381
00:18:58,016 --> 00:19:00,776
When that completes and your
view is drawn at least once,


382
00:19:01,326 --> 00:19:03,196
view did appear will be
called in the view controller.


383
00:19:03,586 --> 00:19:05,476
And now you can wire up
things that you didn't want


384
00:19:05,476 --> 00:19:06,646
to interfere with
that animation.


385
00:19:07,096 --> 00:19:07,776
And you only want it


386
00:19:07,776 --> 00:19:10,326
to be visible while
the window is visible


387
00:19:10,326 --> 00:19:11,446
and your view is displayed.


388
00:19:11,906 --> 00:19:13,886
You might want to set
up, just as an example,


389
00:19:13,886 --> 00:19:17,766
some animation that's running
here that just runs constantly


390
00:19:17,766 --> 00:19:19,166
but only once it's visible.


391
00:19:19,716 --> 00:19:24,996
At this point, the user
interacts with your view,


392
00:19:24,996 --> 00:19:26,556
interacts with your
user interface.


393
00:19:26,556 --> 00:19:28,466
You're going to update your
constraints on your view,


394
00:19:28,466 --> 00:19:29,336
you're going to dirty them.


395
00:19:29,686 --> 00:19:31,266
Your view controller
gets to participate


396
00:19:31,266 --> 00:19:33,616
in updating the constraints
with Update View Constraints,


397
00:19:33,656 --> 00:19:35,666
and you get informed of when
layout is going to happen


398
00:19:35,666 --> 00:19:37,336
with the will layout and
after layout happened


399
00:19:37,336 --> 00:19:37,996
if you did layout.


400
00:19:38,186 --> 00:19:41,276
So you can participate in
this as you normally would


401
00:19:41,276 --> 00:19:43,996
with auto layout, but
you get to do it now


402
00:19:43,996 --> 00:19:45,016
at the view controller level.


403
00:19:45,446 --> 00:19:47,506
And at some point you're going


404
00:19:47,996 --> 00:19:49,266
to remove the view
from the window.


405
00:19:49,266 --> 00:19:52,466
Perhaps you've changed tabs and
now the view is being hidden


406
00:19:52,836 --> 00:19:54,986
or you've hiding the window.


407
00:19:54,986 --> 00:19:56,076
The user is hiding the window,


408
00:19:56,076 --> 00:19:57,586
or you're just outright
closing the window.


409
00:19:57,906 --> 00:20:00,056
In either of these cases
you will be preceded


410
00:20:00,056 --> 00:20:01,326
with a view will disappear.


411
00:20:01,656 --> 00:20:03,506
That animation we started
in view did appear,


412
00:20:03,506 --> 00:20:05,046
this is where we
would want to stop it.


413
00:20:05,556 --> 00:20:08,326
Then the animation
occurs and the view


414
00:20:08,326 --> 00:20:10,846
or the window disappears with
the appropriate animation


415
00:20:10,846 --> 00:20:13,066
and will call you back
with a view did disappear,


416
00:20:13,296 --> 00:20:16,736
and now you can release
any kind of final resources


417
00:20:16,736 --> 00:20:19,526
that you don't want to hang on
to as the window is not visible


418
00:20:19,746 --> 00:20:21,406
or your view is no
longer part of the window.


419
00:20:22,856 --> 00:20:26,036
Then the life cycle just
continues as you switch tabs


420
00:20:26,036 --> 00:20:28,906
and the views come back and go
away and windows hide and show.


421
00:20:29,116 --> 00:20:30,506
We just continue this cycle.


422
00:20:34,006 --> 00:20:36,886
New in Yosemite,
NSViewController is now


423
00:20:36,886 --> 00:20:37,866
in the responder chain.


424
00:20:38,486 --> 00:20:40,536
Where if we would start
off with our canvas view,


425
00:20:40,536 --> 00:20:42,306
as we had in our demo
application there,


426
00:20:43,296 --> 00:20:46,006
an event is hit tested to
the canvas view and flows


427
00:20:46,006 --> 00:20:47,886
up through the split
view to the window


428
00:20:47,886 --> 00:20:49,146
and finally your
window controller.


429
00:20:51,656 --> 00:20:53,286
Your view controllers,
our canvas view controller


430
00:20:53,286 --> 00:20:55,966
and split view controller,
can now participate in this.


431
00:20:55,966 --> 00:20:57,306
And they're automatically wired


432
00:20:57,306 --> 00:20:59,846
up in the responder chain
right after their view.


433
00:21:00,646 --> 00:21:02,336
So you can now participate
in events


434
00:21:02,336 --> 00:21:04,096
and more importantly
in action methods.


435
00:21:04,416 --> 00:21:07,916
And action methods is where
it really comes in handy.


436
00:21:08,426 --> 00:21:10,706
For example, cut,
copy, and paste.


437
00:21:11,066 --> 00:21:14,396
In your menu bar, cut, copy, and
paste is wired up to the cut,


438
00:21:14,396 --> 00:21:16,496
copy, and paste actions
to the first responder.


439
00:21:16,846 --> 00:21:18,716
And that might be the
canvas view in this case.


440
00:21:19,316 --> 00:21:20,856
Well, our canvas view
doesn't really do much.


441
00:21:20,856 --> 00:21:22,846
Most of our logic is in
our canvas view controller.


442
00:21:23,476 --> 00:21:27,116
And previously you would've
had to catch cut, copy,


443
00:21:27,116 --> 00:21:28,156
and paste in your view


444
00:21:28,156 --> 00:21:31,336
and somehow get it
to your controller.


445
00:21:31,716 --> 00:21:33,856
And now that canvas
view controller is


446
00:21:33,856 --> 00:21:36,946
in the responder chain, you
can put the copy method right


447
00:21:36,946 --> 00:21:38,056
in your canvas view controller


448
00:21:38,436 --> 00:21:42,086
and canvas view can be
totally oblivious to this.


449
00:21:42,176 --> 00:21:43,376
And it works out really nicely.


450
00:21:44,536 --> 00:21:46,766
I do want to point out,
though, that we only wire


451
00:21:46,766 --> 00:21:48,586
up view controllers
automatically


452
00:21:48,586 --> 00:21:51,506
in the responder chain if
you're linked on or after 10/10.


453
00:21:51,506 --> 00:21:55,396
So let's move forward and
talk about containment.


454
00:21:55,396 --> 00:21:57,406
We've got some really exciting
things to do with containment.


455
00:21:58,356 --> 00:22:00,296
View controllers can
now have children


456
00:22:00,296 --> 00:22:02,086
and you can give
back to your parent.


457
00:22:02,556 --> 00:22:05,226
And the best way to talk about
containment is with an example.


458
00:22:05,276 --> 00:22:07,556
So let's start off with tab view
controller and let's dive deep


459
00:22:07,556 --> 00:22:09,256
into tab view controller.


460
00:22:10,596 --> 00:22:14,196
So NSTabViewController is
going to manage in NSTabView.


461
00:22:14,196 --> 00:22:16,596
And it manages a couple of
other views, and I'll get


462
00:22:16,596 --> 00:22:19,166
into details there, but mainly
it manages the tab view.


463
00:22:20,256 --> 00:22:22,406
It's going to lazily
load your tab views.


464
00:22:22,626 --> 00:22:24,496
And this is one of
my favorite things.


465
00:22:25,256 --> 00:22:29,086
In a past life, I've had tab
views that had a fair number


466
00:22:29,086 --> 00:22:31,856
of tabs and a lot of content
in each one of those tabs.


467
00:22:32,196 --> 00:22:34,556
And loading this NIB file
from disc took forever.


468
00:22:35,136 --> 00:22:37,196
Now that we lazily
load the tab views,


469
00:22:37,226 --> 00:22:39,326
just the initial selected
tab is going to get loaded


470
00:22:39,326 --> 00:22:41,076
when you first bring
up your interface.


471
00:22:41,196 --> 00:22:43,296
And it is much more
responsive to the user


472
00:22:43,296 --> 00:22:47,416
that way; I really love this.


473
00:22:47,416 --> 00:22:49,396
It's now much easier


474
00:22:49,396 --> 00:22:52,156
to customize your tabs
using a tab view controller,


475
00:22:52,326 --> 00:22:54,456
and I'll get into specifics
about that in a little bit.


476
00:22:55,566 --> 00:22:58,396
And as you saw in the
demo it's incredibly easy.


477
00:22:58,396 --> 00:23:02,046
Without code, you could get a
nice preferences user interface


478
00:23:02,046 --> 00:23:03,866
style using a tab
view controller.


479
00:23:04,366 --> 00:23:07,076
And I'll show you exactly how
you would do that in code.


480
00:23:07,276 --> 00:23:11,736
And it's just as easy as Mike
did it in the demo in IB.


481
00:23:13,136 --> 00:23:17,576
On Mavericks an NSTabView looks
like this: There's an NSTabView.


482
00:23:17,576 --> 00:23:19,716
It manages a collection
of NSTabView items.


483
00:23:19,716 --> 00:23:21,406
Those tab view items
each have a view


484
00:23:21,636 --> 00:23:24,396
and some additional
properties, such as the label.


485
00:23:24,396 --> 00:23:26,226
So we know what label
to put in the tab.


486
00:23:26,876 --> 00:23:28,726
With tab view controller,


487
00:23:29,116 --> 00:23:32,246
logically things are
now laid out like this.


488
00:23:32,666 --> 00:23:34,196
There's an NSTabViewController


489
00:23:34,786 --> 00:23:38,126
and the tab view
controller owns an NSTabView


490
00:23:38,436 --> 00:23:40,916
and manages the collection
of NSTabView items.


491
00:23:41,816 --> 00:23:44,866
NSTabView item now has a couple
of additional properties:


492
00:23:45,116 --> 00:23:47,686
the image, which is kind of
fun so you can get an image


493
00:23:47,686 --> 00:23:50,166
in there, and of course
the view controller.


494
00:23:50,216 --> 00:23:52,796
And it's the view controller
that now owns the view,


495
00:23:52,956 --> 00:24:00,506
and it can lazily load the view
as you switch to those tabs.


496
00:24:00,616 --> 00:24:02,916
Since NSTabViewController
manages a collection


497
00:24:02,916 --> 00:24:03,976
of tab view items, you can


498
00:24:03,976 --> 00:24:06,426
of course get the
tab view item array.


499
00:24:07,316 --> 00:24:10,066
You can also find out what the
selected tab view item index is.


500
00:24:10,066 --> 00:24:12,826
And this is KVO-compliant,
so you can observe this.


501
00:24:13,116 --> 00:24:15,706
This is much easier to observe
the selected tab view item index


502
00:24:15,706 --> 00:24:20,546
than it was previously to have
a delegate and have to respond


503
00:24:20,546 --> 00:24:21,436
to all the delegate methods.


504
00:24:21,436 --> 00:24:22,626
So you don't have
to do that anymore.


505
00:24:23,176 --> 00:24:27,386
As with any sort of containment
API, there's the add, insert,


506
00:24:27,386 --> 00:24:28,666
and remove tab view items.


507
00:24:29,416 --> 00:24:33,626
And if you have a child view
controller that is in one


508
00:24:33,626 --> 00:24:36,436
of the tabs, you can just ask
for the tab view item associated


509
00:24:36,436 --> 00:24:38,846
with it via tab view
item for view controller.


510
00:24:41,746 --> 00:24:45,856
NSTabViewItem also has this
really nifty class method on it,


511
00:24:46,856 --> 00:24:48,396
Tab View Item With
View Controller.


512
00:24:48,736 --> 00:24:52,166
So you could take any generic
view controller that you have


513
00:24:52,506 --> 00:24:54,966
and you can create a
default tab view controller


514
00:24:55,446 --> 00:24:57,356
for it using this method.


515
00:24:57,416 --> 00:25:01,506
And what this does is it doesn't
just create a generic tab


516
00:25:01,506 --> 00:25:01,956
view item.


517
00:25:01,956 --> 00:25:05,476
It tries to populate it with
the appropriate information


518
00:25:05,476 --> 00:25:07,156
from the child view controller.


519
00:25:07,766 --> 00:25:09,246
For example, it will
take the title


520
00:25:09,426 --> 00:25:10,806
of your child view
controller and set


521
00:25:10,806 --> 00:25:12,396
that as the label of
the tab view item.


522
00:25:12,896 --> 00:25:14,936
And we'll also take
it a step further.


523
00:25:14,936 --> 00:25:18,936
As Mike showed in the demo,
we look at the class name


524
00:25:18,936 --> 00:25:21,586
of the view controller and we
try and find imagery sources


525
00:25:21,586 --> 00:25:24,176
with that same name or we
prefer if it's the name


526
00:25:24,176 --> 00:25:27,536
with a dash tab view item
and we'll automatically set


527
00:25:27,536 --> 00:25:31,856
that image as the image
as the NSTabView item.


528
00:25:32,426 --> 00:25:35,356
So you can get the label and
the item just automatically


529
00:25:35,356 --> 00:25:35,686
that way.


530
00:25:38,056 --> 00:25:40,576
TabViewController has some
additional properties,


531
00:25:40,576 --> 00:25:41,536
which are pretty interesting.


532
00:25:41,536 --> 00:25:43,816
There's the tab style
as Mike showed you.


533
00:25:43,816 --> 00:25:48,066
We have segmented control
on top and on bottom.


534
00:25:48,496 --> 00:25:50,976
So the tabs are now drawn
with the segmented control.


535
00:25:50,976 --> 00:25:52,886
We'll touch on that a
little bit more real soon.


536
00:25:53,176 --> 00:25:54,706
There's the toolbar style.


537
00:25:55,026 --> 00:25:57,126
That's all you have to do.


538
00:25:57,126 --> 00:25:58,906
You set the tab style
to toolbar.


539
00:25:59,336 --> 00:26:01,166
The TabViewController
will create the toolbar


540
00:26:01,166 --> 00:26:03,536
on your behalf and
place it in the window


541
00:26:03,536 --> 00:26:05,166
as the toolbar; you're done.


542
00:26:05,746 --> 00:26:08,386
And then there's unspecified,
which is really interesting,


543
00:26:08,386 --> 00:26:11,266
and I'll get to that a little
bit more in just a second.


544
00:26:11,776 --> 00:26:15,416
As I talked about, there
is a segmented control


545
00:26:15,416 --> 00:26:17,066
that now displays the tabs.


546
00:26:17,986 --> 00:26:19,486
You can get the segmented
control.


547
00:26:19,706 --> 00:26:22,126
You can supply your own
segmented control subclass


548
00:26:22,126 --> 00:26:25,576
if you want and draw them in
your subclass however you wish.


549
00:26:27,956 --> 00:26:32,086
But if you set the tab
style to unspecified,


550
00:26:32,706 --> 00:26:35,196
what you can do then is go


551
00:26:35,196 --> 00:26:37,926
and apply your own
layout constraints


552
00:26:38,056 --> 00:26:39,406
to the segmented control


553
00:26:39,686 --> 00:26:42,786
and have the segmented control
appear where you want it


554
00:26:42,786 --> 00:26:44,186
to appear and do
the layout yourself.


555
00:26:45,126 --> 00:26:49,246
So you have much more customized
ability with tab view controller


556
00:26:49,246 --> 00:26:50,266
than you've had previously.


557
00:26:51,676 --> 00:26:53,226
There are some transition
options.


558
00:26:53,546 --> 00:26:56,436
Automatically by default
we set it to crossfade.


559
00:26:56,436 --> 00:26:59,296
Mike showed you this in
the demo as he changed tabs


560
00:26:59,296 --> 00:27:00,656
in our preferences UI.


561
00:27:00,776 --> 00:27:02,736
It did this nice
little crossfade effect.


562
00:27:03,416 --> 00:27:06,066
You can set it to none
and have the old style


563
00:27:06,066 --> 00:27:06,956
where it just switches.


564
00:27:07,316 --> 00:27:09,266
We have various sliding
directions:


565
00:27:09,926 --> 00:27:11,266
up, down, left and right.


566
00:27:11,496 --> 00:27:14,616
You can combine directions
that are on different axes,


567
00:27:14,616 --> 00:27:16,356
so you can combine
an up with a left,


568
00:27:16,626 --> 00:27:18,596
but you can't combine
an up with a down.


569
00:27:18,596 --> 00:27:21,206
That wouldn't actually
animate anything,


570
00:27:21,206 --> 00:27:22,526
so we don't let you do that.


571
00:27:23,176 --> 00:27:24,646
I do really want to
point out, though,


572
00:27:24,646 --> 00:27:27,056
slide forward and
slide backwards.


573
00:27:28,556 --> 00:27:30,666
These are really important if
you're going to do any sort


574
00:27:30,666 --> 00:27:32,376
of horizontal sliding
because they work


575
00:27:32,726 --> 00:27:35,236
in the appropriate direction
for your users language.


576
00:27:35,236 --> 00:27:37,736
So they work correctly in
right to left languages.


577
00:27:37,736 --> 00:27:41,446
They will go the right way and
they will go the correct way


578
00:27:41,446 --> 00:27:43,496
for left to right
languages as well.


579
00:27:43,496 --> 00:27:46,176
And you just let AppKit worry


580
00:27:46,176 --> 00:27:47,606
about what the right
directions are


581
00:27:48,216 --> 00:27:49,276
and we'll handle that for you.


582
00:27:49,836 --> 00:27:52,676
As I mentioned,


583
00:27:52,676 --> 00:27:56,016
NSTabViewController
manages the tab view item.


584
00:27:56,016 --> 00:27:58,716
In NSTabView it owns a tab view.


585
00:28:01,286 --> 00:28:04,716
So it's important that you let
NSTabViewController manage it


586
00:28:04,716 --> 00:28:05,176
for you.


587
00:28:05,176 --> 00:28:07,126
You don't really need to
get to it and change it.


588
00:28:07,126 --> 00:28:10,236
There are a few properties,
very few properties,


589
00:28:10,506 --> 00:28:12,906
that you can modify directly
to get to the tab view.


590
00:28:13,976 --> 00:28:15,336
If you find you really
need to do this,


591
00:28:15,336 --> 00:28:16,916
look at the NSTabViewController
header.


592
00:28:16,916 --> 00:28:19,656
It specifies exactly
what you can set,


593
00:28:20,026 --> 00:28:22,646
but in general let's have
your controller manage it.


594
00:28:23,266 --> 00:28:24,286
I also want to point out here


595
00:28:24,286 --> 00:28:28,586
that as NSTabViewController
is a subclass


596
00:28:28,586 --> 00:28:29,996
of view controller,
it has a view.


597
00:28:29,996 --> 00:28:32,036
The view is not the tab view.


598
00:28:32,956 --> 00:28:35,786
Tab view controller has a
view that contains a tab view


599
00:28:35,786 --> 00:28:38,916
and a segmented control
and perhaps other views


600
00:28:38,916 --> 00:28:41,316
as tab view controller
needs to manage it.


601
00:28:41,416 --> 00:28:46,436
So let tab view controller
handle it for you.


602
00:28:46,636 --> 00:28:48,286
When you are using
the toolbar style,


603
00:28:50,096 --> 00:28:53,006
NSTabViewController is the
delegate of the toolbar.


604
00:28:53,386 --> 00:28:56,996
And you might want to
override these methods.


605
00:28:56,996 --> 00:28:58,726
Create a subclass of
NSTabViewController


606
00:28:58,726 --> 00:29:00,246
and override these
delegate methods.


607
00:29:02,026 --> 00:29:05,276
Perhaps you want to do something
like add some additional items


608
00:29:05,276 --> 00:29:08,496
to the toolbar that aren't tabs.


609
00:29:09,036 --> 00:29:10,546
For example, a search
field, right.


610
00:29:11,096 --> 00:29:13,076
If you want a search field,
then your purpose is UI.


611
00:29:13,766 --> 00:29:15,756
Search isn't a tab,
so you will need


612
00:29:15,756 --> 00:29:18,046
to override these
toolbar delegate methods


613
00:29:18,256 --> 00:29:20,456
and insert the search
field yourself.


614
00:29:20,456 --> 00:29:23,536
I do want to point out that
these have the nice NS required


615
00:29:23,536 --> 00:29:27,746
Super attribute on them, so if
you do override these methods,


616
00:29:27,746 --> 00:29:29,966
you must call Super, and
the compiler will help you


617
00:29:29,966 --> 00:29:31,046
remember that.


618
00:29:32,496 --> 00:29:33,866
So that's tab view controller.


619
00:29:34,026 --> 00:29:35,466
Let's take a look
at another example.


620
00:29:35,466 --> 00:29:37,696
We're introducing split
view controller in Yosemite.


621
00:29:38,086 --> 00:29:41,376
It manages it in a split view


622
00:29:41,796 --> 00:29:43,946
and it does lazy
loading of views.


623
00:29:44,796 --> 00:29:46,816
And it requires auto layout.


624
00:29:47,306 --> 00:29:50,826
It does all of the managing of
the splits and how they move


625
00:29:50,826 --> 00:29:52,736
with window resizing,
all view, auto layout.


626
00:29:52,736 --> 00:29:55,406
It would just start adding
constraints to your window.


627
00:29:55,876 --> 00:29:58,436
But we have all migrated
our apps forward


628
00:29:58,436 --> 00:30:00,616
to using auto layout, so that
won't be a problem, right?


629
00:30:04,926 --> 00:30:07,406
So in a split view
controller today on Mavericks


630
00:30:07,706 --> 00:30:12,136
in a split view it
manages two or more views.


631
00:30:12,136 --> 00:30:13,636
It has a divider in there.


632
00:30:14,386 --> 00:30:17,576
And in a split view controller,
logically it's now laid


633
00:30:17,576 --> 00:30:19,736
out like this, in a split
view controller owns.


634
00:30:20,096 --> 00:30:23,376
And in a split view it manages a
collection of split view items.


635
00:30:23,576 --> 00:30:25,786
Those items have some
nice new properties.


636
00:30:26,086 --> 00:30:29,696
And a split view item is
a completely new class


637
00:30:29,696 --> 00:30:30,376
in Yosemite.


638
00:30:31,096 --> 00:30:32,696
Of course it has
a view controller,


639
00:30:32,696 --> 00:30:34,046
which will lazily load its view.


640
00:30:34,296 --> 00:30:37,086
And you can set property such
as collapse, can't collapse


641
00:30:37,086 --> 00:30:38,246
and the holding priority.


642
00:30:38,476 --> 00:30:40,876
Mike showed you how important
the holding priority is.


643
00:30:40,876 --> 00:30:46,326
These were properties
that you used to have


644
00:30:46,326 --> 00:30:48,946
to override the delegate for
split view and be the delegate


645
00:30:48,946 --> 00:30:49,806
for the split view controller.


646
00:30:49,806 --> 00:30:50,866
You don't need to
do that anymore.


647
00:30:50,866 --> 00:30:52,126
You can just set
these properties right


648
00:30:52,126 --> 00:30:53,706
on the split view item.


649
00:30:53,766 --> 00:30:55,466
So it's a lot easier
to do it that way.


650
00:30:55,656 --> 00:30:58,476
And of course you can create
a default split view item


651
00:30:58,476 --> 00:30:59,996
if you have some
child view controller.


652
00:31:01,706 --> 00:31:07,536
Pro Tip: If you want to
animate a collapsible split,


653
00:31:08,006 --> 00:31:10,856
you use the animator proxy
on the split view item.


654
00:31:10,856 --> 00:31:13,606
So you see split view item
animator, set collapsed yes


655
00:31:13,606 --> 00:31:17,746
or no, and the collapse or
expansion animation will happen


656
00:31:17,746 --> 00:31:19,836
for you in a nice,
animated fashion.


657
00:31:22,256 --> 00:31:23,656
Some additional properties.


658
00:31:23,816 --> 00:31:25,636
Since we manage a
collection of split view items


659
00:31:25,636 --> 00:31:27,426
of course you can get to
the split view items array.


660
00:31:28,026 --> 00:31:30,686
The obligatory add and
certain remove split view item,


661
00:31:31,286 --> 00:31:34,246
and if you have a child view
controller you can find its


662
00:31:34,246 --> 00:31:37,996
associated split view item
by asking split view item


663
00:31:37,996 --> 00:31:38,726
for a view controller.


664
00:31:39,266 --> 00:31:44,706
Now that we've taken a look
at a couple of examples


665
00:31:44,706 --> 00:31:47,086
that we're doing in
AppKit, I want to point out


666
00:31:47,086 --> 00:31:49,416
and stress the pattern
we're using here.


667
00:31:49,866 --> 00:31:52,086
And this is the pattern that
we think you should use as well


668
00:31:52,086 --> 00:31:54,286
if you find the need to write
your own containment style


669
00:31:54,286 --> 00:31:55,106
of view controllers.


670
00:31:55,446 --> 00:31:57,986
There's your containment
view controller that's going


671
00:31:57,986 --> 00:31:59,336
to manage some collection
of items


672
00:31:59,336 --> 00:32:01,606
so those items can have the
specific information associated


673
00:32:01,606 --> 00:32:02,036
with that.


674
00:32:02,606 --> 00:32:05,226
The item will go ahead
and own a view controller


675
00:32:05,226 --> 00:32:07,196
that will then be able
to lazily load the view.


676
00:32:07,646 --> 00:32:09,996
If you're familiar with iOS,
this is a little different


677
00:32:09,996 --> 00:32:13,226
than iOS, where iOS you
have to have a special type


678
00:32:13,226 --> 00:32:15,086
of view controller
subclass that then may


679
00:32:15,086 --> 00:32:17,646
or may not own a
special type of item.


680
00:32:18,296 --> 00:32:21,016
We've inverted that
on OS X Yosemite,


681
00:32:21,016 --> 00:32:22,856
and one of the reasons is


682
00:32:22,856 --> 00:32:25,326
that now your child view
controllers can be a lot


683
00:32:25,326 --> 00:32:26,096
more generic.


684
00:32:26,496 --> 00:32:31,206
And this is the pattern that
we're using on OS X Yosemite


685
00:32:31,206 --> 00:32:33,126
and the pattern we
suggest you follow as well.


686
00:32:34,286 --> 00:32:39,706
There are some generic container
API with view controllers


687
00:32:39,706 --> 00:32:42,346
that are exposed at the
NSViewController level.


688
00:32:42,576 --> 00:32:45,576
You can get an array of child
view controllers and add-ins


689
00:32:45,576 --> 00:32:47,016
or remove child view
controllers.


690
00:32:48,136 --> 00:32:52,106
But these APIs only manage
the collection itself.


691
00:32:52,506 --> 00:32:55,516
It's up to the subclass to
know what to do with them.


692
00:32:55,516 --> 00:32:58,216
Like tab view controller will
go ahead and create another tab,


693
00:32:58,216 --> 00:33:00,196
but won't show the views
or load the views yet,


694
00:33:00,386 --> 00:33:01,856
where split view
controller will go ahead


695
00:33:01,856 --> 00:33:03,526
and immediately add
it as another split.


696
00:33:03,916 --> 00:33:06,936
So it becomes important
to do the right thing


697
00:33:07,136 --> 00:33:08,326
in your subclass there.


698
00:33:09,156 --> 00:33:13,466
But now, with these generic
APIs, you can dig down and look


699
00:33:13,466 --> 00:33:15,006
at the child view
controllers associated


700
00:33:15,006 --> 00:33:15,846
with the view controller.


701
00:33:16,106 --> 00:33:18,436
Or if you have a child view
controller, you can go back up


702
00:33:18,656 --> 00:33:21,966
and find its parent and as a
child view controller you can


703
00:33:21,966 --> 00:33:24,686
just call on it, remove
from parent view controller,


704
00:33:24,916 --> 00:33:25,996
and that's the easiest way


705
00:33:26,326 --> 00:33:30,236
to take apart the
parent/child relationship there.


706
00:33:30,836 --> 00:33:35,586
In view controller we have
this method transition


707
00:33:35,636 --> 00:33:37,186
from view controller
to view controller,


708
00:33:37,566 --> 00:33:40,016
which will do a nice animated
transition on your behalf.


709
00:33:40,266 --> 00:33:42,906
This is what we have
with tab view controller


710
00:33:42,906 --> 00:33:44,326
so it's the exact same options.


711
00:33:44,326 --> 00:33:47,666
You can do none with a crossfade
or slide in various directions.


712
00:33:48,156 --> 00:33:51,586
And that's containment
in view controllers.


713
00:33:54,596 --> 00:33:56,506
There's another type
of relationship


714
00:33:56,506 --> 00:33:57,606
with view controllers


715
00:33:57,606 --> 00:34:02,746
and storyboards called
triggered segues.


716
00:34:04,176 --> 00:34:06,916
These triggered segues
perform a presentation.


717
00:34:06,976 --> 00:34:10,565
And a presentation needs to have
an identifier so we can find it


718
00:34:10,565 --> 00:34:12,186
in a storyboard if
needed manually.


719
00:34:12,746 --> 00:34:15,156
And it's to have some
source view controller.


720
00:34:15,496 --> 00:34:17,826
For example, the
canvas view controller


721
00:34:17,826 --> 00:34:20,585
in this case is our source
to do our shape picker popup.


722
00:34:21,266 --> 00:34:23,516
A destination controller,
which is going


723
00:34:23,516 --> 00:34:27,045
to be our shape picker
controller, and then a style.


724
00:34:27,255 --> 00:34:28,565
And as we did in the demo,


725
00:34:28,755 --> 00:34:33,565
the segue style was a
popover and this was a segue.


726
00:34:33,565 --> 00:34:35,366
Depending on the style,


727
00:34:35,366 --> 00:34:37,206
there might be some other
attributes you need to set up.


728
00:34:37,696 --> 00:34:40,696
For example, with a popover you
need to set up the anchor view.


729
00:34:40,866 --> 00:34:43,315
Since we had dragged it
directly from the Plus button,


730
00:34:43,636 --> 00:34:45,536
the anchor view was
wired up automatically,


731
00:34:45,716 --> 00:34:46,896
but you could actually go in IB


732
00:34:46,896 --> 00:34:48,916
and set the anchor
view for the popover.


733
00:34:49,275 --> 00:34:52,436
As Mike pointed out,
the one line of code


734
00:34:52,436 --> 00:34:55,025
that you really need to write
in the source view controller --


735
00:34:55,025 --> 00:34:56,815
so in this case our
canvas view controller --


736
00:34:56,896 --> 00:34:58,576
in your source view
controller you need


737
00:34:58,576 --> 00:35:00,746
to override Prepare For Segue.


738
00:35:00,746 --> 00:35:04,246
From the segue you can get
the identifier, so if you have


739
00:35:04,246 --> 00:35:06,896
to deal with more than one
segue you can switch on that,


740
00:35:07,456 --> 00:35:11,166
get the destination controller
and wire up anything that needs


741
00:35:11,166 --> 00:35:13,236
to be wired up so that you
can have the proper lines


742
00:35:13,236 --> 00:35:16,206
of communication or you can get
to the right model data objects


743
00:35:16,206 --> 00:35:19,376
and show the UI with
the correct information.


744
00:35:19,886 --> 00:35:23,276
Often, this is the
represented object


745
00:35:23,276 --> 00:35:25,376
and you can just set the
destination controller


746
00:35:25,376 --> 00:35:26,836
that represented object
to the right thing.


747
00:35:29,136 --> 00:35:31,966
There are a couple of
additional segue APIs


748
00:35:32,406 --> 00:35:35,046
that you might find
useful: shape perform segue


749
00:35:35,046 --> 00:35:36,226
with identifier sender.


750
00:35:36,226 --> 00:35:40,016
This will give you
a chance to step in


751
00:35:40,016 --> 00:35:43,306
and dynamically prevent a segue
from performing if you need


752
00:35:43,306 --> 00:35:44,526
to determine that pretty late.


753
00:35:44,966 --> 00:35:47,546
And if you determine that
here, we will stop the segue


754
00:35:47,546 --> 00:35:49,046
from really getting
off the ground.


755
00:35:50,876 --> 00:35:53,866
Then you can call perform
segue with identifier,


756
00:35:53,936 --> 00:35:58,766
identifier sender and we will
find the segue in the storyboard


757
00:35:58,766 --> 00:36:02,906
for you and call perform,
which will flow back


758
00:36:03,096 --> 00:36:05,036
through shape perform
segue with identifier


759
00:36:05,036 --> 00:36:07,826
and of course call prepare
for segue and you could wire


760
00:36:07,826 --> 00:36:08,856
up the represented object.


761
00:36:08,856 --> 00:36:13,016
If you get nothing else out
of this whole talk today,


762
00:36:13,116 --> 00:36:18,206
it's with your segues you need
to implement Prepare For Segue


763
00:36:18,206 --> 00:36:21,346
in the source controller, wire
up your represented object


764
00:36:21,346 --> 00:36:24,416
or whatever pieces of
information that you need


765
00:36:24,566 --> 00:36:29,676
to bridge between the two,
and then let the segue happen.


766
00:36:29,716 --> 00:36:33,296
Using Interface Builder
to wire up your segues


767
00:36:33,296 --> 00:36:35,496
and do it all visually,
it's the easiest way to go.


768
00:36:35,496 --> 00:36:36,656
It's our recommended approach.


769
00:36:37,746 --> 00:36:39,366
We can take apart the
engine a little bit more


770
00:36:39,366 --> 00:36:42,076
and we could look at the
manual API that's going


771
00:36:42,076 --> 00:36:44,046
on under the hood that you
can also call directly.


772
00:36:44,046 --> 00:36:45,886
So we're going ahead and
we're exposing this API.


773
00:36:46,996 --> 00:36:48,826
You can ask source
view controller


774
00:36:48,826 --> 00:36:50,966
to present some other
controller as a sheet,


775
00:36:51,446 --> 00:36:54,006
as a modal window,
or as a popover.


776
00:36:54,626 --> 00:36:59,026
And as the destination
controller, the sheet


777
00:36:59,026 --> 00:37:00,826
or the modal window,
the controller


778
00:37:00,826 --> 00:37:04,156
that is being presented,
you dismiss yourself


779
00:37:04,156 --> 00:37:05,576
by calling dismiss controller


780
00:37:05,846 --> 00:37:10,126
and AppKit will do whatever the
appropriate thing to do there is


781
00:37:10,126 --> 00:37:12,556
and dismiss the controller
for you.


782
00:37:12,996 --> 00:37:14,576
This is incredibly powerful


783
00:37:14,576 --> 00:37:16,906
because it allows your
destination controllers


784
00:37:17,156 --> 00:37:19,316
to be a lot more
modular and reusable.


785
00:37:19,976 --> 00:37:25,626
For example, when Mike and I
were first doing this project


786
00:37:25,626 --> 00:37:27,276
in IB, it was like,
"Oh," you know,


787
00:37:27,376 --> 00:37:28,286
"sheet's the first
thing in there.


788
00:37:28,286 --> 00:37:30,536
We need to have our picker
come down as a sheet."


789
00:37:31,046 --> 00:37:33,476
And we wired up present
view controller


790
00:37:33,476 --> 00:37:35,526
as sheet, and that was easy.


791
00:37:35,526 --> 00:37:40,346
Then we said, "No, no, it'll
look much nicer as a popover.


792
00:37:40,346 --> 00:37:40,986
That'd be cool, yeah."


793
00:37:41,806 --> 00:37:44,796
So the only thing we had to
change was the segue type


794
00:37:44,866 --> 00:37:46,986
to present it as a popover.


795
00:37:46,986 --> 00:37:49,806
Our destination controller just
calls it dismiss controller.


796
00:37:49,806 --> 00:37:52,666
It didn't need to know
how to dismiss a popover


797
00:37:53,186 --> 00:37:54,916
or that dismissing a sheet


798
00:37:54,916 --> 00:37:57,516
in raw code is actually
dramatically different.


799
00:37:57,916 --> 00:38:00,256
Just go ahead and let
NSViewController handle


800
00:38:00,256 --> 00:38:02,676
that on your behalf and it'll
do the appropriate thing.


801
00:38:03,216 --> 00:38:08,826
We can actually go yet
one more level deeper,


802
00:38:09,586 --> 00:38:12,336
and there's at the
lowest level present view


803
00:38:12,336 --> 00:38:13,716
controller animator.


804
00:38:13,856 --> 00:38:17,766
And there is a view controller
presentation animator protocol,


805
00:38:17,886 --> 00:38:21,136
and we're publishing
this as well in Yosemite.


806
00:38:21,726 --> 00:38:24,296
So you can create your own
presentation animator object,


807
00:38:24,536 --> 00:38:26,946
implement the protocol, which
is just these two methods,


808
00:38:27,486 --> 00:38:30,016
animate presentation of view
controller from view controller.


809
00:38:30,606 --> 00:38:34,396
So when you do a presentation,
we will take the instance


810
00:38:34,396 --> 00:38:37,516
of your animator object,
called animate presentation


811
00:38:37,516 --> 00:38:38,896
of view controller
from view controller,


812
00:38:39,196 --> 00:38:41,516
and then you can handle the
animation however you want.


813
00:38:41,916 --> 00:38:46,306
Once the user is finished and
dismiss controller is called,


814
00:38:46,306 --> 00:38:48,226
it will bubble up
to the right place.


815
00:38:48,536 --> 00:38:50,856
We will take that same
instance that we had before.


816
00:38:50,856 --> 00:38:51,586
We've stashed it.


817
00:38:51,586 --> 00:38:53,326
We will call animate dismissal.


818
00:38:53,486 --> 00:38:55,916
The animate dismissal view
controller from view controller.


819
00:38:56,256 --> 00:38:59,076
You're now responsible for doing
any dismissal animation however


820
00:38:59,076 --> 00:39:04,136
you see fit, and once we return
from that we will go ahead


821
00:39:04,296 --> 00:39:05,996
and release the animator object.


822
00:39:08,816 --> 00:39:10,086
So that's view controllers.


823
00:39:10,086 --> 00:39:12,136
There's a lot of new
API in view controllers.


824
00:39:12,266 --> 00:39:14,056
It's really powerful.


825
00:39:14,286 --> 00:39:16,456
We can't wait to see what
you are going to do with it.


826
00:39:16,456 --> 00:39:17,696
It's going to be a lot of fun.


827
00:39:18,766 --> 00:39:19,636
So let's move forward and talk


828
00:39:19,636 --> 00:39:22,256
about window controllers a
little bit and how they fit


829
00:39:22,256 --> 00:39:26,206
in with this large
collection of view controllers


830
00:39:26,206 --> 00:39:27,886
that we're going to be
adding to our applications.


831
00:39:29,256 --> 00:39:30,496
So let's just look at some


832
00:39:30,496 --> 00:39:32,196
of the new API we have
in window controller.


833
00:39:32,196 --> 00:39:33,096
There's just a little bit.


834
00:39:33,876 --> 00:39:36,486
Namely, there is a
content view controller,


835
00:39:36,776 --> 00:39:38,076
and this is a requirement.


836
00:39:38,486 --> 00:39:40,876
And when you're wiring up your
storyboard, you need to set


837
00:39:40,876 --> 00:39:43,776
up a content view controller
to your window controller.


838
00:39:44,606 --> 00:39:48,146
NSWindow also has a content view
controller property that's new


839
00:39:48,146 --> 00:39:48,476
on it.


840
00:39:48,936 --> 00:39:51,576
And what happens is when window
controller lazily loads the


841
00:39:51,576 --> 00:39:54,326
window, it sets the windows
content view controller


842
00:39:54,326 --> 00:39:55,796
to be the content
view controller


843
00:39:56,456 --> 00:39:58,966
that the window controller
has associated with it.


844
00:39:59,466 --> 00:40:02,276
Of course, like view controller,
you can also get the storyboard


845
00:40:02,276 --> 00:40:03,536
that loaded the window
controller,


846
00:40:03,536 --> 00:40:04,906
if one loaded the
window controller,


847
00:40:04,906 --> 00:40:08,256
or it will return nil if your
window controller wasn't loaded


848
00:40:08,256 --> 00:40:09,106
from a storyboard.


849
00:40:09,926 --> 00:40:11,966
And of course window
controllers,


850
00:40:11,966 --> 00:40:14,066
like view controllers,
can be presented


851
00:40:14,256 --> 00:40:15,886
and you can call
dismiss controller


852
00:40:15,886 --> 00:40:18,376
on the window controller and
the right dismissal will happen.


853
00:40:21,036 --> 00:40:25,006
NSWindowController also
implements the segue protocol


854
00:40:25,006 --> 00:40:29,866
so that it can prepare for
segue and you can override that.


855
00:40:30,256 --> 00:40:32,736
You can ask it to perform
a segue with an identifier,


856
00:40:33,186 --> 00:40:35,806
and you can of course
override Should Perform Segue


857
00:40:35,806 --> 00:40:40,266
to do dynamic suppression
in rare instances.


858
00:40:43,116 --> 00:40:46,546
But what really does a window
controller responsible for now?


859
00:40:46,546 --> 00:40:48,336
Because we have these
view controllers


860
00:40:48,336 --> 00:40:50,866
and all your logic is leveling
way down in view controller.


861
00:40:50,866 --> 00:40:53,516
So your window controller
should just manage the window,


862
00:40:53,516 --> 00:40:55,536
you know, things like
should I really close


863
00:40:55,536 --> 00:40:56,766
when the Close button
was pressed?


864
00:40:57,206 --> 00:40:59,016
Manage the titlebar
and the toolbar,


865
00:40:59,016 --> 00:41:01,606
make sure that has the
appropriate look there.


866
00:41:02,956 --> 00:41:04,476
Manage the content
view controller.


867
00:41:04,476 --> 00:41:05,926
We're going to have a
content in the window,


868
00:41:05,926 --> 00:41:10,666
the window controller's going
to go ahead and manage that.


869
00:41:10,796 --> 00:41:13,846
Window controllers over
time has become a place


870
00:41:13,846 --> 00:41:16,106
where you put a lot
of view logic.


871
00:41:16,716 --> 00:41:21,406
It was a convenient place to
put view logic for various parts


872
00:41:21,406 --> 00:41:22,936
of your user interface.


873
00:41:23,366 --> 00:41:25,476
But now that we have
view controllers


874
00:41:25,476 --> 00:41:27,866
and a specified parent/child
relationship


875
00:41:27,866 --> 00:41:30,726
and a hierarchy here with
segues, you can move all


876
00:41:30,726 --> 00:41:34,406
of that unrelated logic
down to their appropriate


877
00:41:34,406 --> 00:41:35,246
view controllers.


878
00:41:35,346 --> 00:41:36,876
And now you have
a few controllers


879
00:41:36,876 --> 00:41:38,646
which are reusable modules,


880
00:41:39,046 --> 00:41:41,716
and they're more cohesive,
independent modules.


881
00:41:42,016 --> 00:41:46,576
And you don't have unrelated
code in your window controller


882
00:41:46,576 --> 00:41:47,496
that you don't need anymore.


883
00:41:47,496 --> 00:41:49,186
So your window controller
is a lot smaller


884
00:41:49,536 --> 00:41:51,086
and is a lot more
readable and maintainable.


885
00:41:51,246 --> 00:41:54,396
So that's window controllers.


886
00:41:54,726 --> 00:41:57,896
So let's talk a little bit
about gesture recognizers.


887
00:41:58,176 --> 00:41:59,956
I'm really excited about
gesture recognizers.


888
00:42:00,146 --> 00:42:04,906
I'm an event guy at heart, so I
like to play around with events.


889
00:42:05,566 --> 00:42:09,776
So we're introducing gesture
recognizers to OS X Yosemite.


890
00:42:09,776 --> 00:42:15,856
The API is nearly identical
to what it is on iOS.


891
00:42:16,486 --> 00:42:17,396
They're a lot of fun.


892
00:42:19,446 --> 00:42:21,386
But when you're looking
at it on the desktop,


893
00:42:22,306 --> 00:42:25,476
most gestures aren't
determined the same way


894
00:42:25,476 --> 00:42:26,566
that they are on iOS.


895
00:42:26,566 --> 00:42:28,326
On iOS, you have to
look at the raw touches


896
00:42:28,326 --> 00:42:29,596
and figure out what that means.


897
00:42:29,636 --> 00:42:33,136
If you do a pinch gesture
on the trackpad on OS X,


898
00:42:33,376 --> 00:42:36,686
the trackpad itself recognizes
that as a magnification


899
00:42:36,816 --> 00:42:38,506
and it sends magnification
events.


900
00:42:38,506 --> 00:42:40,506
So you don't have
to figure that out.


901
00:42:41,526 --> 00:42:44,366
But not everything
that we can recognize


902
00:42:44,366 --> 00:42:48,456
as a gesture is prerecognized
for us at the lower levels.


903
00:42:49,216 --> 00:42:51,286
For example, what is a click?


904
00:42:52,506 --> 00:42:54,946
You press on the
trackpad, which is going


905
00:42:54,946 --> 00:42:57,846
to emulate a mouse event,
or you press a mouse button,


906
00:42:57,846 --> 00:43:00,746
you get a mouse down event
followed by a mouse up event


907
00:43:00,746 --> 00:43:02,126
without any drags in between.


908
00:43:02,456 --> 00:43:05,476
So this is some different
events, and we can look


909
00:43:05,476 --> 00:43:08,376
at them all together
and combine them for you


910
00:43:08,376 --> 00:43:09,476
and go, "Oh, that's a click."


911
00:43:09,866 --> 00:43:11,026
So we can recognize a click.


912
00:43:12,036 --> 00:43:14,636
We can recognize that
independently and differently


913
00:43:14,636 --> 00:43:17,476
than something that's a
click, a drag, and a release;


914
00:43:17,726 --> 00:43:18,666
that's something else.


915
00:43:19,956 --> 00:43:22,526
NSGestureRecognizer
is really good


916
00:43:22,526 --> 00:43:24,896
in helping you disambiguate
user input.


917
00:43:25,456 --> 00:43:29,996
How good? Well, this is code
that you might've had to write


918
00:43:29,996 --> 00:43:31,476
if you had to figure
it out yourself.


919
00:43:31,476 --> 00:43:37,386
This is seven tracking
loops deep of [inaudible].


920
00:43:37,386 --> 00:43:41,186
And what this code is
trying to do is figure


921
00:43:41,186 --> 00:43:43,716
out is this a click,
a double click,


922
00:43:43,716 --> 00:43:45,106
a triple click, or a drag?


923
00:43:45,106 --> 00:43:46,696
And it's trying to
sort all of this out


924
00:43:46,696 --> 00:43:49,256
and all the logic that's
associated with it.


925
00:43:49,676 --> 00:43:51,336
Gesture recognizers
clean this all up


926
00:43:51,926 --> 00:43:54,826
and make it much more simpler
to disambiguate the user input,


927
00:43:54,966 --> 00:43:56,906
gives you hooks to tap
into there when you need


928
00:43:56,906 --> 00:44:00,476
to add some custom logic, and
it's much easier to maintain.


929
00:44:03,096 --> 00:44:05,906
Gesture recognizers are a really
good fit for view controllers.


930
00:44:07,596 --> 00:44:09,406
You really don't want to
have to override mouse


931
00:44:09,406 --> 00:44:10,796
down in your view controller.


932
00:44:10,796 --> 00:44:12,586
That's not something your
view controller should really


933
00:44:12,586 --> 00:44:13,706
be doing.


934
00:44:13,706 --> 00:44:16,296
And when you go to read your
code in your view controller,


935
00:44:16,296 --> 00:44:17,906
you're going to see mouse down
and you're going to have to try


936
00:44:17,906 --> 00:44:20,216
and figure out with
comments or by really looking


937
00:44:20,216 --> 00:44:23,866
at the code what is this
mouse down trying to do.


938
00:44:24,046 --> 00:44:25,926
View controllers have
a target action pair.


939
00:44:26,286 --> 00:44:28,846
It will recognize the full
click or the full drag for you,


940
00:44:28,846 --> 00:44:30,626
and now you can wire
that up to an action


941
00:44:30,626 --> 00:44:31,526
in your view controller.


942
00:44:31,806 --> 00:44:32,626
So instead of having mouse


943
00:44:32,626 --> 00:44:36,666
down you have Select
or you have Drag.


944
00:44:37,216 --> 00:44:38,896
And it's now obvious
in your code.


945
00:44:38,896 --> 00:44:40,686
It's much more readable
on what to do


946
00:44:41,026 --> 00:44:42,636
and it's partitioned out better.


947
00:44:43,036 --> 00:44:44,186
Much more maintainable code.


948
00:44:45,656 --> 00:44:47,776
Here's an example of
using gesture recognizers


949
00:44:47,776 --> 00:44:48,756
in place with code.


950
00:44:49,626 --> 00:44:51,866
This is alloc initting
a magnification


951
00:44:51,866 --> 00:44:52,736
gesture recognizer.


952
00:44:52,736 --> 00:44:54,346
You init the target
in the action.


953
00:44:54,756 --> 00:44:57,816
I want to point out a slight
difference here from iOS.


954
00:44:58,386 --> 00:45:00,236
On OS X, all of our controls


955
00:45:00,236 --> 00:45:02,586
and our menus have a
single target action pair.


956
00:45:02,806 --> 00:45:03,916
That's the pair down we use.


957
00:45:03,916 --> 00:45:05,316
That's the pair down
we're continuing to use


958
00:45:05,316 --> 00:45:06,626
with NSGestureRecognizer.


959
00:45:06,936 --> 00:45:08,426
That's a little bit
different than iOS.


960
00:45:09,486 --> 00:45:12,496
Once you have your gesture
recognize alloc initted,


961
00:45:12,746 --> 00:45:15,526
you go ahead and
set it on some view.


962
00:45:15,736 --> 00:45:17,566
Gesture recognizers need
to be attached to a view


963
00:45:17,566 --> 00:45:18,826
and recognized for that view.


964
00:45:19,906 --> 00:45:22,066
Optionally, you may
need to set the delegate


965
00:45:22,066 --> 00:45:24,376
of your gesture recognizer
to your view controller.


966
00:45:24,376 --> 00:45:26,076
Perhaps you need to
set up some more logic


967
00:45:26,076 --> 00:45:27,526
to help disambiguate
some things.


968
00:45:28,696 --> 00:45:32,166
Then you implement your action
method, Magnify in this case.


969
00:45:32,346 --> 00:45:33,776
The sender of the
action method is going


970
00:45:33,776 --> 00:45:34,936
to be the gesture recognizer.


971
00:45:35,466 --> 00:45:37,976
And you'll probably want
to switch off the state.


972
00:45:38,716 --> 00:45:42,566
So for Magnify you'll look
at it started, it began,


973
00:45:42,566 --> 00:45:43,856
you set up some initial state.


974
00:45:44,166 --> 00:45:46,326
You do your magnification
during the changes,


975
00:45:46,326 --> 00:45:48,376
and when it finally
ends, you go ahead


976
00:45:48,376 --> 00:45:52,096
and you commit your
changes to your data model.


977
00:45:52,366 --> 00:45:54,476
That way, with this
commit, when you do undo,


978
00:45:54,476 --> 00:45:55,986
you'll just get one undo instead


979
00:45:55,986 --> 00:45:57,486
of just part of the
magnification.


980
00:45:58,296 --> 00:46:01,626
Something like a click,
there is another state


981
00:46:01,626 --> 00:46:03,416
which is just recognized.


982
00:46:03,416 --> 00:46:06,016
So if there's not a recognizer
that goes through begin, change,


983
00:46:06,016 --> 00:46:10,356
ended because it's just a
single collection like a click,


984
00:46:10,356 --> 00:46:12,776
you could just check
the recognize state.


985
00:46:13,226 --> 00:46:16,206
The gesture recognizer
that we're exposing


986
00:46:16,206 --> 00:46:20,186
in Yosemite are the
Click gesture recognizer.


987
00:46:20,666 --> 00:46:21,956
This is a mouse down and up.


988
00:46:21,956 --> 00:46:25,206
You can set which button
to recognize or even chord


989
00:46:25,206 --> 00:46:26,376
of buttons to recognize.


990
00:46:26,966 --> 00:46:28,596
There's the pan gesture
recognizer,


991
00:46:29,116 --> 00:46:32,776
which is a mouse button
down, drag and release.


992
00:46:33,476 --> 00:46:38,446
And this is very similar to the
pan gesture recognizer on iOS,


993
00:46:38,486 --> 00:46:41,336
but on iOS, it's a
touch, move and release.


994
00:46:41,676 --> 00:46:42,576
And the equivalent of that


995
00:46:42,576 --> 00:46:44,126
on the desktop is
obviously the mouse:


996
00:46:44,666 --> 00:46:45,906
mouse down, move, release.


997
00:46:46,296 --> 00:46:47,696
And just like click
gesture recognizer,


998
00:46:47,696 --> 00:46:52,376
you can set which button to
recognize or chord of buttons.


999
00:46:52,776 --> 00:46:54,236
There's a press gesture
recognizer,


1000
00:46:54,236 --> 00:46:55,966
which is holding
the mouse button


1001
00:46:55,966 --> 00:46:57,796
down with a time component.


1002
00:46:58,396 --> 00:47:01,296
So a long press is another
way that we've said it,


1003
00:47:01,656 --> 00:47:03,126
but an NS Press Gesture
Recognizer,


1004
00:47:03,686 --> 00:47:04,816
click with the time component.


1005
00:47:05,306 --> 00:47:08,296
And then we have
magnification gesture recognizer


1006
00:47:08,296 --> 00:47:09,686
and rotation gesture recognizer.


1007
00:47:10,116 --> 00:47:12,676
I mentioned earlier
that magnification


1008
00:47:12,676 --> 00:47:14,876
and rotation are
already recognized for us


1009
00:47:14,876 --> 00:47:16,466
at the hardware level.


1010
00:47:17,076 --> 00:47:20,856
And that's true, but they can
still be bundled up inside


1011
00:47:20,856 --> 00:47:25,386
of gesture recognizer so that
you can get this nice target


1012
00:47:25,886 --> 00:47:31,016
action association with it and
it continues to fit in the model


1013
00:47:31,016 --> 00:47:33,406
with these other gesture
recognizers in your application


1014
00:47:33,406 --> 00:47:37,156
so you have a consistent use
of gestures inside your app.


1015
00:47:37,596 --> 00:47:40,136
And of course you can
also set the magnification


1016
00:47:40,136 --> 00:47:43,106
and rotation gesture
recognizers to work


1017
00:47:43,666 --> 00:47:46,656
at the same time simultaneously,
or you can have them where, no,


1018
00:47:46,656 --> 00:47:48,746
I only want to recognize
magnifications


1019
00:47:48,746 --> 00:47:50,406
or rotations one at a time.


1020
00:47:50,906 --> 00:47:53,496
So you can wire those up
with your various properties.


1021
00:47:53,766 --> 00:47:58,616
I do want to make one quick
aside on magnification


1022
00:47:58,616 --> 00:47:59,996
and rotation gestures.


1023
00:48:00,836 --> 00:48:03,266
The raw event, the magnification
and rotation events,


1024
00:48:03,436 --> 00:48:05,956
we've added the phase
property to those events,


1025
00:48:06,196 --> 00:48:09,646
so the events also
have a begin, changed,


1026
00:48:09,646 --> 00:48:11,556
and ended phases
associated with them.


1027
00:48:11,556 --> 00:48:13,506
So if you're looking
at the raw events,


1028
00:48:13,506 --> 00:48:16,686
you can determine there
are phases right there.


1029
00:48:17,586 --> 00:48:20,286
Event flow is really important
with gesture recognizers.


1030
00:48:20,766 --> 00:48:24,876
Let's look at mouse
press for an example.


1031
00:48:24,876 --> 00:48:27,666
In Mavericks it would work
like this: Mouse press goes


1032
00:48:27,666 --> 00:48:29,306
through NS Application
send event,


1033
00:48:29,406 --> 00:48:31,286
and if it doesn't
get consumed there,


1034
00:48:31,706 --> 00:48:32,816
send event will send it off


1035
00:48:32,816 --> 00:48:34,606
to the event observers,
if there are any.


1036
00:48:34,606 --> 00:48:37,616
If the event observers don't
consume it, it will flow back


1037
00:48:37,616 --> 00:48:40,286
up to send event and send
event will send it off


1038
00:48:40,286 --> 00:48:41,286
to the appropriate window.


1039
00:48:42,706 --> 00:48:45,006
That window send event
method is called.


1040
00:48:45,006 --> 00:48:47,556
It looks at the event and
figures out via hit testing


1041
00:48:47,556 --> 00:48:48,706
which view to send it to.


1042
00:48:49,036 --> 00:48:50,646
That view gets a
mouse down message.


1043
00:48:51,016 --> 00:48:53,966
If the view doesn't
consume the mouse down,


1044
00:48:54,066 --> 00:48:56,556
it bubbles up through the
responder chain as normal,


1045
00:48:56,896 --> 00:48:58,526
and whereas normal now


1046
00:48:58,526 --> 00:49:02,636
in Yosemite includes
your view controllers.


1047
00:49:03,136 --> 00:49:07,266
And gesture recognizers
are here.


1048
00:49:07,536 --> 00:49:10,846
Once the event is sent to the
window, NS Windows Send Event,


1049
00:49:10,986 --> 00:49:12,936
it will do the gesture
recognizing.


1050
00:49:13,296 --> 00:49:15,546
You might notice we have some
dashed arrows now instead


1051
00:49:15,546 --> 00:49:17,286
of solid arrows, and the reason


1052
00:49:17,286 --> 00:49:19,746
for that is gesture
recognizers might delay events.


1053
00:49:20,696 --> 00:49:23,566
Gesture recognizers
will take a pan,


1054
00:49:23,566 --> 00:49:24,886
for example, which is a drag.


1055
00:49:25,406 --> 00:49:28,226
You'll do a mouse down and
it goes, well, I'm not sure


1056
00:49:28,226 --> 00:49:30,166
if they're dragging yet or
not and we don't want any


1057
00:49:30,166 --> 00:49:32,856
of your other code
to start trying to go


1058
00:49:32,856 --> 00:49:35,596
into a tracking loop or do
anything with the down yet.


1059
00:49:35,596 --> 00:49:37,846
We want to wait till we know
for sure if it's a drag or not.


1060
00:49:38,496 --> 00:49:40,926
And so your gesture
recognizers can delay events.


1061
00:49:41,536 --> 00:49:44,636
And if they end up not consuming
them, then they will continue


1062
00:49:44,636 --> 00:49:46,106
to flow through the
system as normal.


1063
00:49:46,186 --> 00:49:49,186
What's really important
for you to understand


1064
00:49:49,186 --> 00:49:51,256
as developers here,
send event is a place


1065
00:49:51,256 --> 00:49:53,976
that is often overridden.


1066
00:49:54,226 --> 00:49:57,176
If you do override send event
in NS Application or NS Window,


1067
00:49:57,416 --> 00:49:58,666
if you consume events


1068
00:49:58,666 --> 00:50:01,116
that gesture recognizers have
already started to process


1069
00:50:01,116 --> 00:50:04,036
in that sequence, you could
really confuse your gesture


1070
00:50:04,036 --> 00:50:07,766
recognizer and then your app
will not work right at all.


1071
00:50:08,146 --> 00:50:10,536
So you need to be careful
about that and think about that


1072
00:50:10,536 --> 00:50:11,886
when you're using
gesture recognizers.


1073
00:50:12,226 --> 00:50:14,176
This also goes for
event observers.


1074
00:50:14,176 --> 00:50:15,366
If you add an event observer,


1075
00:50:15,536 --> 00:50:17,986
it can consume the events before
the gesture recognizer gets


1076
00:50:17,986 --> 00:50:18,276
to them.


1077
00:50:18,556 --> 00:50:21,786
And the gesture recognizer
really needs to have all of them


1078
00:50:21,786 --> 00:50:22,996
that belong in a
sequence together.


1079
00:50:25,396 --> 00:50:27,796
If you want to subclass
gesture recognizer you can.


1080
00:50:27,796 --> 00:50:28,686
We fully support that.


1081
00:50:28,686 --> 00:50:31,416
Check out the
nsgesturerecognizer.h file.


1082
00:50:31,766 --> 00:50:34,726
There's an NS subclass
use category.


1083
00:50:34,986 --> 00:50:36,406
This is where we've
put our category


1084
00:50:36,406 --> 00:50:40,206
for the additional methods that
subclassers need to worry about.


1085
00:50:40,706 --> 00:50:44,146
And you can write a subclass
and recognize a drag wiggle


1086
00:50:44,146 --> 00:50:46,466
as whatever you want
to recognize it to be.


1087
00:50:46,516 --> 00:50:49,586
I'm not going to go
into details here,


1088
00:50:50,046 --> 00:50:52,216
so if you want more information,
please come see me at one


1089
00:50:52,216 --> 00:50:54,436
of the labs, and I will be
more than happy to talk to you


1090
00:50:54,436 --> 00:50:55,436
about gesture recognizers.


1091
00:50:58,786 --> 00:51:01,626
So let's put this all together
a little bit, and let's go back


1092
00:51:01,626 --> 00:51:05,006
to our demo and let's
get that shape to move.


1093
00:51:05,776 --> 00:51:09,896
Mike couldn't get the shape
to move, but I think I can.


1094
00:51:10,096 --> 00:51:14,156
OK, so we'll run this
again real quick,


1095
00:51:14,386 --> 00:51:17,656
make sure we're all right back
in the same spot that we were.


1096
00:51:18,376 --> 00:51:22,106
We've added a shape and sure
enough we can't get it to move.


1097
00:51:23,486 --> 00:51:38,016
Well, I know that in the canvas
view controller I wrote a select


1098
00:51:38,016 --> 00:51:39,406
action method here and a drag


1099
00:51:39,406 --> 00:51:41,476
with gesture recognizer
action method here.


1100
00:51:41,966 --> 00:51:45,786
So I know that this
stuff exists.


1101
00:51:45,786 --> 00:51:47,646
They should be getting
called, so we'll need to figure


1102
00:51:47,646 --> 00:51:48,656
out why they're not
getting called.


1103
00:51:49,106 --> 00:51:52,266
And it's, you know, just like I
showed before, you just switch


1104
00:51:52,266 --> 00:51:53,986
on the state and you do
what you need to do there.


1105
00:51:54,526 --> 00:51:59,876
So let's go back into
our Storyboard and look


1106
00:51:59,876 --> 00:52:01,626
at our canvas view controller,


1107
00:52:02,226 --> 00:52:04,796
and there's the canvas
view controller.


1108
00:52:05,006 --> 00:52:06,266
My gesture recognizers
aren't there,


1109
00:52:06,266 --> 00:52:07,596
so let's go ahead and add some.


1110
00:52:08,436 --> 00:52:11,066
We'll quickly add a
pan gesture recognizer,


1111
00:52:11,186 --> 00:52:16,346
and we'll wire the pan gesture
recognizer up to the drag.


1112
00:52:17,126 --> 00:52:22,346
And we'll go ahead and add a
magnify gesture recognizer.


1113
00:52:23,626 --> 00:52:24,416
There you go.


1114
00:52:26,596 --> 00:52:27,396
There we are.


1115
00:52:28,736 --> 00:52:33,236
We'll add that and wire
that up to magnify.


1116
00:52:34,276 --> 00:52:36,946
And now it should be quite
obvious what code is going


1117
00:52:36,946 --> 00:52:37,576
to get run.


1118
00:52:39,016 --> 00:52:45,586
We run our app, add a shape,
and now we can drag it.


1119
00:52:45,586 --> 00:52:47,946
And we can do a pinch
and resize the shape


1120
00:52:48,326 --> 00:52:49,866
and we can add another one.


1121
00:52:49,866 --> 00:52:51,886
And they work independently
of each other.


1122
00:52:52,256 --> 00:52:54,476
And there we go.


1123
00:52:56,516 --> 00:53:02,326
[ Applause ]


1124
00:53:02,826 --> 00:53:07,506
View controllers
backing storyboards,


1125
00:53:08,046 --> 00:53:10,106
super-easy to design
your applications now.


1126
00:53:10,866 --> 00:53:13,916
Window controllers can
just control your window,


1127
00:53:13,916 --> 00:53:17,606
but they also have some nice new
API to work with storyboards.


1128
00:53:18,336 --> 00:53:22,606
Wire up your gestures
with gesture recognizers.


1129
00:53:22,956 --> 00:53:24,836
It's easier than ever,
it's a lot of fun.


1130
00:53:24,886 --> 00:53:27,476
Everything here is really great.


1131
00:53:27,476 --> 00:53:28,796
Can't wait to see
what you do with it.


1132
00:53:28,936 --> 00:53:31,636
For more information
you could see Jake.


1133
00:53:31,866 --> 00:53:34,606
He's over here up in the
front with a nice shirt.


1134
00:53:35,956 --> 00:53:40,416
Last night somebody
commented on his shoes,


1135
00:53:40,416 --> 00:53:42,656
so I figured I'd comment
on his shirt today.


1136
00:53:44,016 --> 00:53:46,596
Check out the "What's New
in OS X" documentation.


1137
00:53:46,906 --> 00:53:50,606
We're working like crazy
on the documentation


1138
00:53:50,606 --> 00:53:52,646
for View Controller, so
that is going to be coming.


1139
00:53:52,646 --> 00:53:54,406
It's going to be really nice.


1140
00:53:55,676 --> 00:53:58,456
Some related sessions,
check out the "What's New


1141
00:53:58,456 --> 00:53:59,216
in Interface Builder."


1142
00:53:59,216 --> 00:54:01,296
This and along with other
things are going to be covered.


1143
00:54:01,716 --> 00:54:02,756
I really want to point out


1144
00:54:02,756 --> 00:54:05,306
"Creating Modern Cocoa
Apps" on Thursday.


1145
00:54:05,996 --> 00:54:08,756
If you're just new to
writing apps on Mac OS X,


1146
00:54:09,016 --> 00:54:11,356
modern Cocoa apps will cover
view controllers a little bit,


1147
00:54:11,486 --> 00:54:13,886
but they'll cover a lot
of other technologies


1148
00:54:13,886 --> 00:54:16,256
that you should be also
implementing in your application


1149
00:54:16,586 --> 00:54:18,376
as an OS X application.


1150
00:54:18,896 --> 00:54:21,566
So thank you.


1151
00:54:21,566 --> 00:54:22,546
Enjoy the rest of
the conference.

