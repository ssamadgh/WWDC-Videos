1
00:00:00,506 --> 00:00:09,516
[ Silence ]


2
00:00:10,016 --> 00:00:13,000
[ Applause ]


3
00:00:13,816 --> 00:00:14,756
>> Kevin Lindeman:
Good morning everyone.


4
00:00:14,996 --> 00:00:17,046
Welcome to understanding
Source Control in Xcode.


5
00:00:17,476 --> 00:00:19,696
My name's Kevin Lindeman, I'm
an Xcode Software Engineer.


6
00:00:20,366 --> 00:00:26,176
So first off we have so
much new stuff in Xcode 5


7
00:00:26,446 --> 00:00:28,876
that we want you to take a look
at our session from last year,


8
00:00:29,096 --> 00:00:32,016
Source Control Management in
Xcode, to learn about some


9
00:00:32,016 --> 00:00:35,246
of the more basic integration
of Source Control in Xcode.


10
00:00:35,866 --> 00:00:37,436
It's all the same in Xcode 5.


11
00:00:37,956 --> 00:00:39,746
And that session in conjunction


12
00:00:39,746 --> 00:00:43,206
with this year's session will
give you the full picture of how


13
00:00:43,206 --> 00:00:45,016
to use Source Control in Xcode.


14
00:00:45,606 --> 00:00:49,146
So I'm going to start
off talking


15
00:00:49,146 --> 00:00:51,396
about the three C's
in Source Control.


16
00:00:52,496 --> 00:00:54,456
The first one is Confidence.


17
00:00:54,796 --> 00:00:57,726
Using Source Control in Xcode
gives you the confidence


18
00:00:57,726 --> 00:00:59,506
that you're committing
the right code.


19
00:01:00,396 --> 00:01:01,766
It also gives you the confidence


20
00:01:01,766 --> 00:01:03,066
that when you're
using branching,


21
00:01:03,286 --> 00:01:05,166
you're committing
to the right branch.


22
00:01:06,616 --> 00:01:08,606
Now using Source
Control also allows you


23
00:01:08,606 --> 00:01:11,556
to commit your changes
in smaller chunks


24
00:01:11,786 --> 00:01:15,116
so that you can go back in
history using the version editor


25
00:01:15,116 --> 00:01:18,546
or blame and see exactly
why a change happened,


26
00:01:18,866 --> 00:01:23,656
when it happened and by who
and maybe go back and run


27
00:01:23,656 --> 00:01:27,076
that version of the code instead
to try to find regressions.


28
00:01:27,636 --> 00:01:32,646
It also helps with
compartmentalization.


29
00:01:33,416 --> 00:01:36,306
Xcode has excellent
branch management


30
00:01:36,506 --> 00:01:39,496
so when you're working on a
potentially large feature,


31
00:01:39,856 --> 00:01:44,656
you can branch off of your main
code and iterate on that branch


32
00:01:44,846 --> 00:01:49,906
over time until you're ready
to make that your main branch


33
00:01:49,906 --> 00:01:52,936
and merge all of that
code into your main line.


34
00:01:57,076 --> 00:01:59,456
The third C is Collaboration.


35
00:02:00,086 --> 00:02:02,906
Now especially with our
integration with OS X server,


36
00:02:03,706 --> 00:02:06,296
Source Control becomes
an easy two-way street


37
00:02:06,296 --> 00:02:09,476
of pushing changes back and
forth to your coworkers so that


38
00:02:09,476 --> 00:02:12,366
when you make a change you
can give those changes easily


39
00:02:12,366 --> 00:02:15,856
to your coworkers so that you're
all always building the latest


40
00:02:15,986 --> 00:02:17,516
stuff in your project.


41
00:02:21,036 --> 00:02:24,646
So we've added a lot to
Source Control in Xcode 5.


42
00:02:25,656 --> 00:02:28,636
And the first thing is we're now
shipping the latest Subversion


43
00:02:28,636 --> 00:02:33,166
client, Subversion 1.7.


44
00:02:33,246 --> 00:02:36,226
We also have a much
improved checkout workflow


45
00:02:36,466 --> 00:02:37,716
that I think you'll really love.


46
00:02:38,366 --> 00:02:43,506
We've also got brand new
workspace centric workflows


47
00:02:43,756 --> 00:02:46,656
so there's no more running back
and forth between the workspace


48
00:02:47,076 --> 00:02:48,446
and the repository organizer.


49
00:02:49,016 --> 00:02:53,776
We also have deep integration
with the Xcode service


50
00:02:53,776 --> 00:02:58,036
on OS X server making really
easy so that when you start off


51
00:02:58,036 --> 00:03:01,036
with a new project, putting
that project under Git


52
00:03:01,036 --> 00:03:05,086
and automatically pushing that
project to your OS X server.


53
00:03:07,556 --> 00:03:11,186
We also have greater
customization using a new Source


54
00:03:11,186 --> 00:03:13,146
Control preference
pane allowing you


55
00:03:13,146 --> 00:03:14,866
to make Source Control
work with you.


56
00:03:14,866 --> 00:03:19,676
So let's talk about
Subversion 1.7.


57
00:03:20,376 --> 00:03:23,756
One of the key differences
compared to Subversion 1.6


58
00:03:23,756 --> 00:03:27,336
which we shipped in Xcode 4,
is that when you have a project


59
00:03:27,496 --> 00:03:30,586
like you see here
every folder inside


60
00:03:30,586 --> 00:03:33,906
of that project has
a .svn folder in it.


61
00:03:34,026 --> 00:03:36,136
Now if you're looking at that
project in Terminal or something


62
00:03:36,136 --> 00:03:39,026
that really clutters up
your folder structure.


63
00:03:40,276 --> 00:03:43,776
Subversion 1.7 when you
upgrade to it, it takes all


64
00:03:43,856 --> 00:03:50,126
of the .svn folders lower down
your file system and puts them


65
00:03:50,126 --> 00:03:53,446
up into the top level .svn
folder for your project.


66
00:03:54,296 --> 00:03:56,236
This makes it much more
similar to how a Git works.


67
00:03:56,886 --> 00:04:01,126
Now the first time
you open a project


68
00:04:01,126 --> 00:04:03,416
in Xcode 5 you'll
see this dialogue.


69
00:04:04,196 --> 00:04:07,616
It's asking you to upgrade
your project to Subversion 1.7.


70
00:04:07,616 --> 00:04:11,126
Now this will be handled
entirely by Xcode,


71
00:04:11,126 --> 00:04:12,306
you don't have to do anything.


72
00:04:12,646 --> 00:04:14,906
It's also entirely client side.


73
00:04:15,166 --> 00:04:17,565
It doesn't change
anything on your server.


74
00:04:17,976 --> 00:04:20,536
And each individual
team member can opt


75
00:04:20,536 --> 00:04:23,026
into upgrading to
Subversion 1.7.


76
00:04:23,816 --> 00:04:25,476
Now this is an important
distinction


77
00:04:25,726 --> 00:04:29,426
because Xcode 4 only
supports Subversion 1.6.


78
00:04:29,756 --> 00:04:31,226
So when you're going back


79
00:04:31,226 --> 00:04:34,046
and forth during the
developer previews of Xcode 5,


80
00:04:34,666 --> 00:04:38,546
you'll need to be using
Subversion 1.6 if you want


81
00:04:38,546 --> 00:04:40,106
to use Source Control
in Xcode 4.


82
00:04:41,036 --> 00:04:45,056
But we really do urge you to try
to upgrade because there's a lot


83
00:04:45,056 --> 00:04:47,606
of really great enhancements
in Xcode 5


84
00:04:47,746 --> 00:04:51,196
when you use Subversion 1.7.


85
00:04:51,366 --> 00:04:53,376
The first of those is
improved performance.


86
00:04:53,676 --> 00:04:58,796
Operations such as SV
and up are a lot faster.


87
00:04:59,046 --> 00:05:01,616
We've also added support for
blame for modified files.


88
00:05:01,996 --> 00:05:06,646
I'm sure you've been working in
Xcode, modified a file, haven't


89
00:05:06,646 --> 00:05:08,506
yet committed it yet
but then wondered,


90
00:05:08,506 --> 00:05:10,936
well who changed this line
over there and noticed


91
00:05:10,936 --> 00:05:13,536
that you couldn't look at
your locally modified version


92
00:05:13,536 --> 00:05:14,986
of that file in blame.


93
00:05:15,396 --> 00:05:17,216
Well now you can
with Subversion 1.7.


94
00:05:17,916 --> 00:05:21,996
That also has always
worked with Git.


95
00:05:22,396 --> 00:05:25,376
We also have this great new
feature called blame for line.


96
00:05:25,506 --> 00:05:27,386
It's a shortcut in
the standard editor.


97
00:05:27,736 --> 00:05:29,686
You don't even have to
go to the Version Editor


98
00:05:29,726 --> 00:05:32,996
into the blame submode to see
blame for your whole file.


99
00:05:33,326 --> 00:05:36,446
You can just say I'm curious
about what this line is,


100
00:05:36,596 --> 00:05:40,586
right click it in Git and
a great popover a view


101
00:05:40,586 --> 00:05:43,886
of who changed that line,
when it was changed, why,


102
00:05:44,256 --> 00:05:46,956
with quick shortcuts for opening
it in the full blame editor


103
00:05:47,266 --> 00:05:48,586
or into the comparison editor


104
00:05:48,586 --> 00:05:50,456
so you can see all the
changes in that file.


105
00:05:51,046 --> 00:05:55,416
It also highlights all of the
other lines in that source file


106
00:05:55,416 --> 00:05:58,286
that were modified
with the same commit.


107
00:06:01,076 --> 00:06:03,366
And also the command
line integration.


108
00:06:03,926 --> 00:06:06,676
When you install the Xcode 5
version of command line tools,


109
00:06:07,556 --> 00:06:10,426
all you will have access
to is Subversion 1.7.


110
00:06:11,056 --> 00:06:15,606
Subversion 1.7 cannot talk to
a Subversion 1.6 working copy


111
00:06:15,656 --> 00:06:19,266
until you upgrade and vice
versa, 1.6 cannot talk


112
00:06:19,266 --> 00:06:20,596
to a 1.7 working copy.


113
00:06:20,946 --> 00:06:23,386
But like I said, this
is entirely client side


114
00:06:23,676 --> 00:06:25,606
so you don't have to upgrade all


115
00:06:25,606 --> 00:06:27,936
of your working copies
right now.


116
00:06:30,776 --> 00:06:33,326
So moving onto this new
workspace Source Control.


117
00:06:36,296 --> 00:06:39,306
There's three things that
that takes into account.


118
00:06:39,436 --> 00:06:41,506
First is the new
accounts preference pane.


119
00:06:41,956 --> 00:06:44,196
Instead of setting up a
repository on the organizer,


120
00:06:44,486 --> 00:06:48,026
you can go to the accounts
preference pane and set up any


121
00:06:48,026 --> 00:06:50,196
of your accounts that would
have login credentials


122
00:06:50,326 --> 00:06:51,366
that Xcode will talk to.


123
00:06:52,146 --> 00:06:55,456
And there's also the
new Source Control menu.


124
00:06:56,726 --> 00:07:00,476
We've taken a lot of the
new features of Xcode 5


125
00:07:00,546 --> 00:07:02,186
and all the old ones
and put them


126
00:07:02,186 --> 00:07:03,556
into a top level menu for you.


127
00:07:05,276 --> 00:07:08,506
We've also got the
new checkout workflow.


128
00:07:09,036 --> 00:07:12,756
And so let's talk about
the accounts preferences.


129
00:07:13,396 --> 00:07:17,416
As I said this is the
single place for doing all


130
00:07:17,416 --> 00:07:18,486
of your credential management.


131
00:07:19,226 --> 00:07:21,346
You can set up Apple
IDs for setting


132
00:07:21,346 --> 00:07:22,716
up provisioning of your devices.


133
00:07:23,936 --> 00:07:26,706
You can also set up
Subversion servers and any


134
00:07:26,706 --> 00:07:31,216
of the credentials used
for those, Git remotes


135
00:07:31,766 --> 00:07:36,366
and OS X server accounts so
that you can get the OS X server


136
00:07:36,366 --> 00:07:37,306
integration in Xcode.


137
00:07:37,306 --> 00:07:41,306
Now let's talk about
the Source Control menu.


138
00:07:41,856 --> 00:07:44,456
This is great because we've
taken all the working copies


139
00:07:44,456 --> 00:07:47,046
that are part of your workspace
and put them at the top


140
00:07:47,046 --> 00:07:49,046
of the menu because
we know you want


141
00:07:49,046 --> 00:07:52,586
to know what Source Control
working copies you're using


142
00:07:52,586 --> 00:07:53,366
in your project.


143
00:07:54,426 --> 00:07:58,336
We've also added the ability to
show the current branch for each


144
00:07:58,336 --> 00:08:00,256
of those working
copies right there


145
00:08:00,256 --> 00:08:02,466
so you know what you
are committing to


146
00:08:02,466 --> 00:08:03,476
and what you're building.


147
00:08:03,476 --> 00:08:09,096
Under each of those
working copies is our branch


148
00:08:09,096 --> 00:08:09,996
management tools.


149
00:08:10,536 --> 00:08:16,116
You can also do on demand
upgrades here if you opted not


150
00:08:16,116 --> 00:08:17,406
to upgrade on workspace open.


151
00:08:17,986 --> 00:08:23,866
Then there's some of more
top level items like checkout


152
00:08:24,006 --> 00:08:30,876
for getting new Source Code,
commit, push, pull and update


153
00:08:31,536 --> 00:08:35,816
and a new workspace wide
history view which will take all


154
00:08:35,816 --> 00:08:39,846
of the working copies in your
project, show you the logs all


155
00:08:39,846 --> 00:08:41,866
in one list that
is also searchable.


156
00:08:41,866 --> 00:08:45,786
So now let's talk
about Checkout.


157
00:08:47,066 --> 00:08:50,596
As I said brand new look, a
lot easier to use as well.


158
00:08:51,436 --> 00:08:53,206
But it's also a lot
more powerful.


159
00:08:54,506 --> 00:08:59,026
We show recent projects that you
have open or checked out as well


160
00:08:59,026 --> 00:09:00,726
as recent repositories
that you have checked


161
00:09:00,726 --> 00:09:02,016
out from right there.


162
00:09:03,276 --> 00:09:04,776
We also have favorites.


163
00:09:05,036 --> 00:09:10,836
You can now star a repository or
project and have it always show


164
00:09:10,836 --> 00:09:12,196
up under the favorites tab.


165
00:09:14,756 --> 00:09:17,706
There's also the repositories
tab which will take all


166
00:09:17,706 --> 00:09:20,816
of the repositories you have set
up in the accounts preferences


167
00:09:21,156 --> 00:09:25,036
and list them here as well as
any repository that is hosted


168
00:09:25,036 --> 00:09:28,446
on your OS X server using
its Git integration.


169
00:09:29,036 --> 00:09:35,786
It will also show you browsing
a subversion repository


170
00:09:35,966 --> 00:09:36,846
when necessary.


171
00:09:38,256 --> 00:09:41,396
Xcode 5's checkout is way smart


172
00:09:41,466 --> 00:09:44,986
so it actually does subversion
branch auto discovery.


173
00:09:45,496 --> 00:09:49,156
So if you type in the
URL the Xcode can figure


174
00:09:49,156 --> 00:09:51,956
out what you might be checking
out, whether it's a branch


175
00:09:51,996 --> 00:09:54,736
or it knows that there's a
bunch of branches in there,


176
00:09:54,736 --> 00:09:56,646
it will just show you
that, you don't even need


177
00:09:56,646 --> 00:09:57,806
to browse your repository.


178
00:09:57,806 --> 00:10:00,496
But if you put in a URL
that's a little ambiguous


179
00:10:00,956 --> 00:10:03,766
such as sometimes if you have
a multiple projects hosted


180
00:10:03,766 --> 00:10:06,666
in a single repository and
you just give it the root URL


181
00:10:06,666 --> 00:10:09,836
to your repository, we can't
really tell exactly what you


182
00:10:09,836 --> 00:10:12,866
wanted to checkout just yet so
it will allow you to browse.


183
00:10:13,386 --> 00:10:15,916
Let's take a quick look
at this in the demo.


184
00:10:17,896 --> 00:10:21,986
So we have here the
Welcome window Xcode 5.


185
00:10:22,726 --> 00:10:26,136
First I wanted to show how to
easily create a new project


186
00:10:26,616 --> 00:10:29,136
or a new repository
account in Xcode.


187
00:10:29,886 --> 00:10:32,646
So I'm going to click the Xcode
menu and click preferences.


188
00:10:33,586 --> 00:10:36,516
And we see here I already have
a number of repositories set


189
00:10:36,516 --> 00:10:38,256
up as well as my OS X server.


190
00:10:39,086 --> 00:10:41,176
But I'm going to add a new
repository so I'm going


191
00:10:41,176 --> 00:10:43,776
to hit the plus button
and say add repository.


192
00:10:44,176 --> 00:10:47,096
It's asking me for the
address, I have a snippet


193
00:10:47,296 --> 00:10:53,246
that has a Git hub account in it
and so I'm going to click next.


194
00:10:53,366 --> 00:10:56,046
And now Xcode is verifying my
credentials to this repository


195
00:10:56,366 --> 00:10:59,486
and is now added as a repository
that I can checkout from.


196
00:11:00,746 --> 00:11:02,796
Now when I go back
to the Welcome window


197
00:11:02,906 --> 00:11:04,766
and select checkout
an existing project,


198
00:11:05,356 --> 00:11:08,856
we see that that repository
has now been added.


199
00:11:08,896 --> 00:11:13,026
I can also star any of these
repositories and have them show


200
00:11:13,026 --> 00:11:14,086
up in the favorite section.


201
00:11:15,326 --> 00:11:17,456
For now, I'm going to
check out a copy of WebKit.


202
00:11:18,456 --> 00:11:20,476
Now this is the root
URL to the repository


203
00:11:21,816 --> 00:11:24,486
but since there's only one
project on here it was able


204
00:11:24,486 --> 00:11:27,606
to automatically
discover the chunk folder,


205
00:11:27,606 --> 00:11:29,446
the branches folder
and the tags folder


206
00:11:29,876 --> 00:11:32,476
and just showed me the list of
branches I can checkout from.


207
00:11:33,416 --> 00:11:34,476
So I want to check out chunk.


208
00:11:35,466 --> 00:11:39,876
So I'm going to click next and
check that out to my desktop.


209
00:11:41,216 --> 00:11:43,766
So now Xcode is checking
out that working copy


210
00:11:45,096 --> 00:11:49,886
and when it's done it will
search through the Checkout


211
00:11:50,306 --> 00:11:52,916
and find automatically
any Xcode projects


212
00:11:52,916 --> 00:11:54,626
or workspaces and opens them.


213
00:11:54,896 --> 00:11:57,526
If there are more than
one, it'll let you choose


214
00:11:57,526 --> 00:11:58,476
which one you want to open.


215
00:12:00,426 --> 00:12:03,376
So since there's only one it
just showed me the workspace.


216
00:12:03,886 --> 00:12:04,856
And now we can take a look


217
00:12:04,856 --> 00:12:07,106
at the brand new Source
Control menu at the top here.


218
00:12:08,246 --> 00:12:11,786
When I click Source Control
we see the one working copy


219
00:12:11,916 --> 00:12:14,836
that is part of this workspace
and that I just checked


220
00:12:14,836 --> 00:12:17,346
out chunk and so the
current branch is chunk.


221
00:12:18,656 --> 00:12:21,316
All of our branching
operations such as new branch,


222
00:12:21,416 --> 00:12:25,336
switching to branches, merging
branches are all in here.


223
00:12:25,996 --> 00:12:29,326
You can also configure a couple
of options on a working copy.


224
00:12:29,646 --> 00:12:30,676
I'll talk about that later.


225
00:12:32,216 --> 00:12:36,196
There's also a way to get to
checkout from in here as well


226
00:12:36,196 --> 00:12:38,866
as the workspace wide
operations like commit, push,


227
00:12:39,126 --> 00:12:40,896
update, refreshing status.


228
00:12:41,546 --> 00:12:43,586
You can discard all
of the changes and all


229
00:12:43,586 --> 00:12:46,656
of the working copies in
your workspace using Xcode 5.


230
00:12:47,256 --> 00:12:51,466
You can do file, specific
operations like adding,


231
00:12:51,526 --> 00:12:53,376
discarding changes
in a specific file


232
00:12:53,376 --> 00:12:54,816
or marking files
as resolved here.


233
00:12:55,486 --> 00:12:59,096
Let's take a look at this
new history option now.


234
00:12:59,236 --> 00:13:02,726
So I click that and Xcode has
now loaded all the history


235
00:13:02,726 --> 00:13:04,326
for this workspace.


236
00:13:04,756 --> 00:13:07,086
There's only one working
copy in this workspace


237
00:13:07,336 --> 00:13:09,696
so this is a very simple
view of just that one.


238
00:13:09,896 --> 00:13:11,876
Eric will show you a more
complex example later.


239
00:13:11,876 --> 00:13:13,826
So you can scroll
through all these.


240
00:13:14,046 --> 00:13:16,806
But I know that I have a
specific commit message


241
00:13:16,806 --> 00:13:17,616
that I'm looking for.


242
00:13:17,976 --> 00:13:20,546
So there's now a search
field up here at the top.


243
00:13:20,546 --> 00:13:22,476
I'm curious about
searching for stuff


244
00:13:22,796 --> 00:13:24,626
that touched the CSS support.


245
00:13:25,226 --> 00:13:28,886
So I type in CSS and now
Xcode searched the subversion


246
00:13:28,886 --> 00:13:33,046
repository for commit
messages referencing CSS.


247
00:13:33,296 --> 00:13:34,916
So there's a particular
commit down here


248
00:13:34,916 --> 00:13:36,126
that I was interested in.


249
00:13:36,996 --> 00:13:38,366
So let's take a look
at this one.


250
00:13:38,706 --> 00:13:41,626
We see who committed it,
when it was committed,


251
00:13:43,356 --> 00:13:47,356
the revision number,
the commit message


252
00:13:47,356 --> 00:13:50,516
for this particular commit
and there's also this option


253
00:13:50,516 --> 00:13:53,546
to show the modified
files for this commit.


254
00:13:54,146 --> 00:13:58,956
So when I click that, we now see
a sheet that has all the files


255
00:13:58,956 --> 00:14:01,296
that were changed as part
of that commit and allows me


256
00:14:01,296 --> 00:14:02,526
to look at the changes.


257
00:14:02,996 --> 00:14:05,816
On the right side here we have
the version of this file prior


258
00:14:06,066 --> 00:14:10,266
to the commit and then on the
left what was actually changed.


259
00:14:10,876 --> 00:14:13,116
So you can just go
through all of these files


260
00:14:13,416 --> 00:14:17,066
and see exactly what
changed in a commit.


261
00:14:17,066 --> 00:14:20,616
So we just took a look at how
to set up an account as well


262
00:14:20,616 --> 00:14:24,146
as a little preview of the
Source Control menu, checkout


263
00:14:25,536 --> 00:14:29,276
and how it can auto
discover branches


264
00:14:29,276 --> 00:14:30,626
for a subversion repository.


265
00:14:32,516 --> 00:14:37,036
And also when you go to set
up in Checkout a new URL


266
00:14:37,036 --> 00:14:39,356
that you've never checked out
from, it'll automatically set


267
00:14:39,356 --> 00:14:42,036
up the account for you,
asking credentials if needed.


268
00:14:42,566 --> 00:14:46,906
But that was a really simple
case for checking out.


269
00:14:46,906 --> 00:14:50,876
Let's talk about more advanced
setups, multiple working copies.


270
00:14:52,306 --> 00:14:55,346
Many projects aggregate
multiple working copies


271
00:14:55,496 --> 00:14:56,946
into a single workspace.


272
00:14:57,416 --> 00:15:00,246
You'll have a repository
for your main app


273
00:15:00,246 --> 00:15:03,666
and you may be using some Open
Source tools as part of your app


274
00:15:04,266 --> 00:15:06,116
and those come from
different repositories.


275
00:15:06,636 --> 00:15:09,826
Well we want to make
it really easy to set


276
00:15:09,826 --> 00:15:11,306
up new developers on your team.


277
00:15:11,876 --> 00:15:15,506
And we also want to help
you move away from things


278
00:15:15,506 --> 00:15:18,616
like subversion externals
and Git submodules.


279
00:15:18,616 --> 00:15:21,966
Now those work great when
you're always using Git


280
00:15:21,966 --> 00:15:25,116
or always using Subversion but
you might be trying to mix those


281
00:15:25,116 --> 00:15:28,586
and it's hard to have one talk
to the other automatically.


282
00:15:30,476 --> 00:15:33,116
So Xcode's in this
unique position


283
00:15:33,306 --> 00:15:34,726
where it knows all
this information


284
00:15:34,966 --> 00:15:36,646
and can package it
all up for you.


285
00:15:41,256 --> 00:15:42,376
So how's this work?


286
00:15:42,376 --> 00:15:45,906
So when you first open your
project, it contains all


287
00:15:45,906 --> 00:15:49,906
of the working copies into this
metadata that Xcode will use.


288
00:15:50,816 --> 00:15:54,046
You can manage this via the
Source Control menu telling it


289
00:15:54,046 --> 00:15:56,286
to include certain
working copies or not


290
00:15:56,556 --> 00:15:58,866
and whether those are
required to build your project.


291
00:16:00,436 --> 00:16:03,866
So this metadata is
called Source Control data


292
00:16:03,956 --> 00:16:04,606
when committing.


293
00:16:05,696 --> 00:16:08,676
It lives in your workspace
in your shared data folder


294
00:16:09,056 --> 00:16:11,036
as your project name
.Xe checkout.


295
00:16:11,366 --> 00:16:13,866
You're going to want to be
committing this so that all


296
00:16:13,946 --> 00:16:16,736
of your other developers
can take advantage


297
00:16:16,736 --> 00:16:18,526
of this new functionality
in Xcode 5.


298
00:16:19,116 --> 00:16:24,626
You can access this new
functionality from the recents


299
00:16:24,936 --> 00:16:26,426
on checking out a
particular project


300
00:16:26,426 --> 00:16:27,456
that you've checkout recently


301
00:16:27,826 --> 00:16:32,216
or when you open a
workspace it sees


302
00:16:32,946 --> 00:16:34,876
that there are missing
working copies


303
00:16:35,586 --> 00:16:37,676
and gives you a dialogue
asking you


304
00:16:37,676 --> 00:16:40,176
to checkout other
working copies.


305
00:16:40,176 --> 00:16:43,686
So let's take a quick
look at this.


306
00:16:45,136 --> 00:16:48,906
All right, so let's go back
to Xcode and we're going


307
00:16:48,906 --> 00:16:50,516
to click checkout an
existing project again.


308
00:16:51,776 --> 00:16:55,616
Now I have a project that's
hosted on our OS X server


309
00:16:55,616 --> 00:16:59,146
and I'm going to check that out.


310
00:16:59,446 --> 00:17:02,586
This particular project
only had one branch


311
00:17:02,626 --> 00:17:04,756
so it didn't even ask me which
branch I wanted to checkout.


312
00:17:05,476 --> 00:17:07,006
I'm going to check that
out to the desktop.


313
00:17:07,935 --> 00:17:10,955
And we see Xcode has now
opened the workspace for this


314
00:17:11,516 --> 00:17:12,816
and we can see over
here on the left,


315
00:17:12,906 --> 00:17:15,386
there's another project
reference that is read.


316
00:17:16,816 --> 00:17:18,526
We won't be able to build
unless we have that.


317
00:17:19,286 --> 00:17:23,516
So since I committed the Source
Control data, Xcode is asking me


318
00:17:23,516 --> 00:17:25,636
if I want to checkout
additional working copies


319
00:17:25,636 --> 00:17:27,226
that are required
for this project.


320
00:17:27,226 --> 00:17:28,676
So I'll click checkout


321
00:17:28,676 --> 00:17:33,066
and it found exactly
one that I was missing.


322
00:17:33,386 --> 00:17:35,206
That's the one that contains
this missing project.


323
00:17:36,386 --> 00:17:40,226
So it tells me the name
of the working copy,


324
00:17:40,706 --> 00:17:43,986
where to get it from, allows
me to uncheck it if I decide


325
00:17:43,986 --> 00:17:45,756
that I don't want to actually
check this out right now


326
00:17:46,806 --> 00:17:50,076
and lets me see all of the
branches, this one only has one


327
00:17:50,076 --> 00:17:51,106
so I'm going to keep Master.


328
00:17:51,666 --> 00:17:54,296
When I click next,
it checks it out.


329
00:17:55,046 --> 00:17:58,256
But if we see here on the finder
we have this JogR application


330
00:17:58,256 --> 00:18:01,936
which you may have seen in some
of the other tools sessions,


331
00:18:02,766 --> 00:18:05,556
and now there is this libraries
folder next to it that appeared


332
00:18:05,556 --> 00:18:08,366
after I checked out
additional working copies.


333
00:18:09,076 --> 00:18:11,976
So if I look in there,
there's that working copy.


334
00:18:12,766 --> 00:18:14,316
Xcode knew that as part


335
00:18:14,316 --> 00:18:19,416
of the workspace the
other project was relative


336
00:18:19,616 --> 00:18:23,946
to the main project inside of
a library folder and recreated


337
00:18:23,946 --> 00:18:25,816
that file system
structure for me.


338
00:18:26,176 --> 00:18:28,596
I didn't have to tell it
where to check it out from


339
00:18:28,816 --> 00:18:33,146
or where to check it out to.


340
00:18:33,276 --> 00:18:36,676
So now if I go back to
Xcode, I know that I'm going


341
00:18:36,676 --> 00:18:38,976
to be adding some
more functionality


342
00:18:38,976 --> 00:18:41,616
to this Jogging application
particularly I want


343
00:18:41,616 --> 00:18:42,606
to add swimming support.


344
00:18:42,606 --> 00:18:44,876
I'm not sure why you would want
to go swimming with your phone


345
00:18:45,036 --> 00:18:46,006
but maybe someone will.


346
00:18:46,006 --> 00:18:51,656
So I'm going to go into
my documents folder


347
00:18:51,746 --> 00:18:53,786
where I have this
new SwimKit library.


348
00:18:53,856 --> 00:18:57,306
I'm going to drag it into
the libraries folder,


349
00:19:01,356 --> 00:19:04,306
look at the project and add
that project into Xcode.


350
00:19:04,306 --> 00:19:08,506
Now Xcode's asking me if I want
to share this working copy.


351
00:19:08,766 --> 00:19:11,056
It realizes that this
is a new working copy


352
00:19:11,056 --> 00:19:13,986
that I didn't have before in
my workspace and wants to know


353
00:19:13,986 --> 00:19:15,776
if I want to add it to
my Source Control data.


354
00:19:16,496 --> 00:19:20,836
I do, so I'm going to click yes.


355
00:19:20,836 --> 00:19:23,776
Now if I look in the Source
Control menu there's now


356
00:19:24,036 --> 00:19:27,226
yet another working copy and it
also says what branch it's on.


357
00:19:28,596 --> 00:19:31,636
Now I want to configure a couple
of options on this working copy


358
00:19:31,756 --> 00:19:33,976
so I'm going to click configure.


359
00:19:34,776 --> 00:19:38,666
Now we see here a
sheet that has a path


360
00:19:38,666 --> 00:19:41,486
to the local working copy,
where it is on my disc,


361
00:19:41,746 --> 00:19:45,216
as well as where it came from,
now that's the information


362
00:19:45,216 --> 00:19:47,586
that we're going to use as
part of the Source Control data


363
00:19:47,876 --> 00:19:50,606
to tell other developers
where to check this out from.


364
00:19:51,406 --> 00:19:54,376
And we have a checkbox to
include this working copy


365
00:19:54,476 --> 00:19:56,216
in that new checkout workflow.


366
00:19:57,126 --> 00:20:00,116
Currently it's set to optional
but I know that we're going


367
00:20:00,116 --> 00:20:00,876
to soon require this to build.


368
00:20:01,136 --> 00:20:03,196
So I'm going to select required.


369
00:20:05,436 --> 00:20:07,386
There's also a couple
of other options in here


370
00:20:07,496 --> 00:20:11,596
such as configuring remotes
for my Git repository as well


371
00:20:11,596 --> 00:20:13,816
as branches where I can
add and remove branches.


372
00:20:14,506 --> 00:20:17,916
It also shows all of the
remote branches in the remotes.


373
00:20:20,476 --> 00:20:24,206
So now since I just changed
that Source Control data file,


374
00:20:24,206 --> 00:20:26,896
I know that I need to commit
the changes that I did to it


375
00:20:27,076 --> 00:20:29,256
so that all of my coworkers
can take advantage of this.


376
00:20:29,256 --> 00:20:34,056
So I'm going to go to Source
Control, commit and we see


377
00:20:34,056 --> 00:20:36,176
that indeed I did
change that file


378
00:20:36,426 --> 00:20:38,326
and I also changed the
workspace settings file


379
00:20:38,536 --> 00:20:41,076
because I added a new
project to the workspace.


380
00:20:41,626 --> 00:20:45,676
So I'm going to drag
[inaudible] commit message


381
00:20:46,286 --> 00:20:48,946
and we can also push to
remotes automatically


382
00:20:48,946 --> 00:20:49,696
since I'm using Git.


383
00:20:49,696 --> 00:20:52,896
So I'm going to select
push to remotes and then


384
00:20:53,416 --> 00:20:55,286
when I commit two files in push,


385
00:20:55,536 --> 00:20:57,116
it asks me which remotes
I want to push to.


386
00:20:57,776 --> 00:20:59,686
Now pushing it to the
remote makes it so that all


387
00:20:59,686 --> 00:21:01,496
of my coworkers can
get access to it


388
00:21:01,496 --> 00:21:03,226
when they update their
local working copies.


389
00:21:04,446 --> 00:21:09,066
So I'm going to commit
and push and now


390
00:21:09,146 --> 00:21:11,396
that that Source Control
data file is updated


391
00:21:11,616 --> 00:21:14,186
so other developers will be
able to automatically checkout


392
00:21:14,186 --> 00:21:15,656
that SwimKit from within Xcode.


393
00:21:16,706 --> 00:21:19,936
First though, I know that since
we're going to be doing a lot


394
00:21:19,936 --> 00:21:24,956
of work on the SwimKit, I'm
going to be adding a new branch


395
00:21:24,996 --> 00:21:29,256
to JogR so that I don't impact
the main line of my code.


396
00:21:29,256 --> 00:21:31,186
So I'm going to select
new branch,


397
00:21:32,386 --> 00:21:34,066
and it asks me what I
want to name my branch.


398
00:21:34,596 --> 00:21:36,066
Since we're adding
swimming support to this,


399
00:21:36,176 --> 00:21:40,916
I think I'll call
it Surf and Turf.


400
00:21:40,916 --> 00:21:43,826
Now when you create a new
branch it automatically branches


401
00:21:43,976 --> 00:21:45,706
from your current branch.


402
00:21:46,286 --> 00:21:48,646
So I'll click create.


403
00:21:49,186 --> 00:21:55,536
So it created the branch and
also as part of creating it,


404
00:21:55,836 --> 00:21:57,976
it automatically switched
to it which I can see here


405
00:21:57,976 --> 00:21:58,966
in the Source Control menu.


406
00:21:59,606 --> 00:22:02,706
Now since I just created
this branch locally in Git,


407
00:22:03,046 --> 00:22:04,976
I know that all my coworkers
are going to be wanting


408
00:22:04,976 --> 00:22:06,916
to make changes to it
as well so I'm going


409
00:22:06,916 --> 00:22:08,266
to push this new branch.


410
00:22:08,746 --> 00:22:10,686
When I go to push we see


411
00:22:10,686 --> 00:22:14,476
that the JogR working
copy now has a new branch


412
00:22:14,476 --> 00:22:16,646
that does not exist
on the remote


413
00:22:16,646 --> 00:22:18,066
and gives me the
option to create it.


414
00:22:18,746 --> 00:22:23,256
So I want to do that and
I'll push that new branch.


415
00:22:23,716 --> 00:22:27,026
Now, since I just added
yet another working copy


416
00:22:27,096 --> 00:22:32,396
to this workspace I know
that any new developers


417
00:22:32,396 --> 00:22:35,256
on our team might want to be
checking that out as well.


418
00:22:35,256 --> 00:22:37,986
So I'm going to actually
switch to my bosses account.


419
00:22:38,136 --> 00:22:40,716
I happen to have his password
although that's not very secure.


420
00:22:42,216 --> 00:22:46,526
So I'll switch to his
account and Xcode's launched


421
00:22:46,776 --> 00:22:47,926
and so I'm going
to click checkout.


422
00:22:48,916 --> 00:22:51,596
He has his OS X server
set up and so it shows all


423
00:22:51,596 --> 00:22:54,236
of the repositories hosted on
his OS X server automatically.


424
00:22:54,436 --> 00:22:58,116
I'm going to click the JogR
repository and check that out.


425
00:22:58,896 --> 00:23:01,506
Now we see because I have
two branches that asks me


426
00:23:01,506 --> 00:23:02,536
which one I want to check out.


427
00:23:03,086 --> 00:23:04,656
He's not working on
any new features just


428
00:23:04,656 --> 00:23:06,716
yet so I'm just going
to checkout Master.


429
00:23:07,316 --> 00:23:10,416
It asks me to where I want
to check it out and I'm going


430
00:23:10,416 --> 00:23:12,946
to check it out to my desktop
and it has checked it out.


431
00:23:12,946 --> 00:23:16,386
And it as well has
now asked me to check


432
00:23:16,386 --> 00:23:17,746
out additional working copies


433
00:23:17,966 --> 00:23:21,156
because now there are two
read references to projects


434
00:23:21,156 --> 00:23:23,836
that aren't part of
this workspace just yet.


435
00:23:24,306 --> 00:23:25,416
So I'm going to click checkout


436
00:23:25,936 --> 00:23:30,586
and now it found
those working copies.


437
00:23:30,586 --> 00:23:33,236
And we see here because
I made SwimKit required,


438
00:23:33,436 --> 00:23:35,826
I actually don't have
the option to uncheck it.


439
00:23:37,336 --> 00:23:40,706
When I click next it created
that library folder next to JogR


440
00:23:41,456 --> 00:23:46,516
and has all of those
files ready to go.


441
00:23:46,566 --> 00:23:50,736
All right, so we just saw the
brand new Checkout workflow


442
00:23:51,556 --> 00:23:53,086
and how it's much
more streamlined.


443
00:23:54,356 --> 00:23:57,396
We also saw the branch
integration


444
00:23:57,396 --> 00:24:01,646
in the new checkout workflow
including our multiple working


445
00:24:01,646 --> 00:24:02,366
copy support.


446
00:24:02,366 --> 00:24:06,586
We also talked about the
single point to manage accounts


447
00:24:06,636 --> 00:24:07,836
in the accounts preferences.


448
00:24:08,746 --> 00:24:11,836
And the great new Source
Control menu which takes all


449
00:24:11,836 --> 00:24:14,276
of your working copies and
puts them right at the top


450
00:24:14,276 --> 00:24:19,156
of that menu so that you
can easily see them and all


451
00:24:19,156 --> 00:24:20,696
of the branching
workflows as part


452
00:24:20,696 --> 00:24:23,686
of those working copies
are up there as well.


453
00:24:24,906 --> 00:24:27,436
And also showing
the current branch


454
00:24:27,516 --> 00:24:28,656
which I think is really great.


455
00:24:30,216 --> 00:24:32,376
We also showed the new
history with search


456
00:24:32,926 --> 00:24:35,746
and the new Subversion
1.7 support.


457
00:24:37,756 --> 00:24:39,836
So now I'd like to invite
Eric Dudiak up to talk


458
00:24:39,836 --> 00:24:40,976
about collaborating
with OS X server.


459
00:24:41,516 --> 00:24:45,636
[ Applause ]


460
00:24:46,136 --> 00:24:47,726
>> Eric Dudiak: My name is Eric
Dudiak and I'm going to talk


461
00:24:47,726 --> 00:24:49,446
about some of the great
new features we've added


462
00:24:49,446 --> 00:24:51,816
to Xcode 5 and OS X server.


463
00:24:52,396 --> 00:24:59,146
So the Xcode service on OS X
server is a great end-to-end


464
00:24:59,146 --> 00:25:00,136
collaboration tool.


465
00:25:00,666 --> 00:25:03,226
We've added one of the most
requested features to Xcode


466
00:25:04,166 --> 00:25:07,246
which is the hosting of
Git remote repositories.


467
00:25:07,606 --> 00:25:11,096
It has never been easier
to set up a new project


468
00:25:11,096 --> 00:25:14,156
and have both the Git repository
created locally for your project


469
00:25:14,156 --> 00:25:15,356
as well as up on the server.


470
00:25:16,196 --> 00:25:18,196
This is a great way to make
sure your codes always backed


471
00:25:18,196 --> 00:25:20,016
up so there's no
single point of failure


472
00:25:20,016 --> 00:25:22,426
where if you lost a machine,
all your code would be gone.


473
00:25:22,596 --> 00:25:26,666
One of the other great
features of OS X server


474
00:25:26,666 --> 00:25:29,036
and the Xcode service on
it is automated testing.


475
00:25:29,116 --> 00:25:31,016
I'm sure you've seen a lot
about this earlier this week,


476
00:25:31,866 --> 00:25:35,526
is a great feature where you
can see all your unit tests run


477
00:25:35,526 --> 00:25:36,706
continuously on the server.


478
00:25:37,266 --> 00:25:40,236
This gives you a great way to
see when code might regress


479
00:25:40,386 --> 00:25:42,496
and you can use Source
Control to then figure


480
00:25:42,496 --> 00:25:45,026
out what change might have
actually caused that regression.


481
00:25:45,806 --> 00:25:47,946
So every bot when it's run


482
00:25:47,946 --> 00:25:50,746
and does an integration will
show you a list of the commits


483
00:25:50,746 --> 00:25:51,886
that were part of
that integration.


484
00:25:52,206 --> 00:25:53,706
You can then, since
we're integrated


485
00:25:53,706 --> 00:25:57,256
into the ID see exactly what
source changes were made


486
00:25:57,256 --> 00:25:59,456
in the version editor as
part of those commits.


487
00:26:00,486 --> 00:26:02,916
Finally one of the
other great features


488
00:26:02,986 --> 00:26:06,296
of the OS X server is
the archive of releases.


489
00:26:06,526 --> 00:26:10,016
We highly recommend doing
this as a nightly build bot.


490
00:26:10,566 --> 00:26:12,506
And what that will give
you is a great history


491
00:26:12,506 --> 00:26:14,226
of your application as
it's been developed.


492
00:26:14,916 --> 00:26:15,746
Every morning when you come


493
00:26:15,746 --> 00:26:18,026
into work you'll have
a newly built version


494
00:26:18,026 --> 00:26:20,526
of your application that
shows you what's been worked


495
00:26:20,526 --> 00:26:21,416
on in the past day.


496
00:26:21,806 --> 00:26:24,016
This also allows you to
easily track regressions.


497
00:26:24,116 --> 00:26:26,756
You can go back and see previous
versions of your application,


498
00:26:26,756 --> 00:26:28,386
run it on a device and figure


499
00:26:28,386 --> 00:26:29,816
out when a regression
was introduced.


500
00:26:30,946 --> 00:26:32,836
You can then use Source
Control to figure out exactly


501
00:26:32,836 --> 00:26:33,746
which commit caused


502
00:26:33,746 --> 00:26:36,106
that regression once
you've found what day


503
00:26:36,366 --> 00:26:39,126
that roughly happened in.


504
00:26:39,716 --> 00:26:43,306
So for more information about
OS X server and Xcode 5,


505
00:26:43,356 --> 00:26:45,856
I highly recommend reviewing
the Continuous integration


506
00:26:45,856 --> 00:26:48,046
with Xcode 5 session
from earlier this week.


507
00:26:48,336 --> 00:26:51,486
It provided a lot of information
about how to create a bot,


508
00:26:51,486 --> 00:26:53,476
how to set up server
and just a lot of things


509
00:26:53,476 --> 00:26:55,626
that we're not going to have
time to talk about today.


510
00:26:55,626 --> 00:26:57,036
We're going to talk mostly
about the Source Control


511
00:26:57,036 --> 00:26:58,336
and interaction with the server.


512
00:26:58,336 --> 00:27:03,436
So let's look back at those
3 C's of Source Control


513
00:27:03,436 --> 00:27:05,856
that Kevin was talking
about earlier, confidence,


514
00:27:05,856 --> 00:27:08,306
compartmentalization
and collaboration.


515
00:27:09,396 --> 00:27:10,926
One of the key features
of Source Control


516
00:27:10,926 --> 00:27:13,096
that really brings all
these together is branching.


517
00:27:14,536 --> 00:27:16,046
So I know we've all
been in this position


518
00:27:16,046 --> 00:27:18,966
where maybe you've been
working on your code for a while


519
00:27:18,966 --> 00:27:21,146
and you realize that this
change is really, really big


520
00:27:21,146 --> 00:27:23,196
and you don't ever feel like
you're ready to commit it


521
00:27:23,196 --> 00:27:24,206
into your mainline code.


522
00:27:24,206 --> 00:27:25,886
And then you're in
this situation


523
00:27:25,886 --> 00:27:27,376
where you have all
these changes locally,


524
00:27:27,376 --> 00:27:28,936
either they're committed locally
and you haven't pushed them


525
00:27:28,936 --> 00:27:30,896
to your remote or they're
not even committed.


526
00:27:32,176 --> 00:27:33,806
This is a really bad idea


527
00:27:33,806 --> 00:27:35,926
because now all those
changes are in one place


528
00:27:35,926 --> 00:27:37,426
and you don't have
any backup of them.


529
00:27:37,886 --> 00:27:40,296
Branching is a great
way to get around that.


530
00:27:40,296 --> 00:27:43,396
You can create a branch and then
it's not in your mainline code


531
00:27:43,396 --> 00:27:44,576
and you can work
on it separately.


532
00:27:44,956 --> 00:27:47,726
This gives you the confidence
that your code is always backed


533
00:27:47,726 --> 00:27:51,196
up when you push it to a remote
server or commit to subversion.


534
00:27:52,416 --> 00:27:55,776
This is obviously a key
feature of compartmentalization


535
00:27:55,776 --> 00:27:58,606
because now you can work
on your branch separately


536
00:27:58,606 --> 00:27:59,536
from your mainline code.


537
00:28:00,176 --> 00:28:01,806
Let's say you have an app
already in the App Store


538
00:28:02,446 --> 00:28:03,926
and that's your Master
branch now.


539
00:28:03,926 --> 00:28:07,796
If you want to start working
on version 2.0 of that app,


540
00:28:08,006 --> 00:28:09,796
you'd probably want to
start creating or start


541
00:28:09,796 --> 00:28:13,316
by creating a branch for new
features which aren't going


542
00:28:13,316 --> 00:28:14,846
to be committed to
your mainline code.


543
00:28:14,846 --> 00:28:17,156
So this way if you have to do a
bot update while you're working


544
00:28:17,156 --> 00:28:19,326
on a big feature, you
can quickly switch back


545
00:28:19,326 --> 00:28:22,506
to your mainline branch and
make those small changes


546
00:28:22,506 --> 00:28:24,736
and submit it to the App
Store, then go right back


547
00:28:24,736 --> 00:28:29,656
to your feature branch and
start working on that again.


548
00:28:30,996 --> 00:28:33,656
Finally, branching
is a great way


549
00:28:33,746 --> 00:28:34,996
to collaborate with
your coworkers.


550
00:28:35,716 --> 00:28:38,416
It allows you to be
insulated from all the changes


551
00:28:38,416 --> 00:28:40,326
that they're making while
you're working on a feature.


552
00:28:40,326 --> 00:28:42,766
So you're not constantly dealing
with changes of your coworkers,


553
00:28:43,006 --> 00:28:45,876
you can focus on your feature
and deal with their changes


554
00:28:45,876 --> 00:28:47,806
at the end when you want to
merge it or if you decide


555
00:28:47,806 --> 00:28:50,696
to pull their changes
in at specific points.


556
00:28:51,766 --> 00:28:53,656
It also gives you a great
way to do code reviews.


557
00:28:54,086 --> 00:28:56,726
So if you do all this work
on a branch, when it's time


558
00:28:56,726 --> 00:28:57,846
to merge it you can
simply have one


559
00:28:57,846 --> 00:28:59,806
of your coworkers
actually take a look


560
00:28:59,806 --> 00:29:00,966
at the code and do the merge.


561
00:29:02,556 --> 00:29:04,656
Make sure that you're always
checking each other's code


562
00:29:04,656 --> 00:29:07,216
and that everything works
the way you expect it to.


563
00:29:08,616 --> 00:29:11,646
So as I was saying branches
are great for working in teams.


564
00:29:12,056 --> 00:29:12,626
You don't always want


565
00:29:12,626 --> 00:29:13,866
to see every change
your coworker is making


566
00:29:13,866 --> 00:29:15,476
as you're working
on a big feature,


567
00:29:15,476 --> 00:29:17,726
you want to be somewhat
insulated from that.


568
00:29:18,276 --> 00:29:21,366
So we highly recommend
in Xcode using branches


569
00:29:21,466 --> 00:29:22,466
for developing features.


570
00:29:23,106 --> 00:29:25,196
This is going to keep
your mainline code


571
00:29:25,426 --> 00:29:27,556
from ever getting impacted
by feature development


572
00:29:27,556 --> 00:29:30,926
and so you can quickly release
small updates as needed.


573
00:29:32,976 --> 00:29:35,736
Also with OS X server, that
automated testing I was talking


574
00:29:35,736 --> 00:29:38,146
about and you've heard
about earlier this week is


575
00:29:38,146 --> 00:29:39,706
on a per branch basis.


576
00:29:39,986 --> 00:29:41,726
This means that each
bot is aware


577
00:29:41,726 --> 00:29:43,206
of which branch it's
currently testing


578
00:29:43,206 --> 00:29:45,886
and you can create a new bot
as you create new branches.


579
00:29:46,456 --> 00:29:49,256
This way is unit test
change, you can verify


580
00:29:49,256 --> 00:29:51,376
that each branch
is in a good state.


581
00:29:52,176 --> 00:29:54,606
This is a great way to make
sure that before you merge,


582
00:29:55,236 --> 00:29:57,146
all your code is in the state
that you expect it to be in


583
00:29:57,146 --> 00:29:58,806
and all your unit tests
are running successfully.


584
00:29:58,886 --> 00:30:02,906
So let's look at a
high level concept


585
00:30:02,906 --> 00:30:04,216
of what exactly is a branch.


586
00:30:05,046 --> 00:30:07,496
So if we have a single
branch here, Master,


587
00:30:07,596 --> 00:30:10,346
represented by two dots,
representing a few commits,


588
00:30:11,626 --> 00:30:13,756
this might be sort of
the existing version


589
00:30:13,756 --> 00:30:15,166
of your app in the App Store.


590
00:30:15,756 --> 00:30:18,246
Now the first thing we're going
to do is create a new branch.


591
00:30:19,356 --> 00:30:21,706
Right now that branch has
nothing different from Master.


592
00:30:22,616 --> 00:30:23,786
It has the exact same code,


593
00:30:23,986 --> 00:30:26,016
it's just essentially a
different name right now.


594
00:30:26,986 --> 00:30:29,166
But the big power
to branching is


595
00:30:29,166 --> 00:30:30,336
that we can commit separately.


596
00:30:30,876 --> 00:30:34,366
So as we start to make
commits to this branch we see


597
00:30:34,366 --> 00:30:36,686
that those changes are only
in orange, they're only


598
00:30:36,686 --> 00:30:38,746
on the branch, they're
not in the Master branch.


599
00:30:39,266 --> 00:30:41,976
And the other great part
is we can still commit


600
00:30:42,146 --> 00:30:45,536
to the Master branch
independently of our new branch.


601
00:30:45,966 --> 00:30:48,246
So we can make features
while still making those


602
00:30:48,246 --> 00:30:49,206
small updates.


603
00:30:49,866 --> 00:30:51,436
And this goes on,
we can continue


604
00:30:51,436 --> 00:30:53,396
to keep these branches
separate up until the point


605
00:30:53,396 --> 00:30:55,716
that we're actually ready to
integrate this great new feature


606
00:30:55,716 --> 00:30:56,956
into our mainline code.


607
00:30:56,956 --> 00:31:01,366
And at that point we'll go ahead
and merge it and now everything


608
00:31:01,366 --> 00:31:02,696
that was on that branch is now


609
00:31:02,696 --> 00:31:05,126
in the Master branch
or our mainline code.


610
00:31:05,126 --> 00:31:09,576
But let's take a look at
this in a bigger picture.


611
00:31:09,576 --> 00:31:12,326
Let's look at this with OS X
server and working with a team.


612
00:31:12,716 --> 00:31:14,706
So here on the left
this represents sort


613
00:31:14,706 --> 00:31:17,556
of a normal user working
on code on their machine.


614
00:31:17,666 --> 00:31:19,096
They currently have
the Master branch.


615
00:31:19,566 --> 00:31:21,686
And one of their
coworkers has made a branch


616
00:31:21,686 --> 00:31:23,306
on the server and
pushed that up.


617
00:31:23,306 --> 00:31:25,746
So let's talk about
branching with Git.


618
00:31:26,726 --> 00:31:29,416
Git has both local branches
and remote branches.


619
00:31:29,806 --> 00:31:33,256
So in this case the user on
the left does not actually have


620
00:31:33,376 --> 00:31:36,226
that branch yet, it's only
available on the server.


621
00:31:36,966 --> 00:31:39,176
Actually they're also
a little bit behind


622
00:31:39,176 --> 00:31:41,116
on even changes to
the Master branch.


623
00:31:41,786 --> 00:31:43,996
Now since Git is a distributed
Source Control system,


624
00:31:43,996 --> 00:31:45,476
you have to push
and pull in order


625
00:31:45,476 --> 00:31:48,146
to synchronize your local
machine with the server.


626
00:31:48,146 --> 00:31:51,536
So here we're going to
do a pull and we see


627
00:31:51,536 --> 00:31:55,186
that what's happened is we
got the changes on Master


628
00:31:55,186 --> 00:31:56,146
and are now up to date.


629
00:31:56,146 --> 00:31:59,736
And we can continue to make
changes to Master simply


630
00:31:59,736 --> 00:32:00,816
by making a commit locally.


631
00:32:01,206 --> 00:32:03,596
Now committing locally in
Git does not push that change


632
00:32:03,596 --> 00:32:06,566
up to the server unless you
specifically tell us to in Xcode


633
00:32:06,566 --> 00:32:08,236
or later push separately.


634
00:32:09,196 --> 00:32:12,186
This is an important distinction
for anyone using Subversion.


635
00:32:12,946 --> 00:32:14,806
But notice that even
though we did a pull,


636
00:32:14,806 --> 00:32:16,396
we still don't have
that branch locally.


637
00:32:17,346 --> 00:32:20,366
In Xcode 5 we've introduced
automatic tracking branches.


638
00:32:20,366 --> 00:32:22,856
A tracking branch is
simply a local branch


639
00:32:22,926 --> 00:32:24,086
that tracks a remote branch.


640
00:32:24,856 --> 00:32:28,376
In this case when I switch
to the branch in Xcode,


641
00:32:28,906 --> 00:32:31,736
I get an automatic local
copy of the same name


642
00:32:32,006 --> 00:32:35,446
that I can start working
with and can merge locally.


643
00:32:36,056 --> 00:32:38,286
Now again all those changes


644
00:32:38,316 --> 00:32:40,406
because Git is distributed
are just local.


645
00:32:40,406 --> 00:32:42,576
And if I want to share all
this work with my coworkers,


646
00:32:42,816 --> 00:32:45,206
I'm going to have to do a push.


647
00:32:45,696 --> 00:32:48,926
A push takes all those changes
and puts them up on the server.


648
00:32:49,276 --> 00:32:51,206
And of course since we all
have unit testing continuous


649
00:32:51,206 --> 00:32:54,576
integration running when the
server sees new commits as part


650
00:32:54,576 --> 00:32:56,536
of a push, it will go ahead
and run the integration


651
00:32:56,676 --> 00:32:58,206
and because I checked
this beforehand,


652
00:32:58,466 --> 00:32:59,886
all those unit tests
will succeed.


653
00:32:59,886 --> 00:33:04,296
So let's take a look at
this in a quick little demo.


654
00:33:05,286 --> 00:33:10,726
So I'm going to login to my
account and I'm also working


655
00:33:10,726 --> 00:33:11,946
on the JogR application.


656
00:33:12,396 --> 00:33:19,186
Now let's open it up and
just as we saw before


657
00:33:19,186 --> 00:33:22,286
since Kevin added a new project
to it with a new working copy,


658
00:33:22,286 --> 00:33:23,466
I also need to check that out.


659
00:33:23,466 --> 00:33:25,276
So let's get that taken
care of real quick.


660
00:33:25,276 --> 00:33:27,806
And we see that it's
automatically used my user name


661
00:33:27,806 --> 00:33:29,846
instead of Kevin's
to check it out.


662
00:33:30,696 --> 00:33:32,766
So great and I have
all the sources.


663
00:33:33,056 --> 00:33:33,916
I can verify that.


664
00:33:33,916 --> 00:33:37,596
I can totally build this project
right now and have no problems.


665
00:33:38,096 --> 00:33:42,526
But I made a deal with Kevin
before we came up on stage here


666
00:33:42,526 --> 00:33:45,626
that if he came up first I
would take a look at his branch


667
00:33:45,626 --> 00:33:47,946
and merge it in with
the Master branch.


668
00:33:48,136 --> 00:33:48,986
So I'm going to go ahead


669
00:33:48,986 --> 00:33:53,466
into the Source Control
menu and look at JogR.


670
00:33:54,386 --> 00:33:55,966
And I'm going to
switch to a branch.


671
00:33:56,136 --> 00:33:58,346
Now the only branch I
have locally is Master


672
00:33:58,346 --> 00:34:00,446
and since I'm already on
that I can't switch to it.


673
00:34:00,916 --> 00:34:03,026
However, we see that there are
two branches on the server,


674
00:34:03,536 --> 00:34:04,696
Master and Surf and Turf.


675
00:34:04,696 --> 00:34:07,256
So I'm going to switch to
Surf and Turf and take a look


676
00:34:07,256 --> 00:34:10,366
at Kevin's branch and do
a quick code review of it.


677
00:34:12,376 --> 00:34:14,735
This is creating an automatic
tracking branch locally


678
00:34:14,735 --> 00:34:15,866
and switching to Surf and Turf.


679
00:34:16,266 --> 00:34:19,616
If we go back into the Source
Control menu we see that I'm now


680
00:34:19,616 --> 00:34:20,735
on the Surf and Turf branch.


681
00:34:20,735 --> 00:34:27,926
So let's take a look and
rather than doing a really,


682
00:34:27,926 --> 00:34:29,346
looking through all his code,


683
00:34:29,346 --> 00:34:30,786
I'm going to do something
simple.


684
00:34:31,096 --> 00:34:32,706
We wrote a few unit
tests for JogR.


685
00:34:32,706 --> 00:34:35,436
So I'm going to go to the
test navigator and I see


686
00:34:35,436 --> 00:34:38,505
that JogR has four unit tests
and I'm just going to run them.


687
00:34:38,856 --> 00:34:40,896
Easy way to make sure that
Kevin didn't break anything.


688
00:34:42,485 --> 00:34:43,876
Set the build failed.


689
00:34:44,446 --> 00:34:46,886
All right, well let's take
a look at what's happened.


690
00:34:47,476 --> 00:34:52,106
All right, so this is a
normal failure in a unit test.


691
00:34:52,106 --> 00:34:54,646
It looks like something is
probably changed around here


692
00:34:54,646 --> 00:34:57,466
and we can no longer
even build our unit test.


693
00:34:58,586 --> 00:35:01,606
It looks like there's not
this particular initialization


694
00:35:01,606 --> 00:35:02,506
method anymore.


695
00:35:03,186 --> 00:35:05,076
So let's take a look
at the run data class


696
00:35:05,076 --> 00:35:05,896
and see what's happen.


697
00:35:05,896 --> 00:35:09,486
So I'm going to hold down
command and select run data


698
00:35:09,486 --> 00:35:12,896
which is going to take me right
to the run data header file


699
00:35:12,896 --> 00:35:13,906
where run data is declared.


700
00:35:13,906 --> 00:35:16,676
And I'll take a look here at
this initialization method.


701
00:35:17,826 --> 00:35:19,246
Pretty sure it looks
a little different


702
00:35:19,246 --> 00:35:21,286
than what I saw before
in the test.


703
00:35:21,286 --> 00:35:26,666
So let's open up the contextual
menu and do show blame for line.


704
00:35:27,986 --> 00:35:32,146
And here we see that it was
indeed changed by Kevin recently


705
00:35:32,816 --> 00:35:34,796
and it seems to be adding
support for Swimming


706
00:35:34,796 --> 00:35:37,206
so it's probably on this
branch that he was playing


707
00:35:37,206 --> 00:35:40,216
around with things and changed
this initialization method.


708
00:35:41,236 --> 00:35:43,826
Now also importantly I can
see that Kevin committed this


709
00:35:43,826 --> 00:35:45,736
at 3:30 a.m. so I'm
going to want


710
00:35:45,736 --> 00:35:47,196
to take a little
closer look at this.


711
00:35:47,606 --> 00:35:50,936
I'm going to go ahead
and show all the files


712
00:35:50,936 --> 00:35:53,536
that he modified this
morning after the Bash.


713
00:35:54,426 --> 00:35:57,416
So I can see that indeed he did
change the initialization method


714
00:35:57,416 --> 00:36:00,056
to support Swimming and
it looks like it now takes


715
00:36:00,056 --> 00:36:02,476
in an extra boolean that
it didn't have before


716
00:36:02,476 --> 00:36:03,256
in our unit tests.


717
00:36:03,256 --> 00:36:06,596
The rest of this looks
like pretty normal changes.


718
00:36:07,456 --> 00:36:12,776
So I'm going to go ahead
and fix that unit test


719
00:36:12,776 --> 00:36:15,026
by just updating the
use of the initializer.


720
00:36:15,376 --> 00:36:18,436
So now I can go back to
the testing navigator


721
00:36:18,436 --> 00:36:20,606
and run all those unit tests.


722
00:36:21,526 --> 00:36:23,956
This time they succeed
at building


723
00:36:23,956 --> 00:36:26,066
and we're running
in the simulator.


724
00:36:26,806 --> 00:36:32,166
Ah, but I still don't have
green light to cross the board.


725
00:36:32,166 --> 00:36:36,716
Looks like two of them are fine
but two still need a little work


726
00:36:36,716 --> 00:36:42,286
and have changed as a result of
the changes in Surf and Turf.


727
00:36:43,086 --> 00:36:45,546
So looks like a lot of these
are just the result of some


728
00:36:45,546 --> 00:36:47,226
of the assumptions we
were making and some


729
00:36:47,226 --> 00:36:50,036
of our test data has changes
involving Kevin adding new test


730
00:36:50,036 --> 00:36:51,806
data for the Surf
and Turf branch.


731
00:36:52,596 --> 00:36:54,066
Now I can go through
and fix all these


732
00:36:54,326 --> 00:36:58,966
but luckily I have a great
little snippet of code


733
00:36:59,226 --> 00:37:00,196
that just fixes all of them.


734
00:37:00,196 --> 00:37:02,366
So let's rerun the two unit
tests that were failing.


735
00:37:02,686 --> 00:37:04,736
And I can of course with our
new testing support run them one


736
00:37:04,736 --> 00:37:04,976
at a time.


737
00:37:10,046 --> 00:37:13,146
So I can take a look at the two
that failed, run the first one


738
00:37:13,146 --> 00:37:15,346
and now the second one,
all four are green.


739
00:37:15,456 --> 00:37:17,406
I have a lot of confidence
that this is now


740
00:37:17,406 --> 00:37:18,356
in a much better state.


741
00:37:19,276 --> 00:37:20,626
Now since I made
a couple changes,


742
00:37:20,776 --> 00:37:21,936
I need to go ahead
and commit those.


743
00:37:21,936 --> 00:37:25,096
So I'm going to go to the
Source Control menu and commit.


744
00:37:25,166 --> 00:37:28,836
And we see these are just my
updates to the unit tests.


745
00:37:30,216 --> 00:37:33,076
Give it a commit message
and commit the one file.


746
00:37:34,526 --> 00:37:36,096
But now the whole point
of this is I was supposed


747
00:37:36,096 --> 00:37:37,256
to merge Kevin's branch.


748
00:37:37,256 --> 00:37:42,366
So let's go to the Source
Control menu and where I'm


749
00:37:42,366 --> 00:37:45,326
on the Surf and Turf branch
in JogR now, I want to merge


750
00:37:45,326 --> 00:37:47,106
that into the Master branch.


751
00:37:47,466 --> 00:37:48,916
So I'm going to go
to Surf and Turf


752
00:37:49,516 --> 00:37:51,446
and select merge into branch.


753
00:37:51,926 --> 00:37:54,336
There's only one branch that
I can possibly merge this into


754
00:37:54,336 --> 00:37:55,826
and we're discovered
that that's Master.


755
00:37:56,496 --> 00:37:59,756
Xcode will only ever show you
valid branches for merging.


756
00:38:00,546 --> 00:38:03,166
I can go ahead and select that
and it's going to go ahead


757
00:38:03,166 --> 00:38:05,236
and determine all the
potential conflicts and issues


758
00:38:05,236 --> 00:38:08,836
that may come up and it looks
like we might actually have one.


759
00:38:09,636 --> 00:38:10,276
What are the odds?


760
00:38:10,276 --> 00:38:13,686
So actually this happened
in a project file.


761
00:38:13,686 --> 00:38:15,236
Now this is scary.


762
00:38:15,236 --> 00:38:18,116
I don't want to have to
deal with doing a merge


763
00:38:18,116 --> 00:38:20,246
in a project file, that
can't possibly be done.


764
00:38:20,756 --> 00:38:22,556
So it looks like it's
actually not that bad.


765
00:38:23,196 --> 00:38:25,136
It looks like what's happened
is something that happens a lot


766
00:38:25,136 --> 00:38:27,766
which is something, a
resource file was added


767
00:38:28,146 --> 00:38:30,716
on both the Master
branch and Kevin's branch.


768
00:38:30,716 --> 00:38:33,756
So we have a couple of ways we
can resolve the conflict here


769
00:38:34,286 --> 00:38:35,866
and these are all
displayed at the bottom.


770
00:38:36,076 --> 00:38:38,326
I can either select
left and then right.


771
00:38:38,326 --> 00:38:42,276
So this is going to take all
the changes on the left side


772
00:38:42,906 --> 00:38:46,476
which is the Master
branch, take all those


773
00:38:46,476 --> 00:38:48,046
and then take the
changes from Surf and Turf


774
00:38:48,046 --> 00:38:49,596
on the right side after them.


775
00:38:50,046 --> 00:38:52,286
So in this case I'll end up
with both resource files.


776
00:38:52,706 --> 00:38:54,076
This is actually what I
want but let's just look


777
00:38:54,076 --> 00:38:55,136
at the other merge options.


778
00:38:55,266 --> 00:38:57,576
I could take just the left side


779
00:38:57,676 --> 00:38:59,336
which would only give
me the resource file


780
00:38:59,336 --> 00:39:01,746
from the Master branch
and discard the changes


781
00:39:01,746 --> 00:39:04,266
that were conflicting from
the Surf and Turf branch.


782
00:39:05,066 --> 00:39:07,026
I could also take just
the Surf and Turf changes


783
00:39:07,496 --> 00:39:10,296
or I can take both changes
in the opposite order.


784
00:39:10,906 --> 00:39:12,996
Now in most cases for
project files when dealing


785
00:39:12,996 --> 00:39:15,046
with multiple files being
added, it doesn't matter


786
00:39:15,046 --> 00:39:17,326
which order they're in
but we probably want both.


787
00:39:17,326 --> 00:39:19,476
So I'm just going to
go ahead and take both


788
00:39:19,476 --> 00:39:21,976
of those resource files and make
sure they're in the project.


789
00:39:22,886 --> 00:39:24,676
And it looks like that was
the only conflict we had


790
00:39:24,676 --> 00:39:26,756
so I can go ahead
and select merge.


791
00:39:27,586 --> 00:39:30,066
And since I have Source Control
turned on in a remote server,


792
00:39:30,066 --> 00:39:35,056
I'm not going to bother
with a Snapshot right now.


793
00:39:35,296 --> 00:39:38,856
So now we've done the merge
and we can see that one


794
00:39:38,856 --> 00:39:39,756
of the other things I've set


795
00:39:39,756 --> 00:39:42,436
up for the Master
branch is this JogR bot.


796
00:39:42,636 --> 00:39:44,376
And this JogR bot
will run integrations


797
00:39:44,726 --> 00:39:46,896
so since I already ran the
unit test on the other branch,


798
00:39:47,196 --> 00:39:51,656
I'm reasonably confident
that I can go ahead


799
00:39:51,656 --> 00:39:52,946
and just commit and push this.


800
00:39:54,116 --> 00:39:58,816
So I'm going to go to commit
and we see that I basically had


801
00:39:58,816 --> 00:40:00,186
to resolve that conflict
in addition


802
00:40:00,186 --> 00:40:01,976
to the normal merge
commit that was added.


803
00:40:02,916 --> 00:40:04,516
So I resolved the
conflict and now


804
00:40:04,516 --> 00:40:06,496
that I've made all the
changes that I need to make


805
00:40:06,496 --> 00:40:08,516
to land Kevin's branch,
I'm going to ahead


806
00:40:08,516 --> 00:40:09,946
and push that to the remote.


807
00:40:10,416 --> 00:40:15,526
I'm pushing now to Master
because I've merged onto Master.


808
00:40:15,606 --> 00:40:17,196
So I'm going to do
a commit and push.


809
00:40:17,246 --> 00:40:20,106
It's going to take all my
working copies and push them


810
00:40:20,106 --> 00:40:22,946
up to the remote server
and I can now go ahead


811
00:40:22,946 --> 00:40:26,386
and fire off an integration
to just double check


812
00:40:26,756 --> 00:40:29,096
that everything I
did commit is good.


813
00:40:29,096 --> 00:40:31,536
Now if we go to the
Source Control menu


814
00:40:31,536 --> 00:40:33,296
as Kevin was saying, we
have this history view.


815
00:40:34,176 --> 00:40:38,616
And I can see that as a result
of the changes that were made,


816
00:40:38,616 --> 00:40:43,086
I have now taken all the support
for Swimming and the merge


817
00:40:43,086 --> 00:40:44,696
and it's now all in
the Master branch.


818
00:40:45,096 --> 00:40:47,636
And here we see an example of
looking at the history sheet


819
00:40:47,636 --> 00:40:49,056
across several working copies.


820
00:40:49,056 --> 00:40:51,286
I can look at all of
them integrated together


821
00:40:51,286 --> 00:40:52,916
so we can get a full
history of the project


822
00:40:53,336 --> 00:40:55,206
or I can see just one at a time.


823
00:40:55,206 --> 00:40:57,396
And again, the search
works across all of them


824
00:40:57,396 --> 00:40:58,746
or whichever ones are selected.


825
00:40:58,746 --> 00:41:03,746
So that's Source
Control in Xcode 5


826
00:41:03,776 --> 00:41:05,386
with the Continuous
integration Server.


827
00:41:06,556 --> 00:41:08,436
So just to recap
what we saw there


828
00:41:08,436 --> 00:41:10,046
since it can be a
little confusing


829
00:41:10,046 --> 00:41:12,676
to follow what's happening
in branching and merging,


830
00:41:14,066 --> 00:41:18,426
on the left side we see the JogR
branch and we see Kevin's Surf


831
00:41:18,426 --> 00:41:22,586
and Turf branch committed before
a couple changes were made


832
00:41:22,586 --> 00:41:24,296
on the JogR branch but
it's all on the server.


833
00:41:24,296 --> 00:41:26,606
So what I did was I went
ahead and pulled it down


834
00:41:26,606 --> 00:41:28,636
and created a local
tracking branch.


835
00:41:29,156 --> 00:41:33,806
From there I then made
a small commit in order


836
00:41:33,806 --> 00:41:34,976
to fix those unit tests.


837
00:41:35,636 --> 00:41:36,756
This was all local still.


838
00:41:37,416 --> 00:41:39,516
And then I merged it.


839
00:41:39,516 --> 00:41:42,976
Now in order for everyone else
to get the code and I went ahead


840
00:41:42,976 --> 00:41:44,146
and pushed it up to the server.


841
00:41:44,226 --> 00:41:46,696
And then we saw that it fired
a continuous integration


842
00:41:47,486 --> 00:41:49,456
and we can verify the code,
it worked on the server.


843
00:41:50,056 --> 00:41:52,666
So this is very powerful
tool for making sure


844
00:41:52,666 --> 00:41:54,256
that your code's
always in a great state.


845
00:41:56,456 --> 00:41:58,656
So let's review some of
the great new features


846
00:41:58,656 --> 00:42:01,396
of Source Control in Xcode
5 that we've seen today.


847
00:42:02,486 --> 00:42:04,896
We've seen how the new
workflow driven Source Control


848
00:42:04,896 --> 00:42:07,006
interaction is primarily
now accessed


849
00:42:07,006 --> 00:42:08,576
through the top level
Source Control menu


850
00:42:08,576 --> 00:42:11,016
where we have access to
the every working copy


851
00:42:11,016 --> 00:42:13,256
that a project or
workspace is currently using


852
00:42:13,296 --> 00:42:15,726
and what branch we're
currently on in each one.


853
00:42:15,726 --> 00:42:17,186
So this is a great easy way


854
00:42:17,576 --> 00:42:20,876
to quickly see what code
you're working on and be sure


855
00:42:20,876 --> 00:42:21,436
that what you're working


856
00:42:21,436 --> 00:42:22,486
on is what you think
you're working on.


857
00:42:22,926 --> 00:42:26,786
We've also seen some of the
great new server integration


858
00:42:26,786 --> 00:42:29,566
with OS X server and the
Xcode service providing


859
00:42:29,566 --> 00:42:32,556
for the first time
end-to-end solution for Xcode


860
00:42:33,016 --> 00:42:36,256
with one click, get
remote repository creation


861
00:42:36,376 --> 00:42:37,136
with a new project.


862
00:42:37,396 --> 00:42:40,926
And we've seen how we can
automatically manage multiple


863
00:42:40,926 --> 00:42:42,936
working copies so we're
not dealing with a mess


864
00:42:42,936 --> 00:42:45,626
of subversion externals
or get submodules.


865
00:42:45,836 --> 00:42:49,296
We can easily take all this
data, put in a manifest file


866
00:42:49,296 --> 00:42:51,896
in Xcode and share it with
our teammates to make sure


867
00:42:51,896 --> 00:42:54,136
that everyone knows exactly
what they have to have checked


868
00:42:54,136 --> 00:42:55,946
out in order to build
our projects.


869
00:42:56,356 --> 00:42:59,936
This is a very powerful tool
and it just makes getting setup


870
00:42:59,936 --> 00:43:02,616
with a new project for a new
team member so much easier.


871
00:43:03,006 --> 00:43:04,206
Or if you're working
with a large team


872
00:43:04,206 --> 00:43:05,566
and someone adds
something that you need


873
00:43:05,566 --> 00:43:07,696
and they didn't tell
you, it's all automatic.


874
00:43:08,006 --> 00:43:13,236
For more information about Xcode
Source Control or OS X server,


875
00:43:13,696 --> 00:43:16,136
please contact Dave Delong,
he's the app framework


876
00:43:16,136 --> 00:43:18,916
and developer tools
evangelist or ask a question


877
00:43:18,916 --> 00:43:20,236
on the Apple Developer forums.


878
00:43:20,316 --> 00:43:21,976
I'd like to thank you very
much for coming today.


879
00:43:22,516 --> 00:43:27,516
[ Applause ]


880
00:43:28,016 --> 00:43:37,356
[ Silence ]

