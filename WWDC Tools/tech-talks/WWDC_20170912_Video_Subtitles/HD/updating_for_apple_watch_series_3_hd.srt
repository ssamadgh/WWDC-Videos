1
00:00:01,000 --> 00:00:04,938
Updating your watchOS 4 app
for Apple Watch Series 3


2
00:00:04,938 --> 00:00:07,741
makes it easier than ever
to stay connected,


3
00:00:07,741 --> 00:00:11,511
and allows you to leverage
the new barometric altimeter.


4
00:00:11,778 --> 00:00:14,248
Apple Watch began
with a dependence upon


5
00:00:14,248 --> 00:00:18,218
its connection to iPhone
for all networking.


6
00:00:18,218 --> 00:00:20,854
However, since watchOS 2,


7
00:00:20,854 --> 00:00:24,858
Apple Watch has had the ability
to communicate over Wi-Fi


8
00:00:24,858 --> 00:00:27,394
if your iPhone is off
or out of range,


9
00:00:27,394 --> 00:00:30,130
and you are in range
of a Wi-Fi hotspot


10
00:00:30,130 --> 00:00:33,500
your iPhone has
previously connected to.


11
00:00:33,500 --> 00:00:36,036
Apple Watch Series 3
with cellular


12
00:00:36,036 --> 00:00:38,705
now allows your app
to communicate directly


13
00:00:38,705 --> 00:00:42,676
over a cellular connection
if your iPhone is out of range


14
00:00:42,676 --> 00:00:45,746
and Wi-Fi is not available
where you are.


15
00:00:45,746 --> 00:00:48,982
Not only can your app
update its data from anywhere,


16
00:00:48,982 --> 00:00:52,252
but push notifications
received by your iPhone


17
00:00:52,252 --> 00:00:55,455
will be automatically forwarded
to your Apple Watch


18
00:00:55,455 --> 00:00:57,891
when it is on
a cellular connection.


19
00:00:57,891 --> 00:00:59,726
To make sure that your app works


20
00:00:59,726 --> 00:01:02,663
over any and all
connection possibilities,


21
00:01:02,663 --> 00:01:06,466
it’s now even more important
to use URLSession


22
00:01:06,466 --> 00:01:09,803
for networking requests
in your watch app.


23
00:01:09,803 --> 00:01:13,807
URLSession is the class
used for creating and managing


24
00:01:13,807 --> 00:01:16,543
networking connections
in watchOS.


25
00:01:16,543 --> 00:01:19,479
Using URLSession
from your watch app code,


26
00:01:19,479 --> 00:01:22,082
allows you to initiate
network requests


27
00:01:22,082 --> 00:01:24,451
directly from Apple Watch.


28
00:01:24,451 --> 00:01:27,487
When your iPhone
is in range of Apple Watch,


29
00:01:27,487 --> 00:01:31,325
these requests will be proxied
behind the scenes through iPhone


30
00:01:31,325 --> 00:01:33,327
to leverage its connection.


31
00:01:33,327 --> 00:01:37,798
Otherwise, requests will occur
directly through Wi-Fi hotspots


32
00:01:37,798 --> 00:01:40,467
or cell connection.


33
00:01:40,467 --> 00:01:43,837
When using URLSession
while Apple Watch is only


34
00:01:43,837 --> 00:01:46,673
on a cellular connection,
be aware that sessions


35
00:01:46,673 --> 00:01:49,676
may be handled slightly
differently by the system.


36
00:01:49,676 --> 00:01:51,945
Let’s look at the different
types of sessions


37
00:01:51,945 --> 00:01:53,680
and what you can expect.


38
00:01:53,680 --> 00:01:56,049
For default
and ephemeral sessions,


39
00:01:56,049 --> 00:01:59,252
these type of sessions
will work as they normally do


40
00:01:59,252 --> 00:02:01,888
when the application
state is active.


41
00:02:01,888 --> 00:02:04,558
You can check the current
application state using


42
00:02:04,558 --> 00:02:10,663
the applicationState property on
the shared WKExtension object.


43
00:02:10,663 --> 00:02:14,267
However, these type of sessions
are not allowed


44
00:02:14,267 --> 00:02:18,205
if the application state
is inactive or background.


45
00:02:18,205 --> 00:02:22,476
There is one caveat to this,
as they are allowed if your app


46
00:02:22,476 --> 00:02:26,046
is currently using
the background navigation mode.


47
00:02:26,046 --> 00:02:29,082
Next, let’s look at
background sessions.


48
00:02:29,082 --> 00:02:32,753
With background sessions,
smaller transfers are preferred,


49
00:02:32,753 --> 00:02:36,289
and any transfer could
be deferred until a point


50
00:02:36,289 --> 00:02:38,325
where the system has
a better opportunity


51
00:02:38,325 --> 00:02:41,194
to make network requests.


52
00:02:41,194 --> 00:02:43,330
This is determined
at a system level


53
00:02:43,330 --> 00:02:47,367
and takes into account many
facets such as power level,


54
00:02:47,367 --> 00:02:48,735
connection strength,


55
00:02:48,735 --> 00:02:52,906
and tasks other apps
are needing to accomplish.


56
00:02:52,906 --> 00:02:56,176
With background sessions,
once the request has been made


57
00:02:56,176 --> 00:02:58,011
and a response has returned,


58
00:02:58,011 --> 00:03:00,680
if your app is in
the frontmostapp state,


59
00:03:00,680 --> 00:03:02,716
your app
will be woken immediately


60
00:03:02,716 --> 00:03:05,318
and handed the response.


61
00:03:05,318 --> 00:03:07,487
Outside of
the frontmost app state,


62
00:03:07,487 --> 00:03:09,923
the system will wake
your app with the response


63
00:03:09,923 --> 00:03:12,759
when it determines
it is a good time to do so,


64
00:03:12,759 --> 00:03:16,163
or when the application state
becomes active again.


65
00:03:18,165 --> 00:03:21,635
Now let’s go over a few
best practices to make sure


66
00:03:21,635 --> 00:03:25,972
you get the most out of your
networking code on watchOS.


67
00:03:25,972 --> 00:03:29,843
The first is to use the new
waitsForConnectivity property


68
00:03:29,843 --> 00:03:33,647
on your
URLSessionConfiguration object.


69
00:03:33,647 --> 00:03:36,817
Setting this to true
on a non-background session


70
00:03:36,817 --> 00:03:39,553
will allow the system
to wait until connectivity


71
00:03:39,553 --> 00:03:41,755
is sufficient
to make the request,


72
00:03:41,755 --> 00:03:44,391
instead of immediately failing.


73
00:03:44,391 --> 00:03:45,826
There is a delegate method


74
00:03:45,826 --> 00:03:47,828
to know when
the connection is waiting,


75
00:03:47,828 --> 00:03:50,564
so you can handle
the situation.


76
00:03:50,564 --> 00:03:54,101
We encourage using this property
for all requests that are not


77
00:03:54,101 --> 00:03:58,438
dependent on being immediate,
since they will fire immediately


78
00:03:58,438 --> 00:04:01,208
as long as connectivity
is available.


79
00:04:01,208 --> 00:04:04,244
If not, the system
will wait on making the request


80
00:04:04,244 --> 00:04:07,047
until connectivity resumes.


81
00:04:07,047 --> 00:04:10,283
This allows you to focus
on what makes your app great


82
00:04:10,283 --> 00:04:13,253
instead of focusing
on reachability code.


83
00:04:14,988 --> 00:04:17,491
Using
the applicationWillResignActive


84
00:04:17,491 --> 00:04:20,627
method on
the WKExtensionDelegate object


85
00:04:20,627 --> 00:04:22,996
allows you
to optimize what happens


86
00:04:22,996 --> 00:04:26,967
when the application state
changes from active to inactive


87
00:04:26,967 --> 00:04:30,904
or background when you have
a networking request in process.


88
00:04:30,904 --> 00:04:33,940
In other words, when someone
puts their wrist down


89
00:04:33,940 --> 00:04:35,909
while using your app.


90
00:04:35,909 --> 00:04:37,177
By using this method,


91
00:04:37,177 --> 00:04:40,147
you can decide to cancel
your existing request,


92
00:04:40,147 --> 00:04:43,250
or create it again
as a background session.


93
00:04:44,351 --> 00:04:46,786
Finally, it’s always best to use


94
00:04:46,786 --> 00:04:50,924
the shared singleton URLSession
object for multiple tasks,


95
00:04:50,924 --> 00:04:54,628
instead of creating
a session for each task.


96
00:04:54,628 --> 00:04:57,063
Creating and invalidating
many sessions


97
00:04:57,063 --> 00:04:59,933
creates unnecessary overhead
for the system,


98
00:04:59,933 --> 00:05:02,569
and it’s best
to use the shared session,


99
00:05:02,569 --> 00:05:04,371
or as few as needed.


100
00:05:05,805 --> 00:05:08,808
Let’s move on to the
Watch Connectivity framework.


101
00:05:08,808 --> 00:05:11,478
As Apple Watch becomes
more independent


102
00:05:11,478 --> 00:05:12,779
with its connectivity,


103
00:05:12,779 --> 00:05:16,616
it’s important to identify where
using Watch Connectivity


104
00:05:16,616 --> 00:05:20,053
can help make a great
watch app experience.


105
00:05:20,053 --> 00:05:22,722
The initial launch of an app
on Apple Watch


106
00:05:22,722 --> 00:05:26,092
may require a token for
authentication with a service.


107
00:05:26,092 --> 00:05:28,461
Using Watch Connectivity
is a great way


108
00:05:28,461 --> 00:05:31,665
to pass this information
that may already be established


109
00:05:31,665 --> 00:05:33,700
in the iPhone app.


110
00:05:33,700 --> 00:05:36,002
If your app is a coaching app
for workouts,


111
00:05:36,002 --> 00:05:37,270
or something similar,


112
00:05:37,270 --> 00:05:40,574
you may want to initially
transfer some larger audio files


113
00:05:40,574 --> 00:05:43,977
to Apple Watch once someone
begins using your app.


114
00:05:43,977 --> 00:05:47,347
Watch Connectivity can handle
these type of transfers,


115
00:05:47,347 --> 00:05:50,350
and can help your app
installation remain small


116
00:05:50,350 --> 00:05:53,954
and supplement the app
with resources later.


117
00:05:53,954 --> 00:05:57,657
The updateApplicationContext
method on WCSession


118
00:05:57,657 --> 00:06:01,361
allows you to have the iPhone
send over a dictionary of data


119
00:06:01,361 --> 00:06:05,799
that the watch app has access to
the next time it activates.


120
00:06:05,799 --> 00:06:09,336
This is a good way to keep fresh
data flowing to the watch app


121
00:06:09,336 --> 00:06:13,106
in case of situations where
the iPhone app gets newer data


122
00:06:13,106 --> 00:06:17,644
and the watch app hasn’t had
an opportunity to update yet.


123
00:06:17,644 --> 00:06:21,181
When the watch app launches,
you can display this newer data


124
00:06:21,181 --> 00:06:23,717
while you initiate
a network request


125
00:06:23,717 --> 00:06:25,885
for more up-to-date data.


126
00:06:25,885 --> 00:06:28,388
It’s very important
that you build in the ability


127
00:06:28,388 --> 00:06:31,458
to fallback
to a network request.


128
00:06:31,458 --> 00:06:33,827
With Apple Watch
being more independent,


129
00:06:33,827 --> 00:06:36,062
there is less guarantee
that your watch app


130
00:06:36,062 --> 00:06:39,299
will have up-to-date data
from the iPhone.


131
00:06:41,401 --> 00:06:44,904
Now let’s turn our attention
to the new barometric altimeter


132
00:06:44,904 --> 00:06:46,906
in Apple Watch Series 3,


133
00:06:46,906 --> 00:06:50,577
which enables you to now add
elevation gain or descent


134
00:06:50,577 --> 00:06:52,812
to workout summaries
when someone is away


135
00:06:52,812 --> 00:06:54,381
from their iPhone.


136
00:06:54,381 --> 00:06:56,483
This also helps provide
more accurate


137
00:06:56,483 --> 00:06:59,552
active energy burned
calculations to HealthKit,


138
00:06:59,552 --> 00:07:01,554
and in turn, your app.


139
00:07:03,323 --> 00:07:05,625
Using Core Motion,
your app can now


140
00:07:05,625 --> 00:07:08,628
be informed about
relative altitude changes


141
00:07:08,628 --> 00:07:12,165
from where your app begins
receiving updates.


142
00:07:12,165 --> 00:07:16,102
Relative altitude changes
means that if you begin updates


143
00:07:16,102 --> 00:07:19,072
while standing at
an elevation of 800 meters,


144
00:07:19,072 --> 00:07:21,941
and move 50 meters
higher in elevation,


145
00:07:21,941 --> 00:07:26,513
the relative altitude value
will be 50 meters.


146
00:07:26,513 --> 00:07:29,616
If you move 80 meters lower
than where you began,


147
00:07:29,616 --> 00:07:35,488
the relative altitude value
will then be negative 80 meters.


148
00:07:35,488 --> 00:07:38,958
Core Motion includes
the CMAltimeter class,


149
00:07:38,958 --> 00:07:41,461
which you will use
to receive updates.


150
00:07:41,461 --> 00:07:44,631
CMAltimeter can determine
and tell you if the device


151
00:07:44,631 --> 00:07:48,935
has the capabilities to give
relative altitude updates.


152
00:07:48,935 --> 00:07:50,770
You should always
check this first


153
00:07:50,770 --> 00:07:55,642
before asking Core Motion
more about relative altitude.


154
00:07:55,642 --> 00:07:59,412
In watchOS 4, CMAltimeter
can now provide you with


155
00:07:59,412 --> 00:08:03,783
the authorization status
for Motion and Fitness activity.


156
00:08:03,783 --> 00:08:06,419
Depending on what your app
is allowed to access,


157
00:08:06,419 --> 00:08:09,089
you may need to handle cases
where authorization


158
00:08:09,089 --> 00:08:11,558
is denied or restricted.


159
00:08:11,558 --> 00:08:15,595
Finally, CMAltimeter provides
the ability to start and stop


160
00:08:15,595 --> 00:08:18,331
relative altitude updates.


161
00:08:18,331 --> 00:08:21,735
These updates are delivered on
a two-and-a-half second cadence


162
00:08:21,735 --> 00:08:24,504
on watchOS 4,
due to signal filtering


163
00:08:24,504 --> 00:08:27,507
that we apply
to the raw sensor data.


164
00:08:27,507 --> 00:08:29,843
When you receive an update,
you will have a handler


165
00:08:29,843 --> 00:08:33,246
that passes you
a CMAltitudeData object.


166
00:08:34,681 --> 00:08:37,183
The CMAltitudeData object
gives you


167
00:08:37,183 --> 00:08:41,054
the relative altitude change
data for that update.


168
00:08:41,054 --> 00:08:43,990
This includes
the following pieces of data:


169
00:08:43,990 --> 00:08:45,759
first is the timestamp.


170
00:08:45,759 --> 00:08:48,695
This object is a time interval
and is given as


171
00:08:48,695 --> 00:08:52,031
the number of seconds
since the reference date.


172
00:08:52,031 --> 00:08:54,334
To convert this value
to a Date object,


173
00:08:54,334 --> 00:08:57,537
you can easily use the
timeIntervalSinceReferenceDate


174
00:08:57,537 --> 00:09:00,306
initializer method
on the Date class.


175
00:09:02,041 --> 00:09:05,011
The next property
is relative altitude.


176
00:09:05,011 --> 00:09:07,213
This represents
the change in altitude


177
00:09:07,213 --> 00:09:09,315
since the last reported event.


178
00:09:09,315 --> 00:09:12,051
Remember that this
will be a relative value,


179
00:09:12,051 --> 00:09:15,221
so if the device moves
lower or higher in elevation,


180
00:09:15,221 --> 00:09:18,224
this value will represent
the change in elevation


181
00:09:18,224 --> 00:09:20,427
and not the specific altitude.


182
00:09:20,427 --> 00:09:22,896
This value is given in meters.


183
00:09:22,896 --> 00:09:25,064
The last property is pressure.


184
00:09:25,064 --> 00:09:28,635
Since the altimeter onboard
is a barometric altimeter,


185
00:09:28,635 --> 00:09:31,905
Core Motion can provide you
with the recorded pressure


186
00:09:31,905 --> 00:09:34,641
alongside the relative
altitude change.


187
00:09:34,641 --> 00:09:37,076
This value is given
in kilopascals.


188
00:09:39,846 --> 00:09:42,248
Let’s walk through
an example of how to start


189
00:09:42,248 --> 00:09:45,385
relative altitude updates
using CMAltimeter,


190
00:09:45,385 --> 00:09:48,755
as well as how to properly
check for device capabilities


191
00:09:48,755 --> 00:09:51,090
and authorization status.


192
00:09:51,090 --> 00:09:54,260
Previous to this
beginAltitudeUpdates method,


193
00:09:54,260 --> 00:09:57,297
I’ve imported the Core Motion
framework into my class


194
00:09:57,297 --> 00:10:01,100
and created an instance
variable called altimeter,


195
00:10:01,100 --> 00:10:03,336
of type CMAltimeter.


196
00:10:03,336 --> 00:10:05,939
That’s the object we will use
to start and stop


197
00:10:05,939 --> 00:10:09,476
relative altitude updates
later on.


198
00:10:09,476 --> 00:10:12,545
In our function, the first thing
we should do is check


199
00:10:12,545 --> 00:10:16,683
to see if relative altitude
is available on the device.


200
00:10:16,683 --> 00:10:19,586
If it’s not, we may want
to alter the UI


201
00:10:19,586 --> 00:10:22,856
to let the person know that
this data will not be available


202
00:10:22,856 --> 00:10:25,391
as they use the app.


203
00:10:25,391 --> 00:10:28,795
Next, we need to check
if authorization status


204
00:10:28,795 --> 00:10:30,964
is denied or restricted.


205
00:10:30,964 --> 00:10:33,800
Here, we’re making sure
authorization status


206
00:10:33,800 --> 00:10:37,437
isn’t denied, nor restricted.


207
00:10:37,437 --> 00:10:41,608
If the authorization status
is authorized we can continue,


208
00:10:41,608 --> 00:10:44,777
and if the authorization status
is not determined,


209
00:10:44,777 --> 00:10:47,046
the system
will prompt for access,


210
00:10:47,046 --> 00:10:51,084
if the person has not
been previously prompted.


211
00:10:51,084 --> 00:10:54,988
Once the app is authorized to
use Motion and Fitness activity,


212
00:10:54,988 --> 00:11:00,760
we may ask Core Motion to start
relative altitude updates.


213
00:11:00,760 --> 00:11:04,931
This call on a previously
created CMAltimeter object


214
00:11:04,931 --> 00:11:07,333
has us pass in
which operation queue


215
00:11:07,333 --> 00:11:09,903
we’d like to receive updates on,


216
00:11:09,903 --> 00:11:13,239
as well as provides a handler
to run each time new data


217
00:11:13,239 --> 00:11:16,042
is handed to us by Core Motion.


218
00:11:16,042 --> 00:11:18,645
In this case,
we’ve set the operation queue


219
00:11:18,645 --> 00:11:23,449
to the main queue since we will
be updating UI in the handler.


220
00:11:23,449 --> 00:11:28,521
Moving to the handler, it passes
us a CMAltitudeData object,


221
00:11:28,521 --> 00:11:31,057
containing the values
we are interested in,


222
00:11:31,057 --> 00:11:34,027
or possibly an error
if something went wrong


223
00:11:34,027 --> 00:11:36,362
in the update.


224
00:11:36,362 --> 00:11:39,365
After ensuring we have
no error to handle,


225
00:11:39,365 --> 00:11:42,035
we simply grab
the relativeAltitude value


226
00:11:42,035 --> 00:11:44,637
from the CMAltitudeData object,


227
00:11:44,637 --> 00:11:48,641
store its float value,
and use that to update the UI.


228
00:11:48,641 --> 00:11:51,177
We could just as easily
use the timestamp


229
00:11:51,177 --> 00:11:54,948
or pressure properties,
as mentioned earlier.


230
00:11:54,948 --> 00:11:57,550
Once we no longer need
to receive updates,


231
00:11:57,550 --> 00:12:00,887
we tell Core Motion to stop
relative altitude updates,


232
00:12:00,887 --> 00:12:04,524
using our previously used
CMAltimeter object.


233
00:12:04,524 --> 00:12:05,725
And that’s it!


234
00:12:07,894 --> 00:12:10,863
For more information about
developing for Apple Watch


235
00:12:10,863 --> 00:12:14,067
and using URLSession
and Core Motion,


236
00:12:14,067 --> 00:12:17,236
please view the resources
links at the following page.


237
00:12:17,236 --> 00:12:18,371
Thank you.

