1
00:00:07,516 --> 00:00:16,516
[ Music ]


2
00:00:17,516 --> 00:00:24,516
[ Applause ]


3
00:00:25,016 --> 00:00:26,496
>> Good morning, everyone, and


4
00:00:26,496 --> 00:00:28,386
welcome to New Ways to Work with


5
00:00:28,386 --> 00:00:28,826
Workouts.


6
00:00:29,426 --> 00:00:30,476
My name is Niharika [phonetic].


7
00:00:30,686 --> 00:00:31,976
I'm an engineer on the Fitness


8
00:00:31,976 --> 00:00:33,766
team here at Apple, and today


9
00:00:33,766 --> 00:00:34,746
I'm going to be joined by my


10
00:00:34,746 --> 00:00:36,346
colleague Karim, an engineer on


11
00:00:36,346 --> 00:00:37,046
the Health team.


12
00:00:37,616 --> 00:00:39,506
And we are so excited to share


13
00:00:39,506 --> 00:00:40,546
with all of you some of the


14
00:00:40,546 --> 00:00:41,756
brand-new features and


15
00:00:41,756 --> 00:00:42,996
capabilities that have been


16
00:00:43,066 --> 00:00:45,416
added to HealthKit in iOS 12 and


17
00:00:45,416 --> 00:00:46,186
watchOS 5.


18
00:00:49,216 --> 00:00:51,076
Apple Watch was released 3 years


19
00:00:51,076 --> 00:00:52,356
ago now, and since the


20
00:00:52,356 --> 00:00:54,126
beginning, our users have loved


21
00:00:54,126 --> 00:00:55,426
engaging with its health and


22
00:00:55,426 --> 00:00:56,166
fitness features.


23
00:00:56,646 --> 00:00:57,576
They've loved closing their


24
00:00:57,656 --> 00:00:59,406
rings and earning achievements,


25
00:00:59,406 --> 00:01:01,076
sharing with their friends, but


26
00:01:01,076 --> 00:01:02,666
they've especially loved to do


27
00:01:02,666 --> 00:01:03,206
workouts.


28
00:01:04,215 --> 00:01:05,806
And the watch has really become


29
00:01:06,006 --> 00:01:07,526
just the beginning of what is a


30
00:01:07,526 --> 00:01:09,416
vibrant, evolving ecosystem, and


31
00:01:09,806 --> 00:01:11,826
that is thanks to contributions


32
00:01:11,916 --> 00:01:13,606
from developers like all of you.


33
00:01:15,006 --> 00:01:16,586
In just the last quarter of


34
00:01:16,586 --> 00:01:18,996
2017, there were over 200


35
00:01:18,996 --> 00:01:21,216
million downloads of apps in the


36
00:01:21,216 --> 00:01:22,736
Health and Fitness category on


37
00:01:22,796 --> 00:01:24,746
the App Store, and that number


38
00:01:24,746 --> 00:01:25,896
itself is incredible.


39
00:01:26,206 --> 00:01:27,906
Two hundred million is so, so


40
00:01:27,906 --> 00:01:28,286
cool.


41
00:01:28,786 --> 00:01:29,866
But more than that, it's a


42
00:01:29,866 --> 00:01:31,226
testament to 2 things.


43
00:01:31,516 --> 00:01:33,456
Number 1, it's a testament to


44
00:01:33,456 --> 00:01:35,206
the dedication all of you have


45
00:01:35,206 --> 00:01:36,896
shown in getting these great


46
00:01:36,896 --> 00:01:38,246
user experiences out there.


47
00:01:38,696 --> 00:01:40,256
But number 2, it's a sign that


48
00:01:40,256 --> 00:01:41,276
people really care.


49
00:01:41,626 --> 00:01:43,216
People are engaged in the space,


50
00:01:43,256 --> 00:01:44,976
and they are so excited about


51
00:01:44,976 --> 00:01:46,366
what all of you are putting out


52
00:01:46,406 --> 00:01:46,756
there.


53
00:01:48,246 --> 00:01:49,116
And at the heart of this


54
00:01:49,116 --> 00:01:50,976
ecosystem are these 2 apps,


55
00:01:50,976 --> 00:01:52,406
Activity and Health.


56
00:01:52,936 --> 00:01:54,586
Activity is a home for you to


57
00:01:54,586 --> 00:01:56,136
visualize just that -- your


58
00:01:56,136 --> 00:01:56,736
activity data.


59
00:01:57,226 --> 00:01:58,506
You can see your workouts.


60
00:01:58,506 --> 00:02:00,306
You can see calories, exercise


61
00:02:00,306 --> 00:02:00,646
minutes.


62
00:02:01,326 --> 00:02:02,786
And Health is all of that and


63
00:02:02,786 --> 00:02:03,156
more.


64
00:02:03,826 --> 00:02:05,666
And of course, at the heart of


65
00:02:05,666 --> 00:02:06,956
all of that, which is the reason


66
00:02:06,956 --> 00:02:08,716
we're here today, is HealthKit.


67
00:02:10,186 --> 00:02:12,286
And so we have a ton of exciting


68
00:02:12,286 --> 00:02:13,976
things to talk about today, but


69
00:02:13,976 --> 00:02:15,346
before we get started with any


70
00:02:15,346 --> 00:02:16,566
of that, we have to talk about


71
00:02:16,566 --> 00:02:17,946
something extremely important,


72
00:02:18,196 --> 00:02:19,676
and that is privacy and


73
00:02:19,676 --> 00:02:21,796
authorization, because data is


74
00:02:21,796 --> 00:02:23,446
sensitive, especially health


75
00:02:23,496 --> 00:02:25,146
data, and it is so important to


76
00:02:25,146 --> 00:02:26,426
make sure that you have a


77
00:02:26,426 --> 00:02:28,516
comprehensive privacy story when


78
00:02:28,516 --> 00:02:30,676
working with your apps.


79
00:02:30,776 --> 00:02:32,836
Next, Karim is going to share


80
00:02:32,836 --> 00:02:34,366
our brand-new workout features,


81
00:02:34,726 --> 00:02:36,026
which have made it easier than


82
00:02:36,026 --> 00:02:38,146
ever before to develop a robust


83
00:02:38,146 --> 00:02:39,026
workout app.


84
00:02:39,296 --> 00:02:41,216
And lastly, I'm so excited to


85
00:02:41,216 --> 00:02:42,656
share our new Quantity series


86
00:02:42,716 --> 00:02:44,646
API, which is a brand-new way to


87
00:02:44,646 --> 00:02:46,256
both store and relate


88
00:02:46,336 --> 00:02:47,346
high-frequency data.


89
00:02:48,726 --> 00:02:49,716
So let's get started.


90
00:02:52,536 --> 00:02:53,946
Like I mentioned, privacy and


91
00:02:53,946 --> 00:02:55,636
authorization has to come at the


92
00:02:55,636 --> 00:02:57,596
beginning of any development


93
00:02:57,596 --> 00:02:57,886
story.


94
00:02:57,886 --> 00:02:59,656
And at Apple, we think about


95
00:02:59,656 --> 00:03:02,796
privacy in 1 simple way: Privacy


96
00:03:03,016 --> 00:03:03,916
is about people.


97
00:03:04,696 --> 00:03:06,276
And HealthKit is designed with


98
00:03:06,276 --> 00:03:06,986
this in mind.


99
00:03:07,146 --> 00:03:08,856
HealthKit is designed to put


100
00:03:08,856 --> 00:03:10,756
users in control of their data.


101
00:03:11,176 --> 00:03:13,296
Users have the ability to grant


102
00:03:13,296 --> 00:03:14,796
access as well as revoke


103
00:03:14,796 --> 00:03:15,676
whenever they want.


104
00:03:16,266 --> 00:03:17,986
And as developers, all of you


105
00:03:17,986 --> 00:03:19,406
are the last link of that


106
00:03:19,406 --> 00:03:20,856
puzzle, and we want to make sure


107
00:03:21,136 --> 00:03:23,136
we are giving you the tools to


108
00:03:23,136 --> 00:03:24,696
make sure that your users'


109
00:03:24,696 --> 00:03:25,676
privacy is respected.


110
00:03:25,676 --> 00:03:28,786
And we think about this in a few


111
00:03:28,786 --> 00:03:29,596
simple rules.


112
00:03:29,796 --> 00:03:31,676
Number 1 is this idea of


113
00:03:31,726 --> 00:03:33,076
proportional collection, and


114
00:03:33,476 --> 00:03:34,836
this is the idea that you should


115
00:03:34,836 --> 00:03:37,356
only be collecting data relative


116
00:03:37,356 --> 00:03:38,536
to what your app needs.


117
00:03:38,876 --> 00:03:40,246
And this isn't a fixed set of


118
00:03:40,246 --> 00:03:40,506
data.


119
00:03:40,506 --> 00:03:42,566
At the beginning, this amount


120
00:03:42,566 --> 00:03:43,406
might be small.


121
00:03:43,406 --> 00:03:45,196
As your use cases, as your


122
00:03:45,196 --> 00:03:46,916
features grow, the amount of


123
00:03:46,916 --> 00:03:48,076
data you need to collect might


124
00:03:48,076 --> 00:03:50,126
be more, but it is so important


125
00:03:50,126 --> 00:03:51,656
that you only collect what you


126
00:03:51,656 --> 00:03:53,276
need at a specific time.


127
00:03:54,266 --> 00:03:56,006
And second is the idea that


128
00:03:56,006 --> 00:03:57,736
HealthKit authorization can


129
00:03:57,736 --> 00:03:58,326
change.


130
00:03:58,596 --> 00:03:59,996
And this one's a little nuanced.


131
00:04:00,306 --> 00:04:02,526
For example, if a user resets


132
00:04:02,566 --> 00:04:04,036
their location and privacy data,


133
00:04:04,416 --> 00:04:05,606
their location and privacy


134
00:04:05,606 --> 00:04:08,066
setting, it is so important for


135
00:04:08,066 --> 00:04:09,566
you to make sure you're honoring


136
00:04:09,566 --> 00:04:10,436
that, and it is your


137
00:04:10,436 --> 00:04:12,076
responsibility to make sure you


138
00:04:12,076 --> 00:04:12,516
do that.


139
00:04:13,016 --> 00:04:14,346
And the best way to do this is


140
00:04:14,346 --> 00:04:15,746
to treat HealthKit as the source


141
00:04:15,746 --> 00:04:18,576
of truth because HealthKit will


142
00:04:18,576 --> 00:04:20,236
update to reflect that


143
00:04:20,236 --> 00:04:21,946
authorization status, and it is


144
00:04:21,986 --> 00:04:23,126
so important to make sure you


145
00:04:23,126 --> 00:04:25,096
don't cache any of that and make


146
00:04:25,096 --> 00:04:26,356
sure you're always turning to


147
00:04:26,356 --> 00:04:28,336
HealthKit to ask what data you


148
00:04:28,336 --> 00:04:29,126
have access to.


149
00:04:29,786 --> 00:04:31,486
And these 2 ideas can be


150
00:04:31,596 --> 00:04:33,546
distilled into 3 simple rules.


151
00:04:34,546 --> 00:04:35,506
And when we're thinking about


152
00:04:35,506 --> 00:04:36,816
privacy and authorization, you


153
00:04:36,816 --> 00:04:38,246
should ask for only what you


154
00:04:38,246 --> 00:04:40,636
need, only when you need it, and


155
00:04:40,636 --> 00:04:43,066
every single time you need it.


156
00:04:44,006 --> 00:04:46,596
And in code, this is just as


157
00:04:46,596 --> 00:04:47,066
simple.


158
00:04:47,736 --> 00:04:49,306
Let's say I'm creating a workout


159
00:04:49,306 --> 00:04:50,336
app, and I'm just getting


160
00:04:50,336 --> 00:04:51,876
started, and, of course, I need


161
00:04:51,876 --> 00:04:53,036
to start with privacy and


162
00:04:53,036 --> 00:04:53,776
authorization.


163
00:04:54,326 --> 00:04:55,536
First, since I'm creating a


164
00:04:55,536 --> 00:04:57,276
workout app, I want to share the


165
00:04:57,276 --> 00:04:59,866
workout type, so I explicitly


166
00:04:59,866 --> 00:05:01,186
declare that I'm going to be


167
00:05:01,186 --> 00:05:02,156
sharing the workout type.


168
00:05:03,006 --> 00:05:04,376
Next, since I'm just getting


169
00:05:04,376 --> 00:05:05,946
started, I only have a few


170
00:05:05,946 --> 00:05:07,586
things that I'm trying to track.


171
00:05:07,586 --> 00:05:08,666
I want to be able to track my


172
00:05:08,666 --> 00:05:10,876
user's heart rate, calories, as


173
00:05:10,876 --> 00:05:12,246
well as distance walking and


174
00:05:12,246 --> 00:05:12,586
running.


175
00:05:12,836 --> 00:05:14,036
And this is all I need right


176
00:05:14,036 --> 00:05:16,326
now, and so that's all I'm going


177
00:05:16,326 --> 00:05:17,856
to ask for.


178
00:05:18,076 --> 00:05:19,856
And lastly, on my healthStore, I


179
00:05:19,856 --> 00:05:21,526
request authorization for just


180
00:05:21,526 --> 00:05:21,836
that.


181
00:05:21,916 --> 00:05:23,396
I request my types to share and


182
00:05:23,396 --> 00:05:24,366
my types to read.


183
00:05:24,816 --> 00:05:26,586
And with these 3 simple steps,


184
00:05:26,646 --> 00:05:27,946
we can really make sure that we


185
00:05:27,946 --> 00:05:29,896
are taking the steps necessary


186
00:05:29,936 --> 00:05:31,466
to respect our user's privacy.


187
00:05:32,066 --> 00:05:35,436
And privacy is so important


188
00:05:35,436 --> 00:05:36,966
because great apps have great


189
00:05:36,966 --> 00:05:38,586
privacy, and it's so important


190
00:05:38,586 --> 00:05:39,956
that you give attention to this


191
00:05:39,956 --> 00:05:41,206
at the beginning of any


192
00:05:41,206 --> 00:05:42,116
development process.


193
00:05:42,666 --> 00:05:44,006
And now that we have access to


194
00:05:44,006 --> 00:05:46,476
our users' data, I'm so excited


195
00:05:46,476 --> 00:05:47,726
to introduce Karim [phonetic] to


196
00:05:47,726 --> 00:05:49,136
tell you all about the brand-new


197
00:05:49,136 --> 00:05:50,036
workout features.


198
00:05:51,516 --> 00:05:56,096
[ Applause ]


199
00:05:56,596 --> 00:05:57,946
>> Hello, everyone.


200
00:05:58,576 --> 00:06:00,466
Thank you so much for joining us


201
00:06:00,466 --> 00:06:00,736
today.


202
00:06:01,306 --> 00:06:03,256
I am really excited to tell you


203
00:06:03,386 --> 00:06:05,246
all about the new workout API.


204
00:06:06,526 --> 00:06:08,036
If you're new to HealthKit,


205
00:06:08,526 --> 00:06:10,876
you'll see just how easy it is


206
00:06:11,146 --> 00:06:12,896
to create a full-featured


207
00:06:12,896 --> 00:06:14,536
workout app from scratch.


208
00:06:15,356 --> 00:06:16,856
If, on the other hand, you have


209
00:06:17,156 --> 00:06:18,486
a workout app on the App Store,


210
00:06:19,036 --> 00:06:20,746
we'll show you all of the great


211
00:06:20,746 --> 00:06:22,796
new features of the API that


212
00:06:22,796 --> 00:06:24,226
your app can benefit from.


213
00:06:25,076 --> 00:06:26,496
So let's dive in.


214
00:06:26,966 --> 00:06:29,766
First, I would like to take a


215
00:06:29,766 --> 00:06:32,556
look at the general workout app


216
00:06:32,906 --> 00:06:33,556
life cycle.


217
00:06:34,196 --> 00:06:35,616
So let's say we're building a


218
00:06:35,766 --> 00:06:37,926
workout app to track our users'


219
00:06:37,926 --> 00:06:41,606
activity, and the first step is


220
00:06:41,606 --> 00:06:43,506
to set up the app.


221
00:06:44,246 --> 00:06:46,146
So at this state here, we know


222
00:06:46,146 --> 00:06:48,086
that the user wants to perform a


223
00:06:48,086 --> 00:06:50,586
workout, the type of activity,


224
00:06:51,046 --> 00:06:52,546
and we need to make sure that


225
00:06:52,546 --> 00:06:54,556
our UI is ready for that.


226
00:06:55,916 --> 00:06:58,596
Once the setup is done, we can


227
00:06:58,596 --> 00:07:00,506
go ahead and start the workout.


228
00:07:01,776 --> 00:07:03,766
So after this point, the user


229
00:07:03,766 --> 00:07:06,086
will be actively working out.


230
00:07:06,826 --> 00:07:08,796
And then, of course, after some


231
00:07:08,796 --> 00:07:12,046
time, the user will want to end


232
00:07:12,046 --> 00:07:12,616
the workout.


233
00:07:13,436 --> 00:07:15,666
And from there, we can save this


234
00:07:15,666 --> 00:07:17,216
workout and all of its


235
00:07:17,216 --> 00:07:19,316
associated data in HealthKit.


236
00:07:20,596 --> 00:07:23,766
So this is the general life


237
00:07:23,766 --> 00:07:25,616
cycle of a workout app.


238
00:07:26,356 --> 00:07:29,116
Now, let's see what happens when


239
00:07:29,116 --> 00:07:30,086
the user is active.


240
00:07:30,746 --> 00:07:34,236
With your user interface at the


241
00:07:34,236 --> 00:07:36,826
center, one of the tasks that


242
00:07:36,826 --> 00:07:39,266
you want to accomplish is to


243
00:07:39,376 --> 00:07:41,736
collect data that is relevant to


244
00:07:41,736 --> 00:07:44,096
the workout and displayed in


245
00:07:44,096 --> 00:07:45,376
your user interface.


246
00:07:46,396 --> 00:07:47,926
And you also want to make sure


247
00:07:47,926 --> 00:07:50,116
that the user can control the


248
00:07:50,116 --> 00:07:52,606
state of the session so that the


249
00:07:52,706 --> 00:07:54,656
user can pause or resume the


250
00:07:54,656 --> 00:07:55,116
workout.


251
00:07:55,576 --> 00:07:59,626
And if you're familiar with


252
00:07:59,626 --> 00:08:01,726
HealthKit, you might know about


253
00:08:01,916 --> 00:08:04,866
HKWorkoutSession on watchOS.


254
00:08:06,156 --> 00:08:09,126
HKWorkoutSession allows you to


255
00:08:09,126 --> 00:08:11,966
handle a few of these steps in


256
00:08:11,966 --> 00:08:12,686
the life cycle.


257
00:08:13,256 --> 00:08:16,646
It will prepare the device's


258
00:08:16,646 --> 00:08:19,546
sensors for data collection set


259
00:08:19,916 --> 00:08:21,586
so that you can accurately


260
00:08:21,646 --> 00:08:24,126
collect data that's relevant to


261
00:08:24,126 --> 00:08:25,906
the workout like calories and


262
00:08:25,906 --> 00:08:26,966
heart rate.


263
00:08:27,646 --> 00:08:29,476
It will also allow your


264
00:08:29,476 --> 00:08:31,166
application to run in the


265
00:08:31,166 --> 00:08:34,746
background when the workout is


266
00:08:36,366 --> 00:08:36,515
active.


267
00:08:36,716 --> 00:08:39,316
You'll be, also be able to use


268
00:08:39,316 --> 00:08:41,196
HKWorkoutSession to control the


269
00:08:41,196 --> 00:08:43,056
state of this, the workout.


270
00:08:44,436 --> 00:08:45,996
And finally, you can also


271
00:08:46,376 --> 00:08:48,756
generate events like swimming


272
00:08:48,756 --> 00:08:49,906
laps in segments.


273
00:08:50,446 --> 00:08:53,396
But of course, this is not


274
00:08:53,396 --> 00:08:57,426
enough, and you also need to


275
00:08:57,756 --> 00:09:00,236
collect data that is relevant to


276
00:09:00,236 --> 00:09:02,306
the workout that's generated by


277
00:09:02,306 --> 00:09:04,826
the device and be able to save


278
00:09:04,826 --> 00:09:06,136
it all in HealthKit.


279
00:09:07,096 --> 00:09:09,816
And to do just that, I'm really


280
00:09:09,816 --> 00:09:12,256
happy to introduce a new class,


281
00:09:12,746 --> 00:09:14,206
HKWorkoutBuilder.


282
00:09:15,316 --> 00:09:16,746
The workout builder is your


283
00:09:16,746 --> 00:09:19,896
one-stop shop to collecting data


284
00:09:19,896 --> 00:09:21,816
and saving it in HealthKit.


285
00:09:22,366 --> 00:09:25,476
So the builder will create and


286
00:09:25,476 --> 00:09:28,826
save an HKWorkout object, which


287
00:09:28,826 --> 00:09:30,776
is a representation of a workout


288
00:09:30,776 --> 00:09:31,346
in HealthKit.


289
00:09:33,406 --> 00:09:35,676
You can then add samples,


290
00:09:36,036 --> 00:09:39,186
events, and also custom metadata


291
00:09:39,326 --> 00:09:41,346
to the builder while building


292
00:09:41,346 --> 00:09:41,836
the workout.


293
00:09:42,316 --> 00:09:45,656
And if you're on watchOS, you


294
00:09:45,656 --> 00:09:47,316
can use its subclass,


295
00:09:47,756 --> 00:09:49,436
HKLiveWorkoutBuilder.


296
00:09:50,836 --> 00:09:53,806
So it's watchOS only, and


297
00:09:54,326 --> 00:09:56,116
because it's a subclass of the


298
00:09:56,116 --> 00:09:58,096
workout builder, it has all of


299
00:09:58,146 --> 00:09:59,306
the great benefits of the


300
00:09:59,306 --> 00:10:02,126
builder, but because it's on


301
00:10:02,126 --> 00:10:04,226
watchOS and it works closely


302
00:10:04,226 --> 00:10:06,676
with HKWorkoutSession, it has


303
00:10:06,736 --> 00:10:08,106
all of these really cool


304
00:10:08,106 --> 00:10:10,956
features like automatic sample


305
00:10:11,026 --> 00:10:12,786
and event collection, which


306
00:10:12,786 --> 00:10:13,776
we'll talk about later.


307
00:10:15,736 --> 00:10:18,006
So let's go back to the workout


308
00:10:18,006 --> 00:10:21,136
app life cycle, and we'll see


309
00:10:21,136 --> 00:10:23,206
how we can now set up and start


310
00:10:23,206 --> 00:10:25,186
the workout using the new


311
00:10:25,276 --> 00:10:25,986
workout builder.


312
00:10:29,456 --> 00:10:31,936
So first, we need to create a


313
00:10:31,936 --> 00:10:32,736
workout builder.


314
00:10:33,736 --> 00:10:34,956
And to do that, we use the


315
00:10:34,956 --> 00:10:37,356
initializer, and we have to pass


316
00:10:37,356 --> 00:10:39,526
a healthStore object, a


317
00:10:39,606 --> 00:10:41,666
configuration which contains


318
00:10:41,666 --> 00:10:43,646
information like the workout


319
00:10:43,646 --> 00:10:45,656
type, whether it's indoor or


320
00:10:45,656 --> 00:10:47,796
outdoor, and other information.


321
00:10:48,616 --> 00:10:51,156
And finally, an optional device


322
00:10:51,726 --> 00:10:53,546
if the data comes from an


323
00:10:53,546 --> 00:10:54,906
external device, for example.


324
00:10:56,336 --> 00:10:58,946
Once my builder is created, all


325
00:10:58,946 --> 00:10:59,996
I need to do is call


326
00:10:59,996 --> 00:11:02,706
beginCollection and pass a start


327
00:11:02,706 --> 00:11:02,926
date.


328
00:11:04,076 --> 00:11:04,896
It's that simple.


329
00:11:06,426 --> 00:11:09,046
If you are on watchOS, you can


330
00:11:09,046 --> 00:11:10,676
use the live workout builder.


331
00:11:11,056 --> 00:11:13,266
And so first, you need to create


332
00:11:13,266 --> 00:11:15,946
a workout session by passing the


333
00:11:15,946 --> 00:11:16,766
healthStore and


334
00:11:16,766 --> 00:11:19,386
workoutConfiguration, and then


335
00:11:19,756 --> 00:11:21,576
you do not create the builder


336
00:11:21,576 --> 00:11:23,386
yourself, but you retrieve it


337
00:11:23,386 --> 00:11:25,876
directly from the session by


338
00:11:25,876 --> 00:11:26,626
using this call.


339
00:11:27,836 --> 00:11:29,156
Once we have the session and


340
00:11:29,156 --> 00:11:30,936
builder, we can go ahead and


341
00:11:30,936 --> 00:11:32,146
start them up.


342
00:11:32,736 --> 00:11:35,006
And so it's as easy as calling


343
00:11:35,006 --> 00:11:37,466
startActivity on the session and


344
00:11:37,776 --> 00:11:39,416
beginCollection on the builder


345
00:11:39,916 --> 00:11:41,236
by passing a start date.


346
00:11:41,726 --> 00:11:45,376
So this is how you set up and


347
00:11:45,376 --> 00:11:47,496
start a workout using the


348
00:11:47,496 --> 00:11:47,876
builder.


349
00:11:48,886 --> 00:11:49,996
Now, let's see how we can


350
00:11:50,376 --> 00:11:53,666
collect data displayed directly


351
00:11:53,666 --> 00:11:56,576
in our user interface and be


352
00:11:56,576 --> 00:11:58,116
able to control the state of the


353
00:11:58,116 --> 00:12:00,036
workout when the user requests


354
00:12:00,536 --> 00:12:00,626
it.


355
00:12:02,956 --> 00:12:05,766
So to collect data, if we want


356
00:12:05,766 --> 00:12:08,526
to add samples that are relevant


357
00:12:08,526 --> 00:12:11,096
to the workout, like calories,


358
00:12:11,096 --> 00:12:14,536
or distance, or heart rate, we


359
00:12:14,536 --> 00:12:16,606
can do that using a very simple


360
00:12:16,636 --> 00:12:19,666
call, builder.add, and give it


361
00:12:19,666 --> 00:12:21,516
an array of HKSamples.


362
00:12:22,116 --> 00:12:25,656
If we have events that we want


363
00:12:25,656 --> 00:12:27,606
to add to the workout, it's very


364
00:12:27,606 --> 00:12:28,036
similar.


365
00:12:29,126 --> 00:12:30,416
We just call builder


366
00:12:30,576 --> 00:12:32,046
.addWorkoutEvents.


367
00:12:33,476 --> 00:12:36,306
For metadata, you guessed it.


368
00:12:36,856 --> 00:12:38,756
With the dictionary of metadata,


369
00:12:39,006 --> 00:12:41,376
we just call builder.addMetadata


370
00:12:41,576 --> 00:12:43,806
and pass the dictionary.


371
00:12:44,466 --> 00:12:48,526
But on Apple Watch, because the


372
00:12:48,526 --> 00:12:51,536
device is on your wrist and has


373
00:12:51,606 --> 00:12:53,796
all this wide range of sensors,


374
00:12:54,216 --> 00:12:55,976
you can actually generate data


375
00:12:56,056 --> 00:12:58,776
like calories and distance.


376
00:12:59,166 --> 00:13:01,026
And wouldn't it be cool if we


377
00:13:01,056 --> 00:13:03,106
could have all of this data


378
00:13:03,876 --> 00:13:05,896
automatically collected by the


379
00:13:05,896 --> 00:13:06,306
builder?


380
00:13:07,336 --> 00:13:10,706
Starting with watchOS 5, we now


381
00:13:10,706 --> 00:13:13,856
have automatic data collection,


382
00:13:14,246 --> 00:13:15,776
and it all starts with


383
00:13:15,776 --> 00:13:17,856
HKLiveWorkoutDataSource.


384
00:13:18,406 --> 00:13:22,086
So the data source will collect


385
00:13:22,806 --> 00:13:25,346
samples that are relevant to the


386
00:13:25,346 --> 00:13:27,136
workout currently running.


387
00:13:29,226 --> 00:13:32,756
You do, however, have the option


388
00:13:33,316 --> 00:13:34,676
which types you want to collect,


389
00:13:34,776 --> 00:13:37,996
so you can add or remove types


390
00:13:37,996 --> 00:13:38,556
as you wish.


391
00:13:39,266 --> 00:13:40,596
And this is how it works.


392
00:13:41,456 --> 00:13:43,796
First, we create a data source.


393
00:13:45,056 --> 00:13:46,896
And here, I pass the healthStore


394
00:13:47,386 --> 00:13:48,586
as well as the


395
00:13:48,586 --> 00:13:49,836
workoutConfiguration.


396
00:13:50,346 --> 00:13:51,246
And since I'm passing the


397
00:13:51,246 --> 00:13:52,636
configuration that contains


398
00:13:52,636 --> 00:13:54,696
information about the activity


399
00:13:54,696 --> 00:13:56,816
type, the data source will be


400
00:13:56,816 --> 00:13:59,806
able to infer which types should


401
00:13:59,806 --> 00:14:03,136
be collected for this workout.


402
00:14:03,236 --> 00:14:05,486
Next, I simply need to set the


403
00:14:05,486 --> 00:14:07,676
data source on the live workout


404
00:14:07,676 --> 00:14:07,956
builder.


405
00:14:09,546 --> 00:14:11,616
And optionally, you can add or


406
00:14:11,616 --> 00:14:13,576
remove types that are being


407
00:14:13,576 --> 00:14:14,036
collected.


408
00:14:14,746 --> 00:14:16,636
So let's say I want to add the


409
00:14:16,636 --> 00:14:17,016
type.


410
00:14:17,686 --> 00:14:20,206
I can specify which type I want


411
00:14:20,206 --> 00:14:22,096
to add here as well as an


412
00:14:22,166 --> 00:14:24,056
optional predicate if I want to


413
00:14:24,056 --> 00:14:26,046
further limit which types are


414
00:14:26,046 --> 00:14:26,756
being collected.


415
00:14:27,786 --> 00:14:29,516
And finally, we just call


416
00:14:29,996 --> 00:14:30,856
dataSource.


417
00:14:31,036 --> 00:14:34,566
collectStatistics for and pass


418
00:14:34,616 --> 00:14:36,586
the type as well as the


419
00:14:36,586 --> 00:14:37,676
optionalPredicate.


420
00:14:37,966 --> 00:14:41,816
So now that we have data being


421
00:14:41,866 --> 00:14:44,186
collected, let's see how we can


422
00:14:44,726 --> 00:14:47,026
display it directly in our user


423
00:14:47,026 --> 00:14:47,686
interface.


424
00:14:48,246 --> 00:14:52,916
So every time new data comes in


425
00:14:53,866 --> 00:14:55,486
the builder's delegate method,


426
00:14:55,926 --> 00:14:58,346
workout builder did collect data


427
00:14:58,346 --> 00:14:59,966
of collected types will be


428
00:14:59,966 --> 00:15:00,356
called.


429
00:15:01,086 --> 00:15:03,296
And so here, if, for example,


430
00:15:03,296 --> 00:15:04,866
I'm interested in the heart rate


431
00:15:04,866 --> 00:15:07,346
type, I will make sure that it's


432
00:15:07,346 --> 00:15:08,876
one of the collected types.


433
00:15:09,046 --> 00:15:11,956
And then, I simply make use of


434
00:15:11,956 --> 00:15:14,196
the builder's statistics for


435
00:15:14,286 --> 00:15:16,426
quantity type method, which


436
00:15:16,426 --> 00:15:19,086
gives me an HKStatistics object


437
00:15:19,706 --> 00:15:21,366
that will contain information,


438
00:15:21,396 --> 00:15:23,426
in this case, like minimum,


439
00:15:23,726 --> 00:15:25,816
maximum, average, as well as


440
00:15:25,816 --> 00:15:28,246
most recent value for the heart


441
00:15:28,246 --> 00:15:30,216
rate that's recorded throughout


442
00:15:30,216 --> 00:15:30,776
this workout.


443
00:15:31,886 --> 00:15:33,576
From there, I can simply update


444
00:15:33,576 --> 00:15:34,526
my user interface.


445
00:15:35,086 --> 00:15:37,896
One thing that's also very


446
00:15:37,976 --> 00:15:40,296
common in workout apps is to


447
00:15:40,956 --> 00:15:43,296
have an elapsed timer.


448
00:15:43,886 --> 00:15:46,756
And so, of course, we start the


449
00:15:46,756 --> 00:15:48,006
timer at the beginning of the


450
00:15:48,006 --> 00:15:49,936
workout, but that's not enough


451
00:15:50,026 --> 00:15:52,596
because pause or resume events


452
00:15:52,966 --> 00:15:54,866
will affect duration of the


453
00:15:54,866 --> 00:15:55,286
workout.


454
00:15:56,226 --> 00:15:58,486
So every time new events are


455
00:15:58,486 --> 00:16:00,436
added to the builder, the


456
00:16:00,436 --> 00:16:01,756
builder's delegate method


457
00:16:02,226 --> 00:16:04,806
workoutBuilderDid CollectEvents


458
00:16:04,806 --> 00:16:05,436
will be called.


459
00:16:05,846 --> 00:16:08,186
And from here, you can simply


460
00:16:08,186 --> 00:16:10,326
use the builder's elapsedTime


461
00:16:10,326 --> 00:16:12,386
property, which will give you


462
00:16:12,736 --> 00:16:14,546
the current elapsed time for the


463
00:16:14,546 --> 00:16:14,986
workout.


464
00:16:16,166 --> 00:16:19,536
It's that easy.


465
00:16:19,736 --> 00:16:21,616
Next, let's see how we can


466
00:16:21,616 --> 00:16:22,846
control the state of the


467
00:16:22,846 --> 00:16:23,296
workout.


468
00:16:24,916 --> 00:16:28,396
So first, I'd like to talk about


469
00:16:28,506 --> 00:16:30,566
all of the different states that


470
00:16:30,566 --> 00:16:32,136
the workout session can be in.


471
00:16:32,746 --> 00:16:34,976
And the first one is Not


472
00:16:34,976 --> 00:16:35,456
Started.


473
00:16:36,366 --> 00:16:37,576
So here, the workout has not


474
00:16:37,576 --> 00:16:41,356
started yet, and we're not yet,


475
00:16:41,796 --> 00:16:44,056
the user is not performing the


476
00:16:44,056 --> 00:16:44,496
workout.


477
00:16:44,496 --> 00:16:47,136
So after that, we'll be moving


478
00:16:47,456 --> 00:16:48,746
to the Prepared state.


479
00:16:49,246 --> 00:16:52,146
And so the Prepared state will


480
00:16:52,676 --> 00:16:54,506
put the system in Session Mode,


481
00:16:54,916 --> 00:16:56,386
which means that your


482
00:16:56,386 --> 00:16:58,026
application will have background


483
00:16:58,026 --> 00:17:00,056
running, the sensors will also


484
00:17:00,056 --> 00:17:02,086
be ready to track the activity,


485
00:17:02,886 --> 00:17:04,695
but the workout has not started


486
00:17:04,695 --> 00:17:04,866
yet.


487
00:17:06,156 --> 00:17:08,236
So if you, for example, have a


488
00:17:08,236 --> 00:17:10,435
countdown in your app before a


489
00:17:10,435 --> 00:17:12,576
workout, you can move the


490
00:17:12,576 --> 00:17:14,195
session to the Prepared state


491
00:17:14,195 --> 00:17:16,016
before that to make sure that


492
00:17:16,316 --> 00:17:17,925
the device is ready to start


493
00:17:17,925 --> 00:17:18,776
tracking the activity.


494
00:17:19,296 --> 00:17:22,236
After that, we can move to the


495
00:17:22,236 --> 00:17:22,996
Running state.


496
00:17:23,346 --> 00:17:26,366
And here, the user is actively


497
00:17:26,366 --> 00:17:26,876
working out.


498
00:17:27,386 --> 00:17:29,406
And of course, the user can move


499
00:17:29,406 --> 00:17:31,946
to the Paused, back to Running,


500
00:17:32,516 --> 00:17:33,766
and back and forth between these


501
00:17:33,766 --> 00:17:37,596
2 until the workout is Stopped.


502
00:17:38,236 --> 00:17:42,016
So here, the device is still in


503
00:17:42,016 --> 00:17:43,616
Session Mode, which means that


504
00:17:43,616 --> 00:17:45,716
your app is still running in the


505
00:17:45,716 --> 00:17:47,706
background, so that gives you


506
00:17:47,706 --> 00:17:49,486
some extra time that, if you


507
00:17:49,486 --> 00:17:51,066
needed to save the workout.


508
00:17:51,576 --> 00:17:54,846
After that, we can simply end


509
00:17:54,846 --> 00:17:55,366
the workout.


510
00:17:56,056 --> 00:17:58,656
And from there, the system will


511
00:17:58,716 --> 00:17:59,606
exit Session Mode.


512
00:18:00,146 --> 00:18:03,126
And to be able to move between


513
00:18:03,126 --> 00:18:05,356
all these states, you simply


514
00:18:05,356 --> 00:18:08,166
need to use these calls directly


515
00:18:08,166 --> 00:18:09,256
on the workout session.


516
00:18:14,886 --> 00:18:16,916
So that's how we can collect


517
00:18:16,966 --> 00:18:18,926
data displayed in our user


518
00:18:18,926 --> 00:18:21,286
interface as well as control the


519
00:18:21,286 --> 00:18:22,356
state of the session.


520
00:18:23,296 --> 00:18:25,256
Let's see now how we can end the


521
00:18:25,256 --> 00:18:26,786
workout and save it in


522
00:18:26,786 --> 00:18:27,176
HealthKit.


523
00:18:27,726 --> 00:18:32,066
So to end the workout, you first


524
00:18:32,066 --> 00:18:35,366
call session.end, and then you


525
00:18:35,366 --> 00:18:37,066
also call builder.


526
00:18:37,336 --> 00:18:39,256
endCollection and pass the


527
00:18:39,256 --> 00:18:40,246
workout's end date.


528
00:18:41,206 --> 00:18:43,066
At this point, no data is going


529
00:18:43,066 --> 00:18:44,746
to be collected for this


530
00:18:44,966 --> 00:18:45,356
workout.


531
00:18:45,906 --> 00:18:48,546
And then, if you want to save


532
00:18:48,546 --> 00:18:50,176
the workout in HealthKit, you


533
00:18:50,176 --> 00:18:51,336
just call builder.


534
00:18:52,366 --> 00:18:54,706
finishWorkout, and you will get


535
00:18:54,706 --> 00:18:56,946
back a workout object in the


536
00:18:56,946 --> 00:18:58,576
completion handler that's


537
00:18:58,626 --> 00:19:00,586
already saved in HealthKit with


538
00:19:00,686 --> 00:19:02,886
all of its associated data.


539
00:19:04,396 --> 00:19:06,746
So that's how you now build a


540
00:19:06,746 --> 00:19:08,986
workout app using the new API.


541
00:19:10,006 --> 00:19:12,336
And now, I'd like to show you


542
00:19:12,336 --> 00:19:14,436
how this all works in a demo


543
00:19:15,096 --> 00:19:16,406
where we will be building a


544
00:19:16,406 --> 00:19:18,026
workout app for Apple Watch.


545
00:19:19,516 --> 00:19:25,500
[ Applause ]


546
00:19:30,346 --> 00:19:32,336
So I'm actually currently


547
00:19:32,336 --> 00:19:34,786
building a workout app that will


548
00:19:34,786 --> 00:19:37,056
allow my users to track running


549
00:19:37,056 --> 00:19:37,776
workouts.


550
00:19:38,466 --> 00:19:40,096
And it's a very simple app.


551
00:19:40,636 --> 00:19:42,536
I have a big Run button here.


552
00:19:43,096 --> 00:19:45,436
When I tap on it, I'm presented


553
00:19:45,436 --> 00:19:47,866
with this user interface that


554
00:19:47,866 --> 00:19:49,976
will show an elapsed time of


555
00:19:49,976 --> 00:19:51,486
their workout as well as some


556
00:19:51,486 --> 00:19:53,816
metrics, like calorie burned,


557
00:19:54,496 --> 00:19:56,746
the most recent heart rate, as


558
00:19:56,746 --> 00:19:59,416
well as the distance that's run


559
00:19:59,586 --> 00:20:00,156
in the workout.


560
00:20:00,706 --> 00:20:02,586
Of course, my user will have the


561
00:20:02,586 --> 00:20:04,686
option to control the state of


562
00:20:04,686 --> 00:20:06,526
the workout, so my user can


563
00:20:06,596 --> 00:20:08,666
pause, resume, and end the


564
00:20:08,666 --> 00:20:09,036
workout.


565
00:20:11,716 --> 00:20:14,326
So I already went ahead and


566
00:20:14,326 --> 00:20:16,066
implemented the user interface.


567
00:20:16,446 --> 00:20:18,626
So all that's left for me now is


568
00:20:18,656 --> 00:20:20,646
to use the new workout API and


569
00:20:20,986 --> 00:20:22,366
make my app functional.


570
00:20:22,916 --> 00:20:25,706
And the first thing that we need


571
00:20:25,706 --> 00:20:27,796
to do here is make sure that the


572
00:20:27,866 --> 00:20:29,596
project is properly set up.


573
00:20:30,486 --> 00:20:31,786
And so to do that, I'm going to


574
00:20:31,786 --> 00:20:32,886
head over to my Project


575
00:20:32,886 --> 00:20:35,596
Settings, go to the Capabilities


576
00:20:35,596 --> 00:20:37,916
tab, and here just make sure


577
00:20:37,916 --> 00:20:40,376
that the HealthKit Capability is


578
00:20:40,416 --> 00:20:40,906
turned on.


579
00:20:42,126 --> 00:20:43,716
And you should also do the same


580
00:20:44,006 --> 00:20:46,026
for your WatchKit app extension.


581
00:20:46,336 --> 00:20:48,236
So again, make sure that the


582
00:20:48,236 --> 00:20:50,196
HealthKit Capability is turned


583
00:20:50,196 --> 00:20:50,366
on.


584
00:20:51,356 --> 00:20:53,646
Once I did that, we should also


585
00:20:53,646 --> 00:20:56,566
add the 2 purpose strings in the


586
00:20:56,566 --> 00:20:59,246
info.plist file that will tell


587
00:20:59,246 --> 00:21:01,966
my users why I need access to


588
00:21:01,966 --> 00:21:02,656
their health data.


589
00:21:03,766 --> 00:21:06,226
And so here, the first string is


590
00:21:06,646 --> 00:21:08,566
"health share user description"


591
00:21:09,316 --> 00:21:11,726
that tells my users why I would


592
00:21:11,726 --> 00:21:13,816
like to save data in HealthKit


593
00:21:14,436 --> 00:21:16,686
as well as help update usage


594
00:21:16,726 --> 00:21:17,316
description.


595
00:21:17,316 --> 00:21:19,336
That will tell them why I need


596
00:21:19,616 --> 00:21:23,106
to read data in HealthKit.


597
00:21:23,196 --> 00:21:25,376
Once that's done, I can now


598
00:21:25,666 --> 00:21:27,226
start using the new workout API.


599
00:21:27,946 --> 00:21:30,096
And of course, the first step


600
00:21:30,096 --> 00:21:31,686
before being able to use the API


601
00:21:32,636 --> 00:21:34,576
is to make sure that I request


602
00:21:34,916 --> 00:21:37,006
authorization for the data that


603
00:21:37,006 --> 00:21:37,386
I need.


604
00:21:38,286 --> 00:21:40,196
And so, of course, every app is


605
00:21:40,226 --> 00:21:40,616
different.


606
00:21:41,266 --> 00:21:43,266
And in my case, if we go back to


607
00:21:43,266 --> 00:21:47,636
my application, I will be saving


608
00:21:47,636 --> 00:21:48,686
a workout here.


609
00:21:48,686 --> 00:21:50,796
So that's one of the types that


610
00:21:50,796 --> 00:21:53,636
I will be needing access to.


611
00:21:53,826 --> 00:21:55,626
And I also need to be able to


612
00:21:55,686 --> 00:21:57,626
read calories, heart rate, as


613
00:21:57,626 --> 00:21:58,586
well as distance.


614
00:21:59,336 --> 00:22:00,026
So let's do that.


615
00:22:01,436 --> 00:22:03,136
And of course, we need to make


616
00:22:03,136 --> 00:22:04,806
sure that we always ask for


617
00:22:04,806 --> 00:22:06,476
authorization when we need it.


618
00:22:07,216 --> 00:22:09,516
In my case here, I want to do


619
00:22:09,516 --> 00:22:11,586
that every time the user is


620
00:22:11,586 --> 00:22:14,196
presented with this UI so that I


621
00:22:14,196 --> 00:22:15,416
can make sure that I have the


622
00:22:15,416 --> 00:22:17,346
authorization before starting a


623
00:22:17,346 --> 00:22:17,736
workout.


624
00:22:19,076 --> 00:22:20,896
So this view here is backed by


625
00:22:20,896 --> 00:22:24,006
my workoutStartView Watchkit


626
00:22:24,006 --> 00:22:25,746
interface controller, and I'm


627
00:22:25,746 --> 00:22:27,506
going to go ahead and implement


628
00:22:28,046 --> 00:22:29,726
the authorization in the


629
00:22:29,726 --> 00:22:31,506
didAppear method.


630
00:22:33,636 --> 00:22:36,156
So first, my typesToShare here


631
00:22:36,156 --> 00:22:37,746
is workout because I want to be


632
00:22:37,746 --> 00:22:39,616
able to save a workout at the


633
00:22:39,616 --> 00:22:39,846
end.


634
00:22:42,376 --> 00:22:44,296
Next, I would like to read


635
00:22:44,486 --> 00:22:47,206
heartRate, activeEnergyBurned,


636
00:22:47,846 --> 00:22:48,726
as well as


637
00:22:48,906 --> 00:22:50,106
distanceWalkingRunning.


638
00:22:50,626 --> 00:22:53,256
Once I have my typesToShare and


639
00:22:53,256 --> 00:22:55,836
typesToRead, I just need to call


640
00:22:56,216 --> 00:22:57,966
requestAuthorization on the


641
00:22:57,966 --> 00:23:01,796
healthStore and pass the types.


642
00:23:01,976 --> 00:23:03,216
So let's go ahead and run this


643
00:23:03,216 --> 00:23:04,826
code now and see what happens.


644
00:23:05,926 --> 00:23:08,436
And because the watch screen is


645
00:23:08,436 --> 00:23:10,936
small, the user will be


646
00:23:11,516 --> 00:23:13,316
presented with an authorization


647
00:23:13,316 --> 00:23:14,796
sheet on the phone.


648
00:23:15,786 --> 00:23:17,396
So you need to make sure to also


649
00:23:17,716 --> 00:23:19,666
handle authorization on your


650
00:23:19,666 --> 00:23:20,946
iPhone app.


651
00:23:22,536 --> 00:23:24,076
Going to go ahead and dismiss


652
00:23:24,076 --> 00:23:24,846
this view here.


653
00:23:25,436 --> 00:23:27,696
And so let's open my iPhone app.


654
00:23:28,306 --> 00:23:30,726
And here, I'm presented with an


655
00:23:30,726 --> 00:23:32,946
authorization sheet where I can


656
00:23:33,516 --> 00:23:35,716
decide if I want to grant this


657
00:23:35,716 --> 00:23:37,046
application access or not.


658
00:23:37,826 --> 00:23:39,006
For the purpose of this demo,


659
00:23:39,006 --> 00:23:39,956
I'm going to turn all the


660
00:23:39,956 --> 00:23:42,746
categories on and tap Allow.


661
00:23:44,176 --> 00:23:45,856
And that's how we have now


662
00:23:45,946 --> 00:23:47,396
granted the authorization to my


663
00:23:47,396 --> 00:23:48,016
application.


664
00:23:49,326 --> 00:23:51,746
Next, we can now finally get


665
00:23:51,746 --> 00:23:54,096
started with the workout API.


666
00:23:54,426 --> 00:23:56,386
So when I tap on this button


667
00:23:56,386 --> 00:23:59,306
here, this view will be passed,


668
00:23:59,746 --> 00:24:01,426
all the workoutConfiguration


669
00:24:01,426 --> 00:24:03,726
object that contains information


670
00:24:03,726 --> 00:24:04,496
about the workout.


671
00:24:05,046 --> 00:24:06,326
In this instance here, it's a


672
00:24:06,326 --> 00:24:07,046
running workout.


673
00:24:07,796 --> 00:24:09,496
And from there, I can go ahead


674
00:24:09,966 --> 00:24:11,046
and set up my workout.


675
00:24:12,096 --> 00:24:13,666
So this view here is backed by


676
00:24:13,666 --> 00:24:16,476
my workout session, WatchKit


677
00:24:16,476 --> 00:24:18,276
interface controller, and I'm


678
00:24:18,276 --> 00:24:20,066
going to go do the setup in the


679
00:24:20,066 --> 00:24:20,866
awake method.


680
00:24:21,586 --> 00:24:24,196
So first, I'm going to create


681
00:24:24,196 --> 00:24:26,296
the HKWorkoutSession as well as


682
00:24:26,296 --> 00:24:27,836
the HKLiveWorkoutBuilder.


683
00:24:29,996 --> 00:24:32,756
So we create the session using


684
00:24:33,106 --> 00:24:35,556
its initializer, and we pass the


685
00:24:35,556 --> 00:24:36,936
workout configuration to it.


686
00:24:37,836 --> 00:24:39,756
From there, we simply retrieve


687
00:24:40,536 --> 00:24:43,406
the builder directly from the


688
00:24:44,056 --> 00:24:44,276
session.


689
00:24:44,386 --> 00:24:46,766
Creating a session might fail if


690
00:24:46,766 --> 00:24:48,156
the workout configuration is


691
00:24:48,156 --> 00:24:50,646
invalid, so that's why I wrap my


692
00:24:50,706 --> 00:24:52,806
code here in a do-catch block


693
00:24:53,276 --> 00:24:55,356
and dismiss if I have any


694
00:24:55,356 --> 00:24:55,896
failures.


695
00:24:56,366 --> 00:25:00,156
Next, let's set up the session


696
00:25:00,196 --> 00:25:00,706
and builder.


697
00:25:01,526 --> 00:25:04,646
So in this case, I want my


698
00:25:04,826 --> 00:25:06,336
interface controller to be the


699
00:25:06,336 --> 00:25:08,846
delegate of both the session and


700
00:25:08,846 --> 00:25:09,346
the builder.


701
00:25:09,656 --> 00:25:11,326
And because I also want to


702
00:25:11,386 --> 00:25:13,286
collect samples generated by the


703
00:25:13,286 --> 00:25:15,666
device, I'm going to use here a


704
00:25:15,666 --> 00:25:18,366
live data source and pass it a


705
00:25:18,366 --> 00:25:20,676
workout configuration so that


706
00:25:20,676 --> 00:25:22,576
the types are automatically


707
00:25:22,656 --> 00:25:24,166
inferred for me.


708
00:25:25,636 --> 00:25:28,986
Finally, I simply start the


709
00:25:28,986 --> 00:25:31,166
session as well as the builder.


710
00:25:31,436 --> 00:25:35,256
So now that my workout is


711
00:25:35,256 --> 00:25:37,206
started, the first thing that I


712
00:25:37,206 --> 00:25:39,526
need to do is to start my


713
00:25:39,526 --> 00:25:40,996
elapsedTime timer.


714
00:25:40,996 --> 00:25:43,026
And so I'm going to do that here


715
00:25:43,506 --> 00:25:45,226
in the callback of the


716
00:25:45,226 --> 00:25:46,286
beingCollectionCall.


717
00:25:46,906 --> 00:25:51,356
I have a method here that will


718
00:25:51,586 --> 00:25:52,196
do that for me.


719
00:25:52,926 --> 00:25:55,716
And of course, because pause and


720
00:25:55,716 --> 00:25:57,726
resume events can also affect


721
00:25:58,586 --> 00:26:00,626
the duration, I'm going to have


722
00:26:00,676 --> 00:26:02,666
this call in the builder's


723
00:26:02,756 --> 00:26:07,776
didCollectEvent call as well.


724
00:26:07,946 --> 00:26:08,916
Now, let's implement this


725
00:26:08,916 --> 00:26:09,206
method.


726
00:26:10,596 --> 00:26:13,246
So in my UI, I'm using a


727
00:26:13,246 --> 00:26:14,826
WatchKit interface timer.


728
00:26:15,386 --> 00:26:16,586
If you're not familiar with this


729
00:26:16,586 --> 00:26:19,916
object, this object needs a date


730
00:26:19,986 --> 00:26:22,166
in the past from which it will


731
00:26:22,166 --> 00:26:23,186
start counting from.


732
00:26:23,786 --> 00:26:24,956
So I'm going to go ahead and


733
00:26:24,956 --> 00:26:27,696
create my date object using the


734
00:26:27,696 --> 00:26:29,676
builder's elapsedTime property.


735
00:26:30,726 --> 00:26:31,906
And because I want the date to


736
00:26:31,906 --> 00:26:33,496
be in the past, I'm going to


737
00:26:33,796 --> 00:26:35,306
make sure that I have a minus


738
00:26:35,306 --> 00:26:36,956
sign here.


739
00:26:37,096 --> 00:26:39,186
Next, I simply dispatch on the


740
00:26:39,186 --> 00:26:41,476
main queue because I'm doing UI


741
00:26:41,476 --> 00:26:43,516
work, and then I just set the


742
00:26:43,516 --> 00:26:46,606
date on the timer.


743
00:26:46,606 --> 00:26:47,826
I also need to make sure that


744
00:26:47,826 --> 00:26:50,376
the timer is only running when


745
00:26:51,046 --> 00:26:53,076
the session is running as well.


746
00:26:53,726 --> 00:26:54,456
So let's do that.


747
00:26:55,376 --> 00:26:57,506
First, I grab the session state,


748
00:26:58,126 --> 00:26:59,916
and then, again, I dispatch on


749
00:26:59,916 --> 00:27:00,556
the main queue.


750
00:27:00,796 --> 00:27:02,606
And if the session is running,


751
00:27:03,076 --> 00:27:04,256
I'm going to start the timer.


752
00:27:04,966 --> 00:27:06,116
And if it's not, I'm going to


753
00:27:06,116 --> 00:27:07,336
call Stop on the timer.


754
00:27:08,696 --> 00:27:09,966
And that's all you need to do to


755
00:27:09,966 --> 00:27:12,176
get the timer tracking the


756
00:27:12,176 --> 00:27:13,786
elapsed time.


757
00:27:13,986 --> 00:27:15,826
Next, let's make sure that our


758
00:27:15,826 --> 00:27:17,566
metrics displayed in the UI are


759
00:27:18,016 --> 00:27:19,036
also accurate.


760
00:27:19,986 --> 00:27:22,246
So every time new samples are


761
00:27:22,246 --> 00:27:24,976
collected by the builder, this


762
00:27:25,016 --> 00:27:26,746
method here will be called.


763
00:27:27,506 --> 00:27:29,366
And so here, I'm just going to


764
00:27:29,366 --> 00:27:31,016
go and iterate over the


765
00:27:31,046 --> 00:27:31,946
collectedTypes.


766
00:27:36,396 --> 00:27:39,016
And, in my case, all of the data


767
00:27:39,016 --> 00:27:41,006
that I'm interested in is


768
00:27:41,236 --> 00:27:42,336
quantity samples.


769
00:27:42,416 --> 00:27:44,236
So I'm going to make sure that I


770
00:27:44,236 --> 00:27:45,476
only handle those.


771
00:27:46,006 --> 00:27:49,276
And from there, we can make use


772
00:27:49,276 --> 00:27:53,226
of the new builder's method,


773
00:27:53,636 --> 00:27:55,886
builder.statistics, for quantity


774
00:27:55,886 --> 00:27:57,566
types, which will give me an


775
00:27:57,566 --> 00:27:59,856
HKStatistics object that


776
00:27:59,886 --> 00:28:01,336
contains information like


777
00:28:01,336 --> 00:28:04,046
minimum, maximum, average, and


778
00:28:04,046 --> 00:28:05,876
most recent values for each


779
00:28:06,726 --> 00:28:06,826
type.


780
00:28:07,656 --> 00:28:09,716
So I grab the statistics object


781
00:28:09,756 --> 00:28:12,986
here, and from there, I have a


782
00:28:12,986 --> 00:28:13,916
method that I already


783
00:28:13,916 --> 00:28:15,886
implemented that will give me


784
00:28:15,986 --> 00:28:17,976
the user interface label for


785
00:28:17,976 --> 00:28:19,556
this particular quantity type.


786
00:28:20,696 --> 00:28:22,156
And from there, it just update


787
00:28:22,536 --> 00:28:24,716
my label using the statistics


788
00:28:24,716 --> 00:28:25,106
object.


789
00:28:25,776 --> 00:28:29,046
Next, let's make sure that we


790
00:28:29,046 --> 00:28:30,886
can control the state when the


791
00:28:30,886 --> 00:28:32,526
user requests it.


792
00:28:33,216 --> 00:28:35,876
So every time my user will tap


793
00:28:35,926 --> 00:28:37,376
the Pause button, this method


794
00:28:37,376 --> 00:28:38,386
here will be called.


795
00:28:39,066 --> 00:28:40,486
And from there, I simply need to


796
00:28:40,486 --> 00:28:42,646
call session.pause.


797
00:28:43,956 --> 00:28:45,716
For resume, it's very similar.


798
00:28:46,346 --> 00:28:48,626
I'm going to do session.resume.


799
00:28:49,176 --> 00:28:52,376
And finally, to end the workout,


800
00:28:53,176 --> 00:28:55,126
we're going to call session.end


801
00:28:56,006 --> 00:28:58,936
and then builder.endCollection


802
00:28:59,076 --> 00:29:00,726
and pass the workout's end date.


803
00:29:01,836 --> 00:29:03,496
And from there, we're just going


804
00:29:03,496 --> 00:29:05,276
to call finishWorkout to


805
00:29:05,276 --> 00:29:07,266
actually save the workout and


806
00:29:07,326 --> 00:29:08,826
all of its associated data in


807
00:29:08,826 --> 00:29:09,236
HealthKit.


808
00:29:10,336 --> 00:29:11,476
And then, we just dismissed it


809
00:29:11,476 --> 00:29:11,656
here.


810
00:29:12,486 --> 00:29:13,856
So let's go ahead and run this


811
00:29:13,856 --> 00:29:16,506
code and see what happens now.


812
00:29:24,076 --> 00:29:25,456
So I'm going to go ahead and


813
00:29:25,456 --> 00:29:27,116
start my workout here.


814
00:29:28,326 --> 00:29:31,086
And as we see now, I have my


815
00:29:31,086 --> 00:29:32,796
timer updating.


816
00:29:33,226 --> 00:29:35,536
I have data directly collected


817
00:29:35,536 --> 00:29:37,676
by the builder and displayed


818
00:29:37,826 --> 00:29:39,416
right in my user interface.


819
00:29:40,236 --> 00:29:42,886
And of course, I can also react


820
00:29:42,886 --> 00:29:45,116
to the state changes, so going


821
00:29:45,576 --> 00:29:47,616
to go ahead and pause the


822
00:29:47,616 --> 00:29:48,176
workout.


823
00:29:49,436 --> 00:29:50,606
My timer has paused.


824
00:29:51,116 --> 00:29:52,396
Data collection as well.


825
00:29:53,086 --> 00:29:54,606
I can resume.


826
00:29:55,186 --> 00:29:58,996
And just like that, with a few


827
00:29:58,996 --> 00:30:00,866
lines of code, I now have a


828
00:30:01,016 --> 00:30:02,576
fully functional workout app.


829
00:30:03,516 --> 00:30:08,616
[ Applause ]


830
00:30:09,116 --> 00:30:11,416
So I'm going to stop the workout


831
00:30:12,086 --> 00:30:16,346
now, and let's see what we have


832
00:30:16,436 --> 00:30:18,986
just saved in the health app on


833
00:30:19,266 --> 00:30:19,766
the iPhone.


834
00:30:20,366 --> 00:30:25,196
So this is my workout here that


835
00:30:25,196 --> 00:30:27,576
I have just saved, and we have


836
00:30:27,576 --> 00:30:30,316
now a very rich representation


837
00:30:30,826 --> 00:30:32,846
of this workout saved directly


838
00:30:32,846 --> 00:30:33,376
in HealthKit.


839
00:30:33,996 --> 00:30:36,286
I have the device details as


840
00:30:36,286 --> 00:30:37,916
well as all of the samples that


841
00:30:37,916 --> 00:30:39,476
were associated, like heart


842
00:30:39,476 --> 00:30:42,066
rate, distance, and active


843
00:30:42,066 --> 00:30:44,546
energy, and, also, the workout


844
00:30:44,636 --> 00:30:46,816
events that were generated when


845
00:30:46,816 --> 00:30:48,256
I paused and resumed the


846
00:30:48,256 --> 00:30:48,666
session.


847
00:30:57,386 --> 00:30:59,676
And that's how easy it is now to


848
00:30:59,676 --> 00:31:02,056
build a full-featured workout


849
00:31:02,056 --> 00:31:03,596
app on Apple Watch.


850
00:31:05,516 --> 00:31:09,776
[ Applause ]


851
00:31:10,276 --> 00:31:12,876
But of course, sometimes things


852
00:31:12,906 --> 00:31:14,156
don't go as planned.


853
00:31:14,906 --> 00:31:17,366
Let's say I'm running my first


854
00:31:17,366 --> 00:31:19,416
marathon and I'm really excited


855
00:31:19,416 --> 00:31:21,526
about it and using my favorite


856
00:31:21,526 --> 00:31:23,106
workout app to track this


857
00:31:23,106 --> 00:31:25,776
marathon, but I only realize at


858
00:31:25,836 --> 00:31:28,336
the end that the app actually


859
00:31:28,336 --> 00:31:30,126
crashed sometime in the middle,


860
00:31:30,596 --> 00:31:32,876
making me lose all of this data.


861
00:31:33,146 --> 00:31:35,496
Well, with watchOS 5, we are


862
00:31:35,496 --> 00:31:37,426
introducing workout recovery


863
00:31:38,086 --> 00:31:39,626
that will solve that problem for


864
00:31:40,396 --> 00:31:40,463
you.


865
00:31:41,516 --> 00:31:44,156
[ Applause ]


866
00:31:44,656 --> 00:31:46,336
If your application happens to


867
00:31:46,336 --> 00:31:48,496
crash during an active workout,


868
00:31:49,286 --> 00:31:51,056
we will automatically relaunch


869
00:31:51,056 --> 00:31:52,966
it and give it a chance to


870
00:31:52,966 --> 00:31:53,986
recover the workout.


871
00:31:55,376 --> 00:31:57,116
The workout session as well as


872
00:31:57,116 --> 00:32:00,046
the builder will be recovered in


873
00:32:00,046 --> 00:32:01,826
their previous state, so you


874
00:32:01,826 --> 00:32:04,166
should not call startActivity or


875
00:32:04,166 --> 00:32:07,736
beginCollection on the builder.


876
00:32:07,876 --> 00:32:09,706
If you are using a data source


877
00:32:09,816 --> 00:32:12,046
to automatically collect data,


878
00:32:12,516 --> 00:32:14,056
you do need to set it up again,


879
00:32:14,636 --> 00:32:18,586
and this is how it works.


880
00:32:18,746 --> 00:32:20,736
If your app is relaunched after


881
00:32:20,736 --> 00:32:23,386
a crash, we will be calling the


882
00:32:23,386 --> 00:32:25,166
WatchKit extension delegate


883
00:32:25,166 --> 00:32:27,136
method, handleActive


884
00:32:27,136 --> 00:32:27,936
WorkoutRecovery.


885
00:32:29,036 --> 00:32:30,806
From there, you simply need to


886
00:32:31,096 --> 00:32:33,876
create a healthStore object and


887
00:32:33,876 --> 00:32:37,456
then call recoverActive Workout


888
00:32:37,456 --> 00:32:39,896
Session, and you will get back a


889
00:32:39,896 --> 00:32:41,496
session in the completion


890
00:32:41,496 --> 00:32:41,836
handler.


891
00:32:42,876 --> 00:32:43,576
It's that simple.


892
00:32:44,206 --> 00:32:49,066
So this is our new workout API.


893
00:32:49,276 --> 00:32:52,606
It makes it easier than ever to


894
00:32:52,606 --> 00:32:54,136
build great workout apps.


895
00:32:54,996 --> 00:32:57,246
We also have a new Quantity


896
00:32:57,246 --> 00:32:57,956
series API.


897
00:32:58,616 --> 00:33:00,156
And for that, I'd like to hand


898
00:33:00,156 --> 00:33:01,576
it back to my colleague Niharika


899
00:33:02,076 --> 00:33:03,126
to tell you more about it.


900
00:33:04,516 --> 00:33:08,006
[ Applause ]


901
00:33:08,506 --> 00:33:10,146
>> Isn't that incredible?


902
00:33:10,336 --> 00:33:12,056
In less than 10 minutes, Karim


903
00:33:12,056 --> 00:33:13,246
was able to build a fully


904
00:33:13,246 --> 00:33:14,436
functional workout app.


905
00:33:14,666 --> 00:33:16,196
And this is so important


906
00:33:16,226 --> 00:33:17,176
because, like I mentioned


907
00:33:17,176 --> 00:33:19,476
earlier, our users love doing


908
00:33:19,476 --> 00:33:19,946
workouts.


909
00:33:21,146 --> 00:33:22,696
And with these workouts come a


910
00:33:22,696 --> 00:33:23,466
lot of data.


911
00:33:23,466 --> 00:33:25,286
Let's say I'm interested in


912
00:33:25,286 --> 00:33:26,976
making a soccer app.


913
00:33:26,976 --> 00:33:28,406
I really want to understand


914
00:33:28,406 --> 00:33:30,186
exactly how my users are moving,


915
00:33:30,376 --> 00:33:31,996
and I want to track the distance


916
00:33:31,996 --> 00:33:33,866
they're moving as they go side


917
00:33:33,866 --> 00:33:36,166
to side, across the field during


918
00:33:36,166 --> 00:33:37,386
the duration of a workout.


919
00:33:37,716 --> 00:33:39,616
And what happens when we start


920
00:33:39,616 --> 00:33:41,396
the workout is that samples


921
00:33:41,396 --> 00:33:42,216
start coming in.


922
00:33:42,856 --> 00:33:45,246
My user first goes 2.25.


923
00:33:45,736 --> 00:33:47,386
They then go 1.6.


924
00:33:47,856 --> 00:33:48,866
They go a little more.


925
00:33:49,186 --> 00:33:50,586
And then, they finish it off.


926
00:33:50,986 --> 00:33:52,786
And in the past, each one of


927
00:33:52,786 --> 00:33:54,416
these distances would be stored


928
00:33:54,416 --> 00:33:56,596
as 1 individual HKQuantity


929
00:33:56,596 --> 00:33:56,976
sample.


930
00:33:57,636 --> 00:33:59,196
Each one would be independent,


931
00:33:59,196 --> 00:34:00,016
and they would be stored


932
00:34:00,016 --> 00:34:00,576
separately.


933
00:34:01,366 --> 00:34:02,766
And so we thought that, wouldn't


934
00:34:02,766 --> 00:34:03,856
it be great if you could


935
00:34:03,856 --> 00:34:05,976
actually just have 1 sample that


936
00:34:05,976 --> 00:34:08,166
tracks that cumulative total but


937
00:34:08,166 --> 00:34:09,545
is still backed by those


938
00:34:09,596 --> 00:34:11,356
individual quantities behind it?


939
00:34:11,416 --> 00:34:13,876
And that's why we've introduced


940
00:34:13,876 --> 00:34:14,585
HKCumulative


941
00:34:14,585 --> 00:34:16,456
QuantitySeriesSample, which is a


942
00:34:16,456 --> 00:34:17,906
brand new sample type that


943
00:34:17,906 --> 00:34:19,516
allows you to more efficiently


944
00:34:19,516 --> 00:34:21,106
store high-frequency data, and


945
00:34:21,666 --> 00:34:23,005
it's great for 2 reasons.


946
00:34:23,196 --> 00:34:25,116
Number 1, you only have to store


947
00:34:25,116 --> 00:34:26,775
1 sample that is backed by


948
00:34:26,775 --> 00:34:28,416
multiple quantities, and so


949
00:34:28,416 --> 00:34:29,876
you're more efficiently storing


950
00:34:30,176 --> 00:34:31,556
the high-frequency data that


951
00:34:31,735 --> 00:34:33,346
comes from things like workouts.


952
00:34:33,775 --> 00:34:36,076
And number 2, you now have a


953
00:34:36,076 --> 00:34:38,286
sense of connection between the


954
00:34:38,286 --> 00:34:39,536
quantities that make up a


955
00:34:39,536 --> 00:34:40,025
sample.


956
00:34:40,936 --> 00:34:43,016
So our new quantity series


957
00:34:43,016 --> 00:34:44,196
sample is a subclass of


958
00:34:44,196 --> 00:34:45,996
HKQuantitySample, which some of


959
00:34:45,996 --> 00:34:47,716
you may already be familiar


960
00:34:47,716 --> 00:34:47,956
with.


961
00:34:48,246 --> 00:34:49,656
And if you've interacted with


962
00:34:49,656 --> 00:34:51,426
HKQuantitySample before, our new


963
00:34:51,426 --> 00:34:53,386
sample type will be very much


964
00:34:53,436 --> 00:34:53,906
the same.


965
00:34:55,335 --> 00:34:56,626
So why would you want to use


966
00:34:56,686 --> 00:34:56,886
this?


967
00:34:57,836 --> 00:34:59,106
Let's say you're interested in


968
00:34:59,106 --> 00:35:00,316
data visualization.


969
00:35:00,366 --> 00:35:02,086
Your app requires complex


970
00:35:02,086 --> 00:35:04,026
charting or graphs, and you're


971
00:35:04,026 --> 00:35:05,426
trying to really visualize the


972
00:35:05,426 --> 00:35:06,886
data that your users have in a


973
00:35:06,886 --> 00:35:07,616
beautiful way.


974
00:35:08,426 --> 00:35:09,826
We actually suggest that you


975
00:35:09,826 --> 00:35:11,026
continue using our


976
00:35:11,026 --> 00:35:13,226
HKStatisticsQuery or our


977
00:35:13,226 --> 00:35:15,046
HKStatistics CollectionQuery.


978
00:35:15,046 --> 00:35:16,526
And that's because those are


979
00:35:16,526 --> 00:35:18,886
preexisting queries that do just


980
00:35:18,886 --> 00:35:19,186
this.


981
00:35:19,336 --> 00:35:20,796
You have access to really


982
00:35:20,906 --> 00:35:23,266
fine-grained, rich data, and


983
00:35:23,266 --> 00:35:24,866
these queries will already get


984
00:35:24,936 --> 00:35:26,916
the fine-grained data on our new


985
00:35:26,916 --> 00:35:28,586
series samples, so you won't


986
00:35:28,586 --> 00:35:30,366
have to do any extra work to get


987
00:35:30,426 --> 00:35:31,136
those details.


988
00:35:32,466 --> 00:35:33,606
If, for example, you're


989
00:35:33,606 --> 00:35:35,646
interested in data analysis, you


990
00:35:35,646 --> 00:35:37,156
want to go 1 step deeper.


991
00:35:37,246 --> 00:35:38,456
You want to understand the


992
00:35:38,456 --> 00:35:40,096
actual quantities that make up a


993
00:35:40,096 --> 00:35:40,576
sample.


994
00:35:41,426 --> 00:35:44,046
We suggest you use our new


995
00:35:44,046 --> 00:35:45,276
series sample query.


996
00:35:45,986 --> 00:35:47,736
And lastly, if you're like me


997
00:35:47,736 --> 00:35:48,906
and have a soccer app [laughs]


998
00:35:48,906 --> 00:35:50,866
or any app that has really


999
00:35:50,866 --> 00:35:52,396
high-frequency data collection,


1000
00:35:53,126 --> 00:35:54,666
we suggest that you use our new


1001
00:35:54,666 --> 00:35:56,226
Quantity series sample builder,


1002
00:35:56,486 --> 00:35:57,746
which is a brand-new way for you


1003
00:35:57,746 --> 00:35:59,096
to actually be able to create


1004
00:35:59,146 --> 00:36:00,556
those new cumulative Quantity


1005
00:36:00,556 --> 00:36:02,326
series samples and store that


1006
00:36:02,326 --> 00:36:04,416
data in a more efficient way.


1007
00:36:05,696 --> 00:36:07,216
So let's start with our sample


1008
00:36:07,246 --> 00:36:07,606
query.


1009
00:36:07,856 --> 00:36:09,526
Like I mentioned, this is a way


1010
00:36:09,526 --> 00:36:11,386
for you to be able to really


1011
00:36:11,386 --> 00:36:13,436
look deeper and understand the


1012
00:36:13,436 --> 00:36:15,506
individual HK quantities that


1013
00:36:15,506 --> 00:36:16,976
make up a Quantity series


1014
00:36:16,976 --> 00:36:17,386
sample.


1015
00:36:18,606 --> 00:36:20,096
And in code, we, of course,


1016
00:36:20,096 --> 00:36:21,556
first want to start with


1017
00:36:21,616 --> 00:36:22,616
figuring out where we're going


1018
00:36:22,616 --> 00:36:23,876
to store our new quantities.


1019
00:36:23,936 --> 00:36:25,276
In my case, I'm going to store


1020
00:36:25,276 --> 00:36:26,366
it in an array of quantities.


1021
00:36:26,956 --> 00:36:29,696
We next want to initialize our


1022
00:36:29,696 --> 00:36:30,176
query.


1023
00:36:30,556 --> 00:36:32,276
We initialize it with the sample


1024
00:36:32,276 --> 00:36:33,226
that we're interested in.


1025
00:36:33,486 --> 00:36:35,236
And in our completion handler is


1026
00:36:35,236 --> 00:36:36,426
where the bulk of the work


1027
00:36:36,426 --> 00:36:36,926
happens.


1028
00:36:37,406 --> 00:36:39,526
In my case, I have a method


1029
00:36:39,526 --> 00:36:41,026
called analyzeQuantity which is


1030
00:36:41,026 --> 00:36:42,156
going to do the work that I'm


1031
00:36:42,156 --> 00:36:43,756
interested in with the quantity.


1032
00:36:43,756 --> 00:36:45,656
In my case, that's adding it to


1033
00:36:45,656 --> 00:36:46,636
the array of quantities that I


1034
00:36:46,636 --> 00:36:47,456
declared earlier.


1035
00:36:48,356 --> 00:36:50,116
And lastly, we execute our


1036
00:36:50,116 --> 00:36:50,636
query.


1037
00:36:51,226 --> 00:36:52,416
It's really that simple.


1038
00:36:53,036 --> 00:36:54,336
For those of you familiar with


1039
00:36:54,336 --> 00:36:55,636
some of our other queries, this


1040
00:36:55,806 --> 00:36:57,456
behaves in a very similar way.


1041
00:36:59,546 --> 00:37:01,376
Next, we have our Quantity


1042
00:37:01,376 --> 00:37:03,116
series sample builder, which,


1043
00:37:03,116 --> 00:37:04,396
like I mentioned, is really


1044
00:37:04,396 --> 00:37:06,036
great for apps that do have


1045
00:37:06,106 --> 00:37:07,706
high-frequency data ingestion


1046
00:37:08,106 --> 00:37:09,526
because it's a more efficient


1047
00:37:09,526 --> 00:37:10,986
way to store that data but also


1048
00:37:10,986 --> 00:37:12,906
allows you to kind of create


1049
00:37:13,096 --> 00:37:14,326
connections between that.


1050
00:37:15,166 --> 00:37:16,906
So first, we, of course, want to


1051
00:37:16,906 --> 00:37:19,326
start with creating our sample


1052
00:37:19,326 --> 00:37:19,666
builder.


1053
00:37:19,946 --> 00:37:20,676
We initialize with the


1054
00:37:20,776 --> 00:37:22,346
healthStore and we initialize it


1055
00:37:22,346 --> 00:37:23,686
with the quantityType that we're


1056
00:37:23,686 --> 00:37:24,376
interested in.


1057
00:37:25,126 --> 00:37:27,346
Next, for whatever cadence


1058
00:37:27,346 --> 00:37:28,756
you're interested in inserting


1059
00:37:28,756 --> 00:37:30,036
samples, you do that.


1060
00:37:30,506 --> 00:37:32,006
Let's use my soccer app as an


1061
00:37:32,006 --> 00:37:32,576
example.


1062
00:37:33,026 --> 00:37:34,616
I am super interested in the


1063
00:37:34,616 --> 00:37:36,476
actual distances that my users


1064
00:37:36,476 --> 00:37:37,726
are moving, so I'm going to


1065
00:37:37,726 --> 00:37:39,996
declare the meter unit as the


1066
00:37:39,996 --> 00:37:41,316
quantity that I'm interested in,


1067
00:37:41,576 --> 00:37:43,236
and I insert that into my


1068
00:37:43,236 --> 00:37:44,056
seriesBuilder.


1069
00:37:44,816 --> 00:37:48,506
And at the end, we call finish


1070
00:37:48,826 --> 00:37:50,606
on my series, and we're actually


1071
00:37:50,606 --> 00:37:52,426
going to get the new Quantity


1072
00:37:52,426 --> 00:37:54,106
series sample and be able to


1073
00:37:54,106 --> 00:37:55,376
have stored that in a more


1074
00:37:55,376 --> 00:37:56,066
efficient way.


1075
00:37:56,636 --> 00:37:57,986
And so we're really, really


1076
00:37:57,986 --> 00:37:59,596
excited for you to start


1077
00:37:59,596 --> 00:38:00,946
implemented our new Quantity


1078
00:38:01,036 --> 00:38:02,746
series APIs in your apps because


1079
00:38:02,746 --> 00:38:04,376
it's a brand-new way to store


1080
00:38:04,376 --> 00:38:06,086
your data more efficiently, and


1081
00:38:06,086 --> 00:38:07,726
its ability to be able to relate


1082
00:38:07,726 --> 00:38:09,536
data together really allows for


1083
00:38:09,536 --> 00:38:10,866
some interesting analysis.


1084
00:38:14,206 --> 00:38:16,576
So we have talked about a lot of


1085
00:38:16,576 --> 00:38:18,466
interesting things, and we think


1086
00:38:18,466 --> 00:38:19,876
that the best way to think about


1087
00:38:19,876 --> 00:38:21,436
them is actually as parts of a


1088
00:38:21,436 --> 00:38:23,246
whole because together they


1089
00:38:23,246 --> 00:38:24,996
really make up a way for you to


1090
00:38:24,996 --> 00:38:26,666
respect your users' user


1091
00:38:26,666 --> 00:38:28,666
experience from start to finish.


1092
00:38:29,296 --> 00:38:31,396
Of course, we have to start with


1093
00:38:31,396 --> 00:38:32,716
respecting user privacy.


1094
00:38:32,986 --> 00:38:35,496
Our users are giving access to


1095
00:38:35,496 --> 00:38:36,496
one of their most sensitive


1096
00:38:36,496 --> 00:38:38,706
data, and it is so important for


1097
00:38:38,706 --> 00:38:39,756
us to make sure that we're


1098
00:38:39,756 --> 00:38:41,046
treating it with the respect


1099
00:38:41,046 --> 00:38:41,746
that it deserves.


1100
00:38:42,616 --> 00:38:44,836
Next, with the brand-new workout


1101
00:38:44,836 --> 00:38:46,466
features Karim mentioned, we're


1102
00:38:46,466 --> 00:38:48,076
able to create seamless user


1103
00:38:48,076 --> 00:38:48,806
experiences.


1104
00:38:49,216 --> 00:38:50,626
With things like workout crash


1105
00:38:50,626 --> 00:38:52,376
recovery, we're able to really


1106
00:38:52,376 --> 00:38:54,106
deliver an experience to our


1107
00:38:54,106 --> 00:38:55,636
users that they expect.


1108
00:38:56,326 --> 00:38:58,426
And lastly, by implementing our


1109
00:38:58,426 --> 00:39:00,456
new Quantity series APIs, you're


1110
00:39:00,456 --> 00:39:01,726
respecting the device's


1111
00:39:01,726 --> 00:39:03,386
capabilities and really making


1112
00:39:03,386 --> 00:39:05,246
sure that, from start to finish,


1113
00:39:05,586 --> 00:39:06,956
you are giving your users the


1114
00:39:06,956 --> 00:39:08,306
best experience possible.


1115
00:39:08,866 --> 00:39:10,246
And as the health and fitness


1116
00:39:10,246 --> 00:39:11,966
space and as workout apps just


1117
00:39:11,966 --> 00:39:13,916
keep growing and users keep


1118
00:39:13,916 --> 00:39:15,506
using them more, we're so


1119
00:39:15,506 --> 00:39:17,016
excited to see how these steps


1120
00:39:17,016 --> 00:39:18,526
come together to create really


1121
00:39:18,526 --> 00:39:19,776
incredible experiences.


1122
00:39:21,326 --> 00:39:22,796
So for more information, please


1123
00:39:22,796 --> 00:39:23,576
check out our developer


1124
00:39:23,576 --> 00:39:25,236
documentation, but we'd actually


1125
00:39:25,236 --> 00:39:26,656
love to see you in person today.


1126
00:39:26,686 --> 00:39:28,416
We're going to be at a lab today


1127
00:39:28,416 --> 00:39:30,546
from 1 to 3 as well as our


1128
00:39:30,616 --> 00:39:31,786
Health, Fitness, and Research


1129
00:39:31,786 --> 00:39:33,196
Get-Together later this evening,


1130
00:39:33,196 --> 00:39:34,406
and we'd love to answer any of


1131
00:39:34,406 --> 00:39:35,886
your questions, and hear your


1132
00:39:35,886 --> 00:39:38,026
stories, and meet you in person.


1133
00:39:38,116 --> 00:39:39,816
We also want to mention that we


1134
00:39:39,816 --> 00:39:41,166
have a brand-new features in


1135
00:39:41,166 --> 00:39:43,146
HealthKit, and we'd love for you


1136
00:39:43,146 --> 00:39:44,436
all to check out their talk,


1137
00:39:44,436 --> 00:39:45,606
Accessing Health Records with


1138
00:39:45,606 --> 00:39:46,056
HealthKit.


1139
00:39:47,306 --> 00:39:48,256
So thank you so much.


1140
00:39:48,256 --> 00:39:49,746
We're so excited to see what you


1141
00:39:49,746 --> 00:39:50,486
all do with this.


1142
00:39:50,996 --> 00:39:51,516
Thank you.


1143
00:39:52,516 --> 00:39:58,840
[ Applause ]

