1
00:00:01,134 --> 00:00:04,771
Hi, I am
Lawrence from the NFC team.


2
00:00:04,771 --> 00:00:07,875
Welcome to this Core NFC update.


3
00:00:07,875 --> 00:00:11,178
We have got a new feature
for Core NFC this year


4
00:00:11,178 --> 00:00:14,548
that will not only enhance
the NFC experience,


5
00:00:14,548 --> 00:00:18,018
but also greatly simplify
the process of handling NFC tags


6
00:00:18,018 --> 00:00:20,320
within your applications.


7
00:00:20,320 --> 00:00:23,357
If you are new to Core NFC,
I recommend that you watch


8
00:00:23,357 --> 00:00:28,028
the "Introduction to Core NFC"
video released last year.


9
00:00:28,028 --> 00:00:30,030
With the new background tag
reading feature,


10
00:00:30,030 --> 00:00:32,999
the iPhone is able
to automatically read NFC tags


11
00:00:32,999 --> 00:00:36,536
and deliver them
to the appropriate apps.


12
00:00:36,536 --> 00:00:38,805
The mechanism
is able to perform


13
00:00:38,805 --> 00:00:41,708
the necessary app launch
or bringing the application


14
00:00:41,708 --> 00:00:43,911
to the foreground state.


15
00:00:43,911 --> 00:00:44,845
We are excited to see


16
00:00:44,845 --> 00:00:47,281
how this can make the user
experience even better


17
00:00:47,281 --> 00:00:51,251
and make it easier for apps
to handle NFC tags.


18
00:00:52,619 --> 00:00:56,556
In this video, I will discuss
the NFC tag data requirements,


19
00:00:56,556 --> 00:00:58,825
the expected user experience,


20
00:00:58,825 --> 00:01:00,994
when background tag reading
is supported,


21
00:01:00,994 --> 00:01:04,563
and some example code snippets
to get you started.


22
00:01:04,563 --> 00:01:05,666
Background tag reading


23
00:01:05,666 --> 00:01:08,302
will work with
any NDEF formatted tag


24
00:01:08,302 --> 00:01:11,805
whose NDEF message
includes a URL record.


25
00:01:11,805 --> 00:01:15,642
Only the first discovered
URL record in the NDEF message


26
00:01:15,642 --> 00:01:17,044
will be processed.


27
00:01:17,044 --> 00:01:21,648
The URL record must contain
a valid Apple Universal Link URL


28
00:01:21,648 --> 00:01:25,085
in order for the message
to be routed to an application.


29
00:01:25,085 --> 00:01:27,754
iOS will route the message
to the application


30
00:01:27,754 --> 00:01:31,091
registered with
the Apple Universal Link.


31
00:01:31,091 --> 00:01:32,592
While the screen is on,


32
00:01:32,592 --> 00:01:36,363
background tag reading
will scan for nearby NFC tags.


33
00:01:36,363 --> 00:01:39,333
Once a compatible tag
is successfully read,


34
00:01:39,333 --> 00:01:41,201
a pop-up
from the Notification Center


35
00:01:41,201 --> 00:01:43,937
will appear
on the iPhone screen.


36
00:01:43,937 --> 00:01:46,406
Tapping on the notification
will trigger the delivery


37
00:01:46,406 --> 00:01:50,610
of a NSUserActivity object
to the associated application


38
00:01:50,610 --> 00:01:53,714
using the Apple Universal Link
mechanisms.


39
00:01:53,714 --> 00:01:55,716
By default,
Safari will handle


40
00:01:55,716 --> 00:01:58,018
all unregistered
application links


41
00:01:58,018 --> 00:02:01,822
and it will
only process the URL payload. 


42
00:02:01,822 --> 00:02:04,024
There are also
other URL schemes


43
00:02:04,024 --> 00:02:06,593
that trigger
a default iOS behavior,


44
00:02:06,593 --> 00:02:09,229
which I will discuss later on.


45
00:02:09,229 --> 00:02:11,798
Any unprocessed notification
will be saved


46
00:02:11,798 --> 00:02:15,202
in the Notification Center
for future reference.


47
00:02:15,202 --> 00:02:19,439
Here is what happens
when the user taps an NFC tag.


48
00:02:19,439 --> 00:02:22,342
A notification will be shown,
and tapping on the notification


49
00:02:22,342 --> 00:02:24,911
will launch
the registered application.


50
00:02:24,911 --> 00:02:26,680
Once the application
is running,


51
00:02:26,680 --> 00:02:30,384
tapping on the NFC tag again
will trigger a new notification.


52
00:02:30,384 --> 00:02:32,386
[ALERT TONE]


53
00:02:34,788 --> 00:02:36,790
[ALERT TONE]


54
00:02:42,429 --> 00:02:45,198
When a tag is read
in the locked state,


55
00:02:45,198 --> 00:02:47,601
the user will be prompted
to first unlock the phone


56
00:02:47,601 --> 00:02:50,670
before the tag data
can be processed.


57
00:02:50,670 --> 00:02:52,672
[ALERT TONE]


58
00:03:00,013 --> 00:03:03,850
Background tag reading
is supported on iPhone XS,


59
00:03:03,850 --> 00:03:07,454
iPhone XS Max,
and iPhone XR.


60
00:03:07,454 --> 00:03:10,590
The phone must first be unlocked
at least once after boot up


61
00:03:10,590 --> 00:03:13,460
for background tag reading
to be operational.


62
00:03:13,460 --> 00:03:14,394
After first unlock,


63
00:03:14,394 --> 00:03:17,631
the device will scan
for NFC tags in the background


64
00:03:17,631 --> 00:03:20,967
whenever the display is on
regardless of the lock state,


65
00:03:20,967 --> 00:03:23,670
except for
the following conditions:


66
00:03:23,670 --> 00:03:26,740
a Core NFC reader session
is in progress,


67
00:03:26,740 --> 00:03:29,643
Wallet or Apple Pay are in use,


68
00:03:29,643 --> 00:03:31,645
cameras are in use,


69
00:03:31,645 --> 00:03:34,881
or the device
is in Airplane Mode.


70
00:03:34,881 --> 00:03:37,784
Now let us walk through the
required implementation steps


71
00:03:37,784 --> 00:03:38,919
in your application


72
00:03:38,919 --> 00:03:41,588
to receive the content
of the NFC tag.


73
00:03:41,588 --> 00:03:44,424
This is broken down
into three main steps.


74
00:03:44,424 --> 00:03:47,160
You will need to register
the associated domains


75
00:03:47,160 --> 00:03:51,164
for your application as per
the Universal Link requirements.


76
00:03:51,164 --> 00:03:55,202
Then you will need to adopt the
UIApplicationDelegate protocol,


77
00:03:55,202 --> 00:04:00,340
application(_:continue:
restorationHandler:) function.


78
00:04:00,340 --> 00:04:03,143
Finally, you will need 
to extract the NDEF message


79
00:04:03,143 --> 00:04:06,012
from the ndefMessagePayload
property


80
00:04:06,012 --> 00:04:10,150
of the NSUserActivity object.


81
00:04:10,150 --> 00:04:12,085
To register your domain
in your app,


82
00:04:12,085 --> 00:04:15,856
open your project in Xcode
and enter the server host domain


83
00:04:15,856 --> 00:04:19,826
in the Associated Domains
section.


84
00:04:19,826 --> 00:04:21,228
Here is a code snippet


85
00:04:21,228 --> 00:04:24,631
illustrating how to receive
a NSUserActivity object


86
00:04:24,631 --> 00:04:27,334
in your UIKit application.


87
00:04:27,334 --> 00:04:30,737
First, import
the Core NFC framework.


88
00:04:30,737 --> 00:04:32,873
Implement the
UIApplicationDelegate


89
00:04:32,873 --> 00:04:33,773
protocol method,


90
00:04:33,773 --> 00:04:38,011
application (_:continue:
restorationHandler:).


91
00:04:38,011 --> 00:04:43,083
Validate the activity type is
NSUserActivityTypeBrowsingWeb


92
00:04:43,083 --> 00:04:45,085
in the handler.


93
00:04:47,721 --> 00:04:50,123
Read the NFCNDEFMessage


94
00:04:50,123 --> 00:04:53,426
from the ndefMessagePayload
property.


95
00:04:53,426 --> 00:04:55,662
This contains
the entire NDEF message


96
00:04:55,662 --> 00:04:58,331
read from the NFC tag.


97
00:04:58,331 --> 00:05:03,436
The message contains an array
of NFC NDEF payload records.


98
00:05:03,436 --> 00:05:07,407
Each NDEF record
contains the typeNameFormat,


99
00:05:07,407 --> 00:05:11,778
the Type, the Identifier,
and the data payload.


100
00:05:11,778 --> 00:05:14,047
One of the NFC NDEF payload


101
00:05:14,047 --> 00:05:17,250
will contain the URL record
with the Universal Link


102
00:05:17,250 --> 00:05:20,187
that triggered the launch
of your application.


103
00:05:20,187 --> 00:05:22,656
Please refer
to the NFC Forum specifications


104
00:05:22,656 --> 00:05:26,193
regarding the various
record type definitions.


105
00:05:26,193 --> 00:05:29,095
If the received
NSUserActivity object


106
00:05:29,095 --> 00:05:31,932
did not originate from
the background tag reading,


107
00:05:31,932 --> 00:05:34,601
then the resulting
NFCNDEFMessage


108
00:05:34,601 --> 00:05:38,872
will contain exactly one
NFC NDEF payload object


109
00:05:38,872 --> 00:05:44,811
with its typeNameFormat property
set to NFCTypeNameFormatEmpty.


110
00:05:46,813 --> 00:05:50,283
If the URL record does not
contain a Universal Link,


111
00:05:50,283 --> 00:05:53,520
iOS can still handle
many of the same URI schemes


112
00:05:53,520 --> 00:05:57,824
as the QR code scanner
such as HomeKit, SMS,


113
00:05:57,824 --> 00:05:59,726
GPS, and others.


114
00:05:59,726 --> 00:06:00,660
Here is an example


115
00:06:00,660 --> 00:06:04,231
of some of the various
supported schemes.


116
00:06:04,231 --> 00:06:06,499
You can find more information
about Core NFC


117
00:06:06,499 --> 00:06:09,502
on developer.apple.com.

