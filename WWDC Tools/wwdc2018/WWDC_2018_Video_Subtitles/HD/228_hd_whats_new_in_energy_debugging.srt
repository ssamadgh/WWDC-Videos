1
00:00:00,506 --> 00:00:15,500
[ Music ]


2
00:00:20,021 --> 00:00:22,021
[ Applause ]


3
00:00:22,026 --> 00:00:22,636
>> Thank you.


4
00:00:24,876 --> 00:00:25,286
Thank you.


5
00:00:26,516 --> 00:00:27,596
Good afternoon, everyone.


6
00:00:27,986 --> 00:00:29,356
My name is Phil Azar, and I'm a


7
00:00:29,356 --> 00:00:30,466
software engineer on the Power


8
00:00:30,466 --> 00:00:31,036
Team at Apple.


9
00:00:31,856 --> 00:00:33,426
Today, along with my colleague,


10
00:00:33,426 --> 00:00:35,166
David, I'm excited to share with


11
00:00:35,166 --> 00:00:36,776
you what's new in energy


12
00:00:36,776 --> 00:00:37,206
debugging.


13
00:00:40,336 --> 00:00:42,206
Battery life is hugely important


14
00:00:42,206 --> 00:00:42,956
to our customers.


15
00:00:43,446 --> 00:00:45,296
The Power Team strives to make


16
00:00:45,296 --> 00:00:46,406
sure that everyone can get


17
00:00:46,406 --> 00:00:47,466
through the day on a single


18
00:00:47,466 --> 00:00:48,996
charge without having to plug


19
00:00:48,996 --> 00:00:49,606
their device in.


20
00:00:50,946 --> 00:00:52,566
We work with our developers here


21
00:00:52,566 --> 00:00:54,386
at Apple to try and optimize


22
00:00:54,386 --> 00:00:56,206
battery life by guiding them and


23
00:00:56,206 --> 00:00:57,796
helping them make design choices


24
00:00:57,796 --> 00:00:59,346
that are energy efficient.


25
00:01:00,276 --> 00:01:02,426
Apps are also hugely important


26
00:01:02,426 --> 00:01:03,186
to our customers.


27
00:01:03,556 --> 00:01:05,906
In fact, we find that most usage


28
00:01:05,906 --> 00:01:07,916
on device is directly attributed


29
00:01:08,086 --> 00:01:09,126
to third-party apps.


30
00:01:09,556 --> 00:01:11,216
This is incredible, and it makes


31
00:01:11,216 --> 00:01:13,446
it more important now than ever


32
00:01:13,446 --> 00:01:15,556
before to focus on energy


33
00:01:15,556 --> 00:01:17,156
efficiency in the design of your


34
00:01:17,156 --> 00:01:17,716
application.


35
00:01:18,826 --> 00:01:20,356
To that end, we're going to talk


36
00:01:20,356 --> 00:01:21,416
about three things today.


37
00:01:21,916 --> 00:01:24,516
First, we're going to talk about


38
00:01:24,516 --> 00:01:25,796
some battery life concepts that


39
00:01:25,796 --> 00:01:27,136
you can employ in your


40
00:01:27,136 --> 00:01:28,956
application to make sure that


41
00:01:28,956 --> 00:01:29,906
you are being as energy


42
00:01:29,906 --> 00:01:30,806
efficient as possible.


43
00:01:31,856 --> 00:01:33,326
Then, we're going to talk about


44
00:01:33,326 --> 00:01:34,506
some tools that we have


45
00:01:34,506 --> 00:01:36,926
available for you to understand


46
00:01:36,926 --> 00:01:38,396
and quantify where energy is


47
00:01:38,396 --> 00:01:39,526
going in your application.


48
00:01:40,236 --> 00:01:41,906
And finally, I'll pass it on to


49
00:01:41,906 --> 00:01:42,996
my colleague, David, who is


50
00:01:42,996 --> 00:01:44,266
going to talk about a new tool


51
00:01:44,266 --> 00:01:45,706
that we have available to take


52
00:01:45,706 --> 00:01:47,176
your energy debugging one step


53
00:01:47,176 --> 00:01:47,536
further.


54
00:01:48,836 --> 00:01:49,846
So, let's go ahead and get


55
00:01:49,846 --> 00:01:51,186
started and talk about some


56
00:01:51,186 --> 00:01:52,106
general concepts.


57
00:01:53,216 --> 00:01:54,446
To make a battery life great for


58
00:01:54,446 --> 00:01:56,096
our users, we have to start with


59
00:01:56,096 --> 00:01:58,136
first principles and understand


60
00:01:58,586 --> 00:02:00,026
what makes battery life battery


61
00:02:00,026 --> 00:02:00,346
life.


62
00:02:01,396 --> 00:02:02,606
So, let's start.


63
00:02:04,056 --> 00:02:05,016
What is energy?


64
00:02:06,166 --> 00:02:07,646
Fundamentally, if you think back


65
00:02:07,646 --> 00:02:09,376
to physics, energy is the


66
00:02:09,376 --> 00:02:10,895
product of power and time.


67
00:02:11,786 --> 00:02:13,386
As your app is running on any of


68
00:02:13,386 --> 00:02:14,686
our platforms, it'll be


69
00:02:14,686 --> 00:02:16,216
consuming energy at various


70
00:02:16,216 --> 00:02:16,666
rates.


71
00:02:17,696 --> 00:02:18,716
This is because the different


72
00:02:18,716 --> 00:02:19,746
things that your app does


73
00:02:19,746 --> 00:02:20,766
consume different amounts of


74
00:02:20,766 --> 00:02:21,196
power.


75
00:02:22,086 --> 00:02:23,746
Additionally, the more time it


76
00:02:23,746 --> 00:02:25,606
spends consuming that power the


77
00:02:25,606 --> 00:02:26,716
more energy consumption you'll


78
00:02:26,716 --> 00:02:27,146
face.


79
00:02:27,916 --> 00:02:29,086
We can plot this graphically.


80
00:02:30,226 --> 00:02:31,956
Here, you can see as your app is


81
00:02:31,956 --> 00:02:33,366
running there are various peaks


82
00:02:33,366 --> 00:02:34,316
and troughs of power


83
00:02:34,316 --> 00:02:34,806
consumption.


84
00:02:35,506 --> 00:02:37,216
It will follow that the area


85
00:02:37,216 --> 00:02:39,926
under that curve is energy, and


86
00:02:39,926 --> 00:02:41,246
this relates directly back to


87
00:02:41,246 --> 00:02:42,486
your application in its various


88
00:02:42,486 --> 00:02:44,706
modes of running.


89
00:02:44,836 --> 00:02:46,586
When your app is active and when


90
00:02:46,586 --> 00:02:48,676
your app is idle, it's going to


91
00:02:48,676 --> 00:02:49,576
consume different amounts of


92
00:02:49,576 --> 00:02:49,966
power.


93
00:02:50,476 --> 00:02:52,116
When your app is active, we say


94
00:02:52,116 --> 00:02:53,376
that the power being consumed is


95
00:02:53,376 --> 00:02:54,386
at its highest point.


96
00:02:55,126 --> 00:02:56,246
This is because the user is


97
00:02:56,246 --> 00:02:57,626
directly using your application


98
00:02:57,626 --> 00:02:59,286
for whatever it was or intended


99
00:02:59,286 --> 00:02:59,556
for.


100
00:03:00,146 --> 00:03:01,996
Then, when your app is idle but


101
00:03:01,996 --> 00:03:03,346
still running, the power


102
00:03:03,346 --> 00:03:04,396
consumption drops.


103
00:03:05,916 --> 00:03:07,326
Finally, when your app is


104
00:03:07,326 --> 00:03:09,106
suspended, there's still a basal


105
00:03:09,106 --> 00:03:11,256
level of power consumption, and


106
00:03:11,256 --> 00:03:12,226
that's interesting to note.


107
00:03:13,646 --> 00:03:14,786
When your app is doing any of


108
00:03:14,786 --> 00:03:16,036
the work that it's been designed


109
00:03:16,036 --> 00:03:17,536
to do, it's going to be asking


110
00:03:17,536 --> 00:03:19,186
the system to bring up hardware


111
00:03:19,576 --> 00:03:20,946
that it needs to do that work,


112
00:03:21,816 --> 00:03:23,946
and the energy associated with


113
00:03:23,946 --> 00:03:25,156
that hardware being brought up


114
00:03:25,156 --> 00:03:27,106
and used is called overhead.


115
00:03:28,146 --> 00:03:29,176
Your app doesn't have direct


116
00:03:29,266 --> 00:03:31,146
control over overhead, but it


117
00:03:31,146 --> 00:03:33,186
really does influence through


118
00:03:33,186 --> 00:03:35,706
anything that it does.


119
00:03:35,906 --> 00:03:37,076
Then, when your apps first


120
00:03:37,076 --> 00:03:38,086
utilize those hardware


121
00:03:38,086 --> 00:03:40,156
resources, this is called active


122
00:03:40,156 --> 00:03:40,556
energy.


123
00:03:41,106 --> 00:03:42,936
So, now, your app has access to,


124
00:03:42,936 --> 00:03:44,916
let's say, the radio or has


125
00:03:44,916 --> 00:03:45,786
access to, let's say, the


126
00:03:45,786 --> 00:03:47,426
camera, and it's using that


127
00:03:47,816 --> 00:03:50,066
subsystem, this energy being


128
00:03:50,066 --> 00:03:51,256
consumed is going to be called


129
00:03:51,256 --> 00:03:52,016
active energy.


130
00:03:53,136 --> 00:03:54,396
So, then, it stands to reason


131
00:03:55,076 --> 00:03:56,376
that the battery life problem is


132
00:03:56,376 --> 00:03:57,966
actually a two-part optimization


133
00:03:57,966 --> 00:03:58,356
problem.


134
00:03:58,926 --> 00:03:59,876
We have to think about being


135
00:03:59,876 --> 00:04:01,076
efficient about the active


136
00:04:01,076 --> 00:04:02,216
energy that we are consuming,


137
00:04:02,526 --> 00:04:03,746
and we also need to be thinking


138
00:04:03,746 --> 00:04:05,186
about the overhead that we'll be


139
00:04:05,186 --> 00:04:06,546
incurring by asking for


140
00:04:06,546 --> 00:04:08,246
different hardware resources on


141
00:04:08,636 --> 00:04:09,000
the system.


142
00:04:11,236 --> 00:04:13,056
So, I've mentioned hardware and


143
00:04:13,056 --> 00:04:14,576
these subsystems that supposedly


144
00:04:14,576 --> 00:04:15,316
consume energy.


145
00:04:16,026 --> 00:04:17,706
So, what exactly consumes energy


146
00:04:17,706 --> 00:04:18,255
on the system?


147
00:04:18,916 --> 00:04:20,055
As an app developer, you're


148
00:04:20,055 --> 00:04:21,236
going to run into a number of


149
00:04:21,236 --> 00:04:23,036
different hardware subsystems in


150
00:04:23,036 --> 00:04:24,386
your app development process.


151
00:04:25,596 --> 00:04:26,946
But there are four subsystems


152
00:04:26,946 --> 00:04:28,206
that we think on the Power Team


153
00:04:28,436 --> 00:04:29,846
will contribute most highly to


154
00:04:29,846 --> 00:04:30,836
your energy consumption.


155
00:04:31,286 --> 00:04:33,716
These are as listed here;


156
00:04:34,846 --> 00:04:36,346
processing, networking,


157
00:04:36,626 --> 00:04:38,236
location, and graphics.


158
00:04:38,746 --> 00:04:40,806
Let's run through these and try


159
00:04:40,806 --> 00:04:41,856
to understand what they mean.


160
00:04:43,236 --> 00:04:44,746
Processing is what you might


161
00:04:44,746 --> 00:04:45,186
imagine.


162
00:04:46,416 --> 00:04:47,766
It's going to be the energy


163
00:04:47,766 --> 00:04:49,476
consumed when your app utilizes


164
00:04:49,476 --> 00:04:50,816
system resources on, let's say,


165
00:04:50,816 --> 00:04:51,436
the SOC.


166
00:04:51,806 --> 00:04:54,096
Such as DRAM, CPU, etcetera.


167
00:04:55,256 --> 00:04:56,356
It's really the workhorse


168
00:04:56,356 --> 00:04:56,896
component.


169
00:04:57,566 --> 00:04:59,426
Energy consumed here is going to


170
00:04:59,426 --> 00:05:01,546
be highly dependent on the code


171
00:05:01,546 --> 00:05:02,786
that your app is executing and


172
00:05:02,786 --> 00:05:03,856
the workload that you've asked


173
00:05:03,856 --> 00:05:04,726
your app to perform.


174
00:05:06,116 --> 00:05:07,656
So, in a nutshell, the more


175
00:05:07,656 --> 00:05:09,116
operations and code your app


176
00:05:09,116 --> 00:05:10,976
executes, the more energy it


177
00:05:10,976 --> 00:05:12,156
will consume in the form of


178
00:05:12,156 --> 00:05:13,306
processing.


179
00:05:14,436 --> 00:05:16,016
Networking is the next major


180
00:05:16,016 --> 00:05:17,226
subsystem that we think about


181
00:05:17,596 --> 00:05:18,796
when we talk about what consumes


182
00:05:18,796 --> 00:05:22,326
energy on our devices.


183
00:05:22,416 --> 00:05:23,736
Networking energy is what you


184
00:05:23,736 --> 00:05:24,356
might imagine.


185
00:05:24,896 --> 00:05:26,476
Whenever your app asks to do any


186
00:05:26,476 --> 00:05:27,956
form of networking over


187
00:05:27,956 --> 00:05:29,966
cellular, Wi-Fi, and Bluetooth,


188
00:05:30,286 --> 00:05:31,966
it's going to consumer energy in


189
00:05:31,966 --> 00:05:32,826
the form of networking.


190
00:05:34,176 --> 00:05:35,096
This energy is


191
00:05:35,096 --> 00:05:35,956
traffic-dependent.


192
00:05:36,466 --> 00:05:37,806
The more traffic that your app


193
00:05:37,806 --> 00:05:39,286
asks to be sent over any of


194
00:05:39,286 --> 00:05:40,746
these technologies, the more


195
00:05:40,746 --> 00:05:41,736
energy it will consume.


196
00:05:41,836 --> 00:05:44,876
So, put it bluntly, the more


197
00:05:44,876 --> 00:05:46,146
network requests that your app


198
00:05:46,146 --> 00:05:47,896
asks for, the more energy you'll


199
00:05:47,896 --> 00:05:49,286
consume in networking.


200
00:05:50,796 --> 00:05:52,496
Location follows suit but it's a


201
00:05:52,496 --> 00:05:53,026
little different.


202
00:05:54,226 --> 00:05:56,096
In a location subsystem, when


203
00:05:56,096 --> 00:05:57,986
your app asks to fix location


204
00:05:58,756 --> 00:06:01,276
using GPS, Wi-Fi, and cellular,


205
00:06:01,996 --> 00:06:03,126
it's going to consume energy in


206
00:06:03,126 --> 00:06:04,286
the location system.


207
00:06:05,676 --> 00:06:07,356
The location energy is going to


208
00:06:07,356 --> 00:06:08,776
be accuracy and frequency


209
00:06:08,776 --> 00:06:09,166
dependent.


210
00:06:10,136 --> 00:06:11,376
If you're asking to fix a user's


211
00:06:11,376 --> 00:06:12,526
location with a high degree of


212
00:06:12,526 --> 00:06:14,366
accuracy and at a very high


213
00:06:14,366 --> 00:06:16,276
cadence, you're going to get a


214
00:06:16,276 --> 00:06:17,686
lot of energy consumed in the


215
00:06:17,686 --> 00:06:18,416
form of location.


216
00:06:18,936 --> 00:06:21,736
So, putting it all together, the


217
00:06:21,736 --> 00:06:23,056
more time spent tracking


218
00:06:23,056 --> 00:06:24,436
location in your application,


219
00:06:24,646 --> 00:06:25,916
the more energy you'll consume


220
00:06:26,366 --> 00:06:27,176
as location energy.


221
00:06:30,136 --> 00:06:32,306
Finally, we have graphics.


222
00:06:32,806 --> 00:06:35,656
In the graphics subsystem, you


223
00:06:35,656 --> 00:06:36,806
would imagine that process


224
00:06:36,806 --> 00:06:38,506
components such as he GPU and


225
00:06:38,506 --> 00:06:40,146
the CPU contribute to the energy


226
00:06:40,146 --> 00:06:41,626
consumed by graphics.


227
00:06:42,786 --> 00:06:44,016
This is going to be animations


228
00:06:44,016 --> 00:06:44,956
and UI dependent.


229
00:06:45,886 --> 00:06:47,206
So, when your app is asking for


230
00:06:47,206 --> 00:06:48,926
any animations to be displayed


231
00:06:48,926 --> 00:06:50,496
or any UI to be rendered, it's


232
00:06:50,496 --> 00:06:51,576
going to consume energy in the


233
00:06:51,576 --> 00:06:52,626
form of graphics.


234
00:06:53,956 --> 00:06:55,556
This is highly complexity


235
00:06:55,556 --> 00:06:55,956
dependent.


236
00:06:56,846 --> 00:06:58,446
The more complex your animations


237
00:06:58,446 --> 00:07:00,186
and UI are the more energy that


238
00:07:00,186 --> 00:07:01,366
you'll consume in the form of


239
00:07:01,366 --> 00:07:01,936
graphics.


240
00:07:03,746 --> 00:07:06,306
Finally, a good rule of thumb is


241
00:07:06,306 --> 00:07:07,386
to say that the more rendering


242
00:07:07,386 --> 00:07:08,826
that your app does, doing


243
00:07:08,826 --> 00:07:10,716
animations or UI, the more


244
00:07:10,716 --> 00:07:11,876
energy you're going to consume


245
00:07:11,876 --> 00:07:12,876
in the form of graphics.


246
00:07:13,386 --> 00:07:16,846
So, we talked about these four


247
00:07:16,846 --> 00:07:18,516
subsystems, and what's the


248
00:07:18,516 --> 00:07:19,386
take-away message?


249
00:07:19,896 --> 00:07:21,146
There's a common thread ties


250
00:07:21,146 --> 00:07:22,426
them all together in our app


251
00:07:22,426 --> 00:07:24,066
development, and so that the


252
00:07:24,066 --> 00:07:25,386
more work you do, the more


253
00:07:25,386 --> 00:07:26,526
energy you're going to consume.


254
00:07:26,956 --> 00:07:29,766
We can't necessarily say do less


255
00:07:29,766 --> 00:07:31,246
work because that means our app


256
00:07:31,246 --> 00:07:31,996
might do less.


257
00:07:32,966 --> 00:07:34,116
So, then, the point here is that


258
00:07:34,116 --> 00:07:35,566
we need to optimize the work we


259
00:07:35,566 --> 00:07:36,706
do and make it as


260
00:07:36,706 --> 00:07:38,066
energy-efficient as possible.


261
00:07:38,586 --> 00:07:41,606
But it's not so simple.


262
00:07:42,706 --> 00:07:44,236
Thinking about energy efficiency


263
00:07:44,276 --> 00:07:45,146
is a process.


264
00:07:45,886 --> 00:07:46,846
It's not just so that we can


265
00:07:46,846 --> 00:07:48,016
make an optimization and


266
00:07:48,016 --> 00:07:49,556
suddenly our energy is going to


267
00:07:49,556 --> 00:07:52,246
be more efficient or our app is


268
00:07:52,246 --> 00:07:53,096
going to be better for battery


269
00:07:53,096 --> 00:07:53,416
life.


270
00:07:53,646 --> 00:07:56,016
We have to get into this mode of


271
00:07:56,016 --> 00:07:57,746
thinking that our app has a set


272
00:07:57,746 --> 00:07:58,886
of resources that it's using,


273
00:07:58,886 --> 00:07:59,686
and we need to use those


274
00:07:59,686 --> 00:08:00,776
resources efficiently.


275
00:08:01,256 --> 00:08:04,166
So, with that being said, let's


276
00:08:04,166 --> 00:08:05,926
take a look at some examples of


277
00:08:05,926 --> 00:08:07,706
real-world situations where we


278
00:08:07,706 --> 00:08:08,656
can think about energy


279
00:08:08,656 --> 00:08:10,636
efficiency and really start this


280
00:08:10,636 --> 00:08:11,356
process off.


281
00:08:12,296 --> 00:08:13,696
Let's talk about when our app is


282
00:08:13,696 --> 00:08:14,336
in the foreground.


283
00:08:15,646 --> 00:08:16,186
When our app is in the


284
00:08:16,186 --> 00:08:17,816
foreground, it will likely be


285
00:08:17,816 --> 00:08:18,816
providing the main user


286
00:08:18,816 --> 00:08:19,496
experience.


287
00:08:19,776 --> 00:08:21,126
For many of us, this is the most


288
00:08:21,126 --> 00:08:22,166
important and critical part of


289
00:08:22,166 --> 00:08:22,896
our application.


290
00:08:23,546 --> 00:08:25,986
With that being said, energy


291
00:08:25,986 --> 00:08:27,146
efficiency in the foreground is


292
00:08:27,146 --> 00:08:28,496
about focusing on providing


293
00:08:28,546 --> 00:08:30,726
value to your user, ensuring


294
00:08:30,726 --> 00:08:31,696
that whatever you're doing


295
00:08:31,696 --> 00:08:33,326
provides some immediate impact


296
00:08:33,326 --> 00:08:34,846
for the user experience.


297
00:08:35,916 --> 00:08:37,796
One tenet we can follow is to


298
00:08:37,796 --> 00:08:39,106
only do work when required.


299
00:08:40,166 --> 00:08:41,226
Sounds pretty straightforward.


300
00:08:42,176 --> 00:08:43,616
Well, let's take a look at an


301
00:08:43,616 --> 00:08:45,246
example and illustrate why this


302
00:08:45,246 --> 00:08:45,906
is so important.


303
00:08:46,326 --> 00:08:48,096
Let's say you're building a


304
00:08:48,096 --> 00:08:49,826
media application, and the


305
00:08:49,826 --> 00:08:50,886
primary goal of the media


306
00:08:50,886 --> 00:08:52,336
application is to present


307
00:08:52,336 --> 00:08:54,056
content to the user at a regular


308
00:08:54,056 --> 00:08:54,606
cadence.


309
00:08:55,476 --> 00:08:57,666
Well, a really robust solution


310
00:08:57,756 --> 00:08:59,186
would be to implement a sort of


311
00:08:59,186 --> 00:09:00,736
timer-based approach to refresh


312
00:09:00,736 --> 00:09:01,456
the content feed.


313
00:09:01,816 --> 00:09:03,436
This will ensure that the


314
00:09:03,436 --> 00:09:05,136
content of the user is seeing is


315
00:09:05,136 --> 00:09:06,916
as fresh as possible without any


316
00:09:06,916 --> 00:09:07,796
sort of interaction.


317
00:09:09,016 --> 00:09:09,936
This isn't a very


318
00:09:09,936 --> 00:09:12,196
energy-efficient approach, and


319
00:09:12,196 --> 00:09:13,336
let's sort of understand why.


320
00:09:13,956 --> 00:09:16,496
If we plot the power over time


321
00:09:16,496 --> 00:09:18,576
curve for a solution like that,


322
00:09:19,116 --> 00:09:20,546
we see that every time our timer


323
00:09:20,546 --> 00:09:22,576
fires, we have a little bit of


324
00:09:22,576 --> 00:09:23,886
active energy that's consumed.


325
00:09:25,266 --> 00:09:26,336
But the really important part


326
00:09:26,336 --> 00:09:28,146
here is that we have a ton of


327
00:09:28,146 --> 00:09:30,486
overhead, and this is because


328
00:09:30,486 --> 00:09:32,426
every time we ask to display new


329
00:09:32,426 --> 00:09:34,056
content, we likely have to bring


330
00:09:34,056 --> 00:09:35,236
up subsystems such as


331
00:09:35,236 --> 00:09:37,246
networking, graphics, and


332
00:09:37,246 --> 00:09:38,886
processing to do all that work


333
00:09:38,886 --> 00:09:40,256
and display that content, and


334
00:09:40,256 --> 00:09:41,636
the user might not actually want


335
00:09:41,636 --> 00:09:41,766
it.


336
00:09:42,326 --> 00:09:43,446
So, we'll end up burning a lot


337
00:09:43,446 --> 00:09:45,036
of energy consistently while


338
00:09:45,036 --> 00:09:45,946
that application is running.


339
00:09:46,456 --> 00:09:48,026
We can do better.


340
00:09:48,336 --> 00:09:50,926
If we think about what the user


341
00:09:50,926 --> 00:09:52,236
actually wants, the fresh


342
00:09:52,236 --> 00:09:53,876
content, we can implement a


343
00:09:53,876 --> 00:09:55,896
solution that is on demand.


344
00:09:57,326 --> 00:09:59,146
Now, in this new solution, user


345
00:09:59,146 --> 00:10:00,646
interaction or some kind of a


346
00:10:00,646 --> 00:10:01,916
notification from our server


347
00:10:02,416 --> 00:10:03,796
will provide us the new content


348
00:10:04,436 --> 00:10:05,586
and display it to the user.


349
00:10:07,416 --> 00:10:08,646
This solution isn't that


350
00:10:08,646 --> 00:10:09,426
different, but it's an


351
00:10:09,426 --> 00:10:11,136
energy-efficient approach and


352
00:10:11,136 --> 00:10:12,906
makes a dramatic impact on our


353
00:10:12,906 --> 00:10:13,726
power over time.


354
00:10:14,426 --> 00:10:15,286
Let's take a look at why.


355
00:10:16,496 --> 00:10:17,936
Now, if we imaging that our app


356
00:10:17,936 --> 00:10:18,996
is running in the foreground,


357
00:10:18,996 --> 00:10:20,296
and a user interaction occurs,


358
00:10:20,656 --> 00:10:22,056
we would refresh our content


359
00:10:22,056 --> 00:10:23,756
feed and display it to the user.


360
00:10:24,276 --> 00:10:26,636
Then, our app will go idle as


361
00:10:26,636 --> 00:10:27,986
our user is using it, let's say,


362
00:10:28,746 --> 00:10:29,996
to scroll or just to read the


363
00:10:29,996 --> 00:10:31,116
content that's been displayed.


364
00:10:31,796 --> 00:10:33,206
You'll notice that the overhead


365
00:10:33,206 --> 00:10:34,516
here is still a little bit high,


366
00:10:34,516 --> 00:10:35,706
but it's been significantly


367
00:10:35,706 --> 00:10:36,176
reduced.


368
00:10:37,026 --> 00:10:38,086
The trick here is that we've


369
00:10:38,086 --> 00:10:39,606
allowed the subsystems we no


370
00:10:39,606 --> 00:10:41,846
longer need to go to sleep and


371
00:10:41,846 --> 00:10:43,026
idle off.


372
00:10:45,276 --> 00:10:47,166
Another tenet that we can follow


373
00:10:47,556 --> 00:10:49,046
to reduce our energy consumption


374
00:10:49,046 --> 00:10:51,306
in the foreground is to minimize


375
00:10:51,306 --> 00:10:52,196
complex UI.


376
00:10:53,376 --> 00:10:54,516
So, I mentioned before that in


377
00:10:54,516 --> 00:10:56,696
graphics our energy consumption


378
00:10:56,696 --> 00:10:58,676
is highly complexity-dependent,


379
00:10:59,756 --> 00:11:00,726
and we always want to make our


380
00:11:00,726 --> 00:11:01,926
apps look as good as possible.


381
00:11:01,926 --> 00:11:03,226
So, we're going to spend a lot


382
00:11:03,226 --> 00:11:04,726
of time building this UI that


383
00:11:04,726 --> 00:11:06,436
looks great and animations that


384
00:11:06,436 --> 00:11:07,406
are pleasing to view.


385
00:11:08,686 --> 00:11:09,406
However, this can have


386
00:11:09,406 --> 00:11:11,556
unintended side effects, and


387
00:11:11,816 --> 00:11:12,946
let's look at an example to


388
00:11:12,946 --> 00:11:13,666
illustrate why.


389
00:11:14,266 --> 00:11:17,636
If I'm a video player, my goal


390
00:11:17,636 --> 00:11:19,156
is to let a user watch a video.


391
00:11:20,056 --> 00:11:20,416
Simple.


392
00:11:21,116 --> 00:11:22,696
But I could be tempted to add


393
00:11:22,696 --> 00:11:24,786
new controls and UI above that


394
00:11:24,786 --> 00:11:26,446
video, let's say, in the form of


395
00:11:26,516 --> 00:11:28,716
related videos or a scrubber or


396
00:11:28,716 --> 00:11:29,856
maybe volume controls.


397
00:11:30,896 --> 00:11:32,076
This allows a greater degree of


398
00:11:32,076 --> 00:11:34,276
control to the user to use this


399
00:11:34,276 --> 00:11:35,666
application and enjoy the video


400
00:11:35,666 --> 00:11:36,756
they're watching.


401
00:11:37,636 --> 00:11:39,256
This is actually insidiously


402
00:11:39,256 --> 00:11:41,606
energy inefficient, and let's


403
00:11:41,606 --> 00:11:42,406
understand why.


404
00:11:43,506 --> 00:11:45,276
On many of our devices, there's


405
00:11:45,276 --> 00:11:46,836
a display optimization in place


406
00:11:47,086 --> 00:11:48,496
that allows for video playback


407
00:11:48,496 --> 00:11:50,076
to be very energy efficient when


408
00:11:50,076 --> 00:11:51,456
there is no UI on screen.


409
00:11:52,276 --> 00:11:53,426
This is something that is not


410
00:11:53,426 --> 00:11:54,526
immediately clear when you're


411
00:11:54,526 --> 00:11:55,556
building an application like


412
00:11:55,556 --> 00:11:55,896
this.


413
00:11:56,216 --> 00:11:57,516
However, it makes all the


414
00:11:57,516 --> 00:11:58,116
difference.


415
00:11:58,556 --> 00:12:01,236
So, a good approach to take


416
00:12:01,236 --> 00:12:02,586
advantage of this optimization


417
00:12:02,586 --> 00:12:03,966
and counteract this sort of


418
00:12:03,966 --> 00:12:06,066
energy inefficiency we see is to


419
00:12:06,806 --> 00:12:09,596
have a simple auto dismissal of


420
00:12:09,596 --> 00:12:10,556
our UI controls.


421
00:12:11,076 --> 00:12:13,676
And this could mean that any


422
00:12:13,676 --> 00:12:15,526
related content that we put on


423
00:12:15,526 --> 00:12:17,296
the video or in the UI layer


424
00:12:17,496 --> 00:12:18,786
simply goes away if the user is


425
00:12:18,786 --> 00:12:19,606
not interacting with it.


426
00:12:20,776 --> 00:12:22,526
This makes a big difference on


427
00:12:22,526 --> 00:12:23,546
our energy consumption during


428
00:12:23,546 --> 00:12:25,466
video playback, as this display


429
00:12:25,466 --> 00:12:27,006
optimization is critical for


430
00:12:27,006 --> 00:12:28,166
maintaining quiescent


431
00:12:28,596 --> 00:12:30,076
energy-efficient playback.


432
00:12:30,076 --> 00:12:34,586
So, we've talked a lot about the


433
00:12:34,586 --> 00:12:36,116
foreground, but what about the


434
00:12:36,116 --> 00:12:36,646
background?


435
00:12:37,136 --> 00:12:38,316
Many of us who are building


436
00:12:38,316 --> 00:12:39,396
applications such as music


437
00:12:39,396 --> 00:12:40,996
players, or maybe even alarm


438
00:12:40,996 --> 00:12:42,176
clocks, are focused on the


439
00:12:42,176 --> 00:12:42,706
background.


440
00:12:43,296 --> 00:12:44,746
Our main experience comes from


441
00:12:44,746 --> 00:12:46,316
our app running effectively in


442
00:12:46,316 --> 00:12:46,776
the background.


443
00:12:48,796 --> 00:12:49,866
Well, when we're in the


444
00:12:49,866 --> 00:12:51,116
background, we have some things


445
00:12:51,116 --> 00:12:52,056
that we need to be aware of.


446
00:12:53,326 --> 00:12:54,416
Likely, our app is going to be


447
00:12:54,416 --> 00:12:55,646
running in conjunction and


448
00:12:55,646 --> 00:12:57,196
concurrently with other systems


449
00:12:57,196 --> 00:12:57,816
on device.


450
00:12:58,616 --> 00:13:00,466
Let's say I'll be using iMessage


451
00:13:00,606 --> 00:13:01,626
or maybe even Facetime.


452
00:13:02,316 --> 00:13:04,466
To that end, we should focus on


453
00:13:04,466 --> 00:13:06,346
minimizing our workload to


454
00:13:06,346 --> 00:13:07,576
ensure energy efficiency when


455
00:13:07,576 --> 00:13:08,346
we're in the background.


456
00:13:09,816 --> 00:13:11,186
Well, this is a pretty broad


457
00:13:11,186 --> 00:13:11,676
statement.


458
00:13:11,956 --> 00:13:12,686
So, let's kind of try to


459
00:13:12,686 --> 00:13:14,196
understand it.


460
00:13:14,566 --> 00:13:15,556
When you're in the background,


461
00:13:16,076 --> 00:13:17,166
you may be able to utilize


462
00:13:17,166 --> 00:13:18,216
subsystems that are already


463
00:13:18,216 --> 00:13:19,936
being used by other apps on the


464
00:13:19,936 --> 00:13:20,446
system.


465
00:13:20,906 --> 00:13:22,436
However, it's important to note


466
00:13:22,436 --> 00:13:23,266
that the majority of the


467
00:13:23,266 --> 00:13:24,766
priority for the energy


468
00:13:24,766 --> 00:13:25,966
consumption is going to go to


469
00:13:25,966 --> 00:13:26,966
those applications that are in


470
00:13:26,966 --> 00:13:27,466
the foreground.


471
00:13:28,356 --> 00:13:30,286
So, then, we should focus on


472
00:13:30,286 --> 00:13:31,696
minimizing our workload to make


473
00:13:31,696 --> 00:13:32,636
sure we don't interrupt those


474
00:13:32,636 --> 00:13:33,406
experiences.


475
00:13:34,616 --> 00:13:35,726
One way we can start thinking


476
00:13:35,726 --> 00:13:37,756
about this is to coalesce all of


477
00:13:37,756 --> 00:13:38,226
our tasks.


478
00:13:38,846 --> 00:13:40,016
If there's a lot of maintenance


479
00:13:40,016 --> 00:13:41,016
work, let's say, that we need to


480
00:13:41,016 --> 00:13:42,486
do in the background, or we have


481
00:13:42,486 --> 00:13:43,556
a lot of networking activity


482
00:13:43,556 --> 00:13:44,516
that needs to be performed,


483
00:13:45,016 --> 00:13:46,766
let's say, then it would be best


484
00:13:46,766 --> 00:13:47,946
for us to group those together


485
00:13:47,946 --> 00:13:49,106
and do them all at the same


486
00:13:49,106 --> 00:13:49,476
time.


487
00:13:50,206 --> 00:13:51,346
That way, we have the minimal


488
00:13:51,346 --> 00:13:52,736
impact on anything else


489
00:13:52,736 --> 00:13:53,526
happening on the system.


490
00:13:53,966 --> 00:13:56,476
A really common example that


491
00:13:56,476 --> 00:13:57,726
many of you may face is to


492
00:13:57,726 --> 00:13:59,356
upload analytics and working


493
00:13:59,356 --> 00:14:00,546
with application analytics.


494
00:14:01,886 --> 00:14:02,886
It's likely that when you're


495
00:14:02,886 --> 00:14:04,046
collecting these analytics


496
00:14:04,396 --> 00:14:04,986
you'll be sending them


497
00:14:04,986 --> 00:14:06,416
immediately because this is a


498
00:14:06,416 --> 00:14:07,756
very robust solution, and it


499
00:14:07,756 --> 00:14:09,266
allows you to build a dataset


500
00:14:09,686 --> 00:14:10,606
that is protected against


501
00:14:10,606 --> 00:14:11,726
crashes in your application.


502
00:14:12,986 --> 00:14:14,466
Well, doing that may not be very


503
00:14:14,466 --> 00:14:15,286
energy efficient.


504
00:14:15,956 --> 00:14:17,196
If we were to send our analytics


505
00:14:17,196 --> 00:14:18,056
every time we went into the


506
00:14:18,056 --> 00:14:19,826
background, we would risk


507
00:14:19,826 --> 00:14:20,876
overusing our networking


508
00:14:20,876 --> 00:14:21,236
hardware.


509
00:14:21,726 --> 00:14:23,836
And here's how that looks like


510
00:14:23,836 --> 00:14:24,866
when we take a look at the power


511
00:14:24,866 --> 00:14:25,566
over time curve.


512
00:14:26,566 --> 00:14:27,376
Every time we enter the


513
00:14:27,376 --> 00:14:28,896
background, we would spin up


514
00:14:28,896 --> 00:14:30,526
networking resources to send


515
00:14:30,526 --> 00:14:31,516
these analytics, and then we


516
00:14:31,516 --> 00:14:32,606
would come down and go idle


517
00:14:32,606 --> 00:14:32,856
again.


518
00:14:34,106 --> 00:14:35,176
This may not look like a lot


519
00:14:35,406 --> 00:14:36,886
with just three on this graph,


520
00:14:37,346 --> 00:14:38,356
but you can imagine if your


521
00:14:38,356 --> 00:14:39,516
application is experiencing


522
00:14:39,516 --> 00:14:41,216
heavy usage, this adds up over


523
00:14:41,216 --> 00:14:41,526
time.


524
00:14:43,816 --> 00:14:45,186
The right way to do this is


525
00:14:45,226 --> 00:14:48,246
super straightforward, and it's


526
00:14:48,246 --> 00:14:49,586
simply to send these in deferred


527
00:14:49,586 --> 00:14:50,166
batches.


528
00:14:50,216 --> 00:14:52,226
We have a lot of APIs that


529
00:14:52,226 --> 00:14:54,056
support this coalescing


530
00:14:54,056 --> 00:14:55,346
principle, and one of the


531
00:14:55,346 --> 00:14:56,836
biggest ones is NSURLSession.


532
00:14:57,896 --> 00:14:59,156
Using NSURLSession with a


533
00:14:59,156 --> 00:15:00,836
discretionary property and a


534
00:15:00,836 --> 00:15:02,356
background session will enable


535
00:15:02,356 --> 00:15:03,996
you to take advantage of this


536
00:15:03,996 --> 00:15:05,696
sort of an optimization very


537
00:15:05,696 --> 00:15:06,056
quickly,


538
00:15:06,546 --> 00:15:09,466
and this is the right way to do


539
00:15:10,016 --> 00:15:10,086
it.


540
00:15:10,936 --> 00:15:12,286
Let's take a look at what the


541
00:15:12,286 --> 00:15:14,156
energy over time looks like now,


542
00:15:14,426 --> 00:15:15,236
if we've done this.


543
00:15:15,726 --> 00:15:18,596
We can see here that while it


544
00:15:18,596 --> 00:15:20,236
might take a little longer for


545
00:15:20,236 --> 00:15:21,676
our app to do any sort of


546
00:15:21,676 --> 00:15:23,216
uploading for analytics, the


547
00:15:23,216 --> 00:15:24,006
energy that we're going to


548
00:15:24,006 --> 00:15:26,326
consume is going to be far less,


549
00:15:26,746 --> 00:15:27,876
and it's going to be condensed


550
00:15:27,876 --> 00:15:28,936
to one single burst.


551
00:15:29,656 --> 00:15:31,256
This is effectively the result


552
00:15:31,406 --> 00:15:33,386
of coalescing any tasks when


553
00:15:33,386 --> 00:15:33,786
you're running in the


554
00:15:33,786 --> 00:15:34,196
background.


555
00:15:35,126 --> 00:15:36,666
You get a high energy for a


556
00:15:36,666 --> 00:15:38,176
short period of time completing


557
00:15:38,176 --> 00:15:39,436
those tasks, but then once


558
00:15:39,436 --> 00:15:40,926
you're finished you no longer


559
00:15:40,926 --> 00:15:41,916
have to worry about doing those


560
00:15:41,916 --> 00:15:42,886
tasks and potentially


561
00:15:42,886 --> 00:15:44,086
interrupting an experience of


562
00:15:44,086 --> 00:15:45,336
another application.


563
00:15:47,016 --> 00:15:49,306
Another example that seems sort


564
00:15:49,306 --> 00:15:50,666
of straightforward is to end


565
00:15:50,666 --> 00:15:51,506
your tasks quickly.


566
00:15:52,706 --> 00:15:54,126
With many APIs on the system


567
00:15:54,126 --> 00:15:55,256
that allow you to take advantage


568
00:15:55,256 --> 00:15:57,446
of background running, things


569
00:15:57,446 --> 00:15:58,636
like UI background task and


570
00:15:58,636 --> 00:16:00,546
UIKit, or VOIP and PushKit.


571
00:16:00,996 --> 00:16:04,766
And these APIs have ways for you


572
00:16:04,766 --> 00:16:06,036
as an app developer to indicate


573
00:16:06,266 --> 00:16:07,376
that you no longer need to run


574
00:16:07,376 --> 00:16:10,956
in the background.


575
00:16:11,076 --> 00:16:12,706
So, it stands to reason that as


576
00:16:12,706 --> 00:16:13,626
an app developer, if you're


577
00:16:13,626 --> 00:16:14,586
using any of these background


578
00:16:14,586 --> 00:16:16,536
modes, you would call these


579
00:16:16,596 --> 00:16:17,786
completion handlers, let's say,


580
00:16:18,226 --> 00:16:18,976
to let the system know you're


581
00:16:18,976 --> 00:16:19,236
done.


582
00:16:19,866 --> 00:16:21,536
Well, that doesn't always


583
00:16:21,536 --> 00:16:23,346
happen, and in a lot of cases,


584
00:16:23,846 --> 00:16:25,906
we might actually forget or not


585
00:16:25,906 --> 00:16:26,936
want to end our task.


586
00:16:27,916 --> 00:16:29,276
So, we let our tasks expire.


587
00:16:30,576 --> 00:16:32,316
There's a great energy impact to


588
00:16:32,316 --> 00:16:35,606
this, and it's really something


589
00:16:35,606 --> 00:16:37,456
that people don't necessarily


590
00:16:37,456 --> 00:16:38,506
see when they're developing


591
00:16:38,506 --> 00:16:39,126
their application.


592
00:16:40,246 --> 00:16:41,436
Let me demonstrate why this is


593
00:16:41,436 --> 00:16:42,506
energy inefficient with the


594
00:16:42,506 --> 00:16:43,286
power over time curve.


595
00:16:44,746 --> 00:16:45,916
You could imagine if you enter


596
00:16:45,916 --> 00:16:47,086
the background for any reason


597
00:16:47,086 --> 00:16:48,746
and your task starts, you finish


598
00:16:48,746 --> 00:16:49,736
some time afterwards.


599
00:16:50,436 --> 00:16:52,576
Then, if we let our task expire,


600
00:16:52,726 --> 00:16:54,466
as we've said, we enter this


601
00:16:54,466 --> 00:16:55,806
sort of idle phase where you're


602
00:16:55,806 --> 00:16:57,326
consuming energy and our app is


603
00:16:57,326 --> 00:16:58,306
running in the background for


604
00:16:58,306 --> 00:17:00,206
whatever reason we've asked our


605
00:17:00,206 --> 00:17:01,996
API for, but there's not really


606
00:17:01,996 --> 00:17:02,846
much else happening.


607
00:17:03,206 --> 00:17:04,726
And then, we have a long tail of


608
00:17:04,726 --> 00:17:06,205
overhead because we've kept the


609
00:17:06,205 --> 00:17:08,656
system awake and subsystems we


610
00:17:08,656 --> 00:17:10,596
thought they needed to be using


611
00:17:10,596 --> 00:17:12,195
their own resources are now


612
00:17:12,306 --> 00:17:13,356
waiting for us to finish.


613
00:17:13,866 --> 00:17:17,526
The quick solution to this is to


614
00:17:17,526 --> 00:17:18,766
simply call your completion


615
00:17:18,766 --> 00:17:20,236
handlers whenever they're


616
00:17:20,236 --> 00:17:21,256
available.


617
00:17:21,796 --> 00:17:23,886
And as I mentioned, UI


618
00:17:23,886 --> 00:17:25,016
background task is one of the


619
00:17:25,016 --> 00:17:25,656
biggest ones.


620
00:17:25,976 --> 00:17:27,026
When we enter the background


621
00:17:27,336 --> 00:17:28,886
from the foreground, we can call


622
00:17:28,886 --> 00:17:29,966
this API and UIKit.


623
00:17:30,746 --> 00:17:31,946
If we don't let our system know


624
00:17:31,946 --> 00:17:33,446
that we don't need, if we let


625
00:17:33,446 --> 00:17:34,276
our system know that we don't


626
00:17:34,276 --> 00:17:35,756
need to do any work anymore, we


627
00:17:35,756 --> 00:17:37,406
save a lot of energy and allow


628
00:17:37,406 --> 00:17:39,746
hardware systems to go idle when


629
00:17:39,746 --> 00:17:40,426
they need to go idle.


630
00:17:41,446 --> 00:17:42,586
Here's what that looks like if


631
00:17:42,586 --> 00:17:43,406
we call these completion


632
00:17:43,406 --> 00:17:43,866
handlers.


633
00:17:45,006 --> 00:17:46,506
You could see here that the tail


634
00:17:46,506 --> 00:17:47,446
of active energy that we saw


635
00:17:47,446 --> 00:17:49,476
before is gone, and now we've


636
00:17:49,476 --> 00:17:50,686
greatly reduced our tail of


637
00:17:50,686 --> 00:17:51,456
overhead as well.


638
00:17:52,026 --> 00:17:54,596
A simple solution, but it has a


639
00:17:54,596 --> 00:17:56,066
big impact on your overall


640
00:17:56,066 --> 00:17:56,856
energy consumption.


641
00:18:01,136 --> 00:18:03,346
So, we've talked about some ways


642
00:18:03,346 --> 00:18:04,336
that we can start thinking about


643
00:18:04,336 --> 00:18:05,966
energy efficiency as a process.


644
00:18:06,686 --> 00:18:08,076
If we focus on optimizing the


645
00:18:08,076 --> 00:18:09,616
work we do in all of our use


646
00:18:09,616 --> 00:18:12,176
cases, we can really work on


647
00:18:12,176 --> 00:18:13,396
optimizing the energy that our


648
00:18:13,396 --> 00:18:14,536
application consumes.


649
00:18:14,916 --> 00:18:17,826
For a deeper dive into the


650
00:18:17,826 --> 00:18:18,996
things we talked about and to


651
00:18:18,996 --> 00:18:19,916
maybe get a little bit more


652
00:18:19,916 --> 00:18:21,436
hands-on with the code behind


653
00:18:21,436 --> 00:18:22,566
some of these optimizations we


654
00:18:22,566 --> 00:18:24,346
discussed, I really recommend


655
00:18:24,346 --> 00:18:25,276
that you check out our video


656
00:18:25,276 --> 00:18:26,736
from last year, How to write


657
00:18:26,736 --> 00:18:27,786
energy-efficient apps.


658
00:18:28,696 --> 00:18:29,896
In that session, you'll find


659
00:18:29,896 --> 00:18:30,506
that there are a lot of


660
00:18:30,506 --> 00:18:32,386
interesting resources and more


661
00:18:32,386 --> 00:18:34,606
examples on how you can use


662
00:18:34,606 --> 00:18:35,846
energy-efficient designs in your


663
00:18:35,846 --> 00:18:36,356
application.


664
00:18:40,316 --> 00:18:42,026
So, now that we've talked about


665
00:18:42,266 --> 00:18:43,346
some ways that we can improve


666
00:18:43,346 --> 00:18:44,536
energy efficiency in the design


667
00:18:44,536 --> 00:18:46,676
of our application, and we've


668
00:18:46,836 --> 00:18:48,266
spent a lot of time talking


669
00:18:48,266 --> 00:18:49,856
about ways that we can improve


670
00:18:50,506 --> 00:18:51,746
our energy efficiency through


671
00:18:51,746 --> 00:18:53,426
thinking about the hardware


672
00:18:53,426 --> 00:18:54,936
systems behind our application,


673
00:18:55,776 --> 00:18:56,756
what are the ways that we can


674
00:18:56,756 --> 00:18:57,576
quantify this?


675
00:18:57,906 --> 00:18:59,116
Let's say we've made a change,


676
00:18:59,116 --> 00:19:00,506
and we want to understand the


677
00:19:00,506 --> 00:19:02,026
real impact in our application.


678
00:19:03,146 --> 00:19:04,136
Well, right now, let's talk


679
00:19:04,136 --> 00:19:05,096
about some tools that we have


680
00:19:05,096 --> 00:19:06,966
available for you today to do


681
00:19:06,966 --> 00:19:09,976
that sort of work.


682
00:19:10,156 --> 00:19:11,416
Today, we have two tools


683
00:19:11,416 --> 00:19:12,966
available that you can use to


684
00:19:12,966 --> 00:19:14,276
quantify your energy impact.


685
00:19:15,506 --> 00:19:16,796
The first tool is the energy


686
00:19:16,796 --> 00:19:18,026
gauges, which are accessible


687
00:19:18,026 --> 00:19:19,026
directly through the Xcode


688
00:19:19,026 --> 00:19:19,436
debugger.


689
00:19:20,586 --> 00:19:21,696
The energy gauges are a great


690
00:19:21,696 --> 00:19:23,096
way for you to rapidly iterate


691
00:19:23,096 --> 00:19:24,446
on your codes energy consumption


692
00:19:24,916 --> 00:19:26,036
and to help you understand at a


693
00:19:26,036 --> 00:19:28,016
very high level where your


694
00:19:28,016 --> 00:19:29,586
energy consumption is going by


695
00:19:29,586 --> 00:19:30,126
subsystem.


696
00:19:30,476 --> 00:19:32,886
And then, if the gauges aren't


697
00:19:32,886 --> 00:19:34,446
good enough, you can jump right


698
00:19:34,446 --> 00:19:35,616
into the instruments from the


699
00:19:35,616 --> 00:19:36,396
Developer Toolkit.


700
00:19:37,446 --> 00:19:38,516
The instruments will allow you


701
00:19:38,516 --> 00:19:39,836
to do a deeper dive into the


702
00:19:39,836 --> 00:19:40,916
various subsystems on the


703
00:19:40,916 --> 00:19:41,366
device.


704
00:19:41,706 --> 00:19:43,626
And understand at a lower level


705
00:19:43,816 --> 00:19:45,076
how these actual subsystems are


706
00:19:45,076 --> 00:19:46,556
performing and what they're


707
00:19:46,556 --> 00:19:46,896
doing.


708
00:19:47,366 --> 00:19:49,606
Let's take a look at the energy


709
00:19:49,606 --> 00:19:50,846
gauges first.


710
00:19:51,626 --> 00:19:53,166
As I said, these are accessible


711
00:19:53,166 --> 00:19:54,296
directly through the Xcode


712
00:19:54,296 --> 00:19:56,236
Debugger UI, so they're pretty


713
00:19:56,236 --> 00:19:58,276
easy to use.


714
00:19:58,376 --> 00:19:59,356
Let's jump into the UI.


715
00:20:00,006 --> 00:20:01,126
As you can see, we've selected


716
00:20:01,126 --> 00:20:02,566
the row that says energy impact,


717
00:20:02,566 --> 00:20:04,446
and now we have this main area


718
00:20:04,446 --> 00:20:05,586
in the UI that's composed of


719
00:20:05,586 --> 00:20:06,716
three major sections.


720
00:20:07,736 --> 00:20:08,896
On the top left, we have the


721
00:20:08,896 --> 00:20:10,436
canonical gauges themselves.


722
00:20:11,456 --> 00:20:13,706
These gauges range from low,


723
00:20:14,006 --> 00:20:15,706
high, and very high, and


724
00:20:15,706 --> 00:20:17,096
represent the average energy


725
00:20:17,096 --> 00:20:18,756
impact of your app at an


726
00:20:18,756 --> 00:20:19,766
instantaneous moment.


727
00:20:20,786 --> 00:20:22,256
It's important to know that


728
00:20:22,256 --> 00:20:23,846
where the gauge actually falls


729
00:20:23,846 --> 00:20:25,356
doesn't necessarily mean good or


730
00:20:25,356 --> 00:20:25,716
bad.


731
00:20:26,236 --> 00:20:27,446
It means that whatever your app


732
00:20:27,446 --> 00:20:29,366
is doing, it's consuming this


733
00:20:29,366 --> 00:20:30,756
much relative amount of energy.


734
00:20:31,716 --> 00:20:33,866
It's important because it's up


735
00:20:33,866 --> 00:20:35,076
to you as an app developer to


736
00:20:35,076 --> 00:20:36,306
think about your use case and


737
00:20:36,306 --> 00:20:37,346
whether or not you would expect


738
00:20:37,346 --> 00:20:38,466
it to do that.


739
00:20:39,376 --> 00:20:41,306
To the right of that, we have


740
00:20:41,306 --> 00:20:42,206
the average component


741
00:20:42,206 --> 00:20:44,156
utilization, and this is going


742
00:20:44,156 --> 00:20:45,846
to be a pie chart that shows you


743
00:20:46,216 --> 00:20:47,576
all of the different components


744
00:20:47,956 --> 00:20:49,616
relative to the total amount of


745
00:20:49,616 --> 00:20:50,646
energy that you're consuming,


746
00:20:51,076 --> 00:20:52,316
what percentage those components


747
00:20:52,316 --> 00:20:52,816
are consuming.


748
00:20:54,016 --> 00:20:55,316
This is really useful because


749
00:20:55,316 --> 00:20:56,456
it's representative of those


750
00:20:56,456 --> 00:20:57,436
subsystems we talked about


751
00:20:57,436 --> 00:20:58,646
earlier, and it helps to


752
00:20:58,646 --> 00:21:00,896
identify if you have an excess


753
00:21:00,896 --> 00:21:02,226
amount of overhead or maybe if


754
00:21:02,226 --> 00:21:03,586
one component is taking too much


755
00:21:03,586 --> 00:21:04,766
energy, and you don't expect it.


756
00:21:05,116 --> 00:21:08,036
And then, immediately below


757
00:21:08,036 --> 00:21:09,586
that, building off of the


758
00:21:09,586 --> 00:21:10,876
average component utilization


759
00:21:10,876 --> 00:21:12,956
chart, we have a time series


760
00:21:13,626 --> 00:21:15,346
that represents the average


761
00:21:15,346 --> 00:21:17,026
utilization of each component as


762
00:21:17,026 --> 00:21:17,936
your app is running in real


763
00:21:17,936 --> 00:21:18,236
time.


764
00:21:18,966 --> 00:21:20,606
We could also see here that you


765
00:21:20,606 --> 00:21:22,196
have the state that your app is


766
00:21:22,196 --> 00:21:23,626
actually running in, foreground


767
00:21:23,626 --> 00:21:25,116
and background, and also it


768
00:21:25,116 --> 00:21:25,866
would list suspended.


769
00:21:27,006 --> 00:21:28,386
This is a really awesome tool


770
00:21:28,586 --> 00:21:29,876
for understanding how your app


771
00:21:29,876 --> 00:21:31,116
is behaving in real time.


772
00:21:31,556 --> 00:21:34,996
So, as I said, the energy gauges


773
00:21:34,996 --> 00:21:37,236
are really great for doing


774
00:21:37,236 --> 00:21:38,776
high-level characterization work


775
00:21:39,586 --> 00:21:40,926
and rapid profiling.


776
00:21:41,456 --> 00:21:42,186
That's the key.


777
00:21:42,756 --> 00:21:43,756
When you're iterating on your


778
00:21:43,756 --> 00:21:44,646
code, you're trying to get


779
00:21:44,646 --> 00:21:45,756
something to work as an app


780
00:21:45,756 --> 00:21:46,606
developer, and you're trying to


781
00:21:46,606 --> 00:21:48,496
put something together, it may


782
00:21:48,496 --> 00:21:49,696
not seem immediately clear how


783
00:21:49,696 --> 00:21:50,716
you could really think about


784
00:21:50,716 --> 00:21:52,236
energy, but the gauges are a


785
00:21:52,236 --> 00:21:53,026
great way to start.


786
00:21:55,296 --> 00:21:56,406
But let's say that you've done


787
00:21:56,406 --> 00:21:57,566
that and the gauges aren't


788
00:21:57,566 --> 00:21:58,316
really enough for you.


789
00:21:58,816 --> 00:22:00,586
That's where the instruments


790
00:22:00,586 --> 00:22:02,726
come in, and directly through


791
00:22:02,726 --> 00:22:04,396
the energy gauge's UI, we have


792
00:22:04,396 --> 00:22:06,246
access to three instruments that


793
00:22:06,246 --> 00:22:07,966
we think best correlate to the


794
00:22:07,966 --> 00:22:08,996
subsystems we talked about


795
00:22:08,996 --> 00:22:09,366
before.


796
00:22:10,716 --> 00:22:13,066
These include the time profile,


797
00:22:13,586 --> 00:22:15,096
the network profiler, and the


798
00:22:15,096 --> 00:22:17,516
location profiler, and if you


799
00:22:17,516 --> 00:22:18,916
were to click through into any


800
00:22:18,916 --> 00:22:20,576
of these from the energy gauge's


801
00:22:20,796 --> 00:22:21,416
UI, you would be able to


802
00:22:21,416 --> 00:22:22,596
transfer your current debug


803
00:22:22,596 --> 00:22:24,006
session into any of those


804
00:22:24,006 --> 00:22:24,586
instruments.


805
00:22:25,016 --> 00:22:27,616
Let's take a look at one of the


806
00:22:27,616 --> 00:22:29,136
instruments here, the Time


807
00:22:29,136 --> 00:22:30,956
Profiler, and try to understand


808
00:22:31,696 --> 00:22:33,386
the UI.


809
00:22:33,576 --> 00:22:34,936
Now, the instruments have a very


810
00:22:34,936 --> 00:22:37,176
standard UI, but what's


811
00:22:37,176 --> 00:22:38,536
interesting about it is that


812
00:22:38,536 --> 00:22:39,566
it's very useable.


813
00:22:40,196 --> 00:22:40,986
And let's take a look.


814
00:22:42,416 --> 00:22:43,656
Here, we can see the Time


815
00:22:43,656 --> 00:22:46,116
Profiler UI, and on the top, you


816
00:22:46,116 --> 00:22:48,076
see a bar that's representative


817
00:22:48,076 --> 00:22:48,996
of the different controls that


818
00:22:48,996 --> 00:22:50,366
you have of the actual


819
00:22:50,366 --> 00:22:50,916
instruments.


820
00:22:51,416 --> 00:22:52,596
On the top left, ou can see you


821
00:22:52,596 --> 00:22:53,886
have a Play and Pause button as


822
00:22:53,886 --> 00:22:55,066
well as your target that you're


823
00:22:55,066 --> 00:22:56,116
using to profile.


824
00:22:56,116 --> 00:22:58,136
And then, on the right, you see


825
00:22:58,136 --> 00:22:59,656
a plus button that allows you to


826
00:22:59,656 --> 00:23:01,276
very quickly drag and drop other


827
00:23:01,276 --> 00:23:03,296
instruments into you profiling


828
00:23:03,296 --> 00:23:05,046
pane, which can be found here.


829
00:23:06,156 --> 00:23:07,386
And now, this profiling pane


830
00:23:07,386 --> 00:23:08,586
actually allows you to see what


831
00:23:08,586 --> 00:23:09,586
instruments are running and


832
00:23:09,586 --> 00:23:10,516
currently profiling your


833
00:23:10,516 --> 00:23:11,046
application.


834
00:23:12,026 --> 00:23:13,176
Here, since we're using a Time


835
00:23:13,176 --> 00:23:15,316
Profiler, we see the CPU usage


836
00:23:15,626 --> 00:23:17,076
and a graphical representation


837
00:23:17,106 --> 00:23:18,406
of how much CPU usage is being


838
00:23:18,406 --> 00:23:19,506
consumed over time.


839
00:23:21,396 --> 00:23:22,726
Directly below that, we have a


840
00:23:22,726 --> 00:23:23,756
weighted call graph.


841
00:23:24,246 --> 00:23:25,036
Since we're using the Time


842
00:23:25,036 --> 00:23:25,986
Profiler, we're trying to


843
00:23:25,986 --> 00:23:28,056
understand how our CPU is being


844
00:23:28,056 --> 00:23:28,916
used by the application.


845
00:23:30,026 --> 00:23:31,526
To that end, there's a weighted


846
00:23:31,526 --> 00:23:32,506
call graph that allows you to


847
00:23:32,506 --> 00:23:34,436
see exactly what is being called


848
00:23:34,436 --> 00:23:35,806
in your application and how much


849
00:23:35,806 --> 00:23:37,966
weight it has on CPU time.


850
00:23:38,456 --> 00:23:40,876
And then, directly to the right


851
00:23:40,876 --> 00:23:42,156
of that, you have a summation of


852
00:23:42,156 --> 00:23:43,356
the heaviest stacked race in


853
00:23:43,356 --> 00:23:45,416
your application that basically


854
00:23:45,416 --> 00:23:47,616
says what is the heaviest stack


855
00:23:47,986 --> 00:23:49,606
during this profiling run?


856
00:23:50,676 --> 00:23:52,086
There are a lot of other great


857
00:23:52,086 --> 00:23:53,246
instruments that you can use,


858
00:23:54,636 --> 00:23:58,156
and here are some of them now.


859
00:23:58,156 --> 00:23:59,196
This means that the instruments


860
00:23:59,196 --> 00:24:01,156
are really great for a couple of


861
00:24:01,156 --> 00:24:01,546
things.


862
00:24:02,186 --> 00:24:03,526
The first thing is that the


863
00:24:03,526 --> 00:24:04,906
instruments are really great for


864
00:24:04,906 --> 00:24:05,946
root cause analysis.


865
00:24:06,286 --> 00:24:07,326
Let's say you have a problem in


866
00:24:07,326 --> 00:24:08,766
a specific subsystem, so just


867
00:24:08,766 --> 00:24:09,886
processing or networking.


868
00:24:10,756 --> 00:24:12,326
You would be able to identify


869
00:24:12,446 --> 00:24:14,296
pretty rapidly what that problem


870
00:24:14,296 --> 00:24:16,066
might be using the Time Profiler


871
00:24:16,506 --> 00:24:17,466
or the Network Profiler.


872
00:24:18,226 --> 00:24:19,626
The instruments are also really


873
00:24:19,626 --> 00:24:21,586
great for doing in-depth


874
00:24:21,586 --> 00:24:22,836
profiling of your application.


875
00:24:23,786 --> 00:24:25,586
If you implement a CPU


876
00:24:25,586 --> 00:24:27,396
efficiency improvement of some


877
00:24:27,396 --> 00:24:28,756
kind; let's say you cut down the


878
00:24:28,756 --> 00:24:29,566
time that it takes for an


879
00:24:29,566 --> 00:24:31,166
algorithm to execute, the


880
00:24:31,616 --> 00:24:32,706
instruments are a really good


881
00:24:32,706 --> 00:24:34,566
way to understand if that's the,


882
00:24:34,566 --> 00:24:36,336
if the intended effect of your


883
00:24:36,336 --> 00:24:38,196
optimization is going through on


884
00:24:38,196 --> 00:24:38,916
that subsystem.


885
00:24:39,206 --> 00:24:41,596
But there's also one more thing


886
00:24:41,596 --> 00:24:42,466
that the instruments are really


887
00:24:42,466 --> 00:24:44,056
awesome for that I haven't


888
00:24:44,056 --> 00:24:46,046
talked about today, and that's


889
00:24:46,096 --> 00:24:47,206
untethered profiling.


890
00:24:48,406 --> 00:24:49,846
There's a single instrument that


891
00:24:49,846 --> 00:24:51,126
you can use called the Energy


892
00:24:51,126 --> 00:24:52,876
Log, which allows you to do an


893
00:24:52,946 --> 00:24:55,536
untethered profiling run on a


894
00:24:55,536 --> 00:24:57,476
provision device while using


895
00:24:57,476 --> 00:24:58,106
your application.


896
00:24:58,616 --> 00:24:59,846
It's accessible directly to the


897
00:24:59,846 --> 00:25:02,176
developer settings, and when you


898
00:25:02,176 --> 00:25:03,566
start running it, you can use


899
00:25:03,566 --> 00:25:04,656
your phone as you normally would


900
00:25:04,656 --> 00:25:05,686
and use your application as you


901
00:25:05,686 --> 00:25:06,956
might expect for any number of


902
00:25:06,956 --> 00:25:07,536
use cases.


903
00:25:08,256 --> 00:25:09,106
And then, afterwards, when


904
00:25:09,106 --> 00:25:10,126
you're finished, you can stop


905
00:25:10,126 --> 00:25:11,136
the recording directly from the


906
00:25:11,136 --> 00:25:12,926
developer tools and jump into


907
00:25:12,926 --> 00:25:14,106
Instruments and upload that


908
00:25:14,106 --> 00:25:14,526
trace.


909
00:25:15,116 --> 00:25:16,396
This is really useful for


910
00:25:16,396 --> 00:25:17,386
understanding if there are any


911
00:25:17,386 --> 00:25:18,436
environmental problems that


912
00:25:18,436 --> 00:25:19,576
you're having that might be


913
00:25:19,576 --> 00:25:20,416
impacting your energy


914
00:25:20,416 --> 00:25:20,866
consumption.


915
00:25:20,866 --> 00:25:23,966
Now, we've talked about the


916
00:25:23,966 --> 00:25:25,016
tools; we've talked about the


917
00:25:25,016 --> 00:25:27,256
concepts; now, I want to do a


918
00:25:27,256 --> 00:25:29,916
demo and work through an example


919
00:25:29,916 --> 00:25:31,026
about how we can actually use


920
00:25:31,026 --> 00:25:32,896
these in tandem and solve energy


921
00:25:32,896 --> 00:25:33,616
problems and make our app more


922
00:25:33,616 --> 00:25:34,000
energy efficient.


923
00:25:39,206 --> 00:25:40,816
So, today, we've prepared a


924
00:25:40,816 --> 00:25:42,496
simple game called Energy Game,


925
00:25:42,816 --> 00:25:44,646
which draws sprites onscreen and


926
00:25:44,646 --> 00:25:46,436
allows the application to inject


927
00:25:46,436 --> 00:25:47,376
a number of bugs.


928
00:25:47,936 --> 00:25:49,136
It's a very simple application


929
00:25:49,136 --> 00:25:50,116
that we've built, and it only


930
00:25:50,116 --> 00:25:51,176
has an app delegate in a View


931
00:25:51,176 --> 00:25:52,466
Controller, but the primary


932
00:25:52,466 --> 00:25:53,866
purpose is to show you how to


933
00:25:53,866 --> 00:25:56,276
use our tools rapidly to iterate


934
00:25:56,376 --> 00:25:56,996
through your code.


935
00:25:57,496 --> 00:25:59,676
So, I'm going to go ahead and


936
00:25:59,676 --> 00:26:01,136
build Energy Game here through


937
00:26:01,136 --> 00:26:03,406
the Xcode UI and let it run.


938
00:26:04,136 --> 00:26:05,976
Then, you'll see on the right


939
00:26:05,976 --> 00:26:07,956
side that all it really does is


940
00:26:07,956 --> 00:26:08,736
draw a little little battery


941
00:26:08,736 --> 00:26:10,126
sprite at a random time.


942
00:26:10,746 --> 00:26:11,226
There it is.


943
00:26:11,706 --> 00:26:12,246
Very simple.


944
00:26:13,016 --> 00:26:15,266
If I jump straight into the


945
00:26:15,266 --> 00:26:16,716
Xcode debugger and jump to


946
00:26:16,716 --> 00:26:18,756
energy impact, now, I can see my


947
00:26:18,756 --> 00:26:19,286
gauges.


948
00:26:19,796 --> 00:26:22,226
And so this is the UI that we


949
00:26:22,226 --> 00:26:22,976
just talked about.


950
00:26:23,366 --> 00:26:25,336
It's the same three areas that


951
00:26:25,336 --> 00:26:26,946
we discussed, and you could see


952
00:26:26,946 --> 00:26:28,556
right now that all my app is


953
00:26:28,556 --> 00:26:30,086
doing that we've designed it to


954
00:26:30,086 --> 00:26:32,656
do is just placed some sprites


955
00:26:32,656 --> 00:26:33,126
onscreen.


956
00:26:33,926 --> 00:26:35,056
But you notice that I'm doing


957
00:26:35,056 --> 00:26:36,346
networking, and my overhead


958
00:26:36,346 --> 00:26:38,486
seems to be high for simply no


959
00:26:38,486 --> 00:26:38,836
reason.


960
00:26:39,526 --> 00:26:40,806
Well, this is because we're also


961
00:26:40,806 --> 00:26:42,556
doing a little bit of networking


962
00:26:42,556 --> 00:26:43,886
and uploading the spike count


963
00:26:44,056 --> 00:26:45,376
every time a new spike is drawn


964
00:26:45,376 --> 00:26:45,846
onscreen.


965
00:26:46,766 --> 00:26:48,036
And so, through the Xcode energy


966
00:26:48,036 --> 00:26:49,406
gauges, you can actually see the


967
00:26:49,406 --> 00:26:50,866
impact of doing that.


968
00:26:51,576 --> 00:26:53,796
So, I'm going to go ahead and


969
00:26:53,796 --> 00:26:55,666
stop this now and jump into my


970
00:26:55,666 --> 00:26:57,346
code to understand where this is


971
00:26:57,346 --> 00:26:57,796
coming from.


972
00:26:58,296 --> 00:27:00,656
So, if I go to my View


973
00:27:00,656 --> 00:27:02,076
controller, where I actually add


974
00:27:02,076 --> 00:27:03,346
a new sprite, I've had a


975
00:27:03,346 --> 00:27:04,466
function here to upload the


976
00:27:04,466 --> 00:27:05,876
sprite count, which creates a


977
00:27:05,876 --> 00:27:07,906
simple connection object and


978
00:27:07,906 --> 00:27:09,176
uploads the sprite count every


979
00:27:09,176 --> 00:27:10,106
time a new sprite is added.


980
00:27:10,476 --> 00:27:11,446
I'm going to go ahead and


981
00:27:11,446 --> 00:27:13,946
comment the cell and then jump


982
00:27:13,946 --> 00:27:15,416
into my app delegate and move it


983
00:27:16,056 --> 00:27:17,586
to the only upload the sprite


984
00:27:17,586 --> 00:27:18,396
account when I'm in the


985
00:27:18,396 --> 00:27:18,826
background.


986
00:27:19,306 --> 00:27:21,486
And for the sake of this demo,


987
00:27:21,486 --> 00:27:22,516
I've named that my networking


988
00:27:22,516 --> 00:27:23,086
optimization.


989
00:27:24,066 --> 00:27:24,986
I'm going to go ahead and


990
00:27:24,986 --> 00:27:27,216
rebuild Energy Game and show you


991
00:27:27,216 --> 00:27:28,276
the effect this has on the


992
00:27:28,276 --> 00:27:31,806
energy gauges.


993
00:27:31,936 --> 00:27:33,376
Now, Energy Game is running


994
00:27:33,376 --> 00:27:33,656
again.


995
00:27:33,656 --> 00:27:35,286
I'm going to jump back to the


996
00:27:35,286 --> 00:27:37,906
Xcode Debugger UI, jump back to


997
00:27:37,906 --> 00:27:41,686
Energy Impact, and now we don't


998
00:27:41,686 --> 00:27:42,826
see any networking energy, and


999
00:27:42,826 --> 00:27:44,606
we don't see any overhead, which


1000
00:27:44,606 --> 00:27:44,936
is good.


1001
00:27:45,756 --> 00:27:47,186
So, that's simple optimization,


1002
00:27:47,486 --> 00:27:48,596
simply moving a networking


1003
00:27:48,596 --> 00:27:50,066
request from one area to the


1004
00:27:50,066 --> 00:27:51,416
other and preventing it from


1005
00:27:51,416 --> 00:27:54,116
happening often allowed us to


1006
00:27:54,116 --> 00:27:56,066
greatly reduce our energy impact


1007
00:27:56,976 --> 00:27:58,076
in our quiescent use case.


1008
00:27:58,596 --> 00:28:01,156
So, now, I'm going to go ahead


1009
00:28:01,156 --> 00:28:02,636
and inject a bug and try to see


1010
00:28:02,636 --> 00:28:04,826
how we can see a bug when we use


1011
00:28:04,826 --> 00:28:06,076
Xcode energy gauges.


1012
00:28:06,806 --> 00:28:08,796
Bug1 is a simple bug that you


1013
00:28:08,796 --> 00:28:09,976
can see on the bottom left here


1014
00:28:10,146 --> 00:28:11,506
that will essentially cause a


1015
00:28:11,566 --> 00:28:12,866
CPU spin in the background.


1016
00:28:13,276 --> 00:28:14,406
This is a case that many of us


1017
00:28:14,406 --> 00:28:15,906
might face in regular and real


1018
00:28:15,906 --> 00:28:16,616
world development.


1019
00:28:17,246 --> 00:28:18,596
I'm going to go ahead and inject


1020
00:28:18,596 --> 00:28:19,066
this bug.


1021
00:28:19,066 --> 00:28:21,966
And now that I've injected it,


1022
00:28:21,966 --> 00:28:23,186
I'm going to background Energy


1023
00:28:23,186 --> 00:28:25,216
Game, and as you can see in the


1024
00:28:25,216 --> 00:28:26,886
Energy Gauge's UI, we transfer


1025
00:28:26,886 --> 00:28:27,456
to the background.


1026
00:28:28,536 --> 00:28:29,686
We do a little bit of networking


1027
00:28:29,686 --> 00:28:30,876
because I moved that networking


1028
00:28:30,876 --> 00:28:31,836
call to the background.


1029
00:28:32,686 --> 00:28:33,866
But now, we also see that our


1030
00:28:33,866 --> 00:28:35,396
CPU is going wild.


1031
00:28:35,906 --> 00:28:38,356
So, this is the power of the


1032
00:28:38,356 --> 00:28:38,926
gauges.


1033
00:28:39,006 --> 00:28:40,136
We've now, we know that we're


1034
00:28:40,136 --> 00:28:41,366
injecting a bug, but we can see


1035
00:28:41,366 --> 00:28:42,836
that bug directly in the gauges.


1036
00:28:44,036 --> 00:28:45,106
So, now, to find the root cause,


1037
00:28:45,106 --> 00:28:46,326
I'm going to go ahead and jump


1038
00:28:46,326 --> 00:28:47,386
into the Time Profiler and


1039
00:28:47,386 --> 00:28:48,586
transfer my debug session, as we


1040
00:28:48,616 --> 00:28:49,000
discussed before.


1041
00:28:53,656 --> 00:28:55,256
So, now, I transferred my debug


1042
00:28:55,256 --> 00:28:56,266
session, and it will begin


1043
00:28:56,266 --> 00:28:57,196
running automatically.


1044
00:28:57,706 --> 00:29:00,976
And as you see, the weighted


1045
00:29:00,976 --> 00:29:03,346
cobra apples start populating in


1046
00:29:03,346 --> 00:29:08,136
a moment; here, we can see that


1047
00:29:08,136 --> 00:29:09,386
the dispatched thread here is


1048
00:29:09,386 --> 00:29:10,666
consuming the most CPU time.


1049
00:29:11,076 --> 00:29:12,436
Let's go ahead and dig into it.


1050
00:29:12,896 --> 00:29:16,886
And we can see that we have


1051
00:29:16,886 --> 00:29:17,996
closure at something called


1052
00:29:17,996 --> 00:29:19,156
appdelegate.compute.


1053
00:29:20,226 --> 00:29:21,936
Well, let's jump back to our


1054
00:29:21,936 --> 00:29:22,676
application and try to


1055
00:29:22,676 --> 00:29:23,656
understand what that is.


1056
00:29:29,596 --> 00:29:30,736
So, for the purpose of this


1057
00:29:30,736 --> 00:29:32,676
demo, when we entered the


1058
00:29:32,676 --> 00:29:34,006
background in Energy Game, we


1059
00:29:34,006 --> 00:29:34,826
called something called


1060
00:29:34,826 --> 00:29:35,466
computation.


1061
00:29:36,656 --> 00:29:39,896
Computation is a really terrible


1062
00:29:40,866 --> 00:29:41,686
function.


1063
00:29:41,686 --> 00:29:44,006
It basically starts spinning


1064
00:29:44,206 --> 00:29:45,836
wildly with a while true loop


1065
00:29:46,346 --> 00:29:47,886
when we inject Big1.


1066
00:29:48,046 --> 00:29:49,096
So, it's very simple for the


1067
00:29:49,096 --> 00:29:51,246
purpose of this demo, but using


1068
00:29:51,246 --> 00:29:52,636
both the gauges and the time


1069
00:29:52,636 --> 00:29:53,796
profiler, we were able to dig


1070
00:29:53,796 --> 00:29:55,326
back directly to where this was


1071
00:29:55,326 --> 00:29:57,186
happening, and we can see that


1072
00:29:57,186 --> 00:29:59,076
this while true loop is not


1073
00:29:59,076 --> 00:29:59,266
good.


1074
00:30:00,456 --> 00:30:01,566
So, I'll go ahead and comment


1075
00:30:01,566 --> 00:30:04,466
this out because I love


1076
00:30:04,466 --> 00:30:05,766
commenting out code instead of


1077
00:30:05,766 --> 00:30:08,196
deleting it, and I'll go ahead


1078
00:30:08,196 --> 00:30:10,036
and rebuild Energy Game.


1079
00:30:13,276 --> 00:30:14,416
We'll just jump back into the


1080
00:30:14,416 --> 00:30:15,816
gauges to see that everything is


1081
00:30:15,816 --> 00:30:18,626
okay, and now we'll go ahead and


1082
00:30:22,556 --> 00:30:23,696
inject Bug1 again, and I'll go


1083
00:30:24,216 --> 00:30:25,000
to the background.


1084
00:30:29,496 --> 00:30:30,706
And we see our expected


1085
00:30:30,706 --> 00:30:32,316
networking activity but no CPU


1086
00:30:32,316 --> 00:30:32,606
spin.


1087
00:30:33,596 --> 00:30:35,796
Voila! We've solved it, using


1088
00:30:35,796 --> 00:30:38,656
two tools in about 30 seconds or


1089
00:30:38,656 --> 00:30:38,916
a minute.


1090
00:30:39,476 --> 00:30:41,076
That's the power of these tools.


1091
00:30:41,146 --> 00:30:42,386
They're able to let you rapidly


1092
00:30:42,386 --> 00:30:43,786
iterate and root cause problems


1093
00:30:43,786 --> 00:30:45,026
that you might face on


1094
00:30:45,026 --> 00:30:46,406
day-to-day development.


1095
00:30:46,976 --> 00:30:49,000
So, let's go back to the slides.


1096
00:30:54,696 --> 00:30:56,056
So, there's some takeaways from


1097
00:30:56,056 --> 00:30:56,496
this demo.


1098
00:30:58,336 --> 00:30:59,716
The first takeaway is that the


1099
00:30:59,716 --> 00:31:01,336
gauges, as we said, are great


1100
00:31:01,336 --> 00:31:02,246
for rapid iteration.


1101
00:31:02,956 --> 00:31:04,246
They allow you to quickly see


1102
00:31:04,626 --> 00:31:05,466
where your problem might be


1103
00:31:05,466 --> 00:31:07,376
happening, and they allow you to


1104
00:31:07,376 --> 00:31:08,626
take the next step in figuring


1105
00:31:08,626 --> 00:31:09,866
out how to solve it.


1106
00:31:11,416 --> 00:31:13,906
The second takeaway is that the


1107
00:31:13,906 --> 00:31:15,616
instruments are great for


1108
00:31:15,616 --> 00:31:16,476
in-depth profiling.


1109
00:31:16,976 --> 00:31:20,386
And finally, the third takeaway


1110
00:31:20,446 --> 00:31:21,396
is that we want you to think


1111
00:31:21,396 --> 00:31:23,286
about energy efficiency as a


1112
00:31:23,286 --> 00:31:24,536
primary objective in your


1113
00:31:24,536 --> 00:31:25,406
application development.


1114
00:31:26,186 --> 00:31:27,476
We have powerful tools available


1115
00:31:27,476 --> 00:31:28,796
for you to quickly understand


1116
00:31:29,136 --> 00:31:30,346
where your energy is going and


1117
00:31:30,346 --> 00:31:31,836
to root cause problems that


1118
00:31:31,836 --> 00:31:32,796
might be energy related.


1119
00:31:33,296 --> 00:31:35,466
So, let's say you've done all of


1120
00:31:35,466 --> 00:31:36,426
that, and you've shipped your


1121
00:31:36,426 --> 00:31:36,976
application.


1122
00:31:37,776 --> 00:31:39,086
From the App Store it's getting


1123
00:31:39,086 --> 00:31:40,546
used; all your customers are


1124
00:31:40,546 --> 00:31:42,436
greatly thankful that you


1125
00:31:42,436 --> 00:31:43,066
shipped it on time.


1126
00:31:43,516 --> 00:31:44,166
What's next?


1127
00:31:45,056 --> 00:31:46,086
Let's say you still see


1128
00:31:46,116 --> 00:31:47,306
customers saying that your app


1129
00:31:47,306 --> 00:31:48,336
is bad for battery life.


1130
00:31:48,986 --> 00:31:50,036
What sort of recourse do you


1131
00:31:50,036 --> 00:31:50,286
have?


1132
00:31:51,326 --> 00:31:53,096
Well, now, I'm going to pass it


1133
00:31:53,096 --> 00:31:54,236
on to my colleague, David, who's


1134
00:31:54,596 --> 00:31:56,126
going to talk to you about how


1135
00:31:56,126 --> 00:31:57,486
you can face those challenges


1136
00:31:57,486 --> 00:31:58,946
and solve them using our new


1137
00:31:58,946 --> 00:31:59,446
tools.


1138
00:31:59,586 --> 00:31:59,896
David.


1139
00:32:00,516 --> 00:32:04,866
[ Applause ]


1140
00:32:05,366 --> 00:32:06,126
>> Good afternoon.


1141
00:32:06,906 --> 00:32:08,846
Hi, I'm David, and I'm here


1142
00:32:08,846 --> 00:32:10,736
today to talk about some new


1143
00:32:10,736 --> 00:32:12,486
great tools for energy


1144
00:32:12,486 --> 00:32:12,876
debugging.


1145
00:32:13,476 --> 00:32:18,056
If you're an iOS developer with


1146
00:32:18,056 --> 00:32:19,786
an app in the App Store, or in


1147
00:32:19,786 --> 00:32:21,216
TestFlight, then this part of


1148
00:32:21,216 --> 00:32:22,356
the talk is for you.


1149
00:32:23,506 --> 00:32:24,596
I'd like to start with the


1150
00:32:24,596 --> 00:32:26,836
following question, now that


1151
00:32:26,836 --> 00:32:28,436
you've shipped your app, how do


1152
00:32:28,436 --> 00:32:29,866
you know how our app is doing in


1153
00:32:29,866 --> 00:32:30,306
the wild?


1154
00:32:31,356 --> 00:32:33,676
In other words, how do you know


1155
00:32:34,126 --> 00:32:35,206
if your customers are


1156
00:32:35,206 --> 00:32:37,246
experiencing energy issues that


1157
00:32:37,246 --> 00:32:38,936
are leading to bad battery life?


1158
00:32:38,936 --> 00:32:41,636
Now, a customer may leave a


1159
00:32:41,636 --> 00:32:43,176
review on the App Store, saying,


1160
00:32:43,716 --> 00:32:45,886
"My battery went down a lot


1161
00:32:45,886 --> 00:32:46,976
while using this app."


1162
00:32:48,246 --> 00:32:49,396
But they might not be able to


1163
00:32:49,396 --> 00:32:50,786
tell you what happened.


1164
00:32:51,786 --> 00:32:53,576
Or even worse, they may delete


1165
00:32:53,576 --> 00:32:54,906
your app and not leave any


1166
00:32:54,906 --> 00:32:55,646
feedback at all.


1167
00:32:56,816 --> 00:32:58,316
So, it can be challenging to


1168
00:32:58,316 --> 00:33:00,166
find out if you have energy


1169
00:33:00,166 --> 00:33:01,196
issues in the wild.


1170
00:33:01,576 --> 00:33:03,946
And even if you know that there


1171
00:33:03,946 --> 00:33:06,066
are energy issues, how do you


1172
00:33:06,066 --> 00:33:08,066
debug an issue that occurred on


1173
00:33:08,066 --> 00:33:08,996
your customer device?


1174
00:33:09,596 --> 00:33:13,256
You can make use of tools like


1175
00:33:13,336 --> 00:33:14,746
instruments and gauges that Phil


1176
00:33:14,746 --> 00:33:16,816
talked about, but unless you


1177
00:33:16,816 --> 00:33:18,986
know what to test for, it can be


1178
00:33:18,986 --> 00:33:20,336
challenging to reproduce.


1179
00:33:21,556 --> 00:33:22,616
There can be environmental


1180
00:33:22,616 --> 00:33:24,956
factors such as poor Wi-Fi


1181
00:33:24,956 --> 00:33:26,366
conditions that occurred for


1182
00:33:26,366 --> 00:33:28,946
your customer whereas on your


1183
00:33:28,946 --> 00:33:30,056
desk, you have great Wi-Fi


1184
00:33:30,056 --> 00:33:30,596
conditions.


1185
00:33:31,076 --> 00:33:33,946
So, these are some really


1186
00:33:33,946 --> 00:33:34,976
challenging questions.


1187
00:33:35,486 --> 00:33:38,726
So, to help answer these


1188
00:33:38,726 --> 00:33:40,606
questions, I'm excited today to


1189
00:33:40,606 --> 00:33:42,866
talk about a new way of


1190
00:33:42,866 --> 00:33:46,596
debugging energy issues using


1191
00:33:46,596 --> 00:33:48,746
Xcode Energy Logs and Xcode


1192
00:33:48,746 --> 00:33:49,646
Energy Organizer.


1193
00:33:50,736 --> 00:33:52,126
First, I'll talk about Xcode


1194
00:33:52,126 --> 00:33:54,056
Energy Logs, which is a new way


1195
00:33:54,306 --> 00:33:56,276
of reporting energy issues on


1196
00:33:56,276 --> 00:33:56,686
device.


1197
00:33:57,736 --> 00:33:59,416
Later, I'll cover Xcode Energy


1198
00:33:59,416 --> 00:34:01,176
Organizer, which is a new tool


1199
00:34:01,176 --> 00:34:02,536
for viewing Energy Logs.


1200
00:34:03,026 --> 00:34:06,116
With these tools, for the first


1201
00:34:06,116 --> 00:34:07,916
time ever, you'll have the data


1202
00:34:07,916 --> 00:34:11,835
that you need to find and to fix


1203
00:34:12,065 --> 00:34:12,896
energy issues.


1204
00:34:13,516 --> 00:34:14,266
So, let's get started.


1205
00:34:15,896 --> 00:34:18,096
Xcode Energy Logs are a new way


1206
00:34:18,096 --> 00:34:19,806
of reporting issues from device.


1207
00:34:20,456 --> 00:34:23,896
We start with high CPU energy


1208
00:34:23,896 --> 00:34:25,295
events, which is when your app


1209
00:34:25,295 --> 00:34:26,966
is using lots of CPU.


1210
00:34:28,036 --> 00:34:29,775
Each Energy Log will have a


1211
00:34:29,775 --> 00:34:31,616
weighted call graph, which will


1212
00:34:31,616 --> 00:34:33,076
point out the energy hotspots


1213
00:34:33,076 --> 00:34:33,755
within your code.


1214
00:34:35,106 --> 00:34:36,196
These logs will be made


1215
00:34:36,196 --> 00:34:38,156
available from TestFlight and


1216
00:34:38,156 --> 00:34:39,876
the App Store, so you'll have


1217
00:34:39,876 --> 00:34:41,496
real world data, what's actually


1218
00:34:41,496 --> 00:34:43,286
happening with your customers.


1219
00:34:44,096 --> 00:34:45,295
And with these logs, you'll be


1220
00:34:45,295 --> 00:34:46,606
able to begin improving the


1221
00:34:46,606 --> 00:34:47,846
battery life experience.


1222
00:34:48,366 --> 00:34:51,866
Let's talk about when an Xcode


1223
00:34:51,866 --> 00:34:53,436
Energy Log is generated.


1224
00:34:54,735 --> 00:34:56,106
Let's say your customer is using


1225
00:34:56,106 --> 00:34:57,886
your app, which starts to put a


1226
00:34:57,886 --> 00:34:59,656
really heavy load on the CPU.


1227
00:35:00,476 --> 00:35:02,296
This can be natural, depending


1228
00:35:02,296 --> 00:35:03,326
on what your app is doing.


1229
00:35:04,396 --> 00:35:05,646
Well, let's say it's putting a


1230
00:35:05,646 --> 00:35:07,846
really heavy load on the CPU for


1231
00:35:07,846 --> 00:35:08,496
a long time.


1232
00:35:09,066 --> 00:35:14,046
This causes a high CPU energy


1233
00:35:14,046 --> 00:35:15,136
event to be detected.


1234
00:35:15,656 --> 00:35:18,236
Now, there are two key


1235
00:35:18,236 --> 00:35:20,616
thresholds that are checked for


1236
00:35:21,246 --> 00:35:22,546
for a high CPU energy event.


1237
00:35:23,186 --> 00:35:24,836
The first threshold is when your


1238
00:35:24,836 --> 00:35:27,216
app is spinning 80% CPU for more


1239
00:35:27,216 --> 00:35:28,966
than three minutes while in the


1240
00:35:29,016 --> 00:35:30,806
foreground, and the second


1241
00:35:30,806 --> 00:35:33,636
threshold is more than 80% CPU


1242
00:35:34,006 --> 00:35:35,446
for more than one minute while


1243
00:35:35,446 --> 00:35:36,086
in the background.


1244
00:35:37,056 --> 00:35:38,696
In this latter case, your app


1245
00:35:38,696 --> 00:35:40,346
may actually get killed to


1246
00:35:40,346 --> 00:35:41,576
prevent runaway background


1247
00:35:41,576 --> 00:35:42,046
usage.


1248
00:35:44,896 --> 00:35:47,486
Each instance of a CPU Energy


1249
00:35:47,486 --> 00:35:49,496
Log indicates that your app uses


1250
00:35:49,496 --> 00:35:51,086
so much CPU that it was worth


1251
00:35:51,086 --> 00:35:51,566
flagging.


1252
00:35:52,726 --> 00:35:53,816
What this means in practical


1253
00:35:53,816 --> 00:35:56,276
terms is that it was responsible


1254
00:35:56,276 --> 00:35:59,536
for up to a 1% battery drop in a


1255
00:35:59,536 --> 00:36:01,636
typical case.


1256
00:36:01,836 --> 00:36:03,026
Now, you may be saying to


1257
00:36:03,026 --> 00:36:04,726
yourself, 1% battery doesn't


1258
00:36:04,726 --> 00:36:05,776
sound too bad.


1259
00:36:07,036 --> 00:36:09,396
But to put this in context, on


1260
00:36:09,396 --> 00:36:12,146
an iPhone 6S with an additional


1261
00:36:12,146 --> 00:36:14,696
1% battery, your user could have


1262
00:36:14,696 --> 00:36:16,606
had eight minutes of additional


1263
00:36:16,606 --> 00:36:19,256
talk time or six minutes of


1264
00:36:19,256 --> 00:36:21,696
additional browsing or 30


1265
00:36:21,696 --> 00:36:23,486
minutes of additional music.


1266
00:36:24,286 --> 00:36:25,996
And if your app continues to


1267
00:36:25,996 --> 00:36:28,536
burn at this rate, the battery


1268
00:36:28,536 --> 00:36:29,836
would have dropped even more.


1269
00:36:30,526 --> 00:36:32,606
So, writing CPU-efficient apps


1270
00:36:32,916 --> 00:36:34,846
is really important, and your


1271
00:36:34,846 --> 00:36:36,166
users will notice.


1272
00:36:36,636 --> 00:36:39,816
An Energy Log has three things


1273
00:36:39,946 --> 00:36:41,006
that can help you figure out


1274
00:36:41,156 --> 00:36:41,776
what has happened.


1275
00:36:42,406 --> 00:36:44,586
First is the context by which


1276
00:36:44,586 --> 00:36:46,346
what happened that triggered the


1277
00:36:46,346 --> 00:36:46,756
report.


1278
00:36:47,266 --> 00:36:48,826
For example, it will say that


1279
00:36:49,446 --> 00:36:52,236
your app spent for 8% over three


1280
00:36:52,236 --> 00:36:52,616
minutes.


1281
00:36:53,136 --> 00:36:55,346
The second piece of information


1282
00:36:55,346 --> 00:36:57,306
is the metadata about where the


1283
00:36:57,306 --> 00:36:59,326
Energy Log was created; for


1284
00:36:59,326 --> 00:37:00,916
example, on an iPhone versus an


1285
00:37:00,966 --> 00:37:03,876
iPad and on, say, Build 30 of


1286
00:37:03,876 --> 00:37:04,226
you app.


1287
00:37:05,596 --> 00:37:06,966
The third and most important


1288
00:37:06,966 --> 00:37:08,426
piece of information is the


1289
00:37:08,426 --> 00:37:09,996
weighted call graph that will


1290
00:37:09,996 --> 00:37:11,516
show you the energy hotspots in


1291
00:37:11,516 --> 00:37:11,916
your code.


1292
00:37:12,456 --> 00:37:14,256
So, let's talk a little bit more


1293
00:37:14,256 --> 00:37:15,366
about the weighted call graph,


1294
00:37:16,126 --> 00:37:17,896
how it was generated, and how


1295
00:37:17,896 --> 00:37:19,386
you can use it to debug energy


1296
00:37:19,386 --> 00:37:19,796
issues.


1297
00:37:23,576 --> 00:37:24,626
Let's say your program is


1298
00:37:24,626 --> 00:37:26,846
comprised of a main function and


1299
00:37:26,846 --> 00:37:28,406
a number of methods, Method 1,


1300
00:37:28,546 --> 00:37:30,436
Method 2, Method 3, and Method


1301
00:37:30,436 --> 00:37:30,776
4.


1302
00:37:31,286 --> 00:37:35,046
Your code begins to execute


1303
00:37:35,496 --> 00:37:37,316
until a high CPU energy event is


1304
00:37:37,316 --> 00:37:37,806
detected.


1305
00:37:38,376 --> 00:37:42,516
Up to this point, backtraces are


1306
00:37:42,516 --> 00:37:44,686
continuously sampled at a


1307
00:37:44,686 --> 00:37:46,406
periodic interval of once per


1308
00:37:46,406 --> 00:37:49,916
second, where each backtrace is


1309
00:37:49,916 --> 00:37:53,446
a sample of an active frames in


1310
00:37:53,446 --> 00:37:54,096
execution.


1311
00:37:55,576 --> 00:37:57,026
The first backtrace, for


1312
00:37:57,026 --> 00:37:59,606
example, shows that main Method


1313
00:37:59,606 --> 00:38:01,986
1 and Method 2 were active.


1314
00:38:03,796 --> 00:38:05,726
The second backtrace shows that


1315
00:38:05,726 --> 00:38:09,236
main Method 3 and Method 4 were


1316
00:38:10,226 --> 00:38:11,756
active and so on.


1317
00:38:17,566 --> 00:38:19,186
Now, we can try to combine these


1318
00:38:19,226 --> 00:38:21,196
backtraces together to form an


1319
00:38:21,196 --> 00:38:22,216
overall picture.


1320
00:38:23,026 --> 00:38:24,746
What we see here is a weight


1321
00:38:24,746 --> 00:38:26,946
call graph, and this weighted


1322
00:38:27,036 --> 00:38:28,396
call graph is really useful.


1323
00:38:29,426 --> 00:38:31,036
Here, we can see that main was


1324
00:38:31,076 --> 00:38:32,496
present in six out of the six


1325
00:38:32,496 --> 00:38:33,826
samples that we collected,


1326
00:38:35,046 --> 00:38:36,426
meaning that main was running


1327
00:38:36,426 --> 00:38:38,816
100% of the time.


1328
00:38:39,026 --> 00:38:40,976
Of that, we see that Method 1


1329
00:38:41,136 --> 00:38:43,936
had five samples whereas Method


1330
00:38:43,996 --> 00:38:45,556
3 had only one sample.


1331
00:38:45,986 --> 00:38:48,986
And within Method 1, we see that


1332
00:38:48,986 --> 00:38:51,426
Method 2 and Method 3 had three


1333
00:38:51,656 --> 00:38:52,696
samples and one sample


1334
00:38:52,696 --> 00:38:53,376
respectively.


1335
00:38:54,566 --> 00:38:56,016
So, this gives us an overall


1336
00:38:56,016 --> 00:38:58,416
picture of where the code was


1337
00:38:58,446 --> 00:39:00,346
being executed and how much time


1338
00:39:00,586 --> 00:39:01,336
was being spent.


1339
00:39:04,716 --> 00:39:06,266
So, when an Energy Log is


1340
00:39:06,266 --> 00:39:08,466
created, there's a collection of


1341
00:39:08,506 --> 00:39:10,766
periodic backtraces sampled at


1342
00:39:10,766 --> 00:39:11,586
one per second.


1343
00:39:12,166 --> 00:39:15,616
For each backtrace contains a


1344
00:39:15,616 --> 00:39:17,136
list of the active frames being


1345
00:39:17,136 --> 00:39:19,946
executed by the CPU, these


1346
00:39:20,016 --> 00:39:21,546
backtraces are aggregated by


1347
00:39:21,546 --> 00:39:24,916
sample count into a tree where


1348
00:39:24,916 --> 00:39:27,786
the samples, where more samples


1349
00:39:27,786 --> 00:39:29,366
mean more heavily executed code.


1350
00:39:30,426 --> 00:39:31,596
And you can use these weighted


1351
00:39:31,596 --> 00:39:33,036
call graphs to identify


1352
00:39:33,226 --> 00:39:35,216
unexpected workloads in your


1353
00:39:35,756 --> 00:39:35,826
app.


1354
00:39:37,336 --> 00:39:38,736
So, now that we know what an


1355
00:39:38,736 --> 00:39:40,846
Energy Log is, how do we access


1356
00:39:40,846 --> 00:39:41,086
them?


1357
00:39:42,576 --> 00:39:44,736
First, Energy Logs are created


1358
00:39:44,736 --> 00:39:45,446
on device.


1359
00:39:46,806 --> 00:39:48,416
Then, your beta testers and your


1360
00:39:48,416 --> 00:39:50,246
customers, who have opted in,


1361
00:39:50,876 --> 00:39:53,076
will upload these logs up to


1362
00:39:53,076 --> 00:39:53,456
Apple.


1363
00:39:54,636 --> 00:39:55,996
Now, there might be hundreds or


1364
00:39:55,996 --> 00:39:58,856
even thousands of these logs, so


1365
00:39:58,856 --> 00:40:01,096
we will aggregate these logs for


1366
00:40:01,096 --> 00:40:03,556
you, sort them, and present them


1367
00:40:03,556 --> 00:40:05,766
in a list of top energy issues


1368
00:40:05,766 --> 00:40:06,246
to you.


1369
00:40:07,426 --> 00:40:08,886
And you can download and view


1370
00:40:08,886 --> 00:40:10,956
these logs using the new Xcode


1371
00:40:11,016 --> 00:40:12,436
Energy Organizer tool.


1372
00:40:12,976 --> 00:40:16,316
The Xcode Energy Organizer is


1373
00:40:16,316 --> 00:40:17,816
your command center for


1374
00:40:17,816 --> 00:40:19,766
debugging energy issues in the


1375
00:40:19,766 --> 00:40:20,206
wild.


1376
00:40:21,536 --> 00:40:23,296
Energy Organizer makes it really


1377
00:40:23,296 --> 00:40:25,036
easy to view energy logs.


1378
00:40:26,336 --> 00:40:27,706
The Energy Organizer is


1379
00:40:27,706 --> 00:40:29,216
connected to TestFlight in the


1380
00:40:29,216 --> 00:40:31,086
App Store, so you'll see a list


1381
00:40:31,086 --> 00:40:32,386
of all your iOS apps.


1382
00:40:32,886 --> 00:40:36,466
You'll be able to see some


1383
00:40:36,466 --> 00:40:38,446
statistics of how often these


1384
00:40:38,446 --> 00:40:40,336
energy issues occur in the wild.


1385
00:40:40,336 --> 00:40:43,486
You'll have a list of the top


1386
00:40:43,486 --> 00:40:45,076
energy issues sorted by how many


1387
00:40:45,076 --> 00:40:46,446
devices that was impacted.


1388
00:40:46,916 --> 00:40:49,286
You'll have a view of the


1389
00:40:49,286 --> 00:40:51,216
weighted call graph for a number


1390
00:40:51,216 --> 00:40:52,826
of different logs, which you'll


1391
00:40:52,826 --> 00:40:54,436
be able to page through, using


1392
00:40:54,436 --> 00:40:58,036
page through logs, and you can


1393
00:40:58,036 --> 00:40:59,946
use Open in Project to jump


1394
00:40:59,946 --> 00:41:01,556
directly into your code base so


1395
00:41:01,556 --> 00:41:02,756
you can begin debugging these


1396
00:41:02,756 --> 00:41:03,576
energy issues.


1397
00:41:03,576 --> 00:41:04,446
And now, I'd love to show you a


1398
00:41:04,446 --> 00:41:04,886
demo.


1399
00:41:15,696 --> 00:41:16,846
Now, I've made sure that I've


1400
00:41:16,846 --> 00:41:18,506
signed into my developer account


1401
00:41:19,016 --> 00:41:20,446
and that I've uploaded our


1402
00:41:20,446 --> 00:41:23,066
Energy Game app up to TestFlight


1403
00:41:23,276 --> 00:41:23,956
in the App Store.


1404
00:41:25,026 --> 00:41:25,816
To bring up the Energy


1405
00:41:25,816 --> 00:41:27,826
Organizer, I could just go into


1406
00:41:27,826 --> 00:41:31,286
Window here, and click


1407
00:41:31,286 --> 00:41:31,876
Organizer.


1408
00:41:35,596 --> 00:41:37,426
And this is the Energy Organizer


1409
00:41:37,426 --> 00:41:37,646
UI.


1410
00:41:37,646 --> 00:41:40,866
I make sure that the Energy tab


1411
00:41:40,866 --> 00:41:43,706
is selected at the top, and if


1412
00:41:43,706 --> 00:41:44,596
you've used the Crashes


1413
00:41:44,596 --> 00:41:46,256
Organizer, you will already be


1414
00:41:46,256 --> 00:41:47,626
familiar with this UI.


1415
00:41:47,626 --> 00:41:50,536
On the left, we have a list of


1416
00:41:50,536 --> 00:41:51,286
all of our apps.


1417
00:41:52,576 --> 00:41:53,736
Next to that, we have a list of


1418
00:41:53,736 --> 00:41:55,146
our top energy issues.


1419
00:41:56,146 --> 00:41:57,496
In the center is our Weighted


1420
00:41:57,496 --> 00:41:59,486
Call Graph, and on the


1421
00:41:59,486 --> 00:42:01,276
right-hand side are some


1422
00:42:01,276 --> 00:42:03,006
statistics about the energy


1423
00:42:03,006 --> 00:42:03,386
issue.


1424
00:42:04,796 --> 00:42:06,506
So, let's go ahead into the left


1425
00:42:06,506 --> 00:42:09,136
here and select Energy Game,


1426
00:42:09,346 --> 00:42:10,176
which is the game that we're


1427
00:42:10,176 --> 00:42:10,736
working on.


1428
00:42:11,236 --> 00:42:13,616
And then, make sure that we're


1429
00:42:13,616 --> 00:42:14,000
on the correct build.


1430
00:42:19,756 --> 00:42:21,736
We see here a list of our top


1431
00:42:21,736 --> 00:42:23,846
energy issues, sorted by how


1432
00:42:23,846 --> 00:42:25,036
many times it's affected.


1433
00:42:25,546 --> 00:42:28,496
Let's jump into this first


1434
00:42:28,496 --> 00:42:31,996
energy issue, which hit 64 of


1435
00:42:31,996 --> 00:42:32,686
our devices.


1436
00:42:36,656 --> 00:42:38,426
On the right-hand pane here, we


1437
00:42:38,426 --> 00:42:39,786
have some more details about


1438
00:42:39,786 --> 00:42:42,076
what happened, as well as a


1439
00:42:42,076 --> 00:42:43,946
breakdown of how often that


1440
00:42:43,946 --> 00:42:45,616
energy issue happened, and we


1441
00:42:45,616 --> 00:42:47,236
can see that it happened across


1442
00:42:47,236 --> 00:42:49,806
a mix of iPads, iPods, and iPod


1443
00:42:49,806 --> 00:42:51,946
Touches, and we can see a


1444
00:42:51,946 --> 00:42:53,626
distribution of how often it


1445
00:42:53,626 --> 00:42:55,196
happened in the past two weeks.


1446
00:42:55,806 --> 00:42:57,576
Let's take a look at the


1447
00:42:57,576 --> 00:42:58,476
weighted call graph.


1448
00:42:58,966 --> 00:43:03,406
We see that a lot of time is


1449
00:43:03,406 --> 00:43:05,136
being spent in this dispatch


1450
00:43:05,136 --> 00:43:07,066
call block calling into this app


1451
00:43:07,266 --> 00:43:09,046
delegate computation function.


1452
00:43:09,146 --> 00:43:12,446
Now, I can use this button here


1453
00:43:13,456 --> 00:43:16,386
to jump us directly into our


1454
00:43:16,386 --> 00:43:21,786
code base.


1455
00:43:21,986 --> 00:43:23,686
So, we are back directly into


1456
00:43:23,686 --> 00:43:24,106
our code.


1457
00:43:25,096 --> 00:43:27,196
On the left here is one of the


1458
00:43:27,196 --> 00:43:28,826
sample backtraces from our


1459
00:43:28,826 --> 00:43:29,766
weighted call graph.


1460
00:43:30,296 --> 00:43:33,716
We can see that we're spending a


1461
00:43:33,716 --> 00:43:35,326
lot of time in this computation


1462
00:43:35,326 --> 00:43:35,726
function.


1463
00:43:36,216 --> 00:43:39,386
Now, this is the very function


1464
00:43:40,006 --> 00:43:41,056
that Phil was talking about


1465
00:43:41,056 --> 00:43:43,000
earlier on his demo.


1466
00:43:49,126 --> 00:43:52,586
And we can see that he's already


1467
00:43:52,586 --> 00:43:53,666
commented this part of the code


1468
00:43:53,666 --> 00:43:54,486
out, so he's already addressed


1469
00:43:54,486 --> 00:43:55,086
this energy issue.


1470
00:43:55,086 --> 00:43:55,736
So, let's jump back to the


1471
00:43:55,766 --> 00:43:56,000
organizer.


1472
00:44:04,316 --> 00:44:05,856
I can go ahead and click this


1473
00:44:05,896 --> 00:44:08,326
button here and mark this issue


1474
00:44:08,326 --> 00:44:08,976
as resolved.


1475
00:44:10,216 --> 00:44:11,656
And what this does is the next


1476
00:44:11,656 --> 00:44:12,606
time we open the Energy


1477
00:44:12,606 --> 00:44:14,626
Organizer, we'll see that we've


1478
00:44:14,626 --> 00:44:15,656
already taken care of this


1479
00:44:15,656 --> 00:44:16,026
issue.


1480
00:44:16,576 --> 00:44:18,936
All right, let's jump to the


1481
00:44:18,936 --> 00:44:20,606
second issue, which hit 42


1482
00:44:20,606 --> 00:44:21,126
devices.


1483
00:44:21,736 --> 00:44:23,716
Now, before going into the


1484
00:44:23,716 --> 00:44:24,926
weighted call graph, I'd like to


1485
00:44:24,926 --> 00:44:26,086
draw your attention to three


1486
00:44:26,086 --> 00:44:27,366
features at the bottom here.


1487
00:44:29,576 --> 00:44:32,436
First is this page through logs


1488
00:44:33,826 --> 00:44:35,236
where I can select one out of


1489
00:44:35,336 --> 00:44:37,526
five sample energy logs out of


1490
00:44:37,526 --> 00:44:38,656
the 42 that we've hit in the


1491
00:44:38,656 --> 00:44:38,996
wild.


1492
00:44:38,996 --> 00:44:44,936
As I page through these, you can


1493
00:44:44,936 --> 00:44:46,536
see that the weighted call graph


1494
00:44:46,536 --> 00:44:47,596
looks a little bit different,


1495
00:44:48,256 --> 00:44:50,496
which is okay because these


1496
00:44:50,546 --> 00:44:51,816
backtraces and these weighted


1497
00:44:51,816 --> 00:44:53,246
call graphs are samples.


1498
00:44:54,586 --> 00:44:55,966
However, we've grouped these


1499
00:44:55,996 --> 00:44:58,216
together by similarity, so these


1500
00:44:58,216 --> 00:45:00,026
logs should look fairly similar


1501
00:45:00,026 --> 00:45:01,016
to you.


1502
00:45:02,676 --> 00:45:05,836
This button here, when I click


1503
00:45:05,836 --> 00:45:08,116
it, shows that all the system


1504
00:45:08,596 --> 00:45:10,836
library frames that were hidden


1505
00:45:10,836 --> 00:45:11,416
previously.


1506
00:45:11,926 --> 00:45:15,236
And this button here clicks all,


1507
00:45:15,866 --> 00:45:17,906
shows you all the frames that


1508
00:45:17,906 --> 00:45:19,056
had low sample counts.


1509
00:45:19,996 --> 00:45:21,566
Now, by default, we've hidden


1510
00:45:21,996 --> 00:45:24,066
most of these frames for you so


1511
00:45:24,066 --> 00:45:25,436
that we only show you the most


1512
00:45:25,436 --> 00:45:27,000
important frames.


1513
00:45:34,156 --> 00:45:35,366
Let's take a look at this


1514
00:45:35,366 --> 00:45:35,796
function.


1515
00:45:38,406 --> 00:45:39,966
It looks like a lot of time is


1516
00:45:39,966 --> 00:45:41,606
being spent in this heavy timer


1517
00:45:41,606 --> 00:45:42,086
function.


1518
00:45:43,056 --> 00:45:44,426
Actually, I heard Phil talking


1519
00:45:44,426 --> 00:45:46,196
about this bug off stage, and he


1520
00:45:46,196 --> 00:45:47,186
said that he was going to take a


1521
00:45:47,186 --> 00:45:48,586
look at it, so I'll let him deal


1522
00:45:48,636 --> 00:45:49,426
with it.


1523
00:45:50,236 --> 00:45:52,506
I can go ahead and rename this


1524
00:45:56,556 --> 00:45:57,996
and move on to the next bug.


1525
00:45:59,246 --> 00:46:00,306
Let's take a look at one more


1526
00:46:00,306 --> 00:46:01,000
bug.


1527
00:46:13,336 --> 00:46:15,016
Here, I can see there's a lot of


1528
00:46:15,056 --> 00:46:17,276
time being spent in set next


1529
00:46:17,276 --> 00:46:19,106
update timer and add new sprite.


1530
00:46:19,816 --> 00:46:20,616
What is this function?


1531
00:46:21,476 --> 00:46:22,326
Let's investigate.


1532
00:46:25,476 --> 00:46:26,786
I'll jump directly into the


1533
00:46:26,786 --> 00:46:27,000
code,


1534
00:46:36,896 --> 00:46:38,456
and I can see that a lot of time


1535
00:46:38,456 --> 00:46:40,766
is being spent in this add new


1536
00:46:40,766 --> 00:46:41,716
sprite function.


1537
00:46:42,676 --> 00:46:42,996
Okay.


1538
00:46:43,266 --> 00:46:44,226
Adding new sprites can be


1539
00:46:44,226 --> 00:46:46,986
expensive, but the question to


1540
00:46:46,986 --> 00:46:49,046
ask ourselves is, is this an


1541
00:46:49,046 --> 00:46:50,126
expected workload?


1542
00:46:51,366 --> 00:46:52,776
And the answer is, in this case,


1543
00:46:53,076 --> 00:46:55,656
not really because we only


1544
00:46:55,656 --> 00:46:57,936
expect to be adding sprites once


1545
00:46:57,966 --> 00:46:58,896
every few seconds.


1546
00:46:59,586 --> 00:47:00,816
So it doesn't quite make sense


1547
00:47:01,106 --> 00:47:02,416
why this is chewing up so much


1548
00:47:02,466 --> 00:47:02,956
CPU.


1549
00:47:03,886 --> 00:47:04,996
Let's take a look at the


1550
00:47:04,996 --> 00:47:06,456
backtrace to see who is calling


1551
00:47:07,256 --> 00:47:07,346
us.


1552
00:47:07,956 --> 00:47:10,286
We're being called by set next


1553
00:47:10,376 --> 00:47:11,136
update timer.


1554
00:47:12,066 --> 00:47:17,936
So, what is this function doing?


1555
00:47:18,106 --> 00:47:19,716
We see that within set next


1556
00:47:19,716 --> 00:47:21,076
update timer, we're calling in


1557
00:47:21,076 --> 00:47:22,136
to this add new sprite.


1558
00:47:22,526 --> 00:47:25,756
At the end of a function, we're


1559
00:47:25,756 --> 00:47:28,116
calling in to this update timer


1560
00:47:28,606 --> 00:47:30,646
to schedule the next time this


1561
00:47:30,646 --> 00:47:31,416
function is called.


1562
00:47:33,216 --> 00:47:34,866
This timer is set to fire


1563
00:47:34,946 --> 00:47:37,476
sometime between now and next


1564
00:47:37,516 --> 00:47:38,356
update interval.


1565
00:47:40,216 --> 00:47:42,096
Now, next update interval is


1566
00:47:42,096 --> 00:47:44,316
decremented by 1 until it hits


1567
00:47:44,316 --> 00:47:48,186
0, and then it's re-initialized


1568
00:47:48,286 --> 00:47:50,006
according to this line of code


1569
00:47:50,006 --> 00:47:50,326
here.


1570
00:47:52,376 --> 00:47:53,896
Now, here's where the problem


1571
00:47:53,896 --> 00:47:54,086
is.


1572
00:47:55,546 --> 00:47:57,376
Time interval since last update


1573
00:47:57,426 --> 00:47:59,586
date can potentially be


1574
00:47:59,586 --> 00:48:02,226
negative, and we've seen cases


1575
00:48:02,226 --> 00:48:03,926
of this happening, especially


1576
00:48:03,926 --> 00:48:05,786
when users try to game the


1577
00:48:05,786 --> 00:48:06,296
system.


1578
00:48:07,116 --> 00:48:08,276
Maybe they're playing a game,


1579
00:48:09,556 --> 00:48:10,606
and they want to reset the


1580
00:48:10,606 --> 00:48:11,036
clock.


1581
00:48:11,816 --> 00:48:13,296
Maybe they want some extra lives


1582
00:48:13,296 --> 00:48:14,966
or some extra chances, so they


1583
00:48:14,966 --> 00:48:16,606
go into System Settings and


1584
00:48:16,606 --> 00:48:18,056
change the clock to 24 hours


1585
00:48:18,056 --> 00:48:18,346
ago.


1586
00:48:19,496 --> 00:48:21,896
Well, in this case, this causes


1587
00:48:21,896 --> 00:48:23,136
next update interval to be


1588
00:48:23,136 --> 00:48:25,996
negative, and when we schedule a


1589
00:48:25,996 --> 00:48:27,816
timer for a time that is


1590
00:48:27,816 --> 00:48:29,936
sometime in the past, that timer


1591
00:48:29,936 --> 00:48:32,056
will fire immediately and then


1592
00:48:32,056 --> 00:48:33,836
call itself again and again.


1593
00:48:35,036 --> 00:48:36,476
So, we effectively have an


1594
00:48:36,476 --> 00:48:39,516
infinite loop here.


1595
00:48:39,686 --> 00:48:41,136
Fortunately, this is really easy


1596
00:48:41,136 --> 00:48:41,576
to fix.


1597
00:48:42,356 --> 00:48:44,116
We just go into this function


1598
00:48:44,116 --> 00:48:46,786
here and change this to less


1599
00:48:46,786 --> 00:48:49,026
than or equal to 0 so that even


1600
00:48:49,066 --> 00:48:50,496
if next update interval is


1601
00:48:50,496 --> 00:48:52,326
negative, we can break out of


1602
00:48:52,326 --> 00:48:52,686
the loop.


1603
00:48:53,136 --> 00:48:55,866
Now, this is a really great


1604
00:48:55,936 --> 00:48:58,576
example of an energy issue that


1605
00:48:58,576 --> 00:49:00,626
is really difficult to catch


1606
00:49:02,036 --> 00:49:04,046
during normal testing but is


1607
00:49:04,046 --> 00:49:05,906
made obvious once you have the


1608
00:49:06,006 --> 00:49:06,966
data from the field.


1609
00:49:07,466 --> 00:49:10,126
That's the power of Energy Logs,


1610
00:49:11,156 --> 00:49:12,586
and that's the power of Energy


1611
00:49:12,586 --> 00:49:13,146
Organizer.


1612
00:49:14,636 --> 00:49:15,776
Let's take a look at the three


1613
00:49:15,776 --> 00:49:17,126
key takeaways from this demo.


1614
00:49:17,696 --> 00:49:20,486
You can use the Energy Organizer


1615
00:49:20,486 --> 00:49:22,796
to discover top energy issues in


1616
00:49:22,796 --> 00:49:23,226
the field.


1617
00:49:24,366 --> 00:49:25,776
Take a look at the top issues,


1618
00:49:26,256 --> 00:49:27,436
take a look at how often they're


1619
00:49:27,436 --> 00:49:29,616
happening, and take a look at


1620
00:49:29,616 --> 00:49:31,076
what kind of devices and builds


1621
00:49:31,076 --> 00:49:31,676
are affected.


1622
00:49:32,896 --> 00:49:35,076
Second, you can view energy


1623
00:49:35,076 --> 00:49:37,206
hotspots using the weighted call


1624
00:49:37,206 --> 00:49:37,626
graphs.


1625
00:49:38,596 --> 00:49:39,946
So, look out for the frames with


1626
00:49:40,016 --> 00:49:41,416
unusually high sample counts,


1627
00:49:42,686 --> 00:49:44,176
and watch out for the unexpected


1628
00:49:44,176 --> 00:49:44,676
workloads.


1629
00:49:45,996 --> 00:49:49,256
Finally, use OpenEnd Project to


1630
00:49:49,256 --> 00:49:50,646
jump directly into your code so


1631
00:49:51,206 --> 00:49:54,016
you can make and inspect fixes


1632
00:49:55,046 --> 00:49:55,716
with what's going on.


1633
00:49:57,166 --> 00:49:59,326
Let's summarize what we've


1634
00:49:59,326 --> 00:50:00,000
learned today.


1635
00:50:03,196 --> 00:50:05,396
First, think about energy use


1636
00:50:05,736 --> 00:50:06,736
and treat energy as a


1637
00:50:06,736 --> 00:50:08,386
first-class citizen in every


1638
00:50:08,386 --> 00:50:09,666
aspect of your design,


1639
00:50:10,466 --> 00:50:11,746
development, and testing.


1640
00:50:13,106 --> 00:50:14,836
Second, make use of the great


1641
00:50:14,836 --> 00:50:17,896
tools like energy gauges and


1642
00:50:17,896 --> 00:50:19,876
instruments to profile your app.


1643
00:50:21,196 --> 00:50:23,606
And third, take a moment to


1644
00:50:23,606 --> 00:50:25,296
explore the new Xcode Energy


1645
00:50:25,296 --> 00:50:27,846
Organizer to understand and fix


1646
00:50:27,846 --> 00:50:30,266
energy issues in the field.


1647
00:50:31,316 --> 00:50:32,856
For more information, please


1648
00:50:32,856 --> 00:50:34,096
come check out the following


1649
00:50:34,096 --> 00:50:37,126
URLs, and feel free to come by


1650
00:50:37,126 --> 00:50:39,256
the Power and Performance Lab on


1651
00:50:39,256 --> 00:50:40,476
Friday from 9 to 11.


1652
00:50:41,306 --> 00:50:42,346
Thank you and have a great


1653
00:50:42,346 --> 00:50:42,676
evening.


1654
00:50:43,516 --> 00:50:46,500
[ Applause ]

