1
00:00:07,516 --> 00:00:16,500
[ Music ]


2
00:00:21,516 --> 00:00:26,896
[ Applause ]


3
00:00:27,396 --> 00:00:29,296
>> Hello everyone.


4
00:00:29,296 --> 00:00:30,566
My name is John Wilander.


5
00:00:30,566 --> 00:00:32,216
I am an engineer on the Safari


6
00:00:32,216 --> 00:00:35,056
and WebKit team and I'm here to


7
00:00:35,056 --> 00:00:37,006
present to you today how to


8
00:00:37,006 --> 00:00:38,356
secure web content.


9
00:00:38,846 --> 00:00:42,076
Or, as I like to call it, take


10
00:00:42,076 --> 00:00:43,236
the Swede's advice.


11
00:00:45,016 --> 00:00:46,476
So, you might be asking


12
00:00:46,476 --> 00:00:48,796
yourself, web content, that's a


13
00:00:48,796 --> 00:00:49,956
pretty broad term.


14
00:00:50,296 --> 00:00:51,686
Is this session really for me?


15
00:00:52,586 --> 00:00:53,846
Yes, it is for you.


16
00:00:54,336 --> 00:00:57,176
To start off, apps use tons of


17
00:00:57,176 --> 00:00:57,826
web content.


18
00:00:58,286 --> 00:01:00,566
It may be used for ads, login


19
00:01:00,566 --> 00:01:02,636
flows, splash screens.


20
00:01:03,066 --> 00:01:04,325
You might be using Safari View


21
00:01:04,325 --> 00:01:05,876
Controller to-- for parts of


22
00:01:05,876 --> 00:01:06,236
your app.


23
00:01:06,766 --> 00:01:08,146
You might have whole parts of


24
00:01:08,146 --> 00:01:10,246
your UI rendered in a web view.


25
00:01:11,146 --> 00:01:12,756
You might also have companion


26
00:01:12,756 --> 00:01:14,306
web apps that are supposed to be


27
00:01:14,306 --> 00:01:16,456
rendered in a web browser and


28
00:01:16,456 --> 00:01:18,276
that are sharing content or


29
00:01:18,696 --> 00:01:20,806
providing a joint experience


30
00:01:20,806 --> 00:01:22,226
across apps and web apps.


31
00:01:22,786 --> 00:01:24,506
So, really, yes, the session is


32
00:01:24,506 --> 00:01:24,876
for you.


33
00:01:25,586 --> 00:01:26,986
And security is important.


34
00:01:27,656 --> 00:01:28,936
You want to stay in business?


35
00:01:29,096 --> 00:01:30,096
You want to provide the best


36
00:01:30,096 --> 00:01:31,026
customer experience.


37
00:01:31,296 --> 00:01:32,536
You want to be ahead of your


38
00:01:32,656 --> 00:01:33,346
competition.


39
00:01:33,926 --> 00:01:35,476
You want to get this right so


40
00:01:35,476 --> 00:01:37,176
that when they don't they are


41
00:01:37,176 --> 00:01:38,746
the ones to fall, you stay in


42
00:01:38,746 --> 00:01:39,086
the market.


43
00:01:40,246 --> 00:01:41,806
OK. What are we going to cover


44
00:01:41,806 --> 00:01:42,086
today?


45
00:01:42,726 --> 00:01:44,986
We're going to have a look at


46
00:01:45,236 --> 00:01:47,506
first securing your transports.


47
00:01:47,756 --> 00:01:49,786
This is just a brief mentioning


48
00:01:49,786 --> 00:01:51,936
from me about basics that we


49
00:01:51,936 --> 00:01:53,536
need to do before we do the


50
00:01:53,536 --> 00:01:53,876
rest.


51
00:01:54,406 --> 00:01:55,136
If you don't secure your


52
00:01:55,136 --> 00:01:56,786
transports, most other bets are


53
00:01:56,786 --> 00:01:57,036
off.


54
00:01:57,926 --> 00:01:59,106
Then we'll go into a look at


55
00:01:59,336 --> 00:02:00,646
cross-origin lockdown.


56
00:02:01,146 --> 00:02:03,976
This is basically me showing you


57
00:02:03,976 --> 00:02:05,426
a bunch of technologies that are


58
00:02:05,426 --> 00:02:07,856
available to you in WebKit and


59
00:02:07,856 --> 00:02:09,606
in browser engines across the


60
00:02:09,606 --> 00:02:12,426
line that can help you get into


61
00:02:12,726 --> 00:02:14,776
more secure defaults for your


62
00:02:14,776 --> 00:02:15,476
web content.


63
00:02:16,056 --> 00:02:17,396
We would like to opt in for you,


64
00:02:17,396 --> 00:02:19,186
but we can't test your sites for


65
00:02:19,186 --> 00:02:21,636
you or your web content for you,


66
00:02:21,636 --> 00:02:23,346
so we need you to opt in.


67
00:02:23,946 --> 00:02:25,686
And then, as a motivation, if


68
00:02:25,686 --> 00:02:27,056
you feel, well, why should I


69
00:02:27,056 --> 00:02:28,326
care about these security


70
00:02:28,326 --> 00:02:30,226
mechanisms, I'll actually show


71
00:02:30,226 --> 00:02:32,386
you some attack scenarios and


72
00:02:32,386 --> 00:02:34,546
map them back to the security


73
00:02:34,616 --> 00:02:36,026
technologies so that you


74
00:02:36,026 --> 00:02:37,716
understand where they come into


75
00:02:37,776 --> 00:02:39,746
play and how they can defend


76
00:02:39,746 --> 00:02:40,596
your web content.


77
00:02:41,266 --> 00:02:42,966
So, let's head right in to


78
00:02:42,966 --> 00:02:44,476
securing your transports.


79
00:02:45,096 --> 00:02:46,636
This one should be familiar to


80
00:02:46,636 --> 00:02:46,876
you.


81
00:02:47,486 --> 00:02:49,276
So, this is about moving to


82
00:02:49,276 --> 00:02:51,196
HTTPS and WSS.


83
00:02:52,286 --> 00:02:54,376
WSS is for web sockets.


84
00:02:55,526 --> 00:02:58,306
Now, just the fact that HTTP and


85
00:02:58,306 --> 00:03:00,386
WS, the plain text equivalents,


86
00:03:00,386 --> 00:03:02,916
still exist is not an excuse to


87
00:03:02,986 --> 00:03:03,796
keep using them.


88
00:03:04,296 --> 00:03:05,686
You need to move to secure


89
00:03:05,686 --> 00:03:07,866
transports because that's what's


90
00:03:08,016 --> 00:03:09,936
going to ensure that the content


91
00:03:09,936 --> 00:03:11,396
that you are rendering in a


92
00:03:11,396 --> 00:03:13,686
browser or in your app comes


93
00:03:13,686 --> 00:03:15,606
from the server you expect it to


94
00:03:15,606 --> 00:03:17,776
come from and no one has fiddled


95
00:03:17,776 --> 00:03:19,036
around with the content in


96
00:03:19,036 --> 00:03:19,696
transport.


97
00:03:20,316 --> 00:03:22,876
So, moving to HTTPS for your


98
00:03:22,876 --> 00:03:23,576
main content.


99
00:03:23,946 --> 00:03:24,626
There are a couple of


100
00:03:24,626 --> 00:03:26,156
technologies that can help you


101
00:03:26,156 --> 00:03:26,636
get there.


102
00:03:27,496 --> 00:03:28,756
First on your to-do list--


103
00:03:29,176 --> 00:03:31,116
except for just moving to HTTPS


104
00:03:31,256 --> 00:03:33,526
in general-- is strict transport


105
00:03:33,526 --> 00:03:35,236
security or HSTS.


106
00:03:35,236 --> 00:03:39,076
This is an HTTP response header


107
00:03:39,076 --> 00:03:40,636
you can send to the rendering


108
00:03:40,636 --> 00:03:43,136
engine, such as WebKit, and tell


109
00:03:43,136 --> 00:03:45,666
it, hey, my domain should always


110
00:03:45,666 --> 00:03:47,296
be loaded over HTTPS.


111
00:03:47,816 --> 00:03:50,636
If there's ever an HTTP request


112
00:03:50,636 --> 00:03:52,436
from me, just automatically


113
00:03:52,436 --> 00:03:54,306
upgrade it for me to HTTPS.


114
00:03:54,616 --> 00:03:56,066
Never making plain text


115
00:03:56,206 --> 00:03:57,486
connections to my server,


116
00:03:57,606 --> 00:03:57,996
please.


117
00:03:59,216 --> 00:04:00,756
And this is also a thing you can


118
00:04:00,756 --> 00:04:02,486
tell the rendering engine for


119
00:04:02,486 --> 00:04:03,796
how long it should remember


120
00:04:03,796 --> 00:04:04,106
this.


121
00:04:04,336 --> 00:04:05,916
So, typically at least half a


122
00:04:05,916 --> 00:04:06,956
year ahead in time.


123
00:04:08,426 --> 00:04:09,846
Now, you might also be loading


124
00:04:09,846 --> 00:04:11,546
content off of other servers,


125
00:04:11,546 --> 00:04:12,966
servers that are not under your


126
00:04:12,966 --> 00:04:14,536
control, not your domain name.


127
00:04:15,216 --> 00:04:16,916
There's also a header you can


128
00:04:16,916 --> 00:04:18,685
send to the browser engine


129
00:04:18,685 --> 00:04:19,896
called upgrade insecure


130
00:04:19,896 --> 00:04:23,036
requests, also an HTTP response


131
00:04:23,036 --> 00:04:25,076
header, which tells the browser,


132
00:04:25,076 --> 00:04:27,256
hey, go ahead and upgrade all


133
00:04:27,256 --> 00:04:28,796
those other links to content


134
00:04:28,826 --> 00:04:31,086
too, even if it's not from my


135
00:04:31,086 --> 00:04:33,126
server and even if they have not


136
00:04:33,126 --> 00:04:35,406
set strict transport security.


137
00:04:36,356 --> 00:04:38,476
So, those two things that will


138
00:04:38,556 --> 00:04:40,106
automatically upgrade to secure


139
00:04:40,106 --> 00:04:40,836
transports.


140
00:04:42,166 --> 00:04:43,516
Another thing you need to do is


141
00:04:43,516 --> 00:04:45,206
make sure that you mark your


142
00:04:45,266 --> 00:04:46,646
cookies secure.


143
00:04:46,866 --> 00:04:48,346
This is an attribute you add in


144
00:04:48,346 --> 00:04:49,486
your set cookie header,


145
00:04:49,846 --> 00:04:51,606
semi-colon secure.


146
00:04:52,226 --> 00:04:54,376
This means that you're telling


147
00:04:54,476 --> 00:04:56,666
the network stack this cookie


148
00:04:56,666 --> 00:04:58,716
should only ever be sent over a


149
00:04:58,716 --> 00:04:59,716
secure transport.


150
00:05:00,086 --> 00:05:01,686
If there for some reason is a


151
00:05:01,766 --> 00:05:03,696
plain text request for my server


152
00:05:03,936 --> 00:05:05,776
or to my server, don't send the


153
00:05:05,776 --> 00:05:06,066
cookie.


154
00:05:06,836 --> 00:05:08,336
And, since you should be using


155
00:05:08,336 --> 00:05:10,186
secure transports, all of your


156
00:05:10,186 --> 00:05:11,606
cookies should be marked secure.


157
00:05:12,606 --> 00:05:14,846
Final-- finally on your to-do


158
00:05:14,846 --> 00:05:16,316
list here for secure transports


159
00:05:16,346 --> 00:05:17,886
is specific for apps.


160
00:05:18,476 --> 00:05:19,566
You might have heard about app


161
00:05:19,566 --> 00:05:21,246
transport security or ATS.


162
00:05:21,246 --> 00:05:24,266
It is the default behavior for


163
00:05:24,266 --> 00:05:26,116
iOS apps, meaning that they


164
00:05:26,116 --> 00:05:27,996
should be using only secure


165
00:05:27,996 --> 00:05:29,436
transports for network traffic.


166
00:05:30,496 --> 00:05:32,156
Now, there is an opt out you can


167
00:05:32,156 --> 00:05:33,836
have in your info p list to say,


168
00:05:33,836 --> 00:05:35,606
hey, you know, for web content,


169
00:05:35,686 --> 00:05:37,276
I'd still like to do insecure


170
00:05:37,276 --> 00:05:37,956
requests.


171
00:05:38,826 --> 00:05:39,536
Don't do that.


172
00:05:40,136 --> 00:05:42,276
You should be saying no in this


173
00:05:42,316 --> 00:05:44,096
info p list and specifically for


174
00:05:44,096 --> 00:05:45,926
arbitrary web content loads.


175
00:05:46,976 --> 00:05:48,396
OK. Now we've secured the


176
00:05:48,396 --> 00:05:49,066
transport.


177
00:05:49,386 --> 00:05:50,136
Let's move on.


178
00:05:50,476 --> 00:05:51,226
We're now going to look at


179
00:05:51,316 --> 00:05:52,786
cross-origin lockdown.


180
00:05:53,716 --> 00:05:54,756
The reason why I call it


181
00:05:54,756 --> 00:05:57,106
lockdown is this is really you


182
00:05:57,106 --> 00:06:00,276
opting into saner, safer, more


183
00:06:00,276 --> 00:06:02,346
secure defaults for your web


184
00:06:02,376 --> 00:06:02,906
content.


185
00:06:03,286 --> 00:06:05,186
We're locking it down to more or


186
00:06:05,186 --> 00:06:06,306
less what it should have been


187
00:06:06,306 --> 00:06:08,446
all along and then you open up


188
00:06:08,446 --> 00:06:10,096
the specific things you want to


189
00:06:10,876 --> 00:06:10,946
do.


190
00:06:11,806 --> 00:06:13,836
So, let's move in and look at


191
00:06:13,836 --> 00:06:15,376
what are cross-origin loads


192
00:06:15,376 --> 00:06:15,846
anyway.


193
00:06:16,186 --> 00:06:17,336
What are we going to lock down?


194
00:06:18,076 --> 00:06:20,106
Well, web technologies have this


195
00:06:20,216 --> 00:06:21,956
powerful feature where you can


196
00:06:22,066 --> 00:06:24,036
weave together content from


197
00:06:24,096 --> 00:06:25,676
different servers and different


198
00:06:25,676 --> 00:06:26,266
origins.


199
00:06:27,126 --> 00:06:28,586
Different domain names, if you


200
00:06:28,586 --> 00:06:29,036
so will.


201
00:06:30,056 --> 00:06:32,136
An example of this is images.


202
00:06:32,746 --> 00:06:34,356
You can load images from any


203
00:06:34,356 --> 00:06:36,746
server on the web into your web


204
00:06:36,746 --> 00:06:37,586
content and that's a


205
00:06:37,586 --> 00:06:38,696
cross-origin load.


206
00:06:39,546 --> 00:06:41,166
You can also load scripts from


207
00:06:41,166 --> 00:06:42,066
other servers.


208
00:06:42,766 --> 00:06:44,696
Interestingly, those scripts


209
00:06:44,886 --> 00:06:46,556
actually execute with the same


210
00:06:46,556 --> 00:06:48,746
powers and privileges as your


211
00:06:48,746 --> 00:06:50,636
own scripts, so you need to be


212
00:06:50,636 --> 00:06:52,246
really careful what scripts you


213
00:06:52,246 --> 00:06:53,926
load off of other servers.


214
00:06:54,356 --> 00:06:56,426
They more or less own your web


215
00:06:56,426 --> 00:06:56,996
content.


216
00:06:57,286 --> 00:06:58,406
They are executing with the same


217
00:06:58,406 --> 00:06:59,136
powers as you.


218
00:07:00,126 --> 00:07:01,636
And, as a third example,


219
00:07:01,796 --> 00:07:02,536
iframes.


220
00:07:02,786 --> 00:07:05,506
You can embed full pages from


221
00:07:05,506 --> 00:07:06,416
other servers.


222
00:07:06,806 --> 00:07:08,246
Cross-origin, meaning from a


223
00:07:08,486 --> 00:07:09,436
different domain name.


224
00:07:09,926 --> 00:07:11,146
These are three examples of


225
00:07:11,206 --> 00:07:12,826
cross-origin loads.


226
00:07:13,386 --> 00:07:15,616
Now, we've had a security


227
00:07:15,616 --> 00:07:18,046
mechanisms-- security mechanism


228
00:07:18,046 --> 00:07:20,096
on the web for over 20 years


229
00:07:20,146 --> 00:07:21,606
that has provided basic


230
00:07:21,656 --> 00:07:22,526
protection for these


231
00:07:22,836 --> 00:07:24,496
cross-origin loads and it's


232
00:07:24,496 --> 00:07:26,356
called the same-origin policy.


233
00:07:27,046 --> 00:07:28,586
And it differentiates-- here


234
00:07:28,586 --> 00:07:30,196
you've got these examples with


235
00:07:30,196 --> 00:07:31,206
real domain names.


236
00:07:31,556 --> 00:07:33,956
So, you've got the example for


237
00:07:33,956 --> 00:07:37,096
loading the image, you've got a


238
00:07:37,226 --> 00:07:39,336
CDN where you loaded the script,


239
00:07:39,916 --> 00:07:41,226
and you may have a social


240
00:07:41,226 --> 00:07:42,926
widget, an iframe, coming from


241
00:07:42,926 --> 00:07:44,166
social.example here.


242
00:07:44,896 --> 00:07:46,856
And, just to mention, when I say


243
00:07:46,856 --> 00:07:49,076
.example it's just me being sure


244
00:07:49,076 --> 00:07:50,176
that I'm not talking about real


245
00:07:50,176 --> 00:07:51,026
websites here.


246
00:07:51,406 --> 00:07:52,666
If it's easier for you, you can


247
00:07:52,666 --> 00:07:54,396
think of it as .com or .org.


248
00:07:55,566 --> 00:07:56,446
Anyway, these are the


249
00:07:56,446 --> 00:07:58,306
cross-origin loads and the


250
00:07:58,306 --> 00:08:01,236
same-origin policy keeps track


251
00:08:01,236 --> 00:08:02,836
of where did I load this image


252
00:08:02,836 --> 00:08:04,096
from or where did I load this


253
00:08:04,096 --> 00:08:05,586
script from, where did I load


254
00:08:05,586 --> 00:08:07,446
this iframe from, so that it can


255
00:08:07,446 --> 00:08:08,756
provide basic protection.


256
00:08:09,326 --> 00:08:12,046
That basic protection means that


257
00:08:12,046 --> 00:08:14,366
your page in this example cannot


258
00:08:14,366 --> 00:08:16,426
reach into that iframe from


259
00:08:16,426 --> 00:08:19,266
social.example and read its


260
00:08:19,266 --> 00:08:21,126
bytes, read its contents, or


261
00:08:21,246 --> 00:08:22,416
write to its contents.


262
00:08:22,706 --> 00:08:24,106
The same-origin policy is


263
00:08:24,106 --> 00:08:25,826
guarding, saying this part of


264
00:08:25,826 --> 00:08:27,066
the page actually came from a


265
00:08:27,066 --> 00:08:28,626
different server, you're not


266
00:08:28,626 --> 00:08:29,866
allowed to just go straight in


267
00:08:29,866 --> 00:08:31,996
there and change things or read


268
00:08:31,996 --> 00:08:33,366
what the user happened to enter


269
00:08:33,366 --> 00:08:34,905
into that form, for instance.


270
00:08:35,496 --> 00:08:37,596
An easier way to think of the


271
00:08:37,596 --> 00:08:38,905
same-origin policy is just


272
00:08:39,275 --> 00:08:41,166
matching two pages, two tabs in


273
00:08:41,166 --> 00:08:41,696
a browser.


274
00:08:42,236 --> 00:08:43,596
One tab shouldn't be able to


275
00:08:43,596 --> 00:08:45,546
just go into another tab and see


276
00:08:45,546 --> 00:08:46,656
what the user's doing over


277
00:08:46,656 --> 00:08:47,056
there.


278
00:08:47,876 --> 00:08:49,176
It's the same-origin policy


279
00:08:49,746 --> 00:08:51,886
effectively doing its job there


280
00:08:53,426 --> 00:08:53,500
too.


281
00:08:54,726 --> 00:08:55,756
So, the lockdown.


282
00:08:55,846 --> 00:08:57,306
How do we lock this down


283
00:08:57,306 --> 00:08:57,806
properly?


284
00:08:58,116 --> 00:08:59,116
We've got the same-origin


285
00:08:59,116 --> 00:09:00,806
policy, but it's not good


286
00:09:00,806 --> 00:09:01,176
enough.


287
00:09:01,546 --> 00:09:03,506
So, you need to opt in to some


288
00:09:03,506 --> 00:09:04,726
more defaults.


289
00:09:05,106 --> 00:09:07,016
Starting out with subresource


290
00:09:07,016 --> 00:09:08,716
integrity-- I'll go through them


291
00:09:08,756 --> 00:09:09,956
and I'll mention them here.


292
00:09:10,536 --> 00:09:12,256
This is just a simple change in


293
00:09:12,256 --> 00:09:14,006
the markup for your script tags.


294
00:09:15,126 --> 00:09:16,426
The second part is content


295
00:09:16,426 --> 00:09:17,376
security policy.


296
00:09:17,526 --> 00:09:19,056
This is providing a full-on


297
00:09:19,056 --> 00:09:20,576
security policy for your whole


298
00:09:20,576 --> 00:09:22,366
page where you can say, hey, I


299
00:09:22,366 --> 00:09:23,596
only want to load scripts from


300
00:09:23,596 --> 00:09:24,236
over here.


301
00:09:24,546 --> 00:09:25,976
I don't want to have any frames


302
00:09:25,976 --> 00:09:27,596
from other servers, and so on.


303
00:09:27,696 --> 00:09:28,326
We'll look at that.


304
00:09:29,076 --> 00:09:30,686
And the third category here are


305
00:09:30,686 --> 00:09:32,496
simple server configurations.


306
00:09:32,986 --> 00:09:35,076
These are HTTP response headers


307
00:09:35,136 --> 00:09:36,666
that you send out telling the


308
00:09:36,666 --> 00:09:38,856
browser engine, hey, I want more


309
00:09:38,856 --> 00:09:40,466
secure defaults, I don't want


310
00:09:40,466 --> 00:09:42,366
these old legacy APIs that


311
00:09:42,366 --> 00:09:43,496
you've been supporting because I


312
00:09:43,496 --> 00:09:44,206
don't need them.


313
00:09:44,426 --> 00:09:45,176
Please help me here.


314
00:09:45,756 --> 00:09:47,926
So, let's dive into it and look


315
00:09:47,926 --> 00:09:49,566
at subresource integrity.


316
00:09:50,696 --> 00:09:52,746
Now, this is a perfectly


317
00:09:52,746 --> 00:09:54,416
plausible way of loading that


318
00:09:54,416 --> 00:09:55,906
framework from the CDN, your


319
00:09:56,366 --> 00:09:57,826
content delivery network.


320
00:09:58,826 --> 00:10:01,916
And that script tag is going to


321
00:10:01,966 --> 00:10:03,926
just contain the URL to fetch


322
00:10:03,926 --> 00:10:04,666
that script, right?


323
00:10:05,446 --> 00:10:06,536
As I mentioned, you're now


324
00:10:06,536 --> 00:10:09,686
relying on that CDN to provide


325
00:10:09,686 --> 00:10:10,956
you with the right script that's


326
00:10:10,956 --> 00:10:12,546
going to make your web content


327
00:10:12,546 --> 00:10:13,806
work the way it's supposed to.


328
00:10:14,846 --> 00:10:16,346
But actually, if they decide to,


329
00:10:16,346 --> 00:10:17,966
you know, bump the version or if


330
00:10:17,966 --> 00:10:19,066
something goes wrong on that


331
00:10:19,066 --> 00:10:20,296
server, they're serving you--


332
00:10:20,296 --> 00:10:21,256
they're sending you the wrong


333
00:10:21,256 --> 00:10:23,606
script, your web content may be


334
00:10:23,606 --> 00:10:24,016
crippled.


335
00:10:24,646 --> 00:10:25,896
It may-- something may go wrong.


336
00:10:25,896 --> 00:10:26,986
It might not work the way it's


337
00:10:26,986 --> 00:10:27,576
supposed to.


338
00:10:28,026 --> 00:10:29,646
You know what script you're


339
00:10:29,646 --> 00:10:31,626
expecting, but what you're


340
00:10:31,626 --> 00:10:32,716
sending out when you're just


341
00:10:32,716 --> 00:10:34,186
sending a script tag like this--


342
00:10:35,006 --> 00:10:36,756
looking like this-- is just


343
00:10:36,756 --> 00:10:39,436
telling the browser whatever you


344
00:10:39,436 --> 00:10:42,176
get back in JavaScript, execute


345
00:10:42,176 --> 00:10:42,336
it.


346
00:10:43,036 --> 00:10:45,056
A much better way is to say, no,


347
00:10:45,376 --> 00:10:46,526
I want to make sure it's the


348
00:10:46,526 --> 00:10:47,986
script I expect.


349
00:10:48,546 --> 00:10:49,996
And-- but you can use the


350
00:10:49,996 --> 00:10:51,976
integrity attribute in your


351
00:10:51,976 --> 00:10:52,766
script tags.


352
00:10:53,366 --> 00:10:54,916
In there you provide a check


353
00:10:54,916 --> 00:10:56,496
sum, in this case with the


354
00:10:56,496 --> 00:10:59,466
algorithm sha256, saying this is


355
00:10:59,466 --> 00:11:01,316
the check sum of the script I


356
00:11:01,316 --> 00:11:04,176
expect to get from my CDN, and


357
00:11:04,176 --> 00:11:05,816
only if I get something that


358
00:11:05,816 --> 00:11:07,946
matches this check sum, then you


359
00:11:07,946 --> 00:11:08,576
execute it.


360
00:11:09,266 --> 00:11:11,036
So, the browser engine will go


361
00:11:11,036 --> 00:11:13,556
through and make sure to compare


362
00:11:13,556 --> 00:11:15,536
that check sum before executing


363
00:11:15,536 --> 00:11:15,976
the code.


364
00:11:17,196 --> 00:11:18,756
Well, what happens if it doesn't


365
00:11:18,756 --> 00:11:19,186
match?


366
00:11:19,246 --> 00:11:21,506
What if they bumped the version


367
00:11:21,506 --> 00:11:22,606
or something went wrong and I


368
00:11:22,606 --> 00:11:23,406
got the wrong script?


369
00:11:24,096 --> 00:11:25,846
Now my web content doesn't work


370
00:11:25,846 --> 00:11:26,216
anymore.


371
00:11:26,666 --> 00:11:28,056
Well, you add a check.


372
00:11:28,276 --> 00:11:29,906
In this case, you've loaded or


373
00:11:29,906 --> 00:11:31,266
tried to load a framework.


374
00:11:31,736 --> 00:11:33,336
You checked did the framework


375
00:11:33,336 --> 00:11:35,376
load OK, do I have that object


376
00:11:35,376 --> 00:11:36,266
in my dom now.


377
00:11:36,856 --> 00:11:39,246
If not, go load it from my own


378
00:11:39,246 --> 00:11:41,516
server which I am in control of


379
00:11:41,516 --> 00:11:43,366
and I don't make changes to


380
00:11:43,506 --> 00:11:44,126
willy-nilly.


381
00:11:44,896 --> 00:11:47,496
That may reduce performance, but


382
00:11:47,496 --> 00:11:49,266
at least you have a still


383
00:11:49,266 --> 00:11:50,526
functioning web content or


384
00:11:50,526 --> 00:11:50,986
website.


385
00:11:51,986 --> 00:11:53,336
OK. That's sub-resource


386
00:11:53,336 --> 00:11:53,886
integrity.


387
00:11:54,336 --> 00:11:55,696
Let's move on to content


388
00:11:55,696 --> 00:11:56,866
security policy.


389
00:11:57,486 --> 00:11:59,186
I mentioned this is like setting


390
00:11:59,186 --> 00:12:00,616
a policy for your page, like


391
00:12:00,616 --> 00:12:02,596
what should be allowed here, and


392
00:12:02,626 --> 00:12:03,876
I actually think of it as an


393
00:12:03,946 --> 00:12:05,176
architecture policy.


394
00:12:05,176 --> 00:12:06,856
If you're a software engineer,


395
00:12:07,336 --> 00:12:08,286
you want to keep track of your


396
00:12:08,286 --> 00:12:09,326
dependencies.


397
00:12:09,326 --> 00:12:10,736
What am I allowed to do here?


398
00:12:10,736 --> 00:12:12,306
Who-- what can I load and what


399
00:12:12,346 --> 00:12:13,106
can't I load?


400
00:12:14,586 --> 00:12:16,576
So, this is again an HTTP


401
00:12:16,576 --> 00:12:17,766
response header.


402
00:12:18,116 --> 00:12:19,386
So, when you're sending out a


403
00:12:19,446 --> 00:12:21,636
page from your server, you add


404
00:12:21,726 --> 00:12:23,356
this header to the response,


405
00:12:23,356 --> 00:12:24,936
saying, hey, I'm going to run


406
00:12:24,936 --> 00:12:26,496
with a content security policy.


407
00:12:26,826 --> 00:12:28,376
I'm going to be in control of


408
00:12:28,376 --> 00:12:29,736
the content on my page.


409
00:12:30,626 --> 00:12:32,476
Then you start out by saying the


410
00:12:32,626 --> 00:12:35,286
default source for loading any


411
00:12:35,286 --> 00:12:36,856
kind of content from remote


412
00:12:36,856 --> 00:12:38,956
servers is myself.


413
00:12:39,476 --> 00:12:41,796
Only load from my server by


414
00:12:41,796 --> 00:12:42,306
default.


415
00:12:42,976 --> 00:12:44,466
Now you've locked it down


416
00:12:44,466 --> 00:12:46,866
completely and if there is any


417
00:12:46,866 --> 00:12:48,456
kind of content load in the page


418
00:12:48,456 --> 00:12:49,956
trying to pull something in from


419
00:12:49,956 --> 00:12:51,816
a server that's not yours, it


420
00:12:51,816 --> 00:12:53,576
will just be denied because


421
00:12:53,576 --> 00:12:56,136
WebKit will deny that because it


422
00:12:56,136 --> 00:12:58,146
doesn't match the policy you've


423
00:12:58,146 --> 00:12:58,426
set.


424
00:12:59,716 --> 00:13:00,636
And, as you see, I made a


425
00:13:00,636 --> 00:13:01,206
comment there.


426
00:13:01,206 --> 00:13:02,016
No inline.


427
00:13:02,136 --> 00:13:03,876
That is also part of the default


428
00:13:03,916 --> 00:13:04,526
behavior.


429
00:13:04,776 --> 00:13:06,086
Once you set it this way, you're


430
00:13:06,086 --> 00:13:08,496
also saying no inline scripting.


431
00:13:08,726 --> 00:13:10,726
Only load scripts from files.


432
00:13:11,276 --> 00:13:12,606
That's why I keep thinking of it


433
00:13:12,606 --> 00:13:14,116
as an architecture policy


434
00:13:14,366 --> 00:13:15,976
because you're separating logic


435
00:13:15,976 --> 00:13:17,786
into files, separating from


436
00:13:17,786 --> 00:13:21,246
markup, and separating from


437
00:13:21,316 --> 00:13:23,516
styling, which are also in


438
00:13:23,516 --> 00:13:23,946
files.


439
00:13:24,166 --> 00:13:25,046
CSS files.


440
00:13:26,066 --> 00:13:29,636
OK. Now, you wanted to load that


441
00:13:29,636 --> 00:13:31,686
script from cdn.example and if


442
00:13:31,686 --> 00:13:33,176
you just go with a default


443
00:13:33,176 --> 00:13:35,186
source self, then that's going


444
00:13:35,186 --> 00:13:35,976
to be locked down.


445
00:13:35,976 --> 00:13:37,116
Right? You can't do remote


446
00:13:37,116 --> 00:13:37,776
script loading.


447
00:13:38,126 --> 00:13:39,776
Well, there's a whitelisting


448
00:13:39,776 --> 00:13:41,036
mechanism in the content


449
00:13:41,036 --> 00:13:41,856
security policy.


450
00:13:42,396 --> 00:13:44,356
You just say script source, hey,


451
00:13:44,566 --> 00:13:47,256
let's open up for cdn.example


452
00:13:47,366 --> 00:13:48,566
because I actually want to load


453
00:13:48,566 --> 00:13:49,246
script from there.


454
00:13:49,786 --> 00:13:51,066
Now you can load from your own


455
00:13:51,066 --> 00:13:53,716
server and cdn.example, but


456
00:13:53,716 --> 00:13:54,466
nowhere else.


457
00:13:55,866 --> 00:13:57,206
Well, you might want to have


458
00:13:57,206 --> 00:14:00,326
that social media plugin, little


459
00:14:00,326 --> 00:14:02,006
widget in there in an iframe,


460
00:14:02,406 --> 00:14:04,306
well, you can add a frame source


461
00:14:04,306 --> 00:14:05,956
directive saying I want to be


462
00:14:05,956 --> 00:14:07,366
able to load iframes from


463
00:14:07,366 --> 00:14:10,036
social.example, but no one else


464
00:14:10,036 --> 00:14:11,436
gets to have an iframe on my


465
00:14:11,646 --> 00:14:12,076
page.


466
00:14:12,596 --> 00:14:13,656
Again, you're in control of


467
00:14:13,656 --> 00:14:13,946
that.


468
00:14:14,626 --> 00:14:16,346
And there's even a directive for


469
00:14:16,346 --> 00:14:18,376
the reverse case when your


470
00:14:18,376 --> 00:14:19,946
content is being loaded in an


471
00:14:20,006 --> 00:14:21,856
iframe on someone else's page.


472
00:14:22,316 --> 00:14:24,766
In this example, news.example is


473
00:14:24,766 --> 00:14:26,476
loading your content in an


474
00:14:26,516 --> 00:14:27,066
iframe.


475
00:14:27,516 --> 00:14:29,556
You can send out the directive--


476
00:14:29,556 --> 00:14:30,576
the last directive here in


477
00:14:30,576 --> 00:14:32,656
content security policy frame


478
00:14:32,696 --> 00:14:33,626
ancestors.


479
00:14:34,026 --> 00:14:35,516
This is telling the browser,


480
00:14:35,516 --> 00:14:38,686
hey, check whosever framing me


481
00:14:38,926 --> 00:14:40,666
and all the way up to the top


482
00:14:40,666 --> 00:14:42,726
page and they all have to be on


483
00:14:42,726 --> 00:14:44,666
my list of what I allow.


484
00:14:45,116 --> 00:14:46,806
So, in this case, your web


485
00:14:46,806 --> 00:14:48,926
content has said news.example, I


486
00:14:48,926 --> 00:14:50,346
have a business deal with them,


487
00:14:50,676 --> 00:14:51,816
they're allowed to have my


488
00:14:51,816 --> 00:14:52,926
content in an iframe.


489
00:14:54,126 --> 00:14:55,916
OK. That's quite a lot, so let's


490
00:14:55,916 --> 00:14:58,026
just review this line by line


491
00:14:58,026 --> 00:14:59,556
quickly so we know what it's


492
00:14:59,556 --> 00:14:59,936
saying.


493
00:15:00,396 --> 00:15:02,036
Content security policy, you


494
00:15:02,036 --> 00:15:03,966
start out default source self.


495
00:15:04,296 --> 00:15:05,506
Lock everything down.


496
00:15:05,506 --> 00:15:06,616
Everything that's going to be


497
00:15:06,616 --> 00:15:08,476
loaded with a source attribute,


498
00:15:08,476 --> 00:15:10,586
like loaded from a server, needs


499
00:15:10,586 --> 00:15:12,646
to be from my origin, my domain.


500
00:15:13,476 --> 00:15:14,666
Then you open up.


501
00:15:15,076 --> 00:15:17,346
For script, you add what domain


502
00:15:17,346 --> 00:15:19,716
names do I allow scripts from.


503
00:15:20,786 --> 00:15:23,366
You say where do I allow myself


504
00:15:23,366 --> 00:15:24,746
to load frames from.


505
00:15:25,436 --> 00:15:26,496
You whitelist them.


506
00:15:26,696 --> 00:15:28,526
And, finally, if you're ever


507
00:15:28,526 --> 00:15:30,156
going to be in an iframe


508
00:15:30,156 --> 00:15:32,026
yourself under someone else's


509
00:15:32,026 --> 00:15:33,996
page, you put them in that white


510
00:15:33,996 --> 00:15:35,726
list for frame ancestors.


511
00:15:36,926 --> 00:15:38,446
OK. That's the content security


512
00:15:38,446 --> 00:15:38,986
policy.


513
00:15:39,286 --> 00:15:42,256
It has more knobs to turn and


514
00:15:42,256 --> 00:15:44,276
we'll also see in a couple of


515
00:15:44,276 --> 00:15:46,346
the attack scenarios a few


516
00:15:46,346 --> 00:15:47,646
flavors of these things.


517
00:15:48,986 --> 00:15:49,476
Moving on.


518
00:15:49,716 --> 00:15:50,786
We're going to have a look at


519
00:15:50,846 --> 00:15:51,476
cookies.


520
00:15:51,916 --> 00:15:53,616
Cookies are-- they actually were


521
00:15:53,616 --> 00:15:56,456
called magic cookies in the


522
00:15:56,536 --> 00:15:58,426
beginning of the web, and they


523
00:15:58,426 --> 00:16:00,476
really are magic in that we use


524
00:16:00,476 --> 00:16:01,666
them for so many things.


525
00:16:02,286 --> 00:16:03,746
And perhaps the most sensitive


526
00:16:03,746 --> 00:16:05,636
thing is they authenticate


527
00:16:05,636 --> 00:16:06,126
users.


528
00:16:06,126 --> 00:16:08,196
Once you have logged in with


529
00:16:08,196 --> 00:16:09,266
your credentials, you get a


530
00:16:09,266 --> 00:16:11,296
cookie that holds your session


531
00:16:11,666 --> 00:16:13,806
and that cookie, if it's moved


532
00:16:13,806 --> 00:16:15,476
or its stolen and moved to


533
00:16:15,476 --> 00:16:17,366
another browser engine in many


534
00:16:17,366 --> 00:16:19,446
cases can impersonate that user.


535
00:16:19,886 --> 00:16:21,096
So, you really need to protect


536
00:16:21,096 --> 00:16:21,636
your cookies.


537
00:16:22,156 --> 00:16:23,686
As I already mentioned, you


538
00:16:23,686 --> 00:16:25,376
should mark them all secure so


539
00:16:25,376 --> 00:16:26,796
that they never leak in plain


540
00:16:26,796 --> 00:16:27,706
text requests.


541
00:16:28,216 --> 00:16:29,396
But there are more things to do,


542
00:16:29,396 --> 00:16:29,636
right?


543
00:16:30,576 --> 00:16:33,776
So, looking at Http Only


544
00:16:33,776 --> 00:16:34,436
cookies.


545
00:16:34,706 --> 00:16:36,736
This is fairly old technology.


546
00:16:37,316 --> 00:16:38,936
I would guess this has been


547
00:16:38,936 --> 00:16:40,466
around for at least 15 years,


548
00:16:40,466 --> 00:16:42,496
the ability to say HTTP only.


549
00:16:42,696 --> 00:16:45,376
You might be familiar with the


550
00:16:45,376 --> 00:16:47,236
web API document.cookie.


551
00:16:47,876 --> 00:16:50,146
This is a way for JavaScript to


552
00:16:50,496 --> 00:16:51,826
read and write cookies.


553
00:16:53,016 --> 00:16:55,206
JavaScript is powerful.


554
00:16:55,336 --> 00:16:56,606
And, as I mentioned, if you load


555
00:16:56,606 --> 00:16:57,976
JavaScript from other servers,


556
00:16:58,026 --> 00:16:59,896
they have access to all of your


557
00:16:59,896 --> 00:17:01,886
user's cookies through this API.


558
00:17:03,316 --> 00:17:05,106
You should not be offering them


559
00:17:05,106 --> 00:17:06,136
that much power.


560
00:17:06,246 --> 00:17:07,496
Instead, you should protect your


561
00:17:07,496 --> 00:17:08,816
cookies, especially your


562
00:17:08,816 --> 00:17:10,746
authentication cookies that are


563
00:17:10,746 --> 00:17:12,736
effectively a way to log in as a


564
00:17:12,736 --> 00:17:15,636
user by marking them Http Only.


565
00:17:16,455 --> 00:17:18,526
This means that-- this cookie--


566
00:17:18,526 --> 00:17:19,796
and this is the set cookie


567
00:17:19,796 --> 00:17:21,036
header you are seeing here where


568
00:17:21,036 --> 00:17:23,236
we are sending HTTP only, which


569
00:17:23,236 --> 00:17:25,256
means don't expose this cookie


570
00:17:25,506 --> 00:17:26,986
in the document.cookie API.


571
00:17:27,836 --> 00:17:30,136
So, JavaScript can now not see


572
00:17:30,136 --> 00:17:31,876
this cookie and of course not


573
00:17:31,936 --> 00:17:33,486
fiddle with it, steal it, or


574
00:17:33,486 --> 00:17:34,316
manipulate it.


575
00:17:34,936 --> 00:17:36,126
So, this is something you should


576
00:17:36,756 --> 00:17:38,016
be doing.


577
00:17:38,186 --> 00:17:40,376
We also have another thing, new


578
00:17:40,376 --> 00:17:42,086
technology as of the betas,


579
00:17:42,416 --> 00:17:43,766
SameSite cookies.


580
00:17:44,496 --> 00:17:45,916
Again, you are setting this on


581
00:17:45,916 --> 00:17:47,486
the set cookie header that you--


582
00:17:47,486 --> 00:17:49,096
when you're setting the cookie


583
00:17:49,096 --> 00:17:49,696
in the browser.


584
00:17:50,406 --> 00:17:52,216
See here I've got the same site


585
00:17:52,216 --> 00:17:54,076
attribute equals strict.


586
00:17:54,656 --> 00:17:56,356
There's also a lax version of


587
00:17:56,356 --> 00:17:58,596
this, but what this is basically


588
00:17:58,596 --> 00:18:00,436
saying is this particular


589
00:18:00,436 --> 00:18:02,976
cookie, only send it when I am


590
00:18:02,976 --> 00:18:04,446
the page owner, when I am the


591
00:18:04,446 --> 00:18:06,436
main page, not when I'm


592
00:18:06,436 --> 00:18:06,946
embedded.


593
00:18:07,406 --> 00:18:08,946
When I own the whole user


594
00:18:08,946 --> 00:18:10,906
experience, I have the whole web


595
00:18:10,906 --> 00:18:12,816
view, then send this cookie.


596
00:18:13,836 --> 00:18:16,606
So, in the embedded case, if


597
00:18:16,606 --> 00:18:18,016
your web content is being


598
00:18:18,016 --> 00:18:19,386
embedded by someone you don't


599
00:18:19,386 --> 00:18:21,726
trust, the SameSite cookie will


600
00:18:21,726 --> 00:18:24,266
not be sent and your server can


601
00:18:24,266 --> 00:18:24,946
detect this.


602
00:18:25,036 --> 00:18:27,516
Aha! I didn't get that SameSite


603
00:18:27,516 --> 00:18:29,576
cookie, so either this user is


604
00:18:29,576 --> 00:18:31,086
not logged in or I'm being


605
00:18:31,086 --> 00:18:32,796
embedded and I'm not going to


606
00:18:32,796 --> 00:18:34,866
allow this thing to happen were


607
00:18:34,866 --> 00:18:36,356
that, for instance, a sensitive


608
00:18:36,356 --> 00:18:36,966
transaction.


609
00:18:37,886 --> 00:18:40,376
So, that's getting in control of


610
00:18:40,376 --> 00:18:41,076
being embedded.


611
00:18:41,276 --> 00:18:42,826
SameSite cookies.


612
00:18:43,696 --> 00:18:46,336
OK. Cross-origin lockdown.


613
00:18:46,436 --> 00:18:47,206
We're now going to look at


614
00:18:47,406 --> 00:18:49,446
really brand new technology.


615
00:18:49,796 --> 00:18:51,706
WebKit is first implementing


616
00:18:51,706 --> 00:18:53,726
these two new response headers


617
00:18:54,236 --> 00:18:55,736
and they're all about


618
00:18:55,736 --> 00:18:57,376
restricting who gets to load


619
00:18:57,376 --> 00:18:58,296
your resources.


620
00:18:58,716 --> 00:19:00,686
Cross-origin resource policy.


621
00:19:02,306 --> 00:19:03,366
We've already mentioned these


622
00:19:03,426 --> 00:19:05,446
two types of content that are


623
00:19:05,446 --> 00:19:06,506
allowed to be loaded


624
00:19:06,506 --> 00:19:08,496
cross-origin, images, and


625
00:19:08,496 --> 00:19:09,016
scripts.


626
00:19:09,696 --> 00:19:11,006
And they've been around since


627
00:19:11,076 --> 00:19:13,006
the origins of the web and


628
00:19:13,006 --> 00:19:14,206
therefore there has never really


629
00:19:14,206 --> 00:19:17,046
been a mechanism to say, hey, I


630
00:19:17,046 --> 00:19:18,586
actually don't want any other


631
00:19:18,586 --> 00:19:20,796
sites to load my scripts or load


632
00:19:20,796 --> 00:19:21,506
my images.


633
00:19:22,396 --> 00:19:24,206
Could I just only load them


634
00:19:24,206 --> 00:19:24,966
myself please?


635
00:19:25,806 --> 00:19:27,106
No, we've had this thing on the


636
00:19:27,106 --> 00:19:28,936
web where anyone can load images


637
00:19:28,936 --> 00:19:30,166
and scripts from any server.


638
00:19:31,236 --> 00:19:33,146
And now we're providing you with


639
00:19:33,146 --> 00:19:35,206
a control to tell the browser,


640
00:19:35,206 --> 00:19:36,326
hey, I don't want that.


641
00:19:36,496 --> 00:19:38,376
And it's called the cross-origin


642
00:19:38,376 --> 00:19:39,276
resource policy.


643
00:19:39,966 --> 00:19:41,576
In this particular example here,


644
00:19:41,626 --> 00:19:43,006
I'm giving it the directive


645
00:19:43,236 --> 00:19:46,446
same, meaning only my own site


646
00:19:46,966 --> 00:19:47,646
can load this.


647
00:19:47,646 --> 00:19:49,856
Only when my domain name is the


648
00:19:49,856 --> 00:19:52,446
main page domain and I'm pulling


649
00:19:52,446 --> 00:19:54,386
in this image, then load the


650
00:19:54,386 --> 00:19:55,726
image into the web content


651
00:19:55,726 --> 00:19:56,136
process.


652
00:19:56,426 --> 00:19:57,616
Same thing for script here.


653
00:19:58,106 --> 00:19:59,776
So, when someone else comes


654
00:19:59,776 --> 00:20:01,666
along and tries to cross-origin


655
00:20:01,666 --> 00:20:03,566
load your image or your script


656
00:20:04,006 --> 00:20:05,346
and you're sending this response


657
00:20:05,346 --> 00:20:07,426
header, those things won't be


658
00:20:07,426 --> 00:20:07,776
loaded.


659
00:20:09,346 --> 00:20:10,426
So, that puts you in control.


660
00:20:10,636 --> 00:20:11,716
And this is new technology.


661
00:20:12,786 --> 00:20:14,596
Finally, in the cross-origin


662
00:20:14,596 --> 00:20:15,736
lockdown, we've got the


663
00:20:15,736 --> 00:20:18,046
cross-origin window policy.


664
00:20:18,566 --> 00:20:19,696
Now we're really getting into


665
00:20:19,696 --> 00:20:21,726
the weeds of old web APIs.


666
00:20:22,226 --> 00:20:24,426
You might be familiar with the


667
00:20:24,456 --> 00:20:27,206
ability to open someone else's


668
00:20:27,236 --> 00:20:28,626
page-- or for that matter your


669
00:20:28,626 --> 00:20:30,246
own page-- in a new window.


670
00:20:31,116 --> 00:20:32,736
Not like a regular link


671
00:20:32,736 --> 00:20:34,536
navigation you click and you may


672
00:20:34,536 --> 00:20:36,696
open a new tab or navigate in


673
00:20:36,696 --> 00:20:38,106
the same tab, instead you're


674
00:20:38,196 --> 00:20:39,826
opening a full-on new window.


675
00:20:40,746 --> 00:20:42,356
Back in the days, we even saw


676
00:20:42,356 --> 00:20:44,916
this in a form of ugly pop-overs


677
00:20:44,916 --> 00:20:46,866
or pop-ups and those kind of


678
00:20:46,866 --> 00:20:49,896
things, but it's the old API


679
00:20:50,086 --> 00:20:51,016
window.open.


680
00:20:51,616 --> 00:20:53,076
And it has some weird things


681
00:20:53,076 --> 00:20:53,636
going on.


682
00:20:54,776 --> 00:20:56,936
So, if your content is opened by


683
00:20:56,936 --> 00:21:00,016
someone else, it looks to you as


684
00:21:00,016 --> 00:21:01,606
if, whoa, the user just went to


685
00:21:01,606 --> 00:21:03,326
my site, I got my SameSite


686
00:21:03,326 --> 00:21:04,936
cookie, everything looks fine,


687
00:21:05,606 --> 00:21:07,676
but the opener maintains a


688
00:21:07,676 --> 00:21:10,226
handle and kind of owns your


689
00:21:10,226 --> 00:21:13,176
window and has certain APIs to


690
00:21:13,176 --> 00:21:15,356
control that window that the


691
00:21:15,356 --> 00:21:16,996
opener can even navigate your


692
00:21:16,996 --> 00:21:18,736
window outside of your control.


693
00:21:20,036 --> 00:21:22,346
And with the new response header


694
00:21:22,346 --> 00:21:24,356
cross-origin window policy, you


695
00:21:24,356 --> 00:21:27,076
finally get to say no to this.


696
00:21:27,576 --> 00:21:30,326
Most sites are not in the


697
00:21:30,326 --> 00:21:32,136
practice of using this API and


698
00:21:32,136 --> 00:21:33,446
this kind of communication where


699
00:21:33,446 --> 00:21:35,076
the opener owns the window.


700
00:21:35,076 --> 00:21:36,766
Like, it's a very rare thing to


701
00:21:36,766 --> 00:21:38,926
see on the web, but it's there


702
00:21:38,926 --> 00:21:39,986
and it works that way by


703
00:21:39,986 --> 00:21:40,426
default.


704
00:21:40,886 --> 00:21:42,496
By sending this header, in this


705
00:21:42,496 --> 00:21:44,966
case deny, you're saying that


706
00:21:44,966 --> 00:21:47,076
handle should not be there.


707
00:21:47,766 --> 00:21:49,436
It's OK to open me, but you


708
00:21:49,436 --> 00:21:50,736
don't get to control me from


709
00:21:50,736 --> 00:21:51,186
that point.


710
00:21:51,986 --> 00:21:54,166
There is also a way added in


711
00:21:54,166 --> 00:21:55,466
this-- I'm not showing it here--


712
00:21:55,466 --> 00:21:57,066
but you can say allow post


713
00:21:57,066 --> 00:21:57,616
message.


714
00:21:58,016 --> 00:21:59,036
You might want to be able to


715
00:21:59,106 --> 00:22:00,826
talk between these two windows


716
00:22:01,086 --> 00:22:02,466
without giving the opener


717
00:22:02,466 --> 00:22:04,566
control of your window and then


718
00:22:04,566 --> 00:22:06,156
you can say allow post message.


719
00:22:07,206 --> 00:22:08,896
OK. That's also new technology


720
00:22:08,896 --> 00:22:10,126
and now we've gone through the


721
00:22:10,126 --> 00:22:11,416
cross-origin lockdown.


722
00:22:12,336 --> 00:22:15,516
As you can see, that's not too


723
00:22:15,516 --> 00:22:15,946
hard.


724
00:22:15,946 --> 00:22:18,326
It's a set of response headers.


725
00:22:18,326 --> 00:22:19,836
It's the content security policy


726
00:22:19,836 --> 00:22:22,096
where you whitelist things, and


727
00:22:22,096 --> 00:22:24,066
it's the integrity attribute for


728
00:22:24,066 --> 00:22:26,126
script tags that's more or less


729
00:22:26,126 --> 00:22:27,116
what we're talking about here.


730
00:22:27,666 --> 00:22:28,926
I'll give you some motivation.


731
00:22:29,136 --> 00:22:29,926
We're going to look at some


732
00:22:29,926 --> 00:22:30,976
attack scenarios.


733
00:22:30,976 --> 00:22:32,806
What are you defending against


734
00:22:32,806 --> 00:22:34,666
and how to these security


735
00:22:34,666 --> 00:22:36,696
technologies fit in with these


736
00:22:36,696 --> 00:22:37,256
attacks?


737
00:22:37,256 --> 00:22:38,286
We're going to look at


738
00:22:38,286 --> 00:22:39,406
cross-origin attacks,


739
00:22:39,546 --> 00:22:41,396
speculative execution attacks--


740
00:22:41,666 --> 00:22:43,586
some people may have heard about


741
00:22:43,586 --> 00:22:45,046
Spectre-- and we're going to


742
00:22:45,046 --> 00:22:46,596
look at window control attacks.


743
00:22:47,136 --> 00:22:48,756
Let's dive into the cross-origin


744
00:22:48,756 --> 00:22:49,086
ones.


745
00:22:50,066 --> 00:22:51,046
We're going to talk about


746
00:22:51,046 --> 00:22:52,596
cross-site scripting, when


747
00:22:52,596 --> 00:22:53,566
something goes bad with your


748
00:22:53,666 --> 00:22:53,936
CDN.


749
00:22:53,936 --> 00:22:55,586
And that one you kind of could


750
00:22:55,696 --> 00:22:56,756
tell that I was going for,


751
00:22:56,756 --> 00:22:56,986
right?


752
00:22:57,486 --> 00:22:58,576
And cross-site request


753
00:22:58,576 --> 00:22:59,146
forgeries.


754
00:23:00,676 --> 00:23:01,576
Cross-site scripting.


755
00:23:01,806 --> 00:23:02,906
Imagine you have built a


756
00:23:02,906 --> 00:23:03,876
messaging app.


757
00:23:04,306 --> 00:23:06,346
You have it as a native app with


758
00:23:06,346 --> 00:23:08,066
a web view for rich formatting,


759
00:23:08,066 --> 00:23:09,706
for instance, and you may have a


760
00:23:09,706 --> 00:23:11,646
companion web app that one can


761
00:23:11,646 --> 00:23:13,346
go or your users can go to in a


762
00:23:13,346 --> 00:23:15,216
regular web browser, and you can


763
00:23:15,216 --> 00:23:16,906
send messages to each other and


764
00:23:16,906 --> 00:23:18,676
maybe with very rich formatting.


765
00:23:19,356 --> 00:23:20,756
Most of your users are, of


766
00:23:20,756 --> 00:23:21,956
course, nice.


767
00:23:22,176 --> 00:23:23,676
Nice people sending each other


768
00:23:23,676 --> 00:23:24,476
nice messages.


769
00:23:24,926 --> 00:23:26,256
Some of them are angry sending


770
00:23:26,256 --> 00:23:28,206
angry messages, but every now


771
00:23:28,206 --> 00:23:29,996
and then comes along a malicious


772
00:23:29,996 --> 00:23:32,166
user who might send a message


773
00:23:32,166 --> 00:23:33,076
looking like this.


774
00:23:34,106 --> 00:23:36,066
It starts out nice, hello, but


775
00:23:36,286 --> 00:23:37,586
then it contains markup.


776
00:23:38,396 --> 00:23:40,476
Now, if you have made a mistake


777
00:23:40,476 --> 00:23:42,226
somewhere in the chain, in the


778
00:23:42,226 --> 00:23:43,936
native apps web view or on the


779
00:23:43,936 --> 00:23:46,626
website, where this will


780
00:23:46,626 --> 00:23:48,336
actually be interpreted as real


781
00:23:48,336 --> 00:23:50,076
markup instead of a message,


782
00:23:50,556 --> 00:23:52,766
suddenly the attacker, the


783
00:23:52,766 --> 00:23:54,436
malicious user here, is able to


784
00:23:54,556 --> 00:23:57,976
run scripts in the recipient's


785
00:23:58,266 --> 00:23:59,036
browser engine.


786
00:23:59,836 --> 00:24:01,136
In this case, trying to steal


787
00:24:01,136 --> 00:24:02,326
the cookies of that user.


788
00:24:02,776 --> 00:24:04,376
But remember, the scripts are


789
00:24:04,376 --> 00:24:05,726
running with full power.


790
00:24:05,726 --> 00:24:07,586
They can take over your whole


791
00:24:07,716 --> 00:24:09,536
UI, make requests on your-- on


792
00:24:09,536 --> 00:24:10,916
the victim user's behalf.


793
00:24:11,916 --> 00:24:13,366
Cross-site scripting, which this


794
00:24:13,366 --> 00:24:15,116
is an example of, is a bad


795
00:24:15,196 --> 00:24:15,506
thing.


796
00:24:15,506 --> 00:24:16,646
You don't want it to happen to


797
00:24:16,646 --> 00:24:16,836
you.


798
00:24:17,846 --> 00:24:19,976
Luckily, you have marked your


799
00:24:19,976 --> 00:24:21,856
authentication cookies Http


800
00:24:21,856 --> 00:24:22,616
Only, right?


801
00:24:22,976 --> 00:24:25,626
So, ha, they're not available to


802
00:24:25,626 --> 00:24:26,546
that malicious script.


803
00:24:27,466 --> 00:24:29,306
Now, Http Only cookies don't


804
00:24:29,306 --> 00:24:30,796
protect you against cross-site


805
00:24:30,796 --> 00:24:31,256
scripting.


806
00:24:31,566 --> 00:24:32,626
That script is still running.


807
00:24:33,376 --> 00:24:35,886
Http Only cookies protect your


808
00:24:35,886 --> 00:24:36,226
cookies.


809
00:24:37,196 --> 00:24:38,216
So, you need to do something


810
00:24:38,216 --> 00:24:39,926
more and what did you do?


811
00:24:40,686 --> 00:24:41,926
Content security policy.


812
00:24:42,656 --> 00:24:44,626
You started out with default


813
00:24:44,626 --> 00:24:45,696
source self, right?


814
00:24:46,036 --> 00:24:48,566
Saying, eh, only I get to run


815
00:24:48,566 --> 00:24:49,986
script on my page please.


816
00:24:50,716 --> 00:24:52,726
And that means by default no


817
00:24:52,726 --> 00:24:55,416
inline scripting and that whole


818
00:24:55,416 --> 00:24:57,466
class of bugs just goes away.


819
00:24:58,956 --> 00:25:00,966
Now there is no way to inject


820
00:25:00,966 --> 00:25:03,006
script into your web pages and


821
00:25:03,006 --> 00:25:04,796
make them execute because you


822
00:25:04,796 --> 00:25:06,326
set the policy for the page.


823
00:25:08,326 --> 00:25:10,946
OK. What could happen if your


824
00:25:10,946 --> 00:25:12,096
CDN gets compromised?


825
00:25:12,526 --> 00:25:14,186
This is bad and let's just hope


826
00:25:14,186 --> 00:25:15,986
it doesn't happen, but it can


827
00:25:16,796 --> 00:25:17,266
happen.


828
00:25:17,816 --> 00:25:19,216
So, you're loading the framework


829
00:25:19,216 --> 00:25:22,486
off of that CDN and you really


830
00:25:22,486 --> 00:25:24,056
rely on this because it's


831
00:25:24,056 --> 00:25:25,406
executing with the same powers


832
00:25:25,406 --> 00:25:26,516
as your own scripts.


833
00:25:28,136 --> 00:25:30,016
Now, what if they've been


834
00:25:30,016 --> 00:25:31,656
compromised and are redirecting


835
00:25:31,656 --> 00:25:33,416
that script request to


836
00:25:33,456 --> 00:25:35,286
evil.example, loading attack


837
00:25:35,366 --> 00:25:35,666
code.


838
00:25:36,526 --> 00:25:38,126
Now suddenly you thought you got


839
00:25:38,126 --> 00:25:40,146
a framework-- maybe they were


840
00:25:40,146 --> 00:25:41,406
nice enough to bundle in the


841
00:25:41,406 --> 00:25:42,846
framework, but they're also


842
00:25:42,846 --> 00:25:44,156
doing some nasty things.


843
00:25:44,866 --> 00:25:46,836
So, what did you do?


844
00:25:47,546 --> 00:25:49,426
Well, you whitelisted script


845
00:25:49,426 --> 00:25:50,966
source in your content security


846
00:25:50,966 --> 00:25:53,626
policy, so the browser will just


847
00:25:53,626 --> 00:25:55,396
refuse to execute any code


848
00:25:55,396 --> 00:25:56,736
coming from evil.example.


849
00:25:58,246 --> 00:26:01,026
OK. Oh, now the attacker needs


850
00:26:01,026 --> 00:26:02,586
to be a little bit more sneaky.


851
00:26:03,426 --> 00:26:05,066
He or she is probably going to


852
00:26:05,126 --> 00:26:07,306
change the script on the CDN


853
00:26:07,306 --> 00:26:08,796
server instead of redirecting it


854
00:26:08,936 --> 00:26:10,666
to the evil.example server.


855
00:26:11,206 --> 00:26:12,626
So-- and it's on your white


856
00:26:12,626 --> 00:26:14,046
list, so you're going to load


857
00:26:14,046 --> 00:26:15,036
and execute that script.


858
00:26:16,056 --> 00:26:19,256
But, you've got subresource


859
00:26:19,256 --> 00:26:20,566
integrity to save you.


860
00:26:21,206 --> 00:26:22,576
You are in control of the


861
00:26:22,576 --> 00:26:24,356
integrity of that script coming


862
00:26:24,356 --> 00:26:26,126
from a server that you don't own


863
00:26:26,806 --> 00:26:28,096
and if it doesn't match the


864
00:26:28,196 --> 00:26:29,566
check sum, you're going to load


865
00:26:29,566 --> 00:26:30,756
it off of your own server


866
00:26:30,756 --> 00:26:31,206
instead.


867
00:26:32,186 --> 00:26:33,926
So, that attack is also foiled.


868
00:26:35,746 --> 00:26:37,566
OK. That's compromised CDN.


869
00:26:37,756 --> 00:26:39,686
Final of the cross-origin


870
00:26:39,686 --> 00:26:41,986
attack, the cross-site request


871
00:26:41,986 --> 00:26:42,736
forgeries.


872
00:26:43,316 --> 00:26:45,336
This really ties into the last


873
00:26:45,336 --> 00:26:46,206
word, forgeries.


874
00:26:46,206 --> 00:26:48,926
These are-- this is the attacker


875
00:26:48,926 --> 00:26:50,936
trying to forge a request to


876
00:26:50,936 --> 00:26:52,906
look like something one of your


877
00:26:52,906 --> 00:26:55,156
users is trying to do, where


878
00:26:55,156 --> 00:26:58,046
they're actually not.


879
00:26:59,156 --> 00:27:00,786
So, we're back at the messaging


880
00:27:01,866 --> 00:27:04,106
app and you have this forum


881
00:27:04,106 --> 00:27:05,586
where the user is supposed to be


882
00:27:05,586 --> 00:27:06,596
able to send messages.


883
00:27:06,596 --> 00:27:08,446
And, frankly, when it comes down


884
00:27:08,446 --> 00:27:09,916
to it, it's going to be HTTP


885
00:27:09,916 --> 00:27:10,476
requests.


886
00:27:10,746 --> 00:27:12,956
Probably in HTTP post when that


887
00:27:12,956 --> 00:27:14,236
message comes into the server


888
00:27:14,236 --> 00:27:15,276
and look at the cookies,


889
00:27:15,276 --> 00:27:16,946
everything looks good, and then


890
00:27:16,946 --> 00:27:18,766
you'll send that message off to


891
00:27:18,766 --> 00:27:19,776
its recipient, right?


892
00:27:20,666 --> 00:27:21,956
Well, now comes along the


893
00:27:21,956 --> 00:27:24,536
malicious attacker that of


894
00:27:24,586 --> 00:27:26,756
course has phished one of your


895
00:27:26,946 --> 00:27:29,866
users, meaning sent a link and


896
00:27:29,866 --> 00:27:31,726
lured that user onto the


897
00:27:31,726 --> 00:27:33,876
attacker's site, evil.example,


898
00:27:34,526 --> 00:27:36,466
and is showing some really,


899
00:27:36,466 --> 00:27:38,006
really fascinating stats on


900
00:27:38,006 --> 00:27:38,586
cats.


901
00:27:39,336 --> 00:27:41,176
That makes the victim stay


902
00:27:41,176 --> 00:27:42,336
around for a little while at


903
00:27:42,336 --> 00:27:42,566
least.


904
00:27:42,566 --> 00:27:43,676
I mean you've got to check these


905
00:27:43,676 --> 00:27:44,326
stats out.


906
00:27:45,286 --> 00:27:47,176
What the victim user doesn't


907
00:27:47,176 --> 00:27:49,326
realize is that there's a hidden


908
00:27:49,486 --> 00:27:51,966
resource load with your web


909
00:27:51,966 --> 00:27:55,156
content sending a message on the


910
00:27:55,156 --> 00:27:57,576
victim user's behalf-- which of


911
00:27:57,636 --> 00:27:59,226
course automatically adds the


912
00:27:59,226 --> 00:28:01,036
cookies, that's just how the web


913
00:28:01,036 --> 00:28:01,556
works, right?


914
00:28:01,556 --> 00:28:02,796
If a request goes out on the


915
00:28:02,796 --> 00:28:04,866
wire, cookies are added, and to


916
00:28:04,866 --> 00:28:07,086
your servers this looks like I


917
00:28:07,086 --> 00:28:08,416
guess this user wants to send


918
00:28:08,466 --> 00:28:09,216
this message.


919
00:28:10,096 --> 00:28:11,916
That could be spam, that could


920
00:28:11,916 --> 00:28:13,816
be sending links for malicious


921
00:28:14,116 --> 00:28:14,796
software.


922
00:28:15,206 --> 00:28:16,626
It could be breaking up with a


923
00:28:16,626 --> 00:28:18,986
partner-- ah, OK, they won't go


924
00:28:18,986 --> 00:28:20,526
that far, but malicious


925
00:28:20,526 --> 00:28:21,606
software, we'll stay there.


926
00:28:22,296 --> 00:28:25,176
So, you don't want this to


927
00:28:25,176 --> 00:28:25,726
happen.


928
00:28:25,936 --> 00:28:30,086
Luckily, you have used same-site


929
00:28:30,146 --> 00:28:30,726
cookies.


930
00:28:31,376 --> 00:28:33,006
They will not be sent in the


931
00:28:33,006 --> 00:28:34,996
embedded case, which means that


932
00:28:34,996 --> 00:28:37,756
your server will detect I'm


933
00:28:37,756 --> 00:28:39,516
being embedded here.


934
00:28:39,826 --> 00:28:42,016
I don't allow the user to send


935
00:28:42,016 --> 00:28:44,246
messages from an iframe under


936
00:28:44,246 --> 00:28:45,256
some other page.


937
00:28:45,626 --> 00:28:47,656
I need to own the UI when I do


938
00:28:47,656 --> 00:28:49,276
this sensitive thing, such as


939
00:28:49,276 --> 00:28:51,146
sending messages, I'm just going


940
00:28:51,146 --> 00:28:52,146
to deny this request.


941
00:28:53,086 --> 00:28:54,096
This, again, puts you in


942
00:28:54,096 --> 00:28:54,496
control.


943
00:28:56,316 --> 00:28:58,326
OK. We have now covered


944
00:28:58,326 --> 00:28:59,956
cross-origin attacks and looked


945
00:28:59,956 --> 00:29:01,446
at how some of those security


946
00:29:01,446 --> 00:29:02,636
mechanisms help us.


947
00:29:03,026 --> 00:29:04,046
We're going to move on to


948
00:29:04,046 --> 00:29:06,166
something that's really exotic


949
00:29:06,386 --> 00:29:08,846
and new; Spectre attacks or


950
00:29:08,846 --> 00:29:10,956
speculative execution attacks.


951
00:29:11,606 --> 00:29:16,776
What I'm going to cover here is


952
00:29:16,946 --> 00:29:18,476
what speculative execution is,


953
00:29:19,186 --> 00:29:20,846
how it can be turned into an


954
00:29:20,846 --> 00:29:22,336
attack, and then we'll look at


955
00:29:22,336 --> 00:29:24,636
how to defend against it.


956
00:29:25,316 --> 00:29:27,486
So, now we're deep down in a


957
00:29:27,676 --> 00:29:28,436
CPU.


958
00:29:28,566 --> 00:29:31,246
It's executing code.


959
00:29:31,646 --> 00:29:33,726
It has reached a conditional.


960
00:29:34,276 --> 00:29:35,786
It's going to do something


961
00:29:35,786 --> 00:29:36,476
conditionally.


962
00:29:36,916 --> 00:29:38,756
It's asking itself, hey, I've


963
00:29:38,756 --> 00:29:40,856
got an array index here, x.


964
00:29:41,326 --> 00:29:42,806
Is this index OK?


965
00:29:43,226 --> 00:29:45,096
Is this in bounds or out of


966
00:29:45,096 --> 00:29:46,516
bounds for my array read?


967
00:29:47,416 --> 00:29:50,046
Because if it's out of bounds, I


968
00:29:50,046 --> 00:29:51,516
should do some error handling


969
00:29:51,516 --> 00:29:53,446
here, but if it's in bound I


970
00:29:53,446 --> 00:29:54,906
should go ahead and load that


971
00:29:54,906 --> 00:29:55,756
data in the array.


972
00:29:57,036 --> 00:30:00,326
Now, modern CPUs learn over time


973
00:30:00,326 --> 00:30:02,156
if they see the same code path


974
00:30:02,156 --> 00:30:05,346
over and over again that, hey, x


975
00:30:05,346 --> 00:30:06,696
is always in bound.


976
00:30:07,356 --> 00:30:09,126
It's always OK to load this


977
00:30:09,126 --> 00:30:09,496
array.


978
00:30:10,406 --> 00:30:11,586
Why don't I go ahead and


979
00:30:11,586 --> 00:30:14,516
speculatively do that, before I


980
00:30:14,516 --> 00:30:15,986
know whether it's OK or not?


981
00:30:16,686 --> 00:30:17,816
And this is how it works.


982
00:30:18,356 --> 00:30:20,496
It does this code-- takes this


983
00:30:20,496 --> 00:30:22,946
code path speculatively, loads


984
00:30:22,946 --> 00:30:25,066
that data, and then when the


985
00:30:25,066 --> 00:30:26,676
final answer comes in, in this


986
00:30:26,676 --> 00:30:28,896
case, oops, no, this is one of


987
00:30:28,896 --> 00:30:30,536
the rare cases where x was not


988
00:30:30,536 --> 00:30:31,606
OK, you shouldn't have been


989
00:30:31,606 --> 00:30:33,886
loading that data, it backs it


990
00:30:33,886 --> 00:30:36,906
out and takes the right code


991
00:30:37,756 --> 00:30:37,896
path.


992
00:30:38,066 --> 00:30:39,116
How is this OK?


993
00:30:39,466 --> 00:30:41,116
Well, it's OK because the


994
00:30:41,116 --> 00:30:42,626
speculative path is not


995
00:30:42,676 --> 00:30:43,056
committed.


996
00:30:43,056 --> 00:30:45,566
It is only done in advance so


997
00:30:45,566 --> 00:30:46,806
that we can take advantage of,


998
00:30:46,806 --> 00:30:48,896
oh, I'm already done with all of


999
00:30:48,896 --> 00:30:50,786
that work when the final answer


1000
00:30:50,786 --> 00:30:52,086
to the original question comes


1001
00:30:52,086 --> 00:30:52,226
in.


1002
00:30:52,796 --> 00:30:53,866
And that's speculative


1003
00:30:53,866 --> 00:30:54,546
execution.


1004
00:30:55,626 --> 00:30:57,186
How can this be turned into an


1005
00:30:57,186 --> 00:30:57,666
attack?


1006
00:30:58,056 --> 00:31:00,876
It turns out that cache effects


1007
00:31:01,056 --> 00:31:02,496
that are a result of the


1008
00:31:02,496 --> 00:31:04,936
speculative execution can be


1009
00:31:04,936 --> 00:31:07,756
monitored by malicious code and


1010
00:31:07,756 --> 00:31:10,036
then they can leak that data


1011
00:31:10,036 --> 00:31:11,996
read that was never supposed to


1012
00:31:11,996 --> 00:31:12,416
happen.


1013
00:31:13,026 --> 00:31:14,606
It was out of bounds, that load


1014
00:31:14,606 --> 00:31:16,456
should have not happened, but it


1015
00:31:16,456 --> 00:31:18,996
effects caches and by measuring


1016
00:31:18,996 --> 00:31:21,116
caches the-- an attacker can


1017
00:31:21,116 --> 00:31:22,826
leak that data that was not


1018
00:31:22,826 --> 00:31:23,866
supposed to be loaded.


1019
00:31:25,086 --> 00:31:26,806
OK. How does this map to web


1020
00:31:26,876 --> 00:31:27,396
content?


1021
00:31:28,046 --> 00:31:29,986
Remember the same-origin policy?


1022
00:31:30,476 --> 00:31:31,636
This thing that has been


1023
00:31:31,636 --> 00:31:34,476
protecting us for 20 years that


1024
00:31:34,476 --> 00:31:36,676
makes sure that the main frame


1025
00:31:36,676 --> 00:31:37,996
from one origin cannot reach


1026
00:31:38,026 --> 00:31:39,756
into and read the bytes of some


1027
00:31:39,756 --> 00:31:41,496
other frame, maybe your embedded


1028
00:31:41,496 --> 00:31:41,916
content.


1029
00:31:43,206 --> 00:31:44,496
With speculative execution


1030
00:31:44,496 --> 00:31:46,416
attacks, we can no longer rely


1031
00:31:46,416 --> 00:31:47,656
on the same-origin policy.


1032
00:31:48,766 --> 00:31:50,196
There is now an ability-- if you


1033
00:31:50,196 --> 00:31:51,576
can run scripts and you're in


1034
00:31:51,576 --> 00:31:53,696
the same process, the same web


1035
00:31:53,696 --> 00:31:55,676
content process as some other


1036
00:31:55,676 --> 00:31:57,916
content, you can read that


1037
00:31:57,916 --> 00:31:59,336
content through speculative


1038
00:31:59,336 --> 00:32:00,276
execution attacks.


1039
00:32:01,556 --> 00:32:03,726
OK. This is a big challenge for


1040
00:32:03,726 --> 00:32:04,406
the web.


1041
00:32:04,696 --> 00:32:05,866
I can tell you, I've been


1042
00:32:05,866 --> 00:32:07,026
sitting in meetings with the


1043
00:32:07,026 --> 00:32:08,086
other browser vendors.


1044
00:32:08,186 --> 00:32:10,676
We are working super hard to try


1045
00:32:10,676 --> 00:32:12,776
to fix this by default for the


1046
00:32:12,776 --> 00:32:15,076
web, but we need your help.


1047
00:32:15,796 --> 00:32:17,786
If you can opt into a bunch of


1048
00:32:17,826 --> 00:32:19,146
things-- we've already looked at


1049
00:32:19,256 --> 00:32:20,666
the defense mechanisms, right?


1050
00:32:20,926 --> 00:32:22,796
If you can opt into these, you


1051
00:32:22,796 --> 00:32:24,446
can help us by telling us, hey,


1052
00:32:24,786 --> 00:32:26,146
I have sensitive content.


1053
00:32:26,366 --> 00:32:27,696
I'm willing to have better


1054
00:32:27,696 --> 00:32:28,196
defaults.


1055
00:32:28,196 --> 00:32:29,276
You don't have to support these


1056
00:32:29,276 --> 00:32:30,826
legacy APIs for me.


1057
00:32:31,286 --> 00:32:32,536
Then we can be much more


1058
00:32:32,536 --> 00:32:34,006
aggressive in fighting


1059
00:32:34,006 --> 00:32:35,936
speculative execution attacks on


1060
00:32:35,936 --> 00:32:36,496
your behalf.


1061
00:32:37,456 --> 00:32:38,916
So, let's look at how this maps.


1062
00:32:39,666 --> 00:32:41,106
The basic thing you're going to


1063
00:32:41,106 --> 00:32:42,536
try to do here to fight


1064
00:32:42,536 --> 00:32:44,686
speculative execution attacks is


1065
00:32:44,686 --> 00:32:47,046
making sure your web content


1066
00:32:47,306 --> 00:32:49,176
never ends up in the same web


1067
00:32:49,176 --> 00:32:51,756
content process as a frame from


1068
00:32:51,756 --> 00:32:52,736
evil.example.


1069
00:32:53,316 --> 00:32:54,416
If they have a frame


1070
00:32:54,416 --> 00:32:56,626
evil.example, they can execute


1071
00:32:56,716 --> 00:32:58,186
code in your-- in the same


1072
00:32:58,186 --> 00:33:00,386
process that your web content


1073
00:33:00,386 --> 00:33:02,646
resides in and read your bytes.


1074
00:33:03,436 --> 00:33:04,746
So, how do we make sure this


1075
00:33:04,746 --> 00:33:05,326
never happens?


1076
00:33:06,286 --> 00:33:07,656
OK. We've got these things.


1077
00:33:07,936 --> 00:33:09,836
First, WKWebView.


1078
00:33:10,036 --> 00:33:11,406
Now we're looking at apps using


1079
00:33:11,406 --> 00:33:12,616
WebKit as a framework.


1080
00:33:13,616 --> 00:33:16,466
I'm looking here at Safari,


1081
00:33:16,756 --> 00:33:18,046
which is an example of an app


1082
00:33:18,046 --> 00:33:20,216
that has been using WKWebView


1083
00:33:20,326 --> 00:33:22,386
and we sometimes refer to it as


1084
00:33:22,386 --> 00:33:24,306
Modern WebKit, has been using it


1085
00:33:24,306 --> 00:33:25,596
for many, many years.


1086
00:33:25,986 --> 00:33:27,866
And it provides excellent


1087
00:33:28,096 --> 00:33:29,346
advantages.


1088
00:33:30,096 --> 00:33:32,336
For instance, these three tabs,


1089
00:33:32,536 --> 00:33:34,296
the evil.example, your web


1090
00:33:34,296 --> 00:33:36,696
content, and webkit.org are all


1091
00:33:36,696 --> 00:33:38,516
rendered in separate web content


1092
00:33:38,516 --> 00:33:39,096
processes.


1093
00:33:40,126 --> 00:33:42,896
Further, WKWebView provides you


1094
00:33:43,026 --> 00:33:44,726
with a separate process for


1095
00:33:44,726 --> 00:33:45,566
networking.


1096
00:33:45,816 --> 00:33:47,436
This is where cookies get added


1097
00:33:47,436 --> 00:33:51,136
and HTTP headers are parsed and


1098
00:33:51,316 --> 00:33:51,966
et cetera.


1099
00:33:54,306 --> 00:33:56,036
Now, speculative execution


1100
00:33:56,036 --> 00:33:58,346
attacks all rely on being in the


1101
00:33:58,346 --> 00:34:00,796
same web content process and


1102
00:34:00,796 --> 00:34:02,516
doing the speculation thing to


1103
00:34:02,516 --> 00:34:04,386
try to read things that the


1104
00:34:04,386 --> 00:34:06,246
attacker wasn't supposed to be


1105
00:34:06,246 --> 00:34:07,136
able to read.


1106
00:34:07,136 --> 00:34:08,496
Well, if you have separated


1107
00:34:08,496 --> 00:34:09,956
things into different processes,


1108
00:34:10,696 --> 00:34:12,036
this attack doesn't work, right?


1109
00:34:12,636 --> 00:34:13,956
You cannot do speculative


1110
00:34:14,025 --> 00:34:16,196
execution attacks across process


1111
00:34:16,196 --> 00:34:18,286
boundaries, so this is already a


1112
00:34:18,286 --> 00:34:20,626
defense here and of course


1113
00:34:20,626 --> 00:34:22,686
that's super important that the


1114
00:34:22,686 --> 00:34:24,886
web content process cannot reach


1115
00:34:24,916 --> 00:34:26,666
into the network process and do


1116
00:34:26,666 --> 00:34:28,096
speculative execution attacks


1117
00:34:28,096 --> 00:34:28,396
there.


1118
00:34:30,056 --> 00:34:32,076
But if you are still using


1119
00:34:32,076 --> 00:34:34,396
UIWebView, which, by the way, we


1120
00:34:34,396 --> 00:34:36,196
are deprecating as of the betas,


1121
00:34:37,306 --> 00:34:39,275
you're not in a very good place.


1122
00:34:40,485 --> 00:34:42,436
Now, if you have evil.example


1123
00:34:43,206 --> 00:34:44,686
and you have your web content


1124
00:34:45,315 --> 00:34:46,686
and you've got the network stack


1125
00:34:47,496 --> 00:34:48,826
and then you put this all in


1126
00:34:48,826 --> 00:34:51,946
your app, from the view of a


1127
00:34:51,946 --> 00:34:53,596
speculative execution attack,


1128
00:34:54,315 --> 00:34:55,505
this all blends together.


1129
00:34:56,306 --> 00:34:58,346
It's all the same process space.


1130
00:34:59,026 --> 00:35:00,666
There are no guards for


1131
00:35:00,666 --> 00:35:02,896
speculative execution attack in


1132
00:35:02,896 --> 00:35:03,506
this scenario.


1133
00:35:04,286 --> 00:35:05,846
You need to get off of


1134
00:35:05,846 --> 00:35:06,666
UIWebView.


1135
00:35:07,466 --> 00:35:10,376
If you move to WKWebView, you'll


1136
00:35:10,376 --> 00:35:12,696
instead get this.


1137
00:35:12,896 --> 00:35:15,096
Out of process, separated,


1138
00:35:15,656 --> 00:35:16,856
badness happening in the


1139
00:35:16,856 --> 00:35:18,676
evil.example content process


1140
00:35:18,796 --> 00:35:19,856
cannot affect the rest.


1141
00:35:21,266 --> 00:35:23,306
OK. We've moved to WKWebView.


1142
00:35:23,656 --> 00:35:24,726
Let's look at how content


1143
00:35:24,726 --> 00:35:26,996
security policy can help you.


1144
00:35:27,406 --> 00:35:28,626
You might have an embedded


1145
00:35:28,626 --> 00:35:29,976
social widget from


1146
00:35:29,976 --> 00:35:33,166
social.example, but then you


1147
00:35:33,166 --> 00:35:34,696
might have an injection attack,


1148
00:35:34,696 --> 00:35:36,086
maybe it's the messaging thing


1149
00:35:36,086 --> 00:35:37,376
again where someone can send


1150
00:35:37,376 --> 00:35:38,716
markup in a message and you


1151
00:35:38,946 --> 00:35:40,546
accidentally render it and they


1152
00:35:40,546 --> 00:35:41,606
pull in an iframe from


1153
00:35:41,606 --> 00:35:42,516
evil.example.


1154
00:35:43,376 --> 00:35:45,816
Well, you may also have an ad


1155
00:35:45,816 --> 00:35:47,426
there that you want to have


1156
00:35:47,426 --> 00:35:48,676
there and then the ad network


1157
00:35:48,676 --> 00:35:50,286
gets compromised and redirects


1158
00:35:50,286 --> 00:35:51,626
to evil.example and then pulls


1159
00:35:51,626 --> 00:35:52,246
in an iframe.


1160
00:35:52,646 --> 00:35:53,996
And, remember, you never want to


1161
00:35:53,996 --> 00:35:55,426
be in a web content process


1162
00:35:55,786 --> 00:35:57,946
together with a frame from


1163
00:35:57,946 --> 00:35:58,876
evil.example.


1164
00:35:59,986 --> 00:36:00,866
So, what have you done?


1165
00:36:01,306 --> 00:36:02,616
You have deployed content


1166
00:36:02,616 --> 00:36:04,706
security policy and you've


1167
00:36:05,016 --> 00:36:07,746
specified from where you allow


1168
00:36:07,746 --> 00:36:10,316
frames and please don't allow


1169
00:36:10,316 --> 00:36:11,176
evil.example.


1170
00:36:12,386 --> 00:36:14,466
This is how you protect


1171
00:36:14,466 --> 00:36:16,666
accidentally getting a frame in


1172
00:36:16,666 --> 00:36:19,116
your process from evil.example.


1173
00:36:20,176 --> 00:36:22,286
So, the reverse.


1174
00:36:22,496 --> 00:36:24,796
Can evil.example pull your web


1175
00:36:24,796 --> 00:36:26,996
content into the evil process?


1176
00:36:27,876 --> 00:36:28,396
Of course.


1177
00:36:29,186 --> 00:36:30,446
So, how do you protect against


1178
00:36:30,446 --> 00:36:30,736
that?


1179
00:36:31,546 --> 00:36:32,646
We are back at the content


1180
00:36:32,646 --> 00:36:34,396
security policy and now we see


1181
00:36:34,606 --> 00:36:35,846
frame ancestors.


1182
00:36:36,016 --> 00:36:37,326
And this is what I referred to


1183
00:36:37,566 --> 00:36:38,896
earlier with a slightly


1184
00:36:38,896 --> 00:36:39,686
different flavor.


1185
00:36:40,086 --> 00:36:41,916
You can actually say none and


1186
00:36:41,916 --> 00:36:44,736
this means never iframe me.


1187
00:36:45,546 --> 00:36:47,206
This content should never be in


1188
00:36:47,206 --> 00:36:48,486
an iframe from someone else.


1189
00:36:49,006 --> 00:36:49,896
This is my content.


1190
00:36:50,256 --> 00:36:51,896
Only I get to render this thing.


1191
00:36:52,636 --> 00:36:54,756
So, this-- if you place this,


1192
00:36:55,236 --> 00:36:57,986
that-- the evil.example page


1193
00:36:57,986 --> 00:37:00,616
cannot pull in your content in


1194
00:37:00,616 --> 00:37:01,126
an iframe.


1195
00:37:01,446 --> 00:37:03,026
And, of course, we do that


1196
00:37:03,126 --> 00:37:05,386
blocking in the network process.


1197
00:37:05,816 --> 00:37:07,236
That's important, right, because


1198
00:37:07,426 --> 00:37:08,886
a speculative execution attack


1199
00:37:08,886 --> 00:37:10,116
can only happen in the same


1200
00:37:10,116 --> 00:37:12,056
process space, so we cut it off


1201
00:37:12,056 --> 00:37:13,336
before it enters where


1202
00:37:13,336 --> 00:37:15,186
evil.example can execute


1203
00:37:15,186 --> 00:37:15,716
JavaScript.


1204
00:37:17,336 --> 00:37:19,756
OK. HttpOnly cookies, do they


1205
00:37:19,756 --> 00:37:21,266
really map to speculative


1206
00:37:21,266 --> 00:37:22,226
execution attacks?


1207
00:37:22,666 --> 00:37:23,616
Yes, they do.


1208
00:37:23,886 --> 00:37:25,606
They're even more important here


1209
00:37:25,606 --> 00:37:27,356
than to try to fight cross-site


1210
00:37:27,356 --> 00:37:27,776
scripting.


1211
00:37:28,456 --> 00:37:31,426
Why? Well, remember that old API


1212
00:37:31,426 --> 00:37:33,616
document.cookie is the way to


1213
00:37:33,616 --> 00:37:35,236
look at cookies from JavaScript?


1214
00:37:36,076 --> 00:37:37,376
Now that we don't-- we can't


1215
00:37:37,376 --> 00:37:38,906
rely on the same-origin policy


1216
00:37:38,906 --> 00:37:41,646
anymore, evil.example can reach


1217
00:37:41,646 --> 00:37:43,636
into an iframe from your content


1218
00:37:43,636 --> 00:37:44,956
and actually read the cookies.


1219
00:37:45,816 --> 00:37:46,676
Super bad.


1220
00:37:47,196 --> 00:37:49,016
But if you mark them HttpOnly,


1221
00:37:49,516 --> 00:37:51,446
WebKit will make sure to keep


1222
00:37:51,546 --> 00:37:52,896
them in the network process.


1223
00:37:53,256 --> 00:37:54,456
We don't need to move them into


1224
00:37:54,456 --> 00:37:55,706
the web content process because


1225
00:37:55,706 --> 00:37:57,216
they never need to be exposed in


1226
00:37:57,216 --> 00:37:58,476
the document.cookie API.


1227
00:37:59,506 --> 00:38:00,836
So, this automatically protects


1228
00:38:00,836 --> 00:38:02,596
the cookies against speculative


1229
00:38:02,596 --> 00:38:03,486
execution attacks.


1230
00:38:04,866 --> 00:38:06,406
SameSite cookies.


1231
00:38:06,576 --> 00:38:07,786
This is basically giving your


1232
00:38:07,786 --> 00:38:09,646
server control of the embedded


1233
00:38:09,696 --> 00:38:10,176
case.


1234
00:38:10,556 --> 00:38:12,306
Again, evil.example has decide


1235
00:38:12,306 --> 00:38:14,006
to try to pull off a speculative


1236
00:38:14,046 --> 00:38:15,266
execution attack against your


1237
00:38:15,266 --> 00:38:15,756
content.


1238
00:38:16,656 --> 00:38:17,936
Loaded an iframe with your


1239
00:38:17,936 --> 00:38:20,306
content, but the SameSite cookie


1240
00:38:20,306 --> 00:38:22,446
doesn't get sent, so your server


1241
00:38:22,446 --> 00:38:23,556
will know that, hey, I'm being


1242
00:38:23,556 --> 00:38:24,966
embedded here.


1243
00:38:24,966 --> 00:38:25,856
I'm not going to allow this.


1244
00:38:25,886 --> 00:38:27,696
So, you're going to deny this


1245
00:38:27,696 --> 00:38:28,706
whole resource load.


1246
00:38:29,196 --> 00:38:29,896
Server side.


1247
00:38:31,396 --> 00:38:33,016
And that way not end up in


1248
00:38:33,016 --> 00:38:34,796
evil.example's process.


1249
00:38:35,656 --> 00:38:37,786
Finally, to fight these attacks,


1250
00:38:38,016 --> 00:38:40,516
cross-origin resource policy.


1251
00:38:41,446 --> 00:38:42,806
Now, this was the new header I


1252
00:38:42,806 --> 00:38:44,026
told you about where you can


1253
00:38:44,316 --> 00:38:46,476
tell the web browser engine


1254
00:38:46,476 --> 00:38:48,626
that, hey, images, scripts, and


1255
00:38:48,626 --> 00:38:49,786
other things from my server,


1256
00:38:50,226 --> 00:38:51,736
only I get to load them.


1257
00:38:52,276 --> 00:38:53,576
So, if you say-- send this


1258
00:38:53,576 --> 00:38:55,226
header for your images and your


1259
00:38:55,226 --> 00:38:57,446
scripts on your server, we will


1260
00:38:57,446 --> 00:38:59,116
make sure to block them from


1261
00:38:59,116 --> 00:39:01,716
being loaded by evil.example and


1262
00:39:01,716 --> 00:39:02,906
we'll do that block in the


1263
00:39:02,906 --> 00:39:03,866
network process.


1264
00:39:04,186 --> 00:39:06,336
Again, giving you that process


1265
00:39:06,336 --> 00:39:08,406
separation so that a speculative


1266
00:39:08,406 --> 00:39:09,946
execution attack cannot read


1267
00:39:09,946 --> 00:39:10,676
your bytes.


1268
00:39:12,686 --> 00:39:14,976
OK. We have the final attack


1269
00:39:14,976 --> 00:39:16,366
category to have a look at and


1270
00:39:16,366 --> 00:39:17,466
this is a pretty brief one.


1271
00:39:17,836 --> 00:39:19,246
Window control attacks.


1272
00:39:20,216 --> 00:39:21,906
So, we're going to look


1273
00:39:21,906 --> 00:39:23,626
malicious window navigation,


1274
00:39:23,786 --> 00:39:24,896
sometimes referred to as


1275
00:39:24,936 --> 00:39:26,466
tabnapping, and then the


1276
00:39:26,466 --> 00:39:26,806
defense.


1277
00:39:28,446 --> 00:39:29,466
Again, we're back here at


1278
00:39:29,466 --> 00:39:31,486
evil.example and instead of


1279
00:39:31,486 --> 00:39:33,506
embedding your content, thus the


1280
00:39:33,506 --> 00:39:36,106
window.open opens your content


1281
00:39:36,106 --> 00:39:37,876
in a new window and you don't


1282
00:39:37,876 --> 00:39:38,416
get to know.


1283
00:39:38,416 --> 00:39:39,986
You don't get to decide, yeah,


1284
00:39:39,986 --> 00:39:41,876
OK, someone opened my web page.


1285
00:39:42,066 --> 00:39:44,136
And the SameSite cookie may be


1286
00:39:44,136 --> 00:39:44,826
sent here.


1287
00:39:44,826 --> 00:39:46,086
You might think everything's


1288
00:39:46,086 --> 00:39:49,376
good, but evil.example could


1289
00:39:49,376 --> 00:39:52,416
wait until your user loses focus


1290
00:39:52,416 --> 00:39:54,856
of that page of yours and then


1291
00:39:54,856 --> 00:39:57,786
use the handle to navigate it to


1292
00:39:57,786 --> 00:40:00,516
a fraud page that looks like


1293
00:40:00,516 --> 00:40:02,646
your page and asks the user to


1294
00:40:02,646 --> 00:40:04,736
please log in again, of course


1295
00:40:04,736 --> 00:40:05,906
stealing the credentials and


1296
00:40:05,906 --> 00:40:07,036
sending them off to the


1297
00:40:07,036 --> 00:40:07,496
attacker.


1298
00:40:08,436 --> 00:40:09,416
This is one of the things that


1299
00:40:09,416 --> 00:40:10,756
can happen if you leave the


1300
00:40:10,756 --> 00:40:12,126
control up to the opener.


1301
00:40:13,206 --> 00:40:14,286
Instead, you deploy the


1302
00:40:14,286 --> 00:40:16,836
cross-origin window policy, you


1303
00:40:16,836 --> 00:40:19,466
deny this thing, and there will


1304
00:40:19,466 --> 00:40:21,556
be no handler for the attacker


1305
00:40:21,556 --> 00:40:23,846
page to navigate your window


1306
00:40:23,846 --> 00:40:24,126
with.


1307
00:40:24,666 --> 00:40:27,386
So, that's the final defense in


1308
00:40:27,386 --> 00:40:27,756
attack.


1309
00:40:28,496 --> 00:40:31,046
It's time to take action.


1310
00:40:31,366 --> 00:40:32,656
We're going to review what we've


1311
00:40:32,656 --> 00:40:34,516
been looking at here, just so


1312
00:40:34,516 --> 00:40:35,656
that you know what you need to


1313
00:40:35,656 --> 00:40:37,956
go back to your office or your


1314
00:40:37,956 --> 00:40:39,456
home and start working on.


1315
00:40:40,196 --> 00:40:42,926
First, we have to secure these


1316
00:40:42,926 --> 00:40:43,746
transports.


1317
00:40:44,066 --> 00:40:45,916
Move to HTTPS and WSS.


1318
00:40:47,206 --> 00:40:49,126
You should have secure cookies.


1319
00:40:49,546 --> 00:40:51,056
You should also mark them


1320
00:40:51,056 --> 00:40:51,916
HttpOnly.


1321
00:40:52,296 --> 00:40:53,966
If you take the Swede's advice,


1322
00:40:54,246 --> 00:40:55,486
just make all of your cookies


1323
00:40:55,486 --> 00:40:56,716
HttpOnly and secure.


1324
00:40:57,806 --> 00:40:59,706
And you need to migrate off of


1325
00:40:59,706 --> 00:41:01,636
UIWebView to WKWebview.


1326
00:41:02,046 --> 00:41:03,076
These are the basics.


1327
00:41:03,786 --> 00:41:05,216
Then we have the defense


1328
00:41:05,216 --> 00:41:06,586
mechanisms we've been going


1329
00:41:06,586 --> 00:41:07,006
through.


1330
00:41:07,386 --> 00:41:09,386
Content security policy will


1331
00:41:09,386 --> 00:41:11,956
help you here with cross-site


1332
00:41:11,956 --> 00:41:13,236
scripting and speculative


1333
00:41:13,236 --> 00:41:14,276
execution attacks.


1334
00:41:16,266 --> 00:41:17,686
HttpOnly cookies will provide


1335
00:41:17,746 --> 00:41:19,706
you with some kind of protection


1336
00:41:19,706 --> 00:41:20,826
against cross-site scripting,


1337
00:41:20,906 --> 00:41:22,526
meaning the scripts can't steal


1338
00:41:22,526 --> 00:41:24,306
the cookies, but it will


1339
00:41:24,306 --> 00:41:26,026
definitely help you against


1340
00:41:26,026 --> 00:41:27,586
speculative execution attacks


1341
00:41:27,626 --> 00:41:29,616
because HttpOnly cookies are


1342
00:41:29,756 --> 00:41:31,236
kept in the network process.


1343
00:41:33,286 --> 00:41:34,446
Subresource integrity.


1344
00:41:34,876 --> 00:41:36,036
This is the way you fight


1345
00:41:36,436 --> 00:41:37,896
against a compromised CDN.


1346
00:41:38,306 --> 00:41:40,246
Someone's executing code on your


1347
00:41:40,246 --> 00:41:42,106
page that you never wanted to be


1348
00:41:42,106 --> 00:41:42,346
there.


1349
00:41:44,576 --> 00:41:47,176
SameSite cookies, this is a way


1350
00:41:47,176 --> 00:41:49,766
to fight forged requests done


1351
00:41:49,816 --> 00:41:51,936
invisibly by some phishing page


1352
00:41:52,026 --> 00:41:52,816
to your server.


1353
00:41:52,906 --> 00:41:54,456
You will know that because the


1354
00:41:54,456 --> 00:41:56,036
SameSite cookie won't be sent


1355
00:41:56,036 --> 00:41:57,496
when you're embedded and so you


1356
00:41:57,496 --> 00:41:59,336
don't accept the request.


1357
00:42:00,236 --> 00:42:01,376
It also happens against


1358
00:42:01,426 --> 00:42:02,946
speculative execution attacks


1359
00:42:03,236 --> 00:42:04,976
because if an evil page is


1360
00:42:04,976 --> 00:42:06,606
trying to pull in your resources


1361
00:42:06,606 --> 00:42:08,476
to be able to leverage an attack


1362
00:42:08,476 --> 00:42:10,616
against them, again, SameSite


1363
00:42:10,616 --> 00:42:11,976
cookies won't be sent and you


1364
00:42:11,976 --> 00:42:12,916
can deny the load.


1365
00:42:13,486 --> 00:42:15,506
Then we get into these new


1366
00:42:15,506 --> 00:42:17,206
technologies, the cross-origin


1367
00:42:17,206 --> 00:42:18,216
resource policy.


1368
00:42:18,786 --> 00:42:20,996
This is the way you can say that


1369
00:42:20,996 --> 00:42:23,366
images, scripts, and other


1370
00:42:23,366 --> 00:42:25,556
cross-origin loads, deny them, I


1371
00:42:25,556 --> 00:42:27,366
only want to load this on my


1372
00:42:27,366 --> 00:42:27,996
page.


1373
00:42:28,506 --> 00:42:29,786
And, finally, controlling


1374
00:42:29,786 --> 00:42:32,306
windows is making sure that that


1375
00:42:32,306 --> 00:42:34,686
handle goes away if someone else


1376
00:42:34,686 --> 00:42:36,556
opens your web content in their


1377
00:42:36,556 --> 00:42:37,136
own window.


1378
00:42:40,286 --> 00:42:41,786
These are fairly easy to adopt,


1379
00:42:42,246 --> 00:42:44,266
especially for you.


1380
00:42:44,386 --> 00:42:45,826
You know your sites, you know


1381
00:42:45,826 --> 00:42:47,106
your web content, you know your


1382
00:42:47,106 --> 00:42:48,176
apps, you know how they're


1383
00:42:48,176 --> 00:42:49,096
supposed to work.


1384
00:42:49,316 --> 00:42:50,586
If we would just turn this on by


1385
00:42:50,586 --> 00:42:51,906
default for all of you, it would


1386
00:42:51,906 --> 00:42:53,796
probably break a few things, so


1387
00:42:53,796 --> 00:42:56,246
you need to opt into this.


1388
00:42:56,326 --> 00:42:58,076
And by opting in means you


1389
00:42:58,076 --> 00:42:59,266
should check that the security


1390
00:42:59,266 --> 00:43:01,356
works-- you can try to pull off


1391
00:43:01,356 --> 00:43:02,286
an attack against your own


1392
00:43:02,286 --> 00:43:03,486
content, make sure that, yeah,


1393
00:43:03,626 --> 00:43:05,006
my content security policy is


1394
00:43:05,006 --> 00:43:06,846
defending me, good, and of


1395
00:43:06,846 --> 00:43:07,736
course test that the


1396
00:43:07,736 --> 00:43:08,946
functionality that should be


1397
00:43:08,946 --> 00:43:09,706
there is there.


1398
00:43:11,826 --> 00:43:12,526
We have a blog.


1399
00:43:12,786 --> 00:43:14,286
The WebKit project is an open


1400
00:43:14,286 --> 00:43:15,016
source project.


1401
00:43:15,276 --> 00:43:16,576
We have a blog where we talk


1402
00:43:16,576 --> 00:43:17,856
about these technologies and


1403
00:43:17,856 --> 00:43:18,596
other things.


1404
00:43:18,966 --> 00:43:20,536
This is where we'll update you


1405
00:43:20,536 --> 00:43:22,056
on those two last response


1406
00:43:22,056 --> 00:43:22,446
headers.


1407
00:43:22,786 --> 00:43:24,626
The cross-origin resource policy


1408
00:43:24,626 --> 00:43:25,796
and the cross-origin window


1409
00:43:25,826 --> 00:43:26,296
policy.


1410
00:43:26,656 --> 00:43:28,156
Because we're still discussing


1411
00:43:28,156 --> 00:43:29,276
those with the other browser


1412
00:43:29,276 --> 00:43:30,786
vendors, trying to make sure


1413
00:43:30,786 --> 00:43:32,106
that they're standard so that


1414
00:43:32,436 --> 00:43:34,316
the same response headers work


1415
00:43:34,316 --> 00:43:35,756
across all the browsers.


1416
00:43:36,296 --> 00:43:37,896
And so there might be slight


1417
00:43:37,896 --> 00:43:40,656
name changes or added attributes


1418
00:43:40,656 --> 00:43:42,076
that we still don't have here.


1419
00:43:42,586 --> 00:43:44,736
Also, it's so brand new that you


1420
00:43:44,736 --> 00:43:46,016
actually won't have access to


1421
00:43:46,016 --> 00:43:48,166
this until seed two or the


1422
00:43:48,166 --> 00:43:48,936
public seed.


1423
00:43:49,476 --> 00:43:51,326
We don't have full support for


1424
00:43:51,326 --> 00:43:53,336
these in the developer seed yet.


1425
00:43:55,486 --> 00:43:56,496
Quick shout out to these other


1426
00:43:56,496 --> 00:43:56,946
sessions.


1427
00:43:57,096 --> 00:43:58,456
Please come see us, including


1428
00:43:58,456 --> 00:44:00,266
me, at the Safari, WebKit, and


1429
00:44:00,266 --> 00:44:01,526
Password AutoFill Lab tomorrow


1430
00:44:01,526 --> 00:44:02,546
at 2:00.


1431
00:44:02,546 --> 00:44:04,256
You can come there and discuss


1432
00:44:04,256 --> 00:44:06,396
with me or my co-workers how to


1433
00:44:06,396 --> 00:44:07,766
deploy these technologies and


1434
00:44:07,766 --> 00:44:09,266
make them work the best for you.


1435
00:44:09,966 --> 00:44:11,116
And there's also a session on


1436
00:44:11,116 --> 00:44:13,336
Friday that's more general on


1437
00:44:13,336 --> 00:44:14,916
what's new in Safari and WebKit.


1438
00:44:16,366 --> 00:44:16,676
Thank you.


1439
00:44:17,516 --> 00:44:22,500
[ Applause ]

