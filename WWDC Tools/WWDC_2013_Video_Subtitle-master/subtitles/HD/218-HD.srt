1
00:00:00,506 --> 00:00:09,516
[ Silence ]


2
00:00:10,016 --> 00:00:12,436
>> Good almost end of
the morning to everybody.


3
00:00:13,406 --> 00:00:20,906
My name's Bruce Nilo, and
I make and create and fix


4
00:00:20,906 --> 00:00:22,746
and break view controllers
for a living.


5
00:00:23,186 --> 00:00:25,896
I assume most of you have
some passing familiarity


6
00:00:25,896 --> 00:00:26,916
with view controllers.


7
00:00:28,026 --> 00:00:32,536
They've been around since the
very first SDK, I believe.


8
00:00:35,116 --> 00:00:38,506
They've kind of grown
over the releases.


9
00:00:39,626 --> 00:00:42,976
They basically are a mechanism


10
00:00:42,976 --> 00:00:46,746
where we help you create
great application flows,


11
00:00:47,176 --> 00:00:51,586
where the transitions kind
of enhance what you're trying


12
00:00:51,586 --> 00:00:53,426
to say in your application.


13
00:00:54,206 --> 00:00:58,846
Over the releases they've
taken up functionality


14
00:00:58,846 --> 00:01:01,256
like helping decide whether


15
00:01:01,256 --> 00:01:06,216
or not a application should auto
rotate, how it should be laid


16
00:01:06,216 --> 00:01:09,336
out underneath the bars,
not underneath the bars.


17
00:01:09,986 --> 00:01:17,516
In iOS 7 they're going to help
the application decide what the


18
00:01:17,516 --> 00:01:20,666
status bar highlight should be.


19
00:01:21,356 --> 00:01:25,646
We've changed the way
layout works a little bit,


20
00:01:25,646 --> 00:01:27,676
and view controllers are
going to help you do that.


21
00:01:27,676 --> 00:01:31,086
Now I'm not going to talk
about any of that today.


22
00:01:31,386 --> 00:01:33,986
What I'm going to do
is go back to basics.


23
00:01:34,136 --> 00:01:37,966
We're going to talk about view
controllers and transitions.


24
00:01:39,866 --> 00:01:44,396
And software has this
way of kind of emerging.


25
00:01:44,766 --> 00:01:47,476
It kind of -- you go back to
the beginnings all the time,


26
00:01:47,476 --> 00:01:49,226
and you come back with
something even better.


27
00:01:49,836 --> 00:01:53,146
And that's what we've
done for you, I think,


28
00:01:53,596 --> 00:01:56,776
in iOS 7 with view controllers
and custom transitions.


29
00:01:57,256 --> 00:02:00,566
So enough of my intro
to my intro.


30
00:02:02,246 --> 00:02:04,616
Let's quickly go over what
I'm going to talk about.


31
00:02:05,446 --> 00:02:08,306
So to do transitions --


32
00:02:08,306 --> 00:02:12,106
and by transitions I am often
kind of taking a shortcut.


33
00:02:12,106 --> 00:02:15,476
I really mean transition
animations right now.


34
00:02:15,766 --> 00:02:21,376
To do them, you need great tools
and API to do those animations.


35
00:02:21,726 --> 00:02:23,416
And we have a bunch
of them already,


36
00:02:23,646 --> 00:02:27,586
but we've added a whole lot
more in iOS 7, and we're going


37
00:02:27,586 --> 00:02:28,706
to go through that quickly.


38
00:02:29,156 --> 00:02:32,966
We're going to talk about custom
view controller transitions,


39
00:02:33,436 --> 00:02:36,336
meaning how you can create
your own, and then we're going


40
00:02:36,336 --> 00:02:37,356
to introduce this notion


41
00:02:37,356 --> 00:02:40,006
of how you can create view
controller transitions


42
00:02:40,006 --> 00:02:41,076
that are interactive.


43
00:02:41,886 --> 00:02:43,726
And then we're going to
go into some other detail.


44
00:02:43,766 --> 00:02:46,136
So let's kind of delve in
a little bit what I mean.


45
00:02:46,346 --> 00:02:48,836
First of all, hopefully
everybody here has used the


46
00:02:48,836 --> 00:02:52,416
block animation API on UI View.


47
00:02:52,416 --> 00:02:55,196
We're going to quickly
review that, because a lot


48
00:02:55,196 --> 00:02:58,986
of the animation tools that
we are adding in iOS 7 are


49
00:02:58,986 --> 00:03:01,406
in fact enhancements
of that API.


50
00:03:02,896 --> 00:03:07,316
We've introduced kind of a
UI View block-based spring


51
00:03:07,316 --> 00:03:08,186
animation API.


52
00:03:08,516 --> 00:03:14,226
There's a lot of bounciness,
and kind of harmonic transitions


53
00:03:14,226 --> 00:03:16,166
that you see in iOS
7, and we're going


54
00:03:16,166 --> 00:03:20,756
to give you guys an
easy way to do that too.


55
00:03:20,996 --> 00:03:22,216
Key frame animations.


56
00:03:22,736 --> 00:03:25,656
It's been really hard to
get key frame animation


57
00:03:25,656 --> 00:03:28,646
at the UI kit level, you
typically had to dive


58
00:03:28,646 --> 00:03:31,816
down to do it, and we're going
to make that a lot easier too.


59
00:03:33,016 --> 00:03:36,076
And finally there's
probably been a lot of buzz


60
00:03:36,076 --> 00:03:37,626
around UI kit dynamics.


61
00:03:37,746 --> 00:03:39,236
We're going to talk
about that a little bit,


62
00:03:39,236 --> 00:03:43,796
and how it works
ultimately with transitions.


63
00:03:44,266 --> 00:03:46,416
So custom view controller
transitions.


64
00:03:47,316 --> 00:03:50,516
First of all, which of these --


65
00:03:50,996 --> 00:03:52,736
which view controller
transitions are we


66
00:03:52,736 --> 00:03:53,586
talking about?


67
00:03:53,866 --> 00:03:57,536
Well there's kind of three,
maybe three and a half that are


68
00:03:57,566 --> 00:03:59,816
like the big kahunas,
as it were.


69
00:04:00,876 --> 00:04:03,826
Present and dismiss, you'll
be able to customize those.


70
00:04:04,306 --> 00:04:08,016
Tab bar controller, tab bar
controller actually never really


71
00:04:08,016 --> 00:04:09,876
had any kind of animated
transition.


72
00:04:09,966 --> 00:04:11,896
Well now it will
if you want it to.


73
00:04:12,726 --> 00:04:14,916
Navigation controller,
you've already seen


74
00:04:14,916 --> 00:04:18,625
that we've done a bit out of the
box with navigation controller,


75
00:04:19,016 --> 00:04:20,576
and you're going to
be able to customize


76
00:04:20,576 --> 00:04:22,076
that as well, if you'd like.


77
00:04:23,086 --> 00:04:28,686
And finally, UI collection view
controller, it was kind of thin


78
00:04:29,606 --> 00:04:33,066
as a view controller
coming in on iOS 6.


79
00:04:33,586 --> 00:04:36,026
We've beefed it up a little
bit, and made it work better


80
00:04:36,026 --> 00:04:37,256
with navigation controller.


81
00:04:37,796 --> 00:04:40,486
So now you'll be able to put a
UI collection view controller


82
00:04:40,486 --> 00:04:43,076
in with really almost
no code at all,


83
00:04:43,336 --> 00:04:47,286
have your navigation controller
transitions basically be your


84
00:04:47,286 --> 00:04:50,406
collection view layout
transitions.


85
00:04:50,936 --> 00:04:54,006
We're going to talk about
what a transition is,


86
00:04:54,006 --> 00:04:56,646
just so that we're all
speaking the same language.


87
00:04:57,176 --> 00:05:02,356
There's a lot of API, and
we're going to go through it.


88
00:05:02,356 --> 00:05:04,666
There's going to be a lot of
code that doesn't fit very well


89
00:05:04,666 --> 00:05:08,096
on these slides, and
I apologize for that.


90
00:05:09,146 --> 00:05:11,046
Interactive view
controller transitions.


91
00:05:11,076 --> 00:05:12,396
Well there's one -- actually


92
00:05:12,796 --> 00:05:15,766
in iOS 6 we had UI page view
controller, and you could swipe


93
00:05:15,766 --> 00:05:17,996
that back and forth,
that's an example


94
00:05:17,996 --> 00:05:19,586
of an interactive
view controller,


95
00:05:19,586 --> 00:05:21,756
or an interactive transition.


96
00:05:21,756 --> 00:05:26,806
In iOS 7, the pop gesture
is now interactive as well.


97
00:05:27,606 --> 00:05:33,266
And basically, you
guys can add your own.


98
00:05:33,536 --> 00:05:36,386
We've beefed up collection
view a bit too,


99
00:05:36,386 --> 00:05:39,296
so collection view
can now be interactive


100
00:05:39,296 --> 00:05:40,846
in a couple of different ways.


101
00:05:41,146 --> 00:05:43,976
And we're going to talk about
that, and again in the context


102
00:05:43,976 --> 00:05:46,866
of how you can use it
for your custom view


103
00:05:46,866 --> 00:05:48,096
controller transitions.


104
00:05:49,796 --> 00:05:53,386
Interactivity introduces
an introducing twist


105
00:05:53,386 --> 00:05:54,886
for a view controller
transition,


106
00:05:54,886 --> 00:05:57,316
in that you can change your
mind halfway through it.


107
00:05:57,316 --> 00:06:01,266
I mean you don't have to change
your mind, but the user --


108
00:06:01,266 --> 00:06:04,686
and certainly this is the case
with the pop gesture in iOS 7 --


109
00:06:04,686 --> 00:06:07,746
the user might kind of
move their finger halfway,


110
00:06:07,746 --> 00:06:10,086
and then say nah, I want to
be back where I started from.


111
00:06:10,086 --> 00:06:11,806
And there's some
implications to that


112
00:06:11,806 --> 00:06:12,986
that we're going to talk about.


113
00:06:13,296 --> 00:06:16,456
To kind of help with
some of those issues,


114
00:06:16,456 --> 00:06:19,026
we've introduced a brand new
object called a transition


115
00:06:19,026 --> 00:06:23,756
coordinator, and as we
implemented it initially


116
00:06:23,756 --> 00:06:27,876
to help deal with cancelled
transitions, it became clear


117
00:06:27,876 --> 00:06:30,236
that it solved a lot of other
interesting problems too,


118
00:06:30,236 --> 00:06:32,946
and we're going to
talk about that.


119
00:06:33,116 --> 00:06:37,216
So let's go into the
new animation APIs


120
00:06:37,216 --> 00:06:38,286
that we have to offer.


121
00:06:40,616 --> 00:06:46,046
So, these two methods I
believe were from the beginning,


122
00:06:46,326 --> 00:06:48,816
that's not the block-based API.


123
00:06:49,716 --> 00:06:53,246
This one was introduced
I believe in iOS 4,


124
00:06:53,516 --> 00:06:57,646
and if you guys aren't
using this for your kind


125
00:06:57,646 --> 00:07:01,176
of UI view level
transitions, you probably want


126
00:07:01,276 --> 00:07:03,966
to take your view controllers
in for a tune-up, and your views


127
00:07:03,966 --> 00:07:05,186
in for a tune-up as well.


128
00:07:05,906 --> 00:07:11,136
So let's look and see
what the connection is


129
00:07:11,166 --> 00:07:14,756
between this method
and core animation.


130
00:07:14,756 --> 00:07:19,496
You don't really need to know
much about core animation


131
00:07:19,496 --> 00:07:24,416
to use the UI kit
animation APIs, but it helps


132
00:07:24,416 --> 00:07:27,056
to have a little bit of depth
to understand what's going on.


133
00:07:27,826 --> 00:07:32,546
So inside of this block
-- this animation block,


134
00:07:32,996 --> 00:07:36,346
you can update arbitrary
properties on your views.


135
00:07:37,926 --> 00:07:42,286
Views are layer backed in UI
kit, and on iOS for that matter,


136
00:07:42,856 --> 00:07:44,786
and as you update
those properties,


137
00:07:45,476 --> 00:07:49,136
the various properties are kind
of updated at the layer level.


138
00:07:49,736 --> 00:07:56,896
And when you're in that block,
core animation objects get added


139
00:07:56,896 --> 00:07:59,116
to the layer, and that's
actually what's driving the


140
00:07:59,116 --> 00:08:01,596
animations that you
see throughout iOS.


141
00:08:01,716 --> 00:08:08,706
Sometimes you get caught
within of the dynamic scope


142
00:08:08,706 --> 00:08:11,316
of these blocks, and
you don't expect to be.


143
00:08:11,906 --> 00:08:13,776
And so we added some
API that you could --


144
00:08:13,776 --> 00:08:16,516
I mean a long time ago that you
could disable and enable whether


145
00:08:16,516 --> 00:08:20,836
or not you wanted the properties
that you were tweaking


146
00:08:20,836 --> 00:08:22,366
to actually be animated.


147
00:08:24,266 --> 00:08:26,926
This API has a little
bit of problems,


148
00:08:26,926 --> 00:08:29,876
in particular I can't tell you
the number of bugs I've gotten


149
00:08:29,876 --> 00:08:33,566
where somebody forgets to set
it back to the right value,


150
00:08:33,566 --> 00:08:36,876
and things don't animate,
and all hell breaks out.


151
00:08:37,496 --> 00:08:39,296
So we've added this
block-based API


152
00:08:39,296 --> 00:08:44,876
that you can basically execute
code which will guarantee not


153
00:08:44,876 --> 00:08:48,416
to animate, if it's executed
in the block that you pass


154
00:08:48,416 --> 00:08:49,876
in to perform without animation.


155
00:08:52,416 --> 00:08:56,146
Okay, so now to something
new, spring animations.


156
00:08:57,266 --> 00:09:03,166
Great thing is you don't
have to know about, you know,


157
00:09:03,166 --> 00:09:06,536
solutions to single dimensional
harmonic oscillators.


158
00:09:06,916 --> 00:09:09,106
The reality is we --


159
00:09:09,626 --> 00:09:13,616
people actually kind of iterate
the values, the damping ratio,


160
00:09:13,616 --> 00:09:17,946
and the spring velocities which
are two new terms, or parameters


161
00:09:17,946 --> 00:09:19,576
that we've added
to some new API.


162
00:09:20,266 --> 00:09:24,906
And basically we support
critically damped oscillations


163
00:09:24,996 --> 00:09:27,276
to under-damped oscillations.


164
00:09:27,276 --> 00:09:29,656
We don't do over-dampen.


165
00:09:30,346 --> 00:09:32,026
And the API looks like this.


166
00:09:32,026 --> 00:09:35,186
It looks pretty familiar, except
it has those two new parameters.


167
00:09:35,496 --> 00:09:38,836
And I'm going to
show some examples


168
00:09:38,836 --> 00:09:42,236
of this later on in the talk.


169
00:09:42,736 --> 00:09:47,416
Key frame animations, animate
key frames with duration is


170
00:09:47,446 --> 00:09:51,726
to CA key frame animation
as animate with duration is


171
00:09:51,726 --> 00:09:52,996
to CA basic animation.


172
00:09:53,166 --> 00:09:56,466
Yeah, I have some kids who
just go through their SATs,


173
00:09:56,466 --> 00:09:59,276
so I thought an analogy
would be good.


174
00:10:01,056 --> 00:10:04,926
So you specify key frames
within the animation block,


175
00:10:05,186 --> 00:10:09,516
we've augmented the options to
include the calculation mode.


176
00:10:09,866 --> 00:10:12,976
It can pose as great with other
UI view animation methods.


177
00:10:13,236 --> 00:10:16,726
So there it goes for
your use in iOS 7.


178
00:10:16,726 --> 00:10:19,196
What's a little bit different
is this add key frame


179
00:10:19,196 --> 00:10:20,486
with relative start time.


180
00:10:21,326 --> 00:10:23,926
The way you'd structure your
code is something like that.


181
00:10:24,706 --> 00:10:27,886
Those add key frames are
actually the key frame values


182
00:10:27,886 --> 00:10:30,016
of the particular
property most likely,


183
00:10:30,016 --> 00:10:32,476
or they could be
multiple properties


184
00:10:32,716 --> 00:10:35,416
at different points
in the animation.


185
00:10:37,496 --> 00:10:42,116
Finally I wanted -- have a small
callout to the new snapshot API,


186
00:10:42,346 --> 00:10:46,466
because with these snapshots,
for one thing they're nice


187
00:10:46,466 --> 00:10:49,746
and efficient, but for the other
thing is this snapshot API lets


188
00:10:49,746 --> 00:10:52,406
you build some really incredible
transitions, and we're going


189
00:10:52,406 --> 00:10:53,656
to show some of those as well.


190
00:10:55,016 --> 00:10:58,726
An interesting point to note
is when you create a snapshot,


191
00:10:58,726 --> 00:11:00,616
you can create snapshots
of snapshots,


192
00:11:00,616 --> 00:11:02,446
and that can also
be pretty useful.


193
00:11:03,016 --> 00:11:09,186
Okay, UI kit dynamics,
it's distinct from all


194
00:11:09,186 --> 00:11:12,186
of the UI view animation APIs,
it's important to understand


195
00:11:12,186 --> 00:11:14,316
that because there's
some kind of tricks --


196
00:11:14,316 --> 00:11:15,626
or not tricks, but helper --


197
00:11:15,626 --> 00:11:18,726
there's a helper class that we
offer that really only works


198
00:11:18,726 --> 00:11:22,526
if your transition -- if your
custom transition is using the


199
00:11:22,526 --> 00:11:23,886
UI view animation API.


200
00:11:24,086 --> 00:11:26,076
We're going to talk
about this a lot more


201
00:11:26,356 --> 00:11:27,876
in this morning's advanced --


202
00:11:27,876 --> 00:11:32,446
in this afternoon's advanced
dynamics talk, so I invite you


203
00:11:32,446 --> 00:11:34,596
to that if you find
this stuff interesting.


204
00:11:35,686 --> 00:11:39,026
Okay, first of all I want to --
the room to take a deep breath.


205
00:11:39,296 --> 00:11:41,186
This stuff is really
easy to use.


206
00:11:41,886 --> 00:11:43,696
A lot of people that
I've showed it


207
00:11:43,696 --> 00:11:46,256
to get a little bit
confused, but it really is.


208
00:11:46,596 --> 00:11:48,746
So first of all,
presentations and dismissals.


209
00:11:48,746 --> 00:11:53,176
You can customize your
full-screen presentations,


210
00:11:54,076 --> 00:11:56,306
but we added a new
modal presentation type,


211
00:11:56,676 --> 00:11:59,326
which is presentation
custom, fancy that.


212
00:11:59,326 --> 00:12:00,796
And the difference with --


213
00:12:00,796 --> 00:12:03,066
about that is that it
actually doesn't remove the


214
00:12:03,066 --> 00:12:05,046
from view controller from
the window hierarchy.


215
00:12:05,556 --> 00:12:08,926
So you can actually build your
own kind of form sheet type


216
00:12:08,926 --> 00:12:11,086
of presentation if you
wanted to on the phone.


217
00:12:11,086 --> 00:12:12,566
I'm going to show
you an example --


218
00:12:12,566 --> 00:12:15,076
a few examples of that actually.


219
00:12:15,426 --> 00:12:16,306
So that's what it is.


220
00:12:16,336 --> 00:12:19,456
We're going to talk about
the new things in a bit,


221
00:12:19,926 --> 00:12:23,176
but really you set
your presentation type,


222
00:12:23,176 --> 00:12:26,186
you create this new little
delegate object that you assign


223
00:12:26,186 --> 00:12:27,716
to the view controller
that you're presenting,


224
00:12:27,716 --> 00:12:30,296
and you call present view
controller, and you're done.


225
00:12:30,446 --> 00:12:32,106
That's it.


226
00:12:32,366 --> 00:12:35,976
Tab bar controller,
there's actually nothing


227
00:12:35,976 --> 00:12:36,786
to change there.


228
00:12:36,786 --> 00:12:38,176
You're just going
to set a delegate


229
00:12:38,476 --> 00:12:40,916
that vends [phonetic]
the right object.


230
00:12:41,626 --> 00:12:43,186
Same with navigation controller.


231
00:12:43,806 --> 00:12:46,186
So I'm giving you the
programmatic variance of this,


232
00:12:46,186 --> 00:12:49,866
but of course if you hit
buttons that effectively call


233
00:12:49,866 --> 00:12:52,806
into these code pads, you will
have your custom transitions


234
00:12:52,806 --> 00:12:55,476
for both navigation controller
and tab bar controller.


235
00:12:57,416 --> 00:12:59,796
So I mentioned about
navigation controller


236
00:12:59,796 --> 00:13:03,306
and collection view controller,
we can refer to those as layout


237
00:13:03,306 --> 00:13:05,336
to layout navigation
transitions.


238
00:13:06,686 --> 00:13:09,946
Basically all you need to do is
set that one property to yes,


239
00:13:10,726 --> 00:13:12,506
and push your view controllers.


240
00:13:12,656 --> 00:13:14,816
And all of the view
controllers that you push


241
00:13:14,816 --> 00:13:17,076
or pop will actually
be transitioning,


242
00:13:17,076 --> 00:13:21,316
using set collection
view layout.


243
00:13:21,486 --> 00:13:23,896
So that's pretty cool.


244
00:13:24,316 --> 00:13:25,596
So I'd like to take a minute


245
00:13:25,626 --> 00:13:29,196
to show you guys a small
demo app I wrote --


246
00:13:30,786 --> 00:13:35,216
nod to the demo Gods to
hope that it actually works.


247
00:13:35,576 --> 00:13:37,396
Oh look at that.


248
00:13:37,396 --> 00:13:40,596
Demo Gods are kind.


249
00:13:40,766 --> 00:13:44,776
So here we have this kind
of pretty simple app,


250
00:13:44,776 --> 00:13:47,356
it's kind of Ansel Adams'esque,


251
00:13:47,356 --> 00:13:50,866
and this was done even before I
knew we had a California theming


252
00:13:50,866 --> 00:13:51,826
thing going on.


253
00:13:52,236 --> 00:13:53,976
That's Yosemite in
the background.


254
00:13:55,036 --> 00:13:56,666
Basically, unless
I say differently,


255
00:13:56,666 --> 00:13:59,846
every transition you're going to
see here is a custom transition.


256
00:14:00,456 --> 00:14:02,096
So let's do the slide.


257
00:14:03,176 --> 00:14:05,826
Now you might think hey,
that's just a normal push.


258
00:14:06,306 --> 00:14:08,536
Well, look at the
navigation bar.


259
00:14:08,536 --> 00:14:10,546
There's a trans -- there's
kind of a cross fade.


260
00:14:10,806 --> 00:14:14,496
Any custom transition with the
navigation bar is actually going


261
00:14:14,566 --> 00:14:16,826
to -- I mean with the navigation
controller is actually going


262
00:14:16,826 --> 00:14:18,706
to do a cross fade on
the navigation bar.


263
00:14:19,276 --> 00:14:21,546
To highlight what
I am talking about,


264
00:14:21,546 --> 00:14:24,546
I'm going to change the edge
that we're going to go to.


265
00:14:24,546 --> 00:14:27,066
I might be doing this too fast,
but I'm going to change it


266
00:14:27,066 --> 00:14:28,026
to come in from the top.


267
00:14:28,586 --> 00:14:31,956
By the way, let me also
point out, you see that view


268
00:14:31,956 --> 00:14:32,946
that just got presented?


269
00:14:32,946 --> 00:14:36,446
That was a custom presentation.


270
00:14:36,786 --> 00:14:38,746
So it has the backdrop,
the dimming view,


271
00:14:38,746 --> 00:14:42,226
it's kind of a slow
form sheet on a phone.


272
00:14:42,626 --> 00:14:46,836
So if I do the slide again, oop
I'm coming down from the top.


273
00:14:46,956 --> 00:14:50,956
So all this is pretty
straightforward.


274
00:14:50,956 --> 00:14:51,896
Let's look at bouncing.


275
00:14:52,376 --> 00:14:54,806
So this is a spring
animation, and I want you


276
00:14:54,806 --> 00:14:59,106
to notice it's kind of a
under-damped coming in.


277
00:14:59,106 --> 00:15:02,356
You'll notice a little kind of
bounce that comes in and out


278
00:15:02,356 --> 00:15:06,016
of that, and then it's
critically damped going out.


279
00:15:06,056 --> 00:15:09,476
If we change the
damping ratio here


280
00:15:09,476 --> 00:15:13,276
to make it a little bit
more bouncy, you're going


281
00:15:13,866 --> 00:15:17,326
to see what happens,
that it's going to kind


282
00:15:17,326 --> 00:15:18,666
of overshoot and bounce.


283
00:15:18,666 --> 00:15:20,956
And so you can change these
parameters as you like,


284
00:15:20,956 --> 00:15:23,506
and get different types
of spring effects.


285
00:15:23,816 --> 00:15:26,066
And they're pretty performant.


286
00:15:26,336 --> 00:15:29,076
So for simple types of bounces,
you don't really need to go


287
00:15:29,076 --> 00:15:31,306
into UI kit dynamics
as an example.


288
00:15:32,026 --> 00:15:33,846
So now let's look at
key frame animations.


289
00:15:33,846 --> 00:15:36,316
I'm going to show you two
demos on key frame animation,


290
00:15:36,316 --> 00:15:39,256
but the first one I
call the foldout thing,


291
00:15:40,146 --> 00:15:43,876
and that's using snapshots
and key frames to do kind


292
00:15:43,876 --> 00:15:47,596
of an interesting
fold push or pop.


293
00:15:48,066 --> 00:15:55,246
I can actually make that work
on a presentation as well,


294
00:15:56,256 --> 00:15:58,746
and this is the exact same code,


295
00:15:58,746 --> 00:16:00,276
I'm just setting
different delegates.


296
00:16:00,276 --> 00:16:01,926
And the code that you've written


297
00:16:01,926 --> 00:16:04,566
for your transitions
is just going to work,


298
00:16:05,476 --> 00:16:07,136
whether it's a present, a push,


299
00:16:07,536 --> 00:16:10,046
tab bar controller
select, etcetera.


300
00:16:10,996 --> 00:16:12,856
So now I'm going to jump


301
00:16:12,856 --> 00:16:14,366
to something a little
bit different.


302
00:16:14,366 --> 00:16:16,166
I'm going to do a
collection view thing.


303
00:16:16,166 --> 00:16:18,256
Now this was a standard
transition.


304
00:16:18,256 --> 00:16:20,736
You'll notice if I hit the
-- kind of slide it out,


305
00:16:20,736 --> 00:16:23,926
notice how the navigation bar's
kind of doing that slide thing.


306
00:16:23,926 --> 00:16:26,566
That's the default
navigation bar transition,


307
00:16:27,076 --> 00:16:30,326
and this is the built-in
pop gesture on iOS 7.


308
00:16:30,666 --> 00:16:32,916
But now what we have is we have
the collection view controller


309
00:16:32,916 --> 00:16:33,666
that we pushed in.


310
00:16:33,666 --> 00:16:36,226
And when I tap on
one of these squares,


311
00:16:36,226 --> 00:16:37,686
I'm going to push another one.


312
00:16:38,066 --> 00:16:40,326
And you'll notice
that we're still


313
00:16:40,326 --> 00:16:41,596
in the navigation controller,


314
00:16:41,596 --> 00:16:44,356
and we've changed
view controllers,


315
00:16:44,356 --> 00:16:48,176
but the navigation bar now works


316
00:16:48,176 --> 00:16:49,686
with your collection
view layout.


317
00:16:49,686 --> 00:16:55,726
And what's interesting is the
built-in pop gesture works too.


318
00:16:56,556 --> 00:16:57,576
You get that for free.


319
00:16:57,826 --> 00:17:01,066
So I'm not going to talk
much about UI kit dynamics,


320
00:17:01,216 --> 00:17:02,636
but I do want to
whet your appetite


321
00:17:02,636 --> 00:17:03,896
for this afternoon's talk.


322
00:17:04,566 --> 00:17:08,496
So here we go, here's
a drop animation.


323
00:17:08,496 --> 00:17:10,376
This is a dialog that comes in,


324
00:17:10,866 --> 00:17:13,965
and give you something
nice to know.


325
00:17:13,965 --> 00:17:16,396
You notice how it came in,
it bounced a little bit,


326
00:17:17,685 --> 00:17:18,935
and now I want to dismiss it,


327
00:17:20,215 --> 00:17:23,576
and [laughter] I'm not saying
that's good UI [laughter], but,


328
00:17:23,576 --> 00:17:26,836
you know, it's kind of cool.


329
00:17:26,836 --> 00:17:33,676
Okay, so let's talk a little
bit about how to do this.


330
00:17:34,256 --> 00:17:35,236
Transitions.


331
00:17:35,436 --> 00:17:39,826
I'm going to -- this is
kind of a stylized rendition


332
00:17:39,896 --> 00:17:44,146
of a push transition on
a navigation controller.


333
00:17:44,146 --> 00:17:46,076
The blue is the view hierarchy,


334
00:17:46,076 --> 00:17:47,966
the yellow is the view
controller hierarchy,


335
00:17:48,496 --> 00:17:50,566
and basically the
definition of the start state


336
00:17:50,566 --> 00:17:52,576
and the end state,
'cause the transition


337
00:17:52,576 --> 00:17:55,996
between states is the
view controller hierarchy


338
00:17:55,996 --> 00:17:57,796
and the view hierarchy,
they're consistent.


339
00:17:58,466 --> 00:18:02,466
Now to move from one to the
other, you go through this kind


340
00:18:02,466 --> 00:18:03,946
of inconsistent phase.


341
00:18:04,336 --> 00:18:07,616
And so basically now
we have, you know,


342
00:18:07,616 --> 00:18:10,466
we have the child view hierarchy
that's a little bit different


343
00:18:10,466 --> 00:18:11,876
than the view controller
hierarchy,


344
00:18:11,876 --> 00:18:13,936
and we're in -- we're
transition.


345
00:18:15,126 --> 00:18:18,566
And part of a transition
is to animate,


346
00:18:19,516 --> 00:18:21,846
and you add child B's view in,


347
00:18:21,846 --> 00:18:24,336
you do whatever snazzy
animation you want.


348
00:18:25,546 --> 00:18:26,576
Things are looking good.


349
00:18:26,576 --> 00:18:29,006
They're not -- you're not
fully consistent yet though


350
00:18:29,906 --> 00:18:32,086
until you do something else,
because we have a lot of things


351
00:18:32,086 --> 00:18:33,986
that need to get wired
up again in terms


352
00:18:33,986 --> 00:18:39,646
of our internal data
structures and the like.


353
00:18:41,076 --> 00:18:43,726
So, the states are consistent
view controller hierarchy


354
00:18:43,726 --> 00:18:44,776
and view hierarchy,


355
00:18:44,936 --> 00:18:47,286
you transition programmatically
hitting a button,


356
00:18:48,686 --> 00:18:52,546
and there's a few things
that we do to figure


357
00:18:52,546 --> 00:18:54,886
out where you should
start, where you should end,


358
00:18:54,886 --> 00:18:58,826
and what you need to do to
finish, and basically that's it.


359
00:18:59,086 --> 00:19:00,136
So that highlighted --


360
00:19:00,696 --> 00:19:03,386
those highlighted statements
are what we've reified


361
00:19:03,466 --> 00:19:05,216
into a new system object.


362
00:19:05,606 --> 00:19:08,486
And this system object is going
to be pretty critical for you


363
00:19:08,486 --> 00:19:11,236
when you're building
your custom transitions.


364
00:19:11,236 --> 00:19:13,766
It's called UI view controller
context transitioning.


365
00:19:14,196 --> 00:19:17,016
We have a competition
in UI kit to come


366
00:19:17,016 --> 00:19:18,396
up with the longest names.


367
00:19:18,976 --> 00:19:21,896
I'm a contender, but
I haven't won yet.


368
00:19:23,486 --> 00:19:26,746
And so this transitioning
object has some interesting bits


369
00:19:26,746 --> 00:19:27,476
of information.


370
00:19:27,476 --> 00:19:29,276
One is the view in
which you animate,


371
00:19:29,526 --> 00:19:32,236
that's an important thing
to know, the other is


372
00:19:32,236 --> 00:19:34,296
where you started from,
where you're ending.


373
00:19:34,646 --> 00:19:37,396
It's important to
actually start and end


374
00:19:37,396 --> 00:19:39,946
from where the system
wants you to start and end.


375
00:19:40,386 --> 00:19:43,766
And then there's this method
called complete transition.


376
00:19:43,766 --> 00:19:46,056
It's kind of a callback
that you do at the end.


377
00:19:46,056 --> 00:19:48,046
And if you don't do that,
we're not going to be back


378
00:19:48,046 --> 00:19:49,226
into a consistent state.


379
00:19:49,226 --> 00:19:54,866
So this object that gets passed
into a number of our other --


380
00:19:54,866 --> 00:19:58,206
a number of the objects that
you are going to create and vend


381
00:19:58,206 --> 00:20:00,196
to create your custom
transitions needs


382
00:20:00,196 --> 00:20:01,586
to call back into that method.


383
00:20:01,976 --> 00:20:04,836
So this is one of the objects
that you will be creating.


384
00:20:04,836 --> 00:20:07,876
It will be any object that
conforms to this protocol,


385
00:20:08,596 --> 00:20:10,616
UI view controller
animated transitioning.


386
00:20:11,186 --> 00:20:12,606
There's two required methods,


387
00:20:12,606 --> 00:20:14,646
you've got to tell it how
long is this transition going


388
00:20:14,646 --> 00:20:17,186
to take, and then you've got to
implement animate transition.


389
00:20:17,266 --> 00:20:19,056
And you'll notice that
it's passed in one


390
00:20:19,056 --> 00:20:20,436
of those context objects.


391
00:20:20,756 --> 00:20:23,376
So let's go back to the
intermediate step here.


392
00:20:23,376 --> 00:20:26,726
So what's going to happen is
the system is going to call you.


393
00:20:26,726 --> 00:20:28,926
You've done push view
controller, the system is going


394
00:20:28,926 --> 00:20:31,456
to call you at some
point and say okay,


395
00:20:31,456 --> 00:20:32,576
animate your transition.


396
00:20:33,106 --> 00:20:36,876
You're going to put your
child view controller's view


397
00:20:37,016 --> 00:20:39,106
into that parent container view,


398
00:20:39,856 --> 00:20:42,646
do your fantastic
animation using all


399
00:20:42,646 --> 00:20:47,286
of those new UI view animation
APIs, and then at the end


400
00:20:47,286 --> 00:20:49,306
of the day when the
transition is done, you're going


401
00:20:49,306 --> 00:20:51,936
to call the context complete
transition, and you're back


402
00:20:51,936 --> 00:20:52,876
into a consistent state.


403
00:20:53,466 --> 00:20:54,346
That's really it.


404
00:20:54,806 --> 00:20:58,126
I'm going to go through
this a few different times


405
00:20:58,126 --> 00:21:00,736
and a few different
ways, so that we'll try


406
00:21:00,736 --> 00:21:03,896
to demystify some of this stuff.


407
00:21:05,266 --> 00:21:08,716
First of all, you vend these
objects with delegates.


408
00:21:08,826 --> 00:21:10,826
There's a new transitioning
delegate protocol


409
00:21:10,826 --> 00:21:13,056
that we've added, and we've
augmented the navigation


410
00:21:13,056 --> 00:21:14,976
controller and tab bar
controller delegate.


411
00:21:15,486 --> 00:21:16,866
And those delegates are going


412
00:21:16,866 --> 00:21:19,746
to vend these animated
transitioning objects,


413
00:21:19,746 --> 00:21:21,766
as well as an interactive
transitioning object,


414
00:21:21,766 --> 00:21:24,456
which we're going to talk
about in a few minutes.


415
00:21:24,456 --> 00:21:25,966
I'm pushing kind
of interactivity


416
00:21:25,966 --> 00:21:26,826
to the side right now.


417
00:21:27,566 --> 00:21:29,866
And all of these are
pass at context object,


418
00:21:29,866 --> 00:21:31,076
and that's a system object.


419
00:21:31,076 --> 00:21:34,636
You are most likely not going
to ever have to create an object


420
00:21:34,636 --> 00:21:37,256
that conforms to the context
transitioning protocol,


421
00:21:37,906 --> 00:21:40,296
however you do need to
create objects that conform


422
00:21:40,296 --> 00:21:41,346
to those other protocols.


423
00:21:42,076 --> 00:21:43,256
So let's look at this again.


424
00:21:43,306 --> 00:21:45,636
As I said, I'm going to do this
a couple of different ways,


425
00:21:46,476 --> 00:21:48,796
because I've been informed
that it can be confusing.


426
00:21:49,166 --> 00:21:51,286
So first of all, you set
the transitioning delegate.


427
00:21:51,286 --> 00:21:53,566
I'm kind of walking
through what do you do


428
00:21:53,566 --> 00:21:54,976
for a custom presentation.


429
00:21:57,966 --> 00:21:59,336
You say present view controller.


430
00:22:00,656 --> 00:22:04,946
The system is going to ask your
delegate, if you've set one,


431
00:22:05,396 --> 00:22:07,716
do you have an animation
controller for me to use?


432
00:22:08,016 --> 00:22:11,506
And if you have implemented
that method on the delegate,


433
00:22:11,506 --> 00:22:14,806
and you vend one of these
objects, then we're going


434
00:22:14,806 --> 00:22:16,186
to do something slightly
different.


435
00:22:16,806 --> 00:22:19,686
We're going to ask you at some
point how long is the transition


436
00:22:19,686 --> 00:22:22,516
going to take, and we are going
to call animate transition


437
00:22:22,516 --> 00:22:25,256
on your object, passing
in one of these contexts.


438
00:22:26,386 --> 00:22:28,056
Finally when your
animation is done,


439
00:22:28,056 --> 00:22:29,456
you call complete transition.


440
00:22:30,676 --> 00:22:32,386
Got it? Complete transition.


441
00:22:32,966 --> 00:22:34,376
You don't call complete
transition,


442
00:22:34,806 --> 00:22:35,886
and you'll be unhappy.


443
00:22:36,356 --> 00:22:41,726
Okay. Let's look at it
slightly differently,


444
00:22:41,766 --> 00:22:44,586
let's look at it as code.


445
00:22:44,586 --> 00:22:46,316
Code, this kind of
looks pretty standard.


446
00:22:46,316 --> 00:22:48,576
You set the delegate, you
set the presentation style,


447
00:22:48,576 --> 00:22:49,596
you're off to the races.


448
00:22:49,596 --> 00:22:49,996
You present.


449
00:22:50,996 --> 00:22:52,576
This is code that
gets a call back.


450
00:22:52,736 --> 00:22:55,276
This is not within the same
dynamic scope necessarily,


451
00:22:55,276 --> 00:22:57,206
but we're going to call
back into you asking you


452
00:22:57,266 --> 00:22:58,566
for the animation controller.


453
00:22:59,076 --> 00:23:04,116
At some point later we're going
to say animate, transition,


454
00:23:04,386 --> 00:23:05,896
and this is your code.


455
00:23:06,466 --> 00:23:08,416
You're going to basically
implement that method


456
00:23:08,416 --> 00:23:10,906
on your object that conforms


457
00:23:10,906 --> 00:23:13,786
to the animated transitioning
protocol, you're going


458
00:23:13,786 --> 00:23:16,986
to add the sub-view into the
container view, you're doing


459
00:23:16,986 --> 00:23:18,506
to do some great animation.


460
00:23:18,876 --> 00:23:22,366
And then one standard technique
is in the completion block


461
00:23:22,526 --> 00:23:24,766
of the animate with
duration method,


462
00:23:24,766 --> 00:23:26,336
you will call complete
transition.


463
00:23:26,896 --> 00:23:34,756
Okay. So let's look a little
bit at some of these new APIs.


464
00:23:34,866 --> 00:23:37,816
They're really, you know,
you can look at the docs,


465
00:23:37,816 --> 00:23:39,146
you can look at the
header files,


466
00:23:39,446 --> 00:23:41,186
but these are pretty
straight forward.


467
00:23:41,186 --> 00:23:44,666
These are -- this is the new
transitioning delegate protocol.


468
00:23:45,276 --> 00:23:47,506
The same thing for the
animation controller goes


469
00:23:47,606 --> 00:23:51,546
for an interaction controller,
which we're going to talk about.


470
00:23:51,656 --> 00:23:55,976
View controller has grown a
transitioning delegate property.


471
00:23:55,976 --> 00:23:58,326
It's set on the presented
controller.


472
00:23:58,736 --> 00:24:02,356
Just to make it clear, that's
kind of consistent with a lot


473
00:24:02,356 --> 00:24:05,386
of the previous ways


474
00:24:05,386 --> 00:24:08,686
that presentations
are kind of refined.


475
00:24:09,266 --> 00:24:11,726
You set your values on
the presented controller.


476
00:24:12,326 --> 00:24:14,066
We've grown a couple
of new methods


477
00:24:14,066 --> 00:24:15,516
for the navigation controller,


478
00:24:16,056 --> 00:24:18,636
again one for animation
controllers,


479
00:24:18,636 --> 00:24:20,126
one for interaction controllers,


480
00:24:20,416 --> 00:24:22,126
and ditto for tab
bar controller,


481
00:24:22,276 --> 00:24:26,636
kind of nothing too much
to talk about there.


482
00:24:26,956 --> 00:24:33,466
But the objects that they vend
have some interesting beef


483
00:24:33,466 --> 00:24:33,806
to them.


484
00:24:34,106 --> 00:24:36,806
First of all, they need to
implement animate transition.


485
00:24:37,026 --> 00:24:40,376
And the implementation of
animate transition needs --


486
00:24:40,376 --> 00:24:41,906
is -- takes responsibility


487
00:24:41,936 --> 00:24:44,226
for inserting the two
view controllers view


488
00:24:44,496 --> 00:24:45,506
in the container view.


489
00:24:46,306 --> 00:24:48,186
That's because we don't know
what your animation is going


490
00:24:48,186 --> 00:24:50,476
to be, and you might want to
put it in different places,


491
00:24:50,476 --> 00:24:53,546
you might want to put it
above, below some other views.


492
00:24:53,786 --> 00:24:57,446
So it's your responsibility
to do that.


493
00:24:57,656 --> 00:24:59,226
You need to make sure
that the two in view --


494
00:24:59,676 --> 00:25:02,026
that the to and from view
controllers' views are


495
00:25:02,026 --> 00:25:05,706
where they need to be, and
you call complete transition.


496
00:25:06,206 --> 00:25:07,306
Okay, let's talk a little bit


497
00:25:07,306 --> 00:25:10,166
about interactive view
controller transitions.


498
00:25:10,166 --> 00:25:13,526
Now interactive transitions
is kind of a whole new thing.


499
00:25:13,936 --> 00:25:19,006
As I said, the pop
gesture is pervasive,


500
00:25:19,006 --> 00:25:22,486
and probably you guys are going
to want to do something similar


501
00:25:22,486 --> 00:25:23,946
with some of your
view controllers.


502
00:25:24,436 --> 00:25:28,046
I've mentioned you can use
-- you can create your own.


503
00:25:28,816 --> 00:25:33,206
I should also mention as an
aside that you can get a handle


504
00:25:33,206 --> 00:25:36,616
on the default navigation
controller's pop


505
00:25:36,616 --> 00:25:37,826
gesture recognizer.


506
00:25:37,826 --> 00:25:41,096
So you can create dependencies
on it in case you have content


507
00:25:41,166 --> 00:25:43,106
that perhaps you
don't want to --


508
00:25:43,736 --> 00:25:46,446
that has its own gesture
recognizers that you don't want


509
00:25:46,446 --> 00:25:48,356
to collide with the
pop gesture recognizer.


510
00:25:51,596 --> 00:25:54,306
Interesting is that
although it might seem


511
00:25:54,306 --> 00:25:56,826
that all interactive
transitions might be driven


512
00:25:56,826 --> 00:26:00,016
by gesture recognizers, that
isn't necessarily the case.


513
00:26:00,016 --> 00:26:03,306
You can -- anything that you
can drive programmatically


514
00:26:03,306 --> 00:26:06,186
in an iterative way can
actually be the source


515
00:26:06,186 --> 00:26:07,846
of an interactive transition.


516
00:26:09,056 --> 00:26:13,416
They typically go forward,
move forwards and backwards,


517
00:26:13,806 --> 00:26:18,116
and they can often be cancelled
by -- they usually are started,


518
00:26:18,116 --> 00:26:23,426
if they're not started we're --
we have nothing to talk about.


519
00:26:23,506 --> 00:26:28,866
We provide this -- the only
concrete class that we provide


520
00:26:28,866 --> 00:26:31,356
for all of this is
the UI percent driven


521
00:26:31,356 --> 00:26:32,536
interaction transition.


522
00:26:33,216 --> 00:26:34,486
And what's great about this is


523
00:26:34,486 --> 00:26:37,806
that if you use a
UI view animation --


524
00:26:37,806 --> 00:26:41,996
the UI view animation APIs in
your animate transition method,


525
00:26:41,996 --> 00:26:47,936
we're going to take care of, you
know, reversing the animation,


526
00:26:47,936 --> 00:26:49,866
cancelling it, doing
all that stuff.


527
00:26:49,866 --> 00:26:51,876
You don't even have to call
the context transition --


528
00:26:51,876 --> 00:26:54,256
the context object with
complete transition.


529
00:26:54,526 --> 00:26:58,736
And so we're going to show a
couple of examples of that.


530
00:26:58,846 --> 00:27:02,246
The protocol for interactive
transitioning really couldn't


531
00:27:02,246 --> 00:27:02,796
be simpler.


532
00:27:03,176 --> 00:27:04,676
Start interactive transition.


533
00:27:05,306 --> 00:27:09,526
That's called instead
of animate transition


534
00:27:10,336 --> 00:27:11,996
on the animation controller.


535
00:27:12,246 --> 00:27:17,246
Now it doesn't mean that
you don't need an animate


536
00:27:17,246 --> 00:27:19,076
transition, because
maybe your inner --


537
00:27:19,076 --> 00:27:21,206
maybe your transition isn't
going to be interactive.


538
00:27:21,756 --> 00:27:25,596
Moreover, your start interactive
transition is free to call


539
00:27:25,596 --> 00:27:28,666
out to the animation
controller's animate


540
00:27:28,666 --> 00:27:30,546
transmission, as makes sense.


541
00:27:31,326 --> 00:27:36,936
Those last optional properties
are most often used for the sake


542
00:27:36,936 --> 00:27:39,196
of the UI percent driven
interaction transition,


543
00:27:39,196 --> 00:27:43,146
and so when the interactive
portion of a transition stops,


544
00:27:43,596 --> 00:27:46,586
you can kind of tell it
to speed up, slow down,


545
00:27:46,586 --> 00:27:51,186
change its timing curve to
kind of finish the transition.


546
00:27:51,726 --> 00:27:55,496
So let's go to this sequence
again and see what's different


547
00:27:55,496 --> 00:27:57,156
between interactive
transitioning


548
00:27:57,586 --> 00:27:59,536
and just non-interactive
transitioning.


549
00:27:59,536 --> 00:28:01,156
So far everything
looks the same.


550
00:28:02,196 --> 00:28:03,376
What's different is this.


551
00:28:03,876 --> 00:28:05,866
In addition to asking for
the animation controller,


552
00:28:05,866 --> 00:28:07,376
we ask for an interaction
controller.


553
00:28:07,726 --> 00:28:09,486
If you don't provide an
animation controller,


554
00:28:09,486 --> 00:28:11,156
we're never going to
ask the second question.


555
00:28:11,756 --> 00:28:13,516
So you need to implement
both if you want


556
00:28:13,516 --> 00:28:16,286
to implement interactive
transitions.


557
00:28:16,966 --> 00:28:20,996
We're going to go through
this little picture,


558
00:28:20,996 --> 00:28:23,496
because I think it's
illustrative of some


559
00:28:23,496 --> 00:28:24,736
of the differences in terms


560
00:28:24,736 --> 00:28:27,776
of what an interactive
transition entails.


561
00:28:28,696 --> 00:28:30,166
First of all, we're
going to start


562
00:28:30,166 --> 00:28:32,266
with this interactive
event handler.


563
00:28:32,266 --> 00:28:33,536
I've kind of made it generic,


564
00:28:33,536 --> 00:28:35,956
but let's imaging it's
a gesture recognizer.


565
00:28:35,956 --> 00:28:38,256
And your gesture is going
to commence, and it's going


566
00:28:38,256 --> 00:28:39,766
to say okay, this
-- I'm good to go,


567
00:28:39,766 --> 00:28:41,336
start interactive transition.


568
00:28:41,336 --> 00:28:44,866
And it's going to do that
by doing push, pop, present.


569
00:28:44,976 --> 00:28:46,946
It doesn't call start
interactive transition.


570
00:28:47,386 --> 00:28:49,676
The system calls start
interactive transition.


571
00:28:49,916 --> 00:28:52,236
And once that happens, we're
going to call that method


572
00:28:52,236 --> 00:28:54,906
on the interaction controller
that you vend, and now we're


573
00:28:54,906 --> 00:28:57,206
in this update interactive
transition state.


574
00:28:57,546 --> 00:29:00,156
And your gesture
recognizer is basically going


575
00:29:00,156 --> 00:29:02,906
to be constantly calling
update interactive transition,


576
00:29:03,326 --> 00:29:05,206
based on what's going
on with your gesture.


577
00:29:05,206 --> 00:29:07,826
You might be computing
a percent complete,


578
00:29:07,826 --> 00:29:09,446
you can compute a bunch
of different things.


579
00:29:09,446 --> 00:29:11,236
But you're going to
be driving it there.


580
00:29:11,886 --> 00:29:14,836
At some point, the
gesture is going to end,


581
00:29:14,836 --> 00:29:17,686
or the interactive portion of
the transition is going to end,


582
00:29:18,376 --> 00:29:21,076
and for illustrative purposes,


583
00:29:21,076 --> 00:29:23,116
we're going through
the finish path,


584
00:29:23,436 --> 00:29:25,796
which means that we're actually
completing the transition


585
00:29:25,796 --> 00:29:26,336
we started.


586
00:29:26,716 --> 00:29:28,076
But you might decide to go


587
00:29:28,076 --> 00:29:29,746
through a different
path altogether,


588
00:29:29,746 --> 00:29:31,866
and that's the transition
cancelling up there.


589
00:29:32,626 --> 00:29:35,916
We're going to call the
context finish interactive


590
00:29:35,916 --> 00:29:42,466
transitioning, and then in this
particular case the interaction


591
00:29:42,466 --> 00:29:45,136
controller has decided it's
going to finish the transition


592
00:29:45,136 --> 00:29:47,486
by calling the animation
controller's animate


593
00:29:47,486 --> 00:29:48,246
transition method.


594
00:29:48,916 --> 00:29:54,356
You don't need to do that, but
it often is convenient to do so.


595
00:29:54,716 --> 00:29:59,066
And in the case of UI percent
driven interactive transitions,


596
00:29:59,066 --> 00:30:00,326
that's in fact what we do.


597
00:30:00,916 --> 00:30:06,326
Finally, animation ends,
complete transition is called,


598
00:30:06,326 --> 00:30:08,326
and you're back into
a consistent state,


599
00:30:08,326 --> 00:30:10,036
and your interactive
transition is over.


600
00:30:10,946 --> 00:30:12,576
So that's what's different.


601
00:30:12,576 --> 00:30:14,786
I'm going to highlight
what's a little bit different


602
00:30:14,906 --> 00:30:16,556
about interactive transitions.


603
00:30:17,026 --> 00:30:19,486
First of all, there's
a start, which is kind


604
00:30:19,486 --> 00:30:22,076
of the interactive phase,
then there's a phase


605
00:30:22,076 --> 00:30:24,796
which is the transition
finishes, it's animating


606
00:30:24,796 --> 00:30:29,106
in one direction or the other,
and it can either be cancelling


607
00:30:29,216 --> 00:30:31,286
or finishing, and
then we complete.


608
00:30:31,696 --> 00:30:34,136
So the easy way to do all
of this is, as I said,


609
00:30:34,226 --> 00:30:38,446
use the UI view controller
percent driven transition,


610
00:30:38,476 --> 00:30:42,286
you have to implement
animate presentation


611
00:30:43,076 --> 00:30:44,386
on your animation controller,


612
00:30:44,736 --> 00:30:46,956
and then your gesture
recognizer is going to drive it,


613
00:30:47,226 --> 00:30:53,736
or whatever your generator for
the interactive transition is.


614
00:30:54,246 --> 00:30:55,936
Typically we sub-class this.


615
00:30:56,056 --> 00:30:58,426
You don't have to, but
it's useful to do so.


616
00:30:59,206 --> 00:31:01,806
And instead of calling any --


617
00:31:02,006 --> 00:31:04,416
out to any of the context
methods, you're just going


618
00:31:04,416 --> 00:31:08,486
to call out to the instance of
the percent-driven transition,


619
00:31:08,966 --> 00:31:12,276
how much, how complete
you are or not, or whether


620
00:31:12,276 --> 00:31:14,796
or not the transition
was canceled


621
00:31:14,866 --> 00:31:16,246
or completed successfully.


622
00:31:16,806 --> 00:31:23,346
So, this is what percent-driven
interactive transition


623
00:31:23,346 --> 00:31:23,916
looks like.


624
00:31:24,306 --> 00:31:26,846
It has those three methods
that you are going to call.


625
00:31:28,366 --> 00:31:31,936
And this is another demo that
I actually forgot to give,


626
00:31:32,156 --> 00:31:35,626
which -- but this is an example


627
00:31:35,626 --> 00:31:41,576
of a tab bar controller
interactive transition using the


628
00:31:41,826 --> 00:31:42,976
percent-driven transition.


629
00:31:42,976 --> 00:31:44,576
And it's kind of cool.


630
00:31:44,576 --> 00:31:46,196
It's using key frame animation,


631
00:31:46,196 --> 00:31:48,436
it's using the new UI
view key frame animation,


632
00:31:48,436 --> 00:31:49,586
and it's implementing this kind


633
00:31:49,586 --> 00:31:54,166
of accordion transition
from tab to tab.


634
00:31:54,376 --> 00:31:57,446
This is the one that I showed
you, which was the fold one.


635
00:31:57,446 --> 00:31:58,446
And again, this is --


636
00:31:58,446 --> 00:32:01,656
the interactive portion
of this is driven


637
00:32:02,096 --> 00:32:03,636
with the percent-driven
transition.


638
00:32:03,716 --> 00:32:08,476
So that fold object, that
interactor is a sub-class


639
00:32:08,476 --> 00:32:10,586
of percent-driven
interactive transition.


640
00:32:11,386 --> 00:32:16,626
Those little methods in there,
those are methods that I define


641
00:32:16,626 --> 00:32:18,056
to make it easy to implement.


642
00:32:18,056 --> 00:32:18,816
One of the things I wanted


643
00:32:18,816 --> 00:32:22,986
to know is what the navigation
controller was that I was in.


644
00:32:22,986 --> 00:32:26,296
I also wanted to know if
things were interactive or not,


645
00:32:26,296 --> 00:32:29,016
because I could either
transition interactively


646
00:32:29,016 --> 00:32:30,126
or not interactively.


647
00:32:31,606 --> 00:32:33,346
That's the code, that's it.


648
00:32:33,716 --> 00:32:35,956
I've implemented a pinch
gesture recognizer.


649
00:32:36,636 --> 00:32:38,486
It hangs off of that sub-class


650
00:32:38,486 --> 00:32:42,176
of percent-driven interaction
transition, and all I need


651
00:32:42,176 --> 00:32:43,916
to do is when the
gesture begins,


652
00:32:43,916 --> 00:32:47,006
I call pop view controller,
when it continues


653
00:32:47,006 --> 00:32:48,996
as the pinch moves
I call update,


654
00:32:48,996 --> 00:32:50,456
I compute some percentage.


655
00:32:50,816 --> 00:32:53,346
I'm doing this based on
the scale of the pinch.


656
00:32:54,386 --> 00:32:57,306
And then when it ends,
I either call finish


657
00:32:57,306 --> 00:32:58,756
or cancel, and that's it.


658
00:32:58,756 --> 00:33:00,926
If you've sub-classed
percent-driven interaction


659
00:33:00,926 --> 00:33:03,266
transition, you're going to
get all of your interactivity


660
00:33:03,266 --> 00:33:05,996
with about that amount of
code, depending on the logic


661
00:33:05,996 --> 00:33:07,876
of your interactive stuff.


662
00:33:08,726 --> 00:33:11,806
So, we also do collection
view --


663
00:33:12,166 --> 00:33:14,516
interactive collection
view transitions,


664
00:33:14,516 --> 00:33:16,766
and we've grown the
API on collection view.


665
00:33:17,486 --> 00:33:19,396
I'm going to bring
up my colleague,


666
00:33:19,666 --> 00:33:23,976
who made me train a long time
to pronounce his last name.


667
00:33:24,306 --> 00:33:27,126
It's probably the hardest
part of this presentation.


668
00:33:27,336 --> 00:33:29,346
Olivier Gudkenesh [phonetic].


669
00:33:29,666 --> 00:33:32,536
>> One year of rehearsal
almost paid off.


670
00:33:32,786 --> 00:33:37,496
So I'd like to talk
about collection view.


671
00:33:38,826 --> 00:33:43,436
We have very nice interactive
API in view controllers.


672
00:33:43,436 --> 00:33:48,666
And what's great is we
also added a new API


673
00:33:48,666 --> 00:33:53,576
in collection view to drive
interactive layout transitions.


674
00:33:54,146 --> 00:33:56,826
So it's really easy to use
with a view controller API.


675
00:33:56,826 --> 00:34:01,676
And that new API is
actually a new layout,


676
00:34:02,426 --> 00:34:04,896
UICollectionView
TransitionLayout.


677
00:34:06,276 --> 00:34:10,946
And what that layout
implements actually is a way


678
00:34:11,456 --> 00:34:14,156
to interpolate between
two layouts.


679
00:34:14,696 --> 00:34:19,576
It can be interactive or not,
usually it is interactive


680
00:34:19,576 --> 00:34:23,676
with a simple transition
progress property.


681
00:34:24,946 --> 00:34:27,525
You can sub-class it,
which is really useful.


682
00:34:27,946 --> 00:34:33,326
And it was designed to be
really simple to integrate


683
00:34:33,326 --> 00:34:35,346
with interactive view
controller transitions.


684
00:34:35,726 --> 00:34:38,416
How does that work?


685
00:34:39,005 --> 00:34:41,786
Let's say that my current layout


686
00:34:41,786 --> 00:34:43,596
in my collection
view is layout A.


687
00:34:44,235 --> 00:34:47,726
The next layout is layout B.


688
00:34:48,216 --> 00:34:53,846
So today in iOS 6 you could
use set collection view layout,


689
00:34:53,846 --> 00:34:59,016
and you would pass yes,
and we would just animate.


690
00:34:59,016 --> 00:35:01,846
If you use a UI collection
view transition layout,


691
00:35:03,486 --> 00:35:07,146
you can actually drive
that transition progress,


692
00:35:07,606 --> 00:35:12,276
so at 0 it's going to be
exactly like layout A.


693
00:35:13,546 --> 00:35:19,756
But if you change that value to
0.5, from a gesture recognizer


694
00:35:19,756 --> 00:35:23,526
for instance, then we could
compute the interpolation


695
00:35:23,526 --> 00:35:25,256
between all these cells.


696
00:35:26,336 --> 00:35:30,246
And so when you drive
that to 100%,


697
00:35:30,696 --> 00:35:33,286
it's going to look
like the next layout.


698
00:35:33,286 --> 00:35:38,216
So you can drive back and
forth this transition progress.


699
00:35:38,936 --> 00:35:41,456
And UICollectionView
can go to 11.


700
00:35:42,166 --> 00:35:47,026
[Laughter] So we sometimes
have this really nice scale


701
00:35:47,026 --> 00:35:51,096
up at the end of a
transition, and then scale


702
00:35:51,096 --> 00:35:54,256
down back to the real value.


703
00:35:54,846 --> 00:35:56,916
And we do that for free,


704
00:35:57,106 --> 00:36:00,166
we do that in UI collection
view transition layout for you.


705
00:36:00,766 --> 00:36:01,846
You don't have to do anything.


706
00:36:02,586 --> 00:36:08,946
And you don't even need to drive
transitional progress past 1.0.


707
00:36:09,316 --> 00:36:12,896
We do that under the hood.


708
00:36:12,896 --> 00:36:14,896
How does that work?


709
00:36:15,096 --> 00:36:18,656
We added three new methods
in UICollectionView --


710
00:36:19,416 --> 00:36:23,616
start interactive transition
to collection view layout


711
00:36:24,056 --> 00:36:28,936
with a completion handler,
and I'm going to initiate


712
00:36:28,936 --> 00:36:32,686
that interactive transition
to the next layout.


713
00:36:33,576 --> 00:36:35,826
Then from your gesture
for instance,


714
00:36:35,826 --> 00:36:38,576
you can drive the
transition progress,


715
00:36:38,576 --> 00:36:42,286
because the value you
get here is an instance


716
00:36:42,326 --> 00:36:45,106
of UICollectionView
TransitionLayout.


717
00:36:46,556 --> 00:36:50,836
And when the gesture ends,
and you won't have to animate


718
00:36:50,836 --> 00:36:54,736
to the next layout, just call
finish interactive transition,


719
00:36:55,616 --> 00:37:01,016
or if you want to get back
the old current layout,


720
00:37:01,016 --> 00:37:03,816
just call cancel
interactive transition.


721
00:37:05,896 --> 00:37:10,286
There is a new delegate method
in UICollectionViewDelegate,


722
00:37:11,166 --> 00:37:15,216
collection view transition
layout for layout to new layout.


723
00:37:15,686 --> 00:37:20,216
Why that? You might want a
different interactive transition


724
00:37:20,216 --> 00:37:24,666
from layout A to layout B, but
something a little bit different


725
00:37:24,666 --> 00:37:26,706
from B to C or C to D.


726
00:37:26,836 --> 00:37:28,136
So you can actually tweak


727
00:37:28,486 --> 00:37:32,856
and return different collection
view transition layout


728
00:37:32,856 --> 00:37:35,446
sub-classes for all these cases.


729
00:37:36,726 --> 00:37:40,666
This does not replace the
existing setCollectionViewLayout


730
00:37:40,666 --> 00:37:42,926
animated, which is
completely automatic


731
00:37:42,926 --> 00:37:44,866
and really easy to use.


732
00:37:45,366 --> 00:37:47,986
Collection transition
layout is really useful is


733
00:37:49,456 --> 00:37:50,876
when you subclass it.


734
00:37:51,246 --> 00:37:56,566
Why? Because you can
tweak the cell positions


735
00:37:56,566 --> 00:37:58,426
in the layout attributes
we compute.


736
00:37:58,966 --> 00:38:02,716
Which means that you could drive
changes to cell positions based


737
00:38:03,136 --> 00:38:05,246
on the gesture position.


738
00:38:06,046 --> 00:38:07,606
What could I implement
with that?


739
00:38:08,296 --> 00:38:13,746
Photos, pinch and move,
really easy, 10 lines of code.


740
00:38:14,616 --> 00:38:19,146
And we do have sample code to
prove that, so you can check.


741
00:38:20,376 --> 00:38:22,936
How can you use that?


742
00:38:22,936 --> 00:38:25,836
You just create an
instance of your own class


743
00:38:27,016 --> 00:38:29,686
in this delegate method.


744
00:38:29,686 --> 00:38:34,116
And on finish or cancel what
happens is while you are


745
00:38:34,116 --> 00:38:37,266
changing this transition
progress property,


746
00:38:37,866 --> 00:38:40,736
we are actually tracking
the current velocity.


747
00:38:41,326 --> 00:38:45,006
So we will match that
when we finish or cancel


748
00:38:45,086 --> 00:38:48,106
and drive the end
of this animation.


749
00:38:48,716 --> 00:38:51,106
And because you might sub-class,


750
00:38:51,336 --> 00:38:54,956
you might have your own
parameters, it would be nice


751
00:38:54,956 --> 00:38:56,446
to be able to actually
participate


752
00:38:56,446 --> 00:38:58,786
in that nice velocity matching.


753
00:38:59,186 --> 00:39:03,766
So you can actually ask
us to track your values,


754
00:39:04,326 --> 00:39:09,796
and then in this final phase
you can access an updated value


755
00:39:09,796 --> 00:39:13,606
in sync with our own animation.


756
00:39:14,166 --> 00:39:18,366
So I'd like to show you
what you can do with that.


757
00:39:18,976 --> 00:39:25,956
A very simple custom
layout, a stack layout that's


758
00:39:25,956 --> 00:39:27,796
in a collection view
controller implemented


759
00:39:27,826 --> 00:39:30,296
in navigation controller.


760
00:39:30,726 --> 00:39:34,056
So I have this nice layout
to layout automatic mode.


761
00:39:34,486 --> 00:39:38,236
We add it to collection view
controller, so when I tap I go


762
00:39:38,236 --> 00:39:40,566
to the next collection
view controller.


763
00:39:40,886 --> 00:39:45,056
I can tap back, and I'm back --


764
00:39:45,056 --> 00:39:47,706
I'm back to the first
collection view controller.


765
00:39:48,266 --> 00:39:51,746
Plus I can also drive
interaction


766
00:39:51,746 --> 00:39:55,206
by implementing the interactive
view controller transitioning


767
00:39:55,206 --> 00:39:58,946
protocol with a gesture, and
I can do something like that.


768
00:40:00,876 --> 00:40:05,066
So the current layout right
now is a transition layout,


769
00:40:06,196 --> 00:40:10,856
I can cancel, and I'm back to
the first layout automatically.


770
00:40:11,866 --> 00:40:14,046
And I can pinch to completion.


771
00:40:14,596 --> 00:40:19,546
And that is the small
effect of the end.


772
00:40:19,546 --> 00:40:24,396
And what's great is I can pinch
back, which is actually a pop


773
00:40:24,396 --> 00:40:26,556
to the previous view controller.


774
00:40:26,826 --> 00:40:31,286
And pay attention to
the navigation bar.


775
00:40:31,786 --> 00:40:37,276
[ Silence ]


776
00:40:37,776 --> 00:40:39,556
And that's just one
line of code.


777
00:40:39,606 --> 00:40:43,246
Because the only thing I'm doing
is I'm using the view controller


778
00:40:43,246 --> 00:40:45,856
API to track this
percent progress.


779
00:40:46,276 --> 00:40:49,266
We have a few other
enhancements in collection view


780
00:40:49,266 --> 00:40:49,986
for transitions,


781
00:40:50,246 --> 00:40:52,666
targetContentOffset
FoProposedContentOffset.


782
00:40:53,876 --> 00:40:57,296
When you're updating data
sources, changing layouts,


783
00:40:57,296 --> 00:40:59,796
or changing bounds
for a collection view,


784
00:41:00,226 --> 00:41:05,406
we try to guess what is the
best content offset for that.


785
00:41:06,206 --> 00:41:10,896
Sometimes it's just our
best guess, but not correct.


786
00:41:10,896 --> 00:41:16,046
If you actually want to specify
exactly what this ending content


787
00:41:16,046 --> 00:41:19,096
offset should be, you
can implement this method


788
00:41:19,096 --> 00:41:20,406
in your layout, and we're going


789
00:41:20,406 --> 00:41:25,236
to use the exact
content offset you return


790
00:41:25,456 --> 00:41:29,236
for this bounds change,
data source update,


791
00:41:29,366 --> 00:41:31,476
or collection view
layout transition.


792
00:41:32,586 --> 00:41:36,286
We have three new method on
UI collection view layout,


793
00:41:36,286 --> 00:41:40,106
so you can be notified
when we are about to move


794
00:41:40,106 --> 00:41:44,596
to the next layout, and
from another layout.


795
00:41:45,746 --> 00:41:49,926
We have better animations
in layout transition


796
00:41:49,926 --> 00:41:53,636
by supporting the initial and
final layout attributes method,


797
00:41:53,636 --> 00:41:55,566
and we have a new
completion handler


798
00:41:55,566 --> 00:41:58,616
for the automatic set
collection view layout animated.


799
00:41:59,426 --> 00:42:01,476
And that's it for
collection view.


800
00:42:01,476 --> 00:42:03,976
I'd like to bring
back Bruce, thank you.


801
00:42:04,246 --> 00:42:05,046
>> Thanks, Olivier.


802
00:42:05,756 --> 00:42:08,846
So we're going to talk more
about some of the details


803
00:42:08,846 --> 00:42:11,826
of interactive transitions now.


804
00:42:12,236 --> 00:42:13,556
In particular, we're going


805
00:42:13,556 --> 00:42:15,706
to talk a little bit
about cancellation.


806
00:42:16,286 --> 00:42:20,066
So that's that state
diagram that I had showed


807
00:42:20,066 --> 00:42:25,446
in an earlier slide, and we're
going to kind of zoom in on kind


808
00:42:25,446 --> 00:42:28,106
of the two different states,
or paths that you can go


809
00:42:28,106 --> 00:42:34,686
through as an interactive
transition comes to an end.


810
00:42:35,146 --> 00:42:39,326
And so as an interactive
transition starts,


811
00:42:39,636 --> 00:42:43,156
the machinery behind in
UI kit is actually going


812
00:42:43,156 --> 00:42:45,566
to be making calls out
to view will appear,


813
00:42:45,566 --> 00:42:48,556
view will disappear, will show
view controller, all the stuff


814
00:42:48,896 --> 00:42:54,776
that you've normally used to
kind of control what's happening


815
00:42:54,776 --> 00:42:58,296
in your application as things
come on and off screen.


816
00:42:59,086 --> 00:43:01,696
And typically what happens
is we go from disappeared


817
00:43:01,696 --> 00:43:03,346
to appearing, to
appeared to disappearing.


818
00:43:04,456 --> 00:43:05,696
That's when life is good.


819
00:43:06,666 --> 00:43:08,466
However, we can also do this.


820
00:43:08,466 --> 00:43:10,876
We can go from appearing
to disappearing,


821
00:43:10,876 --> 00:43:12,316
and from disappearing
back to appearing.


822
00:43:12,986 --> 00:43:16,836
Now the reality is we
could do this even in iOS 5


823
00:43:16,836 --> 00:43:20,526
if you built a custom
-- well not a custom,


824
00:43:20,526 --> 00:43:23,336
but you built your own
container view controller.


825
00:43:23,336 --> 00:43:25,996
These are kind of
legal transitions,


826
00:43:25,996 --> 00:43:28,646
but now they're appearing a
lot more when you can kind


827
00:43:28,646 --> 00:43:32,686
of cancel based on an
interactive gesture.


828
00:43:33,136 --> 00:43:35,196
Take home message
here is don't assume


829
00:43:35,196 --> 00:43:37,416
that view did appear
follows view will appear,


830
00:43:37,576 --> 00:43:42,286
or view will disappear, or view
did disappear will follow view


831
00:43:42,286 --> 00:43:43,036
will disappear.


832
00:43:43,506 --> 00:43:47,936
Some colleagues of mine have
rid me kind of ruthlessly


833
00:43:47,936 --> 00:43:50,716
that view will appear really
should probably be called view


834
00:43:50,716 --> 00:43:53,366
might appear, or view
will probably appear,


835
00:43:53,846 --> 00:43:55,726
or I really wish this
view would appear.


836
00:43:55,796 --> 00:44:00,686
But most of the time
what it's saying is true.


837
00:44:00,686 --> 00:44:02,326
But now you've got
to kind of take


838
00:44:02,326 --> 00:44:04,786
into account that
maybe it won't.


839
00:44:05,516 --> 00:44:07,016
And so we've added some new API


840
00:44:07,286 --> 00:44:13,116
to help you deal
with some of this.


841
00:44:13,326 --> 00:44:18,146
And to do that, we've introduced
a new object that you can get


842
00:44:18,146 --> 00:44:19,526
when you're in a transition.


843
00:44:19,746 --> 00:44:23,486
And you get it by asking
the view controller --


844
00:44:23,486 --> 00:44:26,136
one of the view controller
participants of the transition.


845
00:44:26,136 --> 00:44:28,196
It can really be the
presenting, the presented,


846
00:44:28,196 --> 00:44:29,586
the push, the pop, whatever.


847
00:44:29,856 --> 00:44:31,726
As long as they're
involved in a transition,


848
00:44:31,726 --> 00:44:34,326
you can get this thing called
a transition coordinator.


849
00:44:34,836 --> 00:44:39,636
And the first thing
I'd like to point


850
00:44:39,636 --> 00:44:42,396
out is the transition
coordinator conforms


851
00:44:42,396 --> 00:44:45,826
to this other thing called a
transition coordinator context.


852
00:44:46,506 --> 00:44:50,276
It's really that one of
these protocols is passive,


853
00:44:50,576 --> 00:44:54,246
and the coordinator kind of
sub-protocol as it were kind


854
00:44:54,246 --> 00:44:56,346
of adds an active part to it.


855
00:44:56,346 --> 00:44:58,986
And in particular this
one that I've highlighted,


856
00:44:58,986 --> 00:45:03,956
notify when interaction ends
using block is what you can use


857
00:45:03,956 --> 00:45:08,256
to help manage the untoward
effects of view did disappear


858
00:45:08,256 --> 00:45:11,526
and not actually being called
when you expected it to.


859
00:45:12,656 --> 00:45:14,836
So one of the things about the
coordinator context, you know,


860
00:45:14,836 --> 00:45:17,076
the passive component, is


861
00:45:17,076 --> 00:45:18,916
that it has these
interesting properties,


862
00:45:18,916 --> 00:45:22,406
like was the transition
cancelled, or did it start


863
00:45:22,406 --> 00:45:24,026
out as an interactive
transition,


864
00:45:24,416 --> 00:45:25,566
is it still interactive?


865
00:45:26,086 --> 00:45:28,026
And you can ask all
those questions


866
00:45:28,026 --> 00:45:32,666
as the transition is unfolding,
and in particular you can ask


867
00:45:32,666 --> 00:45:37,716
that question inside of a
block that you have posted,


868
00:45:37,716 --> 00:45:40,656
that you've asked the transition
coordinator to execute


869
00:45:40,656 --> 00:45:43,236
at a certain point in the
interactive transition.


870
00:45:43,526 --> 00:45:45,886
So say you have view
will appear,


871
00:45:46,446 --> 00:45:49,776
and in your view will
appear you have some method


872
00:45:49,776 --> 00:45:52,006
that does all these
kind of side effects,


873
00:45:52,006 --> 00:45:54,056
assuming that view did appear
is going to get called.


874
00:45:54,056 --> 00:45:56,866
And believe me, there's
lots of you out there


875
00:45:56,866 --> 00:45:58,086
that have methods like that.


876
00:45:58,706 --> 00:45:59,506
I know we do.


877
00:46:00,126 --> 00:46:03,166
And what you're going to
do is you're going to call


878
00:46:03,166 --> 00:46:05,656
that method, and then within the
same lexical scope you're going


879
00:46:05,656 --> 00:46:08,466
to ask for a transition
coordinator, and you're going


880
00:46:08,466 --> 00:46:09,626
to check wait, am I in --


881
00:46:09,936 --> 00:46:11,866
is this even interactive
to begin with?


882
00:46:11,866 --> 00:46:15,526
And if it is interactive,
you're going to call notify


883
00:46:15,526 --> 00:46:16,906
when interaction ends.


884
00:46:16,906 --> 00:46:18,756
That doesn't mean that
the transition ends.


885
00:46:18,756 --> 00:46:20,866
There's -- again, there's this
important differentiation.


886
00:46:20,866 --> 00:46:22,896
There's the interactive
portion of a transition,


887
00:46:23,246 --> 00:46:25,776
then there's the portion
where it kind of finishes,


888
00:46:26,266 --> 00:46:27,776
and then you -- then
it's over for real.


889
00:46:28,096 --> 00:46:31,896
So this block that you're going
to call is going to get called


890
00:46:32,236 --> 00:46:34,166
when the interactive
portion ends.


891
00:46:34,166 --> 00:46:37,226
And at that point you can
ask the context that's passed


892
00:46:37,226 --> 00:46:41,036
in hey, did I get
cancelled or not?


893
00:46:41,036 --> 00:46:42,276
And if you did get cancelled,


894
00:46:42,506 --> 00:46:45,726
you can then undo the side
effects that you were expecting


895
00:46:45,726 --> 00:46:48,176
to get undone in
view did appear.


896
00:46:48,676 --> 00:46:53,116
Okay. So that's kind of nice.


897
00:46:53,336 --> 00:46:56,176
Least there's a way
to manage that.


898
00:46:56,756 --> 00:47:00,176
But the transition
coordinator's kind of cool,


899
00:47:00,176 --> 00:47:02,386
because as we implemented it,


900
00:47:02,386 --> 00:47:05,336
we realized that it was
actually really easy


901
00:47:05,336 --> 00:47:09,536
to do a few other things that a
lot of you have been requesting.


902
00:47:10,056 --> 00:47:15,766
So one is that you can basically
get a completion handler to run


903
00:47:15,986 --> 00:47:18,966
when the entire transition
really completes.


904
00:47:19,266 --> 00:47:21,126
I don't mean when the
interactive portion ends,


905
00:47:21,126 --> 00:47:23,516
I mean when the whole
thing is done, you know,


906
00:47:23,516 --> 00:47:24,856
like the completion
handler that's


907
00:47:24,856 --> 00:47:28,726
on present view controller,
or dismiss view controller.


908
00:47:30,096 --> 00:47:32,496
Another thing that you can do
is you can say you know what?


909
00:47:33,336 --> 00:47:37,006
When this transition
runs, and is animating,


910
00:47:37,006 --> 00:47:38,786
I want to run this other thing


911
00:47:38,866 --> 00:47:42,096
within the animation
block of the transition.


912
00:47:42,676 --> 00:47:44,776
Now I don't know how many
of you out there have kind


913
00:47:44,776 --> 00:47:48,266
of been saying okay, how long
does this push view controller


914
00:47:48,266 --> 00:47:49,156
transition take?


915
00:47:49,156 --> 00:47:51,206
And you get out your stopwatch,
and you figure it out,


916
00:47:51,206 --> 00:47:53,226
because you want to do
something that's kind


917
00:47:53,226 --> 00:47:55,376
of synchronized with
that animation.


918
00:47:55,876 --> 00:47:58,246
Well you don't have to do that
anymore, because there's now API


919
00:47:58,246 --> 00:47:59,646
on transition coordinator


920
00:47:59,646 --> 00:48:03,186
that you can animate alongside
the running transition.


921
00:48:03,486 --> 00:48:06,166
So to make that more
useful -- I mean this works,


922
00:48:06,166 --> 00:48:11,606
the transition coordinator
works for any custom transition


923
00:48:11,716 --> 00:48:16,306
that you might build yourself,
but it also works for our


924
00:48:16,306 --> 00:48:19,106
out of the box UI navigation
controller transitions,


925
00:48:19,216 --> 00:48:21,856
just regular push pop
set view controller.


926
00:48:22,536 --> 00:48:25,066
So in other words, you can get
a transition coordinator for an


927
00:48:25,066 --> 00:48:27,556
out of the box navigation
controller transition.


928
00:48:27,716 --> 00:48:30,516
It will also work for
present and dismiss.


929
00:48:31,666 --> 00:48:33,066
So it's kind of useful now,


930
00:48:33,066 --> 00:48:34,736
because you can do
stuff like this.


931
00:48:35,486 --> 00:48:37,516
First of all let's
look at the methods.


932
00:48:37,976 --> 00:48:42,356
There's two of them, one is
called -- one is the easier one,


933
00:48:42,356 --> 00:48:45,846
it's called -- there's
a typo there,


934
00:48:45,846 --> 00:48:48,696
it's animate alongside
transition completion,


935
00:48:49,326 --> 00:48:52,786
and the other is animate
alongside transition


936
00:48:52,786 --> 00:48:55,026
in view animation completion.


937
00:48:56,076 --> 00:49:00,536
And basically you pass
in an animation block


938
00:49:00,536 --> 00:49:02,646
that animates alongside, you
pass in a completion handler


939
00:49:02,646 --> 00:49:05,736
that runs after it's all done,
and the second variation is kind


940
00:49:05,736 --> 00:49:07,526
of a more advanced feature.


941
00:49:08,126 --> 00:49:10,236
Most of the time you don't need
it, because if you're trying


942
00:49:10,236 --> 00:49:12,396
to animate something
alongside the transition,


943
00:49:12,396 --> 00:49:16,436
which is within the view
hierarchy of the container view


944
00:49:16,866 --> 00:49:19,776
that you know about, because
it's in the context objects


945
00:49:19,776 --> 00:49:21,946
that you can query
about, then you don't need


946
00:49:21,946 --> 00:49:23,296
to specify the other view.


947
00:49:23,556 --> 00:49:26,146
But sometimes you might have
a view that you actually want


948
00:49:26,146 --> 00:49:29,276
to do an animation in
that is actually not part


949
00:49:29,276 --> 00:49:32,076
of the view hierarchy that the
transition is taking place in.


950
00:49:32,076 --> 00:49:34,676
And in that case you
can specify that view,


951
00:49:34,676 --> 00:49:39,956
and that's what the second
API variant is all about.


952
00:49:40,086 --> 00:49:42,506
So, let's have some fun with it.


953
00:49:43,166 --> 00:49:46,086
Push view controller
animated yes.


954
00:49:46,786 --> 00:49:48,226
And what you want
to do is you want


955
00:49:48,406 --> 00:49:50,736
to have a completion
handler that runs


956
00:49:50,906 --> 00:49:53,206
after the push finishes.


957
00:49:53,846 --> 00:49:54,856
What you're going to
do is you're going


958
00:49:54,856 --> 00:49:56,416
to grab a transition
coordinator,


959
00:49:56,416 --> 00:49:58,036
and then you're just going


960
00:49:58,036 --> 00:50:00,676
to call animate alongside
transition.


961
00:50:00,676 --> 00:50:02,676
You don't even have
to pass in anything


962
00:50:02,676 --> 00:50:05,386
for the animation
portion, just pass in nil.


963
00:50:06,046 --> 00:50:07,796
Specify completion block,


964
00:50:07,896 --> 00:50:10,106
and now you have a
completion handler


965
00:50:10,106 --> 00:50:13,436
on push view controller
-- pop view controller.


966
00:50:14,176 --> 00:50:17,466
An interesting point of
difference is is that --


967
00:50:17,466 --> 00:50:19,756
and hopefully none of you rely
on this, but I'm going to kind


968
00:50:19,756 --> 00:50:21,796
of spell it out because I
have a little bit of time --


969
00:50:22,466 --> 00:50:26,046
is that push view
controller animated yes used


970
00:50:26,046 --> 00:50:30,586
to be a little more
eager prior to iOS 7.


971
00:50:31,216 --> 00:50:34,486
In iOS 7 now, push view
controller animated yes is going


972
00:50:34,486 --> 00:50:38,196
to kind of defer its
transition the same way


973
00:50:38,516 --> 00:50:40,716
that push view controller
animated no did.


974
00:50:41,126 --> 00:50:43,396
So for most of you that's
not going to be an issue,


975
00:50:44,226 --> 00:50:48,866
but keep in mind that we kind of
-- it's an implementation detail


976
00:50:48,866 --> 00:50:53,656
about the exact timing of
when the actual transition's


977
00:50:53,656 --> 00:50:57,686
animations commence or not.


978
00:50:58,476 --> 00:51:01,266
Alright. So, I like this quote.


979
00:51:02,096 --> 00:51:04,636
We've kind of created a lot


980
00:51:04,636 --> 00:51:06,856
of things here, and
you can go crazy.


981
00:51:08,656 --> 00:51:11,166
And I want to give
you an example


982
00:51:11,166 --> 00:51:13,776
of what might be irresponsible.


983
00:51:15,166 --> 00:51:19,556
So here I have a view controller
and navigation controller,


984
00:51:19,556 --> 00:51:24,856
and I'm using UI kit dynamics,
and [Laughter] so it's kind


985
00:51:25,056 --> 00:51:32,236
of fun, but maybe you don't
want to build your UI like that.


986
00:51:32,236 --> 00:51:34,126
So let's do a quick
summary, and then I'm going


987
00:51:34,126 --> 00:51:35,936
to talk a little bit
about what we're going


988
00:51:35,936 --> 00:51:37,286
to talk about this afternoon.


989
00:51:38,676 --> 00:51:42,906
We have basically provided
you guys with a lot


990
00:51:42,906 --> 00:51:45,256
of new UI view based
animation APIs.


991
00:51:45,256 --> 00:51:47,776
We created a brand new
snapshotting mechanism


992
00:51:47,776 --> 00:51:48,806
that you can use with them,


993
00:51:49,176 --> 00:51:52,246
and you can go wild
creating fantastic animations


994
00:51:52,246 --> 00:51:53,626
and view controller transitions.


995
00:51:54,686 --> 00:51:57,636
All these view controller
transitions can be customized,


996
00:51:57,746 --> 00:52:01,226
UI collection view
controller can be used now,


997
00:52:01,706 --> 00:52:04,136
it can be used really
well with the inside


998
00:52:04,136 --> 00:52:05,566
of a navigation controller.


999
00:52:06,606 --> 00:52:08,456
It's protocol-based,
which might seem


1000
00:52:08,646 --> 00:52:11,376
like it's a little abstract,


1001
00:52:11,376 --> 00:52:13,186
but it actually gives
you an incredible amount


1002
00:52:13,186 --> 00:52:15,306
of flexibility, because
we're not binding you


1003
00:52:15,306 --> 00:52:17,696
to any specific object
to implement


1004
00:52:17,696 --> 00:52:20,606
that animation controller, or
the interaction controllers.


1005
00:52:21,756 --> 00:52:26,206
Remember that you can create
interactive transitions


1006
00:52:26,206 --> 00:52:31,006
and view will appear and view
will probably appear might be


1007
00:52:31,006 --> 00:52:32,326
more appropriate, and you need


1008
00:52:32,326 --> 00:52:35,796
to possibly take
action for that.


1009
00:52:36,066 --> 00:52:39,416
We've created a brand new object
called a transition coordinator


1010
00:52:39,696 --> 00:52:41,796
that provides some
great new functionality,


1011
00:52:41,796 --> 00:52:45,216
as well as a means to
deal with the cancel phase


1012
00:52:45,276 --> 00:52:46,566
of an interactive transition.


1013
00:52:47,106 --> 00:52:52,036
And for more information
on this,


1014
00:52:52,276 --> 00:52:56,356
please contact our fearless
evangelist, Jake Behrens.


1015
00:52:56,836 --> 00:53:00,756
I would like to point out a
couple of related sessions,


1016
00:53:00,756 --> 00:53:02,886
and one of which is going
to be this afternoon


1017
00:53:02,886 --> 00:53:04,076
that Ol [phonetic] and I --


1018
00:53:04,366 --> 00:53:07,296
Ol by the way, in addition to
collection views, you know,


1019
00:53:07,296 --> 00:53:11,046
has changed the gravitational
constant in UI kit.


1020
00:53:11,046 --> 00:53:14,986
And we're going to be talking
about how to use UI kit dynamics


1021
00:53:14,986 --> 00:53:17,506
in a more advanced way, and in
particular I will be talking


1022
00:53:17,506 --> 00:53:19,036
about using it with transitions.


1023
00:53:19,186 --> 00:53:20,536
And that's it.


1024
00:53:20,686 --> 00:53:22,896
Thank you for coming, have
a great rest of the day.


1025
00:53:23,396 --> 00:53:26,853
[ Applause ]


1026
00:53:27,353 --> 00:53:30,810
[ Silence ]

