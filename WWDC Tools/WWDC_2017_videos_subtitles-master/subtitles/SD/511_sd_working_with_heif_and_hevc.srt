1
00:00:20,126 --> 00:00:21,106
>> Good morning, everyone, and


2
00:00:21,106 --> 00:00:23,326
welcome to Friday of WWDC.


3
00:00:24,016 --> 00:00:24,536
[applause] Thank you.


4
00:00:26,346 --> 00:00:27,816
My name is Erik Turnquist and


5
00:00:27,816 --> 00:00:28,936
today Brad and I are going to


6
00:00:28,936 --> 00:00:30,566
talk about working with HEIF and


7
00:00:30,566 --> 00:00:31,146
HEVC.


8
00:00:32,516 --> 00:00:34,616
So, first off, what is HEVC?


9
00:00:35,106 --> 00:00:37,136
HEVC stands for High Efficiency


10
00:00:37,136 --> 00:00:38,596
Video Coding and it is the


11
00:00:38,596 --> 00:00:40,036
industry standard next


12
00:00:40,036 --> 00:00:41,216
generation video encoding


13
00:00:41,326 --> 00:00:42,036
technology.


14
00:00:42,476 --> 00:00:44,416
It's the successor to H.264.


15
00:00:45,056 --> 00:00:47,216
Now for the more important


16
00:00:47,216 --> 00:00:48,786
question, is why?


17
00:00:49,366 --> 00:00:50,636
Why is Apple going through all


18
00:00:50,636 --> 00:00:51,696
of the effort to deliver a new


19
00:00:51,696 --> 00:00:52,126
codec?


20
00:00:52,126 --> 00:00:54,566
H.264 has been really good to us


21
00:00:54,566 --> 00:00:55,636
for over ten years.


22
00:00:56,486 --> 00:00:57,606
Now we thought about this a lot,


23
00:00:57,726 --> 00:00:58,776
and we really want to enable new


24
00:00:58,776 --> 00:00:59,886
features and unfortunately,


25
00:00:59,886 --> 00:01:01,826
H.264 has reached the limits of


26
00:01:01,826 --> 00:01:02,696
its capabilities.


27
00:01:03,056 --> 00:01:04,796
We want to enable new features


28
00:01:04,796 --> 00:01:06,916
like 4K and larger frame sizes,


29
00:01:07,246 --> 00:01:09,256
high bit depths like 10-bit and


30
00:01:09,256 --> 00:01:10,416
wider color spaces like Rec.


31
00:01:10,416 --> 00:01:12,686
2020. Now, we want to do all of


32
00:01:12,686 --> 00:01:13,866
this while lowering the bit


33
00:01:13,866 --> 00:01:15,156
rate, not raising that.


34
00:01:15,566 --> 00:01:16,376
So, how do we do that?


35
00:01:17,616 --> 00:01:19,106
Well, we do that with HEVC.


36
00:01:19,676 --> 00:01:21,066
So, now how much lower are the


37
00:01:21,066 --> 00:01:22,116
bit rates we're actually seeing?


38
00:01:22,736 --> 00:01:24,516
Well, for generally encoded


39
00:01:24,516 --> 00:01:25,906
content we're seeing up to a 40


40
00:01:25,906 --> 00:01:27,236
percent bit rate reduction for


41
00:01:27,236 --> 00:01:28,406
H.264.


42
00:01:28,406 --> 00:01:29,496
So, this is a really big deal.


43
00:01:30,236 --> 00:01:31,536
And for camera capture, we're


44
00:01:31,536 --> 00:01:33,076
seeing up to a 2 times better


45
00:01:33,076 --> 00:01:35,816
compression compared to H.264


46
00:01:35,896 --> 00:01:36,556
and JPEG.


47
00:01:37,156 --> 00:01:38,546
So, another really big deal


48
00:01:38,546 --> 00:01:38,816
here.


49
00:01:39,756 --> 00:01:40,866
And we're making all of these


50
00:01:40,866 --> 00:01:42,076
changes today.


51
00:01:42,616 --> 00:01:43,886
So, if you've installed the iOS,


52
00:01:43,886 --> 00:01:46,456
iOS 11 seeds, we've enabled HEVC


53
00:01:46,456 --> 00:01:48,286
Movie and HEIF Image Capture by


54
00:01:48,286 --> 00:01:48,676
default.


55
00:01:48,676 --> 00:01:50,326
So, that means, many of you have


56
00:01:50,326 --> 00:01:51,856
already captured HEIF images or


57
00:01:51,856 --> 00:01:53,586
HEVC movies without even knowing


58
00:01:53,586 --> 00:01:53,653
it.


59
00:01:53,653 --> 00:01:54,866
And it just works on our


60
00:01:54,866 --> 00:01:55,476
platforms.


61
00:01:56,016 --> 00:01:57,696
Let's go over what we're going


62
00:01:57,696 --> 00:01:58,586
to talk about today.


63
00:01:58,826 --> 00:01:59,976
I'm going to cover the HEVC


64
00:01:59,976 --> 00:02:01,466
Movie side of things, and Brad's


65
00:02:01,466 --> 00:02:02,546
going to cover the HEIF Image


66
00:02:02,546 --> 00:02:03,236
side of things.


67
00:02:03,496 --> 00:02:04,736
We're going to cover accessing


68
00:02:04,736 --> 00:02:06,606
this content, playing it back


69
00:02:06,606 --> 00:02:09,026
and displaying it, capturing and


70
00:02:09,026 --> 00:02:10,816
creating HEIF and HEVC Movies,


71
00:02:10,916 --> 00:02:12,296
and then export and transcode.


72
00:02:13,276 --> 00:02:14,786
So, first let's cover access.


73
00:02:16,476 --> 00:02:17,786
So, many of you are using


74
00:02:17,786 --> 00:02:19,146
PhotoKit and PhotoKit will


75
00:02:19,146 --> 00:02:20,496
deliver HEVC assets for


76
00:02:20,496 --> 00:02:21,016
playback.


77
00:02:21,466 --> 00:02:22,496
So, if you're using


78
00:02:22,496 --> 00:02:23,986
requestPlayerItem or


79
00:02:23,986 --> 00:02:25,586
requestLivePhoto they will


80
00:02:25,586 --> 00:02:26,766
deliver, or they will give you


81
00:02:26,766 --> 00:02:28,576
automatic playback with adopting


82
00:02:28,576 --> 00:02:30,576
new, any new APIs, so this


83
00:02:30,576 --> 00:02:31,136
should just work.


84
00:02:33,516 --> 00:02:35,626
PhotoKit can also deliver you


85
00:02:35,626 --> 00:02:36,616
HEVC assets.


86
00:02:36,616 --> 00:02:37,506
So, if you're calling it


87
00:02:37,506 --> 00:02:39,106
requestExportSession, it will


88
00:02:39,106 --> 00:02:41,166
transcode to the existing preset


89
00:02:41,166 --> 00:02:42,176
you're already using.


90
00:02:42,696 --> 00:02:43,536
So, if you're using one of the


91
00:02:43,536 --> 00:02:44,816
dimension presets that used to


92
00:02:44,816 --> 00:02:47,166
give you H.264, it will still do


93
00:02:47,166 --> 00:02:47,416
that.


94
00:02:47,596 --> 00:02:48,846
But we'll cover new presets


95
00:02:48,846 --> 00:02:49,856
we've added for HEVC.


96
00:02:49,896 --> 00:02:51,106
If you're calling


97
00:02:51,106 --> 00:02:52,556
requestAVAsset, it will give you


98
00:02:52,556 --> 00:02:54,656
access to the HEVC media file


99
00:02:54,656 --> 00:02:56,246
and this will have an HEVC video


100
00:02:56,246 --> 00:02:57,976
track inside of it.


101
00:02:58,976 --> 00:02:59,906
Now, if you're to backup the


102
00:02:59,906 --> 00:03:01,346
application, you want access to


103
00:03:01,346 --> 00:03:02,986
the raw bits, so you're probably


104
00:03:02,986 --> 00:03:04,546
calling it requestData, so I


105
00:03:04,546 --> 00:03:05,706
want to make note that this will


106
00:03:05,706 --> 00:03:07,606
actually contain the HEVC video


107
00:03:07,606 --> 00:03:08,966
track inside the movie file that


108
00:03:08,966 --> 00:03:09,996
you've receive, so you need to


109
00:03:09,996 --> 00:03:10,886
be able to handle this.


110
00:03:12,226 --> 00:03:14,196
Now that you have this content,


111
00:03:14,196 --> 00:03:15,226
let's call about playback and


112
00:03:15,226 --> 00:03:15,566
display.


113
00:03:17,546 --> 00:03:19,326
HEVC playback is supported in


114
00:03:19,326 --> 00:03:21,216
our modern media frameworks like


115
00:03:21,216 --> 00:03:22,706
AVKit, AVFoundation, and


116
00:03:22,706 --> 00:03:23,586
VideoToolbox.


117
00:03:23,936 --> 00:03:25,796
We support HTTP live streaming,


118
00:03:26,186 --> 00:03:27,676
play-while-download, and local


119
00:03:27,676 --> 00:03:29,376
file back or local file


120
00:03:29,376 --> 00:03:29,806
playback.


121
00:03:30,506 --> 00:03:31,896
And we support MPEG-4 and


122
00:03:31,896 --> 00:03:33,106
QuickTime file formats as the


123
00:03:33,106 --> 00:03:34,726
source, and here there's no API


124
00:03:34,726 --> 00:03:35,586
opt-in required.


125
00:03:35,856 --> 00:03:36,626
Things should just work.


126
00:03:38,376 --> 00:03:40,516
We support Decode on macOS and


127
00:03:40,626 --> 00:03:42,206
iOS and now let's go over where


128
00:03:42,206 --> 00:03:43,466
we have Hardware Decode support.


129
00:03:44,206 --> 00:03:45,656
So, we have 8- and 10-bit


130
00:03:45,656 --> 00:03:47,376
decoders on our A9 chip, so


131
00:03:47,376 --> 00:03:49,646
that's the iPhone 6s and we have


132
00:03:49,646 --> 00:03:51,236
8-bit Hardware Decode on our 6th


133
00:03:51,236 --> 00:03:52,916
generation Intel Cores, that's


134
00:03:52,916 --> 00:03:54,196
Skylake and that's the MacBook


135
00:03:54,226 --> 00:03:55,176
Pro with Touch Bar.


136
00:03:55,636 --> 00:03:57,376
We also have 10-bit Decode on


137
00:03:57,376 --> 00:03:58,686
the 7th Generation Intel Core


138
00:03:58,686 --> 00:04:00,416
processors and that's Kaby Lake


139
00:04:00,416 --> 00:04:01,536
and that's the brand-new MacBook


140
00:04:01,576 --> 00:04:02,266
Pro with Touch Bar.


141
00:04:02,896 --> 00:04:04,236
We also have 8- and 10-bit


142
00:04:04,656 --> 00:04:06,336
Software Decode fallbacks on


143
00:04:06,336 --> 00:04:08,106
macOS and iOS.


144
00:04:08,446 --> 00:04:09,496
So, now let's go over some code


145
00:04:09,496 --> 00:04:10,736
you might have and let's convert


146
00:04:10,736 --> 00:04:11,806
it to HEVC playback.


147
00:04:12,416 --> 00:04:13,366
So, here we're playing "My


148
00:04:13,366 --> 00:04:15,416
Awesome Movie" making a URL,


149
00:04:15,586 --> 00:04:17,086
then a player and playing it.


150
00:04:17,086 --> 00:04:19,156
So, this is the H.264 version.


151
00:04:19,886 --> 00:04:21,435
And now here's the HEVC version.


152
00:04:21,796 --> 00:04:23,146
There's no changes.


153
00:04:23,426 --> 00:04:25,306
So, to play an HEVC movie file,


154
00:04:25,486 --> 00:04:26,466
you don't need to change any of


155
00:04:26,466 --> 00:04:26,936
your code.


156
00:04:27,266 --> 00:04:28,716
We want to have you think about


157
00:04:28,716 --> 00:04:29,376
a couple things.


158
00:04:30,666 --> 00:04:32,026
So, the first is about Decode


159
00:04:32,026 --> 00:04:32,746
capability.


160
00:04:33,056 --> 00:04:33,696
And if you're asking the


161
00:04:33,696 --> 00:04:35,356
question is there a decoder on


162
00:04:35,356 --> 00:04:36,536
the system that can handle this


163
00:04:36,536 --> 00:04:38,566
content, this API is for you.


164
00:04:39,106 --> 00:04:40,626
This is useful for non-realtime


165
00:04:40,626 --> 00:04:42,086
operations, like sharing or


166
00:04:42,086 --> 00:04:42,876
image generation.


167
00:04:42,876 --> 00:04:44,166
And it can be limited by


168
00:04:44,166 --> 00:04:44,966
hardware support.


169
00:04:45,246 --> 00:04:46,206
So, not all of our hardware


170
00:04:46,206 --> 00:04:47,526
decoders support every frame


171
00:04:47,526 --> 00:04:48,006
size.


172
00:04:49,656 --> 00:04:51,086
Now, for the more important


173
00:04:51,086 --> 00:04:52,236
question is about playback


174
00:04:52,236 --> 00:04:52,866
capability.


175
00:04:53,096 --> 00:04:54,286
If you're asking, how do I have


176
00:04:54,286 --> 00:04:55,576
the best playback experience for


177
00:04:55,576 --> 00:04:57,426
my customer, this API is for


178
00:04:57,426 --> 00:04:57,696
you.


179
00:04:57,826 --> 00:04:59,196
And many of you are already


180
00:04:59,196 --> 00:04:59,986
using this API.


181
00:05:01,016 --> 00:05:02,356
So, not all content can be


182
00:05:02,356 --> 00:05:04,026
played back in realtime and we


183
00:05:04,026 --> 00:05:05,286
have differing capabilities on


184
00:05:05,286 --> 00:05:05,976
different devices.


185
00:05:05,976 --> 00:05:07,556
So, if you want to have a one


186
00:05:07,556 --> 00:05:09,196
stop shop for the best user


187
00:05:09,196 --> 00:05:10,566
experience for playback, whether


188
00:05:10,566 --> 00:05:12,636
that's 1x or 2x playback,


189
00:05:12,636 --> 00:05:13,816
rewind, scrubbing, or fast


190
00:05:13,816 --> 00:05:15,496
forward, this is the API for


191
00:05:15,496 --> 00:05:15,696
you.


192
00:05:15,696 --> 00:05:19,056
Now, let's go on to Hardware


193
00:05:19,056 --> 00:05:20,286
Decode availability.


194
00:05:20,456 --> 00:05:21,616
If you want to get the best


195
00:05:21,616 --> 00:05:22,976
battery life during playback,


196
00:05:23,266 --> 00:05:24,666
you want to playback on systems


197
00:05:24,666 --> 00:05:25,726
that have Hardware Decode


198
00:05:25,726 --> 00:05:26,136
support.


199
00:05:26,666 --> 00:05:28,406
This will also get you the best


200
00:05:28,406 --> 00:05:29,256
Decode performance.


201
00:05:29,256 --> 00:05:31,286
So, we have new VideoToolbox API


202
00:05:31,286 --> 00:05:33,256
that you can query, is there a


203
00:05:33,256 --> 00:05:34,726
Hardware Decoder Supported for


204
00:05:34,726 --> 00:05:35,296
this codec?


205
00:05:35,496 --> 00:05:36,686
Here I'm showing you HEVC, but


206
00:05:36,686 --> 00:05:37,976
you can also use it for any


207
00:05:37,976 --> 00:05:40,666
other codec.


208
00:05:40,746 --> 00:05:42,006
Now, for the final question for


209
00:05:42,006 --> 00:05:43,896
playback, which codec do I use


210
00:05:43,896 --> 00:05:44,526
for playback?


211
00:05:45,116 --> 00:05:48,856
Do I choose H.264 or HEVC?


212
00:05:49,606 --> 00:05:51,106
Well, if you're concerned about


213
00:05:51,186 --> 00:05:52,386
delivering the most compatible


214
00:05:52,386 --> 00:05:54,176
content or want to deliver one


215
00:05:54,176 --> 00:05:55,256
asset that just works


216
00:05:55,256 --> 00:05:58,136
everywhere, choose H.264.


217
00:05:58,546 --> 00:05:59,936
Our platforms have supported


218
00:05:59,936 --> 00:06:01,276
this format for over 10 years


219
00:06:01,276 --> 00:06:03,206
and there's broad adoption in


220
00:06:03,206 --> 00:06:04,896
the third-party ecosystem.


221
00:06:05,656 --> 00:06:06,426
However, if you want the


222
00:06:06,426 --> 00:06:08,826
smallest file size and latest


223
00:06:08,826 --> 00:06:09,546
and greatest encoding


224
00:06:09,546 --> 00:06:11,486
technology, like 10-bit choose


225
00:06:11,486 --> 00:06:12,016
HEVC.


226
00:06:12,456 --> 00:06:14,186
You'll have to decide what works


227
00:06:14,186 --> 00:06:15,006
in your application.


228
00:06:15,326 --> 00:06:17,906
And with that, let's move on to


229
00:06:19,296 --> 00:06:19,546
capture.


230
00:06:19,826 --> 00:06:22,166
So, capturing HEVC is supported


231
00:06:22,276 --> 00:06:24,006
with AVFoundation and we support


232
00:06:24,006 --> 00:06:25,356
MPEG-4 and QuickTime file


233
00:06:25,356 --> 00:06:26,756
formats as the destination.


234
00:06:27,336 --> 00:06:31,676
We support HEVC capture on our


235
00:06:31,836 --> 00:06:33,566
A10 chip, so that's iPhone 7,


236
00:06:33,976 --> 00:06:35,306
and now let's go over the A, the


237
00:06:35,306 --> 00:06:37,096
capture graph that many of you


238
00:06:37,096 --> 00:06:41,186
are already familiar with.


239
00:06:41,616 --> 00:06:42,286
This starts with an


240
00:06:42,286 --> 00:06:44,206
AVCaptureSession, this needs to


241
00:06:44,206 --> 00:06:45,286
get data from somewhere.


242
00:06:47,116 --> 00:06:49,556
You create an AVCaptureDevice,


243
00:06:49,636 --> 00:06:51,936
you add it as the input, then


244
00:06:51,936 --> 00:06:53,146
data needs to go somewhere.


245
00:06:53,146 --> 00:06:54,136
In this case you're using movie


246
00:06:54,136 --> 00:06:55,266
file to compress and write the


247
00:06:55,266 --> 00:06:55,826
output file.


248
00:06:57,536 --> 00:06:58,576
These are all connected with an


249
00:06:58,576 --> 00:07:01,046
AVCaptureConnection and this


250
00:07:01,046 --> 00:07:01,916
creates your movie file.


251
00:07:02,426 --> 00:07:03,396
So, let's convert this into


252
00:07:03,396 --> 00:07:03,816
code.


253
00:07:03,816 --> 00:07:06,086
And many of you probably have


254
00:07:06,086 --> 00:07:06,626
this in your app.


255
00:07:06,966 --> 00:07:07,696
First, create an


256
00:07:07,696 --> 00:07:08,686
AVCaptureConnect -- or


257
00:07:08,686 --> 00:07:09,816
AVCaptureSession.


258
00:07:09,816 --> 00:07:11,666
Here we're making a 4k capture


259
00:07:11,666 --> 00:07:12,396
session.


260
00:07:13,886 --> 00:07:14,446
Then you create the


261
00:07:14,446 --> 00:07:16,196
AVCaptureDevice, add it as the


262
00:07:16,196 --> 00:07:16,586
input.


263
00:07:18,466 --> 00:07:20,266
Create your MovieFileOutput and


264
00:07:20,266 --> 00:07:21,486
this does the compression file


265
00:07:21,486 --> 00:07:22,776
writing, add it as the output.


266
00:07:22,776 --> 00:07:25,016
And then startRunning and


267
00:07:25,016 --> 00:07:25,656
startRecording.


268
00:07:25,716 --> 00:07:27,106
And then we're capturing.


269
00:07:27,446 --> 00:07:29,586
So, how do we opt in to HEVC?


270
00:07:30,236 --> 00:07:32,036
Well, with iOS 10 we added an


271
00:07:32,036 --> 00:07:33,806
API to check for the available


272
00:07:33,806 --> 00:07:35,376
video codecs during capture.


273
00:07:35,646 --> 00:07:37,256
And new with iOS 11 is you can


274
00:07:37,256 --> 00:07:38,936
check, does it contain HEVC.


275
00:07:39,606 --> 00:07:41,046
On supported devices, it will


276
00:07:41,046 --> 00:07:42,956
return true and you can go ahead


277
00:07:43,276 --> 00:07:45,896
and use that in your output


278
00:07:45,896 --> 00:07:46,326
settings.


279
00:07:46,576 --> 00:07:48,596
And if it doesn't support it you


280
00:07:48,596 --> 00:07:49,656
can go ahead and fall back to


281
00:07:49,656 --> 00:07:51,876
another codec like H.264.


282
00:07:51,876 --> 00:07:53,386
Now I want to make an important


283
00:07:53,386 --> 00:07:54,246
point here, is that order


284
00:07:54,246 --> 00:07:54,876
matters with the


285
00:07:54,876 --> 00:07:56,316
availableVideoCodecTypes and for


286
00:07:56,316 --> 00:07:58,056
this seed we made HEVC the first


287
00:07:58,056 --> 00:07:58,486
option.


288
00:07:58,926 --> 00:07:59,916
So, that means, if you do


289
00:07:59,916 --> 00:08:01,236
nothing else, you'll be


290
00:08:01,236 --> 00:08:02,736
capturing HEVC content.


291
00:08:03,196 --> 00:08:04,426
We really want to get you used


292
00:08:04,426 --> 00:08:05,476
to handling this content.


293
00:08:06,776 --> 00:08:07,626
Now, let's move on to Live


294
00:08:07,626 --> 00:08:08,136
Photos.


295
00:08:09,646 --> 00:08:10,716
So, we have the same capture


296
00:08:10,716 --> 00:08:12,546
graph here, but we use our


297
00:08:12,546 --> 00:08:14,086
AVCapturePhotoOutput, and that


298
00:08:14,086 --> 00:08:15,296
makes all the Live Photos we


299
00:08:15,296 --> 00:08:15,866
love and enjoy.


300
00:08:16,596 --> 00:08:17,906
So, first let's go over couple


301
00:08:18,206 --> 00:08:19,416
new Live Photo enhancements


302
00:08:19,416 --> 00:08:20,316
we've done in the past year.


303
00:08:21,696 --> 00:08:22,536
We now support video


304
00:08:22,536 --> 00:08:24,246
stabilization, so no more shaky


305
00:08:24,246 --> 00:08:25,646
playback during Live Photos.


306
00:08:25,946 --> 00:08:27,556
We also no longer pause music


307
00:08:27,556 --> 00:08:28,736
playback during Live Photo


308
00:08:28,736 --> 00:08:30,346
capture, and we support much


309
00:08:30,346 --> 00:08:32,416
smoother Live Photos up to 30


310
00:08:32,416 --> 00:08:33,046
frames per second.


311
00:08:33,466 --> 00:08:36,236
So, let's go over capturing HEVC


312
00:08:36,236 --> 00:08:37,006
with Live Photos.


313
00:08:38,226 --> 00:08:40,106
So, we have new API in iOS 11


314
00:08:40,106 --> 00:08:40,765
where you can create


315
00:08:40,765 --> 00:08:42,106
availableLivePhotoVideo


316
00:08:42,106 --> 00:08:44,786
CodecTypes, see if it contains


317
00:08:44,786 --> 00:08:47,096
HEVC, and it will return true on


318
00:08:47,096 --> 00:08:48,146
supported devices.


319
00:08:49,746 --> 00:08:50,916
Then if it does go ahead and use


320
00:08:50,916 --> 00:08:51,876
it, if it does not you can fall


321
00:08:51,876 --> 00:08:52,916
back to another existing codec


322
00:08:52,916 --> 00:08:54,556
like H.264.


323
00:08:54,816 --> 00:08:56,576
I also want to make note that


324
00:08:56,576 --> 00:08:57,736
there's the same considerations


325
00:08:57,736 --> 00:08:59,206
here, is that order matters with


326
00:08:59,206 --> 00:09:00,596
the availableVideoCodecTypes and


327
00:09:00,596 --> 00:09:02,046
for this seed we made HEVC the


328
00:09:02,046 --> 00:09:02,746
first option.


329
00:09:03,676 --> 00:09:05,066
So, again, if you do nothing


330
00:09:05,066 --> 00:09:06,856
else, you will capture HEVC Live


331
00:09:06,856 --> 00:09:07,476
Photos.


332
00:09:08,316 --> 00:09:09,426
You might be sensing a pattern


333
00:09:09,426 --> 00:09:09,716
here.


334
00:09:09,856 --> 00:09:11,176
We really want to get you used


335
00:09:11,176 --> 00:09:11,936
to handling this kind of


336
00:09:11,936 --> 00:09:12,346
content.


337
00:09:12,476 --> 00:09:15,946
Now, let's go over the most


338
00:09:15,946 --> 00:09:17,996
customizable capture graph, and


339
00:09:17,996 --> 00:09:18,506
that's with


340
00:09:18,506 --> 00:09:20,616
AVCaptureVideoDataOutput, and


341
00:09:20,616 --> 00:09:21,426
AVAssetWriter.


342
00:09:21,996 --> 00:09:23,146
So, you use this if you want to


343
00:09:23,146 --> 00:09:24,476
modify the sample buffers in


344
00:09:24,476 --> 00:09:24,886
some way.


345
00:09:24,886 --> 00:09:26,146
So, you might be performing some


346
00:09:26,146 --> 00:09:27,236
cool filtering operation.


347
00:09:27,876 --> 00:09:30,546
With configuring AssetWriter for


348
00:09:30,546 --> 00:09:32,406
HEVC, you have two options.


349
00:09:32,716 --> 00:09:34,256
So, you can either configure


350
00:09:34,256 --> 00:09:35,666
custom output settings where you


351
00:09:35,826 --> 00:09:38,066
explicitly specify HEVC, or the


352
00:09:38,066 --> 00:09:39,186
video data output can actually


353
00:09:39,186 --> 00:09:40,256
recommend those settings for


354
00:09:40,256 --> 00:09:40,516
you.


355
00:09:40,516 --> 00:09:41,926
And we recommend this API.


356
00:09:42,736 --> 00:09:44,116
In iOS 7 we added


357
00:09:44,116 --> 00:09:45,076
recommendedVideoSettings


358
00:09:45,076 --> 00:09:45,856
ForAssetWriter.


359
00:09:46,216 --> 00:09:47,266
Now this always recommends


360
00:09:47,266 --> 00:09:48,256
H.264.


361
00:09:48,336 --> 00:09:49,386
So, if you want to stick with


362
00:09:49,386 --> 00:09:50,346
that, that's fine.


363
00:09:50,856 --> 00:09:52,136
However, in iOS 11 we've added


364
00:09:52,136 --> 00:09:53,586
new API where you can actually


365
00:09:54,066 --> 00:09:55,626
pass in the codec type and we


366
00:09:55,626 --> 00:09:56,606
will give you recommended


367
00:09:56,606 --> 00:09:58,196
settings for that codec type on


368
00:09:58,196 --> 00:09:59,106
supported devices.


369
00:10:00,206 --> 00:10:01,306
And with that let's move onto


370
00:10:01,306 --> 00:10:02,626
the Export and transcode side of


371
00:10:02,626 --> 00:10:02,976
things.


372
00:10:07,286 --> 00:10:09,376
So you can transcode to HEVC


373
00:10:09,376 --> 00:10:10,716
with AVFoundation and


374
00:10:10,716 --> 00:10:11,606
VideoToolbox.


375
00:10:11,726 --> 00:10:13,386
And we support MPEG-4 and


376
00:10:13,386 --> 00:10:14,716
QuickTime file formats as the


377
00:10:14,716 --> 00:10:15,306
destination.


378
00:10:15,756 --> 00:10:17,586
And here API opt-in is required.


379
00:10:20,016 --> 00:10:22,486
We support HEVC Encode on macOS


380
00:10:22,486 --> 00:10:23,926
and iOS and now let's go over


381
00:10:23,926 --> 00:10:25,466
where we support HEVC Hardware


382
00:10:25,466 --> 00:10:25,786
Encode.


383
00:10:27,106 --> 00:10:28,386
So, we have an 8-bit Hardware


384
00:10:28,386 --> 00:10:30,176
Encoder on our A10 Fusion chip,


385
00:10:30,396 --> 00:10:32,666
that's iPhone 7, and we support


386
00:10:32,666 --> 00:10:33,896
8-bit Hardware Encode on our


387
00:10:33,896 --> 00:10:35,236
macOS on our 6th generation


388
00:10:35,236 --> 00:10:37,086
Intel Core processors, that's


389
00:10:37,086 --> 00:10:38,556
the Skylake family, and that's


390
00:10:38,556 --> 00:10:39,936
the MacBook Pro with Touch Bar.


391
00:10:40,556 --> 00:10:42,946
And on macOS we have a special


392
00:10:42,946 --> 00:10:44,436
10-bit non-realtime, high


393
00:10:44,436 --> 00:10:45,686
quality software encoder that


394
00:10:45,686 --> 00:10:47,006
you can use and we'll talk about


395
00:10:47,006 --> 00:10:48,836
that in a little bit.


396
00:10:49,076 --> 00:10:49,906
Now, let's start with the


397
00:10:49,906 --> 00:10:51,936
highest-level export APIs, and


398
00:10:52,796 --> 00:10:53,996
that's transcoding with


399
00:10:53,996 --> 00:10:54,986
AVAssetExportSession.


400
00:10:56,326 --> 00:10:57,416
So, with this, you give us an


401
00:10:57,416 --> 00:10:58,976
asset, then you pick a preset


402
00:10:58,976 --> 00:11:00,906
and we do all the operations for


403
00:11:00,906 --> 00:11:02,226
you including compression and we


404
00:11:02,226 --> 00:11:03,256
produce an output movie.


405
00:11:05,016 --> 00:11:06,396
So, there's no change in


406
00:11:06,396 --> 00:11:08,066
behavior for existing presets.


407
00:11:08,066 --> 00:11:08,946
If you're using one of the


408
00:11:08,946 --> 00:11:10,216
existing dimension-based


409
00:11:10,216 --> 00:11:11,506
presets, and it used to give you


410
00:11:11,506 --> 00:11:13,936
H.264, it will still do that.


411
00:11:14,466 --> 00:11:15,996
We've added new presets here.


412
00:11:16,496 --> 00:11:17,626
And those will convert from


413
00:11:17,626 --> 00:11:19,936
H.264 or any other codec to


414
00:11:19,936 --> 00:11:21,966
HEVC, and these will produce


415
00:11:21,966 --> 00:11:23,906
smaller AVAssets, up to 40


416
00:11:23,906 --> 00:11:25,506
percent in some cases, with the


417
00:11:25,506 --> 00:11:26,176
same quality.


418
00:11:27,506 --> 00:11:29,136
Now, let's move one level down


419
00:11:29,136 --> 00:11:30,936
the stack, to compressing with


420
00:11:30,936 --> 00:11:31,596
AVAssetWriter.


421
00:11:32,146 --> 00:11:35,506
So, AVAssetWriter, you're either


422
00:11:35,716 --> 00:11:36,806
generating the sample buffers


423
00:11:36,806 --> 00:11:38,136
yourself, or getting them from


424
00:11:38,136 --> 00:11:39,806
another one of our APIs like


425
00:11:39,806 --> 00:11:40,916
VideoDataOutput or


426
00:11:40,916 --> 00:11:41,656
AVAssetWriter.


427
00:11:41,736 --> 00:11:43,216
And AVAssetWriter's responsible


428
00:11:43,216 --> 00:11:44,406
for compression and file


429
00:11:44,406 --> 00:11:44,646
writing.


430
00:11:46,056 --> 00:11:47,176
Again, like I discussed


431
00:11:47,176 --> 00:11:48,406
previously, there's two options


432
00:11:48,406 --> 00:11:49,266
for AVAssetWriter.


433
00:11:49,566 --> 00:11:51,076
You can either explicitly set


434
00:11:51,076 --> 00:11:52,556
custom output settings, in this


435
00:11:52,556 --> 00:11:54,976
case we're specifying use HEVC.


436
00:11:55,036 --> 00:11:56,506
You can also specify your bit


437
00:11:56,506 --> 00:11:58,286
rate and dimensions, or you can


438
00:11:58,286 --> 00:11:59,456
use one of our convenience


439
00:11:59,566 --> 00:12:01,236
settings in capture, you can use


440
00:12:01,236 --> 00:12:02,546
the VideoDataOutput and for


441
00:12:02,546 --> 00:12:03,646
general encode you can use the


442
00:12:03,646 --> 00:12:05,006
AVOutputSettingsAssistant.


443
00:12:05,196 --> 00:12:06,656
We've added two new presets here


444
00:12:06,656 --> 00:12:08,196
that on supported devices will


445
00:12:08,196 --> 00:12:09,936
return HEVC output settings.


446
00:12:11,076 --> 00:12:12,136
Now, if you're in the business


447
00:12:12,136 --> 00:12:13,176
of creating your own custom


448
00:12:13,176 --> 00:12:14,696
output settings, it can be a


449
00:12:14,696 --> 00:12:15,466
little tricky.


450
00:12:15,856 --> 00:12:17,216
So, not all encoders support all


451
00:12:17,216 --> 00:12:17,976
output settings.


452
00:12:19,006 --> 00:12:20,216
We've fixed that problem in iOS


453
00:12:20,216 --> 00:12:21,826
11 and macOS High Sierra so you


454
00:12:21,826 --> 00:12:23,016
can now query the encoder for


455
00:12:23,016 --> 00:12:24,336
supported properties to use in


456
00:12:24,336 --> 00:12:25,226
your output settings.


457
00:12:25,546 --> 00:12:27,606
To do that you pass in HEVC


458
00:12:27,606 --> 00:12:29,336
here, and it will return the


459
00:12:29,336 --> 00:12:30,636
encoder ID and a list of


460
00:12:30,636 --> 00:12:31,616
supported properties.


461
00:12:32,166 --> 00:12:33,446
The encoder ID is the unique


462
00:12:33,446 --> 00:12:35,206
identifier for that specific


463
00:12:35,206 --> 00:12:36,906
encoder, and with that the


464
00:12:36,906 --> 00:12:38,446
properties and the encoder ID


465
00:12:38,446 --> 00:12:40,196
can be specified in the output


466
00:12:40,196 --> 00:12:41,186
settings and you can be sure


467
00:12:41,186 --> 00:12:42,176
that it actually works for


468
00:12:42,176 --> 00:12:42,656
compression.


469
00:12:43,396 --> 00:12:44,526
Now, let's move to the lowest


470
00:12:44,526 --> 00:12:45,906
level compression interface and


471
00:12:46,476 --> 00:12:47,786
that's compressing samples with


472
00:12:47,786 --> 00:12:48,816
VTCompressionSession.


473
00:12:49,306 --> 00:12:50,896
So, just like with AssetWriter


474
00:12:50,896 --> 00:12:51,856
you might be generating the


475
00:12:51,856 --> 00:12:53,206
samples yourself or getting them


476
00:12:53,206 --> 00:12:55,446
from another one of our APIs.


477
00:12:55,446 --> 00:12:56,756
VTCompressionsSession compresses


478
00:12:56,756 --> 00:12:59,076
them and produces our compressed


479
00:12:59,076 --> 00:13:01,536
media data.


480
00:13:01,696 --> 00:13:03,196
So, to create a compression


481
00:13:03,196 --> 00:13:04,926
session with an HEVC encoder,


482
00:13:04,926 --> 00:13:05,816
it's very simple.


483
00:13:05,856 --> 00:13:07,256
In this case we're creating one


484
00:13:07,676 --> 00:13:09,806
that's compressing to H.264.


485
00:13:09,806 --> 00:13:11,366
Let's go ahead and convert it to


486
00:13:11,366 --> 00:13:11,496
HEVC.


487
00:13:12,656 --> 00:13:13,466
There we go, and now we're


488
00:13:13,466 --> 00:13:14,826
compressing with HEVC with


489
00:13:14,826 --> 00:13:15,756
VideoToolbox.


490
00:13:15,756 --> 00:13:16,736
So, that was pretty easy.


491
00:13:17,196 --> 00:13:18,486
Now, let's go over a couple of


492
00:13:18,486 --> 00:13:19,956
considerations on macOS.


493
00:13:21,356 --> 00:13:22,756
So, for optimal encoding


494
00:13:22,756 --> 00:13:24,136
performance on macOS you want to


495
00:13:24,136 --> 00:13:25,086
opt-in to hardware.


496
00:13:25,516 --> 00:13:26,606
This will use hardware when


497
00:13:26,606 --> 00:13:27,976
available and when it's not


498
00:13:28,036 --> 00:13:29,026
fallback to software.


499
00:13:29,776 --> 00:13:32,166
So, to do that, set the


500
00:13:32,166 --> 00:13:33,506
EnableHardwareAccelerated


501
00:13:33,506 --> 00:13:36,246
VideoEncoder property to true in


502
00:13:36,246 --> 00:13:38,926
your encoderSpecification and


503
00:13:38,926 --> 00:13:39,696
then pass it into


504
00:13:39,696 --> 00:13:41,136
VTCompressionSessionCreate.


505
00:13:41,936 --> 00:13:44,926
Now, if you're do realtime


506
00:13:44,926 --> 00:13:46,366
encode, you'll want to often


507
00:13:46,366 --> 00:13:47,896
require hardware and never


508
00:13:47,896 --> 00:13:48,896
fallback to software.


509
00:13:49,396 --> 00:13:51,186
So, to do that, you set in your


510
00:13:51,186 --> 00:13:52,206
encoderSpecification


511
00:13:52,276 --> 00:13:53,626
RequireHardwareAccelarated


512
00:13:53,626 --> 00:13:56,156
VideoEncoder to true and then


513
00:13:56,356 --> 00:13:57,366
pass it into your


514
00:13:57,366 --> 00:13:58,386
encoderSpecification.


515
00:13:58,386 --> 00:13:59,896
Again, on systems where hardware


516
00:13:59,896 --> 00:14:01,346
supported, this will succeed,


517
00:14:01,456 --> 00:14:02,766
but hardware on systems where


518
00:14:02,766 --> 00:14:03,676
there's only software encode,


519
00:14:04,036 --> 00:14:04,656
this will fail.


520
00:14:05,926 --> 00:14:06,906
All right, now let's go onto a


521
00:14:06,906 --> 00:14:08,616
couple advanced encoding topics.


522
00:14:09,106 --> 00:14:10,486
And the first is bit depth.


523
00:14:11,226 --> 00:14:12,316
So, if you've ever seen a nice


524
00:14:12,366 --> 00:14:14,056
gradient in a user interface or


525
00:14:14,056 --> 00:14:15,866
a nice sunrise or sunset, you


526
00:14:15,866 --> 00:14:16,866
notice what it looks like in


527
00:14:16,946 --> 00:14:18,466
real life versus what it looks


528
00:14:18,466 --> 00:14:20,206
like in a movie isn't exactly


529
00:14:20,206 --> 00:14:20,676
the same.


530
00:14:21,266 --> 00:14:22,366
So, you might see these color


531
00:14:22,366 --> 00:14:23,856
banning effects in the video


532
00:14:23,856 --> 00:14:25,976
version of your, of your movie.


533
00:14:26,546 --> 00:14:27,726
And that's because with 8-bits


534
00:14:27,726 --> 00:14:28,836
we don't have enough precision


535
00:14:28,836 --> 00:14:29,826
to represent the subtle


536
00:14:29,826 --> 00:14:31,066
differences between colors.


537
00:14:31,546 --> 00:14:32,386
Now, the great thing about


538
00:14:32,386 --> 00:14:33,836
10-bit is we actually do.


539
00:14:33,836 --> 00:14:34,716
So, you get these really


540
00:14:34,716 --> 00:14:35,616
beautiful gradients.


541
00:14:36,766 --> 00:14:38,116
Now, with our macOS software


542
00:14:38,116 --> 00:14:39,246
encoder, we actually support


543
00:14:39,286 --> 00:14:40,206
10-bit encode.


544
00:14:40,946 --> 00:14:41,806
So, first check that the


545
00:14:41,806 --> 00:14:43,606
property is supported, and if it


546
00:14:43,606 --> 00:14:45,236
is go ahead and use our HEVC


547
00:14:45,236 --> 00:14:47,206
Main10 profile for our software


548
00:14:47,206 --> 00:14:47,516
encoder.


549
00:14:48,386 --> 00:14:49,296
And we want to make sure your


550
00:14:49,296 --> 00:14:50,726
entire pipeline is 10-bit.


551
00:14:50,856 --> 00:14:51,926
We don't want you going from


552
00:14:51,926 --> 00:14:53,646
8-bit to 10-bit and then back to


553
00:14:53,646 --> 00:14:54,726
8-bit, because that loses


554
00:14:54,766 --> 00:14:55,226
precision.


555
00:14:55,566 --> 00:14:56,756
So, we've added new CoreVideo


556
00:14:56,756 --> 00:14:58,156
pixel buffer formats to ensure


557
00:14:58,156 --> 00:14:59,896
that you can stay in 10-bit.


558
00:14:59,896 --> 00:15:00,786
One is listed here.


559
00:15:01,266 --> 00:15:02,336
So, now for the first time you


560
00:15:02,336 --> 00:15:04,096
can render in 10-bit, encode in


561
00:15:04,096 --> 00:15:06,016
10-bit, decode in 10-bit, and


562
00:15:06,016 --> 00:15:07,436
for the first time ever on iOS


563
00:15:07,436 --> 00:15:08,846
and macOS our display pipeline


564
00:15:08,846 --> 00:15:10,536
also supports 10-bit, so we get


565
00:15:10,536 --> 00:15:11,336
it across everything.


566
00:15:12,516 --> 00:15:15,556
[ Applause ]


567
00:15:16,056 --> 00:15:17,116
Now, let's go over our second


568
00:15:17,116 --> 00:15:18,066
advanced topic and that's


569
00:15:18,066 --> 00:15:19,286
Hierarchical Encoding.


570
00:15:19,546 --> 00:15:20,986
And so to understand a little


571
00:15:20,986 --> 00:15:22,176
bit about this we need to go


572
00:15:22,176 --> 00:15:23,236
over a little bit of video


573
00:15:23,236 --> 00:15:25,046
encoding 101.


574
00:15:25,196 --> 00:15:26,426
There's three major frame types


575
00:15:26,426 --> 00:15:27,486
that compress video, and the


576
00:15:27,486 --> 00:15:28,736
first is an I Frame.


577
00:15:29,236 --> 00:15:30,216
You can think of I Frames like


578
00:15:30,216 --> 00:15:31,586
an image file and they can be


579
00:15:31,586 --> 00:15:32,686
decoded independently.


580
00:15:33,996 --> 00:15:35,846
Then we have a P Frame, and P


581
00:15:35,846 --> 00:15:37,606
Frames refer to previous frames,


582
00:15:37,746 --> 00:15:38,916
so think of them like a 1-way


583
00:15:38,916 --> 00:15:39,956
diff and they only contain


584
00:15:39,956 --> 00:15:41,116
information that isn't in the


585
00:15:41,116 --> 00:15:41,786
previous frame.


586
00:15:42,426 --> 00:15:43,906
Now we have their cousin, the B


587
00:15:43,906 --> 00:15:44,276
Frame.


588
00:15:44,746 --> 00:15:46,296
B Frames refer to previous and


589
00:15:46,296 --> 00:15:47,496
future frames and they're like a


590
00:15:47,496 --> 00:15:49,336
fancy multidirectional diff.


591
00:15:49,446 --> 00:15:50,266
So, they only contain


592
00:15:50,266 --> 00:15:51,996
information that isn't in either


593
00:15:51,996 --> 00:15:52,786
frame they're referencing.


594
00:15:53,506 --> 00:15:54,416
Now let's pretend we have a


595
00:15:54,416 --> 00:15:55,896
decoder that can only handle 30


596
00:15:55,896 --> 00:15:57,746
frames a second, and let's say


597
00:15:57,746 --> 00:15:59,416
we have content that is 240


598
00:15:59,416 --> 00:16:00,116
frames a second.


599
00:16:00,556 --> 00:16:01,706
Well that means we need to drop


600
00:16:01,706 --> 00:16:02,846
some frames before we can


601
00:16:02,846 --> 00:16:04,026
decode, because it can't keep


602
00:16:04,026 --> 00:16:04,226
up.


603
00:16:04,756 --> 00:16:06,076
So, when can we drop frames?


604
00:16:07,016 --> 00:16:08,196
We can drop frames when another


605
00:16:08,196 --> 00:16:09,506
frame doesn't depend on it.


606
00:16:10,146 --> 00:16:11,236
So, in this case we can drop the


607
00:16:11,236 --> 00:16:13,106
last P Frame, because it refers


608
00:16:13,106 --> 00:16:14,896
to another frame, but no frames


609
00:16:14,896 --> 00:16:15,466
refer to it.


610
00:16:15,606 --> 00:16:16,686
So, let's go ahead and drop it.


611
00:16:17,186 --> 00:16:18,916
We can also drop the B frame


612
00:16:18,916 --> 00:16:20,086
because it refers to other


613
00:16:20,086 --> 00:16:21,906
frames, but no frames refer to


614
00:16:21,906 --> 00:16:22,036
it.


615
00:16:22,386 --> 00:16:24,216
So, let's go ahead and drop it.


616
00:16:24,466 --> 00:16:25,806
Now, let's move to a real-world


617
00:16:25,806 --> 00:16:27,806
case of encoding 240 frames per


618
00:16:27,806 --> 00:16:28,506
second content.


619
00:16:29,826 --> 00:16:31,076
So, this is a typical encoding


620
00:16:31,076 --> 00:16:32,196
scheme used when creating


621
00:16:32,196 --> 00:16:33,676
content compatible with low end


622
00:16:33,676 --> 00:16:34,386
devices.


623
00:16:35,246 --> 00:16:36,436
So, for example, when encoding


624
00:16:36,436 --> 00:16:37,866
240 frames a second content,


625
00:16:37,866 --> 00:16:39,126
we'll have one non-droppable


626
00:16:39,126 --> 00:16:41,056
frame for every seven droppable.


627
00:16:41,416 --> 00:16:42,386
So, this gives us a lot of


628
00:16:42,386 --> 00:16:43,666
flexibility during playback.


629
00:16:44,036 --> 00:16:46,256
On devices that support 120


630
00:16:46,256 --> 00:16:47,406
frames per second decode we can


631
00:16:47,406 --> 00:16:48,436
handle that, on devices that


632
00:16:48,436 --> 00:16:49,966
only support 30, we can also


633
00:16:49,966 --> 00:16:50,616
playback there.


634
00:16:51,346 --> 00:16:52,546
Now, let's throw in our frame


635
00:16:52,546 --> 00:16:53,286
references.


636
00:16:53,756 --> 00:16:54,496
Because these frames are


637
00:16:54,496 --> 00:16:55,836
droppable, they can't refer to


638
00:16:55,836 --> 00:16:57,016
each other and they all refer to


639
00:16:57,016 --> 00:16:58,106
the non-droppable frame.


640
00:16:58,746 --> 00:16:59,546
Now, those of you with


641
00:16:59,546 --> 00:17:00,926
compression experience, are all


642
00:17:00,976 --> 00:17:02,886
already seeing one problem, is


643
00:17:02,886 --> 00:17:04,165
that compression suffers because


644
00:17:04,165 --> 00:17:05,576
we can't refer to the nearby


645
00:17:05,576 --> 00:17:06,136
frames.


646
00:17:06,346 --> 00:17:07,356
So, they're all referring to the


647
00:17:07,356 --> 00:17:08,695
non-droppable frame and a lot


648
00:17:08,695 --> 00:17:09,715
might have changed between the


649
00:17:09,715 --> 00:17:11,185
non-droppable and the droppable


650
00:17:11,185 --> 00:17:11,476
frame.


651
00:17:11,586 --> 00:17:13,236
All right, so that's problem


652
00:17:13,236 --> 00:17:14,006
number one that we're going to


653
00:17:14,006 --> 00:17:14,316
fix.


654
00:17:14,646 --> 00:17:15,935
Now, let's step through and


655
00:17:15,935 --> 00:17:17,236
decode down to 30 frames a


656
00:17:17,236 --> 00:17:17,506
second.


657
00:17:17,996 --> 00:17:19,376
So, first let's say we can't


658
00:17:19,376 --> 00:17:20,945
handle 240 frames a second,


659
00:17:21,616 --> 00:17:22,465
let's go ahead and drop some


660
00:17:22,465 --> 00:17:23,046
frames.


661
00:17:23,215 --> 00:17:24,226
So here we're dropping down to


662
00:17:24,226 --> 00:17:25,836
240 frames a second, and let's


663
00:17:25,836 --> 00:17:27,046
say we still can't keep up.


664
00:17:27,316 --> 00:17:28,626
We need to go down to 60 frames


665
00:17:28,626 --> 00:17:30,526
a second, let's say we have our


666
00:17:30,526 --> 00:17:32,046
decoder that can only handle 30


667
00:17:32,046 --> 00:17:33,126
frames a second, we can't even


668
00:17:33,126 --> 00:17:34,286
handle 60 frames a second.


669
00:17:34,616 --> 00:17:35,876
So, we go ahead and drop this


670
00:17:35,876 --> 00:17:36,396
last frame.


671
00:17:37,436 --> 00:17:39,226
Now, I was really guessing about


672
00:17:39,226 --> 00:17:40,196
what frames to drop.


673
00:17:40,336 --> 00:17:41,836
So, there's no indication at all


674
00:17:41,836 --> 00:17:42,866
about whether I should drop


675
00:17:42,866 --> 00:17:44,146
every other frame, or just the


676
00:17:44,146 --> 00:17:45,446
first half, or just the second


677
00:17:45,446 --> 00:17:46,196
half.


678
00:17:46,376 --> 00:17:47,806
So, let's fix this problem too.


679
00:17:47,806 --> 00:17:50,516
We can fix that with a concept


680
00:17:50,516 --> 00:17:52,186
known as temporal levels, and


681
00:17:52,186 --> 00:17:53,606
this allows us to organize


682
00:17:53,606 --> 00:17:55,366
frames about which ones to drop


683
00:17:55,366 --> 00:17:55,846
first.


684
00:17:56,146 --> 00:17:57,296
So, let's go ahead and re-encode


685
00:17:57,296 --> 00:17:57,886
our content.


686
00:17:57,956 --> 00:18:01,776
And you can already see that


687
00:18:01,776 --> 00:18:03,346
this is way more organized.


688
00:18:03,516 --> 00:18:05,196
So, first we drop temporal level


689
00:18:05,196 --> 00:18:06,666
three, and then two, and then


690
00:18:06,666 --> 00:18:07,736
one, and there's no guessing


691
00:18:07,736 --> 00:18:08,136
involved.


692
00:18:08,226 --> 00:18:09,156
So, this really helps.


693
00:18:09,656 --> 00:18:10,576
Now, let's throw in our frame


694
00:18:10,576 --> 00:18:11,196
references.


695
00:18:12,466 --> 00:18:13,626
And you can already see there's


696
00:18:13,626 --> 00:18:15,206
a big difference here, is that


697
00:18:15,206 --> 00:18:16,426
the reference frames are much


698
00:18:16,426 --> 00:18:17,416
closer together and they're


699
00:18:17,416 --> 00:18:18,596
often referring to frames that


700
00:18:18,596 --> 00:18:19,836
are just before, or just


701
00:18:19,836 --> 00:18:20,426
afterwards.


702
00:18:20,516 --> 00:18:21,496
So, this really improves


703
00:18:21,496 --> 00:18:21,936
compression.


704
00:18:22,946 --> 00:18:24,156
Now, let's go through and let's


705
00:18:24,156 --> 00:18:25,266
say we have our same decoder


706
00:18:25,266 --> 00:18:26,746
that can only handle 30 frames a


707
00:18:26,746 --> 00:18:27,026
second.


708
00:18:27,186 --> 00:18:28,426
We need to drop some frames.


709
00:18:29,116 --> 00:18:29,856
Well, there's no guessing


710
00:18:29,856 --> 00:18:30,246
involved.


711
00:18:30,796 --> 00:18:32,046
We dropped temporal level three.


712
00:18:32,286 --> 00:18:35,156
Now we're down to 120 frames a


713
00:18:35,156 --> 00:18:35,416
second.


714
00:18:35,416 --> 00:18:37,406
Let's drop down to level one.


715
00:18:37,456 --> 00:18:40,436
Now we're down to 60, and now we


716
00:18:40,436 --> 00:18:42,156
have a level that our decoder


717
00:18:42,156 --> 00:18:42,986
can actually handle.


718
00:18:43,396 --> 00:18:45,756
So, this reduces guessing with


719
00:18:45,756 --> 00:18:46,256
frame dropping.


720
00:18:47,616 --> 00:18:48,416
Let's go over what we've


721
00:18:48,416 --> 00:18:48,826
learned.


722
00:18:49,066 --> 00:18:50,626
So, with HEVC hierarchical


723
00:18:50,626 --> 00:18:51,786
encoding, we have improved


724
00:18:51,786 --> 00:18:52,966
temporal scalability.


725
00:18:53,416 --> 00:18:54,406
There's a much more obvious


726
00:18:54,406 --> 00:18:55,506
frame dropping pattern and it


727
00:18:55,506 --> 00:18:57,546
removes frame drop guessing


728
00:18:57,546 --> 00:18:58,266
during playback.


729
00:18:58,786 --> 00:19:00,306
We also have improved motion


730
00:19:00,306 --> 00:19:01,986
compensation, the reference


731
00:19:01,986 --> 00:19:03,296
frames are much closer to each


732
00:19:03,296 --> 00:19:04,796
other, so we can use more parts


733
00:19:04,796 --> 00:19:05,996
of other frames and it also


734
00:19:05,996 --> 00:19:06,806
improves compression.


735
00:19:07,286 --> 00:19:08,376
We're also using file


736
00:19:08,376 --> 00:19:09,806
annotations and for those of you


737
00:19:09,806 --> 00:19:11,426
who like to read specs, check


738
00:19:11,426 --> 00:19:14,146
out MPEG-4, Part 15 section 8.4


739
00:19:14,466 --> 00:19:15,826
and basically we're using sample


740
00:19:15,826 --> 00:19:16,996
groups, so no bitstream is


741
00:19:17,026 --> 00:19:18,156
parsing -- no, sorry.


742
00:19:18,716 --> 00:19:20,236
We're using sample groups so no


743
00:19:20,236 --> 00:19:21,776
bitstream parsing is necessary


744
00:19:21,776 --> 00:19:22,986
to get at this information.


745
00:19:23,126 --> 00:19:24,056
So, that really helps.


746
00:19:24,546 --> 00:19:25,086
All right.


747
00:19:25,086 --> 00:19:26,396
How do we opt-in to this?


748
00:19:27,276 --> 00:19:28,446
So you want to opt-in to this if


749
00:19:28,446 --> 00:19:29,526
you want to create compatible


750
00:19:29,526 --> 00:19:31,016
high frame rate content and


751
00:19:31,016 --> 00:19:32,316
there's two properties you


752
00:19:32,316 --> 00:19:32,846
should set.


753
00:19:33,136 --> 00:19:34,546
You set the base layer and


754
00:19:34,546 --> 00:19:35,376
capture frame rate.


755
00:19:36,006 --> 00:19:36,826
First check that they're


756
00:19:36,826 --> 00:19:38,086
supported on the encoder you're


757
00:19:38,086 --> 00:19:39,526
using, then set the


758
00:19:39,526 --> 00:19:41,166
BaseLayerFrameRate, this is the


759
00:19:41,166 --> 00:19:43,066
temporal level 0 frame rate, in


760
00:19:43,066 --> 00:19:44,226
our previous example this was


761
00:19:44,226 --> 00:19:45,846
the 30 frames a second, and then


762
00:19:45,846 --> 00:19:47,386
set the ExpectedFrameRate, in


763
00:19:47,386 --> 00:19:48,916
our previous example this was


764
00:19:48,916 --> 00:19:50,256
240 frames a second.


765
00:19:50,876 --> 00:19:52,446
The base layer must be decoded,


766
00:19:52,566 --> 00:19:53,786
and we can decode or drop other


767
00:19:53,786 --> 00:19:54,246
levels.


768
00:19:54,936 --> 00:19:56,226
So, now that you're all experts


769
00:19:56,226 --> 00:19:58,006
in hierarchical encoding, let's


770
00:19:58,006 --> 00:19:59,376
move it over to Brad for the


771
00:19:59,376 --> 00:20:00,356
image side of things.


772
00:20:00,456 --> 00:20:00,936
Thank you.


773
00:20:01,516 --> 00:20:06,726
[ Applause ]


774
00:20:07,226 --> 00:20:07,826
>> Thanks, Erik.


775
00:20:08,146 --> 00:20:09,416
I'm Brad Ford from the camera


776
00:20:09,416 --> 00:20:11,576
software team, and I get to talk


777
00:20:11,576 --> 00:20:12,566
to you about the other


778
00:20:12,566 --> 00:20:14,046
four-letter acronym that begins


779
00:20:14,046 --> 00:20:18,416
with HE, Here's the agenda for


780
00:20:18,416 --> 00:20:19,356
the rest of the session.


781
00:20:19,716 --> 00:20:20,806
First, we're going to cover what


782
00:20:20,806 --> 00:20:22,726
is HEIF at high level.


783
00:20:22,856 --> 00:20:24,566
We'll start at the very lowest


784
00:20:24,566 --> 00:20:25,906
level when we talk about reading


785
00:20:25,906 --> 00:20:27,936
and writing files with HEIF.


786
00:20:28,456 --> 00:20:29,676
Then we'll go up to the top of


787
00:20:29,676 --> 00:20:31,086
the stack and talk about how to


788
00:20:31,086 --> 00:20:33,126
use general use cases and common


789
00:20:33,126 --> 00:20:34,986
scenarios with HEIF, and we'll


790
00:20:34,986 --> 00:20:36,276
end with a topic that's most


791
00:20:36,276 --> 00:20:37,626
dear, near and dear to me, which


792
00:20:37,626 --> 00:20:38,536
is capturing HEIF.


793
00:20:39,546 --> 00:20:41,046
So, first off, what is HEIF?


794
00:20:42,336 --> 00:20:44,256
HEIF is the High Efficiency


795
00:20:44,256 --> 00:20:46,466
Image File Format.


796
00:20:46,936 --> 00:20:48,806
The second F is implied and


797
00:20:48,806 --> 00:20:49,216
silent.


798
00:20:49,436 --> 00:20:50,786
You don't need to call it HEIF


799
00:20:50,786 --> 00:20:51,556
[extra F sound].


800
00:20:51,556 --> 00:20:53,336
You'll just embarrass yourself


801
00:20:53,336 --> 00:20:54,356
in front of your compressionist


802
00:20:54,356 --> 00:20:55,136
friends if you do that.


803
00:20:55,706 --> 00:20:57,436
It's a modern container format


804
00:20:57,436 --> 00:20:58,866
for still images, and image


805
00:20:58,866 --> 00:20:59,546
sequences.


806
00:21:00,136 --> 00:21:02,156
It's part of the MPEG H Part 12


807
00:21:02,156 --> 00:21:04,216
specification, and by way of


808
00:21:04,216 --> 00:21:05,846
curiosity it was proposed in


809
00:21:05,846 --> 00:21:08,306
2013 and it was ratified in


810
00:21:08,306 --> 00:21:11,156
summer of 2015, just 1.5 years


811
00:21:11,156 --> 00:21:11,526
later.


812
00:21:12,346 --> 00:21:13,296
If any of you know anything


813
00:21:13,296 --> 00:21:15,276
about standards organizations, a


814
00:21:15,276 --> 00:21:16,516
year and a half is kind of like


815
00:21:16,636 --> 00:21:18,216
two days in real people time.


816
00:21:18,216 --> 00:21:19,016
So, you know it must be an


817
00:21:19,066 --> 00:21:21,856
awesome spec. The technical


818
00:21:21,856 --> 00:21:22,936
detail I'm sure your most


819
00:21:22,936 --> 00:21:24,206
interested in and the reasons


820
00:21:24,206 --> 00:21:26,056
that you came today is how to


821
00:21:26,056 --> 00:21:26,676
pronounce it.


822
00:21:27,716 --> 00:21:27,976
So-- .


823
00:21:28,516 --> 00:21:32,616
[ Laughter and Applause ]


824
00:21:33,116 --> 00:21:34,416
I use the scientific method, I


825
00:21:34,566 --> 00:21:35,886
pulled all the engineers on my


826
00:21:35,886 --> 00:21:37,766
floor and the voting was largely


827
00:21:37,766 --> 00:21:38,986
along party lines.


828
00:21:39,456 --> 00:21:41,586
The German speaker said "hife",


829
00:21:42,026 --> 00:21:44,166
the French said "eff", and the


830
00:21:44,166 --> 00:21:45,846
Russian said "heef".


831
00:21:45,846 --> 00:21:47,906
And "heef" was the runaway


832
00:21:47,906 --> 00:21:48,416
winner though.


833
00:21:48,836 --> 00:21:50,486
That's "heef" as in I can't


834
00:21:50,486 --> 00:21:52,576
belief how big, or how small the


835
00:21:52,576 --> 00:21:53,066
files are.


836
00:21:53,986 --> 00:21:55,946
Now, my Finnish office-mate was


837
00:21:55,946 --> 00:21:57,546
quick to point out that Nokia


838
00:21:57,546 --> 00:21:58,686
researchers were the ones that


839
00:21:58,686 --> 00:22:00,186
came up with the spec, so the


840
00:22:00,186 --> 00:22:01,666
Finnish pronunciation should


841
00:22:01,666 --> 00:22:03,846
win, that would be the 1 percent


842
00:22:03,976 --> 00:22:04,536
"hafe".


843
00:22:07,496 --> 00:22:08,806
Well, as for me and my floor


844
00:22:08,806 --> 00:22:09,776
we're going to call it "heef".


845
00:22:10,176 --> 00:22:12,546
It can use HEVC intra-encoding,


846
00:22:12,636 --> 00:22:14,326
which unsurprisingly compresses


847
00:22:14,326 --> 00:22:15,856
much better than the 20-year-old


848
00:22:16,036 --> 00:22:18,746
JPEG, two times as well as a


849
00:22:18,746 --> 00:22:19,366
matter of fact.


850
00:22:19,726 --> 00:22:21,406
That's an average of two times


851
00:22:21,406 --> 00:22:22,906
smaller, not up to two times


852
00:22:22,906 --> 00:22:23,316
smaller.


853
00:22:23,836 --> 00:22:25,876
We used qualitative analysis on


854
00:22:25,876 --> 00:22:27,496
a large data set of images to


855
00:22:27,496 --> 00:22:29,576
arrive at this number, ensuring


856
00:22:29,576 --> 00:22:32,126
visually equal quality to JPEG.


857
00:22:33,216 --> 00:22:35,276
It supports chopping up an image


858
00:22:35,276 --> 00:22:36,886
and compressing it individual


859
00:22:36,886 --> 00:22:37,536
tiles.


860
00:22:38,056 --> 00:22:39,336
This allows for more efficient


861
00:22:39,336 --> 00:22:41,456
decompression of large images in


862
00:22:41,456 --> 00:22:42,126
sections.


863
00:22:43,356 --> 00:22:45,106
HEIF also has first class


864
00:22:45,106 --> 00:22:47,036
support for auxiliary images,


865
00:22:47,286 --> 00:22:49,366
such as alpha, disparity, or


866
00:22:49,366 --> 00:22:50,166
depth maps.


867
00:22:51,576 --> 00:22:52,446
Here's a gray scale


868
00:22:52,446 --> 00:22:54,126
visualization of the depth map


869
00:22:54,166 --> 00:22:55,326
that's embedded in this HEIF


870
00:22:55,326 --> 00:22:55,706
file.


871
00:22:56,626 --> 00:22:58,116
Having depth information opens


872
00:22:58,116 --> 00:22:59,486
up a world of possibilities for


873
00:22:59,486 --> 00:23:01,386
image editing, such as applying


874
00:23:01,386 --> 00:23:02,166
different effects to the


875
00:23:02,166 --> 00:23:03,996
background and foreground like


876
00:23:03,996 --> 00:23:04,376
this.


877
00:23:05,686 --> 00:23:07,226
Here I've applied the Noir black


878
00:23:07,226 --> 00:23:08,646
and white filter to background,


879
00:23:08,976 --> 00:23:10,066
and the fade filter to the


880
00:23:10,066 --> 00:23:10,606
foreground.


881
00:23:10,606 --> 00:23:11,456
So, notice that the little


882
00:23:11,456 --> 00:23:13,126
girl's tights are still in pink,


883
00:23:13,126 --> 00:23:14,606
while everything behind is in


884
00:23:14,606 --> 00:23:15,026
Noir.


885
00:23:15,956 --> 00:23:17,336
Knowing the gradations of depth,


886
00:23:17,336 --> 00:23:19,006
I can even move the switch-over


887
00:23:19,006 --> 00:23:21,276
point of the filters like this,


888
00:23:21,506 --> 00:23:22,766
keep an eye on her flower.


889
00:23:24,126 --> 00:23:25,156
Now, just her hand and the


890
00:23:25,156 --> 00:23:26,246
flower are in color, while


891
00:23:26,246 --> 00:23:27,276
everything else is black and


892
00:23:27,276 --> 00:23:27,556
white.


893
00:23:28,806 --> 00:23:30,026
You can even control foreground


894
00:23:30,026 --> 00:23:31,086
and background lighting


895
00:23:31,186 --> 00:23:32,756
separately, exposure, such as


896
00:23:33,036 --> 00:23:33,476
this.


897
00:23:34,916 --> 00:23:35,876
Now, she looks like you


898
00:23:35,876 --> 00:23:37,266
Photoshopped her into her very


899
00:23:37,266 --> 00:23:37,806
own photo.


900
00:23:38,546 --> 00:23:39,556
I'm not saying you should do it,


901
00:23:39,556 --> 00:23:40,486
I'm saying you could do it.


902
00:23:41,826 --> 00:23:43,496
That was just a teaser for a


903
00:23:43,496 --> 00:23:45,876
two-part session that we had on


904
00:23:45,876 --> 00:23:47,506
depth, and that's sessions 507


905
00:23:47,506 --> 00:23:48,216
and 508.


906
00:23:48,216 --> 00:23:49,156
I hope you'll make some time to


907
00:23:49,156 --> 00:23:50,066
look at those videos.


908
00:23:51,246 --> 00:23:53,046
When it comes to metadata, HEIF


909
00:23:53,316 --> 00:23:55,236
has a great compatibility story.


910
00:23:55,376 --> 00:23:56,836
It supports industry standard


911
00:23:56,836 --> 00:23:59,316
Exif and xmp as first-class


912
00:23:59,316 --> 00:23:59,836
citizens.


913
00:24:01,056 --> 00:24:02,676
HEIF isn't just for single


914
00:24:02,676 --> 00:24:05,756
images, it also supports image


915
00:24:05,756 --> 00:24:07,796
sequences such as bursts,


916
00:24:08,106 --> 00:24:10,576
exposure brackets, focus stacks.


917
00:24:11,256 --> 00:24:12,556
It also has affordances for


918
00:24:12,556 --> 00:24:14,686
mixed media, such as audio and


919
00:24:14,686 --> 00:24:15,496
video tracks.


920
00:24:17,306 --> 00:24:18,346
Let's do a demo, shall we?


921
00:24:19,626 --> 00:24:21,536
Okay, this is a showcase that


922
00:24:21,536 --> 00:24:22,966
takes place in Apple's very own


923
00:24:22,966 --> 00:24:23,566
Photos app.


924
00:24:30,576 --> 00:24:31,326
All right, I'm going to start


925
00:24:31,326 --> 00:24:34,016
with a pano and this is a nice


926
00:24:34,016 --> 00:24:36,156
looking pano, this one is from


927
00:24:36,156 --> 00:24:37,766
Pothole Dome in Yosemite.


928
00:24:38,256 --> 00:24:40,136
It looks great, it's sort of


929
00:24:40,416 --> 00:24:41,776
what you'd expect from a pano


930
00:24:41,776 --> 00:24:43,596
until you start zooming in.


931
00:24:44,276 --> 00:24:45,566
So, let's do that.


932
00:24:46,366 --> 00:24:47,496
Zoom in a bit.


933
00:24:48,316 --> 00:24:49,716
Looks nice, let's zoom in a


934
00:24:49,716 --> 00:24:50,336
little more.


935
00:24:51,176 --> 00:24:52,636
And then zoom in a little more.


936
00:24:53,776 --> 00:24:55,246
And zoom in a little more.


937
00:24:56,226 --> 00:24:57,456
And keep zooming.


938
00:24:58,136 --> 00:25:00,256
And keep zooming, oh my gosh I


939
00:25:00,256 --> 00:25:01,726
can see what the speed limit is,


940
00:25:02,426 --> 00:25:03,976
and wow.


941
00:25:04,516 --> 00:25:09,546
[ Applause ]


942
00:25:10,046 --> 00:25:11,546
There are cars there, and there


943
00:25:11,546 --> 00:25:13,306
are Porta Potties.


944
00:25:13,366 --> 00:25:14,686
I can even go and take a look at


945
00:25:14,686 --> 00:25:15,816
the peaks in the background.


946
00:25:18,376 --> 00:25:20,366
Notice how it snaps into clarity


947
00:25:20,366 --> 00:25:20,896
as I go.


948
00:25:21,466 --> 00:25:24,806
This is actually a 2.9 gigapixel


949
00:25:24,956 --> 00:25:25,356
pano.


950
00:25:25,826 --> 00:25:28,136
It's 91,000 pixels by about


951
00:25:28,206 --> 00:25:29,856
32,000 pixels.


952
00:25:30,476 --> 00:25:32,376
The RGB TIFF file for this is


953
00:25:32,376 --> 00:25:33,816
well over 2 gigabytes and I


954
00:25:33,816 --> 00:25:35,786
assured it brings any fast Mac


955
00:25:35,836 --> 00:25:38,566
to its knees, whereas the HEIF


956
00:25:38,566 --> 00:25:41,206
file is 160 megabytes, you


957
00:25:41,206 --> 00:25:42,866
literally cannot do this with


958
00:25:42,866 --> 00:25:45,026
JPEG, since JPEG maxes out at


959
00:25:45,106 --> 00:25:47,396
64k by 64k pixels.


960
00:25:47,986 --> 00:25:49,376
HEIF does not max out.


961
00:25:49,896 --> 00:25:52,056
It supports arbitrarily large


962
00:25:52,476 --> 00:25:55,206
files and it keeps the memory in


963
00:25:55,206 --> 00:25:56,926
check by efficiently loading and


964
00:25:56,926 --> 00:25:58,016
unloading tiles.


965
00:25:58,376 --> 00:25:59,566
So, while I have this enormous


966
00:25:59,596 --> 00:26:01,116
data sitting in front of me, I'm


967
00:26:01,116 --> 00:26:02,386
never using more than 70


968
00:26:02,386 --> 00:26:04,386
megabytes of memory at a time in


969
00:26:04,386 --> 00:26:05,006
the Photos app.


970
00:26:05,336 --> 00:26:07,316
So, it's responsive and I can


971
00:26:07,316 --> 00:26:08,146
zoom in and zoom out.


972
00:26:08,146 --> 00:26:09,196
I could do this all day long,


973
00:26:09,296 --> 00:26:10,236
but I should probably go back to


974
00:26:10,236 --> 00:26:10,626
slides.


975
00:26:12,516 --> 00:26:15,500
[ Applause ]


976
00:26:19,226 --> 00:26:23,136
On all iOS 11 and macOS 10.13


977
00:26:23,136 --> 00:26:24,856
supported hardware, we read and


978
00:26:24,856 --> 00:26:26,816
decode three different flavors


979
00:26:26,816 --> 00:26:28,046
of HEIF.


980
00:26:28,136 --> 00:26:29,256
The three different extensions


981
00:26:29,256 --> 00:26:30,466
you see here relate to how the


982
00:26:30,466 --> 00:26:32,196
main image in the file is


983
00:26:32,196 --> 00:26:32,676
encoded.


984
00:26:34,416 --> 00:26:37,936
For HEIC, .HEIC also the UTI of


985
00:26:37,936 --> 00:26:39,886
public.heic that refers to HEIF


986
00:26:39,886 --> 00:26:41,826
files in which the main image is


987
00:26:41,826 --> 00:26:43,396
compressed with HEVC.


988
00:26:44,156 --> 00:26:46,746
The second flavor is AVCI, in


989
00:26:46,746 --> 00:26:47,956
which the main images is


990
00:26:47,956 --> 00:26:51,016
compressed with H.264, and then


991
00:26:51,016 --> 00:26:52,576
the .HEIF extension is reserved


992
00:26:52,576 --> 00:26:55,106
for anything else, could be JPEG


993
00:26:55,106 --> 00:26:56,246
inside, could be any of the


994
00:26:56,246 --> 00:26:57,226
supported codecs.


995
00:26:59,166 --> 00:27:01,046
We only support one form of HEIF


996
00:27:01,046 --> 00:27:03,006
for encode and writing, and


997
00:27:03,006 --> 00:27:04,956
that's the HEIC format, in other


998
00:27:04,956 --> 00:27:06,496
words the ones in which you use


999
00:27:06,496 --> 00:27:06,806
HEVC.


1000
00:27:06,806 --> 00:27:08,686
We figure if you've gone far


1001
00:27:08,686 --> 00:27:09,976
enough to adopt the new file


1002
00:27:09,976 --> 00:27:11,326
container, you might as well


1003
00:27:11,326 --> 00:27:12,646
adopt the greatest compression


1004
00:27:12,646 --> 00:27:13,506
standard as well.


1005
00:27:14,166 --> 00:27:15,606
Support is currently limited to


1006
00:27:15,736 --> 00:27:17,836
iOS 11 devices with the A10


1007
00:27:17,836 --> 00:27:19,636
Fusion chip.


1008
00:27:19,876 --> 00:27:21,036
All right, let's go over to


1009
00:27:21,036 --> 00:27:22,506
low-level access to HEIF.


1010
00:27:23,136 --> 00:27:25,036
The lowest level interface on


1011
00:27:25,036 --> 00:27:26,436
our platform for reading and


1012
00:27:26,436 --> 00:27:28,606
writing images is ImageIO.


1013
00:27:29,126 --> 00:27:30,736
It encapsulates reading from


1014
00:27:30,736 --> 00:27:32,706
either a file or in-memory data


1015
00:27:32,706 --> 00:27:34,396
source using an object called


1016
00:27:34,526 --> 00:27:35,696
CGImageSource.


1017
00:27:36,606 --> 00:27:38,096
It also supports writing to


1018
00:27:38,096 --> 00:27:40,556
files or to immutable data using


1019
00:27:40,746 --> 00:27:42,226
CGImageDestination.


1020
00:27:42,896 --> 00:27:44,036
These objects have been around


1021
00:27:44,216 --> 00:27:45,226
for a long time.


1022
00:27:45,286 --> 00:27:46,326
You've probably used them.


1023
00:27:47,236 --> 00:27:48,806
To open a JPEG image file on


1024
00:27:48,806 --> 00:27:50,296
disk, this is how you would do


1025
00:27:50,296 --> 00:27:51,356
it using ImageIO.


1026
00:27:51,516 --> 00:27:53,836
First you create the URL, then


1027
00:27:53,836 --> 00:27:54,276
you call


1028
00:27:54,276 --> 00:27:56,886
CGImageSourceCreateWithURL to


1029
00:27:56,886 --> 00:27:57,826
create your source.


1030
00:27:58,276 --> 00:27:59,616
The last argument is an options


1031
00:27:59,616 --> 00:28:00,736
dictionary where you can


1032
00:28:00,736 --> 00:28:02,266
optionally pass the UTI of the


1033
00:28:02,266 --> 00:28:02,776
input.


1034
00:28:03,206 --> 00:28:04,266
It's not needed when you're


1035
00:28:04,266 --> 00:28:06,106
opening a file on disk, because


1036
00:28:06,106 --> 00:28:07,646
the UTI can be inferred from the


1037
00:28:07,646 --> 00:28:09,386
file path extension.


1038
00:28:10,286 --> 00:28:11,876
Once you've got a CGImageSource,


1039
00:28:12,276 --> 00:28:13,986
you can do several things with


1040
00:28:14,326 --> 00:28:17,016
it, such as copy the properties


1041
00:28:17,016 --> 00:28:19,066
at any index, that's getting


1042
00:28:19,166 --> 00:28:21,666
metadata out of it such as Exif.


1043
00:28:21,666 --> 00:28:23,556
You can also create a CGImage


1044
00:28:23,626 --> 00:28:24,826
from any of the images in the


1045
00:28:24,826 --> 00:28:25,216
file.


1046
00:28:25,326 --> 00:28:27,106
For JPEG there's typically only


1047
00:28:27,106 --> 00:28:28,306
one image in the file.


1048
00:28:29,016 --> 00:28:30,426
CGImage is of course like a


1049
00:28:30,426 --> 00:28:32,796
promise, a rendering promise.


1050
00:28:33,126 --> 00:28:34,776
The JPEG data can be lazily


1051
00:28:34,776 --> 00:28:36,776
decoded when necessary using


1052
00:28:36,776 --> 00:28:38,386
CGImage such as when you're


1053
00:28:38,386 --> 00:28:40,396
rendering it to a CG bitmap


1054
00:28:40,396 --> 00:28:40,996
context.


1055
00:28:41,676 --> 00:28:43,106
You can also get a thumbnail


1056
00:28:43,106 --> 00:28:45,176
image using a variety of


1057
00:28:45,176 --> 00:28:45,836
options.


1058
00:28:46,276 --> 00:28:47,856
For instance, the maximum size


1059
00:28:47,856 --> 00:28:49,116
that you would like, what to do


1060
00:28:49,116 --> 00:28:50,206
if there's none available in the


1061
00:28:50,206 --> 00:28:51,986
file, and when you call


1062
00:28:51,986 --> 00:28:52,736
CGImageSource


1063
00:28:52,736 --> 00:28:54,556
CreateThumbnailAtIndex it does


1064
00:28:54,856 --> 00:28:55,976
decode right away.


1065
00:28:57,896 --> 00:28:59,426
Now, here's the analogous code


1066
00:28:59,426 --> 00:29:01,386
for opening a .HEIC file.


1067
00:29:02,506 --> 00:29:03,816
Can anyone spot the differences?


1068
00:29:05,206 --> 00:29:06,236
Here, I'll make it easy for you.


1069
00:29:06,796 --> 00:29:08,166
That's it.


1070
00:29:09,076 --> 00:29:12,656
It's a comment and it's a file


1071
00:29:12,656 --> 00:29:13,666
path, that's it.


1072
00:29:14,146 --> 00:29:15,456
In other words, CGImageSource


1073
00:29:15,506 --> 00:29:16,196
just works.


1074
00:29:16,326 --> 00:29:17,806
The one difference you don't see


1075
00:29:17,806 --> 00:29:19,396
is how the HEVC is being


1076
00:29:19,396 --> 00:29:19,956
decoded.


1077
00:29:20,696 --> 00:29:22,606
On recent iOS devices and Macs


1078
00:29:22,606 --> 00:29:23,996
the decode is hardware


1079
00:29:23,996 --> 00:29:26,056
accelerated, whereas on older


1080
00:29:26,056 --> 00:29:27,656
devices it's done in software


1081
00:29:27,656 --> 00:29:28,876
and with thus be slower.


1082
00:29:30,106 --> 00:29:31,516
A quick word on the tiling


1083
00:29:31,516 --> 00:29:32,846
support that we just saw in the


1084
00:29:32,846 --> 00:29:35,516
demo, CGImageSource can provide


1085
00:29:35,516 --> 00:29:37,586
a dictionary of properties about


1086
00:29:37,586 --> 00:29:38,616
the image by calling


1087
00:29:38,766 --> 00:29:39,816
CGImageSourceCopy


1088
00:29:39,816 --> 00:29:41,496
PropertiesAtIndex and the


1089
00:29:41,496 --> 00:29:43,426
properties dictionary is a


1090
00:29:43,426 --> 00:29:46,666
synonym for metadata, Exif,


1091
00:29:46,866 --> 00:29:48,256
Apple Maker Note, et cetera.


1092
00:29:48,966 --> 00:29:50,126
There's also a subdictionary


1093
00:29:50,126 --> 00:29:51,856
called the TIFF subdictionary,


1094
00:29:52,196 --> 00:29:53,886
in which you'll find the size of


1095
00:29:53,886 --> 00:29:55,496
the encoded tiles as the tile


1096
00:29:55,496 --> 00:29:56,956
length and tile width.


1097
00:29:57,236 --> 00:29:58,576
By default they are encoded as


1098
00:29:58,576 --> 00:30:00,836
512 by 512 pixels.


1099
00:30:03,076 --> 00:30:04,956
CGImageSource provides you with


1100
00:30:05,006 --> 00:30:07,336
CG Images as we saw, and CGImage


1101
00:30:07,336 --> 00:30:08,866
has a nifty method called


1102
00:30:08,976 --> 00:30:10,746
cropping(to: that takes


1103
00:30:10,746 --> 00:30:11,806
advantage of the tiling.


1104
00:30:12,556 --> 00:30:14,536
This call creates a new CGImage


1105
00:30:14,536 --> 00:30:16,736
containing just a subsection of


1106
00:30:16,736 --> 00:30:17,546
another image.


1107
00:30:18,286 --> 00:30:20,056
This isn't a new API, but it


1108
00:30:20,056 --> 00:30:21,536
works really well with HEIF


1109
00:30:21,876 --> 00:30:23,236
where the tiles are encoded


1110
00:30:23,276 --> 00:30:23,986
individually.


1111
00:30:24,536 --> 00:30:25,496
You don't need to worry about


1112
00:30:25,696 --> 00:30:27,896
the underlying encoded tile


1113
00:30:27,896 --> 00:30:29,396
size, you can simply ask for the


1114
00:30:29,396 --> 00:30:30,476
subregion that you want to


1115
00:30:30,476 --> 00:30:33,046
display or render, and know that


1116
00:30:33,346 --> 00:30:34,296
under the hood you're getting


1117
00:30:34,296 --> 00:30:35,676
all of the tile-y goodness.


1118
00:30:35,676 --> 00:30:38,076
It's only decoding the tiles


1119
00:30:38,076 --> 00:30:39,086
that are necessary for that


1120
00:30:39,146 --> 00:30:39,716
subregion.


1121
00:30:40,326 --> 00:30:41,906
Now, let's talk about the


1122
00:30:41,906 --> 00:30:42,616
writing side.


1123
00:30:43,496 --> 00:30:45,096
Here's how you write a JPEG with


1124
00:30:45,096 --> 00:30:45,676
ImageIO.


1125
00:30:46,496 --> 00:30:47,796
You, after creating a


1126
00:30:47,796 --> 00:30:49,326
CGImageDestination calling


1127
00:30:49,326 --> 00:30:51,366
CGImageDestinationCreateWithURL,


1128
00:30:53,956 --> 00:30:56,266
where I should point out you do


1129
00:30:56,266 --> 00:30:58,116
need to specify what the UTI is.


1130
00:30:58,686 --> 00:31:00,806
Here I'm using AVFileType.jpg


1131
00:31:00,806 --> 00:31:03,136
which is the same as the UT type


1132
00:31:03,276 --> 00:31:04,316
public.jpg.


1133
00:31:05,356 --> 00:31:07,086
I'm being careful with the


1134
00:31:07,086 --> 00:31:10,156
result, I'm using guard let just


1135
00:31:10,156 --> 00:31:11,576
in case destination is nil.


1136
00:31:12,126 --> 00:31:14,016
Now, in the, with the current


1137
00:31:14,016 --> 00:31:15,226
JPEG, the only reason it would


1138
00:31:15,226 --> 00:31:17,336
be nil is if you asked to write


1139
00:31:17,336 --> 00:31:18,456
to a file that's outside your


1140
00:31:18,456 --> 00:31:20,206
sandbox, but to be defensive you


1141
00:31:20,206 --> 00:31:21,896
should really write code in this


1142
00:31:21,896 --> 00:31:22,286
manner.


1143
00:31:23,126 --> 00:31:25,056
Next, you add your CG image or


1144
00:31:25,056 --> 00:31:27,276
images, one at a time with


1145
00:31:27,276 --> 00:31:28,326
accompanying metadata if you


1146
00:31:28,576 --> 00:31:29,076
would like.


1147
00:31:29,076 --> 00:31:30,846
And then when you're done, you


1148
00:31:30,846 --> 00:31:32,896
call CGImageDestinationFinalize


1149
00:31:33,376 --> 00:31:34,756
which closes the container for


1150
00:31:34,756 --> 00:31:36,206
editing and then writes it to


1151
00:31:36,206 --> 00:31:36,496
disc.


1152
00:31:37,956 --> 00:31:39,286
Now, let's look at the HEIC


1153
00:31:39,486 --> 00:31:39,896
writing.


1154
00:31:40,056 --> 00:31:41,266
Again, differences are very


1155
00:31:41,266 --> 00:31:41,696
small.


1156
00:31:42,186 --> 00:31:45,456
Just the file path extension,


1157
00:31:45,566 --> 00:31:47,166
the UTI, the comment.


1158
00:31:47,746 --> 00:31:48,856
One important difference here


1159
00:31:48,856 --> 00:31:50,656
though between JPEG and HEIF is


1160
00:31:50,656 --> 00:31:51,516
that creating a


1161
00:31:51,516 --> 00:31:54,806
CGImageDestination will fail on


1162
00:31:54,806 --> 00:31:57,006
devices with no HEVC hardware


1163
00:31:57,006 --> 00:31:57,596
encoder.


1164
00:31:58,126 --> 00:31:59,776
And when it fails, destination


1165
00:31:59,776 --> 00:32:00,276
is nil.


1166
00:32:00,696 --> 00:32:02,056
So, the good defensive code that


1167
00:32:02,056 --> 00:32:03,316
I wrote on the previous slide,


1168
00:32:03,706 --> 00:32:05,446
is even more important to do


1169
00:32:05,516 --> 00:32:07,606
with HEVC where there is now a


1170
00:32:07,606 --> 00:32:09,036
new reason that the destination


1171
00:32:09,036 --> 00:32:09,686
might be nil.


1172
00:32:10,616 --> 00:32:11,836
Please always make sure that you


1173
00:32:11,836 --> 00:32:13,656
check this is the one and only


1174
00:32:13,656 --> 00:32:15,496
way to know whether writing to


1175
00:32:15,496 --> 00:32:16,616
HEIC is supported on your


1176
00:32:16,616 --> 00:32:17,366
current platform.


1177
00:32:19,056 --> 00:32:20,206
Also worth noting is that


1178
00:32:20,206 --> 00:32:21,986
ImageIO has added support for


1179
00:32:21,986 --> 00:32:23,666
reading and writing depth maps


1180
00:32:23,666 --> 00:32:25,086
as I talked about earlier.


1181
00:32:25,436 --> 00:32:26,746
We've done that for both HEIC


1182
00:32:26,746 --> 00:32:28,856
and we manipulated JPEG in


1183
00:32:28,856 --> 00:32:30,626
strange sorcery ways that we


1184
00:32:31,036 --> 00:32:32,026
probably shouldn't talk about,


1185
00:32:32,406 --> 00:32:34,216
I'm not going to delve deeply


1186
00:32:34,216 --> 00:32:35,636
into that though because it's


1187
00:32:35,636 --> 00:32:37,066
covered in the dedicated session


1188
00:32:37,066 --> 00:32:39,536
507 and 508 where we talk about


1189
00:32:39,606 --> 00:32:39,946
depth.


1190
00:32:39,946 --> 00:32:41,226
And I hope you'll go look at


1191
00:32:41,226 --> 00:32:42,686
those session because they're


1192
00:32:43,056 --> 00:32:45,296
many segues to the auxiliary


1193
00:32:45,296 --> 00:32:48,146
image format in HEIF.


1194
00:32:48,146 --> 00:32:49,216
All right, it's time to move on


1195
00:32:49,216 --> 00:32:50,486
to our next major topic which is


1196
00:32:50,616 --> 00:32:52,106
high level access to HEIF.


1197
00:32:52,986 --> 00:32:55,936
But before we do that, I feel


1198
00:32:55,936 --> 00:32:57,806
that WWDC should be a cultural


1199
00:32:57,806 --> 00:32:58,866
experience, culturally


1200
00:32:58,866 --> 00:33:00,316
enriching, not just an


1201
00:33:00,316 --> 00:33:01,106
educational one.


1202
00:33:01,106 --> 00:33:02,266
And that's why I want you to


1203
00:33:02,266 --> 00:33:03,286
rest your brains for a moment


1204
00:33:03,286 --> 00:33:04,926
with some compression poetry.


1205
00:33:06,226 --> 00:33:06,516
All right.


1206
00:33:07,396 --> 00:33:09,176
Wait for it.


1207
00:33:09,386 --> 00:33:13,046
JPEG is yay big, but HEIF is


1208
00:33:13,046 --> 00:33:13,456
brief.


1209
00:33:15,066 --> 00:33:15,396
[laughter] Thank you.


1210
00:33:16,041 --> 00:33:18,041
[ Applause ]


1211
00:33:18,066 --> 00:33:19,436
See it's compression poetry, so


1212
00:33:19,436 --> 00:33:20,106
it's small.


1213
00:33:20,526 --> 00:33:21,446
Did you like that?


1214
00:33:21,446 --> 00:33:22,916
Do you want to hear some more?


1215
00:33:24,066 --> 00:33:24,946
Okay, let's do another one.


1216
00:33:25,566 --> 00:33:26,696
Here's a compression haiku.


1217
00:33:29,186 --> 00:33:33,606
HEVC has twice as many syllables


1218
00:33:34,836 --> 00:33:37,176
as JPEG progress.


1219
00:33:38,166 --> 00:33:38,476
Thank you.


1220
00:33:38,756 --> 00:33:39,916
All right let's move on.


1221
00:33:41,746 --> 00:33:42,576
[applause] I'm sure they'll edit


1222
00:33:42,576 --> 00:33:43,306
that out later.


1223
00:33:44,226 --> 00:33:45,316
Okay, we're going to talk about


1224
00:33:45,316 --> 00:33:46,166
HEIF and PhotoKit.


1225
00:33:46,866 --> 00:33:48,006
PhotoKit is actually two


1226
00:33:48,006 --> 00:33:49,456
frameworks, it's Photos


1227
00:33:49,456 --> 00:33:51,106
framework and PhotosUI and it's


1228
00:33:51,106 --> 00:33:52,576
very high level, it's even above


1229
00:33:52,576 --> 00:33:53,156
UIKit.


1230
00:33:54,276 --> 00:33:56,816
The way that you work with HEIF


1231
00:33:56,816 --> 00:33:58,436
in PhotoKit when applying


1232
00:33:58,436 --> 00:34:00,056
adjustments we're going to cover


1233
00:34:00,116 --> 00:34:01,516
just briefly and we're going to


1234
00:34:01,516 --> 00:34:02,506
talk about how you apply


1235
00:34:02,506 --> 00:34:03,756
adjustments in three different


1236
00:34:03,756 --> 00:34:05,496
scenarios, photos, videos, and


1237
00:34:05,496 --> 00:34:06,206
Live Photos.


1238
00:34:06,496 --> 00:34:07,706
And then we'll talk about common


1239
00:34:07,706 --> 00:34:09,016
workflows that you would use


1240
00:34:09,016 --> 00:34:10,516
with PHPhotoLibrary.


1241
00:34:11,775 --> 00:34:12,956
Let's briefly outline the steps


1242
00:34:12,956 --> 00:34:14,866
involved in applying an edit or


1243
00:34:14,866 --> 00:34:16,726
an adjustment to an asset using


1244
00:34:16,726 --> 00:34:17,346
PhotoLibrary.


1245
00:34:18,216 --> 00:34:19,746
You ask the PHPhotoLibrary to


1246
00:34:19,746 --> 00:34:21,626
performChanges and in that


1247
00:34:21,626 --> 00:34:23,556
change request you start with a


1248
00:34:23,556 --> 00:34:25,045
PHAsset that you want to edit,


1249
00:34:25,496 --> 00:34:26,525
such as a photo.


1250
00:34:27,266 --> 00:34:28,946
And you call request content


1251
00:34:28,946 --> 00:34:30,876
editing input on the asset to


1252
00:34:30,876 --> 00:34:33,306
get a PHContentEditingInput.


1253
00:34:33,426 --> 00:34:35,626
This is the guy that gives you


1254
00:34:35,626 --> 00:34:36,755
access to all the media


1255
00:34:36,755 --> 00:34:38,446
associated with your asset such


1256
00:34:38,446 --> 00:34:42,025
as a UIImage, a URL, an AVAsset,


1257
00:34:42,466 --> 00:34:43,536
or a Live Photo.


1258
00:34:44,406 --> 00:34:45,536
Next you create a


1259
00:34:45,536 --> 00:34:47,906
PHContentEditingOutput by


1260
00:34:47,906 --> 00:34:49,176
calling in it with content


1261
00:34:49,176 --> 00:34:49,956
editing input.


1262
00:34:50,716 --> 00:34:52,556
The editing output tells you


1263
00:34:52,556 --> 00:34:53,906
where to place all of your


1264
00:34:53,906 --> 00:34:55,746
rendered files on disc by


1265
00:34:55,746 --> 00:34:57,096
providing you with a


1266
00:34:57,096 --> 00:34:58,586
renderContentURL.


1267
00:34:59,076 --> 00:35:00,906
You then perform your edits to


1268
00:35:00,906 --> 00:35:02,896
the media that's provided you


1269
00:35:02,896 --> 00:35:04,936
from the editing input, and then


1270
00:35:04,936 --> 00:35:06,356
you write them to the specified


1271
00:35:06,356 --> 00:35:06,966
location.


1272
00:35:07,336 --> 00:35:10,546
Finally, the PHPhotoLibrary


1273
00:35:10,546 --> 00:35:12,376
validates your changes and


1274
00:35:12,376 --> 00:35:13,606
accepts them as a whole or


1275
00:35:13,606 --> 00:35:14,596
rejects the change.


1276
00:35:16,066 --> 00:35:18,186
So, the rules with respect to


1277
00:35:18,186 --> 00:35:19,446
renderedOutputImages are


1278
00:35:19,446 --> 00:35:21,316
unchanged, but you may not been


1279
00:35:21,316 --> 00:35:23,036
aware that they were in force.


1280
00:35:23,516 --> 00:35:26,026
In iOS 10 your output images


1281
00:35:26,196 --> 00:35:29,016
must be rendered as JPEG with an


1282
00:35:29,016 --> 00:35:31,286
Exif orientation of 1, that is


1283
00:35:31,286 --> 00:35:33,126
if there's any rotation to be


1284
00:35:33,126 --> 00:35:34,926
done, it is baked into the image


1285
00:35:35,436 --> 00:35:37,036
in the outputRendered file.


1286
00:35:37,506 --> 00:35:38,456
You may have overlooked this


1287
00:35:38,456 --> 00:35:40,136
detail since probably 99 percent


1288
00:35:40,136 --> 00:35:41,096
of the content that you are


1289
00:35:41,096 --> 00:35:43,196
editing was provided as JPEG and


1290
00:35:43,346 --> 00:35:44,746
then you just outputted it to


1291
00:35:44,746 --> 00:35:45,536
the same format.


1292
00:35:45,916 --> 00:35:46,646
But now you will see a


1293
00:35:46,646 --> 00:35:48,606
proliferation of input content


1294
00:35:48,606 --> 00:35:50,316
that is HEIC, so you should be


1295
00:35:50,316 --> 00:35:51,766
well aware that you must still


1296
00:35:51,896 --> 00:35:53,336
render all of your output


1297
00:35:53,336 --> 00:35:55,386
content to JPEG with Exif


1298
00:35:55,386 --> 00:35:56,376
orientation 1.


1299
00:35:57,256 --> 00:35:59,726
Here's the code for it.


1300
00:35:59,886 --> 00:36:01,626
Make, first you make a CIImage,


1301
00:36:01,846 --> 00:36:03,116
this would be one way of doing


1302
00:36:03,116 --> 00:36:03,256
it.


1303
00:36:03,706 --> 00:36:05,316
You could make a CIImage from


1304
00:36:05,376 --> 00:36:07,106
the content editing inputs file


1305
00:36:07,146 --> 00:36:10,006
URL, and then apply your edits.


1306
00:36:10,106 --> 00:36:12,116
Here I'm doing both an


1307
00:36:12,116 --> 00:36:14,286
application of a filter and


1308
00:36:14,406 --> 00:36:15,816
baking in the orientation.


1309
00:36:16,336 --> 00:36:18,756
And then when I'm done, I call


1310
00:36:18,756 --> 00:36:20,776
ciContext's handy dandy


1311
00:36:20,776 --> 00:36:23,706
writeJPEGRepresentation, which


1312
00:36:23,806 --> 00:36:25,096
if you've used this boilerplate


1313
00:36:25,096 --> 00:36:26,626
code in the past, it still works


1314
00:36:26,686 --> 00:36:27,856
correctly because it's


1315
00:36:28,066 --> 00:36:29,996
outputting to a JPEG regardless


1316
00:36:29,996 --> 00:36:30,976
of what the input was.


1317
00:36:32,856 --> 00:36:34,286
Our second applying adjustments


1318
00:36:34,286 --> 00:36:36,326
use case relates to videos, and


1319
00:36:36,326 --> 00:36:39,556
the rule again same as iOS 10 is


1320
00:36:39,556 --> 00:36:40,796
that no matter what the format


1321
00:36:40,796 --> 00:36:42,826
of your input movie content, you


1322
00:36:42,826 --> 00:36:44,926
must produce a movie compressed


1323
00:36:44,926 --> 00:36:47,136
with H.264 as your output.


1324
00:36:48,076 --> 00:36:49,496
Yes, even if the source movie is


1325
00:36:49,496 --> 00:36:51,226
HEVC, you still need to render


1326
00:36:51,376 --> 00:36:56,806
to H.264 for output.


1327
00:36:57,636 --> 00:36:58,996
Here's some boilerplate code to


1328
00:36:58,996 --> 00:37:00,516
edit video content that looks


1329
00:37:00,516 --> 00:37:01,056
like this.


1330
00:37:01,176 --> 00:37:03,686
First you get an AVAsset from


1331
00:37:03,726 --> 00:37:06,816
the PHContentEditingInput, then


1332
00:37:06,816 --> 00:37:07,776
you can create an


1333
00:37:07,776 --> 00:37:09,826
AVVideoComposition in which you


1334
00:37:09,826 --> 00:37:11,786
are handed each frame one at a


1335
00:37:12,396 --> 00:37:13,976
time and you can get them as


1336
00:37:13,976 --> 00:37:15,926
CIImages and then request an


1337
00:37:15,926 --> 00:37:18,476
object that has a mouthful of a


1338
00:37:18,476 --> 00:37:19,816
name, AVAsynchronous


1339
00:37:19,816 --> 00:37:21,786
CoreImageFilteringRequest.


1340
00:37:22,636 --> 00:37:24,416
You get a CIImage and then you


1341
00:37:24,416 --> 00:37:26,756
produce a CIImage, when you're


1342
00:37:26,756 --> 00:37:27,986
done rendering it you call


1343
00:37:27,986 --> 00:37:30,386
request.finish and then as a


1344
00:37:30,386 --> 00:37:32,516
final step, you export your


1345
00:37:32,516 --> 00:37:34,816
AVAsset to a file on disc at the


1346
00:37:34,816 --> 00:37:36,436
URL told to you by the


1347
00:37:36,436 --> 00:37:38,316
PHContentEditingOutput.


1348
00:37:38,916 --> 00:37:39,996
Now here's the important part.


1349
00:37:40,506 --> 00:37:41,946
The preset to use is


1350
00:37:41,946 --> 00:37:43,636
AVAssetExportPreset


1351
00:37:43,636 --> 00:37:45,796
HighestQuality or any of the


1352
00:37:45,796 --> 00:37:47,346
existing ones as Erik said,


1353
00:37:47,586 --> 00:37:49,956
still compressed to H.264.


1354
00:37:50,196 --> 00:37:51,636
Don't use the similarly named


1355
00:37:51,636 --> 00:37:53,496
new ones which have HEVC in the


1356
00:37:53,496 --> 00:37:55,116
name because you're change


1357
00:37:55,116 --> 00:37:56,726
request will fail with an error.


1358
00:37:58,066 --> 00:38:00,956
Finally, applying adjustments


1359
00:38:01,066 --> 00:38:03,516
using Live Photos, the video


1360
00:38:03,516 --> 00:38:04,656
content of Live Photos.


1361
00:38:05,506 --> 00:38:06,916
What I'm talking about here is


1362
00:38:06,916 --> 00:38:09,466
the moving aspect of a picture


1363
00:38:09,466 --> 00:38:11,356
when you either swipe between


1364
00:38:11,356 --> 00:38:12,686
photos that were Live Photos or


1365
00:38:12,686 --> 00:38:14,656
when you Force Touch on a


1366
00:38:14,656 --> 00:38:15,986
picture or swipe between


1367
00:38:16,206 --> 00:38:16,756
pictures.


1368
00:38:17,316 --> 00:38:19,206
This is the simplest use case as


1369
00:38:19,256 --> 00:38:20,486
you never get to deal directly


1370
00:38:20,486 --> 00:38:22,266
with the input or output files.


1371
00:38:22,656 --> 00:38:24,506
You're passed CIImages and you


1372
00:38:24,506 --> 00:38:25,636
produce CIImages.


1373
00:38:26,036 --> 00:38:27,216
The encoding is done on your


1374
00:38:27,216 --> 00:38:27,736
behalf.


1375
00:38:28,786 --> 00:38:30,186
There's a lot of good code to


1376
00:38:30,186 --> 00:38:31,476
look at here, but I'm not going


1377
00:38:31,476 --> 00:38:32,546
to spend a lot of time on it.


1378
00:38:32,656 --> 00:38:33,756
You can pause the video later


1379
00:38:33,756 --> 00:38:35,366
and take a good long look at it.


1380
00:38:35,866 --> 00:38:37,346
The one take home point is that


1381
00:38:37,596 --> 00:38:38,676
after you've filtered each


1382
00:38:38,676 --> 00:38:41,196
frame, in a Live Photo movie you


1383
00:38:41,196 --> 00:38:42,576
can tell the Live Photo content


1384
00:38:42,626 --> 00:38:44,456
to save your Live Photo to a


1385
00:38:44,456 --> 00:38:46,156
given URL and that's it.


1386
00:38:46,636 --> 00:38:48,046
The Live Photos will be saved


1387
00:38:48,046 --> 00:38:50,556
out using H.264 on your behalf


1388
00:38:50,866 --> 00:38:52,806
just as the stills will be


1389
00:38:52,886 --> 00:38:55,176
encoded as JPEG.


1390
00:38:55,656 --> 00:38:56,806
Okay, let's move over to the


1391
00:38:56,806 --> 00:38:58,756
common workflows with PhotoKit.


1392
00:38:59,436 --> 00:39:01,296
When displaying content from


1393
00:39:01,296 --> 00:39:02,906
your photo library, you use an


1394
00:39:02,906 --> 00:39:04,876
object called the PHImageManager


1395
00:39:05,286 --> 00:39:08,346
and this provides you with one


1396
00:39:08,346 --> 00:39:09,146
of three things.


1397
00:39:09,836 --> 00:39:11,776
You could get a UIImage if it's


1398
00:39:11,776 --> 00:39:13,826
an image, a PlayerItem if it's a


1399
00:39:13,826 --> 00:39:16,346
video, or a PHLivePhoto if it's


1400
00:39:16,346 --> 00:39:17,676
Live Photo content.


1401
00:39:18,176 --> 00:39:19,386
Here you don't need to make any


1402
00:39:19,386 --> 00:39:21,616
changes because all of these are


1403
00:39:21,616 --> 00:39:23,466
high level abstractions in which


1404
00:39:23,466 --> 00:39:24,786
you don't care where the sources


1405
00:39:24,786 --> 00:39:25,966
came from, all you're doing is


1406
00:39:25,966 --> 00:39:26,626
displaying them.


1407
00:39:26,956 --> 00:39:28,216
No code changes needed here.


1408
00:39:29,466 --> 00:39:31,676
The next is backup.


1409
00:39:32,026 --> 00:39:33,556
When using PhotoKit for backup


1410
00:39:33,626 --> 00:39:35,476
purposes, you probably want to


1411
00:39:35,476 --> 00:39:37,746
access the raw assets such as


1412
00:39:37,786 --> 00:39:39,096
the HEIC files and the QuickTime


1413
00:39:39,096 --> 00:39:39,486
movies.


1414
00:39:39,786 --> 00:39:41,156
And you do that using


1415
00:39:41,156 --> 00:39:42,606
PHAssetResourceManager.


1416
00:39:42,976 --> 00:39:44,286
It will give them to you in the


1417
00:39:44,286 --> 00:39:45,086
native format.


1418
00:39:45,406 --> 00:39:46,426
The only thing to be aware of


1419
00:39:46,426 --> 00:39:48,206
here is that you might get


1420
00:39:48,206 --> 00:39:49,596
different file types coming than


1421
00:39:49,596 --> 00:39:50,736
you're used to, so make sure


1422
00:39:50,736 --> 00:39:52,776
that you're ready for it.


1423
00:39:53,626 --> 00:39:54,896
The third and most complicated


1424
00:39:54,896 --> 00:39:55,756
case is sharing.


1425
00:39:56,716 --> 00:39:58,226
Here you're sort of leaving


1426
00:39:58,226 --> 00:39:59,886
Apple's nice walled garden.


1427
00:40:00,336 --> 00:40:01,366
You have to think about your


1428
00:40:01,366 --> 00:40:02,756
compatibility requirements.


1429
00:40:03,116 --> 00:40:04,486
Are native assets okay?


1430
00:40:04,636 --> 00:40:06,526
You might be doing your clients


1431
00:40:06,526 --> 00:40:07,576
a favor or you might be doing


1432
00:40:07,576 --> 00:40:08,956
them a disservice by giving them


1433
00:40:08,956 --> 00:40:10,536
HEIC content depending on


1434
00:40:10,536 --> 00:40:11,546
whether they're ready for it.


1435
00:40:11,936 --> 00:40:12,906
So, here you must weigh


1436
00:40:12,906 --> 00:40:14,506
compatibility versus the


1437
00:40:14,506 --> 00:40:16,106
features that HEIC affords.


1438
00:40:17,216 --> 00:40:19,236
If you do choose compatibility


1439
00:40:19,236 --> 00:40:21,006
over features, you can ensure


1440
00:40:21,006 --> 00:40:22,346
format compatibility by


1441
00:40:22,346 --> 00:40:24,496
specifying the output format


1442
00:40:24,496 --> 00:40:25,226
explicitly.


1443
00:40:25,366 --> 00:40:27,796
For images, you can just check


1444
00:40:27,796 --> 00:40:29,776
the UTType that you get, and see


1445
00:40:29,776 --> 00:40:31,876
that it conforms to say JPEG,


1446
00:40:31,876 --> 00:40:33,756
and if it doesn't, explicitly


1447
00:40:33,756 --> 00:40:34,276
convert it.


1448
00:40:34,796 --> 00:40:36,446
With videos, you can always


1449
00:40:36,446 --> 00:40:37,686
force compatibility by


1450
00:40:37,686 --> 00:40:39,376
requesting an export session


1451
00:40:39,656 --> 00:40:41,146
with a preset that you know will


1452
00:40:41,146 --> 00:40:43,526
deliver H.264 such as


1453
00:40:43,736 --> 00:40:44,976
PresetHighestQuality.


1454
00:40:46,236 --> 00:40:48,636
All right, onto our last topic


1455
00:40:48,636 --> 00:40:50,156
of the day, capturing HEIF.


1456
00:40:50,476 --> 00:40:51,786
Finally, one that I know what


1457
00:40:51,786 --> 00:40:52,486
I'm talking about.


1458
00:40:53,906 --> 00:40:55,116
But let's do compression haiku


1459
00:40:55,116 --> 00:40:56,336
number two, please would you let


1460
00:40:56,336 --> 00:40:56,486
me?


1461
00:40:57,296 --> 00:40:57,976
It's fun for me.


1462
00:40:58,736 --> 00:40:59,106
Here we go.


1463
00:41:00,116 --> 00:41:03,886
HEIF a container, compresses


1464
00:41:03,926 --> 00:41:08,046
four times better than HEVC.


1465
00:41:09,576 --> 00:41:10,656
Think about that.


1466
00:41:10,766 --> 00:41:12,686
Okay, so, why are we wasting our


1467
00:41:12,686 --> 00:41:14,376
lives saying HEVC, it's supposed


1468
00:41:14,376 --> 00:41:15,306
to be a good codec right?


1469
00:41:15,306 --> 00:41:15,986
Why aren't we calling it


1470
00:41:15,986 --> 00:41:16,376
"hevick".


1471
00:41:17,976 --> 00:41:18,786
All right.


1472
00:41:19,456 --> 00:41:20,726
So, Erik mentioned that


1473
00:41:21,016 --> 00:41:23,256
AVCapturePhotoOutput added


1474
00:41:23,256 --> 00:41:25,156
support for Live Photo movies


1475
00:41:25,236 --> 00:41:26,446
encoded with HEVC.


1476
00:41:27,456 --> 00:41:28,796
This class was introduced last


1477
00:41:28,796 --> 00:41:30,426
year as the successor to


1478
00:41:30,426 --> 00:41:31,716
AVCaptureStillImageOutput.


1479
00:41:32,166 --> 00:41:33,716
It excels at handling complex


1480
00:41:33,716 --> 00:41:35,076
still image capture requests


1481
00:41:35,076 --> 00:41:36,796
where you need multiple assets


1482
00:41:36,796 --> 00:41:38,036
delivered over time.


1483
00:41:38,846 --> 00:41:40,126
It is currently the only way on


1484
00:41:40,126 --> 00:41:42,076
our platform to capture Live


1485
00:41:42,076 --> 00:41:45,966
Photos, Bayer RAW images, Apple


1486
00:41:46,046 --> 00:41:49,226
P3 Wide Color Images, and new in


1487
00:41:49,326 --> 00:41:50,976
iOS 11 it is the only interface


1488
00:41:50,976 --> 00:41:52,506
on our platform for capturing


1489
00:41:52,686 --> 00:41:53,786
HEIF content.


1490
00:41:56,236 --> 00:41:58,116
HEIF capture is supported on the


1491
00:41:58,416 --> 00:42:01,486
A10 chip devices which are


1492
00:42:01,486 --> 00:42:03,726
iPhone 7 Plus, iPhone 7, and the


1493
00:42:03,726 --> 00:42:05,596
newly announced iPad Pros.


1494
00:42:05,696 --> 00:42:08,966
We'll do a brief refresher on


1495
00:42:08,966 --> 00:42:10,426
how to request and receive


1496
00:42:10,426 --> 00:42:12,136
images with the photo output.


1497
00:42:12,496 --> 00:42:15,296
First, you fill out an object


1498
00:42:15,296 --> 00:42:17,026
called an AVCapturePhotoSettings


1499
00:42:17,026 --> 00:42:18,226
this is sort of like a request


1500
00:42:18,226 --> 00:42:19,866
object where you specify the


1501
00:42:19,866 --> 00:42:21,406
features that you want in your


1502
00:42:21,636 --> 00:42:22,396
photo capture.


1503
00:42:22,746 --> 00:42:24,356
Here it's the orange box.


1504
00:42:25,066 --> 00:42:26,316
Here, I've indicated that I want


1505
00:42:26,496 --> 00:42:29,166
auto flash, meaning photo output


1506
00:42:29,166 --> 00:42:30,526
only use the flash if it's


1507
00:42:30,526 --> 00:42:32,066
necessary, only if the light is


1508
00:42:32,246 --> 00:42:33,506
low enough to warrant it.


1509
00:42:34,386 --> 00:42:35,746
I've also asked for a preview


1510
00:42:35,746 --> 00:42:37,136
sized image to accompany the


1511
00:42:37,136 --> 00:42:38,976
full-sized image so that I can


1512
00:42:38,976 --> 00:42:40,306
have a quick preview to put on


1513
00:42:40,306 --> 00:42:40,806
screen.


1514
00:42:41,366 --> 00:42:42,376
I don't know exactly what the


1515
00:42:42,376 --> 00:42:43,996
final aspect ratio of it will be


1516
00:42:43,996 --> 00:42:46,146
so I just ask for a box that's


1517
00:42:46,146 --> 00:42:48,026
1440 by 1440.


1518
00:42:48,876 --> 00:42:50,706
I then pass this settings object


1519
00:42:50,706 --> 00:42:52,796
with a delegate that I provide


1520
00:42:53,336 --> 00:42:56,346
to the photo output to start or


1521
00:42:56,346 --> 00:42:57,846
kick off a capture request.


1522
00:43:00,256 --> 00:43:02,596
Now the arrow on top shows when


1523
00:43:02,596 --> 00:43:04,816
the request was made, and now


1524
00:43:05,346 --> 00:43:07,136
I'm sort of tracking this


1525
00:43:07,136 --> 00:43:09,426
package delivery, PhotoOutput


1526
00:43:09,506 --> 00:43:11,426
calls my delegate back with one


1527
00:43:11,426 --> 00:43:12,776
method call at a time.


1528
00:43:13,356 --> 00:43:14,606
Very soon after I make the


1529
00:43:14,606 --> 00:43:16,256
request the PhotoOutput calls


1530
00:43:16,256 --> 00:43:17,606
the delegates first callback


1531
00:43:17,606 --> 00:43:19,976
which is willBeginCaptureFor


1532
00:43:20,346 --> 00:43:22,246
resolved settings and it passes


1533
00:43:22,246 --> 00:43:24,096
you this blue box which is a


1534
00:43:24,096 --> 00:43:25,746
ResolvedPhotoSettings.


1535
00:43:26,726 --> 00:43:27,826
This is sort of like the


1536
00:43:27,826 --> 00:43:29,046
courtesy email that you get


1537
00:43:29,046 --> 00:43:30,056
saying we've received your


1538
00:43:30,056 --> 00:43:32,196
order, here's what we'll be


1539
00:43:32,196 --> 00:43:32,896
sending you.


1540
00:43:33,586 --> 00:43:35,876
And this ResolvedPhotoSetting


1541
00:43:35,876 --> 00:43:37,576
sort of clears up any ambiguity


1542
00:43:37,576 --> 00:43:39,286
that you had in your settings


1543
00:43:39,286 --> 00:43:40,316
that you provided at the


1544
00:43:40,316 --> 00:43:40,826
beginning.


1545
00:43:41,176 --> 00:43:42,306
In this case, we can now see


1546
00:43:42,306 --> 00:43:44,086
that flash is not auto, it's


1547
00:43:44,136 --> 00:43:44,916
true or false.


1548
00:43:45,286 --> 00:43:47,086
So, it's become true, we know


1549
00:43:47,086 --> 00:43:48,346
that the flash is going to fire.


1550
00:43:48,836 --> 00:43:50,946
Also, we now know what the final


1551
00:43:50,946 --> 00:43:52,486
preview image resolution is


1552
00:43:52,486 --> 00:43:53,116
going to be.


1553
00:43:55,446 --> 00:43:57,016
Finally, after we get the


1554
00:43:57,016 --> 00:43:59,066
willBeginCaptureFor, we, our


1555
00:43:59,066 --> 00:44:00,416
second call back that we receive


1556
00:44:00,416 --> 00:44:02,296
is willCapturePhotoFor


1557
00:44:02,296 --> 00:44:03,206
ResolvedSettings.


1558
00:44:03,796 --> 00:44:05,046
This is delivered coincident


1559
00:44:05,046 --> 00:44:06,956
with the shutter sound being


1560
00:44:06,956 --> 00:44:07,436
played.


1561
00:44:08,776 --> 00:44:10,356
And then shortly thereafter


1562
00:44:10,586 --> 00:44:12,546
comes didCapturePhotoFor


1563
00:44:12,546 --> 00:44:14,246
ResolvedSettings just after the


1564
00:44:14,246 --> 00:44:16,006
image has been fully exposed and


1565
00:44:16,006 --> 00:44:16,496
read out.


1566
00:44:17,816 --> 00:44:19,786
Then some time typically passes


1567
00:44:19,786 --> 00:44:21,856
while the image or images are


1568
00:44:21,856 --> 00:44:23,476
processed, applying all the


1569
00:44:23,476 --> 00:44:24,686
features that you asked for.


1570
00:44:25,366 --> 00:44:26,646
When the photo is ready, you


1571
00:44:26,646 --> 00:44:27,496
receive the


1572
00:44:27,496 --> 00:44:29,546
didFinishProcessingPhoto sample


1573
00:44:29,546 --> 00:44:31,776
buffer call back and the image


1574
00:44:31,776 --> 00:44:33,496
or images are delivered to you.


1575
00:44:33,946 --> 00:44:35,866
Here I got the main image, and


1576
00:44:35,866 --> 00:44:36,686
the preview image.


1577
00:44:37,076 --> 00:44:38,146
They're delivered together in


1578
00:44:38,146 --> 00:44:38,896
the same call back.


1579
00:44:39,966 --> 00:44:42,186
Finally, you always always


1580
00:44:42,186 --> 00:44:43,256
always get the


1581
00:44:43,256 --> 00:44:45,006
DidFinishCaptureFor


1582
00:44:45,006 --> 00:44:46,906
ResolvedSettings callback.


1583
00:44:47,356 --> 00:44:48,886
And that is guaranteed to be


1584
00:44:48,886 --> 00:44:49,656
delivered last.


1585
00:44:49,656 --> 00:44:50,946
It's the PhotoOutput's way of


1586
00:44:51,146 --> 00:44:52,836
saying we're done with this


1587
00:44:52,836 --> 00:44:54,606
transaction, pleasure doing


1588
00:44:54,606 --> 00:44:56,466
business with you, you can clean


1589
00:44:56,466 --> 00:44:57,316
up your delegate now.


1590
00:45:00,076 --> 00:45:02,066
This programming model has


1591
00:45:02,066 --> 00:45:03,966
proved to be very flexible.


1592
00:45:04,066 --> 00:45:05,336
We've had a lot of success with


1593
00:45:05,336 --> 00:45:06,586
it because we've been able to


1594
00:45:06,586 --> 00:45:08,646
add new methods to the delegate


1595
00:45:08,876 --> 00:45:10,446
as needed when we add new


1596
00:45:10,446 --> 00:45:10,996
features.


1597
00:45:11,736 --> 00:45:13,396
For instance, we added support


1598
00:45:13,396 --> 00:45:14,356
for RAW images.


1599
00:45:14,866 --> 00:45:16,166
There's a call back for that.


1600
00:45:16,926 --> 00:45:17,906
We added support for Live


1601
00:45:17,946 --> 00:45:19,756
Photos, there's a separate call


1602
00:45:19,756 --> 00:45:21,276
back for that, for getting the


1603
00:45:21,276 --> 00:45:21,646
movie.


1604
00:45:22,366 --> 00:45:23,756
So, it would seem like HEIF


1605
00:45:23,756 --> 00:45:25,026
would be an easy addition to


1606
00:45:25,026 --> 00:45:26,516
this very flexible programming


1607
00:45:26,516 --> 00:45:27,046
paradigm.


1608
00:45:27,576 --> 00:45:28,946
Unfortunately, it's not.


1609
00:45:30,116 --> 00:45:32,366
The incompatibility lies in the


1610
00:45:32,366 --> 00:45:34,886
CoreMedia SampleBuffer which is


1611
00:45:35,006 --> 00:45:36,416
and has been the coin of the


1612
00:45:36,416 --> 00:45:38,086
realm in AVFoundation for many


1613
00:45:38,086 --> 00:45:38,696
many years.


1614
00:45:39,226 --> 00:45:41,446
We have used it for still images


1615
00:45:41,766 --> 00:45:42,816
since iOS 4.


1616
00:45:44,436 --> 00:45:45,886
It's a thin container for media


1617
00:45:45,886 --> 00:45:47,496
data such as video samples,


1618
00:45:47,676 --> 00:45:49,376
audio samples, text, closed


1619
00:45:49,376 --> 00:45:50,066
captions.


1620
00:45:51,356 --> 00:45:53,606
HEIF on the other hand is a file


1621
00:45:53,606 --> 00:45:55,136
format, not a media format.


1622
00:45:55,526 --> 00:45:57,026
It can hold many media types.


1623
00:45:58,106 --> 00:46:00,256
Also, CMSampleBuffers can of


1624
00:46:00,296 --> 00:46:02,546
course carry HEVC compressed


1625
00:46:02,546 --> 00:46:05,286
video, but that HEV compressed,


1626
00:46:05,286 --> 00:46:06,736
HEVC compressed video doesn't


1627
00:46:06,736 --> 00:46:09,146
look like the HEIF containerized


1628
00:46:09,146 --> 00:46:09,526
HEVC.


1629
00:46:09,926 --> 00:46:11,366
Remember, HEIF likes to chop


1630
00:46:11,366 --> 00:46:13,176
things up into individual tiles


1631
00:46:13,536 --> 00:46:14,776
for quick decode.


1632
00:46:15,236 --> 00:46:17,506
You can't store that kind of


1633
00:46:17,506 --> 00:46:20,366
HEVC compression in a frame in a


1634
00:46:20,366 --> 00:46:21,526
QuickTime movie, it would just


1635
00:46:21,526 --> 00:46:22,646
confuse the decoder.


1636
00:46:23,356 --> 00:46:24,236
So, at this point, you might be


1637
00:46:24,236 --> 00:46:25,886
asking yourself, if we have this


1638
00:46:25,886 --> 00:46:27,826
fundamental tension between file


1639
00:46:27,826 --> 00:46:30,086
container and media container,


1640
00:46:30,286 --> 00:46:31,796
how would we be able to use


1641
00:46:31,866 --> 00:46:33,686
CMSampleBuffer for so many years


1642
00:46:33,926 --> 00:46:35,926
with photo output and still


1643
00:46:35,926 --> 00:46:36,496
image output?


1644
00:46:37,236 --> 00:46:39,356
Well the answer is JPEG.


1645
00:46:40,516 --> 00:46:42,016
We got away with this because of


1646
00:46:42,016 --> 00:46:43,676
the happy coincidence that JPEG,


1647
00:46:44,336 --> 00:46:46,516
the image codec, and JFIF the


1648
00:46:46,516 --> 00:46:48,436
file format are virtually


1649
00:46:48,436 --> 00:46:49,406
indistinguishable from one


1650
00:46:49,406 --> 00:46:49,736
another.


1651
00:46:50,206 --> 00:46:51,786
Both are acceptable as images,


1652
00:46:52,366 --> 00:46:53,946
in another container such as a


1653
00:46:53,946 --> 00:46:54,646
QuickTime movie.


1654
00:46:56,026 --> 00:46:58,056
So, the answer to our quandary


1655
00:46:58,056 --> 00:46:59,936
is to come up with a new purpose


1656
00:46:59,936 --> 00:47:01,826
built in-memory wrapper for


1657
00:47:01,826 --> 00:47:03,486
image results and we call that


1658
00:47:03,486 --> 00:47:04,666
the AVCapturePhoto.


1659
00:47:05,366 --> 00:47:06,746
It's our drop-in replacement for


1660
00:47:06,746 --> 00:47:07,766
CMSampleBuffer.


1661
00:47:08,596 --> 00:47:10,856
It is in fact faster than


1662
00:47:10,856 --> 00:47:12,286
CMSampleBuffer because we are


1663
00:47:12,286 --> 00:47:13,936
able to optimize delivery of it


1664
00:47:13,936 --> 00:47:15,696
across the process boundary from


1665
00:47:15,696 --> 00:47:17,156
the media server, so you get


1666
00:47:17,156 --> 00:47:18,436
even better performance than you


1667
00:47:18,436 --> 00:47:19,486
did in iOS 10.


1668
00:47:20,766 --> 00:47:22,946
It's 100 percent immutable like


1669
00:47:22,976 --> 00:47:24,836
the, unlike the CMSampleBuffer


1670
00:47:24,836 --> 00:47:26,906
so that it's easier to share


1671
00:47:26,906 --> 00:47:28,096
between code modules.


1672
00:47:29,206 --> 00:47:30,346
It's also backed by


1673
00:47:30,346 --> 00:47:31,606
containerized data.


1674
00:47:31,606 --> 00:47:32,756
I'm going to talk more about


1675
00:47:32,756 --> 00:47:34,386
that in a minute.


1676
00:47:34,576 --> 00:47:35,546
Let's talk about some of its


1677
00:47:35,546 --> 00:47:36,306
attributes.


1678
00:47:36,896 --> 00:47:38,266
It has access to critical


1679
00:47:38,266 --> 00:47:39,676
information about the photo such


1680
00:47:39,676 --> 00:47:41,166
as the time at which it was


1681
00:47:41,166 --> 00:47:43,786
captured, whether or not it's a


1682
00:47:43,786 --> 00:47:46,486
RAW, Bayer RAW photo, and for


1683
00:47:46,486 --> 00:47:48,016
uncompressed or RAW photos, you


1684
00:47:48,016 --> 00:47:49,426
get access to the pixel buffer


1685
00:47:49,426 --> 00:47:49,736
data.


1686
00:47:50,746 --> 00:47:52,286
Also, side band information


1687
00:47:52,286 --> 00:47:53,836
travels with the AVCapturePhoto


1688
00:47:53,836 --> 00:47:56,706
too, such as the second smaller


1689
00:47:56,706 --> 00:47:58,376
preview image that you can ask


1690
00:47:58,376 --> 00:47:58,646
for.


1691
00:47:59,476 --> 00:48:01,666
You can also now request a third


1692
00:48:01,906 --> 00:48:04,316
image that's even smaller to be


1693
00:48:04,316 --> 00:48:06,246
in embedded as a thumbnail in


1694
00:48:06,246 --> 00:48:06,876
the container.


1695
00:48:08,706 --> 00:48:10,076
An ImageIO property style


1696
00:48:10,076 --> 00:48:11,566
metadata dictionary is provided


1697
00:48:11,566 --> 00:48:13,666
that can contain Exif, or other


1698
00:48:13,666 --> 00:48:14,796
metadata that you've come to


1699
00:48:14,796 --> 00:48:15,206
expect.


1700
00:48:16,176 --> 00:48:18,186
And with the iPhone 7 Plus dual


1701
00:48:18,186 --> 00:48:20,386
camera, you can request that a


1702
00:48:20,386 --> 00:48:22,196
depth data map be delivered with


1703
00:48:22,196 --> 00:48:23,676
the AVCapturePhoto results as


1704
00:48:23,676 --> 00:48:23,976
well.


1705
00:48:25,456 --> 00:48:27,286
AVCapturePhoto also provides a


1706
00:48:27,286 --> 00:48:28,876
number of convenience accessors


1707
00:48:28,976 --> 00:48:31,036
such as a reference to the


1708
00:48:31,036 --> 00:48:32,556
resolvedSettings object that we


1709
00:48:32,556 --> 00:48:34,016
saw in previous slides.


1710
00:48:34,516 --> 00:48:37,026
Also, it gives you easy access


1711
00:48:37,026 --> 00:48:38,776
to bookkeeping about the photos.


1712
00:48:38,876 --> 00:48:40,746
For instance, if you've fired


1713
00:48:40,746 --> 00:48:42,836
off a request for a RAW plus


1714
00:48:42,916 --> 00:48:44,396
HEIC, you would expect to get


1715
00:48:44,436 --> 00:48:45,186
two photos.


1716
00:48:45,536 --> 00:48:47,196
So, the photo count accessor


1717
00:48:47,196 --> 00:48:48,736
will tell is this photo one or


1718
00:48:48,736 --> 00:48:49,336
photo two?


1719
00:48:50,706 --> 00:48:51,866
If this photo is part of a


1720
00:48:51,866 --> 00:48:53,896
bracketed capture, such as an


1721
00:48:53,896 --> 00:48:55,436
auto exposure bracket of three


1722
00:48:55,436 --> 00:48:57,936
or four different EV values, it


1723
00:48:57,936 --> 00:48:59,616
can tell you which bracket


1724
00:48:59,616 --> 00:49:00,766
settings were applied to this


1725
00:49:00,766 --> 00:49:02,906
particular result as well as its


1726
00:49:03,076 --> 00:49:05,406
sequence number and whether lens


1727
00:49:05,406 --> 00:49:07,116
stabilization was engaged.


1728
00:49:09,156 --> 00:49:11,116
AVCapturePhoto also supports


1729
00:49:11,196 --> 00:49:12,336
conversions to different


1730
00:49:12,336 --> 00:49:14,386
formats, so it's friendly and


1731
00:49:14,386 --> 00:49:16,616
able to move to other frameworks


1732
00:49:16,616 --> 00:49:17,746
that you would use with image


1733
00:49:17,746 --> 00:49:18,416
processing.


1734
00:49:18,906 --> 00:49:20,306
First and foremost, it supports


1735
00:49:20,306 --> 00:49:22,036
conversions to data


1736
00:49:22,036 --> 00:49:23,546
representations if you just want


1737
00:49:23,546 --> 00:49:24,336
to write to file.


1738
00:49:24,896 --> 00:49:26,636
And it can produce a CGImage of


1739
00:49:26,636 --> 00:49:28,426
either the full-size preview or


1740
00:49:28,426 --> 00:49:31,076
the -- sorry the full-size photo


1741
00:49:31,076 --> 00:49:31,976
or the preview photo.


1742
00:49:32,006 --> 00:49:35,446
Now the mechanism for opting in


1743
00:49:35,446 --> 00:49:37,176
to get an AVCapturePhoto instead


1744
00:49:37,176 --> 00:49:38,826
of a CMSampleBuffer is just that


1745
00:49:38,826 --> 00:49:40,166
you need to implement one new


1746
00:49:40,166 --> 00:49:41,816
delegate method in your


1747
00:49:41,816 --> 00:49:44,106
AVCapture PhotoCapture delegate,


1748
00:49:44,106 --> 00:49:45,096
and that's this one here.


1749
00:49:45,506 --> 00:49:46,846
It's very simple it just has


1750
00:49:46,846 --> 00:49:47,786
three parameters.


1751
00:49:48,146 --> 00:49:49,806
It gives you the AVCapturePhoto


1752
00:49:50,306 --> 00:49:51,766
and optionally an error.


1753
00:49:52,456 --> 00:49:54,686
Now, error or not, you always


1754
00:49:54,686 --> 00:49:56,726
get an AVCapturePhoto with as


1755
00:49:56,726 --> 00:49:58,026
much information about it as


1756
00:49:58,026 --> 00:49:59,616
possible, even if there's no


1757
00:49:59,616 --> 00:50:02,486
backing pixel data.


1758
00:50:03,156 --> 00:50:05,296
The following two really lengthy


1759
00:50:05,626 --> 00:50:06,906
delegate methods have been


1760
00:50:06,906 --> 00:50:09,256
deprecated to help steer you


1761
00:50:09,256 --> 00:50:10,526
towards the new and better.


1762
00:50:11,396 --> 00:50:14,166
We used to have separate call


1763
00:50:14,166 --> 00:50:16,186
backs for getting the RAW or the


1764
00:50:16,216 --> 00:50:18,096
uncompressed or compressed,


1765
00:50:18,206 --> 00:50:20,266
didFinishProcessingPhoto which


1766
00:50:20,266 --> 00:50:21,756
would give you a CMSampleBuffer


1767
00:50:21,756 --> 00:50:24,096
or didFinishProcessingRawPhoto


1768
00:50:24,096 --> 00:50:24,866
which would give you a


1769
00:50:24,866 --> 00:50:25,526
SampleBuffer.


1770
00:50:26,246 --> 00:50:28,586
You needn't, you needn't use


1771
00:50:28,586 --> 00:50:29,136
these anymore.


1772
00:50:29,136 --> 00:50:31,086
You can just use the new single


1773
00:50:31,516 --> 00:50:33,036
which subsumes both of them into


1774
00:50:33,036 --> 00:50:33,366
one.


1775
00:50:33,916 --> 00:50:37,026
All right, in iOS 10 we


1776
00:50:37,026 --> 00:50:38,916
supported the following formats.


1777
00:50:39,526 --> 00:50:40,856
For compression, all you could


1778
00:50:40,856 --> 00:50:41,656
get was JPEG.


1779
00:50:42,216 --> 00:50:43,366
For uncompressed you had your


1780
00:50:43,366 --> 00:50:45,636
choice of two flavors of 420 or


1781
00:50:45,636 --> 00:50:47,846
BGRA, and of course we supported


1782
00:50:47,896 --> 00:50:48,546
Bayer RAW.


1783
00:50:49,406 --> 00:50:52,186
Now, in iOS 11, in addition to


1784
00:50:52,186 --> 00:50:54,496
adding HEVC support, we're


1785
00:50:54,496 --> 00:50:55,736
adding a new dimension to this


1786
00:50:55,736 --> 00:50:56,186
as well.


1787
00:50:56,746 --> 00:50:58,226
Every image format that you,


1788
00:50:58,536 --> 00:51:01,436
that you request is also backed


1789
00:51:01,436 --> 00:51:03,926
by a file container format.


1790
00:51:04,136 --> 00:51:06,106
In other words, implicitly,


1791
00:51:06,406 --> 00:51:07,976
every image that you capture is


1792
00:51:07,976 --> 00:51:09,086
being containerized.


1793
00:51:09,686 --> 00:51:11,746
For HEVC the implicit container


1794
00:51:11,746 --> 00:51:16,206
is HEIC, for JPEG it's JFIF, for


1795
00:51:16,206 --> 00:51:17,536
the uncompressed formats it's


1796
00:51:17,666 --> 00:51:20,066
TIFF, and for RAW formats as


1797
00:51:20,066 --> 00:51:21,236
before it's DNG.


1798
00:51:21,766 --> 00:51:22,986
Now, why would file


1799
00:51:22,986 --> 00:51:24,246
containerization be a good


1800
00:51:24,246 --> 00:51:24,616
thing?


1801
00:51:25,456 --> 00:51:26,676
The answer is performance.


1802
00:51:26,726 --> 00:51:28,336
Let me explain using a case


1803
00:51:28,336 --> 00:51:28,626
study.


1804
00:51:29,246 --> 00:51:31,176
So, here's the old way you would


1805
00:51:31,176 --> 00:51:32,716
get a JPEG and write it to disc.


1806
00:51:33,726 --> 00:51:35,456
PhotoOutput would deliver you a


1807
00:51:35,456 --> 00:51:37,306
SampleBuffer with a full-sized


1808
00:51:37,306 --> 00:51:40,326
image and a preview image and it


1809
00:51:40,326 --> 00:51:41,776
would attach some metadata to it


1810
00:51:41,776 --> 00:51:42,866
such as Exif.


1811
00:51:42,966 --> 00:51:44,466
If you wanted to mutate that in


1812
00:51:44,466 --> 00:51:45,756
any way, you would have to wait


1813
00:51:45,756 --> 00:51:46,946
until it delivered the call back


1814
00:51:47,286 --> 00:51:48,486
and then you would get the


1815
00:51:48,486 --> 00:51:50,336
attachment that had the Exif,


1816
00:51:50,766 --> 00:51:53,406
manipulate it, and re-add it to


1817
00:51:53,406 --> 00:51:54,196
the SampleBuffer.


1818
00:51:54,776 --> 00:51:56,026
Then when it came time for


1819
00:51:56,026 --> 00:51:57,376
writing it to disc, you would


1820
00:51:57,376 --> 00:51:58,646
call PhotoOutput's


1821
00:51:59,106 --> 00:52:02,286
JPEGDataPhotoRepresentation and


1822
00:52:02,286 --> 00:52:03,416
pass it the two buffers.


1823
00:52:04,336 --> 00:52:06,586
Outcomes a JPEG data, ready to


1824
00:52:06,586 --> 00:52:07,266
write to disc.


1825
00:52:07,846 --> 00:52:09,966
While in code it looks simple, a


1826
00:52:09,966 --> 00:52:11,386
lot is happening under the hood.


1827
00:52:12,046 --> 00:52:13,616
Because we conflated preview


1828
00:52:13,616 --> 00:52:15,266
image with embedded thumbnail


1829
00:52:15,266 --> 00:52:16,776
image, we had to take something


1830
00:52:16,776 --> 00:52:18,156
that was sized for the screen


1831
00:52:18,526 --> 00:52:21,596
and scale it down, compress it


1832
00:52:21,596 --> 00:52:23,846
to JPEG, incorporate all of your


1833
00:52:23,846 --> 00:52:25,986
Exif changes, and rewrite the


1834
00:52:25,986 --> 00:52:26,916
full-size image.


1835
00:52:26,976 --> 00:52:29,816
So, a lot of scaling and


1836
00:52:29,816 --> 00:52:32,006
compression done just because


1837
00:52:32,006 --> 00:52:33,176
you wanted to include a


1838
00:52:33,176 --> 00:52:35,366
thumbnail with your image and


1839
00:52:35,486 --> 00:52:36,446
manipulate a little bit of


1840
00:52:36,446 --> 00:52:37,026
metadata.


1841
00:52:37,366 --> 00:52:38,426
Not efficient at all.


1842
00:52:38,996 --> 00:52:40,926
Now in the new way,


1843
00:52:40,926 --> 00:52:43,676
AVCapturePhoto lets you specify


1844
00:52:43,676 --> 00:52:45,596
up front what you want in the


1845
00:52:45,596 --> 00:52:46,136
container.


1846
00:52:47,106 --> 00:52:48,376
If it has enough information to


1847
00:52:48,376 --> 00:52:50,136
prepare the file container right


1848
00:52:50,286 --> 00:52:52,266
the first time, then it's done


1849
00:52:52,266 --> 00:52:53,426
before you ever get the first


1850
00:52:53,426 --> 00:52:53,906
call back.


1851
00:52:55,096 --> 00:52:56,166
The way you do this is you fill


1852
00:52:56,166 --> 00:52:58,006
out some extra features in the


1853
00:52:58,006 --> 00:52:59,106
AvCapturePhotoSettings.


1854
00:52:59,576 --> 00:53:00,786
This time you can specify in


1855
00:53:00,786 --> 00:53:02,566
advance the codec that you want,


1856
00:53:02,566 --> 00:53:04,536
and optionally the file type.


1857
00:53:05,526 --> 00:53:07,196
You specify metadata that you


1858
00:53:07,196 --> 00:53:08,806
would like to add such as GPS


1859
00:53:08,806 --> 00:53:10,036
location, you can now do this


1860
00:53:10,066 --> 00:53:11,786
before you've even issued the


1861
00:53:11,786 --> 00:53:12,406
request.


1862
00:53:12,906 --> 00:53:14,096
You can also tell it I would


1863
00:53:14,096 --> 00:53:15,376
like an embedded thumbnail and I


1864
00:53:15,376 --> 00:53:19,066
would like it using these, these


1865
00:53:19,066 --> 00:53:19,606
dimensions.


1866
00:53:21,026 --> 00:53:22,516
You then submit your request to


1867
00:53:22,516 --> 00:53:23,836
the AVCapturePhotoOutput and


1868
00:53:23,836 --> 00:53:25,546
eventually it gives your


1869
00:53:25,546 --> 00:53:28,246
delegate an AVCapturePhoto as


1870
00:53:28,616 --> 00:53:29,526
its result.


1871
00:53:30,166 --> 00:53:31,906
This AVCapturePhoto is backed by


1872
00:53:31,906 --> 00:53:33,146
something that's already in a


1873
00:53:33,226 --> 00:53:34,276
HEIC container.


1874
00:53:34,776 --> 00:53:36,266
It's already been compressed in


1875
00:53:36,266 --> 00:53:36,876
tiles.


1876
00:53:37,456 --> 00:53:39,366
It's already embedded that


1877
00:53:39,366 --> 00:53:40,636
thumbnail image that you asked


1878
00:53:40,636 --> 00:53:41,066
it to.


1879
00:53:41,066 --> 00:53:42,956
It's already put the metadata in


1880
00:53:42,956 --> 00:53:43,946
the correct place.


1881
00:53:44,856 --> 00:53:46,206
So, the final call that you


1882
00:53:46,206 --> 00:53:47,926
would do to write it to disc


1883
00:53:48,606 --> 00:53:51,646
photo.fileDataRepresentation is


1884
00:53:51,646 --> 00:53:52,616
much simpler than in the


1885
00:53:52,616 --> 00:53:53,596
previous example.


1886
00:53:54,156 --> 00:53:56,246
All it's doing is a simple byte


1887
00:53:56,246 --> 00:53:58,846
copy to NSData of the backing


1888
00:53:58,846 --> 00:53:59,186
store.


1889
00:53:59,816 --> 00:54:01,876
No additional compression, or


1890
00:54:01,876 --> 00:54:02,976
scaling, or anything.


1891
00:54:03,096 --> 00:54:04,826
It's all done in advance.


1892
00:54:05,106 --> 00:54:06,496
This is much more efficient and


1893
00:54:06,496 --> 00:54:07,496
especially when we're dealing


1894
00:54:07,496 --> 00:54:10,026
with HEIF, it's necessary to get


1895
00:54:10,236 --> 00:54:12,026
all of the performance of that


1896
00:54:12,026 --> 00:54:13,286
great tiling format that I


1897
00:54:13,456 --> 00:54:14,216
talked about earlier.


1898
00:54:15,286 --> 00:54:16,986
Now, let's switch over to a few


1899
00:54:16,986 --> 00:54:18,556
performance considerations with


1900
00:54:18,556 --> 00:54:19,706
HEVC and HEIF.


1901
00:54:20,386 --> 00:54:22,346
The first is what to do about


1902
00:54:22,346 --> 00:54:24,026
photos that are taken during


1903
00:54:24,026 --> 00:54:24,926
still capture.


1904
00:54:26,406 --> 00:54:28,246
When you take a HEIC photo while


1905
00:54:28,246 --> 00:54:30,016
capturing a movie, you should be


1906
00:54:30,016 --> 00:54:31,736
aware that the same hardware


1907
00:54:31,736 --> 00:54:33,336
block that's compressing video,


1908
00:54:33,336 --> 00:54:35,596
that is the one that does H.264


1909
00:54:35,596 --> 00:54:38,456
or HEVC compression, is also


1910
00:54:38,456 --> 00:54:40,416
being asked to do double duty if


1911
00:54:40,416 --> 00:54:43,156
you want to encode a HEIC file


1912
00:54:43,366 --> 00:54:45,056
where HEVC is the compression


1913
00:54:45,056 --> 00:54:45,476
format.


1914
00:54:46,376 --> 00:54:48,636
That hardware block may be very


1915
00:54:48,636 --> 00:54:50,486
busy indeed if you are capturing


1916
00:54:50,486 --> 00:54:52,346
high-bandwidth video such as 4k


1917
00:54:52,346 --> 00:54:54,216
30 or 1080p 60.


1918
00:54:55,366 --> 00:54:56,726
Video is on a real-time


1919
00:54:56,726 --> 00:54:58,706
deadline, so it gets priority


1920
00:54:58,906 --> 00:54:59,546
over stills.


1921
00:55:00,096 --> 00:55:01,196
This means that it may take


1922
00:55:01,196 --> 00:55:02,756
longer to get your still results


1923
00:55:02,756 --> 00:55:05,426
back and it also may mean that


1924
00:55:05,426 --> 00:55:06,626
there are up to 20 percent


1925
00:55:06,626 --> 00:55:07,896
larger than they would be


1926
00:55:07,896 --> 00:55:09,766
otherwise because the encoder is


1927
00:55:09,766 --> 00:55:11,096
too busy to use all of the


1928
00:55:11,096 --> 00:55:12,536
features that it would if it


1929
00:55:12,536 --> 00:55:13,586
didn't have to meet that


1930
00:55:13,586 --> 00:55:15,366
real-time deadline for 30 or 60


1931
00:55:15,366 --> 00:55:16,116
frames a second.


1932
00:55:16,646 --> 00:55:18,566
So, our recommendation is if


1933
00:55:18,566 --> 00:55:20,186
you're capturing video, and


1934
00:55:20,186 --> 00:55:22,776
taking stills at the same time,


1935
00:55:22,776 --> 00:55:23,926
you should use JPEG for the


1936
00:55:23,926 --> 00:55:26,676
photos to leave the encoder for


1937
00:55:26,676 --> 00:55:29,046
HEVC as available as possible


1938
00:55:29,046 --> 00:55:29,656
for the video.


1939
00:55:32,296 --> 00:55:34,946
Another concern is HEVC and HEIF


1940
00:55:35,026 --> 00:55:35,766
bursts.


1941
00:55:36,096 --> 00:55:37,726
This is where you mash on the


1942
00:55:37,726 --> 00:55:40,506
button and you're trying to get


1943
00:55:40,506 --> 00:55:41,986
a constant frame rate maybe 10


1944
00:55:41,986 --> 00:55:44,826
frames a second of capture


1945
00:55:44,826 --> 00:55:45,326
images.


1946
00:55:46,236 --> 00:55:47,976
HEVC encode obviously is doing a


1947
00:55:47,976 --> 00:55:49,416
lot more work than JPEG did,


1948
00:55:49,916 --> 00:55:51,416
it's delivering a file that's


1949
00:55:51,856 --> 00:55:53,856
less half the size of JPEG.


1950
00:55:54,276 --> 00:55:56,086
Therefore, HEVC encode does take


1951
00:55:56,086 --> 00:55:56,556
longer.


1952
00:55:57,366 --> 00:55:59,286
Now we've benchmarked and we're


1953
00:55:59,286 --> 00:56:03,266
comfortable that HEVC HEIF can


1954
00:56:03,266 --> 00:56:07,666
meet the 10 fps minimum


1955
00:56:07,666 --> 00:56:09,806
requirement for bursts, but if


1956
00:56:09,806 --> 00:56:11,356
you need to capture at a higher


1957
00:56:11,356 --> 00:56:12,636
frame rate than that, our


1958
00:56:12,636 --> 00:56:14,346
recommendation is to go back to


1959
00:56:14,346 --> 00:56:15,406
JPEG for bursts.


1960
00:56:15,936 --> 00:56:18,766
And we've heard a lot about


1961
00:56:18,766 --> 00:56:20,346
compression today and I feel I


1962
00:56:20,346 --> 00:56:21,716
would remiss if I didn't give


1963
00:56:21,716 --> 00:56:24,386
you my thoughts on WWDC.


1964
00:56:24,446 --> 00:56:26,946
It is after all a compression


1965
00:56:26,946 --> 00:56:27,296
talk.


1966
00:56:28,006 --> 00:56:29,936
So, I can't just leave this


1967
00:56:30,116 --> 00:56:30,866
dangling there.


1968
00:56:31,846 --> 00:56:33,806
World Wide Developer Conference,


1969
00:56:34,636 --> 00:56:35,666
nine syllables.


1970
00:56:36,796 --> 00:56:40,466
W-W-D-C, eight syllables.


1971
00:56:41,086 --> 00:56:42,776
That is like the worst


1972
00:56:42,776 --> 00:56:44,026
compression format ever.


1973
00:56:44,086 --> 00:56:47,916
It's lossy, it's like .1 to 1


1974
00:56:47,916 --> 00:56:49,186
compression ratio, which is even


1975
00:56:49,186 --> 00:56:50,296
worse than lossless JPEG.


1976
00:56:51,026 --> 00:56:53,236
So, please as a service to me,


1977
00:56:53,626 --> 00:56:55,256
for the rest of the conference,


1978
00:56:55,296 --> 00:56:56,706
which you please only refer to


1979
00:56:56,706 --> 00:56:59,386
conference as Dub-Dub or


1980
00:56:59,576 --> 00:57:00,356
Wuh-Duck.


1981
00:57:00,356 --> 00:57:03,916
[laughter] All right.


1982
00:57:04,036 --> 00:57:05,106
Let's summarize what we learned


1983
00:57:05,106 --> 00:57:05,356
today.


1984
00:57:06,796 --> 00:57:09,116
HEVC movies are up to 40 percent


1985
00:57:09,116 --> 00:57:10,726
smaller for general content than


1986
00:57:10,726 --> 00:57:13,226
H.264 and for camera content on


1987
00:57:13,226 --> 00:57:15,456
iOS they are 2x smaller.


1988
00:57:16,166 --> 00:57:18,106
Also, HEVC playback is supported


1989
00:57:18,106 --> 00:57:20,226
everywhere on iOS 11 and High


1990
00:57:20,226 --> 00:57:22,276
Sierra, sometimes with software


1991
00:57:22,436 --> 00:57:23,516
sometimes with hardware.


1992
00:57:24,186 --> 00:57:26,366
And to create HEVC content you


1993
00:57:26,366 --> 00:57:28,496
need to opt in to new capture


1994
00:57:28,496 --> 00:57:30,396
APIs or new export APIs.


1995
00:57:30,876 --> 00:57:32,266
Also, we learned about HEIC


1996
00:57:32,266 --> 00:57:34,606
files that they are twice as


1997
00:57:34,606 --> 00:57:37,836
small as JPEGs and that decode


1998
00:57:37,836 --> 00:57:39,616
is supported everywhere on iOS


1999
00:57:39,616 --> 00:57:42,246
11 and macOS where capture is


2000
00:57:42,246 --> 00:57:45,396
supported iOS only and where we


2001
00:57:45,396 --> 00:57:47,066
have an A10 chip, and you do


2002
00:57:47,066 --> 00:57:47,786
that using the new


2003
00:57:47,786 --> 00:57:49,526
AVCapturePhoto interface.


2004
00:57:50,046 --> 00:57:52,856
For more information, here is


2005
00:57:52,996 --> 00:57:54,526
the URL for today's session.


2006
00:57:55,836 --> 00:57:57,496
I also wanted to point you to


2007
00:57:57,496 --> 00:57:58,876
some sister sessions to this


2008
00:57:58,876 --> 00:58:00,686
one, the first one in the list


2009
00:58:00,886 --> 00:58:02,266
High Efficiency Image File


2010
00:58:02,266 --> 00:58:03,866
Format is one that went straight


2011
00:58:03,866 --> 00:58:04,456
to video.


2012
00:58:04,996 --> 00:58:06,256
This is where we really delve


2013
00:58:06,256 --> 00:58:09,596
deeply into the bits in the HEIF


2014
00:58:09,596 --> 00:58:09,986
file.


2015
00:58:10,436 --> 00:58:11,726
It's a great, great


2016
00:58:12,206 --> 00:58:13,006
presentation.


2017
00:58:13,006 --> 00:58:14,136
You should definitely listen to


2018
00:58:14,136 --> 00:58:14,286
it.


2019
00:58:14,636 --> 00:58:16,086
It's performed by Davide so you


2020
00:58:16,086 --> 00:58:17,336
get the nice Italian accent


2021
00:58:17,336 --> 00:58:18,456
going at the same time.


2022
00:58:19,456 --> 00:58:21,366
Also, the Introducing HEIF and


2023
00:58:21,366 --> 00:58:23,016
HEVC which was one Tuesday,


2024
00:58:23,286 --> 00:58:25,136
which gave a higher-level


2025
00:58:25,306 --> 00:58:26,776
introduction to what we talked


2026
00:58:26,776 --> 00:58:27,346
about today.


2027
00:58:27,716 --> 00:58:29,246
And finally, the depth sessions


2028
00:58:29,246 --> 00:58:30,206
that I've made several


2029
00:58:30,206 --> 00:58:31,926
references to, they have several


2030
00:58:31,926 --> 00:58:33,466
segues to the auxiliary image


2031
00:58:33,466 --> 00:58:34,856
format that we use to store


2032
00:58:35,516 --> 00:58:36,756
depth in HEIF.


2033
00:58:37,996 --> 00:58:39,446
Thank you and enjoy the rest of


2034
00:58:39,446 --> 00:58:39,746
the show.


2035
00:58:40,516 --> 00:58:44,500
[ Applause ]

