1
00:00:06,516 --> 00:00:18,500
[ Music ]


2
00:00:22,466 --> 00:00:22,956
>> Hello.


3
00:00:23,516 --> 00:00:26,956
[ Applause ]


4
00:00:27,456 --> 00:00:29,636
Welcome to optimizing
web content in your app.


5
00:00:29,846 --> 00:00:31,096
My name's Jonathan Davis.


6
00:00:31,476 --> 00:00:32,996
I'm the web technology's
evangelist


7
00:00:32,996 --> 00:00:34,176
for Safari and WebKit.


8
00:00:34,896 --> 00:00:37,326
Now let me get something
out of the way up-front.


9
00:00:37,326 --> 00:00:40,776
I've had people tell me I
look like Edward Snowden,


10
00:00:40,776 --> 00:00:42,316
but I promise you I am not him,


11
00:00:43,216 --> 00:00:45,206
but with all the
satellites flying overhead,


12
00:00:45,586 --> 00:00:46,956
they may be all out to get us.


13
00:00:47,826 --> 00:00:50,826
That aside, I'm really excited
to show you some new things


14
00:00:50,826 --> 00:00:52,236
that will help you
get more performance


15
00:00:52,236 --> 00:00:53,596
out of web content in your app.


16
00:00:53,856 --> 00:00:57,716
And we've all known for a long
time that performance is key


17
00:00:57,716 --> 00:00:59,396
to a great user experience.


18
00:00:59,396 --> 00:01:02,856
So if you're an app
developer that uses WebViews


19
00:01:02,856 --> 00:01:04,446
and JSContext in app today.


20
00:01:05,426 --> 00:01:07,896
And you care about performance,
you're in the right place.


21
00:01:08,576 --> 00:01:09,976
So we're talking
about performance.


22
00:01:10,296 --> 00:01:11,946
And in this day and
age, what we really mean


23
00:01:11,946 --> 00:01:14,096
by performance is battery life.


24
00:01:14,146 --> 00:01:17,396
I mean battery life is the
ultimate limited resource.


25
00:01:17,696 --> 00:01:20,166
It can be the difference in
making that one last phone call


26
00:01:20,336 --> 00:01:23,706
or sending that last critical
file before the battery dies.


27
00:01:24,046 --> 00:01:26,276
And performance really
matters to our users,


28
00:01:26,756 --> 00:01:29,426
and they naturally choose
apps that don't slow them down


29
00:01:29,466 --> 00:01:30,726
and don't drain their battery.


30
00:01:31,316 --> 00:01:34,266
So what's we've all learned
together, from users' feedback


31
00:01:34,266 --> 00:01:37,436
and from each other, is that
performance really matters


32
00:01:37,436 --> 00:01:38,956
because battery life matters.


33
00:01:39,386 --> 00:01:44,236
So this year we focused on
giving you better tools to find


34
00:01:44,236 --> 00:01:46,646
and fix performance
issues in your web content.


35
00:01:47,206 --> 00:01:49,646
Now we have tools for
apps like for Swift,


36
00:01:49,646 --> 00:01:51,776
and Objective-C code,
like Instruments.


37
00:01:52,306 --> 00:01:54,616
And we have Web Inspector
for web developers,


38
00:01:54,616 --> 00:01:56,056
creating web pages and sites.


39
00:01:56,786 --> 00:01:59,356
But don't think that
just because you choose


40
00:01:59,356 --> 00:02:00,976
to use web technologies
in your app


41
00:02:01,016 --> 00:02:02,166
that you don't have any tools.


42
00:02:02,476 --> 00:02:05,326
In fact, I'm going to show you
today that all the same tools


43
00:02:05,326 --> 00:02:07,826
that are developed to help
people build websites work just


44
00:02:07,826 --> 00:02:11,015
as well for web technologies
in apps.


45
00:02:11,276 --> 00:02:12,796
So I want to start
today by showing you how


46
00:02:12,796 --> 00:02:15,716
to connect Web Inspector to
your WebViews in JSContext,


47
00:02:15,716 --> 00:02:18,506
so you have the right tool
ready to go when you need it.


48
00:02:18,616 --> 00:02:21,436
Then you're going to learn
about some new features


49
00:02:21,436 --> 00:02:24,086
that will help you understand
where time is being spent


50
00:02:24,086 --> 00:02:27,016
in your JavaScript code and how
these new features will help you


51
00:02:27,016 --> 00:02:29,666
find performance
issues lightning fast.


52
00:02:30,176 --> 00:02:33,556
And if you've ever wished you
could see how memory is used


53
00:02:33,556 --> 00:02:36,966
by your web content, we've added
new timelines to Web Inspector


54
00:02:36,966 --> 00:02:38,396
that I can't wait to show you.


55
00:02:38,606 --> 00:02:39,186
They're going to save you


56
00:02:39,186 --> 00:02:41,576
so much time finding
memory growth issues.


57
00:02:41,986 --> 00:02:42,316
All right?


58
00:02:42,786 --> 00:02:43,806
So let's get started.


59
00:02:45,046 --> 00:02:45,986
And the first thing
we're going to need


60
00:02:45,986 --> 00:02:48,766
to do is connect Web
Inspector to our app content.


61
00:02:49,486 --> 00:02:51,036
Now there are all
sorts of reasons


62
00:02:51,036 --> 00:02:52,846
to use web technologies
in your apps.


63
00:02:53,586 --> 00:02:56,346
It could be some modular
JavaScript in a JS context,


64
00:02:56,346 --> 00:02:58,156
so it's easy to swap
out the logic


65
00:02:58,156 --> 00:02:59,976
or add new modules
without re-compiling.


66
00:03:00,756 --> 00:03:02,626
And some of you may
be using JSContext


67
00:03:02,626 --> 00:03:05,816
with TVML in a tvOS app.


68
00:03:05,986 --> 00:03:08,106
And another reason to
use web technologies is


69
00:03:08,106 --> 00:03:09,676
when you want to
show web content.


70
00:03:10,156 --> 00:03:12,116
Like a web page from
a third-party website.


71
00:03:12,116 --> 00:03:13,716
A site you don't control.


72
00:03:13,976 --> 00:03:16,566
And for that, you're probably
using Safari View Controller


73
00:03:16,566 --> 00:03:18,456
and if you're not, you
may want to take a look


74
00:03:18,456 --> 00:03:20,756
at last year's session
Introducing Safari


75
00:03:20,756 --> 00:03:21,426
View Controller.


76
00:03:22,426 --> 00:03:26,016
But if you're showing content
that you own or control


77
00:03:26,176 --> 00:03:29,956
or can customize content that
happens to be written in HTML,


78
00:03:29,956 --> 00:03:34,276
CSS or JavaScript, content that
augments your app experience.


79
00:03:34,616 --> 00:03:36,346
WKWebView is the best choice.


80
00:03:36,706 --> 00:03:37,946
And it's essentially a rectangle


81
00:03:37,946 --> 00:03:39,796
where web content is
drawn into your app.


82
00:03:40,296 --> 00:03:43,686
It was introduced in iOS
8 and OS 10 Yosemite.


83
00:03:44,476 --> 00:03:47,556
And if you're still using
a WebView or UIWebView,


84
00:03:47,616 --> 00:03:49,266
you're really going
to want to take a look


85
00:03:49,266 --> 00:03:51,176
at upgrading to WKWebView.


86
00:03:51,566 --> 00:03:54,806
In fact, upgrading to WKWebView
allows you to take advantage


87
00:03:54,806 --> 00:03:56,626
of the Nitro JavaScript
Core engine


88
00:03:56,806 --> 00:04:00,016
and the four-tier JIT compiler
for a nice speed boost.


89
00:04:00,726 --> 00:04:02,666
So if you want to learn
more about WKWebView,


90
00:04:02,796 --> 00:04:05,086
I recommend taking a
look at the 2014 talk


91
00:04:05,086 --> 00:04:06,806
that introduced the
modern WebKit API.


92
00:04:08,016 --> 00:04:11,496
So last year we added some
great new features to WKWebView,


93
00:04:11,496 --> 00:04:14,386
like load file URL,
custom user agent strings


94
00:04:14,666 --> 00:04:16,596
and the WK website
data store API.


95
00:04:17,476 --> 00:04:20,495
And today, with iOS
10 and macOS Sierra,


96
00:04:20,826 --> 00:04:22,286
we've improved 3D-touch support.


97
00:04:23,066 --> 00:04:25,656
And now we allow your app to
implement those sweet Peek


98
00:04:25,656 --> 00:04:27,666
and Pop events in WKWebView.


99
00:04:29,326 --> 00:04:31,496
Now like I said earlier,
just because you've chosen


100
00:04:31,496 --> 00:04:32,916
to use web technologies
in your app,


101
00:04:33,816 --> 00:04:35,206
doesn't mean you
don't have any tools.


102
00:04:35,206 --> 00:04:37,866
In all of these cases, you can
connect Web Inspector to dig


103
00:04:37,866 --> 00:04:40,206
into what your web content
or JavaScript is doing.


104
00:04:41,066 --> 00:04:42,806
But before you can
use Web Inspector,


105
00:04:42,936 --> 00:04:44,976
you'll need to enable
the develop menu.


106
00:04:45,216 --> 00:04:47,606
So just load up Safari
Preferences and go


107
00:04:47,606 --> 00:04:50,056
over to the Advanced
tab and at the bottom,


108
00:04:50,166 --> 00:04:51,336
you'll see this check box.


109
00:04:51,626 --> 00:04:53,976
And it says Show
Develop menu in menu bar.


110
00:04:54,776 --> 00:04:56,716
Just give that a
click to check the box


111
00:04:56,956 --> 00:04:59,776
and the Develop Menu will appear
in the menu bar for Safari.


112
00:05:00,406 --> 00:05:04,436
Now to allow Web Inspector
to connect your iOS devices,


113
00:05:04,436 --> 00:05:05,836
there's a setting
you need to turn on.


114
00:05:06,546 --> 00:05:10,216
So in the Settings app,
on iOS, tap on Safari.


115
00:05:10,496 --> 00:05:13,226
Then down at the
bottom, tap on Advanced


116
00:05:14,026 --> 00:05:16,026
and toggle the Web
Inspector setting On.


117
00:05:16,876 --> 00:05:19,086
Now you can connect your
device to your Mac and check


118
00:05:19,086 --> 00:05:20,646
out the Develop menu in Safari.


119
00:05:21,656 --> 00:05:24,616
Now something that's really
cool in the Develop menu,


120
00:05:24,616 --> 00:05:26,686
something you may not
have ever noticed before,


121
00:05:26,686 --> 00:05:29,026
is you can see a list
of devices attached.


122
00:05:29,026 --> 00:05:31,546
There's an iPhone
connected, a MacBook Pro


123
00:05:31,746 --> 00:05:32,866
and the simulators there.


124
00:05:33,486 --> 00:05:35,516
And all you have to do
to attach to one of these


125
00:05:35,516 --> 00:05:36,916
and start using the tools


126
00:05:36,916 --> 00:05:39,206
for debugging is just
choose the Device menu.


127
00:05:39,476 --> 00:05:42,166
And you get a list of all
the WebViews and JSContexts


128
00:05:42,166 --> 00:05:43,376
that are running on the device.


129
00:05:43,816 --> 00:05:46,636
And this Mac app here
doesn't even use WebKit.


130
00:05:46,636 --> 00:05:48,016
It's using JavaScript.


131
00:05:48,136 --> 00:05:50,656
And I can connect right
to it and use the tools.


132
00:05:51,576 --> 00:05:54,976
Now for iOS, apps will
only show up when you build


133
00:05:54,976 --> 00:05:56,206
and run them from Xcode.


134
00:05:56,926 --> 00:05:58,426
But when we're talking
about a Mac app,


135
00:05:58,796 --> 00:06:00,186
there's just one more
thing you got to do.


136
00:06:01,276 --> 00:06:02,766
To protect the integrity
of your app,


137
00:06:02,766 --> 00:06:05,366
we don't let just
anyone download your app


138
00:06:05,366 --> 00:06:08,156
and use Web Inspector
to poke around your app.


139
00:06:08,676 --> 00:06:10,186
So you'll need to
add this entitlement


140
00:06:10,186 --> 00:06:12,286
to your app's Entitlements
File for local development.


141
00:06:13,306 --> 00:06:15,606
You probably already
have an Entitlements file


142
00:06:15,606 --> 00:06:17,546
but if you don't, it's
pretty easy to create one.


143
00:06:17,546 --> 00:06:20,306
You just create a new plist
with a .entitlements extension,


144
00:06:20,906 --> 00:06:23,496
set the code signing
entitlements path to that file


145
00:06:23,996 --> 00:06:25,416
in Xcode's build settings.


146
00:06:26,506 --> 00:06:28,246
So you add this while
you're developing


147
00:06:28,356 --> 00:06:31,476
and then you take it back
out when you ship your app.


148
00:06:31,786 --> 00:06:33,916
Then once you have this
entitlement, your device


149
00:06:33,916 --> 00:06:35,446
and app will show up
in the Develop menu


150
00:06:35,446 --> 00:06:36,486
and you can attach to it.


151
00:06:36,816 --> 00:06:40,706
And it's easy -- just that
easy to connect Web Inspector


152
00:06:40,706 --> 00:06:42,666
to your JSContext and WebViews.


153
00:06:44,806 --> 00:06:47,666
Okay. So we're up and running
with Web Inspector and our apps.


154
00:06:48,676 --> 00:06:51,186
Time to move onto some new
features in Web Inspector.


155
00:06:51,186 --> 00:06:53,836
And I want to start with
profiling your JavaScript code.


156
00:06:54,796 --> 00:06:57,586
So we've had a profiler in
JavaScript for a long time,


157
00:06:57,646 --> 00:06:59,796
and this year we have a
much better one that's going


158
00:06:59,796 --> 00:07:02,656
to be way more effective at
helping you quickly figure


159
00:07:02,656 --> 00:07:05,466
out where your most expensive
JavaScript is getting called.


160
00:07:05,466 --> 00:07:06,496
And the reason is simple.


161
00:07:07,276 --> 00:07:09,826
The new profiler uses
a sampling technique


162
00:07:09,886 --> 00:07:12,636
that doesn't affect your
performance anywhere near


163
00:07:12,636 --> 00:07:13,476
as much as before.


164
00:07:14,146 --> 00:07:17,136
So we had a profiler in an
era before there was really


165
00:07:17,136 --> 00:07:17,586
a compiler.


166
00:07:17,586 --> 00:07:18,506
It was an interpreter.


167
00:07:19,226 --> 00:07:23,136
But now we have this very
powerful four-tier JIT compiler,


168
00:07:23,436 --> 00:07:26,936
and the right profiler for that
is really a sampling profiler.


169
00:07:27,626 --> 00:07:29,536
And the sampling
profiler tells you


170
00:07:29,536 --> 00:07:31,526
where time is being
spent in your code.


171
00:07:31,746 --> 00:07:32,986
It helps you answer questions


172
00:07:32,986 --> 00:07:36,406
like what code is
costing us the most time?


173
00:07:36,576 --> 00:07:38,896
It samples the running
program every millisecond,


174
00:07:39,116 --> 00:07:41,776
and it pauses execution
briefly to take a quick snapshot


175
00:07:41,776 --> 00:07:43,126
of all the code that's running.


176
00:07:43,646 --> 00:07:46,916
And it can also take samples
while running your code


177
00:07:46,916 --> 00:07:48,996
with all four tiers
of a JIT enabled.


178
00:07:48,996 --> 00:07:50,026
So that means it's sampling


179
00:07:50,026 --> 00:07:52,046
at near the true
speed of your code.


180
00:07:52,616 --> 00:07:56,246
And since handling breakpoints
can cause code de-optimization,


181
00:07:56,496 --> 00:07:57,986
we temporarily ignore them.


182
00:07:58,526 --> 00:07:59,776
So while you're profiling,


183
00:08:00,016 --> 00:08:02,596
you get the truest
performance for your web app.


184
00:08:03,046 --> 00:08:05,156
There isn't nearly the
same performance cost


185
00:08:05,416 --> 00:08:06,856
to using the sampling profiler.


186
00:08:07,116 --> 00:08:10,166
And that literally means
while profiling your code,


187
00:08:10,666 --> 00:08:13,226
it can run at up
to 30 times faster.


188
00:08:14,366 --> 00:08:17,256
It makes the whole process of
profiling your code much quicker


189
00:08:17,256 --> 00:08:20,276
and easier, and you get much
more accurate data as a result.


190
00:08:21,576 --> 00:08:24,706
This was such an exciting
development that our team,


191
00:08:24,706 --> 00:08:27,786
our Web Inspector team, was
able to take advantage of this


192
00:08:27,786 --> 00:08:29,676
to find places where we
could improve the speed


193
00:08:29,676 --> 00:08:30,876
in Web Inspector itself.


194
00:08:32,426 --> 00:08:32,666
All right.


195
00:08:32,666 --> 00:08:34,506
So we have a sampling profiler.


196
00:08:34,506 --> 00:08:37,626
Let's see how Web Inspector uses
it to help us find problems.


197
00:08:38,506 --> 00:08:40,046
So there's a lot going on here,


198
00:08:40,046 --> 00:08:41,676
but it's actually pretty
easy to break down.


199
00:08:41,785 --> 00:08:42,765
And it's even more helpful


200
00:08:42,765 --> 00:08:44,006
with code you're
already familiar with.


201
00:08:44,946 --> 00:08:47,226
When we're talking about
profiling JavaScript,


202
00:08:47,226 --> 00:08:49,366
what we really mean is
we're recording a timeline


203
00:08:49,366 --> 00:08:50,606
for JavaScript in Events.


204
00:08:50,676 --> 00:08:53,546
And this is the Events
view, and it shows a list


205
00:08:53,546 --> 00:08:56,266
of separate discrete
JavaScript events.


206
00:08:56,556 --> 00:09:00,136
In particular, this is for some
code that uses the D3 library,


207
00:09:00,136 --> 00:09:02,986
so it's even helpful
for debugging code


208
00:09:02,986 --> 00:09:05,606
and profiling code that's in
a library that you're using.


209
00:09:06,036 --> 00:09:09,446
And each entry here is an
event where code is executed.


210
00:09:09,726 --> 00:09:10,896
It's where a code enters


211
00:09:11,146 --> 00:09:13,186
and exists the JavaScript
Core engine.


212
00:09:13,566 --> 00:09:15,936
And that includes event
listener callbacks,


213
00:09:15,936 --> 00:09:17,536
like these animation
frame entries


214
00:09:17,536 --> 00:09:19,206
for request animation
frame handlers.


215
00:09:20,156 --> 00:09:21,506
Or script evaluated entries


216
00:09:21,506 --> 00:09:24,336
where we see JavaScript files
are loaded and first evaluated.


217
00:09:24,696 --> 00:09:27,236
And we also have some
timing information here,


218
00:09:27,686 --> 00:09:30,966
showing you the time cost
of code that's being run.


219
00:09:32,036 --> 00:09:34,796
So if anything is more
than 10 or 15 milliseconds,


220
00:09:34,796 --> 00:09:36,406
you're getting really
close to dropping below


221
00:09:36,406 --> 00:09:38,826
that smooth 60-frames-per-second
performance.


222
00:09:40,356 --> 00:09:43,296
Now the Events view is helpful
but there's another view


223
00:09:43,296 --> 00:09:46,116
that we've added for you and
that's the Call Trees view.


224
00:09:46,576 --> 00:09:48,226
If you've used other
profiling tools,


225
00:09:48,226 --> 00:09:49,796
this ought to be
pretty familiar to you.


226
00:09:51,236 --> 00:09:54,156
Just click this Menu and
switch to the Call Trees view.


227
00:09:55,366 --> 00:09:57,316
And now it shows you
the accumulative time


228
00:09:57,316 --> 00:09:58,976
for functions in the call stack.


229
00:09:59,636 --> 00:10:02,416
And this is what we call the Top
Down view, and you can use it


230
00:10:02,416 --> 00:10:04,206
to dig down through
the Call Tree


231
00:10:04,206 --> 00:10:06,706
to uncover hot functions
spending lots of time.


232
00:10:07,776 --> 00:10:10,186
But my favorite view
is the Bottom Up view.


233
00:10:12,266 --> 00:10:15,116
It takes me right to the
hottest functions, the functions


234
00:10:15,116 --> 00:10:16,646
that are sampled most often.


235
00:10:17,546 --> 00:10:19,396
And this is the list of
the called functions,


236
00:10:19,396 --> 00:10:21,686
and it's sorted by the
ones costing the most time.


237
00:10:21,686 --> 00:10:23,226
So it inverts the Call Tree


238
00:10:23,416 --> 00:10:26,596
so you can quickly compare
the function costs directly.


239
00:10:27,316 --> 00:10:29,536
And you can see exactly
where most


240
00:10:29,536 --> 00:10:30,746
of your time is being spent.


241
00:10:31,256 --> 00:10:35,236
You can expand the entries and
go back up the path that leads


242
00:10:35,236 --> 00:10:36,846
to the functions
chewing up all the time.


243
00:10:37,456 --> 00:10:38,536
And this tells you when


244
00:10:38,636 --> 00:10:41,106
and where your most expensive
code is getting called.


245
00:10:41,826 --> 00:10:45,366
And to see this in action, I'd
like to invite my colleague,


246
00:10:45,366 --> 00:10:46,976
Brian Burg, to the
stage for a demo.


247
00:10:47,516 --> 00:10:54,656
[ Applause ]


248
00:10:55,156 --> 00:10:55,726
>> Thanks Jon.


249
00:10:55,906 --> 00:10:58,006
So the sampling profiler
is great


250
00:10:58,006 --> 00:11:00,556
because it can take
really complex content


251
00:11:00,556 --> 00:11:03,636
and still profile it and get
you really accurate information.


252
00:11:03,636 --> 00:11:05,116
And you can make it even faster.


253
00:11:05,846 --> 00:11:09,476
So to show this off, I've
got this iPad app I made.


254
00:11:09,756 --> 00:11:11,296
It's called Satellite Tracker.


255
00:11:11,296 --> 00:11:11,956
Let me get the display here.


256
00:11:15,666 --> 00:11:19,686
So Satellite Tracker will show
you, right now or any time,


257
00:11:20,086 --> 00:11:21,416
where the satellites
are overhead.


258
00:11:21,866 --> 00:11:24,616
So you can choose
different places on Earth.


259
00:11:25,116 --> 00:11:26,796
You can choose different
satellites.


260
00:11:27,536 --> 00:11:28,916
Different times.


261
00:11:30,016 --> 00:11:30,576
So that's great.


262
00:11:31,716 --> 00:11:33,806
If you're worried about
satellites overhead and want


263
00:11:33,806 --> 00:11:36,346
to put on a tinfoil hat when
overhead, this is a great app.


264
00:11:37,066 --> 00:11:41,686
But there's a small problem
is that if we have a lot


265
00:11:41,686 --> 00:11:44,126
of satellites overhead,
or pieces of a satellite


266
00:11:44,126 --> 00:11:47,216
that blew up, in this case, the
frame rate's kind of choppy.


267
00:11:47,676 --> 00:11:49,676
This is definitely not
60 frames per second.


268
00:11:49,756 --> 00:11:50,876
It's jittering all over.


269
00:11:51,396 --> 00:11:53,846
So we can use the
sampling profiler to figure


270
00:11:53,846 --> 00:11:55,846
out what's going on
and why it's so slow.


271
00:11:57,736 --> 00:11:59,776
So what we've got to
do is go over to Safari


272
00:11:59,776 --> 00:12:03,266
and we go to that Develop menu.


273
00:12:03,966 --> 00:12:06,026
Find the iPad here
and attach to it.


274
00:12:07,596 --> 00:12:09,886
And the first thing
I want to do is go


275
00:12:09,886 --> 00:12:12,596
over to the Frames view here and
just see where we are right now,


276
00:12:12,926 --> 00:12:13,866
in terms of frame rate.


277
00:12:14,066 --> 00:12:16,056
So let's just start recording.


278
00:12:17,136 --> 00:12:18,576
I'll switch back to my iPad.


279
00:12:19,366 --> 00:12:20,776
And start doing stuff.


280
00:12:21,596 --> 00:12:24,246
It'll sort of spin around here.


281
00:12:25,736 --> 00:12:27,506
Maybe a change the satellites.


282
00:12:29,406 --> 00:12:30,096
Change the time.


283
00:12:30,886 --> 00:12:31,976
Okay. Let's go back and see.


284
00:12:35,506 --> 00:12:36,456
Okay. Let's zoom way out.


285
00:12:37,436 --> 00:12:38,006
Okay. Wow.


286
00:12:38,006 --> 00:12:40,186
Yeah. Our performance is
all over the place here.


287
00:12:40,186 --> 00:12:44,046
So sometimes we're getting
60 frames per second here


288
00:12:44,046 --> 00:12:44,426
on the left.


289
00:12:45,286 --> 00:12:47,506
In the middle, it's just sort
of going all over the place


290
00:12:47,506 --> 00:12:48,586
as we're changing the views.


291
00:12:49,126 --> 00:12:52,036
And here we're sort
of going too slow.


292
00:12:52,036 --> 00:12:54,716
So if we want to figure
out what's going on here,


293
00:12:55,736 --> 00:13:00,776
we want to switch over
to the Events view,


294
00:13:01,046 --> 00:13:03,336
and then we can click on the
JavaScript and Events Timeline


295
00:13:03,336 --> 00:13:06,026
to focus in on that
sampling profiler data.


296
00:13:07,946 --> 00:13:10,926
So as Jon showed before, the
Events view here is going


297
00:13:10,926 --> 00:13:12,586
to show everything that
went into the run loop.


298
00:13:13,036 --> 00:13:16,206
And in this case, it's an
animation or simulation,


299
00:13:16,206 --> 00:13:18,466
so we're just rendering
frames over and over.


300
00:13:18,466 --> 00:13:21,506
So it's not really helpful,
if we want to figure


301
00:13:21,506 --> 00:13:22,776
out what's taking the most time.


302
00:13:23,536 --> 00:13:28,126
So let's switch over to the
Call Trees view, and here we see


303
00:13:28,126 --> 00:13:30,846
that Top Down Call Tree.


304
00:13:31,226 --> 00:13:35,316
And this shows aggregated over
all those rendering frames


305
00:13:35,946 --> 00:13:37,476
where we spent the most time.


306
00:13:38,366 --> 00:13:42,476
And here we can expand this to
see that D3 has a Timer function


307
00:13:42,476 --> 00:13:45,886
and that calls some of our
code, which draws a scene.


308
00:13:46,946 --> 00:13:50,006
And you know we draw some things
in the scene like satellites


309
00:13:50,006 --> 00:13:52,106
and the time and these things.


310
00:13:52,166 --> 00:13:54,676
So this is great, if we want


311
00:13:54,676 --> 00:13:56,056
to understand what
the code is doing.


312
00:13:56,656 --> 00:13:57,396
But if we want to figure


313
00:13:57,396 --> 00:13:59,366
out which functions
specifically are really hot,


314
00:14:00,066 --> 00:14:03,656
it's better to go over
to the Bottom Up view.


315
00:14:04,056 --> 00:14:08,486
So here we've listed all
the Functions regardless


316
00:14:08,486 --> 00:14:09,326
of who called them.


317
00:14:09,926 --> 00:14:12,766
And we can see that fillText


318
00:14:12,766 --> 00:14:15,326
and our tangent [phonetic]
are our two hottest functions,


319
00:14:15,436 --> 00:14:18,556
so why are we calling
our tangent?


320
00:14:18,786 --> 00:14:21,866
We can expand out this row here


321
00:14:22,216 --> 00:14:23,646
and see who's calling
our tangent.


322
00:14:23,816 --> 00:14:28,206
So right here, we're
plotting some satellites.


323
00:14:28,436 --> 00:14:32,086
It looks like we're
computing the transform


324
00:14:32,086 --> 00:14:33,266
so we can draw this globe.


325
00:14:34,046 --> 00:14:35,876
Okay. These things
seem pretty normal.


326
00:14:36,456 --> 00:14:38,096
Maybe I can pull
out my math book


327
00:14:38,096 --> 00:14:39,156
and make it a little faster.


328
00:14:39,156 --> 00:14:41,746
Let's go up to fillText.


329
00:14:41,746 --> 00:14:45,666
So and to refresh you, if
we go back to the app here,


330
00:14:46,326 --> 00:14:50,246
we're drawing text on
the current time up there


331
00:14:50,246 --> 00:14:51,466
and also for every data point.


332
00:14:51,946 --> 00:14:53,326
So that makes sense.


333
00:14:53,516 --> 00:14:56,076
But if we look really
closely here,


334
00:14:56,606 --> 00:14:57,906
we're actually drawing
the time twice,


335
00:14:58,396 --> 00:14:59,806
and that seems kind of strange.


336
00:15:00,846 --> 00:15:06,026
So if we expand this out, we
can see who's calling this,


337
00:15:06,456 --> 00:15:09,256
and it seems that we're seem


338
00:15:09,256 --> 00:15:11,256
to be drawing two different
foreground scenes at once.


339
00:15:11,786 --> 00:15:14,116
This is probably
not what we wanted.


340
00:15:15,406 --> 00:15:17,726
So let's figure out
what's going on.


341
00:15:17,726 --> 00:15:20,126
If it was the case that we were
drawing two foreground scenes,


342
00:15:20,216 --> 00:15:24,556
then we're doing twice as
much work as we need to.


343
00:15:24,856 --> 00:15:27,506
So over here, just to
refresh your memory,


344
00:15:27,506 --> 00:15:28,716
we have this sort of flat map.


345
00:15:28,716 --> 00:15:31,776
And then we have the
globe, which rotates.


346
00:15:32,846 --> 00:15:33,456
So


347
00:15:34,586 --> 00:15:37,906
let's go back into the code,


348
00:15:37,906 --> 00:15:41,456
and figure out what controls
switch in-between these


349
00:15:41,506 --> 00:15:42,026
two maps.


350
00:15:42,026 --> 00:15:42,976
Maybe we messed up somewhere.


351
00:15:46,516 --> 00:15:48,146
So we switch between
the two globes


352
00:15:48,496 --> 00:15:49,776
when we change the location.


353
00:15:51,036 --> 00:15:52,106
So here's updateLocation.


354
00:15:52,816 --> 00:15:57,196
Okay. So when we have one map
up, we don't see the other one.


355
00:15:57,306 --> 00:16:00,516
So that makes sense because here
we're adding the hidden class,


356
00:16:00,546 --> 00:16:02,856
and that's just going
to make it not display.


357
00:16:04,286 --> 00:16:07,776
And here for the globeMap,
we set running equal to true


358
00:16:07,776 --> 00:16:09,046
when the whole thing is running.


359
00:16:09,606 --> 00:16:11,786
And also in the place we're
showing it's not a global


360
00:16:11,786 --> 00:16:13,466
projection, so that makes sense.


361
00:16:13,466 --> 00:16:15,966
When we're showing the flat
map, we don't show the globe


362
00:16:16,016 --> 00:16:16,776
when it's not running.


363
00:16:18,166 --> 00:16:21,136
Up here for the flat map, it
seems like it's always running


364
00:16:21,136 --> 00:16:22,366
if the UI is running at all.


365
00:16:22,526 --> 00:16:26,116
So that's kind of strange.


366
00:16:26,156 --> 00:16:27,926
Well let's go back to the
map and try something.


367
00:16:32,296 --> 00:16:34,406
So we'll go up to our
[inaudible] data set here.


368
00:16:34,986 --> 00:16:39,906
And if we go to Earth, it seems
to have a better frame rate


369
00:16:40,156 --> 00:16:43,026
than if we just did
the globe map.


370
00:16:43,296 --> 00:16:44,586
And well, that makes sense.


371
00:16:44,586 --> 00:16:47,556
I think we're drawing two maps
when the globe map is active


372
00:16:47,556 --> 00:16:49,496
but only one map when
we're doing the flat maps.


373
00:16:49,496 --> 00:16:52,716
So if we go in here and
change this condition --


374
00:16:59,276 --> 00:17:00,976
We want it to be the opposite.


375
00:17:04,576 --> 00:17:07,976
Okay. So let's stop, and
see if this is the fix.


376
00:17:12,236 --> 00:17:13,806
So go back to our iPad here.


377
00:17:15,546 --> 00:17:16,806
Okay. This looks pretty smooth.


378
00:17:16,806 --> 00:17:17,685
Let's go here.


379
00:17:18,996 --> 00:17:19,566
Oh that's great.


380
00:17:22,026 --> 00:17:22,876
Yeah, it looks really nice.


381
00:17:22,876 --> 00:17:26,366
So let's go and check that
rendering timeline again and see


382
00:17:27,185 --> 00:17:29,236
if it's 60-frames per second.


383
00:17:30,196 --> 00:17:32,126
So I'll switch back
to Frames again


384
00:17:32,996 --> 00:17:36,336
and start recording and yeah.


385
00:17:36,336 --> 00:17:37,096
That's pretty nice.


386
00:17:37,096 --> 00:17:40,216
I'm spinning the globe, and
it slows down a little bit.


387
00:17:40,216 --> 00:17:42,556
But the steady state
seems to be --


388
00:17:42,556 --> 00:17:45,296
okay, we're definitely
under 60-frames per second.


389
00:17:45,846 --> 00:17:47,816
And over here we have
the bar, and if we're


390
00:17:47,816 --> 00:17:48,976
under it, then we're in luck.


391
00:17:52,956 --> 00:17:57,956
Okay. So now Satellite Tracker's
a lot faster, so we know exactly


392
00:17:57,956 --> 00:17:58,746
when to put on our hat.


393
00:17:58,956 --> 00:17:59,546
This is great.


394
00:18:00,246 --> 00:18:02,216
So this is a small example


395
00:18:02,216 --> 00:18:04,916
of how we can use a
sampling profiler to dig


396
00:18:04,916 --> 00:18:07,366
into really busy content
and make it even faster.


397
00:18:08,696 --> 00:18:09,436
Okay. Next.


398
00:18:09,436 --> 00:18:12,896
Jon's going to tell us about
memory and allocations.


399
00:18:13,516 --> 00:18:21,316
[ Applause ]


400
00:18:21,816 --> 00:18:22,446
>> Thank you Brian.


401
00:18:24,356 --> 00:18:26,646
So you can see that
profiling is fast.


402
00:18:27,276 --> 00:18:29,376
It allows you to see the
true speed of your code


403
00:18:29,506 --> 00:18:31,116
so you can get really
accurate data.


404
00:18:31,686 --> 00:18:34,286
So give the JavaScript and
Events Timeline another look


405
00:18:34,526 --> 00:18:37,996
and use it to find slow
callback handlers, slow timers


406
00:18:37,996 --> 00:18:40,336
or slow script initialization
in the Events view.


407
00:18:41,336 --> 00:18:45,036
And use the new Call Trees view
to see time cost, as they pile


408
00:18:45,036 --> 00:18:46,956
up across the time
slice you select.


409
00:18:48,216 --> 00:18:50,586
Remember that Bottom Up
is your new best friend.


410
00:18:50,586 --> 00:18:54,216
It really helps you find the
best places to start optimizing.


411
00:18:54,796 --> 00:18:58,126
Okay. So we've looked at
the new sampling profiler


412
00:18:58,126 --> 00:19:00,296
and new JavaScript
Call Trees view.


413
00:19:00,886 --> 00:19:03,096
I'm really excited that
we have better tools


414
00:19:03,096 --> 00:19:04,666
for optimizing CPU time.


415
00:19:04,666 --> 00:19:07,356
And we can give our users a fast
experience and save a bit more


416
00:19:07,356 --> 00:19:08,276
of their battery life.


417
00:19:08,726 --> 00:19:10,176
And this is great and
now we're going to move


418
00:19:10,176 --> 00:19:12,226
on to the other side of
the performance coin,


419
00:19:12,666 --> 00:19:14,256
figuring out where
the memory is going.


420
00:19:14,746 --> 00:19:17,916
So you want to be efficient
with memory in your web content


421
00:19:17,916 --> 00:19:19,526
because it's a limited resource.


422
00:19:19,976 --> 00:19:23,376
Being memory efficient helps
your web content be able


423
00:19:23,376 --> 00:19:26,776
to scale really well to
handle large data sets.


424
00:19:28,056 --> 00:19:31,466
Plus, using lots of
memory degrades performance


425
00:19:31,466 --> 00:19:32,486
and we don't want to do that.


426
00:19:33,276 --> 00:19:35,166
and it can also bring
down your web content


427
00:19:35,256 --> 00:19:36,776
and we really don't
want to do that.


428
00:19:37,326 --> 00:19:39,696
Now the good news is if
you're going WKWebView,


429
00:19:40,086 --> 00:19:41,686
it runs in a separate process,


430
00:19:41,976 --> 00:19:43,476
so it won't bring
down your entire app.


431
00:19:43,516 --> 00:19:45,736
But still, it's not a
great user experience.


432
00:19:46,286 --> 00:19:48,806
So to help you with all of this,
we've added two new timelines


433
00:19:48,806 --> 00:19:50,556
to Web Inspector and Safari 10.


434
00:19:51,106 --> 00:19:53,296
When you fire up the
new Web Inspector,


435
00:19:53,296 --> 00:19:55,356
the new timelines will
be off by default,


436
00:19:55,356 --> 00:19:55,976
so you need to turn them on.


437
00:19:56,796 --> 00:19:59,496
You just click the Edit button
and just above the Timelines,


438
00:20:00,076 --> 00:20:03,606
you can now configure the
timelines you want to see.


439
00:20:03,776 --> 00:20:06,736
So you can just work with the
ones you want to work with.


440
00:20:06,736 --> 00:20:08,646
Just like in the
Instruments app.


441
00:20:09,236 --> 00:20:11,826
So just toggle the new
timelines On, and you're ready


442
00:20:11,826 --> 00:20:12,946
to record a new timelines.


443
00:20:13,296 --> 00:20:14,236
But you probably don't want


444
00:20:14,236 --> 00:20:15,996
to keep them all
running at the same time.


445
00:20:16,566 --> 00:20:18,346
The sampling profiler
for the JavaScript


446
00:20:18,346 --> 00:20:21,176
and Events Timeline has less
overhead but there's still some.


447
00:20:21,706 --> 00:20:24,126
And the JavaScript Allocation's
Timeline will add some extra


448
00:20:24,126 --> 00:20:25,666
process during garbage
collection


449
00:20:25,966 --> 00:20:27,446
that can have a performance
impact.


450
00:20:28,416 --> 00:20:31,676
Okay. So we're going to leave
the Memory Timeline turned On.


451
00:20:32,016 --> 00:20:34,826
And when you record a timeline,
you get something like this.


452
00:20:35,726 --> 00:20:37,756
You get this new
Memory Timeline graph


453
00:20:37,756 --> 00:20:39,936
and it shows you how
memory has been allocated


454
00:20:39,936 --> 00:20:41,986
across different
categories over time.


455
00:20:41,986 --> 00:20:44,956
And there are a series
of charts and graphs


456
00:20:44,956 --> 00:20:47,216
to help you understand
how memory is being used


457
00:20:47,216 --> 00:20:48,336
and how it's being divided up.


458
00:20:49,746 --> 00:20:52,376
The Breakdown chart here shows
you how memory is allocated


459
00:20:52,376 --> 00:20:55,446
for JavaScript, for images,
for the layers that make


460
00:20:55,446 --> 00:20:57,056
up your page, and for the rest


461
00:20:57,056 --> 00:20:58,556
of the engine-related
page memory.


462
00:20:59,636 --> 00:21:02,606
And the Max Comparison
chart helps you investigate


463
00:21:02,606 --> 00:21:03,526
memory spikes.


464
00:21:03,526 --> 00:21:04,926
So we have a high watermark here


465
00:21:04,926 --> 00:21:07,326
and that helps you see
memory problems in the past.


466
00:21:07,456 --> 00:21:10,556
And you can even isolate spikes,
by selecting a specific slice


467
00:21:10,556 --> 00:21:14,026
or a specific range of time
around a spike in the timeline.


468
00:21:14,536 --> 00:21:17,816
And then, you can use the
category breakdown below


469
00:21:18,026 --> 00:21:19,886
to see what's contributing
most of the spike.


470
00:21:20,546 --> 00:21:23,836
And each of these graphs here
are independently scaled.


471
00:21:23,836 --> 00:21:26,516
So you can easily see
changes over time.


472
00:21:26,726 --> 00:21:30,496
So if there's a spike in
JavaScript, it shows you places


473
00:21:30,646 --> 00:21:33,276
where lots of new objects are
being created and referenced.


474
00:21:33,596 --> 00:21:36,776
And that includes Objects like
string Objects and functions


475
00:21:37,166 --> 00:21:39,116
and all the engine
data that supports them


476
00:21:39,116 --> 00:21:41,206
like structure data
and compiled code.


477
00:21:41,916 --> 00:21:44,736
So when you see usage
drop in JavaScript,


478
00:21:44,736 --> 00:21:46,986
you're seeing garbage
collection reclaiming memory.


479
00:21:48,106 --> 00:21:50,866
And images shows you the
memory allocated for images


480
00:21:50,866 --> 00:21:52,406
that have been decoded
for display,


481
00:21:52,986 --> 00:21:56,296
so that's the larger image
data, usually used for images


482
00:21:56,296 --> 00:21:57,556
that are visible
in the viewport.


483
00:21:58,076 --> 00:22:01,506
And layers is showing you
graphics layer memory,


484
00:22:01,776 --> 00:22:04,696
memory used for WebKit's
tile grid, compositing layers


485
00:22:04,916 --> 00:22:06,096
and other engine layers.


486
00:22:07,226 --> 00:22:08,956
Pages is everything else,


487
00:22:08,956 --> 00:22:11,006
all the other things the
engine's keeping track of,


488
00:22:11,006 --> 00:22:14,296
like the DOM and page
styles, fonts rendering data,


489
00:22:14,296 --> 00:22:16,486
memory caches and
system allocations.


490
00:22:17,276 --> 00:22:19,376
So this breakdown gives
you a great way to ensure


491
00:22:19,376 --> 00:22:22,246
that memory use lines up
with your expectations.


492
00:22:22,556 --> 00:22:24,566
If you have JavaScript-heavy
content,


493
00:22:24,566 --> 00:22:26,516
you'd expect the
largest category --


494
00:22:26,516 --> 00:22:29,896
that JavaScript is the largest
category in the Breakdown chart.


495
00:22:30,216 --> 00:22:32,036
And you'll likely see
more changes over time


496
00:22:32,036 --> 00:22:33,096
in the Timeline graph.


497
00:22:33,946 --> 00:22:37,826
But for an image-heavy page
like a gallery, for example,


498
00:22:38,196 --> 00:22:40,966
then the layers and images
categories would likely be the


499
00:22:40,966 --> 00:22:42,656
largest, with more
changes over time.


500
00:22:43,836 --> 00:22:47,486
So that's the Memory
Timeline, new in Safari 10.


501
00:22:48,066 --> 00:22:52,356
And to complement the Memory
Timeline is the new JavaScript


502
00:22:52,356 --> 00:22:53,556
Allocations Timeline.


503
00:22:54,076 --> 00:22:56,196
It's one thing to see
memory growing over time,


504
00:22:56,426 --> 00:22:57,826
but it's another
thing pinning it


505
00:22:57,826 --> 00:23:00,426
down to see what actual
JavaScript Allocations happen.


506
00:23:00,426 --> 00:23:02,166
And a very powerful tool


507
00:23:02,166 --> 00:23:06,446
for this is JavaScript
Allocation Snapshots.


508
00:23:07,326 --> 00:23:10,306
What's powerful about Snapshots
is that you get a snapshot


509
00:23:10,306 --> 00:23:12,296
of a moment in time,
in the JavaScript heap.


510
00:23:12,496 --> 00:23:15,456
And you can dig in to see
everything that's allocated.


511
00:23:15,756 --> 00:23:18,766
But it's even more powerful
when you have two Snapshots,


512
00:23:19,416 --> 00:23:22,376
and this allows you to go back
later and compare the two.


513
00:23:22,376 --> 00:23:25,696
And comparing Snapshots is
one of the most powerful tools


514
00:23:25,696 --> 00:23:29,126
for answering the question, am
I doing unnecessary allocations?


515
00:23:29,886 --> 00:23:32,646
So to really make use of this,
you need multiple Snapshots.


516
00:23:32,646 --> 00:23:36,526
So that's why, by default,
we take one every 10 seconds


517
00:23:37,206 --> 00:23:39,766
and also at the beginning
and end of a recording.


518
00:23:40,156 --> 00:23:42,056
So the Snapshots are
plotted on the Timeline,


519
00:23:42,056 --> 00:23:43,006
so you can correlate them


520
00:23:43,006 --> 00:23:44,546
to things happening
on other timelines.


521
00:23:44,916 --> 00:23:46,616
I just have the others
turned off here for now.


522
00:23:47,406 --> 00:23:50,386
And the Snapshots are listed
below with a few details,


523
00:23:50,386 --> 00:23:51,906
like timing and size
of the heap.


524
00:23:52,776 --> 00:23:54,566
Now, to dig into a
particular problem,


525
00:23:54,566 --> 00:23:57,006
you'll often need a Snapshot,
both before and after


526
00:23:57,006 --> 00:23:58,736
where you think a memory
issue is happening.


527
00:23:59,176 --> 00:24:00,536
And there are three techniques.


528
00:24:01,086 --> 00:24:03,726
You can rely on the automatic
ones, every 10 seconds.


529
00:24:04,486 --> 00:24:05,566
Or you can take one yourself


530
00:24:05,566 --> 00:24:07,236
by pushing the Take
Snapshot button.


531
00:24:07,856 --> 00:24:09,506
Or you can do it from your code.


532
00:24:10,566 --> 00:24:12,656
And really the easiest way
to zoom into an issue is


533
00:24:12,656 --> 00:24:13,956
to modify your code a little.


534
00:24:14,546 --> 00:24:16,336
You call the takeHeapSnapshot
API


535
00:24:16,516 --> 00:24:19,596
and pass it a custom label
argument of really anything


536
00:24:19,596 --> 00:24:21,016
that can help you
identify it later.


537
00:24:21,666 --> 00:24:24,266
And again, you want a pair
of Snapshots, both before


538
00:24:24,266 --> 00:24:27,116
and after the code you think
is causing the problem.


539
00:24:27,616 --> 00:24:30,596
Now you could also use
this by taking a Snapshot


540
00:24:30,596 --> 00:24:33,366
between doing some
work in a loop.


541
00:24:34,056 --> 00:24:36,496
So just some quick
things to keep in mind


542
00:24:36,836 --> 00:24:38,356
about the takeHeapSnapshot API.


543
00:24:39,186 --> 00:24:41,916
Remember that Snapshots do
add some extra process during


544
00:24:41,916 --> 00:24:44,456
garbage collection and that
can impact performance,


545
00:24:44,456 --> 00:24:45,626
which you'll definitely notice


546
00:24:45,626 --> 00:24:48,086
if your code is firing off
a lot of Snapshots rapidly.


547
00:24:49,176 --> 00:24:51,636
You'll also want to capture
the differences before


548
00:24:51,636 --> 00:24:54,406
and after code that's doing
some work or at some point


549
00:24:54,406 --> 00:24:55,476
between work in a loop.


550
00:24:55,996 --> 00:24:57,676
And don't leave this in.


551
00:24:57,676 --> 00:24:58,956
I mean, if you leave this in,


552
00:24:59,036 --> 00:25:00,526
for most customers
it'll be okay.


553
00:25:00,526 --> 00:25:02,556
But if anybody's running
Web Inspector, they're going


554
00:25:02,556 --> 00:25:04,276
to be taking all
these Snapshots,


555
00:25:04,276 --> 00:25:05,586
and you probably
don't want that.


556
00:25:05,586 --> 00:25:08,886
So just remember to be sure and
take it out before you ship.


557
00:25:09,436 --> 00:25:11,416
So what are these
Snapshots really show you?


558
00:25:12,046 --> 00:25:13,816
Let's take a look.


559
00:25:14,846 --> 00:25:18,626
You just click on the
Snapshot icon on the Timeline


560
00:25:18,626 --> 00:25:21,566
or on the Arrow button of any
of the Snapshot list entries.


561
00:25:22,126 --> 00:25:23,766
And you'll get this
list of Objects


562
00:25:23,766 --> 00:25:25,026
that were allocated in the heap.


563
00:25:25,296 --> 00:25:27,306
And we have two views
for Snapshots.


564
00:25:27,686 --> 00:25:30,586
This is the Instances view, and
it shows you a list of Objects


565
00:25:30,586 --> 00:25:32,456
in the heap, grouped
by their class.


566
00:25:33,356 --> 00:25:35,536
And the other is the
Object Graph view.


567
00:25:35,536 --> 00:25:37,936
And this is really an
overview of everything


568
00:25:37,936 --> 00:25:40,066
and everything that's
owned by everything.


569
00:25:40,496 --> 00:25:42,166
So if you're readily
familiar with the code,


570
00:25:42,166 --> 00:25:45,106
this can be a useful
way to confirm things


571
00:25:45,106 --> 00:25:45,896
or where they should be.


572
00:25:46,396 --> 00:25:50,416
But actually the far more useful
view is back in the other one,


573
00:25:50,416 --> 00:25:51,556
in the Instances view.


574
00:25:51,866 --> 00:25:54,596
And it's powerful because you
can easily find Objects no


575
00:25:54,696 --> 00:25:57,056
matter how deep-down the
property path they are.


576
00:25:57,516 --> 00:26:00,576
And the Count here can help
you realize potential issues


577
00:26:00,576 --> 00:26:02,236
when they don't meet
your expectations.


578
00:26:02,236 --> 00:26:05,196
Like was I really expecting
over 4000 string Objects?


579
00:26:06,436 --> 00:26:08,666
So you can expand the
Classes and see all


580
00:26:08,666 --> 00:26:10,476
of the allocated
Objects of that class.


581
00:26:11,246 --> 00:26:14,096
Then to figure out what
something is there's all these


582
00:26:14,096 --> 00:26:14,876
different clues.


583
00:26:15,006 --> 00:26:16,066
The Class is a clue.


584
00:26:16,946 --> 00:26:19,376
Another is the actual
properties of the Object.


585
00:26:19,706 --> 00:26:21,656
It's a really quick
way to know what it is.


586
00:26:22,506 --> 00:26:25,426
But the easiest way to know
what an Object is is to hover


587
00:26:25,426 --> 00:26:30,636
over this Object Identifier
here and you get this.


588
00:26:30,916 --> 00:26:31,426
Look at this.


589
00:26:31,656 --> 00:26:34,786
It literally shows you the
shortest path to the Object.


590
00:26:35,346 --> 00:26:38,096
This is telling you exactly what
is keeping the Object alive.


591
00:26:38,736 --> 00:26:40,856
It almost always gives
you answer you need,


592
00:26:41,756 --> 00:26:45,626
especially in a world of
JavaScript's garbage collection.


593
00:26:45,626 --> 00:26:47,286
This is the kind of
thing that cuts right


594
00:26:47,286 --> 00:26:48,516
through the confusion.


595
00:26:49,656 --> 00:26:52,826
But the most important feature
and really the entire point


596
00:26:52,826 --> 00:26:55,036
of this is to be able to
compare two Snapshots.


597
00:26:55,346 --> 00:26:55,966
Now watch this.


598
00:26:55,966 --> 00:26:57,546
Once you've collected
some Snapshots,


599
00:26:57,996 --> 00:27:00,206
you just click the Compare
Snapshots button here,


600
00:27:01,266 --> 00:27:03,096
and you select a
Baseline Snapshot


601
00:27:03,376 --> 00:27:04,986
and a second to compare against.


602
00:27:05,796 --> 00:27:09,276
And boom. You get a new
Comparison Snapshot to dig into.


603
00:27:09,796 --> 00:27:11,136
Now this is a really big deal


604
00:27:11,486 --> 00:27:13,526
because now we're only seeing
the Objects that are new


605
00:27:13,526 --> 00:27:16,646
between two points,
between our two Snapshots.


606
00:27:17,866 --> 00:27:20,226
Expanding the Object
Class group we can see all


607
00:27:20,226 --> 00:27:21,556
of these Object Allocations.


608
00:27:21,556 --> 00:27:23,806
And their previews are showing
their names and what looks


609
00:27:23,806 --> 00:27:24,946
like some telemetry data.


610
00:27:25,396 --> 00:27:27,716
And that's a clue that
these are Satellite Objects.


611
00:27:28,166 --> 00:27:29,806
And the pop over here
shows that they're


612
00:27:29,806 --> 00:27:31,166
in the Satellites
Array property.


613
00:27:32,326 --> 00:27:34,126
Since this is a Snapshot
comparison,


614
00:27:34,126 --> 00:27:36,646
these Satellite Objects
are all newly allocated.


615
00:27:36,926 --> 00:27:39,356
And that's a big clue as
to what the code's doing.


616
00:27:39,886 --> 00:27:42,316
So to show you all of these
new memory features in action,


617
00:27:42,366 --> 00:27:44,806
I'd like to invite Brian back up
to the stage for another demo.


618
00:27:45,516 --> 00:27:50,656
[ Applause ]


619
00:27:51,156 --> 00:27:51,736
>> Thanks Jon.


620
00:27:52,616 --> 00:27:56,706
So I gave Satellite Tracker
to my buddy, Ed, and he stayed


621
00:27:57,156 --> 00:27:58,556
up all night playing with it.


622
00:28:00,116 --> 00:28:02,396
And he had a lot of fun,


623
00:28:02,396 --> 00:28:04,236
and he never got tracked
by the satellites.


624
00:28:04,356 --> 00:28:05,646
But there's a problem.


625
00:28:05,646 --> 00:28:07,406
Eventually it just
kept getting slower


626
00:28:07,406 --> 00:28:09,126
and slower the longer it was up.


627
00:28:09,776 --> 00:28:12,826
And to me that sounded like
you know classic memory.


628
00:28:13,006 --> 00:28:15,096
The longer the thing is
open, the slower it goes.


629
00:28:15,916 --> 00:28:18,716
So I want to look
into Satellite Tracker


630
00:28:18,716 --> 00:28:20,446
with these new memory
tools to figure


631
00:28:20,446 --> 00:28:22,416
out if we're leaking
some memory somehow.


632
00:28:23,646 --> 00:28:26,106
So the first thing
I'm going to do.


633
00:28:26,246 --> 00:28:28,576
Okay I've got iPad here.


634
00:28:29,306 --> 00:28:30,976
I'm going to go back
to the Web Inspector --


635
00:28:34,336 --> 00:28:36,936
And inspect the app.


636
00:28:37,006 --> 00:28:39,166
And the first thing
I like to do,


637
00:28:39,286 --> 00:28:42,636
when I don't really know what
the bug is, here is I want


638
00:28:42,736 --> 00:28:43,866
to use the Memory Timeline.


639
00:28:43,916 --> 00:28:47,686
And that's going to show
me sort of like an overview


640
00:28:47,686 --> 00:28:48,666
of what's going on on the page.


641
00:28:48,666 --> 00:28:50,016
So let's start recording.


642
00:28:51,146 --> 00:28:54,826
I'll switch back, and I'm just
going to switch back and forth


643
00:28:54,946 --> 00:28:57,596
between two satellites.


644
00:28:58,136 --> 00:29:00,446
Maybe I'll add some
effects here.


645
00:29:02,126 --> 00:29:04,216
Okay, I'm switching
back and forth.


646
00:29:06,616 --> 00:29:07,976
Okay. Let's see what's
in the Timeline.


647
00:29:11,506 --> 00:29:15,486
So in the Timeline overview you
can see a stacked line graph


648
00:29:15,486 --> 00:29:17,716
showing all the different
parts and the relative size,


649
00:29:17,856 --> 00:29:21,116
but if you click here, you'll
get that more detailed view.


650
00:29:22,566 --> 00:29:24,586
And so there's no
images on this page.


651
00:29:24,886 --> 00:29:25,776
This is all canvas.


652
00:29:26,386 --> 00:29:27,786
The layers is pretty flat.


653
00:29:28,266 --> 00:29:29,606
The page sort of
goes up and down,


654
00:29:29,606 --> 00:29:30,886
stuff's getting garbage
collected.


655
00:29:30,886 --> 00:29:31,436
That's fine.


656
00:29:32,306 --> 00:29:33,896
If you look more
closely at JavaScript,


657
00:29:34,126 --> 00:29:37,466
you see that like you know some
stuff gets garbage collected


658
00:29:37,546 --> 00:29:40,276
but overall, it's really
just going up over time.


659
00:29:40,606 --> 00:29:42,116
And if we had this
running all night, yeah,


660
00:29:42,166 --> 00:29:44,316
it would probably
go up a lot more.


661
00:29:44,936 --> 00:29:49,196
So the next step here is to
start taking heap Snapshots


662
00:29:49,416 --> 00:29:52,146
or allocation Snapshots
so we can figure


663
00:29:52,146 --> 00:29:54,206
out what's being
allocated over time.


664
00:29:56,626 --> 00:30:02,236
So to do that, we're going
to start a new recording.


665
00:30:03,116 --> 00:30:05,306
And one cool quick trick here
is you can do Shift Click


666
00:30:05,446 --> 00:30:07,416
or Shift Space, and they'll
start a new recording


667
00:30:07,536 --> 00:30:08,696
and not append to the old one.


668
00:30:09,526 --> 00:30:11,836
Oh wait. I forgot to
change our Timelines here.


669
00:30:11,836 --> 00:30:13,036
So let's put away Memory.


670
00:30:14,156 --> 00:30:15,906
And let's put in
Allocations instead.


671
00:30:18,256 --> 00:30:19,506
Okay. So let's start recording.


672
00:30:20,386 --> 00:30:21,306
Go back to the iPad.


673
00:30:23,186 --> 00:30:25,706
Here I added this little
takeHeapSnapshot button,


674
00:30:25,826 --> 00:30:27,696
so I already added some
calls to the console


675
00:30:27,696 --> 00:30:29,886
about takeHeapSnapshot
when we switch


676
00:30:29,886 --> 00:30:32,636
between the two satellite
groups and some other actions.


677
00:30:33,796 --> 00:30:38,416
So for this recording, I'm going
to rotate and then I'm going


678
00:30:38,416 --> 00:30:40,936
to switch between two
satellites over and over.


679
00:30:46,266 --> 00:30:47,846
We should look at
Spy Satellites.


680
00:30:47,846 --> 00:30:49,426
That seems kind of relevant.


681
00:30:52,416 --> 00:30:54,326
Okay. And you'll notice
it starts to stutter a bit


682
00:30:54,326 --> 00:30:56,726
because we're taking
Snapshots of everything


683
00:30:56,726 --> 00:30:57,656
in the JavaScript heap.


684
00:30:57,656 --> 00:31:00,126
So this you know we're
making lots of Objects,


685
00:31:00,126 --> 00:31:01,786
so this is going to slow
down your app a lot.


686
00:31:01,876 --> 00:31:05,336
So it's important to not
take lots of Snapshots.


687
00:31:05,336 --> 00:31:08,446
You want to take them
only on important times.


688
00:31:08,796 --> 00:31:12,046
So here, you can see
these Ss in the box


689
00:31:12,046 --> 00:31:15,736
and those are the
Snapshots we took.


690
00:31:16,046 --> 00:31:17,426
So if we zoom in over here,


691
00:31:17,426 --> 00:31:20,896
we can see that there's pretty
steady memory growth over time


692
00:31:20,896 --> 00:31:22,956
as we start switching
between these satellite sets.


693
00:31:26,746 --> 00:31:29,106
So if we want to investigate
this, like Jon said,


694
00:31:29,106 --> 00:31:31,156
we need to start
comparing two of these


695
00:31:31,156 --> 00:31:35,766
to see what's being
retained at the end.


696
00:31:35,906 --> 00:31:40,166
So let's go between
Snapshot 9 and 11.


697
00:31:41,616 --> 00:31:45,196
And right away, we can
see a bunch of stuff


698
00:31:45,196 --> 00:31:48,136
that was allocated
between Snapshot 9 and 11


699
00:31:48,136 --> 00:31:49,446
and is still alive right now.


700
00:31:49,956 --> 00:31:52,486
So that's a pretty good sign
that it's being retained


701
00:31:52,486 --> 00:31:54,366
and you know we probably
didn't mean to do that.


702
00:31:55,636 --> 00:31:57,546
So we can start looking
at what these things are.


703
00:31:58,736 --> 00:31:59,606
There're some Arrays.


704
00:32:00,306 --> 00:32:03,436
It looks like we have
Arrays full of coordinates.


705
00:32:04,636 --> 00:32:07,266
And you know we use coordinates
in lots of different places


706
00:32:07,266 --> 00:32:09,126
in this app, but
if we hover here,


707
00:32:09,126 --> 00:32:11,156
we can see the path
to these things.


708
00:32:11,256 --> 00:32:14,756
So these seem to be saved
in trajectoryHistory,


709
00:32:14,756 --> 00:32:17,736
which is what we use to
make those trails behind


710
00:32:17,736 --> 00:32:18,436
the satellites.


711
00:32:19,976 --> 00:32:21,436
So okay. That's fine,


712
00:32:21,436 --> 00:32:25,306
but I don't think we
should still have this


713
00:32:25,306 --> 00:32:27,706
trajectoryHistory for satellites
who are no longer showing.


714
00:32:27,776 --> 00:32:31,986
That seems kind of like a bug.


715
00:32:31,986 --> 00:32:33,646
We allocate some Objects too.


716
00:32:33,696 --> 00:32:37,056
And this is sort of
strange because you know


717
00:32:38,096 --> 00:32:39,596
between Snapshot 9 and 11,


718
00:32:39,596 --> 00:32:41,496
we've already seen
these satellites before.


719
00:32:41,856 --> 00:32:44,316
So I wouldn't expect that
we're making new Objects


720
00:32:44,316 --> 00:32:45,086
for each satellite.


721
00:32:45,136 --> 00:32:45,946
We should just use them


722
00:32:45,946 --> 00:32:48,726
if we already fetched
the resources for them.


723
00:32:48,786 --> 00:32:53,216
So and then here's a bunch of
coordinates and telemetry stuff,


724
00:32:53,216 --> 00:32:55,096
so it seems like we might be


725
00:32:55,096 --> 00:32:56,466
like re-parsing them
or something.


726
00:32:57,926 --> 00:33:00,936
But I'm not sure, so
one thing I'd like to do


727
00:33:00,936 --> 00:33:03,906
in this view is you know
we have lots of Objects.


728
00:33:03,906 --> 00:33:04,856
You can't read all of them,


729
00:33:05,136 --> 00:33:08,026
but what I like to do is find
something that's fairly unique.


730
00:33:08,856 --> 00:33:12,066
And in this Snapshot here,
we have lots of Strings,


731
00:33:12,066 --> 00:33:13,926
lots of Arrays, lots of Objects.


732
00:33:13,926 --> 00:33:16,656
But there's only one
Promise that's retained


733
00:33:16,656 --> 00:33:17,816
between these two Snapshots.


734
00:33:17,896 --> 00:33:21,566
So I think if I want to debug
this, I should start looking


735
00:33:21,566 --> 00:33:25,036
in our code to see where we're
using Promises because it seems


736
00:33:25,036 --> 00:33:27,266
that that's being leaked
with some other stuff.


737
00:33:27,446 --> 00:33:29,276
So we search for Promise.


738
00:33:30,076 --> 00:33:34,876
Okay. There's D3 library, and
here's our code that uses it.


739
00:33:35,616 --> 00:33:39,046
Okay. Let's go to this one.


740
00:33:39,876 --> 00:33:42,826
Okay. So in the [inaudible]
I did,


741
00:33:42,826 --> 00:33:44,946
we switched between
the satellites a lot


742
00:33:44,946 --> 00:33:46,606
and then the code that's
called loadDataset.


743
00:33:46,806 --> 00:33:50,126
So someone left comments.


744
00:33:50,126 --> 00:33:50,496
That's nice.


745
00:33:50,686 --> 00:33:55,276
So here it looks like
someone requests we change


746
00:33:55,276 --> 00:33:55,896
the satellites.


747
00:33:57,346 --> 00:34:01,246
So here we asynchronously
load that data


748
00:34:01,336 --> 00:34:03,456
for the satellites from the TRL.


749
00:34:03,766 --> 00:34:06,036
When it comes back,
we're going to parse it,


750
00:34:07,146 --> 00:34:08,525
and then we're going
to parse it some more


751
00:34:08,525 --> 00:34:10,916
with the satellite
plotting library.


752
00:34:11,485 --> 00:34:13,446
And then we're going to save
it to our list of satellites.


753
00:34:15,376 --> 00:34:18,576
That's all well and fine,
but back in Inspector,


754
00:34:18,576 --> 00:34:20,456
it seems that we're leaking
this Promise every time.


755
00:34:20,606 --> 00:34:23,485
So if you look more
carefully, what if we switched


756
00:34:23,485 --> 00:34:25,366
to a data set that we
already loaded before?


757
00:34:26,136 --> 00:34:29,045
It seems like we're not
even checking for that case.


758
00:34:30,226 --> 00:34:34,856
So if you look more carefully
up here, every time we switch


759
00:34:34,856 --> 00:34:36,255
between the two satellites,


760
00:34:37,286 --> 00:34:38,536
we're doing a new
network request.


761
00:34:38,886 --> 00:34:40,176
So if we go to this Timeline,


762
00:34:41,016 --> 00:34:43,786
it seems like we're requesting
the same debris field data


763
00:34:43,786 --> 00:34:44,466
over and over.


764
00:34:45,016 --> 00:34:47,696
And that makes sense
because if we go back


765
00:34:47,775 --> 00:34:49,585
to the code, we request that.


766
00:34:49,585 --> 00:34:51,456
Then we make a bunch of
Objects when we parse it.


767
00:34:51,456 --> 00:34:54,286
And then we push it onto
an array of satellites,


768
00:34:54,346 --> 00:34:56,696
and that thing never really gets
cleared as far as I can tell.


769
00:34:56,815 --> 00:35:00,296
So it seems like
we're just doing a lot


770
00:35:00,296 --> 00:35:02,256
of unnecessary work
and then leaking it.


771
00:35:02,256 --> 00:35:05,286
So I think what we can
do here is to check


772
00:35:05,286 --> 00:35:08,236
if we already have this
parsed satellites Object.


773
00:35:08,726 --> 00:35:11,646
Because this is a Promise,
if this thing already exists,


774
00:35:11,646 --> 00:35:14,076
we can still call .then on it.


775
00:35:14,836 --> 00:35:15,896
Since it's already solved,


776
00:35:16,396 --> 00:35:18,956
next time we evaluate
the Promise reactions,


777
00:35:18,956 --> 00:35:22,266
it's going to go through and
set the satellites onto the map.


778
00:35:23,646 --> 00:35:25,976
So let's add a [inaudible] here.


779
00:35:30,666 --> 00:35:32,976
And if this doesn't exist,
then we'll make it --


780
00:35:42,246 --> 00:35:47,316
Okay. Let's stop and rerun
and see if this fixes this.


781
00:35:49,646 --> 00:35:51,926
So we need to go
back and reattach --


782
00:35:55,936 --> 00:35:58,976
And okay, here's our app, and
we're going to start recording.


783
00:36:02,266 --> 00:36:03,216
And when we go back to the app,


784
00:36:03,216 --> 00:36:04,816
I'm going to turn
on the Snapshots.


785
00:36:05,646 --> 00:36:06,496
Turn on some effects.


786
00:36:06,816 --> 00:36:10,246
And we'll go down south.


787
00:36:10,796 --> 00:36:13,256
Okay. So Spy Satellites.


788
00:36:14,276 --> 00:36:16,246
Science Experiments
by Satellites.


789
00:36:17,796 --> 00:36:18,656
Science Experiments.


790
00:36:19,856 --> 00:36:19,946
Okay.


791
00:36:24,946 --> 00:36:28,456
So if we go back here, we're
seeing a lot less memory growth.


792
00:36:28,536 --> 00:36:32,026
Maybe 1 megabyte,
instead of like 4 or 5,


793
00:36:32,026 --> 00:36:34,216
so there might be some
more leaks in here.


794
00:36:34,216 --> 00:36:38,896
But at the end of the Snapshot,
we have about as much memory


795
00:36:38,896 --> 00:36:41,246
as when we started rendering
this thing in the beginning.


796
00:36:41,246 --> 00:36:43,116
So I think we've fixed
that particular leak.


797
00:36:44,816 --> 00:36:49,636
So this shows how we can use the
Allocations and Memory Timelines


798
00:36:49,766 --> 00:36:51,866
to figure out where
we're leaking memory


799
00:36:52,306 --> 00:36:54,536
in apps like this.


800
00:36:54,536 --> 00:36:58,586
And it's great because like this
app has a lot of stuff going on.


801
00:36:58,646 --> 00:37:01,026
But still, with the dipping
[phonetic] functionality,


802
00:37:01,026 --> 00:37:02,896
we can really drill
down to what's changing


803
00:37:02,896 --> 00:37:05,666
in some Timeline we care about.


804
00:37:06,646 --> 00:37:09,056
Okay. So that's the end
of Satellite Tracker.


805
00:37:10,186 --> 00:37:10,786
Back to you, Jon.


806
00:37:11,516 --> 00:37:16,186
[ Applause ]


807
00:37:16,686 --> 00:37:17,356
>> Thank you Brian.


808
00:37:17,746 --> 00:37:20,236
You can see how it
really amazingly quick


809
00:37:20,366 --> 00:37:23,136
and simple these new
Timelines make it


810
00:37:23,136 --> 00:37:24,846
to zero in on memory issues.


811
00:37:25,496 --> 00:37:27,696
So remember you want to use
the Memory Timeline to figure


812
00:37:27,696 --> 00:37:30,396
out how memory is being used and
what's driving memory spikes,


813
00:37:30,396 --> 00:37:31,866
so you have an idea
of where to go look.


814
00:37:32,606 --> 00:37:35,456
And then, take multiple
Heap Snapshots


815
00:37:35,456 --> 00:37:37,816
in the JavaScript
Allocations Timeline to zoom


816
00:37:37,816 --> 00:37:39,616
into code that's driving
the memory growth.


817
00:37:40,766 --> 00:37:43,406
Also, don't forget to get
rid of takeHeapSnapshot


818
00:37:43,406 --> 00:37:44,676
from your code before shipping.


819
00:37:46,056 --> 00:37:47,886
And remember the
performance impact


820
00:37:48,176 --> 00:37:50,606
that the JavaScript
Allocations Timeline can have


821
00:37:50,676 --> 00:37:51,416
while recording.


822
00:37:53,316 --> 00:37:56,586
So that's a look at the new
Timeline instruments available


823
00:37:56,586 --> 00:37:58,306
in Web Inspector with Safari 10.


824
00:37:58,516 --> 00:38:00,526
I think you're really
going to love using them.


825
00:38:01,846 --> 00:38:03,466
And as I wrap this up,
I want to leave you


826
00:38:03,466 --> 00:38:04,836
with some next steps to take.


827
00:38:05,396 --> 00:38:08,376
I want to encourage you
to reconsider WKWebView,


828
00:38:08,376 --> 00:38:09,616
if you've not made
the switch yet.


829
00:38:10,116 --> 00:38:13,576
And turn on the Develop
Menu in Safari Preferences,


830
00:38:13,576 --> 00:38:16,526
connect Web Inspector to your
app and start taking advantage


831
00:38:16,526 --> 00:38:17,626
of these new features.


832
00:38:18,046 --> 00:38:20,806
Save a ton of time using
them with the Bottom Up view


833
00:38:20,806 --> 00:38:23,316
and Call Trees for the best
places to start optimizing.


834
00:38:23,586 --> 00:38:26,146
The Memory Timeline to
quickly see how memory spikes


835
00:38:26,146 --> 00:38:26,676
are happening.


836
00:38:27,126 --> 00:38:29,226
And Heap Snapshots
to easily explore


837
00:38:29,226 --> 00:38:31,126
and compare Object allocations.


838
00:38:31,646 --> 00:38:33,946
And stay updated on features.


839
00:38:33,946 --> 00:38:36,606
There's more this year in
Web Inspector and WebKit


840
00:38:36,606 --> 00:38:39,366
that you can take advantage
of in your app's web content


841
00:38:39,566 --> 00:38:41,706
to deliver great
in-app experiences.


842
00:38:42,796 --> 00:38:45,016
Along with the features
Brian and I showed you today,


843
00:38:45,276 --> 00:38:46,626
our team added some
other features


844
00:38:46,626 --> 00:38:48,276
to Web Inspector
over this past year.


845
00:38:49,396 --> 00:38:50,996
Quick Open will jump you right


846
00:38:50,996 --> 00:38:53,296
into the resources
loaded with your page.


847
00:38:53,856 --> 00:38:57,296
And Tail Call Stacks will now
show you Tail Call optimized


848
00:38:57,296 --> 00:38:58,416
functions in the debugger.


849
00:38:59,336 --> 00:39:02,646
And earlier this spring, we
shipped Safari 9.1 on OS 10,


850
00:39:03,236 --> 00:39:05,296
and with an updated
Web Inspector with it.


851
00:39:05,296 --> 00:39:07,386
And that shows the
Pseudo Elements


852
00:39:07,386 --> 00:39:09,056
in the DOM Tree of
the Elements tab.


853
00:39:09,056 --> 00:39:12,096
And there's also the new
visual style sidebar.


854
00:39:12,686 --> 00:39:15,186
And if you aren't already aware,


855
00:39:15,756 --> 00:39:18,446
Web Inspector is a developer
tool that's created as part


856
00:39:18,446 --> 00:39:20,206
of the WebKit Open
Source Project.


857
00:39:21,656 --> 00:39:25,256
WebKit is the web browser engine
that's used to power your apps


858
00:39:25,256 --> 00:39:27,656
and drive WebViews
and JSContext.


859
00:39:28,056 --> 00:39:30,126
And of course, it's also
the engine behind Safari.


860
00:39:30,926 --> 00:39:33,666
In this past year, our teams
added great new features


861
00:39:33,666 --> 00:39:34,286
to WebKit.


862
00:39:34,516 --> 00:39:36,906
We hit 100% support for ES6.


863
00:39:37,606 --> 00:39:40,526
We improved support for the
recommended IndexedDB Standard.


864
00:39:41,216 --> 00:39:45,296
We also added Shadow DOM support
and WebDriver, CSS Variables


865
00:39:45,296 --> 00:39:46,466
and the Picture Element.


866
00:39:47,686 --> 00:39:50,276
So there's a lot going on and
as an open source project,


867
00:39:50,276 --> 00:39:52,546
you can follow development
as it occurs.


868
00:39:53,046 --> 00:39:55,006
Most of you here will want
to take advantage of this.


869
00:39:55,436 --> 00:39:57,936
And if there are some of you
here that want to enhance some


870
00:39:57,936 --> 00:39:59,496
of these, you have
that opportunity


871
00:39:59,496 --> 00:40:01,706
because of the way WebKit
is an open source project.


872
00:40:02,396 --> 00:40:03,666
So you can find out more


873
00:40:03,666 --> 00:40:05,756
about the WebKit
Project on WebKit.org.


874
00:40:05,756 --> 00:40:08,236
And the WebKit team, the
engineers behind WebKit,


875
00:40:08,496 --> 00:40:09,766
blog about development work.


876
00:40:09,766 --> 00:40:11,636
In fact, we have two
blog posts up now


877
00:40:11,856 --> 00:40:14,726
that cover the Memory Timelines
and the Sampling Profiler


878
00:40:14,726 --> 00:40:15,766
that we talked about today.


879
00:40:15,766 --> 00:40:17,106
So if you want to
get more information,


880
00:40:17,106 --> 00:40:17,956
you can dig in there.


881
00:40:18,556 --> 00:40:19,996
We also have a feature
status page


882
00:40:19,996 --> 00:40:21,436
that gives you at-a-glance
updates


883
00:40:21,436 --> 00:40:22,866
for our web standards progress.


884
00:40:22,866 --> 00:40:24,836
And there's also
links to downloads


885
00:40:24,836 --> 00:40:27,836
for WebKit nightly builds
and our latest browser,


886
00:40:28,116 --> 00:40:29,776
the Safari Technology Preview.


887
00:40:30,526 --> 00:40:32,466
It's updated every
couple of weeks,


888
00:40:32,566 --> 00:40:35,836
with an updated WebKit
engine, so you can try out new


889
00:40:35,836 --> 00:40:37,106
and experimental features


890
00:40:37,106 --> 00:40:39,386
in WebKit every two
weeks as it's improved.


891
00:40:40,496 --> 00:40:42,136
Our teams pore a lot of work


892
00:40:42,136 --> 00:40:44,296
into Safari WebKit
and Web Inspector.


893
00:40:44,486 --> 00:40:45,896
And the Web Inspector
team was able


894
00:40:45,896 --> 00:40:48,526
to use these new performance
features we showed you today


895
00:40:48,766 --> 00:40:50,996
to find issues and
deliver faster performance


896
00:40:50,996 --> 00:40:52,116
in Web Inspector itself.


897
00:40:52,116 --> 00:40:54,226
I can't wait to see what
you'll do with them.


898
00:40:54,626 --> 00:40:56,696
So for more information,
you can watch this session


899
00:40:56,696 --> 00:40:58,956
and download the slides
at developer.apple.com.


900
00:40:59,716 --> 00:41:03,296
There are lots of other relevant
sessions earlier this week


901
00:41:03,296 --> 00:41:04,826
as well as in past years.


902
00:41:05,106 --> 00:41:07,496
You can find those on
developer.apple.com as well.


903
00:41:08,686 --> 00:41:12,406
So on behalf of Brian, myself,
Safari and the WebKit teams,


904
00:41:12,686 --> 00:41:13,556
thank you for being here.


905
00:41:13,686 --> 00:41:14,976
enjoy the rest of WWDC.


906
00:41:15,508 --> 00:41:17,508
[ Applause ]

