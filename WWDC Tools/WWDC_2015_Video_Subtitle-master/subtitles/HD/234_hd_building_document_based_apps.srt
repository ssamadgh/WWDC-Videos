1
00:00:24,031 --> 00:00:26,031
[ Applause ]


2
00:00:26,046 --> 00:00:27,366
>> MIKE HESS: Thank you.


3
00:00:30,106 --> 00:00:30,656
Good afternoon!


4
00:00:31,116 --> 00:00:33,736
I'm Mike Hess and I'm a software
engineer on the iOS Apps


5
00:00:33,736 --> 00:00:36,746
and Frameworks team and I'm here
with Johannes Fortmann to talk


6
00:00:36,746 --> 00:00:40,326
to you about how to make your
document-based apps top notch.


7
00:00:41,706 --> 00:00:43,786
Now we have written some
sample code for you today


8
00:00:44,226 --> 00:00:47,436
which is going to show you how
to build the two main components


9
00:00:47,516 --> 00:00:49,686
of a document-based app.


10
00:00:50,326 --> 00:00:52,036
First, we're going
to show you how


11
00:00:52,036 --> 00:00:54,276
to build a great
Document Browser


12
00:00:54,636 --> 00:00:57,576
which will let your users
quickly find the documents


13
00:00:57,576 --> 00:00:58,926
that they're interested
in working on.


14
00:01:00,386 --> 00:01:02,036
Second, we're going
to show you how


15
00:01:02,036 --> 00:01:05,666
to build a great document
editor that interacts properly


16
00:01:05,666 --> 00:01:09,076
with file coordination to
deal with concurrent readers


17
00:01:09,076 --> 00:01:11,506
and writers such as the
iCloud drive daemon.


18
00:01:11,906 --> 00:01:13,756
We're going to get into
this a little bit later.


19
00:01:14,736 --> 00:01:17,006
First, let's focus on
the Document Browser.


20
00:01:18,096 --> 00:01:21,046
So what is a document-based
app anyways?


21
00:01:22,796 --> 00:01:26,706
Well, we think of a document
as a single, standalone entity


22
00:01:26,706 --> 00:01:30,646
and it is understood to the
user as a single entity.


23
00:01:31,336 --> 00:01:33,526
A document-based app is
just going to be an app


24
00:01:33,526 --> 00:01:37,366
which manages a list of these
documents and presents them


25
00:01:37,366 --> 00:01:39,696
to the users so that
they can view them


26
00:01:39,696 --> 00:01:41,696
or edit them or rename them.


27
00:01:42,886 --> 00:01:45,466
Keynote, for example,
manages a list


28
00:01:45,546 --> 00:01:47,626
of Keynote presentation
documents.


29
00:01:47,956 --> 00:01:51,386
Numbers manages a list of
Numbers spreadsheet documents;


30
00:01:51,666 --> 00:01:55,426
even Garage Band manages a list
of Garage Band song documents.


31
00:01:55,776 --> 00:02:01,016
So we would consider all of
these to be document-based apps.


32
00:02:01,266 --> 00:02:02,626
Now let's get into
how we're going


33
00:02:02,626 --> 00:02:04,956
to build our Document Browser.


34
00:02:06,486 --> 00:02:09,485
There are four main components
of a great Document Browser.


35
00:02:10,416 --> 00:02:14,246
First, we want to
list our documents


36
00:02:14,246 --> 00:02:16,736
in a way that's meaningful
to our users such as here


37
00:02:16,736 --> 00:02:20,226
in our sample code we sort
our documents by file name.


38
00:02:20,396 --> 00:02:23,656
Our user understands
the flow of our app.


39
00:02:24,736 --> 00:02:27,576
Second, we think you
should use thumbnails


40
00:02:27,646 --> 00:02:30,406
for greater document
visibility so that just


41
00:02:30,406 --> 00:02:34,416
at a glance your users can
quickly identify the document


42
00:02:34,416 --> 00:02:36,036
that they're interested
in working on.


43
00:02:37,356 --> 00:02:41,306
Third, we want to display all
documents that are available


44
00:02:41,306 --> 00:02:44,546
to our app, including
documents that exist


45
00:02:44,546 --> 00:02:47,826
in other apps' containers such
as this document in the sample


46
00:02:48,386 --> 00:02:51,606
which exists in the shared
iCloud Drive container.


47
00:02:53,206 --> 00:02:54,996
And fourth, we think
it is a good idea


48
00:02:54,996 --> 00:02:58,916
to store a recently accessed
list of your documents


49
00:02:58,946 --> 00:03:02,066
so that users can quickly
get back to the documents


50
00:03:02,066 --> 00:03:03,306
that they're currently
working on.


51
00:03:03,826 --> 00:03:08,876
Now let's go into how we're
going to discover our documents


52
00:03:08,876 --> 00:03:10,316
for our Document Browser.


53
00:03:10,906 --> 00:03:17,686
Now, a naive approach might
be to use NSFileManager to try


54
00:03:17,686 --> 00:03:19,636
to list your documents
in the cloud


55
00:03:19,936 --> 00:03:21,626
but these results
are incomplete.


56
00:03:22,576 --> 00:03:27,536
For example, in iCloud there is
a notion of document promises


57
00:03:27,986 --> 00:03:29,996
where there's a document
that exists there


58
00:03:29,996 --> 00:03:32,656
but content has not been
made available locally,


59
00:03:32,656 --> 00:03:34,246
it has not been downloaded
to disk yet,


60
00:03:34,416 --> 00:03:37,566
and NSFileManager does not pick
up these documents properly.


61
00:03:38,226 --> 00:03:39,716
In addition, if you're trying


62
00:03:39,716 --> 00:03:42,166
to list your documents
using NSFileManager,


63
00:03:42,586 --> 00:03:44,426
external documents
are not included


64
00:03:44,666 --> 00:03:48,596
so you're not listing all of the
documents available to your app.


65
00:03:48,826 --> 00:03:49,996
Let's take a quick look at this.


66
00:03:51,106 --> 00:03:53,576
Let's say you're using
the NSFileManager APIs.


67
00:03:54,826 --> 00:03:57,986
If you're using NSFileManager,
you'll properly pick


68
00:03:57,986 --> 00:04:00,166
up document one and
document two here,


69
00:04:00,536 --> 00:04:03,486
which are completely downloaded
to disk in our app's container.


70
00:04:04,216 --> 00:04:06,606
But you're missing the
result of document 3


71
00:04:06,836 --> 00:04:08,976
which is a document
promise from iCloud,


72
00:04:09,436 --> 00:04:12,296
and you're also missing
document 4 which exists


73
00:04:12,296 --> 00:04:13,626
in another app's container


74
00:04:13,736 --> 00:04:17,836
but our user has granted our
app access to that document.


75
00:04:17,935 --> 00:04:20,796
So you don't really want to
use the NSFileManager APIs


76
00:04:20,796 --> 00:04:22,136
when you're listing
your documents.


77
00:04:23,696 --> 00:04:26,116
Instead, you want to
use NSMetadataQuery.


78
00:04:27,146 --> 00:04:30,046
Let's take a look at how
NSMetadataQuery works.


79
00:04:31,126 --> 00:04:34,596
NSMetadataQuery will pick up all
the documents that are available


80
00:04:34,596 --> 00:04:38,666
to your app, including document
3 which is the document promise,


81
00:04:38,756 --> 00:04:42,186
and document 4 which exists
in another app's container


82
00:04:42,186 --> 00:04:44,066
but the user granted
our app permission


83
00:04:44,066 --> 00:04:45,716
to view that document.


84
00:04:46,526 --> 00:04:49,086
Now it is important to note
here that document 5 which is


85
00:04:49,086 --> 00:04:50,266
in another app's container


86
00:04:50,466 --> 00:04:52,896
but the user has not
granted our app permission


87
00:04:52,976 --> 00:04:57,656
to view is still not included
in the NSMetadataQuery results


88
00:04:57,686 --> 00:05:00,316
because that would be a
privacy leak if we showed


89
00:05:00,316 --> 00:05:02,196
that document to the user.


90
00:05:04,556 --> 00:05:06,566
So let's use NSMetadataQuery


91
00:05:06,566 --> 00:05:08,116
for discovering our
documents in the cloud.


92
00:05:09,576 --> 00:05:11,936
Now how does this flow
work from your app?


93
00:05:12,906 --> 00:05:15,886
Well, first of all you're going
to create your NSMetadataQuery.


94
00:05:17,386 --> 00:05:19,296
Then NSMetadataQuery
is going to go


95
00:05:19,296 --> 00:05:22,106
through an initial gather
phase where it lists all


96
00:05:22,106 --> 00:05:26,106
of the documents that are
currently available to your app.


97
00:05:26,376 --> 00:05:28,716
Once this initial gather
phase has completed,


98
00:05:28,996 --> 00:05:31,006
you will get a notification
and then you just have


99
00:05:31,046 --> 00:05:33,836
to display these
initial documents


100
00:05:33,956 --> 00:05:35,616
on your main queue
in your app's UI.


101
00:05:37,916 --> 00:05:40,416
But NSMetadataQuery
doesn't stop there.


102
00:05:41,256 --> 00:05:45,126
In addition, you will receive
update notifications as state


103
00:05:45,126 --> 00:05:48,326
in the cloud changes such as
here the iCloud Drive daemon


104
00:05:48,896 --> 00:05:52,306
downloaded a new document
to our app's container


105
00:05:52,306 --> 00:05:53,506
and we were notified


106
00:05:53,506 --> 00:05:55,926
in our NSMetadataQuery
about this document.


107
00:05:57,776 --> 00:06:02,706
Then you just need to compute
the animations from the changes,


108
00:06:02,706 --> 00:06:06,746
such as here we may want to
insert a CollectionView cell


109
00:06:07,116 --> 00:06:08,396
into our CollectionView,


110
00:06:08,936 --> 00:06:12,766
and then just display this
updated UI on our main thread.


111
00:06:15,486 --> 00:06:18,196
Now that we know how to
discover our documents,


112
00:06:18,196 --> 00:06:22,216
let's get into how we're
going to make our UI better


113
00:06:22,216 --> 00:06:23,526
with document thumbnails.


114
00:06:28,396 --> 00:06:34,916
Now, we think it is a good idea
to display thumbnails in your UI


115
00:06:34,916 --> 00:06:38,876
because it gives visual
context to your user.


116
00:06:39,676 --> 00:06:43,436
That way your user can just at
a glance identify the document


117
00:06:43,436 --> 00:06:44,466
that they're interested
in working


118
00:06:44,466 --> 00:06:46,306
on because they have
a great thumbnail


119
00:06:46,306 --> 00:06:48,246
so they can quickly identify it.


120
00:06:48,776 --> 00:06:51,616
Now new in iOS 9, thumbnails
are actually generated


121
00:06:51,616 --> 00:06:54,576
for you automatically for
certain document types


122
00:06:54,656 --> 00:06:57,556
that are well-known, such as
large image files, for example.


123
00:06:57,556 --> 00:07:02,936
Now let's get into the
workflow of how you might want


124
00:07:02,936 --> 00:07:06,446
to load your thumbnail for
display in your app's UI.


125
00:07:07,146 --> 00:07:08,986
It is important to note here


126
00:07:08,986 --> 00:07:12,756
that loading thumbnails involves
loading a potentially large


127
00:07:12,756 --> 00:07:16,086
amount of data into
memory, which can be slow,


128
00:07:16,086 --> 00:07:19,766
so you don't want to block your
main queue while loading your


129
00:07:19,766 --> 00:07:20,516
thumbnail data.


130
00:07:21,256 --> 00:07:23,836
Let's take an example
workflow, which would work,


131
00:07:24,316 --> 00:07:26,476
which is how our
sample code app does it.


132
00:07:27,426 --> 00:07:30,096
So first in our sample code
we have a CollectionView


133
00:07:30,096 --> 00:07:33,296
and the CollectionView asks us
to load a CollectionView cell.


134
00:07:34,756 --> 00:07:39,286
We're going to go ahead and
schedule a fetch thumbnail job


135
00:07:39,286 --> 00:07:42,096
on a background queue because
we don't have the thumbnail


136
00:07:42,096 --> 00:07:42,766
cached yet.


137
00:07:43,816 --> 00:07:45,446
Now, we're not going to wait


138
00:07:45,476 --> 00:07:47,676
for this fetch thumbnail
job to complete.


139
00:07:48,256 --> 00:07:51,216
We're going to immediately
return a CollectionView cell


140
00:07:51,216 --> 00:07:53,776
with a placeholder image
so that the user knows


141
00:07:53,816 --> 00:07:55,146
that there is something there.


142
00:07:55,766 --> 00:07:59,446
At some point in the future,
the fetch thumbnail job is going


143
00:07:59,446 --> 00:08:03,436
to finish and then we'll just
notify our CollectionView


144
00:08:03,436 --> 00:08:05,106
that it needs to
reload that cell


145
00:08:05,996 --> 00:08:07,636
and then we'll just
display the cell


146
00:08:08,146 --> 00:08:10,226
in our UI with our thumbnail.


147
00:08:12,426 --> 00:08:13,026
All right.


148
00:08:13,246 --> 00:08:17,666
Now that we know how to find
our documents and display them


149
00:08:17,666 --> 00:08:19,506
with great thumbnails,
let's get into how


150
00:08:19,506 --> 00:08:21,386
to manage a recents list.


151
00:08:22,736 --> 00:08:26,046
Now we think you want
to use a recents list


152
00:08:26,046 --> 00:08:29,676
because recently accessed
documents are often the


153
00:08:29,676 --> 00:08:32,566
documents that a user
is currently working on,


154
00:08:33,626 --> 00:08:37,506
so it is a good idea to store
a list of these documents


155
00:08:37,506 --> 00:08:41,116
that your user can
quickly get back to them.


156
00:08:41,926 --> 00:08:45,446
Now, a naïve approach,
again, might be to use NSURLs


157
00:08:45,446 --> 00:08:48,686
to store a recents list of the
recently accessed documents,


158
00:08:48,786 --> 00:08:51,416
but this suffers from
many similar pitfalls


159
00:08:51,416 --> 00:08:53,536
as NSFileManager did earlier.


160
00:08:54,826 --> 00:08:55,996
Let's take a quick look at this.


161
00:08:56,866 --> 00:09:00,566
So let's say we store a list
of NSURLs to our documents


162
00:09:00,566 --> 00:09:02,326
which are the recently
accessed documents.


163
00:09:02,916 --> 00:09:06,416
But then the iCloud Drive daemon
moves the document while our app


164
00:09:06,596 --> 00:09:09,616
isn't running, such as here,
it moved it into a new folder.


165
00:09:10,816 --> 00:09:14,756
The NSURL is now a broken
reference and will not resolve


166
00:09:14,756 --> 00:09:17,376
to the updated location
of our document on disk


167
00:09:18,096 --> 00:09:22,056
so we can't really rely on
this to store our recents list.


168
00:09:23,556 --> 00:09:26,896
The correct way to
store a recents list is


169
00:09:26,896 --> 00:09:28,656
with security scoped bookmarks.


170
00:09:30,186 --> 00:09:33,996
Here, if we store a security
scoped bookmark to this document


171
00:09:34,566 --> 00:09:37,846
and again the iCloud Drive
daemon moves this document


172
00:09:37,846 --> 00:09:42,786
into a folder, the bookmark will
update automatically to resolve


173
00:09:42,786 --> 00:09:45,816
to the document's new
location on disk so we want


174
00:09:45,816 --> 00:09:48,676
to use security scope bookmarks
when managing our recents list.


175
00:09:48,946 --> 00:09:53,596
And with that, I would like
to get into a quick demo


176
00:09:53,676 --> 00:09:56,406
for how we're going to
manage our recents list


177
00:09:56,506 --> 00:09:57,976
and how to load thumbnails.


178
00:10:07,156 --> 00:10:07,356
All right.


179
00:10:07,596 --> 00:10:09,596
Let's go ahead and launch
up our sample code here.


180
00:10:10,106 --> 00:10:13,356
And we haven't loaded
thumbnails yet into our app.


181
00:10:15,246 --> 00:10:19,216
But for example, if I open the
iCloud Drive app using the new


182
00:10:19,216 --> 00:10:22,336
Multitasking feature, we
can tell that the thumbnails


183
00:10:22,336 --> 00:10:25,996
for these documents are
actually there, so we just need


184
00:10:25,996 --> 00:10:28,796
to load them to display
in our app's UI.


185
00:10:29,486 --> 00:10:38,066
Let's go ahead and
look at this in code.


186
00:10:38,066 --> 00:10:38,326
All right.


187
00:10:38,326 --> 00:10:40,846
So first of all, let's
talk about how we're going


188
00:10:40,846 --> 00:10:42,826
to manage our recents
list in code.


189
00:10:45,486 --> 00:10:50,586
The important thing here is


190
00:10:50,966 --> 00:10:56,936
when we're saving our object
here we are bookmarking this


191
00:10:56,936 --> 00:11:00,166
document using the 'bookmark
data with options' method


192
00:11:00,166 --> 00:11:02,616
and it is important here
to pass the 'suitable


193
00:11:02,616 --> 00:11:04,396
for bookmark file' option


194
00:11:04,666 --> 00:11:06,526
so that we can resolve
it properly later.


195
00:11:08,436 --> 00:11:10,486
Then on our app launch
we just have


196
00:11:10,486 --> 00:11:12,796
to call the NSURL
Constructor method


197
00:11:12,796 --> 00:11:15,826
of 'by resolving bookmark
data' with the bookmark


198
00:11:15,826 --> 00:11:19,296
that we have saved
previously, and we'll get a URL,


199
00:11:19,296 --> 00:11:22,396
which is the updated location
of our document on disk.


200
00:11:23,986 --> 00:11:27,746
Now, it is important here that
with this returned URL we need


201
00:11:27,746 --> 00:11:30,786
to call 'start accessing
security scope for resource,


202
00:11:31,186 --> 00:11:33,526
in case this document
is a document


203
00:11:33,526 --> 00:11:36,106
in another app's container,
or we won't be able


204
00:11:36,106 --> 00:11:38,126
to read this document because --


205
00:11:38,186 --> 00:11:39,446
read properties from
this document


206
00:11:39,656 --> 00:11:42,606
because this will
extend our Sandbox


207
00:11:42,926 --> 00:11:44,696
to have access to this document.


208
00:11:47,446 --> 00:11:51,386
Now for thumbnails we've written
this great thumbnail cache class


209
00:11:51,386 --> 00:11:55,946
for you in the sample
code, which is going


210
00:11:55,946 --> 00:11:59,716
to cache our thumbnails
for our app.


211
00:12:01,006 --> 00:12:03,446
It takes care of a lot of
the heavy lifting for us,


212
00:12:03,446 --> 00:12:06,746
such as scheduling, thumbnail
loading on background queues,


213
00:12:06,746 --> 00:12:10,756
et cetera, and notifying
our CollectionView


214
00:12:10,756 --> 00:12:12,346
that we need to reload cells.


215
00:12:13,176 --> 00:12:14,626
Now the only thing we
have not implemented


216
00:12:14,626 --> 00:12:17,186
yet is just this block
of code right here,


217
00:12:17,436 --> 00:12:20,766
which will load our
thumbnail from disk.


218
00:12:21,286 --> 00:12:24,746
All we have to do is
call the NSURL method


219
00:12:24,746 --> 00:12:28,846
of 'get promised item resource
value for key' on the URL


220
00:12:28,846 --> 00:12:31,926
of the document with a
thumbnail dictionary key,


221
00:12:31,926 --> 00:12:33,576
and we'll get a dictionary
of thumbnails.


222
00:12:33,676 --> 00:12:37,346
Then we just need to extract
the UIImage from the dictionary


223
00:12:37,866 --> 00:12:41,986
and return it to our thumbnail
class so that we can display it.


224
00:12:41,986 --> 00:12:43,376
Now it is important here


225
00:12:43,376 --> 00:12:47,016
to use the 'get promised item
resource value for key' instead


226
00:12:47,016 --> 00:12:49,326
of the 'get resource
value for key' method


227
00:12:49,846 --> 00:12:52,626
because the document may not
have its content available


228
00:12:53,026 --> 00:12:58,476
locally yet, so we can
display our thumbnail even


229
00:12:58,476 --> 00:13:00,206
if it is not downloaded yet.


230
00:13:02,116 --> 00:13:05,496
Then all we have
to do is redeploy


231
00:13:06,306 --> 00:13:10,236
and we have some great
thumbnails in our app,


232
00:13:11,266 --> 00:13:14,796
which load in the background so
they don't block our scrolling


233
00:13:14,796 --> 00:13:17,876
as we scroll through
our sample code.


234
00:13:18,806 --> 00:13:19,316
All right.


235
00:13:19,316 --> 00:13:27,776
Let's get back to the slides.


236
00:13:27,776 --> 00:13:30,556
So what have we learned about
building a Document Browser?


237
00:13:31,386 --> 00:13:33,776
First, we learned that we want


238
00:13:33,776 --> 00:13:37,176
to discover our documents using
NSMetadataQuery as opposed


239
00:13:37,176 --> 00:13:41,916
to other methods so that we
can discover all the documents


240
00:13:41,916 --> 00:13:43,186
that are available to our app.


241
00:13:44,156 --> 00:13:46,896
Second, we have learned that
we want to display thumbnails


242
00:13:46,896 --> 00:13:50,106
in our app's UI so that we
can build some great UIs


243
00:13:50,106 --> 00:13:53,046
and our users can just quickly
identify the documents they're


244
00:13:53,046 --> 00:13:53,586
working on.


245
00:13:54,536 --> 00:13:56,306
And finally, we have
learned we want


246
00:13:56,306 --> 00:13:58,646
to store our recents list
using bookmarks as opposed


247
00:13:58,646 --> 00:14:01,676
to other methods so that
users can quickly get back


248
00:14:01,676 --> 00:14:03,756
to the documents that
they're currently working on.


249
00:14:04,286 --> 00:14:06,516
And with that, I would like
to welcome Johannes Fortmann


250
00:14:06,516 --> 00:14:07,746
to the stage to talk to you


251
00:14:07,746 --> 00:14:09,576
about building the
document editor.


252
00:14:10,516 --> 00:14:15,696
[ Applause ]


253
00:14:16,196 --> 00:14:17,846
>> JOHANNES FORTMANN:
Thank you, Mike.


254
00:14:17,846 --> 00:14:19,376
Now, Mike has shown you how


255
00:14:19,376 --> 00:14:22,556
to build a beautiful Document
Browser in your application.


256
00:14:23,076 --> 00:14:26,626
And of course that's something
that's very nice for our app


257
00:14:26,626 --> 00:14:28,356
but equally as important


258
00:14:28,356 --> 00:14:32,416
or possibly even more important
is the part of your application


259
00:14:32,416 --> 00:14:36,436
where your user can go and
load and edit documents.


260
00:14:36,756 --> 00:14:40,126
After all, that's why they're
trying to use your application.


261
00:14:41,246 --> 00:14:45,076
Now, before we go into the
whole loading and writing


262
00:14:45,076 --> 00:14:48,876
out change documents, we
have to take a quick detour


263
00:14:49,226 --> 00:14:51,646
into a concept called
file coordination.


264
00:14:52,696 --> 00:14:54,766
Now, what am I talking
about here?


265
00:14:55,896 --> 00:15:01,646
Well, in our new modern
multitasking-based world we have


266
00:15:01,976 --> 00:15:05,126
this concept of multiple
apps being able to access


267
00:15:05,126 --> 00:15:07,026
and display the same file.


268
00:15:07,306 --> 00:15:11,876
As an example we could have the
iCloud Drive app displaying an


269
00:15:11,876 --> 00:15:15,406
overview of all the files that
are in your document container


270
00:15:15,486 --> 00:15:18,666
at the same time as
your app is running


271
00:15:18,776 --> 00:15:21,576
and the user is actually
editing this document.


272
00:15:22,576 --> 00:15:26,086
Or as a more conservative
approach,


273
00:15:26,396 --> 00:15:30,476
even if your user is not
actually using this two-up view


274
00:15:30,476 --> 00:15:34,086
of Multitasking, there is
always going to be the case


275
00:15:34,446 --> 00:15:38,556
that the iCloud Drive
syncing daemon may want


276
00:15:38,556 --> 00:15:41,136
to access the document
to sync it


277
00:15:41,136 --> 00:15:44,046
up to the cloud while
your user is editing.


278
00:15:44,046 --> 00:15:46,826
In fact, that is a
really, really common case,


279
00:15:46,916 --> 00:15:49,656
because the user is in the
middle of editing the document,


280
00:15:50,226 --> 00:15:53,146
they're saving this
document to disk,


281
00:15:53,146 --> 00:15:56,816
and of course now it is changed,
so the iCloud Drive daemon wants


282
00:15:56,816 --> 00:15:59,436
to make sure that it is
up-to-date in the cloud.


283
00:16:00,416 --> 00:16:06,436
So that's a really common case.


284
00:16:06,576 --> 00:16:10,166
Let's have a look at this
specific case where your user is


285
00:16:10,166 --> 00:16:13,506
in the middle of editing
the document on disk.


286
00:16:14,336 --> 00:16:16,966
And the way this looks is that
your app is, of course, running.


287
00:16:17,576 --> 00:16:19,706
And the user is making
some edits


288
00:16:19,856 --> 00:16:22,816
and in the meantime your
application is going


289
00:16:23,016 --> 00:16:27,456
through auto-saving,
do periodical writes


290
00:16:27,646 --> 00:16:29,046
of this document to disk.


291
00:16:29,576 --> 00:16:31,846
So we're going to have
a write at some point,


292
00:16:32,566 --> 00:16:35,746
and at a later time we're going
to have like the user's editing,


293
00:16:35,746 --> 00:16:38,826
and changing the document, we're
going to have another write.


294
00:16:39,876 --> 00:16:43,146
Cool. Now let's just
assume for a moment


295
00:16:43,586 --> 00:16:45,656
that our user is
taking full advantage


296
00:16:45,656 --> 00:16:48,986
of the multitasking feature
and is at the same time


297
00:16:48,986 --> 00:16:51,306
as they're editing
this document,


298
00:16:51,526 --> 00:16:53,416
also launching another
application,


299
00:16:53,716 --> 00:16:57,756
and this other application
might have a previous reference


300
00:16:57,756 --> 00:17:01,596
to this document, and will
now immediately doing state


301
00:17:01,596 --> 00:17:05,546
restoration for example, try to
read this document from disk.


302
00:17:06,675 --> 00:17:11,036
Now as you can see here,
this is a bad situation


303
00:17:11,586 --> 00:17:14,786
because we're reading this
document at the same time


304
00:17:14,896 --> 00:17:17,296
as the other application
is writing it.


305
00:17:17,726 --> 00:17:19,406
Well, that's our
application actually.


306
00:17:19,886 --> 00:17:22,705
So we're going to get this
inconsistent read which,


307
00:17:22,705 --> 00:17:24,106
of course, is very unfortunate.


308
00:17:24,586 --> 00:17:26,336
We're in the middle of
writing this document


309
00:17:26,336 --> 00:17:28,386
at the same time the other
application is reading it.


310
00:17:28,996 --> 00:17:31,036
The data is halfway
written to disk.


311
00:17:31,036 --> 00:17:32,006
The other half is not.


312
00:17:32,606 --> 00:17:35,176
And the other app may
not know what to do


313
00:17:35,176 --> 00:17:36,916
with this weird,
inconsistent data.


314
00:17:37,596 --> 00:17:38,746
That's a bad situation.


315
00:17:39,266 --> 00:17:44,136
And likewise, even if we somehow
manage to live around this,


316
00:17:44,256 --> 00:17:46,606
after our second
write, remember,


317
00:17:46,606 --> 00:17:48,736
we're still in the first
application editing


318
00:17:48,736 --> 00:17:49,466
this document.


319
00:17:49,646 --> 00:17:54,256
The other application will
now still be displaying your


320
00:17:54,256 --> 00:17:58,886
document and this document
is now being displayed


321
00:17:58,886 --> 00:18:00,996
in an old version in
the other application,


322
00:18:00,996 --> 00:18:04,546
so we have got this issue
of having a stale display.


323
00:18:04,546 --> 00:18:08,006
And that is, of course,
very unfortunate.


324
00:18:08,556 --> 00:18:11,756
Now conveniently we have
two solutions for you here.


325
00:18:12,086 --> 00:18:14,396
And that is, first of all,


326
00:18:14,736 --> 00:18:16,646
we have this concept
of file coordination.


327
00:18:17,216 --> 00:18:21,466
File coordination is a
distributed reader/writer


328
00:18:21,466 --> 00:18:22,196
lock mechanism.


329
00:18:22,476 --> 00:18:26,786
And what that means is
that, while there can be


330
00:18:26,786 --> 00:18:29,726
at any time multiple
readers for a document,


331
00:18:30,216 --> 00:18:32,116
there can only ever
be one writer


332
00:18:32,116 --> 00:18:35,666
and the one writer excludes
all other readers from reading.


333
00:18:37,276 --> 00:18:39,606
That means that if both our
applications are using proper


334
00:18:39,606 --> 00:18:42,966
file coordination as they will
if they're using UIDocument,


335
00:18:43,316 --> 00:18:45,566
which implements
these mechanisms,


336
00:18:46,256 --> 00:18:51,546
then our read will
be moved to a time


337
00:18:51,546 --> 00:18:55,386
after our write has
finished and in


338
00:18:55,386 --> 00:18:58,726
such a way we have always
a consistent picture


339
00:18:58,726 --> 00:18:59,606
of this document.


340
00:19:00,316 --> 00:19:01,136
That's very nice.


341
00:19:02,296 --> 00:19:05,236
Now, there is another
mechanism I promised you too.


342
00:19:05,556 --> 00:19:08,276
And the other mechanism
here is NSFilePresentation.


343
00:19:08,786 --> 00:19:10,996
NSFilePresentation
is a distributed


344
00:19:10,996 --> 00:19:12,016
modification mechanism.


345
00:19:12,776 --> 00:19:16,796
What that means is that our file
coordination will automatically


346
00:19:17,156 --> 00:19:20,286
tell every other file
presenter that's been registered


347
00:19:20,286 --> 00:19:24,306
for your document that it
has been written to disk


348
00:19:24,426 --> 00:19:27,756
and that this file presenter
has to go and update itself.


349
00:19:29,036 --> 00:19:31,526
That way we immediately
get a notification


350
00:19:31,526 --> 00:19:35,446
after our second write and we
can be sure to update our UI.


351
00:19:36,806 --> 00:19:40,686
Cool. So that's how we
can be able to make sure


352
00:19:40,686 --> 00:19:43,886
that we have always a consistent
picture of our documents.


353
00:19:44,416 --> 00:19:45,716
But what documents?


354
00:19:46,246 --> 00:19:49,476
Of course, we first need to
create some documents to be able


355
00:19:49,476 --> 00:19:52,216
to actually display and
have the user edit them.


356
00:19:52,736 --> 00:19:53,726
So let's have a look at that.


357
00:19:54,786 --> 00:19:57,566
What are our goals in
creating these documents?


358
00:19:57,856 --> 00:20:01,276
Well, let's imagine as
our sample app implements,


359
00:20:01,276 --> 00:20:03,676
we have this little plus
button in the top right corner,


360
00:20:04,076 --> 00:20:07,046
and this plus button,
well, the user taps it,


361
00:20:07,196 --> 00:20:10,816
we will maybe show a
template dialogue, something,


362
00:20:11,066 --> 00:20:13,896
but in any case at some point
we'll create a new document.


363
00:20:14,566 --> 00:20:16,796
And our main goal here is


364
00:20:16,996 --> 00:20:22,806
to give the user a consistent
display that's up-to-date


365
00:20:22,806 --> 00:20:23,766
at all times.


366
00:20:24,286 --> 00:20:26,406
So it wouldn't help a lot


367
00:20:26,406 --> 00:20:28,226
if the user tapped
this little plus button


368
00:20:28,626 --> 00:20:31,536
and now we wouldn't get an
update in our Document Browser


369
00:20:31,536 --> 00:20:35,156
and the user is confused and
doesn't know what happened


370
00:20:35,156 --> 00:20:37,726
and will possibly tap the
plus button a few more times


371
00:20:37,726 --> 00:20:40,716
and now we have five
different new documents.


372
00:20:40,946 --> 00:20:46,806
Not good. Now that's the
situation that we might end


373
00:20:47,226 --> 00:20:51,816
up in without using file
coordination because, of course,


374
00:20:51,816 --> 00:20:55,046
what this means is that we
create a document on disk


375
00:20:55,046 --> 00:20:58,426
and at some point later the
iCloud Drive daemon notices


376
00:20:58,426 --> 00:21:01,886
that there is a new document
here and informs our app.


377
00:21:01,886 --> 00:21:06,226
But this delay can be half
a second or something,


378
00:21:06,306 --> 00:21:08,656
possibly even more if the
daemon is busy at this time.


379
00:21:09,496 --> 00:21:12,326
And this exact delay is
what we want to avoid.


380
00:21:12,996 --> 00:21:17,156
Now, conveniently, if you're
using a coordinated operation,


381
00:21:17,606 --> 00:21:19,626
this is done directly for you.


382
00:21:20,826 --> 00:21:25,866
The coordinated operation
works in conjunction


383
00:21:26,116 --> 00:21:28,526
with the NSMetadataQuery
that you're using


384
00:21:28,526 --> 00:21:34,696
to display documents in your
browser, and basically loops


385
00:21:34,696 --> 00:21:37,586
around after the
coordination has finished


386
00:21:38,026 --> 00:21:40,286
and immediately tells
your running query


387
00:21:40,866 --> 00:21:43,046
that there's a new
updated document.


388
00:21:44,346 --> 00:21:46,886
That way we get rid
of this ugly delay.


389
00:21:48,306 --> 00:21:50,696
Of course, there's
another slight caveat here,


390
00:21:51,296 --> 00:21:53,706
which is that since
we're writing to disk,


391
00:21:53,706 --> 00:21:58,886
we're writing anything to disk,
it can take a bit of time.


392
00:21:58,886 --> 00:22:03,156
And of course doing any
operation that can take a bit


393
00:22:03,156 --> 00:22:06,166
of time on the main
queue is unfortunate


394
00:22:06,206 --> 00:22:09,416
because it can block the
main queue and thus look


395
00:22:09,416 --> 00:22:11,636
like a stutter in your
application to the user.


396
00:22:15,556 --> 00:22:18,606
Now, the solution to
this is, of course, easy.


397
00:22:19,076 --> 00:22:20,586
We want to use a
background queue


398
00:22:20,586 --> 00:22:25,986
to dispatch this coordinated
operation and make sure


399
00:22:25,986 --> 00:22:31,506
that our operation is not
blocking the main thread.


400
00:22:32,336 --> 00:22:34,176
Now conveniently we're still --


401
00:22:34,176 --> 00:22:36,046
since we're using this
coordinated operation --


402
00:22:36,436 --> 00:22:40,946
we're still getting the
immediately updated display


403
00:22:40,946 --> 00:22:45,326
in our UI because our
NSMetadataQuery is still


404
00:22:45,326 --> 00:22:46,326
updated directly.


405
00:22:47,236 --> 00:22:49,456
You don't even have to
bounce this information back


406
00:22:49,496 --> 00:22:51,846
to the main queue
because we're updating the


407
00:22:51,846 --> 00:22:54,086
NSMetadataQuery directly.


408
00:22:54,316 --> 00:22:59,206
Cool. Now, another common
operation is deleting a file.


409
00:23:00,196 --> 00:23:03,636
That's a totally reasonable
thing for your user to do.


410
00:23:03,636 --> 00:23:04,816
They're done with this document.


411
00:23:04,816 --> 00:23:05,766
They want to get rid of it


412
00:23:06,136 --> 00:23:07,696
so it doesn't clutter
up their workspace.


413
00:23:08,246 --> 00:23:12,226
And the basic idea behind
deletion is exactly the same.


414
00:23:12,776 --> 00:23:17,756
We'll coordinate a write
on our background queue,


415
00:23:18,006 --> 00:23:21,896
perform the deletion during this
write, and immediately loop back


416
00:23:21,936 --> 00:23:24,576
to the main queue through
the NSMetadataQuery


417
00:23:24,576 --> 00:23:26,596
to update in time.


418
00:23:28,636 --> 00:23:33,846
Cool. So that's how you manage
creating and deleting documents


419
00:23:33,906 --> 00:23:35,966
on your background queue.


420
00:23:36,346 --> 00:23:40,556
So let's have a look at
what you actually want


421
00:23:40,556 --> 00:23:42,266
to do with these documents.


422
00:23:42,956 --> 00:23:45,726
And that, of course, is
you want to display them,


423
00:23:46,506 --> 00:23:48,556
meaning you want to
read and write them.


424
00:23:49,386 --> 00:23:52,656
Now, we strongly,
strongly, strongly suggest


425
00:23:52,656 --> 00:23:55,486
that you use UIDocument for
reading and writing documents.


426
00:23:56,026 --> 00:24:00,846
UIDocument implements both
the NSFileCoordination calls


427
00:24:01,016 --> 00:24:04,036
to make sure that at
any time you are reading


428
00:24:04,036 --> 00:24:06,046
and writing documents
in a coordinated manner,


429
00:24:06,046 --> 00:24:12,106
as well as implementing
NSFilePresentation to make sure


430
00:24:12,306 --> 00:24:14,026
that you can be immediately
informed


431
00:24:14,026 --> 00:24:15,396
that this document has changed


432
00:24:15,396 --> 00:24:17,596
and can update it
in your display.


433
00:24:18,946 --> 00:24:20,916
So let's have a look at
how to read a document.


434
00:24:21,646 --> 00:24:25,446
You create a UIDocument object
and simply call the 'open


435
00:24:25,446 --> 00:24:28,306
with completion' method on
this UIDocument instance.


436
00:24:29,026 --> 00:24:33,416
And what this method does is it
will take out a coordinated read


437
00:24:33,686 --> 00:24:35,376
on a background worker queue.


438
00:24:36,456 --> 00:24:39,266
That way your application
stays perfectly performant


439
00:24:39,266 --> 00:24:41,176
and responsive, while


440
00:24:41,176 --> 00:24:45,306
at the same time your document
is going to read itself in.


441
00:24:45,636 --> 00:24:49,526
Now all that is there
that's left to do for you,


442
00:24:49,836 --> 00:24:52,286
is that you implement the
'load from contents' method.


443
00:24:52,716 --> 00:24:55,676
And this method will
simply get called


444
00:24:55,676 --> 00:24:58,306
within the coordinated
read so it is encapsulated


445
00:24:58,306 --> 00:25:01,666
by this coordinated read,
meaning it is totally safe


446
00:25:01,666 --> 00:25:03,716
to read anything
you want in there,


447
00:25:03,716 --> 00:25:05,306
from the document, mind you.


448
00:25:06,136 --> 00:25:09,836
And all you have to do is
basically take the contents


449
00:25:09,836 --> 00:25:14,166
and fill in your
document data from them.


450
00:25:14,456 --> 00:25:17,886
Now, there's another method here


451
00:25:18,126 --> 00:25:20,526
that you can alternatively
choose to implement,


452
00:25:21,506 --> 00:25:25,806
which instead of taking a blob
of data, it takes an NSURL


453
00:25:25,806 --> 00:25:30,476
and you can use that method to,
for example, stream document,


454
00:25:30,476 --> 00:25:34,466
there may be situations where
that's more reasonable for you


455
00:25:34,466 --> 00:25:37,416
to do, because, for
example, the document format


456
00:25:37,416 --> 00:25:40,226
on disk is very different
than what you want in memory.


457
00:25:41,076 --> 00:25:44,796
Now, after this is done,
we will simply loop back


458
00:25:44,796 --> 00:25:47,546
to the main queue and
call the completion block


459
00:25:47,546 --> 00:25:49,176
that you provided for us.


460
00:25:49,246 --> 00:25:53,696
And in that completion block,
you can go and, for example,


461
00:25:53,696 --> 00:25:57,536
push your new interface
updated for your document.


462
00:25:59,856 --> 00:26:03,386
Cool. So that's how
reading a document works.


463
00:26:03,886 --> 00:26:07,066
But as you remember,
Mike told you


464
00:26:07,066 --> 00:26:09,026
about this concept
called promises.


465
00:26:09,786 --> 00:26:11,966
And a promise is
basically a file


466
00:26:12,286 --> 00:26:15,306
that the iCloud Drive
daemon promises


467
00:26:15,396 --> 00:26:20,496
to your app is actually there,
but it is not yet downloaded.


468
00:26:21,466 --> 00:26:24,116
And what that means
is that a read


469
00:26:24,116 --> 00:26:26,336
on this document may
trigger a download.


470
00:26:27,536 --> 00:26:32,086
Now, of course if you've
lived in the real world


471
00:26:32,136 --> 00:26:37,426
as we all have, obviously,
downloads can be terribly slow


472
00:26:37,426 --> 00:26:41,606
at times, and depending how
your document size looks,


473
00:26:42,266 --> 00:26:43,356
this may take a while.


474
00:26:43,986 --> 00:26:48,796
And your user may perceive
this download as a failing


475
00:26:48,796 --> 00:26:51,736
of your app, which is totally
unfair, it is not your fault


476
00:26:51,736 --> 00:26:54,026
that this download is being done


477
00:26:54,026 --> 00:26:56,906
over a slow network
connection and takes a while.


478
00:26:57,696 --> 00:27:02,836
And so, for you, new in
iOS 9, we expose a way


479
00:27:02,836 --> 00:27:04,606
to display progress


480
00:27:04,606 --> 00:27:09,656
on UIDocuments using the new
NSProgressReporting protocol.


481
00:27:10,656 --> 00:27:12,626
Now, implementing
this is very simple.


482
00:27:13,126 --> 00:27:16,966
The NSProgressReporting protocol
exposes a progress property


483
00:27:16,966 --> 00:27:20,666
on your UIDocument instance, and
this progress property is filled


484
00:27:20,666 --> 00:27:24,876
in by us to display to you
what kind of progress we have.


485
00:27:25,536 --> 00:27:28,096
So it is basically
a simple percentage


486
00:27:28,096 --> 00:27:29,116
of the download state.


487
00:27:30,356 --> 00:27:35,996
Now, we expose this NSProgress
property through a state change,


488
00:27:36,406 --> 00:27:41,266
so the way that you display
this is that you listen


489
00:27:41,266 --> 00:27:44,996
for a state change notification
on your document state,


490
00:27:46,126 --> 00:27:50,576
and when the state changes you
look at the new flag that says,


491
00:27:50,576 --> 00:27:52,986
'hey, I have a progress
that I'm exposing here.'


492
00:27:52,986 --> 00:27:55,796
And then you simply
display this progress.


493
00:27:56,446 --> 00:28:00,316
Now, displaying a progress on,
for example, a UIProgress view,


494
00:28:00,626 --> 00:28:02,446
used to be a little
bit complicated


495
00:28:02,876 --> 00:28:05,006
because it exposes a
property that you have


496
00:28:05,056 --> 00:28:08,716
to key value observe to put
it into this progress view.


497
00:28:09,376 --> 00:28:13,616
And also we realized that, of
course, and also new in iOS 9,


498
00:28:13,856 --> 00:28:17,256
we exposed an observe progress
property on the UIProgress view


499
00:28:17,696 --> 00:28:22,336
that will enable you to just
plump the NSProgress directly


500
00:28:22,336 --> 00:28:23,246
into the progress view.


501
00:28:23,776 --> 00:28:25,536
You simply assign the NSProgress


502
00:28:25,876 --> 00:28:28,386
to the progress view's
'observe progress' property


503
00:28:28,576 --> 00:28:31,876
and it will automatically
update its count [applause].


504
00:28:33,166 --> 00:28:34,936
That's very convenient for you.


505
00:28:38,196 --> 00:28:43,136
Thanks. All that's left
for you to do is to listen


506
00:28:43,136 --> 00:28:46,356
for the next state change
which signals, 'hey,


507
00:28:46,526 --> 00:28:47,856
we're done with this progress.'


508
00:28:48,716 --> 00:28:50,266
And at that point you want


509
00:28:50,266 --> 00:28:54,346
to probably undisplay your
UIProgress view and get ready


510
00:28:54,346 --> 00:28:57,246
for displaying the new
document controller.


511
00:28:58,806 --> 00:29:01,676
Cool. So that's reading
documents.


512
00:29:01,876 --> 00:29:03,716
Of course, we also want
to write documents.


513
00:29:04,356 --> 00:29:08,036
And writing documents is very
symmetric to reading documents.


514
00:29:08,716 --> 00:29:12,126
The way we write documents
is that we also take


515
00:29:12,126 --> 00:29:14,136
out a coordinated
file coordination


516
00:29:14,136 --> 00:29:15,136
on a background queue.


517
00:29:15,786 --> 00:29:18,056
Now, this one is
slightly different


518
00:29:18,056 --> 00:29:19,476
in that you're not starting it


519
00:29:19,966 --> 00:29:23,606
but rather UIDocument
will automatically notice


520
00:29:24,166 --> 00:29:27,826
that now is a convenient
time to save the document.


521
00:29:28,136 --> 00:29:31,896
For example, because for a while
there have not been any edits


522
00:29:31,966 --> 00:29:34,466
incoming, or it has been a time


523
00:29:34,466 --> 00:29:36,536
since the document
was last saved,


524
00:29:37,606 --> 00:29:40,746
or the user is putting your
application into the background


525
00:29:40,746 --> 00:29:42,486
so now would be a
really convenient time


526
00:29:42,486 --> 00:29:43,456
to save the document.


527
00:29:44,106 --> 00:29:47,676
But basically the way this
is done is very symmetrical


528
00:29:47,676 --> 00:29:50,296
to reading a document, we
simply call the 'contents


529
00:29:50,296 --> 00:29:53,036
for type' method on your
UIDocument instance,


530
00:29:53,156 --> 00:29:55,386
and you fill in the
NSData instance


531
00:29:55,456 --> 00:29:56,846
that you then return from there.


532
00:29:57,866 --> 00:29:58,316
Very nice.


533
00:29:58,706 --> 00:30:00,536
There is one additional
thing here,


534
00:30:00,536 --> 00:30:03,076
and that is that this
is a convenient time


535
00:30:03,076 --> 00:30:04,006
to write a thumbnail.


536
00:30:04,756 --> 00:30:08,836
As Mike told you, for some very
specific document formats we'll


537
00:30:08,836 --> 00:30:12,936
automatically generate
thumbnails, but chances are


538
00:30:12,936 --> 00:30:16,166
that you're not building the
exact thing that we're building,


539
00:30:16,696 --> 00:30:21,406
and thus if you're not
building, using any of our very,


540
00:30:21,406 --> 00:30:25,346
very well-known formats
like images or simple text,


541
00:30:25,956 --> 00:30:28,896
then you will want to out
write thumbnails on your own.


542
00:30:29,926 --> 00:30:32,466
Now, the way you do this is


543
00:30:32,546 --> 00:30:35,106
that we will call the
'file attributes to write


544
00:30:35,106 --> 00:30:37,876
to your own' method
on your UIDocument.


545
00:30:38,446 --> 00:30:42,836
And in that method you simply
return a UIImage instance


546
00:30:42,936 --> 00:30:45,066
as part of your attribute
dictionary.


547
00:30:45,676 --> 00:30:49,746
And this instance we'll
write out contained


548
00:30:49,746 --> 00:30:53,506
in the same coordinated write
that's writing your document.


549
00:30:54,176 --> 00:30:56,346
That means that if the user has


550
00:30:56,346 --> 00:31:01,936
at this time the Document
Browser up in a separate pane,


551
00:31:02,206 --> 00:31:04,346
they'll not see an
inconsistent state.


552
00:31:05,106 --> 00:31:08,466
Cool. The important thing
here is to keep in mind


553
00:31:08,466 --> 00:31:10,266
that this is being called
on a background queue.


554
00:31:10,816 --> 00:31:12,576
And what that means
is that you cannot


555
00:31:12,576 --> 00:31:16,156
under any circumstances
use UIViews to write --


556
00:31:16,156 --> 00:31:17,676
to render your thumbnail.


557
00:31:18,216 --> 00:31:21,306
UIViews are not thread safe
so you have to make sure


558
00:31:21,386 --> 00:31:26,016
that your thumbnail rendering is
being done using, for example,


559
00:31:26,016 --> 00:31:28,086
Core Graphics, or textKit,


560
00:31:28,446 --> 00:31:30,996
or any of the other thread
safe rendering mechanisms


561
00:31:30,996 --> 00:31:33,066
that we provide on our platform.


562
00:31:33,176 --> 00:31:35,656
In iOS 8, the only mechanism


563
00:31:35,916 --> 00:31:38,546
to access a document
was through a copy.


564
00:31:38,546 --> 00:31:42,236
And the reason for that
is that applications


565
00:31:42,276 --> 00:31:45,006
in general do not have access
to each other's Sandbox.


566
00:31:45,386 --> 00:31:48,986
So if we have two application
Sandboxes, the only way


567
00:31:49,356 --> 00:31:53,366
to move a document from a
Sandbox to another Sandbox was


568
00:31:53,656 --> 00:31:56,276
that the first application
caused a copy to be made


569
00:31:56,326 --> 00:31:58,146
in the other application
Sandbox.


570
00:31:58,746 --> 00:32:02,676
Now, we relaxed this thing
a little bit through the use


571
00:32:02,676 --> 00:32:04,536
of the 'UIDocument
Menu View Controller,


572
00:32:05,006 --> 00:32:08,876
which allowed your application
to do a pull of a document


573
00:32:08,876 --> 00:32:10,306
in another application's
container.


574
00:32:11,116 --> 00:32:15,536
But in general you could
not simply open a document.


575
00:32:16,196 --> 00:32:19,306
And every open of this
document would cause a copy.


576
00:32:20,266 --> 00:32:22,736
Now, of course, doing all


577
00:32:22,736 --> 00:32:24,676
of these copies is
very inconvenient,


578
00:32:24,726 --> 00:32:27,756
because now you have a
copy of your document


579
00:32:28,096 --> 00:32:30,576
in the other application's
container and the user is going


580
00:32:30,576 --> 00:32:33,216
to modify it so you have a
second version of this document.


581
00:32:33,686 --> 00:32:36,576
And now, for example,
the user is going to want


582
00:32:36,576 --> 00:32:39,626
to open this document
back in your application


583
00:32:40,166 --> 00:32:42,776
and that causes a
third copy to be made.


584
00:32:43,206 --> 00:32:45,386
Now you have these
three different versions


585
00:32:45,386 --> 00:32:46,716
of documents floating around.


586
00:32:47,396 --> 00:32:50,156
And that's very unfortunate,
because the user gets confused


587
00:32:50,156 --> 00:32:52,866
and doesn't know which
version is the most recent.


588
00:32:54,296 --> 00:32:56,606
And it is just not
a great situation.


589
00:32:57,936 --> 00:33:01,386
Now in iOS 9, we have this
nice new mechanism called 'Open


590
00:33:01,386 --> 00:33:01,936
in place.'


591
00:33:02,876 --> 00:33:05,876
And what this means is
that your application,


592
00:33:05,976 --> 00:33:08,256
through use of the document
interaction controller,


593
00:33:08,866 --> 00:33:14,546
can grant another application
access to a document.


594
00:33:15,346 --> 00:33:18,706
And this document is
the exact same document,


595
00:33:18,706 --> 00:33:22,426
this is not a copy but rather
a reference to this document.


596
00:33:23,556 --> 00:33:24,696
What that means is, of course,


597
00:33:24,696 --> 00:33:28,236
that the other application
is able to simply make edits


598
00:33:28,306 --> 00:33:30,626
that are then, through the
magic of file presentation,


599
00:33:30,676 --> 00:33:37,096
are directly reflected in your
application, which, of course,


600
00:33:37,096 --> 00:33:38,406
is very nice for the user.


601
00:33:38,646 --> 00:33:41,086
And this includes
files that are open


602
00:33:41,086 --> 00:33:43,556
from the iCloud Drive
app and from Spotlight.


603
00:33:44,496 --> 00:33:48,716
That means that any time your
user browses their documents


604
00:33:49,006 --> 00:33:53,796
in the iCloud Drive app, we
will directly be able to open


605
00:33:53,796 --> 00:33:55,076
that document in place.


606
00:33:56,236 --> 00:33:59,126
The mechanism behind
this is very similar


607
00:33:59,126 --> 00:34:01,826
to the mechanism used by the
'Document Menu View Controller.'


608
00:34:02,466 --> 00:34:04,156
That means that if your
application is already


609
00:34:04,156 --> 00:34:06,936
supporting that, it
is super easy for you


610
00:34:06,936 --> 00:34:08,565
to also support this mechanism.


611
00:34:09,306 --> 00:34:12,646
And even if you're not
currently supporting the


612
00:34:12,646 --> 00:34:15,295
UIMenuViewController,
it is super easy for you


613
00:34:15,295 --> 00:34:19,025
to adopt this, because there
is really no big magic here.


614
00:34:19,025 --> 00:34:20,926
You get a URL and put it


615
00:34:20,926 --> 00:34:23,696
into a UIDocument instance
that's you then display.


616
00:34:24,136 --> 00:34:29,356
Let's have a quick look at
how you want to support this.


617
00:34:29,976 --> 00:34:31,286
As I said, it is super simple.


618
00:34:31,746 --> 00:34:33,916
First of all, you have to
tell us that you support it.


619
00:34:34,476 --> 00:34:36,056
Your app, remember,
is not actually,


620
00:34:36,146 --> 00:34:39,216
possibly it may not be launched
at the time we're trying


621
00:34:39,216 --> 00:34:42,065
to figure out whether we want
to open this file in place.


622
00:34:42,136 --> 00:34:43,616
So you have to tell
us beforehand.


623
00:34:44,275 --> 00:34:48,786
And you do that by adopting the
'LS Supports Opening Documents


624
00:34:48,786 --> 00:34:50,795
In Place' key in
your Info.plist.


625
00:34:51,186 --> 00:34:53,076
You simply set that
to yes or true,


626
00:34:53,076 --> 00:34:55,206
depending on whether you
are Objective-C or Swift.


627
00:34:55,946 --> 00:35:01,476
And that tells us that
your application is able


628
00:35:01,476 --> 00:35:02,346
to handle this.


629
00:35:03,146 --> 00:35:05,886
Now there is also a bit of
code you'll have to write,


630
00:35:06,546 --> 00:35:09,096
and that comes in the form
of a new delegate method.


631
00:35:10,096 --> 00:35:10,856
How does that look?


632
00:35:11,616 --> 00:35:15,026
Well, let's say you already
are opening documents here.


633
00:35:15,596 --> 00:35:17,846
And it is a reasonable
assumption because, well,


634
00:35:17,846 --> 00:35:19,086
you're a document-based app.


635
00:35:19,366 --> 00:35:21,726
So you must be implementing
a method very similar


636
00:35:21,726 --> 00:35:23,916
to the one that we see here.


637
00:35:24,496 --> 00:35:28,256
Your method currently
must be getting an NSURL,


638
00:35:29,136 --> 00:35:32,366
and since that NSURL
is a temporary copy


639
00:35:32,366 --> 00:35:35,606
that the system made for
your app, you have to be able


640
00:35:35,606 --> 00:35:38,586
to copy this into
your own container


641
00:35:38,586 --> 00:35:40,686
and then open this copied file.


642
00:35:41,116 --> 00:35:46,306
And this is what this small
chunk of code here does.


643
00:35:46,866 --> 00:35:49,456
Now, the first thing is to
adopt our new method here.


644
00:35:50,246 --> 00:35:53,326
And this new method is very
similar to the old one.


645
00:35:53,766 --> 00:35:56,426
It simply takes an
options dictionary


646
00:35:56,996 --> 00:36:01,296
that encapsulates the parameters
that the previous method has.


647
00:36:01,916 --> 00:36:05,086
And, importantly, one of
these parameters is the 'open


648
00:36:05,086 --> 00:36:05,846
in place' key.


649
00:36:07,076 --> 00:36:10,896
Now, all you have to do is have
a look at whether this 'open


650
00:36:10,896 --> 00:36:16,276
in place' key is actually
true, and if this key is true,


651
00:36:16,276 --> 00:36:18,356
then your application should
open this file in place.


652
00:36:18,796 --> 00:36:20,836
That means it should
not make a copy.


653
00:36:21,636 --> 00:36:23,366
Simple, you just
stop doing something


654
00:36:23,366 --> 00:36:24,586
that you must have
been doing before.


655
00:36:25,346 --> 00:36:29,856
And then now that you have
this URL, all you have


656
00:36:29,856 --> 00:36:33,616
to do is go ahead and open it
whichever way you were opening


657
00:36:33,616 --> 00:36:34,196
it before.


658
00:36:34,736 --> 00:36:38,656
And that's how simple it is
to support open in place.


659
00:36:40,476 --> 00:36:43,006
Cool. Let's summarize what
we have learned today.


660
00:36:43,916 --> 00:36:47,406
We have seen how to make your
app very performance responsive


661
00:36:47,406 --> 00:36:53,346
and beautiful using
NSMetadataQuery to display a set


662
00:36:53,346 --> 00:36:58,126
of documents and to update
these documents in time


663
00:36:58,206 --> 00:36:59,746
when changes come
in from the cloud.


664
00:37:00,086 --> 00:37:02,066
We have seen how
to use bookmarks


665
00:37:02,406 --> 00:37:06,006
to implement a recents
mechanism that allows your users


666
00:37:06,006 --> 00:37:08,896
to quickly go back to the
state that they were before --


667
00:37:08,896 --> 00:37:09,886
that they were in before.


668
00:37:10,486 --> 00:37:12,726
And of course, something
we didn't talk about,


669
00:37:12,726 --> 00:37:14,456
but which is entirely
reasonable,


670
00:37:14,656 --> 00:37:17,206
you can also use bookmarks to
implement state restoration,


671
00:37:17,696 --> 00:37:20,256
which allows your users
to directly go back


672
00:37:20,256 --> 00:37:21,746
to the previous state
that they were in.


673
00:37:22,126 --> 00:37:24,856
We have seen how
to use thumbnails


674
00:37:24,856 --> 00:37:26,176
to make your application
beautiful,


675
00:37:26,536 --> 00:37:30,386
and how to implement
progress display to make sure


676
00:37:30,386 --> 00:37:32,376
that your user is always
aware of what happens


677
00:37:32,376 --> 00:37:33,246
in their applications.


678
00:37:33,336 --> 00:37:36,166
And last but not least, we
have seen how easy it is


679
00:37:36,166 --> 00:37:37,476
to implement open-in-place.


680
00:37:38,136 --> 00:37:41,456
Open-in-place is a great new
mechanism that allows your users


681
00:37:41,746 --> 00:37:47,686
to directly open documents in
your application without having


682
00:37:47,686 --> 00:37:48,736
to make multiple copies.


683
00:37:50,426 --> 00:37:55,026
Now all of these concepts
are beautifully displayed


684
00:37:55,026 --> 00:37:57,156
in a sample code that
we published today.


685
00:37:57,156 --> 00:37:59,436
And the sample code is
basically the application


686
00:37:59,436 --> 00:38:01,416
that Mike showed you
previously in the demo.


687
00:38:01,906 --> 00:38:03,686
It implements all
of these features


688
00:38:04,146 --> 00:38:09,686
that are creating documents,
displaying documents


689
00:38:09,716 --> 00:38:14,116
in a Document Browser, animating
changes on these documents, and,


690
00:38:14,116 --> 00:38:18,086
of course, writing thumbnails,
and, of course, open-in-place.


691
00:38:19,056 --> 00:38:21,096
For technical support, we would


692
00:38:21,096 --> 00:38:22,716
like to direct you
to our forums.


693
00:38:23,676 --> 00:38:26,096
And we also have
amazing documentation


694
00:38:26,096 --> 00:38:28,516
under the link that
you see here.


695
00:38:28,516 --> 00:38:30,456
If you're interested
in learning more


696
00:38:30,456 --> 00:38:33,446
about using the 'UIDocument
Menu View Controller'


697
00:38:33,966 --> 00:38:38,006
to implement the pull mechanism
as opposed to the pull mechanism


698
00:38:38,006 --> 00:38:39,396
that open-in-place implements,


699
00:38:39,896 --> 00:38:42,496
so that your application
can pull documents


700
00:38:42,496 --> 00:38:45,346
from another application's
container,


701
00:38:45,946 --> 00:38:47,846
or if you're generally
interested in how


702
00:38:47,846 --> 00:38:50,206
to implement UIDocument-based
applications,


703
00:38:50,656 --> 00:38:53,276
we'd like to point you to
our session from last year,


704
00:38:53,276 --> 00:38:58,186
that's session 234 last
year, and, of course,


705
00:38:58,186 --> 00:38:59,286
that's online as well.


706
00:39:00,056 --> 00:39:01,616
And with that, thank
you for your time


707
00:39:01,866 --> 00:39:03,206
and have a great afternoon.


708
00:39:05,516 --> 00:39:16,660
[ Applause ]

