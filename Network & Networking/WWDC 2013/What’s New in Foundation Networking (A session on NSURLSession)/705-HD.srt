1
00:00:00,506 --> 00:00:10,676
[ Silence ]


2
00:00:11,176 --> 00:00:11,806
>> Good morning.


3
00:00:11,936 --> 00:00:17,056
I'm Steve and I'm going to
talk today about what's new


4
00:00:17,056 --> 00:00:18,166
in Foundation Networking.


5
00:00:19,706 --> 00:00:24,086
So, Foundation Networking
gives you new API this year:


6
00:00:24,516 --> 00:00:25,476
NSURLSession.


7
00:00:25,886 --> 00:00:27,376
You might have heard this talked


8
00:00:27,376 --> 00:00:31,516
about yesterday during the
multitasking APIs talk.


9
00:00:32,676 --> 00:00:35,586
NSURLSession is a replacement
for NSURLConnection.


10
00:00:35,816 --> 00:00:38,206
The big benefit it's going


11
00:00:38,206 --> 00:00:40,716
to give you right off
the bat is out-of-process


12
00:00:40,766 --> 00:00:41,766
background transfers.


13
00:00:41,766 --> 00:00:46,676
It's a way of providing your
applications with the ability


14
00:00:46,676 --> 00:00:48,256
to get work done when
you're not running.


15
00:00:48,946 --> 00:00:52,376
It's available on iOS 7
but also in OS X Mavericks.


16
00:00:53,006 --> 00:00:56,206
I'm mostly going to talk
about some enhancements


17
00:00:56,206 --> 00:00:57,746
to the Foundation frameworks


18
00:00:57,746 --> 00:01:01,146
around some specific
technologies, NSNetServices,


19
00:01:01,146 --> 00:01:04,086
single sign-on an iCloud
credential syncing.


20
00:01:05,275 --> 00:01:07,666
So off the bat we
have, you know,


21
00:01:07,666 --> 00:01:12,756
sort of a generic chart diagram
of where your application sits.


22
00:01:12,756 --> 00:01:17,146
Your app sits on top of maybe
WebKit, MapKit, UIKit on iOS.


23
00:01:18,286 --> 00:01:20,166
This also sits on top of
the Foundation Framework


24
00:01:20,306 --> 00:01:22,946
which contains the
Cocoa container classes.


25
00:01:23,276 --> 00:01:25,906
There are classes
for scheduling,


26
00:01:26,056 --> 00:01:28,756
for file transfer
and networking.


27
00:01:29,866 --> 00:01:32,436
Foundation sits on top of
CoreFoundation and CFNetwork.


28
00:01:32,506 --> 00:01:34,336
Now, the reason there
is a separation there is


29
00:01:34,336 --> 00:01:36,376
because a long time
ago, we have the support


30
00:01:36,376 --> 00:01:37,306
in API called Carbon.


31
00:01:38,046 --> 00:01:41,206
Nowadays, almost all the work
you guys do is going to be based


32
00:01:41,206 --> 00:01:42,196
on the Foundation layer.


33
00:01:42,666 --> 00:01:45,356
But the CoreFoundation/CFNetwork
layer is still there.


34
00:01:46,106 --> 00:01:50,246
Lastly, networking on our
platform is built on top


35
00:01:50,246 --> 00:01:52,716
of BSD sockets with
enhancements in the kernel


36
00:01:52,716 --> 00:01:55,476
for our specific mobile needs.


37
00:01:58,396 --> 00:02:01,116
In these different frameworks
at these different layers,


38
00:02:01,116 --> 00:02:03,816
there are different
APIs you can use.


39
00:02:03,816 --> 00:02:05,746
BSD Networking uses BSD Sockets


40
00:02:05,746 --> 00:02:07,376
and this is obviously
well known.


41
00:02:07,726 --> 00:02:11,826
But on top of BSD
Sockets, the CoreFoundation


42
00:02:11,826 --> 00:02:15,106
and CFNetwork layer gives
you access to a stream API


43
00:02:15,236 --> 00:02:17,606
in CFStream which allows you


44
00:02:17,606 --> 00:02:21,036
to access files streams
or sockets streams.


45
00:02:22,006 --> 00:02:26,346
CFNetServices which allows you
to publish and subscribe to


46
00:02:26,346 --> 00:02:29,526
or browse for Bonjour services.


47
00:02:31,036 --> 00:02:34,776
And CFHTTPReadStream
which gives you a way


48
00:02:34,776 --> 00:02:38,976
of issuing an HTTP request
and receiving the body


49
00:02:38,976 --> 00:02:41,936
of the response as
the stream data.


50
00:02:43,556 --> 00:02:47,956
Foundation though gives you some
nice Cocoa APIs on top of this.


51
00:02:48,416 --> 00:02:51,516
NSStream is a direct
replacement for CFStream.


52
00:02:51,646 --> 00:02:53,666
There's no need to use CFStream
if you're using NSStream.


53
00:02:54,186 --> 00:02:57,716
NSNetServices just wraps
CFNetServices but it does


54
00:02:57,716 --> 00:03:02,276
so in a delegate-based
Objective-C ARC compatible way.


55
00:03:03,586 --> 00:03:06,906
But NSURLConnection is more
than just a single class.


56
00:03:06,906 --> 00:03:10,616
NSURLConnection is a suite of
classes, a bunch of classes,


57
00:03:10,616 --> 00:03:12,136
it's also the name of a class


58
00:03:12,136 --> 00:03:15,416
which is a little
confusing, but it's true.


59
00:03:15,906 --> 00:03:17,436
Now, today we're
going to talk about--


60
00:03:17,436 --> 00:03:21,196
we're going to talk about
NSNetServices a little later,


61
00:03:21,196 --> 00:03:23,676
but mostly I'm going to
talk about NSURLSession


62
00:03:23,676 --> 00:03:26,326
and then NSURLConnection, how
they relate, why you're going


63
00:03:26,326 --> 00:03:31,016
to use one over the other, and
why you're not going to use one.


64
00:03:32,036 --> 00:03:33,456
So going back in time


65
00:03:33,726 --> 00:03:37,806
for NSURLConnection it
describes both a technology


66
00:03:37,916 --> 00:03:40,706
that is the suite of
classes that are necessary


67
00:03:40,706 --> 00:03:44,826
for doing HTTP loading,
and it's a specific class


68
00:03:45,316 --> 00:03:48,996
in that there is an instance of
a class called NSURLConnection.


69
00:03:50,816 --> 00:03:53,706
These classes were originally
written for Safari back


70
00:03:53,706 --> 00:03:55,526
at the dawn of the millennium.


71
00:03:56,256 --> 00:03:58,946
And they were first
made available in 2003


72
00:03:58,946 --> 00:04:02,276
which I think the same year we
introduced the Power Mac G5 back


73
00:04:02,316 --> 00:04:05,336
when the bits all
went the right way.


74
00:04:05,336 --> 00:04:06,096
[ laughter, applause ]


75
00:04:06,096 --> 00:04:08,846
It provides URL resolution--
thank you.


76
00:04:08,846 --> 00:04:11,976
It provides URL resolution
and loading.


77
00:04:11,976 --> 00:04:14,306
What that means is when
you have an arbitrary URL


78
00:04:14,306 --> 00:04:17,836
like a file URL, NSURLConnection
is going to be used to load data


79
00:04:17,836 --> 00:04:22,646
out of a file URL or out of a
data URL, or you can connect


80
00:04:22,646 --> 00:04:24,646
to an FTP site, but mostly HTTP


81
00:04:24,646 --> 00:04:26,796
and HTTPS is what people
end up using it for.


82
00:04:27,056 --> 00:04:30,036
If you had your own protocol
that you wanted to register,


83
00:04:30,036 --> 00:04:32,846
you could register that
in your process using the


84
00:04:32,846 --> 00:04:34,426
NSURLProtocol class.


85
00:04:35,266 --> 00:04:39,856
So NSURLConnection as an API
encompasses all the loading


86
00:04:39,856 --> 00:04:42,806
machinery for the
Foundation layer.


87
00:04:44,036 --> 00:04:46,806
Configuration of an
NSURLConnection occurs


88
00:04:46,846 --> 00:04:49,306
by tweaking the NSURLRequest
object.


89
00:04:50,056 --> 00:04:52,676
There are a couple of properties
you can set on an NSURLRequest,


90
00:04:52,676 --> 00:04:55,606
some headers maybe you can set,


91
00:04:55,606 --> 00:04:57,646
and some policy decisions
you can set.


92
00:04:58,176 --> 00:05:01,146
But by and large,
NSURLConnection works by looking


93
00:05:01,146 --> 00:05:02,866
at the global state
of your process


94
00:05:02,866 --> 00:05:04,236
and global configuration
options.


95
00:05:04,756 --> 00:05:09,746
NSURLConnection also gives you
access to proxies automatically,


96
00:05:09,746 --> 00:05:13,196
and it challenges
you for credentials


97
00:05:13,296 --> 00:05:16,156
when an HTTP request is
challenged by a server.


98
00:05:17,676 --> 00:05:21,456
So what this looks like is you
create an NSURLRequest object,


99
00:05:21,616 --> 00:05:22,466
you create it with the URL.


100
00:05:23,226 --> 00:05:24,446
You configure it how you want


101
00:05:24,446 --> 00:05:27,656
and then you create an
NSURLConnection object.


102
00:05:28,486 --> 00:05:32,446
This object represents the
sort of the transient of state


103
00:05:32,446 --> 00:05:34,316
of the request as
it's being made.


104
00:05:35,226 --> 00:05:37,276
You create the connection
with a delegate


105
00:05:37,556 --> 00:05:40,446
which receives information about
the load as it's occurring.


106
00:05:41,966 --> 00:05:43,906
NSURLConnection then
looks in the global state.


107
00:05:44,176 --> 00:05:47,276
It captures the cookie
store, cache, credentials


108
00:05:47,906 --> 00:05:51,196
and any protocols that are
loaded in your process.


109
00:05:51,806 --> 00:05:56,186
And it produces an NSURLResponse
Meta-Data object, and zero


110
00:05:56,186 --> 00:05:59,526
or more NSData objects
which represent the payload


111
00:06:00,346 --> 00:06:03,816
of what you're getting.


112
00:06:03,976 --> 00:06:07,286
So in your process, you have
some networking needs, right?


113
00:06:07,286 --> 00:06:08,746
And you're just going to keep
doing this over and over.


114
00:06:08,746 --> 00:06:09,546
You're going to create
a request,


115
00:06:09,546 --> 00:06:11,726
you create a connection,
bind it to your delegate,


116
00:06:12,526 --> 00:06:15,726
and the framework is going to
bind to the global storage over


117
00:06:15,726 --> 00:06:18,516
and over and over to produce
these response objects.


118
00:06:18,516 --> 00:06:21,156
So a problem is if
another framework


119
00:06:21,156 --> 00:06:23,836
in your application also needs
to use this global state,


120
00:06:24,126 --> 00:06:27,086
it ends up using and overriding
the same global state.


121
00:06:27,086 --> 00:06:28,906
You can't both have your
own protocol handler


122
00:06:28,906 --> 00:06:32,546
as you can't both have your
own global cache objects.


123
00:06:33,186 --> 00:06:39,476
So the first thing NSURLSession
does is it continues the process


124
00:06:39,476 --> 00:06:41,376
of having confusion over
whether it's the name


125
00:06:41,376 --> 00:06:42,846
of a class or a technology.


126
00:06:43,416 --> 00:06:44,326
It's consistent.


127
00:06:45,116 --> 00:06:48,016
[laughter] I know
that's important.


128
00:06:49,126 --> 00:06:51,826
So it replaces NSURLConnection
as a technology,


129
00:06:52,186 --> 00:06:53,806
but it preserves
almost all of it.


130
00:06:54,066 --> 00:06:58,596
So NSURLConnection as a class
goes away and to be replaced


131
00:06:58,596 --> 00:06:59,996
by an NSURLSession class,


132
00:07:01,076 --> 00:07:04,626
and NSURLSession has some
additional classes associated


133
00:07:04,626 --> 00:07:06,466
with it.


134
00:07:06,466 --> 00:07:08,886
NSURLSession is the
configurable container


135
00:07:08,886 --> 00:07:10,586
for putting network
requests in to.


136
00:07:11,236 --> 00:07:13,816
It gives you better
HTTP options based


137
00:07:13,816 --> 00:07:15,136
on feedback we've
gotten over the year.


138
00:07:15,196 --> 00:07:16,296
So I want to be able to this.


139
00:07:16,296 --> 00:07:18,366
Well, you couldn't
before, now you can.


140
00:07:19,686 --> 00:07:21,656
It gives you access
to the storage objects


141
00:07:21,716 --> 00:07:23,086
on a per session basis.


142
00:07:23,506 --> 00:07:25,386
So you can have private
storage objects.


143
00:07:26,866 --> 00:07:28,426
It improves authentication
handling


144
00:07:28,426 --> 00:07:32,056
by having an explicit
authentication challenge


145
00:07:32,056 --> 00:07:34,826
mechanism for connection-based
requests.


146
00:07:35,146 --> 00:07:39,796
In NSURLConnection, when
a request was challenged


147
00:07:39,866 --> 00:07:43,216
by a server to authenticate
against a pipe,


148
00:07:43,216 --> 00:07:47,336
for instance an NTLM server,
the challenge would come back


149
00:07:47,466 --> 00:07:49,416
for an arbitrary request.


150
00:07:49,416 --> 00:07:50,446
You wouldn't know necessarily


151
00:07:50,446 --> 00:07:52,626
which request would
get that challenge.


152
00:07:53,206 --> 00:07:55,226
Now, challenges for
connection-based


153
00:07:55,226 --> 00:07:57,486
of are sent directly to
the session delegate.


154
00:07:57,916 --> 00:08:02,546
And I have this rich delegate
model which is kind of--


155
00:08:03,306 --> 00:08:04,586
weird way of saying this,


156
00:08:05,646 --> 00:08:07,726
but NSURLConnection had some
asynchronous convenience


157
00:08:07,726 --> 00:08:09,756
routines, but the
problem with that is


158
00:08:09,756 --> 00:08:12,066
that they wouldn't
use any delegates.


159
00:08:12,146 --> 00:08:14,796
So either the asynchronous
routine would work


160
00:08:14,796 --> 00:08:17,226
or it would fail, now you
can have a hybrid approach


161
00:08:17,226 --> 00:08:18,966
where there is an asynchronous
convenience routine,


162
00:08:19,496 --> 00:08:23,186
but it can also use your
delegate to do auth.


163
00:08:24,696 --> 00:08:27,946
Session gives you uploads and
downloads to the filesystem,


164
00:08:27,946 --> 00:08:30,686
that's sort of the preferred
way to do uploads and downloads.


165
00:08:32,596 --> 00:08:34,726
There's sort of a
policy shift in Session


166
00:08:34,726 --> 00:08:38,986
in that the configuration
goes in via Session instead


167
00:08:38,986 --> 00:08:44,155
of NSURLRequest and we try and
separate the body of a request,


168
00:08:44,155 --> 00:08:46,136
that is if you're doing
a post of an image,


169
00:08:46,546 --> 00:08:48,536
from the request
envelope itself,


170
00:08:48,536 --> 00:08:51,186
it's sort of like you don't
want to have a post star,


171
00:08:51,226 --> 00:08:52,026
you want to have an envelope.


172
00:08:53,566 --> 00:08:56,526
We've always had the separation
of that response meta data


173
00:08:57,386 --> 00:08:59,326
from the actual payload itself.


174
00:08:59,326 --> 00:09:02,696
So just trying to make this
API consistent between request,


175
00:09:02,696 --> 00:09:04,046
response, payload, payload.


176
00:09:06,046 --> 00:09:07,586
And NSURLSession
gives you access


177
00:09:07,586 --> 00:09:09,316
to out-of-process
uploads and downloads.


178
00:09:10,436 --> 00:09:12,216
The nice thing about
that is it's just a


179
00:09:12,216 --> 00:09:13,376
configuration option.


180
00:09:13,376 --> 00:09:16,526
When you create a session, you
specify, "Well, I want request


181
00:09:16,526 --> 00:09:18,846
that go into the session,
could be done on a background."


182
00:09:19,386 --> 00:09:22,676
What it allows us
to do though is


183
00:09:22,676 --> 00:09:25,306
when your process is no longer
running, it's been suspended,


184
00:09:26,546 --> 00:09:30,296
we can continue your download in
the background taking advantage


185
00:09:30,296 --> 00:09:33,636
of everything we've learned
about the user's network use


186
00:09:33,636 --> 00:09:35,326
and their battery life.


187
00:09:36,606 --> 00:09:42,226
Using UIKit on iOS 7, we
key in, we take advantage


188
00:09:42,226 --> 00:09:44,006
of the new multitasking APIs


189
00:09:44,566 --> 00:09:49,656
so that your application can
have updated its interface


190
00:09:49,656 --> 00:09:52,076
and provide a better
experience for the user.


191
00:09:52,076 --> 00:09:53,646
You're going to download
your content


192
00:09:53,646 --> 00:09:56,946
and have it available in the UI.


193
00:09:56,946 --> 00:09:59,516
So this looks like,
well, it's a big object,


194
00:09:59,516 --> 00:10:01,436
a big square object
called NSURLSession.


195
00:10:02,026 --> 00:10:04,176
And you create a session
with a configuration object.


196
00:10:04,176 --> 00:10:07,956
This is where you're going
to specify any HTTP options


197
00:10:08,076 --> 00:10:10,366
and the various storage objects.


198
00:10:10,506 --> 00:10:12,566
And you create a
session with a delegate.


199
00:10:13,316 --> 00:10:16,946
Delegate gets called on a
sort of per request basis.


200
00:10:17,506 --> 00:10:19,996
When you throw a request into a
session, you get a response out


201
00:10:19,996 --> 00:10:24,186
and you keep using the
same session over and over.


202
00:10:24,386 --> 00:10:29,486
So as Session is an
API, there are a bunch


203
00:10:29,486 --> 00:10:31,346
of additional classes
you need to know about,


204
00:10:33,046 --> 00:10:35,146
not nearly a bunch
but some more.


205
00:10:35,476 --> 00:10:38,396
OK, so the first one is
the configuration object.


206
00:10:38,396 --> 00:10:40,486
This is basically a
properties dictionary


207
00:10:41,086 --> 00:10:47,286
of how you want the session
to behave, the task object


208
00:10:47,436 --> 00:10:50,046
which really is the
replacement for connection.


209
00:10:50,366 --> 00:10:53,776
So you can think about
Session is this larger ball,


210
00:10:53,776 --> 00:10:59,166
and Connection goes away and
these taske objects get created


211
00:10:59,166 --> 00:11:00,326
on a per request basis.


212
00:11:01,746 --> 00:11:03,886
There is a delegate
protocol, the delegate object,


213
00:11:04,066 --> 00:11:05,956
that you're going to
create to bind your session,


214
00:11:05,956 --> 00:11:07,556
and then the session
object itself


215
00:11:07,636 --> 00:11:09,856
which is a factory
for creating tasks.


216
00:11:10,726 --> 00:11:13,326
You always create
one task per request.


217
00:11:14,716 --> 00:11:18,846
So this is a classic
NSURLConnection example.


218
00:11:18,846 --> 00:11:21,736
You create a delegate
object and a URL.


219
00:11:21,736 --> 00:11:25,466
I keep using
setAllowsCellularAccess during


220
00:11:25,466 --> 00:11:27,386
this talk as an example
of a property


221
00:11:27,386 --> 00:11:28,996
that you might tweak
on a request.


222
00:11:29,066 --> 00:11:32,196
So in this case, you
create an NSURLRequest


223
00:11:32,196 --> 00:11:34,036
and then you modify
the request to say,


224
00:11:34,036 --> 00:11:36,006
"I don't want this request
to go over cellular."


225
00:11:37,156 --> 00:11:40,026
You create an NSURLConnection
object using the class method


226
00:11:40,026 --> 00:11:42,606
connectionWithRequest, you
bind it to your delegate.


227
00:11:42,606 --> 00:11:45,726
Your delegate then gets called
with didReceiveResponse,


228
00:11:45,776 --> 00:11:48,556
didReceiveData, didFinishLoading
referencing this


229
00:11:48,596 --> 00:11:49,326
connection object.


230
00:11:51,026 --> 00:11:54,816
Now in NSURLSession, it's
pretty much the same,


231
00:11:54,816 --> 00:11:57,636
but there is more configuration
upfront but less work later on.


232
00:11:58,346 --> 00:12:00,356
You create a delegate conforming


233
00:12:00,576 --> 00:12:02,086
to the session delegate
protocol.


234
00:12:02,456 --> 00:12:05,396
You create a configuration
object.


235
00:12:05,886 --> 00:12:08,226
There is a bunch
of class methods


236
00:12:08,226 --> 00:12:10,016
for creating configuration
objects based


237
00:12:10,526 --> 00:12:12,416
on what you're going to
try and do with them.


238
00:12:12,416 --> 00:12:14,806
In this case the
defaultSessionConfiguration


239
00:12:14,806 --> 00:12:18,306
object actually gives
you the same sort


240
00:12:18,306 --> 00:12:21,036
of configuration options that
NSURLConnection would see.


241
00:12:21,126 --> 00:12:24,576
So if you had created this task
with an NSURLConnection instead,


242
00:12:24,576 --> 00:12:26,486
you would have sort
of the same behaviors.


243
00:12:27,376 --> 00:12:29,736
But instead of modifying the
request to say AllowCellular,


244
00:12:30,256 --> 00:12:32,586
all the requests that
go into this session


245
00:12:32,586 --> 00:12:37,226
that I create are going
to not use cellular.


246
00:12:38,156 --> 00:12:40,466
So you create a session, you
bind it through a delegate


247
00:12:40,466 --> 00:12:43,726
and you give it a queue
where the messages


248
00:12:43,726 --> 00:12:45,186
for your delegate are
going to be received.


249
00:12:45,476 --> 00:12:47,046
You don't want to
block in your queue.


250
00:12:47,046 --> 00:12:51,806
All the callouts to you
are sort of asynchronous


251
00:12:51,806 --> 00:12:53,036
or they're intended
to be asynchronous


252
00:12:53,036 --> 00:12:55,236
or either informational or
they'll be a completion handler.


253
00:12:55,606 --> 00:12:58,556
If you use the session
once you get all set up,


254
00:12:58,556 --> 00:13:01,536
you create a URL, and
then you can use a


255
00:13:01,536 --> 00:13:03,616
dataTaskWithHTTPGetRequest
which returns


256
00:13:03,926 --> 00:13:08,696
to you an NSURLSession
data task object.


257
00:13:08,856 --> 00:13:10,466
Actually, I want to talk
about one more thing here.


258
00:13:10,686 --> 00:13:16,946
The data task object I've
mentioned NSURLSession task,


259
00:13:16,946 --> 00:13:19,596
NSURLSessionDataTask is a
subclass of NSURLSession task.


260
00:13:19,596 --> 00:13:22,906
And I'm going to talk about
that a little bit more, sorry.


261
00:13:23,826 --> 00:13:25,726
Right, so
NSURLSessionConfiguration.


262
00:13:26,986 --> 00:13:29,816
NSURLRequest did not have a
lot of configuration options.


263
00:13:29,816 --> 00:13:33,246
So now we're adding
support to subclass


264
00:13:33,246 --> 00:13:35,856
and set your own private cache
both using credential storage.


265
00:13:36,816 --> 00:13:40,656
We maintain the ability
to set the cell usage flag


266
00:13:40,656 --> 00:13:42,936
and network service
type from NSURLRequest.


267
00:13:43,826 --> 00:13:46,126
We give users the ability
to tweak the maximum number


268
00:13:46,126 --> 00:13:47,326
of connections through a host.


269
00:13:47,326 --> 00:13:51,296
In NSURLConnection, behind the
scenes there is this global pool


270
00:13:51,296 --> 00:13:55,076
of sockets that have been opened
and we come up with some number


271
00:13:55,076 --> 00:13:57,696
of connections based on
internet standard usage


272
00:13:58,466 --> 00:14:00,546
for how many connections
we want to open to a host.


273
00:14:00,546 --> 00:14:02,286
But what we've heard is that
people want to tweak that.


274
00:14:02,286 --> 00:14:05,296
They say "I really only want
one connection to a host ever.


275
00:14:05,656 --> 00:14:07,366
I'd like all request to go
up in this one connection."


276
00:14:07,366 --> 00:14:08,176
So now you can do that.


277
00:14:09,706 --> 00:14:13,176
We have the resource
and network timeouts.


278
00:14:13,176 --> 00:14:17,346
This is nice because while
NSURLRequest has an implicit


279
00:14:17,346 --> 00:14:20,906
timeout when you create one,
or you can set an explicit one.


280
00:14:21,516 --> 00:14:23,696
That timeout is for
network transfers.


281
00:14:24,086 --> 00:14:28,406
If you're getting a long-lived
request and maybe you want


282
00:14:28,646 --> 00:14:32,326
to get a request, you want to
get the bytes out of request,


283
00:14:32,476 --> 00:14:34,846
but only one byte is
coming in at a time,


284
00:14:35,416 --> 00:14:38,896
if you don't get any bytes
for that network timeout,


285
00:14:39,046 --> 00:14:40,166
then the request times out.


286
00:14:41,496 --> 00:14:44,196
So you can imagine doing a
get where it might take a week


287
00:14:44,276 --> 00:14:45,706
to come in and never timing out.


288
00:14:46,126 --> 00:14:48,466
So there's a new timeout,
the resource time out.


289
00:14:48,466 --> 00:14:51,516
If I can't get this entire
request within this timeout,


290
00:14:51,966 --> 00:14:53,116
then I want it to cancel.


291
00:14:53,206 --> 00:14:54,516
This is particularly important


292
00:14:54,516 --> 00:14:56,106
if you create a background
transfer.


293
00:14:56,506 --> 00:14:58,686
I want this file,
but if I can't get it


294
00:14:58,686 --> 00:15:00,026
in three days, forget about it.


295
00:15:00,026 --> 00:15:02,506
I'd rather hear that it failed.


296
00:15:02,506 --> 00:15:06,546
You can now set the minimum and
maximum TLS levels to, you know,


297
00:15:06,576 --> 00:15:09,836
ratchet down security or open it
up for your particular server.


298
00:15:11,596 --> 00:15:14,736
You have access to the HTTP
proxy dictionary directly


299
00:15:14,736 --> 00:15:15,996
on a per session basis.


300
00:15:15,996 --> 00:15:18,666
This is the same dictionary you
would get from systemconfig,


301
00:15:19,066 --> 00:15:21,606
but now you can modify it if
you had special proxy needs


302
00:15:21,606 --> 00:15:23,576
within your application
and we're going to use


303
00:15:23,576 --> 00:15:26,316
that proxy dictionary
for all requests


304
00:15:26,356 --> 00:15:27,496
that travel through the session.


305
00:15:28,136 --> 00:15:32,406
We have some of the same
options on request as far


306
00:15:32,406 --> 00:15:34,546
as cookie handling is
concerned, whether you want


307
00:15:34,546 --> 00:15:35,846
to apply cookies as they go out,


308
00:15:36,406 --> 00:15:39,146
but you can also specify the
cookie acceptance policy.


309
00:15:40,056 --> 00:15:44,356
HTTP pipelining is something you
can turn on and off at this--


310
00:15:44,356 --> 00:15:45,436
on a per session level.


311
00:15:45,526 --> 00:15:47,256
And you can set additional
headers


312
00:15:47,256 --> 00:15:48,676
that will be applied
to any request.


313
00:15:48,676 --> 00:15:51,046
If a header is already
present, we don't override it.


314
00:15:51,436 --> 00:15:52,826
But if you wanted to
set the user agent


315
00:15:52,896 --> 00:15:54,636
for any outgoing request,
you could do that here.


316
00:15:56,586 --> 00:16:00,256
Lastly, protocol handlers are
kept on a per session basis.


317
00:16:00,416 --> 00:16:02,586
There is still the
global protocol list.


318
00:16:03,516 --> 00:16:05,626
But if you have your own
protocol, it would be better


319
00:16:05,626 --> 00:16:08,146
to bind it to a particular
session and use that session


320
00:16:08,146 --> 00:16:09,526
and expect to get that protocol.


321
00:16:10,386 --> 00:16:12,856
So there are some
factory constructors


322
00:16:12,856 --> 00:16:14,316
for creating sessions.


323
00:16:14,386 --> 00:16:18,076
The default configuration sort
of captures the global state


324
00:16:18,076 --> 00:16:19,356
that NSURLConnection sees.


325
00:16:20,206 --> 00:16:24,116
There is a factory to create an
ephemeral session configuration.


326
00:16:24,496 --> 00:16:28,586
This is basically the same as
a default configuration except


327
00:16:28,586 --> 00:16:33,276
that it initializes the storage
objects to be in-memory only.


328
00:16:33,996 --> 00:16:36,576
This is how you would implement
private browsing for instance.


329
00:16:37,096 --> 00:16:39,876
And there's the background
session configuration


330
00:16:40,266 --> 00:16:41,966
which creates a configuration
object


331
00:16:42,536 --> 00:16:44,106
that references an identifier.


332
00:16:44,106 --> 00:16:47,286
That identifier is what you
use to reconnect this session


333
00:16:47,756 --> 00:16:48,556
to the background work.


334
00:16:49,786 --> 00:16:51,666
Configuration objects
are always mutable


335
00:16:52,356 --> 00:16:54,556
and they're copied
whenever they get used.


336
00:16:54,556 --> 00:16:55,696
So when you create
a session with one,


337
00:16:55,696 --> 00:16:56,936
it'll create a copy of that.


338
00:16:57,726 --> 00:16:59,636
And while you can get to
the configuration inside


339
00:16:59,636 --> 00:17:01,626
of a session, you
can't modify it.


340
00:17:02,936 --> 00:17:06,056
So the task object,
this is the thing


341
00:17:06,056 --> 00:17:09,076
that actually replaces
NSURLConnection in the class.


342
00:17:09,346 --> 00:17:14,146
And it represents, you know,
the state of a loading resource.


343
00:17:14,736 --> 00:17:16,435
When you look at it in the
header, the immediate thing


344
00:17:16,435 --> 00:17:17,986
that comes out is that it
has a lot of properties.


345
00:17:18,236 --> 00:17:21,796
The properties that previously
had been reported via delegates


346
00:17:21,796 --> 00:17:24,846
are also available through
the task object itself.


347
00:17:25,516 --> 00:17:28,006
So you can look at a
task object and find


348
00:17:28,006 --> 00:17:29,346
out how many bytes
have been transferred,


349
00:17:29,346 --> 00:17:30,936
how many bytes are
expected to be transferred.


350
00:17:32,016 --> 00:17:35,336
It offers the same
cancel, suspend and resume


351
00:17:35,336 --> 00:17:37,246
that NSURLConnection does.


352
00:17:38,356 --> 00:17:43,766
There are two subclasses for
data task and upload task.


353
00:17:44,826 --> 00:17:47,726
This is really done just
as sort of syntactic sugar


354
00:17:47,726 --> 00:17:51,776
so that we understand that
there are different types


355
00:17:51,776 --> 00:17:52,906
of work that's going on.


356
00:17:53,146 --> 00:17:58,506
And in particular, you can't
schedule background data task.


357
00:17:58,506 --> 00:18:02,846
You can schedule background
upload or download tasks.


358
00:18:03,536 --> 00:18:05,686
Download tasks don't
really offer anything


359
00:18:05,686 --> 00:18:07,476
over the base class task except


360
00:18:07,476 --> 00:18:09,226
for this
cancelByProducingResumeData.


361
00:18:09,226 --> 00:18:10,536
If somebody hits
pause in the UI,


362
00:18:10,536 --> 00:18:13,306
you want to stop the
background transfer


363
00:18:13,556 --> 00:18:16,266
or foreground transfer
for that matter.


364
00:18:16,586 --> 00:18:17,936
You're given this
resume data blob.


365
00:18:18,616 --> 00:18:24,416
Later on, your app can go ahead
and create a download and bind


366
00:18:24,416 --> 00:18:27,486
to this resume data and we'll
continue where we left off.


367
00:18:27,986 --> 00:18:33,596
The delegate that you create the
session with has messages keyed


368
00:18:33,596 --> 00:18:35,426
to the specific task type.


369
00:18:35,896 --> 00:18:38,446
So all tasks can finish loading,


370
00:18:39,066 --> 00:18:41,446
but only data tasks
receive incremental data,


371
00:18:41,966 --> 00:18:43,576
and only download tasks receive


372
00:18:43,576 --> 00:18:45,846
that final URL where
the file is.


373
00:18:47,596 --> 00:18:50,006
So the class hierarchy,
you know, looks like this.


374
00:18:50,006 --> 00:18:52,576
You've got a session task
with these methods on it.


375
00:18:52,576 --> 00:18:54,826
I think there's a status method,
but there are also properties


376
00:18:54,826 --> 00:18:56,296
in there that you can look at.


377
00:18:57,356 --> 00:18:59,376
DataTask is a subclass
of SessionTask


378
00:18:59,536 --> 00:19:03,216
and UploadTask is a
subclass of DataTask.


379
00:19:04,286 --> 00:19:06,616
Any task can have
an upload payload,


380
00:19:06,656 --> 00:19:09,106
including a download task
which is weird when you think


381
00:19:09,106 --> 00:19:09,926
about it but it's true.


382
00:19:09,926 --> 00:19:14,206
You can do a GET for a resource
and have it have body data.


383
00:19:14,206 --> 00:19:15,646
It's not my protocol.


384
00:19:15,646 --> 00:19:16,496
[ laughter ]


385
00:19:16,496 --> 00:19:21,576
So the DownloadTask subclass
also has this extra method


386
00:19:21,676 --> 00:19:23,076
cancelByProducingResumeData.


387
00:19:25,116 --> 00:19:27,516
The delegate objects that
you create your session with,


388
00:19:28,956 --> 00:19:30,586
you create a single
delegate object, right?


389
00:19:30,586 --> 00:19:33,576
So each session has one
pointer to your delegate object.


390
00:19:34,226 --> 00:19:37,296
There are-- different
task types are broken


391
00:19:37,296 --> 00:19:39,186
out into different protocols,


392
00:19:39,246 --> 00:19:41,946
but you can just implement
them all within one class.


393
00:19:43,936 --> 00:19:46,916
The delegate itself is strongly
referenced by the session.


394
00:19:47,266 --> 00:19:49,616
And in order to break
that cycle,


395
00:19:49,696 --> 00:19:51,066
you have to invalidate
a session.


396
00:19:51,966 --> 00:19:53,226
When you invalidate a session,


397
00:19:54,306 --> 00:19:57,616
all the work inside the session
gets canceled or finished,


398
00:19:58,076 --> 00:19:59,886
and then the session
did finish--


399
00:20:00,056 --> 00:20:02,066
or sorry the session
did invalidate,


400
00:20:02,636 --> 00:20:03,786
delegate method gets called.


401
00:20:05,016 --> 00:20:06,576
At that point we
release your delegate.


402
00:20:07,996 --> 00:20:10,266
Now a Delegate message
may block loading.


403
00:20:10,266 --> 00:20:12,816
Some of them are informational
like didReceiveData,


404
00:20:13,446 --> 00:20:15,136
gives you a data blob and
then goes back to work.


405
00:20:16,366 --> 00:20:20,126
Some of them, like
didReceiveResponse,


406
00:20:20,586 --> 00:20:21,996
require you to return something.


407
00:20:22,956 --> 00:20:26,096
In NSURLConnection, you had to
return something immediately,


408
00:20:26,866 --> 00:20:28,806
but in the SessionDelegate
model,


409
00:20:29,336 --> 00:20:30,566
you're given a completion
handler.


410
00:20:30,856 --> 00:20:33,086
Then you invoke that completion
handler to continue the load.


411
00:20:33,336 --> 00:20:37,336
So it's OK to schedule a session
on say the main queue as long


412
00:20:37,336 --> 00:20:39,476
as you know that the
work you need to do needs


413
00:20:39,476 --> 00:20:41,726
to be done via this
completion handler.


414
00:20:43,916 --> 00:20:47,076
SessionDelegate then is
sort of the overarching--


415
00:20:47,236 --> 00:20:48,786
a session should implement this.


416
00:20:50,216 --> 00:20:51,486
I mentioned way earlier


417
00:20:51,556 --> 00:20:54,186
that there's an authentication
challenge specific


418
00:20:54,546 --> 00:20:57,306
to connection types
as opposed to request.


419
00:20:57,576 --> 00:21:00,366
Those come in through the URL
session didReceiveAuthentication


420
00:21:00,366 --> 00:21:03,566
Challenge:completionHandler
delegate method.


421
00:21:03,756 --> 00:21:07,536
This is going to be for
connection-based auth


422
00:21:07,536 --> 00:21:11,536
like in NTLM also for SSL auth


423
00:21:11,706 --> 00:21:13,606
like here's the server
certificate,


424
00:21:13,606 --> 00:21:16,036
or if the server requires
a certificate from you.


425
00:21:17,086 --> 00:21:19,526
We implicitly handle
Kerberos on both iOS 7


426
00:21:19,976 --> 00:21:21,146
and with OS X Mavericks.


427
00:21:21,146 --> 00:21:23,296
So you should be aware
that it's happening


428
00:21:23,626 --> 00:21:25,496
that you might have a Kerberos
authenticated connection,


429
00:21:26,116 --> 00:21:29,046
but you actually won't hear
about it through this delegate.


430
00:21:30,536 --> 00:21:32,306
The other delegate
method that we care


431
00:21:32,306 --> 00:21:33,876
about is
didBecomeInvalidWithError


432
00:21:33,876 --> 00:21:38,506
and this is where-- when
you've invalidated the session,


433
00:21:38,506 --> 00:21:40,746
this is the method that gets
called before your delegate


434
00:21:41,376 --> 00:21:42,676
is released.


435
00:21:43,786 --> 00:21:48,326
So data delegates are
interesting because this is


436
00:21:48,396 --> 00:21:50,006
for doing incremental
loading of data.


437
00:21:51,896 --> 00:21:53,696
These are basically-- some
of these are optional, right?


438
00:21:53,746 --> 00:21:56,876
So if you don't care about
redirections, you don't have


439
00:21:56,876 --> 00:21:59,266
to implement
willPerformHTTPRedirection.


440
00:21:59,556 --> 00:22:02,726
If you care whether you want
to do something different


441
00:22:02,726 --> 00:22:05,816
for redirection, then
you implement this


442
00:22:05,976 --> 00:22:07,156
and it gives you
the new request.


443
00:22:07,256 --> 00:22:08,836
This is where you're
going to go to


444
00:22:08,836 --> 00:22:11,996
and call the completion handler
with either that new request,


445
00:22:12,556 --> 00:22:15,006
the request where you'd
rather it go to or nil.


446
00:22:15,006 --> 00:22:18,496
If you pass nil, then
we treat the request--


447
00:22:19,396 --> 00:22:22,916
sorry, we treat the response
that specifies the redirection


448
00:22:23,416 --> 00:22:24,606
as the data you're getting.


449
00:22:25,616 --> 00:22:28,006
Sometimes you want to
do an HTTP Get request,


450
00:22:28,156 --> 00:22:31,636
you get a redirection response,
but you'd rather have the body


451
00:22:31,636 --> 00:22:33,526
of the response rather
than the new location,


452
00:22:33,526 --> 00:22:35,186
so that's how you
would implement that.


453
00:22:36,536 --> 00:22:38,886
When you have a request based
authentication challenge,


454
00:22:38,946 --> 00:22:40,936
they come in through the
didReceiveAuthentication


455
00:22:40,936 --> 00:22:42,936
Challenge, the task
didReceiveAuthentication


456
00:22:42,936 --> 00:22:43,306
Challenge.


457
00:22:44,216 --> 00:22:47,406
This is where you create a
credential for basic digest auth


458
00:22:47,976 --> 00:22:50,636
or any sort of proxy auth
on a per request basis.


459
00:22:50,996 --> 00:22:56,856
As the request is uploading
data through a server via POST,


460
00:22:57,966 --> 00:23:00,986
we periodically call this
didSendBodyData delegate method


461
00:23:01,066 --> 00:23:01,856
if you implement it.


462
00:23:02,416 --> 00:23:06,986
This data is-- the parameters
here are actually mirrored


463
00:23:06,986 --> 00:23:08,286
in the task object itself.


464
00:23:08,286 --> 00:23:09,736
So if you look at
the task object,


465
00:23:09,736 --> 00:23:11,366
you'll see these
things being modified,


466
00:23:11,366 --> 00:23:14,126
and you don't necessarily
need to implement this.


467
00:23:14,956 --> 00:23:18,226
needsNewBodyStream
needs some explanation.


468
00:23:19,036 --> 00:23:22,136
This was added to
NSURLConnection because when--


469
00:23:22,136 --> 00:23:24,576
it is a carryover from
NSURLConnection delegate,


470
00:23:25,176 --> 00:23:26,936
because when we're
doing an HTTP post,


471
00:23:27,196 --> 00:23:29,996
sometimes the server is going
to come back with a challenge


472
00:23:29,996 --> 00:23:33,226
or some sort of server error
that we can recover from.


473
00:23:33,226 --> 00:23:35,496
We could resend this request.


474
00:23:35,776 --> 00:23:40,036
But because that-- because
streams are not rewindable,


475
00:23:40,536 --> 00:23:42,616
we want it to have the
data to send them again.


476
00:23:42,746 --> 00:23:45,266
So we will call your
needsNewBodyStream


477
00:23:45,266 --> 00:23:48,486
and your needsNewBodyStream
delegate to ask for a new stream


478
00:23:48,676 --> 00:23:49,936
so we could resend the request.


479
00:23:50,096 --> 00:23:54,056
If you didn't implement this,
then the request would fail


480
00:23:54,286 --> 00:23:55,716
and you'd have a confused user.


481
00:23:56,056 --> 00:23:58,296
The problem is, you know,


482
00:23:58,696 --> 00:24:02,606
when you're doing your testing
in-house, this never gets called


483
00:24:02,606 --> 00:24:03,896
because everything
is working correctly.


484
00:24:04,506 --> 00:24:05,956
But out in the field, you know,


485
00:24:05,956 --> 00:24:08,086
there's one in a million
chance this is going to happen,


486
00:24:08,516 --> 00:24:11,016
but one in a million chances
happen 9 times out of 10,


487
00:24:11,536 --> 00:24:14,036
and so your users
will be confused.


488
00:24:14,036 --> 00:24:15,286
[ laughter ]


489
00:24:15,286 --> 00:24:17,186
needsNewBodyStream
must be implemented


490
00:24:17,436 --> 00:24:20,246
if the upload you're
doing is from a stream.


491
00:24:21,376 --> 00:24:24,546
Sessions lets you create and
upload from a file though.


492
00:24:24,936 --> 00:24:29,056
So if you are implementing
uploads via the filesystem,


493
00:24:29,336 --> 00:24:31,116
you don't need to
implement needsNewBodyStream.


494
00:24:31,696 --> 00:24:34,506
If you're doing an
upload via a stream,


495
00:24:34,686 --> 00:24:36,826
we require that you
implement it.


496
00:24:38,156 --> 00:24:40,596
Lastly, all tasks
finish with error.


497
00:24:40,956 --> 00:24:43,436
NSURLConnection had
didFinishLoading


498
00:24:43,786 --> 00:24:44,896
and didFailWithError.


499
00:24:46,566 --> 00:24:48,866
NSURLSession just has
didCompleteWithError,


500
00:24:48,866 --> 00:24:51,126
error will be nil if
there was no error.


501
00:24:52,466 --> 00:24:55,336
Note that the error that you're
sent here is a transmission


502
00:24:55,336 --> 00:24:56,616
error, not a server error.


503
00:24:56,646 --> 00:24:58,906
If the server responded
with 404,


504
00:24:59,306 --> 00:25:01,706
as far as we're concerned
we did our job,


505
00:25:01,706 --> 00:25:04,086
we sent you request
and got a response.


506
00:25:04,586 --> 00:25:06,406
The only errors you're
going to get here are errors


507
00:25:06,406 --> 00:25:08,946
that are specific to, "We
couldn't find the host,"


508
00:25:09,286 --> 00:25:12,366
or "the connection was lost,"
or some horrible thing happened.


509
00:25:13,356 --> 00:25:17,146
Data tasks have a couple


510
00:25:17,266 --> 00:25:21,776
of specific data-related
delegate messages.


511
00:25:22,586 --> 00:25:23,996
First one is didReceiveResponse.


512
00:25:23,996 --> 00:25:27,176
Now, this is interesting because
when the server gives you a


513
00:25:27,346 --> 00:25:29,346
header back and it
starts sending body data,


514
00:25:30,406 --> 00:25:34,336
you might decide that the
response you got doesn't need


515
00:25:34,336 --> 00:25:36,256
to go to memory, you just
want it to go to disk.


516
00:25:37,386 --> 00:25:39,716
You can use didReceiveResponse
now to specify


517
00:25:39,716 --> 00:25:42,606
that this data task that
I'm about to get data for,


518
00:25:42,996 --> 00:25:44,736
I'd rather have the data
go directly to disk.


519
00:25:45,176 --> 00:25:46,906
So you call the completion
handler


520
00:25:46,906 --> 00:25:49,126
with a disposition
saying "become download.


521
00:25:49,126 --> 00:25:51,526
" And the next delegate
message gets called to say,


522
00:25:52,236 --> 00:25:54,096
"Your data task is now dead.


523
00:25:54,096 --> 00:25:55,496
Here's a download task instead.


524
00:25:55,496 --> 00:25:58,216
" And all the flow goes
through that download task.


525
00:25:59,106 --> 00:26:02,886
As your resource is being loaded
from the network, if you kept it


526
00:26:02,886 --> 00:26:05,456
as a data task, you'll
receive zero


527
00:26:05,456 --> 00:26:07,686
and more didReceiveData
messages.


528
00:26:08,416 --> 00:26:12,556
The NSData objects that you
get behind the scenes may be


529
00:26:12,556 --> 00:26:15,186
stitched together from
many NSData objects.


530
00:26:15,926 --> 00:26:18,566
So in the past, you would
just have gone [NSData bytes]


531
00:26:19,226 --> 00:26:22,106
or bytePointer or whatever.


532
00:26:22,106 --> 00:26:22,706
We would encourage you


533
00:26:22,706 --> 00:26:25,706
to instead use the
enumerateByteRangesUsingBlock


534
00:26:25,706 --> 00:26:29,976
API because we could give
you now a 4 Meg buffer.


535
00:26:29,976 --> 00:26:31,416
We just downloaded your 4 Meg.


536
00:26:31,796 --> 00:26:35,136
Internally, maybe that's cut
up into 50 different segments


537
00:26:35,536 --> 00:26:37,646
and if you just ask for the
byte pointer, then we have


538
00:26:37,646 --> 00:26:40,356
to flatten all that, and
that's not good for anyone.


539
00:26:41,376 --> 00:26:45,946
Lastly, data task caching
- only task can be cached.


540
00:26:45,946 --> 00:26:49,226
If you don't implement
willCacheResponse then we go


541
00:26:49,226 --> 00:26:52,766
ahead and cache for you all
things being considered,


542
00:26:52,766 --> 00:26:54,646
whether caching is
enabled in your session


543
00:26:54,646 --> 00:26:57,016
and whether the resource
is cacheable


544
00:26:57,016 --> 00:26:58,736
and whether the server
said to cache.


545
00:26:59,766 --> 00:27:01,986
Note that this won't
necessarily get called


546
00:27:01,986 --> 00:27:04,086
because there could
be something--


547
00:27:04,266 --> 00:27:06,286
maybe the resource is too
big to fit in the cache


548
00:27:06,286 --> 00:27:08,776
or maybe the server didn't
want it to be cached.


549
00:27:08,776 --> 00:27:11,336
So we won't always call
your willCacheResponse.


550
00:27:11,716 --> 00:27:14,526
So really, the only reason to
implement it is to say, "No,


551
00:27:14,526 --> 00:27:18,216
I don't want to cache this
particular response type,"


552
00:27:18,426 --> 00:27:21,276
or if you want to modify the
user info dictionary associated


553
00:27:21,276 --> 00:27:22,646
with the cache response.


554
00:27:23,796 --> 00:27:29,406
Download tasks always
download to a file.


555
00:27:29,406 --> 00:27:30,706
We create the file for you.


556
00:27:30,986 --> 00:27:32,156
We put the bytes into it


557
00:27:32,156 --> 00:27:33,956
and then once the
download is complete,


558
00:27:34,326 --> 00:27:36,146
we call
didFinishDownloadingToURL.


559
00:27:36,146 --> 00:27:38,926
We give you a reference to a
file URL which you then need


560
00:27:38,926 --> 00:27:40,906
to copy or move because
we're going to delete


561
00:27:40,906 --> 00:27:42,406
that file shortly thereafter.


562
00:27:43,536 --> 00:27:47,066
As that file is being
downloaded, we give you access


563
00:27:47,066 --> 00:27:49,696
to the number of bytes
that have been transferred


564
00:27:49,696 --> 00:27:51,646
for your progress use.


565
00:27:52,226 --> 00:27:55,256
And if you created your download
task using the resume API,


566
00:27:56,106 --> 00:27:58,286
then we're going to
call didResumeAtOffset.


567
00:27:59,156 --> 00:28:02,966
One thing to note is that the
offset you're given here is the


568
00:28:02,966 --> 00:28:07,196
real offset at which we
began resuming the download.


569
00:28:07,726 --> 00:28:10,626
We may previously have
said, "We've downloaded 4K,"


570
00:28:10,626 --> 00:28:11,986
but when you get to Resume,


571
00:28:11,986 --> 00:28:14,276
we've decided "We're can
only trust 2K of that.


572
00:28:14,316 --> 00:28:15,916
" So that number
may go backwards


573
00:28:15,916 --> 00:28:17,146
from what you were
previously told.


574
00:28:17,976 --> 00:28:19,426
So the session object itself.


575
00:28:19,426 --> 00:28:21,756
There's a default session
object that you can use


576
00:28:22,196 --> 00:28:24,816
and this shares the same
world as NSURLConnection.


577
00:28:25,216 --> 00:28:28,746
As a matter of fact, the
configuration object inside


578
00:28:28,746 --> 00:28:32,036
of a shared session, if you
look at its Cookie storage,


579
00:28:32,336 --> 00:28:32,926
it's the same


580
00:28:32,926 --> 00:28:34,836
as the NSURLConnection
Shared Cookie storage.


581
00:28:35,896 --> 00:28:37,866
But you're going to create
your own private sessions


582
00:28:37,866 --> 00:28:39,836
with private-- either
private configurations


583
00:28:40,386 --> 00:28:42,936
or using the default
configuration.


584
00:28:43,136 --> 00:28:44,726
But you're going to create
your own session usually.


585
00:28:46,336 --> 00:28:47,626
When you're done
with your session,


586
00:28:47,626 --> 00:28:48,716
you have to invalidate it,


587
00:28:48,946 --> 00:28:52,526
and then that delegate message
didBecomeInvalidWithError is


588
00:28:52,526 --> 00:28:55,106
called and then your
delegate will be released.


589
00:28:56,126 --> 00:28:58,466
Session is the object
that creates data upload


590
00:28:58,466 --> 00:29:02,836
and download tasks, but it also
provides these asynchronous


591
00:29:02,836 --> 00:29:05,146
convenience APIs with
a various type of task.


592
00:29:05,576 --> 00:29:08,506
And the nice thing about those
is that they give you access


593
00:29:08,506 --> 00:29:10,156
to your delegates
authentication method.


594
00:29:10,526 --> 00:29:12,386
It also lets you cancel them.


595
00:29:12,386 --> 00:29:15,706
So NSURLConnection send
asynchronous request


596
00:29:15,706 --> 00:29:16,666
as an existing API.


597
00:29:17,626 --> 00:29:20,586
Once you fire that, you
have no control over it.


598
00:29:20,586 --> 00:29:22,246
It's going to finish
or it's going to fail.


599
00:29:22,706 --> 00:29:25,146
But with Session, you're
given a task object back.


600
00:29:25,516 --> 00:29:26,996
You can monitor that task object


601
00:29:27,126 --> 00:29:29,016
and you can cancel
it whenever you want.


602
00:29:29,546 --> 00:29:34,006
So to create a session with
a custom configuration,


603
00:29:34,346 --> 00:29:36,546
in this case, I'm going to
implement private browsing.


604
00:29:36,936 --> 00:29:42,526
So we create a new configuration
object using the ephemeral


605
00:29:42,526 --> 00:29:44,866
configuration delegate
or class method.


606
00:29:45,766 --> 00:29:48,886
We create a session with
that configuration object.


607
00:29:49,996 --> 00:29:53,106
Whatever the URL is, we throw it
into the session with data task,


608
00:29:53,686 --> 00:29:54,926
with an HTTP get request,


609
00:29:54,926 --> 00:29:57,556
in this case I'm using the
asynchronous convenience API


610
00:29:58,136 --> 00:29:59,596
which will invoke my block


611
00:29:59,596 --> 00:30:01,536
with the data once
the data is resolved.


612
00:30:03,076 --> 00:30:04,676
If I wanted to further
customize this,


613
00:30:04,726 --> 00:30:07,816
I would have added whatever
configuration I wanted on top


614
00:30:07,816 --> 00:30:10,166
of the configuration object
that I created initially.


615
00:30:10,766 --> 00:30:16,386
So to create a DataTask,
it's sort of just


616
00:30:16,386 --> 00:30:19,086
like NSURLConnection, you
throw an NSURLRequest,


617
00:30:19,086 --> 00:30:21,406
they are convenience
APIs for throwing just


618
00:30:21,406 --> 00:30:23,236
for all URLs into it as well.


619
00:30:23,946 --> 00:30:25,776
The convenience API version


620
00:30:25,776 --> 00:30:28,386
of this takes an
additional completion handler


621
00:30:28,956 --> 00:30:31,426
and we are just going to
invoke the completion handler.


622
00:30:31,426 --> 00:30:33,586
We invoke it on the same
queue as your delegate


623
00:30:33,586 --> 00:30:35,616
if you had created the
session with the delegate.


624
00:30:36,036 --> 00:30:41,786
Upload tasks can be
explicitly created from a file


625
00:30:41,786 --> 00:30:44,546
or they can be explicitly
created from a data object


626
00:30:45,376 --> 00:30:48,016
or they can be implicitly
created with a stream.


627
00:30:48,566 --> 00:30:50,796
When you do
uploadTaskWithStreamedRequest,


628
00:30:51,396 --> 00:30:52,726
we take your NSURLRequest


629
00:30:53,096 --> 00:30:55,626
and even though NSURLRequest
has an existing API


630
00:30:55,626 --> 00:30:59,956
for setting a body, if you
throw it in to a session


631
00:30:59,956 --> 00:31:01,586
through
uploadTaskWithStreamedRequest,


632
00:31:01,996 --> 00:31:02,786
we ignore the body.


633
00:31:03,666 --> 00:31:06,606
We will always call your
needsNewBodyStream method


634
00:31:06,776 --> 00:31:10,296
to get a stream when we need
to trasnfer that request.


635
00:31:12,416 --> 00:31:15,626
There is no convenience routine
for that model of upload task,


636
00:31:15,626 --> 00:31:17,526
but there are convenience
routines for upload


637
00:31:17,526 --> 00:31:22,066
from file or upload from data.


638
00:31:22,266 --> 00:31:26,486
Download tasks are similar, you
create them with an NSURLRequest


639
00:31:26,656 --> 00:31:30,056
which identifies, you know,
whatever resource you want


640
00:31:30,056 --> 00:31:31,896
to get off the network.


641
00:31:32,226 --> 00:31:33,586
Or you create it
with the resume data


642
00:31:33,586 --> 00:31:36,906
that you previously had captured
by cancelling with resume data.


643
00:31:37,216 --> 00:31:41,856
There is a convenience routine
for both of those as well.


644
00:31:41,856 --> 00:31:45,686
It calls this block
with the location


645
00:31:45,686 --> 00:31:46,836
of the file that we downloaded.


646
00:31:47,186 --> 00:31:49,096
Again, you have to
copy or move this file


647
00:31:49,096 --> 00:31:51,146
because we're going
to delete it.


648
00:31:51,956 --> 00:31:54,856
If there was a connection
error during a transfer


649
00:31:55,596 --> 00:31:57,346
and we're going to be
able to resume that,


650
00:31:57,406 --> 00:32:00,216
so let's say your user
walked out of Wi-Fi range


651
00:32:00,216 --> 00:32:02,506
and we lost the connection,
we might return


652
00:32:02,506 --> 00:32:03,996
to you a connection error.


653
00:32:04,576 --> 00:32:06,196
In the user info of that error,


654
00:32:06,526 --> 00:32:09,836
there is this key
NSURLSessionDownloadTask resume


655
00:32:09,836 --> 00:32:13,036
data where we will have
squirreled away resume data


656
00:32:13,036 --> 00:32:15,626
so that you can restart
that transfer later.


657
00:32:17,166 --> 00:32:19,676
So background transfers, this
is where we're going to talk


658
00:32:19,676 --> 00:32:23,526
about the ability to do work
while you're not running.


659
00:32:24,526 --> 00:32:27,616
You have to use the delegate
model for background transfers


660
00:32:27,616 --> 00:32:28,756
and we only support
HTTP and HTTPS,


661
00:32:28,756 --> 00:32:31,516
obviously it doesn't
make any sense


662
00:32:31,516 --> 00:32:33,686
to do a background
transfer from a file URL.


663
00:32:35,336 --> 00:32:37,376
You use exactly the
same delegates as you do


664
00:32:37,376 --> 00:32:40,326
for upload and download tasks.


665
00:32:41,456 --> 00:32:44,356
We have to make some assumptions
though while you're running.


666
00:32:44,406 --> 00:32:46,896
So we don't bother calling you
back to take a redirection.


667
00:32:47,126 --> 00:32:49,646
We're going to assume that
any redirection should always


668
00:32:49,646 --> 00:32:50,086
be taken.


669
00:32:50,526 --> 00:32:52,686
And there's one property
I want to call


670
00:32:52,686 --> 00:32:54,226
out on the configuration object


671
00:32:55,286 --> 00:32:57,106
which is this discretionary
property.


672
00:32:57,296 --> 00:33:00,266
What this tells us is that
when we're doing a background


673
00:33:00,266 --> 00:33:04,546
transfer for a session
that's configured using this


674
00:33:04,596 --> 00:33:06,176
discretionary property
being true,


675
00:33:06,176 --> 00:33:09,206
is that we can take advantage
of the state of the machine


676
00:33:09,206 --> 00:33:12,966
to prioritize this
download to only do it


677
00:33:12,966 --> 00:33:14,156
when things are really good.


678
00:33:14,766 --> 00:33:17,636
Typically, that's going to mean
I'm on Wi-Fi and I'm plugged in.


679
00:33:17,706 --> 00:33:22,536
If you're in the foreground and
you don't specify this property,


680
00:33:22,916 --> 00:33:25,916
your download actually has
a high priority, you know,


681
00:33:25,916 --> 00:33:28,676
your user is sitting there,
you've created a download task


682
00:33:29,216 --> 00:33:32,126
and you're going to watch
this thing make progress.


683
00:33:32,316 --> 00:33:34,596
So we want the user
experience there to be--


684
00:33:34,906 --> 00:33:37,186
that the work is
being done right now.


685
00:33:38,486 --> 00:33:40,116
If you started your
download task when you were


686
00:33:40,116 --> 00:33:41,126
in the background though,


687
00:33:41,766 --> 00:33:43,306
we assume that discretionary
is true,


688
00:33:43,306 --> 00:33:45,966
we're going to prioritize
it as if, you know,


689
00:33:46,186 --> 00:33:47,776
this session were created


690
00:33:47,776 --> 00:33:50,186
with the discretionary
flag being set to true.


691
00:33:50,336 --> 00:33:51,496
So if you're a foreground app


692
00:33:51,496 --> 00:33:54,186
and you don't care how
long it's going to take


693
00:33:54,186 --> 00:33:55,456
for this resource to come in.


694
00:33:55,456 --> 00:33:57,586
I don't want to say, you
don't care, I mean you care,


695
00:33:57,716 --> 00:33:59,476
but you don't care that much.


696
00:33:59,476 --> 00:34:01,936
You set discretionary to be true
and we're going to do our best


697
00:34:02,206 --> 00:34:05,406
to prioritize it given the
constraints of the network


698
00:34:05,936 --> 00:34:08,786
and the power is-- the
current state of power.


699
00:34:09,996 --> 00:34:15,025
So what this looks like then
is that it creates session


700
00:34:15,206 --> 00:34:17,386
with an identifier, a
background session configuration


701
00:34:17,966 --> 00:34:18,985
with an identifier.


702
00:34:19,606 --> 00:34:22,275
This causes a daemon
to come into existence.


703
00:34:23,436 --> 00:34:27,186
You create your download
object, your download task


704
00:34:27,476 --> 00:34:29,146
and that starts the
work happening


705
00:34:29,196 --> 00:34:30,076
in the background daemon.


706
00:34:30,485 --> 00:34:33,516
While your app is running,
it receives progress updates,


707
00:34:33,516 --> 00:34:34,876
I downloaded this many bytes.


708
00:34:35,856 --> 00:34:37,255
But if your app stops running,


709
00:34:37,886 --> 00:34:40,326
the work continues
off in the daemon.


710
00:34:41,406 --> 00:34:44,386
And when the daemon is
done downloading your file


711
00:34:44,386 --> 00:34:47,235
for you UIKit application,
we're going to re-launch you,


712
00:34:48,485 --> 00:34:51,196
you re-create your session
which reconnects to the daemon


713
00:34:51,196 --> 00:34:52,786
and then the daemon
can tell you, "Hey,


714
00:34:53,096 --> 00:34:56,096
you're completed and
here is the file.


715
00:34:56,306 --> 00:35:00,396
" So, while your app is running,
you create a background pass,


716
00:35:00,536 --> 00:35:02,366
you're going to receive
these update messages.


717
00:35:03,596 --> 00:35:08,696
If you're a UIKit app on iOS
7, when you're not running,


718
00:35:09,096 --> 00:35:12,656
we're going to have to launch
you if we need credentials


719
00:35:13,246 --> 00:35:17,076
or if all the requests that
you have enqueued are complete


720
00:35:17,106 --> 00:35:19,406
and we're going to call the
application handle events


721
00:35:19,406 --> 00:35:22,586
for background URL session
completion handler delegate--


722
00:35:22,586 --> 00:35:23,696
application delegate.


723
00:35:24,836 --> 00:35:29,056
What you do then is
reconnect the session


724
00:35:29,056 --> 00:35:30,566
to the background daemon.


725
00:35:31,516 --> 00:35:34,036
You're going to receive
all the delegate messages


726
00:35:34,176 --> 00:35:37,186
for the outstanding tasks
and then when you're done,


727
00:35:37,186 --> 00:35:39,926
you call that completion
handler to update your snapshot.


728
00:35:40,456 --> 00:35:45,596
When you do reconnect, you can
probe, you can ask the session


729
00:35:45,596 --> 00:35:47,026
for any outstanding tasks.


730
00:35:47,026 --> 00:35:49,956
So you create a background
session configuration,


731
00:35:49,956 --> 00:35:51,906
you create a session
then you call


732
00:35:51,906 --> 00:35:54,716
getTasksWithCompletionHandler
which goes off to the daemon,


733
00:35:55,176 --> 00:35:58,366
gathers up all the task
objects and sends them back


734
00:35:58,586 --> 00:35:59,656
so you can interrogate them.


735
00:35:59,906 --> 00:36:02,586
But you will receive
delegate messages for a task.


736
00:36:02,586 --> 00:36:04,526
You don't have to call the
taskWithCompletionHandler.


737
00:36:05,386 --> 00:36:09,296
All right, so Dan is going to
come up and do a demo of this.


738
00:36:10,286 --> 00:36:11,566
>> Thank you, Steve.


739
00:36:12,796 --> 00:36:14,056
All right, good morning
everyone.


740
00:36:14,396 --> 00:36:17,356
So today, I'm going to
do a demo of an iOS app


741
00:36:17,616 --> 00:36:22,256
that uses the NSURLSession API
to do a background transfer.


742
00:36:25,496 --> 00:36:28,076
So this app does two
very simple things.


743
00:36:28,186 --> 00:36:29,836
It downloads an image
in the background


744
00:36:30,206 --> 00:36:32,136
and it can de-reference
an old pointer.


745
00:36:32,696 --> 00:36:34,976
So you should only be doing one
of those things in your apps.


746
00:36:35,636 --> 00:36:38,376
So, I'm going to hit this Start
button and now you can see


747
00:36:38,376 --> 00:36:39,926
that our download
is making progress.


748
00:36:40,316 --> 00:36:43,146
So now, as it gets us
[inaudible] progress,


749
00:36:43,146 --> 00:36:46,856
I'm going to suspend the app so
now the app is no longer running


750
00:36:46,856 --> 00:36:49,766
but our background daemon is
actually doing the download.


751
00:36:50,366 --> 00:36:52,246
So if we look on this
app switcher then


752
00:36:52,506 --> 00:36:54,596
when the download finishes,
we'll re-launch the app


753
00:36:54,596 --> 00:36:56,376
and an image will appear.


754
00:36:56,876 --> 00:37:01,536
[ Applause ]


755
00:37:02,036 --> 00:37:05,726
So, now just to show you
again, we can start a download


756
00:37:05,856 --> 00:37:08,186
and this time, instead of
suspending the app after it goes


757
00:37:08,186 --> 00:37:11,036
for a little while, I'm actually
going to hit this Crash button


758
00:37:11,656 --> 00:37:14,776
and now that they referenced
an old pointer and it crashed.


759
00:37:15,236 --> 00:37:17,066
But even though the app
crashed and there's no--


760
00:37:17,066 --> 00:37:20,056
it's no longer even a process,
we're still downloading


761
00:37:20,056 --> 00:37:21,096
that file in the background.


762
00:37:21,386 --> 00:37:33,266
So then the next time we go back
to our app, the file is there.


763
00:37:33,266 --> 00:37:33,336
[ Applause ]


764
00:37:33,336 --> 00:37:35,206
So, now I'm going to
walk you through the code


765
00:37:35,206 --> 00:37:36,696
and show you how
I wrote this app.


766
00:37:37,606 --> 00:37:40,936
So, first of all, this is--


767
00:37:41,066 --> 00:37:43,526
here is where we
create our NSURLSession


768
00:37:43,936 --> 00:37:47,826
and the magic here is where we
created the background session


769
00:37:47,826 --> 00:37:50,766
configuration and pass in
an identifier and again,


770
00:37:50,766 --> 00:37:53,646
this identifier is so that
when you create this session


771
00:37:53,646 --> 00:37:56,076
on subsequent launches, you'll
be reconnected to the session


772
00:37:56,076 --> 00:37:57,446
that already exist
in the daemons.


773
00:37:58,196 --> 00:38:01,206
So, I do this inside
of a dispatch once here


774
00:38:01,206 --> 00:38:04,386
to emphasize the fact that
you should only be creating a


775
00:38:04,386 --> 00:38:06,626
session with a given
identifier once.


776
00:38:06,976 --> 00:38:09,576
And if you want to create
multiple sessions that have--


777
00:38:09,716 --> 00:38:11,546
that do background work,
that's perfectly fine,


778
00:38:11,546 --> 00:38:13,176
but they each need
their own identifiers.


779
00:38:13,886 --> 00:38:16,166
So now that we have our session,
we can create downloads.


780
00:38:16,966 --> 00:38:19,406
So here's how you would create a
download task with that session


781
00:38:19,406 --> 00:38:21,836
and this is exactly like how
you would create a download task


782
00:38:21,836 --> 00:38:23,296
with an in-process
session as well.


783
00:38:23,806 --> 00:38:27,466
So you create an NSURL request
with the URL that you want


784
00:38:27,466 --> 00:38:28,726
to download and this is--


785
00:38:28,726 --> 00:38:30,956
should also be familiar
from using NSURLConnection.


786
00:38:31,566 --> 00:38:35,636
And then we use the
downloadTaskWithRequest method


787
00:38:35,866 --> 00:38:38,686
to create a download
task in that session.


788
00:38:41,036 --> 00:38:44,206
This is a progress callback for
the download task, it tells--


789
00:38:44,206 --> 00:38:45,976
it can-- and it can
give you information


790
00:38:45,976 --> 00:38:49,156
about how many bytes have
been written to disks so far.


791
00:38:49,576 --> 00:38:53,136
And in our Apple, we use this
to update a progress view


792
00:38:53,136 --> 00:38:56,266
by diving total bytes written
by total bytes expected to write


793
00:38:56,266 --> 00:38:58,476
and that gives us our
download progress.


794
00:38:58,476 --> 00:39:01,276
So the fraction, we use that
to update that progress wheel.


795
00:39:01,766 --> 00:39:04,746
This is the--


796
00:39:04,806 --> 00:39:07,906
didFinishDownloadingToURL
delegate message


797
00:39:08,326 --> 00:39:10,826
and this happens when we
finish writing all the bytes


798
00:39:10,956 --> 00:39:12,396
of the download to disk.


799
00:39:12,806 --> 00:39:17,966
And as we mentioned before, you
need to link or copy this file


800
00:39:17,966 --> 00:39:19,656
into a more permanent
location because as--


801
00:39:19,816 --> 00:39:21,086
after these returns, we're going


802
00:39:21,086 --> 00:39:23,266
to unlink the temporary
file that we downloaded.


803
00:39:23,946 --> 00:39:26,506
And we all-- and since this
was an image, it made sense


804
00:39:26,506 --> 00:39:28,466
to display it so
we created an image


805
00:39:28,716 --> 00:39:31,186
and displayed it an image view.


806
00:39:31,746 --> 00:39:35,806
And finally, this is
task didCompleteWithError


807
00:39:36,056 --> 00:39:38,376
and this is the last callback
you will get pertaining


808
00:39:38,376 --> 00:39:42,406
to a particular task and
as Steve mentioned before,


809
00:39:42,406 --> 00:39:45,136
if the connections exceeded
and the downloads exceeded,


810
00:39:45,136 --> 00:39:47,916
this error will be nil and if
there was a transmission error,


811
00:39:47,916 --> 00:39:49,116
the error will be non-nil.


812
00:39:49,666 --> 00:39:53,406
And we also here call this call
completion handler a finished


813
00:39:53,536 --> 00:39:55,496
method and I'll get
back what that--


814
00:39:55,496 --> 00:39:57,986
to what that method
does a little bit.


815
00:39:58,516 --> 00:40:00,216
So this leads us though to our--


816
00:40:00,216 --> 00:40:02,186
to one more additional
difference


817
00:40:02,186 --> 00:40:05,356
between in-process sessions and
background sessions which is


818
00:40:05,356 --> 00:40:08,666
that in a background session,
we have support in UIKit


819
00:40:08,966 --> 00:40:12,496
to launch you in the
background when download--


820
00:40:12,496 --> 00:40:14,036
when all the downloads
in the session finished


821
00:40:14,036 --> 00:40:17,566
or when a particular task
needs authentication.


822
00:40:18,156 --> 00:40:20,836
So-- and this is why the
application handle events


823
00:40:20,836 --> 00:40:23,546
for background URL session
completion handler method.


824
00:40:24,116 --> 00:40:27,486
So, when this is called, you'll
want to reconnect to the session


825
00:40:27,486 --> 00:40:28,606
with a given identifier.


826
00:40:28,936 --> 00:40:32,396
So in the case of this app, we
actually created our session


827
00:40:32,396 --> 00:40:35,216
when our view controller
was initialized and which--


828
00:40:35,336 --> 00:40:37,646
that happened when
application did finish launching


829
00:40:37,646 --> 00:40:38,576
with options was called.


830
00:40:38,576 --> 00:40:40,726
So at this point, we'll
already actually be connected


831
00:40:40,726 --> 00:40:42,196
to our session.


832
00:40:42,836 --> 00:40:46,146
And then we have this completion
handler and we want to--


833
00:40:46,146 --> 00:40:48,336
what this completion
handler does is it allows us


834
00:40:48,336 --> 00:40:51,306
to take a snapshot of
your UI and display it


835
00:40:51,306 --> 00:40:53,976
in the app switcher
and it also tells us


836
00:40:53,976 --> 00:40:55,166
that we can suspend your app.


837
00:40:55,166 --> 00:40:56,456
So it's very important
to call this


838
00:40:56,456 --> 00:40:58,866
when you're done handling
all the events pertaining


839
00:40:58,866 --> 00:40:59,426
to the session.


840
00:40:59,816 --> 00:41:01,446
So we only want to call this


841
00:41:01,446 --> 00:41:03,076
when we're done handling
the events.


842
00:41:03,126 --> 00:41:05,806
So for right now, we're going
to save it in a property


843
00:41:05,806 --> 00:41:08,506
on the app delegate and
we'll invoke it later.


844
00:41:08,866 --> 00:41:11,706
And it's important to note that
this has to be a copy property


845
00:41:11,706 --> 00:41:14,066
since there's a block
and you have to--


846
00:41:14,066 --> 00:41:15,826
blocks have to be
copied when saved.


847
00:41:16,836 --> 00:41:18,816
So let's go back to our
download view controller


848
00:41:19,076 --> 00:41:21,026
and I mentioned this
call completion handler


849
00:41:21,026 --> 00:41:22,196
if finished method before.


850
00:41:22,196 --> 00:41:23,816
So let's see what that does.


851
00:41:24,356 --> 00:41:27,896
We called it when the task
finished and now what we want


852
00:41:27,896 --> 00:41:29,266
to do is we want to
check if it's time


853
00:41:29,266 --> 00:41:30,386
to call our completion handler.


854
00:41:30,596 --> 00:41:34,576
And we only want to that once we
know we're done handling all the


855
00:41:34,576 --> 00:41:36,156
events for all the
task that finish


856
00:41:36,156 --> 00:41:37,866
when your app is
in the background.


857
00:41:38,346 --> 00:41:41,006
So, in this case, we
only did one download,


858
00:41:41,006 --> 00:41:43,146
but this is what you
would do if you--


859
00:41:43,386 --> 00:41:45,646
if your app did multiple
tasks in the background


860
00:41:45,646 --> 00:41:46,736
which is perfectly reasonable.


861
00:41:47,116 --> 00:41:50,616
We used the sessions get task
with completion handler method


862
00:41:50,616 --> 00:41:53,216
and this will give us back
a raise of all our data,


863
00:41:53,216 --> 00:41:55,026
the upload and download tasks


864
00:41:55,136 --> 00:41:58,316
and it won't give you back any
tasks that have been completed.


865
00:41:58,536 --> 00:42:00,026
So if all these arrays
are empty,


866
00:42:00,306 --> 00:42:03,556
that means you know you're
done handling all the events


867
00:42:03,556 --> 00:42:04,886
and we can call our
completion handler.


868
00:42:05,336 --> 00:42:07,026
So here we get our app delegate.


869
00:42:07,286 --> 00:42:09,286
We see if we have a
completion handler


870
00:42:09,286 --> 00:42:10,976
and if we do, we invoke it.


871
00:42:11,636 --> 00:42:14,826
And it's-- that's how you
use background uploads


872
00:42:14,826 --> 00:42:15,396
and downloads.


873
00:42:15,806 --> 00:42:16,786
Back to you Steve.


874
00:42:16,786 --> 00:42:17,096
[ Applause ]


875
00:42:17,096 --> 00:42:22,656
Thank you.


876
00:42:22,656 --> 00:42:23,086
Thanks Dan.


877
00:42:23,636 --> 00:42:26,166
OK, so why do we want
to use NSURLSession


878
00:42:26,166 --> 00:42:27,366
versus NSURLConnection?


879
00:42:28,496 --> 00:42:31,046
NSURLSession again
provides you with access


880
00:42:31,106 --> 00:42:35,136
to connection based auth which
is something NSURLConnection did


881
00:42:35,136 --> 00:42:37,716
but only by targeting
specific requests.


882
00:42:38,016 --> 00:42:41,106
Session gives you better
HTTP configuration options


883
00:42:41,106 --> 00:42:42,746
that people had been
asking for, for years.


884
00:42:43,286 --> 00:42:46,006
These are available through
the NSURL configuration object


885
00:42:46,166 --> 00:42:47,166
that you create your
session with.


886
00:42:47,496 --> 00:42:51,416
The ability to create private
subclassable storage objects is


887
00:42:51,416 --> 00:42:52,786
something you couldn't
do before.


888
00:42:52,786 --> 00:42:56,586
You couldn't create a cookie
storage subclass and have


889
00:42:56,586 --> 00:42:58,406
that available to
the system views.


890
00:42:59,166 --> 00:43:02,136
You could create an
NSURL cache subclass


891
00:43:02,536 --> 00:43:04,796
but then you would set it to
be the default for the system


892
00:43:04,796 --> 00:43:07,206
and all other processes would
end up using it as well--


893
00:43:07,206 --> 00:43:09,446
sorry, all other frameworks
within your process.


894
00:43:09,446 --> 00:43:12,476
These are always per
process properties.


895
00:43:13,366 --> 00:43:15,616
Very importantly,
Session is how you get


896
00:43:15,656 --> 00:43:17,866
to add a process
background transfers both


897
00:43:17,866 --> 00:43:19,496
for uploads and for downloads.


898
00:43:20,076 --> 00:43:22,426
It's also going to be the
baseline that we're going


899
00:43:22,426 --> 00:43:24,286
to build any future
APIs on top of.


900
00:43:24,286 --> 00:43:27,926
Session gives us a context
that we didn't have before,


901
00:43:28,096 --> 00:43:29,736
before the context
was your process.


902
00:43:29,886 --> 00:43:31,346
Now within your process,
there's a lot


903
00:43:31,346 --> 00:43:34,456
of different things going
on, Session is how we're able


904
00:43:34,456 --> 00:43:36,726
to compartmentalize that
within your application.


905
00:43:37,906 --> 00:43:39,736
So we spend a lot of time
talking about session.


906
00:43:39,996 --> 00:43:43,066
There are some other
enhancements that I want


907
00:43:43,066 --> 00:43:49,616
to mention that are new
in iOS 7 and Mavericks.


908
00:43:49,666 --> 00:43:53,796
NSNetServices is an existing
API that allows you to browse


909
00:43:53,796 --> 00:43:59,356
or discover and connect to
Bonjour Publish Services.


910
00:43:59,356 --> 00:44:02,646
It also allows you to
publish Bonjour Services.


911
00:44:02,646 --> 00:44:06,146
You do this by creating an
NSNetServices describing the


912
00:44:06,146 --> 00:44:07,586
type of service you
want to connect to


913
00:44:07,586 --> 00:44:11,956
and you call this get input
output stream message method.


914
00:44:12,056 --> 00:44:15,916
The streams you get back, you
open them and at that point,


915
00:44:15,916 --> 00:44:19,916
the resolution occurs, once the
stream is successfully open,


916
00:44:19,916 --> 00:44:21,496
that means you have a raw socket


917
00:44:21,496 --> 00:44:24,316
that you can do your own
protocol framing on top of.


918
00:44:26,246 --> 00:44:28,876
There's a new property in
iOS 7 includesPeerToPeer.


919
00:44:29,526 --> 00:44:32,496
When you specify this
property in your NSNetServices


920
00:44:32,496 --> 00:44:35,846
when you perform a browse,
it will also browse on peer


921
00:44:35,846 --> 00:44:38,476
to peer Wi-Fi and Bluetooth
networks automatically.


922
00:44:39,216 --> 00:44:45,946
The peer to peer Wi-Fi
is new support in iOS 7.


923
00:44:46,926 --> 00:44:50,596
There's also a new option
for publishing a service


924
00:44:51,306 --> 00:44:55,116
which automatically creates
a listening socket for you.


925
00:44:55,356 --> 00:44:58,946
So when you create your
NSNetService to publish it,


926
00:44:58,946 --> 00:45:01,106
you need to specify this
new option NSNetService


927
00:45:01,316 --> 00:45:02,426
ListenForConnections.


928
00:45:02,706 --> 00:45:06,646
We'll listen on IPv4 and
IPv6 for incoming connections


929
00:45:06,646 --> 00:45:10,076
and when a remote
connects to that socket,


930
00:45:10,076 --> 00:45:12,366
we will call this
new delegate method,


931
00:45:12,676 --> 00:45:15,686
netServiceDidAcceptConnection
with input stream output stream.


932
00:45:16,076 --> 00:45:20,116
You open your streams and now
you have a raw protocol stream


933
00:45:20,556 --> 00:45:26,066
to frame your own messages
onto the remote site.


934
00:45:26,326 --> 00:45:29,546
Authentication in iOS
7 gets single sign-on.


935
00:45:29,546 --> 00:45:31,896
Kerberos Authentication
is automatically handled


936
00:45:32,286 --> 00:45:34,896
by device managers that
have installed a profile


937
00:45:34,896 --> 00:45:36,066
on your device.


938
00:45:37,046 --> 00:45:39,996
You can specify which
connect type--


939
00:45:40,506 --> 00:45:42,646
what type of connection
should be authenticated based


940
00:45:42,646 --> 00:45:46,026
on the URL or by application.


941
00:45:47,476 --> 00:45:50,266
And we handle this implicitly
for outgoing connections.


942
00:45:50,596 --> 00:45:53,956
You need to know that it's
happening for your connections


943
00:45:53,956 --> 00:45:57,726
in your app, but you won't
necessarily need to have


944
00:45:57,766 --> 00:45:59,186
to do anything special about it.


945
00:45:59,716 --> 00:46:02,676
There is an-- a session,
I think it was yesterday


946
00:46:02,676 --> 00:46:04,786
"Extending your Apps for
Enterprising and Education Use"


947
00:46:04,786 --> 00:46:07,176
which you should check into
to find that more about how


948
00:46:07,226 --> 00:46:09,896
to configure a system
and how to respond--


949
00:46:10,026 --> 00:46:12,336
well, you don't have to respond,


950
00:46:12,626 --> 00:46:14,716
how to deal with Kerberos
authenticated connections.


951
00:46:15,266 --> 00:46:17,966
The final API enhancement


952
00:46:18,276 --> 00:46:21,686
in Foundation Networking is
iCloud Credential Syncing.


953
00:46:22,346 --> 00:46:24,186
When you create an
NSURL credential


954
00:46:24,236 --> 00:46:27,806
which represents the
username and password


955
00:46:27,806 --> 00:46:30,816
or client certificate, you're
presenting to the remote site.


956
00:46:31,636 --> 00:46:34,896
You specify a persistence type
for it so that we can keep track


957
00:46:34,896 --> 00:46:37,336
of it in the
NSURLCredentialStorage.


958
00:46:37,926 --> 00:46:40,436
There's a new persistence
type called synchronisable.


959
00:46:40,926 --> 00:46:43,036
When you create a credential
with this persistence type,


960
00:46:43,406 --> 00:46:45,426
it automatically could
sync through iCloud


961
00:46:45,616 --> 00:46:49,626
to all devices registered
for that iCloud account.


962
00:46:50,656 --> 00:46:52,506
In order for this to work,
we have to have a new API


963
00:46:52,756 --> 00:46:54,846
to actually remove the
credential as well.


964
00:46:54,846 --> 00:46:56,666
So there's this new
remove credential


965
00:46:56,666 --> 00:47:00,036
for protection space API
on NSURLCredentialStorage.


966
00:47:00,766 --> 00:47:03,866
You invoke this using a
dictionary of properties


967
00:47:03,866 --> 00:47:05,116
and the key you want to look


968
00:47:05,116 --> 00:47:07,646
for is the
NSURLCredentialStorage


969
00:47:07,646 --> 00:47:09,676
RemoveSynchronizableCredentials.


970
00:47:12,266 --> 00:47:15,866
So, [inaudible], most of what
we talked about is NSURLSession.


971
00:47:16,886 --> 00:47:19,046
We do think this is going to
be a good way for you guys


972
00:47:19,086 --> 00:47:21,966
to build your networking
applications in iOS 7


973
00:47:22,506 --> 00:47:24,326
and OS X Mavericks
going forward.


974
00:47:25,436 --> 00:47:27,656
It replaces NSURLConnection,
but I want to point


975
00:47:27,656 --> 00:47:29,576
out that NSURLConnection
doesn't go away.


976
00:47:29,576 --> 00:47:32,146
It's still there and you
can use your existing code,


977
00:47:32,146 --> 00:47:36,836
doesn't break but NSURLSession
is sort of the preferred way


978
00:47:37,146 --> 00:47:39,286
to do these types
of request later on.


979
00:47:40,136 --> 00:47:41,656
It gives you a lot
more customization


980
00:47:41,656 --> 00:47:42,766
over NSURLConnection.


981
00:47:44,076 --> 00:47:47,806
And it very importantly
allows you to get work done


982
00:47:47,936 --> 00:47:50,316
when you're not running.


983
00:47:50,316 --> 00:47:53,806
NSNetServices adds peer to
peer support both browsing


984
00:47:53,806 --> 00:47:58,546
and publishing and it
has a new listening API


985
00:47:59,096 --> 00:48:01,126
so that you can create
services and publish it


986
00:48:01,126 --> 00:48:05,266
on your local network and
NSURLAuthentication is enhanced


987
00:48:05,266 --> 00:48:08,756
with Kerberos single sign-on
and iCloud credential syncing.


988
00:48:10,296 --> 00:48:13,336
OK, so Paul Danbold is our Core
OS Technologies Evangelist,


989
00:48:13,336 --> 00:48:14,736
he is happy to field
any questions.


990
00:48:14,976 --> 00:48:18,016
The Foundation Class
Reference is being updated


991
00:48:18,096 --> 00:48:20,346
with documentation
for NSURLSession


992
00:48:21,226 --> 00:48:24,096
and the Developer
Forums will be available


993
00:48:24,096 --> 00:48:25,806
to answer your questions,
they will hang


994
00:48:25,806 --> 00:48:26,896
out there and answer questions.


995
00:48:28,146 --> 00:48:31,446
There's some other sessions I
want to point you out though,


996
00:48:31,636 --> 00:48:35,456
yesterday was this Managing
Apple Devices session,


997
00:48:36,346 --> 00:48:39,186
that and the Extending
Your Apps for Enterprise


998
00:48:39,186 --> 00:48:42,136
and Education Use
session is where you learn


999
00:48:42,136 --> 00:48:44,726
about Kerberos Authentication
and how that's handled.


1000
00:48:45,626 --> 00:48:47,286
Yesterday's talk on What's New


1001
00:48:47,286 --> 00:48:49,086
with Multitasking
is very important


1002
00:48:49,086 --> 00:48:51,656
and relevant to this discussion.


1003
00:48:52,616 --> 00:48:56,516
Dave Chan showed how to use
NSURLSession in response


1004
00:48:56,516 --> 00:49:00,156
to background notifications
in order to get work done


1005
00:49:01,156 --> 00:49:05,016
in response to, you know,
a server pushed token.


1006
00:49:05,176 --> 00:49:07,736
Nearby Networking with Multipeer
Connectivity follows this


1007
00:49:07,736 --> 00:49:11,186
session and we're going
to talk there about--


1008
00:49:11,636 --> 00:49:13,866
more about how to do--


1009
00:49:14,506 --> 00:49:16,986
use NSNetService to create
server use and publish service.


1010
00:49:18,376 --> 00:49:21,916
And then sounds like What's New
in State Restoration is relevant


1011
00:49:21,916 --> 00:49:26,036
because we want to know when
your application is re-launched,


1012
00:49:26,036 --> 00:49:27,306
how to update your snapshot


1013
00:49:27,626 --> 00:49:30,186
and have a nice live
experience for the user.


1014
00:49:30,476 --> 00:49:32,186
So thank you.


1015
00:49:32,186 --> 00:49:32,253
[ Applause ]


1016
00:49:32,253 --> 00:49:32,320
[ Silence ]


1017
00:49:32,320 --> 00:49:34,586
sma dv

