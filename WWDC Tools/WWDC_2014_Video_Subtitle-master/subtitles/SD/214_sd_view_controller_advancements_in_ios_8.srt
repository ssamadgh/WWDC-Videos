1
00:00:12,116 --> 00:00:12,996
>> Good morning, everyone.


2
00:00:14,516 --> 00:00:18,586
[ Applause ]


3
00:00:19,086 --> 00:00:20,596
I'm glad you guys could make it.


4
00:00:21,026 --> 00:00:22,296
My name is Bruce Nilo.


5
00:00:22,366 --> 00:00:24,746
I'm one of the engineers
on UIKit.


6
00:00:25,356 --> 00:00:28,506
And we're going to be talking
about all the new stuff


7
00:00:28,506 --> 00:00:32,616
that we've brought
into UIKit for iOS 8.


8
00:00:33,546 --> 00:00:37,276
In case no one's told
you, it's a big release.


9
00:00:37,806 --> 00:00:38,756
There's a lot of stuff.


10
00:00:38,756 --> 00:00:42,256
And two weeks ago when I was
thinking about what I was going


11
00:00:42,256 --> 00:00:44,306
to say, I said, "Piece of cake.


12
00:00:44,306 --> 00:00:46,726
I'm just going to list
all the new features.


13
00:00:47,476 --> 00:00:51,826
I'm going to also list all the
things that are going away.


14
00:00:51,826 --> 00:00:54,596
And I'm done, right?"


15
00:00:54,596 --> 00:00:57,106
Well, that's what
I ended up with,


16
00:00:57,746 --> 00:01:02,166
and I realized I
really needed to cut


17
00:01:02,316 --> 00:01:03,916
down on what I was
going to talk about.


18
00:01:04,626 --> 00:01:06,746
So this is where we ended up.


19
00:01:06,746 --> 00:01:12,456
And I just want to point out,
though, that there's a lot more


20
00:01:12,456 --> 00:01:13,776
than what I'm going
to talk about.


21
00:01:13,776 --> 00:01:19,196
One of the most important things
that we're introducing in iOS 8,


22
00:01:19,196 --> 00:01:22,466
in case you haven't heard,
is we are providing APIs


23
00:01:22,466 --> 00:01:23,926
that are more adaptive.


24
00:01:24,546 --> 00:01:29,096
What this means is that your
user interfaces can more easily


25
00:01:29,096 --> 00:01:33,766
respond to changes in size
and other changes, as well.


26
00:01:34,966 --> 00:01:39,676
UISplitViewController used to be
a kind of a pretty simple class.


27
00:01:40,366 --> 00:01:42,996
Well, it's grown up in iOS
8, and we're going to talk


28
00:01:42,996 --> 00:01:44,606
about some of the new features


29
00:01:44,606 --> 00:01:46,756
that UISplitViewController
has to offer.


30
00:01:48,536 --> 00:01:52,496
We're going to, while we're at
it, show how it's really easy


31
00:01:52,496 --> 00:01:55,596
to hide bars in ways
that you've probably seen


32
00:01:55,596 --> 00:01:56,746
in some of our own apps.


33
00:01:56,746 --> 00:02:01,036
Then we're going to
shift gears a little bit


34
00:02:01,036 --> 00:02:03,046
and talk about presentations.


35
00:02:03,486 --> 00:02:07,286
Presentation controllers have
been introduced and are part


36
00:02:07,286 --> 00:02:10,136
of a whole architectural
revamping


37
00:02:10,136 --> 00:02:12,226
of how view controllers
are presented


38
00:02:12,226 --> 00:02:17,086
and how you can create great
custom presentations yourselves.


39
00:02:17,146 --> 00:02:20,536
That gave us the
opportunity, by the way,


40
00:02:20,536 --> 00:02:22,396
to redo popovers, as well.


41
00:02:22,716 --> 00:02:25,036
And popovers have
now become integrated


42
00:02:25,266 --> 00:02:27,346
with UIViewController
presentations.


43
00:02:28,556 --> 00:02:31,136
Finally we're going to talk-not
finally-we're also going to talk


44
00:02:31,136 --> 00:02:33,636
about new a API that
we introduced


45
00:02:33,636 --> 00:02:35,906
that builds upon
transition coordinators,


46
00:02:37,006 --> 00:02:40,036
that also helps your
applications adapt.


47
00:02:40,556 --> 00:02:43,666
And, finally, there's a subtle
but pretty important change


48
00:02:43,666 --> 00:02:47,486
in terms of the coordinate
spaces


49
00:02:47,486 --> 00:02:49,706
that you've grown to love.


50
00:02:49,706 --> 00:02:52,266
And we'll talk about that
briefly when we wrap up.


51
00:02:53,256 --> 00:02:55,906
So, you've probably
seen this picture,


52
00:02:55,906 --> 00:02:57,786
or a variant of it, a few times.


53
00:02:59,586 --> 00:03:01,436
Many hierarchical applications


54
00:03:01,436 --> 00:03:04,006
on a phone might structure
themselves this way,


55
00:03:04,006 --> 00:03:05,656
inside of a navigation
controller.


56
00:03:06,306 --> 00:03:09,736
And there might be some
detail that you would see


57
00:03:11,036 --> 00:03:12,576
when you hit the Back button.


58
00:03:16,726 --> 00:03:19,256
And on an iPad, you might choose


59
00:03:19,256 --> 00:03:22,236
to structure it a
little bit differently.


60
00:03:22,556 --> 00:03:24,626
Again, this is all
kind of familiar stuff.


61
00:03:25,786 --> 00:03:28,716
But there's no particular
reason why you shouldn't be able


62
00:03:28,716 --> 00:03:32,156
to do this on an iPhone, if
it suited your application.


63
00:03:32,446 --> 00:03:34,616
We're going to show
how that's possible.


64
00:03:36,756 --> 00:03:44,236
So prior to iOS 8, most of
your application coarse-grained


65
00:03:44,236 --> 00:03:49,236
structure was determined by
looking at the device type,


66
00:03:49,236 --> 00:03:52,966
and possibly the interface
orientation, as well as the size


67
00:03:52,966 --> 00:03:56,756
in which your user
interface was being presented.


68
00:03:58,106 --> 00:04:00,926
In iOS 8, we've taken
the first two


69
00:04:01,056 --> 00:04:02,966
and abstracted it a little bit


70
00:04:02,966 --> 00:04:06,276
into two new concepts called
traits and trait collections.


71
00:04:07,106 --> 00:04:08,666
Size is still available,


72
00:04:09,546 --> 00:04:13,266
but typically size is a finer
grain type of layout operation


73
00:04:13,266 --> 00:04:16,866
that can be easily
accommodated using technologies


74
00:04:16,866 --> 00:04:17,856
like Auto Layout.


75
00:04:18,366 --> 00:04:20,426
We're going to talk a little
bit more about the former.


76
00:04:20,426 --> 00:04:23,566
We'll also address the
latter a little bit.


77
00:04:24,456 --> 00:04:26,336
So what is a "trait collection"?


78
00:04:27,326 --> 00:04:33,426
A trait collection, simply
put, is a set of traits.


79
00:04:33,786 --> 00:04:34,786
Not too surprising.


80
00:04:37,026 --> 00:04:41,146
On a phone, you might
see the window


81
00:04:41,226 --> 00:04:45,656
of your application
return a trait collection


82
00:04:45,926 --> 00:04:49,536
that has the following
traits: two size classes,


83
00:04:49,776 --> 00:04:51,876
an idiom, and a display scale.


84
00:04:52,276 --> 00:04:58,496
This typically is the way a
phone's traits are structured.


85
00:04:58,496 --> 00:05:01,236
One of the most important traits


86
00:05:01,236 --> 00:05:03,926
that we've introduced
is size class.


87
00:05:04,406 --> 00:05:09,096
And size class deals
with, on a coarse level,


88
00:05:09,096 --> 00:05:13,576
the available space that
your application has


89
00:05:13,576 --> 00:05:15,156
and can therefore make decisions


90
00:05:15,156 --> 00:05:16,636
about what its structure
should be.


91
00:05:17,406 --> 00:05:18,736
Let's look at that quickly.


92
00:05:20,066 --> 00:05:20,686
Here we have kind


93
00:05:20,686 --> 00:05:23,946
of a cartoonish representation
of an iPhone.


94
00:05:27,666 --> 00:05:32,706
And typically, the
vertical axis is going


95
00:05:33,076 --> 00:05:36,116
to have a regular size class,


96
00:05:36,116 --> 00:05:37,976
whereas the horizontal
axis is going


97
00:05:37,976 --> 00:05:39,786
to have a compact size class.


98
00:05:41,356 --> 00:05:43,346
If you rotate a phone,


99
00:05:46,886 --> 00:05:51,006
we say that the size classes are
constrained in both the vertical


100
00:05:51,006 --> 00:05:52,686
and the horizontal dimensions.


101
00:05:52,686 --> 00:05:57,966
Now, an iPad is a
little bit more free.


102
00:05:59,556 --> 00:06:02,136
It's regular in all
of its dimensions,


103
00:06:02,266 --> 00:06:05,096
or it has regular size classes
in all of its dimensions,


104
00:06:05,276 --> 00:06:08,316
and that holds true when
you rotate it, as well.


105
00:06:11,876 --> 00:06:16,646
But that's not the full story,
because some view controllers,


106
00:06:16,646 --> 00:06:20,456
like split view controller, can
determine that its children,


107
00:06:20,456 --> 00:06:24,176
in this case the primary child,
which is on the left side,


108
00:06:24,796 --> 00:06:30,366
has a more constrained size
class in either dimension.


109
00:06:30,586 --> 00:06:32,186
For a split view controller,


110
00:06:32,446 --> 00:06:35,476
it constrains the
horizontal size class.


111
00:06:39,556 --> 00:06:46,956
So, a size class is all about
informing your application


112
00:06:47,356 --> 00:06:50,426
of the available space
in some coarse way


113
00:06:50,426 --> 00:06:51,606
that you can make decisions


114
00:06:51,606 --> 00:06:54,676
about how you would
substantially alter the


115
00:06:54,676 --> 00:06:56,056
application's structure.


116
00:07:01,326 --> 00:07:05,386
We have API on specific objects
that vend trait collections.


117
00:07:06,176 --> 00:07:11,676
And in these cases they have
values for both the horizontal


118
00:07:11,676 --> 00:07:13,406
and the vertical size classes.


119
00:07:13,736 --> 00:07:16,896
Now, I like to think about the
trait collections that come back


120
00:07:16,896 --> 00:07:21,316
from these objects as defining
a point in a trait space.


121
00:07:23,666 --> 00:07:27,716
We've introduced a new
protocol that a number


122
00:07:27,716 --> 00:07:30,286
of our objects conform to
which is a trait environment.


123
00:07:30,286 --> 00:07:32,406
And you'll see the
hierarchy on the right is kind


124
00:07:32,406 --> 00:07:35,306
of a window hierarchy
that starts from a screen


125
00:07:35,486 --> 00:07:37,086
and proceeds down all the way


126
00:07:37,086 --> 00:07:39,276
to the leaf view
elements that you have.


127
00:07:39,586 --> 00:07:43,066
All these objects conform to
the trait environment protocol,


128
00:07:43,066 --> 00:07:45,256
which means you can ask
them for a trait collection,


129
00:07:45,556 --> 00:07:48,526
and what you get back is going
to be a point in a trait space


130
00:07:48,666 --> 00:07:50,606
where every single
trait has a value.


131
00:07:51,356 --> 00:07:55,646
And not all of these objects
define those values directly.


132
00:07:56,116 --> 00:07:59,176
So, for example, if you asked
for the scale of a leaf,


133
00:07:59,176 --> 00:08:02,846
the scale trait of the leaf
of a view, it might actually,


134
00:08:02,846 --> 00:08:04,226
the system might
walk all the way


135
00:08:04,226 --> 00:08:06,346
up to the screen to get that.


136
00:08:06,376 --> 00:08:07,216
But the trait collection


137
00:08:07,216 --> 00:08:09,736
that you get back will have
a value for that scale.


138
00:08:10,766 --> 00:08:14,826
Finally, you will notice
that whenever a trait changes


139
00:08:14,826 --> 00:08:17,606
in a trait collection,
your object,


140
00:08:17,606 --> 00:08:20,536
the appropriate object will get
a traitCollectionDidChange just


141
00:08:20,536 --> 00:08:24,146
before that object is laid out,
so you can respond to that.


142
00:08:26,296 --> 00:08:30,576
So I kind of implied before that
you can, that a view controller,


143
00:08:30,576 --> 00:08:31,816
such as a split view controller,


144
00:08:31,816 --> 00:08:33,586
can override the
traits for a child.


145
00:08:34,395 --> 00:08:36,756
How do you do this?


146
00:08:36,936 --> 00:08:38,996
Well, we've introduced
a couple of new methods


147
00:08:39,096 --> 00:08:42,216
on UIViewController which
allow you to do precisely this.


148
00:08:42,326 --> 00:08:47,426
SetOverrideTraitCollection
can be used by a parent


149
00:08:47,656 --> 00:08:50,676
to indicate what the
appropriate traits are


150
00:08:50,676 --> 00:08:52,146
for any one of its children.


151
00:08:52,366 --> 00:08:56,236
The trait collection that
you pass in, in this case,


152
00:08:56,236 --> 00:08:57,966
isn't a point in a trait space;


153
00:08:57,966 --> 00:09:02,936
it might just be a single trait
value which is then overridden.


154
00:09:03,446 --> 00:09:06,216
So what I wanted to do was,
before I go into the rest


155
00:09:06,216 --> 00:09:08,856
of the talk, is I put together
kind of a toy application,


156
00:09:09,606 --> 00:09:11,556
which is going to highlight
some of the features


157
00:09:11,556 --> 00:09:12,876
that we're going to
talk about today.


158
00:09:14,176 --> 00:09:18,806
This is kind of my canonical
little photo note-taking


159
00:09:18,876 --> 00:09:19,986
toy application.


160
00:09:20,836 --> 00:09:23,986
What you see here is basically
a pretty standard thing.


161
00:09:23,986 --> 00:09:26,306
You see a navigation controller.


162
00:09:26,776 --> 00:09:30,056
And I can hit the Back
button with this Photos,


163
00:09:30,216 --> 00:09:32,766
and I get a list, which
is a simple table view.


164
00:09:33,296 --> 00:09:35,956
I can select things.


165
00:09:35,956 --> 00:09:36,576
That's great.


166
00:09:37,276 --> 00:09:39,276
What's interesting, is that
this is actually a split


167
00:09:39,276 --> 00:09:40,106
view controller.


168
00:09:41,416 --> 00:09:46,236
Notice when I rotate, I stay
inside a navigation controller.


169
00:09:46,556 --> 00:09:47,946
However, I can do
something interesting.


170
00:09:47,946 --> 00:09:52,206
You see there's a Split button
on the bottom of this toolbar.


171
00:09:52,516 --> 00:09:55,856
If I hit it, you can now see
a little bit more clearly


172
00:09:55,856 --> 00:09:58,766
that this is, in fact, really
a split view controller.


173
00:09:59,546 --> 00:10:04,046
You'll also notice that
when I-let's hide this.


174
00:10:04,046 --> 00:10:06,256
I can tap and interact
with the bars.


175
00:10:06,256 --> 00:10:12,016
I can create, I can move that
primary controller off-screen.


176
00:10:12,646 --> 00:10:15,656
But one of the things we're
going to show is how easy it is


177
00:10:15,656 --> 00:10:20,126
to hide the bars if I
tap on a view controller.


178
00:10:20,126 --> 00:10:22,166
I can also get that Safari look


179
00:10:22,386 --> 00:10:24,876
where the bars condense
really easily.


180
00:10:28,066 --> 00:10:32,816
Alright. Let's go back


181
00:10:32,816 --> 00:10:37,816
into a regular old
navigation controller look,


182
00:10:37,946 --> 00:10:40,976
and let's hit this Note button.


183
00:10:41,046 --> 00:10:46,336
The Note button is going
to do a presentation.


184
00:10:46,336 --> 00:10:48,416
This is a view controller
presentation.


185
00:10:49,036 --> 00:10:51,716
It takes advantage of
a couple of new classes


186
00:10:51,716 --> 00:10:54,126
that I might mention as
we go through the talk.


187
00:10:55,036 --> 00:10:58,356
What's interesting is this is,
in fact, a popover presentation.


188
00:10:59,006 --> 00:11:00,816
Now, I'll get into
that a little bit later


189
00:11:00,816 --> 00:11:01,826
because it certainly
doesn't look


190
00:11:01,826 --> 00:11:03,326
like a popover presentation.


191
00:11:03,806 --> 00:11:07,986
But if I do something special
on this little toy app-well,


192
00:11:07,986 --> 00:11:09,526
it didn't quite do it that time.


193
00:11:10,296 --> 00:11:12,906
Now you'll see that that same
thing is, in fact, a popover.


194
00:11:12,906 --> 00:11:15,266
And we'll go through
that a little bit.


195
00:11:16,296 --> 00:11:20,426
Finally, I wanted to talk about,
a little bit about rotation.


196
00:11:20,506 --> 00:11:25,376
And to do that, I'm going to
present another view controller.


197
00:11:25,376 --> 00:11:28,116
This time it's a collection view
controller, which has a bunch


198
00:11:28,116 --> 00:11:29,826
of little thumbnail photos.


199
00:11:29,826 --> 00:11:31,816
And if I were to
rotate the device now,


200
00:11:32,366 --> 00:11:36,116
the normal collection view flow
layout behavior would basically


201
00:11:36,116 --> 00:11:39,686
relay things out so that
everything is oriented now


202
00:11:39,946 --> 00:11:41,536
in the horizontal direction.


203
00:11:41,986 --> 00:11:45,926
However, if I wanted to change
what happened when I rotated


204
00:11:45,926 --> 00:11:48,116
so that it did something
more akin to this,


205
00:11:48,116 --> 00:11:51,956
there's some interesting
things that we can do.


206
00:11:52,206 --> 00:11:56,966
And this is a perfect example
of when you would use some


207
00:11:56,966 --> 00:11:58,716
of the methods like willRotate,


208
00:11:58,716 --> 00:12:00,476
interface orientation,
and so forth.


209
00:12:00,476 --> 00:12:02,486
So we're going to talk about
that a little bit, as well.


210
00:12:03,296 --> 00:12:06,356
Alright, so enough of a taste of
what we're going to talk about.


211
00:12:06,356 --> 00:12:10,836
Let's go back to
the presentation.


212
00:12:15,106 --> 00:12:17,106
And let's talk about
split view controller.


213
00:12:20,276 --> 00:12:24,866
So as I kind of implied, split
view controller is now available


214
00:12:25,236 --> 00:12:27,696
on the phone, as
well as on the iPad,


215
00:12:27,986 --> 00:12:32,316
and it has this interesting
new property.


216
00:12:32,546 --> 00:12:35,546
It has a property of being
collapsed or not collapsed.


217
00:12:36,556 --> 00:12:39,196
Now, what does it mean for
a split view controller


218
00:12:39,196 --> 00:12:41,456
to be collapsed or expanded?


219
00:12:42,256 --> 00:12:45,316
Well, an expanded
split view controller,


220
00:12:45,896 --> 00:12:47,956
it's kind of obvious,
might look like this.


221
00:12:48,566 --> 00:12:51,086
However, it's not
just a question


222
00:12:51,086 --> 00:12:53,516
of the two children
being visible.


223
00:12:54,466 --> 00:12:58,846
So I'm highlighting the
secondary view controller


224
00:12:58,846 --> 00:13:02,806
of this split view controller,
and you're going to notice


225
00:13:02,806 --> 00:13:05,606
that there's a little
button off to the left.


226
00:13:05,606 --> 00:13:07,536
We call that the
displayModeButtonItem.


227
00:13:08,176 --> 00:13:11,596
When I click on that,
I can expand


228
00:13:11,596 --> 00:13:13,106
out the split view controller.


229
00:13:13,386 --> 00:13:14,866
And even though we're
only looking


230
00:13:14,866 --> 00:13:16,496
at the secondary controller,


231
00:13:16,656 --> 00:13:19,766
that split view controller
is still expanded.


232
00:13:19,766 --> 00:13:20,976
It is not collapsed.


233
00:13:20,976 --> 00:13:23,486
And the reason why that is
is because it's possible


234
00:13:23,776 --> 00:13:27,396
to show the primary
controller at the same time


235
00:13:27,766 --> 00:13:29,896
as the secondary controller.


236
00:13:30,356 --> 00:13:35,456
On the other hand, this is a
collapsed split view controller.


237
00:13:35,486 --> 00:13:38,146
You'll notice that the
displayModeButtonItem that was


238
00:13:38,146 --> 00:13:39,656
on the left side is gone.


239
00:13:39,656 --> 00:13:41,836
You can no longer
show the primary


240
00:13:41,836 --> 00:13:43,856
and secondary controllers
together.


241
00:13:44,106 --> 00:13:47,026
They've been collapsed,
and you can now get


242
00:13:47,026 --> 00:13:49,536
to the primary controller
by hitting the Back button,


243
00:13:49,696 --> 00:13:51,806
which is up on the
top-left corner.


244
00:13:52,266 --> 00:13:53,636
So that's kind of
what the difference is


245
00:13:53,636 --> 00:13:54,996
between the split
view controller


246
00:13:54,996 --> 00:13:57,576
in its collapsed state
and its expanded state.


247
00:13:58,806 --> 00:14:02,456
It's important to know
that split view controller


248
00:14:02,456 --> 00:14:06,286
by default are collapsed
when they're


249
00:14:06,286 --> 00:14:08,736
in horizontally compact
containers.


250
00:14:09,226 --> 00:14:13,216
So by default on a phone, if
you use a split view controller,


251
00:14:13,216 --> 00:14:18,996
it's going to appear in
this collapsed state.


252
00:14:19,186 --> 00:14:24,126
So I've implied that you can
enable the expanded state


253
00:14:24,126 --> 00:14:26,276
of a split view controller
on the phone already.


254
00:14:27,336 --> 00:14:28,136
How do you do that?


255
00:14:28,946 --> 00:14:31,246
Well, it's actually quite
simple and straightforward.


256
00:14:32,356 --> 00:14:34,136
You probably know
the answer already.


257
00:14:34,816 --> 00:14:38,096
First of all, you're going to
take your split view controller


258
00:14:38,096 --> 00:14:39,476
and you're going to embed it


259
00:14:39,476 --> 00:14:45,676
in a parent container view
controller, as follows.


260
00:14:46,896 --> 00:14:51,666
You're then going to call
setOverrideTraitCollection.


261
00:14:52,626 --> 00:14:56,546
And you're going to inform that
child split view controller


262
00:14:56,546 --> 00:14:59,846
that it is now in a horizontally
regular environment.


263
00:15:01,196 --> 00:15:05,876
The second you do that, the
split view controller morphs


264
00:15:05,876 --> 00:15:09,606
into its expanded or
not collapsed state.


265
00:15:10,596 --> 00:15:12,686
You'll notice that the
displayModeButtonItem,


266
00:15:12,686 --> 00:15:15,206
which is titled Photos
in the lower left corner,


267
00:15:15,206 --> 00:15:16,716
has now become enabled.


268
00:15:17,696 --> 00:15:21,596
If I wanted to show both
controllers together,


269
00:15:21,596 --> 00:15:26,156
side by side, I could click
on that displayModeButtonItem.


270
00:15:26,696 --> 00:15:28,956
But we've also introduced
a property called


271
00:15:28,956 --> 00:15:31,826
preferredDisplayMode, which
you can use programmatically.


272
00:15:34,746 --> 00:15:38,446
If you set the
preferredDisplayMode


273
00:15:38,446 --> 00:15:44,416
to the all visible
value, it's the same as,


274
00:15:45,216 --> 00:15:47,236
the same behavior would
occur as if you clicked


275
00:15:47,236 --> 00:15:48,666
on the displayModeButtonItem.


276
00:15:48,666 --> 00:15:51,216
And you'll also notice the
displayModeButtonItem morphs


277
00:15:51,436 --> 00:15:55,926
into this kind of
diagonal double arrow.


278
00:15:57,576 --> 00:16:00,346
These items, this
display mode item


279
00:16:00,346 --> 00:16:03,006
and this behavior
are all customizable.


280
00:16:03,006 --> 00:16:06,226
And this is via delegate
API that you can look


281
00:16:06,226 --> 00:16:07,556
at in the header files
that I'm not going


282
00:16:07,556 --> 00:16:09,116
to have time to talk
about today.


283
00:16:09,626 --> 00:16:14,536
So to go over some of that API,


284
00:16:14,536 --> 00:16:18,626
preferredDisplayMode
is an enumeration.


285
00:16:19,326 --> 00:16:23,576
Enumerated values are automatic,
hidden, visible, and overlay.


286
00:16:23,636 --> 00:16:25,716
Automatic is the old behavior


287
00:16:25,716 --> 00:16:28,356
that you are familiar
with on iPads.


288
00:16:29,096 --> 00:16:31,576
Hidden and visible
are explicit means


289
00:16:31,576 --> 00:16:34,296
by which you can
control the layout


290
00:16:34,296 --> 00:16:36,796
of the split view
controller so that the primary


291
00:16:36,796 --> 00:16:38,516
and secondary are side by side.


292
00:16:38,776 --> 00:16:40,636
An overlay is an explicit way


293
00:16:40,636 --> 00:16:43,096
that you can have the
primary kind of go


294
00:16:43,096 --> 00:16:45,006
over the top of the secondary.


295
00:16:47,536 --> 00:16:52,356
The displayModeButtonItem is
also accessible in this API,


296
00:16:52,356 --> 00:16:55,326
so you can ask the split view
controller for it and put it


297
00:16:55,326 --> 00:16:56,536
in whatever bar you want.


298
00:16:56,536 --> 00:16:59,676
Although I'm not going to say it
explicitly, if you were to look


299
00:16:59,676 --> 00:17:01,786
in the header files of
UISplitViewController,


300
00:17:01,786 --> 00:17:04,955
you would find that most
of the API that used


301
00:17:04,955 --> 00:17:07,955
to be there is now deprecated
and replaced by new API.


302
00:17:11,366 --> 00:17:13,786
One thing that I'd like
to say is that a lot


303
00:17:13,786 --> 00:17:16,965
of people have always wanted
to control the split width,


304
00:17:16,965 --> 00:17:18,976
and we've made that
really easy to do.


305
00:17:23,406 --> 00:17:25,165
So there's a new
method, a new property,


306
00:17:25,165 --> 00:17:27,205
preferredPrimary
ColumnWidthFraction.


307
00:17:27,366 --> 00:17:29,756
And if I were to set
that to one-half, say,


308
00:17:31,206 --> 00:17:32,756
the split width changes.


309
00:17:35,476 --> 00:17:38,606
The API that enables
that is this.


310
00:17:38,606 --> 00:17:41,126
You can set a minimum
and maximum bound


311
00:17:41,126 --> 00:17:43,266
of the split width
in terms of points.


312
00:17:44,396 --> 00:17:46,706
You specify the split
in terms of a fraction


313
00:17:46,706 --> 00:17:49,616
and you can read back
the actual point value


314
00:17:50,136 --> 00:17:51,806
with the primary
column width property.


315
00:17:55,676 --> 00:17:56,966
So what have we learned here?


316
00:17:57,456 --> 00:18:00,056
One is, is that split view
controllers can be used


317
00:18:00,056 --> 00:18:01,606
on both the iPhone and the iPad.


318
00:18:01,876 --> 00:18:05,606
This makes it easy to write
code that is kind of agnostic


319
00:18:05,606 --> 00:18:08,596
about the platform that it's
going to be deployed on.


320
00:18:09,016 --> 00:18:11,506
If you have a certain
type of application layout


321
00:18:11,506 --> 00:18:15,016
that makes sense in
either a collapsed state


322
00:18:15,016 --> 00:18:17,406
or an expanded split view
controller state based


323
00:18:17,406 --> 00:18:21,166
on the available space,
create a split view controller


324
00:18:21,166 --> 00:18:23,536
and the split view controller
will adapt accordingly.


325
00:18:25,726 --> 00:18:28,276
Split view controllers
are collapsed by default


326
00:18:28,276 --> 00:18:30,446
in horizontally compact
environments.


327
00:18:32,696 --> 00:18:35,996
The displayMode property
controls the appearance


328
00:18:35,996 --> 00:18:39,586
of the primary or left
child view controller.


329
00:18:39,586 --> 00:18:44,956
And you can also now
specify the split width.


330
00:18:47,426 --> 00:18:50,866
So there are a lot of
other API that we added


331
00:18:50,866 --> 00:18:51,956
to split view controller.


332
00:18:52,746 --> 00:18:55,076
There's going to be a talk
immediately following this one


333
00:18:55,076 --> 00:18:58,696
which talks about in more depth
all of the new adaptive APIs


334
00:18:58,696 --> 00:19:01,146
that we've added
to UIViewController


335
00:19:01,146 --> 00:19:03,796
and UISplitViewController
that you can attend


336
00:19:03,796 --> 00:19:05,906
and get more information.


337
00:19:07,036 --> 00:19:08,986
So let's talk about
condensing bars.


338
00:19:10,176 --> 00:19:13,096
It's all about available space
and highlighting your content.


339
00:19:13,156 --> 00:19:15,116
So we wanted to make
it easy to do.


340
00:19:15,886 --> 00:19:18,166
It's really easy now
to hide your bars.


341
00:19:19,656 --> 00:19:24,456
Just set the hideBarsOnTop
property, and they're gone.


342
00:19:24,556 --> 00:19:24,676
If you-


343
00:19:27,516 --> 00:19:33,306
[ Applause ]


344
00:19:33,806 --> 00:19:35,336
So what about that
gray, you know,


345
00:19:35,336 --> 00:19:39,106
kind of Safari-looking
condensing bar behavior?


346
00:19:39,436 --> 00:19:41,326
Well, we've added a
property for that, too.


347
00:19:42,176 --> 00:19:45,656
Just set it to YES; when you
swipe, those bars condense.


348
00:19:46,516 --> 00:19:52,716
[ Applause ]


349
00:19:53,216 --> 00:19:55,946
So we've added a couple of
other properties, as well.


350
00:19:56,056 --> 00:19:58,696
You know, the bars
can hide when you're


351
00:19:58,696 --> 00:20:01,596
in a vertically compact
environment.


352
00:20:02,256 --> 00:20:04,546
They might condense when
the keyboard appears.


353
00:20:04,546 --> 00:20:07,736
You can control this
all programmatically


354
00:20:07,736 --> 00:20:11,596
with an animatable property
called navigationBarCondensed.


355
00:20:11,736 --> 00:20:14,116
Well, at least you can
control the condensing behavior


356
00:20:14,116 --> 00:20:17,586
that way.


357
00:20:17,796 --> 00:20:20,606
So, yeah, that's it
for condensing bars.


358
00:20:22,656 --> 00:20:25,666
Okay, now the easy
stuff is all done.


359
00:20:25,666 --> 00:20:27,946
Let's talk about
presentation controllers.


360
00:20:28,976 --> 00:20:31,966
We have revamped the
presentation architecture


361
00:20:31,966 --> 00:20:34,986
for view controllers on iOS 8.


362
00:20:37,036 --> 00:20:41,626
You might recall that in
iOS 7 we allowed developers


363
00:20:41,626 --> 00:20:45,066
for the first time to
customize what the presentation


364
00:20:45,066 --> 00:20:46,986
transitions looked like.


365
00:20:48,236 --> 00:20:51,476
Let's go back and
kind of talk about how


366
00:20:51,476 --> 00:20:53,426
that looked and how
you did that.


367
00:20:53,996 --> 00:20:56,586
So, first of all, what you
would do is, the view controller


368
00:20:56,586 --> 00:20:58,166
that you wanted to present,


369
00:20:58,426 --> 00:21:01,766
you would set the
presentation style to Custom.


370
00:21:03,016 --> 00:21:06,116
You would also set a
transitioning delegate


371
00:21:06,176 --> 00:21:09,546
on that presented, on that view
controller to be presented.


372
00:21:10,106 --> 00:21:13,106
And then you would just
present the way you normally do.


373
00:21:13,346 --> 00:21:14,816
You'd tell the presenting
view controller


374
00:21:14,816 --> 00:21:18,066
presentViewController, at which
point the system takes over.


375
00:21:19,626 --> 00:21:22,876
UIKit will ask the
transitioning delegate


376
00:21:23,146 --> 00:21:26,776
for the animation
controller that is your object


377
00:21:26,776 --> 00:21:27,626
that is vended


378
00:21:27,626 --> 00:21:29,836
by the transitioning
delegate that you've set.


379
00:21:29,836 --> 00:21:35,266
At which point UIKit
prepares this internal object


380
00:21:36,386 --> 00:21:39,886
which conforms to this context
transitioning protocol to set


381
00:21:39,886 --> 00:21:42,636
up some information that
you need to know in order


382
00:21:42,636 --> 00:21:44,706
to drive your custom transition.


383
00:21:45,766 --> 00:21:47,596
The views that are participating


384
00:21:47,636 --> 00:21:51,276
in this custom presentation
are accessed via this


385
00:21:51,276 --> 00:21:53,146
viewControllerForKey property.


386
00:21:53,146 --> 00:21:55,006
And then there's
frame information


387
00:21:55,006 --> 00:21:55,976
and all of that stuff.


388
00:21:56,296 --> 00:22:00,826
Now this object is passed into
another method that is generated


389
00:22:00,826 --> 00:22:04,926
by UIKit to your animation
controller, animateTransition.


390
00:22:05,776 --> 00:22:09,486
You do your animation, the
presentation's complete,


391
00:22:09,716 --> 00:22:11,666
and the animation
controller goes away,


392
00:22:11,666 --> 00:22:13,176
and everything's good.


393
00:22:13,176 --> 00:22:17,566
Well, there were a couple
of problems with that.


394
00:22:17,566 --> 00:22:19,496
Let's look at the view hierarchy


395
00:22:19,586 --> 00:22:22,006
to see what those
problems might have been.


396
00:22:23,086 --> 00:22:25,116
So we have the presenting
view controller's view.


397
00:22:26,186 --> 00:22:29,226
When the animation controller's
vended, we set up kind


398
00:22:29,226 --> 00:22:32,166
of the environment in which this
transition animation is going


399
00:22:32,166 --> 00:22:33,196
to take place.


400
00:22:33,376 --> 00:22:36,116
That's kind of the container
view that the context,


401
00:22:36,116 --> 00:22:38,816
the transitioning
context is pointing


402
00:22:38,816 --> 00:22:40,996
to that your animation
controller accesses.


403
00:22:42,516 --> 00:22:46,896
When we send the
animateTransition message


404
00:22:46,896 --> 00:22:48,296
to the animation controller,


405
00:22:49,786 --> 00:22:52,156
it's the animation
controller now that's groveling


406
00:22:52,156 --> 00:22:55,406
in the view hierarchy,
adding special views,


407
00:22:55,486 --> 00:22:58,156
adding the presented
view controller's view,


408
00:22:58,486 --> 00:23:02,996
and one of the neat things-it
was a feature in iOS 7-is


409
00:23:02,996 --> 00:23:04,606
that we didn't remove
the presenting view


410
00:23:04,606 --> 00:23:05,476
controller's view.


411
00:23:05,856 --> 00:23:09,316
And so this is what
it ended up with,


412
00:23:09,316 --> 00:23:10,906
and the animation
controller went away.


413
00:23:12,346 --> 00:23:15,906
Okay, so the first question
that comes to mind is,


414
00:23:16,506 --> 00:23:19,346
what object owns all these
other-these views that are lying


415
00:23:19,346 --> 00:23:22,426
around that just got added
by that animation controller?


416
00:23:22,426 --> 00:23:25,546
Well, there wasn't a
good answer for that.


417
00:23:25,546 --> 00:23:29,746
In fact, that ended up
causing a tight coupling


418
00:23:30,206 --> 00:23:31,806
between the animation
controllers


419
00:23:31,806 --> 00:23:34,486
that were doing a presentation
and the animation controllers


420
00:23:34,486 --> 00:23:35,706
that were doing a dismissal.


421
00:23:36,446 --> 00:23:39,316
Sometimes that was
easy to manage.


422
00:23:39,436 --> 00:23:41,076
Sometimes it caused problems.


423
00:23:41,646 --> 00:23:42,976
It often caused problems


424
00:23:42,976 --> 00:23:45,576
when view controller
presentations were being stacked


425
00:23:45,576 --> 00:23:46,566
on top of one another.


426
00:23:48,206 --> 00:23:50,066
So let's look at
what we do in iOS 8.


427
00:23:50,706 --> 00:23:53,046
It's going to look pretty
similar in the beginning.


428
00:23:53,046 --> 00:23:55,086
You're going to set
the presentation style,


429
00:23:55,446 --> 00:23:56,286
just like before.


430
00:23:56,286 --> 00:23:58,556
You're going to set a
transitioning delegate,


431
00:23:58,986 --> 00:23:59,916
just like before.


432
00:24:00,966 --> 00:24:03,996
You're going to send a
presentViewController message


433
00:24:04,056 --> 00:24:06,746
to the presenting view
controller, just like before.


434
00:24:08,476 --> 00:24:12,396
However, now the transitioning
delegate has grown a couple


435
00:24:12,396 --> 00:24:13,166
of new methods.


436
00:24:13,466 --> 00:24:16,806
You can now get then
this new object called a


437
00:24:16,806 --> 00:24:18,056
presentation controller.


438
00:24:19,436 --> 00:24:24,326
And now it is the presentation
controller that's responsible


439
00:24:24,516 --> 00:24:26,186
for asking the transitioning
delegate


440
00:24:26,266 --> 00:24:29,976
for the animation
controller and, in fact,


441
00:24:29,976 --> 00:24:32,826
for driving the actual
transition.


442
00:24:32,826 --> 00:24:34,726
Now, there's a lot of
neat things under the hood


443
00:24:34,726 --> 00:24:37,006
that are going on
here, and there's going


444
00:24:37,006 --> 00:24:39,856
to be a whole talk
tomorrow, I believe,


445
00:24:39,906 --> 00:24:41,916
about presentation
controllers, in depth,


446
00:24:41,916 --> 00:24:46,826
and how we used the UIKit to
introduce some new API, as well.


447
00:24:47,796 --> 00:24:50,796
But for now, let's
look at what's going


448
00:24:50,796 --> 00:24:51,806
on in the view hierarchy.


449
00:24:52,936 --> 00:24:56,846
So now, you'll remember you
have this view hierarchy


450
00:24:56,846 --> 00:24:58,756
that corresponds to
this custom transition.


451
00:24:59,066 --> 00:25:00,836
The presentation
controller's still around,


452
00:25:00,836 --> 00:25:03,676
and it holds a reference
to the container view,


453
00:25:03,986 --> 00:25:06,306
which is where the whole
transition is happening.


454
00:25:07,546 --> 00:25:08,826
It also holds a reference


455
00:25:08,826 --> 00:25:10,586
to this thing called
a presented view.


456
00:25:11,286 --> 00:25:12,676
Now I want to point out,


457
00:25:12,676 --> 00:25:16,576
the presented view is
not necessarily the view


458
00:25:16,576 --> 00:25:18,546
of the view controller
that's being presented.


459
00:25:19,346 --> 00:25:21,776
Maybe I put a drop
shadow around that view


460
00:25:21,896 --> 00:25:24,406
because that's what my
custom presentation demanded.


461
00:25:25,956 --> 00:25:28,306
In order to accommodate that,


462
00:25:29,516 --> 00:25:32,746
we had to augment the context
transitioning protocol a


463
00:25:32,746 --> 00:25:33,196
little bit.


464
00:25:33,386 --> 00:25:36,536
So we added this new
method called viewForKey.


465
00:25:37,346 --> 00:25:39,426
ViewControllerForKey
still exists,


466
00:25:39,426 --> 00:25:42,266
but viewForKey may
return a different view


467
00:25:42,266 --> 00:25:44,406
than the viewControllerForKey.


468
00:25:44,636 --> 00:25:46,876
And so when you build a
custom animation controller,


469
00:25:46,876 --> 00:25:50,296
you want to make sure that
you use the viewForKey methods


470
00:25:50,296 --> 00:25:53,426
to figure out which views
are actually participating


471
00:25:53,656 --> 00:25:54,526
in the animation.


472
00:25:58,056 --> 00:26:02,366
A presentation controller can
also add other types of views


473
00:26:02,366 --> 00:26:05,966
that are completely
unknown to other types


474
00:26:05,966 --> 00:26:09,176
of presentation controllers,
say, like a dimming view


475
00:26:09,176 --> 00:26:13,976
that it wants to put over the
entire back of the presentation.


476
00:26:15,926 --> 00:26:18,256
I mentioned that in iOS 7,


477
00:26:18,676 --> 00:26:22,196
by default the presenting view
controller's view was left


478
00:26:22,196 --> 00:26:23,266
in the window hierarchy.


479
00:26:23,346 --> 00:26:25,576
Well, presentation controllers
have a very rich API,


480
00:26:25,576 --> 00:26:29,536
and if you build your own,
you can specify properties


481
00:26:29,536 --> 00:26:34,156
such as shouldRemove, should the
presentation view controller's


482
00:26:34,156 --> 00:26:35,326
view be removed or not.


483
00:26:35,326 --> 00:26:38,316
And if you set it to YES, it
will automatically get removed.


484
00:26:40,156 --> 00:26:43,596
There's one other property
which is, I'm raising here


485
00:26:43,596 --> 00:26:44,896
because I think anyone


486
00:26:44,896 --> 00:26:46,966
who builds a custom
presentation controller needs


487
00:26:46,966 --> 00:26:48,326
to at least be aware of,


488
00:26:48,646 --> 00:26:50,416
which is the
shouldPresentInFullscreen


489
00:26:50,416 --> 00:26:50,926
property.


490
00:26:51,236 --> 00:26:55,276
What this means is that a
presentation will effectively,


491
00:26:55,276 --> 00:27:00,596
its container will be in the
window and its, and the frame


492
00:27:00,596 --> 00:27:03,126
of that container view will
effectively be the bounds


493
00:27:03,126 --> 00:27:03,746
of the window.


494
00:27:04,346 --> 00:27:11,416
If you implement a custom
presentation controller and set


495
00:27:11,416 --> 00:27:12,976
that property to NO,


496
00:27:13,796 --> 00:27:16,006
your presentation
will no longer adapt.


497
00:27:17,236 --> 00:27:19,666
Now, I know that doesn't make
quite a lot of sense yet,


498
00:27:19,666 --> 00:27:21,766
but we're going to
go through some stuff


499
00:27:21,766 --> 00:27:23,956
and then it will
become more clear.


500
00:27:25,356 --> 00:27:30,506
So let's quickly talk about some
of the API that has been added


501
00:27:30,556 --> 00:27:32,066
for presentation controllers.


502
00:27:32,486 --> 00:27:34,416
One is that you'll
notice that it appears,


503
00:27:34,416 --> 00:27:37,006
it conforms to the
appearance container protocol,


504
00:27:37,316 --> 00:27:40,156
the trait environment
protocol, and this new protocol


505
00:27:40,156 --> 00:27:42,506
which we'll talk about in a
bit called content container.


506
00:27:43,106 --> 00:27:45,406
We talked about the
containerView properties


507
00:27:45,406 --> 00:27:48,446
and the presentedView method
and these two other properties.


508
00:27:48,576 --> 00:27:53,596
As I said, there's a whole bunch
of methods and logic available


509
00:27:53,596 --> 00:27:56,976
for you to create fantastic
new custom presentations.


510
00:27:57,836 --> 00:28:00,986
But that's beyond the
scope of this talk.


511
00:28:01,176 --> 00:28:03,356
So armed with this
new architecture,


512
00:28:03,576 --> 00:28:05,416
let's talk about some
features that we've added.


513
00:28:06,586 --> 00:28:11,436
First of all, all the old
iPad-only presentations are now


514
00:28:11,436 --> 00:28:13,606
available on the iPhone.


515
00:28:14,146 --> 00:28:15,836
By default they're
going to present


516
00:28:16,066 --> 00:28:17,866
to full-screen presentations.


517
00:28:18,556 --> 00:28:20,626
But there's some power
under the hood here.


518
00:28:21,606 --> 00:28:26,036
So new presentation styles that
are available that we've added,


519
00:28:26,516 --> 00:28:29,716
again, that are both available
on the phone and the iPad,


520
00:28:29,716 --> 00:28:31,886
is an OverFullscreen
presentation,


521
00:28:32,646 --> 00:28:36,316
an OverCurrentContext
presentation, and,


522
00:28:36,316 --> 00:28:38,146
I think I mentioned before,


523
00:28:38,146 --> 00:28:40,586
popovers are now
presentations, as well.


524
00:28:45,396 --> 00:28:48,766
Every presentation has an
associated presentation


525
00:28:48,766 --> 00:28:52,336
controller, and you can access
these with these methods.


526
00:28:52,716 --> 00:28:54,706
And the reason you do so
is because you often want


527
00:28:54,706 --> 00:28:57,656
to set the delegate on the
presentation controller.


528
00:28:57,986 --> 00:29:00,956
And now the plot thickens
because the delegate is,


529
00:29:00,956 --> 00:29:03,016
in fact, the object
that is going


530
00:29:03,016 --> 00:29:06,726
to help your presentations adapt
to different trait environments.


531
00:29:07,566 --> 00:29:09,186
Before we get into that,


532
00:29:09,546 --> 00:29:11,176
let's make sure we all
understand what the new


533
00:29:11,176 --> 00:29:14,176
presentation styles
are all about.


534
00:29:14,176 --> 00:29:18,146
OverFullscreen is kind of
a full-screen presentation


535
00:29:18,146 --> 00:29:20,046
that doesn't remove
the presenting view


536
00:29:20,046 --> 00:29:20,886
controller's view.


537
00:29:21,296 --> 00:29:25,676
So you can create interesting
kind of overlay types


538
00:29:25,676 --> 00:29:29,596
of presentations
really easily now.


539
00:29:29,786 --> 00:29:32,716
OverCurrentContext
is pretty similar.


540
00:29:34,916 --> 00:29:37,446
If you know what current
context presentations are,


541
00:29:37,446 --> 00:29:42,386
it's presentations that are
kind of constrained inside


542
00:29:42,386 --> 00:29:45,206
of the presenting view
controller's super view.


543
00:29:46,076 --> 00:29:48,546
So that's what
OverCurrentContext gives you.


544
00:29:49,966 --> 00:29:51,336
And, finally, we have popover.


545
00:29:51,846 --> 00:29:54,626
And we all know what
popover looks like.


546
00:29:55,596 --> 00:29:59,416
This is a good opportunity
for me to say that we're kind


547
00:29:59,416 --> 00:30:02,006
of soft-deprecating
UIPopoverController.


548
00:30:02,616 --> 00:30:07,016
We're not hard-deprecating
it, but you should be aware


549
00:30:07,016 --> 00:30:09,326
that all the popover controller,


550
00:30:09,326 --> 00:30:13,076
old popover controller API
is now being shimmed kind


551
00:30:13,076 --> 00:30:16,546
of behind the scenes into
a popover presentation.


552
00:30:17,326 --> 00:30:20,416
This might create a couple
of differences in behavior.


553
00:30:20,656 --> 00:30:24,426
For the most part, these things
are functionally equivalent.


554
00:30:24,796 --> 00:30:27,976
There are a few corner cases,
though, that you might run into.


555
00:30:27,976 --> 00:30:30,106
For example, if you have
a pop, if you have code


556
00:30:30,106 --> 00:30:31,516
that was presenting a popover


557
00:30:32,236 --> 00:30:33,756
and then immediately
dismissed it


558
00:30:33,756 --> 00:30:37,416
and did another presentation
the next line, you're going


559
00:30:37,416 --> 00:30:39,036
to have to defer that.


560
00:30:39,036 --> 00:30:40,636
And you can do that
pretty easily


561
00:30:40,756 --> 00:30:42,666
by grabbing a transition
coordinator


562
00:30:42,666 --> 00:30:44,406
and scheduling the
new presentation


563
00:30:44,406 --> 00:30:47,186
for after the dismissal
of the popover.


564
00:30:51,056 --> 00:30:54,886
So let's talk about how
presentations can adapt


565
00:30:55,116 --> 00:30:56,586
to changing trait environments.


566
00:30:57,766 --> 00:31:02,246
As I mentioned, all of
these presentations, styles,


567
00:31:02,246 --> 00:31:06,426
adapt by default in horizontally
compact environments


568
00:31:06,426 --> 00:31:07,166
to full-screen.


569
00:31:10,336 --> 00:31:14,586
Now, it's possible to
change that default behavior


570
00:31:15,026 --> 00:31:18,706
to be OverFullscreen or
to be not, which means,


571
00:31:18,866 --> 00:31:22,106
"Please don't adapt; keep
my presentation controller


572
00:31:22,166 --> 00:31:23,656
as is, in charge."


573
00:31:25,796 --> 00:31:28,586
The way you control this
behavior, as I implied,


574
00:31:28,586 --> 00:31:30,156
was you set the delegate
and you're going


575
00:31:30,156 --> 00:31:32,296
to override a couple, or you're
going to implement a couple


576
00:31:32,296 --> 00:31:33,486
of methods on that delegate.


577
00:31:35,496 --> 00:31:36,826
So here they are.


578
00:31:38,676 --> 00:31:40,926
The first is
adaptivePresentationStyle


579
00:31:40,926 --> 00:31:42,126
ForPresentationController.


580
00:31:42,876 --> 00:31:45,286
It does what its name implies.


581
00:31:45,686 --> 00:31:48,576
It's called when the
presentation moves


582
00:31:48,576 --> 00:31:51,676
into a horizontally compact
environment and you return one


583
00:31:51,676 --> 00:31:54,926
of those presentation styles
that I enumerated earlier.


584
00:31:55,806 --> 00:31:57,996
There's another method that
might be a little less clear


585
00:31:57,996 --> 00:32:00,796
which allows you to actually
return a whole new view


586
00:32:00,796 --> 00:32:03,176
controller that should be
presented in that style.


587
00:32:03,696 --> 00:32:05,766
And we'll see what
that means in a bit.


588
00:32:05,766 --> 00:32:09,746
There's a PopoverPresentation
ControllerDelegate,


589
00:32:09,746 --> 00:32:11,916
which I'm not going to
go into detail about.


590
00:32:11,916 --> 00:32:14,226
But suffice it to say
that that delegate,


591
00:32:14,686 --> 00:32:20,026
in addition to providing the
adaptive APIs, also exposes all


592
00:32:20,026 --> 00:32:22,026
of the properties and
methods that you need


593
00:32:22,026 --> 00:32:26,756
to get the functionally
equivalent popover behavior


594
00:32:26,756 --> 00:32:27,426
you're used to.


595
00:32:28,146 --> 00:32:30,856
We'll see a little bit of a
code example of that shortly.


596
00:32:31,896 --> 00:32:33,036
In fact, very shortly.


597
00:32:33,456 --> 00:32:38,096
So what does it mean to
present a popover in iOS 8?


598
00:32:38,806 --> 00:32:41,186
Well, you could use the
old APIs, as I said,


599
00:32:41,186 --> 00:32:42,756
on UIPopoverController.


600
00:32:42,756 --> 00:32:48,046
But I want to show how you
would do it using the new APIs.


601
00:32:50,206 --> 00:32:53,226
So the first thing you
do, not too surprisingly,


602
00:32:53,226 --> 00:32:55,986
is you set the presentation
style to popover.


603
00:32:57,806 --> 00:32:59,576
Now, interestingly
you can grab the


604
00:32:59,576 --> 00:33:02,376
PopoverPresentationController
before you've even


605
00:33:02,376 --> 00:33:03,256
presented anything.


606
00:33:03,746 --> 00:33:06,336
That's important because you're
going to need to do things


607
00:33:06,336 --> 00:33:10,106
like say, "What's the bar button
item that I'm pointing to?"


608
00:33:10,106 --> 00:33:11,736
and "What do my arrows
look like?"


609
00:33:12,266 --> 00:33:15,446
You might also want to specify
a preferred content size


610
00:33:15,446 --> 00:33:18,616
so that we know kind of
how to size the popover.


611
00:33:18,616 --> 00:33:23,296
And, finally, you
present the popover.


612
00:33:24,366 --> 00:33:25,886
So what's that going
to look like?


613
00:33:27,056 --> 00:33:32,096
So if I wrote that code and
executed it just the way you saw


614
00:33:32,096 --> 00:33:36,406
on the previous slide, it's
going to look like that.


615
00:33:37,466 --> 00:33:38,596
Now, the first thing I want


616
00:33:38,596 --> 00:33:41,476
to say is it is a
popover presentation.


617
00:33:43,576 --> 00:33:46,666
The second thing I want to say
is there's a couple of problems.


618
00:33:49,916 --> 00:33:55,756
So the first problem is that
it underlaps the status bar.


619
00:33:56,016 --> 00:33:57,476
This is one of my favorite bugs.


620
00:33:57,476 --> 00:33:59,906
I can't tell you how
many bugs I get about


621
00:33:59,906 --> 00:34:02,116
"My content's underneath
the status bar."


622
00:34:02,116 --> 00:34:04,406
I'm not going to go into that,


623
00:34:04,486 --> 00:34:07,056
but I thought I would
just mention that.


624
00:34:07,966 --> 00:34:14,056
The second thing is
it looks pretty bad.


625
00:34:14,246 --> 00:34:18,216
And a more subtle point that
I'm sure all of you got was,


626
00:34:18,636 --> 00:34:20,156
it's a popover presentation


627
00:34:20,156 --> 00:34:24,045
and I can't tap anywhere
to dismiss it.


628
00:34:24,315 --> 00:34:26,335
Okay, so what are
we going to do?


629
00:34:26,366 --> 00:34:27,795
Well, we're going
to go to our friend,


630
00:34:27,795 --> 00:34:30,085
the trusty presentation
controller delegate,


631
00:34:30,085 --> 00:34:33,346
and we're going to use some
of those new adaptive APIs.


632
00:34:33,346 --> 00:34:37,085
And in particular, I'm
going to implement,


633
00:34:37,085 --> 00:34:40,216
I would implement
adaptivePresentationStyle


634
00:34:40,396 --> 00:34:41,766
ForPresentationController.


635
00:34:41,766 --> 00:34:45,045
This time I'm going to have
it return OverFullscreen.


636
00:34:45,045 --> 00:34:49,956
I'm going to use this brand new
view object that we introduced


637
00:34:50,136 --> 00:34:52,815
in iOS 8 called the
UIVisualEffectView,


638
00:34:52,815 --> 00:34:56,255
which will become your best
blurry friend in iOS 8.


639
00:34:57,286 --> 00:34:59,206
And then inside of
that implementation,


640
00:34:59,206 --> 00:35:02,736
I can adjust the content, like
where it's actually positioned.


641
00:35:03,766 --> 00:35:05,836
So that should address a
couple of the problems.


642
00:35:07,056 --> 00:35:12,256
So now I get this kind
of nifty blurred view,


643
00:35:12,256 --> 00:35:14,536
which looks a lot better
than that ugly white thing.


644
00:35:14,796 --> 00:35:16,736
I've repositioned my content.


645
00:35:17,116 --> 00:35:18,786
It's a different adaptation.


646
00:35:19,006 --> 00:35:20,526
The reason it's blurring
so nicely is


647
00:35:20,526 --> 00:35:22,906
because I didn't remove the
presenting view controller's


648
00:35:22,906 --> 00:35:23,856
view underneath.


649
00:35:25,106 --> 00:35:27,706
However, we still have the
problem that there's no way


650
00:35:27,706 --> 00:35:28,876
to dismiss the popover.


651
00:35:29,856 --> 00:35:31,086
So how do we fix this?


652
00:35:32,446 --> 00:35:34,766
Well, you might have recalled


653
00:35:34,936 --> 00:35:39,346
that there was another
delegate API that I talked


654
00:35:39,346 --> 00:35:40,626
about that I deferred kind


655
00:35:40,626 --> 00:35:43,076
of explaining why I,
why it was useful.


656
00:35:43,076 --> 00:35:44,776
We're going to go
back to the delegate,


657
00:35:44,776 --> 00:35:48,366
and this time we're going


658
00:35:48,366 --> 00:35:50,836
to also implement
presentationController:


659
00:35:50,836 --> 00:35:53,096
viewController
ForAdaptivePresentationStyle.


660
00:35:53,506 --> 00:35:54,776
So this is pretty nifty.


661
00:35:54,776 --> 00:35:55,786
What we're going to
do is we're going


662
00:35:55,786 --> 00:36:00,136
to create a navigation
controller whose root view


663
00:36:00,136 --> 00:36:03,686
controller is the currently
presented view controller.


664
00:36:03,686 --> 00:36:06,966
We're going to add
a Dismiss button


665
00:36:06,966 --> 00:36:10,766
to that navigation controller's
bar, navigation bar.


666
00:36:10,766 --> 00:36:14,066
And then we're going
to be good to go.


667
00:36:15,136 --> 00:36:17,716
So now when I hit Note,


668
00:36:19,946 --> 00:36:24,396
I get this great looking
OverFullscreen adapted


669
00:36:24,396 --> 00:36:25,796
popover presentation.


670
00:36:26,436 --> 00:36:28,586
There's a Done button,
so I can dismiss it.


671
00:36:31,426 --> 00:36:32,286
So that's great.


672
00:36:32,286 --> 00:36:36,456
But what if I actually
just wanted a popover?


673
00:36:36,456 --> 00:36:37,496
Well, you can do that, too.


674
00:36:38,566 --> 00:36:40,706
Let's go back to our
trusty delegate friend,


675
00:36:40,766 --> 00:36:45,816
and it's this time an
adaptivePresentationStyle


676
00:36:45,816 --> 00:36:47,186
ForPresentationController.


677
00:36:47,946 --> 00:36:49,886
All I need to do is return None.


678
00:36:51,136 --> 00:36:52,466
And if I return None,


679
00:36:52,466 --> 00:36:55,416
the presentation controller is
not going to be adapted at all.


680
00:36:56,816 --> 00:37:01,496
And now when I hit the Note
button, I get an actual popover.


681
00:37:02,516 --> 00:37:09,926
[ Applause ]


682
00:37:10,426 --> 00:37:13,176
So let's kind of go
over what we saw here.


683
00:37:14,126 --> 00:37:18,826
First is, presentation
controllers are a new object


684
00:37:18,826 --> 00:37:22,696
in iOS 8 that make it
easier and more consistent


685
00:37:22,696 --> 00:37:25,656
to create powerful
custom presentations.


686
00:37:25,996 --> 00:37:32,476
They are an improvement over
what was introduced in iOS 7.


687
00:37:32,476 --> 00:37:36,446
Every presentation is associated
with a presentation controller,


688
00:37:36,446 --> 00:37:39,406
which can be accessed,
and you can use


689
00:37:39,406 --> 00:37:42,136
that presentation controller
to do various things,


690
00:37:42,136 --> 00:37:44,596
depending on the
presentation control.


691
00:37:45,076 --> 00:37:49,696
But all presentation controllers
can use, can have a delegate


692
00:37:49,746 --> 00:37:54,706
that conforms to these
adapting delegate protocols.


693
00:37:55,386 --> 00:37:57,556
One thing that isn't
on this screen is


694
00:37:57,556 --> 00:38:00,516
that popovers are also
presentation controllers,


695
00:38:00,936 --> 00:38:03,816
or are presentations
that have an associated


696
00:38:03,816 --> 00:38:04,806
presentation control.


697
00:38:04,806 --> 00:38:07,906
And, finally, if you create your
own presentation controller-I


698
00:38:07,906 --> 00:38:11,036
mentioned this earlier-if
it returns YES


699
00:38:11,036 --> 00:38:13,866
to shouldPresentInFullscreen,
it will be able to adapt.


700
00:38:14,206 --> 00:38:16,466
If, on the other hand, your
presentation controller is kind


701
00:38:16,466 --> 00:38:19,076
of a current context
style presentation,


702
00:38:19,256 --> 00:38:21,416
it doesn't really make
too much sense for that


703
00:38:21,416 --> 00:38:23,106
to adapt, so it doesn't.


704
00:38:23,106 --> 00:38:26,326
We're not going to go through
those adaptive delegate calls


705
00:38:26,326 --> 00:38:27,026
in that case.


706
00:38:29,596 --> 00:38:33,726
Alright, that's enough for
presentation controllers,


707
00:38:33,726 --> 00:38:36,896
although this topic
actually kind of overlaps


708
00:38:36,896 --> 00:38:39,946
or has some overlap with
presentation controllers:


709
00:38:40,776 --> 00:38:42,386
transition coordinators.


710
00:38:42,856 --> 00:38:47,726
Again, those were
introduced in iOS 7.


711
00:38:49,186 --> 00:38:49,976
What is it?


712
00:38:51,136 --> 00:38:56,446
Well, it's an object that
conforms to this protocol.


713
00:38:57,266 --> 00:39:05,936
Every transition coordinator
has an associated transition,


714
00:39:06,456 --> 00:39:13,166
and that associated transition
is oftentimes deferred.


715
00:39:13,166 --> 00:39:15,966
And this transition
coordinator is kind


716
00:39:15,966 --> 00:39:19,076
of holding this freeze-dried
transition as it gets passed


717
00:39:19,076 --> 00:39:21,226
around to various pieces of code


718
00:39:21,566 --> 00:39:24,376
that can then use this method
called animateAlongside


719
00:39:24,376 --> 00:39:25,556
TransitionCompletion.


720
00:39:25,556 --> 00:39:28,676
So you can kind of queue
up blocks of animations


721
00:39:28,676 --> 00:39:30,316
that are going to
execute in that kind


722
00:39:30,316 --> 00:39:34,136
of deferred transition
animation that is associated


723
00:39:34,136 --> 00:39:35,606
with that transition
coordinator.


724
00:39:36,036 --> 00:39:37,546
So that's pretty powerful.


725
00:39:37,546 --> 00:39:40,336
It was introduced in iOS 7,
and we're taking advantage


726
00:39:40,336 --> 00:39:42,466
of this object in
a few new APIs.


727
00:39:45,496 --> 00:39:49,636
So, two of these are
viewWillTransitionToSize:


728
00:39:49,756 --> 00:39:51,026
withTransitionCoordinator;


729
00:39:54,056 --> 00:39:56,836
next one is
willTransitionToTraitCollection:


730
00:39:56,966 --> 00:39:58,296
withTransitionCoordinator.


731
00:39:58,826 --> 00:40:00,416
Now, I'm not going
to talk too much


732
00:40:00,416 --> 00:40:02,516
about
willTransitionToTraitCollection.


733
00:40:03,316 --> 00:40:06,246
But I did mention earlier that
trait collections are kind


734
00:40:06,246 --> 00:40:09,176
of associated with coarse
application structure.


735
00:40:10,616 --> 00:40:12,626
And one of the best ways


736
00:40:12,626 --> 00:40:18,186
to adapt an application-it's not
the only way, but it's one-is


737
00:40:18,186 --> 00:40:21,476
to implement
willTransitionToTraitCollection,


738
00:40:21,476 --> 00:40:25,456
and when a trait collection,
such as a size class, say,


739
00:40:25,796 --> 00:40:29,356
that may change, say,
if you rotate a device


740
00:40:29,356 --> 00:40:31,566
or if you set an
override trait collection,


741
00:40:31,766 --> 00:40:33,026
this method will be invoked


742
00:40:33,266 --> 00:40:37,376
and you can actually do some
coarse-grained application kind


743
00:40:37,376 --> 00:40:39,316
of re-jiggering, if you want.


744
00:40:39,616 --> 00:40:41,926
Now, again, there's going
to be a whole talk that goes


745
00:40:41,926 --> 00:40:44,616
into a lot more detail on
that particular method.


746
00:40:45,146 --> 00:40:47,106
It's very parallel
to the other method,


747
00:40:47,106 --> 00:40:49,806
viewWillTransitionToSize:
withTransitionCoordinator


748
00:40:50,436 --> 00:40:51,556
that I'm going to talk about.


749
00:40:52,366 --> 00:40:54,126
By the way, did I forget
to mention this is part


750
00:40:54,126 --> 00:40:57,246
of a new protocol called the
content, UIContentContainer?


751
00:40:57,436 --> 00:40:58,086
I mentioned


752
00:40:58,086 --> 00:41:01,366
that UIPresentationController
conforms to this.


753
00:41:01,866 --> 00:41:05,076
UIViewController also
conforms to this protocol.


754
00:41:06,886 --> 00:41:08,596
These objects support a notion


755
00:41:08,596 --> 00:41:11,206
of a preferred content
size that you can set.


756
00:41:11,206 --> 00:41:14,506
And that's kind of the
request, if you will,


757
00:41:14,906 --> 00:41:18,986
that you like your content size
to grow or shrink depending


758
00:41:18,986 --> 00:41:22,306
on the circumstances
of your application.


759
00:41:23,096 --> 00:41:26,716
When you set that, your
parent container object,


760
00:41:26,716 --> 00:41:30,466
whatever that might be-it might
be a parent view controller,


761
00:41:30,466 --> 00:41:33,536
it might be a presentation
controller-will get a


762
00:41:33,536 --> 00:41:37,156
preferredContentSizeDid
ChangeForChildContentContainer.


763
00:41:37,676 --> 00:41:40,876
In that method, the
parent can decide what


764
00:41:40,876 --> 00:41:42,046
to do with the request.


765
00:41:43,246 --> 00:41:46,316
If it decides that it actually
wants to honor the request,


766
00:41:47,486 --> 00:41:51,076
it may turn around and call
viewWillTransitionToSize:


767
00:41:51,076 --> 00:41:53,536
withTransitionCoordinator
on the child,


768
00:41:54,176 --> 00:41:57,686
which gives the child
the ability


769
00:41:58,176 --> 00:42:01,986
to animate alongside
that size change.


770
00:42:03,516 --> 00:42:08,026
So let me kind of make a
small digression and kind


771
00:42:08,026 --> 00:42:10,126
of give a bit of wisdom.


772
00:42:10,126 --> 00:42:13,026
And I realize that Anonymous
is actually Josh Shaffer


773
00:42:13,446 --> 00:42:15,236
because I think I
heard this from him.


774
00:42:16,796 --> 00:42:21,206
And you might wonder, why am I
throwing this random point out?


775
00:42:21,516 --> 00:42:24,216
First, let's see
what we mean here.


776
00:42:24,626 --> 00:42:26,776
Basically if I rotate
a device in general,


777
00:42:26,776 --> 00:42:28,296
that's all that's happening.


778
00:42:28,496 --> 00:42:30,996
The fact that there's an
animated transform rotation is


779
00:42:30,996 --> 00:42:32,176
kind of beside the point.


780
00:42:33,336 --> 00:42:36,196
And most of the time your
application really doesn't need


781
00:42:36,196 --> 00:42:36,906
to do anything.


782
00:42:36,906 --> 00:42:39,866
It's going to gracefully
stretch and do whatever it needs


783
00:42:39,866 --> 00:42:42,966
to do as the bounds change.


784
00:42:46,236 --> 00:42:48,616
Okay, so what does that mean?


785
00:42:48,616 --> 00:42:51,746
Well, you will recall that we
have these APIs that have been


786
00:42:51,746 --> 00:42:54,226
around for a long time.


787
00:42:54,746 --> 00:42:56,286
Well, we're getting rid of them.


788
00:42:56,946 --> 00:43:02,646
And [Applause]-ah, I thought
you guys all loved these.


789
00:43:03,596 --> 00:43:08,576
So one of the things about these
APIs, and I think I've been


790
00:43:08,576 --> 00:43:13,166
on this stage before saying,
"You shouldn't do layout based


791
00:43:13,166 --> 00:43:15,146
on interface orientation.


792
00:43:15,146 --> 00:43:17,616
You shouldn't use these
methods to drive your layout."


793
00:43:18,126 --> 00:43:20,186
They're really kind
of focused methods.


794
00:43:20,186 --> 00:43:23,356
You wanted to use them because
you wanted to participate


795
00:43:23,586 --> 00:43:25,026
in this rotation event.


796
00:43:25,426 --> 00:43:26,866
So now we've generalized it.


797
00:43:26,866 --> 00:43:30,066
We have this other method called
viewWillTransitionToSize:w


798
00:43:30,066 --> 00:43:32,936
ithTransitionCoordinator
that takes over.


799
00:43:33,976 --> 00:43:37,766
So, first of all, all those
rotation callbacks can be


800
00:43:37,766 --> 00:43:40,826
replaced with this
more general notion


801
00:43:41,146 --> 00:43:43,726
of viewWillTransitionToSize:
withTransitionCoordinator.


802
00:43:44,006 --> 00:43:47,126
I talked about setting
the preferred content size


803
00:43:47,126 --> 00:43:48,796
and that you get
this notification.


804
00:43:48,796 --> 00:43:50,436
Well, so if your widget


805
00:43:50,436 --> 00:43:53,016
in the notification center
actually wants to request


806
00:43:53,016 --> 00:43:57,886
to be displayed in a slightly
larger space or smaller space,


807
00:43:59,286 --> 00:44:04,016
this API will be called on your
widget so that you can, in fact,


808
00:44:04,256 --> 00:44:08,366
animate alongside or run
some code that executes


809
00:44:08,616 --> 00:44:10,766
after the resizing
has taken place.


810
00:44:10,896 --> 00:44:16,146
I said that you can, your
own apps can respond to this.


811
00:44:16,946 --> 00:44:21,666
Now, at one point I was going
to have a whole bunch of slides


812
00:44:21,666 --> 00:44:25,106
that showed you how to implement
your own transition coordinator.


813
00:44:25,676 --> 00:44:27,866
I didn't have time to do that,


814
00:44:28,166 --> 00:44:29,696
but it's relatively
straightforward


815
00:44:29,696 --> 00:44:32,196
and you can implement your own
transition coordinator that's


816
00:44:32,196 --> 00:44:33,926
implement, that's
kind of associated


817
00:44:33,926 --> 00:44:36,326
with your own transition
animation.


818
00:44:36,836 --> 00:44:39,816
And if a child changes its size,


819
00:44:39,856 --> 00:44:41,476
you can call
viewWillTransitionToSize


820
00:44:41,476 --> 00:44:46,156
and pass in that object using
the transition coordinator.


821
00:44:47,186 --> 00:44:51,746
Okay. So to really be
a replacement for kind


822
00:44:51,746 --> 00:44:55,536
of the rotation, we kind of
had to give a little bit,


823
00:44:55,676 --> 00:45:02,036
kind of get down off of our
high horses of, you know,


824
00:45:02,396 --> 00:45:05,256
the way things should be and
acknowledge the way things are.


825
00:45:05,906 --> 00:45:08,046
And we added this
target transform.


826
00:45:08,396 --> 00:45:10,226
So it's not so much
the orientation


827
00:45:10,226 --> 00:45:11,326
that you really care about.


828
00:45:11,326 --> 00:45:15,006
It's like what's the
transform that's kind of being,


829
00:45:15,006 --> 00:45:17,256
that I'm participating
in an animation with?


830
00:45:18,656 --> 00:45:21,676
The reason this is
important, and I'm going to get


831
00:45:21,676 --> 00:45:24,736
to this later, is
we've actually changed


832
00:45:25,016 --> 00:45:28,466
where the rotation
transforms live.


833
00:45:28,976 --> 00:45:30,466
Some of you guys
may have noticed


834
00:45:30,466 --> 00:45:32,146
that whenever you do a rotation


835
00:45:32,146 --> 00:45:33,806
that it's the root
view controller


836
00:45:33,806 --> 00:45:39,206
or the full-screen view
controller's layer that has kind


837
00:45:39,306 --> 00:45:41,706
of the affine rotation
transformation directly


838
00:45:41,706 --> 00:45:42,746
associated with it.


839
00:45:43,056 --> 00:45:44,966
That's no longer
the case on iOS 8.


840
00:45:46,106 --> 00:45:48,596
So when you implement
viewWillTransitionToSize,


841
00:45:48,596 --> 00:45:50,446
you can ask for the
target transform,


842
00:45:50,446 --> 00:45:53,316
and if it's not identity,
you are inside


843
00:45:53,316 --> 00:45:55,916
of a rotation resize event


844
00:45:55,916 --> 00:45:57,676
that you can do some
interesting things with.


845
00:45:58,016 --> 00:46:02,316
So to show how these are similar


846
00:46:02,316 --> 00:46:04,316
or how this is a
direct replacement


847
00:46:04,316 --> 00:46:07,346
for the old rotation callbacks,
this is some, you know,


848
00:46:07,956 --> 00:46:08,966
skeleton code


849
00:46:09,446 --> 00:46:12,566
where viewWillTransitionToSize
first calls myWillRotateTo


850
00:46:12,566 --> 00:46:16,596
InterfaceOrientation,
which is exactly when it,


851
00:46:16,726 --> 00:46:18,686
the old call would
have been made.


852
00:46:18,686 --> 00:46:22,816
And then it uses the
transition coordinator


853
00:46:23,126 --> 00:46:26,916
to animate alongside
myWillAnimateTo


854
00:46:27,646 --> 00:46:29,076
InterfaceOrientation call.


855
00:46:29,076 --> 00:46:32,376
And, finally, in the
completion block is


856
00:46:32,376 --> 00:46:35,006
when you would call
myDidAnimateFrom


857
00:46:35,006 --> 00:46:36,726
InterfaceOrientation.


858
00:46:36,796 --> 00:46:40,476
So you can kind of see
that WillTransitionToSize:


859
00:46:40,736 --> 00:46:43,166
withTransitionCoordinator
is identical


860
00:46:43,286 --> 00:46:45,166
or provides the identical
functionality.


861
00:46:45,166 --> 00:46:48,466
It's actually more powerful
and, from my perspective,


862
00:46:48,466 --> 00:46:50,516
it's a lot easier to
read code like this.


863
00:46:52,176 --> 00:46:53,896
Okay, I know you
guys are all sad


864
00:46:54,096 --> 00:46:55,766
that these methods have gone.


865
00:46:55,766 --> 00:46:57,626
So if you don't implement
viewWillTransitionToSize:


866
00:46:57,626 --> 00:47:00,046
withTransitionCoordinator
will still call them,


867
00:47:00,426 --> 00:47:01,766
just don't implement it.


868
00:47:02,376 --> 00:47:04,676
A subtle point that
you should be aware


869
00:47:04,676 --> 00:47:09,626
of is most view controller
transitions are immediate


870
00:47:09,806 --> 00:47:11,566
when the system calls
this method.


871
00:47:11,606 --> 00:47:14,806
What does that mean?


872
00:47:15,326 --> 00:47:16,916
It means that if you needed


873
00:47:16,916 --> 00:47:19,146
to rearrange your
application's structure


874
00:47:19,146 --> 00:47:24,246
in some significant way and
you do like pushViewController


875
00:47:24,246 --> 00:47:26,926
or something like that, the
entire view hierarchy is going


876
00:47:26,926 --> 00:47:29,376
to be updated immediately.


877
00:47:29,376 --> 00:47:31,076
So you can do neat
things with that


878
00:47:31,076 --> 00:47:32,626
in your transition animations.


879
00:47:35,036 --> 00:47:39,736
Unlike rotation callbacks,
by default we're going


880
00:47:39,776 --> 00:47:41,786
to forward
viewWillTransitionToSize


881
00:47:42,326 --> 00:47:45,916
through the entire
presentation hierarchy,


882
00:47:45,916 --> 00:47:48,406
through the entire
view controller


883
00:47:48,406 --> 00:47:49,536
containment hierarchy.


884
00:47:49,896 --> 00:47:52,476
All you need to do is call
super to get that behavior.


885
00:47:52,746 --> 00:47:55,376
If you don't, we will no
longer propagate those.


886
00:47:55,376 --> 00:47:57,236
So you probably want
to call super.


887
00:47:59,556 --> 00:48:02,706
Finally I'm going to say that
you only really need this,


888
00:48:02,736 --> 00:48:05,156
I kind of implied it before,
when you're doing some kind


889
00:48:05,156 --> 00:48:06,856
of special size transition.


890
00:48:07,356 --> 00:48:11,136
More often than not, autolayout
and other techniques are going


891
00:48:11,136 --> 00:48:14,256
to be-layout techniques are
going to more than suffice


892
00:48:14,806 --> 00:48:16,416
to handle a size transition.


893
00:48:18,776 --> 00:48:22,126
So I wanted to, I showed this
example earlier in the demo


894
00:48:22,126 --> 00:48:24,436
and I wanted to show
when would be a good time


895
00:48:24,436 --> 00:48:26,626
that you might want to use
viewWillTransitionToSize.


896
00:48:27,876 --> 00:48:29,846
So here's a collection
view controller.


897
00:48:29,846 --> 00:48:33,696
If I rotate it, what's
going to end up happening


898
00:48:33,696 --> 00:48:34,786
if I did nothing at all,


899
00:48:34,786 --> 00:48:39,246
is I get-the default collection
view flow layout will give me


900
00:48:39,246 --> 00:48:40,086
something like this.


901
00:48:40,086 --> 00:48:43,986
You'll notice kind of how the
thumbnails have shifted around


902
00:48:43,986 --> 00:48:47,866
and things have resized and
maybe that's what I want.


903
00:48:48,176 --> 00:48:49,656
But maybe I want something else.


904
00:48:50,366 --> 00:48:53,116
Maybe I don't want the
collection view controller's


905
00:48:53,116 --> 00:48:54,496
view to rotate at all,


906
00:48:54,496 --> 00:48:58,546
and I want to apply the counter
transform on each of the cells.


907
00:48:59,886 --> 00:49:00,826
Something like that.


908
00:49:00,826 --> 00:49:04,856
So this would be a great time
to use viewWillTransitionToSize.


909
00:49:04,856 --> 00:49:06,696
And let's see how
that would look.


910
00:49:07,506 --> 00:49:10,386
The first thing that you do is
you get that targetTransform


911
00:49:10,386 --> 00:49:11,546
that I was talking about.


912
00:49:11,996 --> 00:49:14,706
And we're going to
invert it, and we're going


913
00:49:14,706 --> 00:49:18,576
to grab our old view
bounds and set things


914
00:49:18,576 --> 00:49:20,746
up for our transition
coordinator.


915
00:49:21,496 --> 00:49:23,496
So inside the alongside block,


916
00:49:23,496 --> 00:49:24,986
we're going to basically
call transition


917
00:49:24,986 --> 00:49:26,606
coordinator animateAlongside.


918
00:49:27,266 --> 00:49:29,396
We're going to update
the transform


919
00:49:30,306 --> 00:49:33,896
to basically undo the rotation
transform that's taking effect.


920
00:49:33,896 --> 00:49:35,386
You'll notice that
I'm composing it


921
00:49:35,386 --> 00:49:37,276
with the existing
transform because, hell,


922
00:49:37,276 --> 00:49:39,136
I might be in a different
orientation already.


923
00:49:39,536 --> 00:49:41,866
So I do that.


924
00:49:41,866 --> 00:49:45,136
I then squirrel away
the counter rotation,


925
00:49:45,136 --> 00:49:48,246
which effectively is
the transform that is,


926
00:49:48,476 --> 00:49:50,606
I am animating with right now.


927
00:49:50,606 --> 00:49:53,286
I update my bounds
to the old bounds


928
00:49:53,286 --> 00:49:56,986
because I've now applied
the counter transform


929
00:49:56,986 --> 00:49:59,506
on the collection view
controller view's transform.


930
00:49:59,636 --> 00:50:03,396
I'm done. I'm going
to not rotate,


931
00:50:03,396 --> 00:50:05,806
the collection view controller
isn't going to rotate,


932
00:50:05,936 --> 00:50:08,746
and those cells aren't
going to rotate either


933
00:50:08,746 --> 00:50:11,946
until I hit the completion
block, at which point I'm going


934
00:50:11,946 --> 00:50:14,276
to apply the counter
rotation to each of them.


935
00:50:15,676 --> 00:50:18,566
Okay, so what did we learn?


936
00:50:20,046 --> 00:50:22,116
Transition coordinators
are being used


937
00:50:22,116 --> 00:50:25,216
in a lot of our adaptive APIs.


938
00:50:28,816 --> 00:50:32,046
You can use a transition
coordinator in response


939
00:50:32,046 --> 00:50:35,186
to preferredContent
SizeDidChange calls.


940
00:50:36,246 --> 00:50:38,666
All of the rotation callbacks
are being deprecated.


941
00:50:41,446 --> 00:50:42,236
That's about it.


942
00:50:42,846 --> 00:50:44,376
So let's talk about
screen coordinates.


943
00:50:44,556 --> 00:50:48,716
And this gets to where the
transforms are being applied


944
00:50:49,276 --> 00:50:50,126
when we rotate.


945
00:50:54,536 --> 00:50:57,036
So in iOS 8-I mean, iOS 7,


946
00:50:58,836 --> 00:51:02,486
the screen orientation
was always fixed to kind


947
00:51:02,486 --> 00:51:07,396
of the top left position
in portrait.


948
00:51:08,506 --> 00:51:10,386
This gave you a fixed,


949
00:51:10,386 --> 00:51:13,496
unchanging coordinate
system, if you needed it.


950
00:51:14,466 --> 00:51:18,516
We ended up communicating
things like keyboard size


951
00:51:18,516 --> 00:51:22,136
and other things in terms of
this fixed coordinate system,


952
00:51:22,956 --> 00:51:27,506
even though the actual interface
orientation was the current top


953
00:51:27,506 --> 00:51:28,146
left corner.


954
00:51:29,486 --> 00:51:31,366
So in iOS 8, we're
changing that a bit,


955
00:51:32,666 --> 00:51:35,076
and everything is now
interface oriented.


956
00:51:35,836 --> 00:51:37,986
So the keyboard size
notifications are going


957
00:51:37,986 --> 00:51:39,596
to be interface oriented.


958
00:51:39,596 --> 00:51:42,366
A few other things are going
to be interface oriented.


959
00:51:46,716 --> 00:51:51,636
But you still may need a
fixed coordinate system.


960
00:51:51,846 --> 00:51:54,566
How do you do that?


961
00:51:55,616 --> 00:51:57,326
Well, we introduced
a new protocol


962
00:51:57,326 --> 00:51:58,706
called UICoordinateSpace.


963
00:51:58,706 --> 00:52:00,436
And, by the way, this
is not in seed one.


964
00:52:00,436 --> 00:52:04,006
This will come out in a, you
know, a soon-to-follow seed.


965
00:52:05,026 --> 00:52:07,816
We introduced a protocol
called UICoordinateSpace,


966
00:52:07,816 --> 00:52:10,196
a couple of conversion routines,


967
00:52:10,526 --> 00:52:13,226
to and from these
coordinate spaces.


968
00:52:13,286 --> 00:52:15,216
It also implements
the bounds call.


969
00:52:17,606 --> 00:52:20,176
UIView conforms to
this directly,


970
00:52:20,176 --> 00:52:21,616
which isn't too surprising.


971
00:52:21,616 --> 00:52:23,526
All the existing
conversion routines,


972
00:52:23,526 --> 00:52:25,166
by the way, stay in place.


973
00:52:25,766 --> 00:52:28,706
UIScreen now has grown
a couple of properties


974
00:52:28,706 --> 00:52:30,686
that vend two different
coordinate spaces.


975
00:52:30,686 --> 00:52:34,016
One is the default interface
oriented coordinate space


976
00:52:34,016 --> 00:52:37,946
and the other is the old
portrait fixed coordinate space.


977
00:52:38,776 --> 00:52:42,396
So if I wanted to
convert to and from


978
00:52:42,876 --> 00:52:45,056
that fixed coordinate space,


979
00:52:45,446 --> 00:52:47,066
what you effectively
do is you grab


980
00:52:47,066 --> 00:52:50,756
that fixed coordinate space
off of the window's screen


981
00:52:51,276 --> 00:52:53,186
and you can convert
to and from views.


982
00:52:56,696 --> 00:52:59,776
So let's go over briefly
what we discussed today.


983
00:53:04,086 --> 00:53:06,136
We talked a little bit
about trait collections,


984
00:53:06,466 --> 00:53:08,176
how they affect kind


985
00:53:08,176 --> 00:53:11,576
of the gross coarse-level
application structure


986
00:53:12,306 --> 00:53:15,846
of your application, how
you can override them,


987
00:53:15,846 --> 00:53:18,816
how view controllers can
override them, and a little bit


988
00:53:18,816 --> 00:53:21,186
about how your view controllers


989
00:53:21,186 --> 00:53:23,566
and your application can
adapt to those changes.


990
00:53:24,346 --> 00:53:29,816
We introduced some of the new
UISplitViewController features,


991
00:53:30,506 --> 00:53:32,006
and there are a lot of them.


992
00:53:32,006 --> 00:53:34,256
I encourage you to kind of
look at the header files


993
00:53:34,256 --> 00:53:37,826
and attend the talk after
this to see all the new


994
00:53:37,826 --> 00:53:40,386
and amazing things you can do
with split view controller.


995
00:53:41,096 --> 00:53:43,266
There are some new
simple properties


996
00:53:43,266 --> 00:53:45,196
on navigation controller
that will allow you


997
00:53:45,196 --> 00:53:46,506
to condense and hide bars.


998
00:53:47,916 --> 00:53:50,096
We've introduced
PresentationController and,


999
00:53:50,256 --> 00:53:52,906
in particular, we've revamped
the presentation hierarchy.


1000
00:53:52,986 --> 00:53:54,926
Popovers are now presentations.


1001
00:53:54,926 --> 00:53:57,076
We've introduced some
new presentation styles.


1002
00:54:00,136 --> 00:54:02,176
We've added some new
API for transition


1003
00:54:02,176 --> 00:54:04,206
that utilize transition
coordinators,


1004
00:54:04,936 --> 00:54:07,006
and these are becoming
interesting objects


1005
00:54:07,006 --> 00:54:10,416
that are becoming more present
in more and more of our APIs.


1006
00:54:10,946 --> 00:54:13,196
We've deprecated the
old rotation callbacks


1007
00:54:13,196 --> 00:54:15,526
or the existing rotation
callbacks,


1008
00:54:16,836 --> 00:54:19,566
can be replaced by-that
logic can be replaced


1009
00:54:19,566 --> 00:54:22,426
by this new method,
viewWillTransitionToSize.


1010
00:54:23,106 --> 00:54:26,966
And, finally, screen bounds
is now interface oriented.


1011
00:54:27,686 --> 00:54:33,116
There's a lot of things in
UIKit that are new for iOS 8.


1012
00:54:33,576 --> 00:54:34,776
This is just some of them.


1013
00:54:34,776 --> 00:54:37,426
I encourage you: the talk right


1014
00:54:37,426 --> 00:54:39,536
after this one is
Building Adaptive Apps


1015
00:54:39,536 --> 00:54:41,976
with UIKit that's going to
go into much more detail


1016
00:54:42,096 --> 00:54:45,796
about all these new and great
adaptive APIs we have in UIKit.


1017
00:54:46,476 --> 00:54:49,006
Tomorrow there's going to be
a talk that goes into depth


1018
00:54:49,186 --> 00:54:52,906
about presentation controllers,
how we internally use them


1019
00:54:52,906 --> 00:54:55,696
to implement new replacements


1020
00:54:55,696 --> 00:54:58,536
for search controller
and alert controller.


1021
00:54:58,536 --> 00:55:02,896
We are, there was a talk
yesterday, I believe,


1022
00:55:02,896 --> 00:55:04,376
about creating extensions


1023
00:55:04,376 --> 00:55:06,896
that leverage the
viewWillTransition ToSize APIs.


1024
00:55:06,896 --> 00:55:10,586
There are some nice talks on
Friday, or there is a nice talk


1025
00:55:10,586 --> 00:55:14,106
on Friday about how
you can make your,


1026
00:55:14,936 --> 00:55:16,536
basically your transition
animations,


1027
00:55:16,536 --> 00:55:19,286
more responsive to
user interaction.


1028
00:55:20,706 --> 00:55:21,676
For more information,


1029
00:55:21,676 --> 00:55:23,906
please contact our
evangelist, Jake Behrens.


1030
00:55:23,906 --> 00:55:26,626
He'll be more than happy
to get you the sample app


1031
00:55:26,626 --> 00:55:29,926
and answer your questions and
tell you how it all works.


1032
00:55:30,686 --> 00:55:34,776
And have a great rest
of the conference.


1033
00:55:35,026 --> 00:55:39,906
Thank you.


1034
00:55:39,906 --> 00:55:40,640
[ Applause ]

