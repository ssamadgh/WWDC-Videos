1
00:00:20,516 --> 00:00:23,216
[Applause]


2
00:00:23,716 --> 00:00:24,266
>> JESSE DONALDSON:
Hi, everyone.


3
00:00:24,986 --> 00:00:25,646
Thanks for coming.


4
00:00:25,776 --> 00:00:28,656
My name is Jesse, and I am
responsible for Auto Layout


5
00:00:28,746 --> 00:00:30,386
in the AppKit and
Foundation frameworks.


6
00:00:31,106 --> 00:00:33,206
Layout is one of the
most fundamental tasks


7
00:00:33,396 --> 00:00:36,666
that we perform when we build an
application, and Auto Layout is


8
00:00:36,666 --> 00:00:39,656
about the neatest thing ever,
but sometimes it can seem kind


9
00:00:39,656 --> 00:00:42,246
of mysterious, and so today I
want to look at a few aspects


10
00:00:42,246 --> 00:00:44,996
of Auto Layout that are
less well understood and go


11
00:00:45,046 --> 00:00:46,086
through them in some detail.


12
00:00:47,326 --> 00:00:49,866
This is the second part
of our two-part series,


13
00:00:49,916 --> 00:00:51,026
and here's a brief list


14
00:00:51,026 --> 00:00:52,916
of the topics we're
going to be looking at.


15
00:00:53,416 --> 00:00:55,056
I would like to start
with the layout cycle.


16
00:00:55,606 --> 00:00:59,046
You probably know how to
configure your user interface,


17
00:00:59,596 --> 00:01:03,176
but Auto Layout can still be
a little bit of a black box.


18
00:01:03,506 --> 00:01:04,896
You kind of configure things,


19
00:01:04,896 --> 00:01:07,836
you run your application,
you get some layout.


20
00:01:08,366 --> 00:01:11,286
Hopefully it's the layout that
you want, but if it's not,


21
00:01:11,286 --> 00:01:12,656
it can be hard to
know where to look.


22
00:01:13,076 --> 00:01:15,946
So I want to look at what
happens in the middle here,


23
00:01:16,056 --> 00:01:18,646
how we actually go from
having constraints on the view


24
00:01:18,646 --> 00:01:21,156
to having the frames
assigned to those views.


25
00:01:22,496 --> 00:01:25,306
So here is a high-level
overview of the process.


26
00:01:25,376 --> 00:01:27,846
We start with the application
run loop cheerfully iterating


27
00:01:28,296 --> 00:01:30,736
until the constraints
change in such a way


28
00:01:30,736 --> 00:01:33,216
that the calculated layout
needs to be different.


29
00:01:33,646 --> 00:01:36,326
This causes a deferred
layout pass to be scheduled.


30
00:01:36,716 --> 00:01:38,706
When that layout pass
eventually comes around,


31
00:01:38,986 --> 00:01:40,166
we go through the hierarchy


32
00:01:40,206 --> 00:01:41,886
and update all the
frames for the views.


33
00:01:41,886 --> 00:01:45,666
This is a little abstract, so
I made a simple example here.


34
00:01:45,666 --> 00:01:49,886
The idea is that when we
uncheck this top checkbox,


35
00:01:50,256 --> 00:01:52,846
we'll modify a constraint
to shrink the window


36
00:01:52,846 --> 00:01:55,966
and hide the checkboxes
on the bottom.


37
00:01:55,966 --> 00:01:58,326
So we start with frames
looking like this.


38
00:01:58,666 --> 00:02:01,576
When we change the constraint,
the layout engine's notion


39
00:02:01,576 --> 00:02:03,386
of where everything is
has already changed,


40
00:02:03,446 --> 00:02:05,136
but the UI hasn't updated yet.


41
00:02:05,136 --> 00:02:07,576
And then when the
layout pass comes along,


42
00:02:07,856 --> 00:02:10,436
the UI actually changes to
match what the engine thinks


43
00:02:10,436 --> 00:02:10,795
should be.


44
00:02:11,936 --> 00:02:13,536
So let's talk about
constraint changes.


45
00:02:14,566 --> 00:02:16,856
The constraints that
you create are converted


46
00:02:16,856 --> 00:02:19,826
to mathematical expressions and
kept inside the Layout Engine.


47
00:02:20,326 --> 00:02:23,796
So a constraints change
is really just anything


48
00:02:23,796 --> 00:02:27,046
that affects these expressions,
and so that includes some


49
00:02:27,046 --> 00:02:28,616
of the obvious things
like activating


50
00:02:28,616 --> 00:02:31,506
or deactivating constraints
or changing the priority


51
00:02:31,506 --> 00:02:34,856
or the constant on a constraint,
but also less obvious things


52
00:02:34,856 --> 00:02:36,836
like manipulating
the view hierarchy


53
00:02:36,836 --> 00:02:38,986
or reconfiguring certain
kinds of controls.


54
00:02:38,986 --> 00:02:41,716
Because those may cause
constraint changes indirectly.


55
00:02:43,326 --> 00:02:45,406
So what happens when
a constraint changes?


56
00:02:46,326 --> 00:02:47,516
Well, the first thing
that happens is


57
00:02:47,516 --> 00:02:49,236
that the Layout Engine
will recompute the layout.


58
00:02:49,566 --> 00:02:52,826
These expressions are made up of
variables that represent things


59
00:02:52,826 --> 00:02:56,086
like the origin or the
size of a particular view.


60
00:02:56,406 --> 00:02:58,136
And when we recalculate
the layout,


61
00:02:58,186 --> 00:03:00,466
these variables may
receive new values.


62
00:03:00,966 --> 00:03:02,566
When this happens, the views


63
00:03:02,566 --> 00:03:03,976
that they represent
are notified,


64
00:03:04,106 --> 00:03:05,866
and they mark their
superview as needing layout.


65
00:03:06,276 --> 00:03:08,776
This is actually what causes
the deferred layout pass


66
00:03:08,896 --> 00:03:09,416
to be scheduled.


67
00:03:10,726 --> 00:03:13,666
So if we look at
the example here,


68
00:03:14,366 --> 00:03:17,436
this is where you see
the frame actually change


69
00:03:17,436 --> 00:03:20,226
in the Layout Engine but not
yet in the view hierarchy.


70
00:03:20,846 --> 00:03:24,256
So when the deferred
layout pass comes along,


71
00:03:24,766 --> 00:03:27,806
the purpose of this, of course,
is to reposition any views


72
00:03:27,886 --> 00:03:29,096
that are not in the right place.


73
00:03:29,236 --> 00:03:31,516
So when we are finished,
everything is in the right spot.


74
00:03:32,786 --> 00:03:35,136
And a pass is actually a
little bit of a misnomer.


75
00:03:35,136 --> 00:03:37,566
There are a couple of
passes that happen here.


76
00:03:38,476 --> 00:03:40,656
The first is for
updating constraints.


77
00:03:40,656 --> 00:03:42,716
The idea with this
is to make sure


78
00:03:42,716 --> 00:03:45,576
that if there are any pending
changes to constraints,


79
00:03:45,626 --> 00:03:48,296
they happen now, before
we go to all the trouble


80
00:03:48,296 --> 00:03:51,246
to traverse the view hierarchy
and reposition all the views.


81
00:03:51,986 --> 00:03:54,976
And then the second pass is when
we do that view repositioning.


82
00:03:56,206 --> 00:03:58,016
So let's talk about
update constraints.


83
00:03:58,816 --> 00:04:00,996
Views need to explicitly request


84
00:04:01,376 --> 00:04:03,846
that their update
constraints method be called.


85
00:04:03,906 --> 00:04:06,766
And this pretty much works the
same way as setNeedsDisplay.


86
00:04:07,346 --> 00:04:08,986
You call
setNeedsUpdateConstraints,


87
00:04:09,376 --> 00:04:12,336
and then some time later your
update constraints method will


88
00:04:13,366 --> 00:04:14,236
be called.


89
00:04:14,286 --> 00:04:17,916
Really, all this is is a way
for views to have a chance


90
00:04:17,916 --> 00:04:20,016
to make changes to
constraints just in time


91
00:04:20,206 --> 00:04:23,996
for the next layout pass, but
it's often not actually needed.


92
00:04:25,206 --> 00:04:27,556
All of your initial constraint
setup should ideally happen


93
00:04:27,556 --> 00:04:28,656
inside Interface Builder.


94
00:04:29,156 --> 00:04:30,536
Or if you really
find that you need


95
00:04:30,536 --> 00:04:32,696
to allocate your
constraints programmatically,


96
00:04:32,946 --> 00:04:34,956
some place like viewDidLoad
is much better.


97
00:04:35,226 --> 00:04:37,266
Update constraints is really
just for work that needs


98
00:04:37,296 --> 00:04:38,836
to be repeated periodically.


99
00:04:39,886 --> 00:04:42,236
Also, it's pretty
straightforward


100
00:04:42,236 --> 00:04:45,886
to just change constraints when
you find the need to do that;


101
00:04:47,046 --> 00:04:48,926
whereas, if you take
that logic apart


102
00:04:48,926 --> 00:04:51,036
from the other code that's
related to it and you move it


103
00:04:51,036 --> 00:04:53,786
into a separate method that
gets executed at a later time,


104
00:04:54,146 --> 00:04:56,656
your code becomes a lot harder
to follow, so it will be harder


105
00:04:56,656 --> 00:04:58,466
for you to maintain,
it will be a lot harder


106
00:04:58,466 --> 00:05:00,286
for other people to understand.


107
00:05:01,236 --> 00:05:03,696
So when would you need to
use update constraints?


108
00:05:04,376 --> 00:05:06,096
Well, it boils down
to performance.


109
00:05:07,126 --> 00:05:09,376
If you find that just
changing your constraints


110
00:05:09,376 --> 00:05:10,606
in place is too slow,


111
00:05:10,636 --> 00:05:13,396
then update constraints might
be able to help you out.


112
00:05:13,896 --> 00:05:16,576
It turns out that changing
a constraint inside update


113
00:05:16,576 --> 00:05:17,946
constraints is actually faster


114
00:05:18,086 --> 00:05:20,826
than changing a constraint
at other times.


115
00:05:20,826 --> 00:05:22,726
The reason for that is
because the engine is able


116
00:05:22,726 --> 00:05:25,016
to treat all the constraint
changes that happen


117
00:05:25,016 --> 00:05:26,416
in this pass as a batch.


118
00:05:26,996 --> 00:05:29,396
This is the same kind of
performance benefit that you get


119
00:05:29,446 --> 00:05:32,426
by calling activate
constraints on an entire array


120
00:05:32,426 --> 00:05:34,846
of constraints as
opposed to activating each


121
00:05:34,846 --> 00:05:36,366
of those constraints
individually.


122
00:05:38,176 --> 00:05:40,466
One of the common
patterns where we find


123
00:05:40,606 --> 00:05:43,096
that this is really useful
is if you have a view


124
00:05:43,386 --> 00:05:46,126
that will rebuild constraints
in response to some kind


125
00:05:46,126 --> 00:05:47,196
of a configuration change.


126
00:05:47,886 --> 00:05:50,706
It turns out to be very common
for clients of these kinds


127
00:05:50,706 --> 00:05:53,046
of views to need to configure
more than one property,


128
00:05:53,356 --> 00:05:55,836
so it's very easy
for the view, then,


129
00:05:55,836 --> 00:05:58,276
to end up rebuilding its
constraints multiple times.


130
00:05:58,336 --> 00:05:59,796
That's just a lot
of wasted work.


131
00:06:00,256 --> 00:06:02,936
It's much more efficient in
these kinds of situations


132
00:06:02,936 --> 00:06:06,466
to have the view just call
setNeedsUpdateConstraints


133
00:06:06,876 --> 00:06:09,436
and then when the update
constraints pass comes along,


134
00:06:09,486 --> 00:06:11,126
it can rebuild its
constraints once


135
00:06:11,226 --> 00:06:12,956
to match whatever the
current configuration is.


136
00:06:14,466 --> 00:06:17,066
In any case, once
this pass is complete,


137
00:06:17,066 --> 00:06:19,306
we know the constraints are
all up-to-date, we are ready


138
00:06:19,306 --> 00:06:21,326
to proceed with repositioning
the views.


139
00:06:22,276 --> 00:06:25,626
So this is where we
traverse the view hierarchy


140
00:06:25,626 --> 00:06:28,186
from the top down, and
we'll call layoutSubviews


141
00:06:28,186 --> 00:06:30,216
on any view marked
as needing layout.


142
00:06:31,056 --> 00:06:33,646
On OS X, this method
is called layout,


143
00:06:33,736 --> 00:06:34,956
but the idea is the same.


144
00:06:35,496 --> 00:06:39,276
The purpose is for the receiver
to reposition its subviews.


145
00:06:39,626 --> 00:06:41,786
It's not for the receiver
to reposition itself.


146
00:06:43,626 --> 00:06:46,566
So what the framework
implementation does is it will


147
00:06:46,566 --> 00:06:48,356
read frames for the subviews


148
00:06:48,356 --> 00:06:50,316
out of the Layout Engine
and then assign them.


149
00:06:50,736 --> 00:06:54,106
On the Mac we use setFrame for
this, and on iOS, it's setBounds


150
00:06:54,106 --> 00:06:56,116
and setCenter, but
the idea is the same.


151
00:06:57,536 --> 00:06:59,286
So if we look at
the example again,


152
00:06:59,286 --> 00:07:01,586
this is where you
actually see the UI update


153
00:07:01,666 --> 00:07:03,966
to match the frames that
are in the Layout Engine.


154
00:07:05,296 --> 00:07:07,106
One other note about
layoutSubviews:


155
00:07:07,156 --> 00:07:10,666
A lot of people will override
this in order to get some kind


156
00:07:10,666 --> 00:07:13,716
of a custom layout, and it's
fine if you need to do this,


157
00:07:14,106 --> 00:07:16,646
but there are some things
that you need to know


158
00:07:16,646 --> 00:07:18,866
because it can be very
easy to do things here


159
00:07:18,866 --> 00:07:19,946
that can get you into trouble.


160
00:07:19,946 --> 00:07:21,686
So I want to look at this
in a little more detail.


161
00:07:23,376 --> 00:07:26,286
You should really only need
to override layoutSubviews


162
00:07:26,286 --> 00:07:27,786
if you need some
kind of a layout


163
00:07:27,786 --> 00:07:31,176
that just can't be
expressed using constraints.


164
00:07:31,176 --> 00:07:33,066
If you can find a way to
do it using constraints,


165
00:07:33,066 --> 00:07:36,056
that's usually more
robust, more trouble free.


166
00:07:37,906 --> 00:07:43,436
If you do choose to override
this, you should keep in mind


167
00:07:43,436 --> 00:07:45,636
that we're in the middle of the
layout ceremony at this point.


168
00:07:45,756 --> 00:07:48,046
Some views have already
been laid out,


169
00:07:48,046 --> 00:07:50,686
other views haven't been, but
they probably will be soon,


170
00:07:51,106 --> 00:07:53,766
and so it's a bit of
a delicate moment.


171
00:07:53,986 --> 00:07:58,486
There are some special
rules to follow.


172
00:07:58,486 --> 00:08:01,826
One is that you need to invoke
the superclass implementation.


173
00:08:02,196 --> 00:08:04,366
We need that for various
bookkeeping purposes.


174
00:08:05,266 --> 00:08:08,306
Also, it's fine to
invalidate the layout of views


175
00:08:08,306 --> 00:08:11,796
within your subtree, but you
should do that before you call


176
00:08:11,846 --> 00:08:13,346
through to the superclass
implementation.


177
00:08:13,836 --> 00:08:20,846
Second, you don't want to call
setNeedsUpdateConstraints.


178
00:08:20,846 --> 00:08:22,526
There was an update
constraints pass.


179
00:08:22,616 --> 00:08:23,636
We went through that,


180
00:08:23,726 --> 00:08:27,016
we finished it, and
so we missed it.


181
00:08:27,166 --> 00:08:28,756
If we still need it
now, it's too late.


182
00:08:29,606 --> 00:08:32,426
Also, you want to make sure
you don't invalidate the layout


183
00:08:32,426 --> 00:08:34,166
of views outside your subtree.


184
00:08:34,385 --> 00:08:37,106
If you do this, it
can be very easy


185
00:08:37,106 --> 00:08:39,196
to cause layout feedback
loops where the act


186
00:08:39,456 --> 00:08:42,166
of performing layout
actually causes the layout


187
00:08:42,166 --> 00:08:43,086
to be dirtied again.


188
00:08:43,765 --> 00:08:45,486
Then we can just end
up iterating forever,


189
00:08:45,486 --> 00:08:46,876
and that's no fun for anybody.


190
00:08:48,616 --> 00:08:52,306
You'll often find inside
a layoutSubviews override


191
00:08:52,306 --> 00:08:54,526
that you need to modify
constraints in order


192
00:08:54,526 --> 00:08:57,766
to get your views in the right
places, and that's fine too,


193
00:08:57,766 --> 00:08:59,236
but again, you need
to be careful.


194
00:08:59,676 --> 00:09:01,196
It can be difficult to predict


195
00:09:01,416 --> 00:09:03,996
when you modify a
constraint what other views


196
00:09:03,996 --> 00:09:05,536
in the hierarchy
might be affected.


197
00:09:05,936 --> 00:09:08,066
So if you are changing
constraints, it's very easy


198
00:09:08,066 --> 00:09:11,346
to accidentally invalidate
layout outside your subtree.


199
00:09:11,346 --> 00:09:15,656
In any case, assuming that
all this goes smoothly,


200
00:09:15,806 --> 00:09:18,176
layout cycle is complete at
this point, everything is


201
00:09:18,176 --> 00:09:20,456
in the right place, and our
constraints change has been


202
00:09:20,546 --> 00:09:21,066
fully applied.


203
00:09:22,356 --> 00:09:25,046
So some things to remember
about the layout cycle: First,


204
00:09:25,456 --> 00:09:27,726
don't expect view frames
to change immediately


205
00:09:27,726 --> 00:09:28,846
when you modify a constraint.


206
00:09:28,896 --> 00:09:31,206
We've just been through
this whole process


207
00:09:31,206 --> 00:09:32,506
about how that happens later.


208
00:09:33,056 --> 00:09:36,286
And if you do find that you
need to override layoutSubviews,


209
00:09:36,676 --> 00:09:39,096
be very careful to avoid
layout feedback loops


210
00:09:39,096 --> 00:09:43,116
because they can
be a pain to debug.


211
00:09:43,116 --> 00:09:45,986
So next I'd like to talk about
how Auto Layout interacts


212
00:09:45,986 --> 00:09:47,316
with the Legacy Layout system.


213
00:09:49,106 --> 00:09:52,136
Traditionally we positioned
views just by setting the frame,


214
00:09:52,136 --> 00:09:54,716
then we have an autoresizingMask


215
00:09:54,766 --> 00:09:57,916
that specifies how the
view should be resized


216
00:09:58,506 --> 00:10:00,016
when its superview changes size.


217
00:10:00,256 --> 00:10:03,406
Then under Auto Layout, we just
do everything with constraints.


218
00:10:03,696 --> 00:10:06,126
And in fact, subframe
doesn't even work the way you


219
00:10:06,126 --> 00:10:07,396
might expect.


220
00:10:07,396 --> 00:10:10,406
You can still set the
frame of view, but --


221
00:10:10,996 --> 00:10:13,196
and it will move
where you put it,


222
00:10:13,556 --> 00:10:15,796
but that frame may be
overwritten at any time


223
00:10:15,846 --> 00:10:19,596
if a layout pass comes along and
the framework copies the frame


224
00:10:19,596 --> 00:10:21,316
from the Layout Engine and
applies it to that view.


225
00:10:21,776 --> 00:10:23,296
The trouble with this is


226
00:10:23,336 --> 00:10:26,156
that sometimes you just
need to set the frame.


227
00:10:26,236 --> 00:10:28,706
For example, if you are
overriding layoutSubviews,


228
00:10:29,446 --> 00:10:31,506
you may need to set the
frame of those views.


229
00:10:32,666 --> 00:10:34,756
And so luckily, there's
a flag for that.


230
00:10:35,356 --> 00:10:37,256
It's called
translatesAutoResizingMask


231
00:10:37,256 --> 00:10:38,146
IntoConstraints [without space].


232
00:10:38,496 --> 00:10:41,096
It's a bit of a mouthful, but it
pretty much does what it says.


233
00:10:41,096 --> 00:10:43,256
It makes views behave
the way that they did


234
00:10:43,346 --> 00:10:46,426
under the Legacy Layout system
but in an Auto Layout world.


235
00:10:47,306 --> 00:10:51,206
So if you set the frame
on a view with this flag,


236
00:10:51,596 --> 00:10:53,716
the framework will actually
generate constraints


237
00:10:53,776 --> 00:10:56,336
that enforce that frame
in the Layout Engine.


238
00:10:57,246 --> 00:11:00,436
What this means is that you
can set the frame as often


239
00:11:00,436 --> 00:11:02,626
as you like, and you
can count on Auto Layout


240
00:11:02,666 --> 00:11:05,206
to keep the view
where you put it.


241
00:11:05,476 --> 00:11:08,566
Furthermore, these constraints
actually implement the behavior


242
00:11:09,016 --> 00:11:10,276
of the autoresizingMask.


243
00:11:10,756 --> 00:11:14,366
So if you have some portion of
your application, for example,


244
00:11:14,366 --> 00:11:16,896
that isn't updated to Auto
Layout yet and you are depending


245
00:11:16,896 --> 00:11:18,526
on this auto-resizing behavior,


246
00:11:18,876 --> 00:11:20,676
it should still behave
the way that you expect.


247
00:11:22,096 --> 00:11:25,586
And finally, by actually
using the Auto Layout Engine


248
00:11:25,586 --> 00:11:28,966
to enforce the frame that
you set, it makes it possible


249
00:11:28,966 --> 00:11:31,646
to use constraints to
position other views relative


250
00:11:31,706 --> 00:11:33,616
to this one.


251
00:11:33,616 --> 00:11:35,476
Since you set the frame,
you can't move the view


252
00:11:35,476 --> 00:11:38,996
around itself, but if we
didn't tell the Layout Engine


253
00:11:38,996 --> 00:11:42,226
where this view needed to be,
then as soon as you reference it


254
00:11:42,226 --> 00:11:44,996
with a constraint, we
can run into problems


255
00:11:44,996 --> 00:11:48,576
where you'll see the size or
the origin collapse to zero.


256
00:11:48,576 --> 00:11:51,396
And that kind of behavior
can be very confusing


257
00:11:51,526 --> 00:11:53,966
if you are not expecting it.


258
00:11:54,416 --> 00:11:58,666
So another note here is
that when you are planning


259
00:11:58,666 --> 00:12:00,686
to position your view
using constraints,


260
00:12:00,916 --> 00:12:02,226
you need to make sure
that this is off.


261
00:12:02,386 --> 00:12:04,516
And if you are building your
UI in Interface Builder,


262
00:12:04,516 --> 00:12:07,506
it will take good care of you
and set this flag appropriately.


263
00:12:08,026 --> 00:12:10,416
But if you are allocating
your UI programmatically,


264
00:12:10,416 --> 00:12:12,176
this actually defaults
to being on.


265
00:12:12,216 --> 00:12:14,786
It needs to because
there's just a lot of code


266
00:12:14,786 --> 00:12:16,536
that allocates a view
and then expects it


267
00:12:16,536 --> 00:12:18,816
to behave in a certain way.


268
00:12:19,466 --> 00:12:22,966
So it defaults to on, and if
you are allocating your UI


269
00:12:22,966 --> 00:12:24,896
programmatically and you
forget to turn this off,


270
00:12:24,896 --> 00:12:27,246
it can cause a number
of unexpected problems.


271
00:12:27,806 --> 00:12:29,536
Let's look at what
happens if you forget.


272
00:12:30,356 --> 00:12:32,536
So this is a pretty
simple piece of code.


273
00:12:32,536 --> 00:12:34,606
We just allocate a
button and configure it,


274
00:12:34,606 --> 00:12:36,596
and then we create
two constraints


275
00:12:36,666 --> 00:12:39,106
that position this button
ten points from the top,


276
00:12:39,256 --> 00:12:41,046
ten points from the left.


277
00:12:41,046 --> 00:12:42,666
So it's very straightforward,


278
00:12:42,666 --> 00:12:44,226
but if you run it,
this is what you get.


279
00:12:44,766 --> 00:12:46,736
The window is too small,
it doesn't behave the way


280
00:12:46,736 --> 00:12:48,736
that you expect, the button
is nowhere to be seen.


281
00:12:49,776 --> 00:12:52,206
And you get all this
spew in the console.


282
00:12:53,066 --> 00:12:56,266
So there's actually a hint
about the problem in this spew.


283
00:12:56,266 --> 00:12:58,726
You can see this is an
NSAutoresizingMaskLayout


284
00:12:58,726 --> 00:12:59,196
Constraint [without space].


285
00:12:59,866 --> 00:13:01,766
This is the class
of layout constraint


286
00:13:02,226 --> 00:13:04,306
that the framework
will create for views


287
00:13:04,306 --> 00:13:06,146
that have
translatesAutoResizingMask


288
00:13:06,146 --> 00:13:07,196
IntoConstraints [without
space] set.


289
00:13:08,726 --> 00:13:11,336
What actually happened
here is because we forgot


290
00:13:11,596 --> 00:13:15,246
to clear this flag, the
framework generated constraints


291
00:13:15,246 --> 00:13:16,896
for the initial frame
on this button.


292
00:13:17,256 --> 00:13:19,886
That frame was empty, the origin
and the size were both zero,


293
00:13:20,476 --> 00:13:23,006
so it's not very useful,
but the real problem came


294
00:13:23,006 --> 00:13:24,796
up when we then added
constraints to try


295
00:13:24,796 --> 00:13:27,016
to position the button at 10,10.


296
00:13:27,196 --> 00:13:29,926
It can't be at 0,0 and
10,10 simultaneously,


297
00:13:29,926 --> 00:13:32,296
so the Layout Engine
suddenly can't satisfy all the


298
00:13:32,296 --> 00:13:35,146
constraints, and things go
wrong in unexpected ways.


299
00:13:36,496 --> 00:13:39,976
If we go back to the code
and we just add a line


300
00:13:39,976 --> 00:13:43,896
to clear this flag, then
things get much better.


301
00:13:43,896 --> 00:13:46,696
We get the layout that we
are expecting, the button is


302
00:13:46,696 --> 00:13:50,476
in the right place, the window
behaves the way we would expect.


303
00:13:50,586 --> 00:13:52,876
So some things to keep in mind


304
00:13:52,876 --> 00:13:55,296
about translatesAutoResizingMask
IntoConstraints [without space]:


305
00:13:55,606 --> 00:13:58,726
You usually won't need this
flag at all, but if you find


306
00:13:58,726 --> 00:14:00,816
that you have a view
that you need to position


307
00:14:00,906 --> 00:14:04,166
by setting the frame directly,
then this will help you out.


308
00:14:04,916 --> 00:14:07,236
And again, if you are
planning to position things


309
00:14:07,236 --> 00:14:09,956
with constraints, you need
to make sure that this is off


310
00:14:09,956 --> 00:14:12,896
if you are not using
Interface Builder.


311
00:14:13,786 --> 00:14:15,996
So next I'd like to talk
about constraint creation.


312
00:14:16,976 --> 00:14:20,476
We can do that most easily,
I think, just by looking


313
00:14:20,476 --> 00:14:22,226
at the code we just
had up on the screen,


314
00:14:22,626 --> 00:14:24,406
specifically the
piece at the end,


315
00:14:24,406 --> 00:14:25,686
where we are building
these constraints.


316
00:14:26,936 --> 00:14:30,336
This is the same constraint
factory method that we've had


317
00:14:30,386 --> 00:14:31,926
since the beginning
of Auto Layout,


318
00:14:31,926 --> 00:14:33,096
and it's perfectly effective,


319
00:14:33,286 --> 00:14:35,266
but it can be a little
bit awkward to use.


320
00:14:35,946 --> 00:14:37,676
The code is pretty verbose,


321
00:14:37,676 --> 00:14:40,066
and it's a little bit
difficult to read.


322
00:14:40,066 --> 00:14:42,096
What we are really trying
to express here is just


323
00:14:42,126 --> 00:14:44,226
that we want to position the
button ten points from the top


324
00:14:44,346 --> 00:14:45,546
and ten points from the left.


325
00:14:46,256 --> 00:14:48,376
But in order to understand
that, you need to read


326
00:14:48,376 --> 00:14:49,886
through this code
pretty carefully and kind


327
00:14:49,886 --> 00:14:50,866
of put the pieces together.


328
00:14:51,556 --> 00:14:54,246
So in the new release
of OS X and iOS,


329
00:14:54,336 --> 00:14:56,806
we are introducing a
new, more concise syntax


330
00:14:56,906 --> 00:14:57,956
for creating constraints.


331
00:14:58,536 --> 00:14:59,926
Here is what it looks like.


332
00:15:00,476 --> 00:15:03,966
This syntax works using
objects called layout anchors.


333
00:15:04,516 --> 00:15:10,596
[Applause]


334
00:15:11,096 --> 00:15:12,956
Thanks. I am glad you like them.


335
00:15:13,031 --> 00:15:15,031
[Laughter]


336
00:15:15,046 --> 00:15:16,816
A layout anchor represents
a particular attribute


337
00:15:16,926 --> 00:15:20,376
of a particular view, and
anchor objects expose a variety


338
00:15:20,376 --> 00:15:23,426
of factory methods for creating
different forms of constraints.


339
00:15:24,026 --> 00:15:26,956
So in this case we see we are
constraining the top anchor


340
00:15:26,956 --> 00:15:31,656
to be the same as the top
anchor of the view plus ten.


341
00:15:31,656 --> 00:15:33,416
If you are working
in Objective-C still,


342
00:15:33,416 --> 00:15:35,096
they are available
there as well,


343
00:15:35,096 --> 00:15:37,156
and the difference is
even more striking.


344
00:15:37,156 --> 00:15:41,376
We go from nearly seven
lines down to just two.


345
00:15:41,376 --> 00:15:43,296
So this new syntax
still conforms


346
00:15:43,296 --> 00:15:46,036
to all our naming conventions,
but it reads a lot more


347
00:15:46,036 --> 00:15:48,136
like an expression and, I
think, makes it a lot easier


348
00:15:48,136 --> 00:15:49,706
to see the intent of the code.


349
00:15:50,956 --> 00:15:53,596
All valid forms of constraints
can be created using this


350
00:15:53,596 --> 00:15:57,706
syntax, and you'll actually even
get compiler errors for many


351
00:15:57,706 --> 00:15:59,396
of the invalid forms
of constraints.


352
00:16:00,216 --> 00:16:03,726
So at the moment, you only
get the errors in Objective-C,


353
00:16:03,726 --> 00:16:05,296
but they will be
coming to Swift as well.


354
00:16:06,406 --> 00:16:08,676
For example, it doesn't
make sense to say


355
00:16:08,676 --> 00:16:11,606
that the leading edge
of a view should be 100


356
00:16:11,716 --> 00:16:14,486
because there's no context in
which to interpret that 100.


357
00:16:14,876 --> 00:16:17,236
So you get an error that
this method isn't available


358
00:16:17,376 --> 00:16:20,096
on a location anchor.


359
00:16:20,096 --> 00:16:22,996
Similarly, it doesn't make
sense to say the leading edge


360
00:16:22,996 --> 00:16:25,186
of your view is the same as
the width of a different view.


361
00:16:25,896 --> 00:16:29,096
Locations and sizes are
fundamentally incompatible types


362
00:16:29,236 --> 00:16:34,856
in Auto Layout, so you get
an incompatible pointer type.


363
00:16:34,946 --> 00:16:37,866
So previously, these
things were still errors,


364
00:16:38,156 --> 00:16:39,676
but they would only
show up at runtime,


365
00:16:39,866 --> 00:16:42,686
so I think making them compile
time errors will help us all get


366
00:16:42,686 --> 00:16:44,946
our constraints right
the first time,


367
00:16:44,946 --> 00:16:47,156
as well as write more readable,
more maintainable code.


368
00:16:49,516 --> 00:16:54,346
[Applause]


369
00:16:54,846 --> 00:16:58,096
So next I'd like to talk about
constraining negative space.


370
00:16:58,426 --> 00:17:00,576
There are a few different
kinds of layouts that come


371
00:17:00,576 --> 00:17:03,546
up from time to time where it's
not immediately obvious how


372
00:17:03,546 --> 00:17:04,156
to achieve them.


373
00:17:04,685 --> 00:17:06,215
Here's a couple examples.


374
00:17:06,215 --> 00:17:10,266
In the first case here, the goal
is to make sure that the space


375
00:17:10,266 --> 00:17:11,896
between these buttons
remains the same


376
00:17:12,076 --> 00:17:13,376
when the window is resized.


377
00:17:13,866 --> 00:17:16,165
And in the bottom, we
have an image and a label,


378
00:17:16,955 --> 00:17:20,646
and we want to center
them as a group rather


379
00:17:20,646 --> 00:17:23,406
than center each piece of
the content individually.


380
00:17:24,156 --> 00:17:25,596
So it turns out that
the solution


381
00:17:25,596 --> 00:17:27,576
to these layout problems
is the same,


382
00:17:27,965 --> 00:17:29,486
and that's to use dummy views.


383
00:17:30,096 --> 00:17:33,096
We actually allocate empty
views, and we constrain them


384
00:17:33,096 --> 00:17:34,916
to fill the spaces
between the buttons.


385
00:17:34,976 --> 00:17:37,246
Once we have views
in these spots,


386
00:17:37,636 --> 00:17:40,006
we can use an equal width
constraint to make sure


387
00:17:40,006 --> 00:17:43,706
that their size remains the
same as the window is resized.


388
00:17:43,706 --> 00:17:46,106
And in the bottom case,
we can do the same thing.


389
00:17:46,106 --> 00:17:49,286
We use an empty view, and
we constrain it to the edges


390
00:17:49,286 --> 00:17:50,686
of the image and the label,


391
00:17:50,686 --> 00:17:53,026
and then we can place
a centering constraint


392
00:17:53,116 --> 00:17:55,626
on that empty view
rather than on any


393
00:17:55,626 --> 00:17:57,156
of the content views themselves.


394
00:17:57,916 --> 00:18:00,646
So this works, and it's how
we've traditionally solved these


395
00:18:00,646 --> 00:18:03,546
layout problems, but
it's a little bit


396
00:18:03,546 --> 00:18:04,976
of an obscure trick, right?


397
00:18:04,976 --> 00:18:07,836
And it's also inefficient,
especially on iOS,


398
00:18:07,836 --> 00:18:09,876
where every view has a
layer associated with it.


399
00:18:10,756 --> 00:18:12,056
And so in the new release,


400
00:18:12,056 --> 00:18:16,796
we are exposing a new public
class for layout guides.


401
00:18:17,776 --> 00:18:20,366
A layout guide simply
represents a rectangle


402
00:18:20,416 --> 00:18:21,136
in the Layout Engine.


403
00:18:21,986 --> 00:18:23,756
They're very easy to use.


404
00:18:23,956 --> 00:18:27,496
All you need to do is
allocate them and then add them


405
00:18:27,496 --> 00:18:30,046
to an owning view, and then
you can constrain them just


406
00:18:30,046 --> 00:18:30,856
like you can a view.


407
00:18:31,336 --> 00:18:33,106
They expose anchor
objects, so they work


408
00:18:33,106 --> 00:18:35,186
with the new constraint
creation syntax,


409
00:18:35,346 --> 00:18:36,866
but you can also just pass them


410
00:18:37,436 --> 00:18:39,636
to the existing constraint
factory methods.


411
00:18:39,696 --> 00:18:42,336
So they will work with
visual format language


412
00:18:42,336 --> 00:18:42,946
and things like that.


413
00:18:44,076 --> 00:18:46,156
We are converting
existing layout guides


414
00:18:46,156 --> 00:18:52,006
to use these internally, and
here is a good example of that.


415
00:18:52,006 --> 00:18:55,336
UIView, you may notice, doesn't
actually expose layout anchors


416
00:18:55,426 --> 00:18:56,546
for the margin attributes.


417
00:18:57,066 --> 00:19:00,076
Instead, UI View has a
new layout margins guide.


418
00:19:00,286 --> 00:19:02,786
This layout guide just
represents the area


419
00:19:02,786 --> 00:19:04,546
of the view inside the margins.


420
00:19:05,686 --> 00:19:08,776
And so if you need to constrain
something to the margins,


421
00:19:08,776 --> 00:19:11,746
it's easiest to just go
through this layout guide.


422
00:19:12,456 --> 00:19:16,216
So layout guides don't really
enable any fundamentally


423
00:19:16,216 --> 00:19:16,886
new behavior.


424
00:19:16,886 --> 00:19:20,226
You can do all of these
things today using views.


425
00:19:20,706 --> 00:19:22,536
But they let you solve
these kinds of problems


426
00:19:22,536 --> 00:19:24,916
in a much more lightweight
manner and also


427
00:19:24,976 --> 00:19:28,456
without cluttering your
view hierarchy with views


428
00:19:28,456 --> 00:19:29,936
that don't actually
need to draw.


429
00:19:31,386 --> 00:19:35,736
So next I'd like to invite Kasia
back on stage to talk to you


430
00:19:35,736 --> 00:19:38,026
about some debugging
strategies for problems


431
00:19:38,026 --> 00:19:38,866
that come up with Auto Layout.


432
00:19:39,516 --> 00:19:46,406
[Applause]


433
00:19:46,906 --> 00:19:47,256
>> KASIA WAWER: Hello.


434
00:19:47,766 --> 00:19:49,666
I saw some of you
this morning, I think.


435
00:19:50,116 --> 00:19:50,816
My name is Kasia.


436
00:19:50,906 --> 00:19:53,826
I am on the iOS Keyboards Team,
and I am here to talk to you


437
00:19:53,826 --> 00:19:55,936
about debugging your
layout, what you should do


438
00:19:55,936 --> 00:19:56,896
when something goes wrong.


439
00:19:57,616 --> 00:19:59,976
Those of you who have used
Auto Layout in the past --


440
00:19:59,976 --> 00:20:02,946
which I hope is most of you --
have probably run into something


441
00:20:02,946 --> 00:20:07,136
like this: You design a
UI, and it's beautiful,


442
00:20:07,536 --> 00:20:09,086
and you're trying to
implement it in your code,


443
00:20:09,086 --> 00:20:10,596
and you put in all your
constraints carefully,


444
00:20:10,596 --> 00:20:11,346
and you adjust things.


445
00:20:11,686 --> 00:20:13,696
And you hit build and
run, and this happens.


446
00:20:14,896 --> 00:20:17,336
Totally the wrong thing,
and in the debugger,


447
00:20:17,456 --> 00:20:19,796
you see something like this.


448
00:20:20,056 --> 00:20:22,056
That's a lot of text; it can
be a little intimidating.


449
00:20:22,056 --> 00:20:24,006
But it's actually a
really useful log.


450
00:20:24,756 --> 00:20:28,466
And this happens when you hit an
unsatisfiable constraint error.


451
00:20:28,946 --> 00:20:31,006
The engine has looked at the set
of constraints you've given it


452
00:20:31,396 --> 00:20:33,916
and decided that it can't
actually solve your layout


453
00:20:33,916 --> 00:20:35,836
because something is
conflicting with something else,


454
00:20:36,286 --> 00:20:37,936
so it needs to break
one of your constraints


455
00:20:37,936 --> 00:20:39,616
in order to solve your view.


456
00:20:40,016 --> 00:20:43,136
And so it throws this error
to tell you what it did,


457
00:20:43,946 --> 00:20:47,226
and you know, then you need
to go and dig in and find


458
00:20:47,226 --> 00:20:48,416
that extra competing constraint.


459
00:20:49,166 --> 00:20:51,306
So let's try reading
this log a little bit.


460
00:20:51,576 --> 00:20:54,206
So here's the view we just
saw and the log we got.


461
00:20:54,206 --> 00:20:55,936
We've moved some
stuff from the top


462
00:20:56,006 --> 00:20:57,366
to make it fit on the screen.


463
00:20:57,856 --> 00:21:00,296
But the first place to start
is by looking at the bottom.


464
00:21:01,166 --> 00:21:03,156
The last thing you
see is the constraint


465
00:21:03,156 --> 00:21:04,126
that was actually broken.


466
00:21:04,626 --> 00:21:06,936
This is not necessarily the
constraint that's causing the


467
00:21:06,936 --> 00:21:09,736
problem but the one the
engine had to break in order


468
00:21:09,736 --> 00:21:12,226
to solve your layout, so it's
a really good place to start.


469
00:21:13,216 --> 00:21:15,226
You start with checking
translatesAutoResizingMask


470
00:21:15,226 --> 00:21:16,486
IntoConstraints [without
space] on that view.


471
00:21:16,906 --> 00:21:19,776
As you saw with Jesse's
example, that will show up also


472
00:21:19,776 --> 00:21:21,596
in the log, but it's
usually a good thing


473
00:21:21,596 --> 00:21:23,116
to make sure you've
done that first.


474
00:21:23,586 --> 00:21:26,626
In this case, we have an
aspect ratio constraint


475
00:21:26,626 --> 00:21:27,726
on Saturn that was broken.


476
00:21:28,436 --> 00:21:30,146
So let's highlight that
higher up in the log.


477
00:21:30,146 --> 00:21:32,096
It will show up in
the log itself.


478
00:21:32,096 --> 00:21:36,306
The next thing to do is to
find the other constraints


479
00:21:36,306 --> 00:21:38,186
that are affecting that view
that show up in the log.


480
00:21:39,026 --> 00:21:42,856
So in this case, we next see a
leading to superview constraint


481
00:21:42,856 --> 00:21:46,396
and a trailing to superview
constraint, and one to the top,


482
00:21:47,346 --> 00:21:49,256
and then one to the
label view underneath it.


483
00:21:50,216 --> 00:21:51,106
And all of these are fine.


484
00:21:51,106 --> 00:21:52,686
None of these are
directly conflicting.


485
00:21:53,316 --> 00:21:55,906
So the next thing to look at
are the views it's tied to,


486
00:21:55,936 --> 00:21:56,916
in this case, the label.


487
00:21:58,046 --> 00:22:00,336
So this label has the same
constraint that ties it


488
00:22:00,336 --> 00:22:03,446
to the bottom of Saturn, and the
next constraint it has is one


489
00:22:03,446 --> 00:22:04,896
that ties it to the
top of a superview.


490
00:22:04,896 --> 00:22:08,076
And this is a problem because
Saturn is supposed to be more


491
00:22:08,076 --> 00:22:10,616
than 100 points tall, and
this constraint is telling it


492
00:22:10,616 --> 00:22:11,136
to be that way.


493
00:22:11,776 --> 00:22:14,626
You'll notice that
the constraint next


494
00:22:14,706 --> 00:22:19,386
to the label there tells you
exactly what the constraint


495
00:22:19,386 --> 00:22:20,836
looks like in something
very similar


496
00:22:20,836 --> 00:22:23,166
to the visual format language
that you may have used


497
00:22:23,166 --> 00:22:24,506
for creating your
constraints in the past.


498
00:22:24,686 --> 00:22:27,416
So we see that it's 100 points
from the top of the superview,


499
00:22:27,906 --> 00:22:29,706
and again, since Saturn
needs to be more than that,


500
00:22:30,086 --> 00:22:31,276
it had to break one
of the constraints


501
00:22:31,276 --> 00:22:32,256
in order to solve your layout.


502
00:22:33,036 --> 00:22:35,246
So it's actually not
that difficult to read.


503
00:22:36,116 --> 00:22:38,726
Now, I have made it
a little bit easier


504
00:22:38,886 --> 00:22:41,576
because you probably are used
to seeing constraints logs


505
00:22:41,576 --> 00:22:44,076
that look more like this,
where there's just a bunch


506
00:22:44,076 --> 00:22:47,586
of memory addresses and class
names and there's nothing really


507
00:22:47,586 --> 00:22:49,846
to tell you what's what unless
you have nav text in your view.


508
00:22:50,766 --> 00:22:52,646
It's much easier if it
looks something like this.


509
00:22:53,736 --> 00:22:55,236
In order to achieve
that, all you need


510
00:22:55,236 --> 00:22:57,156
to do is add identifiers
to your constraints.


511
00:22:57,766 --> 00:22:59,096
And there's a couple
easy ways to do that.


512
00:22:59,096 --> 00:23:02,026
If you are using
explicit constraints,


513
00:23:02,026 --> 00:23:02,886
it's just a property.


514
00:23:03,666 --> 00:23:06,446
I suggest naming the
identifier the same thing


515
00:23:06,446 --> 00:23:08,396
as you are naming your
constraint just so it's easy


516
00:23:08,396 --> 00:23:10,756
to find later if you need
to dig it out of your code.


517
00:23:11,376 --> 00:23:15,026
But you can name it anything
you want, so go forth and do so.


518
00:23:15,026 --> 00:23:18,046
If you are using Visual Format
Language, you get an array back,


519
00:23:18,046 --> 00:23:19,946
you don't get a constraint
back, so you have to loop


520
00:23:19,946 --> 00:23:22,626
through that array and set the
identifier on every constraint.


521
00:23:23,176 --> 00:23:25,086
You can set the same
identifier on every constraint


522
00:23:25,086 --> 00:23:27,026
in the array, and that's
generally a good idea.


523
00:23:27,366 --> 00:23:29,636
If you try to pick out the
individual constraints there


524
00:23:29,636 --> 00:23:32,096
and set identifiers on them
and you change something


525
00:23:32,096 --> 00:23:33,786
in that array later, the
ordering is going to change


526
00:23:33,786 --> 00:23:34,666
and you are going
to have to go back


527
00:23:34,666 --> 00:23:36,396
and change your identifier
order as well.


528
00:23:37,016 --> 00:23:40,806
Plus once you see that phrase
in your log, you know exactly


529
00:23:40,806 --> 00:23:42,256
where you are going to
look for the problem,


530
00:23:42,256 --> 00:23:45,356
so you don't really need to have
each specific constraint laid


531
00:23:45,356 --> 00:23:45,706
out there.


532
00:23:46,446 --> 00:23:47,476
Finally, Interface Builder


533
00:23:48,086 --> 00:23:50,646
in the constraint inspector just
has an identifier property right


534
00:23:50,646 --> 00:23:53,226
there, so that's super easy.


535
00:23:54,276 --> 00:23:54,516
Let's see.


536
00:23:54,516 --> 00:23:58,106
So let's talk about, you
know, understanding this log,


537
00:23:58,546 --> 00:24:01,516
and making it even easier
to know what's going on.


538
00:24:02,566 --> 00:24:06,216
First, if you set accessibility
identifiers on your views,


539
00:24:07,046 --> 00:24:08,936
those identifiers will
show up in the log paired


540
00:24:08,936 --> 00:24:10,816
with those views, so you
can find the view you are


541
00:24:10,816 --> 00:24:11,246
looking for.


542
00:24:11,246 --> 00:24:13,946
That's how I got Saturn from
the constraints we saw earlier.


543
00:24:13,976 --> 00:24:16,396
It has an accessibility
identifier called Saturn.


544
00:24:17,156 --> 00:24:19,516
You can also set identifiers
on our new layout guides,


545
00:24:20,076 --> 00:24:22,286
and that's just a flat-out
identifier property,


546
00:24:22,286 --> 00:24:25,216
nothing special about it, which
makes it super easy, again,


547
00:24:25,696 --> 00:24:27,316
to debug layouts that
are using layout guides,


548
00:24:27,656 --> 00:24:29,176
and since they're awesome I'm
pretty sure all of you are going


549
00:24:29,176 --> 00:24:30,196
to be using them at some point.


550
00:24:30,926 --> 00:24:31,956
Add them as you go.


551
00:24:32,806 --> 00:24:35,946
If you try and take a very
complex layout now and throw all


552
00:24:35,946 --> 00:24:37,546
of your identifiers
in, you can do it.


553
00:24:37,546 --> 00:24:38,366
It will take time.


554
00:24:38,366 --> 00:24:41,046
It's worth it because you will
be able to read this log later.


555
00:24:41,046 --> 00:24:43,916
But if you are doing it as
you go, that's a lot less work


556
00:24:43,916 --> 00:24:45,996
down the road because
you can't really predict


557
00:24:45,996 --> 00:24:47,706
when you are going to run into
this problem, necessarily,


558
00:24:48,046 --> 00:24:50,246
and you want to have it
there when you need it.


559
00:24:51,046 --> 00:24:54,056
Finally, if you have an
unsatisfiable constraints log


560
00:24:54,056 --> 00:24:55,346
that just has too
much information,


561
00:24:55,716 --> 00:24:57,896
you have a very complex
layout, there are hundreds


562
00:24:57,896 --> 00:24:59,986
of lines there, you
can take that view


563
00:24:59,986 --> 00:25:02,136
at the bottom especially and
other views that you are looking


564
00:25:02,136 --> 00:25:04,716
at and actually view the
constraints affecting them one


565
00:25:04,716 --> 00:25:05,866
at a time in the debugger.


566
00:25:06,496 --> 00:25:06,916
On iOS,


567
00:25:06,916 --> 00:25:08,626
it's constraintsAffectingLayout
ForAxis [without space],


568
00:25:09,106 --> 00:25:09,776
and on OS X,


569
00:25:09,776 --> 00:25:11,896
it's constraintsAffectingLayout
ForOrientation [without space].


570
00:25:11,896 --> 00:25:15,256
And that will tell you just the
constraints that are affecting


571
00:25:15,256 --> 00:25:18,926
that view in one
axis or another.


572
00:25:19,546 --> 00:25:23,666
So let's look at how
that works for here.


573
00:25:25,026 --> 00:25:31,456
So I've got that view
that we just looked at.


574
00:25:31,716 --> 00:25:33,036
We see the same log down here.


575
00:25:33,786 --> 00:25:35,846
But let's wipe that out for the
moment because I really want


576
00:25:35,846 --> 00:25:38,796
to show you how else
to look at this.


577
00:25:38,866 --> 00:25:41,146
I have set a two-finger
double-tap just to break here


578
00:25:41,146 --> 00:25:42,286
so I don't have to
use memory addresses.


579
00:25:42,286 --> 00:25:43,836
I can use the names I've set up.


580
00:25:43,836 --> 00:25:49,186
So we are going to break into
the debugger here and ask it


581
00:25:49,366 --> 00:25:54,906
to print out Saturn's
constraintsAffectingLayout


582
00:25:54,906 --> 00:25:56,546
ForAxis [without space]
and its vertical axis.


583
00:25:57,456 --> 00:26:00,976
Vertical is 1, horizontal is 0.


584
00:26:00,976 --> 00:26:02,786
If you use the wrong one, you
only have one other option,


585
00:26:02,786 --> 00:26:04,626
so it's pretty easy
to get back to it.


586
00:26:04,846 --> 00:26:07,336
So here we see the
view has a layout guide


587
00:26:07,466 --> 00:26:10,276
at the top, and that's fine.


588
00:26:10,506 --> 00:26:11,726
That's the view's constraints.


589
00:26:12,466 --> 00:26:14,406
One of the other benefits
to naming your constraints


590
00:26:14,406 --> 00:26:15,876
in your views is that
you know pretty quickly


591
00:26:15,876 --> 00:26:18,106
which ones were set up
outside of your constraints


592
00:26:18,106 --> 00:26:19,306
and which ones were
set up by you.


593
00:26:19,596 --> 00:26:22,896
So our vertical layout for
Saturn tells us that it's tied


594
00:26:22,896 --> 00:26:23,896
to the top layout guide.


595
00:26:24,946 --> 00:26:25,386
That's great.


596
00:26:25,386 --> 00:26:29,176
It also tells us that Saturn is
tied to the label underneath it.


597
00:26:30,146 --> 00:26:32,306
And then in another
constraint that affects Saturn


598
00:26:32,376 --> 00:26:33,836
but isn't directly
related to Saturn,


599
00:26:34,136 --> 00:26:36,466
we see that constraint
that's tying the label


600
00:26:36,466 --> 00:26:37,356
to the top of the view.


601
00:26:37,866 --> 00:26:39,806
Since it doesn't
mention Saturn anywhere,


602
00:26:39,806 --> 00:26:42,036
that's a pretty good clue
that it's the wrong one --


603
00:26:42,376 --> 00:26:43,866
also that whole Saturn
is supposed to be more


604
00:26:43,866 --> 00:26:46,256
than a hundred points thing,
which I happen to know


605
00:26:46,256 --> 00:26:48,346
since I wrote this code.


606
00:26:48,596 --> 00:26:51,866
Now that I've got this
nice handy label here,


607
00:26:51,866 --> 00:26:54,596
I can simply search for
it, find the constraint


608
00:26:54,596 --> 00:26:55,916
that I made, and there we go.


609
00:26:55,916 --> 00:26:58,246
I have tied it to the top
anchor by a hundred points.


610
00:26:58,956 --> 00:27:01,666
And find out where
it's activated.


611
00:27:02,616 --> 00:27:04,786
And get rid of it.


612
00:27:05,036 --> 00:27:05,726
Build again.


613
00:27:06,446 --> 00:27:08,706
That's much better.


614
00:27:08,706 --> 00:27:10,136
That's exactly what
I was looking for.


615
00:27:10,556 --> 00:27:12,906
And so it's really
easy to kind of drill


616
00:27:12,906 --> 00:27:13,906
down into those problems,


617
00:27:13,906 --> 00:27:15,546
even when you have a
very complex layout,


618
00:27:15,716 --> 00:27:18,966
if you are using
identifiers properly.


619
00:27:19,906 --> 00:27:23,476
So where are we with this log?


620
00:27:24,486 --> 00:27:25,906
Start from the bottom.


621
00:27:26,666 --> 00:27:28,416
Finding the constraint that
was broken gives you a lot


622
00:27:28,416 --> 00:27:31,496
of information about
why it was broken.


623
00:27:31,496 --> 00:27:34,366
Check translatesAutoResizingMask
IntoConstraints [without


624
00:27:34,366 --> 00:27:34,636
space] first.


625
00:27:35,096 --> 00:27:37,686
It is the culprit
in many situations.


626
00:27:37,956 --> 00:27:41,126
Set identifiers on both your
constraints and your views,


627
00:27:41,826 --> 00:27:43,946
and finally, if the log
is just too complex,


628
00:27:44,556 --> 00:27:44,686
go


629
00:27:44,686 --> 00:27:46,346
for constraintsAffectingLayout
ForAxis [without space]


630
00:27:46,426 --> 00:27:47,176
to narrow it down.


631
00:27:48,276 --> 00:27:53,486
Okay. So that's what
happens when the engine looks


632
00:27:53,486 --> 00:27:57,286
at your constraints and knows
that it can't get a solution.


633
00:27:57,286 --> 00:27:59,256
There is no solution that
fits all of your constraints.


634
00:27:59,616 --> 00:28:01,766
But what happens if it has
more than one solution?


635
00:28:02,086 --> 00:28:03,456
That's when we hit ambiguity.


636
00:28:04,266 --> 00:28:06,646
This is our final
mystery, so congratulations


637
00:28:06,646 --> 00:28:07,496
for making it this far.


638
00:28:07,966 --> 00:28:09,166
We don't have that
much farther to go.


639
00:28:09,916 --> 00:28:10,346
Let's see.


640
00:28:10,466 --> 00:28:11,686
So, ambiguous layouts.


641
00:28:11,936 --> 00:28:13,726
A couple of possible causes


642
00:28:13,726 --> 00:28:16,986
of ambiguous layouts are
simply too few constraints.


643
00:28:17,866 --> 00:28:21,526
If you are doing a planets'
layout like this and you know


644
00:28:21,526 --> 00:28:22,566
that you want Saturn
in the middle


645
00:28:23,226 --> 00:28:25,636
but your horizontal constraints
aren't set up properly,


646
00:28:25,796 --> 00:28:27,086
the view may have to
guess where to put it.


647
00:28:28,056 --> 00:28:29,326
Again, reminder, it
should be in the middle.


648
00:28:29,326 --> 00:28:32,496
The engine put it
off to the side.


649
00:28:32,866 --> 00:28:35,236
The other solution it has for
it is off to the other side,


650
00:28:35,326 --> 00:28:37,006
and it never actually
lands in the middle.


651
00:28:37,006 --> 00:28:39,696
And that can be a problem
because if it doesn't know


652
00:28:39,696 --> 00:28:41,196
where to put it, it's just
going to put it somewhere.


653
00:28:41,316 --> 00:28:42,816
That's not what you want.


654
00:28:42,816 --> 00:28:44,836
You need to go back and add
constraints on that view.


655
00:28:45,596 --> 00:28:47,276
Another cause of
ambiguous layouts is


656
00:28:47,276 --> 00:28:48,286
conflicting priorities.


657
00:28:48,726 --> 00:28:51,446
We talked about this a
little bit in Part 1.


658
00:28:51,446 --> 00:28:54,386
At the bottom of this view that
we just fixed here, you will see


659
00:28:54,386 --> 00:28:56,676
that it can actually end up in
a situation where the text field


660
00:28:56,676 --> 00:28:59,136
and button are kind of
the wrong proportions.


661
00:28:59,136 --> 00:29:00,466
I want it to look
more like this,


662
00:29:02,356 --> 00:29:04,606
where the text field is
taking up most of the view.


663
00:29:05,196 --> 00:29:07,606
And the reason that it ended up
that way is that the engine had


664
00:29:07,606 --> 00:29:10,166
to make a choice between
those two layouts for me.


665
00:29:11,086 --> 00:29:13,576
And it did that because the
content hugging priorities


666
00:29:13,576 --> 00:29:15,316
on these two views are the same.


667
00:29:15,316 --> 00:29:18,066
They are both 250, and I
don't have any other way --


668
00:29:18,066 --> 00:29:19,926
I am not telling the
engine any other way


669
00:29:19,926 --> 00:29:21,966
to size those views
horizontally.


670
00:29:22,436 --> 00:29:24,116
So it had to kind of take
a guess, and it guessed


671
00:29:24,216 --> 00:29:27,416
that maybe I wanted the text
view to hug its content closely


672
00:29:27,726 --> 00:29:29,166
and go ahead and let
the label spread out,


673
00:29:29,716 --> 00:29:30,836
but I really wanted
it to do this


674
00:29:30,966 --> 00:29:32,436
and hug the button
content closely.


675
00:29:33,106 --> 00:29:36,396
So as I -- this is going to
be repeat for a couple of you,


676
00:29:36,396 --> 00:29:38,186
but if the content
hugging priority


677
00:29:38,186 --> 00:29:40,826
on the button is set lower
than that on the text field,


678
00:29:41,306 --> 00:29:45,596
the edges of the view are able
to stretch away from its content


679
00:29:45,596 --> 00:29:48,086
because it's less important
that it hug its content closely.


680
00:29:48,246 --> 00:29:49,606
Or you are telling the
engine it's less important


681
00:29:49,606 --> 00:29:51,156
that that view hug
its content closely.


682
00:29:51,876 --> 00:29:54,676
Meanwhile, if you set it above,
the content hugging priority


683
00:29:54,676 --> 00:29:57,966
of the text view, the
button now hugs it closely


684
00:29:58,116 --> 00:29:59,286
and the text field stretches.


685
00:29:59,746 --> 00:30:02,086
This is consistently how the
engine will solve the layout


686
00:30:02,086 --> 00:30:03,546
in this particular circumstance.


687
00:30:03,696 --> 00:30:06,956
So if you set these priorities
properly, you can resolve some


688
00:30:06,956 --> 00:30:09,866
of these ambiguous
layouts that you run into.


689
00:30:09,866 --> 00:30:13,366
We have a couple of tools
for resolving ambiguity.


690
00:30:14,546 --> 00:30:15,936
Interface Builder
is a big help here.


691
00:30:16,286 --> 00:30:20,546
It has these little icons on the
edge, and if you click on those,


692
00:30:20,676 --> 00:30:22,636
it will tell you what's
going on with your layout


693
00:30:22,636 --> 00:30:23,626
that it doesn't understand.


694
00:30:24,626 --> 00:30:26,366
And in many cases,
it will tell you


695
00:30:26,366 --> 00:30:29,906
that you are missing constraints
and what it can't solve for.


696
00:30:30,276 --> 00:30:32,416
I need constraints for
the Y position or height.


697
00:30:32,706 --> 00:30:37,566
When you build and run an
app that has this issue,


698
00:30:38,006 --> 00:30:41,796
you are going to end up
with these views somewhere


699
00:30:41,796 --> 00:30:45,366
in the Y-axis, where the engine
kind of decided it had to go


700
00:30:45,366 --> 00:30:46,796
because it didn't have
any information from you.


701
00:30:47,556 --> 00:30:48,376
That makes it really easy.


702
00:30:48,376 --> 00:30:52,156
When you are not using Interface
Builder or when you get passed


703
00:30:52,156 --> 00:30:53,316
and you are still
running into this,


704
00:30:53,316 --> 00:30:55,546
we have a really cool method
called autolayoutTrace,


705
00:30:56,396 --> 00:30:59,706
and you just use that in
the debugger on a view,


706
00:30:59,786 --> 00:31:03,546
and it will just tell you in
all caps that you have a view


707
00:31:03,546 --> 00:31:05,626
that has an ambiguous
layout, and you can then go


708
00:31:05,626 --> 00:31:07,896
about diagnosing the
problem with that view.


709
00:31:08,856 --> 00:31:11,246
We also have the view
debugger in the debug menu,


710
00:31:11,976 --> 00:31:15,556
which will allow you to view the
frames and the alignment recs


711
00:31:15,846 --> 00:31:17,816
that the layout engine has
calculated for your view.


712
00:31:18,526 --> 00:31:19,436
It will look something
like this.


713
00:31:19,436 --> 00:31:20,966
It will just draw
it right on the view


714
00:31:20,966 --> 00:31:22,106
that it's looking at right now.


715
00:31:22,666 --> 00:31:25,236
Here you can see that
Saturn, who is supposed


716
00:31:25,236 --> 00:31:28,026
to have an alignment rect
that comes very closely


717
00:31:28,026 --> 00:31:29,686
to its content, is
stretched very wide.


718
00:31:30,066 --> 00:31:32,086
And that's problematic because
that's not what I wanted.


719
00:31:32,896 --> 00:31:37,376
But over here, its actual size
is correct; it's just pinned


720
00:31:37,436 --> 00:31:39,486
to the side which is,
again, not what I wanted,


721
00:31:39,486 --> 00:31:40,906
but I know it's not
a size problem,


722
00:31:41,256 --> 00:31:45,286
it's a tied-to-where
sort of problem.


723
00:31:46,766 --> 00:31:48,306
The other solution is to
look in the view debugger;


724
00:31:48,386 --> 00:31:50,816
right next to all of your
breakpoint navigation,


725
00:31:50,816 --> 00:31:52,026
you have this little
button here.


726
00:31:52,156 --> 00:31:54,706
When you press that, it
pulls up your layout in a way


727
00:31:54,706 --> 00:31:57,456
that you can click through and
view things like constraints,


728
00:31:57,846 --> 00:32:00,666
just the wireframes for the
views, you can see stuff in 3D.


729
00:32:01,006 --> 00:32:02,796
It gives you a really nice
view of all your layers,


730
00:32:03,246 --> 00:32:06,596
and that can really help with a
lot of view debugging scenarios.


731
00:32:07,256 --> 00:32:09,316
Finally, we have
another debugger method,


732
00:32:09,316 --> 00:32:10,806
because I really
like using LLDB,


733
00:32:11,186 --> 00:32:12,966
called
exerciseAmbiguityInLayout.


734
00:32:13,196 --> 00:32:16,276
If you have a view that you know
is ambiguous and you run this


735
00:32:16,276 --> 00:32:19,026
on that view in the
debugger and continue,


736
00:32:19,026 --> 00:32:21,596
the Layout Engine will show
you the other solution it had,


737
00:32:22,316 --> 00:32:24,306
which is a great clue when
you are trying to figure


738
00:32:24,306 --> 00:32:25,726
out where the problem
is coming from.


739
00:32:26,456 --> 00:32:27,626
And I will show you
how that looks now.


740
00:32:28,926 --> 00:32:32,156
Okay. So we are back to this
view that we just saw a bit ago,


741
00:32:32,646 --> 00:32:35,746
and when it's in its regular
layout, Saturn is flying off


742
00:32:35,746 --> 00:32:39,296
to the side, so I have,
again, my debug gesture


743
00:32:39,296 --> 00:32:42,066
that I can use just because
I need an easy way to break.


744
00:32:42,656 --> 00:32:44,806
The first thing I can
do is see what's going


745
00:32:44,806 --> 00:32:48,836
on with the whole view by
running auto layout trace on it,


746
00:32:49,766 --> 00:32:52,516
and you see that everything
is okay, except for Saturn,


747
00:32:52,516 --> 00:32:53,586
which has an ambiguous layout.


748
00:32:53,586 --> 00:32:55,476
That's where I am going
to concentrate my efforts.


749
00:32:56,426 --> 00:32:58,546
There's also a Boolean
that will tell you view


750
00:32:58,546 --> 00:33:01,706
by view whether it has
an ambiguous layout.


751
00:33:01,926 --> 00:33:04,096
And that's just
hasAmbiguousLayout --


752
00:33:04,926 --> 00:33:07,316
pretty easy to remember, and
in Saturn's case, it's true.


753
00:33:08,376 --> 00:33:11,846
And if you have that happening,
you can also exercise ambiguity


754
00:33:11,846 --> 00:33:14,146
in layout and continue,


755
00:33:14,946 --> 00:33:18,716
and it will show you the other
solution it had for that issue.


756
00:33:18,716 --> 00:33:20,546
So let's run that again.


757
00:33:21,406 --> 00:33:22,656
And -- oops.


758
00:33:22,966 --> 00:33:24,186
Wrong thing to run again.


759
00:33:24,726 --> 00:33:30,106
And now it's over
to the side again.


760
00:33:30,576 --> 00:33:32,486
So in this case, it looks
like the layout guides I put


761
00:33:32,486 --> 00:33:35,026
on either side of Saturn
aren't working for some reason,


762
00:33:35,386 --> 00:33:39,126
so I am going to go up
and find my constraints


763
00:33:39,126 --> 00:33:40,966
that are tying my planets
to their specific areas,


764
00:33:40,966 --> 00:33:45,016
and they are doing that by
having a ratio of layout guides


765
00:33:45,016 --> 00:33:47,256
on either side in order
to determine where it is.


766
00:33:47,336 --> 00:33:49,126
I've got one for
Saturn right here,


767
00:33:49,836 --> 00:33:51,956
and it should have equal
layout guides on either side,


768
00:33:51,956 --> 00:33:53,596
which should put it pretty
much exactly in the middle.


769
00:33:53,596 --> 00:33:58,176
The problem appears to be that
I did not actually add this


770
00:33:58,256 --> 00:34:01,886
to the constraints array I
am activating for that view.


771
00:34:02,196 --> 00:34:07,026
And so if I add it,
things go much better.


772
00:34:07,426 --> 00:34:10,045
Saturn stays put exactly
where I wanted it to be.


773
00:34:10,085 --> 00:34:12,255
And that's really
all that's involved


774
00:34:12,396 --> 00:34:14,326
in diagnosing ambiguity.


775
00:34:14,326 --> 00:34:17,565
It's pretty easy
once you start kind


776
00:34:17,565 --> 00:34:20,985
of working with it a little bit.


777
00:34:21,735 --> 00:34:22,815
So, debugging your layout.


778
00:34:23,146 --> 00:34:25,085
The most important thing
is to think carefully


779
00:34:25,446 --> 00:34:27,025
about the information
that your engine needs.


780
00:34:27,585 --> 00:34:28,706
This morning we talked a lot


781
00:34:28,706 --> 00:34:32,166
about giving the Layout
Engine all of its information


782
00:34:32,166 --> 00:34:34,286
so that it can calculate
your layout properly


783
00:34:34,286 --> 00:34:35,806
in various adaptive scenarios.


784
00:34:36,406 --> 00:34:40,806
If you can kind of pull that all
together, you are going to run


785
00:34:40,806 --> 00:34:43,406
into a lot fewer problems
as opposed to just trying


786
00:34:43,406 --> 00:34:44,936
to make a couple
of constraints here


787
00:34:44,936 --> 00:34:46,596
and there and throwing it in.


788
00:34:47,726 --> 00:34:50,505
But if you do run into
problems, use the logs


789
00:34:50,766 --> 00:34:52,196
if constraints are
unsatisfiable.


790
00:34:52,196 --> 00:34:53,886
It gives you a lot of
really good information.


791
00:34:54,065 --> 00:34:56,846
In order to make good use of
those logs, add identifiers


792
00:34:57,356 --> 00:34:58,466
for all those constraints
and views.


793
00:34:58,866 --> 00:35:01,036
You also want to regularly
check for ambiguity.


794
00:35:01,346 --> 00:35:03,256
You won't necessarily
see it on the first run.


795
00:35:03,706 --> 00:35:05,916
This is a good thing to put
in something like a unit test


796
00:35:05,916 --> 00:35:08,106
and just run it on all your
views regularly, so if you run


797
00:35:08,106 --> 00:35:11,116
into ambiguous layout, you can
diagnose it before you see it.


798
00:35:12,186 --> 00:35:13,646
And then we have several tools


799
00:35:13,646 --> 00:35:14,786
to help you resolve
these issues.


800
00:35:15,016 --> 00:35:17,866
Interface builder is helpful,
as always, the view debugger,


801
00:35:17,946 --> 00:35:20,146
and our various methods in lldb.


802
00:35:21,916 --> 00:35:22,316
All right.


803
00:35:22,406 --> 00:35:25,186
So we have come a
very long way today.


804
00:35:26,046 --> 00:35:29,086
If you were with us this
morning, you saw us talking


805
00:35:29,086 --> 00:35:30,826
about maintainable
layouts with stack views


806
00:35:31,276 --> 00:35:32,826
and changing constraints
properly,


807
00:35:33,256 --> 00:35:35,546
working with view sizing and
making self-sizing views,


808
00:35:35,646 --> 00:35:37,796
and then using priorities
and alignment to make sure


809
00:35:37,796 --> 00:35:39,606
that your layout stays
exactly the way you want it


810
00:35:39,686 --> 00:35:41,716
to in various adaptive
environments.


811
00:35:42,486 --> 00:35:45,976
And then just now, we talked
about the layout cycle in depth,


812
00:35:46,126 --> 00:35:49,386
interacting with legacy
layout, creating constraints


813
00:35:49,386 --> 00:35:52,946
with layout anchors rather
than the old methods,


814
00:35:52,946 --> 00:35:55,376
and constraining negative
space with layout guides.


815
00:35:56,016 --> 00:35:58,806
And we just now talked about
unsatisfiable constraints


816
00:35:58,806 --> 00:36:00,966
and resolving ambiguity,
which are two problems


817
00:36:00,966 --> 00:36:02,796
that people tend to
run into regularly


818
00:36:02,796 --> 00:36:03,776
when they are using Auto Layout.


819
00:36:03,916 --> 00:36:06,496
So those are all
of our mysteries.


820
00:36:07,226 --> 00:36:09,166
I hope we laid them all out
for you pretty well here.


821
00:36:09,906 --> 00:36:13,256
If you haven't seen Part
1, I recommend going back


822
00:36:13,256 --> 00:36:15,756
and viewing it because there
was a lot of information there


823
00:36:16,026 --> 00:36:19,016
that can be very useful to
you, and the video should be


824
00:36:19,016 --> 00:36:20,246
up at some point
in the near future,


825
00:36:20,506 --> 00:36:22,186
or you can travel
back in time to 11:00.


826
00:36:22,526 --> 00:36:22,866
Either way.


827
00:36:23,606 --> 00:36:27,156
So to get more information on
all of this, we, of course,


828
00:36:27,156 --> 00:36:29,876
have documentation up on
the website, and we do have


829
00:36:29,876 --> 00:36:32,586
that planets code, which is
more for the first session


830
00:36:32,586 --> 00:36:33,546
but we also used here.


831
00:36:33,546 --> 00:36:36,846
The planets code that you
see here is not broken.


832
00:36:36,846 --> 00:36:38,096
It actually works properly.


833
00:36:38,096 --> 00:36:40,256
You will have to break it if you
want to play around with some


834
00:36:40,256 --> 00:36:41,576
of the debugging
methods you saw here.


835
00:36:41,626 --> 00:36:43,906
We have some related sessions.


836
00:36:44,166 --> 00:36:47,426
So again, Part 1 was earlier
today, and we have a couple


837
00:36:47,426 --> 00:36:49,186
of sessions tomorrow that
you might be interested in.


838
00:36:49,186 --> 00:36:51,696
We are also going to head
down to the lab after this,


839
00:36:52,236 --> 00:36:54,336
and we will be there to
answer questions that you have


840
00:36:54,336 --> 00:36:55,896
about Auto Layout and
Interface Builder.


841
00:36:56,836 --> 00:36:58,186
And that's what we've
got for you today.


842
00:36:58,516 --> 00:36:58,946
Have a good one.


843
00:36:59,516 --> 00:37:03,500
[Applause]

