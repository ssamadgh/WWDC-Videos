1
00:00:07,516 --> 00:00:19,460
[ Music ]


2
00:00:22,006 --> 00:00:22,406
>> Hello.


3
00:00:24,516 --> 00:00:28,856
[ Applause ]


4
00:00:29,356 --> 00:00:30,696
>> So my name is Dana DuBois.


5
00:00:30,696 --> 00:00:32,665
I'm an engineering
manager on the team


6
00:00:32,665 --> 00:00:33,796
that writes the frameworks


7
00:00:33,796 --> 00:00:37,216
that help power the App
Store on iOS and tvOS.


8
00:00:37,216 --> 00:00:38,646
And today we're going
to talk about one


9
00:00:38,646 --> 00:00:42,296
of those particular
frameworks, and that's StoreKit.


10
00:00:43,996 --> 00:00:45,056
Many of you know,
StoreKit's been


11
00:00:45,056 --> 00:00:46,966
around for a long, long time.


12
00:00:46,966 --> 00:00:49,816
It was introduced in
iOS 3 for the iPhone.


13
00:00:50,116 --> 00:00:53,246
Since then it's been used by
thousands and thousands of apps


14
00:00:53,246 --> 00:00:55,586
to power all sorts
of business models.


15
00:00:55,866 --> 00:01:00,626
Everything from newspapers
and magazines, games,


16
00:01:01,156 --> 00:01:03,276
even dating apps
are using StoreKit.


17
00:01:03,326 --> 00:01:05,066
It's really widely used.


18
00:01:05,325 --> 00:01:09,106
And we've talked about
StoreKit a lot at WWDC,


19
00:01:09,106 --> 00:01:12,656
but this year we're going
to do something a little new


20
00:01:12,656 --> 00:01:14,696
and we're going to talk
about it using Swift.


21
00:01:14,736 --> 00:01:15,786
So that's really exciting.


22
00:01:15,786 --> 00:01:17,026
We've got some new APIs.


23
00:01:18,046 --> 00:01:21,266
There's a couple other things
that are new, so Swift API,


24
00:01:21,266 --> 00:01:22,386
so that's really great.


25
00:01:23,026 --> 00:01:26,036
Last week, many of you probably
also heard that we have a lot


26
00:01:26,036 --> 00:01:28,066
of big announcements
around subscriptions.


27
00:01:28,066 --> 00:01:30,486
This is something we're
really excited about as well.


28
00:01:30,796 --> 00:01:34,016
I think a lot of developers are
going to end up taking advantage


29
00:01:34,246 --> 00:01:37,376
of these new enhancements
with subscriptions.


30
00:01:37,376 --> 00:01:39,296
So I'm going to give you
a quick overview on them.


31
00:01:40,816 --> 00:01:43,306
First up, categories.


32
00:01:43,796 --> 00:01:46,296
We're really you know
excited to announce


33
00:01:46,296 --> 00:01:49,666
that category will no longer
be a factor if you're choosing


34
00:01:49,666 --> 00:01:51,326
to use auto renewing
subscriptions


35
00:01:51,326 --> 00:01:52,496
in your applications.


36
00:01:53,296 --> 00:01:55,336
There are still going


37
00:01:55,336 --> 00:01:58,166
to be criteria behind how
you can use auto renewing


38
00:01:58,166 --> 00:02:01,026
subscriptions, but category
will no longer be a factor.


39
00:02:02,406 --> 00:02:05,056
Second, everyone's got
to be excited about this,


40
00:02:05,256 --> 00:02:07,736
we're giving more
proceeds to developers.


41
00:02:08,006 --> 00:02:10,336
If you keep your
subscribers for more


42
00:02:10,336 --> 00:02:12,276
than one year, that's
really great.


43
00:02:12,276 --> 00:02:13,976
And I think that's
going to be a big deal.


44
00:02:14,516 --> 00:02:18,196
[ Applause ]


45
00:02:18,696 --> 00:02:23,226
Pricing. A lot of control
now we're going to be giving


46
00:02:23,226 --> 00:02:26,256
to developers through iTunes
connect to set the pricing


47
00:02:26,256 --> 00:02:28,966
for their subscriptions
based on territory


48
00:02:28,966 --> 00:02:30,966
to territory, region to region.


49
00:02:31,216 --> 00:02:33,996
If there's a business reason you
might need to adjust the price


50
00:02:33,996 --> 00:02:36,926
in Europe compared to the
US, there's a lot of control


51
00:02:36,926 --> 00:02:38,156
that you now have over that.


52
00:02:38,156 --> 00:02:42,306
And then along with pricing,
we're giving you the ability


53
00:02:42,486 --> 00:02:46,966
to save the price, to
preserve the price for users


54
00:02:47,116 --> 00:02:49,366
who may have already been
using your subscription while


55
00:02:49,366 --> 00:02:51,006
adjusting it for new users.


56
00:02:51,006 --> 00:02:54,076
So, if you have early adopters
that you want to reward


57
00:02:54,076 --> 00:02:56,766
and you want to keep them using
your subscription, but you want


58
00:02:56,766 --> 00:03:00,276
to adjust the price for newer
users, you have that power now.


59
00:03:00,776 --> 00:03:03,636
And then upgrades
and downgrades,


60
00:03:03,636 --> 00:03:06,406
this is us giving the
user a lot more power


61
00:03:06,406 --> 00:03:08,926
to control exactly what level


62
00:03:08,926 --> 00:03:11,456
of subscription they might
want within your service.


63
00:03:11,456 --> 00:03:14,106
So if they want to go up
to the platinum level,


64
00:03:14,106 --> 00:03:17,366
or go back down to the basic
level, they can do that right


65
00:03:17,366 --> 00:03:20,586
in the Manage Subscription
UI right on the device.


66
00:03:21,256 --> 00:03:25,556
So that's a quick overview of
what's new in subscriptions.


67
00:03:26,006 --> 00:03:27,406
There's a lot more to it.


68
00:03:27,406 --> 00:03:29,356
I think if you're going
to have subscriptions


69
00:03:29,356 --> 00:03:31,406
in your application,
you really should go


70
00:03:31,406 --> 00:03:34,506
to Introducing Expanded
Subscriptions in iTunes Connect,


71
00:03:34,796 --> 00:03:36,736
that's at Pacific
Heights today at 4.


72
00:03:37,106 --> 00:03:40,716
Really, they're going to get
a lot more in-depth on how


73
00:03:40,716 --> 00:03:43,306
to set this up, how to manage
this in your application


74
00:03:43,306 --> 00:03:45,526
and I really highly
recommend you go to that.


75
00:03:47,046 --> 00:03:48,626
So that's subscriptions.


76
00:03:48,736 --> 00:03:51,536
There's one other new thing that
I'm really excited to announce,


77
00:03:51,716 --> 00:03:53,616
and that's iMessage apps.


78
00:03:54,096 --> 00:03:56,266
We announced that
yesterday at the keynote.


79
00:03:56,836 --> 00:03:59,506
We're bringing apps, a whole
new class of apps right


80
00:03:59,506 --> 00:04:01,966
into the iMessage app, iMessage.


81
00:04:02,246 --> 00:04:07,026
You'll be able to build custom
extensions, and we are going


82
00:04:07,406 --> 00:04:10,816
to allow in-app purchases
right in those extensions,


83
00:04:10,816 --> 00:04:15,226
right in iMessage aps using the
exact same StoreKit APIs you


84
00:04:15,226 --> 00:04:17,036
would use in a normal
application


85
00:04:17,036 --> 00:04:18,346
that you have in
the store today.


86
00:04:18,636 --> 00:04:21,196
So if you have additional
content that you want to market


87
00:04:21,576 --> 00:04:24,706
or provide right inside
the iMessage experience,


88
00:04:25,396 --> 00:04:26,606
that's now supported.


89
00:04:26,776 --> 00:04:29,006
And this will all be
available in iOS 10,


90
00:04:29,006 --> 00:04:30,806
so that's something we're
really excited about


91
00:04:30,806 --> 00:04:32,126
and I think developers are going


92
00:04:32,126 --> 00:04:34,986
to take a lot of
advantage of that.


93
00:04:35,506 --> 00:04:38,946
So as I said before, StoreKit's
been around for a while.


94
00:04:38,946 --> 00:04:41,656
People have been using in-app
purchases for a long, long time,


95
00:04:41,656 --> 00:04:43,316
but maybe some of
you are new to it.


96
00:04:43,316 --> 00:04:45,136
So I'd like to just
give a quick overview


97
00:04:45,456 --> 00:04:47,546
of what exactly in-app
purchases are.


98
00:04:47,866 --> 00:04:51,156
In-app purchases are
digital content or service


99
00:04:51,566 --> 00:04:53,856
that can be bought right
inside your application.


100
00:04:54,556 --> 00:04:57,336
However, to be clear, it's
not for physical goods.


101
00:04:57,336 --> 00:04:58,696
There's other ways
of doing that.


102
00:04:58,876 --> 00:05:02,036
This is really just about
digital content or services.


103
00:05:02,076 --> 00:05:06,116
Now when we're talking about
digital contents or services,


104
00:05:06,116 --> 00:05:07,356
there's a bunch of
different types.


105
00:05:07,356 --> 00:05:09,766
When you're configuring this in
iTunes connect, you have a lot


106
00:05:09,766 --> 00:05:11,496
of options and you
need to make sure


107
00:05:11,796 --> 00:05:15,506
that you choose the right
type that fits your content.


108
00:05:15,756 --> 00:05:17,816
So let's take a look
at what those are.


109
00:05:18,676 --> 00:05:20,196
Consumable products.


110
00:05:20,566 --> 00:05:23,656
Everybody's played a game and
they have coins in that game,


111
00:05:23,856 --> 00:05:27,496
currency, or gas in your
racing car, or something


112
00:05:27,496 --> 00:05:30,066
that they user's going
to buy, and buy again,


113
00:05:30,066 --> 00:05:32,326
and buy again, and
use up over time.


114
00:05:32,326 --> 00:05:34,286
That's what a consumable
purchase is.


115
00:05:35,526 --> 00:05:39,606
A non-consumable product is
something that sticks around,


116
00:05:39,606 --> 00:05:42,186
it will stick around for as long
as the user wants to use it.


117
00:05:42,186 --> 00:05:43,626
They'll be able to restore it.


118
00:05:43,626 --> 00:05:48,006
They'll be able to move
it from device to device.


119
00:05:48,326 --> 00:05:49,776
So that's a little different.


120
00:05:49,776 --> 00:05:52,386
And again in a game
you might have a sword,


121
00:05:52,386 --> 00:05:56,066
or you know some sort of weapon,
or you know a racing car,


122
00:05:56,066 --> 00:05:58,866
or a level, or if you
have a utility app,


123
00:05:58,866 --> 00:06:01,896
you might have a basic edition
of your app and you might want


124
00:06:01,896 --> 00:06:03,676
to offer a pro-edition
of your app.


125
00:06:03,976 --> 00:06:06,696
That's kind of a
non-consumable product.


126
00:06:07,596 --> 00:06:10,146
We also have two
types of subscriptions


127
00:06:10,146 --> 00:06:11,606
when we're talking
about subscriptions.


128
00:06:11,846 --> 00:06:13,836
There's non-renewing
subscriptions,


129
00:06:14,616 --> 00:06:16,636
as the name suggests
these are subscriptions


130
00:06:16,636 --> 00:06:18,966
that don't automatically
renew, it's up to you


131
00:06:18,966 --> 00:06:22,116
and your application, and
your back end to manage how


132
00:06:22,116 --> 00:06:23,886
to renew those subscriptions.


133
00:06:24,046 --> 00:06:27,556
But then we also have auto
renewing subscriptions.


134
00:06:27,556 --> 00:06:31,726
And these are subscriptions that
Apple will bill to the customer


135
00:06:31,776 --> 00:06:34,446
on a periodic basis, based
on what you configure.


136
00:06:34,446 --> 00:06:36,056
So if it's a monthly
subscription,


137
00:06:36,546 --> 00:06:39,646
we'll bill the user every month,
as long as they continue to opt


138
00:06:39,646 --> 00:06:40,806
into that subscription.


139
00:06:41,296 --> 00:06:46,266
So these are the types,
let's get into the heart


140
00:06:46,266 --> 00:06:49,036
of adding in-app purchases
to your application.


141
00:06:49,266 --> 00:06:54,006
So, what I'm going to do is I'm
going to do a quick overview


142
00:06:54,416 --> 00:06:56,676
of all the various steps,
and then we're going to dive


143
00:06:56,676 --> 00:06:57,916
into each one and
we're going to talk


144
00:06:57,916 --> 00:07:00,116
about how to do this in Swift.


145
00:07:00,316 --> 00:07:04,066
And you know exactly what you
might need to worry about as far


146
00:07:04,066 --> 00:07:07,646
as pitfalls, or any concerns
you might have along the way.


147
00:07:07,646 --> 00:07:10,916
There's a lot of things that
can get kind of tricky sometimes


148
00:07:10,916 --> 00:07:13,096
when you're developing
against StoreKit.


149
00:07:13,226 --> 00:07:15,066
A couple of things
to keep in mind.


150
00:07:15,196 --> 00:07:19,376
So first off you're
going to want to figure


151
00:07:19,376 --> 00:07:21,616
out exactly what it is
that you're going to sell


152
00:07:21,616 --> 00:07:24,216
to the consumer, the
user of your app.


153
00:07:24,216 --> 00:07:28,126
So this is done just by
determining the identifiers,


154
00:07:28,126 --> 00:07:31,396
those in-app identifiers
of what you're marketing


155
00:07:31,396 --> 00:07:32,636
to the user right
then and there.


156
00:07:33,386 --> 00:07:36,436
Once you have the identifiers,
you go off to the App Store


157
00:07:37,036 --> 00:07:38,816
and you fetch the information,


158
00:07:39,156 --> 00:07:42,456
localized product
information that's related


159
00:07:42,456 --> 00:07:43,616
to those identifiers.


160
00:07:43,696 --> 00:07:44,446
And that's key.


161
00:07:44,446 --> 00:07:46,086
This is localized information.


162
00:07:46,086 --> 00:07:48,916
This is a global marketplace,
you want to make sure


163
00:07:48,916 --> 00:07:51,516
that you're displaying
the information


164
00:07:51,826 --> 00:07:55,546
to your users in
a localized way.


165
00:07:56,376 --> 00:07:59,706
And now once you have that
information you're going


166
00:07:59,706 --> 00:08:01,666
to show off the products.


167
00:08:01,666 --> 00:08:02,446
You're going to market them.


168
00:08:02,446 --> 00:08:03,086
You're going to sell them.


169
00:08:03,236 --> 00:08:05,976
These are your products, this is
your application, you're going


170
00:08:05,976 --> 00:08:09,106
to build the best UI you
can to show them off.


171
00:08:09,366 --> 00:08:12,806
The users then are going to be
enticed to make that purchase.


172
00:08:12,806 --> 00:08:14,646
They're going to be you
know, sold, and they're going


173
00:08:14,646 --> 00:08:17,126
to select the product
right then and there.


174
00:08:17,466 --> 00:08:20,596
But it's up to you to
then create a payment


175
00:08:20,596 --> 00:08:23,136
for that product and add
it to the Payment Queue.


176
00:08:23,216 --> 00:08:24,366
And we'll be talking a lot more


177
00:08:24,366 --> 00:08:26,646
about the Payment
Queue as we go on.


178
00:08:27,676 --> 00:08:30,506
As the payment is going through
the Payment Queue your app will


179
00:08:30,506 --> 00:08:33,076
be notified about that
transaction and you're going


180
00:08:33,076 --> 00:08:35,676
to have to make some
response to it,


181
00:08:35,676 --> 00:08:38,226
and that's how you
process these transactions.


182
00:08:38,606 --> 00:08:41,686
Finally, when the payment is
completed, you're going to make


183
00:08:41,686 --> 00:08:42,866
that product available.


184
00:08:43,285 --> 00:08:44,896
Give the user what
they paid for.


185
00:08:44,996 --> 00:08:47,916
And then finally tell the
Payment Queue you're done


186
00:08:47,916 --> 00:08:49,906
with the transaction,
everything's completed,


187
00:08:50,156 --> 00:08:51,186
the product's available,


188
00:08:51,256 --> 00:08:53,206
so that's finishing
the transaction.


189
00:08:53,956 --> 00:08:56,316
So those are all the different
steps you need to take.


190
00:08:56,316 --> 00:08:56,656
Real quick.


191
00:08:56,656 --> 00:08:59,096
We're going to dive into each
of those as we go through,


192
00:08:59,456 --> 00:09:02,336
but first special note
about the Payment Queue.


193
00:09:03,316 --> 00:09:05,206
The Payment Queue is the center


194
00:09:05,206 --> 00:09:07,286
of your in-app purchase
implementation.


195
00:09:07,546 --> 00:09:11,726
It's the source of truth
for state about purchases


196
00:09:11,726 --> 00:09:14,626
and payments as they're
going through all the way


197
00:09:14,626 --> 00:09:18,146
from when the user selected that
product to when it's paid for.


198
00:09:19,146 --> 00:09:21,886
And it's important to keep
in mind that you should rely


199
00:09:21,886 --> 00:09:25,896
on the queue and only the queue
to know about transactions


200
00:09:25,896 --> 00:09:29,146
that are progress,
payment updates,


201
00:09:29,576 --> 00:09:32,146
and if you're using
hosted downloads,


202
00:09:32,386 --> 00:09:34,946
the Payment Queue will tell
you all about those downloads.


203
00:09:36,896 --> 00:09:41,446
And then another thing
to keep in mind is


204
00:09:41,446 --> 00:09:44,676
that if the Payment Queue
tells you about a payment,


205
00:09:45,126 --> 00:09:46,866
it's a valid and real payment.


206
00:09:47,496 --> 00:09:50,746
In fact, there are
cases we've seen


207
00:09:50,746 --> 00:09:53,836
where developers might
have their own side cache,


208
00:09:54,426 --> 00:09:57,636
where they've noticed that a
user has clicked on a product


209
00:09:57,976 --> 00:09:59,946
and they're managing
state about that payment.


210
00:10:00,446 --> 00:10:02,166
And then their app will crash,


211
00:10:02,256 --> 00:10:03,796
or something will
happen along the way,


212
00:10:03,796 --> 00:10:06,216
the user will close the
application before finishing the


213
00:10:06,216 --> 00:10:09,646
payment, and they'll come back
into the game, or whatever it is


214
00:10:09,646 --> 00:10:11,496
that they were purchasing
then there.


215
00:10:11,846 --> 00:10:14,856
And they don't necessarily
respect the response coming


216
00:10:14,856 --> 00:10:17,176
from the Payment Queue
because they weren't listening


217
00:10:17,176 --> 00:10:18,456
to those payment transactions


218
00:10:18,456 --> 00:10:21,636
because their own queue no
longer had them in state.


219
00:10:22,196 --> 00:10:25,266
So you should really just
rely on the Payment Queue


220
00:10:25,266 --> 00:10:27,946
to tell what's going
on with those payments


221
00:10:27,946 --> 00:10:28,706
as they're happening.


222
00:10:28,926 --> 00:10:32,336
And in fact it's very
important and we're going to get


223
00:10:32,336 --> 00:10:34,396
into some code here, to listen


224
00:10:34,506 --> 00:10:38,736
and observe the Payment Queue
right when your app starts up.


225
00:10:38,736 --> 00:10:40,916
This can be done in the
example we have here,


226
00:10:41,266 --> 00:10:43,316
we have
didFinishLaunchingWithOptions is


227
00:10:43,316 --> 00:10:45,556
the first thing that
happens with your application


228
00:10:45,556 --> 00:10:49,746
when it starts up and we create
a payment transaction observer,


229
00:10:49,746 --> 00:10:51,626
in this case it's the
app delegate itself.


230
00:10:51,816 --> 00:10:53,336
And we set it right
on the Payment Queue,


231
00:10:53,336 --> 00:10:54,806
we add it to the Payment Queue.


232
00:10:55,116 --> 00:10:58,616
And then if there's
anything in the Payment Queue


233
00:10:58,766 --> 00:11:00,746
that may have been there
before our app launched,


234
00:11:00,966 --> 00:11:02,776
we'll get notified
about it right away.


235
00:11:03,436 --> 00:11:07,486
Another kind of case that comes
up is there are applications


236
00:11:07,486 --> 00:11:10,786
that have in-app purchases
where they have redeemed codes.


237
00:11:11,026 --> 00:11:13,476
So the user might have
actually gone into the App Store


238
00:11:13,476 --> 00:11:16,916
and redeemed that in-app
purchase completely outside


239
00:11:16,916 --> 00:11:17,346
of your app.


240
00:11:17,576 --> 00:11:20,726
The user then is exciting about
consuming that in-app purchase,


241
00:11:21,006 --> 00:11:23,866
they launch your application,
and if they're not listening


242
00:11:23,866 --> 00:11:26,996
to the Payment Queue that
product won't become available.


243
00:11:27,656 --> 00:11:30,166
You got to do it right
when the app starts up.


244
00:11:30,736 --> 00:11:33,756
So that's a quick note
about the Payment Queue.


245
00:11:34,436 --> 00:11:37,816
Let's get back into the process
and understand exactly how


246
00:11:37,816 --> 00:11:39,256
to add this to your application.


247
00:11:40,326 --> 00:11:44,386
So the first thing you want
to do is load the identifiers


248
00:11:44,626 --> 00:11:46,216
for your in-app purchases.


249
00:11:46,866 --> 00:11:48,796
These are the same identifiers


250
00:11:48,796 --> 00:11:50,776
that you set up in
iTunes Connect.


251
00:11:51,016 --> 00:11:53,056
You define them, you name them.


252
00:11:53,376 --> 00:11:54,826
And you just need to
get a list of them.


253
00:11:55,366 --> 00:11:56,656
There's a couple
different ways of doing it,


254
00:11:56,656 --> 00:11:58,026
if your app is very simple,


255
00:11:58,436 --> 00:12:00,506
you might just bake
the identifiers right


256
00:12:00,506 --> 00:12:02,276
into your application.


257
00:12:02,276 --> 00:12:05,186
If you have an application
that has a basic version


258
00:12:05,186 --> 00:12:08,146
and a pro version, you might
just have one consumable


259
00:12:08,206 --> 00:12:10,286
and you just baked it right
into your application.


260
00:12:10,706 --> 00:12:13,876
However, we've seen more and
more applications out there


261
00:12:14,136 --> 00:12:16,036
where they're interested
in going out


262
00:12:16,036 --> 00:12:18,576
and fetching those in-app
identifiers from a host


263
00:12:18,576 --> 00:12:19,866
that they provide so that


264
00:12:19,866 --> 00:12:22,346
over time maybe they can
change what they're marketing


265
00:12:22,346 --> 00:12:26,526
to the users, or exactly
what appears where.


266
00:12:27,486 --> 00:12:28,476
That's okay to do.


267
00:12:28,476 --> 00:12:29,936
Completely valid to do.


268
00:12:30,016 --> 00:12:32,166
The thing we want to call
out is if you're doing


269
00:12:32,166 --> 00:12:36,246
that make sure your host
is scalable and reliable.


270
00:12:36,246 --> 00:12:39,386
This is the beginning of
your in-app purchase process.


271
00:12:39,626 --> 00:12:42,466
The worst thing to show a user
right now is just a spinner


272
00:12:42,466 --> 00:12:44,026
while they're waiting
to make a purchase.


273
00:12:44,566 --> 00:12:49,016
This should be, and if you can
fetch in advance, that's great.


274
00:12:49,496 --> 00:12:51,696
If you can cache on the
device that's even better.


275
00:12:51,956 --> 00:12:54,446
Be very cognizant of
how you are fetching


276
00:12:54,446 --> 00:12:56,156
and preserving these
identifiers.


277
00:12:56,866 --> 00:13:00,586
Now that you have the
identifiers you need to go


278
00:13:00,586 --> 00:13:04,056
to the App Store to fetch the
localized product information


279
00:13:04,086 --> 00:13:05,746
associated with those products.


280
00:13:07,006 --> 00:13:09,666
This can be done with
an SK Product Request.


281
00:13:09,966 --> 00:13:12,476
You pass in the identifiers
that you're interested in.


282
00:13:12,946 --> 00:13:15,426
Again, for the smoothest
experience possible,


283
00:13:15,426 --> 00:13:16,726
you want to do this in advance.


284
00:13:16,726 --> 00:13:19,506
You want to anticipate when
the user might be interested


285
00:13:19,506 --> 00:13:21,476
in looking at your
in-app purchases,


286
00:13:21,636 --> 00:13:26,046
and have that information
available ahead of time.


287
00:13:26,156 --> 00:13:28,826
So first thing you do, create
your SK Product Request.


288
00:13:29,056 --> 00:13:31,236
You pass in the identifiers
you're interested in.


289
00:13:32,296 --> 00:13:33,136
You set your delegate.


290
00:13:33,166 --> 00:13:35,536
This will give information
back to your application


291
00:13:35,536 --> 00:13:39,206
about when those
products are loaded.


292
00:13:39,276 --> 00:13:40,766
And then you just call start.


293
00:13:40,936 --> 00:13:41,646
That simple.


294
00:13:44,616 --> 00:13:47,366
The delegate looks like this.


295
00:13:47,746 --> 00:13:50,166
We have product request,
didReceive response.


296
00:13:50,166 --> 00:13:52,026
This will pass in
all of the products


297
00:13:52,026 --> 00:13:53,926
that you requested
from the App Store.


298
00:13:54,196 --> 00:13:56,386
And each of those products
will retain information


299
00:13:56,386 --> 00:13:58,816
like a localized
title and description.


300
00:13:59,046 --> 00:14:01,496
As I said before this is
a global market place,


301
00:14:01,496 --> 00:14:04,696
you're marketing your in-app
purchases around the world.


302
00:14:05,096 --> 00:14:06,286
So it's important to make sure


303
00:14:06,286 --> 00:14:09,426
that you're actually using
localized information


304
00:14:09,636 --> 00:14:11,216
to make your sales.


305
00:14:11,306 --> 00:14:13,436
So localized title
and description,


306
00:14:14,616 --> 00:14:17,916
even more important is
price and price locale.


307
00:14:18,096 --> 00:14:20,806
You want to present the user the
price of your in-app purchases


308
00:14:20,996 --> 00:14:22,336
and you want to make
sure it's presented


309
00:14:22,336 --> 00:14:24,736
in a format that
they understand.


310
00:14:24,996 --> 00:14:29,316
Currency is represented
differently around the world


311
00:14:29,906 --> 00:14:33,186
and you know it's important
that you do it right.


312
00:14:33,186 --> 00:14:35,606
We'll get into that in a moment.


313
00:14:36,576 --> 00:14:40,136
And then finally if you're
hosting your in-app purchase


314
00:14:40,136 --> 00:14:43,086
content, this is something that
you've set up in iTunes Connect,


315
00:14:43,086 --> 00:14:45,566
we actually give information


316
00:14:45,566 --> 00:14:47,346
about the download
contact length


317
00:14:47,346 --> 00:14:50,216
and versions associated
with those purchases.


318
00:14:50,636 --> 00:14:52,546
So as I mentioned the
price, it's very important


319
00:14:52,546 --> 00:14:58,666
that you do the right thing when
presenting those price strings.


320
00:14:58,986 --> 00:15:01,396
When you're presenting those
prices, you want to use


321
00:15:01,396 --> 00:15:05,166
that price locale and pass that
into an NS number formatter,


322
00:15:05,416 --> 00:15:06,936
and that will get
you information


323
00:15:07,036 --> 00:15:08,666
about that pricing information.


324
00:15:08,906 --> 00:15:12,026
That NS number formatter, will
take that price information,


325
00:15:12,206 --> 00:15:13,956
take the locale associated
with it.


326
00:15:13,956 --> 00:15:16,696
If you set it to a currency
format, you can make sure


327
00:15:16,696 --> 00:15:18,746
that you're getting that
pricing information correct.


328
00:15:19,206 --> 00:15:22,556
The other thing you want to do
is to not bother doing any sort


329
00:15:22,556 --> 00:15:24,356
of currency conversion
of your own.


330
00:15:24,396 --> 00:15:27,376
The App Store knows
how to localize,


331
00:15:27,626 --> 00:15:28,976
convert those currencies.


332
00:15:29,236 --> 00:15:31,206
So you don't need to
bother with that at all.


333
00:15:31,486 --> 00:15:34,776
Just present the price using
the NS number formatter as is.


334
00:15:35,316 --> 00:15:37,836
The next step after that
is to present your UI.


335
00:15:38,226 --> 00:15:39,946
Not really going to talk
too much about that,


336
00:15:40,136 --> 00:15:42,476
these are your products,
these are your applications.


337
00:15:42,476 --> 00:15:44,286
You know how to present
them in your UI


338
00:15:44,826 --> 00:15:47,686
to make the best
sales pitch possible.


339
00:15:48,826 --> 00:15:51,346
However, once the
purchase has been complete,


340
00:15:51,936 --> 00:15:56,036
or once the UI has been shown,
we're going to jump right


341
00:15:56,106 --> 00:15:57,686
into making the purchase itself.


342
00:15:58,036 --> 00:15:59,996
And that can be done by adding


343
00:15:59,996 --> 00:16:02,436
and creating an SK
payment object


344
00:16:02,436 --> 00:16:04,026
and adding it to
the Payment Queue.


345
00:16:04,816 --> 00:16:07,266
Once you've created that SK
payment object and add it


346
00:16:07,266 --> 00:16:10,316
to the Payment Queue,
you'll get a callback


347
00:16:10,626 --> 00:16:12,886
as the payment is
being processed


348
00:16:13,086 --> 00:16:14,726
through updated transactions.


349
00:16:14,726 --> 00:16:18,016
So this is that Payment Queue
Observer you added right


350
00:16:18,016 --> 00:16:19,376
when the application started.


351
00:16:19,766 --> 00:16:21,626
You created your
Payment Queue Observer.


352
00:16:21,886 --> 00:16:24,256
It called Payment Queue
updated transactions.


353
00:16:24,396 --> 00:16:26,976
And you'll get information
about the payment as it's going


354
00:16:26,976 --> 00:16:29,976
through the process so all
you did was you created your


355
00:16:29,976 --> 00:16:30,686
SK payment.


356
00:16:31,356 --> 00:16:32,716
Added it to the Payment Queue.


357
00:16:32,716 --> 00:16:36,236
The information started
coming in and you're going


358
00:16:36,236 --> 00:16:38,986
to get information about all
the transactions in process.


359
00:16:38,986 --> 00:16:40,566
You might have one,
you might have many.


360
00:16:40,786 --> 00:16:45,246
You should iterate through those
transactions and then listen


361
00:16:45,246 --> 00:16:47,756
to the state for each
of those transactions.


362
00:16:47,966 --> 00:16:49,086
It's a couple different states,


363
00:16:49,086 --> 00:16:50,656
the one you're probably
most interested


364
00:16:50,656 --> 00:16:51,936
in is the purchase state.


365
00:16:51,976 --> 00:16:54,906
This is where you know that
the purchase was completed


366
00:16:55,086 --> 00:16:57,426
and should go ahead and
validate that purchase,


367
00:16:57,666 --> 00:16:59,696
we'll get into that
in a little bit,


368
00:16:59,696 --> 00:17:01,106
and make that content available.


369
00:17:01,786 --> 00:17:04,675
However, there's one other state
I'd like to talk about as well


370
00:17:04,915 --> 00:17:07,316
and that's the deferred
transaction state.


371
00:17:07,986 --> 00:17:11,925
Deferred was added
back in iOS 8 and it's


372
00:17:11,925 --> 00:17:14,316
for the Ask to Buy feature.


373
00:17:14,626 --> 00:17:16,945
This was to allow
iCloud families


374
00:17:16,945 --> 00:17:19,685
where children could
attempt to make a purchase,


375
00:17:19,965 --> 00:17:23,326
such as an in-app purchase,
and their parent or guardian,


376
00:17:23,326 --> 00:17:26,366
their approver, will have
to decide whether or not


377
00:17:26,366 --> 00:17:27,626
that purchase will go through.


378
00:17:27,965 --> 00:17:29,686
The deferred state is the state


379
00:17:29,686 --> 00:17:31,166
that you're in-app
purchase lands


380
00:17:31,166 --> 00:17:36,846
on when it's currently pending
approval from the parent.


381
00:17:37,446 --> 00:17:39,796
One thing we've seen
a lot and we want


382
00:17:39,796 --> 00:17:44,006
to make it very clear is you
should not block your UI if it's


383
00:17:44,006 --> 00:17:44,966
in the deferred state.


384
00:17:44,966 --> 00:17:46,496
You should handle that in a way


385
00:17:46,786 --> 00:17:50,886
where maybe the purchase
hasn't even occurred yet,


386
00:17:50,886 --> 00:17:53,516
just let the child who's
actually attempting


387
00:17:53,516 --> 00:17:56,446
to use your app make that
purchase, just let them go back


388
00:17:56,446 --> 00:17:58,356
and continue to use the game


389
00:17:58,356 --> 00:17:59,906
or whatever it is
they're interested in.


390
00:18:00,226 --> 00:18:01,286
Because it might be hours,


391
00:18:01,286 --> 00:18:03,486
it might be days before
the parent goes through


392
00:18:03,486 --> 00:18:04,846
and approves that purchase.


393
00:18:05,146 --> 00:18:07,826
So no spinner, no
modal dialogues.


394
00:18:08,216 --> 00:18:11,636
Just treat deferred state as
if the purchase hasn't even,


395
00:18:11,636 --> 00:18:13,236
you know hasn't even
started yet.


396
00:18:13,266 --> 00:18:18,616
One thing I also want to get
into is it's very important


397
00:18:18,616 --> 00:18:21,796
to test your applications
when using in-app purchases,


398
00:18:21,796 --> 00:18:24,466
just like testing your
application any other way.


399
00:18:24,926 --> 00:18:27,826
And this can be done
through the iTunes store


400
00:18:27,826 --> 00:18:29,226
Sandbox environment.


401
00:18:29,226 --> 00:18:30,986
This is a special environment.


402
00:18:31,306 --> 00:18:33,116
If you're running
your application


403
00:18:33,116 --> 00:18:36,176
and it's a developer signed
application, any purchase


404
00:18:36,176 --> 00:18:39,166
that you make will go to
the Sandbox environment.


405
00:18:40,126 --> 00:18:46,746
However, if you're interested in
testing deferred transactions,


406
00:18:46,746 --> 00:18:49,386
there's really no good
way of creating a family


407
00:18:49,606 --> 00:18:52,056
so that you can actually
test the Ask to Buy flow.


408
00:18:52,546 --> 00:18:55,686
So if you want to test your
deferred transaction in Sandbox,


409
00:18:55,996 --> 00:18:59,886
it can be done using
SimulatesAskToBuyInSandbox.


410
00:19:00,246 --> 00:19:04,116
This is where you create your
SKMutable payment object.


411
00:19:04,716 --> 00:19:06,046
You pass in that product


412
00:19:06,196 --> 00:19:10,136
and then you set the
SimulatesAskToBuyInSandbox flag.


413
00:19:10,166 --> 00:19:12,976
This is a flag that's going
to tell the App Store, hey,


414
00:19:13,236 --> 00:19:15,626
treat this as if a
child was buying this


415
00:19:15,626 --> 00:19:17,396
and that child was
part of a family.


416
00:19:18,016 --> 00:19:19,956
Once you add it to the
Payment Queue that gets sent


417
00:19:19,956 --> 00:19:22,856
up to the App Store and the
App Store will respond back


418
00:19:22,856 --> 00:19:25,066
with a deferred state
to your application.


419
00:19:25,066 --> 00:19:28,436
This is your way of knowing,
hey my app is going to work


420
00:19:28,436 --> 00:19:29,506
when kids are using it.


421
00:19:30,086 --> 00:19:34,396
We also should talk a little
bit about handling errors.


422
00:19:34,396 --> 00:19:36,536
Not everything is
going to go right.


423
00:19:36,536 --> 00:19:38,836
There's going to be error
states in your application.


424
00:19:39,366 --> 00:19:41,516
Especially with in-app
purchases.


425
00:19:41,906 --> 00:19:46,396
One thing to keep in mind is not
all errors are created equal.


426
00:19:46,396 --> 00:19:47,826
I really encourage you to check


427
00:19:47,826 --> 00:19:50,656
out the In-App Purchase
Programming Guide,


428
00:19:50,656 --> 00:19:53,046
or the StoreKit Framework
Reference Guide


429
00:19:53,426 --> 00:19:56,066
to get a good sense of
all the possible errors


430
00:19:56,066 --> 00:19:59,326
that can be returned in
your application over time.


431
00:20:00,106 --> 00:20:03,526
One thing to keep
in mind is most


432
00:20:03,526 --> 00:20:05,606
of these errors aren't
something that you need


433
00:20:05,606 --> 00:20:07,956
to inform the user about.


434
00:20:07,956 --> 00:20:10,526
Most of these are just errors
that we're informing you


435
00:20:10,696 --> 00:20:12,276
to handle in your application.


436
00:20:12,786 --> 00:20:15,496
A great example of that
is I'm going through,


437
00:20:15,496 --> 00:20:17,636
I'm using your application,
I'm browsing around,


438
00:20:17,636 --> 00:20:19,176
I'm doing a little bit
of window shopping.


439
00:20:19,406 --> 00:20:20,616
I click on purchase.


440
00:20:21,046 --> 00:20:24,386
I'll get the price confirmation
dialog that StoreKit will show.


441
00:20:24,386 --> 00:20:26,506
And then I change my
mind, I want to go back


442
00:20:26,506 --> 00:20:27,586
and see what else is there.


443
00:20:27,786 --> 00:20:28,746
And I hit cancel.


444
00:20:29,406 --> 00:20:33,646
Cancel error, StoreKit will
return a user did cancel error


445
00:20:33,646 --> 00:20:34,566
to your application.


446
00:20:34,886 --> 00:20:36,576
There's no need to
present the user


447
00:20:36,576 --> 00:20:38,676
with a user did cancel alert.


448
00:20:39,026 --> 00:20:41,316
And we'll see this in
applications from time to time.


449
00:20:41,316 --> 00:20:42,836
The user knows that
they cancelled.


450
00:20:43,206 --> 00:20:46,956
There's no reason to
repeat that back to them.


451
00:20:47,516 --> 00:20:49,506
Let StoreKit handle
the transaction flow


452
00:20:49,506 --> 00:20:50,496
as much as possible.


453
00:20:50,496 --> 00:20:52,146
Again, we got into
the Payment Queue.


454
00:20:52,146 --> 00:20:55,946
The Payment Queue is where
the payment will be processed.


455
00:20:56,266 --> 00:20:58,026
The App Store and StoreKit


456
00:20:58,086 --> 00:21:01,076
for you will confirm the
purchase with the user.


457
00:21:01,296 --> 00:21:02,506
They'll present a price.


458
00:21:02,976 --> 00:21:05,316
That price should match
what was inside your app.


459
00:21:05,316 --> 00:21:06,536
So that's why isn't important


460
00:21:06,536 --> 00:21:09,396
to make sure you localize the
pricing information correctly.


461
00:21:09,746 --> 00:21:11,076
We'll authenticate the user.


462
00:21:11,326 --> 00:21:13,456
If there's any issue with
their billing information,


463
00:21:13,456 --> 00:21:14,496
we'll handle that.


464
00:21:14,986 --> 00:21:17,376
No need for you to
pop a confirmation


465
00:21:17,376 --> 00:21:20,936
or do anything special, let
StoreKit handle that for you.


466
00:21:22,736 --> 00:21:25,836
So we talked a little bit about
before the transaction queue


467
00:21:25,836 --> 00:21:27,306
and we talked about the states


468
00:21:27,306 --> 00:21:29,356
that can be returned
for your payment.


469
00:21:30,296 --> 00:21:33,216
Once your payment has made
it to the purchase state,


470
00:21:33,246 --> 00:21:35,056
you have a number
of choices you need


471
00:21:35,056 --> 00:21:36,406
to make in your application.


472
00:21:38,776 --> 00:21:42,846
Specifically, around validating
that that purchase is backed


473
00:21:42,906 --> 00:21:45,136
by a real monetary transaction.


474
00:21:45,776 --> 00:21:48,976
So we'll get into a couple
different ways of doing this.


475
00:21:49,336 --> 00:21:51,286
But again, it's your
application,


476
00:21:51,286 --> 00:21:52,426
they're your products.


477
00:21:52,656 --> 00:21:53,836
So it's really important to keep


478
00:21:53,836 --> 00:21:57,466
in mind exactly what
technologies you're using


479
00:21:57,686 --> 00:22:01,056
and what level of
security you want to use


480
00:22:01,056 --> 00:22:02,926
to validate your purchase.


481
00:22:05,236 --> 00:22:09,646
So receipt validation, this is
the receipt that is returned


482
00:22:09,646 --> 00:22:11,936
to the application at
the end of the purchase.


483
00:22:11,986 --> 00:22:17,596
It's just like a bill that a
consumer might get when shopping


484
00:22:17,596 --> 00:22:20,316
at a mall or something
like that.


485
00:22:20,506 --> 00:22:24,146
It includes all this information
about the purchasing of the app


486
00:22:24,146 --> 00:22:25,956
and the purchasing
of your in-apps.


487
00:22:26,376 --> 00:22:28,456
And there's kind
of two main ways


488
00:22:28,456 --> 00:22:30,736
that you can attack
validating that receipt.


489
00:22:31,216 --> 00:22:33,586
First is on the device itself.


490
00:22:33,836 --> 00:22:37,826
This receipt comes down, you
can write code right there


491
00:22:37,826 --> 00:22:40,526
on the device to pull
it apart, inspect it,


492
00:22:40,766 --> 00:22:43,936
make sure you know authenticate
that it came from Apple,


493
00:22:43,936 --> 00:22:47,196
make sure that it's from
a valid monetary source.


494
00:22:47,696 --> 00:22:51,706
And this can be done
kind of generally is


495
00:22:51,706 --> 00:22:54,846
for just unlocking features and
content right within the app.


496
00:22:54,846 --> 00:22:56,926
So again, this is one of the
choices you have to make.


497
00:22:57,206 --> 00:22:59,316
Is this a purely client side,


498
00:22:59,316 --> 00:23:01,446
right inside your
app type of purchase?


499
00:23:01,996 --> 00:23:05,626
Or if you have a server
side, you might want


500
00:23:05,626 --> 00:23:07,896
to actually have the
server validate the receipt


501
00:23:07,956 --> 00:23:10,066
because you want that
to be the gateway


502
00:23:10,066 --> 00:23:11,756
for your content or service.


503
00:23:11,986 --> 00:23:14,896
And this can be done by taking
that receipt that was sent


504
00:23:14,896 --> 00:23:18,396
to the device, uploading it
to your server and then having


505
00:23:18,396 --> 00:23:21,716
that server send the receipt
over to the App Store,


506
00:23:21,896 --> 00:23:25,176
there's a backend API
to verify that receipt.


507
00:23:25,596 --> 00:23:28,316
And that can be done
server-to-server.


508
00:23:29,726 --> 00:23:30,976
One note with that though,


509
00:23:30,976 --> 00:23:34,676
is yes the App Store does have
a backend API that can take


510
00:23:34,676 --> 00:23:39,076
in that receipt and validate
it, but you should never send


511
00:23:39,076 --> 00:23:41,926
that receipt to that API
directly from the device.


512
00:23:42,076 --> 00:23:46,836
That is not a secure
mechanism and there are limits


513
00:23:46,836 --> 00:23:50,706
to how trustworthy that can
be from your application.


514
00:23:51,056 --> 00:23:55,086
So if you're going to use
the verify receipt endpoint,


515
00:23:55,086 --> 00:23:57,376
it should really be
from your hosted server,


516
00:23:57,676 --> 00:23:59,326
right into the App Store itself.


517
00:24:01,676 --> 00:24:04,706
So let's get a little bit
deeper into what the receipt is.


518
00:24:05,686 --> 00:24:09,996
The receipt is a trusted record
of app and in-app purchases.


519
00:24:10,576 --> 00:24:13,876
It contains information
that will allow you to know


520
00:24:13,916 --> 00:24:17,326
that this app was bought by
this user on this device,


521
00:24:17,646 --> 00:24:21,246
and those in-app were bought
by that user on that device.


522
00:24:22,096 --> 00:24:23,566
Stored right on the device,


523
00:24:23,566 --> 00:24:27,006
right into the application
container of your app itself.


524
00:24:27,726 --> 00:24:30,986
It's issued by the App Store and
it contains information in it


525
00:24:30,986 --> 00:24:33,636
that allow you to verify
that it actually came


526
00:24:33,636 --> 00:24:35,096
from the App Store itself.


527
00:24:35,706 --> 00:24:39,436
And again, it's for your
app, for that device only.


528
00:24:39,706 --> 00:24:41,696
If your app is running


529
00:24:41,696 --> 00:24:43,716
on a different device it will
get a very different, you know,


530
00:24:43,716 --> 00:24:45,766
it will get a different
receipt for a different user.


531
00:24:47,356 --> 00:24:50,386
This is kind of, this
just gives you a sense


532
00:24:50,386 --> 00:24:52,176
of what it looks like.


533
00:24:52,486 --> 00:24:56,006
Again, stored in the app bundle.


534
00:24:56,436 --> 00:24:57,896
We give you an API to get it.


535
00:24:57,896 --> 00:24:59,566
We'll see what that
looks like in a moment.


536
00:25:00,416 --> 00:25:02,156
And it's a single file.


537
00:25:02,536 --> 00:25:05,846
Old, old, old versions
of the receipt there used


538
00:25:05,846 --> 00:25:07,966
to be multiple files for
each in-app purchase,


539
00:25:07,966 --> 00:25:11,086
but since iOS 7 we've
had a unified receipt


540
00:25:11,086 --> 00:25:13,646
that contains all this
information in one single file.


541
00:25:14,216 --> 00:25:17,746
It also, again, contains
certificates and signatures


542
00:25:17,746 --> 00:25:21,006
to allow you to verify
that this receipt is valid.


543
00:25:21,966 --> 00:25:27,216
We do this through a Public
Key Cryptography Standard


544
00:25:27,216 --> 00:25:28,526
7 Container.


545
00:25:28,726 --> 00:25:31,686
This is the container that
contains all this information


546
00:25:31,686 --> 00:25:33,836
in it and this is
an open standard.


547
00:25:33,876 --> 00:25:36,456
So there's a lot of information
that you can use out there


548
00:25:36,776 --> 00:25:40,426
on how to work with
a PKCS7 Container.


549
00:25:40,936 --> 00:25:43,526
The payload of that container,


550
00:25:43,916 --> 00:25:46,686
the thing that contains
the actual information


551
00:25:46,686 --> 00:25:49,066
that you're going to be
parsing out, that's encoded


552
00:25:49,066 --> 00:25:53,066
in an ASN1 format, again
public open standard.


553
00:25:53,766 --> 00:25:57,576
And there's a lot of
great options out there


554
00:25:57,576 --> 00:26:01,106
for verifying this, OpenSSL
is a very common one.


555
00:26:01,726 --> 00:26:03,386
Sometimes people
create their own.


556
00:26:03,826 --> 00:26:06,226
But again, something
to stress here is


557
00:26:06,226 --> 00:26:08,876
that this is your
application, this is your money,


558
00:26:08,946 --> 00:26:10,476
this is your business.


559
00:26:10,766 --> 00:26:12,826
So you've got to make
good choices on how best


560
00:26:12,826 --> 00:26:15,286
to verify this receipt and
what technologies you're going


561
00:26:15,286 --> 00:26:15,906
to use.


562
00:26:17,596 --> 00:26:22,466
However, whatever you choose,
there's some similar processes


563
00:26:22,466 --> 00:26:24,256
that you're going to go through.


564
00:26:24,396 --> 00:26:26,806
First up, is you're going
to locate the receipt


565
00:26:26,806 --> 00:26:29,266
in the application
using an NS bundle API.


566
00:26:30,026 --> 00:26:32,456
And again, this is what
it looks like in Swift.


567
00:26:32,506 --> 00:26:35,706
You can call right
in that NS bundle,


568
00:26:36,056 --> 00:26:37,576
and there's an App
Store receipt URL


569
00:26:37,576 --> 00:26:39,376
that will be returned by that.


570
00:26:39,376 --> 00:26:42,316
This is a local URL,
local to the file system.


571
00:26:42,876 --> 00:26:45,606
Once you have that URL,
you pass it into NS data


572
00:26:45,606 --> 00:26:50,336
and you get the binary
payload of that receipt.


573
00:26:50,826 --> 00:26:52,646
Now that you have
that binary payload,


574
00:26:52,696 --> 00:26:54,316
a couple things to keep in mind.


575
00:26:55,136 --> 00:26:58,446
The certificates on there
will have an expiration date,


576
00:26:58,446 --> 00:26:59,806
but you've got to
be very careful


577
00:26:59,806 --> 00:27:01,506
about checking that
expiration date.


578
00:27:02,506 --> 00:27:06,896
Just because it was issued at
a certain time, doesn't mean


579
00:27:07,266 --> 00:27:09,576
that that expiration
date is valid


580
00:27:09,576 --> 00:27:11,036
for all time in the future.


581
00:27:11,596 --> 00:27:13,626
So if you're checking
the expiration date,


582
00:27:13,786 --> 00:27:17,496
compare it against to when
the receipt was issued


583
00:27:17,496 --> 00:27:21,006
from the App Store, not to
what the current date is.


584
00:27:21,346 --> 00:27:23,726
It's not like an SSL
handshake, where you want


585
00:27:23,726 --> 00:27:24,846
to check it every time.


586
00:27:25,176 --> 00:27:29,756
It's only valid for when it
was issued, or it's only valid


587
00:27:29,756 --> 00:27:31,716
to check the date for
when it was issued.


588
00:27:32,226 --> 00:27:34,736
Or it's perfectly valid not
even to check the date at all.


589
00:27:35,086 --> 00:27:37,536
But what you do want
to do is check


590
00:27:37,536 --> 00:27:40,566
up to the root certificate
authority on the receipt.


591
00:27:41,186 --> 00:27:44,226
That will verify that
it came from Apple.


592
00:27:44,226 --> 00:27:46,996
That you can trust it
because it is Apple's receipt.


593
00:27:47,756 --> 00:27:48,936
So check up to the root.


594
00:27:48,936 --> 00:27:54,526
So again, this just kind
of gives you an idea


595
00:27:54,526 --> 00:27:56,606
of what it looks like
inside the receipt.


596
00:27:57,316 --> 00:28:00,296
The payload of it, that ASN1
format that I was talking


597
00:28:00,296 --> 00:28:02,126
about is a series of attributes.


598
00:28:02,126 --> 00:28:04,356
You can think of it
almost as an NS dictionary.


599
00:28:04,586 --> 00:28:06,826
It contains types and values.


600
00:28:07,166 --> 00:28:09,506
And we're going to highlight
some of those types and values.


601
00:28:09,836 --> 00:28:12,736
There's more in there than
we're going to talk about today.


602
00:28:12,736 --> 00:28:14,236
And you can get a
lot of that online


603
00:28:14,236 --> 00:28:16,996
through our Receipt
Validation Programming Guide.


604
00:28:17,726 --> 00:28:22,646
But some of the main ones you're
going to want to use are type 2


605
00:28:22,646 --> 00:28:25,836
and type 3, that includes
the bundle identifier


606
00:28:25,836 --> 00:28:28,826
and the bundle version that
the receipt was meant for.


607
00:28:29,916 --> 00:28:32,116
Hopefully that matches
what's in your application


608
00:28:32,166 --> 00:28:32,956
and you should check it.


609
00:28:33,986 --> 00:28:35,876
So you should check
the bundle identifier.


610
00:28:35,986 --> 00:28:37,316
You should check
the bundle version.


611
00:28:37,316 --> 00:28:38,576
And then one thing to keep


612
00:28:38,576 --> 00:28:42,916
in mind is you should use hard
coded values right inside the


613
00:28:42,916 --> 00:28:44,286
binary of your app.


614
00:28:44,806 --> 00:28:48,346
It's a lot easier for me to go
in and change the info P list,


615
00:28:48,716 --> 00:28:52,626
if that is what you're using to
match a phony receipt than it is


616
00:28:52,626 --> 00:28:54,206
for me to change the payload


617
00:28:54,206 --> 00:28:56,456
of your application
to match the receipt.


618
00:28:56,586 --> 00:28:59,276
So if you really want to make
sure that that receipt is


619
00:28:59,276 --> 00:29:02,436
for your application,
use hard coded values.


620
00:29:04,186 --> 00:29:07,396
Now that you know that this
receipt is for your application,


621
00:29:07,396 --> 00:29:08,206
you want to make sure it is


622
00:29:08,206 --> 00:29:10,616
for the device that's
running the receipt right then


623
00:29:10,616 --> 00:29:11,036
and there.


624
00:29:11,106 --> 00:29:12,766
And this is a little trickier.


625
00:29:13,006 --> 00:29:17,776
What you want to do is take
a look at the SHA-1 hash


626
00:29:17,776 --> 00:29:19,706
that is returned in type 5.


627
00:29:20,516 --> 00:29:22,556
Type 5 contains this hash.


628
00:29:22,786 --> 00:29:26,476
The hash is made up of
pieces of information


629
00:29:26,476 --> 00:29:28,806
that the App Store knows
at the time of purchase.


630
00:29:29,036 --> 00:29:32,476
And pieces of information that
you know a time of verification.


631
00:29:33,176 --> 00:29:35,286
That specifically
is the bundle ID.


632
00:29:36,186 --> 00:29:38,516
So again hard coded value
you want to keep in your app,


633
00:29:38,556 --> 00:29:39,736
the bundle ID of your app.


634
00:29:40,296 --> 00:29:41,746
The device identifier.


635
00:29:42,106 --> 00:29:43,736
This is a, there
are APIs for that.


636
00:29:43,736 --> 00:29:47,456
It's a little different on
iOS versus macOS, but you want


637
00:29:47,456 --> 00:29:49,316
to load up that device
identifier.


638
00:29:49,446 --> 00:29:51,636
And then this Opaque Value.


639
00:29:51,796 --> 00:29:54,636
This Opaque Value is
basically it's a little bit


640
00:29:54,636 --> 00:29:55,896
of cryptographic entropy.


641
00:29:55,896 --> 00:29:58,536
It's a secret salt that is
included in the receipt.


642
00:29:58,536 --> 00:30:02,116
It allows the hash to change
over time even if the bundle ID


643
00:30:02,116 --> 00:30:03,926
and the device identifier
aren't changing.


644
00:30:04,236 --> 00:30:06,576
You should basically take
the Opaque Value that's


645
00:30:06,576 --> 00:30:09,016
in the receipt and
include it in your hash.


646
00:30:09,626 --> 00:30:14,356
Once you have that, SHA-1
hash compare it to attribute 5


647
00:30:14,356 --> 00:30:17,256
and if they match, you know
it was for your device.


648
00:30:18,036 --> 00:30:24,556
And again it's unique to
your app on that device.


649
00:30:25,586 --> 00:30:29,726
The receipt also contains
information about all


650
00:30:29,726 --> 00:30:31,136
of your in-app purchases.


651
00:30:31,136 --> 00:30:37,376
So what we see here is a whole
bunch of, more than one Type 17.


652
00:30:37,376 --> 00:30:41,286
Type 17 is for each and every
purchase that the user's made


653
00:30:41,286 --> 00:30:44,326
with your application it
will include one record


654
00:30:44,636 --> 00:30:45,856
for that in-app purchase.


655
00:30:46,406 --> 00:30:50,116
The pay load for Type
17 won't be a string,


656
00:30:50,116 --> 00:30:53,806
it will actually be
another ASN1 document


657
00:30:53,856 --> 00:30:56,826
and that will have its
own values inside of it.


658
00:30:57,296 --> 00:30:59,646
So what do those look like?


659
00:30:59,776 --> 00:31:03,806
Well 1701, that's the
quantity of purchases made.


660
00:31:03,846 --> 00:31:05,916
So we talked about
consumables before,


661
00:31:06,326 --> 00:31:09,406
the user could have
purchased 10 bags


662
00:31:09,406 --> 00:31:12,966
of coins inside your
game, or 100 bags of coin.


663
00:31:13,236 --> 00:31:17,666
That's going to be the quantity,
the number of purchases


664
00:31:17,666 --> 00:31:19,966
that was made against that
particular identifier.


665
00:31:21,156 --> 00:31:23,486
The product identifier, we
talked about this before.


666
00:31:23,486 --> 00:31:25,506
This is that identifier
that you use


667
00:31:25,506 --> 00:31:30,336
to load your in-app purchase
data from the App Store


668
00:31:30,336 --> 00:31:32,626
and what you set them
up in iTunes Connect as.


669
00:31:33,676 --> 00:31:36,606
The identifier, this is
a transaction identifier.


670
00:31:36,606 --> 00:31:39,366
This is a unique identifier for
the transaction that was used


671
00:31:39,366 --> 00:31:40,436
to make that purchase.


672
00:31:41,406 --> 00:31:43,246
The date of the purchase.


673
00:31:43,856 --> 00:31:47,486
And then finally one
new thing, it's not new,


674
00:31:47,486 --> 00:31:50,676
but one thing I want to
highlight is we also include


675
00:31:50,906 --> 00:31:52,736
for auto-renewing subscriptions,


676
00:31:52,846 --> 00:31:55,326
the subscription
expiration date.


677
00:31:55,826 --> 00:31:58,326
So if you're switching your
app over to subscriptions,


678
00:31:58,596 --> 00:31:59,996
that field's important to you.


679
00:32:00,366 --> 00:32:02,446
You're going to use that to
kind of, you're going to use


680
00:32:02,446 --> 00:32:04,936
that to know is this
subscription still valid?


681
00:32:05,156 --> 00:32:11,286
Do we need to ask the user to,
or you need to double check


682
00:32:11,286 --> 00:32:13,576
that the user is still
in a valid subscription?


683
00:32:14,036 --> 00:32:15,856
So that field is very important.


684
00:32:17,956 --> 00:32:19,156
And then one other note.


685
00:32:19,376 --> 00:32:21,786
If you have an app that's
currently in the Store,


686
00:32:22,536 --> 00:32:25,076
and it's a pay for app
and you're interested


687
00:32:25,076 --> 00:32:27,456
in switching it over to
a subscription model,


688
00:32:28,146 --> 00:32:31,326
one thing you want to make sure
you check is inside the main


689
00:32:31,326 --> 00:32:34,306
receipt, the app receipt
itself is Type 19.


690
00:32:34,646 --> 00:32:37,416
This includes the original
application version


691
00:32:37,416 --> 00:32:39,126
that that app was bought with.


692
00:32:39,756 --> 00:32:43,156
So if I bought it as version
1.0, which was a pay for app


693
00:32:43,576 --> 00:32:46,316
and in version 2.0 you
moved to subscriptions,


694
00:32:46,746 --> 00:32:49,216
I want to take a look at
that original application,


695
00:32:50,186 --> 00:32:54,266
because I want to make sure I
treat that user as the paid user


696
00:32:54,266 --> 00:32:57,206
that they are and not as
the subscription user.


697
00:32:57,576 --> 00:33:00,486
I think it's a really bad
experience if the model moves


698
00:33:00,486 --> 00:33:03,046
over to subscriptions
and you don't respect


699
00:33:03,046 --> 00:33:05,226
that they purchased
that app originally.


700
00:33:05,586 --> 00:33:06,956
So it's important
to keep in mind


701
00:33:06,956 --> 00:33:10,466
if you're switching
to subscriptions.


702
00:33:12,066 --> 00:33:13,646
A couple other notes
about the receipt.


703
00:33:13,646 --> 00:33:16,106
The receipt is issued
at the time of purchase.


704
00:33:17,016 --> 00:33:20,196
But it actually is
also renewable.


705
00:33:21,146 --> 00:33:22,216
But it's only renewable


706
00:33:22,216 --> 00:33:25,036
for certain types
of in-app purchases.


707
00:33:25,286 --> 00:33:27,346
So when we're talking
about consumable


708
00:33:27,346 --> 00:33:31,116
and non-renewing subscriptions,
they are not going


709
00:33:31,116 --> 00:33:33,326
to be refreshed with
the receipt.


710
00:33:34,136 --> 00:33:38,426
So consumable and nonrenewable
subscriptions only appear once.


711
00:33:38,426 --> 00:33:41,136
They appear right after
that transaction was made.


712
00:33:41,136 --> 00:33:45,046
And they're not going to be
there when the user refreshes


713
00:33:45,046 --> 00:33:47,886
that receipt either on that
device or when they switch


714
00:33:47,886 --> 00:33:49,006
to a different device.


715
00:33:50,166 --> 00:33:54,466
However, non-consumable and
auto renewing subscriptions will


716
00:33:54,466 --> 00:33:56,246
always be in the user's receipt.


717
00:33:56,796 --> 00:33:58,156
And you can get those back


718
00:33:58,156 --> 00:34:01,126
and should get those
back via a StoreKit API.


719
00:34:01,126 --> 00:34:04,566
We can take a look at
what that looks like.


720
00:34:04,566 --> 00:34:07,526
It's a little different
on IOS versus macOS.


721
00:34:08,085 --> 00:34:11,525
On iOS, the receipt
doesn't exist or is invalid,


722
00:34:11,525 --> 00:34:14,096
you're going to want to use
this StoreKit API to refresh it.


723
00:34:14,876 --> 00:34:17,775
But keep in mind that you're
going to have to have network.


724
00:34:17,775 --> 00:34:20,025
We have to make a
connection to the App Store.


725
00:34:20,525 --> 00:34:22,176
We have to validate the user.


726
00:34:22,545 --> 00:34:23,856
We've got to know
that they're the ones


727
00:34:23,856 --> 00:34:25,045
who have actually
bought this thing.


728
00:34:25,045 --> 00:34:27,686
So they're going to have to
either enter in their password,


729
00:34:27,686 --> 00:34:30,886
or use their thumb print.


730
00:34:31,396 --> 00:34:33,366
And if you're doing anything


731
00:34:33,366 --> 00:34:37,996
like refreshing the receipt
every time the app launches,


732
00:34:38,166 --> 00:34:40,416
which is really not a
great pattern to follow,


733
00:34:40,686 --> 00:34:41,735
or if you're doing anything


734
00:34:41,735 --> 00:34:43,826
where you're checking
the receipt is invalid


735
00:34:44,156 --> 00:34:47,916
and then fetching it because you
know maybe there's something,


736
00:34:48,056 --> 00:34:50,295
something doesn't look
right, you want to be careful


737
00:34:50,295 --> 00:34:52,616
that you don't get stuck in
a loop over and over again.


738
00:34:52,616 --> 00:34:55,766
If your app crashes and you're
constantly checking your receipt


739
00:34:55,766 --> 00:34:56,496
on launch.


740
00:34:56,976 --> 00:34:59,076
Or if you keep checking
and it's invalid


741
00:34:59,076 --> 00:35:00,716
and there's something
not quite right


742
00:35:00,716 --> 00:35:04,006
about your validation code, you
don't want to validate and fetch


743
00:35:04,006 --> 00:35:06,186
that receipt over, and
over, and over again.


744
00:35:06,426 --> 00:35:08,416
So that's something
to be careful about.


745
00:35:09,556 --> 00:35:13,856
This could be done through
again, on iOS, this can be done


746
00:35:13,856 --> 00:35:16,496
through an SKRecipt
Refresh Request.


747
00:35:17,096 --> 00:35:18,886
You set your delegate
and you call start.


748
00:35:19,266 --> 00:35:21,766
This will inform your
application right


749
00:35:21,766 --> 00:35:25,116
on the delegate when the receipt
is updated and you can go


750
00:35:25,116 --> 00:35:28,046
and process the transactions
in that receipt just


751
00:35:28,046 --> 00:35:30,236
as if they were purchased
by the user.


752
00:35:31,336 --> 00:35:35,306
On macOS a little different
if the receipt is invalid,


753
00:35:35,906 --> 00:35:38,456
you're going to want
to exit with code 173,


754
00:35:38,656 --> 00:35:41,746
this will tell Finder, hey
go fetch the receipt for me.


755
00:35:41,746 --> 00:35:46,996
Again, it's going to require
a network and the user's going


756
00:35:46,996 --> 00:35:48,576
to have to be signed
into the Store.


757
00:35:48,706 --> 00:35:52,766
And this can just be
done by calling exit 173.


758
00:35:53,346 --> 00:35:57,276
And then I just want
to re-highlight again


759
00:35:57,276 --> 00:35:59,086
with server-to-server
validation.


760
00:35:59,086 --> 00:36:01,476
If you're doing an auto
renewing receipt and you have,


761
00:36:01,476 --> 00:36:03,126
an auto renewing subscription


762
00:36:03,336 --> 00:36:05,516
of if you have content that's
available on the server,


763
00:36:05,516 --> 00:36:09,836
you probably have a hosted
implementation backing


764
00:36:09,836 --> 00:36:11,226
up your in-app purchases.


765
00:36:11,626 --> 00:36:14,936
And so if you're doing
server-to-server validation this


766
00:36:14,936 --> 00:36:18,236
will allow you to validate on
the server side that the receipt


767
00:36:18,236 --> 00:36:20,646
that the user got for their
in-app purchases were valid.


768
00:36:21,166 --> 00:36:23,796
So again, you take that
receipt that was on the device


769
00:36:23,796 --> 00:36:25,096
and you upload it to the server.


770
00:36:26,296 --> 00:36:30,986
However, I'm going to
highlight it one more time,


771
00:36:31,096 --> 00:36:34,986
don't send the receipt directly
to the verify receipt endpoint.


772
00:36:35,476 --> 00:36:39,436
It's not secure and you
should not be doing that.


773
00:36:40,246 --> 00:36:43,876
One thing to note the verify
receipt endpoint returns a JSON


774
00:36:43,876 --> 00:36:46,096
payload and that will
actually include information


775
00:36:46,406 --> 00:36:48,866
like if the receipt you had
was maybe a little out of date,


776
00:36:49,166 --> 00:36:51,766
you'll get the latest version
right back from the App Store.


777
00:36:51,976 --> 00:36:55,226
And it will include some
information about was it valid


778
00:36:55,466 --> 00:36:59,256
or if there was some other
state wrong with the receipt.


779
00:36:59,326 --> 00:37:02,006
So again, there are
documentation online


780
00:37:02,296 --> 00:37:05,226
about exactly how the verify
receipt endpoint works.


781
00:37:07,736 --> 00:37:11,486
Okay so now we've gotten through
that, we've made the purchase,


782
00:37:11,736 --> 00:37:13,436
we've processed the transaction.


783
00:37:14,116 --> 00:37:17,306
It's up to you to decide exactly
how you're going to verify


784
00:37:17,306 --> 00:37:19,446
that receipt and what level
of security you're going


785
00:37:19,446 --> 00:37:21,276
to put behind it and what
technologies you're going


786
00:37:21,276 --> 00:37:21,806
to use.


787
00:37:22,176 --> 00:37:24,156
You validated that
that purchase was real.


788
00:37:24,156 --> 00:37:26,446
That there was a monetary
transaction behind it.


789
00:37:26,446 --> 00:37:30,106
It's up to you to make what
the user purchased available


790
00:37:30,106 --> 00:37:30,506
to them.


791
00:37:30,506 --> 00:37:32,756
Make good on your
end of the deal.


792
00:37:32,936 --> 00:37:36,026
And so there's a couple
ways of doing this


793
00:37:36,356 --> 00:37:37,846
and we talked about it before.


794
00:37:38,146 --> 00:37:40,046
You might just have
functionality that's hidden


795
00:37:40,046 --> 00:37:41,846
in your app that
you're about to unlock.


796
00:37:42,306 --> 00:37:44,046
A basic version of
your application.


797
00:37:44,046 --> 00:37:48,096
A free basic version that now is
a pro edition and you just need


798
00:37:48,096 --> 00:37:50,726
to set that state and make
that available to the user.


799
00:37:51,366 --> 00:37:54,616
Or if you have content that's
coming down from the server,


800
00:37:54,876 --> 00:37:56,666
you need to download it.


801
00:37:57,226 --> 00:37:58,636
Whole bunch of different
technologies,


802
00:37:58,636 --> 00:38:00,156
whole bunch of different
ways of doing that.


803
00:38:00,156 --> 00:38:01,766
I want to highlight
a few of them now.


804
00:38:02,556 --> 00:38:05,416
One that's a little newer


805
00:38:05,416 --> 00:38:08,626
that Apple provides is
on-demand resources.


806
00:38:08,996 --> 00:38:11,516
This is a way of
taking your application


807
00:38:11,756 --> 00:38:15,156
and having the initial
download be as small


808
00:38:15,156 --> 00:38:16,486
and compact as possible.


809
00:38:16,486 --> 00:38:17,606
Just the binary.


810
00:38:17,606 --> 00:38:20,956
And if you're going to have
other resources associated


811
00:38:20,956 --> 00:38:23,156
with that application, if
your games have a bunch


812
00:38:23,156 --> 00:38:26,676
of different levels and
they have you know graphics


813
00:38:26,676 --> 00:38:29,556
or videos associated with
them, you can break that up


814
00:38:29,556 --> 00:38:33,066
into different components
within your apps manifest.


815
00:38:33,806 --> 00:38:38,916
On-demand resources is hosted in
the App Store, so you don't have


816
00:38:38,916 --> 00:38:40,086
to worry about hosting.


817
00:38:40,346 --> 00:38:41,846
It's scalable and reliable.


818
00:38:41,846 --> 00:38:44,306
We have caching all
over the world for this.


819
00:38:44,676 --> 00:38:46,986
Your users will be able
to get their content fast.


820
00:38:48,156 --> 00:38:52,756
One thing to keep in mind is
it can contain any type except


821
00:38:52,756 --> 00:38:53,896
executable code.


822
00:38:53,896 --> 00:38:56,806
So all that code has to be
right in your original binary,


823
00:38:56,806 --> 00:39:00,056
but it can contain any other
content you might want to have.


824
00:39:00,146 --> 00:39:05,276
And it's also available
only on iOS and tvOS.


825
00:39:05,276 --> 00:39:08,496
macOS doesn't currently
support on-demand resources.


826
00:39:09,106 --> 00:39:11,366
So that's a technology
you may choose to use


827
00:39:11,366 --> 00:39:14,666
to fetch additional content
after a purchase has been made.


828
00:39:14,666 --> 00:39:16,606
If you're interested in
learning more about it,


829
00:39:16,606 --> 00:39:20,736
I highly suggest you check out
Optimizing On-Demand Resources.


830
00:39:21,106 --> 00:39:26,516
It's in Mission, this
room, Thursday at 10 a.m.


831
00:39:27,266 --> 00:39:30,136
Another technology that Apple
provides is hosted in-app


832
00:39:30,136 --> 00:39:30,976
purchase content.


833
00:39:30,976 --> 00:39:33,486
This is content that
you can associate right


834
00:39:33,486 --> 00:39:37,336
with your in-app purchase, right
in iTunes connect and again,


835
00:39:37,886 --> 00:39:39,656
it's hosted on Apple servers.


836
00:39:40,006 --> 00:39:42,326
So you don't have to worry
about hosting them yourself.


837
00:39:42,606 --> 00:39:44,016
Scalable and reliable.


838
00:39:44,226 --> 00:39:45,676
Around the world caching.


839
00:39:46,076 --> 00:39:50,496
One thing to keep in mind
with this and as with the ODR,


840
00:39:50,496 --> 00:39:53,166
is that this will download
your content in the background.


841
00:39:53,166 --> 00:39:54,836
Your app doesn't
need to be running.


842
00:39:54,836 --> 00:39:58,846
So the user makes a purchase,
and then leaves your app,


843
00:39:58,846 --> 00:40:01,496
launches another app, and you
have to download this content,


844
00:40:01,736 --> 00:40:02,636
that will keep running.


845
00:40:04,186 --> 00:40:07,746
You get up to 2 gigabytes per
in-app purchasable product.


846
00:40:07,746 --> 00:40:09,206
So that's not 2 gigabytes


847
00:40:09,206 --> 00:40:13,696
for your whole application
that's 2 gigabytes per product.


848
00:40:13,696 --> 00:40:17,366
And this is supported
on iOS, tvOS, and macOS.


849
00:40:17,696 --> 00:40:20,986
So, again another great way
of having Apple host content


850
00:40:21,316 --> 00:40:23,176
for your in-app purchases.


851
00:40:24,336 --> 00:40:28,576
Let's take a look at what that
might look like a little bit.


852
00:40:28,576 --> 00:40:32,876
A payment came through,
the user, you validated it


853
00:40:32,876 --> 00:40:34,466
and you're ready to
download content.


854
00:40:34,736 --> 00:40:37,446
You're going to be in the
updated transactions call back


855
00:40:37,446 --> 00:40:38,756
of your payment observer.


856
00:40:38,756 --> 00:40:41,636
And you're going to go down
a little bit and you're going


857
00:40:41,636 --> 00:40:43,616
to look at your transactions and
you're going to notice that one


858
00:40:43,616 --> 00:40:46,876
of those transactions
contains one or more downloads.


859
00:40:47,106 --> 00:40:49,776
And all you've got to do is
pass that download right back


860
00:40:49,776 --> 00:40:52,746
into the Payment Queue and that
will kick off the download.


861
00:40:53,206 --> 00:40:56,356
If your application
is interested


862
00:40:56,356 --> 00:40:59,386
in using hosted in-app
purchases, you're going to want


863
00:40:59,386 --> 00:41:03,666
to have a Payment Queue updated
downloads method inside your


864
00:41:03,786 --> 00:41:04,886
Payment Queue Observer.


865
00:41:05,396 --> 00:41:10,216
And this will give you all this
information about the downloads


866
00:41:10,216 --> 00:41:13,776
as they come in, including
things like progress will call


867
00:41:13,776 --> 00:41:15,996
in and let you know
progress and you'll be able


868
00:41:15,996 --> 00:41:17,416
to use this to update UI.


869
00:41:17,416 --> 00:41:19,336
Or time remaining.


870
00:41:19,716 --> 00:41:22,336
Or if an error occurs and
you have to react to that,


871
00:41:22,806 --> 00:41:24,026
that information will be there.


872
00:41:24,376 --> 00:41:27,986
And then once the download is
finished a URL will be provided,


873
00:41:28,166 --> 00:41:31,826
again that's a local path URL,
where it is on the file system,


874
00:41:32,106 --> 00:41:33,486
so you can grab it and interact


875
00:41:33,486 --> 00:41:35,006
with your content
right then and there.


876
00:41:35,566 --> 00:41:39,126
So that's how hosted
in-app purchases work.


877
00:41:39,826 --> 00:41:43,716
But you may also want to
self-host this content,


878
00:41:44,056 --> 00:41:45,566
perfectly valid thing to do.


879
00:41:45,786 --> 00:41:48,216
If you have a catalog
that changes over time,


880
00:41:48,216 --> 00:41:50,836
of if you have different things
you don't necessarily want


881
00:41:50,836 --> 00:41:52,706
to have Apple host,
perfectly valid


882
00:41:52,706 --> 00:41:54,016
to do self-hosting content.


883
00:41:54,476 --> 00:41:57,926
One thing to keep in mind is
there are background download


884
00:41:57,926 --> 00:42:01,116
APIs that you should
be using NSURL Session.


885
00:42:01,216 --> 00:42:02,906
It's the way to host
this content.


886
00:42:03,616 --> 00:42:07,236
Content is downloaded even
when your app is not active.


887
00:42:07,236 --> 00:42:09,386
If you're still using
NSURLConnection


888
00:42:09,836 --> 00:42:10,776
that's deprecated.


889
00:42:11,066 --> 00:42:13,226
And that's not going to be
as great of an experience


890
00:42:13,226 --> 00:42:15,356
for the user as NSURL Session.


891
00:42:15,726 --> 00:42:20,496
So it's very important
that you use these APIs.


892
00:42:21,426 --> 00:42:23,306
This is how it looks in Swift.


893
00:42:23,866 --> 00:42:26,626
You're going to create
a session configuration.


894
00:42:27,036 --> 00:42:30,946
This is a configuration you
want to name is something unique


895
00:42:30,946 --> 00:42:34,076
to your application for what
that session is all about.


896
00:42:34,596 --> 00:42:37,026
You're going to create
your session.


897
00:42:37,266 --> 00:42:39,496
You're going to pass that
configuration in, you're going


898
00:42:39,496 --> 00:42:43,156
to pass in a delegate, this
will be whatever object you want


899
00:42:43,156 --> 00:42:45,486
to get information back
about those downloads.


900
00:42:45,726 --> 00:42:46,936
And you're going
to give the queue,


901
00:42:47,256 --> 00:42:49,736
this operation queue is
actually what's going


902
00:42:49,736 --> 00:42:51,216
to call into your delegate.


903
00:42:51,456 --> 00:42:53,516
What thread or what
operation queue is going


904
00:42:53,516 --> 00:42:54,746
to call into your delegate.


905
00:42:54,826 --> 00:42:57,706
So you're going to want to make
sure you create a dedicated


906
00:42:57,956 --> 00:43:01,436
operation queue for that.


907
00:43:01,436 --> 00:43:04,526
And then to kick off the
downloads, you create a task


908
00:43:04,526 --> 00:43:07,286
and you hand in the
request and URL associated


909
00:43:07,286 --> 00:43:08,606
with you in-app purchase.


910
00:43:08,976 --> 00:43:09,996
And you call resume.


911
00:43:10,416 --> 00:43:11,236
That will kick off


912
00:43:11,236 --> 00:43:15,296
in the background your
self-hosted in-app


913
00:43:15,296 --> 00:43:16,226
purchase download.


914
00:43:16,926 --> 00:43:19,816
As the download is occurring
your delegate is going


915
00:43:19,816 --> 00:43:21,476
to get information,
it's going to get called


916
00:43:21,476 --> 00:43:24,796
into URL session didWriteData.


917
00:43:24,896 --> 00:43:27,836
And that will give
you the ability,


918
00:43:28,046 --> 00:43:29,646
you can take this
information coming in


919
00:43:29,646 --> 00:43:31,166
and it will give you the
ability to update UI.


920
00:43:31,166 --> 00:43:34,246
You might have a progress bar,
or something that you want


921
00:43:34,246 --> 00:43:39,336
to tell the user about how
your downloads are going.


922
00:43:39,846 --> 00:43:41,186
But it's also important
to keep in mind


923
00:43:41,186 --> 00:43:44,646
that your application
may be exited during the


924
00:43:44,646 --> 00:43:46,196
downloading process.


925
00:43:46,326 --> 00:43:48,806
And so when your
application is re-launched,


926
00:43:49,396 --> 00:43:51,076
you want to actually reattach


927
00:43:51,076 --> 00:43:53,356
to those background
download sessions.


928
00:43:53,826 --> 00:43:56,616
And so in your application
delegate, you're going to want


929
00:43:56,616 --> 00:44:00,226
to implement handle events
for background URL session.


930
00:44:00,766 --> 00:44:03,516
This will allow the
operating system to wake


931
00:44:03,516 --> 00:44:05,456
up your application and tell it


932
00:44:05,456 --> 00:44:09,436
about hey this background
download just completed,


933
00:44:09,436 --> 00:44:12,176
or is in progress, or
something's going on with that.


934
00:44:12,606 --> 00:44:15,386
So handle events for
background URL session.


935
00:44:15,556 --> 00:44:18,776
It will pass in the identifier
for that configuration


936
00:44:18,776 --> 00:44:19,766
that you used earlier.


937
00:44:20,276 --> 00:44:21,156
You just recreate


938
00:44:21,156 --> 00:44:23,136
that configuration
with that identifier.


939
00:44:23,676 --> 00:44:26,576
Re-create a session
that will re-attach


940
00:44:26,576 --> 00:44:28,026
to that background session.


941
00:44:28,026 --> 00:44:31,316
And then what you want to do
is there's a completion handle


942
00:44:31,316 --> 00:44:35,236
that's passed into that app
delegate method and you're going


943
00:44:35,366 --> 00:44:39,626
to need to call that completion
handler once you're done doing


944
00:44:39,626 --> 00:44:41,566
whatever you need to
do with that download.


945
00:44:41,566 --> 00:44:43,896
So if the download's complete
and you need to move it


946
00:44:43,896 --> 00:44:46,396
into your container, and
unpack it, and do work,


947
00:44:46,796 --> 00:44:49,006
you need to call that completion
handler once you've done


948
00:44:49,006 --> 00:44:51,006
everything with it
and let the OS know


949
00:44:51,006 --> 00:44:55,586
that you're done doing
what you need to do.


950
00:44:55,876 --> 00:44:57,806
So that's making
assets available,


951
00:44:58,376 --> 00:44:59,776
but you're not quite done yet.


952
00:44:59,776 --> 00:45:01,406
Even though you've
made all this available


953
00:45:01,406 --> 00:45:02,936
and the user has
what they bought,


954
00:45:03,336 --> 00:45:06,696
you've got to do one more thing
and you've got to tell StoreKit


955
00:45:06,926 --> 00:45:08,936
that hey you're done
with the transaction.


956
00:45:09,046 --> 00:45:12,856
This is important because
we keep that transaction


957
00:45:12,856 --> 00:45:15,876
in our purchasing queue, we
keep that in our state machine


958
00:45:16,236 --> 00:45:18,816
and if your application
dies and gets relaunched


959
00:45:18,816 --> 00:45:21,546
or if the user leaves and comes
back, the Payment Queue is going


960
00:45:21,546 --> 00:45:22,686
to keep telling you about it.


961
00:45:22,986 --> 00:45:24,646
It actually might
continue to do it


962
00:45:24,646 --> 00:45:27,526
on your behalf background
API calls, so that's going


963
00:45:27,526 --> 00:45:29,146
to use up user's data.


964
00:45:29,396 --> 00:45:31,536
So it's important to keep
things clean and finish


965
00:45:31,536 --> 00:45:33,076
up the transaction
when you're done.


966
00:45:33,976 --> 00:45:35,806
But you should also
make sure that you do it


967
00:45:35,806 --> 00:45:37,926
when the content is
finished downloading.


968
00:45:38,316 --> 00:45:41,546
If you finish the transaction
and then kickoff the download,


969
00:45:41,586 --> 00:45:43,156
we're not going to tell you


970
00:45:43,156 --> 00:45:44,686
about that transaction
ever again.


971
00:45:44,686 --> 00:45:47,726
So if the download fails,
or if something goes wrong,


972
00:45:48,126 --> 00:45:49,536
you're not going to
get updates on it.


973
00:45:49,656 --> 00:45:52,256
So you want to make sure
that the download is complete


974
00:45:52,326 --> 00:45:54,666
and then call finish
transaction.


975
00:45:55,516 --> 00:45:57,876
So, again, the payment will stay


976
00:45:57,876 --> 00:45:59,306
in the queue until
you finish it.


977
00:45:59,306 --> 00:46:02,496
And if you're downloading hosted
content, another thing to keep


978
00:46:02,496 --> 00:46:04,796
in mind is yes you need
to finish downloading it


979
00:46:05,076 --> 00:46:06,936
and if you finish the
transaction before the


980
00:46:06,936 --> 00:46:09,196
download's complete we
will stop downloading.


981
00:46:09,716 --> 00:46:14,546
And this can be done simply
by calling SKPayment Queue,


982
00:46:14,596 --> 00:46:18,046
Finish Transaction and passing
in that transaction right


983
00:46:18,046 --> 00:46:18,956
into the Payment Queue.


984
00:46:21,306 --> 00:46:24,976
So, the user has
been using your app,


985
00:46:24,976 --> 00:46:26,676
they've been buying
in-app purchases,


986
00:46:26,676 --> 00:46:29,226
they love your content,
and they decide,


987
00:46:29,726 --> 00:46:31,096
you know what I'm
running out of space,


988
00:46:31,096 --> 00:46:33,996
I'm going to delete the app,
maybe I'll re-download it later.


989
00:46:34,316 --> 00:46:36,126
Or they switch to
a different device.


990
00:46:36,496 --> 00:46:38,726
It's always important that
they can get back those


991
00:46:39,876 --> 00:46:45,406
non-consumable and auto-renewing
in-app purchases right back


992
00:46:45,406 --> 00:46:45,886
into the app.


993
00:46:45,956 --> 00:46:48,076
They need to be able to
restore that content.


994
00:46:48,836 --> 00:46:51,306
So restoring transactions
allow the user


995
00:46:51,306 --> 00:46:56,056
to restores non-consumable and
auto renewing subscriptions.


996
00:46:57,116 --> 00:47:00,446
Consumable and non-renewing
subscriptions,


997
00:47:00,606 --> 00:47:02,526
that's up to you to
manage the state.


998
00:47:02,966 --> 00:47:06,156
So it might be something
that you just save locally,


999
00:47:06,156 --> 00:47:08,886
it might be something that you
store in the Cloud, or you store


1000
00:47:08,886 --> 00:47:10,936
in your own hosted backend.


1001
00:47:11,236 --> 00:47:13,806
That's up to you guys to
manage how exactly you want


1002
00:47:13,806 --> 00:47:16,696
to restore those, but
for non-consumable


1003
00:47:16,696 --> 00:47:20,326
and auto renewing, you can
restore those using the


1004
00:47:20,326 --> 00:47:24,116
restore APIs.


1005
00:47:25,596 --> 00:47:29,236
Again, we offer APIs for
that SKPayment Queue Restore


1006
00:47:29,236 --> 00:47:30,566
Completed Transactions.


1007
00:47:30,876 --> 00:47:35,026
That will pull down a brand
new updated version of the app


1008
00:47:35,446 --> 00:47:37,166
and in-app purchase receipt.


1009
00:47:37,986 --> 00:47:40,286
Again, you're going to
want to observe the queue.


1010
00:47:40,346 --> 00:47:42,006
You added that to
your app delegate,


1011
00:47:42,006 --> 00:47:43,566
so of course you're
observing the queue.


1012
00:47:43,566 --> 00:47:44,616
You're getting information


1013
00:47:44,616 --> 00:47:46,506
about those transactions
as they're coming in.


1014
00:47:46,926 --> 00:47:49,766
Because we're going to call
Payment Queue Restored Completed


1015
00:47:49,766 --> 00:47:50,916
Transactions Finished.


1016
00:47:50,916 --> 00:47:54,106
That's going to tell you all
the restores that occurred


1017
00:47:54,306 --> 00:47:55,836
and you're just going
to want to process those


1018
00:47:55,836 --> 00:47:57,926
as if they were just
purchased by the user.


1019
00:47:58,326 --> 00:48:00,706
Or we're going to give you an
error that something went wrong


1020
00:48:00,706 --> 00:48:03,056
and maybe you need to ask
the user to try it again,


1021
00:48:03,156 --> 00:48:04,856
or update your UI accordingly.


1022
00:48:05,326 --> 00:48:09,196
So again, it's important
to observe the queue.


1023
00:48:09,756 --> 00:48:12,366
Again, once the restore is
completed, you take a look


1024
00:48:12,366 --> 00:48:14,616
at the receipt and
unlock content


1025
00:48:14,616 --> 00:48:15,676
and features accordingly.


1026
00:48:16,876 --> 00:48:19,906
So now we're going to
get into a little bit


1027
00:48:19,906 --> 00:48:22,356
of okay you're built your
app, you're ready to submit it


1028
00:48:22,356 --> 00:48:24,546
to the App Store you
want to make sure


1029
00:48:24,546 --> 00:48:25,896
that you pass app review.


1030
00:48:26,286 --> 00:48:27,786
A couple things to keep in mind.


1031
00:48:28,976 --> 00:48:30,936
We've just been talking
about restoring.


1032
00:48:31,316 --> 00:48:33,516
You really need to have
a restore mechanism.


1033
00:48:33,516 --> 00:48:35,246
It doesn't have to
be a UI button,


1034
00:48:35,246 --> 00:48:38,296
you need to have some mechanism
inside the app to allow the user


1035
00:48:38,296 --> 00:48:41,236
to get their content back, or
else it won't pass app review.


1036
00:48:41,426 --> 00:48:46,426
Again, for non-consumable and
auto renewing subscriptions,


1037
00:48:46,526 --> 00:48:47,966
you're not going
to get other types


1038
00:48:47,966 --> 00:48:49,986
of in-app purchases
back on restores.


1039
00:48:51,686 --> 00:48:56,246
One thing to keep in mind though
is we want to keep this separate


1040
00:48:56,246 --> 00:48:57,606
from purchases itself.


1041
00:48:57,806 --> 00:48:59,116
Restores are free.


1042
00:48:59,366 --> 00:49:02,746
The user shouldn't get confused
that if they do a restore


1043
00:49:02,746 --> 00:49:05,126
and they're getting a password
prompt from the App Store


1044
00:49:05,126 --> 00:49:06,606
that it's going to
cost them anything.


1045
00:49:06,606 --> 00:49:09,286
This has got to be very
obvious inside your application


1046
00:49:09,526 --> 00:49:12,636
that this restore operation
they're doing is not a purchase,


1047
00:49:12,636 --> 00:49:14,166
it's completely separate
from that.


1048
00:49:14,366 --> 00:49:17,226
So it's one thing you want to
make sure your UI reflects.


1049
00:49:18,976 --> 00:49:22,506
Some other information
you want to keep in mind


1050
00:49:22,506 --> 00:49:26,126
for auto renewable subscriptions
are about policies,


1051
00:49:26,386 --> 00:49:30,006
keeping the information
in marketing text.


1052
00:49:31,356 --> 00:49:34,996
And making sure that once
they've subscribed that they get


1053
00:49:34,996 --> 00:49:37,146
that content right then and
there, that they don't have


1054
00:49:37,196 --> 00:49:40,986
to wait until the next period
begins for anything to appear.


1055
00:49:40,986 --> 00:49:43,646
If you subscribe you should get
some information right away.


1056
00:49:44,206 --> 00:49:45,486
And you should get
the information


1057
00:49:45,486 --> 00:49:48,356
that you should only be able
to get through a subscription,


1058
00:49:48,596 --> 00:49:53,616
not bundled products or content
that they would have been able


1059
00:49:53,616 --> 00:49:54,706
to get free elsewhere.


1060
00:49:54,706 --> 00:49:57,176
So, these are some of
the kind of policies.


1061
00:49:57,176 --> 00:49:59,106
I highly recommend
that you check


1062
00:49:59,106 --> 00:50:00,966
out the App Review
Policy Guidelines.


1063
00:50:01,586 --> 00:50:04,316
I've heard there's even a
comic book version of that now,


1064
00:50:04,316 --> 00:50:07,196
so I would highly recommend
you learn all about these,


1065
00:50:07,446 --> 00:50:09,626
because they're changing all the
time and you really should keep


1066
00:50:09,626 --> 00:50:11,286
up to date with what's
going on with that.


1067
00:50:11,966 --> 00:50:14,526
And with non-renewing
subscriptions there's some other


1068
00:50:14,526 --> 00:50:17,596
policies you want to keep
in mind, about privacy


1069
00:50:17,596 --> 00:50:20,226
and making sure that he user
has the ability to opt in


1070
00:50:20,516 --> 00:50:22,546
or opt out accordingly.


1071
00:50:24,326 --> 00:50:26,756
And then finally the
most important thing


1072
00:50:26,756 --> 00:50:28,196
to pass app review is


1073
00:50:28,196 --> 00:50:31,996
if you have purchases inside
your app they should work.


1074
00:50:32,136 --> 00:50:34,446
You make the purchase,
the content should appear.


1075
00:50:34,686 --> 00:50:36,506
They should get that
information, they should get


1076
00:50:36,506 --> 00:50:37,966
that content right
then and there.


1077
00:50:37,966 --> 00:50:40,316
If it's buggy or if
it's error prone,


1078
00:50:40,586 --> 00:50:42,166
or if there's something going


1079
00:50:42,166 --> 00:50:47,006
on when the reviewer you
know is reviewing it inside


1080
00:50:47,206 --> 00:50:51,066
that app review environment,
you're going to have issues


1081
00:50:51,066 --> 00:50:52,376
with app review right
then and there.


1082
00:50:52,376 --> 00:50:53,166
So test it.


1083
00:50:53,486 --> 00:50:55,896
Test it in Sandbox, make
sure everything works


1084
00:50:55,896 --> 00:50:56,756
as you want it to.


1085
00:50:57,436 --> 00:51:02,146
So just to summarize a little
bit of what we went over today.


1086
00:51:03,346 --> 00:51:05,396
Always observe the
Payment Queue.


1087
00:51:05,396 --> 00:51:06,696
I can't stress this enough.


1088
00:51:06,996 --> 00:51:09,596
If you're interacting with
in-app purchases in your app,


1089
00:51:09,716 --> 00:51:13,686
one of the first things your app
should do is set a Payment Queue


1090
00:51:13,686 --> 00:51:15,446
observer to get information


1091
00:51:15,446 --> 00:51:18,806
about what's going
on with the payments.


1092
00:51:18,936 --> 00:51:21,496
You need to fetch
localized product information


1093
00:51:21,496 --> 00:51:22,406
from the App Store.


1094
00:51:22,556 --> 00:51:25,046
This is through an
SKProduct request.


1095
00:51:25,356 --> 00:51:27,906
That will return
localized information.


1096
00:51:27,906 --> 00:51:31,756
So the information for the
users in their country related


1097
00:51:31,756 --> 00:51:34,566
to billing that's associated
with their App Store account.


1098
00:51:36,536 --> 00:51:39,276
And again use the
product's price locale.


1099
00:51:39,636 --> 00:51:43,656
There's the SKProduct that comes
back, has a locale associated


1100
00:51:43,656 --> 00:51:47,096
with that, you need to use
that for displaying the pricing


1101
00:51:47,096 --> 00:51:48,326
and currency information.


1102
00:51:50,476 --> 00:51:52,476
Use the receipt to
validate your purchases.


1103
00:51:52,476 --> 00:51:55,126
Again, they're your purchases,
this is your business.


1104
00:51:55,306 --> 00:51:57,256
You need to make
decisions about how best


1105
00:51:57,256 --> 00:51:59,416
to validate the receipt,
whether you do it locally


1106
00:51:59,416 --> 00:52:01,196
or on the server.


1107
00:52:01,196 --> 00:52:03,436
What technologies that back it.


1108
00:52:03,436 --> 00:52:06,726
Be aware exactly what the
pros and cons of each are


1109
00:52:07,026 --> 00:52:08,526
and make your decisions
with that.


1110
00:52:09,776 --> 00:52:11,636
And finally make the
content available.


1111
00:52:11,756 --> 00:52:15,826
You can just unlock it in your
app right there on the device,


1112
00:52:16,146 --> 00:52:19,976
or you can make a hosted request
from the App Store itself,


1113
00:52:20,256 --> 00:52:24,346
or you can make a request to
your backend hosting APIs.


1114
00:52:24,656 --> 00:52:25,926
Make that content available.


1115
00:52:25,926 --> 00:52:28,246
But do it in a reliable
and quick way.


1116
00:52:28,466 --> 00:52:29,686
If you're hosting it yourself,


1117
00:52:29,686 --> 00:52:31,986
make sure your servers
are scalable


1118
00:52:32,446 --> 00:52:37,316
and you know cache appropriately
and are, you know, really ready


1119
00:52:37,316 --> 00:52:39,826
for users making
great use of your app.


1120
00:52:41,296 --> 00:52:43,876
And then finally, always
finish the transaction.


1121
00:52:43,876 --> 00:52:45,746
The last thing you
need to do is make sure


1122
00:52:45,746 --> 00:52:48,196
that that transaction is no
longer in the Payment Queue


1123
00:52:48,476 --> 00:52:51,346
or else your observer is going
to continually be notified


1124
00:52:51,346 --> 00:52:53,676
about it when your
app starts up.


1125
00:52:53,676 --> 00:52:59,106
And that will incur weird you
know possibly the user might


1126
00:52:59,106 --> 00:53:01,586
have to authenticate
at certain times,


1127
00:53:01,586 --> 00:53:05,936
or there might be backend APIs
that are occurring on behalf


1128
00:53:05,936 --> 00:53:08,156
of your app, using
up data for the user


1129
00:53:08,156 --> 00:53:10,046
if you don't finish
that transaction.


1130
00:53:10,656 --> 00:53:12,126
So always do that.


1131
00:53:13,336 --> 00:53:18,976
And then, allow users to
restore completed transactions.


1132
00:53:18,976 --> 00:53:21,346
You need to have a restore
mechanism inside your app,


1133
00:53:21,346 --> 00:53:25,126
if you have non-consumable or
auto renewing subscriptions.


1134
00:53:25,336 --> 00:53:26,226
This will allow the user


1135
00:53:26,226 --> 00:53:28,266
to get back what they've
already purchased.


1136
00:53:30,376 --> 00:53:34,616
More information will be online
at the developer website.


1137
00:53:34,616 --> 00:53:36,546
I highly recommend you go back


1138
00:53:36,546 --> 00:53:39,356
and take a look at
that later on.


1139
00:53:39,356 --> 00:53:41,716
And then a couple related
sessions we mentioned today,


1140
00:53:41,716 --> 00:53:43,606
if you're using subscriptions
in your app,


1141
00:53:43,606 --> 00:53:45,546
you should definitely check


1142
00:53:45,546 --> 00:53:47,446
out Introducing Expanded
Subscriptions


1143
00:53:47,446 --> 00:53:49,006
in iTunes Connect later today.


1144
00:53:49,546 --> 00:53:51,856
Or if you're interested in
on-demand resources check


1145
00:53:51,896 --> 00:53:53,766
that out Thursday morning.


1146
00:53:53,766 --> 00:53:55,066
And that's it.


1147
00:53:55,646 --> 00:53:56,676
Thanks a lot.


1148
00:53:57,508 --> 00:53:59,508
[ Applause ]

