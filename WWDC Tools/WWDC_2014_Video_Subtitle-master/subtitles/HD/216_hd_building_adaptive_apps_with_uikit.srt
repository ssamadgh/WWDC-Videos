1
00:00:00,506 --> 00:00:11,706
[ Silence ]


2
00:00:12,206 --> 00:00:13,016
>> Hi there.


3
00:00:13,666 --> 00:00:16,696
My name's Jacob Xiao and
I'm really excited to talk


4
00:00:16,696 --> 00:00:19,016
to you today about
Building Adaptive Apps.


5
00:00:20,256 --> 00:00:21,456
Before we get started though,


6
00:00:21,456 --> 00:00:24,256
I want to tell you what
we mean by "adaptive".


7
00:00:25,866 --> 00:00:27,966
So first, let's go back.


8
00:00:28,296 --> 00:00:30,326
In the beginning,
there was the iPhone.


9
00:00:31,206 --> 00:00:34,296
One device, one screen,
it was pretty simple


10
00:00:34,296 --> 00:00:35,486
to build applications for.


11
00:00:36,566 --> 00:00:38,436
But then when you
consider rotation,


12
00:00:39,056 --> 00:00:41,646
now you have this portrait
and landscape orientations,


13
00:00:42,536 --> 00:00:46,686
and then after that, we
introduced the iPad as well


14
00:00:46,686 --> 00:00:49,846
as the iPhone 5 with
its four-inch display,


15
00:00:49,906 --> 00:00:52,706
and now you have all
these different devices


16
00:00:52,856 --> 00:00:54,306
and all these different
screen sizes,


17
00:00:54,696 --> 00:00:58,686
and it can seem intimidating
to design apps for.


18
00:00:58,856 --> 00:01:01,846
Well, in iOS 8 we want
to make it simple for you


19
00:01:02,306 --> 00:01:06,796
to build one application that's
both universal and is able


20
00:01:06,796 --> 00:01:09,646
to adapt to all of
these different devices,


21
00:01:09,926 --> 00:01:11,746
screen sizes, and orientations.


22
00:01:12,466 --> 00:01:16,956
So today, I'd like to tell
you about some new concepts


23
00:01:16,956 --> 00:01:19,716
that we've added for
adaptivity inside of UIKit,


24
00:01:20,666 --> 00:01:23,356
and then we'll take a look at
some of the changes we've made


25
00:01:23,356 --> 00:01:26,086
to both view controllers
and interface builder


26
00:01:26,376 --> 00:01:28,256
to support this new
adaptive world.


27
00:01:28,546 --> 00:01:33,226
All right, to start off, let's
take a look at size classes,


28
00:01:33,746 --> 00:01:37,266
a new concept that we've
introduced in the iOS 8.


29
00:01:38,256 --> 00:01:41,626
In the past you've used
UIInterfaceOrientation


30
00:01:41,626 --> 00:01:45,536
and UIUser InterfaceIdiom to
differentiate between portrait


31
00:01:45,536 --> 00:01:49,486
and landscape and iPhone
and iPad, but in iOS 8,


32
00:01:50,076 --> 00:01:52,776
we're recommending against
using these two concepts,


33
00:01:53,616 --> 00:01:56,436
and instead we're
advocating this new concept


34
00:01:56,436 --> 00:01:59,546
that we call size classes.


35
00:01:59,546 --> 00:02:01,826
So, let me show you a little
bit about what me mean


36
00:02:02,126 --> 00:02:06,806
by these differences that are
represented by size class.


37
00:02:06,806 --> 00:02:09,795
If you think about a typical
iPad application and the screens


38
00:02:09,795 --> 00:02:11,876
that it shows, you'll
see features


39
00:02:11,876 --> 00:02:15,716
like Split View Controllers,
Form Sheets, and Popovers.


40
00:02:17,336 --> 00:02:19,656
But really, none of these
features are specific


41
00:02:19,706 --> 00:02:24,276
to the iPad itself, we're just
using these in this iPad version


42
00:02:24,276 --> 00:02:27,466
of the application because
we have this large horizontal


43
00:02:27,466 --> 00:02:29,126
canvas to display within.


44
00:02:30,436 --> 00:02:31,476
Now on the other hand,


45
00:02:31,726 --> 00:02:33,546
if you look at a typical
iPhone application,


46
00:02:33,546 --> 00:02:35,686
you have a much more
constrained layout


47
00:02:36,196 --> 00:02:38,156
where things are usually
presented fullscreen


48
00:02:38,306 --> 00:02:40,106
and shown in a single column.


49
00:02:40,706 --> 00:02:43,436
However this is also not
intrinsically tied to the fact


50
00:02:43,436 --> 00:02:46,416
that it's an iPhone, but
it's just tied to the fact


51
00:02:46,416 --> 00:02:49,566
that we have this smaller
horizontal canvas size.


52
00:02:49,726 --> 00:02:53,976
And you'll see the same kind
of thing in the master side


53
00:02:53,976 --> 00:02:55,136
of a Split View Controller,


54
00:02:55,816 --> 00:02:58,816
and even in the content
of a Popover.


55
00:02:59,146 --> 00:03:00,546
And both of these are on iPad.


56
00:03:02,116 --> 00:03:05,286
So, we call this difference
"regular" and "compact",


57
00:03:06,196 --> 00:03:10,816
and we call this axis the
horizontal size class.


58
00:03:12,436 --> 00:03:14,876
Now, if we consider the
same kinds of distinctions


59
00:03:14,936 --> 00:03:18,046
in the vertical direction,
you can see that on things


60
00:03:18,046 --> 00:03:20,176
like an iPad or an iPhone,


61
00:03:20,676 --> 00:03:22,816
we have these taller
full-size bars,


62
00:03:23,656 --> 00:03:26,186
whereas in a more
constrained vertical situation


63
00:03:26,546 --> 00:03:30,056
like an iPhone in landscape,
we have both condensed bars,


64
00:03:30,056 --> 00:03:33,536
and now in iOS 8, we even hide
the status bar completely.


65
00:03:34,866 --> 00:03:39,046
And we call these also regular
and compact, but this time


66
00:03:39,346 --> 00:03:42,516
in the vertical size class.


67
00:03:42,696 --> 00:03:45,516
Now, you can think of these two
size classes in a similar way


68
00:03:45,516 --> 00:03:46,606
to the way size works.


69
00:03:47,236 --> 00:03:49,346
Just like a size
has a horizontal


70
00:03:49,346 --> 00:03:52,116
and vertical dimension,
so does a size class.


71
00:03:53,766 --> 00:03:56,856
So if you put these two
concepts together, you get a two


72
00:03:56,856 --> 00:04:01,136
by two grid that defines any
of the possibilities of regular


73
00:04:01,136 --> 00:04:03,806
and compact in both
the horizontal


74
00:04:03,806 --> 00:04:04,916
and vertical directions.


75
00:04:05,876 --> 00:04:07,666
And you can have a View
Controller with any


76
00:04:07,666 --> 00:04:10,146
of these four possibilities,
which results


77
00:04:10,146 --> 00:04:13,576
in different layouts
like you'd see here.


78
00:04:13,796 --> 00:04:15,766
In addition to View
Controllers having any


79
00:04:15,916 --> 00:04:17,486
of these size class
combinations,


80
00:04:17,886 --> 00:04:22,206
our devices also have default
size classes that they'll use.


81
00:04:22,896 --> 00:04:25,256
An iPad, in both
landscape and portrait,


82
00:04:25,676 --> 00:04:28,476
will have a regular size
class in both the horizontal


83
00:04:28,476 --> 00:04:29,436
and vertical direction.


84
00:04:30,376 --> 00:04:32,386
An iPhone, when in portrait,


85
00:04:33,256 --> 00:04:36,566
will have a compact
horizontal size class


86
00:04:36,986 --> 00:04:39,916
and a regular vertical
size class, and when it's


87
00:04:39,916 --> 00:04:43,106
in landscape it will be
compact in both the vertical


88
00:04:43,106 --> 00:04:44,846
and horizontal size classes.


89
00:04:44,956 --> 00:04:48,546
So this is all a
little theoretical.


90
00:04:48,546 --> 00:04:50,466
Let's take a look at
a sample application


91
00:04:50,466 --> 00:04:51,766
to see how this works
in practice.


92
00:04:52,756 --> 00:04:54,536
All right, so the sample code


93
00:04:54,596 --> 00:04:56,816
that I'll be showing
you today is available


94
00:04:56,996 --> 00:04:58,706
on the WWDC website.


95
00:04:59,196 --> 00:05:01,546
Just go to the Sample
Code section and search


96
00:05:01,546 --> 00:05:04,626
for Adaptive Photos, the
name of our sample app.


97
00:05:05,146 --> 00:05:07,206
It's a basic photo
sharing application,


98
00:05:07,206 --> 00:05:09,696
and this is what it
looks like on iPhone.


99
00:05:10,506 --> 00:05:14,166
You can see our list of our
contacts, and I can tap on any


100
00:05:14,166 --> 00:05:16,856
of these to see the photos
that they've sent to me.


101
00:05:17,556 --> 00:05:21,976
If someone who's only sent me a
single photo, I'll go directly


102
00:05:22,056 --> 00:05:25,136
to that image, and if they've
sent me multiple photos,


103
00:05:25,386 --> 00:05:27,626
I can see a list of the
photos that they've sent me,


104
00:05:28,676 --> 00:05:30,786
and then view individual ones.


105
00:05:33,456 --> 00:05:36,196
Now, on the Photo page,
you'll notice that in addition


106
00:05:36,196 --> 00:05:39,256
to the picture, we're also
showing a comment overlay


107
00:05:40,016 --> 00:05:42,336
and a rating control that
lets me rate the photos


108
00:05:42,336 --> 00:05:44,506
that they've sent me.


109
00:05:44,716 --> 00:05:48,506
All right, now when I rotate
this application to landscape,


110
00:05:49,716 --> 00:05:51,416
notice that our bars
become condensed


111
00:05:52,086 --> 00:05:55,106
and the status bar
disappears entirely.


112
00:05:56,816 --> 00:06:00,396
This all happens automatically,
but in our application,


113
00:06:00,396 --> 00:06:01,956
we've done a few
more customizations.


114
00:06:02,676 --> 00:06:04,956
Inside of a photo
view, when I rotate,


115
00:06:06,586 --> 00:06:09,416
the Comments will
have smaller margins,


116
00:06:10,056 --> 00:06:12,716
and the Rating Control will
shrink down to a smaller size.


117
00:06:12,856 --> 00:06:19,116
Now, our application
is of course universal,


118
00:06:19,986 --> 00:06:27,906
so let me run it inside
of the iPad simulator.


119
00:06:27,906 --> 00:06:30,446
Here, you'll notice that I have
all of the same functionality,


120
00:06:31,256 --> 00:06:36,646
and all of the same controls
inside of my Photo View,


121
00:06:37,256 --> 00:06:40,096
but watch when I
rotate to landscape.


122
00:06:41,086 --> 00:06:43,446
All of the bars still
have their full height,


123
00:06:43,636 --> 00:06:46,146
and none of my controls
here have shrunk down.


124
00:06:46,626 --> 00:06:48,426
And this is because we
still have this large,


125
00:06:48,466 --> 00:06:51,826
vertical real estate, and in
our application we're using the


126
00:06:51,826 --> 00:06:54,956
vertical size class instead
of the interface orientation,


127
00:06:55,476 --> 00:07:01,286
so we get the right behavior
on both iPhone and iPad.


128
00:07:01,476 --> 00:07:03,046
Now, one of the new
features we've added


129
00:07:03,046 --> 00:07:05,206
in iOS 8 is a resizable
simulator.


130
00:07:06,096 --> 00:07:07,336
So if you notice
here at the bottom,


131
00:07:07,336 --> 00:07:16,836
I can type in new
dimensions and you'll see


132
00:07:16,836 --> 00:07:20,456
that my application has resized,
and everything still looks great


133
00:07:20,626 --> 00:07:23,936
because we're using Auto Layout
and standard system components.


134
00:07:24,576 --> 00:07:26,516
But in addition to
just changing the size,


135
00:07:26,656 --> 00:07:31,966
I can also change the
size class and now,


136
00:07:33,306 --> 00:07:35,786
you'll see that we're
showing the iPhone version


137
00:07:35,786 --> 00:07:37,946
of our application
even on the iPad just


138
00:07:37,946 --> 00:07:38,976
by changing the size class.


139
00:07:45,256 --> 00:07:47,676
So, I highly recommend that
you test out your application


140
00:07:48,186 --> 00:07:54,486
with the new resizable
simulator in iOS 8.


141
00:07:54,756 --> 00:07:57,216
All right, so now that you
know how size classes work


142
00:07:57,216 --> 00:07:59,166
in general, how do
you actually get one


143
00:07:59,166 --> 00:08:00,836
of these size classes
in your application?


144
00:08:01,816 --> 00:08:04,546
Well, to do that, you use a
new system we call Traits.


145
00:08:06,186 --> 00:08:09,116
Traits are essentially
properties that you can use


146
00:08:09,116 --> 00:08:12,556
to determine how the layout of
your application should change


147
00:08:12,826 --> 00:08:14,096
as its environment changes.


148
00:08:14,786 --> 00:08:18,296
They consist of a
set of properties,


149
00:08:19,076 --> 00:08:21,266
including the horizontal
and vertical size classes


150
00:08:21,296 --> 00:08:24,526
that we just talked about, as
well as the userInterfaceIdiom


151
00:08:24,896 --> 00:08:26,246
and also the displayScale.


152
00:08:27,806 --> 00:08:30,686
Now, all of these traits are
wrapped up inside a container


153
00:08:30,686 --> 00:08:33,135
that we call a Trait Collection.


154
00:08:34,155 --> 00:08:36,035
This includes the
Trait Properties


155
00:08:36,676 --> 00:08:41,696
and also their values, and
this new object is called a UI


156
00:08:41,696 --> 00:08:42,356
Trait Collection.


157
00:08:42,356 --> 00:08:46,056
To get one of these Trait
Collections you just need


158
00:08:46,056 --> 00:08:47,496
to use a Trait Environment.


159
00:08:48,546 --> 00:08:51,666
Trait Environments are a
new protocol that are able


160
00:08:51,766 --> 00:08:53,716
to return their current
Trait Collection,


161
00:08:54,266 --> 00:08:57,036
and these include
Screens, Windows,


162
00:08:57,906 --> 00:09:00,046
View Controllers,
and also Views.


163
00:09:01,386 --> 00:09:03,946
All of these are able to return
their current Trait Collection


164
00:09:03,946 --> 00:09:07,196
to you to use to determine
how your interface should be


165
00:09:07,196 --> 00:09:07,666
laid out.


166
00:09:09,116 --> 00:09:11,806
One other object that's
also a Trait Environment is


167
00:09:11,806 --> 00:09:13,206
a UIPresentationController.


168
00:09:14,116 --> 00:09:16,146
This is a new helper
object that assists


169
00:09:16,146 --> 00:09:19,526
with View Controller
presentation, and it's also able


170
00:09:19,526 --> 00:09:21,526
to participate in adaptivity.


171
00:09:22,536 --> 00:09:25,346
We don't have time to talk today
about presentation controllers,


172
00:09:25,706 --> 00:09:28,806
but you can come back
tomorrow at 11:30 to the


173
00:09:28,806 --> 00:09:31,756
"A Look Inside Presentation
Controllers" talk to learn more


174
00:09:31,756 --> 00:09:33,736
about how presentation
controllers work,


175
00:09:34,226 --> 00:09:36,936
including how they work
with traits and adaptivity.


176
00:09:37,026 --> 00:09:41,276
Now all of these Trait
Environments make


177
00:09:41,276 --> 00:09:45,866
up a hierarchy, and
the trait collections


178
00:09:45,866 --> 00:09:49,496
that they have will flow
from parent to child.


179
00:09:49,496 --> 00:09:51,446
So by default, the
trait collections


180
00:09:51,446 --> 00:09:54,526
that any given child Trait
Environment has will be the ones


181
00:09:54,526 --> 00:09:56,136
that it's inherited
from its parent,


182
00:09:56,626 --> 00:09:58,436
all the way up to the
screen which makes


183
00:09:58,436 --> 00:09:59,866
up the root Trait Environment.


184
00:10:00,086 --> 00:10:04,606
Now, in addition to getting
the current trait collection


185
00:10:04,606 --> 00:10:06,956
from Trait Environments, they
also have another method,


186
00:10:07,606 --> 00:10:09,786
and that's called
traitCollectionDidChange.


187
00:10:10,516 --> 00:10:12,346
This gets called
whenever the traits


188
00:10:12,436 --> 00:10:14,956
for a given Trait
Environment have just changed,


189
00:10:15,816 --> 00:10:17,986
and you can override this
in your View Controller,


190
00:10:18,066 --> 00:10:21,776
or View Subclass, to know when
you should be changing all


191
00:10:21,776 --> 00:10:24,706
of your UI elements
that depend on traits,


192
00:10:25,966 --> 00:10:28,496
and we'll see an example
of that a little bit later


193
00:10:28,496 --> 00:10:29,626
in our sample application.


194
00:10:29,766 --> 00:10:33,826
Now let's take a look at a
typical trait collection.


195
00:10:34,836 --> 00:10:36,556
This trait collection
is one you might see


196
00:10:36,556 --> 00:10:37,996
on an iPhone in portrait.


197
00:10:38,716 --> 00:10:40,866
We have a compact
horizontal size class,


198
00:10:41,336 --> 00:10:44,366
a regular vertical size
class, the idiom of phone,


199
00:10:44,596 --> 00:10:46,036
and a display scale of two.


200
00:10:47,076 --> 00:10:49,306
We call this a fully
specified trade collection


201
00:10:49,516 --> 00:10:51,736
because it has values for
all of its trait properties.


202
00:10:51,736 --> 00:10:55,916
Now it's also possible to have a
trait collection that's missing


203
00:10:55,966 --> 00:10:58,716
some of its values, and
we call these missing


204
00:10:58,716 --> 00:11:00,486
values Unspecified.


205
00:11:01,336 --> 00:11:03,566
Generally though, when you
ask a Trait Environment


206
00:11:03,566 --> 00:11:04,526
for its trait collection,


207
00:11:04,966 --> 00:11:07,146
you'll get back a fully
specified trait collection


208
00:11:07,396 --> 00:11:08,236
like the one on the left.


209
00:11:09,216 --> 00:11:11,086
However, if a Trait
Environment like a View


210
00:11:11,086 --> 00:11:14,256
or a View Controller is not
inside of the view hierarchy,


211
00:11:14,726 --> 00:11:16,586
you might get back
unspecified values


212
00:11:17,176 --> 00:11:18,856
like the trait collection
on the right.


213
00:11:19,556 --> 00:11:21,866
You'll also get back these
partially specified trait


214
00:11:21,866 --> 00:11:24,996
collections if you create your
own trait collection using one


215
00:11:24,996 --> 00:11:25,986
of our creation methods,


216
00:11:26,376 --> 00:11:28,536
like traitCollectionWith
HorizontalSizeClass,


217
00:11:29,156 --> 00:11:31,086
which would allow you to
create a trait collection just


218
00:11:31,086 --> 00:11:32,686
like the one on the right.


219
00:11:33,716 --> 00:11:36,106
Now, one operation
that we can perform


220
00:11:36,106 --> 00:11:38,756
on multiple trait collections
is comparing them to each other.


221
00:11:39,916 --> 00:11:42,556
And comparing a trait
collection involves asking


222
00:11:42,556 --> 00:11:44,736
if one trait collection
contains another one.


223
00:11:44,816 --> 00:11:48,896
Now, what this means
about containment is


224
00:11:48,896 --> 00:11:51,416
that for any trait
that's specified


225
00:11:51,466 --> 00:11:54,766
in a second trait collection,
the value of that trait


226
00:11:54,766 --> 00:11:56,146
in the first trait
collection has


227
00:11:56,146 --> 00:11:58,226
to have the same-has
to match exactly.


228
00:11:59,006 --> 00:12:02,476
So here, the second trait
collection only has specified a


229
00:12:02,476 --> 00:12:06,096
horizontal size class and those
horizontal size classes are


230
00:12:06,096 --> 00:12:09,076
equal, so we'd say that the
first trait collection contains


231
00:12:09,076 --> 00:12:12,326
the second one, and the way
you can ask this question


232
00:12:12,496 --> 00:12:16,186
of trait collections is by using
the containsTraitsInCollection


233
00:12:16,186 --> 00:12:17,916
method on UITraitCollection.


234
00:12:18,496 --> 00:12:21,486
If we were to change the
horizontal size class


235
00:12:21,486 --> 00:12:23,136
of the second trait
collection to regular,


236
00:12:24,116 --> 00:12:27,086
you can see that now, these two
horizontal size classes don't


237
00:12:27,086 --> 00:12:29,726
match, so the second trait
collection is now longer


238
00:12:29,726 --> 00:12:34,256
contained by the first one.


239
00:12:34,616 --> 00:12:36,746
Now, you can perform
these comparisons yourself


240
00:12:36,896 --> 00:12:38,906
in your own code to
determine how you should lay


241
00:12:38,906 --> 00:12:41,176
out your views or
View Controllers,


242
00:12:41,936 --> 00:12:45,276
but UIkit also uses
this internally for some


243
00:12:45,536 --> 00:12:48,076
of its functionality,
and one example


244
00:12:48,076 --> 00:12:49,956
of that is the Appearance Proxy.


245
00:12:51,076 --> 00:12:54,366
The Appearance Proxy is a system
that we introduced a while ago


246
00:12:54,566 --> 00:12:56,876
for customizing the
properties of your views,


247
00:12:57,556 --> 00:13:01,696
and we've extended it in iOS 8
to support trait collections.


248
00:13:02,666 --> 00:13:05,756
We now have a new method,
appearanceForTraitCollection,


249
00:13:05,756 --> 00:13:08,126
that returns you a
new appearance proxy


250
00:13:08,546 --> 00:13:10,406
with a given trait collection
that you've passed in,


251
00:13:10,476 --> 00:13:13,426
and any customizations
that you perform


252
00:13:13,586 --> 00:13:17,786
on that appearance proxy will
only take effect on views


253
00:13:18,276 --> 00:13:21,336
that are-that conform
to that trait collection


254
00:13:21,336 --> 00:13:22,076
that you've passed in.


255
00:13:22,946 --> 00:13:25,606
So, [applause] I'm
glad you like it.


256
00:13:27,706 --> 00:13:28,676
Generally you pass


257
00:13:28,896 --> 00:13:30,966
in a partially specified
trait collection


258
00:13:31,326 --> 00:13:35,006
like a horizontal size class of
Compact, and then you'd be able


259
00:13:35,006 --> 00:13:37,676
to customize all of your
views when they are inside


260
00:13:37,676 --> 00:13:41,466
of a compact horizontal size
class, and this is really great


261
00:13:41,566 --> 00:13:43,326
for customizing all of
your views together.


262
00:13:43,906 --> 00:13:47,776
Another class that we've
added trait collection support


263
00:13:47,776 --> 00:13:49,066
to is UIImage.


264
00:13:50,036 --> 00:13:53,866
In the past, you'd have a 1X
and 2X version of your UIImages,


265
00:13:54,126 --> 00:13:56,586
and you'd generally put
these in your image catalog.


266
00:13:57,636 --> 00:14:00,456
However, in iOS 8, we've
extended this to allow you


267
00:14:00,536 --> 00:14:02,526
to add multiple versions
of your image


268
00:14:02,726 --> 00:14:03,896
for different trait collections.


269
00:14:04,786 --> 00:14:08,996
So for example, we could have
this smaller image that's used


270
00:14:08,996 --> 00:14:11,116
when we have a vertically
compact size class,


271
00:14:11,186 --> 00:14:15,246
and then the other image
that we use in any other time


272
00:14:15,246 --> 00:14:16,466
for any other trait collections.


273
00:14:17,146 --> 00:14:21,106
Now when you use one of these
images inside of a UIImageView,


274
00:14:21,106 --> 00:14:23,436
the image view will
automatically pull


275
00:14:23,436 --> 00:14:24,886
out the right version
of the image


276
00:14:25,096 --> 00:14:26,276
for its current trait
collection.


277
00:14:27,106 --> 00:14:30,526
So for example, if our image
view has a regular vertical size


278
00:14:30,526 --> 00:14:35,326
class, we'd be using this larger
image, and what's really cool is


279
00:14:35,326 --> 00:14:36,866
when our image view changes


280
00:14:36,986 --> 00:14:39,166
to have a compact
vertical size class,


281
00:14:39,496 --> 00:14:42,016
it will automatically update
the image that it's using


282
00:14:42,216 --> 00:14:43,326
to be the smaller image,


283
00:14:43,576 --> 00:14:46,976
and even change its own
intrinsic content size to shrink


284
00:14:46,976 --> 00:14:49,336
down to exactly match
that image's size.


285
00:14:50,016 --> 00:14:53,926
And this makes it really
easy for you to use images


286
00:14:53,926 --> 00:14:56,176
that have different versions
for different trait collections,


287
00:14:56,426 --> 00:14:58,226
and automatically get
the right behavior


288
00:14:58,546 --> 00:15:00,596
in wherever your
application adapts to.


289
00:15:02,086 --> 00:15:04,106
Now like I said, this
all happens automatically


290
00:15:04,176 --> 00:15:07,396
with UIImageView, but we
also have a new class called


291
00:15:07,396 --> 00:15:09,866
UIImageAsset that gives
you even more control.


292
00:15:09,946 --> 00:15:14,086
An image asset wraps up all
of these different versions


293
00:15:14,086 --> 00:15:16,486
of the image, and
it allows you to ask


294
00:15:16,486 --> 00:15:19,126
for a specific image matching
a given trait collection


295
00:15:19,126 --> 00:15:21,726
that you can pass in,
and you can even add


296
00:15:21,726 --> 00:15:23,546
and remove your own
representations


297
00:15:23,546 --> 00:15:25,926
of an image using other
methods on image assets,


298
00:15:26,526 --> 00:15:29,696
so check out the UIImageAsset
header file to see all


299
00:15:29,696 --> 00:15:31,406
of the details of
how this works.


300
00:15:31,406 --> 00:15:35,066
Now, one last thing
that we can do


301
00:15:35,066 --> 00:15:36,976
with trait collections
is add them together.


302
00:15:36,976 --> 00:15:40,186
When we add one trait
collection to a second,


303
00:15:40,756 --> 00:15:44,226
we get a combined trait
collection, and we can do


304
00:15:44,226 --> 00:15:46,736
that with the traitCollection
WithTraitsFromCollections


305
00:15:46,736 --> 00:15:47,066
method.


306
00:15:48,436 --> 00:15:51,746
Any time that one of the
traits is unspecified,


307
00:15:52,056 --> 00:15:54,316
except for in one of the trait
collections that we're adding,


308
00:15:54,736 --> 00:15:56,286
we'll get only the
specified trait


309
00:15:56,456 --> 00:15:57,796
in the final trait collection.


310
00:15:58,676 --> 00:16:01,966
However, if there are multiple
versions, multiple values


311
00:16:01,966 --> 00:16:03,566
for the trait that are
being added together,


312
00:16:04,056 --> 00:16:06,776
then the last trait collection
will be the one that wins.


313
00:16:07,556 --> 00:16:09,756
So here, we're adding
Compact to Regular


314
00:16:09,756 --> 00:16:11,696
for the horizontal size class,


315
00:16:11,696 --> 00:16:14,346
so our resulting trait
collection will also have a


316
00:16:14,346 --> 00:16:17,276
regular horizontal size
class, and we'll see


317
00:16:17,276 --> 00:16:19,456
where this can be used a
little bit later in our talk.


318
00:16:20,076 --> 00:16:22,556
Now that you know
how traits work,


319
00:16:22,806 --> 00:16:24,566
let's see how we use
them in our application.


320
00:16:30,476 --> 00:16:32,976
So, let's run our application
on the iPhone again -


321
00:16:41,326 --> 00:16:43,696
- and we'll take a look
again at these two views


322
00:16:43,866 --> 00:16:45,046
that change their appearance


323
00:16:45,736 --> 00:16:48,066
when their vertical
size classes change.


324
00:16:48,636 --> 00:16:53,906
The first one is our rating
control, and we can look


325
00:16:53,906 --> 00:16:55,126
at the code for that right here.


326
00:16:56,516 --> 00:17:01,706
All that we're doing in this
view is creating image views


327
00:17:02,726 --> 00:17:04,876
and setting images on
them that we're pulling


328
00:17:04,876 --> 00:17:06,116
out of our asset catalog.


329
00:17:07,205 --> 00:17:09,246
There's actually no code
in here at all that deals


330
00:17:09,246 --> 00:17:10,695
with traits or size classes.


331
00:17:11,506 --> 00:17:17,935
Instead, we just have assets
that define a regular version


332
00:17:17,935 --> 00:17:20,816
of the image, and a vertically
compact version of the image,


333
00:17:21,346 --> 00:17:23,935
and our Image View
automatically updates


334
00:17:24,415 --> 00:17:25,996
to give us this resizing
behavior


335
00:17:26,056 --> 00:17:28,996
for our ratings control, and
since we're using Auto Layout,


336
00:17:29,056 --> 00:17:31,596
our entire control
will shrink and grow


337
00:17:31,596 --> 00:17:33,066
to match those images changing.


338
00:17:37,396 --> 00:17:40,406
Notice that we also have black
versions of these images here,


339
00:17:40,496 --> 00:17:42,446
and they're turning to be
blue in our application,


340
00:17:42,446 --> 00:17:46,356
and this is because we've added
Image Rendering Mode support


341
00:17:46,566 --> 00:17:47,546
to the asset catalog.


342
00:17:48,516 --> 00:17:56,356
[ Applause ]


343
00:17:56,856 --> 00:18:00,086
All right, next let's take
a look at our Overlay view.


344
00:18:00,856 --> 00:18:06,926
Here, in our intrinsic content
size method, we're looking


345
00:18:06,926 --> 00:18:09,676
at the horizontal and
vertical size classes


346
00:18:09,736 --> 00:18:12,966
that we're currently in, and
using that to determine margins


347
00:18:13,156 --> 00:18:15,046
to add on to our
intrinsic content size,


348
00:18:15,166 --> 00:18:19,726
and this is how we automatically
change between this larger


349
00:18:19,726 --> 00:18:23,336
and smaller margins as we rotate
between a vertically compact


350
00:18:23,406 --> 00:18:25,306
and regular size class.


351
00:18:25,856 --> 00:18:28,816
However, we also need to
tell the system when it needs


352
00:18:28,816 --> 00:18:34,116
to update this intrinsic
content size, and we do this


353
00:18:34,416 --> 00:18:36,466
by overriding
traitCollectionDidChange.


354
00:18:37,346 --> 00:18:39,526
Here, we check if
either the vertical


355
00:18:39,526 --> 00:18:42,216
or horizontal size
class has changed along


356
00:18:42,216 --> 00:18:44,626
with this trait collection
change, and if it has,


357
00:18:45,206 --> 00:18:47,326
then we just invalidate
our intrinsic content size,


358
00:18:47,326 --> 00:18:51,436
and that's all we have to do.


359
00:18:51,676 --> 00:18:53,006
Now, one last view


360
00:18:53,006 --> 00:18:55,156
in our application
is this Profile View,


361
00:18:55,596 --> 00:18:58,056
and this shows some information
about the current user,


362
00:18:58,506 --> 00:19:00,046
as well as the last
image that I've sent.


363
00:19:01,026 --> 00:19:03,196
However, when I rotate
this to landscape,


364
00:19:04,396 --> 00:19:05,746
you'll see that our
layout changes


365
00:19:06,366 --> 00:19:09,136
to show a side-by-side
view instead of this up


366
00:19:09,136 --> 00:19:11,476
and down view, and
we've implemented


367
00:19:11,476 --> 00:19:14,206
that by using Trait Collections
and Size Classes as well.


368
00:19:15,466 --> 00:19:17,296
If I go to my Profile
View Controller,


369
00:19:18,686 --> 00:19:21,476
you can see that we have
a method that updates all


370
00:19:21,476 --> 00:19:25,036
of our auto layout constraints,
and it takes a trait collection


371
00:19:25,036 --> 00:19:27,996
that we pass in, checks
its vertical size class,


372
00:19:28,536 --> 00:19:31,166
and uses one set of
constraints when it's compact


373
00:19:31,536 --> 00:19:34,366
to show the side-by-side
view, and uses a different set


374
00:19:34,366 --> 00:19:37,256
of constraints, otherwise,
to show the up and down view.


375
00:19:37,256 --> 00:19:40,976
All right, now let's look
back at slides, again.


376
00:19:48,086 --> 00:19:50,286
The next thing I'd like to tell
you about is some of the details


377
00:19:50,496 --> 00:19:54,716
of how our View Controllers have
adopted these concepts of traits


378
00:19:54,716 --> 00:19:57,636
and size classes to
automatically perform,


379
00:19:57,636 --> 00:19:59,336
be more adaptive in
your applications.


380
00:20:00,666 --> 00:20:01,916
One of the View Controller
classes


381
00:20:01,916 --> 00:20:05,336
that has changed the most in
iOS 8 is UISplitViewController.


382
00:20:06,236 --> 00:20:09,296
In the past, you'd often
use a Split View Controller


383
00:20:09,556 --> 00:20:12,476
in the iPad version of your
application, and then you'd have


384
00:20:12,476 --> 00:20:14,946
to write a completely different
View Controller hierarchy


385
00:20:14,986 --> 00:20:16,196
for your iPhone application.


386
00:20:17,126 --> 00:20:20,146
Well in iOS 8, we've made the
Split View Controller available


387
00:20:20,146 --> 00:20:22,756
on both platforms so you can
just write one View Controller


388
00:20:22,756 --> 00:20:25,576
hierarchy that works
great on iPhone and iPad,


389
00:20:25,666 --> 00:20:28,086
and that's what we've done
in our sample application.


390
00:20:29,496 --> 00:20:31,766
However, we've even gone
a little bit further there


391
00:20:31,766 --> 00:20:33,836
and forced the Split
View Controller


392
00:20:34,216 --> 00:20:37,376
to have its side-by-side
two-column view in iPhone


393
00:20:37,376 --> 00:20:39,746
in landscape just like
it would have in iPad.


394
00:20:40,506 --> 00:20:43,986
So, let me show you
exactly how we did that.


395
00:20:44,136 --> 00:20:47,116
Let's first take a look at the
Trait Environment hierarchy


396
00:20:47,416 --> 00:20:49,946
that our application has
when it's on the iPad.


397
00:20:50,746 --> 00:20:54,776
Here, you can see that the Split
View Controller is inheriting


398
00:20:54,776 --> 00:20:56,536
its trait collections
from its parents


399
00:20:56,536 --> 00:20:59,706
and this gives it a regular
horizontal size class.


400
00:21:00,876 --> 00:21:02,146
When the split View
Controller is


401
00:21:02,146 --> 00:21:03,826
in a regular horizontal
size class,


402
00:21:04,396 --> 00:21:06,276
it automatically will
show the two column view


403
00:21:06,456 --> 00:21:08,626
that you expect on an iPad.


404
00:21:09,636 --> 00:21:11,196
However, if we now change


405
00:21:11,626 --> 00:21:13,976
to what our iPhone's
Trait Environment looks


406
00:21:13,976 --> 00:21:15,716
like in landscape here,


407
00:21:16,446 --> 00:21:18,406
you'll see that once again
the Split View Controller is


408
00:21:18,406 --> 00:21:19,886
inheriting its trait
collections,


409
00:21:20,416 --> 00:21:23,056
but here it has a compact
horizontal size class,


410
00:21:23,256 --> 00:21:26,496
and this triggers it to
show the one column view.


411
00:21:27,006 --> 00:21:28,506
Well, to change this
in our application,


412
00:21:29,016 --> 00:21:31,866
we'll insert our own container
View Controller as the parent


413
00:21:31,866 --> 00:21:32,956
of the Split View Controller.


414
00:21:33,766 --> 00:21:34,956
Then, we'll use the new method


415
00:21:34,956 --> 00:21:37,796
in iOS 8 called
setOverrideTraitCollection:


416
00:21:37,906 --> 00:21:38,926
for ChildViewController.


417
00:21:42,256 --> 00:21:44,676
This allows us to add
our own trait collection


418
00:21:45,216 --> 00:21:47,766
to the one that's inherited
by the Child View Controller.


419
00:21:48,776 --> 00:21:51,986
In this case, we'll be adding
a regular horizontal size class


420
00:21:51,986 --> 00:21:52,836
in our trait collection,


421
00:21:53,126 --> 00:21:54,766
and notice that it's
partially specified,


422
00:21:55,316 --> 00:21:57,866
so when we add it together with
the inherited trait collection,


423
00:21:58,846 --> 00:22:01,726
our Split View Controller will
now have a regular horizontal


424
00:22:01,756 --> 00:22:04,456
size class in addition
to what else it inherits


425
00:22:04,666 --> 00:22:05,676
from its Trait Environments,


426
00:22:06,336 --> 00:22:09,506
and this regular size
class will cause it


427
00:22:09,506 --> 00:22:11,656
to show the two-column
split view appearance.


428
00:22:12,506 --> 00:22:15,626
So what this ends up with
when we rotate from portrait


429
00:22:15,626 --> 00:22:18,966
to landscape, is it will
change from one to two columns.


430
00:22:19,136 --> 00:22:24,886
All right, now that we've seen
how we can change the trait


431
00:22:24,886 --> 00:22:27,956
collections of our Child View
Controllers, let's take a look


432
00:22:27,956 --> 00:22:30,686
in detail at how the trait
collection transition occurs,


433
00:22:31,026 --> 00:22:32,106
for example, when we rotate.


434
00:22:32,816 --> 00:22:35,986
In this case, we'd be rotating
from portrait to landscape,


435
00:22:36,476 --> 00:22:39,096
and let's take a look at the
timeline of changes that occurs.


436
00:22:39,996 --> 00:22:43,226
The first phase we have is
the setup where we get ready


437
00:22:43,356 --> 00:22:44,546
to perform this transition.


438
00:22:45,446 --> 00:22:48,746
Then, we show animations to
indicate the visual changes,


439
00:22:49,166 --> 00:22:51,816
and when all of that's
done, we do some cleanup


440
00:22:52,446 --> 00:22:56,116
to finalize the transition,
and in iOS 8,


441
00:22:56,586 --> 00:22:59,346
when Trait Collections change
as part of this collection,


442
00:22:59,706 --> 00:23:01,946
we've given you some
callbacks that you can tie


443
00:23:01,986 --> 00:23:04,156
into to participate
in this change.


444
00:23:05,146 --> 00:23:07,966
The first one is
willTransitionToTraitCollection:


445
00:23:08,016 --> 00:23:10,536
withTransitionCoordinator,
and this gets called


446
00:23:10,536 --> 00:23:11,366
at the very beginning


447
00:23:11,366 --> 00:23:13,966
of the setup before the
trait collection has changed


448
00:23:13,966 --> 00:23:14,656
to its new value.


449
00:23:16,046 --> 00:23:17,416
You can use this to get ready


450
00:23:17,416 --> 00:23:18,826
for the change that's
about to occur.


451
00:23:19,456 --> 00:23:23,086
After that, the trait collection
change itself happens,


452
00:23:23,126 --> 00:23:24,506
and immediately following


453
00:23:24,506 --> 00:23:26,676
that we call
traitCollectionDidChange,


454
00:23:26,886 --> 00:23:29,666
as I mentioned earlier,
and you can use this


455
00:23:29,666 --> 00:23:31,576
in View Controllers
or View Subclasses.


456
00:23:32,696 --> 00:23:34,236
However, that's not
the end of the story.


457
00:23:34,236 --> 00:23:36,946
We still have these
Animation and Cleanup Stages,


458
00:23:37,746 --> 00:23:40,096
and you can actually use the
willTransitionToTraitCollection


459
00:23:40,096 --> 00:23:41,856
method to tie into
those, as well.


460
00:23:42,976 --> 00:23:45,176
The transition coordinator
that you get passed


461
00:23:45,176 --> 00:23:48,876
in this method has an animate
alongside method that allows you


462
00:23:48,946 --> 00:23:52,086
to add your own animation
blocks to this transition


463
00:23:52,316 --> 00:23:55,686
that will run along with the
transition's own animations,


464
00:23:55,686 --> 00:23:57,356
for example, the
rotation in this case.


465
00:23:58,676 --> 00:24:01,126
There's also a way to add
your own completion blocks


466
00:24:01,266 --> 00:24:03,696
that will get run inside
of the cleanup stage.


467
00:24:03,696 --> 00:24:07,416
So let's take a look at
where we might use these two


468
00:24:07,516 --> 00:24:08,666
specific callbacks.


469
00:24:09,766 --> 00:24:11,846
WillTransitionToTraitCollection
is great


470
00:24:11,846 --> 00:24:13,916
for animating View
Controller changes along


471
00:24:13,916 --> 00:24:16,646
with these trait collection
changes, so we use this


472
00:24:16,646 --> 00:24:20,146
in our application in the
profile view that we just saw,


473
00:24:20,626 --> 00:24:23,236
since we want this change
to occur right alongside


474
00:24:23,306 --> 00:24:24,486
that rotation transition.


475
00:24:25,546 --> 00:24:26,046
However,


476
00:24:26,046 --> 00:24:28,816
WillTransitionToTraitCollection
is only available


477
00:24:28,816 --> 00:24:29,716
on View Controllers,


478
00:24:29,976 --> 00:24:32,306
not on other Trait
Environments like UIViews.


479
00:24:33,646 --> 00:24:36,586
And so, traitCollectionDidChange
is great for use


480
00:24:36,586 --> 00:24:39,986
in UIView subclasses where
you want to update your UI


481
00:24:40,546 --> 00:24:41,556
as the traits are changing.


482
00:24:42,716 --> 00:24:43,636
So we've used this one


483
00:24:44,086 --> 00:24:46,616
in our Comment Overlay
View that you saw earlier.


484
00:24:46,616 --> 00:24:50,886
So now that we've seen
these trait changes,


485
00:24:51,226 --> 00:24:54,146
let's drill in a little bit
deeper into the behavior


486
00:24:54,146 --> 00:24:56,926
that happens when a Split
View Controller collapses


487
00:24:57,386 --> 00:24:59,566
from a two-column to
a one-column view.


488
00:25:04,216 --> 00:25:05,636
As part of this change,


489
00:25:06,046 --> 00:25:07,996
there are two changes
that need to occur.


490
00:25:08,926 --> 00:25:11,076
The first thing that
has to happen is we need


491
00:25:11,076 --> 00:25:13,516
to find a new primary
View Controller to show


492
00:25:13,516 --> 00:25:15,156
in this collapsed
one-column state.


493
00:25:15,786 --> 00:25:19,416
By default, Split View
Controller will use the primary


494
00:25:19,416 --> 00:25:22,176
View Controller from your
expanded two-column state


495
00:25:22,276 --> 00:25:24,096
as the new primary
View Controller


496
00:25:24,096 --> 00:25:26,296
in your collapsed
one-column state as well.


497
00:25:27,366 --> 00:25:28,726
However, you can
also change this


498
00:25:29,226 --> 00:25:31,966
by overriding the
splitViewControllerDelegate


499
00:25:31,966 --> 00:25:35,366
method, primaryViewControllerFor
CollapsingSplitViewController.


500
00:25:35,936 --> 00:25:38,346
This allows you to return
any View Controller you want


501
00:25:38,626 --> 00:25:40,186
to be the new primary
View Controller


502
00:25:40,276 --> 00:25:44,416
in the collapsed version of
your Split View Controller.


503
00:25:44,466 --> 00:25:47,466
Now, once that new primary View
Controller has been chosen,


504
00:25:47,916 --> 00:25:51,166
the next step that has to happen
is the secondary View Controller


505
00:25:51,666 --> 00:25:54,186
has to get merged into that
primary View Controller,


506
00:25:55,356 --> 00:25:57,976
and in general, Split
View Controller will try


507
00:25:57,976 --> 00:26:00,116
to automatically do the
right thing here as well.


508
00:26:00,776 --> 00:26:03,146
In fact, in our sample
application we didn't need


509
00:26:03,146 --> 00:26:05,896
to write or add any code to get
the behavior that you see here


510
00:26:06,396 --> 00:26:08,576
where the secondary View
Controller, our Photo View,


511
00:26:09,006 --> 00:26:11,776
automatically gets pushed onto
the Navigation Controller Stack


512
00:26:11,776 --> 00:26:14,076
that we had from our
primary View Controller.


513
00:26:15,446 --> 00:26:17,136
So generally, you won't
have to do anything here.


514
00:26:17,636 --> 00:26:20,166
However, there may be some
special cases where you want


515
00:26:20,166 --> 00:26:22,166
to interact a little
bit with this change.


516
00:26:22,696 --> 00:26:25,696
One example of that from our
sample application is the No


517
00:26:25,696 --> 00:26:27,016
Conversation Selected View.


518
00:26:28,106 --> 00:26:31,106
We show this whenever we're
in the two-column wiew


519
00:26:31,536 --> 00:26:33,076
and nothing has been
selected on the left.


520
00:26:33,996 --> 00:26:36,146
However, if we just use
the default behavior,


521
00:26:36,216 --> 00:26:38,146
the Split View Controller
would take


522
00:26:38,146 --> 00:26:41,356
that Secondary View
Controller and push that on top


523
00:26:41,356 --> 00:26:42,386
of our navigation stack,


524
00:26:43,206 --> 00:26:46,576
but this No Conversation View
doesn't really add anything


525
00:26:46,576 --> 00:26:48,676
to the single column view
because there's no way


526
00:26:48,676 --> 00:26:50,966
that the user can
interact with it.


527
00:26:51,056 --> 00:26:53,796
So, really we'd rather have
a view that looks like this


528
00:26:53,796 --> 00:26:56,816
where we just show the top
level List View Controller


529
00:26:57,086 --> 00:27:00,706
when we get collapsed,
and it's possible to do


530
00:27:00,706 --> 00:27:03,056
that with another
splitViewController method,


531
00:27:03,446 --> 00:27:06,496
collapseSecondaryViewController:
ontoPrimaryViewController,


532
00:27:07,126 --> 00:27:09,376
and I'll show you in detail
the code that we use to do


533
00:27:09,376 --> 00:27:12,766
that in our sample app
a little bit later.


534
00:27:13,016 --> 00:27:15,606
Next, let's look at the
transition that happens


535
00:27:15,606 --> 00:27:17,956
in the opposite direction
when we expand


536
00:27:18,316 --> 00:27:22,276
from a single column view
to the two-column view.


537
00:27:23,836 --> 00:27:26,686
Once again, there are two
stages that need to occur.


538
00:27:27,276 --> 00:27:30,726
We need to find the new primary
View Controller, and by default,


539
00:27:31,086 --> 00:27:34,246
split View Controller will also
use the primary View Controller


540
00:27:34,246 --> 00:27:37,946
from the collapsed view and the
expanded view, and once again,


541
00:27:38,086 --> 00:27:40,176
you can use a Split View
Controller Delegate method


542
00:27:40,206 --> 00:27:41,206
to change that behavior.


543
00:27:41,796 --> 00:27:43,686
This one is
primaryViewControllerFor


544
00:27:43,686 --> 00:27:45,006
ExpandingSplitViewController.


545
00:27:45,106 --> 00:27:49,786
Now once that new primary View
Controller has been chosen,


546
00:27:50,576 --> 00:27:53,976
we need to take the secondary
View Controller and recreate it


547
00:27:53,976 --> 00:27:58,176
from the primary View
Controller that was collapsed,


548
00:27:58,226 --> 00:28:00,666
and a Split View Controller will
automatically do the right thing


549
00:28:00,756 --> 00:28:04,596
here as well by popping off
our photo view and showing


550
00:28:04,596 --> 00:28:08,576
that as the new secondary View
Controller in our Expanded view.


551
00:28:09,316 --> 00:28:11,206
However, once again, we want


552
00:28:11,256 --> 00:28:12,636
to do something a
little bit special


553
00:28:12,696 --> 00:28:13,866
for the No Conversation view.


554
00:28:14,926 --> 00:28:16,836
Here, if we were
showing the List view


555
00:28:16,836 --> 00:28:19,156
when we were collapsed,
we want to recreate


556
00:28:19,156 --> 00:28:21,936
that no conversation selected
view and make that appear


557
00:28:21,976 --> 00:28:25,326
as the new Detail View
Controller on the right.


558
00:28:26,336 --> 00:28:29,526
So we can do that using another
Split View Controller delegate


559
00:28:29,526 --> 00:28:29,826
method,


560
00:28:30,096 --> 00:28:32,916
separateSecondaryViewController
FromPrimaryViewController.


561
00:28:33,566 --> 00:28:36,106
Now, I've just been telling you


562
00:28:36,186 --> 00:28:38,416
that Split View Controller
is doing all of these merging


563
00:28:38,456 --> 00:28:41,386
and unmerging of the secondary
View Controller automatically,


564
00:28:41,626 --> 00:28:42,936
and that's not entirely true.


565
00:28:43,886 --> 00:28:46,496
The primary View Controller
itself is actually helping


566
00:28:46,806 --> 00:28:48,236
to do this merging
and unmerging,


567
00:28:48,736 --> 00:28:51,576
and it's doing this using these
two methods on UIViewController,


568
00:28:52,726 --> 00:28:55,146
collapseSecondaryViewController
forSplitViewController


569
00:28:55,646 --> 00:28:57,336
and
separateSecondaryViewController


570
00:28:57,336 --> 00:28:58,286
ForSplitViewController.


571
00:28:59,286 --> 00:29:01,776
These get called by the
Split View Controller as part


572
00:29:01,776 --> 00:29:05,306
of its default implementation of
the collapsing and uncollapsing


573
00:29:05,556 --> 00:29:06,076
that occurs,


574
00:29:07,106 --> 00:29:10,046
and UINavigationController
implements these to push


575
00:29:10,046 --> 00:29:11,806
and pop the secondary
View Controller


576
00:29:11,806 --> 00:29:12,956
for you automatically.


577
00:29:13,866 --> 00:29:15,996
However, you can
also implement these


578
00:29:16,136 --> 00:29:18,836
in your own container View
Controllers to get the same kind


579
00:29:18,836 --> 00:29:20,826
of behavior the navigation
controller has,


580
00:29:21,296 --> 00:29:23,606
or even something completely
custom for your application.


581
00:29:24,206 --> 00:29:28,156
Now, one other change
that we've made


582
00:29:28,156 --> 00:29:31,276
to how View Controllers
work in iOS 8 is in the way


583
00:29:31,276 --> 00:29:32,886
that you showViewControllers.


584
00:29:33,786 --> 00:29:36,026
In the past, if you had
a leaf View Controller


585
00:29:36,126 --> 00:29:38,886
like a table View Controller
and you showed a different one,


586
00:29:38,936 --> 00:29:43,316
perhaps by tapping on the cell,
that View Controller would reach


587
00:29:43,316 --> 00:29:44,966
up through the View
Controller hierarchy


588
00:29:45,226 --> 00:29:46,806
and grab the navigation
controller


589
00:29:46,806 --> 00:29:49,716
that it was embedded inside of
and call push View Controller


590
00:29:49,716 --> 00:29:52,456
on that, but this is a
pretty tight coupling


591
00:29:52,496 --> 00:29:55,626
between the leaf View Controller
and the exact environment


592
00:29:55,626 --> 00:29:58,166
that it's inside of, and
we want to try to move away


593
00:29:58,166 --> 00:29:59,566
from this pattern in iOS 8.


594
00:30:01,516 --> 00:30:05,866
[ Applause ]


595
00:30:06,366 --> 00:30:08,696
So, instead we're
introducing two new methods


596
00:30:08,816 --> 00:30:11,456
that help you de-couple
this, showViewController


597
00:30:11,686 --> 00:30:13,006
and showDetailViewController.


598
00:30:14,016 --> 00:30:16,786
These methods work by starting
at the leaf View Controller


599
00:30:17,226 --> 00:30:19,526
and walking up its parent
View Controller hierarchy


600
00:30:19,826 --> 00:30:22,276
until they find the right
Container View Controller


601
00:30:22,276 --> 00:30:23,736
for that specific action.


602
00:30:24,766 --> 00:30:27,426
So, let me show you how
these specific methods work.


603
00:30:28,176 --> 00:30:31,846
We'll start with
ShowViewController


604
00:30:32,176 --> 00:30:35,656
and how it behaves when it's
inside-when it's called inside


605
00:30:35,656 --> 00:30:37,026
of a UINavigationController.


606
00:30:37,026 --> 00:30:41,426
Here it will just push onto
the Navigation Controller,


607
00:30:41,926 --> 00:30:43,196
so this is a great replacement


608
00:30:43,466 --> 00:30:46,496
for that Self.Navigation
Controller/Push View Controller


609
00:30:46,556 --> 00:30:47,856
approach that you saw earlier.


610
00:30:48,586 --> 00:30:50,256
And what's great
about this method is


611
00:30:50,306 --> 00:30:51,816
that it will actually adapt


612
00:30:51,996 --> 00:30:53,506
to different View
Controller containers


613
00:30:53,796 --> 00:30:54,726
and do something different.


614
00:30:55,526 --> 00:30:57,916
For example, when you're inside
of a Split View Controller


615
00:30:57,916 --> 00:31:01,856
and you call this method it
will instead show the new View


616
00:31:01,856 --> 00:31:04,676
Controller on the left side
of the Split View Controller


617
00:31:04,676 --> 00:31:06,286
as the new Primary
View Controller.


618
00:31:07,596 --> 00:31:10,126
In fact, even when you're
not inside of any container,


619
00:31:10,126 --> 00:31:12,776
View Controller that implements
this method will still give you


620
00:31:12,826 --> 00:31:13,756
some automatic behavior.


621
00:31:14,456 --> 00:31:16,726
Here, we'll show
the View Controller


622
00:31:16,846 --> 00:31:18,956
as a modal View Controller
presentation.


623
00:31:19,856 --> 00:31:22,196
So, you can always be guaranteed
that the View Controller


624
00:31:22,196 --> 00:31:24,786
that you pass to
ShowViewController will be shown


625
00:31:25,146 --> 00:31:27,886
in exactly the right way
for its current environment.


626
00:31:28,446 --> 00:31:32,146
Next, let's look at
showDetailViewController,


627
00:31:32,926 --> 00:31:35,346
this works similarly
and it's implemented


628
00:31:35,486 --> 00:31:36,996
by Split View Controller.


629
00:31:38,166 --> 00:31:40,866
Here, the Split View Controller
will show the View Controller


630
00:31:40,866 --> 00:31:43,366
you pass on the right
of its split.


631
00:31:44,576 --> 00:31:47,236
However, if that Split View
Controller is collapsed,


632
00:31:47,236 --> 00:31:49,116
as you might see in
an iPhone application,


633
00:31:49,826 --> 00:31:51,086
then it will actually redirect


634
00:31:51,086 --> 00:31:54,196
that showDetailViewController
method to showViewController


635
00:31:54,496 --> 00:31:56,906
and re-send it to its own
Primary View Controller.


636
00:31:58,056 --> 00:31:59,896
Let's look at a more
concrete example,


637
00:31:59,896 --> 00:32:02,046
where we have
UINavigationController


638
00:32:02,156 --> 00:32:04,826
as the Primary View Controller
of the Split View Controller,


639
00:32:05,476 --> 00:32:06,586
just like in our application.


640
00:32:07,396 --> 00:32:10,476
Here, the Navigation Controller
gets the showViewController


641
00:32:10,476 --> 00:32:13,156
method and will push just
like you saw earlier.


642
00:32:14,356 --> 00:32:14,546
So,


643
00:32:14,546 --> 00:32:16,856
this showDetailViewController
gives you great behavior


644
00:32:16,916 --> 00:32:18,906
in a Split View Controller
where it'll show it


645
00:32:19,006 --> 00:32:22,226
on the right-hand side if it's
expanded, but it will push


646
00:32:22,336 --> 00:32:23,606
onto a Navigation Controller


647
00:32:23,606 --> 00:32:26,036
if that's your Primary View
Controller when it's collapsed.


648
00:32:26,606 --> 00:32:30,796
And once again just like
with showViewController,


649
00:32:31,076 --> 00:32:34,126
showDetailViewController will
show that View Controller


650
00:32:34,126 --> 00:32:36,546
as a model presentation
if it's not inside


651
00:32:36,546 --> 00:32:39,386
of any container View
Controller that implements it.


652
00:32:40,616 --> 00:32:43,396
So, these are those two
View - those two methods


653
00:32:43,616 --> 00:32:45,736
and what their method
signature looks like but,


654
00:32:45,736 --> 00:32:47,116
in addition to being
able to call them,


655
00:32:47,116 --> 00:32:48,906
you can also implement these


656
00:32:49,066 --> 00:32:50,686
in your own custom
View Controller methods


657
00:32:51,516 --> 00:32:53,836
and this lets you get exactly
the same kind of behavior


658
00:32:53,986 --> 00:32:55,156
as Navigation Controller


659
00:32:55,336 --> 00:32:57,466
and Split View Controller
will get inside of all


660
00:32:57,466 --> 00:32:58,906
of your custom View Controllers.


661
00:32:59,516 --> 00:33:03,516
[ Silence ]


662
00:33:04,016 --> 00:33:08,000
[ Applause ]


663
00:33:08,846 --> 00:33:10,526
Next, I'd like to
tell you a little bit


664
00:33:10,526 --> 00:33:12,836
about how these methods
are actually implemented.


665
00:33:12,836 --> 00:33:16,436
And that's using a new method
called targetViewController


666
00:33:16,436 --> 00:33:17,616
ForAction:sender.


667
00:33:19,086 --> 00:33:22,306
This does all the work of going
up the View Controller hierarchy


668
00:33:22,686 --> 00:33:24,666
until the right View
Controller gets found.


669
00:33:25,236 --> 00:33:27,926
For example, if we call
showViewController we'd walk


670
00:33:27,926 --> 00:33:29,906
up until we find the
Navigation Controller


671
00:33:30,076 --> 00:33:32,336
since that's the first View
Controller that implements it


672
00:33:32,886 --> 00:33:34,716
or if we called
showDetailViewController we


673
00:33:34,956 --> 00:33:36,986
would keep walking up the
View Controller hierarchy


674
00:33:37,676 --> 00:33:39,186
until we got to the
Split View Controller.


675
00:33:39,906 --> 00:33:41,726
And
targetViewControllerForAction


676
00:33:42,056 --> 00:33:44,456
works by looking at the
View Controller and seeing


677
00:33:44,456 --> 00:33:46,976
if it's overwritten the action
method that you've passed in,


678
00:33:47,256 --> 00:33:49,706
and also whether that
View Controller wants


679
00:33:49,706 --> 00:33:51,166
to receive that specific action.


680
00:33:52,096 --> 00:33:53,746
And the great thing
about this is


681
00:33:53,746 --> 00:33:57,066
that since its public you can
use it to make your own methods


682
00:33:57,376 --> 00:33:58,866
that work just like
ShowViewController


683
00:33:58,866 --> 00:34:00,136
and ShowDetailViewController,


684
00:34:00,736 --> 00:34:03,126
and we'll see some
specific examples of this


685
00:34:03,336 --> 00:34:05,076
as we've used it in
our sample application.


686
00:34:07,316 --> 00:34:10,056
The last topic that I'd
like to mention is View


687
00:34:10,056 --> 00:34:11,136
Controller presentation.


688
00:34:11,835 --> 00:34:14,186
In iOS 8 we've made
this adaptive as well.


689
00:34:14,815 --> 00:34:16,136
So if you show a Popover,


690
00:34:16,136 --> 00:34:19,065
a View Controller presentation
will now automatically adapt


691
00:34:19,065 --> 00:34:21,456
that to a fullscreen
presentation when you're


692
00:34:21,456 --> 00:34:23,706
in a horizontally
compact size class.


693
00:34:24,696 --> 00:34:26,896
Once again we don't have time
to talk about that today,


694
00:34:27,166 --> 00:34:28,846
but I highly encourage
you to go to the


695
00:34:28,846 --> 00:34:31,065
"A Look Inside Presentation
Controllers" talk,


696
00:34:31,216 --> 00:34:32,576
which is tomorrow at 11:30.


697
00:34:32,576 --> 00:34:35,516
It will show you all about how
Presentation Controllers work


698
00:34:36,005 --> 00:34:38,815
and also how you can use them
with traits and adaptivity.


699
00:34:39,735 --> 00:34:42,596
All right, let's look
at a demo of how all


700
00:34:42,596 --> 00:34:45,016
of those View Controller
features work


701
00:34:45,016 --> 00:34:45,775
in our application.


702
00:34:46,176 --> 00:34:50,966
First, let's look at
that profile view again


703
00:34:50,966 --> 00:34:54,666
and let me show you what
its transition looks


704
00:34:54,666 --> 00:34:55,585
like in slow motion.


705
00:34:57,036 --> 00:35:00,416
Notice that our labels and image
view are moving right along


706
00:35:00,416 --> 00:35:02,276
with the rotation transition.


707
00:35:02,846 --> 00:35:07,806
And as I indicated,
the way we do that is


708
00:35:07,806 --> 00:35:09,936
by calling this
updateConstraints


709
00:35:09,936 --> 00:35:12,666
ForTraitCollection
method inside a


710
00:35:12,666 --> 00:35:15,536
willTransitionToTraitCollection
with transition coordinator.


711
00:35:16,636 --> 00:35:19,416
Here we just use the
animateAlongsideTransition


712
00:35:19,416 --> 00:35:21,056
method of the transition
coordinator,


713
00:35:22,006 --> 00:35:23,456
call that updateConstraints
method


714
00:35:24,236 --> 00:35:27,566
and then make our view
update its layout.


715
00:35:28,556 --> 00:35:32,416
This will automatically cause
this layout-these layout


716
00:35:32,416 --> 00:35:35,566
constraints to change alongside
that rotation transition.


717
00:35:36,996 --> 00:35:41,166
All right, now let's look at
how we can override the traits


718
00:35:41,436 --> 00:35:44,136
for our Split View
Controller to automatically get


719
00:35:44,136 --> 00:35:46,586
that landscape view
that shows two columns.


720
00:35:47,756 --> 00:35:50,106
We'll just add this
viewWillTransitionToSize method


721
00:35:50,886 --> 00:35:53,896
and here, if our width
is larger than 320,


722
00:35:54,746 --> 00:35:58,486
we'll add this Forced Trait
Collection, which is -


723
00:35:58,486 --> 00:36:00,456
has a horizontal size
class of regular.


724
00:36:01,346 --> 00:36:03,646
This is one of those partially
specified Trait Collections


725
00:36:03,796 --> 00:36:04,736
that we talked about earlier.


726
00:36:04,736 --> 00:36:10,746
When we set that trait
collection we'll use the


727
00:36:10,746 --> 00:36:13,176
setOverrideTraitCollection
ForChildViewController method


728
00:36:13,416 --> 00:36:15,016
to add it to our
Child View Controller,


729
00:36:15,326 --> 00:36:17,256
which in this case is a
Split View Controller.


730
00:36:18,556 --> 00:36:21,486
Now when I run the
application again you'll see


731
00:36:25,676 --> 00:36:30,976
that we can rotate to landscape
and get this two-column view.


732
00:36:34,566 --> 00:36:37,426
And everything just works
in iPhone as you'd expect


733
00:36:37,426 --> 00:36:43,866
and in landscape it works
just as it would on the iPad.


734
00:36:44,336 --> 00:36:48,096
Now let's look in detail at how
we implemented the collapsing


735
00:36:48,096 --> 00:36:49,066
and expanding behavior.


736
00:36:50,146 --> 00:36:52,376
This happens in our Split View
Controller delegate method.


737
00:36:55,276 --> 00:36:57,986
First, we have the
collapseSecondaryViewController:


738
00:36:58,126 --> 00:37:02,086
ontoPrimaryViewController method
and here we want to use this


739
00:37:02,566 --> 00:37:08,136
for when we're collapsing
and we're going from a -


740
00:37:08,136 --> 00:37:10,696
showing the No Conversation
view to hiding it


741
00:37:10,996 --> 00:37:13,706
and only showing
this top level list.


742
00:37:14,336 --> 00:37:16,966
First, we'll ask the
Secondary View Controller


743
00:37:17,276 --> 00:37:19,416
if it contains a
photo and we did this


744
00:37:19,446 --> 00:37:22,346
by adding a category method
to your View Controller


745
00:37:22,706 --> 00:37:25,126
to return whether or not any
given View Controller shows a


746
00:37:25,126 --> 00:37:29,066
photo and, if we do
not have any photo


747
00:37:29,066 --> 00:37:31,666
in our current Secondary View
Controller, we'll return yes.


748
00:37:32,566 --> 00:37:34,196
This tells the Split
View Controller


749
00:37:34,336 --> 00:37:37,816
that we've handled the collapse
ourselves and turns off any


750
00:37:37,816 --> 00:37:40,046
of its default behaviors
which would have pushed


751
00:37:40,046 --> 00:37:43,866
that Secondary View Controller
on top of the navigation stack.


752
00:37:44,776 --> 00:37:47,356
We also have some
logic here to make sure


753
00:37:47,596 --> 00:37:50,326
that we don't push a
View Controller on top


754
00:37:50,326 --> 00:37:53,016
of any View Controllers that
don't match its current photo.


755
00:37:53,446 --> 00:37:55,626
You can look at the
sample application yourself


756
00:37:55,856 --> 00:37:57,056
to see exactly how this works.


757
00:37:57,996 --> 00:38:01,076
Finally, we return "no"
here when there was a photo


758
00:38:01,126 --> 00:38:02,916
and this tells the
Split View Controller


759
00:38:02,916 --> 00:38:04,266
that we didn't implement
the collapse


760
00:38:04,496 --> 00:38:08,296
and so it will implement-it will
perform that behavior itself.


761
00:38:08,296 --> 00:38:11,936
And that's how we get
the automatic behavior


762
00:38:12,126 --> 00:38:15,286
of pushing this photo view
off the navigation stack.


763
00:38:16,466 --> 00:38:18,286
Now if we look in
the other direction,


764
00:38:18,496 --> 00:38:22,446
where we're expanding our Split
View Controller we'll take a


765
00:38:22,696 --> 00:38:25,666
look at all of the View
Controllers that are on top


766
00:38:25,666 --> 00:38:27,556
of the navigation stack and,


767
00:38:27,556 --> 00:38:30,456
if any of them contain a
photo, we'll return "no".


768
00:38:31,436 --> 00:38:35,086
This also indicates to the Split
View Controller that we want it


769
00:38:35,086 --> 00:38:39,236
to perform its default behavior
here so if we had a photo


770
00:38:40,136 --> 00:38:41,826
and we were expanding then


771
00:38:42,916 --> 00:38:45,646
that photo would
automatically get popped off


772
00:38:45,646 --> 00:38:48,026
of the navigation stack
and shown on the right.


773
00:38:48,476 --> 00:38:49,946
If we didn't contain
any photo though,


774
00:38:49,946 --> 00:38:52,306
we'll want to create our
Empty View Controller


775
00:38:52,606 --> 00:38:53,756
and that's how we re-show


776
00:38:53,756 --> 00:38:55,906
that No Conversation view
when we're expanding.


777
00:38:55,906 --> 00:39:03,446
Now let's take a look at
how our application moves


778
00:39:03,446 --> 00:39:04,626
between View Controllers.


779
00:39:05,076 --> 00:39:07,596
First we'll look at the
Conversation View Controller.


780
00:39:08,616 --> 00:39:10,836
This is the one that's
shown here when one


781
00:39:10,836 --> 00:39:12,896
of our conversations
have multiple photos.


782
00:39:12,896 --> 00:39:16,836
If we look at the
method that gets called


783
00:39:16,886 --> 00:39:18,926
when we select a
table view cell,


784
00:39:19,556 --> 00:39:20,966
we create our new
View Controller


785
00:39:21,556 --> 00:39:23,176
and we call
ShowDetailViewController


786
00:39:23,366 --> 00:39:24,316
on that new View Controller.


787
00:39:25,736 --> 00:39:27,956
This shows it on the right
of the Split View Controller


788
00:39:28,086 --> 00:39:33,516
if we're expanded and, as I
mentioned, it will push it


789
00:39:33,516 --> 00:39:35,516
onto the navigation
stack if we're collapsed


790
00:39:35,926 --> 00:39:39,166
without us having to write
any device specific checks


791
00:39:39,246 --> 00:39:39,746
in our code.


792
00:39:40,476 --> 00:39:44,926
We can also look at our
List View Controller,


793
00:39:45,316 --> 00:39:47,716
which has similar but slightly
more complicated behavior.


794
00:39:48,826 --> 00:39:51,946
And that's so that we can
show a single View Controller


795
00:39:51,946 --> 00:39:53,666
immediately if there
is only one photo,


796
00:39:54,576 --> 00:39:56,096
or this Conversation
View Controller


797
00:39:56,166 --> 00:39:57,036
if there is more than one.


798
00:39:58,556 --> 00:40:01,766
Here we check if for any
given row we should show


799
00:40:01,766 --> 00:40:02,736
that Conversation View


800
00:40:02,736 --> 00:40:06,456
and if we're showing the
Conversation View we create it


801
00:40:06,456 --> 00:40:07,616
and use ShowViewController.


802
00:40:08,716 --> 00:40:11,326
This method will
always push onto the -


803
00:40:11,456 --> 00:40:15,076
onto its navigation controller
even when we're expanded


804
00:40:15,356 --> 00:40:16,176
in the two-column view.


805
00:40:16,736 --> 00:40:21,446
On the other hand, if we only
have single photo we'll create


806
00:40:21,446 --> 00:40:24,016
that View Controller and
call ShowDetailViewController


807
00:40:24,606 --> 00:40:26,556
which gives us the
same behavior as we had


808
00:40:27,846 --> 00:40:30,206
in the Conversation
View Controller case.


809
00:40:31,476 --> 00:40:34,736
Now one more thing that you'll
notice in our application is


810
00:40:34,926 --> 00:40:37,736
that when we rotate to
transition between a single


811
00:40:37,736 --> 00:40:42,616
and two column view these
disclosure indicators are hiding


812
00:40:42,666 --> 00:40:46,086
and appearing and this is
to maintain the behavior


813
00:40:46,726 --> 00:40:50,696
that whenever tapping on a row
would push we show a disclosure


814
00:40:50,696 --> 00:40:53,536
indicator and whenever it
wouldn't we don't show the


815
00:40:53,536 --> 00:40:54,456
disclosure indicator.


816
00:40:55,616 --> 00:40:59,866
So in a single-column,
collapsed view we push on all


817
00:40:59,866 --> 00:41:04,026
of these rows, but in the
expanded view we only push


818
00:41:04,136 --> 00:41:05,756
on these multiple
conversation views.


819
00:41:06,556 --> 00:41:12,066
And we did that by adding our
own category to UIViewController


820
00:41:12,846 --> 00:41:14,466
that implements two new methods,


821
00:41:15,776 --> 00:41:17,876
willShowing
ViewControllerPushWithSender


822
00:41:18,196 --> 00:41:20,476
and willShowingDetail
ViewControllerPushWithSender.


823
00:41:21,236 --> 00:41:23,056
These correspond to
the ShowViewController


824
00:41:23,136 --> 00:41:25,146
and ShowDetailViewController
methods that we talked


825
00:41:25,146 --> 00:41:28,596
about earlier, and they just
return whether calling one


826
00:41:28,596 --> 00:41:30,816
of those methods would
cause a push to occur or not


827
00:41:31,286 --> 00:41:32,986
which we use to determine
whether or not


828
00:41:32,986 --> 00:41:34,166
to show a disclosure indicator.


829
00:41:34,776 --> 00:41:38,106
The way we implement these is


830
00:41:38,106 --> 00:41:40,576
by using the
targetViewControllerForAction


831
00:41:40,576 --> 00:41:41,776
method that we just
talked about,


832
00:41:42,546 --> 00:41:46,286
we pass in the same action will
showing View Controller push


833
00:41:46,286 --> 00:41:49,726
with sender and then we get
back a targetViewController


834
00:41:50,016 --> 00:41:51,096
that implements that method.


835
00:41:51,766 --> 00:41:54,326
Once we have our
targetViewController we just


836
00:41:54,326 --> 00:41:56,436
need to ask it whether
it will push or not


837
00:41:57,196 --> 00:41:59,066
and if we don't have a
target we'll return no.


838
00:42:00,686 --> 00:42:03,166
Then, you just need to
override those methods


839
00:42:03,496 --> 00:42:05,916
and Navigation Controller
to return yes,


840
00:42:06,346 --> 00:42:08,606
then showing a View
Controller here will always push


841
00:42:09,786 --> 00:42:12,416
and will override it in Split
View Controller to return no,


842
00:42:13,016 --> 00:42:15,546
since here showing a View
Controller will show it


843
00:42:15,636 --> 00:42:17,566
in the left hand column
as I mentioned earlier.


844
00:42:18,896 --> 00:42:19,916
Now, the behavior


845
00:42:20,006 --> 00:42:22,796
for willShowingDetailView
ControllerPush is slightly more


846
00:42:22,796 --> 00:42:25,396
complicated, because
here we need to check


847
00:42:25,396 --> 00:42:26,556
if we're collapsed first


848
00:42:27,546 --> 00:42:30,526
and if we're collapsed then
we'll take our current Primary


849
00:42:30,526 --> 00:42:32,716
View Controller and
we'll redirect the


850
00:42:32,716 --> 00:42:34,486
willShowingDetailViewController
method


851
00:42:34,866 --> 00:42:37,906
to willShowingViewController,
and this is the same kind


852
00:42:37,906 --> 00:42:40,226
of behavior that Split
View Controller implements


853
00:42:40,406 --> 00:42:41,746
with showDetailViewController.


854
00:42:42,956 --> 00:42:45,856
So, now that we've seen
how those are implemented,


855
00:42:46,526 --> 00:42:47,566
let's look at how we used it


856
00:42:47,936 --> 00:42:50,086
in our Table View
Controller classes.


857
00:42:51,936 --> 00:42:53,996
Here, when we're laying out one


858
00:42:53,996 --> 00:42:57,086
of our cells we'll call will
showing detail View Controller


859
00:42:57,136 --> 00:43:00,066
push and that's because the
method that we would call


860
00:43:00,066 --> 00:43:02,106
when it was tapped is
showDetailViewController.


861
00:43:03,216 --> 00:43:05,446
We'll get back the
result of whether or not


862
00:43:05,776 --> 00:43:10,036
that action will push and we'll
use it to set the accessory type


863
00:43:10,156 --> 00:43:12,046
to either disclosure
indicator or none.


864
00:43:13,516 --> 00:43:15,136
This is how we get these showing


865
00:43:15,186 --> 00:43:16,866
and hiding disclosure
indicators.


866
00:43:17,936 --> 00:43:21,916
Now, we also use these methods
to determine whether or not


867
00:43:22,086 --> 00:43:25,576
to deselect a row when
it gets popped too


868
00:43:26,356 --> 00:43:28,626
and you can take a look at the
sample application yourself


869
00:43:28,956 --> 00:43:30,206
to see exactly how that works


870
00:43:30,606 --> 00:43:32,826
by using the same
willShowingView Controller


871
00:43:32,886 --> 00:43:34,666
and willShowingDetail
ViewController methods.


872
00:43:35,436 --> 00:43:40,416
The last thing I'd like to show
you is a new notification we


873
00:43:40,416 --> 00:43:41,486
added in iOS 8,


874
00:43:42,156 --> 00:43:44,696
UIViewControllerShow
DetailTargetDidChange


875
00:43:44,696 --> 00:43:46,816
notification and
this is important


876
00:43:46,816 --> 00:43:49,166
for telling our table
view when it needs


877
00:43:49,166 --> 00:43:50,856
to update its disclosure views.


878
00:43:51,646 --> 00:43:53,096
This notification gets triggered


879
00:43:53,096 --> 00:43:55,746
by Split View Controller
whenever the target


880
00:43:56,076 --> 00:43:59,466
that would be used for
showDetailViewController changes


881
00:43:59,466 --> 00:44:03,976
and this is when a Split View
Controller expands or collapses


882
00:44:05,036 --> 00:44:09,246
so we use this notification
to go through all of our cells


883
00:44:09,516 --> 00:44:11,676
and update their
disclosure indicators.


884
00:44:12,656 --> 00:44:14,496
That's all for our
sample application,


885
00:44:14,966 --> 00:44:16,496
but I really encourage
you to download it


886
00:44:16,576 --> 00:44:18,326
from the WWDC website.


887
00:44:18,826 --> 00:44:21,426
Remember, it's called
adaptive photos and take a look


888
00:44:21,626 --> 00:44:23,666
at how it implements
all of these features.


889
00:44:24,126 --> 00:44:30,176
Next, I'd like to hand things
over to Tony to talk to you


890
00:44:30,176 --> 00:44:32,046
about some of the changes we've
made to Interface Builder,


891
00:44:32,046 --> 00:44:33,916
Interface Builder for
supporting adaptivity.


892
00:44:34,516 --> 00:44:38,886
[ Applause ]


893
00:44:39,386 --> 00:44:39,956
>> Thanks Jacob.


894
00:44:41,216 --> 00:44:43,586
Hi, I'm Tony Ricciardi
and I'm an engineer


895
00:44:43,586 --> 00:44:44,606
on the Interface Builder team.


896
00:44:45,926 --> 00:44:48,766
Jacob just introduced a
few new concepts in iOS 8


897
00:44:48,766 --> 00:44:51,706
for developing adaptive
UIs such as Size Classes


898
00:44:51,706 --> 00:44:52,476
and Trait Collections.


899
00:44:52,596 --> 00:44:55,036
Now I'm going to show you guys
a few new features we've added


900
00:44:55,036 --> 00:44:57,026
to Xcode to help you
work with these concepts.


901
00:44:58,366 --> 00:45:04,146
In Xcode 6, you can
customize your layout


902
00:45:04,146 --> 00:45:06,866
for multiple Size Classes
using a single Interface


903
00:45:06,866 --> 00:45:07,586
Builder document.


904
00:45:08,436 --> 00:45:11,186
That means you can now target
both the iPhone and the iPad


905
00:45:11,416 --> 00:45:12,776
with one storyboard or XIB.


906
00:45:13,306 --> 00:45:17,436
You can deploy these documents
backwards to older versions


907
00:45:17,436 --> 00:45:25,776
of iOS, and you can preview your
layout for different devices,


908
00:45:26,166 --> 00:45:29,256
orientations and OS
versions all within Xcode.


909
00:45:31,026 --> 00:45:34,036
Now documents using this
feature will require Xcode 6


910
00:45:34,036 --> 00:45:36,176
and auto layout, so
they won't be compatible


911
00:45:36,176 --> 00:45:38,686
with older versions of Xcode.


912
00:45:38,826 --> 00:45:40,806
Let's head over to
Xcode and take a look.


913
00:45:44,826 --> 00:45:46,836
Okay, so here we
have the storyboard


914
00:45:46,896 --> 00:45:49,356
for an adventure game I
have designed for the iPad.


915
00:45:49,676 --> 00:45:53,036
Today I want to extend this
storyboard to target the iPhone.


916
00:45:53,036 --> 00:45:53,796
Before I get started,


917
00:45:53,796 --> 00:45:55,686
let me show you the app
running in the stimulator.


918
00:45:57,216 --> 00:45:59,406
This is the main menu
for my adventure game.


919
00:45:59,856 --> 00:46:02,116
On the left I have a few
buttons that control the content


920
00:46:02,116 --> 00:46:03,256
that shows up on the right side.


921
00:46:04,136 --> 00:46:05,676
The Play button takes
you to this menu


922
00:46:05,676 --> 00:46:06,936
for choosing your character,


923
00:46:06,936 --> 00:46:08,406
which can either be
a Warrior or a Mage.


924
00:46:09,836 --> 00:46:11,776
The Store button takes
you to the store page


925
00:46:12,106 --> 00:46:14,036
and this button takes
you to the Settings page.


926
00:46:14,576 --> 00:46:19,036
As you can see, I've
implemented this UI using


927
00:46:19,036 --> 00:46:20,186
a UISplitViewController.


928
00:46:21,606 --> 00:46:23,786
Over here I have my
Primary View Controller


929
00:46:23,786 --> 00:46:24,646
with those three buttons.


930
00:46:25,986 --> 00:46:31,706
Up here, I have my
character menu and, down here,


931
00:46:32,096 --> 00:46:34,456
I have my Store page
and my Settings page.


932
00:46:35,616 --> 00:46:37,476
Each of these three
buttons is connected to one


933
00:46:37,476 --> 00:46:39,446
of those Secondary View
Controllers using a


934
00:46:39,446 --> 00:46:40,156
replace segue.


935
00:46:40,786 --> 00:46:42,476
That means that when you
tap one of those buttons,


936
00:46:42,756 --> 00:46:44,966
the Secondary View Controller
is going to be replaced


937
00:46:45,346 --> 00:46:48,536
by the View Controller that
is connected to that button.


938
00:46:50,776 --> 00:46:53,136
So as I mentioned today
I want to enable -


939
00:46:53,186 --> 00:46:56,996
I want to extend the storyboard
to target the iPhone and to do


940
00:46:56,996 --> 00:46:58,706
that I'm going to
enable Size Classes.


941
00:46:59,176 --> 00:47:01,106
I'm going to head over
to the File Inspector


942
00:47:01,386 --> 00:47:03,076
and check the U Size
Classes box.


943
00:47:04,126 --> 00:47:06,306
When I do that, I get
this dialog telling me


944
00:47:06,306 --> 00:47:08,146
that my document is
going to be upgraded,


945
00:47:09,006 --> 00:47:11,036
upgrading will enable
auto layout


946
00:47:11,206 --> 00:47:14,456
and it will convert your segues
to the new adaptive segue types.


947
00:47:15,306 --> 00:47:17,576
If you've viewed storyboards
before, you're familiar


948
00:47:17,576 --> 00:47:20,596
with the usual segue
types like push, model,


949
00:47:20,596 --> 00:47:23,506
and replace that allow you
to display View Controller


950
00:47:23,506 --> 00:47:24,446
when an event is triggered.


951
00:47:25,156 --> 00:47:28,636
In Xcode 6 we've added some
new segue types that correspond


952
00:47:28,636 --> 00:47:31,446
to the new View Controller API
that Jacob discussed earlier,


953
00:47:31,816 --> 00:47:34,406
like showViewController and
showDetailViewController.


954
00:47:34,996 --> 00:47:37,216
When you enable Size Classes it
will automatically upgrade your


955
00:47:37,216 --> 00:47:40,596
segue to those new types.


956
00:47:40,736 --> 00:47:43,326
So, as you can see after
I enabled Size Classes,


957
00:47:43,326 --> 00:47:47,056
my View Controller got
resized to this 480 by 480


958
00:47:47,056 --> 00:47:49,776
to the second, this square
represents sizes of any width


959
00:47:50,026 --> 00:47:52,836
and any height so, when you
see this square your edits will


960
00:47:52,836 --> 00:47:57,816
apply to all Size Classes
unless you override your layout


961
00:47:57,816 --> 00:47:59,186
for a specific size class.


962
00:48:00,016 --> 00:48:03,366
In my case, I've already
designed my layout to work well


963
00:48:03,366 --> 00:48:05,196
for the iPad and now I want


964
00:48:05,196 --> 00:48:07,226
to override my layout
for the iPhone.


965
00:48:07,456 --> 00:48:11,486
To do that I'm going to use
this button here at the bottom


966
00:48:11,486 --> 00:48:16,096
of the canvas, this
button allows me to choose


967
00:48:16,156 --> 00:48:17,696
which Size Classes
I'm editing for.


968
00:48:19,106 --> 00:48:20,426
Each of these squares in this 3


969
00:48:20,426 --> 00:48:23,256
by 3 grid represents a
combination of a width class


970
00:48:23,256 --> 00:48:26,646
and a height class, currently
the middle square is selected


971
00:48:26,706 --> 00:48:28,756
and that corresponds to
any width and any height.


972
00:48:29,596 --> 00:48:30,716
When this square is selected,


973
00:48:30,796 --> 00:48:33,106
you're editing your default
layout, which is inherited


974
00:48:33,106 --> 00:48:34,396
by all the other configurations.


975
00:48:35,186 --> 00:48:38,706
In the top left, we have
a square for compact width


976
00:48:38,706 --> 00:48:40,836
and compact height
and that corresponds


977
00:48:40,956 --> 00:48:42,836
to an iPhone in landscape.


978
00:48:43,356 --> 00:48:46,696
In the bottom right, we have
a square for regular width


979
00:48:46,696 --> 00:48:49,586
and regular height, which
corresponds to an iPad,


980
00:48:50,626 --> 00:48:52,356
and in my case since
I'm interested


981
00:48:52,356 --> 00:48:54,976
in overriding my layout
for an iPhone in portrait,


982
00:48:55,276 --> 00:48:56,936
I'm going to head over
to the bottom left


983
00:48:57,096 --> 00:48:58,016
where I have a square


984
00:48:58,086 --> 00:49:00,766
for compact width
and regular height.


985
00:49:03,696 --> 00:49:07,206
When I choose that square, my
View Controller grows narrow


986
00:49:07,206 --> 00:49:09,286
and tall to show me
that I'm now editing


987
00:49:09,286 --> 00:49:12,396
for compact width
and regular height.


988
00:49:12,826 --> 00:49:15,026
Also, you might have noticed
this bar at the bottom


989
00:49:15,026 --> 00:49:17,516
of the canvas turns blue to
show me I'm no longer editing


990
00:49:17,516 --> 00:49:18,566
for the default layout.


991
00:49:20,116 --> 00:49:23,196
As you can see in this
configuration, my image view


992
00:49:23,196 --> 00:49:24,706
and my buttons are
getting clipped.


993
00:49:25,946 --> 00:49:27,866
So, this is going to
require a couple of fixes.


994
00:49:28,266 --> 00:49:31,416
First I want to give my image
view a smaller image to use


995
00:49:31,416 --> 00:49:33,836
when the width is
compact and second I want


996
00:49:33,866 --> 00:49:35,596
to change those buttons
to be stacked on top


997
00:49:35,596 --> 00:49:37,176
of each other vertically rather


998
00:49:37,176 --> 00:49:38,916
than sitting side-by-side
like they are now.


999
00:49:40,136 --> 00:49:41,716
Let's fix the image view first.


1000
00:49:41,716 --> 00:49:44,796
I'm going to head over to my
asset catalog using the jump bar


1001
00:49:45,546 --> 00:49:48,026
and then I'm going to
select my logo image set


1002
00:49:48,196 --> 00:49:51,656
and then I'm going to head over
to the inspector and up here


1003
00:49:51,836 --> 00:49:54,926
for the width attribute I'm
going to choose any and compact.


1004
00:49:56,496 --> 00:49:58,866
That gives me a couple
of new slots here.


1005
00:49:59,456 --> 00:50:01,626
The images that I put into
these slots are going to be used


1006
00:50:01,626 --> 00:50:04,306
at runtime instead of my default
images whenever the width


1007
00:50:04,306 --> 00:50:04,876
is compact.


1008
00:50:05,676 --> 00:50:07,846
I already have a couple
of images waiting here


1009
00:50:07,846 --> 00:50:10,436
in the finder, so I'm just going


1010
00:50:10,436 --> 00:50:14,236
to drag those over
to those slots.


1011
00:50:18,536 --> 00:50:21,496
Okay, now I'm going to head
back to the storyboard and,


1012
00:50:21,496 --> 00:50:23,716
as you can see, that image
view has been updated


1013
00:50:23,716 --> 00:50:25,736
with that smaller image and
it's no longer getting clipped.


1014
00:50:25,736 --> 00:50:27,756
Now let's fix these buttons.


1015
00:50:27,756 --> 00:50:31,026
I'm going to start by
just selecting the buttons


1016
00:50:31,416 --> 00:50:33,836
so you can take a look
at their constraints.


1017
00:50:34,676 --> 00:50:37,166
For those of you who are
unfamiliar with auto layout,


1018
00:50:37,166 --> 00:50:39,496
I'm not going to go
into too much detail


1019
00:50:39,686 --> 00:50:41,336
in layout constraints
for this demo.


1020
00:50:41,786 --> 00:50:43,386
I recommend checking
out our session


1021
00:50:43,386 --> 00:50:44,526
from last year's conference.


1022
00:50:45,006 --> 00:50:47,406
However, I do want to point out
that there is a hidden view here


1023
00:50:47,406 --> 00:50:48,526
between these two buttons


1024
00:50:48,916 --> 00:50:50,986
and that view only exists
to hold constraints.


1025
00:50:52,086 --> 00:50:55,166
It has a couple of constraints
centering it in its container


1026
00:50:55,416 --> 00:50:57,636
and it has a few more
constraints pinning the buttons


1027
00:50:57,696 --> 00:51:01,146
to it, but most importantly it
has this width constraint here


1028
00:51:01,936 --> 00:51:04,506
and that allows me to control
how far apart the buttons are


1029
00:51:04,506 --> 00:51:05,056
from each other.


1030
00:51:05,396 --> 00:51:07,486
So, if I wanted to
move them farther apart


1031
00:51:07,486 --> 00:51:09,546
or closer together I
would just have to edit


1032
00:51:09,546 --> 00:51:10,316
that width constraint.


1033
00:51:12,116 --> 00:51:14,956
However, now that I want
these buttons to be laid


1034
00:51:14,956 --> 00:51:18,126
out vertically, I no
longer need this view or any


1035
00:51:18,126 --> 00:51:19,916
of its constraints to
hold the buttons together.


1036
00:51:20,726 --> 00:51:23,256
So, the next thing I'm going
to do is clear the restraints


1037
00:51:23,316 --> 00:51:25,386
by using this menu at
the bottom of the canvas.


1038
00:51:25,766 --> 00:51:30,366
I'm just going to choose clear
constraints and when I do


1039
00:51:30,366 --> 00:51:32,346
that the constraints
disappear from the canvas


1040
00:51:34,136 --> 00:51:36,706
and you might wonder if that's
going to cause my layout


1041
00:51:36,706 --> 00:51:38,496
to stop working for the iPad.


1042
00:51:38,896 --> 00:51:41,476
However, since I'm currently
editing for compact width


1043
00:51:41,476 --> 00:51:43,646
and regular height my
edits will only apply


1044
00:51:43,646 --> 00:51:44,686
to that configuration.


1045
00:51:45,286 --> 00:51:46,836
If we take a look
at the outline view,


1046
00:51:47,236 --> 00:51:50,796
you can see that those
constraints are still there


1047
00:51:50,796 --> 00:51:53,106
in my document they've
just been turned off


1048
00:51:53,336 --> 00:51:54,566
for the current editing mode.


1049
00:51:55,156 --> 00:51:59,466
Okay, the next thing I'm going
to do is remove this view


1050
00:51:59,736 --> 00:52:03,336
since I no longer need it
there to hold the buttons next


1051
00:52:03,406 --> 00:52:04,396
to each other horizontally.


1052
00:52:04,396 --> 00:52:07,086
So, I'm going to go over
to the Attributes Inspector


1053
00:52:07,346 --> 00:52:10,006
and down here at the bottom
we have this check box


1054
00:52:10,006 --> 00:52:10,856
that says Installed.


1055
00:52:11,746 --> 00:52:14,906
Installed means that the view
is present in the view hierarchy


1056
00:52:14,906 --> 00:52:17,536
at runtime as a subview
of its container.


1057
00:52:18,266 --> 00:52:21,616
I want this view to be installed
in all configurations except


1058
00:52:21,766 --> 00:52:25,446
for compact width and regular
height so, I'm going to add -


1059
00:52:25,446 --> 00:52:28,366
I'm going to use this "+" button
here to add a customization


1060
00:52:28,436 --> 00:52:30,856
for compact width
and regular height.


1061
00:52:31,936 --> 00:52:34,676
When I do that, I get a
new Installed checkbox and,


1062
00:52:34,676 --> 00:52:37,426
when I uncheck that box,
the view disappears,


1063
00:52:37,966 --> 00:52:40,756
and if we take another
look at the outline view


1064
00:52:40,756 --> 00:52:42,826
over here you can see that
it's once again still there


1065
00:52:42,826 --> 00:52:44,526
in my document but it's
just been turned off


1066
00:52:44,526 --> 00:52:44,976
for this editing mode.


1067
00:52:45,516 --> 00:52:50,456
[ Applause ]


1068
00:52:50,956 --> 00:52:53,286
Okay, now I'm just going to
drag around these buttons


1069
00:52:53,496 --> 00:52:56,356
so that they're going to be
laid out vertically rather


1070
00:52:56,456 --> 00:52:58,746
than sitting side-by-side.


1071
00:52:59,516 --> 00:53:05,106
Okay, then I'll select the
buttons and that label there


1072
00:53:05,106 --> 00:53:07,376
and I'm going to go back to this
menu and this time I'm going


1073
00:53:07,376 --> 00:53:09,956
to ask Interface Builder to
just give me some suggested


1074
00:53:09,956 --> 00:53:11,196
constraints for those views.


1075
00:53:11,716 --> 00:53:17,306
Okay, at this point I could
hit the Run button and try this


1076
00:53:17,306 --> 00:53:20,106
out in the iPhone simulator
but instead what I'm going


1077
00:53:20,106 --> 00:53:22,846
to do is show you how you can
preview your layout directly


1078
00:53:22,846 --> 00:53:23,606
within Xcode.


1079
00:53:24,476 --> 00:53:27,686
So, I'm going to go up
to the top and I'm going


1080
00:53:27,826 --> 00:53:32,706
to open the assistant
editor then I'm going


1081
00:53:32,706 --> 00:53:35,226
to use the jump bar to go
over to the Preview Assistant.


1082
00:53:37,176 --> 00:53:42,086
And since I'm interested in
previewing for the iPhone 4


1083
00:53:42,256 --> 00:53:44,476
in portrait, I'm going
to use this "+" button


1084
00:53:44,476 --> 00:53:47,146
and choose iPhone
4-inch, and there we go,


1085
00:53:47,146 --> 00:53:49,236
now I can see my layout
as it would appear


1086
00:53:49,236 --> 00:53:49,966
on an iPhone portrait.


1087
00:53:50,516 --> 00:53:55,866
[ Applause ]


1088
00:53:56,366 --> 00:53:57,216
If I wanted to try it


1089
00:53:57,216 --> 00:53:59,576
out in landscape I can use
this button here at the bottom


1090
00:53:59,576 --> 00:54:02,376
of the preview to
rotate it, or if I want


1091
00:54:02,376 --> 00:54:05,196
to see both orientations at
the same time I can use the


1092
00:54:05,196 --> 00:54:09,136
"+" button again to add
another preview and now


1093
00:54:09,136 --> 00:54:11,066
that lets me see both
orientations at once.


1094
00:54:11,986 --> 00:54:15,316
As you can see in landscape the
buttons are once again sitting


1095
00:54:15,506 --> 00:54:18,626
side-by-side and that's because
we've only changed our layout


1096
00:54:18,706 --> 00:54:20,436
for compact width
and regular height.


1097
00:54:21,046 --> 00:54:24,556
An iPhone in landscape
corresponds to compact width,


1098
00:54:24,556 --> 00:54:27,336
compact height and so
those edits didn't apply.


1099
00:54:27,956 --> 00:54:31,136
Just in case you
didn't believe me,


1100
00:54:31,136 --> 00:54:33,366
now I'll actually run
this in the simulator.


1101
00:54:39,836 --> 00:54:43,036
All right, so here we have
my Primary View Controller


1102
00:54:43,036 --> 00:54:46,166
with those three buttons and, as
you can see, it's now fullscreen


1103
00:54:46,166 --> 00:54:47,186
since we're running on a phone.


1104
00:54:48,406 --> 00:54:51,296
When I tap the Play button it
takes me to my character menu


1105
00:54:51,366 --> 00:54:53,586
and those buttons are
stacked vertically just


1106
00:54:53,586 --> 00:54:56,976
like we expected, and
when I rotate they move


1107
00:54:56,976 --> 00:55:03,856
to sit side-by-side.


1108
00:55:04,066 --> 00:55:05,406
Let's recap what we
saw in that demo.


1109
00:55:06,646 --> 00:55:09,956
First, we used auto layout
to design a flexible UI


1110
00:55:10,316 --> 00:55:12,136
that works well for
multiple Size Classes.


1111
00:55:12,546 --> 00:55:15,756
For example, my image view
used a horizontal centering


1112
00:55:15,756 --> 00:55:17,926
constraint to position itself


1113
00:55:17,926 --> 00:55:21,986
for both compact width
and regular width.


1114
00:55:22,146 --> 00:55:24,776
Next, I showed you how
you can override subviews


1115
00:55:24,776 --> 00:55:27,896
and constraints for specific
Size Classes when you need to.


1116
00:55:28,216 --> 00:55:31,516
I did this to give my buttons
a vertical layout for iPhones


1117
00:55:31,516 --> 00:55:35,906
in portrait and a separate
layout for all other cases.


1118
00:55:37,296 --> 00:55:40,616
And finally I showed you how you
can preview different devices


1119
00:55:40,616 --> 00:55:44,026
and orientations, OS
versions, even localizations,


1120
00:55:44,226 --> 00:55:47,276
all within Xcode using the
Preview Assistant Editor.


1121
00:55:49,496 --> 00:55:51,516
Today you saw a lot
of new concepts


1122
00:55:51,516 --> 00:55:52,696
for developing adaptive UIs.


1123
00:55:53,806 --> 00:55:56,856
Jacob introduced you to Trait
Collections and Size Classes


1124
00:55:56,856 --> 00:55:58,276
which allow you to
modify your UI


1125
00:55:58,766 --> 00:56:01,926
in response to changes in size.


1126
00:56:02,126 --> 00:56:04,686
He also introduced a
new API that allows you


1127
00:56:04,686 --> 00:56:06,436
to decouple Child
View Controllers


1128
00:56:06,436 --> 00:56:08,866
from their containers
and to collapse


1129
00:56:08,866 --> 00:56:10,736
and expand
UISplitViewControllers.


1130
00:56:12,166 --> 00:56:14,256
Finally I showed you some
new features we've added


1131
00:56:14,256 --> 00:56:16,006
to Interface Builder
and Xcode 6.


1132
00:56:17,376 --> 00:56:20,516
If you'd like more information
you can contact our Evangelists


1133
00:56:20,516 --> 00:56:22,066
or you can post on
the Developer Forum.


1134
00:56:23,376 --> 00:56:25,726
We recommend checking out the
other View Controller-related


1135
00:56:25,726 --> 00:56:27,266
sessions from this
year's conference


1136
00:56:27,486 --> 00:56:30,366
and we'll also be having an
Interface Builder session later


1137
00:56:30,366 --> 00:56:31,536
this afternoon in this room.


1138
00:56:32,266 --> 00:56:33,376
And with that, thank you


1139
00:56:33,376 --> 00:56:35,426
and I hope you enjoyed
Developing Adaptive UIs


1140
00:56:35,566 --> 00:56:36,296
[applause] in iOS 8.


1141
00:56:36,296 --> 00:56:37,016
-


1142
00:56:37,016 --> 00:56:41,886
[ Applause ]

