1
00:00:24,516 --> 00:00:31,166
[Applause]


2
00:00:31,666 --> 00:00:32,086
>> CHRIS JENSEN: Good morning.


3
00:00:33,046 --> 00:00:34,916
Welcome to Introducing
WatchConnectivity.


4
00:00:35,436 --> 00:00:36,096
My name is Chris.


5
00:00:36,416 --> 00:00:37,906
Today I'm joined by
my coworker Alex,


6
00:00:38,106 --> 00:00:39,226
who will join me on stage later.


7
00:00:39,226 --> 00:00:42,886
We are excited to show you
what we have been working


8
00:00:42,886 --> 00:00:47,706
on for both watchOS 2 and iOS 9.


9
00:00:47,706 --> 00:00:49,566
We think what we are going
to talk about today is going


10
00:00:49,566 --> 00:00:51,376
to help you make more responsive


11
00:00:51,836 --> 00:00:53,876
and better user experiences
for your Watch apps.


12
00:00:55,276 --> 00:00:57,306
To do a brief recap of
where we are coming from,


13
00:00:57,636 --> 00:01:00,106
let's look at what the world
looked like in watchOS 1.


14
00:01:00,616 --> 00:01:04,316
Your iOS app and your WatchKit
extension were both living


15
00:01:04,506 --> 00:01:07,826
on the iPhone, and we were
taking care of the communication


16
00:01:08,606 --> 00:01:12,746
to the WatchKit app, and they
could both share a data store.


17
00:01:12,976 --> 00:01:15,486
In watchOS 2, we've moved
the WatchKit extension


18
00:01:15,486 --> 00:01:18,536
over to the Watch, and now
your app is running natively


19
00:01:18,646 --> 00:01:19,306
on the Watch.


20
00:01:19,506 --> 00:01:20,926
This has a lot of benefits,


21
00:01:20,926 --> 00:01:23,366
but it also means they now
each have their own data store.


22
00:01:24,526 --> 00:01:27,766
The obvious next question is
going to be: How do we get data


23
00:01:28,336 --> 00:01:29,536
over to the Apple Watch?


24
00:01:29,916 --> 00:01:31,026
That's what we will
discuss today.


25
00:01:31,646 --> 00:01:36,756
So we are going to show
you two main ways to deal


26
00:01:36,756 --> 00:01:39,236
with this problem, of
getting the data to the Watch.


27
00:01:39,576 --> 00:01:42,226
There's the new
WatchConnectivity framework,


28
00:01:42,226 --> 00:01:46,166
which we are introducing
in watchOS 2 and iOS 9.


29
00:01:47,326 --> 00:01:52,386
And then there's the
NSURLSession APIs available


30
00:01:52,386 --> 00:01:53,066
in Foundation.


31
00:01:53,586 --> 00:01:55,686
These are still available
to your WatchKit extension,


32
00:01:56,386 --> 00:01:59,406
and it's now available
native on watchOS 2.


33
00:02:00,806 --> 00:02:03,866
We think the topics we are
going to discuss today apply


34
00:02:03,986 --> 00:02:07,936
to most Watch apps,
and we think it's going


35
00:02:07,986 --> 00:02:10,395
to apply to most of you.


36
00:02:10,455 --> 00:02:12,856
This is exemplified by
the amount of examples


37
00:02:12,856 --> 00:02:14,686
that we will be using in
our presentation today.


38
00:02:15,526 --> 00:02:18,486
You can see there's a wide range
here, and we hope that every one


39
00:02:18,486 --> 00:02:20,916
of you will be able to identify
with at least one of these.


40
00:02:22,276 --> 00:02:24,976
So let's get started with
discussing WatchConnectivity.


41
00:02:24,976 --> 00:02:26,716
So this is the new
framework we introduced


42
00:02:26,716 --> 00:02:28,846
in watchOS 2 and iOS 9.


43
00:02:29,526 --> 00:02:31,686
It's available in both
platforms, and pretty much all


44
00:02:31,686 --> 00:02:33,756
of the APIs are available
in both sides.


45
00:02:33,976 --> 00:02:36,826
There are couple of
iPhone-specific APIs


46
00:02:37,036 --> 00:02:38,156
that we will get into.


47
00:02:39,096 --> 00:02:42,386
The first thing you want
to do when you are starting


48
00:02:42,386 --> 00:02:44,576
to adopt WatchConnectivity
is you want


49
00:02:44,576 --> 00:02:45,686
to go through the setup.


50
00:02:46,646 --> 00:02:49,336
We recommend that you
set this up very early


51
00:02:49,336 --> 00:02:51,746
in your app's life
cycle on both sides,


52
00:02:52,066 --> 00:02:55,296
both on the WatchKit
extension, running on the Watch


53
00:02:55,696 --> 00:02:57,266
and in your iOS 9 apps.


54
00:02:57,956 --> 00:03:00,676
You want to make sure you
do this setup in a code path


55
00:03:01,146 --> 00:03:02,686
that will be executed even


56
00:03:02,686 --> 00:03:03,916
if you are being
background launched.


57
00:03:03,916 --> 00:03:07,226
So, don't put it inside, like, a
view controller's View Did Load,


58
00:03:07,396 --> 00:03:09,006
because when you're being
launched in the background,


59
00:03:09,006 --> 00:03:09,696
those won't get called.


60
00:03:10,236 --> 00:03:12,386
So the first thing
you want to do


61
00:03:12,466 --> 00:03:15,216
in your iOS app is
you will check to see


62
00:03:15,216 --> 00:03:16,676
if the WCSession is supported.


63
00:03:17,166 --> 00:03:19,296
You might have a
universal iOS app.


64
00:03:19,586 --> 00:03:21,646
Which means this code may
be executing on an iPad,


65
00:03:22,336 --> 00:03:24,086
where WatchConnectivity
is not available.


66
00:03:25,296 --> 00:03:28,926
So check this up front before
you do any Watch-specific work


67
00:03:28,926 --> 00:03:32,006
because we don't want you to
waste a bunch of CPU doing work


68
00:03:32,006 --> 00:03:33,956
that won't be used anywhere.


69
00:03:34,426 --> 00:03:36,416
The next thing you want to
do is create an instance


70
00:03:36,416 --> 00:03:38,766
of our object, and you do that
by calling Default Session.


71
00:03:38,766 --> 00:03:42,946
And then you want to set a
delegate on the session object,


72
00:03:43,896 --> 00:03:45,776
and then finally you
want to call Activate.


73
00:03:45,916 --> 00:03:48,756
This will go and set up
the WCSession object,


74
00:03:48,966 --> 00:03:52,016
initialize all the properties,
and once this call returns,


75
00:03:52,576 --> 00:03:54,616
all the properties
will be updated


76
00:03:54,616 --> 00:03:56,836
with the correct
initialization values.


77
00:03:57,506 --> 00:04:01,336
And also at this point,
any delegate callbacks,


78
00:04:01,336 --> 00:04:03,246
any cued-up content
can start coming in.


79
00:04:03,936 --> 00:04:04,896
That's another reason
why you want


80
00:04:04,896 --> 00:04:06,756
to do this very early
and always.


81
00:04:07,016 --> 00:04:09,546
There might be content waiting
to be delivered to your app.


82
00:04:10,626 --> 00:04:12,736
So make sure you do
these steps up front.


83
00:04:13,676 --> 00:04:15,166
The next thing is you
are going to want to do,


84
00:04:15,166 --> 00:04:17,875
once you completed that step,
is look at the session states.


85
00:04:17,956 --> 00:04:22,426
This will inform your app about
what the current relationship


86
00:04:22,466 --> 00:04:24,816
between the iOS app
and the Watch is.


87
00:04:26,166 --> 00:04:30,066
So these properties are only
available on the iPhone app.


88
00:04:30,246 --> 00:04:32,866
It's informing the iOS
app what its relationship


89
00:04:32,866 --> 00:04:33,516
with the Watch is.


90
00:04:33,796 --> 00:04:36,566
So you don't need to use
this in your Watch app,


91
00:04:36,566 --> 00:04:38,006
and they are mostly
not available.


92
00:04:39,116 --> 00:04:40,876
So for this example,
we will use a news app.


93
00:04:41,556 --> 00:04:43,446
Something that pulls
down the most recent


94
00:04:43,446 --> 00:04:44,386
interesting articles.


95
00:04:46,066 --> 00:04:48,886
And it's going to first go
through the setup process


96
00:04:48,926 --> 00:04:49,656
that we just discussed.


97
00:04:49,656 --> 00:04:51,396
It will do this early
in its life cycle.


98
00:04:51,636 --> 00:04:55,626
Next, it will want to check, is
this device paired with a Watch?


99
00:04:55,886 --> 00:04:58,806
If it's not paired, then it's
almost as if this is running


100
00:04:58,806 --> 00:05:00,306
on an iPad, there's
nothing more to do.


101
00:05:00,306 --> 00:05:01,216
There's no one else to talk to.


102
00:05:01,216 --> 00:05:02,526
So at that point you might


103
00:05:02,526 --> 00:05:04,546
as well stop doing any
Watch-specific work.


104
00:05:05,456 --> 00:05:08,476
But the user will go out and
buy a new Watch, and he will go


105
00:05:08,476 --> 00:05:09,646
through the pairing process.


106
00:05:10,096 --> 00:05:13,096
He will launch the
Apple Watch app.


107
00:05:13,676 --> 00:05:14,866
Work his way through
the pairing,


108
00:05:14,866 --> 00:05:17,006
setting these devices up.


109
00:05:17,566 --> 00:05:19,906
And now, when your app launches,


110
00:05:20,146 --> 00:05:21,586
you will get a delegate
callback.


111
00:05:22,406 --> 00:05:24,266
The session Watch
state did change.


112
00:05:25,046 --> 00:05:27,296
When you check the value
of the paired property,


113
00:05:27,356 --> 00:05:29,016
you will see it will
return True,


114
00:05:29,016 --> 00:05:30,286
because the devices
are now paired.


115
00:05:30,286 --> 00:05:32,716
So this is a trigger
for you to go ahead


116
00:05:32,716 --> 00:05:34,986
and check this next
property, which is,


117
00:05:35,026 --> 00:05:36,146
is your Watch app installed?


118
00:05:36,146 --> 00:05:38,806
If it is not installed,
then there's no one


119
00:05:38,806 --> 00:05:40,236
to talk to, your work is done.


120
00:05:40,666 --> 00:05:44,176
But -- and by default, the
Watch app will be default --


121
00:05:44,176 --> 00:05:46,426
but the user might choose to
uninstall it for some reason.


122
00:05:46,426 --> 00:05:50,046
In this case, the user will
go ahead and reinstall it.


123
00:05:50,216 --> 00:05:53,746
He will go back into the Apple
Watch app and he will flip


124
00:05:53,746 --> 00:05:56,956
that switch, and now if
your Apple is running,


125
00:05:57,046 --> 00:05:58,506
you will again get
the delegate callback


126
00:05:58,786 --> 00:06:00,496
and you can check
this properties value,


127
00:06:00,876 --> 00:06:03,486
and you would see that Watch
App Installed is now True.


128
00:06:04,656 --> 00:06:06,816
Now you do have someone
to communicate with.


129
00:06:06,876 --> 00:06:07,996
This should be a trigger for you


130
00:06:07,996 --> 00:06:10,346
to start communicating
with your Watch app.


131
00:06:10,346 --> 00:06:14,136
It will need content that
only you can provide for it.


132
00:06:14,636 --> 00:06:18,116
Whenever the Watch App
Installed switches to True,


133
00:06:18,476 --> 00:06:20,236
there's this other
property that's going


134
00:06:20,236 --> 00:06:22,146
to be available,
Watch Directory URL.


135
00:06:22,446 --> 00:06:23,416
You will find that this,


136
00:06:23,416 --> 00:06:25,456
whenever Watch App
Installed is True,


137
00:06:25,746 --> 00:06:28,956
Watch Directory URL will
have a non-nil value.


138
00:06:28,956 --> 00:06:31,256
It will be a path to a directory


139
00:06:31,256 --> 00:06:32,706
that we create in
your container.


140
00:06:33,776 --> 00:06:36,416
Let's discuss this a
little bit more in depth.


141
00:06:36,476 --> 00:06:39,786
So the directory and its
contents, its lifetime is tied


142
00:06:39,786 --> 00:06:41,386
to the Watch App
Installed property.


143
00:06:41,596 --> 00:06:45,186
This means whenever Watch App
Installed switches from True


144
00:06:45,186 --> 00:06:48,376
to False, this directory and
all of its contents goes away.


145
00:06:48,736 --> 00:06:50,456
Whenever it switches
back to True,


146
00:06:50,506 --> 00:06:53,876
the directory will be present,
but this time it will be empty.


147
00:06:54,576 --> 00:06:56,856
We recommend you only
use it for data relevant


148
00:06:56,856 --> 00:06:58,556
to the specific instance
of your Watch app.


149
00:06:59,146 --> 00:07:00,276
What do I mean by instance?


150
00:07:00,756 --> 00:07:04,096
Well, things like last queued
item marker would be a good


151
00:07:04,096 --> 00:07:04,846
thing to store there.


152
00:07:04,846 --> 00:07:07,076
If the user uninstalls
and reinstalls your app,


153
00:07:07,296 --> 00:07:09,536
that Watch app is starting
with a clean container.


154
00:07:09,866 --> 00:07:12,786
Therefore, this directory will
start clean, and you will need


155
00:07:12,786 --> 00:07:16,806
to sync up where your
app is communicating.


156
00:07:16,806 --> 00:07:20,336
Other things you can put in
is something like preferences.


157
00:07:20,336 --> 00:07:25,416
When the user is running the
iOS app for the first time,


158
00:07:25,416 --> 00:07:27,936
you might like him to
set up what he would


159
00:07:27,936 --> 00:07:29,806
like his Watch app
experience to be.


160
00:07:29,996 --> 00:07:32,576
Maybe he doesn't want
to show the full content


161
00:07:32,576 --> 00:07:35,176
but the top ten news items
for a particular topic


162
00:07:35,176 --> 00:07:37,306
like international
news or sports.


163
00:07:37,806 --> 00:07:39,876
This would be a good
place to store them.


164
00:07:40,446 --> 00:07:43,866
Also if you are taking
your full-sized assets


165
00:07:44,026 --> 00:07:46,506
and generating Watch-specific
assets,


166
00:07:46,506 --> 00:07:49,686
you are compressing
images, audio, video,


167
00:07:50,556 --> 00:07:52,576
this would be a good place to
store those while they are cued


168
00:07:52,576 --> 00:07:55,086
for transfer, using the
WatchConnectivity APIs


169
00:07:55,086 --> 00:07:55,876
that we will discuss later.


170
00:07:56,126 --> 00:07:58,386
So that's the Watch directory.


171
00:07:59,266 --> 00:08:01,196
We suggest you store
content in there,


172
00:08:01,196 --> 00:08:03,696
because then we will clean it
up, if the Watch goes away,


173
00:08:03,726 --> 00:08:06,176
if he unpairs his watch,
we will automatically clean


174
00:08:06,176 --> 00:08:11,316
up this content, so you don't
have to micromanage all of this.


175
00:08:11,316 --> 00:08:12,536
The final property that's part


176
00:08:12,536 --> 00:08:14,956
of the session state is
Complication Enabled.


177
00:08:15,916 --> 00:08:18,716
Currently, the user does not
have the complication enabled,


178
00:08:18,886 --> 00:08:22,206
but he will go in and edit his
Watch face and he will enable it


179
00:08:22,816 --> 00:08:24,796
and you will get the
same delicate callback,


180
00:08:24,886 --> 00:08:26,246
session or stated change.


181
00:08:26,836 --> 00:08:29,206
And when you check this
property, it will now be True.


182
00:08:32,006 --> 00:08:35,506
Now you have set up your
WatchConnectivity session.


183
00:08:35,986 --> 00:08:38,216
You have figured out what
the state of the world is,


184
00:08:38,216 --> 00:08:42,126
what your relationship
between your iOS app


185
00:08:42,126 --> 00:08:43,035
and your Watch app is.


186
00:08:43,496 --> 00:08:44,326
The next thing you will want


187
00:08:44,326 --> 00:08:47,386
to do is start communicating
information over to the Watch


188
00:08:47,386 --> 00:08:49,036
or from the Watch
to the iOS app.


189
00:08:50,046 --> 00:08:53,116
And to do that, I will hand
over to Alex, who will talk


190
00:08:53,116 --> 00:08:54,256
about the communication APIs.


191
00:08:55,516 --> 00:09:04,176
[Applause]


192
00:09:04,676 --> 00:09:04,876
>> ALEXANDER LEDWITH: Thank you.


193
00:09:05,006 --> 00:09:08,676
Okay. So like Chris said,
you set up your session.


194
00:09:09,586 --> 00:09:12,336
You have checked that
devices are paired,


195
00:09:12,456 --> 00:09:15,046
your Apple Watch
app is installed.


196
00:09:15,406 --> 00:09:17,896
Now let's start talking
about how you can communicate


197
00:09:18,046 --> 00:09:19,096
between these two devices.


198
00:09:19,886 --> 00:09:23,636
We have a couple of different
categories for communication.


199
00:09:23,986 --> 00:09:26,716
First category is
background transfers.


200
00:09:27,456 --> 00:09:29,336
Background transfers
are meant for content


201
00:09:29,606 --> 00:09:32,776
that is not needed immediately
on the receiving side.


202
00:09:33,806 --> 00:09:36,606
Because the content is
not needed immediately,


203
00:09:36,886 --> 00:09:40,076
this means the system can
do more intelligent things


204
00:09:40,076 --> 00:09:42,186
when transferring that content.


205
00:09:42,776 --> 00:09:46,516
In addition to background
transfers, we are also going


206
00:09:46,516 --> 00:09:48,066
to talk about interactive
messaging.


207
00:09:48,736 --> 00:09:52,386
Interactive messaging is
meant for communicating


208
00:09:52,386 --> 00:09:55,426
between two apps with
live communication.


209
00:09:55,526 --> 00:09:56,626
So both apps are up and running.


210
00:09:56,626 --> 00:09:58,606
They are sending
messages back and forth,


211
00:09:59,186 --> 00:10:02,406
request response,
that kind of thing.


212
00:10:02,716 --> 00:10:04,166
Some examples of
when you might want


213
00:10:04,166 --> 00:10:05,386
to use interactive messaging.


214
00:10:05,616 --> 00:10:08,086
Say you have a game where
the user is using both apps


215
00:10:08,266 --> 00:10:09,176
at the same time.


216
00:10:09,996 --> 00:10:13,136
Or you are on your Apple
Watch, and you need


217
00:10:13,136 --> 00:10:15,736
to trigger something to
happen on the iOS side.


218
00:10:16,316 --> 00:10:19,326
Like you want to
trigger the iOS device


219
00:10:19,326 --> 00:10:21,326
to start tracking
the user's location.


220
00:10:22,456 --> 00:10:26,176
So let's dig into this first
one, background transfers.


221
00:10:27,146 --> 00:10:28,186
The first thing to talk


222
00:10:28,186 --> 00:10:31,226
about for background
transfers is the type


223
00:10:31,226 --> 00:10:34,346
of content your apps have
and how the user is going


224
00:10:34,346 --> 00:10:36,146
to interact with
these two devices.


225
00:10:36,726 --> 00:10:38,986
So let's take that
news app example again,


226
00:10:39,166 --> 00:10:40,736
this news app has some content.


227
00:10:41,296 --> 00:10:44,546
It's fetching some more
content from the server,


228
00:10:44,896 --> 00:10:47,166
and it determines some of
this content could be useful


229
00:10:47,446 --> 00:10:48,376
for your Watch.


230
00:10:49,586 --> 00:10:52,926
Now, the user isn't using the
Watch at this point in time.


231
00:10:53,356 --> 00:10:56,566
So the content isn't needed
immediately on the Watch side.


232
00:10:57,266 --> 00:11:00,746
Rather, the iOS app, the news
app, wants to just pick some


233
00:11:00,746 --> 00:11:03,456
of that content and queue
it up with the system,


234
00:11:03,656 --> 00:11:07,216
and then allow the system
to pick the right conditions


235
00:11:07,216 --> 00:11:08,786
to transfer that content across.


236
00:11:09,396 --> 00:11:11,976
The system will look at things
like power, performance,


237
00:11:12,066 --> 00:11:14,516
when the user is actually
using the receiving side,


238
00:11:14,716 --> 00:11:16,496
in this case the Apple Watch.


239
00:11:17,396 --> 00:11:20,366
When conditions are right, that
content will transfer across,


240
00:11:21,136 --> 00:11:23,736
and it will wait on
the receiving side,


241
00:11:23,826 --> 00:11:25,746
in this case the Apple Watch,


242
00:11:25,746 --> 00:11:28,706
until the user launches
the receiving app.


243
00:11:28,706 --> 00:11:29,876
When the receiving
app is launched,


244
00:11:30,136 --> 00:11:31,676
then that content
will be delivered


245
00:11:31,676 --> 00:11:33,976
and the app can update
its state.


246
00:11:34,476 --> 00:11:38,776
So this is what background
transfers provide.


247
00:11:38,776 --> 00:11:41,036
It allows you to
queue up content.


248
00:11:41,776 --> 00:11:45,816
The system is going to
transfer the content for you.


249
00:11:46,486 --> 00:11:50,286
This allows the sending side,
the sending side app, to exit.


250
00:11:50,646 --> 00:11:51,806
The system will handle the rest.


251
00:11:52,566 --> 00:11:55,186
It allows the system to pick
the opportune time to transfer


252
00:11:55,186 --> 00:11:59,726
that content, and it allows the
system to store the information


253
00:11:59,726 --> 00:12:03,206
on the receiving side and wait
for the receiving app to launch.


254
00:12:03,696 --> 00:12:06,946
For a lot of the
content your apps have,


255
00:12:07,516 --> 00:12:10,766
we definitely recommend that
you use background transfers.


256
00:12:11,366 --> 00:12:15,416
The reason is most of that
content will not be needed


257
00:12:15,416 --> 00:12:16,866
immediately on the
receiving side.


258
00:12:17,156 --> 00:12:18,266
Rather, it will be needed


259
00:12:18,266 --> 00:12:20,506
when the receiving
app actually launches.


260
00:12:20,506 --> 00:12:24,286
So let's get into
some nuts and bolts.


261
00:12:25,036 --> 00:12:28,136
We have three different types
of background transfers.


262
00:12:28,946 --> 00:12:31,916
The first type is the
application context.


263
00:12:32,626 --> 00:12:35,276
The application context
represents a single set


264
00:12:35,386 --> 00:12:37,566
of the most interesting
information your app has


265
00:12:37,566 --> 00:12:38,696
to offer to the other side.


266
00:12:39,846 --> 00:12:43,106
So, for example, let's say on
the iOS side you have an app


267
00:12:43,476 --> 00:12:46,646
that tracks the user's location,
and based on that location,


268
00:12:47,096 --> 00:12:50,516
the app picks a restaurant
in that location and wants


269
00:12:50,516 --> 00:12:52,076
to recommend it to the user.


270
00:12:52,846 --> 00:12:54,856
In addition to sharing
restaurant on the iOS side,


271
00:12:54,996 --> 00:12:57,046
you also want to
show that restaurant


272
00:12:57,046 --> 00:12:58,366
in the Apple Watch app.


273
00:12:59,126 --> 00:13:00,726
So you could package
up that suggestion


274
00:13:00,726 --> 00:13:02,606
into the application context,


275
00:13:02,976 --> 00:13:04,446
and that will get
transferred across,


276
00:13:04,746 --> 00:13:07,486
and then the next time
the user launches the app


277
00:13:07,686 --> 00:13:10,286
on the Apple Watch side,
the content will be there,


278
00:13:10,286 --> 00:13:11,886
that suggestion will
be there to show.


279
00:13:13,036 --> 00:13:14,476
Another example of
when you might want


280
00:13:14,476 --> 00:13:19,226
to use application context, say
you have a social networking app


281
00:13:19,576 --> 00:13:22,916
on the iOS side, it fetches a
bunch of posts and determines


282
00:13:22,916 --> 00:13:27,696
that there's a top 10 set
of really interesting posts


283
00:13:27,696 --> 00:13:30,226
that it wants to show
on the Apple Watch side.


284
00:13:30,706 --> 00:13:32,746
That way the user can
look at the Apple Watch


285
00:13:32,966 --> 00:13:34,666
and see interesting
information right away.


286
00:13:35,476 --> 00:13:37,636
You can also package up
of those top 10 posts


287
00:13:37,686 --> 00:13:40,706
into an application context,
which will get sent across.


288
00:13:41,916 --> 00:13:44,696
Now application context
is the simplest way


289
00:13:44,696 --> 00:13:46,806
of transferring content
in the background,


290
00:13:46,956 --> 00:13:48,716
but if you need something
a little more complex,


291
00:13:49,376 --> 00:13:51,736
or you need to queue up
more than a single set


292
00:13:51,976 --> 00:13:54,636
of information, we are
offering two ways to do that.


293
00:13:55,426 --> 00:13:58,126
The first way is
user info transfer.


294
00:13:58,956 --> 00:14:01,626
This allows you to transfer
user info dictionaries,


295
00:14:01,896 --> 00:14:04,246
in-memory content that
you want to pack up.


296
00:14:04,336 --> 00:14:07,076
An example of this is
let's say you have a game


297
00:14:07,526 --> 00:14:08,646
on the Apple Watch side.


298
00:14:08,976 --> 00:14:10,436
The user progresses
through levels,


299
00:14:11,326 --> 00:14:14,156
and as the user progresses
through levels,


300
00:14:14,156 --> 00:14:17,816
you want to sync back that
progression to the iOS app.


301
00:14:18,306 --> 00:14:20,236
The iOS app will
show some nice graphs


302
00:14:20,856 --> 00:14:22,636
on how the user did
in each level.


303
00:14:23,276 --> 00:14:26,386
In addition to the
user info transfer,


304
00:14:26,386 --> 00:14:28,606
we are also offering
file transfer.


305
00:14:28,606 --> 00:14:29,916
This is very similar.


306
00:14:29,986 --> 00:14:32,626
It allows you to queue up
content, except in this case,


307
00:14:32,676 --> 00:14:34,696
the content is a file.


308
00:14:35,736 --> 00:14:38,176
One example that we are going
to use in this presentation


309
00:14:38,176 --> 00:14:40,476
for file transfer is let's
say you have an iOS app


310
00:14:40,476 --> 00:14:42,876
that allows the user
to edit images


311
00:14:43,576 --> 00:14:45,556
and after they edit
those images,


312
00:14:45,726 --> 00:14:47,206
the user can pick
their favorites.


313
00:14:47,206 --> 00:14:48,846
And those favorited images
are the ones you want


314
00:14:48,846 --> 00:14:49,896
to show in Apple Watch.


315
00:14:50,466 --> 00:14:52,576
You can use file
transfer to transfer


316
00:14:52,576 --> 00:14:54,076
across those favorited images.


317
00:14:54,436 --> 00:14:56,086
So they're available
on Apple Watch


318
00:14:56,326 --> 00:14:57,236
so the user can show them off


319
00:14:57,236 --> 00:15:00,136
to their friends,
that kind of thing.


320
00:15:00,346 --> 00:15:02,576
So let's dig into
these individually.


321
00:15:03,706 --> 00:15:05,996
We will start with
application context.


322
00:15:07,006 --> 00:15:07,926
The example we will use


323
00:15:07,926 --> 00:15:11,206
for application context is the
social networking app example.


324
00:15:11,256 --> 00:15:15,106
I mentioned before, this app
on iOS fetches all the posts


325
00:15:15,106 --> 00:15:16,386
from the social networking site


326
00:15:16,526 --> 00:15:19,596
and then it picks the most
interesting ones to send


327
00:15:19,596 --> 00:15:21,776
over to the Watch app.


328
00:15:22,096 --> 00:15:22,936
The first thing to talk


329
00:15:22,936 --> 00:15:26,566
about with application context
are these two properties.


330
00:15:27,896 --> 00:15:30,126
The first property is
Application Context.


331
00:15:30,686 --> 00:15:34,256
It is the property that
stores the latest content


332
00:15:34,256 --> 00:15:36,886
on the sending side, and
then on the receiving side,


333
00:15:36,886 --> 00:15:38,646
there's Received
Application Context,


334
00:15:38,916 --> 00:15:41,696
which will store the
latest received content


335
00:15:41,746 --> 00:15:42,766
on the receiving side.


336
00:15:43,836 --> 00:15:49,446
So let's say this iOS app
has fetched a bunch of posts,


337
00:15:49,736 --> 00:15:53,016
and it's packaged up the most
interesting ones for the Watch.


338
00:15:53,016 --> 00:15:56,106
It's going to want to call
Update Application Context.


339
00:15:57,016 --> 00:16:00,486
This method takes a dictionary,
representing the latest,


340
00:16:00,486 --> 00:16:02,386
most interesting state
you want to send across.


341
00:16:04,036 --> 00:16:06,716
This content, we
take this content


342
00:16:06,716 --> 00:16:09,796
after Update Application Context
is called, and we push it


343
00:16:09,796 --> 00:16:11,786
down into the Application
Context property.


344
00:16:11,786 --> 00:16:13,886
And this content will sit here,


345
00:16:14,036 --> 00:16:16,286
and the system will determine
a good time to transfer


346
00:16:16,286 --> 00:16:18,086
that content across, maybe


347
00:16:18,086 --> 00:16:20,316
when the user starts
actually using their Watch.


348
00:16:21,656 --> 00:16:26,866
Now, in the meantime, this iOS
app could fetch more content


349
00:16:27,016 --> 00:16:29,086
and determine that
there's a newer set


350
00:16:29,446 --> 00:16:31,846
of interesting information
that it wants


351
00:16:31,846 --> 00:16:33,806
to send over to the Watch.


352
00:16:34,196 --> 00:16:36,466
In this case, it's going to
want call Update Application


353
00:16:36,466 --> 00:16:37,506
Context again.


354
00:16:37,956 --> 00:16:40,346
And then we're going
to push that content


355
00:16:40,346 --> 00:16:42,486
down into the Application
Context property.


356
00:16:42,976 --> 00:16:45,446
This is going to bump out the
old relevant state and put


357
00:16:45,446 --> 00:16:47,636
in the new relevant state
because what we really care


358
00:16:47,636 --> 00:16:51,406
about is the most
interesting, latest set of data.


359
00:16:52,126 --> 00:16:55,326
Now, this new content is
going to sit here, again,


360
00:16:55,326 --> 00:16:56,726
waiting for the system
to pick a good time


361
00:16:56,726 --> 00:16:58,316
to transfer that content across.


362
00:16:59,326 --> 00:17:00,756
When the system does
pick a good time,


363
00:17:01,156 --> 00:17:02,496
that content will come across.


364
00:17:02,496 --> 00:17:04,465
It will sit on the
Apple Watch side.


365
00:17:05,076 --> 00:17:06,756
And it will wait for the user


366
00:17:06,756 --> 00:17:10,366
to launch the app,
the Apple Watch app.


367
00:17:10,675 --> 00:17:13,205
When that app is launched,
we will deliver that content


368
00:17:13,205 --> 00:17:15,036
to your WatchKit extension,
the place where all


369
00:17:15,036 --> 00:17:18,165
of your code is executing
on the Apple Watch side.


370
00:17:18,806 --> 00:17:22,576
So that's the flow of
application context.


371
00:17:23,205 --> 00:17:25,756
Now, let's take a
look at some code.


372
00:17:26,425 --> 00:17:29,186
The first thing you want to
do is you want to package


373
00:17:29,656 --> 00:17:32,886
up your context dictionary,
representing the latest state


374
00:17:33,116 --> 00:17:34,516
that you want to send across.


375
00:17:34,846 --> 00:17:37,316
And then you will call
Update Application Context


376
00:17:37,356 --> 00:17:38,356
with that dictionary.


377
00:17:38,816 --> 00:17:42,276
The last thing to mention
about this code example is


378
00:17:42,276 --> 00:17:45,466
that the call to Update
Application Context is wrapped


379
00:17:45,676 --> 00:17:49,646
in a Do Catch block, and the
call is prepended by a Try.


380
00:17:50,446 --> 00:17:52,076
This is new error
handling in Swift.


381
00:17:52,516 --> 00:17:54,906
Update Application Context
can return an error.


382
00:17:55,616 --> 00:17:58,956
And if an error is returned,
the Catch block will be invoked,


383
00:17:59,536 --> 00:18:01,906
and we strongly suggest
that you handle your


384
00:18:01,906 --> 00:18:02,836
errors appropriately.


385
00:18:03,426 --> 00:18:08,346
So that's the sending side
for application context.


386
00:18:08,846 --> 00:18:10,596
Now, let's take a look
at the receiving side.


387
00:18:11,806 --> 00:18:12,756
On the receiving side,


388
00:18:13,086 --> 00:18:15,056
the receivers will get
this delegate callback,


389
00:18:15,216 --> 00:18:16,946
Did Receive Application Context.


390
00:18:16,946 --> 00:18:19,256
It's going to pass
through the dictionary


391
00:18:19,366 --> 00:18:20,496
that the sender packaged up.


392
00:18:21,276 --> 00:18:26,426
And at this point, the
receiver can take that content


393
00:18:26,716 --> 00:18:27,946
and update its app state.


394
00:18:28,776 --> 00:18:30,646
One thing to know about
this delegate callback


395
00:18:30,646 --> 00:18:34,156
and all delegate callbacks in
our API is that they're returned


396
00:18:34,156 --> 00:18:36,176
on a non-main serial queue.


397
00:18:36,176 --> 00:18:38,916
If you need to do
something on the main queue


398
00:18:38,916 --> 00:18:41,816
because maybe you're updating
some UI, you're going to need


399
00:18:41,816 --> 00:18:44,626
to dispatch over to the main
queue to do that updating


400
00:18:44,626 --> 00:18:47,366
of your UI based on this
content or something else.


401
00:18:48,876 --> 00:18:51,406
So that's application context.


402
00:18:52,306 --> 00:18:54,166
It's the most interesting
relevant content


403
00:18:54,166 --> 00:18:55,976
that your app has
for the other side.


404
00:18:56,546 --> 00:18:58,216
It does have overriding
behavior,


405
00:18:58,366 --> 00:19:03,996
and this is because you should
treat the latest content


406
00:19:04,256 --> 00:19:06,766
as the content that the
receiving side cares about


407
00:19:07,036 --> 00:19:10,426
and anything that's not
latest isn't relevant anymore.


408
00:19:11,686 --> 00:19:13,926
Application context
takes a dictionary.


409
00:19:14,696 --> 00:19:16,936
This dictionary takes
property list types.


410
00:19:17,706 --> 00:19:20,616
Property list types are basic
object types such as numbers,


411
00:19:20,616 --> 00:19:24,286
strings, basic collection
types, dictionaries, arrays.


412
00:19:25,126 --> 00:19:27,816
Apple has some great
documentation online


413
00:19:28,296 --> 00:19:31,966
if you want a refresher
on property list types.


414
00:19:33,316 --> 00:19:35,946
So we have some specific
recommended use cases


415
00:19:35,946 --> 00:19:37,376
for application context.


416
00:19:38,276 --> 00:19:41,726
Application context works really
well for many Apple Watch apps


417
00:19:41,846 --> 00:19:44,446
because many Apple
Watch apps show a subset


418
00:19:44,446 --> 00:19:46,216
of the information
the iOS app has.


419
00:19:47,226 --> 00:19:50,006
So, if your app works like
this, we suggest that you put


420
00:19:50,006 --> 00:19:53,306
that subset of the information
into the application context


421
00:19:53,656 --> 00:19:56,496
and let it get sent across
to the Apple Watch side.


422
00:19:56,906 --> 00:19:58,226
In addition to those apps,


423
00:19:59,016 --> 00:20:01,686
application context also
works really well for glances.


424
00:20:03,116 --> 00:20:05,726
Glances take the single
most interesting piece


425
00:20:05,726 --> 00:20:07,656
of data your apps have to offer.


426
00:20:08,096 --> 00:20:09,896
So we suggest you put
that piece of data


427
00:20:09,896 --> 00:20:12,976
into an application context on
the iOS side, so that it gets


428
00:20:12,976 --> 00:20:14,356
across to the Watch side.


429
00:20:14,826 --> 00:20:17,196
Then when the user swipes
up on the clock face


430
00:20:17,816 --> 00:20:20,306
to show your glance, that
data will be available.


431
00:20:21,686 --> 00:20:25,726
So moving on from application
context, now we are going


432
00:20:25,726 --> 00:20:27,376
to talk about user
info transfer.


433
00:20:28,316 --> 00:20:31,496
An example here that we are
going to use is you have a game


434
00:20:32,236 --> 00:20:33,426
on the Apple Watch side.


435
00:20:33,806 --> 00:20:36,176
The user progresses
through levels in this game,


436
00:20:36,446 --> 00:20:39,156
and as the user passes
one level, you are going


437
00:20:39,156 --> 00:20:41,396
to sync back the progress
that they made to the iOS side


438
00:20:41,736 --> 00:20:44,136
so that the iOS app can
show some nice graphs


439
00:20:44,796 --> 00:20:46,876
on how the user did
in that level.


440
00:20:47,876 --> 00:20:48,686
The first thing to talk


441
00:20:48,686 --> 00:20:52,136
about for user info transfer
is the outstanding user info


442
00:20:52,136 --> 00:20:52,926
transfer queue.


443
00:20:53,406 --> 00:20:56,026
This holds on to all the
content that's waiting


444
00:20:56,026 --> 00:20:57,566
to be transferred across.


445
00:20:58,506 --> 00:20:59,466
The current state of the world


446
00:20:59,556 --> 00:21:01,576
as the user progressed
through two levels.


447
00:21:02,596 --> 00:21:04,196
The progression is sitting


448
00:21:04,736 --> 00:21:07,616
in the outstanding
user transfer queue.


449
00:21:08,726 --> 00:21:10,766
And currently the user is
working on level three.


450
00:21:11,566 --> 00:21:13,846
Once they finish level three,
you are going to want to package


451
00:21:13,846 --> 00:21:18,166
up that content and call
Transfer User Info and pass


452
00:21:18,216 --> 00:21:20,536
through a dictionary that
represents their progress.


453
00:21:21,636 --> 00:21:24,116
This will take that dictionary,
and it will package it up


454
00:21:24,116 --> 00:21:26,856
and it will put it into
the outstanding user input


455
00:21:26,856 --> 00:21:27,596
transfer queue.


456
00:21:27,596 --> 00:21:30,266
Now this content will wait here


457
00:21:30,266 --> 00:21:32,366
until the system determines
it's a good time to transfer


458
00:21:32,366 --> 00:21:35,216
that content, based on power
considerations or maybe


459
00:21:35,406 --> 00:21:37,726
when the user starts
using their phone.


460
00:21:39,156 --> 00:21:42,176
The content will then transfer,
and like the previous API,


461
00:21:42,176 --> 00:21:46,306
we are going to wait until the
app on the iOS side launches.


462
00:21:46,936 --> 00:21:49,166
And when it does, we will
deliver that content,


463
00:21:49,896 --> 00:21:51,936
and now the iOS app
can update those graphs


464
00:21:52,316 --> 00:21:55,066
to show the progress the user
made in their Apple Watch game.


465
00:21:55,636 --> 00:21:58,766
So that's the flow for
user info transfer.


466
00:21:59,306 --> 00:22:01,056
Let's take a look at some code.


467
00:22:01,596 --> 00:22:05,156
First thing you want
to do is package


468
00:22:05,156 --> 00:22:07,766
up your user info dictionary
with all the content


469
00:22:08,406 --> 00:22:10,396
that represents this
current state


470
00:22:10,396 --> 00:22:11,756
that you want to send across.


471
00:22:11,946 --> 00:22:14,296
And then you want to
call Transfer User Info


472
00:22:14,386 --> 00:22:15,356
with that dictionary.


473
00:22:16,426 --> 00:22:19,806
Transfer user info returns
a user info transfer object.


474
00:22:20,176 --> 00:22:22,486
This object contains the
dictionary that's being sent


475
00:22:22,486 --> 00:22:26,866
across, and it allows you
to cancel this transfer


476
00:22:26,956 --> 00:22:28,846
if the transfer is still
in the outstanding queue.


477
00:22:29,916 --> 00:22:32,436
In addition to this transfer
object being returned,


478
00:22:32,996 --> 00:22:34,826
we also offer a way to get all


479
00:22:34,826 --> 00:22:37,166
of the outstanding user info
transfers that are in the queue.


480
00:22:37,946 --> 00:22:40,456
This returns an array, and you
can iterate over the array,


481
00:22:40,836 --> 00:22:42,586
look at all the contents,


482
00:22:43,276 --> 00:22:45,076
and potentially cancel
if you need to.


483
00:22:45,206 --> 00:22:48,536
So that's the sending side
for user info transfer.


484
00:22:49,556 --> 00:22:51,056
Let's take a look at
the receiving side.


485
00:22:51,606 --> 00:22:54,276
On the receiving side,
you will get this call,


486
00:22:54,666 --> 00:22:56,296
Did Receive User Info Transfer.


487
00:22:57,426 --> 00:23:00,006
Like application context and all
the other delegate callbacks,


488
00:23:00,316 --> 00:23:02,396
this is returned on a
non-main serial queue.


489
00:23:03,786 --> 00:23:06,026
Once you get that call,
you can take that content,


490
00:23:06,126 --> 00:23:10,376
that dictionary content, and
you can update your app state.


491
00:23:10,576 --> 00:23:11,946
That's user info transfer.


492
00:23:12,626 --> 00:23:14,096
It takes user input
dictionaries.


493
00:23:14,566 --> 00:23:17,236
These dictionaries, like the
application context dictionary,


494
00:23:17,236 --> 00:23:18,416
take property list types.


495
00:23:19,416 --> 00:23:22,596
It's good for in-memory
content, like game progression.


496
00:23:23,426 --> 00:23:24,916
And we give you access


497
00:23:25,226 --> 00:23:29,656
to the outstanding user
info transfers in the queue.


498
00:23:30,506 --> 00:23:33,176
Next, let's talk
about file transfer.


499
00:23:33,846 --> 00:23:36,606
An example we will use
for file transfer is this


500
00:23:36,606 --> 00:23:37,446
image-editing app.


501
00:23:38,476 --> 00:23:40,956
The user can edit
images on the iOS side,


502
00:23:41,776 --> 00:23:43,506
and then they can
select their favorites,


503
00:23:43,506 --> 00:23:45,496
and those favorites are the
ones we want to transfer


504
00:23:45,496 --> 00:23:47,466
across to Apple Watch.


505
00:23:48,646 --> 00:23:49,936
So the first thing to talk


506
00:23:49,936 --> 00:23:52,406
about is the outstanding
file transfer queue.


507
00:23:53,126 --> 00:23:54,696
This is where all the
file transfers will sit


508
00:23:54,696 --> 00:23:56,186
when they are waiting
to be sent across.


509
00:23:56,806 --> 00:23:59,596
And then on the receiving
side, the files will be put


510
00:23:59,596 --> 00:24:02,526
into the Documents/Inbox
folder while they are waiting


511
00:24:02,526 --> 00:24:05,556
to be delivered to the
receiving side app.


512
00:24:05,726 --> 00:24:09,346
The state of the world is the
user has favorited two pictures,


513
00:24:09,426 --> 00:24:11,656
two images, that are
sitting in the queue,


514
00:24:12,356 --> 00:24:13,936
and they are working on a third.


515
00:24:15,136 --> 00:24:17,436
Once they have completed that
third and have selected it


516
00:24:17,436 --> 00:24:20,466
as a favorite, you will
want to call Transfer File.


517
00:24:20,736 --> 00:24:24,206
And you will pass in a file
URL pointing to the file


518
00:24:24,206 --> 00:24:27,336
that you want to transfer,
and we are offering a way


519
00:24:27,336 --> 00:24:31,406
to transfer additional metadata
in the form of a dictionary.


520
00:24:32,306 --> 00:24:35,726
One example of when you might
want to add some metadata is


521
00:24:35,726 --> 00:24:39,716
if you want to group some
of these files together


522
00:24:40,176 --> 00:24:43,406
by putting an identifier in
each metadata dictionary.


523
00:24:43,766 --> 00:24:46,376
That way the receiving side
can pull out that identifier,


524
00:24:46,686 --> 00:24:47,706
group the incoming files.


525
00:24:48,486 --> 00:24:51,546
So the user's favorited
this image.


526
00:24:51,856 --> 00:24:53,026
We called it transfer file.


527
00:24:53,576 --> 00:24:55,976
Now we will take that
packaged-up content,


528
00:24:55,976 --> 00:24:58,506
and we will put it into the
outstanding file transfer queue.


529
00:24:58,506 --> 00:25:01,546
And it will wait here until the
system determines a good time


530
00:25:01,546 --> 00:25:02,636
to transfer the content.


531
00:25:03,666 --> 00:25:05,846
When the system does determine
a good time to transfer


532
00:25:05,846 --> 00:25:09,506
that content, it will move that
content across and it will wait


533
00:25:09,506 --> 00:25:14,126
for the receiving side to launch
and take care of that content.


534
00:25:15,126 --> 00:25:16,346
One thing to note about files,


535
00:25:16,896 --> 00:25:18,676
files can be a little
bit larger.


536
00:25:18,676 --> 00:25:21,236
And the larger the file,
the longer it's going


537
00:25:21,236 --> 00:25:22,396
to take to transfer across.


538
00:25:22,986 --> 00:25:25,296
Potentially you might
hit power conditions,


539
00:25:25,296 --> 00:25:27,216
performance conditions while
those are transferring.


540
00:25:27,656 --> 00:25:29,866
Just be aware if you have
large files that are trying


541
00:25:29,866 --> 00:25:32,266
to transfer across,
they may take longer


542
00:25:32,626 --> 00:25:35,736
than the transferring in
some of the other APIs.


543
00:25:36,076 --> 00:25:37,706
Now the receiver will launch,


544
00:25:38,056 --> 00:25:39,876
and we will deliver
these images.


545
00:25:40,406 --> 00:25:45,246
And now the Apple Watch app
can show those images off.


546
00:25:45,486 --> 00:25:48,496
So that's the flow
of file transfer.


547
00:25:48,686 --> 00:25:50,716
Now let's take a
look at the code.


548
00:25:51,356 --> 00:25:53,656
First thing you want to do
is you want to get your URL


549
00:25:53,956 --> 00:25:55,436
to the file that you
want to transfer.


550
00:25:55,436 --> 00:25:58,976
Then you want to package up
your metadata and finally,


551
00:25:59,166 --> 00:26:01,776
you want to call Transfer
File, passing through that URL


552
00:26:01,816 --> 00:26:03,296
and that metadata dictionary.


553
00:26:04,286 --> 00:26:06,726
This returns a file
transfer object,


554
00:26:06,726 --> 00:26:09,366
the file transfer
object contains the URL,


555
00:26:09,586 --> 00:26:13,046
the metadata dictionary, and
also gives you the ability


556
00:26:13,046 --> 00:26:18,186
to cancel any file transfers
that are outstanding.


557
00:26:18,256 --> 00:26:21,196
Just like user info transfer,
we offer you the ability


558
00:26:21,196 --> 00:26:25,176
to get the array back of all
the outstanding file transfers.


559
00:26:25,486 --> 00:26:28,046
You can iterate over this
array, check the contents,


560
00:26:28,046 --> 00:26:28,996
and cancel if need be.


561
00:26:29,186 --> 00:26:32,686
So that's the sending
side for file transfer.


562
00:26:33,276 --> 00:26:36,306
Now let's take a look
at the receiving side.


563
00:26:36,726 --> 00:26:38,346
On the receiving
side, you are going


564
00:26:38,346 --> 00:26:41,166
to get this delegate
callback, Did Receive File.


565
00:26:42,056 --> 00:26:44,436
There's a few things to mention
about this delegate callback


566
00:26:44,436 --> 00:26:47,056
that are slightly different
than the previous two.


567
00:26:47,446 --> 00:26:48,096
First, you are going


568
00:26:48,096 --> 00:26:50,056
to be getting this
WCSession file object.


569
00:26:50,956 --> 00:26:55,316
This object just contains the
file URL and the metadata.


570
00:26:55,836 --> 00:26:59,966
The second thing to talk
about with this callback is


571
00:26:59,966 --> 00:27:02,836
that the file is now in
the Documents/Inbox folder


572
00:27:02,916 --> 00:27:03,976
of your app's container.


573
00:27:04,906 --> 00:27:09,126
But to take control of this
file, you need to move that file


574
00:27:09,126 --> 00:27:11,096
out of the Documents/Inbox
folder


575
00:27:11,096 --> 00:27:12,566
into a more permanent location.


576
00:27:13,146 --> 00:27:19,096
So the main reason you
need to move this file is


577
00:27:19,096 --> 00:27:21,036
that the Documents/Inbox
folder will be cleaned


578
00:27:21,036 --> 00:27:23,886
up after this delegate returns.


579
00:27:24,226 --> 00:27:26,566
This means the file will be
deleted out of there along


580
00:27:26,566 --> 00:27:28,596
with any additional content.


581
00:27:29,286 --> 00:27:31,916
So it's really important
that you move this file


582
00:27:31,916 --> 00:27:35,526
into a more permanent location
inside this delegate callback.


583
00:27:36,596 --> 00:27:38,686
One thing to keep in mind
if you are dispatching


584
00:27:38,686 --> 00:27:40,856
to a different queue
because this is returned


585
00:27:40,856 --> 00:27:44,036
on a non-main serial
queue, you will need


586
00:27:44,116 --> 00:27:48,376
to move the file before
you do that dispatching,


587
00:27:48,966 --> 00:27:50,796
if that dispatching is async.


588
00:27:51,306 --> 00:27:54,586
So that's file transfer.


589
00:27:55,186 --> 00:27:58,506
It's very similar to user info
transfer, except it allows you


590
00:27:58,506 --> 00:28:01,776
to transfer files
or queue up files.


591
00:28:02,576 --> 00:28:03,726
We do offer the ability


592
00:28:03,806 --> 00:28:06,196
to access the outstanding
files in the queue.


593
00:28:06,986 --> 00:28:12,846
And we provide the ability to
transfer additional metadata.


594
00:28:13,636 --> 00:28:15,596
We suggest you keep
this metadata small,


595
00:28:15,596 --> 00:28:17,506
and this metadata dictionary,


596
00:28:17,646 --> 00:28:19,596
like the other dictionaries
we talked about,


597
00:28:19,596 --> 00:28:20,636
takes property list types.


598
00:28:21,346 --> 00:28:24,726
So those are the three
background transfer modes.


599
00:28:25,206 --> 00:28:27,766
Use these if the
receiver does not need the


600
00:28:27,766 --> 00:28:28,956
content immediately.


601
00:28:30,416 --> 00:28:35,976
If, however, you need to
send messages back and forth


602
00:28:36,356 --> 00:28:41,256
in a live fashion, you can
use interactive messaging.


603
00:28:41,836 --> 00:28:44,736
And interactive messaging
is meant


604
00:28:44,736 --> 00:28:47,606
for that live communication,
both apps are up and running


605
00:28:47,606 --> 00:28:49,626
and they are sending
messages back and forth.


606
00:28:51,096 --> 00:28:52,596
Like I mentioned
before, some examples


607
00:28:52,596 --> 00:28:53,986
of when you might
want to do this.


608
00:28:54,796 --> 00:28:58,376
Let's say you have a game
where both UIs are up


609
00:28:58,446 --> 00:29:01,366
and you want the user to
be interacting with both.


610
00:29:02,026 --> 00:29:04,316
Or if you are on the Apple
Watch side and you need


611
00:29:04,316 --> 00:29:06,776
to trigger the iOS
app to do something,


612
00:29:06,856 --> 00:29:08,606
like start tracking
the user's location.


613
00:29:09,166 --> 00:29:12,126
Now, there are certain
conditions that need to be met


614
00:29:12,876 --> 00:29:15,856
for interactive messaging
to be used.


615
00:29:16,196 --> 00:29:17,746
So let's talk about
those conditions.


616
00:29:18,556 --> 00:29:19,926
It all relates to this idea


617
00:29:20,536 --> 00:29:22,286
that we are introducing
called reachability.


618
00:29:23,376 --> 00:29:25,266
And what reachability means is


619
00:29:25,266 --> 00:29:29,066
that the other app is
available to receive content.


620
00:29:29,886 --> 00:29:33,496
It is required that the
other app is available,


621
00:29:33,706 --> 00:29:36,406
the other app is reachable,
to use interactive messaging.


622
00:29:36,406 --> 00:29:37,886
And the way that you check


623
00:29:37,886 --> 00:29:41,646
that the other side is reachable
is we have this property


624
00:29:41,746 --> 00:29:44,686
on the default session,
Reachable, that you can look at.


625
00:29:45,796 --> 00:29:46,526
Now, the conditions


626
00:29:46,526 --> 00:29:49,266
for reachability are
slightly different depending


627
00:29:49,266 --> 00:29:51,876
on what slide you are on,
whether your code is executing


628
00:29:51,876 --> 00:29:53,816
in your iOS app or
it's executing


629
00:29:53,816 --> 00:29:54,836
in the WatchKit extension.


630
00:29:55,186 --> 00:29:57,146
So let's look at
those individually.


631
00:29:57,226 --> 00:29:59,436
We will start on
the iPhone side.


632
00:30:00,376 --> 00:30:03,606
The first condition that
needs to be met for Reachable


633
00:30:03,606 --> 00:30:06,996
to be True is that the
devices needs to be connected.


634
00:30:07,656 --> 00:30:10,756
This is connected over
Bluetooth or over Wi-Fi,


635
00:30:11,896 --> 00:30:14,916
but if the user leaves their
Watch at home, takes their phone


636
00:30:14,916 --> 00:30:17,016
with them to work, the
devices won't be connected


637
00:30:17,016 --> 00:30:19,546
and interactive messaging is
not going to work in this case.


638
00:30:20,636 --> 00:30:22,966
The second condition that
needs to be met for Reachable


639
00:30:23,196 --> 00:30:25,686
to be True on the iOS side is


640
00:30:25,686 --> 00:30:27,856
that the Watch app
must be foreground.


641
00:30:28,406 --> 00:30:31,526
This means the user must be
interacting with their Watch app


642
00:30:31,716 --> 00:30:34,726
for interactive messaging
to work from the iOS side.


643
00:30:35,536 --> 00:30:36,936
Once these two conditions
are true,


644
00:30:38,396 --> 00:30:42,066
the Reachable property will
be True in your iOS app.


645
00:30:43,696 --> 00:30:45,116
So that's the iPhone side.


646
00:30:47,166 --> 00:30:48,796
Now let's talk about
the Apple Watch side.


647
00:30:49,686 --> 00:30:51,546
The first condition for
Reachable to be True


648
00:30:51,546 --> 00:30:53,256
in your WatchKit extension is


649
00:30:53,776 --> 00:30:56,246
that once again devices
must be connected.


650
00:30:57,376 --> 00:31:00,006
This means that if the user goes
for a run and leaves their phone


651
00:31:00,006 --> 00:31:01,456
at home and takes
their Watch with them,


652
00:31:02,836 --> 00:31:03,896
Reachable will not be True.


653
00:31:03,896 --> 00:31:05,236
The devices will
not be connected.


654
00:31:06,056 --> 00:31:09,646
The second condition is that
the WatchKit extension needs


655
00:31:09,646 --> 00:31:10,416
to be foreground.


656
00:31:11,296 --> 00:31:13,666
We mentioned the WatchKit
extension here being foreground


657
00:31:13,756 --> 00:31:15,346
because there are certain cases


658
00:31:15,346 --> 00:31:17,606
where the WatchKit extension
can run in the background.


659
00:31:18,236 --> 00:31:20,696
They mainly relate to
complications, and we will talk


660
00:31:20,696 --> 00:31:22,696
about this a little
later in the talk.


661
00:31:23,586 --> 00:31:27,846
For now, when the user
is using your app,


662
00:31:27,846 --> 00:31:29,376
your WatchKit extension
is going to be running


663
00:31:29,526 --> 00:31:31,706
and your WatchKit
extension will be foreground,


664
00:31:31,786 --> 00:31:33,796
which means you can use
interactive messaging


665
00:31:34,336 --> 00:31:36,156
and the Reachable
property will be True.


666
00:31:37,716 --> 00:31:39,866
One other thing to note
about this diagram.


667
00:31:40,256 --> 00:31:42,996
We are not saying that
the iOS app is running.


668
00:31:44,116 --> 00:31:49,276
The iOS app has to be running to
respond to messages coming in,


669
00:31:49,486 --> 00:31:50,716
to send its own messages.


670
00:31:51,036 --> 00:31:53,856
So how do we get into a state
where the iOS app running


671
00:31:53,856 --> 00:31:55,456
in addition to the
WatchKit extension?


672
00:31:55,906 --> 00:31:59,886
Well, for this direction only,
sending messages from the Watch


673
00:32:00,156 --> 00:32:03,856
to the phone or allowing
the iOS app to be launched


674
00:32:04,046 --> 00:32:06,446
in the background upon
receiving a message.


675
00:32:06,736 --> 00:32:08,416
So let's take this example.


676
00:32:08,806 --> 00:32:11,886
You have a run tracker app
and it needs to send a message


677
00:32:11,886 --> 00:32:17,096
over to the iPhone side
to talk to CoreLocation


678
00:32:17,156 --> 00:32:19,506
to start tracking
the user's location.


679
00:32:20,656 --> 00:32:23,956
So this app is going
to package up a message


680
00:32:23,986 --> 00:32:26,466
that tells its iOS app to
start using CoreLocation,


681
00:32:26,466 --> 00:32:28,616
and it's going to send
that message across.


682
00:32:29,086 --> 00:32:31,206
When the system receives
this message, we are going


683
00:32:31,206 --> 00:32:33,076
to launch the iOS
app in the background


684
00:32:33,566 --> 00:32:34,696
and deliver that message.


685
00:32:35,126 --> 00:32:38,246
Now, both apps are running, and
now they can do communication.


686
00:32:38,656 --> 00:32:41,536
This app in this example
can start tracking the


687
00:32:41,536 --> 00:32:42,486
user's location.


688
00:32:42,796 --> 00:32:46,466
So that's kind of flow
of interactive messaging.


689
00:32:47,386 --> 00:32:48,726
Kind of how it relates


690
00:32:48,726 --> 00:32:50,446
to reachability,
when you can use it.


691
00:32:50,686 --> 00:32:52,366
Now let's get into
the nuts and bolts


692
00:32:52,586 --> 00:32:53,786
of how you use it in your code.


693
00:32:53,786 --> 00:32:57,386
We are offering two
different types of messages.


694
00:32:57,966 --> 00:32:59,666
The first type takes
a dictionary


695
00:33:00,106 --> 00:33:02,506
and you use this
call, Send Message,


696
00:33:02,766 --> 00:33:03,996
which takes that dictionary,


697
00:33:04,096 --> 00:33:06,416
plus a reply handler
and an error handler.


698
00:33:07,386 --> 00:33:09,536
This dictionary, like the
dictionaries we talked


699
00:33:09,536 --> 00:33:12,986
about before, takes
property list types.


700
00:33:14,216 --> 00:33:16,196
In addition to dictionaries,


701
00:33:16,196 --> 00:33:18,746
we are also introducing
a way to send data.


702
00:33:19,536 --> 00:33:21,636
You can send data by
calling Send Message Data.


703
00:33:21,996 --> 00:33:24,606
This takes that data plus
that same reply handler


704
00:33:24,796 --> 00:33:25,926
and that same error handler.


705
00:33:26,796 --> 00:33:30,086
For sending data, we suggest you
use this if you have custom data


706
00:33:30,216 --> 00:33:31,896
that you're storing
your information in


707
00:33:32,396 --> 00:33:34,556
or if you have your own
serialization format.


708
00:33:35,986 --> 00:33:38,226
If you are using your
own serialization format,


709
00:33:38,476 --> 00:33:41,226
we strongly suggest you use
one that's quick and compact.


710
00:33:42,156 --> 00:33:45,096
This way the user
experience is faster


711
00:33:45,096 --> 00:33:46,936
because the content is
transferring faster.


712
00:33:47,596 --> 00:33:52,256
One thing I want to point out
about these calls is replying.


713
00:33:52,256 --> 00:33:55,166
You probably noticed the
previous two calls have


714
00:33:55,166 --> 00:33:56,076
reply handler.


715
00:33:56,606 --> 00:33:58,776
This handler is optional.


716
00:33:59,606 --> 00:34:02,526
However, we do recommend
in most cases you use it.


717
00:34:03,386 --> 00:34:05,796
The reason is that this
allows the receiver


718
00:34:05,796 --> 00:34:07,706
to confirm the incoming message.


719
00:34:08,436 --> 00:34:10,545
The receiver can confirm
that it received the message.


720
00:34:10,636 --> 00:34:13,076
The message contained the
right content, and it was able


721
00:34:13,076 --> 00:34:14,335
to process that content.


722
00:34:14,946 --> 00:34:17,255
And then this way the sending
side knows that it doesn't have


723
00:34:17,255 --> 00:34:18,176
to send anything else.


724
00:34:18,326 --> 00:34:20,366
It doesn't have to
send anything new


725
00:34:20,366 --> 00:34:21,536
because it sent the wrong stuff.


726
00:34:21,976 --> 00:34:28,976
The other part to talk about
for the replying is what happens


727
00:34:28,976 --> 00:34:29,996
on the receiving side.


728
00:34:31,926 --> 00:34:36,096
What happens if the sender says,
"I want to reply, so I'm going


729
00:34:36,096 --> 00:34:38,786
to supply a reply handler,"
versus if the sender says,


730
00:34:38,786 --> 00:34:40,386
"I don't want to
reply, I'm not going


731
00:34:40,386 --> 00:34:41,626
to supply a reply handler."


732
00:34:42,016 --> 00:34:45,626
In these cases, we have separate
delegate callbacks the receiver


733
00:34:45,626 --> 00:34:46,976
is going to get,
depending on whether


734
00:34:46,976 --> 00:34:49,025
or not it should supply a reply.


735
00:34:49,246 --> 00:34:53,226
So let's talk about
those delegate callbacks.


736
00:34:53,505 --> 00:34:56,596
In the first case, the sender
says, "I do need a reply,


737
00:34:57,176 --> 00:34:58,826
I'm giving the system
a reply handler."


738
00:34:59,476 --> 00:35:02,026
This means that the receiving
side will get this delegate


739
00:35:02,026 --> 00:35:05,896
callback, Did Receive
Message, it has a Reply block


740
00:35:05,896 --> 00:35:08,896
that you can call after the
receiver has received the


741
00:35:08,896 --> 00:35:12,396
message and processed it, and
the receiver can then determine


742
00:35:12,396 --> 00:35:14,336
if it wants to send
back some content


743
00:35:14,336 --> 00:35:17,236
or maybe send back an error
if the message is wrong.


744
00:35:17,236 --> 00:35:20,236
Now, on the other hand,


745
00:35:20,306 --> 00:35:24,116
if the sender doesn't
supply a reply handler,


746
00:35:25,356 --> 00:35:26,576
the receiver is going


747
00:35:26,576 --> 00:35:29,926
to get this delegate
callback, Did Receive Message.


748
00:35:30,346 --> 00:35:31,756
It doesn't have a Reply block.


749
00:35:32,006 --> 00:35:34,076
The receiver can process
the incoming content


750
00:35:34,076 --> 00:35:34,966
and they are done.


751
00:35:36,056 --> 00:35:37,286
The last thing to note


752
00:35:37,286 --> 00:35:40,056
about these two delegate
callbacks is they pass a


753
00:35:40,056 --> 00:35:40,836
dictionary through.


754
00:35:41,846 --> 00:35:44,666
This means that the sender
used the send message,


755
00:35:45,726 --> 00:35:49,126
sending on the sending
side, to send a dictionary.


756
00:35:49,326 --> 00:35:54,626
If instead the sender used
send message data to send data,


757
00:35:55,506 --> 00:35:58,516
there is analogous callbacks
on the receiving side


758
00:35:58,516 --> 00:35:59,376
that pass through data.


759
00:35:59,376 --> 00:36:05,556
So now that we kind of have a
feel for interactive messaging,


760
00:36:05,556 --> 00:36:08,406
let's put it all together and
code for the sending side.


761
00:36:09,036 --> 00:36:11,416
The first thing you
want to do is you want


762
00:36:11,416 --> 00:36:14,316
to check reachability,
make sure the other side is


763
00:36:14,316 --> 00:36:15,076
actually reachable.


764
00:36:15,756 --> 00:36:20,146
Then if Reachable is True, then
you can package up your message.


765
00:36:21,506 --> 00:36:22,956
And once you have your message,


766
00:36:23,196 --> 00:36:25,136
you can call Send Message
with that dictionary.


767
00:36:26,486 --> 00:36:27,496
We expect a reply.


768
00:36:27,736 --> 00:36:29,726
So we will supply
the reply handler,


769
00:36:30,766 --> 00:36:32,526
and we want to handle
our errors,


770
00:36:32,966 --> 00:36:34,536
so we will implement
an error handler.


771
00:36:35,146 --> 00:36:37,816
So those are the different ways


772
00:36:37,816 --> 00:36:40,156
to transfer content
using WatchConnectivity.


773
00:36:41,296 --> 00:36:42,746
So let's sum up what
we've talked


774
00:36:42,746 --> 00:36:43,876
about for WatchConnectivity.


775
00:36:45,756 --> 00:36:47,856
The first thing you
want to do is you want


776
00:36:47,856 --> 00:36:48,766
to set up your session.


777
00:36:50,096 --> 00:36:53,336
To do this, you set your
delegate, and you call Activate.


778
00:36:53,746 --> 00:36:56,106
You want to do this early
in the lifetime of the app


779
00:36:56,676 --> 00:36:58,966
so the app has the ability
to start receiving content


780
00:36:58,966 --> 00:37:01,136
and the ability to start
checking properties.


781
00:37:02,916 --> 00:37:05,426
To check those properties,
you look at the session state.


782
00:37:06,236 --> 00:37:07,566
And once everything is okay,


783
00:37:07,736 --> 00:37:09,146
once you know there's
a paired Watch,


784
00:37:09,626 --> 00:37:11,496
once you know your Apple
Watch app is installed,


785
00:37:12,206 --> 00:37:13,346
you can start communicating.


786
00:37:15,226 --> 00:37:17,656
The first type of communication
is background transfers.


787
00:37:19,626 --> 00:37:21,156
We offer three types.


788
00:37:21,206 --> 00:37:23,466
The first type is
application context.


789
00:37:23,806 --> 00:37:27,346
This is for the single set of
really interesting information


790
00:37:27,346 --> 00:37:28,726
that your app has
for the other side.


791
00:37:29,356 --> 00:37:30,826
Or if you need to
queue up content,


792
00:37:31,136 --> 00:37:34,306
you can use user info
transfer or file transfer.


793
00:37:34,636 --> 00:37:37,786
In addition to background
transfers,


794
00:37:37,786 --> 00:37:39,536
you can use interactive
messaging


795
00:37:39,946 --> 00:37:41,076
for live communication.


796
00:37:41,726 --> 00:37:44,236
So that's WatchConnectivity.


797
00:37:44,436 --> 00:37:46,976
It allows device-to-device
communication between your apps.


798
00:37:47,506 --> 00:37:51,106
And we are excited to see
what you do with this API


799
00:37:51,566 --> 00:37:52,886
to get content back and forth


800
00:37:52,886 --> 00:37:54,776
and provide better
user experiences.


801
00:37:55,866 --> 00:38:00,276
Next, we're going to talk
about NSURLSession briefly.


802
00:38:01,056 --> 00:38:02,726
So what is NSURLSession?


803
00:38:03,466 --> 00:38:05,046
It's an existing
foundation class.


804
00:38:06,046 --> 00:38:08,616
It allows you to
make HTTP requests


805
00:38:09,086 --> 00:38:10,716
to your servers to
fetch content.


806
00:38:11,186 --> 00:38:14,966
It's available in watchOS 2, and
we strongly suggest you use it


807
00:38:14,966 --> 00:38:17,316
if your servers have content
that needs to be fetched.


808
00:38:17,866 --> 00:38:20,796
And it takes advantage of
the Tetherless Wi-Fi feature.


809
00:38:21,406 --> 00:38:24,196
The Tetherless Wi-Fi feature
allows Apple Watch to connect


810
00:38:24,196 --> 00:38:26,816
to known Wi-Fi networks when
the phone is not around.


811
00:38:27,756 --> 00:38:30,496
If the Apple Watch does
connect to known Wi-Fi networks,


812
00:38:30,496 --> 00:38:35,016
you can use NSURLSession to
go over that Wi-Fi to connect


813
00:38:35,016 --> 00:38:36,926
to your servers and
fetch content.


814
00:38:38,856 --> 00:38:41,036
So what do you want
to use NSURLSession?


815
00:38:41,036 --> 00:38:44,926
You want to use it any time
your server has new content.


816
00:38:45,576 --> 00:38:47,926
This is very similar to how
you might be doing stuff


817
00:38:47,926 --> 00:38:48,556
in your iOS apps.


818
00:38:49,796 --> 00:38:54,806
We do suggest, however, that you
tailor the content that's being


819
00:38:54,806 --> 00:39:00,536
delivered to Apple Watch based
on how Apple Watch works.


820
00:39:01,096 --> 00:39:04,436
So if you have images
on your server,


821
00:39:04,436 --> 00:39:07,686
we suggest you scale those
images for the screen size


822
00:39:07,686 --> 00:39:10,466
of Apple Watch, or if you are a
news app and you are only going


823
00:39:10,466 --> 00:39:13,346
to show some of article, maybe
just the text, on Apple Watch,


824
00:39:13,766 --> 00:39:16,326
we suggest you only
fetch the parts you need.


825
00:39:16,996 --> 00:39:20,836
So that's a very brief
introduction to NSURLSession.


826
00:39:21,366 --> 00:39:26,546
There's a great WWDC
session on this API as well


827
00:39:26,546 --> 00:39:27,806
as great online resources.


828
00:39:27,806 --> 00:39:30,246
So we definitely suggest
you check those out.


829
00:39:30,246 --> 00:39:32,306
Now, the last thing
we want to talk


830
00:39:32,306 --> 00:39:35,666
about for NSURLSession
is using NSURLSession


831
00:39:36,346 --> 00:39:37,506
with WatchConnectivity.


832
00:39:38,636 --> 00:39:41,856
So once again, we have the
example of our news app.


833
00:39:42,156 --> 00:39:44,156
This news app has
fetched a bunch of content


834
00:39:44,666 --> 00:39:46,646
from its server, and it knows


835
00:39:46,646 --> 00:39:49,426
that the Apple Watch
app probably will have


836
00:39:49,426 --> 00:39:53,136
to fetch this same content the
next time the user launches the


837
00:39:53,136 --> 00:39:53,726
Apple Watch app.


838
00:39:54,606 --> 00:39:57,996
Instead of making the Apple
Watch app refetch that content,


839
00:39:58,726 --> 00:40:02,626
we will use application context
to transfer across the content


840
00:40:02,626 --> 00:40:04,666
from the iOS side
to the Watch side.


841
00:40:04,936 --> 00:40:08,976
That content is going to come
in, and it will be delivered


842
00:40:09,156 --> 00:40:11,246
to the Apple Watch app
the next time it launches.


843
00:40:11,676 --> 00:40:13,606
And now the Apple Watch
app has the ability


844
00:40:13,606 --> 00:40:16,546
to show the same content that
was seen on the iOS side,


845
00:40:16,906 --> 00:40:19,266
and it provides a more
cohesive experience.


846
00:40:19,816 --> 00:40:23,276
Now the next time the user
launched the Apple Watch app


847
00:40:23,426 --> 00:40:25,996
could be a couple
of hours later,


848
00:40:26,196 --> 00:40:29,206
which means the server
has even newer content


849
00:40:29,206 --> 00:40:30,226
that might want to be fetched.


850
00:40:30,786 --> 00:40:33,116
So we suggest that
in addition to taking


851
00:40:33,116 --> 00:40:35,306
in the application
context that was sent over,


852
00:40:36,406 --> 00:40:39,386
you use an HTTP request
with NSURLSession


853
00:40:39,386 --> 00:40:43,076
to fetch the absolute latest
content from your server.


854
00:40:44,426 --> 00:40:47,516
But this way, while the user
is waiting for that content


855
00:40:47,516 --> 00:40:50,516
to come down, they will see
the same content they saw


856
00:40:50,516 --> 00:40:53,956
in the iOS side and they will
have a better experience.


857
00:40:54,436 --> 00:40:57,876
So that's NSURLSession,
NSURLSession


858
00:40:57,876 --> 00:40:59,026
and WatchConnectivity.


859
00:40:59,856 --> 00:41:03,606
Now, we want to take these two
APIs and we want to show you how


860
00:41:03,606 --> 00:41:06,626
to use them to get data
to your complication.


861
00:41:06,916 --> 00:41:09,476
And to do so, I will
bring Chris back


862
00:41:09,526 --> 00:41:11,606
up to the stage to
talk about this.


863
00:41:12,516 --> 00:41:17,996
[Applause]


864
00:41:18,496 --> 00:41:18,996
>> CHRIS JENSEN:
Thank you, Alex.


865
00:41:18,996 --> 00:41:20,506
That's some cool stuff, right?


866
00:41:20,706 --> 00:41:24,426
I think it's going to be
great to see what you guys end


867
00:41:24,726 --> 00:41:26,776
up doing with the
WatchConnectivity APIs


868
00:41:26,776 --> 00:41:28,436
and the NSURLSession APIs.


869
00:41:29,716 --> 00:41:31,366
Now let's discuss complications.


870
00:41:31,656 --> 00:41:34,216
But before we dig in too deep,


871
00:41:34,216 --> 00:41:35,896
let's make sure we are
all on the same page.


872
00:41:36,766 --> 00:41:38,466
These are three Watch faces,


873
00:41:38,916 --> 00:41:41,546
three clock faces
on the Apple Watch.


874
00:41:41,816 --> 00:41:43,146
If you remove the timepiece,


875
00:41:43,956 --> 00:41:45,606
the remaining pieces
are complications.


876
00:41:46,716 --> 00:41:48,546
They provide small snippets


877
00:41:48,546 --> 00:41:53,456
of information every time the
user looks at their clock face.


878
00:41:54,276 --> 00:41:57,886
And this will allow them to get
sort of the most important piece


879
00:41:57,886 --> 00:42:00,526
of information really quickly.


880
00:42:01,896 --> 00:42:04,236
So when you are implementing
your complication,


881
00:42:04,236 --> 00:42:06,356
there's two primary tasks
that you will have to solve.


882
00:42:07,496 --> 00:42:09,666
You will have to figure out
how to update the clock face,


883
00:42:09,986 --> 00:42:13,016
and the second one is you
need to get the content to use


884
00:42:13,016 --> 00:42:13,896
to update the clock face.


885
00:42:14,606 --> 00:42:18,946
So let's discuss how you would
update the clock face briefly.


886
00:42:18,946 --> 00:42:21,096
This is covered in
depth at other sessions.


887
00:42:22,186 --> 00:42:24,406
For this example, we
will use a weather app


888
00:42:24,626 --> 00:42:26,656
that has a moon phase
complication.


889
00:42:27,196 --> 00:42:29,826
The moon phase complication
doesn't need any external data.


890
00:42:29,826 --> 00:42:31,666
It already has all the
information it needs


891
00:42:31,666 --> 00:42:33,056
because it just needs
the date and time.


892
00:42:34,066 --> 00:42:36,616
So all it needs to
concern itself with is how


893
00:42:36,616 --> 00:42:37,516
to update the clock face.


894
00:42:38,476 --> 00:42:41,166
To do that, it's going to
use the new ClockKit API,


895
00:42:41,166 --> 00:42:47,336
the ClockKit framework
introduced in watchOS 2.


896
00:42:47,336 --> 00:42:50,376
The way the flow
works is we're going


897
00:42:50,376 --> 00:42:54,946
to launch our WatchKit
extension in the background.


898
00:42:55,006 --> 00:42:57,716
When this happens, you are
going to want to get an instance


899
00:42:57,796 --> 00:42:59,866
of CLK complications server.


900
00:43:00,376 --> 00:43:01,826
You call Shared Instance
to do that.


901
00:43:02,626 --> 00:43:05,266
And you will call Extend
Timeline For Complication,


902
00:43:06,046 --> 00:43:08,316
and you pass in the complication
that you are updating.


903
00:43:08,316 --> 00:43:13,256
The next thing that will happen,
that will trigger our process


904
00:43:13,366 --> 00:43:16,086
with ClockKit and they will
start asking you a couple


905
00:43:16,086 --> 00:43:16,616
of questions.


906
00:43:16,616 --> 00:43:19,026
They will ask for the
current timeline entry.


907
00:43:19,026 --> 00:43:21,856
This is the one that's
going to be shown right now.


908
00:43:22,676 --> 00:43:25,586
They will ask for
previous timeline entries,


909
00:43:26,106 --> 00:43:29,886
future timeline entries, and
finally, they are going to ask


910
00:43:30,036 --> 00:43:32,516
for a suggestion of when you
think this data will be stale.


911
00:43:32,676 --> 00:43:35,166
This is a suggestion to the
system so that we can know


912
00:43:35,606 --> 00:43:38,576
when you think that you
need to get launched again.


913
00:43:38,746 --> 00:43:40,696
So you can update
your timeline further.


914
00:43:41,656 --> 00:43:45,506
That was a quick summary
of updating the clock face.


915
00:43:45,756 --> 00:43:48,996
You would use the ClockKit
framework to do so.


916
00:43:49,346 --> 00:43:50,996
You will be able
to provide content


917
00:43:51,036 --> 00:43:52,566
for past, present, and future.


918
00:43:54,176 --> 00:43:56,626
Your WatchKit extension will
get launched in the background


919
00:43:56,626 --> 00:43:59,406
to do these updates, and
you will be given a chance


920
00:43:59,406 --> 00:44:01,776
to specify when the content
provided is going to be stale.


921
00:44:02,866 --> 00:44:05,476
One thing to keep in
mind is that all the work


922
00:44:05,476 --> 00:44:07,826
that your WatchKit
extension is doing on behalf


923
00:44:07,826 --> 00:44:10,466
of updating the complication
is budgeted, so you want to try


924
00:44:10,466 --> 00:44:12,646
to keep this as fast and
efficient as possible


925
00:44:12,726 --> 00:44:15,296
so that you can keep getting
launched throughout the day


926
00:44:15,726 --> 00:44:17,076
to update your complication.


927
00:44:18,486 --> 00:44:22,216
As I mentioned, there's a great
talk dedicated to this topic,


928
00:44:22,346 --> 00:44:23,776
Creating Complications
with ClockKit.


929
00:44:24,036 --> 00:44:25,926
We want you to check that
out if you haven't done so.


930
00:44:25,926 --> 00:44:29,716
The next you will have
to deal with is how


931
00:44:29,716 --> 00:44:31,686
to get content to
your complication.


932
00:44:32,286 --> 00:44:35,606
There's a very special instance,
which is the initial activation.


933
00:44:35,966 --> 00:44:39,606
The first time the user
goes into his clock face,


934
00:44:39,876 --> 00:44:42,236
he's going to go in and
edit it and then he's going


935
00:44:42,236 --> 00:44:44,176
to enable your complication;
in this case,


936
00:44:44,176 --> 00:44:45,306
the news app complication.


937
00:44:45,986 --> 00:44:47,046
At this point in time,


938
00:44:47,046 --> 00:44:50,326
that complication very likely
has very little or no data


939
00:44:50,496 --> 00:44:51,396
to populate its timeline.


940
00:44:51,396 --> 00:44:54,336
So it has a large need
for a lot of content.


941
00:44:55,026 --> 00:44:58,046
So what's going to happen
is we are immediately going


942
00:44:58,046 --> 00:45:00,006
to launch your WatchKit
extension in the background.


943
00:45:00,656 --> 00:45:03,196
And now you have a couple
of different ways of getting


944
00:45:03,476 --> 00:45:06,466
that content so you can
initialize that timeline.


945
00:45:07,076 --> 00:45:11,776
You could use NSURLSession to
communicate with your servers


946
00:45:12,446 --> 00:45:15,796
to get that content,
or you could choose


947
00:45:15,796 --> 00:45:16,946
to use WatchConnectivity.


948
00:45:17,636 --> 00:45:20,146
If you are going to
use WatchConnectivity


949
00:45:20,146 --> 00:45:21,796
in this very special
circumstance,


950
00:45:22,426 --> 00:45:25,046
and the devices are
connected, you will find


951
00:45:25,226 --> 00:45:26,166
that Reachable is True.


952
00:45:26,166 --> 00:45:28,056
This is what Alex was
referring to earlier,


953
00:45:28,636 --> 00:45:31,026
where this property
might be True


954
00:45:31,026 --> 00:45:32,346
in certain special
circumstances.


955
00:45:32,386 --> 00:45:33,086
This is one of those.


956
00:45:33,626 --> 00:45:34,786
What you are going
to be able to do


957
00:45:34,786 --> 00:45:37,206
in this case is you will be
able to call Send Message,


958
00:45:37,456 --> 00:45:40,446
which will send a message
across to the iPhone.


959
00:45:40,936 --> 00:45:44,726
And we will wake up the
weather app in the background,


960
00:45:45,646 --> 00:45:48,976
and at this point, the weather
app on the iOS side can use any


961
00:45:48,976 --> 00:45:53,476
of the WatchConnectivity APIs to
communicate the information back


962
00:45:53,596 --> 00:45:54,746
to populate that timeline.


963
00:45:55,346 --> 00:45:59,886
So in summary, when
you are going


964
00:45:59,886 --> 00:46:01,296
through the initial activation,


965
00:46:01,516 --> 00:46:03,646
your WatchKit extension will
get launched in the background.


966
00:46:03,956 --> 00:46:06,606
You can use NSURLSession or,


967
00:46:06,796 --> 00:46:10,196
because this is a very special
circumstance, you will be able


968
00:46:10,476 --> 00:46:13,216
to use the WatchConnectivity
APIs to wake up the iOS app


969
00:46:13,356 --> 00:46:14,766
because Reachable is True.


970
00:46:15,166 --> 00:46:17,696
We suggest you use this
to populate as much


971
00:46:17,856 --> 00:46:20,576
of the ClockKit timeline
as possible


972
00:46:20,706 --> 00:46:23,036
because it's starting
with nothing.


973
00:46:23,636 --> 00:46:26,626
The next issue is
how to stay current.


974
00:46:28,086 --> 00:46:29,556
Your timeline is now populated,


975
00:46:29,646 --> 00:46:31,986
and now future updates
will be happening.


976
00:46:32,036 --> 00:46:33,786
How do you keep updating
your complication?


977
00:46:34,756 --> 00:46:37,956
So there's a couple of different
ways that you could use


978
00:46:37,956 --> 00:46:39,056
to update your complication.


979
00:46:39,246 --> 00:46:42,436
You could get content
pushed to your complication.


980
00:46:43,036 --> 00:46:45,446
This makes sense if you
have an external source


981
00:46:45,446 --> 00:46:48,226
such as a web server
that knows specific times


982
00:46:48,226 --> 00:46:50,956
when there is new content and
it's not a regular cadence.


983
00:46:51,046 --> 00:46:53,796
What you are going to want to
do then is have the content push


984
00:46:53,796 --> 00:46:56,956
from the clouds to the iPhone,
and then it gets relayed


985
00:46:56,956 --> 00:46:57,986
over to the Apple Watch.


986
00:46:58,946 --> 00:47:01,156
An example of where we think
this makes sense is something


987
00:47:01,156 --> 00:47:04,606
like a sports app, where
the complication is showing


988
00:47:04,906 --> 00:47:05,656
game scores.


989
00:47:06,686 --> 00:47:08,756
Most of the time, those scores
are going to be happening


990
00:47:08,756 --> 00:47:10,766
in a short period of
time during the day,


991
00:47:10,766 --> 00:47:12,486
and it will be very
rapid updates.


992
00:47:13,156 --> 00:47:14,416
So then we think
it makes more sense


993
00:47:14,466 --> 00:47:15,476
to use the pushed approach.


994
00:47:15,576 --> 00:47:17,346
The other one is what
we're calling requested


995
00:47:17,346 --> 00:47:17,946
interval fetch.


996
00:47:17,946 --> 00:47:20,666
This is more for when you
know there's a regular cadence


997
00:47:20,776 --> 00:47:22,526
where you can keep
updating your complication.


998
00:47:22,996 --> 00:47:24,966
And then you could use
something like NSURLSession


999
00:47:24,966 --> 00:47:27,136
to go directly to the cloud.


1000
00:47:27,796 --> 00:47:32,166
Something like a surfing app
with a tide complications


1001
00:47:32,326 --> 00:47:34,996
that shows what the tidal
patterns will be so you know


1002
00:47:34,996 --> 00:47:37,716
when to go out surfing.


1003
00:47:38,636 --> 00:47:41,626
So let's take a look
at this case first.


1004
00:47:44,476 --> 00:47:47,626
In this case, you will want to
use NSURLSession and ClockKit


1005
00:47:47,916 --> 00:47:49,016
to update the complication.


1006
00:47:49,016 --> 00:47:51,196
As you can see in the
corner of clock face,


1007
00:47:51,556 --> 00:47:53,926
the surfing complication
is already enabled.


1008
00:47:55,236 --> 00:47:58,116
The flow is going to go
a little bit like this,


1009
00:47:58,116 --> 00:48:00,566
where the WatchKit extension
gets launched in the background.


1010
00:48:01,166 --> 00:48:03,966
You're going to want to
generate an NSURLSession request


1011
00:48:04,156 --> 00:48:06,246
and you send that up to
your servers to get content.


1012
00:48:07,276 --> 00:48:08,846
The server will produce
a response


1013
00:48:09,106 --> 00:48:11,636
and it will get delivered back
down to the WatchKit extension.


1014
00:48:12,356 --> 00:48:15,106
Now you want to turn
around and update ClockKit.


1015
00:48:15,396 --> 00:48:18,746
So you will request them
to extend your timeline.


1016
00:48:19,466 --> 00:48:21,736
They will start asking you these
questions, and you're going


1017
00:48:22,066 --> 00:48:24,536
to give them the timeline
updates, both past, present,


1018
00:48:24,636 --> 00:48:28,216
and current, and finally, you
are going to suggest a time


1019
00:48:28,216 --> 00:48:29,606
for when you should
be launched again.


1020
00:48:30,306 --> 00:48:35,496
And the last thing that will
happen is when you provide


1021
00:48:35,496 --> 00:48:37,486
that time for when you
next should be launched,


1022
00:48:37,546 --> 00:48:39,356
that's a hint to the system
that your work is done,


1023
00:48:40,016 --> 00:48:44,006
and your WatchKit
extension will get killed.


1024
00:48:44,536 --> 00:48:47,866
So now, let's pretend
that some time passes,


1025
00:48:47,976 --> 00:48:50,566
and the system has decided
based upon your hint


1026
00:48:51,016 --> 00:48:53,566
and system conditions
that now is a good time


1027
00:48:53,606 --> 00:48:55,506
to relaunch your complication.


1028
00:48:56,296 --> 00:48:58,266
Again, you are going to get
launched in the background.


1029
00:48:59,116 --> 00:49:01,406
You are going to produce a
request, using NSURLSession.


1030
00:49:01,406 --> 00:49:02,866
You are going to send
it up to the servers.


1031
00:49:03,726 --> 00:49:06,096
The servers are going to produce
a response, and you are going


1032
00:49:06,096 --> 00:49:09,666
to turn around and update your
complication using ClockKit.


1033
00:49:13,856 --> 00:49:17,566
So in summary, and a couple
of tips is that we suggest


1034
00:49:17,566 --> 00:49:20,376
that you use NSURLSession
background session if possible.


1035
00:49:21,316 --> 00:49:24,006
This is because the NSURLSession
request might not complete


1036
00:49:24,006 --> 00:49:25,586
until the next time
the extension runs.


1037
00:49:26,106 --> 00:49:27,586
Using the background
session enables it


1038
00:49:27,586 --> 00:49:30,206
to deliver the content
the next time you run.


1039
00:49:31,896 --> 00:49:34,786
The requested time that you are
providing is just a suggestion


1040
00:49:34,786 --> 00:49:35,396
to the system.


1041
00:49:35,396 --> 00:49:36,386
It's not a guarantee.


1042
00:49:37,006 --> 00:49:41,596
We'll try to get you close to
that time, but conditions apply


1043
00:49:41,596 --> 00:49:43,116
and it may not always be exact.


1044
00:49:43,866 --> 00:49:46,546
We suggest that you keep the
runtime as short as possible,


1045
00:49:46,876 --> 00:49:49,496
and you will use ClockKit
to update the clock face.


1046
00:49:50,136 --> 00:49:53,336
You want to keep runtime as
short as possible and make sure


1047
00:49:53,336 --> 00:49:57,236
that you make your next
requested update time as far


1048
00:49:57,236 --> 00:49:59,616
out as possible because these
are budgeted and you don't want


1049
00:49:59,616 --> 00:50:01,976
to run out of budget
before the day is over.


1050
00:50:03,446 --> 00:50:05,996
The other approach to
getting the content,


1051
00:50:06,266 --> 00:50:08,566
which was in our example
of the sports app,


1052
00:50:09,186 --> 00:50:10,386
was to get the content pushed.


1053
00:50:10,976 --> 00:50:16,466
We will look at this
in a couple of stages


1054
00:50:16,466 --> 00:50:19,826
because it uses two
very distinct processes.


1055
00:50:19,876 --> 00:50:23,496
The first one is you
are going to use PushKit


1056
00:50:23,676 --> 00:50:27,326
to get the content from
the cloud to the iPhone.


1057
00:50:29,576 --> 00:50:32,286
The second part is using
WatchConnectivity to get


1058
00:50:32,286 --> 00:50:35,946
that content from the iPhone
across to your Apple Watch.


1059
00:50:36,746 --> 00:50:37,866
So let's look at
those separately.


1060
00:50:39,166 --> 00:50:41,306
So part number one is
where you are using PushKit


1061
00:50:41,586 --> 00:50:43,316
to get the content
to your iPhone.


1062
00:50:44,326 --> 00:50:48,636
We have updated the PushKit
framework to add support


1063
00:50:48,636 --> 00:50:50,116
for these complication pushes.


1064
00:50:50,416 --> 00:50:53,456
The way you use it is you create
an instance of PKPushRegistry.


1065
00:50:54,606 --> 00:50:57,866
Next, you will want to
set yourself as a delegate


1066
00:50:57,866 --> 00:51:00,096
so that you are ready
to receive callbacks.


1067
00:51:01,536 --> 00:51:04,336
And finally, you will set the
decide push types and pass


1068
00:51:04,336 --> 00:51:06,466
in the new PK push
type complication


1069
00:51:06,466 --> 00:51:08,856
that that was added in iOS 9.


1070
00:51:09,086 --> 00:51:12,446
Once this is done, you will
get a delegate callback


1071
00:51:12,686 --> 00:51:15,566
with a new Push token, which
you're going to want to upload


1072
00:51:15,566 --> 00:51:17,596
to your servers, which is
going to enable your servers


1073
00:51:17,596 --> 00:51:18,946
to send pushes to this device.


1074
00:51:20,026 --> 00:51:21,786
Finally, when the server
does send the push,


1075
00:51:21,966 --> 00:51:23,686
you will get the Did
Receive Incoming Push


1076
00:51:23,686 --> 00:51:24,566
With Payload callback.


1077
00:51:24,816 --> 00:51:26,076
And this when you turn around


1078
00:51:26,736 --> 00:51:28,506
and use the WatchConnectivity
APIs


1079
00:51:28,826 --> 00:51:34,576
to send the content
over to the iPhone.


1080
00:51:35,096 --> 00:51:38,886
So for the second part,
this is where you are going


1081
00:51:38,886 --> 00:51:40,856
to use WatchConnectivity
to get the content


1082
00:51:41,006 --> 00:51:42,916
across to the Apple
Watch app now


1083
00:51:42,916 --> 00:51:45,426
that you received
it in your iOS app.


1084
00:51:46,676 --> 00:51:49,436
The first thing you
are going to want


1085
00:51:49,436 --> 00:51:52,876
to use is the transfer user info
API that Alex discussed earlier.


1086
00:51:54,196 --> 00:51:56,316
This will allow you to
queue up timeline entries


1087
00:51:56,886 --> 00:52:00,866
for both the past and the
future that your iOS --


1088
00:52:01,116 --> 00:52:02,776
sorry, your Watch
complication might need.


1089
00:52:04,106 --> 00:52:06,476
Once you have queued up
all the timeline entries,


1090
00:52:07,136 --> 00:52:08,926
the last thing you want
to do before you are done


1091
00:52:08,926 --> 00:52:11,366
with your work is
called a special API.


1092
00:52:12,106 --> 00:52:13,886
It's also part of
WatchConnectivity.


1093
00:52:13,986 --> 00:52:16,086
It's called transfer current
complication user info.


1094
00:52:16,786 --> 00:52:19,036
This is a special version
of the transfer user info,


1095
00:52:19,216 --> 00:52:20,256
and at any point in time,


1096
00:52:20,256 --> 00:52:22,806
there can only be one current
complication user info.


1097
00:52:22,876 --> 00:52:25,406
If you call this twice, only
the most recent call is the one


1098
00:52:25,406 --> 00:52:27,826
that is tagged as the current
complication user info.


1099
00:52:29,346 --> 00:52:31,326
When you call this, this
is a hint to the system


1100
00:52:31,326 --> 00:52:34,426
that the work is done, and
on the receiving side all


1101
00:52:34,426 --> 00:52:37,006
of these callbacks will
produce this delegate callback,


1102
00:52:37,096 --> 00:52:41,786
Did Receive User Info.


1103
00:52:41,916 --> 00:52:44,546
So let's look at what
this all would look


1104
00:52:44,546 --> 00:52:46,566
like from a full flow.


1105
00:52:46,566 --> 00:52:47,476
All right?


1106
00:52:48,356 --> 00:52:50,916
So the user has launched
a sports app


1107
00:52:51,096 --> 00:52:52,536
for the very first time.


1108
00:52:53,606 --> 00:52:55,916
Your app early in its life
cycle will want to set


1109
00:52:55,916 --> 00:52:58,936
up the PK push registry
and set the desired types.


1110
00:52:59,556 --> 00:53:02,486
This will register this push --


1111
00:53:02,586 --> 00:53:04,636
this device with the
Apple push servers.


1112
00:53:05,336 --> 00:53:07,146
So that will get pushed
up to the Apple servers.


1113
00:53:08,096 --> 00:53:10,736
It will turn around and produce
a Push token, and you will get


1114
00:53:10,736 --> 00:53:13,286
that delegate callback
in your iOS app.


1115
00:53:14,596 --> 00:53:17,786
You will want to take that token
and upload it to your servers,


1116
00:53:18,776 --> 00:53:20,566
enabling your servers
to send pushes


1117
00:53:20,566 --> 00:53:21,586
to this device in the future.


1118
00:53:21,586 --> 00:53:25,846
At that point, the initial
setup of the PushKit is done


1119
00:53:26,636 --> 00:53:27,516
and your app can go away.


1120
00:53:28,666 --> 00:53:32,226
Let's say the game starts, and
the server decided it needs


1121
00:53:32,226 --> 00:53:33,536
to update the complication.


1122
00:53:33,576 --> 00:53:36,556
It will send a push
down to your device.


1123
00:53:37,246 --> 00:53:40,776
That will get received on
the device, and we will wake


1124
00:53:40,776 --> 00:53:43,616
up the sports app in the
background and deliver the push.


1125
00:53:43,796 --> 00:53:45,096
That was that other
delegate callback.


1126
00:53:45,226 --> 00:53:48,986
At this point, you are going
to want to look at the data


1127
00:53:49,466 --> 00:53:52,336
in the push payload and figure
out what needs to get sent


1128
00:53:52,336 --> 00:53:53,716
across using WatchConnectivity.


1129
00:53:54,296 --> 00:53:57,316
You will call Transfer
User Info to queue


1130
00:53:57,316 --> 00:54:00,286
up the timeline entries,
both past and future,


1131
00:54:00,286 --> 00:54:02,636
and that will go into
the outstanding user info


1132
00:54:02,636 --> 00:54:03,376
transfers queue.


1133
00:54:03,376 --> 00:54:06,906
And then you call the special
transfer current complication


1134
00:54:06,906 --> 00:54:09,586
user info with the one
that's most important,


1135
00:54:09,586 --> 00:54:10,716
and that's the one
that should be shown


1136
00:54:10,716 --> 00:54:11,646
on the Watch face right now.


1137
00:54:13,376 --> 00:54:15,456
That will also go into the
outstanding user info transfers


1138
00:54:15,516 --> 00:54:16,796
queue, but it will
skip to the front


1139
00:54:16,886 --> 00:54:18,436
because it's the
most important one.


1140
00:54:19,376 --> 00:54:23,956
And because this is considered
urgent, we will try to get


1141
00:54:23,956 --> 00:54:25,886
that across to the
Apple Watch right away,


1142
00:54:26,536 --> 00:54:28,886
and wake up the WatchKit
extension in the background


1143
00:54:29,296 --> 00:54:32,616
and deliver that current
complication user info.


1144
00:54:33,116 --> 00:54:36,876
Given conditions, some of other
content might also transfer


1145
00:54:36,876 --> 00:54:38,736
at this point in time and you
will get those other timeline


1146
00:54:38,766 --> 00:54:43,156
entries, but at least the most
important one made it across.


1147
00:54:43,156 --> 00:54:45,696
Finally, you want
to use ClockKit


1148
00:54:46,146 --> 00:54:48,226
to update your complication.


1149
00:54:55,276 --> 00:54:56,236
So there we go.


1150
00:54:56,236 --> 00:54:58,826
You have updated your
complication using PushKit.


1151
00:54:59,476 --> 00:55:02,366
We have added the new PK push
type complication to enable you


1152
00:55:02,366 --> 00:55:06,776
to very quickly update your
complication using information


1153
00:55:06,776 --> 00:55:07,616
that's on your servers.


1154
00:55:08,606 --> 00:55:09,996
There's a couple of
restrictions to be able


1155
00:55:10,046 --> 00:55:11,206
to use these push types.


1156
00:55:11,296 --> 00:55:13,926
The complication must be active
on the current clock face,


1157
00:55:14,446 --> 00:55:16,226
otherwise these pushes
will not be delivered,


1158
00:55:16,226 --> 00:55:19,376
and there will be a limited
number of pushes per day,


1159
00:55:19,456 --> 00:55:20,366
so use these sparingly.


1160
00:55:20,696 --> 00:55:23,146
Roughly one to two
per hour on average,


1161
00:55:23,236 --> 00:55:27,606
but the sports app may use them
all in a short period of time.


1162
00:55:27,806 --> 00:55:29,366
You would use transfer
user info to queue


1163
00:55:29,366 --> 00:55:30,456
up your timeline entries.


1164
00:55:30,706 --> 00:55:32,856
And finally, you would use
transfer current complication


1165
00:55:32,856 --> 00:55:34,556
user info to queue
up the current


1166
00:55:34,726 --> 00:55:36,146
or present timeline entry.


1167
00:55:37,146 --> 00:55:40,246
Finally, you would use ClockKit
to update the clock face.


1168
00:55:40,876 --> 00:55:43,656
Keep in mind that a lot of
these things are budgeted.


1169
00:55:43,656 --> 00:55:46,756
Any work you do on behalf
of complication update,


1170
00:55:46,756 --> 00:55:49,376
both on the iOS and
on the WatchKit side,


1171
00:55:49,646 --> 00:55:50,756
counts against this budget.


1172
00:55:51,536 --> 00:55:54,406
So we recommend that
any information you need


1173
00:55:54,406 --> 00:55:56,666
to update your complication
is included in that push.


1174
00:55:57,316 --> 00:56:01,716
The complication push type has
a 4 K payload, which is larger


1175
00:56:01,716 --> 00:56:04,866
than the standard, so that
should enable you to put most


1176
00:56:04,866 --> 00:56:05,746
of the content you needed.


1177
00:56:05,806 --> 00:56:07,806
If you receive one of
these pushes and you turn


1178
00:56:07,806 --> 00:56:10,776
around in your iOS app and
do an NSURLSession request,


1179
00:56:11,246 --> 00:56:12,946
you will run out of
budget much faster.


1180
00:56:12,946 --> 00:56:16,036
So make sure you include all the
content you need in the pushes.


1181
00:56:16,666 --> 00:56:20,986
That brings us to the
end of our session.


1182
00:56:21,646 --> 00:56:24,046
Briefly going to discuss
what we talked about today.


1183
00:56:24,046 --> 00:56:26,366
We went through the
WatchConnectivity framework


1184
00:56:26,466 --> 00:56:27,186
and APIs.


1185
00:56:27,756 --> 00:56:30,356
We look forward to seeing what
you guys can do with these APIs.


1186
00:56:31,136 --> 00:56:33,236
We briefly discussed
NSURLSession and its use.


1187
00:56:33,636 --> 00:56:36,336
There's other sessions that
go more in depth on what


1188
00:56:36,596 --> 00:56:39,606
and how to use NSURLSession.


1189
00:56:40,086 --> 00:56:43,106
And finally, we discussed how to
get data to your complications,


1190
00:56:43,286 --> 00:56:45,266
which is a more advanced topic.


1191
00:56:46,216 --> 00:56:48,906
There's a lot of other great
resources to check out.


1192
00:56:49,146 --> 00:56:50,586
We have some great sample code,


1193
00:56:50,966 --> 00:56:53,536
and we have our evangelist
that's ready


1194
00:56:53,536 --> 00:56:54,806
to answer any of your questions.


1195
00:56:55,516 --> 00:56:58,266
As far as other related
sessions,


1196
00:56:58,756 --> 00:57:01,346
we especially suggest you check
out Creating Complications


1197
00:57:01,346 --> 00:57:03,686
with ClockKit and
Networking with NSURLSession,


1198
00:57:03,686 --> 00:57:06,196
as those are closely related to
the content we discussed today.


1199
00:57:07,406 --> 00:57:07,976
Thank you very much.


1200
00:57:08,508 --> 00:57:10,508
[Applause]

