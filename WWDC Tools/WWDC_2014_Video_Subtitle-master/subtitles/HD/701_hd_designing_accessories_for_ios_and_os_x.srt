1
00:00:13,836 --> 00:00:15,356
>> Good morning,
ladies and gentleman.


2
00:00:15,896 --> 00:00:16,996
Thank you for coming today.


3
00:00:17,226 --> 00:00:18,426
My name is Robert Walsh,


4
00:00:18,426 --> 00:00:20,496
and I manage the Platform
Accessories team at Apple.


5
00:00:20,496 --> 00:00:22,326
And today we're going
to be talking


6
00:00:22,326 --> 00:00:26,206
about designing accessories
for iOS and OS X.


7
00:00:27,816 --> 00:00:29,896
So, we've got a packed
session, so let's dive right in.


8
00:00:31,056 --> 00:00:33,996
We're going to start by talking
about accessory interfaces


9
00:00:33,996 --> 00:00:36,066
and the protocols you speak
over those interfaces,


10
00:00:36,986 --> 00:00:39,526
and then the fun bit,
we'll get on to what's new


11
00:00:39,526 --> 00:00:41,836
in iOS 8 and OS X Yosemite.


12
00:00:42,826 --> 00:00:44,916
And finally, we'll wrap
up with some information


13
00:00:44,916 --> 00:00:46,546
on the important
programs that you need


14
00:00:46,546 --> 00:00:51,066
to know about, such as MFI.


15
00:00:51,396 --> 00:00:54,026
Before we start, though, I'd
like to draw your attention


16
00:00:54,026 --> 00:00:55,856
to the accessory
ecosystem as a whole.


17
00:00:55,856 --> 00:00:59,186
I think if we were to describe
the accessory ecosystem


18
00:00:59,186 --> 00:01:00,826
in one word, it would be "huge."


19
00:01:01,916 --> 00:01:04,836
We couldn't even begin to go
through all of the categories


20
00:01:04,836 --> 00:01:07,126
of devices which you,
you have produced for us.


21
00:01:08,286 --> 00:01:10,376
So, this, this session
we're going to focus


22
00:01:10,376 --> 00:01:13,936
on two particular areas,
health and fitness accessories,


23
00:01:13,936 --> 00:01:18,116
which is the HealthKit framework
which you heard about yesterday,


24
00:01:18,926 --> 00:01:22,366
and home automation
accessories, which is part


25
00:01:23,226 --> 00:01:26,066
of the HomeKit framework.


26
00:01:26,066 --> 00:01:27,706
So, first, let's
recap our interfaces.


27
00:01:28,706 --> 00:01:31,646
All of our products
support Bluetooth and Wi-Fi,


28
00:01:31,646 --> 00:01:34,666
and on iOS devices,
you have the option


29
00:01:34,666 --> 00:01:36,666
of a wire connection via
the Lightning connector.


30
00:01:37,856 --> 00:01:42,016
On OS X, those platforms provide
USB and Thunderbolt support.


31
00:01:42,016 --> 00:01:44,966
And both of our platforms
also provide support


32
00:01:45,206 --> 00:01:48,206
for a 3-and-a-half
mm headphone jack.


33
00:01:49,006 --> 00:01:51,326
Let's start with Bluetooth.


34
00:01:51,376 --> 00:01:53,516
We've got some interesting new
Bluetooth features this year.


35
00:01:56,766 --> 00:01:58,876
First up, Bluetooth Low Energy.


36
00:01:59,776 --> 00:02:01,966
Now, this isn't the new
interface to our device.


37
00:02:02,376 --> 00:02:04,226
We already support
general communication,


38
00:02:04,226 --> 00:02:06,306
which are applications via
the core Bluetooth framework,


39
00:02:07,176 --> 00:02:09,476
and we support the Apple
Notification Center service,


40
00:02:09,856 --> 00:02:11,206
which allows your accessory


41
00:02:11,206 --> 00:02:13,596
to receive notifications
from the iOS device.


42
00:02:15,006 --> 00:02:18,916
We also support low-energy audio
for producing hearing aids.


43
00:02:20,156 --> 00:02:21,596
And of course we
support iBeacon,


44
00:02:22,076 --> 00:02:23,566
which provides location
services.


45
00:02:24,496 --> 00:02:26,986
This year, we're
adding two new profiles


46
00:02:26,986 --> 00:02:27,846
to Bluetooth Low Energy.


47
00:02:29,026 --> 00:02:31,146
These are support for
HealthKit accessories


48
00:02:31,146 --> 00:02:34,246
and HomeKit accessories,
and we'll go


49
00:02:34,246 --> 00:02:37,216
into a lot more detail
about those shortly.


50
00:02:37,616 --> 00:02:39,266
I also want to draw
your attention


51
00:02:39,266 --> 00:02:41,146
to the Apple Notification
Center service.


52
00:02:42,516 --> 00:02:44,866
We introduced this in iOS 7,


53
00:02:45,516 --> 00:02:47,996
and this year we're adding some
enhancements to the feature.


54
00:02:50,066 --> 00:02:52,206
We are now allowing your
accessory to respond


55
00:02:52,206 --> 00:02:55,656
to notifications with a
positive or a negative response.


56
00:02:56,676 --> 00:02:57,426
So, what does that mean?


57
00:02:58,226 --> 00:02:59,746
Supposing you receive
a notification


58
00:02:59,746 --> 00:03:00,866
of an incoming phone call.


59
00:03:01,476 --> 00:03:03,606
A positive response
might answer the call.


60
00:03:03,666 --> 00:03:05,256
A negative response
might decline it.


61
00:03:06,416 --> 00:03:09,376
Another example might be
a voicemail notification.


62
00:03:10,126 --> 00:03:12,946
A positive response in that case
might call back the originator


63
00:03:12,946 --> 00:03:13,816
of the call.


64
00:03:14,126 --> 00:03:15,526
A negative response
might dismiss it


65
00:03:15,526 --> 00:03:16,626
from the Notification Center.


66
00:03:16,626 --> 00:03:19,886
Now, there's something
I want to point out,


67
00:03:21,276 --> 00:03:23,736
which is that we don't really
set in stone what those positive


68
00:03:23,736 --> 00:03:28,296
and negative responses actually
do, and we, we may change them


69
00:03:28,296 --> 00:03:30,416
in future releases for
any given notification.


70
00:03:31,416 --> 00:03:33,696
So, it's important when you're
presenting this to your user


71
00:03:33,696 --> 00:03:36,136
as an interface that you
present it in the generic manner


72
00:03:36,136 --> 00:03:38,436
and not actually tie it to
what you expect the behavior


73
00:03:38,436 --> 00:03:38,866
might be.


74
00:03:40,226 --> 00:03:43,616
Let's move on to
Bluetooth Classic.


75
00:03:44,686 --> 00:03:45,676
We have an alphabet soup


76
00:03:45,676 --> 00:03:47,516
of Bluetooth Classic
profiles that we support.


77
00:03:47,866 --> 00:03:49,906
I won't go through them
all, but there's the list.


78
00:03:51,346 --> 00:03:55,266
But we do have some
Apple-specific profiles,


79
00:03:55,266 --> 00:03:56,086
which we also support.


80
00:03:56,946 --> 00:03:59,116
If your accessory
has a battery in it,


81
00:03:59,376 --> 00:04:02,976
you can use the headset battery
level indicator to tell us


82
00:04:02,976 --> 00:04:05,816
about the charge state of
your battery, then we can use


83
00:04:05,816 --> 00:04:08,346
that to display on the, on
the iOS device, for example.


84
00:04:09,736 --> 00:04:11,676
We also provide Siri Eyes Free.


85
00:04:11,676 --> 00:04:14,466
This is primarily of interest
to automotive vendors.


86
00:04:14,586 --> 00:04:18,796
It allows them to allow their
drivers to interface with Siri


87
00:04:18,796 --> 00:04:20,255
in a safe manner
while they're driving.


88
00:04:22,005 --> 00:04:27,626
Oh, and one other thing I forgot
to mention, we also provide iAP1


89
00:04:27,626 --> 00:04:30,266
and iAP2 support over
Bluetooth, and that opens


90
00:04:30,266 --> 00:04:32,706
up the entire MFI
ecosystem of functionality.


91
00:04:35,156 --> 00:04:36,356
And moving on to Wi-Fi.


92
00:04:36,356 --> 00:04:39,566
All of our devices support
Wi-Fi up to 802.11ac,


93
00:04:40,556 --> 00:04:44,026
dual band operation, and I
think the primary consumer,


94
00:04:44,136 --> 00:04:46,946
from your perspective of
that so far, has been AirPlay


95
00:04:46,946 --> 00:04:48,986
and Wireless Accessory
Configuration feature.


96
00:04:49,606 --> 00:04:51,496
And this year we're
adding in support


97
00:04:51,496 --> 00:04:53,656
for HomeKit accessories
over Wi, over Wi-Fi.


98
00:04:55,636 --> 00:04:56,956
Again, we'll talk
about that later.


99
00:05:00,636 --> 00:05:03,446
Let's move on to wired options.


100
00:05:03,446 --> 00:05:06,736
If you need a wired option,
it's probably because you need


101
00:05:06,736 --> 00:05:09,646
to power your accessory or
provide power to the device,


102
00:05:11,056 --> 00:05:12,146
or you just need the bandwidth,


103
00:05:12,256 --> 00:05:15,206
bandwidth that a wired
connection can offer.


104
00:05:16,006 --> 00:05:18,176
On iOS devices, we offer
the Lightning connector,


105
00:05:19,836 --> 00:05:22,206
and this year we have some new
functionality to offer you.


106
00:05:23,026 --> 00:05:24,916
We're offering a
Lighting headphone module.


107
00:05:24,916 --> 00:05:28,496
Now, this a module that breaks
that analog audio for you,


108
00:05:28,996 --> 00:05:30,516
and it connects straight


109
00:05:30,516 --> 00:05:32,616
into the Lightning
connector on your iOS device.


110
00:05:33,786 --> 00:05:35,046
So, why would you want
to do this instead


111
00:05:35,046 --> 00:05:37,256
of just using the regular
3-and-a-half mm jack?


112
00:05:38,026 --> 00:05:41,046
Well, for one, it also
provides a digital interface


113
00:05:41,076 --> 00:05:44,856
to the device so you can offer
richer controls to your users,


114
00:05:45,556 --> 00:05:47,166
such as integration
with iTunes Radio.


115
00:05:48,086 --> 00:05:50,066
If your headphones, for example,


116
00:05:50,066 --> 00:05:52,286
support let's say
noise cancellation,


117
00:05:53,086 --> 00:05:55,536
you can offer an app on your
device that communicates


118
00:05:55,536 --> 00:05:57,466
with your headphones to
control how that operates.


119
00:05:58,586 --> 00:05:59,776
And there's one big thing


120
00:05:59,776 --> 00:06:01,956
that isn't listed
here, and that's power.


121
00:06:02,866 --> 00:06:04,896
The Lightning connector
is capable


122
00:06:04,896 --> 00:06:08,036
of powering your accessory,
so you don't need batteries


123
00:06:08,036 --> 00:06:09,226
in your headphones, for example,


124
00:06:09,226 --> 00:06:11,806
to power your noise-cancellation
functionality.


125
00:06:13,736 --> 00:06:16,016
This year, we're also offering
some new connector modules.


126
00:06:16,876 --> 00:06:20,306
These are targeted at people who
are designing form-fitting cases


127
00:06:20,996 --> 00:06:24,526
and cables, and they're a
small form factor with those,


128
00:06:24,606 --> 00:06:25,656
those products in mind.


129
00:06:27,236 --> 00:06:29,476
You can come and talk to us
at the Accessory Labs later


130
00:06:29,596 --> 00:06:32,376
and we'll be happy to go into
more detail of these for you.


131
00:06:32,376 --> 00:06:38,676
On our OS X platforms,
we support USB 3,


132
00:06:38,676 --> 00:06:41,936
all currently shipping Macs
now support USB 3, which allows


133
00:06:41,936 --> 00:06:44,796
up to 5 Gbps per
port, and you can draw


134
00:06:44,796 --> 00:06:47,406
up to 900 mA per port
for your accessory.


135
00:06:49,406 --> 00:06:52,586
If you design your accessories
with USB-IF certification


136
00:06:52,586 --> 00:06:56,236
in mind, you'll be guaranteed
that they will work flawlessly


137
00:06:56,236 --> 00:06:57,406
with our, with our platforms.


138
00:06:58,376 --> 00:07:04,326
All of our currently shipping
Macs also support Thunderbolt 2.


139
00:07:05,486 --> 00:07:07,436
And Thunderbolt is
an I/O standard


140
00:07:07,506 --> 00:07:14,336
that multiplexes DisplayPort and
PCI Express onto a single cable.


141
00:07:15,636 --> 00:07:17,666
You'll use this if you really
want the performance of,


142
00:07:17,666 --> 00:07:18,636
of the Thunderbolt.


143
00:07:18,636 --> 00:07:23,176
It gives you 20 Gbps per port,
and your accessories can draw


144
00:07:23,176 --> 00:07:24,866
up to 10 amps, or,
10 watts of power.


145
00:07:26,546 --> 00:07:28,346
In many cases, this means
you won't actually have


146
00:07:28,346 --> 00:07:29,836
to provide a power
supply for your accessory,


147
00:07:30,106 --> 00:07:34,546
an external power supply.


148
00:07:34,596 --> 00:07:36,226
If you're interested
in producing USB 3


149
00:07:36,226 --> 00:07:38,146
or Thunderbolt 2 accessories,
please come and talk


150
00:07:38,146 --> 00:07:39,356
to us at the I/O Labs.


151
00:07:39,506 --> 00:07:43,096
There's one going on right now,
but it'll be going until 11:30,


152
00:07:43,096 --> 00:07:44,156
and there's one later
in the week.


153
00:07:45,656 --> 00:07:47,306
And last but not least,


154
00:07:47,626 --> 00:07:50,466
all of our products also support
the standard 3-and-a-half mm


155
00:07:50,466 --> 00:07:51,166
headphone jack.


156
00:07:51,686 --> 00:07:55,276
And we also provide a module
for you to incorporate it


157
00:07:55,276 --> 00:07:57,706
to your products, which
allows you to take advantage


158
00:07:57,706 --> 00:07:59,076
of the remote control
functionality


159
00:07:59,076 --> 00:08:04,526
that we offer over this jack.


160
00:08:05,036 --> 00:08:05,696
So, now the fun bit.


161
00:08:05,896 --> 00:08:08,186
What's new in iOS 8 and
OS X Yosemite this year.


162
00:08:09,176 --> 00:08:10,326
At this stage, I'm going to hand


163
00:08:10,326 --> 00:08:12,606
over to my colleague,
Terry Worley.


164
00:08:12,986 --> 00:08:14,976
He's going to talk to you
about HealthKit accessories.


165
00:08:16,516 --> 00:08:22,506
[ Applause ]


166
00:08:23,006 --> 00:08:23,556
>> Thanks, Robert.


167
00:08:24,486 --> 00:08:25,936
Hello, my name is Terry Worley.


168
00:08:26,166 --> 00:08:28,676
I'm one of the engineers
on the HealthKit team.


169
00:08:29,036 --> 00:08:31,516
So, first thing's first.


170
00:08:32,586 --> 00:08:33,996
What is HealthKit?


171
00:08:34,836 --> 00:08:36,506
Well, if you saw in
the keynote yesterday,


172
00:08:36,506 --> 00:08:38,086
this is a brand-new framework


173
00:08:38,155 --> 00:08:40,395
that we are introducing
in iOS 8.


174
00:08:41,326 --> 00:08:48,386
It provides a rich set of
APIs to save and access health


175
00:08:48,386 --> 00:08:49,726
and fitness-related data.


176
00:08:50,176 --> 00:08:54,306
This data can consist
of weight, step count,


177
00:08:54,306 --> 00:08:58,076
nutritional information,
blood pressure, glucose.


178
00:08:58,076 --> 00:09:00,886
In fact, there are
over 60 types of data


179
00:09:00,936 --> 00:09:02,476
that is supported in HealthKit.


180
00:09:03,886 --> 00:09:06,476
Because security is
vital when we're talking


181
00:09:06,476 --> 00:09:07,776
about our health information,


182
00:09:08,246 --> 00:09:10,646
of course we're using
class A data protection.


183
00:09:11,686 --> 00:09:14,646
But beyond that, we
are providing users


184
00:09:14,646 --> 00:09:17,526
with extensive privacy
settings so that each


185
00:09:17,526 --> 00:09:21,836
of us can control access
to our health data.


186
00:09:22,536 --> 00:09:25,946
We're implementing
sophisticated searches as well


187
00:09:25,946 --> 00:09:27,386
as statistical queries.


188
00:09:27,686 --> 00:09:30,166
Statistical queries
might be something like,


189
00:09:30,336 --> 00:09:34,846
"What has been my total daily
step count every day this month?


190
00:09:35,056 --> 00:09:36,456
Give me a list of those."


191
00:09:36,456 --> 00:09:37,526
Or, "Give me a list


192
00:09:37,526 --> 00:09:40,996
of my average weekly
weight over the past year."


193
00:09:42,516 --> 00:09:46,446
We're doing unit conversions
- Fahrenheit to Celsius,


194
00:09:47,296 --> 00:09:50,106
kilograms to stones to pounds -


195
00:09:50,436 --> 00:09:53,526
all of these are built
right into the APIs.


196
00:09:54,426 --> 00:09:57,846
HealthKit provides
notifications about new data.


197
00:09:58,106 --> 00:10:01,416
So, data can come from
a number of sources.


198
00:10:01,706 --> 00:10:04,316
A user may have entered
what they had for breakfast


199
00:10:04,316 --> 00:10:10,066
into a diet app, or it may come
through some tight integration


200
00:10:10,066 --> 00:10:13,036
with other OS technologies
on your device.


201
00:10:13,036 --> 00:10:15,896
Or, more importantly for
us right here right now,


202
00:10:16,436 --> 00:10:19,276
it's a seamless integration
with accessories.


203
00:10:19,276 --> 00:10:21,576
So, we're not going
to go any more


204
00:10:21,576 --> 00:10:24,146
into HealthKit beyond
accessories right now,


205
00:10:24,496 --> 00:10:26,316
but HealthKit is
at the conference,


206
00:10:26,316 --> 00:10:29,526
and we'll talk shortly about
what's coming up with that.


207
00:10:29,526 --> 00:10:31,166
So, for the next few minutes,


208
00:10:31,166 --> 00:10:33,946
let's talk about what
HealthKit means to hardware


209
00:10:33,946 --> 00:10:37,316
and software developers
with respect to accessories.


210
00:10:38,536 --> 00:10:41,306
Now, if you saw this
session last year,


211
00:10:41,306 --> 00:10:44,226
Brian Tucker got
onstage and he spoke


212
00:10:44,226 --> 00:10:49,356
of the explosive proliferation
of Bluetooth Low Energy devices


213
00:10:49,356 --> 00:10:52,186
in the market, over
a billion of them


214
00:10:52,276 --> 00:10:54,406
in the marketplace
just last year.


215
00:10:54,886 --> 00:10:59,176
And he also noted that Bluetooth
Low Energy is especially well


216
00:10:59,176 --> 00:11:04,206
suited for health and sports and
fitness-related applications.


217
00:11:05,286 --> 00:11:07,106
In fact, if we looked
around the room, it's,


218
00:11:07,236 --> 00:11:10,186
it's likely that we would
find a lot of Nike Fuel Bands,


219
00:11:10,186 --> 00:11:12,566
Fitbits, Withings, et cetera.


220
00:11:13,126 --> 00:11:14,376
I'm even wearing one.


221
00:11:14,376 --> 00:11:15,876
I've been wearing one
for quite a while now.


222
00:11:16,176 --> 00:11:21,986
In fact, HealthKit
is so powerful


223
00:11:22,646 --> 00:11:27,206
that it can transform a
software engineer, like me,


224
00:11:27,796 --> 00:11:29,376
just by working on it.


225
00:11:30,176 --> 00:11:32,266
Someone who shuns the daylight,


226
00:11:33,286 --> 00:11:38,096
who spends years sitting behind
the computer, living my life


227
00:11:38,096 --> 00:11:39,696
by the light of my displays.


228
00:11:39,806 --> 00:11:42,226
Some of you can probably
relate to that.


229
00:11:43,246 --> 00:11:46,976
Now, working on HealthKit, I'm
using a standing workstation.


230
00:11:47,886 --> 00:11:49,546
I am riding my bike to work,


231
00:11:50,296 --> 00:11:53,046
and I'm even wearing a
heart rate chest strap


232
00:11:53,046 --> 00:11:53,886
on my bike rides.


233
00:11:55,506 --> 00:11:57,116
That has been particularly
challenging,


234
00:11:57,116 --> 00:11:58,396
because I've been
keeping that secret


235
00:11:58,396 --> 00:11:59,766
from my family for months now.


236
00:12:00,126 --> 00:12:01,596
They're always looking
for clues,


237
00:12:01,596 --> 00:12:03,186
"What are you working
on at work?"


238
00:12:04,146 --> 00:12:04,956
Well, now they know.


239
00:12:05,626 --> 00:12:07,236
That is the power of HealthKit.


240
00:12:08,516 --> 00:12:14,576
And accessories are playing
a vital role in delivering


241
00:12:14,576 --> 00:12:16,196
that data to HealthKit.


242
00:12:16,846 --> 00:12:18,766
HealthKit is now
uniquely positioned


243
00:12:19,096 --> 00:12:22,986
to be the key component to
finally bring together all


244
00:12:22,986 --> 00:12:26,866
of these accessories, all of
these health and fitness apps,


245
00:12:26,936 --> 00:12:30,766
by consolidating the data
into one centralized source,


246
00:12:30,766 --> 00:12:33,066
and this is going to open
up a lot of opportunities


247
00:12:33,066 --> 00:12:37,136
for accessory manufacturers
as well as app developers


248
00:12:38,146 --> 00:12:41,606
by providing this new, rich
environment, and a lot of data.


249
00:12:42,666 --> 00:12:45,166
So, we want to build
accessories.


250
00:12:45,456 --> 00:12:46,606
What is required?


251
00:12:47,396 --> 00:12:53,356
All right, so Bluetooth.org has
provided official specifications


252
00:12:53,356 --> 00:12:55,796
for a number of built-in
or, excuse me,


253
00:12:55,896 --> 00:12:57,906
a number of Bluetooth
Low Energy devices.


254
00:12:57,906 --> 00:13:02,296
So, for HealthKit, we're going
to be supporting these four


255
00:13:02,676 --> 00:13:04,316
as built-in, or native.


256
00:13:04,856 --> 00:13:07,746
That's our heart rate
monitor, our glucose sensor,


257
00:13:07,996 --> 00:13:10,486
the blood pressure monitor
and the health thermometer.


258
00:13:10,926 --> 00:13:12,526
So, built-in.


259
00:13:12,796 --> 00:13:13,586
What does that mean?


260
00:13:14,346 --> 00:13:20,186
Well, once you have paired one
of these devices with HealthKit,


261
00:13:21,006 --> 00:13:23,186
it takes over and it will
control the accessory.


262
00:13:23,676 --> 00:13:25,946
It will connect to it
whenever it's in range.


263
00:13:25,946 --> 00:13:27,686
It will gather data from it.


264
00:13:27,726 --> 00:13:29,056
It'll save it in HealthKit


265
00:13:29,396 --> 00:13:32,086
and then it will notify
all clients interested


266
00:13:32,086 --> 00:13:33,326
in that kind of data.


267
00:13:34,226 --> 00:13:37,006
So, what this means to
hardware manufacturers,


268
00:13:37,256 --> 00:13:39,346
if you're developing one
of these accessories,


269
00:13:39,896 --> 00:13:41,686
you don't have to
ship an app with it


270
00:13:41,876 --> 00:13:44,006
because it will automatically
work with HealthKit.


271
00:13:44,386 --> 00:13:47,196
And all the apps out there
that want to use one of these,


272
00:13:47,686 --> 00:13:50,566
they also benefit because
they no longer have to worry


273
00:13:50,566 --> 00:13:53,006
about the code to
pair the devices.


274
00:13:53,366 --> 00:13:55,236
They don't need to
use Core Bluetooth now


275
00:13:55,236 --> 00:14:00,266
to manage the connections, the
discovery, collecting the data,


276
00:14:00,266 --> 00:14:01,686
parsing the data, etcetera.


277
00:14:03,266 --> 00:14:06,886
And so this will provide a, a
great opportunity for hardware


278
00:14:06,886 --> 00:14:08,586
and software manufacturers.


279
00:14:10,866 --> 00:14:15,776
So, of these four types,
what is required then?


280
00:14:16,226 --> 00:14:20,236
What do you need to do to
have a native accessory live


281
00:14:20,236 --> 00:14:21,426
in the HealthKit world?


282
00:14:22,346 --> 00:14:24,826
Well, the easy answer
is, simply adhere


283
00:14:24,826 --> 00:14:27,896
to the Bluetooth.org
specifications.


284
00:14:28,306 --> 00:14:29,276
That's what we're doing.


285
00:14:29,686 --> 00:14:32,346
So, if you do that,
then we're just going


286
00:14:32,346 --> 00:14:33,476
to live happily forever.


287
00:14:33,636 --> 00:14:34,686
Live happily ever after.


288
00:14:36,756 --> 00:14:38,566
There are, however,
some best practices


289
00:14:38,566 --> 00:14:39,576
that we would recommend.


290
00:14:40,626 --> 00:14:43,646
First of all, implement
the optional fields


291
00:14:43,646 --> 00:14:44,606
within the service.


292
00:14:44,606 --> 00:14:48,856
For example, the blood pressure
service has an optional heart


293
00:14:48,856 --> 00:14:50,536
rate field, measurement field.


294
00:14:51,406 --> 00:14:54,866
If you implement that, HealthKit
will also extract that data


295
00:14:55,166 --> 00:14:58,686
and save that as a heart rate
data point in the database


296
00:14:58,726 --> 00:15:01,726
and then notify any clients
interested in heart rate.


297
00:15:03,636 --> 00:15:05,916
And similar to that,
there are some types


298
00:15:05,916 --> 00:15:08,976
of optional measurement fields


299
00:15:08,976 --> 00:15:11,466
that maybe don't
correspond specifically


300
00:15:11,466 --> 00:15:13,406
to a HealthKit data type.


301
00:15:13,406 --> 00:15:15,726
In this example, we're
talking about heart rate,


302
00:15:15,726 --> 00:15:17,816
also has an energy
expended field.


303
00:15:18,516 --> 00:15:20,356
This is still valuable
to implement


304
00:15:20,776 --> 00:15:23,326
because HealthKit will save
these other kinds of data


305
00:15:23,426 --> 00:15:27,226
as metadata along with
the original measurement,


306
00:15:27,726 --> 00:15:28,816
in this case, heart rate.


307
00:15:28,816 --> 00:15:31,176
So, you can still
access that data.


308
00:15:33,446 --> 00:15:35,426
Implement optional
characteristics.


309
00:15:35,476 --> 00:15:37,966
For example, a sensor contact.


310
00:15:38,226 --> 00:15:41,316
If you have a heart rate
chest strap and it indicates


311
00:15:41,316 --> 00:15:44,336
that there is no sensor contact,
then HealthKit will not save


312
00:15:44,336 --> 00:15:45,666
that data to the database.


313
00:15:45,966 --> 00:15:47,976
That helps maintain
integrity of the data.


314
00:15:48,146 --> 00:15:51,906
So, implement optional
characteristics like that.


315
00:15:53,416 --> 00:15:54,986
Implement optional services.


316
00:15:55,636 --> 00:15:56,386
There aren't a lot of them,


317
00:15:56,386 --> 00:15:58,416
but battery services
is a good example.


318
00:15:58,776 --> 00:16:00,346
So, if you're implementing
battery service,


319
00:16:00,346 --> 00:16:04,216
then HealthKit can look at
that and respond accordingly


320
00:16:04,286 --> 00:16:05,546
when battery levels are low.


321
00:16:05,736 --> 00:16:09,416
All right.


322
00:16:10,986 --> 00:16:14,866
Now, what if you are developing
an accessory that doesn't fall


323
00:16:14,866 --> 00:16:16,266
into one of those
four categories?


324
00:16:16,896 --> 00:16:17,726
That is awesome.


325
00:16:18,026 --> 00:16:19,296
Please continue to do so.


326
00:16:21,326 --> 00:16:24,346
All custom accessories
are very much welcome


327
00:16:24,526 --> 00:16:27,616
in the HealthKit world.


328
00:16:28,086 --> 00:16:31,346
So, what do you need to do?


329
00:16:31,576 --> 00:16:33,806
Go ahead and use the
external accessory framework.


330
00:16:34,256 --> 00:16:38,366
Use Core Bluetooth, whether
Classic, Low Energy, use Wi-Fi,


331
00:16:38,366 --> 00:16:42,256
use USB, whatever
technology makes sense for you


332
00:16:42,256 --> 00:16:44,196
and your device, do it.


333
00:16:45,026 --> 00:16:48,316
Then in your app that's
controlling that device,


334
00:16:48,586 --> 00:16:52,566
simply use the HealthKit APIs to
save that data into HealthKit.


335
00:16:52,566 --> 00:16:55,946
It will then be notified, or
all clients will be notified


336
00:16:55,946 --> 00:16:57,256
about that data as well.


337
00:16:57,976 --> 00:16:59,266
So, we are very hopeful


338
00:16:59,266 --> 00:17:02,466
that custom accessory
manufacturers will join


339
00:17:02,506 --> 00:17:03,486
into the HealthKit party.


340
00:17:03,916 --> 00:17:06,126
It'll make a much richer
environment for everybody.


341
00:17:07,276 --> 00:17:11,836
So, we've been talking about
these devices getting data in.


342
00:17:12,016 --> 00:17:15,276
So, how do you then know


343
00:17:15,376 --> 00:17:17,556
when some heart rate
data has been added


344
00:17:17,556 --> 00:17:19,886
to your, into HealthKit?


345
00:17:20,356 --> 00:17:22,646
Well, let's step through
a quick example here.


346
00:17:24,006 --> 00:17:26,165
All right, this is
HealthKit code.


347
00:17:26,165 --> 00:17:27,576
I think this is the
first HealthKit code


348
00:17:27,576 --> 00:17:28,226
of the conference.


349
00:17:28,656 --> 00:17:32,876
So the first thing you'll want
is you'll want a HealthKit


350
00:17:32,876 --> 00:17:36,146
Health Store, and in this case
I'm just going to define it


351
00:17:36,146 --> 00:17:41,096
as a property and initialize
what, an instance of it.


352
00:17:41,256 --> 00:17:44,166
As you can see, I am
consolidating a bit here


353
00:17:44,166 --> 00:17:47,216
for brevity, so don't expect
this to compile like this,


354
00:17:47,216 --> 00:17:49,616
and we'll leave it an
exercise to the reader as to


355
00:17:49,826 --> 00:17:51,546
where that might
actually go in your code.


356
00:17:52,446 --> 00:17:53,836
And I also apologize.


357
00:17:53,836 --> 00:17:56,156
This is the archaic
Objective-C language.


358
00:17:56,766 --> 00:17:59,736
And so we are, we're still
going to work through that.


359
00:18:00,516 --> 00:18:01,526
All right.


360
00:18:02,566 --> 00:18:03,976
So, now that we've done that,


361
00:18:03,976 --> 00:18:06,566
now what's the interesting
part is we're going


362
00:18:06,566 --> 00:18:09,756
to create a HealthKit
data object type.


363
00:18:10,236 --> 00:18:13,006
And in this case, we are
interested in heart rate.


364
00:18:14,046 --> 00:18:16,086
So, once we've created
that heart rate object,


365
00:18:16,456 --> 00:18:19,836
we're now going to create
an observer query using


366
00:18:19,836 --> 00:18:21,016
that heart rate object.


367
00:18:21,476 --> 00:18:23,586
And you see on the line
of code there's also one


368
00:18:23,586 --> 00:18:24,396
called predicate.


369
00:18:24,816 --> 00:18:28,496
The predicate provides a lot
of filtering options for you.


370
00:18:28,986 --> 00:18:31,986
We don't really care, we
just want to be notified


371
00:18:31,986 --> 00:18:35,266
about everything when, and
so we'll just pass nil.


372
00:18:35,656 --> 00:18:37,576
And then we have
an updateHandler.


373
00:18:37,856 --> 00:18:40,386
Now, this updateHandler is
called whenever the database


374
00:18:40,386 --> 00:18:44,576
changes with regard to that
data type, you will be notified.


375
00:18:44,716 --> 00:18:47,896
So, it's inside the handler then
that we want to add the code


376
00:18:47,976 --> 00:18:48,756
that we're interested in


377
00:18:48,756 --> 00:18:50,296
and this is going
to be app-specific.


378
00:18:50,606 --> 00:18:52,846
Maybe you just want
to update some UI.


379
00:18:53,796 --> 00:18:56,116
Maybe you want to trigger
some other kind of event


380
00:18:56,116 --> 00:18:57,596
or do some statistics, whatever.


381
00:18:58,276 --> 00:19:01,746
So, in this case, I'm just
saying fetch new samples,


382
00:19:02,166 --> 00:19:05,446
and that would go retrieve
those samples from the database.


383
00:19:05,446 --> 00:19:08,066
That's going to be covered in
the next HealthKit session,


384
00:19:08,066 --> 00:19:09,396
so we won't go any
farther into that.


385
00:19:09,396 --> 00:19:12,896
But now that we've set up
our observer query, next,


386
00:19:12,896 --> 00:19:15,516
the last thing we need to do is
take that Health Store object


387
00:19:15,856 --> 00:19:17,116
and execute the query.


388
00:19:17,646 --> 00:19:21,966
So, this query can live for
the lifetime of your app


389
00:19:21,966 --> 00:19:23,086
or until you say stop.


390
00:19:23,456 --> 00:19:25,566
So, anytime heart
rate is entered


391
00:19:25,566 --> 00:19:27,416
into HealthKit, you
will be notified.


392
00:19:28,466 --> 00:19:31,026
So, let's see some
of this in action.


393
00:19:31,646 --> 00:19:35,576
I'd like to invite my
colleague, Jorge Morinigo


394
00:19:35,756 --> 00:19:36,916
up to the stage with me.


395
00:19:37,516 --> 00:19:40,806
[ Applause ]


396
00:19:41,306 --> 00:19:42,166
>> Good morning, everybody.


397
00:19:43,006 --> 00:19:44,226
Good morning, Terry.


398
00:19:45,246 --> 00:19:48,146
>> Jorge. You didn't get the
dress code memo, did you?


399
00:19:48,396 --> 00:19:50,316
>> Oops. En que vive.


400
00:19:50,846 --> 00:19:53,386
>> For the record, there
was no dress code memo.


401
00:19:53,756 --> 00:19:54,806
It was pretty cool.


402
00:19:55,896 --> 00:19:58,286
Jorge is dressed
up in athletic gear


403
00:19:59,106 --> 00:20:01,576
because he is wearing a
heart rate chest strap.


404
00:20:02,496 --> 00:20:06,666
So, we're going to
go to our iOS device.


405
00:20:07,286 --> 00:20:09,396
On the screen, you can see
we have two apps of interest.


406
00:20:09,396 --> 00:20:11,916
One is the "Health" app that
was introduced yesterday.


407
00:20:12,926 --> 00:20:16,736
So, let's launch
"Health," and we will go


408
00:20:16,736 --> 00:20:18,176
to the Health Data tab,


409
00:20:19,306 --> 00:20:23,246
and we'll choose vital
signs and heart rate.


410
00:20:24,466 --> 00:20:26,576
And we see we have
an empty chart.


411
00:20:28,046 --> 00:20:30,126
Go to Show All Data,
we've got nothing.


412
00:20:30,636 --> 00:20:33,096
So, we need to get some
data in here, Jorge.


413
00:20:33,656 --> 00:20:34,856
>> OK, I'm ready.


414
00:20:35,046 --> 00:20:35,726
>> All right.


415
00:20:36,096 --> 00:20:39,246
So, let's go to this,
and there's a heart rate.


416
00:20:39,936 --> 00:20:42,476
And we are now connected.


417
00:20:42,866 --> 00:20:45,226
And I should also point out
that in the seed you received


418
00:20:45,226 --> 00:20:48,136
with the conference, the pairing
is happening here in "Health."


419
00:20:48,136 --> 00:20:51,076
Future seeds may not be here,
so if you don't find it,


420
00:20:51,076 --> 00:20:55,656
then go back to the Settings
app under Bluetooth to try that.


421
00:20:55,996 --> 00:20:58,476
And we go our chart and we
see we already have new data


422
00:20:58,476 --> 00:20:59,046
coming in.


423
00:20:59,836 --> 00:21:02,776
So we go to Show All
Data, and there we go.


424
00:21:06,566 --> 00:21:11,606
So, now with that running,
let's launch our demo app


425
00:21:11,676 --> 00:21:13,626
that Jorge has provided for us.


426
00:21:14,926 --> 00:21:17,656
Jorge, your heart rate
is elevated [laughter].


427
00:21:18,596 --> 00:21:23,616
We, we tried this, we tested
this a number of times, and -


428
00:21:23,716 --> 00:21:25,166
>> It was in the 60s.


429
00:21:25,166 --> 00:21:27,126
>> Oh, it went.


430
00:21:27,586 --> 00:21:29,206
I'm sure it has nothing
to do with the fact


431
00:21:29,206 --> 00:21:33,436
that you are sitting in front
of millions of people right now.


432
00:21:33,906 --> 00:21:36,506
Well, at this point, you know,
when we ran through this,


433
00:21:36,506 --> 00:21:38,206
it was a, a nice,
resting heart rate,


434
00:21:38,206 --> 00:21:39,926
and that's why we had Jorge
sitting, because we want


435
00:21:39,926 --> 00:21:42,166
to start with a nice,
resting heart rate.


436
00:21:42,926 --> 00:21:44,126
>> I try to relax.


437
00:21:44,236 --> 00:21:44,966
>> OK, relax.


438
00:21:45,056 --> 00:21:45,586
Relax, Jorge.


439
00:21:45,736 --> 00:21:46,676
Let's watch it come down.


440
00:21:47,006 --> 00:21:47,586
Don't be nervous.


441
00:21:48,536 --> 00:21:51,946
So we were thinking what we
would have Jorge do is actually


442
00:21:51,946 --> 00:21:55,636
do some, some pushups for us to,
you know, raise the heart rate,


443
00:21:55,636 --> 00:21:57,966
but I'm not sure we want
to do that, because,


444
00:21:58,006 --> 00:22:00,846
because Jorge's an
engineer also.


445
00:22:01,076 --> 00:22:02,526
We don't want to go too far.


446
00:22:02,526 --> 00:22:03,916
But let's try it.


447
00:22:03,916 --> 00:22:04,996
>> Let's go for it.


448
00:22:04,996 --> 00:22:06,596
>> Jorge, drop and give me 10.


449
00:22:06,596 --> 00:22:07,436
>> OK. OK.


450
00:22:07,786 --> 00:22:08,166
>> Please.


451
00:22:08,456 --> 00:22:11,236
I'm not his boss so I
still have to say please.


452
00:22:12,186 --> 00:22:12,796
>> 1, 2.


453
00:22:12,796 --> 00:22:13,356
>> 2.


454
00:22:13,576 --> 00:22:24,006
>> 3, 4, 5, 6, 7, 8, 9, 10.


455
00:22:24,436 --> 00:22:25,946
>> All right.


456
00:22:26,516 --> 00:22:31,016
[ Applause ]


457
00:22:31,516 --> 00:22:35,056
>> OK. What was important here
is we did get the delta we were


458
00:22:35,056 --> 00:22:35,736
looking for.


459
00:22:37,636 --> 00:22:41,386
So, Jorge will now relax,
and that heart rate will come


460
00:22:41,386 --> 00:22:42,696
down quickly, I'm sure.


461
00:22:43,746 --> 00:22:44,646
Yeah, there we go.


462
00:22:44,806 --> 00:22:45,506
It's coming down.


463
00:22:46,356 --> 00:22:49,806
So, now we'll go back
to our "Health" app,


464
00:22:50,486 --> 00:22:51,536
and we look at our data,


465
00:22:52,146 --> 00:22:57,986
and we can see all these
are in there now, 160.


466
00:22:59,456 --> 00:23:01,806
So, we got a lot of
heart rate there.


467
00:23:02,956 --> 00:23:06,356
So, in this example, these were
both using those same observer


468
00:23:06,356 --> 00:23:08,676
queries, both of them
running independently.


469
00:23:09,146 --> 00:23:11,046
Heart rate is being
added to HealthKit.


470
00:23:11,046 --> 00:23:12,256
Both are being notified


471
00:23:12,486 --> 00:23:14,216
and so they both have
access to the data.


472
00:23:14,606 --> 00:23:15,356
And that's our demo.


473
00:23:15,516 --> 00:23:15,996
Thanks, Jorge.


474
00:23:16,496 --> 00:23:16,876
>> Thank you.


475
00:23:18,516 --> 00:23:24,216
[ Applause ]


476
00:23:24,716 --> 00:23:28,956
>> So, that's, that's basically
it for HealthKit accessories.


477
00:23:29,976 --> 00:23:33,656
This next hour, next session, we
have our main HealthKit session.


478
00:23:33,986 --> 00:23:35,366
So, we'd encourage you
to go that if you want


479
00:23:35,366 --> 00:23:36,576
to hear more about HealthKit.


480
00:23:37,176 --> 00:23:40,296
At the end of the day, we have a
health and fitness get together.


481
00:23:40,566 --> 00:23:43,326
This will be a more informal
discussion and Q and A


482
00:23:43,326 --> 00:23:44,296
if you're interested in that.


483
00:23:44,656 --> 00:23:48,676
Not on this slide, but we also
have HealthKit Labs starting


484
00:23:48,676 --> 00:23:50,776
today at 11:30 for a
couple of hours, I believe,


485
00:23:51,126 --> 00:23:52,676
and then again on Friday.


486
00:23:52,676 --> 00:23:54,776
So, if you want to play
with around, with some code,


487
00:23:55,086 --> 00:23:57,906
come to the labs and we'll have
a lot of HealthKit engineers


488
00:23:57,906 --> 00:24:01,286
on hand, and Jorge and I
will also be around to help


489
00:24:01,326 --> 00:24:03,106
with HealthKit and
or accessories.


490
00:24:03,566 --> 00:24:06,136
So with that, we'll turn the
time over to Kevin McLaughlin


491
00:24:06,136 --> 00:24:08,266
to tell us about HomeKit.


492
00:24:08,926 --> 00:24:09,796
>> Hello, everybody.


493
00:24:10,126 --> 00:24:11,906
I'm Kevin McLaughlin,
as Terry said.


494
00:24:11,906 --> 00:24:13,946
I'm here to tell you a little
bit more about HomeKit.


495
00:24:14,746 --> 00:24:17,666
So, you've heard about this
a little bit yesterday,


496
00:24:17,736 --> 00:24:20,546
and you'd like to learn
a little bit more.


497
00:24:20,546 --> 00:24:27,536
So, HomeKit is a new way for you


498
00:24:27,536 --> 00:24:33,656
to bring your exciting new
accessories to our users.


499
00:24:35,676 --> 00:24:42,246
The home automation accessory
situation right now is not


500
00:24:42,246 --> 00:24:47,886
as good as it could be,
and HomeKit is a way for us


501
00:24:47,886 --> 00:24:51,936
to work together to provide a
more consistent user experience


502
00:24:52,536 --> 00:24:54,896
for our customers that are
getting into home automation.


503
00:24:55,456 --> 00:24:57,566
So, today I'm going
to be talking,


504
00:24:57,566 --> 00:25:01,146
or this morning I'm going to be
talking about the accessory side


505
00:25:01,146 --> 00:25:06,096
of things a little bit and this
afternoon, we have a session


506
00:25:06,346 --> 00:25:09,626
at 4:30 for you to come and
learn more about the APIs.


507
00:25:10,686 --> 00:25:12,116
So, let's get right
into the protocol.


508
00:25:13,316 --> 00:25:17,156
So, HomeKit Accessory Protocol,
you'll hear me say it a lot


509
00:25:17,156 --> 00:25:20,196
of times, but we do have an
acronym that we like to use,


510
00:25:21,226 --> 00:25:22,226
and that acronym is HAP.


511
00:25:22,226 --> 00:25:24,526
So, you'll hear me say HAP,


512
00:25:24,526 --> 00:25:26,256
that means HomeKit
Accessory Protocol.


513
00:25:27,596 --> 00:25:36,376
So, HomeKit Accessory
Protocol is the way for you


514
00:25:36,376 --> 00:25:39,536
to connect your accessories
to HomeKit.


515
00:25:41,276 --> 00:25:46,146
We support Bluetooth Low
Energy and IP transports.


516
00:25:46,696 --> 00:25:52,116
IP means if your accessory is
able to get onto the same subnet


517
00:25:52,596 --> 00:25:58,076
as an iOS device, then you are
able to connect to HomeKit.


518
00:25:59,876 --> 00:26:04,096
Bluetooth LE, of course,
is direct point-to-point.


519
00:26:05,806 --> 00:26:09,716
Over those transports, we
have done a lot of work


520
00:26:09,716 --> 00:26:12,526
to create a very
secure connection.


521
00:26:13,546 --> 00:26:17,066
So, we have bidirectional
authentication in the protocol,


522
00:26:17,066 --> 00:26:22,056
so when an iOS device
connects to your accessory,


523
00:26:22,696 --> 00:26:25,566
both the iOS device and the
accessory can authenticate


524
00:26:25,716 --> 00:26:31,576
that the entity on the
other end is trusted.


525
00:26:32,826 --> 00:26:37,916
And we have per-session
encryption, so every time


526
00:26:37,986 --> 00:26:41,846
that we connect, we
have an encryption key


527
00:26:41,846 --> 00:26:43,276
that we use for that session.


528
00:26:43,626 --> 00:26:45,446
I'll talk a little more
about security later.


529
00:26:46,366 --> 00:26:48,916
So, now we have transports
and we have security,


530
00:26:49,526 --> 00:26:54,316
but to really make, as Craig
said, to bring some rationality


531
00:26:54,316 --> 00:26:57,216
to this, we need to start
defining a common language


532
00:26:57,436 --> 00:27:00,516
for us to use to
communicate with all


533
00:27:00,516 --> 00:27:02,036
of these home automation
accessories.


534
00:27:03,066 --> 00:27:07,566
So, we have common functionality
definitions that we use,


535
00:27:07,736 --> 00:27:09,906
and this uses a model
that I'm sure many


536
00:27:09,906 --> 00:27:11,856
of you are familiar
with, will look familiar,


537
00:27:12,456 --> 00:27:15,216
where we have services
and characteristics.


538
00:27:15,766 --> 00:27:18,086
So, services describe
a collection


539
00:27:18,166 --> 00:27:20,236
of related functionality
on an accessory,


540
00:27:21,006 --> 00:27:24,336
and characteristics then
are those individual pieces


541
00:27:24,336 --> 00:27:25,156
of functionality.


542
00:27:26,406 --> 00:27:30,456
To give you an idea of
exactly what that means,


543
00:27:31,106 --> 00:27:37,446
we have defined here, all
right, common services


544
00:27:37,446 --> 00:27:39,956
that describe common types of
functionality that you'll find


545
00:27:39,956 --> 00:27:42,976
on home automation
accessories, and characteristics


546
00:27:42,976 --> 00:27:44,846
that would be contained
in those services.


547
00:27:46,766 --> 00:27:50,956
There are many more than this
defined in our specifications,


548
00:27:51,486 --> 00:27:55,346
but even though we would
like to imagine, you know,


549
00:27:55,616 --> 00:27:57,576
we can define every, everything


550
00:27:57,576 --> 00:28:01,596
to make it all a nice common
language, we know that you and,


551
00:28:01,596 --> 00:28:03,326
and other manufacturers are
going to come up with many,


552
00:28:03,326 --> 00:28:08,516
many very clever and interesting
accessories with functionality


553
00:28:08,516 --> 00:28:09,626
that we have not defined.


554
00:28:10,036 --> 00:28:14,536
And so the HomeKit accessory
protocol is fully extensible,


555
00:28:15,126 --> 00:28:17,356
and you can define
any custom service


556
00:28:17,356 --> 00:28:19,276
or any custom characteristic
that you like,


557
00:28:19,276 --> 00:28:23,636
pass that to the iOS
device through HAP,


558
00:28:23,636 --> 00:28:26,216
and that will be then
available to applications


559
00:28:26,216 --> 00:28:29,036
to use through HomeKit APIs.


560
00:28:29,536 --> 00:28:33,436
You can mix and match
Apple-defined services


561
00:28:33,436 --> 00:28:36,286
and custom services,
Apple-defined characteristics


562
00:28:36,286 --> 00:28:38,906
and custom characteristics,
any way that you like.


563
00:28:38,906 --> 00:28:41,086
So, an Apple-defined service
can contain Apple-defined


564
00:28:41,086 --> 00:28:43,306
characteristics and
custom characteristics.


565
00:28:43,696 --> 00:28:47,576
A custom service can contain
Apple-defined characteristics


566
00:28:47,576 --> 00:28:49,026
and custom characteristics.


567
00:28:49,026 --> 00:28:51,496
So, any way that you
like to properly describe


568
00:28:51,496 --> 00:28:52,246
your accessory.


569
00:28:55,316 --> 00:29:00,396
And finally, on this part, all
of the Apple-defined services


570
00:29:00,396 --> 00:29:04,446
and characteristics are
recognized natively by Siri,


571
00:29:05,136 --> 00:29:09,486
and so when you use these
services and characteristics,


572
00:29:09,926 --> 00:29:14,386
users can use very natural
language to interact with


573
00:29:14,386 --> 00:29:18,896
and command and control your
accessories through Siri.


574
00:29:18,896 --> 00:29:22,786
Now, let me talk
a little bit more


575
00:29:22,786 --> 00:29:25,236
about the structure
of the protocol.


576
00:29:26,416 --> 00:29:29,576
So, as I mentioned, we
have Bluetooth LE and IP,


577
00:29:29,786 --> 00:29:33,056
and on top of that
we use L2CAP and TCP


578
00:29:33,156 --> 00:29:36,956
for the transmission
management of data.


579
00:29:37,426 --> 00:29:42,186
On top of that, we use the
Attribute Protocol and HTTP


580
00:29:42,516 --> 00:29:45,186
to provide packaging of the
data as we're sending it.


581
00:29:46,156 --> 00:29:50,186
And then Generic
Attribute Profile GATT


582
00:29:50,646 --> 00:29:54,066
and JavaScript object
notation JSON on the IP side.


583
00:29:55,146 --> 00:29:58,446
This provides the serial,
serialization, the description


584
00:29:59,346 --> 00:30:01,336
of the services and
characteristics


585
00:30:01,336 --> 00:30:03,916
as these messages are
being sent back and forth.


586
00:30:06,226 --> 00:30:09,716
And then we have HomeKit
Accessory Protocol,


587
00:30:10,176 --> 00:30:12,486
where we have defined
the remaining structure.


588
00:30:12,486 --> 00:30:15,926
So, what is the terminology,
the structure of the data


589
00:30:15,926 --> 00:30:18,816
that is being serialized into
GATT and JSON and being sent


590
00:30:19,376 --> 00:30:21,096
between iOS and accessories?


591
00:30:23,596 --> 00:30:25,686
On top of the protocol,
we have HomeKit.


592
00:30:26,176 --> 00:30:28,016
Again, we'll talk more
about this this afternoon,


593
00:30:28,706 --> 00:30:30,016
but that is the mechanism


594
00:30:30,016 --> 00:30:34,276
that makes your accessories
available to applications.


595
00:30:35,636 --> 00:30:38,316
So, while I have this diagram
up here for you to look at,


596
00:30:38,316 --> 00:30:42,526
I want to also take a moment
to point out how our security,


597
00:30:43,126 --> 00:30:45,186
or where, I guess, our
security is applied.


598
00:30:46,726 --> 00:30:52,746
So, on the Bluetooth LE side, we
apply encryption on top of GATT,


599
00:30:53,626 --> 00:30:55,336
and that means that the values


600
00:30:55,386 --> 00:30:58,136
that we're sending
are encrypted.


601
00:30:59,176 --> 00:31:02,126
On the IP side, we apply
encryption on top of TCP.


602
00:31:02,806 --> 00:31:04,876
So, there will be a
TCP connection made


603
00:31:04,876 --> 00:31:07,736
between the iOS device
and your accessory,


604
00:31:09,276 --> 00:31:12,996
and we will send
encrypted packets over TCP.


605
00:31:13,546 --> 00:31:17,266
Inside those packets is the
HomeKit Accessory Protocol,


606
00:31:17,556 --> 00:31:19,396
the services and
characteristics described


607
00:31:19,396 --> 00:31:21,316
in JSON, wrapped in HTTP.


608
00:31:22,696 --> 00:31:25,816
So, I'd like to give you just an
example of what that looks like.


609
00:31:25,816 --> 00:31:30,036
So, let's look at a garage
door opener accessory and talk


610
00:31:30,036 --> 00:31:30,916
about the services


611
00:31:30,916 --> 00:31:32,366
and characteristics
that that might have.


612
00:31:33,426 --> 00:31:35,736
So, this is an IP accessory,


613
00:31:36,056 --> 00:31:40,016
so its top-level block
is an accessory block,


614
00:31:40,886 --> 00:31:43,586
and that accessory
block will contain all


615
00:31:43,586 --> 00:31:45,416
of the services for
this accessory.


616
00:31:45,956 --> 00:31:49,446
So, our first service is the
Accessory Information Service.


617
00:31:50,416 --> 00:31:54,306
Every accessory must have an
Accessory Information Service.


618
00:31:54,916 --> 00:31:59,996
This contains information
that is metadata that applies


619
00:31:59,996 --> 00:32:01,136
to the whole accessory.


620
00:32:02,246 --> 00:32:05,086
So, in this case, for example,
we have a characteristic


621
00:32:05,086 --> 00:32:07,276
of serial number which will
contain the serial number


622
00:32:07,276 --> 00:32:08,106
for this accessory.


623
00:32:09,386 --> 00:32:12,536
We also have a special
characteristic called Identify,


624
00:32:13,616 --> 00:32:17,266
and this also must be
supported by every accessory.


625
00:32:18,056 --> 00:32:26,086
And this characteristic
defines that the accessory must,


626
00:32:26,206 --> 00:32:28,126
when this characteristic
is written to,


627
00:32:28,276 --> 00:32:32,266
the accessory must do something
that will identify it to a user.


628
00:32:32,986 --> 00:32:36,296
So, for example, a light
bulb could flash on and off


629
00:32:36,996 --> 00:32:39,906
when it receives an Identify
characteristic, right.


630
00:32:40,676 --> 00:32:44,846
Or, a thermostat might blink an
LED, or an IP camera might beep.


631
00:32:45,726 --> 00:32:47,666
Whatever it is, is fine.


632
00:32:47,906 --> 00:32:50,646
This can be defined by
the accessory manufacturer


633
00:32:50,646 --> 00:32:52,826
by the accessory, but
it must do something


634
00:32:52,826 --> 00:32:54,296
that will help a
user identify it.


635
00:32:55,906 --> 00:32:58,016
This is particularly useful
in the case where you imagine


636
00:32:58,016 --> 00:33:00,866
that a user has, say, installed
three light bulbs and they want


637
00:33:00,866 --> 00:33:02,256
to set up one of
those light bulbs,


638
00:33:02,256 --> 00:33:04,266
they want to give it a
name, and they want to know


639
00:33:04,266 --> 00:33:07,936
which one is which, all right,
and they can then request


640
00:33:07,936 --> 00:33:09,736
for that accessory
to identify itself.


641
00:33:11,616 --> 00:33:14,406
So, moving on now
to the next service


642
00:33:14,406 --> 00:33:15,596
for this garage door opener.


643
00:33:15,946 --> 00:33:19,796
This is the actual garage
door opener motor that opens


644
00:33:19,796 --> 00:33:21,416
and closes the garage door.


645
00:33:21,706 --> 00:33:22,776
This is the next service.


646
00:33:23,046 --> 00:33:25,646
So, here we have a
characteristic for target state.


647
00:33:25,986 --> 00:33:27,416
So, I would like to
open the garage door,


648
00:33:27,416 --> 00:33:29,276
or I would like to
close the garage door.


649
00:33:29,906 --> 00:33:32,016
Then, we have a characteristic
for current state.


650
00:33:32,086 --> 00:33:34,296
Is the garage door
currently opened or closed,


651
00:33:34,296 --> 00:33:36,786
or maybe it's opening or
closing, or maybe it's stopped.


652
00:33:37,426 --> 00:33:41,056
Something has happened, and
maybe there's an obstruction,


653
00:33:41,056 --> 00:33:42,896
and there's a characteristic
to check


654
00:33:42,896 --> 00:33:44,396
if there is an obstruction
detected.


655
00:33:47,246 --> 00:33:49,546
So, now we've described the
garage door opener motor,


656
00:33:49,886 --> 00:33:51,756
but many garage door openers,


657
00:33:51,806 --> 00:33:56,366
maybe all of them,
also have a light.


658
00:33:56,866 --> 00:34:00,056
So, now there's another
service defined on the accessory


659
00:34:00,366 --> 00:34:01,716
that represents the light bulb.


660
00:34:04,096 --> 00:34:06,416
Lights are straightforward.


661
00:34:06,416 --> 00:34:09,226
In this case, we have just one
characteristic for this light,


662
00:34:09,326 --> 00:34:12,806
just on, whether the light is
on or off, and also we can write


663
00:34:12,806 --> 00:34:15,436
to that characteristic to
turn the light on or off.


664
00:34:16,505 --> 00:34:18,216
So, this is just an example.


665
00:34:18,216 --> 00:34:20,446
A real garage door opener
accessory I imagine would have


666
00:34:20,886 --> 00:34:22,446
quite a few more
characteristics.


667
00:34:23,005 --> 00:34:25,315
Also, there could be
custom characteristics.


668
00:34:25,315 --> 00:34:26,656
For example, I don't know,


669
00:34:27,166 --> 00:34:30,076
a garage door opener
motor might have a speed,


670
00:34:30,505 --> 00:34:32,565
how fast you want the
garage door to open,


671
00:34:32,966 --> 00:34:34,866
so there could be a
custom characteristic


672
00:34:34,906 --> 00:34:39,476
that says motor speed, and that
would be included in service too


673
00:34:39,476 --> 00:34:40,775
up there for the
garage door opener.


674
00:34:41,866 --> 00:34:43,956
So, let's talk a little bit more


675
00:34:43,956 --> 00:34:46,406
about some particular
details on the IP side.


676
00:34:47,186 --> 00:34:50,616
So, the first thing
I want to tell you is


677
00:34:50,616 --> 00:34:54,696
that when your accessory
supports HomeKit Accessory


678
00:34:54,696 --> 00:34:58,506
Protocol, you get remote
access through HomeKit.


679
00:34:59,516 --> 00:35:02,726
This is provided through
iOS device connectivity,


680
00:35:03,366 --> 00:35:06,796
does not require any special
implementation on your accessory


681
00:35:06,796 --> 00:35:08,516
to take advantage
of this feature.


682
00:35:09,116 --> 00:35:12,436
We use Bonjour for
accessory discovery,


683
00:35:12,926 --> 00:35:16,366
so accessories are just required
to be Bonjour responders.


684
00:35:18,016 --> 00:35:20,056
If you've worked on that before,
you'll be familiar with that.


685
00:35:21,126 --> 00:35:27,346
And then on the IP side,
different from Bluetooth LE,


686
00:35:27,346 --> 00:35:29,626
which I'll talk about in
just a moment, as I mentioned


687
00:35:29,626 --> 00:35:31,666
when I was describing
the garage door opener,


688
00:35:32,116 --> 00:35:33,896
we have a top-level
accessory block.


689
00:35:34,946 --> 00:35:39,496
And that top-level accessory
block enables IP accessories


690
00:35:39,496 --> 00:35:40,266
to be bridges.


691
00:35:41,206 --> 00:35:46,716
So, you can have, for example, a
hub that is a HomeKit accessory


692
00:35:46,716 --> 00:35:48,846
and supports HomeKit
Accessory Protocol,


693
00:35:49,096 --> 00:35:51,006
and you might have
behind that hub,


694
00:35:51,416 --> 00:35:53,806
connected using some
proprietary technology,


695
00:35:54,046 --> 00:35:55,776
some light bulbs, all right.


696
00:35:55,976 --> 00:35:56,866
Simple example.


697
00:35:57,436 --> 00:36:01,766
So, in this case, the hub is
responsible for translating


698
00:36:01,766 --> 00:36:04,386
between the proprietary
connection protocol that it uses


699
00:36:04,386 --> 00:36:06,956
with its light bulbs and
HomeKit Accessory Protocol


700
00:36:06,956 --> 00:36:07,856
that we use with iOS.


701
00:36:08,946 --> 00:36:13,566
In this case, the hub
will present itself


702
00:36:13,956 --> 00:36:17,276
as actually having
three accessory blocks.


703
00:36:17,276 --> 00:36:19,406
So, it will have
one accessory block


704
00:36:19,406 --> 00:36:21,256
that includes an accessory
information service


705
00:36:21,296 --> 00:36:22,526
that represents the hub itself.


706
00:36:22,526 --> 00:36:25,116
It will have another
accessory block


707
00:36:25,116 --> 00:36:26,846
with an accessory
information service


708
00:36:27,146 --> 00:36:29,676
that also has a light bulb
service that represents the,


709
00:36:29,996 --> 00:36:33,426
one of the light bulbs, and then
it would have a third accessory


710
00:36:33,726 --> 00:36:37,056
block, also with an accessory
information service and also


711
00:36:37,056 --> 00:36:39,326
with a light bulb service that
represents the other light bulb.


712
00:36:39,326 --> 00:36:43,846
So, this is how we handle
bridges as IP accessories.


713
00:36:44,926 --> 00:36:46,016
It's not restricted to bridges.


714
00:36:46,016 --> 00:36:48,396
Any accessory could
use that structure,


715
00:36:48,396 --> 00:36:50,876
but it's particularly
necessary for bridges.


716
00:36:51,786 --> 00:36:56,756
And finally, in our protocol
on IP side, we use HTTP.


717
00:36:56,906 --> 00:37:00,416
The URL scheme is a restful
API, so the URL indicates


718
00:37:00,416 --> 00:37:01,596
which services and
characteristics


719
00:37:01,596 --> 00:37:04,976
and accessories are being
addressed with each message.


720
00:37:05,566 --> 00:37:11,156
Now, moving on to talk
about Bluetooth LE.


721
00:37:11,396 --> 00:37:12,226
Some details.


722
00:37:14,806 --> 00:37:16,866
Bluetooth LE accessories


723
00:37:17,006 --> 00:37:20,476
that support HomeKit Accessory
Protocol also get the same


724
00:37:20,476 --> 00:37:22,686
remote access capability
provided


725
00:37:22,686 --> 00:37:25,336
by HomeKit leveraging
iOS device connectivity.


726
00:37:25,976 --> 00:37:31,726
We have Apple-defined
advertisement data


727
00:37:32,636 --> 00:37:36,286
for HomeKit Accessory
Protocol for LE accessories.


728
00:37:36,856 --> 00:37:39,386
So, this is in the
specifications.


729
00:37:39,386 --> 00:37:40,226
You'll want to follow that.


730
00:37:40,226 --> 00:37:43,086
So, your Bluetooth LE
HomeKit accessory is going


731
00:37:43,086 --> 00:37:45,386
to advertise to HomeKit.


732
00:37:46,346 --> 00:37:49,456
It's not going to
advertise to your app.


733
00:37:49,546 --> 00:37:53,616
So, your app will
then use HomeKit APIs


734
00:37:53,886 --> 00:37:56,106
to access your accessory
functionality.


735
00:37:59,226 --> 00:38:02,306
Accessories on LE
are not identifiable


736
00:38:03,086 --> 00:38:04,306
from their advertisement data.


737
00:38:04,306 --> 00:38:06,886
We use randomly generated
service IDs


738
00:38:07,656 --> 00:38:12,796
so that your accessory
will not reveal what it is


739
00:38:12,796 --> 00:38:15,006
if somebody is walking
around a neighborhood looking


740
00:38:15,006 --> 00:38:16,796
for who has what door locks.


741
00:38:18,396 --> 00:38:21,636
They'll have to walk up to the
door rather than just being able


742
00:38:21,636 --> 00:38:22,616
to drive down the street.


743
00:38:24,086 --> 00:38:30,246
And as I mentioned
earlier, we use security


744
00:38:30,736 --> 00:38:33,446
at the application
layer or on top of GATT


745
00:38:33,916 --> 00:38:37,346
so that we have a very
strong security model


746
00:38:37,346 --> 00:38:40,116
that is equivalent on
LE side and on IP side.


747
00:38:40,116 --> 00:38:42,006
So, we don't use
Bluetooth LE pairing.


748
00:38:42,686 --> 00:38:44,866
So, let's talk a little
bit more about security.


749
00:38:45,646 --> 00:38:49,036
So, we have end-to-end
encryption between iOS


750
00:38:49,036 --> 00:38:52,346
and accessories so that it
doesn't matter who's listening


751
00:38:52,346 --> 00:38:52,776
in the middle.


752
00:38:52,776 --> 00:38:54,826
Nobody can intercept, inter,


753
00:38:55,476 --> 00:38:58,966
inject or understand
the messages


754
00:38:58,966 --> 00:38:59,996
that are being sent
back and forth


755
00:38:59,996 --> 00:39:02,686
between an accessory
and iOS device.


756
00:39:03,576 --> 00:39:07,556
The initial setup of the
accessory is secured directly


757
00:39:07,556 --> 00:39:09,506
between the iOS device
and the accessory.


758
00:39:10,086 --> 00:39:13,846
So, we use a setup
code that you will have


759
00:39:13,846 --> 00:39:15,116
to provide on your accessory.


760
00:39:15,116 --> 00:39:17,756
It can be on packaging, it
could be on the accessory,


761
00:39:18,106 --> 00:39:20,946
that could be randomly
generated if you have an LCD.


762
00:39:21,066 --> 00:39:23,086
It could be on a label or
engraved on the accessory.


763
00:39:23,566 --> 00:39:27,846
The user enters that setup code
to perform the initial pairing


764
00:39:28,076 --> 00:39:29,846
of your accessory to HomeKit.


765
00:39:31,356 --> 00:39:34,396
This ensures that we
have a very strong basis


766
00:39:34,396 --> 00:39:35,856
for our cryptographic
relationship


767
00:39:35,916 --> 00:39:38,286
between iOS and the accessory.


768
00:39:39,456 --> 00:39:42,416
Our protocol also has
perfect-forward secrecy.


769
00:39:43,076 --> 00:39:44,546
If you are a security


770
00:39:44,996 --> 00:39:47,516
or encryption guru you
know what this means,


771
00:39:47,586 --> 00:39:49,026
but I'll summarize quickly.


772
00:39:49,026 --> 00:39:52,046
It means that the
encryption key that we use


773
00:39:52,076 --> 00:39:56,046
for sending messages back
and forth cannot be used


774
00:39:56,046 --> 00:39:58,896
to decrypt messages from
any previous session


775
00:39:58,896 --> 00:39:59,976
or any future session.


776
00:40:01,066 --> 00:40:05,406
So, every communication session
has a unique encryption key.


777
00:40:06,036 --> 00:40:12,306
To implement all of this, we use
standard encryption algorithms


778
00:40:13,306 --> 00:40:16,966
because it's always best
to have lots of scrutiny


779
00:40:17,606 --> 00:40:19,036
on the encryption
that you're using.


780
00:40:19,806 --> 00:40:21,706
So, we use these algorithms.


781
00:40:22,646 --> 00:40:25,666
There's much more detail about
how these algorithms are used


782
00:40:25,666 --> 00:40:28,116
in implementing HomeKit
Accessory Protocol


783
00:40:28,476 --> 00:40:32,046
in our specifications, and
if you do have questions


784
00:40:32,046 --> 00:40:35,336
about this, you can bring
those questions to our lab


785
00:40:35,686 --> 00:40:38,466
on Thursday, the HomeKit Lab,


786
00:40:38,466 --> 00:40:40,626
and of course there's
support available


787
00:40:40,626 --> 00:40:46,776
through the MFi program for
you to get this security right.


788
00:40:48,546 --> 00:40:52,826
Now, wrapping up,
so, next steps.


789
00:40:53,186 --> 00:40:54,916
So, first of all
and most important,


790
00:40:54,916 --> 00:40:57,096
if you're making accessories,
you need to go become familiar


791
00:40:57,096 --> 00:40:59,506
with the MFi program
if you are not already.


792
00:41:00,556 --> 00:41:02,866
Through the MFi program,
you'll get access to all


793
00:41:02,866 --> 00:41:05,536
of our specifications that
define everything I've talked


794
00:41:05,536 --> 00:41:08,586
about here, explain to
you how to implement all


795
00:41:08,586 --> 00:41:11,736
of the security, the
pairing, the protocol


796
00:41:11,736 --> 00:41:13,636
and the profiles
on your accessory.


797
00:41:14,956 --> 00:41:17,686
You also get access
to a great development


798
00:41:17,686 --> 00:41:18,866
and certification tool.


799
00:41:18,866 --> 00:41:20,296
It's an OS X application.


800
00:41:20,796 --> 00:41:24,076
It provides you something
to connect your accessory


801
00:41:24,076 --> 00:41:25,406
to while you're doing
development.


802
00:41:25,836 --> 00:41:27,246
It implements the security.


803
00:41:27,246 --> 00:41:29,776
It implements the protocol,
everything correctly,


804
00:41:30,146 --> 00:41:32,746
and it provides you great debug
information to help you figure


805
00:41:32,746 --> 00:41:35,476
out what's going on to get your
accessory working correctly.


806
00:41:36,006 --> 00:41:38,306
And all of this is available
very soon, so please check


807
00:41:38,306 --> 00:41:40,206
in there and get started.


808
00:41:40,766 --> 00:41:46,136
And then of course, to learn
more about the HomeKit APIs,


809
00:41:46,466 --> 00:41:49,856
come to our session this
afternoon, that's at 4:30,


810
00:41:50,416 --> 00:41:52,276
and you come to our
lab on Thursday,


811
00:41:52,276 --> 00:41:54,386
which I believe is at 12:45.


812
00:41:54,836 --> 00:41:56,876
And with that, I'm
going to wrap up.


813
00:41:56,876 --> 00:41:59,806
I'm going to hand
back to Robert,


814
00:42:00,626 --> 00:42:02,346
who's going to tell you
some more about AirPlay.


815
00:42:03,516 --> 00:42:06,846
[ Applause ]


816
00:42:07,346 --> 00:42:10,366
>> Thank you, Kevin, and
thanks also to Terry and Jorge.


817
00:42:10,976 --> 00:42:12,836
That's some fascinating stuff,
and I'm really looking forward


818
00:42:12,836 --> 00:42:13,586
to seeing what kind


819
00:42:13,586 --> 00:42:16,086
of accessories you guys
produce this year with this.


820
00:42:17,216 --> 00:42:18,216
Let's talk about AirPlay.


821
00:42:18,446 --> 00:42:20,896
As you know, AirPlay
is our solution


822
00:42:20,896 --> 00:42:22,776
for streaming high-quality
digital audio


823
00:42:22,776 --> 00:42:23,636
to your accessories.


824
00:42:24,906 --> 00:42:26,906
We provide a reference
platform for this.


825
00:42:27,056 --> 00:42:28,536
It's a source drop
that you can use


826
00:42:28,536 --> 00:42:29,916
and incorporate into
your platforms.


827
00:42:29,916 --> 00:42:32,756
A lot of OEMs are
actually taking this


828
00:42:32,756 --> 00:42:34,636
and producing modules that
you can just drop right


829
00:42:34,636 --> 00:42:35,726
into your speaker solutions.


830
00:42:37,296 --> 00:42:41,186
We've made some changes
to this this year.


831
00:42:41,996 --> 00:42:44,536
We've made changes
around audio handling.


832
00:42:45,286 --> 00:42:47,516
If your accessory can do
this, we're allowing you


833
00:42:47,516 --> 00:42:50,156
to do skew compensation on
the accessory side this year.


834
00:42:51,306 --> 00:42:53,666
We're also changing the way we
do buffer underrun handling,


835
00:42:54,236 --> 00:42:55,626
and we think both of
these are important.


836
00:42:56,436 --> 00:42:59,316
But we should point out that
if you're not comfortable


837
00:42:59,316 --> 00:43:00,316
in actually doing the kind


838
00:43:00,316 --> 00:43:02,816
of qualitative audio testing
you'd need to do in order


839
00:43:02,816 --> 00:43:04,936
to take advantage of
these, just leave them


840
00:43:04,936 --> 00:43:07,336
at the default settings where
we do the accessory-side skew


841
00:43:07,336 --> 00:43:10,146
compensation or the device-side
skew compensation, for example.


842
00:43:10,726 --> 00:43:14,616
This year, we're also
introducing a new


843
00:43:14,616 --> 00:43:15,506
reference platform.


844
00:43:16,056 --> 00:43:20,006
If you take our AirPlay
source drop, it'll compile


845
00:43:20,006 --> 00:43:22,106
out of the box on,
on that BSD running


846
00:43:22,106 --> 00:43:23,296
on a Raspberry Pi platform.


847
00:43:24,256 --> 00:43:26,756
You will need to provide the
authentication co-processor


848
00:43:26,756 --> 00:43:29,996
of course, but it's, it'll
work just right out of the box.


849
00:43:31,196 --> 00:43:33,506
Both of these will be
available with our source drop,


850
00:43:33,506 --> 00:43:34,606
which should happen sometime


851
00:43:34,606 --> 00:43:41,186
around the iOS 8 release
later in the year.


852
00:43:41,516 --> 00:43:42,896
Next up, let's talk about iAP


853
00:43:42,896 --> 00:43:44,806
and the external
accessory framework.


854
00:43:45,756 --> 00:43:49,286
So, this year we've, well,
it's been two years now


855
00:43:49,286 --> 00:43:50,596
since we released iAP2.


856
00:43:50,646 --> 00:43:52,386
We've had a lot of
feedback from developers,


857
00:43:52,756 --> 00:43:55,526
and this year we've made
some changes to both of these


858
00:43:55,526 --> 00:43:57,136
to incorporate your feedback.


859
00:43:57,916 --> 00:43:59,686
So, let's get right into that.


860
00:44:00,736 --> 00:44:04,736
For iAP2, we've made a bunch
of media playback enhancements


861
00:44:04,736 --> 00:44:06,236
for your accessories
to take advantage of.


862
00:44:07,646 --> 00:44:10,396
We're now allowing iAP2
accessories to get access


863
00:44:10,396 --> 00:44:11,606
to the media playback queue.


864
00:44:12,576 --> 00:44:14,276
Now, I should point out
that this queue isn't


865
00:44:14,276 --> 00:44:15,026
always available.


866
00:44:15,506 --> 00:44:17,446
For example, if you're
playing back a Genius mix,


867
00:44:18,046 --> 00:44:20,616
we may not have the information
about what's coming up next.


868
00:44:20,996 --> 00:44:23,246
Similarly, third-party
applications may not have


869
00:44:23,246 --> 00:44:23,946
that information.


870
00:44:24,286 --> 00:44:26,586
You don't know what's coming up
next in, for example, Pandora.


871
00:44:27,246 --> 00:44:30,826
But if you design your
accessory with that in mind,


872
00:44:30,976 --> 00:44:31,886
you should be able to get it,


873
00:44:31,886 --> 00:44:35,216
when the playback
queue, when it's there.


874
00:44:35,726 --> 00:44:38,376
We've also added messages for
allowing you to play all tracks,


875
00:44:38,626 --> 00:44:40,026
something that a
lot of people asked.


876
00:44:40,026 --> 00:44:41,056
Just a simple mechanism


877
00:44:41,056 --> 00:44:42,676
that says play everything
on the device.


878
00:44:43,206 --> 00:44:46,266
And we're allowing you to sync


879
00:44:46,266 --> 00:44:48,106
to a specific time
within a track.


880
00:44:49,426 --> 00:44:54,216
This one probably needs a
little bit of explaining.


881
00:44:54,336 --> 00:44:57,046
We're allowing you to get
non-localized bundle identifiers


882
00:44:57,046 --> 00:44:58,136
for the Now Playing app.


883
00:44:59,626 --> 00:45:02,956
So, up to now, we've given you
the name of the Now Playing app,


884
00:45:02,956 --> 00:45:06,126
but that may have
been localized based


885
00:45:06,126 --> 00:45:08,066
on what language the
device is currently set to.


886
00:45:09,146 --> 00:45:10,166
So, this year we're allowing you


887
00:45:10,166 --> 00:45:12,446
to get the bundle identifier
for the app as well.


888
00:45:12,966 --> 00:45:15,716
That way, if you're tailoring
your accessory's user interface


889
00:45:16,596 --> 00:45:19,526
to mirror some, some
functionality


890
00:45:19,526 --> 00:45:20,846
with the Now Playing
app, for example,


891
00:45:21,386 --> 00:45:23,886
you can actually identify that
Now Playing app without having


892
00:45:23,886 --> 00:45:25,966
to identify it in 50
different languages.


893
00:45:31,486 --> 00:45:35,336
And finally, in media playback,
we're allowing those accessories


894
00:45:35,336 --> 00:45:37,646
that synchronize with
the media library


895
00:45:38,366 --> 00:45:40,046
to get progress information
on the state


896
00:45:40,046 --> 00:45:40,956
of the synchronization.


897
00:45:42,396 --> 00:45:45,076
And you can use this
information to display a spinner


898
00:45:45,076 --> 00:45:48,876
or a progress bar to your user
so that they have some idea


899
00:45:48,876 --> 00:45:50,906
of what's going on and that
media library is still coming


900
00:45:50,906 --> 00:45:51,896
across to the accessory.


901
00:45:52,466 --> 00:45:55,766
We've made some additional
enhancements


902
00:45:55,766 --> 00:45:59,266
that aren't media related.


903
00:45:59,266 --> 00:46:01,756
iAP2 accessories can now
get the time on the device.


904
00:46:02,756 --> 00:46:04,076
You register for a notification,


905
00:46:04,546 --> 00:46:06,256
and when the time changes,
we'll send it to you.


906
00:46:06,696 --> 00:46:08,746
Now, by changes I
mean major changes.


907
00:46:09,376 --> 00:46:11,376
We'll send it to you right
off the bat when you register


908
00:46:11,376 --> 00:46:14,376
for the notification of course,
but we'll also send it to you


909
00:46:14,376 --> 00:46:17,716
when midnight rolls over,
daylight savings time kicks in,


910
00:46:18,246 --> 00:46:23,916
or the user just manually
modifies the time on the device.


911
00:46:24,096 --> 00:46:25,646
For those of you
producing accessories


912
00:46:25,646 --> 00:46:27,236
that charge the iOS device,


913
00:46:27,586 --> 00:46:30,976
we are now providing detailed
charge state information


914
00:46:30,976 --> 00:46:31,336
in iAP2.


915
00:46:31,336 --> 00:46:35,646
So, for example, if you have
a battery case, you may want


916
00:46:35,646 --> 00:46:38,586
to decide that you want to
charge the battery in the case


917
00:46:38,586 --> 00:46:40,216
as opposed to the
battery in the device


918
00:46:40,766 --> 00:46:42,166
from an external power source.


919
00:46:42,746 --> 00:46:44,886
And you can use this detailed
charged state information


920
00:46:44,886 --> 00:46:49,596
on the device to determine
when you should do that.


921
00:46:49,756 --> 00:46:52,536
For those of you who use our
link layer reference platform,


922
00:46:53,536 --> 00:46:56,226
we've added in a bunch of
compile options this year


923
00:46:56,226 --> 00:46:59,606
that allow you to really slim
down the, the bill size of that.


924
00:46:59,606 --> 00:47:01,076
So, if you're trying
to fit the link layer


925
00:47:01,076 --> 00:47:02,656
into a small micro-controller,


926
00:47:03,066 --> 00:47:04,416
this should make your
life a lot easier.


927
00:47:05,016 --> 00:47:09,756
And finally, for the external
accessory proto, framework,


928
00:47:11,006 --> 00:47:13,576
we are now allowing
multiple apps simultaneously


929
00:47:13,576 --> 00:47:15,006
to communicate with
your accessory.


930
00:47:15,466 --> 00:47:16,786
Now, we'll only do
this if you tell us


931
00:47:16,786 --> 00:47:18,996
that your accessory is
capable of handling that,


932
00:47:19,516 --> 00:47:20,526
but we highly recommend


933
00:47:20,526 --> 00:47:23,346
that your accessories be
capable of doing that.


934
00:47:25,996 --> 00:47:28,346
Next, let's talk about wireless
accessory configuration.


935
00:47:28,896 --> 00:47:31,386
We introduced wireless accessory
configuration last year


936
00:47:31,906 --> 00:47:34,766
as a simple and convenient
way for your users


937
00:47:34,766 --> 00:47:38,776
to put their Wi-Fi
accessories onto their network.


938
00:47:39,776 --> 00:47:44,606
It's been well received, but
we've had one persistent request


939
00:47:44,606 --> 00:47:48,056
from developers, which
is to allow initiation


940
00:47:48,056 --> 00:47:50,006
of the wireless accessory
configuration process


941
00:47:50,006 --> 00:47:51,196
from within their applications.


942
00:47:52,096 --> 00:47:53,366
So, this year we're
allowing this.


943
00:47:54,736 --> 00:47:56,406
This new functionality
is exposed


944
00:47:56,406 --> 00:47:58,346
through the external
accessory framework.


945
00:47:59,106 --> 00:48:00,166
Simply import the framework.


946
00:48:00,406 --> 00:48:03,026
You implement an
accessory browser delegate,


947
00:48:03,426 --> 00:48:05,146
and you instantiate
an accessory browser.


948
00:48:05,726 --> 00:48:10,716
You use the browser
to initiate searching


949
00:48:10,976 --> 00:48:12,546
for unconfigured
Wi-Fi accessories.


950
00:48:13,866 --> 00:48:16,216
I'm not going to call that name
out because it's rather long,


951
00:48:16,216 --> 00:48:19,366
but I will say that you can add
a predicate to that to narrow


952
00:48:19,366 --> 00:48:21,336
down the scope of the
accessories that you search,


953
00:48:21,336 --> 00:48:22,196
that you're searching for.


954
00:48:22,766 --> 00:48:26,226
In this example here, we're
only looking for accessories


955
00:48:26,466 --> 00:48:28,156
by a company called
Amalgamated Audio.


956
00:48:29,296 --> 00:48:31,026
You probably want to do this.


957
00:48:31,026 --> 00:48:32,666
I don't think your apps
want find everything


958
00:48:32,666 --> 00:48:33,886
that could potentially
be configured.


959
00:48:34,606 --> 00:48:35,946
They only really want
to find the ones that,


960
00:48:36,226 --> 00:48:37,166
that they know how to handle.


961
00:48:38,456 --> 00:48:43,646
As accessories are found, your
delegate will receive callbacks.


962
00:48:45,166 --> 00:48:48,026
You should keep a set of
the accessories that you,


963
00:48:48,146 --> 00:48:49,796
that you've discovered
and presented to a,


964
00:48:49,796 --> 00:48:51,876
to the user in any
manner you see fit.


965
00:48:56,286 --> 00:48:58,196
If you're representing
a single accessory,


966
00:48:58,616 --> 00:48:59,856
and you're a pressure
speaker dock,


967
00:49:01,456 --> 00:49:04,596
your user can select the
accessory, and at that stage,


968
00:49:04,596 --> 00:49:06,416
you would kick off
a configuration


969
00:49:06,416 --> 00:49:08,506
of the accessory using
the browser configure


970
00:49:08,506 --> 00:49:09,946
accessory message.


971
00:49:10,556 --> 00:49:13,206
By the way, notice
that we're passing


972
00:49:13,206 --> 00:49:15,616
in a view controller here.


973
00:49:15,616 --> 00:49:20,056
I'll get onto that in a minute.


974
00:49:20,596 --> 00:49:23,856
OK, so you've just called
configure accessory.


975
00:49:24,696 --> 00:49:26,066
We're now popping our UI


976
00:49:26,066 --> 00:49:28,126
into your app using
that view controller.


977
00:49:28,816 --> 00:49:33,326
The user configures the
accessory at this UI.


978
00:49:33,466 --> 00:49:37,666
At this stage, the configuration
is proceeding in the background


979
00:49:37,796 --> 00:49:40,496
and then the configuration
completes.


980
00:49:41,206 --> 00:49:44,956
Then we drop back to your app.


981
00:49:45,516 --> 00:49:47,716
At this stage, you should
continue your normal app flow.


982
00:49:47,716 --> 00:49:51,356
Here we've searched for
the accessory over Bonjour


983
00:49:51,616 --> 00:49:53,436
and we're showing it in
a list and allowing you


984
00:49:53,436 --> 00:49:57,506
to do whatever your app allows
you to do with that accessory.


985
00:49:58,306 --> 00:49:59,806
So, that's it.


986
00:50:00,176 --> 00:50:01,656
That's our new features
this year.


987
00:50:01,826 --> 00:50:04,826
We've introduced some
exciting new functionality


988
00:50:04,826 --> 00:50:05,936
around HealthKit and HomeKit.


989
00:50:06,726 --> 00:50:10,006
We've enhanced the media
playback for IEP accessories


990
00:50:10,726 --> 00:50:13,856
and we've introduced a
new framework for you


991
00:50:13,856 --> 00:50:16,496
to use app-driven wireless
accessory configuration.


992
00:50:18,236 --> 00:50:22,106
We're going to wrap up:


993
00:50:22,376 --> 00:50:25,646
developer.apple.com is your
go-to site and the MFi program


994
00:50:25,646 --> 00:50:28,746
in particular should be your
first port of call if you wanted


995
00:50:28,746 --> 00:50:30,016
to start developing
an accessory.


996
00:50:31,226 --> 00:50:33,446
Also on developer.apple.com,
you'll find a wealth


997
00:50:33,446 --> 00:50:37,346
of information about frameworks,
case design guidelines,


998
00:50:38,356 --> 00:50:40,066
you know, Bluetooth guidelines,


999
00:50:40,066 --> 00:50:42,526
information about
iBeacon and a lot more.


1000
00:50:43,146 --> 00:50:45,876
We'd also love to hear from you.


1001
00:50:45,876 --> 00:50:47,936
You can contact our
technology evangelists


1002
00:50:48,376 --> 00:50:49,456
at the addresses given here.


1003
00:50:49,606 --> 00:50:51,846
And we also hang out on
the developer forums.


1004
00:50:51,846 --> 00:50:53,276
So, feel free to use those too.


1005
00:50:54,306 --> 00:50:59,876
Let's just summarize
some of the sessions


1006
00:50:59,876 --> 00:51:02,166
that are coming up later.


1007
00:51:02,376 --> 00:51:04,236
Later today, in fact
right after this,


1008
00:51:04,236 --> 00:51:05,536
we have a HealthKit session,


1009
00:51:06,056 --> 00:51:08,596
and later in the afternoon
we have a Core Location


1010
00:51:08,596 --> 00:51:09,656
and HomeKit sessions.


1011
00:51:10,276 --> 00:51:13,146
On Friday, we also have
sessions around AirPrint


1012
00:51:13,286 --> 00:51:14,746
and for Game Controllers.


1013
00:51:14,886 --> 00:51:16,896
So, if you're interested in
those areas, please go along


1014
00:51:16,896 --> 00:51:17,706
and see, check those out.


1015
00:51:17,706 --> 00:51:19,626
And that's it.


1016
00:51:19,626 --> 00:51:20,586
Thank you all for coming.


1017
00:51:20,686 --> 00:51:22,616
I'm looking forward to
seeing you during the week.

