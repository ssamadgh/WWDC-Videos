1
00:00:06,516 --> 00:00:18,500
[ Music ]


2
00:00:22,516 --> 00:00:28,106
[ Applause ]


3
00:00:28,606 --> 00:00:29,376
>> Hello everyone.


4
00:00:29,566 --> 00:00:31,086
My name is Vineet Khosla.


5
00:00:31,206 --> 00:00:34,866
And today, I'll be joined by
Diana Huang and Scott Andrus,


6
00:00:35,416 --> 00:00:37,106
as we walk through the process


7
00:00:37,106 --> 00:00:39,656
of extending your
applications with SiriKit.


8
00:00:40,346 --> 00:00:44,076
In the introduction session,


9
00:00:44,076 --> 00:00:46,156
we learned there are
three main components


10
00:00:46,156 --> 00:00:47,406
to a SiriKit-enabled app.


11
00:00:48,516 --> 00:00:51,926
You have the Intents extension.


12
00:00:52,586 --> 00:00:54,716
You have the Intents
UI extension.


13
00:00:54,976 --> 00:00:56,896
And you have, of
course, your Application.


14
00:00:57,466 --> 00:01:02,016
With the Intents extension,
we have three main methods.


15
00:01:02,016 --> 00:01:04,656
You have the Resolve,
Confirm and Handle.


16
00:01:06,086 --> 00:01:10,456
In this session, we are going
to talk about three things.


17
00:01:11,246 --> 00:01:12,846
We're going to talk about how


18
00:01:12,846 --> 00:01:15,826
to prepare your application
to adopt SiriKit.


19
00:01:16,426 --> 00:01:18,696
And then we will talk about how


20
00:01:18,696 --> 00:01:21,946
to add your first
Intents extension,


21
00:01:22,486 --> 00:01:26,516
and finally we will talk about
how to bring your applications,


22
00:01:26,516 --> 00:01:30,206
user interface and style
into the Siri experience,


23
00:01:30,496 --> 00:01:33,646
by writing your Intents
UI extension.


24
00:01:34,386 --> 00:01:37,146
For this session, we are going


25
00:01:37,146 --> 00:01:41,806
to use our favorite chat
app, the UnicornChat.


26
00:01:42,616 --> 00:01:44,556
Some of you guys
know about this app.


27
00:01:44,676 --> 00:01:48,166
It's a favorite app that is
used by the Siri team internally


28
00:01:48,166 --> 00:01:49,666
to chat with our unicorns.


29
00:01:50,236 --> 00:01:53,506
It's a standard messaging app
that does sending and receiving


30
00:01:53,506 --> 00:01:56,586
of messages, but it
has a certain amount


31
00:01:56,586 --> 00:02:00,256
of unique corniness, which
makes it a special app for us.


32
00:02:00,556 --> 00:02:02,946
And we will add SiriKit
support to it today.


33
00:02:05,836 --> 00:02:08,856
So, SiriKit is built
on extensions.


34
00:02:09,756 --> 00:02:12,906
But before your application
can go into extensions,


35
00:02:12,906 --> 00:02:14,586
there are number of
things you can do to it


36
00:02:14,976 --> 00:02:16,926
to help it adopt SiriKit.


37
00:02:17,746 --> 00:02:20,136
I'm going to cover a few
of those areas first.


38
00:02:21,306 --> 00:02:25,186
We will talk about preparing
your application by moving some


39
00:02:25,186 --> 00:02:27,756
of your code to embedded
frameworks.


40
00:02:28,296 --> 00:02:31,016
Embedded frameworks are
a great way to reuse code


41
00:02:31,016 --> 00:02:33,416
between your application
and your extension.


42
00:02:34,406 --> 00:02:36,326
Having moved some of the code


43
00:02:36,326 --> 00:02:38,316
to embedded frameworks
will provide us


44
00:02:38,316 --> 00:02:41,856
with a great opportunity to
write some unit tests around it.


45
00:02:42,576 --> 00:02:45,146
And finally we will
talk a little bit


46
00:02:45,146 --> 00:02:47,786
about what is an
appropriate architecture


47
00:02:48,306 --> 00:02:51,096
for architecting
your extensions based


48
00:02:51,096 --> 00:02:54,356
on the intents your
application subscribes to.


49
00:02:55,116 --> 00:02:59,446
So let's dig a little bit
deeper into embedded frameworks.


50
00:03:01,356 --> 00:03:03,036
Your extensions will need


51
00:03:03,036 --> 00:03:04,746
to do everything your
application does.


52
00:03:05,116 --> 00:03:07,966
It will need to handle the
intent, and it will also need


53
00:03:07,966 --> 00:03:10,706
to render UI when
it is required.


54
00:03:11,206 --> 00:03:14,726
And using embedded frameworks
is a great way to reuse code


55
00:03:14,726 --> 00:03:17,616
between your application,
as well as your extension,


56
00:03:17,956 --> 00:03:19,446
because you want to ensure


57
00:03:19,446 --> 00:03:22,896
that your users get a uniform
experience, whether they come


58
00:03:22,896 --> 00:03:24,206
in from your application


59
00:03:24,206 --> 00:03:27,536
or whether they are
being invoked by SiriKit.


60
00:03:27,536 --> 00:03:33,056
In the case of UnicornChat, we
found there were a few areas


61
00:03:33,056 --> 00:03:36,346
that made a lot of sense to
move to embedded frameworks.


62
00:03:36,936 --> 00:03:41,066
We took a look at our
networking layer of UnicornChat.


63
00:03:41,476 --> 00:03:44,136
This is everything that
is related to sending


64
00:03:44,136 --> 00:03:45,706
and receiving of messages.


65
00:03:46,136 --> 00:03:50,546
And we realized that this is
a really good piece of code


66
00:03:50,546 --> 00:03:53,886
to move entirely to embedded
frameworks, so it can be reused


67
00:03:53,886 --> 00:03:56,306
by my application as
well as the extension.


68
00:03:57,746 --> 00:04:00,536
Having done that, we took
a look at our data model.


69
00:04:01,226 --> 00:04:05,436
Your application as well as your
extension should be accessing


70
00:04:05,436 --> 00:04:06,466
the same data model.


71
00:04:06,666 --> 00:04:10,146
In the case of our chat app
that meant it was the database


72
00:04:10,496 --> 00:04:13,306
as well as the data accessor
methods written for it


73
00:04:13,526 --> 00:04:15,636
that could be moved to
an embedded framework,


74
00:04:15,976 --> 00:04:18,836
so it could be reused by
application and extension.


75
00:04:19,505 --> 00:04:22,856
After moving that,
we took a look


76
00:04:23,166 --> 00:04:26,326
at our decision-making logic.


77
00:04:27,356 --> 00:04:29,126
This is the business
logic of your app.


78
00:04:29,836 --> 00:04:31,576
In the earlier sessions
we had covered


79
00:04:31,576 --> 00:04:33,986
that we have the Resolved,
Confirm and Handle.


80
00:04:34,826 --> 00:04:36,996
These three methods
will correspond


81
00:04:36,996 --> 00:04:39,356
to the real business
logic of your app.


82
00:04:39,626 --> 00:04:43,116
And you would always want to
ensure that your application,


83
00:04:43,586 --> 00:04:46,046
as well as your Intents
extension,


84
00:04:46,396 --> 00:04:49,686
gives your users the same
experience when they're trying


85
00:04:49,686 --> 00:04:52,286
to complete that one
task, irrespective


86
00:04:52,286 --> 00:04:53,406
of where they come from.


87
00:04:53,756 --> 00:04:56,776
So we moved our decision-making
logic also


88
00:04:56,776 --> 00:04:57,986
to an embedded framework.


89
00:04:58,596 --> 00:05:03,236
And finally, if your application
is signing up for intents


90
00:05:03,236 --> 00:05:06,556
that requires it to rend
a user interface, a UI,


91
00:05:06,556 --> 00:05:10,316
into the SiriKit, that
code should also be moved


92
00:05:10,316 --> 00:05:12,006
into an embedded framework.


93
00:05:12,006 --> 00:05:13,866
So you can reuse,
and once again,


94
00:05:14,266 --> 00:05:18,516
provide consistent experience
across the board for your users.


95
00:05:18,516 --> 00:05:20,356
Whether they come in
from your application


96
00:05:20,616 --> 00:05:22,976
or whether they are coming
in from an Intents extension.


97
00:05:26,496 --> 00:05:30,466
I also recommend everyone
to watch this 2015 talk,


98
00:05:30,466 --> 00:05:32,016
App Extension Best Practices.


99
00:05:32,016 --> 00:05:32,706
I watched it.


100
00:05:32,706 --> 00:05:34,006
I found it really useful.


101
00:05:34,756 --> 00:05:39,986
So after having moved all of our
code into embedded frameworks


102
00:05:39,986 --> 00:05:44,236
or some of it, it provided
us with a greater opportunity


103
00:05:44,236 --> 00:05:46,016
to write some quality
unit tests.


104
00:05:46,916 --> 00:05:49,706
Now I know I'm preaching
to the choir in this room.


105
00:05:49,706 --> 00:05:51,736
And all the engineers
in this room,


106
00:05:51,946 --> 00:05:53,926
we write our unit
tests really well.


107
00:05:54,196 --> 00:05:56,086
We all follow test-driven
development.


108
00:05:56,086 --> 00:05:57,816
It happens every
time, I know it.


109
00:05:58,416 --> 00:06:01,046
But having moved
some of this code


110
00:06:01,166 --> 00:06:02,946
to an embedded framework
will provide you


111
00:06:02,946 --> 00:06:05,626
with a new opportunity to
write some quality tests.


112
00:06:06,576 --> 00:06:09,586
More specifically when we
are dealing with SiriKit.


113
00:06:09,816 --> 00:06:12,816
What you can do is
create some mock intents


114
00:06:13,146 --> 00:06:16,356
and then write tests to
ensure that your app,


115
00:06:16,356 --> 00:06:19,926
as well as your extension,
is responding properly to it.


116
00:06:20,406 --> 00:06:22,526
You don't need a real
live Siri interaction.


117
00:06:22,586 --> 00:06:24,876
You can just mock
the Intent Object


118
00:06:24,876 --> 00:06:26,706
that you expect to
receive from Siri.


119
00:06:26,986 --> 00:06:29,746
And you can write
offline tests around it.


120
00:06:31,496 --> 00:06:35,596
Finally, let's think a little
bit about architecting your app


121
00:06:36,186 --> 00:06:37,996
for the appropriate
number of extensions.


122
00:06:38,996 --> 00:06:42,016
Typically an app will sign
up for multiple intents.


123
00:06:42,366 --> 00:06:44,186
It will want to do
more than one thing.


124
00:06:44,526 --> 00:06:48,016
In our case, our UnicornChat
was signed up to work


125
00:06:48,016 --> 00:06:51,656
with SendMessageIntent, but
let's assume we also add


126
00:06:51,726 --> 00:06:54,186
to its capability, and
we can do audio calls


127
00:06:54,186 --> 00:06:55,336
and video calls with it.


128
00:06:55,836 --> 00:06:58,376
At this point the question
is how do we architect


129
00:06:58,376 --> 00:06:59,306
our extensions?


130
00:06:59,626 --> 00:07:01,206
Should we put intent handling


131
00:07:01,206 --> 00:07:03,606
of all these intents
in one extension?


132
00:07:03,896 --> 00:07:07,286
But that might make our code
really bulky and unmanageable.


133
00:07:07,836 --> 00:07:10,936
We could do an alternate
architecture


134
00:07:10,936 --> 00:07:12,436
where you can say
it's really clean


135
00:07:12,436 --> 00:07:14,646
to start putting all
my intent handling


136
00:07:14,646 --> 00:07:16,716
in a separate extension
by themselves.


137
00:07:17,736 --> 00:07:21,626
That is great, but you
might end up redoing a lot


138
00:07:21,626 --> 00:07:24,506
of boilerplate code and also
creating more extensions


139
00:07:24,506 --> 00:07:27,316
than is necessary and creating
a memory pressure that's


140
00:07:27,316 --> 00:07:27,986
not needed.


141
00:07:29,276 --> 00:07:31,446
So, in the case of UnicornChat


142
00:07:31,446 --> 00:07:33,786
and I'm sure this is what
would be the guidance,


143
00:07:34,056 --> 00:07:38,416
is think about which intents
fall naturally together.


144
00:07:39,176 --> 00:07:43,126
In our case, we found
the audio call


145
00:07:43,126 --> 00:07:47,316
and the video call intent could
fall naturally in one extension


146
00:07:47,706 --> 00:07:54,166
because doing so let us maximize
the code we use while sending


147
00:07:54,166 --> 00:07:58,216
of messages intent could live in
a separate extension by itself.


148
00:07:58,936 --> 00:08:03,416
In other words, there is
no magic bullet over here.


149
00:08:03,846 --> 00:08:05,546
You know your application best.


150
00:08:05,676 --> 00:08:09,126
You will know which intents your
application is signing up for.


151
00:08:09,356 --> 00:08:12,726
And you will need to choose
an architecture which ensures


152
00:08:12,726 --> 00:08:15,856
that you have a manageable
code but at the same time,


153
00:08:15,856 --> 00:08:18,416
you don't create too many
extensions causing undue


154
00:08:18,416 --> 00:08:19,106
memory pressure.


155
00:08:19,526 --> 00:08:24,236
And having taken care
of these conservations,


156
00:08:24,346 --> 00:08:28,036
your application is now
ready to adopt SiriKit.


157
00:08:28,266 --> 00:08:31,276
And to help us write our
first Intents extension,


158
00:08:31,606 --> 00:08:32,926
I invite Diana onstage.


159
00:08:33,515 --> 00:08:42,515
[ Applause ]


160
00:08:43,015 --> 00:08:43,806
>> Thank you, Vineet.


161
00:08:48,156 --> 00:08:49,346
Hello, everyone.


162
00:08:49,556 --> 00:08:53,436
My name is Diana Huang, and I'm
here to actually talk to you


163
00:08:53,436 --> 00:08:56,976
about how to create your first
Intents extension to work


164
00:08:56,976 --> 00:09:01,276
with Siri, now that your app is
fully prepared to adopt SiriKit.


165
00:09:02,416 --> 00:09:03,936
I will also show it to you


166
00:09:03,936 --> 00:09:07,916
in Xcode using the
UnicornChat as an example.


167
00:09:08,466 --> 00:09:13,916
So to get started,
there are three steps


168
00:09:14,146 --> 00:09:15,176
that you want to follow.


169
00:09:16,496 --> 00:09:19,796
First, you want to add an
Intents extension target


170
00:09:19,796 --> 00:09:21,556
to your app.


171
00:09:21,556 --> 00:09:23,316
And next up, you want


172
00:09:23,316 --> 00:09:25,756
to configure the
extensions Info.plist.


173
00:09:25,756 --> 00:09:29,216
And lastly you need to look


174
00:09:29,216 --> 00:09:31,606
at the principal class
of the extension.


175
00:09:33,106 --> 00:09:35,936
Let's talk a little bit more
about these three steps.


176
00:09:36,556 --> 00:09:39,866
To add an Intents
extension target,


177
00:09:40,326 --> 00:09:44,646
you will go to Xcode,
File, New, Target.


178
00:09:44,926 --> 00:09:48,746
And then pick Intents
extension from the list.


179
00:09:49,796 --> 00:09:52,476
For those of you who have
worked with extensions before,


180
00:09:52,806 --> 00:09:55,736
it's just like how you create
other extension targets.


181
00:09:56,256 --> 00:09:59,316
And then, let's take a look


182
00:09:59,316 --> 00:10:02,006
at the Info.plist
of your extension.


183
00:10:03,726 --> 00:10:08,646
So we have the existing key of
NSExtension and inside that,


184
00:10:08,686 --> 00:10:11,086
we have NSExtensionAttributes.


185
00:10:11,996 --> 00:10:13,326
And in side that dictionary,


186
00:10:13,586 --> 00:10:16,816
we're introducing two
new keys in the iOS X.


187
00:10:17,506 --> 00:10:22,196
The IntentsSupported and
IntentsRestricted WhileLocked.


188
00:10:23,706 --> 00:10:27,866
So IntentsSupported is
a required key for you


189
00:10:27,866 --> 00:10:30,346
to specify your extension's
capabilities.


190
00:10:31,296 --> 00:10:35,176
In other words, you want to put
an array of intent class names


191
00:10:35,346 --> 00:10:37,786
that you want to
support for extension


192
00:10:38,036 --> 00:10:40,596
into this array, for
IntentsSupported.


193
00:10:42,376 --> 00:10:46,336
IntentsRestricted WhileLocked
is an optional key for you


194
00:10:46,336 --> 00:10:48,426
to specify your locked
screen behavior.


195
00:10:50,246 --> 00:10:54,856
So by default, Siri already
restricts a few domains


196
00:10:54,926 --> 00:10:57,716
to not be easily invoked
when the device is locked.


197
00:10:58,256 --> 00:11:02,386
For example, the payments domain
or the photo search domain.


198
00:11:03,336 --> 00:11:07,326
But if your app has a tighter
security requirement than Siri,


199
00:11:07,716 --> 00:11:10,546
then you can put the intent
class that you want to restrict


200
00:11:10,736 --> 00:11:14,186
into this array, for
IntentsRestricted WhileLocked.


201
00:11:15,136 --> 00:11:18,126
And this is to tell
Siri, please prompt users


202
00:11:18,126 --> 00:11:21,696
to unlock the device before
invoking your extension


203
00:11:21,726 --> 00:11:25,266
to handle the intent.


204
00:11:25,266 --> 00:11:28,996
So now our Info.plist for the
extension is also configured.


205
00:11:30,296 --> 00:11:32,416
Let's now talk about
the principal class.


206
00:11:33,766 --> 00:11:37,916
So the principal class of your
Intents extension must be a


207
00:11:37,916 --> 00:11:41,966
subclass of INExtension,
which conforms


208
00:11:41,966 --> 00:11:44,986
to the INIntentHandlerProviding
protocol.


209
00:11:45,506 --> 00:11:50,246
This protocol has one and only
method called handlerForintent.


210
00:11:50,896 --> 00:11:54,896
So the method name is
pretty self-explanatory.


211
00:11:55,816 --> 00:11:58,246
You're given an Intent
Object and you need


212
00:11:58,246 --> 00:12:00,066
to return a Handler Object.


213
00:12:00,836 --> 00:12:04,616
And do note the Handler Object
that you return must conform


214
00:12:04,616 --> 00:12:06,986
to the specific intent
handling protocol.


215
00:12:08,216 --> 00:12:12,966
So for UnicornChat, we're going
to support INSendMessageIntent.


216
00:12:13,936 --> 00:12:18,506
So whenever we're passing an
instance of INSendMessageIntent,


217
00:12:18,926 --> 00:12:21,316
we will return a
handler that conforms


218
00:12:21,356 --> 00:12:24,176
to INSendMessageIntent
handling protocol.


219
00:12:25,476 --> 00:12:29,026
So now we have covered
these three steps.


220
00:12:29,456 --> 00:12:33,106
Now let's actually go follow
them in Xcode for UnicornChat.


221
00:12:35,216 --> 00:12:40,106
So here we have the
UnicornChat Xcode project opened


222
00:12:40,746 --> 00:12:42,006
and in the interest of time,


223
00:12:42,296 --> 00:12:45,196
I have already created
an Intents extension.


224
00:12:45,806 --> 00:12:48,216
So let's go take a look
at the second step,


225
00:12:48,476 --> 00:12:53,336
which is to configure
the Info.plist.


226
00:12:53,456 --> 00:12:56,486
So first thing, let's
actually zoom


227
00:12:56,486 --> 00:12:57,906
in a little bit to see better.


228
00:13:01,876 --> 00:13:02,576
All right.


229
00:13:03,046 --> 00:13:05,796
So here we have the
NSExtension dictionary.


230
00:13:06,836 --> 00:13:11,016
If we expand it, you can see
the NSExtensionAttributes


231
00:13:11,016 --> 00:13:11,536
dictionary.


232
00:13:12,726 --> 00:13:15,596
And if we further
expand this dictionary,


233
00:13:15,796 --> 00:13:18,266
you will see the two new
keys that we're introducing.


234
00:13:19,186 --> 00:13:22,976
IntentsSupported and
IntentsRestricted WhileLocked.


235
00:13:24,276 --> 00:13:28,046
First, in order to support
INSentMessageIntent,


236
00:13:28,456 --> 00:13:31,896
let's add an item inside
the IntentSupported array.


237
00:13:32,976 --> 00:13:35,136
And we will put in
the intent class name,


238
00:13:35,496 --> 00:13:38,116
which is INSendMessageIntent
in here.


239
00:13:38,636 --> 00:13:42,946
And next, let's take a look
at the locked screen behavior.


240
00:13:44,026 --> 00:13:49,626
So because UnicornChat is
a chat application used


241
00:13:49,626 --> 00:13:52,716
for private communications
among unicorns who would really


242
00:13:52,716 --> 00:13:56,816
like to enjoy some privacy,
we decided to lock it down so


243
00:13:56,816 --> 00:14:00,266
that users will have to unlock
their device first before they


244
00:14:00,266 --> 00:14:02,896
can send a UnicornChat
message through Siri.


245
00:14:03,416 --> 00:14:09,526
So to do that, we will add an
item inside the IntentRestricted


246
00:14:09,526 --> 00:14:11,146
WhileLocked array.


247
00:14:11,836 --> 00:14:14,746
And again, put in the
intent class name,


248
00:14:15,386 --> 00:14:16,876
INSendMessageIntent here.


249
00:14:17,406 --> 00:14:21,826
And now we're done configuring
the extension's Info.plist.


250
00:14:22,396 --> 00:14:26,936
So the third step is
we want to take a look


251
00:14:27,216 --> 00:14:29,896
at the extensions
principal class.


252
00:14:31,336 --> 00:14:33,716
So when you create the
Intents extension target,


253
00:14:34,056 --> 00:14:37,016
a principal class will be
automatically created for you.


254
00:14:37,456 --> 00:14:40,406
Here, I have renamed
my principal class


255
00:14:40,406 --> 00:14:42,246
to UCIntentHandler.


256
00:14:42,636 --> 00:14:45,396
It is a subclass of INExtension.


257
00:14:45,916 --> 00:14:50,296
And we also have the handler
for Intent method here.


258
00:14:51,866 --> 00:14:55,406
So you can see that the default
implementation returns self,


259
00:14:56,386 --> 00:15:00,756
which is returning an instance
of the principal class itself.


260
00:15:02,186 --> 00:15:04,726
But just to make our
code a little bit clearer


261
00:15:05,276 --> 00:15:07,156
and make it more extensible.


262
00:15:07,156 --> 00:15:11,866
If we're going to support more
intents in this extension later,


263
00:15:12,376 --> 00:15:16,306
then we're going to create a
separate intent handler class.


264
00:15:17,716 --> 00:15:25,206
So we're going to do that by
creating a new file called


265
00:15:25,666 --> 00:15:27,846
UCSentMessage IntentHandler.


266
00:15:28,286 --> 00:15:34,076
And we will also import a few
frameworks, as well as putting


267
00:15:34,076 --> 00:15:35,556
in the class declaration.


268
00:15:37,566 --> 00:15:40,436
So here we are importing
the Intents framework,


269
00:15:40,976 --> 00:15:43,336
which hosts a lot
of the SiriKit API.


270
00:15:45,336 --> 00:15:48,076
We're also importing the
UnicornCore framework,


271
00:15:48,576 --> 00:15:51,236
which is the embedded
framework that we have created


272
00:15:51,236 --> 00:15:54,606
through to share code
among the many application


273
00:15:54,956 --> 00:15:56,076
and the extensions.


274
00:15:57,746 --> 00:16:00,606
And here we have the
UCSentMessage IntentHandler


275
00:16:00,606 --> 00:16:02,246
class that conforms


276
00:16:02,246 --> 00:16:05,056
to INSentMessage
IntentHandling protocol.


277
00:16:06,456 --> 00:16:06,836
All right.


278
00:16:07,176 --> 00:16:09,256
Now let's go back to
the principal class


279
00:16:09,626 --> 00:16:14,226
and replace the implementation
here to return an instance


280
00:16:14,466 --> 00:16:18,896
of UCSentMessage IntentHandler
for any intents passed in,


281
00:16:19,066 --> 00:16:21,896
that is, of type
INSentMessageIntent.


282
00:16:23,006 --> 00:16:26,116
And for all the other intents,
we're going to return nil.


283
00:16:26,656 --> 00:16:29,156
And that's it.


284
00:16:29,526 --> 00:16:32,156
The three steps that
you want to do to add


285
00:16:32,156 --> 00:16:34,686
and configure your
first Intents extension.


286
00:16:35,676 --> 00:16:37,846
Now let's talk about
the app logic.


287
00:16:41,336 --> 00:16:45,326
So hopefully from the
introducing to SiriKit session


288
00:16:45,596 --> 00:16:47,756
as well as Vineet
has reiterated,


289
00:16:48,236 --> 00:16:50,446
your Intents extension's
interaction


290
00:16:50,446 --> 00:16:53,166
with Siri can be divided
into three stages.


291
00:16:53,956 --> 00:16:56,996
Resolve, Confirm and Handle.


292
00:16:57,506 --> 00:17:00,786
Let's talk about Resolve first.


293
00:17:01,876 --> 00:17:06,356
So Resolve is the stage
where you want to validate


294
00:17:06,435 --> 00:17:12,346
and clarify the intent
parameter values one at a time.


295
00:17:12,546 --> 00:17:16,435
So we have provided for
each parameter on intent,


296
00:17:16,656 --> 00:17:18,965
we have provided
a Resolve method


297
00:17:19,156 --> 00:17:20,816
in the intent handling protocol.


298
00:17:21,746 --> 00:17:25,006
So you may ask which ones of
the them should I implement?


299
00:17:25,906 --> 00:17:27,406
Well, think about this.


300
00:17:27,965 --> 00:17:32,026
Would you need Siri's help in
the process of trying to settle


301
00:17:32,266 --> 00:17:34,866
on the final value of
an intent parameter?


302
00:17:35,616 --> 00:17:39,426
If the answer is yes,
then you probably do want


303
00:17:39,426 --> 00:17:42,506
to implement the Resolve
method for this parameter.


304
00:17:44,316 --> 00:17:48,086
Let's take a look at this in
the context of UnicornChat.


305
00:17:48,596 --> 00:17:53,166
So to send a message,
we need recipients.


306
00:17:54,286 --> 00:17:57,856
And in order to decide on the
final values for recipients,


307
00:17:58,196 --> 00:18:03,156
we need to perform a contact
search among UnicornChat's own


308
00:18:03,276 --> 00:18:04,276
address book records.


309
00:18:05,596 --> 00:18:09,026
There could be a few potential
outcomes of this search.


310
00:18:09,856 --> 00:18:12,226
In the most simple and
straightforward path,


311
00:18:12,506 --> 00:18:14,976
we will find exactly
one matching contact.


312
00:18:16,466 --> 00:18:17,436
Then we're good to go.


313
00:18:18,566 --> 00:18:21,766
However, it's also
possible that we find two


314
00:18:21,766 --> 00:18:23,366
or more matching contacts.


315
00:18:23,856 --> 00:18:26,356
In that case, it
would be really great


316
00:18:26,476 --> 00:18:29,826
if Siri can help ask
the user to pick one


317
00:18:30,226 --> 00:18:31,306
from the candidate list.


318
00:18:33,126 --> 00:18:36,806
It's also possible that we find
no matching contacts at all.


319
00:18:37,856 --> 00:18:42,186
And in that case, we would also
like Siri to tell user about it


320
00:18:42,356 --> 00:18:47,906
so that the user may pick a
different recipient value.


321
00:18:48,056 --> 00:18:53,036
So after having a recipient,
we also need content.


322
00:18:53,876 --> 00:18:58,276
So in this case, we simply need
a value in order to proceed.


323
00:18:59,246 --> 00:19:03,326
If the user simply hasn't
provided a content then we would


324
00:19:03,326 --> 00:19:07,556
really like Siri to help us
to prompt users for a content.


325
00:19:09,196 --> 00:19:11,946
So considering all these
cases, it does sound


326
00:19:11,946 --> 00:19:15,516
like we should implement Resolve
methods for both recipients


327
00:19:15,696 --> 00:19:18,796
and content, as we
do need Siri's help


328
00:19:19,006 --> 00:19:22,076
to take further user
inputs in order to come


329
00:19:22,076 --> 00:19:25,586
up with the final values
for these parameters.


330
00:19:27,576 --> 00:19:30,776
So now the parameters have
been successfully resolved,


331
00:19:31,886 --> 00:19:33,776
we get to the Confirm stage.


332
00:19:34,856 --> 00:19:37,886
So this is the stage where
you want to do a dry run.


333
00:19:38,916 --> 00:19:42,736
Think of it as if you were to
handle this intent right now.


334
00:19:43,116 --> 00:19:44,496
Do you have everything
that you need?


335
00:19:45,326 --> 00:19:49,076
Or are you able to
successfully handle it?


336
00:19:49,076 --> 00:19:50,536
So you want to tell that answer,


337
00:19:50,866 --> 00:19:52,626
along with some extra
information


338
00:19:52,626 --> 00:19:56,116
that you can gather while
preflighting the intent to Siri.


339
00:19:56,526 --> 00:19:58,826
So that then Siri,
when appropriate,


340
00:19:58,986 --> 00:20:01,746
can communicate all this
information to the user.


341
00:20:02,536 --> 00:20:06,306
And finally user can make the
decision about whether they want


342
00:20:06,306 --> 00:20:09,326
to proceed with the
action or not.


343
00:20:10,076 --> 00:20:13,836
So in UnicornChat, because
of the security requirement


344
00:20:13,836 --> 00:20:16,196
that we have, we need users


345
00:20:16,196 --> 00:20:19,026
to reauthenticate themself
every once in a while.


346
00:20:19,846 --> 00:20:22,236
So Confirm is the
perfect stage for us


347
00:20:22,276 --> 00:20:26,696
to check the authentication
status of the user.


348
00:20:26,696 --> 00:20:30,326
And either way, we want to tell
the result of the status check


349
00:20:30,596 --> 00:20:33,876
to Siri so that either
Siri can offer users


350
00:20:33,876 --> 00:20:38,366
to proceed inside Siri
or to maybe go forward


351
00:20:38,366 --> 00:20:41,706
to the application in order
to finish this transaction.


352
00:20:41,706 --> 00:20:42,386
All right.


353
00:20:43,276 --> 00:20:48,076
So now the intent is also
confirmed, we finally come


354
00:20:48,076 --> 00:20:50,206
to the stage of handling it.


355
00:20:51,086 --> 00:20:53,646
Hopefully this is the
most straightforward stage


356
00:20:53,646 --> 00:20:54,696
for you to understand.


357
00:20:55,376 --> 00:20:57,466
You simply need to
perform the action here


358
00:20:57,806 --> 00:20:59,246
and tell Siri how it went.


359
00:20:59,246 --> 00:21:04,786
So in the case of UnicornChat,
we just need to send the message


360
00:21:04,936 --> 00:21:06,426
and then report back


361
00:21:06,586 --> 00:21:10,516
if the message has
been successfully sent.


362
00:21:11,066 --> 00:21:14,976
So now we have covered
the Resolve, Confirm


363
00:21:15,196 --> 00:21:17,696
and Handle methods and concepts.


364
00:21:18,056 --> 00:21:19,976
Let's actually go
implement them in Xcode.


365
00:21:31,506 --> 00:21:34,166
So this time we're
going to dive right


366
00:21:34,166 --> 00:21:36,356
into the IntentHandler class.


367
00:21:37,746 --> 00:21:40,366
So before I start,
just a quick reminder.


368
00:21:40,846 --> 00:21:45,416
All these simple code will be
posted online, so if I skip


369
00:21:45,416 --> 00:21:48,536
through some of the details,
it probably means it's not


370
00:21:48,536 --> 00:21:50,286
as important for you to read


371
00:21:50,286 --> 00:21:52,276
through every single
line of code right now.


372
00:21:52,816 --> 00:21:55,616
But if you're interested,
you can always go back online


373
00:21:55,846 --> 00:21:58,636
and check out the simple
project and read by yourself.


374
00:21:59,486 --> 00:21:59,896
All right.


375
00:22:00,676 --> 00:22:04,476
So as we have mentioned, we're
going to cover the Resolve,


376
00:22:04,946 --> 00:22:06,726
Confirm and Handle methods.


377
00:22:07,536 --> 00:22:11,036
For Resolve, we are going to
implement the Resolve method


378
00:22:11,296 --> 00:22:13,186
for recipients and content.


379
00:22:14,386 --> 00:22:15,976
So let's start with
resolveRecipients.


380
00:22:19,576 --> 00:22:22,566
So in this method
we need to focus


381
00:22:22,626 --> 00:22:25,886
on the recipients
parameter that is represented


382
00:22:25,996 --> 00:22:28,016
by an array of INPerson.


383
00:22:28,786 --> 00:22:32,486
You can also tell from the
method signature that you need


384
00:22:32,536 --> 00:22:37,716
to callback with the array
of resolution results.


385
00:22:38,996 --> 00:22:41,916
So there is a one-to-one
mapping relationship


386
00:22:42,386 --> 00:22:46,566
between the recipients array and
the resolution results array,


387
00:22:47,206 --> 00:22:49,706
meaning that for each
recipient you need


388
00:22:49,706 --> 00:22:52,376
to create a
PersonResolutionResult for it.


389
00:22:53,486 --> 00:22:56,026
The only exceptions
here is when you want


390
00:22:56,026 --> 00:22:58,696
to create
ResolutionResultNeedsValue


391
00:22:58,906 --> 00:23:00,736
or ResolutionResultNotRequired.


392
00:23:01,376 --> 00:23:05,756
Where these two types of
resolutionResult are more


393
00:23:05,756 --> 00:23:08,146
for a parameter level resolution


394
00:23:09,096 --> 00:23:12,736
versus the other
resolutionResults are more


395
00:23:12,836 --> 00:23:16,386
targeting towards the
individual parameter values.


396
00:23:17,996 --> 00:23:21,056
So the first thing we want
to do, in this method,


397
00:23:21,676 --> 00:23:25,666
is to try unwrapping
the Recipients Object.


398
00:23:26,776 --> 00:23:30,126
And then we're going to loop
through every single recipient


399
00:23:30,126 --> 00:23:34,346
and then call our API
inside UnicornCore framework


400
00:23:34,686 --> 00:23:37,436
to find the matching
contacts given the name.


401
00:23:37,826 --> 00:23:42,656
And next, we're going
to do a switch statement


402
00:23:43,136 --> 00:23:44,706
on the matching contacts count.


403
00:23:45,976 --> 00:23:47,926
And as earlier, we're going


404
00:23:47,926 --> 00:23:50,996
to cover the different
results of the search.


405
00:23:51,796 --> 00:23:54,506
The case where we have two
or more matching contacts.


406
00:23:54,786 --> 00:23:57,466
The case where we have
exactly one matching contact.


407
00:23:57,726 --> 00:24:00,306
And the case where we
have no matching contact.


408
00:24:00,746 --> 00:24:06,536
So in the case where we find
two or more matching contacts,


409
00:24:07,006 --> 00:24:09,406
we're going to create
a PersonResolution


410
00:24:09,406 --> 00:24:13,946
Result.disambiguation with the
options that we have found.


411
00:24:14,476 --> 00:24:19,586
In the case where we find
exactly one matching contact,


412
00:24:19,996 --> 00:24:20,936
we're good to go.


413
00:24:21,166 --> 00:24:22,966
So we're going to
tell Siri about it


414
00:24:23,286 --> 00:24:26,226
by creating a
PersonResolutionResult.success,


415
00:24:26,606 --> 00:24:28,736
with that one person
that we found.


416
00:24:29,266 --> 00:24:34,366
And in the case where we
find no matching contacts,


417
00:24:35,036 --> 00:24:36,926
we're going to create
a PersonResolution


418
00:24:36,926 --> 00:24:38,286
Result.unsupported.


419
00:24:38,466 --> 00:24:43,896
So that is the end of
our switch statement.


420
00:24:44,516 --> 00:24:48,246
You might have noticed
that I went


421
00:24:48,246 --> 00:24:51,506
through the code pretty fast, so
you might not have time to read


422
00:24:51,506 --> 00:24:52,876
through every single
line of code.


423
00:24:53,426 --> 00:24:58,286
That's perfectly fine because
the key takeaway for you here is


424
00:24:58,326 --> 00:25:01,476
to know that we do have
different resolutionResults


425
00:25:01,706 --> 00:25:04,516
that are appropriate to
use in different scenarios.


426
00:25:05,296 --> 00:25:08,566
So when it's time for you
to implement your code logic


427
00:25:08,916 --> 00:25:12,146
for your result methods,
you can go online and check


428
00:25:12,146 --> 00:25:14,796
out the documentation
for the complete list


429
00:25:14,796 --> 00:25:16,096
of resolutionResults.


430
00:25:16,916 --> 00:25:19,146
And then and also
the usage of them.


431
00:25:20,586 --> 00:25:20,956
All right.


432
00:25:21,906 --> 00:25:25,506
So now we have all
the resolutionResults


433
00:25:25,506 --> 00:25:28,436
that we have created
for recipients.


434
00:25:29,316 --> 00:25:33,836
Let's call the completion with
the array of resolutionResults.


435
00:25:34,336 --> 00:25:39,866
And that marks the last line
for the case where we are able


436
00:25:39,866 --> 00:25:42,286
to get some recipients
from the intent.


437
00:25:43,386 --> 00:25:47,376
But in the case where the
user simply hasn't specified a


438
00:25:47,376 --> 00:25:50,426
recipient, then we're going


439
00:25:50,426 --> 00:25:53,586
to create a PersonResolution
Result.needsValue


440
00:25:53,936 --> 00:25:55,426
and call completion with that


441
00:25:55,786 --> 00:25:59,736
to tell Siri please prompt
the users for a recipient.


442
00:26:00,336 --> 00:26:05,426
And that's it for our
result recipients' method.


443
00:26:06,476 --> 00:26:09,906
So next, we're going to cover
the resolveContent method,


444
00:26:10,256 --> 00:26:13,766
where we are simply going
to check if there's a value.


445
00:26:14,246 --> 00:26:17,406
And if there isn't,
we're going to ask Siri


446
00:26:17,406 --> 00:26:18,976
to kindly help us
to prompt users.


447
00:26:25,516 --> 00:26:28,076
So the first thing we
do, in resolveContent,


448
00:26:28,236 --> 00:26:33,716
is again try unwrapping the
content property and then check


449
00:26:33,716 --> 00:26:35,536
if it's truly not empty.


450
00:26:36,586 --> 00:26:39,066
If a content is indeed given,


451
00:26:39,536 --> 00:26:42,116
we're going to create
ResolutionResult.success


452
00:26:42,566 --> 00:26:43,866
with the given content.


453
00:26:45,436 --> 00:26:50,216
Otherwise, we're going to create
ResolutionResult.needsValue,


454
00:26:50,456 --> 00:26:52,976
just like we did in the
previous Resolve method.


455
00:26:54,476 --> 00:26:55,946
And then call completion
with this.


456
00:26:59,056 --> 00:27:02,336
So now we have gone through
both of the Resolve methods.


457
00:27:03,076 --> 00:27:06,626
Next up is the Confirm
method, where we're going


458
00:27:06,626 --> 00:27:09,726
to check the authentication
status of the user.


459
00:27:16,676 --> 00:27:21,486
So in the Confirm method, we're
going to call the shared API


460
00:27:21,836 --> 00:27:24,436
in the UnicornCore
framework to check


461
00:27:24,686 --> 00:27:27,976
if the user still has a
valid authentication status.


462
00:27:29,096 --> 00:27:31,526
If he or she does,
then we're going


463
00:27:31,526 --> 00:27:34,636
to create an
INSentMessageIntentResponse


464
00:27:35,146 --> 00:27:38,766
with the code success
and a nil userActivity.


465
00:27:39,946 --> 00:27:43,376
I will talk about the
userActivity in just a moment.


466
00:27:43,996 --> 00:27:46,876
But now let's move onto the case


467
00:27:47,096 --> 00:27:49,536
where the user is no
longer authenticated.


468
00:27:50,506 --> 00:27:54,306
Well, in this case, we're going
to create a IntentResponse


469
00:27:54,556 --> 00:27:57,666
with a code
.failureRequiringAppLaunch.


470
00:27:58,596 --> 00:28:02,846
So this is to tell Siri,
Siri should provide an option


471
00:28:03,046 --> 00:28:07,146
for users to maybe proceed to
our main application in order


472
00:28:07,146 --> 00:28:09,976
to log in and finish
this sending action.


473
00:28:15,116 --> 00:28:16,456
All right.


474
00:28:16,456 --> 00:28:19,116
So that's it for
our Confirm method.


475
00:28:19,916 --> 00:28:23,836
Lastly we're going to implement
the Handle method together.


476
00:28:29,426 --> 00:28:31,866
So in Handle, we're simply going


477
00:28:31,866 --> 00:28:36,666
to call the shared API
inside UnicornCore framework


478
00:28:37,026 --> 00:28:41,416
to send the message with the
given content and recipients.


479
00:28:42,676 --> 00:28:45,996
We're also going to get the
status of the sending action.


480
00:28:46,516 --> 00:28:50,216
So if the message is
successfully sent,


481
00:28:50,616 --> 00:28:52,826
we're going to create
an IntentResponse


482
00:28:53,166 --> 00:28:54,816
with the code success.


483
00:28:55,606 --> 00:28:58,186
Otherwise, we're going
to create the response


484
00:28:58,406 --> 00:28:59,746
with the code failure.


485
00:28:59,746 --> 00:29:02,246
And then we're going
to call completion


486
00:29:02,536 --> 00:29:03,916
with the IntentResponse.


487
00:29:06,416 --> 00:29:10,366
So we have just gone
through the Resolve, Confirm


488
00:29:10,486 --> 00:29:12,166
and Handle methods together.


489
00:29:13,526 --> 00:29:15,996
Now, as promised
earlier, I'm going to talk


490
00:29:15,996 --> 00:29:17,946
about the NSUserActivity


491
00:29:18,276 --> 00:29:22,066
that those IntentResponse
initializers take.


492
00:29:24,296 --> 00:29:26,976
So let's step out of
Xcode for a moment.


493
00:29:37,046 --> 00:29:38,966
So NSUserActivity.


494
00:29:40,326 --> 00:29:44,926
In the context of SiriKit,
NSUserActivity is used


495
00:29:45,116 --> 00:29:47,506
to help your application
to resume state


496
00:29:47,946 --> 00:29:51,556
when it gets launched by
either Siri or the user.


497
00:29:52,846 --> 00:29:57,076
By default, Siri creates
an NSUserActivity for you,


498
00:29:57,516 --> 00:29:59,466
if you decide to pass in nil


499
00:29:59,836 --> 00:30:01,976
into the IntentResponse
initializer.


500
00:30:02,806 --> 00:30:08,186
And Siri will create it with the
ActivityType being the intent


501
00:30:08,186 --> 00:30:08,806
class name.


502
00:30:10,366 --> 00:30:13,286
You can also choose to
provide your own UserActivity,


503
00:30:13,656 --> 00:30:15,846
if you want to pass
in some custom data.


504
00:30:17,276 --> 00:30:21,776
But either way, Siri will help
populate the INInteraction


505
00:30:21,776 --> 00:30:24,736
property on the NSUserActivity
Object.


506
00:30:25,246 --> 00:30:28,226
This property is newly
introduced in iOS X.


507
00:30:29,526 --> 00:30:35,246
And this object has all of
the intent, the IntentResponse


508
00:30:35,556 --> 00:30:37,856
as well as the intent
handling status.


509
00:30:38,386 --> 00:30:42,096
And Scott will talk a little bit
more about this object later.


510
00:30:43,076 --> 00:30:45,786
So now let's take
a look at the usage


511
00:30:46,186 --> 00:30:49,156
of NSUserActivity
in our code again.


512
00:30:50,496 --> 00:30:53,326
So if you have paid close
attention to the code,


513
00:30:53,676 --> 00:30:55,696
you might have noticed
that in Confirm


514
00:30:55,696 --> 00:30:58,946
and Handle methods we
have been passing in nil


515
00:30:59,436 --> 00:31:04,046
for the userActivity into our
IntentResponse initializers.


516
00:31:04,386 --> 00:31:05,926
This is perfectly fine,


517
00:31:06,296 --> 00:31:09,976
if our main application will
just handle the UserActivity


518
00:31:10,156 --> 00:31:13,356
that Siri creates for
us and take advantage


519
00:31:13,436 --> 00:31:15,336
of the INInteraction object.


520
00:31:16,636 --> 00:31:19,676
But in some cases,
it is indeed helpful


521
00:31:19,796 --> 00:31:22,856
to give our application
some custom strings


522
00:31:23,276 --> 00:31:25,526
from the extension process.


523
00:31:26,536 --> 00:31:32,326
So, for example, in the
Confirm method, when we find


524
00:31:32,326 --> 00:31:36,606
out the user is no longer
locked in or authenticated.


525
00:31:37,406 --> 00:31:39,936
Then we do want to
pass some error strings


526
00:31:40,346 --> 00:31:41,926
to our main application.


527
00:31:42,386 --> 00:31:45,556
We're going to do that by
creating our own userActivity


528
00:31:46,996 --> 00:31:49,336
and populate the
.userInfo dictionary


529
00:31:50,646 --> 00:31:53,596
with the custom error
strings that we want give


530
00:31:53,816 --> 00:31:54,986
to our main application.


531
00:31:55,706 --> 00:31:59,036
And then we're going to replace
nil with the userActivity


532
00:31:59,246 --> 00:32:00,546
that we have just created.


533
00:32:01,076 --> 00:32:03,166
All right.


534
00:32:03,396 --> 00:32:08,026
Great. So now my UnicornChat
main application can now get


535
00:32:08,026 --> 00:32:13,016
these custom error strings and
know to prompt users to log-in,


536
00:32:13,596 --> 00:32:19,806
if the user or Siri chooses to
launch the app at this point.


537
00:32:19,806 --> 00:32:22,896
So now we have finished all the
coding for Intents extension.


538
00:32:23,336 --> 00:32:24,976
Let's actually go see
it run on a device.


539
00:32:28,616 --> 00:32:34,006
Send a message to Scott using
UnicornChat saying are you ready


540
00:32:34,006 --> 00:32:34,976
for your presentation?


541
00:32:41,516 --> 00:32:41,936
Yes.


542
00:32:42,516 --> 00:32:47,546
[ Applause ]


543
00:32:48,046 --> 00:32:48,786
All right.


544
00:32:48,786 --> 00:32:49,256
Thank you.


545
00:32:49,746 --> 00:32:51,206
Yeah. It's very exciting.


546
00:32:51,286 --> 00:32:54,296
We've just sent our
first UnicornChat message


547
00:32:54,496 --> 00:32:55,196
through Siri.


548
00:32:55,456 --> 00:32:56,956
That's absolutely awesome.


549
00:32:57,516 --> 00:32:59,786
[ Applause ]


550
00:33:00,286 --> 00:33:00,666
Thank you.


551
00:33:01,516 --> 00:33:04,896
[ Applause ]


552
00:33:05,396 --> 00:33:08,636
However, inside the
UnicornChat main application,


553
00:33:08,896 --> 00:33:11,196
when I sent messages
to my fellow unicorns,


554
00:33:11,536 --> 00:33:14,696
I actually often refer to
them by their unicorn names.


555
00:33:15,396 --> 00:33:18,366
So really I want to say
to Siri, send a message


556
00:33:18,366 --> 00:33:21,146
to Sparkle Sparkly saying
are you ready for your talk?


557
00:33:21,766 --> 00:33:24,966
Where Sparkle Sparkly is
obviously Scott's unicorn name.


558
00:33:26,006 --> 00:33:29,776
So in order to do that, let's
move onto our next topic,


559
00:33:29,996 --> 00:33:32,216
which is user-specific
vocabulary.


560
00:33:32,756 --> 00:33:34,986
All right.


561
00:33:35,386 --> 00:33:36,896
User-specific vocabulary.


562
00:33:38,286 --> 00:33:44,366
So these are custom words or
phrases that are quite unique


563
00:33:44,366 --> 00:33:48,286
to your application and that
can vary from user to user.


564
00:33:49,186 --> 00:33:52,656
In the example that I just
gave, Sparkle Sparkly as well


565
00:33:52,656 --> 00:33:56,456
as other unicorn names can
be considered user-specific


566
00:33:56,456 --> 00:33:58,446
vocabulary here.


567
00:33:58,956 --> 00:34:03,426
So in order to help Siri to
understand what the users meant


568
00:34:03,536 --> 00:34:06,166
when they speak about
these custom phrases,


569
00:34:06,486 --> 00:34:08,206
you need to provide
them to Siri.


570
00:34:09,065 --> 00:34:13,186
And you will do so by
calling the INVocabulary API


571
00:34:13,826 --> 00:34:15,696
from your main app.


572
00:34:15,856 --> 00:34:16,755
Let me repeat this.


573
00:34:17,266 --> 00:34:19,856
You need to call
the INVocabulary API


574
00:34:20,246 --> 00:34:23,386
from your main application,
not your extension.


575
00:34:23,916 --> 00:34:25,206
All right.


576
00:34:25,416 --> 00:34:27,966
Let's take a look at how
we do it in UnicornChat.


577
00:34:31,416 --> 00:34:35,146
So in UnicornChat, we have
this UCAddressBookManager,


578
00:34:35,606 --> 00:34:38,536
which manages UnicornChat's
own contact records.


579
00:34:39,476 --> 00:34:41,206
And we have created this method


580
00:34:41,815 --> 00:34:45,356
to update Siri's knowledge
about Unicorn names.


581
00:34:45,846 --> 00:34:49,406
And it will be called whenever
a contact record gets added,


582
00:34:49,485 --> 00:34:50,766
deleted or updated.


583
00:34:52,216 --> 00:34:54,985
The first thing we want
to do in this method is


584
00:34:54,985 --> 00:34:57,846
to get a sorted list
of Unicorn names.


585
00:34:59,026 --> 00:35:02,986
And we put the more important
Unicorn names at the front


586
00:35:03,556 --> 00:35:06,626
and leave the less
important ones towards the end


587
00:35:07,396 --> 00:35:08,396
of the array.


588
00:35:08,396 --> 00:35:12,376
So we prioritize like
this to help Siri


589
00:35:12,376 --> 00:35:15,246
to better prioritize
learning and matching


590
00:35:15,356 --> 00:35:16,816
for these Unicorn names.


591
00:35:18,056 --> 00:35:21,846
After gathering this sorted
list of Unicorn names,


592
00:35:22,216 --> 00:35:23,656
we're going to provide them


593
00:35:24,366 --> 00:35:26,756
by calling the INVocabulary
API here.


594
00:35:27,776 --> 00:35:30,286
We will also give it
the vocabulary type


595
00:35:30,606 --> 00:35:31,516
of these strings.


596
00:35:32,026 --> 00:35:35,966
In this case, the Unicorn
names are of Type.contentName.


597
00:35:38,086 --> 00:35:40,396
One last thing that I
want you to pay attention


598
00:35:40,396 --> 00:35:45,106
to about this block of code
is that we actually want


599
00:35:45,106 --> 00:35:48,026
to send all these operations
to a different view.


600
00:35:49,296 --> 00:35:53,566
This is because operations
like fetching your entire list


601
00:35:53,566 --> 00:35:57,376
of contacts can be quite
expensive and you don't want


602
00:35:57,376 --> 00:35:58,916
to block your main
thread for it.


603
00:35:59,806 --> 00:36:03,106
So please do take
advantage of GCD


604
00:36:03,476 --> 00:36:06,166
and dispatch those
expensive operations


605
00:36:06,556 --> 00:36:08,366
into a different view.


606
00:36:09,036 --> 00:36:09,786
All right.


607
00:36:10,346 --> 00:36:15,016
So now after adopting the user
specific of vocabulary API,


608
00:36:15,016 --> 00:36:18,766
I can now send messages to
Sparkle Sparkly, Celestra,


609
00:36:19,456 --> 00:36:22,296
Buttercup and all
my fellow unicorns.


610
00:36:22,756 --> 00:36:23,976
That's absolutely great.


611
00:36:27,786 --> 00:36:31,386
So now I have yet
another feature request.


612
00:36:32,286 --> 00:36:36,686
Inside UnicornChat application,
the visual and the style


613
00:36:36,686 --> 00:36:40,776
of the application is actually
far more rainbowy and colorful


614
00:36:40,936 --> 00:36:42,806
than what you see here in Siri.


615
00:36:43,966 --> 00:36:47,736
So can I make my UnicornChat
experience inside Siri to be


616
00:36:47,736 --> 00:36:52,616
as colorful as that in the main
application of UnicornChat?


617
00:36:53,496 --> 00:36:57,026
To tell you all about it, I'm
going to invite up my teammate,


618
00:36:57,146 --> 00:36:59,976
Scott a.k.a. Sparkle
Sparkly to the stage.


619
00:37:00,516 --> 00:37:02,976
[ Applause ]


620
00:37:03,476 --> 00:37:04,416
>> Good afternoon.


621
00:37:04,716 --> 00:37:07,526
I'm Scott Andrus and I'm
an engineer on SiriKit.


622
00:37:08,136 --> 00:37:11,346
And now we're going to talk
about how to make this feel more


623
00:37:11,346 --> 00:37:13,306
like an interaction
with UnicornChat.


624
00:37:13,306 --> 00:37:15,496
And to do that we're going


625
00:37:15,496 --> 00:37:18,176
to build a UI extension
with SiriKit.


626
00:37:18,736 --> 00:37:23,186
In iOS X, we've introduced the
Intents UI extension point,


627
00:37:23,186 --> 00:37:26,376
which can allow you to create
wonderful UI extensions


628
00:37:26,376 --> 00:37:28,456
that provide custom
user interfaces


629
00:37:28,736 --> 00:37:30,116
within the Siri experience.


630
00:37:30,706 --> 00:37:32,246
And so, let's get started.


631
00:37:33,296 --> 00:37:35,816
The reason why you
might want to do this is


632
00:37:35,816 --> 00:37:38,746
because UI extensions increase
your application's impact


633
00:37:38,936 --> 00:37:39,606
on the user.


634
00:37:40,716 --> 00:37:42,976
By importing a UI extension,


635
00:37:43,656 --> 00:37:46,986
you're showing your view
alongside the Siri experience.


636
00:37:47,026 --> 00:37:50,836
And then you can show custom
experiences that are unique


637
00:37:50,866 --> 00:37:54,166
to your application alongside
what Siri might normally show.


638
00:37:54,986 --> 00:37:57,796
This gives you a lot of great
opportunities to do things


639
00:37:57,796 --> 00:38:00,616
with your app that are
unique and let your app stand


640
00:38:00,616 --> 00:38:03,906
out from the rest of the pack.


641
00:38:04,046 --> 00:38:06,686
You can also offer
user-specific customization.


642
00:38:06,766 --> 00:38:10,216
So you can engage with
users on a one-by-one basis.


643
00:38:10,766 --> 00:38:13,756
And finally you can
show information


644
00:38:13,966 --> 00:38:15,506
that Siri might not
otherwise show,


645
00:38:16,066 --> 00:38:18,246
which is a really great tool
to have in your tool belt.


646
00:38:18,716 --> 00:38:22,106
And this is what it looks like.


647
00:38:22,666 --> 00:38:26,606
So to get started all you need


648
00:38:26,606 --> 00:38:29,116
to do is add an Intents
UI extension.


649
00:38:30,216 --> 00:38:31,896
Add that to your project.


650
00:38:32,686 --> 00:38:36,696
And embed it inside of
your application's bundle.


651
00:38:36,696 --> 00:38:40,586
And you'll see the
great Info.plist


652
00:38:40,626 --> 00:38:42,086
that Xcode generates for you.


653
00:38:42,496 --> 00:38:44,446
And inside, you're
going to want to look


654
00:38:44,446 --> 00:38:47,526
for the new IntentsSupported
key, which is analogous


655
00:38:47,526 --> 00:38:49,476
to the one you've seen
in the Intents extension.


656
00:38:50,156 --> 00:38:52,876
And inside, you'll register
for an intents that you'd


657
00:38:52,876 --> 00:38:54,576
like to show custom
user interfaces


658
00:38:54,576 --> 00:38:56,366
for in the Siri experience.


659
00:38:56,856 --> 00:39:01,186
The anatomy of the UI extension


660
00:39:01,186 --> 00:39:03,466
in SiriKit is actually
really straightforward.


661
00:39:05,036 --> 00:39:09,056
SiriKit calls into your UI
extension with the configure


662
00:39:09,056 --> 00:39:11,866
with interaction method,
and this is the key method


663
00:39:12,276 --> 00:39:13,976
in SiriKit UI extensions.


664
00:39:14,316 --> 00:39:17,286
Your UI extension has
a principal class,


665
00:39:17,906 --> 00:39:19,906
which is the UIViewController
conforming


666
00:39:19,906 --> 00:39:22,736
to the INUIHostedViewControlling
protocol.


667
00:39:22,736 --> 00:39:26,886
And it will be passing
an INInteraction object


668
00:39:27,326 --> 00:39:29,946
to your UI extension for
this configuration step.


669
00:39:29,946 --> 00:39:33,256
Now, as Diana mentioned,


670
00:39:33,676 --> 00:39:37,196
the INInteraction
class defines an object


671
00:39:37,486 --> 00:39:39,426
that encapsulates three
important properties.


672
00:39:40,406 --> 00:39:43,736
The first is the Intent
Object that's being confirmed


673
00:39:43,736 --> 00:39:46,136
or handled by your
Intent extension.


674
00:39:46,606 --> 00:39:50,366
Next, the Intent response
object that's being sent


675
00:39:50,366 --> 00:39:53,836
from your Intents extension
to Siri via the completions


676
00:39:53,976 --> 00:39:55,606
of the Confirm and
Handle methods.


677
00:39:56,426 --> 00:39:59,456
And finally, there's an intent
handling status [inaudible]


678
00:39:59,456 --> 00:40:02,476
value that describes the
state of the interaction


679
00:40:02,576 --> 00:40:04,526
between your application
and Siri.


680
00:40:04,856 --> 00:40:08,376
As these are all really
useful properties to implement


681
00:40:08,806 --> 00:40:10,976
as you build your user
interface for Siri.


682
00:40:15,156 --> 00:40:18,156
Your view controller is the
gateway into your UI extension


683
00:40:18,826 --> 00:40:20,996
as the principal class
that you're going


684
00:40:20,996 --> 00:40:22,796
to start building your
user interface with.


685
00:40:23,196 --> 00:40:26,116
Because it's a subclass
of UIViewController,


686
00:40:26,586 --> 00:40:29,386
you've got access to all the
great UIKit functionality you


687
00:40:29,386 --> 00:40:32,206
may be used to when
building user interfaces


688
00:40:32,436 --> 00:40:34,056
for Cocoa Touch applications.


689
00:40:34,216 --> 00:40:38,096
And you'll configure it
with the interaction object


690
00:40:38,096 --> 00:40:39,686
that Siri sends you
in the configure


691
00:40:39,686 --> 00:40:40,676
with interaction method.


692
00:40:40,676 --> 00:40:44,516
There are a couple of other
parameters that you might want


693
00:40:44,516 --> 00:40:45,996
to take note of in this method.


694
00:40:46,516 --> 00:40:49,716
One of which is provided
view context parameter.


695
00:40:49,716 --> 00:40:53,036
And in an iOS X, this
is an [inaudible] value


696
00:40:53,076 --> 00:40:54,316
which is one of two values.


697
00:40:55,036 --> 00:40:57,636
Siri snippet or maps card.


698
00:40:57,636 --> 00:41:00,796
And so you can configure
your interface differently


699
00:41:00,896 --> 00:41:02,146
for these different kinds


700
00:41:02,146 --> 00:41:03,826
of modal interactions
with the user.


701
00:41:03,936 --> 00:41:06,026
And this can be really
useful to you


702
00:41:06,026 --> 00:41:06,976
if you're making a
[inaudible] extension.


703
00:41:10,326 --> 00:41:14,016
Finally. You'll have a
completion, which you can call


704
00:41:14,016 --> 00:41:16,586
to let Siri know that you've
completed configuration


705
00:41:16,586 --> 00:41:20,276
of your user interface and
you'll pass back a desired size,


706
00:41:20,636 --> 00:41:23,506
which tells Siri how to size
your view within a Siri snippet.


707
00:41:24,956 --> 00:41:26,836
So now I think we know
everything we need to know


708
00:41:27,416 --> 00:41:28,876
to get started with a demo


709
00:41:28,876 --> 00:41:31,816
of building a SiriKit UI
extension for UnicornChat.


710
00:41:32,756 --> 00:41:37,616
Okay. So we're back in the great
project that Diana was setting


711
00:41:37,616 --> 00:41:40,026
up for us, with our Siri
extension, which allowed us


712
00:41:40,026 --> 00:41:42,546
to plug our app into
the Siri experience.


713
00:41:42,716 --> 00:41:44,426
And we're going to
take it a step further


714
00:41:44,426 --> 00:41:45,886
within Intents UI extension.


715
00:41:46,726 --> 00:41:50,546
Now when Diana created her Siri
extension target, we were able


716
00:41:50,546 --> 00:41:53,576
to create an Intents UI
extension target to go with it.


717
00:41:54,196 --> 00:41:56,326
An Xcode created this
group here on the left


718
00:41:56,326 --> 00:41:58,766
in our project navigator
for our Siri UI extension.


719
00:41:59,506 --> 00:42:00,806
So we open that up.


720
00:42:00,996 --> 00:42:03,746
We can see a few great files
that let us get started


721
00:42:03,746 --> 00:42:05,016
with our Intents UI extension.


722
00:42:06,416 --> 00:42:08,336
The first is the
IntentViewController class,


723
00:42:08,656 --> 00:42:10,686
which is the principal
class of our extension.


724
00:42:11,526 --> 00:42:13,956
And then we also have a
storyboard for that class


725
00:42:14,626 --> 00:42:17,586
and then an Info.plist, and
we'll dig into this first


726
00:42:17,876 --> 00:42:20,146
to register for our
supported intents.


727
00:42:20,816 --> 00:42:27,546
So inside we've got a great
IntentsSupported array inside


728
00:42:27,546 --> 00:42:28,826
the NSExtension dictionary.


729
00:42:28,826 --> 00:42:32,006
I'm going to go ahead
and add an entry here.


730
00:42:32,226 --> 00:42:33,796
Now what we'd like to do


731
00:42:33,936 --> 00:42:37,696
with our Intents UI extension is
show a user interface to users


732
00:42:37,696 --> 00:42:39,566
of Siri during Siri results


733
00:42:40,156 --> 00:42:42,566
for sending a message
to other unicorns.


734
00:42:42,966 --> 00:42:45,086
And when we show this
interface, we'd like it


735
00:42:45,086 --> 00:42:46,846
to be a chat transcript
interface


736
00:42:46,936 --> 00:42:51,416
that really displays the
unicorniness of our application.


737
00:42:52,686 --> 00:42:57,026
So inside I'm going
to add support


738
00:42:57,026 --> 00:43:01,046
for the INSendMessageIntent,
declaring that we should


739
00:43:01,046 --> 00:43:02,566
in fact show a user interface


740
00:43:02,736 --> 00:43:05,036
when Siri handles this
intent with our application.


741
00:43:05,536 --> 00:43:08,726
Great. And we're all
done with our Info.plist,


742
00:43:08,726 --> 00:43:11,006
so we can start implementing
our IntentViewController.


743
00:43:11,526 --> 00:43:13,646
So I'll zoom back out here.


744
00:43:14,296 --> 00:43:16,416
And here we've got our
IntentViewController class.


745
00:43:17,216 --> 00:43:18,856
Now you notice this is
[inaudible] subclass


746
00:43:18,856 --> 00:43:20,366
of UIViewController conforming


747
00:43:20,366 --> 00:43:23,166
to the INUIHostedViewControlling
protocol.


748
00:43:23,386 --> 00:43:26,466
As part of that conformance,
it has to configure


749
00:43:26,466 --> 00:43:29,456
with interaction method which
is provided to [inaudible] here.


750
00:43:30,666 --> 00:43:33,586
Now the very first thing
I'm going to do is I'm going


751
00:43:33,586 --> 00:43:36,666
to import the UnicornCore
framework


752
00:43:36,666 --> 00:43:38,236
as a module into my Swift file.


753
00:43:39,166 --> 00:43:41,806
Now again, this UnicornCore
framework is a framework


754
00:43:41,806 --> 00:43:44,446
that we implemented for our
application and we use it in all


755
00:43:44,446 --> 00:43:47,136
of our Unicorn apps, like
Unicorn Pay or Unicorn Rides.


756
00:43:47,566 --> 00:43:50,426
It's a great way to share
code for our application


757
00:43:50,426 --> 00:43:52,536
and for all of our extensions.


758
00:43:53,126 --> 00:43:56,836
We made great use of it in
Diana's demo as a way to be able


759
00:43:56,836 --> 00:43:59,236
to share our business
logic for Resolve, Confirm


760
00:43:59,236 --> 00:44:00,816
and Handle in our extension.


761
00:44:00,816 --> 00:44:03,646
And now we're going to use
it to share user interfaces


762
00:44:03,756 --> 00:44:05,876
for our UI extension
and our application,


763
00:44:06,006 --> 00:44:08,406
so we can have the
great familiar feeling


764
00:44:08,406 --> 00:44:10,976
of sending a UnicornChat
message no matter where we are.


765
00:44:16,126 --> 00:44:17,386
So let's start implementing
the configure


766
00:44:17,386 --> 00:44:17,976
with interaction method.


767
00:44:21,236 --> 00:44:24,836
So inside I'm going to go ahead
and set up a size variable,


768
00:44:25,226 --> 00:44:26,126
which I'm going to send back


769
00:44:26,126 --> 00:44:28,186
to Siri once I've
completed configuration.


770
00:44:28,676 --> 00:44:30,816
And now I'm going to check


771
00:44:30,816 --> 00:44:33,206
if my interaction.representsSend
MessageIntent.


772
00:44:33,556 --> 00:44:37,036
This is a convenience that I've
implemented as a class extension


773
00:44:37,036 --> 00:44:38,976
on INInteraction in my
UnicornCore framework.


774
00:44:43,876 --> 00:44:46,516
Then I'll instantiate a
chatViewController class.


775
00:44:46,746 --> 00:44:47,776
And this is what we use


776
00:44:47,776 --> 00:44:50,186
to represent a message
sending interface,


777
00:44:50,216 --> 00:44:51,876
and we're using both
our UnicornChat app.


778
00:44:51,876 --> 00:44:53,976
And we'll use it here in
our UI extension as well.


779
00:44:57,416 --> 00:44:59,196
And we'll start configuring
that chatViewController


780
00:44:59,196 --> 00:45:01,636
with .messageContent from
the interaction object,


781
00:45:01,986 --> 00:45:03,836
which I'm again using
my class extension


782
00:45:03,836 --> 00:45:05,046
to get from the interaction.


783
00:45:05,596 --> 00:45:11,466
I'm creating a UC contact
model object, which is based


784
00:45:11,466 --> 00:45:14,026
on the interaction's properties,
and then I'm assigning


785
00:45:14,026 --> 00:45:15,966
that model object to
my chatViewController


786
00:45:16,356 --> 00:45:17,976
to show the recipient
of the message.


787
00:45:21,386 --> 00:45:23,226
And then finally
I'm going to switch


788
00:45:23,226 --> 00:45:25,226
on the intentHandlingStatus
of the interaction.


789
00:45:25,336 --> 00:45:28,456
And we can use this to configure
our user interface differently,


790
00:45:28,776 --> 00:45:30,686
based on whether or not
the message has been sent.


791
00:45:30,686 --> 00:45:35,166
And so in this case, if the
message has not been sent a.k.a,


792
00:45:35,166 --> 00:45:37,736
the intentHandlingStatus
is unspecified,


793
00:45:38,116 --> 00:45:39,466
inProgress or ready.


794
00:45:39,576 --> 00:45:43,276
I can set the isSent property of
my chatViewController to false,


795
00:45:43,786 --> 00:45:46,606
indicating that I should
set a draft-type interface


796
00:45:46,606 --> 00:45:47,666
and show that to the user.


797
00:45:48,576 --> 00:45:51,366
Otherwise, if it's done, I
can set the isSent property


798
00:45:51,366 --> 00:45:53,036
of my chatViewController
to true,


799
00:45:53,386 --> 00:45:54,776
indicating that I've
sent the message


800
00:45:54,776 --> 00:45:55,976
and letting the user
know the same.


801
00:45:59,846 --> 00:46:03,026
Finally I can present the
chatViewController as a child


802
00:46:03,026 --> 00:46:05,186
of this principal class
IntentViewController,


803
00:46:05,586 --> 00:46:06,816
which is a really useful way


804
00:46:07,216 --> 00:46:09,836
to implement different view
controllers for different kinds


805
00:46:09,836 --> 00:46:10,976
of intents in my UI extension.


806
00:46:14,136 --> 00:46:17,756
Finally I can use the
NS extension context


807
00:46:17,756 --> 00:46:22,376
of my Intents UI extension in
iOS X to get a maximum size.


808
00:46:22,376 --> 00:46:25,846
And I'll use this by default
in my UnicornChat integration.


809
00:46:26,416 --> 00:46:30,616
If for some reason I couldn't
get the extension context,


810
00:46:30,706 --> 00:46:33,796
I'll make use of the desired
size of the chatViewController,


811
00:46:34,146 --> 00:46:34,976
which is good enough for me.


812
00:46:38,636 --> 00:46:40,036
Now that was the happy path.


813
00:46:40,546 --> 00:46:42,496
Let's say that something went
wrong and we got an interaction


814
00:46:42,496 --> 00:46:43,316
that we didn't expect.


815
00:46:44,186 --> 00:46:46,966
We can set a size of
zero, telling Siri not


816
00:46:46,966 --> 00:46:50,126
to draw our UI extension's
view within the Siri snippet.


817
00:46:50,626 --> 00:46:56,426
Okay. The last thing I'm going
to do is I'm going to tell Siri


818
00:46:56,546 --> 00:46:58,786
that I've completed implementing


819
00:46:58,816 --> 00:47:00,816
and configuring my
user interface


820
00:47:00,886 --> 00:47:04,046
and that should go ahead and
show us in the Siri snippet.


821
00:47:05,606 --> 00:47:09,226
Okay. So I have a version of
this running on my device.


822
00:47:09,316 --> 00:47:09,976
Let's go ahead and see it now.


823
00:47:16,476 --> 00:47:19,016
So as you can see here, I
have my UnicornChat app.


824
00:47:19,016 --> 00:47:21,216
I'm going to send
the message to Diana.


825
00:47:21,666 --> 00:47:28,066
Send the message to Diana using
UnicornChat that says "Great job


826
00:47:28,066 --> 00:47:28,976
on your presentation."


827
00:47:34,516 --> 00:47:40,356
[ Applause ]


828
00:47:40,856 --> 00:47:43,376
And so we've got a great
custom user interface here,


829
00:47:43,876 --> 00:47:46,176
but also you noticed that
something is a little bit off.


830
00:47:46,336 --> 00:47:47,976
And so we'll take
a look at that now.


831
00:47:56,456 --> 00:47:58,726
So we've just shown you how


832
00:47:58,726 --> 00:48:00,986
to boot strap your UI
extension with SiriKit.


833
00:48:01,336 --> 00:48:02,706
And that's really great.


834
00:48:03,256 --> 00:48:05,376
But you'll notice
here that again,


835
00:48:05,376 --> 00:48:08,056
there's something not quite
right about the user interface


836
00:48:08,056 --> 00:48:09,876
that we're showing
to users in Siri.


837
00:48:10,246 --> 00:48:13,106
And thus that we have a
duplicate chat transcript


838
00:48:13,106 --> 00:48:15,896
interface being shown
within the Siri snippet.


839
00:48:16,886 --> 00:48:20,706
By default, Siri shows the user
interface for various kinds


840
00:48:20,706 --> 00:48:23,516
of intents, and this
includes the SentMessageIntent


841
00:48:23,516 --> 00:48:26,786
that we've just used to send
Diana a message on UnicornChat.


842
00:48:26,786 --> 00:48:29,746
As such, what we'd like to do


843
00:48:29,746 --> 00:48:33,096
for our UnicornChat users is
really show our custom user


844
00:48:33,096 --> 00:48:37,476
interface to let the users have
a great feeling of unicorniness


845
00:48:37,586 --> 00:48:40,066
when they send messages
in UnicornChat.


846
00:48:41,316 --> 00:48:44,736
And so we can do this in iOS X,
with an optional new protocol.


847
00:48:45,656 --> 00:48:49,466
By implementing the
INUIHostedViewSiriProviding


848
00:48:49,466 --> 00:48:51,916
protocol, you can let Siri know


849
00:48:51,916 --> 00:48:54,846
that you're drawing
either messages or maps


850
00:48:55,156 --> 00:48:56,646
within your UI extension's view.


851
00:48:56,836 --> 00:49:00,376
And thus, you can opt-in to
displaying different kinds


852
00:49:00,376 --> 00:49:03,446
of particular content
within your user interface


853
00:49:03,496 --> 00:49:06,676
and then taking over that
interface on behalf of Siri.


854
00:49:07,526 --> 00:49:08,916
Ultimately when you do this,


855
00:49:09,496 --> 00:49:11,346
Siri will accommodate
your views content


856
00:49:11,686 --> 00:49:13,126
and so you should make sure


857
00:49:13,276 --> 00:49:15,706
that you do accurately
draw these properties


858
00:49:16,126 --> 00:49:17,326
on behalf of the user.


859
00:49:17,826 --> 00:49:21,596
So let's take the
IntentViewController


860
00:49:21,596 --> 00:49:23,966
that we were just working
within our UI extension.


861
00:49:23,966 --> 00:49:27,726
Here you can see that
if we implement the


862
00:49:28,066 --> 00:49:30,916
INUIHostedViewSiriProviding
protocol,


863
00:49:31,646 --> 00:49:35,646
we can implement displaysMessage
property and return true,


864
00:49:35,716 --> 00:49:37,726
indicating to Siri that we are


865
00:49:37,726 --> 00:49:39,976
in fact displaying message
content within UnicornChat.


866
00:49:43,516 --> 00:49:45,866
And this is all it
takes to be able


867
00:49:45,866 --> 00:49:49,356
to implement your own user
interface within Siri.


868
00:49:50,716 --> 00:49:53,316
So let's see a demo
of this on my device,


869
00:49:53,646 --> 00:49:55,316
where I have a version
of this application


870
00:49:55,316 --> 00:49:55,976
that does exactly this.


871
00:49:59,046 --> 00:50:00,576
So we're back on my device.


872
00:50:01,276 --> 00:50:03,066
Now let's send another
message to Diana.


873
00:50:03,636 --> 00:50:09,376
Send the message to Diana
using UnicornChat that says


874
00:50:09,936 --> 00:50:12,976
"It's pretty tough to type
demo code with unicorn hands."


875
00:50:19,316 --> 00:50:22,196
And now we see exactly the
interface that we want to see


876
00:50:22,356 --> 00:50:23,956
and what we want
to show our users.


877
00:50:24,516 --> 00:50:29,500
[ Applause ]


878
00:50:34,296 --> 00:50:38,416
Our interface is unimpeded by
what Siri might show by default.


879
00:50:38,526 --> 00:50:42,266
And this gives us a great outlet
to show a custom user interface


880
00:50:42,326 --> 00:50:43,626
that really reflects


881
00:50:43,866 --> 00:50:45,976
on the unicorny style
of our application.


882
00:50:49,706 --> 00:50:51,766
Now some final thoughts


883
00:50:51,766 --> 00:50:54,406
on implementing UI extensions
before we part today.


884
00:50:55,196 --> 00:50:57,746
And the first thing I'd
like to leave you with is


885
00:50:58,246 --> 00:51:00,936
that you should consider
being memory conscious near


886
00:51:00,936 --> 00:51:01,976
UI extensions.


887
00:51:02,976 --> 00:51:06,036
Because extensions, by default,
are temporary and only shown


888
00:51:06,036 --> 00:51:08,136
to the user for short
periods of time,


889
00:51:08,606 --> 00:51:11,146
the system enforces
a lower memory limit


890
00:51:11,146 --> 00:51:13,506
than you might be used to
with your applications.


891
00:51:14,326 --> 00:51:17,596
And so usage of views,
like MKMapView,


892
00:51:17,926 --> 00:51:19,546
can be especially
memory intensive,


893
00:51:19,546 --> 00:51:21,286
and you should use
them judiciously


894
00:51:21,616 --> 00:51:23,046
when building your UI extension.


895
00:51:25,716 --> 00:51:29,636
As we saw, we have access to
minimum and maximum view sizes


896
00:51:30,006 --> 00:51:33,036
within our UI extension
via NS extension context.


897
00:51:33,346 --> 00:51:35,626
And this is also
incredibly useful to you,


898
00:51:35,626 --> 00:51:37,286
if you're designing
your application


899
00:51:37,286 --> 00:51:39,166
and your UI extension
to be shown


900
00:51:39,166 --> 00:51:41,136
in various different
size configurations.


901
00:51:41,846 --> 00:51:45,656
But desired size that you then
send back to Siri is just that.


902
00:51:45,656 --> 00:51:46,596
A desired size.


903
00:51:46,706 --> 00:51:49,946
And so, if you're making use
of different kinds of layout,


904
00:51:50,476 --> 00:51:52,456
you want to make sure that
you're being adaptive with it


905
00:51:52,456 --> 00:51:54,856
so that it can look good
at either the minimum


906
00:51:54,966 --> 00:51:57,956
or the maximum size, no
matter how Siri draws it.


907
00:52:01,756 --> 00:52:05,346
So we've seen a few
key things with respect


908
00:52:05,606 --> 00:52:08,146
to extending our
applications to adopt SiriKit.


909
00:52:08,566 --> 00:52:12,446
And the first is preparing
our application appropriately,


910
00:52:12,446 --> 00:52:16,086
and that's by making use of
shared code in great ways


911
00:52:16,086 --> 00:52:19,986
like embedded frameworks,
implementing unit tests


912
00:52:20,746 --> 00:52:23,476
to be able to properly test
for different kinds of intents


913
00:52:23,476 --> 00:52:24,626
that Siri might send us.


914
00:52:25,406 --> 00:52:27,566
And then architecting
our application


915
00:52:27,566 --> 00:52:29,286
to use the right
number of extensions.


916
00:52:29,916 --> 00:52:34,166
We solved how to add our
first intents extension


917
00:52:34,226 --> 00:52:36,856
and implementing
the Resolve, Confirm


918
00:52:36,856 --> 00:52:38,356
and Handle business logic


919
00:52:38,426 --> 00:52:41,326
that lets our applications
speak Siri's language.


920
00:52:43,936 --> 00:52:47,336
And finally, we showed how to
provide a user interface in Siri


921
00:52:47,786 --> 00:52:50,966
to bring the custom, unique
experiences of our application


922
00:52:50,966 --> 00:52:51,976
into the Siri experience.


923
00:52:55,556 --> 00:52:58,476
The sample code from this
session, as well as the slides


924
00:52:58,476 --> 00:53:00,476
and some great documentation
about SiriKit,


925
00:53:00,916 --> 00:53:02,336
are available on our website.


926
00:53:02,886 --> 00:53:07,226
And then we had an excellent
session yesterday called


927
00:53:07,226 --> 00:53:09,286
Introducing SiriKit,
where we talked


928
00:53:09,286 --> 00:53:12,776
about what we want SiriKit to be
and how it integrates into iOS.


929
00:53:12,776 --> 00:53:16,866
And we had a great session about
app extension best practices


930
00:53:16,956 --> 00:53:20,466
from WWDC 2015 that I'd
highly encourage you to watch,


931
00:53:20,466 --> 00:53:22,736
if you intend to implement
SiriKit extensions.


932
00:53:23,096 --> 00:53:26,126
And I hope that you find
implementing your SiriKit


933
00:53:26,126 --> 00:53:29,316
extensions and your
applications as easy and fun


934
00:53:29,316 --> 00:53:30,926
as we did with UnicornChat.


935
00:53:30,926 --> 00:53:31,706
Thank you.


936
00:53:32,516 --> 00:53:36,500
[ Applause ]

