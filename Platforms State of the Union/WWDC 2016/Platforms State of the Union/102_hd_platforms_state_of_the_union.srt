1
00:00:07,516 --> 00:00:18,516
[ Music ]


2
00:00:19,516 --> 00:00:23,926
[ Applause ]


3
00:00:24,426 --> 00:00:27,556
>> Good afternoon.


4
00:00:27,556 --> 00:00:29,236
Welcome to WC 2016.


5
00:00:30,826 --> 00:00:33,006
Quite a bit has happened
since we met about a year ago.


6
00:00:33,006 --> 00:00:37,776
With the addition of tvOS, then
our four Apple OS platforms,


7
00:00:37,776 --> 00:00:39,336
a lot of them with
their own app store,


8
00:00:40,176 --> 00:00:41,816
and all our platforms
are optimized


9
00:00:41,896 --> 00:00:43,596
for their own unique
experiences.


10
00:00:43,966 --> 00:00:47,246
But they share a tremendous
amount of common technologies


11
00:00:47,246 --> 00:00:49,506
and APIs, making it easy
for you to bring your apps


12
00:00:49,506 --> 00:00:50,966
to all four platforms


13
00:00:51,396 --> 00:00:55,316
by leveraging the individual
character at the same time.


14
00:00:55,316 --> 00:00:58,296
Our expert tool chain is the
same for all four platforms.


15
00:00:59,326 --> 00:01:01,436
They share most of their
frameworks and libraries,


16
00:01:02,436 --> 00:01:04,096
and the underlying
programming concepts


17
00:01:04,096 --> 00:01:06,306
and programming languages
are the same as well.


18
00:01:07,756 --> 00:01:11,446
And today we are announcing a
ton of new APIs and technologies


19
00:01:11,446 --> 00:01:13,306
that you'll be able
to take advantage of.


20
00:01:13,856 --> 00:01:16,186
You'll find many more ways
to express your ideas,


21
00:01:16,436 --> 00:01:18,346
and you'll be able to
target even more users


22
00:01:18,346 --> 00:01:19,266
in even more markets.


23
00:01:20,466 --> 00:01:24,706
Our iOS X in particular is
huge this year for developers.


24
00:01:25,446 --> 00:01:27,856
In fact, if you take a
look at the iOS at least


25
00:01:27,856 --> 00:01:30,156
that we announced this morning,
you'll find that we are opening


26
00:01:30,156 --> 00:01:33,526
up pretty much the entire user
experience of iOS to developers,


27
00:01:33,826 --> 00:01:36,416
covering everything from
notifications to Phone,


28
00:01:36,416 --> 00:01:38,486
Messages, Maps, and even Siri.


29
00:01:40,196 --> 00:01:43,586
An important concept that we use
to achieve that is extensions,


30
00:01:43,626 --> 00:01:45,626
and you might remember that
we introduced extensions two


31
00:01:45,626 --> 00:01:46,196
years ago.


32
00:01:46,826 --> 00:01:49,536
They represent an increasingly
important mechanism for us


33
00:01:49,586 --> 00:01:51,726
because they allow you to
branch out from your apps


34
00:01:52,016 --> 00:01:54,486
and to participate in
our system functionality.


35
00:01:55,356 --> 00:01:58,156
They allow you to
securely customize our OS's


36
00:01:58,186 --> 00:02:00,986
by running short-lived
sandboxed services


37
00:02:01,226 --> 00:02:02,536
that are launched on demand.


38
00:02:04,656 --> 00:02:07,316
Our shipping products already
support a broad variety


39
00:02:07,316 --> 00:02:10,286
of extension points, and we're
adding many more this year,


40
00:02:10,656 --> 00:02:13,836
allowing you to hook even
deeper into our OS's and apps.


41
00:02:15,266 --> 00:02:17,436
Perhaps the most exciting
new extension point is


42
00:02:17,436 --> 00:02:18,826
for creating iMessage Apps.


43
00:02:19,176 --> 00:02:20,206
And to tell you all about it,


44
00:02:20,306 --> 00:02:22,546
I'm going to hand
over to Darin Adler.


45
00:02:23,516 --> 00:02:29,006
[ Applause ]


46
00:02:29,506 --> 00:02:32,926
>> So I'm having a great
time with the new Messages,


47
00:02:32,956 --> 00:02:34,886
and I hope you all will too.


48
00:02:34,886 --> 00:02:38,006
iMessage Apps are how you
can be a part of that.


49
00:02:38,866 --> 00:02:42,236
Now, as Andreas mentioned,
iMessage Apps are extensions,


50
00:02:42,546 --> 00:02:45,136
and that means that like other
extensions, you can include them


51
00:02:45,136 --> 00:02:46,496
in your apps on the App Store.


52
00:02:47,236 --> 00:02:50,006
But with iMessage Apps,
there's another option as well.


53
00:02:50,276 --> 00:02:52,286
You can include them in
the iMessage App Store,


54
00:02:52,546 --> 00:02:54,436
which you get at right
from inside Messages.


55
00:02:55,016 --> 00:02:57,846
Looks like this.


56
00:02:58,096 --> 00:03:04,106
Now, when you send interactive
messages with your iMessage App,


57
00:03:04,646 --> 00:03:09,306
you'll have the icon of
the app up in the corner,


58
00:03:09,666 --> 00:03:12,126
but even more importantly,
if the person you send


59
00:03:12,126 --> 00:03:15,716
that interactive message to
doesn't have the app yet,


60
00:03:16,126 --> 00:03:19,156
they'll have this link that
says, "Get a name of app."


61
00:03:19,416 --> 00:03:20,646
If you tap on that link.


62
00:03:21,356 --> 00:03:23,566
That takes you right to
getting or buying the app,


63
00:03:23,726 --> 00:03:27,536
so it's an amazing way to have
your customers spread your app


64
00:03:27,536 --> 00:03:29,186
from one person to another.


65
00:03:31,156 --> 00:03:32,966
Now, if you're building
a Sticker Pack App,


66
00:03:33,106 --> 00:03:33,896
it's really simple.


67
00:03:33,896 --> 00:03:35,156
There's no coding required.


68
00:03:35,426 --> 00:03:37,836
You just take all of the
graphics for the icons


69
00:03:37,836 --> 00:03:39,506
for the app, the
graphics for the stickers,


70
00:03:39,746 --> 00:03:44,106
put them into Xcode, build, and
then submit to iTunes Connect.


71
00:03:44,736 --> 00:03:48,006
If you want to make a
more sophisticated app


72
00:03:48,006 --> 00:03:51,036
and take advantage of all
the power in iMessage Apps,


73
00:03:51,526 --> 00:03:54,986
you program with Swift
and use UIKit just


74
00:03:54,986 --> 00:03:56,166
like with other extensions.


75
00:03:56,606 --> 00:03:58,536
And there's a new
Messages extension point.


76
00:03:59,926 --> 00:04:02,856
The classes in this Messages
extension point give you access


77
00:04:02,856 --> 00:04:05,056
to everything you need
inside the Messages App.


78
00:04:05,346 --> 00:04:07,916
So there's an object
representing a message


79
00:04:07,916 --> 00:04:08,706
that you send.


80
00:04:08,706 --> 00:04:11,366
There's an object representing
the whole conversation the


81
00:04:11,366 --> 00:04:12,286
message is part of.


82
00:04:12,286 --> 00:04:14,296
There's even an object
representing a thing called a


83
00:04:14,296 --> 00:04:17,236
session, which lets you
group messages together,


84
00:04:17,236 --> 00:04:20,616
and it's a really great way to
do collaborative iMessage Apps.


85
00:04:20,776 --> 00:04:26,466
Now, all of this is done
without compromising the privacy


86
00:04:26,466 --> 00:04:27,926
that Messages is famous for.


87
00:04:28,776 --> 00:04:31,566
Your app doesn't have
any access to anything


88
00:04:31,566 --> 00:04:34,816
in the conversation outside of
what's being done with the app,


89
00:04:35,236 --> 00:04:39,456
and if, it doesn't even
necessarily know who's involved,


90
00:04:39,456 --> 00:04:44,886
who you're sending to, so that
helps keep the privacy intact.


91
00:04:45,496 --> 00:04:49,506
Now, adaptive design
is important


92
00:04:49,506 --> 00:04:51,246
to any iOS app development,


93
00:04:51,956 --> 00:04:54,616
and it's even more
important for iMessage Apps.


94
00:04:54,686 --> 00:04:59,566
That's because Messages runs in
all the different kinds of sizes


95
00:04:59,646 --> 00:05:01,886
and shapes of devices
and all the adaptations.


96
00:05:02,136 --> 00:05:05,886
And so it runs on iPad, it runs
on iPhone, it runs in slide


97
00:05:05,886 --> 00:05:07,926
over an iPad, portrait
and landscape,


98
00:05:08,196 --> 00:05:10,916
and so your iMessage
Apps need to too.


99
00:05:11,196 --> 00:05:13,556
But there's one additional
wrinkle for iMessage Apps,


100
00:05:13,616 --> 00:05:16,956
which is that they run in this
Compact Mode down at the bottom


101
00:05:16,956 --> 00:05:18,836
of the screen where the
keyboard is and you can slide


102
00:05:18,886 --> 00:05:21,616
between them or you
can take that same app


103
00:05:22,046 --> 00:05:24,086
and expand it to its full size.


104
00:05:24,086 --> 00:05:24,956
Sometimes the app will do it.


105
00:05:24,956 --> 00:05:26,406
Sometimes the user will do it.


106
00:05:26,406 --> 00:05:28,586
Adaptive design is
very important


107
00:05:28,586 --> 00:05:30,066
to that experience as well.


108
00:05:31,496 --> 00:05:34,886
Everything you need to develop
iMessage Apps is available,


109
00:05:34,886 --> 00:05:36,356
and so you can really start now.


110
00:05:36,686 --> 00:05:39,906
The SDK has all the things
I talked about everything


111
00:05:39,906 --> 00:05:42,466
from the Messages
extension point.


112
00:05:42,466 --> 00:05:45,806
And the simulator even
has a new, special version


113
00:05:45,806 --> 00:05:49,196
of Messages just for developers
that lets you see both sides


114
00:05:49,196 --> 00:05:52,796
of a conversation and try
out your iMessage Apps


115
00:05:52,856 --> 00:05:54,376
to see how they're
both sent and received.


116
00:05:55,526 --> 00:05:59,976
And now Adele Peterson
will show you how all


117
00:05:59,976 --> 00:06:01,946
of this comes together in iOS X.


118
00:06:02,516 --> 00:06:07,636
[ Applause ]


119
00:06:08,136 --> 00:06:09,716
>> Thanks, Darin.


120
00:06:09,716 --> 00:06:10,546
As you saw this morning,


121
00:06:10,546 --> 00:06:13,166
our friends at Disney have
made some awesome stickers,


122
00:06:13,166 --> 00:06:14,806
so I'm going to show
you how they did it


123
00:06:14,806 --> 00:06:18,326
by putting together a
sticker app in Xcode.


124
00:06:18,456 --> 00:06:19,556
Now, this only takes a minute,


125
00:06:19,556 --> 00:06:22,116
so even though I'm
starting a new project,


126
00:06:22,116 --> 00:06:22,896
I'm actually almost done.


127
00:06:22,896 --> 00:06:25,506
I'm going to start by
selecting the Sticker Pack


128
00:06:25,506 --> 00:06:26,396
application template.


129
00:06:27,146 --> 00:06:31,956
I'll give it a good name
like Star Wars, save it,


130
00:06:31,956 --> 00:06:34,976
and I'll select the
Stickers Asset Catalog.


131
00:06:35,776 --> 00:06:38,826
Now, I want my stickers to have
a great icon when I look at them


132
00:06:38,826 --> 00:06:40,836
in the Messages app
drawer, so I'll start


133
00:06:40,836 --> 00:06:43,156
by dragging in my icons.


134
00:06:44,156 --> 00:06:47,456
And now I can select my sticker
pack and drag my stickers in.


135
00:06:49,166 --> 00:06:50,306
Okay, let's give that a try.


136
00:06:50,386 --> 00:06:54,076
Now that Messages is in the
simulator, it will be easy


137
00:06:54,076 --> 00:06:57,816
for you to try out your
stickers in iMessage Apps.


138
00:06:58,566 --> 00:07:02,536
Okay, so let's launch
the sticker pack.


139
00:07:02,906 --> 00:07:04,826
I just love this 8-bit droid.


140
00:07:05,446 --> 00:07:10,256
So I can test out sending one
and I can even test out peeling


141
00:07:10,656 --> 00:07:12,476
and dragging a sticker
onto another message.


142
00:07:14,306 --> 00:07:14,926
Looks great.


143
00:07:14,926 --> 00:07:17,286
And that's how easy it
is to make a sticker app.


144
00:07:18,516 --> 00:07:25,046
[ Applause ]


145
00:07:25,546 --> 00:07:27,396
Now onto iMessage Apps.


146
00:07:27,736 --> 00:07:32,066
So I've got this ice cream app
here, and my daughter's really


147
00:07:32,066 --> 00:07:33,856
into these kinds of
apps that let her design


148
00:07:33,856 --> 00:07:36,696
and create things, so I'm
making an iMessage App for her


149
00:07:36,696 --> 00:07:38,946
to build ice cream
stickers with her friends.


150
00:07:39,536 --> 00:07:41,006
So here in the Compact View,


151
00:07:41,346 --> 00:07:43,506
you have the completed
ice cream stickers,


152
00:07:43,506 --> 00:07:46,016
and when I tap the
plus, the app expands


153
00:07:46,486 --> 00:07:48,916
and shows the ice
cream building UI.


154
00:07:49,136 --> 00:07:51,156
So I'm going to select a
cone here and start this off.


155
00:07:51,336 --> 00:07:54,916
So I'm going to select
it and send.


156
00:07:54,916 --> 00:07:59,006
So now the simulator shows both
the sender and receiver sides


157
00:07:59,006 --> 00:08:01,966
of the conversation,
so you don't even need


158
00:08:01,966 --> 00:08:04,246
to use two iOS devices to
test your iMessage App.


159
00:08:04,846 --> 00:08:06,786
In this view, I'm
actually John Appleseed


160
00:08:06,786 --> 00:08:08,986
and I'm sending the
cone to Kate Bell.


161
00:08:09,366 --> 00:08:11,436
Let's look at it from the
other side of the conversation.


162
00:08:12,696 --> 00:08:14,246
So here Kate's received
the cone.


163
00:08:14,776 --> 00:08:18,396
You can tap on the message,
launch the app, add some scoops,


164
00:08:18,466 --> 00:08:19,616
and send it back to John.


165
00:08:19,726 --> 00:08:22,216
And then on the other side


166
00:08:22,216 --> 00:08:25,436
of the conversation,
you receive this.


167
00:08:25,606 --> 00:08:27,616
You tap the message,
you add a topping,


168
00:08:28,266 --> 00:08:32,186
and send it back to Kate.


169
00:08:32,385 --> 00:08:34,086
Now, as delicious
as this all looks,


170
00:08:34,086 --> 00:08:36,666
I don't really want my entire
conversation to be filled


171
00:08:36,666 --> 00:08:38,746
with these partially
built ice cream cones.


172
00:08:38,976 --> 00:08:40,956
There's actually a much
cleaner way to build this kind


173
00:08:40,956 --> 00:08:43,236
of collaborative iMessage App.


174
00:08:43,436 --> 00:08:45,696
If I use the same MS session
for each of those messages,


175
00:08:45,696 --> 00:08:47,566
then the earlier steps


176
00:08:47,566 --> 00:08:49,276
of building ice cream
will be replaced


177
00:08:49,276 --> 00:08:52,396
by concise descriptions, and
you'll only see the later,


178
00:08:52,646 --> 00:08:54,006
the latest ice cream message.


179
00:08:54,006 --> 00:08:55,946
So I'm going to make
that change in Xcode


180
00:08:55,946 --> 00:08:57,146
and show you how it looks.


181
00:08:58,576 --> 00:09:02,146
So let me switch over to
the ice cream project.


182
00:09:02,516 --> 00:09:03,126
Let's see.


183
00:09:05,026 --> 00:09:06,516
Okay, so here's the
part of my code


184
00:09:06,516 --> 00:09:08,246
that creates the
MS message object.


185
00:09:08,516 --> 00:09:12,796
I'm going to drag in -- oops --
I'm going to drag in this code.


186
00:09:12,796 --> 00:09:15,816
This code looks to see


187
00:09:15,816 --> 00:09:17,856
if there's a selected
message in the conversation.


188
00:09:18,126 --> 00:09:19,696
That's what you get when
you tap that message


189
00:09:19,696 --> 00:09:21,456
and it launches the
app full screen.


190
00:09:21,766 --> 00:09:23,296
So if there is a
selected message,


191
00:09:23,296 --> 00:09:25,386
we'll use the session
associated with that message,


192
00:09:25,516 --> 00:09:27,846
and if there isn't, we'll
pass in a fresh MS session.


193
00:09:27,916 --> 00:09:33,636
So let's give that a try.


194
00:09:33,876 --> 00:09:38,186
Okay, so now we'll
launch this app again.


195
00:09:38,496 --> 00:09:43,816
We'll tap the Plus button,
select a cone, send it to Kate,


196
00:09:45,906 --> 00:09:53,986
add some toppings, send it back
to John, and then finish it off,


197
00:09:55,756 --> 00:09:56,656
and send it back to Kate.


198
00:09:56,656 --> 00:10:00,426
So now you can see those
descriptions describing the


199
00:10:00,426 --> 00:10:01,536
earlier steps of the process,


200
00:10:01,536 --> 00:10:03,786
and you no longer have those
partially built ice creams


201
00:10:03,836 --> 00:10:05,036
sitting on top of
the finished product.


202
00:10:05,036 --> 00:10:07,606
And that is a little taste


203
00:10:07,606 --> 00:10:10,166
of what you can do
with iMessage Apps.


204
00:10:10,166 --> 00:10:12,616
Next up, Robby Walker
to tell you about Siri.


205
00:10:13,516 --> 00:10:17,546
[ Applause ]


206
00:10:18,046 --> 00:10:18,646
>> Thank you, Adele.


207
00:10:20,526 --> 00:10:23,466
Five years ago, we
announced Siri,


208
00:10:23,466 --> 00:10:26,006
the intelligent assistant
for iPhone.


209
00:10:26,836 --> 00:10:28,456
Since then, Siri has spoken


210
00:10:28,456 --> 00:10:30,466
to people hundreds
of billions of times.


211
00:10:31,346 --> 00:10:34,106
As of today, Siri is now
available on five classes


212
00:10:34,106 --> 00:10:37,776
of devices and in a
whopping 36 locales.


213
00:10:39,106 --> 00:10:42,576
Siri also has many new features
and an improved core experience.


214
00:10:43,146 --> 00:10:47,056
One cool example, on
iPhone 6s and 6s Plus,


215
00:10:47,056 --> 00:10:49,776
you can start talking to Siri
the instant you press the Home


216
00:10:49,776 --> 00:10:52,726
button with literally zero
milliseconds of latency thanks


217
00:10:52,726 --> 00:10:53,896
to an amazing collaboration


218
00:10:53,896 --> 00:10:55,286
between our hardware
and software teams.


219
00:10:56,056 --> 00:10:58,236
But of course, until today,


220
00:10:58,236 --> 00:11:00,966
something really important has
been missing, and that's apps,


221
00:11:01,426 --> 00:11:03,646
so we're so excited to
launch the first version


222
00:11:03,646 --> 00:11:05,376
of SiriKit on iOS.


223
00:11:06,516 --> 00:11:12,836
[ Applause ]


224
00:11:13,336 --> 00:11:15,146
We believe the best
experience for people is


225
00:11:15,146 --> 00:11:17,966
to use the apps they love,
the apps you all have created,


226
00:11:17,966 --> 00:11:20,666
and with SiriKit, people
will now be able to interact


227
00:11:20,666 --> 00:11:23,086
with those applications in
a new, conversational way.


228
00:11:23,166 --> 00:11:26,246
I'm going to talk about how
your application will work


229
00:11:26,246 --> 00:11:28,926
with SiriKit to provide a great,
conversational experience.


230
00:11:29,576 --> 00:11:33,996
The first thing Siri does is
understand what the user said,


231
00:11:33,996 --> 00:11:36,036
taking audio and
turning it into text.


232
00:11:37,156 --> 00:11:39,916
Then, Siri understands what the
user means, taking that text


233
00:11:39,916 --> 00:11:41,996
and turning it into
what we call an intent.


234
00:11:43,366 --> 00:11:46,306
Based off that, on that
intent, Siri then takes action


235
00:11:47,166 --> 00:11:49,376
and provides responses,
both visual and verbal.


236
00:11:50,586 --> 00:11:52,386
Your application will
provide three things.


237
00:11:53,006 --> 00:11:55,546
The first is vocabulary to
aid in Siri's understanding.


238
00:11:55,846 --> 00:11:58,266
The second is your app logic,
your core functionality,


239
00:11:58,576 --> 00:12:00,616
and of course, a
great user interface.


240
00:12:01,716 --> 00:12:04,736
Now, we designed SiriKit so that
Siri handles the conversation


241
00:12:05,016 --> 00:12:06,776
and your application
handles the functionality.


242
00:12:07,306 --> 00:12:09,906
And what's great about that is
it means it's incredibly easy


243
00:12:09,906 --> 00:12:13,006
to adopt SiriKit and your
users can expect a consistent,


244
00:12:13,006 --> 00:12:14,776
high-quality experience
that's natural,


245
00:12:15,126 --> 00:12:17,426
feels like a conversation
and not like a command line.


246
00:12:18,416 --> 00:12:19,286
Let's dig in a bit.


247
00:12:20,336 --> 00:12:21,516
The first role of
your application is


248
00:12:21,516 --> 00:12:23,546
to provide vocabulary,
and there's two kinds.


249
00:12:24,096 --> 00:12:25,466
The first is app vocabulary.


250
00:12:25,836 --> 00:12:27,136
These are terms that
would be known


251
00:12:27,136 --> 00:12:28,566
to any user of your application.


252
00:12:28,826 --> 00:12:30,246
Things like UberX or Pinboard.


253
00:12:30,896 --> 00:12:32,866
The other is user vocabulary.


254
00:12:33,306 --> 00:12:35,396
These are terms that are
specific and important


255
00:12:35,396 --> 00:12:37,286
to an individual user
of your application.


256
00:12:37,596 --> 00:12:39,836
Things like their contact
names or names of photo albums.


257
00:12:41,546 --> 00:12:43,036
The main role of
your application is


258
00:12:43,036 --> 00:12:44,956
to provide your app
logic, and this comes


259
00:12:45,046 --> 00:12:46,676
in an extension at
three key moments.


260
00:12:47,406 --> 00:12:49,566
The first is to help Siri
understand the parameters


261
00:12:49,566 --> 00:12:50,306
of the user's intent.


262
00:12:50,796 --> 00:12:54,056
The second is to help Siri show
the user what will happen if


263
00:12:54,056 --> 00:12:55,196
and when they confirm
their intent.


264
00:12:55,536 --> 00:12:58,036
And the third is to actually
of course handle the intent,


265
00:12:58,426 --> 00:13:00,436
to accomplish what the
user came to accomplish.


266
00:13:01,956 --> 00:13:04,446
And during the conversation,
Siri presents visuals


267
00:13:04,446 --> 00:13:06,806
to the user, and you can
optionally provide a second


268
00:13:06,806 --> 00:13:09,066
extension to customize
these so that using Siri


269
00:13:09,066 --> 00:13:10,636
with your application
still feels


270
00:13:10,636 --> 00:13:12,126
like using your application
anywhere else.


271
00:13:13,716 --> 00:13:14,836
So let's take a look


272
00:13:14,836 --> 00:13:16,826
at a messaging app
integration called Hologram.


273
00:13:17,256 --> 00:13:19,706
Hologram is the number one
app for sending messages


274
00:13:19,706 --> 00:13:21,316
in a galaxy far, far away.


275
00:13:21,316 --> 00:13:26,286
So imagine someone says
to Siri, "Send a hologram


276
00:13:26,286 --> 00:13:28,246
to Obi-Wan saying,
you're my only hope."


277
00:13:29,646 --> 00:13:32,236
Now, it's Siri's job to
take that audio and turn it


278
00:13:32,236 --> 00:13:34,896
into text, but Siri needs
help from your application.


279
00:13:35,916 --> 00:13:37,296
Siri doesn't know on its own


280
00:13:37,296 --> 00:13:39,816
that Obi-Wan is an important
user or important person


281
00:13:39,816 --> 00:13:42,186
in your user's life, and
so by providing that piece


282
00:13:42,186 --> 00:13:43,946
of vocabulary to
Siri, you make sure


283
00:13:43,946 --> 00:13:45,596
that Siri understands
what your user said.


284
00:13:47,476 --> 00:13:50,206
Next, Siri works to understand
what the user is trying to do.


285
00:13:50,476 --> 00:13:52,466
In this case, send a
very important message.


286
00:13:53,496 --> 00:13:55,396
And Siri will also work
to understand parameters,


287
00:13:55,706 --> 00:13:57,286
like the recipient
and the content.


288
00:13:59,056 --> 00:14:00,386
Siri packages all
of this information


289
00:14:00,386 --> 00:14:03,396
into a structured object
a nice, simple object.


290
00:14:04,006 --> 00:14:05,326
Your application
doesn't have to worry


291
00:14:05,326 --> 00:14:07,996
about the countless ways someone
could express this same idea


292
00:14:07,996 --> 00:14:09,876
to Siri, whether it be
different phrasings,


293
00:14:10,056 --> 00:14:11,236
multi-step interactions.


294
00:14:11,476 --> 00:14:13,156
All of that's handled
and all you have to worry


295
00:14:13,156 --> 00:14:14,906
about is this really
simple object.


296
00:14:16,546 --> 00:14:19,116
SiriKit will then hand this
object to your extension to help


297
00:14:19,116 --> 00:14:20,416
with parameter resolution.


298
00:14:20,546 --> 00:14:22,326
For example, maybe
your application knows


299
00:14:22,326 --> 00:14:24,556
that the user said "Obi-Wan,"
but they usually refer


300
00:14:24,556 --> 00:14:25,716
to this person as
Old Ben Kenobi,


301
00:14:26,086 --> 00:14:27,986
and you can instruct
SiriKit to update the intent.


302
00:14:29,366 --> 00:14:30,766
Then comes the big event.


303
00:14:30,766 --> 00:14:32,646
It's time to actually
handle the user's intent,


304
00:14:33,036 --> 00:14:34,896
and SiriKit will
again hand this object


305
00:14:34,896 --> 00:14:36,346
to your extension
for processing.


306
00:14:36,486 --> 00:14:38,216
In this case, you're going to
send the message, you're going


307
00:14:38,216 --> 00:14:39,336
to get in an escape pod,


308
00:14:39,336 --> 00:14:41,056
roll over some sand dunes,
deal with some Jawas.


309
00:14:41,056 --> 00:14:43,056
You're going to get the
job done for your users.


310
00:14:44,736 --> 00:14:47,896
And along the way, Siri will
provide a default user interface


311
00:14:47,896 --> 00:14:49,146
for this interaction.


312
00:14:49,146 --> 00:14:52,066
And if you want, you can
also bring your application's


313
00:14:52,066 --> 00:14:54,506
experience into Siri so
that it feels more familiar


314
00:14:54,566 --> 00:14:55,266
to your users.


315
00:14:56,616 --> 00:14:57,616
And that's it.


316
00:14:57,616 --> 00:14:59,736
Those are the three things
that your application has to do


317
00:14:59,736 --> 00:15:01,566
because SiriKit handles
the conversation.


318
00:15:02,906 --> 00:15:04,986
And handling the conversation
actually means a lot.


319
00:15:05,296 --> 00:15:06,686
Siri's behavior is
different depending


320
00:15:06,686 --> 00:15:09,146
on how someone starts a
conversation with Siri.


321
00:15:09,486 --> 00:15:12,286
So if you're holding your
phone, pressing the Home button,


322
00:15:12,476 --> 00:15:13,276
looking at your screen,


323
00:15:13,736 --> 00:15:15,616
Siri will provide
more visual responses


324
00:15:15,716 --> 00:15:16,766
and say less things out loud.


325
00:15:17,186 --> 00:15:18,846
But if you say, "Hey,
Siri," or if you're


326
00:15:18,846 --> 00:15:20,896
in the car using
CarPlay, then Siri's going


327
00:15:20,896 --> 00:15:22,576
to show a lot more
and, or sorry,


328
00:15:22,856 --> 00:15:24,576
say a lot more and
show a lot less.


329
00:15:26,486 --> 00:15:29,856
SiriKit is powered by
extensions and NSUserActivity,


330
00:15:30,066 --> 00:15:32,006
the same technologies that
power an increasing number


331
00:15:32,006 --> 00:15:34,226
of OS integrations, and you'll
hear a lot about them this week.


332
00:15:36,246 --> 00:15:38,896
This year, SiriKit will connect
to applications in six domains,


333
00:15:38,896 --> 00:15:40,806
and in each of these
domains, there may be more


334
00:15:40,806 --> 00:15:42,506
than one intent to
provide a complete,


335
00:15:42,506 --> 00:15:43,596
conversational experience.


336
00:15:43,926 --> 00:15:46,256
For example, in Messaging,
you can send messages


337
00:15:46,256 --> 00:15:48,026
or search them, and in Payments,


338
00:15:48,026 --> 00:15:49,886
you can request payment
or send payment.


339
00:15:51,286 --> 00:15:54,086
And SiriKit will be available
in all Siri languages,


340
00:15:54,596 --> 00:15:57,136
and this is a big deal
because when I said earlier


341
00:15:57,136 --> 00:15:58,606
that Siri handles
the conversation,


342
00:15:59,006 --> 00:16:01,866
what I actually mean is Siri
handles the conversation


343
00:16:01,866 --> 00:16:05,526
in all 36 locales so that
your application doesn't have


344
00:16:05,526 --> 00:16:06,216
to worry about that.


345
00:16:08,516 --> 00:16:14,746
[ Applause ]


346
00:16:15,246 --> 00:16:17,686
We're so excited to
see what you'll build


347
00:16:17,686 --> 00:16:19,266
and so is someone else we know.


348
00:16:19,886 --> 00:16:21,446
Siri, say hello to apps.


349
00:16:23,856 --> 00:16:25,776
>> I'm swiftly becoming
friends with them.


350
00:16:27,486 --> 00:16:29,556
>> And on that note,
here is Chris Lattner


351
00:16:29,556 --> 00:16:30,606
to talk about Swift.


352
00:16:31,516 --> 00:16:40,076
[ Applause ]


353
00:16:40,576 --> 00:16:40,976
>> All right.


354
00:16:41,056 --> 00:16:42,116
Thanks, Robby.


355
00:16:42,906 --> 00:16:44,386
Let's dive in to
what's new with Swift?


356
00:16:45,026 --> 00:16:47,026
Now, it's easy to forget
that we launched Swift


357
00:16:47,546 --> 00:16:49,836
and released it less
than two years ago,


358
00:16:49,836 --> 00:16:53,296
and in that short time,
you've built and submitted


359
00:16:53,296 --> 00:16:56,066
to the App Store
over 100,000 apps,


360
00:16:56,876 --> 00:16:58,746
including well-known
titles like these.


361
00:16:59,696 --> 00:17:01,696
Now, Swift has also
been very popular


362
00:17:01,696 --> 00:17:02,636
with the enterprise as well.


363
00:17:02,636 --> 00:17:05,746
Just as a simple example,
IBM's already built


364
00:17:06,096 --> 00:17:08,586
and deployed hundreds of
apps written in Swift.


365
00:17:10,156 --> 00:17:10,425
Now--


366
00:17:11,516 --> 00:17:14,646
[ Applause ]


367
00:17:15,146 --> 00:17:16,715
Now, there's lots of reasons
that people love Swift,


368
00:17:16,715 --> 00:17:19,066
one of which is that
we open sourced it less


369
00:17:19,066 --> 00:17:20,546
than six months ago.


370
00:17:21,516 --> 00:17:28,546
[ Applause ]


371
00:17:29,046 --> 00:17:31,506
And in that time, it's become
the number one most downloaded


372
00:17:31,506 --> 00:17:35,026
language project on GitHub,
the number one most watched,


373
00:17:35,326 --> 00:17:37,046
and the number one
most favorited,


374
00:17:37,426 --> 00:17:38,866
and it's stayed on top.


375
00:17:39,326 --> 00:17:43,126
I think to me, even better than
this is that we've had a ton


376
00:17:43,126 --> 00:17:45,126
of new people get
involved with the project.


377
00:17:45,586 --> 00:17:48,386
We now have hundreds of new
contributors contributing


378
00:17:48,386 --> 00:17:50,846
through open source, and
we've processed thousands


379
00:17:50,846 --> 00:17:51,856
of poll requests.


380
00:17:51,956 --> 00:17:53,516
The response has
just been phenomenal.


381
00:17:54,966 --> 00:17:56,046
Now, one of the reasons


382
00:17:56,046 --> 00:17:58,696
that Swift being open is really
important to us is that we want


383
00:17:58,696 --> 00:17:59,826
to see it go everywhere.


384
00:18:00,656 --> 00:18:03,646
For example, we think that
Swift is awesome for the server,


385
00:18:03,946 --> 00:18:05,726
and so we ported it to Linux.


386
00:18:05,726 --> 00:18:07,876
And the community agrees.


387
00:18:08,726 --> 00:18:11,126
In a very short period of time,
they've started bringing it


388
00:18:11,126 --> 00:18:14,186
to other popular
platforms like FreeBSD,


389
00:18:14,186 --> 00:18:15,906
Android, and even Windows.


390
00:18:17,516 --> 00:18:23,566
[ Applause ]


391
00:18:24,066 --> 00:18:26,096
Now, to help Swift get to
all of these platforms,


392
00:18:26,406 --> 00:18:28,186
we started the Swift
Package Manager.


393
00:18:28,906 --> 00:18:31,656
The Package Manager's a
great way to build, share,


394
00:18:31,656 --> 00:18:33,816
and reuse cross-platform
packages.


395
00:18:34,886 --> 00:18:36,606
It can generate an
Xcode project file


396
00:18:36,786 --> 00:18:39,566
and even compile
projects natively


397
00:18:39,566 --> 00:18:40,896
on platforms like Linux.


398
00:18:42,126 --> 00:18:44,016
Another great thing about Swift
Open Source is you can get


399
00:18:44,016 --> 00:18:45,766
involved with the design
of the language itself.


400
00:18:46,686 --> 00:18:49,076
Swift-evolution has been
an amazing experience


401
00:18:49,536 --> 00:18:53,106
with intense interest in
a completely insane number


402
00:18:53,106 --> 00:18:54,526
of emails on mailing lists.


403
00:18:54,616 --> 00:18:55,306
It's ridiculous.


404
00:18:56,936 --> 00:18:59,146
Now, we published an open
roadmap with the goals


405
00:18:59,146 --> 00:19:02,196
for each release,
and we solicit ideas


406
00:19:02,196 --> 00:19:04,696
and discuss different
directions we could go


407
00:19:04,696 --> 00:19:06,686
to push the language
forward together.


408
00:19:07,656 --> 00:19:10,726
We then debate these
together openly as a community


409
00:19:10,966 --> 00:19:12,886
and we turn them into
formal proposals.


410
00:19:13,566 --> 00:19:17,266
So far, we've had over 100
proposals to move Swift forward.


411
00:19:18,336 --> 00:19:22,546
This is only in six months, and
this is just an amazing sign


412
00:19:22,546 --> 00:19:23,726
of how fast Swift moves.


413
00:19:23,726 --> 00:19:27,316
But it also shows another
important and interesting point.


414
00:19:27,536 --> 00:19:30,616
Despite its wide use, Swift
is still a relatively new


415
00:19:30,616 --> 00:19:31,426
programming language.


416
00:19:32,276 --> 00:19:34,666
Now, as you've seen
I think, we've chosen


417
00:19:34,666 --> 00:19:39,946
to quickly identify issues in
the Swift language and fix them


418
00:19:39,946 --> 00:19:42,486
because we don't want to be
stuck with issues forever.


419
00:19:43,606 --> 00:19:46,886
We are building Swift as the
next great programming language,


420
00:19:47,356 --> 00:19:50,226
and so we want it to be great
for the decades to come.


421
00:19:51,066 --> 00:19:52,976
And now the problem with this
is that for some developers,


422
00:19:52,976 --> 00:19:54,396
the programming language
changing


423
00:19:54,396 --> 00:19:58,946
out from underneath you can be
concerning, and as Swift goes


424
00:19:58,946 --> 00:20:02,386
to new platforms and new kinds
of users with Swift Playgrounds,


425
00:20:02,756 --> 00:20:04,626
this becomes an even
bigger concern.


426
00:20:06,046 --> 00:20:07,046
So with that as context,


427
00:20:07,396 --> 00:20:10,636
let's dive into what's
new with Swift 3.


428
00:20:10,926 --> 00:20:14,696
Swift 3. We announced
it in December as part


429
00:20:14,696 --> 00:20:17,006
of the open source
launch of Swift,


430
00:20:17,006 --> 00:20:19,256
and we've been developing
it completely in the open.


431
00:20:20,116 --> 00:20:23,506
The number one feature and the
number one goal of Swift 3 is


432
00:20:23,506 --> 00:20:27,396
to get these early growing
pains over with and turn Swift


433
00:20:27,396 --> 00:20:31,006
into a stable and mature base
that we can keep compatible


434
00:20:31,036 --> 00:20:32,356
with future versions
of the language.


435
00:20:34,236 --> 00:20:34,456
No?


436
00:20:35,516 --> 00:20:41,616
[ Applause ]


437
00:20:42,116 --> 00:20:44,146
So because of that, we're
focusing on the core essentials


438
00:20:44,176 --> 00:20:46,496
of the language and
making the tools


439
00:20:46,496 --> 00:20:48,056
and the development
experience really great.


440
00:20:48,426 --> 00:20:49,816
And there are a ton
of different ways


441
00:20:49,816 --> 00:20:51,016
that you can see this in Swift.


442
00:20:51,936 --> 00:20:54,946
To give you a simple
example, one common complaint


443
00:20:54,946 --> 00:20:58,036
about Swift 2 is that
the feel of some APIs


444
00:20:58,036 --> 00:21:00,036
in Cocoa didn't feel
natural in Swift.


445
00:21:00,446 --> 00:21:03,866
Swift loves clarity and it aims
to define away boilerplate.


446
00:21:04,736 --> 00:21:07,836
On Swift 3, Cocoa APIs
have an elegant feel.


447
00:21:08,146 --> 00:21:09,906
You could say they're
totally Swifty.


448
00:21:11,296 --> 00:21:13,986
Now, we did this with a number
of different initiatives.


449
00:21:14,606 --> 00:21:17,146
First, we sat down
and thought hard


450
00:21:17,146 --> 00:21:21,146
about what really makes a great
Swift API, and we wrote it


451
00:21:21,146 --> 00:21:24,086
down in a document that's
now available on Swift.org.


452
00:21:25,336 --> 00:21:28,266
We then took that and took
those rules and built them right


453
00:21:28,266 --> 00:21:31,436
into the Swift recompiler, so
it automatically applies them


454
00:21:31,556 --> 00:21:35,146
to Objective-C APIs as it
imports them into Swift.


455
00:21:36,366 --> 00:21:38,586
But Swift goes far
beyond just naming.


456
00:21:38,586 --> 00:21:39,856
Naming's a pretty
hard problem, though,


457
00:21:40,116 --> 00:21:41,446
but it goes beyond just naming.


458
00:21:41,446 --> 00:21:44,746
And if you look at
foundation as a simple example,


459
00:21:44,746 --> 00:21:47,586
you'll find entirely new
Swift native data types.


460
00:21:48,816 --> 00:21:51,176
Date is an example of this, and
if you compare Date to NSDate,


461
00:21:51,486 --> 00:21:54,156
you'll find that it provides
proper value semantics,


462
00:21:54,156 --> 00:21:56,786
it's about twice as
fast to pass around,


463
00:21:57,666 --> 00:22:00,006
and it's about 40 times
faster to change due


464
00:22:00,006 --> 00:22:01,576
to reduced MalCon
[phonetic] free traffic.


465
00:22:02,516 --> 00:22:09,046
[ Applause ]


466
00:22:09,546 --> 00:22:10,906
Now, there are examples
everywhere,


467
00:22:10,906 --> 00:22:12,836
and as Calendar becomes
Calendar,


468
00:22:12,836 --> 00:22:16,396
Global Constants become
scoped enums, Date Components,


469
00:22:16,506 --> 00:22:18,316
NSDate Components becomes
a proper value type,


470
00:22:18,316 --> 00:22:20,526
and everything is
just feeling so Swift.


471
00:22:21,246 --> 00:22:26,246
If you move beyond foundation,
Dispatch is another critical API


472
00:22:26,246 --> 00:22:27,736
that we work with
all of the time,


473
00:22:28,566 --> 00:22:30,956
but it provides this
low-level, C-style interface.


474
00:22:31,706 --> 00:22:34,406
With Swift 3, Dispatch has
gotten a major overhaul,


475
00:22:34,406 --> 00:22:35,986
has a beautiful object-oriented
API.


476
00:22:37,516 --> 00:22:44,546
[ Applause ]


477
00:22:45,046 --> 00:22:47,456
And it follows all the best
naming practices that you expect


478
00:22:47,536 --> 00:22:48,586
from a great Swift API.


479
00:22:49,446 --> 00:22:51,286
Core graphics is
another example of that.


480
00:22:51,726 --> 00:22:54,916
Here's some typical core
graphics code, and in Swift 3,


481
00:22:54,916 --> 00:22:58,426
it's elegant, beautiful, and
it works just like you expect.


482
00:22:59,516 --> 00:23:03,886
[ Applause ]


483
00:23:04,386 --> 00:23:06,666
Now, Swift 3 has a
ton of great features


484
00:23:06,666 --> 00:23:08,246
that you can learn
about all week long.


485
00:23:09,186 --> 00:23:11,296
Swift 3 is available in Xcode 8,


486
00:23:11,626 --> 00:23:14,216
and Xcode provides a
fantastic migration assistant


487
00:23:14,216 --> 00:23:17,666
to help move your code from
Swift 2 to Swift 3 syntax.


488
00:23:18,716 --> 00:23:22,596
Even better, Xcode 8
also includes Swift 2.3,


489
00:23:23,556 --> 00:23:25,836
which means that you can
move to Swift 3 syntax


490
00:23:25,986 --> 00:23:27,386
when the time is right for you.


491
00:23:28,516 --> 00:23:33,646
[ Applause ]


492
00:23:34,146 --> 00:23:35,566
So that's all I have
for you today.


493
00:23:35,926 --> 00:23:37,376
Thank you, and I'll hand
it back to Andreas to talk


494
00:23:37,376 --> 00:23:39,386
about the next big
thing, Swift on the iPad.


495
00:23:40,516 --> 00:23:44,556
[ Applause ]


496
00:23:45,056 --> 00:23:45,526
>> Thank you, Chris.


497
00:23:47,926 --> 00:23:50,596
So another aspect of Swift
that excites us is that it's


498
00:23:50,596 --> 00:23:53,246
so simple and so approachable
that it's not just great


499
00:23:53,246 --> 00:23:55,226
for implementing apps
and server components.


500
00:23:55,556 --> 00:23:59,166
It's also great as a first
program language to learn.


501
00:23:59,556 --> 00:24:01,306
In fact, we think this
is super important,


502
00:24:01,306 --> 00:24:02,356
and when we designed Swift,


503
00:24:02,516 --> 00:24:03,946
that's also an explicit
goal we had.


504
00:24:05,146 --> 00:24:06,366
And right from the
launch of Swift,


505
00:24:06,456 --> 00:24:09,486
we introduced Xcode Playgrounds,
an interactive environment


506
00:24:09,486 --> 00:24:11,306
where you can quickly
iterate on your code.


507
00:24:11,906 --> 00:24:12,636
And while it's great


508
00:24:12,636 --> 00:24:15,176
for experienced developers
using our Xcode IDE,


509
00:24:15,826 --> 00:24:17,936
and I want to dramatically
expand our focus


510
00:24:17,936 --> 00:24:20,656
and include kits for just
beginning to learn how to code.


511
00:24:21,116 --> 00:24:23,456
So today we are announcing
Swift Playgrounds,


512
00:24:23,486 --> 00:24:24,656
a new app for the iPad.


513
00:24:24,986 --> 00:24:26,986
You've already seen a demo
this morning with the keynote.


514
00:24:27,846 --> 00:24:30,776
It is paired with Xcode
technology, but it's made


515
00:24:30,776 --> 00:24:32,186
from the ground up for learning


516
00:24:32,186 --> 00:24:33,786
and teaching how
to program Swift.


517
00:24:34,316 --> 00:24:36,746
It's both playful and engaging
for the younger audience,


518
00:24:37,296 --> 00:24:39,786
and it's a fun way of
trying out new things


519
00:24:39,786 --> 00:24:41,126
for experienced developers.


520
00:24:42,216 --> 00:24:45,606
It is designed to work with the
touch interface of the iPad.


521
00:24:46,606 --> 00:24:48,566
We created a new Smart Keyboard


522
00:24:48,566 --> 00:24:50,746
that brings you quick type
suggestions for your code,


523
00:24:50,826 --> 00:24:52,666
similar to code completion
in Xcode.


524
00:24:53,246 --> 00:24:55,546
You often can write entire
lines of code without having


525
00:24:55,546 --> 00:24:56,846
to bring up a full keyboard.


526
00:24:58,466 --> 00:25:01,076
When you edit inline values
such as numbers and colors,


527
00:25:01,076 --> 00:25:03,226
we pop up these quick editing
controls that allow you


528
00:25:03,226 --> 00:25:05,726
to easily select a value,
again, without having


529
00:25:05,726 --> 00:25:06,896
to bring up a full keyboard.


530
00:25:08,646 --> 00:25:10,916
You can quickly change the
code in your Playground simply


531
00:25:10,916 --> 00:25:12,796
by dragging the structural
elements


532
00:25:12,796 --> 00:25:13,946
on the screen with your finger.


533
00:25:15,416 --> 00:25:17,096
And as you would
expect, there's a library


534
00:25:17,096 --> 00:25:19,886
of prebuilt code snippets you
can insert into your code simply


535
00:25:19,886 --> 00:25:22,366
with a tap or again by
dragging them with your finger.


536
00:25:23,886 --> 00:25:26,016
And for the times where you
do bring up a full keyboard


537
00:25:26,016 --> 00:25:27,326
to write some code,
we present you


538
00:25:27,326 --> 00:25:28,896
with a dedicated
coding keyboard,


539
00:25:29,246 --> 00:25:30,406
which makes it super easy


540
00:25:30,406 --> 00:25:32,916
to access the many special
characters and numbers


541
00:25:32,916 --> 00:25:34,416
that you need for
writing Swift code.


542
00:25:34,806 --> 00:25:37,086
Just with a swipe of a finger.


543
00:25:37,616 --> 00:25:39,386
No need to switch
keyboard planes.


544
00:25:41,366 --> 00:25:44,036
The app also ships the
fantastic lesson content.


545
00:25:45,226 --> 00:25:47,236
We're building an
entire series of lessons


546
00:25:47,236 --> 00:25:49,776
that will introduce you to
programming Swift step by step


547
00:25:49,946 --> 00:25:52,046
and we're planning to
rapidly expand this content


548
00:25:52,046 --> 00:25:55,006
over the course of the
next year, but you can go


549
00:25:55,006 --> 00:25:57,396
in to provide learners
with a steam of challenges


550
00:25:57,396 --> 00:25:58,976
that they're going
to update frequently.


551
00:25:58,976 --> 00:26:01,476
So they keep coming back
to the app and stay engaged


552
00:26:01,476 --> 00:26:04,546
with the learning process for
the number of deep dive topics.


553
00:26:05,976 --> 00:26:06,986
But you're not limited


554
00:26:07,416 --> 00:26:09,466
to following this
guided lesson content.


555
00:26:09,786 --> 00:26:12,636
You also have the power and the
flexibility to explore coding


556
00:26:12,636 --> 00:26:15,976
on your own with a set
of simple templates.


557
00:26:16,176 --> 00:26:18,876
We created one that makes it
easy to put together a program


558
00:26:18,876 --> 00:26:22,196
with just text input and output
and another one that allows you


559
00:26:22,196 --> 00:26:24,776
to explore and visualize
graphics concepts based


560
00:26:24,776 --> 00:26:25,396
on shapes.


561
00:26:26,836 --> 00:26:29,296
And beyond that, since you
have the entire iOS SDK


562
00:26:29,296 --> 00:26:31,186
at your fingertips, you're free


563
00:26:31,186 --> 00:26:32,986
to create pretty much
any Playground you'd like


564
00:26:33,056 --> 00:26:34,846
and use the app to
teach many topics.


565
00:26:34,846 --> 00:26:38,326
You can even control robots
like this one here on the screen


566
00:26:38,326 --> 00:26:40,146
and other accessories
from your Playground,


567
00:26:40,726 --> 00:26:42,016
so it ends up being
a lot of fun.


568
00:26:42,256 --> 00:26:43,486
And to just show you
a little bit more


569
00:26:43,486 --> 00:26:46,026
about how you can leverage the
app, I'm going to ask Ken Orr


570
00:26:46,026 --> 00:26:46,956
to give us another demo.


571
00:26:48,516 --> 00:26:54,216
[ Applause ]


572
00:26:54,716 --> 00:26:55,966
>> Right. Thanks, Andreas.


573
00:26:57,186 --> 00:27:01,336
Swift Playgrounds makes it easy
to get creative through code,


574
00:27:01,336 --> 00:27:03,206
so let's take a look
at a Playground


575
00:27:03,206 --> 00:27:05,896
that I created earlier and
I'll show you just what I mean.


576
00:27:06,626 --> 00:27:11,236
Now, I started here with
the Shapes template,


577
00:27:11,536 --> 00:27:14,036
and you can see the
beginnings of my picture


578
00:27:14,036 --> 00:27:14,946
over there on the right.


579
00:27:15,636 --> 00:27:17,836
So just some squares
of different sizes


580
00:27:17,836 --> 00:27:19,876
and colors rotated
around the center.


581
00:27:20,796 --> 00:27:24,236
Now, everything over on
the right is a product


582
00:27:24,236 --> 00:27:25,886
of my code on the left.


583
00:27:25,886 --> 00:27:30,576
At the heart of my code
over here is this for loop.


584
00:27:31,056 --> 00:27:33,496
That's where I create
each one of those squares.


585
00:27:34,306 --> 00:27:36,936
And then up at the very
top, I've got a variable


586
00:27:36,936 --> 00:27:39,906
that defines how many
squares I should create.


587
00:27:40,426 --> 00:27:44,266
Well, right now, that's set to
15, but I'd really like to get


588
00:27:44,266 --> 00:27:47,426
that entire right-hand side
to be filled up with color,


589
00:27:47,846 --> 00:27:50,736
so to do that, let me just
try bumping this up to 80,


590
00:27:51,736 --> 00:27:52,756
and then I'll tap Run.


591
00:27:54,116 --> 00:27:59,576
Nice. And I think maybe instead
of maroon, I'll use a nice blue.


592
00:28:01,316 --> 00:28:02,236
That looks good.


593
00:28:02,696 --> 00:28:05,456
And I really like the pattern
that I've got going on here


594
00:28:05,456 --> 00:28:07,286
where the squares,
they're kind of spiraling


595
00:28:07,286 --> 00:28:08,746
down into the center
of the Canvas.


596
00:28:09,096 --> 00:28:10,336
That looks really cool.


597
00:28:10,726 --> 00:28:12,896
I bet I could make
that even more obvious


598
00:28:13,156 --> 00:28:16,526
if I change the size of those
squares more dramatically


599
00:28:16,526 --> 00:28:17,176
over time.


600
00:28:17,786 --> 00:28:22,286
So back down in the for loop
here where I calculate the size,


601
00:28:22,756 --> 00:28:24,216
I'm going to tap on the plus


602
00:28:24,316 --> 00:28:26,066
between these two
different expressions.


603
00:28:27,206 --> 00:28:28,756
Rather than just
adding them together,


604
00:28:29,276 --> 00:28:30,536
why don't I try multiplication?


605
00:28:31,796 --> 00:28:34,356
Run that. That looks good.


606
00:28:35,166 --> 00:28:38,426
So you can start to get an
idea of just how easy it is


607
00:28:38,426 --> 00:28:42,486
to explore and experiment
with code using just a touch.


608
00:28:44,006 --> 00:28:46,296
So next, I'd like to
bring a little bit


609
00:28:46,296 --> 00:28:47,746
of life to my picture.


610
00:28:48,296 --> 00:28:51,086
I'll use some animation
for that.


611
00:28:51,296 --> 00:28:54,006
Now, to do that, I'm going
to use some API that's built


612
00:28:54,006 --> 00:28:55,406
in to the Shapes template,


613
00:28:56,606 --> 00:29:02,156
and I think what I want is I
want the squares to pop and spin


614
00:29:02,156 --> 00:29:03,826
in from the center
of the stream.


615
00:29:04,886 --> 00:29:08,436
So I'm going to tap right here
after I create each square,


616
00:29:08,876 --> 00:29:11,716
and then down in the shortcuts
bar, I'm going to scroll over


617
00:29:11,716 --> 00:29:13,736
and I'm going to tap on
the Animate function.


618
00:29:14,976 --> 00:29:18,316
So I'll have an animation
that's maybe three seconds long


619
00:29:18,316 --> 00:29:22,776
and I'll have it wait for just
one second before it starts,


620
00:29:23,356 --> 00:29:26,476
and then everything that I put
inside of that block there.


621
00:29:26,476 --> 00:29:30,296
It's going to be automatically
animated for me, so I'm going


622
00:29:30,296 --> 00:29:32,306
to pull in the rotation
like that.


623
00:29:32,566 --> 00:29:36,446
And then I also want the size
of the square to animate,


624
00:29:36,756 --> 00:29:40,776
so I think I'll start it out
at zero width and zero height,


625
00:29:41,566 --> 00:29:43,646
and then back in
the Animate block,


626
00:29:43,826 --> 00:29:45,236
I'll set it to what
it was before.


627
00:29:46,806 --> 00:29:51,816
So I'll say square.size
equals size,


628
00:29:52,496 --> 00:29:55,526
and then I already calculated
the size above, so I'll just use


629
00:29:55,526 --> 00:29:58,906
that same variable,
and I'll tap Run.


630
00:30:01,496 --> 00:30:01,856
Very cool.


631
00:30:01,856 --> 00:30:03,986
So it's starting
to come to life.


632
00:30:04,876 --> 00:30:06,016
Thank you.


633
00:30:07,516 --> 00:30:10,586
[ Applause ]


634
00:30:11,086 --> 00:30:13,106
And there's one more thing
that I'd like to do here.


635
00:30:13,646 --> 00:30:16,366
I'd like to add a little
bit of touch handling.


636
00:30:16,876 --> 00:30:19,386
And to do that, I'm going to
use some more API that's built


637
00:30:19,386 --> 00:30:20,606
into the Shapes template.


638
00:30:21,466 --> 00:30:22,816
And down here at the bottom,


639
00:30:22,816 --> 00:30:26,996
I've actually already added
a drag handler to the Canvas.


640
00:30:27,476 --> 00:30:30,186
The block's waiting
for me to fill it in,


641
00:30:30,186 --> 00:30:31,836
and I've also written
a function here


642
00:30:32,176 --> 00:30:35,146
that will rotate each square
around the center of the Canvas.


643
00:30:35,496 --> 00:30:38,596
So I just need to call that
function in this block here.


644
00:30:39,276 --> 00:30:40,636
So back in the shortcuts bar,


645
00:30:40,636 --> 00:30:44,736
I'm going to say
squares.rotateforTouches


646
00:30:44,736 --> 00:30:46,796
and then I'll tap Run.


647
00:30:48,556 --> 00:30:50,746
And now I'm going to
tap my finger and hold


648
00:30:50,746 --> 00:30:54,176
in the top right, and
I'm going to pull down,


649
00:30:54,846 --> 00:30:58,756
and just like that, I've
added Touch Handling.


650
00:30:59,376 --> 00:30:59,726
Thank you.


651
00:31:00,516 --> 00:31:03,686
[ Applause ]


652
00:31:04,186 --> 00:31:07,316
By the way, you may have
noticed that so far,


653
00:31:07,316 --> 00:31:10,856
I haven't actually needed the
full keyboard for any of this,


654
00:31:11,086 --> 00:31:12,286
and I think that's pretty cool.


655
00:31:13,696 --> 00:31:17,076
There's one more thing that I'd
like to show you this afternoon.


656
00:31:17,636 --> 00:31:18,456
So I'm a UI guy.


657
00:31:18,626 --> 00:31:21,646
I love building custom
controls and playful UI,


658
00:31:21,646 --> 00:31:23,796
and I've been tinkering


659
00:31:23,796 --> 00:31:26,296
around with this custom
color picker here.


660
00:31:26,546 --> 00:31:27,516
I'd love to show you that.


661
00:31:28,986 --> 00:31:32,966
So when you tap on the color
swatch, the Color Chooser pops


662
00:31:32,966 --> 00:31:35,436
out from underneath your
finger and you can drag around


663
00:31:35,756 --> 00:31:36,996
and pick the color you want.


664
00:31:37,896 --> 00:31:41,536
Now, all the code to build
that is over on the left.


665
00:31:42,546 --> 00:31:45,276
So let me make the code bigger
so we can take a quick look.


666
00:31:46,066 --> 00:31:48,266
Now, the first thing you'll
notice, up at the very top,


667
00:31:49,066 --> 00:31:54,106
I'm importing UIKit, so I
have access to the iOS SDK


668
00:31:54,106 --> 00:31:58,106
in this Playground and in
any Playground that I create.


669
00:31:59,276 --> 00:32:01,286
And then all the way
down at the bottom here,


670
00:32:02,036 --> 00:32:05,286
this is where I tell Swift
Playgrounds to take my view


671
00:32:05,286 --> 00:32:07,636
and show it over on
the right-hand side.


672
00:32:09,846 --> 00:32:11,946
There's one last thing
that I'd like to add


673
00:32:12,006 --> 00:32:15,206
to my Playground here, and
that's I want to add something


674
00:32:15,206 --> 00:32:16,936
that I can set the color of so


675
00:32:16,936 --> 00:32:18,876
that I can try out
my Color Chooser.


676
00:32:19,896 --> 00:32:22,886
So I think to do that, I'll
just add a simple UI Image View,


677
00:32:23,256 --> 00:32:26,656
so let me bring up the coding
keyboard, and I'm going to say,


678
00:32:27,086 --> 00:32:34,936
"Let image view equal
UI Image View."


679
00:32:34,936 --> 00:32:38,166
And I'm going to use the
initializer that takes an image,


680
00:32:38,486 --> 00:32:40,686
and then I'm going to
tap on the third item


681
00:32:40,686 --> 00:32:42,546
in the shortcut bar,
that little picture.


682
00:32:43,306 --> 00:32:44,576
That's an image literal.


683
00:32:44,816 --> 00:32:47,866
So when I tap on it in my
source code, I can choose


684
00:32:48,296 --> 00:32:50,636
from resources that have been
added to this Playground.


685
00:32:51,516 --> 00:32:55,906
[ Applause ]


686
00:32:56,406 --> 00:32:58,046
So I added the Swift
bird earlier,


687
00:32:58,086 --> 00:32:59,326
so I'm going to choose that.


688
00:33:01,256 --> 00:33:04,656
And then last thing I need to
do here, I need to get you,


689
00:33:04,656 --> 00:33:07,356
the UI Image View into
the view hierarchy,


690
00:33:07,856 --> 00:33:16,176
so I'll just say
viewController.view.addSubview,


691
00:33:17,046 --> 00:33:18,816
toss in the image view.


692
00:33:19,196 --> 00:33:22,466
We'll run that, then I'm going
to make the view full screen.


693
00:33:23,226 --> 00:33:25,386
And know we can see
I've got my image,


694
00:33:26,366 --> 00:33:28,976
I've got our color picker,
and I actually snuck


695
00:33:29,086 --> 00:33:30,766
in one little other
feature here.


696
00:33:30,956 --> 00:33:33,156
I want it to be a little
bit more fun, set the color


697
00:33:33,156 --> 00:33:36,926
of the bird, figured hey,
why not do it that way?


698
00:33:37,516 --> 00:33:42,756
[ Applause ]


699
00:33:43,256 --> 00:33:44,776
And that's Swift Playgrounds.


700
00:33:45,076 --> 00:33:45,346
Thank you.


701
00:33:45,826 --> 00:33:46,326
Andreas?


702
00:33:47,516 --> 00:33:51,726
[ Applause ]


703
00:33:52,226 --> 00:33:53,886
>> Thank you, Ken.


704
00:33:57,626 --> 00:34:01,076
So as you saw, no matter what
kind of Playground you create,


705
00:34:01,846 --> 00:34:05,866
you always do so by
leveraging the actual iOS SDK,


706
00:34:05,986 --> 00:34:09,136
including the APIs that give you
access to the device's hardware.


707
00:34:09,576 --> 00:34:11,196
And by writing real Swift code,


708
00:34:11,396 --> 00:34:13,166
this is perhaps the
biggest differentiator


709
00:34:13,426 --> 00:34:15,896
to other learning apps that
often use a limited approach


710
00:34:15,896 --> 00:34:17,326
that users quickly outgrow.


711
00:34:17,686 --> 00:34:19,646
In Swift Playgrounds,
you'll always learn how


712
00:34:19,646 --> 00:34:20,815
to write real Swift code.


713
00:34:21,596 --> 00:34:22,696
And by the way, as a side note,


714
00:34:22,696 --> 00:34:25,176
the entire Playgrounds app
itself is also written in Swift.


715
00:34:27,516 --> 00:34:32,016
[ Applause ]


716
00:34:32,516 --> 00:34:34,996
So Swift Playgrounds offers
you many ways to experiment


717
00:34:35,116 --> 00:34:38,806
and to teach and to learn how to
code, and we are very passionate


718
00:34:38,876 --> 00:34:41,485
about letting as many users
as possible, especially kids,


719
00:34:41,966 --> 00:34:43,835
take advantage of
this new opportunity.


720
00:34:43,906 --> 00:34:47,206
And in fact, we hope that you
will help us create an entire


721
00:34:47,335 --> 00:34:50,106
platform for learning by
creating additional content.


722
00:34:50,545 --> 00:34:53,505
And to get you started, we're
going to make documentation


723
00:34:53,505 --> 00:34:56,406
on our Playground's file format
available on our website today.


724
00:34:57,065 --> 00:34:58,646
And later this year,
we are planning


725
00:34:58,646 --> 00:35:00,296
to publish our lesson materials,


726
00:35:00,296 --> 00:35:03,416
including the rich 3D
Puzzle World under a license


727
00:35:03,416 --> 00:35:06,616
that will let you copy
and reuse our materials.


728
00:35:06,616 --> 00:35:07,966
Incorporate your own ideas,


729
00:35:07,966 --> 00:35:10,386
and help us reach many
audiences around the world.


730
00:35:13,106 --> 00:35:14,896
So once a user has
created a Playground,


731
00:35:15,276 --> 00:35:17,596
there's numerous ways
for sharing the results.


732
00:35:18,146 --> 00:35:20,136
Playgrounds are simply
documents so you can share them


733
00:35:20,136 --> 00:35:21,886
in all the usual ways
that you're familiar with.


734
00:35:22,206 --> 00:35:23,266
And we didn't stop there.


735
00:35:23,946 --> 00:35:25,416
We made it easier
to take pictures


736
00:35:25,416 --> 00:35:28,466
of your program's output and
even incorporated replay kits


737
00:35:28,466 --> 00:35:30,206
so that you can record
a coding session


738
00:35:30,426 --> 00:35:32,056
and publish your
work as a video.


739
00:35:33,456 --> 00:35:33,846
And for--


740
00:35:34,516 --> 00:35:40,066
[ Applause ]


741
00:35:40,566 --> 00:35:42,966
And for more advanced learners,
the Swift Playgrounds app


742
00:35:42,966 --> 00:35:46,326
on the iPad and Xcode on the Mac
complement each other nicely.


743
00:35:46,876 --> 00:35:48,406
You can move Playgrounds
back and forth


744
00:35:48,406 --> 00:35:50,746
between the two environments
that eventually transition


745
00:35:50,746 --> 00:35:52,866
into developing full
apps in the Xcode IDE.


746
00:35:54,246 --> 00:35:55,936
And so that brings us
nicely to the next topic.


747
00:35:56,516 --> 00:35:59,576
[ Applause ]


748
00:36:00,076 --> 00:36:01,536
To tell you more about
Xcode, I'm going to hand


749
00:36:01,536 --> 00:36:02,456
over to Matthew Furlich
[assumed spelling].


750
00:36:03,516 --> 00:36:08,546
[ Applause ]


751
00:36:09,046 --> 00:36:09,516
>> Thank you, Andreas.


752
00:36:10,376 --> 00:36:13,386
Xcode 8 is a big release
with much to talk about,


753
00:36:13,516 --> 00:36:15,816
so let's just jump right
in and start talking


754
00:36:15,816 --> 00:36:16,726
about our Source Editor.


755
00:36:17,406 --> 00:36:18,776
For this release, we focused


756
00:36:18,776 --> 00:36:20,926
on adding the most
highly requested features


757
00:36:21,356 --> 00:36:21,826
from all of you.


758
00:36:23,386 --> 00:36:25,446
We started by adding in
active line highlighting,


759
00:36:25,966 --> 00:36:28,206
and you can edit this color.


760
00:36:28,206 --> 00:36:29,726
It'd work beautifully
with any Editor theme.


761
00:36:30,516 --> 00:36:33,916
[ Applause ]


762
00:36:34,416 --> 00:36:34,906
It gets better [laughter].


763
00:36:37,066 --> 00:36:39,176
We also did a support
for Swift color literals


764
00:36:39,176 --> 00:36:42,946
so you can now view and define
colors right in your source.


765
00:36:43,516 --> 00:36:48,646
[ Applause ]


766
00:36:49,146 --> 00:36:49,606
Let's go for three.


767
00:36:49,606 --> 00:36:52,516
We added in Swift image literals
too so you can now view images


768
00:36:52,516 --> 00:36:57,076
in your source and as
results for code completion.


769
00:36:57,076 --> 00:37:02,046
And to help you write better
documentation, the editor has,


770
00:37:02,176 --> 00:37:04,286
now has a command
to generate mark-up


771
00:37:04,286 --> 00:37:05,376
for documenting your APIs.


772
00:37:06,516 --> 00:37:11,706
[ Applause ]


773
00:37:12,206 --> 00:37:13,566
So these features and a number


774
00:37:13,566 --> 00:37:16,616
of usability improvements really
make Xcode's editing experience


775
00:37:16,826 --> 00:37:19,486
awesome, but we didn't
want to stop there,


776
00:37:19,826 --> 00:37:21,786
so we've added one more
feature, and it turns


777
00:37:21,786 --> 00:37:23,686
out to be your number
one request.


778
00:37:25,436 --> 00:37:26,976
App extensions.


779
00:37:27,516 --> 00:37:33,706
[ Applause ]


780
00:37:34,206 --> 00:37:36,116
With Xcode 8, we are
opening up the IDE.


781
00:37:37,716 --> 00:37:38,886
We're starting with
source editing.


782
00:37:39,656 --> 00:37:41,726
This extension works
with the active editor


783
00:37:41,836 --> 00:37:44,276
to enable transformations,
changes in selection,


784
00:37:44,486 --> 00:37:45,876
and navigation within the file.


785
00:37:46,506 --> 00:37:49,596
And this opens up worlds of
opportunities for commands


786
00:37:49,696 --> 00:37:51,736
such as reformatting,
commenting,


787
00:37:51,976 --> 00:37:54,006
localizations, even to-do items.


788
00:37:54,916 --> 00:37:57,536
Now, you can implement many
actions in each extension,


789
00:37:58,056 --> 00:38:00,796
and each action is listed
as part of the Editor menu.


790
00:38:01,986 --> 00:38:05,346
Users can set key buttons for
these actions too to enable them


791
00:38:05,346 --> 00:38:06,276
as part of their workforce.


792
00:38:08,916 --> 00:38:10,876
Now, as developers
of extensions--


793
00:38:11,516 --> 00:38:15,096
[ Applause ]


794
00:38:15,596 --> 00:38:17,226
As developers of
extensions, you can ship them


795
00:38:17,226 --> 00:38:19,576
through the App Store or
deploy with Developer ID,


796
00:38:19,976 --> 00:38:21,916
and these extensions
work in Xcode 8


797
00:38:21,916 --> 00:38:23,826
on both Sierra and El Capitan.


798
00:38:25,516 --> 00:38:29,046
[ Applause ]


799
00:38:29,546 --> 00:38:32,396
Now, as a standard extension,
users can feel safe too.


800
00:38:33,086 --> 00:38:34,986
These extensions are run
as a separate process


801
00:38:35,076 --> 00:38:36,936
and have their signatures
verified.


802
00:38:37,636 --> 00:38:40,446
And to further reinforce
safety, Xcode is now secured


803
00:38:40,446 --> 00:38:42,186
by system integrity protection.


804
00:38:42,676 --> 00:38:44,266
Which means only
trusted libraries


805
00:38:44,336 --> 00:38:47,706
and extensions can interact
with the IDE and your code.


806
00:38:49,576 --> 00:38:52,726
So the new source editing
extension is our first step


807
00:38:52,896 --> 00:38:55,526
towards making Xcode an
even more extensible IDE.


808
00:38:56,346 --> 00:38:57,936
We'd love to hear
your feedback on it


809
00:38:58,016 --> 00:39:01,296
and other extensions
you'd like to see.


810
00:39:01,426 --> 00:39:03,036
Now, we've also been
working on some improvements


811
00:39:03,036 --> 00:39:05,396
to that way you learn
about code, and for that,


812
00:39:05,396 --> 00:39:07,946
we have a brand new API
reference experience.


813
00:39:10,206 --> 00:39:12,316
We've merged together
the API documentation


814
00:39:12,316 --> 00:39:15,806
for our four platforms into
a single, unified reference.


815
00:39:16,996 --> 00:39:19,616
Now, this reference
makes navigation easy,


816
00:39:19,986 --> 00:39:21,536
working through frameworks
and symbols.


817
00:39:22,766 --> 00:39:25,266
Now, searching the unified
reference means you see a single


818
00:39:25,266 --> 00:39:28,616
result for each API and we've
integrated the same fuzzy


819
00:39:28,616 --> 00:39:31,276
matching we use for code
completion and open quickly.


820
00:39:32,996 --> 00:39:33,876
When browsing the reference,


821
00:39:34,136 --> 00:39:37,316
the platform availabilities are
clearly listed for each API.


822
00:39:38,636 --> 00:39:40,696
And in previous releases,
we ship this


823
00:39:40,696 --> 00:39:42,906
as a separate download
because of its size.


824
00:39:43,666 --> 00:39:45,236
With this release, we've
been able to shrink it


825
00:39:45,236 --> 00:39:47,526
to almost one-tenth to
what it was previously,


826
00:39:47,796 --> 00:39:49,146
so now we've included
it by default,


827
00:39:49,146 --> 00:39:51,066
so you'll always have
the information you need.


828
00:39:52,516 --> 00:39:58,136
[ Applause ]


829
00:39:58,636 --> 00:40:00,496
Now, we also have some
great, new improvements


830
00:40:00,556 --> 00:40:01,986
to Interface Builder, and I'd


831
00:40:01,986 --> 00:40:03,416
like to show them
to you in a demo.


832
00:40:11,056 --> 00:40:12,826
So here we have a project.


833
00:40:12,826 --> 00:40:14,336
We're calling this Trailblazer.


834
00:40:14,586 --> 00:40:15,956
It's a social application


835
00:40:15,956 --> 00:40:17,506
for sharing your
favorite hiking trails.


836
00:40:18,806 --> 00:40:22,076
Now, in addition to the way
that your interface is laid out,


837
00:40:22,266 --> 00:40:24,536
you'll now notice that Interface
Builder is showing you the way


838
00:40:24,536 --> 00:40:26,286
it's going to render
on a device.


839
00:40:27,036 --> 00:40:29,876
Interface Builder now shows you
visual effects like vibrancy,


840
00:40:29,876 --> 00:40:32,206
blurs, and shadows
right on the Canvas,


841
00:40:32,726 --> 00:40:37,036
making a seamless experience for
designing and running your app.


842
00:40:37,276 --> 00:40:39,156
You'll also notice that we're
displaying the interface


843
00:40:39,156 --> 00:40:40,516
in the dimensions of a device,


844
00:40:41,196 --> 00:40:43,316
and there's a new configuration
bar along the bottom


845
00:40:43,506 --> 00:40:44,656
with common device sizes.


846
00:40:45,856 --> 00:40:48,486
Here we're looking at
it in an iPhone 6s Plus.


847
00:40:48,486 --> 00:40:52,326
I can select one of the other
items, like let me click on one


848
00:40:52,326 --> 00:40:54,876
of the iPads, and I can see
how my interface will be


849
00:40:54,876 --> 00:40:55,886
displayed there.


850
00:40:56,516 --> 00:41:02,846
[ Applause ]


851
00:41:03,346 --> 00:41:05,826
Here you see we've designed
an adaptive layout using two


852
00:41:05,826 --> 00:41:06,886
columns on iPad.


853
00:41:08,496 --> 00:41:11,376
To view it in other ways, I can
change the orientation if I want


854
00:41:11,376 --> 00:41:12,346
to view it in landscape.


855
00:41:12,756 --> 00:41:14,866
I can also view it in
one of the adaptations.


856
00:41:15,166 --> 00:41:18,026
For example, let's look at it
in one-third size, which is used


857
00:41:18,026 --> 00:41:20,126
for slide over as
for multitasking.


858
00:41:21,226 --> 00:41:22,796
This is great because
it really allows me


859
00:41:22,796 --> 00:41:24,976
to ensure I've implemented
the right interface


860
00:41:25,236 --> 00:41:29,166
for all the ways users
will experience my app.


861
00:41:29,356 --> 00:41:30,896
Now, we've also improved
the experience


862
00:41:30,896 --> 00:41:33,686
for creating adaptive
layouts using size classes.


863
00:41:33,686 --> 00:41:35,066
Let me give you an example.


864
00:41:36,306 --> 00:41:39,256
The designers of this app wanted
to put an image, a button on top


865
00:41:39,256 --> 00:41:42,056
of the image to show the hiking
trails overlaid on a map.


866
00:41:42,826 --> 00:41:44,816
But because of the size
of the map, they only want


867
00:41:44,816 --> 00:41:45,986
to do it on wider displays.


868
00:41:47,016 --> 00:41:47,566
That's really easy.


869
00:41:47,566 --> 00:41:51,576
In the configuration bar, I'll
click the Vary for Traits button


870
00:41:51,866 --> 00:41:53,856
and I'm presented with the
two size class options,


871
00:41:54,156 --> 00:41:56,236
Width and height.


872
00:41:56,236 --> 00:41:58,776
iPhones and iPads differ
on the width size class,


873
00:41:59,096 --> 00:42:00,016
so I'll check that option.


874
00:42:01,496 --> 00:42:03,666
The configuration bar
turns blue to remind me


875
00:42:03,666 --> 00:42:06,576
that I'm making customizations
for a specific size class.


876
00:42:07,576 --> 00:42:10,196
But you'll also note the
list of devices have changed


877
00:42:10,396 --> 00:42:12,956
to show me those devices
which will take advantage


878
00:42:13,156 --> 00:42:14,246
of that customization.


879
00:42:15,046 --> 00:42:18,436
Here I can see various iPads and
orientations and adaptations.


880
00:42:19,196 --> 00:42:22,736
The last item, though, is the
iPhone 6s Plus in landscape.


881
00:42:23,596 --> 00:42:25,676
That device and orientation
makes use


882
00:42:25,726 --> 00:42:28,986
of the regular width size class,
and this is great information


883
00:42:28,986 --> 00:42:31,296
because now I can ensure
I'm designing the interface


884
00:42:31,296 --> 00:42:32,366
for the devices I intend.


885
00:42:33,676 --> 00:42:36,366
I think our interface will look
great there, so let's go ahead


886
00:42:36,366 --> 00:42:37,316
and make those changes.


887
00:42:37,316 --> 00:42:40,426
I'll go into the library
and we'll grab a button out


888
00:42:40,856 --> 00:42:42,336
and drag it into the interface.


889
00:42:43,406 --> 00:42:44,936
If your hands weren't so sweaty,


890
00:42:44,936 --> 00:42:45,776
you could grab the
button [laughter].


891
00:42:48,066 --> 00:42:49,976
Come on.


892
00:42:53,306 --> 00:42:54,426
Nobody look for a second.


893
00:43:00,216 --> 00:43:02,000
This is not going to
be funny in a second.


894
00:43:08,516 --> 00:43:13,766
[ Applause ]


895
00:43:14,266 --> 00:43:15,966
There we go.


896
00:43:16,516 --> 00:43:23,886
[ Applause ]


897
00:43:24,386 --> 00:43:25,976
That should not be
the biggest applause.


898
00:43:26,026 --> 00:43:26,316
Okay [laughter].


899
00:43:27,936 --> 00:43:29,346
So let's continue on.


900
00:43:29,346 --> 00:43:31,986
I'm going to delete the title
from this, and we'll go ahead


901
00:43:31,986 --> 00:43:33,676
and set an image for it.


902
00:43:33,676 --> 00:43:35,706
We'll make it this nice
compass icon we're given


903
00:43:36,206 --> 00:43:37,826
and we'll just place
it correctly.


904
00:43:38,236 --> 00:43:40,826
Now, I will connect up this
button a little bit later,


905
00:43:40,826 --> 00:43:43,176
but let's make sure we got
the interface we wanted.


906
00:43:43,576 --> 00:43:45,626
I'll click Done in
the configuration bar


907
00:43:46,036 --> 00:43:49,616
and we'll switch back to the
iPhone 6s Plus in landscape.


908
00:43:49,726 --> 00:43:50,596
Our button appears.


909
00:43:50,886 --> 00:43:53,906
When I switch back to
portrait, it does not,


910
00:43:54,146 --> 00:43:55,856
and that's exactly the
interface I wanted.


911
00:43:56,496 --> 00:43:58,456
So Interface Builder
now makes it really easy


912
00:43:58,456 --> 00:44:00,076
to design adaptive layouts.


913
00:44:01,226 --> 00:44:02,776
The configuration bar is going


914
00:44:02,776 --> 00:44:05,396
to show devices for
iOS and watchOS.


915
00:44:06,136 --> 00:44:08,026
It also shows some
helpful options for tvOS.


916
00:44:08,996 --> 00:44:11,486
I'll bring up the tvOS
version of our application,


917
00:44:11,796 --> 00:44:14,256
and you'll see the configuration
bar now shows you options


918
00:44:14,306 --> 00:44:17,936
for the light interface
and the dark interface.


919
00:44:18,586 --> 00:44:20,556
And I can even make
customizations here too.


920
00:44:20,556 --> 00:44:22,536
For example, let's
add a specialization


921
00:44:22,536 --> 00:44:25,476
of the compass icon for
dark mode so that it pops


922
00:44:25,476 --> 00:44:26,146
out a little bit better.


923
00:44:28,016 --> 00:44:29,066
Now, there's one more feature


924
00:44:29,066 --> 00:44:30,596
for Interface Builder
I'd like to show you.


925
00:44:32,066 --> 00:44:34,356
You'll see that the tvOS
Storyboard is zoomed


926
00:44:34,356 --> 00:44:36,596
out so it fits on the
entirety of the Canvas.


927
00:44:37,676 --> 00:44:40,036
Interface Builder now
supports Canvas operations


928
00:44:40,036 --> 00:44:41,596
at any zoom level.


929
00:44:42,516 --> 00:44:49,206
[ Applause ]


930
00:44:49,706 --> 00:44:51,506
So whether you want to
zoom all the way in,


931
00:44:51,506 --> 00:44:54,756
get pixel perfect alignments,
or you want to zoom way back out


932
00:44:54,756 --> 00:44:56,926
and work at an overview,
you can do it all.


933
00:44:58,516 --> 00:45:02,576
[ Applause ]


934
00:45:03,076 --> 00:45:04,906
And that's what we have
new for Interface Builder.


935
00:45:06,516 --> 00:45:14,926
[ Applause ]


936
00:45:15,426 --> 00:45:16,006
Thank you.


937
00:45:16,006 --> 00:45:18,876
Designing in Interface Builder
now feels like working directly


938
00:45:18,876 --> 00:45:20,356
on a device, and editing


939
00:45:20,356 --> 00:45:23,326
at any zoom level means you're
no longer constrained by how big


940
00:45:23,576 --> 00:45:25,676
or small those devices
really are.


941
00:45:28,066 --> 00:45:30,576
For this release, we've also
focused on the accessibility


942
00:45:30,656 --> 00:45:32,466
of our tools, and in particular,


943
00:45:32,466 --> 00:45:35,376
we've made Interface Builder
work great with voiceover.


944
00:45:36,246 --> 00:45:38,736
We've also completely rewritten
our AppleScript Dictionary,


945
00:45:38,806 --> 00:45:40,576
making Xcode much
easier to integrate


946
00:45:40,576 --> 00:45:41,976
with desktop automation.


947
00:45:43,516 --> 00:45:48,096
[ Applause ]


948
00:45:48,596 --> 00:45:51,406
Now, with each release, we add
additional support for finding,


949
00:45:51,686 --> 00:45:53,556
diagnosing, and fixing issues.


950
00:45:53,916 --> 00:45:56,796
And with Xcode 8, we are taking
another big step forward.


951
00:45:58,256 --> 00:46:01,606
Over the last year, we've
added over 100 new diagnostics,


952
00:46:01,866 --> 00:46:03,716
which provide great
insight as you build


953
00:46:03,916 --> 00:46:05,756
and as you edit your
code with live issues.


954
00:46:07,126 --> 00:46:10,046
We've added three new static
analyzers for localization,


955
00:46:10,246 --> 00:46:11,956
malleability, and deallocation.


956
00:46:12,276 --> 00:46:14,936
All common patterns that can
cause issues in your apps.


957
00:46:16,366 --> 00:46:18,786
And we've continued to
invest in our testing system,


958
00:46:19,116 --> 00:46:21,066
improving stability,
performance,


959
00:46:21,546 --> 00:46:22,606
and adding some new options.


960
00:46:24,756 --> 00:46:28,106
Xcode will now capture and
display logs for crashes


961
00:46:28,526 --> 00:46:29,826
that occur during your testing.


962
00:46:31,516 --> 00:46:35,546
[ Applause ]


963
00:46:36,046 --> 00:46:37,656
This is a great option
because you can run your tests,


964
00:46:38,006 --> 00:46:40,516
collect those logs, and
just like crash logs,


965
00:46:40,516 --> 00:46:43,286
you can view them right in the
debugger to diagnose the issues.


966
00:46:44,566 --> 00:46:46,806
We've also enhanced
xcodebuild with a new option


967
00:46:46,806 --> 00:46:48,306
to run prebuilt tests.


968
00:46:50,516 --> 00:46:54,546
[ Applause ]


969
00:46:55,046 --> 00:46:55,646
Woo hoo, indeed.


970
00:46:55,646 --> 00:46:58,656
It means this is perfect for
integrating scalable testing


971
00:46:58,746 --> 00:47:00,336
with your own continuous
integration.


972
00:47:02,816 --> 00:47:05,216
So now more than ever, Xcode
will help you with issues


973
00:47:05,216 --> 00:47:08,176
as you build, analyze,
and test your apps.


974
00:47:08,706 --> 00:47:10,866
But oftentimes some of
the most interesting,


975
00:47:10,866 --> 00:47:13,726
if not let's say
diabolical, issues happen


976
00:47:13,726 --> 00:47:14,896
when you run your code.


977
00:47:15,676 --> 00:47:18,176
For that, we're introducing
something new called


978
00:47:18,176 --> 00:47:19,096
Runtime Issues.


979
00:47:20,516 --> 00:47:24,196
[ Applause ]


980
00:47:24,696 --> 00:47:26,226
Runtime Issues are
like our others.


981
00:47:26,386 --> 00:47:28,306
You're alerted to them
in the Activity view,


982
00:47:28,576 --> 00:47:31,076
and you'll see details about
them in the Issue Navigator.


983
00:47:31,746 --> 00:47:34,896
We've added a toggle at
the top to highlight them.


984
00:47:35,076 --> 00:47:37,636
Now, there are three
kinds of runtime issues;


985
00:47:38,116 --> 00:47:40,176
UI, threads, and memory.


986
00:47:41,026 --> 00:47:41,726
Let's start with UI.


987
00:47:43,466 --> 00:47:46,436
The View Debugger is already
a great tool for visualizing


988
00:47:46,436 --> 00:47:49,106
and diagnosing problems
with your interface.


989
00:47:50,216 --> 00:47:52,736
In addition to improved
accuracy and visual rendering,


990
00:47:53,066 --> 00:47:56,176
the View Debugger will now
detect layout issues at runtime.


991
00:47:58,976 --> 00:48:02,206
With each capture, the View
Debugger is able to detect views


992
00:48:02,206 --> 00:48:04,966
with ambiguous layouts, and
these are caused by missing


993
00:48:04,966 --> 00:48:06,386
and misconfigured constraints.


994
00:48:07,516 --> 00:48:12,206
[ Applause ]


995
00:48:12,706 --> 00:48:14,786
These issues are surfaced
right in the Navigator


996
00:48:14,786 --> 00:48:17,626
and the Inspector provides
details to help you fix them.


997
00:48:19,276 --> 00:48:21,906
Now, threading issues
are often unpredictable


998
00:48:21,906 --> 00:48:23,486
and can be difficult to debug,


999
00:48:23,486 --> 00:48:25,566
and there are many
potential causes.


1000
00:48:25,816 --> 00:48:28,956
Things like unlocking from the
wrong thread or data races.


1001
00:48:28,956 --> 00:48:32,436
To help you track down
these kinds of issues,


1002
00:48:32,676 --> 00:48:35,626
we're integrating Thread
Sanitizer into Xcode 8.


1003
00:48:36,946 --> 00:48:38,266
When enabled for
you application,


1004
00:48:38,436 --> 00:48:41,896
the Thread Sanitizer is able to
detect common threading problems


1005
00:48:42,296 --> 00:48:44,106
and will surface them
as runtime issues.


1006
00:48:45,146 --> 00:48:47,466
You can have Xcode break on
these issues as they occur


1007
00:48:47,686 --> 00:48:49,686
or you can collect them
all and review them


1008
00:48:49,686 --> 00:48:50,436
at the end of your session.


1009
00:48:51,446 --> 00:48:53,556
And the integrated report
provides a breakdown


1010
00:48:53,556 --> 00:48:55,526
of these issues,
giving you details


1011
00:48:55,526 --> 00:48:56,746
about any race conditions


1012
00:48:57,056 --> 00:48:58,866
and giving you stack
frames to help you navigate.


1013
00:49:00,926 --> 00:49:02,046
Like -- yes.


1014
00:49:03,516 --> 00:49:06,776
[ Applause ]


1015
00:49:07,276 --> 00:49:08,286
Now, like threading,


1016
00:49:08,386 --> 00:49:11,856
memory issues are often
challenging to identify and fix.


1017
00:49:12,536 --> 00:49:15,726
And to debug them effectively,
you often want to view a graph


1018
00:49:15,726 --> 00:49:18,016
of your objects and see how
they're all interconnected,


1019
00:49:19,496 --> 00:49:20,306
so that's what we
built [laughter].


1020
00:49:22,436 --> 00:49:25,116
New in Xcode 8 is a
memory debugger available


1021
00:49:25,116 --> 00:49:27,806
in the Debug bar here, which
will help you visualize


1022
00:49:27,906 --> 00:49:30,816
and navigate the object graph
for your running application.


1023
00:49:32,516 --> 00:49:44,656
[ Applause ]


1024
00:49:45,156 --> 00:49:46,366
Will you like it
better if I tell you


1025
00:49:46,366 --> 00:49:47,976
that it automatically
finds leaks too?


1026
00:49:48,516 --> 00:49:54,596
[ Applause ]


1027
00:49:55,096 --> 00:49:56,636
That's good because this
is an amazing new tool


1028
00:49:56,636 --> 00:49:57,936
for debugging memory issues,


1029
00:49:58,146 --> 00:49:59,596
and I'd like to show
it to you in a demo.


1030
00:50:05,786 --> 00:50:08,386
Okay, so here we have the
Trailblazer application.


1031
00:50:08,386 --> 00:50:10,186
I'm going to launch
it in the simulator.


1032
00:50:11,166 --> 00:50:12,496
Now, I was debugging
this earlier


1033
00:50:12,496 --> 00:50:14,296
and I noticed some memory
issues I wanted to look at.


1034
00:50:15,416 --> 00:50:17,366
I'll bring up the memory
report while we're doing this


1035
00:50:18,076 --> 00:50:19,266
and I'll click on the trail.


1036
00:50:19,776 --> 00:50:20,886
You'll see that memory spikes.


1037
00:50:21,376 --> 00:50:21,996
That one's okay.


1038
00:50:21,996 --> 00:50:23,696
I investigated that
early, and that's just


1039
00:50:23,696 --> 00:50:25,296
from loading all the
assets for the trail.


1040
00:50:26,506 --> 00:50:29,036
What I noticed, though, was
as I clicked on each review,


1041
00:50:29,206 --> 00:50:32,846
our memory spikes, and we
don't reclaim that memory,


1042
00:50:33,206 --> 00:50:34,686
even if we go back all the way


1043
00:50:34,686 --> 00:50:36,316
to the beginning
of our application.


1044
00:50:37,496 --> 00:50:39,656
This is generally indicative
of a memory management problem


1045
00:50:39,816 --> 00:50:42,016
and something we can use the
Memory Debugger to investigate,


1046
00:50:43,456 --> 00:50:45,846
so I'll click the Memory
Debugger button in the bar here,


1047
00:50:46,226 --> 00:50:47,696
and as we pause your
application,


1048
00:50:47,696 --> 00:50:49,606
we capture a graph
of the objects.


1049
00:50:50,726 --> 00:50:53,996
The debug navigator now shows
me all the objects allocated


1050
00:50:53,996 --> 00:50:56,276
in my application,
both those I created


1051
00:50:56,476 --> 00:50:57,966
and the ones the
system created for me.


1052
00:50:58,946 --> 00:51:01,416
I can filter this down
to only showing the items


1053
00:51:01,416 --> 00:51:02,186
from my project.


1054
00:51:02,186 --> 00:51:05,236
I can also type in a
string or an address


1055
00:51:05,486 --> 00:51:06,756
to look for specific objects.


1056
00:51:07,736 --> 00:51:10,696
Here I've typed in "controller"
and I see I have three instances


1057
00:51:10,696 --> 00:51:12,396
of the Comment View
Controller around.


1058
00:51:13,016 --> 00:51:14,646
That's surprising to me.


1059
00:51:14,946 --> 00:51:17,586
When I select any one of
them, we'll see a graph


1060
00:51:17,756 --> 00:51:18,786
for this object on the right.


1061
00:51:19,846 --> 00:51:22,196
Now, what you're seeing here
are all the reference paths


1062
00:51:22,416 --> 00:51:25,146
to this object that are
keeping it around in memory.


1063
00:51:26,966 --> 00:51:30,116
One of these objects I see here
is a Swift capture context.


1064
00:51:30,526 --> 00:51:31,606
This is somewhere in code


1065
00:51:31,606 --> 00:51:34,536
that my View Controller has been
captured as part of a closure.


1066
00:51:35,206 --> 00:51:36,346
That's a good place
to start looking.


1067
00:51:37,806 --> 00:51:39,896
I'll bring up the Inspector
to look at more details,


1068
00:51:40,326 --> 00:51:42,996
and one of the details we show
is the back trace to where


1069
00:51:42,996 --> 00:51:44,036
that capture happened.


1070
00:51:44,926 --> 00:51:47,806
And of course, I can just click
to navigate directly to the line


1071
00:51:47,806 --> 00:51:49,536
of code that caused it.


1072
00:51:50,516 --> 00:51:57,586
[ Applause ]


1073
00:51:58,086 --> 00:51:59,466
And I can see the
source of my problem.


1074
00:51:59,466 --> 00:52:02,296
I've set up an observer for
this View Controller to be told


1075
00:52:02,296 --> 00:52:03,376
when the rating changes.


1076
00:52:04,006 --> 00:52:06,066
This API returns an
observation token


1077
00:52:06,326 --> 00:52:08,536
that I see I've properly
cleared up down here


1078
00:52:08,536 --> 00:52:09,386
when the view goes away,


1079
00:52:09,786 --> 00:52:11,776
but I never retained
it in the first place.


1080
00:52:12,386 --> 00:52:14,026
That's a common and
simple mistake to make.


1081
00:52:14,516 --> 00:52:16,806
It's also one the Memory
Debugger makes really easy


1082
00:52:16,886 --> 00:52:18,136
to find and fix.


1083
00:52:19,686 --> 00:52:22,256
Now, I mentioned before the
Memory Debugger also finds


1084
00:52:22,316 --> 00:52:24,246
leaks, and it's alerting
me to three I have


1085
00:52:24,296 --> 00:52:25,386
up here in the Activity view.


1086
00:52:26,416 --> 00:52:28,746
I'll click on that and be
taken to the Issue Navigator


1087
00:52:28,946 --> 00:52:31,016
where I see three types
of objects I'm leaking.


1088
00:52:31,536 --> 00:52:34,366
An array, user review,
and user objects.


1089
00:52:35,426 --> 00:52:37,696
I'll click on one of the
reviews, I'm sorry, the users,


1090
00:52:37,936 --> 00:52:39,726
and now we see the
reference cycle.


1091
00:52:40,826 --> 00:52:43,596
A user has an array of
written reviews, and each one


1092
00:52:43,596 --> 00:52:46,526
of those user reviews has a
reference back to that user.


1093
00:52:47,286 --> 00:52:49,056
If all these references
are strongly held,


1094
00:52:49,456 --> 00:52:50,836
this will leak all
over those objects.


1095
00:52:52,016 --> 00:52:54,146
Now, it looks like I'm
leaking them all uniformly.


1096
00:52:54,636 --> 00:52:57,076
If I wanted more details though
on any one of these objects,


1097
00:52:57,346 --> 00:52:59,376
I can use the context menu
to print something right


1098
00:52:59,376 --> 00:53:01,546
to the console or just bring


1099
00:53:01,546 --> 00:53:03,076
up a quick look to
see more details.


1100
00:53:05,096 --> 00:53:07,546
Now, in this case, the reviewing
user relationship is the one I


1101
00:53:07,546 --> 00:53:11,096
want to investigate, and we'll
just navigate just like code.


1102
00:53:11,096 --> 00:53:13,856
I'll just command click on it
and be taken right to the line


1103
00:53:13,856 --> 00:53:15,246
of code where that
reference came from.


1104
00:53:15,786 --> 00:53:18,026
And sure enough, I forgot
to declare that as weak.


1105
00:53:19,206 --> 00:53:20,786
So just like that, the
Memory Debugger was able


1106
00:53:20,786 --> 00:53:23,276
to show me the leaks I
had and help me fix them.


1107
00:53:24,516 --> 00:53:31,956
[ Applause ]


1108
00:53:32,456 --> 00:53:34,126
So that's the new Memory
Debugger in Xcode 8.


1109
00:53:36,396 --> 00:53:38,706
Now, there is one other kind
of issue I'd like to talk


1110
00:53:38,706 --> 00:53:41,126
about today, and that's
with provisioning.


1111
00:53:42,516 --> 00:53:46,546
[ Applause ]


1112
00:53:47,046 --> 00:53:49,386
There is nothing more
frustrating when you're working


1113
00:53:49,386 --> 00:53:53,116
on your projects than having
issues with code signing.


1114
00:53:53,876 --> 00:53:56,726
Well, actually, that turns
out to not quite be true


1115
00:53:57,246 --> 00:54:00,406
because in some cases, the
solution was more frustrating


1116
00:54:00,486 --> 00:54:01,186
than the problem itself.


1117
00:54:02,516 --> 00:54:08,646
[ Laughter & Applause ]


1118
00:54:09,146 --> 00:54:10,556
So we addressed this in Xcode 8


1119
00:54:10,556 --> 00:54:12,596
and we've completely rebuilt
our provisioning system.


1120
00:54:13,516 --> 00:54:18,916
[ Applause ]


1121
00:54:19,416 --> 00:54:22,416
We started by creating new
signing actions that are faster,


1122
00:54:22,416 --> 00:54:25,096
more robust, and built with
new Xcode workflows in mind.


1123
00:54:25,916 --> 00:54:27,706
We generated a new
user interface elements


1124
00:54:27,746 --> 00:54:29,966
to clearly show you
the profile, team,


1125
00:54:29,966 --> 00:54:33,126
and certificate you're using
and clearly show you any issues.


1126
00:54:33,786 --> 00:54:34,526
We refined our messages


1127
00:54:34,526 --> 00:54:37,156
to ensure they always
included actionable information


1128
00:54:37,676 --> 00:54:40,796
and we also were ensuring to
generate a log of the requests


1129
00:54:41,016 --> 00:54:42,876
and the results to
be transparent


1130
00:54:42,876 --> 00:54:43,646
about what's occurring.


1131
00:54:45,236 --> 00:54:46,886
Based on these, we had a
strong foundation on which


1132
00:54:46,886 --> 00:54:49,436
to provide two new
provisioning workflows.


1133
00:54:50,456 --> 00:54:52,796
Xcode 8 has an option for
automatic code signing.


1134
00:54:53,626 --> 00:54:56,216
With this code signing
option, Xcode takes care of all


1135
00:54:56,216 --> 00:54:59,076
of the details using
a dedicated profile,


1136
00:54:59,076 --> 00:55:00,526
and this profile is
separate from any


1137
00:55:00,526 --> 00:55:02,006
that you create or manage.


1138
00:55:03,356 --> 00:55:05,126
We'll take care of all
the signing requests


1139
00:55:05,426 --> 00:55:07,956
for adding entitlements
and regenerating new items.


1140
00:55:09,386 --> 00:55:11,416
For cases where you
would like more control


1141
00:55:11,416 --> 00:55:14,116
of your signing setup, you
can disable this option


1142
00:55:14,316 --> 00:55:15,996
and use Customized Code Signing.


1143
00:55:17,516 --> 00:55:20,866
[ Applause ]


1144
00:55:21,366 --> 00:55:22,486
With Customized Code Signing,


1145
00:55:22,486 --> 00:55:25,346
you can specify the exact
signing assets you would


1146
00:55:25,346 --> 00:55:29,506
like to use and you can specify
them per build configuration,


1147
00:55:29,736 --> 00:55:32,216
which is a great option when you
have a variety of signing needs.


1148
00:55:33,516 --> 00:55:37,276
[ Applause ]


1149
00:55:37,776 --> 00:55:39,696
Customized Code Signing
still takes advantage


1150
00:55:39,696 --> 00:55:41,836
of our new foundations to
give you great feedback


1151
00:55:41,996 --> 00:55:43,696
and assistance for any issues.


1152
00:55:45,186 --> 00:55:46,896
And there's one other area of
provisioning that we wanted


1153
00:55:46,896 --> 00:55:49,086
to focus on, which was
development certificates.


1154
00:55:50,176 --> 00:55:52,776
To make development easier when
working with many machines,


1155
00:55:53,206 --> 00:55:56,456
Xcode now supports multiple
development certificates.


1156
00:55:57,516 --> 00:56:01,546
[ Applause ]


1157
00:56:02,046 --> 00:56:02,876
This means when you
get a new Mac,


1158
00:56:03,096 --> 00:56:05,586
you just add your
Apple ID and that's it.


1159
00:56:05,586 --> 00:56:08,406
You no longer need to revoke
or share a certificate from any


1160
00:56:08,406 --> 00:56:09,066
of your other development.


1161
00:56:10,516 --> 00:56:16,546
[ Applause ]


1162
00:56:17,046 --> 00:56:20,096
So the new provisioning system,
automatic and customized signing


1163
00:56:20,256 --> 00:56:22,046
and multiple development
certificates.


1164
00:56:22,206 --> 00:56:24,896
Always that Xcode 8
makes provisioning easy


1165
00:56:25,296 --> 00:56:26,516
and gives you the
control you need.


1166
00:56:28,726 --> 00:56:30,736
And in this release, we
focused on performance,


1167
00:56:31,076 --> 00:56:32,636
and we have some great
achievements for you.


1168
00:56:33,686 --> 00:56:36,386
Compared to the release we
shipped just a year ago,


1169
00:56:36,606 --> 00:56:39,466
you'll find Xcode launches
twice as fast all the way


1170
00:56:39,466 --> 00:56:42,726
up to being 50 times faster
at the indexing of tests.


1171
00:56:43,516 --> 00:56:48,546
[ Applause ]


1172
00:56:49,046 --> 00:56:50,916
These improvements all add
up to make Xcode 8 something


1173
00:56:50,916 --> 00:56:52,776
that is fast and fun to use.


1174
00:56:54,426 --> 00:56:56,096
So these have been some
of the many features


1175
00:56:56,096 --> 00:56:58,076
and enhancements
you'll find in Xcode 8.


1176
00:56:58,826 --> 00:57:00,046
Please come by the
labs this week


1177
00:57:00,156 --> 00:57:01,506
and let us know what you think.


1178
00:57:02,506 --> 00:57:04,546
Next, I'd like to invite
up Sebastien Marineau-Mes,


1179
00:57:04,826 --> 00:57:06,826
who's going to give you some
information about exciting,


1180
00:57:06,826 --> 00:57:08,116
new platform technologies.


1181
00:57:08,676 --> 00:57:09,086
Sebastien [applause]?


1182
00:57:12,136 --> 00:57:13,116
>> Thank you, Matthew.


1183
00:57:14,066 --> 00:57:14,426
Thank you.


1184
00:57:15,486 --> 00:57:17,556
Let me now give an
update on a number of key,


1185
00:57:17,556 --> 00:57:19,186
foundational technologies,
and I'm going


1186
00:57:19,186 --> 00:57:20,606
to start with compression.


1187
00:57:21,576 --> 00:57:24,816
Now, if you recall, last
year, we introduced lzfse


1188
00:57:24,816 --> 00:57:26,176
as our new mainstream
compression.


1189
00:57:26,636 --> 00:57:29,076
At three times the
speed of zlib and less


1190
00:57:29,076 --> 00:57:30,596
than half the energy
consumption,


1191
00:57:30,736 --> 00:57:32,176
it's a really compelling
technology


1192
00:57:32,496 --> 00:57:34,206
and one that's seen
great adoption.


1193
00:57:35,016 --> 00:57:36,586
Now, today we're announcing


1194
00:57:36,586 --> 00:57:39,736
that we're open-sourcing
lzfse, and we [applause]--


1195
00:57:42,176 --> 00:57:43,966
There you go.


1196
00:57:44,066 --> 00:57:46,766
And we believe that this will
encourage further adoption,


1197
00:57:47,056 --> 00:57:48,526
especially for multiplatform


1198
00:57:48,526 --> 00:57:50,966
and backhand offline
compression use cases.


1199
00:57:51,946 --> 00:57:54,196
Next, I'd like to
talk about networking.


1200
00:57:55,636 --> 00:57:57,876
Now, we know that
the performance


1201
00:57:58,386 --> 00:57:59,986
of some applications
really depends


1202
00:57:59,986 --> 00:58:01,866
on having a great
network connection,


1203
00:58:02,136 --> 00:58:04,546
but today's networks don't
really have a great way


1204
00:58:04,546 --> 00:58:06,516
to prioritize the traffic
that's most important.


1205
00:58:07,206 --> 00:58:10,276
For example, people
downloading YouTube cat videos


1206
00:58:10,926 --> 00:58:13,326
at work can interfere
with your really important


1207
00:58:13,326 --> 00:58:14,036
video conference.


1208
00:58:14,956 --> 00:58:17,996
And so in working with Cisco,
we've added intelligence


1209
00:58:17,996 --> 00:58:20,066
to the network, and what
the network is now able


1210
00:58:20,226 --> 00:58:22,906
to do is identify
those trusted devices.


1211
00:58:23,576 --> 00:58:26,846
Identify those applications
that are most important


1212
00:58:26,846 --> 00:58:30,866
to your business, and then
prioritize that traffic end


1213
00:58:30,866 --> 00:58:32,456
to end throughout the network.


1214
00:58:32,796 --> 00:58:34,466
Which gives you much
better performance


1215
00:58:34,566 --> 00:58:36,996
for those applications that
are most important to you.


1216
00:58:38,126 --> 00:58:38,916
That is networking.


1217
00:58:39,696 --> 00:58:40,026
Next--


1218
00:58:41,516 --> 00:58:43,846
[ Applause ]


1219
00:58:44,346 --> 00:58:46,626
Next, let's talk about logging.


1220
00:58:47,286 --> 00:58:49,186
Now, logging is a
technology that all


1221
00:58:49,186 --> 00:58:52,056
of you use during
development, debugging,


1222
00:58:52,146 --> 00:58:53,396
and for field diagnostics.


1223
00:58:54,496 --> 00:58:57,076
Traditionally, logging
has been very fragmented.


1224
00:58:57,346 --> 00:58:59,646
A number of you roll
your own solutions.


1225
00:59:00,336 --> 00:59:03,106
The solutions that are available
in the platform are often slow,


1226
00:59:03,436 --> 00:59:06,516
and so this year, we've
set out to rethink logging,


1227
00:59:07,096 --> 00:59:08,486
and we've come up
with a technology


1228
00:59:08,486 --> 00:59:09,886
that we think is
very compelling.


1229
00:59:10,536 --> 00:59:11,356
It's unified.


1230
00:59:11,606 --> 00:59:13,096
It's extremely fast.


1231
00:59:13,096 --> 00:59:15,476
It's very compact on how
it stores data on disc.


1232
00:59:16,176 --> 00:59:19,346
It also gives you enough
flexibility to support logging


1233
00:59:19,346 --> 00:59:22,536
across applications,
daemons, system services.


1234
00:59:22,986 --> 00:59:25,346
It has this concept
of in-memory tracing


1235
00:59:25,346 --> 00:59:28,496
where you can capture very
high-frequency log messages


1236
00:59:28,836 --> 00:59:30,356
that only get persisted to disc


1237
00:59:30,356 --> 00:59:33,126
when your application
actually hits an air condition.


1238
00:59:33,766 --> 00:59:36,446
And finally, we've
baked privacy right in,


1239
00:59:36,746 --> 00:59:39,496
so you can capture very rich
log messages during development


1240
00:59:39,796 --> 00:59:41,816
and have those be
automatically redacted


1241
00:59:42,066 --> 00:59:44,496
when you ship your application
through end customers.


1242
00:59:46,066 --> 00:59:46,946
Now, along with this
[applause] --


1243
00:59:49,166 --> 00:59:52,956
We have rewritten the console
application it is much richer


1244
00:59:52,956 --> 00:59:53,646
in capability.


1245
00:59:53,646 --> 00:59:56,036
It gives you, for example,
the ability to live stream


1246
00:59:56,256 --> 00:59:59,576
through development devices,
the ability to advance filtering


1247
00:59:59,796 --> 01:00:02,336
and grade system
introspection capabilities,


1248
01:00:02,856 --> 01:00:04,556
so that is the new logging.


1249
01:00:05,406 --> 01:00:06,836
Next up--


1250
01:00:07,516 --> 01:00:09,546
[ Applause ]


1251
01:00:10,046 --> 01:00:12,786
Next up, let's talk
about file systems.


1252
01:00:12,786 --> 01:00:13,666
All right.


1253
01:00:16,346 --> 01:00:20,886
Now, of course, HFS Plus is the
mainstream file system on Macs,


1254
01:00:21,386 --> 01:00:24,116
and it was first
released in 1998.


1255
01:00:24,766 --> 01:00:27,836
Today it's deployed
across every Apple product,


1256
01:00:28,056 --> 01:00:30,126
over a billion devices.


1257
01:00:30,836 --> 01:00:35,116
And of course, HFS Plus was
designed over 18 years ago,


1258
01:00:35,496 --> 01:00:37,816
and I think it's really a
testament to the strength


1259
01:00:37,816 --> 01:00:40,216
of its original design that
it's still a compelling file


1260
01:00:40,216 --> 01:00:40,956
system today.


1261
01:00:41,246 --> 01:00:43,926
But of course, when it was
designed, we had floppy drives


1262
01:00:43,926 --> 01:00:48,786
on Macs, and so we thought
now may be the time for us


1263
01:00:48,786 --> 01:00:50,546
to launch a new file system.


1264
01:00:50,546 --> 01:00:54,676
And so today we're announcing
brand new Apple File System.


1265
01:00:55,516 --> 01:01:01,166
[ Applause ]


1266
01:01:01,666 --> 01:01:01,926
There you go.


1267
01:01:02,046 --> 01:01:03,466
I thought you guys
might be excited by this


1268
01:01:04,156 --> 01:01:05,016
or the crowd might be excited.


1269
01:01:05,306 --> 01:01:08,006
Now, the Apple File
System is scalable


1270
01:01:08,006 --> 01:01:11,056
from our smallest device, the
watch, to high-end Mac Pros


1271
01:01:11,056 --> 01:01:12,716
with very large storage
configurations.


1272
01:01:13,606 --> 01:01:14,656
It's also modern.


1273
01:01:14,656 --> 01:01:16,746
We designed it first
and foremost for today


1274
01:01:16,746 --> 01:01:19,586
and tomorrow's storage
technologies, Flash and SSD.


1275
01:01:19,586 --> 01:01:22,486
It's resilient and we've
used the opportunity


1276
01:01:22,486 --> 01:01:25,976
to unify encryption
across iOS and Mac OS,


1277
01:01:26,156 --> 01:01:28,466
which gives us great
flexibility going forward.


1278
01:01:29,476 --> 01:01:32,456
Now, the Apple File System has a
number of new, unique features,


1279
01:01:32,456 --> 01:01:34,366
and I want to highlight
two of them for you.


1280
01:01:35,126 --> 01:01:36,916
The first is called cloning.


1281
01:01:37,316 --> 01:01:38,096
Now, why cloning?


1282
01:01:38,626 --> 01:01:40,686
It turns out that if you look
at a system that's been running


1283
01:01:40,756 --> 01:01:43,726
for a while, you'll find many
duplicates of identical files.


1284
01:01:43,726 --> 01:01:45,796
It's kind of human nature
to copy things around.


1285
01:01:46,166 --> 01:01:47,936
That's of course inefficient.


1286
01:01:48,186 --> 01:01:49,356
It uses up storage space.


1287
01:01:50,016 --> 01:01:53,136
But with clones, you're able
to copy files and only pay


1288
01:01:53,136 --> 01:01:56,106
for that initial storage when
the files are actually modified.


1289
01:01:56,776 --> 01:01:59,816
It's very fast and you can
clone files, directories,


1290
01:02:00,126 --> 01:02:01,106
and directory hierarchies.


1291
01:02:02,416 --> 01:02:03,596
The second feature that I want


1292
01:02:03,596 --> 01:02:05,476
to highlight is called
Snapshots.


1293
01:02:05,736 --> 01:02:06,736
Now, what are Snapshots?


1294
01:02:07,286 --> 01:02:08,716
They're really an
image of the content


1295
01:02:08,716 --> 01:02:10,556
of the file system
at a point in time.


1296
01:02:11,366 --> 01:02:12,326
Why would you want this?


1297
01:02:12,776 --> 01:02:15,036
Well, let's say you're
creating a backup application.


1298
01:02:15,616 --> 01:02:18,746
Using Snapshots, you can go
and back up a consistent view


1299
01:02:18,746 --> 01:02:20,486
of the file system
at a point in time.


1300
01:02:21,366 --> 01:02:24,176
Another great example of
where this is useful is


1301
01:02:24,176 --> 01:02:24,886
in the classroom.


1302
01:02:25,546 --> 01:02:28,426
You may set up a device for
your students that has content,


1303
01:02:28,486 --> 01:02:30,246
configuration files,
applications,


1304
01:02:30,246 --> 01:02:31,926
and so on that you're going
to use during a class.


1305
01:02:32,476 --> 01:02:34,416
As the students use a device,


1306
01:02:34,956 --> 01:02:37,716
they may inadvertently modify
the content or the settings,


1307
01:02:37,926 --> 01:02:39,716
and what you can do is you
can use Snapshots at the end


1308
01:02:39,716 --> 01:02:42,456
of the class to revert
the device back


1309
01:02:42,456 --> 01:02:44,516
to its original state
so that it's ready


1310
01:02:44,516 --> 01:02:45,676
for the next class of students.


1311
01:02:46,846 --> 01:02:49,876
Now, these are features of
the new Apple File System


1312
01:02:50,406 --> 01:02:52,116
with a developer
preview of it that's part


1313
01:02:52,116 --> 01:02:55,676
of the Mac OS Sierra release
available to you today.


1314
01:02:55,676 --> 01:02:57,966
We'd encourage you all to
download it, check it out,


1315
01:02:57,966 --> 01:03:00,846
give us feedback, and the Apple
File System will be coming


1316
01:03:00,886 --> 01:03:02,886
to all Apple devices soon.


1317
01:03:03,516 --> 01:03:08,556
[ Applause ]


1318
01:03:09,056 --> 01:03:09,296
All right.


1319
01:03:11,876 --> 01:03:13,466
Finally, let's talk
about privacy.


1320
01:03:14,096 --> 01:03:16,536
You heard about a new, powerful
technique called differential


1321
01:03:16,626 --> 01:03:19,796
privacy in this morning's
keynote, and I will attempt


1322
01:03:20,166 --> 01:03:21,446
to explain that to you.


1323
01:03:21,976 --> 01:03:25,506
I will start with the formal
math behind differential privacy


1324
01:03:27,636 --> 01:03:30,906
and remind, just note that
while it does look complex,


1325
01:03:30,906 --> 01:03:32,766
I can guarantee you the
math actually works.


1326
01:03:32,766 --> 01:03:34,816
And I'm going to actually
instead explain it


1327
01:03:34,816 --> 01:03:36,346
to you using a couple
of examples.


1328
01:03:37,126 --> 01:03:38,536
So the first example
is we're going


1329
01:03:38,536 --> 01:03:41,046
to use differential privacy
to try to resolve once


1330
01:03:41,046 --> 01:03:43,466
and for all one of
the most controversial


1331
01:03:43,466 --> 01:03:44,376
and important questions


1332
01:03:44,666 --> 01:03:48,446
of modern computer science
code formatting [laughter].


1333
01:03:51,066 --> 01:03:52,666
This is of course an
important question.


1334
01:03:52,666 --> 01:03:55,706
We're going to poll our audience
to get the answer to this.


1335
01:03:55,876 --> 01:03:58,496
It's also something that is
where you want your answer


1336
01:03:58,496 --> 01:04:00,816
to remain private
because let's face it,


1337
01:04:01,126 --> 01:04:03,426
some of your coworkers may be
pretty passionate about this.


1338
01:04:04,266 --> 01:04:07,236
So how do we do this using
differential privacy?


1339
01:04:07,236 --> 01:04:10,176
Well, first, each of you
would provide your preference,


1340
01:04:11,246 --> 01:04:13,996
but before we send that over to
Apple to aggregate the results


1341
01:04:13,996 --> 01:04:16,456
of the survey, through
differential privacy,


1342
01:04:16,706 --> 01:04:18,176
we add noise to each answer.


1343
01:04:18,326 --> 01:04:20,756
And after we've added noise,
we actually have no way


1344
01:04:20,756 --> 01:04:21,996
to know what you
originally answered.


1345
01:04:22,786 --> 01:04:24,716
We send this to Apple,
and the beauty


1346
01:04:24,716 --> 01:04:28,116
of differential privacy is that
after we aggregate this data


1347
01:04:28,116 --> 01:04:30,356
over a large population,
we're actually able


1348
01:04:30,356 --> 01:04:32,746
to recover the answer
to our question.


1349
01:04:32,746 --> 01:04:34,646
Now, I'm not going
to pass judgment


1350
01:04:34,646 --> 01:04:36,636
on this, the actual answer.


1351
01:04:36,636 --> 01:04:38,756
It looks like of course
we're still very divided


1352
01:04:38,756 --> 01:04:41,876
in our opinions on this,
but I will remind everyone


1353
01:04:41,876 --> 01:04:43,576
that after you've run your
code through the compiler,


1354
01:04:43,816 --> 01:04:48,576
this doesn't actually really
matter, so [laughter] that's --


1355
01:04:49,516 --> 01:04:53,546
[ Applause ]


1356
01:04:54,046 --> 01:04:56,316
Now, how are we actually
applying differential privacy


1357
01:04:56,316 --> 01:04:57,036
in iOS X?


1358
01:04:57,036 --> 01:04:58,256
Let me give an example of this.


1359
01:04:59,126 --> 01:05:01,856
In Spotlight, we provide
suggestions for deep links


1360
01:05:02,186 --> 01:05:05,646
and we'd of course like to
surface the most relevant


1361
01:05:05,646 --> 01:05:08,026
and popular suggestions
to our end users.


1362
01:05:09,236 --> 01:05:11,956
And so the way that we do
this, we assign to each


1363
01:05:11,956 --> 01:05:15,166
of our deep links a unique
hash, and as users navigate


1364
01:05:15,166 --> 01:05:18,066
on their device, whenever
they encounter a deep link,


1365
01:05:18,506 --> 01:05:21,826
we take that hash, add noise
to it, extract a fragment


1366
01:05:21,826 --> 01:05:23,506
of it, and send it to Apple.


1367
01:05:24,166 --> 01:05:25,516
Now, any one of these fragments


1368
01:05:25,666 --> 01:05:27,446
on their own is completely
meaningless,


1369
01:05:28,286 --> 01:05:31,166
but when we aggregate this
across our entire user base,


1370
01:05:31,586 --> 01:05:34,546
we're able to recover the
popularity of our deep links


1371
01:05:34,806 --> 01:05:37,866
and then use that to
surface them in Spotlight


1372
01:05:37,976 --> 01:05:39,266
and improve our user's
experience.


1373
01:05:40,476 --> 01:05:44,966
That is the science behind
differential privacy.


1374
01:05:45,256 --> 01:05:47,486
There's one more aspect of it
though that I want to touch on.


1375
01:05:48,096 --> 01:05:51,656
You might think, well, if we're
capturing samples from users


1376
01:05:51,796 --> 01:05:54,426
and this works by capturing
many samples from many users,


1377
01:05:54,836 --> 01:05:58,596
what happens if Apple captures
too many samples from one user?


1378
01:05:58,746 --> 01:06:00,866
Could you not then
figure out what I'm doing?


1379
01:06:01,516 --> 01:06:03,846
And this is where the
privacy budget comes in.


1380
01:06:04,426 --> 01:06:06,996
The privacy budget limits
the amount of samples


1381
01:06:06,996 --> 01:06:09,956
that we can capture from any
given user and it ensures


1382
01:06:09,956 --> 01:06:12,166
that in the end, we can
never recover any meaningful


1383
01:06:12,166 --> 01:06:14,236
information from any
one of our users.


1384
01:06:15,396 --> 01:06:16,936
So that is differential privacy.


1385
01:06:16,936 --> 01:06:19,706
It's a powerful technique
that allows us to learn


1386
01:06:19,706 --> 01:06:22,256
from our users, improve
user experience,


1387
01:06:22,666 --> 01:06:24,576
and still maintain your privacy.


1388
01:06:25,546 --> 01:06:29,006
So with this, I'm going to hand
it over to Toby, Toby Paterson,


1389
01:06:29,006 --> 01:06:32,006
who will be talking about
higher level features in iOS X.


1390
01:06:32,186 --> 01:06:32,626
Toby?


1391
01:06:32,716 --> 01:06:33,886
>> Thanks, Sebastien.


1392
01:06:35,516 --> 01:06:39,736
[ Applause ]


1393
01:06:40,236 --> 01:06:40,906
Good afternoon.


1394
01:06:46,336 --> 01:06:46,736
There we go.


1395
01:06:47,586 --> 01:06:52,186
So, you know, it's really thanks
to all of you that we have


1396
01:06:52,246 --> 01:06:57,396
such a rich ecosystem on iOS,
and we are constantly looking


1397
01:06:57,396 --> 01:07:00,746
for new ways to help
users find applications,


1398
01:07:01,336 --> 01:07:03,536
get into the apps
they like to use,


1399
01:07:03,996 --> 01:07:05,976
and to integrate
your applications


1400
01:07:06,256 --> 01:07:07,266
across the rest of the OS.


1401
01:07:07,266 --> 01:07:12,966
You saw earlier how your
app can propagate virally


1402
01:07:13,536 --> 01:07:16,566
through messages, and
we're making it really easy


1403
01:07:16,566 --> 01:07:19,976
to tell people about your
application right here


1404
01:07:20,006 --> 01:07:20,906
from the home screen.


1405
01:07:22,566 --> 01:07:25,596
We've added a new Share button
to the Quick Actions List.


1406
01:07:26,366 --> 01:07:27,806
This brings up the Share Sheet,


1407
01:07:28,186 --> 01:07:31,246
and so now you can Tweet your
application to the whole world,


1408
01:07:31,246 --> 01:07:33,836
and this is available for
free in every application.


1409
01:07:36,356 --> 01:07:39,806
Now, we have a lot of ways
that we try to get users


1410
01:07:40,016 --> 01:07:42,446
into the right app at
just the right time.


1411
01:07:42,556 --> 01:07:45,346
I'm going to move through them
quickly, so bear with me here.


1412
01:07:47,556 --> 01:07:51,556
Handoff lets you carry on a
task from one device to another.


1413
01:07:52,306 --> 01:07:55,616
Spotlight can link directly
to your application content.


1414
01:07:56,006 --> 01:07:59,436
A Universal Link will take you
to the most appropriate place


1415
01:07:59,436 --> 01:08:02,066
for a platform, and
you can link directly


1416
01:08:02,066 --> 01:08:04,846
from one application to another.


1417
01:08:05,606 --> 01:08:09,466
Siri will suggest apps here in
Today view and in Spotlight.


1418
01:08:09,926 --> 01:08:12,256
We can suggest an app
at just the right time


1419
01:08:12,516 --> 01:08:14,786
in the App Switcher
on the lock screen.


1420
01:08:15,356 --> 01:08:17,956
We can connect apps based
on common data types


1421
01:08:18,036 --> 01:08:21,345
like this and this and this.


1422
01:08:22,336 --> 01:08:23,656
Well, I think you get the idea.


1423
01:08:24,216 --> 01:08:27,046
There's only one thing I really
want you to take away from all


1424
01:08:27,046 --> 01:08:31,506
of this, which is that
NSUserActivity is your gateway


1425
01:08:31,506 --> 01:08:33,316
to a whole ton of functionality.


1426
01:08:34,196 --> 01:08:38,036
It's how your application tells
the OS what people are doing


1427
01:08:38,036 --> 01:08:40,086
in your app, and that allows us


1428
01:08:40,086 --> 01:08:43,095
to create intelligent
suggestions and connections


1429
01:08:43,156 --> 01:08:44,736
between your applications.


1430
01:08:45,906 --> 01:08:49,935
And in iOS X, we're adding two
important pieces of information.


1431
01:08:51,446 --> 01:08:55,136
Now, many apps use addresses
in a variety of ways,


1432
01:08:55,486 --> 01:08:57,666
and we can use that
to make connections


1433
01:08:57,876 --> 01:08:59,466
between your applications.


1434
01:09:00,216 --> 01:09:02,536
Let me illustrate
with an example.


1435
01:09:03,796 --> 01:09:05,185
This is the Yelp page for one


1436
01:09:05,185 --> 01:09:08,156
of my favorite restaurants
in San Francisco.


1437
01:09:08,916 --> 01:09:11,586
Now, suppose it were to
provide an NSUserActivity


1438
01:09:11,996 --> 01:09:13,975
with this address on it.


1439
01:09:14,136 --> 01:09:15,515
That would allow me to do things


1440
01:09:15,515 --> 01:09:18,916
like asking Siri to
just take me here.


1441
01:09:20,386 --> 01:09:23,376
My phone knows that I use
Uber a lot to get around,


1442
01:09:23,506 --> 01:09:25,656
and it can make it
really easy for me


1443
01:09:25,656 --> 01:09:28,566
to order a ride directly
to the restaurant.


1444
01:09:29,426 --> 01:09:33,595
Or when I'm typing in a text
field that's expecting location


1445
01:09:33,595 --> 01:09:37,666
data, QuickType can suggest an
address that I was just looking


1446
01:09:37,666 --> 01:09:42,866
at and Maps can include that in
its list of suggestions along


1447
01:09:42,866 --> 01:09:45,895
with a quick way of getting
back into the application.


1448
01:09:48,095 --> 01:09:51,116
Now, we also interact with
people in a variety of ways,


1449
01:09:51,116 --> 01:09:54,966
and the OS can learn which
app I use to communicate


1450
01:09:55,086 --> 01:09:56,276
with any given person.


1451
01:09:57,196 --> 01:09:58,856
To do this, your app needs


1452
01:09:58,856 --> 01:10:00,726
to give us three
pieces of information.


1453
01:10:01,576 --> 01:10:03,976
Enough context so that
we can find an entry


1454
01:10:04,106 --> 01:10:07,636
in the address book for this
person, the kind of service


1455
01:10:07,636 --> 01:10:11,436
that you're providing, that's a
messages or video chat platform,


1456
01:10:11,796 --> 01:10:14,356
and the specific
identifier or handle


1457
01:10:14,526 --> 01:10:17,756
that you'll use for this person.


1458
01:10:18,136 --> 01:10:20,416
Now, this is the new
Address Book card,


1459
01:10:20,506 --> 01:10:23,866
which we're making available a
lot more prominently throughout


1460
01:10:24,426 --> 01:10:26,836
the OS, and you'll notice that
we can automatically include


1461
01:10:26,836 --> 01:10:30,186
in here information that we
learned from your applications.


1462
01:10:31,646 --> 01:10:35,406
Now, when I tap on one of these
new Quick Communication buttons


1463
01:10:35,526 --> 01:10:38,866
at the top of the card, we
can also include your app


1464
01:10:39,116 --> 01:10:40,516
in the list of options.


1465
01:10:41,326 --> 01:10:44,726
When I make my choice,
we'll remember that so


1466
01:10:44,726 --> 01:10:47,176
that the next time
when I tap this button,


1467
01:10:47,766 --> 01:10:50,426
we can take you straight
into the application.


1468
01:10:51,286 --> 01:10:54,706
I should point out that all
of this learning is private


1469
01:10:54,706 --> 01:10:57,826
to the user and accessible
only on their devices.


1470
01:11:00,676 --> 01:11:04,576
Now, we deeply believe
that integrating your apps


1471
01:11:04,576 --> 01:11:09,396
across the OS makes for a
much richer user experience.


1472
01:11:10,196 --> 01:11:12,366
Extensions, of course,
are how you do that,


1473
01:11:12,366 --> 01:11:15,296
and you've heard earlier
about the new iMessage Apps,


1474
01:11:15,496 --> 01:11:17,766
Maps extensions, and SiriKit.


1475
01:11:19,136 --> 01:11:20,426
Well, I'd like to
tell you a little bit


1476
01:11:20,426 --> 01:11:24,186
about two extension points that
we're adding to Notifications.


1477
01:11:25,766 --> 01:11:29,246
A service extension runs in
the background and allows you


1478
01:11:29,246 --> 01:11:33,266
to modify the push payload
before we show the notification


1479
01:11:33,266 --> 01:11:33,976
to the user.


1480
01:11:34,766 --> 01:11:38,416
It lets you do things like
downloading an image, a video,


1481
01:11:38,416 --> 01:11:40,406
or an audio file
in the background


1482
01:11:40,716 --> 01:11:43,206
and embedding it directly
in the notification.


1483
01:11:44,236 --> 01:11:48,426
Or you could encrypt your
push payload on your server


1484
01:11:48,526 --> 01:11:52,086
and use a service extension to
decrypt it locally on device,


1485
01:11:52,626 --> 01:11:55,176
providing for full
end-to-end encryption.


1486
01:11:56,516 --> 01:11:59,096
[ Applause ]


1487
01:11:59,596 --> 01:12:01,146
Now, I should point
out you may want


1488
01:12:01,146 --> 01:12:02,716
to use something
a little stronger


1489
01:12:02,716 --> 01:12:05,516
than the ROT13 algorithm
that we're proposing here.


1490
01:12:06,066 --> 01:12:08,386
We're going to double
ROT13 it next year


1491
01:12:08,446 --> 01:12:09,546
for extra security [laughter].


1492
01:12:14,166 --> 01:12:18,736
Now, if you want an even
richer user experience,


1493
01:12:19,186 --> 01:12:23,226
a content extension can provide
an arbitrary view that we'll use


1494
01:12:23,226 --> 01:12:25,516
for the expanded look
of a notification.


1495
01:12:26,236 --> 01:12:27,906
This lets you provide a dynamic


1496
01:12:27,906 --> 01:12:31,116
and interactive experience
that's really tailored


1497
01:12:31,116 --> 01:12:32,236
to your application.


1498
01:12:35,496 --> 01:12:38,826
This morning, you got a quick
tour of the revamped Today view


1499
01:12:38,996 --> 01:12:41,466
with its vibrant,
new look for widgets.


1500
01:12:41,856 --> 01:12:45,106
Now, a widget can still
be any size you want


1501
01:12:45,156 --> 01:12:48,696
within reasonable limits,
but we're also adding a new,


1502
01:12:48,696 --> 01:12:53,236
compact, fixed size to optimize
for better information density.


1503
01:12:53,776 --> 01:12:55,926
And the thing that
we're really excited


1504
01:12:55,926 --> 01:12:59,276
about is making these
widgets available right here


1505
01:12:59,276 --> 01:13:00,246
from the home screen.


1506
01:13:00,956 --> 01:13:02,436
I'm going to tell you
what you need to do


1507
01:13:02,436 --> 01:13:05,176
to get this functionality
in your widgets.


1508
01:13:06,136 --> 01:13:09,346
The first thing you want to do
is probably update your look


1509
01:13:09,346 --> 01:13:11,206
and support the new compact size


1510
01:13:11,206 --> 01:13:12,926
so that your widget
doesn't look too funny.


1511
01:13:14,116 --> 01:13:19,246
You need to build with the
iOS X SDK, and that's it.


1512
01:13:19,426 --> 01:13:22,626
Nothing else has changed about
how you build your widgets.


1513
01:13:23,086 --> 01:13:25,326
You just get this new
functionality for free,


1514
01:13:25,616 --> 01:13:26,936
and so we're really excited.


1515
01:13:26,936 --> 01:13:29,226
We think this is going to
open up a whole new dimension


1516
01:13:29,726 --> 01:13:30,946
into your application.


1517
01:13:33,156 --> 01:13:35,896
Okay, let's switch gears
now and talk about the Mac.


1518
01:13:37,446 --> 01:13:41,816
So Mac OS Sierra is adding full
support for localizing your apps


1519
01:13:42,206 --> 01:13:46,206
in right-to-left languages,
including reversing UI elements


1520
01:13:46,206 --> 01:13:47,756
in places where that
makes sense.


1521
01:13:49,166 --> 01:13:52,446
The Mac now joins
with iOS and watchOS,


1522
01:13:52,446 --> 01:13:56,156
which quietly introduced support
for this earlier in the year.


1523
01:13:57,056 --> 01:14:00,886
And with so many potential
customers all over the world,


1524
01:14:01,126 --> 01:14:03,826
it's really more important
now than ever before


1525
01:14:03,996 --> 01:14:07,376
that your app be properly
localized and internationalized.


1526
01:14:07,916 --> 01:14:09,646
And you can learn
more about that here.


1527
01:14:12,536 --> 01:14:15,316
Now, you know, when Sebastien
first started talking about tabs


1528
01:14:15,316 --> 01:14:17,336
versus spaces, we were
pretty sure this was


1529
01:14:17,366 --> 01:14:18,306
where he was going.


1530
01:14:19,416 --> 01:14:22,396
You saw this morning how
people can gather together all


1531
01:14:22,396 --> 01:14:25,176
of their windows into
a single tabbed UI.


1532
01:14:26,246 --> 01:14:29,906
AppKit will take care of pretty
much everything here for you


1533
01:14:29,906 --> 01:14:32,656
and it's smart enough not to
pair your preferences windows


1534
01:14:32,656 --> 01:14:35,686
with your document windows,
and so on and so forth.


1535
01:14:36,236 --> 01:14:38,256
And in fact, if you're
using NSDocument,


1536
01:14:38,256 --> 01:14:40,856
there really is nothing
else that you need


1537
01:14:40,856 --> 01:14:42,176
to do in your application.


1538
01:14:43,216 --> 01:14:45,956
If you're not using
NSDocument, there's a little bit


1539
01:14:45,956 --> 01:14:48,776
of API you need to adopt to
support creating a new tab,


1540
01:14:49,246 --> 01:14:51,106
but I'd really encourage
you to take a look


1541
01:14:51,106 --> 01:14:54,696
at whether NSDocument isn't
appropriate for your use case.


1542
01:14:55,896 --> 01:14:59,476
You see, we also showed you this
morning how we're making it easy


1543
01:14:59,476 --> 01:15:01,736
for people to move their
documents and their data


1544
01:15:02,246 --> 01:15:04,376
into the cloud, and
we really believe


1545
01:15:04,376 --> 01:15:06,906
that this is the
future of file storage.


1546
01:15:07,866 --> 01:15:12,276
So it's super important that
your app adopt best practices


1547
01:15:12,726 --> 01:15:15,856
in terms of file
coordination and metadata query.


1548
01:15:16,716 --> 01:15:20,586
And here too if you're using
NSDocument, it will take care


1549
01:15:20,586 --> 01:15:22,916
of pretty much all the
heavy lifting for you,


1550
01:15:23,126 --> 01:15:27,186
along with UIDocument
as counterpart on iOS.


1551
01:15:29,076 --> 01:15:32,016
Now, I have an important
update for you about iCloud.


1552
01:15:33,296 --> 01:15:35,016
As you know, the iCloud
APIs are available on all


1553
01:15:35,016 --> 01:15:39,006
of our platforms,
but on the Mac,


1554
01:15:39,576 --> 01:15:42,906
use of these APIs has
been restricted just


1555
01:15:42,906 --> 01:15:45,856
to those apps distributed
via the Mac App Store.


1556
01:15:46,866 --> 01:15:50,646
Well, in Mac OS Sierra, we're
removing that restriction.


1557
01:15:51,516 --> 01:15:57,776
[ Applause ]


1558
01:15:58,276 --> 01:15:59,806
Now, your app still
needs to be signed


1559
01:15:59,806 --> 01:16:02,856
with a valid developer ID, which
by the way, will also get rid


1560
01:16:02,856 --> 01:16:05,546
of those pesky, untrusted
developer alerts.


1561
01:16:06,116 --> 01:16:08,536
But once you've done
that, you can use all


1562
01:16:08,536 --> 01:16:11,096
of these API no matter how
you distribute your app


1563
01:16:11,246 --> 01:16:12,286
to your customers.


1564
01:16:15,096 --> 01:16:16,376
Next, CloudKit.


1565
01:16:17,526 --> 01:16:20,806
We introduced CloudKit two years
ago, and it's the foundation


1566
01:16:20,806 --> 01:16:24,426
that we use for building all
of our new cloud services.


1567
01:16:25,216 --> 01:16:28,096
Now, it has a fairly
coarse-grained permission model.


1568
01:16:28,826 --> 01:16:32,116
Either your data could
be accessed by everybody


1569
01:16:32,116 --> 01:16:36,246
in the world or it's restricted
to just a single user.


1570
01:16:37,456 --> 01:16:40,616
Well, the new CloudKit
sharing feature opens that up


1571
01:16:40,616 --> 01:16:42,626
and gives your app
explicit control


1572
01:16:42,626 --> 01:16:44,386
over who can access your data.


1573
01:16:45,516 --> 01:16:50,626
[ Applause ]


1574
01:16:51,126 --> 01:16:56,856
The new CKShare class gives
you a, governs the permissions,


1575
01:16:56,856 --> 01:16:59,096
who can read and write
a given set of records,


1576
01:16:59,196 --> 01:17:02,866
and this API is available
on all of our platforms.


1577
01:17:04,106 --> 01:17:08,016
On the Mac and on iOS,
we're providing standard UI


1578
01:17:08,016 --> 01:17:11,696
for taking care of the
mechanics of inviting people


1579
01:17:11,696 --> 01:17:14,286
and managing people
in your application.


1580
01:17:15,686 --> 01:17:19,626
We use CloudKit sharing for
the new collaboration features


1581
01:17:19,666 --> 01:17:22,776
that we've built into Notes,
and I encourage you to check it


1582
01:17:22,776 --> 01:17:24,686
out in the developer
preview today.


1583
01:17:26,346 --> 01:17:27,926
With that, I'd like to hand off


1584
01:17:27,976 --> 01:17:28,576
to Josh Shaffer [assumed
spelling],


1585
01:17:28,576 --> 01:17:30,756
who's going to give you
some updates on watchOS.


1586
01:17:31,166 --> 01:17:31,546
Thank you.


1587
01:17:32,516 --> 01:17:37,776
[ Applause ]


1588
01:17:38,276 --> 01:17:38,866
>> Thanks, Toby.


1589
01:17:40,236 --> 01:17:44,076
As you heard in the keynote,
watchOS 3 simplifies navigation


1590
01:17:44,076 --> 01:17:45,616
and optimizes performance.


1591
01:17:46,816 --> 01:17:49,596
These improvements go
beyond just the system level


1592
01:17:49,746 --> 01:17:52,156
and include many enhancements
to the apps as well.


1593
01:17:53,526 --> 01:17:54,786
These enhancements focus


1594
01:17:54,856 --> 01:17:57,436
on three key qualities
for Watch apps.


1595
01:17:58,066 --> 01:18:00,416
The first is that
they be glanceable.


1596
01:18:01,246 --> 01:18:03,916
Individual interactions
with Apple Watch are short,


1597
01:18:04,456 --> 01:18:06,486
so it's important to
present well-designed,


1598
01:18:06,716 --> 01:18:09,506
simple information to
the user, focusing just


1599
01:18:09,506 --> 01:18:13,316
on what's most relevant to make
sure that it's easy to digest.


1600
01:18:14,686 --> 01:18:16,366
The second is that
they be actionable.


1601
01:18:16,366 --> 01:18:19,156
Now, this includes
simplifying access


1602
01:18:19,156 --> 01:18:21,556
to the most common actions
taken on the watch itself.


1603
01:18:22,486 --> 01:18:25,146
For example, we've
redesigned the Fitness app


1604
01:18:25,146 --> 01:18:27,696
to reduce the number of steps
necessary to start a workout.


1605
01:18:28,926 --> 01:18:32,226
It also means simplifying
access to key information


1606
01:18:32,226 --> 01:18:34,596
that your users will
want to act on even


1607
01:18:34,596 --> 01:18:36,626
if they won't take the
action on the watch itself.


1608
01:18:36,626 --> 01:18:41,076
And the third is ensuring that
your apps remain responsive


1609
01:18:41,436 --> 01:18:43,526
by keeping them up to
date and ready to act


1610
01:18:43,526 --> 01:18:44,746
as soon as they're needed.


1611
01:18:47,756 --> 01:18:48,586
Sure, thanks [laughs].


1612
01:18:48,946 --> 01:18:53,656
I agree. Okay, so when you think
about an app, the first thing


1613
01:18:53,656 --> 01:18:56,516
that may come to mind is an app
that takes up the full screen.


1614
01:18:56,516 --> 01:18:59,786
Now, that's definitely part
of it, but on Apple Watch,


1615
01:18:59,786 --> 01:19:02,236
it's important to keep in
mind that your app has access


1616
01:19:02,306 --> 01:19:04,846
to two other great
interfaces in the form


1617
01:19:04,846 --> 01:19:06,916
of complications
and notifications.


1618
01:19:08,046 --> 01:19:11,016
So these three interfaces are
just three different views


1619
01:19:11,016 --> 01:19:13,396
into your one app,
so it's important


1620
01:19:13,396 --> 01:19:15,116
that they present
consistent information.


1621
01:19:15,906 --> 01:19:18,536
When you update any one of
them, you'll want to update all


1622
01:19:18,536 --> 01:19:20,496
of them because if they're
displaying different


1623
01:19:20,496 --> 01:19:23,906
information, then your users
won't trust any of them.


1624
01:19:24,706 --> 01:19:27,266
Now, you may remember
that in watchOS 2,


1625
01:19:27,266 --> 01:19:28,866
there was a fourth
interface called Glances.


1626
01:19:29,956 --> 01:19:33,236
Glances provided
simple access to the,


1627
01:19:33,236 --> 01:19:35,236
a summary of your
favorite apps' information.


1628
01:19:36,416 --> 01:19:39,926
In watchOS 3, this functionality
is now provided by the new Dock


1629
01:19:39,926 --> 01:19:42,616
and is instantly
accessible from anywhere


1630
01:19:42,616 --> 01:19:44,526
with just a press
of the side button.


1631
01:19:45,746 --> 01:19:48,226
If your watchOS 2 app
included a Glance,


1632
01:19:48,436 --> 01:19:51,786
that separate interface is no
longer necessary in watchOS 3,


1633
01:19:52,236 --> 01:19:55,466
but its simple design can help
you update the primary interface


1634
01:19:55,466 --> 01:19:57,786
for your application to
make sure that it looks


1635
01:19:57,786 --> 01:20:00,106
and works great when
viewed from the Dock.


1636
01:20:01,526 --> 01:20:04,936
Apps in the Dock are instantly
responsive, helping to make sure


1637
01:20:04,936 --> 01:20:07,976
that the most common tasks taken
on the watch can be accomplished


1638
01:20:08,076 --> 01:20:09,936
in just a couple of seconds.


1639
01:20:10,426 --> 01:20:13,206
Now, that's obviously a very
short time, but striving


1640
01:20:13,266 --> 01:20:15,016
for it can be a great guide


1641
01:20:15,056 --> 01:20:18,186
in helping you design the
top-level features of your apps


1642
01:20:18,186 --> 01:20:20,856
to make sure that they work
really well on Apple Watch.


1643
01:20:22,616 --> 01:20:24,546
While each individual
interaction is short,


1644
01:20:24,926 --> 01:20:26,746
some apps may be
used multiple times


1645
01:20:26,866 --> 01:20:28,256
over a longer period of time.


1646
01:20:29,106 --> 01:20:30,746
For example, I may refer back


1647
01:20:30,746 --> 01:20:33,216
to my shopping list many
times while I'm at the store.


1648
01:20:34,416 --> 01:20:36,696
In watchOS 3, each
time I raise my wrist,


1649
01:20:36,696 --> 01:20:39,576
I can instantly see the
items I still need to get


1650
01:20:39,576 --> 01:20:41,696
and check off the ones
I've already picked up.


1651
01:20:42,386 --> 01:20:44,816
It's now really easy to design
apps that have this kind


1652
01:20:44,816 --> 01:20:47,896
of interaction model because
watchOS 3 will return you


1653
01:20:47,896 --> 01:20:50,876
to the last app that you were
using for up to 8 minutes


1654
01:20:50,976 --> 01:20:52,206
after you last used it.


1655
01:20:52,996 --> 01:20:53,966
Once you're done using it,


1656
01:20:53,966 --> 01:20:54,996
you'll be returned
to the watch face.


1657
01:20:56,516 --> 01:21:01,576
[ Applause ]


1658
01:21:02,076 --> 01:21:03,286
When your app's not in use,


1659
01:21:03,336 --> 01:21:05,906
ensuring that it stays
responsive means keeping it


1660
01:21:05,906 --> 01:21:07,756
up to date in the
background so that it's ready


1661
01:21:07,756 --> 01:21:09,516
when you do want to use it.


1662
01:21:10,096 --> 01:21:11,336
To make this really easy,


1663
01:21:11,436 --> 01:21:13,586
watchOS 3 includes
a brand new set


1664
01:21:13,586 --> 01:21:16,026
of Background App Refresh APIs.


1665
01:21:16,386 --> 01:21:18,386
Background App Refresh
is a critical part


1666
01:21:18,386 --> 01:21:20,656
of building responsive
watchOS applications,


1667
01:21:21,236 --> 01:21:22,836
and periodically
updating your app


1668
01:21:22,836 --> 01:21:25,796
in the background can be a great
enhancement no matter what type


1669
01:21:25,796 --> 01:21:26,556
of app you're building.


1670
01:21:27,466 --> 01:21:30,336
Now, if you're building a
fitness app, for these types


1671
01:21:30,336 --> 01:21:32,586
of apps, it's even more
important that they remain


1672
01:21:32,586 --> 01:21:35,306
up to date for the entire
duration of the workout,


1673
01:21:35,386 --> 01:21:37,836
so we have some additional
enhancements just for them.


1674
01:21:39,176 --> 01:21:42,566
During a workout session, these
apps will now run continually


1675
01:21:42,566 --> 01:21:44,776
in the background even
while the screen is off,


1676
01:21:45,286 --> 01:21:47,186
ensuring that they can
monitor workout progress


1677
01:21:47,216 --> 01:21:48,916
and provide updates to the user


1678
01:21:48,916 --> 01:21:53,356
when they reach key
milestones using haptics.


1679
01:21:53,946 --> 01:21:57,076
During the workout, they also
remain instantly available even


1680
01:21:57,076 --> 01:21:59,226
if you switch to another
app to perform another task.


1681
01:22:00,016 --> 01:22:02,546
So if I jump out to the Music
app to change the current track,


1682
01:22:02,756 --> 01:22:04,306
after I've dropped my wrist,


1683
01:22:04,306 --> 01:22:07,026
I'll very shortly be
returned back to my workout.


1684
01:22:07,766 --> 01:22:09,936
We've also enhanced the
access to the heart rate


1685
01:22:09,936 --> 01:22:11,186
and accelerometer sensors


1686
01:22:11,186 --> 01:22:13,326
so that they now
provide continuous values


1687
01:22:13,696 --> 01:22:15,576
for the entire duration
of the workout as well.


1688
01:22:16,516 --> 01:22:20,586
[ Applause ]


1689
01:22:21,086 --> 01:22:22,366
In addition to these
sensor enhancements,


1690
01:22:22,366 --> 01:22:25,706
we've also got a whole bunch of
great, new hardware access APIs.


1691
01:22:26,066 --> 01:22:28,666
Crown events give you raw
access to rotation events


1692
01:22:28,666 --> 01:22:29,546
from the Digital Crown.


1693
01:22:30,566 --> 01:22:32,546
Gesture recognizers
make it really easy


1694
01:22:32,546 --> 01:22:36,006
to add custom tap interactions
to your apps, touch interactions


1695
01:22:36,006 --> 01:22:39,046
such as tap, swipe,
and pan, and of course,


1696
01:22:39,046 --> 01:22:40,796
the gyroscope is
now also accessible


1697
01:22:40,796 --> 01:22:42,166
in addition to the
accelerometer.


1698
01:22:43,516 --> 01:22:46,546
[ Applause ]


1699
01:22:47,046 --> 01:22:48,936
To make sure that you can do
really cool things with all


1700
01:22:48,936 --> 01:22:51,546
of these hardware access APIs,
we've also brought a bunch


1701
01:22:51,546 --> 01:22:53,506
of graphics and media
frameworks to the watchOS SDK.


1702
01:22:53,506 --> 01:22:57,356
SpriteKit and SceneKit give
you a ton of flexibility


1703
01:22:57,496 --> 01:22:59,796
to enhance the visuals
of your applications


1704
01:23:00,266 --> 01:23:01,976
and also your notifications.


1705
01:23:02,986 --> 01:23:05,386
AV Foundation makes it
really easy to play sounds


1706
01:23:05,386 --> 01:23:07,716
out of the watch
speaker, and in the spirit


1707
01:23:07,716 --> 01:23:09,286
of simplifying navigation
in your apps,


1708
01:23:09,556 --> 01:23:11,686
you can now play
video back inline


1709
01:23:11,686 --> 01:23:13,416
in your application
interfaces as well [applause].


1710
01:23:16,436 --> 01:23:18,646
Of course, you also
often need to get data on


1711
01:23:18,646 --> 01:23:20,826
and off the watch, and
to help make that easier,


1712
01:23:20,826 --> 01:23:23,836
as Toby mentioned, CloudKit is
now part of the watchOS SDK.


1713
01:23:23,836 --> 01:23:28,426
Because it's built on top of
NSURL session, it works even


1714
01:23:28,426 --> 01:23:29,466
when your phone's not present


1715
01:23:29,466 --> 01:23:31,556
and your watch is near
a known Wi-Fi network.


1716
01:23:32,686 --> 01:23:35,916
Apple Watch is already a great
way to pay for physical goods


1717
01:23:35,916 --> 01:23:39,946
in stores, and in watchOS 3,
you can now offer physical goods


1718
01:23:39,946 --> 01:23:42,666
for sale within your
own apps to be purchased


1719
01:23:42,666 --> 01:23:44,616
with just a double-tap
of the side button.


1720
01:23:46,046 --> 01:23:48,796
Building a great watch app
is just the first step.


1721
01:23:48,796 --> 01:23:50,966
It's also important that
you make it easy for users


1722
01:23:50,966 --> 01:23:52,966
to discover and install
your apps.


1723
01:23:52,966 --> 01:23:56,106
And to help you with that,
the new watch face gallery


1724
01:23:56,106 --> 01:23:59,406
in iOS X includes an
entire section devoted just


1725
01:23:59,406 --> 01:24:00,756
to displaying all of your apps.


1726
01:24:02,086 --> 01:24:03,596
With just a few simple steps,


1727
01:24:03,596 --> 01:24:06,376
you can create a complication
bundle which enables your app


1728
01:24:06,376 --> 01:24:07,836
to appear in the
watch face gallery.


1729
01:24:08,736 --> 01:24:11,146
It's the first thing that
a new watch owner will see


1730
01:24:11,286 --> 01:24:12,426
after they've paired
their watch,


1731
01:24:12,836 --> 01:24:14,376
and it displays the
complications


1732
01:24:14,376 --> 01:24:15,886
from all their favorite
apps that they use


1733
01:24:15,886 --> 01:24:17,696
on their iPhone every day.


1734
01:24:18,106 --> 01:24:21,206
This makes it really easy for
them to get their apps installed


1735
01:24:21,206 --> 01:24:22,956
and added right to
their watch face.


1736
01:24:24,276 --> 01:24:25,376
We've been working really hard


1737
01:24:25,376 --> 01:24:27,956
to give you all the tools you
need to build great, glanceable,


1738
01:24:27,956 --> 01:24:31,036
actionable, and responsive
apps, and we can't wait


1739
01:24:31,036 --> 01:24:32,276
to see what you're
going to do with them.


1740
01:24:32,726 --> 01:24:33,606
To give you some ideas


1741
01:24:33,606 --> 01:24:35,936
of how this can help
enhance your apps on watchOS.


1742
01:24:36,006 --> 01:24:38,046
Eliza Block will now come
up and give us a demo


1743
01:24:38,046 --> 01:24:41,296
of Background App Refresh and
some of the new graphics APIs.


1744
01:24:41,406 --> 01:24:41,796
Eliza?


1745
01:24:42,516 --> 01:24:47,166
[ Applause ]


1746
01:24:47,666 --> 01:24:50,796
>> Hi. So I have here an
application that I built


1747
01:24:50,796 --> 01:24:54,326
for watchOS 2, which shows
Max the panda, my friend,


1748
01:24:54,566 --> 01:24:58,796
and it tells me what his
mood is at different times.


1749
01:24:59,406 --> 01:25:01,896
So right now, you can
see that he's happy.


1750
01:25:02,416 --> 01:25:03,616
If I now suspend the app,


1751
01:25:04,696 --> 01:25:07,366
you can see that I have a
complication also telling me


1752
01:25:07,366 --> 01:25:11,176
that he's happy, but here is
a notification that tells me


1753
01:25:11,176 --> 01:25:12,786
that suddenly Max
has become hungry.


1754
01:25:13,636 --> 01:25:17,066
Now, this app for watchOS
2 has a few problems


1755
01:25:17,066 --> 01:25:18,066
which I'm going to show you now.


1756
01:25:18,526 --> 01:25:20,936
The first is that when I
dismiss the notification,


1757
01:25:21,456 --> 01:25:24,046
my complication has not
updated to reflect the fact


1758
01:25:24,256 --> 01:25:25,306
that Max is now hungry.


1759
01:25:26,556 --> 01:25:31,136
And even worse, when I go
into the Dock, the snapshot


1760
01:25:31,136 --> 01:25:34,886
of the app in the Dock also
has not updated, so I'm failing


1761
01:25:34,886 --> 01:25:38,146
to show a unified set of data


1762
01:25:38,566 --> 01:25:42,656
across all the interfaces
to my app.


1763
01:25:42,886 --> 01:25:46,026
So going now to the code,
there's a really easy way new


1764
01:25:46,026 --> 01:25:48,326
in watchOS 3 to address
these issues.


1765
01:25:49,866 --> 01:25:52,636
In my extension delegate, I
have a single funnel point,


1766
01:25:52,856 --> 01:25:55,806
Handle Background Tasks,
which is the perfect place


1767
01:25:55,886 --> 01:25:58,346
to update all of these
interfaces as my data changes.


1768
01:25:59,536 --> 01:26:01,946
Here in my Snapshot
Refresh background task,


1769
01:26:02,176 --> 01:26:03,776
I'm going to add just
two lines of code


1770
01:26:03,776 --> 01:26:05,096
to address both of
these problems.


1771
01:26:05,556 --> 01:26:07,666
The first is to update
my interface


1772
01:26:08,636 --> 01:26:12,436
for my current friend's
status, and second,


1773
01:26:12,436 --> 01:26:16,916
I'm going to also reload
my complication as well


1774
01:26:16,916 --> 01:26:19,446
when the snapshot is taken.


1775
01:26:19,446 --> 01:26:21,936
Okay, so that should address
the problems that we saw.


1776
01:26:22,256 --> 01:26:23,406
But while we're in here,


1777
01:26:23,406 --> 01:26:27,266
let me make this app a little
bit more fun because as you saw,


1778
01:26:27,266 --> 01:26:30,206
Max was kind of just a
static image in watchOS 2.


1779
01:26:30,566 --> 01:26:34,696
But in watchOS 3, we can
incorporate a SceneKit scene


1780
01:26:34,926 --> 01:26:36,216
to make some animation happen.


1781
01:26:37,536 --> 01:26:39,816
So I'm going to switch
over here to my interface,


1782
01:26:40,306 --> 01:26:42,046
and here's my application
interface.


1783
01:26:42,046 --> 01:26:47,976
I'm going to delete the image
and drag in a SceneKit scene.


1784
01:26:51,116 --> 01:26:54,056
Now, I wrote a tiny bit
of code earlier just


1785
01:26:54,056 --> 01:26:57,416
to populate this scene
with some SceneKit assets


1786
01:26:57,416 --> 01:26:59,676
and to make an outlet, which
I'll connect right now.


1787
01:27:00,636 --> 01:27:04,196
Drag it into my SceneKit
interface.


1788
01:27:05,706 --> 01:27:08,276
Now, not only can you
add a SceneKit scene


1789
01:27:08,276 --> 01:27:11,026
to your application itself,
but you can also add one


1790
01:27:11,026 --> 01:27:13,696
to the notification, which
will be a lot more fun


1791
01:27:13,766 --> 01:27:15,286
than a text-based notification.


1792
01:27:15,966 --> 01:27:17,776
I'm going to drag one
into there as well.


1793
01:27:17,776 --> 01:27:21,266
I need to resize
this a little bit.


1794
01:27:22,496 --> 01:27:24,446
Hook it up to the outlet.


1795
01:27:29,566 --> 01:27:31,396
All right, and with those
changes, I'm going to go ahead


1796
01:27:31,396 --> 01:27:32,486
and run this application again,


1797
01:27:32,596 --> 01:27:35,496
and we'll hopefully see
something a little bit more


1798
01:27:35,496 --> 01:27:36,566
dynamic this time.


1799
01:27:46,346 --> 01:27:48,506
So here we have a much
happier looking version


1800
01:27:48,506 --> 01:27:53,226
of Max running around, and when
I now suspend the application,


1801
01:27:54,266 --> 01:27:55,666
wait for him to get hungry.


1802
01:28:00,226 --> 01:28:02,876
We see a really sad,
more convincing version


1803
01:28:03,046 --> 01:28:04,656
of Max rubbing his tummy.


1804
01:28:05,516 --> 01:28:08,606
[ Applause ]


1805
01:28:09,106 --> 01:28:10,596
So I think this is
a lot more fun.


1806
01:28:10,596 --> 01:28:14,376
When I dismiss the notification,
my complication has updated


1807
01:28:14,376 --> 01:28:18,216
as we hoped to reflect his
current status, and if I look


1808
01:28:18,216 --> 01:28:20,096
in the Dock, you can see


1809
01:28:20,096 --> 01:28:22,596
that the snapshot has also
now been updated to reflect


1810
01:28:22,656 --> 01:28:23,886
that he's hungry
and no longer happy.


1811
01:28:24,386 --> 01:28:27,286
So that's just a few of the
new things you can do which,


1812
01:28:27,286 --> 01:28:29,356
with the new APIs in watchOS 3.


1813
01:28:29,356 --> 01:28:30,876
We're excited to see
what you guys build.


1814
01:28:31,256 --> 01:28:33,116
And next up, I'd like
to invite Jim Young


1815
01:28:33,116 --> 01:28:34,666
to the stage to talk about tvOS.


1816
01:28:36,516 --> 01:28:42,636
[ Applause ]


1817
01:28:43,136 --> 01:28:43,616
>> Thanks, Eliza.


1818
01:28:44,196 --> 01:28:46,656
We've been super excited
since bringing the App Store


1819
01:28:46,656 --> 01:28:48,546
to Apple TV just
this last October


1820
01:28:49,716 --> 01:28:53,176
because we believe the future
of TV is apps, and since then,


1821
01:28:53,176 --> 01:28:56,926
you guys have been very
busy bringing over 6000 apps


1822
01:28:56,976 --> 01:29:00,166
to the App Store, including
entertainment apps, games,


1823
01:29:00,386 --> 01:29:02,866
health and fitness, and
education apps, and many more.


1824
01:29:03,716 --> 01:29:06,376
So let's talk about what it
means to develop on tvOS.


1825
01:29:07,756 --> 01:29:09,156
First, it's already
familiar to you.


1826
01:29:09,156 --> 01:29:11,576
You use all the tools and
languages you already know.


1827
01:29:13,036 --> 01:29:14,916
And tvOS includes the
essential frameworks


1828
01:29:14,916 --> 01:29:16,626
that you're familiar
with from iOS.


1829
01:29:17,786 --> 01:29:20,126
Plus, we've got some
new frameworks specific


1830
01:29:20,126 --> 01:29:21,076
to tvOS that we've built.


1831
01:29:22,556 --> 01:29:24,296
There's all the foundational
support you need


1832
01:29:24,296 --> 01:29:25,206
for building great apps.


1833
01:29:25,576 --> 01:29:28,366
We have a rich media stack
for audio/video apps.


1834
01:29:28,366 --> 01:29:31,506
And of course, we've got
excellent support for games.


1835
01:29:31,506 --> 01:29:35,696
And we're bringing even more
features to the platform.


1836
01:29:36,456 --> 01:29:38,926
With PhotoKit, you can now
create these great apps


1837
01:29:38,956 --> 01:29:41,016
that showcase users'
photos on their big screen,


1838
01:29:41,886 --> 01:29:45,726
and we've made it super easy to
add support for light and dark,


1839
01:29:46,176 --> 01:29:47,706
excuse me, our light/dark
appearance.


1840
01:29:49,986 --> 01:29:51,386
So it's a rich set
of technologies,


1841
01:29:51,386 --> 01:29:52,446
and this is just a partial list.


1842
01:29:52,446 --> 01:29:53,336
There's a whole lot more.


1843
01:29:54,116 --> 01:29:58,546
Let's talk about using
all these technologies


1844
01:29:58,546 --> 01:29:59,496
and bringing them all together


1845
01:29:59,496 --> 01:30:02,976
to deliver a great
experience on tvOS.


1846
01:30:03,126 --> 01:30:05,416
And I want to start with Touch.


1847
01:30:05,416 --> 01:30:07,186
When designing tvOS,
we knew we wanted


1848
01:30:07,186 --> 01:30:09,536
to bring a first-class Touch
experience into the living room.


1849
01:30:10,606 --> 01:30:12,496
Now, Touch needs to feel
fluid and connected.


1850
01:30:12,496 --> 01:30:14,116
It needs to be predictable.


1851
01:30:14,116 --> 01:30:15,206
It needs to be fun.


1852
01:30:16,026 --> 01:30:17,716
That's a particular
challenge in the living room


1853
01:30:17,716 --> 01:30:19,006
when the TV's 10 feet away.


1854
01:30:21,096 --> 01:30:22,426
So let's look at
how we solve this.


1855
01:30:22,896 --> 01:30:26,076
We have updated UIKit
so that all the controls


1856
01:30:26,076 --> 01:30:27,896
and views look beautiful
on the big screen.


1857
01:30:29,206 --> 01:30:31,876
We've added UIFocus to allow
you to indicate which elements


1858
01:30:31,876 --> 01:30:33,126
of your UI are focusable.


1859
01:30:34,336 --> 01:30:37,546
And we have updated
UIMotionEffect so it takes input


1860
01:30:37,546 --> 01:30:38,506
from the focus engine.


1861
01:30:39,586 --> 01:30:41,586
Now, altogether this
provides a direct connection


1862
01:30:41,586 --> 01:30:43,256
between what the user
is doing with the remote


1863
01:30:43,256 --> 01:30:44,896
and what they see
on the big screen.


1864
01:30:46,926 --> 01:30:48,786
Good news here is that we've
done all the heavy lifting


1865
01:30:48,846 --> 01:30:49,356
for you.


1866
01:30:50,136 --> 01:30:51,766
Your UIKit apps will get
all of this for free.


1867
01:30:53,796 --> 01:30:55,126
Now, if you have a
server-based app,


1868
01:30:55,416 --> 01:30:56,696
apps used to deliver content.


1869
01:30:57,076 --> 01:30:58,996
We've got a lot of great apps
like this one from Showtime.


1870
01:30:59,806 --> 01:31:01,646
We have a technology
called TVMLKit,


1871
01:31:01,646 --> 01:31:02,876
a framework called TVMLKit.


1872
01:31:04,036 --> 01:31:07,236
TVMLKit is a new, high-level
framework we built specifically


1873
01:31:07,236 --> 01:31:07,756
for tvOS.


1874
01:31:08,766 --> 01:31:11,306
It's built on top of
UIKit so you get all


1875
01:31:11,306 --> 01:31:13,376
that connective Touch
experience that we just showed.


1876
01:31:15,156 --> 01:31:16,496
We provide a large
set of templates,


1877
01:31:16,906 --> 01:31:18,826
and you can even provide
your own custom templates


1878
01:31:19,096 --> 01:31:20,076
and native controls.


1879
01:31:21,936 --> 01:31:24,346
TVMLKit has allowed teams
to build these beautiful,


1880
01:31:24,346 --> 01:31:27,296
highly stylized, customized
apps in a short amount of time.


1881
01:31:29,666 --> 01:31:32,636
Let's now talk about how you can
extend the experience outside


1882
01:31:32,636 --> 01:31:36,116
of Apple TV by integrating
with other Apple devices.


1883
01:31:37,646 --> 01:31:39,536
One easy thing to do is
to save app and game state


1884
01:31:39,536 --> 01:31:40,666
in the cloud using CloudKit.


1885
01:31:41,966 --> 01:31:44,436
Making it easier for users to
start a game on their Apple TV


1886
01:31:44,866 --> 01:31:46,466
and pick it up and resume
right where they left off


1887
01:31:46,466 --> 01:31:47,946
on their iPhone or iPad.


1888
01:31:52,586 --> 01:31:53,726
We've also seen some great apps


1889
01:31:53,726 --> 01:31:55,736
that use multiple Apple
devices at the same time.


1890
01:31:56,576 --> 01:31:58,496
With SongPop Party
from FreshPlanet,


1891
01:31:58,556 --> 01:32:00,586
the whole family can
play using their iPhone


1892
01:32:01,336 --> 01:32:03,196
to answer music trivia
questions.


1893
01:32:03,196 --> 01:32:07,166
And to make it even easier
to create apps that talk


1894
01:32:07,196 --> 01:32:08,256
to each other across devices,


1895
01:32:08,256 --> 01:32:10,356
we're bringing Multipeer
Connectivity to the platform.


1896
01:32:11,256 --> 01:32:12,306
Just a few lines of code--


1897
01:32:13,516 --> 01:32:17,146
[ Applause ]


1898
01:32:17,646 --> 01:32:19,506
Just a few lines of code,
you can easily connect


1899
01:32:19,506 --> 01:32:21,106
to your apps running
on a different device.


1900
01:32:23,366 --> 01:32:25,806
Now, this morning, we announced
the new Apple TV Remote app.


1901
01:32:26,326 --> 01:32:27,746
Now everyone in your household


1902
01:32:27,856 --> 01:32:30,276
that has an iPhone can have an
Apple TV Remote in their hands.


1903
01:32:32,306 --> 01:32:33,706
To your apps it looks
and behaves just


1904
01:32:33,706 --> 01:32:36,526
like the Siri Remote, but
we've added a couple features


1905
01:32:36,526 --> 01:32:37,676
to take advantage of the screen.


1906
01:32:38,946 --> 01:32:41,586
The Now Playing screen provides
a full set of playback controls


1907
01:32:41,586 --> 01:32:43,016
as well as cover
art for your media.


1908
01:32:44,486 --> 01:32:47,506
Just like showing art and
controls on the iOS lock screen,


1909
01:32:47,736 --> 01:32:50,316
use the Media Player Remote
-- I always get this one --


1910
01:32:50,316 --> 01:32:51,526
Media Player Remote Command API


1911
01:32:51,526 --> 01:32:55,106
to add this information
to Remote app.


1912
01:32:55,936 --> 01:32:58,386
The app also provides a
screen designed for gameplay.


1913
01:32:58,386 --> 01:33:01,286
To your game, the new app shows


1914
01:33:01,286 --> 01:33:04,416
up as a micro gamepad
just like the Siri Remote.


1915
01:33:05,296 --> 01:33:07,956
To take advantage of multiple
micro gamepads, you need to opt


1916
01:33:07,956 --> 01:33:09,996
in by setting an Info.plist key.


1917
01:33:10,516 --> 01:33:14,516
In addition to Siri Remote
and the new Remote app,


1918
01:33:14,986 --> 01:33:17,396
tvOS also supports
MFi game controllers.


1919
01:33:18,916 --> 01:33:20,776
And coming this fall,
tvOS will also support


1920
01:33:20,776 --> 01:33:22,676
up to four simultaneous
game controllers.


1921
01:33:23,516 --> 01:33:28,766
[ Applause ]


1922
01:33:29,266 --> 01:33:30,746
But we didn't want
to stop there.


1923
01:33:31,406 --> 01:33:33,286
We wanted to enable
even more awesome games.


1924
01:33:33,826 --> 01:33:36,016
We wanted to enable games
that might require these kind


1925
01:33:36,016 --> 01:33:39,126
of controllers, so
we're happy to announce


1926
01:33:39,766 --> 01:33:41,756
that we're updating
our controller policy.


1927
01:33:42,906 --> 01:33:45,586
You can narrow your games to
require a game controller.


1928
01:33:46,516 --> 01:33:53,546
[ Applause ]


1929
01:33:54,046 --> 01:33:56,316
tvOS will check if the
required controller is present


1930
01:33:56,316 --> 01:33:57,846
and prompt the user
if it's necessary.


1931
01:33:59,946 --> 01:34:01,396
That's an update on tvOS.


1932
01:34:01,506 --> 01:34:03,616
We're super happy to be here.


1933
01:34:03,616 --> 01:34:04,886
We've got a lot of
labs and sessions


1934
01:34:04,956 --> 01:34:07,716
with the tvOS engineers there,
so please come by and stop by.


1935
01:34:08,206 --> 01:34:10,186
Next, I want to introduce
Geoff Stahl is going to come up


1936
01:34:10,186 --> 01:34:11,616
and talk about graphics
technologies.


1937
01:34:11,846 --> 01:34:12,026
Geoff?


1938
01:34:13,516 --> 01:34:15,796
[ Applause ]


1939
01:34:16,296 --> 01:34:16,706
>> Thanks, Jim.


1940
01:34:18,716 --> 01:34:19,726
So I'm going to talk
about graphics.


1941
01:34:19,726 --> 01:34:22,706
I'm going to talk about a
couple areas of graphics.


1942
01:34:23,176 --> 01:34:25,446
We have really great
things to talk about today,


1943
01:34:25,546 --> 01:34:26,696
and I'll start with color.


1944
01:34:28,386 --> 01:34:32,236
So we're building
astonishing new displays


1945
01:34:32,236 --> 01:34:35,856
for our latest iPads and
Macs, ones that are capable


1946
01:34:35,856 --> 01:34:38,266
of reproducing absolutely
stunning color.


1947
01:34:39,466 --> 01:34:41,526
In fact, as DisplayMate says,


1948
01:34:41,526 --> 01:34:45,956
"The color accuracy is visually
indistinguishable from perfect."


1949
01:34:47,386 --> 01:34:48,076
So how do we do this?


1950
01:34:48,076 --> 01:34:49,976
Well, this is all
about color gamut.


1951
01:34:51,246 --> 01:34:54,476
So most displays are built
with the sRGB color gamut,


1952
01:34:54,476 --> 01:34:57,596
which is narrow and doesn't
reproduce all the colors you


1953
01:34:57,596 --> 01:35:00,386
would see in life accurately
of things like flowers


1954
01:35:00,386 --> 01:35:03,086
or paint colors or maybe
even the clothes you wear.


1955
01:35:04,226 --> 01:35:08,786
So we're moving to the wide P3
color gamut, which contributes


1956
01:35:08,786 --> 01:35:11,366
to our ability to really
accurately reproduce


1957
01:35:11,406 --> 01:35:12,816
and render these
real-life objects.


1958
01:35:13,706 --> 01:35:16,046
But we're not stopping there.


1959
01:35:16,046 --> 01:35:18,056
We're going to go
all in on color.


1960
01:35:18,506 --> 01:35:22,276
From our system APIs to
our system applications,


1961
01:35:22,456 --> 01:35:24,156
we support deep and
wide color throughout.


1962
01:35:24,576 --> 01:35:27,786
And if you're an
application using UIImageView


1963
01:35:28,096 --> 01:35:30,476
or UIView, you get it for free.


1964
01:35:30,476 --> 01:35:31,886
You get it automatically.


1965
01:35:31,886 --> 01:35:35,936
If you have to manipulate wide
colors yourself synthetically,


1966
01:35:35,936 --> 01:35:37,926
we also offer APIs for that.


1967
01:35:39,576 --> 01:35:41,356
And of course, we have
a great capture story.


1968
01:35:41,936 --> 01:35:44,436
Our latest cameras support
capturing deep and wide color.


1969
01:35:45,076 --> 01:35:47,956
We have APIs to access
raw images.


1970
01:35:48,986 --> 01:35:52,676
And we can also now capture
with APIs LivePhotos.


1971
01:35:52,676 --> 01:35:54,816
So that's color.


1972
01:35:56,516 --> 01:36:00,556
[ Applause ]


1973
01:36:01,056 --> 01:36:01,726
I'd like to talk


1974
01:36:01,726 --> 01:36:04,046
about technology now
that's changed the direction


1975
01:36:04,046 --> 01:36:05,696
of industry, and that's Metal.


1976
01:36:06,906 --> 01:36:08,756
Metal we introduced
two years ago


1977
01:36:08,756 --> 01:36:10,516
and has been wildly successful.


1978
01:36:10,516 --> 01:36:13,126
And keep in mind, when
we developed Metal,


1979
01:36:13,326 --> 01:36:16,666
when we enhance it, we enhance
it with our devices in mind.


1980
01:36:16,666 --> 01:36:19,676
Which allows us to innovate
in a rapid pace with things


1981
01:36:19,676 --> 01:36:22,676
like Metal tessellation that
allows high-order surfaces


1982
01:36:22,866 --> 01:36:25,076
for rendering accuracy
like never before


1983
01:36:26,146 --> 01:36:27,986
or Metal function
specialization.


1984
01:36:28,216 --> 01:36:31,716
Which when combined with S
code allows you to build a set


1985
01:36:31,716 --> 01:36:34,266
of shaders that automatically
handling your material


1986
01:36:34,266 --> 01:36:35,606
and lighting properties
in your scene.


1987
01:36:36,206 --> 01:36:39,406
And for things like
memoryless render targets,


1988
01:36:39,686 --> 01:36:42,416
which use the architecture
of our Tile cash


1989
01:36:42,876 --> 01:36:44,276
to reduce the amount
of memory used


1990
01:36:44,276 --> 01:36:46,186
in your application
or resource use.


1991
01:36:46,526 --> 01:36:47,896
Which allows your application


1992
01:36:47,896 --> 01:36:51,526
to specialize the way it handles
memory within a Metal app.


1993
01:36:54,736 --> 01:36:55,906
And Metal is everywhere.


1994
01:36:56,226 --> 01:36:59,406
Hundreds of millions
of devices use Metal.


1995
01:37:00,456 --> 01:37:01,756
Our key graphics frameworks


1996
01:37:01,886 --> 01:37:04,026
and major game engines
are built on top of it.


1997
01:37:05,776 --> 01:37:07,476
So whether you're
using a high-level API


1998
01:37:07,476 --> 01:37:09,806
or programming directly
to Metal itself,


1999
01:37:09,836 --> 01:37:13,246
you get all the performance
optimizations we've built in.


2000
01:37:14,766 --> 01:37:15,766
Another thing about Metal,


2001
01:37:15,996 --> 01:37:18,036
it's one of our foundational
technologies


2002
01:37:18,616 --> 01:37:19,626
of our games ecosystem.


2003
01:37:19,626 --> 01:37:21,236
So let's talk about games.


2004
01:37:23,776 --> 01:37:26,906
Over the past few years, we've
built a great games ecosystem,


2005
01:37:27,056 --> 01:37:30,936
and the goal of this is to
build the APIs and tools


2006
01:37:30,936 --> 01:37:33,406
which allow you to take
your ideas in gaming


2007
01:37:33,526 --> 01:37:34,686
and turn them into reality.


2008
01:37:34,856 --> 01:37:37,006
I want to cover some
highlights here today.


2009
01:37:38,386 --> 01:37:40,206
First, as mentioned this
morning, Replay Kit.


2010
01:37:40,996 --> 01:37:42,416
We introduced Replay
Kit last year,


2011
01:37:42,416 --> 01:37:43,996
and it's really super
easy to adopt.


2012
01:37:44,676 --> 01:37:48,386
It allows your users to start
a recording, play their game,


2013
01:37:49,846 --> 01:37:53,036
edit that recording, and then
share with their friends.


2014
01:37:54,196 --> 01:37:56,036
Well, this year, we're
going to take it up a notch


2015
01:37:56,576 --> 01:37:59,056
with ReplayKit Streaming.


2016
01:38:00,186 --> 01:38:03,076
Now, Replay Kit can
live stream to services


2017
01:38:03,076 --> 01:38:05,456
that support the ReplayKit
Streaming Extension.


2018
01:38:06,016 --> 01:38:11,296
This allows your users to not
just go from, not just share


2019
01:38:11,296 --> 01:38:13,396
with their friends
but stream live


2020
01:38:13,476 --> 01:38:16,796
to the internet automatically
with ReplayKit Live Streaming.


2021
01:38:16,926 --> 01:38:18,566
And the -- absolutely.


2022
01:38:19,516 --> 01:38:22,976
[ Applause ]


2023
01:38:23,476 --> 01:38:26,586
And even better, it's about
three lines of code to adopt


2024
01:38:26,586 --> 01:38:27,716
if you already use Replay Kit.


2025
01:38:27,716 --> 01:38:31,096
This is super easy and could
really expand the social reach


2026
01:38:31,206 --> 01:38:32,246
of your applications.


2027
01:38:33,026 --> 01:38:37,456
So speaking of social, let's
talk about Game Center.


2028
01:38:37,616 --> 01:38:40,026
We're changing the way that
Game Center Multiplayer works.


2029
01:38:40,526 --> 01:38:42,586
Now with our latest OS's,


2030
01:38:42,996 --> 01:38:46,026
you can invite anyone you
can send a message to.


2031
01:38:46,026 --> 01:38:47,986
So your users can invite
anyone they can reach


2032
01:38:47,986 --> 01:38:50,126
out via message,
and it is that easy.


2033
01:38:50,126 --> 01:38:52,366
It's just as easy as
sending a message.


2034
01:38:53,716 --> 01:38:55,996
And the cool thing here is if
you're already using the games


2035
01:38:55,996 --> 01:38:58,516
that are multiplayer APIs,
you don't need to do anything.


2036
01:38:58,846 --> 01:39:00,826
With the latest OS's,
this just works,


2037
01:39:00,826 --> 01:39:04,016
and we're not going
to stop with that.


2038
01:39:04,436 --> 01:39:08,716
We're going to add new
APIs to Game Center.


2039
01:39:09,046 --> 01:39:10,006
Game Center Sessions.


2040
01:39:10,766 --> 01:39:14,456
Game Center Sessions creates a
persistent, shared experience


2041
01:39:14,676 --> 01:39:16,166
where users can come and go.


2042
01:39:16,436 --> 01:39:19,496
This means you can design your
games with the mobile user


2043
01:39:19,496 --> 01:39:21,436
in mind the way they come and go


2044
01:39:21,436 --> 01:39:24,206
into your application that's
allowing a new paradigm


2045
01:39:24,446 --> 01:39:26,096
in multiplayer gaming
in the mobile space.


2046
01:39:28,846 --> 01:39:30,446
Finally, GameplayKit.


2047
01:39:30,446 --> 01:39:32,796
GameplayKit is our
component-based API


2048
01:39:33,536 --> 01:39:35,896
that allows you to instance
and customize these components


2049
01:39:36,336 --> 01:39:38,416
and make the building blocks
for your game objects,


2050
01:39:38,706 --> 01:39:40,306
letting us do the
heavy lifting for you.


2051
01:39:40,306 --> 01:39:45,886
And I'd like to invite Norman
Wang on stage to give a demo


2052
01:39:45,886 --> 01:39:48,276
of these components and
our Xcode gameplay tools.


2053
01:39:49,516 --> 01:39:54,606
[ Applause ]


2054
01:39:55,106 --> 01:39:55,716
>> Thanks, Geoff.


2055
01:39:55,986 --> 01:40:00,186
I'd like to show you how quickly
I can build a game in Xcode 8.


2056
01:40:00,436 --> 01:40:02,396
Here's a game project
I'm currently working on.


2057
01:40:03,156 --> 01:40:05,496
It's a competitive
game involving a hero


2058
01:40:05,496 --> 01:40:07,936
and enemies throwing paint
balloons at each other.


2059
01:40:08,856 --> 01:40:11,456
Now, I have been using the
new APIs from SpriteKit


2060
01:40:11,456 --> 01:40:12,656
and GameplayKit this year.


2061
01:40:13,076 --> 01:40:15,906
As you can see, the game
needs three major elements


2062
01:40:15,946 --> 01:40:20,156
to be ready; a map, a hero,
and the gameplay pieces.


2063
01:40:20,836 --> 01:40:25,436
I have already implemented the
hero's movement and animation,


2064
01:40:25,616 --> 01:40:28,296
but it is clearly
missing the collision


2065
01:40:28,296 --> 01:40:32,616
with the island bounds, so
let's go ahead and fix that.


2066
01:40:32,616 --> 01:40:34,496
Opening our Xcode
project and looking


2067
01:40:34,496 --> 01:40:35,836
at the source code section,


2068
01:40:36,406 --> 01:40:39,436
I have already written a
few gameplay behaviors using


2069
01:40:39,436 --> 01:40:41,776
GKComponent provided
by GameplayKit,


2070
01:40:42,276 --> 01:40:43,506
like the fight component here.


2071
01:40:44,226 --> 01:40:47,656
And in Xcode 8, I
can now expose any


2072
01:40:47,656 --> 01:40:52,766
of my class properties
that's defined in my class


2073
01:40:52,766 --> 01:40:56,236
to the 2D editor then I can
customize whenever the behavior


2074
01:40:56,236 --> 01:40:58,146
gets attached to one
entity in the scene.


2075
01:40:59,236 --> 01:41:00,546
So to build the island map,


2076
01:41:01,046 --> 01:41:03,286
I've been using the
new Tiled Map Editor.


2077
01:41:03,836 --> 01:41:06,486
So in my game, there's
three different tile sets


2078
01:41:06,946 --> 01:41:07,886
that I have specified.


2079
01:41:08,516 --> 01:41:10,386
There's sand, water, and grass.


2080
01:41:11,416 --> 01:41:15,166
Not only do I have the ability
to specify both the interior


2081
01:41:15,166 --> 01:41:18,526
and exterior tiles, I can
also introduce variance.


2082
01:41:19,006 --> 01:41:21,556
So here for the red
edge, for example,


2083
01:41:21,946 --> 01:41:25,236
for this individual tile image,
if I want to add a new look


2084
01:41:25,236 --> 01:41:28,646
to it to get rid of the small
rock, I can simply just drag it


2085
01:41:28,646 --> 01:41:29,826
in from the Media Library.


2086
01:41:30,316 --> 01:41:32,016
And now this tile
set is complete.


2087
01:41:32,496 --> 01:41:34,886
Let me go ahead and show
you how I can use this.


2088
01:41:35,576 --> 01:41:41,766
So switching back to the island
map, the island is constructed


2089
01:41:41,826 --> 01:41:44,146
with the new tile map
functionality with,


2090
01:41:44,146 --> 01:41:47,376
provided by SpriteKit, so
to make a modification,


2091
01:41:47,376 --> 01:41:48,976
I can simply select
the tile map.


2092
01:41:49,336 --> 01:41:51,946
Make a double click, and
select the active tile


2093
01:41:51,946 --> 01:41:53,106
that I want to work on.


2094
01:41:53,426 --> 01:41:56,226
Now that I think the island
looks a little bit too plain,


2095
01:41:56,646 --> 01:42:00,656
and to make such modifications,
I can just simply paint


2096
01:42:00,966 --> 01:42:05,286
across the level and Xcode will
automatically paint the correct


2097
01:42:05,366 --> 01:42:07,226
tiles to make it with
surrounding neighbors.


2098
01:42:07,496 --> 01:42:08,116
It's that easy.


2099
01:42:09,096 --> 01:42:11,966
So now I think I got the look
I'm going after with the island.


2100
01:42:12,116 --> 01:42:14,016
Let's look at some of the
gameplay elements here.


2101
01:42:14,806 --> 01:42:20,346
To power the hero, our hero's
movement and animation,


2102
01:42:20,346 --> 01:42:22,966
I have already attached
the player input component


2103
01:42:23,016 --> 01:42:24,076
and the move component.


2104
01:42:24,836 --> 01:42:29,126
And to make the player
respect the island boundaries,


2105
01:42:29,296 --> 01:42:32,296
I can simply add a collision
component to have implemented.


2106
01:42:32,886 --> 01:42:35,406
So this way, it will
automatically create a physics


2107
01:42:35,406 --> 01:42:37,986
body for our hero
and the islands based


2108
01:42:37,986 --> 01:42:40,986
on the current tile sets
that's being set up.


2109
01:42:41,336 --> 01:42:43,166
And to give the player
the ability


2110
01:42:43,166 --> 01:42:45,006
to throw the water balloons,


2111
01:42:45,006 --> 01:42:47,516
I can simply add the
fight component to it.


2112
01:42:47,976 --> 01:42:51,246
And notice here how the
health property being exposed


2113
01:42:51,246 --> 01:42:53,616
by the fight component
class is now visible.


2114
01:42:53,616 --> 01:42:56,316
I can give it a custom
value here.


2115
01:42:56,316 --> 01:42:59,706
So for example, I can set
the value to be 2 rather


2116
01:42:59,706 --> 01:43:01,786
than using the default
value of 1.


2117
01:43:02,456 --> 01:43:05,736
And in addition, I have
a drone that drops the,


2118
01:43:06,046 --> 01:43:08,146
these paint balloons
on the level


2119
01:43:08,416 --> 01:43:10,376
and I have a enemy
that's in the scene.


2120
01:43:11,026 --> 01:43:14,106
So to give the enemy the same
fighting ability by picking


2121
01:43:14,106 --> 01:43:16,676
up the paint balloons
and throw at me,


2122
01:43:17,066 --> 01:43:19,146
I'm going to give the
same fight component.


2123
01:43:19,676 --> 01:43:21,406
And to make this a fair game,


2124
01:43:21,406 --> 01:43:24,126
I'm going to give the same
health level of 2 rather


2125
01:43:24,126 --> 01:43:26,616
than using the default
value of 1.


2126
01:43:27,796 --> 01:43:30,236
Now, I think my level
is set up pretty good.


2127
01:43:30,236 --> 01:43:33,206
Let's run it and check it
out, the new implementation.


2128
01:43:34,526 --> 01:43:35,426
So the drones are going


2129
01:43:35,426 --> 01:43:38,126
to be dropping randomly
the paint balloons


2130
01:43:38,126 --> 01:43:40,376
and the paintball
fighter will start.


2131
01:43:40,376 --> 01:43:42,906
So looks like all the
elements are all there.


2132
01:43:43,196 --> 01:43:48,186
So in Xcode 8, it's very easy to
implement the level of the game


2133
01:43:48,186 --> 01:43:52,826
and connect all these
gameplay logics fairly quickly.


2134
01:43:53,076 --> 01:43:55,526
Because I'm using
SpriteKit and GameplayKit,


2135
01:43:55,526 --> 01:43:58,386
my game will automatically
run on all Apple platforms.


2136
01:43:59,296 --> 01:43:59,756
Thank you.


2137
01:43:59,926 --> 01:44:00,706
Now, back to Andreas.


2138
01:44:01,516 --> 01:44:06,546
[ Applause ]


2139
01:44:07,046 --> 01:44:08,156
>> Thank you, Norman.


2140
01:44:08,156 --> 01:44:10,386
All right, so just quickly
review the most important points


2141
01:44:10,386 --> 01:44:11,066
we talked about.


2142
01:44:12,146 --> 01:44:15,206
There are now four Apple
OS platforms, each of them


2143
01:44:15,306 --> 01:44:17,366
with their own App Store that
you can bring your ideas to.


2144
01:44:18,446 --> 01:44:21,996
And today we added a large
variety of new extension points


2145
01:44:22,036 --> 01:44:24,916
that allow you to hook
even deeper into our OS's.


2146
01:44:25,486 --> 01:44:27,216
Perhaps most importantly,
we recommend


2147
01:44:27,216 --> 01:44:30,306
that you consider creating
an iMessage App and also


2148
01:44:30,306 --> 01:44:32,086
that you integrate
your apps with SiriKit.


2149
01:44:33,066 --> 01:44:33,956
But these are just two


2150
01:44:33,956 --> 01:44:36,066
of the many new APIs we
are announcing today.


2151
01:44:36,996 --> 01:44:39,336
And support for all of
them will be provided


2152
01:44:39,366 --> 01:44:41,376
by a new version
of our Xcode IDE.


2153
01:44:41,696 --> 01:44:44,876
Xcode 8 is going to run on
Mac OS El Capitan and Sierra.


2154
01:44:44,936 --> 01:44:46,656
Now, of course, it
also has support


2155
01:44:46,656 --> 01:44:48,046
for developing with Swift 3.


2156
01:44:49,376 --> 01:44:51,736
Now, all these technologies
are available for download


2157
01:44:51,736 --> 01:44:53,946
from the WWDC Attendee
Portal today,


2158
01:44:53,946 --> 01:44:56,916
so you can get early access and
use the time later in the year


2159
01:44:56,916 --> 01:44:59,616
when we ship out products to
get ready for all launches,


2160
01:44:59,756 --> 01:45:02,506
create even more powerful and
unique apps for your users.


2161
01:45:03,816 --> 01:45:05,726
Also, go and check out the
new Swift Playgrounds app,


2162
01:45:06,216 --> 01:45:07,746
which we're including in
the iOS X Developer Preview.


2163
01:45:07,746 --> 01:45:10,286
I think you're going to
have a ton of fun with it


2164
01:45:10,666 --> 01:45:12,736
and perhaps you'll consider
creating additional content


2165
01:45:12,796 --> 01:45:15,036
for your kids to start
learning how to program Swift.


2166
01:45:16,256 --> 01:45:18,096
Now, there are many
opportunities here


2167
01:45:18,096 --> 01:45:20,156
at the conference for you to
learn more about everything


2168
01:45:20,156 --> 01:45:21,196
that we announced today.


2169
01:45:21,196 --> 01:45:23,046
There's more than 100
sessions you can attend


2170
01:45:23,046 --> 01:45:23,896
and even more labs.


2171
01:45:24,296 --> 01:45:27,106
You can meet every engineer
you see on site one on one.


2172
01:45:27,106 --> 01:45:29,296
They are here to answer
you specific questions.


2173
01:45:30,296 --> 01:45:32,006
So I hope you enjoyed the
session and I'll see you


2174
01:45:32,006 --> 01:45:33,376
around later this week.


2175
01:45:34,516 --> 01:45:40,500
[ Applause ]

