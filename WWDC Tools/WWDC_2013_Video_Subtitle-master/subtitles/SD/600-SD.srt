1
00:00:00,506 --> 00:00:13,156
[ Silence ]


2
00:00:13,656 --> 00:00:14,776
>> Hi, everyone.


3
00:00:14,776 --> 00:00:15,606
Good morning.


4
00:00:16,036 --> 00:00:17,636
Welcome to Session 600.


5
00:00:17,746 --> 00:00:20,436
What's new in Safari and
WebKit for Web Developers?


6
00:00:20,826 --> 00:00:22,566
I'm Beth Dakin and
I'm an engineer


7
00:00:22,566 --> 00:00:24,106
on the Safari and WebKit team.


8
00:00:24,836 --> 00:00:28,736
So, most of you probably know
that WebKit is the engine


9
00:00:28,736 --> 00:00:30,956
that powers Safari
on all platforms.


10
00:00:31,376 --> 00:00:35,796
It's responsible for loading,
parsing, interpreting, managing


11
00:00:35,796 --> 00:00:39,086
and rendering web
content in Safari.


12
00:00:39,256 --> 00:00:43,216
But not just Safari, you may
not know that WebKit is used


13
00:00:43,216 --> 00:00:45,566
for key parts of user
interface and many


14
00:00:45,566 --> 00:00:47,736
of the core apps
on OS X and iOS.


15
00:00:49,096 --> 00:00:51,546
And of course WebKit is
used in a ton of apps


16
00:00:51,856 --> 00:00:52,936
that are in the App Stores.


17
00:00:53,236 --> 00:00:54,986
Many of you are using WebKit


18
00:00:54,986 --> 00:00:57,266
for your website's apps
and digitals books.


19
00:00:57,706 --> 00:00:59,616
So, it's important for you
to know about the latest


20
00:00:59,616 --> 00:01:01,066
and greatest WebKit changes.


21
00:01:01,656 --> 00:01:06,116
You're probably wondering
what we've been up to.


22
00:01:06,346 --> 00:01:08,756
Well, WebKit is a thriving
open source community


23
00:01:08,756 --> 00:01:12,856
where there have been over 3,000
changes since last year's WWDC.


24
00:01:13,026 --> 00:01:14,606
So, there is a lot
to talk about.


25
00:01:15,056 --> 00:01:18,156
We couldn't possibly cover all
of these topics in the next hour


26
00:01:18,156 --> 00:01:19,826
and the number of these
things will be covered


27
00:01:19,826 --> 00:01:21,746
in sessions later this week.


28
00:01:21,746 --> 00:01:24,766
For this session, we have chosen
a subset of these features


29
00:01:24,766 --> 00:01:27,986
to talk about that generally
fall into three categories.


30
00:01:28,786 --> 00:01:32,046
First, we'll talk about some
exciting layout features


31
00:01:32,196 --> 00:01:34,706
that are steps towards a future
where the web will be able


32
00:01:34,706 --> 00:01:37,316
to replicate rich
magazine-like designs.


33
00:01:38,756 --> 00:01:40,746
Then we'll discuss
some new media features


34
00:01:41,046 --> 00:01:42,886
that offer enhanced
accessibility


35
00:01:43,076 --> 00:01:45,196
and better integration
with other devices.


36
00:01:46,366 --> 00:01:49,436
And finally, I'll tell you about
a bunch of smaller enhancements


37
00:01:49,496 --> 00:01:51,136
that I think you'll
find very handy.


38
00:01:52,456 --> 00:01:55,166
Before we dig in, I want
to take a moment to talk


39
00:01:55,166 --> 00:01:56,996
about the dash WebKit prefix.


40
00:01:57,396 --> 00:01:59,786
This is a technique that
we've been using for years


41
00:02:00,036 --> 00:02:01,716
to shipped experimental features


42
00:02:01,716 --> 00:02:04,026
and production builds
as soon as possible.


43
00:02:04,766 --> 00:02:08,626
It's really not safe to ship
a new feature without a prefix


44
00:02:08,886 --> 00:02:11,386
until the specification
that it's in has matured


45
00:02:11,526 --> 00:02:14,116
and the standards group
decides that it's OK.


46
00:02:14,556 --> 00:02:17,966
That's often long after we have
a useful working implementation


47
00:02:18,206 --> 00:02:21,936
so using this technique, these
features into your hands today.


48
00:02:22,676 --> 00:02:24,746
Since we're talking about new
things today, you're going


49
00:02:24,746 --> 00:02:27,216
to see this prefix on
a lot of my slides.


50
00:02:27,896 --> 00:02:31,696
OK. So, again, we're going to
cover new features in WebKit


51
00:02:31,956 --> 00:02:35,226
that generally fall into three
categories, new layout models,


52
00:02:35,486 --> 00:02:37,556
media features and enhancements.


53
00:02:37,616 --> 00:02:39,326
My goal is to give
you an overview


54
00:02:39,326 --> 00:02:42,376
of all the exciting things
that are happening in WebKit


55
00:02:42,376 --> 00:02:44,546
but this isn't going to be a
high level overview session.


56
00:02:44,546 --> 00:02:47,076
We're going to dig in to these
technologies and you're going


57
00:02:47,076 --> 00:02:48,946
to leave here today
ready to use them.


58
00:02:49,496 --> 00:02:52,136
So, let's begin with
new layout models.


59
00:02:52,136 --> 00:02:56,306
OK. I like to cover
three topics here today.


60
00:02:56,876 --> 00:02:59,576
First, we'll talk about
Columns and Pagination.


61
00:02:59,786 --> 00:03:01,736
Columns are obviously
very fundamental


62
00:03:01,736 --> 00:03:04,286
in Print Media Designs so
if you want your platform


63
00:03:04,536 --> 00:03:07,016
to have rich layout like
Print Media then you need


64
00:03:07,016 --> 00:03:08,096
to support Columns.


65
00:03:08,886 --> 00:03:11,356
Next, we'll talk
about CSS regions.


66
00:03:11,726 --> 00:03:14,766
This is a cool new
technology that makes it easy


67
00:03:14,766 --> 00:03:18,016
to create Advanced Layout
templates in CSS for articles.


68
00:03:19,096 --> 00:03:21,416
And finally, we'll talk
about Flexible Boxes.


69
00:03:21,766 --> 00:03:25,466
This is a new CSS layout model
that makes it really easy


70
00:03:25,466 --> 00:03:27,786
to create layouts that
have been popular for ages


71
00:03:27,976 --> 00:03:30,136
with many fewer lines of code.


72
00:03:30,756 --> 00:03:33,116
So, we'll begin with
Columns and Pagination.


73
00:03:33,906 --> 00:03:37,196
Columns aren't actually a
brand new feature in Safari.


74
00:03:37,196 --> 00:03:39,496
We've been shipping an
implementation for a few years,


75
00:03:39,846 --> 00:03:43,136
but I want to go over them
briefly because we've never talk


76
00:03:43,136 --> 00:03:46,376
about them at WWDC before
and because I think knowing


77
00:03:46,376 --> 00:03:49,086
about them provides some
good background information


78
00:03:49,086 --> 00:03:51,136
for our new iOS Pagination API.


79
00:03:52,636 --> 00:03:55,196
So, when I talk about
Columns I'm referring


80
00:03:55,196 --> 00:03:58,346
to CSS multi-column
layout defined


81
00:03:58,346 --> 00:04:01,226
in the W3C's multi-column
layout specification.


82
00:04:01,926 --> 00:04:05,586
Having a way to create rich
magazine-like designs has been a


83
00:04:05,586 --> 00:04:09,356
goal and the browser and web
standards communities for years


84
00:04:09,356 --> 00:04:11,886
and this came out of some
of those earlier efforts.


85
00:04:12,366 --> 00:04:13,916
The concept is very simple.


86
00:04:14,236 --> 00:04:17,565
The idea is just you can add
some CSS to this document


87
00:04:17,565 --> 00:04:18,435
with just one line of CSS,


88
00:04:18,435 --> 00:04:22,055
you can make this article
lay itself out into Columns.


89
00:04:22,636 --> 00:04:24,756
There are few reasons
why this is compelling.


90
00:04:25,586 --> 00:04:28,766
First as I mentioned
earlier Columns are essential


91
00:04:28,766 --> 00:04:31,936
to mimic Print Media Design
but they really do offer more


92
00:04:31,936 --> 00:04:33,286
than just visual interest.


93
00:04:33,646 --> 00:04:35,826
It's actually quite
difficult to read really,


94
00:04:35,826 --> 00:04:37,756
really super duper
long lines of text.


95
00:04:37,756 --> 00:04:39,326
Your eye tends to get lost.


96
00:04:39,576 --> 00:04:41,616
So, breaking text up into narrow


97
00:04:41,616 --> 00:04:43,786
or columns can make
things easier to read.


98
00:04:44,046 --> 00:04:46,956
Of course, most web pages
nowadays deal with that problem


99
00:04:46,956 --> 00:04:50,506
by having a single relatively
narrow column for all


100
00:04:50,506 --> 00:04:53,016
of their text and leaving lots
of white space on either side


101
00:04:53,016 --> 00:04:54,826
or even we're spilling
up with adds,


102
00:04:55,116 --> 00:04:58,946
but Columns do offer an
alternative design there.


103
00:04:59,316 --> 00:05:01,276
So, the syntax is
incredibly simple.


104
00:05:01,276 --> 00:05:03,906
All I have to do is to start
laying out into columns is


105
00:05:03,906 --> 00:05:06,986
to set a column width
or a column count either


106
00:05:06,986 --> 00:05:09,696
of those things, you know, just
start laying out into columns.


107
00:05:10,636 --> 00:05:13,386
So, there are a bunch of other
CSS properties that you can use


108
00:05:13,386 --> 00:05:16,336
to style columns further and
really control the design.


109
00:05:16,636 --> 00:05:18,356
I'm not going to dig
into this right now


110
00:05:18,586 --> 00:05:20,266
because as I mentioned
I really want to focus


111
00:05:20,266 --> 00:05:21,596
on brand new features.


112
00:05:22,106 --> 00:05:24,076
There's a lot of
interesting use in Columns


113
00:05:24,336 --> 00:05:28,316
for a paginated layout these
days especially on iOS.


114
00:05:28,566 --> 00:05:31,846
Magazine-like layouts and
paginated apps are so popular


115
00:05:31,846 --> 00:05:36,076
and so effective on iOS that
in iOS 7 we've decided to add,


116
00:05:36,076 --> 00:05:39,546
some API to UIWebView that
lets you do this easily.


117
00:05:39,806 --> 00:05:42,106
So, I'll explain at a high
level what the API does


118
00:05:42,446 --> 00:05:44,126
and then we'll dig
in to some code.


119
00:05:44,966 --> 00:05:45,476
All right.


120
00:05:45,506 --> 00:05:48,336
So, the high level, this is
a UIWebView is a really long


121
00:05:48,336 --> 00:05:51,276
document and of course this
document is long enough


122
00:05:51,456 --> 00:05:54,496
that if I were looking at it
on a device I have to scroll


123
00:05:54,496 --> 00:05:55,756
around to see the whole thing.


124
00:05:57,896 --> 00:06:00,686
So, if we take this
really long UIWebView


125
00:06:00,686 --> 00:06:03,486
and set pagination parameters
on it using the new API,


126
00:06:04,166 --> 00:06:07,406
then the document would break
itself up into section based


127
00:06:07,406 --> 00:06:08,916
on the exact parameters
that I've set.


128
00:06:09,436 --> 00:06:12,126
So, obviously, this is a very
simply design and something


129
00:06:12,126 --> 00:06:14,076
that we could easily
achieve with CSS.


130
00:06:14,686 --> 00:06:16,226
So, let's talk about
why you might want


131
00:06:16,226 --> 00:06:19,206
to use the API instead
of using CSS.


132
00:06:21,136 --> 00:06:23,356
So, this API is for
you if you want


133
00:06:23,356 --> 00:06:25,626
to paginate your entire
UIWebView as a whole


134
00:06:25,886 --> 00:06:28,666
and it's also for you if you
don't control the content


135
00:06:28,666 --> 00:06:29,986
that your app displays.


136
00:06:30,346 --> 00:06:34,326
And either of these situations
using this API is better


137
00:06:34,326 --> 00:06:37,596
than injecting a Style Sheet
with some CSS column properties


138
00:06:37,596 --> 00:06:39,696
because this way you can
avoid fighting with the styles


139
00:06:39,696 --> 00:06:41,966
that are in the content
that you're paginating.


140
00:06:42,186 --> 00:06:43,906
This is sort of just
a nice abstraction


141
00:06:43,906 --> 00:06:46,106
between the overall
layout of our app,


142
00:06:46,106 --> 00:06:48,716
something that paginates and
the content that is paginating.


143
00:06:49,486 --> 00:06:52,366
OK. So, this is what
the new API looks like.


144
00:06:53,286 --> 00:06:56,416
First you opt into or out
of pagination on UIWebView


145
00:06:56,646 --> 00:06:58,876
by setting the pagination
mode parameter.


146
00:06:59,206 --> 00:07:01,026
This property-- excuse me,


147
00:07:01,646 --> 00:07:04,506
this property takes an
enumeration as a value.


148
00:07:04,836 --> 00:07:07,306
I'm using the value that
will paginate the pages


149
00:07:07,306 --> 00:07:08,386
from left to right.


150
00:07:08,976 --> 00:07:11,766
There's also a value that will
paginate from right to left


151
00:07:11,766 --> 00:07:13,846
which you'll probably want
to use if you're content is


152
00:07:13,846 --> 00:07:16,186
in a right to left
language, and there's a top


153
00:07:16,186 --> 00:07:18,686
to bottom and bottom to top.


154
00:07:18,866 --> 00:07:20,526
Next, I'm setting
the page length.


155
00:07:20,956 --> 00:07:24,536
The page length corresponds to
the size of the page container


156
00:07:24,536 --> 00:07:26,626
and the direction the
content is flowing.


157
00:07:26,956 --> 00:07:29,656
Since I'm using a
horizontal mode that means


158
00:07:29,656 --> 00:07:33,226
that the page length corresponds
to the width of each page.


159
00:07:34,126 --> 00:07:35,866
Next, I'm setting the page gap,


160
00:07:36,386 --> 00:07:39,266
it defaults to zero,
I'm setting it to 25.


161
00:07:40,366 --> 00:07:44,026
And finally, I also want to set
the pagination breaking mode.


162
00:07:44,026 --> 00:07:45,176
This is another property


163
00:07:45,176 --> 00:07:47,556
that takes an enumeration
for a value.


164
00:07:47,756 --> 00:07:50,346
There are two values,
page mode and column mode.


165
00:07:50,616 --> 00:07:52,686
If the content that
you're paginating happens


166
00:07:52,746 --> 00:07:56,076
to use any column related
CSS properties like the ones


167
00:07:56,076 --> 00:07:59,066
that I enumerated a few
slides ago then the value


168
00:07:59,066 --> 00:08:03,686
of this property will determine
whether those styles are honored


169
00:08:03,686 --> 00:08:04,506
or ignored.


170
00:08:05,096 --> 00:08:08,156
So, that's-- this new API.


171
00:08:08,396 --> 00:08:11,926
There's also a way to fetch
the total page count and note


172
00:08:11,926 --> 00:08:15,146
that the API does not cover
a special interaction model.


173
00:08:15,446 --> 00:08:17,646
So, by default, you'll
just be able


174
00:08:17,646 --> 00:08:18,926
to scroll from page to page.


175
00:08:18,926 --> 00:08:22,076
You may want to add a special
interaction model up to you.


176
00:08:23,166 --> 00:08:27,296
OK. So, CSS Columns that have
been around for a little while,


177
00:08:27,756 --> 00:08:31,046
iOS, API to paginate a
UIWebView is brand new.


178
00:08:31,356 --> 00:08:34,436
Both of these technologies
provide a straight forward way


179
00:08:34,436 --> 00:08:36,866
to get your content
laying out into columns


180
00:08:37,196 --> 00:08:40,046
which is really a corner
stone of magazine layouts.


181
00:08:40,706 --> 00:08:43,015
OK. Let's talk about
CSS Regions.


182
00:08:43,395 --> 00:08:47,186
These are defined in the
W3C CCS Region specification


183
00:08:47,516 --> 00:08:50,096
and they allow you
to indicate that some


184
00:08:50,096 --> 00:08:53,466
of your markup is defining an
overall layout for your design.


185
00:08:53,466 --> 00:08:55,456
So, think of that is
like a design template.


186
00:08:55,816 --> 00:08:58,046
And they also allow you to
indicate that a different part


187
00:08:58,046 --> 00:09:01,556
of your markup is being used to
define the content that you want


188
00:09:01,556 --> 00:09:02,776
to flow through that layout.


189
00:09:02,776 --> 00:09:04,326
So, think of that
is like an article.


190
00:09:05,496 --> 00:09:07,766
So, you'll have one
part of your content


191
00:09:07,876 --> 00:09:11,336
where you're using block-level
container elements such as DIVs,


192
00:09:11,806 --> 00:09:14,756
you'll arrange them and whatever
overall layout you want.


193
00:09:14,756 --> 00:09:16,496
So, maybe you want to call
them say, you'll set them


194
00:09:16,496 --> 00:09:19,556
up something like this, but you
can get a little crazy here.


195
00:09:19,556 --> 00:09:21,926
Remember, I promise
magazine-like layouts.


196
00:09:22,056 --> 00:09:24,416
So, maybe you want to
design more like this


197
00:09:24,416 --> 00:09:26,146
where the blue block is an image


198
00:09:26,376 --> 00:09:28,546
and you have a few different
blocks that surround the image


199
00:09:28,546 --> 00:09:30,386
and you want your text
to flow through them.


200
00:09:30,976 --> 00:09:32,506
Or maybe you want
a slight variation


201
00:09:32,506 --> 00:09:35,516
on that design either way you
have one area of your markup


202
00:09:35,516 --> 00:09:37,256
where you're using
block containers


203
00:09:37,256 --> 00:09:39,196
to create a template
for your design.


204
00:09:40,046 --> 00:09:42,306
And then you have
another area of markup


205
00:09:42,306 --> 00:09:43,646
where you're defining
your content.


206
00:09:43,916 --> 00:09:46,706
This is my article that I
want to fit into that layout.


207
00:09:47,916 --> 00:09:51,386
So, if we take this design
and I use CSS to indicate


208
00:09:51,386 --> 00:09:53,936
that the purple boxes
are meant to be regions


209
00:09:54,356 --> 00:09:57,376
and I also indicate that
my article is the content


210
00:09:57,606 --> 00:10:00,286
that is meant to flow through
these regions then instead


211
00:10:00,286 --> 00:10:03,516
of laying out just in a normal
document flow like this,


212
00:10:04,166 --> 00:10:06,496
instead of that the
article will actually flow


213
00:10:06,496 --> 00:10:07,466
through this regions.


214
00:10:07,826 --> 00:10:09,766
So, I don't need to know
in advance which bits


215
00:10:09,766 --> 00:10:12,176
of text will fit into which box,


216
00:10:12,176 --> 00:10:14,336
that's a huge part
of what regions are.


217
00:10:14,336 --> 00:10:15,366
When one region fills


218
00:10:15,366 --> 00:10:18,466
up the content will just
continue on in the next.


219
00:10:18,846 --> 00:10:20,026
So, this is really cool.


220
00:10:20,126 --> 00:10:23,686
I think it makes it really easy
to treat your overall layout


221
00:10:23,686 --> 00:10:26,486
and sort of a template that you
could reuse for other articles.


222
00:10:26,796 --> 00:10:28,286
So, let's look at some code.


223
00:10:28,286 --> 00:10:31,356
So, this is what my
markup looks like.


224
00:10:31,786 --> 00:10:33,586
This is the markup
for my article


225
00:10:34,286 --> 00:10:35,916
and here's my design template.


226
00:10:37,166 --> 00:10:39,716
These are the regions
within that design template


227
00:10:39,716 --> 00:10:41,906
and here's my image,
its interleaves


228
00:10:41,906 --> 00:10:44,436
with the regions that's
fine, the regions don't need


229
00:10:44,436 --> 00:10:46,026
to be contiguous
in the document.


230
00:10:46,346 --> 00:10:49,736
Each of the reasons was
styled a little differently


231
00:10:49,736 --> 00:10:50,996
with different widths
and heights


232
00:10:50,996 --> 00:10:53,806
and different positioning so
I've given them a unique ID


233
00:10:53,806 --> 00:10:57,776
so that I can control that
bit of styling with the ID.


234
00:10:58,836 --> 00:11:00,846
I've also given them
a shared class name


235
00:11:01,046 --> 00:11:02,186
so that they can share the CSS


236
00:11:02,186 --> 00:11:04,786
that actually does
turn them into regions.


237
00:11:05,436 --> 00:11:07,216
So, let's take a look
at what that looks like.


238
00:11:07,216 --> 00:11:09,286
It's just one line of CSS,


239
00:11:09,286 --> 00:11:12,686
I've truncated my markup here a
little obviously but all I need


240
00:11:12,686 --> 00:11:14,316
to do to turn these boxes


241
00:11:14,316 --> 00:11:17,866
into regions is top set the
flow from property in CSS.


242
00:11:18,296 --> 00:11:21,686
So, takes an identifier for a
value so this is just a name,


243
00:11:21,686 --> 00:11:23,266
it can be any name
that you choose.


244
00:11:23,536 --> 00:11:26,466
I've given it a somewhat silly
name here, Pizza Manifesto just


245
00:11:26,466 --> 00:11:29,296
to emphasize that this is
a name of my own choosing.


246
00:11:29,296 --> 00:11:32,986
Now, I only have to do is
to indicate that the article


247
00:11:32,986 --> 00:11:35,016
as the content that we want
to flow through the regions


248
00:11:35,506 --> 00:11:38,166
and that is also very
simple again just one line


249
00:11:38,166 --> 00:11:40,016
of CSS flow into property.


250
00:11:40,286 --> 00:11:42,956
And note that I've given it
the same name that I gave


251
00:11:42,956 --> 00:11:44,946
to the flow from
property, that's the key


252
00:11:44,946 --> 00:11:47,116
that ties this 2 bits
together, that's what's says,


253
00:11:47,356 --> 00:11:50,406
this is the article that's
flowing through this regions.


254
00:11:51,136 --> 00:11:52,306
And that's all that I need


255
00:11:52,306 --> 00:11:54,896
to achieve this unique
layout right in the browser.


256
00:11:55,376 --> 00:11:57,176
So, another really cool
thing about regions


257
00:11:57,416 --> 00:12:00,116
as it you can style content
based on which region


258
00:12:00,116 --> 00:12:01,196
that it's flowing through.


259
00:12:01,616 --> 00:12:05,036
So, for example I can make
whatever content happens to fit


260
00:12:05,036 --> 00:12:07,366
into my second region
have green text.


261
00:12:07,906 --> 00:12:11,786
So, this will apply style to
just a fragment of the document.


262
00:12:11,786 --> 00:12:14,346
And the CSS for this is
quite simple as well,


263
00:12:14,516 --> 00:12:16,916
just using the @-webkit-region
rule.


264
00:12:17,406 --> 00:12:19,266
And I'm supplying some style.


265
00:12:19,796 --> 00:12:22,086
So, our implementation of
course is evolving along


266
00:12:22,086 --> 00:12:23,216
with this spec right now.


267
00:12:23,536 --> 00:12:26,896
We only support styling
background color and color


268
00:12:26,896 --> 00:12:30,716
for a region styling but the
spec does indicate more values


269
00:12:30,716 --> 00:12:33,156
should be supported so
as things evolve I'm sure


270
00:12:33,156 --> 00:12:34,686
that will be picked up.


271
00:12:35,066 --> 00:12:37,026
So, I feel like regions
really come to life


272
00:12:37,026 --> 00:12:38,736
when you actually
interact with them.


273
00:12:38,986 --> 00:12:41,756
So, I would like to invite
my colleague Enrica Casucci


274
00:12:41,756 --> 00:12:44,886
on to the stage to show you
a bit more about regions.


275
00:12:45,516 --> 00:12:50,076
[ Applause ]


276
00:12:50,576 --> 00:12:51,606
>> Hi everyone.


277
00:12:51,856 --> 00:12:54,866
My name is Enrica Casucci
and I'm an engineer


278
00:12:54,906 --> 00:12:57,516
on the Safari WebKit team.


279
00:12:58,716 --> 00:13:02,856
So, I prepared for you an
interactive region state mode


280
00:13:02,926 --> 00:13:06,726
to show you how flexible and
powerful CSS regions are.


281
00:13:07,136 --> 00:13:10,486
Of course, since the theme of
the presentation is about pizza,


282
00:13:10,516 --> 00:13:12,496
we will continue
along the same lines.


283
00:13:13,426 --> 00:13:18,106
So, what we have here is
a fairly simple content


284
00:13:18,106 --> 00:13:21,586
because I think it'll make
it easier for you to focus


285
00:13:21,586 --> 00:13:23,086
on the flow of the content


286
00:13:23,126 --> 00:13:27,446
without additional
visual distractions.


287
00:13:27,446 --> 00:13:31,006
What we have here looks
like just like a page


288
00:13:31,006 --> 00:13:35,056
that uses columns but
these are actually regions.


289
00:13:35,616 --> 00:13:41,386
As Beth mentioned before,
columns can be considered a sort


290
00:13:41,386 --> 00:13:43,686
of very constrained
type of regions.


291
00:13:44,086 --> 00:13:45,546
But these are regions as I said


292
00:13:45,546 --> 00:13:48,216
and they are a lot
more powerful.


293
00:13:48,876 --> 00:13:53,536
So, I will start by
clicking on this gear icon


294
00:13:53,906 --> 00:13:57,546
and we'll see the outline of
the three regions we have here.


295
00:13:58,086 --> 00:14:02,666
The numbers on each
region indicate the order,


296
00:14:02,666 --> 00:14:04,926
the content flow
into the regions


297
00:14:05,056 --> 00:14:07,546
which is actually the order


298
00:14:07,546 --> 00:14:09,976
in which the regions
appear in the DOM.


299
00:14:10,546 --> 00:14:14,936
So, the content flows
from its original element


300
00:14:14,936 --> 00:14:19,076
into the first region here
and when that one fills up,


301
00:14:19,426 --> 00:14:23,486
it flows into the second one and
it moves over to the third one.


302
00:14:24,246 --> 00:14:27,776
As you can see clearly here at
the bottom of the third region,


303
00:14:28,066 --> 00:14:33,056
we have more content that we can
fit into these three regions.


304
00:14:33,056 --> 00:14:36,726
So, let's look at what happens
if I click on the Add button


305
00:14:37,036 --> 00:14:39,646
and add a fourth
region and I'm going


306
00:14:39,646 --> 00:14:41,866
to position it here
at the bottom.


307
00:14:41,976 --> 00:14:46,986
As you can see, the
content has flown directly


308
00:14:47,026 --> 00:14:48,496
into the fourth region.


309
00:14:49,076 --> 00:14:53,876
So, using CSS regions allows you
to create a responsive layout.


310
00:14:54,296 --> 00:14:56,616
You have more content, it flows


311
00:14:56,616 --> 00:14:59,046
into the next region,
very, very simple.


312
00:14:59,516 --> 00:15:03,866
To make it even clearer how the
content reflows from one region


313
00:15:03,866 --> 00:15:08,326
to another, pay attention as
I resize the region number one


314
00:15:08,616 --> 00:15:10,446
and keep an eye on the MOG


315
00:15:10,446 --> 00:15:14,076
and you will see the content
reflowing from region one


316
00:15:14,176 --> 00:15:17,666
to region two to
region three and so on.


317
00:15:17,806 --> 00:15:19,026
So, extremely simple.


318
00:15:19,776 --> 00:15:22,846
So, now that we have a feel for
what we can do with regions,


319
00:15:23,376 --> 00:15:26,576
we'll try to create a
nice layout for this page.


320
00:15:26,776 --> 00:15:31,216
So, let's start by removing this
region and what I really want


321
00:15:31,216 --> 00:15:34,206
to do is add a placeholder
for an image.


322
00:15:34,206 --> 00:15:38,426
So, I'm going to reposition
this one here and I'm going


323
00:15:38,426 --> 00:15:40,586
to move this one off to the side


324
00:15:41,386 --> 00:15:44,966
and I can actually
resize the top one


325
00:15:45,086 --> 00:15:48,846
to stretch it all the way across
the width of our viewport.


326
00:15:49,476 --> 00:15:52,156
And then, I can add
an image placeholder


327
00:15:52,386 --> 00:15:57,186
where I will later position
my image and stretch that over


328
00:15:57,286 --> 00:15:59,686
to meet the region number 2.


329
00:16:00,216 --> 00:16:02,516
So, what I want here
at the bottom is


330
00:16:02,586 --> 00:16:05,156
to have like a two columns.


331
00:16:05,476 --> 00:16:10,446
So, I'm going to add a
fourth region and resize it


332
00:16:11,036 --> 00:16:13,886
and position it down
here and we'll try


333
00:16:13,886 --> 00:16:16,666
to make them roughly
the same size.


334
00:16:18,236 --> 00:16:22,446
OK, so that looks sort of OK.


335
00:16:23,266 --> 00:16:28,496
Now, we can click on the gear
icon and remove the overlays


336
00:16:28,496 --> 00:16:33,626
and now we have our
new layout very easy.


337
00:16:35,026 --> 00:16:39,156
So, the markup and the CSS
behind this example is very


338
00:16:39,246 --> 00:16:42,926
simple whereas previously,
you would have used CSS


339
00:16:43,356 --> 00:16:45,386
to position your
content directly.


340
00:16:45,816 --> 00:16:49,676
With regions, what you do is
position the region containers


341
00:16:50,036 --> 00:16:52,846
and tell the content
to flow into that.


342
00:16:53,516 --> 00:16:56,626
So, you have a very
responsive layout.


343
00:16:56,996 --> 00:17:00,926
It's very easy to
manage and as the size


344
00:17:00,926 --> 00:17:03,186
of the viewport changes,
all you have


345
00:17:03,246 --> 00:17:06,425
to do is reposition your regions
and you don't have to worry


346
00:17:06,425 --> 00:17:07,945
about repositioning your content


347
00:17:08,336 --> 00:17:11,506
because it will flow
directly into the regions.


348
00:17:12,435 --> 00:17:18,586
So, the content that appears
in region you can interact


349
00:17:18,626 --> 00:17:21,746
with it the same way you
would interact with content


350
00:17:21,746 --> 00:17:23,856
in any other type of element.


351
00:17:23,986 --> 00:17:29,576
So, for example, I can select
text from the first region


352
00:17:29,836 --> 00:17:34,166
and extend my selection and
the selection will continue


353
00:17:34,376 --> 00:17:37,186
in the order in which
the content has flown


354
00:17:38,116 --> 00:17:41,866
which is dictated by the
order of the regions.


355
00:17:42,356 --> 00:17:46,906
So, since you don't have
to worry about relaying


356
00:17:46,906 --> 00:17:49,996
out your content, you
can even do things


357
00:17:49,996 --> 00:17:52,326
like increase your text size


358
00:17:52,606 --> 00:17:54,806
and the content will
reflow automatically.


359
00:17:55,736 --> 00:17:57,786
Very, very easy.


360
00:17:58,076 --> 00:18:01,536
So, before I turn
it back to Beth,


361
00:18:02,146 --> 00:18:06,196
I'd like to show you a
page that I've prepared


362
00:18:06,196 --> 00:18:08,196
where I view CSS regions


363
00:18:08,606 --> 00:18:13,126
to create a magazine
quality type of layout.


364
00:18:14,416 --> 00:18:17,766
Again, this is about
pizza as usual.


365
00:18:17,916 --> 00:18:20,076
So, this is my blog about pizza.


366
00:18:20,226 --> 00:18:24,096
I'm very passionate about the
subject and as you can see,


367
00:18:24,096 --> 00:18:28,296
I have a fairly sophisticated
layout where I go


368
00:18:28,576 --> 00:18:31,166
from one column over to two.


369
00:18:31,166 --> 00:18:37,796
I have images down back to
one single column and then


370
00:18:37,796 --> 00:18:41,246
over to two, fairly rich layout.


371
00:18:41,956 --> 00:18:47,566
But the most amazing thing about
this is actually the source HTML


372
00:18:47,736 --> 00:18:50,156
that I would like
to show you here


373
00:18:51,436 --> 00:18:54,246
because this is a very,
very simple markup.


374
00:18:54,756 --> 00:19:01,276
We have our section here
that contains our entire text


375
00:19:01,576 --> 00:19:04,726
and the text is simply
divided into paragraphs.


376
00:19:05,626 --> 00:19:08,576
All the part that pertains
to the actual layout


377
00:19:08,576 --> 00:19:10,526
of the article is
in this section


378
00:19:10,796 --> 00:19:17,226
where we position our regions
and images insert other DIVs


379
00:19:17,916 --> 00:19:21,986
and we achieve this way,
a complete separation


380
00:19:21,986 --> 00:19:25,046
between the content
and its presentation.


381
00:19:25,766 --> 00:19:30,936
I hope I was able to share
my excitement for CSS regions


382
00:19:31,296 --> 00:19:34,346
and I really can't wait to see
what you'll create with them.


383
00:19:34,816 --> 00:19:35,256
Thank you.


384
00:19:36,516 --> 00:19:40,816
[Applause]


385
00:19:41,316 --> 00:19:42,036
>> Thank you Enrica.


386
00:19:42,516 --> 00:19:43,586
That was really cool.


387
00:19:43,766 --> 00:19:46,606
So, hopefully that
gives you an idea


388
00:19:46,606 --> 00:19:48,816
of how powerful CSS regions are.


389
00:19:48,816 --> 00:19:49,956
I think they are awesome.


390
00:19:49,956 --> 00:19:52,146
I think they are
huge step forward


391
00:19:52,456 --> 00:19:55,336
in creating really advanced
designs really easily.


392
00:19:56,266 --> 00:19:58,356
OK. Let's talk about
flexible boxes.


393
00:19:58,946 --> 00:20:00,526
Flexible boxes are defined


394
00:20:00,526 --> 00:20:03,906
in the W3Cs Flexible
Box Layout Module.


395
00:20:04,116 --> 00:20:06,006
They are often just
called Flexbox


396
00:20:06,856 --> 00:20:09,856
and this is a layout
model that's more similar


397
00:20:09,856 --> 00:20:12,006
to layout models that you
often see in Native UI.


398
00:20:12,286 --> 00:20:14,326
So, think springs and struts.


399
00:20:15,206 --> 00:20:19,256
So, Flexbox is all about laying
out elements inside a container


400
00:20:19,526 --> 00:20:21,256
so that they either
grow or shrink


401
00:20:21,316 --> 00:20:22,666
to fill the available space.


402
00:20:22,666 --> 00:20:25,546
And there are set of
properties that you can specify


403
00:20:25,826 --> 00:20:28,116
on each element to indicate
how they should grow


404
00:20:28,116 --> 00:20:30,286
and shrink relative
to other elements.


405
00:20:31,136 --> 00:20:34,286
So, I've been calling Flexbox
a new feature in Safari.


406
00:20:34,596 --> 00:20:37,516
But those of you who have really
been paying attention might know


407
00:20:37,516 --> 00:20:41,326
that we have been shipping an
implementation since Safari 5.1.


408
00:20:41,926 --> 00:20:43,816
That is true, but that syntax


409
00:20:43,816 --> 00:20:46,036
and that implementation
is deprecated


410
00:20:46,386 --> 00:20:49,556
and there is a new syntax
and new implementation new


411
00:20:49,556 --> 00:20:52,166
in the new version of Safari.


412
00:20:52,296 --> 00:20:55,066
So, if you're using the
old stuff, I encourage you


413
00:20:55,066 --> 00:20:57,096
to please migrate your
code to the new stuff.


414
00:20:57,096 --> 00:20:59,776
You should get better
performance and of course,


415
00:20:59,816 --> 00:21:02,306
that's the version that
we will be improving


416
00:21:02,306 --> 00:21:03,796
and maintaining going forward.


417
00:21:04,096 --> 00:21:07,816
But do note that it's
not a simple rename.


418
00:21:07,936 --> 00:21:10,266
So, there is-- are some
behavior differences.


419
00:21:10,266 --> 00:21:12,316
So, definitely, migrate
your code


420
00:21:12,576 --> 00:21:14,096
but do migrate it carefully.


421
00:21:14,766 --> 00:21:17,256
So, I think that this
app is a great example


422
00:21:17,256 --> 00:21:18,916
of Flexbox in action.


423
00:21:19,176 --> 00:21:20,986
This app should look
familiar to you.


424
00:21:20,986 --> 00:21:22,116
It's the Mac App Store.


425
00:21:22,426 --> 00:21:24,786
And all of the apps
in this grid here,


426
00:21:24,786 --> 00:21:28,186
this little AppGrid are
implemented with Flexbox so that


427
00:21:28,186 --> 00:21:31,896
at any window size, this layout
looks really nice and clean.


428
00:21:32,416 --> 00:21:35,446
Now, of course from
a design perspective,


429
00:21:35,656 --> 00:21:36,856
this layout isn't new.


430
00:21:36,856 --> 00:21:38,826
Layouts like this have
been around for awhile.


431
00:21:39,116 --> 00:21:40,906
But actually, achieving
a layout like this


432
00:21:40,906 --> 00:21:44,346
without Flexbox requires a
whole lot of code to sort


433
00:21:44,346 --> 00:21:47,446
of manipulate the block layout
and inline layout models


434
00:21:47,446 --> 00:21:50,706
to like mashing together in a
way they don't really want to.


435
00:21:50,996 --> 00:21:52,576
It actually gets
quite complicated.


436
00:21:52,616 --> 00:21:54,226
So, let's analyze this design


437
00:21:54,226 --> 00:21:58,036
so that we can discuss why this
is difficult without Flexbox.


438
00:21:58,456 --> 00:22:00,766
All right, first of all at
the smaller window size,


439
00:22:00,766 --> 00:22:03,386
we can clearly see that
there are three boxes


440
00:22:03,386 --> 00:22:05,236
in each row of the AppGrid.


441
00:22:05,236 --> 00:22:08,946
And this hero image at
the top is sized to be


442
00:22:09,096 --> 00:22:10,736
about the same size
as the AppGrid.


443
00:22:10,736 --> 00:22:11,986
It's aligned on the left.


444
00:22:11,986 --> 00:22:13,246
It's actually a little
bit bigger.


445
00:22:13,476 --> 00:22:16,636
On the right, it goes up
to this right hand column.


446
00:22:17,176 --> 00:22:21,326
All right, at this
bigger window size,


447
00:22:21,356 --> 00:22:23,986
we can see that now
there are four boxes


448
00:22:23,986 --> 00:22:25,136
in each row of the AppGrid.


449
00:22:25,706 --> 00:22:28,666
Here our image is still
sized relatively the same


450
00:22:28,666 --> 00:22:31,356
to how it was with the AppGrid
before aligned on the left,


451
00:22:31,356 --> 00:22:33,776
a little bit bigger, it goes
up to the right hand column


452
00:22:34,086 --> 00:22:36,096
on the right and then the
right-hand column stayed the


453
00:22:36,096 --> 00:22:36,766
same size.


454
00:22:37,326 --> 00:22:40,596
And if we go back to that
smaller window size and look


455
00:22:40,596 --> 00:22:42,686
at a window size that's
only slightly bigger,


456
00:22:43,196 --> 00:22:47,026
we can clearly see that each
box in the AppGrid has grown


457
00:22:47,026 --> 00:22:49,256
to fairly available space
even though there is not


458
00:22:49,256 --> 00:22:53,106
yet enough room to add a fourth
box into each row of the grid.


459
00:22:53,386 --> 00:22:55,866
So, all of this, it's always
filling the available space,


460
00:22:55,866 --> 00:22:58,796
reflowing when possible,
and doing all of that


461
00:22:59,176 --> 00:23:00,496
up until a certain point


462
00:23:00,696 --> 00:23:03,266
at which time it's
reached some maximum width


463
00:23:03,266 --> 00:23:06,336
in any additional space
just creates a margin


464
00:23:06,466 --> 00:23:08,136
on either side of the window.


465
00:23:08,916 --> 00:23:11,276
So, if you're going to
do this without Flexbox,


466
00:23:11,276 --> 00:23:15,136
you would probably use CSS
float left for most of the boxes


467
00:23:15,136 --> 00:23:17,786
in the AppGrid and then
you'd have like a whole bunch


468
00:23:17,786 --> 00:23:19,856
of JavaScript to compute
the width of everything.


469
00:23:20,156 --> 00:23:23,346
But that math would actually get
quite complicated as it interact


470
00:23:23,346 --> 00:23:24,816
with the fact that
you're floating things


471
00:23:24,816 --> 00:23:27,736
because the exact math depends
on whether there are three


472
00:23:27,736 --> 00:23:29,956
or four boxes in
each row of the grid.


473
00:23:30,106 --> 00:23:31,926
It would get very complicated.


474
00:23:31,926 --> 00:23:33,286
It would be a whole lot of code,


475
00:23:33,286 --> 00:23:35,616
it would probably require
more than a few hacks.


476
00:23:36,046 --> 00:23:38,766
But Flexbox was invented
to solve this problem.


477
00:23:38,766 --> 00:23:40,406
This is what Flexbox does.


478
00:23:40,406 --> 00:23:41,736
This is its bread and butter.


479
00:23:42,746 --> 00:23:44,506
So, let's look at the code.


480
00:23:44,846 --> 00:23:48,726
So, as I mentioned, Flexbox
is all about elements growing


481
00:23:48,726 --> 00:23:50,196
and shrinking inside
of container


482
00:23:50,196 --> 00:23:51,616
to fill the available space.


483
00:23:51,896 --> 00:23:54,496
So, these are the CSS
properties that you want to set


484
00:23:54,806 --> 00:23:56,376
on the container itself.


485
00:23:56,766 --> 00:23:59,366
So first, you definitely want
to set the display property


486
00:23:59,366 --> 00:24:00,986
to either flex or inline flex.


487
00:24:01,436 --> 00:24:03,586
And now, it will indicate
that this is a container


488
00:24:03,586 --> 00:24:05,906
that will contain
flexing children.


489
00:24:06,926 --> 00:24:09,386
You can also indicate
the flex-direction.


490
00:24:09,606 --> 00:24:11,416
Here I'm using the
row direction.


491
00:24:11,416 --> 00:24:15,006
This will cause my elements in
this case to layout from left


492
00:24:15,006 --> 00:24:16,226
to right horizontally.


493
00:24:16,496 --> 00:24:19,556
There is also row reverse
for right to left layout.


494
00:24:19,556 --> 00:24:20,776
And if you want the
vertical layout,


495
00:24:20,776 --> 00:24:23,496
instead you would use a
column or reverse column


496
00:24:23,816 --> 00:24:25,096
for bottom to top layout.


497
00:24:25,616 --> 00:24:28,466
So, those are the two
properties that you want


498
00:24:28,466 --> 00:24:30,146
to specify on the container.


499
00:24:30,476 --> 00:24:32,986
But the flexing magic really
happens with the children.


500
00:24:32,986 --> 00:24:35,176
So, let's look at
properties that you want


501
00:24:35,176 --> 00:24:36,436
to specify on the children.


502
00:24:36,436 --> 00:24:39,306
So, there are three properties
that you can specify there.


503
00:24:40,486 --> 00:24:42,606
First, you can specify
the flex basis.


504
00:24:42,976 --> 00:24:44,486
This is the initial size


505
00:24:44,486 --> 00:24:47,406
of the element before any
free space is distributed.


506
00:24:47,836 --> 00:24:51,026
So, in this case, since we're
laying out in the row direction,


507
00:24:51,186 --> 00:24:53,066
that will correspond
to the initial width.


508
00:24:53,206 --> 00:24:54,906
If we were laying out
in the column direction,


509
00:24:54,906 --> 00:24:56,236
it would correspond
to the initial height.


510
00:24:56,236 --> 00:24:59,956
And in fact, in this case, if I
didn't specify a basis at all,


511
00:25:00,206 --> 00:25:02,766
then the basis would default
to be whatever the width was.


512
00:25:02,766 --> 00:25:06,436
So, sort of think of it
as your size property.


513
00:25:07,296 --> 00:25:09,096
So, in this case, let's say


514
00:25:09,096 --> 00:25:12,006
that this container
is 600 pixels wide.


515
00:25:12,006 --> 00:25:15,466
So, given the basis that I have
assigned to my triplets here


516
00:25:15,466 --> 00:25:17,496
and the basis I assigned
to my big element,


517
00:25:17,496 --> 00:25:18,736
once you include their margins,


518
00:25:18,986 --> 00:25:21,336
this fits perfectly inside
this container right now.


519
00:25:21,336 --> 00:25:23,086
There's no growing or shrinking.


520
00:25:24,216 --> 00:25:26,346
When extra space does
become available,


521
00:25:26,556 --> 00:25:29,246
how the elements change
their size will be based


522
00:25:29,246 --> 00:25:31,406
on the flex grow property.


523
00:25:31,846 --> 00:25:35,486
So, this is used to determine
how the elements should grow


524
00:25:35,486 --> 00:25:37,286
when there is extra
space available.


525
00:25:37,476 --> 00:25:40,816
So, it's kind of like a ratio
and bigger numbers here mean


526
00:25:40,816 --> 00:25:42,596
that the element
wants to grow more.


527
00:25:43,966 --> 00:25:47,646
So, in this case, I have
specified a grow value of zero


528
00:25:47,646 --> 00:25:50,706
from my triplets which means
that I don't want them to grow


529
00:25:50,706 --> 00:25:54,936
at all and I have specified a
value of one from my big element


530
00:25:55,106 --> 00:25:57,696
which means that I wanted
to share extra space evenly


531
00:25:57,956 --> 00:25:59,076
with other growing elements.


532
00:25:59,106 --> 00:26:01,556
But in this example, there
are no other growing elements


533
00:26:01,556 --> 00:26:05,806
so we'll take all of
the space for itself.


534
00:26:05,806 --> 00:26:08,126
And when there is not a
lot of space to go around


535
00:26:08,126 --> 00:26:09,816
and things need to
shrink down to fit,


536
00:26:10,156 --> 00:26:11,526
how they do that
will be determined


537
00:26:11,526 --> 00:26:14,126
by the flex shrink
value property.


538
00:26:14,926 --> 00:26:19,266
So here, this is also of sort
of like a ratio, like flex-grow.


539
00:26:19,516 --> 00:26:21,296
But with flex-grow
bigger numbers mean


540
00:26:21,296 --> 00:26:22,576
that the elements
want to grow more.


541
00:26:22,846 --> 00:26:25,606
Here, bigger numbers mean the
elements will shrink more.


542
00:26:27,216 --> 00:26:29,866
So, I've given a shrink
value of one to my triplets


543
00:26:29,866 --> 00:26:32,556
so they'll shrink evenly
and a shrink value of zero


544
00:26:32,556 --> 00:26:35,676
to my big element because I
don't want it to shrink it all.


545
00:26:36,266 --> 00:26:38,126
So, this is a really
quick overview


546
00:26:38,126 --> 00:26:39,976
of how flexing works in Flexbox.


547
00:26:40,216 --> 00:26:42,796
I can also simplify this
code using a Shorthand.


548
00:26:43,096 --> 00:26:46,296
These values in the Shorthand
are ordered grow shrink basis


549
00:26:46,496 --> 00:26:47,156
in that order.


550
00:26:47,716 --> 00:26:49,996
But before we do move on
to Flexbox to other things,


551
00:26:49,996 --> 00:26:52,116
I want to mention one more thing


552
00:26:52,116 --> 00:26:54,506
that Flexbox is really
great for.


553
00:26:55,446 --> 00:26:59,506
So, it's 2013 and CSS has
finally provided an easy way


554
00:26:59,506 --> 00:27:00,436
to center something.


555
00:27:00,996 --> 00:27:02,386
As I'm sure you all
know [applause]--


556
00:27:06,526 --> 00:27:08,856
I'm sure you all know it's
been shockingly difficult


557
00:27:08,856 --> 00:27:12,246
up until now to center something
in CSS especially if you want


558
00:27:12,246 --> 00:27:13,386
to center it vertically.


559
00:27:13,766 --> 00:27:17,016
But Flexbox actually makes
that incredibly easy.


560
00:27:17,016 --> 00:27:18,496
So, here in this example,


561
00:27:18,696 --> 00:27:22,206
I wanted to center my darker
gray box inside the bigger light


562
00:27:22,206 --> 00:27:22,766
gray box.


563
00:27:23,096 --> 00:27:25,016
So, all I had to do was indicate


564
00:27:25,016 --> 00:27:26,866
that the bigger box
is a flex container


565
00:27:27,126 --> 00:27:31,266
and give my smaller thing that
I want to center margin auto


566
00:27:31,516 --> 00:27:34,006
and that will truly
in all cases actually


567
00:27:34,006 --> 00:27:35,706
for real center this box.


568
00:27:37,576 --> 00:27:40,386
So, that's an overview
of how Flexbox works.


569
00:27:40,386 --> 00:27:42,216
It really just scratches
the surface.


570
00:27:42,216 --> 00:27:45,266
We could have an entire
section about flexible boxes.


571
00:27:45,266 --> 00:27:46,836
There is a ton of stuff there.


572
00:27:47,146 --> 00:27:49,626
So, I really encourage you
to go out and learn more.


573
00:27:49,876 --> 00:27:51,656
I mean, even just
speaking of centering,


574
00:27:51,656 --> 00:27:54,536
there are to Flexbox
specific CSS properties


575
00:27:54,806 --> 00:27:57,596
that would also allow you to
center but can also be used


576
00:27:57,596 --> 00:27:59,766
to just have much
finer grain control


577
00:27:59,966 --> 00:28:02,276
over how things are positioned,


578
00:28:02,686 --> 00:28:04,446
aligned items in
justified content.


579
00:28:04,446 --> 00:28:07,916
There is just a ton of stuff in
that spec. It's really great.


580
00:28:08,556 --> 00:28:11,236
So, with these technologies
I really feel


581
00:28:11,236 --> 00:28:13,966
like WebKits made huge
strides towards the future


582
00:28:14,346 --> 00:28:17,746
where it will be able to
replicate really rich designs.


583
00:28:17,976 --> 00:28:20,036
I'm really excited
about this stuff.


584
00:28:20,276 --> 00:28:22,526
We're definitely still
working on all of these things.


585
00:28:22,526 --> 00:28:25,936
So, I encourage you to play with
them, see if they work for you.


586
00:28:25,976 --> 00:28:27,696
File bugs if you find any.


587
00:28:28,246 --> 00:28:31,746
Let's move on to talking
about media features.


588
00:28:32,666 --> 00:28:34,946
So, we'll cover two
topics here today.


589
00:28:35,396 --> 00:28:37,646
First, we'll talk about
the iOS AirPlay API.


590
00:28:37,646 --> 00:28:40,916
And then we'll talk
about styling captions.


591
00:28:41,826 --> 00:28:45,896
We'll begin with
the AirPlay API.


592
00:28:46,176 --> 00:28:48,286
So, we've been shipping
the HTML5 audio


593
00:28:48,286 --> 00:28:50,266
and video elements
for a few years now.


594
00:28:50,576 --> 00:28:52,446
They have been widely
adopted especially


595
00:28:52,446 --> 00:28:53,866
for content targeting iOS.


596
00:28:54,536 --> 00:28:58,306
And in sessions at past WWDCs,
we've talked extensively


597
00:28:58,306 --> 00:28:59,866
about the many things
that you can do


598
00:29:00,086 --> 00:29:02,716
with these elements including
how you can use JavaScript


599
00:29:03,056 --> 00:29:04,486
to create custom controls.


600
00:29:04,846 --> 00:29:07,746
So here, I'm showing that the
default controls on iOS 7.


601
00:29:08,336 --> 00:29:10,216
But there are some
great examples out there


602
00:29:10,216 --> 00:29:13,706
of custom controls like this
HTML5 showcase video that's


603
00:29:13,706 --> 00:29:17,226
playing inside a really cool
sublime video player made


604
00:29:17,226 --> 00:29:18,346
by the folks of Jillian
[phonetic].


605
00:29:18,576 --> 00:29:19,976
Their video players
are really great.


606
00:29:19,976 --> 00:29:22,726
They are fully HTML5,
fully integrated


607
00:29:22,726 --> 00:29:24,316
with iOS, all retina ready.


608
00:29:24,606 --> 00:29:25,866
They're really, really cool.


609
00:29:26,246 --> 00:29:27,886
But there is one thing
that's been missing


610
00:29:27,886 --> 00:29:29,596
from videos with
custom controls.


611
00:29:29,676 --> 00:29:32,596
If we go back to our default
controls, you'll see it,


612
00:29:32,596 --> 00:29:33,986
it's the AirPlay button.


613
00:29:34,306 --> 00:29:36,746
Up until now, if you chose
to create custom controls


614
00:29:36,746 --> 00:29:39,366
for your video, you had
to miss out on AirPlay.


615
00:29:39,726 --> 00:29:41,656
That is until now in iOS 7.


616
00:29:42,386 --> 00:29:44,936
I'm really excited for
all of you with videos


617
00:29:44,936 --> 00:29:46,546
that have custom
controls to adopt this.


618
00:29:46,966 --> 00:29:48,006
This is going to be great.


619
00:29:48,446 --> 00:29:50,126
So, this is some
really simple markup


620
00:29:50,126 --> 00:29:52,046
for a video with
custom controls.


621
00:29:52,476 --> 00:29:55,846
The video element itself is
lacking the control's attribute


622
00:29:55,846 --> 00:29:57,576
and so that's how you
know that we intend


623
00:29:57,786 --> 00:29:59,196
to provide customer controls.


624
00:29:59,746 --> 00:30:02,416
And here I have some controls
for our Play and Pause button.


625
00:30:02,416 --> 00:30:03,976
Custom controls are
really powerful.


626
00:30:04,076 --> 00:30:06,436
You can have way
more than just a Play


627
00:30:06,436 --> 00:30:10,186
and Pause button I encourage you
to look at past WWDC sessions


628
00:30:10,476 --> 00:30:12,786
if you want to learn more
about custom controls.


629
00:30:13,106 --> 00:30:14,956
But right now, we're just
going to focus on AirPlay


630
00:30:15,046 --> 00:30:16,326
so we're keeping it simple.


631
00:30:16,326 --> 00:30:18,716
And the first step to
supporting AirPlay here is


632
00:30:18,716 --> 00:30:20,946
to actually add an element
for the AirPlay button.


633
00:30:20,946 --> 00:30:23,126
Note that I've hidden
it by default


634
00:30:23,516 --> 00:30:26,876
because I want my custom AirPlay
button to match the behavior


635
00:30:26,876 --> 00:30:29,096
of the defaults AirPlay
button which means


636
00:30:29,096 --> 00:30:32,746
that the button will only show
when AirPlay is available.


637
00:30:32,746 --> 00:30:34,756
And for that matter,
I only want it to show


638
00:30:35,076 --> 00:30:36,856
when the AirPlay
API is available.


639
00:30:37,256 --> 00:30:40,266
So, here's some code that will
make it show at the right time.


640
00:30:40,706 --> 00:30:41,906
Here's my feature detection.


641
00:30:41,906 --> 00:30:43,826
This will make sure
that API is available.


642
00:30:43,826 --> 00:30:46,766
And here, I am using
some of this new API.


643
00:30:46,926 --> 00:30:49,906
This is a new event that you can
listen for on the video element.


644
00:30:50,226 --> 00:30:53,376
It's called WebKit Playback
Target Availability Changed.


645
00:30:53,376 --> 00:30:56,346
This will be called
whenever AirPlay availability


646
00:30:56,406 --> 00:30:57,066
has changed.


647
00:30:57,066 --> 00:30:59,896
So, whenever a new Apple TV
has come on to the network


648
00:30:59,896 --> 00:31:02,016
or when one has left
the network.


649
00:31:02,366 --> 00:31:05,116
And it's also guaranteed--
this event is also guaranteed


650
00:31:05,116 --> 00:31:07,996
to fire soon after you
register for listening for it.


651
00:31:07,996 --> 00:31:09,306
So, you don't have to worry.


652
00:31:09,546 --> 00:31:12,046
This code will run when you're
just setting everything up too.


653
00:31:12,316 --> 00:31:13,966
So, this is the function
that I want


654
00:31:13,966 --> 00:31:16,956
to run whenever this event
fires, very straight forward.


655
00:31:17,186 --> 00:31:19,346
Whenever AirPlay is
available, I want to show


656
00:31:19,346 --> 00:31:20,496
and enable that button.


657
00:31:20,986 --> 00:31:24,966
And whenever it's not available,
I want to hide and disable it.


658
00:31:25,776 --> 00:31:29,156
So, there are some battery power
considerations with listening


659
00:31:29,156 --> 00:31:30,516
to AirPlay availability.


660
00:31:30,916 --> 00:31:33,506
So, you want to be a good
battery power citizen


661
00:31:33,736 --> 00:31:34,436
on the system.


662
00:31:34,436 --> 00:31:36,496
So, you should stop
listening for this event


663
00:31:36,786 --> 00:31:38,106
when you no longer
care about it.


664
00:31:38,196 --> 00:31:40,166
So, maybe when the
video stopped playing,


665
00:31:40,376 --> 00:31:41,916
you can stop listening
for the event.


666
00:31:43,066 --> 00:31:44,476
So, that's all we have to do


667
00:31:44,476 --> 00:31:47,826
to get our custom
AirPlay button showing up.


668
00:31:47,826 --> 00:31:49,406
Always at the right time too.


669
00:31:49,736 --> 00:31:51,036
But we haven't made
it do anything yet.


670
00:31:51,236 --> 00:31:53,546
So, here's some code to
make it do something.


671
00:31:54,226 --> 00:31:56,306
First, I'm starting with
my feature detection.


672
00:31:56,886 --> 00:31:59,046
Then down here, I'm
adding an EventListener


673
00:31:59,046 --> 00:32:00,536
for the click event
on that button.


674
00:32:00,886 --> 00:32:02,326
And whenever that
button is clicked,


675
00:32:02,326 --> 00:32:05,546
I'm calling another new piece
of API on the video element.


676
00:32:05,616 --> 00:32:08,076
This is WebKit Show
Playback Target Picker


677
00:32:08,366 --> 00:32:10,816
and this will make
the native AirPlay,


678
00:32:10,886 --> 00:32:12,746
a root picker actually show up.


679
00:32:13,396 --> 00:32:14,876
So, that's all we have to do


680
00:32:15,146 --> 00:32:17,986
to get our AirPlay
root picker to show up.


681
00:32:18,546 --> 00:32:20,506
There is one more
part to this API.


682
00:32:21,226 --> 00:32:24,226
If we go back to the
video of custom controls,


683
00:32:24,516 --> 00:32:27,386
you can see that when this
video is playing over AirPlay,


684
00:32:27,676 --> 00:32:30,196
that AirPlay button is actually
styled a little differently.


685
00:32:30,566 --> 00:32:33,206
So, this last piece of the
API will let you emulate


686
00:32:33,206 --> 00:32:35,216
that behavior with
your custom controls.


687
00:32:35,696 --> 00:32:38,076
OK, here is the code for that.


688
00:32:38,076 --> 00:32:40,376
This is another new
event that we can listen


689
00:32:40,376 --> 00:32:43,306
for called WebKit
Current Playback Target is


690
00:32:43,306 --> 00:32:44,416
Wireless Changed.


691
00:32:44,836 --> 00:32:48,616
So, this will be-- this event
will fire whenever a video has


692
00:32:48,616 --> 00:32:50,896
started or stopped
playing over AirPlay.


693
00:32:51,176 --> 00:32:54,116
And I'm just updating some
styles whenever that changes.


694
00:32:55,546 --> 00:32:59,486
OK, so that summarizes the new
AirPlay API available on iOS.


695
00:33:00,186 --> 00:33:03,006
Let's talk about
styling captions.


696
00:33:03,776 --> 00:33:06,376
So, providing captions with
your video is a great way


697
00:33:06,376 --> 00:33:07,776
to widen your audience.


698
00:33:08,196 --> 00:33:10,516
Captions are essential
for hearing impaired users


699
00:33:10,756 --> 00:33:13,806
and they are great for users who
don't understand the language


700
00:33:13,806 --> 00:33:15,436
that your video is
spoken in as well.


701
00:33:16,146 --> 00:33:19,876
WebVTT is a file format
for captions defined


702
00:33:19,876 --> 00:33:22,676
in the W3Cs WebVTT
specification.


703
00:33:23,126 --> 00:33:26,876
We added support for WebVTT
captions in our last release.


704
00:33:26,966 --> 00:33:29,756
And there's another session
happening this week that digs


705
00:33:30,046 --> 00:33:33,816
into the topic of captions and
general including HTML captions.


706
00:33:33,816 --> 00:33:37,136
And if you're really interested
in this topic, I encourage you


707
00:33:37,226 --> 00:33:39,066
to attend that session
and learn even more.


708
00:33:39,776 --> 00:33:42,266
So, there are few things
that we nearly support


709
00:33:42,266 --> 00:33:43,426
with captions in this release.


710
00:33:43,866 --> 00:33:47,716
First of all, we'll support
WebVTT that's embedded


711
00:33:47,716 --> 00:33:49,356
in the movie file itself.


712
00:33:49,596 --> 00:33:51,986
In the last release, we
only supported captions


713
00:33:51,986 --> 00:33:53,526
that were in their own file.


714
00:33:54,756 --> 00:33:56,576
And we've support
styling captions


715
00:33:56,576 --> 00:33:57,916
with the Cue Sudo element.


716
00:33:58,756 --> 00:34:00,686
There are a limited
set of CSS properties


717
00:34:00,686 --> 00:34:02,386
that you can use
to style captions.


718
00:34:02,646 --> 00:34:04,486
But I think you'll find
they still offer a lot


719
00:34:04,486 --> 00:34:05,366
of flexibility.


720
00:34:06,136 --> 00:34:09,436
And I would like to invite
Enrica back to show you how


721
00:34:09,436 --> 00:34:12,146
to style the captions.


722
00:34:12,646 --> 00:34:14,775
[Applause]


723
00:34:15,275 --> 00:34:17,346
>> Thank you Beth.


724
00:34:17,706 --> 00:34:20,926
OK, here I have a video for
you that I'm going to play.


725
00:34:21,516 --> 00:34:31,545
[ Foreign Language ]


726
00:34:32,045 --> 00:34:36,386
Many of you probably do not
understand what I'm saying


727
00:34:36,386 --> 00:34:37,856
since I'm speaking Italian.


728
00:34:37,856 --> 00:34:41,656
So, for this reason, I'm going
to turn on the captions here


729
00:34:42,025 --> 00:34:46,065
so that you can follow the
lesson on the croissant making.


730
00:34:46,576 --> 00:34:47,996
Oops-- yes.


731
00:34:48,036 --> 00:34:48,446
[laughs] OK.


732
00:34:49,206 --> 00:34:53,295
This video actually has
support for multiple languages.


733
00:34:53,666 --> 00:34:56,136
In fact, I can click
on the caption button


734
00:34:56,386 --> 00:34:58,876
and switch the text to French


735
00:34:59,656 --> 00:35:04,086
and I also have captions
in Italian.


736
00:35:04,086 --> 00:35:08,086
The system will remember the
language that I choose here


737
00:35:08,086 --> 00:35:09,496
as my preferred language.


738
00:35:09,496 --> 00:35:13,986
So, that next time, I play a
video that has caption will try


739
00:35:14,056 --> 00:35:17,726
to provide caption in that
language if they're available.


740
00:35:18,616 --> 00:35:24,756
So, I would like to
show you how easy it is


741
00:35:24,756 --> 00:35:27,856
to add captions in
another language.


742
00:35:28,296 --> 00:35:31,806
My friend Anders [phonetic] has
kindly provided me with a text


743
00:35:32,086 --> 00:35:34,086
in Swedish for this video.


744
00:35:34,416 --> 00:35:38,336
So, we're going to add
Swedish to this video here.


745
00:35:38,896 --> 00:35:41,786
So, let me bring up the
source for this page.


746
00:35:43,246 --> 00:35:45,426
In here we have the
video element


747
00:35:45,716 --> 00:35:50,366
that contains currently a three
track elements one for each


748
00:35:50,366 --> 00:35:52,346
of the languages that
we currently support.


749
00:35:52,936 --> 00:35:55,856
If I want to add
another one all I have


750
00:35:55,906 --> 00:35:59,836
to do is add another track
element have the source


751
00:36:00,386 --> 00:36:03,886
attribute point to the VTT
file that contains a text


752
00:36:03,886 --> 00:36:07,776
in that language and the source
length attribute indicate what


753
00:36:07,776 --> 00:36:08,956
language that is.


754
00:36:09,276 --> 00:36:13,076
So, I'm going to save this
one and reload my page


755
00:36:14,096 --> 00:36:16,366
and we can play the video.


756
00:36:16,366 --> 00:36:20,936
And now, we'll have
captions in Swedish as well.


757
00:36:21,516 --> 00:36:22,406
Extremely simple.


758
00:36:22,816 --> 00:36:27,726
As Beth mentioned in order
to have captions that we need


759
00:36:27,726 --> 00:36:30,006
to embed them in
the video stream.


760
00:36:30,756 --> 00:36:35,086
And what we have to do
is author a VTT file.


761
00:36:35,516 --> 00:36:41,006
Authoring captions can be a
fairly a time consuming task


762
00:36:41,106 --> 00:36:44,466
but the format of the file


763
00:36:44,466 --> 00:36:47,196
for VTT is very simple
and intuitive.


764
00:36:47,566 --> 00:36:52,656
In fact, the VTT file is a plain
text file that you can author


765
00:36:52,846 --> 00:36:57,476
with your favorite text editor
and its format is very simple.


766
00:36:58,056 --> 00:37:03,306
Each entry of the VTT file is
one corresponds to one line


767
00:37:03,306 --> 00:37:05,296
of the caption and
for each one--


768
00:37:05,296 --> 00:37:08,276
you specify, the start
time and the end time.


769
00:37:08,276 --> 00:37:09,686
Extremely easy.


770
00:37:10,486 --> 00:37:16,036
With the new version of Safari,
we have added the ability


771
00:37:16,036 --> 00:37:17,926
to style the captions.


772
00:37:18,696 --> 00:37:23,786
In order to do that we can
use styles we added to our CSS


773
00:37:24,516 --> 00:37:27,516
to style the Cue Sudo element.


774
00:37:28,046 --> 00:37:35,466
So, let's go back to our source
here and add a rule for the cue.


775
00:37:35,466 --> 00:37:38,586
We want to change the color
of the text to be yellow.


776
00:37:38,836 --> 00:37:41,286
We want to use a different
font and a larger one,


777
00:37:41,516 --> 00:37:44,136
and we want to add a
shadow to the text.


778
00:37:44,916 --> 00:37:46,206
So, once we have done this.


779
00:37:46,736 --> 00:37:51,876
We save, and we reload our
page, and we start playing.


780
00:37:52,436 --> 00:37:55,436
And now, the caption have
a different look and feel,


781
00:37:55,866 --> 00:37:59,446
extremely simple
but this is not all.


782
00:37:59,446 --> 00:38:03,376
You can also style
separately individual elements


783
00:38:03,376 --> 00:38:05,416
of the captions by
defining rules


784
00:38:05,726 --> 00:38:08,606
that you applied
directly to the VTT file.


785
00:38:09,176 --> 00:38:12,936
So, let's imagine we
want to emphasize.


786
00:38:12,936 --> 00:38:16,536
For example, some words
in our caption stream.


787
00:38:16,906 --> 00:38:21,466
So, what I'm going to do, I'm
going to add an emphasis rule


788
00:38:21,466 --> 00:38:24,576
where the text is going to
be shown with the color red.


789
00:38:25,476 --> 00:38:28,326
And then, I'll go
back to my VTT file.


790
00:38:28,816 --> 00:38:31,326
And what I want to
do is highlight


791
00:38:31,326 --> 00:38:33,976
for example the word dough
sheeter [phonetic] here.


792
00:38:34,206 --> 00:38:35,736
So, here is what
I'm going to do.


793
00:38:35,736 --> 00:38:38,796
I'll add the rule
right to the VTT file.


794
00:38:38,796 --> 00:38:44,226
I will now save it
and reload our movie


795
00:38:44,226 --> 00:38:47,756
and when I start playing
it the word should show


796
00:38:47,756 --> 00:38:51,526
up in the second caption
and it should be red.


797
00:38:52,546 --> 00:38:53,956
Very easy.


798
00:38:54,546 --> 00:38:56,586
[Applause] So, this
is all for our demo.


799
00:38:56,586 --> 00:38:57,966
I'll give it back to Beth


800
00:38:58,286 --> 00:38:59,796
to continue the rest
of our session.


801
00:39:01,076 --> 00:39:02,156
>> That was awesome.


802
00:39:02,246 --> 00:39:03,926
Isn't that video mesmerizing?


803
00:39:04,216 --> 00:39:06,826
I could watch it all day.


804
00:39:08,236 --> 00:39:12,586
OK. So, those are two cool new
media features that we've added


805
00:39:12,586 --> 00:39:14,746
to WebKit this year for
a better integration


806
00:39:14,746 --> 00:39:17,726
with the iOS platform
and AairPlay devices.


807
00:39:18,006 --> 00:39:20,386
And for an improved
accessibility experience.


808
00:39:21,606 --> 00:39:25,026
OK. So, we've added a bunch of
other things to WebKit this year


809
00:39:25,026 --> 00:39:27,046
that are smaller
little enhancements.


810
00:39:27,046 --> 00:39:29,356
I think that these
things will be great tools


811
00:39:29,356 --> 00:39:30,906
that you can add
to your toolbox.


812
00:39:31,746 --> 00:39:33,386
So, we'll cover some
enhancements


813
00:39:33,746 --> 00:39:35,216
in four categories here.


814
00:39:35,216 --> 00:39:37,656
First, we'll talk about
some font enhancements.


815
00:39:37,656 --> 00:39:40,166
We'll talk about a few
smaller CSS things.


816
00:39:40,406 --> 00:39:43,486
We'll talk about graphics.


817
00:39:44,406 --> 00:39:46,666
And finally, I want to tell
you about a few changes


818
00:39:46,666 --> 00:39:47,696
that might affect you.


819
00:39:48,286 --> 00:39:50,826
So, will start with fonts.


820
00:39:50,906 --> 00:39:55,296
So, one of the many exciting new
aspects to the new iOS 7 look


821
00:39:55,296 --> 00:39:59,336
and feel is the beautiful
extremely readable dynamic type


822
00:39:59,376 --> 00:40:01,976
which comes in all of this
different variants depending


823
00:40:02,186 --> 00:40:04,976
on what you're using
the text for.


824
00:40:05,326 --> 00:40:07,076
And of course there's
a system wide setting


825
00:40:07,076 --> 00:40:10,806
where the user can control what
size of the font is comfortable


826
00:40:10,806 --> 00:40:13,016
to them and that will be
reflected in all of the apps


827
00:40:13,106 --> 00:40:14,436
that are using dynamic type.


828
00:40:15,046 --> 00:40:17,066
Well, I'm delighted to
tell you that you can opt


829
00:40:17,066 --> 00:40:21,026
into using dynamic
type in WebKit on iOS.


830
00:40:21,116 --> 00:40:25,136
So, that you're app and or
your websites can reflect all


831
00:40:25,136 --> 00:40:26,846
of those settings that
the user has selected


832
00:40:26,846 --> 00:40:30,616
and it will really mix in with
the look and feel of iOS 7.


833
00:40:31,216 --> 00:40:35,116
So, we've added a bunch of new
values to the CSS Font Property.


834
00:40:35,366 --> 00:40:38,186
They can reflect all of
these different types of--


835
00:40:38,336 --> 00:40:41,156
all of these different
variants of the dynamic type.


836
00:40:41,526 --> 00:40:43,936
And so here I'm showing
them in the larger font size


837
00:40:44,226 --> 00:40:47,176
but if the user selects the
medium size or small size,


838
00:40:47,556 --> 00:40:50,096
the WebView will
honor that setting


839
00:40:50,096 --> 00:40:53,136
and it will update dynamically
whenever the user changes


840
00:40:53,136 --> 00:40:53,686
the setting.


841
00:40:53,686 --> 00:40:56,816
So, this is a nice little
way to integrate with iOS 7,


842
00:40:56,816 --> 00:40:58,786
if that's a goal
for your content.


843
00:40:59,256 --> 00:41:03,696
So, if you had a
chance to browse the web


844
00:41:03,696 --> 00:41:06,476
with Safari 7 yet, you
may have noticed the text


845
00:41:06,476 --> 00:41:09,036
on websites looks more
beautiful and more readable


846
00:41:09,036 --> 00:41:12,186
than ever before and that's
because we've enabled kerning


847
00:41:12,186 --> 00:41:13,566
and ligatures by default.


848
00:41:14,056 --> 00:41:16,116
So, you don't have to do
anything to opt into this.


849
00:41:16,116 --> 00:41:19,106
This is on automatically
for all websites.


850
00:41:20,056 --> 00:41:22,296
If you're not familiar
with these technologies,


851
00:41:22,296 --> 00:41:23,876
these are two different
technologies


852
00:41:24,206 --> 00:41:27,476
that make text more readable
by adjusting the amount


853
00:41:27,476 --> 00:41:29,286
of space between characters.


854
00:41:29,656 --> 00:41:32,326
So, kerning will actually
programmatically adjust the


855
00:41:32,326 --> 00:41:34,026
amount of space between glyphs.


856
00:41:34,026 --> 00:41:36,426
So, here's a series of
glyphs with no kerning


857
00:41:36,426 --> 00:41:38,876
and this is what the
same text that looks


858
00:41:38,876 --> 00:41:40,296
like with kerning applied.


859
00:41:40,626 --> 00:41:42,746
You can see that glyphs
are much closer together.


860
00:41:42,996 --> 00:41:45,596
It's much easier to tell that
they're meant to be a part


861
00:41:45,596 --> 00:41:47,806
of the same admittedly
made up word.


862
00:41:49,396 --> 00:41:52,256
Ligatures on the other hand
are actually specially glyphs


863
00:41:52,256 --> 00:41:54,736
in the font itself
that combine two


864
00:41:54,736 --> 00:41:57,456
or more characters
into a single glyph.


865
00:41:57,676 --> 00:42:01,746
So, FI is a classic example
here on the left to have F and I


866
00:42:01,746 --> 00:42:04,616
as two separate glyphs and
on the right is a glyph


867
00:42:04,616 --> 00:42:06,976
for a ligature that
combines F and I.


868
00:42:07,216 --> 00:42:09,106
That's a really common ligature


869
00:42:09,106 --> 00:42:11,336
if a font contains
any ligatures at all.


870
00:42:11,336 --> 00:42:15,036
It usually contains one for
FI, but some fonts contain lots


871
00:42:15,036 --> 00:42:18,306
of other ligatures too lobster
is a great example of a font


872
00:42:18,306 --> 00:42:19,876
with lots of interesting
ligatures.


873
00:42:19,876 --> 00:42:22,996
If you look at the
FIX and fixing--


874
00:42:23,116 --> 00:42:26,256
oh, and the top row there has
no kerning and no ligatures.


875
00:42:26,526 --> 00:42:27,836
Bottom row has both.


876
00:42:27,836 --> 00:42:31,226
So, we can see the FIX
and fixing the transition


877
00:42:31,226 --> 00:42:33,016
between those letters and
the bottom row is just


878
00:42:33,016 --> 00:42:35,846
so much smoother, it's
using that ligature instead


879
00:42:36,136 --> 00:42:39,936
and the EX an example is another
great example or the transition


880
00:42:39,936 --> 00:42:40,996
between those letters is just


881
00:42:40,996 --> 00:42:44,286
so much smoother using the
ligature, so much less jarring.


882
00:42:45,086 --> 00:42:47,966
So, over the most part we
think that this change is going


883
00:42:47,966 --> 00:42:49,926
to be a huge win for
you and your content.


884
00:42:49,926 --> 00:42:53,176
Everything should just look more
beautiful but as you can see


885
00:42:53,286 --> 00:42:56,356
on these slides sometimes
when kerning


886
00:42:56,396 --> 00:43:01,026
and ligatures are enabled,
text will take up less space.


887
00:43:01,026 --> 00:43:04,836
So, if you were expecting your
text in your app or your website


888
00:43:04,836 --> 00:43:08,186
to be some exact size it may
be different now that kerning


889
00:43:08,186 --> 00:43:09,606
and ligatures are on by default.


890
00:43:09,846 --> 00:43:12,236
And if that's a problem for you
that you want to fix as soon


891
00:43:12,236 --> 00:43:15,646
as possible, you can
disable them using the WebKit


892
00:43:15,646 --> 00:43:17,566
Font-Kerning CSS Property


893
00:43:17,816 --> 00:43:19,626
and the WebKit
Font-Variant-Ligature


894
00:43:19,626 --> 00:43:20,686
CSS Property.


895
00:43:21,166 --> 00:43:24,656
So, those are two nice
little font enhancements.


896
00:43:24,656 --> 00:43:26,926
I think both are huge when
it is for readability.


897
00:43:27,486 --> 00:43:29,766
Let's talk about
some new CSS things.


898
00:43:30,316 --> 00:43:36,196
So, Safari 7 now supports the
CSS Calc Function from the CSS--


899
00:43:36,736 --> 00:43:40,056
the W3C CSS Values and
Units specification.


900
00:43:40,296 --> 00:43:43,096
So, this is an incredibly
useful new feature and we know


901
00:43:43,096 --> 00:43:45,916
that web developers have been
clamoring for it for years.


902
00:43:46,226 --> 00:43:50,506
This will allow you to define
any numerical CSS value in terms


903
00:43:50,556 --> 00:43:52,296
of a mathematical equation.


904
00:43:52,296 --> 00:43:55,226
So, you can use addition,
subtraction, multiplication,


905
00:43:55,226 --> 00:43:58,486
division, and you can even
mix units like I'm doing here


906
00:43:58,486 --> 00:44:02,246
or I'm setting something to be
100 percent minus 80 pixels.


907
00:44:02,696 --> 00:44:05,486
Our clients at Apple have
already started using this


908
00:44:05,486 --> 00:44:07,506
and they've come back
to us just so excited


909
00:44:07,806 --> 00:44:10,846
about how much calc has
simplified their lives that's--


910
00:44:11,166 --> 00:44:14,186
let people get rid of lots of
complicated JavaScripts that had


911
00:44:14,186 --> 00:44:17,376
to run on resize much
easier code to follow


912
00:44:17,376 --> 00:44:19,496
and they've been telling
us they're getting better


913
00:44:19,496 --> 00:44:20,836
performance out of it as well.


914
00:44:21,286 --> 00:44:25,946
Another cool new CSS
Property's WebKit Clip-Path


915
00:44:25,946 --> 00:44:28,296
from the W3C CSS Masking Module.


916
00:44:28,786 --> 00:44:31,486
It allows you to clip
an element to a path.


917
00:44:31,486 --> 00:44:34,496
So, for example, in my
Pizza Manifesto I could clip


918
00:44:34,496 --> 00:44:35,886
that image to a shape.


919
00:44:36,486 --> 00:44:38,026
The syntax is really simple.


920
00:44:38,026 --> 00:44:40,656
It takes a shape as
a parameter defined


921
00:44:40,726 --> 00:44:42,196
in the CSS Shapes Module.


922
00:44:42,196 --> 00:44:46,526
The first two numbers here
are the X and Y coordinates


923
00:44:46,526 --> 00:44:50,346
for the origin of the circle and
the third number is the radius.


924
00:44:50,616 --> 00:44:52,876
And there are few other shapes
that we support right now,


925
00:44:52,876 --> 00:44:54,946
rectangle, ellipse and polygon.


926
00:44:55,516 --> 00:45:00,566
OK. So, those are two
cool new CSS features.


927
00:45:00,566 --> 00:45:02,036
There are so many more I wish


928
00:45:02,086 --> 00:45:03,456
that I had time to
tell you about.


929
00:45:03,716 --> 00:45:07,356
One of my personal favorite
CSS enhancements that's not


930
00:45:07,356 --> 00:45:10,706
in this slides is that
they've added a new value


931
00:45:10,706 --> 00:45:13,136
for the position property
called WebKit Sticky.


932
00:45:13,376 --> 00:45:15,436
It's really, really
cool and super useful.


933
00:45:15,646 --> 00:45:18,296
My colleague Simon Fraser
will be covering it tomorrow


934
00:45:18,536 --> 00:45:21,206
in his session about power
and performance in Safari.


935
00:45:21,506 --> 00:45:24,526
So, I strongly encourage you
to go to that session and learn


936
00:45:24,616 --> 00:45:26,006
about sticky position.


937
00:45:27,226 --> 00:45:28,186
All right.


938
00:45:28,186 --> 00:45:29,206
Let's talk about graphics.


939
00:45:29,206 --> 00:45:31,846
So, we've also added a
few new JavaScript API's


940
00:45:31,936 --> 00:45:35,316
for the HTML Canvas Element
that I'd like to tell you about.


941
00:45:36,546 --> 00:45:40,016
We now support name blending
modes for compositing colors.


942
00:45:40,406 --> 00:45:42,566
So, if one really simple
line of JavaScript,


943
00:45:42,566 --> 00:45:44,506
I can composite these colors.


944
00:45:44,816 --> 00:45:48,226
I just want to set the
global composite operation


945
00:45:48,226 --> 00:45:49,086
to a named mode.


946
00:45:49,086 --> 00:45:51,226
Here I'm using multiply,
there are number


947
00:45:51,226 --> 00:45:52,866
of other name mode as well.


948
00:45:54,296 --> 00:45:58,366
Another super cool new canvas
API is the path object.


949
00:45:58,766 --> 00:46:02,786
So, this is a great new API
that will let you store paths


950
00:46:02,786 --> 00:46:05,466
as variables up until now
if you were creating paths


951
00:46:05,726 --> 00:46:07,816
and canvas you could
only have one at a time.


952
00:46:08,116 --> 00:46:11,336
If you wanted to create a new
path then you would lose your


953
00:46:11,336 --> 00:46:12,356
old one entirely.


954
00:46:13,066 --> 00:46:14,666
So, this is a really
trivial example


955
00:46:14,666 --> 00:46:18,036
or I'm just creating two paths
upfront and drawing them later.


956
00:46:18,316 --> 00:46:21,566
Another great part of
this API is that they're--


957
00:46:21,566 --> 00:46:24,146
is going to really
simply hit testing


958
00:46:24,146 --> 00:46:26,246
with the path object
you can just ask it,


959
00:46:26,246 --> 00:46:28,786
is point in path that's a
function, that's prior to API


960
00:46:29,326 --> 00:46:32,106
to hit jus that path up
until now, if you wanted


961
00:46:32,106 --> 00:46:34,276
to do hit testing which I'm
sure a lot of you are doing


962
00:46:34,276 --> 00:46:37,996
for your canvas games and your
canvas interactive widgets.


963
00:46:38,446 --> 00:46:42,196
You'd have to actually rebuild
every path that might be hit.


964
00:46:42,546 --> 00:46:45,706
And then see if the point was
in that path, throw it away,


965
00:46:45,886 --> 00:46:46,836
rebuild your next path.


966
00:46:47,186 --> 00:46:48,256
It's just a whole bunch of code.


967
00:46:48,256 --> 00:46:51,316
I anticipate this,
simplifying a lot of things.


968
00:46:53,146 --> 00:46:56,326
OK. I also want to take a moment
to talk about canvas on retina,


969
00:46:57,076 --> 00:47:00,736
if you were at WWDC last year,
then you may have seen a session


970
00:47:00,986 --> 00:47:05,196
that we gave all about higher
resolution web content creating


971
00:47:05,196 --> 00:47:07,366
web content for high
resolution displays.


972
00:47:07,686 --> 00:47:10,516
In that session we talked a
lot about canvas and that's


973
00:47:10,516 --> 00:47:13,356
because if you want to have
a beautiful sharp canvas


974
00:47:13,606 --> 00:47:14,686
on a retina display.


975
00:47:14,896 --> 00:47:17,376
You actually need to give
that canvas a backing store


976
00:47:17,766 --> 00:47:19,346
that is what we call doubled.


977
00:47:19,346 --> 00:47:21,936
So, twice the width, twice the
height actually four times the


978
00:47:21,936 --> 00:47:22,916
number of pixels.


979
00:47:24,376 --> 00:47:29,266
So, if you want a beautiful
sharp canvas on a retina device.


980
00:47:29,266 --> 00:47:31,176
You need what we call
a 2X backing store.


981
00:47:31,506 --> 00:47:34,116
So, if you were here last year
you also would have learned


982
00:47:34,406 --> 00:47:37,556
that Safari 6 was going to
auto double to ensure this.


983
00:47:37,876 --> 00:47:40,876
This means that we are
automatically creating a backing


984
00:47:40,876 --> 00:47:42,746
store with twice the
width and twice the height


985
00:47:42,986 --> 00:47:45,156
that you are asking for
when it was rendering


986
00:47:45,156 --> 00:47:46,406
on a retina display.


987
00:47:47,786 --> 00:47:50,376
We also told you that
iOS would not auto double


988
00:47:50,666 --> 00:47:53,816
because there are more memory
constraints on that platform,


989
00:47:54,006 --> 00:47:56,526
it might be a problem that we
were automatically requesting


990
00:47:56,796 --> 00:47:58,016
so much more space.


991
00:47:58,366 --> 00:48:02,416
Well, people got
confused and sad


992
00:48:02,776 --> 00:48:05,126
and that was definitely
not our goal.


993
00:48:05,356 --> 00:48:08,626
Our goal is to have beautiful
canvases, canvi [phonetic]


994
00:48:09,126 --> 00:48:11,236
on retina displays
for all of you.


995
00:48:12,306 --> 00:48:14,266
And so, we've decided
in Safari 7


996
00:48:14,266 --> 00:48:15,736
that we will no longer
auto double.


997
00:48:15,736 --> 00:48:19,286
So, Safari 7 will match what
iOS is been doing all along


998
00:48:19,656 --> 00:48:23,116
and no auto doubling will happen
will give you a backing store


999
00:48:23,116 --> 00:48:24,806
of exactly the size
that you request.


1000
00:48:25,586 --> 00:48:29,036
The good news is that if you
followed our instructions last


1001
00:48:29,036 --> 00:48:31,646
year about how to
create a canvas


1002
00:48:31,646 --> 00:48:34,876
that would be the right size
on a none retina display


1003
00:48:34,876 --> 00:48:38,536
and on a retina display that
advice all still totally works


1004
00:48:38,536 --> 00:48:41,426
and still will do the right
thing on all platforms.


1005
00:48:41,426 --> 00:48:44,446
So, I still encourage you to
look at that session if you want


1006
00:48:44,446 --> 00:48:48,336
to know how to create a high
resolution canvas element.


1007
00:48:50,046 --> 00:48:53,866
OK. So, that covers
graphics enhancements,


1008
00:48:53,866 --> 00:48:56,566
I think there is some new
API's that will be super useful


1009
00:48:56,566 --> 00:48:59,486
for those of you using
canvas and I think


1010
00:48:59,486 --> 00:49:01,976
that hopefully we've cleared up
some confusion by getting rid


1011
00:49:01,976 --> 00:49:06,486
of the auto doubling that
you were doing on OS X.


1012
00:49:06,566 --> 00:49:08,396
OK. So, we at Apple and we


1013
00:49:08,396 --> 00:49:11,726
in the WebKit Open Source
Project consider compatibility


1014
00:49:11,726 --> 00:49:13,876
to be among the most
important of our goals.


1015
00:49:13,926 --> 00:49:16,536
So, we never want to
intentionally introduce


1016
00:49:16,536 --> 00:49:19,996
that compatibility problem
but sometimes to make a cake,


1017
00:49:19,996 --> 00:49:21,396
you have to break a few eggs.


1018
00:49:21,696 --> 00:49:24,316
So, here's a summary of changes
that we made for good reasons


1019
00:49:24,616 --> 00:49:27,066
that we think will be awesome
for your most of the time


1020
00:49:27,066 --> 00:49:29,056
but they do run the
risk of running


1021
00:49:29,056 --> 00:49:30,456
into some problems for you.


1022
00:49:31,206 --> 00:49:33,406
So, we've covered the first
couple of this already.


1023
00:49:33,676 --> 00:49:36,786
First is that canvas no longer
auto doubles on the Mac,


1024
00:49:36,786 --> 00:49:39,246
if you did not follow
our advice from last year


1025
00:49:39,246 --> 00:49:41,506
and you're depending on Safari


1026
00:49:41,506 --> 00:49:44,196
to automatically create a
bigger backing store for you,


1027
00:49:44,436 --> 00:49:49,366
then you might have some blurry
canvi on retina these days.


1028
00:49:49,516 --> 00:49:51,356
Another thing to make
note of is that kerning


1029
00:49:51,356 --> 00:49:52,556
and ligatures are on by default.


1030
00:49:52,556 --> 00:49:55,276
Again, we've talked about
this, so now text might take


1031
00:49:55,276 --> 00:49:56,826
up less space than it used to.


1032
00:49:57,066 --> 00:49:58,916
So, just something
to be on the lookout


1033
00:49:58,916 --> 00:50:01,976
for if you were depending
on a specific size.


1034
00:50:02,446 --> 00:50:05,446
Another change that we made is


1035
00:50:05,446 --> 00:50:08,666
that the CSS background
shorthand will now overwrite


1036
00:50:08,666 --> 00:50:09,636
earlier settings.


1037
00:50:09,926 --> 00:50:12,936
So, this is a change that we
made to match the specification


1038
00:50:13,276 --> 00:50:15,186
and it was a change that
was added to the spec


1039
00:50:15,186 --> 00:50:17,476
because the CSS Community
really wanted it.


1040
00:50:17,566 --> 00:50:20,266
So, this is again something that
we think you'll really like.


1041
00:50:20,356 --> 00:50:24,306
So, it solving this
problem where people wanted


1042
00:50:24,306 --> 00:50:26,356
at some later point in
their cascade to be able


1043
00:50:26,356 --> 00:50:27,426
to say background none


1044
00:50:27,706 --> 00:50:30,246
and to have it reset
all background values.


1045
00:50:30,516 --> 00:50:31,986
But it didn't actually do that.


1046
00:50:31,986 --> 00:50:34,726
This background size
would not have been reset


1047
00:50:35,156 --> 00:50:37,046
in prior versions of Safari.


1048
00:50:37,046 --> 00:50:38,876
Now, it will be.


1049
00:50:39,156 --> 00:50:40,236
So, that's the great news.


1050
00:50:41,026 --> 00:50:42,506
If you were writing
code like this though,


1051
00:50:42,506 --> 00:50:45,336
you may have expected that
background size to be honored,


1052
00:50:45,686 --> 00:50:47,146
but it won't be honored anymore.


1053
00:50:47,146 --> 00:50:49,206
So, that's a little bit of a
gotcha to be on the lookout


1054
00:50:49,206 --> 00:50:51,376
for here, but for the
most part we think


1055
00:50:51,376 --> 00:50:52,626
that you're going
to really like this.


1056
00:50:52,626 --> 00:50:56,976
This is something that
a lot of people wanted.


1057
00:50:56,976 --> 00:50:58,496
I'm delighted to tell you


1058
00:50:58,496 --> 00:51:02,576
that we've unprefixed
transition as we call it.


1059
00:51:02,576 --> 00:51:05,666
The transition specification
has reached a level of maturity


1060
00:51:05,666 --> 00:51:07,736
that we can ship a
version of transition


1061
00:51:07,976 --> 00:51:09,536
without the WebKit prefix.


1062
00:51:09,886 --> 00:51:10,936
So, I think this is--


1063
00:51:10,936 --> 00:51:13,246
again, another thing that it's
going to be great for you.


1064
00:51:13,246 --> 00:51:14,826
It should simplify
some of your CSS.


1065
00:51:14,826 --> 00:51:17,666
The only gotcha here is
that there is some code,


1066
00:51:17,876 --> 00:51:20,466
out in the wild that
assumes that if transition is


1067
00:51:20,466 --> 00:51:23,836
on prefix then CSS
animation is also on prefix


1068
00:51:24,026 --> 00:51:25,396
which is not a safe assumption


1069
00:51:25,646 --> 00:51:27,506
and it's not the
case in Safari 7.


1070
00:51:27,556 --> 00:51:29,426
So, that's just a
little something


1071
00:51:29,426 --> 00:51:30,316
to be on the lookout for.


1072
00:51:30,316 --> 00:51:35,086
OK. So, that covers
the enhancements


1073
00:51:35,086 --> 00:51:36,776
that we have time for today.


1074
00:51:36,776 --> 00:51:38,616
There are so many other
things that I wish


1075
00:51:38,856 --> 00:51:40,166
that I had time to
tell you about.


1076
00:51:40,446 --> 00:51:42,396
But there are many
other sessions this week


1077
00:51:42,396 --> 00:51:44,066
that will cover a lot of them.


1078
00:51:44,926 --> 00:51:46,826
So, there are three things
that I would like you


1079
00:51:46,826 --> 00:51:48,196
to leave here today with.


1080
00:51:48,316 --> 00:51:51,626
First, rich magazine-like
layouts are coming to the web,


1081
00:51:51,626 --> 00:51:54,156
this is something that it's
very important to us something


1082
00:51:54,156 --> 00:51:55,696
that we're working on a lot.


1083
00:51:57,136 --> 00:51:59,366
We're always looking to
have better integration


1084
00:51:59,366 --> 00:52:01,076
with our platform
and our devices.


1085
00:52:01,076 --> 00:52:03,726
I think that the AirPlay
API and our support


1086
00:52:03,726 --> 00:52:06,656
for dynamic type are two
great examples of that.


1087
00:52:06,656 --> 00:52:10,676
And finally, there's tons of new
stuff in WebKit all the time.


1088
00:52:10,676 --> 00:52:13,316
There's so many things-- we
talked about so many things


1089
00:52:13,316 --> 00:52:15,396
or so many more things
I wish we had time for,


1090
00:52:15,706 --> 00:52:19,226
if you're interested in keeping
up with our activity and WebKit,


1091
00:52:19,396 --> 00:52:21,986
we've actually been doing
a pretty good job lately


1092
00:52:21,986 --> 00:52:24,526
of summarizing the most
exciting changes each week


1093
00:52:24,526 --> 00:52:27,606
on our blog webkit.org/blog.


1094
00:52:27,606 --> 00:52:30,076
I encourage you to check it out.


1095
00:52:30,076 --> 00:52:32,276
If you have more
questions there are a lot


1096
00:52:32,276 --> 00:52:34,156
of resources available to you.


1097
00:52:35,976 --> 00:52:39,136
And I mentioned several times
many other sessions this week.


1098
00:52:39,346 --> 00:52:42,116
Right after this session, in a
different room, there are going


1099
00:52:42,116 --> 00:52:45,126
to be two fantastic sessions
about the improvements


1100
00:52:45,126 --> 00:52:47,546
that we've made to our
developer tools this year.


1101
00:52:47,756 --> 00:52:49,386
I really encourage
you to go to them


1102
00:52:49,726 --> 00:52:52,786
up in Russian Hill tomorrow
morning on the session


1103
00:52:52,786 --> 00:52:53,806
about power and performance.


1104
00:52:53,806 --> 00:52:55,456
I referenced this
earlier or you'll learn


1105
00:52:55,456 --> 00:52:58,376
about position Sticky
in this session and lots


1106
00:52:58,376 --> 00:53:00,526
of other really great
tips and tricks


1107
00:53:00,566 --> 00:53:03,186
for having a really
fast responsive website.


1108
00:53:03,566 --> 00:53:06,296
If you want to learn more about
captions there's the session


1109
00:53:06,386 --> 00:53:09,366
about preparing and presenting
media for accessibility.


1110
00:53:09,366 --> 00:53:12,886
And on Friday, we have two more
great sessions you can learn all


1111
00:53:12,886 --> 00:53:15,216
about how to make push
notifications for your websites


1112
00:53:15,216 --> 00:53:18,266
which was shown in the keynote
yesterday and you can learn all


1113
00:53:18,266 --> 00:53:20,246
about our new objectives,
see JavaScript API.


1114
00:53:21,206 --> 00:53:21,646
That's it.


1115
00:53:21,646 --> 00:53:22,856
Thank you all for coming.


1116
00:53:22,856 --> 00:53:27,236
Thank you for listening.


1117
00:53:27,603 --> 00:53:29,603
[Applause]

