1
00:00:07,516 --> 00:00:18,500
[ Music ]


2
00:00:26,516 --> 00:00:31,626
[ Applause ]


3
00:00:32,125 --> 00:00:33,306
>> Hello everyone.


4
00:00:33,756 --> 00:00:35,346
Welcome to Session 230.


5
00:00:35,546 --> 00:00:39,096
I'm Sirisha, an engineer
on CallKit and I'm joined


6
00:00:39,096 --> 00:00:41,396
by my colleagues,
Stewart and Nick.


7
00:00:41,396 --> 00:00:44,786
And we are excited to introduce
a brand new framework today,


8
00:00:45,416 --> 00:00:45,886
CallKit.


9
00:00:49,096 --> 00:00:51,816
A lot of you here have
created VoIP apps before.


10
00:00:52,776 --> 00:00:54,776
You have changed the
face of telephony


11
00:00:55,056 --> 00:00:56,656
and have made the world smaller.


12
00:00:57,816 --> 00:01:01,926
And you want your app to be
the primary way your users make


13
00:01:01,926 --> 00:01:05,126
and receive calls on
iOS and we want to help.


14
00:01:06,216 --> 00:01:07,706
CallKit is a framework
that's going


15
00:01:07,706 --> 00:01:09,876
to elevate your third
party VoIP apps


16
00:01:10,156 --> 00:01:11,646
to a first party experience.


17
00:01:12,516 --> 00:01:18,556
[ Applause ]


18
00:01:19,056 --> 00:01:19,446
Thank you.


19
00:01:20,146 --> 00:01:22,466
So while a lot of you
have created VoIP apps,


20
00:01:22,546 --> 00:01:25,156
for the next 40 minutes
let's assume that you


21
00:01:25,156 --> 00:01:28,106
and I have created a brand
new app called Speakerbox.


22
00:01:28,766 --> 00:01:31,536
So Speakerbox is a
simple app that can make


23
00:01:31,536 --> 00:01:36,026
and receive voice calls on
iOS as iOS exists today.


24
00:01:36,606 --> 00:01:39,776
So before we take a look, let
me setup the stage for you.


25
00:01:39,956 --> 00:01:42,256
So Jane has been
traveling around Europe


26
00:01:42,256 --> 00:01:45,316
and her concerned parents
are trying to reach her


27
00:01:45,316 --> 00:01:46,576
to make sure she's doing okay.


28
00:01:47,596 --> 00:01:50,206
But because she's international
they're using Speakerbox


29
00:01:50,326 --> 00:01:51,316
to make calls to her.


30
00:01:52,136 --> 00:01:55,746
So let's see how an incoming
call to Jane looks like today.


31
00:01:56,296 --> 00:01:58,776
So this is Jane's locked screen.


32
00:01:59,576 --> 00:02:01,676
And at first, she gets
an iMessage from Dad.


33
00:02:02,246 --> 00:02:03,946
And before she could
even respond,


34
00:02:04,086 --> 00:02:05,736
she gets an incoming
call from mom.


35
00:02:06,246 --> 00:02:09,166
Jane can't discern
the difference


36
00:02:09,166 --> 00:02:12,856
between this incoming
iMessage notification


37
00:02:12,956 --> 00:02:15,486
and the incoming phone
call notification


38
00:02:16,196 --> 00:02:19,146
because that's just what
VoIP calls are today.


39
00:02:19,466 --> 00:02:20,776
Just a notification.


40
00:02:21,676 --> 00:02:23,906
And if Jane wants to
actually answer this call,


41
00:02:24,286 --> 00:02:27,566
she has to slide on
Speakerbox, type in password,


42
00:02:27,806 --> 00:02:30,606
and then that gets
her taken to the app


43
00:02:30,606 --> 00:02:31,896
and then she can begin speaking.


44
00:02:32,296 --> 00:02:36,206
And this is Jane's
unlocked screen


45
00:02:36,206 --> 00:02:38,426
and the experience
is just as bad.


46
00:02:39,476 --> 00:02:41,056
She gets an incoming
call from Mom.


47
00:02:42,936 --> 00:02:45,286
Did you miss that
notification by any chance?


48
00:02:46,426 --> 00:02:47,016
That's right.


49
00:02:47,016 --> 00:02:49,686
It was just a banner
from the top.


50
00:02:49,836 --> 00:02:53,256
So wouldn't it be nice if
instead the incoming call


51
00:02:53,256 --> 00:02:55,786
to Jane looked more like this?


52
00:02:56,786 --> 00:02:58,416
This is Jane's locked
screen still.


53
00:02:59,166 --> 00:03:00,876
And she gets an incoming
call from Mom.


54
00:03:01,586 --> 00:03:03,956
Notice the full screen
Native UI.


55
00:03:04,516 --> 00:03:08,396
[ Applause ]


56
00:03:08,896 --> 00:03:11,566
And Jane can just
slide to answer


57
00:03:11,566 --> 00:03:12,896
and start talking to her mom.


58
00:03:12,896 --> 00:03:18,546
And from the unlock
screen, it's the same, rich,


59
00:03:18,786 --> 00:03:21,466
Native UI with answer
and decline buttons


60
00:03:21,736 --> 00:03:23,706
and your custom ringtone
playing.


61
00:03:25,516 --> 00:03:29,546
[ Applause ]


62
00:03:30,046 --> 00:03:32,706
And wouldn't it be nice if
VoIP calls could interplay


63
00:03:32,706 --> 00:03:34,096
with other calls on the systems?


64
00:03:34,946 --> 00:03:38,316
Perhaps at the telephony
call or a FaceTime audio call


65
00:03:38,716 --> 00:03:40,516
or maybe another VoIP call?


66
00:03:41,056 --> 00:03:46,606
And even have VoIP calls get
started from recents, favorites,


67
00:03:46,796 --> 00:03:48,606
and even get assigned
to contacts.


68
00:03:49,526 --> 00:03:52,986
And get started from
Siri, Bluetooth,


69
00:03:53,446 --> 00:03:58,006
and even get do not disturb
and blocked functionality.


70
00:03:58,736 --> 00:03:59,976
That is CallKit.


71
00:04:01,516 --> 00:04:09,006
[ Applause ]


72
00:04:09,506 --> 00:04:10,186
All right.


73
00:04:10,406 --> 00:04:12,936
So today we're going to go over
the architecture of CallKit


74
00:04:13,366 --> 00:04:17,036
and incoming call flow, and
outgoing call flow, and then end


75
00:04:17,036 --> 00:04:19,676
with some more details
about the API.


76
00:04:19,676 --> 00:04:20,516
So let's get started.


77
00:04:21,446 --> 00:04:21,736
All right.


78
00:04:21,736 --> 00:04:25,346
So over here, we have all our
system services like Bluetooth,


79
00:04:25,346 --> 00:04:27,846
Siri, CarPlay, and
then our Native UI.


80
00:04:28,426 --> 00:04:31,856
And over here, we have all
our VoIP apps like Speakerbox.


81
00:04:32,546 --> 00:04:34,346
These are two separate
entities right now.


82
00:04:34,806 --> 00:04:37,106
Calls made on Speakerbox
are non known to our system


83
00:04:37,106 --> 00:04:38,586
and then our services.


84
00:04:39,046 --> 00:04:42,416
In iOS 10, we have
adopted CallKit


85
00:04:42,456 --> 00:04:44,116
in all our system services.


86
00:04:44,806 --> 00:04:46,546
So now calls made on
Bluetooth are known


87
00:04:46,546 --> 00:04:48,986
to our system UI via CallKit.


88
00:04:49,706 --> 00:04:52,526
So if Speakerbox wants
a similar experience,


89
00:04:52,696 --> 00:04:54,246
it needs to adopt CallKit.


90
00:04:55,206 --> 00:04:57,536
So now calls made on
Speakerbox will get known


91
00:04:57,536 --> 00:04:58,846
to our system via CallKit


92
00:04:59,326 --> 00:05:02,156
and then system can
publish these calls


93
00:05:02,156 --> 00:05:03,706
to the rest of our services.


94
00:05:04,576 --> 00:05:07,386
So let's talk a little
bit more about Speakerbox.


95
00:05:07,786 --> 00:05:11,606
So here we have Speakerbox
and all of its code.


96
00:05:11,996 --> 00:05:15,006
It talks to its network
and has its own app UI


97
00:05:15,006 --> 00:05:17,186
and we're going to link CallKit.


98
00:05:18,516 --> 00:05:21,296
So there are two primary classes
in CallKit that we care about.


99
00:05:22,046 --> 00:05:24,336
The first is the CXProvider.


100
00:05:24,636 --> 00:05:27,966
So the provider is the class
that Speakerbox will use


101
00:05:28,026 --> 00:05:29,746
to let the system about any


102
00:05:30,096 --> 00:05:32,256
out of band notifications
that have happened.


103
00:05:33,356 --> 00:05:36,276
The second class is
the CXCallController.


104
00:05:37,006 --> 00:05:39,996
The CXCallController is the
class that Speakerbox will use


105
00:05:39,996 --> 00:05:42,956
to let the system know
about local user actions.


106
00:05:44,336 --> 00:05:46,006
So let's take a deeper look


107
00:05:46,006 --> 00:05:48,546
at these two classes
starting with the provider.


108
00:05:48,886 --> 00:05:52,266
So the provider, like I
said earlier, is the class


109
00:05:52,266 --> 00:05:54,296
that we use to let the
system know about out


110
00:05:54,296 --> 00:05:55,606
of band notifications.


111
00:05:56,066 --> 00:05:58,636
That is these are
not user actions


112
00:05:59,196 --> 00:06:02,136
but actually external
events like, for example,


113
00:06:02,136 --> 00:06:04,296
an incoming call
coming to Speakerbox.


114
00:06:04,896 --> 00:06:07,256
Contrasts this with
the CXCallController.


115
00:06:07,976 --> 00:06:11,446
The CXCallController is the
class that Speakerbox will use


116
00:06:11,496 --> 00:06:14,146
to let the system
know about requests


117
00:06:14,146 --> 00:06:15,786
from within the app itself.


118
00:06:16,176 --> 00:06:18,546
That is these are
actually user actions


119
00:06:19,656 --> 00:06:22,766
and like internal events,
like a start call action.


120
00:06:24,036 --> 00:06:27,436
By using the CallController,
Speakerbox gets to interplay


121
00:06:27,436 --> 00:06:29,006
with other calls on the system.


122
00:06:30,266 --> 00:06:33,026
Say, for example, there's
already an active telephony call


123
00:06:33,026 --> 00:06:36,096
and the user wants to
start a Speakerbox call


124
00:06:36,216 --> 00:06:37,586
from Speakerbox's UI.


125
00:06:39,036 --> 00:06:42,286
By using the controller,
the system gets to know


126
00:06:42,286 --> 00:06:43,396
about the start call action


127
00:06:43,396 --> 00:06:46,506
and then the system can
tell the telephony provider


128
00:06:46,506 --> 00:06:50,506
to hold its call so as to let
the Speakerbox start its call.


129
00:06:51,996 --> 00:06:54,436
So let's take a look at
some examples of this.


130
00:06:54,976 --> 00:06:57,916
So the provider is
used to report


131
00:06:58,206 --> 00:06:59,936
out of band notifications.


132
00:07:00,256 --> 00:07:03,066
Like, for example, an incoming
call coming to Speakerbox


133
00:07:04,006 --> 00:07:06,256
or maybe an outgoing
call getting connected.


134
00:07:06,946 --> 00:07:09,936
Or that outgoing call
ending on the remote side.


135
00:07:11,136 --> 00:07:14,546
Whereas the controller is
used to request actions


136
00:07:14,796 --> 00:07:17,586
from the system like
the user wanting


137
00:07:17,586 --> 00:07:21,116
to start an outgoing call or the
user wanting to answer the call


138
00:07:21,116 --> 00:07:25,546
from Speakerbox or maybe ending
the call from within Speakerbox.


139
00:07:27,176 --> 00:07:29,566
So when the provider
wants to communicate


140
00:07:29,566 --> 00:07:33,656
to the system it uses
the CSXCallUpdate class.


141
00:07:34,276 --> 00:07:36,426
And when the system
wants to let Speakerbox


142
00:07:36,426 --> 00:07:40,566
about any user interactions,
it uses the CXAction classes


143
00:07:40,676 --> 00:07:41,826
to let Speakerbox know.


144
00:07:41,826 --> 00:07:45,156
And the controller communicates


145
00:07:45,156 --> 00:07:49,206
to the system user actions
bundled up into a CSTransaction


146
00:07:49,736 --> 00:07:51,876
to let the system to know
about these user actions.


147
00:07:52,116 --> 00:07:55,646
So that was a lot
of information.


148
00:07:55,906 --> 00:07:59,616
So let's take a look all of
that in an incoming call flow.


149
00:08:00,886 --> 00:08:03,526
So here we have Speakerbox
and Jane gets


150
00:08:03,526 --> 00:08:04,906
that incoming call from Mom.


151
00:08:05,356 --> 00:08:07,396
The incoming call
comes to Speakerbox


152
00:08:07,656 --> 00:08:10,466
and then Speakerbox
creates a CXCallUpdate


153
00:08:10,826 --> 00:08:13,036
and using the provider
sends that to the system.


154
00:08:13,666 --> 00:08:16,466
And then the system can then
publish that incoming call


155
00:08:16,466 --> 00:08:18,626
to all our services
including our UI.


156
00:08:19,956 --> 00:08:22,966
And if Jane wants to answer
the call from within our UI,


157
00:08:23,566 --> 00:08:25,766
the answer action
comes to our system.


158
00:08:26,286 --> 00:08:30,316
Our system can then tell
Speakerbox, we have the provider


159
00:08:30,616 --> 00:08:33,096
to the CXAnswerCallAction


160
00:08:33,946 --> 00:08:37,206
and then Speakerbox can answer
the call however it needs.


161
00:08:38,216 --> 00:08:40,456
And if Jane now wants
to end that call


162
00:08:40,456 --> 00:08:42,846
from within the app's own UI,


163
00:08:42,846 --> 00:08:45,186
the end action comes
to the controller.


164
00:08:45,526 --> 00:08:47,926
The controller bundles it
up into a CXTransaction


165
00:08:47,926 --> 00:08:51,866
and that comes to the system
and if everything looks okay,


166
00:08:52,256 --> 00:08:55,006
the system sends that back up to
the Speakerbox via the provider


167
00:08:55,006 --> 00:08:58,666
and then Speakerbox can
end the call as necessary.


168
00:09:00,136 --> 00:09:00,726
All right.


169
00:09:00,726 --> 00:09:02,916
Now let's take a look all of
that in a demo with Stewart.


170
00:09:03,516 --> 00:09:08,196
[ Applause ]


171
00:09:08,696 --> 00:09:09,406
>> Thanks, Sirisha.


172
00:09:09,906 --> 00:09:12,456
So now that you've heard
about the benefits of CallKit,


173
00:09:12,886 --> 00:09:14,606
I'd like to show
you how to adopt it


174
00:09:14,606 --> 00:09:17,806
in an existing VoIP
application, the Speakerbox app


175
00:09:17,916 --> 00:09:18,816
which Sirisha mentioned.


176
00:09:19,376 --> 00:09:22,536
I'll first show you how to adopt
it to handle an incoming call.


177
00:09:23,716 --> 00:09:26,746
So I'll first open up the
Speakerbox Xscript Project.


178
00:09:27,386 --> 00:09:32,116
Now before I dive into
adopting CallKit in this app,


179
00:09:32,516 --> 00:09:33,416
let me just show
you a little bit


180
00:09:33,416 --> 00:09:34,726
about how the app is structured


181
00:09:34,726 --> 00:09:35,786
so you have a frame
of reference.


182
00:09:36,576 --> 00:09:39,006
So we have two main classes
in the app right now.


183
00:09:39,776 --> 00:09:43,426
The SpeakerboxCallManager class
which maintains a list of calls


184
00:09:43,426 --> 00:09:45,576
in the app and has
certain operations


185
00:09:45,676 --> 00:09:48,766
such as starting a
call and ending a call.


186
00:09:50,076 --> 00:09:52,916
And our other primary
class is SpeakerboxCall.


187
00:09:53,516 --> 00:09:56,516
This is our model class which
represents a single call


188
00:09:56,516 --> 00:09:59,236
in the app and has
metadata about it as well


189
00:09:59,236 --> 00:10:01,436
as some call back blocks
so we can be notified


190
00:10:01,436 --> 00:10:04,386
about the life cycle events
of the call as it progresses.


191
00:10:05,816 --> 00:10:09,426
So like Sirisha mentioned,
the first we need to do


192
00:10:09,426 --> 00:10:11,066
when adopting CallKit is


193
00:10:11,066 --> 00:10:13,796
to create a CXProvider
and set its delegate.


194
00:10:14,456 --> 00:10:16,836
So I'll do that by
creating a new file


195
00:10:17,636 --> 00:10:19,226
called ProviderDelegate.


196
00:10:23,476 --> 00:10:26,136
So into this new file,
I'll bring in some code


197
00:10:26,136 --> 00:10:28,036
that we've already
written but let me walk you


198
00:10:28,036 --> 00:10:29,596
through what this is doing.


199
00:10:29,906 --> 00:10:32,816
So in our initializer
we pass in a reference


200
00:10:32,866 --> 00:10:34,636
to the SpeakerboxCallManager
class.


201
00:10:35,266 --> 00:10:38,496
This allows the ProviderDelegate
to access the app's list


202
00:10:38,496 --> 00:10:42,326
of calls and references them
by UUID which we'll show later.


203
00:10:43,616 --> 00:10:46,726
Next, we have -- we create
a CXProvider instance


204
00:10:47,266 --> 00:10:50,126
and we pass it -- something
called a provider configuration


205
00:10:50,126 --> 00:10:50,726
which we see here.


206
00:10:51,576 --> 00:10:53,766
The provider configuration
is something we'll go


207
00:10:53,766 --> 00:10:57,196
into more detail later in the
session but this allows our app


208
00:10:57,376 --> 00:10:59,246
to configure to the
system a few options


209
00:10:59,246 --> 00:11:01,576
about how it should behave.


210
00:11:01,736 --> 00:11:05,376
Now back in our initializer, we
set this class as the delegate


211
00:11:05,376 --> 00:11:08,576
of our provider and
then if necessary,


212
00:11:09,106 --> 00:11:11,336
we request authorization
to use the provider.


213
00:11:12,486 --> 00:11:15,706
So great. So now we have our
provider and our delegate set


214
00:11:15,706 --> 00:11:18,026
but we need to create
this in our app delegate.


215
00:11:18,866 --> 00:11:21,256
So I'll declare a property
for our provider delegate


216
00:11:21,256 --> 00:11:25,776
and I'll instantiate that in
the application did finishing


217
00:11:25,776 --> 00:11:26,986
launching with options method.


218
00:11:27,916 --> 00:11:31,306
Cool. So now we have
a provider in our app.


219
00:11:31,306 --> 00:11:34,866
How does the app respond
to an incoming call?


220
00:11:35,496 --> 00:11:37,826
So if I scroll down, we can see


221
00:11:37,826 --> 00:11:40,206
that the app currently
uses PushKit to learn


222
00:11:40,206 --> 00:11:42,976
about an incoming call
via push notification.


223
00:11:43,526 --> 00:11:45,306
And if we look at what
this code is doing,


224
00:11:46,096 --> 00:11:48,346
we can see that it looks
at the dictionaryPayload


225
00:11:48,346 --> 00:11:50,856
from our push notification
and gets some metadata


226
00:11:50,856 --> 00:11:54,576
about the incoming call
such as UUID and handle


227
00:11:54,576 --> 00:11:57,616
which is an identifier
representing who's calling.


228
00:11:57,796 --> 00:12:01,296
And then we call the
display incoming call method


229
00:12:01,876 --> 00:12:03,456
and we can see here that this is


230
00:12:03,456 --> 00:12:06,456
where the app hosts the
local notification for --


231
00:12:06,616 --> 00:12:08,556
to show the user
that incoming call.


232
00:12:09,536 --> 00:12:12,156
But when using CallKit
we no longer have to rely


233
00:12:12,156 --> 00:12:14,166
on a local notification
to show this.


234
00:12:14,686 --> 00:12:18,266
We can, instead, use the
system's full screen native


235
00:12:18,266 --> 00:12:21,206
incoming call UI and we want
to do instead because it's


236
00:12:21,206 --> 00:12:22,616
so much richer of an experience.


237
00:12:23,396 --> 00:12:26,586
So to do that, I'll go back
to the ProviderDelegate


238
00:12:26,586 --> 00:12:28,656
and I'm going to
create the helper method


239
00:12:29,516 --> 00:12:31,986
which will allow us to call
the API on our provider.


240
00:12:33,226 --> 00:12:37,406
I'll call that report
IncomingCall and in this method,


241
00:12:38,196 --> 00:12:40,866
I'll start by creating
a CXCallUpdate


242
00:12:41,336 --> 00:12:44,156
which contains metadata to
represent that incoming call.


243
00:12:45,196 --> 00:12:48,156
And then we'll call the
report NewIncomingCall method


244
00:12:48,156 --> 00:12:51,506
on our provider and this is the
step that notifies the system


245
00:12:51,506 --> 00:12:52,596
about that incoming call.


246
00:12:53,896 --> 00:12:57,756
Now, in the completion block,
we'll check if there is an error


247
00:12:57,756 --> 00:13:01,666
and if there wasn't, we create
a SpeakerboxCall instance


248
00:13:01,666 --> 00:13:05,586
and configure it and we add that
call to our app's list of calls.


249
00:13:06,606 --> 00:13:08,606
We'll go into more detail
later in the session


250
00:13:08,606 --> 00:13:11,346
about why there could be an
error here but suffice it


251
00:13:11,346 --> 00:13:13,196
to say, there's certain
conditions


252
00:13:13,196 --> 00:13:15,676
in which the device
will not be prepared


253
00:13:15,676 --> 00:13:16,766
to accept an incoming call.


254
00:13:18,126 --> 00:13:20,276
Okay. So now that we
have this helper method


255
00:13:20,276 --> 00:13:23,126
on our ProviderDelegate, I'll
go back to my app delegate


256
00:13:23,786 --> 00:13:26,566
and just replace this code that
posted the local notification


257
00:13:26,976 --> 00:13:28,606
with a call to our helper.


258
00:13:29,836 --> 00:13:32,636
So great. So now
we're using CallKit


259
00:13:33,016 --> 00:13:35,126
to report an incoming
call that we learned


260
00:13:35,126 --> 00:13:37,496
about from a push
notification to the system


261
00:13:37,586 --> 00:13:40,636
and the system is showing the
full screen Native incoming


262
00:13:40,636 --> 00:13:41,026
call UI.


263
00:13:41,026 --> 00:13:45,026
Well what happens when the
user presses that green button


264
00:13:45,106 --> 00:13:46,416
and answers the incoming call?


265
00:13:47,776 --> 00:13:48,576
When that happens,


266
00:13:48,576 --> 00:13:51,896
our ProviderDelegate will
receive another method


267
00:13:51,896 --> 00:13:53,046
that we need to implement.


268
00:13:53,936 --> 00:13:58,906
And that is the
ProviderPerformAnswerCallAction


269
00:13:58,906 --> 00:13:59,266
method.


270
00:13:59,856 --> 00:14:01,176
Let me walk through
what this is doing.


271
00:14:01,946 --> 00:14:04,136
So we start by getting
an instance


272
00:14:04,176 --> 00:14:07,406
of our Speakerbox call class
corresponding to the UUID


273
00:14:07,406 --> 00:14:08,576
of the call that
we're answering.


274
00:14:09,926 --> 00:14:13,026
Next, we call the answer
Speakerbox call method


275
00:14:13,026 --> 00:14:16,936
and this is some code that
was elsewhere app prior to now


276
00:14:17,256 --> 00:14:18,946
and this talks to our
network to tell it


277
00:14:18,946 --> 00:14:19,966
to actually answer that call.


278
00:14:20,496 --> 00:14:22,916
And now we do it here in our
ProviderDelegate call back.


279
00:14:24,106 --> 00:14:27,066
And last, we call
fulfill on our action.


280
00:14:28,076 --> 00:14:30,916
In CallKit, every action
must either be fulfilled


281
00:14:30,916 --> 00:14:33,656
if it was successful or
failed it there was an error


282
00:14:33,656 --> 00:14:34,496
in processing in that.


283
00:14:35,146 --> 00:14:37,436
And we can actually see
a few lines above here,


284
00:14:37,956 --> 00:14:41,096
if we were unable to find a
Speakerbox call for this UUID,


285
00:14:41,336 --> 00:14:42,996
we call the failed
method on our action


286
00:14:43,186 --> 00:14:44,436
to indicate that to the system.


287
00:14:44,836 --> 00:14:49,616
So this method handles
answering the call but what


288
00:14:49,616 --> 00:14:51,196
about when the user
wants to end the call?


289
00:14:52,136 --> 00:14:56,036
For that, we have a similar
delegate method called


290
00:14:56,476 --> 00:14:58,616
ProviderPerformEndCallAction.


291
00:14:59,186 --> 00:15:00,526
And this is very similar.


292
00:15:01,016 --> 00:15:03,776
It looks up a call
based on the UUID.


293
00:15:04,286 --> 00:15:07,646
It talks to our network using
endSpeakerBoxCall method.


294
00:15:08,626 --> 00:15:10,136
It signals that that
was successful


295
00:15:10,136 --> 00:15:11,616
to the system by
calling fulfill.


296
00:15:12,496 --> 00:15:15,016
And it removes the call from
the app's list of calls.


297
00:15:16,116 --> 00:15:18,566
So we're almost done
handling the incoming call


298
00:15:18,956 --> 00:15:20,566
but there's one other
thing we need to consider


299
00:15:20,776 --> 00:15:22,276
when handling that
incoming call.


300
00:15:22,586 --> 00:15:24,206
And that is our call's audio.


301
00:15:25,296 --> 00:15:28,776
So when using CallKit, you will
no longer activate your app's


302
00:15:28,776 --> 00:15:30,116
audio session directly.


303
00:15:30,726 --> 00:15:33,586
Instead you will only
configure the audio session


304
00:15:33,946 --> 00:15:36,136
and the system will actually
activate your app's audio


305
00:15:36,136 --> 00:15:38,206
session for you at
an elevated priority.


306
00:15:38,946 --> 00:15:42,206
So let me show you
how that works.


307
00:15:42,366 --> 00:15:45,676
Back in our
PerformAnswerCallAction method,


308
00:15:46,706 --> 00:15:49,296
I'll insert a call to
this function configure


309
00:15:49,296 --> 00:15:50,066
audio session.


310
00:15:50,996 --> 00:15:52,746
And this does like it says,


311
00:15:52,746 --> 00:15:54,526
it configures the
app's audio session


312
00:15:54,556 --> 00:15:56,706
but does not activate it.


313
00:15:56,936 --> 00:15:59,656
Instead our audio session will
be activated by the system


314
00:16:00,226 --> 00:16:01,326
and after that happens,


315
00:16:01,326 --> 00:16:03,876
we'll receive a delegate
call back called Provider


316
00:16:04,106 --> 00:16:05,426
didActivate audioSession.


317
00:16:05,836 --> 00:16:08,316
And this is the point where
we begin processing our


318
00:16:08,316 --> 00:16:08,986
call's audio.


319
00:16:09,466 --> 00:16:14,806
Now the last step is to stop
processing our call's audio


320
00:16:15,056 --> 00:16:18,336
in the PerformEndCallAction
method.


321
00:16:18,466 --> 00:16:20,136
Okay. So that's all
the code we need


322
00:16:20,136 --> 00:16:23,036
to handle an incoming
call using CallKit.


323
00:16:23,646 --> 00:16:27,996
And now I've got on my device
setup to mirror to the screen


324
00:16:28,456 --> 00:16:32,366
and let's build and run
the app on the device.


325
00:16:32,496 --> 00:16:33,866
So for the purpose of this demo,


326
00:16:33,926 --> 00:16:36,426
I'll just simulate an
incoming call using this button


327
00:16:36,426 --> 00:16:36,986
at the bottom.


328
00:16:37,936 --> 00:16:39,066
And now when I press this,


329
00:16:39,666 --> 00:16:43,046
we'll see our call using
Speakerbox presented using the


330
00:16:43,046 --> 00:16:44,956
full screen Native
incoming call UI.


331
00:16:44,956 --> 00:16:48,226
And I can just accept that call


332
00:16:48,696 --> 00:16:50,696
and our ProviderDelegate
receives the


333
00:16:50,696 --> 00:16:52,786
PerformAnswerCallAction method.


334
00:16:53,256 --> 00:16:56,866
It fulfills that and then
finally, when I'm done talking


335
00:16:56,866 --> 00:17:01,416
to Jane I can just end the call
and our app, ProviderDelegate,


336
00:17:01,416 --> 00:17:02,266
fulfills that as well.


337
00:17:03,056 --> 00:17:06,266
So that's a demo of handling
an incoming call using CallKit.


338
00:17:06,266 --> 00:17:08,665
And I'll now pass
it back to Sirisha.


339
00:17:09,185 --> 00:17:09,556
Thanks.


340
00:17:10,516 --> 00:17:15,606
[ Applause ]


341
00:17:16,106 --> 00:17:16,786
>> Thank you, Stewart.


342
00:17:17,606 --> 00:17:19,506
So let's take a look at
what Stewart just showed us.


343
00:17:20,215 --> 00:17:22,306
So first, we reported
incoming calls


344
00:17:22,306 --> 00:17:24,736
to the system via the report
new incoming call API.


345
00:17:24,826 --> 00:17:28,086
Then we handled an
answer call action


346
00:17:28,086 --> 00:17:30,896
by implementing the delegate
method perform action answer


347
00:17:31,136 --> 00:17:32,186
call action.


348
00:17:32,756 --> 00:17:35,236
Then once we've actually
answered the call, we fulfilled


349
00:17:35,236 --> 00:17:37,326
that action by calling
the fulfill API.


350
00:17:38,106 --> 00:17:40,706
So CallKit can do more
than just answer calls.


351
00:17:40,966 --> 00:17:43,536
Here a list of all our other
actions that we support.


352
00:17:44,006 --> 00:17:48,226
As you can see, there's holds,
group, play DTMF, and many more.


353
00:17:49,176 --> 00:17:52,716
So now let's spend a few seconds
talking about multiple calls.


354
00:17:53,346 --> 00:17:55,866
So say Speakerbox can
handle more than one call.


355
00:17:56,566 --> 00:17:57,996
Right here, in this example,


356
00:17:57,996 --> 00:18:00,556
there's already an active
Speakerbox call going on


357
00:18:00,686 --> 00:18:02,706
and then there's an
incoming call waiting call.


358
00:18:03,466 --> 00:18:05,616
Now if the user wants
to end the active call


359
00:18:05,616 --> 00:18:08,876
and the answer incoming waiting
call from within the Native UI,


360
00:18:09,506 --> 00:18:12,376
the system will send
Speakerbox a CXTransaction.


361
00:18:12,536 --> 00:18:17,136
A CXTransaction is nothing
more than just a list


362
00:18:17,136 --> 00:18:18,596
of one or more actions.


363
00:18:18,596 --> 00:18:22,236
In this case, it's a list
of end and answer actions.


364
00:18:22,896 --> 00:18:25,946
And once Speakerbox has handled
each of these and performed each


365
00:18:25,946 --> 00:18:28,076
of these actions, it
needs to fulfill each


366
00:18:28,076 --> 00:18:30,496
of them individually so
that the system knows


367
00:18:30,776 --> 00:18:31,686
to transition the UI.


368
00:18:31,686 --> 00:18:32,006
All right.


369
00:18:33,416 --> 00:18:36,396
Now I'll hand this
off to Nick to take us


370
00:18:36,396 --> 00:18:37,536
through an outgoing call flow.


371
00:18:38,516 --> 00:18:41,026
[ Applause ]


372
00:18:41,526 --> 00:18:42,206
>> Thanks, Sirisha.


373
00:18:43,276 --> 00:18:44,686
So let's check back
in with Jane.


374
00:18:45,436 --> 00:18:46,796
She talked to her mom yesterday


375
00:18:46,946 --> 00:18:49,446
but today she's feeling a little
homesick and would like to check


376
00:18:49,446 --> 00:18:50,226
in with the home front.


377
00:18:51,096 --> 00:18:52,976
So let's see what it takes
to make an outgoing call.


378
00:18:57,206 --> 00:19:00,016
So the first thing that happens
when Jane goes into recents


379
00:19:00,016 --> 00:19:03,786
and taps to call her mom back is
our app is going to get launched


380
00:19:03,786 --> 00:19:05,486
with a start call intent.


381
00:19:06,616 --> 00:19:09,756
Now some of you may have already
seen the introducing SiriKit


382
00:19:09,756 --> 00:19:14,026
session where we introduced
intents but if you'd


383
00:19:14,026 --> 00:19:15,166
like to find out
more information,


384
00:19:15,166 --> 00:19:16,696
you can always watch
the video online.


385
00:19:17,786 --> 00:19:20,066
In a nutshell though,
an intent is an object


386
00:19:20,096 --> 00:19:22,166
that represents a
desired user action,


387
00:19:22,636 --> 00:19:24,426
is wrapped up in
an NSUser activity,


388
00:19:24,426 --> 00:19:27,306
and then passed back to our app.


389
00:19:27,486 --> 00:19:30,386
So our app has received
the start call intent


390
00:19:30,616 --> 00:19:33,926
and now we've constructed
a start call action based


391
00:19:33,926 --> 00:19:35,496
on the information
on that intent.


392
00:19:36,676 --> 00:19:37,726
We'll take that action


393
00:19:38,296 --> 00:19:40,616
and request it via
the CallController.


394
00:19:41,836 --> 00:19:44,086
The CallController will
then pass that action


395
00:19:44,156 --> 00:19:47,166
through to the system and if
it's accepted, it will come back


396
00:19:47,246 --> 00:19:49,026
to our app via the
ProviderDelegate.


397
00:19:50,296 --> 00:19:52,266
Then finally our app
can take that action


398
00:19:52,916 --> 00:19:55,716
and use the necessary
commands on our network


399
00:19:55,986 --> 00:19:56,986
to make that outgoing call.


400
00:19:57,606 --> 00:19:59,626
So now let's take a
look at the life cycle


401
00:19:59,626 --> 00:20:00,976
of the outgoing call
from this point.


402
00:20:02,036 --> 00:20:04,326
So we've just begun performing
the start call action.


403
00:20:05,076 --> 00:20:07,906
So the call is in
a starting state.


404
00:20:08,066 --> 00:20:10,426
From here, we'll finish
executing the action


405
00:20:10,806 --> 00:20:13,776
and fulfill the action to move
the call to a started state.


406
00:20:15,206 --> 00:20:17,466
Then when the remote
side answers the call,


407
00:20:18,446 --> 00:20:21,846
we'll notify the provider that
the call has started connecting.


408
00:20:23,226 --> 00:20:25,706
And then finally,
we'll tell the provider


409
00:20:25,816 --> 00:20:28,616
that the call has connected
to inform the system


410
00:20:28,616 --> 00:20:30,706
that the two parties can
begin talking to each other.


411
00:20:31,216 --> 00:20:34,226
So now I'd like to
bring Stewart back us --


412
00:20:34,286 --> 00:20:36,206
back up to give us another demo.


413
00:20:37,516 --> 00:20:41,066
[ Applause ]


414
00:20:41,566 --> 00:20:42,016
>> Thanks, Nick.


415
00:20:42,526 --> 00:20:44,616
So now I'd like to give
you part two of our demo


416
00:20:44,616 --> 00:20:46,566
of adopting CallKit
and Speakerbox.


417
00:20:46,996 --> 00:20:49,906
This time how to use it to
handle an outgoing call.


418
00:20:50,896 --> 00:20:54,236
I'll open up the Speakerbox
Xscript project again.


419
00:20:55,196 --> 00:20:57,446
Now back in our app
delegate class,


420
00:20:58,056 --> 00:21:01,556
we can see that Speakerbox
already handles being launched


421
00:21:01,656 --> 00:21:03,866
with a URL to start a new call.


422
00:21:04,696 --> 00:21:06,636
But when using CallKit,


423
00:21:06,936 --> 00:21:09,996
the process of dialing an
outgoing call is similar


424
00:21:10,546 --> 00:21:14,266
but when the user starts a call
from places like the phone apps,


425
00:21:14,266 --> 00:21:17,926
recents tab, or a
contact card or from Siri,


426
00:21:17,926 --> 00:21:21,056
the app will be launched with
an intent and that will be given


427
00:21:21,056 --> 00:21:23,186
to us via an NSUser activity.


428
00:21:24,296 --> 00:21:27,586
So the first step in
using CallKit here is


429
00:21:27,586 --> 00:21:31,736
to implement the application
continue user activity method.


430
00:21:32,876 --> 00:21:34,416
And taking a look at
what this is doing,


431
00:21:35,006 --> 00:21:39,166
we look at our NSUser
activity and we get the value


432
00:21:39,166 --> 00:21:40,836
of the startCallHandle property.


433
00:21:41,526 --> 00:21:43,686
This is some code we've
already written to look


434
00:21:43,686 --> 00:21:48,326
at the NSUser activity, get the
intent, and return the handle


435
00:21:48,326 --> 00:21:49,376
which is a string


436
00:21:49,376 --> 00:21:52,506
which represents the
person we want to call.


437
00:21:52,506 --> 00:21:53,556
Now once we have our handle,


438
00:21:54,346 --> 00:21:57,446
the process of starting
a new call is identical


439
00:21:57,446 --> 00:21:58,706
to the URL handler above.


440
00:21:59,026 --> 00:22:02,016
We just call the start call
method on our call manager.


441
00:22:03,036 --> 00:22:06,666
So now let's look at what
this method is doing.


442
00:22:06,846 --> 00:22:09,336
So we can see in the
SpeakerboxCallManager class


443
00:22:09,836 --> 00:22:12,336
that we start a call by
creating a new instance


444
00:22:12,336 --> 00:22:14,116
of our model class,
Speakerbox call,


445
00:22:15,026 --> 00:22:18,026
and then we call the
startSpeakerBoxCall method


446
00:22:18,406 --> 00:22:20,786
which talks to our network
and actually starts that call.


447
00:22:21,596 --> 00:22:25,066
And finally we add this
call to our list of calls.


448
00:22:26,166 --> 00:22:28,886
But now this is not yet using
CallKit to notify the system


449
00:22:28,886 --> 00:22:30,666
about our intention
to start a new call.


450
00:22:30,726 --> 00:22:31,806
And we need to do that.


451
00:22:32,316 --> 00:22:34,916
So I'm going to remove this
code for now and I'm going


452
00:22:34,916 --> 00:22:36,526
to add parts of it back later.


453
00:22:38,216 --> 00:22:41,666
The first step of adopting
CallKit in this class is


454
00:22:41,666 --> 00:22:42,536
to import the framework.


455
00:22:42,976 --> 00:22:49,016
And then I need that second
class which Sirisha mentioned,


456
00:22:49,096 --> 00:22:50,636
the CXCallController class.


457
00:22:51,106 --> 00:22:55,396
And now that I have that,
in our start call method,


458
00:22:56,286 --> 00:23:00,076
I need to create a
startCallAction and configure it


459
00:23:00,076 --> 00:23:01,866
with the handle that
we want to dial.


460
00:23:03,156 --> 00:23:06,886
Then I create a CXTransaction
containing that action


461
00:23:07,976 --> 00:23:11,056
and finally I call
request transaction


462
00:23:11,056 --> 00:23:13,246
on our callController to
request that from the system.


463
00:23:13,796 --> 00:23:17,376
Now just to reiterate a point
that Sirisha mentioned earlier,


464
00:23:18,006 --> 00:23:21,106
you maybe wondering why we need
to request this transaction


465
00:23:21,106 --> 00:23:22,456
from the system when it seems


466
00:23:22,456 --> 00:23:24,496
like everything that's
happening here is happening


467
00:23:24,496 --> 00:23:25,216
within our own app.


468
00:23:26,056 --> 00:23:29,146
And the reason for that
is that when you attempt


469
00:23:29,146 --> 00:23:30,266
to begin an outgoing call,


470
00:23:30,486 --> 00:23:32,986
there may already be a call
elsewhere on the system.


471
00:23:33,166 --> 00:23:36,586
For instance, if the user is
in a phone or a FaceTime call,


472
00:23:36,966 --> 00:23:38,476
or even a call from
another VoIP app.


473
00:23:39,126 --> 00:23:41,516
If that happens, the
system needs to hold


474
00:23:41,516 --> 00:23:43,476
that call before
your call can begin.


475
00:23:43,996 --> 00:23:46,496
So that's why we need to
request action from the system


476
00:23:46,766 --> 00:23:48,656
to let it know about
those intentions.


477
00:23:51,016 --> 00:23:53,826
So now, once the system receives


478
00:23:53,826 --> 00:23:57,096
and improves our start call
action, it's going to send


479
00:23:57,096 --> 00:23:59,976
that back to our app via
our ProviderDelegate.


480
00:24:00,756 --> 00:24:02,346
So I need to implement
another method


481
00:24:02,346 --> 00:24:03,766
on our ProviderDelegate class.


482
00:24:04,706 --> 00:24:08,716
This time it's the provider
perform StartCallAction method.


483
00:24:09,396 --> 00:24:10,496
And let's fill this
out together.


484
00:24:11,926 --> 00:24:14,466
So we start same
as we did before


485
00:24:14,466 --> 00:24:17,156
of creating a Speakerbox
call model instance


486
00:24:17,426 --> 00:24:18,776
and configuring it
with the handle


487
00:24:18,776 --> 00:24:19,696
which we're going to dial.


488
00:24:21,026 --> 00:24:24,946
Then we configure our audio
session just like we did


489
00:24:24,946 --> 00:24:28,216
when answering a call
previously and next,


490
00:24:28,326 --> 00:24:30,886
we need to configure a few
properties on our call.


491
00:24:31,236 --> 00:24:32,796
And there's a lot
going on in this one


492
00:24:32,916 --> 00:24:35,136
so let's walk through it.


493
00:24:35,176 --> 00:24:37,836
We set two call back
blocks on our call.


494
00:24:38,626 --> 00:24:40,966
The
hasStartedConnectingDidChange


495
00:24:41,406 --> 00:24:43,436
and hasConnctedDidChange.


496
00:24:44,256 --> 00:24:47,056
These are asynchronous call back
blocks which will be invoked


497
00:24:47,406 --> 00:24:50,316
when the call progresses
to connected and finally


498
00:24:50,316 --> 00:24:52,106
to connecting and
then to connected.


499
00:24:52,416 --> 00:24:54,616
And in these call back blocks,


500
00:24:54,956 --> 00:24:57,466
we report to the system
the progress of the call.


501
00:24:57,776 --> 00:24:59,586
And it allows the system
to be aware of that


502
00:24:59,586 --> 00:25:02,166
and reflect it in the UI.


503
00:25:02,246 --> 00:25:06,306
So with that set, we can now
call the startSpeakerboxCall


504
00:25:06,306 --> 00:25:07,486
method on our call.


505
00:25:08,076 --> 00:25:09,486
And this again, talks
to our network


506
00:25:09,696 --> 00:25:10,776
and it starts it outgoing.


507
00:25:11,796 --> 00:25:15,206
We fulfill the action to
indicate success to the system


508
00:25:16,006 --> 00:25:18,056
and add the call to
the callManager's list.


509
00:25:18,556 --> 00:25:24,596
Okay. So this handles starting
the outgoing call but what


510
00:25:24,596 --> 00:25:27,046
about when the user wants to
end that call and this time


511
00:25:27,046 --> 00:25:29,216
from within our own --
or the app's own UI?


512
00:25:30,246 --> 00:25:32,216
So for that, we need to go back


513
00:25:32,216 --> 00:25:34,096
to our Speakerbox
callManager class


514
00:25:34,096 --> 00:25:35,126
and look at the end method.


515
00:25:36,086 --> 00:25:37,716
And we can see here that just


516
00:25:37,716 --> 00:25:39,536
like the start call
method before,


517
00:25:39,956 --> 00:25:41,226
this is not yet using CallKit.


518
00:25:41,946 --> 00:25:43,716
So I need to replace
it with code that does.


519
00:25:44,916 --> 00:25:48,676
I'll just drag this in and we
can see that this creates an end


520
00:25:48,676 --> 00:25:51,556
to call action and it
wraps it in a transaction


521
00:25:52,146 --> 00:25:53,796
and then requests
that transaction


522
00:25:53,796 --> 00:25:54,676
from the callController.


523
00:25:55,586 --> 00:25:58,566
But this time, we don't need
to do anything further back


524
00:25:58,566 --> 00:26:01,136
in our ProviderDelegate
because as you can see,


525
00:26:01,506 --> 00:26:03,706
we already implemented
this earlier in the demo.


526
00:26:04,706 --> 00:26:07,366
So that's all the code that we
need to handle an outgoing call


527
00:26:07,626 --> 00:26:09,946
and I'll now build and
run the app on the device.


528
00:26:09,946 --> 00:26:10,976
And give you another demo.


529
00:26:17,176 --> 00:26:20,106
So I've built and updated
the app on the device


530
00:26:20,386 --> 00:26:22,296
but to show you an
outgoing call, I'd actually


531
00:26:22,296 --> 00:26:26,266
like to go back to the phone
app under a contact card.


532
00:26:26,686 --> 00:26:30,116
And we can now see the
Speakerbox app listed right


533
00:26:30,116 --> 00:26:34,076
on the contact card and I just
can tap this to launch our app.


534
00:26:34,076 --> 00:26:36,636
And when we do, our
app will be launched.


535
00:26:36,866 --> 00:26:38,506
It will receive that intent


536
00:26:39,066 --> 00:26:42,996
and it will start a call
using the callController.


537
00:26:43,346 --> 00:26:46,176
It will request a transaction
which will be approved


538
00:26:46,176 --> 00:26:49,566
by the system and fed
to our ProviderDelegate


539
00:26:49,566 --> 00:26:51,216
which will then fulfill
that action.


540
00:26:51,726 --> 00:26:52,496
And here we go.


541
00:26:52,496 --> 00:26:53,646
We just saw that happen.


542
00:26:54,046 --> 00:26:57,316
The call is now active.


543
00:26:57,506 --> 00:27:00,656
So now once the call is
active, if I home out,


544
00:27:01,036 --> 00:27:01,966
we can see something new.


545
00:27:02,266 --> 00:27:06,236
For the first time, the green
double height status bar is


546
00:27:06,236 --> 00:27:08,466
shown for our app.


547
00:27:08,906 --> 00:27:11,306
Previously this was
reserved for the native phone


548
00:27:11,306 --> 00:27:13,836
and FaceTime calls
only but if I tap this,


549
00:27:14,236 --> 00:27:15,976
we'll be sent right
back to Speakerbox.


550
00:27:16,516 --> 00:27:19,796
[ Applause ]


551
00:27:20,296 --> 00:27:20,576
Thank you.


552
00:27:21,806 --> 00:27:24,766
Then when I'm done
talking, I can end the call


553
00:27:24,766 --> 00:27:27,896
and this will request an end
call action from the system


554
00:27:28,006 --> 00:27:29,376
which our ProviderDelegate
will fulfill.


555
00:27:30,516 --> 00:27:34,416
So that's all demo for handling
an outgoing call using CallKit.


556
00:27:34,416 --> 00:27:36,866
I'll pass it back to
Nick to recap and go


557
00:27:36,866 --> 00:27:38,346
over a few other API details.


558
00:27:38,666 --> 00:27:38,936
Thanks.


559
00:27:39,516 --> 00:27:43,500
[ Applause ]


560
00:27:46,466 --> 00:27:47,036
>> Thanks, Stewart.


561
00:27:47,836 --> 00:27:50,366
So first let's take a quick
look at what we just saw.


562
00:27:52,936 --> 00:27:56,106
The first thing that happened is
Speakerbox received a start call


563
00:27:56,106 --> 00:27:59,346
intent, created a start call
action based on that intent,


564
00:27:59,906 --> 00:28:01,646
and then requested
that start call action.


565
00:28:02,886 --> 00:28:05,116
Then the start call
action was received via the


566
00:28:05,116 --> 00:28:08,106
ProviderDelegate,
executed, and then fulfilled.


567
00:28:08,146 --> 00:28:12,556
And then finally, Speakerbox
reported that the call moved


568
00:28:12,556 --> 00:28:15,156
to connecting and then
finally connected.


569
00:28:15,676 --> 00:28:22,866
So, now that we've seen a few
basic flows let's dive into some


570
00:28:22,866 --> 00:28:24,576
of the details of the
API to really round


571
00:28:24,576 --> 00:28:25,636
out our usage of CallKit.


572
00:28:25,636 --> 00:28:30,746
And in particular, we'll take a
look the provider authorization


573
00:28:30,746 --> 00:28:33,366
and configuration to
help customize our app


574
00:28:33,366 --> 00:28:33,976
in the native UI.


575
00:28:34,976 --> 00:28:37,326
We'll take a look at how
to handle action errors


576
00:28:37,646 --> 00:28:40,516
and system restrictions and
then finally, we'll take a look


577
00:28:40,516 --> 00:28:47,206
at how CallKit plays a role in
our call's audio on our app.


578
00:28:47,456 --> 00:28:51,866
So as with other APIs like
contacts and core location,


579
00:28:52,576 --> 00:28:54,736
CallKit requires permission
from the user to use.


580
00:28:55,386 --> 00:28:57,316
And because of this,
one of the first things


581
00:28:57,316 --> 00:29:00,636
that your app should do when it
launches is check its current


582
00:29:00,636 --> 00:29:01,646
authorization status.


583
00:29:02,556 --> 00:29:04,936
This may have changed since the
last time your app was launched.


584
00:29:05,206 --> 00:29:06,756
If the user went into settings


585
00:29:06,756 --> 00:29:08,306
and maybe enabled or
disabled your app.


586
00:29:09,696 --> 00:29:11,486
Then from here, if you discover


587
00:29:11,486 --> 00:29:13,676
that your app's authorization
status has not


588
00:29:13,676 --> 00:29:16,836
yet been determined, you
should request authorization


589
00:29:16,836 --> 00:29:17,396
for your app.


590
00:29:18,266 --> 00:29:21,166
And what this does is it tells
the system to display an alert


591
00:29:21,166 --> 00:29:23,116
to the user to request
permission.


592
00:29:23,636 --> 00:29:26,916
And this is done on behalf of
your app and because it's done


593
00:29:26,916 --> 00:29:28,976
on behalf of your app,
you should always be sure


594
00:29:29,136 --> 00:29:35,386
to include an informative usage
string in your app's info.plist.


595
00:29:35,526 --> 00:29:37,436
And lastly while
your app is launched,


596
00:29:37,996 --> 00:29:39,816
you should always be sure
to observe and listen


597
00:29:40,256 --> 00:29:42,796
to any authorization status
changes that may happen


598
00:29:43,266 --> 00:29:46,796
so that you can always show the
most up-to-date UI to your user.


599
00:29:49,616 --> 00:29:52,086
So now let's talk about
the provider configuration.


600
00:29:52,696 --> 00:29:55,696
So the provider configuration
is a way for your app


601
00:29:55,806 --> 00:29:59,126
to customize its in
call experience directly


602
00:29:59,126 --> 00:30:00,376
in the Native and Call UI.


603
00:30:00,376 --> 00:30:06,366
Some of the things that can
be customized are your app's


604
00:30:06,366 --> 00:30:08,496
localized name to
display for your calls.


605
00:30:09,746 --> 00:30:11,516
This also includes
certain capabilities


606
00:30:11,516 --> 00:30:14,256
such as whether your app
supports video calling.


607
00:30:14,976 --> 00:30:16,696
And this even includes things


608
00:30:16,696 --> 00:30:21,076
like specifying your own masked
image icon to show directly


609
00:30:21,076 --> 00:30:22,606
in one of the buttons
of the end call UI.


610
00:30:23,546 --> 00:30:26,986
And when tapped, this will take
the user directly to your app.


611
00:30:28,356 --> 00:30:30,036
Just a note though
that this support


612
00:30:30,036 --> 00:30:31,856
for this app icon
will be available


613
00:30:31,856 --> 00:30:32,756
in a future seed [phonetic].


614
00:30:33,276 --> 00:30:39,346
So we've taken a look at what
happens when things go smoothly


615
00:30:39,346 --> 00:30:41,146
when executing actions
but what happens


616
00:30:41,146 --> 00:30:42,456
when we run into a problem?


617
00:30:43,356 --> 00:30:45,666
Well take a look at the
outgoing example from before.


618
00:30:46,656 --> 00:30:50,106
We've just started performing
the start call action.


619
00:30:50,906 --> 00:30:52,166
Let's say that in the process


620
00:30:52,166 --> 00:30:54,276
of performing that,
we run into an error.


621
00:30:54,986 --> 00:30:56,596
Maybe we don't have
good connectivity


622
00:30:56,596 --> 00:30:57,666
with our network server,


623
00:30:57,666 --> 00:30:59,376
so we can't actually
make the outgoing call.


624
00:31:00,796 --> 00:31:04,556
Well in this case, we should
fail the start call action.


625
00:31:05,306 --> 00:31:09,416
And the reason this is important
is because it informs a system


626
00:31:09,416 --> 00:31:10,476
that something went wrong.


627
00:31:11,056 --> 00:31:12,866
And then the system
can, in turn,


628
00:31:13,686 --> 00:31:16,646
inform the user via things
like call failure UI.


629
00:31:17,436 --> 00:31:22,646
And along with these action
errors are action time outs.


630
00:31:23,986 --> 00:31:27,156
So each action on the
system has a particular time


631
00:31:27,156 --> 00:31:28,176
out associated with it.


632
00:31:28,896 --> 00:31:31,536
And these time outs are
important because they assure


633
00:31:31,536 --> 00:31:35,236
that actions initiated
by the user are performed


634
00:31:35,626 --> 00:31:38,376
in a performance and
responsive manner.


635
00:31:39,046 --> 00:31:42,366
So because of this, your
app should always be sure


636
00:31:42,366 --> 00:31:45,406
to perform those actions
in a timely manner.


637
00:31:46,786 --> 00:31:49,326
However, if an action
does time out,


638
00:31:50,116 --> 00:31:53,656
your app will be notified via
an appropriate provider delegate


639
00:31:53,656 --> 00:31:55,976
method at which point it
can react appropriately.


640
00:32:00,446 --> 00:32:03,056
So based on the current
state of the device,


641
00:32:03,386 --> 00:32:05,846
certain system restrictions
may be in place.


642
00:32:06,856 --> 00:32:09,306
And we'll take a look at an
incoming call as an example.


643
00:32:10,656 --> 00:32:13,116
One of the reasons
why your calls --


644
00:32:13,116 --> 00:32:17,766
your app's incoming call
might be denied is, perhaps,


645
00:32:17,766 --> 00:32:21,586
the user has disabled your app
and it's no longer authorized.


646
00:32:22,696 --> 00:32:25,576
Or maybe the remote caller
for the incoming call is


647
00:32:25,576 --> 00:32:26,826
in the user's blocked list.


648
00:32:27,636 --> 00:32:30,936
Or perhaps the user has enabled
do not disturb and doesn't want


649
00:32:30,936 --> 00:32:34,806
to see any incoming calls
at the current time.


650
00:32:35,016 --> 00:32:36,386
Well for all of these cases,


651
00:32:37,106 --> 00:32:40,516
you app will be notified via
completion handlers on the API.


652
00:32:42,076 --> 00:32:42,696
For example,


653
00:32:42,696 --> 00:32:45,926
the reportNewIncomingCall
API passes back an error


654
00:32:45,926 --> 00:32:47,046
in its completion handler.


655
00:32:47,406 --> 00:32:51,616
And as you can see here,
our app checks the error


656
00:32:51,616 --> 00:32:52,266
that's returned.


657
00:32:53,076 --> 00:32:55,876
Sees that the error code is
filtered by do not disturb


658
00:32:55,876 --> 00:32:57,916
and then handles
that appropriately.


659
00:32:59,246 --> 00:33:02,126
So now let's take a look
at audio with CallKit.


660
00:33:03,526 --> 00:33:06,546
So with CallKit your app
gets a lot of great benefits


661
00:33:06,546 --> 00:33:07,886
with its call's audio.


662
00:33:08,306 --> 00:33:10,676
And one of the biggest
benefits it gets is


663
00:33:10,676 --> 00:33:13,826
that its audio session will
be at a boosted priority


664
00:33:13,826 --> 00:33:17,386
on the system on par with
phone and FaceTime calls.


665
00:33:18,066 --> 00:33:19,956
And what this means
is other apps


666
00:33:19,956 --> 00:33:21,596
on the system will not be able


667
00:33:21,596 --> 00:33:23,406
to interrupt your
app's call audio.


668
00:33:23,946 --> 00:33:27,886
And in addition to
this, CallKit is aware


669
00:33:27,886 --> 00:33:30,006
of certain audio routing
hints on this system


670
00:33:30,756 --> 00:33:34,666
which means it can decide where
to route audio based on things


671
00:33:34,666 --> 00:33:37,846
like the user's current
accessibility settings


672
00:33:37,906 --> 00:33:40,296
or currently connected
Bluetooth devices.


673
00:33:40,766 --> 00:33:46,576
Let's take a look at an incoming
call flow as an example.


674
00:33:47,356 --> 00:33:48,616
We know that, at some point,


675
00:33:48,616 --> 00:33:51,946
during an incoming call our
app will receive an answer call


676
00:33:51,946 --> 00:33:54,476
action and then fulfill
that answer call action.


677
00:33:55,766 --> 00:33:58,556
Well after receiving the answer
call action is a great time


678
00:33:58,686 --> 00:34:00,816
to configure our audio session.


679
00:34:01,346 --> 00:34:02,206
And that's because we know


680
00:34:02,206 --> 00:34:03,906
that the call will
soon move to connected.


681
00:34:05,076 --> 00:34:07,566
Then when we fulfill
the answer call action,


682
00:34:08,676 --> 00:34:11,426
the system will automatically
start an audio session


683
00:34:11,775 --> 00:34:14,126
for our app at a
boosted priority


684
00:34:14,505 --> 00:34:15,815
and then let our app know


685
00:34:15,815 --> 00:34:19,216
that this has happened via
the did activate audio session


686
00:34:19,216 --> 00:34:20,406
provider delegate call back.


687
00:34:20,565 --> 00:34:24,315
And this is an indication
to our app that it is time


688
00:34:24,315 --> 00:34:25,966
to start media for the call.


689
00:34:25,966 --> 00:34:29,335
So that was just a quick look at
some of the details of the API


690
00:34:30,005 --> 00:34:32,556
to help us complete our
adoption of CallKit.


691
00:34:37,346 --> 00:34:40,235
So now we invite
you to adopt CallKit


692
00:34:40,466 --> 00:34:43,496
in your existing VoIP apps
or to build a new VoIP app


693
00:34:43,496 --> 00:34:45,176
from the ground up
using CallKit.


694
00:34:46,416 --> 00:34:48,755
With CallKit you'll
integrate directly


695
00:34:48,755 --> 00:34:50,835
into the system's
calling infrastructure


696
00:34:51,746 --> 00:34:54,916
and once you've adopted CallKit
you'll maintain feature parity


697
00:34:55,186 --> 00:34:56,815
with native calling services.


698
00:34:58,026 --> 00:34:58,946
But most importantly,


699
00:34:59,626 --> 00:35:03,056
with CallKit your app will
increase its visibility


700
00:35:03,106 --> 00:35:06,066
across the system whether
it's with full screen,


701
00:35:06,066 --> 00:35:10,046
incoming alerts on the locked
screen, appearances in recents,


702
00:35:10,386 --> 00:35:14,506
favorites, and contacts,
or integration with Siri,


703
00:35:14,876 --> 00:35:16,806
CarPlay, and Bluetooth.


704
00:35:19,006 --> 00:35:21,746
For more information you can
check out our session's webpage


705
00:35:21,746 --> 00:35:23,036
at developer.apple.com


706
00:35:23,526 --> 00:35:25,956
where we'll also have the
Speakerbox sample code


707
00:35:25,956 --> 00:35:27,846
that we've been referencing
throughout this presentation.


708
00:35:28,356 --> 00:35:31,786
We've got a lot of great
related sessions for you.


709
00:35:32,426 --> 00:35:35,586
So be sure to check out more
information about Siri, intents,


710
00:35:35,936 --> 00:35:37,086
networking, and audio.


711
00:35:38,476 --> 00:35:40,136
Thank you all so
much for joining us


712
00:35:40,136 --> 00:35:40,976
and we'll see you in the labs.


713
00:35:41,516 --> 00:35:44,500
[ Applause ]

