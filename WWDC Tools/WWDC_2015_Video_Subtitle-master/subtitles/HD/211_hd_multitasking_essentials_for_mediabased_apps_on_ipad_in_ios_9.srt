1
00:00:25,516 --> 00:00:30,566
[Applause]


2
00:00:31,066 --> 00:00:32,456
>> STEFAN HAFENEGER:
Welcome to session 211,


3
00:00:32,665 --> 00:00:33,826
Multitasking Essentials


4
00:00:33,826 --> 00:00:36,036
for Media-Based Apps
on iPad and iOS 9.


5
00:00:37,056 --> 00:00:40,076
My name is Stefan Hafeneger and
today Jonathan and I will talk


6
00:00:40,076 --> 00:00:41,516
about adopting Picture
in Picture


7
00:00:41,836 --> 00:00:43,356
and mastering shared resources.


8
00:00:43,916 --> 00:00:47,616
If you have already or plan
to integrate a media-based app


9
00:00:47,616 --> 00:00:50,316
on iPad and iOS 9 this is
the right session for you.


10
00:00:50,946 --> 00:00:54,176
This is the second in a
series of three sessions


11
00:00:54,176 --> 00:00:56,506
about multitasking
on iPad this year.


12
00:00:58,396 --> 00:00:59,996
By now you should
be familiar with all


13
00:00:59,996 --> 00:01:02,796
of the iPad multitasking
features we have introduced


14
00:01:02,796 --> 00:01:03,156
this week.


15
00:01:04,166 --> 00:01:06,026
I want to remind you
about the concept


16
00:01:06,026 --> 00:01:07,886
about primary versus
secondary app.


17
00:01:08,136 --> 00:01:12,166
The primary app is
always the one


18
00:01:12,166 --> 00:01:15,366
on the left unless the device
is set up right to left


19
00:01:15,686 --> 00:01:16,696
which means it's the opposite.


20
00:01:17,376 --> 00:01:20,326
In the first session we
showed you how to get started


21
00:01:20,326 --> 00:01:22,376
with multitasking
on iPad in iOS 9.


22
00:01:23,096 --> 00:01:27,206
In this session, I will show you
how to adopt Picture in Picture.


23
00:01:27,876 --> 00:01:32,616
When you are playing
video on an application,


24
00:01:32,616 --> 00:01:36,046
in iOS 8 when you are
playing video, and you switch


25
00:01:36,046 --> 00:01:38,056
to an application the
video stops playing.


26
00:01:38,716 --> 00:01:43,376
With Picture in Picture in iOS 9
the video automatically animates


27
00:01:43,376 --> 00:01:45,876
into a floating window
allowing you to use other apps


28
00:01:45,876 --> 00:01:47,966
on the iPad while the
video keeps playing.


29
00:01:48,696 --> 00:01:53,056
I'm going to say Picture in
Picture a lot in this section


30
00:01:53,326 --> 00:01:56,106
so from now on I will
refer to is as PiP.


31
00:01:58,336 --> 00:02:02,806
PiP is supported on all of
our latest iPads, iPad Air 2,


32
00:02:02,946 --> 00:02:11,156
iPad Air, iPad mini 2 and 3.


33
00:02:11,376 --> 00:02:13,416
Now, you might be wondering
should my app adopt Picture


34
00:02:13,416 --> 00:02:13,836
in Picture.


35
00:02:14,556 --> 00:02:19,866
If your application provides
an immersive video playing


36
00:02:19,866 --> 00:02:21,266
experience, then absolutely.


37
00:02:21,956 --> 00:02:26,876
If your application provides
a kid's viewing experience


38
00:02:26,876 --> 00:02:28,486
like a game, then probably not.


39
00:02:28,486 --> 00:02:32,316
If you think your viewer was


40
00:02:32,316 --> 00:02:33,886
like to keep videos
playing while playing


41
00:02:33,886 --> 00:02:35,176
with other applications.


42
00:02:35,366 --> 00:02:43,226
Let's take a look at the
video player APIs in iOS 8.


43
00:02:44,356 --> 00:02:45,796
The media player
framework has been


44
00:02:45,796 --> 00:02:47,186
around since the first iOS SDK.


45
00:02:48,846 --> 00:02:50,356
Last year we delivered AVKit


46
00:02:50,356 --> 00:02:52,646
as a new high-level media
framework, replacing parts


47
00:02:52,646 --> 00:02:53,686
of the media framework.


48
00:02:55,416 --> 00:02:57,236
AVFoundation is available
for clients that want


49
00:02:57,236 --> 00:03:01,896
to create their own video
player with user interfaces.


50
00:03:02,026 --> 00:03:03,306
[inaudible] using
their technologies.


51
00:03:04,006 --> 00:03:07,136
Let's talk about the
media player for a moment.


52
00:03:09,416 --> 00:03:12,546
In iOS 9 we are deprecating
MP movie player controller


53
00:03:12,546 --> 00:03:13,956
and MP movie player
view controller.


54
00:03:15,516 --> 00:03:18,666
In iOS 8 we are providing
AVPlayerViewController


55
00:03:18,666 --> 00:03:22,386
as a replacement
for both classes.


56
00:03:22,516 --> 00:03:25,056
And last year, in the Mastering
Modern Media Playback session we


57
00:03:25,056 --> 00:03:27,566
showed you how easy it is
to adopt AVKit instead.


58
00:03:28,186 --> 00:03:29,916
In this session we
are focusing on AVKit,


59
00:03:29,916 --> 00:03:31,236
AVFoundation and WebKit.


60
00:03:32,176 --> 00:03:35,436
All three media frameworks
rely on AVPlayerLayer


61
00:03:35,436 --> 00:03:36,506
to display video content.


62
00:03:37,146 --> 00:03:39,446
Let me show you how PiP works.


63
00:03:40,016 --> 00:03:43,626
We start with an AVPlayerLayer
in your application.


64
00:03:44,236 --> 00:03:46,626
In order for the
video to keep playing


65
00:03:46,666 --> 00:03:49,096
when the application transitions
to the background we need


66
00:03:49,096 --> 00:03:50,786
to reroute the video frames
to a different process.


67
00:03:50,786 --> 00:03:55,526
For that, the system
adds a new layer


68
00:03:55,526 --> 00:03:57,086
that can host your
video content.


69
00:03:57,766 --> 00:04:03,616
When PiP is started, a PiP
window is created in this layer


70
00:04:04,446 --> 00:04:05,896
and positioned over
an AVPlayerLayer.


71
00:04:06,686 --> 00:04:09,826
Now, the video frames
can be rerouted.


72
00:04:09,826 --> 00:04:13,376
There is a seamless transition


73
00:04:13,376 --> 00:04:14,796
and the video will
just keep playing.


74
00:04:16,435 --> 00:04:18,426
To be clear, we are not
touching the AVPlayerLayer


75
00:04:18,426 --> 00:04:19,276
on your application.


76
00:04:19,716 --> 00:04:23,736
We just stopped delivering
video frames.


77
00:04:23,886 --> 00:04:25,256
Now, assistant can position


78
00:04:25,256 --> 00:04:26,946
and size the PiP
window however needed,


79
00:04:27,306 --> 00:04:30,546
and the video currently
keeps playing even


80
00:04:31,756 --> 00:04:33,886
when your application
transitions to the background.


81
00:04:34,606 --> 00:04:39,966
So which of our modern
video players support PiP?


82
00:04:40,496 --> 00:04:45,896
I'm happy to announce
all of them.


83
00:04:45,896 --> 00:04:48,886
In the first part of the session
I will show you how to adopt PiP


84
00:04:48,886 --> 00:04:51,646
in your applications using
all three media frameworks


85
00:04:52,656 --> 00:04:57,996
and we will start with AVKit.


86
00:04:57,996 --> 00:04:59,556
AVKit's main API
for video playback


87
00:04:59,556 --> 00:05:00,676
is AVPlayerViewController.


88
00:05:01,686 --> 00:05:03,186
A modern AV controller subclass


89
00:05:03,186 --> 00:05:05,536
that provides standard
controls and behaviors.


90
00:05:06,296 --> 00:05:10,056
In iOS 9 AV view controller
smarts Picture in Picture


91
00:05:10,196 --> 00:05:12,236
and it's a button
in the lower bar.


92
00:05:12,586 --> 00:05:16,976
When the user taps this button
the video automatically animates


93
00:05:16,976 --> 00:05:17,706
into the PiP window.


94
00:05:18,356 --> 00:05:23,146
My colleague Felix will show you
now what exactly you have to do


95
00:05:23,146 --> 00:05:24,806
in your AVPlayerController
application


96
00:05:25,046 --> 00:05:27,226
for the PiP button to show up.


97
00:05:29,516 --> 00:05:34,806
[Applause]


98
00:05:35,306 --> 00:05:36,106
>> FELIX HEIDRICH:
Hello, everyone,


99
00:05:36,296 --> 00:05:39,246
I'm excited to show you the
new Picture in Picture support


100
00:05:39,386 --> 00:05:40,716
of AVPlayerViewController.


101
00:05:41,406 --> 00:05:44,656
For this I have a demo
application running


102
00:05:44,656 --> 00:05:46,796
in the simulator that
shows a collection


103
00:05:46,796 --> 00:05:49,016
of videos using a
collection view controller.


104
00:05:49,746 --> 00:05:51,166
I can tap on one of the videos


105
00:05:51,296 --> 00:05:54,026
to reveal detailed
information about it.


106
00:05:54,246 --> 00:05:57,776
I can also tap the big
play button to bring


107
00:05:57,776 --> 00:06:00,526
up AVPlayerViewController
and start video playback


108
00:06:00,746 --> 00:06:05,106
in full screen, but as you can
see, the user interface does not


109
00:06:05,106 --> 00:06:07,536
yet contain a PiP button
in the lower right corner.


110
00:06:08,276 --> 00:06:11,056
For the button to appear, two
simple steps are required.


111
00:06:11,236 --> 00:06:12,926
Let me show them
to you in Xcode.


112
00:06:14,406 --> 00:06:17,016
The first step is to set
the apps background modes.


113
00:06:17,736 --> 00:06:20,246
For this, I switch to
the project settings,


114
00:06:20,526 --> 00:06:23,436
select the targets, and go
to the capabilities tab.


115
00:06:24,496 --> 00:06:30,766
Here under background notes
need to be enabled and the audio


116
00:06:30,766 --> 00:06:33,036
and air play check box
needs to be selected.


117
00:06:34,316 --> 00:06:38,946
The second step is to set
the app's audio category.


118
00:06:39,156 --> 00:06:41,216
For this I go to
the app delegate


119
00:06:41,466 --> 00:06:43,656
and first import AVFoundation.


120
00:06:45,056 --> 00:06:48,186
Next, an application did
finish launching this option.


121
00:06:48,926 --> 00:06:51,126
I can set the audio
session category


122
00:06:53,046 --> 00:06:56,656
by asking AV audio session
for its shared instance


123
00:06:57,226 --> 00:06:58,816
and then setting the category


124
00:06:58,816 --> 00:07:00,806
to AV audio session
category playback.


125
00:07:01,886 --> 00:07:06,106
With this code in place,
let's launch the demo again.


126
00:07:08,016 --> 00:07:13,846
I again select the video,
start playback in full screen,


127
00:07:14,076 --> 00:07:15,856
and now in the lower
right corner,


128
00:07:16,246 --> 00:07:17,696
the PiP button is present.


129
00:07:19,256 --> 00:07:22,886
When I tap the button,
the video starts to play


130
00:07:22,886 --> 00:07:23,706
in Picture in Picture.


131
00:07:25,106 --> 00:07:27,946
The user interface in the PiP
window contains three buttons,


132
00:07:28,326 --> 00:07:31,346
the central button toggles video
playback and I will talk more


133
00:07:31,346 --> 00:07:32,956
about the other two
buttons in a bit.


134
00:07:34,186 --> 00:07:36,936
Also notice that there is a
playback progress indicator


135
00:07:36,936 --> 00:07:37,886
present in the UI.


136
00:07:39,066 --> 00:07:41,876
Now, while the video is
playing, I can navigate back


137
00:07:41,936 --> 00:07:45,156
to the collection of video,
of videos and, for example,


138
00:07:45,426 --> 00:07:47,516
look at detailed information
of a different video.


139
00:07:48,276 --> 00:07:51,266
I can also simulate
pressing the home button


140
00:07:53,466 --> 00:07:56,806
and launch a different app
all while the video continues


141
00:07:56,876 --> 00:07:57,196
to play.


142
00:07:58,046 --> 00:08:00,766
On the left button in the PiP
window should return video


143
00:08:00,836 --> 00:08:02,136
playback to the application.


144
00:08:02,786 --> 00:08:05,546
When I tap this button, the
demo app is brought back


145
00:08:05,626 --> 00:08:08,056
to the foreground,
but as you just saw,


146
00:08:08,056 --> 00:08:10,526
the PiP window is simply
dismissed and that's


147
00:08:10,596 --> 00:08:14,056
because our PiP machinery does
not know if the app is ready


148
00:08:14,056 --> 00:08:15,116
to handle video playback.


149
00:08:15,566 --> 00:08:18,646
Let me show new Xcode how to
restore the user interface


150
00:08:18,696 --> 00:08:21,536
to handle video playback just
as you're users will expect it.


151
00:08:22,316 --> 00:08:25,006
For this I switch to the
collection view controller.


152
00:08:26,156 --> 00:08:29,416
New in iOS 9, we are
adding a delegate property


153
00:08:29,416 --> 00:08:30,826
to AVPlayerViewController


154
00:08:31,126 --> 00:08:34,426
and in this code I already made
the collection view controller


155
00:08:34,426 --> 00:08:36,456
the delegate of
AVPlayerViewController.


156
00:08:37,376 --> 00:08:40,785
To reinstall the user interface
the collection view controller


157
00:08:40,785 --> 00:08:44,196
needs to implement a simple
delegate message has a very


158
00:08:44,196 --> 00:08:47,386
descriptive name and is
called player view controller,


159
00:08:47,586 --> 00:08:50,296
restore user interface for
Picture in Picture stop


160
00:08:50,456 --> 00:08:51,436
with completion handler.


161
00:08:52,376 --> 00:08:55,376
In this code, I ask the
navigation controller


162
00:08:55,376 --> 00:08:58,816
for its top view controller, and
then use the top view controller


163
00:08:58,816 --> 00:09:01,396
to present the player
view controller


164
00:09:01,396 --> 00:09:02,646
that the delegate provided.


165
00:09:03,356 --> 00:09:05,216
The other thing in the code is


166
00:09:05,286 --> 00:09:09,716
to call the completion handler
once the player view controller


167
00:09:09,716 --> 00:09:10,976
is presented on screen.


168
00:09:11,286 --> 00:09:13,316
By doing this our
PiP machinery know


169
00:09:13,516 --> 00:09:16,396
that it can start animating
the video back into place.


170
00:09:17,376 --> 00:09:19,036
So let's run the demo again.


171
00:09:20,146 --> 00:09:26,526
I again tap on one of the
videos, play it in full screen,


172
00:09:27,266 --> 00:09:34,276
switch to Picture in Picture and
now when I return video playback


173
00:09:34,276 --> 00:09:34,716
to the app,


174
00:09:34,716 --> 00:09:37,176
AVPlayerViewController
is presented


175
00:09:37,576 --> 00:09:40,286
and the video nicely
animates back into place.


176
00:09:41,636 --> 00:09:43,986
Another thing I want to
show you is what happens


177
00:09:43,986 --> 00:09:46,586
when I leave the application
while the video is playing


178
00:09:46,586 --> 00:09:47,346
in full screen.


179
00:09:47,646 --> 00:09:51,116
For example, if I now simulate
pressing the home button,


180
00:09:52,156 --> 00:09:55,286
in this case, we automatically
start Picture in Picture


181
00:09:55,416 --> 00:09:57,126
so that the video
continues to play.


182
00:09:58,266 --> 00:10:01,376
At any time users may tap
the right close button


183
00:10:01,746 --> 00:10:04,816
to dismiss the PiP
window and that's Picture


184
00:10:04,816 --> 00:10:06,816
in Picture support of
AVPlayerViewController.


185
00:10:07,026 --> 00:10:07,476
Thank you.


186
00:10:08,016 --> 00:10:09,616
[Applause]


187
00:10:09,616 --> 00:10:11,096
>> STEFAN HAFENEGER: So let's
review what you just saw.


188
00:10:12,426 --> 00:10:13,536
You have to do two things.


189
00:10:14,226 --> 00:10:17,756
First, you have to enable
the correct background mode


190
00:10:18,606 --> 00:10:20,786
otherwise your application
won't be able to keep playing


191
00:10:21,066 --> 00:10:22,246
when it transitions
to the background.


192
00:10:23,316 --> 00:10:24,956
You do this in Xcode
[inaudible] capabilities.


193
00:10:26,196 --> 00:10:27,966
Audio and air play is the
one you need to enable.


194
00:10:28,076 --> 00:10:32,416
In the future iOS 9
[inaudible] rename to audio play


195
00:10:32,416 --> 00:10:35,396
and Picture in Picture.


196
00:10:35,476 --> 00:10:38,656
Second, you need to set a valid
AV audio session category.


197
00:10:39,676 --> 00:10:42,546
A good place to do this is did
finish launching with options.


198
00:10:43,306 --> 00:10:45,876
You ask for the shared
audio session,


199
00:10:45,876 --> 00:10:49,936
and then set the category to AV
audio session category playback.


200
00:10:50,376 --> 00:10:53,416
If the application also
supports audio recording,


201
00:10:53,416 --> 00:10:57,466
you can alternatively use AV
audio session play and record.


202
00:11:01,396 --> 00:11:04,296
If the application
supports background audio


203
00:11:04,296 --> 00:11:07,696
on air play iOS 8 you are
already doing both things.


204
00:11:07,696 --> 00:11:10,936
If you think the application
should not support Picture


205
00:11:10,936 --> 00:11:13,526
in Picture in iOS 9
we have a new option


206
00:11:13,526 --> 00:11:16,586
on AVPlayerViewController
that allows you to disable it.


207
00:11:18,676 --> 00:11:20,826
Notice how Picture in Picture
is automatically started


208
00:11:20,916 --> 00:11:22,616
when the user taps on
the message notification.


209
00:11:23,756 --> 00:11:24,396
Why does this happen?


210
00:11:25,186 --> 00:11:30,036
When the primary application
transitions to the background,


211
00:11:30,636 --> 00:11:32,916
an AVPlayerViewerController
is presented full screen,


212
00:11:33,596 --> 00:11:36,246
the system starts Picture in
Picture on the user's behalf.


213
00:11:37,076 --> 00:11:39,616
If the video [inaudible]
is playing, then Picture


214
00:11:39,616 --> 00:11:40,496
in Picture is possible.


215
00:11:41,176 --> 00:11:45,026
Keep in mind though that the
user can turn off this behavior


216
00:11:45,026 --> 00:11:47,636
in settings in general
multitasking persistent


217
00:11:47,636 --> 00:11:48,246
video overlay.


218
00:11:48,316 --> 00:11:53,196
Felix showed in the demo


219
00:11:53,196 --> 00:11:55,906
that you automatically dismiss
the AVPlayerViewController


220
00:11:55,906 --> 00:11:59,076
and the user starts
Picture in Picture.


221
00:11:59,116 --> 00:12:00,826
We don't know the
structure of the application,


222
00:12:00,906 --> 00:12:03,046
or where the user navigated
to when it was active,


223
00:12:03,946 --> 00:12:06,216
so we need your help to
restore the AV viewer controller


224
00:12:06,216 --> 00:12:07,866
by implementing this
delegate method.


225
00:12:08,536 --> 00:12:12,086
In a simple case you could
just call presentViewController


226
00:12:12,086 --> 00:12:14,886
animated, by using
the [inaudible].


227
00:12:15,826 --> 00:12:19,436
A few applications have
more sophisticated structure


228
00:12:19,436 --> 00:12:21,256
than the demo application,
you might have


229
00:12:21,256 --> 00:12:22,926
to do a few more things.


230
00:12:24,356 --> 00:12:26,876
In either case, don't forget
to call the completionHandler


231
00:12:26,876 --> 00:12:27,856
when you are done
with the restore.


232
00:12:28,486 --> 00:12:31,536
And that's AVKit and
AVPlayerViewController.


233
00:12:32,136 --> 00:12:35,426
Next let me show you
how to do Picture


234
00:12:35,426 --> 00:12:36,996
in Picture using AVFoundation.


235
00:12:37,536 --> 00:12:42,666
As a client of AVFoundation
you have an AVPlayerLayer


236
00:12:42,816 --> 00:12:44,596
and most likely player controls.


237
00:12:45,376 --> 00:12:48,866
I'm going to show you what you
have to do and get from here


238
00:12:49,696 --> 00:12:51,956
to here in your applications.


239
00:12:52,296 --> 00:12:57,416
In iOS 9 we have a new
class called AV Picture


240
00:12:57,506 --> 00:12:58,256
in Picture controller.


241
00:12:58,256 --> 00:13:02,606
It allows you to implement same
PiP viewers I just showed you,


242
00:13:02,776 --> 00:13:04,616
but using your own
user interface.


243
00:13:05,266 --> 00:13:09,646
Before I create an
instance of an AV Picture


244
00:13:09,646 --> 00:13:12,736
in Picture controller you
should check whether Picture


245
00:13:12,736 --> 00:13:16,996
in Picture is supported
on the current device.


246
00:13:17,156 --> 00:13:18,586
You create an AV Picture
in Picture controller


247
00:13:18,586 --> 00:13:20,246
by providing an AVPlayerLayer.


248
00:13:20,246 --> 00:13:24,376
Think of AV Picture in Picture
controller as an objects


249
00:13:24,376 --> 00:13:26,286
that allows to present
the content


250
00:13:26,286 --> 00:13:30,416
of the AVPlayerLayer
in the PiP window.


251
00:13:30,556 --> 00:13:33,096
Setting a delegate is
optional but it is very likely


252
00:13:33,096 --> 00:13:36,376
that you will need it.


253
00:13:36,636 --> 00:13:38,786
Next, you have the PiP
button to use interface.


254
00:13:38,786 --> 00:13:43,516
So that the user can
start Picture in Picture.


255
00:13:43,656 --> 00:13:44,736
You should only add the button


256
00:13:44,816 --> 00:13:49,076
if the device supports
Picture in Picture though.


257
00:13:49,306 --> 00:13:50,836
There are situations
where starting Picture


258
00:13:50,836 --> 00:13:52,386
in Picture is currently
not possible,


259
00:13:52,906 --> 00:13:54,506
even though the device
supports it in general.


260
00:13:55,696 --> 00:13:59,356
In this case, you should
disable your PiP button.


261
00:13:59,486 --> 00:14:01,466
For that we have a property
on the PiP controller


262
00:14:01,466 --> 00:14:05,196
that you can observe and
then update the enable set


263
00:14:05,196 --> 00:14:09,086
of your PiP button.


264
00:14:09,236 --> 00:14:11,176
The implementation of your
PiP button action will look


265
00:14:11,176 --> 00:14:13,916
something like this.


266
00:14:14,136 --> 00:14:15,976
You first make sure that
PiP is not already active.


267
00:14:16,796 --> 00:14:19,766
And then you can start Picture
in Picture in the pipController.


268
00:14:21,356 --> 00:14:23,186
Do not call this method
without user interaction.


269
00:14:23,996 --> 00:14:28,206
If you use this inappropriately
the App Store team will


270
00:14:28,206 --> 00:14:28,986
reject submissions.


271
00:14:29,676 --> 00:14:34,696
If the application provides
additional content while PiP is


272
00:14:34,696 --> 00:14:37,376
active you may want to
dismiss the video player viewer


273
00:14:37,376 --> 00:14:38,566
controller after PiP is started.


274
00:14:39,976 --> 00:14:42,016
In order to do so could
implement the did start delegate


275
00:14:42,016 --> 00:14:45,406
method and then call
dismissViewControllerAnimated


276
00:14:45,576 --> 00:14:46,706
on your controller.


277
00:14:47,406 --> 00:14:50,686
When you do this
though make sure


278
00:14:50,686 --> 00:14:52,336
that you don't release
your PiP controller.


279
00:14:53,306 --> 00:14:57,426
Because if it does happen,
the PiP window will disappear.


280
00:14:57,826 --> 00:15:00,676
So make sure you structure
your application accordingly.


281
00:15:01,386 --> 00:15:06,766
AV Picture in Picture
controller has a delegate method


282
00:15:06,766 --> 00:15:08,336
for restoring your
view controller.


283
00:15:09,186 --> 00:15:12,686
In a simple case you could
just call present view


284
00:15:12,686 --> 00:15:14,366
controller animated.


285
00:15:15,306 --> 00:15:18,206
Again, make sure you call
the completionHandler


286
00:15:18,206 --> 00:15:20,676
when you are done
with the restore.


287
00:15:20,676 --> 00:15:23,186
Because when you call the
completionHandler it is assumed


288
00:15:23,186 --> 00:15:24,236
that the AVPlayerLayer used


289
00:15:24,236 --> 00:15:26,526
to initialize the PiP
controller is back on screen.


290
00:15:27,216 --> 00:15:30,406
If this is not the
case, we won't animate


291
00:15:30,406 --> 00:15:37,226
to video frame spec. Your
AVPlayerLayer won't show


292
00:15:37,226 --> 00:15:38,966
on video frames while
PiP is active


293
00:15:38,966 --> 00:15:42,446
so if the application provides a
non-modal view player experience


294
00:15:42,446 --> 00:15:45,336
like this example you might want
to update the user interface.


295
00:15:46,116 --> 00:15:49,736
AV player viewer controller
shows [inaudible] like this


296
00:15:49,736 --> 00:15:51,666
and hides viewer controls.


297
00:15:53,186 --> 00:15:54,346
This behavior is not required


298
00:15:54,346 --> 00:15:56,226
but we highly recommend
this for consistency.


299
00:15:56,296 --> 00:16:00,606
In order to do this you could
implement the start delegate


300
00:16:00,606 --> 00:16:03,636
method, hide your
player controls


301
00:16:04,666 --> 00:16:05,726
and show your place
holder art work.


302
00:16:06,526 --> 00:16:08,966
When PiP stops you
do the opposite,


303
00:16:08,966 --> 00:16:12,086
you implement the did
stop delegate method,


304
00:16:13,156 --> 00:16:14,696
hide your placeholder art work


305
00:16:15,026 --> 00:16:16,126
and show your player
controls again.


306
00:16:17,296 --> 00:16:18,576
Very simple.


307
00:16:20,836 --> 00:16:23,686
Finally if you want to allow
PiP to automatically start


308
00:16:23,686 --> 00:16:26,446
when application transitions to
background you have to be sure


309
00:16:26,446 --> 00:16:29,116
that the AVPlayerLayer
covers the entire UIWindow.


310
00:16:29,896 --> 00:16:33,546
If this is the case, and
the video is playing,


311
00:16:34,096 --> 00:16:35,446
and PiP is currently possible,


312
00:16:35,626 --> 00:16:37,226
the system automatically
starts Picture in Picture


313
00:16:37,226 --> 00:16:38,076
on your user's behalf.


314
00:16:38,816 --> 00:16:41,906
And you will see all
of this in action,


315
00:16:42,046 --> 00:16:44,176
we have brought a great sample
project you should check


316
00:16:44,176 --> 00:16:45,786
out after the session.


317
00:16:47,336 --> 00:16:49,236
So you saw how easy
it is to adopt Picture


318
00:16:49,236 --> 00:16:52,176
in Picture using
AVFoundation as well.


319
00:16:52,386 --> 00:16:54,616
Finally, let me show you
Picture in Picture with WebKit.


320
00:16:55,216 --> 00:17:02,716
WebKit's main API for
video play is WKWebView.


321
00:17:02,716 --> 00:17:08,286
This part of the session is for
those among you using WebKit


322
00:17:08,286 --> 00:17:12,726
to present your [inaudible]
web technologies.


323
00:17:12,726 --> 00:17:15,366
In iOS 9 WKWebView
supports Picture in Picture


324
00:17:15,695 --> 00:17:17,736
for HTML5 video if
the application is set


325
00:17:17,736 --> 00:17:19,705
up the same way as
for the other APIs.


326
00:17:19,976 --> 00:17:22,826
If your web content
uses iOS default


327
00:17:22,826 --> 00:17:24,766
in the playback controls,
PiP will just work.


328
00:17:24,766 --> 00:17:29,256
If you are a website
developer interesting


329
00:17:29,426 --> 00:17:32,706
in incorporating a PiP button
into your controls check


330
00:17:32,706 --> 00:17:35,366
out section 501 what's new


331
00:17:35,366 --> 00:17:37,046
for web developers
in WebKit and Safari.


332
00:17:37,816 --> 00:17:42,356
If you want to support
background audio air play


333
00:17:42,406 --> 00:17:44,616
but don't want to allow
Picture in Picture,


334
00:17:44,616 --> 00:17:47,486
we'll have a property in
WKWebViewConfiguration


335
00:17:47,536 --> 00:17:51,716
in the future iOS 9 seed
that allows you to do so.


336
00:17:52,386 --> 00:17:53,726
And that's WebKit.


337
00:17:55,056 --> 00:17:57,766
So you saw how easy and straight
forward it is to adopt Picture


338
00:17:57,766 --> 00:18:00,486
in Picture in your applications
for all three media frameworks.


339
00:18:00,656 --> 00:18:03,296
I can't wait to see
PiP support in all


340
00:18:03,296 --> 00:18:04,846
of your iPad video
player applications.


341
00:18:04,846 --> 00:18:11,316
Picture in Picture is a
lot like background audio.


342
00:18:11,446 --> 00:18:13,656
If the application
is not on screen


343
00:18:13,756 --> 00:18:16,156
but the user is enjoying
your media.


344
00:18:16,936 --> 00:18:19,666
The same rules apply
to background audio


345
00:18:19,666 --> 00:18:21,166
and air play apply here as well.


346
00:18:22,776 --> 00:18:25,876
For instance, do not perform
any task unrelated to playback


347
00:18:25,876 --> 00:18:28,646
and limit your memory
usage to only these tasks


348
00:18:28,646 --> 00:18:30,416
when the application
is in the background.


349
00:18:31,996 --> 00:18:34,776
Properly sharing resources is
critical not only for PiP apps,


350
00:18:34,776 --> 00:18:36,066
but for all iPad applications.


351
00:18:36,806 --> 00:18:41,356
And to discuss this further let
me welcome Jonathan on stage


352
00:18:41,356 --> 00:18:43,296
to tell you everything you
need to know about this topic.


353
00:18:43,946 --> 00:18:44,196
Thank you.


354
00:18:45,206 --> 00:18:47,206
[Applause]


355
00:18:47,396 --> 00:18:50,436
>> JONATHAN BENNETT:
Thanks Stefan multitasking


356
00:18:50,436 --> 00:18:54,766
on an iPad allows you to use
multiple apps onscreen at once.


357
00:18:55,156 --> 00:18:59,406
But hardware resources are
still shared between all


358
00:18:59,406 --> 00:19:00,946
of the presented apps.


359
00:19:01,496 --> 00:19:06,246
I would like to explore with you
some of the iOS media policies


360
00:19:06,766 --> 00:19:11,666
and updated best practices you
can use to manage audio, video,


361
00:19:11,666 --> 00:19:16,036
and camera in your applications
with multitasking on iPad.


362
00:19:18,536 --> 00:19:20,186
The good news is that some


363
00:19:20,186 --> 00:19:23,226
of these best practices
should already be familiar.


364
00:19:23,226 --> 00:19:27,036
And many apply to all
iOS devices so it's easy


365
00:19:27,036 --> 00:19:28,946
to make your app
shine everywhere.


366
00:19:30,076 --> 00:19:32,826
Now, before I dive into
specific media resources,


367
00:19:33,296 --> 00:19:35,136
I'd like to take a few
moments to discuss some


368
00:19:35,136 --> 00:19:38,446
of the roles your
app may take on iPad.


369
00:19:39,696 --> 00:19:42,916
In iOS 8 apps are
presented full screen.


370
00:19:43,516 --> 00:19:47,866
And new in iOS 9 you can have up
to three apps on screen at once


371
00:19:48,406 --> 00:19:49,956
with the new multitasking modes.


372
00:19:51,106 --> 00:19:55,176
These apps may be vying for
some of the shared resources


373
00:19:55,176 --> 00:19:58,846
so to help manage that, the
system categorizes your app


374
00:19:58,846 --> 00:20:00,936
into one of three roles.


375
00:20:02,636 --> 00:20:04,636
Full screen apps are
considered primary.


376
00:20:05,316 --> 00:20:09,506
And they continue to be so when
a secondary app is presented


377
00:20:09,506 --> 00:20:10,516
in slide-over.


378
00:20:11,116 --> 00:20:15,486
The full screen app also remains
primary when it's resized


379
00:20:15,646 --> 00:20:19,096
to fit next to a pinned
app in split view.


380
00:20:19,336 --> 00:20:22,676
And a Picture in Picture
application can be put


381
00:20:22,676 --> 00:20:25,276
into the background while
the video remains visible


382
00:20:25,276 --> 00:20:25,976
to the user.


383
00:20:26,646 --> 00:20:29,626
In this case your app's
considered background media.


384
00:20:30,256 --> 00:20:34,606
For certain shared resources
these roles help define the


385
00:20:34,606 --> 00:20:37,396
system's policies and
your app's capabilities.


386
00:20:37,986 --> 00:20:40,196
So let's dig into some
of these resources.


387
00:20:41,536 --> 00:20:42,516
Starting with audio.


388
00:20:44,596 --> 00:20:47,596
The audio system on
iOS is well-suited


389
00:20:47,596 --> 00:20:48,856
for multiple applications.


390
00:20:49,586 --> 00:20:51,276
If your app currently
using audio,


391
00:20:51,506 --> 00:20:55,706
you have configured the AV audio
session API to state the nature


392
00:20:55,706 --> 00:20:57,226
of the audio in your
application.


393
00:20:58,756 --> 00:21:02,246
The system uses this to figure


394
00:21:02,246 --> 00:21:04,806
out how your app's
audio mixes with,


395
00:21:04,806 --> 00:21:08,206
docks or interrupts other
app audio on the system.


396
00:21:08,836 --> 00:21:13,016
The good news is a properly
configured AV audio session


397
00:21:13,016 --> 00:21:15,966
should just work with
multitasking on iPad.


398
00:21:16,776 --> 00:21:22,956
To this end, never change
your audio configuration based


399
00:21:22,956 --> 00:21:25,466
on how your app is
presented on screen.


400
00:21:26,296 --> 00:21:31,596
It's all about the audio.


401
00:21:31,976 --> 00:21:33,426
With that, I would
like to go over some


402
00:21:33,426 --> 00:21:36,696
of the audio session best
practices most relevant


403
00:21:36,696 --> 00:21:38,866
to multitasking on iPad.


404
00:21:39,416 --> 00:21:41,516
If you are not following
these practices,


405
00:21:41,516 --> 00:21:43,836
your app may have
worked okay on iOS 8


406
00:21:43,836 --> 00:21:45,406
but showed issues on iOS 9.


407
00:21:47,316 --> 00:21:50,766
First off, only activate
your audio session


408
00:21:50,766 --> 00:21:52,236
when audio is first needed.


409
00:21:52,986 --> 00:21:54,376
This is especially true


410
00:21:54,376 --> 00:21:58,456
if you have an application whose
audio interrupts other apps


411
00:21:58,536 --> 00:22:03,716
such as music or video
application using audio sessions


412
00:22:04,306 --> 00:22:05,966
playback category.


413
00:22:09,826 --> 00:22:13,536
Never solely determine to
activate your audio just


414
00:22:13,536 --> 00:22:17,276
because your app launched
or came into the foreground.


415
00:22:17,526 --> 00:22:19,196
Wait until the user interacts


416
00:22:19,196 --> 00:22:21,796
with your audio feature before
activating your session.


417
00:22:24,916 --> 00:22:29,436
For example, a music and
video application would wait


418
00:22:29,436 --> 00:22:31,066
until the user taps
the play button.


419
00:22:31,426 --> 00:22:36,756
Next, there is a huge category
of apps that don't need


420
00:22:36,756 --> 00:22:38,046
to interrupt other audio.


421
00:22:38,926 --> 00:22:42,436
For example, if you have a game
or have other ancillary audio


422
00:22:42,436 --> 00:22:45,976
like sound effects, you should
use the ambient audio category,


423
00:22:46,796 --> 00:22:49,176
this category provides
appropriate behaviors


424
00:22:49,176 --> 00:22:53,396
for this kind of audio including
mixing with other applications.


425
00:22:54,326 --> 00:22:57,466
This is critical for these
kind of applications on,


426
00:22:57,766 --> 00:23:00,466
with multitasking on iPad,
because your app may remain


427
00:23:00,466 --> 00:23:03,086
in the foreground while
other apps come and go.


428
00:23:03,316 --> 00:23:07,606
And you don't want your
game audio interrupted


429
00:23:07,606 --> 00:23:11,326
and having the user have to
restart your app in order


430
00:23:11,326 --> 00:23:14,696
to get its audio back.


431
00:23:14,926 --> 00:23:18,616
Lastly, some apps have
secondary audio Soundtracks.


432
00:23:18,616 --> 00:23:20,946
An example of this
is if you have a game


433
00:23:20,946 --> 00:23:23,496
with bold sound effects
and a music Soundtrack


434
00:23:23,536 --> 00:23:24,556
that plays during the game.


435
00:23:24,556 --> 00:23:28,386
Now, if the user is
already listening to music


436
00:23:28,386 --> 00:23:29,856
in another application,


437
00:23:30,076 --> 00:23:32,826
you would like to silence
your secondary Soundtrack.


438
00:23:33,406 --> 00:23:35,996
So that the user it
continue listening


439
00:23:35,996 --> 00:23:39,086
to their music while your
sound effects still mix in.


440
00:23:39,636 --> 00:23:44,486
We provided a great way in
iOS 8 to know when to do this.


441
00:23:45,266 --> 00:23:49,206
Simply check AV audio sessions
secondary Audio Should Be


442
00:23:49,246 --> 00:23:54,446
Silenced Hint and listen to its
began and ended notifications.


443
00:23:55,086 --> 00:23:58,936
So these are some of the
most important best practices


444
00:23:58,936 --> 00:24:00,696
for using audio on iPad,


445
00:24:00,696 --> 00:24:04,126
and as a bonus following these
will insure a great experience


446
00:24:04,126 --> 00:24:05,796
on all iOS devices.


447
00:24:06,246 --> 00:24:08,866
If you would like to learn more


448
00:24:08,866 --> 00:24:11,106
about configuring your audio
session, there is a bunch


449
00:24:11,106 --> 00:24:13,536
of great tips in last
year's Core Audio talk


450
00:24:13,536 --> 00:24:17,736
and in our detailed
programming guide.


451
00:24:17,906 --> 00:24:19,746
Next up, video.


452
00:24:19,786 --> 00:24:24,486
And first off, a lot of video
has audio associated with it.


453
00:24:25,096 --> 00:24:32,126
So if you have an app that
provides movies or TV shows,


454
00:24:32,126 --> 00:24:35,376
you will want to properly
configure your AV audio session.


455
00:24:35,996 --> 00:24:37,646
In that example, you will want


456
00:24:37,646 --> 00:24:40,866
to set audio session's
category to play back.


457
00:24:42,376 --> 00:24:46,266
Next. If you support air
playing video in the background


458
00:24:46,406 --> 00:24:49,886
or add the new PiP support
or add the new PiP feature


459
00:24:49,976 --> 00:24:54,236
in your application, you will
be considered a background media


460
00:24:54,236 --> 00:24:57,266
app when you are playing
media in the background.


461
00:24:58,976 --> 00:25:02,656
This means that you will have
lower maximum memory limits


462
00:25:02,856 --> 00:25:07,346
so it's really important that
you discard any unnecessary data


463
00:25:07,426 --> 00:25:14,466
such as view controllers, views,
images, and other data caches


464
00:25:14,506 --> 00:25:16,456
that aren't necessary when
your app is off screen.


465
00:25:17,056 --> 00:25:19,166
You will want to do
this proactively.


466
00:25:19,446 --> 00:25:22,516
Don't wait for a memory
warning to do this.


467
00:25:24,216 --> 00:25:26,156
You will also want
to limit yourself


468
00:25:26,156 --> 00:25:31,036
to performing just the task
necessary to perform playback


469
00:25:31,036 --> 00:25:35,556
in order to help share the CPU.


470
00:25:35,756 --> 00:25:42,286
Now, many iOS video apps
provide their content via HTTP


471
00:25:42,526 --> 00:25:43,306
live streaming.


472
00:25:43,756 --> 00:25:46,146
If you have a streaming
video application,


473
00:25:46,146 --> 00:25:47,496
you will want to do two things.


474
00:25:48,076 --> 00:25:52,016
First, make sure that you are
providing multiple variants


475
00:25:52,016 --> 00:25:54,506
in your stream including
a smaller resolution,


476
00:25:54,646 --> 00:25:55,956
low bandwidth variant.


477
00:25:57,136 --> 00:26:00,776
And second, make sure you are
annotating all of your variants


478
00:26:00,836 --> 00:26:03,576
with the resolution attribute
in the master play list.


479
00:26:04,986 --> 00:26:08,126
Now, if you get your video
from an external vendor,


480
00:26:08,406 --> 00:26:10,896
be sure to check with them to
see if they are providing you


481
00:26:10,896 --> 00:26:13,646
with these diverse
well-annotated variants.


482
00:26:13,956 --> 00:26:16,106
And this is important
for three reasons.


483
00:26:16,916 --> 00:26:23,706
On iPad and iOS 9 your video may
not take up the entire screen.


484
00:26:24,606 --> 00:26:27,446
Providing well annotated
variants allows iOS


485
00:26:27,546 --> 00:26:29,316
to choose the right-sized video


486
00:26:29,376 --> 00:26:30,906
for how it's currently
presented.


487
00:26:32,356 --> 00:26:34,106
And when it's presented
in Picture


488
00:26:34,106 --> 00:26:38,036
in Picture a smaller resolution
low bandwidth variant lowers


489
00:26:38,036 --> 00:26:41,666
your memory footprint, and
helps avoid terminating apps due


490
00:26:41,666 --> 00:26:42,496
to memory pressure.


491
00:26:43,666 --> 00:26:49,506
And lastly, following these
practices help users avoid


492
00:26:50,156 --> 00:26:52,256
unnecessary data plan usage.


493
00:26:52,686 --> 00:26:54,746
And they will really
appreciate that.


494
00:26:58,636 --> 00:27:01,566
The last topic I would like
to talk about today is camera.


495
00:27:04,216 --> 00:27:07,556
In iOS 9 only one app can
use the camera at a time.


496
00:27:08,746 --> 00:27:14,116
In addition, for certain camera
features they may only be


497
00:27:14,116 --> 00:27:16,936
available when one app
is visible on screen.


498
00:27:18,836 --> 00:27:21,486
This means that camera
availability can change


499
00:27:21,486 --> 00:27:24,696
at any time and your app's
camera usage could be


500
00:27:24,696 --> 00:27:26,746
interrupted because
the user is interacting


501
00:27:26,746 --> 00:27:28,846
with other app using
multitasking.


502
00:27:29,446 --> 00:27:32,406
For this reason, it's important


503
00:27:32,406 --> 00:27:35,426
to consider how people
use your application


504
00:27:36,156 --> 00:27:37,756
and its camera features.


505
00:27:38,296 --> 00:27:42,946
If you have a camera centric
application, you may want


506
00:27:42,946 --> 00:27:44,686
to consider being
full screen only.


507
00:27:45,766 --> 00:27:48,196
Our camera app is a
great example of this.


508
00:27:48,576 --> 00:27:51,456
If your users expect an
experience like this,


509
00:27:51,836 --> 00:27:55,766
you can add the UI requires full
screen key to your info P list.


510
00:27:56,936 --> 00:27:59,756
This will help let
users get quick access


511
00:27:59,756 --> 00:28:01,746
to the camera inside
your application


512
00:28:01,996 --> 00:28:04,246
and use the entire
iPad as a view finder.


513
00:28:06,116 --> 00:28:09,506
Now, if using the camera
is not the primary feature


514
00:28:09,506 --> 00:28:11,426
of your application,
you will likely want


515
00:28:11,426 --> 00:28:16,136
to adopt the multitasking
enhancements on iPad.


516
00:28:16,806 --> 00:28:19,126
Our notes app is a
great example of this.


517
00:28:19,726 --> 00:28:21,646
People are going to
love the flexibility


518
00:28:21,646 --> 00:28:24,186
of using the new
notes features inside


519
00:28:24,186 --> 00:28:26,136
of slide-over and
split-view modes.


520
00:28:27,126 --> 00:28:28,346
However, this mean that's some


521
00:28:28,346 --> 00:28:31,716
of the app's camera features
may not always be available.


522
00:28:32,896 --> 00:28:35,346
So let's take a look
at how our camera


523
00:28:35,506 --> 00:28:38,776
and notes apps handle
camera availability on iPad


524
00:28:38,776 --> 00:28:46,186
and how your apps
can do the same.


525
00:28:46,396 --> 00:28:47,886
When one app is on the screen,


526
00:28:48,166 --> 00:28:53,506
UI image picker can let you
see a preview, take a photo,


527
00:28:53,506 --> 00:28:55,416
or do a video capture,
just like today.


528
00:28:55,416 --> 00:28:58,776
And when multiple
apps are on screen,


529
00:28:58,776 --> 00:29:01,646
you can still see a preview
and take a photo, however,


530
00:29:01,646 --> 00:29:04,096
video capture will be disabled.


531
00:29:05,296 --> 00:29:07,236
So let's dig into this case.


532
00:29:09,586 --> 00:29:11,156
Here we have full screen maps


533
00:29:11,656 --> 00:29:13,516
with your app presented
in slide-over.


534
00:29:14,286 --> 00:29:18,116
The UI image picker is in photo
mode so you can see a preview


535
00:29:18,386 --> 00:29:21,016
and the user can take a photo
if they tap the shutter button.


536
00:29:21,816 --> 00:29:23,996
When the user swipes
over to the video mode,


537
00:29:23,996 --> 00:29:26,546
they will see a message that
says your app needs to be


538
00:29:26,546 --> 00:29:28,596
in full screen in
order to take video.


539
00:29:28,596 --> 00:29:31,416
What does this mean
for your application?


540
00:29:34,256 --> 00:29:38,626
First off, active video captures
can be interrupted at any time.


541
00:29:39,296 --> 00:29:44,286
An example of this is if you
are recording video full screen


542
00:29:44,286 --> 00:29:48,126
and an app slides over a new
app in the slide-over feature.


543
00:29:48,656 --> 00:29:54,666
Your video will be interrupted
and it's important to note


544
00:29:54,666 --> 00:29:56,866
that this kind of
interruption can happen


545
00:29:56,866 --> 00:29:59,216
to any video capture
app regardless


546
00:29:59,216 --> 00:30:02,536
if you support the multitasking
modes or full screen only.


547
00:30:03,006 --> 00:30:12,286
Next, the UI image pickers start
video capture method may fail


548
00:30:12,286 --> 00:30:14,566
because we are in a multitasking
mode that doesn't support it.


549
00:30:16,076 --> 00:30:18,636
If you are not currently paying
attention to this return value,


550
00:30:18,956 --> 00:30:19,996
now is the time to do so.


551
00:30:22,536 --> 00:30:25,126
So these are some of the
things for UI image picker.


552
00:30:25,126 --> 00:30:27,916
Let's transition to
AV capture session now


553
00:30:27,916 --> 00:30:31,186
and see how the API differs.


554
00:30:34,056 --> 00:30:35,766
When one app is on the screen,


555
00:30:36,136 --> 00:30:38,136
you can still have full
access to the camera.


556
00:30:39,186 --> 00:30:42,686
And because AV capture session
is a flexible low level API,


557
00:30:42,686 --> 00:30:46,026
you can do more than just these
three features listed here.


558
00:30:46,686 --> 00:30:49,006
And we have been amazed
at some of the creative


559
00:30:49,146 --> 00:30:53,456
and powerful features you have
added in your applications.


560
00:30:57,006 --> 00:31:01,916
In order to ensure that we
can offer you the resources


561
00:31:01,916 --> 00:31:05,956
necessary to provide the highest
quality camera experience inside


562
00:31:05,956 --> 00:31:10,376
your application, an AV capture
session using the camera will


563
00:31:10,556 --> 00:31:13,936
only be available when one
app is visible on screen.


564
00:31:15,196 --> 00:31:18,176
This means that whenever
slide-over, split view,


565
00:31:18,406 --> 00:31:19,886
or Picture in Picture is active,


566
00:31:20,396 --> 00:31:22,736
your camera's session
will be interrupted.


567
00:31:24,036 --> 00:31:26,966
You should handle these
interruptions and communicate


568
00:31:26,966 --> 00:31:29,886
to your users that the camera
is currently unavailable.


569
00:31:30,766 --> 00:31:32,846
Let's see how you can do this.


570
00:31:34,416 --> 00:31:37,776
The first step is to listen


571
00:31:37,776 --> 00:31:40,286
to AV capture sessions
interruption reason


572
00:31:40,536 --> 00:31:43,036
or excuse me, was
interrupted notification.


573
00:31:43,536 --> 00:31:48,266
And new in iOS 9,


574
00:31:48,796 --> 00:31:52,846
the notification's user info
dictionary states a reason


575
00:31:54,336 --> 00:31:57,566
stating why your
camera was interrupted.


576
00:31:58,366 --> 00:32:00,506
There is multiple reasons
you could be interrupted


577
00:32:00,506 --> 00:32:01,846
but when it's due
to multitasking


578
00:32:01,846 --> 00:32:05,496
on iPad you will be told that
the video device is unavailable


579
00:32:05,496 --> 00:32:07,156
with multiple foreground apps.


580
00:32:08,046 --> 00:32:10,296
This is your opportunity
to adjust your UI


581
00:32:10,296 --> 00:32:14,586
by disabling any capture
buttons and also identifying


582
00:32:14,586 --> 00:32:16,336
that the camera is
currently unavailable.


583
00:32:16,856 --> 00:32:21,756
Now that you have handled
these interruptions,


584
00:32:21,806 --> 00:32:22,936
what do you do when they end?


585
00:32:25,106 --> 00:32:27,926
When an interruption ends,


586
00:32:27,926 --> 00:32:30,566
AV capture session automatically
resumes the session,


587
00:32:30,646 --> 00:32:32,686
there is no need to
manually restart it.


588
00:32:33,196 --> 00:32:36,246
You can be notified of this


589
00:32:36,296 --> 00:32:39,536
by observing the
interruption ended notification.


590
00:32:41,036 --> 00:32:43,036
And, again, this
is your opportunity


591
00:32:43,036 --> 00:32:46,486
to restore your camera UI by
re-enabling any of the buttons


592
00:32:46,486 --> 00:32:47,726
that you previously disabled.


593
00:32:54,346 --> 00:32:59,166
Be sure to check out our updated
AV cam sample code for examples


594
00:32:59,166 --> 00:33:02,516
on using these new interruption
reasons inside your application.


595
00:33:03,886 --> 00:33:10,626
So in review, Picture in
Picture is a great new feature


596
00:33:10,626 --> 00:33:12,556
for video playback applications.


597
00:33:13,956 --> 00:33:15,896
You can adopt it easily with any


598
00:33:15,896 --> 00:33:19,016
of our modern playback
frameworks and remember


599
00:33:19,016 --> 00:33:20,956
that if you are using
MediaPlayer framework


600
00:33:20,956 --> 00:33:24,996
for video playback to transition
over to AVKit to get the benefit


601
00:33:24,996 --> 00:33:27,316
of PiP and other great features.


602
00:33:29,016 --> 00:33:31,986
Also be sure to follow best
practices Stefan talked


603
00:33:31,986 --> 00:33:34,176
about to ensure a
great experience inside


604
00:33:34,176 --> 00:33:35,086
your application.


605
00:33:35,896 --> 00:33:38,406
As an example, make
sure to restore your UI


606
00:33:38,476 --> 00:33:41,226
so that the video animates
right back into your app.


607
00:33:43,316 --> 00:33:47,146
Multitasking on iPad
provides the power


608
00:33:47,146 --> 00:33:49,206
to use multiple applications
at once.


609
00:33:49,426 --> 00:33:50,136
However, this comes


610
00:33:50,136 --> 00:33:52,836
with a responsibility
of sharing resources.


611
00:33:53,986 --> 00:33:55,796
Three things you can do are


612
00:33:55,796 --> 00:33:58,236
to properly configure
your audio session,


613
00:33:58,506 --> 00:34:00,256
provide adaptive video streams


614
00:34:00,896 --> 00:34:04,026
and handle the new camera
interruption reasons.


615
00:34:06,176 --> 00:34:09,656
For more information, get
in touch with our evangelist


616
00:34:09,656 --> 00:34:10,775
and check out the forum.


617
00:34:11,996 --> 00:34:17,186
And also we provided a new
document called adopting


618
00:34:17,186 --> 00:34:21,656
multitasking enhancements
on iPad.


619
00:34:21,866 --> 00:34:24,136
Now, sharing media
resources is only part


620
00:34:24,136 --> 00:34:26,996
of the story for
shared resources.


621
00:34:27,476 --> 00:34:29,295
Be sure to check out
the optimizing your app


622
00:34:29,295 --> 00:34:34,036
for multitasking session
happening next up in Presidio.


623
00:34:34,815 --> 00:34:37,025
There is also a great
Friday talk


624
00:34:37,025 --> 00:34:39,516
on delivering performance
on iOS.


625
00:34:40,856 --> 00:34:41,696
And if you missed it,


626
00:34:41,696 --> 00:34:47,186
the getting started session
is a great place to learn


627
00:34:47,186 --> 00:34:52,036
about adopting adaptive
UI in your apps.


628
00:34:53,025 --> 00:34:56,676
On behalf of Stefan,
Felix and myself.


629
00:34:56,676 --> 00:34:58,556
It's been great to talk
to you this afternoon.


630
00:34:59,436 --> 00:35:00,976
Thanks, and have a
great rest of the week!


631
00:35:01,516 --> 00:35:04,500
[Applause]

