1
00:00:10,316 --> 00:00:13,436
>> Welcome to Session
709: Protecting Secrets


2
00:00:13,436 --> 00:00:17,116
with the Keychain If you
have ever used a keychain


3
00:00:17,116 --> 00:00:20,526
or if you think you should,
this is your session; iOS, OS X,


4
00:00:20,526 --> 00:00:26,766
we're quite agnostic here
Let's get started What will you


5
00:00:26,766 --> 00:00:27,316
learn here?


6
00:00:28,496 --> 00:00:31,346
Well, I'll tell you what
keychains are I'll tell you how


7
00:00:31,346 --> 00:00:35,566
to use them There is
iOS specific information


8
00:00:35,566 --> 00:00:38,726
and there is OS X specific
information I'll mark them very


9
00:00:38,726 --> 00:00:41,476
specifically so you know when
to go off and check your tweets


10
00:00:42,476 --> 00:00:45,576
And pointers to more stuff


11
00:00:45,626 --> 00:00:49,636
because there's always
more stuff All right


12
00:00:49,636 --> 00:00:51,166
So why do we have a keychain?


13
00:00:51,936 --> 00:00:53,356
We've actually had one


14
00:00:53,356 --> 00:00:57,046
for a very long time There was
a keychain API and keychains


15
00:00:57,046 --> 00:01:02,736
in Mac OS 9; so long time
There's a lot of small secrets


16
00:01:03,006 --> 00:01:04,866
that your programs
need to handle --


17
00:01:05,046 --> 00:01:08,396
passwords, account
numbers maybe, PINs --


18
00:01:09,976 --> 00:01:15,786
you want to store them securely,
but you don't want to do


19
00:01:15,786 --> 00:01:19,256
that cryptographic thing
because it sounds dangerous


20
00:01:19,256 --> 00:01:25,436
and it's hard And you really
want to be as particular


21
00:01:25,436 --> 00:01:28,656
as you can about who gets
those little secrets,


22
00:01:29,036 --> 00:01:32,786
not just in terms of which
user, but also which programs


23
00:01:33,476 --> 00:01:36,206
because we all know that not
all programs are is meticulous


24
00:01:36,206 --> 00:01:42,036
with the user's secrets as yours
And you want some assurance


25
00:01:42,036 --> 00:01:46,486
that if the user loses
their laptop or their iPhone


26
00:01:46,486 --> 00:01:48,306
and somebody walks away with it,


27
00:01:48,306 --> 00:01:52,816
those secrets actually
stay secrets That's called


28
00:01:52,816 --> 00:01:57,846
"off-line attack" in
security lingo The control


29
00:01:57,846 --> 00:01:59,556
over these secrets


30
00:02:00,406 --> 00:02:03,756
in the keychain universe is
always the users This is kind


31
00:02:03,756 --> 00:02:07,216
of important point
to get out of the way


32
00:02:07,216 --> 00:02:10,506
up front These are the user's
secrets These are not your


33
00:02:10,506 --> 00:02:15,076
secrets A keychain doesn't give
you a way of hiding something


34
00:02:15,246 --> 00:02:20,306
from the user of the system
It's just a way for you


35
00:02:20,306 --> 00:02:23,976
to protect the user's secrets
better and more easily And,


36
00:02:23,976 --> 00:02:26,686
of course, we all know,
less code is better


37
00:02:27,076 --> 00:02:32,306
So keychain APIs try to be a
high level API Fewer calls,


38
00:02:32,676 --> 00:02:35,076
fewer parameters for the most
part It may not always seem


39
00:02:35,076 --> 00:02:36,206
that way, but believe me,


40
00:02:36,206 --> 00:02:40,656
the low-level solutions look
a lot worse than this Okay


41
00:02:40,656 --> 00:02:41,956
So what is a keychain?


42
00:02:42,346 --> 00:02:44,986
It's a database I
mean, in its heart,


43
00:02:45,126 --> 00:02:48,546
it's a database It's got rows


44
00:02:48,546 --> 00:02:50,586
which in keychain lingo
are called "items";


45
00:02:51,176 --> 00:02:52,336
and the items have values,


46
00:02:52,406 --> 00:02:53,636
that's where you
put the secrets;


47
00:02:53,636 --> 00:02:57,346
and they have attributes which
is things that you find them by


48
00:02:57,346 --> 00:03:04,256
or that you stick on the side
We call those "metadata."


49
00:03:04,256 --> 00:03:09,426
And keychains are optimized
for storing small secrets


50
00:03:09,616 --> 00:03:12,476
and finding them quickly
That's what they do


51
00:03:12,476 --> 00:03:13,596
for a living You know,


52
00:03:13,596 --> 00:03:17,726
the prototypical example is a
user's password to a website


53
00:03:17,856 --> 00:03:21,966
or some web service or
something else; little secrets,


54
00:03:22,036 --> 00:03:26,716
little individual secrets that
you use one at a time Now,


55
00:03:26,966 --> 00:03:29,116
there is nothing in
the APIs that keeps you


56
00:03:29,116 --> 00:03:34,276
from storing 150,000 secrets in
a keychain, and there's nothing


57
00:03:34,276 --> 00:03:35,326
in the APIs that keeps you


58
00:03:35,326 --> 00:03:38,366
from storing a 50 megabytes
large secret in the keychain


59
00:03:38,956 --> 00:03:42,076
But don't do that because that's
not what the APIs are written


60
00:03:42,136 --> 00:03:45,676
for You can do it, but it will
hurt It will definitely hurt


61
00:03:45,676 --> 00:03:48,436
your program, and it may
hurt the system depending


62
00:03:48,436 --> 00:03:50,826
on the circumstances
So remember,


63
00:03:50,826 --> 00:03:54,226
this is for small secrets
Don't sweat it, you know;


64
00:03:54,226 --> 00:03:56,316
couple hundred bytes is fine,


65
00:03:57,236 --> 00:04:01,586
kilobytes probably fine
Thousands of secrets is fine


66
00:04:01,586 --> 00:04:04,696
as long as you're not trying
to iterate through all of them


67
00:04:04,696 --> 00:04:06,026
and pick them up one at a time


68
00:04:06,026 --> 00:04:08,516
in your program while the
user waits So that's kind


69
00:04:08,516 --> 00:04:11,606
of the environment they we're
here for You can stretch this,


70
00:04:11,926 --> 00:04:17,596
just don't overstretch it
Yeah, and this is the point


71
00:04:17,596 --> 00:04:19,656
where somebody always raises
their finger and says,


72
00:04:19,656 --> 00:04:24,066
"I just write it to a file," you
know "I'll encrypt it myself,"


73
00:04:24,066 --> 00:04:26,176
or "Why do I bother anyway?


74
00:04:26,176 --> 00:04:28,656
I'll use ROT-13," you
know "Nobody's going


75
00:04:28,656 --> 00:04:31,946
to find the data Why should
I call these weird APIs


76
00:04:31,946 --> 00:04:33,146
with their weird
security things?"


77
00:04:35,046 --> 00:04:41,026
Well, the keychain APIs give
you canned access control


78
00:04:41,026 --> 00:04:47,066
Essentially, a predefined way
of determining what programs,


79
00:04:47,726 --> 00:04:50,366
and to a certain extent,
what users get at the secret,


80
00:04:51,836 --> 00:04:56,216
and they give you a way of
controlling how your program


81
00:04:56,216 --> 00:04:59,186
and other programs can share
access to these secrets


82
00:05:00,626 --> 00:05:04,256
If you write your secrets
to a file, then anybody


83
00:05:04,256 --> 00:05:06,456
who gets a hold of the
file has the secret I mean,


84
00:05:06,456 --> 00:05:07,476
they may not know where to look


85
00:05:07,476 --> 00:05:08,756
but eventually they'll
figure it out,


86
00:05:08,756 --> 00:05:14,816
and that's not good Plain
files, there is many,


87
00:05:14,816 --> 00:05:18,046
many ways of scanning
for files in the system


88
00:05:18,276 --> 00:05:22,666
And I don't just mean on OS X
There's ways of finding files


89
00:05:22,666 --> 00:05:28,646
in iOS by Jailbreak or
other ways And besides,


90
00:05:28,646 --> 00:05:31,016
when you start manipulating
this data yourself --


91
00:05:31,406 --> 00:05:33,766
you copy it around, you write it
to a file, you fetch it back -


92
00:05:34,306 --> 00:05:36,236
every time you make a
copy, there's another place


93
00:05:36,236 --> 00:05:41,636
where the secret sits, and once
you lose control of a secret,


94
00:05:41,716 --> 00:05:44,566
once it goes to places where
you didn't realize it was going,


95
00:05:44,566 --> 00:05:45,766
there's no way of
getting it back


96
00:05:46,706 --> 00:05:51,196
because you just wrote
it there Keychain is


97
00:05:51,336 --> 00:05:54,466
about doing the cryptography
right without you having


98
00:05:54,466 --> 00:05:59,386
to think about it And believe me
This is hard It really is very


99
00:05:59,386 --> 00:06:03,486
hard And it's not typically
what you want to spend your time


100
00:06:03,486 --> 00:06:05,606
on So that's why you want


101
00:06:05,606 --> 00:06:09,396
to bother using the
keychain The less code,


102
00:06:09,396 --> 00:06:15,676
the better So let's start
with the minimum kind


103
00:06:15,706 --> 00:06:18,646
of code you can get away with
if your needs are simple --


104
00:06:18,916 --> 00:06:19,916
you want to store a password,


105
00:06:19,916 --> 00:06:23,796
you want to store a PIN You
can create a keychain item,


106
00:06:23,796 --> 00:06:26,446
which is an entry in this
database that is the keychain,


107
00:06:26,446 --> 00:06:30,856
with a single API call it's
called SecItemAdd It's a core


108
00:06:30,856 --> 00:06:34,106
foundation level API, so
you pass it a CFDictionary


109
00:06:34,596 --> 00:06:37,856
but we're all rather happier
with writing Objective-C code


110
00:06:37,916 --> 00:06:42,156
so I wrote you the sample
code in Objective-C Basically,


111
00:06:42,156 --> 00:06:44,896
what you do is, you make up a
dictionary, you stick in all


112
00:06:44,896 --> 00:06:47,716
of the attributes that
you want the item to have,


113
00:06:48,056 --> 00:06:49,826
you stick in the
value, you say go,


114
00:06:50,506 --> 00:06:54,346
and it goes It returns an
OS status, and you always,


115
00:06:54,346 --> 00:06:55,806
always check the OS status


116
00:06:55,806 --> 00:06:59,426
of course You would never even
think of ignoring an error code


117
00:07:00,166 --> 00:07:06,846
And that's it If the call
returns no error, zero,


118
00:07:07,036 --> 00:07:08,706
then it worked You now
have a keychain item,


119
00:07:10,056 --> 00:07:11,846
and you don't have to
worry about protecting it


120
00:07:11,846 --> 00:07:14,666
because that's what
the API's for Okay


121
00:07:14,666 --> 00:07:15,826
So how do you get it back?


122
00:07:16,106 --> 00:07:22,476
Oh, one note Just like any
good database, it has a notion


123
00:07:22,836 --> 00:07:26,686
of uniquely identifying items
In the case of these kinds


124
00:07:26,686 --> 00:07:29,346
of items, that's the
service attribute


125
00:07:29,546 --> 00:07:31,996
and the account attribute
And if you're trying


126
00:07:31,996 --> 00:07:35,446
to create another item with the
same service and account values,


127
00:07:35,476 --> 00:07:39,296
it will not work because
these are unique So one


128
00:07:39,296 --> 00:07:42,266
of the errors you can get
back from SecItemAdd is,


129
00:07:42,396 --> 00:07:44,036
this item already
exists so I'm not going


130
00:07:44,036 --> 00:07:49,116
to make you another one So
keep that in mind Uniquing Okay


131
00:07:49,186 --> 00:07:53,266
So this is how you get it
back SecItemCopyMatching,


132
00:07:53,926 --> 00:07:56,926
which is literally what this
does Let me give you a bag


133
00:07:56,926 --> 00:07:59,986
of attributes and I'll
match that against items


134
00:07:59,986 --> 00:08:03,416
in the keychain and I'll give
you back the matching value


135
00:08:04,426 --> 00:08:08,756
So this is the same
dictionary that you passed in,


136
00:08:09,526 --> 00:08:11,126
with the same attributes,


137
00:08:11,666 --> 00:08:16,146
service attribute an account
attribute You typically pass


138
00:08:16,146 --> 00:08:17,566
in "return data", that is,


139
00:08:17,566 --> 00:08:21,626
give me the value You can also
get back references to items


140
00:08:21,626 --> 00:08:24,326
that let you manipulate the
items themselves And, again,


141
00:08:24,326 --> 00:08:25,546
you check the error code,


142
00:08:25,546 --> 00:08:29,716
it gives you back the value
These values, by the way,


143
00:08:29,716 --> 00:08:33,476
are datas They're not strings Of
course, you know, secrets come


144
00:08:33,476 --> 00:08:36,785
in many different shapes and
forms so keep that one in mind


145
00:08:38,905 --> 00:08:42,356
And that's basically the
tools you have to work


146
00:08:42,356 --> 00:08:45,456
with You can create an item
You can get the value back,


147
00:08:45,456 --> 00:08:48,646
you know Sometimes
it's convenient


148
00:08:48,646 --> 00:08:51,086
to do the other two things
that you typically do


149
00:08:51,086 --> 00:08:55,446
with databases You can change
an existing item That's done


150
00:08:55,446 --> 00:08:59,176
with SecItemUpdate This one
actually takes two dictionaries


151
00:08:59,236 --> 00:09:02,226
because it's sort of a
combination of a lookup


152
00:09:02,226 --> 00:09:06,076
and a creation; so it takes
one dictionary that you use


153
00:09:06,076 --> 00:09:09,176
to find the item you want to
update, and another dictionary


154
00:09:09,176 --> 00:09:10,136
with all of the stuff you want


155
00:09:10,136 --> 00:09:12,556
to change It's really
quite straightforward


156
00:09:13,476 --> 00:09:15,906
And we have a call for
deleting, which, again,


157
00:09:15,906 --> 00:09:18,876
you pass a dictionary saying
which item you want to delete


158
00:09:18,876 --> 00:09:23,746
and off it goes and deletes it
Always check your error codes


159
00:09:23,826 --> 00:09:28,096
And there you have it: Keychain
APIs That's all you need to know


160
00:09:28,646 --> 00:09:32,706
When you want to change an
item, a lot of people fall


161
00:09:32,706 --> 00:09:34,896
into that one, really
change the item,


162
00:09:34,896 --> 00:09:39,606
use SecItemUpdate It's sometimes
tempting to go, "Yeah, well,


163
00:09:39,606 --> 00:09:43,806
I'll just delete the old item
I'll make a new one Who's going


164
00:09:44,826 --> 00:09:45,666
to notice?"


165
00:09:45,796 --> 00:09:50,376
Programs will notice because
there are attributes to items


166
00:09:50,656 --> 00:09:52,456
that you may not actually
know about There are --


167
00:09:52,456 --> 00:09:54,586
there may be attributes
to items that don't exist


168
00:09:54,586 --> 00:09:56,396
yet because we'll invent
them in the next version


169
00:09:56,396 --> 00:09:59,756
of the operating system
If you delete an item,


170
00:09:59,826 --> 00:10:04,066
you're throwing everything about
it away You forget about it,


171
00:10:04,066 --> 00:10:06,616
and then you make a new one
and it gets default values


172
00:10:06,616 --> 00:10:07,806
for stuff you don't specify,


173
00:10:07,996 --> 00:10:10,366
and this may not actually
be the same values


174
00:10:10,366 --> 00:10:13,356
that the old item had; so
don't do that If you need


175
00:10:13,356 --> 00:10:17,246
to change an existing keychain
item, use SecItemUpdate


176
00:10:17,886 --> 00:10:23,126
because that way, you
keep the stuff And --


177
00:10:23,626 --> 00:10:26,126
well, if you're in a situation


178
00:10:26,126 --> 00:10:29,346
where you have a
particular place in your UI


179
00:10:29,946 --> 00:10:34,116
where the user gives you
the secret for safekeeping,


180
00:10:35,216 --> 00:10:38,996
then you call SecItemAdd
right there And then


181
00:10:38,996 --> 00:10:40,406
if you have another
place in your code


182
00:10:40,486 --> 00:10:44,106
where you know now you need it,
you call SecItemCopyMatching,


183
00:10:44,366 --> 00:10:47,986
and these calls are
all you need But a lot


184
00:10:47,986 --> 00:10:52,186
of times that's not really
what you want to do A lot


185
00:10:52,186 --> 00:10:54,156
of times you start
to write your program


186
00:10:54,226 --> 00:10:56,946
and it goes something
like, oh, I need to connect


187
00:10:56,946 --> 00:10:59,446
to that website Oh, wait
He says I need a password,


188
00:10:59,446 --> 00:11:01,326
so let's go ask the
user about the password,


189
00:11:01,726 --> 00:11:05,016
pop up a dialog or, you
know, something like that,


190
00:11:05,206 --> 00:11:07,686
and the user types
in the password,


191
00:11:07,686 --> 00:11:09,546
you send it to the
website, and that's great


192
00:11:09,546 --> 00:11:12,316
until it happens again and
you ask the user again So, no,


193
00:11:12,316 --> 00:11:15,076
wait I heard this is keychain,
so let's use that keychain


194
00:11:15,076 --> 00:11:18,586
to remember the thing that the
user gave me I call this the


195
00:11:18,586 --> 00:11:23,096
"memory work flow" because it's
really not a store and retrieve


196
00:11:23,156 --> 00:11:25,236
from the user's perspective
The user just want


197
00:11:25,236 --> 00:11:27,446
to remember something
he's already told you once


198
00:11:28,696 --> 00:11:32,016
And this happens often enough
that I wrote up a little bit


199
00:11:32,016 --> 00:11:36,816
of pseudo code just to get you
started with it What you do


200
00:11:36,816 --> 00:11:39,136
in a situation where, oh,
suddenly I need a password,


201
00:11:39,616 --> 00:11:41,746
is the first thing you do is
you look it up in the keychain


202
00:11:41,936 --> 00:11:45,556
in case it's already
there And if that worked,


203
00:11:45,616 --> 00:11:49,686
if the keychain retrieval
succeeds, you just take this


204
00:11:49,686 --> 00:11:52,066
and you use it and you don't
bother the user That's,


205
00:11:52,066 --> 00:11:56,066
after all, the whole point
of this If you don't find it


206
00:11:56,066 --> 00:11:58,366
in the keychain, then go
off and ask the user --


207
00:11:59,956 --> 00:12:01,896
this may be the first
time or, you know,


208
00:12:02,076 --> 00:12:04,246
something may have
happened to the keychain --


209
00:12:04,366 --> 00:12:07,876
and the user gives you the
password and you try it out,


210
00:12:07,876 --> 00:12:09,956
and if it works, then you
stick it in the keychain


211
00:12:09,956 --> 00:12:13,726
with SecItemAdd so that the
next time when you're running


212
00:12:13,726 --> 00:12:16,346
through the same code flow,
you're hitting the copy matching


213
00:12:16,346 --> 00:12:19,586
at the top and you don't
ask the user again This is


214
00:12:19,586 --> 00:12:20,456
about as straightforward


215
00:12:20,456 --> 00:12:24,276
as it can go The password
you retrieved or the password


216
00:12:24,276 --> 00:12:27,586
that the user gave you may not
actually work The user may have


217
00:12:27,616 --> 00:12:30,166
mistyped it or it may
have been changed;


218
00:12:30,796 --> 00:12:34,656
so you do need code for,
well, that didn't work


219
00:12:35,586 --> 00:12:37,956
And give a little bit of
thought to what you do


220
00:12:37,956 --> 00:12:44,406
when it didn't work Try it first
before you store in the keychain


221
00:12:45,266 --> 00:12:46,396
If it didn't work --


222
00:12:46,396 --> 00:12:49,536
the keychain item you've
retrieved didn't work


223
00:12:49,536 --> 00:12:50,826
and you ask the user
for a new one,


224
00:12:51,026 --> 00:12:54,936
try that one before you go off
and replace it in the keychain


225
00:12:55,056 --> 00:12:58,576
But it's basically your workflow
I didn't put a loop in here


226
00:12:58,576 --> 00:13:01,386
If you want to keep asking
the user three times,


227
00:13:01,386 --> 00:13:04,476
as many of you want, you
know, just add the code,


228
00:13:04,676 --> 00:13:08,286
the obvious code, but that's
basically the idea This is how


229
00:13:08,286 --> 00:13:11,956
to just remember stuff for the
user The only thing the user


230
00:13:11,956 --> 00:13:15,666
notices is that you don't
keep asking the same question,


231
00:13:15,876 --> 00:13:21,276
which is kind of the Apple
thing Couple things to think


232
00:13:21,276 --> 00:13:24,296
about when you build
this workflow: As I said,


233
00:13:25,136 --> 00:13:27,446
don't store a password until
you have some assurance


234
00:13:27,446 --> 00:13:31,256
that it works; It's kind
of silly to store something


235
00:13:31,256 --> 00:13:35,976
that turns out not to be the
right secret If you can at all,


236
00:13:35,976 --> 00:13:40,066
when you try out this password,
this secret, this PIN, whatever,


237
00:13:41,296 --> 00:13:45,026
try to distinguish between
this is the wrong password


238
00:13:45,326 --> 00:13:49,346
and this didn't work There
are programs out there --


239
00:13:49,346 --> 00:13:51,606
and I am trying really
hard not to mention them --


240
00:13:52,216 --> 00:13:55,386
whose response to
network problems is, oh,


241
00:13:55,386 --> 00:13:56,686
that password didn't
work I'll delete it


242
00:13:56,686 --> 00:13:58,216
from the keychain
There Aren't you happy?


243
00:13:59,026 --> 00:14:03,716
No Try to distinguish between
a environmental problems,


244
00:14:03,966 --> 00:14:07,016
which basically means you don't
know if the password worked


245
00:14:07,016 --> 00:14:10,906
because you never got there,
and a perfectly good connection


246
00:14:10,906 --> 00:14:15,266
to a service that tells you no,
no, no, that's not good I don't


247
00:14:15,266 --> 00:14:18,606
like your password If the answer
is "I don't like your password,"


248
00:14:18,686 --> 00:14:20,196
then go ask the user
for a new one,


249
00:14:20,196 --> 00:14:21,946
replace it in the
keychain That's good


250
00:14:22,166 --> 00:14:26,396
If the problem you're having is,
I'm having connectivity problems


251
00:14:26,396 --> 00:14:30,456
or the service down, or if
you're not so totally sure,


252
00:14:30,526 --> 00:14:33,226
when in doubt, leave the
old item in the keychain


253
00:14:34,026 --> 00:14:36,726
because if you're not sure that
it's wrong, it's probably better


254
00:14:36,726 --> 00:14:42,256
to keep it Always keep in mind
that in most environments,


255
00:14:42,256 --> 00:14:45,046
particularly with websites,
there's always another way


256
00:14:45,046 --> 00:14:47,576
of changing the password that
doesn't involve your application


257
00:14:48,676 --> 00:14:52,466
So just because everything
worked fine the last time


258
00:14:52,466 --> 00:14:53,996
doesn't mean it's
going to work today


259
00:14:54,656 --> 00:15:00,806
And ask yourself a little bit
how hard it is for the user


260
00:15:00,806 --> 00:15:05,096
to get the stuff back We
security people like to say


261
00:15:05,096 --> 00:15:08,456
that when doubt, erase
the secret and start over


262
00:15:08,636 --> 00:15:12,706
and that's a very good security
rule And if this is a password


263
00:15:12,706 --> 00:15:14,726
that the user probably remembers


264
00:15:14,726 --> 00:15:18,096
and you're just doing
some convenience for him,


265
00:15:18,096 --> 00:15:20,226
then that's good When it
doubt, throw it out --


266
00:15:20,226 --> 00:15:23,676
ask the user But if that happens
to be a password that they have


267
00:15:23,676 --> 00:15:25,966
to get out of their safe and
read it off of a piece of paper


268
00:15:25,966 --> 00:15:28,636
because it's some highly
valuable recovery password,


269
00:15:29,326 --> 00:15:32,416
then maybe you want to
err on the side of keep it


270
00:15:32,416 --> 00:15:35,336
in the keychain unless you're
totally sure that it's wrong


271
00:15:37,806 --> 00:15:40,666
And in all of these
keychain workflows,


272
00:15:42,266 --> 00:15:46,046
have a way to continue working
if everything falls apart


273
00:15:46,516 --> 00:15:49,356
If the keychain APIs just give
you these mysterious error codes


274
00:15:49,356 --> 00:15:53,266
that you've never seen before,
don't just splat on the user


275
00:15:53,266 --> 00:15:54,996
and say, you can't
have your website,


276
00:15:54,996 --> 00:15:57,806
you can't have your
service Always fall back


277
00:15:57,806 --> 00:16:01,106
when everything else fails on
ask the user for the secret


278
00:16:01,106 --> 00:16:04,546
and then feed it out to the
service That's your last


279
00:16:04,546 --> 00:16:07,776
defense; if you build your
workflow, that's always


280
00:16:07,776 --> 00:16:14,546
where you want to end up
if everything else fails.


281
00:16:14,546 --> 00:16:14,736
[ Pause ]


282
00:16:14,736 --> 00:16:20,166
I told you that a keychain item
has a value and attributes,


283
00:16:20,546 --> 00:16:23,366
or metadata Now,
this is important


284
00:16:24,266 --> 00:16:27,206
because it's really the
value we are protecting


285
00:16:27,206 --> 00:16:31,276
with our high-grade
cryptographic munitions The


286
00:16:31,276 --> 00:16:35,346
attributes are what we use to
find stuff with, and that means


287
00:16:35,346 --> 00:16:38,206
that they can't be that
secret, because, after all,


288
00:16:38,206 --> 00:16:41,216
you can look them up in
the keychain to find items


289
00:16:41,516 --> 00:16:45,336
So anything that you want
to store for the user


290
00:16:45,336 --> 00:16:48,576
that the user thinks is a
secret, that the user wants


291
00:16:48,576 --> 00:16:51,466
to keep a secret, needs to
go into the item value not


292
00:16:51,466 --> 00:16:55,946
into attributes Now,
obviously, if it's a password,


293
00:16:55,946 --> 00:16:58,826
it goes in the value If it's
a PIN, it goes in the value


294
00:17:00,186 --> 00:17:02,606
If it's their name,


295
00:17:03,376 --> 00:17:05,986
it's probably not a secret
It's a good thing to use


296
00:17:05,986 --> 00:17:10,215
as an attribute But sometimes
this is a little bit not


297
00:17:10,306 --> 00:17:16,616
so clear Security people tend to
think of account numbers as not


298
00:17:16,616 --> 00:17:18,556
as secret Social
Security numbers;


299
00:17:18,556 --> 00:17:22,215
let's take a Social Security
number We all know it's not a


300
00:17:22,215 --> 00:17:25,006
secret, and it's pretty easy


301
00:17:25,006 --> 00:17:26,955
to find somebody's
Social Security number


302
00:17:27,616 --> 00:17:32,556
But there are banks and there
are lots of companies who think


303
00:17:32,556 --> 00:17:35,306
that knowing somebody's Social
Security number actually makes a


304
00:17:35,306 --> 00:17:39,456
difference and proves something;
so there is a lot of users


305
00:17:39,456 --> 00:17:43,126
out there who think that
their Social Security number,


306
00:17:43,126 --> 00:17:45,736
if you happen to store
it, should be a secret


307
00:17:46,996 --> 00:17:49,666
So you probably want to make
it a secret and not use it


308
00:17:49,736 --> 00:17:52,406
as an attribute Same thing
with credit card numbers:


309
00:17:52,956 --> 00:17:55,556
Credit card numbers are not
really very good secrets,


310
00:17:56,466 --> 00:18:00,246
but strangely enough, a
lot of banks seem to think


311
00:18:00,246 --> 00:18:04,406
that they should be
So think a little bit


312
00:18:04,406 --> 00:18:07,526
about how you are identifying
your keychain items,


313
00:18:07,526 --> 00:18:09,426
because in the end,
in order to find them,


314
00:18:09,936 --> 00:18:13,026
you need to give them attributes
that make them easy to find;


315
00:18:14,126 --> 00:18:15,476
otherwise, you know, you'll end


316
00:18:15,476 --> 00:18:18,086
up with your keychain
being a write once store


317
00:18:18,086 --> 00:18:24,076
and you can't ever get it
back out So if you can come


318
00:18:24,076 --> 00:18:29,086
up with something that you and
the user agree is pretty obvious


319
00:18:29,686 --> 00:18:32,096
and a public identification
of the user


320
00:18:32,346 --> 00:18:33,636
and what the user's
trying to do,


321
00:18:33,636 --> 00:18:38,336
then use that If you have a hard
time coming up with something


322
00:18:38,336 --> 00:18:41,736
that you don't think some user
will think is a disclosure


323
00:18:42,076 --> 00:18:46,266
of dangerous proportions,
your fall back is to make


324
00:18:46,266 --> 00:18:49,106
up something If you can't
think up anything else,


325
00:18:49,106 --> 00:18:53,116
generate a UUID, use that as
a key Of course, then you need


326
00:18:53,116 --> 00:18:55,306
to store that, but
since it's an identifier


327
00:18:55,306 --> 00:18:57,476
that you're only using to
identify the keychain item,


328
00:18:57,476 --> 00:19:00,486
you can just store that
in a key value attribute


329
00:19:00,716 --> 00:19:03,396
in your cloud storage, or in
your file if you're so inclined


330
00:19:04,266 --> 00:19:07,546
So that's your way out of
the "I don't have anything


331
00:19:07,616 --> 00:19:09,116
to tag my keychain items with."


332
00:19:10,186 --> 00:19:11,726
In the end, you can
make something


333
00:19:13,206 --> 00:19:18,526
up This is not really keychain
specific but it's something


334
00:19:18,526 --> 00:19:22,106
that we always tell you The
whole point of having secrets is


335
00:19:22,156 --> 00:19:26,006
that you don't leak
them; so retrieve them


336
00:19:26,006 --> 00:19:30,566
from the keychain right when
you need them, use them,


337
00:19:30,976 --> 00:19:35,196
and then throw them away Do not
keep your secrets in a variable


338
00:19:35,196 --> 00:19:39,246
in memory; do not write your
secrets to a file because it was


339
00:19:39,296 --> 00:19:42,056
so annoying to get them out of
the keychain in the first place;


340
00:19:43,866 --> 00:19:47,356
and do not send them to your
buddy, the helpful XPC service


341
00:19:47,356 --> 00:19:48,746
for the helpful daemon
to hold them


342
00:19:48,746 --> 00:19:52,136
for you The whole keychain
workflow is based on,


343
00:19:52,306 --> 00:19:55,846
just get it, use it, throw it
out Let the keychain hold it


344
00:19:55,846 --> 00:19:58,216
for any time when you don't
actively use the secret


345
00:19:58,716 --> 00:20:04,036
And that's basically all
you need to know in order


346
00:20:04,036 --> 00:20:07,946
to use keychains as
a high-level service


347
00:20:09,306 --> 00:20:12,976
on Apple products Everything
I've told you so far is true


348
00:20:12,976 --> 00:20:18,216
on iOS and OS X Everything I've
told you so far works on both


349
00:20:19,286 --> 00:20:21,926
That is good That's a
really good argument


350
00:20:21,926 --> 00:20:23,696
for using just what
I told you so far


351
00:20:24,956 --> 00:20:30,086
because it works You don't have
to worry about it But, well,


352
00:20:30,086 --> 00:20:33,956
okay Maybe you want to know a
little bit more So let's talk


353
00:20:33,956 --> 00:20:43,196
about iOS first The SecItem APIs
that I told you about are going


354
00:20:43,196 --> 00:20:45,426
to serve you well on iOS
because they're the only API


355
00:20:45,426 --> 00:20:52,956
that is there, so cool If you
store a keychain item on iOS,


356
00:20:54,336 --> 00:21:03,106
it is secured, cryptographically
secured, by the user And by


357
00:21:03,106 --> 00:21:06,906
that we mean, by the PIN or
password that the user enters


358
00:21:06,906 --> 00:21:11,236
to unlock the device That's how
the off-line protection thing


359
00:21:11,236 --> 00:21:15,086
works: If somebody steals
your phone and walks away


360
00:21:15,086 --> 00:21:19,526
with it and, you know, does a
big storage dump of the phone,


361
00:21:19,526 --> 00:21:23,916
if they don't know your passcode
and your phone wasn't jailbroken


362
00:21:23,916 --> 00:21:28,656
to begin with when you lost
it, there is no shortcut other


363
00:21:28,656 --> 00:21:31,566
than brute force attack to
actually get your secrets


364
00:21:31,566 --> 00:21:38,566
out of the keychain You can also
connect keychain items on iOS


365
00:21:38,656 --> 00:21:42,876
to the particular hardware
platform to the instance


366
00:21:42,876 --> 00:21:46,616
of device, which means that it's
also cryptographically linked


367
00:21:46,686 --> 00:21:50,046
to a secret that is embedded --


368
00:21:50,046 --> 00:21:55,786
baked into your particular phone
That's a cool feature, because,


369
00:21:55,906 --> 00:21:59,166
well, it means you can
make secrets that belong


370
00:21:59,166 --> 00:22:07,366
to this particular phone and
non other, and the user On iOS,


371
00:22:07,966 --> 00:22:11,296
by default, if you just use
the calls that I showed you,


372
00:22:11,296 --> 00:22:17,646
a keychain item is totally bound
to the application that made it;


373
00:22:18,836 --> 00:22:24,126
so if you write a app and you
call SecItemAdd, no other app


374
00:22:24,246 --> 00:22:28,566
in the universe can
see that item On iOS,


375
00:22:28,686 --> 00:22:29,486
this is done totally


376
00:22:29,486 --> 00:22:33,416
by visibility You basically just
don't see keychain items made


377
00:22:33,416 --> 00:22:37,426
by other applications On the
other hand, if you can see it


378
00:22:37,606 --> 00:22:39,916
and the user has, you
know, unlocked their phone,


379
00:22:39,916 --> 00:22:41,166
then you can actually get them


380
00:22:41,546 --> 00:22:45,706
So this is the fundamental
access control that we're having


381
00:22:45,706 --> 00:22:48,396
on iOS And that's cool
unless, of course,


382
00:22:48,396 --> 00:22:52,036
you want to make a family of
three apps the share a secret --


383
00:22:52,036 --> 00:22:56,646
it's been known to happen --
so we have a way of doing that


384
00:22:56,646 --> 00:23:01,376
And the way you do it is you add
an entitlement It's called the


385
00:23:01,376 --> 00:23:03,666
Keychain-Access-Groups
Entitlement,


386
00:23:03,856 --> 00:23:08,636
and it's basically just a name
that the different apps agree on


387
00:23:08,636 --> 00:23:11,406
and that is used as
a rendezvous point


388
00:23:12,056 --> 00:23:14,786
If you are storing
a keychain item


389
00:23:14,826 --> 00:23:18,726
under a particular
keychain access group name,


390
00:23:19,136 --> 00:23:21,526
then all the applications
that have this entitlement


391
00:23:21,526 --> 00:23:23,596
with that value have access


392
00:23:23,596 --> 00:23:26,216
to the item This is how
you share Obviously,


393
00:23:26,216 --> 00:23:30,956
this is an entitlement so
you can set it up in Xcode


394
00:23:30,956 --> 00:23:35,206
when you build your app And it
wouldn't be much of security


395
00:23:35,206 --> 00:23:37,706
if you could share
it with everybody,


396
00:23:38,366 --> 00:23:40,686
so there are some
restrictions that guarantee


397
00:23:40,686 --> 00:23:44,836
that somebody else will
not come along and say,


398
00:23:44,906 --> 00:23:47,406
"I'll share that with you."


399
00:23:47,406 --> 00:23:55,336
The basic restriction is that
the keychain access group names,


400
00:23:55,716 --> 00:23:59,596
in order to be acceptable
to the store, needs to start


401
00:23:59,596 --> 00:24:02,806
with your team ID So all of
these names are teamID, dot,


402
00:24:02,806 --> 00:24:05,516
and then make up something
What this practically means,


403
00:24:05,516 --> 00:24:08,486
of course, is you get to share
whatever you want with yourself,


404
00:24:08,486 --> 00:24:10,936
with your own apps, between
your apps You just don't get


405
00:24:10,936 --> 00:24:14,276
to share them with somebody
else's app Not by accident


406
00:24:14,276 --> 00:24:18,576
and also not on purpose You
just can't Whereby can't,


407
00:24:18,666 --> 00:24:21,066
I mean that you can
build the app like that


408
00:24:21,066 --> 00:24:27,196
but the store take it And if you
are sending out ad hoc copies


409
00:24:27,356 --> 00:24:29,616
of your app to your friends,


410
00:24:30,066 --> 00:24:32,116
you would need a
provisioning profile,


411
00:24:32,116 --> 00:24:34,116
and the provisioning
profiles will not allow you


412
00:24:34,116 --> 00:24:39,006
to have this entitlement So
basically, you can't You get


413
00:24:39,006 --> 00:24:40,976
to share with yourself
between your own apps


414
00:24:41,116 --> 00:24:45,476
and that's all the
sharing you get


415
00:24:45,696 --> 00:24:49,646
In Xcode there's
this little section


416
00:24:49,646 --> 00:24:51,856
in the general configuration


417
00:24:51,856 --> 00:24:54,576
of your app called
keychain Basically,


418
00:24:54,576 --> 00:24:58,596
that's what you add it The
bundle ID of your app acts


419
00:24:58,656 --> 00:25:00,746
as essentially a
keychain access group;


420
00:25:01,086 --> 00:25:04,176
so by default you're only
sharing yourself What you do is


421
00:25:04,176 --> 00:25:07,406
you add another value
there and you start sharing


422
00:25:07,406 --> 00:25:09,106
with other apps that
have the same value there


423
00:25:09,686 --> 00:25:10,836
If you're ever wondering


424
00:25:10,836 --> 00:25:14,636
about whether your app actually
has an entitlement like that,


425
00:25:14,766 --> 00:25:16,976
there is the good old
codesign command Of course,


426
00:25:16,976 --> 00:25:20,866
you have to run it on OS X Just
ask it to display entitlements


427
00:25:20,866 --> 00:25:22,436
and you'll get back the plist


428
00:25:22,436 --> 00:25:29,006
that contains your keychain
access groups entitlement You've


429
00:25:30,536 --> 00:25:33,606
probably heard of data
protection I certainly hope


430
00:25:33,606 --> 00:25:37,156
you've heard of data
protection That's iOS's way


431
00:25:37,576 --> 00:25:43,366
of classifying data as to when
it becomes available And one


432
00:25:43,366 --> 00:25:45,446
of the attributes
you can specify


433
00:25:45,446 --> 00:25:49,326
when you create item is its
data protection class So, yes,


434
00:25:49,326 --> 00:25:53,536
each item can have a different
data protection class The


435
00:25:53,536 --> 00:25:58,006
default, if you don't say
anything, is this line,


436
00:25:58,316 --> 00:26:01,876
so you don't have to specify
but you can What that means is


437
00:26:01,876 --> 00:26:04,216
that keychain items
can be retrieved


438
00:26:04,666 --> 00:26:08,556
when the phone is unlocked,
which is kind of what you want


439
00:26:08,806 --> 00:26:12,906
If the phone is locked,
well, your code's not running


440
00:26:13,356 --> 00:26:17,086
and then the user loses the
phone and user's very happy


441
00:26:17,086 --> 00:26:20,296
that the keychain item is
not accessible Of course,


442
00:26:20,626 --> 00:26:22,736
if there happens to be a
way of running your app


443
00:26:22,736 --> 00:26:25,266
in the background, as I've
heard maybe there might be,


444
00:26:26,116 --> 00:26:29,666
and you want your app to have
access to a keychain item,


445
00:26:29,706 --> 00:26:33,236
even though the phone's locked
because the user locked it


446
00:26:33,236 --> 00:26:37,136
and walked away, then you
need to weaken the protection


447
00:26:37,316 --> 00:26:40,556
of the item and specify


448
00:26:40,556 --> 00:26:44,286
after first unlock What
this basically means is


449
00:26:44,456 --> 00:26:47,656
that the item is
still not accessible


450
00:26:47,656 --> 00:26:49,636
if the phone got
rebooted or powered off,


451
00:26:50,216 --> 00:26:52,456
but after the user
unlocked it at least once,


452
00:26:52,456 --> 00:26:55,256
even if he locks it after that,
the item is still available


453
00:26:56,026 --> 00:26:57,856
So if you do need
to access an item


454
00:26:58,256 --> 00:27:02,296
from a background activity while
the user is not using the phone,


455
00:27:02,706 --> 00:27:04,866
this is what you need to
specify when you make the item


456
00:27:05,246 --> 00:27:08,126
But don't do that unless
that's a situation you're


457
00:27:08,126 --> 00:27:12,556
in because it means that your
item is protected less well It


458
00:27:12,556 --> 00:27:17,996
means that if the user loses his
phone and the thief walks away


459
00:27:18,376 --> 00:27:22,846
and manages to bypass the
lock screen, they might get


460
00:27:23,976 --> 00:27:30,006
at the item If you
are in a situation


461
00:27:30,006 --> 00:27:36,346
where you have background
activity that you need to do


462
00:27:36,346 --> 00:27:38,186
because it's part
of your feature set


463
00:27:38,236 --> 00:27:39,436
because it's really cool


464
00:27:39,436 --> 00:27:42,016
that your code is doing stuff
while the user isn't around,


465
00:27:42,476 --> 00:27:46,346
and you're uncomfortable with
taking the primary password


466
00:27:46,346 --> 00:27:50,336
of the user, the primary secret,
the one that you're safekeeping


467
00:27:50,336 --> 00:27:52,226
for him, and sticking it into


468
00:27:52,226 --> 00:27:55,886
and after first unlock protected
item There's a trick you can use


469
00:27:55,976 --> 00:27:59,586
sometimes, and that is to do
what we call "derive secrets."


470
00:28:00,196 --> 00:28:04,056
If you have control over the
service because, let's say,


471
00:28:04,056 --> 00:28:06,196
you're making it, you're
actually running that service


472
00:28:06,196 --> 00:28:12,536
on the Web, you can
authenticate to it with a secret


473
00:28:12,676 --> 00:28:18,306
that is cryptographically
derived from the real password


474
00:28:18,306 --> 00:28:22,496
of the user The advantage
is that then you can store


475
00:28:22,496 --> 00:28:26,046
that derived password in the
less protected keychain item


476
00:28:26,456 --> 00:28:28,516
and if it gets out
for some reason,


477
00:28:30,226 --> 00:28:32,056
your service can be attacked


478
00:28:32,356 --> 00:28:33,766
with the user's derived
password,


479
00:28:33,766 --> 00:28:37,496
but the user's password is
still secure That matters


480
00:28:37,496 --> 00:28:39,416
because users are
so terribly bad


481
00:28:39,416 --> 00:28:42,746
at reusing passwords
That's extra work,


482
00:28:42,746 --> 00:28:45,506
and it's a little bit beyond
the scope of just talking


483
00:28:45,506 --> 00:28:48,876
about keychains, but I thought
I'd mention it because, well,


484
00:28:48,876 --> 00:28:55,976
it matters What happens
when you backup your phone?


485
00:28:56,246 --> 00:28:59,156
Pretty much what you'd expect
Your keychains get backed


486
00:28:59,156 --> 00:29:02,956
up along with the phone as long
as your backups are encrypted --


487
00:29:02,956 --> 00:29:05,326
and all of your backups
are encrypted, right?


488
00:29:06,236 --> 00:29:09,096
You can restore them back onto
the phone and you will get all


489
00:29:09,096 --> 00:29:11,326
of the items back that
were in the keychain


490
00:29:11,326 --> 00:29:12,376
when the backup was made;


491
00:29:12,576 --> 00:29:17,306
so this is totally
seamless it just works Items


492
00:29:17,456 --> 00:29:21,426
that were marked as belonging to
a particular piece of hardware,


493
00:29:21,426 --> 00:29:25,966
to a particular device, can
be restored to that device,


494
00:29:25,966 --> 00:29:29,166
and that will work fine If you
are migrating to another device,


495
00:29:29,656 --> 00:29:33,726
then, by the nature of their
security, they won't come along


496
00:29:34,326 --> 00:29:38,866
So if you are -- if the user
is migrating to another device


497
00:29:39,396 --> 00:29:40,496
and they're restoring a backup,


498
00:29:41,106 --> 00:29:43,156
they will essentially get
a keychain that has all


499
00:29:43,156 --> 00:29:47,516
of the device specific keychain
items missing Be prepared


500
00:29:47,516 --> 00:29:51,796
for these items to disappear in
what seems to be a random moment


501
00:29:51,796 --> 00:29:56,816
in time because the user just
bought a new iPhone something


502
00:29:56,816 --> 00:30:01,646
All right This all
looks perfectly,


503
00:30:01,646 --> 00:30:02,996
so there will be no need


504
00:30:02,996 --> 00:30:07,256
to debug anything
That's a good thing


505
00:30:07,256 --> 00:30:13,946
because here's the bad news:
There is on iOS no tool


506
00:30:14,216 --> 00:30:18,106
for introspecting the keychain
data There is no command line


507
00:30:18,106 --> 00:30:22,916
tool, because where would you
run it; and there is no utility


508
00:30:22,916 --> 00:30:26,066
that has access to all of
the keychain items of all


509
00:30:26,066 --> 00:30:29,906
of the applications on your
phone That's actually a security


510
00:30:29,906 --> 00:30:35,236
feature Remember that the
access control on iOS is based


511
00:30:35,236 --> 00:30:37,906
on you can only see keychain
items made by your app


512
00:30:39,096 --> 00:30:44,346
So if Apple wrote a utility
for inspecting your keychain,


513
00:30:45,166 --> 00:30:47,856
it would only see the
keychain items that it wrote,


514
00:30:48,356 --> 00:30:54,066
which is kind of pointless
So this being the bad news,


515
00:30:54,246 --> 00:30:58,616
the tip is, you need to put
your debugging code inside


516
00:30:58,616 --> 00:31:01,526
of your app because only
code that's running inside


517
00:31:01,526 --> 00:31:03,476
of your app actually can
see the keychain items


518
00:31:03,476 --> 00:31:07,656
that you're having trouble
with You all know how


519
00:31:07,656 --> 00:31:11,376
to put debug code in your
program, and you know,


520
00:31:11,806 --> 00:31:14,526
you know what kind of debug
code you're comfortable


521
00:31:15,696 --> 00:31:20,306
with One thing: If you
actually ship your debug code


522
00:31:20,766 --> 00:31:23,196
in some neat, tricky little --


523
00:31:23,196 --> 00:31:26,316
if you triple tap over there
while holding the phone


524
00:31:26,386 --> 00:31:28,576
sideways, and then a
new debug menu pops up


525
00:31:28,576 --> 00:31:29,726
and you can actually figure


526
00:31:29,726 --> 00:31:32,316
out why the keychains aren't
working, tell App Review


527
00:31:32,666 --> 00:31:34,536
because otherwise they
might get the idea


528
00:31:34,536 --> 00:31:37,016
that you have a secret
feature in your phone


529
00:31:37,016 --> 00:31:38,686
that you don't want
people to know about


530
00:31:38,686 --> 00:31:40,866
and that would be
sad Debugging tip:


531
00:31:42,276 --> 00:31:44,636
When you are passing
these dictionaries


532
00:31:44,716 --> 00:31:47,776
to the keychain APIs,
particularly for Add,


533
00:31:49,146 --> 00:31:56,376
understand that these entries
in those dictionaries fall


534
00:31:56,376 --> 00:32:01,026
into two classes There are the
values that become attributes


535
00:32:01,186 --> 00:32:04,996
and item values They're data
They are stuff that goes


536
00:32:04,996 --> 00:32:10,756
into the item And then there are
other keys that are control keys


537
00:32:10,756 --> 00:32:14,436
that say what you want to
happen Like the storage class


538
00:32:14,516 --> 00:32:20,206
as an example If you
reuse those dictionaries


539
00:32:20,306 --> 00:32:24,416
between the ItemAdd call
and the CopyMatching call


540
00:32:24,416 --> 00:32:29,936
and the Update call be really
careful because all of the keys


541
00:32:29,936 --> 00:32:34,626
in your dictionary may not
all be useful and valuable


542
00:32:34,626 --> 00:32:38,756
on all the API calls It may
actually be safer to make


543
00:32:38,756 --> 00:32:41,166
up these dictionaries
from scratch for each call


544
00:32:42,426 --> 00:32:45,876
And if you run into any problems
where the APIs are yelling


545
00:32:45,876 --> 00:32:47,826
at you and telling you
that you are just having a


546
00:32:47,826 --> 00:32:49,876
"parameter error"@, something


547
00:32:49,876 --> 00:32:51,356
that just doesn't
make any sense other


548
00:32:51,356 --> 00:32:52,826
than I don't know what
you're talking about,


549
00:32:53,586 --> 00:32:57,736
that often means one of
the keys that you passed


550
00:32:57,736 --> 00:33:05,566
in doesn't make a sense here
so And that's it for iOS Hey,


551
00:33:06,186 --> 00:33:10,226
that's great Welcome back
OS X crowd The keychain


552
00:33:10,226 --> 00:33:13,906
on OS X has been
around for much longer,


553
00:33:14,566 --> 00:33:19,496
and we have a lot more API and
a lot more complexity simply


554
00:33:19,496 --> 00:33:22,376
because it's been around that
much longer So let me tell you


555
00:33:22,376 --> 00:33:26,256
about it The SecItem APIs
that I've told you about work


556
00:33:26,556 --> 00:33:30,946
on OS X, and they are what you
-- what we want to use Honestly,


557
00:33:30,996 --> 00:33:35,336
seriously, if you can at all,
please use the SecItem APIs


558
00:33:35,366 --> 00:33:36,456
to work with your keychains


559
00:33:36,876 --> 00:33:40,866
because that's what all the
new work goes If there's a bug


560
00:33:40,866 --> 00:33:42,896
in them, we'll fix it much --


561
00:33:42,896 --> 00:33:47,376
with much more alacrity than
in the older APIs So try


562
00:33:47,376 --> 00:33:50,046
that first There
are some things --


563
00:33:50,046 --> 00:33:51,246
and I'll tell you about them --


564
00:33:52,296 --> 00:33:54,836
that you cannot do with
the SecItem APIs on OS X


565
00:33:54,836 --> 00:33:56,766
and then you'll have
to fall back


566
00:33:56,946 --> 00:34:00,416
on the older APIs we
call SecKeychain APIs


567
00:34:00,416 --> 00:34:05,636
because they are all folded
around the SecKeychain calls


568
00:34:05,796 --> 00:34:09,295
in the API suite These are not
deprecated They are supported


569
00:34:09,295 --> 00:34:13,616
API They are just not where
we're putting the new cool stuff


570
00:34:13,926 --> 00:34:21,656
On OS X a keychain is a file
in the file system Seriously,


571
00:34:22,005 --> 00:34:24,835
if you look in your home
directory in Library Keychains,


572
00:34:24,835 --> 00:34:28,275
there's a file in there, it's
called login.keychain That's


573
00:34:28,275 --> 00:34:35,766
where your secrets sit It's just
a file So just deal with that


574
00:34:36,366 --> 00:34:41,335
That means that standard
file access controls apply


575
00:34:41,505 --> 00:34:45,166
to keychains Your
login.keychain is owned by you,


576
00:34:45,166 --> 00:34:48,636
it's not generally readable
or writable by other users


577
00:34:49,275 --> 00:34:50,846
And if you mess with
permissions,


578
00:34:50,996 --> 00:34:52,856
you can actually mess up access


579
00:34:52,856 --> 00:34:59,846
to your keychain OS X keychains
are cryptographically protected


580
00:34:59,996 --> 00:35:04,006
by the user's login
password Just like on iOS,


581
00:35:04,006 --> 00:35:07,026
they are protected by the
users PIN or, you know,


582
00:35:07,146 --> 00:35:09,996
the password they entered to
unlock the phone; on OS X,


583
00:35:09,996 --> 00:35:12,176
they're protected by the
password the user uses to log


584
00:35:12,176 --> 00:35:19,616
in Makes perfect sense Now,
while on iOS the default is


585
00:35:19,616 --> 00:35:22,196
that there's no sharing and
you have to do a special thing


586
00:35:22,196 --> 00:35:24,496
to start sharing
between applications,


587
00:35:25,246 --> 00:35:31,026
on OS X keychains
-- keychain items


588
00:35:31,026 --> 00:35:34,356
of one user are all visible
to all applications run


589
00:35:34,356 --> 00:35:37,226
by that user Remember,
OS X multiuser files,


590
00:35:37,226 --> 00:35:40,206
Posix permissions, all of
that stuff So OS X sort


591
00:35:40,206 --> 00:35:42,256
of has the reverse
logic: Instead of starting


592
00:35:42,256 --> 00:35:44,856
with you can't even see
any items that aren't yours


593
00:35:44,856 --> 00:35:46,306
and then you'll have
to do special things


594
00:35:46,306 --> 00:35:47,236
to make them visible,


595
00:35:47,976 --> 00:35:50,166
OS X's approach is you
can see all the items made


596
00:35:50,166 --> 00:35:53,606
by all the applications for
that user, and then we put


597
00:35:53,606 --> 00:35:55,626
on controls that determine


598
00:35:55,626 --> 00:35:58,176
which applications
actually are allowed


599
00:35:58,176 --> 00:36:00,946
to retrieve the item
The way this is done is


600
00:36:00,946 --> 00:36:05,126
with access control lists Every
Keychain item on OS X has an ACL


601
00:36:06,506 --> 00:36:09,876
And the ACL says what
applications are allowed


602
00:36:10,286 --> 00:36:16,166
to retrieve the value You set
the ACL when you create the item


603
00:36:16,556 --> 00:36:18,236
If you don't specify
anything in particular,


604
00:36:18,236 --> 00:36:20,846
you'll get pretty much exactly
the behavior you'd expect,


605
00:36:20,846 --> 00:36:22,946
which is that the creating
application is the only one


606
00:36:22,946 --> 00:36:27,166
that is allowed to retrieve the
item So the default behavior


607
00:36:27,166 --> 00:36:29,636
on iOS and OS X is very similar


608
00:36:30,996 --> 00:36:35,716
but the machinery is very
different There are calls


609
00:36:35,776 --> 00:36:37,396
for changing the ACL


610
00:36:37,396 --> 00:36:41,986
of an existing item I do
not recommend you use them


611
00:36:42,506 --> 00:36:44,446
because they are
pretty complicated


612
00:36:45,006 --> 00:36:48,056
and the system will throw
up a dialog to confirm


613
00:36:48,056 --> 00:36:50,096
that you actually
wanted to change the ACL,


614
00:36:50,096 --> 00:36:52,086
which is usually not a
very good user experience


615
00:36:52,726 --> 00:36:57,156
So the 98 percent takeaway
rule is: Create the ACLs right


616
00:36:57,156 --> 00:36:59,206
when you create the item
and then forget about them


617
00:36:59,206 --> 00:37:03,466
So what is in these ACLs
An access control list


618
00:37:03,466 --> 00:37:05,746
on a keychain item
is essentially a list


619
00:37:05,746 --> 00:37:09,336
of applications that are allowed
to access the item As I said,


620
00:37:09,336 --> 00:37:12,466
by default, it's the creating
application, but you can,


621
00:37:12,466 --> 00:37:16,326
when you make the item, make a
list and say, me and that app


622
00:37:16,326 --> 00:37:19,256
over there and that third
app over there; and on OS X,


623
00:37:19,256 --> 00:37:23,216
that doesn't have to be your
own You can, if you want,


624
00:37:23,216 --> 00:37:26,016
create an item and say, "and
Safari has access to this item."


625
00:37:26,296 --> 00:37:27,436
I'm not sure why
you would want to


626
00:37:27,436 --> 00:37:33,066
but you can System does The
APs are SecAccess, SecACL,


627
00:37:33,066 --> 00:37:36,266
and SecTrustedApplication,
if you are unfortunate enough


628
00:37:36,266 --> 00:37:38,956
to have to do this, go
read the documentation,


629
00:37:39,586 --> 00:37:43,856
which is public documentation
on the keychain, and it's,


630
00:37:44,096 --> 00:37:47,136
you know, pretty good actually
Here is one other distinction


631
00:37:48,166 --> 00:37:50,736
that is important
between iOS and OS X:


632
00:37:51,416 --> 00:37:55,736
On iOS if you don't have access
to an item, you don't see it,


633
00:37:55,736 --> 00:37:56,766
you can't do anything with it,


634
00:37:56,766 --> 00:38:00,446
end of story There's just no
discussion On OS X if you're


635
00:38:00,446 --> 00:38:02,936
in an application that
doesn't have access to an item


636
00:38:03,206 --> 00:38:07,316
because it's not on the access
control list and you try anyway,


637
00:38:07,846 --> 00:38:11,326
the system will try to put up a
dialog Now, you've probably seen


638
00:38:11,326 --> 00:38:15,536
that one We lovingly call it
the "rogue application alert"


639
00:38:15,536 --> 00:38:18,166
because it's the system saying,
hey, this program wants access


640
00:38:18,166 --> 00:38:20,916
to the item and I don't think
it should, but do you want


641
00:38:20,916 --> 00:38:23,436
to allow it anyway So on OS X,


642
00:38:23,796 --> 00:38:25,326
the user actually
has the ability


643
00:38:25,326 --> 00:38:29,616
to override your access control
list by saying, yes, I want it


644
00:38:29,706 --> 00:38:32,906
and it's my secret and
he can have it So keep


645
00:38:32,906 --> 00:38:39,076
that in mind There is a
separate keychain file


646
00:38:39,076 --> 00:38:42,906
on OS X that's called the
system keychain It's in /Library


647
00:38:42,906 --> 00:38:48,116
because it belongs to the system
And the system keychain belongs


648
00:38:48,116 --> 00:38:50,936
to the system as a whole It's
a multiuser operating system,


649
00:38:50,936 --> 00:38:54,416
remember If you write
a system daemon


650
00:38:55,116 --> 00:38:59,416
and you use the keychain APIs,
that's where your secrets go


651
00:39:00,706 --> 00:39:02,926
But the system keychain
is actually accessible


652
00:39:03,076 --> 00:39:06,576
to every program in the system
So if you're in a situation


653
00:39:06,576 --> 00:39:10,076
where you need to create a
keychain item that is shared


654
00:39:10,076 --> 00:39:13,396
between users, you
want that secret to go


655
00:39:13,396 --> 00:39:14,376
into the system keychain,


656
00:39:14,376 --> 00:39:17,066
because the system keychain
can be read by every user


657
00:39:17,066 --> 00:39:20,406
on the system That's a
capability that, well,


658
00:39:20,406 --> 00:39:25,826
OS X has Of course, the
system keychain does belong


659
00:39:25,826 --> 00:39:28,466
to the system as a whole,
so asking a user, hey,


660
00:39:28,466 --> 00:39:31,826
do you want this
program to have access


661
00:39:31,826 --> 00:39:34,436
to that system secret
wouldn't be very fair


662
00:39:34,436 --> 00:39:36,966
if the user isn't perhaps
even an administrator;


663
00:39:37,436 --> 00:39:40,226
so if that happens to a
secret in the system keychain,


664
00:39:40,226 --> 00:39:41,776
we're not just asking,
is this okay


665
00:39:41,776 --> 00:39:43,416
to do this We're
actually asking, hey,


666
00:39:43,416 --> 00:39:44,786
prove that you're
an administrator


667
00:39:45,806 --> 00:39:50,376
So the keychain dialog
for overriding ACL control


668
00:39:51,406 --> 00:39:59,356
for the system keychain is an
admin check Let's talk a little


669
00:39:59,356 --> 00:40:03,476
bit more about these prompts
There's a particular error code,


670
00:40:03,536 --> 00:40:08,336
one of the OSStatus values that
can come out of a keychain call,


671
00:40:09,066 --> 00:40:11,596
it's called "user
interaction not allowed."


672
00:40:12,746 --> 00:40:16,646
And a lot of people get
very confused by it; like,


673
00:40:16,646 --> 00:40:17,796
what user interaction?


674
00:40:17,796 --> 00:40:22,146
I did want any user interaction
I just want the item What this


675
00:40:22,176 --> 00:40:26,536
means is, I needed to put up a
dialog to get you what you want


676
00:40:26,536 --> 00:40:29,846
and I couldn't Well, why would
the system put up a dialog?


677
00:40:29,846 --> 00:40:33,676
We've already had one situation
If the application isn't


678
00:40:33,706 --> 00:40:37,476
on the ACL approved
list, if it's an intruder


679
00:40:37,476 --> 00:40:40,376
and an interloper that
is trying to get an item


680
00:40:40,446 --> 00:40:44,146
that the ACL says it shouldn't
have, system tries to put


681
00:40:44,146 --> 00:40:48,286
up a dialog The other
situation is for keychains


682
00:40:48,396 --> 00:40:52,106
that are not actually at the
moment unlocked Remember,


683
00:40:52,106 --> 00:40:54,116
I told you that the
cryptographic protection


684
00:40:54,116 --> 00:40:56,776
of a keychain is based on
the user's login password?


685
00:40:57,506 --> 00:41:01,466
When you log in through the
standard OS X login screen,


686
00:41:01,796 --> 00:41:04,376
the password you type in
that allows you to log


687
00:41:04,376 --> 00:41:06,146
into the system is also used


688
00:41:06,286 --> 00:41:10,846
to unlock the user's keychain
The passwords are in sync


689
00:41:10,846 --> 00:41:12,816
As a matter of fact, when
you change your pass --


690
00:41:12,816 --> 00:41:16,366
your login password, it actually
changes the cryptographically


691
00:41:16,496 --> 00:41:22,816
secured password on the login
keychain at the same time


692
00:41:23,046 --> 00:41:24,406
So it's always unlocked, right?


693
00:41:25,336 --> 00:41:27,366
So why would the system
ever need to ask for it?


694
00:41:27,706 --> 00:41:30,156
Because there are
preferences for paranoid people


695
00:41:30,156 --> 00:41:33,126
where you can actually say
that you want your keychain


696
00:41:33,676 --> 00:41:39,516
to lock automatically after
inactivity And some people turn


697
00:41:40,416 --> 00:41:44,746
that on Yeah, I do
At which point


698
00:41:44,746 --> 00:41:47,736
if you then asking the
keychain API for an item


699
00:41:48,236 --> 00:41:50,726
and the keychain is locked at
this point, the system will put


700
00:41:50,726 --> 00:41:53,206
up a dialog and say, Could you
please enter that password again


701
00:41:53,206 --> 00:41:54,026
because you're paranoid?


702
00:41:54,686 --> 00:41:58,506
Which is fine as long
as this dialog can come


703
00:42:00,546 --> 00:42:04,246
up If your program is not
running in a graphic context,


704
00:42:05,326 --> 00:42:08,406
meaning, if it doesn't
have the ability to put


705
00:42:08,406 --> 00:42:12,526
up standard CocoaDialogs,
the system knows that --


706
00:42:12,526 --> 00:42:16,086
the keychain system knows
that, and in any situation


707
00:42:16,086 --> 00:42:18,206
where it's trying to put up
a dialog on your behalf --


708
00:42:18,206 --> 00:42:21,476
from the user's behalf and it
can't, instead the call fails


709
00:42:21,476 --> 00:42:22,706
and that's the error
code you're getting --


710
00:42:22,706 --> 00:42:26,586
user interaction not allowed I
was trying to talk to the user


711
00:42:26,586 --> 00:42:29,066
and ask him if it's
okay but I couldn't


712
00:42:29,906 --> 00:42:32,836
So what this really means, what
this error code really means


713
00:42:32,836 --> 00:42:36,386
to you, is you are in a
nongraphical environment


714
00:42:36,386 --> 00:42:38,676
for some reason You
are in the cron job,


715
00:42:38,736 --> 00:42:39,966
you are in the system daemon,


716
00:42:40,246 --> 00:42:44,866
you SSHed into the system SSHing
does not get you graphical


717
00:42:44,866 --> 00:42:47,656
access even if you are
logged in as the same user


718
00:42:47,656 --> 00:42:50,396
at the same time on the same
Mac They are totally separate


719
00:42:50,396 --> 00:42:53,636
security sessions So keep
this in mind because that's


720
00:42:53,636 --> 00:42:56,666
like probably 50 to
80 percent of all


721
00:42:56,666 --> 00:43:00,726
of the problems people have
So what do you do if you're


722
00:43:00,726 --> 00:43:02,006
in a nongraphical context?


723
00:43:02,006 --> 00:43:05,286
You want to use the keychain
anyway There are API calls


724
00:43:05,286 --> 00:43:09,436
and the SecKeychain APIs that
allow you to unlock the keychain


725
00:43:10,236 --> 00:43:12,756
Of course, you'll have to say,
"and the password is this"


726
00:43:12,876 --> 00:43:18,326
because you can't put up
a dialog There are APIs


727
00:43:18,456 --> 00:43:21,756
for retrieving items and
all of this good stuff;


728
00:43:21,756 --> 00:43:24,906
so if you happen to have
the user's login password


729
00:43:24,906 --> 00:43:27,366
or whatever secret protects
the keychain, you can just pass


730
00:43:27,416 --> 00:43:31,156
that to API But if you have a
command that normally works fine


731
00:43:31,156 --> 00:43:34,056
from terminal but now you want
to use it from an SSH session,


732
00:43:34,576 --> 00:43:37,056
the easiest way is to use
the security command That's a


733
00:43:37,056 --> 00:43:40,086
command line command, it's the
Swiss Army keychain command


734
00:43:41,376 --> 00:43:43,486
And it has an option for "I want


735
00:43:43,486 --> 00:43:45,836
to unlock this keychain
now Here's the password."


736
00:43:46,726 --> 00:43:51,336
So most of the time if the
problem is unlocking keychains,


737
00:43:51,336 --> 00:43:54,916
just running security unlock
before you run your program will


738
00:43:54,916 --> 00:43:59,526
get you out of your
hole If the problem is


739
00:43:59,526 --> 00:44:02,176
that your application isn't
on the access control list


740
00:44:02,176 --> 00:44:05,686
of the item, well, that's your
mistake You should have created


741
00:44:05,686 --> 00:44:09,056
the item with the right ACL to
begin with And I should mention


742
00:44:09,056 --> 00:44:11,536
that when we're talking about
application identity here,


743
00:44:11,536 --> 00:44:13,716
these are codesigning identities


744
00:44:14,456 --> 00:44:16,906
And I am glad everybody
here is signing their code


745
00:44:16,906 --> 00:44:19,796
because the keychain stuff
system doesn't work very well


746
00:44:19,796 --> 00:44:23,056
if your programs
unsigned anymore Well,


747
00:44:23,056 --> 00:44:24,486
let's talk a little
bit about backup


748
00:44:24,486 --> 00:44:25,586
and migration There
isn't have much


749
00:44:25,586 --> 00:44:28,716
to stay I told you keychains are
files If you backup your files


750
00:44:28,716 --> 00:44:33,066
and restore them,
everything will be fine


751
00:44:33,286 --> 00:44:35,996
And if you're migrating accounts
using Migration Assistant,


752
00:44:35,996 --> 00:44:40,126
it will migrate your keychains
Everything's fine Hardly a


753
00:44:40,126 --> 00:44:45,186
problem actually If you happen
to be writing system daemons,


754
00:44:46,546 --> 00:44:50,016
I've already alluded to
that, system daemons are not


755
00:44:50,546 --> 00:44:53,866
in graphic sessions They
can't put up security dialogs


756
00:44:54,476 --> 00:44:59,866
So you are in that particular
hole The system keychain is your


757
00:44:59,866 --> 00:45:02,226
default keychain If you
are in a system daemon,


758
00:45:02,226 --> 00:45:05,726
you can store secrets in
the keychain, but it will go


759
00:45:05,726 --> 00:45:09,116
into the system keychain The
system keychain is writable


760
00:45:09,116 --> 00:45:12,886
by root only; so in order to
write to the system keychain,


761
00:45:12,886 --> 00:45:16,286
in order to create or modify
keychain items, you need to run


762
00:45:16,286 --> 00:45:21,466
as root Retrieving is fine
no matter what UID you are


763
00:45:22,206 --> 00:45:27,076
So as a daemon, your keychain
is the system keychain


764
00:45:27,806 --> 00:45:32,156
And you have no access
without a lot of back flipping


765
00:45:32,476 --> 00:45:35,346
to the user's keychain because
if you're a system daemon,


766
00:45:35,346 --> 00:45:37,836
you don't have a user
For all you know,


767
00:45:37,836 --> 00:45:40,146
there might be four users logged
into the system right now,


768
00:45:40,146 --> 00:45:44,776
or none at all; so if you're
searching for keychain items


769
00:45:44,776 --> 00:45:46,446
in a system daemon, anything


770
00:45:46,446 --> 00:45:49,046
that the user created
the normal way inside


771
00:45:49,046 --> 00:45:53,336
of that normal login keychain,
you just can't see So the not


772
00:45:53,336 --> 00:45:56,556
so bad news on OS X is that
there is a tool that allows


773
00:45:56,556 --> 00:45:59,286
to you to work with keychain
files It's called the


774
00:45:59,286 --> 00:46:00,186
"security command."


775
00:46:00,916 --> 00:46:06,996
It's in usr/bin, and because the
default sharing rule on OS X is,


776
00:46:06,996 --> 00:46:08,776
if you can see it,
you can fondle it,


777
00:46:08,776 --> 00:46:10,306
you just can't get the value


778
00:46:10,306 --> 00:46:14,896
out without passing the ACL test
The security command can show


779
00:46:14,896 --> 00:46:17,076
you all of the items
in the user's keychain,


780
00:46:17,076 --> 00:46:19,456
or for that matter, all of the
items in the system keychain,


781
00:46:20,356 --> 00:46:21,946
and it will, if you pass it,


782
00:46:22,086 --> 00:46:25,196
the right convoluted options
will actually tell you what


783
00:46:25,196 --> 00:46:29,886
access control lists it has and
what its attributes are In fact,


784
00:46:29,886 --> 00:46:31,546
you can use the keychain --


785
00:46:32,106 --> 00:46:36,146
the security command to
essentially preflight APIs


786
00:46:36,146 --> 00:46:39,416
from the command line if you're
so inclined If you're wondering


787
00:46:39,416 --> 00:46:42,256
if a particular combination
of attributes will work


788
00:46:42,256 --> 00:46:47,396
to find an item, there
is a security subcommand


789
00:46:47,736 --> 00:46:50,756
that just searches
the keychain for items


790
00:46:50,756 --> 00:46:51,906
with particular attributes


791
00:46:52,536 --> 00:46:55,896
So it's pretty handy There's
security dump keychain


792
00:46:55,896 --> 00:46:59,986
with dumps out the entire
keychain for your introspection


793
00:47:00,116 --> 00:47:02,796
Of course, it was still not
give you the actual values


794
00:47:02,796 --> 00:47:08,536
of the secrets unless you have
access to them So they're --


795
00:47:09,846 --> 00:47:13,116
just to clarify: The security
command has no special magic


796
00:47:13,806 --> 00:47:17,146
features It's just
a normal API client


797
00:47:17,146 --> 00:47:20,626
for the keychain APIs
It will not do anything


798
00:47:20,696 --> 00:47:26,216
that the normal keychain
APIs cannot do But on OS X,


799
00:47:26,216 --> 00:47:32,796
that's actually a heck of a lot
All right Welcome back IOS crowd


800
00:47:32,796 --> 00:47:35,046
We're now talking about
both systems again


801
00:47:36,386 --> 00:47:38,866
And this is the section
where I talk about stuff


802
00:47:38,866 --> 00:47:41,606
that just didn't make
it anywhere earlier


803
00:47:41,606 --> 00:47:47,626
in the presentation I've
talked about secrets so far --


804
00:47:47,976 --> 00:47:51,506
accounts, passwords, and
PINS, you know, all that stuff


805
00:47:52,336 --> 00:47:56,366
that you generally retrieve from
a keychain in order to use it


806
00:47:56,686 --> 00:48:01,016
as the text or data value
that it is for something,


807
00:48:01,776 --> 00:48:04,056
authenticating, passing
it off to a service,


808
00:48:04,056 --> 00:48:10,206
whatever The keychain actually
can store a lot of other things,


809
00:48:10,206 --> 00:48:13,796
too I told you it's a
database, and it really is,


810
00:48:13,796 --> 00:48:18,906
and in particular, it has
database schemas And one


811
00:48:18,906 --> 00:48:23,496
of the things that you can store
in the keychain is certificates


812
00:48:23,496 --> 00:48:29,976
and cryptographic keys This
presentation focuses on how


813
00:48:29,976 --> 00:48:35,856
to simply work with passwords,
but I should at least mention,


814
00:48:36,356 --> 00:48:40,176
if you're doing things like
client-side SSL authentication,


815
00:48:40,976 --> 00:48:45,156
what will happen is that your
cryptographic identity, the key


816
00:48:45,156 --> 00:48:46,866
and the certificate
that you're presenting


817
00:48:46,866 --> 00:48:52,616
to the web server will end
up stored in a keychain,


818
00:48:52,616 --> 00:48:55,096
and the CF network
APIs will essentially,


819
00:48:55,166 --> 00:48:57,806
if everything works well,
automatically fetch them


820
00:48:57,806 --> 00:49:00,926
out of there and use them Keys


821
00:49:00,926 --> 00:49:03,226
and keychains are actually
handled by reference,


822
00:49:03,716 --> 00:49:05,376
which is a really
cool feature It means


823
00:49:05,606 --> 00:49:10,136
that unlike certain other
legacy APIs, you don't ever have


824
00:49:10,136 --> 00:49:13,626
to have the keys in your
address space And so


825
00:49:13,626 --> 00:49:18,206
if you get compromised all, is
not lost That's good So keep


826
00:49:18,206 --> 00:49:21,626
in mind there is an API suite
called SecKey for dealing


827
00:49:21,626 --> 00:49:24,866
with cryptographic keys, and
those are typically stored


828
00:49:24,866 --> 00:49:28,806
in keychains, works on iOS


829
00:49:28,806 --> 00:49:32,476
and OS X There is a
SecCertificate API for dealing


830
00:49:32,476 --> 00:49:35,806
with certificates; mostly for
finding them, but there's also


831
00:49:35,806 --> 00:49:38,756
and API for creating them
And there is SecIdentity


832
00:49:38,756 --> 00:49:41,686
which is a little bit odd
because it's literally a pair


833
00:49:42,146 --> 00:49:48,606
of private key and a certificate
SecIdentity objects aren't


834
00:49:48,606 --> 00:49:52,526
actually anything physical They
are a pair of a certificate


835
00:49:52,526 --> 00:49:54,846
and a private key that
were found in your keychain


836
00:49:54,846 --> 00:49:57,816
so that belong together The
system knows how they fit


837
00:49:57,816 --> 00:49:59,636
together This is what you use


838
00:49:59,666 --> 00:50:02,666
for cryptographic
authentication What --


839
00:50:05,256 --> 00:50:13,516
yeah Okay All right
Well, one last thing:


840
00:50:13,846 --> 00:50:18,726
iCloud keychain It's been
announced so I can tell you


841
00:50:18,726 --> 00:50:26,346
about it Once upon a time there
was a way to synchronize secrets


842
00:50:26,346 --> 00:50:30,366
in keychains and that
feature disappeared awhile ago


843
00:50:30,366 --> 00:50:37,246
because times change So now
we have something better The


844
00:50:37,486 --> 00:50:41,046
SecItem APIs are our simple
APIs, the "straightforward,


845
00:50:41,046 --> 00:50:43,026
just do this if you
can get away with it,


846
00:50:43,376 --> 00:50:44,616
don't get any more complicated


847
00:50:44,616 --> 00:50:48,376
if you can avoid it" APIs You
can add one more key to them --


848
00:50:48,636 --> 00:50:55,546
this one And it starts sharing
your items between OS X devices


849
00:50:55,546 --> 00:51:05,296
and iOS devices for that user
That's all you have to do.


850
00:51:05,296 --> 00:51:05,646
[ Pause ]


851
00:51:05,646 --> 00:51:05,996
[ Applause ]


852
00:51:05,996 --> 00:51:13,766
We try to make things
simple So this works on iOS,


853
00:51:13,766 --> 00:51:21,886
it works on OS X; of course,
iOS 7, OS X 10.9 You need to add


854
00:51:22,266 --> 00:51:26,236
that attribute to all
of your API calls,


855
00:51:26,636 --> 00:51:30,526
not just the creation call And
as it says on the label usually,


856
00:51:30,526 --> 00:51:31,656
"some restrictions apply";


857
00:51:32,176 --> 00:51:36,296
in particular the lower-level
APIs I told you about on OS X,


858
00:51:36,686 --> 00:51:41,666
the SecKeychain APIs, they don't
play nice with iCloud keychain


859
00:51:42,166 --> 00:51:46,206
So if you are planning on using
iCloud keychain, you really,


860
00:51:46,206 --> 00:51:47,076
really need to stick


861
00:51:47,076 --> 00:51:52,196
to the high-level APIs Just call
SecItem, add that attribute,


862
00:51:52,696 --> 00:51:55,886
and keep it simple It does work


863
00:51:55,886 --> 00:52:03,186
with the application sharing
feature So to sum it all up:


864
00:52:04,196 --> 00:52:07,546
Use the keychain APIs to
store your secrets It's better


865
00:52:07,546 --> 00:52:09,126
for you It's better for
the user It's better


866
00:52:09,126 --> 00:52:14,756
for the environment Don't do
your own secret storage It's


867
00:52:15,156 --> 00:52:18,006
going to end up badly,
if not now, then later,


868
00:52:18,786 --> 00:52:22,916
because this is hard and you're
doing enough hard coding already


869
00:52:24,676 --> 00:52:29,656
Keep your APIs as simple as
possible, and that's not just


870
00:52:29,756 --> 00:52:32,296
because complicated
breeds more bugs,


871
00:52:32,756 --> 00:52:35,506
but also because complicated
is a really bad thing


872
00:52:35,506 --> 00:52:39,976
when you're doing security The
more complicated you make your


873
00:52:40,326 --> 00:52:43,516
secret storage setup,
the more likely it is


874
00:52:43,516 --> 00:52:45,876
that some combination
of circumstances


875
00:52:45,876 --> 00:52:49,036
that you didn't even think about
it, is going to lead to a hole


876
00:52:49,036 --> 00:52:54,906
in your security strategy
If you can at all,


877
00:52:55,326 --> 00:52:58,816
stick with this SecItem APIs
Stick with the memory workflows


878
00:52:58,816 --> 00:53:01,456
if that's what you're
doing Try not


879
00:53:01,456 --> 00:53:04,286
to manipulate ACLs unless
you absolutely have to,


880
00:53:04,286 --> 00:53:09,156
and if you do, stick with the
sample code for that on OS X,


881
00:53:09,386 --> 00:53:11,956
and you'll be living
happily ever


882
00:53:11,956 --> 00:53:17,606
after All right Paul
Danbold, the gentleman here,


883
00:53:18,116 --> 00:53:21,856
is usually lonely and bored,
and he loves to get e-mails;


884
00:53:22,856 --> 00:53:25,396
the more the better
He's the evangelist,


885
00:53:25,396 --> 00:53:28,346
and he has gotten very
good at telling you


886
00:53:28,346 --> 00:53:34,586
who should be talking to you The
keychain APIs are public APIs


887
00:53:34,586 --> 00:53:35,466
They're documented


888
00:53:35,576 --> 00:53:39,676
on the developer website There
is plenty of documentation to go


889
00:53:39,676 --> 00:53:42,866
around Start with this URL if
you haven't ever looked at it,


890
00:53:42,866 --> 00:53:45,156
and there will be
cross-references leading you


891
00:53:45,156 --> 00:53:50,136
elsewhere If you are
wondering about storing keys


892
00:53:50,136 --> 00:53:55,076
and certificates in keychains,
there is a technical Q&A, 1745,


893
00:53:55,076 --> 00:53:59,096
that focuses on that and
should serve to get you started


894
00:53:59,146 --> 00:54:05,006
with how to set this all up If
you're just wondering how all


895
00:54:05,006 --> 00:54:07,046
of that cryptographic
protection thing works


896
00:54:07,046 --> 00:54:09,356
and why you should trust
us, there's a white paper


897
00:54:09,636 --> 00:54:13,236
that describes how it works
under the hood You don't need


898
00:54:13,236 --> 00:54:16,986
to read that in order to use the
keychain, but if you're curious


899
00:54:17,316 --> 00:54:20,356
And if you have any questions
start asking each other


900
00:54:20,356 --> 00:54:23,076
in the developer forums,
and then we'll take it


901
00:54:23,076 --> 00:54:25,776
from there And that's it.


902
00:54:26,276 --> 00:54:37,880
[ Applause ]

