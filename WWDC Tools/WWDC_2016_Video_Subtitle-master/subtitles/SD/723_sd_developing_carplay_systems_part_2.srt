1
00:00:07,516 --> 00:00:19,586
[ Music ]


2
00:00:20,086 --> 00:00:22,786
>> Hello. My name is Tanya,
and I want to welcome you


3
00:00:22,786 --> 00:00:25,696
to the second session about
developing CarPlay systems.


4
00:00:26,336 --> 00:00:28,616
The video to Part 1
is also available.


5
00:00:29,076 --> 00:00:31,846
So if you haven't watched
it, definitely check it out.


6
00:00:32,576 --> 00:00:34,746
In this session, we'll
cover more detail


7
00:00:34,746 --> 00:00:36,566
on how CarPlay is integrated


8
00:00:36,566 --> 00:00:39,386
into a typical automotive
infotainment system.


9
00:00:40,466 --> 00:00:44,296
We'll start with a system
overview, then talk about volume


10
00:00:44,346 --> 00:00:45,616
and resource management,


11
00:00:46,006 --> 00:00:48,856
and finish by discussing
application state management.


12
00:00:50,356 --> 00:00:53,126
Now, let's dive into an
overview of the system.


13
00:00:54,916 --> 00:00:56,676
If you watched the first video,


14
00:00:57,006 --> 00:00:59,566
you will recall the
software components you need


15
00:00:59,566 --> 00:01:01,206
to implement a CarPlay receiver.


16
00:01:01,916 --> 00:01:07,226
In summary, you need an IP-based
link to the head unit either


17
00:01:07,376 --> 00:01:11,346
over USB or over Wi-Fi, IP
cline for data exchange,


18
00:01:11,976 --> 00:01:14,566
an instance of the CarPlay
Communication Plug-in


19
00:01:14,566 --> 00:01:18,786
implementing the control
protocol, audio framework


20
00:01:18,866 --> 00:01:21,796
to play or record sound,
and a video framework


21
00:01:21,796 --> 00:01:23,116
to render the video stream.


22
00:01:24,486 --> 00:01:28,646
However, those components are
just one of the sub-systems


23
00:01:28,646 --> 00:01:30,486
in a typical automotive
head unit.


24
00:01:31,556 --> 00:01:33,906
In addition to the
CarPlay functionality,


25
00:01:34,426 --> 00:01:37,026
your unit has its
own native interface,


26
00:01:37,356 --> 00:01:39,006
audio sources, and logic.


27
00:01:39,876 --> 00:01:43,086
Both together build
the complete head unit.


28
00:01:44,546 --> 00:01:47,896
Then you add all hardware
resources within the vehicle:


29
00:01:48,326 --> 00:01:54,006
Microphone, speakers, displays,
sensors, user input elements,


30
00:01:54,476 --> 00:01:56,466
and you have the
complete system.


31
00:01:58,176 --> 00:02:00,596
OK, so we have the full system.


32
00:02:01,166 --> 00:02:05,426
Now the question is how do those
seemingly competing sub-systems


33
00:02:05,826 --> 00:02:06,766
work with each other?


34
00:02:08,196 --> 00:02:09,246
Let's understand it.


35
00:02:10,216 --> 00:02:13,746
First, let's look at how
sensor data is exchanged.


36
00:02:13,906 --> 00:02:16,486
And we will take location
data as an example.


37
00:02:17,226 --> 00:02:20,636
Location information includes
data from a GPS receiver


38
00:02:21,026 --> 00:02:23,816
or sensor data like
wheel speed or yield.


39
00:02:24,846 --> 00:02:27,356
The data reaches the
device through iAP2,


40
00:02:27,896 --> 00:02:30,506
must be always available,
and is requested


41
00:02:30,506 --> 00:02:31,986
by the phone when needed.


42
00:02:33,626 --> 00:02:35,216
Next, let's look


43
00:02:35,216 --> 00:02:38,156
at the instrument cluster
or heads-up display.


44
00:02:39,196 --> 00:02:41,456
These secondary displays
are used


45
00:02:41,456 --> 00:02:43,856
to show metadata
provided by the device.


46
00:02:44,566 --> 00:02:48,656
Such metadata could include the
currently-playing music track,


47
00:02:49,176 --> 00:02:52,816
the active phone call,
or starting with iOS 10,


48
00:02:53,016 --> 00:02:54,736
the next turn-by-turn direction.


49
00:02:55,306 --> 00:02:59,146
Again, the data is fired
through the IP protocol


50
00:02:59,186 --> 00:03:00,796
and exchanged on demand.


51
00:03:02,606 --> 00:03:05,776
Now let's see what happens
on the primary display.


52
00:03:06,476 --> 00:03:10,006
Of course, to operate the
content shown on the display,


53
00:03:10,386 --> 00:03:12,866
the user must either
use a touchscreen,


54
00:03:13,246 --> 00:03:15,096
an app controller, or both.


55
00:03:15,696 --> 00:03:18,736
So we can consider
the availability


56
00:03:18,736 --> 00:03:21,586
of the user input devices
together with the display.


57
00:03:23,026 --> 00:03:24,986
When the CarPlay UI is active,


58
00:03:25,356 --> 00:03:28,816
the unit is rendering the video
stream on the primary display.


59
00:03:29,236 --> 00:03:32,886
And both the screen and the user
input are used by the device.


60
00:03:34,456 --> 00:03:39,136
But if the native user interface
is shown on the screen,


61
00:03:39,506 --> 00:03:42,786
then both the display and
the user input are routed


62
00:03:42,786 --> 00:03:44,216
to the native sub-system.


63
00:03:45,626 --> 00:03:49,586
However, additional user
controls on the steering wheel,


64
00:03:49,906 --> 00:03:53,136
like the Voice Recognition
button, Next/Previous Track,


65
00:03:53,516 --> 00:03:55,346
may be linked to CarPlay even


66
00:03:55,346 --> 00:03:57,816
when the native UI is
shown on the display.


67
00:03:59,586 --> 00:04:02,906
That way, Siri can
be always launched


68
00:04:03,076 --> 00:04:05,026
or the next audio track played.


69
00:04:07,406 --> 00:04:11,266
OK, now that we looked at the
user interface integration,


70
00:04:11,486 --> 00:04:12,816
let's talk about audio.


71
00:04:16,946 --> 00:04:21,516
Audio in the car can be roughly
separated into three categories.


72
00:04:22,036 --> 00:04:25,936
The first one provides access to
the speakers and the microphone,


73
00:04:26,326 --> 00:04:29,266
and it's used for phone
calls or voice recognition.


74
00:04:30,556 --> 00:04:32,976
Then we have audio playback


75
00:04:33,056 --> 00:04:36,786
for any media content
like radio or music.


76
00:04:38,106 --> 00:04:41,546
And last, we have the alerts
category which is used


77
00:04:41,546 --> 00:04:45,536
for navigation prompts or any
other higher-priority alerts.


78
00:04:46,926 --> 00:04:48,536
Within the native sub-system,


79
00:04:48,986 --> 00:04:52,606
these three categories
are to be found again.


80
00:04:53,776 --> 00:04:56,996
Within CarPlay, we have
a Main audio channel


81
00:04:57,156 --> 00:04:59,736
which includes phone
call, voice recognition


82
00:04:59,736 --> 00:05:01,296
and audio playback audio.


83
00:05:02,856 --> 00:05:06,226
And an Alternate audio
channel which is reserved


84
00:05:06,306 --> 00:05:09,206
for higher-priority
prompts and sounds


85
00:05:09,316 --> 00:05:12,926
such as navigation prompts
or new message notifications.


86
00:05:15,776 --> 00:05:20,456
So the media channel can either
play music coming from the phone


87
00:05:21,516 --> 00:05:25,656
or media playback from one
of the native audio sources.


88
00:05:27,126 --> 00:05:30,266
OK, now that we have
looked at media playback,


89
00:05:30,806 --> 00:05:32,226
let's see what happens


90
00:05:32,516 --> 00:05:34,396
when there is a phone
call through CarPlay.


91
00:05:35,966 --> 00:05:40,126
The phone call needs the audio
channel which provides access


92
00:05:40,196 --> 00:05:42,496
to both the microphone
and the speakers.


93
00:05:43,286 --> 00:05:47,496
So media playback is interrupted
and the channels are switched.


94
00:05:53,046 --> 00:05:56,416
And audio switched over to the
channel, which provides access


95
00:05:56,456 --> 00:05:58,856
to both the microphone
and the speakers.


96
00:05:59,516 --> 00:06:03,436
In addition to switching
to audio channel,


97
00:06:03,696 --> 00:06:07,326
the screen switches to CarPlay
to show the phone call UI.


98
00:06:08,236 --> 00:06:10,716
And metadata information


99
00:06:10,766 --> 00:06:13,316
on the instrument cluster
is updated as well.


100
00:06:14,246 --> 00:06:19,806
Of course, if the native system
also supports phone calls


101
00:06:19,806 --> 00:06:23,916
outside of CarPlay, then that
phone call is played and shown


102
00:06:24,026 --> 00:06:25,246
on the in-car displays.


103
00:06:26,576 --> 00:06:28,606
But while on a native
phone call,


104
00:06:28,816 --> 00:06:32,206
the user can be using
Apple Maps for navigation.


105
00:06:33,966 --> 00:06:36,536
So each time there is
an approaching turn,


106
00:06:36,746 --> 00:06:38,566
Apple Maps will play a sound


107
00:06:38,916 --> 00:06:41,336
through the announcement
channel to notify the user.


108
00:06:42,406 --> 00:06:45,256
The phone call continues to
be routed through the speakers


109
00:06:45,256 --> 00:06:50,526
of the car, but the turn-by-turn
notifications are also displayed


110
00:06:50,926 --> 00:06:52,996
as they are mixed
with the call audio.


111
00:06:54,056 --> 00:06:58,026
Of course, in such situation,
we would not want the user


112
00:06:58,616 --> 00:07:02,646
to hear the phone navigation
prompt, but just an alert sound


113
00:07:02,646 --> 00:07:04,746
that an upcoming turn is coming.


114
00:07:05,146 --> 00:07:09,506
And if the user wants to
see where the next turn is,


115
00:07:09,716 --> 00:07:12,096
the main display
may show Apple Maps.


116
00:07:13,776 --> 00:07:20,076
And last, after the phone call
ends, music continues to play


117
00:07:20,076 --> 00:07:21,616
through the native sub-system


118
00:07:22,336 --> 00:07:24,666
as that was what the
user was listening


119
00:07:24,666 --> 00:07:26,086
to prior to the phone call.


120
00:07:27,086 --> 00:07:31,636
Now, the navigation announcement
will include the full-spoken


121
00:07:31,746 --> 00:07:35,186
direction as the user is
no longer on a phone call.


122
00:07:36,456 --> 00:07:36,916
All right.


123
00:07:37,906 --> 00:07:43,056
As you see, integrating CarPlay
is rather a complex task,


124
00:07:43,056 --> 00:07:46,056
especially in regards to
sharing hardware resources.


125
00:07:46,956 --> 00:07:49,436
But before we get
into those details,


126
00:07:49,896 --> 00:07:51,416
let's look at volume controls.


127
00:07:54,026 --> 00:07:55,016
Volume management.


128
00:07:56,306 --> 00:08:00,636
As you might know, a usual
automotive head unit shows the


129
00:08:00,636 --> 00:08:04,616
volume indicator while the user
is operating the volume knob,


130
00:08:04,956 --> 00:08:07,486
and that volume knob
operates the volume


131
00:08:07,486 --> 00:08:09,126
of the currently-playing audio.


132
00:08:11,486 --> 00:08:14,436
The same principle
applies for CarPlay audio,


133
00:08:15,016 --> 00:08:18,446
but there is a different
volume level setting for each


134
00:08:18,446 --> 00:08:20,396
of the major CarPlay
applications.


135
00:08:21,366 --> 00:08:23,546
Let's look through them.


136
00:08:24,086 --> 00:08:28,106
During Siri playback, the volume
knob sets the volume specific


137
00:08:28,106 --> 00:08:29,246
to voice interactions.


138
00:08:30,506 --> 00:08:31,846
For an incoming phone call,


139
00:08:32,056 --> 00:08:33,986
the volume of the
ringtone is controlled.


140
00:08:35,826 --> 00:08:37,785
When the user is
on a phone call,


141
00:08:38,096 --> 00:08:40,426
the phone call audio
is controlled.


142
00:08:42,096 --> 00:08:44,976
And if a next turn
is approaching,


143
00:08:45,076 --> 00:08:46,506
navigation prompts are played.


144
00:08:47,106 --> 00:08:49,896
Then, the user can change
the navigation volume.


145
00:08:50,666 --> 00:08:53,526
And remember, media could
be playing in the background


146
00:08:54,036 --> 00:08:56,876
but its volume will be
lowered during those prompts


147
00:08:57,236 --> 00:08:58,526
and cannot be adjusted.


148
00:09:00,306 --> 00:09:03,736
Once the announcement is over
and music volume is ramped up,


149
00:09:04,136 --> 00:09:06,856
the button controls
the media volume level.


150
00:09:08,346 --> 00:09:11,646
All right, now let's look
at resource management.


151
00:09:13,136 --> 00:09:17,526
We are going to take a look at
which resources are managed,


152
00:09:17,856 --> 00:09:19,526
talk about how they are managed,


153
00:09:19,836 --> 00:09:22,176
and go over a couple
of typical examples.


154
00:09:24,386 --> 00:09:27,066
So we saw that there are
multiple hardware resources,


155
00:09:27,706 --> 00:09:30,936
but let's understand which
one of them are managed.


156
00:09:31,146 --> 00:09:33,556
And there's only two:


157
00:09:34,366 --> 00:09:37,606
The mainScreen representing
the main display in the car,


158
00:09:38,286 --> 00:09:41,356
and mainAudio as the
resource giving access


159
00:09:41,446 --> 00:09:43,016
to the car's audio system.


160
00:09:45,106 --> 00:09:48,456
Those resources can either
be taken or borrowed.


161
00:09:49,466 --> 00:09:52,066
When you take a resource,
it belongs to you


162
00:09:52,066 --> 00:09:53,706
for unlimited amount of time.


163
00:09:54,006 --> 00:09:55,256
It's basically yours.


164
00:09:56,266 --> 00:09:59,466
When you borrow a resource,
you may use it for a while,


165
00:09:59,856 --> 00:10:02,406
but you have to give it
back after you're finished.


166
00:10:04,346 --> 00:10:08,576
OK, so let's have the
native user interface take


167
00:10:08,576 --> 00:10:10,166
over the display permanently.


168
00:10:10,836 --> 00:10:14,366
The user can be using native
navigation, or listening


169
00:10:14,366 --> 00:10:17,486
to FM radio, or adjusting
some car settings.


170
00:10:19,126 --> 00:10:21,696
What triggers such permanent
switch to the native UI?


171
00:10:22,866 --> 00:10:24,676
The native UI can
take the screen


172
00:10:24,676 --> 00:10:29,276
when the user presses a hard
key or switches to the native UI


173
00:10:29,576 --> 00:10:32,276
from the entry point
within the CarPlay UI,


174
00:10:33,346 --> 00:10:36,376
or by using the native
voice recognizer to call


175
00:10:36,376 --> 00:10:38,536
out a specific native
application.


176
00:10:40,866 --> 00:10:44,306
Now let's say the user
selects the Apple CarPlay icon


177
00:10:44,306 --> 00:10:45,366
from the main menu.


178
00:10:48,476 --> 00:10:51,496
In this case, CarPlay
takes over the display


179
00:10:51,666 --> 00:10:53,876
as the user explicitly
requested it.


180
00:10:55,386 --> 00:10:58,676
Again, what can trigger
such permanent transition?


181
00:10:59,376 --> 00:11:01,236
Any hard key linked to CarPlay.


182
00:11:02,066 --> 00:11:05,206
Or, as we saw, through
any CarPlay button


183
00:11:05,296 --> 00:11:06,266
within the native UI.


184
00:11:07,356 --> 00:11:13,246
Or through Siri, for example,
by saying, "Open Maps."


185
00:11:14,086 --> 00:11:16,056
Now, there are other
applications


186
00:11:16,156 --> 00:11:17,936
that need to borrow a resource.


187
00:11:18,506 --> 00:11:22,136
Remember, they just need it for
a while and will give it back.


188
00:11:23,266 --> 00:11:25,366
Which applications
are we talking about?


189
00:11:26,446 --> 00:11:28,906
That's phone calls,
voice interactions,


190
00:11:29,606 --> 00:11:32,016
notifications, or alerts.


191
00:11:34,116 --> 00:11:35,416
Let's look at an example.


192
00:11:36,256 --> 00:11:39,396
The native UI has taken
the Main Screen resource


193
00:11:39,466 --> 00:11:41,556
and is permanently
showing on the display.


194
00:11:44,006 --> 00:11:45,946
Now the user gets a
call through CarPlay.


195
00:11:46,646 --> 00:11:50,496
The CarPlay UI borrows
the screen and is shown


196
00:11:50,576 --> 00:11:52,066
for the duration of the call.


197
00:11:52,986 --> 00:11:59,456
Once the call ends, we go back
to the native UI and stay there


198
00:11:59,456 --> 00:12:01,486
until further user action.


199
00:12:05,046 --> 00:12:07,476
Then, let's look at the
Main Audio resource.


200
00:12:08,366 --> 00:12:11,126
Main Audio can be split
in four major types.


201
00:12:11,516 --> 00:12:14,666
Each type is used for a
different CarPlay application


202
00:12:15,016 --> 00:12:18,256
as it provides access to a
different hardware resource.


203
00:12:19,816 --> 00:12:25,956
Media is audio output only and
is used for any media playback.


204
00:12:26,726 --> 00:12:30,346
Alert is also only output


205
00:12:30,346 --> 00:12:32,816
and plays ringtones
and timer alerts.


206
00:12:34,326 --> 00:12:36,846
speechRecognition
is used for Siri


207
00:12:37,216 --> 00:12:39,256
as it adds access
to the microphone.


208
00:12:40,786 --> 00:12:43,926
Same for the telephony type,
which is used for phone calls.


209
00:12:45,516 --> 00:12:49,786
And same for the default, which
is used for undefined audio.


210
00:12:52,466 --> 00:12:55,246
But don't forget the
second audio channel used


211
00:12:55,246 --> 00:12:57,106
for navigation announcement.


212
00:12:58,336 --> 00:13:00,156
alternateAudio is not managed.


213
00:13:00,606 --> 00:13:03,836
It is basically always
available, so there is no need


214
00:13:03,836 --> 00:13:05,116
to take it or borrow it.


215
00:13:05,946 --> 00:13:09,596
alternateAudio is mixed
with any of the audio types


216
00:13:09,916 --> 00:13:13,516
within the mainAudio channel,
and it is always accessible.


217
00:13:15,186 --> 00:13:18,466
And with this, I'm going
to hand off to Tom to talk


218
00:13:18,466 --> 00:13:19,786
about the resource manager.


219
00:13:20,696 --> 00:13:23,516
>> Thanks, Tanya.


220
00:13:23,866 --> 00:13:26,886
Hi. I'm Tom, and I also work on
the CarPlay Engineering Team.


221
00:13:27,616 --> 00:13:30,106
So now that you've learned which
resources need to be managed


222
00:13:30,576 --> 00:13:32,956
and you know you can either
take or borrow those resources,


223
00:13:33,356 --> 00:13:35,126
let's talk about how you
go about managing them.


224
00:13:35,616 --> 00:13:39,216
To be able to distribute
the resources


225
00:13:39,216 --> 00:13:42,296
between the two sub-systems, we
need some type of arbitrator.


226
00:13:42,636 --> 00:13:45,456
And we call such an
arbitrator a resource manager.


227
00:13:48,486 --> 00:13:50,976
So what does the
resource manager do?


228
00:13:51,456 --> 00:13:53,466
It has three main tasks.


229
00:13:53,816 --> 00:13:56,436
First, it holds the current
state of the whole system.


230
00:13:57,276 --> 00:14:01,276
Second, it follows a set
of strict rules to decide


231
00:14:01,276 --> 00:14:03,036
which system will
get the resource.


232
00:14:03,686 --> 00:14:06,726
Third, based on the current
state and the set of the rules,


233
00:14:07,316 --> 00:14:10,166
it assigns the resource
to one party or the other.


234
00:14:10,336 --> 00:14:12,356
So let's see how this
works in practice.


235
00:14:13,536 --> 00:14:17,806
Let's say both the
native UI and CarPlay need


236
00:14:17,806 --> 00:14:18,986
to show something on the screen.


237
00:14:20,196 --> 00:14:23,196
So both send a request to
have ownership of the display.


238
00:14:23,936 --> 00:14:28,176
Then, the resource manager
checks the internal state


239
00:14:28,176 --> 00:14:30,476
and decides which of the
two should get access


240
00:14:30,506 --> 00:14:31,936
to the display.


241
00:14:33,626 --> 00:14:34,896
Let's say, in this case,


242
00:14:34,896 --> 00:14:37,306
the native UI request
had a higher priority


243
00:14:37,406 --> 00:14:38,666
and the screen is
assigned to it.


244
00:14:39,156 --> 00:14:41,266
The resource manager
sends a notification


245
00:14:41,266 --> 00:14:43,126
that the screen can now
be used by the native UI.


246
00:14:45,056 --> 00:14:48,516
Only then the native UI can
show content on the screen.


247
00:14:49,416 --> 00:14:51,476
It's important to note that
this state is not changed


248
00:14:51,476 --> 00:14:55,706
until the resource
manager has sent an update.


249
00:14:56,436 --> 00:14:58,006
So where does the
resource manager live?


250
00:14:58,536 --> 00:15:01,486
Is it part of the native
system or of CarPlay?


251
00:15:02,376 --> 00:15:03,686
Well, when we designed CarPlay,


252
00:15:04,006 --> 00:15:05,436
we asked ourselves
the same question.


253
00:15:06,336 --> 00:15:07,516
We considered the complexity


254
00:15:07,516 --> 00:15:10,116
of exchanging detailed
information about the resources.


255
00:15:10,546 --> 00:15:11,436
We considered the future.


256
00:15:12,046 --> 00:15:13,966
What, if any, of those
rules needed to be adjusted?


257
00:15:15,056 --> 00:15:17,556
What if new applications became
available through CarPlay


258
00:15:17,556 --> 00:15:19,836
that the vehicle had no
existing designs to handle?


259
00:15:20,706 --> 00:15:23,896
What solution would give us the
greatest flexibility five years


260
00:15:23,896 --> 00:15:24,456
down the road?


261
00:15:25,086 --> 00:15:27,536
So we decided to implement a
system where the complexity


262
00:15:27,536 --> 00:15:30,646
on the native system is lower
and it's easier to update


263
00:15:30,646 --> 00:15:31,576
after the vehicle has been


264
00:15:31,576 --> 00:15:32,916
in the customer's
hands for a while.


265
00:15:33,666 --> 00:15:37,226
Hence, the resource manager
is implemented within iOS.


266
00:15:38,286 --> 00:15:43,076
And because the resource
manager is the component


267
00:15:43,546 --> 00:15:45,206
with which the native
system interacts,


268
00:15:45,206 --> 00:15:46,996
we refer to the iPhone
as the controller,


269
00:15:47,036 --> 00:15:48,906
and the head unit
as the accessory.


270
00:15:49,766 --> 00:15:51,676
But don't forget, all


271
00:15:51,676 --> 00:15:54,156
of the iPhone applications
request the same resources


272
00:15:54,246 --> 00:15:56,226
in the same way as
the native UI would.


273
00:15:59,596 --> 00:16:02,656
Next. What commands
can you use to interact


274
00:16:02,656 --> 00:16:03,636
with the resource manager?


275
00:16:04,526 --> 00:16:05,746
It's simple.


276
00:16:06,256 --> 00:16:07,526
You only need two commands.


277
00:16:08,256 --> 00:16:10,186
The changeModes command
is used to request


278
00:16:10,186 --> 00:16:12,876
or release a resource, and the
modesChanged command is used


279
00:16:12,876 --> 00:16:14,266
to describe the current states.


280
00:16:16,296 --> 00:16:18,866
changeModes is the notification
sent by the head unit,


281
00:16:19,396 --> 00:16:21,666
the accessory in this case,


282
00:16:21,666 --> 00:16:23,426
to the resource manager,
the controller.


283
00:16:29,286 --> 00:16:32,296
This changeModes command
states what the accessory wants


284
00:16:32,296 --> 00:16:33,426
to do with the resource.


285
00:16:33,886 --> 00:16:36,926
It declares why it needs
it and who can take


286
00:16:36,926 --> 00:16:39,466
or borrow the resource
after it is transferred.


287
00:16:41,586 --> 00:16:43,686
The modesChanged is
the notification sent


288
00:16:43,686 --> 00:16:45,516
by the controller
back to the head unit.


289
00:16:48,306 --> 00:16:50,216
modesChanged provides
the current state


290
00:16:50,466 --> 00:16:53,206
which describes who's the owner
of the resources of the system.


291
00:16:53,986 --> 00:16:55,296
It sends so the accessory knows


292
00:16:55,296 --> 00:16:56,616
if a resource has
been transferred


293
00:16:56,846 --> 00:16:57,996
and the owner has changed.


294
00:17:00,796 --> 00:17:02,616
Now we'll talk about how
resource management works


295
00:17:02,616 --> 00:17:03,286
in more detail.


296
00:17:04,276 --> 00:17:06,276
We will start with
the simple action


297
00:17:06,276 --> 00:17:08,736
of switching audio
from iOS audio to FM.


298
00:17:08,876 --> 00:17:11,816
Then, we'll talk about
native voice recognition,


299
00:17:13,016 --> 00:17:14,746
then how to handle
a backup camera case


300
00:17:14,746 --> 00:17:16,685
where you would not
want iPhone apps


301
00:17:16,685 --> 00:17:19,376
to interrupt you unless
we walk through an example


302
00:17:19,376 --> 00:17:21,296
where Siri triggers
music playback.


303
00:17:22,945 --> 00:17:24,636
So let's look at
playing FM radio.


304
00:17:25,646 --> 00:17:27,306
Let's say iPhone
music is playing


305
00:17:27,306 --> 00:17:31,306
through the car speakers, then
the user wants to play FM radio


306
00:17:31,306 --> 00:17:33,456
through the native system
and it's the Radio button.


307
00:17:37,486 --> 00:17:40,316
The unit sends a changeModes
request to have ownership


308
00:17:40,316 --> 00:17:43,096
of the speakers,
and it's taking it


309
00:17:43,376 --> 00:17:45,766
as the user might continue
listening to FM radio


310
00:17:45,766 --> 00:17:47,366
for a prolonged period of time.


311
00:17:48,796 --> 00:17:50,816
The controller assigns
the audio to the head unit


312
00:17:50,816 --> 00:17:52,856
and it sends a modesChanged
notification.


313
00:17:53,476 --> 00:17:57,386
And the head unit is the new
owner of the audio resource,


314
00:18:01,096 --> 00:18:03,026
so it can now start
playing FM radio.


315
00:18:03,766 --> 00:18:05,556
The mainAudio resource
is permanently assigned


316
00:18:05,556 --> 00:18:06,786
to the head unit at this point.


317
00:18:09,556 --> 00:18:11,366
So, in summary, this
example showed us


318
00:18:11,906 --> 00:18:14,906
when to take a resource and that
the native system should not use


319
00:18:14,906 --> 00:18:17,166
that resource before it is
the owner of that resource.


320
00:18:17,166 --> 00:18:24,086
Let's look at the next example
using native voice recognition.


321
00:18:25,166 --> 00:18:27,366
FM radio is still playing
from our last example.


322
00:18:28,666 --> 00:18:29,376
Let's see what happens


323
00:18:29,376 --> 00:18:31,626
if the user triggers the
native voice recognizer.


324
00:18:33,946 --> 00:18:37,686
The unit requests to temporarily
own the display and audio,


325
00:18:37,686 --> 00:18:39,826
so the transferType
should be set


326
00:18:39,826 --> 00:18:42,396
to borrow the audio and screen.


327
00:18:43,006 --> 00:18:46,856
Both the mainScreen and the
mainAudio are transferred


328
00:18:46,906 --> 00:18:47,466
to the accessory.


329
00:18:50,006 --> 00:18:53,476
And the native voice
recognizer starts.


330
00:18:55,566 --> 00:18:56,906
Once the voice dialogue
is finished,


331
00:18:57,146 --> 00:18:59,066
the head unit returns
the borrowed resources


332
00:18:59,066 --> 00:19:00,606
by sending an unborrow command.


333
00:19:01,886 --> 00:19:05,546
And since the unit was
playing FM radio before,


334
00:19:05,976 --> 00:19:08,276
the resource is again
assigned back to the head unit


335
00:19:10,246 --> 00:19:11,526
and FM radio can resume.


336
00:19:11,686 --> 00:19:15,336
Now you may be wondering,
"Why would the accessory need


337
00:19:15,336 --> 00:19:17,486
to borrow the resource if
it was already the owner?"


338
00:19:17,966 --> 00:19:19,086
Well, that's a great question.


339
00:19:20,136 --> 00:19:22,456
Whenever the resource manager
needs to evaluate a request


340
00:19:22,456 --> 00:19:24,036
to change the ownership
of a resource,


341
00:19:24,096 --> 00:19:26,156
it must know what the current
state of the system is.


342
00:19:26,626 --> 00:19:27,576
The resource manager needs


343
00:19:27,576 --> 00:19:29,366
to know why you're
using the resources


344
00:19:29,366 --> 00:19:31,056
so that they can take
the right decision


345
00:19:31,056 --> 00:19:32,996
if somebody else needs
the resource later on.


346
00:19:35,156 --> 00:19:36,476
Let's move on to
our next example,


347
00:19:37,486 --> 00:19:38,446
showing the backup camera.


348
00:19:40,776 --> 00:19:42,186
Let's say CarPlay
audio is playing


349
00:19:42,186 --> 00:19:44,186
and the native UI is
showing on the screen.


350
00:19:44,886 --> 00:19:47,016
When the user switches
into reverse gear,


351
00:19:47,176 --> 00:19:48,436
the unit borrows the screen.


352
00:19:49,546 --> 00:19:52,366
However, notice it also
tells the resource manager


353
00:19:52,366 --> 00:19:54,156
that the screen cannot
be borrowed again.


354
00:19:59,246 --> 00:20:02,456
The resource manager assigns
the display to the native UI


355
00:20:02,456 --> 00:20:04,526
and also notes the limitation.


356
00:20:06,206 --> 00:20:07,936
So the backup camera
is now shown.


357
00:20:08,736 --> 00:20:10,356
CarPlay audio continues to play,


358
00:20:11,166 --> 00:20:12,766
but now the user
gets a phone call.


359
00:20:15,706 --> 00:20:17,856
The iPhone cannot show
any content on the screen


360
00:20:17,886 --> 00:20:19,966
as the head unit has
constrained the access,


361
00:20:20,196 --> 00:20:22,056
but the ringtone plays
through the speakers.


362
00:20:22,586 --> 00:20:24,676
So how did that happen?


363
00:20:26,046 --> 00:20:27,146
With the changeModes command,


364
00:20:27,146 --> 00:20:29,376
the unit told the resource
manager which rules to apply


365
00:20:29,376 --> 00:20:30,836
by the resources
in its possession.


366
00:20:31,206 --> 00:20:33,136
By setting the borrowConstraint
to anytime,


367
00:20:33,136 --> 00:20:35,026
the unit allows the
application to be able


368
00:20:35,026 --> 00:20:36,126
to borrow the resource.


369
00:20:36,596 --> 00:20:39,536
By setting it to user-initiated
only events triggered


370
00:20:39,536 --> 00:20:40,636
by the user can borrow.


371
00:20:41,566 --> 00:20:44,186
With never, no application
can use the resource,


372
00:20:44,826 --> 00:20:45,756
as with this example.


373
00:20:47,426 --> 00:20:50,276
As you see, the constraints
have a major impact


374
00:20:50,276 --> 00:20:52,166
on the system behavior,
so it's very important


375
00:20:52,166 --> 00:20:53,136
that they are used properly.


376
00:20:53,986 --> 00:20:55,956
Only restrict access
if there's a need


377
00:20:55,956 --> 00:20:57,696
for immediate user attention.


378
00:20:58,146 --> 00:20:59,946
Do not restrict permanent
ownership


379
00:20:59,946 --> 00:21:01,536
when CarPlay is connected.


380
00:21:02,026 --> 00:21:04,666
So that was using backup camera.


381
00:21:06,286 --> 00:21:08,136
And the last example we want
to look at is what happens


382
00:21:08,136 --> 00:21:09,276
when Siri plays music.


383
00:21:10,836 --> 00:21:12,696
Again, we start with
FM radio playing.


384
00:21:13,386 --> 00:21:15,196
The user triggers Siri.


385
00:21:17,896 --> 00:21:19,166
Siri is launched on the phone


386
00:21:19,166 --> 00:21:21,726
and the resource manager
tells the native system


387
00:21:21,726 --> 00:21:23,846
that the resources have
been assigned for Siri.


388
00:21:25,656 --> 00:21:29,386
Siri shows up and the user can
ask, "Siri, play some music."


389
00:21:32,226 --> 00:21:34,386
Siri returns the display
and audio resources,


390
00:21:34,386 --> 00:21:37,066
but the music app now needs the
audio resource to play music.


391
00:21:37,576 --> 00:21:40,926
So the resource manager notifies
the unit that mainAudio is now


392
00:21:40,926 --> 00:21:43,366
with the phone, but the screen
returns to the accessory.


393
00:21:44,446 --> 00:21:46,986
The head unit does not
continue to play FM radio,


394
00:21:47,586 --> 00:21:51,726
and so iPhone audio
is heard in the car.


395
00:21:51,726 --> 00:21:54,956
So what did we see here?


396
00:21:55,456 --> 00:21:57,876
On two occasions, the resource
manager changed the state


397
00:21:57,876 --> 00:21:59,456
without a request
by the head unit.


398
00:21:59,826 --> 00:22:02,676
And this is completely
fine because the apps


399
00:22:02,676 --> 00:22:05,716
on the device request
resources as well.


400
00:22:05,876 --> 00:22:08,146
And if they get them, the
unit is notified about it.


401
00:22:09,066 --> 00:22:10,116
So, how to handle this?


402
00:22:10,956 --> 00:22:14,126
First, after each modesChanged,
you check if you're the owner.


403
00:22:14,586 --> 00:22:16,666
If you are, resume
your activity.


404
00:22:16,866 --> 00:22:19,286
Otherwise, you should wait
for CarPlay to take action.


405
00:22:20,096 --> 00:22:23,076
Second, do not ignore
resource switches to the phone


406
00:22:23,076 --> 00:22:24,736
when they are triggered
by the phone.


407
00:22:27,106 --> 00:22:28,616
OK, so far, we've looked


408
00:22:28,616 --> 00:22:30,936
at examples showing how
resources are being exchanged.


409
00:22:30,936 --> 00:22:32,976
But there is another
situation where both sides want


410
00:22:32,976 --> 00:22:34,366
to accomplish the same task.


411
00:22:34,826 --> 00:22:38,336
So let's look at how
applications are managed.


412
00:22:38,856 --> 00:22:41,106
We need to manage native
and CarPlay applications


413
00:22:41,106 --> 00:22:42,436
which have similar features.


414
00:22:42,436 --> 00:22:43,986
But what are those applications?


415
00:22:44,876 --> 00:22:47,916
They are active route
guidance, phone calls,


416
00:22:48,186 --> 00:22:49,236
and voice recognition.


417
00:22:51,366 --> 00:22:53,016
We achieve those
using appStates.


418
00:22:53,416 --> 00:22:54,426
But what is an appState?


419
00:22:55,056 --> 00:22:57,636
We use different appStates to
record who is currently engaged


420
00:22:57,636 --> 00:22:59,846
in the shared application
that can only be active


421
00:23:00,186 --> 00:23:03,006
on the accessory or the
controller at any given time.


422
00:23:04,036 --> 00:23:06,186
So the three different
appStates are TurnByTurn,


423
00:23:06,636 --> 00:23:08,516
PhoneCall, and Speech.


424
00:23:09,296 --> 00:23:12,416
So let's have a look at how


425
00:23:12,416 --> 00:23:15,106
that route guidance
appState is managed.


426
00:23:16,966 --> 00:23:19,236
When turn-by-turn navigation
is started on the accessory,


427
00:23:19,456 --> 00:23:21,186
it uses a changeModes command


428
00:23:21,306 --> 00:23:23,516
to update the TurnByTurn
appState to be active.


429
00:23:27,646 --> 00:23:30,636
With this example, it is
a last in win situation.


430
00:23:31,136 --> 00:23:33,236
So the controller grants
the TurnByTurn appState


431
00:23:33,236 --> 00:23:35,826
to the accessory, returning a
modesChanged command showing the


432
00:23:35,826 --> 00:23:38,916
accessory as currently
running route guidance.


433
00:23:40,746 --> 00:23:42,136
Now let's look what happens


434
00:23:42,136 --> 00:23:44,926
when the user sets a new
destination using Apple Maps


435
00:23:45,016 --> 00:23:47,006
while the native system
is already guiding.


436
00:23:47,656 --> 00:23:51,466
The user says, "Siri, take me
to the closest coffee shop."


437
00:23:51,936 --> 00:23:54,866
Now, the iPhone has
started route guidance.


438
00:23:54,956 --> 00:23:57,406
So the controller updates
the TurnByTurn appState.


439
00:23:59,806 --> 00:24:01,416
This is the instruction
for the accessory


440
00:24:01,416 --> 00:24:04,036
to stop its own native
turn-by-turn guidance.


441
00:24:05,866 --> 00:24:07,766
Now, the iPhone has
started route guidance,


442
00:24:07,766 --> 00:24:09,846
so the controller updates
the TurnByTurn appState.


443
00:24:10,376 --> 00:24:11,876
This is the instruction
for the accessory


444
00:24:11,876 --> 00:24:14,066
to stop its own native
turn-by-turn guidance.


445
00:24:16,126 --> 00:24:18,716
So now, the Apple Maps
turn-by-turn directions are


446
00:24:18,716 --> 00:24:21,766
shown on the display and
announcement played over audio.


447
00:24:21,766 --> 00:24:24,836
And there will be no conflict
with the native guidance system.


448
00:24:27,736 --> 00:24:29,926
So now when the Apple Maps
turn-by-turn directions are


449
00:24:29,926 --> 00:24:31,906
shown on the display and
the announcement is played,


450
00:24:31,966 --> 00:24:34,406
there will be no conflict with
the native guidance system.


451
00:24:36,406 --> 00:24:37,686
So that was route guidance.


452
00:24:38,246 --> 00:24:39,436
Now let's look at a phone call.


453
00:24:41,326 --> 00:24:43,146
If the unit supports
a second phone


454
00:24:43,306 --> 00:24:44,786
over Bluetooth Hands-Free
Profile


455
00:24:44,786 --> 00:24:46,266
and there was an
ongoing phone call,


456
00:24:46,956 --> 00:24:48,836
the call uses mainAudio
exclusively.


457
00:24:49,306 --> 00:24:51,136
The phone call cannot
be interrupted.


458
00:24:51,536 --> 00:24:53,576
So what happens if the
user gets a phone call


459
00:24:53,576 --> 00:24:54,686
on the CarPlay device?


460
00:24:55,996 --> 00:24:58,826
The CarPlay call rings
only on the device


461
00:24:58,826 --> 00:25:00,996
as it should not interrupt
the ongoing conversation.


462
00:25:01,646 --> 00:25:03,656
This is managed using
the PhoneCall appState.


463
00:25:04,586 --> 00:25:07,216
And lastly, let's look
at voice interactions.


464
00:25:08,146 --> 00:25:11,046
If the unit has a native voice
recognizer when it's running,


465
00:25:11,046 --> 00:25:12,806
it has borrowed the resources


466
00:25:12,946 --> 00:25:15,586
and is exclusively using
the speaker microphone


467
00:25:15,586 --> 00:25:16,686
and screen resources.


468
00:25:17,546 --> 00:25:20,836
But it can be interrupted at any
time by user-initiated events.


469
00:25:21,796 --> 00:25:24,396
So if Siri is triggered
by the user,


470
00:25:25,976 --> 00:25:28,596
native voice recognition
ends and Siri continues


471
00:25:28,636 --> 00:25:29,646
on the in-car display.


472
00:25:30,326 --> 00:25:32,356
The Speech appState is
used to achieve this.


473
00:25:35,126 --> 00:25:38,656
So, in summary, CarPlay
relies on the same resources


474
00:25:38,656 --> 00:25:41,026
as your native system and
is designed to coexist


475
00:25:41,026 --> 00:25:42,706
with your native
user experience.


476
00:25:43,456 --> 00:25:46,346
For a great CarPlay experience,
consider resource handling


477
00:25:46,346 --> 00:25:49,726
for each use case and follow the
CarPlay design recommendations.


478
00:25:50,556 --> 00:25:52,556
The CarPlay specifications
are available


479
00:25:52,556 --> 00:25:53,686
through the MFi Program.


480
00:25:54,456 --> 00:25:56,956
If you haven't watched
Developing CarPlay Systems,


481
00:25:56,956 --> 00:25:59,216
Part 1 yet, I'd encourage
you to go and check that out.


482
00:25:59,856 --> 00:26:01,266
For more information
on this talk,


483
00:26:01,826 --> 00:26:03,616
please visit the
URL on the screen.

