1
00:00:07,516 --> 00:00:16,500
[ Music ]


2
00:00:18,056 --> 00:00:19,516
>> Hi. I'm Conor Hughes from the


3
00:00:19,516 --> 00:00:21,216
iOS Accessibility team and I'm


4
00:00:21,216 --> 00:00:22,356
here to talk about making your


5
00:00:22,356 --> 00:00:23,986
drags and drops in iOS


6
00:00:23,986 --> 00:00:24,496
accessible.


7
00:00:24,496 --> 00:00:26,176
Let's get started.


8
00:00:27,636 --> 00:00:29,576
Let's briefly go over what we're


9
00:00:29,576 --> 00:00:30,646
going to cover.


10
00:00:30,646 --> 00:00:32,286
We'll start with a very brief


11
00:00:32,286 --> 00:00:34,246
refresher of the basics of Drag


12
00:00:34,246 --> 00:00:35,036
and Drop.


13
00:00:35,706 --> 00:00:36,746
Then, we'll go into come


14
00:00:36,746 --> 00:00:37,866
concepts behind the


15
00:00:37,866 --> 00:00:39,456
Accessibility Drag and Drop API.


16
00:00:39,456 --> 00:00:41,586
And then, we'll go into some


17
00:00:41,586 --> 00:00:43,546
examples, first, exposing an


18
00:00:43,546 --> 00:00:44,796
ancestor's drag from an


19
00:00:44,796 --> 00:00:46,676
accessibility element, and then


20
00:00:46,676 --> 00:00:48,356
exposing multiple drops from an


21
00:00:48,356 --> 00:00:49,366
Accessibility element.


22
00:00:50,986 --> 00:00:52,526
To recap Drag and Drop at a high


23
00:00:52,526 --> 00:00:53,896
level, Drag and Drop is a


24
00:00:53,896 --> 00:00:55,866
technology introduced with iOS


25
00:00:55,866 --> 00:00:57,696
11 and provides powerful ways


26
00:00:57,696 --> 00:00:58,656
for someone using your


27
00:00:58,656 --> 00:01:00,536
application to transfer data


28
00:01:00,536 --> 00:01:02,366
both within the application and


29
00:01:02,366 --> 00:01:03,396
between applications.


30
00:01:04,566 --> 00:01:05,836
Drag and Drop introduced the


31
00:01:05,836 --> 00:01:07,936
concept of interactions, which


32
00:01:07,936 --> 00:01:09,246
are hosted by views in your


33
00:01:09,246 --> 00:01:09,926
application.


34
00:01:10,606 --> 00:01:12,306
To start a drag from a view, you


35
00:01:12,306 --> 00:01:14,506
add a UIDrag interaction object


36
00:01:14,506 --> 00:01:15,686
to it.


37
00:01:15,886 --> 00:01:17,566
To accept a drop, you add a


38
00:01:17,566 --> 00:01:18,756
UIDrop interaction.


39
00:01:19,086 --> 00:01:20,556
If you're not familiar with


40
00:01:20,556 --> 00:01:22,036
these classes you should watch


41
00:01:22,036 --> 00:01:23,416
the Introducing Drag and Drop


42
00:01:23,416 --> 00:01:26,276
session from WWDC2017 for more


43
00:01:26,276 --> 00:01:27,726
information, and then come back


44
00:01:27,726 --> 00:01:28,326
to this video.


45
00:01:30,316 --> 00:01:32,016
Now, let's start to talk about


46
00:01:32,016 --> 00:01:32,736
accessibility.


47
00:01:32,796 --> 00:01:34,526
Of course, you want to expose


48
00:01:34,526 --> 00:01:36,006
the power of your Drag and Drop


49
00:01:36,006 --> 00:01:37,706
interactions to people using


50
00:01:37,706 --> 00:01:38,806
your app through an assistive


51
00:01:38,806 --> 00:01:40,146
technology like Voiceover.


52
00:01:40,776 --> 00:01:43,146
There are a few accessibility


53
00:01:43,146 --> 00:01:44,736
problems the accessibility Drag


54
00:01:44,736 --> 00:01:45,996
and Drop API's were designed to


55
00:01:45,996 --> 00:01:46,356
solve.


56
00:01:47,396 --> 00:01:48,696
First, your accessibility


57
00:01:48,696 --> 00:01:50,046
element might not host


58
00:01:50,046 --> 00:01:51,226
interactions directly.


59
00:01:51,706 --> 00:01:53,036
For instance, your accessibility


60
00:01:53,036 --> 00:01:54,546
element might be a view whose


61
00:01:54,546 --> 00:01:56,816
subviews host interactions.


62
00:01:57,516 --> 00:01:59,316
Or your element might descend


63
00:01:59,316 --> 00:02:00,356
from a view that hosts


64
00:02:00,356 --> 00:02:01,776
interactions that are logically


65
00:02:01,776 --> 00:02:03,876
associated with it.


66
00:02:03,876 --> 00:02:04,756
The solution is that the


67
00:02:04,756 --> 00:02:06,276
Accessibility Drag and Drop


68
00:02:06,276 --> 00:02:08,086
API's allow you to specify


69
00:02:08,086 --> 00:02:09,925
logical drags and drops to the


70
00:02:09,925 --> 00:02:11,966
system in a way that makes them


71
00:02:11,966 --> 00:02:12,976
usable with assistive


72
00:02:12,976 --> 00:02:13,756
technologies.


73
00:02:14,056 --> 00:02:15,846
Let's get into those API's now.


74
00:02:16,356 --> 00:02:19,006
The UIAccessibilityDragging


75
00:02:19,006 --> 00:02:20,256
informal protocol defines two


76
00:02:20,256 --> 00:02:21,306
properties that you use to


77
00:02:21,306 --> 00:02:22,526
express drags and drops to


78
00:02:22,526 --> 00:02:23,216
Accessibility.


79
00:02:23,316 --> 00:02:25,606
It deals with the concept of


80
00:02:25,606 --> 00:02:27,486
Drag Sources and Drop Points.


81
00:02:28,576 --> 00:02:30,306
Drag Sources describe where to


82
00:02:30,306 --> 00:02:31,826
start drags that are associated


83
00:02:31,826 --> 00:02:33,746
with an element and Drop Points


84
00:02:33,746 --> 00:02:35,496
describe places associated with


85
00:02:35,496 --> 00:02:36,786
an element where items can be


86
00:02:36,786 --> 00:02:37,306
dropped.


87
00:02:37,916 --> 00:02:39,076
To use these properties, you can


88
00:02:39,076 --> 00:02:40,616
assign to them or override the


89
00:02:40,616 --> 00:02:41,686
getter to provide data on


90
00:02:41,686 --> 00:02:42,176
demand.


91
00:02:42,996 --> 00:02:45,306
These drags and drops are


92
00:02:45,306 --> 00:02:46,756
exposed to users of assistive


93
00:02:46,756 --> 00:02:48,246
technologies in much the same


94
00:02:48,246 --> 00:02:49,836
way as Accessibility custom


95
00:02:49,836 --> 00:02:50,406
actions are.


96
00:02:51,086 --> 00:02:55,756
So, that's the API, there.


97
00:02:55,886 --> 00:02:57,376
Often, drags and drops are


98
00:02:57,376 --> 00:02:58,706
exposed automatically to


99
00:02:58,706 --> 00:03:00,176
Accessibility by the system.


100
00:03:00,546 --> 00:03:03,006
And if they're found


101
00:03:03,006 --> 00:03:04,436
automatically they're assigned a


102
00:03:04,436 --> 00:03:07,096
default name but note that only


103
00:03:07,096 --> 00:03:08,566
interactions in an element


104
00:03:08,566 --> 00:03:10,016
subtree are automatically


105
00:03:10,016 --> 00:03:10,696
exposed.


106
00:03:10,906 --> 00:03:13,356
The UIAccessibilityDragging


107
00:03:13,356 --> 00:03:15,196
protocol allows you to expose


108
00:03:15,196 --> 00:03:16,596
exactly the interactions that


109
00:03:16,596 --> 00:03:18,426
make sense, wherever they may


110
00:03:18,426 --> 00:03:19,446
actually live in your View


111
00:03:19,446 --> 00:03:20,006
hierarchy.


112
00:03:20,956 --> 00:03:22,406
Allows you to specify a great


113
00:03:22,406 --> 00:03:23,506
name for each one.


114
00:03:23,506 --> 00:03:26,346
So, you should really consider


115
00:03:26,346 --> 00:03:27,646
implementing it to provide the


116
00:03:27,646 --> 00:03:29,166
best experience for someone


117
00:03:29,166 --> 00:03:30,436
using your application through


118
00:03:30,436 --> 00:03:31,446
an assistive technology.


119
00:03:32,816 --> 00:03:35,216
Now, let's look at an example of


120
00:03:35,216 --> 00:03:36,676
how you can expose drags with


121
00:03:36,676 --> 00:03:38,046
the UIAccessibilityDragging


122
00:03:38,536 --> 00:03:40,586
informal protocol.


123
00:03:41,106 --> 00:03:42,576
Let's say we're building a bar


124
00:03:42,576 --> 00:03:44,326
graph and we've chosen to draw


125
00:03:44,326 --> 00:03:46,806
the bars by configuring CALayer


126
00:03:46,806 --> 00:03:47,366
objects.


127
00:03:47,366 --> 00:03:49,376
And we're going to try and


128
00:03:49,376 --> 00:03:51,836
enable dragging of the bars


129
00:03:51,836 --> 00:03:53,226
themselves, to drag the bar


130
00:03:53,226 --> 00:03:53,506
data.


131
00:03:53,996 --> 00:03:56,896
So, here is an example of how


132
00:03:56,896 --> 00:03:57,536
that might look.


133
00:03:57,536 --> 00:03:59,216
And again, each of these bars is


134
00:03:59,216 --> 00:04:00,966
going to be a CALayer object.


135
00:04:01,556 --> 00:04:03,286
How would we go about


136
00:04:03,286 --> 00:04:05,336
implementing drag for this?


137
00:04:05,896 --> 00:04:08,366
It might look something like


138
00:04:08,366 --> 00:04:09,000
this.


139
00:04:10,346 --> 00:04:11,886
Note that because layers aren't


140
00:04:11,886 --> 00:04:13,356
views they can't host


141
00:04:13,356 --> 00:04:14,176
interactions.


142
00:04:14,176 --> 00:04:16,106
So, the bar graph itself has the


143
00:04:16,106 --> 00:04:17,176
interaction installed.


144
00:04:17,716 --> 00:04:19,286
And in this itemsForBeginning


145
00:04:19,286 --> 00:04:22,636
session callback, depending on


146
00:04:22,636 --> 00:04:24,926
the bar that is hit tested, we


147
00:04:24,926 --> 00:04:27,376
return different data in the


148
00:04:27,376 --> 00:04:28,086
drag item.


149
00:04:29,156 --> 00:04:30,266
Note that even though I only


150
00:04:30,266 --> 00:04:32,086
have one drag interaction I am


151
00:04:32,086 --> 00:04:33,716
using it to support multiple


152
00:04:33,716 --> 00:04:34,816
logical drags.


153
00:04:34,816 --> 00:04:36,376
This is a totally supported


154
00:04:36,376 --> 00:04:37,836
approach and it is an example of


155
00:04:37,836 --> 00:04:39,466
how powerful, in general, the


156
00:04:39,466 --> 00:04:41,116
base Drag and Drop API's are.


157
00:04:41,726 --> 00:04:44,356
Now, how do you make this


158
00:04:44,356 --> 00:04:44,946
accessible?


159
00:04:45,086 --> 00:04:46,986
A good approach to making a


160
00:04:46,986 --> 00:04:49,596
graph like this accessible is to


161
00:04:49,596 --> 00:04:51,836
expose each bar as an


162
00:04:51,836 --> 00:04:54,076
Accessibility element, which


163
00:04:54,076 --> 00:04:54,616
I've done here.


164
00:04:55,676 --> 00:04:57,346
Note that what I'm doing here is


165
00:04:57,346 --> 00:04:58,946
providing data about the logical


166
00:04:58,946 --> 00:05:01,096
structure of my app's content to


167
00:05:01,096 --> 00:05:02,436
the Accessibility Runtime.


168
00:05:02,946 --> 00:05:03,916
That enables assistive


169
00:05:03,916 --> 00:05:05,356
technologies to expose the


170
00:05:05,356 --> 00:05:06,726
content in a different way.


171
00:05:07,686 --> 00:05:08,976
We'll need to do the same thing


172
00:05:08,976 --> 00:05:10,276
to make the drags accessible,


173
00:05:10,276 --> 00:05:12,126
and to do so we'll need to learn


174
00:05:12,126 --> 00:05:13,466
some more specifics about the


175
00:05:13,466 --> 00:05:15,526
UIAccessibilityDragging informal


176
00:05:15,526 --> 00:05:15,966
protocol.


177
00:05:17,326 --> 00:05:19,266
First, let's learn about the


178
00:05:19,266 --> 00:05:20,456
class UIAccessibility


179
00:05:20,456 --> 00:05:21,426
LocationDescriptor.


180
00:05:22,436 --> 00:05:24,806
This class is data that


181
00:05:24,806 --> 00:05:26,516
describes where an interaction


182
00:05:26,516 --> 00:05:30,686
is by specifying a point in a


183
00:05:30,686 --> 00:05:33,896
view with a particular name.


184
00:05:34,836 --> 00:05:37,086
So, for an example in our bar


185
00:05:37,086 --> 00:05:39,776
graph, a location descriptor for


186
00:05:39,776 --> 00:05:42,736
dragging that bar there, might


187
00:05:42,736 --> 00:05:43,486
look like this.


188
00:05:43,686 --> 00:05:45,516
Its name might be Drag Bar Data.


189
00:05:46,096 --> 00:05:47,766
The view would be the bar graph


190
00:05:47,766 --> 00:05:48,516
view itself.


191
00:05:48,516 --> 00:05:49,796
And the point would be a point


192
00:05:49,796 --> 00:05:50,976
that's located within the bar.


193
00:05:54,166 --> 00:05:54,896
So, what do we do with


194
00:05:54,896 --> 00:05:55,666
UIAccessibility


195
00:05:55,666 --> 00:05:56,906
LocationDescriptor options?


196
00:05:58,056 --> 00:05:59,326
Well, we assign them to the two


197
00:05:59,326 --> 00:06:00,616
properties mentioned earlier.


198
00:06:01,136 --> 00:06:03,186
The two properties in the


199
00:06:03,186 --> 00:06:04,966
protocol are accessibilityDrag


200
00:06:04,966 --> 00:06:05,916
SourceDescriptors and


201
00:06:05,916 --> 00:06:06,816
accessibilityDrop


202
00:06:06,816 --> 00:06:07,686
PointDescriptors.


203
00:06:09,536 --> 00:06:11,276
DragSourceDescriptors is used to


204
00:06:11,276 --> 00:06:13,056
expose drag sources that are


205
00:06:13,056 --> 00:06:14,416
logically associated with an


206
00:06:14,416 --> 00:06:16,736
element and DropPointDescriptors


207
00:06:16,846 --> 00:06:18,966
exposes places to drop that are


208
00:06:18,966 --> 00:06:20,066
logically associated with this


209
00:06:20,066 --> 00:06:20,516
element.


210
00:06:21,146 --> 00:06:22,506
These are the properties you use


211
00:06:22,506 --> 00:06:23,956
to describe to Accessibility


212
00:06:24,026 --> 00:06:25,646
what can be dragged from and


213
00:06:25,646 --> 00:06:27,396
dropped into a given element.


214
00:06:28,556 --> 00:06:30,496
One important point to be aware


215
00:06:30,496 --> 00:06:31,856
of is that the descriptors must


216
00:06:31,856 --> 00:06:33,336
reference the View that actually


217
00:06:33,336 --> 00:06:34,406
has the interaction.


218
00:06:34,796 --> 00:06:36,216
So, for instance, you shouldn't


219
00:06:36,216 --> 00:06:37,676
reference a point in your window


220
00:06:37,676 --> 00:06:38,966
that happens to be within the


221
00:06:38,966 --> 00:06:40,326
View that hosts the interaction.


222
00:06:40,486 --> 00:06:41,646
You should specify that view


223
00:06:41,646 --> 00:06:42,156
itself.


224
00:06:44,336 --> 00:06:46,206
So, pulling it together; to


225
00:06:46,206 --> 00:06:47,816
expose a single drag from some


226
00:06:47,816 --> 00:06:49,036
element doesn't take that much


227
00:06:49,036 --> 00:06:49,496
code, at all.


228
00:06:49,776 --> 00:06:51,056
You make a Descriptor that


229
00:06:51,056 --> 00:06:52,336
specifies that drag by


230
00:06:52,336 --> 00:06:53,826
specifying a point in the View


231
00:06:53,826 --> 00:06:55,046
that hosts the interaction and


232
00:06:55,046 --> 00:06:55,576
giving it a name.


233
00:06:55,576 --> 00:06:57,166
And then, you set the


234
00:06:57,166 --> 00:06:58,056
accessibilityDrag


235
00:06:58,056 --> 00:06:59,736
SourceDescriptors property


236
00:06:59,736 --> 00:07:00,976
element to an array that


237
00:07:00,976 --> 00:07:01,996
includes that descriptor.


238
00:07:03,986 --> 00:07:05,796
Let's go back to our bar graph


239
00:07:05,796 --> 00:07:07,156
code that set the Accessibility


240
00:07:07,156 --> 00:07:08,306
elements of the graph view.


241
00:07:08,556 --> 00:07:10,226
What do we need to do to expose


242
00:07:10,226 --> 00:07:11,500
dragging each element?


243
00:07:14,286 --> 00:07:15,636
We compute a point within the


244
00:07:15,636 --> 00:07:17,636
bar represented by that element


245
00:07:17,636 --> 00:07:19,226
in the View's coordinate space,


246
00:07:19,976 --> 00:07:21,296
make an appropriate descriptor


247
00:07:21,296 --> 00:07:22,556
with that point in that View.


248
00:07:22,556 --> 00:07:24,556
And set the accessibilityDrag


249
00:07:24,556 --> 00:07:25,916
SourceDescriptors property of


250
00:07:25,916 --> 00:07:26,486
the element.


251
00:07:26,566 --> 00:07:27,236
And that's it.


252
00:07:30,446 --> 00:07:31,326
Now, let's look at a slightly


253
00:07:31,326 --> 00:07:31,996
different example.


254
00:07:32,216 --> 00:07:34,086
Let's try to expose multiple


255
00:07:34,086 --> 00:07:35,576
drops from a single element.


256
00:07:36,626 --> 00:07:37,766
This might be useful for a


257
00:07:37,766 --> 00:07:39,656
situation like a contact card,


258
00:07:40,226 --> 00:07:41,746
where the card is small enough


259
00:07:42,596 --> 00:07:44,736
that we're going to expose it as


260
00:07:44,736 --> 00:07:47,406
one element to Accessibility.


261
00:07:47,766 --> 00:07:49,796
But there are multiple wells


262
00:07:49,796 --> 00:07:52,486
into which we can drop content


263
00:07:52,486 --> 00:07:54,466
into the card.


264
00:07:54,506 --> 00:07:55,746
So, for instance, it might have


265
00:07:55,746 --> 00:07:58,126
a portrait and a space for you


266
00:07:58,126 --> 00:07:59,986
to drop arbitrary attachments


267
00:07:59,986 --> 00:08:00,736
for that contact.


268
00:08:01,546 --> 00:08:03,966
Now, that we know how to use the


269
00:08:03,966 --> 00:08:05,686
UIAccessibilityDragging informal


270
00:08:05,686 --> 00:08:07,056
protocol, exposing these is


271
00:08:07,056 --> 00:08:07,736
straightforward.


272
00:08:09,036 --> 00:08:11,126
We can override the


273
00:08:11,126 --> 00:08:12,096
accessibilityDrop


274
00:08:12,096 --> 00:08:13,676
PointDescriptors getter of the


275
00:08:13,676 --> 00:08:17,346
View, compute the midpoints of


276
00:08:17,346 --> 00:08:19,626
the two wells, and then return


277
00:08:19,626 --> 00:08:20,966
two location descriptors that


278
00:08:20,966 --> 00:08:22,256
name each drop point.


279
00:08:24,616 --> 00:08:26,276
So, in summary, because you want


280
00:08:26,276 --> 00:08:27,656
everyone to be able to use all


281
00:08:27,656 --> 00:08:29,206
the cool features you build into


282
00:08:29,206 --> 00:08:31,136
your app, you want to make sure


283
00:08:32,206 --> 00:08:33,926
that the drags and drops


284
00:08:33,926 --> 00:08:35,316
associated with Accessibility


285
00:08:35,316 --> 00:08:36,876
elements in your app are exposed


286
00:08:36,876 --> 00:08:38,106
to assistive technologies.


287
00:08:38,916 --> 00:08:40,015
To do so, use the


288
00:08:40,015 --> 00:08:41,096
accessibilityDrag


289
00:08:41,096 --> 00:08:42,535
SourceDescriptors property to


290
00:08:42,535 --> 00:08:43,916
specify what drag should be


291
00:08:43,916 --> 00:08:45,546
exposed, and the


292
00:08:45,546 --> 00:08:46,496
accessibilityDrop


293
00:08:46,496 --> 00:08:48,256
PointDescriptors property to


294
00:08:48,256 --> 00:08:49,346
specify what drop should be


295
00:08:49,346 --> 00:08:49,876
exposed.


296
00:08:50,326 --> 00:08:51,746
Finally, these properties are


297
00:08:51,746 --> 00:08:53,506
just arrays of UIAccessibility


298
00:08:53,506 --> 00:08:54,906
LocationDescriptor objects,


299
00:08:55,236 --> 00:08:56,836
which describe to Accessibility


300
00:08:57,066 --> 00:08:58,796
where these drags and drops are


301
00:08:58,956 --> 00:09:01,006
in your application and how to


302
00:09:01,276 --> 00:09:02,806
activate them.


303
00:09:02,926 --> 00:09:03,986
For more information, you can


304
00:09:03,986 --> 00:09:05,156
check out this video online.


305
00:09:05,616 --> 00:09:06,976
And thanks for watching.

