1
00:00:00,506 --> 00:00:15,486
[ Silence ]


2
00:00:15,986 --> 00:00:24,516
>> Well, good morning
and welcome.


3
00:00:24,516 --> 00:00:25,276
[ Applause ]


4
00:00:25,276 --> 00:00:28,246
>> I'm Bud Tribble, Vice
President of Software Technology


5
00:00:28,246 --> 00:00:29,456
at Apple and I'm going to talk


6
00:00:29,456 --> 00:00:32,566
about maximizing
battery life in OS X.


7
00:00:34,556 --> 00:00:41,206
Now, you know, battery
life is just a key feature


8
00:00:41,206 --> 00:00:42,016
for customers.


9
00:00:42,016 --> 00:00:45,146
I know its key for me,
I know its key for you.


10
00:00:45,146 --> 00:00:48,506
And as you can tell from
our key note sessions,


11
00:00:48,956 --> 00:00:51,596
battery life is one of the
places where we put a lot


12
00:00:51,596 --> 00:00:53,636
of focus in OS X Mavericks.


13
00:00:54,136 --> 00:00:58,546
And the reason is simple,
mobility is a key feature


14
00:00:58,546 --> 00:01:02,156
for our customers and battery
life is key for mobility.


15
00:01:02,816 --> 00:01:08,686
Now, mobility has always
been an important feature.


16
00:01:09,726 --> 00:01:11,666
However, the user experience


17
00:01:11,666 --> 00:01:13,596
for mobility is not
always been great.


18
00:01:13,596 --> 00:01:16,896
This is actually an Osborne
1, you probably don't--


19
00:01:16,896 --> 00:01:19,026
most of you probably
don't remember


20
00:01:19,026 --> 00:01:20,386
but the Osborne 1 was famous


21
00:01:20,386 --> 00:01:22,896
for being the first computer
you could carry around with you.


22
00:01:23,306 --> 00:01:25,916
However, even that in that
case because of the CRT


23
00:01:25,916 --> 00:01:28,526
and other things, you had
to find a place to plug it


24
00:01:28,526 --> 00:01:30,836
in as soon as you
wanted to use it.


25
00:01:31,406 --> 00:01:34,896
Of course things have gotten
a lot better over the years


26
00:01:35,216 --> 00:01:40,956
but nonetheless if you are
at 3 hours battery life


27
00:01:40,956 --> 00:01:44,446
on your system, you're spending
most of your time just wondering


28
00:01:44,446 --> 00:01:46,736
around looking for the next plug
and I'm sure you've all been


29
00:01:46,736 --> 00:01:48,886
in the airport and that
sort of a situation.


30
00:01:49,536 --> 00:01:51,866
Now, your battery life
will vary depending


31
00:01:51,866 --> 00:01:53,406
on what you're doing of course.


32
00:01:53,766 --> 00:01:57,716
But the goal that we set out for
was that for most of the people,


33
00:01:58,006 --> 00:01:59,506
most of the users, most


34
00:01:59,506 --> 00:02:03,396
of the time their battery would
last all day, they would plug it


35
00:02:03,396 --> 00:02:04,856
in at night and that was it.


36
00:02:05,726 --> 00:02:08,376
Now, we know that
that's a game changer


37
00:02:08,556 --> 00:02:11,806
because of our experience
with products like iPad,


38
00:02:11,806 --> 00:02:16,886
where that's the usual behavior
and once you get to that sort


39
00:02:16,886 --> 00:02:20,676
of threshold, life gets a lot
better, there's a lot of bang


40
00:02:20,676 --> 00:02:23,336
for the buck in getting
to that point.


41
00:02:27,766 --> 00:02:30,086
Now, our latest products
which I'll go


42
00:02:30,086 --> 00:02:32,406
into some more detail we
think we've gotten there


43
00:02:32,406 --> 00:02:33,876
through a number of techniques.


44
00:02:33,876 --> 00:02:36,456
It wasn't easy but
it was a lot of fun


45
00:02:36,456 --> 00:02:40,526
over the development really with
a laser focus on battery life,


46
00:02:40,526 --> 00:02:43,766
kind of a new perspective
in how you develop apps.


47
00:02:43,766 --> 00:02:47,196
I hope to sort of translate
some of that to you or to--


48
00:02:47,456 --> 00:02:50,886
I imbibe you with that because
in fact application developers


49
00:02:50,886 --> 00:02:54,536
have a huge impact on the
user's battery life as well.


50
00:02:55,326 --> 00:02:59,176
So, here we have a typical
customer out at the beach,


51
00:02:59,246 --> 00:03:03,986
they've got the-- I don't
know if this is Mavericks,


52
00:03:04,056 --> 00:03:07,236
probably isn't Mavericks
but here's a surfer who is,


53
00:03:07,236 --> 00:03:11,066
you know, in between
surfing is editing his movies


54
00:03:11,066 --> 00:03:12,076
with Final Cut Pro.


55
00:03:12,566 --> 00:03:18,096
Well, even in this case assuming
he spends a reasonably long time


56
00:03:18,096 --> 00:03:20,496
surfing even with
a heavy duty app


57
00:03:20,496 --> 00:03:24,196
like Final Cut Pro he may
experience all-day battery life.


58
00:03:24,636 --> 00:03:26,896
Users do not use our computers--


59
00:03:26,996 --> 00:03:29,146
do not use their
computers continuously


60
00:03:29,456 --> 00:03:31,856
and you can give them that
experience of only plugging


61
00:03:31,856 --> 00:03:35,196
in at night in just a wide
variety of situations.


62
00:03:36,216 --> 00:03:40,506
Now, with the latest MacBook
Airs combination of the hardware


63
00:03:40,506 --> 00:03:45,116
and the latest MacBook Airs
that has well ULT processors


64
00:03:45,346 --> 00:03:46,376
which are very efficient,


65
00:03:46,936 --> 00:03:52,616
and Mac OS X Mavericks we think
we have reached that threshold


66
00:03:52,906 --> 00:03:54,736
where people can
start to not think


67
00:03:54,736 --> 00:03:56,446
about their battery
during the day


68
00:03:56,446 --> 00:03:59,176
and we think there's
incredible value to that.


69
00:03:59,386 --> 00:04:02,246
Now, I'll go into some
detail on how we get there,


70
00:04:02,656 --> 00:04:06,496
it's actually there's a
lot of ingredients that go


71
00:04:06,496 --> 00:04:08,876
into giving the customers
a great battery life.


72
00:04:09,156 --> 00:04:14,446
Starting with chemistry, the
chemistry in the battery,


73
00:04:14,976 --> 00:04:18,125
now we're used to Moore's law


74
00:04:18,125 --> 00:04:21,536
with silicon wherever 18
months things get twice as--


75
00:04:21,956 --> 00:04:23,636
you have twice as
much compute power,


76
00:04:24,016 --> 00:04:25,786
that's not the case
with chemistry.


77
00:04:26,276 --> 00:04:28,996
With batteries, batteries
have been slowly


78
00:04:28,996 --> 00:04:30,606
but surely getting
better over the year


79
00:04:30,606 --> 00:04:33,976
but the gains are measured in
single digit percentage points.


80
00:04:34,536 --> 00:04:40,686
Nonetheless, Apple's been paying
a tremendous amount of attention


81
00:04:41,096 --> 00:04:44,056
to battery life technology
and battery chemistry


82
00:04:44,216 --> 00:04:46,116
and we have gotten
gradually better.


83
00:04:46,116 --> 00:04:48,796
So, this is one of the
ingredients in getting there


84
00:04:49,036 --> 00:04:50,706
in terms of all-day
battery life.


85
00:04:52,296 --> 00:04:55,906
Second area though, the
hardware itself the silicon,


86
00:04:56,416 --> 00:05:01,336
both at the atomic scale, the
nanoscale and the architecture


87
00:05:01,336 --> 00:05:05,506
of the chip itself, that's
extremely important at getting


88
00:05:05,506 --> 00:05:06,506
to all-day battery life.


89
00:05:06,506 --> 00:05:08,816
I'll go into that
in some detail.


90
00:05:09,446 --> 00:05:12,146
Of course the system
software is responsible


91
00:05:12,146 --> 00:05:15,976
for scheduling the CPU
and other resources


92
00:05:16,226 --> 00:05:20,776
in the way that's most energy
efficient and we've done a lot,


93
00:05:20,776 --> 00:05:24,106
this is where we've done a lot
of work in Mac OS X Mavericks


94
00:05:24,256 --> 00:05:26,976
to make sure that things
are as efficiently scheduled


95
00:05:26,976 --> 00:05:31,216
as possible that the energy
is being spent on work


96
00:05:31,216 --> 00:05:34,496
that the user actually
wants done versus work


97
00:05:34,686 --> 00:05:37,286
that maybe they don't
care about.


98
00:05:37,286 --> 00:05:39,446
So, we'll go into a
lot more detail on that


99
00:05:39,446 --> 00:05:41,096
and actually a lot
of sessions further


100
00:05:41,096 --> 00:05:42,936
on during the week
we're going to focus


101
00:05:42,936 --> 00:05:44,296
on that sort of thing as well.


102
00:05:44,296 --> 00:05:47,926
And then finally, as I mentioned
you the application developer


103
00:05:47,926 --> 00:05:49,376
are part of the equation here.


104
00:05:49,746 --> 00:05:54,176
And it's important for you to
use the tools that are provided


105
00:05:54,176 --> 00:05:57,116
in Mac OS X Mavericks to
take, take a microscope,


106
00:05:57,116 --> 00:06:00,346
take a closer look at how your
application is using energy


107
00:06:00,796 --> 00:06:06,196
and try and maximize the
efficiency to give that customer


108
00:06:06,336 --> 00:06:08,886
that all-day battery life
that they really want.


109
00:06:09,716 --> 00:06:15,436
Now, Apple is, as a company,
uniquely positioned compared


110
00:06:15,436 --> 00:06:17,916
to a lot of others being
at the intersection


111
00:06:17,916 --> 00:06:19,246
of hardware and software.


112
00:06:19,516 --> 00:06:23,176
We build hardware and we build
the software that goes with it.


113
00:06:23,376 --> 00:06:26,756
The system software so we can
spend a lot of time making sure


114
00:06:26,756 --> 00:06:29,646
that those two things
are optimized together


115
00:06:29,646 --> 00:06:33,516
and play well together to give
maximum battery life possible.


116
00:06:34,176 --> 00:06:36,826
And that's what I want to
spend some time talking about.


117
00:06:37,186 --> 00:06:40,856
How the hardware plus the
software working together


118
00:06:41,396 --> 00:06:42,906
maximizes battery life.


119
00:06:43,556 --> 00:06:47,496
Now, silicon itself
has come along way


120
00:06:47,496 --> 00:06:48,666
in the last thirty years.


121
00:06:48,896 --> 00:06:52,706
So, this is actually
on your left.


122
00:06:52,706 --> 00:06:57,076
The original 68K, the
68,000 processors that went


123
00:06:57,076 --> 00:07:01,396
into the Mac 128K and
Mac 512 back in 1984.


124
00:07:01,896 --> 00:07:08,506
Now, that chip had oddly enough,
around 68,000 transistors on it.


125
00:07:09,326 --> 00:07:13,266
The Intel Core i7, the
fourth-generation Core i7


126
00:07:13,266 --> 00:07:15,896
that we have in the
MacBook Air has


127
00:07:15,896 --> 00:07:19,546
about 1.4 billion
transistors on it.


128
00:07:19,976 --> 00:07:23,366
Now, you know, the transistors


129
00:07:23,366 --> 00:07:26,656
in the original Mac we're
not all that efficient.


130
00:07:26,656 --> 00:07:30,496
In fact, if they drew the
same, if the transistors


131
00:07:30,496 --> 00:07:33,136
in the Core i7 were drawing
the same amount of power


132
00:07:33,136 --> 00:07:37,486
as the transistors in the 68K,
then the amount of power needed


133
00:07:37,486 --> 00:07:41,596
to run the Core i7 would be
equivalent to the power drawn


134
00:07:41,596 --> 00:07:46,746
by about 10 US average
households about 20,000 kilowatt


135
00:07:47,706 --> 00:07:49,846
or 20,000-- 20 kilowatts.


136
00:07:50,246 --> 00:07:53,706
Obviously, you know, a lot
has gone into making sure


137
00:07:53,706 --> 00:07:57,426
that that catastrophe doesn't
happen, one of the things is


138
00:07:57,426 --> 00:08:02,426
of course the transistors
just got smaller but again,


139
00:08:02,426 --> 00:08:04,526
this chip is running
at a higher frequency


140
00:08:04,856 --> 00:08:08,616
and thus using more power
just because of that.


141
00:08:08,616 --> 00:08:11,986
So, a lot of work had
to go in to the physics


142
00:08:11,986 --> 00:08:14,566
of the transistors in order
to make them more efficient.


143
00:08:14,766 --> 00:08:19,366
I want to talk a little
bit about some of those.


144
00:08:19,696 --> 00:08:22,536
So, Intel in starting


145
00:08:22,536 --> 00:08:26,056
at the early 2000 began using
something called strained


146
00:08:26,056 --> 00:08:29,116
silicon, not just normal
silicon but strained silicon.


147
00:08:29,116 --> 00:08:33,696
Strained silicon actually
has germanium atoms inserted


148
00:08:33,996 --> 00:08:38,525
in between the silicon atoms and
the net result of that is that--


149
00:08:38,525 --> 00:08:41,905
is that they can run
at a lower voltage.


150
00:08:41,905 --> 00:08:44,396
The voltage gap is
lower and running


151
00:08:44,396 --> 00:08:46,196
at a lower voltage
has a big effect.


152
00:08:46,466 --> 00:08:49,426
Energy draw tends to be
proportional to voltage squared


153
00:08:49,426 --> 00:08:51,946
so anything you can do
to reduce the voltage


154
00:08:52,306 --> 00:08:55,866
and still switch those
transistors has a big effect.


155
00:08:55,866 --> 00:08:59,666
So, Intel put a lot of effort
into moving to strained silicon.


156
00:09:00,386 --> 00:09:01,706
But that wasn't enough.


157
00:09:01,706 --> 00:09:02,886
These things went forward.


158
00:09:02,886 --> 00:09:07,476
Another problem arose which
was that between the gate


159
00:09:07,476 --> 00:09:09,736
and the channel in
this transistors,


160
00:09:10,006 --> 00:09:12,076
there's an insulator,
silicon dioxide.


161
00:09:12,556 --> 00:09:15,596
Well that silicon dioxide as the
transistor shrunk was getting


162
00:09:15,596 --> 00:09:17,406
to be just a few atoms thick.


163
00:09:17,966 --> 00:09:20,896
And as a result electrons
actually tunnel through there,


164
00:09:21,176 --> 00:09:22,466
they're leaking through there


165
00:09:22,586 --> 00:09:25,196
and that leakage is
simply wasted energy.


166
00:09:25,526 --> 00:09:29,296
There's R-squared energy leaked,
being wasted in that case.


167
00:09:29,296 --> 00:09:31,426
So, what Intel did is they
looked around and they said,


168
00:09:31,626 --> 00:09:33,876
"Is there any way we can make
those gates a little thicker


169
00:09:33,876 --> 00:09:35,526
but still get the
same capacity."


170
00:09:35,526 --> 00:09:36,406
And that's where they came


171
00:09:36,406 --> 00:09:39,306
up with what's called
high-k metal gates.


172
00:09:39,766 --> 00:09:42,216
And that those start
being used in 2007.


173
00:09:42,216 --> 00:09:45,076
That was a big breakthrough
because you could get rid


174
00:09:45,076 --> 00:09:46,726
of that leakage that would--


175
00:09:46,726 --> 00:09:49,616
was really sitting there
continually drawing


176
00:09:49,616 --> 00:09:53,686
down your battery and they
used a material called hafnium,


177
00:09:53,686 --> 00:09:56,156
hafnium oxide which oxides


178
00:09:56,156 --> 00:09:58,386
which have a very high
dielectric constant


179
00:09:58,386 --> 00:10:00,226
so you can increase the
thickness of the gate.


180
00:10:00,876 --> 00:10:03,806
And then finally,
most recently in 2011,


181
00:10:03,806 --> 00:10:04,866
they came up with something


182
00:10:05,186 --> 00:10:07,346
that I guess they're marketing
guys called it Tri-gate


183
00:10:07,346 --> 00:10:09,476
but it's really a
three-dimensional structure


184
00:10:09,476 --> 00:10:12,816
for the gate so that
the gate can actually be


185
00:10:12,816 --> 00:10:16,406
on all three sides of the
channel of the transistor rather


186
00:10:16,406 --> 00:10:18,546
than just a plate on the
top of the transistor.


187
00:10:18,826 --> 00:10:21,666
And these transistors are much
more efficient maybe 50 percent


188
00:10:21,666 --> 00:10:22,246
more efficient.


189
00:10:22,706 --> 00:10:24,966
So, there's going to be
more things in the future


190
00:10:24,966 --> 00:10:27,736
but you can tell even--
even at the nanoscale,


191
00:10:27,946 --> 00:10:31,136
a lot of stuff is being done to
make these chips more efficient.


192
00:10:31,976 --> 00:10:34,346
Now, what's the result?


193
00:10:34,346 --> 00:10:40,246
The result is that on the latest
chips, we're talking nanojoules


194
00:10:40,246 --> 00:10:42,476
or tens of nanojouels
per instruction.


195
00:10:42,836 --> 00:10:43,786
So, what's a nanojoule?


196
00:10:43,786 --> 00:10:47,686
So, a nanojoules is a billionth
of a joule and a joule,


197
00:10:47,686 --> 00:10:51,726
a billionth of a joule is a
very tiny amount of power.


198
00:10:52,026 --> 00:10:56,776
I like to think sometimes in
terms of biology and in fact


199
00:10:57,046 --> 00:11:00,806
when a neuron fires in your
brain its taking on the order


200
00:11:00,806 --> 00:11:03,516
of picojoules, about a
thousand times as much.


201
00:11:03,516 --> 00:11:07,156
So, you can sort of think
of an instruction executing


202
00:11:07,156 --> 00:11:11,206
in the Core i7 as being
same amount of power,


203
00:11:11,206 --> 00:11:15,906
same amount of energy is
about several thousand neurons


204
00:11:16,246 --> 00:11:19,166
in your brain firing, so your
brain executing one instruction.


205
00:11:19,566 --> 00:11:22,136
So, we're really getting
down there to the level


206
00:11:22,136 --> 00:11:25,796
where biological systems have
evolved over obviously billions


207
00:11:25,796 --> 00:11:26,826
and billions of years.


208
00:11:27,896 --> 00:11:35,286
Now, this is a micrograph of the
Haswell ULT chip from Intel and,


209
00:11:35,546 --> 00:11:39,596
you know, it's a small chip
about the size of a fingernail


210
00:11:39,986 --> 00:11:42,936
but on here are 1.4
billion transistors.


211
00:11:42,936 --> 00:11:46,076
And that's divided up into
the functional units the--


212
00:11:46,426 --> 00:11:48,406
in this chip there
are two cores.


213
00:11:49,316 --> 00:11:52,606
There is a huge amount as
Phil said yesterday devoted


214
00:11:52,606 --> 00:11:55,826
to the GPU to the
graphics processor.


215
00:11:56,456 --> 00:12:00,576
There's the shared L2 cache,
the memory manager and some


216
00:12:00,576 --> 00:12:02,556
of the things for managing DMA.


217
00:12:02,926 --> 00:12:06,676
Now, the interesting thing
about modern chips is


218
00:12:06,676 --> 00:12:11,766
that during execution, you can
power down parts of those chips


219
00:12:11,766 --> 00:12:12,826
that aren't being used.


220
00:12:13,016 --> 00:12:15,356
If you're not using the GPU
right now, you can turn off


221
00:12:15,356 --> 00:12:17,246
that part of the
chip, saving energy.


222
00:12:17,826 --> 00:12:19,366
If you're not using both cores,


223
00:12:19,366 --> 00:12:20,716
you can turn off
one of the cores.


224
00:12:20,816 --> 00:12:22,796
You're not using both
cores, turn those off.


225
00:12:23,296 --> 00:12:26,486
And that turns out to
be architecturally one


226
00:12:26,486 --> 00:12:28,576
of the key ways to save power


227
00:12:28,576 --> 00:12:31,286
in these portable systems
that we have today.


228
00:12:31,756 --> 00:12:34,116
Now, it requires
close interaction


229
00:12:34,116 --> 00:12:37,116
between a system software and
the silicon in order to make


230
00:12:37,116 --> 00:12:41,236
that happen correctly
but as we'll get into,


231
00:12:41,236 --> 00:12:43,746
if you do it right, you can
save a huge amount of power.


232
00:12:44,316 --> 00:12:48,486
Now, this shows you what that
looks like and in reality,


233
00:12:48,486 --> 00:12:51,056
this is actually,
it's not Haswell,


234
00:12:51,056 --> 00:12:52,866
it's Ivy Bridge previous
generation


235
00:12:53,226 --> 00:12:57,416
but it's what called an
infrared emission microscopy.


236
00:12:57,786 --> 00:12:59,336
So, you're looking actually


237
00:12:59,336 --> 00:13:02,886
at the heat waves coming off
the chip as its executing.


238
00:13:03,466 --> 00:13:06,696
So, the blue spots
are cooler, the orange


239
00:13:06,696 --> 00:13:08,136
and the red spots are hotter


240
00:13:08,336 --> 00:13:12,516
and in this case what you have
is one core is powered up,


241
00:13:12,516 --> 00:13:15,656
this is a four core system, so
you see one core powered up,


242
00:13:15,886 --> 00:13:17,836
the shared L3 cache
is powered up.


243
00:13:18,206 --> 00:13:20,416
The GPU down at the
bottom is powered down.


244
00:13:21,166 --> 00:13:24,416
And here's some other
examples of states


245
00:13:24,416 --> 00:13:25,656
that that chip can be in.


246
00:13:25,656 --> 00:13:29,596
The middle one shows all four
cores and some and the GPU going


247
00:13:29,636 --> 00:13:31,636
at a fairly fast clip.


248
00:13:31,996 --> 00:13:34,326
The last one shows
all four cores,


249
00:13:34,326 --> 00:13:38,226
all the cores are powered
down, the GPU is powered down.


250
00:13:38,616 --> 00:13:42,456
It turns out that
just a normal course


251
00:13:42,456 --> 00:13:46,226
of using a computer
interactively, the chip,


252
00:13:46,336 --> 00:13:51,076
the CPU chip spends most of its
time typically in that state.


253
00:13:51,436 --> 00:13:55,716
That's because, the CPU is
often waiting for user input.


254
00:13:55,766 --> 00:13:58,816
It's waiting for the
network I/O to interrupt.


255
00:13:58,816 --> 00:14:00,526
It's waiting for
the GPU to be done.


256
00:14:00,766 --> 00:14:04,616
A lot of the time in modern chip
is spent with parts of that chip


257
00:14:04,956 --> 00:14:06,866
or even most of that
chip turned off.


258
00:14:07,636 --> 00:14:09,016
So, what do you get from that?


259
00:14:09,016 --> 00:14:12,776
That you get a tremendous
dynamic range and how much power


260
00:14:12,776 --> 00:14:14,796
that should CPU chip can draw.


261
00:14:15,216 --> 00:14:18,136
When it's idle, when it's
not doing much and parts


262
00:14:18,136 --> 00:14:20,856
of it are turned
off or powered down,


263
00:14:20,856 --> 00:14:24,156
you can get down to 0.4 watts.


264
00:14:24,686 --> 00:14:28,396
On the other hand if you're
doing a while one loop


265
00:14:28,606 --> 00:14:30,286
and the thing is just
sitting there spinning


266
00:14:30,286 --> 00:14:34,356
or a CPU limited operation
transcoding a movie or something


267
00:14:34,356 --> 00:14:39,386
like that, that can boom up to
25 watts, 30 times more power.


268
00:14:39,816 --> 00:14:42,706
And if the thermal conditions
are right, you can even kick


269
00:14:42,706 --> 00:14:46,116
in to turbo and get up to
maybe 60 times more power


270
00:14:46,466 --> 00:14:47,366
than an idle chip.


271
00:14:47,736 --> 00:14:50,026
To let you know how
this compares


272
00:14:50,026 --> 00:14:53,396
with total system power,
remember that was just the CPU,


273
00:14:53,986 --> 00:14:56,866
well when you're idle, the
CPU is a very small part


274
00:14:56,866 --> 00:14:58,486
of your system power
because a lot


275
00:14:58,486 --> 00:15:00,016
of power is going
to the backlight.


276
00:15:00,016 --> 00:15:01,586
It maybe go into Wi-Fi,


277
00:15:01,986 --> 00:15:05,036
radios and other things
and the power supply.


278
00:15:05,346 --> 00:15:07,506
And so, the CPU at idle


279
00:15:07,506 --> 00:15:09,666
when it's mostly turned
off is a very tiny part


280
00:15:09,666 --> 00:15:11,136
of the total system power.


281
00:15:11,476 --> 00:15:15,416
However, when you're doing
CPU limited operations,


282
00:15:15,976 --> 00:15:21,026
you've got a tremendous amount--
the lion share the power going


283
00:15:21,026 --> 00:15:24,406
to the CPU and that overshadows
things like the backlight.


284
00:15:25,056 --> 00:15:26,646
That's important
thing to keep in mind.


285
00:15:26,646 --> 00:15:30,456
That tremendous dynamic
range means that the software


286
00:15:30,456 --> 00:15:33,276
and apps you write have
a tremendous impact--


287
00:15:33,646 --> 00:15:36,236
tremendous leverage on how
much power is being drawn


288
00:15:36,236 --> 00:15:40,066
and thus how much-- long the
battery is going to last.


289
00:15:41,056 --> 00:15:44,846
Now, with interactive systems,
most of the time as I mentioned,


290
00:15:45,076 --> 00:15:48,666
the CPU is actually
powered down or clock gated


291
00:15:48,666 --> 00:15:50,326
or not drawing a lot of power.


292
00:15:50,326 --> 00:15:51,806
It is a more or less idle state.


293
00:15:52,116 --> 00:15:56,336
The reason is that user events
don't occur very frequently


294
00:15:56,336 --> 00:15:59,376
compared to the time scales
of executing and instruction.


295
00:16:00,026 --> 00:16:02,256
So, even if you're
typing 50 words per minute


296
00:16:02,256 --> 00:16:05,706
which probably most of you can
do-- that's one key every--


297
00:16:05,706 --> 00:16:07,796
more quarter of a
second more or less.


298
00:16:08,126 --> 00:16:11,446
That's a huge amount of
time in between responding


299
00:16:11,446 --> 00:16:15,446
to those events that potentially
the CPU can be [inaudible]


300
00:16:15,446 --> 00:16:20,636
assuming there's no network
activity, et cetera, et cetera.


301
00:16:21,136 --> 00:16:24,396
So, that's a key strategy to
take advantage of the fact


302
00:16:24,396 --> 00:16:27,226
that on interactive systems,
you're really spending a lot


303
00:16:27,226 --> 00:16:28,916
of your time with the CPU idle.


304
00:16:29,396 --> 00:16:30,706
And to show you what
that looks like,


305
00:16:31,396 --> 00:16:35,776
this is actually a
trace of CPU activity.


306
00:16:35,776 --> 00:16:40,216
So, system wide CPU activity
as someone is in Safari,


307
00:16:40,496 --> 00:16:42,336
they're browsing to apple.com.


308
00:16:43,066 --> 00:16:46,116
So, at the beginning here
you have their typing


309
00:16:46,516 --> 00:16:49,066
and as I mentioned,
you've got less


310
00:16:49,066 --> 00:16:52,036
than 10 percent of CPU activity.


311
00:16:52,036 --> 00:16:55,236
That means the CPU is
essentially shut off 90 percent


312
00:16:55,236 --> 00:16:55,776
of the time.


313
00:16:56,316 --> 00:16:59,916
And then you go to where
you're fetching doing HTTP gets


314
00:17:00,186 --> 00:17:04,336
from the network and the network
is not infinitely responsive,


315
00:17:04,336 --> 00:17:06,606
so you even have time in
between those network,


316
00:17:06,606 --> 00:17:10,356
in between those gets to put
the CPU to a low power state.


317
00:17:10,766 --> 00:17:13,876
Then finally when you're
rendering, the CPU is waiting


318
00:17:13,876 --> 00:17:15,806
on the GPU to render
those pages.


319
00:17:15,806 --> 00:17:18,636
So, again, less than
5 percent activity.


320
00:17:18,846 --> 00:17:24,685
So, if you were to-- if
you're able to look at CPU on,


321
00:17:24,685 --> 00:17:26,906
CPU off over the course of time.


322
00:17:26,906 --> 00:17:28,286
So, this is about five seconds.


323
00:17:28,616 --> 00:17:31,276
You see that there are
many, many rapid transitions


324
00:17:31,546 --> 00:17:34,846
from the CPU being
powered up fully running


325
00:17:35,096 --> 00:17:38,996
to the CPU essentially going
to sleep in between events,


326
00:17:38,996 --> 00:17:43,156
in between network packets,
in between GPU invocations.


327
00:17:43,506 --> 00:17:48,396
So, the key here is to make
sure that the percentage


328
00:17:48,396 --> 00:17:52,686
of time spent in those low power
states is the most that can be.


329
00:17:52,956 --> 00:17:58,286
Now, if we zoom in here, this
is a 1 millisecond time scale.


330
00:17:58,796 --> 00:18:02,036
We see that there
are pretty huge gaps


331
00:18:02,036 --> 00:18:04,996
where you could literally
execute tens of thousands


332
00:18:04,996 --> 00:18:06,816
or hundreds of thousands
of instructions


333
00:18:07,166 --> 00:18:09,966
but instead you're-- the
system is putting the CPU


334
00:18:09,966 --> 00:18:11,496
into a low power state.


335
00:18:12,356 --> 00:18:16,336
Well, it would be nice if it was
just like turning a light switch


336
00:18:16,336 --> 00:18:19,066
on or off to put it on
those states but it's not.


337
00:18:19,416 --> 00:18:20,506
It's not that simple.


338
00:18:21,796 --> 00:18:28,186
In order to get the CPU to
turn off or to turn back on,


339
00:18:28,456 --> 00:18:31,916
it's actually a fairly
complex process.


340
00:18:32,276 --> 00:18:37,436
So, in this case, it takes time.


341
00:18:37,756 --> 00:18:41,926
This is not actually turning the
CPU or the core completely off.


342
00:18:41,926 --> 00:18:44,836
This is an example of
what's called clock gating--


343
00:18:44,836 --> 00:18:47,796
you stop all the clocks going
to that part of the chip.


344
00:18:47,796 --> 00:18:50,936
And in this case, you
stop the phase-lock loop


345
00:18:51,296 --> 00:18:54,196
that is supplying the clocks
for that part of the chip.


346
00:18:54,896 --> 00:18:57,416
But, that means that when
you want to turn it back on,


347
00:18:57,936 --> 00:18:59,976
you have to start up
that phase-lock loop.


348
00:18:59,976 --> 00:19:02,136
You have to get it to sync
up with the rest of the chip


349
00:19:02,136 --> 00:19:04,746
and then finally,
you get to turn--


350
00:19:04,746 --> 00:19:08,816
start doing useful processing
after 10 to 15 microseconds.


351
00:19:09,156 --> 00:19:13,806
So, there's overhead associated
with turning the chip on or off.


352
00:19:14,086 --> 00:19:15,706
It can be even more than that.


353
00:19:16,046 --> 00:19:19,286
In this case, you're taking
the voltage to the core


354
00:19:19,286 --> 00:19:21,256
and you're dropping
it all the way to zero


355
00:19:21,546 --> 00:19:23,096
in which case you
lose all state.


356
00:19:23,896 --> 00:19:26,236
That means that when
you turn it back on,


357
00:19:26,406 --> 00:19:29,216
you're spending time
reloading state for that part


358
00:19:29,216 --> 00:19:31,736
of the chip could be
hundreds of microseconds.


359
00:19:32,336 --> 00:19:36,596
So, in these cases,
what's happening is


360
00:19:36,596 --> 00:19:39,436
that you're applying full
power to the chip in order


361
00:19:39,436 --> 00:19:41,396
to get it up, turn on again,


362
00:19:41,856 --> 00:19:43,976
but you're not doing any
useful computing power.


363
00:19:44,076 --> 00:19:46,126
That's wasted energy
for that time.


364
00:19:46,826 --> 00:19:48,756
And, that adds up over time.


365
00:19:49,186 --> 00:19:53,426
So, here's going back to
our diagram of CPU turns


366
00:19:53,426 --> 00:19:55,036
on for a bit, turns
off for a bit.


367
00:19:55,446 --> 00:19:59,456
But, those RAMs are intended
to show that during that time,


368
00:19:59,746 --> 00:20:00,736
you're powering the chip,


369
00:20:00,786 --> 00:20:03,466
you're not doing any useful
work, that's wasted power.


370
00:20:03,876 --> 00:20:07,496
So, the strategy here is
to minimize those times.


371
00:20:08,686 --> 00:20:10,316
Now, how do you do that?


372
00:20:10,966 --> 00:20:14,236
Well, that's where the
system scheduler comes in.


373
00:20:14,236 --> 00:20:18,066
That's where how timers
are scheduled comes in.


374
00:20:18,366 --> 00:20:20,456
And, that's what we'll spend
some time talking about.


375
00:20:21,006 --> 00:20:22,736
But the basic idea is simple.


376
00:20:22,736 --> 00:20:25,826
The basic idea is if you
can shift around that work


377
00:20:25,826 --> 00:20:27,926
and batch it up into
a single packet


378
00:20:27,926 --> 00:20:33,686
of CPU work then you can turn
on the chip once, do your work,


379
00:20:33,906 --> 00:20:36,196
turn off the chip
and those red areas


380
00:20:36,526 --> 00:20:41,246
which are essentially wasted
energy can be decreased


381
00:20:41,246 --> 00:20:42,416
into just a couple of them.


382
00:20:42,416 --> 00:20:45,176
So, this is what it looks
like when you do that.


383
00:20:45,856 --> 00:20:50,446
So, scheduling that work in
bundles or in batching it


384
00:20:50,446 --> 00:20:54,206
up together is one of the
key strategies that's used


385
00:20:54,206 --> 00:20:55,416
by Mac OS X.


386
00:20:55,826 --> 00:20:58,096
And we'll spend a little bit
of time talking about how


387
00:20:58,096 --> 00:21:01,666
that interacts with App Nap,
how perhaps that interacts


388
00:21:01,666 --> 00:21:04,066
with the application you're
writing, how you can do


389
00:21:04,066 --> 00:21:07,766
that in a way that lets the
system coalesce these things


390
00:21:08,026 --> 00:21:11,866
and decrease that red
rectangle the time it takes


391
00:21:11,866 --> 00:21:14,206
to power the chip on
and power the chip off.


392
00:21:14,666 --> 00:21:21,526
So, to review, in an
interactive system its idle most


393
00:21:21,526 --> 00:21:23,776
of the time-- it's
idle much of the time.


394
00:21:24,196 --> 00:21:26,406
And modern chips can
take advantage of that


395
00:21:26,406 --> 00:21:30,086
by turning themselves off or
turning parts of themselves off


396
00:21:30,086 --> 00:21:32,746
when they're not needed
and the key strategy is


397
00:21:32,746 --> 00:21:35,596
to batch work together so that
you're not spending a lot your


398
00:21:35,596 --> 00:21:37,406
time ramping up and
ramping down.


399
00:21:38,126 --> 00:21:41,176
So, maximize idle time,
minimize transitions.


400
00:21:42,756 --> 00:21:47,786
So, let's talk about how OS X
Mavericks addresses these sorts


401
00:21:47,786 --> 00:21:48,426
of issues.


402
00:21:49,176 --> 00:21:52,346
And I'm going to talk
about several things.


403
00:21:52,346 --> 00:21:57,236
One is sort of on the tool side,
making energy impact visible.


404
00:21:57,236 --> 00:22:00,616
And if you want to improve any
aspect of the system making it


405
00:22:00,616 --> 00:22:02,436
so you can measure that is key


406
00:22:02,806 --> 00:22:05,586
and we don't exactly have
ammeters that we can go in there


407
00:22:05,586 --> 00:22:09,446
and put on apps or put on
processes but we have corallites


408
00:22:09,446 --> 00:22:12,046
of energy use and we'll talk
about how we used those.


409
00:22:12,826 --> 00:22:16,436
Second thing is system
strategies


410
00:22:16,436 --> 00:22:19,476
and application strategies for
energy efficiency and that gets


411
00:22:19,476 --> 00:22:21,266
to some of the things I
was just talking about.


412
00:22:21,636 --> 00:22:25,006
How do you batch up work so that
you're minimizing the amount


413
00:22:25,006 --> 00:22:28,756
of those wasting energy wasting
transitions that are going on.


414
00:22:29,216 --> 00:22:31,026
And finally, what you
can you do as developers?


415
00:22:31,026 --> 00:22:35,356
I mean there's a lot we can
do as a system developers


416
00:22:35,546 --> 00:22:37,416
down at the low level
but actually,


417
00:22:37,416 --> 00:22:40,226
this bubbles all the way to the
apps and how the apps behave


418
00:22:40,226 --> 00:22:43,546
and how you can change your
apps to be more power efficient.


419
00:22:44,426 --> 00:22:50,126
So, starting off in our-- in
OS X Mavericks, if you go up


420
00:22:50,126 --> 00:22:52,066
and you look at the
battery status menu,


421
00:22:52,836 --> 00:22:54,156
you'll see some new
things in it.


422
00:22:54,536 --> 00:22:59,056
So, in this case, we are
actually showing applications


423
00:22:59,476 --> 00:23:01,656
which are using significant
energy.


424
00:23:02,466 --> 00:23:08,776
Now, in many cases, that will
be entirely expected and desired


425
00:23:09,436 --> 00:23:13,256
if you're doing a
render in Final Cut Pro,


426
00:23:13,256 --> 00:23:14,676
it's going to show up there.


427
00:23:14,676 --> 00:23:18,336
If you're doing a
batch compile in Xcode,


428
00:23:18,336 --> 00:23:19,436
it's going to show up there.


429
00:23:19,836 --> 00:23:23,176
On the other hand, you may
have something show up there


430
00:23:23,176 --> 00:23:29,716
that is unexpected and maybe
undesired and we're going


431
00:23:29,716 --> 00:23:33,516
to make that visible in
the battery status menu.


432
00:23:33,796 --> 00:23:38,416
If you double click on any
of those, it will take you


433
00:23:38,416 --> 00:23:39,886
to activity monitor


434
00:23:40,356 --> 00:23:44,196
and in activity monitor we
have a new tray or a new tab


435
00:23:44,936 --> 00:23:46,986
which is the energy tab.


436
00:23:47,546 --> 00:23:52,056
The energy tab shows
two new columns.


437
00:23:52,206 --> 00:23:53,996
One is called energy impact.


438
00:23:54,226 --> 00:23:57,946
I'll just take a moment
to say what that means.


439
00:23:58,206 --> 00:24:02,966
So, energy impact is a
surrogate for trying to look


440
00:24:02,966 --> 00:24:05,536
at the energy impact
that an application


441
00:24:05,536 --> 00:24:06,736
or a process is having.


442
00:24:07,006 --> 00:24:09,936
Now, as I mentioned, we
can't stick a power meter


443
00:24:09,936 --> 00:24:14,746
on it directly but what we can
do is look at the CPU usage


444
00:24:15,126 --> 00:24:18,646
by that app and look at
the interrupts or timers


445
00:24:18,646 --> 00:24:23,466
that are caused by that app
and cause the CPU to wake up.


446
00:24:23,466 --> 00:24:25,746
In other words, cause one
of those red rectangles


447
00:24:26,006 --> 00:24:27,236
that I was looking at earlier.


448
00:24:27,236 --> 00:24:33,026
And we track those using
counters and we apply


449
00:24:33,026 --> 00:24:35,756
that to the energy impact
that that app is causing.


450
00:24:36,106 --> 00:24:39,516
So, you get a number that
is a relative measure


451
00:24:39,516 --> 00:24:42,826
of energy impact by an
app or by a process.


452
00:24:43,476 --> 00:24:45,776
And further than that in
the next column over--


453
00:24:45,776 --> 00:24:49,146
so that's the column
with the energy impact.


454
00:24:49,456 --> 00:24:54,126
Next column over, we show
the average energy impact


455
00:24:54,126 --> 00:24:55,926
over the previous eight hours.


456
00:24:56,216 --> 00:24:59,996
So, actually the previous
eight hours or until, you know,


457
00:25:00,216 --> 00:25:02,526
back into the last time
you booted your system


458
00:25:02,826 --> 00:25:04,336
if that was less
than eight hours.


459
00:25:04,446 --> 00:25:07,336
But this is important
because, number one,


460
00:25:07,336 --> 00:25:12,336
you might have something-- an
app that had come in there run


461
00:25:12,586 --> 00:25:15,386
for five minutes and burned
a lot of your battery,


462
00:25:15,616 --> 00:25:18,676
and now it's just quiescent
but you'd like to know


463
00:25:18,676 --> 00:25:21,016
that that happened at some
point and that will show up in


464
00:25:21,016 --> 00:25:22,166
that eight hour average.


465
00:25:22,466 --> 00:25:25,186
Just as important,
you may have the apps


466
00:25:25,186 --> 00:25:30,266
that are just using
battery energy at a low clip


467
00:25:30,476 --> 00:25:33,206
but they're constant, they're
just going on all the time.


468
00:25:33,536 --> 00:25:37,406
Again, the history, the
average makes that visible.


469
00:25:37,886 --> 00:25:41,686
So, this is the first clue that
there might be something going


470
00:25:41,686 --> 00:25:44,366
on you don't expect or that
the user doesn't expect.


471
00:25:44,786 --> 00:25:49,106
Now, as a developer what
you're going to want


472
00:25:49,106 --> 00:25:51,046
to do then is go into Xcode.


473
00:25:51,046 --> 00:25:55,326
And in Xcode, we have
quite a few more tools


474
00:25:55,326 --> 00:25:57,466
that let you take the next step


475
00:25:57,546 --> 00:26:00,956
to investigate why this
app might be using energy.


476
00:26:01,356 --> 00:26:07,226
So, in the latest Xcode, we have
what's called the Energy Gauge,


477
00:26:07,226 --> 00:26:08,456
Energy Impact Gauge.


478
00:26:08,776 --> 00:26:10,656
Go to the-- if you
just run your app,


479
00:26:11,326 --> 00:26:14,266
that'll show up on
the left there.


480
00:26:14,296 --> 00:26:15,446
You can click on that


481
00:26:15,446 --> 00:26:17,646
and it gives you much
more insight into,


482
00:26:17,916 --> 00:26:20,106
is your app firing off timers?


483
00:26:20,736 --> 00:26:22,966
Is your app using CPU?


484
00:26:23,146 --> 00:26:25,526
Why might it be doing this?


485
00:26:25,526 --> 00:26:28,306
Can I go look at the
event timeline and see--


486
00:26:28,306 --> 00:26:32,286
you know, make sure you
understand why it's doing that.


487
00:26:32,536 --> 00:26:35,456
As I mentioned before, it
maybe doing very useful work


488
00:26:35,906 --> 00:26:38,876
but it maybe doing work that you
can do in a more efficient way.


489
00:26:40,346 --> 00:26:44,246
Now, we have built
in to OS X Mavericks,


490
00:26:44,786 --> 00:26:48,076
strategies that we
use across the board


491
00:26:48,416 --> 00:26:51,076
to make things more efficient
from an energy standpoint


492
00:26:51,076 --> 00:26:52,696
and I want to talk
about three of those.


493
00:26:53,586 --> 00:26:56,446
First one is App Nap.


494
00:26:56,446 --> 00:26:58,816
An App Nap was mentioned
yesterday.


495
00:26:59,056 --> 00:27:00,616
I'll go into little
bit more detail


496
00:27:00,616 --> 00:27:03,396
into what App Nap is actually
doing and there's going


497
00:27:03,396 --> 00:27:07,316
to be further sessions coming up
that will go into great detail


498
00:27:07,316 --> 00:27:11,976
and APIs around that that
I would suggest you go to.


499
00:27:12,176 --> 00:27:14,326
Centralized Task
Scheduling is the next one.


500
00:27:14,506 --> 00:27:17,726
Centralized task scheduling is a
much longer time scale but it's


501
00:27:17,726 --> 00:27:21,386
about moving work around to
times they're more opportune,


502
00:27:21,696 --> 00:27:24,006
either more opportune
from an energy standpoint,


503
00:27:24,246 --> 00:27:27,356
you're back on AC power or more
opportune just from staying


504
00:27:27,356 --> 00:27:28,526
out of the way of the user.


505
00:27:28,636 --> 00:27:33,026
And then finally Power Saver,
and this all about Safari


506
00:27:33,196 --> 00:27:36,366
and providing a web-browsing
experience


507
00:27:36,366 --> 00:27:37,426
that is power efficient.


508
00:27:37,756 --> 00:27:40,316
So, let's go through those.


509
00:27:40,316 --> 00:27:41,666
First of all, App Nap.


510
00:27:41,926 --> 00:27:46,366
So, a typical use, you
know, users interacting


511
00:27:46,366 --> 00:27:48,006
with one application
on the screen


512
00:27:48,226 --> 00:27:51,506
but of course they've
got, you know,


513
00:27:51,506 --> 00:27:53,386
many other apps up
in the background.


514
00:27:54,546 --> 00:27:57,786
Now, the app they're
interacting with is


515
00:27:57,786 --> 00:28:00,116
where they're really
interested in results.


516
00:28:00,516 --> 00:28:03,176
But the apps that
are in the background


517
00:28:03,716 --> 00:28:07,646
when you measure systems often
are sitting there drawing power.


518
00:28:07,646 --> 00:28:09,406
They maybe drawing
low levels of power,


519
00:28:09,406 --> 00:28:10,976
they maybe drawing
medium levels of power


520
00:28:10,976 --> 00:28:12,596
but they're drawing power


521
00:28:12,926 --> 00:28:15,826
and often times they're
not doing things


522
00:28:15,826 --> 00:28:18,256
that the user is really--


523
00:28:18,606 --> 00:28:20,576
all that interested
in at that moment.


524
00:28:21,296 --> 00:28:25,626
So, what App Nap is all
about is quiescing those apps


525
00:28:25,836 --> 00:28:27,606
that the user is
not interacting with


526
00:28:28,216 --> 00:28:31,566
or that are not visibly
drawing on the screen


527
00:28:31,936 --> 00:28:35,346
or they're not creating
an audio output stream


528
00:28:35,346 --> 00:28:36,136
that they're going to hear.


529
00:28:36,256 --> 00:28:38,606
So, we use heuristics to decide


530
00:28:38,606 --> 00:28:41,376
when an app is a
candidate for App Nap.


531
00:28:42,076 --> 00:28:43,446
Once we decide it's a candidate


532
00:28:43,446 --> 00:28:47,426
for App Nap we start
doing a variety of things


533
00:28:47,646 --> 00:28:50,686
to suppress the energy
use by that app.


534
00:28:51,226 --> 00:28:55,126
And, you know, devote, thus
devoting most of the energy


535
00:28:55,326 --> 00:28:57,216
to what the user
is interacting with


536
00:28:57,216 --> 00:28:58,586
and what they're interested in.


537
00:28:59,356 --> 00:29:00,196
So, what do we do?


538
00:29:00,256 --> 00:29:04,636
Well, we will adjust CPU
and I/O prioritization.


539
00:29:04,966 --> 00:29:07,556
But beyond that, we will
also be more aggressive


540
00:29:07,556 --> 00:29:10,586
about coalescing
timers in that app


541
00:29:10,676 --> 00:29:12,826
or in processes associated
with that app.


542
00:29:13,176 --> 00:29:18,416
So if there are timers that are
being set we will move those


543
00:29:18,416 --> 00:29:21,396
timers around to align
them with other timers


544
00:29:21,606 --> 00:29:24,626
so that you don't have
this overhead of power--


545
00:29:24,766 --> 00:29:26,836
potential overhead
if the chip is coming


546
00:29:26,836 --> 00:29:30,176
out of a low power
state and going back in.


547
00:29:30,366 --> 00:29:32,596
You don't have that potential
overhead occurring over


548
00:29:32,596 --> 00:29:34,806
and over, you coalesce
those into one.


549
00:29:35,306 --> 00:29:38,286
Timer rate limiting which is a
little bit different which is


550
00:29:38,286 --> 00:29:41,166
for repetitive timers, we
stretch those timers out.


551
00:29:41,626 --> 00:29:43,876
And finally, there's some APIs.


552
00:29:44,156 --> 00:29:46,746
We are able to tell an
app when it's visible


553
00:29:46,746 --> 00:29:49,946
so it potentially take action
to decrease its energy usage.


554
00:29:50,566 --> 00:29:54,916
And we let the app hint to
the system or pass information


555
00:29:54,916 --> 00:29:58,476
to the system about how it
expects to use resources


556
00:29:58,476 --> 00:30:01,346
so we can do the right
thing in App Nap.


557
00:30:03,036 --> 00:30:05,206
So, Timer Coalescing.


558
00:30:06,086 --> 00:30:10,266
As I mentioned before, the
key is batching together work


559
00:30:10,266 --> 00:30:12,256
so you don't have-- you're
not paying the overhead


560
00:30:12,256 --> 00:30:13,486
of these transitions.


561
00:30:13,656 --> 00:30:16,916
So, here in the red rectangle or
the overhead of the transitions


562
00:30:16,916 --> 00:30:20,166
for the CPU coming to
a high-power state,


563
00:30:20,166 --> 00:30:23,886
from a low-power state or vice
versa and what we're going


564
00:30:23,886 --> 00:30:28,546
to do is-- if the app is being
App Nap, be more aggressive


565
00:30:28,596 --> 00:30:33,226
about squishing two of these
events together we're going


566
00:30:33,226 --> 00:30:35,866
to slide those timer
firings around so


567
00:30:35,866 --> 00:30:38,076
that you only get a
single transition.


568
00:30:38,736 --> 00:30:41,856
And overtime, these
add up it's--


569
00:30:42,036 --> 00:30:44,656
we keep the timers in
exactly the same order


570
00:30:44,656 --> 00:30:47,986
that they were set but
we change the exact time


571
00:30:47,986 --> 00:30:50,696
in which they fire, we slide
them around to coalesce them.


572
00:30:51,236 --> 00:30:56,236
Now, there's also an API for
NSTimer and DispatcherTimers


573
00:30:56,526 --> 00:31:00,516
that lets you tell the
system how much leeway


574
00:31:00,516 --> 00:31:05,586
or how much tolerance you can
accept, let's say 10 percent,


575
00:31:05,866 --> 00:31:10,316
you'll accept the 10
percent sliding of that timer


576
00:31:10,536 --> 00:31:12,806
and you've made the
judgment that's not going


577
00:31:12,806 --> 00:31:14,846
to really affect
how things come up.


578
00:31:15,126 --> 00:31:18,406
Now, there are timers
and apps where that has


579
00:31:18,406 --> 00:31:20,806
to be as close as possible.


580
00:31:21,016 --> 00:31:23,536
And that really gets into
the realm of real-time apps


581
00:31:23,576 --> 00:31:27,606
which we're not really talking
about here and there are things


582
00:31:27,606 --> 00:31:30,786
like audio playback where
you need exact timings


583
00:31:30,786 --> 00:31:32,616
and will opt those
out of App Nap.


584
00:31:32,976 --> 00:31:38,446
But, for timers associated
with perhaps network polling


585
00:31:38,446 --> 00:31:42,756
or perhaps user interface
related interactions,


586
00:31:43,166 --> 00:31:45,106
those kinds of timers
typically don't have


587
00:31:45,146 --> 00:31:46,706
to be accurate to
the nanosecond.


588
00:31:47,306 --> 00:31:51,306
And, if you tell us we can
slide those timers around.


589
00:31:51,306 --> 00:31:54,366
If you give us tolerance then
the system will automatically


590
00:31:54,736 --> 00:31:58,226
merge those to get rid of
the overhead between those.


591
00:31:59,376 --> 00:32:02,186
So, here we have an example


592
00:32:02,506 --> 00:32:08,016
and what you've done is really
reclaim that wasted energy due


593
00:32:08,016 --> 00:32:10,266
to those transitions
that were there earlier


594
00:32:10,666 --> 00:32:13,916
and you've combined the
work into a single batch set


595
00:32:13,916 --> 00:32:15,316
of work that gets done.


596
00:32:15,726 --> 00:32:18,626
Now, this is happening
on the order of hundreds


597
00:32:18,626 --> 00:32:21,806
of microseconds or
maybe milliseconds.


598
00:32:22,126 --> 00:32:24,656
It's something that--


599
00:32:24,656 --> 00:32:26,386
if everything is
operating correctly,


600
00:32:26,386 --> 00:32:28,536
the user doesn't
even notice except


601
00:32:28,536 --> 00:32:30,126
that their battery
life gets longer.


602
00:32:31,346 --> 00:32:34,716
Timer rate limiting is
a little bit different.


603
00:32:35,106 --> 00:32:39,206
If you have a repetitive timer
in one of those background apps,


604
00:32:39,206 --> 00:32:41,136
one of those apps
that is not drawing,


605
00:32:41,136 --> 00:32:43,886
that the user is not interacting
with, perhaps you've got--


606
00:32:43,886 --> 00:32:48,746
you left the timer going at a
frame rate, 60 times a second.


607
00:32:48,746 --> 00:32:54,686
To update some variable that you
want to keep up-to-date, well,


608
00:32:55,246 --> 00:32:58,326
we will rate limit those timers


609
00:32:58,846 --> 00:33:01,266
and essentially stretch
them out.


610
00:33:01,986 --> 00:33:07,216
So, we will let those timers
execute but let them execute


611
00:33:07,216 --> 00:33:09,406
at a much lower duty cycle rate.


612
00:33:09,736 --> 00:33:12,916
That means that whenever
processing is going on


613
00:33:12,916 --> 00:33:15,426
and associated with that
timer is now occurring


614
00:33:15,426 --> 00:33:19,426
at a much lower duty cycle and
the power associated with that


615
00:33:19,426 --> 00:33:22,676
or the energy associated with
that is correspondingly lower.


616
00:33:23,236 --> 00:33:26,666
So, those timers continue
to fire but they continue


617
00:33:26,666 --> 00:33:27,996
to fire at a lower rate.


618
00:33:28,706 --> 00:33:33,216
And again, this is happening
in apps that are not drawing


619
00:33:33,216 --> 00:33:36,216
to the screen, they are
not outputting audio,


620
00:33:36,216 --> 00:33:40,136
these things are not
noticeable to the user except


621
00:33:40,136 --> 00:33:42,526
that they have less
draw on the battery,


622
00:33:42,526 --> 00:33:43,796
they're using less energy.


623
00:33:44,716 --> 00:33:47,936
Now, we also have
as I mentioned,


624
00:33:48,016 --> 00:33:50,716
an API that lets an app find


625
00:33:50,716 --> 00:33:52,846
out whether it is
visible on the screen.


626
00:33:53,536 --> 00:33:57,596
And, here's an example of where
we use that to conserve energy.


627
00:33:57,956 --> 00:34:03,806
This is Photo Booth, Photo Booth
is-- comes up in preview mode,


628
00:34:03,806 --> 00:34:05,206
it turns on the camera,


629
00:34:05,256 --> 00:34:08,366
it's displaying the
preview on the screen there.


630
00:34:08,366 --> 00:34:13,626
If Photo Booth gets
covered up by another app,


631
00:34:13,976 --> 00:34:17,036
there's now an API to find
out, "Hey, I'm Photo Booth


632
00:34:17,036 --> 00:34:18,606
but I'm not showing
on the screen."


633
00:34:19,136 --> 00:34:24,686
And, Photo Booth will now use
that API to find that out,


634
00:34:24,906 --> 00:34:27,226
turn off its camera
thus saving power.


635
00:34:28,335 --> 00:34:32,045
In the case where you got
repetitive timers going on,


636
00:34:32,116 --> 00:34:35,166
even though App Nap will
stretch those out for you will--


637
00:34:35,266 --> 00:34:36,896
will rate limit those for you.


638
00:34:37,275 --> 00:34:41,956
And even better situation in
that case is to use the API


639
00:34:42,016 --> 00:34:43,585
to tell you, "Hey,
your screen is not--


640
00:34:43,585 --> 00:34:46,186
your app is not visible
on the screen at all."


641
00:34:46,186 --> 00:34:49,936
And if appropriate, turn
that timer off completely.


642
00:34:50,846 --> 00:34:55,406
So, you know, the combination of
the system activities plus APIs


643
00:34:55,406 --> 00:35:01,066
that you can use really
helps the system as a whole,


644
00:35:01,456 --> 00:35:03,126
give the user the
maximum battery life.


645
00:35:03,476 --> 00:35:06,646
You find out more about this
in a couple of sessions coming


646
00:35:06,646 --> 00:35:10,056
up improving power efficiency
with App Nap which we'll go


647
00:35:10,056 --> 00:35:13,736
into great detail about App Nap
and APIs associated with App Nap


648
00:35:13,736 --> 00:35:16,806
and exactly how it figures
out when to nap something.


649
00:35:17,286 --> 00:35:20,526
And Energy Best Practices
which is a lower level talk


650
00:35:20,976 --> 00:35:24,066
that covers a lot of these
concepts but others as well.


651
00:35:24,336 --> 00:35:26,796
Both those talks I think
are very worth going to--


652
00:35:27,066 --> 00:35:29,766
the second one, will have a lot
of tools in it that you can use


653
00:35:29,766 --> 00:35:35,756
and cover how you will-- how you
can maximize energy efficiency


654
00:35:35,756 --> 00:35:36,836
for your costumers.


655
00:35:37,466 --> 00:35:39,816
Now, Centralized
Task Scheduling.


656
00:35:40,556 --> 00:35:42,546
Centralized Task
Scheduling as I mentioned is


657
00:35:42,546 --> 00:35:46,366
on a much longer time scale
and it's a dual use technology.


658
00:35:46,366 --> 00:35:51,826
It can be used to move tasks
to a time that is better


659
00:35:51,826 --> 00:35:55,456
from a battery life
standpoint say back on AC power.


660
00:35:55,786 --> 00:35:59,086
So, you might have a task
that's going to run--


661
00:35:59,086 --> 00:36:01,206
use up some of your
battery, but it's a task


662
00:36:01,206 --> 00:36:04,016
that can wait hours
perhaps before it runs.


663
00:36:04,016 --> 00:36:08,096
It's a housekeeping task and
we have a system-wide facility


664
00:36:08,096 --> 00:36:10,456
for rescheduling
that to be executing


665
00:36:10,456 --> 00:36:11,786
when you're back on AC power.


666
00:36:12,246 --> 00:36:18,316
Also, tasks that are may be
going to use significant CPU


667
00:36:18,316 --> 00:36:21,306
that you really only want to run
when the user hasn't interacted


668
00:36:21,306 --> 00:36:22,406
with their system for awhile.


669
00:36:22,406 --> 00:36:24,666
In other words, the users
probably gone to get a cup


670
00:36:24,666 --> 00:36:27,636
of coffee, now is the time
for an intensive, you know,


671
00:36:27,636 --> 00:36:29,166
background task to execute.


672
00:36:29,716 --> 00:36:33,166
So, Centralized Task Scheduling
is a general mechanism


673
00:36:33,166 --> 00:36:33,826
for doing that.


674
00:36:34,136 --> 00:36:38,046
And you can tell the
system how you can--


675
00:36:38,046 --> 00:36:39,716
first of all tell us
"Is this some work


676
00:36:39,716 --> 00:36:40,896
that can be time shifted?


677
00:36:41,176 --> 00:36:44,606
Can it be time shifted to either
back on AC or time shifted


678
00:36:44,606 --> 00:36:47,966
to when the user is not
interacting and by how long?


679
00:36:47,966 --> 00:36:49,286
What's the maximum
amount you're going


680
00:36:49,286 --> 00:36:51,676
to let the system
time shift it by?"


681
00:36:52,506 --> 00:36:53,846
Maybe it's a software update.


682
00:36:53,846 --> 00:36:56,106
You don't want it to
go more than 24 hours.


683
00:36:56,656 --> 00:36:59,196
Maybe it's a backup
you don't want it


684
00:36:59,196 --> 00:37:00,486
to go more than a few hours.


685
00:37:00,696 --> 00:37:03,286
Whatever that is, you tell
the system through this API.


686
00:37:03,286 --> 00:37:07,456
And there's a two
APIs for doing that,


687
00:37:07,456 --> 00:37:10,436
one is if you're task
is a LaunchD Task.


688
00:37:10,726 --> 00:37:13,456
You simply put that
in the launchd.plist.


689
00:37:13,656 --> 00:37:17,036
There's a way to specify--
can this be time shifted


690
00:37:17,036 --> 00:37:21,066
and by how long or directly
in your application.


691
00:37:21,066 --> 00:37:24,976
There's an API, if you've got
let's say a block that you want


692
00:37:24,976 --> 00:37:30,106
to execute on some schedule,
you can tell the system "Hey,


693
00:37:30,106 --> 00:37:33,416
this block can be
delayed by up to 8 hours."


694
00:37:34,176 --> 00:37:37,576
And that takes some
work on your part


695
00:37:37,576 --> 00:37:40,696
but it provides a much better
experience for the user both


696
00:37:40,696 --> 00:37:44,326
from a battery life standpoint
and not doing tasks that sort


697
00:37:44,326 --> 00:37:46,616
of get in their way when
they're being very interactive.


698
00:37:48,116 --> 00:37:50,156
So, Centralized Task Scheduling.


699
00:37:50,576 --> 00:37:52,806
Couple of sessions
coming up on that.


700
00:37:52,806 --> 00:37:54,946
This will be covered in
Energy Best Practices


701
00:37:54,946 --> 00:37:58,696
which I mentioned before and
also Efficient Design with XPC.


702
00:37:58,966 --> 00:38:02,306
So, XPC is one example where
you have a block of code.


703
00:38:02,306 --> 00:38:05,276
It's going to execute
but can just


704
00:38:05,276 --> 00:38:06,866
as easily be put
off until later.


705
00:38:07,116 --> 00:38:10,406
The system will make a decision
based on battery efficient


706
00:38:10,406 --> 00:38:13,976
or battery life to move
out to back on AC power.


707
00:38:14,506 --> 00:38:16,446
Finally, Power Saver.


708
00:38:16,446 --> 00:38:20,146
So, Power Saver is all about
Safari and it's really some


709
00:38:20,146 --> 00:38:23,316
of the same ideas, same
strategies we just talked


710
00:38:23,316 --> 00:38:27,646
about with App Nap but applied
to the web browsing experience.


711
00:38:27,946 --> 00:38:35,246
So, for example, in Safari,
as the user is browsing,


712
00:38:35,426 --> 00:38:37,176
typically they've got tabs--


713
00:38:37,246 --> 00:38:38,366
they've got a tab
they're looking at,


714
00:38:38,366 --> 00:38:40,116
they've got other tabs
that are in the background


715
00:38:40,506 --> 00:38:42,606
but if you look at what happens


716
00:38:42,606 --> 00:38:45,326
on those web pages often
times those tabs are


717
00:38:45,326 --> 00:38:46,526
executing JavaScript.


718
00:38:46,856 --> 00:38:48,116
They're executing plug-ins.


719
00:38:48,296 --> 00:38:50,576
They're burning power.


720
00:38:50,656 --> 00:38:52,926
They're gradually
dragging your battery down.


721
00:38:53,386 --> 00:38:54,986
So, what do we do?


722
00:38:55,276 --> 00:39:01,026
Well, since in Safari, we now
have a separate process per tab.


723
00:39:01,436 --> 00:39:04,696
We can use those same techniques
we talked about in App Nap


724
00:39:05,086 --> 00:39:08,526
to quiesce those tabs if the
user is not paying attention


725
00:39:08,526 --> 00:39:10,056
to the ones that are
in the background.


726
00:39:10,356 --> 00:39:13,296
That actually has a significant
effect given the web pages


727
00:39:13,296 --> 00:39:15,726
that are out there today often--


728
00:39:15,796 --> 00:39:16,876
they are just sitting there


729
00:39:16,876 --> 00:39:22,146
in the background running their
plug-in, running JavaScript


730
00:39:22,716 --> 00:39:27,466
and Safari will take care
of that with App Nap.


731
00:39:29,326 --> 00:39:33,856
In addition, in web
pages today, often times,


732
00:39:33,856 --> 00:39:35,646
power is being drawn
by plug-ins.


733
00:39:36,036 --> 00:39:43,756
Plug-ins tend to be power hungry
and so these plug-ins are--


734
00:39:43,926 --> 00:39:48,086
they're useful but
Safari is smart


735
00:39:48,456 --> 00:39:52,216
about how it handles plug-ins
with respect to energy,


736
00:39:52,426 --> 00:39:55,176
the latest Safari in Mavericks.


737
00:39:55,266 --> 00:40:00,276
And what it does is for
plug-ins that are not the center


738
00:40:00,276 --> 00:40:04,926
of your browsing
attention-- marginal plug-ins,


739
00:40:05,306 --> 00:40:09,876
it will take a preview
snapshot of that plug-in,


740
00:40:10,176 --> 00:40:13,596
display that until the
user interacts with it,


741
00:40:13,596 --> 00:40:15,416
until the user clicks
on it and then


742
00:40:15,416 --> 00:40:17,806
that plug-in will
start executing.


743
00:40:17,996 --> 00:40:18,816
Great feature.


744
00:40:19,166 --> 00:40:22,546
You end up with a web page
that has these previews in it


745
00:40:22,836 --> 00:40:24,276
but they're not burning
any power.


746
00:40:24,446 --> 00:40:25,926
They're not sitting
there executing


747
00:40:26,156 --> 00:40:27,786
until the user goes
and clicks on one.


748
00:40:27,786 --> 00:40:31,326
Now, if there is--
Safari uses heuristics,


749
00:40:31,556 --> 00:40:34,736
if there is a plug-in
that's front and center then


750
00:40:34,736 --> 00:40:36,586
that one will play
without interruptions.


751
00:40:37,036 --> 00:40:41,336
But if there's marginal
plug-ins that are not the center


752
00:40:41,336 --> 00:40:45,396
of the user's browsing activity,
those will still show up


753
00:40:45,396 --> 00:40:48,396
but they will not play until
the user clicks on them.


754
00:40:49,056 --> 00:40:51,626
To find out more about
this and more importantly,


755
00:40:51,626 --> 00:40:54,526
if you're a web developer,
you should go to the session


756
00:40:54,526 --> 00:40:57,266
on Power and Performance
in Optimizing Websites


757
00:40:57,266 --> 00:41:00,876
because the Safari team is going
to talk about not just this


758
00:41:00,876 --> 00:41:04,226
but also what you should do as
a web developer to make sure


759
00:41:04,226 --> 00:41:06,186
that your web pages
that you're sending


760
00:41:06,186 --> 00:41:08,696
out to users are not burning
through their battery.


761
00:41:08,696 --> 00:41:12,166
That they're executing as
efficiently as possible


762
00:41:12,466 --> 00:41:13,996
that the CSS is efficient,


763
00:41:13,996 --> 00:41:16,876
that the users battery
experience is not impacted


764
00:41:16,926 --> 00:41:18,206
by a bad web page.


765
00:41:20,956 --> 00:41:24,696
So, we covered App Nap,
Centralized Task Scheduling,


766
00:41:24,696 --> 00:41:27,896
Energy Saver, three great
features in OS X Mavericks


767
00:41:28,276 --> 00:41:30,676
that are going to help the
users have a great battery


768
00:41:30,676 --> 00:41:31,626
life experience.


769
00:41:32,096 --> 00:41:33,916
So, what can you
do as developers?


770
00:41:34,266 --> 00:41:36,986
Well, perhaps goes
without saying


771
00:41:37,296 --> 00:41:40,196
but of course major effect


772
00:41:40,196 --> 00:41:42,556
on battery life is
whether you're using


773
00:41:42,586 --> 00:41:43,776
efficient algorithms.


774
00:41:44,206 --> 00:41:48,996
And, so just make sure that,
you know, if you got tasks going


775
00:41:48,996 --> 00:41:52,976
on that should be they're
nsquared algorithms


776
00:41:52,976 --> 00:41:55,456
that you're using and they
really should be in login


777
00:41:55,756 --> 00:41:59,706
or order in, make sure that
the algorithms were efficient.


778
00:41:59,706 --> 00:42:00,856
That's going to help everything.


779
00:42:00,856 --> 00:42:02,426
That's going to help
responsiveness.


780
00:42:02,426 --> 00:42:04,496
That's going to help
performance.


781
00:42:04,496 --> 00:42:08,806
That's going to help-- help
you get the best battery life.


782
00:42:09,226 --> 00:42:13,976
But beyond that, take a look,
use the tools in OS X Maverick


783
00:42:13,976 --> 00:42:17,496
to take a closer look at energy
impact of your application.


784
00:42:18,646 --> 00:42:21,876
Watch for your app in
energy in activity monitor.


785
00:42:22,326 --> 00:42:25,016
Look at what it's doing,
understand what it's doing.


786
00:42:25,356 --> 00:42:28,516
Like I say, it may be
perfectly expected behavior.


787
00:42:28,626 --> 00:42:32,126
After all, the apps are supposed
to compute and so they're going


788
00:42:32,126 --> 00:42:33,256
to use energy doing that.


789
00:42:33,606 --> 00:42:35,656
But make sure that
it's as expected


790
00:42:35,716 --> 00:42:37,786
and that it's not doing work


791
00:42:38,136 --> 00:42:40,986
that either the user
didn't expect or worse


792
00:42:40,986 --> 00:42:44,216
that the user really
didn't want.


793
00:42:44,566 --> 00:42:47,496
Then the next step is measuring
your application with Xcode.


794
00:42:48,026 --> 00:42:52,396
And as I mentioned, Xcode has a
lot of new tools in it to dive


795
00:42:52,396 --> 00:42:56,196
down more deeply take a
look at things like time


796
00:42:56,196 --> 00:42:58,646
or firings the frequency
of firings,


797
00:42:58,646 --> 00:43:00,246
do I have high-frequency timers


798
00:43:00,816 --> 00:43:03,426
that could have some
tolerance introduce


799
00:43:03,656 --> 00:43:06,086
and let the system do a
better job coalescing those,


800
00:43:06,146 --> 00:43:07,046
et cetera, et cetera.


801
00:43:07,746 --> 00:43:11,116
And then finally, adopt
Centralized Task Scheduling.


802
00:43:11,446 --> 00:43:15,206
Let the system move those
background task things like,


803
00:43:15,206 --> 00:43:20,416
you know, downloading
updates from the web,


804
00:43:20,836 --> 00:43:26,076
can be maybe pushed off
for hours or even days.


805
00:43:26,676 --> 00:43:28,206
Let the system know about that


806
00:43:28,206 --> 00:43:32,206
so the system can make the right
decision and put those events


807
00:43:32,336 --> 00:43:35,266
so they occur when
you're on back on AC power


808
00:43:35,526 --> 00:43:38,466
or when the users are not
interacting with their system.


809
00:43:39,456 --> 00:43:44,166
So, additional related sessions
that I would really recommend,


810
00:43:44,696 --> 00:43:49,116
Building Efficient OS X apps
and this is efficiency not just


811
00:43:49,116 --> 00:43:52,546
from energy although energy
is the one focused on but also


812
00:43:52,546 --> 00:43:55,696
from the standpoint of memory
use, from the standpoint


813
00:43:55,776 --> 00:43:57,546
of just simply using
the resources


814
00:43:57,546 --> 00:43:58,536
to their greatest effect.


815
00:43:59,086 --> 00:44:02,416
Efficient Design with
XPC, I mentioned before


816
00:44:03,356 --> 00:44:06,726
and that's an area where
you again can take advantage


817
00:44:06,726 --> 00:44:08,236
of Centralized Task Scheduling.


818
00:44:08,546 --> 00:44:10,776
Power and Performance:
Optimizing your Website


819
00:44:10,776 --> 00:44:12,966
for Greatest Battery Life
in Response Scrolling.


820
00:44:13,166 --> 00:44:16,396
That's going to be the longest
title of all the talks here.


821
00:44:16,896 --> 00:44:20,206
But anyways, if you're a web
developer, absolutely go to that


822
00:44:20,206 --> 00:44:22,996
so that you can produce
web pages that are more


823
00:44:22,996 --> 00:44:25,206
in energy friendly
for your users.


824
00:44:25,806 --> 00:44:30,276
Improving Power Efficiency with
App Nap, again a more deep dive


825
00:44:30,276 --> 00:44:33,336
on the mechanisms in App
Nap and how those work


826
00:44:33,336 --> 00:44:36,136
and how your app can
interact with those.


827
00:44:36,596 --> 00:44:41,026
And then finally, Energy Best
Practices which is really


828
00:44:41,026 --> 00:44:45,816
across the board kind
of more low level--


829
00:44:45,816 --> 00:44:50,036
how OS X Mavericks
focuses on energy.


830
00:44:50,266 --> 00:44:56,546
So, to leave you, you know,
it's really important I think


831
00:44:56,546 --> 00:44:59,566
to understand that
battery life often


832
00:44:59,566 --> 00:45:03,556
for users becomes almost the
most important feature to them.


833
00:45:03,906 --> 00:45:06,246
More and more you see
people out on the road.


834
00:45:06,246 --> 00:45:08,736
They're using their
systems in a mobile fashion.


835
00:45:09,056 --> 00:45:12,106
They're used to all-day
battery life from their iPads.


836
00:45:12,496 --> 00:45:16,876
So, this is the new norm and
we need to get used to it


837
00:45:16,876 --> 00:45:18,436
and we spent a lot of time


838
00:45:18,436 --> 00:45:21,486
in Mavericks just squeezing
every last ounce out of


839
00:45:21,486 --> 00:45:24,516
that battery and we hope
that you can use the tools


840
00:45:24,516 --> 00:45:27,786
and the mechanisms in Mavericks,
do the same thing for your apps.


841
00:45:28,156 --> 00:45:28,976
Thank you very much.


842
00:45:29,476 --> 00:45:34,723
[Applause]


843
00:45:35,223 --> 00:45:40,470
[ Silence ]

