1
00:00:07,516 --> 00:00:18,500
[ Music ]


2
00:00:24,516 --> 00:00:29,546
[ Applause ]


3
00:00:30,046 --> 00:00:30,606
>> Hello, everyone.


4
00:00:30,786 --> 00:00:32,456
Welcome to Building
Great Workout Apps.


5
00:00:33,036 --> 00:00:34,506
You are here because you care


6
00:00:34,586 --> 00:00:36,276
about building the
best experiences


7
00:00:36,366 --> 00:00:38,146
for users of your fitness apps.


8
00:00:39,086 --> 00:00:40,216
Some of them are fanatical.


9
00:00:40,796 --> 00:00:42,816
They're spending hours
per week on their fitness,


10
00:00:43,176 --> 00:00:45,846
and they expect responsive,
easy to use apps


11
00:00:46,196 --> 00:00:47,306
that provide accurate data


12
00:00:47,786 --> 00:00:50,006
and integrate seamlessly
with Apple Health.


13
00:00:51,286 --> 00:00:52,096
My name is Dash.


14
00:00:52,296 --> 00:00:54,276
I'm an engineer on Apple's
Health and Fitness team,


15
00:00:54,646 --> 00:00:56,336
and I'll be joined up
here in a little while


16
00:00:56,486 --> 00:00:57,436
by my colleague Jorge.


17
00:00:58,446 --> 00:01:01,366
Today, we're going to show you
how to build great workout apps


18
00:01:01,696 --> 00:01:02,706
that your users will love.


19
00:01:07,046 --> 00:01:09,476
Working out is an important
aspect of overall health.


20
00:01:10,286 --> 00:01:13,106
It can help you sleep,
make good eating decisions,


21
00:01:13,106 --> 00:01:13,926
and clear your mind.


22
00:01:20,356 --> 00:01:23,536
Many of you have worked hard
to create workout apps on iOS


23
00:01:24,056 --> 00:01:26,656
that inspire users to track
their fitness activities


24
00:01:27,106 --> 00:01:28,836
and reach for new
health and fitness goals.


25
00:01:29,516 --> 00:01:33,686
With Apple Watch,
workout apps come to life


26
00:01:33,826 --> 00:01:36,016
within the moment heart
rate, calorie burn,


27
00:01:36,076 --> 00:01:37,266
and activity detection,


28
00:01:37,646 --> 00:01:40,366
in an experience delivered
exclusively from the wrist.


29
00:01:41,646 --> 00:01:43,756
Today, we're going to
primarily focus on how


30
00:01:43,756 --> 00:01:46,886
to build great workout
apps for Apple Watch.


31
00:01:49,276 --> 00:01:51,506
We'll start by introducing
background running,


32
00:01:51,996 --> 00:01:55,936
a new game changing capability
for workout apps on watchOS 3.


33
00:01:57,356 --> 00:01:59,106
Then, we'll walk
through the lifecycle


34
00:01:59,106 --> 00:02:01,036
of a workout from
start to finish.


35
00:02:01,576 --> 00:02:05,926
Along the way, we'll show
you how your workout app can


36
00:02:05,926 --> 00:02:07,756
contribute to the
user's activity ranks.


37
00:02:10,036 --> 00:02:13,116
Next, we'll discuss some
new APIs that we've added


38
00:02:13,146 --> 00:02:14,716
for workouts in iOS 10.


39
00:02:15,276 --> 00:02:19,006
And finally, we'll review
some best practices.


40
00:02:20,206 --> 00:02:20,996
So let's get started.


41
00:02:21,676 --> 00:02:26,296
At the core of every workout
app is a workout session


42
00:02:26,366 --> 00:02:27,916
that the user can
start and stop.


43
00:02:28,566 --> 00:02:30,906
So we start with
HKWorkoutSession.


44
00:02:32,146 --> 00:02:33,736
This API is simple to use


45
00:02:33,736 --> 00:02:36,956
and provides automatic
benefits to your workout app.


46
00:02:37,526 --> 00:02:38,796
When a workout session
is active,


47
00:02:39,006 --> 00:02:41,586
the sensors on Apple Watch
will use the activity type


48
00:02:41,716 --> 00:02:44,796
of the session to accurately
compute motion and calorimetry.


49
00:02:45,996 --> 00:02:48,266
This will also enable
your app to contribute


50
00:02:48,266 --> 00:02:49,506
to the user's activity rings.


51
00:02:50,456 --> 00:02:52,256
For example, during a workout,


52
00:02:52,256 --> 00:02:55,786
activity will use the workout
type to award exercise minutes


53
00:02:55,836 --> 00:02:57,786
to the user's exercise ring.


54
00:02:59,496 --> 00:03:00,846
During a workout session,


55
00:03:01,046 --> 00:03:03,276
your app will be displayed
whenever the user wakes


56
00:03:03,276 --> 00:03:03,876
their device.


57
00:03:04,556 --> 00:03:06,326
Users will love having
instant access


58
00:03:06,326 --> 00:03:08,266
to your app while they're
using it to workout.


59
00:03:11,776 --> 00:03:15,466
Finally, we're really excited
to announce that workout apps


60
00:03:15,466 --> 00:03:18,426
in watchOS 3 can now be set
up to run in the background.


61
00:03:19,686 --> 00:03:21,416
Let's talk more about
background running.


62
00:03:22,516 --> 00:03:26,586
[ Applause ]


63
00:03:27,086 --> 00:03:29,126
Background running will
elevate the experience


64
00:03:29,126 --> 00:03:31,046
of your workout app.


65
00:03:31,046 --> 00:03:32,646
Your app will be
able to process data


66
00:03:32,646 --> 00:03:34,056
from the sensors
in the background.


67
00:03:34,726 --> 00:03:36,716
For example, you'll be able


68
00:03:36,716 --> 00:03:39,126
to receive continuous
heart rate values even


69
00:03:39,126 --> 00:03:40,826
when your app isn't
displayed on screen.


70
00:03:40,826 --> 00:03:45,396
You'll also be able to provide
live feedback to the user


71
00:03:45,546 --> 00:03:47,576
at any time during
the workout session.


72
00:03:48,176 --> 00:03:49,746
You can send the
user haptic alerts


73
00:03:49,776 --> 00:03:51,286
to let them know their
current progress.


74
00:03:53,616 --> 00:03:56,456
This will also allow
you to quickly show


75
00:03:56,456 --> 00:03:58,926
up to date data whenever
the user just glances


76
00:03:58,926 --> 00:04:00,266
at their wrist.


77
00:04:02,576 --> 00:04:04,506
Enabling background
running is simple,


78
00:04:05,096 --> 00:04:08,636
just add workout-processing
to the BackgroundModes


79
00:04:08,676 --> 00:04:10,486
in your extensions Info.plist.


80
00:04:14,046 --> 00:04:16,435
Of course, to maintain high
performance on Apple Watch,


81
00:04:16,796 --> 00:04:18,456
it's critical that you
limit your background work


82
00:04:18,596 --> 00:04:19,935
to only do what's necessary.


83
00:04:20,005 --> 00:04:24,266
If your app uses excessive
CPU while in the background,


84
00:04:24,796 --> 00:04:29,146
watchOS may decide
to suspend it.


85
00:04:29,416 --> 00:04:31,786
We recommend that
you use our tools


86
00:04:31,786 --> 00:04:34,026
to measure your app's
background CPU usage.


87
00:04:35,146 --> 00:04:37,576
You can use the CPU
report tool in Xcode,


88
00:04:39,016 --> 00:04:40,876
or the time profiler
in instruments.


89
00:04:42,436 --> 00:04:44,796
watchOS 3 will also
generate a log


90
00:04:44,796 --> 00:04:48,166
with a backtrace whenever your
app crosses the CPU threshold.


91
00:04:48,686 --> 00:04:52,516
Now that you're set up
for background running,


92
00:04:52,986 --> 00:04:54,776
let's walk through the steps
for starting a workout.


93
00:04:56,436 --> 00:04:58,516
There are three steps
for starting a workout.


94
00:04:59,896 --> 00:05:02,286
First, you need to
request authorization


95
00:05:02,576 --> 00:05:06,726
to access data in HealthKit.


96
00:05:06,726 --> 00:05:08,876
Second, you'll create a
workout configuration object


97
00:05:09,006 --> 00:05:12,896
representing the type of workout
that you'd like to start.


98
00:05:12,896 --> 00:05:14,336
And third, you'll create


99
00:05:14,336 --> 00:05:16,136
and start a workout
session using your


100
00:05:16,136 --> 00:05:17,006
workout configuration.


101
00:05:17,456 --> 00:05:18,876
Let's go through
these one-by-one.


102
00:05:23,046 --> 00:05:25,246
All workout apps will want
to request authorization


103
00:05:25,316 --> 00:05:26,656
to write workouts to HealthKit.


104
00:05:27,626 --> 00:05:29,856
This will enable workouts
from your app to show


105
00:05:29,856 --> 00:05:32,436
up in the user's health
and activity apps.


106
00:05:33,236 --> 00:05:36,156
Depending on the specifics of
your workout app, you may want


107
00:05:36,156 --> 00:05:38,486
to request authorization
to read energy burned,


108
00:05:38,646 --> 00:05:40,286
distance, and a heart rate.


109
00:05:41,256 --> 00:05:44,106
If you'd like more information
on how to set up authorization,


110
00:05:44,456 --> 00:05:46,576
we recommend you take a
look at our previous talk,


111
00:05:46,856 --> 00:05:48,646
Getting the Most
out of HealthKit.


112
00:05:53,106 --> 00:05:54,436
Workout sessions are created


113
00:05:54,436 --> 00:05:56,076
with a workoutConfiguration
object.


114
00:05:57,416 --> 00:06:00,266
The workoutConfiguration
includes the workouts activity


115
00:06:00,266 --> 00:06:01,996
type, such as running
or bicycling,


116
00:06:02,766 --> 00:06:05,196
and the location type,
such as indoor or outdoor.


117
00:06:07,836 --> 00:06:09,766
You will use the
configuration object


118
00:06:09,866 --> 00:06:13,836
to create a workoutSession,
then to start the session,


119
00:06:14,056 --> 00:06:17,056
simply pass it to the start
method on an HK healthStore.


120
00:06:21,076 --> 00:06:22,166
Let's try this out with a demo.


121
00:06:22,866 --> 00:06:25,256
For just today, let's pretend we
all work for the same company.


122
00:06:25,846 --> 00:06:28,576
Our latest project is
to build a workout app


123
00:06:28,576 --> 00:06:32,166
for watchOS 3 that's designed
specifically for sloth lovers.


124
00:06:33,246 --> 00:06:34,196
It's called SpeedySloth.


125
00:06:35,096 --> 00:06:36,426
I've an Xcode project here


126
00:06:36,516 --> 00:06:39,746
that already has the UI
built for this workout app.


127
00:06:39,746 --> 00:06:40,616
Let's take a look together.


128
00:06:50,046 --> 00:06:51,866
So this is the first
view that the user sees


129
00:06:51,976 --> 00:06:53,566
when they open our app.


130
00:06:53,566 --> 00:06:56,056
It has two pickers,
one for activity type,


131
00:06:56,416 --> 00:06:57,886
which can be walking,
running, or hiking.


132
00:06:59,006 --> 00:07:00,346
And another for location type,


133
00:07:00,556 --> 00:07:03,056
which can be outdoor,
indoor, or unknown.


134
00:07:03,566 --> 00:07:07,156
When I press the Start
button, nothing happens.


135
00:07:07,546 --> 00:07:08,426
Let's fix that together.


136
00:07:12,046 --> 00:07:13,716
The view that you
just saw is controlled


137
00:07:14,026 --> 00:07:16,416
by a class called configuration
interface controller.


138
00:07:16,756 --> 00:07:20,356
I've a method right here
called didTap StartButton,


139
00:07:20,606 --> 00:07:22,356
that's called whenever the
user taps the Start button.


140
00:07:22,966 --> 00:07:23,666
I'll fill it in now.


141
00:07:28,196 --> 00:07:30,186
I'm creating a
workoutConfiguration object,


142
00:07:30,976 --> 00:07:32,346
and I'm setting the
activity type


143
00:07:32,396 --> 00:07:34,196
to be the currently
selected activity type


144
00:07:34,476 --> 00:07:35,996
from that first picker.


145
00:07:36,856 --> 00:07:38,496
Then I'm setting
the location type


146
00:07:39,706 --> 00:07:41,426
to be the currently
selected location type


147
00:07:41,556 --> 00:07:42,376
from that second picker.


148
00:07:42,796 --> 00:07:46,106
I'm passing the
workoutConfiguration object


149
00:07:46,576 --> 00:07:48,366
to a new interface
controller called


150
00:07:48,366 --> 00:07:49,516
WorkoutInterface Controller.


151
00:07:50,986 --> 00:07:52,906
WorkoutInterface
Controller is responsible


152
00:07:52,906 --> 00:07:54,976
for managing the UI
during our workout session.


153
00:07:55,496 --> 00:07:57,586
It will also be responsible
for Starting


154
00:07:57,586 --> 00:07:58,826
and stopping the
workout session.


155
00:07:59,616 --> 00:08:01,276
Let's take a look at
WorkoutInterface Controller.


156
00:08:07,256 --> 00:08:09,736
So, I'm in the awake method of
WorkoutInterface Controller,


157
00:08:10,076 --> 00:08:12,706
and I know that we'll receive
our workoutConfiguration object


158
00:08:12,706 --> 00:08:14,396
as a context object
in this method.


159
00:08:15,126 --> 00:08:16,556
Let's use it to start
a workout session.


160
00:08:20,306 --> 00:08:22,946
First, I'm unwrapping the
context object to make sure


161
00:08:22,946 --> 00:08:24,456
that it's a valid
workout configuration.


162
00:08:26,316 --> 00:08:29,136
Then I'm using it to create a
workout session by passing it


163
00:08:29,136 --> 00:08:30,976
to the initializer
for HKWorkoutSession.


164
00:08:34,046 --> 00:08:36,135
I'm setting the delegate of
my workout session to be self,


165
00:08:36,346 --> 00:08:37,775
so we'll receive
callbacks for things


166
00:08:37,775 --> 00:08:39,706
like state changes and errors.


167
00:08:42,176 --> 00:08:45,166
Then I'm saving the current date
to be our workout start date.


168
00:08:45,506 --> 00:08:48,126
We'll use this later on, when
we save our workout sample


169
00:08:48,176 --> 00:08:48,946
to HealthKit.


170
00:08:51,556 --> 00:08:53,266
Next, I'm passing
the workoutSession


171
00:08:53,266 --> 00:08:54,926
to the start method
on HK healthStore.


172
00:08:55,926 --> 00:08:56,546
Let's try it out.


173
00:09:11,046 --> 00:09:12,846
So here we are at configuration
interface controller.


174
00:09:12,936 --> 00:09:15,086
I'm going to leave it at
outdoor walk and I'm going


175
00:09:15,086 --> 00:09:16,136
to press the Start button again.


176
00:09:16,706 --> 00:09:20,636
So this just opened
WorkoutInterface Controller.


177
00:09:20,936 --> 00:09:22,976
So I've a feeling, that our
workout session did start


178
00:09:22,976 --> 00:09:25,076
correctly, but to be
sure, let's take a look


179
00:09:25,076 --> 00:09:26,206
at the clock face on the device.


180
00:09:27,536 --> 00:09:28,366
You'll see at the top,


181
00:09:28,366 --> 00:09:29,846
that there's a green
running man icon.


182
00:09:30,336 --> 00:09:32,036
This indicates that
one of the apps


183
00:09:32,036 --> 00:09:34,476
on this watch has an
active workout session.


184
00:09:35,256 --> 00:09:38,376
The user can tap this at any
time to get back to the app


185
00:09:38,526 --> 00:09:39,406
with the active session.


186
00:09:39,966 --> 00:09:43,996
So it looks like our session
did indeed start correctly.


187
00:09:44,376 --> 00:09:45,356
Let's review what we just did.


188
00:09:46,206 --> 00:09:47,726
We used information
from the user


189
00:09:47,926 --> 00:09:49,716
to create a workoutConfiguration
object.


190
00:09:50,756 --> 00:09:53,436
Then we used that configuration
to create a workout session.


191
00:09:54,046 --> 00:09:55,826
And we started the
session by passing it


192
00:09:55,826 --> 00:09:57,246
to the start method
on our healthStore.


193
00:09:57,826 --> 00:10:00,926
Now that we have an
active workout session,


194
00:10:01,386 --> 00:10:03,406
we want to start collecting
some data to display


195
00:10:03,406 --> 00:10:04,586
to the user during the workout.


196
00:10:05,526 --> 00:10:07,476
To talk to you more about
data collection and control,


197
00:10:07,476 --> 00:10:09,246
I'd like to invite up
my colleague Jorge.


198
00:10:09,646 --> 00:10:09,936
Thank you.


199
00:10:10,516 --> 00:10:15,966
[ Applause ]


200
00:10:16,466 --> 00:10:17,946
>> Thank you Dash.


201
00:10:18,976 --> 00:10:19,486
Good morning.


202
00:10:20,506 --> 00:10:21,316
My name is Jorge.


203
00:10:21,396 --> 00:10:23,676
I'm a software engineer
in the HealthKit Team.


204
00:10:24,446 --> 00:10:28,106
So, my colleague Dash just
showed you how to configure


205
00:10:28,106 --> 00:10:29,846
and start a workout session.


206
00:10:30,316 --> 00:10:32,046
Now, we are going to continue


207
00:10:32,046 --> 00:10:34,206
by discussing how
you can collect data


208
00:10:34,206 --> 00:10:37,966
and control the state of your
session during a workout.


209
00:10:45,046 --> 00:10:47,076
We are going to be
calling data collection


210
00:10:47,136 --> 00:10:50,966
and control those different
tasks that you need to perform


211
00:10:51,146 --> 00:10:54,216
from the moment you
start a workout session


212
00:10:54,416 --> 00:10:56,496
and until you decide to end it.


213
00:10:57,946 --> 00:10:59,816
Let's take a look at all
these different steps.


214
00:11:00,416 --> 00:11:06,126
First, we are going to be
observing samples, that is,


215
00:11:06,196 --> 00:11:10,056
retrieving sample information
from HealthKit in order


216
00:11:10,056 --> 00:11:12,826
to incorporate those
into your workout.


217
00:11:13,186 --> 00:11:17,806
Next, we are going to
be observing events.


218
00:11:18,386 --> 00:11:23,126
Events can be generated by
HealthKit or you can detect them


219
00:11:23,126 --> 00:11:24,816
from your user interface.


220
00:11:25,196 --> 00:11:27,526
We're going to be discussing
events a little more


221
00:11:27,526 --> 00:11:28,676
in detail later.


222
00:11:29,186 --> 00:11:34,286
Once you started
those two tasks,


223
00:11:34,676 --> 00:11:36,346
you're in a running state.


224
00:11:37,106 --> 00:11:40,946
At any point, you
could choose to pause,


225
00:11:41,566 --> 00:11:44,306
and then resume the
workout maybe several times.


226
00:11:45,666 --> 00:11:49,066
And later, you will
decide that you want


227
00:11:49,346 --> 00:11:51,356
to end your workout session.


228
00:11:51,606 --> 00:11:53,866
So let's take a look


229
00:11:53,866 --> 00:11:56,436
at all these steps a
little more in detail.


230
00:12:00,136 --> 00:12:02,586
First, we said we wanted
to observe samples.


231
00:12:02,846 --> 00:12:06,866
The way you do this is by
opening an anchor object query


232
00:12:07,176 --> 00:12:10,156
for each of the data tabs
you're interested in.


233
00:12:10,596 --> 00:12:13,526
That could be, maybe,
wheelchair distance,


234
00:12:13,696 --> 00:12:16,046
or it could be active
energy burn.


235
00:12:16,566 --> 00:12:23,046
When you do this, you also will
setup an updateHandler in order


236
00:12:23,046 --> 00:12:27,206
to receive new event, new
samples arriving to HealthKit.


237
00:12:27,726 --> 00:12:34,926
That will allow you to keep
running totals for your workout


238
00:12:35,706 --> 00:12:38,716
such as maybe the total
accumulate distance


239
00:12:38,826 --> 00:12:41,136
or total accumulated
number of calories.


240
00:12:41,616 --> 00:12:45,166
With that, you will be able
to update your UI live.


241
00:12:45,386 --> 00:12:49,246
You will also be able
to display, for example,


242
00:12:49,556 --> 00:12:51,636
the most recent heart
rate measured.


243
00:12:56,046 --> 00:12:59,856
You could also notify users
of certain goals, for example,


244
00:12:59,986 --> 00:13:02,646
whenever they reach the
first mile in their run,


245
00:13:02,916 --> 00:13:05,896
or whenever they burn
the first 100 calories


246
00:13:05,896 --> 00:13:07,256
in their rowing workout.


247
00:13:07,256 --> 00:13:10,866
So let's now take a
look at some code.


248
00:13:14,046 --> 00:13:16,416
Since we are going to be
using anchor object queries,


249
00:13:16,636 --> 00:13:18,936
the first thing that
you need to do is


250
00:13:18,936 --> 00:13:20,796
to create a predicate
for your query.


251
00:13:21,336 --> 00:13:27,236
We are going to start by using
the start date of your workout.


252
00:13:27,756 --> 00:13:32,026
You do not want samples that the
work generated before that date


253
00:13:32,366 --> 00:13:34,786
to count against your totals.


254
00:13:35,126 --> 00:13:40,906
Next, you're going to
be asking for samples


255
00:13:40,906 --> 00:13:42,126
from the local device.


256
00:13:42,286 --> 00:13:43,796
That means the current watch.


257
00:13:45,246 --> 00:13:48,626
You want to avoid, for
example, getting samples


258
00:13:48,626 --> 00:13:52,136
that are being saved on
your watch as a result


259
00:13:52,136 --> 00:13:54,106
of a sync operation
with your iPhone.


260
00:13:56,216 --> 00:13:59,136
Finally, you're going to
compose those two predicates


261
00:13:59,136 --> 00:14:03,176
into the final predicate you're
going to be using in your query.


262
00:14:03,666 --> 00:14:09,546
Next, you have to set
up a handler in order


263
00:14:09,546 --> 00:14:12,326
to process samples
arriving in from HealthKit.


264
00:14:13,056 --> 00:14:17,026
You will normally accumulate
those samples into your totals


265
00:14:17,196 --> 00:14:21,416
and maybe display some
updated user interface.


266
00:14:21,966 --> 00:14:26,536
Now, we are ready to create
the anchor object query.


267
00:14:26,906 --> 00:14:30,016
You're going to be using the
quantityType you're interested


268
00:14:30,016 --> 00:14:31,866
in, the predicate we just built,


269
00:14:32,156 --> 00:14:34,456
and set up your initial
results handler


270
00:14:34,676 --> 00:14:36,346
as the handle we defined before.


271
00:14:36,886 --> 00:14:41,396
You will also set
up the updateHandler


272
00:14:42,086 --> 00:14:44,226
so you get new samples arriving


273
00:14:44,226 --> 00:14:46,046
to HealthKit during
your workout.


274
00:14:47,996 --> 00:14:51,976
Finally, you're going to execute
your anchor object query.


275
00:14:58,076 --> 00:15:00,996
We also mention that you would
like to notify your users


276
00:15:00,996 --> 00:15:02,426
of certain reached goals.


277
00:15:02,616 --> 00:15:04,956
For example, whenever
they reach the first mile,


278
00:15:04,956 --> 00:15:07,366
or the first 100
calories in their workout.


279
00:15:07,766 --> 00:15:10,436
The way you will normally do
this, is like playing a haptic


280
00:15:10,436 --> 00:15:12,256
to alert the user
of this situation.


281
00:15:13,266 --> 00:15:15,266
When you do that, we recommend


282
00:15:15,356 --> 00:15:17,486
that you update your
user interface


283
00:15:17,756 --> 00:15:20,866
so you reflect what
this reached goal is.


284
00:15:21,246 --> 00:15:24,036
It is very likely when
a user feels the haptic,


285
00:15:24,816 --> 00:15:28,186
they will raise their wrist
and try to see on the screen,


286
00:15:28,186 --> 00:15:29,416
what this haptic was about.


287
00:15:29,896 --> 00:15:36,236
The way to play a haptic
is by using the play method


288
00:15:36,456 --> 00:15:37,976
in WatchKit interface device.


289
00:15:42,216 --> 00:15:43,926
Now let's talk about events.


290
00:15:44,986 --> 00:15:47,716
Events are timestamps
you would use


291
00:15:47,996 --> 00:15:50,476
to highlight certain
points during your workout.


292
00:15:50,826 --> 00:15:53,886
For example, you can use
pause and resume events


293
00:15:54,136 --> 00:15:56,976
to highlight the point where
your workout state changed.


294
00:16:02,046 --> 00:16:04,616
Some events are going to be
created by your application


295
00:16:04,916 --> 00:16:06,706
and saved later into
your workout.


296
00:16:07,176 --> 00:16:12,476
Others are going to be created
by HealthKit and sent to you.


297
00:16:15,116 --> 00:16:18,906
New in watchOS 3, we have
the didGenerate event


298
00:16:18,906 --> 00:16:23,206
in workout session delegate
that HealthKit will use


299
00:16:23,446 --> 00:16:26,206
to send events to
your application.


300
00:16:27,816 --> 00:16:31,286
So let's now take a look at
the different types of events


301
00:16:31,286 --> 00:16:32,616
that we have in watchOS 3.


302
00:16:37,176 --> 00:16:41,036
Laps and markers are two new
events that we just introduced.


303
00:16:42,376 --> 00:16:47,136
These are events that you
want to create yourself


304
00:16:47,446 --> 00:16:49,096
to store in your workout.


305
00:16:50,876 --> 00:16:54,166
This will represent
timestamps you can use later


306
00:16:54,166 --> 00:16:57,246
for displaying your workouts
in graphs or statistics.


307
00:16:57,836 --> 00:17:03,476
There is a difference
between laps and markers.


308
00:17:03,566 --> 00:17:08,976
Laps represent events that
partition your workout


309
00:17:08,976 --> 00:17:10,965
in equal distance portion.


310
00:17:11,536 --> 00:17:16,346
For example, if you're in a
running or cycling workout


311
00:17:16,346 --> 00:17:21,806
in a track, you would create
a lap event each time the user


312
00:17:21,806 --> 00:17:22,906
completes a round.


313
00:17:26,996 --> 00:17:28,926
Markers, on the other side,


314
00:17:29,306 --> 00:17:32,176
can be arbitrary
points in your workout.


315
00:17:32,896 --> 00:17:36,546
They don't have to be tied to
distance or to any other metric.


316
00:17:37,826 --> 00:17:39,476
They could represent,
for example,


317
00:17:39,926 --> 00:17:43,456
the moment your user
reached the top of a hill,


318
00:17:44,206 --> 00:17:48,346
or maybe that time where
you saw a sloth in your way.


319
00:17:55,046 --> 00:17:57,716
Now let's talk about pausing
and resuming workouts.


320
00:17:58,026 --> 00:18:02,366
During a workout session,
your user might decide


321
00:18:02,366 --> 00:18:04,776
to momentarily stop
the activity.


322
00:18:05,486 --> 00:18:10,156
For example, they are on a run,
and they might decide to stop


323
00:18:10,156 --> 00:18:11,916
to buy a bottle of water.


324
00:18:12,456 --> 00:18:17,446
In this case, you will have
some way in your user interface


325
00:18:17,726 --> 00:18:19,956
for your user to let you
know of this situation.


326
00:18:20,476 --> 00:18:24,396
When this happens, you can
now call into HealthKit


327
00:18:24,796 --> 00:18:26,456
to pause your workout.


328
00:18:27,096 --> 00:18:30,686
This will allow HealthKit
to save power on your watch


329
00:18:30,896 --> 00:18:32,626
and space in the database.


330
00:18:33,136 --> 00:18:38,026
Of course, when this happens,
you want to ignore any new data


331
00:18:38,026 --> 00:18:40,186
that arrives to your
application.


332
00:18:40,646 --> 00:18:44,046
You don't want to
accumulate samples


333
00:18:44,046 --> 00:18:48,686
to your totals while
your session is paused.


334
00:18:51,696 --> 00:18:55,396
HealthKit will respond
to pause and resume calls


335
00:18:55,816 --> 00:18:58,386
by generating pause
and your resume events


336
00:18:58,636 --> 00:19:03,296
that you will get using the
workout session delegate.


337
00:19:03,796 --> 00:19:08,736
It's important to know that
after you receive a pause event,


338
00:19:09,316 --> 00:19:11,956
no new events will be
generated by HealthKit,


339
00:19:12,146 --> 00:19:14,556
until you resume your session.


340
00:19:19,546 --> 00:19:23,466
New in watchOS 3, the
function you will use to pause


341
00:19:23,466 --> 00:19:26,216
and resume your workout
are part of HKHealthStore,


342
00:19:26,606 --> 00:19:28,976
pause workoutSession and
resume workoutSession.


343
00:19:32,166 --> 00:19:34,826
Events that you will receive
are paused and resumed,


344
00:19:35,336 --> 00:19:38,856
which you may already know
from previous iOS releases.


345
00:19:43,436 --> 00:19:45,386
Now let's talk about
motion events.


346
00:19:46,756 --> 00:19:48,116
This is new in watchOS 3.


347
00:19:48,656 --> 00:19:51,196
The motion pause and
motion resume events.


348
00:19:52,536 --> 00:19:56,986
Your watch, during a running
workout, is able to detect


349
00:19:56,986 --> 00:19:59,596
that the user stopped moving.


350
00:19:59,596 --> 00:20:01,576
That means they are
not running anymore.


351
00:20:02,446 --> 00:20:04,606
And we will be able to
detect whenever they start


352
00:20:04,606 --> 00:20:05,956
running again.


353
00:20:06,736 --> 00:20:12,566
When you receive these events,
you will stop collecting data


354
00:20:12,746 --> 00:20:15,906
into your workout, the
same way as you did


355
00:20:16,456 --> 00:20:18,216
when the user manually paused.


356
00:20:18,816 --> 00:20:23,976
However, you do not need to
pause your workout session.


357
00:20:24,506 --> 00:20:28,566
Note that this is
implemented only


358
00:20:28,566 --> 00:20:30,486
for the running activity type.


359
00:20:34,516 --> 00:20:38,316
So let's go back into our
SpeedySloth demo application


360
00:20:38,446 --> 00:20:40,676
and see how we can
incorporate some


361
00:20:40,676 --> 00:20:42,716
of the concepts we
just learned about.


362
00:20:47,216 --> 00:20:51,326
So I'm going to be
switching to our demo.


363
00:20:53,026 --> 00:21:00,646
So to recap what we saw before,
we have our workout application,


364
00:21:00,916 --> 00:21:04,136
which already started our
workout session, but we can see


365
00:21:04,136 --> 00:21:07,936
on the screen that calories
and meters reported as zero.


366
00:21:08,506 --> 00:21:10,356
We are not accumulating
data yet.


367
00:21:10,856 --> 00:21:16,116
So let's go into our workout
and see how we can fix that.


368
00:21:16,316 --> 00:21:19,236
So going back to our workout
interface controller class,


369
00:21:19,666 --> 00:21:23,456
I'm going to be looking
for the delegated callback


370
00:21:23,456 --> 00:21:25,096
when decision changes it state.


371
00:21:25,456 --> 00:21:30,486
This is workoutSession
didChangeTo toState fromState.


372
00:21:31,346 --> 00:21:35,286
Here I have switch statement
which is empty for all cases.


373
00:21:35,636 --> 00:21:38,486
What I'm interested in right
now is the running case.


374
00:21:39,456 --> 00:21:42,866
Whenever we came from a
notStarted state that means


375
00:21:42,866 --> 00:21:48,196
that the application
just started the workout.


376
00:21:48,306 --> 00:21:51,206
So if you are in the running
case and coming from notStarted,


377
00:21:51,506 --> 00:21:53,936
I'm going to be calling
a function called


378
00:21:53,936 --> 00:21:55,196
startAccumulating Data.


379
00:21:56,626 --> 00:21:58,086
So let's take a look
at this function.


380
00:21:58,626 --> 00:22:03,496
What we want to do is to update
those two labels that we saw


381
00:22:03,496 --> 00:22:05,706
on the screen, one
for your distance,


382
00:22:05,706 --> 00:22:09,146
and another one for
your energy burn.


383
00:22:09,556 --> 00:22:12,786
So basically we are going to be
starting two queries for each


384
00:22:13,036 --> 00:22:14,816
of those two data types.


385
00:22:15,776 --> 00:22:19,356
The way you start the query
is exactly what we saw during


386
00:22:19,356 --> 00:22:20,216
the presentation.


387
00:22:21,296 --> 00:22:22,596
We first are going


388
00:22:22,596 --> 00:22:25,596
to be building a predicate
to use in your query.


389
00:22:25,976 --> 00:22:30,396
Next, we are going to
be defining a handler.


390
00:22:30,856 --> 00:22:35,166
In this case, I already have
implemented process function


391
00:22:35,516 --> 00:22:38,436
that will grab those
samples, accumulate those,


392
00:22:38,626 --> 00:22:40,536
and update my user interface.


393
00:22:44,046 --> 00:22:47,086
Now, I'm ready to
create my query,


394
00:22:47,856 --> 00:22:50,976
set up the updateHandler
and execute it.


395
00:22:53,436 --> 00:22:57,876
And finally, what I want to do
is to save that query for later.


396
00:22:58,216 --> 00:23:02,506
Because a query executed
with an updateHandler,


397
00:23:02,756 --> 00:23:04,896
we want to stop it
at some point.


398
00:23:06,916 --> 00:23:11,876
So let's now go and run
our application again.


399
00:23:12,296 --> 00:23:15,806
Switch to the simulator.


400
00:23:21,376 --> 00:23:22,536
Okay. Here we are.


401
00:23:22,896 --> 00:23:25,076
So we are going to be
choosing, let's say,


402
00:23:25,076 --> 00:23:27,836
a running outdoor workout.


403
00:23:28,996 --> 00:23:31,546
There it is.


404
00:23:32,956 --> 00:23:36,536
When we start, we can see


405
00:23:36,536 --> 00:23:38,716
that we see some numbers
increasing on the screen.


406
00:23:38,926 --> 00:23:42,806
This is because the watch's
simulator is generating some


407
00:23:42,806 --> 00:23:46,196
fake samples for you whenever
you start a workout session.


408
00:23:47,436 --> 00:23:50,486
Great. So if you take
a look at the screen,


409
00:23:50,586 --> 00:23:51,856
we see there are
several buttons,


410
00:23:51,976 --> 00:23:54,016
but they are currently
not doing anything.


411
00:23:54,756 --> 00:23:59,036
We already discussed how you can
pause and generate marker events


412
00:23:59,476 --> 00:24:01,576
for your app, so
let's go into the code


413
00:24:01,576 --> 00:24:05,686
and see how we can do that.


414
00:24:05,886 --> 00:24:11,496
So here I have the didTapPause
ResumeButton function,


415
00:24:11,676 --> 00:24:15,076
but it's hooked up to the
Pause button on the screen,


416
00:24:15,256 --> 00:24:17,166
so I'm going to be
inserting some code here.


417
00:24:17,676 --> 00:24:21,886
First I'm going to be checking
that I have a workout session,


418
00:24:22,476 --> 00:24:24,716
and I'm going to be
checking the state of it.


419
00:24:25,286 --> 00:24:29,456
If it's running, I'm going to
be pausing the workout session.


420
00:24:29,906 --> 00:24:32,546
If it's paused, I'm
going to be resuming it.


421
00:24:33,056 --> 00:24:35,846
Good. As a result of this,


422
00:24:36,086 --> 00:24:39,976
your workout session will change
state, so if we go back up


423
00:24:44,046 --> 00:24:46,276
to the delegate callback,


424
00:24:46,546 --> 00:24:50,566
whenever your workout session
changes to some certain states,


425
00:24:50,566 --> 00:24:54,096
you're going to see here that
the paused state is empty,


426
00:24:54,626 --> 00:24:56,606
so we're going to be
inserting some code.


427
00:24:56,606 --> 00:24:59,246
In this case I already
have implemented


428
00:24:59,506 --> 00:25:02,456
pauseAccumulatingData,
which is a function


429
00:25:02,456 --> 00:25:05,226
that will basically stop
considering new samples


430
00:25:05,226 --> 00:25:07,596
as they arrive into the
totals of my workout.


431
00:25:08,896 --> 00:25:11,906
Similarly, we need to resume
the workout at some point,


432
00:25:12,266 --> 00:25:16,996
so whenever our session
goes back to running state,


433
00:25:16,996 --> 00:25:21,726
we're going to receive
resumeAccumulatingData.


434
00:25:22,196 --> 00:25:27,406
The other button that we have


435
00:25:27,406 --> 00:25:31,106
on the screen was
the Marker button.


436
00:25:32,036 --> 00:25:34,246
In this case, what
we are wanting


437
00:25:34,246 --> 00:25:36,796
to do is create a markerEvent.


438
00:25:37,736 --> 00:25:39,556
We just create the workout event


439
00:25:39,556 --> 00:25:41,736
with a marker type
and the current date.


440
00:25:42,446 --> 00:25:45,926
We're going to be saving
that event into a local array


441
00:25:46,306 --> 00:25:48,696
for later saving
into our workout.


442
00:25:49,196 --> 00:25:52,736
And finally, I have a step
here that will notify the user


443
00:25:52,736 --> 00:25:55,016
on the user interface.


444
00:25:55,016 --> 00:25:59,186
This event just happened.


445
00:25:59,186 --> 00:26:03,136
Also note that we already have
implemented the didGenerate


446
00:26:03,646 --> 00:26:08,876
event that is a callback from
our workout session delegate.


447
00:26:09,086 --> 00:26:14,216
In this case, we also want
to save the event generated


448
00:26:14,216 --> 00:26:16,936
by HealthKit into the
workout events array.


449
00:26:16,936 --> 00:26:20,546
So let's now run our
application again.


450
00:26:28,226 --> 00:26:29,726
Give it a second
for it to launch.


451
00:26:34,046 --> 00:26:34,546
Okay. Here it is.


452
00:26:34,726 --> 00:26:37,026
I'm going to choose
Walking Outdoor now.


453
00:26:38,286 --> 00:26:39,336
And give it a few seconds


454
00:26:39,336 --> 00:26:41,296
so we can have some
numbers on the screen.


455
00:26:42,216 --> 00:26:44,356
You can see at the top of
the screen that it says


456
00:26:44,356 --> 00:26:45,836
that there is an active workout.


457
00:26:46,616 --> 00:26:50,746
Whenever I hit the Pause
button, it goes into pause state


458
00:26:50,946 --> 00:26:53,826
and you can see that the
numbers are not incremented


459
00:26:53,826 --> 00:26:54,946
for calories and meters.


460
00:26:55,006 --> 00:26:57,686
I can probably resume
it right now.


461
00:26:57,686 --> 00:27:01,646
It goes into active state, and
the numbers increase again.


462
00:27:04,396 --> 00:27:08,416
You can also tap on
the Marker button,


463
00:27:09,096 --> 00:27:11,676
which it basically displays
something the user interface.


464
00:27:11,886 --> 00:27:16,156
It is very likely that an actual
watch you can also play a haptic


465
00:27:16,156 --> 00:27:16,906
for your user.


466
00:27:20,046 --> 00:27:22,976
Great. So let's now switch
back to our presentation.


467
00:27:26,216 --> 00:27:27,536
So let's recap what we saw.


468
00:27:28,136 --> 00:27:33,486
We just saw how you can
use anchor object queries


469
00:27:33,946 --> 00:27:36,096
to get information
from HealthKit


470
00:27:36,096 --> 00:27:38,426
and update your workout totals.


471
00:27:39,286 --> 00:27:42,776
Then we implemented
pause and resume events


472
00:27:43,436 --> 00:27:47,266
in your workout application,
and finally, we show you how


473
00:27:47,266 --> 00:27:50,676
to create an event
and save it for later.


474
00:27:54,286 --> 00:27:57,006
Next step will be ending
your workout session.


475
00:27:57,316 --> 00:27:58,876
To talk about that, I'm going


476
00:27:58,876 --> 00:28:01,556
to invite my colleague
Dash again on stage.


477
00:28:02,516 --> 00:28:08,766
[ Applause ]


478
00:28:09,266 --> 00:28:09,786
>> Hello again.


479
00:28:11,116 --> 00:28:12,846
Ending and saving a
workout is simple.


480
00:28:13,566 --> 00:28:15,306
With a few steps, workouts saved


481
00:28:15,306 --> 00:28:17,406
from your app will
integrate seamlessly


482
00:28:17,406 --> 00:28:19,566
with the activity
and health apps.


483
00:28:20,196 --> 00:28:21,926
Let's take a look at
the activity app now.


484
00:28:26,046 --> 00:28:27,966
Workouts saved to HealthKit
will automatically show


485
00:28:27,966 --> 00:28:30,076
up in the activity
apps workout list.


486
00:28:31,136 --> 00:28:32,296
Starting in iOS 10,


487
00:28:32,556 --> 00:28:34,786
this includes workouts
saved on the phone.


488
00:28:35,296 --> 00:28:38,366
This means that a user can do a
workout in an app on their phone


489
00:28:38,476 --> 00:28:39,806
when their watch
isn't even nearby,


490
00:28:40,126 --> 00:28:42,606
and they'll still get
credit in the activity app.


491
00:28:43,516 --> 00:28:47,546
[ Applause ]


492
00:28:48,046 --> 00:28:49,896
Workouts saved with
energy samples will be able


493
00:28:49,896 --> 00:28:51,396
to contribute to
the users move ring.


494
00:28:52,036 --> 00:28:54,806
Users will love getting credit
from working out in your app


495
00:28:55,026 --> 00:28:56,596
in their activity day.


496
00:28:57,576 --> 00:29:00,206
Let's walk through the steps
to end and save a workout


497
00:29:00,356 --> 00:29:02,886
so that it shows up in
the user's activity app.


498
00:29:03,716 --> 00:29:06,146
There are three steps
to completing a workout.


499
00:29:07,556 --> 00:29:09,526
First, you end the
workout session.


500
00:29:12,266 --> 00:29:14,346
Second, you save the
workout to HealthKit.


501
00:29:15,596 --> 00:29:19,276
And third, you add related
samples to the saved workout,


502
00:29:19,386 --> 00:29:20,886
such as energy burned
and distance.


503
00:29:21,876 --> 00:29:22,976
Let's go through
these one at a time.


504
00:29:26,116 --> 00:29:28,686
To end the workout
session, you simply call end


505
00:29:29,046 --> 00:29:31,296
on your healthStore, and pass
along the workout session.


506
00:29:32,026 --> 00:29:34,626
This will reset the devices
sensors to their normal mode.


507
00:29:37,096 --> 00:29:38,966
When HealthKit finishes
ending your workout,


508
00:29:38,966 --> 00:29:41,216
your workout session delegate
will receive a callback


509
00:29:41,216 --> 00:29:42,276
in its state change method.


510
00:29:43,446 --> 00:29:45,426
When you see that the
state has changed to ended,


511
00:29:45,586 --> 00:29:47,586
it's time to save the workout.


512
00:29:49,956 --> 00:29:52,836
You'll create an HKWorkout
sample to save to HealthKit.


513
00:29:53,716 --> 00:29:55,486
The information that
you create your workout


514
00:29:55,486 --> 00:29:58,826
with will be displayed in the
user's health and activity apps.


515
00:30:00,316 --> 00:30:02,866
Make sure to use the same
activity type that you used


516
00:30:02,866 --> 00:30:03,986
on your workout configuration.


517
00:30:04,526 --> 00:30:08,096
Set a startDate and an
endDate for the workout,


518
00:30:08,096 --> 00:30:10,876
and include an array
of workout events.


519
00:30:11,526 --> 00:30:13,946
This array can include events
like pausing and resuming,


520
00:30:14,286 --> 00:30:16,706
and markers or laps as
Jorge discussed earlier on.


521
00:30:20,136 --> 00:30:22,656
The totalEnergyBurned
value is an HK quantity


522
00:30:22,786 --> 00:30:23,876
that represents the sum


523
00:30:23,926 --> 00:30:27,566
of all energy burned
during the workout session.


524
00:30:27,706 --> 00:30:30,516
Likewise, the totalDistance
value is an HK quantity


525
00:30:30,546 --> 00:30:32,456
that represents all
distance traveled during the


526
00:30:32,456 --> 00:30:33,086
workout session.


527
00:30:36,086 --> 00:30:37,806
Finally, don't forget
to add metadata.


528
00:30:39,136 --> 00:30:40,966
Set a value for the
IndoorWorkout key


529
00:30:41,106 --> 00:30:42,976
to indicate the location
type of your workout.


530
00:30:47,166 --> 00:30:49,416
You can save this workout
sample to HealthKit simply


531
00:30:49,416 --> 00:30:51,596
by passing it to the save
method on your healthStore.


532
00:30:52,126 --> 00:30:54,946
When you see that it's
been successfully saved,


533
00:30:55,376 --> 00:30:57,006
it's time to add
samples to the workout.


534
00:30:57,316 --> 00:30:58,876
Let's talk more about
adding samples.


535
00:31:02,126 --> 00:31:03,676
When you add samples
to a workout,


536
00:31:03,926 --> 00:31:06,516
HealthKit creates an association
between these samples


537
00:31:06,586 --> 00:31:07,596
and the workout itself.


538
00:31:08,156 --> 00:31:11,816
Apps will be able to query
later on for all samples


539
00:31:11,816 --> 00:31:14,026
that are associated
with a given workout.


540
00:31:14,616 --> 00:31:17,206
This will be useful if you
want to graph detailed data


541
00:31:17,326 --> 00:31:18,546
across your workout timeline.


542
00:31:21,516 --> 00:31:24,346
Adding energy samples to
the workout is necessary


543
00:31:24,396 --> 00:31:25,716
if you want the user
to get credit


544
00:31:25,716 --> 00:31:26,776
in their activity move ring.


545
00:31:27,466 --> 00:31:30,026
Activity will use these
associated energy samples


546
00:31:30,086 --> 00:31:31,406
to compute credit for that ring.


547
00:31:37,046 --> 00:31:39,246
Finally, make sure that the
totals stored previously


548
00:31:39,246 --> 00:31:41,406
on your workout sample
match the sum


549
00:31:41,406 --> 00:31:42,816
of all these associated samples.


550
00:31:46,126 --> 00:31:48,506
To add samples to your
workout, simply pass an array


551
00:31:48,506 --> 00:31:50,426
of HK samples to the add samples


552
00:31:50,426 --> 00:31:52,046
to workout method
on your healthStore.


553
00:31:56,046 --> 00:31:57,916
Let's update SpeedySloth
now to include ending


554
00:31:57,916 --> 00:31:58,796
and saving the workout.


555
00:32:00,376 --> 00:32:02,636
So when we were last in the
app, Jorge showed us how


556
00:32:02,636 --> 00:32:04,196
to collect data to
display to the user.


557
00:32:05,056 --> 00:32:07,716
And also how to control the
event by pausing and resuming.


558
00:32:08,616 --> 00:32:09,986
You may have noticed
at the bottom


559
00:32:09,986 --> 00:32:11,306
of the Workout Interface
Controller,


560
00:32:11,626 --> 00:32:13,166
that there's this button
called End Workout.


561
00:32:13,966 --> 00:32:15,406
When I tap it, it
doesn't do anything yet.


562
00:32:16,026 --> 00:32:17,536
So we'll fix that now.


563
00:32:18,466 --> 00:32:20,366
I'm back in Workout
Interface Controller,


564
00:32:21,136 --> 00:32:23,236
and I have a method
called didTapEndButton.


565
00:32:24,276 --> 00:32:24,856
Let's fill it in.


566
00:32:29,046 --> 00:32:31,616
First, I'm saving the current
date to be our workoutEndDate.


567
00:32:31,876 --> 00:32:33,166
We'll use this in just a second


568
00:32:33,166 --> 00:32:34,346
when we create that
workout sample.


569
00:32:34,826 --> 00:32:39,726
Next, I'm calling the end
method on my healthStore


570
00:32:39,726 --> 00:32:41,296
and passing along
the workout session.


571
00:32:41,806 --> 00:32:44,946
When HealthKit finishes
ending the session,


572
00:32:45,166 --> 00:32:47,436
we can expect a callback
in our state change method.


573
00:32:48,436 --> 00:32:49,896
I'll go back to this
state change method now.


574
00:32:54,046 --> 00:32:55,396
So Jorge showed us earlier,


575
00:32:55,396 --> 00:32:57,326
how to handle the
running and pause states.


576
00:32:58,486 --> 00:33:00,126
Now we want to handle
this ended state.


577
00:33:03,156 --> 00:33:05,706
We want to do two things when
the workout session is ended.


578
00:33:06,216 --> 00:33:08,136
First, we want to
stop all the queries.


579
00:33:08,746 --> 00:33:12,146
This method is already
implemented and it just iterates


580
00:33:12,146 --> 00:33:14,836
over the array of open queries
and calls stop for each one.


581
00:33:17,046 --> 00:33:18,566
Next, we want to
save the workout.


582
00:33:18,886 --> 00:33:19,846
Let's implement that now.


583
00:33:27,086 --> 00:33:28,796
I'm creating a workout sample


584
00:33:28,796 --> 00:33:30,546
and I'm using the
activity type straight


585
00:33:30,546 --> 00:33:31,626
from our workout configuration.


586
00:33:32,126 --> 00:33:35,896
Then I'm setting the start
date and the end date


587
00:33:35,896 --> 00:33:36,996
that we saved earlier on.


588
00:33:37,636 --> 00:33:41,046
I'm including the
array of workoutEvents


589
00:33:41,126 --> 00:33:42,186
that Jorge showed us how


590
00:33:42,186 --> 00:33:43,626
to build during the
workout session.


591
00:33:47,446 --> 00:33:49,426
I'm using the quantities
for totalEnergyBurned


592
00:33:49,426 --> 00:33:51,716
and totalDistance
that we accumulated


593
00:33:51,716 --> 00:33:53,296
from our data queries
during the session.


594
00:33:53,826 --> 00:33:58,236
And finally, I'm including
a dictionary for metadata.


595
00:33:58,456 --> 00:34:01,636
I'm setting the indoor workout
key to have a value based


596
00:34:01,636 --> 00:34:03,896
on the location type of
our workout configuration.


597
00:34:08,045 --> 00:34:09,916
I'm passing this workout
sample to the save method


598
00:34:09,916 --> 00:34:11,606
on my healthStore, which
will save it to HealthKit.


599
00:34:11,606 --> 00:34:15,136
When I see that it's
successfully saved,


600
00:34:15,556 --> 00:34:17,505
I'm going to call
addSamples toWorkout,


601
00:34:17,576 --> 00:34:19,666
which is a function right down
here that we'll implement now.


602
00:34:25,096 --> 00:34:27,025
I want to add two
samples to this workout,


603
00:34:27,386 --> 00:34:29,856
one for totalEnergyBurned,
and one for totalDistance.


604
00:34:33,136 --> 00:34:35,565
For totalEnergyBurned, I'm
creating a quantitySample


605
00:34:36,176 --> 00:34:38,416
and I'm using the quantityType
active energy burned.


606
00:34:40,016 --> 00:34:42,485
Then I'm passing the same
totalEnergyBurned quantity


607
00:34:42,835 --> 00:34:44,335
that I used on my
workout sample.


608
00:34:45,156 --> 00:34:48,496
This means that there will be
one big energy burned sample


609
00:34:48,496 --> 00:34:50,176
that spans the entire
duration of the workout.


610
00:34:51,045 --> 00:34:53,996
If you'd like to, you can create
multiple smaller energy burned


611
00:34:53,996 --> 00:34:56,755
samples, just make sure that
they sum to the same total


612
00:34:56,755 --> 00:34:58,376
that you set on the
HKWorkout sample.


613
00:35:03,176 --> 00:35:05,176
I'm doing the same thing
for the totalDistanceSample.


614
00:35:06,406 --> 00:35:08,706
I'm using the quantity type
distanceWalkingRunning.


615
00:35:09,316 --> 00:35:11,026
HealthKit has three
distance types.


616
00:35:11,256 --> 00:35:14,006
I'm using WalkingRunning because
our workout app only handles


617
00:35:14,006 --> 00:35:15,176
walking and running distance.


618
00:35:16,086 --> 00:35:18,066
If you're building a
cycling workout app,


619
00:35:18,066 --> 00:35:19,976
you'd want to use
cycling distance,


620
00:35:20,576 --> 00:35:22,786
and we've also just added
a new distance type,


621
00:35:22,936 --> 00:35:24,576
wheelchair distance,
that you would use


622
00:35:24,576 --> 00:35:25,816
for wheelchair based workouts.


623
00:35:29,056 --> 00:35:31,416
I'm using the same total
distance quantity that I used


624
00:35:31,416 --> 00:35:34,426
on the workout sample, and I'm
setting the same workout start


625
00:35:34,426 --> 00:35:34,926
and end date.


626
00:35:35,066 --> 00:35:36,806
So again, this is one
big distance sample


627
00:35:36,806 --> 00:35:37,976
that spans the duration
of the workout.


628
00:35:41,336 --> 00:35:44,176
I'm adding these two samples
to the workout by passing them


629
00:35:44,176 --> 00:35:45,676
in an array to the add samples


630
00:35:45,676 --> 00:35:47,116
to workout method
on my healthStore.


631
00:35:47,676 --> 00:35:51,156
When I see that they've
been successfully added,


632
00:35:51,476 --> 00:35:54,006
I know that all my data for this
workout is stored in HealthKit.


633
00:35:54,906 --> 00:35:56,556
Now I want to display
that workout to the user.


634
00:36:00,086 --> 00:36:02,476
I'm doing this by passing
the HKWorkout object


635
00:36:02,676 --> 00:36:04,206
to a new interface
controller called


636
00:36:04,206 --> 00:36:05,356
SummaryInterface Controller.


637
00:36:06,546 --> 00:36:08,936
SummaryInterface Controller
is already built and knows how


638
00:36:08,936 --> 00:36:11,546
to display an HKWorkout to
the user in a summary view.


639
00:36:11,686 --> 00:36:15,286
I'm going to run the app again,


640
00:36:15,476 --> 00:36:17,806
and we'll see how
to end our workout.


641
00:36:33,086 --> 00:36:34,426
Let's do outdoor run again.


642
00:36:34,856 --> 00:36:35,516
I'll press Start.


643
00:36:36,146 --> 00:36:38,946
And we'll wait a few moments
for some data to collect.


644
00:36:45,046 --> 00:36:46,436
Okay I'm going to press
the End Workout button now


645
00:36:46,436 --> 00:36:49,666
because we have some data.


646
00:36:49,826 --> 00:36:51,076
Our workout session was ended


647
00:36:51,076 --> 00:36:52,786
and our sample was
stored in HealthKit.


648
00:36:53,196 --> 00:36:54,646
Here's the summary
view displaying


649
00:36:54,646 --> 00:36:55,796
that workout sample to us now.


650
00:36:57,106 --> 00:36:59,756
To make sure that it did indeed
store properly in HealthKit,


651
00:37:00,086 --> 00:37:02,306
let's take a look at the Health
app on the iPhone simulator.


652
00:37:05,396 --> 00:37:07,636
Here I am in the Workouts
view of the Health app.


653
00:37:07,636 --> 00:37:10,316
I'm going to tap Show
All Data to see a list


654
00:37:10,316 --> 00:37:11,286
of all of our workouts.


655
00:37:11,876 --> 00:37:15,096
At the top you can see a workout


656
00:37:15,096 --> 00:37:16,846
that was just completed
at 11:36.


657
00:37:17,096 --> 00:37:17,746
That's our workout.


658
00:37:17,746 --> 00:37:21,046
I'm going to tap it to see
more information about it.


659
00:37:22,396 --> 00:37:24,736
So you can see that this
is the running workout.


660
00:37:24,736 --> 00:37:26,596
It had an almost
13 second duration,


661
00:37:26,936 --> 00:37:28,066
and there's our start
and end date.


662
00:37:28,066 --> 00:37:30,056
This is all the information
from our workout sample.


663
00:37:30,576 --> 00:37:32,056
You can even see the
metadata down here


664
00:37:32,056 --> 00:37:33,476
that says it's not
an indoor workout.


665
00:37:33,996 --> 00:37:36,866
At the bottom, you can
see those two samples


666
00:37:36,866 --> 00:37:38,216
that we associated
with the workout.


667
00:37:38,896 --> 00:37:40,986
We have almost two calories
for a total energy burn.


668
00:37:41,206 --> 00:37:41,876
Good job everyone.


669
00:37:42,716 --> 00:37:45,626
And we have a 100th of a mile.


670
00:37:47,026 --> 00:37:49,576
So looks like everything did
save to HealthKit correctly.


671
00:37:50,356 --> 00:37:51,686
Let's review what we just did.


672
00:37:54,456 --> 00:37:57,506
We ended our workout session by
calling end on our healthStore.


673
00:37:58,756 --> 00:38:00,126
And then we waited
for our callback


674
00:38:00,126 --> 00:38:01,616
in our state change
delegate method.


675
00:38:02,376 --> 00:38:04,196
When we saw that the
state changed to ended,


676
00:38:04,566 --> 00:38:06,706
we created a workout sample
and saved it to HealthKit.


677
00:38:07,826 --> 00:38:10,296
Then, we created two samples
to add to the workout,


678
00:38:10,646 --> 00:38:12,946
one for totalEnergyBurned,
and one for totalDistance.


679
00:38:13,766 --> 00:38:16,806
Remember associating that energy
burned sample is necessary


680
00:38:16,806 --> 00:38:18,976
so that the user will get
credit in their activity ring.


681
00:38:22,046 --> 00:38:24,386
So we've just built an entire
workout app for watchOS 3.


682
00:38:24,726 --> 00:38:25,456
It's that simple.


683
00:38:26,516 --> 00:38:33,076
[ Applause ]


684
00:38:33,576 --> 00:38:35,526
Now every app on WatchOS comes


685
00:38:35,526 --> 00:38:37,456
with a parent application
on iOS.


686
00:38:37,786 --> 00:38:39,446
So we've added some new API's


687
00:38:39,446 --> 00:38:41,886
in iOS 10 specifically
for workout apps.


688
00:38:42,636 --> 00:38:44,776
To talk to you more
about these new API's I'd


689
00:38:44,776 --> 00:38:46,066
like to invite Jorge back up.


690
00:38:46,516 --> 00:38:46,836
Thank you.


691
00:38:47,516 --> 00:38:53,776
[ Applause ]


692
00:38:54,276 --> 00:38:56,000
>> Thank you, Dash.


693
00:38:59,056 --> 00:39:04,556
So you've been developing great
applications for your iPhone.


694
00:39:05,226 --> 00:39:08,746
So workout apps are not
only about your watch.


695
00:39:09,426 --> 00:39:11,046
Starting on iOS 10,


696
00:39:11,306 --> 00:39:14,596
we are providing some
new API's you can use


697
00:39:14,596 --> 00:39:18,196
to implement new functionality
in your iPhone applications.


698
00:39:20,716 --> 00:39:25,736
We mentioned that every
watch application comes


699
00:39:25,736 --> 00:39:27,786
with a parent iPhone app.


700
00:39:28,966 --> 00:39:31,356
You can use that
to your advantage


701
00:39:31,666 --> 00:39:35,106
to build great experiences
for your users.


702
00:39:35,636 --> 00:39:40,436
You might already be using
WatchConnectivity for messaging


703
00:39:40,436 --> 00:39:41,816
between the two applications.


704
00:39:42,196 --> 00:39:43,646
This is an effective way


705
00:39:43,646 --> 00:39:47,806
of implementing features while
your watch is in a workout,


706
00:39:48,466 --> 00:39:50,046
and the application is running.


707
00:39:50,626 --> 00:39:54,386
Now we have background running,


708
00:39:54,606 --> 00:39:57,826
so your application can
be running all the time.


709
00:39:58,086 --> 00:40:02,816
That allows you to implement
great new functionalities.


710
00:40:03,346 --> 00:40:06,926
However, in order
for this to happen,


711
00:40:07,286 --> 00:40:12,136
you need to have your
watch in the workout state.


712
00:40:12,326 --> 00:40:16,856
So, starting with iOS 10,
we're providing functionality


713
00:40:17,166 --> 00:40:22,466
where you can start a
workout from iPhone.


714
00:40:24,856 --> 00:40:29,196
That is, your watch will
be in a workout state,


715
00:40:29,456 --> 00:40:33,326
without the user having to
intervene in its user interface.


716
00:40:34,596 --> 00:40:37,176
So, let's take a look
at how this works.


717
00:40:39,806 --> 00:40:44,486
On your iPhone application, you
will select an activity type


718
00:40:44,486 --> 00:40:46,656
and a location, and
you will create a


719
00:40:46,656 --> 00:40:48,506
workoutConfiguration object.


720
00:40:49,996 --> 00:40:54,766
Once you have that, you send
that workoutConfiguration object


721
00:40:54,766 --> 00:40:56,076
to the watch application.


722
00:40:56,766 --> 00:40:59,576
If the watch application
is not already running,


723
00:40:59,926 --> 00:41:00,976
it will be launched for you.


724
00:41:04,046 --> 00:41:08,946
Now, the workout application
can grab that configuration


725
00:41:09,106 --> 00:41:10,576
and start a workout session.


726
00:41:11,156 --> 00:41:15,296
In order for this to work,


727
00:41:15,526 --> 00:41:18,776
you need to have the workout
processing background mode we


728
00:41:18,776 --> 00:41:20,536
mentioned earlier in
this presentation.


729
00:41:23,076 --> 00:41:26,616
So let's now take a
look at some code.


730
00:41:26,816 --> 00:41:28,586
You may be familiar
with this code


731
00:41:28,586 --> 00:41:30,786
because we saw it earlier
in this presentation.


732
00:41:31,046 --> 00:41:33,076
This is what you do
whenever you want


733
00:41:33,076 --> 00:41:35,396
to start a workout
on your watch.


734
00:41:35,956 --> 00:41:39,916
You first create a
workoutConfiguration object,


735
00:41:40,676 --> 00:41:44,986
and then use that to create a
workoutSession and start date.


736
00:41:45,516 --> 00:41:52,326
In this case, we want to
separate this code in two parts.


737
00:41:52,876 --> 00:41:56,756
The first part, creating
the workoutConfiguration,


738
00:41:56,846 --> 00:41:59,056
will be executed on
your iPhone application.


739
00:41:59,996 --> 00:42:01,386
Creating a workoutSession


740
00:42:01,446 --> 00:42:04,376
and start date will be
executed on the watch app.


741
00:42:08,046 --> 00:42:09,896
For this to work, you need
some sort of communicate


742
00:42:09,896 --> 00:42:13,166
between the two applications,
so let's first take a look


743
00:42:13,166 --> 00:42:15,806
at the iPhone application code.


744
00:42:18,426 --> 00:42:21,786
First, you need to check
with WatchConnectivity


745
00:42:21,786 --> 00:42:23,456
if you have an activated
session,


746
00:42:24,186 --> 00:42:26,806
and if you have a watch
application installed.


747
00:42:27,256 --> 00:42:30,706
Once you do that, you're ready


748
00:42:30,706 --> 00:42:32,486
to create your
workoutConfiguration.


749
00:42:32,966 --> 00:42:37,886
Next, in order to pass
this workoutConfiguration


750
00:42:38,326 --> 00:42:41,496
to your watch application,
you're going to be calling


751
00:42:41,496 --> 00:42:44,356
in the new in iOS
10 startWatchApp


752
00:42:44,406 --> 00:42:45,836
with workoutConfiguration,


753
00:42:46,246 --> 00:42:48,456
which is a new method
of HK healthStore.


754
00:42:49,086 --> 00:42:52,366
This will grab your
workoutConfiguration and send it


755
00:42:52,366 --> 00:42:54,076
over to your watch app.


756
00:42:59,046 --> 00:43:01,026
So let's now look at the
watch application code.


757
00:43:01,736 --> 00:43:04,526
What you want to do is grab
that workoutConfiguration


758
00:43:05,356 --> 00:43:08,566
to create a session
and start it.


759
00:43:08,806 --> 00:43:13,766
For that, you will implement
handle workoutConfiguration,


760
00:43:14,216 --> 00:43:17,566
which is a new function,
which is part


761
00:43:17,566 --> 00:43:20,056
of WatchKit ExtensionDelegate.


762
00:43:20,796 --> 00:43:22,456
By implementing this function,


763
00:43:22,756 --> 00:43:24,436
you will grab your
workouConfiguration


764
00:43:24,436 --> 00:43:25,856
and are ready to start it.


765
00:43:27,516 --> 00:43:31,946
So, let's now go back into
our SpeedySloth demo app,


766
00:43:32,356 --> 00:43:36,846
and see how we can
actually start our workout


767
00:43:36,846 --> 00:43:37,976
from your iPhone.


768
00:43:45,046 --> 00:43:50,766
So, let's take a look
at our iPhone simulator.


769
00:43:50,766 --> 00:43:52,346
I'm going to create
the health app.


770
00:43:53,436 --> 00:43:55,896
And here I have the
iPhone version


771
00:43:55,896 --> 00:43:57,626
of our SpeedySloth application.


772
00:43:58,096 --> 00:43:59,206
So I'm going to launch it,


773
00:43:59,506 --> 00:44:02,716
and you see that the user
interface looks very similar


774
00:44:02,716 --> 00:44:05,426
to what we did on the watch.


775
00:44:05,676 --> 00:44:09,716
We have a user interface
that allows you


776
00:44:09,716 --> 00:44:12,696
to select an Activity
Type, and a Location Type.


777
00:44:12,696 --> 00:44:14,226
And then we have a Start button


778
00:44:14,226 --> 00:44:16,226
that is currently
not doing anything.


779
00:44:17,446 --> 00:44:20,886
So let's take a look at our code


780
00:44:20,886 --> 00:44:24,146
and see how we can actually
implement that functionality.


781
00:44:25,586 --> 00:44:28,436
So I'm going to be
switching to the code


782
00:44:28,436 --> 00:44:30,406
for the iPhone application


783
00:44:30,756 --> 00:44:36,156
and I have configuration view
controller which is the class


784
00:44:36,156 --> 00:44:38,096
that handles that
screen that we just saw.


785
00:44:38,766 --> 00:44:40,276
In the didTapStart button,


786
00:44:40,946 --> 00:44:44,476
we're going to be
implementing our functionality.


787
00:44:47,156 --> 00:44:48,466
First, we're going


788
00:44:48,466 --> 00:44:51,746
to be creating our
workoutConfiguration object


789
00:44:52,286 --> 00:44:54,416
with the selected activity
types and location.


790
00:44:54,416 --> 00:45:00,586
This is the exact same code
that we have on the watch app.


791
00:45:00,846 --> 00:45:02,136
Next, we are going


792
00:45:02,136 --> 00:45:05,066
to be grabbing our
workoutViewController


793
00:45:05,316 --> 00:45:06,566
for our storyboard.


794
00:45:06,916 --> 00:45:08,786
This is the UI that we're going


795
00:45:08,786 --> 00:45:11,296
to show while the
workout is running.


796
00:45:11,876 --> 00:45:16,456
We are going to set the property
of workoutViewController


797
00:45:16,696 --> 00:45:19,696
in order to pass the
workoutConfiguration we created.


798
00:45:20,666 --> 00:45:24,946
And finally, we are going to be
presenting that user interface.


799
00:45:24,946 --> 00:45:29,126
So let's take a look at
workoutViewController code,


800
00:45:29,446 --> 00:45:31,876
and see what it is doing.


801
00:45:32,416 --> 00:45:37,286
On the viewDidLoad method,
we see that the first thing


802
00:45:37,286 --> 00:45:39,836
that we do is to
initializewatch Connectivity.


803
00:45:40,076 --> 00:45:43,636
This is basically grabbing
our WatchConnectivity session


804
00:45:43,636 --> 00:45:45,176
and make sure it's initialized.


805
00:45:47,236 --> 00:45:51,586
Then, we are going to be calling
into startWatchApp function.


806
00:45:52,176 --> 00:45:59,446
The startWatchApp function
is going to first check


807
00:45:59,446 --> 00:46:01,526
that we have a valid
workoutConfiguration


808
00:46:02,296 --> 00:46:04,716
that we have a valid
WatchConnectivity session,


809
00:46:05,206 --> 00:46:08,436
and then this is the same code
that we saw in our slides.


810
00:46:08,696 --> 00:46:11,266
We first check that the
connectivity session is


811
00:46:11,476 --> 00:46:14,356
activated and that we have
our watch app installed.


812
00:46:15,996 --> 00:46:19,586
Finally, we are going to be
calling in to startWatchApp


813
00:46:19,586 --> 00:46:20,966
with workoutConfiguration.


814
00:46:22,236 --> 00:46:27,046
Great. So now we have to go
into our WatchKit extension


815
00:46:27,046 --> 00:46:30,816
to make sure that we grab that
workoutConfiguration object.


816
00:46:31,326 --> 00:46:34,516
So, we are going to be
moving into the workout --


817
00:46:34,516 --> 00:46:38,706
into the ExtensionDelegate
for the watch app,


818
00:46:40,176 --> 00:46:44,136
and using the same code to
handle the workoutConfiguration.


819
00:46:44,716 --> 00:46:48,296
When we do that, we want to
wrap that workoutConfiguration


820
00:46:48,406 --> 00:46:53,746
in a context object and pass to
the Workout InterfaceController.


821
00:46:53,746 --> 00:46:56,936
This is the same user interface


822
00:46:56,936 --> 00:46:59,886
that we were showing
whenever you started a workout


823
00:46:59,886 --> 00:47:00,726
on the watch.


824
00:47:04,126 --> 00:47:12,876
One other thing that we want
to note here, if we're going


825
00:47:12,876 --> 00:47:17,826
to Workout InterfaceController,
whenever an application --


826
00:47:18,316 --> 00:47:21,376
let me see -- whenever I said
an active workout session


827
00:47:21,376 --> 00:47:22,046
changes state.


828
00:47:22,386 --> 00:47:25,696
We're going to be calling
this updateState function.


829
00:47:25,976 --> 00:47:29,076
This is something that we
already have implemented


830
00:47:29,076 --> 00:47:32,726
in our code, which is basically
going to grab the current state


831
00:47:32,726 --> 00:47:35,646
of the session, and send in
through WatchConnectivity


832
00:47:35,886 --> 00:47:37,686
to the iPhone application.


833
00:47:40,046 --> 00:47:43,906
So, let's now run our code
switching to the iPhone app,


834
00:47:48,056 --> 00:47:48,946
and take a look.


835
00:47:54,186 --> 00:47:54,796
There it is.


836
00:47:54,966 --> 00:47:58,936
So we are going to be selecting
outdoor walking workout.


837
00:47:59,686 --> 00:48:01,016
When I press the Start button,


838
00:48:01,016 --> 00:48:03,016
you see the workout
session is starting.


839
00:48:03,016 --> 00:48:05,916
If you go back to
the watch simulator,


840
00:48:05,916 --> 00:48:08,796
you see that the app launch,
and it's now workout state.


841
00:48:09,106 --> 00:48:12,056
Going back to the iPhone app,
you can see that now it is


842
00:48:12,056 --> 00:48:14,416
in running state,
if you missed that,


843
00:48:14,416 --> 00:48:17,276
I can probably pause
the workout session,


844
00:48:18,436 --> 00:48:20,746
and you see that we updated
state on the other side.


845
00:48:20,746 --> 00:48:25,206
And we can probably end
it, and now the state


846
00:48:25,206 --> 00:48:28,916
of the workout also
changed on the other side.


847
00:48:29,516 --> 00:48:35,500
[ Applause ]


848
00:48:38,046 --> 00:48:43,226
So to recap, we just saw
how you can put some code


849
00:48:43,226 --> 00:48:47,306
in your iPhone application,
in order to put your watch


850
00:48:47,606 --> 00:48:51,986
in a workout state, and at
no point there was any user


851
00:48:51,986 --> 00:48:53,976
intervention needed
on the watch.


852
00:48:58,046 --> 00:49:01,166
So, let's now talk about some
basic practices we will like you


853
00:49:01,166 --> 00:49:05,306
to follow whenever you are
developing workout applications.


854
00:49:09,076 --> 00:49:12,136
The first is that we
want you to make sure


855
00:49:12,386 --> 00:49:17,246
that your watch application is
still functional whenever you


856
00:49:17,246 --> 00:49:20,886
reach -- sorry, whenever
you miss reach-ability


857
00:49:20,886 --> 00:49:21,946
from your iPhone.


858
00:49:23,796 --> 00:49:27,486
This is, for example,
a user might expect


859
00:49:27,996 --> 00:49:32,016
to start a running workout
session, leave their house,


860
00:49:32,016 --> 00:49:34,576
and go for a run, leave
their phone behind.


861
00:49:35,746 --> 00:49:40,226
In that situation, we do not
want you to stop the workout.


862
00:49:44,046 --> 00:49:46,436
So, the first thing
that you need to do is


863
00:49:46,436 --> 00:49:50,356
to keep your workout
session active,


864
00:49:51,016 --> 00:49:54,766
even when you lose
connectivity with your iPhone.


865
00:49:58,176 --> 00:50:00,986
Another interesting
point in this scenario,


866
00:50:01,226 --> 00:50:03,456
is that you can use
HealthKit distance


867
00:50:03,836 --> 00:50:09,016
because HealthKit is able to
generate distance samples even


868
00:50:09,016 --> 00:50:11,476
when you don't have
a GPS available.


869
00:50:16,406 --> 00:50:24,716
Also, we said that your
user can start a workout


870
00:50:24,716 --> 00:50:28,186
from either their iPhone
or the Apple Watch.


871
00:50:29,556 --> 00:50:32,716
I would advise if you
give your user the choice,


872
00:50:33,226 --> 00:50:36,416
on which device they want
to start the workout from.


873
00:50:41,136 --> 00:50:45,236
Other advice involves
application display


874
00:50:45,236 --> 00:50:46,506
historic workouts.


875
00:50:47,056 --> 00:50:51,386
If you do this, display
workouts from all sources,


876
00:50:51,506 --> 00:50:53,426
not only your own app.


877
00:50:54,536 --> 00:50:57,286
We want you to show
workouts generating


878
00:50:57,436 --> 00:50:59,896
by other applications too.


879
00:51:02,156 --> 00:51:07,636
If you're doing so, don't forget
to observe deleted objects.


880
00:51:08,906 --> 00:51:11,716
You do not want to keep
displaying workouts


881
00:51:11,896 --> 00:51:13,976
that were removed from
HealthKit's database.


882
00:51:18,406 --> 00:51:22,586
So, to finalize today, there are
three things that we want you


883
00:51:22,646 --> 00:51:24,596
to take from this presentation.


884
00:51:26,026 --> 00:51:28,506
First, we learned about
background running,


885
00:51:28,716 --> 00:51:34,216
which is a great way of
keeping your application updated


886
00:51:34,256 --> 00:51:40,616
constantly, and having your
user interface be responsive.


887
00:51:44,566 --> 00:51:47,516
Second, you learned
that you can contribute


888
00:51:47,616 --> 00:51:51,976
to your activity rings by
adding samples to your workout,


889
00:51:52,976 --> 00:51:56,956
either on your watch, or
your iPhone application.


890
00:52:00,186 --> 00:52:04,666
And finally, third, we learned
how you can start a workout


891
00:52:04,666 --> 00:52:07,996
from either your
watch or your iPhone.


892
00:52:08,566 --> 00:52:14,176
So we would like you to
go home or to your office,


893
00:52:14,806 --> 00:52:18,126
take a look at your code, and
apply what you learned today


894
00:52:18,306 --> 00:52:20,976
to implement some great
new features in your app.


895
00:52:24,046 --> 00:52:26,136
For more information, you
can go to this website


896
00:52:26,436 --> 00:52:28,786
where you can see videos
from this presentation.


897
00:52:29,076 --> 00:52:32,056
We have some related sessions.


898
00:52:32,056 --> 00:52:35,096
One from HealthKit and another
one from Core Motion this year.


899
00:52:35,096 --> 00:52:37,626
If you missed them, you can
go online and watch them.


900
00:52:38,186 --> 00:52:40,066
And here are also
a few presentations


901
00:52:40,066 --> 00:52:42,926
from previous years
related to this topic.


902
00:52:45,266 --> 00:52:46,206
This is all for today.


903
00:52:46,796 --> 00:52:47,636
Thank you very much.


904
00:52:47,966 --> 00:52:48,916
Enjoy the rest of your day.


905
00:52:49,016 --> 00:52:51,000
[ Applause ]

