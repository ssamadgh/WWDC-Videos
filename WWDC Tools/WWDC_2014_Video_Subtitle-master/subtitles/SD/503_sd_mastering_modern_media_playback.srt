1
00:00:11,616 --> 00:00:14,186
>> Welcome to "Mastering
Modern Media Playback".


2
00:00:15,056 --> 00:00:16,546
My name is Stefan Hafeneger.


3
00:00:16,546 --> 00:00:18,226
I'm an engineer on
the AVKit Team.


4
00:00:18,856 --> 00:00:21,686
And if you are already using
or planning to adopt AVKit


5
00:00:21,686 --> 00:00:24,496
or AVFoundation in your
iOS or OS X applications,


6
00:00:24,706 --> 00:00:25,916
this is the right
session for you.


7
00:00:27,346 --> 00:00:29,846
The goal of this session
is to show you how easy


8
00:00:29,846 --> 00:00:33,766
and powerful media playback
is on iOS 8 and OS X Yosemite.


9
00:00:34,346 --> 00:00:36,996
You have more sessions focused


10
00:00:36,996 --> 00:00:39,376
on other major operations
later today and this week.


11
00:00:39,376 --> 00:00:42,036
And we will refer you to
those at the end of this talk.


12
00:00:43,136 --> 00:00:45,096
In the first part of this talk
I'm going to introduce you


13
00:00:45,096 --> 00:00:47,296
to AVKit for iOS
and show you why


14
00:00:47,296 --> 00:00:49,196
and how you should use
it your applications.


15
00:00:50,586 --> 00:00:52,196
I'll also give you a
very brief overview


16
00:00:52,196 --> 00:00:53,876
of the most important
API additions


17
00:00:53,876 --> 00:00:55,406
and changes in your IM behavior.


18
00:00:56,076 --> 00:00:58,736
We have for you this
year an AVKit for OS X.


19
00:00:59,436 --> 00:01:01,616
In the second part of this talk,


20
00:01:01,616 --> 00:01:05,056
my colleague Shalini Sahoo
will teach you best practices


21
00:01:05,135 --> 00:01:07,546
for using AVKit and
AVFoundation in your iOS


22
00:01:07,546 --> 00:01:08,586
and OS X applications.


23
00:01:09,246 --> 00:01:13,316
But before we dive in,
let's take a quick look


24
00:01:13,316 --> 00:01:14,856
at our current Media
Stack on iOS.


25
00:01:16,696 --> 00:01:18,726
On the lowest level, we have
the Core Media framework,


26
00:01:19,426 --> 00:01:21,026
the core of our Modern
Media Stack.


27
00:01:21,276 --> 00:01:24,756
On top of our Core
Media sits AVFoundation,


28
00:01:25,576 --> 00:01:27,296
a powerful Objective-C framework


29
00:01:27,296 --> 00:01:30,326
that provides you easy
access to our Media Stack.


30
00:01:30,956 --> 00:01:34,676
Finally, on your iKit level, we
have the Media Player framework


31
00:01:34,926 --> 00:01:38,406
with built-in UI, providing
you playback UI in the form


32
00:01:38,406 --> 00:01:41,776
of MPMoviePlayerController.


33
00:01:42,956 --> 00:01:46,916
This year in iOS 8 we're adding
a new framework called AVKit,


34
00:01:46,916 --> 00:01:48,666
replacing parts of the
Media Player framework.


35
00:01:51,656 --> 00:01:55,236
AVKit is our new high-level
media framework providing you


36
00:01:55,236 --> 00:01:56,776
access to the rest
of the Media Stack.


37
00:01:56,776 --> 00:01:58,686
And I'm going to show you


38
00:01:58,686 --> 00:02:00,386
in this talk what
possibilities this opens


39
00:02:00,386 --> 00:02:01,826
up for your iOS applications.


40
00:02:02,486 --> 00:02:05,736
But to be clear,
we're not deprecating


41
00:02:05,776 --> 00:02:07,526
MPMoviePlayerController
in iOS 8,


42
00:02:08,216 --> 00:02:10,336
but we are strongly
encouraging you to adopt AVKit


43
00:02:10,336 --> 00:02:12,186
for media playback instead.


44
00:02:14,016 --> 00:02:16,656
So here you have it, our
Modern Media Stack on iOS.


45
00:02:16,656 --> 00:02:21,736
For those of you with an OS
X background, you might see


46
00:02:21,736 --> 00:02:24,496
that it's pretty similar
to our Media Stack on OS X.


47
00:02:24,496 --> 00:02:27,326
And you're correct.


48
00:02:27,976 --> 00:02:30,916
In fact, it's the same
now on both iOS and OS X


49
00:02:30,916 --> 00:02:32,676
and will allow you to create


50
00:02:32,676 --> 00:02:36,436
and maintain cross-platform
applications easier than ever.


51
00:02:37,496 --> 00:02:40,746
And now, let me introduce
you to AVKit for iOS.


52
00:02:43,876 --> 00:02:46,206
So up to now we've
provided you two options


53
00:02:46,206 --> 00:02:48,236
for media playback on iOS.


54
00:02:48,556 --> 00:02:52,066
MPMoviePlayerController and its
UIView controller companion,


55
00:02:52,066 --> 00:02:54,326
MPMoviePlayerViewController
and AVFoundation.


56
00:02:55,106 --> 00:02:59,656
So some of you might be
using MPMoviePlayerController


57
00:02:59,656 --> 00:03:00,446
on your applications,


58
00:03:01,306 --> 00:03:05,436
which means you get standardized
playback UI, but you lack access


59
00:03:05,436 --> 00:03:08,596
to the Media Stack, which
means you're limited


60
00:03:08,596 --> 00:03:10,466
to basic media playback.


61
00:03:11,546 --> 00:03:13,576
Or, you might be
using AVFoundation,


62
00:03:14,156 --> 00:03:15,626
and thus have access
to the Media Stack,


63
00:03:15,626 --> 00:03:19,846
and can do things beyond basic
media playback, but you have


64
00:03:19,846 --> 00:03:23,836
to implement your own
playback user interface.


65
00:03:23,836 --> 00:03:26,676
Finally, some of you in the
audience might be in the process


66
00:03:26,676 --> 00:03:28,276
of adding media playback
to your applications.


67
00:03:28,326 --> 00:03:30,076
And you might be torn
between these two options.


68
00:03:30,076 --> 00:03:33,966
We want to make your life
as developers easier.


69
00:03:33,966 --> 00:03:40,036
And that's why we have
something new for all of you.


70
00:03:40,176 --> 00:03:42,446
AVKit provides you both
standardized playback controls


71
00:03:42,446 --> 00:03:45,146
and behaviors by
giving you full access


72
00:03:45,146 --> 00:03:47,226
to the Modern Media Stack
through AVFoundation.


73
00:03:47,816 --> 00:03:51,566
Last year we introduced
AVKit in OS X.


74
00:03:52,666 --> 00:03:57,286
This year we bring
AVKit over to iOS.


75
00:03:57,356 --> 00:03:59,696
Our goal for AVKit in iOS
is to provide you view-


76
00:03:59,696 --> 00:04:02,506
level facilities for
media operations on top


77
00:04:02,506 --> 00:04:04,806
of AVFoundation and your iKit.


78
00:04:05,836 --> 00:04:08,046
Media playback on
iOS is now easier


79
00:04:08,386 --> 00:04:12,986
and more powerful than ever.


80
00:04:12,986 --> 00:04:15,406
AVPlayerViewController
- sorry, AVKit on iOS,


81
00:04:15,636 --> 00:04:17,766
which uses
AVPlayerViewController,


82
00:04:18,346 --> 00:04:21,555
a state-of-the-art UV controller
subclass provides you the same


83
00:04:21,555 --> 00:04:23,276
look and feel as our
video applications


84
00:04:23,366 --> 00:04:26,616
and the existing
MPMoviePlayController API.


85
00:04:27,386 --> 00:04:28,996
And we made it really
easy for you


86
00:04:28,996 --> 00:04:31,926
to adopt AVPlayerViewController
in your iOS applications.


87
00:04:33,066 --> 00:04:37,736
Let me show you the
necessary steps in a demo.


88
00:04:39,136 --> 00:04:41,256
So in XCode, we create
a new iOS application


89
00:04:41,256 --> 00:04:42,986
and we select the empty
application template.


90
00:04:43,716 --> 00:04:46,206
And then press the Next button.


91
00:04:46,386 --> 00:04:49,616
As the name, we enter
AVKitPlayer.


92
00:04:52,276 --> 00:04:53,456
Press Next again.


93
00:04:55,006 --> 00:04:59,936
Set the project on the desktop.


94
00:05:00,056 --> 00:05:02,356
Now we select the
AppDelegate implementation.


95
00:05:02,356 --> 00:05:04,956
And the first thing
you have to do is


96
00:05:04,956 --> 00:05:07,846
to import AVFoundation
and AVKit.


97
00:05:11,156 --> 00:05:14,396
Then, an application
didFinishLaunchingWithOptions.


98
00:05:20,256 --> 00:05:22,316
We first create an
AVPlayerViewController


99
00:05:22,876 --> 00:05:24,226
by calling
AVPlayerViewController


100
00:05:24,226 --> 00:05:25,386
alloc init.


101
00:05:26,196 --> 00:05:29,236
And then we create
an AVPlayer object


102
00:05:29,296 --> 00:05:31,226
by calling AVPlayerWithURL.


103
00:05:31,296 --> 00:05:34,366
And then we use NSBundle
mainBundle,


104
00:05:34,516 --> 00:05:36,156
URLForResource with extension.


105
00:05:36,936 --> 00:05:38,686
The resource name is going
to be "longboarding",


106
00:05:38,916 --> 00:05:39,806
and the extension .mov.


107
00:05:39,806 --> 00:05:43,516
We set the player object on
the AVPlayerViewController.


108
00:05:43,706 --> 00:05:46,146
And then we set the
AVPlayerViewController


109
00:05:46,146 --> 00:05:48,696
as the rootViewController
of our window.


110
00:05:48,696 --> 00:05:53,226
Finally, we add the
movie to our project.


111
00:05:53,956 --> 00:05:57,386
And if we now build and run,


112
00:06:04,316 --> 00:06:06,716
you can see we have a fully
functional playback application.


113
00:06:10,876 --> 00:06:12,836
And this was just three
lines of code, basically.


114
00:06:13,546 --> 00:06:16,826
But this example is probably
not what your application would


115
00:06:16,826 --> 00:06:17,206
look like.


116
00:06:17,626 --> 00:06:19,076
So let's switch to
a different project.


117
00:06:19,726 --> 00:06:23,206
Let me first run this
and show you what it is.


118
00:06:24,026 --> 00:06:29,416
So this is a very simple
media playback application,


119
00:06:29,546 --> 00:06:31,826
or media library, movie
library application.


120
00:06:32,676 --> 00:06:35,396
And it's using the master
detailViewController template.


121
00:06:36,666 --> 00:06:38,726
So in the master view here,
we have a list of movies.


122
00:06:39,746 --> 00:06:42,426
And for each of the movies
we have the thumbnail,


123
00:06:42,826 --> 00:06:44,836
the name of the file
and some information.


124
00:06:45,576 --> 00:06:46,906
We will now click
one of the movies.


125
00:06:47,876 --> 00:06:50,336
We see that in the detail
view we have some information


126
00:06:50,336 --> 00:06:52,056
about the movie in
this gray box here.


127
00:06:53,226 --> 00:06:54,886
So in the rest of this
demo, I'm now going


128
00:06:54,886 --> 00:06:58,386
to add AVPlayerViewController
and show you how to hook it up.


129
00:07:00,276 --> 00:07:02,656
So we start by modifying
the main storyboard.


130
00:07:03,436 --> 00:07:06,336
As you can see here, I
already have a container view.


131
00:07:06,336 --> 00:07:10,066
So now in the object library,


132
00:07:11,076 --> 00:07:13,646
we search for the
Player View Controller.


133
00:07:14,356 --> 00:07:17,266
Drag in an instance
to our storyboard.


134
00:07:17,966 --> 00:07:20,256
Move this over here a bit.


135
00:07:21,166 --> 00:07:26,126
And then using a Control Drag,
and choose Embedded embed.


136
00:07:26,126 --> 00:07:28,546
We can set the AP
Player View Controller


137
00:07:28,546 --> 00:07:29,556
up for our container view.


138
00:07:30,366 --> 00:07:35,526
Now we need to select the
segue in the inspector,


139
00:07:35,526 --> 00:07:36,576
give it an identifier.


140
00:07:36,576 --> 00:07:38,676
In this case we just
use showMovie.


141
00:07:40,626 --> 00:07:44,966
Since we are using AV Player
View Controller in a storyboard,


142
00:07:44,966 --> 00:07:46,566
you also have to manually link


143
00:07:46,986 --> 00:07:51,586
against the AVKit
library a framework.


144
00:07:51,676 --> 00:07:53,186
So for Linked Framework
and Libraries,


145
00:07:53,486 --> 00:07:54,466
we add a new framework.


146
00:07:54,466 --> 00:08:00,856
So we type in AVKit, select Add
and then press the Add button.


147
00:08:00,916 --> 00:08:05,046
And now we have to modify
the DetailViewController


148
00:08:05,046 --> 00:08:05,686
implementation.


149
00:08:06,246 --> 00:08:10,016
Again, the first thing we have


150
00:08:10,056 --> 00:08:12,306
to do is import the
header files.


151
00:08:13,116 --> 00:08:15,916
So do import AVFoundation
then add import AVKit.


152
00:08:15,916 --> 00:08:19,156
And then we need to
implement the prepareForSegue


153
00:08:19,236 --> 00:08:20,376
sender notation.


154
00:08:20,676 --> 00:08:26,336
So first we check
for the identifier.


155
00:08:26,336 --> 00:08:27,796
We want to make sure
that it is showMovie.


156
00:08:27,796 --> 00:08:32,436
Then we get the
AVPlayerViewController,


157
00:08:32,436 --> 00:08:33,966
which is the
destinationViewController


158
00:08:33,966 --> 00:08:34,436
of the segue.


159
00:08:34,436 --> 00:08:38,035
And then finally we create
an AVPlayer the same way


160
00:08:38,035 --> 00:08:39,936
as we did before by
using playerWithURL.


161
00:08:40,676 --> 00:08:42,726
And this detail view
controller has a movie property,


162
00:08:42,956 --> 00:08:44,106
which itself has a URL.


163
00:08:44,206 --> 00:08:47,656
And then we set this
AVPlayer and its player object


164
00:08:47,736 --> 00:08:48,836
on the playerViewController.


165
00:08:49,496 --> 00:08:58,616
We now build and run
and select a movie.


166
00:08:58,756 --> 00:09:01,266
You can see that the
movie is loaded here.


167
00:09:01,476 --> 00:09:02,246
And we can press Play.


168
00:09:03,056 --> 00:09:06,246
And we press the
fullscreen button.


169
00:09:06,606 --> 00:09:09,086
It goes into fullscreen and
I can rotate to landscape.


170
00:09:09,086 --> 00:09:11,826
And you can see it's
fully working.


171
00:09:15,166 --> 00:09:15,436
All right?


172
00:09:16,046 --> 00:09:18,196
So next I want to show you how
AVPlayerViewController works


173
00:09:18,196 --> 00:09:20,796
in AVFoundation, especially for
those of you in the audience


174
00:09:20,796 --> 00:09:24,546
that are new to AVFoundation.


175
00:09:24,546 --> 00:09:26,406
AVPlayerViewController
has a strong reference


176
00:09:26,406 --> 00:09:27,296
in AVPlayer object.


177
00:09:28,826 --> 00:09:30,116
This object provides
the content.


178
00:09:30,526 --> 00:09:34,496
And an AVPlayer object manages
an AVPlayerItem, which serves


179
00:09:34,496 --> 00:09:37,536
as a mutable data structure
from an individual AVAsset.


180
00:09:37,866 --> 00:09:41,406
This means in order
to provide content


181
00:09:41,406 --> 00:09:42,776
from the AVPlayerViewController,


182
00:09:42,776 --> 00:09:44,836
you have to do the
following steps.


183
00:09:47,166 --> 00:09:50,286
First, you create an
AVAsset from an NSURL.


184
00:09:50,466 --> 00:09:54,406
This URL can either be a local
file on disk or a remote URL.


185
00:09:55,676 --> 00:09:58,686
With an AVAsset you then
create an AVPlayerItem.


186
00:09:58,826 --> 00:10:02,796
Once you have an
AVPlayerItem you can create an


187
00:10:02,796 --> 00:10:03,526
AVPlayer object.


188
00:10:04,226 --> 00:10:07,646
And finally, you
associate the AVPlayerObject


189
00:10:07,646 --> 00:10:08,696
with the AVPlayerViewController.


190
00:10:09,446 --> 00:10:13,736
But if you don't need to
inspect any properties yourself


191
00:10:13,736 --> 00:10:15,866
of the content, and
just want to play


192
00:10:15,866 --> 00:10:18,486
with AVPlayerViewController, you
can do all four steps at once.


193
00:10:19,196 --> 00:10:22,546
As I've shown you in the demo,


194
00:10:22,836 --> 00:10:25,466
you can directly create an
AVPlayer object from an NSURL


195
00:10:25,506 --> 00:10:27,546
and then pass it to the
AVPlayerViewController.


196
00:10:28,236 --> 00:10:31,646
And there's a chance that the
only reason why you inspected


197
00:10:31,646 --> 00:10:33,766
the AVAsset so far was in order


198
00:10:33,766 --> 00:10:35,446
to implement your own
playback user interface.


199
00:10:37,046 --> 00:10:38,966
With AVKit you don't
have to do this anymore.


200
00:10:39,076 --> 00:10:40,946
So if you would take a look


201
00:10:40,946 --> 00:10:43,656
at the AVPlayerViewController
API you might notice


202
00:10:43,766 --> 00:10:45,406
that besides the
player property,


203
00:10:45,406 --> 00:10:46,956
there isn't really much more.


204
00:10:47,286 --> 00:10:51,196
But there is so much stuff
you just get automatically


205
00:10:51,196 --> 00:10:52,676
without any further setup.


206
00:10:52,916 --> 00:10:57,586
Here's a list of the most
important AVPlayerViewController


207
00:10:57,636 --> 00:10:59,246
features for your reference.


208
00:11:00,276 --> 00:11:02,236
You might notice that
it is mostly identical


209
00:11:02,236 --> 00:11:03,786
to MPMoviePlayerController.


210
00:11:04,616 --> 00:11:06,276
And there's a reason for that.


211
00:11:07,206 --> 00:11:10,086
We want to make your transition
to AVKit as easy as possible.


212
00:11:10,746 --> 00:11:15,206
For those of you not familiar
with MPMoviePlayerController,


213
00:11:15,266 --> 00:11:17,726
let me show you what these
features actually look like.


214
00:11:19,496 --> 00:11:22,536
AVPlayerViewController has
adaptive player controls.


215
00:11:22,536 --> 00:11:25,496
This is different from
MPMoviePlayerController


216
00:11:25,496 --> 00:11:27,766
and AVPlayerViewer on OS X.


217
00:11:28,456 --> 00:11:31,186
Instead of setting a
certain control style,


218
00:11:31,186 --> 00:11:33,086
AVPlayerViewController
automatically adapts


219
00:11:33,086 --> 00:11:34,276
and controls that for you.


220
00:11:35,066 --> 00:11:38,356
So as you saw in the demo,
when you show a movie embedded


221
00:11:38,356 --> 00:11:42,216
in your application, and your
user taps the fullscreen button,


222
00:11:43,706 --> 00:11:45,446
AVPlayerViewController
automatically switches


223
00:11:45,526 --> 00:11:46,596
to the fullscreen
playback controls.


224
00:11:47,296 --> 00:11:52,956
If you don't want it to
show any controls at all,


225
00:11:52,956 --> 00:11:56,566
you still have the
option to hide them.


226
00:11:56,736 --> 00:11:59,006
AVPlayerViewController also
has dynamic player controls.


227
00:12:00,396 --> 00:12:02,946
So for continuous chapters,
tapping this seek backward


228
00:12:02,946 --> 00:12:10,896
or seek forward button seeks
the previous or next chapter.


229
00:12:11,116 --> 00:12:13,426
For content with additional
languages or subtitles,


230
00:12:14,396 --> 00:12:17,216
AVPlayerViewController adds a
media selection button allowing


231
00:12:19,356 --> 00:12:22,946
the user to select a different
audio or subtitle track.


232
00:12:26,356 --> 00:12:27,616
Dynamic also means


233
00:12:27,906 --> 00:12:29,996
that AVPlayerViewController
automatically switches


234
00:12:29,996 --> 00:12:31,496
to a different set
of playback controls


235
00:12:31,496 --> 00:12:32,516
for live streaming content.


236
00:12:33,546 --> 00:12:38,016
You don't have to do anything.


237
00:12:38,016 --> 00:12:40,826
Finally, AVPlayerViewController
has built-in support


238
00:12:40,826 --> 00:12:42,526
for both AirPlay and HDMI.


239
00:12:43,626 --> 00:12:47,596
So when a user enables AirPlay
or plugs in an HDMI adapter,


240
00:12:47,686 --> 00:12:49,686
the application will
automatically present the


241
00:12:49,686 --> 00:12:51,096
content on the external screen


242
00:12:51,156 --> 00:12:53,646
but keeping the player
controls on the iOS device.


243
00:12:53,776 --> 00:12:58,686
So let's see how
AVPlayerViewController stands


244
00:12:58,686 --> 00:13:03,106
up against
MPMoviePlayerController so far.


245
00:13:03,316 --> 00:13:05,636
Every major feature is
available in AVKit as well.


246
00:13:05,636 --> 00:13:09,646
But if you look closely, you
will notice one difference.


247
00:13:10,296 --> 00:13:14,166
As I mentioned before,


248
00:13:14,166 --> 00:13:16,446
AVPlayerViewController
automatically selects the


249
00:13:16,446 --> 00:13:17,376
control style for you.


250
00:13:18,256 --> 00:13:21,006
So there's less for
you to worry about.


251
00:13:22,276 --> 00:13:24,126
But actually, there's
a lot more.


252
00:13:25,576 --> 00:13:29,916
Let's take a look at an object
diagram from earlier for a bit.


253
00:13:30,086 --> 00:13:32,056
If you want to replace
the current AVPlayerItem,


254
00:13:32,056 --> 00:13:34,076
you typically use
replace current item


255
00:13:34,076 --> 00:13:35,456
with player item on AVPlayer.


256
00:13:36,226 --> 00:13:37,926
But if you already know


257
00:13:37,926 --> 00:13:39,786
in advance what the next
item is going to be,


258
00:13:40,626 --> 00:13:43,116
you can help AVFoundation
and AVFoundation can help you


259
00:13:43,116 --> 00:13:45,066
to get smooth playback
when switching


260
00:13:45,066 --> 00:13:47,876
to the next player item
using AVQueuePlayer.


261
00:13:47,876 --> 00:13:53,796
AVQueuePlayer is a subclass
of AVPlayer that allows you


262
00:13:53,796 --> 00:13:55,856
to enqueue a list
of AVPlayer items,


263
00:13:56,396 --> 00:13:58,606
each of which is
backed by an AVAsset.


264
00:14:00,176 --> 00:14:01,986
Everything I'm showing you today


265
00:14:01,986 --> 00:14:04,016
about AVPlayerViewController
works just fine


266
00:14:04,016 --> 00:14:05,046
with AVQueuePlayer as well.


267
00:14:05,996 --> 00:14:08,306
So far I've just talked
about basic media playback.


268
00:14:09,326 --> 00:14:14,006
With AVFoundation you
can do a lot more.


269
00:14:14,206 --> 00:14:17,446
AVComposition is a subclass
of AVAsset and allows you


270
00:14:17,446 --> 00:14:20,046
to create multi-clip and
multi-track media compositions.


271
00:14:20,666 --> 00:14:24,996
As a result, this is heavily
used in our and possibly some


272
00:14:24,996 --> 00:14:26,506
of your video editing
applications.


273
00:14:27,196 --> 00:14:31,946
It doesn't matter if you provide
AVPlayerViewController an


274
00:14:31,946 --> 00:14:33,876
AVPlayerItem backed
by an AVAsset


275
00:14:34,136 --> 00:14:36,396
or an AVComposition,
either works fine.


276
00:14:40,296 --> 00:14:42,236
AVComposition is
also your entry point


277
00:14:42,336 --> 00:14:44,266
to even more advanced features.


278
00:14:45,796 --> 00:14:48,466
For instance, if your reader
composition allows you


279
00:14:48,466 --> 00:14:52,406
to apply FN transforms
and simple transitions


280
00:14:52,716 --> 00:14:56,356
for video content, but you can
even create your own custom


281
00:14:56,356 --> 00:15:00,296
compositors to create all
kinds of video effects.


282
00:15:00,776 --> 00:15:04,956
AVAudioMix provides a similar
functionality for audio tracks.


283
00:15:05,756 --> 00:15:08,496
AVVideoComposition,
AVAudioMix work in combination


284
00:15:08,496 --> 00:15:10,176
with AVFoundation - I'm
sorry - with AVComposition.


285
00:15:10,836 --> 00:15:12,896
If you want to analyze,


286
00:15:13,086 --> 00:15:16,156
modify or visualize raw
audio data during playback,


287
00:15:16,156 --> 00:15:17,536
you can use
MTAudioProcessingTap.


288
00:15:17,536 --> 00:15:22,466
These are just a few classes
that AVFoundation provides you


289
00:15:22,606 --> 00:15:25,506
for media operations
beyond basic media playback.


290
00:15:26,766 --> 00:15:28,806
If you want to learn
more about this topic,


291
00:15:28,806 --> 00:15:31,386
check out our previous WWDC
sessions, like this one


292
00:15:31,386 --> 00:15:33,436
from last year, and
related sample code.


293
00:15:34,026 --> 00:15:38,586
Let's take a look
again at our list


294
00:15:38,586 --> 00:15:39,856
of AVPlayerViewController
features.


295
00:15:40,566 --> 00:15:44,086
So as I've shown
you in this talk,


296
00:15:44,716 --> 00:15:47,106
AVPlayerViewController features
the same features - sorry -


297
00:15:47,106 --> 00:15:49,756
has the same features as
MPMoviePlayerController,


298
00:15:50,436 --> 00:15:52,496
but due to the full access


299
00:15:52,496 --> 00:15:54,546
to AVFoundation, you
get so much more.


300
00:15:59,776 --> 00:16:02,816
Let me show you what you can
easily do now with AVFoundation,


301
00:16:02,816 --> 00:16:04,936
AVKit in your own
iOS applications.


302
00:16:05,606 --> 00:16:10,696
So this is an iPad version of
the movie library application


303
00:16:10,746 --> 00:16:12,006
that I used earlier
to show you how


304
00:16:12,006 --> 00:16:13,206
to use AVPlayerViewController.


305
00:16:14,686 --> 00:16:16,746
In this demo I can now add
video effects to movies.


306
00:16:18,036 --> 00:16:21,376
As you can see, I added the
Hue Curve effect to this movie.


307
00:16:22,586 --> 00:16:24,106
Right now the effect
has zero impact.


308
00:16:25,396 --> 00:16:27,316
But once I start dragging
handles up or down,


309
00:16:27,706 --> 00:16:35,756
you can see how I can change
certain hue values in the movie.


310
00:16:35,926 --> 00:16:38,006
Each handle represents a hue
value on the color wheel.


311
00:16:38,656 --> 00:16:40,696
And changing a handle
modifies that color or shifts


312
00:16:40,696 --> 00:16:41,676
that color to a different value.


313
00:16:42,496 --> 00:16:48,266
I can structure any frame in
the movie to adjust the values.


314
00:16:48,936 --> 00:16:50,386
So here, the helmet,
for instance.


315
00:16:50,656 --> 00:16:55,386
Well, let's go back to the
beginning and start playing.


316
00:17:00,286 --> 00:17:03,186
So as you can see, the video
effect is applied in real time.


317
00:17:04,776 --> 00:17:07,306
And on the right, I even
added a digital volume meter


318
00:17:07,306 --> 00:17:08,965
that shows the volume
for the left


319
00:17:08,965 --> 00:17:12,346
and right audio channel
during playback.


320
00:17:13,435 --> 00:17:14,685
In order to do all of this,


321
00:17:14,836 --> 00:17:16,766
the application is using the
AVFoundationComposition API


322
00:17:16,766 --> 00:17:18,165
that I mentioned before.


323
00:17:22,396 --> 00:17:25,965
AVKit continues to manage the
user interface just as it does


324
00:17:25,965 --> 00:17:27,276
for basic media playback cases.


325
00:17:32,266 --> 00:17:32,596
Thank you.


326
00:17:33,516 --> 00:17:37,666
[ Applause ]


327
00:17:38,166 --> 00:17:39,846
So now that I have
shown you how easy it is


328
00:17:39,846 --> 00:17:42,236
to adopt AVPlayerViewController
in a new application,


329
00:17:42,906 --> 00:17:44,666
and what amazing things
you can do in combination


330
00:17:44,666 --> 00:17:47,056
with AVFoundation, I
hope you can't wait


331
00:17:47,106 --> 00:17:49,286
to adopt AVPlayerViewController
in your existing applications.


332
00:17:49,286 --> 00:17:53,016
In order to help you
with the transition,


333
00:17:53,166 --> 00:17:54,606
I'm going to highlight
the necessary steps


334
00:17:54,876 --> 00:17:55,896
for the three common scenarios.


335
00:17:59,816 --> 00:18:02,326
In the first scenario,
we're using AVPlayerLayer


336
00:18:02,406 --> 00:18:05,096
and possibly implemented your
own playback user interface.


337
00:18:05,176 --> 00:18:09,236
Start off by replacing
your AVPlayerLayer back


338
00:18:09,236 --> 00:18:11,236
to your UIView and
your user interface -


339
00:18:11,236 --> 00:18:12,246
or your playback user interface


340
00:18:13,206 --> 00:18:14,536
with AVPlayerViewController's
view.


341
00:18:14,536 --> 00:18:17,886
Then set the player property


342
00:18:17,886 --> 00:18:20,046
on AVPlayerViewController
instead of AVPlayerLayer.


343
00:18:20,806 --> 00:18:23,006
And there's a chance that most


344
00:18:23,006 --> 00:18:24,766
of your remaining code
will stay unchanged,


345
00:18:25,656 --> 00:18:28,316
unless you have some
special UI needs.


346
00:18:30,016 --> 00:18:32,086
If you're using
MPMoviePlayerViewController,


347
00:18:32,086 --> 00:18:34,856
just replace
MPMoviePlayerViewController


348
00:18:34,856 --> 00:18:36,566
alloc init to content URL


349
00:18:37,356 --> 00:18:39,056
by AVPlayerViewController
alloc init


350
00:18:39,156 --> 00:18:42,676
and then create an
associated AVPlayer object


351
00:18:42,806 --> 00:18:46,106
like I've shown you before.


352
00:18:46,106 --> 00:18:47,776
However, if you are
also accessing the


353
00:18:47,776 --> 00:18:49,676
MPMoviePlayerController
property,


354
00:18:50,586 --> 00:18:51,866
the third scenario
also applies to you.


355
00:18:52,646 --> 00:18:56,586
So if you're using
MPMoviePlayerController


356
00:18:56,586 --> 00:18:58,176
on your applications,
you're dealing


357
00:18:58,176 --> 00:19:00,416
with a couple more
properties and methods.


358
00:19:00,956 --> 00:19:01,816
But don't worry,


359
00:19:01,956 --> 00:19:06,346
the transition's actually
quite straightforward.


360
00:19:06,346 --> 00:19:08,846
MPMoviePlayerController API can
be grouped into two classes,


361
00:19:10,126 --> 00:19:12,256
view-specific API and
controller-specific API.


362
00:19:13,116 --> 00:19:16,146
In the former case, you use
AVPlayerViewController API.


363
00:19:16,906 --> 00:19:20,316
In the latter case, AVPlayer
and AVPlayerItem API.


364
00:19:21,276 --> 00:19:23,166
Things like MPMovieErrorLog


365
00:19:23,166 --> 00:19:26,096
and MPMovieAccessLog are
actually very [inaudible] object


366
00:19:26,096 --> 00:19:27,756
around AVPlayerItemAccessLog


367
00:19:27,756 --> 00:19:30,186
and AVPlayerItemErrorLog,
for instance.


368
00:19:31,016 --> 00:19:33,916
There are two things which you
should watch out for, though.


369
00:19:34,326 --> 00:19:37,346
As I mentioned before,


370
00:19:37,346 --> 00:19:39,086
AVPlayerViewController's
control style is dynamic,


371
00:19:39,746 --> 00:19:41,756
so there's no setting property.


372
00:19:42,906 --> 00:19:45,866
Also, MPMoviePlayerController
auto plays by default.


373
00:19:46,956 --> 00:19:47,916
AVPlayer does not do that.


374
00:19:48,726 --> 00:19:53,796
If there's anything you cannot
do or do not know how to do


375
00:19:53,796 --> 00:19:56,256
with AVKit and AVFoundation
when switching


376
00:19:56,256 --> 00:19:58,266
over from
MPMoviePlayerController,


377
00:19:59,346 --> 00:20:01,856
please talk to us in the labs or
ask us in the Developer Forums.


378
00:20:01,856 --> 00:20:05,886
So let's wrap up AVKit for iOS.


379
00:20:06,916 --> 00:20:10,086
In iOS 8 we're bringing
AVKit over from OS X


380
00:20:10,086 --> 00:20:14,836
as our new UI-level media
framework for AVFoundation.


381
00:20:14,836 --> 00:20:16,136
AVPlayerViewController
provides you


382
00:20:16,136 --> 00:20:17,306
with standardized
playback controls


383
00:20:17,356 --> 00:20:19,736
and behavior while
giving you full access


384
00:20:19,736 --> 00:20:21,666
to a powerful, modern
media stack.


385
00:20:22,476 --> 00:20:24,596
So please consider adopting
AVPlayerViewController


386
00:20:24,596 --> 00:20:25,606
in your iOS applications.


387
00:20:27,046 --> 00:20:33,376
Finally, I want to give you a
brief update on AVKit for OS X.


388
00:20:33,616 --> 00:20:34,946
As you saw yesterday
in the Keynote,


389
00:20:35,336 --> 00:20:38,406
OS X Yosemite received a
UI refresh, and as a result


390
00:20:38,406 --> 00:20:40,436
with a brand new UI
for AVKit as well.


391
00:20:41,196 --> 00:20:43,896
If you are already
using AVPlayerView,


392
00:20:44,036 --> 00:20:46,436
your applications will receive
the new UI automatically.


393
00:20:46,436 --> 00:20:49,406
You won't have to
change a single line


394
00:20:49,406 --> 00:20:50,796
of code or update any file.


395
00:20:51,456 --> 00:20:54,776
If you're not using
AVPlayerViewer yet,


396
00:20:54,776 --> 00:20:55,776
this might be a good
time to adopt.


397
00:20:55,776 --> 00:20:58,316
With the introduction of AVKit


398
00:20:58,316 --> 00:21:01,736
for iOS we're also updating some
user interfaces and behaviors


399
00:21:02,156 --> 00:21:04,796
for AVPlayerView to match
AVPlayerViewController.


400
00:21:05,556 --> 00:21:10,706
If you want to learn more
about how to use AVPlayerView,


401
00:21:11,066 --> 00:21:13,396
please check out last
year's "Moving to AVKit


402
00:21:13,396 --> 00:21:14,616
and AVFoundation" session.


403
00:21:15,256 --> 00:21:20,356
And finally, we have
a brand new class


404
00:21:20,476 --> 00:21:22,286
for you this year
in AVKit for OS X.


405
00:21:23,886 --> 00:21:26,446
AVCaptureView provides you
view-level capture facilities


406
00:21:26,446 --> 00:21:28,066
on top of AVFoundation
and AppKit.


407
00:21:29,566 --> 00:21:31,386
I'm not going into any details
in this session, though.


408
00:21:32,326 --> 00:21:34,506
Please come to the Camera
Capture talk tomorrow morning


409
00:21:35,136 --> 00:21:39,496
or ask us in the labs if
this is interesting to you.


410
00:21:39,616 --> 00:21:42,396
And now, let me hand over to
my fellow AVFoundation engineer


411
00:21:42,766 --> 00:21:44,796
to show you how you can
get the most out of AVKit


412
00:21:44,796 --> 00:21:47,336
and AVFoundation in your
iOS and OS X applications.


413
00:21:48,106 --> 00:21:48,326
Thank you.


414
00:21:49,516 --> 00:21:55,546
[ Applause ]


415
00:21:56,046 --> 00:21:56,576
>> Thank you, Stefan.


416
00:21:57,306 --> 00:21:57,756
Good morning.


417
00:21:58,156 --> 00:22:01,146
I'm Shalini Sahoo, an engineer
on the AVFoundation team,


418
00:22:01,146 --> 00:22:03,906
and I'm here to talk to you
today about best practices.


419
00:22:04,626 --> 00:22:06,836
Before we get into the
details of these practices,


420
00:22:07,346 --> 00:22:08,726
for a show of hands, how many


421
00:22:08,726 --> 00:22:10,666
of you have used
AVFoundation before?


422
00:22:10,666 --> 00:22:12,876
Lots of you.


423
00:22:13,076 --> 00:22:16,836
For you, I would hope this
section serves as an update


424
00:22:16,916 --> 00:22:18,886
or refresher on best practices.


425
00:22:18,886 --> 00:22:22,436
As technology evolves with
time, so do best practices.


426
00:22:23,316 --> 00:22:26,656
For those of you who are new to
AVFoundation, I hope this serves


427
00:22:26,656 --> 00:22:29,106
as a guideline on how
to approach our APIs.


428
00:22:29,106 --> 00:22:32,356
Let's get started by talking


429
00:22:32,356 --> 00:22:34,336
about why you would
be interested


430
00:22:34,376 --> 00:22:35,956
in adopting such practices.


431
00:22:36,126 --> 00:22:37,416
What's the motivation?


432
00:22:37,626 --> 00:22:40,476
These practices are designed
to make your application


433
00:22:40,806 --> 00:22:43,076
as efficient and
performant as possible,


434
00:22:43,306 --> 00:22:45,476
making it responsive
to your end-users.


435
00:22:46,446 --> 00:22:49,356
They not only help with the
application's efficiency,


436
00:22:49,356 --> 00:22:51,056
but also help make
your program -


437
00:22:51,346 --> 00:22:55,376
help improve your program
correctness, making it robust


438
00:22:55,376 --> 00:22:59,256
and preventing any sort
of hangs or crashes.


439
00:22:59,376 --> 00:23:01,466
Media applications
sometimes make use


440
00:23:01,466 --> 00:23:03,646
of expensive resources
like networks.


441
00:23:04,076 --> 00:23:05,886
These best practices
are designed


442
00:23:05,946 --> 00:23:08,926
so that you can make efficient
use of such resources.


443
00:23:09,676 --> 00:23:12,006
And lastly, your
users will be thankful


444
00:23:12,056 --> 00:23:14,036
for the improvement they
see in their battery life


445
00:23:14,036 --> 00:23:17,776
as your application
uses very little power.


446
00:23:19,156 --> 00:23:21,336
Here is our Modern
Media Stack we looked


447
00:23:21,336 --> 00:23:23,356
at earlier in this talk.


448
00:23:23,356 --> 00:23:25,076
AVFoundation sits
on top of Core Media


449
00:23:25,416 --> 00:23:26,566
and its family of frameworks.


450
00:23:26,566 --> 00:23:29,606
And on top is AVKit,
which provides you


451
00:23:29,606 --> 00:23:32,826
with standard playback controls
with just a few lines of code.


452
00:23:33,906 --> 00:23:37,276
The focus for this section today
is best practices, specifically


453
00:23:37,276 --> 00:23:40,056
in the areas of inspection
and playback.


454
00:23:40,556 --> 00:23:43,886
If you would like to gain more
information about AVFoundation


455
00:23:43,886 --> 00:23:48,426
in general, you can look at
this talk from WWDC 2011 called


456
00:23:48,426 --> 00:23:50,006
"Exploring AVFoundation".


457
00:23:50,596 --> 00:23:55,646
Based on the two major
categories for today,


458
00:23:56,496 --> 00:23:59,426
AVFoundation objects
are modeled separately.


459
00:23:59,846 --> 00:24:01,656
For the first category,
which is inspection,


460
00:24:01,656 --> 00:24:03,696
AVAsset is an example.


461
00:24:05,096 --> 00:24:08,756
Within AVAsset, as a client
of this API, you are in charge


462
00:24:08,756 --> 00:24:11,756
of loading values whenever you
need it in your application.


463
00:24:12,726 --> 00:24:14,066
You can initiate I/O.


464
00:24:14,066 --> 00:24:18,496
And when AVFoundation requests
- receives a request for I/O,


465
00:24:18,936 --> 00:24:21,996
we go and do all the loading
work so you can get your value.


466
00:24:23,406 --> 00:24:26,856
The best practice here is to
request values asynchronously.


467
00:24:27,176 --> 00:24:28,506
Why asynchronous loading?


468
00:24:28,506 --> 00:24:30,206
We'll answer that in
just a few slides.


469
00:24:31,076 --> 00:24:35,146
For the other category,
which is playback, AVPlayer


470
00:24:35,146 --> 00:24:37,126
and PlayerItem are the
controller objects.


471
00:24:37,986 --> 00:24:40,376
All you have to do here
is create these items


472
00:24:40,376 --> 00:24:42,176
and initiate playback.


473
00:24:42,586 --> 00:24:47,276
AVFoundation and its underlying
machinery drives the playback


474
00:24:47,426 --> 00:24:50,556
clock so that your users
see video frames on time.


475
00:24:51,896 --> 00:24:55,076
So when you hit Play, we
drive the necessary machinery


476
00:24:55,076 --> 00:24:57,426
so that your user can
experience a smooth playback.


477
00:24:57,426 --> 00:25:00,716
As time progresses,
properties change.


478
00:25:00,786 --> 00:25:04,186
And if you would like to keep
our application state up-to-date


479
00:25:04,266 --> 00:25:05,816
with the state of
the playback engine,


480
00:25:06,526 --> 00:25:08,566
you can use NS key
value observing


481
00:25:08,836 --> 00:25:10,326
to be notified of such changes.


482
00:25:10,326 --> 00:25:17,096
NS key value observing
is also called NS KVO.


483
00:25:17,276 --> 00:25:19,876
Here's a look at our
object diagram from earlier.


484
00:25:20,826 --> 00:25:23,826
Stefan showed you in a demo
how to use these objects


485
00:25:23,826 --> 00:25:25,956
and create a simple
media application.


486
00:25:26,446 --> 00:25:29,206
Now let's use this as
a roadmap for talking


487
00:25:29,206 --> 00:25:32,206
about best practices
class-by-class starting


488
00:25:32,206 --> 00:25:33,056
with AVAsset.


489
00:25:33,876 --> 00:25:35,996
As I mentioned earlier,


490
00:25:36,046 --> 00:25:40,766
with AVAsset you can use
AVAsynchronousKeyValueLoading,


491
00:25:40,766 --> 00:25:41,996
one of our protocol methods,


492
00:25:42,436 --> 00:25:45,166
which lets you load
properties asynchronously before


493
00:25:45,246 --> 00:25:46,676
accessing them.


494
00:25:47,536 --> 00:25:49,516
For example, if you
are interested


495
00:25:49,516 --> 00:25:53,006
in the precise duration of an
asset, you can ask AVFoundation


496
00:25:53,006 --> 00:25:56,376
for the duration and we download
just about the right amount


497
00:25:56,376 --> 00:26:00,276
of data to be able to tell
you what the duration is.


498
00:26:00,446 --> 00:26:02,436
With some file formats
it's straightforward.


499
00:26:02,436 --> 00:26:04,696
And there's some of that
information right overhead.


500
00:26:05,266 --> 00:26:07,146
So we can download just
that piece of data.


501
00:26:07,796 --> 00:26:09,066
But that's not always the case.


502
00:26:10,776 --> 00:26:12,946
Sometimes when you
ask us for duration,


503
00:26:13,276 --> 00:26:15,716
AVFoundation would have to
download the entire contents


504
00:26:15,716 --> 00:26:17,486
of the media file, parse it,


505
00:26:17,546 --> 00:26:19,666
decode it before we
can give you the value


506
00:26:19,706 --> 00:26:20,886
for a precise duration.


507
00:26:21,716 --> 00:26:25,326
You might ask why should
I load asynchronously


508
00:26:25,326 --> 00:26:28,526
if AVFoundation has to do
all this work to load values,


509
00:26:28,696 --> 00:26:30,426
or it takes time to load values?


510
00:26:31,136 --> 00:26:32,496
Well, you really should.


511
00:26:33,476 --> 00:26:37,406
On OS X, if you tried to
access a property synchronously


512
00:26:37,916 --> 00:26:41,666
by accessing your getter
before loading the property,


513
00:26:41,896 --> 00:26:44,716
you would be blocking your
main thread leading to a spin


514
00:26:44,776 --> 00:26:47,976
and making your application
unresponsive to your end-user.


515
00:26:49,426 --> 00:26:52,026
On OS X, however, you
can dispatch this work


516
00:26:52,106 --> 00:26:54,436
to a background queue
to access the getter


517
00:26:54,436 --> 00:26:56,416
and you won't see a spin.


518
00:26:57,736 --> 00:27:00,526
Whereas, on iOS,
loading synchronously


519
00:27:00,526 --> 00:27:03,196
from any thread would
block your application


520
00:27:03,416 --> 00:27:05,106
and could lead to
a hang or crash.


521
00:27:06,576 --> 00:27:08,716
This is because, as
you may already know,


522
00:27:09,036 --> 00:27:12,756
on iOS we have a shared
daemon called mediaserver.d,


523
00:27:13,266 --> 00:27:16,726
which services media requests
on behalf of your application.


524
00:27:18,166 --> 00:27:20,786
If you tried to access a
property synchronously,


525
00:27:21,046 --> 00:27:23,916
you would be tying mediaserver.d
or forcing mediaserver.d


526
00:27:23,916 --> 00:27:26,366
to load a value, and
this might take time.


527
00:27:27,816 --> 00:27:31,056
This leads to a timeout and
media services termination.


528
00:27:32,406 --> 00:27:34,286
This not only affects
your application,


529
00:27:34,546 --> 00:27:36,596
but every other application
on the system


530
00:27:36,866 --> 00:27:38,416
which relies on media services.


531
00:27:39,006 --> 00:27:43,036
So please don't do that.


532
00:27:43,266 --> 00:27:44,906
Now that we looked
at a good reason


533
00:27:44,906 --> 00:27:46,996
to use
AVAsynchronousKeyValueLoading,


534
00:27:46,996 --> 00:27:48,686
there are two more
things to remember.


535
00:27:49,696 --> 00:27:52,746
Firstly, only load those
properties you anticipate


536
00:27:52,746 --> 00:27:54,026
to use in your application.


537
00:27:54,706 --> 00:27:57,566
Every extra property
means more work.


538
00:27:57,566 --> 00:27:59,656
If you intend to not use
a particular property,


539
00:27:59,826 --> 00:28:01,626
do not encode the wasted work.


540
00:28:01,626 --> 00:28:06,206
And the second thing is,
if you anticipate the use


541
00:28:06,206 --> 00:28:08,696
of a particular property
later in your application,


542
00:28:09,026 --> 00:28:10,306
you can still request all


543
00:28:10,306 --> 00:28:14,676
of them together using
loadValuesAsynchronouslyForKeys


544
00:28:14,826 --> 00:28:15,906
and completionHandler.


545
00:28:16,336 --> 00:28:17,946
You can parse in
an array of keys


546
00:28:18,206 --> 00:28:20,556
which AVFoundation
will load together


547
00:28:20,556 --> 00:28:24,316
and your completionHandler is
called once you are done loading


548
00:28:24,806 --> 00:28:27,476
these properties.


549
00:28:27,476 --> 00:28:30,196
You no longer have to load
tracks before playback begins.


550
00:28:30,696 --> 00:28:32,616
This has changed since
the last time we talked


551
00:28:32,616 --> 00:28:33,646
about best practices.


552
00:28:34,056 --> 00:28:36,256
In fact, this has
changed since iOS 5.


553
00:28:37,266 --> 00:28:39,706
You really only need to load
those properties you would


554
00:28:39,706 --> 00:28:41,566
directly use in your
application.


555
00:28:43,246 --> 00:28:43,926
Now let's look


556
00:28:43,926 --> 00:28:46,296
at how
AVAsynchronousKeyValueLoading


557
00:28:46,336 --> 00:28:48,016
translates into code.


558
00:28:48,016 --> 00:28:51,686
In this particular
example, I'm interested


559
00:28:51,686 --> 00:28:53,676
in loading the property
"playable".


560
00:28:54,226 --> 00:28:57,126
I pass in an array with
just playable in it


561
00:28:57,126 --> 00:28:58,706
and I provide a completion
handler.


562
00:29:00,536 --> 00:29:03,006
In my completion
handler I first check


563
00:29:03,066 --> 00:29:04,946
to make sure the
property is loaded.


564
00:29:04,946 --> 00:29:06,886
Sometimes things go wrong,
like if you are relying


565
00:29:06,886 --> 00:29:10,546
on the network resource and your
user device goes out of range,


566
00:29:10,546 --> 00:29:12,666
asset loading can fail.


567
00:29:12,666 --> 00:29:15,326
So this is a good place
to check for such errors.


568
00:29:16,456 --> 00:29:20,356
Once you get the status, you
can see if it's already loaded.


569
00:29:20,356 --> 00:29:24,686
And then you can update
your UI for the asset or,


570
00:29:24,806 --> 00:29:28,416
if there's a failure, you can
report an appropriate error


571
00:29:28,566 --> 00:29:29,546
to your end-user.


572
00:29:31,256 --> 00:29:34,606
One more thing to remember
with completion handlers is,


573
00:29:34,916 --> 00:29:37,876
if another module has
already loaded the keys you're


574
00:29:37,876 --> 00:29:40,486
interested in, your
completion handler is called


575
00:29:40,486 --> 00:29:41,416
back immediately.


576
00:29:42,286 --> 00:29:43,696
Say, in this example,


577
00:29:43,696 --> 00:29:46,846
if AVPlayer has already
loaded the playable property,


578
00:29:46,846 --> 00:29:49,686
your completion handler
is called synchronously


579
00:29:49,686 --> 00:29:51,366
on the same thread.


580
00:29:52,106 --> 00:29:55,196
If you have code which relies
on loadValuesAsynchronously


581
00:29:55,226 --> 00:29:56,996
for keys to return immediately,


582
00:29:57,226 --> 00:30:00,586
that might not happen till the
completion handler has executed.


583
00:30:01,126 --> 00:30:03,556
So that's something to keep
in mind to prevent a deadlock.


584
00:30:03,556 --> 00:30:07,946
To list the best
practices for AVAsset,


585
00:30:08,976 --> 00:30:10,876
load only those keys
you are interesting


586
00:30:10,876 --> 00:30:12,266
in using in your application.


587
00:30:12,266 --> 00:30:15,836
You can use
AVAsynchronousKeyValueLoading


588
00:30:15,906 --> 00:30:18,266
to list all these keys
together in an array.


589
00:30:18,266 --> 00:30:20,396
And you can provide
a completion handler,


590
00:30:20,396 --> 00:30:22,886
which is called once we are
done loading these properties.


591
00:30:23,796 --> 00:30:24,976
In your completion handler,


592
00:30:25,046 --> 00:30:27,216
check to make sure the
properties are loaded before you


593
00:30:27,426 --> 00:30:27,966
access them.


594
00:30:29,126 --> 00:30:32,496
And lastly, be prepared
for asynchronous callback.


595
00:30:32,496 --> 00:30:34,636
If someone else has
already loaded the property


596
00:30:34,636 --> 00:30:36,696
on your behalf, your
thread is called -


597
00:30:36,836 --> 00:30:39,376
your completion handler is
called back immediately.


598
00:30:40,066 --> 00:30:43,166
Those were best practices
for AVAsset.


599
00:30:43,766 --> 00:30:46,066
Now let's look at
AVPlayer and AVPlayerItem.


600
00:30:46,066 --> 00:30:51,046
As I mentioned earlier, with
AVPlayer and AVPlayerItem,


601
00:30:51,096 --> 00:30:53,366
the playback engine on the -


602
00:30:53,406 --> 00:30:56,766
the underlying playback engine
drives the machinery necessary


603
00:30:56,766 --> 00:30:59,086
so that your user sees
video frames on time.


604
00:30:59,736 --> 00:31:03,616
So all you have to do is use
NSKeyValueObserving or KVO


605
00:31:03,766 --> 00:31:05,306
to be notified of such changes


606
00:31:05,306 --> 00:31:07,756
so that you can update
your application state.


607
00:31:08,316 --> 00:31:09,306
Here's an example.


608
00:31:09,986 --> 00:31:13,096
If you have a progressive
download item on an HTTP server,


609
00:31:14,266 --> 00:31:17,696
as AVFoundation downloads
some data, you get a callback


610
00:31:17,896 --> 00:31:18,866
with the loaded range.


611
00:31:18,906 --> 00:31:22,146
And as we buffer more data,
you get yet another callback


612
00:31:22,146 --> 00:31:24,066
with the updated value
for the loaded range.


613
00:31:24,746 --> 00:31:28,526
Let's take an example of
where KVO might come in handy,


614
00:31:28,926 --> 00:31:30,176
is playback interruption.


615
00:31:31,606 --> 00:31:35,736
If your user's device receives
a phone call or a FaceTime call


616
00:31:35,966 --> 00:31:38,286
when your application is
playing a particular file,


617
00:31:38,806 --> 00:31:40,486
your playback is interrupted


618
00:31:41,006 --> 00:31:42,676
so that your user can
answer their call.


619
00:31:42,676 --> 00:31:47,656
In this case, if you're using
KVO on the player's rate,


620
00:31:47,656 --> 00:31:49,696
you would see it
transition to zero.


621
00:31:50,106 --> 00:31:54,496
This is a good way for you to be
notified of such interruptions


622
00:31:54,496 --> 00:31:56,136
so that you do not end


623
00:31:56,136 --> 00:31:58,416
up waiting endlessly
for playback to end.


624
00:31:59,166 --> 00:32:03,496
And the last example here
is media services reset.


625
00:32:03,496 --> 00:32:06,556
As I mentioned earlier,
if your application


626
00:32:06,556 --> 00:32:09,216
or some other application
wasn't paying attention


627
00:32:09,216 --> 00:32:11,806
to AVAsynchronousKeyValueLoading
and tried


628
00:32:11,866 --> 00:32:13,926
to access a property
synchronously,


629
00:32:14,256 --> 00:32:16,386
you could have forced
mediaserver.d to terminate.


630
00:32:17,056 --> 00:32:19,236
This affects your
application, too.


631
00:32:20,056 --> 00:32:21,486
Your media services are reset.


632
00:32:21,486 --> 00:32:22,976
And when this happens,


633
00:32:23,346 --> 00:32:26,076
your player item status
transitions to failed.


634
00:32:26,526 --> 00:32:27,906
And this is a good place for you


635
00:32:27,906 --> 00:32:30,786
to throw away all your old
objects and rebuild your player


636
00:32:30,786 --> 00:32:33,606
and PlayerItem to
continue playback.


637
00:32:37,426 --> 00:32:41,446
Let's look at an example in code
where KVO might come in handy.


638
00:32:42,236 --> 00:32:46,156
In this example I
would like to decide


639
00:32:46,156 --> 00:32:48,846
when to show audio-only
UI in my application.


640
00:32:49,326 --> 00:32:51,616
Here I first create a
player item with an asset.


641
00:32:52,916 --> 00:32:55,516
Then I try to access the
track's property on item asset,


642
00:32:55,516 --> 00:32:57,166
particularly of type video.


643
00:32:57,906 --> 00:33:00,676
And then I check to make
sure that the video tracks -


644
00:33:00,776 --> 00:33:03,516
or there are no video
tracks before I update my UI


645
00:33:03,556 --> 00:33:05,226
to audio-only.


646
00:33:06,356 --> 00:33:08,716
This is not completely correct.


647
00:33:08,716 --> 00:33:12,096
Firstly, we're trying to access
the tracks property on an asset


648
00:33:12,326 --> 00:33:13,916
without prior loading it.


649
00:33:13,916 --> 00:33:15,256
This could block
your main thread


650
00:33:15,256 --> 00:33:17,276
and make your application
unresponsive.


651
00:33:17,386 --> 00:33:20,386
And the second thing here
is an assumption that lack


652
00:33:20,386 --> 00:33:22,156
of video tracks means
audio-only.


653
00:33:22,876 --> 00:33:24,886
You can have non-video
visual tracks


654
00:33:25,146 --> 00:33:26,826
like subtitles in your movies.


655
00:33:28,316 --> 00:33:31,336
Now let's look at how I
can do this using KVO.


656
00:33:32,116 --> 00:33:33,626
I add myself as an observer


657
00:33:33,626 --> 00:33:36,526
for the presentation
size on a player item.


658
00:33:36,526 --> 00:33:40,236
And once AVFoundation is done
loading the presentation size


659
00:33:40,346 --> 00:33:44,116
and your observation callback,
first check to make sure


660
00:33:44,116 --> 00:33:46,396
that your presentation
size is zero by zero.


661
00:33:46,576 --> 00:33:47,436
This way you know none


662
00:33:47,436 --> 00:33:49,926
of the tracks have a
non-zero presentation size.


663
00:33:49,926 --> 00:33:56,726
And after that, make sure you
have at least one audio track.


664
00:33:57,126 --> 00:34:00,156
To do that, you can look at
the underlying AVAsset tracks


665
00:34:00,726 --> 00:34:03,096
and make sure that there's
at least one of them


666
00:34:03,096 --> 00:34:06,226
which has an
AVMediaCharacteristicAudible.


667
00:34:06,746 --> 00:34:09,646
This is necessary because
sometimes you can have movie


668
00:34:09,646 --> 00:34:13,266
files which have non - or
which have zero by zero


669
00:34:13,266 --> 00:34:14,485
for the presentation size


670
00:34:14,755 --> 00:34:17,556
but no audio tracks,
like timecode tracks.


671
00:34:18,275 --> 00:34:21,886
The KVO recipe we just used,


672
00:34:22,096 --> 00:34:24,106
we first create a player
item with an asset.


673
00:34:24,976 --> 00:34:27,565
Then we register for key
value observing a property


674
00:34:27,565 --> 00:34:28,166
of interest.


675
00:34:28,786 --> 00:34:31,606
After that, we associate the
player item with the player.


676
00:34:31,606 --> 00:34:34,516
And in your observation
callback, you can look


677
00:34:34,516 --> 00:34:37,896
at the change dictionary to
know what the new value is.


678
00:34:38,926 --> 00:34:41,326
This is the recipe when you
work with these objects.


679
00:34:42,156 --> 00:34:43,686
But there are a few
more things to remember


680
00:34:44,235 --> 00:34:46,696
when you're interacting with
these objects in general.


681
00:34:47,406 --> 00:34:50,516
First, do not assume the
order in which events occur.


682
00:34:51,235 --> 00:34:54,186
As soon as you associate a
player item with a player,


683
00:34:54,186 --> 00:34:57,366
AVFoundation starts its
underlying machinery


684
00:34:57,366 --> 00:35:00,386
so that your user can
experience a smooth playback.


685
00:35:00,876 --> 00:35:04,756
On iOS 7 we made an optimization
which changes the status


686
00:35:04,826 --> 00:35:06,696
to ready-to-play
much more quickly.


687
00:35:07,486 --> 00:35:09,396
So if you were to add
yourself as an observer


688
00:35:09,396 --> 00:35:12,026
after you create a
player with a player item,


689
00:35:12,346 --> 00:35:14,056
you could miss this
vital notification.


690
00:35:15,466 --> 00:35:17,486
To fix this, you
can add yourself


691
00:35:17,486 --> 00:35:20,026
as an observer before
associating a player item


692
00:35:20,026 --> 00:35:21,016
with a player.


693
00:35:21,356 --> 00:35:24,196
That way you won't
miss any notifications.


694
00:35:25,256 --> 00:35:27,616
Or, sometimes in
your applications,


695
00:35:28,096 --> 00:35:30,626
you might have a particular
scenario where you would


696
00:35:30,626 --> 00:35:34,546
like to add yourself as an
observer only after an event,


697
00:35:34,956 --> 00:35:36,606
say, if a user presses a button.


698
00:35:37,256 --> 00:35:40,886
In such cases, you can
use NSKeyValueObserving


699
00:35:40,886 --> 00:35:41,806
OptionInitial.


700
00:35:42,396 --> 00:35:44,906
This flag lets you
access the initial value


701
00:35:44,906 --> 00:35:46,086
as well as the new value.


702
00:35:46,916 --> 00:35:50,626
The second thing to remember is


703
00:35:50,666 --> 00:35:54,216
that AVFoundation serializes
the access to AVPlayer


704
00:35:54,216 --> 00:35:55,926
and PlayerItem on
the main queue.


705
00:35:56,716 --> 00:36:01,826
It's safe to access and register
and unregister for observers


706
00:36:02,026 --> 00:36:03,516
for these objects
on the main queue.


707
00:36:04,276 --> 00:36:07,016
This was done to prevent
any possible race conditions


708
00:36:07,336 --> 00:36:09,976
as multiple modules are
interacting with these objects.


709
00:36:10,056 --> 00:36:12,776
And the main queue
was a natural choice,


710
00:36:12,776 --> 00:36:15,276
as most of these
observation callbacks lead


711
00:36:15,276 --> 00:36:18,326
to your application's
interaction with UIKit objects,


712
00:36:18,426 --> 00:36:19,766
which also happen
on the main queue.


713
00:36:20,326 --> 00:36:23,426
However, this does not mean


714
00:36:23,426 --> 00:36:25,336
that we are doing our
work on our main queue.


715
00:36:25,336 --> 00:36:27,736
We are not affecting the
end-user responsiveness.


716
00:36:28,386 --> 00:36:30,686
All our loading and
playback-related work happens


717
00:36:30,686 --> 00:36:31,606
on the background queue.


718
00:36:31,826 --> 00:36:34,706
We only serialize the access to
these objects on the main queue.


719
00:36:36,226 --> 00:36:38,836
If in your application you
have a particular scenario


720
00:36:39,206 --> 00:36:41,696
for which you think this
requirement is a hindrance,


721
00:36:42,246 --> 00:36:43,816
please come talk
to us in our labs


722
00:36:44,526 --> 00:36:45,956
or file enhancement requests.


723
00:36:46,436 --> 00:36:47,966
We are really interested
in listening


724
00:36:47,966 --> 00:36:48,956
to your feedback on this.


725
00:36:49,646 --> 00:36:53,836
And the last thing to
remember is wherever possible,


726
00:36:54,256 --> 00:36:57,166
set up your player item before
associating it with the player.


727
00:36:57,166 --> 00:37:01,056
As I mentioned earlier, as
soon as you create a player,


728
00:37:01,056 --> 00:37:03,226
AVFoundation starts
driving its machinery


729
00:37:03,226 --> 00:37:05,396
so that we can get
ready for playback.


730
00:37:06,226 --> 00:37:08,106
For example, if you
have a streaming item,


731
00:37:08,106 --> 00:37:11,296
as soon as you create a
player, we go over the network


732
00:37:11,296 --> 00:37:13,796
and start downloading data
from the default time.


733
00:37:13,796 --> 00:37:17,706
And after that, if you were
to issue a seek to time,


734
00:37:18,016 --> 00:37:20,476
we would have to throw away
all the data we downloaded


735
00:37:20,786 --> 00:37:23,596
and start reloading our
caches to begin playback.


736
00:37:24,676 --> 00:37:26,916
In order to prevent
that wherever possible,


737
00:37:27,166 --> 00:37:30,416
you can always configure your
player item before associating


738
00:37:30,416 --> 00:37:32,416
it with the player.


739
00:37:32,416 --> 00:37:34,476
Here's a few examples
of the kind


740
00:37:34,476 --> 00:37:36,136
of configurations you can do.


741
00:37:36,476 --> 00:37:39,456
This is definitely not the
exhaustive list, but just a few.


742
00:37:40,236 --> 00:37:41,116
You can add outputs.


743
00:37:42,466 --> 00:37:45,016
You can select media options
like audible and legible.


744
00:37:46,236 --> 00:37:49,096
You can set forward and
reverse playback end times


745
00:37:49,096 --> 00:37:49,896
or seek to time.


746
00:37:50,416 --> 00:37:52,416
And after doing all
those changes,


747
00:37:52,836 --> 00:37:57,746
I can associate my player
item with the player.


748
00:37:57,946 --> 00:38:01,226
In summary, for AVPlayer
and PlayerItem,


749
00:38:01,226 --> 00:38:04,516
use NSKeyValueObserving
to be notified of changes


750
00:38:04,516 --> 00:38:08,316
as the playback engine
is driving the clock


751
00:38:08,456 --> 00:38:11,306
so that your user can
experience a smooth playback.


752
00:38:12,506 --> 00:38:15,336
Do not rely on the order
in which events occur.


753
00:38:15,486 --> 00:38:17,116
If you really need
a particular value,


754
00:38:17,166 --> 00:38:19,426
you can always use
NSKeyValueObserving


755
00:38:19,426 --> 00:38:21,836
OptionInitial or add yourself


756
00:38:21,836 --> 00:38:25,646
as observers before
you create the player.


757
00:38:25,826 --> 00:38:28,546
Please serialize your access
to Player and PlayerItem


758
00:38:28,546 --> 00:38:31,296
on the main queue to avoid
any possible race conditions.


759
00:38:31,646 --> 00:38:34,906
And lastly, wherever possible,
set up your player item


760
00:38:34,906 --> 00:38:39,036
with all configurations
before creating a player.


761
00:38:39,206 --> 00:38:42,426
Those were the best practices
for AVPlayer and PlayerItem.


762
00:38:42,996 --> 00:38:44,136
Most of the things we talked


763
00:38:44,136 --> 00:38:47,276
about AVPlayer also
apply to AVQueuePlayer.


764
00:38:47,986 --> 00:38:49,616
As you've seen earlier
in this talk,


765
00:38:49,616 --> 00:38:52,066
AVQueuePlayer takes a
list of player items.


766
00:38:53,646 --> 00:38:56,576
If in your application you
have an inspector window


767
00:38:56,896 --> 00:39:00,196
for which you would like to
access a set of keys on each


768
00:39:00,196 --> 00:39:03,956
of the player items, you can
use AVPlayerItem's convenient


769
00:39:03,956 --> 00:39:07,286
initializer, which lets
you parse a set of keys


770
00:39:07,686 --> 00:39:12,836
which AVQueuePlayer or AVPlayer
would load on your behalf.


771
00:39:12,996 --> 00:39:15,716
You have an AVQueuePlayer
with a list of items.


772
00:39:16,096 --> 00:39:18,836
And if you initialize each of
these items with a set of keys,


773
00:39:18,836 --> 00:39:22,826
as AVQueuePlayer is getting
ready to initiate playback


774
00:39:22,986 --> 00:39:26,596
for the particular item, we
load these keys in combination


775
00:39:26,596 --> 00:39:28,676
with the keys we
require for playback.


776
00:39:28,676 --> 00:39:32,216
And as playback progresses
and we reach the next item,


777
00:39:32,566 --> 00:39:34,706
we load the second set
of keys you requested


778
00:39:34,706 --> 00:39:35,746
for that particular item.


779
00:39:36,386 --> 00:39:39,796
This is valid for
AVPlayer as well


780
00:39:39,796 --> 00:39:41,516
if you are using
replaceCurrentItem


781
00:39:41,516 --> 00:39:42,726
with playerItem.


782
00:39:43,146 --> 00:39:45,326
You can use this as an alternate


783
00:39:45,326 --> 00:39:47,436
to
AVAsynchronousKeyValueLoading.


784
00:39:47,666 --> 00:39:49,916
Instead of using
AVAsynchronousKeyValueLoading


785
00:39:49,916 --> 00:39:52,486
for each of your asset,
you can initialize each


786
00:39:52,486 --> 00:39:54,446
of the player items
and we'll take care


787
00:39:54,446 --> 00:39:55,506
of loading the properties.


788
00:39:55,626 --> 00:39:57,766
And if you are using
this instead


789
00:39:57,766 --> 00:39:59,746
of
AVAsynchronousKeyValueLoading,


790
00:40:00,156 --> 00:40:03,746
the best place to access
your properties would be


791
00:40:03,746 --> 00:40:06,516
to KVO the playerItem status.


792
00:40:06,716 --> 00:40:09,096
When you receive an observation
callback for the status,


793
00:40:10,376 --> 00:40:13,296
and if the status
is ready to play,


794
00:40:13,296 --> 00:40:16,196
your asset keys would
either be loaded or failed.


795
00:40:16,366 --> 00:40:18,676
So then you can use
statusOfValueForKey


796
00:40:18,986 --> 00:40:20,346
to access these properties.


797
00:40:21,026 --> 00:40:25,096
And the last thing to
remember with AVQueuePlayer is


798
00:40:25,096 --> 00:40:27,686
if AVFoundation encounters
an error


799
00:40:27,816 --> 00:40:30,566
with a particular player item,
we'll skip that item and move


800
00:40:30,566 --> 00:40:33,906
on so that your user experiences
uninterrupted playback.


801
00:40:35,276 --> 00:40:38,456
However, if you would like to
be notified of such errors,


802
00:40:38,456 --> 00:40:41,846
you can NSKeyValueObserve
AVQueuePlayer's current


803
00:40:41,846 --> 00:40:42,556
item status.


804
00:40:47,046 --> 00:40:49,456
Those were some tips
for using AVQueuePlayer.


805
00:40:49,456 --> 00:40:52,306
Lastly, let's talk about
AVPlayerViewController.


806
00:40:52,306 --> 00:40:57,366
With AVPlayerViewController on
iOS or AVPlayerView on OS X,


807
00:40:57,476 --> 00:41:00,236
it's a good idea to
animate your view


808
00:41:00,236 --> 00:41:02,216
into your view hierarchy only


809
00:41:02,216 --> 00:41:04,336
when there's some viable
content to present.


810
00:41:04,956 --> 00:41:07,256
Only if there's some
video frames you can show.


811
00:41:07,256 --> 00:41:11,356
And to do that, you can key
value observeReadyForDisplay.


812
00:41:11,616 --> 00:41:14,276
On iOS, you would observe on
the player view controller,


813
00:41:14,276 --> 00:41:16,436
whereas on OS X you
observe on the player view.


814
00:41:16,516 --> 00:41:19,526
You add yourself as an
observer for ready for display.


815
00:41:20,546 --> 00:41:22,816
And in your observation
callback, you can check


816
00:41:22,816 --> 00:41:26,046
to make sure ready for display
is Yes before animating your


817
00:41:26,046 --> 00:41:28,826
view or before, like
showing your view.


818
00:41:29,356 --> 00:41:36,666
New in iOS 8 and OS 10.10
is contentOverlayView.


819
00:41:37,576 --> 00:41:40,666
With contentOverlayView, you
can do your custom drawings


820
00:41:40,666 --> 00:41:42,836
and renderings over
the player view.


821
00:41:43,526 --> 00:41:45,166
The contentOverlayView
is guaranteed


822
00:41:45,166 --> 00:41:47,246
to have similar dimensions
as the player view.


823
00:41:47,246 --> 00:41:50,466
And if you would like to
place your drawings relative


824
00:41:50,466 --> 00:41:53,816
to the video frame, you can
access the videoBounds property


825
00:41:54,036 --> 00:41:55,236
on the player view controller.


826
00:41:56,766 --> 00:41:59,196
Here is a screenshot of
the demo we saw earlier.


827
00:42:00,066 --> 00:42:01,236
The digital volume meter


828
00:42:01,236 --> 00:42:04,536
on the bottom right was rendered
using contentOverlayView.


829
00:42:04,846 --> 00:42:10,156
And lastly, for chapter
navigation, as you may have seen


830
00:42:10,156 --> 00:42:12,936
in QuickTime Player,
when you seek


831
00:42:12,936 --> 00:42:15,706
through chapters using the
appropriate keyboard shortcuts


832
00:42:15,706 --> 00:42:18,916
or menu items, QuickTime Player
briefly flashes the chapter


833
00:42:18,916 --> 00:42:19,666
number and title.


834
00:42:19,666 --> 00:42:22,826
And if you would like
to get similar behavior


835
00:42:22,826 --> 00:42:25,166
in your applications,
which we highly recommend,


836
00:42:25,716 --> 00:42:29,546
you can use this API of
AVPlayerView, This is only


837
00:42:29,546 --> 00:42:32,206
on OS X, to flash
chapter number and title.


838
00:42:33,616 --> 00:42:36,526
Ideally, you would do this
after the seek has completed


839
00:42:36,526 --> 00:42:38,256
so you can place this code


840
00:42:38,256 --> 00:42:40,086
in your completion
handler for seek to time.


841
00:42:40,236 --> 00:42:45,966
So the best practices for
PlayerViewController is


842
00:42:46,026 --> 00:42:47,826
to observe ready
for display to know


843
00:42:47,826 --> 00:42:49,716
when to present your
view onscreen


844
00:42:49,716 --> 00:42:52,726
so that your user doesn't
have to look at black screen.


845
00:42:54,216 --> 00:42:57,096
Second, then we saw how to
use content overlay view


846
00:42:57,096 --> 00:42:59,526
to do custom rendering
over the player view.


847
00:42:59,776 --> 00:43:02,296
In Z-order, the player
view is below and above


848
00:43:02,296 --> 00:43:05,986
that is content overlay view
and the controls sit on top.


849
00:43:06,506 --> 00:43:10,376
And lastly, we saw how
to flash chapter number


850
00:43:10,476 --> 00:43:14,796
and title during chapter
navigation using AVPlayerView.


851
00:43:15,956 --> 00:43:19,856
That brings us to the end of
our roadmap for best practices.


852
00:43:20,496 --> 00:43:23,826
Let's wrap up.


853
00:43:24,086 --> 00:43:27,936
We looked at why it's important
to load values asynchronously


854
00:43:27,966 --> 00:43:28,606
and how to do


855
00:43:28,606 --> 00:43:31,066
that
AVAsynchronousKeyValueLoading


856
00:43:31,116 --> 00:43:31,846
for AVAsset.


857
00:43:32,956 --> 00:43:35,616
With AVPlayer and
PlayerItem, all you have


858
00:43:35,616 --> 00:43:39,396
to do is use NSKeyValueObserving
to be notified of changes.


859
00:43:39,396 --> 00:43:43,766
And we looked at some tips
for using AVQueuePlayer.


860
00:43:44,786 --> 00:43:48,146
We talked about how to
observe readyForDisplay to know


861
00:43:48,146 --> 00:43:50,546
when to present your view
into your view hierarchy.


862
00:43:50,596 --> 00:43:54,106
And then we looked at how to
customize your player view


863
00:43:54,396 --> 00:43:56,796
by custom drawings in
content overlay view


864
00:43:56,976 --> 00:44:00,376
and displaying chapter
numbers during navigation.


865
00:44:01,346 --> 00:44:04,286
That was best practices
for AVFoundation and AVKit,


866
00:44:04,286 --> 00:44:05,536
our last topic for today.


867
00:44:07,116 --> 00:44:09,326
In summary, AVKit
is now available


868
00:44:09,326 --> 00:44:11,306
on iOS along with OS X.


869
00:44:12,466 --> 00:44:15,146
AVKit provides you with
standard playback controls


870
00:44:15,146 --> 00:44:16,446
with just a few lines of code.


871
00:44:17,576 --> 00:44:19,596
If you've been using
AVKit on OS X,


872
00:44:20,106 --> 00:44:22,426
you get the UI refresh for free.


873
00:44:22,426 --> 00:44:23,906
You wouldn't have
to change anything.


874
00:44:23,906 --> 00:44:26,676
We looked at the demo,


875
00:44:26,676 --> 00:44:29,396
which shows how powerful
AVFoundation can be


876
00:44:29,396 --> 00:44:32,936
in combination with AVKit to
provide you with an application


877
00:44:32,936 --> 00:44:34,436
with standard playback controls


878
00:44:34,436 --> 00:44:37,236
and to add effects
and visualizations.


879
00:44:37,936 --> 00:44:44,116
We highly recommend you to adopt
our Modern Media frameworks


880
00:44:44,166 --> 00:44:47,536
and to audit your current
applications to see


881
00:44:47,536 --> 00:44:50,716
if they can stand to benefit by
adopting these best practices.


882
00:44:52,196 --> 00:44:55,816
For more information, you can
contact our Evangelism Team


883
00:44:56,506 --> 00:44:59,326
or visit or check out
our programming guide


884
00:44:59,326 --> 00:45:00,596
on our developer Website,


885
00:45:00,596 --> 00:45:02,646
which covers both
AVFoundation and AVKit.


886
00:45:03,626 --> 00:45:06,026
You can also consult us
on our developer forums.


887
00:45:06,776 --> 00:45:12,786
We have some related sessions
lined up for you for the rest


888
00:45:12,786 --> 00:45:15,726
of this week starting with
one this afternoon called


889
00:45:15,776 --> 00:45:18,096
"Harnessing Metadata
in Audiovisual Media".


890
00:45:19,286 --> 00:45:21,856
Tomorrow morning we
show you Camera Capture


891
00:45:21,856 --> 00:45:24,736
with all its new features
and AVCaptureView,


892
00:45:24,736 --> 00:45:26,246
we mentioned earlier
in this talk.


893
00:45:27,016 --> 00:45:30,326
And on Thursday, we show you
how you can directly access our


894
00:45:30,326 --> 00:45:32,186
media encoders and decoders.


895
00:45:33,356 --> 00:45:33,696
That's it.


896
00:45:33,696 --> 00:45:35,096
Thank you for coming.


897
00:45:35,176 --> 00:45:36,246
Enjoy the rest of your week.


898
00:45:37,516 --> 00:45:42,480
[ Applause ]

