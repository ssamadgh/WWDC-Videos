1
00:00:07,516 --> 00:00:19,500
[ Music ]


2
00:00:22,516 --> 00:00:26,616
[ Applause ]


3
00:00:27,116 --> 00:00:28,796
>> Good afternoon.


4
00:00:28,796 --> 00:00:30,006
My name is Kris Markel.


5
00:00:30,036 --> 00:00:32,266
I'm a member of Apple's
Performance Tools Team.


6
00:00:32,316 --> 00:00:33,226
And today we're going to talk


7
00:00:33,226 --> 00:00:35,896
about using Time
Profiler in Instruments.


8
00:00:36,806 --> 00:00:37,886
So here's our agenda.


9
00:00:37,886 --> 00:00:40,356
We're going to start with an
introduction to profiling.


10
00:00:40,626 --> 00:00:41,946
What it is, and how
you get started.


11
00:00:41,946 --> 00:00:43,236
And then we're going
to show an example


12
00:00:43,236 --> 00:00:46,716
of making an application
go faster and do less.


13
00:00:46,716 --> 00:00:50,606
And then finally, ensuring we
have really great user responses


14
00:00:51,076 --> 00:00:51,906
in our application.


15
00:00:52,536 --> 00:00:53,596
But before we do that,


16
00:00:53,596 --> 00:00:55,806
let's talk about why
we want to do this.


17
00:00:56,096 --> 00:00:58,136
And the reason we're doing
this is because we want


18
00:00:58,136 --> 00:01:01,276
to provide a great
user experience.


19
00:01:01,616 --> 00:01:04,586
We want our users to love
using our applications.


20
00:01:05,006 --> 00:01:07,116
We want them to love
our user applications


21
00:01:07,156 --> 00:01:08,436
because they're fast.


22
00:01:08,796 --> 00:01:09,796
Cheetah fast.


23
00:01:10,356 --> 00:01:12,596
So it saves them time and
they can get more done.


24
00:01:13,256 --> 00:01:16,136
We want to make sure our users
have all-day battery life.


25
00:01:16,826 --> 00:01:17,566
So that they're able


26
00:01:17,566 --> 00:01:19,246
to use their devices
throughout the day.


27
00:01:19,626 --> 00:01:22,346
And you don't want to be that
application that's at the top


28
00:01:22,346 --> 00:01:23,746
of the battery usage chart.


29
00:01:24,606 --> 00:01:27,716
And finally, we want to make
sure we have smooth scrolling,


30
00:01:28,076 --> 00:01:30,796
and a really responsive
UI in our applications,


31
00:01:31,246 --> 00:01:33,036
so users love using it.


32
00:01:33,516 --> 00:01:34,846
And how are we going to do this?


33
00:01:35,286 --> 00:01:37,136
We're going to use a
technique called profiling.


34
00:01:37,716 --> 00:01:39,546
Profiling is answering
two questions


35
00:01:39,546 --> 00:01:40,556
about your application.


36
00:01:40,896 --> 00:01:42,226
How much work is it doing?


37
00:01:42,646 --> 00:01:44,316
And what kind of
work is it doing?


38
00:01:44,896 --> 00:01:46,676
And, if you hadn't
guessed from the title,


39
00:01:47,046 --> 00:01:50,306
we're going to use a tool
called Time Profiler to do this.


40
00:01:50,676 --> 00:01:53,106
Time Profiler answers
an additional question


41
00:01:53,426 --> 00:01:55,416
of when is my app
doing that work?


42
00:01:56,616 --> 00:01:59,586
Time Profiler is part of an
application called Instruments


43
00:01:59,846 --> 00:02:02,536
that is a collection of
a wide variety of tools


44
00:02:02,826 --> 00:02:05,746
that measure all kinds of
aspects of your application.


45
00:02:06,666 --> 00:02:07,756
And how do we get started?


46
00:02:08,015 --> 00:02:08,946
Well, it's really easy.


47
00:02:09,196 --> 00:02:10,686
From Xcode's Product menu,


48
00:02:11,146 --> 00:02:12,536
you just go ahead
and choose Profile.


49
00:02:13,436 --> 00:02:14,906
So let's go ahead
and do that now.


50
00:02:16,326 --> 00:02:19,096
Okay. So first I'm going
to show you my application.


51
00:02:19,526 --> 00:02:20,796
Give you an idea
of what it's doing.


52
00:02:21,676 --> 00:02:25,136
My application uses the
Photo's framework to look


53
00:02:25,136 --> 00:02:28,026
at the user's photo library
and check for duplicates.


54
00:02:28,516 --> 00:02:30,046
So I'm going to go
ahead and do that now.


55
00:02:30,116 --> 00:02:31,676
And it takes a little while


56
00:02:31,676 --> 00:02:34,336
when my test data has
lots of duplicates.


57
00:02:34,396 --> 00:02:36,266
So it comes up with
a pretty big number.


58
00:02:36,566 --> 00:02:37,316
Okay, that's done.


59
00:02:37,316 --> 00:02:40,016
Now I'm going to go ahead
and select some photos.


60
00:02:40,556 --> 00:02:43,776
And then let's find a good one.


61
00:02:43,776 --> 00:02:44,336
Here is one.


62
00:02:44,616 --> 00:02:47,226
And then it uses the core
image face detection.


63
00:02:47,226 --> 00:02:49,456
So I can add some
googly eyes to my face.


64
00:02:49,526 --> 00:02:52,866
And then it uses UI
dynamics in CoreMotion


65
00:02:53,406 --> 00:02:54,816
to make the googly eyes jump


66
00:02:54,816 --> 00:02:56,576
around when you shake
the device.


67
00:02:57,626 --> 00:03:00,126
Okay. So that's the application.


68
00:03:01,046 --> 00:03:03,286
Let's go ahead and profile
it to see what it's doing.


69
00:03:04,036 --> 00:03:07,836
So from Xcode's Product
menu, I'm going to go ahead,


70
00:03:07,836 --> 00:03:09,686
and just like I said,
choose Profile.


71
00:03:10,596 --> 00:03:13,086
This is going to do a release
build of my application,


72
00:03:13,496 --> 00:03:17,296
and then launch Instruments
so I can start measuring it.


73
00:03:17,486 --> 00:03:20,356
It's important to do
profile release builds,


74
00:03:20,356 --> 00:03:22,096
because you want all
the optimizations


75
00:03:22,096 --> 00:03:23,316
that you'll get from
the compiler.


76
00:03:23,986 --> 00:03:26,306
So this will take just a moment.


77
00:03:26,656 --> 00:03:28,976
And it's copying the
application to the device.


78
00:03:34,046 --> 00:03:34,456
Here we go.


79
00:03:35,496 --> 00:03:37,336
So now Instruments comes up.


80
00:03:37,546 --> 00:03:40,126
And it's going to show
me the template chooser.


81
00:03:40,826 --> 00:03:43,696
And this you get an idea
of exactly what kind


82
00:03:43,696 --> 00:03:45,476
of tools Instruments
provides for you.


83
00:03:45,916 --> 00:03:47,706
Today, of course, we
want Time Profiler.


84
00:03:48,146 --> 00:03:51,876
So I'm going to go
ahead and click Choose.


85
00:03:52,096 --> 00:03:54,536
Now if you've never
used Instruments before,


86
00:03:54,646 --> 00:03:56,806
this user interface can
be a little intimidating.


87
00:03:57,226 --> 00:03:59,116
But getting started
is really simple.


88
00:04:00,386 --> 00:04:02,636
All I have to do is go
up to this Record button


89
00:04:02,636 --> 00:04:04,446
up in the corner, and click it.


90
00:04:04,966 --> 00:04:06,846
That's going to start
my application,


91
00:04:06,846 --> 00:04:07,936
and start measuring it.


92
00:04:08,266 --> 00:04:09,756
So let's go ahead
and do that now.


93
00:04:10,936 --> 00:04:15,656
Okay, so now my application
is started.


94
00:04:15,656 --> 00:04:16,466
It is starting.


95
00:04:16,656 --> 00:04:17,116
There we go.


96
00:04:17,946 --> 00:04:19,976
Right? I'm going to do
my duplicate checking.


97
00:04:20,736 --> 00:04:22,346
Just one moment.


98
00:04:22,996 --> 00:04:27,236
Okay. And then I'm
going to go ahead


99
00:04:27,236 --> 00:04:28,716
and do my duplicate checking.


100
00:04:29,876 --> 00:04:31,446
And let's see if we
start getting data now.


101
00:04:32,216 --> 00:04:35,076
There we go.


102
00:04:35,326 --> 00:04:36,296
Okay, now that's done.


103
00:04:36,296 --> 00:04:38,586
Now I'm going to
select my photos.


104
00:04:39,096 --> 00:04:42,746
And then I'm going
to pick a photo.


105
00:04:43,486 --> 00:04:44,926
Add some googly eyes.


106
00:04:45,966 --> 00:04:47,006
Shake it around.


107
00:04:48,066 --> 00:04:49,916
Now let's go ahead and
dismiss that photo.


108
00:04:50,726 --> 00:04:55,436
And then I'm going to go
ahead and stop the recording.


109
00:04:55,946 --> 00:04:59,506
I'm clicking the Stop button.


110
00:04:59,506 --> 00:05:03,306
And now we can see here, I have
a nice, high-level overview


111
00:05:03,446 --> 00:05:06,416
of what my app was doing.


112
00:05:06,856 --> 00:05:08,566
Time Profiler gives
me two graphs.


113
00:05:08,626 --> 00:05:11,186
This top part of Instruments
is known as the Timeline view.


114
00:05:11,756 --> 00:05:14,676
The first graph is my CPU usage.


115
00:05:14,846 --> 00:05:16,466
How much CPU my app is using.


116
00:05:17,046 --> 00:05:19,876
And I can actually hover over
it, and see the precise values.


117
00:05:20,526 --> 00:05:25,536
The second graph is what
lifecycle state my application


118
00:05:25,536 --> 00:05:29,516
is in, and how long
it's been in that state.


119
00:05:29,716 --> 00:05:33,016
So that gives me
a really good idea


120
00:05:33,216 --> 00:05:35,736
of how much work my
application is doing,


121
00:05:36,076 --> 00:05:37,136
and when it's doing it.


122
00:05:37,786 --> 00:05:40,346
But how do I know what
is my application doing?


123
00:05:40,886 --> 00:05:42,146
And to figure that out,


124
00:05:42,236 --> 00:05:44,086
we go down to Instrument's
Call Tree View.


125
00:05:44,316 --> 00:05:45,996
Which is this part here
in the Detail view.


126
00:05:46,456 --> 00:05:50,176
And the Call Tree View
represents the collected call


127
00:05:50,176 --> 00:05:52,556
stack samples aggregated
by weight,


128
00:05:53,116 --> 00:05:55,886
and shown in the Detail view.


129
00:05:56,576 --> 00:05:58,626
Now what exactly does this mean?


130
00:05:59,126 --> 00:06:00,506
Well, this is a lot
easier to show


131
00:06:00,506 --> 00:06:02,606
in pictures, rather than words.


132
00:06:02,666 --> 00:06:05,356
So let's go ahead and
look at a diagram.


133
00:06:06,566 --> 00:06:08,986
So here we have time,
moving along to the right.


134
00:06:09,336 --> 00:06:11,266
And here is our very
simple application.


135
00:06:11,856 --> 00:06:14,296
We have a main method
that's calling into method1.


136
00:06:14,706 --> 00:06:15,956
That's calling into method2.


137
00:06:16,656 --> 00:06:18,896
At this point in time,
Time Profiler is going


138
00:06:18,896 --> 00:06:20,926
to get a call stack
from our application,


139
00:06:21,426 --> 00:06:22,446
and it looks like this.


140
00:06:23,096 --> 00:06:25,456
This is just like the call
stacks you see when you're


141
00:06:25,456 --> 00:06:26,696
in the debugger in Xcode.


142
00:06:27,256 --> 00:06:30,926
But Instruments or Time Profiler
indents each subsequent line.


143
00:06:30,926 --> 00:06:32,986
And it does that so it can
build a tree structure,


144
00:06:33,116 --> 00:06:33,996
which we'll see in a moment.


145
00:06:34,976 --> 00:06:36,326
So time continues on.


146
00:06:36,466 --> 00:06:38,476
Oh, and then it records
that call stack.


147
00:06:38,576 --> 00:06:41,516
And it records the number of
times it's seeing each method


148
00:06:41,516 --> 00:06:43,446
or function within
that call stack.


149
00:06:44,746 --> 00:06:47,376
So time continues, and
we can see method2 exits,


150
00:06:47,456 --> 00:06:50,546
method1 calls method3 which
exists, calls method2 again.


151
00:06:51,206 --> 00:06:53,496
Then we go ahead, one
millisecond has passed.


152
00:06:54,006 --> 00:06:55,866
And Time Profiler's going
to take another sample.


153
00:06:56,126 --> 00:06:58,836
And in this case, it looks
identical to the first.


154
00:06:58,886 --> 00:07:00,336
So we'll go ahead
and update our table.


155
00:07:00,876 --> 00:07:03,066
And we just increment
each of those numbers.


156
00:07:04,136 --> 00:07:06,346
And time's going to
continue forward again.


157
00:07:06,346 --> 00:07:08,736
And now we see our application
is doing something different.


158
00:07:09,436 --> 00:07:10,916
We have main calling directly


159
00:07:10,916 --> 00:07:12,736
into method2; calling
into method3.


160
00:07:13,426 --> 00:07:15,706
Time Profiler's going to take
another sample right here.


161
00:07:16,136 --> 00:07:18,026
And now we can see our
different call stack.


162
00:07:18,686 --> 00:07:20,856
It only has two methods
in this case.


163
00:07:21,306 --> 00:07:24,456
And then so when we update our
table, this represents a branch.


164
00:07:24,876 --> 00:07:28,466
So now we know that
sometimes main calls method1,


165
00:07:28,466 --> 00:07:30,096
and sometimes it calls method2.


166
00:07:30,406 --> 00:07:32,526
And we know exactly how
many times it's done each


167
00:07:32,526 --> 00:07:33,286
of those things.


168
00:07:34,706 --> 00:07:38,046
So time continues on, and we
collect a couple more samples.


169
00:07:38,046 --> 00:07:40,136
These happen to be identical
to our first samples.


170
00:07:40,616 --> 00:07:42,746
And so we're going to update
our table appropriately.


171
00:07:43,426 --> 00:07:46,476
So now let's take a look at
what this table is actually


172
00:07:46,476 --> 00:07:48,496
telling us.


173
00:07:48,716 --> 00:07:51,816
One thing to note is that
Time Profiler's not actually


174
00:07:51,816 --> 00:07:53,016
measuring duration.


175
00:07:53,326 --> 00:07:55,326
It's not recording
when the method starts,


176
00:07:55,596 --> 00:07:58,316
and then when it exits and
subtracting those two numbers.


177
00:07:58,626 --> 00:08:02,046
It's aggregating the samples
into a useful summary.


178
00:08:02,446 --> 00:08:04,866
So when you see time
values in Time Profiler,


179
00:08:05,196 --> 00:08:07,196
it's not an actual
measurement of duration.


180
00:08:07,536 --> 00:08:10,156
That's the number of
samples multiplied


181
00:08:10,156 --> 00:08:12,166
by the time between samples.


182
00:08:12,246 --> 00:08:14,166
Which is 1 millisecond,
in most cases.


183
00:08:14,316 --> 00:08:17,206
This does have some
side effects.


184
00:08:17,556 --> 00:08:20,156
And one of them is that Time
Profiler doesn't distinguish


185
00:08:20,206 --> 00:08:24,046
between long running methods,
or much faster methods


186
00:08:24,046 --> 00:08:25,216
that are called repetitively.


187
00:08:25,726 --> 00:08:29,866
And we can actually see that in
our call tree here of method1


188
00:08:29,866 --> 00:08:32,176
and method2 show up in the
same number of samples.


189
00:08:32,176 --> 00:08:33,895
From Time Profiler's
perspective,


190
00:08:34,226 --> 00:08:37,616
they incurred the
same amount of work.


191
00:08:38,196 --> 00:08:40,775
But we know that method1
was actually called twice,


192
00:08:40,775 --> 00:08:44,285
and ran for longer, method2
was called four times


193
00:08:44,285 --> 00:08:45,136
and was much shorter.


194
00:08:46,306 --> 00:08:49,696
Time Profiler's also really
focused on CPU usage, right?


195
00:08:49,696 --> 00:08:51,206
It's answering the question;


196
00:08:51,676 --> 00:08:53,576
what work is my application
doing?


197
00:08:53,856 --> 00:08:56,216
And another result of this
is it doesn't necessarily


198
00:08:56,216 --> 00:08:57,476
capture everything.


199
00:08:57,886 --> 00:09:00,236
In fact, what's missing
from our table?


200
00:09:01,696 --> 00:09:03,676
There's no method3, right?


201
00:09:03,986 --> 00:09:05,886
If you have really
fast functions,


202
00:09:05,886 --> 00:09:08,426
or really fast methods that
aren't called very often,


203
00:09:08,856 --> 00:09:10,376
they won't appear
in your call tree.


204
00:09:10,376 --> 00:09:11,856
And this is actually okay.


205
00:09:11,856 --> 00:09:12,676
This is what we want.


206
00:09:12,756 --> 00:09:15,696
Because they're not having an
impact in how much work I have


207
00:09:15,776 --> 00:09:16,856
to be doing over time.


208
00:09:18,196 --> 00:09:20,326
So now that we have a better
understanding of the call tree,


209
00:09:20,436 --> 00:09:23,446
let's see how we can use it to
make our app faster and do less.


210
00:09:32,116 --> 00:09:37,526
Okay. So looking back at my
timeline, I want to take a look


211
00:09:37,856 --> 00:09:40,726
at this big, first
block of CPU usage here.


212
00:09:40,726 --> 00:09:43,246
I can see that I'm
using 100% CPU


213
00:09:43,246 --> 00:09:46,706
for a significant
amount of time.


214
00:09:46,836 --> 00:09:49,326
So I want to see exactly
what work I'm doing there.


215
00:09:49,626 --> 00:09:52,166
I happen to know, that's when I
was doing my duplicate checking.


216
00:09:52,466 --> 00:09:54,536
I know I expect that
to take a fair amount


217
00:09:54,536 --> 00:09:55,956
of work, so I'm not surprised.


218
00:09:55,956 --> 00:09:57,966
But wherever you're
using a lot of CPU,


219
00:09:57,966 --> 00:10:00,576
there's usually an
opportunity to make it faster.


220
00:10:01,726 --> 00:10:04,016
So in order to get a better
idea of what's going on here,


221
00:10:04,016 --> 00:10:06,396
I'm going to use the
trackpad, and I'm just going


222
00:10:07,056 --> 00:10:10,516
to pinch to zoom in; un-pinch.


223
00:10:10,926 --> 00:10:14,686
So I can get a much better
idea of exactly what's going


224
00:10:14,686 --> 00:10:15,906
on in this time period.


225
00:10:16,546 --> 00:10:19,426
And then I'm going to go
ahead and click and drag


226
00:10:19,426 --> 00:10:21,016
across the Timeline view.


227
00:10:21,916 --> 00:10:23,586
And this is going
to apply a filter.


228
00:10:24,096 --> 00:10:28,196
So now my call tree is only
going to show data from samples


229
00:10:28,196 --> 00:10:30,136
that were collected
within that timeframe.


230
00:10:30,316 --> 00:10:32,186
If you notice, now you can see


231
00:10:32,186 --> 00:10:34,676
that the call tree is actually
showing much less data.


232
00:10:34,926 --> 00:10:37,486
It's only really focused
on this period of time.


233
00:10:38,256 --> 00:10:40,856
So now let's take a look at
our call tree in more detail.


234
00:10:41,386 --> 00:10:43,726
You'll see a few columns here.


235
00:10:43,726 --> 00:10:46,596
There's Weight and Self
Weight, and then Symbol Name.


236
00:10:47,406 --> 00:10:50,796
The weight represents
the percentage of samples


237
00:10:51,136 --> 00:10:53,866
that that particular portion
of the call tree appeared in.


238
00:10:54,236 --> 00:10:56,356
And you'll see next to the
weight there's also a time.


239
00:10:56,456 --> 00:10:58,796
And like I said before,
that's not duration.


240
00:10:59,136 --> 00:11:00,906
That's the number of
samples multiplied


241
00:11:00,906 --> 00:11:03,506
by the time between each sample.


242
00:11:04,186 --> 00:11:05,866
And then there's
also Self Weight,


243
00:11:06,356 --> 00:11:09,476
which is actually the amount
of time that was spent


244
00:11:09,476 --> 00:11:10,976
within that method itself,


245
00:11:10,976 --> 00:11:12,896
and not some other
method that it called.


246
00:11:13,276 --> 00:11:15,546
And you can see actually
here, these are 0.


247
00:11:15,546 --> 00:11:18,666
If I go ahead and just
close this, it's still 0.


248
00:11:18,776 --> 00:11:19,786
It's still 0.


249
00:11:20,186 --> 00:11:21,926
What this is telling
me is that, you know,


250
00:11:22,286 --> 00:11:24,716
99% of my samples were in main.


251
00:11:24,716 --> 00:11:27,466
But actually, all of
those were also were also


252
00:11:27,466 --> 00:11:29,276
within UIApplication main.


253
00:11:29,656 --> 00:11:30,756
And all of those were


254
00:11:30,756 --> 00:11:33,236
within whatever UIApplication
main calls.


255
00:11:33,496 --> 00:11:35,396
And instead of disclosing
these one-by-one,


256
00:11:35,396 --> 00:11:37,956
I'm going to use a new
feature in Instruments 8.


257
00:11:38,686 --> 00:11:40,036
Where I hold down
the Option key,


258
00:11:40,036 --> 00:11:41,486
and click the Disclosure
triangle.


259
00:11:42,036 --> 00:11:44,106
And this gives me
a smart disclosure.


260
00:11:44,226 --> 00:11:45,996
So it's going to just
close my call tree


261
00:11:46,276 --> 00:11:48,126
until there's actually
interesting data in it.


262
00:11:49,346 --> 00:11:51,716
And if we go ahead
and scroll down,


263
00:11:51,716 --> 00:11:54,006
we can see now we
actually have some methods


264
00:11:54,336 --> 00:11:55,766
that have some self
weight to them.


265
00:11:56,286 --> 00:11:58,736
In fact, if I look at this
particular release call,


266
00:11:58,736 --> 00:12:02,276
I can see, you know, its
weight is 117 milliseconds,


267
00:12:02,276 --> 00:12:03,756
and its self weight is the same.


268
00:12:04,076 --> 00:12:05,846
So it's spent all
its time in itself.


269
00:12:05,886 --> 00:12:09,156
Didn't call any subsequent
functions or methods.


270
00:12:09,926 --> 00:12:11,416
And actually, you know,
looking through these,


271
00:12:11,416 --> 00:12:14,596
I see a lot of these
Objective-C runtime calls here.


272
00:12:14,926 --> 00:12:18,356
And they're actually all have
pretty high self weights.


273
00:12:18,756 --> 00:12:22,426
These runtime methods are
super highly optimized


274
00:12:22,426 --> 00:12:23,836
and run really quickly.


275
00:12:24,276 --> 00:12:25,666
And they're usually
the sort of thing


276
00:12:25,666 --> 00:12:27,376
that Time Profiler
doesn't capture,


277
00:12:27,706 --> 00:12:29,016
because they run so quickly.


278
00:12:29,436 --> 00:12:31,276
But since they're showing up,


279
00:12:31,276 --> 00:12:34,606
I know that generally
they're being called a lot.


280
00:12:35,056 --> 00:12:36,536
So they're showing
up in samples.


281
00:12:36,886 --> 00:12:39,516
This is usually the case if
you're looping through a lot


282
00:12:39,516 --> 00:12:42,726
of Objective-C objects, you'll
see this show up in your trace.


283
00:12:43,036 --> 00:12:45,806
So the other thing the
call tree shows us is


284
00:12:45,806 --> 00:12:46,766
over here on the right.


285
00:12:47,146 --> 00:12:50,436
We can see which
library that portion


286
00:12:50,816 --> 00:12:52,276
of the call tree came from.


287
00:12:52,276 --> 00:12:53,346
That particular method call.


288
00:12:53,346 --> 00:12:54,476
And here we can see
this is coming


289
00:12:54,476 --> 00:12:55,566
with the photo's framework.


290
00:12:56,106 --> 00:12:57,456
And we actually work our way up.


291
00:12:58,086 --> 00:12:59,146
Scroll to the right here.


292
00:12:59,736 --> 00:13:02,406
We can see, here's
the line of code


293
00:13:02,406 --> 00:13:07,386
from my app that's causing
all this work to happen.


294
00:13:08,076 --> 00:13:11,486
You know, this particular
line has 0 self weight.


295
00:13:11,706 --> 00:13:13,276
It's not doing any
of the work itself.


296
00:13:13,586 --> 00:13:15,686
But it's the thing that's
triggering all the work.


297
00:13:16,196 --> 00:13:17,266
You know, I'm not
going to be able


298
00:13:17,266 --> 00:13:20,326
to make Objective-C release
call any faster, but I can see


299
00:13:20,326 --> 00:13:23,936
if there's something here I
can do to maybe call it less.


300
00:13:24,016 --> 00:13:25,936
So I'm going to double
click on this line.


301
00:13:25,936 --> 00:13:27,816
And it's going to
take me to my code.


302
00:13:28,756 --> 00:13:31,856
And Instruments annotates
each line with the number


303
00:13:31,856 --> 00:13:33,136
of samples that appeared in.


304
00:13:33,316 --> 00:13:35,936
So looking at this
method I can see that most


305
00:13:35,936 --> 00:13:38,146
of my time is spent on
that red line there.


306
00:13:38,606 --> 00:13:40,236
But if I take a closer look,


307
00:13:40,236 --> 00:13:41,546
I actually see something
else here.


308
00:13:42,056 --> 00:13:43,816
I have nested four loops.


309
00:13:44,206 --> 00:13:49,086
And in fact, each of
those loops is iterating


310
00:13:49,086 --> 00:13:50,906
over my entire photos
collection.


311
00:13:50,906 --> 00:13:54,166
And this is pretty much a
classic example of what's known


312
00:13:54,166 --> 00:13:55,496
as N squared behavior.


313
00:13:56,006 --> 00:13:59,856
As I throw more data at this
code, it's going to get slower,


314
00:13:59,856 --> 00:14:01,066
and slower, and slower.


315
00:14:01,066 --> 00:14:02,956
And since I know
it's going to operate


316
00:14:02,956 --> 00:14:05,696
over a lot of data, this is bad.


317
00:14:06,426 --> 00:14:08,206
So I want to go ahead
and change this.


318
00:14:08,646 --> 00:14:09,896
So I'm going to go into Xcode.


319
00:14:10,546 --> 00:14:11,576
And here's my code here.


320
00:14:12,616 --> 00:14:16,296
A typical way of avoiding
nested four loops is use a


321
00:14:16,296 --> 00:14:17,896
set-based implementation.


322
00:14:18,356 --> 00:14:21,196
I'm not going to go into
details, but I've gone ahead


323
00:14:22,376 --> 00:14:26,076
and created a new algorithm


324
00:14:26,076 --> 00:14:28,696
for doing my duplicate
checking that uses --


325
00:14:33,196 --> 00:14:41,056
That uses a counted set and
another set to find duplicates.


326
00:14:41,056 --> 00:14:43,946
Now let's go ahead and verify


327
00:14:43,946 --> 00:14:45,316
that I actually made
a difference.


328
00:14:45,466 --> 00:14:47,356
So again I'm going to
go to the Product menu.


329
00:14:47,356 --> 00:14:49,256
And I'm going to choose Profile.


330
00:14:50,206 --> 00:14:52,016
It's going to rebuild
my application


331
00:14:52,596 --> 00:14:55,836
and install it to the device.


332
00:14:55,836 --> 00:14:57,746
And then since Instruments
is already running,


333
00:14:57,906 --> 00:15:00,136
it's going to go ahead and
start the recording right away.


334
00:15:01,326 --> 00:15:03,806
So as it's copying it
to the device let's see,


335
00:15:03,806 --> 00:15:04,916
starting the profiling.


336
00:15:07,696 --> 00:15:09,016
Here's Instruments.


337
00:15:09,536 --> 00:15:12,096
And my application has started.


338
00:15:12,756 --> 00:15:16,096
Okay, and it's starting
recording,


339
00:15:16,096 --> 00:15:16,976
I'm going to zoom out.


340
00:15:18,986 --> 00:15:21,336
Okay, I'll zoom out so
we can see some data.


341
00:15:21,896 --> 00:15:25,166
And I'm going to go ahead
and do my duplicate checking.


342
00:15:26,776 --> 00:15:28,416
Duplicates.


343
00:15:28,656 --> 00:15:29,526
All Photos.


344
00:15:30,006 --> 00:15:32,236
And I can see the data come in.


345
00:15:32,636 --> 00:15:33,826
Oh, I'm actually at minutes.


346
00:15:33,826 --> 00:15:35,706
I thought this was seconds.


347
00:15:35,706 --> 00:15:39,516
Okay. So my duplicate checking
actually happened much faster.


348
00:15:39,516 --> 00:15:42,946
In fact, we no longer
see that large bar going


349
00:15:43,066 --> 00:15:44,596
across the timeline anymore.


350
00:15:44,596 --> 00:15:45,706
So that's a good change.


351
00:15:45,896 --> 00:15:49,166
I want to go ahead and
re-measure the rest of my apps.


352
00:15:49,166 --> 00:15:50,556
I'm going to select some photos.


353
00:15:51,236 --> 00:15:52,436
I'm going to add some eyes.


354
00:15:52,436 --> 00:15:54,386
I'm going to shake it.


355
00:15:55,046 --> 00:15:56,916
And then I'm going to
dismiss that photo.


356
00:15:56,916 --> 00:15:59,396
So now my application is static.


357
00:15:59,396 --> 00:16:00,596
It shouldn't be doing any work.


358
00:16:01,356 --> 00:16:03,276
But let's go ahead
and take a look


359
00:16:03,276 --> 00:16:05,116
at what the Time
Profiler is telling us.


360
00:16:05,206 --> 00:16:06,316
Let's stop the recording.


361
00:16:06,896 --> 00:16:11,266
It's taking a minute to
catch up with the data.


362
00:16:11,366 --> 00:16:16,966
Whoa. Okay, so I can see
here at the end of this --


363
00:16:16,966 --> 00:16:21,416
at the end of the call,
there's some CPU usage here.


364
00:16:21,976 --> 00:16:24,676
It's not much, but I'm
expecting it to be 0.


365
00:16:24,726 --> 00:16:26,736
So I want go ahead and
see what that's doing.


366
00:16:27,446 --> 00:16:30,596
I'm going to zoom in
again with the trackpad.


367
00:16:31,166 --> 00:16:34,006
And then I'm going
to drag to select


368
00:16:34,966 --> 00:16:36,146
to see what's going on here.


369
00:16:36,966 --> 00:16:41,586
And then I'm going to go ahead
and option click through here


370
00:16:41,916 --> 00:16:42,996
to see what's going on.


371
00:16:43,476 --> 00:16:44,996
And now if you look
at my call tree,


372
00:16:45,886 --> 00:16:47,256
this time I can see
there are a lot


373
00:16:47,256 --> 00:16:48,916
of calls in CoreMotion, right?


374
00:16:48,916 --> 00:16:51,526
And I know what my app is doing
here, it's using CoreMotion


375
00:16:51,586 --> 00:16:54,376
to detect and make
the eyes move.


376
00:16:54,996 --> 00:16:58,466
But moving back up the call
tree, there's actually none


377
00:16:58,466 --> 00:17:01,436
of my code in this call tree.


378
00:17:02,056 --> 00:17:04,826
So there's nothing I'm doing
that's directly invoking this.


379
00:17:05,146 --> 00:17:07,486
But something in my app is
making CoreMotion do work


380
00:17:07,486 --> 00:17:08,236
when it shouldn't be.


381
00:17:08,786 --> 00:17:10,695
And what I know about
my app, is I realize


382
00:17:10,695 --> 00:17:14,116
that I'm not turning off
the CoreMotion monitoring


383
00:17:14,165 --> 00:17:15,986
when there are no
eyes on the screen.


384
00:17:16,306 --> 00:17:18,256
So let's go ahead
and make that change.


385
00:17:19,396 --> 00:17:20,556
We go back to Xcode.


386
00:17:22,006 --> 00:17:26,836
And then I actually have
the methods all written.


387
00:17:27,056 --> 00:17:28,465
It's just a matter
of calling them.


388
00:17:28,465 --> 00:17:32,466
So let me go ahead
and add them here.


389
00:17:32,466 --> 00:17:39,476
And then we stop observing here.


390
00:17:39,696 --> 00:17:41,236
Okay. Now let's measure this


391
00:17:41,276 --> 00:17:44,476
and make sure it changed
as we expect it to.


392
00:17:45,406 --> 00:17:46,636
And again, Instruments is going


393
00:17:46,636 --> 00:17:50,096
to rebuild the application;
put it on the device.


394
00:17:51,036 --> 00:17:53,656
And also, since Instruments
is already up and running,


395
00:17:53,656 --> 00:17:54,886
it'll start recording again.


396
00:17:55,486 --> 00:17:58,136
This time I'm going to
zoom out ahead of time.


397
00:17:58,136 --> 00:18:02,826
And I also click outside of the
filter, and that removes it.


398
00:18:04,326 --> 00:18:07,126
Okay. And once the
application is on the device,


399
00:18:07,886 --> 00:18:10,056
Instruments will start
recording it once more.


400
00:18:18,126 --> 00:18:19,636
Okay, there we go.


401
00:18:24,256 --> 00:18:26,116
Okay, so this time
I'm going to go ahead


402
00:18:26,116 --> 00:18:29,106
and just go ahead
and add my photos.


403
00:18:29,606 --> 00:18:34,886
And then I'm going
to scroll to a photo.


404
00:18:35,956 --> 00:18:36,476
Select it.


405
00:18:37,166 --> 00:18:38,096
Add the eyes.


406
00:18:38,736 --> 00:18:42,456
Do the shaking let's actually
zoom this in a little more.


407
00:18:43,056 --> 00:18:48,166
I'm going to choose a new photo
so the eyes move off the screen.


408
00:18:49,236 --> 00:18:51,236
And then let's go ahead
and stop the recording,


409
00:18:51,646 --> 00:18:53,396
and see if it changes
as we expected.


410
00:18:54,086 --> 00:18:58,556
And now if I zoom in on the end
here once Instruments is done


411
00:18:58,556 --> 00:18:59,376
processing the data.


412
00:18:59,376 --> 00:19:03,176
I can see that my CPU usage
is now 0 here at the end.


413
00:19:03,676 --> 00:19:08,236
So I'm no longer doing that
work when I didn't need to be.


414
00:19:08,406 --> 00:19:10,856
So let's take a look and
review what we've done.


415
00:19:11,396 --> 00:19:14,536
So the first thing we did, is
we used the trackpad to figure


416
00:19:14,536 --> 00:19:18,016
out how much work our app was
doing and when it was doing it.


417
00:19:18,016 --> 00:19:21,376
And it was a good way to find
areas of interest to focus on.


418
00:19:21,786 --> 00:19:24,996
And the trackpad or the timeline
is really trackpad friendly.


419
00:19:24,996 --> 00:19:27,076
But it also works
great with a mouse.


420
00:19:27,186 --> 00:19:31,506
You can option-drag, and
control-drag to zoom in and out.


421
00:19:31,776 --> 00:19:34,466
So we found an area
on the track view


422
00:19:34,466 --> 00:19:35,786
that was using a lot of CPU.


423
00:19:35,786 --> 00:19:37,186
And we wanted to
make it go faster.


424
00:19:37,426 --> 00:19:42,136
So we went ahead, we zoomed in,
and we filtered on that area.


425
00:19:43,326 --> 00:19:45,416
We examined the call
tree and we found


426
00:19:45,416 --> 00:19:48,266
out where the work was happening
in that portion of our app.


427
00:19:49,316 --> 00:19:51,706
And then we walked
back up the call tree


428
00:19:51,706 --> 00:19:53,566
until we actually
encountered our code.


429
00:19:53,926 --> 00:19:57,086
What part of our app is
causing this work to happen,


430
00:19:57,386 --> 00:19:59,446
even though it's not
doing the work itself?


431
00:20:00,166 --> 00:20:02,226
We took a look at our code.


432
00:20:02,556 --> 00:20:03,516
We thought about it.


433
00:20:03,676 --> 00:20:04,526
Scratched our heads.


434
00:20:04,526 --> 00:20:06,176
We ate a sandwich,
and we figured


435
00:20:06,176 --> 00:20:07,216
out a way to make it faster.


436
00:20:08,006 --> 00:20:12,396
So we went ahead and implemented
those changes, and verified


437
00:20:12,456 --> 00:20:13,986
that they actually
did make it faster.


438
00:20:13,986 --> 00:20:16,136
It was a significant
improvement in this case.


439
00:20:16,136 --> 00:20:19,256
And as a result, we saved
a bunch of the user's time.


440
00:20:19,426 --> 00:20:21,496
Now when they're using my
app to find duplicates,


441
00:20:21,496 --> 00:20:23,516
they won't be looking
at that spinner forever.


442
00:20:23,876 --> 00:20:25,626
It'll finish much more quickly.


443
00:20:26,186 --> 00:20:29,256
Now in terms of doing
less, what did we do?


444
00:20:29,776 --> 00:20:32,576
Again, we focused on an
area of the track view,


445
00:20:32,576 --> 00:20:36,006
where this time it
wasn't using a lot of CPU,


446
00:20:36,006 --> 00:20:38,636
but it was using an
unexpected amount of CPU.


447
00:20:39,216 --> 00:20:40,226
We zoomed in.


448
00:20:40,226 --> 00:20:41,316
We applied a filter.


449
00:20:41,976 --> 00:20:44,706
We took a look at the call
tree, and this time we looked


450
00:20:44,706 --> 00:20:47,776
at the frameworks involved
again, we saw it was CoreMotion,


451
00:20:47,776 --> 00:20:49,916
but none of our code
was being evoked.


452
00:20:50,626 --> 00:20:51,636
So this time we had to think


453
00:20:51,636 --> 00:20:52,986
about our app in
a different way.


454
00:20:53,146 --> 00:20:56,136
What portion of our app is
making this work happen?


455
00:20:56,906 --> 00:21:00,386
We went ahead and again,
maybe took a little break.


456
00:21:00,536 --> 00:21:01,676
Ate another sandwich.


457
00:21:01,906 --> 00:21:04,626
And figured out how to make
our app stop doing that work


458
00:21:05,196 --> 00:21:06,716
so it's no longer happening.


459
00:21:07,396 --> 00:21:09,306
We went ahead and
reprofiled the app.


460
00:21:09,566 --> 00:21:12,896
Verified that our changes did
what we expected them to do.


461
00:21:13,326 --> 00:21:15,516
And actually, as
a result of this,


462
00:21:15,576 --> 00:21:20,526
we significantly improved the
battery life while our app


463
00:21:20,526 --> 00:21:21,086
is running.


464
00:21:21,256 --> 00:21:24,296
Any time the CPU can go
to 0 and go to sleep,


465
00:21:24,646 --> 00:21:26,536
that represents significant
savings.


466
00:21:26,806 --> 00:21:28,946
So even though our
CPU usage was low,


467
00:21:28,946 --> 00:21:31,076
it still has a battery cost.


468
00:21:31,076 --> 00:21:35,916
So now that we've gone
faster, and done less,


469
00:21:36,346 --> 00:21:38,746
let's talk about making
our apps more responsive.


470
00:21:40,696 --> 00:21:44,566
So the way your application
works, is the main thread


471
00:21:44,566 --> 00:21:46,436
that does all the
user interface work.


472
00:21:46,476 --> 00:21:49,496
It's responsible for
responding to user input,


473
00:21:49,496 --> 00:21:51,166
and then updating your views.


474
00:21:51,616 --> 00:21:53,876
And the way it handles
the user input,


475
00:21:54,366 --> 00:21:56,266
is that it's got a main thread.


476
00:21:56,266 --> 00:21:59,626
And the main thread has a run
loop that's just watching a


477
00:21:59,626 --> 00:22:02,536
queue called an Event
Queue and waiting


478
00:22:02,536 --> 00:22:04,576
for events to appear on it.


479
00:22:04,826 --> 00:22:08,986
When an event appears, it
sends it to your UIApplication,


480
00:22:08,986 --> 00:22:10,776
or NS application instance.


481
00:22:11,176 --> 00:22:12,786
Which then passes the event


482
00:22:12,786 --> 00:22:15,176
down through the responder
chain in your application.


483
00:22:15,706 --> 00:22:18,746
And if you application wants
to respond to that event,


484
00:22:19,116 --> 00:22:21,206
then it goes ahead
and invokes your code.


485
00:22:21,766 --> 00:22:25,026
And you can actually see
this in a call stack here.


486
00:22:25,426 --> 00:22:27,296
Here's the call stack
from my application.


487
00:22:27,776 --> 00:22:30,036
And we can see there,
there's the main thread.


488
00:22:30,886 --> 00:22:33,506
It calls the main function
which is, you know,


489
00:22:33,646 --> 00:22:35,386
where all our applications
start.


490
00:22:35,936 --> 00:22:38,826
Now in here, I don't know
exactly what these functions do,


491
00:22:38,826 --> 00:22:41,156
but they're clearly
related to a run loop.


492
00:22:41,966 --> 00:22:44,766
And I can see here, here's
a handleEventQueue function.


493
00:22:44,766 --> 00:22:47,146
So it's clearly got an
event off the event queue,


494
00:22:47,146 --> 00:22:47,886
and it's handling it.


495
00:22:48,476 --> 00:22:52,466
I can see it gets passed into my
UIApplication, and then passed


496
00:22:52,466 --> 00:22:55,076
through the responder chain
until it gets to my code.


497
00:22:55,076 --> 00:22:58,526
And in this case, this is
an IB action on a button.


498
00:22:59,476 --> 00:23:01,216
And then my code does its work.


499
00:23:02,306 --> 00:23:05,176
So what does this mean in terms
of keeping your apps responsive?


500
00:23:05,786 --> 00:23:10,216
Well, when busy, the main
thread can't process the queue.


501
00:23:10,696 --> 00:23:13,636
So it starts to back up
your user events back up.


502
00:23:14,146 --> 00:23:17,666
And then as a result, you
get stuttering and hiccups.


503
00:23:18,016 --> 00:23:21,296
And in the worst case, your app
becomes completely unresponsive.


504
00:23:21,636 --> 00:23:24,576
The user closes it, and maybe
deletes it from the device.


505
00:23:25,596 --> 00:23:29,106
So it's really important to
keep your main thread free,


506
00:23:29,626 --> 00:23:32,856
so it's able to respond
to the user input


507
00:23:33,176 --> 00:23:35,726
in a very quick manner.


508
00:23:37,036 --> 00:23:39,536
So now with that in our
pocket, let's see what we can do


509
00:23:39,536 --> 00:23:41,906
with our app in order to
make it more responsive.


510
00:23:41,906 --> 00:23:45,836
All right, I'm going to
zoom out of my track --


511
00:23:45,836 --> 00:23:46,946
on the track view this time.


512
00:23:47,476 --> 00:23:48,876
And now the area I want to focus


513
00:23:48,876 --> 00:23:50,906
on is this big CPU
spike right here.


514
00:23:51,256 --> 00:23:53,946
And here I'm seeing
well over 100% CPU.


515
00:23:54,236 --> 00:23:55,656
So there's probably
an opportunity


516
00:23:55,656 --> 00:23:56,886
for optimization here.


517
00:23:57,396 --> 00:23:58,906
And I happen to know,
this is also


518
00:23:58,906 --> 00:24:00,906
when I'm adding my
eyes to the image.


519
00:24:01,506 --> 00:24:04,596
So again, I'm going to just
zoom in using the trackpad.


520
00:24:05,426 --> 00:24:08,326
I'm going to go ahead and click
and drag to apply a filter.


521
00:24:09,536 --> 00:24:12,546
Now if we look at the call
tree, this time I want


522
00:24:12,606 --> 00:24:15,986
to specifically focus on what
the main thread is doing.


523
00:24:16,446 --> 00:24:20,056
I can see here that actually,
my main thread is showing up in


524
00:24:20,056 --> 00:24:22,666
about 63%, 64% of my samples.


525
00:24:23,516 --> 00:24:25,526
And so I know that
during this time,


526
00:24:25,526 --> 00:24:27,756
it's clearly doing some work.


527
00:24:28,236 --> 00:24:30,756
But I want to know exactly
how much work it's doing.


528
00:24:31,576 --> 00:24:34,426
And to do that, I'm going
to go ahead and up here


529
00:24:34,426 --> 00:24:35,716
in the upper right-hand corner,


530
00:24:36,026 --> 00:24:37,866
we have what we call
the different strategies


531
00:24:37,866 --> 00:24:38,776
and Instruments.


532
00:24:38,876 --> 00:24:42,306
So you can view your data,
either per CPU or per thread.


533
00:24:42,736 --> 00:24:44,496
This time I want to look
at the data per thread.


534
00:24:44,496 --> 00:24:47,186
And I can actually see, if I
make this a little bit bigger,


535
00:24:48,166 --> 00:24:50,056
that over here on the left,


536
00:24:50,366 --> 00:24:52,116
you can see all the
threads in my app.


537
00:24:52,646 --> 00:24:54,106
And the main thread
is at the top.


538
00:24:54,666 --> 00:24:56,686
And so I can actually
see the CPU usage


539
00:24:56,736 --> 00:24:58,396
on just the main thread.


540
00:24:58,936 --> 00:25:01,916
And here, clearly, it's
getting up to 100%.


541
00:25:02,286 --> 00:25:03,886
And when it's in that state,


542
00:25:03,886 --> 00:25:06,046
it absolutely can't
respond to user events.


543
00:25:06,046 --> 00:25:08,156
There's no way it's going
to be able to handle things


544
00:25:08,156 --> 00:25:11,046
on the queue if it's busy
doing the work in my app.


545
00:25:12,046 --> 00:25:14,386
So what work is it doing
on the main thread exactly?


546
00:25:14,966 --> 00:25:16,606
This time, I'm going
go ahead and click


547
00:25:16,606 --> 00:25:19,266
on our extended detail view
over here on the right.


548
00:25:19,756 --> 00:25:22,636
And this is going to show me my
call stack that's doing the most


549
00:25:22,636 --> 00:25:24,266
work on my main thread.


550
00:25:24,476 --> 00:25:27,376
Because my main thread is what's
selected over on the left.


551
00:25:27,376 --> 00:25:28,596
So I scroll through here,


552
00:25:28,596 --> 00:25:31,046
I can see again here's
the run loop stuff.


553
00:25:31,046 --> 00:25:32,736
And then here we
actually get to my code.


554
00:25:33,146 --> 00:25:35,356
And this is the code where
it's adding the eyes.


555
00:25:35,836 --> 00:25:38,356
And then doing some
more add eyes work.


556
00:25:38,356 --> 00:25:40,016
And then here it's
calling Find Faces.


557
00:25:40,016 --> 00:25:42,356
So that's the face detection
code in my application.


558
00:25:42,356 --> 00:25:44,916
And then we can actually see the
next line is actually calling


559
00:25:44,916 --> 00:25:45,726
into Core Image.


560
00:25:45,786 --> 00:25:48,326
If I go ahead and click on
this in the Detail view,


561
00:25:48,326 --> 00:25:53,216
it'll expand the call
tree to that line.


562
00:25:53,266 --> 00:25:55,546
Now again, reasoning
about my code.


563
00:25:55,546 --> 00:25:56,696
There's no reason for me


564
00:25:56,696 --> 00:26:00,306
to do face detection
on the main thread.


565
00:26:00,456 --> 00:26:02,986
It's not a responding
to user input thing.


566
00:26:02,986 --> 00:26:04,746
And it's not an updating
views thing.


567
00:26:05,146 --> 00:26:07,166
So this can easily be moved
to a background thread.


568
00:26:07,706 --> 00:26:11,686
So here's my code that
does the face detection.


569
00:26:11,686 --> 00:26:14,826
And I can see once the face
detection is done, it goes ahead


570
00:26:14,826 --> 00:26:16,516
and calls the displayEyes
method.


571
00:26:16,516 --> 00:26:18,336
Now an important
thing to note here is


572
00:26:18,336 --> 00:26:20,956
that displayEyes is
actually updating my UI.


573
00:26:20,956 --> 00:26:24,026
So that's work that has to
happen on the main thread.


574
00:26:24,806 --> 00:26:27,776
So what I need to do
is do my face detection


575
00:26:27,776 --> 00:26:28,656
on a background thread.


576
00:26:29,036 --> 00:26:30,686
Switch back to the main thread.


577
00:26:32,236 --> 00:26:33,456
In order to update my UI.


578
00:26:35,106 --> 00:26:36,476
Oh, there we go.


579
00:26:36,746 --> 00:26:38,836
Okay [applause] thank
you [applause].


580
00:26:41,176 --> 00:26:43,616
That's not supposed to be
the applause line [laughter],


581
00:26:43,956 --> 00:26:44,916
but I'll take it.


582
00:26:45,566 --> 00:26:46,586
So here we go.


583
00:26:46,586 --> 00:26:48,456
Here's my code that does
this on the background.


584
00:26:48,456 --> 00:26:51,176
I'm going to very
quickly talk about this.


585
00:26:51,596 --> 00:26:54,226
So we go ahead and we get
one of our background queues.


586
00:26:54,226 --> 00:26:57,126
And we dispatch our
find faces code to it.


587
00:26:57,506 --> 00:26:59,496
Then just like I said,
we're going to dispatch back


588
00:26:59,496 --> 00:27:01,736
to the main queue,
and update our UI.


589
00:27:02,626 --> 00:27:05,916
This time to do my
profiling, I'm going to hold


590
00:27:05,916 --> 00:27:08,386
on the Run menu,
and choose Profile.


591
00:27:09,126 --> 00:27:10,226
This will do the same thing.


592
00:27:10,766 --> 00:27:13,146
Hopefully rather quickly.


593
00:27:13,246 --> 00:27:15,096
Oh, I deleted my code.


594
00:27:16,126 --> 00:27:17,316
Let's do that again.


595
00:27:17,616 --> 00:27:19,916
So now since I've already done
it, I can just go ahead and --


596
00:27:20,806 --> 00:27:23,686
is it going to be happy --
click the Profile button.


597
00:27:24,006 --> 00:27:24,516
There we go.


598
00:27:25,046 --> 00:27:26,956
It's going to build
my application.


599
00:27:28,096 --> 00:27:29,536
Install it to the device.


600
00:27:30,406 --> 00:27:33,226
Okay. Now Instruments
should show up


601
00:27:33,706 --> 00:27:38,986
and start recording
my application.


602
00:27:39,606 --> 00:27:43,066
Oh, so I'm going to go
ahead and switch back


603
00:27:43,066 --> 00:27:44,036
to the Instruments view.


604
00:27:48,186 --> 00:27:53,776
And then let's zoom out so we
can see the data coming in.


605
00:27:53,986 --> 00:27:58,666
Okay. Very quickly, let's
add some photos to my app.


606
00:28:00,656 --> 00:28:03,846
And then let's do
the eye detection.


607
00:28:04,586 --> 00:28:05,286
So there we go.


608
00:28:05,286 --> 00:28:07,196
So there I can see
my big CPU spike.


609
00:28:08,066 --> 00:28:09,606
Let's go ahead and
stop the recording.


610
00:28:10,666 --> 00:28:13,036
And now let's see if this
made the changes I expected.


611
00:28:13,366 --> 00:28:17,646
So again, I'm going to
zoom in on this area


612
00:28:17,646 --> 00:28:19,046
of the graph using a trackpad.


613
00:28:19,966 --> 00:28:21,546
I'm going to click and drag


614
00:28:22,056 --> 00:28:24,416
across the Timeline
view to apply a filter.


615
00:28:25,286 --> 00:28:27,386
Now, if we go ahead and look
at our call tree this time,


616
00:28:27,806 --> 00:28:30,996
actually what I see here
now, the main thread is only


617
00:28:30,996 --> 00:28:32,746
in 4.8% of my samples.


618
00:28:32,796 --> 00:28:33,926
So that's a really good sign.


619
00:28:33,926 --> 00:28:35,976
I already know my main
thread is doing less work.


620
00:28:36,116 --> 00:28:38,426
And those two worker threads
are doing much more of the work.


621
00:28:38,956 --> 00:28:41,676
So let's go ahead and switch
to the thread strategy.


622
00:28:42,296 --> 00:28:45,396
And now I can see here, my main
thread is actually completely


623
00:28:45,396 --> 00:28:51,386
free for the vast majority
of this time, thank you.


624
00:28:52,516 --> 00:28:55,546
[ Applause ]


625
00:28:56,046 --> 00:28:57,496
So let's go ahead and
go back to the slides,


626
00:28:58,776 --> 00:29:00,166
and talk about what
we've just done.


627
00:29:01,306 --> 00:29:03,866
So in order to make my
application more responsive,


628
00:29:04,746 --> 00:29:08,716
I've found an area where the
CPU was being used a lot.


629
00:29:08,716 --> 00:29:10,116
And I went ahead and zoomed in


630
00:29:10,116 --> 00:29:12,426
and applied a filter
it's a common theme here.


631
00:29:13,636 --> 00:29:17,116
I focused on the main
thread, because I wanted


632
00:29:17,116 --> 00:29:21,236
to make sure my app
continued to be responsive.


633
00:29:21,756 --> 00:29:23,686
I identified some work
that we were doing


634
00:29:23,686 --> 00:29:25,636
on the main thread
that wasn't UI work.


635
00:29:26,236 --> 00:29:28,796
So I went ahead and moved
that to a background thread.


636
00:29:29,586 --> 00:29:31,636
Once again you can probably
guess the next step.


637
00:29:32,026 --> 00:29:33,526
I verified my changes.


638
00:29:33,946 --> 00:29:38,016
Made sure the app was behaving
as I now expected it to.


639
00:29:38,016 --> 00:29:41,846
And as a result, I got a
much better user experience.


640
00:29:41,846 --> 00:29:44,976
My user interface will remain
responsive while I'm doing my


641
00:29:44,976 --> 00:29:45,796
face detection.


642
00:29:46,336 --> 00:29:47,156
Which is really great.


643
00:29:47,706 --> 00:29:50,556
A couple notes regarding
optimization.


644
00:29:50,906 --> 00:29:53,136
The fixes we made today
were relatively simple,


645
00:29:53,246 --> 00:29:55,146
but they did add
complexity to our app.


646
00:29:55,616 --> 00:29:57,586
And in general, the practice


647
00:29:57,586 --> 00:30:01,266
of optimization is trading
simplicity for performance.


648
00:30:02,346 --> 00:30:06,206
But fortunately, because
I did my profiling early


649
00:30:06,206 --> 00:30:09,266
in my development cycle I
didn't wait to the very end.


650
00:30:09,356 --> 00:30:12,696
I now have time to verify


651
00:30:12,696 --> 00:30:14,796
that my app continues
to behave correctly.


652
00:30:15,266 --> 00:30:16,756
I can add additional unit tests


653
00:30:16,756 --> 00:30:18,856
if I think that's
necessary or UI tests.


654
00:30:19,196 --> 00:30:21,036
And focus on where
I added complexity,


655
00:30:21,036 --> 00:30:22,246
and make sure it still works.


656
00:30:22,916 --> 00:30:27,196
Just before you're about to ship
the app is the very last time


657
00:30:27,196 --> 00:30:29,506
you want to be adding
complexity to it.


658
00:30:29,786 --> 00:30:32,036
So the real takeaway
here, is that it pays


659
00:30:32,406 --> 00:30:34,636
to profile your app
continuously.


660
00:30:34,636 --> 00:30:36,726
Especially after you
add new functionality.


661
00:30:37,126 --> 00:30:38,726
And profile early.


662
00:30:38,906 --> 00:30:41,596
And then profile it
ongoing on an ongoing basis.


663
00:30:42,236 --> 00:30:44,096
And sometimes, just
running time profiling


664
00:30:44,096 --> 00:30:45,256
and seeing what you can find,


665
00:30:45,256 --> 00:30:47,246
you can find a really
big win quickly.


666
00:30:47,916 --> 00:30:50,036
So it pays just to
run it and see


667
00:30:50,036 --> 00:30:52,696
if there's anything
interesting going on.


668
00:30:52,696 --> 00:30:55,426
Some best practices about
using Time Profiler.


669
00:30:55,736 --> 00:30:59,216
The general overview here is
that you want to be profiling


670
00:30:59,456 --> 00:31:02,166
as close as you can to what
your customers will be running.


671
00:31:02,316 --> 00:31:05,206
So you always want to
profile release builds.


672
00:31:05,736 --> 00:31:09,106
Not only do you want the
optimizations from the compiler,


673
00:31:09,106 --> 00:31:11,366
but release builds are what your
customers are going to be using.


674
00:31:11,826 --> 00:31:14,606
You always want to
profile on the device.


675
00:31:14,686 --> 00:31:15,966
The simulator is not going


676
00:31:15,966 --> 00:31:18,036
to give you useful
data to work with.


677
00:31:19,296 --> 00:31:25,336
Profile on the oldest, slowest
devices you intend to support.


678
00:31:25,336 --> 00:31:27,666
A pretty good rule is, if
you can make it run well


679
00:31:27,666 --> 00:31:29,996
on slower devices; you
get it running well


680
00:31:29,996 --> 00:31:31,506
on faster devices for free.


681
00:31:31,896 --> 00:31:33,416
And you want all of your users


682
00:31:33,416 --> 00:31:35,256
to have a great experience
using your app.


683
00:31:35,716 --> 00:31:37,286
Even the ones on slower devices.


684
00:31:38,206 --> 00:31:40,786
And use large data sets
where it makes sense.


685
00:31:40,986 --> 00:31:43,976
In my case, you know, sometimes
users have tens of thousands


686
00:31:43,976 --> 00:31:46,936
or hundreds of thousands or
a hundred thousand photos


687
00:31:46,936 --> 00:31:48,046
in their photos collection.


688
00:31:48,436 --> 00:31:50,816
It's important that I
profile how my app behaves


689
00:31:50,816 --> 00:31:52,316
under those circumstances.


690
00:31:52,756 --> 00:31:54,456
So I can make sure it runs well


691
00:31:54,456 --> 00:31:56,706
as my customers will
be running it.


692
00:31:57,336 --> 00:32:02,486
So, to wrap everything up,
if you want your customers


693
00:32:02,486 --> 00:32:06,416
to love using your app because
it helps save them time.


694
00:32:07,306 --> 00:32:09,876
It helps them achieve
all-day battery life.


695
00:32:10,266 --> 00:32:14,296
And your UI is really
responsive, then what you need


696
00:32:14,296 --> 00:32:18,406
to do is profile early
and profile often.


697
00:32:19,076 --> 00:32:23,126
If you want more information,
you can go to this URL.


698
00:32:24,156 --> 00:32:27,236
Here are some related -- oh,
here are some related sessions.


699
00:32:27,586 --> 00:32:29,896
Last year we did a session
called Profiling in Depth.


700
00:32:30,096 --> 00:32:32,216
Which goes into more detail
about the Time Profiler,


701
00:32:32,216 --> 00:32:33,016
if you want to know more.


702
00:32:33,476 --> 00:32:35,166
And then this year we
did a sequel to that,


703
00:32:35,166 --> 00:32:36,386
System Trace in Depth.


704
00:32:36,386 --> 00:32:38,366
Which is how you can use
the System Trace instrument


705
00:32:38,366 --> 00:32:41,186
in situations where Time
Profiler's not helping you.


706
00:32:41,626 --> 00:32:43,676
Thank you, and have
a good afternoon.


707
00:32:44,516 --> 00:32:47,500
[ Applause ]

