1
00:00:12,576 --> 00:00:13,566
>> Good morning everybody.


2
00:00:13,706 --> 00:00:14,386
Thanks for coming.


3
00:00:15,506 --> 00:00:20,076
Welcome to Creating Extensions
for iOS and OS X, Part Two.


4
00:00:20,186 --> 00:00:20,896
I'm Damien.


5
00:00:21,566 --> 00:00:22,986
I'm from Core OS.


6
00:00:23,536 --> 00:00:26,566
And we apparently have a user
facing feature this year.


7
00:00:27,516 --> 00:00:33,276
[ Cheers and Applause ]


8
00:00:33,776 --> 00:00:35,916
Glad to see everybody's
excited about Extensions.


9
00:00:35,916 --> 00:00:36,856
Let's dive right in.


10
00:00:39,516 --> 00:00:41,936
So before we talk about
what an extension is,


11
00:00:42,176 --> 00:00:44,686
let's talk a little bit
about what an app is


12
00:00:45,076 --> 00:00:46,966
and why Extensions
are different.


13
00:00:47,966 --> 00:00:52,386
So for an app, it's still in
iOS 8, even with Extensions,


14
00:00:52,686 --> 00:00:55,066
is the most important
experience to the user.


15
00:00:55,596 --> 00:00:58,036
On iOS, the app owns
the entire screen.


16
00:00:58,176 --> 00:01:02,586
On OS X, the cursor focus
goes to the front-most app.


17
00:01:02,586 --> 00:01:06,176
This is still the number
one priority for our users.


18
00:01:07,016 --> 00:01:09,756
And on iOS, apps are
completely managed


19
00:01:09,756 --> 00:01:11,316
by the user via the App Store.


20
00:01:11,416 --> 00:01:14,716
And OS X the user can drag them
to the trash, move them around.


21
00:01:14,766 --> 00:01:17,396
Apps are entirely
managed by the user.


22
00:01:17,936 --> 00:01:19,926
So what about Extensions?


23
00:01:21,416 --> 00:01:24,376
So Extensions are
important to the user.


24
00:01:24,776 --> 00:01:27,356
But they're not more
important than the current app.


25
00:01:27,936 --> 00:01:30,546
They are there to augment
the app's experience.


26
00:01:31,396 --> 00:01:33,406
And rather than directly
managing them,


27
00:01:33,856 --> 00:01:36,206
Extensions come and
go with apps.


28
00:01:36,276 --> 00:01:38,686
So the user isn't
going to be purchasing


29
00:01:39,036 --> 00:01:41,186
or installing individual
Extensions.


30
00:01:41,506 --> 00:01:44,806
They're going to be getting
those Extensions with the apps


31
00:01:44,846 --> 00:01:46,326
that they download
from the store.


32
00:01:46,846 --> 00:01:51,496
So Extensions are
built separately.


33
00:01:51,776 --> 00:01:54,376
They are a separate
target in XCode.


34
00:01:54,836 --> 00:01:57,796
So we have this new
section in XCode


35
00:01:57,796 --> 00:01:59,856
for app extension
template targets.


36
00:02:00,766 --> 00:02:02,386
So when you want to
create an extension,


37
00:02:02,466 --> 00:02:05,506
you're getting a new
piece of code in your app


38
00:02:05,546 --> 00:02:08,276
that is actually
a separate bundle


39
00:02:08,376 --> 00:02:10,446
and admits a separate
executable.


40
00:02:10,976 --> 00:02:17,256
And with that executable comes
a distinct set of entitlements.


41
00:02:17,336 --> 00:02:20,336
And when we have a separate
executable with its distinct


42
00:02:20,336 --> 00:02:23,346
of entitlements on disk, that
allows the operating system


43
00:02:23,346 --> 00:02:27,786
to know that these two things,
the app and the extension,


44
00:02:27,876 --> 00:02:29,276
are different entities.


45
00:02:31,356 --> 00:02:35,026
And with that, you're
getting a different process.


46
00:02:35,166 --> 00:02:38,796
So an extension is running
in an isolated address space


47
00:02:38,796 --> 00:02:42,176
from your app and it executes
completely independently.


48
00:02:43,246 --> 00:02:47,846
So this means that the system,
even if your app is not running,


49
00:02:47,876 --> 00:02:49,786
can still fire up
your extension,


50
00:02:50,056 --> 00:02:51,516
even if your app is suspended.


51
00:02:51,516 --> 00:02:55,546
That doesn't affect any of your
Extensions running for the user.


52
00:02:56,166 --> 00:02:58,876
And because of this, the
system can optimize each


53
00:02:58,876 --> 00:03:00,346
experience separately.


54
00:03:01,186 --> 00:03:05,126
So we can schedule them, and
even if the app goes away,


55
00:03:05,306 --> 00:03:07,586
your extension still
sticks around.


56
00:03:08,296 --> 00:03:11,436
So here's an example
of an extension


57
00:03:11,866 --> 00:03:13,396
and what the user might do


58
00:03:13,646 --> 00:03:15,666
to invoke your extension
and its UI.


59
00:03:16,646 --> 00:03:19,786
Here we just have a
little network thing.


60
00:03:20,386 --> 00:03:22,266
So it's a new social
networking app.


61
00:03:22,266 --> 00:03:24,896
And it's bundling a
social sharing extension.


62
00:03:25,226 --> 00:03:29,986
So we see it in the far right
there with the purple icon.


63
00:03:30,456 --> 00:03:34,806
And I go to this site and I want
to share this with my friends


64
00:03:34,806 --> 00:03:36,276
on my new social network.


65
00:03:36,656 --> 00:03:40,366
So the user will see an
icon representing my app.


66
00:03:40,366 --> 00:03:44,596
But what that means is that I'm
going to be using the extension


67
00:03:44,596 --> 00:03:46,906
for social sharing
vended by that app.


68
00:03:47,736 --> 00:03:52,546
So in previous releases of iOS
we've been able to do this,


69
00:03:52,546 --> 00:03:56,016
but the Facebook and the
Twitter experiences, et cetera,


70
00:03:56,016 --> 00:03:57,986
have all been provided by Apple.


71
00:03:59,456 --> 00:04:01,476
Now we're letting
anyone who wants


72
00:04:01,476 --> 00:04:04,356
to provide a social sharing
extension not only provide it


73
00:04:04,356 --> 00:04:05,956
but define their own experience.


74
00:04:06,796 --> 00:04:11,136
So in this case, when
the user elects to share,


75
00:04:11,136 --> 00:04:16,136
they're getting a window that
is designed by the developer


76
00:04:16,136 --> 00:04:20,146
of this social networking app
with whatever experience --


77
00:04:20,976 --> 00:04:24,536
whatever experience that app
developer wants to provide.


78
00:04:25,486 --> 00:04:26,816
So that's a high level


79
00:04:26,816 --> 00:04:31,236
of how Extensions are
architected on our system.


80
00:04:31,486 --> 00:04:32,616
Let's talk a little bit


81
00:04:32,616 --> 00:04:36,816
about how we actually extend
the experience of your app


82
00:04:36,816 --> 00:04:40,046
and project it into other
parts of the system.


83
00:04:40,796 --> 00:04:43,286
So as we saw yesterday
in Part One,


84
00:04:43,796 --> 00:04:46,666
Extensions are a very
focused experience.


85
00:04:47,116 --> 00:04:49,216
And the operating
system takes care


86
00:04:49,216 --> 00:04:52,336
of seamlessly merging the
experience that you provide


87
00:04:52,806 --> 00:04:55,126
in your extension
with the current app


88
00:04:55,376 --> 00:04:59,276
or just whatever the
current system UI is.


89
00:05:00,266 --> 00:05:03,236
So you guys are going
to want to provide code


90
00:05:03,236 --> 00:05:05,716
to make the experience your own.


91
00:05:05,946 --> 00:05:09,076
And that's going to almost
certainly mean that you're going


92
00:05:09,076 --> 00:05:12,306
to want to re-use at least
some of the code from your app.


93
00:05:14,276 --> 00:05:18,546
So we hope you've been using the
Model View Controller paradigm.


94
00:05:18,546 --> 00:05:21,716
Features like Extensions
are exactly why we


95
00:05:21,946 --> 00:05:24,016
so desperately encourage
you guys


96
00:05:24,016 --> 00:05:26,286
to adopt this design
pattern year after year,


97
00:05:26,816 --> 00:05:29,546
because chances are with your
extension, you're going to want


98
00:05:29,546 --> 00:05:32,846
to share at least the data
model and probably some


99
00:05:32,846 --> 00:05:34,406
of the View Controller
layers, too.


100
00:05:35,256 --> 00:05:39,386
You probably don't want to
share the view of your app


101
00:05:39,456 --> 00:05:42,006
because your app is
designed around taking


102
00:05:42,006 --> 00:05:44,366
up the whole screen whereas
your extension will not.


103
00:05:44,846 --> 00:05:46,946
But that's only one-third
of your code.


104
00:05:46,946 --> 00:05:47,436
You don't want to have


105
00:05:47,476 --> 00:05:49,536
to rewrite the entire
two-thirds of it.


106
00:05:49,796 --> 00:05:52,346
You want to be able to
share code between the two.


107
00:05:52,826 --> 00:05:59,866
And if only computer science
had come up with a way


108
00:06:00,356 --> 00:06:04,216
to allow the same code to exist
in two processes without having


109
00:06:04,216 --> 00:06:06,256
to duplicate those code pages.


110
00:06:06,806 --> 00:06:10,296
I think we might have
a solution to this.


111
00:06:11,096 --> 00:06:13,046
And I think that
solution's called Frameworks.


112
00:06:14,096 --> 00:06:20,476
So, on iOS, in iOS 8, we're now
allowing you to ship Frameworks


113
00:06:20,476 --> 00:06:21,446
within your app bundle.


114
00:06:22,516 --> 00:06:28,016
[ Applause ]


115
00:06:28,516 --> 00:06:29,546
Don't get too excited.


116
00:06:31,786 --> 00:06:35,706
So this is obviously new to iOS,
but you've been able to do this


117
00:06:35,706 --> 00:06:39,386
on OS X since the dawn of time.


118
00:06:40,106 --> 00:06:42,146
But it's a brand new
capability to iOS.


119
00:06:42,146 --> 00:06:46,486
And what we're doing with it
is we're also encrypting the


120
00:06:46,486 --> 00:06:48,926
frameworks that you
ship in your app bundle


121
00:06:49,266 --> 00:06:53,896
with the same encryption
that your apps are encrypted


122
00:06:53,896 --> 00:06:57,026
with to give you that
same level of protection


123
00:06:57,026 --> 00:07:04,366
against piracy and
-- well, piracy.


124
00:07:04,906 --> 00:07:06,726
[Laughter] So it's
critical to note


125
00:07:06,726 --> 00:07:11,336
that these frameworks are not
general code sharing mechanisms.


126
00:07:11,336 --> 00:07:13,616
So you're not going
to have many apps


127
00:07:13,616 --> 00:07:16,196
on the system referencing
the same copy of a framework.


128
00:07:16,626 --> 00:07:20,566
These frameworks are here to
facilitate sharing between


129
00:07:20,566 --> 00:07:22,546
and an app and all
of its Extensions.


130
00:07:22,896 --> 00:07:28,896
So the code that that framework
contains can be used by the app


131
00:07:28,896 --> 00:07:30,656
or any of the Extensions
it bundles,


132
00:07:30,906 --> 00:07:32,636
but nothing else on the system.


133
00:07:35,296 --> 00:07:37,906
So when you use -- when
you bundle a framework


134
00:07:37,906 --> 00:07:40,416
with your app, there
are some implications


135
00:07:40,496 --> 00:07:42,196
for your minimum
deployment target.


136
00:07:43,076 --> 00:07:45,116
If your app links the framework,


137
00:07:45,266 --> 00:07:47,526
we're going to change its
minimum deployment target


138
00:07:47,526 --> 00:07:49,476
to iOS 8 because
as I said before,


139
00:07:49,476 --> 00:07:51,176
we're encrypting
these frameworks.


140
00:07:51,176 --> 00:07:54,226
And previous versions of the
operating system don't know


141
00:07:54,226 --> 00:07:56,286
about how to decrypt
them when you use them.


142
00:07:56,976 --> 00:07:59,506
However, if you're
just shipping your app


143
00:07:59,506 --> 00:08:01,616
and then there's a few
Extensions you have


144
00:08:01,616 --> 00:08:03,216
that all link in a framework,


145
00:08:03,706 --> 00:08:06,436
your app's minimum deployment
target doesn't change at all.


146
00:08:07,646 --> 00:08:10,266
Your extension functionality
obviously won't be available


147
00:08:10,266 --> 00:08:14,466
to previous versions of iOS,
but the app will still be able


148
00:08:14,466 --> 00:08:16,086
to run without any problems.


149
00:08:17,826 --> 00:08:23,036
So that's a very brief overview
of embedded frameworks on iOS.


150
00:08:23,306 --> 00:08:27,916
To learn more, I encourage you
to go to the session tomorrow


151
00:08:27,916 --> 00:08:31,326
at 3:15 in Presidio,
Building Modern Frameworks,


152
00:08:32,385 --> 00:08:37,655
where it'll cover API usage,
how to write a good framework,


153
00:08:37,655 --> 00:08:39,626
how to bundle it,
all that good stuff.


154
00:08:39,976 --> 00:08:42,246
But for now, you've
got Frameworks.


155
00:08:43,086 --> 00:08:46,446
And it seems like you
guys are excited about it.


156
00:08:47,366 --> 00:08:51,926
So, another topic for code
sharing is API availability.


157
00:08:52,156 --> 00:08:53,776
If you're writing one
of these frameworks,


158
00:08:53,776 --> 00:08:55,156
or if you're bundling
one of these frameworks,


159
00:08:55,926 --> 00:08:58,836
what code are you
going to be using


160
00:08:58,836 --> 00:09:00,536
between your app
and your extension?


161
00:09:03,236 --> 00:09:07,346
So, the vast majority of our
API is going to be available


162
00:09:07,346 --> 00:09:08,776
for Extensions to use.


163
00:09:08,936 --> 00:09:10,866
But there are going
to be some exceptions.


164
00:09:11,246 --> 00:09:13,676
And these exceptions are
going to be marked explicitly


165
00:09:13,676 --> 00:09:16,336
with a new kind of
unavailability macro.


166
00:09:16,376 --> 00:09:19,486
And here's an example
of what that looks like.


167
00:09:20,566 --> 00:09:24,116
So, UIApplication --
or with UIApplication,


168
00:09:24,116 --> 00:09:27,156
the shared application method
has been explicitly marked


169
00:09:27,156 --> 00:09:28,176
as unavailable.


170
00:09:28,606 --> 00:09:32,276
And the UIKit folks have
helpfully provided an error


171
00:09:32,276 --> 00:09:34,956
message that says: Use a view
controller based solution


172
00:09:34,956 --> 00:09:35,626
where appropriate.


173
00:09:35,896 --> 00:09:37,946
I'm in Core OS, no
idea what that means.


174
00:09:38,156 --> 00:09:39,566
But I'm sure you
guys have an idea.


175
00:09:41,456 --> 00:09:44,776
Now, if you're dropping down
to Super [inaudible] API


176
00:09:45,006 --> 00:09:46,926
that has underscores,
there's going


177
00:09:46,926 --> 00:09:49,626
to be a corresponding
availability macro there


178
00:09:49,626 --> 00:09:52,536
that is evaluated the
same way by the tools


179
00:09:52,536 --> 00:09:57,026
and will generate the
same errors at build time.


180
00:09:57,236 --> 00:09:59,546
So that's unavailability.


181
00:09:59,776 --> 00:10:01,466
Like I said, the vast majority


182
00:10:01,466 --> 00:10:03,916
of cases you probably won't
need to worry about it.


183
00:10:04,296 --> 00:10:08,406
But if you do trip across
an API use in your extension


184
00:10:08,406 --> 00:10:11,066
that is not allowed, you'll
know as soon as possible


185
00:10:11,066 --> 00:10:13,816
at build time before you
can even run the extension.


186
00:10:14,406 --> 00:10:17,436
So that's how you share code


187
00:10:17,436 --> 00:10:19,756
with your extension
and your app.


188
00:10:20,736 --> 00:10:22,476
But at run time you're
going to want


189
00:10:22,546 --> 00:10:24,926
to create a consistent
experience, too.


190
00:10:26,206 --> 00:10:31,426
And a consistent experience
often means sharing the same set


191
00:10:31,426 --> 00:10:35,146
of resources and making sure
that changes the user has made


192
00:10:35,146 --> 00:10:37,986
to their data in your
extension are reflected


193
00:10:37,986 --> 00:10:40,426
in the app the next time
they see it, or vice versa.


194
00:10:41,816 --> 00:10:44,166
So we have a few data
sharing solutions


195
00:10:44,166 --> 00:10:45,396
for you for Extensions.


196
00:10:46,336 --> 00:10:50,386
So the first thing
to understand is


197
00:10:50,386 --> 00:10:53,576
that an extension has
a separate container


198
00:10:53,576 --> 00:10:54,966
from its app by default.


199
00:10:54,966 --> 00:10:59,336
It's just like how two apps
are segregated from each other.


200
00:10:59,336 --> 00:11:01,266
They don't have access
to each other's data.


201
00:11:02,036 --> 00:11:03,776
But for any extension
you bundle,


202
00:11:03,776 --> 00:11:06,526
you can opt to share
specific bits of data


203
00:11:06,566 --> 00:11:09,436
that will help you provide
that consistent experience


204
00:11:09,436 --> 00:11:11,056
that all of our users expect.


205
00:11:11,156 --> 00:11:16,676
And you can do this with what's
called a shared container.


206
00:11:17,456 --> 00:11:22,846
So this is based on a new
concept called an App Group.


207
00:11:23,156 --> 00:11:27,356
And this provides a shared
storage area for kind


208
00:11:27,356 --> 00:11:31,166
of just general data sharing
between your app your extension.


209
00:11:31,476 --> 00:11:34,896
So if you have some custom
data models or custom databases


210
00:11:35,246 --> 00:11:36,916
that your app and your
extension need to use,


211
00:11:37,296 --> 00:11:40,946
this is a good place to put
those files and access them.


212
00:11:41,556 --> 00:11:43,286
However, you have to remember


213
00:11:43,286 --> 00:11:47,446
that there's nothing stopping
your extension and your app


214
00:11:47,626 --> 00:11:49,056
from running at the same time.


215
00:11:49,266 --> 00:11:51,766
Your app may be in a
long-running background task.


216
00:11:52,006 --> 00:11:53,876
It may not have been
suspended yet.


217
00:11:54,046 --> 00:11:58,546
And it might be writing some
data to that shared container.


218
00:11:58,546 --> 00:12:00,816
And then the user might
bring up your extension.


219
00:12:01,236 --> 00:12:02,766
So what this means is
that you have to make sure


220
00:12:02,766 --> 00:12:04,966
to safely coordinate
all the reads


221
00:12:04,966 --> 00:12:06,156
and writes for those files.


222
00:12:06,156 --> 00:12:08,096
You have to make sure that
you only write to the file


223
00:12:08,666 --> 00:12:10,616
when there are no
readers contending for it.


224
00:12:10,776 --> 00:12:13,086
And that you're only
reading when the file is


225
00:12:13,086 --> 00:12:14,606
in a consistent state.


226
00:12:18,536 --> 00:12:20,656
Otherwise, you're going
to blow up your file,


227
00:12:20,886 --> 00:12:22,086
or it's just going
to get corrupted.


228
00:12:22,266 --> 00:12:25,726
So we introduce some sort of
synchronization scheme here


229
00:12:26,726 --> 00:12:29,796
so that if the extension
writes, it holds off the app.


230
00:12:29,796 --> 00:12:31,946
And if the app writes, it
holds off the extension.


231
00:12:31,946 --> 00:12:34,606
And they're both dealing with a
consistent view of the universe.


232
00:12:35,336 --> 00:12:36,936
And here are a few of
those technologies.


233
00:12:38,276 --> 00:12:41,176
The first one is
NSFileCoordination,


234
00:12:41,386 --> 00:12:44,436
which kind of provides a general
inner process synchronization


235
00:12:44,436 --> 00:12:47,706
strategy for your
extension and --


236
00:12:48,646 --> 00:12:51,226
for your extension and your app.


237
00:12:51,676 --> 00:12:54,896
If you're using CoreData, you
can get a lot of this for free.


238
00:12:54,896 --> 00:12:57,396
There are certain
CoreData backing stores


239
00:12:57,396 --> 00:12:59,986
that are documented
as being usable


240
00:12:59,986 --> 00:13:01,796
for multiple processes
at the same time.


241
00:13:02,316 --> 00:13:05,196
And sqLite also makes
some of these guarantees.


242
00:13:05,496 --> 00:13:07,926
So if you're using one of
those two technologies,


243
00:13:08,156 --> 00:13:09,346
chances are you're already set.


244
00:13:09,346 --> 00:13:12,136
But if you have something more
custom, you're going to want


245
00:13:12,136 --> 00:13:13,416
to use NSFileCoordination.


246
00:13:15,406 --> 00:13:19,206
But if you're talking about more
structured data that is, say,


247
00:13:19,206 --> 00:13:22,346
vended by Apple's APIs
like NSUserDefaults,


248
00:13:23,696 --> 00:13:25,616
you can end up sharing
much more easily.


249
00:13:26,396 --> 00:13:29,326
So, an app and its
extension both have different


250
00:13:29,326 --> 00:13:30,576
defaults domains.


251
00:13:30,876 --> 00:13:32,686
But you can set up
a shared domain


252
00:13:33,166 --> 00:13:35,766
with the initWithSuiteName API.


253
00:13:36,016 --> 00:13:40,306
And you create this suite, and
the API manages access to it


254
00:13:40,366 --> 00:13:43,316
for your app and your extension
so that you don't have to worry


255
00:13:43,316 --> 00:13:46,226
about making sure that
you're not writing


256
00:13:46,226 --> 00:13:47,436
to that backing store


257
00:13:47,666 --> 00:13:49,286
when someone else is
trying to read from it.


258
00:13:49,466 --> 00:13:51,606
The API coordinates
all of that for you.


259
00:13:51,816 --> 00:13:54,156
And this is a really
easy way for, say,


260
00:13:54,326 --> 00:13:57,276
the user to modify
some setting in the app


261
00:13:57,276 --> 00:14:01,826
which then the extension can
pick up on its next invocation.


262
00:14:02,356 --> 00:14:06,186
There's a similar
story for keychains.


263
00:14:06,516 --> 00:14:09,286
So the shared keychain
is based on an app group.


264
00:14:09,686 --> 00:14:15,956
And the app group can
encompass a few apps


265
00:14:15,956 --> 00:14:17,336
as well as your Extensions.


266
00:14:17,876 --> 00:14:21,356
So by default, as I
said, the extension


267
00:14:21,356 --> 00:14:22,896
and the app have a
different keychain.


268
00:14:23,236 --> 00:14:26,466
But you can set up a shared
keychain with an access group.


269
00:14:27,586 --> 00:14:31,196
There's an issue right
now in the first beta


270
00:14:31,196 --> 00:14:33,166
where this is actually
team ID-based.


271
00:14:33,226 --> 00:14:34,436
So if you're familiar with that


272
00:14:34,436 --> 00:14:36,866
where you pre-fix your bundle
identifier with a team ID


273
00:14:36,866 --> 00:14:38,686
in order to facilitate sharing,


274
00:14:39,036 --> 00:14:40,386
that's how you do it
in the first seed.


275
00:14:40,796 --> 00:14:43,866
We're going to fix this up for
App Groups by the time we ship.


276
00:14:44,386 --> 00:14:47,506
So in terms of privacy, it's
a slightly different story.


277
00:14:47,846 --> 00:14:50,366
When I say privacy, I
mean the dialog that comes


278
00:14:50,366 --> 00:14:52,536
up when an app is trying


279
00:14:52,536 --> 00:14:55,706
to access certain sensitive user
data like photos or contacts.


280
00:14:55,876 --> 00:14:57,046
You'll get a dialog saying:


281
00:14:57,356 --> 00:14:59,556
"Would you like to allow
this app to have access


282
00:14:59,556 --> 00:15:00,446
to this piece of data?"


283
00:15:00,546 --> 00:15:03,546
And the user can
either decline or allow.


284
00:15:04,596 --> 00:15:07,626
So when the user allows
your app to have access


285
00:15:07,776 --> 00:15:10,656
to a certain piece of
data, it's actually going


286
00:15:10,656 --> 00:15:13,316
to cover the entirety
of your app bundle,


287
00:15:13,376 --> 00:15:14,606
including Extensions.


288
00:15:14,816 --> 00:15:19,066
So that the user, once they have
approved your app for access


289
00:15:19,066 --> 00:15:21,836
to your photos, they don't
have to then go and approve all


290
00:15:21,836 --> 00:15:24,246
of your Extensions for
access to the same data.


291
00:15:24,776 --> 00:15:26,626
Now, there are going to be
some Extensions to this --


292
00:15:26,686 --> 00:15:28,766
or sorry -- some
exceptions to this rule.


293
00:15:29,136 --> 00:15:32,486
But in general, the rule is


294
00:15:32,646 --> 00:15:36,726
that approval covers the
entirety of your app.


295
00:15:37,156 --> 00:15:40,126
So let's go over best
practices a little bit.


296
00:15:41,106 --> 00:15:42,616
As we said at the beginning,


297
00:15:42,986 --> 00:15:45,416
the front-most app is
the most important thing.


298
00:15:45,416 --> 00:15:48,286
So it's very important that
your exceptions be lean.


299
00:15:48,566 --> 00:15:50,526
These things do not
have the full run


300
00:15:50,526 --> 00:15:51,826
of the system like the app does.


301
00:15:51,936 --> 00:15:53,636
The app's still there.


302
00:15:54,126 --> 00:15:56,666
It's still using the lion's
share of system resources.


303
00:15:56,916 --> 00:16:00,046
The Extensions are very
focused, very purpose-built.


304
00:16:00,046 --> 00:16:04,726
And it's important that they get
in, do their job, and get out.


305
00:16:04,986 --> 00:16:06,146
And be stateless.


306
00:16:06,396 --> 00:16:08,506
You might know that we
kill apps aggressively


307
00:16:08,506 --> 00:16:09,836
or suspend them on iOS.


308
00:16:10,186 --> 00:16:12,066
We're doubling down on
that with Extensions.


309
00:16:12,066 --> 00:16:13,496
And we're going to
be more aggressive.


310
00:16:13,626 --> 00:16:17,066
And because of this, there
is no general multi-tasking


311
00:16:17,066 --> 00:16:19,116
functionality available
to Extensions.


312
00:16:19,356 --> 00:16:22,736
So no VoIP, no long-running
background tasks,


313
00:16:22,736 --> 00:16:23,336
that kind of thing.


314
00:16:23,656 --> 00:16:27,426
We do support a short task
completion before we suspend


315
00:16:27,426 --> 00:16:28,546
or kill the extension.


316
00:16:28,896 --> 00:16:32,656
But this is meant to give you
time to flush any dirty state


317
00:16:32,656 --> 00:16:35,266
to disk so that the user
doesn't lose their data and so


318
00:16:35,266 --> 00:16:36,546
that the app can pick that up.


319
00:16:37,446 --> 00:16:39,466
And finally, be awesome.


320
00:16:40,446 --> 00:16:42,006
Make these things seamless.


321
00:16:42,426 --> 00:16:43,956
Make them useful to our users.


322
00:16:44,356 --> 00:16:49,036
And as a user of your products,
I can't wait to be surprised


323
00:16:49,036 --> 00:16:50,606
and delighted by what
you guys turn out.


324
00:16:51,656 --> 00:16:53,546
With that, I'd like to
turn it over to Aki.


325
00:16:55,516 --> 00:16:59,886
[ Applause ]


326
00:17:00,386 --> 00:17:00,656
>> Thank you.


327
00:17:01,686 --> 00:17:02,366
Thank you Damien.


328
00:17:02,826 --> 00:17:05,675
Hi, I'm Aki Inoue
from Cocoa Group.


329
00:17:06,236 --> 00:17:10,096
Today, I'm discussing
an exciting new feature,


330
00:17:10,646 --> 00:17:15,296
Action Extensions
for iOS and OS X.


331
00:17:15,996 --> 00:17:20,636
Yesterday in Part One, Ian, Matt
and Guy introduced Extensions


332
00:17:20,856 --> 00:17:24,596
and two Extensions point
along with key technologies


333
00:17:24,675 --> 00:17:29,176
such as remote view
controller and activation rules.


334
00:17:30,056 --> 00:17:34,006
Damien explained foundation of
technologies for Extensions.


335
00:17:34,626 --> 00:17:37,816
Action is an extension
point that utilizes


336
00:17:38,326 --> 00:17:43,876
and integrates all
these best technologies.


337
00:17:44,706 --> 00:17:45,446
Let's get started.


338
00:17:45,796 --> 00:17:50,966
So, Action is a screenshot
[inaudible] system to services,


339
00:17:51,726 --> 00:17:53,976
an inter-application
collaboration technology


340
00:17:53,976 --> 00:17:57,416
available since the
first release of OS X.


341
00:17:57,446 --> 00:18:03,326
Action operates with user
selection inside the host


342
00:18:03,326 --> 00:18:09,886
application that is it
extends the system framework,


343
00:18:10,296 --> 00:18:15,176
not just the single
application or service.


344
00:18:15,646 --> 00:18:18,596
Earlier in this conference,
you have seen one


345
00:18:18,596 --> 00:18:22,616
of Action Extension's
Markup operating inside many


346
00:18:22,616 --> 00:18:24,306
applications on Yosemite.


347
00:18:26,176 --> 00:18:29,566
In fact, this extension
is available


348
00:18:30,046 --> 00:18:33,386
to image attachments
throughout the system.


349
00:18:34,156 --> 00:18:38,026
Let's just dive into
the details.


350
00:18:38,576 --> 00:18:40,476
Just like any other Extensions,


351
00:18:40,956 --> 00:18:44,926
Actions are described
by info.plist.


352
00:18:45,576 --> 00:18:51,476
First, inside NSExtension
Dictionary, it's identified


353
00:18:51,476 --> 00:18:55,396
by NSExtensionPoint
Identifier.com.


354
00:18:55,396 --> 00:18:56,566
apple.ui-services.


355
00:18:58,506 --> 00:19:04,796
Next, NSExtensionPrincipalClass
specifies the main controller


356
00:19:04,836 --> 00:19:06,076
[inaudible] for your extension.


357
00:19:07,076 --> 00:19:10,206
Just like Guy and Matt
described yesterday,


358
00:19:10,686 --> 00:19:16,836
it's typically a subclass of
the ViewController option.


359
00:19:17,456 --> 00:19:20,546
Now, the principal class
is the main controller


360
00:19:20,546 --> 00:19:23,716
for your extension as
well as the [inaudible]


361
00:19:24,076 --> 00:19:26,606
to the extension APIs.


362
00:19:28,056 --> 00:19:32,076
With a new View Controller
property called Extension


363
00:19:32,436 --> 00:19:36,676
Context, you can get
NSExtention Context Object,


364
00:19:36,976 --> 00:19:39,506
which represent connection
to the host application.


365
00:19:41,486 --> 00:19:47,326
Through that, you can access
an array of NSExtention items.


366
00:19:47,996 --> 00:19:52,926
Each item representing a logical
data unit coming back from --


367
00:19:53,026 --> 00:19:58,756
coming from the host
application.


368
00:20:00,776 --> 00:20:08,576
And, you can attach [inaudible]
data to extension item.


369
00:20:10,166 --> 00:20:12,906
Movie, image, voice,
so and so forth.


370
00:20:13,526 --> 00:20:18,076
The data is contained inside an
object called NSItemProvider.


371
00:20:20,416 --> 00:20:22,726
Okay let's back to
the Info.plist.


372
00:20:23,936 --> 00:20:26,416
Inside NSExtensionAttributes
Dictionary,


373
00:20:27,156 --> 00:20:33,446
which specifies extension
point-specific attributes,


374
00:20:33,446 --> 00:20:38,286
you declare NSExtensionservice
RoleType,


375
00:20:39,306 --> 00:20:41,666
which [inaudible]
editor or viewer.


376
00:20:42,226 --> 00:20:45,476
In this example, we are
using NSExtensionservice


377
00:20:45,476 --> 00:20:46,746
RoleTypeEditor.


378
00:20:47,336 --> 00:20:50,486
That means it's only
presented to the context


379
00:20:50,866 --> 00:20:52,876
where the document is editable.


380
00:20:54,226 --> 00:21:01,136
Next, as share Extensions you
can specify activation rules


381
00:21:02,126 --> 00:21:04,696
with NSExtensionActivationRules.


382
00:21:05,646 --> 00:21:09,986
It can be NS [inaudible] for
define your string or the list


383
00:21:09,986 --> 00:21:15,866
of supported data types.


384
00:21:16,066 --> 00:21:19,956
Now, let's look at code samples.


385
00:21:20,556 --> 00:21:22,906
First, you can get
extension context


386
00:21:23,106 --> 00:21:27,146
through the extension
context property.


387
00:21:27,866 --> 00:21:32,126
Next, you can get
extension item through item,


388
00:21:32,456 --> 00:21:33,906
inputItems property,


389
00:21:34,246 --> 00:21:38,036
which returns the array
of extension items.


390
00:21:38,866 --> 00:21:44,366
Finally, you can get attached
data using attachments property


391
00:21:44,716 --> 00:21:48,736
and it's containing the
NSItemProvider objects.


392
00:21:49,506 --> 00:21:54,416
Once you have NSItemProvider,
you can load data


393
00:21:54,656 --> 00:21:56,026
from the host application.


394
00:21:56,646 --> 00:21:58,426
It's lazy and secure.


395
00:22:00,456 --> 00:22:02,476
Using the
LoadItemForTypeIdentifier


396
00:22:02,746 --> 00:22:04,676
options completionHandler


397
00:22:05,326 --> 00:22:08,936
and specifying a UTI
type of your choice.


398
00:22:09,406 --> 00:22:13,186
In this case, we are using a
custom data type, MyDocumentUTI.


399
00:22:14,666 --> 00:22:21,746
And you specify a representation
of the data you want to receive.


400
00:22:21,746 --> 00:22:23,956
In this case, we
are using NSData


401
00:22:23,956 --> 00:22:29,516
and it contains the custom
data format, NSDocument UTI.


402
00:22:31,556 --> 00:22:35,606
Once you have that
data, you can set


403
00:22:35,606 --> 00:22:39,156
up your user interface
according to the data coming


404
00:22:39,326 --> 00:22:40,976
from the host application.


405
00:22:42,566 --> 00:22:52,006
Next, with Action, unlike
shared Extensions, it's possible


406
00:22:52,006 --> 00:22:56,176
that extension time
return some modified data.


407
00:22:57,006 --> 00:23:01,756
You've seen Markup changing and
marking up your image in place


408
00:23:02,116 --> 00:23:04,206
and return it to
the mail document.


409
00:23:04,966 --> 00:23:08,096
Your extension can
perform the similar thing.


410
00:23:09,976 --> 00:23:18,736
When user click a Down button or
similar action, you can perform


411
00:23:20,666 --> 00:23:26,106
and return the modified data
back to their host application.


412
00:23:26,526 --> 00:23:30,346
The process is reverse of
loading the data coming


413
00:23:30,466 --> 00:23:31,666
from the host application.


414
00:23:32,666 --> 00:23:39,036
First, you want to
instantiate NSItemProvider


415
00:23:39,706 --> 00:23:43,796
with your data and data type.


416
00:23:44,196 --> 00:23:47,116
Next, you can create
NSExtensionItem


417
00:23:47,436 --> 00:23:49,296
and attach your item provider.


418
00:23:50,966 --> 00:23:56,116
Finally, you can send
completeRequestReturningItems


419
00:23:56,606 --> 00:24:00,126
completionHandler to
your extension item


420
00:24:01,156 --> 00:24:03,936
with an array of
extension items.


421
00:24:04,986 --> 00:24:09,366
This actually concludes
your extension life cycle.


422
00:24:10,606 --> 00:24:15,336
So typically you want
to return your data


423
00:24:15,546 --> 00:24:23,396
and conclude your NUI
operation at this point.


424
00:24:23,676 --> 00:24:27,146
Unlike [inaudible] application,
if your viewer type,


425
00:24:27,716 --> 00:24:30,986
you don't have to
return any data back


426
00:24:31,126 --> 00:24:32,346
to the host application.


427
00:24:33,986 --> 00:24:39,256
So if your viewer application
just like share Extensions,


428
00:24:39,856 --> 00:24:44,986
you can invoke
completeRequestReturningItems


429
00:24:46,516 --> 00:24:49,416
completionHandler
with new argument.


430
00:24:51,206 --> 00:24:59,396
So far, I have covered how
to write Action Extensions.


431
00:25:00,636 --> 00:25:05,446
Now, let me explain how you
can integrate Extensions


432
00:25:05,776 --> 00:25:10,506
into your own applications.


433
00:25:10,506 --> 00:25:19,366
On iOS UIActivityViewController
drives both social and share


434
00:25:19,366 --> 00:25:21,036
and Action Extensions.


435
00:25:21,716 --> 00:25:27,956
The [inaudible] controlled by
the View Controller can invoke


436
00:25:27,956 --> 00:25:30,196
and manage Extensions for you.


437
00:25:31,546 --> 00:25:35,516
UI API-wise there's
not much difference


438
00:25:35,706 --> 00:25:39,026
for UIActivityViewController
from the previous release.


439
00:25:39,856 --> 00:25:43,526
You still instantiate
the View Controller


440
00:25:43,856 --> 00:25:48,286
with the selected
items from the user.


441
00:25:48,286 --> 00:25:51,776
And View Controller takes over


442
00:25:51,896 --> 00:25:55,686
and present the [inaudible]
and voila.


443
00:25:57,436 --> 00:26:02,426
One enhancement we have
for iOS 8 is the support


444
00:26:03,126 --> 00:26:05,506
for editor actions.


445
00:26:06,396 --> 00:26:12,116
We added a new property called
completionWithItemsHandler


446
00:26:12,426 --> 00:26:16,606
to UIViewController, or
UIViewActivityViewController.


447
00:26:16,676 --> 00:26:23,376
With this method, if the invoked
action is editor and wants


448
00:26:23,416 --> 00:26:28,106
to return value you
could receive the result


449
00:26:28,106 --> 00:26:29,976
in returnItems array.


450
00:26:30,846 --> 00:26:36,236
And you can replace your
document content based


451
00:26:38,366 --> 00:26:41,346
on the returned items.


452
00:26:42,706 --> 00:26:43,006
NSTextView.


453
00:26:43,106 --> 00:26:49,696
Well, if anybody know in the
audience, I just can't help talk


454
00:26:49,696 --> 00:26:53,226
about text every year
in one way or the other.


455
00:26:54,166 --> 00:26:58,916
On OS X, NSTextView
plays the central role


456
00:26:58,916 --> 00:27:05,506
in presenting Extensions
to the users.


457
00:27:05,546 --> 00:27:08,806
By hovering us on
top of extension --


458
00:27:08,976 --> 00:27:14,076
by hovering extension
on top of text selection


459
00:27:14,736 --> 00:27:18,716
or image attachments,
it presents [inaudible]


460
00:27:19,426 --> 00:27:24,056
with manual listing old
Extensions available


461
00:27:24,936 --> 00:27:28,476
for the context.


462
00:27:28,476 --> 00:27:33,516
Now I have written a simple
little extension for OS X.


463
00:27:33,656 --> 00:27:36,266
And I'd like to show how


464
00:27:36,266 --> 00:27:39,006
to simply present your
Extensions to the user.


465
00:27:39,646 --> 00:27:41,536
I have a text edited document


466
00:27:41,876 --> 00:27:45,076
that contains both
text and image.


467
00:27:46,886 --> 00:27:54,946
By hovering mouse cursor
on top of text selection,


468
00:27:55,426 --> 00:27:57,106
you can reveal the list


469
00:27:57,296 --> 00:28:01,166
of extension supporting
the text data.


470
00:28:03,186 --> 00:28:07,716
Similarly, by hovering
on top of attachments,


471
00:28:08,516 --> 00:28:12,536
you can show the list of
Extensions supporting images.


472
00:28:13,116 --> 00:28:17,726
In this case, in addition to
the sample extension I wrote,


473
00:28:17,726 --> 00:28:23,116
Party Crasher, it lists Markup
in the text edit application.


474
00:28:24,426 --> 00:28:28,876
So you can see the Markup
is an extension that works,


475
00:28:28,986 --> 00:28:33,226
not just in mail but any other
text view inside the system.


476
00:28:34,606 --> 00:28:41,756
So, let me explain this little
extension called Party Crasher.


477
00:28:44,246 --> 00:28:47,216
Just like many of you, I
like hanging out with people.


478
00:28:47,946 --> 00:28:51,456
And anytime I see
pictures like this, I feel,


479
00:28:51,526 --> 00:28:54,486
well, kind of left out.


480
00:28:54,486 --> 00:28:55,496
[ Laughter ]


481
00:28:55,496 --> 00:29:04,586
So, with this extension, I can
add my picture to any images


482
00:29:04,586 --> 00:29:06,086
in the system instantly.


483
00:29:06,086 --> 00:29:06,153
[ Laughter and Applause ]


484
00:29:06,153 --> 00:29:09,936
I like this picture,
so let's keep it.


485
00:29:11,166 --> 00:29:14,116
And the change is
saved in the document.


486
00:29:16,736 --> 00:29:19,966
Also, there is another way


487
00:29:19,996 --> 00:29:26,556
to invoke Action
Extensions on OS X.


488
00:29:26,786 --> 00:29:29,226
I have modified this
Text Edit Application.


489
00:29:29,736 --> 00:29:32,806
By the way, Text Edit
Application is a core sample


490
00:29:32,806 --> 00:29:34,886
application for Cocoa
Application.


491
00:29:34,886 --> 00:29:36,996
So you can modify
any way you want


492
00:29:37,996 --> 00:29:41,956
and learn the neat
stuff about Cocoa.


493
00:29:43,996 --> 00:29:46,406
With this Text Edit Application,


494
00:29:46,406 --> 00:29:51,356
a version Text Edit Application,
you can show toolbar.


495
00:29:51,356 --> 00:29:56,156
And as you can see
in the toolbar,


496
00:29:56,976 --> 00:30:02,216
extension can register
themselves as toolbar item.


497
00:30:02,376 --> 00:30:06,306
And it can be shown with any
toolbar inside the system.


498
00:30:07,256 --> 00:30:12,396
And the action is applied to
the current selected object.


499
00:30:12,396 --> 00:30:15,136
It can be text or
image, so on so forth.


500
00:30:16,456 --> 00:30:22,786
So, let's invoke the Party
Crasher for text selection.


501
00:30:23,496 --> 00:30:28,416
It appends a message:
Exception [inaudible]


502
00:30:29,046 --> 00:30:35,496
to any text selection
in the system.


503
00:30:36,216 --> 00:30:41,946
Okay. As you can see, Action
Extension is so powerful,


504
00:30:42,706 --> 00:30:48,026
you can write simple
extension like this.


505
00:30:48,706 --> 00:30:53,286
Or you can scale up to
[inaudible] as Markup.


506
00:30:53,966 --> 00:30:55,206
The sky is just the limit.


507
00:30:55,296 --> 00:30:58,656
I have demonstrated
-- with the demo,


508
00:30:58,736 --> 00:31:03,216
I have demonstrated Extensions
can support multiple data types.


509
00:31:04,236 --> 00:31:07,436
It is common that
you want to support


510
00:31:07,436 --> 00:31:09,376
as many data types as you want.


511
00:31:09,456 --> 00:31:16,516
More data types you support,
it's easier for users


512
00:31:16,516 --> 00:31:18,186
to work with your Extensions.


513
00:31:18,976 --> 00:31:23,966
Let's take a look at how you
can change your behavior based


514
00:31:23,966 --> 00:31:26,616
on the input data coming
from the host application.


515
00:31:28,336 --> 00:31:31,036
In this case, first
we want to check


516
00:31:31,726 --> 00:31:35,426
if it's a text data type coming
from the host application.


517
00:31:37,156 --> 00:31:43,136
We use the kUTTypeText UTI type.


518
00:31:43,136 --> 00:31:46,756
And it contains many
text data format


519
00:31:47,176 --> 00:31:51,536
with hasItemConforming
ToTypeIdentifer method


520
00:31:51,626 --> 00:31:54,006
for itemProvider you can check


521
00:31:54,006 --> 00:31:59,626
if the itemProvider
contains the text data.


522
00:31:59,796 --> 00:32:04,866
Once you make sure, you
can load the data using


523
00:32:04,866 --> 00:32:11,036
loadItemForTypeIdentifier
options completionHandler using


524
00:32:11,036 --> 00:32:13,696
the data representation
type of your choice.


525
00:32:14,666 --> 00:32:18,656
Since itemProvider has simple
data coordination facility,


526
00:32:19,316 --> 00:32:21,406
it can map some data


527
00:32:22,726 --> 00:32:27,716
to the target object
data type you specify.


528
00:32:27,786 --> 00:32:30,586
In this case, we are
using NSAttributedString.


529
00:32:31,286 --> 00:32:34,426
Once you have your data,


530
00:32:35,226 --> 00:32:40,296
set up your user
interface and code into it.


531
00:32:42,086 --> 00:32:46,066
Similarly, if your
text data check fails,


532
00:32:46,636 --> 00:32:49,356
you can check for image data.


533
00:32:50,926 --> 00:32:55,326
After checking if it's
image, you can load the image


534
00:32:55,796 --> 00:33:02,536
and as I mentioned, itemProvider
can [inaudible] data type


535
00:33:02,766 --> 00:33:06,166
into UIImage or NSImage for you.


536
00:33:06,716 --> 00:33:12,116
And if you have image, configure
your user interface for image.


537
00:33:16,196 --> 00:33:22,446
For OS X, it's common that
your extension's user interface


538
00:33:22,546 --> 00:33:25,746
doesn't cover the entire
host application's window.


539
00:33:26,796 --> 00:33:28,156
Just like Markup.


540
00:33:28,906 --> 00:33:33,956
Typically you want to overlay
your user interface on top


541
00:33:33,956 --> 00:33:37,946
of the original representation
of the host application.


542
00:33:38,976 --> 00:33:41,456
It's easy to accomplish.


543
00:33:43,126 --> 00:33:48,416
We have additional property
for NSItemProvider on OS X.


544
00:33:49,226 --> 00:33:50,726
It's called sourceFrame.


545
00:33:52,306 --> 00:33:54,566
It contains the screen
coordinate


546
00:33:55,076 --> 00:33:58,406
for the original representation
inside the host application.


547
00:33:59,786 --> 00:34:04,586
If you get [inaudible]
rect information,


548
00:34:05,026 --> 00:34:10,456
and if it's not empty, you
can adjust the frame according


549
00:34:10,456 --> 00:34:11,916
to your user interface needs.


550
00:34:12,176 --> 00:34:14,746
You might want to have
some additional frame


551
00:34:15,025 --> 00:34:17,956
around the original
representation just like Markup


552
00:34:17,956 --> 00:34:19,525
or Party Crasher does.


553
00:34:22,576 --> 00:34:26,036
Then set up two NSViewController
properties,


554
00:34:26,996 --> 00:34:30,976
preferredScreenOrigin
and preferredContentSize.


555
00:34:33,146 --> 00:34:36,146
As you've seen with Mark's
presentation yesterday,


556
00:34:36,626 --> 00:34:39,366
the preferred content
size is shared


557
00:34:39,496 --> 00:34:44,726
between the [inaudible]
and Action Extension.


558
00:34:46,565 --> 00:34:51,505
By setting up these properties,
the View Controller system takes


559
00:34:51,505 --> 00:34:55,416
over and configures your
extension user interface


560
00:34:55,585 --> 00:35:03,536
overlaid on top of the
original representation


561
00:35:03,616 --> 00:35:04,676
in the host application.


562
00:35:05,486 --> 00:35:14,176
Now, I'd like to bring my
colleague Ian Baird who's going


563
00:35:14,176 --> 00:35:17,186
to be discussing
really, really cool way


564
00:35:17,346 --> 00:35:21,626
to integrate interactive
Web and actions.


565
00:35:23,196 --> 00:35:23,776
Ian.


566
00:35:24,516 --> 00:35:27,786
[ Applause ]


567
00:35:28,286 --> 00:35:28,866
>> Thank you Aki.


568
00:35:31,646 --> 00:35:34,106
So, Aki showed you how to
create a custom action.


569
00:35:34,106 --> 00:35:35,196
And he showed it on OS X.


570
00:35:35,196 --> 00:35:36,856
And today I'm going
to show you how


571
00:35:36,856 --> 00:35:39,636
to build a Safari
custom action or how


572
00:35:39,636 --> 00:35:42,156
to take your custom action
and enhance it for the Web.


573
00:35:42,556 --> 00:35:45,056
We think you guys are really
going to love this feature.


574
00:35:46,446 --> 00:35:49,376
So first, you can see our
custom action in the bottom row


575
00:35:49,486 --> 00:35:51,956
of the activity view controller
as I showed you yesterday


576
00:35:51,956 --> 00:35:53,416
in the Part One of this talk.


577
00:35:54,726 --> 00:35:56,736
And it's called TinySketch.


578
00:35:57,096 --> 00:35:59,656
It can't do everything that
its brother Markup can do,


579
00:35:59,906 --> 00:36:01,176
but it can still pack a punch.


580
00:36:02,856 --> 00:36:04,066
So first, diving in,


581
00:36:04,406 --> 00:36:07,426
Safari Custom Actions is
rich new functionality


582
00:36:07,426 --> 00:36:08,806
in Safari on iOS.


583
00:36:09,776 --> 00:36:11,656
It gives you access to the DOM.


584
00:36:12,916 --> 00:36:15,506
And there are two types
of Custom Actions.


585
00:36:16,356 --> 00:36:18,296
A view controller-based
custom action,


586
00:36:18,626 --> 00:36:19,816
the kind I'm going
to show you today.


587
00:36:19,816 --> 00:36:22,646
And then there's
a no view action


588
00:36:22,846 --> 00:36:24,356
like the Bing Translate action


589
00:36:24,646 --> 00:36:26,156
that Craig showed
you in the Keynote.


590
00:36:27,646 --> 00:36:29,716
How do these work?


591
00:36:30,096 --> 00:36:31,456
We use some JavaScript.


592
00:36:31,686 --> 00:36:35,126
Your extension will
provide JavaScript along


593
00:36:35,126 --> 00:36:36,676
in its resources.


594
00:36:37,176 --> 00:36:39,096
And Safari is going
to find this.


595
00:36:41,006 --> 00:36:44,276
So, here's what this JavaScript
is going to look like.


596
00:36:44,426 --> 00:36:45,546
We're going to expect you


597
00:36:45,546 --> 00:36:48,436
to provide a pre-processing
JavaScript object.


598
00:36:48,746 --> 00:36:52,236
And this object is going to
have two methods, a run method


599
00:36:52,436 --> 00:36:53,466
and a finalize method.


600
00:36:54,046 --> 00:36:56,296
We're going to start by
calling the run method


601
00:36:56,296 --> 00:36:58,186
and give you access to the DOM.


602
00:36:58,186 --> 00:37:00,226
And what you're going
to be expected to do


603
00:37:00,226 --> 00:37:05,036
in this run method is to call
the action arguments completion


604
00:37:05,096 --> 00:37:07,796
function, passing the
data you want to provide


605
00:37:08,016 --> 00:37:09,736
to the custom action
when you're done.


606
00:37:09,736 --> 00:37:14,776
And when the action
has completed,


607
00:37:14,936 --> 00:37:16,366
when the computation inside


608
00:37:16,366 --> 00:37:21,176
of your custom action extension
has finished, we're again going


609
00:37:21,176 --> 00:37:22,266
to call your JavaScript.


610
00:37:22,626 --> 00:37:25,526
And this time we're going to
invoke the finalize method


611
00:37:25,936 --> 00:37:27,456
and pass the action arguments.


612
00:37:27,456 --> 00:37:30,306
And as you can see in this
case, we're just calling alert


613
00:37:30,306 --> 00:37:32,056
and showing the message,
which was provided.


614
00:37:32,206 --> 00:37:35,956
One of the most important
things for you


615
00:37:35,956 --> 00:37:38,826
to remember is this
global variable:


616
00:37:38,826 --> 00:37:41,086
ExtensionPreprocessing
JavaScript.


617
00:37:41,086 --> 00:37:42,976
This is going to be an
instance of your object


618
00:37:42,976 --> 00:37:45,206
that provides these
methods to Safari.


619
00:37:45,206 --> 00:37:48,606
And I think this should
be burned into your mind,


620
00:37:48,706 --> 00:37:51,606
because if you don't provide
this, we're not going to be able


621
00:37:51,606 --> 00:37:53,186
to invoke your JavaScript.


622
00:37:53,226 --> 00:37:55,806
And nothing's going to show
up inside of your action.


623
00:37:58,166 --> 00:38:01,636
So, it's really easy to
talk about these things,


624
00:38:01,746 --> 00:38:03,336
but it's far better to show it.


625
00:38:03,396 --> 00:38:08,716
So I'm going to show you
a demo of TinySketch.


626
00:38:08,966 --> 00:38:09,686
Moving right in.


627
00:38:10,136 --> 00:38:11,826
Let's build and run
and see what we've got.


628
00:38:12,816 --> 00:38:16,066
So what I've done here is
I've built a very small test


629
00:38:16,066 --> 00:38:17,706
application called TinySketch


630
00:38:18,006 --> 00:38:20,276
which contains my
TinySketch custom action.


631
00:38:21,796 --> 00:38:23,636
This is a good way
to get started.


632
00:38:23,636 --> 00:38:25,396
You might not want
to dive immediately


633
00:38:25,486 --> 00:38:29,056
into creating an extension for
Safari because there are a lot


634
00:38:29,056 --> 00:38:31,256
of moving parts, and it's
a lot better to build it


635
00:38:31,256 --> 00:38:32,576
up in pieces when you can.


636
00:38:32,576 --> 00:38:35,846
As you can see, we don't
have anything here yet.


637
00:38:35,846 --> 00:38:37,376
And we don't actually
have any data.


638
00:38:37,376 --> 00:38:40,436
And our Action button
is not wired up.


639
00:38:40,436 --> 00:38:41,996
Let's go ahead and do that.


640
00:38:43,086 --> 00:38:45,786
Going back to Xcode.


641
00:38:45,786 --> 00:38:49,226
TinySketch Support is our
new support framework,


642
00:38:49,226 --> 00:38:51,666
as Damien was talking about,
embedded frameworks earlier.


643
00:38:51,766 --> 00:38:53,246
We're going to go
into our data model.


644
00:38:54,386 --> 00:38:57,116
And because our application
and our extension may want


645
00:38:57,256 --> 00:38:59,476
to use the same data
model, we're actually going


646
00:38:59,476 --> 00:39:03,256
to provide the accessor to
the resources here, like this.


647
00:39:03,906 --> 00:39:05,766
This is going to iterate
through the image URLs


648
00:39:06,186 --> 00:39:10,046
in my custom Extensions
documents folder.


649
00:39:11,856 --> 00:39:13,106
We'll add support for it there.


650
00:39:13,246 --> 00:39:17,516
And then we'll go back to the
app and we'll actually wire


651
00:39:17,516 --> 00:39:19,656
up support for it
in viewDidLoad.


652
00:39:20,746 --> 00:39:22,576
Get the pictures
of the cute kids.


653
00:39:23,246 --> 00:39:27,096
Fix up the indentation.


654
00:39:27,446 --> 00:39:28,586
And we'll build and run again.


655
00:39:29,376 --> 00:39:33,736
And this time you'll see
some pictures of my children.


656
00:39:34,126 --> 00:39:37,006
They're usually enjoying a
day at the park or at school


657
00:39:37,006 --> 00:39:38,406
or doing something else.


658
00:39:39,506 --> 00:39:40,586
Hit Reset on this.


659
00:39:40,716 --> 00:39:41,976
I forgot to reset it before.


660
00:39:43,456 --> 00:39:46,226
We can tap on any of these
images and in they go.


661
00:39:46,226 --> 00:39:47,846
You can see right there.


662
00:39:48,766 --> 00:39:49,766
Tap on any of them.


663
00:39:50,756 --> 00:39:51,406
It's really cool.


664
00:39:52,186 --> 00:39:53,126
All right.


665
00:39:53,126 --> 00:39:55,886
Tap the Custom Action
button, and nothing comes up.


666
00:39:55,886 --> 00:39:57,606
Well, that's because we
haven't wired it up yet.


667
00:39:57,606 --> 00:39:59,876
As Aki was telling you
earlier, we need to set


668
00:39:59,876 --> 00:40:01,516
up the UIActivity
View Controller


669
00:40:01,756 --> 00:40:03,746
to provide data to
the extension.


670
00:40:04,006 --> 00:40:05,416
So let's go do that.


671
00:40:16,356 --> 00:40:17,766
Going to go into
our Share Method.


672
00:40:17,836 --> 00:40:19,886
And we're going to
add some more code.


673
00:40:21,046 --> 00:40:22,906
Setting up the UIActivity
View Controller.


674
00:40:23,006 --> 00:40:25,126
As you can see, as Aki
talked about earlier,


675
00:40:25,326 --> 00:40:29,916
we're creating an activity item
using our selected image URL.


676
00:40:29,916 --> 00:40:33,626
And now we're going
to add some code


677
00:40:33,626 --> 00:40:36,376
where we're just configuring
the activity item as we go,


678
00:40:36,376 --> 00:40:38,236
as Aki talked about
earlier -- oops.


679
00:40:41,476 --> 00:40:44,006
We're adding a little bit
more code to actually deal


680
00:40:44,006 --> 00:40:46,316
with receiving the
data items right here.


681
00:40:46,666 --> 00:40:47,896
We're going to take
a look at make sure


682
00:40:47,896 --> 00:40:48,976
that we were successful.


683
00:40:48,976 --> 00:40:51,096
We're going to count the
number of items and we're going


684
00:40:51,096 --> 00:40:53,486
to grab the item
provider, which is provided


685
00:40:53,486 --> 00:40:55,246
to us by the custom action.


686
00:40:55,246 --> 00:40:58,826
And then we're going to take
the image and save it back


687
00:40:58,826 --> 00:41:00,286
into our image collection.


688
00:41:00,606 --> 00:41:03,336
And then we're going to
redisplay that image inside


689
00:41:03,336 --> 00:41:04,146
of the collection view.


690
00:41:04,186 --> 00:41:06,756
And now finally, now that
we have the Activity View


691
00:41:06,756 --> 00:41:08,386
Controller completely
configured,


692
00:41:08,746 --> 00:41:13,146
we're going to present it.


693
00:41:13,146 --> 00:41:14,906
So, let's build and run.


694
00:41:15,206 --> 00:41:19,726
This time we ought to be
able to tap on the picture


695
00:41:19,726 --> 00:41:22,116
of the cute kids, at least
I think they're cute.


696
00:41:24,016 --> 00:41:25,486
Tap on the Action item.


697
00:41:25,776 --> 00:41:29,006
And now we can see our
custom action right here.


698
00:41:29,326 --> 00:41:31,646
If we tap it, up it comes.


699
00:41:31,946 --> 00:41:34,626
It doesn't do much yet, because
while we're providing the data


700
00:41:34,626 --> 00:41:37,946
to it, we haven't actually
added any code to consume


701
00:41:37,946 --> 00:41:39,796
that data inside of the action.


702
00:41:40,216 --> 00:41:41,066
Let's go do that now.


703
00:41:48,136 --> 00:41:50,276
Going into our TinySketch
action,


704
00:41:50,366 --> 00:41:52,776
which is our target
containing the custom action.


705
00:41:53,996 --> 00:41:55,656
And we're going to go
down to viewDidLoad,


706
00:41:55,806 --> 00:41:57,826
which is where we should
consume the extension item.


707
00:41:59,576 --> 00:42:02,566
To add something to
uphold the input item


708
00:42:02,566 --> 00:42:04,726
from the extension
context, and we're going


709
00:42:04,726 --> 00:42:06,466
to grab the first
image item provider.


710
00:42:06,466 --> 00:42:09,296
And we're going to make sure
that it has an item conforming


711
00:42:09,296 --> 00:42:12,006
to our type identifier
of a type image.


712
00:42:12,616 --> 00:42:14,476
And then we're actually
going to load that image.


713
00:42:14,846 --> 00:42:17,976
And with the magic
of NSItemProvider,


714
00:42:18,656 --> 00:42:21,346
we're going to -- it's going
to be coerced from a URL


715
00:42:21,686 --> 00:42:23,796
into an item auto-magically
for you.


716
00:42:23,906 --> 00:42:25,996
We actually take a
look at the signature


717
00:42:26,136 --> 00:42:27,336
of these block parameters


718
00:42:27,546 --> 00:42:29,946
and perform all the coercions
behind the scenes for you.


719
00:42:30,866 --> 00:42:32,956
I thought that was cool.


720
00:42:33,516 --> 00:42:36,996
[ Applause ]


721
00:42:37,496 --> 00:42:38,876
And then we're going
to take that item,


722
00:42:38,996 --> 00:42:40,836
we're going to assign it
to our image properties


723
00:42:40,836 --> 00:42:41,806
so that we can hold onto it.


724
00:42:41,806 --> 00:42:44,416
And then we're also going
to show it in our imageView.


725
00:42:45,696 --> 00:42:49,836
Once we're done with
it, I'm scrolling past,


726
00:42:50,926 --> 00:42:52,706
we're going to need to
be able to take this data


727
00:42:52,706 --> 00:42:55,636
and send it back to the
host testing application.


728
00:42:56,156 --> 00:42:57,636
So let's set that up.


729
00:42:57,936 --> 00:42:59,556
We're going to create
an extension item.


730
00:43:00,356 --> 00:43:02,266
We're going to check that
we're not editing for the Web.


731
00:43:02,266 --> 00:43:03,166
That will come later.


732
00:43:03,166 --> 00:43:07,226
And we're going to attach
the newly-created image,


733
00:43:07,296 --> 00:43:10,606
the flattened image, the image
containing all the adornments,


734
00:43:11,266 --> 00:43:14,326
into the extension item
using NSItemProvider.


735
00:43:14,366 --> 00:43:16,496
This time we're just, we're
not going to supply a URL,


736
00:43:16,496 --> 00:43:17,786
but we're going to
supply an image.


737
00:43:18,686 --> 00:43:20,736
And then as Aki talked
about earlier,


738
00:43:20,736 --> 00:43:22,376
we're going to finish
the request


739
00:43:22,426 --> 00:43:24,556
by calling
completeRequestReturningItems


740
00:43:24,866 --> 00:43:26,396
and passing the extensionItem.


741
00:43:27,946 --> 00:43:32,996
Let's build and run.


742
00:43:33,736 --> 00:43:35,866
And let's edit.


743
00:43:36,956 --> 00:43:39,286
Pulling it up and
annotating the image.


744
00:43:40,006 --> 00:43:43,296
And you can see we actually have
data flowing across the wire.


745
00:43:44,176 --> 00:43:48,206
We can dismiss, and
the data goes back.


746
00:43:48,206 --> 00:43:49,516
That wasn't all that interesting


747
00:43:49,516 --> 00:43:50,926
because I didn't
actually make any edits.


748
00:43:50,926 --> 00:43:53,636
So I'll make an edit this time.


749
00:43:53,796 --> 00:43:59,426
Put an appropriate label in
here, in the speech bubble.


750
00:43:59,556 --> 00:44:03,026
Having fun at the park.


751
00:44:03,806 --> 00:44:08,956
Hit Done. And you'll notice now
our image has been replaced.


752
00:44:09,226 --> 00:44:11,716
The data has made it back
from our custom extension


753
00:44:11,856 --> 00:44:13,046
to our test application.


754
00:44:13,716 --> 00:44:17,246
And we have round-tripped
a custom action on iOS.


755
00:44:17,876 --> 00:44:20,686
Now, while this is cool,
I'm really here to show you


756
00:44:20,686 --> 00:44:24,266
about how this works, can
work, with Safari and the Web.


757
00:44:24,746 --> 00:44:26,906
So let's go ahead and
enhance this custom action


758
00:44:27,106 --> 00:44:29,856
to actually pull its
data out of a live DOM


759
00:44:29,856 --> 00:44:32,426
and then replace the data
in that DOM when it's done.


760
00:44:32,876 --> 00:44:36,156
Let's do that now.


761
00:44:37,036 --> 00:44:39,586
Going back, and stop.


762
00:44:41,926 --> 00:44:45,146
And now you may have seen
some of my notes earlier


763
00:44:45,146 --> 00:44:46,596
about adding Web support.


764
00:44:47,786 --> 00:44:49,756
We're going to scroll back up.


765
00:44:50,826 --> 00:44:54,266
And this time we're going
to add an else condition


766
00:44:56,296 --> 00:44:58,866
to receive a URL from Safari.


767
00:44:59,836 --> 00:45:01,426
You notice we're
going to have an else.


768
00:45:01,426 --> 00:45:03,886
And if we have an
itemConformingToTypeIdentifier


769
00:45:03,886 --> 00:45:07,016
KUTTypePropertyList, this is
important because we're going


770
00:45:07,016 --> 00:45:08,176
to be sending a dictionary.


771
00:45:09,586 --> 00:45:12,516
We're going to unpack the image
URL out of this dictionary.


772
00:45:13,146 --> 00:45:15,896
Also set up our little
editing for Web flag to Yes.


773
00:45:15,896 --> 00:45:21,016
And then we're setting up
an NSURLSessionDownloadTask


774
00:45:21,246 --> 00:45:22,686
to actually perform
the download.


775
00:45:23,136 --> 00:45:26,066
If the download succeeds,
we unpack the image data


776
00:45:26,066 --> 00:45:28,016
and render into a UIImage.


777
00:45:28,196 --> 00:45:30,766
Again, stashing the image
away in our property


778
00:45:31,096 --> 00:45:32,656
and assigning it
to the imageView.


779
00:45:32,656 --> 00:45:35,006
If we're unable to
download, we'll get an NSLog.


780
00:45:35,006 --> 00:45:40,946
And on the other
side of it, in Done,


781
00:45:42,636 --> 00:45:44,556
when we're done editing
the image,


782
00:45:45,116 --> 00:45:47,246
we need to pack it back
into a property list.


783
00:45:47,396 --> 00:45:48,806
And I've got some
code to do that here.


784
00:45:50,036 --> 00:45:52,886
You'll see that we're going
to take the flattened image


785
00:45:53,046 --> 00:45:55,916
and write out a temporary
file here.


786
00:45:55,916 --> 00:45:59,656
And then we're going to actually
create a JPEG string of that


787
00:45:59,656 --> 00:46:02,616
and pack that into a Web
dictionary basically creating a


788
00:46:02,616 --> 00:46:07,606
data URL that Safari can
then swap back into the DOM.


789
00:46:08,326 --> 00:46:09,926
So, everything's wired up there.


790
00:46:09,926 --> 00:46:11,996
Let's go into our JavaScript.


791
00:46:12,366 --> 00:46:15,176
As I talked about earlier, we
are expected to provide the run


792
00:46:15,176 --> 00:46:16,756
and finalized functions.


793
00:46:16,886 --> 00:46:21,076
And let's do that now.


794
00:46:21,296 --> 00:46:24,786
Run, we're going to iterate
over all the images in the DOM.


795
00:46:24,786 --> 00:46:26,246
And we're going to send them


796
00:46:26,246 --> 00:46:30,576
over in the imageUrls
key to the custom action.


797
00:46:30,896 --> 00:46:32,786
And we're also going
to send the base URI.


798
00:46:32,786 --> 00:46:35,446
Our custom action is only going
to consume the first image,


799
00:46:35,706 --> 00:46:37,016
but you know, this is
written for growth.


800
00:46:37,786 --> 00:46:41,746
And then finally, when
the data comes back


801
00:46:41,746 --> 00:46:44,366
from the custom action, we're
going to replace the image


802
00:46:44,696 --> 00:46:48,086
by taking that encoded
data URL and shoving it


803
00:46:48,086 --> 00:46:49,356
into the image using the --


804
00:46:49,356 --> 00:46:51,216
or replacing the
image source property.


805
00:46:52,146 --> 00:46:56,646
Save. Build and run.


806
00:46:57,576 --> 00:47:00,866
Up comes our application.


807
00:47:00,866 --> 00:47:01,786
We know this works.


808
00:47:02,066 --> 00:47:02,726
Let's home out.


809
00:47:03,806 --> 00:47:04,896
And let's to go Safari.


810
00:47:04,896 --> 00:47:08,906
I happen to have a Web
server running in local host


811
00:47:09,386 --> 00:47:10,226
with a picture, again,


812
00:47:10,226 --> 00:47:12,076
of my kids just hanging
out at the park.


813
00:47:13,066 --> 00:47:16,956
Let's see if we can
edit this image.


814
00:47:17,936 --> 00:47:19,126
Hitting Annotate Image.


815
00:47:20,516 --> 00:47:23,696
Up slides the custom action
with the data from Safari.


816
00:47:25,146 --> 00:47:29,336
Now let's edit and provide
an appropriate speech bubble.


817
00:47:37,066 --> 00:47:41,836
Hit Done. And now you can see
there's a live replacement


818
00:47:41,836 --> 00:47:45,446
of the data right there in
Safari using the JavaScript


819
00:47:45,446 --> 00:47:46,286
that I just showed you.


820
00:47:47,516 --> 00:47:53,966
[ Applause ]


821
00:47:54,466 --> 00:47:57,286
So, Safari Custom
Actions, as you just saw,


822
00:47:57,596 --> 00:48:00,376
provide the flexibility
of the Web married


823
00:48:00,376 --> 00:48:01,856
to the power of Extensions.


824
00:48:02,376 --> 00:48:05,466
You can transform Web data
really, really easily.


825
00:48:06,046 --> 00:48:10,096
And you can float a native
interface right over the top


826
00:48:10,096 --> 00:48:13,216
of it, which allows you to
create these rich work flows


827
00:48:13,216 --> 00:48:15,876
that were unimaginable
in previous releases.


828
00:48:16,356 --> 00:48:18,016
So as Damien talked about,


829
00:48:19,266 --> 00:48:20,996
Extensions are secure
by default.


830
00:48:21,416 --> 00:48:23,886
They don't share data
unless you tell them to.


831
00:48:24,116 --> 00:48:26,986
And they have a one-to-one
correspondence


832
00:48:27,246 --> 00:48:28,066
with the hosting app.


833
00:48:28,436 --> 00:48:30,896
That way you have your
own address space in which


834
00:48:30,896 --> 00:48:33,626
to make your mistakes
and your action.


835
00:48:35,406 --> 00:48:37,816
And the last thing we
really want to encourage you


836
00:48:37,816 --> 00:48:39,796
to do is just to have
fun with this feature.


837
00:48:40,346 --> 00:48:43,026
And don't think of it
as sticking new things


838
00:48:43,026 --> 00:48:44,236
onto things like barnacles.


839
00:48:44,276 --> 00:48:47,416
Think of it as constructing
these awesome new workflows


840
00:48:47,826 --> 00:48:51,196
that you were really unable
to explore before now.


841
00:48:53,826 --> 00:48:56,046
For more information,
you can talk to the man


842
00:48:56,046 --> 00:48:57,436
in plaid, Jake Behrens.


843
00:48:58,626 --> 00:49:01,356
Or I'd urge you to read our
excellent documentation,


844
00:49:01,496 --> 00:49:05,956
The App Extension Programing
Guide at developer.apple.com.


845
00:49:06,566 --> 00:49:08,726
If you've never been to
the Apple Developer Forums,


846
00:49:08,936 --> 00:49:10,836
you can interact with
employees like myself,


847
00:49:11,196 --> 00:49:14,316
Aki and Damien there, and
provide peer-to-peer support.


848
00:49:14,316 --> 00:49:17,276
Thank you for coming to
learn about Extensions.


849
00:49:19,236 --> 00:49:21,956
And we can't wait to see what
you guys do with the feature.


850
00:49:22,336 --> 00:49:23,346
Thank you.

