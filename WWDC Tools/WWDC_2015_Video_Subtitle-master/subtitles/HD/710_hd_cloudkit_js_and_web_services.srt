1
00:00:25,516 --> 00:00:33,796
[Applause]


2
00:00:34,296 --> 00:00:34,986
>> CHRIS EDSTROM:
Good afternoon.


3
00:00:35,156 --> 00:00:35,886
My name is Chris.


4
00:00:36,166 --> 00:00:38,256
I'm the manager of
ICloud Web Services


5
00:00:39,066 --> 00:00:41,276
and I couldn't be happier
to be here today to tell you


6
00:00:41,526 --> 00:00:44,326
about the number one feature
request we received last year


7
00:00:44,326 --> 00:00:46,236
for CloudKit, which
is web services.


8
00:00:47,516 --> 00:00:53,126
[Applause]


9
00:00:53,626 --> 00:00:56,136
So this talk expects a
little bit of familiarity


10
00:00:56,136 --> 00:00:58,746
with CloudKit I will be
giving you a brief overview


11
00:00:58,966 --> 00:01:02,006
of the architecture but if you
want a more deep dive we had a


12
00:01:02,006 --> 00:01:03,146
couple of sessions last year.


13
00:01:03,536 --> 00:01:05,196
You can go back and
review those sessions.


14
00:01:06,046 --> 00:01:11,976
So in CloudKit, all of your data
is stored within a container.


15
00:01:12,526 --> 00:01:16,416
Inside of this container
we have a public database


16
00:01:16,816 --> 00:01:20,236
for your app data and
a private database


17
00:01:20,416 --> 00:01:21,686
where your user date is stored.


18
00:01:22,256 --> 00:01:26,236
In the public database,
you have the default zone,


19
00:01:27,516 --> 00:01:30,986
which has records, and
in the private database,


20
00:01:31,116 --> 00:01:32,486
you also have a default zone,


21
00:01:32,486 --> 00:01:37,136
but you can also create custom
zones which add sync semantics


22
00:01:37,556 --> 00:01:40,136
which allow you to answer
the question what has changed


23
00:01:40,136 --> 00:01:42,696
since a given point in time.


24
00:01:42,846 --> 00:01:45,346
Of course, you can create
records in both of these zones.


25
00:01:45,846 --> 00:01:50,556
From the API perspective,
we have the CloudKit Server,


26
00:01:51,936 --> 00:01:54,186
and on the native side we
have the CloudKit Framework,


27
00:01:55,396 --> 00:01:57,456
which your app uses to
interface with the server.


28
00:01:58,696 --> 00:02:01,536
We are introducing
CloudKit Web Services today,


29
00:02:02,696 --> 00:02:04,966
which we have used to
bill the Notes Web app,


30
00:02:04,966 --> 00:02:09,446
and today you can use
to build your web app.


31
00:02:10,735 --> 00:02:15,036
So what exactly is the
CloudKit Web Service?


32
00:02:15,196 --> 00:02:16,116
Well, it's three things.


33
00:02:16,366 --> 00:02:18,906
Number one, it's a JSON
interface to CloudKit.


34
00:02:19,886 --> 00:02:25,296
Number two, it's a web sign-in
with Apple ID and number three,


35
00:02:25,976 --> 00:02:27,086
it's a JavaScript library.


36
00:02:28,716 --> 00:02:31,396
So let's take a look at
the JSON API features.


37
00:02:33,856 --> 00:02:38,326
So your full public and private
database access, you can,


38
00:02:38,326 --> 00:02:41,926
of course, create, read,
update, and delete records.


39
00:02:41,926 --> 00:02:44,636
You can upload and
download assets.


40
00:02:45,906 --> 00:02:46,946
You can query your data.


41
00:02:48,656 --> 00:02:51,056
You can create subscriptions
and receive call backs


42
00:02:51,606 --> 00:02:55,756
when your data changes, you
have user discoverability


43
00:02:55,756 --> 00:02:57,206
where you can find
users' real names.


44
00:02:57,766 --> 00:03:02,656
You can do sync and we
provide authentication.


45
00:03:03,246 --> 00:03:06,776
So this is a long list,
and in fact it means


46
00:03:06,876 --> 00:03:09,426
that we have feature parity
between the native API


47
00:03:09,426 --> 00:03:12,176
and the JavaScript API.


48
00:03:13,516 --> 00:03:18,466
[Applause]


49
00:03:18,966 --> 00:03:21,696
So everything you can do in
the native API you can do


50
00:03:21,696 --> 00:03:25,016
through the JSON API and we have
gone so far to make sure things


51
00:03:25,016 --> 00:03:27,996
like field names and
parameters have the same names


52
00:03:27,996 --> 00:03:29,666
in JavaScript.


53
00:03:30,686 --> 00:03:35,936
And JavaScript promises
to provide completions.


54
00:03:36,866 --> 00:03:38,616
Your code ends up
looking similar


55
00:03:38,616 --> 00:03:40,646
between JavaScript and Swift.


56
00:03:41,146 --> 00:03:43,576
I know many of you


57
00:03:43,576 --> 00:03:46,596
in the audience may already
have a CloudKit application,


58
00:03:46,916 --> 00:03:49,866
but if you don't, let's look
quickly about how to get started


59
00:03:49,946 --> 00:03:51,556
with a new CloudKit application.


60
00:03:52,126 --> 00:03:55,336
So the first thing to do
is to create a container.


61
00:03:56,306 --> 00:03:59,046
You can do this either
through the WWDR portal


62
00:03:59,516 --> 00:04:00,286
or through Xcode.


63
00:04:01,516 --> 00:04:03,416
Once you have the container
you need to create a schema.


64
00:04:03,416 --> 00:04:07,706
You can do this either
through the iCloud dashboard


65
00:04:08,286 --> 00:04:11,066
or your native Apple
create it on demand.


66
00:04:12,576 --> 00:04:14,886
So now you have your CloudKit
application up and running.


67
00:04:15,566 --> 00:04:16,946
Let's enable web access.


68
00:04:18,005 --> 00:04:19,346
This is a three-step process.


69
00:04:20,005 --> 00:04:22,956
Number one, you need to generate
a web service API token.


70
00:04:23,786 --> 00:04:27,796
Number two, you need to set
your login call back mechanism,


71
00:04:28,456 --> 00:04:32,086
and number three, you need to
define your domain restrictions.


72
00:04:32,086 --> 00:04:36,206
So let's take a closer
look at these three steps.


73
00:04:37,266 --> 00:04:39,396
So here is the CloudKit
dashboard.


74
00:04:39,396 --> 00:04:43,016
As you can see, we have added
a new pane called API tokens


75
00:04:43,406 --> 00:04:45,136
and I have already created
my first token here.


76
00:04:50,076 --> 00:04:54,366
So at the top is the token
ID, which is what you pass


77
00:04:54,366 --> 00:04:57,386
in when you make a
web service call,


78
00:04:58,466 --> 00:05:01,486
below that I have chosen post
message as my login call back.


79
00:05:01,986 --> 00:05:03,866
It is for JavaScript
applications I will get a


80
00:05:03,866 --> 00:05:05,966
JavaScript call back
when the user logs in.


81
00:05:06,786 --> 00:05:11,966
Alternatively I could have
chosen to have a URL redirect.


82
00:05:13,296 --> 00:05:15,666
Below that I can set the
origins that are allowed


83
00:05:15,666 --> 00:05:18,656
to access my CloudKit
data through web services.


84
00:05:18,656 --> 00:05:21,736
I have here chosen that any
domain can access my data


85
00:05:22,436 --> 00:05:24,546
but for added security
I could have restricted


86
00:05:24,546 --> 00:05:28,846
to viewer domains so now we
have enabled web services.


87
00:05:29,556 --> 00:05:31,616
Let's get some users to log in.


88
00:05:33,316 --> 00:05:36,446
So authentication is
handled transparently.


89
00:05:37,056 --> 00:05:39,506
What I mean by that is
when a user calls an API


90
00:05:39,506 --> 00:05:41,436
that requires authentication,


91
00:05:41,666 --> 00:05:43,646
we will return a
specially formed payload


92
00:05:44,026 --> 00:05:47,236
with a redirect URL that
you can send your users to.


93
00:05:47,896 --> 00:05:51,176
They then authenticate
with an existing Apple ID


94
00:05:51,496 --> 00:05:55,126
or they can create a new Apple
ID right in the sign-in flow.


95
00:05:56,256 --> 00:05:59,556
And to protect users' privacy
we don't provide user name


96
00:05:59,556 --> 00:06:00,936
or password to your app.


97
00:06:01,756 --> 00:06:04,536
Instead we give you a
stable anonymous identifier


98
00:06:04,686 --> 00:06:05,186
for the user.


99
00:06:05,266 --> 00:06:09,216
So let's put all of
these things together


100
00:06:09,286 --> 00:06:11,826
and let's build a
quick example app.


101
00:06:14,276 --> 00:06:16,466
So we are going to
build a tasks app.


102
00:06:16,756 --> 00:06:22,136
It stores tasks, and the com
dot example dot tasks container.


103
00:06:23,466 --> 00:06:27,876
So let's create our first task.


104
00:06:28,616 --> 00:06:36,996
So what I will do is I will
call the records modify API,


105
00:06:38,646 --> 00:06:39,826
and pass in a JSON body.


106
00:06:40,446 --> 00:06:43,336
This JSON body says to create
a new task it has a unique


107
00:06:43,336 --> 00:06:47,746
identifier task one and the
value of the task is buy milk.


108
00:06:48,736 --> 00:06:51,946
Let's go ahead and send
that over to the server.


109
00:06:52,026 --> 00:06:54,386
So we didn't have an
authenticated user.


110
00:06:55,186 --> 00:06:58,816
So in the response
we get a redirect URL


111
00:06:58,816 --> 00:07:00,846
where we can send the
user to authenticate.


112
00:07:01,406 --> 00:07:04,556
Let's go ahead and
follow that URL.


113
00:07:04,766 --> 00:07:05,766
So here is the sign-in UI.


114
00:07:05,856 --> 00:07:09,786
You will notice it has the
app name and the app icon


115
00:07:10,266 --> 00:07:13,286
and the ability to create
a new Apple ID right here.


116
00:07:14,596 --> 00:07:17,636
We already have one, so
let's go ahead and sign in.


117
00:07:18,536 --> 00:07:21,786
Now, once the user is signed in,
you will get a session ID back


118
00:07:22,096 --> 00:07:24,396
to your application through
the call back mechanism you


119
00:07:24,396 --> 00:07:25,096
defined earlier.


120
00:07:25,746 --> 00:07:30,216
So we can go ahead and append
this session ID to the URL


121
00:07:30,216 --> 00:07:32,666
and send the same request again.


122
00:07:34,836 --> 00:07:35,696
Much better.


123
00:07:36,736 --> 00:07:39,496
Now we receive back a
successful creation.


124
00:07:39,756 --> 00:07:41,646
You can see that the
record name is there,


125
00:07:42,146 --> 00:07:44,846
the change tag is there,
the fields are there


126
00:07:44,906 --> 00:07:46,546
and some more metadata
about the record.


127
00:07:47,526 --> 00:07:50,336
This is a lot of JSON
parsing and you have to worry


128
00:07:50,336 --> 00:07:53,686
about error handling and
throttling and we want


129
00:07:53,686 --> 00:07:55,826
to make this API as
easy to use as possible.


130
00:07:56,476 --> 00:08:01,346
So we are proud to introduce
CloudKit JS a wrapper


131
00:08:01,346 --> 00:08:02,706
on top of the JSON.


132
00:08:02,706 --> 00:08:04,626
To talk about this I would


133
00:08:04,626 --> 00:08:06,436
like to invite Onar
Vikingstad to the stage.


134
00:08:07,256 --> 00:08:07,323
I'm.


135
00:08:13,566 --> 00:08:16,556
>> ONAR VIKINGSTAD:
Engineering Manager at iCloud.


136
00:08:16,556 --> 00:08:21,196
And I'm here to talk
about CloudKit JS.


137
00:08:21,196 --> 00:08:26,076
CloudKit JS lets you connect
to CloudKit from JavaScript


138
00:08:27,146 --> 00:08:30,956
and it's a small self-contained
library that works well


139
00:08:30,956 --> 00:08:33,876
with any framework or library
you might already be using


140
00:08:33,905 --> 00:08:34,405
on the web.


141
00:08:35,816 --> 00:08:36,806
It's also important to note


142
00:08:36,806 --> 00:08:39,626
that this is a low level
transport API which means


143
00:08:39,626 --> 00:08:42,395
that it doesn't really
intend to be a data store.


144
00:08:42,395 --> 00:08:45,196
It doesn't allow a lot
of abstraction on top


145
00:08:45,196 --> 00:08:48,526
of the JSON API so if you are
already using a data store


146
00:08:48,986 --> 00:08:53,596
please keep using that
and you should be able


147
00:08:53,596 --> 00:08:56,066
to plug CloudKit JS
straight into it.


148
00:08:57,296 --> 00:08:59,576
Also it allows for
an easy transition


149
00:08:59,576 --> 00:09:00,656
from CloudKit Framework.


150
00:09:01,266 --> 00:09:03,886
So you might already be using
CloudKit Framework on iOS


151
00:09:03,886 --> 00:09:07,966
and OS X in the terms and
concepts, method names


152
00:09:07,966 --> 00:09:09,416
and class names are
going to be the same


153
00:09:10,046 --> 00:09:12,436
so it will be an
easy transition.


154
00:09:13,346 --> 00:09:15,426
That said, there will
be some differences.


155
00:09:15,766 --> 00:09:18,026
This is the web, after
all, and it's JavaScript


156
00:09:18,026 --> 00:09:20,246
so there will be
a few differences,


157
00:09:20,246 --> 00:09:22,976
for instance we are using
JavaScript promises for all


158
00:09:22,976 --> 00:09:24,176
of the asynchronous behavior


159
00:09:24,676 --> 00:09:30,316
and we will see examples
of that later on.


160
00:09:31,036 --> 00:09:34,436
In terms of browser
support, we support all


161
00:09:34,436 --> 00:09:38,996
of the major browsers you would
expect Safari, FireFox, Chrome,


162
00:09:39,486 --> 00:09:41,716
Internet Explorer and
the new Microsoft Edge.


163
00:09:42,606 --> 00:09:47,586
We support Note JS if
you want to do server


164
00:09:47,586 --> 00:09:53,816
to server connections
on behalf of the user.


165
00:09:53,816 --> 00:09:56,136
So before we start looking more


166
00:09:56,136 --> 00:09:58,296
at the API let me
give you a quick demo.


167
00:09:58,296 --> 00:10:11,726
So what we are looking at here
is the CloudKit catalog sample


168
00:10:11,726 --> 00:10:12,356
code project.


169
00:10:13,106 --> 00:10:15,576
This is available both as
a downloadable zip file,


170
00:10:15,576 --> 00:10:17,336
you can get this on
the developer website,


171
00:10:17,336 --> 00:10:20,446
but what we are looking at
here is the hosted version


172
00:10:20,446 --> 00:10:21,576
which is also available.


173
00:10:21,886 --> 00:10:24,246
So it is providing
live code examples


174
00:10:24,246 --> 00:10:25,846
that you can execute
in any browser.


175
00:10:26,616 --> 00:10:29,076
You will see a list of
features on the left.


176
00:10:29,076 --> 00:10:30,746
We are looking at
the ReadMe right now.


177
00:10:31,306 --> 00:10:33,406
This is giving you some
instructions on how


178
00:10:33,406 --> 00:10:36,026
to get started on CloudKit JS.


179
00:10:36,236 --> 00:10:38,556
Let's move to the first
section called authentication.


180
00:10:39,076 --> 00:10:41,096
So you will notice each of these
sections have a description


181
00:10:41,096 --> 00:10:43,016
on top and this example
is telling you how


182
00:10:43,056 --> 00:10:47,446
to use authentication, and below
that you have a code example.


183
00:10:47,836 --> 00:10:51,286
So this code snippet
specifically is checking


184
00:10:51,286 --> 00:10:52,896
for authentication
state of the user.


185
00:10:53,256 --> 00:10:55,366
If the user is not
already signed in,


186
00:10:55,366 --> 00:10:58,536
it's going to present
a signed in button.


187
00:10:58,816 --> 00:11:01,556
And you can actually go ahead
on top here and run this code.


188
00:11:01,556 --> 00:11:03,636
So if I click this
run code button,


189
00:11:04,166 --> 00:11:06,846
it's going to execute this code,
and you will see it scrolls


190
00:11:06,846 --> 00:11:08,016
down through a section


191
00:11:08,436 --> 00:11:10,656
and it tells us we aren
unauthenticated user


192
00:11:10,656 --> 00:11:13,516
at this point and we look
at the sign-in button.


193
00:11:13,516 --> 00:11:16,856
I can go ahead and click
the sign-in button.


194
00:11:17,576 --> 00:11:24,806
I type in any Apple
ID and password.


195
00:11:28,886 --> 00:11:32,116
And you notice the
window closed.


196
00:11:32,116 --> 00:11:34,946
And that was the Apple
hosted authentication page.


197
00:11:35,336 --> 00:11:37,476
So at this point your web
application is signed in.


198
00:11:37,476 --> 00:11:40,806
This is the sample app and
you see we have the name


199
00:11:40,806 --> 00:11:43,166
of the user, first
and last name as well


200
00:11:43,166 --> 00:11:46,886
as the sign-out button
instead of the sign-in button.


201
00:11:46,886 --> 00:11:48,356
This is another feature
of CloudKit


202
00:11:48,356 --> 00:11:49,646
which is discoverability.


203
00:11:50,136 --> 00:11:53,726
If the user has opted in, the
user can choose to share first


204
00:11:53,726 --> 00:11:57,386
and last name with a developer
as well as being discoverable


205
00:11:57,386 --> 00:11:59,576
in the container for
other users to find them.


206
00:12:00,426 --> 00:12:02,576
So now that we have the first
and last name we are using


207
00:12:02,576 --> 00:12:05,666
that here to populate
the top right corner.


208
00:12:06,236 --> 00:12:07,076
All right.


209
00:12:07,266 --> 00:12:11,446
So now that we are signed
in, we can do some operations


210
00:12:11,446 --> 00:12:12,516
so let's go to records.


211
00:12:14,086 --> 00:12:15,976
And this is showing you
how we can save a record


212
00:12:15,976 --> 00:12:17,126
in the private database.


213
00:12:18,096 --> 00:12:20,366
So we see a few fields
on the top here.


214
00:12:20,826 --> 00:12:21,826
We have the record name,


215
00:12:21,896 --> 00:12:23,846
which is the unique
identifier of the record.


216
00:12:24,666 --> 00:12:27,016
We have a zone name
which is the default zone


217
00:12:27,016 --> 00:12:29,166
but it will be any custom
zone that you set up,


218
00:12:29,596 --> 00:12:32,556
and if you have three custom
field names that are defined


219
00:12:32,556 --> 00:12:33,436
in the CloudKit schema.


220
00:12:34,326 --> 00:12:36,416
So in this example,
we have a name field


221
00:12:36,416 --> 00:12:37,526
which is the string value.


222
00:12:37,616 --> 00:12:40,476
We have a location field,
which is the geo location value


223
00:12:40,476 --> 00:12:44,566
and then we have an asset field
which lets you upload a file.


224
00:12:44,566 --> 00:12:47,736
So I will go ahead
and choose a file.


225
00:12:47,736 --> 00:12:52,866
I will choose this green
field landscape J Peg.


226
00:12:53,786 --> 00:12:55,496
And I'm going to
go back up on top


227
00:12:55,496 --> 00:12:58,876
and give this the
name landscape 1.


228
00:12:58,876 --> 00:13:01,086
This is the record name which
is the unique identifier.


229
00:13:01,706 --> 00:13:05,006
And I will change the name here
to just called it green field.


230
00:13:05,446 --> 00:13:09,446
So now that I have the field
filled out I can run the code


231
00:13:09,446 --> 00:13:12,106
and it will save the record
to the database as well


232
00:13:12,106 --> 00:13:13,846
as upload assets
to asset storage.


233
00:13:14,596 --> 00:13:18,416
So you see when it's completed
we are left with a result


234
00:13:18,416 --> 00:13:21,036
and this is actually what
the server responded with,


235
00:13:21,416 --> 00:13:24,026
effectively with the JSON
we are representing it here


236
00:13:24,026 --> 00:13:24,526
in the table.


237
00:13:25,096 --> 00:13:27,956
We have a few metadata
fields as well


238
00:13:27,956 --> 00:13:29,356
as the three custom feel fields.


239
00:13:29,406 --> 00:13:32,476
The green field, the
location and the link


240
00:13:32,476 --> 00:13:33,286
to download the asset.


241
00:13:33,356 --> 00:13:40,056
So just to show you this
actually got stored we can go


242
00:13:40,056 --> 00:13:47,746
to fetch record and I can type
in landscape 1, run this code,


243
00:13:47,746 --> 00:13:50,056
and we have the same
record again.


244
00:13:50,056 --> 00:13:52,426
That's how simple it
is to save records


245
00:13:52,426 --> 00:13:54,956
with CloudKit, with CloudKit JS.


246
00:13:55,096 --> 00:14:00,296
Now, let's go and do another
feature called querying.


247
00:14:00,396 --> 00:14:04,586
So to do that, I will first go
ahead and sign the user out.


248
00:14:05,876 --> 00:14:09,856
So queries allow you
to get subset of data


249
00:14:09,856 --> 00:14:12,876
from the database, and
in this code example,


250
00:14:12,876 --> 00:14:14,946
we are showing you how we
can query the public database


251
00:14:15,426 --> 00:14:17,866
and if you set up the
security roles appropriately


252
00:14:17,866 --> 00:14:20,726
on the schema, you can
actually query for data


253
00:14:20,726 --> 00:14:23,376
in the public database even if
the user is not authenticated


254
00:14:23,786 --> 00:14:25,836
that we are showing here.


255
00:14:25,836 --> 00:14:27,796
I can go ahead and run this code


256
00:14:27,796 --> 00:14:32,646
and this example is basically
using the current location


257
00:14:32,706 --> 00:14:37,816
in a Monscone center to send
a query and sort results based


258
00:14:37,816 --> 00:14:40,106
on proximity to where
we are currently.


259
00:14:40,176 --> 00:14:43,476
I can go ahead and run the code.


260
00:14:44,656 --> 00:14:45,936
And I get back two records.


261
00:14:46,426 --> 00:14:49,486
The first one being Iceland,
and the second one being Italy.


262
00:14:49,486 --> 00:14:52,046
And Iceland is closer
to where we are


263
00:14:52,046 --> 00:14:53,566
than Italy, so that makes sense.


264
00:14:53,566 --> 00:14:57,106
And so I'm not going
to go through all


265
00:14:57,106 --> 00:14:58,086
of the additional features


266
00:14:58,636 --> 00:15:00,526
but we encourage
you to check it out.


267
00:15:00,526 --> 00:15:03,306
You can go to
developer@Apple.com/CloudKit


268
00:15:03,766 --> 00:15:07,576
and you can run this on
any browser yourself.


269
00:15:10,516 --> 00:15:18,886
[Applause]


270
00:15:19,386 --> 00:15:24,486
So CloudKit is the foundation
for a lot of our new services


271
00:15:24,486 --> 00:15:27,666
at Apple including iCloud
drive and iCloud photo library.


272
00:15:28,436 --> 00:15:32,276
This year we also
introduced a notes application


273
00:15:32,706 --> 00:15:35,026
for iOS and OS X.


274
00:15:35,106 --> 00:15:37,386
This is also coming to
the CloudKit platform,


275
00:15:37,386 --> 00:15:39,666
but in addition to
the notes application


276
00:15:39,666 --> 00:15:46,686
on native we have a notes
web application on Apple.com.


277
00:15:46,826 --> 00:15:50,766
In fact, it's using CloudKit JS
in exactly the same way as you


278
00:15:50,766 --> 00:15:52,146
as a developer can now use it.


279
00:15:52,636 --> 00:15:54,676
There is no additional
Apple magic here.


280
00:15:55,416 --> 00:15:59,376
So hopefully you are as excited
about CloudKit JS as we are


281
00:15:59,376 --> 00:16:01,966
and see a lot of new
possibilities here and want


282
00:16:01,966 --> 00:16:03,046
to know how to get started.


283
00:16:04,346 --> 00:16:05,586
So let's take a look.


284
00:16:06,886 --> 00:16:12,096
So first off, we need to make
sure you insert a script tag


285
00:16:12,096 --> 00:16:15,656
on your web page, and
you do this by pointing


286
00:16:15,656 --> 00:16:18,276
to the CD unhosted
version of CloudKit JS.


287
00:16:18,586 --> 00:16:23,046
So this will get CloudKit JS
included, and then secondly,


288
00:16:23,046 --> 00:16:24,776
you need to configure
the CloudKit instance.


289
00:16:24,776 --> 00:16:27,576
So you are going to have the
CloudKit name space available


290
00:16:27,576 --> 00:16:30,376
and you can call the
CloudKit configure method


291
00:16:30,956 --> 00:16:32,776
and you give it a
container identifier


292
00:16:33,256 --> 00:16:34,676
that your application is using.


293
00:16:35,116 --> 00:16:37,306
The environment you want to
target, either production


294
00:16:37,306 --> 00:16:40,266
or development, and then
you specify the API token


295
00:16:40,436 --> 00:16:43,206
that you saw Chris generate
through the CloudKit dashboard.


296
00:16:43,756 --> 00:16:44,616
That's all you need.


297
00:16:44,616 --> 00:16:51,336
At this point you are ready to
start making CloudKit API calls.


298
00:16:51,516 --> 00:16:55,126
Next, you probably want to
authenticate your users just


299
00:16:55,126 --> 00:16:56,606
like we saw in the sample app.


300
00:16:57,526 --> 00:17:01,306
So on iOS and OS X this is
straight forward with CloudKit.


301
00:17:01,986 --> 00:17:04,925
All you need to do since
most users are already signed


302
00:17:04,925 --> 00:17:09,935
into iCloud on the device is
to call the fetch user method


303
00:17:09,935 --> 00:17:12,596
on the container and you
get back a user record


304
00:17:13,276 --> 00:17:16,066
and this user record is going
to have a stable identifier.


305
00:17:16,826 --> 00:17:19,056
So this is all you really need
to do to authenticate users


306
00:17:19,056 --> 00:17:21,046
through CloudKit on
the native devices.


307
00:17:21,566 --> 00:17:23,986
There is no explicit
login, there is no UI.


308
00:17:24,126 --> 00:17:25,336
It's all seamless.


309
00:17:25,976 --> 00:17:30,686
On the web, however, it's going
to work a little bit differently


310
00:17:31,116 --> 00:17:33,076
in that the browser is not
already going to be signed


311
00:17:33,076 --> 00:17:36,526
in so you have to provide a
location for the sign-in button.


312
00:17:36,616 --> 00:17:38,156
Like we saw on the sample app,


313
00:17:38,156 --> 00:17:40,216
clicking it will
open the new window.


314
00:17:40,216 --> 00:17:42,556
There is an Apple hosted
authentication page


315
00:17:43,316 --> 00:17:46,796
and you notice on this
page we have both the iCon


316
00:17:46,796 --> 00:17:49,186
of the application as well as
the name of the application,


317
00:17:49,476 --> 00:17:51,546
and this is coming
out of ITunes Connect


318
00:17:51,546 --> 00:17:53,516
and it's published
in the App Store.


319
00:17:54,086 --> 00:17:57,696
And the user types in their
user name and credentials.


320
00:17:57,696 --> 00:17:59,586
This obviously only
goes back to Apple.


321
00:17:59,586 --> 00:18:02,116
There is also a two-step
verification


322
00:18:02,116 --> 00:18:03,926
if the account is
set up for that.


323
00:18:04,496 --> 00:18:08,366
And when this process completes,
the window is going to close


324
00:18:08,366 --> 00:18:10,126
and it's going to send
back a post message


325
00:18:10,166 --> 00:18:13,556
to the opener window and it will
contain the CloudKit session.


326
00:18:13,556 --> 00:18:16,616
So at this point
your CloudKit JS,


327
00:18:16,616 --> 00:18:18,266
your web application
is going to be able


328
00:18:18,266 --> 00:18:21,296
to start making authenticated
calls to CloudKit.


329
00:18:24,536 --> 00:18:29,236
So to implement authentication
on your page, you first have


330
00:18:29,236 --> 00:18:31,106
to provide a location
for a sign in button.


331
00:18:31,726 --> 00:18:34,856
So you set a development to give
it the ID Apple sign-in button.


332
00:18:36,376 --> 00:18:39,306
Secondly, you have to call
the method called set up off,


333
00:18:39,306 --> 00:18:40,756
and this is going to check


334
00:18:40,756 --> 00:18:42,296
for the authentication
state of the user.


335
00:18:42,296 --> 00:18:47,066
So if the user is already signed
in, a user info object is going


336
00:18:47,066 --> 00:18:50,526
to come back, and that's
all you need to look for.


337
00:18:50,816 --> 00:18:53,626
In addition to user info object
is going to have a record name


338
00:18:53,926 --> 00:18:55,806
and this is the stable
identifier


339
00:18:55,806 --> 00:18:57,056
that we just looked at.


340
00:18:57,056 --> 00:18:59,956
So this stable identifier
is going to be the same now


341
00:18:59,956 --> 00:19:02,926
on the web as it is on iOS
and OS X so you have a way


342
00:19:02,926 --> 00:19:06,326
of referencing the same user
across all of the platforms.


343
00:19:06,956 --> 00:19:11,616
So in addition to checking
for authentication state,


344
00:19:11,616 --> 00:19:14,036
you also need to
handle what happens


345
00:19:14,036 --> 00:19:15,646
when user signs in or signs out.


346
00:19:16,716 --> 00:19:20,266
So you call when user
signs in on the container,


347
00:19:20,616 --> 00:19:23,956
and you get back a promise,
and it's going to resolve


348
00:19:23,956 --> 00:19:25,286
as soon as the user signs in.


349
00:19:25,826 --> 00:19:30,806
And it's exactly the same
for when the user signs out.


350
00:19:32,516 --> 00:19:36,546
So beyond those default
capabilities in CloudKit JS


351
00:19:36,546 --> 00:19:37,586
around authentication.


352
00:19:37,936 --> 00:19:39,986
We also provide toggles and ways


353
00:19:40,066 --> 00:19:42,626
to customize how you
handle authentication.


354
00:19:43,176 --> 00:19:47,746
So this next example is showing
you how you can actually persist


355
00:19:47,746 --> 00:19:51,066
the AUTH between sessions
so CloudKit is not going


356
00:19:51,066 --> 00:19:54,806
to write cookies on your
domain so if you want a cookie


357
00:19:54,806 --> 00:19:57,376
to be written to store
the AUTH session,


358
00:19:57,376 --> 00:19:59,176
you have to set the
persist property


359
00:19:59,176 --> 00:20:00,676
to true in the configuration.


360
00:20:01,976 --> 00:20:05,516
Now, instead of cookies,
you might actually want


361
00:20:05,516 --> 00:20:06,976
to store the session
in some other way.


362
00:20:07,626 --> 00:20:11,726
So this is showing you a couple
of hooks in the configuration.


363
00:20:11,726 --> 00:20:14,636
So we have a put token and a get
token method and these are going


364
00:20:14,636 --> 00:20:18,696
to get called anytime for put
token anytime cloud JS receives


365
00:20:18,696 --> 00:20:20,936
token from the server.


366
00:20:20,936 --> 00:20:28,676
So one example here might be
you want to store the session


367
00:20:28,676 --> 00:20:31,166
in local storage or perhaps
you might want to store it


368
00:20:31,166 --> 00:20:33,346
in your own server so
you can make server


369
00:20:33,346 --> 00:20:36,046
to server calls based
on behalf of the user.


370
00:20:40,096 --> 00:20:42,806
So next let's talk
about record operations.


371
00:20:43,686 --> 00:20:47,156
And just like Chris showed
you earlier with the JSON.


372
00:20:47,866 --> 00:20:51,986
A record in CloudKit JS is
basically an object like this.


373
00:20:52,636 --> 00:20:56,196
So we have a record with
a record named task 1.


374
00:20:56,876 --> 00:20:57,916
We have record type tasks,


375
00:20:57,916 --> 00:21:02,226
and we have some metadata
fields created and modified


376
00:21:02,226 --> 00:21:05,616
which will contain the user that
created and modified the record


377
00:21:05,616 --> 00:21:08,016
as well as the time stamp.


378
00:21:08,016 --> 00:21:11,006
The record change tag, which
is the version of this record


379
00:21:11,656 --> 00:21:14,656
for conflict resolution,
and then comes all


380
00:21:14,656 --> 00:21:16,466
of your custom fields below


381
00:21:16,466 --> 00:21:17,896
that that you have
defined in the schema.


382
00:21:18,376 --> 00:21:22,776
In this example we just have one
task name, it's a type string


383
00:21:22,776 --> 00:21:24,196
and the value of buy milk.


384
00:21:24,756 --> 00:21:31,286
Now, obviously you might want
to store other types of fields


385
00:21:31,396 --> 00:21:36,406
than strings so this is
giving you a comparison


386
00:21:36,446 --> 00:21:38,596
of what those look like
compared to iOS and OS X.


387
00:21:39,396 --> 00:21:41,166
So in CloudKit framework
we have a string


388
00:21:41,166 --> 00:21:43,626
but in CloudKit JS we just
use JavaScript strings.


389
00:21:44,276 --> 00:21:45,556
Same thing for number,


390
00:21:46,516 --> 00:21:49,506
for NS data we use basic
code 64 and coded binary.


391
00:21:49,506 --> 00:21:52,526
NS data we have a
JavaScript number


392
00:21:52,526 --> 00:21:54,826
which is unit time
in milliseconds.


393
00:21:56,306 --> 00:21:59,366
So for the more complex
objects like CL location,


394
00:21:59,366 --> 00:22:03,156
we have a location object,
and a reference object


395
00:22:03,156 --> 00:22:06,276
and also an asset object,
and we ask you to look


396
00:22:06,276 --> 00:22:12,806
in the documentation for how
each one of these are defined.


397
00:22:12,946 --> 00:22:16,456
So in terms of creating a
record, you can go ahead


398
00:22:16,456 --> 00:22:18,056
and define one of
these object literals.


399
00:22:18,206 --> 00:22:21,166
In this example we're just
saying record type is tasks


400
00:22:22,136 --> 00:22:26,516
and we have one field task
name with a value of buy milk


401
00:22:26,516 --> 00:22:29,806
and you can go ahead and
call the save record method


402
00:22:30,376 --> 00:22:32,426
on the database object.


403
00:22:32,996 --> 00:22:35,966
You notice though in this case
we didn't actually give it the


404
00:22:35,966 --> 00:22:36,446
record name.


405
00:22:36,916 --> 00:22:39,126
So the record name is unique
identifier of a record.


406
00:22:39,526 --> 00:22:41,716
So by not specifying that
the server is actually going


407
00:22:41,716 --> 00:22:43,656
to go ahead and generate
one for us.


408
00:22:44,206 --> 00:22:48,046
Also we don't specify the string
type for this particular field,


409
00:22:48,586 --> 00:22:50,586
so CloudKit JS will do
some type inference here


410
00:22:50,586 --> 00:22:53,736
and it will figure out that
this value is fully a string


411
00:22:53,736 --> 00:22:56,986
to you have to specify this for
all of the basic types we have.


412
00:23:01,416 --> 00:23:05,646
So next we want to talk about
queries, and this is going


413
00:23:05,646 --> 00:23:08,396
to work a little bit
different on the web


414
00:23:08,396 --> 00:23:09,896
through the JavaScript API.


415
00:23:10,956 --> 00:23:15,456
So on iOS and OS X in foundation
framework we have NSPredicate.


416
00:23:16,256 --> 00:23:22,016
And NSPredicate is great but
it's not really that natural


417
00:23:22,016 --> 00:23:25,026
for the web and it
doesn't really conform well


418
00:23:25,026 --> 00:23:27,556
to the JSON API we are exposing
through the web services


419
00:23:28,486 --> 00:23:31,106
so we have something that looks
very similar to Java literals


420
00:23:31,106 --> 00:23:34,126
for records in that you just
define a query like this.


421
00:23:34,246 --> 00:23:36,796
In this example we are
saying record type is tasks


422
00:23:37,666 --> 00:23:41,156
and we call perform query on
the database, and we are going


423
00:23:41,156 --> 00:23:45,336
to get back all of the
records of type tasks.


424
00:23:45,506 --> 00:23:48,156
Now, you can do something
a bit more sophisticated.


425
00:23:48,236 --> 00:23:50,746
So in this next example we
are providing some options


426
00:23:51,406 --> 00:23:52,736
to the perform query method.


427
00:23:53,336 --> 00:23:55,086
So we are saying this
hard key is task name.


428
00:23:55,086 --> 00:23:57,226
We are only going to get
back the task name field


429
00:23:57,226 --> 00:23:57,976
from every record.


430
00:23:57,976 --> 00:24:03,406
We are limiting the result set
to ten and we will limit records


431
00:24:03,486 --> 00:24:09,296
in the all task custom zone.


432
00:24:09,506 --> 00:24:13,786
So queries also allow you
to go and specify a filter.


433
00:24:14,536 --> 00:24:17,956
So in this next example, we
are saying still, you know,


434
00:24:17,956 --> 00:24:20,616
we want to look for record
types of tasks but we only want


435
00:24:20,616 --> 00:24:22,286
to get back tasks
of priority one.


436
00:24:23,276 --> 00:24:24,826
And we call it perform query


437
00:24:24,916 --> 00:24:27,386
and we get back all
task with priority one.


438
00:24:28,326 --> 00:24:31,096
You notice here we are
using the equals comparators


439
00:24:31,096 --> 00:24:33,606
and we have a lot more
comparators available


440
00:24:33,606 --> 00:24:36,296
and it depends on the field
type you are querying on so look


441
00:24:36,296 --> 00:24:38,066
in the field documentation


442
00:24:38,066 --> 00:24:43,626
for where each one
of those are defined.


443
00:24:43,626 --> 00:24:46,356
As you saw earlier, we were
limiting the result set


444
00:24:46,656 --> 00:24:49,056
and so the question
is how do you paginate


445
00:24:49,056 --> 00:24:50,156
through the results.


446
00:24:50,156 --> 00:24:53,516
So this is showing
one example of that.


447
00:24:53,516 --> 00:24:54,876
So results limits at 10.


448
00:24:54,876 --> 00:24:58,966
So we will get back
the first 10 records


449
00:24:58,966 --> 00:25:02,616
when this promise resolves but
there is more coming property


450
00:25:02,616 --> 00:25:03,576
on the response object.


451
00:25:03,576 --> 00:25:05,996
So this is telling
us more records


452
00:25:05,996 --> 00:25:07,956
to fetch beyond the
10 we just got


453
00:25:08,446 --> 00:25:11,716
so we can pass the response
object back to perform query


454
00:25:11,986 --> 00:25:15,006
and CloudKit JS will do all of
the work here for us in terms


455
00:25:15,006 --> 00:25:17,966
of fetching the next set of
ten records from where we are.


456
00:25:18,666 --> 00:25:21,286
And in this example we are
showing should we can chain


457
00:25:21,286 --> 00:25:22,306
these promises together.


458
00:25:22,306 --> 00:25:26,786
So next assets.


459
00:25:26,956 --> 00:25:32,046
So assets work a little
bit differently in CloudKit


460
00:25:32,216 --> 00:25:34,526
than the other field types.


461
00:25:35,326 --> 00:25:38,266
So assets are actually not
stored with the record itself,


462
00:25:38,266 --> 00:25:41,396
assets are stored outside in
something we call asset storage.


463
00:25:41,776 --> 00:25:43,406
So the record simply
has a reference


464
00:25:43,436 --> 00:25:44,846
to the asset and asset storage.


465
00:25:45,766 --> 00:25:49,136
The good news is CloudKit JS
handles this seamlessly for you.


466
00:25:49,886 --> 00:25:53,286
In this example we have a
web page with input element


467
00:25:53,656 --> 00:25:55,726
and lets users select
a file like this one


468
00:25:55,726 --> 00:25:57,266
in the CloudKit catalogue app.


469
00:25:58,246 --> 00:26:00,306
So when a file is selected,


470
00:26:00,506 --> 00:26:03,576
the handle file select
function is going to get called,


471
00:26:04,466 --> 00:26:06,746
and all we need to do is just
get a reference to the file,


472
00:26:07,526 --> 00:26:09,056
and we can use that as the value


473
00:26:09,056 --> 00:26:11,466
for the asset field
we are saving.


474
00:26:11,996 --> 00:26:14,416
So CloudKit JS is here going
to do the work for us in terms


475
00:26:14,416 --> 00:26:17,886
of uploading the asset to asset
storage and then save the record


476
00:26:18,256 --> 00:26:25,876
in the database with a
reference to the asset.


477
00:26:26,096 --> 00:26:29,626
Downloading assets even simpler
in that when you are asking


478
00:26:29,626 --> 00:26:32,356
for a field that has
an asset, you are going


479
00:26:32,356 --> 00:26:33,786
to get back a download URL.


480
00:26:33,786 --> 00:26:37,606
In this example we are fetching
one record, a user record,


481
00:26:38,326 --> 00:26:42,136
and you notice here the value
has a download URL property,


482
00:26:42,516 --> 00:26:44,906
and you can go ahead and
fetch the bits from there


483
00:26:44,906 --> 00:26:46,486
or maybe use this as the source


484
00:26:46,616 --> 00:26:48,846
of your image element,
for instance.


485
00:26:52,716 --> 00:26:55,666
So another great feature of
CloudKit is subscriptions


486
00:26:55,666 --> 00:26:56,636
and push notifications.


487
00:26:57,886 --> 00:27:01,436
And all pushes to
Apple devices go


488
00:27:01,436 --> 00:27:03,096
through Apple Push
Notification Service.


489
00:27:03,946 --> 00:27:06,916
Now, traditionally
you had to set


490
00:27:06,916 --> 00:27:09,906
up your own third party
server for this to work.


491
00:27:09,906 --> 00:27:13,196
So you had to get your own
server with your own certificate


492
00:27:13,256 --> 00:27:16,106
with your own server
logic and you had to push,


493
00:27:16,106 --> 00:27:18,496
send pushes through that way.


494
00:27:19,616 --> 00:27:22,666
However, with CloudKit,
there is no longer necessary.


495
00:27:22,666 --> 00:27:26,906
You can simply set up CloudKit
Subscriptions and these act


496
00:27:27,056 --> 00:27:28,256
like triggers in a database.


497
00:27:28,256 --> 00:27:31,156
So these are going to look
for changes in data and send


498
00:27:31,156 --> 00:27:33,236
out pushes accordingly
when they happen.


499
00:27:34,296 --> 00:27:36,966
And now with CloudKit JS the
web will be another client


500
00:27:36,966 --> 00:27:37,496
in this mix.


501
00:27:38,106 --> 00:27:40,276
So we are going to able to
receive the exact same pushes


502
00:27:40,276 --> 00:27:45,396
to the web as we
are to iOS and OS X.


503
00:27:45,696 --> 00:27:48,656
So to receive pushes you
have to set up subscriptions.


504
00:27:49,446 --> 00:27:52,656
This first example is showing
you a zone subscription.


505
00:27:53,376 --> 00:27:58,456
To subscription type is zone,
subscription ID is change tasks


506
00:27:59,126 --> 00:28:01,536
and we give is zone
ID of all tasks.


507
00:28:01,666 --> 00:28:05,276
I would go ahead and save the
subscription with the database.


508
00:28:06,246 --> 00:28:08,136
So this will start
looking for changes


509
00:28:08,196 --> 00:28:11,316
so any time something changes
in the all tasks custom zone.


510
00:28:11,626 --> 00:28:12,716
It will send pushes


511
00:28:12,786 --> 00:28:18,406
to all clients connected
to the same account.


512
00:28:19,616 --> 00:28:23,066
So subscriptions also allow
you to base them on a query


513
00:28:23,956 --> 00:28:26,306
so this next example we are
setting up a subscription,


514
00:28:26,306 --> 00:28:29,396
a query subscription that will
fire anything that's created,


515
00:28:29,396 --> 00:28:32,676
updated or deleted in
the all task custom zone


516
00:28:33,206 --> 00:28:36,126
and then we specify a query
so this particular query is


517
00:28:36,156 --> 00:28:39,506
like when we fetch for
records any time a task


518
00:28:39,506 --> 00:28:42,816
of priority one is
created, updated or deleted,


519
00:28:43,316 --> 00:28:49,556
a push will get sent out and
that's all we have to do.


520
00:28:49,826 --> 00:28:53,446
So on the website, you have
to implement two things,


521
00:28:54,186 --> 00:28:57,086
first you have to implement
register for notifications.


522
00:28:57,536 --> 00:29:00,116
This will go ahead and fetch
a token from the server


523
00:29:00,116 --> 00:29:02,036
that we can use with Apple
Push Notification Service


524
00:29:02,296 --> 00:29:03,656
and also park the connection


525
00:29:04,086 --> 00:29:06,456
with Apple Push Connection
Service.


526
00:29:07,206 --> 00:29:12,076
And secondly, you need to
call add notification listener


527
00:29:12,376 --> 00:29:15,366
which is going to get called any
time a notification is received


528
00:29:15,366 --> 00:29:16,096
on a web page.


529
00:29:20,996 --> 00:29:25,906
So last, let me cover a few
best practices with CloudKit JS.


530
00:29:26,476 --> 00:29:29,796
So as we saw earlier, you
should dynamically link


531
00:29:29,796 --> 00:29:31,636
to the CDN hosted
version of CloudKit JS.


532
00:29:31,636 --> 00:29:34,286
This is important to you
get the latest updates


533
00:29:34,286 --> 00:29:36,516
and security fixes as
we make them available


534
00:29:36,796 --> 00:29:40,166
and it also insures a low
latency delivery of this asset


535
00:29:40,336 --> 00:29:42,816
through our vast accomplished
distribution network


536
00:29:43,156 --> 00:29:45,526
and it's all for
free which is great.


537
00:29:46,496 --> 00:29:49,196
Secondly, you should
consider loading CloudKit JS


538
00:29:49,196 --> 00:29:50,866
asynchronously on your page.


539
00:29:50,936 --> 00:29:52,426
This is a good suggestion


540
00:29:52,426 --> 00:29:55,106
for any third party library
you might load on the web page


541
00:29:55,686 --> 00:29:59,256
and it will avoid any blocking
and impact on user experience


542
00:29:59,406 --> 00:30:05,396
and last you want to make sure
you handle the request responses


543
00:30:05,966 --> 00:30:07,156
so the new free limits


544
00:30:07,156 --> 00:30:10,526
of CloudKit are really
generous including the limits


545
00:30:10,526 --> 00:30:11,216
for requests.


546
00:30:11,926 --> 00:30:14,616
That said you might be
retrieving bursts of traffic


547
00:30:14,616 --> 00:30:16,076
to your website, so
you want to make sure


548
00:30:16,076 --> 00:30:17,586
that your client is
properly backing up.


549
00:30:18,096 --> 00:30:21,516
If it's retrieving requests
through all responses.


550
00:30:22,236 --> 00:30:25,646
So you can also look into how
it can batch multiple operations


551
00:30:25,646 --> 00:30:28,106
in a single request and
we do have a batch API


552
00:30:28,826 --> 00:30:32,096
with CloudKit JS and
if you are interested


553
00:30:32,096 --> 00:30:34,626
in topic you should go
to the CloudKit tips


554
00:30:34,626 --> 00:30:35,766
and tricks session tomorrow.


555
00:30:36,126 --> 00:30:39,196
They will talk more about the
request throttling across all


556
00:30:39,196 --> 00:30:41,016
of CloudKit and not
just web specifically.


557
00:30:41,746 --> 00:30:42,946
So that's it.


558
00:30:43,066 --> 00:30:44,706
That's CloudKit JS.


559
00:30:44,706 --> 00:30:47,026
We really look forward to
seeing what you are going


560
00:30:47,026 --> 00:30:47,586
to be building with it.


561
00:30:47,826 --> 00:30:50,006
Please stop by the labs with
any questions you might have.


562
00:30:50,006 --> 00:30:51,826
And now I will hand
it back to Chris.


563
00:30:52,516 --> 00:31:02,116
[Applause]


564
00:31:02,616 --> 00:31:03,416
>> CHRIS EDSTROM: Thanks Onar.


565
00:31:04,596 --> 00:31:11,246
So in summary, the CloudKit Web
Services provide a full parity


566
00:31:11,246 --> 00:31:14,066
interface to interact with
your CloudKit data on the web.


567
00:31:15,396 --> 00:31:17,916
They are often on a
per container basis.


568
00:31:18,556 --> 00:31:22,276
We handle authentication,
metadata storage,


569
00:31:22,496 --> 00:31:25,506
and asset upload and download.


570
00:31:25,616 --> 00:31:27,776
You handle hosting
your static assets


571
00:31:28,176 --> 00:31:30,546
and your JavaScript
application code.


572
00:31:31,236 --> 00:31:33,176
And finally we have
brought you CloudKit JS


573
00:31:33,586 --> 00:31:35,046
to make this as easy
as possible.


574
00:31:35,596 --> 00:31:41,366
You can visit us on the web at
developer.Apple.com/cloudKit


575
00:31:42,546 --> 00:31:44,696
and for any questions you
have you can visit the Apple


576
00:31:44,696 --> 00:31:48,156
Developer Forums or Apple
developer technical support.


577
00:31:48,346 --> 00:31:51,166
If you still have questions
beyond that you can reach us


578
00:31:51,166 --> 00:31:55,446
at CloudKit@Apple.com.


579
00:31:55,646 --> 00:31:56,926
There are a few related
sessions.


580
00:31:56,926 --> 00:31:59,556
We had what's new in CloudKit
yesterday which is available


581
00:31:59,556 --> 00:32:02,956
on line and tomorrow as Onar
mentioned we have CloudKit tips


582
00:32:02,956 --> 00:32:03,326
and tricks.


583
00:32:03,326 --> 00:32:04,456
I hope to see you there.


584
00:32:04,456 --> 00:32:04,976
And thank you very much.


585
00:32:05,516 --> 00:32:10,500
[Applause]

