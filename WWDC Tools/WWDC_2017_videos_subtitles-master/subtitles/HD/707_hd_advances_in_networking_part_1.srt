1
00:00:08,516 --> 00:00:15,500
[ Cheers ]


2
00:00:22,516 --> 00:00:28,836
[ Applause ]


3
00:00:29,336 --> 00:00:30,516
>> Good afternoon, ladies and


4
00:00:30,516 --> 00:00:31,216
gentleman.


5
00:00:31,456 --> 00:00:32,516
I hope you're having a good


6
00:00:32,776 --> 00:00:34,256
Apple Developer Conference so


7
00:00:34,256 --> 00:00:34,886
far.


8
00:00:35,386 --> 00:00:37,126
My name is Stuart Cheshire and


9
00:00:37,126 --> 00:00:37,966
we're going to be talking about


10
00:00:37,966 --> 00:00:38,586
networking.


11
00:00:40,616 --> 00:00:41,626
We have a lot of material to


12
00:00:41,626 --> 00:00:43,396
cover so let's get right to it.


13
00:00:44,126 --> 00:00:45,896
This is going to be a two-part


14
00:00:45,896 --> 00:00:46,336
session.


15
00:00:47,196 --> 00:00:49,716
In part 1, I'm going to give you


16
00:00:49,716 --> 00:00:52,136
some status updates about


17
00:00:52,246 --> 00:00:53,806
technologies that have been in


18
00:00:53,806 --> 00:00:54,906
the works for many years.


19
00:00:55,846 --> 00:00:57,756
Explicit congestion notification


20
00:00:58,246 --> 00:01:00,016
is a new way to manage flows


21
00:01:00,016 --> 00:01:01,746
through the internet without the


22
00:01:01,746 --> 00:01:04,635
cost of packet loss, and IPv6,


23
00:01:04,635 --> 00:01:07,836
as I'm sure you're all aware, is


24
00:01:07,836 --> 00:01:10,076
the emerging protocol for the


25
00:01:10,076 --> 00:01:10,476
internet.


26
00:01:11,646 --> 00:01:12,846
We're going to tell you about


27
00:01:12,986 --> 00:01:15,336
some changes in the networking


28
00:01:15,336 --> 00:01:17,476
stack on iOS and some new


29
00:01:17,476 --> 00:01:18,956
facilities that are now


30
00:01:18,956 --> 00:01:20,956
available in network extension.


31
00:01:20,956 --> 00:01:23,756
And then finally, we're going to


32
00:01:23,756 --> 00:01:25,366
give you some very exciting news


33
00:01:25,676 --> 00:01:27,776
about multipath protocols.


34
00:01:28,346 --> 00:01:30,186
The iPhones that we all have are


35
00:01:30,186 --> 00:01:32,356
inherently multi-path devices.


36
00:01:32,426 --> 00:01:33,746
They have multiple radios in


37
00:01:33,746 --> 00:01:35,276
them, and for the most part


38
00:01:35,276 --> 00:01:37,686
today we only use one radio at a


39
00:01:37,686 --> 00:01:38,016
time.


40
00:01:38,966 --> 00:01:40,446
It's time we started having


41
00:01:40,856 --> 00:01:42,386
multipath protocols for our


42
00:01:42,386 --> 00:01:43,436
multipath devices.


43
00:01:46,236 --> 00:01:48,816
After the break, in part 2 we're


44
00:01:48,816 --> 00:01:50,356
going to talk about some new


45
00:01:50,356 --> 00:01:52,686
advances in the URL session,


46
00:01:52,796 --> 00:01:54,176
family of APIs.


47
00:01:54,596 --> 00:01:56,986
We're going to give some tips


48
00:01:57,086 --> 00:01:58,816
and guidance for best practices


49
00:01:59,676 --> 00:02:00,596
and we're going to give you some


50
00:02:00,596 --> 00:02:02,786
news updates on upcoming


51
00:02:02,786 --> 00:02:04,046
developments on the horizon.


52
00:02:06,016 --> 00:02:07,346
So let's start with ECN,


53
00:02:08,205 --> 00:02:09,306
Explicit Congestion


54
00:02:09,306 --> 00:02:10,086
Notification.


55
00:02:12,616 --> 00:02:14,026
You sometimes hear people talk


56
00:02:14,026 --> 00:02:15,686
about a network being congested


57
00:02:16,356 --> 00:02:18,576
as if that's a bad thing, but


58
00:02:18,936 --> 00:02:20,786
the job for transport protocol


59
00:02:21,116 --> 00:02:22,696
is to send as much data as it


60
00:02:22,696 --> 00:02:24,556
can through the network, and the


61
00:02:24,556 --> 00:02:26,946
way it does that is by sending


62
00:02:26,946 --> 00:02:28,646
faster and faster and faster


63
00:02:28,966 --> 00:02:30,396
until it's sending too fast.


64
00:02:30,776 --> 00:02:32,466
In a sense, it's testing the


65
00:02:32,466 --> 00:02:33,616
network to destruction.


66
00:02:35,716 --> 00:02:37,566
So if the networks are


67
00:02:37,566 --> 00:02:39,156
programmed correctly it should


68
00:02:39,156 --> 00:02:39,836
be congested.


69
00:02:40,946 --> 00:02:43,006
On any path between two devices


70
00:02:43,366 --> 00:02:44,986
there will be one link that has


71
00:02:45,036 --> 00:02:46,116
the lowest throughput, the


72
00:02:46,116 --> 00:02:47,416
lowest capacity, and that's the


73
00:02:47,416 --> 00:02:48,276
bottleneck link.


74
00:02:48,906 --> 00:02:50,786
And the job of the transport


75
00:02:50,786 --> 00:02:53,226
protocol is to work out its


76
00:02:53,226 --> 00:02:54,556
share of the bottleneck link.


77
00:02:55,206 --> 00:02:56,296
If you're sending twelve


78
00:02:56,296 --> 00:02:58,706
megabits into a ten megabit


79
00:02:58,706 --> 00:03:00,836
link, inevitably something has


80
00:03:00,836 --> 00:03:01,656
got to go wrong.


81
00:03:02,106 --> 00:03:03,376
For a short time, the package


82
00:03:03,376 --> 00:03:05,146
can be buffered in memory but


83
00:03:05,146 --> 00:03:06,266
when the device runs out of


84
00:03:06,266 --> 00:03:07,696
memory, it has no choice but to


85
00:03:07,696 --> 00:03:08,426
lose packets.


86
00:03:09,206 --> 00:03:11,146
And when it loses packets, that


87
00:03:11,146 --> 00:03:12,846
is a clue to the sender that it


88
00:03:12,846 --> 00:03:14,216
was going too fast and it should


89
00:03:14,216 --> 00:03:14,896
slow down a bit.


90
00:03:16,086 --> 00:03:18,276
The problem is that losing


91
00:03:18,276 --> 00:03:20,606
packets is a very expensive way


92
00:03:20,606 --> 00:03:21,766
of communicating that


93
00:03:21,766 --> 00:03:22,896
information to the sender.


94
00:03:23,916 --> 00:03:26,096
It took battery power to send


95
00:03:26,096 --> 00:03:27,216
those packets if they're coming


96
00:03:27,216 --> 00:03:28,316
from a wireless device.


97
00:03:28,956 --> 00:03:31,116
It used wireless spectrum, a


98
00:03:31,116 --> 00:03:32,466
network capacity, to send those


99
00:03:32,466 --> 00:03:33,006
packets.


100
00:03:33,866 --> 00:03:36,096
And when you drop them, they


101
00:03:36,096 --> 00:03:37,286
have to be retransmitted.


102
00:03:37,936 --> 00:03:40,316
Now, those packet losses and


103
00:03:40,316 --> 00:03:42,136
retransmissions are invisible to


104
00:03:42,136 --> 00:03:44,036
your application because TCP or


105
00:03:44,036 --> 00:03:45,196
the transport protocol just


106
00:03:45,196 --> 00:03:46,566
handles it.


107
00:03:47,436 --> 00:03:48,676
Or I should say almost


108
00:03:48,676 --> 00:03:49,256
invisible.


109
00:03:49,986 --> 00:03:51,576
The loss is invisible but the


110
00:03:51,576 --> 00:03:52,916
delay it causes is not.


111
00:03:54,396 --> 00:03:55,846
Your application will end up


112
00:03:55,846 --> 00:03:57,586
waiting for that retransmitted


113
00:03:57,586 --> 00:04:00,396
data to arrive, and that causes


114
00:04:00,686 --> 00:04:02,326
a slower, more sluggish, user


115
00:04:02,326 --> 00:04:02,976
experience.


116
00:04:04,106 --> 00:04:05,256
With explicit congestion


117
00:04:05,256 --> 00:04:07,206
notification, when the


118
00:04:07,206 --> 00:04:09,966
bottleneck gateway notices that


119
00:04:09,966 --> 00:04:12,066
a queue is starting to form, it


120
00:04:12,066 --> 00:04:13,606
doesn't wait until it runs out


121
00:04:13,606 --> 00:04:16,046
of memory, it sets a bit in the


122
00:04:16,125 --> 00:04:17,596
IP packet header saying


123
00:04:17,596 --> 00:04:19,815
congestion experienced, and that


124
00:04:19,815 --> 00:04:21,836
serves as a hint to the sender


125
00:04:22,125 --> 00:04:24,216
to slow down a bit, and that


126
00:04:24,216 --> 00:04:25,946
lets the network adjust the


127
00:04:25,946 --> 00:04:28,456
senders rate without the cost of


128
00:04:28,456 --> 00:04:29,166
losing data.


129
00:04:30,436 --> 00:04:31,856
One of the side of effects of


130
00:04:32,106 --> 00:04:34,076
ECN is it also encourages


131
00:04:34,106 --> 00:04:36,056
deployment of smarter queuing


132
00:04:36,056 --> 00:04:37,606
algorithms in the network, which


133
00:04:37,606 --> 00:04:38,626
is also a good thing.


134
00:04:39,566 --> 00:04:42,316
If you have a very simple-minded


135
00:04:42,416 --> 00:04:44,866
device with a single shared


136
00:04:44,866 --> 00:04:47,216
first-in, first-out queue that


137
00:04:47,466 --> 00:04:48,596
fills up the queue until it runs


138
00:04:48,596 --> 00:04:49,296
out of memory.


139
00:04:49,896 --> 00:04:51,796
When the next packet arrives it


140
00:04:51,796 --> 00:04:52,576
has little choice.


141
00:04:52,576 --> 00:04:53,566
It has to lose data.


142
00:04:54,276 --> 00:04:56,806
So you can't really use ECN with


143
00:04:56,806 --> 00:04:57,956
a dumb 5-0 queue.


144
00:04:58,656 --> 00:05:00,026
You have to have smart queueing,


145
00:05:00,556 --> 00:05:01,736
and those intelligent queue


146
00:05:01,736 --> 00:05:03,726
algorithms that keep the queues


147
00:05:03,776 --> 00:05:06,796
short and signal congestion


148
00:05:06,796 --> 00:05:08,276
before it becomes very bad,


149
00:05:08,766 --> 00:05:10,536
that's what helps keep delays in


150
00:05:10,536 --> 00:05:13,396
the network minimized and


151
00:05:13,396 --> 00:05:14,446
eliminate buffer bloat.


152
00:05:19,046 --> 00:05:20,596
There are three participants


153
00:05:20,596 --> 00:05:22,616
that have to cooperate to make


154
00:05:23,216 --> 00:05:26,396
ECN work, the clients, the


155
00:05:26,396 --> 00:05:28,106
servers, and the network itself.


156
00:05:29,966 --> 00:05:31,686
I'm very happy to tell you that


157
00:05:31,846 --> 00:05:33,806
in our latest survey of the


158
00:05:33,806 --> 00:05:35,506
Alexa top million websites,


159
00:05:35,866 --> 00:05:37,516
almost three-quarters of them


160
00:05:37,516 --> 00:05:38,806
already support ECN.


161
00:05:39,786 --> 00:05:41,646
Now for the most part, this was


162
00:05:41,646 --> 00:05:42,836
not because the website


163
00:05:42,836 --> 00:05:44,316
administrator made a conscious


164
00:05:44,346 --> 00:05:46,626
decision to support ECN, it's


165
00:05:46,626 --> 00:05:48,166
simply because it's part of the


166
00:05:48,166 --> 00:05:50,056
default Linux kernel, so they


167
00:05:50,056 --> 00:05:50,776
get it for free.


168
00:05:51,506 --> 00:05:53,756
But the good news is almost


169
00:05:53,756 --> 00:05:55,266
three-quarters of the Alexa top


170
00:05:55,266 --> 00:05:57,146
million websites already support


171
00:05:57,146 --> 00:05:58,456
ECN, so that's the servers taken


172
00:05:58,456 --> 00:05:58,856
care of.


173
00:06:00,586 --> 00:06:02,976
On the client side, we have been


174
00:06:02,976 --> 00:06:04,646
experimenting at Apple.


175
00:06:05,566 --> 00:06:09,056
In iOS 10.3, for all eligible


176
00:06:09,056 --> 00:06:11,386
TCP connections on Wi-Fi,


177
00:06:11,386 --> 00:06:13,216
Ethernet and selected mobile


178
00:06:13,216 --> 00:06:16,086
carriers, we toss a coin and


179
00:06:16,086 --> 00:06:18,286
half of the TCP connections will


180
00:06:18,416 --> 00:06:18,986
request ECN.


181
00:06:20,256 --> 00:06:21,976
We did this to gauge whether the


182
00:06:21,976 --> 00:06:23,716
internet was safe for ECN.


183
00:06:24,146 --> 00:06:26,066
Five years ago, this experiment


184
00:06:26,066 --> 00:06:27,176
would probably have produced


185
00:06:27,176 --> 00:06:27,996
different results.


186
00:06:27,996 --> 00:06:29,656
There were old firewalls and


187
00:06:29,656 --> 00:06:31,296
middle boxes that might have got


188
00:06:31,296 --> 00:06:32,936
confused by the ECN bits.


189
00:06:33,836 --> 00:06:36,146
The good news is we did this


190
00:06:36,146 --> 00:06:38,446
experiment on a massive scale


191
00:06:38,606 --> 00:06:41,966
worldwide and we didn't hear any


192
00:06:41,966 --> 00:06:42,996
news, we didn't hear any


193
00:06:42,996 --> 00:06:44,116
customer complaints that the


194
00:06:44,116 --> 00:06:45,226
internet was broken.


195
00:06:45,716 --> 00:06:48,346
In the AWD metrics that gathered


196
00:06:48,346 --> 00:06:51,646
ourselves to monitor how the


197
00:06:51,646 --> 00:06:53,706
devices were performing, we saw


198
00:06:53,706 --> 00:06:55,756
no discernable difference in


199
00:06:56,136 --> 00:06:57,836
packet loss, retransmission,


200
00:06:57,836 --> 00:06:59,146
reordering, any of the other


201
00:06:59,146 --> 00:07:00,576
metrics that we care about.


202
00:07:00,986 --> 00:07:03,026
So it would appear that the


203
00:07:03,026 --> 00:07:04,906
internet is now safe for ECN.


204
00:07:05,996 --> 00:07:08,016
Now we were not expecting to see


205
00:07:08,346 --> 00:07:10,896
any actual congestion marking


206
00:07:11,156 --> 00:07:12,636
happening because until the


207
00:07:12,666 --> 00:07:13,916
clients and servers are doing


208
00:07:13,916 --> 00:07:15,646
ECN, there's an awful lot of


209
00:07:15,646 --> 00:07:17,426
incentive for the network


210
00:07:17,426 --> 00:07:18,746
operators to start deploying it.


211
00:07:19,406 --> 00:07:21,836
And indeed, we saw very little


212
00:07:22,486 --> 00:07:24,876
congestion marking in most of


213
00:07:24,876 --> 00:07:25,386
the world.


214
00:07:25,466 --> 00:07:27,606
But then we looked a bit further


215
00:07:28,306 --> 00:07:31,956
and we saw in Mexico of all the


216
00:07:31,956 --> 00:07:34,976
device reports we collected 3%


217
00:07:34,976 --> 00:07:36,426
of them had seen at least one


218
00:07:36,796 --> 00:07:38,486
congestion experience mark on a


219
00:07:38,486 --> 00:07:38,936
packet.


220
00:07:39,916 --> 00:07:41,316
In France it was 6%.


221
00:07:42,106 --> 00:07:43,936
In Argentina it was 30%.


222
00:07:44,786 --> 00:07:45,946
I'm not sure what they're doing


223
00:07:45,946 --> 00:07:47,176
in Argentina, but it would


224
00:07:47,246 --> 00:07:48,766
appear that they've already


225
00:07:48,766 --> 00:07:50,356
started deploying ECN, and if


226
00:07:50,356 --> 00:07:52,056
that's true keep up the good


227
00:07:52,056 --> 00:07:52,836
work Argentina.


228
00:07:52,836 --> 00:07:53,596
That's fantastic.


229
00:07:54,276 --> 00:07:57,886
So to summarize, servers are


230
00:07:57,886 --> 00:08:00,526
supporting ECN, clients are


231
00:08:00,526 --> 00:08:03,116
supporting ECN, and in iOS 11


232
00:08:03,116 --> 00:08:04,186
now that we've determined it's


233
00:08:04,186 --> 00:08:06,466
safe, 100% of eligible


234
00:08:07,416 --> 00:08:09,086
connections will be using ECN,


235
00:08:09,306 --> 00:08:11,456
on Wi-Fi, Ethernet, and selected


236
00:08:11,456 --> 00:08:12,026
carriers.


237
00:08:12,196 --> 00:08:14,826
If you work for a carrier and


238
00:08:14,826 --> 00:08:16,026
you're not in this program,


239
00:08:16,296 --> 00:08:18,956
contact your carrier relations


240
00:08:18,956 --> 00:08:21,506
person at Apple and they can get


241
00:08:21,506 --> 00:08:22,926
you signed into this program to


242
00:08:22,926 --> 00:08:24,506
support ECN on your networks


243
00:08:24,506 --> 00:08:24,746
too.


244
00:08:25,486 --> 00:08:26,996
So now the stage is set.


245
00:08:27,196 --> 00:08:28,136
The clients are doing it.


246
00:08:28,346 --> 00:08:29,476
The servers are doing it.


247
00:08:29,936 --> 00:08:32,366
Any ISP or network operator in


248
00:08:32,366 --> 00:08:35,346
the world can deploy ECN and see


249
00:08:35,346 --> 00:08:36,926
immediate user experience


250
00:08:36,966 --> 00:08:38,436
benefits for their users.


251
00:08:39,655 --> 00:08:41,366
One common misunderstanding


252
00:08:41,366 --> 00:08:43,385
about ECN is that it has to be


253
00:08:43,385 --> 00:08:45,536
supported end to end on the


254
00:08:45,536 --> 00:08:46,986
entire path across the internet,


255
00:08:47,246 --> 00:08:48,126
and that's not true.


256
00:08:48,836 --> 00:08:50,836
There is only one place that


257
00:08:50,836 --> 00:08:53,446
needs to support ECN for you to


258
00:08:53,446 --> 00:08:54,146
get the benefit.


259
00:08:56,286 --> 00:08:58,006
As I said, on any path between


260
00:08:58,006 --> 00:08:59,576
two devices there is generally


261
00:08:59,576 --> 00:09:01,646
one link which is the bottleneck


262
00:09:01,646 --> 00:09:04,566
link, and for most of you at


263
00:09:04,566 --> 00:09:06,136
home with your residential


264
00:09:06,136 --> 00:09:07,276
internet connections that


265
00:09:07,526 --> 00:09:09,726
bottleneck link is an artificial


266
00:09:09,726 --> 00:09:10,046
one.


267
00:09:10,516 --> 00:09:11,866
You may have paid for 10


268
00:09:11,866 --> 00:09:14,046
megabits or 20 megabits or 50


269
00:09:14,046 --> 00:09:16,526
megabits of service and the way


270
00:09:16,556 --> 00:09:18,956
your ISP provides that service


271
00:09:19,286 --> 00:09:20,746
is they artificially throttle


272
00:09:20,746 --> 00:09:21,916
your data to the rate you've


273
00:09:21,976 --> 00:09:22,536
paid for.


274
00:09:23,066 --> 00:09:25,076
So the one queue on your path


275
00:09:25,076 --> 00:09:27,026
for almost all connections is


276
00:09:27,026 --> 00:09:29,476
the one that exists at your


277
00:09:29,476 --> 00:09:31,726
ISP's headend equipment where


278
00:09:31,826 --> 00:09:33,516
they are artificially throttling


279
00:09:33,516 --> 00:09:34,126
your data.


280
00:09:34,536 --> 00:09:35,866
That is the only place on the


281
00:09:35,866 --> 00:09:37,706
path that needs to mark


282
00:09:37,706 --> 00:09:39,296
congestion by setting the bit


283
00:09:39,356 --> 00:09:40,546
instead of by discarding the


284
00:09:40,546 --> 00:09:43,266
packet, and your customers get


285
00:09:43,266 --> 00:09:45,046
the benefit of a faster more


286
00:09:45,046 --> 00:09:45,876
responsive internet.


287
00:09:46,546 --> 00:09:48,526
So with that, I would like to


288
00:09:48,526 --> 00:09:49,876
invite my colleague, David


289
00:09:49,876 --> 00:09:51,426
Schinazzi, to come up on stage


290
00:09:51,736 --> 00:09:52,776
and give you some more news


291
00:09:52,776 --> 00:09:53,256
updates.


292
00:09:54,516 --> 00:09:59,546
[ Applause ]


293
00:10:00,046 --> 00:10:00,976
>> Good afternoon, everyone.


294
00:10:01,676 --> 00:10:03,606
My name is David Schinazzi, I'm


295
00:10:03,606 --> 00:10:04,866
a core networking engineer here


296
00:10:04,866 --> 00:10:06,306
at Apple, and I'm going to start


297
00:10:06,306 --> 00:10:08,496
off by talking about IPv6,


298
00:10:08,746 --> 00:10:10,036
giving you a status update.


299
00:10:11,156 --> 00:10:13,346
And especially if you're writing


300
00:10:13,346 --> 00:10:14,526
apps that use the internet


301
00:10:14,526 --> 00:10:16,116
today, well you actually really


302
00:10:16,116 --> 00:10:16,436
care.


303
00:10:18,036 --> 00:10:20,176
So as some of you might know,


304
00:10:20,736 --> 00:10:21,916
yesterday was the 5th


305
00:10:21,916 --> 00:10:23,886
anniversary of World IPv6


306
00:10:23,996 --> 00:10:24,486
launch.


307
00:10:25,426 --> 00:10:28,216
So five years ago yesterday many


308
00:10:28,216 --> 00:10:30,346
content provider across the


309
00:10:30,346 --> 00:10:31,896
internet got together and


310
00:10:31,896 --> 00:10:32,686
enabled IPv6.


311
00:10:32,776 --> 00:10:35,346
And it worked well so they kept


312
00:10:35,346 --> 00:10:37,196
it on, but what's happened


313
00:10:37,196 --> 00:10:38,106
since?


314
00:10:38,306 --> 00:10:40,376
This is a graph of the client


315
00:10:40,376 --> 00:10:42,776
device adoption over the years.


316
00:10:42,836 --> 00:10:45,146
At the time less than 1% of


317
00:10:45,146 --> 00:10:46,706
devices supported IPv6.


318
00:10:47,046 --> 00:10:48,506
Now we're almost at 20%.


319
00:10:49,306 --> 00:10:51,076
And a really important point is


320
00:10:51,076 --> 00:10:52,886
that if you're writing apps for


321
00:10:52,886 --> 00:10:54,686
Apple devices, on the markets


322
00:10:54,686 --> 00:10:55,946
where we see most Apple devices


323
00:10:55,946 --> 00:10:56,936
these numbers are generally


324
00:10:56,936 --> 00:10:57,396
higher.


325
00:10:58,356 --> 00:10:59,416
Especially in the case of


326
00:10:59,416 --> 00:11:02,996
cellular, almost all carriers


327
00:11:02,996 --> 00:11:04,586
that we work with now deploy


328
00:11:04,586 --> 00:11:06,196
dual stack, meaning that they


329
00:11:06,196 --> 00:11:08,416
offer both IPv4 and IPv6.


330
00:11:08,536 --> 00:11:11,716
And the great news is, it works


331
00:11:11,716 --> 00:11:11,956
better.


332
00:11:12,686 --> 00:11:14,156
So we've actually measured this


333
00:11:14,306 --> 00:11:15,106
based on a lot of the


334
00:11:15,106 --> 00:11:16,476
connections our devices make.


335
00:11:16,976 --> 00:11:19,206
The HTP request load in 15 to


336
00:11:19,206 --> 00:11:22,006
30% faster, which means that if


337
00:11:22,006 --> 00:11:23,166
you actually have two apps side


338
00:11:23,166 --> 00:11:24,836
by side, you will notice the


339
00:11:24,836 --> 00:11:25,526
difference.


340
00:11:25,626 --> 00:11:27,286
Your customers will see a


341
00:11:27,286 --> 00:11:27,946
difference.


342
00:11:28,786 --> 00:11:29,926
So if you don't know if your


343
00:11:29,926 --> 00:11:31,776
server supports IPv6 today,


344
00:11:32,366 --> 00:11:34,356
definitely check, contact your


345
00:11:34,356 --> 00:11:35,726
server team and make sure they


346
00:11:35,726 --> 00:11:36,376
support IPv6.


347
00:11:36,376 --> 00:11:38,216
You can't afford to let this


348
00:11:38,216 --> 00:11:39,366
performance wane on the table.


349
00:11:41,266 --> 00:11:42,536
Another important trend that I


350
00:11:42,536 --> 00:11:43,996
like to talk about is NAT64.


351
00:11:43,996 --> 00:11:46,536
So we started talking about this


352
00:11:46,536 --> 00:11:48,976
at WWDC two years ago, and then


353
00:11:48,976 --> 00:11:49,916
we made it an app store


354
00:11:49,916 --> 00:11:52,316
requirement last year but now


355
00:11:52,316 --> 00:11:52,786
it's here.


356
00:11:52,846 --> 00:11:54,676
It's in production for several


357
00:11:54,676 --> 00:11:56,926
months now on a major carrier in


358
00:11:56,926 --> 00:12:00,336
the U.S., every single device is


359
00:12:00,606 --> 00:12:01,206
v6 only.


360
00:12:01,726 --> 00:12:03,306
They don't have an IPv4 address,


361
00:12:03,346 --> 00:12:05,456
they can only talk using IPv6.


362
00:12:06,256 --> 00:12:07,486
So that doesn't mean that you


363
00:12:07,486 --> 00:12:08,896
can't talk to v4 servers.


364
00:12:08,896 --> 00:12:10,426
Thanks to a box on the network


365
00:12:10,746 --> 00:12:13,426
called the NAT64, devices can


366
00:12:13,426 --> 00:12:14,846
still connect to those servers,


367
00:12:14,946 --> 00:12:16,046
however, you're not getting the


368
00:12:16,046 --> 00:12:17,226
performance benefits that we're


369
00:12:17,226 --> 00:12:18,356
talking about by using v6


370
00:12:18,356 --> 00:12:19,336
natively.


371
00:12:20,606 --> 00:12:21,966
However, what's really important


372
00:12:21,966 --> 00:12:23,996
is that the app needs to make


373
00:12:23,996 --> 00:12:25,076
sure it supports IPv6.


374
00:12:25,206 --> 00:12:27,096
If it tries to connect to IPv4,


375
00:12:27,096 --> 00:12:28,156
that will not work.


376
00:12:29,126 --> 00:12:30,156
So how do you do that?


377
00:12:30,546 --> 00:12:31,376
It's very simple.


378
00:12:31,976 --> 00:12:33,756
If you use our higher level API


379
00:12:34,006 --> 00:12:35,786
such as URLSession CFNetwork,


380
00:12:36,176 --> 00:12:37,536
the system libraries do all the


381
00:12:37,536 --> 00:12:38,596
heavy lifting for you.


382
00:12:38,966 --> 00:12:39,976
You don't need to worry about


383
00:12:40,006 --> 00:12:42,136
IPv4, IPv6, any of that.


384
00:12:42,136 --> 00:12:43,146
It just works.


385
00:12:43,556 --> 00:12:45,536
What you really want to avoid is


386
00:12:45,536 --> 00:12:47,936
using Legacy IPv4 on the APIs,


387
00:12:48,466 --> 00:12:50,046
directly typing in an IPv4


388
00:12:50,046 --> 00:12:53,146
address into your app, or using


389
00:12:53,146 --> 00:12:54,156
preflight checks.


390
00:12:54,846 --> 00:12:57,346
For example, if you check if the


391
00:12:57,346 --> 00:12:59,036
device is IPv4 address before


392
00:12:59,036 --> 00:13:00,366
making connection, that won't


393
00:13:00,366 --> 00:13:00,936
work anymore.


394
00:13:03,486 --> 00:13:05,346
And why -- another reason why


395
00:13:05,346 --> 00:13:06,316
you should really care is that


396
00:13:06,316 --> 00:13:07,916
this is an app review


397
00:13:07,916 --> 00:13:08,946
enforcement.


398
00:13:08,946 --> 00:13:10,496
It's required for any app,


399
00:13:10,856 --> 00:13:12,826
either new or an update, to get


400
00:13:12,826 --> 00:13:13,546
on the app store.


401
00:13:14,076 --> 00:13:16,036
Every one of them is tested on


402
00:13:16,266 --> 00:13:18,666
an IPv6 only NAT64 network, and


403
00:13:18,666 --> 00:13:20,256
if it doesn't work you will not


404
00:13:20,256 --> 00:13:21,236
make it onto the store.


405
00:13:21,886 --> 00:13:23,196
However, I really want to


406
00:13:23,196 --> 00:13:24,776
congratulate all you developers


407
00:13:24,776 --> 00:13:26,676
because you've fixed all of your


408
00:13:26,676 --> 00:13:28,246
apps and we now almost never


409
00:13:28,246 --> 00:13:29,196
have to reject anything.


410
00:13:29,596 --> 00:13:30,356
So great job there.


411
00:13:32,076 --> 00:13:34,066
If you want more tips on how to


412
00:13:34,066 --> 00:13:34,986
really make sure everything


413
00:13:34,986 --> 00:13:37,126
works, there is a great section


414
00:13:37,126 --> 00:13:38,676
on the developer website called


415
00:13:38,676 --> 00:13:40,696
supporting IPv6 DNS64/NAT64


416
00:13:40,696 --> 00:13:41,466
networks.


417
00:13:41,626 --> 00:13:42,896
Feel free to also join us in the


418
00:13:42,896 --> 00:13:45,196
labs tomorrow and Friday with


419
00:13:45,196 --> 00:13:45,846
any questions.


420
00:13:49,046 --> 00:13:50,626
Now I'd like to switch gears and


421
00:13:50,626 --> 00:13:52,426
talk about networking on the


422
00:13:52,426 --> 00:13:54,646
device itself, and introduce


423
00:13:54,646 --> 00:13:55,946
something this year that we're


424
00:13:55,946 --> 00:13:57,416
calling user space networking.


425
00:13:58,646 --> 00:14:00,596
You're probably familiar with


426
00:14:00,666 --> 00:14:01,826
the traditional model of a


427
00:14:01,826 --> 00:14:04,396
networking stack where a lot of


428
00:14:04,396 --> 00:14:05,806
the hard work is done inside the


429
00:14:05,836 --> 00:14:06,296
kernel.


430
00:14:06,436 --> 00:14:08,796
So protocol such as Wi-Fi, IP,


431
00:14:08,796 --> 00:14:10,486
TCP are all handled inside the


432
00:14:10,486 --> 00:14:10,926
kernel.


433
00:14:11,536 --> 00:14:12,796
Then there's a boundary called


434
00:14:12,896 --> 00:14:14,866
the BSD socket API, and


435
00:14:15,256 --> 00:14:16,486
everything else is handled


436
00:14:16,486 --> 00:14:17,126
inside the app.


437
00:14:17,846 --> 00:14:18,906
And by that I mean inside the


438
00:14:18,906 --> 00:14:20,006
app process, not necessarily


439
00:14:20,006 --> 00:14:20,846
inside your code.


440
00:14:21,186 --> 00:14:22,376
It could be inside system


441
00:14:22,376 --> 00:14:24,196
libraries, but protocols like


442
00:14:24,196 --> 00:14:26,096
HTP and TLS are handled inside


443
00:14:26,096 --> 00:14:27,046
that process.


444
00:14:27,456 --> 00:14:29,456
What we're introducing for the


445
00:14:29,456 --> 00:14:31,696
first time with iOS 11 is we're


446
00:14:31,696 --> 00:14:33,456
unifying everything inside the


447
00:14:33,456 --> 00:14:33,726
app.


448
00:14:34,386 --> 00:14:36,216
And what this means is that the


449
00:14:36,216 --> 00:14:37,826
protocols can interact much


450
00:14:37,826 --> 00:14:40,076
tighter and everything is more


451
00:14:40,116 --> 00:14:40,696
performant.


452
00:14:40,756 --> 00:14:42,786
We've actually noticed great CPU


453
00:14:42,786 --> 00:14:44,826
usage reductions which allows


454
00:14:44,826 --> 00:14:46,196
you to spend more time on


455
00:14:46,196 --> 00:14:48,116
animations, but also at the end


456
00:14:48,116 --> 00:14:49,146
of the day users have more


457
00:14:49,146 --> 00:14:49,966
battery life.


458
00:14:51,756 --> 00:14:53,076
One point to note is that you


459
00:14:53,076 --> 00:14:54,806
will only be able to get this if


460
00:14:54,806 --> 00:14:56,006
you're using a high level IPI


461
00:14:56,006 --> 00:14:57,206
such as URLSession.


462
00:14:57,756 --> 00:14:59,226
You will not get these benefits


463
00:14:59,226 --> 00:15:00,246
if you're still using like a


464
00:15:00,246 --> 00:15:01,556
CBSD sockets.


465
00:15:02,156 --> 00:15:04,236
And another point that I would


466
00:15:04,236 --> 00:15:05,996
like to make about this is that


467
00:15:05,996 --> 00:15:08,196
Network Kernel Extensions, which


468
00:15:08,196 --> 00:15:10,296
rely on these legacy BSD sockets


469
00:15:10,296 --> 00:15:12,406
inside the kernel, will soon be


470
00:15:12,406 --> 00:15:13,096
deprecated.


471
00:15:13,466 --> 00:15:15,516
So if you're using those, please


472
00:15:15,516 --> 00:15:17,666
start right now transitioning to


473
00:15:17,666 --> 00:15:19,196
the network extension framework


474
00:15:19,596 --> 00:15:20,716
and come talk to us if you have


475
00:15:20,716 --> 00:15:22,016
any questions about this.


476
00:15:23,456 --> 00:15:24,326
Speaking of the network


477
00:15:24,326 --> 00:15:26,726
extension framework, I'd like to


478
00:15:26,726 --> 00:15:29,116
introduce two new APIs this year


479
00:15:29,546 --> 00:15:31,126
regarding Wi-Fi configuration


480
00:15:31,126 --> 00:15:32,366
and extending DNS.


481
00:15:32,976 --> 00:15:35,416
So the new framework was


482
00:15:35,416 --> 00:15:37,536
introduced two years ago and was


483
00:15:37,536 --> 00:15:39,226
built with four main temples,


484
00:15:39,976 --> 00:15:42,736
NEVPNManager allows you to


485
00:15:43,656 --> 00:15:45,356
configure the VPN stack on the


486
00:15:45,356 --> 00:15:45,916
device.


487
00:15:46,446 --> 00:15:48,336
NETunnelProvider allow you to


488
00:15:48,336 --> 00:15:49,706
build your own customer VPN


489
00:15:49,816 --> 00:15:50,436
protocols.


490
00:15:51,076 --> 00:15:52,806
NEHotspotHelper allow you to


491
00:15:53,166 --> 00:15:54,926
customize how your device


492
00:15:55,456 --> 00:15:57,736
authenticates to Wi-Fi hotspots.


493
00:15:58,306 --> 00:16:00,096
And finally, NEFilterProvider


494
00:16:00,096 --> 00:16:01,786
allows you to build a secure


495
00:16:01,896 --> 00:16:03,246
on-device content filter.


496
00:16:03,916 --> 00:16:05,426
I won't go into more details on


497
00:16:05,426 --> 00:16:07,366
these four parts of the API,


498
00:16:07,366 --> 00:16:09,536
however there's a great WWDC


499
00:16:09,536 --> 00:16:11,536
session from two years ago that


500
00:16:11,586 --> 00:16:12,906
goes into more detail.


501
00:16:13,956 --> 00:16:16,346
So let's dive into any hotspot


502
00:16:16,346 --> 00:16:17,106
configuration.


503
00:16:18,396 --> 00:16:20,616
You may have had this experience


504
00:16:20,616 --> 00:16:22,356
before where you bought a really


505
00:16:22,356 --> 00:16:24,326
nice smart camera.


506
00:16:24,736 --> 00:16:26,296
You take it out of the box and


507
00:16:26,296 --> 00:16:27,746
it tells you, oh join this Wi-Fi


508
00:16:27,746 --> 00:16:30,486
network on your iPhone to be


509
00:16:30,486 --> 00:16:32,256
able to configure the app.


510
00:16:32,256 --> 00:16:33,726
And so in the app it tells you,


511
00:16:33,726 --> 00:16:35,196
oh go to settings, Wi-Fi, type


512
00:16:35,196 --> 00:16:36,976
it in, and that's pretty


513
00:16:36,976 --> 00:16:37,716
cumbersome.


514
00:16:37,716 --> 00:16:38,976
The user could mistype the


515
00:16:38,976 --> 00:16:39,596
password.


516
00:16:39,596 --> 00:16:40,756
They could also not remember


517
00:16:40,756 --> 00:16:42,016
where the settings app is.


518
00:16:42,406 --> 00:16:43,686
And we had a lot of requests


519
00:16:43,686 --> 00:16:45,186
from developers for a better


520
00:16:45,186 --> 00:16:46,186
solution for this.


521
00:16:46,896 --> 00:16:48,666
And what we've added is this


522
00:16:48,666 --> 00:16:50,496
simple API that allows you to do


523
00:16:50,496 --> 00:16:52,946
everything from the app.


524
00:16:53,516 --> 00:16:57,676
[ Applause ]


525
00:16:58,176 --> 00:16:59,786
Now the user never has to leave


526
00:16:59,786 --> 00:17:01,076
the app anymore, they just get a


527
00:17:01,076 --> 00:17:02,626
prompt to make sure they will


528
00:17:02,676 --> 00:17:03,886
actually want to do this.


529
00:17:04,165 --> 00:17:05,526
They click join, they associate


530
00:17:05,526 --> 00:17:06,076
to the Wi-Fi.


531
00:17:06,076 --> 00:17:07,256
Simple as that.


532
00:17:07,616 --> 00:17:10,185
You can even set up this API to


533
00:17:10,185 --> 00:17:10,925
be temporary.


534
00:17:10,925 --> 00:17:13,326
So if you're building a


535
00:17:13,326 --> 00:17:14,546
configuration app for a smart


536
00:17:14,546 --> 00:17:16,396
device, you only really want to


537
00:17:16,396 --> 00:17:18,175
be connected to that Wi-Fi if


538
00:17:18,175 --> 00:17:19,146
you're inside the app.


539
00:17:19,146 --> 00:17:20,636
So if the user decides to leave


540
00:17:20,636 --> 00:17:21,695
your app and go do something


541
00:17:21,695 --> 00:17:23,026
else, the device will


542
00:17:23,026 --> 00:17:24,656
automatically disassociate from


543
00:17:24,656 --> 00:17:27,126
Wi-Fi and join -- rejoin their


544
00:17:27,126 --> 00:17:28,256
other Wi-Fi networks.


545
00:17:28,956 --> 00:17:31,096
You can also use this API for


546
00:17:31,256 --> 00:17:32,696
the traditional sense of using


547
00:17:32,696 --> 00:17:33,126
Wi-Fi.


548
00:17:33,126 --> 00:17:34,196
For example, if you're building


549
00:17:34,196 --> 00:17:36,446
an app for chain of cafes and


550
00:17:36,446 --> 00:17:37,336
would like your users to


551
00:17:37,336 --> 00:17:38,656
automatically join the Wi-Fi in


552
00:17:38,656 --> 00:17:39,496
these cafes.


553
00:17:40,236 --> 00:17:41,786
And of course, the CPI supports


554
00:17:41,786 --> 00:17:43,936
all the modes of authentication


555
00:17:43,936 --> 00:17:46,036
that our Wi-Fi stack supports


556
00:17:46,736 --> 00:17:46,856
today.


557
00:17:47,346 --> 00:17:48,566
To show you just how easy this


558
00:17:48,566 --> 00:17:50,876
is, here's a little code sample


559
00:17:50,876 --> 00:17:52,506
for these two examples.


560
00:17:52,506 --> 00:17:53,856
So if you want to configure a


561
00:17:53,856 --> 00:17:55,586
camera, just create a


562
00:17:55,586 --> 00:17:57,356
configuration with the name of


563
00:17:57,356 --> 00:17:58,616
the Wi-Fi and the password.


564
00:17:59,426 --> 00:18:01,136
Set the join one's property to


565
00:18:01,136 --> 00:18:02,276
indicate that you want to


566
00:18:02,276 --> 00:18:04,396
dissociate when the device --


567
00:18:04,606 --> 00:18:07,236
when the user leaves your app,


568
00:18:07,236 --> 00:18:07,836
and just apply the


569
00:18:07,836 --> 00:18:08,586
configuration.


570
00:18:09,606 --> 00:18:11,646
Then check the result value for


571
00:18:11,646 --> 00:18:12,226
success.


572
00:18:12,726 --> 00:18:14,116
In the café use case which is


573
00:18:14,116 --> 00:18:15,516
even simpler, just create a


574
00:18:15,516 --> 00:18:17,946
configuration, apply it and


575
00:18:18,046 --> 00:18:18,356
you're done.


576
00:18:20,516 --> 00:18:21,956
Now I'd like to talk about any


577
00:18:21,956 --> 00:18:23,206
DNS proxy provider.


578
00:18:24,646 --> 00:18:26,716
The CPL let's you customize how


579
00:18:27,826 --> 00:18:29,666
the iPhone or other iOS device


580
00:18:29,666 --> 00:18:33,666
interacts with DNS, so this API


581
00:18:33,846 --> 00:18:35,326
allows you to, in its simplest


582
00:18:35,326 --> 00:18:36,986
mode, simply redirect all the


583
00:18:37,046 --> 00:18:39,106
inquiries to a resolver that you


584
00:18:39,106 --> 00:18:39,486
own.


585
00:18:39,956 --> 00:18:41,496
For example, if that resolver


586
00:18:41,496 --> 00:18:43,756
has better features, or you can


587
00:18:43,756 --> 00:18:44,696
even use this to get the


588
00:18:44,696 --> 00:18:46,576
individual DNS queries and send


589
00:18:46,576 --> 00:18:49,276
them over a custom protocol such


590
00:18:49,446 --> 00:18:53,006
as DNS over TLS or DNS over GTP.


591
00:18:53,796 --> 00:18:55,856
So that was an update on network


592
00:18:55,856 --> 00:18:56,996
extension this year.


593
00:18:57,446 --> 00:18:59,456
As a quick reminder, this is a


594
00:18:59,456 --> 00:19:02,366
very powerful API so it requires


595
00:19:02,436 --> 00:19:03,606
X-code capabilities and


596
00:19:03,606 --> 00:19:05,686
entitlements, and also user


597
00:19:05,686 --> 00:19:07,266
consent for everything it does.


598
00:19:08,176 --> 00:19:10,286
Now I would like to invite


599
00:19:10,286 --> 00:19:11,586
Christoph Paasch on the stage to


600
00:19:11,586 --> 00:19:13,056
talk about multipath devices.


601
00:19:14,516 --> 00:19:16,706
[ Applause ]


602
00:19:17,206 --> 00:19:17,826
>> Thank you, David.


603
00:19:18,826 --> 00:19:19,716
Hello, everybody.


604
00:19:20,686 --> 00:19:22,016
My name is Christoph Paasch.


605
00:19:22,076 --> 00:19:23,446
I'm a networking engineer at


606
00:19:23,526 --> 00:19:25,506
Apple, and I will show you the


607
00:19:25,506 --> 00:19:27,766
new technologies we have in iOS


608
00:19:27,766 --> 00:19:29,156
11 that will improve the


609
00:19:29,156 --> 00:19:31,186
networking of your applications


610
00:19:31,476 --> 00:19:32,406
on mobile devices.


611
00:19:35,306 --> 00:19:37,386
So, you have all experienced it.


612
00:19:38,096 --> 00:19:39,496
You are using your application


613
00:19:39,736 --> 00:19:41,286
and your application is


614
00:19:41,286 --> 00:19:43,276
downloading something from the


615
00:19:43,276 --> 00:19:45,466
internet, and while you're using


616
00:19:45,466 --> 00:19:47,036
it, you are walking out of your


617
00:19:47,036 --> 00:19:47,386
home.


618
00:19:48,246 --> 00:19:49,326
Now as you're walking out of


619
00:19:49,326 --> 00:19:51,056
your home, you're also walking


620
00:19:51,106 --> 00:19:52,606
farther away from your Wi-Fi


621
00:19:52,606 --> 00:19:54,726
access point, which basically


622
00:19:54,726 --> 00:19:56,706
means the connection that you


623
00:19:56,706 --> 00:19:58,496
have created on Wi-Fi is getting


624
00:19:58,496 --> 00:20:00,656
slower and slower, and


625
00:20:00,656 --> 00:20:03,686
ultimately your application is


626
00:20:03,686 --> 00:20:05,236
actually getting slower as well


627
00:20:05,236 --> 00:20:06,416
because it cannot download the


628
00:20:06,416 --> 00:20:07,556
content from the internet.


629
00:20:08,806 --> 00:20:10,156
And it will only be able to


630
00:20:10,156 --> 00:20:12,076
continue again when you have


631
00:20:12,076 --> 00:20:13,976
then created a new connection


632
00:20:14,246 --> 00:20:16,026
over to cellular link.


633
00:20:17,186 --> 00:20:19,096
Now, the reason why this happens


634
00:20:19,206 --> 00:20:21,136
is because the protocols that I


635
00:20:21,136 --> 00:20:23,266
use today have been specified


636
00:20:23,306 --> 00:20:24,926
several decades ago and they


637
00:20:24,926 --> 00:20:26,446
have not been designed with


638
00:20:26,446 --> 00:20:28,296
mobile devices in mind.


639
00:20:29,636 --> 00:20:31,996
Now at Apple, we are aware of


640
00:20:32,046 --> 00:20:33,816
this problem since several years


641
00:20:33,816 --> 00:20:36,246
now, and we have technologies in


642
00:20:36,366 --> 00:20:38,496
iOS that try to address exactly


643
00:20:38,496 --> 00:20:39,316
this scenario.


644
00:20:40,086 --> 00:20:42,206
We have Wi-Fi assist since iOS


645
00:20:42,206 --> 00:20:44,936
9, and now in iOS 11 we are


646
00:20:44,936 --> 00:20:46,246
pushing this even farther.


647
00:20:47,306 --> 00:20:48,566
We are introducing a new


648
00:20:48,566 --> 00:20:50,496
multipath transport protocol


649
00:20:50,766 --> 00:20:52,406
that is called Multipath TCP,


650
00:20:52,406 --> 00:20:54,666
and we will open it as a public


651
00:20:54,666 --> 00:20:56,436
API in iOS 11.


652
00:20:58,516 --> 00:21:00,906
Now, let's take a step back


653
00:21:00,906 --> 00:21:04,376
first and let's take a look at


654
00:21:04,376 --> 00:21:05,596
what are the scenarios that we


655
00:21:05,596 --> 00:21:08,496
are trying to address here.


656
00:21:08,606 --> 00:21:10,466
So when your phone is connected


657
00:21:10,466 --> 00:21:12,686
to a good Wi-Fi network, what


658
00:21:12,686 --> 00:21:13,856
will happen is you create a


659
00:21:13,856 --> 00:21:15,086
connection and you will only


660
00:21:15,086 --> 00:21:17,336
download from the Wi-Fi network.


661
00:21:18,356 --> 00:21:20,416
Now as your user is walking out


662
00:21:20,416 --> 00:21:22,196
of the Wi-Fi, walking away from


663
00:21:22,196 --> 00:21:24,166
it, what happens is the signal


664
00:21:24,166 --> 00:21:25,486
strength will get lower and


665
00:21:25,486 --> 00:21:27,106
lower, and the connection will


666
00:21:27,106 --> 00:21:28,846
get slower and ultimately it


667
00:21:28,846 --> 00:21:29,856
completely stops.


668
00:21:31,416 --> 00:21:32,946
What happens then is you will


669
00:21:32,946 --> 00:21:34,946
need to -- if you want to keep


670
00:21:34,946 --> 00:21:36,836
on downloading your data, you


671
00:21:36,836 --> 00:21:37,806
will need to create a new


672
00:21:37,806 --> 00:21:39,556
connection on the cellular link


673
00:21:39,556 --> 00:21:41,256
and from that moment on you are


674
00:21:41,256 --> 00:21:42,486
good to go again and your


675
00:21:42,486 --> 00:21:44,736
application responds again to


676
00:21:44,736 --> 00:21:45,876
the data that is coming from the


677
00:21:45,876 --> 00:21:46,206
server.


678
00:21:47,466 --> 00:21:49,036
If you want to handle this kind


679
00:21:49,036 --> 00:21:50,336
of scenario, inside your


680
00:21:50,336 --> 00:21:52,186
application at the application


681
00:21:52,186 --> 00:21:53,786
layer, there are quite a few


682
00:21:53,786 --> 00:21:55,366
things that you need to do.


683
00:21:55,656 --> 00:21:58,006
First, you will need to record


684
00:21:58,006 --> 00:21:59,316
everything that you are doing


685
00:21:59,356 --> 00:22:01,106
because you never know when


686
00:22:01,106 --> 00:22:04,556
Wi-Fi is going to drop out so


687
00:22:04,556 --> 00:22:05,746
you will need to remember what


688
00:22:05,746 --> 00:22:06,856
you have been doing and what


689
00:22:06,856 --> 00:22:08,236
were the request that are in


690
00:22:08,236 --> 00:22:08,616
flight.


691
00:22:09,806 --> 00:22:12,946
Second, you will need a way to


692
00:22:13,046 --> 00:22:15,186
detect that Wi-Fi is getting


693
00:22:15,186 --> 00:22:16,836
worse, so you need to somehow


694
00:22:16,836 --> 00:22:18,206
monitor the progress of the


695
00:22:18,206 --> 00:22:19,226
Wi-Fi connection.


696
00:22:20,496 --> 00:22:22,406
Now, once you have finally


697
00:22:22,406 --> 00:22:24,206
detected that Wi-Fi, it's no


698
00:22:24,206 --> 00:22:26,436
longer available and can no


699
00:22:26,436 --> 00:22:27,766
longer deliver the service that


700
00:22:27,766 --> 00:22:29,266
you need, you will need to


701
00:22:29,266 --> 00:22:30,506
create a new connection over


702
00:22:30,506 --> 00:22:30,986
cellular.


703
00:22:31,146 --> 00:22:32,776
That means you need to do a DSN


704
00:22:32,956 --> 00:22:36,146
handshake, a TCP handshake, and


705
00:22:36,146 --> 00:22:37,136
a TLS handshake.


706
00:22:37,726 --> 00:22:39,596
And only after all those steps


707
00:22:39,946 --> 00:22:41,676
you can finally send your


708
00:22:41,676 --> 00:22:44,366
request over the cellular


709
00:22:44,366 --> 00:22:46,166
interface and your application


710
00:22:46,166 --> 00:22:47,316
can make progress again.


711
00:22:48,786 --> 00:22:49,946
Doing this at the application


712
00:22:49,946 --> 00:22:52,526
layer is very cumbersome and


713
00:22:52,836 --> 00:22:54,166
that's one of those scenarios


714
00:22:54,206 --> 00:22:55,926
that we want to address.


715
00:22:57,736 --> 00:22:59,186
Let's take a look at another


716
00:22:59,186 --> 00:22:59,776
scenario.


717
00:22:59,966 --> 00:23:01,616
It's basically when you're in a


718
00:23:01,616 --> 00:23:03,236
very poor Wi-Fi scenario.


719
00:23:03,756 --> 00:23:05,856
For example, you're sitting in a


720
00:23:05,996 --> 00:23:07,226
café and you're connecting to


721
00:23:07,226 --> 00:23:08,176
the public hotspot.


722
00:23:09,126 --> 00:23:10,586
Now, usually this hotspot


723
00:23:10,876 --> 00:23:12,386
probably works very well,


724
00:23:13,066 --> 00:23:14,986
however, sometimes there is some


725
00:23:14,986 --> 00:23:16,406
other users also in this café


726
00:23:16,406 --> 00:23:17,876
and maybe one of them is


727
00:23:17,876 --> 00:23:19,226
downloading a huge file.


728
00:23:20,086 --> 00:23:23,126
And because very often there's a


729
00:23:23,126 --> 00:23:24,646
lack of smart queue management


730
00:23:24,646 --> 00:23:27,116
in the network, this download of


731
00:23:27,116 --> 00:23:28,746
this huge file will create a


732
00:23:28,746 --> 00:23:30,086
large chunk of buffer bloat


733
00:23:30,086 --> 00:23:32,076
inside the network, and this


734
00:23:32,076 --> 00:23:35,056
buffer bloat is making all other


735
00:23:35,056 --> 00:23:36,796
internet connections also very


736
00:23:36,796 --> 00:23:37,176
slow.


737
00:23:37,776 --> 00:23:39,796
And so it means basically your


738
00:23:39,796 --> 00:23:42,336
application will no more be able


739
00:23:42,336 --> 00:23:43,776
to download the traffic from the


740
00:23:43,776 --> 00:23:45,636
data, from the internet.


741
00:23:47,266 --> 00:23:48,496
If you want to address such kind


742
00:23:48,496 --> 00:23:49,566
of scenarios inside your


743
00:23:49,566 --> 00:23:51,596
application, you would want to


744
00:23:51,596 --> 00:23:53,226
basically create a connection on


745
00:23:53,226 --> 00:23:55,766
Wi-Fi and on cell, and as soon


746
00:23:55,766 --> 00:23:57,506
as you realize that Wi-Fi is no


747
00:23:57,506 --> 00:23:59,596
more good enough because the


748
00:23:59,596 --> 00:24:01,186
delay is just getting too high,


749
00:24:01,626 --> 00:24:02,796
you want to send a little bit of


750
00:24:02,796 --> 00:24:04,896
data over to cellular network so


751
00:24:04,896 --> 00:24:06,306
that you can make progress


752
00:24:06,306 --> 00:24:06,656
again.


753
00:24:07,256 --> 00:24:08,936
And as soon as Wi-Fi is getting


754
00:24:08,936 --> 00:24:10,476
better again, you want to switch


755
00:24:10,476 --> 00:24:11,866
all your traffic back to Wi-Fi.


756
00:24:12,846 --> 00:24:14,136
Doing this at the application


757
00:24:14,136 --> 00:24:15,306
layer would be extremely


758
00:24:15,306 --> 00:24:15,826
difficult.


759
00:24:18,746 --> 00:24:22,326
So, this brings me to Wi-Fi


760
00:24:22,326 --> 00:24:24,626
Assist, which is a technology


761
00:24:24,626 --> 00:24:27,066
that we since iOS 9 and that


762
00:24:27,266 --> 00:24:29,376
tries to address these kind of


763
00:24:29,376 --> 00:24:29,996
scenarios.


764
00:24:32,606 --> 00:24:34,896
Wi-Fi Assist is triggered


765
00:24:34,896 --> 00:24:36,556
whenever we are in a marginal


766
00:24:36,556 --> 00:24:38,746
Wi-Fi scenario, which means the


767
00:24:38,746 --> 00:24:40,536
signal strength of Wi-Fi is very


768
00:24:40,536 --> 00:24:40,806
low.


769
00:24:41,526 --> 00:24:44,186
And whenever the phone and iOS


770
00:24:44,186 --> 00:24:46,816
is detecting this, what happens


771
00:24:46,816 --> 00:24:49,126
is we will play a fittest wins


772
00:24:49,126 --> 00:24:50,946
out contest which between Wi-Fi


773
00:24:50,946 --> 00:24:51,606
and cell.


774
00:24:53,446 --> 00:24:55,096
So when you are creating a new


775
00:24:55,096 --> 00:24:56,656
connection, we will first


776
00:24:56,656 --> 00:24:58,486
attempt to create disconnection


777
00:24:58,486 --> 00:24:59,086
on Wi-Fi.


778
00:25:00,406 --> 00:25:02,566
And shortly after that where if


779
00:25:02,566 --> 00:25:03,666
this connection hasn't been


780
00:25:03,666 --> 00:25:05,826
established, we will go on and


781
00:25:05,826 --> 00:25:08,276
create a connection over cell so


782
00:25:08,276 --> 00:25:10,286
that way we are able-- if


783
00:25:10,396 --> 00:25:12,996
cellular data wins, we will


784
00:25:13,096 --> 00:25:15,296
start using the cellular link.


785
00:25:16,386 --> 00:25:19,996
So this will include a little


786
00:25:19,996 --> 00:25:21,836
bit of cellular data usage and


787
00:25:21,836 --> 00:25:24,396
so as part of Wi-Fi Assist we


788
00:25:24,396 --> 00:25:25,846
are limiting the amount of data


789
00:25:26,176 --> 00:25:28,256
that your application could use


790
00:25:28,286 --> 00:25:29,766
as part of this scenario.


791
00:25:30,236 --> 00:25:31,736
We have had great success with


792
00:25:31,736 --> 00:25:33,566
using Wi-Fi Assist, because it


793
00:25:33,566 --> 00:25:34,726
is able to establish a


794
00:25:34,726 --> 00:25:36,576
connection even if Wi-Fi is not


795
00:25:36,616 --> 00:25:37,056
good enough.


796
00:25:38,266 --> 00:25:40,006
And we have seen a great


797
00:25:40,006 --> 00:25:41,866
reduction in the terms of the


798
00:25:41,866 --> 00:25:43,126
number of data stalls.


799
00:25:43,446 --> 00:25:45,436
If your application is using the


800
00:25:45,436 --> 00:25:47,566
URLSession API, you will get


801
00:25:47,566 --> 00:25:48,786
Wi-Fi Assist for free.


802
00:25:49,476 --> 00:25:51,196
It is just going to work.


803
00:25:51,196 --> 00:25:53,436
You don't need to do any changes


804
00:25:53,436 --> 00:25:54,036
in your API.


805
00:25:54,036 --> 00:25:56,186
You don't need to do any changes


806
00:25:56,256 --> 00:25:58,236
inside the servers, it just


807
00:25:58,236 --> 00:25:58,706
works.


808
00:26:01,046 --> 00:26:03,236
Now the thing with Wi-Fi Assist


809
00:26:03,236 --> 00:26:04,866
is that it does this at flow


810
00:26:04,866 --> 00:26:05,836
creation time.


811
00:26:06,646 --> 00:26:08,576
And as I explained earlier, once


812
00:26:08,576 --> 00:26:10,786
a flow is established it will


813
00:26:10,786 --> 00:26:12,126
stick to this interface.


814
00:26:12,486 --> 00:26:16,126
So if Wi-Fi Assist was used and


815
00:26:16,476 --> 00:26:17,806
for some reason the Wi-Fi


816
00:26:17,806 --> 00:26:19,896
interface won the race, this


817
00:26:19,896 --> 00:26:21,156
flow that has been established


818
00:26:21,156 --> 00:26:23,336
on a Wi-Fi interface is going to


819
00:26:23,336 --> 00:26:23,976
stay there.


820
00:26:24,496 --> 00:26:26,166
So even if Wi-Fi afterwards is


821
00:26:26,166 --> 00:26:28,576
getting worse, this flow is


822
00:26:28,576 --> 00:26:30,096
going to get slower and slower


823
00:26:30,096 --> 00:26:31,446
and it will eventually stall.


824
00:26:33,276 --> 00:26:36,686
So, the only way to address this


825
00:26:36,746 --> 00:26:40,096
problem is by creating new


826
00:26:40,096 --> 00:26:42,126
protocol that is understood by


827
00:26:42,126 --> 00:26:44,246
the client and the server.


828
00:26:45,426 --> 00:26:47,346
And this brings me to Multipath


829
00:26:47,346 --> 00:26:47,706
TCP.


830
00:26:49,596 --> 00:26:52,166
Multipath TCP is the protocol


831
00:26:52,166 --> 00:26:53,366
that has been designed


832
00:26:53,626 --> 00:26:56,446
specifically for mobile devices.


833
00:26:59,016 --> 00:27:01,186
Multipath TCP is specified by


834
00:27:01,186 --> 00:27:04,926
the IETF as a standard, and it


835
00:27:04,996 --> 00:27:07,136
provides the exact same service


836
00:27:07,136 --> 00:27:08,916
as TCP, which means it is a


837
00:27:08,916 --> 00:27:11,266
reliable byte stream service.


838
00:27:11,896 --> 00:27:14,096
So if you are using HTP, if you


839
00:27:14,096 --> 00:27:16,596
are using TLS, HTTPS, Multipath


840
00:27:17,116 --> 00:27:19,846
TCP can be used just for that.


841
00:27:20,706 --> 00:27:22,846
Additionally, it is built on top


842
00:27:22,846 --> 00:27:26,216
of TCP, so it benefits from the


843
00:27:26,216 --> 00:27:27,646
years and years of experience


844
00:27:27,646 --> 00:27:29,086
that we have with developing


845
00:27:29,086 --> 00:27:29,486
TCP.


846
00:27:30,626 --> 00:27:32,016
And it benefits from the


847
00:27:32,016 --> 00:27:33,656
reliability and from the


848
00:27:33,656 --> 00:27:35,576
congestion control that TCP is


849
00:27:35,576 --> 00:27:36,146
providing.


850
00:27:37,436 --> 00:27:39,596
What it does on top of TCP is


851
00:27:39,596 --> 00:27:41,246
that it provides a way to


852
00:27:41,246 --> 00:27:42,926
seamlessly move traffic from the


853
00:27:42,926 --> 00:27:44,966
Wi-Fi interface over to the


854
00:27:44,966 --> 00:27:46,856
cellular interface whenever it


855
00:27:46,856 --> 00:27:48,376
realizes that Wi-Fi is not good


856
00:27:48,376 --> 00:27:50,316
enough, and it also allows to


857
00:27:50,316 --> 00:27:52,326
move the traffic back again so


858
00:27:52,326 --> 00:27:53,976
that your application is not


859
00:27:54,236 --> 00:27:55,816
consuming cellular data.


860
00:27:56,706 --> 00:27:59,466
It is also able to choose the


861
00:27:59,466 --> 00:28:01,246
best interface if you have a


862
00:28:01,246 --> 00:28:02,906
latency-sensitive and


863
00:28:02,906 --> 00:28:03,826
interactive flow.


864
00:28:07,226 --> 00:28:09,246
So, let's dive a little bit


865
00:28:09,246 --> 00:28:10,896
deeper into Multipath TCP.


866
00:28:10,896 --> 00:28:13,266
If you are building your


867
00:28:13,266 --> 00:28:14,836
application on top of the


868
00:28:14,836 --> 00:28:18,506
URLSession API, Multipath TCP


869
00:28:18,966 --> 00:28:20,196
sits just below this.


870
00:28:20,976 --> 00:28:23,346
So as you'll layer, you don't


871
00:28:23,346 --> 00:28:24,806
really need to worry about those


872
00:28:24,806 --> 00:28:25,866
different interfaces.


873
00:28:27,566 --> 00:28:28,976
Now what happens is, when you


874
00:28:28,976 --> 00:28:31,466
are sending data, you're sending


875
00:28:31,466 --> 00:28:33,146
something through the URLSession


876
00:28:33,146 --> 00:28:35,786
API, this data will go through


877
00:28:35,786 --> 00:28:37,776
your URLSession over the MPTCP


878
00:28:37,776 --> 00:28:40,036
stack, and the MPTCP stack is in


879
00:28:40,036 --> 00:28:41,486
charge of scheduling this


880
00:28:41,536 --> 00:28:43,436
traffic over either Wi-Fi or the


881
00:28:43,436 --> 00:28:44,786
cellular link.


882
00:28:45,936 --> 00:28:47,846
Now how does it do this


883
00:28:47,846 --> 00:28:50,096
scheduling over Wi-Fi and Cell,


884
00:28:50,556 --> 00:28:52,136
well it does this by creating


885
00:28:52,136 --> 00:28:54,316
the so-called TCP Subflows.


886
00:28:55,336 --> 00:28:57,746
Those TCP subflows, one for each


887
00:28:57,746 --> 00:28:59,086
interface are actually


888
00:28:59,216 --> 00:29:00,936
full-fledged TCP connections,


889
00:29:01,816 --> 00:29:03,926
and MPTCP is in charge of making


890
00:29:03,926 --> 00:29:05,666
sure that the data gets sent


891
00:29:05,666 --> 00:29:07,436
over either of them.


892
00:29:08,526 --> 00:29:10,486
It is also in charge of creating


893
00:29:10,486 --> 00:29:11,926
and destroying those TCP


894
00:29:11,926 --> 00:29:12,456
subflows.


895
00:29:12,836 --> 00:29:15,316
So again, at your layer on top


896
00:29:15,316 --> 00:29:17,536
of your URLSession, you are not


897
00:29:17,586 --> 00:29:19,546
even aware of those subflows.


898
00:29:20,076 --> 00:29:22,426
MPTCP decides when to create


899
00:29:22,426 --> 00:29:24,286
those subflows and when to


900
00:29:24,286 --> 00:29:25,236
destroy them again.


901
00:29:26,256 --> 00:29:29,286
Now, Multipath TCP is actually


902
00:29:29,286 --> 00:29:30,166
not that new.


903
00:29:30,946 --> 00:29:32,406
We have been using it since


904
00:29:32,406 --> 00:29:34,436
several years now at Apple in


905
00:29:34,536 --> 00:29:37,466
iOS, and we are using since iOS


906
00:29:37,466 --> 00:29:38,566
7 for Siri.


907
00:29:39,576 --> 00:29:42,036
Now, Siri is a very particular


908
00:29:42,036 --> 00:29:42,706
application.


909
00:29:43,756 --> 00:29:45,776
Many people, when they are using


910
00:29:45,776 --> 00:29:47,216
it, they are actually walking


911
00:29:47,216 --> 00:29:49,216
out of their home because, for


912
00:29:49,216 --> 00:29:50,416
example, while walking out of


913
00:29:50,416 --> 00:29:52,426
their home they are asking Siri


914
00:29:52,926 --> 00:29:54,326
to send a message to a friend,


915
00:29:54,326 --> 00:29:54,896
for example.


916
00:29:55,726 --> 00:29:57,956
And so Siri is very often in


917
00:29:57,956 --> 00:29:59,406
this scenerio where Wi-Fi is


918
00:29:59,406 --> 00:30:00,736
getting worse and worse and


919
00:30:00,736 --> 00:30:02,586
ultimately the connection drops.


920
00:30:03,726 --> 00:30:04,526
Now the thing is, this


921
00:30:04,526 --> 00:30:06,816
connection that Siri created to


922
00:30:06,816 --> 00:30:08,636
send the data to the server and


923
00:30:08,636 --> 00:30:11,376
get a response back, this data,


924
00:30:11,376 --> 00:30:12,786
this connection, is very


925
00:30:12,786 --> 00:30:14,556
critical because if this


926
00:30:14,556 --> 00:30:16,706
connection breaks, the response


927
00:30:16,706 --> 00:30:17,846
is not going to come back.


928
00:30:19,046 --> 00:30:20,546
And so it's also very time


929
00:30:20,546 --> 00:30:22,406
sensitive because the user is


930
00:30:22,406 --> 00:30:24,046
often literally looking at the


931
00:30:24,046 --> 00:30:25,306
phone and waiting for the


932
00:30:25,306 --> 00:30:26,056
response.


933
00:30:26,716 --> 00:30:28,996
And it's also a very low volume


934
00:30:28,996 --> 00:30:29,556
connection.


935
00:30:30,146 --> 00:30:31,486
There's not much data being


936
00:30:31,486 --> 00:30:31,866
sent.


937
00:30:32,396 --> 00:30:33,876
So even if we incur -- send a


938
00:30:33,876 --> 00:30:35,746
little bit of data over the


939
00:30:35,746 --> 00:30:37,736
cellular link, it is not going


940
00:30:37,736 --> 00:30:39,926
to be a lot of data, only a few


941
00:30:39,926 --> 00:30:40,636
kilobytes.


942
00:30:43,486 --> 00:30:45,566
Now, because of all those free


943
00:30:45,566 --> 00:30:47,246
characteristics, the way we are


944
00:30:47,246 --> 00:30:49,266
using a Multipath TCP for Siri


945
00:30:49,856 --> 00:30:52,166
is in such a way that whenever a


946
00:30:52,166 --> 00:30:54,826
user uses Siri, we create a


947
00:30:54,826 --> 00:30:57,726
subflow over Wi-Fi and a TCP


948
00:30:57,726 --> 00:30:59,846
subflow over the cellular link.


949
00:31:00,916 --> 00:31:02,536
And we make those subflows ready


950
00:31:02,536 --> 00:31:04,686
to send the data right away so


951
00:31:04,686 --> 00:31:06,956
that we get a very low latency


952
00:31:06,956 --> 00:31:07,696
response.


953
00:31:08,506 --> 00:31:09,796
When we are scheduling traffic


954
00:31:09,796 --> 00:31:11,706
we will prefer the Wi-Fi link,


955
00:31:12,386 --> 00:31:13,566
but if we realize that the


956
00:31:13,566 --> 00:31:15,606
latency on the Wi-Fi link is too


957
00:31:15,606 --> 00:31:17,676
high to get a quick response


958
00:31:17,676 --> 00:31:21,476
back, then we do not hesitate to


959
00:31:21,476 --> 00:31:23,106
send traffic over the cellular


960
00:31:23,676 --> 00:31:23,806
link.


961
00:31:25,456 --> 00:31:27,736
Now, during all of this for


962
00:31:27,736 --> 00:31:30,116
Multipath TCP we have seen great


963
00:31:30,156 --> 00:31:31,366
success.


964
00:31:32,526 --> 00:31:34,526
In one particular metric which


965
00:31:34,526 --> 00:31:36,526
we call the time to first word,


966
00:31:37,016 --> 00:31:38,646
which means the time it takes


967
00:31:38,646 --> 00:31:40,346
until the user sees the first


968
00:31:40,346 --> 00:31:42,136
spoken word appear on the


969
00:31:42,136 --> 00:31:44,906
screen, this metric has been


970
00:31:44,906 --> 00:31:46,936
reduced into worse-case scenario


971
00:31:47,026 --> 00:31:49,016
which means when Wi-Fi was very


972
00:31:49,016 --> 00:31:51,616
bad, which we call like the 95th


973
00:31:51,616 --> 00:31:55,276
percentile, this metric has been


974
00:31:55,276 --> 00:31:56,956
improved by 20%.


975
00:31:57,296 --> 00:31:58,446
So in terms of latency


976
00:31:58,446 --> 00:32:00,286
reduction, we were able to bring


977
00:32:00,286 --> 00:32:02,016
down the latency thanks, to


978
00:32:02,016 --> 00:32:03,036
Multipath TCP.


979
00:32:04,796 --> 00:32:07,716
And also as users are typically


980
00:32:07,836 --> 00:32:10,616
walking out of the Wi-Fi zone


981
00:32:10,616 --> 00:32:13,356
when using Siri, we have reduced


982
00:32:13,356 --> 00:32:14,896
the amount of network failures,


983
00:32:15,226 --> 00:32:16,766
and we have reduced it by 5


984
00:32:16,816 --> 00:32:18,846
times compared to when normal


985
00:32:18,846 --> 00:32:19,916
TCP was used.


986
00:32:21,096 --> 00:32:24,286
So, we have seen great success


987
00:32:24,346 --> 00:32:28,876
with Siri and we also received a


988
00:32:28,876 --> 00:32:30,826
lot requests from new developers


989
00:32:31,256 --> 00:32:32,976
that we should open up the API


990
00:32:32,976 --> 00:32:34,696
for Multipath TCP.


991
00:32:35,846 --> 00:32:38,976
Now, in iOS 11 we are making


992
00:32:38,976 --> 00:32:40,846
this step and we are opening up


993
00:32:40,846 --> 00:32:43,406
the API for you to start using


994
00:32:44,276 --> 00:32:44,343
it.


995
00:32:45,516 --> 00:32:49,500
[ Applause ]


996
00:32:52,046 --> 00:32:54,136
So in order to start using the


997
00:32:54,136 --> 00:32:56,926
API, there are three things that


998
00:32:56,926 --> 00:32:58,996
I will have to talk to you about


999
00:32:58,996 --> 00:33:00,556
it, and I would come to each of


1000
00:33:00,596 --> 00:33:01,356
them in a minute.


1001
00:33:02,066 --> 00:33:04,216
First of all, because it's a new


1002
00:33:04,216 --> 00:33:06,406
protocol we will need service


1003
00:33:06,406 --> 00:33:06,866
support.


1004
00:33:08,046 --> 00:33:08,976
Once you have the service


1005
00:33:08,976 --> 00:33:10,896
support you can start to choose


1006
00:33:11,076 --> 00:33:13,046
which of your connections would


1007
00:33:13,046 --> 00:33:14,536
benefit from MPTCP.


1008
00:33:15,756 --> 00:33:17,496
And then once we've chosen the


1009
00:33:17,496 --> 00:33:19,366
connections, you can then as a


1010
00:33:19,366 --> 00:33:21,826
third step start opting into the


1011
00:33:21,826 --> 00:33:23,596
URLSession API.


1012
00:33:24,196 --> 00:33:26,586
So let's start with the server


1013
00:33:26,586 --> 00:33:28,686
support for Multipath TCP.


1014
00:33:29,686 --> 00:33:33,696
Now, it is a very new protocol


1015
00:33:34,546 --> 00:33:36,856
and so by default most server


1016
00:33:36,856 --> 00:33:38,796
infrastructures do not support


1017
00:33:38,796 --> 00:33:40,466
Multipath TCP.


1018
00:33:41,136 --> 00:33:43,486
This means that you will need to


1019
00:33:43,746 --> 00:33:45,416
update or change your server


1020
00:33:45,416 --> 00:33:47,796
infrastructure to start


1021
00:33:47,796 --> 00:33:49,256
supporting Multipath TCP.


1022
00:33:50,016 --> 00:33:51,666
However, there is good news.


1023
00:33:51,746 --> 00:33:54,356
If you are using one of the many


1024
00:33:54,356 --> 00:33:55,696
load balances from one of the


1025
00:33:55,696 --> 00:33:58,346
famous venders, there's a very


1026
00:33:58,346 --> 00:34:00,036
high chance that this vender


1027
00:34:00,036 --> 00:34:01,946
already supports Multipath TCP.


1028
00:34:02,986 --> 00:34:06,006
So ask your server team, ask


1029
00:34:06,006 --> 00:34:07,606
them to check the manual of the


1030
00:34:07,606 --> 00:34:08,616
load balancer that they are


1031
00:34:08,616 --> 00:34:09,096
using.


1032
00:34:09,335 --> 00:34:11,186
Maybe ask the vender if they


1033
00:34:11,186 --> 00:34:13,775
support Multipath TCP, and if


1034
00:34:13,775 --> 00:34:17,056
they do all you have to do is


1035
00:34:17,056 --> 00:34:18,126
you enable it in the


1036
00:34:18,126 --> 00:34:19,746
configuration of your servers,


1037
00:34:20,106 --> 00:34:21,696
and from that moment on you're


1038
00:34:21,696 --> 00:34:23,525
good to go to start using


1039
00:34:23,525 --> 00:34:25,106
Multipath TCP.


1040
00:34:26,196 --> 00:34:28,815
If, however, you are using Linux


1041
00:34:29,045 --> 00:34:30,666
on your server infrastructure,


1042
00:34:31,616 --> 00:34:33,036
the mainstream Linux kernel


1043
00:34:33,036 --> 00:34:34,686
doesn't yet support Multipath


1044
00:34:34,686 --> 00:34:37,196
TCP, however there's the new


1045
00:34:37,196 --> 00:34:38,976
Linux kernel which is available


1046
00:34:38,976 --> 00:34:41,085
at this website that you can


1047
00:34:41,085 --> 00:34:43,806
install and that will be able to


1048
00:34:43,806 --> 00:34:45,666
provide Multipath TCP to your


1049
00:34:45,666 --> 00:34:46,755
server infrastructure.


1050
00:34:48,036 --> 00:34:50,196
On this website, you will find


1051
00:34:50,196 --> 00:34:52,126
AWS and instructions for Google


1052
00:34:52,126 --> 00:34:54,886
Compute Engine to install


1053
00:34:54,886 --> 00:34:57,126
Multipath TCP.


1054
00:34:57,346 --> 00:34:59,626
And we are also working together


1055
00:34:59,626 --> 00:35:01,366
with the open source community


1056
00:35:01,656 --> 00:35:04,146
of this new Linux kernel to


1057
00:35:04,146 --> 00:35:04,886
maintain it.


1058
00:35:05,066 --> 00:35:08,066
And also we are working with the


1059
00:35:08,066 --> 00:35:10,116
open source community to make


1060
00:35:10,116 --> 00:35:12,436
this Multipath TCP code


1061
00:35:12,436 --> 00:35:14,026
available in the mainstream


1062
00:35:14,026 --> 00:35:15,536
kernel, so that all the


1063
00:35:15,536 --> 00:35:17,136
distributions, all the Linux


1064
00:35:17,136 --> 00:35:18,956
distributions are getting it by


1065
00:35:18,956 --> 00:35:19,486
default.


1066
00:35:21,436 --> 00:35:22,606
Now if you have your server


1067
00:35:22,606 --> 00:35:23,676
infrastructure and you have a


1068
00:35:23,676 --> 00:35:25,516
bunch of backend servers that


1069
00:35:25,516 --> 00:35:26,566
are sitting behind the load


1070
00:35:26,566 --> 00:35:28,406
balancer, a Linux load balancer,


1071
00:35:29,036 --> 00:35:31,176
all what you'll need to do in


1072
00:35:31,176 --> 00:35:32,956
your server infrastructure to


1073
00:35:32,956 --> 00:35:34,786
get Multipath TCP in this


1074
00:35:34,786 --> 00:35:37,436
environment, is that you update


1075
00:35:38,216 --> 00:35:39,856
the Linux kernel on this load


1076
00:35:39,856 --> 00:35:42,646
balancer, you put an HTTP proxy


1077
00:35:42,646 --> 00:35:44,876
on top of it like HAProxy or


1078
00:35:44,876 --> 00:35:47,336
nginx, and from that moment on


1079
00:35:47,576 --> 00:35:48,996
you're good to go and you can


1080
00:35:48,996 --> 00:35:50,546
start using Multipath TCP.


1081
00:35:52,036 --> 00:35:54,916
So at the end of this week when


1082
00:35:54,916 --> 00:35:56,406
you go back to your companies,


1083
00:35:56,946 --> 00:35:58,516
go and talk to your server team


1084
00:35:58,716 --> 00:35:59,936
and tell them to get the


1085
00:35:59,936 --> 00:36:01,776
infrastructure ready for


1086
00:36:01,776 --> 00:36:04,536
Multipath TCP.


1087
00:36:05,296 --> 00:36:07,566
So, once you have your server


1088
00:36:07,566 --> 00:36:11,136
infrastructure ready to go, then


1089
00:36:11,136 --> 00:36:12,196
you can start looking at the


1090
00:36:12,196 --> 00:36:13,646
connections that you have inside


1091
00:36:13,646 --> 00:36:16,036
your applications and which one


1092
00:36:16,036 --> 00:36:17,766
would benefit the most from


1093
00:36:17,766 --> 00:36:18,836
Multipath TCP.


1094
00:36:19,926 --> 00:36:22,136
We are exposing the Multipath


1095
00:36:22,136 --> 00:36:24,856
TCP service type which is


1096
00:36:24,856 --> 00:36:26,736
providing two types of different


1097
00:36:26,736 --> 00:36:28,646
services using MPTCP.


1098
00:36:29,276 --> 00:36:31,436
The first one is the handover


1099
00:36:31,436 --> 00:36:33,246
mode which provides a high


1100
00:36:33,246 --> 00:36:35,486
reliability for your long length


1101
00:36:35,526 --> 00:36:36,306
connections.


1102
00:36:37,676 --> 00:36:39,886
The second is the interactive


1103
00:36:39,936 --> 00:36:41,886
mode, the mode that we are using


1104
00:36:41,886 --> 00:36:42,456
for Siri.


1105
00:36:43,386 --> 00:36:44,786
And this one provides a low


1106
00:36:44,786 --> 00:36:46,426
latency response for your


1107
00:36:46,546 --> 00:36:48,146
interactive and latency


1108
00:36:48,146 --> 00:36:49,206
sensitive connections.


1109
00:36:50,936 --> 00:36:53,786
So let's start with the handover


1110
00:36:54,326 --> 00:36:54,426
mode.


1111
00:36:55,016 --> 00:36:57,216
The handover mode is able to


1112
00:36:57,216 --> 00:36:59,786
move traffic from Wi-Fi to cell


1113
00:37:00,076 --> 00:37:02,676
and from cell back to Wi-Fi.


1114
00:37:03,756 --> 00:37:06,946
Whenever you are in a network


1115
00:37:06,946 --> 00:37:08,866
that has good Wi-Fi coverage and


1116
00:37:08,866 --> 00:37:10,436
to choose to opt into the


1117
00:37:10,436 --> 00:37:12,496
handover mode, what will happen


1118
00:37:12,496 --> 00:37:13,886
is you will create a connection


1119
00:37:14,056 --> 00:37:16,006
only on the Wi-Fi link and we


1120
00:37:16,006 --> 00:37:17,956
will only be using the Wi-Fi


1121
00:37:17,956 --> 00:37:20,026
link, no cellular data usage at


1122
00:37:20,026 --> 00:37:20,246
all.


1123
00:37:21,706 --> 00:37:23,626
If however now the user is


1124
00:37:23,626 --> 00:37:25,136
walking out of the Wi-Fi zone


1125
00:37:25,396 --> 00:37:26,866
and the Wi-Fi signal is getting


1126
00:37:26,866 --> 00:37:29,806
worse, when we realize that this


1127
00:37:29,806 --> 00:37:32,146
is happening, we will bring up


1128
00:37:32,546 --> 00:37:35,796
the cellular link and we will


1129
00:37:35,796 --> 00:37:37,726
create a TCP subflow on the


1130
00:37:37,796 --> 00:37:39,966
cellular interface, so from that


1131
00:37:39,966 --> 00:37:42,116
moment on your application will


1132
00:37:42,116 --> 00:37:43,636
be using the cellular data.


1133
00:37:45,186 --> 00:37:47,046
If now the user is walking back


1134
00:37:47,046 --> 00:37:49,406
into good Wi-Fi, what happens is


1135
00:37:49,486 --> 00:37:51,246
we will tear down the cellular


1136
00:37:51,246 --> 00:37:53,366
link again and move all traffic


1137
00:37:53,836 --> 00:37:55,146
back onto the Wi-Fi link.


1138
00:37:56,166 --> 00:37:57,986
This allows us to basically


1139
00:37:58,366 --> 00:38:00,356
minimize the cellular data usage


1140
00:38:00,416 --> 00:38:02,836
at all cost.


1141
00:38:03,026 --> 00:38:04,996
We encourage you to use it for


1142
00:38:04,996 --> 00:38:07,056
your persistent and long length


1143
00:38:07,056 --> 00:38:07,676
connections.


1144
00:38:08,496 --> 00:38:10,226
Those kind of connections which


1145
00:38:10,396 --> 00:38:12,506
you cannot easily restart or


1146
00:38:12,506 --> 00:38:13,586
restart from the beginning,


1147
00:38:14,666 --> 00:38:15,936
those connections would benefit


1148
00:38:15,936 --> 00:38:17,266
the most from the handover mode.


1149
00:38:19,026 --> 00:38:22,036
Now, as I mentioned, Multipath


1150
00:38:22,036 --> 00:38:24,616
TCP is being part of Wi-Fi


1151
00:38:24,616 --> 00:38:27,206
Assist, and in Wi-Fi Assist we


1152
00:38:27,206 --> 00:38:30,116
have limits that try to limit


1153
00:38:30,146 --> 00:38:31,586
the amount of data that we are


1154
00:38:31,586 --> 00:38:32,886
sending on the cellular link.


1155
00:38:34,116 --> 00:38:38,606
So we encourage you to use the


1156
00:38:38,606 --> 00:38:40,826
handover mode only for low


1157
00:38:40,826 --> 00:38:41,826
volume connections,


1158
00:38:43,086 --> 00:38:44,506
because if you hit the Wi-Fi


1159
00:38:44,506 --> 00:38:46,156
Assist limit we will stop using


1160
00:38:46,156 --> 00:38:47,686
the cellular link because we


1161
00:38:47,686 --> 00:38:49,506
don't want your application to


1162
00:38:49,506 --> 00:38:50,836
show up as the one that is


1163
00:38:50,836 --> 00:38:52,086
consuming the most cellular


1164
00:38:52,086 --> 00:38:55,386
data, so be mindful when you are


1165
00:38:55,386 --> 00:38:57,126
choosing the handover mode for


1166
00:38:57,126 --> 00:38:57,886
your connections.


1167
00:38:58,486 --> 00:39:00,106
Don't use it for your bulk data


1168
00:39:00,106 --> 00:39:01,526
transfer where you are


1169
00:39:01,526 --> 00:39:03,746
downloading gigabytes and


1170
00:39:03,746 --> 00:39:04,666
gigabytes of data.


1171
00:39:05,226 --> 00:39:07,936
And the handover mode is


1172
00:39:07,936 --> 00:39:09,856
available right away in the


1173
00:39:09,856 --> 00:39:11,446
first beta that you are getting


1174
00:39:12,456 --> 00:39:13,086
since Monday.


1175
00:39:14,016 --> 00:39:15,246
Now, let's get on to the


1176
00:39:15,246 --> 00:39:17,776
interactive mode, the mode that


1177
00:39:17,776 --> 00:39:19,526
is trying to reduce the latency


1178
00:39:19,526 --> 00:39:21,226
for your latency sensitive and


1179
00:39:21,226 --> 00:39:22,366
anti-active connections.


1180
00:39:24,816 --> 00:39:26,296
Whenever you're using the


1181
00:39:26,296 --> 00:39:27,536
interactive mode, we will bring


1182
00:39:27,536 --> 00:39:29,546
up both Wi-Fi and cell right


1183
00:39:29,546 --> 00:39:31,666
away, even if Wi-Fi is in a good


1184
00:39:31,666 --> 00:39:33,736
state, because we want to


1185
00:39:33,736 --> 00:39:35,096
schedule the traffic in such a


1186
00:39:35,096 --> 00:39:38,246
way so that we are reducing the


1187
00:39:38,246 --> 00:39:38,816
latency.


1188
00:39:39,436 --> 00:39:41,296
We will still prefer the Wi-Fi


1189
00:39:41,296 --> 00:39:43,156
interface, but as soon as we


1190
00:39:43,156 --> 00:39:44,546
realize Wi-Fi is not good


1191
00:39:44,546 --> 00:39:47,276
enough, we will not hesitate to


1192
00:39:47,276 --> 00:39:48,566
start sending data on the


1193
00:39:48,566 --> 00:39:49,246
cellular link.


1194
00:39:50,496 --> 00:39:54,026
So use it for your very


1195
00:39:54,026 --> 00:39:56,006
interactive latency sensitive


1196
00:39:56,006 --> 00:39:58,116
flows, the kinds of flows that


1197
00:39:58,116 --> 00:39:59,386
are not transmitting a lot of


1198
00:39:59,386 --> 00:40:01,386
data, again, because we have the


1199
00:40:01,386 --> 00:40:03,286
Wi-Fi Assist limit that we are


1200
00:40:03,286 --> 00:40:05,386
applying and so if your flows


1201
00:40:05,386 --> 00:40:06,926
are hitting this limit we will


1202
00:40:06,926 --> 00:40:09,106
stop using the cellular link.


1203
00:40:10,216 --> 00:40:12,396
Multipath TCP will try to reduce


1204
00:40:12,396 --> 00:40:14,226
latency as much as it can for


1205
00:40:14,226 --> 00:40:15,336
those kind of connections.


1206
00:40:15,816 --> 00:40:17,946
It will incur some cellular data


1207
00:40:17,946 --> 00:40:20,106
costs, and we will be giving


1208
00:40:20,106 --> 00:40:22,076
this to you in an upcoming Beta


1209
00:40:22,076 --> 00:40:24,656
release for you to start using


1210
00:40:24,656 --> 00:40:24,776
it.


1211
00:40:27,246 --> 00:40:29,706
So now we have the server


1212
00:40:29,706 --> 00:40:32,596
infrastructure, we have chosen


1213
00:40:32,596 --> 00:40:33,916
which connections would benefit


1214
00:40:33,916 --> 00:40:35,596
from the handover mode, which


1215
00:40:35,596 --> 00:40:37,166
connections would benefit from


1216
00:40:37,166 --> 00:40:38,146
the interactive mode.


1217
00:40:39,676 --> 00:40:41,346
Now you can start using the


1218
00:40:41,346 --> 00:40:42,746
URLSession configuration


1219
00:40:42,746 --> 00:40:44,806
property to opt in your


1220
00:40:44,806 --> 00:40:45,926
connections to this API.


1221
00:40:47,456 --> 00:40:49,306
And we are exposing it in a very


1222
00:40:49,306 --> 00:40:49,956
simple way.


1223
00:40:50,256 --> 00:40:52,136
All what you need to do is you


1224
00:40:52,136 --> 00:40:54,066
need to set the Multipath


1225
00:40:54,066 --> 00:40:56,306
service type in your URLSession


1226
00:40:56,306 --> 00:40:57,376
configuration property.


1227
00:40:58,116 --> 00:40:59,046
You can choose between the


1228
00:40:59,046 --> 00:41:01,106
handover mode or the interactive


1229
00:41:01,156 --> 00:41:03,136
mode, and from that point on


1230
00:41:03,336 --> 00:41:04,206
you're good to go.


1231
00:41:04,386 --> 00:41:06,886
Your connections will try to use


1232
00:41:06,886 --> 00:41:08,636
Multipath TCP and they will


1233
00:41:09,086 --> 00:41:10,976
benefit from it.


1234
00:41:12,226 --> 00:41:14,066
Now in order to use it, you will


1235
00:41:14,066 --> 00:41:15,766
need to add the capability


1236
00:41:15,766 --> 00:41:20,106
Multipath in X-code so that you


1237
00:41:20,106 --> 00:41:21,436
can start using it.


1238
00:41:22,036 --> 00:41:26,736
Now, this brings me to one last


1239
00:41:26,736 --> 00:41:28,316
thing that I need to talk about


1240
00:41:28,996 --> 00:41:30,136
and this is the Aggregation


1241
00:41:30,136 --> 00:41:30,366
Mode.


1242
00:41:32,746 --> 00:41:35,006
Now, imagine you're connected to


1243
00:41:35,006 --> 00:41:36,906
Wi-Fi and it's providing you one


1244
00:41:36,906 --> 00:41:38,856
megabyte per second in terms of


1245
00:41:38,856 --> 00:41:39,356
throughput.


1246
00:41:40,486 --> 00:41:41,366
On the other side you have


1247
00:41:41,466 --> 00:41:43,236
cellular and it is also giving


1248
00:41:43,236 --> 00:41:44,706
you one megabyte per second of


1249
00:41:44,706 --> 00:41:45,166
throughput.


1250
00:41:46,176 --> 00:41:47,106
Wouldn't it be good if you can


1251
00:41:47,106 --> 00:41:48,996
combine both together into one


1252
00:41:48,996 --> 00:41:50,636
big link that gives you two


1253
00:41:50,636 --> 00:41:51,706
megabytes per seconds?


1254
00:41:52,986 --> 00:41:54,856
Multipath TCP is providing


1255
00:41:54,856 --> 00:41:55,736
exactly this.


1256
00:41:56,536 --> 00:41:58,006
It allows for aggregate the


1257
00:41:58,006 --> 00:41:59,666
capacities of multiple links


1258
00:41:59,886 --> 00:42:01,866
into one byte connection.


1259
00:42:04,656 --> 00:42:08,536
So this Aggregation Mode is


1260
00:42:08,536 --> 00:42:10,166
available to you for


1261
00:42:10,166 --> 00:42:11,146
experimentation.


1262
00:42:11,846 --> 00:42:13,356
And why is it experimentation?


1263
00:42:14,036 --> 00:42:15,926
Well, if we are aggregating the


1264
00:42:15,926 --> 00:42:17,496
capacities of both links


1265
00:42:17,496 --> 00:42:19,646
together, we are consuming quite


1266
00:42:19,646 --> 00:42:21,286
a little bit of cellular data.


1267
00:42:21,916 --> 00:42:25,126
So we want you to think about


1268
00:42:25,726 --> 00:42:27,486
what kind of connections do you


1269
00:42:27,486 --> 00:42:29,416
have in your application that


1270
00:42:29,416 --> 00:42:31,056
would benefit from a little bit


1271
00:42:31,126 --> 00:42:34,176
higher throughput, at the cost


1272
00:42:34,176 --> 00:42:35,646
of cellular data usage?


1273
00:42:37,616 --> 00:42:38,636
If you want to use the


1274
00:42:38,636 --> 00:42:40,376
Aggregation Mode, what you need


1275
00:42:40,376 --> 00:42:42,366
to do is you go into developer


1276
00:42:42,366 --> 00:42:43,786
settings on your phones, you


1277
00:42:43,786 --> 00:42:46,446
flip the switch to enable the


1278
00:42:46,446 --> 00:42:48,366
aggregation mode, and from that


1279
00:42:48,366 --> 00:42:50,036
moment on you can start


1280
00:42:50,036 --> 00:42:51,656
experimenting with the


1281
00:42:51,656 --> 00:42:53,356
aggregation URLSession


1282
00:42:53,356 --> 00:42:54,486
configuration property.


1283
00:42:56,586 --> 00:42:58,576
This mode on customer devices,


1284
00:42:58,576 --> 00:42:59,816
it will not be available.


1285
00:43:01,876 --> 00:43:04,276
So you can start experimenting


1286
00:43:04,276 --> 00:43:05,636
with the Aggregation Mode in an


1287
00:43:05,636 --> 00:43:08,756
upcoming Beta release.


1288
00:43:08,866 --> 00:43:11,176
So, let's recap.


1289
00:43:13,386 --> 00:43:16,226
In iOS we are very well aware of


1290
00:43:16,226 --> 00:43:18,556
this problem of using multiple


1291
00:43:18,556 --> 00:43:20,336
interfaces on mobile devices.


1292
00:43:21,836 --> 00:43:24,076
We have Wi-Fi Assist since iOS


1293
00:43:24,076 --> 00:43:27,606
9, and we see a great benefit in


1294
00:43:27,606 --> 00:43:28,916
using Wi-Fi Assist.


1295
00:43:30,056 --> 00:43:32,076
Now in iOS 11, we are pushing


1296
00:43:32,076 --> 00:43:32,956
this even farther.


1297
00:43:33,336 --> 00:43:34,936
We are adding Multipath


1298
00:43:34,936 --> 00:43:37,186
protocols into Wi-Fi Assist.


1299
00:43:38,146 --> 00:43:39,916
And this protocol Multipath TCP


1300
00:43:39,916 --> 00:43:42,476
is open as a public API in iOS


1301
00:43:42,476 --> 00:43:42,896
11.


1302
00:43:43,506 --> 00:43:45,136
You can use it for the handover


1303
00:43:45,136 --> 00:43:47,186
mode or for the Interactive Mode


1304
00:43:48,046 --> 00:43:51,196
to improve your user experience


1305
00:43:51,196 --> 00:43:52,476
inside your applications.


1306
00:43:54,436 --> 00:43:58,176
So with this, you will now have


1307
00:43:58,276 --> 00:43:59,056
a little break.


1308
00:43:59,436 --> 00:44:01,296
This was the first part of the


1309
00:44:01,296 --> 00:44:02,276
networking session.


1310
00:44:03,076 --> 00:44:04,536
After the break, you will get


1311
00:44:04,536 --> 00:44:06,396
the second part.


1312
00:44:06,396 --> 00:44:08,616
In this second part we will


1313
00:44:08,616 --> 00:44:11,096
talking about new exciting APIs


1314
00:44:11,096 --> 00:44:13,276
at URLSession layer that will


1315
00:44:13,276 --> 00:44:14,946
improve the networking for your


1316
00:44:14,946 --> 00:44:15,606
applications.


1317
00:44:16,466 --> 00:44:16,836
Thank you.


1318
00:44:17,516 --> 00:44:21,500
[ Applause ]

