1
00:00:08,516 --> 00:00:17,500
[ Music ]


2
00:00:26,516 --> 00:00:28,606
[ Applause ]


3
00:00:29,106 --> 00:00:29,526
>> Thank you.


4
00:00:33,046 --> 00:00:35,186
You're all amazing for
coming to a security talk


5
00:00:35,186 --> 00:00:37,146
at 4:00 p.m. I know
it's been a long day,


6
00:00:37,146 --> 00:00:39,036
but thank you so
much for coming.


7
00:00:39,596 --> 00:00:41,866
My name is Ivan Krstic, I
head Security Engineering


8
00:00:41,866 --> 00:00:45,016
and Architecture at Apple, which
is the group that built security


9
00:00:45,016 --> 00:00:47,986
from the ground up into every
product we ship to users.


10
00:00:49,006 --> 00:00:50,936
Today the focus is iOS.


11
00:00:50,936 --> 00:00:52,926
And I am so proud to tell you


12
00:00:52,926 --> 00:00:54,466
about the role security
has played


13
00:00:54,466 --> 00:00:56,976
as a key design philosophy
for that platform.


14
00:00:58,586 --> 00:01:00,806
Before we dive in, we
need to set some context.


15
00:01:01,686 --> 00:01:03,556
Why is security so
important to Apple,


16
00:01:03,976 --> 00:01:06,516
and why do we believe it is
so critical to our users?


17
00:01:07,906 --> 00:01:11,816
The answer is because our mobile
devices are an unprecedented


18
00:01:11,816 --> 00:01:12,916
record of our lives.


19
00:01:13,976 --> 00:01:16,896
Never before in history
have there been objects


20
00:01:16,946 --> 00:01:20,466
that know so much about us.


21
00:01:20,736 --> 00:01:21,986
About how we spend money.


22
00:01:23,456 --> 00:01:25,936
About the emails we send,
and the photos we take.


23
00:01:26,856 --> 00:01:27,966
About our messages.


24
00:01:28,266 --> 00:01:31,386
From our quickest hellos to our
most intimate conversations.


25
00:01:34,316 --> 00:01:35,336
When you think of it that way,


26
00:01:35,336 --> 00:01:37,126
you realize that protecting
the security of all


27
00:01:37,126 --> 00:01:39,766
that information is so much
more than just about technology.


28
00:01:40,526 --> 00:01:43,796
For us it's a mission, and it's
a mission that is nothing short


29
00:01:43,796 --> 00:01:46,346
of protecting the digital
personal sovereignty


30
00:01:46,346 --> 00:01:47,016
of our users.


31
00:01:47,626 --> 00:01:51,366
And when you think about it
that way, you also realize


32
00:01:51,366 --> 00:01:53,816
that the very definition
of attackers has changed.


33
00:01:55,496 --> 00:01:58,496
Attackers today might
be criminals looking


34
00:01:58,496 --> 00:01:59,876
to hold your data for ransom.


35
00:02:00,906 --> 00:02:03,266
They might be unscrupulous
business competitors looking


36
00:02:03,266 --> 00:02:04,876
to gain an edge.


37
00:02:05,336 --> 00:02:07,536
They might be internet
service providers looking


38
00:02:07,536 --> 00:02:11,346
to indelibly mark your
online activity for tracking


39
00:02:11,346 --> 00:02:12,926
and advertising without
your consent.


40
00:02:13,706 --> 00:02:15,676
It could be nation states,


41
00:02:16,076 --> 00:02:18,866
like in the 2014 hack
of Sony Pictures.


42
00:02:19,846 --> 00:02:22,626
And sometimes curiosity
can get the better


43
00:02:22,626 --> 00:02:25,136
of even those close to us.


44
00:02:26,566 --> 00:02:29,316
And then, of course, we must
never underestimate the power


45
00:02:29,316 --> 00:02:30,776
of the advanced feline threat.


46
00:02:31,516 --> 00:02:37,086
[ Laughter ]


47
00:02:37,586 --> 00:02:37,836
Thank you.


48
00:02:40,436 --> 00:02:41,746
So when you think about all


49
00:02:41,746 --> 00:02:43,276
of these attackers,
what do they want?


50
00:02:44,256 --> 00:02:47,566
We find that the motives tend
to group in one of three groups.


51
00:02:47,986 --> 00:02:51,396
There is personal stalking and
surveillance, which is trying


52
00:02:51,396 --> 00:02:53,666
to access your photos
and your messages,


53
00:02:53,666 --> 00:02:56,556
gin access to your camera
and your microphone,


54
00:02:57,446 --> 00:02:58,886
then there is corporate
espionage,


55
00:02:59,436 --> 00:03:02,606
which is gaining access to your
business emails and documents


56
00:03:03,006 --> 00:03:07,266
and your intellectual
property, and then finally,


57
00:03:07,266 --> 00:03:10,926
there is direct financial
benefit, stealing money directly


58
00:03:10,926 --> 00:03:13,616
from your online banking
session or injecting ads


59
00:03:13,616 --> 00:03:15,726
and committing click fraud
while you browse the web.


60
00:03:15,726 --> 00:03:21,626
And to do these things,
attackers have created adware,


61
00:03:21,626 --> 00:03:25,086
spyware, ransom ware,
remote access Trojans,


62
00:03:25,616 --> 00:03:26,986
and a variety of other malware.


63
00:03:27,346 --> 00:03:30,536
How do we know this?


64
00:03:30,576 --> 00:03:31,946
Because we've seen it
on other platforms.


65
00:03:32,516 --> 00:03:41,226
[ Applause ]


66
00:03:41,726 --> 00:03:42,916
But not on iOS.


67
00:03:44,006 --> 00:03:47,196
Nearly a decade after
it came into the world,


68
00:03:47,196 --> 00:03:49,906
there hasn't been a
single piece of iOS malware


69
00:03:49,906 --> 00:03:51,776
that has affected
our users at scale.


70
00:03:53,876 --> 00:03:58,446
This is because nearly
10 years ago,


71
00:03:58,446 --> 00:04:02,136
Apple realized what role mobile
devices would come to play


72
00:04:02,396 --> 00:04:03,566
in the lives of our users.


73
00:04:04,626 --> 00:04:06,926
We realized that existing
security technologies would be


74
00:04:06,926 --> 00:04:10,016
woefully inadequate, and could
not step up to the challenge,


75
00:04:11,036 --> 00:04:15,186
and so we decided to build
the best security technologies


76
00:04:15,606 --> 00:04:19,416
that we could imagine to
protect our customers,


77
00:04:19,766 --> 00:04:21,086
at a scale that is staggering.


78
00:04:21,505 --> 00:04:22,956
We are protecting users that use


79
00:04:22,956 --> 00:04:28,076
over a billion active iOS
devices all over the globe.


80
00:04:28,836 --> 00:04:30,016
And every single one


81
00:04:30,016 --> 00:04:32,536
of our security features
protects a real user


82
00:04:32,536 --> 00:04:33,336
from real threats.


83
00:04:33,756 --> 00:04:38,356
But we are not in this alone.


84
00:04:38,846 --> 00:04:41,416
There are really three key
pillars to iOS security.


85
00:04:41,416 --> 00:04:45,526
There is platform security
which are the technologies


86
00:04:45,526 --> 00:04:47,296
that we build into our
software and hardware.


87
00:04:48,086 --> 00:04:50,796
There is users who upgrade
their software to the latest


88
00:04:50,796 --> 00:04:53,356
and most secure versions,
and then there's developers


89
00:04:53,356 --> 00:04:55,766
like you, who use our
security technologies


90
00:04:55,826 --> 00:04:56,776
to build secure apps.


91
00:04:57,016 --> 00:04:59,296
We're going to talk about
all three pillars today.


92
00:05:00,416 --> 00:05:01,756
We'll start with
platform security.


93
00:05:03,486 --> 00:05:06,096
When you think about how
security used to work,


94
00:05:06,096 --> 00:05:10,746
especially in enterprise
settings, it was a long


95
00:05:10,746 --> 00:05:13,146
and complex list of
thing that users have


96
00:05:13,146 --> 00:05:14,616
to do to try and be secure.


97
00:05:15,086 --> 00:05:17,836
Loading secure configuration
into their devices,


98
00:05:18,146 --> 00:05:20,336
complex batch management
schemes,


99
00:05:20,376 --> 00:05:21,976
complex password policies.


100
00:05:22,596 --> 00:05:24,376
It was difficult,
it was heavy handed,


101
00:05:24,686 --> 00:05:26,246
and it set up users to fail.


102
00:05:26,246 --> 00:05:27,806
It was so hard to be secure.


103
00:05:28,726 --> 00:05:32,266
But because Apple owns all
the hardware and software,


104
00:05:32,266 --> 00:05:34,296
we were in a position
to address this


105
00:05:34,296 --> 00:05:35,596
in a unique and innovative way.


106
00:05:37,216 --> 00:05:38,316
When you look at iOS security,


107
00:05:38,316 --> 00:05:40,766
we've built security
directly into the silicon.


108
00:05:40,766 --> 00:05:42,826
We have made the
devices that are secure


109
00:05:42,826 --> 00:05:44,196
out of the box by default.


110
00:05:45,056 --> 00:05:47,616
We've made it really easy
for our users to update


111
00:05:47,616 --> 00:05:49,386
and run the latest and
most secure version.


112
00:05:49,386 --> 00:05:52,076
We have made it really
easy to log


113
00:05:52,076 --> 00:05:53,976
into the devices
securely with Touch ID.


114
00:05:54,966 --> 00:05:58,936
We have a curated App Store, and
we've made security easy to use.


115
00:05:59,296 --> 00:06:04,156
IOS platform security consists
of a great deal of features,


116
00:06:04,156 --> 00:06:06,286
and today I only have
time to highlight five.


117
00:06:07,096 --> 00:06:08,346
We'll start with Secure Boot.


118
00:06:09,576 --> 00:06:13,826
One of the most important
ways of being able


119
00:06:13,826 --> 00:06:16,536
to trust a device is to trust
the software that runs on it.


120
00:06:17,326 --> 00:06:23,396
And the way we do this is by
building trust into the silicon.


121
00:06:24,836 --> 00:06:31,506
The Apple design system chip
inside every iOS device holds


122
00:06:32,066 --> 00:06:33,976
Apple's public keys in an area


123
00:06:33,976 --> 00:06:36,416
of memory called Boot
ROM, which is read only.


124
00:06:36,786 --> 00:06:39,106
It's written in the factory and
cannot be changed after that.


125
00:06:40,026 --> 00:06:44,266
And when your iOS device
starts, we take that public key


126
00:06:44,926 --> 00:06:48,356
and the Boot ROM will validate
the next step in the boot chain,


127
00:06:48,586 --> 00:06:49,866
which is the low-level
boot loader.


128
00:06:50,426 --> 00:06:54,066
And only that validation passes
will we move on to the next step


129
00:06:54,066 --> 00:06:59,436
in the chain, and we'll repeat
this until iOS has fully booted,


130
00:06:59,486 --> 00:07:02,696
which gives us confidence
that every piece of software


131
00:07:02,696 --> 00:07:06,176
that was used in boot was
signed with Apple's Private Key.


132
00:07:11,556 --> 00:07:14,956
When you think about secure
boot, it's really interesting


133
00:07:14,956 --> 00:07:17,746
that we don't rely
on any third parties


134
00:07:18,546 --> 00:07:19,896
to deliver secure boot trust.


135
00:07:19,896 --> 00:07:22,356
We don't rely on
certificate authorities


136
00:07:22,356 --> 00:07:23,846
that are outside of our control.


137
00:07:24,606 --> 00:07:27,956
The keys used or secure boot are
generated management provision


138
00:07:27,956 --> 00:07:28,466
by Apple.


139
00:07:28,946 --> 00:07:30,566
The code that does
the verification


140
00:07:30,566 --> 00:07:32,476
that I just showed you
is written by Apple,


141
00:07:32,526 --> 00:07:35,396
and only Apple is in possession
of the private keys required


142
00:07:35,426 --> 00:07:36,596
to sign all the software.


143
00:07:36,816 --> 00:07:40,156
But there is another
interesting element of this,


144
00:07:40,496 --> 00:07:44,276
which is that when an iOS device
goes to update the version


145
00:07:44,276 --> 00:07:45,826
of the software, it has


146
00:07:45,826 --> 00:07:48,916
to contact our installation
authorization server,


147
00:07:48,916 --> 00:07:51,766
and ask for permission to
update to a given version.


148
00:07:52,076 --> 00:07:54,536
And it does this by taking
cryptographic measurements


149
00:07:54,696 --> 00:07:56,886
of the update, sending
them to the server,


150
00:07:57,126 --> 00:07:58,906
and asking whether
it's okay to update.


151
00:08:00,136 --> 00:08:03,096
We do this because the
server is now in a position


152
00:08:03,186 --> 00:08:07,246
to deny an iOS device the
ability to move to an older,


153
00:08:07,276 --> 00:08:10,566
less secure version of iOS.


154
00:08:10,656 --> 00:08:12,746
And so when you put these
two things together,


155
00:08:12,746 --> 00:08:16,876
you get a strong and trustworthy
mechanism for relying


156
00:08:16,876 --> 00:08:19,256
on the software that
runs every iOS device.


157
00:08:20,626 --> 00:08:23,026
It's not possible to copy
an old version of iOS


158
00:08:23,366 --> 00:08:24,376
from one device to another.


159
00:08:24,926 --> 00:08:26,676
It's not possible to
tamper with the integrity


160
00:08:26,676 --> 00:08:27,896
of the software of this process.


161
00:08:27,956 --> 00:08:34,086
Now, let's talk about
protecting user's data at rest.


162
00:08:35,535 --> 00:08:39,346
If you're really serious about
doing this, you don't want


163
00:08:39,346 --> 00:08:41,726
to take the cryptographic
keys that protect user data


164
00:08:41,726 --> 00:08:44,226
and make them available to
the application processor


165
00:08:44,226 --> 00:08:46,436
or the normal processor
in the device.


166
00:08:46,876 --> 00:08:48,816
That is because the attack
surface there is simply


167
00:08:48,846 --> 00:08:49,436
too large.


168
00:08:50,056 --> 00:08:52,336
If you're serious about
protecting user data at rest,


169
00:08:52,336 --> 00:08:55,226
you build dedicated silicon that
holds those cryptographic keys.


170
00:08:55,976 --> 00:08:56,526
We've done it.


171
00:08:57,196 --> 00:08:58,446
We call it the secure enclave.


172
00:08:59,316 --> 00:09:02,156
Now, when you think
about passcodes,


173
00:09:02,606 --> 00:09:04,586
normally they're very
short, four to six digits.


174
00:09:05,196 --> 00:09:07,496
And if somehow an
attacker were able


175
00:09:07,496 --> 00:09:11,826
to take the encrypted data off
a phone, or off an iOS device,


176
00:09:12,436 --> 00:09:14,696
and attempt every
single possible passcode,


177
00:09:15,296 --> 00:09:16,466
it wouldn't take them very long.


178
00:09:17,826 --> 00:09:21,236
So what we do instead is we
take the user's passcode,


179
00:09:21,946 --> 00:09:24,586
and we derive a key from
it that is untangled


180
00:09:24,586 --> 00:09:26,876
with the hardware key
that is only available


181
00:09:26,956 --> 00:09:28,076
to our secure enclave.


182
00:09:28,956 --> 00:09:33,106
Which means it's not possible
to guess passcodes offline.


183
00:09:33,436 --> 00:09:35,966
Passcode guesses must
happen on the device,


184
00:09:36,396 --> 00:09:39,386
and the device is free to
limit the number of attempts.


185
00:09:40,026 --> 00:09:44,216
In fact, this is exactly
how your iOS devices work.


186
00:09:46,886 --> 00:09:49,166
After a few incorrect
passcode attempts,


187
00:09:49,466 --> 00:09:51,036
we start imposing a time delay.


188
00:09:52,466 --> 00:09:54,506
But after 10 incorrect
passcode attempts,


189
00:09:54,506 --> 00:09:57,826
the secure enclave will simply
not unlock that device again.


190
00:10:00,026 --> 00:10:02,076
This has nothing to do with
the erase data feature,


191
00:10:02,896 --> 00:10:06,106
where if it's on, the data
will actually be erased


192
00:10:06,106 --> 00:10:07,726
after 10 incorrect
passcode attempts.


193
00:10:08,136 --> 00:10:09,626
Even if you have
this feature off,


194
00:10:11,576 --> 00:10:13,906
once 10 incorrect
passcode attempts are made,


195
00:10:14,296 --> 00:10:16,266
the secure enclave
will not unlock


196
00:10:16,266 --> 00:10:17,976
that device again regardless
of how much time you give it.


197
00:10:20,636 --> 00:10:24,836
So we built the system using
industry standard algorithms.


198
00:10:25,826 --> 00:10:28,426
We've subjected it to rigorous
internal security audits,


199
00:10:29,156 --> 00:10:30,416
and third-party code review,


200
00:10:30,996 --> 00:10:32,736
and then we've taken
it a step further.


201
00:10:32,736 --> 00:10:35,096
We have taken our core
cryptographic libraries


202
00:10:35,096 --> 00:10:38,626
that underpin data protection,
and we've posted them on the web


203
00:10:39,146 --> 00:10:41,126
for everyone to download
and inspect.


204
00:10:42,046 --> 00:10:43,176
Let's talk about sandboxing.


205
00:10:44,326 --> 00:10:48,576
Sandboxing is a method for
isolating data between apps.


206
00:10:49,646 --> 00:10:52,856
This is because even with
the best of intentions,


207
00:10:52,856 --> 00:10:54,546
developers sometimes
make mistakes,


208
00:10:55,226 --> 00:10:58,066
and sandboxing is a
way of mitigating some


209
00:10:58,066 --> 00:11:00,266
of the potential harm
from those mistakes.


210
00:11:00,306 --> 00:11:03,736
It's a little bit like air
bags or seatbelts in a car


211
00:11:04,016 --> 00:11:06,496
which mitigate the risk
of injury in an accident.


212
00:11:08,436 --> 00:11:11,926
We also use sandboxing to
put some of the choices


213
00:11:11,926 --> 00:11:14,036
around security directly
in the hands of our users.


214
00:11:14,596 --> 00:11:18,006
We have a mechanism called
TCC, or transparency consent


215
00:11:18,006 --> 00:11:22,026
and control, where we can ask a
user whether they trust a given


216
00:11:22,026 --> 00:11:23,746
app with some of
their sensitive data,


217
00:11:23,746 --> 00:11:25,986
like location, photos
and contacts.


218
00:11:26,456 --> 00:11:29,196
And once a user makes a
decision in a dialogue by this,


219
00:11:29,646 --> 00:11:35,616
the sandbox mechanism and the
kernel enforces that decision.


220
00:11:36,046 --> 00:11:37,166
Another critical element


221
00:11:37,656 --> 00:11:39,756
of our platform security
is code signing.


222
00:11:40,396 --> 00:11:44,696
When an attacker is
trying to attack a device,


223
00:11:44,696 --> 00:11:46,636
the very first step
is attempting


224
00:11:46,636 --> 00:11:48,126
to get their malicious
code to run.


225
00:11:50,386 --> 00:11:53,946
Because of this, iOS code
signing doesn't just cover the


226
00:11:53,946 --> 00:11:54,806
operating system.


227
00:11:55,226 --> 00:11:57,386
It covers every app
that runs on the device.


228
00:11:58,286 --> 00:12:01,536
In fact, when you go to upload
your app into the App Store,


229
00:12:02,066 --> 00:12:04,336
X code will calculate
the cryptographic hash


230
00:12:04,726 --> 00:12:08,166
of every executable and
resource in your app bundle,


231
00:12:08,166 --> 00:12:11,276
and will write them into a code
directory alongside the app,


232
00:12:11,816 --> 00:12:13,076
which is then sent
to the App Store.


233
00:12:13,926 --> 00:12:16,866
When the user then
downloads an app and runs it,


234
00:12:16,866 --> 00:12:21,336
our kernel will look at every
executable page of memory


235
00:12:21,666 --> 00:12:23,816
and compare it against the
code directory to make sure


236
00:12:23,816 --> 00:12:24,976
that it hasn't been
tampered with.


237
00:12:26,706 --> 00:12:30,716
As a result, an attacker can't
simply take some malicious code,


238
00:12:31,016 --> 00:12:33,826
inject it into memory and then
divert the control flow to it.


239
00:12:34,256 --> 00:12:36,676
Instead, they have to
resort to much more complex


240
00:12:37,136 --> 00:12:39,846
and difficult schemes to get
their malicious code to run.


241
00:12:45,656 --> 00:12:48,586
Let's talk a bit about Touch ID.


242
00:12:48,996 --> 00:12:50,586
We know that for
our iPhone users


243
00:12:50,586 --> 00:12:53,506
on average they unlock
their phone 80 times a day.


244
00:12:53,506 --> 00:12:59,496
And if you have a passcode
set, it adds friction


245
00:12:59,496 --> 00:13:01,516
to each one of those 80 unlocks.


246
00:13:03,816 --> 00:13:06,766
As a result, almost half


247
00:13:06,766 --> 00:13:09,766
of our users didn't
have a passcode set,


248
00:13:10,536 --> 00:13:14,616
and we knew that because the
passcode is quite literally part


249
00:13:14,616 --> 00:13:17,366
of the key used to protect
the user's data at rest,


250
00:13:17,696 --> 00:13:19,176
this is a problem
we had to solve.


251
00:13:19,886 --> 00:13:26,656
We needed a solution that
was easy, that was fast,


252
00:13:26,656 --> 00:13:28,206
and that provided
great protection


253
00:13:28,656 --> 00:13:29,736
to the data of our users.


254
00:13:29,736 --> 00:13:33,976
For us, that solution
was Touch ID.


255
00:13:35,646 --> 00:13:37,646
But we didn't just take
a fingerprint sensor


256
00:13:37,646 --> 00:13:39,626
and put it in a phone.


257
00:13:41,726 --> 00:13:43,096
You can change your passwords,


258
00:13:43,306 --> 00:13:45,516
but you can't change your
biometric properties.


259
00:13:45,706 --> 00:13:47,086
You can't change
your fingerprint.


260
00:13:47,706 --> 00:13:49,496
And so we knew that we had


261
00:13:49,496 --> 00:13:51,746
to afford the biometric
data the highest level


262
00:13:51,746 --> 00:13:53,306
of protection we could build.


263
00:13:54,446 --> 00:13:58,396
So what we did was we connected
the fingerprint sensor directly


264
00:13:58,396 --> 00:14:00,716
to the secure enclave,
with an encrypted link.


265
00:14:01,666 --> 00:14:04,966
And we made it so that when you
touch your finger to the sensor,


266
00:14:06,166 --> 00:14:09,396
that fingerprint is transmitted
directly to the secure enclave,


267
00:14:09,976 --> 00:14:12,216
where it is processed,
and then encrypted.


268
00:14:12,806 --> 00:14:16,736
And it's never made available
to the application processor


269
00:14:16,736 --> 00:14:21,456
that runs normal
applications on the phone.


270
00:14:21,696 --> 00:14:24,216
Now, I mentioned
that before Touch ID,


271
00:14:24,216 --> 00:14:29,296
about half of our users
had a passcode set.


272
00:14:29,526 --> 00:14:31,456
Now, 9 out of 10 do.


273
00:14:32,796 --> 00:14:35,836
This is a shining example
of what Apple is amazing at.


274
00:14:36,256 --> 00:14:38,546
It takes our hardware
engineering expertise,


275
00:14:39,106 --> 00:14:41,786
our software engineering
expertise, our dedication


276
00:14:41,786 --> 00:14:45,096
to ease of use, and
combines them in a way


277
00:14:45,096 --> 00:14:48,446
where a normal user doesn't
care about fingerprint sensors,


278
00:14:49,136 --> 00:14:51,436
doesn't care about secure
enclaves or hash functions.


279
00:14:52,846 --> 00:14:55,196
What they get is simply
an amazing step forward


280
00:14:55,196 --> 00:15:01,066
for the security of their data.


281
00:15:01,386 --> 00:15:02,526
The second key pillar


282
00:15:02,526 --> 00:15:07,596
of iOS security is users
upgrading their software.


283
00:15:09,556 --> 00:15:13,626
The latest versions of iOS
are always the most secure,


284
00:15:14,326 --> 00:15:17,546
and we're constantly
making iOS more secure based


285
00:15:17,546 --> 00:15:19,866
on the threats we see today and
threats we see in the future.


286
00:15:20,766 --> 00:15:23,306
And we've built all
this deep technology


287
00:15:23,306 --> 00:15:27,086
for trusting the software
that runs on our hardware,


288
00:15:27,866 --> 00:15:32,546
but it doesn't matter how
secure a version of iOS is,


289
00:15:32,596 --> 00:15:34,906
if people are not
installing the latest one,


290
00:15:34,906 --> 00:15:35,936
the one that is most secure.


291
00:15:37,036 --> 00:15:39,726
So when we think about
software updates, it is not just


292
00:15:39,726 --> 00:15:41,506
about the device and
the software it runs,


293
00:15:41,506 --> 00:15:44,466
it is also about our
relationship with carriers,


294
00:15:44,466 --> 00:15:46,466
and our ability to get
updates out there quickly,


295
00:15:47,186 --> 00:15:48,776
and also the user experience


296
00:15:49,086 --> 00:15:52,366
for how a user sees an
update on their device.


297
00:15:52,906 --> 00:15:58,836
One thing we've done with iOS 9
is we greatly shrank the amount


298
00:15:58,836 --> 00:16:02,056
of space it took to install
updates, so that users


299
00:16:02,056 --> 00:16:05,006
who had relatively little free
space could still get the latest


300
00:16:05,006 --> 00:16:07,436
and more secure version
of the software.


301
00:16:09,316 --> 00:16:11,466
We then took a look
at the user experience


302
00:16:12,456 --> 00:16:15,326
and said sometimes users
don't want to be interrupted


303
00:16:15,766 --> 00:16:17,846
to do an update, so
we'll give them a choice


304
00:16:17,846 --> 00:16:19,436
to install an update
right then and there,


305
00:16:20,046 --> 00:16:21,406
or to install it
later that night


306
00:16:21,446 --> 00:16:23,286
when they're probably
not using their phone


307
00:16:23,476 --> 00:16:26,236
or be reminded the next day.


308
00:16:26,476 --> 00:16:29,146
The results are amazing.


309
00:16:30,236 --> 00:16:34,636
Nearly 85% of our customers
are running the latest version


310
00:16:34,636 --> 00:16:36,666
of iOS, the most
secure version we have,


311
00:16:37,286 --> 00:16:42,416
and if you think this is easy
or obvious, you only need look


312
00:16:42,416 --> 00:16:43,646
at some of the other
platforms [audience murmurs].


313
00:16:45,426 --> 00:16:50,866
This, by the way, is a fair
comparison, because Android 6


314
00:16:50,866 --> 00:16:53,346
and iOS 9 were released
within just a couple of weeks


315
00:16:53,346 --> 00:16:58,526
of each other, and for some
perspective, every version


316
00:16:58,526 --> 00:17:01,906
of Android before 5.1.1 has
a vulnerability called stage


317
00:17:01,906 --> 00:17:04,326
fright, which is
remotely exploitable.


318
00:17:04,326 --> 00:17:07,036
You can exploit it by sending
a specially crafted message


319
00:17:07,496 --> 00:17:10,046
to a vulnerable device,
and gain complete control


320
00:17:10,046 --> 00:17:10,836
over that device.


321
00:17:11,445 --> 00:17:13,746
And Google patched
this bug very quickly.


322
00:17:15,066 --> 00:17:16,836
But it doesn't matter,
because most


323
00:17:16,836 --> 00:17:19,156
of their users don't
have the fix.


324
00:17:20,066 --> 00:17:22,955
And a fix that is not installed
doesn't do anyone any good,


325
00:17:23,165 --> 00:17:26,236
which is why we invest
so much effort not just


326
00:17:26,306 --> 00:17:30,096
in building secure versions of
iOS, but also making it easy


327
00:17:30,096 --> 00:17:33,096
for our users to have that
last and most secure version.


328
00:17:33,716 --> 00:17:40,586
The third pillar in iOS
security is developers like you,


329
00:17:41,066 --> 00:17:43,076
using the security
technologies we provide,


330
00:17:43,186 --> 00:17:45,036
to build secure apps.


331
00:17:46,036 --> 00:17:50,686
This means following best
practices on the platform.


332
00:17:50,686 --> 00:17:54,456
We have an amazing number of
apps that use Touch ID API


333
00:17:55,556 --> 00:17:59,436
to save their users from having
to remember complex passwords


334
00:17:59,436 --> 00:18:02,826
and type them directly into
the app, and last year,


335
00:18:02,826 --> 00:18:05,186
we introduced a feature
called App Transport Security


336
00:18:06,026 --> 00:18:10,546
that provides strong protection
to app information as it travels


337
00:18:10,546 --> 00:18:12,986
across the network to
that app's servers.


338
00:18:15,776 --> 00:18:19,016
Today I'm proud to say
that at the end of 2016,


339
00:18:19,016 --> 00:18:21,666
App Transport Security
is becoming a requirement


340
00:18:21,666 --> 00:18:22,656
for App Store apps.


341
00:18:24,146 --> 00:18:28,326
This means that by the end of
2016, when your apps communicate


342
00:18:28,326 --> 00:18:30,746
with your own server
back-ends, they must do


343
00:18:30,746 --> 00:18:35,756
so using a secure TLS
channel, using TLS 1.2,


344
00:18:35,996 --> 00:18:39,446
unless the data being
communicated is bulk data


345
00:18:39,446 --> 00:18:42,266
such as media streaming and
data that is already encrypted.


346
00:18:43,206 --> 00:18:46,266
This is going to provide a
great deal of real security


347
00:18:46,266 --> 00:18:49,396
for our users, and
the communications


348
00:18:49,396 --> 00:18:50,966
that your apps have
over the network.


349
00:18:52,856 --> 00:18:57,116
There is another piece of
responsibility that rests


350
00:18:57,116 --> 00:18:59,236
on you, the developers,
when you build your apps,


351
00:18:59,236 --> 00:19:01,716
and this is to know your code,
and not just the code you write,


352
00:19:02,166 --> 00:19:04,516
but also any third-party
code you actually include


353
00:19:04,516 --> 00:19:05,816
in your apps.


354
00:19:06,496 --> 00:19:10,586
This is the because libraries
you use may undermine the


355
00:19:10,586 --> 00:19:11,466
security of your app.


356
00:19:12,256 --> 00:19:14,266
Maybe because they're doing
things you're not aware


357
00:19:14,266 --> 00:19:15,146
of behind your back.


358
00:19:16,156 --> 00:19:20,546
But maybe because
there is a more recent


359
00:19:20,546 --> 00:19:22,036
and more secure version
out there.


360
00:19:22,886 --> 00:19:25,606
There is kind of an
amazing example here


361
00:19:25,606 --> 00:19:29,206
where there is a very popular
third-party networking library


362
00:19:29,886 --> 00:19:33,046
that had a critical
flaw in the validation


363
00:19:33,116 --> 00:19:36,616
of security for TLS connections.


364
00:19:37,136 --> 00:19:40,886
And this flaw was patched
very quickly, but for a period


365
00:19:40,886 --> 00:19:44,166
of time, there were up to
25,000 apps in the App Store


366
00:19:44,166 --> 00:19:46,666
that didn't have that
latest, more secure version.


367
00:19:48,146 --> 00:19:51,126
So it's really important that
you get your third-party code


368
00:19:51,126 --> 00:19:54,266
from trustworthy locations,
that you know what it does,


369
00:19:54,606 --> 00:19:55,706
and that you keep it current.


370
00:19:56,366 --> 00:19:59,976
So these are our three key
pillars of iOS security.


371
00:20:00,686 --> 00:20:03,986
Platform security, which are
the best security technology


372
00:20:03,986 --> 00:20:06,506
mechanisms that we can build
into our hardware and software.


373
00:20:07,186 --> 00:20:10,766
Our users who download the
latest and most secure versions


374
00:20:10,766 --> 00:20:12,126
of iOS and developers like you,


375
00:20:12,126 --> 00:20:15,236
using our security technologies
to build secure apps.


376
00:20:15,836 --> 00:20:20,656
And it's a fair question to
ask, so how are we doing?


377
00:20:21,946 --> 00:20:23,356
How good is iOS security?


378
00:20:24,736 --> 00:20:27,686
Security is interesting,
because unlike performance,


379
00:20:28,116 --> 00:20:29,236
you can't measure it directly.


380
00:20:29,236 --> 00:20:31,246
You can't run a test, and
time how long it takes


381
00:20:31,246 --> 00:20:32,656
to get an objective answer.


382
00:20:33,936 --> 00:20:38,276
So what you're left with
are indirect metrics.


383
00:20:39,396 --> 00:20:42,676
And I have three that
I'll share with you today.


384
00:20:44,856 --> 00:20:50,096
The first one is that after
a decade of its existence,


385
00:20:50,326 --> 00:20:52,816
there has still not
been a single piece


386
00:20:52,816 --> 00:20:54,996
of iOS malware affecting
our users at scale.


387
00:20:56,266 --> 00:20:58,536
This one is the one that
is most important to us.


388
00:20:59,216 --> 00:21:01,876
Our users have been
fantastically well protected


389
00:21:01,876 --> 00:21:03,016
for nearly 10 years.


390
00:21:06,536 --> 00:21:09,456
The next indirect metric that is
interesting is to look at some


391
00:21:09,456 --> 00:21:11,916
of the unfettered jailbreaks
that are coming out.


392
00:21:12,916 --> 00:21:15,666
These are jailbreaks that
defeat iOS security mechanisms,


393
00:21:16,836 --> 00:21:19,956
and what is interesting
about them is


394
00:21:19,956 --> 00:21:23,086
that the latest launch we've
looked at frequently have


395
00:21:23,116 --> 00:21:25,426
to find and chain
together between five


396
00:21:25,426 --> 00:21:28,386
and ten distinct vulnerabilities
in order to be able


397
00:21:28,386 --> 00:21:30,686
to defeat platform
security mechanisms.


398
00:21:31,906 --> 00:21:33,986
This is much higher than
on any other platform.


399
00:21:34,816 --> 00:21:38,716
And the reason is because iOS
security measures work together


400
00:21:38,716 --> 00:21:41,956
in lock step in such a
way that defeating all


401
00:21:41,956 --> 00:21:48,036
of them takes a long
time and a lot of work.


402
00:21:48,226 --> 00:21:50,216
For my last indirect metric,


403
00:21:50,776 --> 00:21:52,196
I want you to take it
with a grain of salt.


404
00:21:54,016 --> 00:21:57,056
As probably most of you
know, there is a black market


405
00:21:57,556 --> 00:21:58,956
for software vulnerabilities.


406
00:22:00,256 --> 00:22:02,796
And every once in a
while, some of the prices


407
00:22:03,196 --> 00:22:05,316
on the black market
become known.


408
00:22:06,866 --> 00:22:10,336
Usually these prices are
tens of thousands of dollars,


409
00:22:10,336 --> 00:22:11,586
sometimes a hundred thousand.


410
00:22:11,586 --> 00:22:15,876
But in 2013, the New
York Times learned


411
00:22:15,876 --> 00:22:21,186
that an iOS vulnerability sold
for $500,000 and last year,


412
00:22:22,086 --> 00:22:25,226
Forbes interviewed a
jailbreak developer who said


413
00:22:25,226 --> 00:22:28,366
that most experts agree
that the black market price


414
00:22:28,986 --> 00:22:33,036
of an unfettered iOS
jailbreak is a million dollars.


415
00:22:37,516 --> 00:22:38,906
Take that with a grain of salt,


416
00:22:38,906 --> 00:22:41,286
but it's a fascinating
number to think about.


417
00:22:43,016 --> 00:22:49,946
So where does this leave us?


418
00:22:50,656 --> 00:22:53,586
Clearly, security is a
process and not a destination.


419
00:22:54,326 --> 00:22:57,066
We're not done with iOS
security and we never will be.


420
00:22:58,986 --> 00:23:01,716
It's also not something that we
just got interested in recently.


421
00:23:01,716 --> 00:23:04,906
What you're seeing now
is a result of a decade


422
00:23:04,906 --> 00:23:07,116
of our best work in
protecting our users.


423
00:23:08,436 --> 00:23:11,076
But the bad guys
aren't standing still


424
00:23:11,766 --> 00:23:14,016
and we will constantly
evolve our security


425
00:23:14,706 --> 00:23:16,786
to defeat not only
the threats of today,


426
00:23:16,786 --> 00:23:18,086
but also the threats
of tomorrow.


427
00:23:19,526 --> 00:23:21,786
We will take our
hardware expertise


428
00:23:21,786 --> 00:23:23,026
and our software expertise,


429
00:23:23,156 --> 00:23:25,426
and we will build the
best security technologies


430
00:23:25,426 --> 00:23:29,136
that we can imagine to
protect our customers


431
00:23:29,136 --> 00:23:31,116
and how they use their
mobile devices today


432
00:23:31,246 --> 00:23:32,856
and also how they'll
use them tomorrow,


433
00:23:34,176 --> 00:23:36,826
and protect our customers
against today's attackers


434
00:23:37,956 --> 00:23:42,016
and tomorrow's, even if
they are cats [laughter].


435
00:23:44,416 --> 00:23:45,426
Thank you very much.


436
00:23:46,516 --> 00:23:54,556
[ Applause ]


437
00:23:55,056 --> 00:23:56,836
>> For those of you who want
to learn more, I invite you


438
00:23:56,836 --> 00:24:00,716
to read the iOS security guide,
which creates a great amount


439
00:24:00,716 --> 00:24:03,216
of technical detail about
all the great features I just


440
00:24:03,216 --> 00:24:05,836
covered, including many others
that I didn't have time for,


441
00:24:05,836 --> 00:24:08,516
like iCloud keychain and
two-factor authentication,


442
00:24:08,886 --> 00:24:11,706
and a link will be available
at this session site.


443
00:24:12,516 --> 00:24:12,996
Thank you again.


444
00:24:14,508 --> 00:24:16,508
[ Applause ]

