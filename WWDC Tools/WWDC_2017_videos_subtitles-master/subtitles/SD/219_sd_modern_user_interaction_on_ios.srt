1
00:00:07,516 --> 00:00:16,500
[ Cheering ]


2
00:00:23,516 --> 00:00:27,136
[ Applause ]


3
00:00:27,636 --> 00:00:28,966
>> Good afternoon, everyone, and


4
00:00:28,966 --> 00:00:30,486
welcome to modern user


5
00:00:30,486 --> 00:00:31,826
interaction on iOS.


6
00:00:32,276 --> 00:00:33,536
My name is Dominik Wagner.


7
00:00:33,536 --> 00:00:35,156
I'm an engineer on the UIkit


8
00:00:35,156 --> 00:00:37,646
frameworks team and I am going


9
00:00:37,646 --> 00:00:39,616
to talk today about mastering


10
00:00:39,616 --> 00:00:41,136
the UIkit's gesture recognizer


11
00:00:41,226 --> 00:00:41,696
system.


12
00:00:41,696 --> 00:00:42,796
I will be joined by my


13
00:00:42,796 --> 00:00:44,316
colleagues, Glen and Michael


14
00:00:44,316 --> 00:00:44,916
later on.


15
00:00:45,286 --> 00:00:46,806
So what are we going to talk


16
00:00:46,806 --> 00:00:47,126
about?


17
00:00:47,126 --> 00:00:48,406
We are going to talk about


18
00:00:48,596 --> 00:00:49,366
multi-touch.


19
00:00:49,366 --> 00:00:51,116
Really just touch interface at


20
00:00:51,116 --> 00:00:51,586
this time.


21
00:00:51,586 --> 00:00:52,616
We have great other ways of


22
00:00:52,616 --> 00:00:54,366
interacting with the system but


23
00:00:54,516 --> 00:00:56,136
multi-touch is the subject of


24
00:00:56,166 --> 00:00:56,806
this talk.


25
00:00:57,336 --> 00:00:59,056
I will talk you through the UI


26
00:00:59,056 --> 00:01:01,246
gesture recognizer system in


27
00:01:01,246 --> 00:01:02,966
depth, showing you how to


28
00:01:02,966 --> 00:01:04,806
interact with it and to


29
00:01:04,806 --> 00:01:06,286
customize it to your liking.


30
00:01:07,206 --> 00:01:08,626
Glen will come up and talk to


31
00:01:08,626 --> 00:01:10,346
you about the new APIs for


32
00:01:10,346 --> 00:01:11,916
system gesture interaction in


33
00:01:11,986 --> 00:01:12,796
iOS 11.


34
00:01:13,266 --> 00:01:14,816
And finally Mike will come up


35
00:01:15,256 --> 00:01:17,016
and tell you how to play nice


36
00:01:17,016 --> 00:01:18,526
with the new interactions for


37
00:01:18,526 --> 00:01:19,296
drag and drop.


38
00:01:19,996 --> 00:01:22,856
So this talk works best if you


39
00:01:22,856 --> 00:01:26,076
already know about how touch is


40
00:01:26,076 --> 00:01:27,256
handled in UIkit.


41
00:01:27,696 --> 00:01:29,366
However, if you're new to the


42
00:01:29,446 --> 00:01:31,376
system, let's walk over the two


43
00:01:31,376 --> 00:01:33,056
building blocks for this.


44
00:01:33,466 --> 00:01:34,756
We have the UI touch.


45
00:01:35,136 --> 00:01:37,276
The UI touch is a representation


46
00:01:37,596 --> 00:01:39,896
of a finger touching the screen.


47
00:01:40,176 --> 00:01:43,176
So UI moves from begin, why I


48
00:01:43,176 --> 00:01:45,256
move to cancel, or end it, and


49
00:01:45,256 --> 00:01:47,016
represents one interaction with


50
00:01:47,076 --> 00:01:47,626
the screen.


51
00:01:48,046 --> 00:01:49,356
And on top of that we have


52
00:01:49,446 --> 00:01:50,966
UIGestureRecognizer, a more


53
00:01:50,966 --> 00:01:52,116
powerful abstraction.


54
00:01:52,726 --> 00:01:54,266
UIGestureRecognizer can be


55
00:01:54,266 --> 00:01:56,086
configured with a target and


56
00:01:56,086 --> 00:01:57,826
action and put on a UI view.


57
00:01:59,006 --> 00:02:00,326
And we have gesture recognizer


58
00:02:00,326 --> 00:02:01,996
for all sorts of common


59
00:02:01,996 --> 00:02:04,246
interactions, tap, pan, and


60
00:02:04,246 --> 00:02:04,706
pinch.


61
00:02:05,616 --> 00:02:06,846
And we have the gesture


62
00:02:06,846 --> 00:02:08,286
recognizer system actually


63
00:02:08,286 --> 00:02:09,806
coordinating between those.


64
00:02:10,126 --> 00:02:11,596
And that's what I will be


65
00:02:11,646 --> 00:02:12,506
focusing about.


66
00:02:13,226 --> 00:02:14,776
And I will do this using a


67
00:02:14,866 --> 00:02:15,856
simple example.


68
00:02:16,606 --> 00:02:18,366
Like the AssistiveTouch widget.


69
00:02:18,776 --> 00:02:20,506
You have a widget that it


70
00:02:20,506 --> 00:02:23,406
recognizes a tap and you can pan


71
00:02:23,406 --> 00:02:23,976
it around.


72
00:02:24,656 --> 00:02:26,396
And maybe you even do regular


73
00:02:26,396 --> 00:02:27,696
responder based touch handling


74
00:02:27,696 --> 00:02:29,586
on it to pass through some


75
00:02:29,586 --> 00:02:30,196
touches.


76
00:02:30,566 --> 00:02:32,206
So this example is very simple


77
00:02:32,206 --> 00:02:33,176
and purposefully so.


78
00:02:33,176 --> 00:02:34,996
I don't want you to think about


79
00:02:34,996 --> 00:02:36,986
this example in particular.


80
00:02:36,986 --> 00:02:38,376
I want you to think about your


81
00:02:38,376 --> 00:02:39,156
gesture setups.


82
00:02:39,596 --> 00:02:41,446
So where the secrets of


83
00:02:41,446 --> 00:02:43,326
[inaudible] I'm explaining is


84
00:02:43,326 --> 00:02:44,806
fitting in your setups and how


85
00:02:44,806 --> 00:02:46,166
you can improve yours.


86
00:02:46,536 --> 00:02:47,916
So let's go through this


87
00:02:47,916 --> 00:02:48,296
example.


88
00:02:48,296 --> 00:02:50,196
We have a view and we have the


89
00:02:50,426 --> 00:02:51,826
responder based touch handling


90
00:02:51,826 --> 00:02:53,026
implemented on the view.


91
00:02:53,386 --> 00:02:55,706
And also we begin with one tap


92
00:02:55,706 --> 00:02:56,656
gesture recognizer.


93
00:02:57,686 --> 00:03:00,826
So when a touch goes down on


94
00:03:00,826 --> 00:03:02,746
this view, it begins in its


95
00:03:02,746 --> 00:03:03,616
state began.


96
00:03:04,016 --> 00:03:05,686
And the first thing that happens


97
00:03:05,686 --> 00:03:07,536
is the gesture recognizer system


98
00:03:07,796 --> 00:03:09,366
is delivering it to all gesture


99
00:03:09,366 --> 00:03:10,926
recognizers interested in that


100
00:03:10,986 --> 00:03:11,366
touch.


101
00:03:11,756 --> 00:03:13,106
That means the tap gesture


102
00:03:13,106 --> 00:03:14,466
recognizer in our case.


103
00:03:14,966 --> 00:03:16,206
And the tap gesture recognizer


104
00:03:16,306 --> 00:03:18,536
takes the touch and keeps its


105
00:03:18,536 --> 00:03:19,986
state in its initial state that


106
00:03:20,016 --> 00:03:20,746
it's possible.


107
00:03:21,406 --> 00:03:23,576
And by receiving the touch, it


108
00:03:23,576 --> 00:03:25,086
will be marked as being


109
00:03:25,306 --> 00:03:26,886
including in this interaction.


110
00:03:27,586 --> 00:03:29,056
And after the gesture recognizer


111
00:03:29,376 --> 00:03:31,656
have their go we move on and


112
00:03:31,656 --> 00:03:33,126
deliver that touch into this


113
00:03:33,126 --> 00:03:34,376
state, to the touch handling


114
00:03:34,376 --> 00:03:34,636
methods.


115
00:03:35,586 --> 00:03:37,836
And when we lift up again, then


116
00:03:38,046 --> 00:03:39,616
the touch moves its state to end


117
00:03:39,616 --> 00:03:40,856
it and will be delivered again


118
00:03:40,856 --> 00:03:42,356
first to the gesture recognizer


119
00:03:42,446 --> 00:03:42,866
system.


120
00:03:43,066 --> 00:03:45,736
And the tap gesture recognizer


121
00:03:45,736 --> 00:03:47,136
in this case will recognize by


122
00:03:47,206 --> 00:03:48,766
setting its state to end.


123
00:03:48,766 --> 00:03:49,866
This is how your gesture


124
00:03:49,866 --> 00:03:52,546
recognizers signal that they


125
00:03:52,546 --> 00:03:53,106
recognize.


126
00:03:53,196 --> 00:03:54,186
They move their state.


127
00:03:54,556 --> 00:03:55,596
And the gesture recognizer


128
00:03:55,656 --> 00:03:58,756
system, in turn, will now take


129
00:03:58,756 --> 00:04:00,636
this marked state and send out


130
00:04:00,736 --> 00:04:02,196
the action for this tap gesture


131
00:04:02,196 --> 00:04:02,776
recognizer.


132
00:04:05,066 --> 00:04:07,346
And after that, we continue


133
00:04:07,346 --> 00:04:10,066
onward with sending the UITouch


134
00:04:10,336 --> 00:04:11,706
to the touch handling methods.


135
00:04:11,886 --> 00:04:12,966
The responder based one.


136
00:04:13,406 --> 00:04:14,906
And as you notice we send it


137
00:04:14,906 --> 00:04:16,526
onwards as cancelled and not as


138
00:04:16,526 --> 00:04:16,956
ended.


139
00:04:17,516 --> 00:04:18,766
So why do we do that?


140
00:04:19,466 --> 00:04:20,755
That is because gesture


141
00:04:20,755 --> 00:04:23,136
recognizers hate the regular


142
00:04:23,286 --> 00:04:25,336
touch handling methods, and you


143
00:04:25,336 --> 00:04:26,766
have wasted influence set.


144
00:04:26,766 --> 00:04:28,056
So there are three properties on


145
00:04:28,056 --> 00:04:29,306
your gesture recognizer that you


146
00:04:29,306 --> 00:04:31,996
can set and the first two are


147
00:04:31,996 --> 00:04:33,226
delaysTouchesEnded and


148
00:04:33,226 --> 00:04:34,556
cancelsTouchesInView.


149
00:04:35,076 --> 00:04:36,796
Both of them are set to true as


150
00:04:36,796 --> 00:04:38,286
default and lead to the behavior


151
00:04:38,286 --> 00:04:39,176
we just saw.


152
00:04:39,176 --> 00:04:40,866
That you deliver the touch as


153
00:04:40,966 --> 00:04:42,636
cancelled if a gesture


154
00:04:42,636 --> 00:04:43,856
recognizer recognizes.


155
00:04:44,446 --> 00:04:45,676
And you have a third one that is


156
00:04:45,736 --> 00:04:47,016
delaysTouchesBegan.


157
00:04:47,016 --> 00:04:48,526
And if you turn that to a yes


158
00:04:48,596 --> 00:04:50,186
then the regular responder based


159
00:04:50,186 --> 00:04:52,086
handling will not even see the


160
00:04:52,116 --> 00:04:53,066
touch if your gesture


161
00:04:53,066 --> 00:04:53,816
recognizes.


162
00:04:54,326 --> 00:04:56,556
So the takeaway here is that the


163
00:04:56,556 --> 00:04:58,116
gesture recognizer system comes


164
00:04:58,116 --> 00:04:59,456
first in touch delivery.


165
00:05:00,036 --> 00:05:01,976
That means that it's one of the


166
00:05:01,976 --> 00:05:03,496
many reasons why you should move


167
00:05:03,496 --> 00:05:05,496
on to actually implement gesture


168
00:05:05,496 --> 00:05:06,986
recognizers or use our system


169
00:05:06,986 --> 00:05:08,176
gesture recognizer whereas


170
00:05:08,216 --> 00:05:09,496
implementing the touch handling


171
00:05:09,496 --> 00:05:09,886
methods.


172
00:05:10,216 --> 00:05:11,586
And only if you need to, you


173
00:05:11,586 --> 00:05:12,436
should implement them.


174
00:05:12,916 --> 00:05:14,946
So let's expand on our example


175
00:05:15,536 --> 00:05:17,876
and add another recognizer to


176
00:05:17,876 --> 00:05:18,856
make it a little bit more


177
00:05:18,856 --> 00:05:19,326
interesting.


178
00:05:19,596 --> 00:05:21,396
So let's add the pan gesture


179
00:05:21,396 --> 00:05:22,956
recognizer to this.


180
00:05:23,116 --> 00:05:24,656
And again, we follow a touch


181
00:05:24,656 --> 00:05:26,446
sequence of a touch going down.


182
00:05:27,276 --> 00:05:29,196
And it's -- it will be delivered


183
00:05:29,196 --> 00:05:30,476
as began to all the gesture


184
00:05:30,476 --> 00:05:32,056
recognizers interested in this.


185
00:05:32,466 --> 00:05:34,216
And the gesture recognizers will


186
00:05:34,216 --> 00:05:36,596
start out possible and be marked


187
00:05:36,726 --> 00:05:38,196
because they received a touch as


188
00:05:38,196 --> 00:05:39,416
interest as part of this


189
00:05:39,416 --> 00:05:40,726
interaction by the system.


190
00:05:41,546 --> 00:05:43,106
And then we will deliver this


191
00:05:43,596 --> 00:05:44,636
touch again to the touch


192
00:05:44,636 --> 00:05:45,776
handling methods and began.


193
00:05:46,606 --> 00:05:48,046
Now we move the touch.


194
00:05:48,046 --> 00:05:51,246
And if we move the touch, this


195
00:05:51,246 --> 00:05:53,386
is delivered to the gesture and


196
00:05:53,386 --> 00:05:54,856
the pan gesture, in this case,


197
00:05:55,466 --> 00:05:57,186
will recognize because we moved


198
00:05:57,186 --> 00:05:59,706
enough that the pan gesture will


199
00:05:59,706 --> 00:06:00,216
recognize.


200
00:06:00,656 --> 00:06:02,216
And it will do so by moving its


201
00:06:02,246 --> 00:06:03,116
state to began.


202
00:06:03,946 --> 00:06:05,246
However, we didn't move enough


203
00:06:05,296 --> 00:06:06,536
for the tap gesture recognizer


204
00:06:06,536 --> 00:06:07,446
to actually fail.


205
00:06:07,446 --> 00:06:08,616
So we didn't exceed the


206
00:06:08,616 --> 00:06:09,486
allowable movement.


207
00:06:09,556 --> 00:06:11,306
So the tap gesture recognizer on


208
00:06:11,306 --> 00:06:13,706
its own will stay in the state


209
00:06:13,786 --> 00:06:14,366
possible.


210
00:06:15,486 --> 00:06:18,166
However, in this case, it still


211
00:06:18,356 --> 00:06:18,916
will fail.


212
00:06:19,146 --> 00:06:20,136
That is because of another


213
00:06:20,136 --> 00:06:21,876
aspect of the gesture recognizer


214
00:06:21,946 --> 00:06:22,336
system.


215
00:06:22,686 --> 00:06:24,106
In its default configuration


216
00:06:24,106 --> 00:06:26,066
only gesture recognizer will


217
00:06:26,066 --> 00:06:27,426
recognize and win and will


218
00:06:27,426 --> 00:06:28,976
exclude all the others.


219
00:06:29,426 --> 00:06:30,786
And this is what happened here.


220
00:06:31,356 --> 00:06:34,406
And note that the began actually


221
00:06:34,406 --> 00:06:35,386
will be sent by the gesture


222
00:06:35,386 --> 00:06:38,286
recognizer system and the touch


223
00:06:38,286 --> 00:06:39,456
handling will be sent as


224
00:06:39,556 --> 00:06:41,276
cancelled already again because


225
00:06:41,276 --> 00:06:42,436
the pan gesture recognizer


226
00:06:42,736 --> 00:06:44,846
cancels touches in view and


227
00:06:45,096 --> 00:06:46,916
therefore it began, it will be


228
00:06:46,916 --> 00:06:48,156
cancelled which is an


229
00:06:48,156 --> 00:06:49,786
interesting thing to look at


230
00:06:49,786 --> 00:06:51,736
because your finger is still on


231
00:06:51,736 --> 00:06:53,706
the screen and the gesture


232
00:06:53,706 --> 00:06:55,706
recognizer see it as such but


233
00:06:55,846 --> 00:06:57,156
your responder based handling


234
00:06:57,156 --> 00:06:57,506
doesn't.


235
00:06:57,806 --> 00:06:59,246
So that's something to think


236
00:06:59,246 --> 00:06:59,576
about.


237
00:07:00,166 --> 00:07:03,146
And then if you lift the touch,


238
00:07:03,896 --> 00:07:05,386
it will move its state to ended.


239
00:07:05,386 --> 00:07:06,826
And this ended will be delivered


240
00:07:07,186 --> 00:07:08,486
again to the gesture recognizer


241
00:07:08,486 --> 00:07:09,196
system first.


242
00:07:09,976 --> 00:07:11,246
The pan gesture recognizer will


243
00:07:11,246 --> 00:07:14,566
move its state to ended and mark


244
00:07:14,566 --> 00:07:16,766
itself to one -- its action


245
00:07:16,766 --> 00:07:17,326
being sent.


246
00:07:18,076 --> 00:07:19,256
And then you might think that


247
00:07:19,256 --> 00:07:20,456
the tap gesture recognizer will


248
00:07:20,456 --> 00:07:21,876
also see the ended because you


249
00:07:21,876 --> 00:07:23,266
usually see all the touch


250
00:07:23,266 --> 00:07:25,536
sequences in your handling


251
00:07:25,736 --> 00:07:26,326
methods.


252
00:07:26,656 --> 00:07:27,956
However, because it failed you


253
00:07:27,956 --> 00:07:28,426
don't.


254
00:07:28,966 --> 00:07:30,356
And that's very important if you


255
00:07:30,356 --> 00:07:31,136
do your [inaudible] gesture


256
00:07:31,136 --> 00:07:31,666
recognizer.


257
00:07:31,776 --> 00:07:32,736
So whenever your gesture


258
00:07:32,736 --> 00:07:34,686
recognizer fails, you need to


259
00:07:34,686 --> 00:07:36,066
reset all your state and make


260
00:07:36,066 --> 00:07:37,846
sure that you don't leave behind


261
00:07:37,846 --> 00:07:39,986
old references to touches that


262
00:07:39,986 --> 00:07:41,226
you didn't receive an end or


263
00:07:41,226 --> 00:07:41,856
cancel for.


264
00:07:41,986 --> 00:07:44,166
The ideal place for this is


265
00:07:44,166 --> 00:07:46,206
reset in your custom, your


266
00:07:46,206 --> 00:07:48,046
gesture recognizer subtasks.


267
00:07:49,126 --> 00:07:50,376
And then finally the gesture


268
00:07:50,376 --> 00:07:51,746
recognizer system sends out the


269
00:07:51,856 --> 00:07:53,276
ended -- the pan gesture


270
00:07:53,366 --> 00:07:54,226
recognizer action.


271
00:07:55,806 --> 00:07:57,156
So what you just saw was


272
00:07:57,226 --> 00:07:57,956
exclusion.


273
00:07:58,136 --> 00:07:59,246
This is something that happens


274
00:07:59,246 --> 00:08:00,396
whenever the state change and


275
00:08:00,396 --> 00:08:01,676
you have a way to influence


276
00:08:01,736 --> 00:08:02,036
that.


277
00:08:02,036 --> 00:08:03,926
So in your UIGestureRecognizer


278
00:08:03,926 --> 00:08:05,596
delegate you have the method,


279
00:08:05,936 --> 00:08:07,026
gesture recognizer should


280
00:08:07,026 --> 00:08:08,686
recognize simultaneously with


281
00:08:09,266 --> 00:08:11,156
and you can opt in to not be


282
00:08:11,156 --> 00:08:11,736
excluded.


283
00:08:12,326 --> 00:08:13,576
Note that this is the only thing


284
00:08:13,576 --> 00:08:14,126
you can do.


285
00:08:14,126 --> 00:08:16,816
If any of the participants wants


286
00:08:16,856 --> 00:08:18,316
to recognize simultaneously,


287
00:08:18,546 --> 00:08:19,026
they will.


288
00:08:19,026 --> 00:08:20,786
You have no way to prevent that.


289
00:08:21,846 --> 00:08:23,566
And on the UIGestureRecognizer


290
00:08:24,856 --> 00:08:26,666
itself, you have the inverse


291
00:08:26,666 --> 00:08:28,046
logic which can prevent -- and


292
00:08:28,046 --> 00:08:29,736
can prevent it by in your sub


293
00:08:29,736 --> 00:08:30,046
classes.


294
00:08:30,366 --> 00:08:33,116
So you can do this for gesture


295
00:08:33,116 --> 00:08:34,726
recognizers that you know you


296
00:08:34,726 --> 00:08:36,506
want to recognize simultaneously


297
00:08:36,506 --> 00:08:36,696
with.


298
00:08:37,616 --> 00:08:38,976
So let's see how this looks.


299
00:08:42,576 --> 00:08:44,376
So again we have our setup.


300
00:08:45,096 --> 00:08:47,016
Our touch goes down and began.


301
00:08:47,636 --> 00:08:48,826
And nothing changed in the


302
00:08:48,826 --> 00:08:49,396
beginning.


303
00:08:50,766 --> 00:08:53,356
It moves, again, far enough for


304
00:08:53,356 --> 00:08:54,736
the pan recognizer to recognize


305
00:08:54,736 --> 00:08:56,056
but not far enough for the tap


306
00:08:56,056 --> 00:08:59,406
recognizer to fail on its own.


307
00:08:59,996 --> 00:09:01,096
And at this point and time, the


308
00:09:01,096 --> 00:09:02,546
gesture recognizer system will


309
00:09:02,546 --> 00:09:04,136
perform exclusion because state


310
00:09:04,286 --> 00:09:04,726
change.


311
00:09:04,726 --> 00:09:06,946
So the included gesture


312
00:09:06,946 --> 00:09:08,966
recognizers have changed the


313
00:09:08,966 --> 00:09:09,436
state.


314
00:09:09,486 --> 00:09:12,016
So we ask and this is where the


315
00:09:12,016 --> 00:09:13,526
delegate callback gets called


316
00:09:13,836 --> 00:09:15,156
and you return true.


317
00:09:15,606 --> 00:09:17,326
And if you return true, the tap


318
00:09:17,326 --> 00:09:18,306
gesture recognizer will be


319
00:09:18,306 --> 00:09:19,236
allowed to continue.


320
00:09:19,686 --> 00:09:22,226
And the pan gesture recognizer's


321
00:09:22,226 --> 00:09:25,976
action will be sent.


322
00:09:26,146 --> 00:09:27,766
And if you lift the finger now,


323
00:09:27,766 --> 00:09:30,686
the began, the pan gesture


324
00:09:30,686 --> 00:09:32,216
recognizer will move to ended


325
00:09:32,556 --> 00:09:33,226
and finish.


326
00:09:33,566 --> 00:09:34,756
And the tap gesture recognizer


327
00:09:34,756 --> 00:09:36,146
will also move to ended and


328
00:09:36,146 --> 00:09:36,656
finish.


329
00:09:37,096 --> 00:09:39,006
So it's important to know that


330
00:09:39,066 --> 00:09:40,326
the gesture recognizers will


331
00:09:40,326 --> 00:09:42,226
change the state before the


332
00:09:42,226 --> 00:09:43,946
system actually reconciles them.


333
00:09:44,276 --> 00:09:46,116
That means, at this point, the


334
00:09:46,116 --> 00:09:46,976
gesture recognizer should


335
00:09:46,976 --> 00:09:48,456
recognize simultaneously will be


336
00:09:48,456 --> 00:09:50,096
asked again because we have a


337
00:09:50,096 --> 00:09:51,476
state change and you still need


338
00:09:51,476 --> 00:09:53,256
to report true in this delegate


339
00:09:53,256 --> 00:09:54,886
method if you want both to fire.


340
00:09:56,206 --> 00:09:57,116
And now that both have


341
00:09:57,156 --> 00:09:58,396
recognized, there is another


342
00:09:58,396 --> 00:09:59,626
thing that's interesting.


343
00:09:59,976 --> 00:10:01,356
If you have simultaneous


344
00:10:01,356 --> 00:10:02,456
recognition of gesture


345
00:10:02,456 --> 00:10:04,676
recognizers, once the action


346
00:10:04,916 --> 00:10:07,236
will be sent, you don't -- you


347
00:10:07,236 --> 00:10:08,696
can't rely on a specific order.


348
00:10:09,136 --> 00:10:10,476
So the pan and the tap gesture


349
00:10:10,476 --> 00:10:11,726
recognizer will fire because


350
00:10:11,726 --> 00:10:12,236
they're recognized


351
00:10:12,236 --> 00:10:14,986
simultaneously but you have no


352
00:10:14,986 --> 00:10:16,416
guarantee in which order that


353
00:10:17,306 --> 00:10:18,636
will happen.


354
00:10:18,746 --> 00:10:21,886
So that's all and well but now


355
00:10:21,886 --> 00:10:23,736
we have a little bit of a pan


356
00:10:23,736 --> 00:10:24,936
and the tap and maybe that's not


357
00:10:24,936 --> 00:10:25,506
what we want.


358
00:10:25,866 --> 00:10:28,706
If we want the pan recognizer to


359
00:10:28,706 --> 00:10:30,116
actually wait until the tap


360
00:10:30,116 --> 00:10:32,206
recognizer has exceeded its


361
00:10:32,206 --> 00:10:34,526
allowable movement, then we have


362
00:10:34,526 --> 00:10:36,516
another way to do that and that


363
00:10:36,516 --> 00:10:37,546
way is called failure


364
00:10:37,546 --> 00:10:38,436
requirements.


365
00:10:39,056 --> 00:10:41,416
And failure requirements, you


366
00:10:41,416 --> 00:10:43,236
can set up between two gesture


367
00:10:43,236 --> 00:10:43,986
recognizers.


368
00:10:44,846 --> 00:10:46,286
For example with required to


369
00:10:46,286 --> 00:10:47,966
fail statically and this is the


370
00:10:47,966 --> 00:10:48,686
preferred one.


371
00:10:48,686 --> 00:10:50,186
And what that means is that one


372
00:10:50,186 --> 00:10:52,286
recognizer requires another one


373
00:10:52,286 --> 00:10:53,876
to fail before it sends its


374
00:10:53,876 --> 00:10:54,306
action.


375
00:10:54,696 --> 00:10:56,586
It still would traverse its


376
00:10:56,586 --> 00:10:58,716
state but it waits to send its


377
00:10:59,626 --> 00:10:59,776
action.


378
00:11:00,486 --> 00:11:02,476
And if you need more dynamic and


379
00:11:02,476 --> 00:11:04,276
one dynamic way to do that you


380
00:11:04,356 --> 00:11:05,576
can do so also in the


381
00:11:05,576 --> 00:11:07,116
UIGestureRecognizer delegate


382
00:11:07,656 --> 00:11:08,836
with the two methods gesture


383
00:11:08,836 --> 00:11:09,816
recognizer should require


384
00:11:09,816 --> 00:11:11,506
failure of and gesture


385
00:11:11,506 --> 00:11:13,086
recognizer should be required to


386
00:11:13,086 --> 00:11:13,846
fail by.


387
00:11:14,526 --> 00:11:15,666
And note that those go both


388
00:11:15,736 --> 00:11:16,136
ways.


389
00:11:16,266 --> 00:11:17,906
You need to make sure to agree


390
00:11:17,906 --> 00:11:20,036
in your implementation with what


391
00:11:20,036 --> 00:11:21,486
your answer here because


392
00:11:21,486 --> 00:11:23,616
depending on the UI more complex


393
00:11:23,706 --> 00:11:25,166
gesture setup, that might be


394
00:11:25,166 --> 00:11:26,766
called the one way or the other


395
00:11:26,766 --> 00:11:27,776
way first.


396
00:11:28,086 --> 00:11:30,396
So that needs to be the same,


397
00:11:30,726 --> 00:11:32,106
otherwise, it might lead to


398
00:11:32,106 --> 00:11:33,556
several bugs.


399
00:11:35,156 --> 00:11:36,376
And you have the same in the


400
00:11:36,376 --> 00:11:38,256
UIGestureRecognizer subclasses


401
00:11:38,456 --> 00:11:39,636
where you can implement your


402
00:11:39,636 --> 00:11:40,846
require failure or should be


403
00:11:40,846 --> 00:11:42,286
required to fail by.


404
00:11:42,756 --> 00:11:44,406
Again those directions are more


405
00:11:44,406 --> 00:11:46,736
for a channel mechanism.


406
00:11:47,446 --> 00:11:49,436
Let's also look into how this


407
00:11:49,436 --> 00:11:50,056
works.


408
00:11:50,326 --> 00:11:52,016
So we have setup our static


409
00:11:52,016 --> 00:11:53,526
failure requirement between the


410
00:11:53,576 --> 00:11:55,086
pan recognizer and the tap


411
00:11:55,086 --> 00:11:55,956
recognizer.


412
00:11:56,686 --> 00:11:59,946
And again, our touch goes down.


413
00:11:59,946 --> 00:12:02,086
The state start out as possible.


414
00:12:02,876 --> 00:12:04,226
Then we move the touch.


415
00:12:04,986 --> 00:12:07,666
And the move will be delivered


416
00:12:07,836 --> 00:12:09,296
to both gesture recognizers and


417
00:12:09,296 --> 00:12:10,776
the pan recognizer will begin


418
00:12:11,026 --> 00:12:12,306
and the tap recognizer will stay


419
00:12:12,306 --> 00:12:12,836
possible.


420
00:12:13,666 --> 00:12:15,076
However because the existing


421
00:12:15,126 --> 00:12:16,816
failure requirement, the pan


422
00:12:16,816 --> 00:12:18,286
recognizer will not send its


423
00:12:18,286 --> 00:12:19,646
action at this point and time.


424
00:12:22,026 --> 00:12:23,396
So going on, moving a little bit


425
00:12:23,446 --> 00:12:24,866
further, but still not far


426
00:12:24,866 --> 00:12:26,316
enough to fail the tap gesture


427
00:12:26,316 --> 00:12:28,586
recognizer we will move, and the


428
00:12:28,586 --> 00:12:30,106
pan recognizer will change its


429
00:12:30,176 --> 00:12:31,546
state to changed.


430
00:12:33,386 --> 00:12:34,796
And the tap recognizer will stay


431
00:12:34,796 --> 00:12:36,506
possible but still the failure


432
00:12:36,506 --> 00:12:38,036
requirement is not fulfilled.


433
00:12:38,256 --> 00:12:40,386
So that means still no action.


434
00:12:40,956 --> 00:12:42,966
And it is at this point and time


435
00:12:42,966 --> 00:12:45,116
if you would move further away


436
00:12:45,436 --> 00:12:47,116
then the tap recognizer would


437
00:12:47,116 --> 00:12:49,006
fail and by failing would allow


438
00:12:49,006 --> 00:12:50,426
the pan recognizer to send its


439
00:12:50,426 --> 00:12:50,896
action.


440
00:12:51,716 --> 00:12:54,006
And there's an important message


441
00:12:54,006 --> 00:12:54,336
in there.


442
00:12:54,336 --> 00:12:56,006
If the pan recognizer sends its


443
00:12:56,006 --> 00:12:57,366
action as this point and time,


444
00:12:57,656 --> 00:12:58,896
it will send its action in its


445
00:12:58,896 --> 00:12:59,706
state began.


446
00:13:00,186 --> 00:13:01,836
Although it already is in state


447
00:13:01,836 --> 00:13:03,406
change because we make sure the


448
00:13:03,406 --> 00:13:04,836
client see a consistent picture


449
00:13:05,106 --> 00:13:07,766
of this but the important part,


450
00:13:08,126 --> 00:13:09,486
you should never inspect the


451
00:13:09,486 --> 00:13:11,326
gesture recognizer state outside


452
00:13:11,326 --> 00:13:13,186
of its action method and think


453
00:13:13,186 --> 00:13:14,516
you know exactly what the state


454
00:13:14,516 --> 00:13:16,376
is, because only in the action


455
00:13:16,376 --> 00:13:17,606
method that is defined.


456
00:13:18,896 --> 00:13:20,786
But now let's go even further


457
00:13:20,786 --> 00:13:23,076
and just lift the touch and the


458
00:13:23,076 --> 00:13:24,406
touch then moves into the state


459
00:13:24,406 --> 00:13:26,026
into ended and will be


460
00:13:26,026 --> 00:13:26,426
delivered.


461
00:13:26,426 --> 00:13:27,766
The pan recognizer move its


462
00:13:27,766 --> 00:13:29,246
state to ended and recognizes.


463
00:13:29,556 --> 00:13:30,976
The tap gesture recognizer moves


464
00:13:30,976 --> 00:13:31,996
its state into ended and


465
00:13:31,996 --> 00:13:32,686
recognizes.


466
00:13:35,296 --> 00:13:37,076
But now still no action.


467
00:13:37,076 --> 00:13:38,496
So we have a complete set of


468
00:13:38,496 --> 00:13:40,236
state changes in the pan gesture


469
00:13:40,236 --> 00:13:41,676
recognizer but it never send out


470
00:13:41,676 --> 00:13:43,406
its action, because the tap


471
00:13:43,406 --> 00:13:45,496
recognizer did recognize and


472
00:13:45,496 --> 00:13:47,166
therefore no failure requirement


473
00:13:47,336 --> 00:13:48,076
was fulfilled.


474
00:13:48,576 --> 00:13:50,146
And the tap gesture recognizer


475
00:13:50,146 --> 00:13:51,666
will finally send its action.


476
00:13:52,136 --> 00:13:53,926
So that is failure requirements.


477
00:13:54,116 --> 00:13:55,596
Failure requirements really just


478
00:13:55,646 --> 00:13:57,206
prevent the extra send of a


479
00:13:57,206 --> 00:13:58,156
gesture recognizer.


480
00:13:58,526 --> 00:14:01,866
And you should be aware of that.


481
00:14:02,076 --> 00:14:03,326
Let's look at this picture for a


482
00:14:03,326 --> 00:14:03,756
moment.


483
00:14:03,756 --> 00:14:06,106
So this is a regular settings


484
00:14:06,746 --> 00:14:08,656
screen and think about how many


485
00:14:08,656 --> 00:14:10,106
gesture recognizers are ready to


486
00:14:10,496 --> 00:14:11,736
drop into action on this screen.


487
00:14:11,796 --> 00:14:14,776
Just think of a number.


488
00:14:14,946 --> 00:14:17,916
Yeah. It is 163.


489
00:14:19,616 --> 00:14:21,126
That sounds quite a lot because


490
00:14:21,126 --> 00:14:23,276
it is but our gesture recognizer


491
00:14:23,276 --> 00:14:25,236
system is built for that and the


492
00:14:25,236 --> 00:14:26,506
way we deal with this is we


493
00:14:26,506 --> 00:14:27,586
narrow that down.


494
00:14:27,916 --> 00:14:29,596
And for example, if a touch goes


495
00:14:29,736 --> 00:14:31,696
down to the -- to this switch


496
00:14:31,696 --> 00:14:33,846
here, we narrowed down the


497
00:14:33,846 --> 00:14:35,586
interest gesture recognizers for


498
00:14:35,656 --> 00:14:35,876
you.


499
00:14:36,706 --> 00:14:38,856
And in this case that leaves


500
00:14:38,856 --> 00:14:39,716
about seven.


501
00:14:40,036 --> 00:14:41,436
And seven is really a good


502
00:14:41,766 --> 00:14:42,636
number to deal with.


503
00:14:43,126 --> 00:14:44,406
So how do we do this?


504
00:14:44,706 --> 00:14:46,466
So in channel, we do hit testing


505
00:14:46,466 --> 00:14:48,166
as soon as a touch goes down.


506
00:14:48,166 --> 00:14:50,036
And this hit testing is done by


507
00:14:50,036 --> 00:14:51,346
walking the view hierarchy.


508
00:14:51,346 --> 00:14:52,966
Starting from window and asking


509
00:14:52,966 --> 00:14:55,236
the hit testing methods if a


510
00:14:55,236 --> 00:14:56,986
touch is inside of a view.


511
00:14:56,986 --> 00:14:58,196
And when we find the deepest


512
00:14:58,296 --> 00:15:00,406
view, we keep that and assign


513
00:15:00,406 --> 00:15:01,206
that to the touch.


514
00:15:05,476 --> 00:15:07,386
And this is a short overview


515
00:15:07,386 --> 00:15:07,986
about this.


516
00:15:07,986 --> 00:15:10,366
So you have hit test and point


517
00:15:10,366 --> 00:15:10,886
inside.


518
00:15:11,716 --> 00:15:15,216
In here this is your override


519
00:15:15,216 --> 00:15:15,626
points.


520
00:15:15,886 --> 00:15:17,986
Note that if you override this


521
00:15:17,986 --> 00:15:19,906
to extend or contract your hit


522
00:15:19,906 --> 00:15:21,026
testing area, you should


523
00:15:21,026 --> 00:15:22,926
override both of them to agree


524
00:15:23,416 --> 00:15:23,966
again.


525
00:15:24,496 --> 00:15:26,806
Also note that the event in this


526
00:15:26,836 --> 00:15:28,206
queue is not yet fully formed


527
00:15:28,206 --> 00:15:29,396
because hit test is the first


528
00:15:29,396 --> 00:15:29,916
thing we do.


529
00:15:30,346 --> 00:15:32,026
That means that if you inspect


530
00:15:32,026 --> 00:15:33,936
the touches of the event, they


531
00:15:33,936 --> 00:15:35,426
might not be there because it's


532
00:15:35,426 --> 00:15:36,646
really -- we deal with one after


533
00:15:36,646 --> 00:15:38,066
another and then add the touches


534
00:15:38,066 --> 00:15:38,626
to the event.


535
00:15:39,006 --> 00:15:40,226
So that might be surprising to


536
00:15:40,226 --> 00:15:42,156
you but that's how it is on hit


537
00:15:42,186 --> 00:15:42,576
testing.


538
00:15:42,576 --> 00:15:43,816
So the only thing you can ask


539
00:15:43,886 --> 00:15:45,306
the event is kind of its


540
00:15:45,306 --> 00:15:48,146
existence in the callback and


541
00:15:48,276 --> 00:15:49,826
it's type.


542
00:15:50,296 --> 00:15:52,216
There are more properties that


543
00:15:52,286 --> 00:15:53,396
influence hit testing.


544
00:15:53,436 --> 00:15:55,276
For example, in UIView there is


545
00:15:55,276 --> 00:15:56,496
user interaction is enabled.


546
00:15:56,496 --> 00:15:57,846
This is one of the most


547
00:15:57,846 --> 00:15:58,496
important ones.


548
00:15:58,846 --> 00:16:01,376
This is usually true other -- if


549
00:16:01,376 --> 00:16:03,236
you didn't change it but for


550
00:16:03,236 --> 00:16:05,216
example, for an image view that


551
00:16:05,216 --> 00:16:07,586
is false by default.


552
00:16:07,866 --> 00:16:09,086
So you need to switch it to yes


553
00:16:09,116 --> 00:16:10,686
otherwise you don't have any hit


554
00:16:10,716 --> 00:16:11,666
testing on this one.


555
00:16:12,056 --> 00:16:13,386
And there's alpha and is hidden


556
00:16:13,386 --> 00:16:14,926
which we use to actually guard


557
00:16:14,976 --> 00:16:16,596
hit testing so if something is


558
00:16:16,596 --> 00:16:18,846
invisible we don't hit test it


559
00:16:19,196 --> 00:16:21,516
but in your customs subclasses


560
00:16:21,516 --> 00:16:23,226
you really need to also adhere


561
00:16:23,226 --> 00:16:23,576
to that.


562
00:16:23,916 --> 00:16:24,786
And then there's -- it's


563
00:16:24,786 --> 00:16:26,866
multiple touch enabled which for


564
00:16:26,866 --> 00:16:28,746
historical reasons defaults to


565
00:16:28,746 --> 00:16:30,436
no but doesn't affect the


566
00:16:30,436 --> 00:16:31,716
gesture recognizer system.


567
00:16:31,716 --> 00:16:34,226
So if you ever did come in a


568
00:16:34,226 --> 00:16:35,656
situation where you actually


569
00:16:35,656 --> 00:16:37,096
have working gesture [inaudible]


570
00:16:37,156 --> 00:16:38,946
and everything but your


571
00:16:38,946 --> 00:16:40,136
responder based touch handling


572
00:16:40,136 --> 00:16:41,706
code only ever saw one touch,


573
00:16:41,706 --> 00:16:43,906
then probably one view in your


574
00:16:43,906 --> 00:16:45,986
hierarchy did have set this to


575
00:16:45,986 --> 00:16:46,676
no still.


576
00:16:46,716 --> 00:16:47,776
You just need to set this to


577
00:16:47,886 --> 00:16:48,146
true.


578
00:16:48,596 --> 00:16:49,846
And then, of course, there's


579
00:16:49,846 --> 00:16:51,566
UIViewAnimationOptions when we


580
00:16:51,566 --> 00:16:53,646
default you out of end user


581
00:16:53,646 --> 00:16:54,256
interaction.


582
00:16:54,676 --> 00:16:57,646
And that's not because we don't


583
00:16:57,646 --> 00:16:59,106
want you to hit test during user


584
00:16:59,106 --> 00:17:01,176
interaction, it's more because


585
00:17:01,176 --> 00:17:02,546
you really need to do additional


586
00:17:02,546 --> 00:17:03,726
work if you enable this.


587
00:17:04,036 --> 00:17:05,205
So you need to override hit


588
00:17:05,205 --> 00:17:06,366
testing in point and side


589
00:17:06,366 --> 00:17:07,016
[phonetic] for this to work


590
00:17:07,066 --> 00:17:07,336
well.


591
00:17:08,296 --> 00:17:09,465
And we talked about this in the


592
00:17:09,465 --> 00:17:10,836
past if presentation layer


593
00:17:10,836 --> 00:17:11,976
versus model layer tells you


594
00:17:11,976 --> 00:17:13,205
something then you're probably


595
00:17:13,976 --> 00:17:14,205
good.


596
00:17:14,465 --> 00:17:16,195
If not, please really watch that


597
00:17:16,195 --> 00:17:16,566
talk.


598
00:17:17,036 --> 00:17:19,356
And also last year we added the


599
00:17:19,356 --> 00:17:21,705
UIViewPropertyAnimator and it


600
00:17:21,705 --> 00:17:23,046
actually helps you with hit


601
00:17:23,046 --> 00:17:24,296
testing during animations.


602
00:17:24,746 --> 00:17:26,386
However, there is this property


603
00:17:26,386 --> 00:17:27,766
that is manual hit testing


604
00:17:27,766 --> 00:17:29,156
enabled and you have to set it


605
00:17:29,636 --> 00:17:32,076
to true to make -- to do custom


606
00:17:32,076 --> 00:17:33,296
interesting and more complex


607
00:17:33,296 --> 00:17:33,936
scenarios.


608
00:17:34,456 --> 00:17:37,006
So let's go back to our hit


609
00:17:37,006 --> 00:17:38,206
testing in the view hierarchy.


610
00:17:38,566 --> 00:17:39,916
Now that we have hit tested.


611
00:17:40,206 --> 00:17:41,476
We walk back up the view


612
00:17:41,476 --> 00:17:42,796
hierarchy and collect all the


613
00:17:42,796 --> 00:17:44,296
gesture recognizers on those


614
00:17:44,336 --> 00:17:44,826
views.


615
00:17:45,056 --> 00:17:46,586
This is our base set of gesture


616
00:17:46,586 --> 00:17:49,666
recognizers we consider for this


617
00:17:49,666 --> 00:17:53,206
interaction but there is more


618
00:17:53,206 --> 00:17:54,516
you can customize on this.


619
00:17:54,516 --> 00:17:55,726
So you have a callback.


620
00:17:55,786 --> 00:17:56,906
UIGestureRecognizer should


621
00:17:56,906 --> 00:17:57,666
receive touch.


622
00:17:58,076 --> 00:18:00,496
If you return false from that,


623
00:18:00,496 --> 00:18:03,196
you can actually exclude a


624
00:18:03,196 --> 00:18:04,446
gesture recognizer from


625
00:18:04,446 --> 00:18:05,696
participating at all.


626
00:18:05,696 --> 00:18:07,346
So it will never see that touch.


627
00:18:07,576 --> 00:18:09,056
It's also a great break point


628
00:18:09,056 --> 00:18:10,826
for you to see if your gesture


629
00:18:11,556 --> 00:18:13,246
recognizer plays -- gets a


630
00:18:13,246 --> 00:18:15,246
chance to actually play with the


631
00:18:15,246 --> 00:18:15,886
interaction.


632
00:18:16,276 --> 00:18:17,746
And there's a point little later


633
00:18:17,746 --> 00:18:18,986
on that gesture recognizer


634
00:18:18,986 --> 00:18:20,386
should begin also could create


635
00:18:20,386 --> 00:18:21,466
problem for debugging.


636
00:18:21,756 --> 00:18:23,296
And this is asked whenever a


637
00:18:23,356 --> 00:18:24,826
gesture recognizer really tries


638
00:18:24,866 --> 00:18:26,806
to begin and you can say no.


639
00:18:26,936 --> 00:18:28,756
False in this case.


640
00:18:29,056 --> 00:18:31,106
And if you do so, it will fail.


641
00:18:31,106 --> 00:18:33,356
It will not -- it will fulfill


642
00:18:33,356 --> 00:18:34,936
its failure requirements by


643
00:18:34,936 --> 00:18:36,916
failing and its also a good


644
00:18:37,196 --> 00:18:39,386
point to look into.


645
00:18:39,556 --> 00:18:41,056
There's static properties is


646
00:18:41,056 --> 00:18:42,656
enabled on UIGestureRecognizer.


647
00:18:42,656 --> 00:18:45,136
You can set that to false


648
00:18:45,136 --> 00:18:47,026
temporarily if you know your


649
00:18:47,026 --> 00:18:48,396
state and you want to do that


650
00:18:48,736 --> 00:18:49,956
statically, that is very


651
00:18:49,956 --> 00:18:50,486
helpful.


652
00:18:50,716 --> 00:18:52,536
And you also that trick we


653
00:18:52,536 --> 00:18:54,686
talked about more often that


654
00:18:54,986 --> 00:18:57,056
when you set this to false while


655
00:18:57,056 --> 00:18:58,576
it recognizes, it will fail.


656
00:18:58,856 --> 00:19:00,156
And if you set it immediately to


657
00:19:00,246 --> 00:19:01,766
true again, your gesture


658
00:19:01,766 --> 00:19:04,226
recognizer will begin respond to


659
00:19:04,226 --> 00:19:05,356
the next touch sequence


660
00:19:05,386 --> 00:19:05,866
directly.


661
00:19:06,776 --> 00:19:07,926
And there's the allowed touch


662
00:19:07,976 --> 00:19:09,526
types which default to all the


663
00:19:09,526 --> 00:19:11,686
touch types that is direct,


664
00:19:11,686 --> 00:19:13,086
indirect, and stylus.


665
00:19:13,656 --> 00:19:15,996
But you can narrow it down to


666
00:19:15,996 --> 00:19:17,656
just the stylus or just direct


667
00:19:17,656 --> 00:19:20,996
touches, but if you really want


668
00:19:21,276 --> 00:19:23,006
gestures to recognize between


669
00:19:23,006 --> 00:19:24,176
different touch types you also


670
00:19:24,176 --> 00:19:25,856
have to set requires exclusive


671
00:19:25,856 --> 00:19:27,546
touch type to true.


672
00:19:27,936 --> 00:19:29,696
Only then you can really do a


673
00:19:29,696 --> 00:19:31,166
pinch between a pencil and a


674
00:19:31,166 --> 00:19:31,796
direct touch.


675
00:19:32,206 --> 00:19:33,126
Otherwise you can't.


676
00:19:33,826 --> 00:19:34,856
Speaking of properties.


677
00:19:34,856 --> 00:19:36,206
We have new properties for you


678
00:19:36,386 --> 00:19:37,886
in iOS 11.


679
00:19:37,886 --> 00:19:39,086
And that's a name.


680
00:19:39,656 --> 00:19:40,846
Sounds simple but it's really


681
00:19:40,846 --> 00:19:42,256
helpful because we encourage you


682
00:19:42,256 --> 00:19:43,356
to actually use all of our


683
00:19:43,356 --> 00:19:44,436
gesture recognizer and just


684
00:19:44,436 --> 00:19:45,256
configure them.


685
00:19:45,576 --> 00:19:47,036
So you can add an additional


686
00:19:47,036 --> 00:19:47,246
name.


687
00:19:47,246 --> 00:19:48,396
So in debugging you don't have


688
00:19:48,466 --> 00:19:49,706
to look above the action method


689
00:19:50,146 --> 00:19:52,206
and do that but only use that


690
00:19:52,206 --> 00:19:53,996
for debugging.


691
00:19:53,996 --> 00:19:56,176
We will not guarantee you that


692
00:19:56,176 --> 00:19:58,046
we will mess with this by the


693
00:19:58,046 --> 00:19:58,486
system.


694
00:19:59,676 --> 00:20:01,836
And speaking about debugging.


695
00:20:01,836 --> 00:20:03,966
We also have the break point


696
00:20:03,966 --> 00:20:05,076
opportunities in gesture


697
00:20:05,076 --> 00:20:06,406
recognizer should receive touch


698
00:20:06,976 --> 00:20:08,636
to actually see if your setup


699
00:20:08,676 --> 00:20:09,146
does work.


700
00:20:09,496 --> 00:20:11,116
There's touches begin


701
00:20:11,116 --> 00:20:12,226
[inaudible] responder base touch


702
00:20:12,226 --> 00:20:14,366
handling method that helps you


703
00:20:14,816 --> 00:20:16,206
look into the state of a gesture


704
00:20:16,206 --> 00:20:17,736
recognizer system in a known


705
00:20:17,776 --> 00:20:19,106
state as you have seen -- you've


706
00:20:19,156 --> 00:20:20,946
seen the order how we do this.


707
00:20:21,246 --> 00:20:22,606
Now you can look into that and


708
00:20:22,606 --> 00:20:25,866
actually know what the values


709
00:20:25,866 --> 00:20:26,336
mean.


710
00:20:26,736 --> 00:20:28,106
And you can look at the gesture


711
00:20:28,106 --> 00:20:29,766
recognizer of a touch, for


712
00:20:29,766 --> 00:20:31,886
example, or you can look at the


713
00:20:31,886 --> 00:20:33,016
touches for some gesture


714
00:20:33,016 --> 00:20:34,986
recognizer by asking the event


715
00:20:35,346 --> 00:20:38,076
or you can also collect the


716
00:20:38,076 --> 00:20:39,726
gesture recognizers through the


717
00:20:39,726 --> 00:20:41,086
view [inaudible] debugging


718
00:20:41,086 --> 00:20:41,426
session.


719
00:20:43,356 --> 00:20:45,126
Some words on custom


720
00:20:45,126 --> 00:20:46,176
UIGestureRecognizers.


721
00:20:46,656 --> 00:20:47,946
You should always begin late and


722
00:20:47,996 --> 00:20:48,786
fail fast.


723
00:20:49,186 --> 00:20:50,896
That means if you begin too


724
00:20:50,896 --> 00:20:52,086
early, for example, in touches


725
00:20:52,126 --> 00:20:53,896
begin you don't give any other


726
00:20:53,896 --> 00:20:55,736
gesture recognizer the chance to


727
00:20:55,736 --> 00:20:56,826
be not excluded.


728
00:20:57,276 --> 00:20:57,886
This is bad.


729
00:20:57,886 --> 00:20:59,136
So you should begin as late as


730
00:20:59,166 --> 00:21:00,786
you can by still preserving the


731
00:21:00,786 --> 00:21:01,756
intent of your gesture


732
00:21:01,756 --> 00:21:02,326
recognizer.


733
00:21:02,756 --> 00:21:05,146
And you also should fail fast so


734
00:21:05,146 --> 00:21:06,696
you don't hang around failure


735
00:21:06,696 --> 00:21:08,006
requirements of other gesture


736
00:21:08,006 --> 00:21:10,066
recognizers which is very


737
00:21:10,066 --> 00:21:11,926
important and you should also


738
00:21:11,926 --> 00:21:13,556
always whenever you have seen a


739
00:21:13,556 --> 00:21:16,036
touch move to the state to fail


740
00:21:16,086 --> 00:21:17,396
even if we didn't move out of


741
00:21:17,396 --> 00:21:18,456
possible, because you have to be


742
00:21:18,456 --> 00:21:19,806
marked as being part of this


743
00:21:19,806 --> 00:21:21,166
interaction and otherwise you


744
00:21:21,166 --> 00:21:23,026
hang your system.


745
00:21:23,026 --> 00:21:24,526
Also be serious about ignoring


746
00:21:24,526 --> 00:21:25,016
touches.


747
00:21:25,076 --> 00:21:27,116
Ignore them properly not just by


748
00:21:27,116 --> 00:21:28,226
not handling them.


749
00:21:28,606 --> 00:21:30,016
You should also call ignore.


750
00:21:30,346 --> 00:21:31,856
That's for event on your custom


751
00:21:31,856 --> 00:21:33,676
gesture recognizer subclass,


752
00:21:33,676 --> 00:21:34,886
otherwise your touches will be


753
00:21:34,886 --> 00:21:36,856
delayed although you weren't


754
00:21:36,856 --> 00:21:37,856
even interested in them.


755
00:21:38,416 --> 00:21:39,656
And also don't forget touches


756
00:21:39,696 --> 00:21:41,696
cancelled as always.


757
00:21:41,996 --> 00:21:43,656
And this becomes more important


758
00:21:43,656 --> 00:21:44,866
this year because we cancel


759
00:21:44,866 --> 00:21:46,176
touches more often with drag and


760
00:21:46,176 --> 00:21:46,446
drop.


761
00:21:47,746 --> 00:21:50,116
So your takeaway from here


762
00:21:50,116 --> 00:21:51,846
should be revisit your setups.


763
00:21:51,846 --> 00:21:52,896
Look into your gesture


764
00:21:52,896 --> 00:21:55,006
recognizer setups and try to


765
00:21:55,886 --> 00:21:57,346
make sense of the information


766
00:21:57,346 --> 00:21:58,576
you've just heard and put them


767
00:21:58,636 --> 00:21:58,976
together.


768
00:21:59,856 --> 00:22:01,016
Revisit your exclusion and


769
00:22:01,016 --> 00:22:02,146
failure requirements.


770
00:22:02,146 --> 00:22:03,606
When you use one or the other,


771
00:22:03,826 --> 00:22:05,156
how many simultaneous gesture


772
00:22:05,156 --> 00:22:06,356
recognizers do you want to


773
00:22:06,356 --> 00:22:07,546
achieve the same effect?


774
00:22:09,246 --> 00:22:10,746
And also are your gesture


775
00:22:10,746 --> 00:22:12,336
recognizers on the right views?


776
00:22:12,336 --> 00:22:13,556
Are they deep enough?


777
00:22:13,666 --> 00:22:14,956
The deeper you move them, the


778
00:22:14,956 --> 00:22:16,526
less interference is with other


779
00:22:16,526 --> 00:22:17,306
gesture recognizers.


780
00:22:17,356 --> 00:22:18,436
The higher you move them the


781
00:22:18,436 --> 00:22:20,706
more general you can make them.


782
00:22:21,126 --> 00:22:22,266
So you these things you should


783
00:22:22,336 --> 00:22:22,896
think about.


784
00:22:23,856 --> 00:22:26,276
And by that, I want to hand over


785
00:22:26,276 --> 00:22:27,706
to Glen for system gesture


786
00:22:27,706 --> 00:22:28,206
interaction.


787
00:22:28,596 --> 00:22:28,876
Thank you.


788
00:22:29,516 --> 00:22:35,546
[ Clapping ]


789
00:22:36,046 --> 00:22:36,686
>> Thanks, Dom.


790
00:22:36,686 --> 00:22:39,446
My name is Glen Low.


791
00:22:39,446 --> 00:22:41,506
I'm a software engineer with


792
00:22:41,506 --> 00:22:42,006
UIkit.


793
00:22:42,396 --> 00:22:43,666
I'm here to tell you about some


794
00:22:43,666 --> 00:22:45,706
brand new API to improve the way


795
00:22:45,706 --> 00:22:46,936
you to interact with the system


796
00:22:47,346 --> 00:22:48,526
gesture recognizers.


797
00:22:49,236 --> 00:22:50,436
But first a little


798
00:22:50,436 --> 00:22:51,056
entertainment.


799
00:22:52,226 --> 00:22:53,976
After a hard's day coding, this


800
00:22:54,016 --> 00:22:55,406
software engineer needs to play.


801
00:22:55,766 --> 00:22:58,376
So I fire up my demo bots and


802
00:22:58,376 --> 00:22:59,596
move the robot around by


803
00:22:59,596 --> 00:23:00,546
dragging up and down on the


804
00:23:00,546 --> 00:23:01,506
virtual controls.


805
00:23:01,506 --> 00:23:03,126
You see it on the upper right of


806
00:23:03,126 --> 00:23:03,716
the screen.


807
00:23:03,936 --> 00:23:04,996
The gray circles.


808
00:23:05,956 --> 00:23:06,976
And it looks like this.


809
00:23:08,466 --> 00:23:11,176
My little robot has to change


810
00:23:11,176 --> 00:23:13,276
the bad robots into good robots.


811
00:23:14,606 --> 00:23:16,326
As you see I'm doing quite well.


812
00:23:17,796 --> 00:23:19,036
I think I missed one.


813
00:23:19,036 --> 00:23:20,466
I need to get -- I need to go


814
00:23:20,466 --> 00:23:22,586
down to get that one.


815
00:23:23,766 --> 00:23:25,966
No oops, what happened?


816
00:23:26,186 --> 00:23:27,356
I got that new cover sheet


817
00:23:27,356 --> 00:23:27,806
instead?


818
00:23:28,386 --> 00:23:30,976
That's not quite the user


819
00:23:30,976 --> 00:23:32,026
experience we're looking for


820
00:23:32,026 --> 00:23:32,906
here, is it?


821
00:23:33,946 --> 00:23:35,426
So what exactly went wrong?


822
00:23:36,716 --> 00:23:38,166
Well, we currently have a few


823
00:23:38,316 --> 00:23:40,816
special gestures we call system


824
00:23:40,816 --> 00:23:41,386
gestures.


825
00:23:41,846 --> 00:23:44,666
You swipe up from the bottom,


826
00:23:44,666 --> 00:23:46,146
you get the multitasking and


827
00:23:46,146 --> 00:23:46,466
dock.


828
00:23:47,456 --> 00:23:49,796
Swiping out from the -- to the


829
00:23:50,006 --> 00:23:52,006
side brings in the slide over.


830
00:23:52,646 --> 00:23:54,996
Swiping it from the top brings


831
00:23:55,046 --> 00:23:56,496
down the cover sheet.


832
00:23:57,666 --> 00:23:59,856
Now these special system


833
00:23:59,856 --> 00:24:02,146
gestures recognizers fight with


834
00:24:02,146 --> 00:24:03,196
your apps own gesture


835
00:24:03,426 --> 00:24:06,106
recognizers and responders to


836
00:24:06,106 --> 00:24:07,086
try and get to the touches


837
00:24:07,086 --> 00:24:07,206
first.


838
00:24:07,206 --> 00:24:09,176
So what could we do?


839
00:24:10,496 --> 00:24:12,036
Well we do make an exception for


840
00:24:12,096 --> 00:24:13,036
gesture recognizers.


841
00:24:13,626 --> 00:24:15,386
Your tap, pinch, rotate, and


842
00:24:15,386 --> 00:24:17,646
long press gesture recognizers


843
00:24:17,646 --> 00:24:18,966
can [inaudible] touches at the


844
00:24:19,016 --> 00:24:21,016
same time as a system gesture


845
00:24:21,046 --> 00:24:21,946
recognizes.


846
00:24:22,676 --> 00:24:23,976
Although sometimes they will get


847
00:24:23,976 --> 00:24:26,306
cancelled if it's obvious later


848
00:24:26,306 --> 00:24:27,866
on that it's actually a system


849
00:24:27,866 --> 00:24:28,206
gesture.


850
00:24:28,836 --> 00:24:31,016
That's why just tapping on a


851
00:24:31,576 --> 00:24:32,736
button at the bottom won't


852
00:24:32,736 --> 00:24:34,276
actually accidentally bring up


853
00:24:34,276 --> 00:24:36,106
the dock.


854
00:24:36,106 --> 00:24:37,706
That's because that's based on a


855
00:24:37,736 --> 00:24:39,016
tap gesture recognizer.


856
00:24:40,026 --> 00:24:42,246
On the other hand, we have pan


857
00:24:42,956 --> 00:24:44,286
and swipe recognizers as well as


858
00:24:44,286 --> 00:24:46,286
your old school responders.


859
00:24:46,586 --> 00:24:47,866
While these will get the touches


860
00:24:47,916 --> 00:24:49,646
after the system gesture


861
00:24:49,646 --> 00:24:51,136
recognizers are done with them.


862
00:24:51,726 --> 00:24:53,056
So when our users swipe from the


863
00:24:53,056 --> 00:24:54,616
bottom, do you really want to


864
00:24:54,616 --> 00:24:56,626
bring up the dock or do he want


865
00:24:56,816 --> 00:24:59,296
to pan your view?


866
00:24:59,516 --> 00:25:03,276
Well, we had to guess whether to


867
00:25:03,396 --> 00:25:04,586
defer that system gesture.


868
00:25:05,506 --> 00:25:06,986
For example, if your app


869
00:25:06,986 --> 00:25:09,116
happened to hide the status bar,


870
00:25:09,446 --> 00:25:10,586
we would defer bringing up the


871
00:25:10,586 --> 00:25:13,066
dock but it was hard to guess


872
00:25:13,066 --> 00:25:14,266
right all the time.


873
00:25:14,466 --> 00:25:16,536
And really who knows best what


874
00:25:16,536 --> 00:25:17,386
your user wants?


875
00:25:18,616 --> 00:25:21,076
For iOS 11, you can now tell us


876
00:25:21,456 --> 00:25:22,976
when to defer and where to


877
00:25:23,056 --> 00:25:23,356
defer.


878
00:25:24,776 --> 00:25:25,586
No more guesses.


879
00:25:25,906 --> 00:25:27,626
You are not responsible for


880
00:25:28,066 --> 00:25:30,036
deciding whether to defer system


881
00:25:30,036 --> 00:25:31,066
gestures or not.


882
00:25:32,266 --> 00:25:33,866
This means if your app hides the


883
00:25:33,866 --> 00:25:35,566
status bar, we don't


884
00:25:35,566 --> 00:25:37,016
automatically defer the dock


885
00:25:37,126 --> 00:25:37,556
anymore.


886
00:25:38,716 --> 00:25:41,736
What does this look like?


887
00:25:42,196 --> 00:25:43,836
Instead you need to use this new


888
00:25:43,836 --> 00:25:46,506
API we call ScreenEdgesDeferring


889
00:25:46,606 --> 00:25:47,896
System Gestures.


890
00:25:48,626 --> 00:25:50,926
This API lets you declare which


891
00:25:50,926 --> 00:25:52,546
edges you want us to defer


892
00:25:52,806 --> 00:25:54,666
system gestures in favor of your


893
00:25:54,666 --> 00:25:56,786
own gesture recognizers.


894
00:25:57,476 --> 00:25:58,656
In your view controllers,


895
00:25:58,796 --> 00:26:01,426
override preferredScreenEdges


896
00:26:01,946 --> 00:26:03,706
Deferring System Gesutres to


897
00:26:03,706 --> 00:26:05,046
return the screen edges for


898
00:26:05,046 --> 00:26:05,606
deferring.


899
00:26:06,356 --> 00:26:10,216
Then whenever you want to return


900
00:26:10,216 --> 00:26:12,466
something different, call


901
00:26:12,676 --> 00:26:14,766
setNeedsUpdateOfScreen Edges


902
00:26:14,806 --> 00:26:16,736
Deferring System Gestures.


903
00:26:17,386 --> 00:26:18,936
Let's have a look at what is


904
00:26:19,296 --> 00:26:21,486
this referral actually achieves.


905
00:26:24,346 --> 00:26:26,146
Now when the user starts off in


906
00:26:26,956 --> 00:26:28,346
the bottom, your gesture


907
00:26:28,346 --> 00:26:29,856
recognizers and responders get


908
00:26:29,856 --> 00:26:30,996
the touches immediately.


909
00:26:31,666 --> 00:26:33,806
At the same time, we show a


910
00:26:35,036 --> 00:26:36,116
tongue [phonetic], or a


911
00:26:36,556 --> 00:26:38,466
[inaudible] so the user can see


912
00:26:38,466 --> 00:26:39,646
that they can do more.


913
00:26:40,326 --> 00:26:41,876
Swiping up from the bottom a


914
00:26:41,936 --> 00:26:43,646
second time, then brings up the


915
00:26:43,646 --> 00:26:43,966
dock.


916
00:26:51,306 --> 00:26:53,356
One more method if you're


917
00:26:53,356 --> 00:26:54,966
writing it all in container view


918
00:26:54,966 --> 00:26:55,476
controller.


919
00:26:56,246 --> 00:26:57,236
Most of the time this


920
00:26:57,236 --> 00:26:58,456
[inaudible] for container view


921
00:26:58,456 --> 00:26:59,656
controller is actually in the


922
00:26:59,656 --> 00:27:00,536
child view controller.


923
00:27:00,626 --> 00:27:02,726
So you'll want to return the


924
00:27:02,726 --> 00:27:04,486
right one in your override of


925
00:27:04,806 --> 00:27:06,746
childViewController For Screen


926
00:27:06,746 --> 00:27:08,296
EdgesDeferring System Gestures


927
00:27:08,896 --> 00:27:10,686
which, I think, is like the new


928
00:27:10,686 --> 00:27:12,016
candidate for the longest method


929
00:27:12,016 --> 00:27:12,846
name in iOS.


930
00:27:13,526 --> 00:27:16,066
Now that you have all this power


931
00:27:16,066 --> 00:27:18,376
at your fingertips, when should


932
00:27:18,376 --> 00:27:19,666
you use it?


933
00:27:20,276 --> 00:27:23,966
The short answer is don't do it.


934
00:27:24,676 --> 00:27:26,476
Well why am I here, right?


935
00:27:26,866 --> 00:27:28,626
The long answer, though, think


936
00:27:28,626 --> 00:27:30,946
hard and long about when to use


937
00:27:30,946 --> 00:27:32,686
it and why is that?


938
00:27:33,276 --> 00:27:35,016
Well number one, your user is


939
00:27:35,016 --> 00:27:36,326
familiar with swiping up to get


940
00:27:36,326 --> 00:27:37,886
the dock and other system


941
00:27:37,886 --> 00:27:38,426
gestures.


942
00:27:38,426 --> 00:27:40,516
So using this API actually


943
00:27:40,516 --> 00:27:41,496
breaks the intuition.


944
00:27:41,646 --> 00:27:43,476
It breaks the expectation of


945
00:27:43,476 --> 00:27:44,316
what actually happens.


946
00:27:45,316 --> 00:27:47,466
Also if you're using tap, pinch,


947
00:27:47,506 --> 00:27:49,626
rotate, and long press gesture


948
00:27:49,626 --> 00:27:51,356
recognizers as we talked about


949
00:27:51,356 --> 00:27:52,816
before, you're going to get


950
00:27:52,816 --> 00:27:54,146
these touches first anyway


951
00:27:54,146 --> 00:27:55,826
without even touching an API.


952
00:27:56,676 --> 00:28:00,476
Third we reserve the right to


953
00:28:00,476 --> 00:28:02,466
ignore or modify the suggested


954
00:28:02,466 --> 00:28:03,566
edges for deferring.


955
00:28:04,566 --> 00:28:05,776
So don't rely on the system


956
00:28:05,776 --> 00:28:07,616
doing exactly what you asked it


957
00:28:08,146 --> 00:28:08,996
to do.


958
00:28:09,226 --> 00:28:12,666
And finally this API is for when


959
00:28:12,666 --> 00:28:14,056
you really expect the user's


960
00:28:14,116 --> 00:28:16,166
full attention interacting the


961
00:28:16,166 --> 00:28:18,046
whole screen for long periods.


962
00:28:18,346 --> 00:28:20,316
For example, if you're writing a


963
00:28:20,316 --> 00:28:22,716
game or drawing apps ask


964
00:28:22,716 --> 00:28:24,876
yourself, is your app really


965
00:28:24,946 --> 00:28:26,306
that immersive enough to use


966
00:28:26,306 --> 00:28:26,806
this API?


967
00:28:28,296 --> 00:28:29,746
So on that note, I'd like to


968
00:28:29,746 --> 00:28:31,936
hand you over to my colleague,


969
00:28:32,026 --> 00:28:34,526
Mike Turner, who will talk to


970
00:28:34,526 --> 00:28:36,326
you about how to work with drag


971
00:28:37,076 --> 00:28:37,566
and drop.


972
00:28:37,666 --> 00:28:37,976
Mikey?


973
00:28:38,516 --> 00:28:43,500
[ Clapping ]


974
00:28:46,416 --> 00:28:47,406
Thanks Glow.


975
00:28:50,676 --> 00:28:53,306
So as you've seen with iOS 11,


976
00:28:53,306 --> 00:28:54,206
we have a lot of great new


977
00:28:54,206 --> 00:28:55,626
features and near the top of


978
00:28:55,626 --> 00:28:57,066
that list is drag and drop.


979
00:28:57,476 --> 00:28:59,126
And with drag and drop, the


980
00:28:59,326 --> 00:29:01,696
users have an opportunity to


981
00:29:01,696 --> 00:29:03,006
interact with your application


982
00:29:03,006 --> 00:29:04,266
in exciting new ways.


983
00:29:04,846 --> 00:29:06,596
But there is some things you'll


984
00:29:06,596 --> 00:29:09,016
need to know about how to best


985
00:29:09,016 --> 00:29:10,686
interact with drag and drop with


986
00:29:10,686 --> 00:29:11,646
some of the existing gesture


987
00:29:11,646 --> 00:29:12,856
recognizers in your application.


988
00:29:13,186 --> 00:29:14,086
So I'd like to start with a


989
00:29:14,086 --> 00:29:15,486
brief example of showing you how


990
00:29:15,486 --> 00:29:18,276
you can make a view implement


991
00:29:18,276 --> 00:29:19,876
drag and then what happens to


992
00:29:19,876 --> 00:29:20,586
your existing gesture


993
00:29:20,586 --> 00:29:21,686
recognizers when you do so.


994
00:29:22,356 --> 00:29:24,106
So in iOS 11, we added a new


995
00:29:24,106 --> 00:29:25,876
class called UIDragInteraction.


996
00:29:26,496 --> 00:29:28,136
UIDragInteraction is really


997
00:29:28,236 --> 00:29:29,296
super simple to use.


998
00:29:29,296 --> 00:29:30,216
It's very familiar.


999
00:29:30,486 --> 00:29:31,386
Similar to the pattern of


1000
00:29:31,386 --> 00:29:33,006
gesture recognizer or adding a


1001
00:29:33,006 --> 00:29:34,766
subview to a view and you just


1002
00:29:34,766 --> 00:29:35,896
initialize one of these with a


1003
00:29:35,896 --> 00:29:37,316
delegate of your choice and you


1004
00:29:37,316 --> 00:29:38,666
call add interaction on a view.


1005
00:29:38,666 --> 00:29:39,966
And that's pretty much all you


1006
00:29:39,966 --> 00:29:40,416
got to do.


1007
00:29:40,416 --> 00:29:41,136
You got to implement one


1008
00:29:41,136 --> 00:29:42,696
delegate API and you have drag.


1009
00:29:43,236 --> 00:29:43,756
Really simple.


1010
00:29:44,056 --> 00:29:46,236
So let's look at a quick


1011
00:29:46,236 --> 00:29:47,546
demonstration of what a view


1012
00:29:47,546 --> 00:29:49,316
looks like when you add a drag


1013
00:29:49,316 --> 00:29:50,066
interaction to it.


1014
00:29:50,326 --> 00:29:51,496
And here we're going to long


1015
00:29:51,496 --> 00:29:52,826
press on the view and then move


1016
00:29:52,826 --> 00:29:53,506
a little bit.


1017
00:29:54,656 --> 00:29:56,046
So when you long press, the view


1018
00:29:56,046 --> 00:29:57,356
lifts up off the screen.


1019
00:29:57,356 --> 00:29:58,616
When you move, it kind of tears


1020
00:29:58,616 --> 00:29:59,656
out of your application.


1021
00:30:00,656 --> 00:30:01,916
So let's see how drag


1022
00:30:01,916 --> 00:30:03,076
interaction accomplished this


1023
00:30:03,136 --> 00:30:03,976
behavior in your app.


1024
00:30:05,146 --> 00:30:05,986
So when we added the drag


1025
00:30:05,986 --> 00:30:07,116
interaction, it gets added to a


1026
00:30:07,116 --> 00:30:08,676
new interactions array on


1027
00:30:08,676 --> 00:30:09,126
UIView.


1028
00:30:09,686 --> 00:30:10,996
And the drag interaction, in


1029
00:30:10,996 --> 00:30:12,136
turn, creates some gesture


1030
00:30:12,136 --> 00:30:13,536
recognizers on its behalf.


1031
00:30:13,946 --> 00:30:15,176
Attaches them to your view and


1032
00:30:15,176 --> 00:30:16,216
becomes the delegate of those


1033
00:30:16,216 --> 00:30:17,066
gesture recognizers.


1034
00:30:17,206 --> 00:30:18,326
And it creates gesture


1035
00:30:18,326 --> 00:30:19,766
recognizers for initiating the


1036
00:30:19,766 --> 00:30:21,446
drag, managing relationships


1037
00:30:21,446 --> 00:30:23,526
with other gesture recognizers,


1038
00:30:23,526 --> 00:30:25,196
and adding additional items to


1039
00:30:25,196 --> 00:30:26,276
an existing drag in the


1040
00:30:26,276 --> 00:30:26,816
application.


1041
00:30:27,426 --> 00:30:30,416
So to make this example a little


1042
00:30:30,416 --> 00:30:32,806
bit more concrete, let's add our


1043
00:30:32,806 --> 00:30:34,526
own UILongPressGestureRecognizer


1044
00:30:34,526 --> 00:30:35,866
to the view and we'll wire that


1045
00:30:35,866 --> 00:30:38,346
up to an action that will pop an


1046
00:30:38,526 --> 00:30:40,016
activity view controller up for


1047
00:30:40,016 --> 00:30:40,726
this image.


1048
00:30:41,296 --> 00:30:43,056
So here when we get the gesture


1049
00:30:43,056 --> 00:30:44,286
recognizer state began, we're


1050
00:30:44,286 --> 00:30:45,406
going to present an activity


1051
00:30:45,406 --> 00:30:47,046
view controller and we get the


1052
00:30:47,046 --> 00:30:48,276
gesture recognizer state cancel,


1053
00:30:48,276 --> 00:30:49,346
we're going to dismiss that


1054
00:30:49,346 --> 00:30:50,316
activity view controller.


1055
00:30:51,686 --> 00:30:52,506
So let's look at that same


1056
00:30:52,506 --> 00:30:53,916
example again where we long


1057
00:30:53,916 --> 00:30:55,716
press on the view and move.


1058
00:30:56,146 --> 00:30:57,306
Now that we have our own


1059
00:30:57,306 --> 00:30:58,736
UILongPressGestureRecognizer


1060
00:30:58,736 --> 00:30:59,246
alongside.


1061
00:31:00,626 --> 00:31:02,946
So here we long press and move.


1062
00:31:03,956 --> 00:31:05,176
And I didn't see any activity


1063
00:31:05,176 --> 00:31:05,886
view controller there.


1064
00:31:07,146 --> 00:31:08,256
And that's because your long


1065
00:31:08,256 --> 00:31:09,446
press gesture recognizers are


1066
00:31:09,446 --> 00:31:11,006
now delayed when they're


1067
00:31:11,006 --> 00:31:12,866
alongside a UI drag interaction.


1068
00:31:14,106 --> 00:31:15,356
So let's adjust our user


1069
00:31:15,356 --> 00:31:16,426
interaction a little bit here to


1070
00:31:16,496 --> 00:31:17,516
see if we can get the activity


1071
00:31:17,516 --> 00:31:18,526
view controller to show up.


1072
00:31:19,006 --> 00:31:20,326
This time we'll long press and


1073
00:31:20,326 --> 00:31:22,086
we'll hold for just a little bit


1074
00:31:22,186 --> 00:31:23,606
and then we'll move.


1075
00:31:24,516 --> 00:31:26,986
So here we long press, hold, and


1076
00:31:26,986 --> 00:31:27,366
then move.


1077
00:31:27,806 --> 00:31:29,076
So here we saw the activity view


1078
00:31:29,076 --> 00:31:30,866
controller briefly and then it


1079
00:31:30,866 --> 00:31:31,666
was dismissed.


1080
00:31:32,286 --> 00:31:34,696
And that's because a beginning


1081
00:31:34,696 --> 00:31:36,366
drag will cancel the touch you


1082
00:31:36,366 --> 00:31:37,696
used to begin that drag in your


1083
00:31:37,696 --> 00:31:38,246
application.


1084
00:31:38,706 --> 00:31:39,966
So we'll send touches cancelled


1085
00:31:40,026 --> 00:31:41,136
for that touch to the app.


1086
00:31:41,456 --> 00:31:42,576
The app will then send it to its


1087
00:31:42,606 --> 00:31:43,466
gesture recognizers and


1088
00:31:43,466 --> 00:31:44,146
responders.


1089
00:31:44,466 --> 00:31:45,476
The gesture recognizer will then


1090
00:31:45,476 --> 00:31:47,306
send the cancelled state to its


1091
00:31:47,306 --> 00:31:49,366
action and thus dismissing that


1092
00:31:49,366 --> 00:31:50,326
activity view controller.


1093
00:31:52,016 --> 00:31:53,776
So in a compact trait


1094
00:31:53,776 --> 00:31:56,036
environment, adaptivity will


1095
00:31:56,356 --> 00:31:57,466
take that presentation of the


1096
00:31:57,466 --> 00:31:58,606
activity view controller and


1097
00:31:58,606 --> 00:32:00,006
it'll turn into an action sheet.


1098
00:32:00,576 --> 00:32:01,786
So let's see what happens in


1099
00:32:01,786 --> 00:32:02,446
that case.


1100
00:32:03,136 --> 00:32:03,986
So we'll long press.


1101
00:32:04,306 --> 00:32:06,636
Hold for a bit and then move in


1102
00:32:06,636 --> 00:32:07,706
a compact trait environment.


1103
00:32:08,956 --> 00:32:09,996
Here we long press.


1104
00:32:10,596 --> 00:32:11,216
Hold and move.


1105
00:32:11,996 --> 00:32:13,366
No activity view controller


1106
00:32:13,366 --> 00:32:13,616
again.


1107
00:32:14,466 --> 00:32:16,296
So let's see what happens here.


1108
00:32:16,566 --> 00:32:17,646
Your long presses are being


1109
00:32:17,646 --> 00:32:19,426
delayed until the touch ends in


1110
00:32:19,426 --> 00:32:20,866
this case because in a compact


1111
00:32:20,866 --> 00:32:22,686
trait environment, most of the


1112
00:32:22,746 --> 00:32:24,306
presentations turn into modal


1113
00:32:24,306 --> 00:32:26,096
presentation styles or action


1114
00:32:26,096 --> 00:32:27,756
sheets that would cover the


1115
00:32:27,756 --> 00:32:29,056
impending drag and that's not a


1116
00:32:29,056 --> 00:32:30,196
great user experience.


1117
00:32:31,236 --> 00:32:32,486
So let's look at how we can


1118
00:32:32,486 --> 00:32:33,956
adjust our user interaction here


1119
00:32:34,306 --> 00:32:35,376
to get that activity view


1120
00:32:35,376 --> 00:32:35,786
controller.


1121
00:32:35,986 --> 00:32:37,936
So we'll long press and lift.


1122
00:32:39,326 --> 00:32:41,596
So we long press and then lift


1123
00:32:41,596 --> 00:32:42,046
the touch.


1124
00:32:42,046 --> 00:32:43,086
And there you have it.


1125
00:32:43,346 --> 00:32:44,986
Your action sheet is up with the


1126
00:32:44,986 --> 00:32:45,956
activity view controller.


1127
00:32:47,556 --> 00:32:49,626
So UIDragInteraction also has


1128
00:32:49,746 --> 00:32:51,486
some built in ability to add


1129
00:32:51,756 --> 00:32:53,386
additional items to a drag and


1130
00:32:53,386 --> 00:32:55,416
as I said, it creates another


1131
00:32:55,416 --> 00:32:57,736
gesture recognizer to perform


1132
00:32:57,736 --> 00:32:58,306
this ability.


1133
00:32:59,276 --> 00:33:00,546
So here, this is a quick


1134
00:33:00,546 --> 00:33:01,096
demonstration.


1135
00:33:01,096 --> 00:33:02,766
We had a long press and move.


1136
00:33:02,766 --> 00:33:04,736
And then we can tap again on the


1137
00:33:04,736 --> 00:33:06,326
view to add additional items.


1138
00:33:07,246 --> 00:33:09,216
And it handles that tap for you


1139
00:33:09,466 --> 00:33:10,386
but you do have a way of


1140
00:33:10,386 --> 00:33:11,376
influencing this.


1141
00:33:11,936 --> 00:33:13,336
First this is an optional


1142
00:33:13,336 --> 00:33:13,776
behavior.


1143
00:33:13,776 --> 00:33:15,686
So the delegate method, items


1144
00:33:15,686 --> 00:33:17,126
for adding to on the


1145
00:33:17,126 --> 00:33:18,726
UIDragInteraction is optional.


1146
00:33:18,796 --> 00:33:20,176
You don't implement, you won't


1147
00:33:20,176 --> 00:33:21,636
get the adding behavior but if


1148
00:33:21,636 --> 00:33:22,816
you do implement it, you can


1149
00:33:22,816 --> 00:33:24,636
conditionally return zero items


1150
00:33:24,636 --> 00:33:26,146
in this API to continue


1151
00:33:26,386 --> 00:33:27,786
processing this touch as you


1152
00:33:27,786 --> 00:33:29,586
normally would in your app.


1153
00:33:31,256 --> 00:33:33,036
So it's really quite simple to


1154
00:33:33,036 --> 00:33:34,406
adapt your application when


1155
00:33:34,406 --> 00:33:35,786
you're using UIDragInteraction.


1156
00:33:36,046 --> 00:33:37,586
It's pretty much hands off but


1157
00:33:37,586 --> 00:33:39,996
you need a few basic concepts to


1158
00:33:40,256 --> 00:33:41,246
get you the rest of the way.


1159
00:33:41,246 --> 00:33:42,916
And the first thing you do is


1160
00:33:42,916 --> 00:33:44,276
just examine your existing


1161
00:33:44,276 --> 00:33:44,906
actions.


1162
00:33:45,176 --> 00:33:46,526
Do they make sense alongside


1163
00:33:46,526 --> 00:33:47,526
UIDragInteraction?


1164
00:33:47,866 --> 00:33:49,586
In some cases, UIDragInteraction


1165
00:33:49,586 --> 00:33:50,666
might replace some of that


1166
00:33:50,666 --> 00:33:52,216
existing functionality that you


1167
00:33:52,216 --> 00:33:53,466
had from a UILongPress.


1168
00:33:54,486 --> 00:33:55,886
And you need to be careful


1169
00:33:55,886 --> 00:33:57,396
presenting modal UI when you


1170
00:33:57,396 --> 00:33:59,276
have a long press -- excuse me,


1171
00:33:59,276 --> 00:33:59,606
when you have a


1172
00:33:59,606 --> 00:34:00,526
UIDragInteraction.


1173
00:34:00,856 --> 00:34:03,376
And that's because in a standard


1174
00:34:03,376 --> 00:34:05,396
trait environment, it's going to


1175
00:34:05,396 --> 00:34:06,826
be delayed and it might end be


1176
00:34:06,826 --> 00:34:08,235
presenting over top of the drag


1177
00:34:08,516 --> 00:34:09,286
and you need to take the


1178
00:34:09,286 --> 00:34:10,275
appropriate action here.


1179
00:34:11,286 --> 00:34:12,646
And then you need to handle the


1180
00:34:12,646 --> 00:34:14,085
cancelled state in your


1181
00:34:14,085 --> 00:34:14,996
UIGestureRecognizers.


1182
00:34:15,416 --> 00:34:16,815
As you see when the drag begins,


1183
00:34:16,815 --> 00:34:17,916
we send touch is cancelled.


1184
00:34:18,016 --> 00:34:19,246
So if you're not handling the


1185
00:34:19,246 --> 00:34:20,466
cancelled state in your gesture


1186
00:34:20,466 --> 00:34:21,926
recognizer you won't have the


1187
00:34:21,926 --> 00:34:23,005
opportunity to take the


1188
00:34:23,005 --> 00:34:24,485
appropriate action in our


1189
00:34:24,485 --> 00:34:25,956
example that was dismissing the


1190
00:34:25,956 --> 00:34:26,966
activity view controller.


1191
00:34:27,626 --> 00:34:29,085
And you need to remember one


1192
00:34:29,085 --> 00:34:31,525
really important but super cool


1193
00:34:31,525 --> 00:34:33,315
part of UIDragInteraction and


1194
00:34:33,315 --> 00:34:34,706
that's your app is fully


1195
00:34:34,706 --> 00:34:35,906
interactive during a drag.


1196
00:34:36,606 --> 00:34:38,166
So you might have some


1197
00:34:38,206 --> 00:34:39,545
interaction that you wouldn't


1198
00:34:39,545 --> 00:34:39,946
expect.


1199
00:34:39,946 --> 00:34:41,846
So you've been warned on that.


1200
00:34:43,856 --> 00:34:45,985
So Dom came up here and told us


1201
00:34:45,985 --> 00:34:48,025
about how you can best leverage


1202
00:34:48,076 --> 00:34:50,786
the gesture recognizer system to


1203
00:34:50,786 --> 00:34:52,386
get the setup that you want and


1204
00:34:52,386 --> 00:34:53,456
how you can use failure


1205
00:34:53,456 --> 00:34:55,946
requirements and exclusion to


1206
00:34:55,946 --> 00:34:57,065
influence how gesture


1207
00:34:57,065 --> 00:34:58,336
recognizers fire with each


1208
00:34:58,336 --> 00:34:58,526
other.


1209
00:34:59,436 --> 00:35:01,276
And he made the important point


1210
00:35:01,276 --> 00:35:02,706
of the gesture recognizers come


1211
00:35:02,776 --> 00:35:03,126
first.


1212
00:35:03,936 --> 00:35:05,816
So when we send touches through


1213
00:35:05,816 --> 00:35:06,836
application the gesture


1214
00:35:06,836 --> 00:35:08,766
recognizers can block your


1215
00:35:08,766 --> 00:35:10,156
responder based touch handling.


1216
00:35:10,366 --> 00:35:11,516
So you should always attempt to


1217
00:35:11,516 --> 00:35:12,806
use gesture recognizers when at


1218
00:35:12,806 --> 00:35:14,276
all possible to get the best


1219
00:35:14,276 --> 00:35:14,786
results.


1220
00:35:15,436 --> 00:35:19,006
And Glen told us how we can use


1221
00:35:19,006 --> 00:35:20,786
the new system gesture deferring


1222
00:35:20,786 --> 00:35:24,116
APIs to give preference to the


1223
00:35:24,116 --> 00:35:25,466
gesture recognizers within our


1224
00:35:25,466 --> 00:35:27,366
application when swiping from


1225
00:35:27,366 --> 00:35:27,936
the edges.


1226
00:35:28,346 --> 00:35:29,486
And you should use these very


1227
00:35:29,486 --> 00:35:30,806
sparingly, you know, in full


1228
00:35:30,806 --> 00:35:31,876
screen situations.


1229
00:35:32,186 --> 00:35:33,126
Things where your users are


1230
00:35:33,126 --> 00:35:34,846
going to expect interaction in


1231
00:35:34,846 --> 00:35:36,216
your app and not the system


1232
00:35:36,216 --> 00:35:36,696
behavior.


1233
00:35:37,066 --> 00:35:37,986
So very sparingly.


1234
00:35:38,806 --> 00:35:40,646
And finally, we had a brief talk


1235
00:35:40,646 --> 00:35:42,436
about how you can adapt your app


1236
00:35:42,916 --> 00:35:44,686
to use UIDragInteraction and


1237
00:35:44,686 --> 00:35:45,526
it's really quite simple.


1238
00:35:46,456 --> 00:35:47,496
So I hope you add


1239
00:35:47,496 --> 00:35:49,056
UIDragInteraction to most of


1240
00:35:49,056 --> 00:35:49,576
your views.


1241
00:35:50,986 --> 00:35:52,656
And for more information, you


1242
00:35:52,986 --> 00:35:54,776
can see the video in replay on


1243
00:35:54,776 --> 00:35:55,676
the following website.


1244
00:35:56,086 --> 00:35:57,856
We have some great past sessions


1245
00:35:57,856 --> 00:35:59,126
that go in-depth on handling


1246
00:35:59,126 --> 00:36:00,296
events in UIkit.


1247
00:36:00,426 --> 00:36:01,296
If you haven't seen them, I


1248
00:36:01,336 --> 00:36:02,396
highly would recommend those.


1249
00:36:03,276 --> 00:36:05,416
And we have some other sessions


1250
00:36:05,416 --> 00:36:06,736
related to drag and drop and


1251
00:36:06,736 --> 00:36:08,466
animations that you should check


1252
00:36:08,466 --> 00:36:09,976
out, and have a great WWDC.


1253
00:36:10,516 --> 00:36:15,500
[ Applause ]

