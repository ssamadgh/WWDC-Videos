1
00:00:07,516 --> 00:00:17,500
[ Music ]


2
00:00:20,516 --> 00:00:20,976
>> Good morning.


3
00:00:21,516 --> 00:00:23,566
[ Applause ]


4
00:00:24,066 --> 00:00:24,846
Good morning.


5
00:00:25,146 --> 00:00:27,146
[ Applause ]


6
00:00:27,446 --> 00:00:28,636
Thank you so much everybody.


7
00:00:28,856 --> 00:00:29,906
My name is Matt Patenaude.


8
00:00:29,906 --> 00:00:32,136
I'm a software engineer
on the Playgrounds Team.


9
00:00:32,136 --> 00:00:36,126
And welcome to Session 408,
Introducing Swift Playgrounds.


10
00:00:36,186 --> 00:00:40,776
I am absolutely thrilled to be
a part of the team that gets


11
00:00:40,776 --> 00:00:41,856
to show this to you today,


12
00:00:41,856 --> 00:00:44,256
and boy have we got
a lot to show you.


13
00:00:44,566 --> 00:00:46,766
So with that in mind, we
are going to dive right in.


14
00:00:47,646 --> 00:00:51,036
So you've had 48 hours
to play with this by now,


15
00:00:51,036 --> 00:00:52,886
so I'm sure a lot of you
have already seen this.


16
00:00:53,176 --> 00:00:54,936
But if some of you
have somehow managed


17
00:00:54,936 --> 00:00:56,156
to resist the temptation,


18
00:00:56,376 --> 00:01:00,246
Swift Playgrounds is a really
exciting new app for iPad


19
00:01:00,616 --> 00:01:03,996
that allows you to program
in Swift and brings the power


20
00:01:04,075 --> 00:01:06,666
of Swift literally to
the tips of your fingers.


21
00:01:07,626 --> 00:01:09,506
If you aren't that
experienced with programming,


22
00:01:10,186 --> 00:01:10,926
we've got you covered.


23
00:01:11,316 --> 00:01:14,336
We've built a great
learn to code playground


24
00:01:14,676 --> 00:01:16,276
that you can download
right from within the app,


25
00:01:16,826 --> 00:01:20,186
and we've designed it to
be engaging and exciting,


26
00:01:20,496 --> 00:01:22,426
regardless of what level
you're starting at.


27
00:01:22,726 --> 00:01:25,136
And if nothing else, you can
probably get some pretty good


28
00:01:25,136 --> 00:01:30,326
dance moves out of it.


29
00:01:30,326 --> 00:01:32,336
If you are a little
bit more experienced,


30
00:01:32,336 --> 00:01:34,346
we've also given you some
great starting points,


31
00:01:34,376 --> 00:01:37,466
like this shapes template,
which will let you experiment


32
00:01:37,466 --> 00:01:41,296
with things like color and touch
in ways that are unique to iPad


33
00:01:41,296 --> 00:01:42,926
that you couldn't
do anywhere else.


34
00:01:43,366 --> 00:01:46,166
And if you're already used to
building playgrounds in Xcode,


35
00:01:46,496 --> 00:01:48,296
you can take any of
your iOS playgrounds,


36
00:01:48,556 --> 00:01:52,436
and once you update them for
Swift 3, they'll run great


37
00:01:52,436 --> 00:01:54,036
on Swift Playgrounds
and iPad as well.


38
00:01:54,866 --> 00:01:56,436
We think it's a really
exciting product,


39
00:01:56,616 --> 00:01:57,356
and we know you're going


40
00:01:57,356 --> 00:01:59,006
to do some really
amazing things with it.


41
00:01:59,386 --> 00:02:01,316
And as such, we got
a lot to show you.


42
00:02:01,316 --> 00:02:02,586
So we're going to break our talk


43
00:02:02,866 --> 00:02:05,396
into three different
segments today.


44
00:02:06,206 --> 00:02:08,735
First, I'm going to ask my
colleague Max to join me


45
00:02:08,735 --> 00:02:11,706
on stage, and he's going to
show you how to use the app,


46
00:02:11,706 --> 00:02:14,316
including all of the great
touch affordances and gestures


47
00:02:14,546 --> 00:02:17,046
that really make this a
unique experience for iPad.


48
00:02:17,356 --> 00:02:19,856
After that, Jonathan's going
to come up, and he's going


49
00:02:19,856 --> 00:02:22,416
to show you how to build
really engaging content


50
00:02:22,596 --> 00:02:24,786
for Swift Playgrounds, using
all of the new features


51
00:02:24,786 --> 00:02:25,916
of our new document format.


52
00:02:26,446 --> 00:02:28,296
And finally, Izzy's going
to come up, and he's going


53
00:02:28,296 --> 00:02:30,246
to show you some of
the really cool things


54
00:02:30,246 --> 00:02:32,146
that you can do once you've had
a little bit of time to play


55
00:02:32,146 --> 00:02:32,896
around with this thing.


56
00:02:33,286 --> 00:02:35,936
So without further ado, Max.


57
00:02:36,516 --> 00:02:40,356
[ Applause ]


58
00:02:40,856 --> 00:02:41,256
>> Thanks Matt.


59
00:02:42,876 --> 00:02:44,556
Thanks Matt.


60
00:02:44,656 --> 00:02:47,826
So we're going to start off by
having a look at a screenshot


61
00:02:47,826 --> 00:02:50,076
of Swift Playgrounds,
so we can see what all


62
00:02:50,076 --> 00:02:51,636
of the different parts
of the UI are made of.


63
00:02:51,856 --> 00:02:56,216
So up at the left, the
left side of the screen,


64
00:02:56,216 --> 00:02:57,176
we've got the source editor.


65
00:02:57,176 --> 00:02:58,406
On the right, we've
got the live view.


66
00:02:58,966 --> 00:03:00,826
Now the source editor is
made up of a whole bunch


67
00:03:00,826 --> 00:03:01,736
of different sections.


68
00:03:02,036 --> 00:03:06,286
So one type of section
is the Playground markup,


69
00:03:06,526 --> 00:03:09,006
and you'll see that we've
got rich markup in here.


70
00:03:09,006 --> 00:03:11,966
This can be interspersed
inside of the single page,


71
00:03:12,406 --> 00:03:14,456
and this is the rich text


72
00:03:14,456 --> 00:03:16,226
to help you learn
something about the document.


73
00:03:16,826 --> 00:03:19,066
Underneath, we've got an
example of some source code.


74
00:03:19,586 --> 00:03:22,686
So here, this is where you'll
do all your programming.


75
00:03:23,446 --> 00:03:26,246
Along the bottom of the screen,
we have the shortcuts bar.


76
00:03:26,956 --> 00:03:28,956
In the center of that,
we show code completion,


77
00:03:29,436 --> 00:03:31,616
and this depending on
the code's position.


78
00:03:32,036 --> 00:03:35,026
On the left, we have the
Undo and Redo buttons,


79
00:03:35,326 --> 00:03:38,316
and on the right we have the
two -- a couple of shortcuts.


80
00:03:38,676 --> 00:03:39,966
One is to delete something.


81
00:03:40,506 --> 00:03:42,336
The next is to insert
a new line.


82
00:03:42,476 --> 00:03:43,886
And the third is to
bring up the keyboard.


83
00:03:44,576 --> 00:03:48,996
These buttons will help
you if you want to program


84
00:03:48,996 --> 00:03:50,236
without needing the keyboard.


85
00:03:50,946 --> 00:03:53,486
Along the right side,
you have the live view.


86
00:03:54,236 --> 00:03:56,236
This is where you can see
your code being executed


87
00:03:56,236 --> 00:04:00,666
in real time, and underneath
that, the Run My Code button,


88
00:04:02,106 --> 00:04:03,646
which will compile
and execute your code.


89
00:04:04,716 --> 00:04:08,646
Along the top left, we have
the Document button to go back


90
00:04:08,646 --> 00:04:11,786
to your documents, the button to
bring up the table of contents


91
00:04:11,856 --> 00:04:14,586
that shows you all of
the different chapters


92
00:04:14,586 --> 00:04:15,896
and pages inside
of your document.


93
00:04:16,796 --> 00:04:21,196
We have the two buttons for page
navigation, and on the right


94
00:04:21,196 --> 00:04:25,546
of that, the Tools menu, and the
Library menu and the Tools menu.


95
00:04:26,296 --> 00:04:27,696
But let's have a look
at them in detail.


96
00:04:29,256 --> 00:04:32,766
Inside of the Library menu,
we've got a couple of snippets.


97
00:04:33,576 --> 00:04:37,346
Next to that, we have
all the image literals


98
00:04:37,346 --> 00:04:39,446
that could be inside of your
playground or your document.


99
00:04:40,136 --> 00:04:44,586
And thirdly, we have file
literals, which is all the files


100
00:04:44,586 --> 00:04:47,736
that you can drag out of the
library into your document.


101
00:04:49,046 --> 00:04:51,346
And in the Tools menu, this
is where you can find help


102
00:04:51,546 --> 00:04:53,826
about the app, a
glossary of terms provided


103
00:04:53,826 --> 00:04:57,326
with the document, two
buttons to share something


104
00:04:57,326 --> 00:04:59,586
about your document,
such as Record a Movie,


105
00:04:59,646 --> 00:05:02,736
which takes movie of what you're
doing, and the Take Picture,


106
00:05:02,946 --> 00:05:05,346
which will save a
picture of the live view.


107
00:05:05,746 --> 00:05:08,446
And finally, the Reset Page
button will reset the page


108
00:05:08,446 --> 00:05:09,656
to the original state.


109
00:05:10,386 --> 00:05:14,686
So here we are in the document
browser, and as you can see,


110
00:05:14,686 --> 00:05:16,106
got a whole bunch of documents.


111
00:05:16,436 --> 00:05:19,516
I'm going to open up the
Shapes Playground template


112
00:05:19,516 --> 00:05:20,346
that I've got here.


113
00:05:21,296 --> 00:05:23,516
So I've only got one
line of code here,


114
00:05:23,886 --> 00:05:25,386
Let rectangle equals value.


115
00:05:25,976 --> 00:05:28,266
I want to draw some
rectangles in the live view,


116
00:05:28,516 --> 00:05:29,426
because I think that'll be fun.


117
00:05:29,916 --> 00:05:33,876
So I'm going to tap on Value,
and you'll see that we bring


118
00:05:33,876 --> 00:05:35,176
up code completion
along the bottom.


119
00:05:35,176 --> 00:05:36,866
Got a whole bunch of
different options here.


120
00:05:37,546 --> 00:05:42,246
So I'm going to find a rectangle
in code completion by tapping


121
00:05:42,276 --> 00:05:44,736
and dragging to the left to
go through code completion.


122
00:05:44,956 --> 00:05:45,726
So there's a rectangle.


123
00:05:46,516 --> 00:05:47,026
Tap on that.


124
00:05:47,026 --> 00:05:48,776
It gets inserted
into the document.


125
00:05:49,516 --> 00:05:51,836
Now notice, there's
an orange circle


126
00:05:51,966 --> 00:05:52,996
in the left side of the screen.


127
00:05:53,366 --> 00:05:55,526
So that's a live issue
about this line of code.


128
00:05:56,156 --> 00:05:57,196
We're going to tap on that.


129
00:05:57,636 --> 00:05:59,136
It tells me there's
something wrong with this.


130
00:05:59,576 --> 00:06:01,606
I needed to add parens
after rectangle.


131
00:06:02,036 --> 00:06:03,446
So here we provide fix-its.


132
00:06:03,446 --> 00:06:04,886
You can tap on the first one,


133
00:06:05,046 --> 00:06:06,886
and then that will get
inserted into the document.


134
00:06:07,296 --> 00:06:08,356
The orange circle goes away.


135
00:06:09,226 --> 00:06:13,476
Now tap on my code, and we
can see I drew a rectangle.


136
00:06:14,126 --> 00:06:16,546
It's a square, but.


137
00:06:18,416 --> 00:06:20,156
Now notice when we move down,


138
00:06:20,666 --> 00:06:22,466
we've now got Rectangle
in code completion.


139
00:06:22,906 --> 00:06:25,336
So I'm going to tap on
that, and tap on the dot,


140
00:06:25,336 --> 00:06:27,206
and now it's going to list
all the different properties


141
00:06:27,206 --> 00:06:28,926
and functions that I
can use on Rectangle.


142
00:06:29,686 --> 00:06:32,756
Let's make this a
bit easier to see


143
00:06:32,976 --> 00:06:35,186
by changing the border's
color and the width.


144
00:06:35,566 --> 00:06:37,176
So let's start out by
tapping Border Color.


145
00:06:37,806 --> 00:06:38,936
We get an equal operator.


146
00:06:38,936 --> 00:06:39,946
Tap on that.


147
00:06:40,486 --> 00:06:43,226
And we get a placeholder
that's of a type of color.


148
00:06:43,226 --> 00:06:45,386
Now notice the second item


149
00:06:45,386 --> 00:06:47,626
in code completion
here is a gray square.


150
00:06:48,156 --> 00:06:51,586
That means that we can insert
a color literally in line.


151
00:06:51,656 --> 00:06:55,596
So I'm going to tap on that, and
we get a white color literal.


152
00:06:56,176 --> 00:06:57,466
Tapping on that brings


153
00:06:57,466 --> 00:06:59,666
up a quick editor
to change the value.


154
00:07:00,306 --> 00:07:01,816
There's a whole bunch
of quick editors inside


155
00:07:01,816 --> 00:07:03,976
of Swift Playgrounds, and
this is just the color one.


156
00:07:03,976 --> 00:07:05,946
So I'm going to change
it from white to black,


157
00:07:06,606 --> 00:07:08,106
and let's tap Run My Code.


158
00:07:08,746 --> 00:07:10,656
And now it's going
to a black border.


159
00:07:10,656 --> 00:07:12,286
It's not very visible,
so I'm going


160
00:07:12,286 --> 00:07:14,226
to increase the border
width as well.


161
00:07:14,896 --> 00:07:16,346
Tap on Rectangle.


162
00:07:16,686 --> 00:07:17,796
Tap on dot.


163
00:07:18,286 --> 00:07:22,476
Tap on Border Width equals, and
now we've got a number literal,


164
00:07:22,856 --> 00:07:24,676
which also brings
up a quick editor,


165
00:07:24,956 --> 00:07:26,036
so we can punch in a number.


166
00:07:26,166 --> 00:07:27,816
Going to punch in four.


167
00:07:27,816 --> 00:07:30,726
Oops. And tap Run.


168
00:07:31,346 --> 00:07:33,616
And now it's a bit more seeable.


169
00:07:34,746 --> 00:07:37,556
Now I'm going to -- I want
to make a playground here


170
00:07:37,886 --> 00:07:41,116
that will draw a square
everywhere I drag my finger


171
00:07:41,116 --> 00:07:41,706
in the live view.


172
00:07:41,706 --> 00:07:43,896
So I'm going to do a bit
more programming here,


173
00:07:44,006 --> 00:07:45,796
and I want to hide
the live view,


174
00:07:45,906 --> 00:07:47,406
just to give me some
more space to work.


175
00:07:47,406 --> 00:07:49,726
So I'm going to tap and hold
on the center of the screen,


176
00:07:49,906 --> 00:07:51,626
and it's going to split
the screen into two.


177
00:07:51,876 --> 00:07:53,896
Now drag to the right to
dismiss the live view.


178
00:07:55,366 --> 00:07:57,776
Let's tap at the
source of the code.


179
00:07:58,686 --> 00:08:02,216
Now Swift Playgrounds also has a
great keyboard for when you want


180
00:08:02,216 --> 00:08:03,836
to do programming with
the onscreen keyboard.


181
00:08:04,146 --> 00:08:06,396
So I'll tap the Keyboard
Up button to bring that up.


182
00:08:07,276 --> 00:08:09,676
Notice the keys have
alternatives on top of them,


183
00:08:09,806 --> 00:08:10,546
but more on that later.


184
00:08:11,686 --> 00:08:14,976
Let's start by using the canvas
object that I know is inside


185
00:08:14,976 --> 00:08:17,606
of the shapes playground to
interact with the live view.


186
00:08:18,026 --> 00:08:19,296
So I'll type C-a-n.


187
00:08:19,756 --> 00:08:21,156
Gives us a canvas object.


188
00:08:21,716 --> 00:08:25,316
Type Shared to get
the shared canvas.


189
00:08:25,746 --> 00:08:27,056
And now I'll type Drag.


190
00:08:27,756 --> 00:08:31,456
Notice that Swift Playgrounds
fuzzily matches the untouched


191
00:08:31,456 --> 00:08:34,056
drag handler from
just typing Drag.


192
00:08:34,446 --> 00:08:38,236
So I'll tap on that, and we get
this placeholder for a function.


193
00:08:38,645 --> 00:08:41,145
If I type Return, it'll
expand the placeholder


194
00:08:41,395 --> 00:08:42,206
so we can do some coding.


195
00:08:43,296 --> 00:08:46,386
Now I want it to create a
rectangle every time I drag


196
00:08:46,386 --> 00:08:46,836
my finger.


197
00:08:47,566 --> 00:08:50,706
So all I have to do is what I
was doing before, every time.


198
00:08:51,286 --> 00:08:55,026
So let's tap on the closing
brace here, and tap on Hold,


199
00:08:55,026 --> 00:08:58,076
and drag it down to encompass
the code we were doing before.


200
00:08:59,806 --> 00:09:00,966
One more thing I
have to do though.


201
00:09:00,966 --> 00:09:02,456
I have to change the center


202
00:09:02,456 --> 00:09:04,276
of the rectangle to
be wherever I tap.


203
00:09:05,186 --> 00:09:07,036
So let's add that
line of code now


204
00:09:07,416 --> 00:09:11,346
by setting the rectangle's
center position to be equal


205
00:09:11,346 --> 00:09:15,816
to the canvas shared
current touch points,


206
00:09:16,326 --> 00:09:18,526
which I know is in array.


207
00:09:19,376 --> 00:09:22,096
If I tap and hold on the H,
and drag it to the right,


208
00:09:22,096 --> 00:09:23,696
it gives me an array's
subscript.


209
00:09:24,686 --> 00:09:27,486
Now I can tap and hold on the
P to get the zero element.


210
00:09:28,826 --> 00:09:31,506
Now let's dismiss that,
and bring in the live view,


211
00:09:32,236 --> 00:09:35,626
and tap Run My Code,
and we can draw.


212
00:09:36,996 --> 00:09:37,596
Yeah.


213
00:09:38,516 --> 00:09:44,546
[ Applause ]


214
00:09:45,046 --> 00:09:47,066
Now I'll tap and hold on
the center of this screen.


215
00:09:47,626 --> 00:09:48,306
Drag it to the left.


216
00:09:48,306 --> 00:09:48,976
Dismiss the code.


217
00:09:48,976 --> 00:09:50,416
Now I can draw everywhere.


218
00:09:52,106 --> 00:09:53,916
Now, I like my little
bit of art here,


219
00:09:53,916 --> 00:09:54,886
so I'm going to send it to Matt.


220
00:09:54,886 --> 00:09:57,556
So I'm going to tap
on the Tools menu.


221
00:09:57,786 --> 00:10:02,426
You just take a picture to
save a copy of the live view.


222
00:10:04,036 --> 00:10:05,686
Now, a lot was going on here,


223
00:10:06,616 --> 00:10:08,526
and there's a lot
behind the scenes


224
00:10:08,806 --> 00:10:10,036
to make a playground
work this way.


225
00:10:10,436 --> 00:10:11,846
So I'm going to bring
up Jonathan,


226
00:10:11,966 --> 00:10:16,386
who's going to show us
exactly what is inside of each


227
00:10:16,386 --> 00:10:21,546
of the playgrounds in
order to make them work.


228
00:10:22,406 --> 00:10:23,376
So, Jonathan.


229
00:10:24,516 --> 00:10:30,616
[ Applause ]


230
00:10:31,116 --> 00:10:33,656
>> Thank you Matt and Max.


231
00:10:33,836 --> 00:10:37,586
So Swift Playgrounds on iPad
lets you use the same Swift 3


232
00:10:37,586 --> 00:10:39,696
Playground documents that
you created on your Mac,


233
00:10:39,696 --> 00:10:41,446
and you can make
them on the iPad too.


234
00:10:42,136 --> 00:10:43,966
You can use AirDrop,
iCloud Drive,


235
00:10:44,126 --> 00:10:47,126
or other document providers
to transfer and work on them


236
00:10:47,126 --> 00:10:48,056
in either environment.


237
00:10:48,056 --> 00:10:49,156
And don't forget to have fun.


238
00:10:49,966 --> 00:10:50,716
But in addition


239
00:10:50,716 --> 00:10:52,866
to the traditional
Playground document format,


240
00:10:53,286 --> 00:10:56,366
Swift Playgrounds for iPad
introduces a new document format


241
00:10:56,366 --> 00:10:58,306
that takes advantage
of the new environment.


242
00:10:59,266 --> 00:11:01,996
Playground Books provide
some more building blocks


243
00:11:01,996 --> 00:11:04,796
to construct an interactive
story in the course of something


244
00:11:04,796 --> 00:11:06,756
that you want other
people to explore.


245
00:11:06,756 --> 00:11:07,796
You want to show them something.


246
00:11:08,316 --> 00:11:11,246
So in these next moments, I'd
like to show you an overview


247
00:11:11,246 --> 00:11:13,596
of what's new, and then
demonstrate how you can put


248
00:11:13,596 --> 00:11:15,606
these new things to good use.


249
00:11:16,276 --> 00:11:20,766
So first off, Playground Books
are made up of pages grouped


250
00:11:20,766 --> 00:11:23,736
into chapters, and a table
of contents is generated


251
00:11:23,736 --> 00:11:25,366
from this for easy navigation.


252
00:11:25,766 --> 00:11:31,756
Playground Books provide a new
type of page called a cutscene,


253
00:11:32,036 --> 00:11:33,456
and this can be useful
if you want


254
00:11:33,456 --> 00:11:36,766
to stage a full-screen
illustration in the course


255
00:11:36,766 --> 00:11:38,226
of a story that you're
trying to tell.


256
00:11:38,346 --> 00:11:41,236
You can see how our content
team has put this to good use,


257
00:11:41,236 --> 00:11:43,376
trying to demonstrate
big ideas in a fun way.


258
00:11:43,906 --> 00:11:47,986
And as you introduce concepts,
you can use the glossary feature


259
00:11:48,146 --> 00:11:50,226
to link terms with their
definitions at the tap


260
00:11:50,226 --> 00:11:53,906
of a finger, and all these terms
and definitions are gathered


261
00:11:53,906 --> 00:11:55,996
up to provide a reference
in one place.


262
00:11:56,646 --> 00:12:01,176
A Playground page full of Swift
code can be a bit daunting


263
00:12:01,176 --> 00:12:02,396
to just jump into.


264
00:12:02,636 --> 00:12:04,536
Sometimes you don't
want to distract


265
00:12:04,536 --> 00:12:06,436
from the finer point
you're trying to present.


266
00:12:06,866 --> 00:12:08,326
So Playground Books
give you the ability


267
00:12:08,326 --> 00:12:11,336
to focus the learner
using editable regions.


268
00:12:11,856 --> 00:12:14,856
You annotate your Swift
code with special comments.


269
00:12:15,456 --> 00:12:17,776
They become blanks that
the learner then fills in.


270
00:12:18,316 --> 00:12:19,806
This lets you reduce
distraction,


271
00:12:20,006 --> 00:12:21,746
especially at an early
stage when you're trying


272
00:12:21,746 --> 00:12:23,406
to demonstrate a
complex concept.


273
00:12:23,846 --> 00:12:27,726
And Playground Books
lets you mark code


274
00:12:27,726 --> 00:12:29,476
that you don't want
to show up at all.


275
00:12:30,326 --> 00:12:33,456
Hidden code blocks give you
the flexibility to run, set up,


276
00:12:33,556 --> 00:12:36,686
and tear down code around some
kind of workspace in the middle.


277
00:12:37,006 --> 00:12:39,136
It's a great way to hide
the details at first,


278
00:12:39,136 --> 00:12:40,876
and then you can pull
back the curtain,


279
00:12:40,876 --> 00:12:45,696
and expose this setup magic
when you're ready to do so.


280
00:12:46,196 --> 00:12:48,546
Playground Books lets you
configure the shortcuts


281
00:12:48,546 --> 00:12:50,196
that show up it the
completion bar here.


282
00:12:50,586 --> 00:12:53,806
You can specify or exclude
identifiers, modules, keywords,


283
00:12:53,806 --> 00:12:56,356
etcetera, customizing what
shows up above the comments.


284
00:12:57,036 --> 00:13:01,316
And with the new
document format,


285
00:13:01,316 --> 00:13:05,236
you can configure the live
view to be always on as soon


286
00:13:05,236 --> 00:13:06,416
as the page is loaded.


287
00:13:06,836 --> 00:13:10,196
It runs Swift code in a separate
process, completely independent


288
00:13:10,196 --> 00:13:12,386
of the code that is typed
and run in the editor.


289
00:13:12,896 --> 00:13:16,056
This editor code on the left and
the live view code on the right,


290
00:13:16,056 --> 00:13:18,806
they talk to each other with
a special XPC mechanism.


291
00:13:19,056 --> 00:13:21,926
We're actually going to see how
that works, and you can watch


292
00:13:22,356 --> 00:13:24,226
through my demonstration and so


293
00:13:24,226 --> 00:13:25,296
that you can take
advantage of this.


294
00:13:25,526 --> 00:13:28,166
It's a great way to do
interactive visualizations,


295
00:13:28,316 --> 00:13:30,986
building up with each successive
run of the code in the editor.


296
00:13:31,726 --> 00:13:36,046
And if you've chosen to
progressively explore an idea


297
00:13:36,046 --> 00:13:38,256
and guide through the
steps to build something,


298
00:13:38,656 --> 00:13:41,226
you can analyze what was
typed, and then provide hints


299
00:13:41,426 --> 00:13:43,536
that the learner can bring up
by tapping the Hint button.


300
00:13:44,096 --> 00:13:48,526
And if they succeed in their
task, you can let them know


301
00:13:48,956 --> 00:13:49,976
with a success message.


302
00:13:51,516 --> 00:13:54,846
And Playground Books will
remember your assessment


303
00:13:54,876 --> 00:13:57,446
of each page, and the learner
can see what they've completed


304
00:13:57,446 --> 00:13:58,676
in the table of contents.


305
00:13:59,226 --> 00:14:01,526
Use these Hint and
Assessment mechanisms as a part


306
00:14:01,526 --> 00:14:02,766
of your own motivational design.


307
00:14:03,336 --> 00:14:07,826
You have access to a
simple key/value store


308
00:14:07,826 --> 00:14:09,116
that is kept with the document.


309
00:14:09,556 --> 00:14:12,876
This lets you track preferences
or even more advanced forms


310
00:14:12,876 --> 00:14:17,426
of progress as the learner moves
through the book page to page.


311
00:14:17,866 --> 00:14:19,676
And Playground Books
are resettable.


312
00:14:20,356 --> 00:14:23,666
Every change made is kept
in a separate place away


313
00:14:23,666 --> 00:14:25,086
from the main document content.


314
00:14:25,196 --> 00:14:28,706
And if the learner so chooses,
they can reset the page back


315
00:14:28,816 --> 00:14:32,056
to the state it was when
they first opened it.


316
00:14:32,456 --> 00:14:34,446
The entire document
can be reset too.


317
00:14:34,886 --> 00:14:36,256
Every page will be pristine.


318
00:14:36,416 --> 00:14:37,966
The key/value store
will be cleared out.


319
00:14:38,156 --> 00:14:39,186
Assessments reset.


320
00:14:39,556 --> 00:14:43,116
And they're ready
to start again.


321
00:14:43,336 --> 00:14:46,816
And last, but certainly not
least, on developer.apple.com,


322
00:14:46,816 --> 00:14:48,956
you can see the documentation
of the format.


323
00:14:48,956 --> 00:14:50,756
We want to make sure that
you know how it works


324
00:14:50,756 --> 00:14:53,796
so that you can work on your
own custom content production


325
00:14:53,796 --> 00:14:55,256
workflows to make
the magic happen.


326
00:14:55,676 --> 00:14:57,656
Start with the examples
and the references.


327
00:14:57,656 --> 00:15:00,676
Dig into all that, and even
take apart the Playground Books


328
00:15:00,676 --> 00:15:02,836
produced by our content
team to learn more.


329
00:15:05,146 --> 00:15:08,536
There you go.


330
00:15:10,016 --> 00:15:13,356
So now I'd like to
introduce a Playground Book


331
00:15:13,356 --> 00:15:16,676
that I have created to show
you what you would experience


332
00:15:16,676 --> 00:15:17,886
from an author's perspective.


333
00:15:18,476 --> 00:15:21,136
So my audience for this
book that I made just


334
00:15:21,136 --> 00:15:23,826
for you is someone
who's used Swift before


335
00:15:23,826 --> 00:15:26,696
and even used Playgrounds
as they were on the Mac,


336
00:15:26,696 --> 00:15:29,586
but now they're new to the
Playground Book format,


337
00:15:29,686 --> 00:15:31,596
and they'd like to know
more about how it works.


338
00:15:31,936 --> 00:15:33,676
My goal with this
Playground Book is


339
00:15:33,676 --> 00:15:37,276
to build a living reference
demonstrating how the new


340
00:15:37,276 --> 00:15:40,546
always-on live view works
and how you can talk to it.


341
00:15:40,686 --> 00:15:42,056
So let's get started.


342
00:15:42,266 --> 00:15:46,456
What better way to
demonstrate the new features


343
00:15:46,456 --> 00:15:48,916
of Playground Books than
with a Playground Book


344
00:15:48,916 --> 00:15:50,886
that demonstrates the new
features of Playground Books?


345
00:15:53,256 --> 00:15:55,276
We're very self-referential
around here.


346
00:15:55,276 --> 00:15:55,856
All right.


347
00:15:55,856 --> 00:15:57,956
So let's get started.


348
00:15:57,956 --> 00:15:59,486
Now we have here the
document browser.


349
00:15:59,486 --> 00:16:01,776
I'm going to bring up my
Playground Book called "Talking


350
00:16:01,776 --> 00:16:03,126
to the Live View"
by tapping on it.


351
00:16:03,996 --> 00:16:07,206
And you can see immediately
the live view starts running.


352
00:16:07,606 --> 00:16:08,376
Notice that the code


353
00:16:08,376 --> 00:16:11,096
on the editor has not even been
compiled, and it's not running


354
00:16:11,096 --> 00:16:13,186
at all, yet we have
a separate process


355
00:16:13,186 --> 00:16:14,136
with the code I've written


356
00:16:14,136 --> 00:16:17,466
for the always-on live view
getting us this beautiful little


357
00:16:17,466 --> 00:16:17,996
face here.


358
00:16:18,316 --> 00:16:19,246
I'd like you to meet Em.


359
00:16:19,936 --> 00:16:22,476
My helper here is a
Swift program that loves


360
00:16:22,476 --> 00:16:24,096
to recognize knock, knock jokes.


361
00:16:25,296 --> 00:16:27,686
So we can see here on
this introduction page,


362
00:16:27,996 --> 00:16:30,096
our goal is to just play around.


363
00:16:30,526 --> 00:16:32,866
I don't want to burden the
learner with all the details


364
00:16:32,866 --> 00:16:35,476
of how we're actually
going to send messages


365
00:16:35,476 --> 00:16:36,426
over to the live view.


366
00:16:36,426 --> 00:16:38,486
I just want you to
experience it for fun


367
00:16:38,776 --> 00:16:40,796
with this fun little
story attached to it.


368
00:16:41,236 --> 00:16:42,536
What we're going to
do is we're going


369
00:16:42,536 --> 00:16:45,756
to send messages using this
Say function down below.


370
00:16:46,576 --> 00:16:48,686
These strings will be passed
over to the other side,


371
00:16:48,686 --> 00:16:51,186
and they'll advance the
conversation state machine


372
00:16:51,186 --> 00:16:53,956
that is running for Em
that will keep going


373
00:16:53,956 --> 00:16:55,626
as the jokes continue.


374
00:16:55,626 --> 00:16:56,306
So we'll start here.


375
00:16:56,406 --> 00:16:57,526
We have a string already filled


376
00:16:57,526 --> 00:16:58,746
out for us called
"knock, knock."


377
00:16:58,746 --> 00:17:02,636
I'll just tap Run My Code, and
Em responds, "Who's there?"


378
00:17:02,846 --> 00:17:05,286
The code on the left
was compiled, executed.


379
00:17:05,596 --> 00:17:08,586
The special magic happened
with the Say function,


380
00:17:08,586 --> 00:17:10,175
and the string was
passed to the other side.


381
00:17:10,175 --> 00:17:12,165
And we'll brush away the
magic dust here in a moment.


382
00:17:12,506 --> 00:17:13,766
So let's continue.


383
00:17:13,766 --> 00:17:16,296
I'm going to say, "Boo."


384
00:17:16,296 --> 00:17:18,266
And I'm using the
external keyboard to type,


385
00:17:18,266 --> 00:17:19,886
because I don't want
to cover up the screen


386
00:17:19,945 --> 00:17:21,056
with the on-screen keyboard.


387
00:17:21,596 --> 00:17:23,925
I will send this string
over by tapping Run My Code.


388
00:17:24,806 --> 00:17:25,695
"Boo! Who?"


389
00:17:27,486 --> 00:17:28,876
"Are you crying?"


390
00:17:30,576 --> 00:17:31,496
Tap Run My Code.


391
00:17:32,516 --> 00:17:36,866
[ Laughter ]


392
00:17:37,366 --> 00:17:39,396
And Em has correctly
identified this knock,


393
00:17:39,396 --> 00:17:40,696
knock joke as a classic.


394
00:17:40,696 --> 00:17:43,056
Let's try one more to see
how this continues to work.


395
00:17:43,056 --> 00:17:45,706
I need to restart Em's
conversation state machine.


396
00:17:45,706 --> 00:17:47,656
So I'm going to start by
saying, "Knock, knock."


397
00:17:47,896 --> 00:17:51,306
I'll tap Run My Code to compile
and run this, send the string


398
00:17:51,306 --> 00:17:52,696
over the wire to the other side.


399
00:17:53,276 --> 00:17:53,856
"Who's there?"


400
00:17:54,696 --> 00:17:57,856
UInt, which is Swift's
type for unsigned integer.


401
00:17:59,656 --> 00:18:00,396
"UInt who?"


402
00:18:01,536 --> 00:18:04,706
"UInterested in my
clever jokes?"


403
00:18:05,516 --> 00:18:12,596
[ Laughter ]


404
00:18:13,096 --> 00:18:15,176
That sounds like some
of you agree with Em


405
00:18:15,176 --> 00:18:16,186
on this assessment here.


406
00:18:16,986 --> 00:18:17,626
That's unfortunate.


407
00:18:17,976 --> 00:18:22,936
But what we have here is a way
to experiment with the idea.


408
00:18:22,936 --> 00:18:25,426
And when you're ready, you
can go to the very next page,


409
00:18:25,426 --> 00:18:28,256
where the magic dust
is brushed away,


410
00:18:28,666 --> 00:18:30,946
and you can see exactly how
the Say function is written.


411
00:18:30,946 --> 00:18:32,716
This is all it takes
to send a string


412
00:18:32,716 --> 00:18:36,156
over to the live view process,
and well unpack this a bit more


413
00:18:36,156 --> 00:18:36,866
in a few minutes here.


414
00:18:37,626 --> 00:18:39,606
But here, what we have
is a Playground Book


415
00:18:39,606 --> 00:18:42,996
that progressively explores
the always-on live view API


416
00:18:43,256 --> 00:18:44,636
from the author's perspective.


417
00:18:44,986 --> 00:18:47,396
You can continue on to further
pages, where you learn how


418
00:18:47,396 --> 00:18:50,216
to send more complex
commands over to Em.


419
00:18:50,386 --> 00:18:52,596
You can configure it
to recognize new setup


420
00:18:52,596 --> 00:18:53,926
and punch line joke patterns.


421
00:18:54,206 --> 00:18:57,056
You can even save these joke
patterns to the key value store


422
00:18:57,436 --> 00:18:59,536
to load them when you
want to have fun later,


423
00:18:59,776 --> 00:19:01,456
after the next time you
open the Playground Book.


424
00:19:02,346 --> 00:19:05,956
So this Playground Book
is available for download


425
00:19:06,056 --> 00:19:07,286
with our session materials.


426
00:19:07,286 --> 00:19:09,016
I encourage you to check
it out after the session.


427
00:19:09,016 --> 00:19:11,166
But right now, we're going
to kind of unpack this,


428
00:19:11,166 --> 00:19:19,626
and see how this thing works
from an author's perspective.


429
00:19:20,536 --> 00:19:24,246
So Playground Books are a
special document format geared


430
00:19:24,246 --> 00:19:27,446
towards teaching these
concepts on a touch environment


431
00:19:27,786 --> 00:19:28,706
that we have on the iPad.


432
00:19:29,906 --> 00:19:32,546
They're a folder with the
extension .playgroundbook


433
00:19:32,796 --> 00:19:35,816
that is treated as a document
package by the operating system.


434
00:19:36,186 --> 00:19:39,646
You edit these on your Mac with
whatever you would like to use.


435
00:19:39,646 --> 00:19:41,336
You can use Xcode, your
favorite text editor.


436
00:19:41,676 --> 00:19:43,416
Use your version control system,


437
00:19:43,416 --> 00:19:46,256
build your own custom
content management workflow


438
00:19:46,256 --> 00:19:47,186
if you need to, to be able


439
00:19:47,186 --> 00:19:49,336
to produce content
in Playground Books.


440
00:19:50,376 --> 00:19:52,136
And we're going to walk
through how this package is


441
00:19:52,136 --> 00:19:52,996
assembled together.


442
00:19:53,356 --> 00:19:55,536
The package contains
the files and folders,


443
00:19:55,536 --> 00:19:57,966
and Swift code assets
configuration


444
00:19:57,966 --> 00:19:58,906
that make everything work.


445
00:20:00,446 --> 00:20:02,076
And here's an overview
of these pieces.


446
00:20:02,206 --> 00:20:04,676
We're going to refer back to
this as we go, so we can kind


447
00:20:04,676 --> 00:20:06,466
of see how everything
gets assembled together.


448
00:20:07,646 --> 00:20:09,586
At the very root of
this document package,


449
00:20:09,586 --> 00:20:11,146
you have a folder
called contents,


450
00:20:11,146 --> 00:20:12,786
and as you would guess, this is


451
00:20:12,786 --> 00:20:15,026
where you put your
authored content.


452
00:20:16,146 --> 00:20:18,656
Moving inside, you will
recognize these two folders


453
00:20:18,656 --> 00:20:20,326
if you've authored
playgrounds before.


454
00:20:20,966 --> 00:20:23,846
Sources is where you put the
global Swift files that you want


455
00:20:23,846 --> 00:20:26,306
to have compiled and made
available to every page


456
00:20:26,336 --> 00:20:27,416
in your Playground Book.


457
00:20:28,166 --> 00:20:30,466
You don't even have to import
anything to make this work.


458
00:20:30,666 --> 00:20:33,166
Anything that's declared as
public will be ready to go


459
00:20:33,166 --> 00:20:34,426
as soon as you open the page.


460
00:20:35,166 --> 00:20:40,766
And then Resources holds the
assets used by your pages.


461
00:20:40,986 --> 00:20:43,366
Place your images, your
sound files, any other assets


462
00:20:43,366 --> 00:20:44,926
that you need to
load by file name,


463
00:20:45,246 --> 00:20:46,716
and they'd be pulled
out of this folder.


464
00:20:47,376 --> 00:20:50,276
Note that these two folders
right now are in the root


465
00:20:50,346 --> 00:20:52,706
of this document
package, so everything


466
00:20:52,706 --> 00:20:55,946
in them is made available to
every page in the entire book.


467
00:20:56,396 --> 00:20:59,356
If you choose to, you can
scope things to just chapters


468
00:20:59,476 --> 00:21:01,756
by putting a Sources and
Resources folder in there,


469
00:21:02,126 --> 00:21:03,506
or even individual pages.


470
00:21:03,506 --> 00:21:04,836
You don't have to
share all of this stuff


471
00:21:04,836 --> 00:21:05,886
across every other page.


472
00:21:05,886 --> 00:21:06,486
It's up to you.


473
00:21:06,786 --> 00:21:08,156
Customization there,
for your uses.


474
00:21:08,736 --> 00:21:12,086
The next folder we're visiting
here is named Chapters,


475
00:21:12,216 --> 00:21:14,806
and as you would expect,
it contains chapters,


476
00:21:15,126 --> 00:21:18,726
which are themselves folders
containing one or more pages,


477
00:21:19,346 --> 00:21:24,346
and each page is a folder
that contains the content


478
00:21:24,346 --> 00:21:27,266
that you interact with when
the Playground Book is used


479
00:21:27,266 --> 00:21:28,676
in the app.


480
00:21:28,676 --> 00:21:29,806
This first file we're going


481
00:21:29,806 --> 00:21:32,416
to see here is called
Manifest.plist.


482
00:21:32,846 --> 00:21:34,936
It's a special configuration
file that sets


483
00:21:34,996 --> 00:21:36,586
up how the page will work.


484
00:21:36,986 --> 00:21:39,326
If you open this file, it
will look something like this.


485
00:21:39,636 --> 00:21:40,516
We'll go through
it, don't worry.


486
00:21:41,316 --> 00:21:44,506
Now, manifest files are property
lists, dictionaries of keys


487
00:21:44,506 --> 00:21:47,786
and values that Swift Playground
uses to determine how this page


488
00:21:47,786 --> 00:21:49,456
with a document is
supposed to behave.


489
00:21:50,056 --> 00:21:52,226
These manifest files
are used at the chapter


490
00:21:52,636 --> 00:21:55,066
and the document level as
well to configure behavior,


491
00:21:55,106 --> 00:21:57,406
like the order of things
in the table of contents.


492
00:21:57,856 --> 00:22:00,046
We're just going to focus
on the page manifest today,


493
00:22:00,046 --> 00:22:03,066
because it has the most
impact with what you just saw


494
00:22:03,066 --> 00:22:04,886
in the demonstration,
and we'll see how each


495
00:22:04,886 --> 00:22:08,036
of these configuration
mechanisms alter what happens


496
00:22:08,036 --> 00:22:08,676
on the page.


497
00:22:10,026 --> 00:22:14,646
The first key in the property
list is name, as you can tell.


498
00:22:15,016 --> 00:22:18,066
It sets the name at the top of
the document, and it's also used


499
00:22:18,066 --> 00:22:19,806
in the table of contents.


500
00:22:21,056 --> 00:22:24,946
The next key, LiveViewMode,
controls how the live view works


501
00:22:24,946 --> 00:22:26,196
when the page is first opened.


502
00:22:26,636 --> 00:22:30,166
Usually, the live view is
hidden until it's either invoked


503
00:22:30,166 --> 00:22:32,466
in code or the learner
brings it back on screen.


504
00:22:32,706 --> 00:22:35,316
In this case, I want it to show
up as soon as the page opens.


505
00:22:35,636 --> 00:22:38,396
So by setting the string
value of this key to visible


506
00:22:38,396 --> 00:22:41,286
by default, I get
the behavior I want.


507
00:22:42,436 --> 00:22:47,576
PosterReference is a key that
a string value used to look


508
00:22:47,576 --> 00:22:49,606
up a file name in the
Resources directory.


509
00:22:50,476 --> 00:22:53,056
That file becomes a
poster that covers


510
00:22:53,056 --> 00:22:56,596
up the live view area before
the live view process has had a


511
00:22:56,596 --> 00:22:59,016
chance to run right
after the page opens.


512
00:22:59,326 --> 00:23:02,376
And as you can see here, as soon
as the live view process begins


513
00:23:02,376 --> 00:23:04,576
to run, the poster
image is faded away,


514
00:23:05,286 --> 00:23:08,126
and we can see the live
view content underneath.


515
00:23:08,896 --> 00:23:12,766
The LiveViewEdgetoEdge
key has a Boolean value


516
00:23:12,766 --> 00:23:15,976
that determines whether
or not the content area


517
00:23:15,976 --> 00:23:19,086
of the live view extends
to the entire boundaries


518
00:23:19,086 --> 00:23:21,526
of the viewport, and also
underneath the Run My Code


519
00:23:21,526 --> 00:23:22,586
button, as you see here.


520
00:23:22,586 --> 00:23:25,376
I wanted to that in my
case, so I set it to Yes.


521
00:23:25,656 --> 00:23:29,046
If you set LiveViewEdgetoEdge
to No,


522
00:23:29,046 --> 00:23:31,056
and you gave the live
view a background color,


523
00:23:31,156 --> 00:23:32,076
this is what you'd see.


524
00:23:32,556 --> 00:23:34,956
Note how it's inset
all the way around.


525
00:23:35,486 --> 00:23:37,486
It's not covered up by
the Run My Code button.


526
00:23:37,726 --> 00:23:40,456
It's up to you which
mode you want,


527
00:23:40,456 --> 00:23:41,996
depending on the
content that you have.


528
00:23:42,496 --> 00:23:44,876
For instance, if you
needed to have a view


529
00:23:44,876 --> 00:23:47,216
that had full control
of the touch area,


530
00:23:47,216 --> 00:23:49,386
then setting LiveViewEdgetoEdge


531
00:23:49,386 --> 00:23:53,146
to No would give
you what you want.


532
00:23:53,726 --> 00:23:57,136
Playground logging mode controls
the inline results that you see


533
00:23:57,136 --> 00:23:59,006
on the right side of every line


534
00:23:59,006 --> 00:24:00,486
in the editor that
returns a value.


535
00:24:01,196 --> 00:24:04,736
In my case, my live view does
all the results reporting


536
00:24:04,736 --> 00:24:05,266
that I need.


537
00:24:05,266 --> 00:24:07,736
So I decided to set the
PlaygroundLoggingMode


538
00:24:07,736 --> 00:24:09,026
to the string value Off,


539
00:24:09,376 --> 00:24:11,636
which turns off the
inline results completely.


540
00:24:11,716 --> 00:24:16,106
Now we've reached
the interactive bits


541
00:24:16,106 --> 00:24:17,456
of the Playground
document format.


542
00:24:17,456 --> 00:24:20,096
This is where all
the fun happens.


543
00:24:20,516 --> 00:24:24,026
Let's take a look at this first
one called Contents.swift.


544
00:24:24,756 --> 00:24:29,126
Now, all of you have interacted
with Contents.swift before.


545
00:24:29,826 --> 00:24:32,386
Whether it's full screen
or on the left-hand side


546
00:24:32,576 --> 00:24:33,936
of the live view, as seen here,


547
00:24:34,506 --> 00:24:37,986
whatever is in the editor
comes from Contents.swift.


548
00:24:37,986 --> 00:24:40,966
And when you tap the Run
button, everything in this file


549
00:24:40,966 --> 00:24:43,276
and everything it
references is executed.


550
00:24:43,816 --> 00:24:46,126
In my introduction page,


551
00:24:46,396 --> 00:24:48,566
Contents.swift looks
something like this.


552
00:24:48,976 --> 00:24:51,836
At the top is Playground
Markup prose written


553
00:24:51,836 --> 00:24:53,426
to help describe
what you can do.


554
00:24:53,426 --> 00:24:56,766
Your objectives, goals,
instructions that are read


555
00:24:56,766 --> 00:24:58,326
by the person going
through the page


556
00:24:58,596 --> 00:25:00,246
to understand how they're
supposed to interact.


557
00:25:01,356 --> 00:25:03,206
Those of you who've authored
Playgrounds before will


558
00:25:03,206 --> 00:25:03,926
recognize this.


559
00:25:04,196 --> 00:25:06,596
It's the standard
Playground Markup comments.


560
00:25:07,196 --> 00:25:10,776
And here, I have a few lines
of code that are used to set


561
00:25:10,776 --> 00:25:13,456
up the page so that the real
action can happen down below,


562
00:25:14,096 --> 00:25:15,606
but I don't want this
part to be visible,


563
00:25:15,606 --> 00:25:16,846
at least not on this page.


564
00:25:17,466 --> 00:25:20,376
So I use these special magic
comments to mark the start


565
00:25:20,376 --> 00:25:21,766
and end of a hidden code block.


566
00:25:22,306 --> 00:25:24,586
Everything between these
two lines is tucked away.


567
00:25:25,216 --> 00:25:27,356
It's executed along
with everything else,


568
00:25:27,676 --> 00:25:30,076
but it is not visible
when you open this page


569
00:25:30,116 --> 00:25:31,666
in Swift Playgrounds on iPad.


570
00:25:33,506 --> 00:25:35,896
And the real work of the
Playground page is kicked off


571
00:25:35,896 --> 00:25:38,316
with this statement, a
call to the Say function


572
00:25:38,316 --> 00:25:40,036
that was written above
in the hidden code.


573
00:25:40,646 --> 00:25:43,706
Now I wanted to ensure that
as the learner was sitting


574
00:25:43,706 --> 00:25:45,436
down with this page
and filling things


575
00:25:45,436 --> 00:25:46,876
into this function parameter


576
00:25:47,176 --> 00:25:49,086
that they wouldn't accidentally
cause a compiler error.


577
00:25:49,816 --> 00:25:53,176
So I'm using editable code
regions to be able to set


578
00:25:53,176 --> 00:25:55,836
up with these special magic
comments the beginning


579
00:25:55,836 --> 00:25:57,956
and ending of an
editable code block,


580
00:25:58,346 --> 00:26:00,226
and they can only
type in this spot.


581
00:26:01,026 --> 00:26:03,176
You can have as many of these
as you want on the page.


582
00:26:03,576 --> 00:26:05,106
And the first time
you introduce one,


583
00:26:05,346 --> 00:26:08,196
only these areas can be
typed in, and it works great


584
00:26:08,196 --> 00:26:10,496
for what I need, and the
learner can type away,


585
00:26:10,496 --> 00:26:11,926
and they're just
affecting the string.


586
00:26:12,476 --> 00:26:16,206
And experienced Playground
authors will notice this


587
00:26:16,206 --> 00:26:17,126
placeholder syntax.


588
00:26:17,556 --> 00:26:21,066
These angle brackets and
pound signs cause a bubble


589
00:26:21,066 --> 00:26:22,326
to show up in the editor.


590
00:26:22,886 --> 00:26:24,846
The learner can tap on the
bubble, and then as soon


591
00:26:24,846 --> 00:26:26,686
as they start typing,
it replaces the contents


592
00:26:26,686 --> 00:26:27,556
with whatever they wanted.


593
00:26:27,976 --> 00:26:29,946
This is a great way to give
a clue of what is supposed


594
00:26:29,946 --> 00:26:31,786
to go in a certain spot.


595
00:26:33,296 --> 00:26:36,846
So that's a good summary of what
goes on inside Contents.swift,


596
00:26:37,236 --> 00:26:39,146
a quick summary on
the left-hand side.


597
00:26:39,146 --> 00:26:40,876
But now we're going
to turn our attention


598
00:26:40,876 --> 00:26:43,116
over to the right-hand
side and what goes


599
00:26:43,116 --> 00:26:45,486
on in the always-on live view.


600
00:26:47,096 --> 00:26:51,096
This introduction page has
a file named LiveView.swift.


601
00:26:52,626 --> 00:26:53,676
This is what it looks like.


602
00:26:54,406 --> 00:26:56,556
First we import
PlaygroundSupport.


603
00:26:56,956 --> 00:26:59,216
Now, those of you who've
authored Playgrounds before are


604
00:26:59,216 --> 00:27:02,426
familiar with XE Playground, the
framework that gives you access


605
00:27:02,426 --> 00:27:03,656
to the page environment.


606
00:27:04,106 --> 00:27:04,876
That's been renamed.


607
00:27:04,966 --> 00:27:06,086
It's been new and improved.


608
00:27:06,086 --> 00:27:07,576
It's called Playground Support,


609
00:27:07,576 --> 00:27:09,046
and this is what you
use going forward.


610
00:27:10,666 --> 00:27:13,246
So we ask, for the
current Playground page,


611
00:27:13,766 --> 00:27:18,506
and then we set the live
view property on that page


612
00:27:18,506 --> 00:27:22,136
to be a fresh instance of this
thing called FaceViewController.


613
00:27:22,766 --> 00:27:24,596
Where did this
FaceViewController come from?


614
00:27:25,156 --> 00:27:26,886
Well, it's part of
the Swift code stored


615
00:27:26,886 --> 00:27:29,366
in the Sources directory at
the root of the document.


616
00:27:29,876 --> 00:27:32,696
This is the library of code
that I built up to be able


617
00:27:32,696 --> 00:27:34,496
to share across all the pages.


618
00:27:34,766 --> 00:27:36,746
Anything I put in here,
I can reference as long


619
00:27:36,746 --> 00:27:37,716
as it's marked as public.


620
00:27:39,266 --> 00:27:41,026
Now, you could, if you want to,


621
00:27:41,126 --> 00:27:45,456
write all of your live view code
inside the LiveView.swift file.


622
00:27:45,456 --> 00:27:46,936
There's nothing stopping
you from doing that.


623
00:27:47,466 --> 00:27:49,556
But then you have
to copy that file


624
00:27:49,556 --> 00:27:51,836
to any other Playground
Book page that needs


625
00:27:51,836 --> 00:27:53,666
to share the same
live view behavior.


626
00:27:53,976 --> 00:27:56,006
Every page in my Playground
Book document does,


627
00:27:56,306 --> 00:27:58,946
so I'm just using these
three lines as, like,


628
00:27:58,946 --> 00:28:01,496
setup that make the
Playground --


629
00:28:01,636 --> 00:28:03,556
make the always-on
live view run.


630
00:28:03,556 --> 00:28:05,256
They're all sharing
the FaceViewController,


631
00:28:05,256 --> 00:28:06,786
and I just have to
copy this file


632
00:28:07,006 --> 00:28:09,546
across to any other page
that needs to use it.


633
00:28:10,596 --> 00:28:13,466
Those of you who've authored
Playgrounds before may feel


634
00:28:13,466 --> 00:28:15,856
like you're looking at something
familiar with this code.


635
00:28:16,416 --> 00:28:18,336
Isn't this how you would
set up the live view


636
00:28:18,336 --> 00:28:20,676
if you were doing it from
within Contents.swift?


637
00:28:21,816 --> 00:28:24,416
Yes, it is, and you can
still do it this way.


638
00:28:24,836 --> 00:28:27,926
If you choose to, it runs
inside the main process,


639
00:28:28,606 --> 00:28:30,946
where all the code in the
editor is run as well.


640
00:28:31,116 --> 00:28:33,846
That is really useful,
since you have full access


641
00:28:33,846 --> 00:28:35,376
to the live view object.


642
00:28:35,626 --> 00:28:39,596
You can take page.liveview,
cast it to FaceViewController,


643
00:28:39,796 --> 00:28:41,306
and manipulate it
like anything else.


644
00:28:41,496 --> 00:28:43,186
Call methods on it,
change properties.


645
00:28:43,186 --> 00:28:44,836
It's right there
inside your process.


646
00:28:45,756 --> 00:28:48,246
But that means that the live
view is only active as long


647
00:28:48,246 --> 00:28:50,086
as the code in the
editor is running.


648
00:28:50,456 --> 00:28:53,596
It will not start until the
learner taps Run My Code.


649
00:28:53,596 --> 00:28:56,936
It will stop as soon as
the learner taps Stop


650
00:28:56,936 --> 00:28:58,536
or starts typing
into the editor.


651
00:28:58,916 --> 00:29:02,366
And it can't run if there's
a compiler error in the code


652
00:29:02,506 --> 00:29:04,226
that is currently being
typed into the editor.


653
00:29:05,116 --> 00:29:09,546
So that is where the
always-on live view


654
00:29:09,746 --> 00:29:11,636
and LiveView.swift comes in.


655
00:29:11,636 --> 00:29:15,146
If this file -- if a file with
the name LiveView.swift is


656
00:29:15,146 --> 00:29:16,646
in your Playground Book page,


657
00:29:17,166 --> 00:29:19,736
you automatically have
an always-on live view.


658
00:29:20,006 --> 00:29:22,486
This file is executed as
soon as the page is opened,


659
00:29:22,966 --> 00:29:25,026
and that makes it run
in a separate process,


660
00:29:25,026 --> 00:29:28,216
which is awesome, because that
means it's running all the time.


661
00:29:29,636 --> 00:29:32,456
Even if the code in the editor
isn't running or can't compile.


662
00:29:33,316 --> 00:29:36,746
The trade-off is that you
can't just cast the live view


663
00:29:36,746 --> 00:29:39,056
to an instance of
FaceViewController and talk


664
00:29:39,056 --> 00:29:40,326
to it like you were
doing before.


665
00:29:40,736 --> 00:29:43,606
You have to use some sort
of cross process mechanism


666
00:29:43,606 --> 00:29:46,026
to send messages back and
forth, and we're going


667
00:29:46,026 --> 00:29:48,416
to look into that next here.


668
00:29:48,656 --> 00:29:50,956
Say we have this code
in the main process


669
00:29:51,406 --> 00:29:54,036
from Contents.swift,
the main process


670
00:29:54,036 --> 00:29:55,126
of the code running
in the editor.


671
00:29:56,586 --> 00:29:58,576
We want to send the
string "knock,


672
00:29:58,576 --> 00:29:59,686
knock" to the other side.


673
00:29:59,686 --> 00:30:01,836
So first thing we do is
import PlaygroundSupport.


674
00:30:02,656 --> 00:30:04,296
We get access to
the current page.


675
00:30:04,846 --> 00:30:07,596
And when we ask for the
live view of the page,


676
00:30:07,716 --> 00:30:10,176
we don't cast it to
FaceViewController.


677
00:30:10,616 --> 00:30:12,356
We cast it to this
special class called


678
00:30:12,356 --> 00:30:14,346
PlaygroundRemoteLiveViewProxy.


679
00:30:15,296 --> 00:30:17,436
The instance of this class
is what does the work


680
00:30:17,886 --> 00:30:20,896
to hand things across the wire
between the two processes.


681
00:30:21,236 --> 00:30:23,666
And if this conditional
cast succeeds,


682
00:30:23,946 --> 00:30:26,646
then that is your queue
inside the code that would run


683
00:30:26,646 --> 00:30:29,746
in the main process that you
have an always-on live view


684
00:30:29,796 --> 00:30:30,536
for this page.


685
00:30:30,746 --> 00:30:31,756
Use this as that signal.


686
00:30:32,406 --> 00:30:34,906
So assuming this all
worked, we've casted it.


687
00:30:34,946 --> 00:30:37,596
We actually have a live view
running, and we have the proxy.


688
00:30:38,516 --> 00:30:39,496
We craft a message.


689
00:30:40,876 --> 00:30:43,606
The message-sending mechanism
uses PlaygroundValue,


690
00:30:43,606 --> 00:30:46,826
an enum that we'll kind of talk
about a bit more in a moment.


691
00:30:47,086 --> 00:30:49,256
But as you can probably guess
by looking at this line,


692
00:30:49,256 --> 00:30:52,876
we're casting a string case with
the associated string literal


693
00:30:52,876 --> 00:30:55,326
"knock, knock," and then
we take that message,


694
00:30:55,326 --> 00:30:57,216
and hand it over to the proxy,


695
00:30:57,736 --> 00:30:59,666
calling the send
method passing it in.


696
00:31:00,246 --> 00:31:05,376
So the Contents.swift code
hands that string value


697
00:31:05,376 --> 00:31:09,776
over to the live view proxy, and
then the live view proxy passes


698
00:31:09,776 --> 00:31:14,106
that over to something
listening on the other side.


699
00:31:14,266 --> 00:31:16,136
We need to wire up
the FaceViewController


700
00:31:16,136 --> 00:31:19,366
so we can receive this message.


701
00:31:19,696 --> 00:31:21,396
Somewhere in our
library of code,


702
00:31:22,146 --> 00:31:24,116
we've extended the
FaceViewController,


703
00:31:24,236 --> 00:31:25,956
and we've said that
it will conform


704
00:31:25,956 --> 00:31:28,396
to the
PlaygroundLiveViewMessageHandler


705
00:31:28,396 --> 00:31:28,956
protocol.


706
00:31:29,366 --> 00:31:31,906
That means we must
implement the received method


707
00:31:32,166 --> 00:31:33,376
that takes a PlaygroundValue.


708
00:31:33,946 --> 00:31:38,516
This will be called, because
this FaceViewController is the


709
00:31:38,516 --> 00:31:40,686
live view, because
we assigned this


710
00:31:40,686 --> 00:31:42,506
to the page.liveview property.


711
00:31:42,796 --> 00:31:45,556
That's what the live view
proxy knows as the queue


712
00:31:45,976 --> 00:31:47,696
that this thing needs
to receive the message.


713
00:31:48,836 --> 00:31:51,786
Inside this message, we
take the message parameter,


714
00:31:51,786 --> 00:31:53,946
and check to see
what enum case it is,


715
00:31:53,946 --> 00:31:55,416
extracting any associated
values.


716
00:31:55,776 --> 00:31:58,166
I only care about strings right
now, so we'll just use the


717
00:31:58,166 --> 00:32:02,256
if case let syntax, and then
once we do that, if true,


718
00:32:02,496 --> 00:32:05,316
the value of this enum is
bound to the identifier text.


719
00:32:06,136 --> 00:32:08,356
And now, inside the if
clause, we have a string.


720
00:32:08,916 --> 00:32:09,866
Do something with it.


721
00:32:10,216 --> 00:32:11,816
And in this case, we pass it off


722
00:32:11,816 --> 00:32:14,066
to this function
processConversationLine


723
00:32:14,436 --> 00:32:16,976
that then advances Em's
conversation state machine.


724
00:32:17,546 --> 00:32:21,926
So what if we want to
send data the other way,


725
00:32:21,926 --> 00:32:22,876
from the live view?


726
00:32:23,186 --> 00:32:25,286
Say we set up something
where you tap on the face,


727
00:32:25,286 --> 00:32:27,586
and we get the string
"hello" sent back?


728
00:32:28,196 --> 00:32:31,156
How do we do that?


729
00:32:31,506 --> 00:32:34,036
Well first, in the live view
process, you need a mechanism


730
00:32:34,036 --> 00:32:36,486
that actually triggers the
sending, and I've chosen


731
00:32:36,836 --> 00:32:39,766
to have a tap gesture
recognizer set up on the face


732
00:32:39,836 --> 00:32:41,816
that will call us back
on this tapped method.


733
00:32:42,456 --> 00:32:43,676
Once you tap on the face,


734
00:32:43,676 --> 00:32:47,866
we craft the PlaygroundValue
message we want to send a string


735
00:32:47,866 --> 00:32:51,876
with the associated literal
"hello," and then we call send


736
00:32:52,006 --> 00:32:55,996
on self, passing this
message to the other side.


737
00:32:55,996 --> 00:32:57,716
Now, where did the
send method come from?


738
00:32:58,326 --> 00:33:00,846
Well, by declaring
that we conform


739
00:33:00,846 --> 00:33:02,846
to this
PlaygroundLiveViewMessageHandler


740
00:33:02,846 --> 00:33:05,016
protocol, it was
bolted on to our class


741
00:33:05,016 --> 00:33:06,536
as a convenience, automatically.


742
00:33:07,366 --> 00:33:09,516
Send is defined in
the protocol extension


743
00:33:09,586 --> 00:33:10,996
with a default implementation,


744
00:33:10,996 --> 00:33:14,966
and because this class is
the live view, calling send


745
00:33:14,966 --> 00:33:17,676
like this will just pass it
right to the live view proxy,


746
00:33:17,886 --> 00:33:21,946
and it will make its way over
to the other side, like so.


747
00:33:22,496 --> 00:33:23,576
You tap on the face.


748
00:33:24,266 --> 00:33:26,796
"Hello" is crafted, sent
to the live view proxy,


749
00:33:27,626 --> 00:33:30,276
and now then live view
proxy has to deliver


750
00:33:30,276 --> 00:33:33,216
that to something
listening on the other side.


751
00:33:33,736 --> 00:33:35,326
Let's see how we could
wire that up next.


752
00:33:36,426 --> 00:33:39,906
There's a bit of set up we
have to do, because by default,


753
00:33:40,236 --> 00:33:41,276
code that you write


754
00:33:41,276 --> 00:33:43,936
in Contents.swift will
stop executing as soon


755
00:33:43,936 --> 00:33:45,416
as it reaches the
last statement.


756
00:33:45,736 --> 00:33:47,566
That's not what we
want in this case.


757
00:33:47,946 --> 00:33:50,936
We're waiting for some sort of
asynchronous message to come


758
00:33:50,936 --> 00:33:52,216
at some later point in time,


759
00:33:52,616 --> 00:33:54,836
so we need to first grab
the Playground page,


760
00:33:54,886 --> 00:33:57,366
and then tell it that
we don't want it to stop


761
00:33:57,836 --> 00:33:59,796
by setting the
needsIndefiniteExecution


762
00:33:59,796 --> 00:34:00,676
property to true.


763
00:34:02,166 --> 00:34:04,716
We asked for the live view
proxy, just like we did before,


764
00:34:05,136 --> 00:34:07,016
and now we need to have
something that acts


765
00:34:07,016 --> 00:34:09,946
as the delegate of that proxy
that can receive the message.


766
00:34:09,985 --> 00:34:11,835
I'm just going to make
something up here.


767
00:34:12,166 --> 00:34:13,565
A class right in line.


768
00:34:14,525 --> 00:34:15,516
Notice that it conforms


769
00:34:15,516 --> 00:34:18,366
to the PlaygroundRemote
LiveViewProxyDelegate protocol,


770
00:34:18,616 --> 00:34:21,596
which means I have to implement
the remoteLiveViewProxy


771
00:34:21,596 --> 00:34:22,456
received method.


772
00:34:23,286 --> 00:34:23,876
And that's it.


773
00:34:24,255 --> 00:34:26,456
This will be called
by the live view proxy


774
00:34:26,456 --> 00:34:30,376
with the Playground value that
we can take apart using the


775
00:34:30,376 --> 00:34:31,596
if case let statement,


776
00:34:32,005 --> 00:34:34,166
and inside we do
something with the text.


777
00:34:35,826 --> 00:34:37,696
That defines the delegate.


778
00:34:37,696 --> 00:34:38,726
Now we have to wire it up.


779
00:34:38,936 --> 00:34:41,056
So we'll instantiate
it, and then assign it


780
00:34:41,436 --> 00:34:44,036
to the proxy's delegate
parameter, or delegate property,


781
00:34:44,496 --> 00:34:45,676
and that completes the circle.


782
00:34:46,446 --> 00:34:48,286
So now we have the
FaceViewController.


783
00:34:48,496 --> 00:34:49,525
You tap on the face.


784
00:34:49,846 --> 00:34:52,466
"Hello" is wrapped up
as a PlaygroundValue,


785
00:34:52,466 --> 00:34:55,516
passed into the live view
proxy, where it passes it off


786
00:34:55,556 --> 00:34:58,176
to the delegate, that
class that we just created,


787
00:34:58,346 --> 00:35:01,336
and it receives the message, and
then you make the magic happen.


788
00:35:02,056 --> 00:35:07,416
I want to quickly point out this
PlaygroundValue enum gives us a


789
00:35:07,416 --> 00:35:11,066
lot of options to statically
declare primitive values


790
00:35:11,066 --> 00:35:12,976
that we want to be able
to send back and forth


791
00:35:13,006 --> 00:35:14,346
between these two processes.


792
00:35:14,996 --> 00:35:17,736
You can use these enum cases
directly, like we've seen


793
00:35:17,846 --> 00:35:18,796
in the last few slides.


794
00:35:19,326 --> 00:35:21,536
Or you can define
conversion operations


795
00:35:21,956 --> 00:35:25,896
into Playground values from
your own data structures.


796
00:35:26,346 --> 00:35:30,416
As an added bonus, the key
value store uses Playground


797
00:35:30,416 --> 00:35:31,236
values too.


798
00:35:31,236 --> 00:35:34,356
So the work done to get
your data into and out


799
00:35:34,356 --> 00:35:38,066
of this model can be used both
for cross process communication


800
00:35:38,476 --> 00:35:40,006
and for saving statement.


801
00:35:41,576 --> 00:35:45,976
So remember, Contents.swift
is in a process running


802
00:35:45,976 --> 00:35:47,346
on the left-hand side.


803
00:35:47,346 --> 00:35:49,306
It's what we call
the main process.


804
00:35:49,906 --> 00:35:52,776
And if you have a
LiveView.swift file


805
00:35:52,776 --> 00:35:56,136
in your Playground Book page,
it will be executed and run


806
00:35:56,136 --> 00:35:58,776
in the separate always-on
live view


807
00:35:59,116 --> 00:36:01,146
in the process you
see here on the right.


808
00:36:01,146 --> 00:36:04,586
It's a different mechanism that
we had before, so please dig


809
00:36:04,586 --> 00:36:07,096
into our reference
examples and documentation


810
00:36:07,096 --> 00:36:08,126
to see how this thing works


811
00:36:08,126 --> 00:36:12,116
so you can take advantage
of the new goodies.


812
00:36:12,116 --> 00:36:13,996
Before we reach the
end of our discussion


813
00:36:13,996 --> 00:36:16,506
about authoring Playground
Books, I want to point


814
00:36:16,506 --> 00:36:18,916
out one last detail
that you will notice


815
00:36:18,946 --> 00:36:20,676
as an author of content.


816
00:36:21,386 --> 00:36:24,946
When you play with your
great idea on your iPad,


817
00:36:25,476 --> 00:36:27,936
and then you sync it back to
your Mac and take a look at it,


818
00:36:27,936 --> 00:36:31,206
you'll notice at the top
level a new folder will show


819
00:36:31,206 --> 00:36:32,886
up at the sibling
level with Contents.


820
00:36:33,446 --> 00:36:35,646
This is where all
the changes typed


821
00:36:35,756 --> 00:36:37,316
into the editor are stored.


822
00:36:37,586 --> 00:36:41,056
So don't be shocked when you
go and play with your content


823
00:36:41,056 --> 00:36:44,126
on your iPad, typing furiously
and changing a bunch of things


824
00:36:44,126 --> 00:36:47,026
in the editor, and you think
it goes into Contents.swift,


825
00:36:47,026 --> 00:36:49,036
but when you bring it back
to look at it on your Mac,


826
00:36:49,486 --> 00:36:51,556
the Contents.swift
file looks just


827
00:36:51,556 --> 00:36:52,646
like you authored it before.


828
00:36:52,646 --> 00:36:54,036
Where's all the changes
you made?


829
00:36:54,526 --> 00:36:55,686
That's by design.


830
00:36:56,846 --> 00:36:59,206
The authored content
is never changed


831
00:36:59,306 --> 00:37:00,756
by Swift Playgrounds
on the iPad.


832
00:37:01,676 --> 00:37:04,176
Swift Playgrounds stores a
dif of the learner's changes


833
00:37:04,176 --> 00:37:06,556
in this Edits folder, and
we reapply it when we can,


834
00:37:06,996 --> 00:37:08,886
and this keeps the
content pristine,


835
00:37:08,886 --> 00:37:11,066
and it's how the Playground
Books are resettable.


836
00:37:11,686 --> 00:37:17,036
So that is a very
brief overview,


837
00:37:17,266 --> 00:37:19,286
a subset of the underlying
bits that make


838
00:37:19,286 --> 00:37:21,216
up the new Playground
Book format.


839
00:37:21,646 --> 00:37:24,676
As mentioned, please go
to developer.apple.com,


840
00:37:25,196 --> 00:37:26,896
grab the reference
documentation,


841
00:37:26,896 --> 00:37:29,426
the examples we have, take apart
the Playground Books produced


842
00:37:29,426 --> 00:37:30,366
by our content team.


843
00:37:30,366 --> 00:37:31,216
It's all there, and we want


844
00:37:31,216 --> 00:37:33,576
to make sure you have
the resources you need


845
00:37:33,576 --> 00:37:34,826
to make awesome stuff.


846
00:37:36,086 --> 00:37:39,606
Now I've led you through
a part of the experience


847
00:37:39,606 --> 00:37:42,306
that an author has when they're
crafting these Playground Books.


848
00:37:42,986 --> 00:37:46,176
But as you'd expect, this app
is just plain fun to doodle


849
00:37:46,176 --> 00:37:48,356
with on your own as
some sort of scratchpad.


850
00:37:48,416 --> 00:37:49,336
It's great stuff.


851
00:37:49,966 --> 00:37:53,216
And next, I'd like to invite
my colleague Izzy to show some


852
00:37:53,216 --> 00:37:54,836
of the things that
he has been exploring


853
00:37:54,836 --> 00:37:56,026
with Swift Playgrounds.


854
00:37:56,406 --> 00:37:56,706
Izzy.


855
00:37:57,061 --> 00:37:59,061
[ Applause ]


856
00:37:59,106 --> 00:37:59,896
Thank you Jonathan.


857
00:38:02,596 --> 00:38:03,256
Thank you Jonathan.


858
00:38:03,306 --> 00:38:03,836
That was awesome.


859
00:38:05,056 --> 00:38:07,876
Now, we're going to jump
straight into our demo.


860
00:38:11,976 --> 00:38:16,036
So like all of you, I've
just been so excited by all


861
00:38:16,036 --> 00:38:17,066
of the features and
all of the APIs


862
00:38:17,066 --> 00:38:18,856
that have been announced
since Monday.


863
00:38:19,506 --> 00:38:23,436
And in particular,
one area of coding


864
00:38:23,436 --> 00:38:26,116
that I was really interested
in, as long as I can remember,


865
00:38:26,116 --> 00:38:27,806
is procedural content
generation.


866
00:38:28,116 --> 00:38:30,696
The idea that a computer can
generate something that is


867
00:38:30,696 --> 00:38:33,876
like a real world is
just fascinating to me.


868
00:38:34,156 --> 00:38:37,516
So when I saw that GameKit
added API specifically for this,


869
00:38:37,516 --> 00:38:40,596
I wanted to jump right in and
get my hands dirty, so I did.


870
00:38:40,996 --> 00:38:45,076
I wasn't quite sure what
I needed, but I looked


871
00:38:45,936 --> 00:38:48,026
at the new APIs, and I saw


872
00:38:48,026 --> 00:38:50,726
that they added this function
called GKPerlinNoiseSource,


873
00:38:50,786 --> 00:38:52,606
and we have help in the app


874
00:38:52,726 --> 00:38:54,826
that shows us all of
the documentation.


875
00:38:54,826 --> 00:38:55,956
So if I tap Help here,


876
00:38:56,456 --> 00:39:00,956
we can see that
GKPerlinNoiseSource has features


877
00:39:00,956 --> 00:39:03,926
that make it good for
generating natural phenomenon,


878
00:39:03,926 --> 00:39:05,016
such as clouds and terrains.


879
00:39:05,016 --> 00:39:07,926
That sounds like
exactly what I wanted.


880
00:39:07,926 --> 00:39:10,246
So I took this, and I just
wrote a couple lines of code,


881
00:39:10,466 --> 00:39:11,796
and I turned it into an image.


882
00:39:12,066 --> 00:39:13,636
So I wanted to look at my image.


883
00:39:14,606 --> 00:39:17,066
So if we run our playground --
for those of you who are used


884
00:39:17,066 --> 00:39:19,466
to Playgrounds on the
desktop, you'll notice


885
00:39:19,746 --> 00:39:21,486
on the right-hand side,
we have a result sidebar.


886
00:39:21,486 --> 00:39:23,476
For those of you who
haven't seen this before,


887
00:39:23,666 --> 00:39:27,796
as your playground executes,
each lines generates a result.


888
00:39:28,006 --> 00:39:29,456
And we can tap on this,


889
00:39:29,856 --> 00:39:33,486
and it'll show a little
popover with our content.


890
00:39:33,486 --> 00:39:37,306
Now this a little bit small, so
I wrote a few more lines just


891
00:39:37,596 --> 00:39:40,756
to zoom in a little bit and
keep it pixely, because I want


892
00:39:40,756 --> 00:39:41,696
to think about the pixels.


893
00:39:41,696 --> 00:39:43,236
We're going to talk
about that in a minute.


894
00:39:43,786 --> 00:39:47,046
So now, I have a much bigger
image, and we can add this


895
00:39:47,046 --> 00:39:50,606
in line with the Add
Viewer button, and it stays


896
00:39:50,746 --> 00:39:52,306
with our code as we scroll.


897
00:39:53,576 --> 00:39:56,166
So now that this is
large, we want to reason


898
00:39:56,166 --> 00:39:57,526
about our image a little bit.


899
00:39:57,526 --> 00:39:58,596
So we generated our noise,


900
00:39:58,596 --> 00:40:00,976
and we want to generate
some 3D terrain with this.


901
00:40:01,196 --> 00:40:04,346
So what we're going to do is
we're going to go pixel by pixel


902
00:40:04,406 --> 00:40:08,326
through this image, and
when the image is dark,


903
00:40:08,326 --> 00:40:10,826
we want it to be a very
low area in our 3D terrain.


904
00:40:10,826 --> 00:40:12,066
And when the image is bright,


905
00:40:12,066 --> 00:40:14,626
we want that to be a very
high image in our terrain.


906
00:40:14,886 --> 00:40:16,816
So you can see in the
upper right-hand corner,


907
00:40:16,816 --> 00:40:19,506
it's a very sort of dark area,
and that's going to be low.


908
00:40:19,506 --> 00:40:21,196
And in the bottom left
corner, it's bright,


909
00:40:21,196 --> 00:40:22,656
so it's going to be high.


910
00:40:22,886 --> 00:40:27,906
So I wrote a just little
small extension on UI image.


911
00:40:28,246 --> 00:40:31,256
It takes an 8-bit grayscale
image, and it just iterates


912
00:40:31,256 --> 00:40:33,806
through the rows and the
columns, and it calls a block


913
00:40:33,806 --> 00:40:38,426
for every position with the
8-bit value at that position,


914
00:40:38,776 --> 00:40:40,416
which we're going to
convert into our height.


915
00:40:41,236 --> 00:40:45,686
Now, because we have a very
small image, it's just 10 by 10,


916
00:40:45,686 --> 00:40:50,616
255 for the full range of 8-bit
images sounds a little bit high.


917
00:40:50,616 --> 00:40:52,506
So I wrote a small bucket
function right here,


918
00:40:52,806 --> 00:40:55,456
and just to prove to myself
that worked, I iterated all


919
00:40:55,456 --> 00:41:00,226
of the possible values of
my bucket, of my integer,


920
00:41:00,606 --> 00:41:05,406
and you can see with our
popover here that it clamps


921
00:41:05,446 --> 00:41:06,806
to a nice stair step function.


922
00:41:07,146 --> 00:41:12,066
So we just get a range from
0 to 4, instead of 0 to 255.


923
00:41:12,066 --> 00:41:15,326
And then we can go over
our image with our block,


924
00:41:15,666 --> 00:41:18,206
and then we end up with a graph
that looks kind of like this.


925
00:41:19,176 --> 00:41:20,856
And this is interesting.


926
00:41:20,856 --> 00:41:25,206
It's kind of cool looking, but
it's not really 3D terrain.


927
00:41:25,206 --> 00:41:27,056
Like, you can see each point


928
00:41:27,056 --> 00:41:29,466
in our image now has an
associated height value,


929
00:41:29,856 --> 00:41:33,446
but it's not exactly
what I wanted to.


930
00:41:33,446 --> 00:41:35,866
And normally, I would
be pretty stuck here.


931
00:41:35,866 --> 00:41:40,006
I don't have the deep knowledge
of 3D APIs to really generate


932
00:41:40,346 --> 00:41:42,416
from scratch the
terrain that I wanted,


933
00:41:42,526 --> 00:41:47,226
and I don't have the 3D skills
as an artist to do this by hand,


934
00:41:47,616 --> 00:41:48,836
but I happen to know
that the Learn


935
00:41:48,836 --> 00:41:53,136
to Code playground has a
Build Your World page in it


936
00:41:53,136 --> 00:41:56,986
that I can use to progress
my experiment here.


937
00:41:57,106 --> 00:41:59,306
So I'm going to move over into
the Learn to Code playground,


938
00:41:59,736 --> 00:42:01,836
and we're going to already
be on the page that I want.


939
00:42:02,416 --> 00:42:04,136
So this is the Create
Your World page,


940
00:42:04,566 --> 00:42:06,236
and if I just run
this really quickly,


941
00:42:07,046 --> 00:42:09,826
you can see that we're just
floating in the clouds here.


942
00:42:10,916 --> 00:42:13,196
So I'm going to paste the
code that I wrote before,


943
00:42:14,136 --> 00:42:16,176
and I want to type for a
minute, so I'm just going


944
00:42:16,176 --> 00:42:16,996
to hide the live view.


945
00:42:17,576 --> 00:42:20,806
And here, where we have our --


946
00:42:21,346 --> 00:42:24,826
where we just echoing
our value before,


947
00:42:24,826 --> 00:42:28,846
we want to turn this
into a 3D world.


948
00:42:29,326 --> 00:42:33,886
So what we want to do is our
Create Your World page provides


949
00:42:33,886 --> 00:42:34,616
us with a world.


950
00:42:35,076 --> 00:42:42,566
So in our world, we want
to place blocks at the x


951
00:42:42,646 --> 00:42:44,006
and y value that we're at.


952
00:42:44,276 --> 00:42:45,966
And we're not taking
into account value,


953
00:42:46,086 --> 00:42:47,996
so we need to make a height,


954
00:42:48,146 --> 00:42:54,826
and we want to call our
bucket function on our value,


955
00:42:56,126 --> 00:43:05,206
and then for our height, we
want to place our blocks.


956
00:43:06,516 --> 00:43:08,836
And I just love this
animation, so I'm going


957
00:43:08,836 --> 00:43:09,546
to do it one more time.


958
00:43:10,706 --> 00:43:11,776
Then if we run this


959
00:43:17,736 --> 00:43:21,936
oh. We forgot to add
our parens, like Max.


960
00:43:23,276 --> 00:43:27,876
So if we run this, you can see


961
00:43:27,876 --> 00:43:30,886
that we're putting
blocks in our world.


962
00:43:31,776 --> 00:43:32,716
And I can see pretty quickly


963
00:43:32,716 --> 00:43:34,176
that this isn't quite
what I expected.


964
00:43:34,176 --> 00:43:37,206
There's these weird
blanks spots in my world,


965
00:43:37,796 --> 00:43:38,886
and I don't want that.


966
00:43:38,886 --> 00:43:41,216
I'm not generating a fantasy
world of flying islands.


967
00:43:41,216 --> 00:43:42,806
I want to generate something
that looks like Earth.


968
00:43:43,306 --> 00:43:45,026
So let's stop that
really quickly.


969
00:43:45,176 --> 00:43:48,636
So these blank spots didn't
really make sense to me


970
00:43:48,636 --> 00:43:50,586
at first, but after a
little bit of thinking,


971
00:43:51,056 --> 00:43:53,856
it's clear that when our height
is 0, because your range is


972
00:43:53,856 --> 00:43:55,706
from 0 to 4 and not 1 to 5,


973
00:43:55,926 --> 00:43:57,576
we're just not putting
a block in.


974
00:43:57,886 --> 00:44:00,456
So our 0 spot seemed like a
good place to put some water.


975
00:44:01,406 --> 00:44:08,806
So if our height is less
than 1 in our world,


976
00:44:09,256 --> 00:44:14,116
we want to place water.


977
00:44:17,476 --> 00:44:21,906
And now, if I tap If with our
structured editing helpers,


978
00:44:21,966 --> 00:44:23,186
we can add an L statement,


979
00:44:23,626 --> 00:44:26,786
and just do what we
were doing before.


980
00:44:27,326 --> 00:44:32,136
And this, I want to speed
it up just a little bit.


981
00:44:32,136 --> 00:44:35,136
So my world also
has a command speed,


982
00:44:36,496 --> 00:44:40,656
and I just want to
crank that up.


983
00:44:40,806 --> 00:44:40,956
Let's


984
00:44:43,956 --> 00:44:45,906
Oh, perfect.


985
00:44:46,286 --> 00:44:54,186
All right, so let's run
this and see what happens.


986
00:44:54,526 --> 00:44:55,956
So now you can see
our world has water.


987
00:44:57,006 --> 00:44:59,646
So this is pretty cool.


988
00:45:00,516 --> 00:45:05,996
[ Applause ]


989
00:45:06,496 --> 00:45:09,776
We went from just sketching with
an API and a blank playground,


990
00:45:10,256 --> 00:45:11,776
and then when we
hit a roadblock,


991
00:45:11,776 --> 00:45:14,296
we moved over into the
Learn to Code playground.


992
00:45:14,666 --> 00:45:17,336
So the Learn to Code
playground, while it's a very,


993
00:45:17,336 --> 00:45:20,176
very valuable tool for learners,
it's also a powerful platform


994
00:45:20,216 --> 00:45:22,776
for seasoned developers
who want to explore APIs


995
00:45:22,776 --> 00:45:24,776
and develop ideas against.


996
00:45:25,206 --> 00:45:27,236
So that was pretty cool.


997
00:45:27,496 --> 00:45:31,686
Now you have the spectrum of
iOS APIs available to you,


998
00:45:31,686 --> 00:45:33,626
and that includes things
like Core Bluetooth.


999
00:45:33,746 --> 00:45:36,226
So I'm going to switch over to
this other iPad really quickly.


1000
00:45:36,766 --> 00:45:42,816
And here, I have a playground
that uses core Bluetooth


1001
00:45:43,396 --> 00:45:45,256
to talk to a peripheral.


1002
00:45:45,866 --> 00:45:55,416
I have a Sphero SPRK Plus here,
and what we can do is I'm going


1003
00:45:55,416 --> 00:45:56,476
to place this on the ground,


1004
00:45:56,476 --> 00:45:57,856
because we need a
little bit of space.


1005
00:45:58,236 --> 00:46:03,326
But what we can do,
when I run my code,


1006
00:46:03,916 --> 00:46:10,516
the Sphero will light
up and start driving.


1007
00:46:11,686 --> 00:46:14,036
And it's just moving
in a square right now,


1008
00:46:14,476 --> 00:46:19,756
but I'm using Core Bluetooth
to control a third-party robot


1009
00:46:20,176 --> 00:46:22,526
from my iPad, and
that's just so fun.


1010
00:46:23,516 --> 00:46:31,026
[ Applause ]


1011
00:46:31,526 --> 00:46:34,646
I want this to just be just
slightly more engaging,


1012
00:46:34,886 --> 00:46:38,806
so I'm going to hide
this for a moment.


1013
00:46:38,806 --> 00:46:44,356
And what I'm going to
do is add some colors.


1014
00:46:44,906 --> 00:46:49,776
So one of our other
structured editing helpers,


1015
00:46:50,106 --> 00:46:53,976
we can just drag our array
out, and add some items.


1016
00:46:54,516 --> 00:46:57,666
[ Applause ]


1017
00:46:58,166 --> 00:46:59,746
And I'm going to make
these all colors.


1018
00:47:06,676 --> 00:47:09,516
You know, these colors right
here seem really familiar,


1019
00:47:09,516 --> 00:47:14,996
but I can't quite
place my finger on it.


1020
00:47:15,746 --> 00:47:20,966
So in a rest function,
we're just going


1021
00:47:20,966 --> 00:47:21,976
to iterate three of these.


1022
00:47:33,176 --> 00:47:35,636
And then instead of
setting our color to white,


1023
00:47:36,606 --> 00:47:38,856
we're going to set to color.


1024
00:47:46,556 --> 00:47:51,966
Let's bring our little
helper back in.


1025
00:47:51,996 --> 00:47:55,936
Let's run this.


1026
00:47:56,076 --> 00:48:01,246
Now we're changing colors
as we're driving our Sphero.


1027
00:48:02,516 --> 00:48:09,716
[ Applause ]


1028
00:48:10,216 --> 00:48:13,326
Stop. That was really fun.


1029
00:48:13,326 --> 00:48:17,276
Now I'm going to bring Matt
back up to wrap things up.


1030
00:48:18,516 --> 00:48:23,886
[ Applause ]


1031
00:48:24,386 --> 00:48:25,606
>> Thank you so much Izzy.


1032
00:48:26,146 --> 00:48:28,196
That is really cool.


1033
00:48:31,536 --> 00:48:32,556
So we've seen a lot today.


1034
00:48:32,866 --> 00:48:36,946
We started out with Max, who
showed you how to use all


1035
00:48:36,946 --> 00:48:39,746
of the great touch controls that
we have in Swift Playgrounds


1036
00:48:40,066 --> 00:48:41,606
to interact with
Swift code in ways


1037
00:48:41,606 --> 00:48:43,056
that we've never been
able to do before.


1038
00:48:43,686 --> 00:48:47,616
Jonathan showed you how to
build engaging content using all


1039
00:48:47,616 --> 00:48:50,086
of the great new features
in Playground Books,


1040
00:48:50,486 --> 00:48:53,326
that way you progressively
explore ideas


1041
00:48:53,326 --> 00:48:55,366
and disclose content
as you go along.


1042
00:48:55,916 --> 00:48:59,576
And Izzy showed you that you're
not limited to the things


1043
00:48:59,576 --> 00:49:02,156
that come in Learn to Code,
that you can experiment


1044
00:49:02,156 --> 00:49:04,736
with the iOS SDK and
interact with things


1045
00:49:04,816 --> 00:49:07,886
in the physical world or even
build a world of your own.


1046
00:49:08,776 --> 00:49:12,086
We think that you're going to
be able to do a lot of really,


1047
00:49:12,436 --> 00:49:15,746
really cool things with Swift
Playgrounds, and we can't wait


1048
00:49:15,746 --> 00:49:17,186
to see what you do with it.


1049
00:49:17,796 --> 00:49:18,926
Thank you.


1050
00:49:19,516 --> 00:49:22,816
[ Applause ]


1051
00:49:23,316 --> 00:49:24,806
We've got more information
available


1052
00:49:24,806 --> 00:49:26,336
on developer.apple.com.


1053
00:49:26,336 --> 00:49:27,546
We're session 408.


1054
00:49:28,276 --> 00:49:28,746
There are, of course,


1055
00:49:28,746 --> 00:49:31,076
some related sessions you might
be interested in checking out.


1056
00:49:31,426 --> 00:49:37,266
Thank you so much everybody,
and enjoy the rest of WWDC.

