1
00:00:07,016 --> 00:00:15,500
[ Music ]


2
00:00:21,516 --> 00:00:26,616
[ Applause ]


3
00:00:27,116 --> 00:00:29,286
>> Hi, welcome to Getting to


4
00:00:29,286 --> 00:00:30,706
Know Swift Package Manager.


5
00:00:31,476 --> 00:00:32,386
I'm Rick Ballard.


6
00:00:32,856 --> 00:00:34,476
With me today is Boris Buegling.


7
00:00:34,726 --> 00:00:35,946
And we're very excited to tell


8
00:00:35,946 --> 00:00:37,356
you all about Swift's Package


9
00:00:37,356 --> 00:00:38,926
Manager, or as we call it


10
00:00:38,926 --> 00:00:40,236
sometimes SwiftPM.


11
00:00:40,236 --> 00:00:43,156
We're going to focus today on


12
00:00:43,156 --> 00:00:44,516
the open source project.


13
00:00:44,716 --> 00:00:46,126
And not on Apple's other


14
00:00:46,126 --> 00:00:47,056
developer tools.


15
00:00:47,266 --> 00:00:48,646
But we've got plenty to tell you


16
00:00:48,646 --> 00:00:49,466
about here today.


17
00:00:50,906 --> 00:00:52,346
The Swift Package Manager makes


18
00:00:52,346 --> 00:00:54,226
it easier to develop and


19
00:00:54,226 --> 00:00:55,926
distribute source code in the


20
00:00:55,926 --> 00:00:56,986
Swift ecosystem.


21
00:00:57,656 --> 00:00:58,576
Today we're going to talk about


22
00:00:58,576 --> 00:01:00,946
its goals, some of its design,


23
00:01:00,946 --> 00:01:02,396
and a little bit about where we


24
00:01:02,396 --> 00:01:03,876
can go from here.


25
00:01:05,275 --> 00:01:06,836
We'll start by telling you a


26
00:01:06,836 --> 00:01:08,526
little bit about why we decided


27
00:01:08,526 --> 00:01:10,126
to create a new Package Manager


28
00:01:10,196 --> 00:01:11,586
as part of the Swift project.


29
00:01:12,426 --> 00:01:13,486
We'll show you little bit about


30
00:01:13,486 --> 00:01:14,186
how to use it.


31
00:01:14,186 --> 00:01:16,276
And then dive into its design


32
00:01:16,276 --> 00:01:17,146
and features.


33
00:01:18,356 --> 00:01:19,396
We'll tell you a little bit


34
00:01:19,396 --> 00:01:20,596
about where we can go in the


35
00:01:20,596 --> 00:01:22,706
future and close out by


36
00:01:22,706 --> 00:01:24,586
describing SwiftPM's open source


37
00:01:24,666 --> 00:01:26,246
process and how you can get


38
00:01:26,246 --> 00:01:27,646
involved if you're interested.


39
00:01:28,796 --> 00:01:30,186
I'm sure most of you are


40
00:01:30,186 --> 00:01:31,486
familiar with package managers


41
00:01:31,986 --> 00:01:33,506
they're a great way to share and


42
00:01:33,506 --> 00:01:34,276
reuse code.


43
00:01:34,276 --> 00:01:36,146
But why did we decide to create


44
00:01:36,146 --> 00:01:37,946
a new one for Swift?


45
00:01:39,576 --> 00:01:41,356
First of all, Swift is a


46
00:01:41,356 --> 00:01:42,646
cross-platform language.


47
00:01:42,906 --> 00:01:43,836
So we wanted a great


48
00:01:43,836 --> 00:01:45,446
cross-platform tool for building


49
00:01:45,446 --> 00:01:46,096
your Swift code.


50
00:01:46,996 --> 00:01:48,376
This makes it easy to configure


51
00:01:48,376 --> 00:01:49,866
your code in a consistent way


52
00:01:49,866 --> 00:01:51,596
and run it on all of Swift's


53
00:01:51,666 --> 00:01:52,936
supported platforms.


54
00:01:53,696 --> 00:01:55,386
SwiftPM includes its own


55
00:01:55,386 --> 00:01:57,166
complete build system, allowing


56
00:01:57,166 --> 00:01:58,856
you to configure your software,


57
00:01:59,176 --> 00:02:01,786
build it, test it, and even run


58
00:02:01,786 --> 00:02:02,976
it from one tool.


59
00:02:07,556 --> 00:02:08,916
We also wanted to make it as


60
00:02:08,916 --> 00:02:10,485
easy as possible for you to


61
00:02:10,485 --> 00:02:12,856
share your Swift libraries with


62
00:02:12,856 --> 00:02:14,836
anyone wherever they are by


63
00:02:15,116 --> 00:02:16,676
providing a canonical package


64
00:02:16,676 --> 00:02:18,976
manager in the Swift project, we


65
00:02:18,976 --> 00:02:20,626
hope to define a common standard


66
00:02:20,686 --> 00:02:21,516
for the way that you can


67
00:02:21,516 --> 00:02:22,706
distribute your libraries.


68
00:02:23,466 --> 00:02:24,676
This makes it easy to grow the


69
00:02:24,676 --> 00:02:26,506
Swift ecosystem and make Swift


70
00:02:26,546 --> 00:02:27,546
better for everyone.


71
00:02:28,006 --> 00:02:31,426
Many of you may have great ideas


72
00:02:31,626 --> 00:02:32,846
for features that you'd like to


73
00:02:32,846 --> 00:02:33,206
add.


74
00:02:33,626 --> 00:02:34,756
But we'd like to be careful


75
00:02:34,756 --> 00:02:36,276
about what is added to the core


76
00:02:36,276 --> 00:02:37,966
libraries so we can maintain a


77
00:02:37,966 --> 00:02:39,426
careful and curated API.


78
00:02:40,486 --> 00:02:41,966
A great package manager makes it


79
00:02:41,966 --> 00:02:43,446
easy to distribute these ideas


80
00:02:43,866 --> 00:02:45,976
as packages instead of having to


81
00:02:45,976 --> 00:02:47,866
put them into the core library.


82
00:02:48,576 --> 00:02:50,386
The best ideas can organically


83
00:02:50,386 --> 00:02:52,156
gain traction with the community


84
00:02:52,156 --> 00:02:53,486
over time and become


85
00:02:53,486 --> 00:02:55,066
increasingly standardized.


86
00:02:56,516 --> 00:02:58,486
Finally, by building a package


87
00:02:58,486 --> 00:03:00,496
manager alongside Swift, we're


88
00:03:00,496 --> 00:03:01,746
able to take advantage of


89
00:03:01,746 --> 00:03:03,676
Swift's power and philosophy.


90
00:03:04,716 --> 00:03:06,406
SwiftPM is itself written in


91
00:03:06,406 --> 00:03:08,376
Swift and it's even a Swift


92
00:03:08,376 --> 00:03:08,896
package.


93
00:03:09,656 --> 00:03:10,836
Beyond that, we have the


94
00:03:10,836 --> 00:03:13,116
opportunity to work closely with


95
00:03:13,156 --> 00:03:14,676
the Swift language and core


96
00:03:14,676 --> 00:03:16,806
library projects to build great


97
00:03:16,806 --> 00:03:18,076
package manager features that


98
00:03:18,076 --> 00:03:19,576
will help your Swift code sing.


99
00:03:21,006 --> 00:03:23,106
SwiftPM is part of the Swift


100
00:03:23,106 --> 00:03:25,306
open source project, and has its


101
00:03:25,306 --> 00:03:27,936
own presence on Swift.org, and


102
00:03:28,036 --> 00:03:28,636
on GitHub.


103
00:03:29,596 --> 00:03:30,636
The Swift Package Manager


104
00:03:30,636 --> 00:03:32,886
section of Swift.org is a great


105
00:03:32,886 --> 00:03:34,286
place to go to get started.


106
00:03:35,596 --> 00:03:37,456
When you're ready to try it out


107
00:03:37,456 --> 00:03:38,836
you can find it included in


108
00:03:38,836 --> 00:03:40,696
every Swift toolchain, also


109
00:03:40,696 --> 00:03:42,426
downloadable from Swift.org.


110
00:03:43,106 --> 00:03:44,946
And of course, it's included in


111
00:03:44,946 --> 00:03:46,856
every release of Xcode alongside


112
00:03:46,856 --> 00:03:47,746
the Swift tools.


113
00:03:49,166 --> 00:03:50,386
So, to start telling you a


114
00:03:50,386 --> 00:03:51,716
little bit about how to use it,


115
00:03:52,166 --> 00:03:53,186
I'd like to invite Boris


116
00:03:53,186 --> 00:03:54,546
Buegling up to show you the


117
00:03:54,546 --> 00:03:54,976
basics.


118
00:03:55,516 --> 00:04:02,500
[ Applause ]


119
00:04:07,076 --> 00:04:08,376
>> Thanks, Rick.


120
00:04:08,376 --> 00:04:09,796
Let's take a look at how to use


121
00:04:09,796 --> 00:04:10,366
SwiftPM.


122
00:04:12,736 --> 00:04:15,096
SwiftPM consists of four command


123
00:04:15,096 --> 00:04:16,976
line tools, and at the top level


124
00:04:16,976 --> 00:04:17,666
Swift Command.


125
00:04:18,466 --> 00:04:20,136
Swift Build, to build your


126
00:04:20,136 --> 00:04:20,726
package.


127
00:04:21,065 --> 00:04:23,066
Swift Run to run its executable


128
00:04:23,066 --> 00:04:23,676
products.


129
00:04:24,096 --> 00:04:26,466
Swift Test to run tests.


130
00:04:26,986 --> 00:04:29,326
And Swift Package to run various


131
00:04:29,326 --> 00:04:31,956
non-build operations on the


132
00:04:32,996 --> 00:04:33,176
package.


133
00:04:33,316 --> 00:04:34,756
Packages are stored in git


134
00:04:34,756 --> 00:04:35,566
repositories.


135
00:04:35,986 --> 00:04:37,876
And diversions are represented


136
00:04:37,916 --> 00:04:38,756
by git tags.


137
00:04:41,656 --> 00:04:43,496
Next, I'm going to show you a


138
00:04:43,496 --> 00:04:45,866
demo of how easy it is to create


139
00:04:45,866 --> 00:04:47,416
your own first Swift Package.


140
00:04:51,136 --> 00:04:54,026
We start in terminal, and we


141
00:04:54,026 --> 00:04:56,246
create a new directory, called


142
00:04:56,246 --> 00:04:56,886
helloworld.


143
00:04:57,806 --> 00:04:58,926
This will also be the name of


144
00:04:58,926 --> 00:04:59,656
our package.


145
00:05:00,386 --> 00:05:02,706
Switch to that directory and we


146
00:05:02,706 --> 00:05:06,656
will run Swift Package init with


147
00:05:06,656 --> 00:05:08,046
the type executable.


148
00:05:08,576 --> 00:05:12,166
With this, SwiftPM creates a


149
00:05:12,166 --> 00:05:13,716
basic package and structure for


150
00:05:13,716 --> 00:05:14,006
us.


151
00:05:15,096 --> 00:05:18,306
Let's open finder to look at it


152
00:05:18,306 --> 00:05:19,556
a little bit more closely.


153
00:05:29,046 --> 00:05:30,426
We have the Package.swift


154
00:05:30,426 --> 00:05:32,046
manifest file, which describes


155
00:05:32,076 --> 00:05:33,356
the structure of the package.


156
00:05:33,746 --> 00:05:34,656
We get a basic README.


157
00:05:34,656 --> 00:05:38,026
You have the Sources directory


158
00:05:39,086 --> 00:05:40,266
with a subfolder for our


159
00:05:40,266 --> 00:05:41,176
helloworld target.


160
00:05:41,836 --> 00:05:43,736
And the main.swift file for our


161
00:05:43,736 --> 00:05:44,306
executable.


162
00:05:44,986 --> 00:05:46,286
You also get a test directory,


163
00:05:46,486 --> 00:05:47,946
where we could later put some


164
00:05:47,946 --> 00:05:48,476
unit tests.


165
00:05:49,186 --> 00:05:52,146
Let's switch back to terminal.


166
00:05:52,816 --> 00:05:58,296
And we will type swift run to


167
00:05:58,296 --> 00:06:00,126
build and run this package.


168
00:06:00,466 --> 00:06:03,066
This compiles the package, links


169
00:06:03,066 --> 00:06:05,056
executable, and we see


170
00:06:05,056 --> 00:06:06,266
helloworld is the output.


171
00:06:06,766 --> 00:06:09,366
Next, I'm going to switch to


172
00:06:09,366 --> 00:06:10,766
another terminal window, where


173
00:06:10,766 --> 00:06:12,076
I've prepared a more complex


174
00:06:12,136 --> 00:06:12,566
package.


175
00:06:12,706 --> 00:06:13,656
We will use this in the


176
00:06:13,656 --> 00:06:16,926
following to discuss the basic


177
00:06:17,116 --> 00:06:18,276
concepts of SwiftPM.


178
00:06:19,026 --> 00:06:22,106
But, first, let's also just run


179
00:06:22,106 --> 00:06:23,346
it to see what it does.


180
00:06:24,236 --> 00:06:25,986
So, you can see, it outputs


181
00:06:25,986 --> 00:06:27,546
randomly generated playing cards


182
00:06:27,986 --> 00:06:28,666
to the terminal.


183
00:06:35,076 --> 00:06:36,666
Now, we can switch back to the


184
00:06:36,666 --> 00:06:39,816
slides to talk about SwiftPM's


185
00:06:39,866 --> 00:06:40,816
basic concepts.


186
00:06:47,436 --> 00:06:49,186
A package consists of three


187
00:06:49,186 --> 00:06:51,006
major parts; dependencies,


188
00:06:52,576 --> 00:06:57,206
targets and products.


189
00:06:57,736 --> 00:06:59,666
And we'll look into each of


190
00:06:59,666 --> 00:07:01,356
these in more detail in the


191
00:07:01,356 --> 00:07:01,876
following.


192
00:07:04,036 --> 00:07:05,836
Dependencies are those Swift


193
00:07:05,836 --> 00:07:08,336
packages that you can use when


194
00:07:08,336 --> 00:07:09,476
developing your features.


195
00:07:10,146 --> 00:07:14,346
Each dependency provides one or


196
00:07:14,346 --> 00:07:16,736
more products such as libraries


197
00:07:17,256 --> 00:07:18,466
that your package can use.


198
00:07:19,046 --> 00:07:21,816
Let's take a look at how


199
00:07:21,816 --> 00:07:23,286
dependencies look in the package


200
00:07:23,286 --> 00:07:26,216
of Swift manifest file.


201
00:07:26,426 --> 00:07:27,816
Each dependency has a source


202
00:07:27,816 --> 00:07:31,486
location and it is versioned.


203
00:07:35,576 --> 00:07:37,436
Targets are the basic building


204
00:07:37,436 --> 00:07:38,646
blocks of packages.


205
00:07:39,786 --> 00:07:42,076
A target describes how to build


206
00:07:42,076 --> 00:07:44,736
a set of source files into


207
00:07:45,156 --> 00:07:47,606
either a module or a test suite.


208
00:07:49,956 --> 00:07:51,856
Targets can depend on other


209
00:07:51,856 --> 00:07:54,736
targets of the same package and


210
00:07:56,456 --> 00:07:58,716
on products exported from other


211
00:07:58,716 --> 00:08:00,106
packages, declared as


212
00:08:00,106 --> 00:08:00,776
dependencies.


213
00:08:02,976 --> 00:08:04,656
Products are executable to


214
00:08:04,656 --> 00:08:08,396
libraries and products are


215
00:08:08,396 --> 00:08:09,476
assembled from the build


216
00:08:09,476 --> 00:08:11,506
artifacts of one or more target.


217
00:08:13,996 --> 00:08:16,166
Packages provide libraries for


218
00:08:16,166 --> 00:08:18,426
other packages by defining


219
00:08:18,426 --> 00:08:18,836
products.


220
00:08:19,726 --> 00:08:22,536
By default, you do not have to


221
00:08:22,536 --> 00:08:23,946
declare the type of library


222
00:08:23,946 --> 00:08:26,726
explicitly, but SwiftPM will


223
00:08:26,726 --> 00:08:28,906
choose it for you based on its


224
00:08:28,906 --> 00:08:29,356
use.


225
00:08:30,446 --> 00:08:32,346
If needed, you can explicitly


226
00:08:32,346 --> 00:08:34,586
declare a library a static or


227
00:08:34,586 --> 00:08:34,976
dynamic.


228
00:08:35,586 --> 00:08:38,496
Let's take a look how our


229
00:08:38,496 --> 00:08:40,756
targets are configured in the


230
00:08:41,746 --> 00:08:42,066
manifest.


231
00:08:42,066 --> 00:08:43,466
In our example, we have three


232
00:08:43,466 --> 00:08:43,996
targets.


233
00:08:45,916 --> 00:08:47,866
The first is called libdealer,


234
00:08:48,046 --> 00:08:49,186
and it contains the


235
00:08:49,496 --> 00:08:50,886
implementation of our main


236
00:08:50,886 --> 00:08:51,646
functionality.


237
00:08:52,496 --> 00:08:53,906
And it has one dependency, the


238
00:08:53,906 --> 00:08:55,036
deck of playing cards product


239
00:08:55,946 --> 00:08:58,266
which comes from the dependency


240
00:08:58,266 --> 00:08:59,096
we declared earlier.


241
00:09:00,896 --> 00:09:03,206
Second target, dealer depends on


242
00:09:03,206 --> 00:09:04,946
that to provide the command line


243
00:09:04,946 --> 00:09:06,536
tool that we just run earlier.


244
00:09:07,096 --> 00:09:10,756
And finally, we also have a test


245
00:09:10,756 --> 00:09:12,126
target that depends on the two


246
00:09:12,126 --> 00:09:13,696
other targets and this is where


247
00:09:13,696 --> 00:09:14,366
we can unit test our


248
00:09:14,366 --> 00:09:14,956
functionality.


249
00:09:20,026 --> 00:09:21,436
In our example package, we have


250
00:09:21,436 --> 00:09:23,206
also configured two products.


251
00:09:24,646 --> 00:09:26,676
The first is a library product


252
00:09:27,206 --> 00:09:28,616
corresponding to the libdealer


253
00:09:28,616 --> 00:09:29,026
target.


254
00:09:30,066 --> 00:09:31,806
And this provides our


255
00:09:31,806 --> 00:09:33,736
implementation as a library for


256
00:09:33,736 --> 00:09:34,746
external consumption.


257
00:09:35,186 --> 00:09:39,016
Second, we have an executable


258
00:09:39,016 --> 00:09:41,166
target depending on the dealer


259
00:09:41,166 --> 00:09:43,916
target which provides an


260
00:09:43,916 --> 00:09:45,526
executable for command line use.


261
00:09:50,496 --> 00:09:52,686
To complete this section, I will


262
00:09:52,686 --> 00:09:53,886
show you how we can use a


263
00:09:53,886 --> 00:09:55,596
package to add a new feature to


264
00:09:55,596 --> 00:09:56,306
the example.


265
00:09:59,836 --> 00:10:01,216
This, we switch to a new


266
00:10:01,216 --> 00:10:03,686
terminal window and we open up


267
00:10:04,116 --> 00:10:05,806
the package.swift manifest file.


268
00:10:05,806 --> 00:10:10,636
We want to add a new dependency.


269
00:10:10,896 --> 00:10:15,156
In this case, this is actually


270
00:10:15,156 --> 00:10:16,136
SwiftPM itself.


271
00:10:16,216 --> 00:10:19,296
As Rick told you, it is itself,


272
00:10:19,346 --> 00:10:20,426
its own Swift Package.


273
00:10:20,856 --> 00:10:22,446
It doesn't provide a stable API,


274
00:10:22,606 --> 00:10:23,686
though, that is why we're


275
00:10:23,686 --> 00:10:25,166
depending on an exact version


276
00:10:25,166 --> 00:10:25,486
number.


277
00:10:27,516 --> 00:10:30,146
We also want to depend on one of


278
00:10:30,146 --> 00:10:32,086
its products in the libdealer


279
00:10:32,086 --> 00:10:32,476
target.


280
00:10:33,016 --> 00:10:34,206
It is called utility.


281
00:10:34,546 --> 00:10:37,716
And among other things, it has a


282
00:10:37,716 --> 00:10:40,146
class called terminal


283
00:10:40,146 --> 00:10:42,026
controller, which provides us


284
00:10:42,216 --> 00:10:43,866
with the possibility to color


285
00:10:43,996 --> 00:10:46,326
the terminal output.


286
00:10:46,476 --> 00:10:48,056
Note however, that this is no


287
00:10:48,056 --> 00:10:49,986
official Apple API, we're just


288
00:10:49,986 --> 00:10:51,196
using it for the demo.


289
00:10:51,756 --> 00:10:54,476
Let's switch back to the


290
00:10:54,476 --> 00:10:54,906
terminal.


291
00:10:57,136 --> 00:10:59,576
I already changed the code to


292
00:10:59,576 --> 00:11:01,156
make use of the new dependency


293
00:11:02,016 --> 00:11:03,496
before this demo.


294
00:11:03,876 --> 00:11:06,716
So, we can just run it to see


295
00:11:06,716 --> 00:11:07,226
the result.


296
00:11:07,716 --> 00:11:09,926
And as you can see, we have the


297
00:11:09,926 --> 00:11:11,346
same output, but now it's a


298
00:11:11,346 --> 00:11:12,946
little bit more fun with some


299
00:11:12,946 --> 00:11:13,346
colors.


300
00:11:19,096 --> 00:11:20,856
I want to show you one last demo


301
00:11:22,656 --> 00:11:24,746
which is how SwiftPM can run


302
00:11:24,746 --> 00:11:24,986
tests.


303
00:11:25,526 --> 00:11:27,606
For this, we're using the Swift


304
00:11:27,606 --> 00:11:28,566
Neo package.


305
00:11:29,096 --> 00:11:30,636
A networking library that Apple


306
00:11:31,006 --> 00:11:32,286
open source earlier in the


307
00:11:32,286 --> 00:11:32,686
spring.


308
00:11:33,236 --> 00:11:37,986
We will run Swift Test with a


309
00:11:38,226 --> 00:11:39,366
parallel option.


310
00:11:40,806 --> 00:11:42,006
This allows us to run tests in


311
00:11:42,006 --> 00:11:42,576
parallel.


312
00:11:42,656 --> 00:11:44,186
So, you get your test results


313
00:11:44,186 --> 00:11:44,656
faster.


314
00:11:45,216 --> 00:11:46,586
And we also pass the filter


315
00:11:46,586 --> 00:11:47,036
option.


316
00:11:49,396 --> 00:11:51,156
This allows you to run a subset


317
00:11:51,156 --> 00:11:53,186
of tests to you can iterate on a


318
00:11:53,186 --> 00:11:53,926
single future.


319
00:11:57,736 --> 00:12:00,356
This will now again compile our


320
00:12:01,166 --> 00:12:04,186
package and run the tests in


321
00:12:04,186 --> 00:12:05,236
just a few seconds.


322
00:12:09,136 --> 00:12:10,716
And as you can see, we get a


323
00:12:10,716 --> 00:12:13,236
nice progress bar and the tests


324
00:12:13,286 --> 00:12:14,536
finish really fast, because we


325
00:12:14,536 --> 00:12:15,636
were running them in parallel.


326
00:12:18,026 --> 00:12:19,566
Let's switch back to the slides


327
00:12:19,566 --> 00:12:19,836
again.


328
00:12:26,536 --> 00:12:27,776
Next, I'm going to talk to you


329
00:12:27,776 --> 00:12:29,456
about the design of the Swift


330
00:12:29,456 --> 00:12:29,936
Package Manager.


331
00:12:36,216 --> 00:12:37,986
SwiftPM follows Swift's


332
00:12:37,986 --> 00:12:38,606
philosophy.


333
00:12:38,986 --> 00:12:40,706
It is fast, safe, and


334
00:12:40,706 --> 00:12:41,146
expressive.


335
00:12:41,816 --> 00:12:44,736
It is safe due to its isolated


336
00:12:44,736 --> 00:12:46,426
build environment and the fact


337
00:12:46,426 --> 00:12:48,046
the builds cannot run arbitrary


338
00:12:48,046 --> 00:12:48,546
commands.


339
00:12:49,256 --> 00:12:52,116
It is fast due to using a build


340
00:12:52,116 --> 00:12:53,896
engine that is scalable to large


341
00:12:53,896 --> 00:12:54,886
dependency graphs.


342
00:12:55,416 --> 00:12:58,526
And it's expressive due to using


343
00:12:58,636 --> 00:12:59,926
the Swift language for the


344
00:12:59,926 --> 00:13:00,716
package manifest.


345
00:13:01,426 --> 00:13:04,136
And this also allows you to use


346
00:13:04,136 --> 00:13:05,376
a programming language you're


347
00:13:05,376 --> 00:13:06,346
already familiar with.


348
00:13:06,956 --> 00:13:11,346
For the rest of the section, I


349
00:13:11,346 --> 00:13:12,436
will take you on a journey


350
00:13:12,436 --> 00:13:13,726
through the different steps you


351
00:13:13,726 --> 00:13:15,046
will encounter when creating


352
00:13:15,046 --> 00:13:16,136
your own Swift packages.


353
00:13:16,766 --> 00:13:18,736
We will start with


354
00:13:18,736 --> 00:13:19,576
configuration.


355
00:13:23,096 --> 00:13:25,126
As we saw earlier, SwiftPM's


356
00:13:25,126 --> 00:13:26,796
manifest is based on Swift.


357
00:13:27,336 --> 00:13:28,906
Using Swift makes it easy to


358
00:13:28,906 --> 00:13:31,116
understand because there is no


359
00:13:31,116 --> 00:13:32,136
new language to learn.


360
00:13:32,736 --> 00:13:34,646
We follow Swift's API design


361
00:13:34,646 --> 00:13:36,876
guidelines to make it even more


362
00:13:36,876 --> 00:13:37,416
familiar.


363
00:13:38,216 --> 00:13:40,216
And, it allows us to take


364
00:13:40,216 --> 00:13:42,216
advantage of existing tooling


365
00:13:42,276 --> 00:13:47,086
written for Swift, but when


366
00:13:47,086 --> 00:13:48,586
writing your own manifest, you


367
00:13:48,586 --> 00:13:50,076
should still prefer declarative


368
00:13:50,076 --> 00:13:51,946
syntax and avoid side effects.


369
00:13:53,236 --> 00:13:54,586
Because SwiftPM makes no


370
00:13:54,586 --> 00:13:56,766
guarantees about when or how


371
00:13:56,766 --> 00:13:58,746
often your source code is being


372
00:13:58,746 --> 00:13:59,406
evaluated.


373
00:14:00,316 --> 00:14:01,836
On the left-hand side here, you


374
00:14:01,836 --> 00:14:03,846
see an example that is not


375
00:14:03,846 --> 00:14:04,686
really declarative.


376
00:14:05,416 --> 00:14:06,886
We cannot see the name that is


377
00:14:06,886 --> 00:14:09,656
being generated and it's used in


378
00:14:09,656 --> 00:14:10,956
a couple of times across the


379
00:14:10,956 --> 00:14:11,526
package.


380
00:14:12,076 --> 00:14:14,726
In contrast, on the right-hand


381
00:14:14,726 --> 00:14:15,736
side, we have a fully


382
00:14:15,736 --> 00:14:17,486
declarative manifest by using


383
00:14:17,486 --> 00:14:18,406
string constants.


384
00:14:18,666 --> 00:14:20,356
It is easy to understand and see


385
00:14:20,746 --> 00:14:21,726
what the targets are.


386
00:14:23,556 --> 00:14:25,526
So, as you can see, not using


387
00:14:25,526 --> 00:14:27,086
declarative syntax also makes


388
00:14:27,086 --> 00:14:28,056
your manifest harder to


389
00:14:28,056 --> 00:14:29,596
understand for you and your


390
00:14:29,596 --> 00:14:29,976
users.


391
00:14:33,146 --> 00:14:35,226
Source files organized on disks


392
00:14:35,296 --> 00:14:36,786
in folders named after each


393
00:14:36,786 --> 00:14:38,806
target in the package.


394
00:14:39,426 --> 00:14:40,846
This makes it easy to get


395
00:14:40,846 --> 00:14:43,216
started and allows packages to


396
00:14:43,246 --> 00:14:46,336
adopt a common structure, so


397
00:14:46,516 --> 00:14:47,466
that you can navigate them


398
00:14:47,466 --> 00:14:47,796
quickly.


399
00:14:50,856 --> 00:14:52,496
Package Managers and other build


400
00:14:52,496 --> 00:14:54,506
tools often have attention


401
00:14:55,036 --> 00:14:56,696
between what is explicitly


402
00:14:56,696 --> 00:14:58,636
configured by the user and the


403
00:14:58,636 --> 00:15:00,256
conventions that are imposed by


404
00:15:00,256 --> 00:15:00,976
the Package Manager.


405
00:15:06,046 --> 00:15:07,586
As I told you earlier, the


406
00:15:07,586 --> 00:15:09,126
source file is automatically


407
00:15:09,126 --> 00:15:10,616
picked up from convention base


408
00:15:10,616 --> 00:15:12,746
locations on disk, so that you


409
00:15:12,746 --> 00:15:14,286
can very easily add or remove


410
00:15:14,286 --> 00:15:15,936
source files without having to


411
00:15:16,006 --> 00:15:17,316
edit the package manifest.


412
00:15:19,496 --> 00:15:21,096
Products and targets, however,


413
00:15:21,656 --> 00:15:23,326
are worth explicitly configuring


414
00:15:23,326 --> 00:15:26,376
to make it easier to understand


415
00:15:26,376 --> 00:15:28,436
the package and what it defines


416
00:15:28,676 --> 00:15:29,736
without needing to cross


417
00:15:29,736 --> 00:15:31,206
reference with the layout on


418
00:15:31,206 --> 00:15:31,506
disk.


419
00:15:32,816 --> 00:15:33,876
It also makes it easy for


420
00:15:33,876 --> 00:15:36,346
clients to see what a package


421
00:15:36,346 --> 00:15:38,406
provides just by looking at the


422
00:15:38,406 --> 00:15:38,846
manifest.


423
00:15:42,236 --> 00:15:44,756
SwiftPM also supports building


424
00:15:44,756 --> 00:15:45,926
source code for other program


425
00:15:45,926 --> 00:15:47,766
manager languages, such as C,


426
00:15:47,766 --> 00:15:49,456
C++, and Objective-C.


427
00:15:50,156 --> 00:15:51,496
This allows integration with


428
00:15:51,496 --> 00:15:52,276
existing code.


429
00:15:53,456 --> 00:15:54,826
Note however that we do not


430
00:15:54,826 --> 00:15:56,516
support mixing those languages


431
00:15:56,946 --> 00:15:58,646
with Swift in the same target.


432
00:15:59,086 --> 00:16:03,266
Next, we're going to look at


433
00:16:03,366 --> 00:16:04,646
dependencies and versioning.


434
00:16:07,916 --> 00:16:10,006
To make sure your packages can


435
00:16:10,006 --> 00:16:12,116
benefit from bug fixes without


436
00:16:12,116 --> 00:16:14,136
constant churn, Swift packages


437
00:16:14,356 --> 00:16:15,856
should adhere to semantic


438
00:16:15,856 --> 00:16:16,306
versioning.


439
00:16:17,606 --> 00:16:19,186
This is a commonly used standard


440
00:16:19,346 --> 00:16:20,656
which assign specific semantic


441
00:16:20,656 --> 00:16:22,246
meaning to each of a version


442
00:16:22,246 --> 00:16:23,246
number's components.


443
00:16:25,376 --> 00:16:27,236
The major version signifies


444
00:16:27,276 --> 00:16:29,996
breaking changes which required


445
00:16:30,146 --> 00:16:31,936
clients to update their code.


446
00:16:33,196 --> 00:16:34,756
Examples for the changes could


447
00:16:34,756 --> 00:16:36,516
be deleting an existing type,


448
00:16:36,996 --> 00:16:38,566
deleting a message, or changing


449
00:16:38,566 --> 00:16:39,236
its signature.


450
00:16:40,166 --> 00:16:42,066
But they also include backwards


451
00:16:42,066 --> 00:16:45,296
incompatible bug fixes, or major


452
00:16:45,296 --> 00:16:48,366
changes to the behavior of


453
00:16:48,366 --> 00:16:50,066
existing API.


454
00:16:50,896 --> 00:16:52,406
The minor version should be


455
00:16:52,406 --> 00:16:53,946
updated if functionality is


456
00:16:53,946 --> 00:16:55,646
added in a backwards compatible


457
00:16:55,646 --> 00:16:56,006
manner.


458
00:16:57,046 --> 00:16:58,456
Examples for this is adding a


459
00:16:58,456 --> 00:17:00,106
new method or type.


460
00:17:00,996 --> 00:17:02,896
And finally, the patch version


461
00:17:02,896 --> 00:17:04,465
should be increased when you're


462
00:17:04,465 --> 00:17:06,165
making backwards compatible bug


463
00:17:06,226 --> 00:17:06,736
fixes.


464
00:17:08,276 --> 00:17:10,776
This allows clients to benefit


465
00:17:10,776 --> 00:17:13,536
from bug fixes without risking


466
00:17:13,536 --> 00:17:17,695
breaking the source code.


467
00:17:17,816 --> 00:17:19,536
SwiftPM needs to determine the


468
00:17:19,536 --> 00:17:21,296
exact versions of all packages


469
00:17:21,296 --> 00:17:23,246
in the package graph before it


470
00:17:23,246 --> 00:17:24,056
is ready to build.


471
00:17:24,705 --> 00:17:26,526
We do this with a process called


472
00:17:26,526 --> 00:17:27,756
dependency resolution.


473
00:17:28,716 --> 00:17:30,796
As part of this, SwiftPM looks


474
00:17:30,796 --> 00:17:32,376
at all the requirements


475
00:17:33,456 --> 00:17:36,206
specified for packages and finds


476
00:17:36,346 --> 00:17:37,516
the latest version that is


477
00:17:37,516 --> 00:17:40,146
compatible with all of them.


478
00:17:40,216 --> 00:17:41,396
Let's take a closer look at what


479
00:17:41,396 --> 00:17:42,926
SwiftPM is doing in the process


480
00:17:42,926 --> 00:17:44,836
using the demo I showed you


481
00:17:44,836 --> 00:17:45,306
before.


482
00:17:47,136 --> 00:17:49,676
The dealer package from the demo


483
00:17:49,676 --> 00:17:51,066
has two direct dependencies.


484
00:17:51,476 --> 00:17:53,796
One, is SwiftPM itself, and the


485
00:17:53,796 --> 00:17:55,206
other one is deck of playing


486
00:17:57,956 --> 00:17:58,136
cards.


487
00:17:58,276 --> 00:17:59,666
SwiftPM will resolve the


488
00:17:59,666 --> 00:18:00,796
versions of these direct


489
00:18:00,796 --> 00:18:01,456
dependencies.


490
00:18:02,366 --> 00:18:03,666
For the first one, this is


491
00:18:03,666 --> 00:18:05,086
straightforward because we


492
00:18:05,086 --> 00:18:06,536
specified an exact version,


493
00:18:07,886 --> 00:18:09,336
beginning exactly that tag.


494
00:18:10,446 --> 00:18:11,886
For the second one, we're using


495
00:18:11,886 --> 00:18:12,866
the from syntax.


496
00:18:13,286 --> 00:18:14,986
That means we're getting updates


497
00:18:14,986 --> 00:18:17,106
to the minor or patch


498
00:18:17,106 --> 00:18:17,826
components.


499
00:18:18,356 --> 00:18:21,766
In this case, we're ending up


500
00:18:21,896 --> 00:18:24,046
with a tag 3.1.4.


501
00:18:24,596 --> 00:18:28,566
The whole process is recursive.


502
00:18:29,206 --> 00:18:30,876
So next SwiftPM will look at the


503
00:18:30,876 --> 00:18:32,546
transitive dependencies of all


504
00:18:32,546 --> 00:18:33,296
diary points.


505
00:18:33,726 --> 00:18:34,716
So, PM has no further


506
00:18:34,716 --> 00:18:36,656
dependencies, so there's nothing


507
00:18:36,656 --> 00:18:37,146
to do there.


508
00:18:37,706 --> 00:18:39,686
But a deck of playing cards


509
00:18:39,796 --> 00:18:41,236
depends on the Fisher-Yates and


510
00:18:41,236 --> 00:18:42,346
playing card packages.


511
00:18:42,916 --> 00:18:47,426
Next, SwiftPM has to resolve the


512
00:18:47,426 --> 00:18:48,776
versions of these packages


513
00:18:48,776 --> 00:18:49,176
again.


514
00:18:49,576 --> 00:18:50,976
For the Fisher-Yates package,


515
00:18:51,066 --> 00:18:52,966
this works the same way as


516
00:18:52,966 --> 00:18:54,546
before because we are also using


517
00:18:54,546 --> 00:18:55,576
the from syntax.


518
00:18:56,666 --> 00:18:57,906
In this case, we're ending up


519
00:18:57,906 --> 00:18:59,626
with a tag, 2.2.5.


520
00:19:00,146 --> 00:19:02,716
For the playing card package,


521
00:19:02,986 --> 00:19:04,326
we're using up to the next minor


522
00:19:04,326 --> 00:19:04,976
syntax.


523
00:19:05,446 --> 00:19:06,866
This means, we're getting only


524
00:19:06,866 --> 00:19:08,316
updates to the patch component.


525
00:19:09,566 --> 00:19:10,466
You might want to use that


526
00:19:10,466 --> 00:19:11,786
syntax if you want to be more


527
00:19:11,786 --> 00:19:13,416
conservative as a dependency and


528
00:19:13,416 --> 00:19:14,576
only take bug fixes.


529
00:19:15,216 --> 00:19:17,786
In this case, we're ending up


530
00:19:17,786 --> 00:19:21,916
with a tag 3.0.2.


531
00:19:22,066 --> 00:19:23,626
Finally, when looking at a


532
00:19:23,626 --> 00:19:26,486
target, SwiftPM has to match up


533
00:19:26,576 --> 00:19:28,456
its required products with the


534
00:19:28,456 --> 00:19:30,606
packages that we resolved.


535
00:19:31,186 --> 00:19:32,556
For this, we're looking at the


536
00:19:32,556 --> 00:19:34,996
dealer target from the demo, and


537
00:19:34,996 --> 00:19:36,696
as you can see, the utility


538
00:19:36,696 --> 00:19:39,176
product is provided by the


539
00:19:39,176 --> 00:19:40,346
SwiftPM package.


540
00:19:41,476 --> 00:19:43,116
And the rest of the packages


541
00:19:43,786 --> 00:19:45,186
provide the other products.


542
00:19:45,646 --> 00:19:50,156
After dependency resolution, the


543
00:19:50,156 --> 00:19:52,106
resolves are recorded in a file


544
00:19:52,106 --> 00:19:53,236
called package.resolved.


545
00:19:53,816 --> 00:19:56,106
the purpose of this file is so


546
00:19:56,106 --> 00:19:57,556
that you can share the resolve


547
00:19:57,606 --> 00:19:59,086
versions with other members of


548
00:19:59,086 --> 00:20:01,076
your team, or your continuous


549
00:20:01,576 --> 00:20:03,496
integration infrastructure, so


550
00:20:03,496 --> 00:20:04,676
that you get dependable build


551
00:20:04,676 --> 00:20:05,896
results, and you can


552
00:20:05,896 --> 00:20:07,436
deliberately choose when you


553
00:20:07,436 --> 00:20:10,976
want to update a dependency.


554
00:20:11,046 --> 00:20:12,536
You do so by running Swift


555
00:20:12,536 --> 00:20:13,716
Package Update, when you're


556
00:20:13,716 --> 00:20:14,406
ready to update.


557
00:20:15,366 --> 00:20:17,466
Note also, that this is your


558
00:20:17,466 --> 00:20:19,896
top-level package that contains


559
00:20:19,936 --> 00:20:21,286
package.resolved.


560
00:20:22,176 --> 00:20:23,126
If one of the transitive


561
00:20:23,126 --> 00:20:24,626
dependencies contains a


562
00:20:24,626 --> 00:20:26,606
package.resolve file, it will be


563
00:20:26,606 --> 00:20:27,876
ignored for dependency


564
00:20:27,876 --> 00:20:28,506
resolution.


565
00:20:30,776 --> 00:20:32,206
Next, let's take a look at


566
00:20:32,206 --> 00:20:36,796
building your package.


567
00:20:36,796 --> 00:20:38,446
SwiftPM uses llbuild as its


568
00:20:38,446 --> 00:20:39,846
underlying build engine.


569
00:20:40,526 --> 00:20:42,146
llbuild is a set of libraries


570
00:20:42,146 --> 00:20:43,156
for building build systems.


571
00:20:43,726 --> 00:20:45,146
And it's built around a general


572
00:20:45,146 --> 00:20:47,176
purpose and reusable build


573
00:20:47,176 --> 00:20:47,546
engine.


574
00:20:47,956 --> 00:20:49,836
This provides us with ability to


575
00:20:49,836 --> 00:20:51,396
do fast as well as correct


576
00:20:51,396 --> 00:20:52,206
incremental builds.


577
00:20:53,056 --> 00:20:54,926
And is also used by Xcode's new


578
00:20:54,926 --> 00:20:55,536
build system.


579
00:20:56,096 --> 00:20:59,606
It is also the part of the Swift


580
00:20:59,606 --> 00:21:00,606
open source project.


581
00:21:02,796 --> 00:21:04,806
Developing software in isolation


582
00:21:04,876 --> 00:21:06,266
with all dependencies explicitly


583
00:21:06,266 --> 00:21:10,686
declared ensures that even


584
00:21:10,686 --> 00:21:11,776
packages with complex


585
00:21:11,776 --> 00:21:13,476
requirements can be reliably


586
00:21:13,476 --> 00:21:15,036
built and used in different


587
00:21:15,036 --> 00:21:15,736
environments.


588
00:21:17,016 --> 00:21:18,376
Instead of installing packages


589
00:21:18,376 --> 00:21:19,596
globally into the system,


590
00:21:19,786 --> 00:21:21,506
SwiftPM only allows you to use


591
00:21:21,506 --> 00:21:23,366
packages that you explicitly


592
00:21:23,366 --> 00:21:23,956
depend on.


593
00:21:25,166 --> 00:21:26,176
We also leverage build


594
00:21:26,176 --> 00:21:29,116
sandboxing so that nothing can


595
00:21:29,116 --> 00:21:30,526
write to arbitrary locations on


596
00:21:30,526 --> 00:21:31,786
the file system during the


597
00:21:31,786 --> 00:21:32,106
build.


598
00:21:33,546 --> 00:21:36,216
SwiftPM does not allow executing


599
00:21:36,216 --> 00:21:37,676
arbitrary commands, or shell


600
00:21:37,676 --> 00:21:39,056
scripts, as part of the build.


601
00:21:40,246 --> 00:21:41,326
This allows us to fully


602
00:21:41,326 --> 00:21:44,016
understand your build graph and


603
00:21:44,396 --> 00:21:46,396
all of its inputs and outputs to


604
00:21:46,396 --> 00:21:48,516
do fast, as well as correct,


605
00:21:48,566 --> 00:21:49,366
incremental builds.


606
00:21:50,166 --> 00:21:52,486
Because we have a view of all


607
00:21:52,486 --> 00:21:53,326
your dependencies.


608
00:21:53,946 --> 00:21:56,726
As I showed you in the demo


609
00:21:56,726 --> 00:21:59,016
before, SwiftPM also supports


610
00:21:59,046 --> 00:21:59,496
testing.


611
00:22:00,076 --> 00:22:01,386
This is based on the XCTest


612
00:22:01,386 --> 00:22:02,716
framework that you're already


613
00:22:02,716 --> 00:22:03,306
familiar with.


614
00:22:03,916 --> 00:22:07,136
We support parallel testing, so


615
00:22:07,136 --> 00:22:08,026
that you can get your test


616
00:22:08,026 --> 00:22:08,876
results faster.


617
00:22:10,036 --> 00:22:12,766
And we support test filtering so


618
00:22:12,766 --> 00:22:13,856
that you can run a subset of


619
00:22:13,886 --> 00:22:15,566
tests and iterate on a single


620
00:22:15,566 --> 00:22:15,936
feature.


621
00:22:16,496 --> 00:22:20,816
As we're evolving SwiftPM, we're


622
00:22:20,816 --> 00:22:21,726
thinking about workflow


623
00:22:21,726 --> 00:22:23,776
features, especially so that you


624
00:22:23,776 --> 00:22:25,116
can do all of your development


625
00:22:25,116 --> 00:22:27,526
on the command line.


626
00:22:27,716 --> 00:22:29,376
One such feature is edit mode,


627
00:22:30,246 --> 00:22:31,476
which allows overwriting all


628
00:22:31,476 --> 00:22:32,876
transitive occurrences of a


629
00:22:32,876 --> 00:22:34,986
specific package, with a locally


630
00:22:34,986 --> 00:22:37,186
checked out copy so that


631
00:22:37,386 --> 00:22:40,626
temporary edits can be made, and


632
00:22:40,626 --> 00:22:41,766
changes to transitive


633
00:22:41,766 --> 00:22:43,326
dependencies can be tested


634
00:22:43,806 --> 00:22:44,996
without having to forward all


635
00:22:44,996 --> 00:22:46,836
packages in the graph upfront.


636
00:22:51,036 --> 00:22:53,396
Branch dependencies allow


637
00:22:53,396 --> 00:22:54,826
depending on packages without


638
00:22:54,826 --> 00:22:56,346
strict versioning requirements.


639
00:22:56,626 --> 00:22:58,146
This is useful when you're


640
00:22:58,146 --> 00:22:59,496
developing multiple packages


641
00:22:59,666 --> 00:23:00,076
together.


642
00:23:01,276 --> 00:23:02,396
This is a development only


643
00:23:02,396 --> 00:23:04,816
feature, so you have to change


644
00:23:04,816 --> 00:23:06,446
to certain version dependencies


645
00:23:06,706 --> 00:23:10,786
before you publish a tag.


646
00:23:10,986 --> 00:23:12,636
Local packages allow you to use


647
00:23:12,636 --> 00:23:14,526
packages directly from the file


648
00:23:14,526 --> 00:23:16,536
system, instead of from a git


649
00:23:16,536 --> 00:23:17,296
repository.


650
00:23:17,806 --> 00:23:19,056
This is useful to make it


651
00:23:19,056 --> 00:23:22,876
possible to bring up multiple


652
00:23:22,876 --> 00:23:24,306
packages during the initial


653
00:23:24,306 --> 00:23:24,816
creation.


654
00:23:27,936 --> 00:23:29,566
So, last topic, I want to talk


655
00:23:29,566 --> 00:23:30,996
to you about adopting new


656
00:23:30,996 --> 00:23:32,426
versions of SwiftPM and the


657
00:23:32,426 --> 00:23:33,176
Swift language.


658
00:23:33,746 --> 00:23:37,766
Each new version of Swift can


659
00:23:37,766 --> 00:23:39,156
bring a new version of the


660
00:23:39,156 --> 00:23:40,866
package.swift manifest API.


661
00:23:41,796 --> 00:23:43,146
The previous API is still


662
00:23:43,146 --> 00:23:45,876
available, so that you can take


663
00:23:45,876 --> 00:23:47,366
advantage of new source tools


664
00:23:47,556 --> 00:23:48,716
without having to update your


665
00:23:48,716 --> 00:23:51,226
package or losing access to


666
00:23:51,226 --> 00:23:52,316
existing packages.


667
00:23:53,576 --> 00:23:55,156
New API can be adopted


668
00:23:55,626 --> 00:23:57,676
independently of changing to a


669
00:23:57,676 --> 00:23:59,466
new Swift language version for


670
00:23:59,466 --> 00:24:00,546
your packages' source code.


671
00:24:01,146 --> 00:24:05,546
To specify which version of the


672
00:24:05,546 --> 00:24:08,006
API is being used, we're using


673
00:24:08,006 --> 00:24:09,476
the Swift Tools Version command


674
00:24:10,526 --> 00:24:12,036
at the top of the package.swift


675
00:24:12,066 --> 00:24:12,846
manifest file.


676
00:24:13,446 --> 00:24:15,306
This specifies the minimum


677
00:24:15,306 --> 00:24:16,476
required version of the Swift


678
00:24:16,476 --> 00:24:19,266
tools that is needed to process


679
00:24:19,266 --> 00:24:20,226
the given manifest.


680
00:24:20,686 --> 00:24:24,056
Each package can also declare


681
00:24:24,176 --> 00:24:25,356
which versions of the Swift


682
00:24:25,356 --> 00:24:27,936
language it uses for compiling


683
00:24:27,936 --> 00:24:28,646
its source code.


684
00:24:29,536 --> 00:24:31,186
This is a list, so you can


685
00:24:31,186 --> 00:24:32,436
choose to support multiple


686
00:24:32,436 --> 00:24:34,216
versions of Swift with the same


687
00:24:34,216 --> 00:24:35,566
version of your package, by


688
00:24:35,566 --> 00:24:36,846
using compiler directives.


689
00:24:37,816 --> 00:24:39,256
A package graph can be a


690
00:24:39,256 --> 00:24:40,796
mix-and-match of packages with


691
00:24:40,796 --> 00:24:41,826
different language versions.


692
00:24:44,456 --> 00:24:45,866
I told you a lot about how


693
00:24:45,866 --> 00:24:48,136
SwiftPM works today, next I'd


694
00:24:48,136 --> 00:24:49,516
like to invite Rick back up to


695
00:24:49,516 --> 00:24:51,746
the stage to tell you where we


696
00:24:51,746 --> 00:24:52,476
can go from here.


697
00:24:53,516 --> 00:24:58,626
[ Applause ]


698
00:24:59,126 --> 00:24:59,946
>> Thanks, Boris.


699
00:25:01,286 --> 00:25:02,416
So, Boris has shown you what you


700
00:25:02,416 --> 00:25:04,856
can do today, but there's a lot


701
00:25:04,856 --> 00:25:06,136
more potential out there.


702
00:25:06,586 --> 00:25:08,426
SwiftPM is still a young project


703
00:25:08,426 --> 00:25:09,716
with lots of room to grow.


704
00:25:11,216 --> 00:25:13,396
Swift uses an open evolution


705
00:25:13,396 --> 00:25:14,986
process which means that anyone,


706
00:25:15,206 --> 00:25:17,116
including you, can contribute


707
00:25:17,116 --> 00:25:17,956
your ideas.


708
00:25:18,926 --> 00:25:19,796
If you're looking for some


709
00:25:19,796 --> 00:25:21,596
inspiration, we'd like to share


710
00:25:21,596 --> 00:25:23,736
some of our ideas, but none of


711
00:25:23,736 --> 00:25:25,136
this is a plan of record.


712
00:25:25,946 --> 00:25:27,086
We're sharing these ideas so


713
00:25:27,086 --> 00:25:28,586
that you can see the potential


714
00:25:28,586 --> 00:25:29,956
of the Swift Package Manager.


715
00:25:30,276 --> 00:25:32,276
And we welcome you to provide


716
00:25:32,276 --> 00:25:33,926
your feedback, comments, and


717
00:25:33,926 --> 00:25:35,906
your own ideas as we evolve is


718
00:25:36,066 --> 00:25:36,706
this product.


719
00:25:38,216 --> 00:25:39,636
The ideas I'm going to cover


720
00:25:39,806 --> 00:25:41,266
today break down into four


721
00:25:41,266 --> 00:25:42,106
different themes.


722
00:25:43,256 --> 00:25:44,396
Letting the Swift Package


723
00:25:44,396 --> 00:25:45,806
Manager integrate with other


724
00:25:45,806 --> 00:25:47,176
tools that may want to sit on


725
00:25:47,176 --> 00:25:47,756
top of it.


726
00:25:47,756 --> 00:25:50,366
Helping you publish new versions


727
00:25:50,366 --> 00:25:52,136
of your package and deploy their


728
00:25:52,136 --> 00:25:52,756
products.


729
00:25:53,726 --> 00:25:55,806
Supporting more complex packages


730
00:25:55,886 --> 00:25:57,136
than SwiftPM is able to build


731
00:25:57,136 --> 00:25:57,606
today.


732
00:25:57,606 --> 00:25:59,606
And finally, some forward


733
00:25:59,606 --> 00:26:01,066
looking thoughts on package


734
00:26:01,096 --> 00:26:02,646
discovery and trust.


735
00:26:02,986 --> 00:26:05,896
While the SwiftPM command line


736
00:26:05,896 --> 00:26:07,726
experience is important, we want


737
00:26:07,726 --> 00:26:09,036
to make sure that SwiftPM can


738
00:26:09,036 --> 00:26:11,026
integrate with other tools, such


739
00:26:11,026 --> 00:26:12,386
as development environments,


740
00:26:12,676 --> 00:26:14,316
automation, and more.


741
00:26:15,706 --> 00:26:16,846
We've already laid the


742
00:26:16,846 --> 00:26:18,096
groundwork for this with


743
00:26:18,096 --> 00:26:19,776
SwiftPM's library-based


744
00:26:19,776 --> 00:26:20,466
architecture.


745
00:26:21,356 --> 00:26:22,726
SwiftPM doesn't have a stable


746
00:26:22,726 --> 00:26:25,076
API today, but for tools that


747
00:26:25,076 --> 00:26:26,296
are willing to keep up with the


748
00:26:26,296 --> 00:26:28,186
SwiftPM changes, it's available


749
00:26:28,186 --> 00:26:30,226
for adoption and additions


750
00:26:30,226 --> 00:26:30,686
today.


751
00:26:32,256 --> 00:26:33,646
If you're looking to build


752
00:26:33,646 --> 00:26:35,156
support for SwiftPM into your


753
00:26:35,156 --> 00:26:36,956
developer tools, we welcome your


754
00:26:36,956 --> 00:26:38,446
contributions and discussion.


755
00:26:38,856 --> 00:26:40,786
We want to make SwiftPM part of


756
00:26:40,786 --> 00:26:42,256
a thriving ecosystem of


757
00:26:42,256 --> 00:26:43,196
developer tools.


758
00:26:43,476 --> 00:26:46,666
One thing we've seen requested


759
00:26:46,666 --> 00:26:48,596
recently on the Swift forums is


760
00:26:48,596 --> 00:26:50,406
a way for people to edit their


761
00:26:50,406 --> 00:26:52,276
package.swift manifest from


762
00:26:52,276 --> 00:26:53,946
automated tools, instead of


763
00:26:53,946 --> 00:26:55,796
making their users always edit


764
00:26:55,796 --> 00:26:56,966
the source code directly.


765
00:26:57,746 --> 00:26:59,166
We think that it's possible for


766
00:26:59,166 --> 00:27:00,536
SwiftPM to support this,


767
00:27:00,876 --> 00:27:03,196
probably by using libSyntax.


768
00:27:04,056 --> 00:27:05,926
libSyntax is a library being


769
00:27:05,926 --> 00:27:07,296
developed in the Swift open


770
00:27:07,296 --> 00:27:08,856
source project that makes it


771
00:27:08,856 --> 00:27:11,256
easier for you to understand and


772
00:27:11,256 --> 00:27:13,536
manipulate Swift syntax from


773
00:27:13,536 --> 00:27:14,336
other tools.


774
00:27:15,476 --> 00:27:17,546
Boris told you earlier that you


775
00:27:17,546 --> 00:27:19,556
should prefer declarative syntax


776
00:27:19,636 --> 00:27:21,236
for your package.swift manifest,


777
00:27:21,526 --> 00:27:22,986
and this is another reason why.


778
00:27:22,986 --> 00:27:25,006
That will make it much easier


779
00:27:25,006 --> 00:27:26,526
for SwiftPM to understand your


780
00:27:26,526 --> 00:27:28,076
manifest, so that it can make


781
00:27:28,076 --> 00:27:29,706
automatic changes, such as


782
00:27:29,706 --> 00:27:31,106
adding new dependencies or


783
00:27:31,106 --> 00:27:32,486
targets as shown here.


784
00:27:32,996 --> 00:27:36,286
So, there's a lot of room for


785
00:27:36,286 --> 00:27:37,906
SwiftPM also to add new


786
00:27:37,906 --> 00:27:39,016
functionality to help you


787
00:27:39,016 --> 00:27:40,176
publish new versions of your


788
00:27:40,176 --> 00:27:41,876
packages and deploy their


789
00:27:41,876 --> 00:27:42,596
products.


790
00:27:43,916 --> 00:27:45,776
Today, when you want to publish


791
00:27:45,776 --> 00:27:46,996
a new version of your package,


792
00:27:47,346 --> 00:27:49,056
you tag it manually with git.


793
00:27:49,056 --> 00:27:51,286
And if you want to inspect your


794
00:27:51,286 --> 00:27:52,976
published tags, you use git


795
00:27:52,976 --> 00:27:54,096
directly for that as well.


796
00:27:55,356 --> 00:27:56,986
We could add new functionality


797
00:27:57,146 --> 00:27:58,956
to automate this process and


798
00:27:58,956 --> 00:28:00,786
perform additional housekeeping,


799
00:28:00,786 --> 00:28:02,676
validation, and other auxiliary


800
00:28:02,676 --> 00:28:04,466
tasks you might want as part of


801
00:28:04,466 --> 00:28:05,506
a streamlined publishing


802
00:28:05,506 --> 00:28:06,046
workflow.


803
00:28:07,796 --> 00:28:09,726
One especially useful feature we


804
00:28:09,726 --> 00:28:11,206
could add here would be


805
00:28:11,316 --> 00:28:12,686
assistance with maintaining


806
00:28:12,686 --> 00:28:14,056
correct semantic versioning.


807
00:28:14,696 --> 00:28:17,176
We could have SwiftPM analyze


808
00:28:17,176 --> 00:28:18,776
the API differences in the new


809
00:28:18,776 --> 00:28:20,226
version of your package and


810
00:28:20,226 --> 00:28:21,736
detect when you've made a change


811
00:28:21,886 --> 00:28:22,976
that is not compatible at


812
00:28:22,976 --> 00:28:24,656
compile time, so that it can


813
00:28:24,656 --> 00:28:26,186
suggest updating the major


814
00:28:26,186 --> 00:28:27,726
version of your package.


815
00:28:30,916 --> 00:28:32,326
Another thing we could do is


816
00:28:32,326 --> 00:28:34,286
make it easier to deploy the


817
00:28:34,286 --> 00:28:36,156
products of your packages from


818
00:28:36,156 --> 00:28:36,516
SwiftPM.


819
00:28:36,516 --> 00:28:39,606
You may want to customize the


820
00:28:39,606 --> 00:28:41,636
linkage with libraries, or the


821
00:28:41,636 --> 00:28:43,586
product layout for your specific


822
00:28:43,626 --> 00:28:45,086
deployment environment, whether


823
00:28:45,086 --> 00:28:46,526
local or on a server.


824
00:28:47,326 --> 00:28:48,886
Or, maybe you want to include


825
00:28:48,886 --> 00:28:50,696
version information about what


826
00:28:50,696 --> 00:28:52,516
packages were built into the


827
00:28:52,516 --> 00:28:53,006
product.


828
00:28:54,076 --> 00:28:55,736
Or, you otherwise want to use


829
00:28:55,736 --> 00:28:57,316
the context that SwiftPM has


830
00:28:57,366 --> 00:28:59,226
about your packages somewhere in


831
00:28:59,226 --> 00:28:59,816
your product.


832
00:29:00,516 --> 00:29:02,106
SwiftPM could add new commands


833
00:29:02,106 --> 00:29:03,666
to support all of these needs.


834
00:29:05,836 --> 00:29:07,196
There's a lot that you can build


835
00:29:07,196 --> 00:29:09,266
with SwiftPM today, but we also


836
00:29:09,266 --> 00:29:10,736
want to be able to support more


837
00:29:10,736 --> 00:29:12,276
complex packages with more


838
00:29:12,276 --> 00:29:13,486
sophisticated needs.


839
00:29:14,916 --> 00:29:16,356
The biggest gap we have right


840
00:29:16,356 --> 00:29:17,906
now, is probably support for


841
00:29:17,906 --> 00:29:18,646
resources.


842
00:29:18,836 --> 00:29:20,836
If you have any images, data


843
00:29:20,836 --> 00:29:22,726
files, or other assets, SwiftPM


844
00:29:22,726 --> 00:29:24,386
currently provides no way to


845
00:29:24,386 --> 00:29:25,426
bundle these up you're your


846
00:29:25,426 --> 00:29:25,966
products.


847
00:29:27,096 --> 00:29:28,626
The foundation core library,


848
00:29:28,626 --> 00:29:30,716
actually just added API this


849
00:29:30,716 --> 00:29:33,276
spring for doing resources in a


850
00:29:33,276 --> 00:29:35,586
cross-platform manner so SwiftPM


851
00:29:35,586 --> 00:29:37,316
could adopt this API if we want


852
00:29:37,316 --> 00:29:38,046
to build this feature.


853
00:29:39,896 --> 00:29:41,736
We know that some users also


854
00:29:41,736 --> 00:29:43,496
want support for specifying


855
00:29:43,496 --> 00:29:45,446
compiler flags, linker flags,


856
00:29:45,746 --> 00:29:47,026
and other properties that


857
00:29:47,026 --> 00:29:48,686
SwiftPM doesn't support today.


858
00:29:48,796 --> 00:29:51,216
It would be really great for us


859
00:29:51,216 --> 00:29:52,946
to add a robust build settings


860
00:29:52,946 --> 00:29:55,136
model, potentially including


861
00:29:55,136 --> 00:29:56,386
things like conditional


862
00:29:56,386 --> 00:29:58,776
settings, or fine-grain control


863
00:29:58,776 --> 00:30:00,146
over what parts of the package


864
00:30:00,216 --> 00:30:01,526
get which setting values.


865
00:30:03,636 --> 00:30:04,866
Boris also talked to you earlier


866
00:30:04,866 --> 00:30:06,786
about SwiftPM build isolation,


867
00:30:06,786 --> 00:30:08,026
and why it's important.


868
00:30:09,206 --> 00:30:10,456
We don't let you run arbitrary


869
00:30:10,456 --> 00:30:11,206
shell scripts.


870
00:30:11,626 --> 00:30:13,696
But many users may want some


871
00:30:13,696 --> 00:30:14,906
level of customization for their


872
00:30:14,906 --> 00:30:16,416
build, either because they want


873
00:30:16,416 --> 00:30:18,216
to support custom languages, or


874
00:30:18,216 --> 00:30:19,976
processors, they want to run


875
00:30:19,976 --> 00:30:21,026
their own documentation


876
00:30:21,026 --> 00:30:22,686
generator implementor, or they


877
00:30:22,686 --> 00:30:24,166
have other steps that they need


878
00:30:24,166 --> 00:30:25,826
to bring to the build process.


879
00:30:26,776 --> 00:30:27,926
We think that SwiftPM could


880
00:30:27,926 --> 00:30:29,836
support this safely, possibly


881
00:30:29,836 --> 00:30:32,196
even through real tools packages


882
00:30:32,196 --> 00:30:33,506
that bring new tools into your


883
00:30:33,506 --> 00:30:34,366
build process.


884
00:30:34,956 --> 00:30:36,226
The important thing we need to


885
00:30:36,226 --> 00:30:37,746
make sure here, if we do such a


886
00:30:37,746 --> 00:30:39,706
feature, is that any new tool


887
00:30:39,706 --> 00:30:40,716
that's brought into the build


888
00:30:40,716 --> 00:30:42,306
process have to correctly


889
00:30:42,306 --> 00:30:44,196
declare their input and output


890
00:30:44,246 --> 00:30:46,166
dependencies, so SwiftPM can


891
00:30:46,166 --> 00:30:48,286
continue to maintain correct


892
00:30:48,366 --> 00:30:50,476
incremental, and parallelizable


893
00:30:50,476 --> 00:30:50,946
builds.


894
00:30:53,596 --> 00:30:54,876
Finally, I want to talk a little


895
00:30:54,876 --> 00:30:56,446
bit about some forward-looking


896
00:30:56,446 --> 00:30:58,306
thoughts on package discovery,


897
00:30:58,556 --> 00:31:00,406
trust, and management.


898
00:31:00,906 --> 00:31:04,026
Git itself supports, the


899
00:31:04,026 --> 00:31:05,226
protocols that get supports,


900
00:31:05,546 --> 00:31:07,116
provides security mechanisms


901
00:31:07,116 --> 00:31:08,786
like TLS to make sure that


902
00:31:08,786 --> 00:31:10,056
you're actually talking to the


903
00:31:10,056 --> 00:31:11,446
remote repository that you think


904
00:31:11,446 --> 00:31:11,826
you are.


905
00:31:12,356 --> 00:31:14,036
But a malicious actor could


906
00:31:14,036 --> 00:31:15,496
still compromise remote


907
00:31:15,496 --> 00:31:17,296
repository and put malicious


908
00:31:17,326 --> 00:31:18,876
content in.


909
00:31:19,166 --> 00:31:20,186
This is actually something


910
00:31:20,186 --> 00:31:21,536
anytime you're using third-party


911
00:31:21,536 --> 00:31:22,996
code, you should be aware of


912
00:31:22,996 --> 00:31:24,006
these sorts of risks.


913
00:31:24,376 --> 00:31:25,706
But the Swift Package Manager


914
00:31:25,856 --> 00:31:27,776
provides a great opportunity for


915
00:31:27,776 --> 00:31:29,686
us to build security features to


916
00:31:29,686 --> 00:31:30,996
make sure that you're actually


917
00:31:30,996 --> 00:31:32,366
getting the package content that


918
00:31:32,366 --> 00:31:33,016
you expected.


919
00:31:35,456 --> 00:31:37,546
SwiftPM also prevents your


920
00:31:37,546 --> 00:31:39,026
package.swift manifest


921
00:31:39,026 --> 00:31:41,206
evaluation in your build from


922
00:31:41,206 --> 00:31:42,876
escaping and writing things out


923
00:31:42,876 --> 00:31:44,266
into your file system or


924
00:31:44,266 --> 00:31:45,316
accessing the network.


925
00:31:45,756 --> 00:31:47,686
We're using macOS' sandboxing


926
00:31:47,686 --> 00:31:49,066
technology for this today.


927
00:31:49,066 --> 00:31:49,786
And it's great.


928
00:31:50,096 --> 00:31:51,166
But we'd like to bring this kind


929
00:31:51,166 --> 00:31:52,666
of security to other platforms


930
00:31:52,666 --> 00:31:53,126
as well.


931
00:31:55,596 --> 00:31:56,966
Many users may want to be able


932
00:31:56,966 --> 00:31:58,566
to fork their packages easily,


933
00:31:58,916 --> 00:32:00,346
either because they want to make


934
00:32:00,346 --> 00:32:02,086
a private customization to one


935
00:32:02,086 --> 00:32:03,456
of the packages in their graph.


936
00:32:04,046 --> 00:32:05,416
Or, even because they just want


937
00:32:05,416 --> 00:32:08,006
to override the origin URL of


938
00:32:08,006 --> 00:32:09,016
where they're getting each of


939
00:32:09,016 --> 00:32:10,406
those packages from, so that


940
00:32:10,406 --> 00:32:12,516
they can point at a private


941
00:32:12,516 --> 00:32:14,846
mirror that they control and not


942
00:32:14,876 --> 00:32:16,616
depend on the original package


943
00:32:16,676 --> 00:32:20,116
always being there.


944
00:32:20,286 --> 00:32:21,636
Ultimately, I'd like some day


945
00:32:21,636 --> 00:32:23,096
for us to have a real index for


946
00:32:23,096 --> 00:32:23,966
Swift packages.


947
00:32:24,636 --> 00:32:25,846
In addition to providing a


948
00:32:25,846 --> 00:32:27,936
standardized namespace and


949
00:32:27,936 --> 00:32:29,476
making it easier to discover new


950
00:32:29,476 --> 00:32:31,696
packages, we could even support


951
00:32:31,696 --> 00:32:33,926
things like quality metrics for


952
00:32:33,926 --> 00:32:34,416
a package.


953
00:32:34,416 --> 00:32:35,656
Like what is its automated test


954
00:32:35,656 --> 00:32:36,146
coverage?


955
00:32:36,636 --> 00:32:38,466
Or ways for you to evaluate the


956
00:32:38,466 --> 00:32:40,246
trustworthiness of a new package


957
00:32:40,246 --> 00:32:40,966
that you're considering


958
00:32:40,966 --> 00:32:41,476
adopting.


959
00:32:41,976 --> 00:32:45,106
So, I've gone over a lot here.


960
00:32:45,306 --> 00:32:46,296
But these are just some of the


961
00:32:46,296 --> 00:32:47,236
possibilities.


962
00:32:47,616 --> 00:32:49,256
Ultimately for those of you, who


963
00:32:49,256 --> 00:32:51,066
are interested, we're interested


964
00:32:51,066 --> 00:32:52,846
in your feedback, ideas, and


965
00:32:52,846 --> 00:32:54,606
contributions to help make Swift


966
00:32:54,606 --> 00:32:56,126
Package Manager the best tool


967
00:32:56,126 --> 00:32:57,236
that it can be for the developer


968
00:32:57,236 --> 00:32:57,756
community.


969
00:32:58,686 --> 00:33:00,726
So, to talk about how you can do


970
00:33:00,726 --> 00:33:02,146
that if you'd like to, I'd like


971
00:33:02,146 --> 00:33:03,486
to talk about Swift's open


972
00:33:03,486 --> 00:33:04,476
source process.


973
00:33:05,756 --> 00:33:07,506
As I said earlier, the Package


974
00:33:07,506 --> 00:33:09,126
Manager is part of the Swift


975
00:33:09,126 --> 00:33:10,306
open source project.


976
00:33:10,926 --> 00:33:12,686
And Swift.org is also a great


977
00:33:12,686 --> 00:33:14,306
place to go if you want to learn


978
00:33:14,306 --> 00:33:15,816
about the community and the


979
00:33:15,816 --> 00:33:16,536
process.


980
00:33:18,306 --> 00:33:20,786
SwiftPM uses the Swift language


981
00:33:20,856 --> 00:33:23,176
evolution process which means


982
00:33:23,176 --> 00:33:25,696
anyone can submit a proposal for


983
00:33:25,696 --> 00:33:28,336
major new features or changes to


984
00:33:28,476 --> 00:33:29,616
the Swift Package Manager.


985
00:33:31,156 --> 00:33:32,826
Before you go off and draft a


986
00:33:32,826 --> 00:33:34,396
whole formal proposal though, I


987
00:33:34,466 --> 00:33:36,036
recommend that you swing by the


988
00:33:36,036 --> 00:33:37,676
Package Manager section of the


989
00:33:37,676 --> 00:33:39,636
Swift forums and socialize your


990
00:33:39,636 --> 00:33:40,726
idea with the community.


991
00:33:41,246 --> 00:33:42,456
You may get a lot of feedback


992
00:33:42,526 --> 00:33:44,256
that helps make your idea even


993
00:33:44,256 --> 00:33:44,576
better.


994
00:33:45,156 --> 00:33:47,916
If you're interested in dipping


995
00:33:47,916 --> 00:33:48,936
your toe in the water with a


996
00:33:48,936 --> 00:33:50,756
smaller contribution the Swift


997
00:33:50,756 --> 00:33:52,786
bug tracker at bugs.swift.org


998
00:33:52,786 --> 00:33:54,856
has plenty of ideas.


999
00:33:54,856 --> 00:33:55,966
In particular, you may want to


1000
00:33:55,966 --> 00:33:57,756
look for bugs tagged with this


1001
00:33:57,756 --> 00:33:58,756
starter bug tag.


1002
00:33:59,266 --> 00:34:00,656
And since, as I said, SwiftPM is


1003
00:34:00,656 --> 00:34:02,226
written in Swift, you may find


1004
00:34:02,436 --> 00:34:03,606
it's actually pretty easy to


1005
00:34:03,606 --> 00:34:04,886
dive in and take a look.


1006
00:34:05,346 --> 00:34:07,836
Of course, if you find bugs when


1007
00:34:07,836 --> 00:34:09,306
you're using SwiftPM, we


1008
00:34:09,306 --> 00:34:10,746
encourage you to go file them on


1009
00:34:10,746 --> 00:34:12,525
bugs.swift.org as well, where


1010
00:34:12,525 --> 00:34:14,396
you can track how we handle


1011
00:34:16,456 --> 00:34:16,556
them.


1012
00:34:16,755 --> 00:34:18,166
SwiftPM gets to take advantage


1013
00:34:18,166 --> 00:34:19,656
of the same great continuous


1014
00:34:19,656 --> 00:34:20,926
integration infrastructure that


1015
00:34:20,926 --> 00:34:21,956
the Swift project has.


1016
00:34:22,356 --> 00:34:23,516
Which means that poll requests


1017
00:34:23,516 --> 00:34:25,126
can be automatically built and


1018
00:34:25,126 --> 00:34:26,646
had their tests run before their


1019
00:34:26,646 --> 00:34:27,116
merged.


1020
00:34:27,766 --> 00:34:29,206
Because the SwiftPM code base


1021
00:34:29,206 --> 00:34:30,815
itself has great test coverage,


1022
00:34:31,116 --> 00:34:31,775
we found that this


1023
00:34:31,775 --> 00:34:33,206
infrastructure is really useful


1024
00:34:33,206 --> 00:34:33,755
for us.


1025
00:34:35,356 --> 00:34:36,806
When you're ready to try out the


1026
00:34:36,806 --> 00:34:38,686
latest changes, you can download


1027
00:34:38,686 --> 00:34:40,436
the Trunk Snapshot Toolchains


1028
00:34:40,536 --> 00:34:41,775
that are updated on a regular


1029
00:34:41,775 --> 00:34:44,156
basis available on Swift.org.


1030
00:34:46,456 --> 00:34:47,866
We've been really happy with the


1031
00:34:47,866 --> 00:34:49,306
growth of the SwiftPM community


1032
00:34:49,306 --> 00:34:49,746
so far.


1033
00:34:49,956 --> 00:34:51,876
We've had over 180 people


1034
00:34:51,876 --> 00:34:53,626
contribute, either with bug


1035
00:34:53,626 --> 00:34:55,146
features or new features.


1036
00:34:55,636 --> 00:34:57,276
And the Swift Package ecosystem


1037
00:34:57,276 --> 00:34:58,446
is growing at a healthy rate as


1038
00:34:58,446 --> 00:35:00,216
well, often with cross-platform


1039
00:35:00,216 --> 00:35:01,736
packages, and many public


1040
00:35:01,736 --> 00:35:03,236
packages available on GitHub.


1041
00:35:04,086 --> 00:35:05,296
What this means is that you can


1042
00:35:05,296 --> 00:35:06,666
focus on what makes your product


1043
00:35:06,666 --> 00:35:08,406
special and let package


1044
00:35:08,406 --> 00:35:10,086
dependencies handle the rest.


1045
00:35:10,086 --> 00:35:12,346
There are a couple things that I


1046
00:35:12,346 --> 00:35:13,966
recommend you try SwiftPM out


1047
00:35:14,116 --> 00:35:15,456
for today, even though it has a


1048
00:35:15,456 --> 00:35:16,326
lot of room to grow in the


1049
00:35:16,326 --> 00:35:16,766
future.


1050
00:35:17,136 --> 00:35:19,126
Those two things are command


1051
00:35:19,126 --> 00:35:21,656
line utilities and libraries and


1052
00:35:21,656 --> 00:35:23,116
for developing with Swift on the


1053
00:35:23,116 --> 00:35:23,616
server.


1054
00:35:24,796 --> 00:35:26,216
The server-side Swift community


1055
00:35:26,216 --> 00:35:27,926
has been making extensive use of


1056
00:35:27,926 --> 00:35:29,156
the Swift package manager.


1057
00:35:29,626 --> 00:35:30,956
And server-side Swift has been


1058
00:35:30,956 --> 00:35:32,696
growing well itself with many


1059
00:35:32,696 --> 00:35:33,916
frameworks now available for


1060
00:35:33,916 --> 00:35:35,116
doing web and backend


1061
00:35:35,116 --> 00:35:35,646
development.


1062
00:35:36,296 --> 00:35:37,886
If you would like to take a look


1063
00:35:37,886 --> 00:35:39,006
at this approach, I think you'll


1064
00:35:39,006 --> 00:35:40,326
find that Swift is a great


1065
00:35:40,326 --> 00:35:41,426
language to do this kind of


1066
00:35:41,426 --> 00:35:42,736
cross-platform development on.


1067
00:35:44,076 --> 00:35:45,686
But you could also go ahead and


1068
00:35:45,686 --> 00:35:47,096
use SwiftPM for creating


1069
00:35:47,096 --> 00:35:48,366
command-line utilities and


1070
00:35:48,366 --> 00:35:50,116
libraries today, whatever makes


1071
00:35:50,116 --> 00:35:50,796
sense for you.


1072
00:35:51,386 --> 00:35:53,406
Ultimately getting started is as


1073
00:35:53,406 --> 00:35:54,856
easy as opening a terminal


1074
00:35:54,856 --> 00:35:56,656
window and running Swift package


1075
00:35:56,656 --> 00:35:57,006
init.


1076
00:35:57,776 --> 00:35:58,746
So, the next time you're


1077
00:35:58,746 --> 00:36:00,186
thinking about trying something


1078
00:36:00,186 --> 00:36:01,686
new, I encourage you to give it


1079
00:36:01,686 --> 00:36:02,136
a try.


1080
00:36:03,046 --> 00:36:04,176
And if you're interested in


1081
00:36:04,176 --> 00:36:05,946
contributing, swing by the Swift


1082
00:36:05,946 --> 00:36:07,786
forums and start a conversation.


1083
00:36:08,796 --> 00:36:09,986
If you'd like to come chat with


1084
00:36:09,986 --> 00:36:11,876
us, you can find us in the labs


1085
00:36:11,876 --> 00:36:15,326
tomorrow at 3 p.m. Ultimately,


1086
00:36:15,326 --> 00:36:16,626
I'm really excited about where


1087
00:36:16,626 --> 00:36:17,906
we can go from here and what


1088
00:36:17,906 --> 00:36:19,366
this developer community can do


1089
00:36:19,366 --> 00:36:19,826
together.


1090
00:36:20,586 --> 00:36:21,886
Your contributions will help us


1091
00:36:21,916 --> 00:36:23,626
design a package manager that


1092
00:36:23,626 --> 00:36:24,996
will be great for the whole


1093
00:36:24,996 --> 00:36:25,796
Swift community.


1094
00:36:26,796 --> 00:36:27,226
Thank you.


1095
00:36:27,306 --> 00:36:28,916
Enjoy the rest of WWDC.


1096
00:36:29,516 --> 00:36:33,500
[ Applause ]

