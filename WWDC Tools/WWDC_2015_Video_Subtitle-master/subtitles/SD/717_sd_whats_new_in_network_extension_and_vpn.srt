1
00:00:27,516 --> 00:00:31,896
[Applause]


2
00:00:32,396 --> 00:00:32,996
>> JAMIE WOOD: Thank you.


3
00:00:34,256 --> 00:00:35,206
Good morning, everyone.


4
00:00:35,476 --> 00:00:37,126
Welcome to session 717.


5
00:00:37,616 --> 00:00:39,796
My name is Jamie Wood
and I'm here today


6
00:00:39,796 --> 00:00:41,046
with my colleague, Tommy Pauly.


7
00:00:41,046 --> 00:00:43,766
We are Network Engineers in
the Core OS networking group


8
00:00:43,766 --> 00:00:48,116
at Apple, and we are excited
to tell you about what is new


9
00:00:48,356 --> 00:00:51,526
in Network Extension and VPN.


10
00:00:51,736 --> 00:00:55,576
So you may be wondering what
is Network Extension Framework?


11
00:00:55,826 --> 00:00:57,956
What capabilities does
it have to offer to me


12
00:00:58,176 --> 00:00:59,526
for use in my application?


13
00:01:00,166 --> 00:01:04,186
Network Extension Framework
provide APIs to use in your app


14
00:01:04,766 --> 00:01:07,796
to customize and extend the
Core networking features


15
00:01:07,796 --> 00:01:08,896
of Apple's platforms.


16
00:01:09,326 --> 00:01:12,086
Let's look at specific
examples of kinds


17
00:01:12,086 --> 00:01:15,006
of apps you can create using
the Network Extension APIs.


18
00:01:16,196 --> 00:01:20,696
If your company makes Wi-Fi
Hotspots that are deployed


19
00:01:20,696 --> 00:01:24,656
in public places like hotels,
airports, coffee shops,


20
00:01:25,426 --> 00:01:28,626
you can use the any Hotspot
helper API to create apps


21
00:01:28,776 --> 00:01:30,346
that connect to your
Wi-Fi Hotspots.


22
00:01:30,996 --> 00:01:34,936
If your company creates
a personal VPN service


23
00:01:35,136 --> 00:01:38,966
that your users use to securely
browse the Internet you can use


24
00:01:38,966 --> 00:01:42,466
the NEVPN manager API to
create apps that connect


25
00:01:42,466 --> 00:01:43,806
to your personal VPN service.


26
00:01:44,436 --> 00:01:49,146
If your company creates a
remote access VPN server,


27
00:01:49,866 --> 00:01:52,496
you can use the any tunnel
provider family of APIs


28
00:01:52,886 --> 00:01:55,026
to create apps that
connect to your VPN server.


29
00:01:55,576 --> 00:01:59,996
And finally if your school
creates a network content


30
00:01:59,996 --> 00:02:02,026
filtering solution
for use by schools


31
00:02:02,026 --> 00:02:03,896
to protect the students'
Internet browsing,


32
00:02:04,856 --> 00:02:07,696
you can use the any filter
provider family of APIs


33
00:02:07,756 --> 00:02:12,366
to create apps that
filter network content.


34
00:02:14,376 --> 00:02:20,256
So these are all of the Network
Extension APIs that we are going


35
00:02:20,256 --> 00:02:22,066
to talk about today
during the session.


36
00:02:22,966 --> 00:02:27,176
So let's go ahead and dive into
the any Hotspot helper API.


37
00:02:31,836 --> 00:02:36,666
So the any Hotspot helper
API is used to create apps


38
00:02:36,666 --> 00:02:38,256
that connect to Wi-Fi Hotspots.


39
00:02:38,836 --> 00:02:42,106
Now, some of you may be aware


40
00:02:42,106 --> 00:02:44,316
that there actually are
already APIs that you can use


41
00:02:44,586 --> 00:02:46,496
to create apps that
connect to Wi-Fi Hotspots.


42
00:02:46,616 --> 00:02:50,886
The CNSetSupportedSSIDs and
CNMarkPortalOnline APIs,


43
00:02:51,396 --> 00:02:53,386
but they have limitations.


44
00:02:54,696 --> 00:02:58,796
One problem is that the
Hotspot list you can pass


45
00:02:59,236 --> 00:03:02,166
to CNSetSupportedSSIDs
is limited in size.


46
00:03:02,436 --> 00:03:06,126
If you have a Global Network
of Wi-Fi Hotspots you're trying


47
00:03:06,126 --> 00:03:08,316
to connect your app
to you can quickly run


48
00:03:08,316 --> 00:03:09,506
into the size limitation.


49
00:03:10,916 --> 00:03:13,026
Another draw-back
is that in order


50
00:03:13,026 --> 00:03:14,596
to call CNMarkPortalOnline,


51
00:03:15,186 --> 00:03:17,086
users have to manually
run your application.


52
00:03:17,916 --> 00:03:20,866
This is exacerbated by the
fact that there's no indication


53
00:03:20,866 --> 00:03:22,826
to the user they
need to do this.


54
00:03:23,336 --> 00:03:24,946
It is not a great
user experience.


55
00:03:25,056 --> 00:03:26,856
The users don't know that
they have to go into the app


56
00:03:26,966 --> 00:03:28,446
to connect to the Wi-Fi Hotspot.


57
00:03:29,596 --> 00:03:34,146
So we've introduced the
any Hotspot helper API


58
00:03:34,786 --> 00:03:36,176
to address some of
these limitations.


59
00:03:37,306 --> 00:03:39,926
So the way this works is
you first register your app


60
00:03:39,926 --> 00:03:41,616
with the system as
a Hotspot helper.


61
00:03:42,586 --> 00:03:47,076
Then as the device comes
within range of Wi-Fi networks,


62
00:03:47,076 --> 00:03:50,446
scanning for Wi-Fi networks or
the user selects a Wi-Fi network


63
00:03:50,446 --> 00:03:55,036
to connect to, the system will
call into your app, run your app


64
00:03:55,036 --> 00:03:56,806
in the background,
call into your app


65
00:03:57,526 --> 00:03:58,996
and give your app
the opportunity


66
00:03:58,996 --> 00:04:01,376
to claim the Wi-Fi
Hotspot with a level


67
00:04:01,376 --> 00:04:04,036
of confidence, high,
medium or low.


68
00:04:04,426 --> 00:04:07,606
If you claim a Hotspot with
a high level of confidence,


69
00:04:08,196 --> 00:04:09,906
the system will call you


70
00:04:09,906 --> 00:04:11,526
to actually perform
the authentication


71
00:04:11,526 --> 00:04:12,566
with the Wi-Fi Hotspot.


72
00:04:13,276 --> 00:04:15,416
And it will periodically
call you


73
00:04:15,726 --> 00:04:17,726
to maintain the authentication
session.


74
00:04:19,486 --> 00:04:22,026
The Hotspot helper
API also allows you


75
00:04:22,576 --> 00:04:27,066
to annotate Wi-Fi networks that
show up in the Wi-Fi manager


76
00:04:27,526 --> 00:04:32,186
in the settings app and you can
annotate these Wi-Fi networks


77
00:04:32,186 --> 00:04:35,406
with the name of your app
or the name of your company.


78
00:04:36,096 --> 00:04:37,806
So that's the any
Hotspot helper API.


79
00:04:38,656 --> 00:04:40,636
You can use this
API to create apps


80
00:04:40,706 --> 00:04:43,026
that seamlessly connect
to Wi-Fi Hotspots.


81
00:04:43,526 --> 00:04:47,686
Next let's look at
the NEVPN manager API.


82
00:04:47,686 --> 00:04:51,386
You can use this API to
create apps that connect


83
00:04:51,446 --> 00:04:53,806
to a personal VPN service
that users will use


84
00:04:53,806 --> 00:04:55,386
to securely browse the Internet.


85
00:04:56,006 --> 00:05:01,686
Now, the NEVPN manager
API is not new in iOS 9.


86
00:05:02,306 --> 00:05:04,866
We introduced this API in iOS 8.


87
00:05:05,526 --> 00:05:10,266
We made some enhancements to the
API and made the API available


88
00:05:10,266 --> 00:05:11,866
on OS X, OS X El Capitan.


89
00:05:13,076 --> 00:05:16,876
The way this works is you
can use the NEVPN manager API


90
00:05:16,936 --> 00:05:19,536
to configure and control
the built-in IPSEC client


91
00:05:20,256 --> 00:05:20,956
on the platform.


92
00:05:21,576 --> 00:05:25,806
You can create a single
personal VPN configuration.


93
00:05:26,026 --> 00:05:28,136
I'll talk about what a
personal VPN configuration is


94
00:05:28,136 --> 00:05:29,236
in a few minutes here.


95
00:05:29,796 --> 00:05:34,326
The built in IPSEC
clients supports IKE v1


96
00:05:34,326 --> 00:05:36,616
and IKE v2 key exchange
protocols.


97
00:05:36,616 --> 00:05:37,646
You can use either of these.


98
00:05:38,236 --> 00:05:43,336
You can configure the VPN
to connect automatically


99
00:05:43,336 --> 00:05:44,686
under certain network
conditions.


100
00:05:45,316 --> 00:05:51,226
New in iOS 9 and
OS X El Capitan,


101
00:05:51,226 --> 00:05:53,616
you can configure http proxies


102
00:05:53,616 --> 00:05:57,136
for http traffic
traversing your VPN tunnel.


103
00:05:57,706 --> 00:06:03,936
And personal VPN configurations
coexist and cooperate


104
00:06:04,086 --> 00:06:05,796
with enterprise VPN
configurations.


105
00:06:06,326 --> 00:06:09,066
Suppose the user is
using your app to connect


106
00:06:09,066 --> 00:06:10,436
to your personal VPN service,


107
00:06:10,436 --> 00:06:13,446
and they are securely
browsing the Internet and want


108
00:06:13,786 --> 00:06:17,276
to access something in their
company's internal network.


109
00:06:18,106 --> 00:06:23,046
So they go ahead and connect
to their enterprise VPN and all


110
00:06:23,046 --> 00:06:24,696
of the traffic that's destined


111
00:06:24,696 --> 00:06:26,206
for those internal
resources will go ahead


112
00:06:26,206 --> 00:06:27,796
and use that enterprise VPN.


113
00:06:27,796 --> 00:06:30,426
But everything else
that is not going


114
00:06:30,426 --> 00:06:32,226
to use the enterprise
VPN will continue to go


115
00:06:32,226 --> 00:06:33,286
through the personal VPN.


116
00:06:33,726 --> 00:06:35,116
Personal VPN remains connected


117
00:06:35,626 --> 00:06:37,546
and will continue
to tunnel traffic.


118
00:06:38,186 --> 00:06:43,076
So there's a brief run
down of the features


119
00:06:43,076 --> 00:06:45,096
that the NEVPN manager
API provides.


120
00:06:46,756 --> 00:06:49,746
Another way that we've enhanced
NEVPN manager is we've enhanced


121
00:06:49,746 --> 00:06:51,716
our IKE v2 protocol support.


122
00:06:52,426 --> 00:06:55,316
We think that's a great
tunneling protocol


123
00:06:55,976 --> 00:06:58,096
and made it better
in this release.


124
00:06:58,426 --> 00:07:01,076
We now support MOBIKE.


125
00:07:01,856 --> 00:07:07,306
We will now seamlessly
transition your IKE v2 tunnel


126
00:07:07,306 --> 00:07:09,426
from one network
interface to the other.


127
00:07:09,956 --> 00:07:13,016
For example, if your
tunnel is connected


128
00:07:13,016 --> 00:07:16,406
over the Wi-Fi interface but
the user walks out of range


129
00:07:16,406 --> 00:07:18,766
of that Wi-Fi network, so
now the device switches


130
00:07:18,766 --> 00:07:20,496
over to use the cellular
interface,


131
00:07:21,006 --> 00:07:23,116
the IKE v2 tunnel will
seamlessly transition over.


132
00:07:23,746 --> 00:07:26,056
Very cool.


133
00:07:27,516 --> 00:07:30,196
[Applause]


134
00:07:30,696 --> 00:07:33,266
>> JAMIE WOOD: We now have full
support for IPv6, both inside


135
00:07:33,266 --> 00:07:35,106
and outside of the
IKE v2 tunnel.


136
00:07:36,236 --> 00:07:39,096
We now support IKE
fragmentation.


137
00:07:39,096 --> 00:07:43,456
This allows the IKE v2 tunnel to
work more reliably in a variety


138
00:07:43,456 --> 00:07:44,396
of network environments.


139
00:07:44,956 --> 00:07:48,166
We have IKE redirect
supports allowing you


140
00:07:48,166 --> 00:07:50,686
to load balance your
IKE v2 server.


141
00:07:51,496 --> 00:07:54,166
So with all of these
enhancements it is now better


142
00:07:54,166 --> 00:07:55,116
than ever.


143
00:07:55,116 --> 00:07:56,416
IKE v2 works better than ever.


144
00:07:56,716 --> 00:07:59,466
It works more reliably
in a wider number


145
00:07:59,466 --> 00:08:02,746
of network environments.


146
00:08:03,076 --> 00:08:04,846
So now let's take a
look at some code.


147
00:08:04,846 --> 00:08:06,796
How do you use the
NEVPN manager API?


148
00:08:06,796 --> 00:08:08,866
I want to show you some code


149
00:08:08,866 --> 00:08:12,616
that will create this
personal VPN configuration.


150
00:08:15,576 --> 00:08:19,196
So each app that uses the
NEVPN manager API gets access


151
00:08:19,196 --> 00:08:21,306
to a single personal
VPN configuration,


152
00:08:21,336 --> 00:08:24,606
which is represented by a
single NEVPN manager object.


153
00:08:25,006 --> 00:08:28,766
So first I get a reference to
my shared manager object and all


154
00:08:28,766 --> 00:08:30,876
of the VPN configurations
on the system are stored


155
00:08:30,876 --> 00:08:32,456
in the network extension
preferences.


156
00:08:33,035 --> 00:08:36,145
Before I can work with my
configuration, in my code,


157
00:08:36,145 --> 00:08:39,015
I need to load it from those
preferences using this load


158
00:08:39,015 --> 00:08:40,856
from preferences with
completion handler call.


159
00:08:42,756 --> 00:08:45,236
In the completion handler,
the first thing I want


160
00:08:45,236 --> 00:08:48,226
to do is check and see if my
configuration exists or not.


161
00:08:48,776 --> 00:08:51,966
I look at the protocol
property on the manager object.


162
00:08:52,516 --> 00:08:54,646
If that's nil, it means I
don't have a configuration yet.


163
00:08:55,066 --> 00:08:56,006
I want to set one up.


164
00:08:56,006 --> 00:09:00,266
I'll configure a IKE v2
configuration here and I fill it


165
00:09:00,266 --> 00:09:04,876
out with all the IKE v2 specific
configuration parameters.


166
00:09:05,876 --> 00:09:09,216
When I'm done with that I'll
set the protocol property


167
00:09:09,216 --> 00:09:13,056
on the manager object and I'll
enable the VPN configuration.


168
00:09:13,146 --> 00:09:16,076
You can only have one personal
VPN configuration enabled


169
00:09:16,076 --> 00:09:17,196
on the system at a time.


170
00:09:17,756 --> 00:09:22,066
And then when I'm all done,
go ahead and call save


171
00:09:22,066 --> 00:09:24,686
to preferences to
save the configuration


172
00:09:24,686 --> 00:09:26,106
into the network
extension preferences


173
00:09:26,106 --> 00:09:27,776
and apply the configuration
of the system


174
00:09:28,166 --> 00:09:29,226
so they can actually be used.


175
00:09:30,306 --> 00:09:33,156
From here you can use
the API to manually start


176
00:09:33,156 --> 00:09:36,366
and stop the VPN tunnel
and introspect the status


177
00:09:36,366 --> 00:09:38,716
of the VPN tunnel to know
when you're connected,


178
00:09:38,856 --> 00:09:39,826
disconnected, et cetera.


179
00:09:41,216 --> 00:09:44,986
But for great user experience
another thing to do is


180
00:09:45,076 --> 00:09:47,116
to configure connect on-demand.


181
00:09:47,116 --> 00:09:50,926
So with connect on-demand you
can set up rules that state


182
00:09:51,366 --> 00:09:53,326
when the VPN should
connect automatically.


183
00:09:54,486 --> 00:09:57,816
So, for this example, I'm going
to go ahead and set up a rule


184
00:09:58,106 --> 00:10:01,316
that says that my VPN should
connect whenever the device is


185
00:10:01,316 --> 00:10:02,256
on a Wi-Fi network.


186
00:10:03,796 --> 00:10:04,766
So the first thing to do,


187
00:10:04,766 --> 00:10:08,036
I'm going to create an
on-demand rule connect object.


188
00:10:08,626 --> 00:10:10,606
So this is a rule that says


189
00:10:11,046 --> 00:10:15,836
when this rule matches,
connect the VPN.


190
00:10:16,086 --> 00:10:19,196
Next I'm going to set an
interface type match condition


191
00:10:19,406 --> 00:10:20,016
on my rule.


192
00:10:20,956 --> 00:10:23,546
So it says when the device
is on a particular type


193
00:10:23,546 --> 00:10:26,096
of network interface,
then this rule will match.


194
00:10:26,096 --> 00:10:27,406
I'm go to set that to Wi-Fi.


195
00:10:28,106 --> 00:10:30,516
This rule will match when the
device is on a Wi-Fi network.


196
00:10:32,136 --> 00:10:34,066
Go ahead and set the
on-demand rules array


197
00:10:34,146 --> 00:10:36,036
to contain this new rule


198
00:10:36,506 --> 00:10:38,876
and save the result
to the preferences.


199
00:10:39,616 --> 00:10:42,416
So now my VPN will connect
automatically whenever the


200
00:10:42,416 --> 00:10:43,756
device is on a Wi-Fi network.


201
00:10:44,396 --> 00:10:48,976
Okay. So that's the
NEVPN manager API.


202
00:10:49,126 --> 00:10:51,976
You can use this API to
create apps that connect


203
00:10:51,976 --> 00:10:53,836
to your personal VPN service.


204
00:10:54,346 --> 00:10:56,886
Let's go ahead and talk


205
00:10:56,886 --> 00:10:59,226
about the any tunnel
provider family of APIs.


206
00:11:00,086 --> 00:11:02,306
You use these APIs to
create apps that connect


207
00:11:02,686 --> 00:11:04,506
to enterprise VPN servers.


208
00:11:05,066 --> 00:11:11,756
So the way this works is
you create a custom VPN


209
00:11:11,756 --> 00:11:12,686
protocol provider.


210
00:11:13,316 --> 00:11:16,136
This is essentially the
client side implementation


211
00:11:16,136 --> 00:11:19,216
of your own custom
tunneling protocol.


212
00:11:19,466 --> 00:11:23,466
These protocol providers
run as app extensions.


213
00:11:23,646 --> 00:11:26,246
They run in the background
handling background traffic.


214
00:11:27,336 --> 00:11:31,126
You can create two types
of tunnel providers.


215
00:11:31,126 --> 00:11:32,906
You can create a
Packet Tunnel Provider.


216
00:11:33,636 --> 00:11:36,246
These tunnel traffic
at the IP layer.


217
00:11:36,836 --> 00:11:40,886
You can create, or you can
create an App Proxy provider


218
00:11:40,886 --> 00:11:43,016
that tunnels traffic
at the app layer.


219
00:11:45,336 --> 00:11:48,986
The tunnel provider family
also has APIs that allow you


220
00:11:48,986 --> 00:11:52,266
to configure and control your
protocol provider from your app.


221
00:11:52,456 --> 00:11:54,926
So similar to the VPN manager
API where you can configure


222
00:11:54,926 --> 00:11:57,946
and control the IPSEC
client, these APIs allow you


223
00:11:57,946 --> 00:12:01,026
to configure and control your
own custom protocol provider.


224
00:12:05,056 --> 00:12:08,756
Let's take a closer look at the
NEPacket Tunnel provider API.


225
00:12:09,276 --> 00:12:09,976
How does this work?


226
00:12:10,956 --> 00:12:14,846
So suppose we have an NEPacket
Tunnel Provider here running


227
00:12:14,846 --> 00:12:18,256
on the system and it's
connected to a VPN server


228
00:12:18,256 --> 00:12:21,546
and providing a tunnel
to some internal network.


229
00:12:22,976 --> 00:12:27,516
So you've got an app that's
trying to connect to a resource


230
00:12:27,516 --> 00:12:28,346
in the internal network.


231
00:12:29,496 --> 00:12:31,136
So the app will open
up a network connection


232
00:12:31,136 --> 00:12:35,126
that will create a socket and
create a TCP/IP connection


233
00:12:36,026 --> 00:12:39,626
and the packets for that TCP/IP
connection will be routed


234
00:12:39,626 --> 00:12:41,066
to the UTUN0 interface.


235
00:12:41,066 --> 00:12:45,636
This is a virtual interface, so
instead of sending the packets


236
00:12:45,636 --> 00:12:49,146
out over the physical
network it will divert them


237
00:12:49,456 --> 00:12:50,786
to the NEPacket Tunnel Provider.


238
00:12:51,756 --> 00:12:54,736
The Packet Tunnel Provider
then can take the packets,


239
00:12:54,736 --> 00:12:57,556
encapsulate them in
your tunneling protocol,


240
00:12:58,046 --> 00:13:00,036
send them over to
the tunneling server.


241
00:13:00,036 --> 00:13:02,326
The tunneling server
will decapsulate them,


242
00:13:02,326 --> 00:13:04,266
inject those packets
into the internal network


243
00:13:04,266 --> 00:13:06,326
and they will be delivered
to the ultimate destination,


244
00:13:07,026 --> 00:13:09,666
and the return packets will
be encapsulated by the server,


245
00:13:09,906 --> 00:13:12,966
sent back to the provider,
the provider decapsulates them


246
00:13:13,396 --> 00:13:16,296
and injects them back into the
networking stack via the UTUN0


247
00:13:16,296 --> 00:13:18,356
interface, they'll
be delivered back


248
00:13:18,356 --> 00:13:21,076
up through the TCP/IP
stack to the application.


249
00:13:21,826 --> 00:13:24,386
This is the basic
way that this works.


250
00:13:24,986 --> 00:13:28,226
NEPacket Tunnel Provider
has a lot of control


251
00:13:28,226 --> 00:13:29,646
over the UTUN0 interface.


252
00:13:30,336 --> 00:13:32,766
Most importantly, it
can specify the routes.


253
00:13:33,176 --> 00:13:38,066
The IP destinations that will
be routed to the UTUN0 interface


254
00:13:38,066 --> 00:13:38,786
and through the tunnel.


255
00:13:39,786 --> 00:13:42,716
The Packet Tunnel Provider can
specify the virtual address


256
00:13:42,716 --> 00:13:45,696
to assign to the
interface, as well as the DNS


257
00:13:45,696 --> 00:13:47,796
and proxy settings
that should be used


258
00:13:47,796 --> 00:13:51,776
for traffic routed
through the tunnel.


259
00:13:52,256 --> 00:13:55,036
So next Tommy Pauly is going to
come up and give us a brief demo


260
00:13:55,346 --> 00:13:57,356
of how to create an
NEPacket Tunnel Provider.


261
00:13:58,516 --> 00:14:02,696
[Applause]


262
00:14:03,196 --> 00:14:05,106
>> TOM PAULY: Thank you, Jamie.


263
00:14:05,106 --> 00:14:08,756
We are excited to have you
write your own custom VPN


264
00:14:08,756 --> 00:14:09,796
protocol providers.


265
00:14:10,206 --> 00:14:14,026
To help you do that I want
to show you quickly the steps


266
00:14:14,026 --> 00:14:16,426
that are involved in building
a Packet Tunnel Provider.


267
00:14:16,426 --> 00:14:19,576
I'm going to start
with an Xcode project


268
00:14:19,576 --> 00:14:21,946
in which I have an app already.


269
00:14:21,946 --> 00:14:25,826
It is using the manager APIs
to create a configuration.


270
00:14:25,826 --> 00:14:28,096
So we are going to skip over
that part and we're going


271
00:14:28,096 --> 00:14:30,706
to assume that I have a
framework that is implemented


272
00:14:30,706 --> 00:14:33,626
to do my own custom
protocol negotiation.


273
00:14:33,886 --> 00:14:36,936
I want to show how to build
this new extension and kind


274
00:14:36,936 --> 00:14:38,076
of put all the pieces together.


275
00:14:38,076 --> 00:14:38,746
All right.


276
00:14:40,716 --> 00:14:43,686
So here I have my project.


277
00:14:44,436 --> 00:14:46,206
The first thing you need


278
00:14:46,206 --> 00:14:48,386
to do is add a new
target for your extension.


279
00:14:49,506 --> 00:14:53,806
To get this, in OS X El
Capitan we've added it


280
00:14:53,896 --> 00:14:56,856
into the network
extension framework.


281
00:14:57,896 --> 00:15:02,616
So on your system if you go to
system, library, Frameworks,


282
00:15:03,216 --> 00:15:06,166
network extension
Framework and you go


283
00:15:06,166 --> 00:15:08,916
into the resources folder,
we've provided an installer


284
00:15:08,916 --> 00:15:12,476
for the templates for
this, these target types.


285
00:15:13,436 --> 00:15:14,486
So you can go through
the installer.


286
00:15:15,676 --> 00:15:17,866
I'm going to install
it just for this user.


287
00:15:18,456 --> 00:15:22,416
And now I have the templates.


288
00:15:22,416 --> 00:15:27,936
If I go into my project and
I try to create a new target,


289
00:15:27,996 --> 00:15:30,766
under application extensions I
now have four new target types.


290
00:15:31,466 --> 00:15:34,916
I have App Proxy providers
for application layer VPNs.


291
00:15:35,446 --> 00:15:39,166
I have two filter control
and data providers.


292
00:15:39,636 --> 00:15:41,316
These allow me to do content
filtering which we'll talk


293
00:15:41,316 --> 00:15:43,806
about later and I have
Packet Tunnel Provider.


294
00:15:43,806 --> 00:15:49,356
My protocol in this case uses
IP level tunneling for my VPN.


295
00:15:49,356 --> 00:15:50,776
I'll choose the Packet
Tunnel Provider.


296
00:15:51,276 --> 00:15:54,916
Going to write in Swift.


297
00:15:54,916 --> 00:16:01,446
Let's just call it
packet tunnel.


298
00:16:01,596 --> 00:16:03,236
Great. Now I have a new target


299
00:16:03,426 --> 00:16:05,866
and I can start building
my VPN provider.


300
00:16:05,866 --> 00:16:10,946
So let's jump ahead to the
actual process of writing this.


301
00:16:11,326 --> 00:16:13,176
My protocol happens to
be based around UDP.


302
00:16:13,176 --> 00:16:16,176
It uses UDP to talk
to the server


303
00:16:16,176 --> 00:16:21,376
and tunnel traffic
from the system.


304
00:16:21,376 --> 00:16:24,366
I have subclassed the
NEPacket Tunnel Provider class


305
00:16:25,466 --> 00:16:28,286
and this is the class going
to be called in my extension


306
00:16:28,286 --> 00:16:29,686
to start and stop my VPN.


307
00:16:30,386 --> 00:16:32,636
The most important
function that I'm going


308
00:16:32,636 --> 00:16:35,186
to overwrite here is the
start tunnel with options.


309
00:16:35,636 --> 00:16:37,206
This will get called
whenever the user


310
00:16:37,326 --> 00:16:39,486
or the system automatically
wants to start your VPN.


311
00:16:39,486 --> 00:16:45,006
And if you notice, it calls and
passes a completion handler.


312
00:16:45,436 --> 00:16:48,356
This completion handler is
what you can use to call


313
00:16:48,356 --> 00:16:50,776
and tell the system that you
are done setting up your VPN.


314
00:16:50,896 --> 00:16:53,766
When you call this, the system
will know you fully connected


315
00:16:53,766 --> 00:16:57,206
and it's ready to go.


316
00:16:57,356 --> 00:17:00,736
So I mentioned already that my
protocol is based around UDP.


317
00:17:00,736 --> 00:17:06,656
I want to in my start create
a UDP connection to my server.


318
00:17:06,976 --> 00:17:11,506
In order to do this I'm going to
create an NWUDP session object.


319
00:17:12,016 --> 00:17:15,965
This is one of many convenience
networking APIs that we've added


320
00:17:16,256 --> 00:17:19,586
to the Network Extension
Framework to help you make good


321
00:17:20,316 --> 00:17:22,536
and very efficient connections.


322
00:17:23,116 --> 00:17:24,556
So UDP session allows me


323
00:17:24,556 --> 00:17:27,415
to create a connection
to a host name.


324
00:17:27,415 --> 00:17:29,496
It will do all the
DNS resolution for me


325
00:17:29,496 --> 00:17:33,156
and asynchronously let me
know when it's ready to go.


326
00:17:33,296 --> 00:17:39,546
I can do reading and writing of
multiple data grams at a time


327
00:17:39,546 --> 00:17:41,286
for the most efficient
connections possible.


328
00:17:41,786 --> 00:17:45,996
Let's implement start
tunnel with options now.


329
00:17:47,636 --> 00:17:50,256
The first thing I need
to do is actually figure


330
00:17:50,256 --> 00:17:51,376
out what I'm trying
to connect to.


331
00:17:51,426 --> 00:17:53,816
I look at my configuration
to get my server address.


332
00:17:54,256 --> 00:17:56,476
This might be an IP
address or a host name.


333
00:17:57,066 --> 00:18:01,866
I then wrap it up in
an NW host end point.


334
00:18:02,186 --> 00:18:05,926
This is just a container
object that takes an address


335
00:18:05,926 --> 00:18:08,266
or a host name and puts
it alongside a port


336
00:18:08,656 --> 00:18:09,756
that belongs to my protocol.


337
00:18:10,346 --> 00:18:17,376
I then call create UDP session
2 end point to start the process


338
00:18:17,376 --> 00:18:19,316
of doing DNS resolution


339
00:18:19,716 --> 00:18:21,296
and creating the
connection to my server.


340
00:18:22,406 --> 00:18:25,736
At this point the system starts
doing that and I am waiting


341
00:18:25,736 --> 00:18:30,836
for the event that I
want to read and write.


342
00:18:30,836 --> 00:18:34,236
I do KeyVO to watch the state
property of the UDP session


343
00:18:34,236 --> 00:18:35,336
to get these transitions.


344
00:18:35,886 --> 00:18:39,746
So at this point I'm pretty
much done with my start call.


345
00:18:40,116 --> 00:18:43,556
The last thing I need to do is
save that completion handler


346
00:18:43,616 --> 00:18:45,466
that I got at the
beginning because I'm not


347
00:18:45,466 --> 00:18:48,036
yet done completing
my VPN connection.


348
00:18:48,946 --> 00:18:52,056
So I'm going to declare a
pending start completion.


349
00:18:52,636 --> 00:18:56,836
And I'm going to
save that for later.


350
00:18:58,256 --> 00:18:58,526
All right.


351
00:18:58,586 --> 00:18:59,806
So I'm going to skip
over the part


352
00:18:59,806 --> 00:19:02,046
where we actually
negotiate with our server.


353
00:19:02,046 --> 00:19:05,046
I assume your protocol
already knows how to do that.


354
00:19:05,556 --> 00:19:08,656
I'm going to skip ahead to where
we have been assigned an address


355
00:19:08,656 --> 00:19:09,906
and other network settings.


356
00:19:09,906 --> 00:19:13,496
We want to apply it to the
system and let the system know


357
00:19:13,496 --> 00:19:14,846
that we're done bringing
up the VPN.


358
00:19:15,816 --> 00:19:20,716
This is just a custom
function that I wrote that says


359
00:19:20,776 --> 00:19:22,946
that I'm done bringing
up my connection.


360
00:19:24,146 --> 00:19:25,926
What I'm going to do is call,


361
00:19:25,926 --> 00:19:28,756
create NEPacket Tunnel
network settings object,


362
00:19:29,246 --> 00:19:30,516
and this is a bundle of settings


363
00:19:30,516 --> 00:19:32,086
that I can apply
into the system.


364
00:19:32,946 --> 00:19:35,826
I can set the IPv4 settings,


365
00:19:35,826 --> 00:19:38,326
I have an assigned
address and subnet.


366
00:19:39,256 --> 00:19:41,356
I have route settings.


367
00:19:41,356 --> 00:19:43,446
In this case I want to be the
default route for the system


368
00:19:43,916 --> 00:19:47,906
but I can also have a long
list of split tunnel routes.


369
00:19:49,176 --> 00:19:52,436
I can define the overhead
bytes that my tunnel has.


370
00:19:52,436 --> 00:19:55,826
For every packet,
how much do I incur


371
00:19:56,246 --> 00:19:57,716
for encryption and
encapsulation.


372
00:19:58,086 --> 00:20:03,716
This helps the system know how
large it should send packets.


373
00:20:03,776 --> 00:20:05,856
And lastly, I can
set the DNS settings.


374
00:20:06,286 --> 00:20:09,246
I can set my assigned
DNS server or domain.


375
00:20:09,856 --> 00:20:12,226
To apply this to the system,


376
00:20:12,426 --> 00:20:15,086
I call set tunnel
network settings.


377
00:20:15,536 --> 00:20:17,936
I get a callback
handler when it is done


378
00:20:18,456 --> 00:20:21,226
and that lets me know it has
been successfully applied


379
00:20:21,356 --> 00:20:24,036
and I can call the start
completion handler letting the


380
00:20:24,036 --> 00:20:27,066
system know that I'm
done bringing up the VPN.


381
00:20:27,066 --> 00:20:27,636
This is great.


382
00:20:27,636 --> 00:20:29,256
I have a full connection up.


383
00:20:29,856 --> 00:20:31,846
But the thing I'm
missing is being able


384
00:20:31,846 --> 00:20:33,326
to route traffic back and forth.


385
00:20:33,326 --> 00:20:38,686
I'll give you a look at
what that looks like.


386
00:20:38,956 --> 00:20:42,196
So as Jamie mentioned,
the way you're doing this,


387
00:20:42,196 --> 00:20:44,106
you have a virtual
interface that is going


388
00:20:44,106 --> 00:20:47,706
to be sending packets up
into your protocol provider


389
00:20:47,706 --> 00:20:50,056
and then you're going to
send that off to your server.


390
00:20:50,056 --> 00:20:51,456
When you receive packets back


391
00:20:51,456 --> 00:20:53,446
from the server you re-inject
them back into the stack.


392
00:20:53,676 --> 00:20:57,236
I want to start first
with the outbound flow.


393
00:20:57,846 --> 00:21:03,206
A packet tunnel provider has a
property called a packet flow.


394
00:21:03,486 --> 00:21:05,446
This represents the
virtual interface


395
00:21:05,446 --> 00:21:06,556
that you can read
and write into.


396
00:21:07,946 --> 00:21:09,976
If I call read packets
with completion handler,


397
00:21:09,976 --> 00:21:13,186
I will get called back
with an array of packets


398
00:21:13,926 --> 00:21:16,996
that have been sent
out into the network.


399
00:21:17,626 --> 00:21:23,286
I can send these into my
protocol to encapsulate


400
00:21:23,356 --> 00:21:26,636
and to encrypt them and
generate a new array


401
00:21:27,036 --> 00:21:28,276
of encrypted payloads.


402
00:21:28,796 --> 00:21:33,166
And very easily I can write
these as multiple data grams


403
00:21:33,716 --> 00:21:36,726
at one time into the UDP session
to send over to the server.


404
00:21:37,646 --> 00:21:40,166
That's all we need to
do to send packets out.


405
00:21:41,236 --> 00:21:42,786
Coming back in is very similar.


406
00:21:43,686 --> 00:21:47,196
Here I have a function
that is taking packets


407
00:21:47,946 --> 00:21:52,266
in from the UDP server.


408
00:21:53,086 --> 00:21:56,456
And I can simply send
these to my protocol.


409
00:21:56,456 --> 00:22:01,336
I can decapsulate them, generate
IP packets which I then write


410
00:22:01,416 --> 00:22:02,786
into my packet flow property.


411
00:22:06,896 --> 00:22:10,266
Great. So now I have
a connection


412
00:22:10,266 --> 00:22:13,826
that can be established
in read and write.


413
00:22:14,036 --> 00:22:15,816
Let's see how this
looks in practice.


414
00:22:16,336 --> 00:22:19,416
All right.


415
00:22:20,106 --> 00:22:21,456
So here I have my device.


416
00:22:21,456 --> 00:22:24,106
If you notice I've
installed already my VPN app.


417
00:22:26,626 --> 00:22:28,676
First I want to show you that
if I go into Safari and try


418
00:22:28,676 --> 00:22:29,986
to access the internal website,


419
00:22:30,076 --> 00:22:32,406
I do not have access
to it right now.


420
00:22:32,406 --> 00:22:39,486
I now can go into my VPN
app and I hit start VPN.


421
00:22:39,486 --> 00:22:42,186
And what this did,


422
00:22:42,186 --> 00:22:45,756
in the background it kicked
off the tunnel packet provider.


423
00:22:46,726 --> 00:22:49,586
If you can see now, I
do have the VPN badge


424
00:22:49,586 --> 00:22:50,516
up in the status bar.


425
00:22:50,516 --> 00:22:52,716
It actually did come up and
establish the connection.


426
00:22:53,916 --> 00:22:56,496
I can then go back
into Safari and I see


427
00:22:56,716 --> 00:22:58,426
that my internal
page has now loaded.


428
00:22:58,986 --> 00:23:03,856
So we have a fully working VPN
protocol provider all written


429
00:23:03,856 --> 00:23:04,316
in Swift.


430
00:23:04,666 --> 00:23:05,286
That simple.


431
00:23:06,516 --> 00:23:11,056
[Applause]


432
00:23:11,556 --> 00:23:14,316
>> TOM PAULY: Back to Jamie.


433
00:23:14,496 --> 00:23:14,886
>> JAMIE WOOD: All right.


434
00:23:14,886 --> 00:23:15,586
Thank you, Tommy.


435
00:23:16,156 --> 00:23:17,956
So Tommy just showed us how


436
00:23:17,956 --> 00:23:19,436
to create a can packet
tunnel provider.


437
00:23:19,436 --> 00:23:22,156
It's easy and powerful.


438
00:23:22,826 --> 00:23:27,076
So while we are on the subject
of Packet Tunnel Provider I want


439
00:23:27,076 --> 00:23:31,716
to take a moment and talk about
Per-App VPN for managed apps.


440
00:23:31,716 --> 00:23:37,216
Per-App VPN is great for BYOD or
bring your own device use cases.


441
00:23:37,806 --> 00:23:40,976
In BYOD you have company
employees who want


442
00:23:40,976 --> 00:23:42,346
to bring their own
personal device,


443
00:23:42,866 --> 00:23:44,646
connect it to the
company's internal network


444
00:23:44,646 --> 00:23:46,076
and access network resources.


445
00:23:46,626 --> 00:23:49,076
They also don't want all
of their Internet traffic


446
00:23:49,076 --> 00:23:50,836
to be routed through
the company's VPN.


447
00:23:50,836 --> 00:23:54,576
And then you have
enterprises that want


448
00:23:54,576 --> 00:23:56,696
to give their employees
access, but they want


449
00:23:56,696 --> 00:23:58,196
to restrict the applications


450
00:23:58,496 --> 00:24:00,276
that can access their
internal network.


451
00:24:01,276 --> 00:24:04,636
So this is where
Per-App VPN is great.


452
00:24:05,506 --> 00:24:07,706
So with Per-App VPN
you can set up the VPN


453
00:24:07,706 --> 00:24:10,956
so that only certain managed
applications can use the VPN.


454
00:24:12,056 --> 00:24:15,916
The way to set this up
is using Apple's own MDM


455
00:24:15,916 --> 00:24:20,166
or mobile device
management protocol.


456
00:24:20,726 --> 00:24:22,706
You enroll devices
with an MDM service.


457
00:24:23,246 --> 00:24:26,306
The MDM service has
the ability to push


458
00:24:26,306 --> 00:24:29,896
down configurations including
VPN configurations as well


459
00:24:29,896 --> 00:24:31,306
as managed applications.


460
00:24:32,116 --> 00:24:36,466
And the MDM service can also
link those managed applications


461
00:24:36,606 --> 00:24:39,576
with Per-App VPN
configurations to send


462
00:24:39,576 --> 00:24:43,226
up a Per-App VPN deployment.


463
00:24:43,226 --> 00:24:48,856
Now, we support Per-App VPN
with, we've always supported it


464
00:24:48,856 --> 00:24:51,036
with custom App Proxy providers.


465
00:24:51,646 --> 00:24:57,136
In iOS 9 and OS X El Capitan,
we now support Per-App VPN


466
00:24:57,276 --> 00:24:58,816
with custom packet
tunnel providers


467
00:24:59,406 --> 00:25:00,926
and support Per-App VPN


468
00:25:01,266 --> 00:25:03,796
with a built-in IPSEC
clients on the platform.


469
00:25:05,266 --> 00:25:09,036
So let's go ahead and take a
look at how Per-App VPN works


470
00:25:09,296 --> 00:25:11,106
in the network data path.


471
00:25:11,106 --> 00:25:13,996
We have the same Packet Tunnel
Provider that we had before.


472
00:25:14,076 --> 00:25:17,136
We have the UTUN0
interface again


473
00:25:17,136 --> 00:25:19,586
that the traffic is routed to.


474
00:25:19,586 --> 00:25:21,956
Now we have a managed
application that is linked


475
00:25:21,956 --> 00:25:23,416
to the VPN configuration.


476
00:25:24,236 --> 00:25:27,856
Instead of having the traffic
routed to the UTUN0 interface


477
00:25:27,856 --> 00:25:31,376
by the destination IP,
the traffic is routed


478
00:25:31,376 --> 00:25:34,586
to the UTUN0 interface by
the source application.


479
00:25:35,056 --> 00:25:37,876
Only this managed app
can access the VPN.


480
00:25:38,596 --> 00:25:41,636
If the user uses another
app that is not managed,


481
00:25:42,306 --> 00:25:44,516
it is going to connect
to the network


482
00:25:44,516 --> 00:25:45,856
out the physical interface.


483
00:25:46,006 --> 00:25:47,906
Even if it's trying to
connect to the same IP


484
00:25:48,156 --> 00:25:49,586
that the managed app
is connecting to.


485
00:25:49,586 --> 00:25:50,246
All right.


486
00:25:51,176 --> 00:25:53,336
So that's how Per-App VPN works.


487
00:25:54,356 --> 00:25:56,676
Tommy is going to give us
another brief demo of how


488
00:25:56,676 --> 00:25:58,846
to configure Per-App VPN.


489
00:25:58,956 --> 00:25:59,206
>> TOM PAULY: Great.


490
00:25:59,506 --> 00:26:00,626
Thank you, Jamie.


491
00:26:01,326 --> 00:26:02,886
We are really excited to have...


492
00:26:03,196 --> 00:26:06,716
Now, everyone who is
writing a custom protocol


493
00:26:06,876 --> 00:26:09,696
or even using the built in
IPSEC protocols will be able


494
00:26:09,696 --> 00:26:13,286
to deploy Per-App VPN to
make great UID solutions.


495
00:26:13,816 --> 00:26:20,726
As Jamie mentioned, we create
these Per-App configurations


496
00:26:21,146 --> 00:26:21,956
with MDM.


497
00:26:22,346 --> 00:26:24,966
MDM is pushing down a
configuration profile


498
00:26:25,296 --> 00:26:29,856
that defines the VPN and also
pushes down the managed apps


499
00:26:29,856 --> 00:26:32,336
to associate with that VPN.


500
00:26:32,336 --> 00:26:36,946
I want to show how to modify
an existing VPN profile


501
00:26:37,256 --> 00:26:38,586
to make it work with
Per-App VPN.


502
00:26:39,206 --> 00:26:40,876
I'm going to do it
with a profile


503
00:26:40,876 --> 00:26:44,026
that configures the same
custom app that I just built.


504
00:26:47,556 --> 00:26:50,486
So here is a look
into a VPN profile.


505
00:26:50,486 --> 00:26:51,336
There's a lot on here.


506
00:26:51,516 --> 00:26:52,706
You don't have to
get it all right now.


507
00:26:52,706 --> 00:26:55,536
I want to highlight the
parts that are different.


508
00:26:55,536 --> 00:26:57,876
The three tweaks
that you need to make


509
00:26:57,876 --> 00:27:01,666
to have this profile
work with Per-App VPN.


510
00:27:01,886 --> 00:27:03,086
The first is the payload type.


511
00:27:03,626 --> 00:27:08,426
Normally it is
com.Apple.vpn.managed simply add


512
00:27:08,756 --> 00:27:15,036
a .applayer to the end of that
to make that a Per-App VPN.


513
00:27:15,216 --> 00:27:17,476
There are multiple
types of providers


514
00:27:17,476 --> 00:27:20,216
that work with Per-App VPN.


515
00:27:20,586 --> 00:27:22,656
So we need to specify
which type you're using.


516
00:27:23,176 --> 00:27:27,136
Within the VPN payload,
we have a new key


517
00:27:27,136 --> 00:27:28,216
that is the provider type.


518
00:27:28,976 --> 00:27:31,776
And you can specify either
packet tunnel or App Proxy.


519
00:27:32,146 --> 00:27:36,216
In this case as you saw, my app
uses a packet tunnel protocol.


520
00:27:36,216 --> 00:27:37,996
I'll specify that one.


521
00:27:38,536 --> 00:27:45,106
The last field you need to
add is called the VPN UUID.


522
00:27:45,416 --> 00:27:48,646
Which is an arbitrary
string that acts as the glue


523
00:27:49,016 --> 00:27:53,386
between a VPN configuration
and the managed apps.


524
00:27:53,586 --> 00:27:58,076
When an MDM server pushes down
managed apps, it will mark them


525
00:27:58,156 --> 00:27:59,886
with the same VPN UUID


526
00:28:00,136 --> 00:28:04,616
so the system knows those
apps can only route traffic


527
00:28:04,796 --> 00:28:06,916
through that VPN.


528
00:28:07,476 --> 00:28:13,106
This profile should
work for Per-App VPN.


529
00:28:13,356 --> 00:28:17,426
So because we are so eager
to have you guys make apps


530
00:28:17,426 --> 00:28:18,376
that work with Per-App VPN,


531
00:28:19,246 --> 00:28:22,296
we wanted to make it really
easy to develop with it.


532
00:28:22,436 --> 00:28:23,576
You may not have access


533
00:28:23,616 --> 00:28:25,886
to a full MDM solution
while you are developing.


534
00:28:26,616 --> 00:28:31,686
So we've enabled for development
builds of your app only.


535
00:28:31,736 --> 00:28:32,946
Not distribution builds.


536
00:28:33,896 --> 00:28:37,596
The ability to specify
in an info Plist apps


537
00:28:37,596 --> 00:28:39,526
to associate your
VPN configurations


538
00:28:39,526 --> 00:28:43,256
with to make it easier
to test Per-App VPN.


539
00:28:43,436 --> 00:28:48,246
Here is a look at an info Plist
of your app, it's small here,


540
00:28:48,246 --> 00:28:53,356
but we have a new key
called NETest App Mapping.


541
00:28:53,846 --> 00:28:55,416
This is a dictionary of arrays,


542
00:28:55,486 --> 00:28:58,546
the keys are the same
UUID I mentioned before,


543
00:28:58,546 --> 00:29:03,136
the glue to hold configurations
and apps together.


544
00:29:03,136 --> 00:29:08,196
Within the array you can specify
the string bundle identifiers


545
00:29:08,286 --> 00:29:11,066
of apps that you want to
force to go through your VPN.


546
00:29:11,066 --> 00:29:14,366
In this case I'm going
to use the box app.


547
00:29:15,356 --> 00:29:17,146
Great to show you
what this looks like.


548
00:29:17,146 --> 00:29:21,176
I installed the profile and
the info Plist on my device.


549
00:29:21,746 --> 00:29:25,086
And so here I have
a configuration


550
00:29:25,606 --> 00:29:26,506
for my Per-App VPN.


551
00:29:26,506 --> 00:29:31,476
And you can see that I have my
custom Packet Tunnel protocol.


552
00:29:32,506 --> 00:29:36,966
And listed are the included apps
and it has now associated Box


553
00:29:36,966 --> 00:29:38,276
with my VPN configuration.


554
00:29:39,066 --> 00:29:41,396
That's all it takes to
making Per-App VPN work


555
00:29:41,396 --> 00:29:43,626
with your protocol.


556
00:29:44,116 --> 00:29:44,366
Thank you.


557
00:29:45,516 --> 00:29:49,136
[Applause]


558
00:29:49,636 --> 00:29:49,946
>> JAMIE WOOD: All right.


559
00:29:49,946 --> 00:29:50,606
Thank you, Tommy.


560
00:29:50,936 --> 00:29:54,406
So we really think that Per-App
VPN is a great deployment


561
00:29:54,566 --> 00:29:57,126
for BYOD, provides a
great user experience


562
00:29:57,196 --> 00:29:58,686
for company employees.


563
00:29:58,686 --> 00:30:01,366
We highly encourage
you to deploy it.


564
00:30:02,076 --> 00:30:08,146
So next I want to talk about
the NEApp Proxy Provider API.


565
00:30:09,216 --> 00:30:12,976
Now, any App Proxy
providers work exclusively


566
00:30:13,226 --> 00:30:14,206
with Per-App VPN.


567
00:30:15,106 --> 00:30:17,846
So let's take a look
and see how these work,


568
00:30:17,846 --> 00:30:19,836
how they are different from
the packet tunnel providers.


569
00:30:20,076 --> 00:30:23,666
We have a managed application,
an App Proxy Provider running


570
00:30:23,666 --> 00:30:26,666
on the system and the managed
app is going to connect


571
00:30:26,706 --> 00:30:28,706
to an internal network resource.


572
00:30:29,436 --> 00:30:32,716
Instead of having IP packets
routed to the UTUN0 interface,


573
00:30:33,616 --> 00:30:36,136
the data the managed app writes


574
00:30:36,136 --> 00:30:39,836
to its socket is diverted
directly to the proxy provider.


575
00:30:41,216 --> 00:30:44,286
So from there the NEApp Proxy
Provider can send the data


576
00:30:44,286 --> 00:30:47,196
to the proxy server
and the return data


577
00:30:47,196 --> 00:30:50,226
from the proxy server will be
sent back to the proxy provider,


578
00:30:50,406 --> 00:30:51,936
it can inject it into the socket


579
00:30:51,936 --> 00:30:53,776
to be delivered to
the application.


580
00:30:55,056 --> 00:31:00,066
The reason why we added the
NEApp Proxy Provider API is


581
00:31:00,396 --> 00:31:01,626
really about the servers.


582
00:31:01,726 --> 00:31:04,046
So you're connecting to
these transparent network


583
00:31:04,046 --> 00:31:04,906
proxy servers.


584
00:31:05,496 --> 00:31:07,826
The servers are usually
easier to deploy


585
00:31:08,066 --> 00:31:10,126
than a fully fledged
IP layer VPN.


586
00:31:10,126 --> 00:31:14,396
You don't have to provision
virtual IPs to assign


587
00:31:14,396 --> 00:31:15,796
to the UTUN0 interface.


588
00:31:16,366 --> 00:31:19,496
They usually scale
a little better.


589
00:31:19,496 --> 00:31:21,616
We've given you the
NEApp Proxy Provider API


590
00:31:21,776 --> 00:31:23,756
to connect to these servers.


591
00:31:24,246 --> 00:31:30,446
And a new thing that we added
for App Proxy Provider in iOS 9


592
00:31:30,736 --> 00:31:36,076
and OS X El Capitan is the
ability to proxy UDP traffic


593
00:31:36,076 --> 00:31:37,286
in addition to TCP traffic.


594
00:31:39,326 --> 00:31:41,816
Oh, here we have a managed app


595
00:31:41,816 --> 00:31:45,026
to illustrate those
are still connecting


596
00:31:45,736 --> 00:31:48,336
out the physical interface.


597
00:31:48,336 --> 00:31:51,706
Okay. So that's the NETunnel
provider family of APIs.


598
00:31:52,096 --> 00:31:54,956
Use these APIs to
create custom clients


599
00:31:54,956 --> 00:31:56,136
for your tunneling protocol,


600
00:31:56,236 --> 00:31:58,696
to connect to enterprise
VPN servers.


601
00:31:58,696 --> 00:32:01,696
Now let's take a look


602
00:32:01,696 --> 00:32:04,136
at the NEFilter provider
family of APIs.


603
00:32:04,296 --> 00:32:06,656
Use these APIs to create the
network content filtering


604
00:32:06,656 --> 00:32:07,786
solutions for schools.


605
00:32:09,016 --> 00:32:11,516
There are currently some ways


606
00:32:11,516 --> 00:32:13,796
that schools can do
network content filtering


607
00:32:14,226 --> 00:32:15,306
with iOS devices.


608
00:32:16,856 --> 00:32:21,196
They can deploy an on-site
content filter, put a device


609
00:32:21,196 --> 00:32:25,436
on their local network and
route all their Internet traffic


610
00:32:25,436 --> 00:32:26,666
through that content filter


611
00:32:26,666 --> 00:32:28,776
so that they can filter
the content, right?


612
00:32:29,326 --> 00:32:31,706
The draw back with this is
that it's only available


613
00:32:31,706 --> 00:32:32,876
on the school's local network.


614
00:32:33,126 --> 00:32:35,866
If the students want to
take the schools iPads


615
00:32:35,866 --> 00:32:40,816
or iPhones home they either
can't browse the Internet at all


616
00:32:40,816 --> 00:32:43,876
when they are home or browse
the Internet unfiltered.


617
00:32:44,306 --> 00:32:45,706
This is not so great.


618
00:32:45,866 --> 00:32:49,226
To sort of try to solve
some of that problem,


619
00:32:49,406 --> 00:32:52,046
the school can deploy global
proxy, put it on the Internet,


620
00:32:52,586 --> 00:32:54,856
route all of the Internet
traffic through the proxy


621
00:32:54,856 --> 00:32:56,246
to perform the content
filtering.


622
00:32:56,876 --> 00:33:00,986
The draw back, the school has to
deploy and maintain the proxy,


623
00:33:00,986 --> 00:33:06,086
and not all the schools have
the resources to do that.


624
00:33:06,286 --> 00:33:08,766
Another solution is to
use a full tunnel VPN.


625
00:33:08,766 --> 00:33:11,136
That has a lot of the same
problems as global proxy


626
00:33:11,136 --> 00:33:13,236
and may be even harder
to deploy and maintain.


627
00:33:14,356 --> 00:33:16,416
The best solution for schools is


628
00:33:16,416 --> 00:33:18,596
to filter the network
content on the device.


629
00:33:18,816 --> 00:33:19,876
Before it leaves the device


630
00:33:20,376 --> 00:33:23,156
and just before it's actually
delivered to the user.


631
00:33:24,006 --> 00:33:27,656
So this is exactly what the
NEFilter provider family


632
00:33:27,656 --> 00:33:28,856
of APIs allows you to do.


633
00:33:29,456 --> 00:33:34,786
Now, the NEFilter provider
APIs are only available on iOS.


634
00:33:36,046 --> 00:33:39,366
And using API you can
perform dynamic evaluation


635
00:33:39,566 --> 00:33:40,896
of network content.


636
00:33:41,086 --> 00:33:46,906
You have the ability to update
filtering rules on the fly,


637
00:33:48,036 --> 00:33:49,606
for instance downloaded
from the Internet.


638
00:33:50,206 --> 00:33:55,096
And you have the ability to send
back a customizable block page


639
00:33:55,096 --> 00:33:56,606
to the user when they
try to access something


640
00:33:56,726 --> 00:34:02,396
that they are not
allowed to access.


641
00:34:03,066 --> 00:34:06,916
Now, NEFilter provider only
works on supervised devices.


642
00:34:06,916 --> 00:34:08,376
We are targeting
this at schools,


643
00:34:08,686 --> 00:34:11,996
schools that own their devices,
are locking them down so


644
00:34:12,036 --> 00:34:15,016
that users can't install
new apps or change settings.


645
00:34:15,746 --> 00:34:18,255
This is where filter
provider works.


646
00:34:19,376 --> 00:34:20,826
So let's take a look


647
00:34:20,826 --> 00:34:24,436
at how filter provider
works in the data path.


648
00:34:24,626 --> 00:34:28,085
So we have an NEFilter data
provider extension running


649
00:34:28,196 --> 00:34:28,846
on the system.


650
00:34:29,356 --> 00:34:32,306
And its job is to make
pass and block decisions


651
00:34:32,306 --> 00:34:35,946
about network content that is
flowing through the system.


652
00:34:36,065 --> 00:34:38,466
Now, because it has access
to all this network content,


653
00:34:38,896 --> 00:34:40,936
we've locked down this
data provider so it runs


654
00:34:40,936 --> 00:34:41,985
in a read only sand box.


655
00:34:42,606 --> 00:34:43,806
It can't access the network


656
00:34:44,335 --> 00:34:46,416
and it has read only
access to the disk.


657
00:34:48,735 --> 00:34:51,735
So we've also provided
another extension,


658
00:34:51,946 --> 00:34:54,946
the NEFilter control
provider, and its job is


659
00:34:54,946 --> 00:34:57,346
to feed information to
the filter data provider


660
00:34:57,346 --> 00:34:58,396
so that it can do its job.


661
00:34:58,726 --> 00:35:00,656
For instance, download
rules over the Internet,


662
00:35:01,146 --> 00:35:02,636
write them to a location on disk


663
00:35:02,966 --> 00:35:06,976
where the data provider
can access them.


664
00:35:07,836 --> 00:35:11,476
Now, suppose that the user is
running an app using Web kit,


665
00:35:12,106 --> 00:35:12,446
right?


666
00:35:12,446 --> 00:35:18,026
They have a UI Web view in
their UI and so all the content


667
00:35:18,026 --> 00:35:20,456
that is being rendered into
the Web kit is passed off


668
00:35:20,456 --> 00:35:23,596
to the filter data
provider, which makes a pass


669
00:35:23,596 --> 00:35:27,276
or block decision on that data.


670
00:35:27,436 --> 00:35:30,596
So obviously not all
applications use Web kit.


671
00:35:31,386 --> 00:35:34,306
There's some applications that
are using other networking APIs


672
00:35:34,306 --> 00:35:36,676
such as NSURL session,
NSURL connection,


673
00:35:37,076 --> 00:35:38,356
some of the CFNetwork APIs.


674
00:35:39,076 --> 00:35:43,976
For those APIs we added a hook
into the socket layer to send


675
00:35:43,976 --> 00:35:45,936
that traffic over to
the filter data provider


676
00:35:45,936 --> 00:35:48,266
so it can make a
pass/block decision.


677
00:35:49,116 --> 00:35:52,986
As you can see the
filter control provider


678
00:35:52,986 --> 00:35:56,966
and data provider together
provide a comprehensive content


679
00:35:56,966 --> 00:36:00,456
filtering solution
on the device.


680
00:36:00,616 --> 00:36:02,076
So for Web kit applications,


681
00:36:02,756 --> 00:36:04,946
when the data provider
makes a block decision,


682
00:36:05,086 --> 00:36:07,976
decides to block some
access to the content,


683
00:36:08,696 --> 00:36:12,216
the data provider can send
a, instruct the Web kit


684
00:36:12,506 --> 00:36:14,016
to display a block page.


685
00:36:14,386 --> 00:36:15,956
Here is an example
of that block page.


686
00:36:16,206 --> 00:36:20,426
You can, using the API you
can customize this block page


687
00:36:20,426 --> 00:36:21,496
in a number of ways.


688
00:36:21,606 --> 00:36:23,486
You can change the
organization that's displayed.


689
00:36:23,486 --> 00:36:25,836
For example, you can display
the name of the school


690
00:36:26,536 --> 00:36:29,506
and you can customize
this request access link.


691
00:36:30,076 --> 00:36:32,216
You can choose to not
display the link at all,


692
00:36:32,296 --> 00:36:35,146
not give the user the option of
gaining access to the content.


693
00:36:35,146 --> 00:36:39,076
If you display it, you can
display the text of the link


694
00:36:39,626 --> 00:36:40,926
and target of the link.


695
00:36:41,146 --> 00:36:45,126
Point to the Web service where
users can go and request access


696
00:36:45,176 --> 00:36:46,406
to the blocked content.


697
00:36:46,906 --> 00:36:51,716
So that's the NEFilter
provider family of APIs.


698
00:36:51,716 --> 00:36:55,226
You can use these APIs to
create powerful comprehensive,


699
00:36:55,706 --> 00:36:59,086
on-device network content
filtering solutions for schools.


700
00:36:59,586 --> 00:37:05,466
Here is all the Network
Extension APIs we've talked


701
00:37:05,466 --> 00:37:06,706
about today.


702
00:37:07,866 --> 00:37:10,266
And here's some of
the great apps


703
00:37:10,816 --> 00:37:12,956
that you can create
using these APIs.


704
00:37:13,356 --> 00:37:17,206
You can create apps for Wi-Fi
Hotspot, personal VPN services,


705
00:37:17,896 --> 00:37:19,046
enterprise remote access VPNs


706
00:37:19,046 --> 00:37:22,226
and you can create on-device
network content filtering


707
00:37:22,226 --> 00:37:23,426
solutions for schools.


708
00:37:24,846 --> 00:37:27,286
As you can see these
are powerful APIs.


709
00:37:27,876 --> 00:37:29,116
They allow you to extend


710
00:37:29,116 --> 00:37:31,686
and customize the core
networking features


711
00:37:31,686 --> 00:37:32,816
of Apple's platforms.


712
00:37:33,676 --> 00:37:36,786
And because these are very
powerful APIs we do require some


713
00:37:36,786 --> 00:37:39,216
special entitlements for
you to be able to use these.


714
00:37:40,436 --> 00:37:41,986
To use the NEVPN manager API,


715
00:37:42,096 --> 00:37:45,466
you need to select the
personal VPN capability


716
00:37:45,876 --> 00:37:47,956
in your project settings' Xcode.


717
00:37:47,956 --> 00:37:54,226
To use the any Hotspot helper
API, the NETunnel family


718
00:37:54,226 --> 00:37:56,736
of APIs, and the
NEFilter provider family


719
00:37:56,736 --> 00:38:00,096
of APIs you need access to
other special entitlements.


720
00:38:00,886 --> 00:38:02,916
The way to get these
is to send a request


721
00:38:03,486 --> 00:38:05,096
to networkextension@Apple.com.


722
00:38:05,856 --> 00:38:08,356
We'll send you back a
questionnaire that we'll ask you


723
00:38:08,356 --> 00:38:12,406
to fill out and send back to us
and we'll process your request.


724
00:38:12,706 --> 00:38:15,896
We're excited to be
delivering these APIs to you.


725
00:38:15,896 --> 00:38:17,946
We are looking forward to
getting all of your requests


726
00:38:18,566 --> 00:38:22,856
and giving you access
to these APIs.


727
00:38:23,536 --> 00:38:25,206
So what should you do?


728
00:38:26,026 --> 00:38:27,796
Port your Captive Network apps


729
00:38:27,896 --> 00:38:31,336
to use the NEHotspot
helper, which is seamless.


730
00:38:31,626 --> 00:38:38,256
Adopt the NEManager API
in your personal VPN app


731
00:38:38,906 --> 00:38:41,696
to create seamless
user experience


732
00:38:42,056 --> 00:38:43,986
for those using your
personal VPN service.


733
00:38:44,386 --> 00:38:47,276
Use the NETunnel provider


734
00:38:47,756 --> 00:38:52,136
to create powerful
custom enterprise VPN apps


735
00:38:53,186 --> 00:38:54,426
that connect to your VPN server.


736
00:38:54,986 --> 00:38:58,696
Use the MDM to deploy
Per-App VPN


737
00:38:58,696 --> 00:39:01,546
for great BYOD user experiences.


738
00:39:01,546 --> 00:39:06,376
And use the NEFilter
provider APIs


739
00:39:06,626 --> 00:39:09,376
to create dynamic on-device
network content filtering


740
00:39:09,796 --> 00:39:10,476
for schools.


741
00:39:10,696 --> 00:39:14,926
Here is where you can
get more information.


742
00:39:15,126 --> 00:39:17,476
Unfortunately, the documentation
is not yet published.


743
00:39:17,646 --> 00:39:18,436
Coming soon.


744
00:39:18,436 --> 00:39:21,496
Please keep searching for
it on the developer website.


745
00:39:21,606 --> 00:39:24,506
And the sample code is
also not quite ready yet.


746
00:39:25,026 --> 00:39:26,946
Keep searching for the
simple tunnel sample.


747
00:39:27,346 --> 00:39:29,316
We have a great sample going.


748
00:39:29,316 --> 00:39:30,856
We haven't quite
finished it yet.


749
00:39:31,426 --> 00:39:33,866
Please keep looking for it.


750
00:39:35,156 --> 00:39:38,556
For more information you
are welcome to participate


751
00:39:38,696 --> 00:39:41,796
in the dev forums, contact
developer technical support.


752
00:39:42,526 --> 00:39:45,066
Reach out to Paul Danbold
our Core evangelist.


753
00:39:45,596 --> 00:39:50,316
And here is the address you
can send your network extension


754
00:39:50,316 --> 00:39:51,616
request to.


755
00:39:53,966 --> 00:39:55,346
Here are related sessions.


756
00:39:55,346 --> 00:39:56,686
We encourage you
to check these out.


757
00:39:57,106 --> 00:39:58,346
Especially want to give a plug


758
00:39:58,766 --> 00:40:01,906
for the other Core OS networking
session today happening 11:00


759
00:40:01,906 --> 00:40:04,206
a.m., Your app and next
generation networks.


760
00:40:05,496 --> 00:40:06,676
Thank you all so
much for coming.


761
00:40:06,676 --> 00:40:06,976
Have a great day.


762
00:40:07,516 --> 00:40:10,500
[Applause]

