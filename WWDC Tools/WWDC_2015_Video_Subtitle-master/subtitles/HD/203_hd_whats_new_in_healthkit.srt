1
00:00:20,016 --> 00:00:24,926
[ Applause ]


2
00:00:25,426 --> 00:00:27,176
>> SHANNON TAN: Hello,
everyone, welcome to What's New


3
00:00:27,176 --> 00:00:29,536
in HealthKit, this is a great
opportunity for you to learn


4
00:00:29,536 --> 00:00:30,886
about the new things
we have in store


5
00:00:30,886 --> 00:00:32,375
for you in the SDK this year.


6
00:00:32,476 --> 00:00:34,106
My name is Shannon Tan.


7
00:00:34,176 --> 00:00:37,086
I'm an iOS engineer, and I'll be
joined up here in a little while


8
00:00:37,086 --> 00:00:38,606
by my colleague Allen
Shortlidge.


9
00:00:39,236 --> 00:00:41,526
We are so excited to help you
build impactful applications


10
00:00:41,526 --> 00:00:44,046
that will help millions
of people be more healthy


11
00:00:44,046 --> 00:00:47,376
and live better lives.


12
00:00:48,006 --> 00:00:49,416
Let's start with a
roadmap of our talk.


13
00:00:49,416 --> 00:00:51,626
Today we will be talking about
several different things.


14
00:00:51,626 --> 00:00:54,736
We will go over HealthKit
quickly.


15
00:00:54,736 --> 00:00:57,816
We will talk about the unit
preferences API introduced


16
00:00:57,816 --> 00:00:58,946
in iOS 8.2.


17
00:00:58,996 --> 00:01:01,216
We will talk about
the diatribes iOS 9,


18
00:01:02,136 --> 00:01:03,606
which will allow
whole new aspects


19
00:01:03,606 --> 00:01:04,906
of HealthKit-supported software.


20
00:01:05,966 --> 00:01:08,426
Next, Allen will come up
and talk about data sources,


21
00:01:08,566 --> 00:01:10,216
deletions, and Workout sessions.


22
00:01:10,976 --> 00:01:12,696
Finally we will finish
with a WatchKit demo.


23
00:01:14,746 --> 00:01:16,206
Let's talk about some
HealthKit background.


24
00:01:18,056 --> 00:01:20,336
Right now, personal health is
an extremely exciting area.


25
00:01:20,736 --> 00:01:23,136
There are a lot of apps in
the App Store that are focused


26
00:01:23,136 --> 00:01:24,916
on helping our users
get and stay healthy,


27
00:01:25,826 --> 00:01:27,206
and devices like
activity trackers


28
00:01:27,206 --> 00:01:28,906
and smartwatches are
recording large amount


29
00:01:29,156 --> 00:01:31,046
of extremely personal
and relevant data.


30
00:01:31,916 --> 00:01:34,026
HealthKit is a framework
that makes it easier to store


31
00:01:34,026 --> 00:01:34,976
and retrieve this information.


32
00:01:35,186 --> 00:01:39,306
It provides a rich set of APIs
to save health and fitness data


33
00:01:39,306 --> 00:01:42,316
and share between applications
while maintaining security


34
00:01:42,316 --> 00:01:45,476
with extensive privacy settings
and encrypted databases.


35
00:01:47,046 --> 00:01:48,796
What does this mean for
you as an app developer?


36
00:01:49,316 --> 00:01:52,386
It means when you use HealthKit
you can skip writing custom code


37
00:01:52,506 --> 00:01:55,726
to share, store, and sync data
and instead focus on features


38
00:01:55,796 --> 00:01:58,956
that are core to your app
experience while being part


39
00:01:58,956 --> 00:02:00,046
of a greater ecosystem.


40
00:02:02,926 --> 00:02:05,976
Finally, with HealthKit
comes a Health app,


41
00:02:06,246 --> 00:02:08,026
which provides a general
view into HealthKit.


42
00:02:08,895 --> 00:02:12,356
In iOS 9 we have added more
views to allow to make it easier


43
00:02:12,356 --> 00:02:15,256
for users to store, summarize,
and correlate their data.


44
00:02:21,006 --> 00:02:22,116
Let's talk about the data types


45
00:02:22,116 --> 00:02:23,916
which enable these great
Health applications.


46
00:02:25,406 --> 00:02:29,686
Currently in HealthKit there
are a lot of data types


47
00:02:29,686 --> 00:02:31,816
which cover a wide array of
aspects of personal health.


48
00:02:32,616 --> 00:02:34,176
We try to make types
that are as expansive


49
00:02:34,176 --> 00:02:35,506
and impactful as possible.


50
00:02:35,506 --> 00:02:40,266
One common question is, How does
Apple prioritize what data types


51
00:02:40,266 --> 00:02:42,746
to add given limited
development time?


52
00:02:42,746 --> 00:02:46,776
Our highest priority
consideration is the existence


53
00:02:46,776 --> 00:02:47,346
of hardware.


54
00:02:47,836 --> 00:02:49,586
For example, there
are Bluetooth scales


55
00:02:49,586 --> 00:02:53,476
that automatically track
weights and Sleeptrackers


56
00:02:53,476 --> 00:02:54,656
that measure your
sleep activities.


57
00:02:55,256 --> 00:02:56,276
We find the possibility


58
00:02:56,276 --> 00:02:58,846
of automatic quantified health
data syncing to HealthKit


59
00:02:58,846 --> 00:03:00,386
on your device to be powerful.


60
00:03:02,666 --> 00:03:05,306
We also add data types based
on existence of software,


61
00:03:05,306 --> 00:03:07,286
whether there are popular
apps that already exist


62
00:03:07,286 --> 00:03:09,106
to create experience
around that data type.


63
00:03:10,706 --> 00:03:12,736
Finally, we consider customer
and developer feedback.


64
00:03:16,706 --> 00:03:18,286
To support our discussion
about data types,


65
00:03:18,286 --> 00:03:21,246
let's look at how
they are structured.


66
00:03:21,246 --> 00:03:22,346
Every object in HealthKit
has a type,


67
00:03:22,346 --> 00:03:24,306
and every type inherits
an HK object type.


68
00:03:25,116 --> 00:03:27,576
Characteristic types are types
that don't change over time,


69
00:03:27,856 --> 00:03:29,116
like blood type or
date of birth.


70
00:03:29,116 --> 00:03:32,096
Types that do change over
time are sample types,


71
00:03:32,126 --> 00:03:33,276
and we'll talk about two.


72
00:03:33,626 --> 00:03:36,326
Quantity samples have
quantity and unit, like weight.


73
00:03:37,056 --> 00:03:38,676
Category samples
can be enumerated


74
00:03:38,676 --> 00:03:40,986
into several different
values, like sleep analysis.


75
00:03:40,986 --> 00:03:42,956
You can be in one of
several sleep states.


76
00:03:44,416 --> 00:03:46,656
Of course, this is a review of
already-introduced information.


77
00:03:46,656 --> 00:03:47,476
If you would like to learn more


78
00:03:47,476 --> 00:03:48,666
about how HealthKit
is structured,


79
00:03:48,666 --> 00:03:51,326
we recommend you take a
look at last year's talk,


80
00:03:51,326 --> 00:03:54,906
Introducing HealthKit.


81
00:03:56,466 --> 00:03:58,566
So I mentioned that quantity
samples have a quantity


82
00:03:58,566 --> 00:03:58,876
and unit.


83
00:03:58,876 --> 00:04:00,536
I would like to take time now


84
00:04:00,606 --> 00:04:02,366
to discuss the new
unit preferences API.


85
00:04:03,286 --> 00:04:06,786
Although this API isn't new
in iOS 9, it was introduced


86
00:04:06,946 --> 00:04:08,836
since our last talk in iOS 8.2.


87
00:04:09,046 --> 00:04:11,856
So we would like
to cover it now.


88
00:04:14,296 --> 00:04:15,886
You might have noticed
in iOS 8.2


89
00:04:15,886 --> 00:04:20,685
that there was a new unit
pane in the Health app.


90
00:04:20,685 --> 00:04:23,376
Units are shown based on the
region and locale of a user;


91
00:04:23,666 --> 00:04:26,366
however, the user can
enter this row and override


92
00:04:26,366 --> 00:04:29,526
that default setting with
their own unit preference.


93
00:04:32,256 --> 00:04:35,696
In iOS 8.2, there is a new class
extension on the HK Health Store


94
00:04:35,776 --> 00:04:37,826
that you can use to find
this unit preference.


95
00:04:38,346 --> 00:04:40,416
We recommend you do this
so that the unit you show


96
00:04:40,416 --> 00:04:42,696
in your app UI will match
what the user prefers


97
00:04:42,696 --> 00:04:43,676
to see in Apple Health.


98
00:04:44,806 --> 00:04:46,316
Finally, there is
a new notification


99
00:04:46,316 --> 00:04:48,746
that fires whenever this
unit preference changes.


100
00:04:48,746 --> 00:04:53,166
Now that we have discussed the
units and reviewed data types


101
00:04:53,166 --> 00:04:55,646
in HealthKit, let's talk about
the new data types available


102
00:04:55,646 --> 00:04:58,716
in iOS 9, the first
one is water intake.


103
00:05:01,966 --> 00:05:03,996
I'm sure we all know
someone who lugs


104
00:05:03,996 --> 00:05:07,016
around a gigantic water
bottle and when asked,


105
00:05:07,306 --> 00:05:11,086
explains that daily hydration
is important to well-being


106
00:05:11,086 --> 00:05:13,526
and it's probably bad for you
to be thirsty all of the time.


107
00:05:14,296 --> 00:05:17,056
There are a lot of apps in the
App Store that gently nudge you


108
00:05:17,056 --> 00:05:20,806
to increase water intake and
even some devices and sensors


109
00:05:20,806 --> 00:05:23,596
like Bluetooth water bottles
that track your water intake.


110
00:05:24,096 --> 00:05:26,586
A lot of people want to make
sure they drink the recommended


111
00:05:26,586 --> 00:05:29,126
eight 8-ounce glasses, or
two liters, of water a day,


112
00:05:29,296 --> 00:05:31,916
or more if they're intensely
exercising or if it's a hot day


113
00:05:31,916 --> 00:05:33,276
and they're at risk
of dehydration.


114
00:05:34,076 --> 00:05:35,246
So we have added
new quantity type


115
00:05:35,286 --> 00:05:37,036
in HealthKit called
Dietary Water.


116
00:05:37,536 --> 00:05:38,716
Its unit is a volume.


117
00:05:39,266 --> 00:05:43,126
Like its name implies, this
type can also track water intake


118
00:05:43,186 --> 00:05:44,686
that occurs through food.


119
00:05:48,566 --> 00:05:49,956
The next type is UV Exposure.


120
00:05:50,146 --> 00:05:54,386
UV radiation is present in
sunlight and it has harms


121
00:05:54,386 --> 00:05:55,686
and benefits to human health.


122
00:05:55,976 --> 00:05:59,066
It can stimulate the
production of vitamin D,


123
00:05:59,126 --> 00:06:01,586
and it can improve
mood and well-being.


124
00:06:02,226 --> 00:06:04,366
However, overexposure
also has negative effects.


125
00:06:05,716 --> 00:06:08,166
It can have negative
effects like sunburn


126
00:06:08,166 --> 00:06:10,586
or long-term effects like
skin damage or cataracts.


127
00:06:10,886 --> 00:06:13,216
If you spend time in the
sun, it may be useful to know


128
00:06:13,216 --> 00:06:14,886
when you are most at
risk for sun damage.


129
00:06:17,126 --> 00:06:18,816
There are also nifty devices


130
00:06:18,816 --> 00:06:21,456
that track a person's
exposure to UV rays.


131
00:06:21,456 --> 00:06:23,396
And for apps and
sensors that do so,


132
00:06:23,396 --> 00:06:25,466
we're adding a new quantity
type called UV Exposure.


133
00:06:26,096 --> 00:06:27,006
Its value is a scalar.


134
00:06:27,006 --> 00:06:30,676
It represents the UV
index from 0 to 12,


135
00:06:30,676 --> 00:06:34,776
from least to most dangerous.


136
00:06:35,606 --> 00:06:37,556
Of course, UV exposure
isn't a perfect way


137
00:06:37,556 --> 00:06:38,666
to measure your risk
of sun damage.


138
00:06:38,666 --> 00:06:41,256
It could depend on the
clothing you are wearing,


139
00:06:41,556 --> 00:06:43,666
the sunscreen you have on,
or the skin type you have.


140
00:06:43,786 --> 00:06:46,366
For the last purpose we have
added a new characteristic type


141
00:06:46,366 --> 00:06:48,386
in HealthKit called the
Fitzpatrick Skin Type.


142
00:06:49,636 --> 00:06:51,786
This represents the skin
type of an individual based


143
00:06:51,896 --> 00:06:55,026
on the Fitzpatrick scale,
which is based on the degree


144
00:06:55,026 --> 00:06:56,056
of burning or tanning.


145
00:06:56,866 --> 00:07:00,376
The emogis in iOS 8.3 are
based on the Fitzpatrick scale.


146
00:07:00,376 --> 00:07:02,316
All the way on the
left is type 1,


147
00:07:02,316 --> 00:07:04,926
which represents very pale
skin that burns quite easily.


148
00:07:05,366 --> 00:07:08,556
And all the way on the right
is dark brown or black skin,


149
00:07:08,586 --> 00:07:10,736
which never burns
and tans profusely.


150
00:07:10,736 --> 00:07:17,196
Because the Fitzpatrick Skin
Type is a characteristic type,


151
00:07:17,196 --> 00:07:19,046
it behaves differently
from a category


152
00:07:19,046 --> 00:07:20,626
or a quantity sample
you might be used to.


153
00:07:20,696 --> 00:07:22,536
It's accessed directly
against the Health Store,


154
00:07:22,536 --> 00:07:25,606
and it returns a simple
wrapper around an enumeration.


155
00:07:30,816 --> 00:07:32,896
Now, I'd like to talk to
you about a whole new group


156
00:07:32,896 --> 00:07:34,916
of data types we are
adding under the category


157
00:07:34,966 --> 00:07:35,806
of reproductive health.


158
00:07:37,516 --> 00:07:41,026
[ Applause ]


159
00:07:41,526 --> 00:07:44,056
So when we think about
quantified health we think


160
00:07:44,056 --> 00:07:45,726
about technologically
driven items


161
00:07:45,776 --> 00:07:47,716
like activity trackers
and smartwatches.


162
00:07:48,686 --> 00:07:51,096
We think about HealthKit
syncing workouts,


163
00:07:51,366 --> 00:07:54,026
or maybe a food diary
automatically logging nutrition.


164
00:07:54,956 --> 00:07:57,296
But reproductive health is
a major component of health.


165
00:07:58,436 --> 00:08:00,976
For many women who track their
health data, nothing has been


166
00:08:00,976 --> 00:08:03,836
as exciting or revealing as
tracking their menstrual cycles,


167
00:08:04,426 --> 00:08:06,326
and for many couples who
are trying to conceive


168
00:08:06,616 --> 00:08:08,496
and for many couples who
are trying not to conceive,


169
00:08:08,986 --> 00:08:12,006
monitoring fertile times and
understanding hormonal changes


170
00:08:12,006 --> 00:08:14,236
or irregularities is
critical information.


171
00:08:16,626 --> 00:08:18,486
It might seem strange to
talk about data that is


172
00:08:18,606 --> 00:08:20,106
so sensitive and so intimate.


173
00:08:20,106 --> 00:08:22,736
Yet when we talk about
technology improving lives,


174
00:08:23,196 --> 00:08:25,576
this is vital, revealing,
and insightful information.


175
00:08:25,946 --> 00:08:28,426
It helps women understand and
be more aware of their bodies


176
00:08:28,696 --> 00:08:30,136
and to be in control
of their health.


177
00:08:31,236 --> 00:08:32,606
It helps and has helped millions


178
00:08:32,606 --> 00:08:34,296
of people make informed
decisions


179
00:08:34,456 --> 00:08:36,285
about their fertility
and family planning.


180
00:08:38,236 --> 00:08:40,446
Apps that track cycles
in fertility are some


181
00:08:40,446 --> 00:08:41,635
of the most popular
in the Health


182
00:08:41,635 --> 00:08:43,186
and Fitness category
in the App Store.


183
00:08:43,956 --> 00:08:46,266
This was the number one
developer request for HealthKit.


184
00:08:46,266 --> 00:08:50,006
We are so excited to be adding
support for these apps in iOS 9.


185
00:08:53,946 --> 00:08:56,636
So there are many factors
to reproductive health,


186
00:08:56,676 --> 00:08:58,916
and we starting by
adding six new types.


187
00:08:59,326 --> 00:09:01,116
These are meant to be
open, so they may be useful


188
00:09:01,116 --> 00:09:02,376
for people trying
to get pregnant,


189
00:09:02,686 --> 00:09:05,156
trying to not get pregnant,
or simply people wishing


190
00:09:05,156 --> 00:09:07,436
to have a full and more complete
picture of their health.


191
00:09:10,336 --> 00:09:11,776
The first type is
Basal Body Temperature,


192
00:09:11,856 --> 00:09:14,456
and for each type we will be
adding a dashboard graphic


193
00:09:14,456 --> 00:09:16,086
to show you how we are
visualizing this data


194
00:09:16,146 --> 00:09:16,956
in Apple Health.


195
00:09:20,426 --> 00:09:22,466
Basal body temperature is
the temperature of your body


196
00:09:22,466 --> 00:09:25,076
at rest, which typically is
measured early in the morning.


197
00:09:25,196 --> 00:09:26,706
It follows a biphasic path


198
00:09:26,706 --> 00:09:29,256
where your temperature increases
slightly after ovulation.


199
00:09:30,026 --> 00:09:32,256
People often track their basal
body temperature for months


200
00:09:32,256 --> 00:09:34,596
at a time so they can get
a pattern to their cycle


201
00:09:34,706 --> 00:09:36,356
and anticipate that
the next time around.


202
00:09:37,116 --> 00:09:38,956
It's often measured
with a pencil and paper.


203
00:09:39,296 --> 00:09:41,266
It's a time-honored
way to track ovulation.


204
00:09:44,016 --> 00:09:45,196
Another popular way to track


205
00:09:45,266 --> 00:09:48,696
or to monitor fertility is
cervical mucous quality.


206
00:09:48,696 --> 00:09:52,696
As opposed to the change
in basal body temperature,


207
00:09:52,816 --> 00:09:54,986
the change in CM occurs
slightly before ovulation.


208
00:09:54,986 --> 00:09:57,706
In HealthKit, this
is a category sample,


209
00:09:57,706 --> 00:10:00,336
which lists the generally
medically accepted CM states.


210
00:10:03,906 --> 00:10:06,306
The next type we're adding
is Ovulation Test Results.


211
00:10:08,676 --> 00:10:10,336
In females, an acute rise


212
00:10:10,336 --> 00:10:12,456
in luteinizing hormone
triggers ovulation.


213
00:10:13,686 --> 00:10:16,206
A user can buy a home test
kit and LH test strips


214
00:10:16,266 --> 00:10:19,496
to measure this LH surge.


215
00:10:19,496 --> 00:10:21,586
In HealthKit, this category
sample measures the result


216
00:10:21,586 --> 00:10:24,376
of such a test, and it can
be positive or negative.


217
00:10:28,736 --> 00:10:31,596
Menstruation is an extremely
important measure of health.


218
00:10:32,036 --> 00:10:35,016
Doctors often ask women when the
date of their last period was


219
00:10:35,016 --> 00:10:36,566
and about the regularity
of their cycle.


220
00:10:37,076 --> 00:10:42,336
Apps that help people track
this are extremely popular


221
00:10:42,336 --> 00:10:43,136
and varied.


222
00:10:44,206 --> 00:10:46,676
Here in HealthKit, we are
adding it as a category sample.


223
00:10:48,376 --> 00:10:51,206
We are also adding
a new metadata key,


224
00:10:52,266 --> 00:10:53,176
Menstrual Cycle Starts.


225
00:10:54,136 --> 00:10:56,166
Because the date of your
last period and regularity


226
00:10:56,166 --> 00:10:57,846
of a cycle is medically
important information,


227
00:10:57,846 --> 00:11:00,836
we want to make it easier for
apps to easily calculate this.


228
00:11:02,806 --> 00:11:05,196
We ask that all clients record
this Boolean metadata key,


229
00:11:05,196 --> 00:11:07,546
and if we don't see it we
will throw an exception.


230
00:11:10,106 --> 00:11:11,246
Let's review metadata.


231
00:11:11,686 --> 00:11:14,836
Metadata is a dictionary that
gives additional information


232
00:11:14,836 --> 00:11:15,776
about the HealthKit object


233
00:11:15,776 --> 00:11:17,446
that helps you extend
a given object type


234
00:11:17,446 --> 00:11:19,746
and add app-specific
information to HealthKit.


235
00:11:20,156 --> 00:11:23,276
The keys to the dictionary are
strings that you can create


236
00:11:23,276 --> 00:11:25,076
or are that are Apple
predefined keys.


237
00:11:25,736 --> 00:11:27,486
Predefined keys facilitate
sharing


238
00:11:27,486 --> 00:11:28,686
between different applications.


239
00:11:29,476 --> 00:11:31,426
Here we are creating
a metadata dictionary


240
00:11:32,396 --> 00:11:33,566
that has important information.


241
00:11:34,136 --> 00:11:36,716
And we are putting the sample
with the appropriate type


242
00:11:36,716 --> 00:11:38,716
of value and passing
in that metadata


243
00:11:38,716 --> 00:11:40,856
as we're creating the sample
before finally saving it


244
00:11:41,096 --> 00:11:42,086
to HealthKit.


245
00:11:45,806 --> 00:11:48,426
The next two types will
be category samples,


246
00:11:48,426 --> 00:11:51,386
but unlike existing category
samples in HealthKit,


247
00:11:51,386 --> 00:11:53,126
they will only have
a single value,


248
00:11:53,126 --> 00:11:56,696
HK Category Value
Not Applicable.


249
00:11:56,696 --> 00:11:58,996
These category samples
have dates, metadata,


250
00:11:58,996 --> 00:12:01,106
and other attributes, but
they cannot be enumerated


251
00:12:01,106 --> 00:12:02,036
into multiple values.


252
00:12:03,536 --> 00:12:05,496
So the first of these
types is vaginal spotting.


253
00:12:06,016 --> 00:12:08,476
It refers to light
bleeding that occurs outside


254
00:12:08,476 --> 00:12:10,016
of the menstruation period.


255
00:12:10,016 --> 00:12:11,856
So it's separate
from menstruation.


256
00:12:14,516 --> 00:12:16,446
The second type we're
adding is sexual activity.


257
00:12:17,816 --> 00:12:21,496
Sexual activity is
relevant and important


258
00:12:21,496 --> 00:12:23,736
in many fertility-tracking
applications.


259
00:12:23,736 --> 00:12:26,286
And we like to add support
for it in HealthKit.


260
00:12:26,366 --> 00:12:30,366
We are adding a new optional
predefined metadata key,


261
00:12:30,366 --> 00:12:31,726
Sexual Activity Protection Use.


262
00:12:31,726 --> 00:12:34,206
This can refer to
protection against STIs


263
00:12:34,206 --> 00:12:36,046
or protection against pregnancy.


264
00:12:40,536 --> 00:12:41,236
So let's summarize.


265
00:12:41,786 --> 00:12:44,536
We just talked about the
new data types we are adding


266
00:12:44,686 --> 00:12:47,576
in iOS 9, Water Intake,
UV Exposure,


267
00:12:47,616 --> 00:12:48,956
and Fitzpatrick Skin Type,


268
00:12:49,546 --> 00:12:51,656
and six new reproductive
health types.


269
00:12:52,876 --> 00:12:55,506
We look forward to seeing
the new and innovative ways


270
00:12:55,506 --> 00:12:56,896
that you will be
using these data types


271
00:12:56,946 --> 00:12:58,546
in your apps and devices.


272
00:12:58,546 --> 00:13:01,456
Now, I will hand
it over to Allen


273
00:13:01,866 --> 00:13:03,036
to talk about data sources.


274
00:13:04,516 --> 00:13:09,546
[ Applause ]


275
00:13:10,046 --> 00:13:10,556
>> ALLEN SHORTLIDGE:
Thank you, Shannon.


276
00:13:11,706 --> 00:13:14,626
Hi, my name is Allen,
I'm a software developer


277
00:13:14,626 --> 00:13:16,026
on the HealthKit team at Apple.


278
00:13:17,516 --> 00:13:19,756
We just heard Shannon
discuss the new types


279
00:13:19,756 --> 00:13:22,386
of data you can store
in HealthKit in iOS 9,


280
00:13:22,816 --> 00:13:24,426
and now I would like to
tell you a little bit


281
00:13:24,426 --> 00:13:27,396
about the new things that you
can do with HealthKit in iOS 9.


282
00:13:28,296 --> 00:13:30,536
The first set of changes
I will be discussing have


283
00:13:30,536 --> 00:13:31,896
to do with sources of data.


284
00:13:32,336 --> 00:13:37,276
HealthKit can store data
from a variety of sources.


285
00:13:37,936 --> 00:13:39,886
Samples may be pulled
automatically


286
00:13:39,886 --> 00:13:42,466
from the Motion code
processor in the user's iPhone


287
00:13:42,876 --> 00:13:45,216
or from a connected
Bluetooth heart rate monitor.


288
00:13:46,236 --> 00:13:49,526
They may also come from
manually entered samples


289
00:13:49,526 --> 00:13:53,756
in the Health app or saved
by applications create


290
00:13:53,756 --> 00:13:54,956
by developers like you.


291
00:13:55,356 --> 00:13:58,576
Knowing where the
data in HealthKit came


292
00:13:58,576 --> 00:14:01,286
from can be important,
especially if you are using


293
00:14:01,286 --> 00:14:03,976
that data for medical
or research purposes.


294
00:14:04,576 --> 00:14:06,996
So how do you tell where
data in HealthKit came from?


295
00:14:06,996 --> 00:14:12,976
Well, the HK object class is the
root class for all data stored


296
00:14:12,976 --> 00:14:16,906
in HealthKit, and in iOS 8
it had two properties related


297
00:14:16,906 --> 00:14:17,876
to the source of that data.


298
00:14:19,366 --> 00:14:20,896
The first is the
Source property.


299
00:14:21,586 --> 00:14:25,506
And it represents which
application saved that object.


300
00:14:26,396 --> 00:14:28,306
The second property is Metadata.


301
00:14:29,226 --> 00:14:32,326
Developers often use
metadata to store information


302
00:14:32,376 --> 00:14:34,966
about external devices
that created objects.


303
00:14:36,056 --> 00:14:38,366
This information can
be things like the name


304
00:14:38,366 --> 00:14:40,656
of the external device
or the manufacturer.


305
00:14:42,036 --> 00:14:44,636
In iOS 9, we are
introducing two new properties


306
00:14:44,736 --> 00:14:46,296
that give you richer information


307
00:14:46,296 --> 00:14:47,656
about where the object
came from.


308
00:14:47,876 --> 00:14:51,336
The first of these new
properties is the Source


309
00:14:51,336 --> 00:14:54,236
Revision property, and it
replaces the Source property.


310
00:14:54,996 --> 00:14:57,236
In addition to representing
the application


311
00:14:57,326 --> 00:15:00,686
that created the sample, it also
carries the version of the app


312
00:15:00,836 --> 00:15:01,806
that saved the object.


313
00:15:03,056 --> 00:15:05,266
The second property is
the Device property,


314
00:15:05,796 --> 00:15:09,256
and it returns an object that
represents the external device


315
00:15:09,256 --> 00:15:10,416
that created the object.


316
00:15:11,136 --> 00:15:13,956
It's intended to
replace metadata related


317
00:15:13,956 --> 00:15:15,106
to external devices.


318
00:15:15,706 --> 00:15:22,176
Let's take a quick look at
the HK Source Revision class.


319
00:15:22,716 --> 00:15:26,546
It just has two properties,
the source, which, again,


320
00:15:26,606 --> 00:15:27,916
represents -- oops sorry.


321
00:15:28,706 --> 00:15:31,606
Which represents the
application that saves the data,


322
00:15:31,726 --> 00:15:34,026
and then it also
includes a version string.


323
00:15:35,456 --> 00:15:36,996
When you save an
object to HealthKit,


324
00:15:37,886 --> 00:15:40,906
HealthKit will automatically
assign an HK source revision


325
00:15:40,906 --> 00:15:41,246
to it.


326
00:15:42,076 --> 00:15:45,846
The version string comes
from the bundle version entry


327
00:15:45,846 --> 00:15:47,056
in your app's Info.plist.


328
00:15:49,096 --> 00:15:50,876
Objects that were saved
to HealthKit prior


329
00:15:50,876 --> 00:15:53,066
to iOS 9 will have a
nil version string.


330
00:15:53,686 --> 00:15:57,906
Now, let's talk about HK Device.


331
00:15:58,836 --> 00:16:03,096
HK Device is a class that
includes a number of strings


332
00:16:03,486 --> 00:16:06,006
that represent different
aspects of a hardware device


333
00:16:06,206 --> 00:16:10,426
such as its name, manufacturer,
version information, and so on.


334
00:16:11,066 --> 00:16:14,506
When you create a device, you
will want to provide as many


335
00:16:14,506 --> 00:16:17,976
of the applicable properties
as possible to give your users


336
00:16:18,026 --> 00:16:21,496
and other applications the
richest information possible


337
00:16:21,496 --> 00:16:24,326
about where the object
came from.


338
00:16:26,476 --> 00:16:30,746
If your app saves objects that
were generated by the sensors


339
00:16:30,746 --> 00:16:33,366
that are built into the device
that your app is running on,


340
00:16:33,886 --> 00:16:37,136
then you can use the local
device class method on HK Device


341
00:16:37,426 --> 00:16:40,886
to get a device representing
the device


342
00:16:40,916 --> 00:16:42,546
that your app is running on.


343
00:16:44,776 --> 00:16:47,546
So let's take a look at
how you would save a sample


344
00:16:47,546 --> 00:16:48,446
with a device.


345
00:16:49,346 --> 00:16:52,306
First, you will create
a device with all


346
00:16:52,306 --> 00:16:53,536
of the applicable properties.


347
00:16:54,926 --> 00:16:58,746
Next, instantiate
a sample using one


348
00:16:58,746 --> 00:17:01,746
of the HK sample subclass
initializer methods


349
00:17:01,746 --> 00:17:02,736
that takes a device.


350
00:17:03,656 --> 00:17:06,776
Then finally, you can save
that object to HealthKit just


351
00:17:06,776 --> 00:17:07,896
as you would have previously.


352
00:17:10,476 --> 00:17:12,665
Querying for objects that come


353
00:17:12,665 --> 00:17:15,465
from a particular source
revision or device is easy too.


354
00:17:15,465 --> 00:17:19,656
You can use one of the new
predicate convenience methods


355
00:17:19,656 --> 00:17:24,106
exposed on HK Query in iOS 9.


356
00:17:24,965 --> 00:17:29,106
Here is an example of querying
for objects that were saved


357
00:17:29,106 --> 00:17:30,966
by a previous version
of our application.


358
00:17:31,416 --> 00:17:36,586
First, we are creating a source
revision with a default source


359
00:17:36,876 --> 00:17:38,426
and a 1.0 version string.


360
00:17:38,906 --> 00:17:43,796
Next, we are instantiating
a predicate


361
00:17:44,556 --> 00:17:47,436
that matches all samples that
have that source revision.


362
00:17:48,796 --> 00:17:51,996
Then finally, we will
execute an HK sample query,


363
00:17:51,996 --> 00:17:56,066
and it will return to us all of
the objects that were created


364
00:17:56,066 --> 00:18:05,936
by version 1 of our application.


365
00:18:06,266 --> 00:18:08,476
So now that we have talked
about new ways to save objects


366
00:18:08,476 --> 00:18:10,106
to HealthKit, let's
talk a little bit


367
00:18:10,106 --> 00:18:11,326
about deleting objects.


368
00:18:11,996 --> 00:18:17,276
In iOS 8, there was one way to
delete objects, and that was


369
00:18:17,276 --> 00:18:20,056
with the Delete Object
method on HK Health Store.


370
00:18:20,596 --> 00:18:23,776
It takes a single object
to delete, which is simple,


371
00:18:23,776 --> 00:18:26,866
but also a little inconvenient
if you need to delete more


372
00:18:26,866 --> 00:18:27,946
than one sample at once.


373
00:18:27,946 --> 00:18:30,936
So we are introducing
two new convenient ways


374
00:18:30,936 --> 00:18:31,916
to delete objects.


375
00:18:32,496 --> 00:18:35,756
The first is a method
on HK Health Store


376
00:18:35,756 --> 00:18:37,596
that takes an array
of objects to delete.


377
00:18:38,186 --> 00:18:40,316
You can use this whenever
you have previously queried


378
00:18:40,346 --> 00:18:43,336
for a set of samples and you
want to delete them all at once.


379
00:18:44,046 --> 00:18:47,626
For example, you might want to
migrate samples that were saved


380
00:18:47,766 --> 00:18:49,096
by a previous version
of your app


381
00:18:49,276 --> 00:18:51,676
to use HK Device
instead of metadata.


382
00:18:52,966 --> 00:18:56,236
Once you have saved new copies
of your previous objects,


383
00:18:56,356 --> 00:18:59,246
you could delete all of the
old ones using Delete Objects.


384
00:19:00,856 --> 00:19:04,636
The second new method that we
are exposing is Delete Objects


385
00:19:04,636 --> 00:19:05,876
Of Type with a predicate.


386
00:19:06,166 --> 00:19:07,726
So it will delete
all of the objects


387
00:19:07,726 --> 00:19:08,826
that match a given predicate.


388
00:19:09,596 --> 00:19:11,826
This is efficient because
you don't have to query


389
00:19:11,826 --> 00:19:13,946
for the objects before
you delete them.


390
00:19:18,556 --> 00:19:23,616
So it's not always the case that
you just want to delete objects.


391
00:19:23,656 --> 00:19:25,626
Sometimes you also
want to find out about


392
00:19:25,856 --> 00:19:27,066
when objects were deleted.


393
00:19:27,066 --> 00:19:30,246
Maybe the user has deleted
it or another application.


394
00:19:30,856 --> 00:19:33,556
If your app synchronizes
with HealthKit,


395
00:19:33,846 --> 00:19:35,656
ideally you would
remove an object


396
00:19:35,656 --> 00:19:38,086
from your database whenever
that object is removed


397
00:19:38,086 --> 00:19:39,256
from HealthKit's database.


398
00:19:39,726 --> 00:19:42,136
Within iOS 8, there was
no straightforward way


399
00:19:42,136 --> 00:19:43,046
to accomplish this.


400
00:19:43,576 --> 00:19:46,576
We are introducing a new way
to query for deleted objects


401
00:19:46,576 --> 00:19:50,506
in iOS 9 using the HK
Anchored Object Query class.


402
00:19:52,436 --> 00:19:55,516
HK Anchored Object Query
has a new initializer


403
00:19:55,516 --> 00:19:58,626
with a results handler
block that has parameters


404
00:19:58,626 --> 00:20:01,006
for both new sample
and deleted samples.


405
00:20:02,246 --> 00:20:05,016
Now, when you execute this
query, HealthKit will return


406
00:20:05,016 --> 00:20:08,396
to you all the samples that have
either been created or deleted


407
00:20:08,566 --> 00:20:09,706
that match your predicate


408
00:20:10,026 --> 00:20:12,126
since the last time you ran
an anchored object query,


409
00:20:12,596 --> 00:20:18,616
which is indicated by
the anchor you provide.


410
00:20:18,736 --> 00:20:21,246
Deleted objects are
represented by instances


411
00:20:21,246 --> 00:20:25,086
of the HK Deleted Object class,
which just carries the UID


412
00:20:25,186 --> 00:20:26,446
of the object that was deleted.


413
00:20:27,326 --> 00:20:30,916
To save space, deleted objects
are only stored in HealthKit


414
00:20:30,916 --> 00:20:32,866
for a limited amount
of time before they are


415
00:20:32,866 --> 00:20:33,996
expunged permanently.


416
00:20:34,476 --> 00:20:39,926
That means if you have
functionality that depends


417
00:20:39,986 --> 00:20:42,886
on querying for deleted
objects, you should register


418
00:20:42,886 --> 00:20:44,836
for background updates
to guarantee


419
00:20:44,836 --> 00:20:47,566
that your app will be launched
in response to deletions.


420
00:20:48,336 --> 00:20:50,876
You can use the existing
Enable Background Delivery


421
00:20:50,876 --> 00:20:55,396
For Type method that exists in
iOS 8 to be launched in response


422
00:20:55,396 --> 00:20:59,226
to deletions and sample
creations in iOS 9.


423
00:21:01,316 --> 00:21:03,166
Now, we are going
to return briefly


424
00:21:03,166 --> 00:21:05,026
to HK Anchored Object
Query to talk


425
00:21:05,026 --> 00:21:09,546
about a second new addition we
have made to the class in iOS 9.


426
00:21:09,866 --> 00:21:11,506
That's the Update
Handler property.


427
00:21:13,116 --> 00:21:15,356
When provided, this
block will be called


428
00:21:15,356 --> 00:21:18,466
after your results handler
whenever there are more samples


429
00:21:18,466 --> 00:21:20,046
that have been created
or deleted


430
00:21:20,046 --> 00:21:20,986
that match your predicate.


431
00:21:21,496 --> 00:21:25,246
An HK anchored object query


432
00:21:25,516 --> 00:21:28,616
that has an update handler will
continue to run indefinitely


433
00:21:28,696 --> 00:21:31,596
until you stop it
explicitly with Stop Query


434
00:21:31,716 --> 00:21:32,656
on an HK Health Store.


435
00:21:33,996 --> 00:21:35,626
As you will see later
in this presentation,


436
00:21:35,966 --> 00:21:39,166
this can be an efficient
way to process a stream


437
00:21:39,166 --> 00:21:40,086
of data from HealthKit.


438
00:21:41,066 --> 00:21:42,866
For instance, you might want


439
00:21:42,866 --> 00:21:45,186
to display the user's
latest heart rate reading


440
00:21:45,186 --> 00:21:45,766
from HealthKit.


441
00:21:45,766 --> 00:21:48,546
You can use an update
handler to accomplish this.


442
00:21:49,266 --> 00:21:52,106
As you may be aware, Apple
recently released a new piece


443
00:21:52,106 --> 00:21:54,236
of hardware, which can detect
the wearer's heart rate.


444
00:21:54,796 --> 00:21:57,196
Wouldn't it be cool if you
could run this query directly


445
00:21:57,196 --> 00:21:58,006
on that device?


446
00:21:58,686 --> 00:22:00,006
Well, it turns out you can.


447
00:22:01,786 --> 00:22:05,056
So in addition to making
improvements for HealthKit


448
00:22:05,056 --> 00:22:08,606
on iOS 9 this year, we are
also bringing the framework


449
00:22:08,606 --> 00:22:10,156
to WatchKit apps.


450
00:22:12,016 --> 00:22:17,276
[ Applause ]


451
00:22:17,776 --> 00:22:21,286
So HealthKit on watchOS is
a lot like HealthKit on iOS.


452
00:22:21,736 --> 00:22:24,186
Almost all of the HealthKit
APIs that you're familiar


453
00:22:24,186 --> 00:22:26,456
with are available
on watchOS also.


454
00:22:27,526 --> 00:22:30,656
You can store and retrieve
health data with all


455
00:22:30,656 --> 00:22:33,236
of the same queries and
methods that you are used to.


456
00:22:34,256 --> 00:22:37,016
However, because performance
is incredibly important


457
00:22:37,016 --> 00:22:39,676
on our new platform,
only a limited amount


458
00:22:39,676 --> 00:22:42,926
of historical HealthKit data
is available on the Watch.


459
00:22:43,566 --> 00:22:46,426
We are also introducing
brand-new workout APIs


460
00:22:46,426 --> 00:22:49,646
that will help you record
workouts on the Watch.


461
00:22:50,196 --> 00:22:54,346
Finally, data saved to HealthKit


462
00:22:54,346 --> 00:22:56,126
on the Watch will
sync automatically


463
00:22:56,256 --> 00:22:58,746
to the phone that the user has.


464
00:23:00,436 --> 00:23:04,276
When your app saves a workout on
Apple Watch, the energy burned


465
00:23:04,276 --> 00:23:06,616
by the user gets counted
in their activity rings.


466
00:23:07,356 --> 00:23:09,866
Your users will love getting
credit for the exercise


467
00:23:09,866 --> 00:23:14,186
that they do while wearing
the Watch and using your app.


468
00:23:14,186 --> 00:23:15,746
As you can see in
these screenshots,


469
00:23:16,346 --> 00:23:20,096
workouts that you save will
show up in the Daily Summary


470
00:23:20,096 --> 00:23:23,326
and the Activity app on iOS.


471
00:23:25,566 --> 00:23:28,626
Now, before I discuss workouts
more, I would like to turn


472
00:23:28,626 --> 00:23:29,756
to privacy for a second.


473
00:23:30,606 --> 00:23:34,096
We take the privacy of user's
HealthKit data seriously,


474
00:23:34,416 --> 00:23:37,886
so naturally we protect it on
the Watch just as we do on iOS.


475
00:23:37,886 --> 00:23:40,746
We will need to request access


476
00:23:41,076 --> 00:23:44,116
to use the user's
HealthKit data.


477
00:23:45,536 --> 00:23:47,556
When your app requests
authorization,


478
00:23:47,796 --> 00:23:50,716
a prompt will appear on both
the Watch and the user's phone


479
00:23:50,986 --> 00:23:52,806
to authorize your
app for access.


480
00:23:53,426 --> 00:23:58,276
So if your phone application
is authorized to store


481
00:23:58,276 --> 00:24:00,596
and retrieve distance
samples, let's say,


482
00:24:00,756 --> 00:24:04,536
then your Watch app also
will be authorized to store


483
00:24:04,536 --> 00:24:05,826
and retrieve distance samples.


484
00:24:07,546 --> 00:24:09,696
So once you have a WatchKit
app that's authorized


485
00:24:09,696 --> 00:24:12,116
to use HealthKit data,
one thing you might want


486
00:24:12,116 --> 00:24:13,426
to do is record a workout.


487
00:24:13,976 --> 00:24:18,876
We are introducing the brand-new
HK Workout Session class


488
00:24:18,876 --> 00:24:19,886
to facilitate this.


489
00:24:20,656 --> 00:24:23,376
With HK Workout Session,
you can specify a type


490
00:24:23,376 --> 00:24:24,946
of activity the user
is performing,


491
00:24:25,436 --> 00:24:29,276
and this information helps Apple
Watch more accurately record the


492
00:24:29,276 --> 00:24:30,176
user's activity.


493
00:24:31,386 --> 00:24:33,936
While in session, your app
stays in the foreground,


494
00:24:33,936 --> 00:24:35,796
so whenever the user
raises their wrist


495
00:24:35,796 --> 00:24:37,196
to check the progress
of the workout,


496
00:24:37,566 --> 00:24:38,866
your app will be
front and center.


497
00:24:40,346 --> 00:24:42,576
Note that only one workout
session will be running


498
00:24:42,576 --> 00:24:43,476
at any given time.


499
00:24:43,676 --> 00:24:47,196
So if the user starts another
workout in another application,


500
00:24:47,496 --> 00:24:49,546
then your workout
session will end.


501
00:24:51,856 --> 00:24:53,746
Let's look at HK
Workout Session.


502
00:24:55,616 --> 00:24:57,106
You instantiate a
workout session


503
00:24:57,296 --> 00:24:59,186
with an activity type
and a location type.


504
00:25:00,326 --> 00:25:03,186
The location type indicates
whether the activity is taking


505
00:25:03,186 --> 00:25:04,976
place indoors or outdoors.


506
00:25:05,596 --> 00:25:08,456
You can also set a delegate.


507
00:25:09,186 --> 00:25:12,786
This allows you to be
informed of changes


508
00:25:12,786 --> 00:25:13,776
to the state of the workout.


509
00:25:14,326 --> 00:25:21,266
So the HK Workout Session
delegate protocol has


510
00:25:21,306 --> 00:25:22,066
two methods.


511
00:25:23,946 --> 00:25:26,026
The first of these is
called whenever the state


512
00:25:26,026 --> 00:25:27,296
of the workout changes.


513
00:25:27,296 --> 00:25:31,026
For instance, from Not Started
to Running or Running to Ended.


514
00:25:31,646 --> 00:25:34,566
It's a good opportunity to
note the start and end date


515
00:25:34,566 --> 00:25:36,386
of the workout and also start


516
00:25:36,386 --> 00:25:39,146
or stop any data queries
that you might have.


517
00:25:41,496 --> 00:25:44,296
The second method is called
whenever there is an error.


518
00:25:44,296 --> 00:25:47,496
It will be called in
addition to the first method,


519
00:25:48,416 --> 00:25:51,326
and it indicates that your
workout session ended.


520
00:25:53,716 --> 00:25:56,316
Starting and stopping workout
sessions is really easy.


521
00:25:56,596 --> 00:25:59,266
You just call Start Workout
Session or Stop Workout Session


522
00:25:59,566 --> 00:26:00,476
on an HK Health Store.


523
00:26:01,286 --> 00:26:04,176
So now I'd like to give you
a quick demonstration of how


524
00:26:04,176 --> 00:26:07,206
to build a WatchKit app
using these new APIs.


525
00:26:14,776 --> 00:26:17,896
So I have built a simple
WatchKit application,


526
00:26:18,206 --> 00:26:20,346
and I would like to give
you a tour of that app now.


527
00:26:21,536 --> 00:26:25,856
It allows the user to
specify an activity


528
00:26:25,856 --> 00:26:28,086
that they are performing,
like running.


529
00:26:28,266 --> 00:26:29,386
I will choose running.


530
00:26:30,656 --> 00:26:32,426
Once they have chosen
an activity type,


531
00:26:32,506 --> 00:26:35,306
they will next choose
a location type.


532
00:26:36,966 --> 00:26:39,206
Outdoors or indoors.


533
00:26:40,276 --> 00:26:44,266
I will choose outdoors, and
this is the in-session view,


534
00:26:44,366 --> 00:26:46,556
and it will show a couple of
metrics about the workout.


535
00:26:48,106 --> 00:26:50,036
So nothing is happening
in this session view


536
00:26:50,036 --> 00:26:51,646
because we haven't hooked
it up to HealthKit yet.


537
00:26:52,126 --> 00:26:52,686
Let's do that now.


538
00:26:54,816 --> 00:26:58,626
Here in Xcode, we are looking


539
00:26:58,626 --> 00:27:01,166
at my activity interface
controller.


540
00:27:02,116 --> 00:27:05,296
This is the first view we
just saw where the user chose


541
00:27:05,296 --> 00:27:06,606
when activity they
were performing.


542
00:27:07,046 --> 00:27:11,136
This is a good opportunity for
me to request authorization


543
00:27:11,136 --> 00:27:12,256
to access HealthKit data.


544
00:27:12,356 --> 00:27:16,186
So I'm going to do that
right here in the awake --


545
00:27:16,186 --> 00:27:18,476
I'm sorry, Will Activate method.


546
00:27:18,476 --> 00:27:24,616
The first thing I have
done is instantiate a set


547
00:27:24,616 --> 00:27:27,566
of types I want to share which
just includes the workout type,


548
00:27:28,386 --> 00:27:33,076
and then next, I have a set of
types that I would like to read


549
00:27:33,076 --> 00:27:36,756
from HealthKit, like active
energy burned, distance cycling,


550
00:27:37,116 --> 00:27:39,846
distance walking and running,
and the heart rate of the user.


551
00:27:41,186 --> 00:27:43,176
Finally, we just call
and request authorization


552
00:27:43,176 --> 00:27:46,156
to share types just
like you would on iOS.


553
00:27:47,256 --> 00:27:49,346
Now, we also need to
implement something


554
00:27:49,346 --> 00:27:53,126
in our companion application
to finish this request.


555
00:27:54,486 --> 00:27:57,226
So I'm in the app delegate
of my companion app


556
00:27:57,786 --> 00:28:03,886
and I will implement a new UI
application delegate method.


557
00:28:04,526 --> 00:28:07,046
Application should request
health authorization.


558
00:28:08,626 --> 00:28:11,646
Here all I'm doing is
calling handle authorization


559
00:28:11,646 --> 00:28:13,106
for extension with completion,


560
00:28:13,516 --> 00:28:15,946
which will prompt the
user to authorize my app.


561
00:28:17,416 --> 00:28:19,316
Let's see this in action now.


562
00:28:27,796 --> 00:28:31,066
So as you can see, the user has
been prompted on both the Watch


563
00:28:31,186 --> 00:28:36,066
and the phone to open your
app and authorize the app.


564
00:28:37,416 --> 00:28:40,216
Here is the familiar
health authorization sheet.


565
00:28:40,796 --> 00:28:43,346
I will approve the app to
access everything it wants to,


566
00:28:43,346 --> 00:28:45,236
and hit Allow.


567
00:28:45,656 --> 00:28:48,546
Now, we are authorized
to use HealthKit data.


568
00:28:49,166 --> 00:28:54,856
So the next thing we need to
do is start a workout session


569
00:28:54,886 --> 00:28:56,046
when the user taps Start.


570
00:28:56,996 --> 00:28:59,406
I have a Workout Session
Manager class here,


571
00:28:59,406 --> 00:29:01,596
and that's what is responsible


572
00:29:01,596 --> 00:29:03,746
for managing my interaction
with HealthKit.


573
00:29:04,476 --> 00:29:08,876
It's a bit of a big
class, but we are going


574
00:29:08,876 --> 00:29:11,126
to implement just
a few parts of it.


575
00:29:11,856 --> 00:29:14,386
The Start Workout method
is called right here


576
00:29:14,496 --> 00:29:15,756
when we hit the Start button.


577
00:29:16,736 --> 00:29:18,546
So I will want to
start a workout session


578
00:29:18,546 --> 00:29:21,226
which I have instantiated
previously in my constructor.


579
00:29:25,856 --> 00:29:29,386
All we are doing is calling
Start Workout Session


580
00:29:29,546 --> 00:29:32,056
on an HK Health Store
with that workout session.


581
00:29:33,746 --> 00:29:36,056
Now, we need to implement
the workout session delegate


582
00:29:36,056 --> 00:29:38,866
protocol so that we can
be informed of changes


583
00:29:38,866 --> 00:29:41,986
to the state of the workout.


584
00:29:42,736 --> 00:29:44,356
So as this is called
on a background cue,


585
00:29:44,386 --> 00:29:47,196
I'm dispatching back to the
main queue before handling the


586
00:29:47,196 --> 00:29:47,856
state change.


587
00:29:49,096 --> 00:29:52,156
If the state of the
session changed to Running,


588
00:29:52,316 --> 00:29:55,746
I will call my Workout Did
Start method, and if it changes


589
00:29:55,746 --> 00:29:58,566
to Ended, I will
call Workout Did End.


590
00:30:00,316 --> 00:30:05,286
So let's go down to
Workout Did Start.


591
00:30:05,476 --> 00:30:08,216
One of the things we will need
to do is start some queries


592
00:30:08,696 --> 00:30:11,146
for HealthKit data to
display in the workout.


593
00:30:12,486 --> 00:30:14,016
One of those metrics
is distance.


594
00:30:14,156 --> 00:30:18,056
So I need a query for gathering
distance data from HealthKit


595
00:30:18,146 --> 00:30:20,926
and accumulating it as the
workout session progresses.


596
00:30:21,786 --> 00:30:25,166
I'm going to create a helper
method that will create


597
00:30:25,216 --> 00:30:28,186
that query right
here, and we are going


598
00:30:28,186 --> 00:30:34,786
to use HK Anchored Object
Query with an update handler.


599
00:30:36,566 --> 00:30:38,776
So I have written Create
Streaming Distance Query,


600
00:30:38,776 --> 00:30:40,866
and it takes a workout
start date.


601
00:30:41,856 --> 00:30:44,366
The first thing we do
is create a predicate,


602
00:30:44,836 --> 00:30:49,476
which matches all queries that,
sorry, matches all samples


603
00:30:49,476 --> 00:30:52,846
that have a start date after
the workout start date.


604
00:30:54,306 --> 00:30:58,346
Next, I have instantiated
an HK anchored object query


605
00:30:59,426 --> 00:31:00,466
with a results handler


606
00:31:00,566 --> 00:31:03,066
that calls my Add
Distance Samples method.


607
00:31:04,126 --> 00:31:06,516
Add Distance Samples is
implemented right here.


608
00:31:06,516 --> 00:31:09,336
It dispatches back
to the main cue


609
00:31:09,336 --> 00:31:12,566
and then it adds the
new distance sample


610
00:31:12,566 --> 00:31:16,456
to my running total of distance
and it also adds that sample


611
00:31:16,456 --> 00:31:18,766
to an array of samples
that I'm accumulating


612
00:31:18,766 --> 00:31:19,796
over the course of the workout.


613
00:31:22,066 --> 00:31:25,066
So, again, in the results
handler we call Add Distance


614
00:31:25,066 --> 00:31:28,556
Samples, and then in
our update handler,


615
00:31:28,556 --> 00:31:29,776
we do exactly the same thing,


616
00:31:30,276 --> 00:31:31,906
and finally we return
that distance query.


617
00:31:33,616 --> 00:31:35,436
So now that we have
that available to us,


618
00:31:35,486 --> 00:31:43,836
let's use it in Workout
Did Start.


619
00:31:44,006 --> 00:31:47,296
Workout Did Start notes the
start date of the workout,


620
00:31:47,296 --> 00:31:50,556
and then it creates queries
for streaming distance,


621
00:31:50,936 --> 00:31:53,306
active energy, and heart rate.


622
00:31:53,846 --> 00:31:56,506
It executes all of the
queries that we created,


623
00:31:56,506 --> 00:31:59,606
and then it informs the UI
that the workout started.


624
00:32:00,946 --> 00:32:03,396
So let's take a look
at how this works now.


625
00:32:12,616 --> 00:32:14,146
So I will choose running again.


626
00:32:15,336 --> 00:32:16,136
An outdoor run.


627
00:32:17,616 --> 00:32:19,896
And as you can see, the
timer is increasing,


628
00:32:21,006 --> 00:32:24,956
and I'm also accumulating some
simulated distance samples,


629
00:32:25,176 --> 00:32:28,916
and some calorie samples
will show up in a little bit.


630
00:32:28,916 --> 00:32:31,186
So the user can see
their distance, calories,


631
00:32:31,186 --> 00:32:32,766
and heart rate right
here in the app.


632
00:32:34,096 --> 00:32:37,006
The last thing that we want
to enable the user to do is


633
00:32:37,006 --> 00:32:38,506
to stop and save the workout.


634
00:32:38,506 --> 00:32:43,126
I have a Force Touch menu that
just has a single Save button


635
00:32:44,026 --> 00:32:46,356
that the user will tap
when the workout stops.


636
00:32:47,056 --> 00:32:48,736
We haven't implemented this yet,


637
00:32:48,736 --> 00:32:50,666
so the workout is still
continuing though.


638
00:32:51,006 --> 00:32:53,226
So now let's implement that.


639
00:32:54,676 --> 00:33:01,556
So I have a Stop Workout And
Save method that's called


640
00:33:01,826 --> 00:33:06,426
by the UI whenever the user taps
that Force Touch menu button.


641
00:33:07,556 --> 00:33:13,596
I will stop the workout
session here.


642
00:33:14,256 --> 00:33:16,556
And I do that just by
calling Stop Workout Session.


643
00:33:18,266 --> 00:33:21,506
Now, we need to handle that
state change to the ended state.


644
00:33:21,506 --> 00:33:26,086
We are calling Workout Did
End in response to that.


645
00:33:28,496 --> 00:33:32,296
So here, as you might imagine,
we need to stop our queries


646
00:33:32,896 --> 00:33:34,096
and then save the workout.


647
00:33:35,696 --> 00:33:40,886
So we will note the end
date of the workout.


648
00:33:41,126 --> 00:33:43,276
We will stop all of our queries.


649
00:33:43,276 --> 00:33:46,546
We will inform the UI
that the workout stopped,


650
00:33:46,656 --> 00:33:52,276
and then we will
save the workout.


651
00:33:52,276 --> 00:33:56,016
Saving the workout to
HealthKit is pretty simple, too.


652
00:33:57,756 --> 00:34:02,596
The first thing I have done
is unwrap the optional start


653
00:34:02,596 --> 00:34:05,086
and end dates that I noted


654
00:34:05,086 --> 00:34:07,196
in Workout Did Start
and Workout Did End.


655
00:34:07,826 --> 00:34:09,916
I am using Swift's
new guard statement


656
00:34:09,916 --> 00:34:11,936
to return early if
those are nil.


657
00:34:13,936 --> 00:34:17,186
Next, we instantiate a
workout with the activity type


658
00:34:17,226 --> 00:34:19,286
that the user performs,
the start and end date,


659
00:34:19,286 --> 00:34:24,706
and the total active
energy burned and distance.


660
00:34:26,176 --> 00:34:28,596
I'm also creating an array
with all of the samples


661
00:34:28,596 --> 00:34:30,626
that I accumulated over
the course of the workout,


662
00:34:30,956 --> 00:34:32,966
because we want to associate
these samples with it


663
00:34:32,966 --> 00:34:36,936
after we save the workout.


664
00:34:37,076 --> 00:34:38,795
Next, I will save the
workout to HealthKit,


665
00:34:40,136 --> 00:34:43,666
and once that's complete, I will
add samples to that workout.


666
00:34:44,396 --> 00:34:55,356
So let's take a look
at that now.


667
00:34:55,626 --> 00:34:58,486
So I'm choosing running
again, outdoor run,


668
00:35:00,266 --> 00:35:01,376
my workout is progressing.


669
00:35:02,826 --> 00:35:07,066
Once we have got a few metrics
here, I'm going to save it.


670
00:35:08,386 --> 00:35:09,646
And I will save it.


671
00:35:09,646 --> 00:35:11,506
And the workout is finished.


672
00:35:12,706 --> 00:35:15,646
So now that we have saved
that workout to HealthKit,


673
00:35:15,646 --> 00:35:18,646
let's see if we can get it to
show up in our companion app.


674
00:35:20,336 --> 00:35:22,456
There is our three-calorie
workout right there.


675
00:35:22,836 --> 00:35:24,836
It was a lot of work.


676
00:35:25,676 --> 00:35:31,846
[ Applause ]


677
00:35:32,346 --> 00:35:36,626
Okay. Let's recap what we
did in the demo just now.


678
00:35:37,466 --> 00:35:39,536
First, we requested
authorization


679
00:35:39,536 --> 00:35:41,676
to access the user's
HealthKit data.


680
00:35:43,276 --> 00:35:46,806
Next, we used HK Workout
Session to record the workout


681
00:35:47,296 --> 00:35:48,326
and we streamed samples


682
00:35:48,326 --> 00:35:50,606
from HealthKit using HK
Anchored Object Query.


683
00:35:51,466 --> 00:35:54,216
Finally we saved the
HK workout to HealthKit


684
00:35:54,306 --> 00:35:56,406
and associated samples with it.


685
00:35:58,856 --> 00:36:01,826
So that's what's new
in HealthKit in iOS 9.


686
00:36:02,646 --> 00:36:05,156
We started today by covering
the unit preference API,


687
00:36:05,806 --> 00:36:07,646
which allows you to
display HealthKit data


688
00:36:07,646 --> 00:36:11,246
in your app using the units
that the user prefers.


689
00:36:12,526 --> 00:36:15,616
Next, we covered new data types
that you can store in HealthKit


690
00:36:15,616 --> 00:36:18,036
such as Water Intake,
UV Exposure,


691
00:36:18,066 --> 00:36:20,646
and information related
to reproductive health.


692
00:36:21,516 --> 00:36:24,896
Next, we talked about source
revisions and devices,


693
00:36:25,016 --> 00:36:27,486
which give you a richer
picture of where the data


694
00:36:27,486 --> 00:36:28,596
in HealthKit comes from.


695
00:36:30,136 --> 00:36:33,006
We also covered new
ways to delete samples


696
00:36:33,006 --> 00:36:34,666
and query for deleted samples.


697
00:36:35,256 --> 00:36:38,056
And finally, we discussed
the HK Workout Session API


698
00:36:38,056 --> 00:36:40,896
and showed you how to build
a WatchKit app that uses it.


699
00:36:43,576 --> 00:36:45,376
We think you will love
the improvements we made


700
00:36:45,376 --> 00:36:47,526
to HealthKit in iOS
9 and we can't wait


701
00:36:47,526 --> 00:36:50,566
to see what you build with it.


702
00:36:50,646 --> 00:36:53,606
For more information, you
can visit the developer


703
00:36:53,606 --> 00:36:57,016
documentation at
developer.apple.com/healthKit


704
00:36:57,646 --> 00:36:59,086
or contact technical support.


705
00:36:59,886 --> 00:37:02,606
You can make a general query
to healthkit@apple.com.


706
00:37:02,696 --> 00:37:05,046
So thanks, and enjoy the
rest of the conference.


707
00:37:05,676 --> 00:37:19,100
[ Applause ]

