1
00:00:00,506 --> 00:00:09,496
[ Silence ]


2
00:00:09,996 --> 00:00:10,486
>> Simon Fraser: Good morning.


3
00:00:11,616 --> 00:00:13,516
This session is about
Power and Performance,


4
00:00:14,096 --> 00:00:16,326
Optimizing your Websites
for Great Battery Life


5
00:00:16,326 --> 00:00:17,406
and Responsive Scrolling.


6
00:00:18,136 --> 00:00:19,956
I'm Simon Fraser
and I'm Engineer


7
00:00:19,956 --> 00:00:23,306
on the Safari and WebKit Team.


8
00:00:23,506 --> 00:00:27,116
So as you've heard about all
week, one of our primary goals


9
00:00:27,766 --> 00:00:32,406
with OS X Mavericks was to
get great power efficiency


10
00:00:32,926 --> 00:00:36,186
but still maintain and even
improve responsiveness.


11
00:00:36,506 --> 00:00:41,226
So through all the levels of the
operating system we've optimized


12
00:00:41,506 --> 00:00:44,126
for fast performance
and long battery life.


13
00:00:44,586 --> 00:00:46,956
And we know that battery life
is really important to you


14
00:00:47,206 --> 00:00:48,696
because we all use
MacBook's every day


15
00:00:48,696 --> 00:00:50,416
and you really want
that all day battery.


16
00:00:50,936 --> 00:00:53,646
And we also know that you spend
a lot of time browsing the web


17
00:00:54,416 --> 00:00:57,296
so you want a web browser
that's super power efficient and


18
00:00:57,296 --> 00:00:59,586
yet still feels fast
and responsive.


19
00:01:00,106 --> 00:01:03,006
But that's not an easy
thing for a web browser.


20
00:01:03,906 --> 00:01:05,756
Web browsers have to
load complex pages.


21
00:01:06,206 --> 00:01:08,446
Those pages contain scripts
that have to be executed.


22
00:01:08,656 --> 00:01:10,016
They load plugins and so on.


23
00:01:10,586 --> 00:01:13,046
So this is quite a challenge
but this is a challenge


24
00:01:13,046 --> 00:01:17,026
that we've met head on in Safari
7 so we have a great new set


25
00:01:17,026 --> 00:01:18,386
of features in Safari 7


26
00:01:18,656 --> 00:01:20,336
that give us much
better power efficiency.


27
00:01:20,846 --> 00:01:24,096
But we also need your help.


28
00:01:24,686 --> 00:01:28,466
In many ways we can only be as
power efficient as the web pages


29
00:01:28,466 --> 00:01:31,956
that we load and display so
we need your help to make sure


30
00:01:31,956 --> 00:01:33,386
that your pages are
power efficient


31
00:01:33,386 --> 00:01:34,776
and that they also play well


32
00:01:34,776 --> 00:01:36,566
with Safari's new
power saving features.


33
00:01:36,846 --> 00:01:41,336
So I'll be talking about
that later on in the session.


34
00:01:41,466 --> 00:01:43,926
So there are three main
sections in this talk today.


35
00:01:44,606 --> 00:01:47,126
First of all I'll talk about
the new power saving features


36
00:01:47,126 --> 00:01:47,706
in Safari.


37
00:01:48,886 --> 00:01:51,806
Secondly I'll talk about how
you can make power efficient web


38
00:01:51,806 --> 00:01:55,816
pages, some new web API you
can use, the tools you use


39
00:01:55,816 --> 00:01:57,986
to detect whether your page
is using too much power


40
00:01:57,986 --> 00:02:01,216
and also some common mistakes
that we've seen pages make


41
00:02:01,456 --> 00:02:03,886
that cause them to use too much
power than the author intended.


42
00:02:04,386 --> 00:02:07,576
And finally I'll talk
about Safari's new response


43
00:02:07,576 --> 00:02:10,216
to scrolling which will give
your users a buttery smooth


44
00:02:10,216 --> 00:02:13,186
scrolling experience on your web
pages and how you can make sure


45
00:02:13,186 --> 00:02:14,836
that your pages get
that best scrolling.


46
00:02:15,276 --> 00:02:18,266
So let me start by talking


47
00:02:18,266 --> 00:02:20,906
about these new power
saving features in Safari.


48
00:02:21,016 --> 00:02:24,106
And there are two features that
I want to talk about today.


49
00:02:25,136 --> 00:02:27,386
The first one is called
App Nap for Safari tabs


50
00:02:27,916 --> 00:02:30,286
and the second one is
called Power Saver.


51
00:02:32,796 --> 00:02:34,136
So if you were in any


52
00:02:34,136 --> 00:02:36,766
of the energy related
sessions yesterday you'll know


53
00:02:36,766 --> 00:02:40,136
that there's a new feature in
OS X Mavericks called App Nap.


54
00:02:41,316 --> 00:02:44,066
Now the purpose of App Nap
is to focus system recourses


55
00:02:44,356 --> 00:02:46,346
on the task that's most
important to the user.


56
00:02:46,346 --> 00:02:49,706
So what we've done is
we've applied App Nap


57
00:02:49,706 --> 00:02:50,786
to tabs in Safari.


58
00:02:51,196 --> 00:02:53,576
And this means we can
Nap background tabs


59
00:02:53,606 --> 00:02:57,326
and that saves us
a lot of power.


60
00:02:57,506 --> 00:02:58,306
So how does this work?


61
00:02:58,536 --> 00:03:00,016
Well you may already know


62
00:03:00,016 --> 00:03:03,056
that in Safari we actually use
a separate process for loading


63
00:03:03,056 --> 00:03:04,166
and rendering the web page


64
00:03:04,166 --> 00:03:06,276
and we call this the
Web Content Process.


65
00:03:07,186 --> 00:03:11,696
New in Safari 7 now, each tab
has its own web content process


66
00:03:12,116 --> 00:03:13,266
and that means that the pages


67
00:03:13,266 --> 00:03:15,896
in different tabs are mostly
isolated from each other.


68
00:03:17,096 --> 00:03:19,616
But it also means that
we can now apply App Nap


69
00:03:20,166 --> 00:03:22,326
to the processes for
each tab independently


70
00:03:22,446 --> 00:03:26,606
and of course now we can do
that, we can Nap background tabs


71
00:03:26,836 --> 00:03:29,526
and this allows Safari to
focus all its resources


72
00:03:29,526 --> 00:03:30,946
on the tab you're
working with right there


73
00:03:30,946 --> 00:03:32,156
which makes it really
responsive.


74
00:03:32,156 --> 00:03:36,236
So when can we do
this napping of tabs?


75
00:03:36,566 --> 00:03:38,216
Well in general we'll
Nap any tab


76
00:03:38,216 --> 00:03:40,116
that the user can't
currently see


77
00:03:40,446 --> 00:03:43,776
so that means background tabs,
tabs that minimize windows


78
00:03:43,776 --> 00:03:46,206
on another space or with the
screen servers on covering


79
00:03:46,206 --> 00:03:48,236
up Safari and in
general any window


80
00:03:48,236 --> 00:03:49,966
which is what we call
occluded which just means


81
00:03:49,966 --> 00:03:51,376
that it's covered
up by something else


82
00:03:51,376 --> 00:03:52,756
and the user can't see it.


83
00:03:53,226 --> 00:03:57,206
And there's one other
case where we can Nap tabs


84
00:03:57,506 --> 00:03:59,576
and that's what we
call idle windows.


85
00:04:00,716 --> 00:04:03,976
So the system can now tell
us whether a window has been


86
00:04:03,976 --> 00:04:04,906
updated recently.


87
00:04:05,546 --> 00:04:08,476
And if it hasn't then
we can apply App Nap


88
00:04:08,476 --> 00:04:11,946
to that web process which means
that if a web page is loaded,


89
00:04:11,946 --> 00:04:14,646
maybe it's in the background,
and you can kind of see part


90
00:04:14,646 --> 00:04:16,086
of the window but
it's not actually,


91
00:04:16,086 --> 00:04:17,606
the page is not really
doing anything.


92
00:04:17,805 --> 00:04:20,736
That means that page is
also eligible for napping.


93
00:04:23,776 --> 00:04:27,226
So what is the impact on your
web page of being in a tab


94
00:04:27,226 --> 00:04:29,436
that has been App Napped?


95
00:04:29,886 --> 00:04:31,266
Well if you were in any


96
00:04:31,266 --> 00:04:33,496
of the energy related
sessions you'll know that one


97
00:04:33,496 --> 00:04:36,186
of the worst things for power
efficiency is the firing


98
00:04:36,186 --> 00:04:36,926
of timers.


99
00:04:37,676 --> 00:04:40,086
Every time a timer fires
the system has to wake up,


100
00:04:40,396 --> 00:04:42,236
the CPU has to ramp up
from a low power mode


101
00:04:42,236 --> 00:04:44,516
to a how power mode and
all this is very wasteful.


102
00:04:44,936 --> 00:04:47,766
So one of the best ways
that we can save power is


103
00:04:47,766 --> 00:04:50,276
to rate limit the JavaScript
timers and those are setTimeout


104
00:04:50,276 --> 00:04:51,526
and setInterval in JavaScript.


105
00:04:52,156 --> 00:04:56,526
If you're using
requestAnimationFrame,


106
00:04:56,526 --> 00:04:58,306
which I'll talk about a bit
later on in the session,


107
00:04:58,496 --> 00:04:59,776
that will also get rate limited.


108
00:05:00,886 --> 00:05:04,746
But when we were working on
this we found a couple cases


109
00:05:04,746 --> 00:05:08,646
where tabs in the background
are actually doing useful work


110
00:05:08,646 --> 00:05:09,996
or things that you
want to continue.


111
00:05:09,996 --> 00:05:12,116
For example there are
some audio players


112
00:05:12,466 --> 00:05:15,576
that you know periodically
load data dynamically


113
00:05:15,576 --> 00:05:19,436
as they're running and that's
something you want to continue


114
00:05:19,436 --> 00:05:20,756
to work because you
want that audio


115
00:05:20,756 --> 00:05:22,296
to keep playing audio
in the background.


116
00:05:22,296 --> 00:05:24,986
So we actually detect that and
we don't Nap tabs in that case.


117
00:05:25,296 --> 00:05:28,186
And if tabs are also dynamically
loaded content we won't


118
00:05:28,686 --> 00:05:31,286
Nap them.


119
00:05:31,566 --> 00:05:32,836
So what should you
do to make sure


120
00:05:32,836 --> 00:05:36,766
that your web pages play nicely
with App Nap for Safari Tabs?


121
00:05:37,596 --> 00:05:38,506
Well in general, nothing.


122
00:05:38,506 --> 00:05:40,396
We hope this will just
work very transparently.


123
00:05:40,816 --> 00:05:41,756
But you should be aware


124
00:05:42,036 --> 00:05:43,846
that your timers
could be rate-limited.


125
00:05:44,426 --> 00:05:49,576
So that's App Nap
for Safari Tabs.


126
00:05:50,206 --> 00:05:51,246
We think this is
going to be great


127
00:05:51,246 --> 00:05:54,046
for people we call tab
holders, the kinds of people


128
00:05:54,046 --> 00:05:56,136
who have lots of tabs
open and lots of windows.


129
00:05:56,906 --> 00:05:59,116
Those kinds of people should
really investigate Safari


130
00:05:59,116 --> 00:06:00,956
Reading Lists because that's a
much better way of keeping track


131
00:06:00,956 --> 00:06:01,846
of all of those URL's.


132
00:06:01,846 --> 00:06:03,646
But if you do have lots
of windows and lots


133
00:06:03,646 --> 00:06:07,546
of tabs open now, Safari is able
to Nap all those background tabs


134
00:06:07,796 --> 00:06:09,796
which means that it's
really focusing resources


135
00:06:09,796 --> 00:06:11,186
on the tab you're
currently working with


136
00:06:11,186 --> 00:06:13,176
and that makes you feel
much more responsive.


137
00:06:13,846 --> 00:06:16,676
So the second new
feature I want to talk


138
00:06:16,676 --> 00:06:19,076
about today is called
Safari Power Saver.


139
00:06:19,076 --> 00:06:21,766
One of the things we found


140
00:06:22,276 --> 00:06:24,556
when we were investigating
power usage in Safari,


141
00:06:24,556 --> 00:06:26,206
and this didn't really
surprise us,


142
00:06:26,556 --> 00:06:28,966
is that plugins use an
enormous amount of power.


143
00:06:29,526 --> 00:06:32,786
And this is a problem we
didn't have to solve in iOS.


144
00:06:33,136 --> 00:06:36,526
Now in OS X we could have
simply stopped running plugins


145
00:06:36,796 --> 00:06:38,006
but the problem is
that would result


146
00:06:38,006 --> 00:06:39,376
in a broken user experience.


147
00:06:39,726 --> 00:06:42,226
Many people visit a page and not
really understand why it didn't


148
00:06:42,226 --> 00:06:44,146
work the way it used to
because the plugins not running.


149
00:06:44,696 --> 00:06:46,606
So we had to fix this in a way


150
00:06:46,606 --> 00:06:48,406
that was a bit smarter
than that.


151
00:06:48,756 --> 00:06:50,986
And we came up with something
that we call Power Saver.


152
00:06:51,896 --> 00:06:55,776
This gave us, the impact of
turning on Power Saver we got an


153
00:06:55,776 --> 00:06:58,426
up to 35% reduction in
CPU power consumption


154
00:06:58,776 --> 00:07:00,296
so it's really great
energy saving.


155
00:07:00,836 --> 00:07:05,336
So you know why do
we need this thing?


156
00:07:05,336 --> 00:07:07,586
Well this is typical of the
web pages you visit every day,


157
00:07:07,586 --> 00:07:09,336
like a typical news
site or a blog site.


158
00:07:09,336 --> 00:07:11,916
And one of the things you
may not really pay attention


159
00:07:11,916 --> 00:07:14,376
to is all the marginal content,
all the peripheral content


160
00:07:14,566 --> 00:07:16,676
which you don't really care
about, often it's adds.


161
00:07:16,676 --> 00:07:18,606
But what you may not
realize is how much


162
00:07:18,606 --> 00:07:21,016
of this content is actually
running through plugins.


163
00:07:21,786 --> 00:07:25,286
So without Power Saver these
plugins are running all the time


164
00:07:25,496 --> 00:07:28,996
and that is, of course, causing
the CPU to be busy all the time.


165
00:07:28,996 --> 00:07:30,836
The CPU is always active.


166
00:07:31,216 --> 00:07:32,066
It gets warm.


167
00:07:32,066 --> 00:07:33,036
The fans come on.


168
00:07:33,036 --> 00:07:35,026
And of course that's all
really bad for battery life.


169
00:07:35,566 --> 00:07:39,946
Now that we can pause these
plugins the CPU usage is much


170
00:07:39,946 --> 00:07:45,406
lower and it has a really
positive impact on battery life.


171
00:07:45,996 --> 00:07:47,526
So I said before,
we do this in a way


172
00:07:47,526 --> 00:07:49,026
that most users won't notice.


173
00:07:49,026 --> 00:07:49,786
It's unobtrusive.


174
00:07:49,786 --> 00:07:51,746
So we call it Smart
Power Saving.


175
00:07:52,286 --> 00:07:57,396
And generally the way we do this
is through three techniques.


176
00:07:58,216 --> 00:08:01,086
First of all when you visit
a page in order to see


177
00:08:01,086 --> 00:08:02,596
like an internet
video or something,


178
00:08:02,596 --> 00:08:04,136
some plugin is up
front and center.


179
00:08:04,516 --> 00:08:06,366
We'll just continue to run
that because you probably went


180
00:08:06,366 --> 00:08:07,756
to that page to see
that thing anyway.


181
00:08:08,256 --> 00:08:10,676
So that we call a primary
plugin and we'll just run.


182
00:08:11,956 --> 00:08:15,716
Secondly, plugins are often used
for things like playing audio


183
00:08:15,896 --> 00:08:17,936
and those plugins might
be like really small


184
00:08:17,936 --> 00:08:19,356
or positioned somewhere
else on the page


185
00:08:19,676 --> 00:08:21,286
and we'll just let
those continue to run.


186
00:08:21,996 --> 00:08:26,746
And finally if the user
interacts with a plugin


187
00:08:26,746 --> 00:08:29,306
on the page we'll remember
the fact that they clicked


188
00:08:29,306 --> 00:08:32,696
that plugin on the page and next
time they visit we'll just start


189
00:08:32,696 --> 00:08:33,756
that plugin automatically.


190
00:08:36,046 --> 00:08:38,186
So what's Power Saver
doing under the hood?


191
00:08:38,416 --> 00:08:42,866
Well when a page loads we
let the plugins run but just


192
00:08:42,866 --> 00:08:45,026
for a short time
and we let them run


193
00:08:45,026 --> 00:08:47,476
until they've given us a
useful snatch of their contents


194
00:08:47,616 --> 00:08:49,626
and then we actually
replace the plugin


195
00:08:49,626 --> 00:08:50,906
in the page with that snapshot.


196
00:08:51,416 --> 00:08:56,236
And then if the user clicks
the snapshot we'll go ahead


197
00:08:56,236 --> 00:08:58,796
and recreate the plugin, we'll
pass that click event through


198
00:08:58,796 --> 00:09:00,166
and then the plugin
we'll run as normal.


199
00:09:00,166 --> 00:09:02,346
And in many cases the
user won't even notice.


200
00:09:02,856 --> 00:09:07,556
When we do pause plugins, if the
user happens to hover over one


201
00:09:07,556 --> 00:09:09,916
of those plugins, Safari
will put up this banner


202
00:09:09,916 --> 00:09:12,116
that just indicates that it's
done something to that plugin


203
00:09:12,326 --> 00:09:14,356
but the user can just go ahead
and click anywhere on the plugin


204
00:09:14,446 --> 00:09:15,716
and the plugin will
start running.


205
00:09:18,356 --> 00:09:21,236
So what should you do to make
sure that your pages play nicely


206
00:09:21,236 --> 00:09:22,206
with Safari Power Saver?


207
00:09:22,526 --> 00:09:25,176
Well of course the most obvious
thing is to use fewer plugins.


208
00:09:25,456 --> 00:09:28,346
If you can use one of the
great HTML 5 technologies


209
00:09:28,346 --> 00:09:33,766
like the audio and video
elements or Canvas or Web Audio


210
00:09:33,766 --> 00:09:37,236
or SPG or any of those for
rich media presentations,


211
00:09:37,856 --> 00:09:38,676
those are always going


212
00:09:38,676 --> 00:09:40,346
to be more power
efficient then a plugin


213
00:09:40,416 --> 00:09:41,936
because we've optimized
those really heavily.


214
00:09:42,476 --> 00:09:46,646
We have seen a few cases
where pages that communicate


215
00:09:46,646 --> 00:09:49,216
with a plugin through
script have had problems.


216
00:09:49,586 --> 00:09:53,076
And generally in these cases
the page is not prepared


217
00:09:53,076 --> 00:09:56,436
to handle the fact that there
may be more than one instance


218
00:09:56,436 --> 00:09:58,556
of a plugin for a given
object or embed element


219
00:09:58,556 --> 00:09:59,966
over the lifetime of the page.


220
00:10:00,436 --> 00:10:02,296
So the page needs to
be prepared for plugins


221
00:10:02,296 --> 00:10:03,636
to be destroyed and recreated.


222
00:10:04,016 --> 00:10:05,946
And generally what this means is


223
00:10:05,946 --> 00:10:08,966
that the plugin should
request state for the page


224
00:10:08,966 --> 00:10:11,566
when it starts up, rather
than the page pushing state


225
00:10:11,566 --> 00:10:17,296
down to the plugin and
expecting that to persist.


226
00:10:17,296 --> 00:10:18,466
So that's Safari Power Saver.


227
00:10:19,196 --> 00:10:21,966
And it gives us a really great
energy saving and we hope


228
00:10:21,966 --> 00:10:27,276
that most of users will not
even notice that it's there.


229
00:10:27,696 --> 00:10:29,946
So I talked about these two
new features in Safari 7


230
00:10:29,946 --> 00:10:32,056
that combined give us
really great power savings.


231
00:10:32,276 --> 00:10:33,686
But we also need your help.


232
00:10:34,636 --> 00:10:35,946
We need you to make sure


233
00:10:35,946 --> 00:10:40,106
that your pages are really power
efficient and we need to do this


234
00:10:40,106 --> 00:10:43,546
because we can't just have
Safari do power saving things


235
00:10:43,546 --> 00:10:44,866
that break the way pages work.


236
00:10:45,516 --> 00:10:47,776
So I'll tell you about how


237
00:10:47,776 --> 00:10:49,246
to make power efficient
web pages now.


238
00:10:50,046 --> 00:10:52,506
Firstly we've got a couple
new pieces of web API


239
00:10:53,046 --> 00:10:55,116
which you can use to make
sure your pages save power.


240
00:10:56,436 --> 00:10:58,736
Secondly I'll talk about
the tools you can use


241
00:10:58,736 --> 00:11:00,676
to detect whether your
pages are using more power


242
00:11:00,676 --> 00:11:01,346
than they should.


243
00:11:01,996 --> 00:11:04,436
And finally I'll talk about some
common mistakes we have seen


244
00:11:04,776 --> 00:11:09,096
that really is a pitfall
that some pages fall


245
00:11:09,096 --> 00:11:12,086
into that cause them to
use a lot more power.


246
00:11:13,076 --> 00:11:18,246
So first the new web API, now
there are two of these I'd


247
00:11:18,246 --> 00:11:20,556
like to talk about, the first
is called Page Visibility


248
00:11:20,556 --> 00:11:23,196
and the second is the
requestAnimationFrame API.


249
00:11:23,196 --> 00:11:26,796
So let's talk about
Page Visibility.


250
00:11:26,796 --> 00:11:33,456
This is a W3 specification
that allows a page to detect


251
00:11:33,906 --> 00:11:35,596
when it's hidden
and get notified


252
00:11:35,596 --> 00:11:36,906
when the visibility changes.


253
00:11:37,726 --> 00:11:40,206
Now I've already talked about
hidden pages in the context


254
00:11:40,206 --> 00:11:41,646
of App Nap for Safari Tabs.


255
00:11:42,586 --> 00:11:46,146
The reason we have or the way
you'd use Page Visibility is


256
00:11:46,146 --> 00:11:48,406
to make sure that your
page can take its own steps


257
00:11:48,406 --> 00:11:50,536
to conserve power when
it's in the background.


258
00:11:51,536 --> 00:11:54,286
And by in the background I mean
the same things that I talked


259
00:11:54,286 --> 00:11:56,366
about in the context of
App Nap for Safari Tabs.


260
00:11:56,746 --> 00:11:59,486
Any pages that are minimized
or hidden or occluded.


261
00:12:00,016 --> 00:12:06,156
So there are some things that
the browser does to hidden pages


262
00:12:06,986 --> 00:12:10,296
that are kind of like
App Nap for Safari Tabs.


263
00:12:10,556 --> 00:12:13,686
The browser will also
rate-limit JavaScript timers


264
00:12:13,686 --> 00:12:15,626
and we're not the only
browser that does this.


265
00:12:15,626 --> 00:12:16,796
Other browsers do this too.


266
00:12:17,336 --> 00:12:19,916
But there are some things
that we know are related


267
00:12:19,916 --> 00:12:22,316
to visual updates like
requestAnimationFrame


268
00:12:22,316 --> 00:12:24,016
and CSS Transition Animations.


269
00:12:24,286 --> 00:12:27,076
And we know with hidden pages
none of this work has to happen


270
00:12:27,336 --> 00:12:28,616
so we pause both of these.


271
00:12:29,136 --> 00:12:33,736
So how do you use this API?


272
00:12:34,556 --> 00:12:36,456
Well there are two pieces
to it, there's request


273
00:12:36,456 --> 00:12:38,336
in the current state and
there's getting notified


274
00:12:38,336 --> 00:12:39,346
about state changes.


275
00:12:39,816 --> 00:12:42,576
So to query the current
state there are a couple


276
00:12:42,576 --> 00:12:44,336
of new attributes on
the document object.


277
00:12:44,956 --> 00:12:47,076
There's a simple
Boolean hidden property,


278
00:12:47,796 --> 00:12:49,456
which obviously is
just true or false,


279
00:12:50,036 --> 00:12:52,606
and then there's a property
that returns a string


280
00:12:52,606 --> 00:12:54,206
and this property is
called visibility state.


281
00:12:54,206 --> 00:12:57,436
And it returns the strings
hidden, visible or prerender.


282
00:12:58,776 --> 00:13:00,176
Now hidden and visible
are pretty obvious


283
00:13:00,176 --> 00:13:02,066
but let me explain
prerender for a second.


284
00:13:04,036 --> 00:13:06,436
Now in Safari when you're
typing the location field,


285
00:13:06,816 --> 00:13:10,506
the browser's actually going
to preload the top head,


286
00:13:10,506 --> 00:13:13,376
the most likely thing that
you're going to load so that


287
00:13:13,376 --> 00:13:15,926
when you actually hit the return
key you've already mostly loaded


288
00:13:15,926 --> 00:13:17,536
that page and we can
show it right away


289
00:13:17,536 --> 00:13:18,726
and this feels really fast.


290
00:13:19,496 --> 00:13:21,886
But this means that the browser
is actually loading a page


291
00:13:22,186 --> 00:13:24,146
in a way that's not
currently visible to the user.


292
00:13:24,146 --> 00:13:27,656
And the way we indicate
this to the content is


293
00:13:27,656 --> 00:13:30,156
to have document.visibilityState
return prerender.


294
00:13:31,046 --> 00:13:33,736
And you might want to make
use of this in your pages


295
00:13:33,986 --> 00:13:38,796
to do things like not counting
add impressions in that case.


296
00:13:38,896 --> 00:13:40,966
So the second piece
of this API is a way


297
00:13:40,966 --> 00:13:42,176
to listen for state changes.


298
00:13:42,796 --> 00:13:45,506
And the way you do that is by
adding an event listener just


299
00:13:45,506 --> 00:13:46,656
as you would for user event.


300
00:13:46,996 --> 00:13:48,866
So you add an event
listener on the document.


301
00:13:49,446 --> 00:13:51,086
The events called the
visibility change.


302
00:13:51,766 --> 00:13:54,026
And then in your event
handler you simply check one


303
00:13:54,026 --> 00:13:55,626
of these properties
like document.hidden


304
00:13:55,916 --> 00:13:58,166
to know whether your
page is hidden or not.


305
00:14:00,396 --> 00:14:08,636
So that's page visibility new
in Safari 6.1 and 7 and in iOS7.


306
00:14:08,846 --> 00:14:11,336
So before I talk about
the next new API I want


307
00:14:11,336 --> 00:14:12,336
to give a little
bit of background


308
00:14:12,336 --> 00:14:15,276
on how people do animations
in JavaScript currently.


309
00:14:15,916 --> 00:14:19,066
And pretty much the
only way traditionally


310
00:14:19,066 --> 00:14:21,136
to do this would be to use
one of the timing function,


311
00:14:21,136 --> 00:14:22,516
setTimeout or setInterval.


312
00:14:22,826 --> 00:14:24,286
But let's have a
couple of problems.


313
00:14:25,696 --> 00:14:28,446
The biggest problem is you
really don't know how often


314
00:14:28,446 --> 00:14:31,246
to file those timers in order
to get smooth animation.


315
00:14:31,496 --> 00:14:33,486
You don't really know what
the display frequency is.


316
00:14:33,626 --> 00:14:35,276
You don't know what else
the browser is doing.


317
00:14:35,776 --> 00:14:39,156
And often we see content
that calls set time


318
00:14:39,156 --> 00:14:40,446
out with a 0 time out.


319
00:14:40,446 --> 00:14:42,196
And that's actually really bad.


320
00:14:42,716 --> 00:14:45,276
So under the hood 0 is actually
clamped to 4 milliseconds.


321
00:14:45,656 --> 00:14:48,686
But most of our displays
update at 60 hertz


322
00:14:48,896 --> 00:14:51,186
so that's a 16.7
millisecond interval.


323
00:14:51,876 --> 00:14:54,246
But if you're generating
frames every 4 milliseconds,


324
00:14:54,436 --> 00:14:57,126
it means that 3 out of every
4 frames is just never shown


325
00:14:57,126 --> 00:14:59,466
to the user so that's
a real waste of power.


326
00:15:00,106 --> 00:15:02,696
Now the second problem


327
00:15:03,066 --> 00:15:06,486
with using timers is the
browser can't turn them off,


328
00:15:06,486 --> 00:15:07,466
it can't optimize them away


329
00:15:07,466 --> 00:15:09,306
because it really doesn't
know what you're doing inside


330
00:15:09,306 --> 00:15:10,366
that JavaScript callback.


331
00:15:10,986 --> 00:15:13,496
So requestAnimationFrame
is designed


332
00:15:13,496 --> 00:15:14,776
to solve these two problems.


333
00:15:15,356 --> 00:15:21,006
So it's a Web API for animation
and it consists of two methods


334
00:15:21,006 --> 00:15:23,176
on the window object
requestAnimationFrame


335
00:15:23,466 --> 00:15:26,406
and then there's a function
that you can use just


336
00:15:26,406 --> 00:15:29,976
to cancel an early request.


337
00:15:29,976 --> 00:15:34,376
And its advantages though
of using timers are twofold.


338
00:15:34,376 --> 00:15:38,876
First, the browser handles
the display-refresh problem.


339
00:15:39,016 --> 00:15:41,406
It will call your request
for animation during callback


340
00:15:41,556 --> 00:15:43,926
at just the right time so
you can get work done to show


341
00:15:43,926 --> 00:15:45,206
up at the next display cycle.


342
00:15:45,766 --> 00:15:47,576
And secondly because we know


343
00:15:47,576 --> 00:15:50,896
that requestAnimationFrame
is being used


344
00:15:50,896 --> 00:15:54,556
for visual updates we can
pause it in background tabs.


345
00:15:55,076 --> 00:15:58,666
And requestAnimationFrame
is described


346
00:15:58,666 --> 00:16:04,186
in the W3C Animation
Timing Spec.


347
00:16:04,476 --> 00:16:07,106
So before requestAnimationFrame
you probably had an animation


348
00:16:07,106 --> 00:16:08,546
loop that looked
something like this.


349
00:16:09,166 --> 00:16:10,646
You have a do animation
function.


350
00:16:10,646 --> 00:16:12,966
It probably did some date math
to figure out where it was


351
00:16:12,966 --> 00:16:16,086
in the animation timeline and
then it would update the display


352
00:16:16,466 --> 00:16:18,586
and then call set timeout
to get called again.


353
00:16:18,586 --> 00:16:20,336
And you know the
author here has guessed


354
00:16:20,336 --> 00:16:21,936
that 60 milliseconds
is a good interval.


355
00:16:22,966 --> 00:16:25,266
So requestAnimationFrame
is pretty much a drop


356
00:16:25,266 --> 00:16:26,236
in replacement for that.


357
00:16:26,386 --> 00:16:27,806
But it actually helps
you a bit more.


358
00:16:28,366 --> 00:16:32,116
Your call back gets passed a
time value which is the time


359
00:16:32,116 --> 00:16:34,666
in milliseconds since the page
started to load so instead


360
00:16:34,666 --> 00:16:36,186
of doing date math
you can just use that.


361
00:16:36,816 --> 00:16:38,916
But the other thing to note is


362
00:16:38,916 --> 00:16:41,516
that requestAnimationFrame
is just a one shot call back,


363
00:16:41,666 --> 00:16:42,616
just like setTimeout.


364
00:16:43,056 --> 00:16:44,466
So if you want to get
called for another frame


365
00:16:44,466 --> 00:16:47,376
of animation then you just call
requestAnimationFrame again


366
00:16:47,376 --> 00:16:48,226
inside your callback.


367
00:16:48,796 --> 00:16:52,216
So doing this will enable your
callback called basically just


368
00:16:52,216 --> 00:16:53,526
before every display refreshed


369
00:16:53,526 --> 00:16:55,576
so you can do really smooth
animation in JavaScript.


370
00:16:56,016 --> 00:17:00,896
So requestAnimationFrame
you may be familiar


371
00:17:00,896 --> 00:17:02,536
with as WebKit
requestAnimationFrame


372
00:17:02,536 --> 00:17:05,256
in earlier releases but now
it's just requestAnimationFrame


373
00:17:05,516 --> 00:17:08,965
and it's in Safari
6.1 and 7 and iOS7.


374
00:17:09,205 --> 00:17:12,306
So what should you do with
these new JavaScript API's


375
00:17:12,306 --> 00:17:14,116
to make sure that your
pages use less power?


376
00:17:15,326 --> 00:17:18,096
Well the most important thing is
to use the page visibility API


377
00:17:18,746 --> 00:17:21,146
to stop doing work in pages
that the users can't see.


378
00:17:21,536 --> 00:17:24,236
For example, you
might have a ticker


379
00:17:24,236 --> 00:17:26,455
on the page that's fetching
data from the server


380
00:17:26,455 --> 00:17:28,656
to update stock prices
or something like that


381
00:17:28,716 --> 00:17:30,756
and there's no point in doing
that work in a background tab


382
00:17:31,096 --> 00:17:33,636
so you can just use page
visibility to turn off that.


383
00:17:33,636 --> 00:17:36,036
And that also means that
your server load is reduced


384
00:17:36,036 --> 00:17:37,596
so that's great on both sides.


385
00:17:38,146 --> 00:17:41,166
If you do need to use JavaScript


386
00:17:41,166 --> 00:17:43,366
for animation then you should
use requestAnimationFrame


387
00:17:43,596 --> 00:17:46,016
instead of just doing
setTimeout or setInterval.


388
00:17:48,366 --> 00:17:51,826
One slight wrinkle we've
seen here is you may remember


389
00:17:51,826 --> 00:17:55,046
that I said that CSS Transitions
and Animations are paused


390
00:17:55,426 --> 00:17:58,856
when a tab is either in the
background or for example


391
00:17:58,856 --> 00:18:00,196
when the user switches bases


392
00:18:00,196 --> 00:18:02,536
and the Safari window
ends up being now visible.


393
00:18:03,816 --> 00:18:05,676
And we've seen this trip
up a couple of pages


394
00:18:06,216 --> 00:18:07,966
where the page was
relying on the fact


395
00:18:07,966 --> 00:18:09,646
that it would receive
transition end events


396
00:18:09,646 --> 00:18:13,386
or animation end events in order
to progress its business logic.


397
00:18:14,266 --> 00:18:18,166
So there's a general rule here
for well behaving pages which is


398
00:18:18,166 --> 00:18:21,166
to separate out the business
logic from the visual updates.


399
00:18:21,826 --> 00:18:25,546
So in hidden pages you can let
the business logic continue


400
00:18:25,976 --> 00:18:27,486
but will be able to save power


401
00:18:27,486 --> 00:18:28,846
by not running those
visual updates.


402
00:18:28,846 --> 00:18:34,196
So at this point I'd like to
invite my colleague Tim Horton


403
00:18:34,196 --> 00:18:38,696
onto the stage to show we can
take a power inefficient page


404
00:18:38,986 --> 00:18:40,456
and fix it using
page visibility.


405
00:18:40,456 --> 00:18:41,036
[Applause]


406
00:18:41,036 --> 00:18:44,776
>> Tim Horton: So
I'm Tim Horton.


407
00:18:44,906 --> 00:18:47,626
I also work on Safari
WebKit with Simon.


408
00:18:47,716 --> 00:18:51,236
And so if any of you
guys were in What's New


409
00:18:51,236 --> 00:18:53,986
in WebKit yesterday you met
Enrika [phonetic] and you know


410
00:18:53,986 --> 00:18:58,176
that she really likes to cook.


411
00:18:58,376 --> 00:19:03,336
[laughter] So what you
don't know, or may not know,


412
00:19:03,336 --> 00:19:06,336
is that she also has a giant
pizza oven in her backyard


413
00:19:06,666 --> 00:19:09,896
and it takes a while for
this oven to heat up.


414
00:19:10,376 --> 00:19:12,316
So she's installed a
thermometer into it,


415
00:19:13,696 --> 00:19:15,736
an internet connected
thermometer into it,


416
00:19:15,976 --> 00:19:21,656
and we've written a web app so
she can, from inside her house,


417
00:19:21,656 --> 00:19:23,236
monitor the temperature.


418
00:19:23,476 --> 00:19:25,486
So I'm going to show
that to you now.


419
00:19:25,716 --> 00:19:26,416
So here it is.


420
00:19:26,416 --> 00:19:28,216
You can see the pizza
oven is heating up.


421
00:19:29,376 --> 00:19:31,326
This is a graph of
temperature over time.


422
00:19:31,376 --> 00:19:34,316
This is temperature on a 500
millisecond JavaScript timer.


423
00:19:35,116 --> 00:19:38,056
The green ticks at the top
display every time we fetch the


424
00:19:38,056 --> 00:19:39,336
temperature from
the thermometer.


425
00:19:40,066 --> 00:19:41,966
So let's look at the
source code for a second.


426
00:19:42,876 --> 00:19:45,606
It's just using setInterval,
very basic.


427
00:19:45,606 --> 00:19:47,516
Just straight forward JavaScript
timing, nothing fancy.


428
00:19:48,816 --> 00:19:54,806
So let's see what happens
right now when we switch tabs.


429
00:19:54,936 --> 00:19:57,626
So right now in the
background the other tab,


430
00:19:57,706 --> 00:19:59,866
the timers are rate
limited, as Simon mentioned,


431
00:20:00,496 --> 00:20:03,286
but we're still doing
updates occasionally


432
00:20:03,286 --> 00:20:06,236
and you can see the green
ticks coming at a lower rate


433
00:20:06,956 --> 00:20:09,876
but we're still getting data.


434
00:20:10,056 --> 00:20:13,286
So we're still not being a
great power citizen here, right,


435
00:20:13,286 --> 00:20:15,036
we're still doing
updates in the background.


436
00:20:15,596 --> 00:20:17,196
And we can do better.


437
00:20:17,196 --> 00:20:19,466
We can use 0 power
in the background


438
00:20:19,936 --> 00:20:22,856
by adopting the page visibility
guide that was just mentioned.


439
00:20:24,266 --> 00:20:27,976
So let's replace this
function, this setup function


440
00:20:27,976 --> 00:20:31,976
that just starts the
timer explicitly with one


441
00:20:32,016 --> 00:20:36,096
that instead respects
page visibility.


442
00:20:36,286 --> 00:20:37,826
We listen to the page
visibility page event


443
00:20:37,826 --> 00:20:39,796
and when it changes we
start and stop our timer,


444
00:20:40,156 --> 00:20:41,426
very simple, not much code.


445
00:20:42,406 --> 00:20:45,326
Let's refresh and now
let's do a spaces swipe.


446
00:20:45,996 --> 00:20:48,256
My friends just got back
from Bali so I was checking


447
00:20:48,256 --> 00:20:49,986
out the Island to see
where they had been.


448
00:20:50,746 --> 00:20:52,846
Now let's swipe back.


449
00:20:52,896 --> 00:20:56,026
And you can see here while
the page was hidden we did no


450
00:20:56,026 --> 00:20:58,636
updates at all, no green ticks.


451
00:20:59,056 --> 00:21:02,136
You'll also notice while it
was hidden the graph kind


452
00:21:02,136 --> 00:21:03,016
of looks broken.


453
00:21:03,186 --> 00:21:05,716
That's a big oopsy on our part.


454
00:21:05,766 --> 00:21:09,016
So maybe we should fix this.


455
00:21:09,566 --> 00:21:12,866
So luckily the thermometer that
Enrika chose stores five minutes


456
00:21:12,866 --> 00:21:16,556
of data back in time so we can
ask for all of the temperatures


457
00:21:16,556 --> 00:21:20,526
since the last time we updated,
when we come back from hiddency.


458
00:21:21,486 --> 00:21:23,096
So let's just make
that simple change just


459
00:21:23,096 --> 00:21:28,836
to make our graph look more
correct, and this is just, yeah.


460
00:21:30,586 --> 00:21:33,556
And now let's see
what it looks like.


461
00:21:33,556 --> 00:21:36,566
So now in the background
we're doing no work at all


462
00:21:37,866 --> 00:21:40,706
but when we come
back we've filled


463
00:21:40,706 --> 00:21:41,886
in the graph and
it looks perfect.


464
00:21:42,156 --> 00:21:44,666
Now just pretend you remove
the grey and the green


465
00:21:44,666 --> 00:21:45,796
and you just got the graph.


466
00:21:45,796 --> 00:21:46,596
It looks perfect.


467
00:21:47,286 --> 00:21:49,976
And the background
uses no power.


468
00:21:49,976 --> 00:21:51,866
So now you've seen a
simple example of how


469
00:21:51,866 --> 00:21:55,466
to use the page API to
make a very effective power


470
00:21:55,466 --> 00:21:56,666
and bandwidth efficient website.


471
00:21:57,856 --> 00:21:58,606
Back to you, Simon.


472
00:21:59,061 --> 00:22:01,061
[Applause]


473
00:22:01,106 --> 00:22:01,546
>> Simon Fraser: Thank you, Tim.


474
00:22:02,066 --> 00:22:06,626
So I talked about the new
web API available to you


475
00:22:06,726 --> 00:22:09,596
so that your pages can use
less power in the background.


476
00:22:10,386 --> 00:22:12,286
Now let me talk about
how to figure


477
00:22:12,286 --> 00:22:14,276
out if your pages are
using too much power.


478
00:22:14,846 --> 00:22:18,876
And there are two
levels of tools here


479
00:22:18,876 --> 00:22:20,576
that I want to talk about.


480
00:22:20,576 --> 00:22:21,986
There are tools provided
by the system


481
00:22:22,486 --> 00:22:23,896
and then there's
some tools in Safari.


482
00:22:24,436 --> 00:22:27,426
So first briefly I'll talk
about the system tools.


483
00:22:28,366 --> 00:22:31,776
OS X Mavericks now has an
energy tab and activity monitor.


484
00:22:32,416 --> 00:22:34,626
And so this is the kind of thing
that users would go to to find


485
00:22:34,626 --> 00:22:37,886
out which applications have
recently been using a lot


486
00:22:37,886 --> 00:22:38,416
of energy.


487
00:22:39,366 --> 00:22:42,796
So it's actually really bad for
Safari to shop in this list.


488
00:22:43,516 --> 00:22:46,076
You don't want your site to
be the site that causes Safari


489
00:22:46,076 --> 00:22:48,976
to be using all the power here.


490
00:22:49,006 --> 00:22:52,016
Similarly in the battery menu we
have a listing of applications


491
00:22:52,016 --> 00:22:53,916
that have been using power
and again it's really bad


492
00:22:53,916 --> 00:22:56,366
if Safari is here so make sure
your pages don't cause that.


493
00:22:56,876 --> 00:22:59,976
Of course as web developers
you're probably more interested


494
00:22:59,976 --> 00:23:02,256
in the tools that are
closer to your web content.


495
00:23:02,906 --> 00:23:04,896
There were a couple of
great sessions yesterday


496
00:23:05,196 --> 00:23:07,726
on Safari Web Inspector and I
encourage you if you didn't go


497
00:23:07,726 --> 00:23:09,636
to those to go back
and watch the videos.


498
00:23:10,726 --> 00:23:12,486
So briefly, to use
the web inspector


499
00:23:12,486 --> 00:23:16,686
for investigating power issues
you would enable the develop


500
00:23:16,686 --> 00:23:18,176
menu and then access
the web inspector


501
00:23:18,176 --> 00:23:19,426
through Safari's develop menu.


502
00:23:19,736 --> 00:23:22,506
And then the tab that's
most interesting in terms


503
00:23:22,506 --> 00:23:24,666
of power usage is
the timelines tab.


504
00:23:25,386 --> 00:23:26,706
So you can switch to that tab


505
00:23:27,266 --> 00:23:30,466
and then you would start
recording a timeline


506
00:23:30,466 --> 00:23:31,326
by pressing the button.


507
00:23:31,816 --> 00:23:33,676
And then interact with
your page in a way


508
00:23:33,676 --> 00:23:35,646
that you think is interesting,
maybe you can scroll the page


509
00:23:35,646 --> 00:23:37,576
or reload it and see what
happens at loading time


510
00:23:37,956 --> 00:23:39,526
or interact within other ways.


511
00:23:40,066 --> 00:23:43,106
So what this timeline panel
shows you is all the activity


512
00:23:43,106 --> 00:23:45,766
that the page has been doing,
loading resources, the layout


513
00:23:45,766 --> 00:23:47,756
and rendering work that
the engine is doing,


514
00:23:47,906 --> 00:23:51,976
all the JavaScript is running,
the events that are firing.


515
00:23:52,136 --> 00:23:54,066
Now you may think that
the amount of power used


516
00:23:54,066 --> 00:23:56,386
by the page is going to
be roughly proportional


517
00:23:56,386 --> 00:23:57,816
to the amount of
JavaScript that's running


518
00:23:58,436 --> 00:24:00,976
but that's actually
not usually the case.


519
00:24:01,696 --> 00:24:05,206
Usually the most common
cause of badly behaving pages


520
00:24:05,206 --> 00:24:08,046
that we see are interactions
between the JavaScript


521
00:24:08,046 --> 00:24:11,236
and layout and rendering so
I'll talk about some of those


522
00:24:11,526 --> 00:24:13,396
in the context of common
mistakes we've seen


523
00:24:13,396 --> 00:24:14,326
that web pages make.


524
00:24:14,756 --> 00:24:19,026
And there are two basic areas
here I'd like to talk about.


525
00:24:19,476 --> 00:24:22,156
First of all pages that cause
too much layout to happen


526
00:24:22,556 --> 00:24:24,856
and secondly pages that
just paint too much.


527
00:24:26,856 --> 00:24:28,016
So what is layout?


528
00:24:28,016 --> 00:24:29,086
Well layout is the process


529
00:24:29,086 --> 00:24:31,956
by which the browser takes
the [inaudible], applies style


530
00:24:31,956 --> 00:24:35,246
from the CSS and then computes
the positions and the sizes


531
00:24:35,506 --> 00:24:37,556
of all the boxes and lays
them out on the page.


532
00:24:37,556 --> 00:24:39,516
And that's quite an
expensive process.


533
00:24:39,996 --> 00:24:41,306
And we've optimized this a lot.


534
00:24:41,306 --> 00:24:44,526
And we've also optimized
when the browser does layout.


535
00:24:45,076 --> 00:24:47,116
We want to layout as
infrequently as possible


536
00:24:47,526 --> 00:24:49,496
so that you know we're
not doing excess work


537
00:24:49,846 --> 00:24:51,936
and generally we can layout
just before we paint stuff


538
00:24:51,936 --> 00:24:52,676
on the page.


539
00:24:53,406 --> 00:24:55,706
But there is a problem
here and that's


540
00:24:55,886 --> 00:24:57,856
that there are various
properties and functions exposed


541
00:24:57,856 --> 00:25:00,476
to JavaScript that force
us to eagerly do layout.


542
00:25:01,156 --> 00:25:02,676
And there's quite
a few of these.


543
00:25:02,946 --> 00:25:03,806
But there's a general theme


544
00:25:03,806 --> 00:25:05,566
which is they're all
geometry related.


545
00:25:05,976 --> 00:25:08,906
They're all properties that
are getting things like sizes,


546
00:25:09,446 --> 00:25:11,716
widths and heights and positions


547
00:25:11,716 --> 00:25:14,836
and scroll information
and stuff like that.


548
00:25:15,656 --> 00:25:18,246
But when JavaScript accesses
any of these properties


549
00:25:18,246 --> 00:25:20,966
or calls these functions,
the browser has to,


550
00:25:21,316 --> 00:25:24,386
if layout is currently what
we call stale, the browser has


551
00:25:24,386 --> 00:25:25,416
to go ahead and do a layout


552
00:25:25,416 --> 00:25:27,326
so it can give you the
correct answer to the question


553
00:25:27,326 --> 00:25:29,676
that you're asking and
that can be expensive.


554
00:25:29,746 --> 00:25:34,486
Now when pages do this
we tend to see a patent


555
00:25:34,486 --> 00:25:35,736
like this in the inspector.


556
00:25:36,316 --> 00:25:40,546
There'll be a repeated cycle of
invalidate styles, recalc style,


557
00:25:40,546 --> 00:25:41,986
invalidate layout and layout.


558
00:25:43,116 --> 00:25:44,596
And generally the
kind of JavaScript


559
00:25:44,596 --> 00:25:48,186
that causes this problem is
some JavaScript that has a loop


560
00:25:48,186 --> 00:25:49,266
and this is very common.


561
00:25:49,556 --> 00:25:51,586
And the loop does
two things generally.


562
00:25:52,096 --> 00:25:54,666
There'll be a call to one of
these geometry related functions


563
00:25:54,666 --> 00:25:57,566
like offsetHeight and that's the
point at which the browser has


564
00:25:57,566 --> 00:25:58,866
to make sure the
layouts up to date.


565
00:25:59,326 --> 00:26:01,456
Now the first line through
the loop you're probably fine.


566
00:26:02,166 --> 00:26:05,356
But then later on in the loop
it's common for the JavaScript


567
00:26:05,356 --> 00:26:07,776
to invalidate style
by changing something


568
00:26:07,776 --> 00:26:11,246
like you know
food.style.something=whatever.


569
00:26:11,576 --> 00:26:13,586
So that invalidation
means that next time


570
00:26:13,586 --> 00:26:17,026
through the loop the
offsetHeight is going to have


571
00:26:17,066 --> 00:26:19,176
to recompute all the
layout information


572
00:26:19,356 --> 00:26:20,586
and that's what gets expensive.


573
00:26:21,676 --> 00:26:22,606
So this is not good.


574
00:26:23,176 --> 00:26:26,516
Now generally the way you fix
this is to break this work


575
00:26:26,696 --> 00:26:27,826
into two separate loops.


576
00:26:28,046 --> 00:26:30,176
First you should fetch all
the geometry information


577
00:26:30,466 --> 00:26:33,306
and then you can batch all of
the style changing later on


578
00:26:33,576 --> 00:26:36,266
and that setup should
just result in one layout,


579
00:26:36,266 --> 00:26:37,516
which will be much
more efficient.


580
00:26:38,086 --> 00:26:43,296
Now the second issue we
see fairly often is pages


581
00:26:43,296 --> 00:26:46,986
that paint too much and there's
one very common cause of this


582
00:26:47,316 --> 00:26:49,526
which is people leaving
animated images


583
00:26:49,526 --> 00:26:50,536
in their background style.


584
00:26:51,536 --> 00:26:53,456
It's quite common for pages
to have an animated image


585
00:26:53,456 --> 00:26:56,066
in the background style and
then load stuff on top of it


586
00:26:56,326 --> 00:26:58,676
and they assume because the
animated image is covered


587
00:26:58,676 --> 00:27:00,856
up the browser is going to
be able to stop painting it.


588
00:27:01,456 --> 00:27:02,866
Well in many cases we can.


589
00:27:02,866 --> 00:27:05,106
We've done a lot of
ultimizations to detect


590
00:27:05,406 --> 00:27:06,996
when animated images are covered


591
00:27:06,996 --> 00:27:08,166
up so we don't have
to animate them.


592
00:27:08,166 --> 00:27:10,176
But we can't detect
all the cases.


593
00:27:10,636 --> 00:27:13,926
So the best advice I have
for you is to make sure


594
00:27:13,926 --> 00:27:15,576
that you don't leave
these animating images


595
00:27:15,576 --> 00:27:18,316
in your style once you
finish loading a content.


596
00:27:18,606 --> 00:27:20,316
This is especially true on pages


597
00:27:20,316 --> 00:27:21,826
that have the infinite
scrolling model.


598
00:27:22,176 --> 00:27:24,096
We see pages where there's
an animated spin and right


599
00:27:24,096 --> 00:27:25,786
at the bottom it's
normally off the screen


600
00:27:26,346 --> 00:27:29,686
and even this can cause
painting to happen for reasons


601
00:27:29,686 --> 00:27:30,956
that I'll mention later on.


602
00:27:31,986 --> 00:27:34,266
But of course the
real way to tell


603
00:27:34,266 --> 00:27:36,636
if you're painting too much is
to look in the web inspector.


604
00:27:37,216 --> 00:27:40,696
And if you see in the layout
and rendering timeline a lot


605
00:27:40,696 --> 00:27:43,566
of painting like this, it
means you've probably got one


606
00:27:43,566 --> 00:27:45,706
of those animated images sitting
on your page so you need to go


607
00:27:45,706 --> 00:27:47,306
and find it and remove it.


608
00:27:47,966 --> 00:27:52,726
So I've talked about a
couple of common mistakes


609
00:27:53,096 --> 00:27:55,396
but there's a more
general theme here which is


610
00:27:55,566 --> 00:27:56,986
to use the right
tool for the job.


611
00:27:58,286 --> 00:28:01,126
If you're doing animation,
CSS transitions


612
00:28:01,126 --> 00:28:02,196
and animations are always going


613
00:28:02,196 --> 00:28:03,766
to be more efficient
then running animations


614
00:28:03,766 --> 00:28:04,496
in JavaScript.


615
00:28:05,116 --> 00:28:09,176
And if you need to do
animations in JavaScript,


616
00:28:09,176 --> 00:28:11,386
requestAnimationFrame is
much better than using timers


617
00:28:11,606 --> 00:28:12,566
because we can pause it


618
00:28:12,566 --> 00:28:14,846
and it gets the right
display update frequency.


619
00:28:15,306 --> 00:28:16,696
There are many other cases


620
00:28:16,696 --> 00:28:18,486
where you might be running
JavaScript right now


621
00:28:18,896 --> 00:28:21,036
but you could be using something
that's built into the browser.


622
00:28:21,796 --> 00:28:24,276
If you're doing responsive
layouts that change depending


623
00:28:24,276 --> 00:28:25,636
on window size, for example,


624
00:28:26,116 --> 00:28:29,136
you should be using CSS
Media Queries instead


625
00:28:29,136 --> 00:28:30,066
of running JavaScript.


626
00:28:30,536 --> 00:28:33,246
And there are a number of new
layout models in WebKit now


627
00:28:33,956 --> 00:28:35,836
which Beth talked about
yesterday in the session


628
00:28:35,836 --> 00:28:37,116
on What's New in
Safari and WebKit.


629
00:28:37,116 --> 00:28:39,106
For example, CSS Flexible Boxes.


630
00:28:39,106 --> 00:28:43,156
So you can use these to get
interesting layouts that change


631
00:28:43,156 --> 00:28:45,576
as the page changes size
rather than running JavaScript.


632
00:28:45,996 --> 00:28:48,826
And there's a bunch of other
features like this too.


633
00:28:48,976 --> 00:28:51,156
Beth yesterday also
talked about CSS calc.


634
00:28:51,416 --> 00:28:53,466
So this is another great
way where you can ditch


635
00:28:53,466 --> 00:28:56,066
in JavaScript, use a feature
that's built into the browser


636
00:28:56,396 --> 00:28:59,326
and automatically get better
power efficiency that way.


637
00:28:59,886 --> 00:29:08,076
So I would like to take a moment
to talk about Safari Extensions.


638
00:29:08,856 --> 00:29:12,086
If you are a Safari Extension
Developer it's extremely


639
00:29:12,086 --> 00:29:15,596
important that your
scripts don't fall into any


640
00:29:15,596 --> 00:29:18,106
of these common pitfalls and
you make sure your scripts


641
00:29:18,106 --> 00:29:19,016
are super-efficient.


642
00:29:19,486 --> 00:29:22,326
And this is because your
extension can inject scripts


643
00:29:22,326 --> 00:29:24,016
into every page the user visits.


644
00:29:24,516 --> 00:29:28,386
There's something else that's
important for extensions


645
00:29:28,866 --> 00:29:32,336
which is that extensions use the
page visibility API to make sure


646
00:29:32,336 --> 00:29:35,146
that they're only doing work in
pages that the users can see.


647
00:29:36,616 --> 00:29:38,136
There's also another reason


648
00:29:38,136 --> 00:29:40,346
that extensions should
use page visibility.


649
00:29:40,976 --> 00:29:43,246
You remember I talked about
the prerender state earlier


650
00:29:43,566 --> 00:29:46,716
and how that's involved in the
browser preloading the top head?


651
00:29:47,236 --> 00:29:49,926
Extensions need to be very
careful to not show UI


652
00:29:50,166 --> 00:29:52,916
to the user for pages
that the user can't see.


653
00:29:53,246 --> 00:29:56,736
So extensions need to check
document.hidden and only show UI


654
00:29:57,306 --> 00:30:03,896
if the page is actually visible.


655
00:30:03,896 --> 00:30:08,806
So I talked about two new
power saving features in Safari


656
00:30:08,806 --> 00:30:11,076
and I've talked about how you
can make power efficient web


657
00:30:11,076 --> 00:30:12,256
content and how to detect


658
00:30:12,256 --> 00:30:16,606
where your content is less power
efficient then it should be.


659
00:30:17,546 --> 00:30:19,096
But you might think
with all this talk


660
00:30:19,096 --> 00:30:20,766
about saving power
they're actually going


661
00:30:20,766 --> 00:30:22,356
to have worse performance,
maybe we need


662
00:30:22,356 --> 00:30:24,896
to you know sit power
more carefully


663
00:30:24,896 --> 00:30:26,006
and we won't be as good.


664
00:30:26,006 --> 00:30:29,256
But in many ways,
or in some cases,


665
00:30:29,426 --> 00:30:31,106
you can actually get
better performance


666
00:30:31,796 --> 00:30:33,406
by using a different algorithm


667
00:30:33,406 --> 00:30:35,086
or actually using
a new architecture


668
00:30:35,086 --> 00:30:38,346
that makes better use of the
hardware and we've done this


669
00:30:38,346 --> 00:30:41,366
with responsive scrolling
in Safari so I'd


670
00:30:41,366 --> 00:30:42,466
like to talk about that now.


671
00:30:43,636 --> 00:30:44,716
Now people love to scroll.


672
00:30:44,716 --> 00:30:46,026
Now we all have iOS devices


673
00:30:46,026 --> 00:30:47,376
where the scrolling
is buttery smooth


674
00:30:47,876 --> 00:30:50,926
and now we have track pads on
our desks and on our notebooks.


675
00:30:52,176 --> 00:30:54,366
You feel that really direct
connection with the web content


676
00:30:54,366 --> 00:30:56,486
and you want the web content
to be really responsive


677
00:30:56,486 --> 00:30:57,516
and scroll right away.


678
00:30:57,646 --> 00:31:00,226
So it was very important for us


679
00:31:00,496 --> 00:31:02,766
that Safari had extremely
responsive scrolling.


680
00:31:03,376 --> 00:31:06,336
But to explain how this works
I need to step back a moment


681
00:31:06,496 --> 00:31:08,566
and explain how scrolling
worked in the old days.


682
00:31:09,066 --> 00:31:13,586
So it used to be that when
you scrolled the browser would


683
00:31:13,586 --> 00:31:15,496
simply copy a chunk of
bits up in the window


684
00:31:15,716 --> 00:31:18,336
and then it would paint the
exposed strip at the bottom.


685
00:31:18,876 --> 00:31:21,706
So every scroll would be
copy paint, copy paint


686
00:31:21,706 --> 00:31:23,506
and that all happened
synchronously


687
00:31:23,506 --> 00:31:24,316
on the main thread.


688
00:31:24,846 --> 00:31:27,826
But that also meant that if
the web page was busy doing


689
00:31:27,826 --> 00:31:29,716
something like loading
or running JavaScript,


690
00:31:30,026 --> 00:31:32,416
it means the web page
could block scrolling


691
00:31:32,416 --> 00:31:35,446
and that would give a less
than great user experience.


692
00:31:36,696 --> 00:31:38,996
So we knew we had to
get to a model in Safari


693
00:31:39,276 --> 00:31:41,166
where we could scroll
without doing painting.


694
00:31:42,356 --> 00:31:44,496
So I'll explain how
that works now.


695
00:31:45,276 --> 00:31:46,726
Instead of painting the page


696
00:31:46,726 --> 00:31:48,936
into the window we
actually paint the page


697
00:31:48,936 --> 00:31:50,306
into a series of tiles.


698
00:31:50,656 --> 00:31:53,166
And these tiles are actually
core animation layers


699
00:31:53,166 --> 00:31:53,776
under the hood.


700
00:31:55,136 --> 00:31:58,246
But it now means that we can
do scrolling not by painting


701
00:31:58,496 --> 00:32:00,696
but simply by moving
those tiles around.


702
00:32:00,696 --> 00:32:03,276
So the implementation is
actually just setting the


703
00:32:03,276 --> 00:32:05,266
position of the layer
that contains the tiles


704
00:32:05,486 --> 00:32:09,076
and that means scrolling is
just changing a layer position.


705
00:32:10,096 --> 00:32:13,366
And that also means that
we're leveraging the GPU


706
00:32:13,366 --> 00:32:15,596
because the window server is
compositing this layer tree


707
00:32:15,596 --> 00:32:16,936
and that makes great
use of the hardware


708
00:32:16,936 --> 00:32:17,986
so this is really efficient.


709
00:32:18,516 --> 00:32:23,896
It does mean that we have to
keep some extra tiles around so


710
00:32:23,896 --> 00:32:25,636
that we always have content
that is ready to scroll


711
00:32:25,636 --> 00:32:28,316
into the window and that
ties back to that problem


712
00:32:28,316 --> 00:32:29,986
with animated images
I talked about before


713
00:32:29,986 --> 00:32:32,876
where an image might be off the
page but still causing painting


714
00:32:32,876 --> 00:32:34,546
and that's because it might
be on one of these tiles


715
00:32:34,836 --> 00:32:37,376
that we're keeping up to date
so we can scroll within anytime.


716
00:32:37,656 --> 00:32:41,356
So that explains how we
can scroll without painting


717
00:32:42,066 --> 00:32:43,376
but how do we scroll
in such a way


718
00:32:43,376 --> 00:32:45,126
that the web page
can't interfere,


719
00:32:45,126 --> 00:32:46,356
that can't block the scrolling?


720
00:32:47,186 --> 00:32:50,206
And to explain that, let me
get a bit nerdy for a minute


721
00:32:50,676 --> 00:32:53,376
and explain our Threading
model in Safari.


722
00:32:53,836 --> 00:32:56,536
So of course there are two
processes involved that I talked


723
00:32:56,536 --> 00:32:57,986
about the web content
process earlier.


724
00:32:58,576 --> 00:33:01,626
But the user events initially
go to this Safari application.


725
00:33:01,976 --> 00:33:03,786
But Safari then sends
those events directly


726
00:33:03,786 --> 00:33:06,636
to the web content process
and they're received


727
00:33:06,636 --> 00:33:08,066
in the web content
process by a thread


728
00:33:08,066 --> 00:33:10,706
that we call the event
thread that is always ready


729
00:33:10,706 --> 00:33:11,736
to receive those events.


730
00:33:11,736 --> 00:33:13,156
It's never blocked
by anything else.


731
00:33:13,686 --> 00:33:16,776
And then the event thread
simply bounces those events


732
00:33:16,776 --> 00:33:18,066
to what we call the
scrolling thread


733
00:33:18,066 --> 00:33:20,416
and the scrolling thread is the
one that's changing the layer


734
00:33:20,416 --> 00:33:21,746
position there.


735
00:33:23,096 --> 00:33:24,556
And all this can happen even


736
00:33:24,556 --> 00:33:26,646
if the main thread is busy
doing layout and painting.


737
00:33:26,976 --> 00:33:28,846
So this means that we
can do scrolling even


738
00:33:28,846 --> 00:33:31,656
when layouts happening or the
page is busy doing other stuff.


739
00:33:31,846 --> 00:33:34,026
So this is what gives us our
really responsive scrolling.


740
00:33:34,536 --> 00:33:39,686
Now this is all fine when the
page is simply you know block


741
00:33:39,686 --> 00:33:42,816
of pixels that moves up and down
but there are various features


742
00:33:42,816 --> 00:33:44,786
in CSS that makes scrolling
a little more complicated


743
00:33:44,786 --> 00:33:45,166
than that.


744
00:33:45,586 --> 00:33:47,976
So let me just quickly
explain some of those.


745
00:33:48,556 --> 00:33:50,506
The first one is fixed position,


746
00:33:50,506 --> 00:33:52,656
which I'm sure you're all
familiar with as web developers,


747
00:33:52,936 --> 00:33:54,106
the position fix property.


748
00:33:54,416 --> 00:33:57,396
And of course it's very
common, for example,


749
00:33:57,396 --> 00:34:01,686
his social link aside,
that the author has styled


750
00:34:01,686 --> 00:34:05,556
with position fixed and when
the page scrolls of course


751
00:34:05,556 --> 00:34:07,656
that social link stays
in the same place.


752
00:34:07,856 --> 00:34:09,485
Standard position
fixed behavior.


753
00:34:10,005 --> 00:34:12,666
But the browser has to
understand this now and be able


754
00:34:12,666 --> 00:34:15,065
to analyze the page and break
the page up into a series


755
00:34:15,065 --> 00:34:17,306
of layers so it knows how
to move all those layers


756
00:34:17,306 --> 00:34:20,436
around when you scroll and
keep the right behavior.


757
00:34:22,966 --> 00:34:26,356
There's a second sort of special
scrolling behavior in CSS


758
00:34:26,356 --> 00:34:28,585
and that's fixed backgrounds,


759
00:34:29,275 --> 00:34:32,565
backgrounds that have the
background attachment fixed


760
00:34:32,565 --> 00:34:36,545
style in them and these
are also quite common.


761
00:34:36,926 --> 00:34:39,596
For example the author of this
page may have put a background


762
00:34:39,596 --> 00:34:42,936
image on the page by starting
the body in this case.


763
00:34:43,246 --> 00:34:46,426
And then they said they wanted
background detachment fixed.


764
00:34:46,596 --> 00:34:48,896
And that means that when the
page scrolls the background


765
00:34:48,896 --> 00:34:50,976
image actually stays in the
same place in the view port


766
00:34:51,246 --> 00:34:53,946
so it's sort of the background
equivalent of position fixed


767
00:34:54,255 --> 00:34:57,666
so it looks like this.


768
00:34:57,836 --> 00:35:00,606
But again, this is a scrolling
behavior the browser now


769
00:35:00,606 --> 00:35:04,396
understands and we do
that by breaking the page


770
00:35:04,396 --> 00:35:05,546
into a series of layers.


771
00:35:05,836 --> 00:35:07,746
And then we know how
to move those layers


772
00:35:07,746 --> 00:35:09,736
around at the right time
when the user scrolls.


773
00:35:10,176 --> 00:35:12,166
So it's this functionality
that allows us


774
00:35:12,166 --> 00:35:13,516
to get really responsive
scrolling


775
00:35:13,516 --> 00:35:15,216
on many more pages in Safari 7.


776
00:35:15,216 --> 00:35:21,026
Now I need to say a little bit
more about fixed backgrounds.


777
00:35:21,906 --> 00:35:23,306
When we looked at pages


778
00:35:23,306 --> 00:35:25,246
that were using fixed
backgrounds we found


779
00:35:25,246 --> 00:35:27,856
that by far the most
common case was for pages


780
00:35:27,856 --> 00:35:28,996
to use fixed backgrounds


781
00:35:29,066 --> 00:35:33,406
to style the page
background, normally the body.


782
00:35:33,636 --> 00:35:35,396
So that's the case
that we optimized for.


783
00:35:35,946 --> 00:35:39,286
And you can style the
page background either


784
00:35:39,286 --> 00:35:42,626
by putting the fixed background
style on the HTML element


785
00:35:42,626 --> 00:35:45,826
or the body element in your
CSS but you really want


786
00:35:45,826 --> 00:35:47,246
to do both and not one of those.


787
00:35:48,036 --> 00:35:50,676
But actually CSS 2.1 has
something to say here.


788
00:35:51,536 --> 00:35:54,626
If we go and read CSS 2.1
in detail it does recommend


789
00:35:54,626 --> 00:35:58,176
that you style the page
background by putting that style


790
00:35:58,176 --> 00:36:05,286
on the body not on the HTML so
we recommend that you do that.


791
00:36:05,456 --> 00:36:07,306
Now there's something else
when we're looking at scrolling


792
00:36:07,306 --> 00:36:10,536
that we saw that was really
common and that is pages


793
00:36:10,536 --> 00:36:14,686
that use scroll events to do
stuff, to move things around,


794
00:36:15,156 --> 00:36:16,676
when to use the scrolling
the page.


795
00:36:17,626 --> 00:36:19,266
But there's a problem
with scroll events


796
00:36:19,316 --> 00:36:20,466
in that they're asynchronous.


797
00:36:21,586 --> 00:36:23,346
Many browsers have
discovered that if you try


798
00:36:23,346 --> 00:36:25,666
to run JavaScript at the same
time the user is scrolling,


799
00:36:25,906 --> 00:36:28,826
that really impacts the users
experience in scrolling,


800
00:36:28,826 --> 00:36:31,816
it really can make
scrolling less than stellar.


801
00:36:32,446 --> 00:36:35,396
So a lot of browsers now send
scroll events asynchronously


802
00:36:35,396 --> 00:36:36,146
to the page.


803
00:36:36,636 --> 00:36:40,696
But there's one behavior that
we saw that was really common


804
00:36:40,696 --> 00:36:43,626
where people were still
using these scroll events


805
00:36:43,626 --> 00:36:45,326
which have this asynchronous
problem


806
00:36:45,406 --> 00:36:47,736
to get what we call
sticky behavior


807
00:36:48,736 --> 00:36:50,306
and I'll explain what that is.


808
00:36:50,806 --> 00:36:51,886
Here are a couple of examples.


809
00:36:51,886 --> 00:36:53,606
This is the Apple Store.


810
00:36:53,706 --> 00:36:55,996
And if you watch that box
on the right hand side,


811
00:36:56,716 --> 00:37:01,616
when the page scrolls that box
moves with the page for a bit


812
00:37:01,616 --> 00:37:03,046
and then it sticks
to the top edge.


813
00:37:03,286 --> 00:37:05,686
And as the page scrolls
back down it drops back


814
00:37:05,686 --> 00:37:06,756
into its old location.


815
00:37:07,626 --> 00:37:09,176
Here's another example
from Yelp.


816
00:37:09,816 --> 00:37:12,786
If you take a look at the map on
the right hand side you'll see


817
00:37:12,786 --> 00:37:15,356
that when the page scrolls
the map moves up with the page


818
00:37:15,906 --> 00:37:17,526
but it sticks to the top.


819
00:37:17,686 --> 00:37:19,996
And at a certain point the
content underneath the map is


820
00:37:19,996 --> 00:37:21,376
pushing it up back
to the viewport.


821
00:37:22,096 --> 00:37:24,296
You may also have noticed a
little jump at the beginning


822
00:37:24,296 --> 00:37:25,176
where the map disappeared


823
00:37:25,176 --> 00:37:28,696
under the edge slightly
before it came back down


824
00:37:28,696 --> 00:37:30,326
and that's caused by the fact


825
00:37:30,326 --> 00:37:31,746
that scroll events
are asynchronous


826
00:37:32,056 --> 00:37:34,336
so the page only hears about
the scroll a little time


827
00:37:34,336 --> 00:37:35,136
after it's happened.


828
00:37:35,686 --> 00:37:39,016
So by using scroll events to get
this behavior you're never going


829
00:37:39,016 --> 00:37:41,616
to get frame accurate
really smooth scrolling.


830
00:37:42,956 --> 00:37:47,176
So we knew in Safari that we
had to make a declarative way


831
00:37:47,546 --> 00:37:51,566
where authors could get this
behavior in CSS without having


832
00:37:51,566 --> 00:37:52,566
to run any JavaScript.


833
00:37:53,016 --> 00:37:54,926
And that's what we
call sticky position.


834
00:37:55,486 --> 00:37:59,966
So this is a new value for the
position property called sticky


835
00:37:59,966 --> 00:38:03,096
and because it's still in draw
form it has the WebKit prefix.


836
00:38:03,626 --> 00:38:08,346
And to be a little more
technical, sticky specifies


837
00:38:08,346 --> 00:38:10,306
that an element takes
up space in the flow


838
00:38:11,646 --> 00:38:15,126
but its position is
constrained by the viewport


839
00:38:15,126 --> 00:38:17,906
or some scrollable ancestor
and the containing block.


840
00:38:18,556 --> 00:38:19,646
What does that mean?


841
00:38:19,646 --> 00:38:20,996
Well let me show
you a few pictures.


842
00:38:21,856 --> 00:38:24,336
So here's a page with a
sticky element, the red one,


843
00:38:24,866 --> 00:38:26,356
which is simply positioned


844
00:38:26,356 --> 00:38:28,416
or simply inflow
after the green box.


845
00:38:29,216 --> 00:38:31,376
So at this point the
element is behaving just


846
00:38:31,376 --> 00:38:32,456
like position relative would.


847
00:38:33,056 --> 00:38:36,856
So when you scroll the page
the sticky element just scrolls


848
00:38:36,856 --> 00:38:37,676
up with the page.


849
00:38:37,956 --> 00:38:42,106
But now the sticky element has
hit the edge of the viewport


850
00:38:42,826 --> 00:38:45,506
so it starts behaving more like
position fixed at this point.


851
00:38:45,826 --> 00:38:48,466
And so as the page scrolls
it stays in the same place.


852
00:38:49,306 --> 00:38:53,246
But if you scroll a bit more the
sticky element hits the bottom


853
00:38:53,246 --> 00:38:56,516
edge of its containing
block and so if you continue


854
00:38:56,516 --> 00:38:57,856
to scroll the bottom edge


855
00:38:57,856 --> 00:38:59,776
of the containing block
is pushing the sticky item


856
00:38:59,776 --> 00:39:00,566
out of the page.


857
00:39:00,976 --> 00:39:02,866
And so this is exactly
the behavior we saw


858
00:39:02,866 --> 00:39:03,666
with the Yelp map.


859
00:39:04,116 --> 00:39:07,356
So how do you get this behavior
now with this new property?


860
00:39:07,846 --> 00:39:10,826
Well it's actually
just two lines of CSS.


861
00:39:11,056 --> 00:39:15,456
You specify that you want the
sticky property for position


862
00:39:16,426 --> 00:39:18,306
and then you have to
tell us which edge


863
00:39:18,306 --> 00:39:21,846
of the viewport the sticky
thing is going to stick


864
00:39:21,846 --> 00:39:25,406
to so top right from
the left and you have


865
00:39:25,406 --> 00:39:27,396
to tell us how far away from
that edge you want to stick.


866
00:39:27,656 --> 00:39:29,896
So in this case we're saying
we want to stick 10 pixels


867
00:39:29,896 --> 00:39:33,066
from the top and that's all
we need to get that behavior.


868
00:39:35,716 --> 00:39:39,756
So we've been pursuing position
sticky in the CSS working group


869
00:39:40,116 --> 00:39:41,136
and they really loved it.


870
00:39:41,136 --> 00:39:42,206
They were really enthusiastic.


871
00:39:42,586 --> 00:39:44,436
And we hope to see it
in a future version


872
00:39:44,436 --> 00:39:45,706
of the CSS positioning module.


873
00:39:46,246 --> 00:39:53,526
And it's present in Safari
6.1 and 7 and on iOS 7 Mac.


874
00:39:55,106 --> 00:39:57,156
So what should you
do to make sure


875
00:39:57,156 --> 00:40:01,256
that your pages are getting the
best possible scrolling behavior


876
00:40:01,256 --> 00:40:01,886
in Safari?


877
00:40:02,456 --> 00:40:07,386
If you use fixed backgrounds
you should only use them


878
00:40:07,386 --> 00:40:10,396
for the page background and
preferably on the body element.


879
00:40:11,046 --> 00:40:14,726
Now I talked about scroll events


880
00:40:15,146 --> 00:40:18,366
which is the most common scroll
event handler that we see


881
00:40:18,796 --> 00:40:21,726
but there's one other scroll
event that people register


882
00:40:21,726 --> 00:40:24,926
for which unfortunately
does force us to drop


883
00:40:24,926 --> 00:40:27,986
out of our best scrolling mode
and that's the mousewheel event.


884
00:40:28,766 --> 00:40:32,586
Now mousewheel doesn't have
this asynchronous nature.


885
00:40:32,586 --> 00:40:34,536
People expect that
mousewheel events are delivered


886
00:40:34,536 --> 00:40:37,506
synchronously with scrolling so
if we see a mouse event header


887
00:40:37,506 --> 00:40:40,226
on the page we have to drop out
of our fastest scrolling mode


888
00:40:40,526 --> 00:40:42,786
and get you know good scrolling
but not great scrolling.


889
00:40:43,326 --> 00:40:47,706
And of course as I said, if
you're using scroll events


890
00:40:47,936 --> 00:40:48,846
and if you're using them just


891
00:40:48,846 --> 00:40:50,976
to get sticky behavior
then you should start using


892
00:40:50,976 --> 00:40:51,726
position sticky.


893
00:40:53,626 --> 00:40:56,776
Finally this is another
case where we optimize


894
00:40:56,776 --> 00:41:00,026
for the most common case
that we saw which is


895
00:41:00,026 --> 00:41:03,306
that almost all pages scroll by
just scrolling the main document


896
00:41:03,646 --> 00:41:05,806
but there are a few pages
that scroll by putting a bunch


897
00:41:05,806 --> 00:41:09,096
of content into overflow
scroll or iframes or frames.


898
00:41:09,716 --> 00:41:11,786
And we didn't ultimize
for those yet.


899
00:41:12,246 --> 00:41:16,036
So you should make sure that you
simply use main document scroll


900
00:41:16,036 --> 00:41:18,846
then and that's how your users
will have the best scrolling


901
00:41:19,256 --> 00:41:20,516
experiences on your pages.


902
00:41:20,516 --> 00:41:25,356
So at this point I'd like to
invite Tim back on the stage


903
00:41:25,676 --> 00:41:28,486
to show us how we can take a
page that doesn't scroll as well


904
00:41:28,486 --> 00:41:30,586
as it should and to
scroll really well.


905
00:41:31,086 --> 00:41:34,396
[Applause]


906
00:41:34,896 --> 00:41:37,356
>> Tim Horton: Alright so
my friends who just got back


907
00:41:37,356 --> 00:41:41,016
from Bali sent me this website
full of their photos and noted


908
00:41:41,016 --> 00:41:43,556
to me that scrolling
didn't really seem as smooth


909
00:41:43,556 --> 00:41:45,896
as they expected it to be
and they knew that I worked


910
00:41:45,896 --> 00:41:48,666
on WebKit so they wanted to
see if there was anything


911
00:41:48,666 --> 00:41:49,786
that they could do
to make it better.


912
00:41:50,196 --> 00:41:51,286
So here's that site.


913
00:41:51,286 --> 00:41:54,326
And let's just scroll
it for a minute


914
00:41:54,326 --> 00:41:56,776
and see what it looks like.


915
00:41:56,776 --> 00:41:58,876
So you might be able to
see up here on the screen


916
00:41:58,876 --> 00:42:00,096
that scrolling is
kind of chunky.


917
00:42:00,096 --> 00:42:03,616
It's not really super smooth
and I can really, really feel it


918
00:42:03,616 --> 00:42:06,366
with my fingers down
on the track pad.


919
00:42:06,516 --> 00:42:09,146
So let's see if we can figure
out why this is happening.


920
00:42:09,146 --> 00:42:12,336
Let's go to the develop menu
and show the web inspector.


921
00:42:13,436 --> 00:42:16,276
And let's record a layout
remembering timeline while we're


922
00:42:16,276 --> 00:42:19,056
scrolling and just see
what it looks like.


923
00:42:19,056 --> 00:42:21,576
So as we scroll along here
we're painting constantly


924
00:42:21,756 --> 00:42:22,436
and that's not good.


925
00:42:22,436 --> 00:42:25,076
That consumes power and it
obviously doesn't perform well.


926
00:42:25,386 --> 00:42:29,076
So let's go back and look at the
page and see if we can figure


927
00:42:29,076 --> 00:42:31,726
out why this is happening.


928
00:42:31,726 --> 00:42:34,336
You may remember, and Simon
mentions to me quite often,


929
00:42:34,336 --> 00:42:38,086
that fixed backgrounds
can often drop us out of,


930
00:42:38,616 --> 00:42:42,136
or can in some cases drop
us out of fast scrolling.


931
00:42:42,606 --> 00:42:46,046
So you notice that this page
back here has a fixed background


932
00:42:46,046 --> 00:42:47,736
so let's look at the code and
see if that's what's happening.


933
00:42:48,516 --> 00:42:54,666
[Noise]


934
00:42:55,166 --> 00:42:56,986
So as I look through
the code I notice


935
00:42:57,056 --> 00:43:02,726
in fact they do have a fixed
background on an element


936
00:43:02,726 --> 00:43:03,946
that is not a root element


937
00:43:03,946 --> 00:43:05,526
and not the body
[inaudible] tells them to.


938
00:43:05,526 --> 00:43:08,956
So let's just move
that up in the code,


939
00:43:09,266 --> 00:43:14,906
up to the body, and
see what happens.


940
00:43:14,956 --> 00:43:18,356
Woe, scrolling is
perfectly smooth now.


941
00:43:19,276 --> 00:43:20,566
Let's go back into
the web inspector


942
00:43:20,566 --> 00:43:24,386
and see what it looks like now.


943
00:43:24,596 --> 00:43:27,566
We'll record another
timeline and take a look.


944
00:43:28,106 --> 00:43:29,146
And you'll notice now


945
00:43:29,486 --> 00:43:31,596
as we scroll there's really
not much painting happening.


946
00:43:32,146 --> 00:43:34,336
That's excellent.


947
00:43:35,186 --> 00:43:38,016
So let's look at the
JavaScript timeline,


948
00:43:38,016 --> 00:43:40,496
which we notice has lots
of stuff going on in it


949
00:43:40,496 --> 00:43:42,216
for some reason and it looks


950
00:43:42,216 --> 00:43:44,456
like this page is using
scroll events for some reason.


951
00:43:44,456 --> 00:43:47,056
You can see all of
these scroll events.


952
00:43:47,056 --> 00:43:51,086
Let's go back and look
at the page again and see


953
00:43:51,086 --> 00:43:54,046
if we can maybe determine why it
would be doing that since waking


954
00:43:54,046 --> 00:43:56,056
up for JavaScript isn't
great for power either.


955
00:43:57,416 --> 00:44:00,966
So you'll notice here at the
top of the page, scroll down,


956
00:44:00,966 --> 00:44:04,546
see the map and post section
there, it's sticking to the top.


957
00:44:05,066 --> 00:44:07,726
You can see that, oops.


958
00:44:08,256 --> 00:44:11,666
So let's look at the page


959
00:44:11,666 --> 00:44:13,696
and see what they might
be doing with JavaScript.


960
00:44:14,066 --> 00:44:18,446
And you see here they
do actually have a bunch


961
00:44:18,446 --> 00:44:21,516
of JavaScript that's just being
used to perform that sticky


962
00:44:21,516 --> 00:44:23,956
and that's not great
because just


963
00:44:23,956 --> 00:44:25,906
as I mentioned we now
have position sticky


964
00:44:26,356 --> 00:44:28,986
so we can actually just delete
this JavaScript, get rid of all


965
00:44:28,986 --> 00:44:29,906
of the JavaScript on the page.


966
00:44:29,906 --> 00:44:35,296
Let's see what the page looks
like now just for kicks.


967
00:44:35,296 --> 00:44:38,426
So you see now the
sidebar does not stick.


968
00:44:38,926 --> 00:44:41,126
It's alright because
again we have sticky.


969
00:44:41,126 --> 00:44:45,206
We can go and with two lines we
can apply to that same element,


970
00:44:45,816 --> 00:44:50,526
we can apply sticky positioning
and tell it to stick to the top


971
00:44:51,256 --> 00:44:53,276
and now let's refresh and scroll


972
00:44:53,276 --> 00:44:55,446
and we get the same
behavior we had before,


973
00:44:56,366 --> 00:44:57,206
right there very nice.


974
00:44:58,466 --> 00:45:01,106
And let's look one more time
back in the develop menu


975
00:45:01,246 --> 00:45:02,246
and show the web inspector


976
00:45:03,006 --> 00:45:04,946
and record another
timeline while scrolling


977
00:45:05,736 --> 00:45:08,396
and you'll see there's
nothing, no painting,


978
00:45:09,286 --> 00:45:10,666
no JavaScript events, nothing.


979
00:45:10,666 --> 00:45:12,166
This is fantastic for power.


980
00:45:12,166 --> 00:45:13,556
It's fantastic for performance.


981
00:45:14,356 --> 00:45:16,936
And so I hope this has shown
you at least some small things


982
00:45:16,936 --> 00:45:19,126
that you can do to maybe make
your website scroll better


983
00:45:19,676 --> 00:45:20,496
and use less power.


984
00:45:20,916 --> 00:45:21,886
Thank you.


985
00:45:21,886 --> 00:45:22,116
[Applause]


986
00:45:22,116 --> 00:45:33,406
>> Simon Fraser: Thank you, Tim.


987
00:45:34,446 --> 00:45:36,916
Once you've feel the scrolling
performance in Safari 7


988
00:45:36,916 --> 00:45:38,886
in OS X Mavericks we think
you'll really love it.


989
00:45:39,376 --> 00:45:40,826
And you should really make sure


990
00:45:40,826 --> 00:45:42,676
that your pages get the
best possible scrolling


991
00:45:42,676 --> 00:45:44,946
because your uses will notice
and they'll love your pages.


992
00:45:46,836 --> 00:45:48,166
So let me wrap up.


993
00:45:48,886 --> 00:45:54,396
So I talked about the two new
power saving features in Safari,


994
00:45:54,916 --> 00:45:57,146
App Nap for Safari
Tabs and Power Saver,


995
00:45:57,546 --> 00:45:59,396
that give us these
great power savings


996
00:45:59,396 --> 00:46:01,036
and make Safari super
power efficient.


997
00:46:01,506 --> 00:46:03,926
And we've also talked
about responses scrolling,


998
00:46:04,196 --> 00:46:06,376
which is not only a more
efficient way of scrolling


999
00:46:06,956 --> 00:46:08,996
but really improves our
scrolling performance


1000
00:46:08,996 --> 00:46:09,986
in a way that you can feel.


1001
00:46:10,576 --> 00:46:15,776
But we also talked about
how web content also needs


1002
00:46:15,776 --> 00:46:16,536
to be ultimized.


1003
00:46:16,706 --> 00:46:19,416
So we want you to go back
and look at your web content


1004
00:46:19,876 --> 00:46:24,076
and take this advice to heart
so you should reduce the amount


1005
00:46:24,076 --> 00:46:25,556
of work you do in
background pages


1006
00:46:25,866 --> 00:46:28,856
by using the page
visibility API and also


1007
00:46:28,856 --> 00:46:32,356
to use requestAnimationFrame for
animations if you really need


1008
00:46:32,356 --> 00:46:33,736
to use JavaScript
for animations.


1009
00:46:34,686 --> 00:46:36,906
You should make sure that
you don't fall into any


1010
00:46:36,936 --> 00:46:39,836
of those common pitfalls that
we talk about in terms of laying


1011
00:46:40,146 --> 00:46:43,946
out too much and painting too
much and use the web inspector


1012
00:46:43,946 --> 00:46:45,956
to make sure that,
as Tim showed,


1013
00:46:46,166 --> 00:46:49,206
when you scroll your page
there's really no work.


1014
00:46:49,206 --> 00:46:52,646
The browser's just taking care
of everything under the hood.


1015
00:46:52,766 --> 00:46:54,646
And finally, as we said,


1016
00:46:54,646 --> 00:46:56,556
responsive scrolling is
really great, you'll love it.


1017
00:46:56,836 --> 00:46:58,226
And we think your
users will love it


1018
00:46:58,276 --> 00:46:59,546
when they see it on your pages.


1019
00:47:00,126 --> 00:47:05,246
So if you need more information
you contact John Geleynse


1020
00:47:05,246 --> 00:47:08,336
or a look at the
documentation on Safari.center.


1021
00:47:08,336 --> 00:47:11,386
If you're an extension
developer you should go


1022
00:47:11,386 --> 00:47:12,226
and read the updates


1023
00:47:12,226 --> 00:47:13,986
to the Safari extensions
development guide


1024
00:47:14,176 --> 00:47:17,116
because there are some important
points about changes in Safari 7


1025
00:47:17,386 --> 00:47:18,396
that you should go
and read about.


1026
00:47:18,896 --> 00:47:19,826
And finally, of course,


1027
00:47:19,826 --> 00:47:22,286
the Apple Developer forums are a
great place to go and get help.


1028
00:47:22,806 --> 00:47:26,066
Now there were a lot of
related sessions yesterday


1029
00:47:26,766 --> 00:47:28,556
and I encourage you to
go and watch the videos


1030
00:47:28,556 --> 00:47:29,746
if you haven't seen
those already.


1031
00:47:30,346 --> 00:47:31,686
There were two on
the web inspector.


1032
00:47:31,686 --> 00:47:33,996
There was one on New
Features in WebKit Safari


1033
00:47:34,256 --> 00:47:37,326
and then there were a couple
of more OS level sessions


1034
00:47:37,326 --> 00:47:40,066
about battery life
and actually coming


1035
00:47:40,066 --> 00:47:41,936
up next I think is
the App Nap talk


1036
00:47:42,236 --> 00:47:44,526
which will give you the
sort of system level view


1037
00:47:44,526 --> 00:47:46,086
of the App Nap feature
that I talked about.


1038
00:47:46,586 --> 00:47:47,216
Thank you very much.


1039
00:47:47,216 --> 00:47:49,016
[Applause]


1040
00:47:49,016 --> 00:47:59,436
[Silence]

