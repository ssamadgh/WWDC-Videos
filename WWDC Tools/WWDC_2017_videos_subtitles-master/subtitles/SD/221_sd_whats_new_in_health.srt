1
00:00:23,516 --> 00:00:30,116
[ Applause ]


2
00:00:30,616 --> 00:00:31,696
>> Good afternoon, everyone.


3
00:00:31,866 --> 00:00:32,695
Thank you for being here.


4
00:00:32,996 --> 00:00:34,706
Welcome to "What's New in


5
00:00:34,706 --> 00:00:35,056
Health".


6
00:00:35,506 --> 00:00:36,386
My name is Alexa.


7
00:00:36,556 --> 00:00:37,946
I'm a software engineer on the


8
00:00:37,946 --> 00:00:40,036
HealthKit Team and one of my


9
00:00:40,036 --> 00:00:41,506
favorite parts of being on this


10
00:00:41,506 --> 00:00:43,356
team is getting to see the ways


11
00:00:43,356 --> 00:00:44,486
in which technology can help


12
00:00:44,486 --> 00:00:45,386
people improve their lives.


13
00:00:46,036 --> 00:00:48,216
Like many of our users, I've


14
00:00:48,286 --> 00:00:49,586
absolutely loved getting to use


15
00:00:49,586 --> 00:00:51,516
all fitness features on my Apple


16
00:00:51,516 --> 00:00:51,906
Watch.


17
00:00:52,526 --> 00:00:53,976
Getting to close my rings every


18
00:00:53,976 --> 00:00:55,476
day and share my activity with


19
00:00:55,476 --> 00:00:55,986
friends.


20
00:00:55,986 --> 00:00:57,506
And really the integration with


21
00:00:57,506 --> 00:00:58,816
all of your great fitness apps


22
00:00:59,146 --> 00:01:01,846
have made it easier to get fit.


23
00:01:02,426 --> 00:01:04,236
Many people also use technology


24
00:01:04,236 --> 00:01:05,236
to help them track other


25
00:01:05,236 --> 00:01:06,166
components of the well-being


26
00:01:06,166 --> 00:01:06,696
like sleep.


27
00:01:07,256 --> 00:01:08,346
Having a good understanding of


28
00:01:08,346 --> 00:01:09,846
your sleep can help you be more


29
00:01:09,846 --> 00:01:11,766
prepared for your day and get a


30
00:01:11,766 --> 00:01:13,766
better night's rest.


31
00:01:14,086 --> 00:01:15,956
However, many of our users also


32
00:01:15,956 --> 00:01:18,216
rely on technology in ways that


33
00:01:18,216 --> 00:01:19,236
we may not even think of.


34
00:01:20,366 --> 00:01:21,636
For example, in managing a


35
00:01:21,636 --> 00:01:23,316
chronic condition like diabetes


36
00:01:23,926 --> 00:01:27,946
and on iOS and watchOS, the home


37
00:01:27,946 --> 00:01:29,466
of all of this personal health


38
00:01:29,736 --> 00:01:30,886
data is HealthKit.


39
00:01:31,856 --> 00:01:33,926
So, we've seen that users have


40
00:01:33,926 --> 00:01:34,956
really bought into our health


41
00:01:34,956 --> 00:01:36,056
and wellness ecosystem.


42
00:01:36,436 --> 00:01:37,236
And by innovating with


43
00:01:37,236 --> 00:01:38,566
HealthKit, you're app can


44
00:01:38,566 --> 00:01:40,006
immediately take advantage of


45
00:01:40,006 --> 00:01:41,446
the guarantees of privacy,


46
00:01:41,446 --> 00:01:43,296
transparency and control that we


47
00:01:43,296 --> 00:01:44,526
aim to give all of our users.


48
00:01:45,706 --> 00:01:47,566
So, in the next 60 minutes we'll


49
00:01:47,566 --> 00:01:49,346
be going over what's new in our


50
00:01:49,346 --> 00:01:51,256
SEK this year in iOS 11 and


51
00:01:51,256 --> 00:01:53,376
watchOS 4 to help you continue


52
00:01:53,376 --> 00:01:54,496
to create innovative health


53
00:01:54,496 --> 00:01:56,086
technologies on Apple platforms.


54
00:01:57,096 --> 00:01:58,186
Let's dive in.


55
00:01:59,336 --> 00:02:00,846
So, first we'll go over a quick


56
00:02:00,846 --> 00:02:02,536
tour of the new datatypes in


57
00:02:02,536 --> 00:02:03,396
HealthKit this year.


58
00:02:04,416 --> 00:02:06,046
After that, we'll cover some


59
00:02:06,046 --> 00:02:07,736
general updates to our workout


60
00:02:07,736 --> 00:02:08,936
API's to help build really great


61
00:02:08,936 --> 00:02:10,026
fitness experiences.


62
00:02:10,566 --> 00:02:13,046
After that we'll introduce sync


63
00:02:13,046 --> 00:02:14,826
identifiers which are a new


64
00:02:14,826 --> 00:02:16,156
feature to help you de-duplicate


65
00:02:16,156 --> 00:02:17,566
data across multiple devices.


66
00:02:18,166 --> 00:02:20,206
And finally, we have some


67
00:02:20,206 --> 00:02:21,546
updates to share regarding our


68
00:02:21,546 --> 00:02:22,786
support for users managing


69
00:02:22,786 --> 00:02:23,316
diabetes.


70
00:02:23,316 --> 00:02:26,276
So, let's get started with our


71
00:02:26,276 --> 00:02:27,226
new HealthKit types.


72
00:02:27,366 --> 00:02:28,576
So, if you've used HealthKit


73
00:02:28,576 --> 00:02:30,036
before you'll know that we


74
00:02:30,096 --> 00:02:31,226
categorize all of that personal


75
00:02:31,226 --> 00:02:32,626
data into a bunch of different


76
00:02:32,626 --> 00:02:33,736
types that you then save to


77
00:02:33,736 --> 00:02:34,146
HealthKit.


78
00:02:34,146 --> 00:02:35,326
And we have some new ones to


79
00:02:35,326 --> 00:02:36,096
introduce this year.


80
00:02:36,526 --> 00:02:38,336
I'm going to start with the


81
00:02:38,336 --> 00:02:39,106
sample types.


82
00:02:39,576 --> 00:02:40,806
So, samples that you save into


83
00:02:40,806 --> 00:02:42,486
HealthKit are bits of data that


84
00:02:42,486 --> 00:02:44,036
have particular timestamps and


85
00:02:44,356 --> 00:02:45,326
are of a certain type.


86
00:02:46,656 --> 00:02:47,796
The first new one that we have


87
00:02:47,796 --> 00:02:50,256
this year, is HKWorkoutRoute.


88
00:02:50,696 --> 00:02:52,206
So, workout routes let you save


89
00:02:52,206 --> 00:02:54,326
a map of your colocation during


90
00:02:54,326 --> 00:02:54,766
a workout.


91
00:02:55,116 --> 00:02:56,466
And we will cover this in much


92
00:02:56,466 --> 00:02:59,346
more detail later in the talk.


93
00:02:59,936 --> 00:03:01,286
We are also introducing waist


94
00:03:01,286 --> 00:03:01,956
circumference.


95
00:03:02,296 --> 00:03:03,406
So, this is a body metric


96
00:03:03,406 --> 00:03:05,786
similar to height or weight that


97
00:03:05,786 --> 00:03:07,156
users can track over time to


98
00:03:07,156 --> 00:03:08,276
understand changes to their


99
00:03:08,276 --> 00:03:08,586
body.


100
00:03:09,036 --> 00:03:11,936
Another body metric that we've


101
00:03:11,966 --> 00:03:13,826
introduced this year is VO2 max.


102
00:03:14,426 --> 00:03:16,486
So, VO2 max measures the maximum


103
00:03:16,486 --> 00:03:18,116
rate of oxygen intake during


104
00:03:18,116 --> 00:03:18,906
peak exercise.


105
00:03:19,096 --> 00:03:20,206
And what's really cool about


106
00:03:20,206 --> 00:03:22,836
this is on watchOS 4, the Apple


107
00:03:22,836 --> 00:03:25,146
Watch can even estimate VO2 max


108
00:03:25,476 --> 00:03:26,846
during certain outdoor walking


109
00:03:26,846 --> 00:03:27,486
and running workouts.


110
00:03:28,056 --> 00:03:29,416
So, with permission to do this


111
00:03:29,416 --> 00:03:31,346
data, your app can see the VO2


112
00:03:31,346 --> 00:03:33,846
max that was estimated by Apple


113
00:03:33,846 --> 00:03:34,206
Watch.


114
00:03:34,676 --> 00:03:37,296
And finally, one of our most


115
00:03:37,296 --> 00:03:38,456
requested types in HealthKit,


116
00:03:38,786 --> 00:03:39,886
this year we are introducing


117
00:03:39,886 --> 00:03:40,696
insulin delivery.


118
00:03:41,176 --> 00:03:42,236
My colleague Michael will cover


119
00:03:42,236 --> 00:03:42,516
this [applause].


120
00:03:46,976 --> 00:03:47,946
My colleague Michael will cover


121
00:03:47,946 --> 00:03:49,246
this in much more detail later


122
00:03:49,246 --> 00:03:49,746
in the talk.


123
00:03:50,636 --> 00:03:51,776
So, along with these sample


124
00:03:51,776 --> 00:03:53,196
types, we've also introduced


125
00:03:53,196 --> 00:03:54,646
some new workout activity types.


126
00:03:55,156 --> 00:03:56,206
So, these categorize the


127
00:03:56,206 --> 00:03:57,226
different workouts your users


128
00:03:57,226 --> 00:03:58,036
might be doing.


129
00:03:58,316 --> 00:04:00,576
And we have a wide range of them


130
00:04:00,576 --> 00:04:02,216
and they configure your workout


131
00:04:02,526 --> 00:04:03,416
as well.


132
00:04:04,016 --> 00:04:04,806
So, the first one we've


133
00:04:04,806 --> 00:04:06,226
introduced this year is Tai Chi


134
00:04:06,676 --> 00:04:09,166
as well as mixed cardio, and


135
00:04:09,166 --> 00:04:10,326
finally hand cycling.


136
00:04:10,626 --> 00:04:11,586
So, you can use these to build


137
00:04:11,586 --> 00:04:12,826
even more encompassing fitness


138
00:04:12,826 --> 00:04:14,096
experiences for your users.


139
00:04:14,576 --> 00:04:17,276
Along with our new workout


140
00:04:17,536 --> 00:04:19,296
activity types, we also have


141
00:04:19,296 --> 00:04:20,356
some general updates to our


142
00:04:20,356 --> 00:04:20,896
workout API.


143
00:04:22,076 --> 00:04:24,196
So, some of these are tied to


144
00:04:24,196 --> 00:04:25,526
our fall release where we


145
00:04:25,526 --> 00:04:26,706
released the Apple Watch Series


146
00:04:26,706 --> 00:04:26,956
2.


147
00:04:27,196 --> 00:04:28,346
And some of this is new this


148
00:04:28,346 --> 00:04:30,036
year in iOS 11 and watchOS 4.


149
00:04:30,136 --> 00:04:31,426
So, we'll cover some updates


150
00:04:31,426 --> 00:04:32,216
regarding swimming.


151
00:04:32,556 --> 00:04:34,706
We'll talk about the new segment


152
00:04:34,996 --> 00:04:35,296
API.


153
00:04:35,296 --> 00:04:36,796
And we'll also talk about a new


154
00:04:36,796 --> 00:04:37,946
way that your apps can pause and


155
00:04:37,946 --> 00:04:38,706
resume workouts.


156
00:04:39,636 --> 00:04:42,046
So, last fall we released the


157
00:04:42,046 --> 00:04:43,066
Apple Watch Series 2.


158
00:04:43,376 --> 00:04:44,776
And people have absolutely loved


159
00:04:44,776 --> 00:04:45,536
getting to take their watch


160
00:04:45,536 --> 00:04:45,936
swimming.


161
00:04:46,556 --> 00:04:47,986
You can take it in the pool as


162
00:04:47,986 --> 00:04:49,256
well as out in the ocean and


163
00:04:49,256 --> 00:04:49,626
lakes.


164
00:04:50,136 --> 00:04:51,506
And so, I'm going to start by


165
00:04:51,816 --> 00:04:52,936
covering some of the types of


166
00:04:52,936 --> 00:04:54,886
tracking that Apple Watch does


167
00:04:54,886 --> 00:04:56,436
for swimming workouts, and then


168
00:04:56,596 --> 00:04:57,666
dive into some of the new stuff


169
00:04:57,666 --> 00:04:58,056
this year.


170
00:04:59,376 --> 00:05:01,276
So firstly, as I mentioned we


171
00:05:01,276 --> 00:05:02,956
have support for both pool and


172
00:05:02,956 --> 00:05:03,896
open water swims.


173
00:05:04,306 --> 00:05:05,496
And for pool swims you can


174
00:05:05,496 --> 00:05:06,986
configure the lap length to get


175
00:05:06,986 --> 00:05:08,396
the most accurate statistics


176
00:05:08,396 --> 00:05:10,406
about the workout.


177
00:05:10,876 --> 00:05:12,536
We also automatically track some


178
00:05:12,536 --> 00:05:13,636
key swimming metrics.


179
00:05:14,116 --> 00:05:15,866
The first of these are swimming


180
00:05:15,866 --> 00:05:18,096
distance and swimming stroke


181
00:05:18,096 --> 00:05:18,346
count.


182
00:05:19,176 --> 00:05:20,176
So, if you're familiar with


183
00:05:20,176 --> 00:05:21,236
HealthKit, you'll be aware of


184
00:05:21,236 --> 00:05:22,346
how you would want to open a


185
00:05:22,346 --> 00:05:23,756
query against certain samples


186
00:05:23,756 --> 00:05:24,716
that you're interested in during


187
00:05:24,716 --> 00:05:25,126
the workout.


188
00:05:25,126 --> 00:05:26,786
For example, the calories the


189
00:05:26,786 --> 00:05:28,826
user has burned or their heart


190
00:05:28,826 --> 00:05:30,286
rate for that current time.


191
00:05:31,066 --> 00:05:32,396
So, similarly, these two metrics


192
00:05:32,686 --> 00:05:34,176
you'd want to open a query for


193
00:05:34,176 --> 00:05:34,936
and track throughout the


194
00:05:34,936 --> 00:05:36,386
workout, so you can display them


195
00:05:36,386 --> 00:05:37,096
live to the user.


196
00:05:38,166 --> 00:05:40,676
Apple Watch can also detect


197
00:05:40,786 --> 00:05:42,356
individual laps as the user is


198
00:05:42,356 --> 00:05:43,446
swimming in real time.


199
00:05:44,316 --> 00:05:46,136
In addition, we even track the


200
00:05:46,136 --> 00:05:47,726
stroke style per lap, which is


201
00:05:47,726 --> 00:05:48,876
really cool and can help give


202
00:05:49,176 --> 00:05:51,516
really up-to-date statistics


203
00:05:51,516 --> 00:05:52,166
about the workout.


204
00:05:53,766 --> 00:05:55,186
So, the stroke style detection


205
00:05:55,466 --> 00:05:57,416
is stored as metadata on both


206
00:05:57,416 --> 00:05:59,556
the stroke count sample, as well


207
00:05:59,556 --> 00:06:00,816
as each lap event.


208
00:06:01,166 --> 00:06:02,056
And we'll go over what that


209
00:06:02,056 --> 00:06:03,726
looks like in a little bit.


210
00:06:04,386 --> 00:06:06,986
New this year, in watchOS 4, we


211
00:06:06,986 --> 00:06:08,276
also have automatic set


212
00:06:08,306 --> 00:06:08,866
detection.


213
00:06:09,326 --> 00:06:10,856
So, this is HealthKit detecting


214
00:06:10,856 --> 00:06:11,906
the time in which the user was


215
00:06:11,906 --> 00:06:13,396
swimming continuously and


216
00:06:13,426 --> 00:06:14,436
highlighting that to the user.


217
00:06:14,866 --> 00:06:15,956
And your apps will have access


218
00:06:15,956 --> 00:06:18,766
to that information as well.


219
00:06:18,766 --> 00:06:20,516
Also, new this year, in watchOS


220
00:06:20,546 --> 00:06:23,866
4, your apps can now enable


221
00:06:23,866 --> 00:06:24,396
Water lock.


222
00:06:24,756 --> 00:06:26,126
So, this is a really great


223
00:06:26,126 --> 00:06:28,016
feature that allows your app to


224
00:06:28,016 --> 00:06:29,526
ignore any input from water on


225
00:06:29,526 --> 00:06:30,006
the screen.


226
00:06:30,316 --> 00:06:31,666
Which is really great to get a


227
00:06:31,666 --> 00:06:33,026
consistent user experience.


228
00:06:33,156 --> 00:06:34,636
When the user wants to exit


229
00:06:34,636 --> 00:06:36,006
Water lock, all they need to do


230
00:06:36,006 --> 00:06:37,466
is simply twist digital crown on


231
00:06:37,466 --> 00:06:39,886
their watch and it'll eject the


232
00:06:39,886 --> 00:06:40,866
water through the speakers by


233
00:06:40,866 --> 00:06:42,046
displaying a custom sound.


234
00:06:42,856 --> 00:06:45,566
So, now let's dig in by going


235
00:06:45,566 --> 00:06:46,676
over some of the new metadata


236
00:06:46,676 --> 00:06:47,966
keys and values that we


237
00:06:47,966 --> 00:06:49,036
introduced along with swimming.


238
00:06:50,436 --> 00:06:51,786
As I said, we have location


239
00:06:51,786 --> 00:06:51,986
type.


240
00:06:51,986 --> 00:06:54,396
And this is both pool open


241
00:06:54,396 --> 00:06:57,156
water, as well as unknown.


242
00:06:57,246 --> 00:06:58,906
We also have the swimming stroke


243
00:06:58,906 --> 00:07:01,976
style, which is common styles


244
00:07:01,976 --> 00:07:03,776
like freestyle and backstroke as


245
00:07:03,826 --> 00:07:06,446
well as unknown or mixed.


246
00:07:08,056 --> 00:07:10,186
So, now let's say you want to


247
00:07:10,186 --> 00:07:11,476
build a swimming app and you


248
00:07:11,476 --> 00:07:12,466
want to know how to start out


249
00:07:12,466 --> 00:07:12,956
with HealthKit.


250
00:07:13,396 --> 00:07:14,316
So, the first step is going to


251
00:07:14,316 --> 00:07:15,506
be to configure a swimming


252
00:07:15,506 --> 00:07:15,826
workout.


253
00:07:16,136 --> 00:07:17,106
Let's say in this case we're


254
00:07:17,106 --> 00:07:18,576
doing a pool swim workout.


255
00:07:19,236 --> 00:07:20,296
So, first we'd want to create


256
00:07:20,296 --> 00:07:21,906
our HK workoutConfiguration


257
00:07:21,946 --> 00:07:22,236
object.


258
00:07:23,586 --> 00:07:24,456
Next, we want to set some


259
00:07:24,456 --> 00:07:25,186
properties on it.


260
00:07:25,306 --> 00:07:26,506
Firstly, the activity type to


261
00:07:26,506 --> 00:07:26,956
swimming.


262
00:07:28,256 --> 00:07:29,776
The swimming location type.


263
00:07:29,836 --> 00:07:31,116
We said we're going for a pool


264
00:07:31,116 --> 00:07:31,426
swim.


265
00:07:32,096 --> 00:07:33,866
And then the lap length.


266
00:07:33,866 --> 00:07:35,066
In this case I'm setting it to


267
00:07:35,176 --> 00:07:36,966
the HK quantity of 25 yards,


268
00:07:37,036 --> 00:07:37,946
which is a pretty common pool


269
00:07:37,946 --> 00:07:38,366
length.


270
00:07:39,486 --> 00:07:41,186
Next, we want to start our


271
00:07:41,186 --> 00:07:42,766
session by creating a session


272
00:07:42,766 --> 00:07:44,046
object and then passing it to


273
00:07:44,046 --> 00:07:44,686
the healthStore.


274
00:07:46,096 --> 00:07:47,496
So, first we're going to create


275
00:07:47,496 --> 00:07:49,456
our workout session and pass in


276
00:07:49,456 --> 00:07:50,296
the configuration.


277
00:07:50,776 --> 00:07:51,856
And you'll note here that the


278
00:07:51,856 --> 00:07:53,516
initializer for HK Workout


279
00:07:53,516 --> 00:07:54,916
session could throw.


280
00:07:55,306 --> 00:07:56,486
It would throw in the case that


281
00:07:56,486 --> 00:07:57,886
you pass an invalid workout


282
00:07:57,886 --> 00:07:58,586
configuration.


283
00:07:58,926 --> 00:08:00,006
For example, if you try to set


284
00:08:00,006 --> 00:08:01,756
the lap length on an open water


285
00:08:01,756 --> 00:08:02,106
swim.


286
00:08:02,676 --> 00:08:03,706
So, be sure to handle that in


287
00:08:03,706 --> 00:08:04,136
your code.


288
00:08:04,536 --> 00:08:06,766
Next, we're going to set the


289
00:08:07,046 --> 00:08:08,846
delegate of the workout session


290
00:08:08,906 --> 00:08:10,016
to be ourselves so that we can


291
00:08:10,016 --> 00:08:11,446
receive callbacks from HealthKit


292
00:08:11,746 --> 00:08:13,636
as swimming events happen.


293
00:08:14,516 --> 00:08:16,196
Finally, we're going to actually


294
00:08:16,196 --> 00:08:17,536
start the session by calling the


295
00:08:17,626 --> 00:08:19,386
start method on healthStore and


296
00:08:19,386 --> 00:08:20,446
passing in the session we just


297
00:08:20,496 --> 00:08:20,906
created.


298
00:08:22,076 --> 00:08:23,276
So now, great.


299
00:08:23,276 --> 00:08:24,586
Our swimming session is ongoing.


300
00:08:24,826 --> 00:08:26,136
Maybe we also want to enable


301
00:08:26,136 --> 00:08:27,216
water lock for this workout.


302
00:08:27,556 --> 00:08:30,206
So, a good place to do that is


303
00:08:30,206 --> 00:08:31,506
when our workout session changes


304
00:08:31,506 --> 00:08:32,515
state to start running.


305
00:08:32,956 --> 00:08:34,086
This is because this API will


306
00:08:34,086 --> 00:08:35,876
only work if you have an active


307
00:08:36,135 --> 00:08:38,186
workout, or a location session


308
00:08:38,186 --> 00:08:39,826
ongoing, and if you're in the


309
00:08:39,826 --> 00:08:40,346
foreground.


310
00:08:40,916 --> 00:08:42,226
So, let's look at this method.


311
00:08:42,226 --> 00:08:43,785
Workout session did change to


312
00:08:43,785 --> 00:08:45,286
from state date.


313
00:08:45,716 --> 00:08:48,106
We're going to switch on the


314
00:08:48,106 --> 00:08:49,586
from state to the to state.


315
00:08:50,196 --> 00:08:51,546
In this case, we're interested


316
00:08:51,546 --> 00:08:53,276
in not started, switching to


317
00:08:53,276 --> 00:08:54,386
running, which is how we know


318
00:08:54,386 --> 00:08:55,406
that our session has begun.


319
00:08:56,366 --> 00:08:57,686
So, here's where we're going to


320
00:08:57,686 --> 00:08:59,706
want to grab the shared WatchKit


321
00:08:59,706 --> 00:09:01,476
extension and then call enable


322
00:09:01,476 --> 00:09:02,766
water lock on it.


323
00:09:04,376 --> 00:09:06,536
So, along with the changes to


324
00:09:06,536 --> 00:09:08,716
our swimming data types, we also


325
00:09:08,806 --> 00:09:10,406
have some changes to our workout


326
00:09:10,406 --> 00:09:11,536
events to better support


327
00:09:11,536 --> 00:09:13,466
swimming as well as more nuance


328
00:09:13,466 --> 00:09:14,726
workout experiences in general.


329
00:09:14,906 --> 00:09:15,976
So, let's start with just an


330
00:09:15,976 --> 00:09:17,496
overview of HKWorkoutEvent.


331
00:09:19,096 --> 00:09:20,616
So, WorkoutEvents highlight a


332
00:09:20,616 --> 00:09:21,766
specific time of interest in


333
00:09:21,766 --> 00:09:22,276
your workout.


334
00:09:22,526 --> 00:09:24,856
That can be used for pausing and


335
00:09:24,856 --> 00:09:26,216
resuming, as well as things like


336
00:09:26,316 --> 00:09:28,076
laps and markers.


337
00:09:28,076 --> 00:09:29,256
And markers can really be


338
00:09:29,256 --> 00:09:30,586
anything arbitrary set by your


339
00:09:30,586 --> 00:09:32,026
application, and you can store


340
00:09:32,026 --> 00:09:33,516
data on the metadata of the


341
00:09:33,756 --> 00:09:35,276
event to store what you need for


342
00:09:36,066 --> 00:09:37,436
your purpose.


343
00:09:37,706 --> 00:09:38,916
Events are created by both


344
00:09:38,916 --> 00:09:40,146
HealthKit and your app.


345
00:09:40,836 --> 00:09:41,946
And this is key because


346
00:09:41,946 --> 00:09:43,276
HealthKit will create events and


347
00:09:43,276 --> 00:09:44,076
then pass them to you


348
00:09:44,076 --> 00:09:44,596
immediately.


349
00:09:44,596 --> 00:09:45,666
So, that's how you'll find


350
00:09:45,666 --> 00:09:47,526
information about laps, and


351
00:09:47,526 --> 00:09:48,386
strokes style and that for


352
00:09:48,386 --> 00:09:49,976
swimming as well as pausing and


353
00:09:49,976 --> 00:09:51,186
resuming through general workout


354
00:09:52,086 --> 00:09:52,196
apps.


355
00:09:52,716 --> 00:09:54,996
And WorkoutEvents are saved on a


356
00:09:54,996 --> 00:09:57,256
list on HKWorkout.


357
00:09:57,606 --> 00:09:58,456
And so, you'll get them back


358
00:09:58,746 --> 00:09:59,416
when you're querying for


359
00:09:59,416 --> 00:09:59,856
workouts.


360
00:09:59,926 --> 00:10:00,806
Of, if you're looking at


361
00:10:00,806 --> 00:10:01,546
workouts from other


362
00:10:01,546 --> 00:10:02,176
applications.


363
00:10:04,396 --> 00:10:05,566
In addition, workout events


364
00:10:05,566 --> 00:10:06,946
affect the workout's duration.


365
00:10:07,536 --> 00:10:09,716
Specifically, pause and resume


366
00:10:09,716 --> 00:10:10,106
events.


367
00:10:10,396 --> 00:10:11,826
So, if I go for a 10-minute run


368
00:10:12,146 --> 00:10:13,156
and I pause for a minute,


369
00:10:13,696 --> 00:10:14,666
HealthKit will see that there's


370
00:10:14,666 --> 00:10:15,936
a pause event followed by a


371
00:10:15,936 --> 00:10:17,556
resume event a minute later and


372
00:10:17,556 --> 00:10:18,956
calculate the total duration to


373
00:10:18,956 --> 00:10:20,476
be 9 minutes, just as we would


374
00:10:20,476 --> 00:10:20,696
expect.


375
00:10:22,186 --> 00:10:23,736
So, let's take a look at how we


376
00:10:23,736 --> 00:10:25,526
can observe lap events back in


377
00:10:25,526 --> 00:10:26,396
my swimming example.


378
00:10:27,206 --> 00:10:29,796
So, we have this method, workout


379
00:10:29,796 --> 00:10:31,186
session did generate event.


380
00:10:31,656 --> 00:10:32,576
And that's where HealthKit is


381
00:10:32,576 --> 00:10:33,696
going to pass through events as


382
00:10:33,696 --> 00:10:34,666
the workout is ongoing.


383
00:10:35,756 --> 00:10:36,906
So, we're going to switch on the


384
00:10:37,056 --> 00:10:38,066
type of event that's given to


385
00:10:38,066 --> 00:10:38,426
us.


386
00:10:39,716 --> 00:10:40,456
In this case, what we're


387
00:10:40,456 --> 00:10:42,996
interested in is laps.


388
00:10:43,496 --> 00:10:44,926
So, now that we have our lap


389
00:10:44,926 --> 00:10:46,196
event, we do something specific


390
00:10:46,196 --> 00:10:47,796
to our app, like maybe increment


391
00:10:47,796 --> 00:10:48,736
a count, so we can display it


392
00:10:48,736 --> 00:10:49,536
live to the user.


393
00:10:50,376 --> 00:10:52,456
We can also grab the stroke


394
00:10:52,456 --> 00:10:53,796
style off of this lap event.


395
00:10:54,286 --> 00:10:55,396
So, the stroke style is stored


396
00:10:55,396 --> 00:10:56,086
as metadata.


397
00:10:56,526 --> 00:10:57,976
We want to get the metadata for


398
00:10:57,976 --> 00:10:59,456
the key swimming stroke style


399
00:10:59,746 --> 00:11:00,756
and then again we can do


400
00:11:00,756 --> 00:11:02,576
something specific like display


401
00:11:02,576 --> 00:11:03,666
the current stroke style back to


402
00:11:03,756 --> 00:11:04,206
the user.


403
00:11:04,406 --> 00:11:07,206
So, as you can see, this can


404
00:11:07,206 --> 00:11:08,646
help you build really detailed


405
00:11:08,646 --> 00:11:09,946
experiences that your user can


406
00:11:10,016 --> 00:11:11,226
access really quickly right from


407
00:11:11,226 --> 00:11:12,326
their wrist.


408
00:11:13,436 --> 00:11:15,046
So, we also have some new


409
00:11:15,046 --> 00:11:16,646
WorkoutEvents this year in iOS


410
00:11:16,646 --> 00:11:17,696
11 and watchOS 4.


411
00:11:18,366 --> 00:11:20,926
So, here's our existing


412
00:11:20,926 --> 00:11:22,246
WorkoutEvent type Enum.


413
00:11:22,796 --> 00:11:24,716
And new this year, we've added


414
00:11:24,716 --> 00:11:26,146
segments and pause and resume.


415
00:11:26,786 --> 00:11:27,826
So, both of these new types have


416
00:11:27,826 --> 00:11:28,786
important implications for


417
00:11:28,786 --> 00:11:30,136
swimming, but they can also be


418
00:11:30,136 --> 00:11:31,256
used for all workout apps in


419
00:11:31,256 --> 00:11:31,546
general.


420
00:11:31,936 --> 00:11:34,766
We'll start with talking about


421
00:11:34,816 --> 00:11:35,266
segments.


422
00:11:35,686 --> 00:11:36,956
So, rather than representing


423
00:11:36,956 --> 00:11:38,006
just a moment in time.


424
00:11:38,336 --> 00:11:39,976
Segments can represent a moment


425
00:11:39,976 --> 00:11:40,806
and a duration.


426
00:11:41,766 --> 00:11:42,856
And so, this has caused us to


427
00:11:42,856 --> 00:11:44,476
update our existing WorkoutEvent


428
00:11:44,476 --> 00:11:46,436
class; whereas previously we had


429
00:11:46,436 --> 00:11:48,806
a date property, we've


430
00:11:48,806 --> 00:11:50,046
deprecated that in favor of a


431
00:11:50,046 --> 00:11:51,136
date interval property.


432
00:11:51,576 --> 00:11:53,176
So, for all previous events


433
00:11:53,176 --> 00:11:54,896
saved to HealthKit, the date


434
00:11:55,206 --> 00:11:56,586
will now be the start date of


435
00:11:56,586 --> 00:11:57,736
the state interval, and they


436
00:11:57,736 --> 00:11:58,896
would have a duration of 0.


437
00:11:59,876 --> 00:12:01,156
For segments, however, you would


438
00:12:01,156 --> 00:12:02,656
have both a start data and a


439
00:12:02,656 --> 00:12:04,366
duration, or equivalently a


440
00:12:04,366 --> 00:12:05,566
start date and an end date on


441
00:12:05,566 --> 00:12:06,316
that date interval.


442
00:12:06,966 --> 00:12:08,316
So, I want to show you a


443
00:12:08,316 --> 00:12:09,546
timeline of what this would look


444
00:12:09,546 --> 00:12:10,636
like for a typical swimming


445
00:12:10,636 --> 00:12:12,236
workout and all of these events


446
00:12:12,236 --> 00:12:13,436
you can get in your application


447
00:12:13,526 --> 00:12:16,406
as they happen with your workout


448
00:12:17,276 --> 00:12:17,586
session.


449
00:12:17,916 --> 00:12:19,436
So, first we start our workout.


450
00:12:20,266 --> 00:12:21,966
And our user begins swimming.


451
00:12:22,486 --> 00:12:23,606
Each of these grey dots


452
00:12:23,606 --> 00:12:25,356
represents a lap event as the


453
00:12:25,356 --> 00:12:26,906
user is swimming if we take a


454
00:12:26,906 --> 00:12:28,246
look at a particular lap event,


455
00:12:28,246 --> 00:12:29,186
you'll see that the type of


456
00:12:29,186 --> 00:12:30,086
event is lap.


457
00:12:30,666 --> 00:12:32,896
It has date interval, in this


458
00:12:32,936 --> 00:12:34,496
case just the start date of 2.


459
00:12:34,776 --> 00:12:36,676
And then it has on the metadata


460
00:12:36,676 --> 00:12:37,336
the stroke style.


461
00:12:37,626 --> 00:12:38,886
So, our user's doing a freestyle


462
00:12:38,946 --> 00:12:39,226
stroke.


463
00:12:39,856 --> 00:12:42,716
The user continues swimming and


464
00:12:42,716 --> 00:12:43,836
decides to switch stroke style


465
00:12:43,836 --> 00:12:44,366
to butterfly.


466
00:12:44,846 --> 00:12:45,716
This will be reflected


467
00:12:45,716 --> 00:12:47,266
immediately in the next lap


468
00:12:47,266 --> 00:12:48,536
event your application receives.


469
00:12:50,016 --> 00:12:51,816
The user might then decide to


470
00:12:51,816 --> 00:12:53,656
pause their workout and you'll


471
00:12:53,656 --> 00:12:54,826
get an event for that pause as


472
00:12:54,826 --> 00:12:55,126
well.


473
00:12:55,286 --> 00:12:56,466
In this case, you have no


474
00:12:56,466 --> 00:12:57,636
metadata on the pause event.


475
00:12:57,896 --> 00:12:59,406
And you also have just the start


476
00:12:59,406 --> 00:13:01,126
date and no duration to your


477
00:13:01,686 --> 00:13:02,766
date interval.


478
00:13:03,296 --> 00:13:04,896
Now, in watchOS 4, HealthKit


479
00:13:04,896 --> 00:13:06,486
will actually generate the auto


480
00:13:06,486 --> 00:13:08,126
set detection for this


481
00:13:08,126 --> 00:13:09,486
particular swimming workout for


482
00:13:09,486 --> 00:13:10,546
the time in which the user was


483
00:13:10,546 --> 00:13:11,596
swimming continuously.


484
00:13:12,186 --> 00:13:14,116
So, this segment event has both


485
00:13:14,116 --> 00:13:16,216
the start date of 0 and it ends


486
00:13:16,216 --> 00:13:18,126
at 3:30 and the user has paused.


487
00:13:18,436 --> 00:13:19,906
And it doesn't have any metadata


488
00:13:19,906 --> 00:13:22,776
on it in this case.


489
00:13:22,876 --> 00:13:23,986
Now, the user resumes their work


490
00:13:23,986 --> 00:13:24,856
out again, and we receive an


491
00:13:24,856 --> 00:13:25,436
event for that.


492
00:13:25,436 --> 00:13:27,906
And they begin swimming back to


493
00:13:27,906 --> 00:13:28,416
freestyle.


494
00:13:29,246 --> 00:13:30,546
Now, at this point we're like


495
00:13:30,546 --> 00:13:32,336
six 30 minutes in and our user


496
00:13:32,336 --> 00:13:33,446
gets tired and they decide to


497
00:13:33,446 --> 00:13:34,886
stop at the edge of the pool and


498
00:13:34,886 --> 00:13:36,306
take a breath, but they forget


499
00:13:36,306 --> 00:13:37,636
to actually pause their workout.


500
00:13:38,196 --> 00:13:40,386
However, HealthKit will still


501
00:13:40,386 --> 00:13:41,646
generate an event for the time


502
00:13:41,646 --> 00:13:42,556
in which the user was swimming


503
00:13:42,556 --> 00:13:43,256
continuously.


504
00:13:43,646 --> 00:13:45,176
So, there will be a segment from


505
00:13:45,176 --> 00:13:46,676
when they resumed the workout to


506
00:13:46,676 --> 00:13:47,636
when they stopped actively


507
00:13:47,636 --> 00:13:48,056
swimming.


508
00:13:48,586 --> 00:13:51,246
Our user begins swimming again,


509
00:13:51,246 --> 00:13:51,846
once they've caught their


510
00:13:51,846 --> 00:13:52,146
breath.


511
00:13:52,946 --> 00:13:55,236
And HealthKit generates a final


512
00:13:55,236 --> 00:13:56,716
segment from when they started


513
00:13:56,716 --> 00:13:57,996
swimming again to the end of the


514
00:13:57,996 --> 00:13:58,366
workout.


515
00:13:59,026 --> 00:14:00,456
So, as you can see, you can use


516
00:14:00,456 --> 00:14:01,506
those to build really rich


517
00:14:01,506 --> 00:14:03,136
swimming experiences, but your


518
00:14:03,136 --> 00:14:04,666
apps can also create segments


519
00:14:04,696 --> 00:14:05,756
that are specific to any other


520
00:14:05,756 --> 00:14:09,366
type of workout app that you


521
00:14:09,816 --> 00:14:09,956
build.


522
00:14:09,956 --> 00:14:11,886
So, the other new WorkoutEvent


523
00:14:11,886 --> 00:14:12,846
type that we have this year is


524
00:14:12,846 --> 00:14:14,136
pause and resume request.


525
00:14:14,476 --> 00:14:16,186
And if you've used the Apple


526
00:14:16,186 --> 00:14:17,306
Watch workout app, you might be


527
00:14:17,306 --> 00:14:18,506
familiar that you can press the


528
00:14:18,506 --> 00:14:19,766
digital crown and side button


529
00:14:19,766 --> 00:14:21,506
simultaneously to pause your


530
00:14:21,506 --> 00:14:22,776
workout without ever interacting


531
00:14:22,776 --> 00:14:24,266
with the screen, and now this


532
00:14:24,266 --> 00:14:25,496
year, your apps can enable that


533
00:14:25,496 --> 00:14:26,246
behavior as well.


534
00:14:26,246 --> 00:14:29,176
So, again it's a quick press of


535
00:14:29,206 --> 00:14:30,516
the digital crown and the side


536
00:14:30,516 --> 00:14:30,816
button.


537
00:14:31,406 --> 00:14:33,696
And it does work in water lock.


538
00:14:33,946 --> 00:14:35,916
So, this is really great for


539
00:14:35,916 --> 00:14:37,356
swimming applications, because


540
00:14:37,356 --> 00:14:38,636
your user doesn't need to


541
00:14:38,636 --> 00:14:39,906
interact with the screen at all,


542
00:14:39,906 --> 00:14:41,266
or disturb their workout, they


543
00:14:41,266 --> 00:14:43,666
can pause just by pressing the


544
00:14:45,436 --> 00:14:45,626
buttons.


545
00:14:46,026 --> 00:14:47,296
Like other events, you'd want to


546
00:14:47,296 --> 00:14:48,476
handle this in your workout


547
00:14:48,476 --> 00:14:50,136
session delegate, however, it's


548
00:14:50,136 --> 00:14:52,036
important to note here that we


549
00:14:52,036 --> 00:14:53,036
will not pause and resume


550
00:14:53,036 --> 00:14:54,666
automatically when this event is


551
00:14:54,666 --> 00:14:55,116
received.


552
00:14:55,296 --> 00:14:56,396
It's up to your application to


553
00:14:56,396 --> 00:14:58,196
actually enable this behavior by


554
00:14:58,196 --> 00:14:59,256
calling pause or resume.


555
00:14:59,966 --> 00:15:01,376
So, let's take a look at what


556
00:15:01,376 --> 00:15:02,816
that would look like to enable


557
00:15:02,816 --> 00:15:03,436
this behavior.


558
00:15:04,066 --> 00:15:06,966
So, first our user is going to


559
00:15:06,966 --> 00:15:08,276
press the digital crown and side


560
00:15:08,276 --> 00:15:09,306
button to indicate they'd like


561
00:15:09,306 --> 00:15:09,776
to pause.


562
00:15:10,706 --> 00:15:12,586
And HealthKit then generates a


563
00:15:12,586 --> 00:15:13,876
pause and resume request.


564
00:15:15,196 --> 00:15:16,716
The application receives this


565
00:15:16,716 --> 00:15:18,006
request, in your workout session


566
00:15:18,006 --> 00:15:19,486
delegate and then you choose to


567
00:15:19,486 --> 00:15:20,116
respond to it.


568
00:15:20,546 --> 00:15:21,386
So, in this case we're going to


569
00:15:21,386 --> 00:15:21,796
respond.


570
00:15:23,286 --> 00:15:24,686
So, based on our state, we


571
00:15:24,686 --> 00:15:25,576
either pause or resume.


572
00:15:25,996 --> 00:15:27,136
If we're currently running, we'd


573
00:15:27,136 --> 00:15:28,396
want to pause and if we're


574
00:15:28,396 --> 00:15:29,566
currently paused, we'd want to


575
00:15:29,566 --> 00:15:29,936
resume.


576
00:15:30,826 --> 00:15:33,426
When HealthKit receives that, it


577
00:15:33,616 --> 00:15:34,986
then generates an event for the


578
00:15:34,986 --> 00:15:36,546
pause or the resume itself.


579
00:15:36,956 --> 00:15:38,496
And finally, that pause or


580
00:15:38,496 --> 00:15:40,306
resume event is also received in


581
00:15:40,306 --> 00:15:41,306
your workout session delegate.


582
00:15:42,446 --> 00:15:43,776
We think this is a really great


583
00:15:43,776 --> 00:15:45,276
feature to provide consistent


584
00:15:45,276 --> 00:15:46,636
experiences to users using


585
00:15:46,636 --> 00:15:47,366
different workout apps.


586
00:15:47,846 --> 00:15:49,476
And we hope that you adopt it to


587
00:15:49,546 --> 00:15:53,816
continue that behavior.


588
00:15:54,616 --> 00:15:56,646
So, another new, exciting


589
00:15:56,646 --> 00:15:57,696
workout API this year we've


590
00:15:57,696 --> 00:15:59,846
introduced is workout routes.


591
00:16:00,176 --> 00:16:01,596
Users can use this to track


592
00:16:01,596 --> 00:16:02,516
their location throughout their


593
00:16:02,516 --> 00:16:03,106
workout.


594
00:16:03,106 --> 00:16:04,156
And people have really loved


595
00:16:04,156 --> 00:16:05,076
doing this with the Apple Watch


596
00:16:05,076 --> 00:16:05,666
series 2.


597
00:16:07,066 --> 00:16:08,276
People have used it for things


598
00:16:08,276 --> 00:16:10,016
as ambitious as marathons or


599
00:16:10,016 --> 00:16:11,806
maybe just a casual jog around


600
00:16:11,806 --> 00:16:12,506
Golden Gate Park.


601
00:16:12,726 --> 00:16:14,496
So, let's start with how your


602
00:16:14,496 --> 00:16:16,066
applications can read this data


603
00:16:16,236 --> 00:16:16,826
from HealthKit.


604
00:16:18,196 --> 00:16:20,326
So, we have a new datatype which


605
00:16:20,326 --> 00:16:21,706
is HKWorkoutRouteType.


606
00:16:22,886 --> 00:16:23,986
And it's important that this


607
00:16:23,986 --> 00:16:25,166
type requires additional


608
00:16:25,166 --> 00:16:25,986
authorization.


609
00:16:26,096 --> 00:16:27,126
And this is really on two


610
00:16:27,126 --> 00:16:27,546
fronts.


611
00:16:27,996 --> 00:16:29,266
The first is that even if you


612
00:16:29,266 --> 00:16:30,836
have access to read and write


613
00:16:30,836 --> 00:16:32,186
workouts from HealthKit, you


614
00:16:32,186 --> 00:16:33,616
need additional authorization to


615
00:16:33,616 --> 00:16:34,496
read or write WorkoutRoutes.


616
00:16:35,226 --> 00:16:36,606
In addition to actually get the


617
00:16:36,606 --> 00:16:38,496
user's location you would want


618
00:16:38,496 --> 00:16:40,006
permission or authorization from


619
00:16:40,006 --> 00:16:41,926
Core Location to view the user's


620
00:16:41,926 --> 00:16:42,446
location.


621
00:16:43,776 --> 00:16:45,676
So, HealthKit models


622
00:16:45,676 --> 00:16:46,866
WorkoutRoutes as an array of


623
00:16:47,016 --> 00:16:48,186
CLLocation, which is Core


624
00:16:48,186 --> 00:16:49,106
Location Location.


625
00:16:49,606 --> 00:16:51,196
Each location has latitude and


626
00:16:51,196 --> 00:16:52,446
longitude as well as some other


627
00:16:52,446 --> 00:16:53,846
data about the location at that


628
00:16:53,846 --> 00:16:54,976
moment including speed.


629
00:16:55,536 --> 00:16:58,056
It's important to know that


630
00:16:58,056 --> 00:16:59,316
these datasets can be quite


631
00:16:59,316 --> 00:16:59,926
large.


632
00:17:00,296 --> 00:17:01,616
So, in marathon example, it can


633
00:17:01,616 --> 00:17:02,686
be many thousands of data


634
00:17:02,686 --> 00:17:03,096
points.


635
00:17:03,706 --> 00:17:04,675
Because of this, we've


636
00:17:04,675 --> 00:17:07,846
introduced a new query


637
00:17:07,846 --> 00:17:09,076
specifically for WorkoutRoutes,


638
00:17:09,236 --> 00:17:10,695
which is HKWorkoutRouteQuery.


639
00:17:12,316 --> 00:17:13,955
This returns location data in


640
00:17:13,955 --> 00:17:15,026
batches, rather than all at


641
00:17:15,026 --> 00:17:15,226
once.


642
00:17:15,316 --> 00:17:16,646
So, you don't have to hold it


643
00:17:16,846 --> 00:17:18,556
all in memory at one time.


644
00:17:19,195 --> 00:17:20,866
So, let's go over what this


645
00:17:20,866 --> 00:17:22,356
looks like in code to read a


646
00:17:22,356 --> 00:17:23,406
WorkoutRoute from HealthKit.


647
00:17:24,536 --> 00:17:25,616
So, we're going to assume we


648
00:17:25,616 --> 00:17:26,746
already have the workout that


649
00:17:26,746 --> 00:17:27,976
we're interested in saved as a


650
00:17:27,976 --> 00:17:28,656
workout object.


651
00:17:30,086 --> 00:17:32,176
So, first we create the type we


652
00:17:32,176 --> 00:17:33,936
want by calling WorkoutRoute on


653
00:17:33,936 --> 00:17:34,866
HKSeriesType.


654
00:17:35,306 --> 00:17:37,306
And then we create a predicate


655
00:17:37,346 --> 00:17:38,916
for the objects associated with


656
00:17:38,916 --> 00:17:39,396
our workout.


657
00:17:39,846 --> 00:17:42,596
Next, we want to use an


658
00:17:42,596 --> 00:17:43,796
HKSampleQuery.


659
00:17:44,066 --> 00:17:45,446
So, this is an existing query


660
00:17:45,446 --> 00:17:46,566
that just returns samples of a


661
00:17:46,566 --> 00:17:47,186
certain type.


662
00:17:47,186 --> 00:17:48,566
And we're going to pass in our


663
00:17:48,566 --> 00:17:50,506
WorkoutRoute type as well as our


664
00:17:50,506 --> 00:17:51,326
workout predicate.


665
00:17:51,796 --> 00:17:53,256
We don't have any limit on the


666
00:17:53,256 --> 00:17:54,696
samples we want to receive back


667
00:17:54,956 --> 00:17:55,596
in this case.


668
00:17:55,936 --> 00:17:56,856
And we don't have any sort


669
00:17:56,856 --> 00:17:57,356
descriptors.


670
00:17:57,906 --> 00:18:00,626
So, this will give us back the


671
00:18:00,626 --> 00:18:02,206
query itself as well as the


672
00:18:02,206 --> 00:18:03,386
samples we're interested in and


673
00:18:03,386 --> 00:18:04,926
potentially an error.


674
00:18:05,756 --> 00:18:07,006
So, the first step here, is


675
00:18:07,006 --> 00:18:07,826
we're going to guard that the


676
00:18:07,826 --> 00:18:09,256
samples that we got back are


677
00:18:09,256 --> 00:18:10,726
indeed HKWorkoutRoutes.


678
00:18:11,226 --> 00:18:13,736
And now, the second step is to


679
00:18:13,736 --> 00:18:14,986
actually query for the raw


680
00:18:14,986 --> 00:18:17,686
location data from each route.


681
00:18:18,166 --> 00:18:19,246
So, here's where the new


682
00:18:19,246 --> 00:18:21,126
HKWorkoutRouteQuery comes in.


683
00:18:21,376 --> 00:18:23,606
It takes the WorkoutRoute and it


684
00:18:23,606 --> 00:18:24,956
then returns that query.


685
00:18:25,486 --> 00:18:27,566
The raw locations, a Boolean to


686
00:18:27,566 --> 00:18:28,556
indicate whether it's done


687
00:18:28,556 --> 00:18:30,106
batching the data to you, and


688
00:18:30,106 --> 00:18:31,626
potentially an error.


689
00:18:32,596 --> 00:18:33,896
So, here we'd want to do


690
00:18:33,896 --> 00:18:34,656
something specific to our


691
00:18:34,656 --> 00:18:36,236
application like add the


692
00:18:36,236 --> 00:18:37,096
location data to a map.


693
00:18:37,506 --> 00:18:39,136
And note that this block will


694
00:18:39,136 --> 00:18:40,136
probably be called multiple


695
00:18:40,136 --> 00:18:41,556
times as the data is returned to


696
00:18:41,556 --> 00:18:42,266
you in batches.


697
00:18:43,306 --> 00:18:45,386
Finally, we execute this by


698
00:18:45,386 --> 00:18:46,836
calling execute on the queries,


699
00:18:47,206 --> 00:18:50,606
or calling the execute method on


700
00:18:50,606 --> 00:18:51,736
healthStore and passing these


701
00:18:51,736 --> 00:18:52,076
queries.


702
00:18:53,246 --> 00:18:54,946
So, now let's go over how your


703
00:18:54,946 --> 00:18:56,496
applications can actually build


704
00:18:56,496 --> 00:18:57,566
and save your own workout


705
00:18:57,566 --> 00:18:57,846
routes.


706
00:18:59,066 --> 00:19:00,756
So, we use a builder model


707
00:19:00,756 --> 00:19:02,226
called HKWorkoutRouteBuilder.


708
00:19:02,696 --> 00:19:04,036
And the lifetime of this model


709
00:19:04,036 --> 00:19:05,076
is that you want one builder


710
00:19:05,076 --> 00:19:06,476
object per route that you're


711
00:19:06,476 --> 00:19:07,826
keeping track of.


712
00:19:08,976 --> 00:19:10,996
So, location data is added


713
00:19:10,996 --> 00:19:12,466
asynchronously and it's sorted


714
00:19:12,466 --> 00:19:13,766
by date, by HealthKit when the


715
00:19:13,766 --> 00:19:14,826
series is finalized.


716
00:19:15,176 --> 00:19:16,086
So, you don't need to worry


717
00:19:16,086 --> 00:19:17,446
about the order in which you add


718
00:19:18,136 --> 00:19:19,696
the data.


719
00:19:19,776 --> 00:19:21,036
Also, the workout needs to be


720
00:19:21,036 --> 00:19:21,996
saved before the route.


721
00:19:22,056 --> 00:19:23,766
So, let's go over what the


722
00:19:23,886 --> 00:19:25,246
timeline would look like if you


723
00:19:25,246 --> 00:19:26,746
have a workout session and you


724
00:19:26,746 --> 00:19:27,976
want to keep track of the route


725
00:19:27,976 --> 00:19:29,256
for it and save it to HealthKit.


726
00:19:29,336 --> 00:19:30,946
So, first we're going to create


727
00:19:30,946 --> 00:19:31,986
our WorkoutRouteBuilder.


728
00:19:32,436 --> 00:19:35,696
Next, we want to actually start


729
00:19:35,696 --> 00:19:36,976
our workout session as we've


730
00:19:36,976 --> 00:19:37,366
shown.


731
00:19:39,296 --> 00:19:40,856
Then our workout is active.


732
00:19:40,856 --> 00:19:43,616
And we want to begin observing


733
00:19:43,616 --> 00:19:44,266
location data.


734
00:19:44,786 --> 00:19:46,086
And this is where you' would be


735
00:19:46,086 --> 00:19:47,416
observing location data from


736
00:19:47,416 --> 00:19:48,886
Core Location, the location


737
00:19:48,886 --> 00:19:50,466
framework on iOS and watchOS.


738
00:19:51,256 --> 00:19:53,596
You then want to add those


739
00:19:53,596 --> 00:19:54,766
locations to your builder.


740
00:19:54,766 --> 00:19:57,026
And this process is ongoing.


741
00:19:57,026 --> 00:19:58,096
You want to do it many times


742
00:19:58,096 --> 00:19:59,426
throughout your workout.


743
00:20:00,576 --> 00:20:02,006
Finally, you'd want to end your


744
00:20:02,006 --> 00:20:03,456
session and save the workout.


745
00:20:03,456 --> 00:20:05,206
And then the last step is to


746
00:20:05,206 --> 00:20:07,056
finish your WorkoutRoute, which


747
00:20:07,056 --> 00:20:07,936
saves it into HealthKit.


748
00:20:08,606 --> 00:20:09,806
So, let's take a look at the


749
00:20:09,806 --> 00:20:11,006
same thing in code.


750
00:20:11,556 --> 00:20:13,536
You're going to start by


751
00:20:13,666 --> 00:20:15,396
creating your RouteBuilder and


752
00:20:15,396 --> 00:20:16,176
adding locations.


753
00:20:16,686 --> 00:20:17,736
So, we create our builder,


754
00:20:18,006 --> 00:20:20,206
passing in the healthStore and a


755
00:20:20,206 --> 00:20:20,706
device.


756
00:20:20,746 --> 00:20:22,146
In this case, nil will default


757
00:20:22,146 --> 00:20:23,046
to the local device.


758
00:20:24,946 --> 00:20:26,326
You then add locations as the


759
00:20:26,326 --> 00:20:27,356
workout is ongoing.


760
00:20:27,696 --> 00:20:28,856
So, presumably this snippet of


761
00:20:28,856 --> 00:20:30,216
code is called multiple times.


762
00:20:30,896 --> 00:20:32,526
And here I'm calling some local


763
00:20:32,526 --> 00:20:34,176
method fetchRecentLocations that


764
00:20:34,176 --> 00:20:35,076
returns me a list of


765
00:20:35,146 --> 00:20:37,076
CLLocations, and then inserting


766
00:20:37,076 --> 00:20:39,176
those locations into the


767
00:20:39,796 --> 00:20:40,106
builder.


768
00:20:40,106 --> 00:20:41,076
Because I'm a responsible


769
00:20:41,076 --> 00:20:42,056
developer, I'm going to handle


770
00:20:42,056 --> 00:20:42,646
all my errors.


771
00:20:44,056 --> 00:20:45,206
Step three.


772
00:20:45,436 --> 00:20:46,676
So, this is after our workout is


773
00:20:46,676 --> 00:20:47,066
saved.


774
00:20:47,416 --> 00:20:48,376
We'd want to finish the route.


775
00:20:49,116 --> 00:20:50,666
And this takes in the workout


776
00:20:50,666 --> 00:20:51,576
objects that we've already


777
00:20:51,576 --> 00:20:53,426
saved, as well as any metadata


778
00:20:53,426 --> 00:20:57,656
that we want to be on the route.


779
00:20:58,256 --> 00:21:00,036
So, next I'd like to demo adding


780
00:21:00,036 --> 00:21:01,596
WorkoutRoutes to an application


781
00:21:01,596 --> 00:21:01,986
to you guys.


782
00:21:02,686 --> 00:21:04,576
So, if you attended our talk or


783
00:21:04,576 --> 00:21:06,396
watched online last year, you'll


784
00:21:06,396 --> 00:21:07,866
remember that Speedy Sloth is a


785
00:21:07,866 --> 00:21:10,016
super cool workout application


786
00:21:10,016 --> 00:21:10,936
for sloth lovers.


787
00:21:11,166 --> 00:21:12,126
And today we're going to add


788
00:21:12,126 --> 00:21:13,646
location routes to it.


789
00:21:19,986 --> 00:21:20,806
Great. So, I'm going to switch


790
00:21:20,806 --> 00:21:22,176
over to XCode and you'll see


791
00:21:22,176 --> 00:21:23,376
here that I have Speedy Sloth


792
00:21:23,376 --> 00:21:23,746
running.


793
00:21:24,396 --> 00:21:25,906
So, Speedy Sloth is a WatchKit


794
00:21:26,006 --> 00:21:27,606
app that lets you configure your


795
00:21:27,606 --> 00:21:29,816
workout and then run it and show


796
00:21:29,816 --> 00:21:30,816
you some live metrics.


797
00:21:31,066 --> 00:21:32,326
And it saves the workouts into


798
00:21:32,326 --> 00:21:32,796
HealthKit.


799
00:21:33,216 --> 00:21:35,076
So, I'll start here by just


800
00:21:35,076 --> 00:21:36,116
running Speedy Sloth so you have


801
00:21:36,116 --> 00:21:37,076
an idea of what it looks like


802
00:21:37,076 --> 00:21:37,516
currently.


803
00:21:37,936 --> 00:21:39,276
So, you'll see that we keep


804
00:21:39,276 --> 00:21:40,326
track of the duration of the


805
00:21:40,326 --> 00:21:40,776
workout.


806
00:21:41,386 --> 00:21:43,296
I can pause or resume.


807
00:21:44,016 --> 00:21:46,036
And we keep track of the current


808
00:21:46,086 --> 00:21:47,496
totals of your metrics as the


809
00:21:47,496 --> 00:21:48,376
workout is ongoing.


810
00:21:48,846 --> 00:21:50,316
So, we have calories coming in,


811
00:21:50,586 --> 00:21:51,426
as well as meters.


812
00:21:52,166 --> 00:21:54,126
So, I'll stop that.


813
00:21:55,566 --> 00:21:57,206
And we saw a summary there of


814
00:21:57,206 --> 00:21:57,676
our workout.


815
00:21:58,626 --> 00:22:00,466
So, switching over to XCode, I


816
00:22:00,466 --> 00:22:01,246
have this class,


817
00:22:01,546 --> 00:22:02,516
healthStoreManager.


818
00:22:03,026 --> 00:22:03,966
So, this is the class that


819
00:22:03,966 --> 00:22:05,396
handles all of our interactions


820
00:22:05,706 --> 00:22:07,146
with the HKhealthStore, which


821
00:22:07,216 --> 00:22:08,496
saves and reads data from


822
00:22:09,146 --> 00:22:09,366
HealthKit.


823
00:22:10,316 --> 00:22:16,426
So, what I want to do first, is


824
00:22:16,426 --> 00:22:18,256
implement the CLLocation Manager


825
00:22:18,256 --> 00:22:19,286
Delegate Protocol.


826
00:22:19,536 --> 00:22:20,796
This will allow me to receive


827
00:22:20,796 --> 00:22:22,676
locations from Core Location.


828
00:22:23,256 --> 00:22:27,216
In order to track these


829
00:22:27,216 --> 00:22:28,526
locations, I'll need some


830
00:22:28,526 --> 00:22:29,096
properties.


831
00:22:29,776 --> 00:22:32,606
So, the first of these is going


832
00:22:32,606 --> 00:22:34,336
to be the HKWorkoutRouteBuilder


833
00:22:34,336 --> 00:22:35,126
that we just went over.


834
00:22:36,706 --> 00:22:38,586
Next, I'll also need a location


835
00:22:38,586 --> 00:22:40,936
manager from Core Location to


836
00:22:40,936 --> 00:22:45,646
receive the updates from them.


837
00:22:45,856 --> 00:22:47,376
Now, I want to actually start


838
00:22:47,376 --> 00:22:48,606
accumulating location data.


839
00:22:49,056 --> 00:22:50,996
So, we have this method, start


840
00:22:50,996 --> 00:22:51,736
accumulating data.


841
00:22:52,406 --> 00:22:53,616
And this is called when our


842
00:22:53,616 --> 00:22:55,126
workout session changes state


843
00:22:55,406 --> 00:22:56,896
from not started to running.


844
00:22:57,436 --> 00:22:58,356
You can see here that I was


845
00:22:58,356 --> 00:23:00,046
already using this place to


846
00:23:00,046 --> 00:23:01,126
start walking and running


847
00:23:01,126 --> 00:23:02,336
queries, which is what's


848
00:23:02,426 --> 00:23:05,356
updating that distance metric,


849
00:23:05,616 --> 00:23:06,906
as well as the


850
00:23:06,906 --> 00:23:08,946
ActiveEnergyBurnedQuery which is


851
00:23:09,116 --> 00:23:10,606
going to be showing the calorie


852
00:23:10,606 --> 00:23:10,946
metric.


853
00:23:11,196 --> 00:23:13,016
So, here's a good place to also


854
00:23:13,176 --> 00:23:15,796
start accumulating location


855
00:23:16,606 --> 00:23:16,736
data.


856
00:23:17,916 --> 00:23:19,996
So, here I have a new method,


857
00:23:19,996 --> 00:23:21,356
startAccumulatingLocationData.


858
00:23:21,796 --> 00:23:26,106
And I'm going to add in the


859
00:23:26,106 --> 00:23:26,996
implementation here.


860
00:23:27,496 --> 00:23:31,986
First, I want to guard that he


861
00:23:31,986 --> 00:23:33,636
location services are enabled,


862
00:23:33,836 --> 00:23:34,686
otherwise return.


863
00:23:35,236 --> 00:23:37,706
And then I want to create my


864
00:23:37,806 --> 00:23:39,316
CLLocationManager object.


865
00:23:40,326 --> 00:23:41,926
I'm going to set the delegate of


866
00:23:41,926 --> 00:23:43,286
the object to be myself, so I


867
00:23:43,286 --> 00:23:44,956
can receive callbacks for the


868
00:23:44,956 --> 00:23:46,116
locations that are incoming.


869
00:23:46,716 --> 00:23:49,246
I'm going to set the


870
00:23:49,246 --> 00:23:51,716
desiredAccuracy to be the best


871
00:23:51,816 --> 00:23:52,716
possible accuracy.


872
00:23:53,206 --> 00:23:54,386
This is a good idea since we're


873
00:23:54,386 --> 00:23:55,366
going to be displaying this data


874
00:23:55,366 --> 00:23:55,766
on a map.


875
00:23:55,766 --> 00:23:57,216
So, we want the most accurate


876
00:23:57,216 --> 00:23:58,746
data possible to show visually


877
00:23:58,746 --> 00:23:59,286
to our user.


878
00:23:59,816 --> 00:24:03,536
Next, I'm going to set allows


879
00:24:03,536 --> 00:24:05,016
background updates to be true.


880
00:24:05,596 --> 00:24:06,516
And so, this will allow us to


881
00:24:06,516 --> 00:24:07,876
continue to receive locations


882
00:24:07,876 --> 00:24:08,816
while we're in the background.


883
00:24:09,456 --> 00:24:11,016
So, in order for this to work,


884
00:24:11,016 --> 00:24:12,096
we'd also need to setup some


885
00:24:12,166 --> 00:24:13,436
keys in our info.keylist.


886
00:24:13,716 --> 00:24:14,626
I'm not going to demo that


887
00:24:14,626 --> 00:24:16,126
explicitly, but we do have


888
00:24:16,126 --> 00:24:17,686
Speedy Sloth as a sample app


889
00:24:17,746 --> 00:24:19,256
that you can check out at the


890
00:24:19,256 --> 00:24:20,226
website we'll show at the end of


891
00:24:20,226 --> 00:24:20,706
the session.


892
00:24:22,996 --> 00:24:24,066
And finally, from the Core


893
00:24:24,066 --> 00:24:25,826
Location side, I want to start


894
00:24:25,826 --> 00:24:26,786
updating locations.


895
00:24:27,466 --> 00:24:28,916
And all I need to do on the


896
00:24:28,916 --> 00:24:30,466
HealthKit side is simply


897
00:24:30,466 --> 00:24:31,316
instantiate my


898
00:24:31,316 --> 00:24:33,506
HKWorkoutRouteBuilder, passing


899
00:24:33,506 --> 00:24:34,776
in the healthStore variable,


900
00:24:34,776 --> 00:24:37,036
which is a HK healthStore, as


901
00:24:37,036 --> 00:24:40,136
well as a nil device.


902
00:24:40,136 --> 00:24:42,206
Awesome. So, now we have all the


903
00:24:42,206 --> 00:24:43,316
variables we need to track


904
00:24:43,316 --> 00:24:43,946
location.


905
00:24:44,236 --> 00:24:45,336
We've set everything up.


906
00:24:45,656 --> 00:24:46,876
Now, we actually need to handle


907
00:24:46,876 --> 00:24:49,236
those locations as they come in.


908
00:24:49,596 --> 00:24:53,486
And to do that we want to


909
00:24:53,486 --> 00:24:55,366
implement the function from Core


910
00:24:55,366 --> 00:24:56,586
Location Manager Delegate,


911
00:24:57,046 --> 00:24:58,156
locationManager


912
00:24:58,276 --> 00:24:59,426
didUpdateLocations.


913
00:24:59,836 --> 00:25:01,746
So, this passes us the manager


914
00:25:01,746 --> 00:25:04,176
object itself, as well as the


915
00:25:04,176 --> 00:25:05,906
list of CLLocation.


916
00:25:06,416 --> 00:25:09,546
So, first, I'm going to filter


917
00:25:09,546 --> 00:25:10,726
the locations that come in.


918
00:25:10,936 --> 00:25:12,776
This is a good idea depending on


919
00:25:12,776 --> 00:25:14,356
the exact purpose of your app.


920
00:25:14,356 --> 00:25:15,656
I'm going to do a really simple


921
00:25:15,656 --> 00:25:17,656
filter here, in some cases you


922
00:25:17,656 --> 00:25:18,446
might want to instead do


923
00:25:18,446 --> 00:25:19,446
something like smooth the route,


924
00:25:19,446 --> 00:25:21,286
but for this demo, I'll just do


925
00:25:21,286 --> 00:25:21,956
a simple filter.


926
00:25:22,316 --> 00:25:23,186
So, I'm checking that the


927
00:25:23,186 --> 00:25:25,306
horizontal accuracy is less than


928
00:25:25,306 --> 00:25:26,396
or equal to the nearest 10


929
00:25:26,396 --> 00:25:26,756
meters.


930
00:25:27,916 --> 00:25:29,346
It's also important to do this


931
00:25:29,346 --> 00:25:30,606
because even though we set the


932
00:25:30,606 --> 00:25:32,006
desired accuracy on the Core


933
00:25:32,006 --> 00:25:33,566
Location Manager, that is not


934
00:25:33,566 --> 00:25:34,256
guaranteed.


935
00:25:34,696 --> 00:25:37,756
Next, I want to check that


936
00:25:37,756 --> 00:25:39,366
filter locations isn't empty


937
00:25:39,366 --> 00:25:40,186
otherwise return.


938
00:25:40,726 --> 00:25:44,736
And finally, I'm going to insert


939
00:25:44,736 --> 00:25:46,756
this data into the


940
00:25:46,756 --> 00:25:48,456
WorkoutRouteBuilder, passing in


941
00:25:48,456 --> 00:25:49,996
the filtered locations and


942
00:25:49,996 --> 00:25:52,106
receiving back successfully and


943
00:25:52,256 --> 00:25:52,816
an error.


944
00:25:53,636 --> 00:25:55,416
If it's not successful, I'm just


945
00:25:55,416 --> 00:25:58,276
going to print the error here.


946
00:25:58,276 --> 00:26:00,026
Awesome. So, now our workout


947
00:26:00,026 --> 00:26:01,586
session is ongoing, we're


948
00:26:01,586 --> 00:26:03,126
receiving locations from Core


949
00:26:03,126 --> 00:26:04,636
Location and inserting them into


950
00:26:04,636 --> 00:26:05,176
our builder.


951
00:26:05,176 --> 00:26:06,386
Now, we want to make sure we


952
00:26:06,426 --> 00:26:07,986
clean up after ourselves, once


953
00:26:07,986 --> 00:26:09,036
the user has ended their


954
00:26:09,036 --> 00:26:09,436
workout.


955
00:26:09,946 --> 00:26:12,466
So, this method,


956
00:26:12,596 --> 00:26:13,906
stopAccumulatingData is


957
00:26:13,906 --> 00:26:15,056
similarly called when the


958
00:26:15,056 --> 00:26:16,316
workout session changes state.


959
00:26:16,786 --> 00:26:18,076
In this case, when it changes


960
00:26:18,076 --> 00:26:19,826
state from running, or from


961
00:26:19,826 --> 00:26:21,216
pause, to ended.


962
00:26:22,186 --> 00:26:23,496
And so, here I was previously


963
00:26:23,496 --> 00:26:25,106
going through my healthStore


964
00:26:25,106 --> 00:26:26,646
queries and stopping them as


965
00:26:26,646 --> 00:26:27,726
well as removing the active


966
00:26:27,726 --> 00:26:29,396
queries on.


967
00:26:29,396 --> 00:26:30,336
So, here's where I'll want to


968
00:26:30,336 --> 00:26:32,426
also stop receiving location


969
00:26:32,466 --> 00:26:32,916
updates.


970
00:26:33,336 --> 00:26:34,496
So, I just called


971
00:26:34,696 --> 00:26:36,356
stopUpdatingLocation on the


972
00:26:36,356 --> 00:26:37,496
CLLocationMangaer.


973
00:26:38,046 --> 00:26:40,976
Awesome. Now, the last step is


974
00:26:40,976 --> 00:26:42,816
to actually save this data into


975
00:26:42,816 --> 00:26:43,366
HealthKit.


976
00:26:43,886 --> 00:26:45,576
So, I have this method,


977
00:26:45,836 --> 00:26:48,756
saveWorkout and you'll see it


978
00:26:48,756 --> 00:26:50,426
takes in the session as well as


979
00:26:50,426 --> 00:26:51,156
a start and an end date.


980
00:26:51,906 --> 00:26:53,146
So, first I want to configure


981
00:26:53,146 --> 00:26:54,886
some metadata to save with my


982
00:26:54,886 --> 00:26:55,286
workout.


983
00:26:55,696 --> 00:26:57,916
In this case, what I'm doing is


984
00:26:57,916 --> 00:26:59,286
I'm checking whether the


985
00:26:59,286 --> 00:27:01,266
location type is indoor, and


986
00:27:01,266 --> 00:27:03,136
setting the metadata key indoor


987
00:27:03,136 --> 00:27:03,736
to that value.


988
00:27:03,736 --> 00:27:07,386
Now, I actually want to create


989
00:27:07,386 --> 00:27:09,156
my workout object with the


990
00:27:09,156 --> 00:27:11,246
activity type from the workout


991
00:27:11,246 --> 00:27:12,006
configuration.


992
00:27:12,786 --> 00:27:14,136
The start and the end date.


993
00:27:14,136 --> 00:27:16,256
The list of workout events that


994
00:27:16,256 --> 00:27:17,386
I've saved elsewhere in Speedy


995
00:27:17,386 --> 00:27:17,686
Sloth.


996
00:27:18,366 --> 00:27:20,346
The total energy burned, the


997
00:27:20,346 --> 00:27:22,036
total distance, as well as the


998
00:27:22,036 --> 00:27:25,526
metadata I just created.


999
00:27:25,586 --> 00:27:27,296
Now, finally I want to save the


1000
00:27:27,296 --> 00:27:27,706
workout.


1001
00:27:28,436 --> 00:27:29,646
And if the workout save was


1002
00:27:29,646 --> 00:27:30,786
successful, you'll see here that


1003
00:27:30,786 --> 00:27:32,036
we are already adding samples to


1004
00:27:32,036 --> 00:27:32,426
workout.


1005
00:27:32,706 --> 00:27:33,506
So, that was actually


1006
00:27:33,506 --> 00:27:35,216
associating those distance and


1007
00:27:35,216 --> 00:27:36,356
calorie samples with the


1008
00:27:36,356 --> 00:27:36,716
workout.


1009
00:27:37,066 --> 00:27:38,646
So, here's a good place to also


1010
00:27:38,646 --> 00:27:39,666
finish the WorkoutRoute.


1011
00:27:39,666 --> 00:27:44,076
So, I'm going to add this


1012
00:27:44,076 --> 00:27:46,806
snippet of code in here, which


1013
00:27:46,806 --> 00:27:47,976
calls FinishRoute on the


1014
00:27:47,976 --> 00:27:49,486
Builder, passing in the workout


1015
00:27:49,486 --> 00:27:51,626
as well as no metadata for the


1016
00:27:51,626 --> 00:27:52,596
route itself.


1017
00:27:53,836 --> 00:27:55,436
And finally, just check whether


1018
00:27:55,436 --> 00:27:57,366
or not there's an error.


1019
00:27:57,676 --> 00:27:59,246
Awesome. So, let's run this.


1020
00:28:12,666 --> 00:28:13,766
So, you'll note that I also did


1021
00:28:13,766 --> 00:28:15,136
not show in this demo actually


1022
00:28:15,136 --> 00:28:16,486
receiving authorization for the


1023
00:28:16,486 --> 00:28:17,266
HealthKit types.


1024
00:28:17,746 --> 00:28:18,966
I've already done that in the


1025
00:28:19,056 --> 00:28:20,056
iOS component of the app.


1026
00:28:20,456 --> 00:28:21,306
So, be sure to check out how to


1027
00:28:21,306 --> 00:28:22,296
do that in our sample code as


1028
00:28:22,296 --> 00:28:22,476
well.


1029
00:28:23,656 --> 00:28:25,306
So, here we can start another


1030
00:28:25,306 --> 00:28:27,806
outdoor walking workout, and see


1031
00:28:27,806 --> 00:28:28,966
again that we have our metrics


1032
00:28:28,966 --> 00:28:29,216
tracked.


1033
00:28:29,536 --> 00:28:31,596
The duration, and the calories


1034
00:28:31,596 --> 00:28:32,716
and meters that are incoming.


1035
00:28:33,296 --> 00:28:34,436
Maybe we want to throw in a


1036
00:28:34,436 --> 00:28:35,926
marker if we've seen a really


1037
00:28:35,926 --> 00:28:36,446
cool sloth.


1038
00:28:37,146 --> 00:28:39,246
All right, finally, we're going


1039
00:28:39,246 --> 00:28:40,746
to stop our workout and see our


1040
00:28:40,746 --> 00:28:41,356
summary.


1041
00:28:42,096 --> 00:28:44,216
And then, I'm going to open


1042
00:28:44,216 --> 00:28:46,006
HealthKit to show you that this


1043
00:28:46,186 --> 00:28:47,036
data has been saved.


1044
00:28:47,406 --> 00:28:49,426
So, I'll open the Health app.


1045
00:28:51,276 --> 00:28:52,806
And here we see a list of


1046
00:28:52,806 --> 00:28:53,306
workouts.


1047
00:28:53,306 --> 00:28:56,536
So, in the most recent one,


1048
00:28:56,596 --> 00:28:58,136
we'll see here we have workout


1049
00:28:58,136 --> 00:28:58,656
route saved.


1050
00:28:59,456 --> 00:29:01,756
I can click in and look about


1051
00:29:01,756 --> 00:29:02,496
this map view.


1052
00:29:03,516 --> 00:29:04,906
And now other applications that


1053
00:29:04,906 --> 00:29:06,546
have access to WorkoutRoute can


1054
00:29:06,546 --> 00:29:08,146
also receive this data and


1055
00:29:08,146 --> 00:29:09,576
analyze it, or do anything else


1056
00:29:09,616 --> 00:29:10,846
that they see fit.


1057
00:29:13,096 --> 00:29:15,186
So, that's how easy it is to add


1058
00:29:15,186 --> 00:29:16,586
WorkoutRoutes to your existing


1059
00:29:16,586 --> 00:29:17,206
application.


1060
00:29:17,486 --> 00:29:18,526
I'm going to switch back to the


1061
00:29:18,526 --> 00:29:22,706
slides, and then I want to


1062
00:29:22,936 --> 00:29:24,256
summarize what I've just done.


1063
00:29:24,876 --> 00:29:26,106
So, I first implemented the


1064
00:29:26,106 --> 00:29:27,346
CLLocationManager delegate


1065
00:29:27,346 --> 00:29:27,966
protocol.


1066
00:29:28,286 --> 00:29:29,716
I kept around some variables to


1067
00:29:29,716 --> 00:29:31,116
keep track of the state, both


1068
00:29:31,116 --> 00:29:32,376
from HealthKit and from Core


1069
00:29:32,376 --> 00:29:32,956
Location.


1070
00:29:33,696 --> 00:29:35,386
I set up the Location Manager.


1071
00:29:35,836 --> 00:29:37,746
I made sure to insert the


1072
00:29:37,746 --> 00:29:39,486
location data I got and Location


1073
00:29:39,486 --> 00:29:41,726
Manager did update location into


1074
00:29:41,726 --> 00:29:42,686
the WorkoutRouteBuilder.


1075
00:29:43,456 --> 00:29:45,006
I made sure to stop updating


1076
00:29:45,006 --> 00:29:46,056
location when I finished.


1077
00:29:46,536 --> 00:29:47,976
And then finally after the


1078
00:29:47,976 --> 00:29:49,746
workout was saved I finished the


1079
00:29:49,746 --> 00:29:50,326
WorkoutRoute.


1080
00:29:52,586 --> 00:29:53,746
So, next I want to hand it over


1081
00:29:53,746 --> 00:29:55,126
to my colleague Michael, who's


1082
00:29:55,126 --> 00:29:56,006
going to talk to you about a new


1083
00:29:56,006 --> 00:29:57,266
feature called Sync Identifiers.


1084
00:29:57,546 --> 00:29:57,846
Thank you.


1085
00:29:58,516 --> 00:30:06,006
[ Applause ]


1086
00:30:06,506 --> 00:30:07,046
>> Thanks Alexa.


1087
00:30:07,696 --> 00:30:09,586
Hi. I'm Michael and I'm an iOS


1088
00:30:09,586 --> 00:30:10,806
software engineer on the


1089
00:30:10,806 --> 00:30:11,926
HealthKit team.


1090
00:30:12,476 --> 00:30:14,186
Today our users are carrying


1091
00:30:14,186 --> 00:30:15,436
more than one device, such as a


1092
00:30:15,436 --> 00:30:16,596
watch and a phone.


1093
00:30:17,866 --> 00:30:19,006
We know that it's important that


1094
00:30:19,006 --> 00:30:20,136
you want to make sure that your


1095
00:30:20,136 --> 00:30:21,436
health apps data stays


1096
00:30:21,436 --> 00:30:22,786
consistent across all their


1097
00:30:22,786 --> 00:30:23,306
devices.


1098
00:30:23,766 --> 00:30:24,976
Sometimes this can be rather


1099
00:30:24,976 --> 00:30:25,406
difficult.


1100
00:30:27,986 --> 00:30:29,346
Sometimes, we want to be able to


1101
00:30:29,346 --> 00:30:31,046
add a sample to one device, and


1102
00:30:31,046 --> 00:30:31,956
then also add a sample to


1103
00:30:31,956 --> 00:30:33,526
another device, and then have


1104
00:30:33,526 --> 00:30:34,936
the sample synced over, it can


1105
00:30:34,936 --> 00:30:35,966
get sometimes complicated.


1106
00:30:36,956 --> 00:30:39,336
In iOS 11 and watchOS 4 we've


1107
00:30:39,336 --> 00:30:40,656
introduced Sync Identifiers.


1108
00:30:41,636 --> 00:30:43,446
Sync Identifiers allows you to


1109
00:30:43,446 --> 00:30:44,936
uniquely identify a sample


1110
00:30:44,936 --> 00:30:46,446
within HealthKit across all your


1111
00:30:46,446 --> 00:30:47,226
user's devices.


1112
00:30:47,956 --> 00:30:51,006
To support this, we've added two


1113
00:30:51,006 --> 00:30:51,856
new metadata keys.


1114
00:30:52,366 --> 00:30:52,786
These are


1115
00:30:52,786 --> 00:30:55,006
HKMetadatKeySyncIdentifier and


1116
00:30:55,006 --> 00:30:56,486
HKMetadataKeySyncVersion.


1117
00:30:57,076 --> 00:30:59,986
The Sync Identifier can be any


1118
00:30:59,986 --> 00:31:01,166
string, such as a string


1119
00:31:01,166 --> 00:31:03,416
representation of a UUID or the


1120
00:31:03,416 --> 00:31:04,386
primary key in a remote


1121
00:31:04,386 --> 00:31:04,946
database.


1122
00:31:05,456 --> 00:31:08,006
The sync version can be any


1123
00:31:08,006 --> 00:31:08,306
number.


1124
00:31:09,756 --> 00:31:11,226
HealthKit will use this version


1125
00:31:11,396 --> 00:31:12,806
to perform conflict resolution


1126
00:31:12,836 --> 00:31:13,546
on your behalf.


1127
00:31:13,656 --> 00:31:15,406
So, when you save a sample into


1128
00:31:15,406 --> 00:31:16,816
HealthKit, first it will look


1129
00:31:16,816 --> 00:31:18,166
for an existing sample matching


1130
00:31:18,166 --> 00:31:18,976
the Sync Identifier.


1131
00:31:19,696 --> 00:31:20,976
If it finds a sample, it will


1132
00:31:20,976 --> 00:31:21,906
then compare the version.


1133
00:31:22,216 --> 00:31:23,746
If your new sample has a higher


1134
00:31:23,746 --> 00:31:25,276
version, HealthKit will delete


1135
00:31:25,276 --> 00:31:26,686
the original sample, and then


1136
00:31:26,856 --> 00:31:28,266
save your new sample in its


1137
00:31:28,266 --> 00:31:28,686
place.


1138
00:31:29,096 --> 00:31:30,556
If you save a sample with a


1139
00:31:30,556 --> 00:31:31,766
lower version, HealthKit will


1140
00:31:31,766 --> 00:31:32,526
ignore this safe.


1141
00:31:35,476 --> 00:31:36,956
You must use both these keys


1142
00:31:36,956 --> 00:31:37,806
together to enable this


1143
00:31:37,806 --> 00:31:38,206
behavior.


1144
00:31:39,846 --> 00:31:41,486
This metadata applies to any HK


1145
00:31:41,486 --> 00:31:41,856
object.


1146
00:31:42,036 --> 00:31:43,426
Such as an HKSample, or an


1147
00:31:43,426 --> 00:31:43,986
HKWorkout.


1148
00:31:45,776 --> 00:31:47,316
Further, it's important to note


1149
00:31:47,316 --> 00:31:48,526
that this is restricted to your


1150
00:31:48,526 --> 00:31:48,996
source.


1151
00:31:49,716 --> 00:31:51,256
So, only your app can override


1152
00:31:51,256 --> 00:31:52,866
samples that you inserted.


1153
00:31:57,856 --> 00:31:59,726
Sync Identifiers adds a whole


1154
00:31:59,726 --> 00:32:00,966
new flexibility to how you can


1155
00:32:00,966 --> 00:32:02,286
manage your data.


1156
00:32:03,196 --> 00:32:04,906
By just using these two metadata


1157
00:32:04,906 --> 00:32:06,446
keys, you could ensure sample


1158
00:32:06,446 --> 00:32:07,806
uniqueness across all your


1159
00:32:07,806 --> 00:32:08,216
devices.


1160
00:32:10,656 --> 00:32:12,786
Further, by taking advantage of


1161
00:32:13,216 --> 00:32:15,416
the version key, you can also


1162
00:32:15,416 --> 00:32:16,596
enable local versioning.


1163
00:32:20,476 --> 00:32:21,856
HealthKit will manage all


1164
00:32:21,856 --> 00:32:23,186
conflict resolution for you,


1165
00:32:24,006 --> 00:32:25,416
upon saving and syncing.


1166
00:32:26,896 --> 00:32:28,966
Additionally, all operations


1167
00:32:29,036 --> 00:32:30,716
done using Sync Identifiers are


1168
00:32:30,716 --> 00:32:31,656
transaction safe.


1169
00:32:32,156 --> 00:32:33,386
That means that if there was any


1170
00:32:33,386 --> 00:32:35,356
error, then you can know that


1171
00:32:35,356 --> 00:32:36,626
your data will be in a


1172
00:32:36,676 --> 00:32:38,966
consistent state.


1173
00:32:39,176 --> 00:32:40,656
And finally, relationships to


1174
00:32:40,656 --> 00:32:42,146
parent objects are maintained.


1175
00:32:42,786 --> 00:32:44,086
If you replace a sample that's


1176
00:32:44,086 --> 00:32:45,906
been associated to an HKWorkout,


1177
00:32:45,906 --> 00:32:47,856
or a HKCorrelation, the replaced


1178
00:32:47,856 --> 00:32:49,406
sample will still be associated


1179
00:32:49,406 --> 00:32:50,726
to that HKWorkout or


1180
00:32:50,726 --> 00:32:51,466
HKCorrelation.


1181
00:32:52,626 --> 00:32:57,316
Now, let's take a look at how


1182
00:32:57,316 --> 00:32:58,656
using sync identifiers can


1183
00:32:58,656 --> 00:33:00,206
enable our apps to become fully


1184
00:33:00,206 --> 00:33:00,736
independent.


1185
00:33:01,646 --> 00:33:03,096
Imagine we have a workout app on


1186
00:33:03,096 --> 00:33:04,726
our phone and a WatchKit


1187
00:33:04,726 --> 00:33:05,136
extension.


1188
00:33:05,566 --> 00:33:06,636
We're going to us a remote


1189
00:33:06,636 --> 00:33:08,116
server to provide some


1190
00:33:08,116 --> 00:33:09,306
additional processing after the


1191
00:33:09,306 --> 00:33:12,816
workout has completed.


1192
00:33:12,816 --> 00:33:14,036
Our user is going to perform a


1193
00:33:14,036 --> 00:33:15,716
workout using their watch, and


1194
00:33:15,716 --> 00:33:16,886
our app is going to save this


1195
00:33:16,886 --> 00:33:17,766
data into HealthKit.


1196
00:33:17,976 --> 00:33:19,276
We're going to use a random Sync


1197
00:33:19,276 --> 00:33:20,746
Identifier and because this is


1198
00:33:20,746 --> 00:33:21,966
the initial version, we're going


1199
00:33:21,966 --> 00:33:22,866
to call this version 1.


1200
00:33:23,376 --> 00:33:26,656
After the save our watch can


1201
00:33:26,656 --> 00:33:28,996
upload the data directly to our


1202
00:33:30,556 --> 00:33:31,006
cloud.


1203
00:33:31,006 --> 00:33:33,366
As usual, HealthKit notices that


1204
00:33:33,366 --> 00:33:34,676
there's new data and syncs our


1205
00:33:34,676 --> 00:33:35,176
devices.


1206
00:33:35,806 --> 00:33:39,406
Now, the sample exists on both


1207
00:33:39,406 --> 00:33:42,976
of our devices.


1208
00:33:43,046 --> 00:33:44,176
Sometime later our cloud


1209
00:33:44,176 --> 00:33:45,546
finishes processing the data and


1210
00:33:45,546 --> 00:33:46,876
at this point, we can call this


1211
00:33:46,876 --> 00:33:47,396
version 2.


1212
00:33:47,976 --> 00:33:52,406
Our phone notices new data in


1213
00:33:52,406 --> 00:33:54,086
cloud and decides to download it


1214
00:33:54,086 --> 00:33:55,056
and save it into HealthKit.


1215
00:33:55,056 --> 00:33:56,446
We're going to use the same Sync


1216
00:33:56,446 --> 00:33:57,366
Identifier that we used


1217
00:33:57,526 --> 00:33:58,886
previously, but this time we're


1218
00:33:58,886 --> 00:34:00,656
going to set the version to 2.


1219
00:34:02,376 --> 00:34:03,526
Because we're using Sync


1220
00:34:03,526 --> 00:34:04,916
Identifiers, HealthKit will


1221
00:34:04,916 --> 00:34:06,026
first look for an existing


1222
00:34:06,026 --> 00:34:07,316
sample matching that identifier.


1223
00:34:07,766 --> 00:34:09,196
In this case, it found that the


1224
00:34:09,196 --> 00:34:10,516
existing sample is a version 1,


1225
00:34:10,746 --> 00:34:11,956
and our new sample has a version


1226
00:34:11,956 --> 00:34:12,156
2.


1227
00:34:12,746 --> 00:34:13,976
So, it deleted the existing


1228
00:34:13,976 --> 00:34:15,156
sample and replaced it with our


1229
00:34:15,156 --> 00:34:15,646
new sample.


1230
00:34:17,156 --> 00:34:18,676
Again, HealthKit notices that


1231
00:34:18,676 --> 00:34:20,686
there's new data, so it performs


1232
00:34:21,525 --> 00:34:25,255
a sync.


1233
00:34:25,406 --> 00:34:26,266
Because we're using Sync


1234
00:34:26,266 --> 00:34:28,186
Identifiers during sync


1235
00:34:28,186 --> 00:34:29,505
HealthKit will also look for an


1236
00:34:29,505 --> 00:34:30,666
existing sample matching the


1237
00:34:30,666 --> 00:34:31,366
Sync Identifier.


1238
00:34:32,076 --> 00:34:33,126
In our case, it found the


1239
00:34:33,166 --> 00:34:33,846
original sample.


1240
00:34:34,556 --> 00:34:35,775
Notice that our new sample has a


1241
00:34:35,775 --> 00:34:37,266
version 2, so it deleted the


1242
00:34:37,266 --> 00:34:38,485
original sample and replaced it


1243
00:34:38,485 --> 00:34:39,136
with our new sample.


1244
00:34:39,696 --> 00:34:42,516
As we expect, there's only one


1245
00:34:42,516 --> 00:34:43,826
sample in all of our devices,


1246
00:34:44,005 --> 00:34:45,065
and HealthKit managed all the


1247
00:34:45,065 --> 00:34:46,886
conflict resolution for us.


1248
00:34:49,156 --> 00:34:50,775
Because your apps are fully


1249
00:34:50,775 --> 00:34:52,246
independent, the Watch does not


1250
00:34:52,246 --> 00:34:53,876
need to know whether the phone


1251
00:34:53,876 --> 00:34:54,985
has downloaded data or not.


1252
00:34:55,786 --> 00:34:57,766
So, our Watch app sees new data


1253
00:34:57,766 --> 00:34:59,416
in the cloud, downloads it and


1254
00:34:59,416 --> 00:35:00,246
saves into HealthKit.


1255
00:35:00,386 --> 00:35:01,636
We're going to use the same Sync


1256
00:35:01,636 --> 00:35:03,276
Identifier and we're also going


1257
00:35:03,276 --> 00:35:06,616
to specify the version as 2.


1258
00:35:06,856 --> 00:35:08,436
In this case, HealthKit saw that


1259
00:35:08,726 --> 00:35:09,796
there already existed sample


1260
00:35:09,796 --> 00:35:11,186
with the same identifier, and


1261
00:35:11,186 --> 00:35:11,876
the same version.


1262
00:35:12,446 --> 00:35:13,426
So, this sample is ignored.


1263
00:35:13,936 --> 00:35:18,326
As we expect, we have one sample


1264
00:35:18,326 --> 00:35:19,616
on all of our devices and


1265
00:35:19,616 --> 00:35:20,506
HealthKit managed all the


1266
00:35:20,506 --> 00:35:21,686
conflict resolution for us.


1267
00:35:21,906 --> 00:35:25,776
Now, our app can upload and


1268
00:35:25,776 --> 00:35:27,236
download, and sync whenever it


1269
00:35:27,236 --> 00:35:27,556
wants.


1270
00:35:27,756 --> 00:35:28,806
And we don't have to worry about


1271
00:35:28,806 --> 00:35:29,186
anything.


1272
00:35:29,516 --> 00:35:30,556
HealthKit manages all the


1273
00:35:30,556 --> 00:35:32,186
conflict resolution for us and


1274
00:35:32,186 --> 00:35:33,676
handles all the complicated


1275
00:35:33,766 --> 00:35:34,506
things necessary.


1276
00:35:37,276 --> 00:35:37,866
All right.


1277
00:35:38,066 --> 00:35:39,576
Alexa just added WorkoutRoutes


1278
00:35:39,576 --> 00:35:40,236
to Speedy Sloth.


1279
00:35:40,636 --> 00:35:42,516
Now, I'm going to do a demo on


1280
00:35:42,516 --> 00:35:43,416
how to update this route.


1281
00:35:45,686 --> 00:35:47,586
A common example of this might


1282
00:35:47,586 --> 00:35:49,046
be to do some additional


1283
00:35:49,046 --> 00:35:50,206
processing such as smoothing out


1284
00:35:50,206 --> 00:35:51,816
the route and then we want to


1285
00:35:51,816 --> 00:35:52,946
update the route in place.


1286
00:35:53,436 --> 00:35:55,696
So, first I'm going to go to


1287
00:35:56,756 --> 00:35:57,116
Speedy Sloth.


1288
00:35:57,116 --> 00:35:58,256
Earlier, I added this new


1289
00:35:58,256 --> 00:35:59,876
ability to Speedy Sloth, to


1290
00:35:59,876 --> 00:36:00,966
slothify our workouts.


1291
00:36:01,486 --> 00:36:04,006
What this means, it's going to


1292
00:36:04,006 --> 00:36:05,566
take our original route and


1293
00:36:05,566 --> 00:36:06,966
change it so we visit every tree


1294
00:36:06,966 --> 00:36:07,486
along the way.


1295
00:36:07,656 --> 00:36:09,026
Just like a sloth would.


1296
00:36:10,496 --> 00:36:13,206
All right, so let's see the


1297
00:36:13,206 --> 00:36:14,376
implementation of this method.


1298
00:36:14,656 --> 00:36:16,536
First, we're going to go to


1299
00:36:16,536 --> 00:36:17,656
configuration interface


1300
00:36:17,656 --> 00:36:18,056
controller.


1301
00:36:18,656 --> 00:36:22,256
In this class, we have a method


1302
00:36:22,256 --> 00:36:23,476
called updateWorkoutRoute.


1303
00:36:24,896 --> 00:36:26,766
This method takes a workout, a


1304
00:36:26,766 --> 00:36:27,996
route from that workout and all


1305
00:36:27,996 --> 00:36:29,956
the locations from that route.


1306
00:36:30,236 --> 00:36:31,496
Below in this file, I've already


1307
00:36:31,496 --> 00:36:32,616
performed all the necessary


1308
00:36:32,616 --> 00:36:33,606
queries to collect all this


1309
00:36:33,606 --> 00:36:33,826
data.


1310
00:36:34,756 --> 00:36:36,306
When we press slothify workouts,


1311
00:36:36,446 --> 00:36:37,336
it's going to collect all this


1312
00:36:37,336 --> 00:36:38,406
data and then pass it to this


1313
00:36:38,406 --> 00:36:38,716
method.


1314
00:36:42,246 --> 00:36:43,756
With our raw locations collected


1315
00:36:43,756 --> 00:36:44,876
from the initial workout, we're


1316
00:36:44,876 --> 00:36:45,556
going to pass this to our


1317
00:36:45,556 --> 00:36:47,276
method, slothifyRouteLocations.


1318
00:36:47,546 --> 00:36:48,996
This is going to take our


1319
00:36:48,996 --> 00:36:50,656
locations, find all the trees,


1320
00:36:50,686 --> 00:36:51,556
and then adjust our route


1321
00:36:51,556 --> 00:36:52,196
accordingly.


1322
00:36:52,376 --> 00:36:54,296
Now, we're going to have the new


1323
00:36:54,296 --> 00:36:54,946
locations.


1324
00:36:56,026 --> 00:36:57,246
Next, we're going to create a


1325
00:36:57,246 --> 00:36:58,706
new WorkoutRoute and associate


1326
00:36:58,706 --> 00:36:59,526
this with our workout.


1327
00:36:59,946 --> 00:37:01,736
To do this, we're going to


1328
00:37:01,736 --> 00:37:04,096
create an HKWorkoutRouteBuilder.


1329
00:37:04,636 --> 00:37:07,516
Again, we're going to pass our


1330
00:37:07,516 --> 00:37:08,896
healthStore and a nil device to


1331
00:37:08,896 --> 00:37:10,026
represent our local source.


1332
00:37:10,586 --> 00:37:13,826
To insert the locations, we're


1333
00:37:14,856 --> 00:37:16,856
going to call insertRouteData on


1334
00:37:16,856 --> 00:37:18,126
our WorkoutRouteBuilder passing


1335
00:37:18,126 --> 00:37:18,986
our new locations.


1336
00:37:19,486 --> 00:37:22,396
We're going to ensure that this


1337
00:37:22,396 --> 00:37:24,106
was successful, and once that is


1338
00:37:24,106 --> 00:37:25,526
done, we're going to finish our


1339
00:37:25,526 --> 00:37:27,526
route on the original workout.


1340
00:37:28,036 --> 00:37:30,626
All right, let's see this in


1341
00:37:30,626 --> 00:37:30,806
action.


1342
00:37:36,766 --> 00:37:38,826
Here is Alexa's original route.


1343
00:37:45,046 --> 00:37:46,396
Let's go ahead and slothify that


1344
00:37:46,576 --> 00:37:46,696
route.


1345
00:37:47,516 --> 00:38:11,256
[Pause]


1346
00:38:11,756 --> 00:38:12,826
All right, as you can see the


1347
00:38:12,826 --> 00:38:14,146
original route was slothified,


1348
00:38:14,176 --> 00:38:15,096
and then applied onto the


1349
00:38:15,096 --> 00:38:15,486
workout.


1350
00:38:16,536 --> 00:38:18,766
But the original route is still


1351
00:38:18,766 --> 00:38:19,036
there.


1352
00:38:19,036 --> 00:38:21,416
What we need to do now is delete


1353
00:38:21,416 --> 00:38:23,486
the original route and then add


1354
00:38:23,486 --> 00:38:24,016
our new route.


1355
00:38:24,456 --> 00:38:25,096
This can get kind of


1356
00:38:25,096 --> 00:38:25,686
complicated.


1357
00:38:25,686 --> 00:38:26,616
We need to make sure the data


1358
00:38:26,616 --> 00:38:27,956
has been synced over correctly,


1359
00:38:28,226 --> 00:38:29,296
and then it's also not really


1360
00:38:29,296 --> 00:38:30,156
transaction safe.


1361
00:38:30,296 --> 00:38:32,956
So, to do this, very easily, I'm


1362
00:38:32,956 --> 00:38:34,366
going to use Sync Identifiers.


1363
00:38:34,856 --> 00:38:37,556
First, I'm going to go to where


1364
00:38:37,556 --> 00:38:38,566
we originally created the


1365
00:38:38,566 --> 00:38:39,076
WorkoutRoute.


1366
00:38:39,596 --> 00:38:42,326
In this save workout method,


1367
00:38:43,046 --> 00:38:44,556
after we've originally saved the


1368
00:38:44,556 --> 00:38:46,336
workout, and right before we


1369
00:38:46,336 --> 00:38:48,096
finish the route, I'm going to


1370
00:38:48,096 --> 00:38:49,346
add in some Sync Identifier


1371
00:38:49,346 --> 00:38:49,786
metadata.


1372
00:39:02,076 --> 00:39:03,326
First, I'm going to create the


1373
00:39:03,326 --> 00:39:04,236
metadata dictionary.


1374
00:39:06,076 --> 00:39:07,886
Next, I'm going to assign the


1375
00:39:07,886 --> 00:39:10,046
Sync Identifier metadata key to


1376
00:39:10,106 --> 00:39:11,996
string representation of a UUID.


1377
00:39:13,346 --> 00:39:15,506
Next, I'm going to set the sync


1378
00:39:15,506 --> 00:39:17,116
version to version 1, because


1379
00:39:17,116 --> 00:39:18,136
this is our initial route.


1380
00:39:19,576 --> 00:39:20,426
After we've created our


1381
00:39:20,426 --> 00:39:22,706
metadata, we're going to pass it


1382
00:39:23,276 --> 00:39:24,396
to finish route, so it is


1383
00:39:24,396 --> 00:39:25,976
associated to the workout route


1384
00:39:25,976 --> 00:39:26,956
when we save it onto the


1385
00:39:26,956 --> 00:39:27,306
workout.


1386
00:39:27,306 --> 00:39:29,856
Now let's go back to


1387
00:39:29,856 --> 00:39:30,866
configuration interface


1388
00:39:30,866 --> 00:39:32,716
controller to where we updated


1389
00:39:32,716 --> 00:39:33,346
this WorkoutRoute.


1390
00:39:35,476 --> 00:39:37,406
To enable Sync Identifiers,


1391
00:39:37,406 --> 00:39:39,116
we're also going to add the same


1392
00:39:39,116 --> 00:39:41,646
Sync Identifier metadata to our


1393
00:39:41,646 --> 00:39:42,186
updated route.


1394
00:39:43,666 --> 00:39:45,546
First, we're going to grab the


1395
00:39:45,546 --> 00:39:47,026
Sync Identifier that we used on


1396
00:39:47,026 --> 00:39:47,596
the original route.


1397
00:39:48,666 --> 00:39:49,856
Just in case our routes don't


1398
00:39:49,856 --> 00:39:51,036
have any metadata, we're going


1399
00:39:51,036 --> 00:39:52,026
to define a default value.


1400
00:39:52,526 --> 00:39:55,806
Next, let's create a metadata


1401
00:39:55,806 --> 00:39:56,256
dictionary.


1402
00:39:56,826 --> 00:40:00,186
Here, we create our dictionary


1403
00:40:00,736 --> 00:40:02,746
and then assigns the Sync


1404
00:40:02,746 --> 00:40:04,156
Identifier to the original Sync


1405
00:40:04,156 --> 00:40:04,976
Identifier we had.


1406
00:40:05,836 --> 00:40:07,456
Next, we're going to use the


1407
00:40:07,456 --> 00:40:09,076
sync version of 2, because this


1408
00:40:09,076 --> 00:40:09,926
is our updated route.


1409
00:40:11,406 --> 00:40:13,136
Again, let's pass the metadata


1410
00:40:13,606 --> 00:40:15,086
to finish route, so we associate


1411
00:40:15,086 --> 00:40:16,146
it to the WorkoutRoute when it


1412
00:40:16,146 --> 00:40:17,096
gets saved to the workout.


1413
00:40:18,216 --> 00:40:19,456
HealthKit will then replace our


1414
00:40:19,456 --> 00:40:19,906
original route.


1415
00:40:19,906 --> 00:40:22,106
All right, let's see this in


1416
00:40:22,106 --> 00:40:22,406
action.


1417
00:40:23,516 --> 00:40:33,736
[Pause]


1418
00:40:34,236 --> 00:40:34,486
All right.


1419
00:40:34,766 --> 00:40:35,706
First let's perform a new


1420
00:40:35,706 --> 00:40:36,126
workout.


1421
00:40:37,446 --> 00:40:39,626
When we save this workout, it


1422
00:40:39,626 --> 00:40:40,756
will have Sync Identifier


1423
00:40:40,756 --> 00:40:41,336
metadata.


1424
00:40:42,736 --> 00:40:44,546
After we've burn some calories


1425
00:40:44,856 --> 00:40:46,976
and walked a few meters, we're


1426
00:40:46,976 --> 00:40:47,816
going to go ahead and stop our


1427
00:40:47,816 --> 00:40:49,926
workout and save into HealthKit.


1428
00:40:56,046 --> 00:40:56,986
Here, we can see our original


1429
00:40:56,986 --> 00:40:57,126
route.


1430
00:40:57,126 --> 00:40:59,926
Now, let's go back and slothify


1431
00:40:59,926 --> 00:41:00,926
this route.


1432
00:41:01,516 --> 00:41:14,896
[Pause]


1433
00:41:15,396 --> 00:41:15,776
All right.


1434
00:41:16,416 --> 00:41:17,586
As you can see, the original


1435
00:41:17,586 --> 00:41:18,986
route was replaced with our new


1436
00:41:18,986 --> 00:41:19,206
route.


1437
00:41:19,926 --> 00:41:20,936
All we need to do is add a


1438
00:41:20,936 --> 00:41:22,276
couple metadata keys, and


1439
00:41:22,276 --> 00:41:23,296
HealthKit handled all the


1440
00:41:23,296 --> 00:41:24,476
conflict resolution for us.


1441
00:41:26,816 --> 00:41:28,166
Now, you can see how easy it is


1442
00:41:28,306 --> 00:41:29,696
to handle conflict resolution


1443
00:41:29,896 --> 00:41:30,706
and take advantage of


1444
00:41:30,706 --> 00:41:31,596
HealthKit's advanced new


1445
00:41:31,596 --> 00:41:32,086
features.


1446
00:41:34,436 --> 00:41:36,576
Okay, onto sample source


1447
00:41:36,576 --> 00:41:37,056
information.


1448
00:41:38,306 --> 00:41:39,476
It's important to know that when


1449
00:41:39,476 --> 00:41:40,906
you display data from HealthKit,


1450
00:41:41,766 --> 00:41:43,156
the origin of where the data


1451
00:41:43,156 --> 00:41:43,666
came from.


1452
00:41:44,356 --> 00:41:46,946
When you query for data, samples


1453
00:41:46,946 --> 00:41:47,796
will contain an


1454
00:41:47,796 --> 00:41:48,736
HKSourceRevision.


1455
00:41:49,326 --> 00:41:51,666
An HKSourceRevision includes the


1456
00:41:51,726 --> 00:41:54,256
app and the device which saved


1457
00:41:54,256 --> 00:41:55,306
the sample into HealthKit.


1458
00:41:56,716 --> 00:41:58,606
In iOS 11 and watchOS 4, we're


1459
00:41:58,606 --> 00:42:00,256
adding additional properties and


1460
00:42:00,256 --> 00:42:01,916
a few constants so you can gain


1461
00:42:01,916 --> 00:42:03,356
a deeper insight into the data


1462
00:42:03,356 --> 00:42:04,686
that you display form HealthKit.


1463
00:42:07,356 --> 00:42:09,776
In iOS 10 HKSourceRevision


1464
00:42:09,776 --> 00:42:12,296
included the source, as HK


1465
00:42:12,296 --> 00:42:15,086
source, and the version of the


1466
00:42:15,086 --> 00:42:18,326
app as an NSString.


1467
00:42:18,466 --> 00:42:19,966
First, we added product type.


1468
00:42:20,596 --> 00:42:21,556
Product type is a string


1469
00:42:21,556 --> 00:42:22,996
representation of the device


1470
00:42:22,996 --> 00:42:24,466
which saved the sample into


1471
00:42:24,466 --> 00:42:24,936
HealthKit.


1472
00:42:24,936 --> 00:42:26,996
So, if you save a sample on a


1473
00:42:26,996 --> 00:42:28,626
Watch Series 2, this will be


1474
00:42:28,626 --> 00:42:30,926
Watch 2, 4.


1475
00:42:31,316 --> 00:42:32,846
Next, we added operating system


1476
00:42:32,846 --> 00:42:33,186
version.


1477
00:42:34,156 --> 00:42:35,206
This is the operating system


1478
00:42:35,206 --> 00:42:36,596
that was running on the device


1479
00:42:36,786 --> 00:42:38,226
when the sample was saved into


1480
00:42:38,816 --> 00:42:39,036
HealthKit.


1481
00:42:39,496 --> 00:42:41,576
So, if we save the sample using


1482
00:42:41,576 --> 00:42:44,546
watchOS 4.0, this will return 4,


1483
00:42:44,546 --> 00:42:45,476
0, 0.


1484
00:42:46,276 --> 00:42:49,176
Next, we added three new


1485
00:42:49,176 --> 00:42:49,836
constants.


1486
00:42:50,056 --> 00:42:50,706
These constants are


1487
00:42:50,706 --> 00:42:52,956
HKSourceRevision, any version,


1488
00:42:53,486 --> 00:42:54,976
HKSourceRevision any product


1489
00:42:54,976 --> 00:42:55,176
type.


1490
00:42:55,716 --> 00:42:57,286
And HKSourceRevision any


1491
00:42:57,286 --> 00:42:58,316
operating system.


1492
00:42:58,926 --> 00:43:00,296
When creating predicates to


1493
00:43:00,296 --> 00:43:02,776
query for data, which involves


1494
00:43:02,776 --> 00:43:04,556
an HKSourceRevision, you must


1495
00:43:04,556 --> 00:43:05,936
specify all of these values.


1496
00:43:06,696 --> 00:43:08,356
You can use these constants so


1497
00:43:08,356 --> 00:43:10,486
you could gain a very specific


1498
00:43:10,486 --> 00:43:13,396
predicate, such as for a certain


1499
00:43:13,396 --> 00:43:14,856
product type, but any operating


1500
00:43:14,856 --> 00:43:15,156
system.


1501
00:43:16,246 --> 00:43:18,176
With this new information, you


1502
00:43:18,176 --> 00:43:20,726
can now gain deeper insight into


1503
00:43:20,726 --> 00:43:21,906
the data that you display in


1504
00:43:21,906 --> 00:43:26,226
your app.


1505
00:43:26,476 --> 00:43:27,386
All right.


1506
00:43:27,886 --> 00:43:30,236
Finally, supporting diabetes


1507
00:43:30,236 --> 00:43:34,056
management in HealthKit.


1508
00:43:34,056 --> 00:43:35,516
Our users love using Apple


1509
00:43:35,516 --> 00:43:37,196
products to help manage their


1510
00:43:37,196 --> 00:43:37,606
condition.


1511
00:43:38,216 --> 00:43:40,466
Today in HealthKit we have


1512
00:43:40,466 --> 00:43:41,466
support for tracking blood


1513
00:43:41,466 --> 00:43:43,316
glucose samples, keeping track


1514
00:43:43,316 --> 00:43:44,746
of carbohydrates and tracking


1515
00:43:44,796 --> 00:43:46,066
all kinds of activity data,


1516
00:43:46,366 --> 00:43:47,616
which is all useful in managing


1517
00:43:47,886 --> 00:43:48,446
diabetes.


1518
00:43:49,536 --> 00:43:50,376
We've heard there's some missing


1519
00:43:50,376 --> 00:43:52,026
pieces to the story and I'm


1520
00:43:52,026 --> 00:43:53,106
pleased to announce that we've


1521
00:43:53,106 --> 00:43:54,396
added some new additional


1522
00:43:54,446 --> 00:43:55,976
features to help out.


1523
00:44:00,366 --> 00:44:02,286
First, we added the ability to


1524
00:44:02,286 --> 00:44:04,476
track the relative mealtime to a


1525
00:44:04,476 --> 00:44:05,376
blood glucose sample.


1526
00:44:05,886 --> 00:44:08,736
Next, we added the ability to


1527
00:44:08,736 --> 00:44:09,956
track insulin delivery.


1528
00:44:10,526 --> 00:44:13,596
With the addition to


1529
00:44:13,596 --> 00:44:15,786
CoreBluetooth in watchOS 4, now


1530
00:44:15,786 --> 00:44:17,286
your Bluetooth enabled diabetes


1531
00:44:17,286 --> 00:44:19,086
devices can connect directly to


1532
00:44:19,156 --> 00:44:20,326
your Watch.


1533
00:44:21,056 --> 00:44:22,686
Please watch "What's New in


1534
00:44:22,686 --> 00:44:23,696
CoreBluetooth" to learn more


1535
00:44:23,696 --> 00:44:24,726
about that.


1536
00:44:25,376 --> 00:44:27,196
To support the relative blood


1537
00:44:27,196 --> 00:44:28,886
glucose mealtime, we've added a


1538
00:44:28,886 --> 00:44:29,746
new metadata key.


1539
00:44:30,326 --> 00:44:31,386
This metadata key is


1540
00:44:31,386 --> 00:44:32,406
HKMetadataKey


1541
00:44:32,406 --> 00:44:33,546
BloodGlucoseMealTime.


1542
00:44:33,546 --> 00:44:35,416
You could use this metadata key


1543
00:44:35,416 --> 00:44:36,536
when saving blood glucose


1544
00:44:36,536 --> 00:44:37,036
samples.


1545
00:44:38,496 --> 00:44:39,976
This metadata key supports two


1546
00:44:39,976 --> 00:44:40,896
possible values.


1547
00:44:41,636 --> 00:44:42,986
These values can be found in the


1548
00:44:42,986 --> 00:44:44,906
Enum, HKBloodGlucoseMealTime.


1549
00:44:45,616 --> 00:44:47,326
The values are preprandial and


1550
00:44:47,326 --> 00:44:47,916
postprandial.


1551
00:44:48,946 --> 00:44:50,586
Preprandial represents any time


1552
00:44:50,586 --> 00:44:51,226
before a meal.


1553
00:44:51,226 --> 00:44:53,236
And postprandial represents any


1554
00:44:53,236 --> 00:44:57,426
time after a meal.


1555
00:44:57,646 --> 00:44:58,866
With this new data, now you


1556
00:44:58,866 --> 00:45:00,156
could gain a deeper insight into


1557
00:45:00,156 --> 00:45:01,956
blood glucose samples relative


1558
00:45:01,956 --> 00:45:03,016
to when the user last ate a


1559
00:45:03,016 --> 00:45:03,236
meal.


1560
00:45:03,976 --> 00:45:05,846
Now, we are onto supporting


1561
00:45:05,846 --> 00:45:06,946
insulin deliver in HealthKit.


1562
00:45:07,996 --> 00:45:09,306
Here is a graph of what it looks


1563
00:45:09,306 --> 00:45:12,496
like in HealthKit for all data


1564
00:45:12,776 --> 00:45:13,766
that's been inserted into


1565
00:45:14,356 --> 00:45:14,486
Health.


1566
00:45:16,116 --> 00:45:17,706
To support this new type, we've


1567
00:45:17,706 --> 00:45:18,916
added a new quantity type


1568
00:45:18,916 --> 00:45:19,576
identifier.


1569
00:45:19,946 --> 00:45:20,446
This is


1570
00:45:20,446 --> 00:45:21,786
HKQuantityTypeIdentifier,


1571
00:45:21,786 --> 00:45:22,506
insulinDelivery.


1572
00:45:23,586 --> 00:45:24,836
When adding samples of this


1573
00:45:24,836 --> 00:45:27,226
quantity type, you must include


1574
00:45:27,566 --> 00:45:28,456
the delivery reason.


1575
00:45:29,406 --> 00:45:31,756
To do this, you should use the


1576
00:45:31,756 --> 00:45:32,986
HKMetadataKeyInsulin


1577
00:45:32,986 --> 00:45:33,846
DeliveryReason.


1578
00:45:34,076 --> 00:45:36,796
Metadata. This metadata supports


1579
00:45:36,796 --> 00:45:37,846
two possible values.


1580
00:45:38,926 --> 00:45:40,236
These values and be found on the


1581
00:45:40,236 --> 00:45:41,886
Enum HKInsulinDeliverReason.


1582
00:45:43,326 --> 00:45:44,686
These values are basal and


1583
00:45:44,686 --> 00:45:45,216
bolus.


1584
00:45:46,416 --> 00:45:47,496
Basal is the background


1585
00:45:47,496 --> 00:45:48,546
metabolic need throughout the


1586
00:45:48,546 --> 00:45:48,826
day.


1587
00:45:49,206 --> 00:45:50,926
While bolus is the episodic need


1588
00:45:50,956 --> 00:45:52,186
such as for a meal and


1589
00:45:52,186 --> 00:45:53,106
correcting high blood sugar.


1590
00:45:54,416 --> 00:45:56,586
It's important to know that you


1591
00:45:56,586 --> 00:45:57,776
should only add these kinds of


1592
00:45:57,776 --> 00:45:59,866
samples after user has delivered


1593
00:45:59,866 --> 00:46:00,266
insulin.


1594
00:46:02,216 --> 00:46:04,476
Further, when creating an HK


1595
00:46:04,476 --> 00:46:06,406
sample with this identifier, you


1596
00:46:06,406 --> 00:46:07,776
should use the international


1597
00:46:08,346 --> 00:46:08,506
unit.


1598
00:46:09,476 --> 00:46:10,896
To support the international


1599
00:46:10,896 --> 00:46:12,986
unit, or the IU, we've extended


1600
00:46:12,986 --> 00:46:14,786
HKUnit to now return an


1601
00:46:14,786 --> 00:46:15,556
international unit.


1602
00:46:16,376 --> 00:46:18,016
The international unit is the


1603
00:46:18,016 --> 00:46:19,806
biological effectiveness of the


1604
00:46:19,806 --> 00:46:20,426
substance.


1605
00:46:20,956 --> 00:46:23,586
It does not represent a specific


1606
00:46:23,586 --> 00:46:24,886
amount, but it represents the


1607
00:46:24,886 --> 00:46:26,406
biological effectiveness of the


1608
00:46:26,406 --> 00:46:27,426
amount that's been delivered.


1609
00:46:27,936 --> 00:46:30,886
It's also important to know that


1610
00:46:30,886 --> 00:46:32,316
this unit cannot be converted to


1611
00:46:32,316 --> 00:46:33,876
other units, but it does


1612
00:46:33,876 --> 00:46:35,836
support, common SI prefixes such


1613
00:46:35,836 --> 00:46:36,756
as mili and micro.


1614
00:46:37,336 --> 00:46:41,936
All right let's take a look at


1615
00:46:41,936 --> 00:46:43,166
how to insert insulin delivery


1616
00:46:43,166 --> 00:46:43,506
sample.


1617
00:46:44,756 --> 00:46:46,576
Let's say our insulin pump has


1618
00:46:46,576 --> 00:46:49,416
delivered 0.85 units of basal


1619
00:46:49,416 --> 00:46:50,596
insulin over the past hour.


1620
00:46:51,916 --> 00:46:53,356
First, let's create an


1621
00:46:53,356 --> 00:46:54,576
HKQuantityType using the


1622
00:46:54,576 --> 00:46:56,106
identifier insulinDelivery.


1623
00:46:56,626 --> 00:47:01,196
Next, let's create an HKQuantity


1624
00:47:01,396 --> 00:47:03,256
using the international unit and


1625
00:47:03,386 --> 00:47:06,006
a double value of 0.825.


1626
00:47:08,016 --> 00:47:09,886
After that we're going to create


1627
00:47:09,886 --> 00:47:10,666
an HKQuantitySample.


1628
00:47:11,336 --> 00:47:12,486
We're going to use the quantity


1629
00:47:12,486 --> 00:47:13,736
type and the quantity we


1630
00:47:13,736 --> 00:47:14,556
previously defined.


1631
00:47:15,056 --> 00:47:16,456
We're going to set the start and


1632
00:47:16,456 --> 00:47:17,706
end date to be the start end


1633
00:47:17,706 --> 00:47:18,956
date that the pump had delivered


1634
00:47:18,956 --> 00:47:19,386
the insulin.


1635
00:47:20,806 --> 00:47:22,096
Next, we're going to remember to


1636
00:47:22,096 --> 00:47:23,386
include the required metadata


1637
00:47:23,386 --> 00:47:24,286
for the deliver reason.


1638
00:47:24,816 --> 00:47:26,146
In our case, this is basal.


1639
00:47:26,726 --> 00:47:29,526
After the sample has been


1640
00:47:29,526 --> 00:47:30,926
created, we can save into


1641
00:47:30,926 --> 00:47:32,396
HealthKit by passing it to the


1642
00:47:32,396 --> 00:47:33,436
save function on our


1643
00:47:33,436 --> 00:47:33,866
healthStore.


1644
00:47:34,526 --> 00:47:36,816
Now, an insulin delivery sample


1645
00:47:36,816 --> 00:47:37,886
has been saved into HealthKit,


1646
00:47:37,946 --> 00:47:39,106
which can be utilized by your


1647
00:47:39,106 --> 00:47:40,796
app and any other app which


1648
00:47:40,796 --> 00:47:42,106
helps users manage diabetes.


1649
00:47:42,686 --> 00:47:46,966
With the sample in HealthKit,


1650
00:47:47,396 --> 00:47:48,996
now we can retrieve it back out.


1651
00:47:49,556 --> 00:47:50,436
To do this we're going to


1652
00:47:50,436 --> 00:47:51,876
perform a statistic query for


1653
00:47:51,876 --> 00:47:52,726
all basal samples.


1654
00:47:53,416 --> 00:47:55,076
I'm interested in every basal


1655
00:47:55,076 --> 00:47:56,016
sample that's ever been


1656
00:47:56,016 --> 00:47:57,626
delivered to the user on an hour


1657
00:47:57,626 --> 00:47:58,546
by hour basis.


1658
00:47:59,686 --> 00:48:01,056
First, we're going to create a


1659
00:48:01,056 --> 00:48:01,446
predicate.


1660
00:48:02,066 --> 00:48:02,996
We're going to base this on the


1661
00:48:02,996 --> 00:48:03,746
metadata key,


1662
00:48:03,916 --> 00:48:05,416
insulineDeliveryReason, and


1663
00:48:05,416 --> 00:48:06,766
we're going to pass in basal.


1664
00:48:06,766 --> 00:48:08,286
Because that's the type we're


1665
00:48:08,286 --> 00:48:09,416
interested in.


1666
00:48:10,716 --> 00:48:12,646
Next, we're going to define the


1667
00:48:12,646 --> 00:48:13,806
quantity type, just like we did


1668
00:48:13,806 --> 00:48:14,136
before.


1669
00:48:14,756 --> 00:48:15,546
We're going to use the


1670
00:48:15,546 --> 00:48:16,966
insulinDelivery quantityType


1671
00:48:16,966 --> 00:48:17,456
identifier.


1672
00:48:19,076 --> 00:48:21,126
After that we're going to create


1673
00:48:21,126 --> 00:48:22,206
an HK statistics collections


1674
00:48:22,206 --> 00:48:22,446
query.


1675
00:48:22,876 --> 00:48:23,576
We're going to pass in the


1676
00:48:23,576 --> 00:48:24,686
quantity type and predicate that


1677
00:48:24,686 --> 00:48:25,586
we previously defined.


1678
00:48:26,086 --> 00:48:29,066
Next, we're going to pass in a


1679
00:48:29,066 --> 00:48:29,846
couple of options.


1680
00:48:29,846 --> 00:48:31,176
These are cumulativeSum and


1681
00:48:31,176 --> 00:48:32,096
separateBySource.


1682
00:48:32,256 --> 00:48:33,706
It's important to pass in


1683
00:48:33,706 --> 00:48:35,426
separateBySource, because


1684
00:48:35,846 --> 00:48:37,646
HealthKit would normally only


1685
00:48:37,996 --> 00:48:39,836
return samples within a certain


1686
00:48:39,836 --> 00:48:40,366
time period.


1687
00:48:40,626 --> 00:48:42,556
Because the user has the option


1688
00:48:42,556 --> 00:48:44,186
to be delivered insulin over the


1689
00:48:44,186 --> 00:48:45,666
course of an hour, and also by


1690
00:48:45,666 --> 00:48:47,586
manual injection, these time


1691
00:48:47,586 --> 00:48:48,426
periods can overlap.


1692
00:48:48,936 --> 00:48:50,336
So, we use separateBySource to


1693
00:48:50,336 --> 00:48:51,416
get all the information.


1694
00:48:51,926 --> 00:48:54,406
Next, I'm interested in all the


1695
00:48:54,406 --> 00:48:55,416
basal samples.


1696
00:48:55,476 --> 00:48:57,086
So, I'm going to use date,


1697
00:48:57,086 --> 00:48:58,496
distantPast for the anchor date.


1698
00:48:58,986 --> 00:49:01,766
After that, to specify an hour


1699
00:49:01,766 --> 00:49:03,236
by hour basis, I'm going to pass


1700
00:49:03,236 --> 00:49:04,776
DateComponents of an hour of 1


1701
00:49:05,066 --> 00:49:06,216
to the intervalComponents.


1702
00:49:06,766 --> 00:49:10,366
Now that my query is created, I


1703
00:49:10,366 --> 00:49:11,816
could create the initial results


1704
00:49:11,816 --> 00:49:12,096
handler.


1705
00:49:12,396 --> 00:49:14,216
The results pass back from this


1706
00:49:14,216 --> 00:49:15,766
handler are going to contain all


1707
00:49:15,766 --> 00:49:16,956
the information that we need to


1708
00:49:16,956 --> 00:49:18,436
sum up to find out this


1709
00:49:18,436 --> 00:49:21,876
information that we need.


1710
00:49:21,876 --> 00:49:22,966
Finally, I'm going to execute


1711
00:49:22,966 --> 00:49:24,156
this query by passing it to the


1712
00:49:24,546 --> 00:49:26,136
execute method on healthStore.


1713
00:49:26,736 --> 00:49:28,936
Now you know how to insert


1714
00:49:28,936 --> 00:49:30,186
samples and retrieve them back


1715
00:49:30,936 --> 00:49:31,006
out.


1716
00:49:35,336 --> 00:49:36,836
Today we learned about a lot of


1717
00:49:36,836 --> 00:49:38,816
new features available in


1718
00:49:39,856 --> 00:49:40,076
HealthKit.


1719
00:49:40,176 --> 00:49:41,416
First, you learned about new


1720
00:49:41,416 --> 00:49:42,746
data types and new activity


1721
00:49:42,746 --> 00:49:43,926
types, which will make your


1722
00:49:43,926 --> 00:49:49,446
great workout apps even better.


1723
00:49:49,806 --> 00:49:51,026
Next, you learned about the new


1724
00:49:51,026 --> 00:49:52,436
WorkoutRouteBuilder API.


1725
00:49:53,366 --> 00:49:54,886
This allow you to record workout


1726
00:49:54,886 --> 00:49:56,056
routes and associate them to


1727
00:49:56,056 --> 00:49:56,676
workouts.


1728
00:49:57,186 --> 00:49:59,986
After that we introduced sync


1729
00:49:59,986 --> 00:50:00,726
identifiers.


1730
00:50:01,376 --> 00:50:02,456
Now, you can take advantage of


1731
00:50:02,456 --> 00:50:04,186
HealthKit to manage all data


1732
00:50:04,186 --> 00:50:05,906
duplication and prevent data


1733
00:50:05,906 --> 00:50:07,656
duplication across your devices.


1734
00:50:08,226 --> 00:50:12,516
And Finally, we added additional


1735
00:50:12,516 --> 00:50:14,476
support for users managing


1736
00:50:14,476 --> 00:50:15,016
diabetes.


1737
00:50:19,846 --> 00:50:21,746
For more information and to


1738
00:50:21,746 --> 00:50:23,056
download the full-implementation


1739
00:50:23,056 --> 00:50:24,966
of Speedy Sloth, please visit


1740
00:50:25,506 --> 00:50:26,816
this URL.


1741
00:50:27,516 --> 00:50:33,856
[ Applause ]


1742
00:50:34,356 --> 00:50:35,516
We have a few related sessions


1743
00:50:35,516 --> 00:50:36,226
that we recommend.


1744
00:50:37,586 --> 00:50:41,736
Thank you and have a great WWDC


1745
00:50:41,736 --> 00:50:42,000
[Applause].

