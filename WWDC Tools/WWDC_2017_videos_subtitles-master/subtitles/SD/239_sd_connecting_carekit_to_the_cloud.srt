1
00:00:06,516 --> 00:00:15,500
[ Cheering ]


2
00:00:19,516 --> 00:00:21,816
[ Applause ]


3
00:00:22,316 --> 00:00:22,726
>> All right.


4
00:00:22,726 --> 00:00:23,636
Welcome everyone.


5
00:00:25,986 --> 00:00:27,026
Welcome to our session


6
00:00:27,026 --> 00:00:28,696
connecting CareKit to the Cloud.


7
00:00:29,176 --> 00:00:30,086
I'm Kelsey Dedoshka.


8
00:00:30,086 --> 00:00:31,246
And I'm our software engineer


9
00:00:31,246 --> 00:00:32,966
here on the CareKit team.


10
00:00:35,206 --> 00:00:36,546
And so we'll start our session


11
00:00:36,546 --> 00:00:38,326
off today with a brief CareKit


12
00:00:38,326 --> 00:00:38,856
overview.


13
00:00:39,396 --> 00:00:40,426
And then we'll introduce our


14
00:00:40,426 --> 00:00:42,956
brand-new Bridge API where we'll


15
00:00:42,956 --> 00:00:44,176
discuss in depth how to


16
00:00:44,176 --> 00:00:45,766
integrate that API into a cloud


17
00:00:45,766 --> 00:00:46,306
backend.


18
00:00:46,796 --> 00:00:48,406
And in the process, we'll even


19
00:00:48,406 --> 00:00:49,926
dive a little bit deeper and


20
00:00:49,926 --> 00:00:51,256
walk-through understanding some


21
00:00:51,256 --> 00:00:51,676
of the code.


22
00:00:52,806 --> 00:00:54,266
Then I'll invite Akshay up to


23
00:00:54,266 --> 00:00:55,396
the stage here to give you guys


24
00:00:55,396 --> 00:00:56,086
a quick demo.


25
00:00:56,086 --> 00:00:58,266
And we'll finish up by seeing


26
00:00:58,266 --> 00:00:59,526
what you can all do with this


27
00:00:59,526 --> 00:01:00,056
new feature.


28
00:01:00,886 --> 00:01:01,586
So let's get started.


29
00:01:02,756 --> 00:01:04,156
If you're interested in learning


30
00:01:04,156 --> 00:01:05,836
what's new in the framework, you


31
00:01:05,836 --> 00:01:06,776
can reference the earlier


32
00:01:06,776 --> 00:01:08,376
session What's New in CareKit


33
00:01:08,376 --> 00:01:10,126
and ResearchKit hosted by Sam


34
00:01:10,126 --> 00:01:10,576
Ravka [phonetic].


35
00:01:11,696 --> 00:01:13,406
Or to learn how CareKit came to


36
00:01:13,406 --> 00:01:14,726
be and its underlying


37
00:01:14,726 --> 00:01:16,626
architecture, I highly recommend


38
00:01:16,626 --> 00:01:17,836
checking out last year's session


39
00:01:17,836 --> 00:01:19,216
talk Getting Started with


40
00:01:19,216 --> 00:01:21,676
CareKit hosted by Omar Kahn


41
00:01:21,676 --> 00:01:23,336
[phonetic].


42
00:01:23,336 --> 00:01:25,126
Now since its introduction last


43
00:01:25,126 --> 00:01:27,316
year, CareKit has helped medical


44
00:01:27,316 --> 00:01:28,826
groups improve the overall


45
00:01:28,826 --> 00:01:30,866
quality of patient care by


46
00:01:30,866 --> 00:01:32,826
providing at-home solutions for


47
00:01:32,826 --> 00:01:34,116
tracking care activities and


48
00:01:34,116 --> 00:01:34,866
assessments.


49
00:01:36,226 --> 00:01:37,786
And allowing patients to take


50
00:01:37,786 --> 00:01:39,196
more control over their care


51
00:01:39,456 --> 00:01:41,356
through CareKit apps has


52
00:01:41,356 --> 00:01:42,616
presented new insights and


53
00:01:42,616 --> 00:01:44,416
opportunities to take that care


54
00:01:44,416 --> 00:01:46,366
and technology one step further.


55
00:01:46,826 --> 00:01:49,866
And so this year we're


56
00:01:49,866 --> 00:01:51,896
introducing a new card for


57
00:01:51,956 --> 00:01:53,596
patients to track care to-dos,


58
00:01:54,046 --> 00:01:55,426
like these stretches post knee


59
00:01:55,426 --> 00:01:57,796
surgery, alongside some


60
00:01:57,796 --> 00:01:58,866
assessments they may need to


61
00:01:58,866 --> 00:02:00,916
complete to track their progress


62
00:02:00,916 --> 00:02:02,256
along their care journeys.


63
00:02:02,966 --> 00:02:06,236
Now these adherence, symptoms,


64
00:02:06,236 --> 00:02:08,455
and outcomes are key data points


65
00:02:08,675 --> 00:02:10,356
in understanding not only how a


66
00:02:10,356 --> 00:02:12,076
patient is feeling but how


67
00:02:12,076 --> 00:02:13,206
engaged they are in their own


68
00:02:13,206 --> 00:02:13,996
personal care.


69
00:02:15,516 --> 00:02:17,066
And data from this card is also


70
00:02:17,066 --> 00:02:18,906
crucial for care teams to


71
00:02:18,976 --> 00:02:20,406
understand whether their


72
00:02:20,406 --> 00:02:21,496
treatments are having their


73
00:02:21,496 --> 00:02:22,986
intended effects or not.


74
00:02:25,376 --> 00:02:27,596
Our CareKit Insights tab now


75
00:02:27,596 --> 00:02:29,666
features threshold alerts, which


76
00:02:29,666 --> 00:02:31,196
provides users with a nice


77
00:02:31,196 --> 00:02:34,666
visual indication via widgets or


78
00:02:34,706 --> 00:02:37,886
even text that really bring data


79
00:02:37,886 --> 00:02:38,886
to the forefront of their


80
00:02:38,886 --> 00:02:40,396
attention they may need to be


81
00:02:40,396 --> 00:02:41,626
concerned about.


82
00:02:43,876 --> 00:02:46,436
And last CareKit apps today


83
00:02:46,806 --> 00:02:48,096
allow patients to share their


84
00:02:48,096 --> 00:02:50,376
data in PDF form via our Share


85
00:02:50,376 --> 00:02:51,676
Reports option on the Connect


86
00:02:51,676 --> 00:02:51,876
View.


87
00:02:52,916 --> 00:02:54,726
And we found that it was time to


88
00:02:54,816 --> 00:02:56,646
upgrade this share experience.


89
00:03:00,376 --> 00:03:01,746
And so after the launch of


90
00:03:01,746 --> 00:03:03,566
CareKit, we were excited to hear


91
00:03:03,566 --> 00:03:05,466
how valuable the data collected


92
00:03:05,466 --> 00:03:08,046
via CareKit apps were, not only


93
00:03:08,046 --> 00:03:09,416
to patients but to their care


94
00:03:09,416 --> 00:03:10,076
team members.


95
00:03:11,236 --> 00:03:12,556
However, providing that data


96
00:03:12,556 --> 00:03:14,316
back to care teams is a manual


97
00:03:14,316 --> 00:03:14,956
process.


98
00:03:15,626 --> 00:03:17,076
And this can make it challenging


99
00:03:17,116 --> 00:03:19,156
for care teams to update their


100
00:03:19,156 --> 00:03:20,586
patient's care cards remotely


101
00:03:20,826 --> 00:03:22,426
and even get a good sense of how


102
00:03:22,426 --> 00:03:23,206
they're progressing through


103
00:03:23,206 --> 00:03:23,636
their care.


104
00:03:25,176 --> 00:03:26,436
And so these patient and care


105
00:03:26,436 --> 00:03:28,676
team apps really have to work to


106
00:03:28,676 --> 00:03:30,156
break down this data barrier


107
00:03:30,156 --> 00:03:31,656
that exists between them.


108
00:03:34,346 --> 00:03:36,296
And so we've seen some apps


109
00:03:36,386 --> 00:03:37,916
create their very own backend


110
00:03:37,916 --> 00:03:39,956
cloud solutions to help them


111
00:03:40,026 --> 00:03:41,366
sync data between their patient


112
00:03:41,366 --> 00:03:42,406
and their care team apps.


113
00:03:43,316 --> 00:03:44,696
However, this isn't an easy


114
00:03:44,696 --> 00:03:44,866
task.


115
00:03:45,666 --> 00:03:46,686
And it really requires the


116
00:03:46,686 --> 00:03:48,076
developers to handle doing a


117
00:03:48,076 --> 00:03:49,036
majority of the work.


118
00:03:50,086 --> 00:03:51,486
They have to handle interfacing


119
00:03:51,486 --> 00:03:53,006
directly with the apps data


120
00:03:53,006 --> 00:03:54,636
store as well as with the


121
00:03:54,636 --> 00:03:55,766
backend cloud system.


122
00:03:56,296 --> 00:03:59,806
And so we saw this growing need


123
00:03:59,986 --> 00:04:01,466
to help break down this data


124
00:04:01,466 --> 00:04:03,666
barrier and help patient and


125
00:04:03,726 --> 00:04:05,666
care team apps securely sync


126
00:04:05,666 --> 00:04:06,926
data between them if they


127
00:04:06,926 --> 00:04:07,336
desire.


128
00:04:07,886 --> 00:04:10,996
And so this presented us with


129
00:04:10,996 --> 00:04:12,876
the opportunity to improve the


130
00:04:12,876 --> 00:04:15,316
CareKit framework by building


131
00:04:15,316 --> 00:04:16,956
hooks directly in the framework


132
00:04:16,956 --> 00:04:19,366
architecture so that current and


133
00:04:19,366 --> 00:04:21,276
new applications can accomplish


134
00:04:21,326 --> 00:04:22,896
their data syncing needs in a


135
00:04:22,896 --> 00:04:24,306
much easier and cleaner way.


136
00:04:26,746 --> 00:04:28,786
And moving forward, we hope to


137
00:04:28,786 --> 00:04:30,536
improve the data pipeline with


138
00:04:30,536 --> 00:04:31,796
the creation of this new feature


139
00:04:32,326 --> 00:04:34,046
and, in turn, reducing the


140
00:04:34,046 --> 00:04:35,156
required effort by the


141
00:04:35,156 --> 00:04:35,836
development team.


142
00:04:36,306 --> 00:04:39,426
Now this cloud-based data


143
00:04:39,426 --> 00:04:41,146
sharing means patients who use


144
00:04:41,146 --> 00:04:42,536
CareKit apps at home to track


145
00:04:42,616 --> 00:04:44,586
their care can now share that


146
00:04:44,586 --> 00:04:45,516
care data in real time.


147
00:04:45,516 --> 00:04:47,976
And this is great because it


148
00:04:47,976 --> 00:04:49,756
allows their care teams to see


149
00:04:49,756 --> 00:04:51,006
their patient's results as


150
00:04:51,006 --> 00:04:52,876
they're being recorded and gives


151
00:04:52,876 --> 00:04:54,356
them the opportunity to make


152
00:04:54,356 --> 00:04:55,956
adjustments in their care plan


153
00:04:56,406 --> 00:04:58,166
or even to reach out directly if


154
00:04:58,166 --> 00:04:58,646
they desire.


155
00:05:01,396 --> 00:05:03,016
And so throughout this process,


156
00:05:03,196 --> 00:05:04,546
we've been really inspired by


157
00:05:04,546 --> 00:05:06,886
many CareKit apps, especially


158
00:05:06,886 --> 00:05:08,376
the work being done at Sharp


159
00:05:08,376 --> 00:05:09,246
Healthcare in Southern


160
00:05:09,246 --> 00:05:09,756
California.


161
00:05:11,056 --> 00:05:12,516
And so let's create our own use


162
00:05:12,516 --> 00:05:14,366
case inspired by their users,


163
00:05:14,586 --> 00:05:16,046
for patients undergoing eye


164
00:05:16,046 --> 00:05:18,156
surgery that takes advantage of


165
00:05:18,156 --> 00:05:19,446
our new CareKit features and the


166
00:05:19,446 --> 00:05:19,976
Bridge API.


167
00:05:19,976 --> 00:05:21,976
And it really showcases this


168
00:05:21,976 --> 00:05:23,296
importance of data syncing.


169
00:05:23,796 --> 00:05:27,406
And so, in this case, the two


170
00:05:27,406 --> 00:05:29,236
weeks post surgery are crucial


171
00:05:29,236 --> 00:05:30,176
to a healthy recovery.


172
00:05:31,266 --> 00:05:32,786
And patients must religiously


173
00:05:32,786 --> 00:05:34,556
take antibiotic eye drops to


174
00:05:34,556 --> 00:05:35,906
prevent infections that could


175
00:05:35,976 --> 00:05:37,796
ultimately lead to blindness if


176
00:05:37,796 --> 00:05:38,936
they're not treated early.


177
00:05:39,466 --> 00:05:42,016
And then in our scenario here,


178
00:05:42,366 --> 00:05:43,606
care teams can monitor their


179
00:05:43,606 --> 00:05:44,936
patient's results as they're


180
00:05:44,936 --> 00:05:45,806
being recorded.


181
00:05:46,476 --> 00:05:47,706
And if they aren't progressing


182
00:05:47,706 --> 00:05:49,186
through their care, they can


183
00:05:49,186 --> 00:05:50,406
make adjustments in their care


184
00:05:50,406 --> 00:05:51,246
plan if they need to.


185
00:05:51,766 --> 00:05:54,866
And patients can also see their


186
00:05:54,866 --> 00:05:56,516
eye drop adherence and their


187
00:05:56,516 --> 00:05:59,246
results via the Insights tab


188
00:05:59,246 --> 00:06:01,026
and, again, so can their care


189
00:06:01,026 --> 00:06:01,526
teams.


190
00:06:02,846 --> 00:06:04,276
Care teams can monitor their


191
00:06:04,276 --> 00:06:05,046
patient's results.


192
00:06:05,286 --> 00:06:06,586
And if they aren't progressing,


193
00:06:06,736 --> 00:06:08,006
they can make adjustments in


194
00:06:08,006 --> 00:06:09,256
their care plan if they need to


195
00:06:09,526 --> 00:06:10,916
or even reach out directly if


196
00:06:10,916 --> 00:06:11,416
they desire.


197
00:06:11,886 --> 00:06:15,266
And so this use case really


198
00:06:15,266 --> 00:06:16,786
showcases this importance of


199
00:06:16,786 --> 00:06:18,866
data syncing and why we, as a


200
00:06:18,866 --> 00:06:20,716
team, found it so crucial to


201
00:06:20,716 --> 00:06:22,276
begin integrating a solution.


202
00:06:23,436 --> 00:06:24,586
And so with that, I'd like to


203
00:06:24,586 --> 00:06:26,786
introduce our brand-new Bridge


204
00:06:26,786 --> 00:06:27,096
API.


205
00:06:30,556 --> 00:06:32,586
The Bridge API is an abstract


206
00:06:32,586 --> 00:06:35,046
cloud API that conforms to the


207
00:06:35,046 --> 00:06:36,906
CareKit schema and enables data


208
00:06:36,906 --> 00:06:38,466
syncing without any additional


209
00:06:38,466 --> 00:06:39,176
configuration.


210
00:06:39,696 --> 00:06:42,866
It's designed to allow CareKit


211
00:06:43,176 --> 00:06:44,646
apps to seamlessly integrate


212
00:06:44,646 --> 00:06:46,006
with backend cloud solutions.


213
00:06:46,706 --> 00:06:49,406
And it's built upon our current


214
00:06:49,406 --> 00:06:51,046
CareKit data model and


215
00:06:51,046 --> 00:06:51,586
architecture.


216
00:06:55,006 --> 00:06:56,736
The Bridge API provides all of


217
00:06:56,736 --> 00:06:58,746
the necessary hooks for cloud


218
00:06:58,746 --> 00:07:00,166
solutions to seamlessly hook


219
00:07:00,166 --> 00:07:01,136
into the CareKit framework.


220
00:07:01,636 --> 00:07:04,176
And this removes the need for


221
00:07:04,276 --> 00:07:06,156
third-party developers to dive


222
00:07:06,156 --> 00:07:08,246
deep into the code and extend


223
00:07:08,246 --> 00:07:09,196
the CareKit framework to their


224
00:07:09,196 --> 00:07:09,976
specific needs.


225
00:07:10,656 --> 00:07:14,686
The API abstracts that away and


226
00:07:14,686 --> 00:07:16,216
provides delegate functions for


227
00:07:16,216 --> 00:07:17,576
cloud solutions to utilize


228
00:07:17,576 --> 00:07:18,036
instead.


229
00:07:21,306 --> 00:07:22,666
And along with the Bridge, we've


230
00:07:22,666 --> 00:07:24,426
added some additional UI modules


231
00:07:24,726 --> 00:07:25,996
to make it even easier for


232
00:07:25,996 --> 00:07:29,286
developers to integrate and use.


233
00:07:30,496 --> 00:07:32,106
So let's take a look at how it


234
00:07:32,106 --> 00:07:32,556
works.


235
00:07:33,136 --> 00:07:36,436
Care plan activities are created


236
00:07:36,626 --> 00:07:38,286
using the OCKCarePlanActivity


237
00:07:38,286 --> 00:07:40,696
object as either an assessment,


238
00:07:41,006 --> 00:07:42,886
an intervention, or even a


239
00:07:42,886 --> 00:07:44,136
custom type created by the


240
00:07:44,136 --> 00:07:44,566
developer.


241
00:07:46,856 --> 00:07:48,656
These activities are then added


242
00:07:48,656 --> 00:07:50,846
to the OCKCarePlanStore via our


243
00:07:50,846 --> 00:07:51,906
current CareKit framework


244
00:07:51,906 --> 00:07:52,356
functions.


245
00:07:54,756 --> 00:07:56,426
Now this is where a Bridge API


246
00:07:56,426 --> 00:07:57,256
really comes into play.


247
00:07:58,066 --> 00:07:59,336
It sits between the care plan


248
00:07:59,336 --> 00:08:02,806
store and the cloud backend and


249
00:08:02,806 --> 00:08:04,326
it listens to changes in state


250
00:08:04,326 --> 00:08:04,836
in the store.


251
00:08:06,036 --> 00:08:07,496
And when a change is detected,


252
00:08:07,696 --> 00:08:09,816
the API reacts accordingly and


253
00:08:09,816 --> 00:08:11,576
allows cloud solutions to pick


254
00:08:11,576 --> 00:08:13,386
up those changes and sync the


255
00:08:13,386 --> 00:08:15,696
necessary data differentials to


256
00:08:15,696 --> 00:08:17,026
and from the cloud.


257
00:08:19,586 --> 00:08:21,266
It interfaces with both the


258
00:08:21,266 --> 00:08:23,876
local care plan store and the


259
00:08:23,876 --> 00:08:26,496
remote cloud store to ensure


260
00:08:26,496 --> 00:08:27,906
that any changes in state are


261
00:08:27,906 --> 00:08:28,696
handled accordingly.


262
00:08:30,056 --> 00:08:32,106
Activities can be added,


263
00:08:32,546 --> 00:08:34,206
removed, and updated.


264
00:08:35,155 --> 00:08:37,256
And the Bridge API hooks allow


265
00:08:37,256 --> 00:08:38,846
cloud solutions to pick up those


266
00:08:38,846 --> 00:08:40,446
changes and perform the


267
00:08:40,446 --> 00:08:41,785
necessary data syncing.


268
00:08:42,376 --> 00:08:45,826
And as data is changed, updates


269
00:08:45,826 --> 00:08:47,406
to the store pull down and


270
00:08:47,406 --> 00:08:48,676
stored in our local care plan


271
00:08:48,676 --> 00:08:51,156
store to ensure the last data


272
00:08:51,156 --> 00:08:52,796
sync is still available to the


273
00:08:52,796 --> 00:08:54,736
user even if their device can't


274
00:08:54,736 --> 00:08:55,776
connect to the cloud at that


275
00:08:55,776 --> 00:08:55,966
time.


276
00:08:58,456 --> 00:08:59,806
So let's take a look at how this


277
00:08:59,806 --> 00:09:00,466
is accomplished.


278
00:09:00,956 --> 00:09:03,736
You can continue adding and


279
00:09:03,736 --> 00:09:05,946
removing OCKCarePlanActivities


280
00:09:06,186 --> 00:09:07,256
just as you always have.


281
00:09:07,956 --> 00:09:10,176
And this means that no


282
00:09:10,176 --> 00:09:11,896
additional configuration needs


283
00:09:11,896 --> 00:09:13,526
to be made to your existing


284
00:09:13,526 --> 00:09:15,826
CareKit app activities to


285
00:09:15,826 --> 00:09:17,756
utilize the functionality of the


286
00:09:17,756 --> 00:09:19,126
API and actively sync data.


287
00:09:20,536 --> 00:09:22,546
But how does that actually work?


288
00:09:23,396 --> 00:09:25,296
The API handles changes in the


289
00:09:25,296 --> 00:09:26,966
care plan store by both


290
00:09:26,966 --> 00:09:28,576
notifying the delegate when the


291
00:09:28,576 --> 00:09:31,386
activity list has changed as


292
00:09:31,386 --> 00:09:32,536
well is when it receives an


293
00:09:32,536 --> 00:09:33,286
event update.


294
00:09:33,796 --> 00:09:36,656
And these Bridge API hooks and


295
00:09:36,656 --> 00:09:38,026
these methods that you see here


296
00:09:38,416 --> 00:09:40,136
allow our cloud solutions to


297
00:09:40,136 --> 00:09:41,746
hook into this framework and


298
00:09:41,746 --> 00:09:43,076
handle care plan store state


299
00:09:43,076 --> 00:09:43,466
changes.


300
00:09:45,036 --> 00:09:46,936
And all of this happens behind


301
00:09:46,936 --> 00:09:49,136
the scenes to allow your CareKit


302
00:09:49,946 --> 00:09:51,746
apps to access live updates in


303
00:09:51,746 --> 00:09:52,536
the care plan store.


304
00:09:55,366 --> 00:09:57,196
And so these methods allow


305
00:09:57,196 --> 00:09:59,106
developers, like all of you, to


306
00:09:59,106 --> 00:10:00,836
build out your very own backend


307
00:10:00,836 --> 00:10:02,486
cloud solutions that hook


308
00:10:02,586 --> 00:10:04,536
directly into our Bridge API and


309
00:10:04,846 --> 00:10:06,416
that allow you to handle care


310
00:10:06,416 --> 00:10:08,276
plan store state changes that


311
00:10:08,276 --> 00:10:09,626
fit your desired use case.


312
00:10:11,166 --> 00:10:12,866
However, if you're interested in


313
00:10:12,866 --> 00:10:14,416
using a third-party solution,


314
00:10:14,976 --> 00:10:15,936
you can utilize one of the


315
00:10:15,936 --> 00:10:17,616
existing solutions that have


316
00:10:17,616 --> 00:10:18,936
already taken advantage of the


317
00:10:18,936 --> 00:10:21,006
Bridge API and have available


318
00:10:21,006 --> 00:10:23,096
CareKit implementations ready to


319
00:10:23,096 --> 00:10:24,246
use off the shelf.


320
00:10:24,596 --> 00:10:27,406
And so we've worked with both


321
00:10:27,406 --> 00:10:31,386
Medable and CloudMine to help


322
00:10:31,386 --> 00:10:33,366
them design and create HIPPA


323
00:10:33,366 --> 00:10:34,596
compliant backend cloud


324
00:10:34,596 --> 00:10:36,216
solutions that use their


325
00:10:36,216 --> 00:10:37,756
existing HIPPA compliant backend


326
00:10:37,756 --> 00:10:38,516
cloud systems.


327
00:10:39,086 --> 00:10:41,646
And utilizing one of these


328
00:10:41,686 --> 00:10:43,826
solutions can help expedite the


329
00:10:43,826 --> 00:10:45,736
process of getting your CareKit


330
00:10:46,246 --> 00:10:47,086
app up and running with the


331
00:10:47,086 --> 00:10:49,386
Bridge API and actively syncing


332
00:10:49,386 --> 00:10:55,026
data to the cloud.


333
00:10:55,026 --> 00:10:56,196
So let's take a look at one of


334
00:10:56,196 --> 00:10:57,906
the existing solutions developed


335
00:10:57,906 --> 00:11:00,496
by Medable and demonstrate how


336
00:11:00,496 --> 00:11:02,216
to utilize the Bridge API hooks


337
00:11:02,696 --> 00:11:03,916
to sync data with their cloud


338
00:11:03,916 --> 00:11:04,346
solution.


339
00:11:07,336 --> 00:11:09,166
And so here you can see how to


340
00:11:09,166 --> 00:11:09,936
start the client.


341
00:11:09,936 --> 00:11:12,346
And this is going to reference a


342
00:11:12,346 --> 00:11:13,786
few necessary keys in your


343
00:11:13,786 --> 00:11:16,096
project's plist to ensure that a


344
00:11:16,096 --> 00:11:17,466
connection can be established


345
00:11:17,656 --> 00:11:19,086
and data can be in syncing with


346
00:11:19,086 --> 00:11:20,646
your provisioned account.


347
00:11:22,616 --> 00:11:24,626
From there, you can login with


348
00:11:24,626 --> 00:11:25,626
your configured username and


349
00:11:25,626 --> 00:11:28,206
password and proceed by either


350
00:11:28,206 --> 00:11:29,606
handling the fault if there is


351
00:11:29,606 --> 00:11:31,496
one or retrieving the return to


352
00:11:31,496 --> 00:11:32,826
Bridge reference for that user,


353
00:11:33,706 --> 00:11:34,626
which you can use to be in


354
00:11:34,626 --> 00:11:35,666
establishing connections.


355
00:11:37,326 --> 00:11:38,776
And once login has been


356
00:11:38,776 --> 00:11:40,406
successfully established, the


357
00:11:40,406 --> 00:11:42,186
cloud Bridge knows to utilize


358
00:11:42,186 --> 00:11:43,566
that account for subsequent


359
00:11:43,566 --> 00:11:44,106
transactions.


360
00:11:47,536 --> 00:11:48,876
And so once you've successfully


361
00:11:48,876 --> 00:11:50,566
logged in, you can list Medable


362
00:11:50,566 --> 00:11:51,436
store connections.


363
00:11:52,226 --> 00:11:53,236
And this will return the


364
00:11:53,236 --> 00:11:54,546
available connections for that


365
00:11:54,546 --> 00:11:54,876
user.


366
00:11:55,376 --> 00:11:57,706
And these connections can be in


367
00:11:57,706 --> 00:11:59,876
a variety of states: accepted,


368
00:12:00,196 --> 00:12:01,316
denied, or pending.


369
00:12:01,836 --> 00:12:05,046
And so from there you want to


370
00:12:05,046 --> 00:12:06,326
handle connections accordingly


371
00:12:06,806 --> 00:12:08,116
by either accepting pending


372
00:12:08,116 --> 00:12:09,906
connections or even grabbing the


373
00:12:09,906 --> 00:12:11,346
active connections for that user


374
00:12:11,946 --> 00:12:12,986
which you can use to begin


375
00:12:12,986 --> 00:12:13,576
syncing data.


376
00:12:15,296 --> 00:12:16,416
Now it's really important to


377
00:12:16,416 --> 00:12:18,096
note here that data will not


378
00:12:18,096 --> 00:12:19,546
successfully sync to the cloud


379
00:12:19,936 --> 00:12:21,116
unless you have an active


380
00:12:21,116 --> 00:12:21,656
connection.


381
00:12:22,656 --> 00:12:24,106
And this is going to ensure that


382
00:12:24,106 --> 00:12:26,306
users only have access to data


383
00:12:26,716 --> 00:12:27,796
to and from those that they have


384
00:12:27,796 --> 00:12:28,356
authorized.


385
00:12:29,846 --> 00:12:31,596
And so denied connections will


386
00:12:31,596 --> 00:12:33,036
prevent any data from syncing


387
00:12:33,036 --> 00:12:34,776
with the cloud and being shared


388
00:12:34,776 --> 00:12:35,516
with the initiator.


389
00:12:39,216 --> 00:12:40,756
And so now that we've looked at


390
00:12:40,756 --> 00:12:41,606
creating connections and


391
00:12:41,606 --> 00:12:43,006
establishing them via Medable


392
00:12:43,006 --> 00:12:45,496
solution, let's take a look at


393
00:12:45,496 --> 00:12:47,346
another new CareKit feature that


394
00:12:47,346 --> 00:12:49,166
utilizes these connections and


395
00:12:49,166 --> 00:12:49,766
our Bridge API.


396
00:12:53,256 --> 00:12:56,046
This new API opens the door for


397
00:12:56,046 --> 00:12:57,546
not only syncing CareKit data


398
00:12:57,546 --> 00:12:59,376
such as activities and events,


399
00:13:00,076 --> 00:13:01,516
but it can be used to sync data


400
00:13:01,516 --> 00:13:02,656
of other types as well.


401
00:13:03,876 --> 00:13:05,126
And so a really great example of


402
00:13:05,126 --> 00:13:06,326
this is secure messaging.


403
00:13:06,786 --> 00:13:09,706
Secure messaging can be seen via


404
00:13:09,706 --> 00:13:11,656
our Connect tab and showcased


405
00:13:11,656 --> 00:13:12,966
using the new UI modules


406
00:13:13,196 --> 00:13:14,946
developed in our latest CareKit


407
00:13:15,386 --> 00:13:15,546
update.


408
00:13:16,596 --> 00:13:18,036
If you attended the previous


409
00:13:18,036 --> 00:13:19,586
session, What's New in CareKit


410
00:13:19,586 --> 00:13:21,256
and ReserachKit, you will be


411
00:13:21,256 --> 00:13:22,746
familiar with the added inbox


412
00:13:22,746 --> 00:13:23,896
feature via the Connect tab.


413
00:13:28,956 --> 00:13:31,146
Inbox provides developers with


414
00:13:31,146 --> 00:13:32,716
the ability to easily display


415
00:13:32,716 --> 00:13:33,816
messages in a nice


416
00:13:33,846 --> 00:13:34,986
conversation-like format.


417
00:13:35,516 --> 00:13:38,556
And that messaging feature can


418
00:13:38,556 --> 00:13:40,366
be tied directly into the Bridge


419
00:13:40,366 --> 00:13:42,846
API and cloud backend solutions


420
00:13:43,446 --> 00:13:45,136
to allow patients and care teams


421
00:13:45,396 --> 00:13:47,286
to securely message directly in


422
00:13:47,286 --> 00:13:48,176
their CareKit apps.


423
00:13:49,316 --> 00:13:50,376
And so let's take a look at how


424
00:13:50,376 --> 00:13:54,606
to accomplish this in the code.


425
00:13:54,816 --> 00:13:56,856
Use the OCKConnectViewController


426
00:13:57,716 --> 00:13:58,246
delegate the


427
00:13:58,246 --> 00:13:59,676
OCKConnectViewController data


428
00:13:59,676 --> 00:14:01,296
source methods to set up your


429
00:14:01,296 --> 00:14:01,916
messaging UI.


430
00:14:03,556 --> 00:14:05,246
And please note that not all the


431
00:14:05,246 --> 00:14:06,746
necessary delegate functions are


432
00:14:06,746 --> 00:14:08,896
showcased here, but we've chosen


433
00:14:08,896 --> 00:14:10,106
to highlight some of the more


434
00:14:10,106 --> 00:14:11,066
specific methods.


435
00:14:11,816 --> 00:14:15,176
And so this first method is


436
00:14:15,176 --> 00:14:16,996
necessary to tell the delegate


437
00:14:17,196 --> 00:14:19,056
how many message items exist for


438
00:14:19,056 --> 00:14:20,206
the corresponding care team


439
00:14:20,206 --> 00:14:20,646
contact.


440
00:14:21,856 --> 00:14:23,586
Patients and care teams could


441
00:14:23,586 --> 00:14:25,486
have multiple conversations, so


442
00:14:25,486 --> 00:14:26,996
knowing which messages go with


443
00:14:26,996 --> 00:14:28,286
which conversation will be


444
00:14:28,286 --> 00:14:28,856
crucial here.


445
00:14:29,356 --> 00:14:33,326
And next you can implement the


446
00:14:33,326 --> 00:14:34,706
connectMessageItemAtIndex


447
00:14:34,736 --> 00:14:36,456
function and return the


448
00:14:36,456 --> 00:14:37,666
appropriate message at that


449
00:14:37,666 --> 00:14:38,066
index.


450
00:14:39,576 --> 00:14:40,366
An array of


451
00:14:40,366 --> 00:14:42,226
OCKConnectMessageItems can be


452
00:14:42,226 --> 00:14:44,066
stored as you send and receive


453
00:14:44,066 --> 00:14:44,636
messages.


454
00:14:45,266 --> 00:14:46,276
And you can use the index


455
00:14:46,276 --> 00:14:48,216
property of this method to index


456
00:14:48,216 --> 00:14:49,536
into that array and return the


457
00:14:49,536 --> 00:14:50,516
appropriate message.


458
00:14:51,056 --> 00:14:53,156
And what this is going to do is


459
00:14:53,156 --> 00:14:54,596
it's going to allow your UI to


460
00:14:54,596 --> 00:14:56,056
display these messages in the


461
00:14:56,056 --> 00:14:56,736
appropriate order.


462
00:14:59,456 --> 00:15:01,346
And last you can implement the


463
00:15:01,346 --> 00:15:02,866
didSendConnectMessage function


464
00:15:03,356 --> 00:15:04,996
to securely send a message over


465
00:15:04,996 --> 00:15:06,486
to your care team or over to


466
00:15:06,486 --> 00:15:06,996
your patient.


467
00:15:07,476 --> 00:15:09,936
And so this is where our Bridge


468
00:15:09,936 --> 00:15:11,736
API and these backend cloud


469
00:15:11,736 --> 00:15:13,406
solutions really come into play.


470
00:15:14,096 --> 00:15:16,456
You can utilize those Bridge


471
00:15:16,456 --> 00:15:18,446
methods to either create a new


472
00:15:18,446 --> 00:15:20,586
conversation or to even append a


473
00:15:20,586 --> 00:15:21,656
new message to the existing


474
00:15:21,656 --> 00:15:22,546
conversation thread.


475
00:15:23,056 --> 00:15:25,536
And so let's see how that might


476
00:15:25,536 --> 00:15:26,906
look using Medable solution.


477
00:15:31,316 --> 00:15:32,866
So here you can see how to


478
00:15:32,866 --> 00:15:33,846
create the conversation.


479
00:15:34,486 --> 00:15:35,496
And this takes the message


480
00:15:35,536 --> 00:15:37,036
object which can be created from


481
00:15:37,036 --> 00:15:38,956
your delegate properties and an


482
00:15:38,956 --> 00:15:40,896
array of targets indicating who


483
00:15:40,896 --> 00:15:41,896
those messages should be sent


484
00:15:41,896 --> 00:15:41,963
to.


485
00:15:43,496 --> 00:15:45,326
Now in this target ID property


486
00:15:45,326 --> 00:15:46,326
you see of the target's


487
00:15:46,326 --> 00:15:48,166
parameter will be the unique


488
00:15:48,166 --> 00:15:49,546
identifier of the connection and


489
00:15:49,546 --> 00:15:50,706
whom that message should be


490
00:15:51,306 --> 00:15:51,426
sent.


491
00:15:52,196 --> 00:15:53,906
And success of this function


492
00:15:54,046 --> 00:15:55,016
will not only create the


493
00:15:55,016 --> 00:15:56,636
conversation but it will append


494
00:15:56,636 --> 00:15:57,746
the attached message.


495
00:15:58,276 --> 00:16:00,546
It's really important to note


496
00:16:00,546 --> 00:16:02,566
here that we recommend not


497
00:16:02,616 --> 00:16:04,326
creating multiple conversations


498
00:16:04,566 --> 00:16:05,786
with the same connection via


499
00:16:05,846 --> 00:16:07,006
this createConversation


500
00:16:07,006 --> 00:16:07,386
function.


501
00:16:09,126 --> 00:16:10,606
Although it can be done, it's


502
00:16:10,606 --> 00:16:12,126
really best practice to create


503
00:16:12,126 --> 00:16:13,336
the conversation once.


504
00:16:13,876 --> 00:16:15,366
And subsequent messages should


505
00:16:15,366 --> 00:16:16,576
be appended using the


506
00:16:16,576 --> 00:16:17,506
sendMessage function.


507
00:16:20,176 --> 00:16:21,866
And so this sendMessage function


508
00:16:22,106 --> 00:16:23,306
is very similar to the one


509
00:16:23,306 --> 00:16:23,546
above.


510
00:16:24,146 --> 00:16:25,206
However, it takes the message


511
00:16:25,206 --> 00:16:27,276
object and now a conversation


512
00:16:27,276 --> 00:16:27,536
ID.


513
00:16:29,516 --> 00:16:31,096
When you create the conversation


514
00:16:31,096 --> 00:16:32,856
above, it's important to keep a


515
00:16:32,856 --> 00:16:34,356
reference of that returned ID


516
00:16:34,876 --> 00:16:36,366
which you should be using as the


517
00:16:36,366 --> 00:16:37,626
conversation ID parameter of


518
00:16:37,626 --> 00:16:38,286
this function.


519
00:16:38,976 --> 00:16:40,136
And this is going to ensure that


520
00:16:40,136 --> 00:16:41,676
when you send a new message, it


521
00:16:41,676 --> 00:16:42,536
gets appended to your


522
00:16:42,536 --> 00:16:43,946
appropriate conversation thread.


523
00:16:44,536 --> 00:16:47,236
And for good user experience,


524
00:16:47,416 --> 00:16:49,366
it's also important to perform


525
00:16:49,366 --> 00:16:51,566
any necessary UI updates upon


526
00:16:51,636 --> 00:16:53,176
creating a new conversation or


527
00:16:53,176 --> 00:16:54,376
even appending a new message to


528
00:16:54,376 --> 00:16:55,696
an existing conversation thread


529
00:16:56,346 --> 00:16:57,626
to ensure that your users are


530
00:16:57,626 --> 00:16:59,166
going to get instant feedback if


531
00:16:59,166 --> 00:17:00,486
their messages were successfully


532
00:17:00,486 --> 00:17:01,016
sent or not.


533
00:17:01,536 --> 00:17:04,626
And so this messaging feature is


534
00:17:04,626 --> 00:17:06,086
another great example of how our


535
00:17:06,086 --> 00:17:07,996
Bridge API and these cloud


536
00:17:07,996 --> 00:17:10,205
solutions are helping to improve


537
00:17:10,336 --> 00:17:11,536
the at-home patient care


538
00:17:11,536 --> 00:17:12,185
experience.


539
00:17:15,306 --> 00:17:16,726
And so now that we've seen the


540
00:17:16,726 --> 00:17:17,836
architecture of the bridge API


541
00:17:18,486 --> 00:17:19,726
and how to utilize it along with


542
00:17:19,726 --> 00:17:21,175
the corresponding cloud backend,


543
00:17:21,616 --> 00:17:22,826
I'd like to invite Akshay to the


544
00:17:22,826 --> 00:17:24,106
stage to give you guys a quick


545
00:17:24,106 --> 00:17:24,356
demo.


546
00:17:25,516 --> 00:17:29,316
[ Applause ]


547
00:17:29,816 --> 00:17:30,196
>> All right.


548
00:17:30,956 --> 00:17:32,336
Hello everyone and welcome to


549
00:17:32,336 --> 00:17:33,556
the CareKit Cloud Bridge Sync


550
00:17:33,556 --> 00:17:33,806
Demo.


551
00:17:34,586 --> 00:17:36,276
In this demo, we'll see how easy


552
00:17:36,276 --> 00:17:37,986
it is to share data between a


553
00:17:37,986 --> 00:17:39,616
patient app and a care team app


554
00:17:39,616 --> 00:17:40,866
using a HIPPA compliant secure


555
00:17:40,866 --> 00:17:41,416
cloud bridge.


556
00:17:42,416 --> 00:17:43,796
For this demo, we'll be using


557
00:17:43,796 --> 00:17:45,036
the OCKSample app which is


558
00:17:45,036 --> 00:17:46,636
available Open Source on GitHub.


559
00:17:47,396 --> 00:17:49,076
The OCKSample app is developed


560
00:17:49,076 --> 00:17:50,826
by our [inaudible] team with all


561
00:17:50,826 --> 00:17:51,976
the best practices in place.


562
00:17:52,536 --> 00:17:53,946
So we believe, for this demo,


563
00:17:53,946 --> 00:17:55,086
the Sample app would be a good


564
00:17:55,086 --> 00:17:56,796
starting point because anyone


565
00:17:56,796 --> 00:17:57,976
who's familiar with CareKit is


566
00:17:57,976 --> 00:17:59,116
also very likely familiar with


567
00:17:59,116 --> 00:17:59,656
the Sample app.


568
00:18:00,196 --> 00:18:01,896
For more reference on the Sample


569
00:18:01,896 --> 00:18:03,356
app, please refer to last year's


570
00:18:03,356 --> 00:18:04,966
WWDC session Getting Started


571
00:18:05,036 --> 00:18:05,646
with CareKit.


572
00:18:06,786 --> 00:18:07,856
So let's see what the Sample app


573
00:18:07,856 --> 00:18:08,596
looks like right now.


574
00:18:09,156 --> 00:18:12,636
On my computer here, I have two


575
00:18:12,636 --> 00:18:13,166
simulators.


576
00:18:13,776 --> 00:18:15,456
In my iPhone simulator, we have


577
00:18:15,456 --> 00:18:16,226
the Sample app.


578
00:18:17,376 --> 00:18:18,596
And currently for the Sample


579
00:18:18,596 --> 00:18:20,606
app, we have created and stored


580
00:18:20,606 --> 00:18:22,406
a care plan store object locally


581
00:18:23,306 --> 00:18:24,956
and an OCKCarePatientObject


582
00:18:25,086 --> 00:18:26,276
which is associated with this


583
00:18:26,276 --> 00:18:26,876
care plan store.


584
00:18:28,056 --> 00:18:29,316
There are three tabs: the Care


585
00:18:29,316 --> 00:18:31,186
Contents tab which shows all the


586
00:18:31,186 --> 00:18:32,496
activities that belong to this


587
00:18:32,716 --> 00:18:35,116
care plan store, an Insights tab


588
00:18:35,426 --> 00:18:36,906
which shows [inaudible] insight


589
00:18:36,906 --> 00:18:39,406
items, and a Connect tab which


590
00:18:39,406 --> 00:18:41,096
shows OCKContacts that are


591
00:18:41,096 --> 00:18:42,826
associated with this OCKPatient.


592
00:18:44,086 --> 00:18:45,736
Explicitly for this demo, we


593
00:18:45,736 --> 00:18:47,176
have also created a Care Team


594
00:18:47,176 --> 00:18:47,346
app.


595
00:18:48,086 --> 00:18:49,686
On my iPad simulator, we have


596
00:18:49,686 --> 00:18:51,516
the Care Team app which shows


597
00:18:51,516 --> 00:18:53,196
the care team member and a list


598
00:18:53,196 --> 00:18:54,486
of patients that belong to this


599
00:18:54,486 --> 00:18:55,096
care team member.


600
00:18:56,096 --> 00:18:57,516
Clicking on a patient will take


601
00:18:57,516 --> 00:18:58,986
us to their profile where we can


602
00:18:58,986 --> 00:18:59,946
see their activities.


603
00:19:00,426 --> 00:19:01,386
And for this demo, we're going


604
00:19:01,386 --> 00:19:02,586
to show one of the patient's


605
00:19:02,586 --> 00:19:04,296
activities to show the data


606
00:19:04,296 --> 00:19:04,676
syncing.


607
00:19:06,026 --> 00:19:07,286
Currently, both the apps have


608
00:19:07,286 --> 00:19:09,056
local care plan stores, so we


609
00:19:09,056 --> 00:19:10,376
won't be able to sync the data


610
00:19:10,376 --> 00:19:11,216
between the two apps.


611
00:19:11,736 --> 00:19:12,896
Let's go ahead and bridge this


612
00:19:12,896 --> 00:19:16,126
gap using the cloud bridge.


613
00:19:16,296 --> 00:19:17,496
Here's my Xcode workspace.


614
00:19:17,666 --> 00:19:18,696
And here are my two projects:


615
00:19:18,806 --> 00:19:23,356
the Care Team project and the


616
00:19:23,596 --> 00:19:25,286
OCKSample project.


617
00:19:28,756 --> 00:19:30,446
Let's go ahead and first add our


618
00:19:30,446 --> 00:19:31,806
cloud bridge to our Care Team


619
00:19:31,806 --> 00:19:32,276
app first.


620
00:19:33,516 --> 00:19:34,786
And as Kelsey mentioned earlier,


621
00:19:34,786 --> 00:19:36,196
we will be using Medable as our


622
00:19:36,196 --> 00:19:37,276
cloud bridge solution for this


623
00:19:37,276 --> 00:19:37,516
demo.


624
00:19:38,876 --> 00:19:39,826
So the first thing that you need


625
00:19:39,826 --> 00:19:42,616
to do is go to Medable's GitHub


626
00:19:42,676 --> 00:19:44,816
and download or clone their API


627
00:19:44,816 --> 00:19:46,856
into our project and then


628
00:19:46,856 --> 00:19:48,216
integrate the framework into our


629
00:19:48,216 --> 00:19:48,636
project.


630
00:19:49,606 --> 00:19:50,596
I've already downloaded


631
00:19:50,596 --> 00:19:52,666
Medable's API and added the


632
00:19:52,666 --> 00:19:54,076
Medable's framework into my


633
00:19:54,076 --> 00:19:55,776
project right here with all my


634
00:19:55,776 --> 00:19:58,026
other like CareKit and


635
00:19:58,026 --> 00:19:58,876
ResearchKit and all of the


636
00:19:58,876 --> 00:19:59,336
frameworks.


637
00:20:01,676 --> 00:20:03,656
To use Medable's API, we have to


638
00:20:03,656 --> 00:20:04,716
add some of their files.


639
00:20:05,526 --> 00:20:07,346
We can do this by going to their


640
00:20:07,346 --> 00:20:09,106
CareKit Bridge API folder and


641
00:20:09,336 --> 00:20:11,196
dragging and dropping it into


642
00:20:11,196 --> 00:20:12,786
our project right here.


643
00:20:13,306 --> 00:20:16,636
Let's see what this directory


644
00:20:16,636 --> 00:20:16,896
has.


645
00:20:17,416 --> 00:20:19,286
It has three types of files.


646
00:20:19,446 --> 00:20:20,996
First, all the helper files that


647
00:20:20,996 --> 00:20:23,426
we need which are Medable object


648
00:20:23,546 --> 00:20:24,686
counterparts of the CareKit


649
00:20:24,686 --> 00:20:26,046
objects, for example


650
00:20:26,046 --> 00:20:26,976
MDCarePlanStore,


651
00:20:27,416 --> 00:20:29,146
MDCarePlanPatient, etcetera.


652
00:20:30,446 --> 00:20:32,076
The second is the Medable


653
00:20:32,306 --> 00:20:32,846
[inaudible] Bridging Header.


654
00:20:33,826 --> 00:20:34,836
Let's go ahead and add this


655
00:20:34,836 --> 00:20:35,926
bridging header to our project.


656
00:20:36,786 --> 00:20:38,786
I'll go to my project and in my


657
00:20:38,786 --> 00:20:39,396
build settings.


658
00:20:39,396 --> 00:20:41,376
I look for the bridging header.


659
00:20:41,376 --> 00:20:45,036
And add the bridging header


660
00:20:45,036 --> 00:20:45,346
right here.


661
00:20:48,516 --> 00:20:51,856
Perfect. Now we have added all


662
00:20:51,856 --> 00:20:53,176
the files that we needed from


663
00:20:53,176 --> 00:20:54,306
Medable into our project.


664
00:20:56,436 --> 00:20:57,666
The next thing that we have in


665
00:20:57,666 --> 00:20:59,236
this directory is the care plan


666
00:20:59,236 --> 00:20:59,936
store category.


667
00:21:00,846 --> 00:21:02,106
This category has all the


668
00:21:02,106 --> 00:21:03,726
methods that we need to create


669
00:21:03,726 --> 00:21:05,126
the Medable counterpart objects


670
00:21:05,126 --> 00:21:06,416
from our CareKit object.


671
00:21:08,556 --> 00:21:10,696
To use Medable's API, we also


672
00:21:10,696 --> 00:21:12,386
need to add a few necessary


673
00:21:12,386 --> 00:21:13,616
methods into our project.


674
00:21:14,316 --> 00:21:15,416
We'll be adding those into our


675
00:21:15,416 --> 00:21:16,986
LocalCarePlanStore.m files.


676
00:21:18,026 --> 00:21:19,696
Let's first add those methods in


677
00:21:19,696 --> 00:21:20,846
and then I'll talk about what


678
00:21:20,846 --> 00:21:22,156
those methods do.


679
00:21:23,816 --> 00:21:25,696
In my CarePlanStore.m file, I'm


680
00:21:26,406 --> 00:21:27,586
going to add those methods.


681
00:21:28,466 --> 00:21:30,516
And these methods will mimic


682
00:21:30,516 --> 00:21:31,846
whatever the local care plan


683
00:21:31,846 --> 00:21:32,626
store methods do.


684
00:21:32,956 --> 00:21:33,626
For example, in our


685
00:21:33,626 --> 00:21:34,646
CarePlanStore we have an


686
00:21:34,646 --> 00:21:36,746
activity method and the methods


687
00:21:36,746 --> 00:21:38,096
that we just added will do


688
00:21:38,176 --> 00:21:39,306
exactly the same but on the


689
00:21:39,306 --> 00:21:42,426
Medable side so all of these


690
00:21:42,426 --> 00:21:43,946
methods are adding activity,


691
00:21:44,116 --> 00:21:45,736
removing an activity, updating


692
00:21:45,736 --> 00:21:46,716
an event, etcetera.


693
00:21:47,286 --> 00:21:49,986
With this, we have added


694
00:21:49,986 --> 00:21:51,756
everything that we need as files


695
00:21:51,756 --> 00:21:53,086
and code into our project.


696
00:21:54,456 --> 00:21:56,696
To use Medable's API, you need


697
00:21:56,696 --> 00:21:57,736
to create an account with them.


698
00:21:58,576 --> 00:21:59,866
When you create an account, you


699
00:21:59,866 --> 00:22:00,996
get three types of credentials:


700
00:22:01,246 --> 00:22:04,586
a client key, a base URL, and an


701
00:22:04,586 --> 00:22:05,396
organization name.


702
00:22:06,226 --> 00:22:07,376
We have to add these three


703
00:22:07,376 --> 00:22:09,356
credentials into our project to


704
00:22:09,356 --> 00:22:10,826
hook up our project to our


705
00:22:10,826 --> 00:22:11,686
account on Medable.


706
00:22:11,996 --> 00:22:13,376
Let's go ahead and see how to do


707
00:22:13,376 --> 00:22:13,546
that.


708
00:22:14,726 --> 00:22:16,276
Go to your projects info.plist


709
00:22:16,276 --> 00:22:18,336
file and create a dictionary.


710
00:22:19,726 --> 00:22:22,186
And we'll call it Medable, and


711
00:22:25,536 --> 00:22:27,176
set it as a dictionary.


712
00:22:30,186 --> 00:22:31,286
Now in this dictionary, we'll


713
00:22:31,286 --> 00:22:32,436
have to add three key value


714
00:22:32,436 --> 00:22:32,766
pairs.


715
00:22:32,766 --> 00:22:35,706
The first is the ClientKey.


716
00:22:37,136 --> 00:22:38,836
Second one is the BaseURL.


717
00:22:39,366 --> 00:22:42,646
And third is the Organization


718
00:22:42,646 --> 00:22:42,856
name.


719
00:22:47,856 --> 00:22:50,216
Perfect. When we add these three


720
00:22:50,216 --> 00:22:51,746
credentials, we should be able


721
00:22:51,746 --> 00:22:53,626
to link our project to our


722
00:22:53,626 --> 00:22:54,556
account at Medable.


723
00:22:54,616 --> 00:22:57,556
We have to perform all of these


724
00:22:57,556 --> 00:22:58,946
steps for our Sample app as


725
00:22:58,946 --> 00:22:59,156
well.


726
00:22:59,956 --> 00:23:01,226
And for this demo, I've already


727
00:23:01,226 --> 00:23:02,486
added all of these steps into


728
00:23:02,486 --> 00:23:03,436
our Sample app already.


729
00:23:04,796 --> 00:23:07,396
So now both of our apps are


730
00:23:07,516 --> 00:23:08,756
having [inaudible] Medable and


731
00:23:09,276 --> 00:23:10,146
configured with the cloud


732
00:23:10,146 --> 00:23:10,396
bridge.


733
00:23:11,326 --> 00:23:13,726
Let's go ahead and use those.


734
00:23:13,936 --> 00:23:15,036
When we create an account with


735
00:23:15,036 --> 00:23:16,856
Medable, with their dashboard,


736
00:23:17,146 --> 00:23:18,586
we should be able to create a


737
00:23:18,586 --> 00:23:19,656
care team member account.


738
00:23:20,686 --> 00:23:22,086
And we can do that by providing


739
00:23:22,086 --> 00:23:24,156
an e-mail, a password, and a


740
00:23:24,156 --> 00:23:24,676
phone number.


741
00:23:25,496 --> 00:23:26,576
So when we create the care team


742
00:23:26,576 --> 00:23:30,076
member account, in return we get


743
00:23:30,076 --> 00:23:31,096
a verification token.


744
00:23:31,616 --> 00:23:33,786
That verification token is


745
00:23:33,786 --> 00:23:35,086
needed by the care team member


746
00:23:35,086 --> 00:23:37,476
to log themselves in.


747
00:23:37,696 --> 00:23:39,926
And these properties can be


748
00:23:39,926 --> 00:23:41,586
provided through the UI,


749
00:23:41,786 --> 00:23:43,326
preferably using the ResearchKit


750
00:23:43,326 --> 00:23:43,956
login step.


751
00:23:43,956 --> 00:23:46,146
So let's go ahead and add those


752
00:23:46,146 --> 00:23:46,266
in.


753
00:23:46,816 --> 00:23:49,586
I'll go into my projects app


754
00:23:49,586 --> 00:23:50,126
delegate file.


755
00:23:50,636 --> 00:23:52,126
And first I will add all the


756
00:23:52,126 --> 00:23:54,696
necessary properties that I


757
00:23:54,696 --> 00:23:55,206
would be needing.


758
00:23:57,376 --> 00:23:59,126
Here I have a cloud bridge.


759
00:23:59,126 --> 00:24:01,306
I'll talk a little bit in more


760
00:24:01,306 --> 00:24:02,456
detail about this in a minute.


761
00:24:03,206 --> 00:24:04,756
The e-mail, the password, and a


762
00:24:04,756 --> 00:24:06,156
verification token of the care


763
00:24:06,156 --> 00:24:06,666
team member.


764
00:24:07,236 --> 00:24:09,276
And then I'll get back to these


765
00:24:09,276 --> 00:24:09,966
properties in a minute.


766
00:24:11,406 --> 00:24:13,096
Let's go ahead and add Medable's


767
00:24:13,096 --> 00:24:13,876
login method.


768
00:24:16,276 --> 00:24:18,166
Here's the [inaudible] .login


769
00:24:18,166 --> 00:24:19,856
method which takes an e-mail, a


770
00:24:19,856 --> 00:24:21,386
password, and a verification


771
00:24:21,386 --> 00:24:21,726
token.


772
00:24:22,286 --> 00:24:24,736
If the person is successfully


773
00:24:24,736 --> 00:24:27,566
logged in, we should be able to


774
00:24:27,566 --> 00:24:28,306
create a patient.


775
00:24:28,466 --> 00:24:29,796
Otherwise, this method returns a


776
00:24:29,796 --> 00:24:30,116
fault.


777
00:24:30,606 --> 00:24:34,196
Let's say the care team member


778
00:24:34,196 --> 00:24:34,806
is logged in.


779
00:24:35,316 --> 00:24:36,756
Now we should be able to create


780
00:24:36,756 --> 00:24:37,956
a patient from here.


781
00:24:38,946 --> 00:24:39,676
And that's where these


782
00:24:39,676 --> 00:24:40,406
properties come in.


783
00:24:40,406 --> 00:24:43,056
To create a patient, we need the


784
00:24:43,056 --> 00:24:44,686
patient's first name, their last


785
00:24:44,686 --> 00:24:46,456
name, and all of their details


786
00:24:46,726 --> 00:24:47,616
and their e-mail ID.


787
00:24:48,146 --> 00:24:51,306
Let's go ahead and create a


788
00:24:51,306 --> 00:24:52,466
patient using these properties


789
00:24:53,146 --> 00:24:54,516
adding the first name, the last


790
00:24:54,516 --> 00:24:56,006
name, all of the properties of


791
00:24:56,006 --> 00:24:56,496
the patient.


792
00:24:58,466 --> 00:25:00,096
And this method does two things.


793
00:25:01,136 --> 00:25:03,436
In its callback, if we were not


794
00:25:03,436 --> 00:25:05,676
able to create a patient, it


795
00:25:05,676 --> 00:25:06,326
returns a fault.


796
00:25:06,956 --> 00:25:08,226
But if you were successfully


797
00:25:08,226 --> 00:25:09,986
able to create a patient, then


798
00:25:09,986 --> 00:25:11,196
the callback returns a bridge.


799
00:25:12,336 --> 00:25:13,446
Now this is the place where you


800
00:25:13,446 --> 00:25:14,946
can access the care plan store.


801
00:25:15,686 --> 00:25:16,846
So by doing [inaudible] cloud


802
00:25:16,846 --> 00:25:18,566
bridge is setting up a local


803
00:25:18,566 --> 00:25:19,836
variable, the cloud bridge, to


804
00:25:20,086 --> 00:25:21,026
the cloud bridge that we


805
00:25:21,026 --> 00:25:22,816
received from callback, we have


806
00:25:22,816 --> 00:25:24,256
access to the cloud bridge from


807
00:25:24,706 --> 00:25:25,566
anywhere in our app.


808
00:25:26,546 --> 00:25:27,706
And that's what we can do


809
00:25:27,706 --> 00:25:29,356
cloudbridge.careplanstore.


810
00:25:29,386 --> 00:25:30,606
It will give us access to the


811
00:25:30,606 --> 00:25:31,726
care plan store that we need.


812
00:25:32,146 --> 00:25:33,486
We will replace our care plans


813
00:25:33,486 --> 00:25:34,796
store and make the


814
00:25:34,796 --> 00:25:36,486
cloudbridge.careplanstore as our


815
00:25:36,486 --> 00:25:37,446
default care plan store


816
00:25:37,446 --> 00:25:40,046
throughout the app.


817
00:25:40,306 --> 00:25:41,286
The second thing that this


818
00:25:41,396 --> 00:25:43,336
method does is sends an


819
00:25:43,336 --> 00:25:44,766
invitation token to the patient


820
00:25:44,926 --> 00:25:45,916
in their e-mail which we


821
00:25:45,916 --> 00:25:48,646
provided right here.


822
00:25:48,876 --> 00:25:50,036
When the patient receives this


823
00:25:50,036 --> 00:25:53,016
e-mail, they should be able to


824
00:25:53,016 --> 00:25:54,276
register themselves through the


825
00:25:54,276 --> 00:25:56,266
patient app.


826
00:25:56,266 --> 00:25:57,336
And they would need this


827
00:25:57,506 --> 00:25:59,076
verification token which is sent


828
00:25:59,076 --> 00:26:00,406
-- the invitation token that is


829
00:26:00,406 --> 00:26:02,316
sent to their e-mail to register


830
00:26:02,316 --> 00:26:02,816
themselves.


831
00:26:03,706 --> 00:26:04,886
Let's go ahead and register the


832
00:26:04,886 --> 00:26:06,586
patient in the patient app.


833
00:26:07,136 --> 00:26:08,936
In my patient app, I'll go to


834
00:26:08,936 --> 00:26:11,056
the app delegate and add all the


835
00:26:11,056 --> 00:26:12,786
variables that we need for a


836
00:26:12,786 --> 00:26:13,596
patient to register.


837
00:26:13,986 --> 00:26:15,166
This includes the first name,


838
00:26:15,216 --> 00:26:17,206
last name, e-mail, their mobile


839
00:26:17,206 --> 00:26:18,636
number, a password, and an


840
00:26:18,636 --> 00:26:19,406
invitation token.


841
00:26:20,176 --> 00:26:21,416
And all of these properties can


842
00:26:21,416 --> 00:26:22,476
be provided through the UI.


843
00:26:23,206 --> 00:26:25,476
Let's go ahead and add the


844
00:26:25,476 --> 00:26:26,946
method to register the patient.


845
00:26:30,476 --> 00:26:32,056
The register account method


846
00:26:32,056 --> 00:26:33,096
takes in the first name, the


847
00:26:33,096 --> 00:26:34,856
last name, the e-mail, the


848
00:26:34,856 --> 00:26:36,716
mobile number, the password, and


849
00:26:36,716 --> 00:26:37,576
the invitation token.


850
00:26:37,976 --> 00:26:39,536
And, again, in the callback,


851
00:26:39,636 --> 00:26:40,616
returns the cloud bridge.


852
00:26:41,336 --> 00:26:42,686
This is, again, the same cloud


853
00:26:42,686 --> 00:26:44,036
bridge that the care team


854
00:26:44,036 --> 00:26:44,786
members are accessing.


855
00:26:45,116 --> 00:26:45,946
So if you do the


856
00:26:45,946 --> 00:26:48,466
cloudbridge.careplanstore, both


857
00:26:48,466 --> 00:26:49,626
the care team member and the


858
00:26:49,626 --> 00:26:51,026
patient should be able to access


859
00:26:51,026 --> 00:26:52,046
the same care plan store.


860
00:26:53,146 --> 00:26:54,276
Make sure you save this cloud


861
00:26:54,276 --> 00:26:55,336
bridge in one of your variables


862
00:26:55,336 --> 00:26:56,846
in your file and make the


863
00:26:56,846 --> 00:26:58,246
cloudbridge.careplanstore as


864
00:26:58,246 --> 00:26:59,696
your default care plan store


865
00:26:59,696 --> 00:27:02,026
throughout the app.


866
00:27:02,296 --> 00:27:03,736
When we do this, we have


867
00:27:03,736 --> 00:27:06,256
successfully made care team app


868
00:27:06,256 --> 00:27:07,986
and the patient app access a


869
00:27:08,086 --> 00:27:08,976
common care plan store.


870
00:27:10,006 --> 00:27:12,346
Now any activity or an update in


871
00:27:12,346 --> 00:27:13,776
an activity which is done on


872
00:27:13,776 --> 00:27:14,696
either of the apps should


873
00:27:14,696 --> 00:27:15,786
reflect on the other app as


874
00:27:15,786 --> 00:27:15,976
well.


875
00:27:17,136 --> 00:27:18,186
Let's go ahead and test this


876
00:27:18,186 --> 00:27:18,376
out.


877
00:27:19,756 --> 00:27:21,796
For this demo, we have already


878
00:27:21,796 --> 00:27:23,826
created a different version of


879
00:27:23,826 --> 00:27:25,906
the app which has all the same


880
00:27:25,906 --> 00:27:27,146
information but we have added


881
00:27:27,146 --> 00:27:28,356
the login credentials and the


882
00:27:28,356 --> 00:27:30,026
organization name also to these


883
00:27:30,026 --> 00:27:30,276
apps.


884
00:27:31,286 --> 00:27:32,596
In my iPhone simulator, I have


885
00:27:32,596 --> 00:27:33,346
the Sample app.


886
00:27:33,896 --> 00:27:35,546
And in my iPad simulator, we


887
00:27:35,546 --> 00:27:36,886
have the Care Team app.


888
00:27:37,556 --> 00:27:39,556
The Sample app is just the same


889
00:27:39,556 --> 00:27:40,876
app with all the login


890
00:27:40,876 --> 00:27:41,606
credentials needed.


891
00:27:41,606 --> 00:27:43,266
And the Care Team app is also


892
00:27:43,266 --> 00:27:44,506
just the same app with all the


893
00:27:44,506 --> 00:27:45,256
login credentials.


894
00:27:45,986 --> 00:27:47,826
Let's go ahead and complete the


895
00:27:47,826 --> 00:27:48,916
pain activity for today.


896
00:27:49,516 --> 00:27:52,936
In my pain activity, I'm feeling


897
00:27:52,936 --> 00:27:53,956
somewhere around, let's say


898
00:27:53,956 --> 00:27:55,736
seven and I hit Done.


899
00:27:55,736 --> 00:27:58,566
And in no matter of time, this


900
00:27:58,566 --> 00:28:00,116
activity should sync over the


901
00:28:00,116 --> 00:28:01,976
data to the care plan activity


902
00:28:02,156 --> 00:28:02,976
on the care team side.


903
00:28:03,516 --> 00:28:07,946
[ Applause ]


904
00:28:08,446 --> 00:28:09,776
Now during the day, whenever


905
00:28:09,776 --> 00:28:11,806
patients feel like their


906
00:28:11,806 --> 00:28:13,316
activity has changed, they can


907
00:28:13,316 --> 00:28:14,476
-- whenever they update an


908
00:28:14,476 --> 00:28:16,196
activity, it should also reflect


909
00:28:16,196 --> 00:28:17,016
on the care team side.


910
00:28:17,356 --> 00:28:19,206
And the time that this is taking


911
00:28:19,856 --> 00:28:21,266
is variable, which you can set


912
00:28:21,266 --> 00:28:21,786
through the API.


913
00:28:22,126 --> 00:28:23,536
If you wanted to, based on your


914
00:28:23,536 --> 00:28:24,716
use case, if you think the


915
00:28:24,716 --> 00:28:27,166
frequency of your updates, you


916
00:28:27,166 --> 00:28:29,316
can change this lapse and either


917
00:28:29,316 --> 00:28:31,286
increase it or decrease it.


918
00:28:32,896 --> 00:28:34,566
With this data syncing, we have


919
00:28:34,566 --> 00:28:37,546
seen in this demo, we took two


920
00:28:37,546 --> 00:28:38,866
applications with local care


921
00:28:38,866 --> 00:28:41,086
plan stores and created a common


922
00:28:41,086 --> 00:28:43,086
cloud bridge and made both the


923
00:28:43,086 --> 00:28:44,456
apps access the common care


924
00:28:44,456 --> 00:28:47,256
plans store and share the data


925
00:28:47,256 --> 00:28:47,636
across.


926
00:28:48,196 --> 00:28:50,256
We believe there was a very


927
00:28:50,256 --> 00:28:53,006
urgent need for functionality


928
00:28:53,006 --> 00:28:53,436
like this.


929
00:28:54,836 --> 00:28:56,526
And with all of these resources


930
00:28:56,526 --> 00:28:59,126
being public, we cannot wait to


931
00:28:59,126 --> 00:29:00,726
collectively help thousands of


932
00:29:00,726 --> 00:29:02,696
people every day.


933
00:29:02,936 --> 00:29:04,246
With this, I would like to call


934
00:29:04,246 --> 00:29:05,346
back Kelsey up on stage and


935
00:29:05,346 --> 00:29:06,286
continue with the session.


936
00:29:06,546 --> 00:29:06,836
Thank you.


937
00:29:08,516 --> 00:29:12,356
[ Applause ]


938
00:29:12,856 --> 00:29:14,026
>> So thank you to Akshay for


939
00:29:14,026 --> 00:29:15,156
that awesome demo.


940
00:29:16,286 --> 00:29:17,876
And so as you guys just saw, the


941
00:29:18,036 --> 00:29:19,626
process of getting a CareKit app


942
00:29:19,986 --> 00:29:21,086
up and running with the Bridge


943
00:29:21,086 --> 00:29:22,886
API is fairly straightforward.


944
00:29:24,126 --> 00:29:25,976
You saw firsthand how the apps


945
00:29:26,056 --> 00:29:27,956
sync data to and from the cloud


946
00:29:28,696 --> 00:29:30,046
and how to utilize those bridge


947
00:29:30,046 --> 00:29:31,716
methods in these cloud solutions


948
00:29:32,056 --> 00:29:33,246
directly in your Xcode


949
00:29:33,246 --> 00:29:33,906
application.


950
00:29:34,406 --> 00:29:37,726
And so throughout the session,


951
00:29:37,896 --> 00:29:39,326
we introduced the addition of


952
00:29:39,326 --> 00:29:41,046
the Bridge API to the CareKit


953
00:29:41,046 --> 00:29:41,506
framework.


954
00:29:42,716 --> 00:29:43,966
We discussed the architecture of


955
00:29:43,966 --> 00:29:44,566
how it works.


956
00:29:45,716 --> 00:29:47,306
And you saw how to utilize it in


957
00:29:47,306 --> 00:29:48,916
the code along with viewing a


958
00:29:48,916 --> 00:29:49,526
live demo.


959
00:29:50,846 --> 00:29:51,976
So what can you do with this new


960
00:29:51,976 --> 00:29:52,376
feature?


961
00:29:54,876 --> 00:29:56,576
The Bridge API not only


962
00:29:56,576 --> 00:29:57,736
integrates with each of the


963
00:29:57,736 --> 00:29:59,806
existing CareKit modules but is


964
00:29:59,806 --> 00:30:01,976
modular and easily extendable to


965
00:30:01,976 --> 00:30:03,456
be used with new ideas and


966
00:30:03,456 --> 00:30:05,086
contributions from the developer


967
00:30:05,086 --> 00:30:05,976
community like all of you.


968
00:30:06,566 --> 00:30:08,606
And now that we all have a


969
00:30:08,606 --> 00:30:10,076
better understanding of what the


970
00:30:10,076 --> 00:30:12,676
Bridge API is, it's important to


971
00:30:12,676 --> 00:30:14,286
point out and recognize how


972
00:30:14,286 --> 00:30:16,946
powerful this tool can be.


973
00:30:17,196 --> 00:30:18,796
It opens the door and provides


974
00:30:18,836 --> 00:30:21,076
developers, care teams, and


975
00:30:21,076 --> 00:30:22,936
medical institutions with the


976
00:30:22,936 --> 00:30:24,376
technology that allow them to


977
00:30:24,376 --> 00:30:25,836
care for their patients in a


978
00:30:25,836 --> 00:30:27,376
more personal and engaged way.


979
00:30:28,756 --> 00:30:29,646
But what do I mean by that?


980
00:30:31,146 --> 00:30:32,776
It's great to see how CareKit


981
00:30:32,776 --> 00:30:34,286
and each of its existing modules


982
00:30:34,546 --> 00:30:35,676
is helping to improve the


983
00:30:35,676 --> 00:30:37,026
at-home patient care experience,


984
00:30:37,476 --> 00:30:39,246
but it's even better if we can


985
00:30:39,246 --> 00:30:40,586
involve their care teams.


986
00:30:42,136 --> 00:30:43,876
To improve the patient care


987
00:30:43,876 --> 00:30:45,736
process, we looked at this API


988
00:30:46,356 --> 00:30:48,136
to help care teams get a better


989
00:30:48,136 --> 00:30:49,486
understanding of their patient's


990
00:30:49,486 --> 00:30:51,616
needs and to get one step ahead


991
00:30:51,616 --> 00:30:52,216
of their care.


992
00:30:52,746 --> 00:30:55,066
And this can help provide


993
00:30:55,066 --> 00:30:56,006
patients with a sense of


994
00:30:56,006 --> 00:30:58,116
reassurance and encourage them


995
00:30:58,256 --> 00:30:59,656
to become more engaged in their


996
00:30:59,656 --> 00:31:00,476
own personal care.


997
00:31:01,006 --> 00:31:03,746
And these are all powerful tools


998
00:31:03,746 --> 00:31:04,666
that now exist at your


999
00:31:04,666 --> 00:31:05,336
fingertips.


1000
00:31:05,816 --> 00:31:07,626
And what comes next is up to


1001
00:31:07,626 --> 00:31:07,866
you.


1002
00:31:09,786 --> 00:31:10,836
Whether it's extending your


1003
00:31:10,836 --> 00:31:12,746
existing applications or


1004
00:31:12,746 --> 00:31:14,726
starting from scratch, we


1005
00:31:14,726 --> 00:31:16,416
believe that CareKit along with


1006
00:31:16,416 --> 00:31:18,516
the Bridge API and developers


1007
00:31:18,516 --> 00:31:20,606
like all of you have the power


1008
00:31:20,606 --> 00:31:22,126
to improve the at-home patient


1009
00:31:22,126 --> 00:31:24,306
care experience and decrease the


1010
00:31:24,306 --> 00:31:25,736
patient care gap that exists


1011
00:31:26,496 --> 00:31:26,616
today.


1012
00:31:27,806 --> 00:31:29,056
And so with this new


1013
00:31:29,056 --> 00:31:30,816
functionality, we look out to


1014
00:31:30,816 --> 00:31:32,816
all of you to take advantage of


1015
00:31:32,816 --> 00:31:34,476
existing third-party backend


1016
00:31:34,476 --> 00:31:37,556
cloud solutions or to build your


1017
00:31:37,556 --> 00:31:37,816
own.


1018
00:31:38,976 --> 00:31:40,856
And in the process, consider who


1019
00:31:40,856 --> 00:31:42,026
that data will be syncing with


1020
00:31:42,756 --> 00:31:44,236
and how that corresponding care


1021
00:31:44,236 --> 00:31:45,506
team app may look.


1022
00:31:47,336 --> 00:31:49,756
The Bridge API is only as


1023
00:31:49,756 --> 00:31:51,336
powerful as the care team app on


1024
00:31:51,336 --> 00:31:51,926
the other side.


1025
00:31:52,246 --> 00:31:53,836
And so we look to all of you to


1026
00:31:53,836 --> 00:31:55,446
help build out these care team


1027
00:31:55,686 --> 00:31:58,806
solutions via care team apps and


1028
00:32:00,576 --> 00:32:00,876
dashboards.


1029
00:32:01,176 --> 00:32:03,186
And CareKit is Open Source so as


1030
00:32:03,186 --> 00:32:04,806
you build out these solutions


1031
00:32:04,956 --> 00:32:06,106
and improve your existing


1032
00:32:06,106 --> 00:32:08,276
applications, please contribute


1033
00:32:08,276 --> 00:32:10,526
that work back so as a team we


1034
00:32:10,526 --> 00:32:11,986
can continue to evolve and grow


1035
00:32:11,986 --> 00:32:12,776
the CareKit framework.


1036
00:32:13,766 --> 00:32:15,126
And so more information about


1037
00:32:15,126 --> 00:32:17,106
CareKit and both the Bridge API


1038
00:32:17,346 --> 00:32:19,106
solutions from Medable and


1039
00:32:19,106 --> 00:32:21,056
CloudMine can be found at the


1040
00:32:21,056 --> 00:32:21,746
provided link.


1041
00:32:24,316 --> 00:32:25,416
And if you're interested in


1042
00:32:25,416 --> 00:32:26,846
learning more about CareKit or


1043
00:32:26,846 --> 00:32:28,166
its relating technologies,


1044
00:32:28,426 --> 00:32:29,476
please take a look at one of the


1045
00:32:29,476 --> 00:32:30,246
following sessions.


1046
00:32:31,646 --> 00:32:32,826
So thank you all for coming to


1047
00:32:32,826 --> 00:32:34,016
the session on the CareKit


1048
00:32:34,016 --> 00:32:34,566
Bridge API.


1049
00:32:34,656 --> 00:32:36,286
And we really look forward to


1050
00:32:36,286 --> 00:32:38,186
seeing what you all do with this


1051
00:32:38,186 --> 00:32:38,906
new technology.


1052
00:32:39,516 --> 00:32:42,500
[ Applause ]

