1
00:00:07,516 --> 00:00:19,500
[ Music ]


2
00:00:23,516 --> 00:00:25,736
[ Applause ]


3
00:00:26,236 --> 00:00:26,646
>> Good morning.


4
00:00:26,646 --> 00:00:29,116
Good morning everyone.


5
00:00:30,416 --> 00:00:33,386
My name is Antonio Cavedoni,
and I am here to present to you


6
00:00:33,386 --> 00:00:34,936
about typography and fonts.


7
00:00:34,936 --> 00:00:37,506
I am a type designer at Apple.


8
00:00:38,036 --> 00:00:41,446
So, on the agenda today we
will look at San Francisco


9
00:00:41,446 --> 00:00:43,086
and update our system fonts.


10
00:00:43,856 --> 00:00:45,926
We will see some
terminology about typography.


11
00:00:47,026 --> 00:00:48,816
We will look at some
typographic concepts.


12
00:00:49,626 --> 00:00:52,066
And then tools that you have
available when doing typography.


13
00:00:53,276 --> 00:00:55,226
Lastly, we will see some
details that you may want


14
00:00:55,226 --> 00:00:59,296
to adopt while working
on your apps.


15
00:00:59,526 --> 00:01:04,196
Okay. So, San Francisco, it
is our family of system fonts.


16
00:01:04,766 --> 00:01:06,016
We introduced them last year.


17
00:01:06,896 --> 00:01:09,126
This is SF you see right here.


18
00:01:09,526 --> 00:01:14,656
And it is the system font
for macOS, iOS and tvOS.


19
00:01:14,656 --> 00:01:17,666
We introduced this family
here at WWDC last year.


20
00:01:17,996 --> 00:01:20,296
There is a video that
talks about the philosophy


21
00:01:20,296 --> 00:01:24,836
and application of SF.


22
00:01:24,916 --> 00:01:27,146
And we've been applying
it to all our platforms.


23
00:01:27,666 --> 00:01:32,246
So, Apple TV, we've been
applying San Francisco to Macs.


24
00:01:32,526 --> 00:01:36,346
But we've also been applying
it to the redesigned music app.


25
00:01:36,816 --> 00:01:39,626
Now, in case you haven't
seen it all around you here


26
00:01:39,626 --> 00:01:42,096
in Moscone Center, there
is indeed a new member


27
00:01:42,296 --> 00:01:45,466
of the SF family, and
it is called SF Mono.


28
00:01:46,216 --> 00:01:50,316
SF Mono is a new
design for coding


29
00:01:50,806 --> 00:01:52,426
and it comes in many ways.


30
00:01:52,426 --> 00:01:57,236
We started with a light
weight, up to regular, medium,


31
00:01:58,116 --> 00:02:01,016
semi bold, and then we're
going to more expressive ways


32
00:02:01,066 --> 00:02:02,736
like bold and even heavy.


33
00:02:03,586 --> 00:02:06,936
So, all of these come
with italics as well.


34
00:02:08,126 --> 00:02:11,636
And they cover the Latin,
SL, and Latin script.


35
00:02:11,636 --> 00:02:16,536
But, also the Cyrillic and the
Greek script in all the styles


36
00:02:16,536 --> 00:02:18,576
and all the weights
with italics.


37
00:02:19,256 --> 00:02:22,966
So, SF Mono is a
monospaced design, of course.


38
00:02:23,476 --> 00:02:26,536
But, it's also monospaced
across weights,


39
00:02:28,436 --> 00:02:32,426
which means that if you change
your font weight the text will


40
00:02:32,426 --> 00:02:32,956
not reflow.


41
00:02:33,886 --> 00:02:35,006
Of course this was
a bit of a challenge


42
00:02:35,006 --> 00:02:36,516
when we were designing
this heavier weight.


43
00:02:36,566 --> 00:02:38,726
So, we have to squeeze
all these glyphs in.


44
00:02:39,576 --> 00:02:43,826
But, we designed that SF Mono
for coding in small sizes first.


45
00:02:43,826 --> 00:02:46,986
And so we tweaked some of the
glyphs like the punctuation


46
00:02:46,986 --> 00:02:52,426
or the bracket braces, some of
the digits for using coding.


47
00:02:53,586 --> 00:02:57,156
And of course SF Mono
is the new default font


48
00:02:57,156 --> 00:02:58,756
of choice of Swift Playgrounds.


49
00:02:59,806 --> 00:03:01,676
It's also in default in Xcode.


50
00:03:02,206 --> 00:03:05,816
Check out the new
theme right there.


51
00:03:06,046 --> 00:03:08,836
Okay. So, that was small
bit on San Francisco


52
00:03:09,106 --> 00:03:10,626
and the new SF Mono family.


53
00:03:12,016 --> 00:03:16,016
Next I want to talk to you
about some type terminology.


54
00:03:16,016 --> 00:03:19,256
Get us all on the same page
on these terms about type


55
00:03:19,256 --> 00:03:20,616
that can be confusing at times.


56
00:03:21,106 --> 00:03:23,046
So, before I get started I just
want to make a premise here,


57
00:03:23,246 --> 00:03:24,766
which is that today we'll look


58
00:03:24,766 --> 00:03:27,606
at the Latin Cyrillic
and Greek scripts.


59
00:03:28,176 --> 00:03:30,036
But, if you're interested
in multilingual typography,


60
00:03:30,316 --> 00:03:32,646
and you should, there are,


61
00:03:32,876 --> 00:03:34,806
there were actually
two talks yesterday


62
00:03:34,806 --> 00:03:35,766
that you can catch on video.


63
00:03:36,136 --> 00:03:37,496
That talk exactly
about this topic.


64
00:03:38,686 --> 00:03:39,656
So, let's get started.


65
00:03:40,516 --> 00:03:41,216
What is text?


66
00:03:42,476 --> 00:03:45,006
Text encodes language, and
has to do with meaning.


67
00:03:45,916 --> 00:03:47,966
Text is the stuff that you type.


68
00:03:48,746 --> 00:03:50,796
It is the stuff that gets
auto-corrected and analyzed,


69
00:03:51,196 --> 00:03:52,136
and sent to your friends.


70
00:03:53,366 --> 00:03:54,666
Now, what is text made of?


71
00:03:55,316 --> 00:03:58,166
It is made of, oops, characters.


72
00:03:58,986 --> 00:04:02,156
A character is an
abstract unit of texts


73
00:04:02,666 --> 00:04:05,476
and it literally is
represented by a code.


74
00:04:06,666 --> 00:04:09,236
Now, before you can
actually see one


75
00:04:09,236 --> 00:04:13,026
of these you need representation
for it, which is called a glyph,


76
00:04:13,766 --> 00:04:15,756
a glyph is stored on your device


77
00:04:15,976 --> 00:04:19,086
as an outline, a
sequence of points.


78
00:04:19,826 --> 00:04:21,856
And it lives inside a font file.


79
00:04:23,386 --> 00:04:26,186
Now in a font file between
a character and a glyph,


80
00:04:26,186 --> 00:04:28,016
there usually is
a 1 to 1 mapping.


81
00:04:28,016 --> 00:04:29,856
However, things are
not always this simple.


82
00:04:30,146 --> 00:04:33,356
There could be something
called typographic feature,


83
00:04:33,786 --> 00:04:37,686
which is a mechanism that
alters this 1 to 1 mapping,


84
00:04:38,406 --> 00:04:41,436
and makes things
slightly more complex.


85
00:04:41,436 --> 00:04:44,916
For instance, you could have
fonts that when you type the key


86
00:04:44,916 --> 00:04:47,716
for F or I, this
character gets generated.


87
00:04:48,326 --> 00:04:49,686
And instead of getting
two glyphs,


88
00:04:49,686 --> 00:04:52,096
you actually get just one,
because they get combined


89
00:04:52,096 --> 00:04:53,476
into what is called a ligature.


90
00:04:54,176 --> 00:04:55,656
Now, this ligature
is made possible


91
00:04:55,656 --> 00:04:58,946
by a typographic feature, which
is automatic and font dependent.


92
00:04:59,046 --> 00:04:59,956
Not all fonts do this.


93
00:05:00,526 --> 00:05:02,826
Some fonts have optional
features


94
00:05:03,186 --> 00:05:04,536
that change the shape of digits.


95
00:05:04,536 --> 00:05:07,666
For instance, San Francisco
has this alternate shape


96
00:05:07,716 --> 00:05:10,976
for the numeral 6 that
we use when we want


97
00:05:10,976 --> 00:05:12,086
to make it a little
bit more legible.


98
00:05:12,746 --> 00:05:15,746
Now, fonts have multiple styles,


99
00:05:16,996 --> 00:05:18,176
which of course look
all different.


100
00:05:18,316 --> 00:05:20,886
Some fonts have just two styles.


101
00:05:21,246 --> 00:05:22,566
Some fonts have many, many more.


102
00:05:22,786 --> 00:05:25,496
And you may have heard some of
their names like Bold, Italic,


103
00:05:25,726 --> 00:05:27,026
Bold Italic, Condensed.


104
00:05:27,026 --> 00:05:28,346
All these are style names.


105
00:05:29,086 --> 00:05:33,996
Now, what holds all of these
together is this design DNA,


106
00:05:33,996 --> 00:05:34,896
if you will.


107
00:05:35,266 --> 00:05:38,956
And that is the idea of a set
of shapes that is a typeface.


108
00:05:40,306 --> 00:05:42,036
There are many, many typefaces.


109
00:05:42,036 --> 00:05:43,916
And you may have seen or
recognized some of these.


110
00:05:44,746 --> 00:05:47,966
Now, what do you do with
typefaces is typography.


111
00:05:48,616 --> 00:05:53,676
Typography is using type to
set text and encode language.


112
00:05:54,446 --> 00:05:58,956
Typography is the foundation of
graphic design and of UI design.


113
00:06:00,256 --> 00:06:01,976
So, we just saw a few terms.


114
00:06:02,046 --> 00:06:05,696
We saw text, text is
made of characters,


115
00:06:06,116 --> 00:06:10,046
characters are encoded by
or represented by glyphs.


116
00:06:10,526 --> 00:06:11,716
Between characters and glyphs,


117
00:06:11,976 --> 00:06:16,516
typographic features can alter
the mapping between these.


118
00:06:17,346 --> 00:06:19,296
They're all stored in what
is called a font file,


119
00:06:20,116 --> 00:06:22,676
which can have common
multiple styles.


120
00:06:23,856 --> 00:06:27,236
They are all grouped under
the same typeface umbrella,


121
00:06:27,236 --> 00:06:29,406
which is the design idea
behind all these styles.


122
00:06:30,136 --> 00:06:32,346
And typography is
the usage of all


123
00:06:32,346 --> 00:06:35,166
of this stuff to convey text.


124
00:06:35,776 --> 00:06:38,836
Now, writers and editors, the
people who write the text,


125
00:06:39,496 --> 00:06:42,696
concern themselves with text.


126
00:06:42,826 --> 00:06:45,666
The characters are defined
by the Unicode Consortium.


127
00:06:45,826 --> 00:06:46,726
So, you don't have
to think about them.


128
00:06:48,286 --> 00:06:51,116
And the type designers and font
manufacturers are the people


129
00:06:51,986 --> 00:06:56,986
who come up with the design
ideas and design the glyphs


130
00:06:57,146 --> 00:06:58,286
and make them into fonts.


131
00:06:58,286 --> 00:07:01,346
And then create the
typographic features


132
00:07:01,346 --> 00:07:02,906
that you can then alter.


133
00:07:03,486 --> 00:07:07,996
Now, typographers are the
people who do typography.


134
00:07:08,656 --> 00:07:10,136
And I have some good
news for you,


135
00:07:10,426 --> 00:07:12,046
which is that you
are typographers.


136
00:07:12,046 --> 00:07:14,156
As matter of fact, we
are all typographers.


137
00:07:14,396 --> 00:07:16,406
Whenever we change a font,
whenever we make it bold,


138
00:07:16,686 --> 00:07:17,816
when we change the point size,


139
00:07:18,136 --> 00:07:19,756
this is all the act
of typography.


140
00:07:20,796 --> 00:07:23,416
Now, as typographers of
course you typography.


141
00:07:24,306 --> 00:07:28,186
But, you can also alter the
text of course and pick fonts.


142
00:07:28,646 --> 00:07:30,466
Choose them, combine the styles,


143
00:07:30,746 --> 00:07:31,906
and alter the typographic
feature.


144
00:07:31,946 --> 00:07:33,516
Turn the optional ones on.


145
00:07:35,706 --> 00:07:37,296
Okay. I am almost done.


146
00:07:37,546 --> 00:07:39,016
But, I have a few more terms.


147
00:07:39,256 --> 00:07:41,236
And they actually have to do
with the absence of something


148
00:07:41,236 --> 00:07:44,006
with the negative
space around things.


149
00:07:44,636 --> 00:07:47,086
So, I just showed to you what
a glyph is, which is an outline


150
00:07:47,086 --> 00:07:48,426
that represents a character.


151
00:07:48,916 --> 00:07:51,176
And in a font it's
stored as an outline.


152
00:07:51,406 --> 00:07:55,476
But, it also has a width,
basically a spacing property.


153
00:07:56,146 --> 00:08:00,256
Now, if I picked out a space
like this and I typeset it


154
00:08:00,256 --> 00:08:03,976
in a line, I get this rhythm,
which is not very even.


155
00:08:03,976 --> 00:08:05,486
So, type designers alter this


156
00:08:05,766 --> 00:08:08,936
to get an even rhythm
between glyphs.


157
00:08:10,016 --> 00:08:12,916
Spacing is built into the font
and you cannot really change it.


158
00:08:13,196 --> 00:08:14,806
But, you can change tracking.


159
00:08:15,506 --> 00:08:17,536
Tracking is a modifier
on the negative spacing.


160
00:08:17,536 --> 00:08:23,066
And it can either be neutral,
or negative, or positive.


161
00:08:24,036 --> 00:08:26,716
And it is global for all
the glyphs in a font.


162
00:08:27,026 --> 00:08:29,656
And it either moves the apart
or put them further together,


163
00:08:30,016 --> 00:08:31,286
which is actually useful


164
00:08:31,286 --> 00:08:33,106
when you're doing
small size typography.


165
00:08:33,106 --> 00:08:34,916
You'll probably want to bring
the letters further apart


166
00:08:35,296 --> 00:08:36,645
and pull it together
when they're large.


167
00:08:37,226 --> 00:08:41,275
Now, tracking can be confused
with what is known as kerning.


168
00:08:41,806 --> 00:08:43,765
And kerning really is
an exception mechanism


169
00:08:43,966 --> 00:08:45,576
for individual pairs of glyphs.


170
00:08:45,656 --> 00:08:47,746
So, in this case the
A and B are too far,


171
00:08:47,746 --> 00:08:51,356
and so the font has a kerning
table inside that says,


172
00:08:51,426 --> 00:08:52,446
bring them closer together.


173
00:08:53,616 --> 00:08:56,016
The kerning table again, is
done by the type designer


174
00:08:56,016 --> 00:08:57,206
and put inside of the font.


175
00:08:57,206 --> 00:08:57,986
And you don't control it.


176
00:08:57,986 --> 00:08:59,066
It just happens automatically.


177
00:09:00,576 --> 00:09:03,706
However, leading, which is
the space between the lines,


178
00:09:04,006 --> 00:09:05,076
is something you can control.


179
00:09:05,746 --> 00:09:09,566
So, the name leading comes
from metal typography


180
00:09:09,566 --> 00:09:14,266
when to put lines of type
further apart, pardon me,


181
00:09:14,366 --> 00:09:16,766
you would have stick pieces
of metal between the lines.


182
00:09:18,376 --> 00:09:27,116
So, we just saw spacing,
tracking, kerning, and leading.


183
00:09:28,026 --> 00:09:29,896
Spacing and kerning
are built into font.


184
00:09:30,726 --> 00:09:33,746
But, tracking and
leading are adjustable.


185
00:09:35,106 --> 00:09:37,246
And that is really all I
have to say on type terms.


186
00:09:37,246 --> 00:09:40,626
So, now you are all caught
up with typographic terms.


187
00:09:41,836 --> 00:09:44,486
Now, let's look at some
concepts of typography.


188
00:09:45,116 --> 00:09:47,006
We start with legibility.


189
00:09:47,006 --> 00:09:50,566
The legibility has to do
with recognizing shapes


190
00:09:51,256 --> 00:09:52,616
and distinguishing them
from one and another.


191
00:09:53,666 --> 00:09:55,046
You may be familiar
with the idea


192
00:09:55,246 --> 00:09:59,956
that some typefaces have
inherent legibility to them.


193
00:10:00,106 --> 00:10:03,166
However, what is not legible


194
00:10:03,166 --> 00:10:05,556
at one size is actually
perfectly legible


195
00:10:05,556 --> 00:10:07,896
in another size.


196
00:10:08,046 --> 00:10:10,756
Scale is connected
with legibility.


197
00:10:11,976 --> 00:10:14,546
And when you alter the
scale of a piece of text,


198
00:10:14,626 --> 00:10:17,036
details that were
previously unavailable


199
00:10:17,036 --> 00:10:18,716
and not visible become visible.


200
00:10:19,056 --> 00:10:20,976
So, what is affected is
the tone of what you see.


201
00:10:22,426 --> 00:10:27,096
Now, in these situations
UI typography can be a lot


202
00:10:27,526 --> 00:10:29,366
like road signage.


203
00:10:29,616 --> 00:10:31,646
So, you're driving on
the road, and the sign


204
00:10:32,266 --> 00:10:34,536
that you see is very
large, its font size,


205
00:10:35,146 --> 00:10:37,716
but it's far away from you.


206
00:10:38,256 --> 00:10:40,426
And so a scale is not just
a matter of point size,


207
00:10:40,426 --> 00:10:43,576
but also distance from the
reader to the viewing surface,


208
00:10:43,636 --> 00:10:44,496
to the reading surface.


209
00:10:45,706 --> 00:10:47,776
Now, in these situations
things that apply


210
00:10:47,776 --> 00:10:51,026
to small scale typography
also apply as well.


211
00:10:51,026 --> 00:10:53,106
So, for instance, bringing
letters further apart


212
00:10:53,106 --> 00:10:55,836
or making the type bolder may
actually improve legibility.


213
00:10:57,126 --> 00:10:59,116
But legibility does
not just apply to text.


214
00:10:59,726 --> 00:11:01,206
It also applies to layouts.


215
00:11:01,806 --> 00:11:05,816
It's probably very obvious
that a layout that is legible


216
00:11:05,816 --> 00:11:08,816
where hierarchy is clear
at one scale may not be


217
00:11:08,816 --> 00:11:10,116
so legible at another scale.


218
00:11:10,686 --> 00:11:12,726
And the issue there is the
density gets compromised.


219
00:11:12,726 --> 00:11:15,896
It actually increases very much.


220
00:11:16,446 --> 00:11:18,076
So, what you could do
to tame the density,


221
00:11:18,076 --> 00:11:20,226
is you could spread
elements further apart.


222
00:11:20,846 --> 00:11:22,446
But, often times it's
actually much better


223
00:11:22,446 --> 00:11:25,336
to rethink your hierarchy and
the positioning of things,


224
00:11:25,336 --> 00:11:27,276
your layout for different
scales.


225
00:11:27,276 --> 00:11:33,406
Now, if you want to know more
about layout, there is a talk


226
00:11:33,406 --> 00:11:35,666
on Friday that talks
about Iterative UI Design,


227
00:11:35,666 --> 00:11:38,666
which is the methodology
to come up with ideas.


228
00:11:38,666 --> 00:11:41,436
And also they'll have tips on
how to evaluate those ideas,


229
00:11:41,436 --> 00:11:44,506
which is the important part.


230
00:11:44,686 --> 00:11:49,306
Now, the scale and density,
they also apply not just to text


231
00:11:49,986 --> 00:11:51,586
and layouts, but
also to glyph design.


232
00:11:52,156 --> 00:11:53,366
So, let me give you an example.


233
00:11:54,206 --> 00:11:54,986
What is this glyph?


234
00:11:55,406 --> 00:11:56,086
What is it called?


235
00:11:57,036 --> 00:11:58,216
Of course it's the at sign.


236
00:11:58,446 --> 00:12:00,496
But, in Italy we have
a strange name for it.


237
00:12:00,496 --> 00:12:03,056
We call it chiocciola,
which means snail.


238
00:12:03,586 --> 00:12:08,266
So, when we have to design
the snail in San Francisco,


239
00:12:08,666 --> 00:12:10,426
we started with SF Mono, sorry,


240
00:12:10,426 --> 00:12:11,956
we started with the
one in San Francisco.


241
00:12:12,096 --> 00:12:14,676
And of course we did this, all
right, we made it monospaced.


242
00:12:15,356 --> 00:12:17,556
However, when we have,
when we validated the shape


243
00:12:17,826 --> 00:12:19,596
in the right context and scale,


244
00:12:19,596 --> 00:12:21,336
we realized the density
was too high.


245
00:12:21,746 --> 00:12:24,146
It was just getting muddy
and not very legible.


246
00:12:24,506 --> 00:12:27,446
So, we came up with a
solution that looks like this.


247
00:12:28,326 --> 00:12:31,046
Now, let me blow it up.


248
00:12:31,046 --> 00:12:36,116
So, in this example,
we changed the density


249
00:12:36,116 --> 00:12:37,816
of the glyph by very much.


250
00:12:38,326 --> 00:12:40,946
And we did that by
increasing the negative space,


251
00:12:40,946 --> 00:12:42,956
which is very critical
for legibility.


252
00:12:44,356 --> 00:12:48,996
Now, consider also the H, M
and N glyphs in SF Mono heavy.


253
00:12:49,996 --> 00:12:54,356
Now, if I blow them up really
big, you can probably tell


254
00:12:54,356 --> 00:12:57,096
that the strokes aren't
actually the same thickness.


255
00:12:57,386 --> 00:12:58,396
And that is because you,


256
00:12:58,626 --> 00:13:00,326
when they are big you
can actually tell,


257
00:13:00,366 --> 00:13:01,646
but when they are
small you cannot.


258
00:13:01,726 --> 00:13:03,276
So, we're sort of
deceiving you into thinking


259
00:13:03,276 --> 00:13:06,326
that they have the same density.


260
00:13:06,396 --> 00:13:09,776
Okay. So, imagine you're getting
parachuted into this picture.


261
00:13:10,306 --> 00:13:11,356
And you're trying to
figure out where you


262
00:13:11,356 --> 00:13:12,446
and where you're trying to go.


263
00:13:12,666 --> 00:13:14,936
Now, you're probably
going to subway somewhere,


264
00:13:14,936 --> 00:13:15,816
probably to Church Avenue.


265
00:13:15,816 --> 00:13:16,926
But, where are you?


266
00:13:17,546 --> 00:13:18,246
I know where you are.


267
00:13:18,766 --> 00:13:20,826
You're in New York,
and I know by the font.


268
00:13:21,896 --> 00:13:27,676
Now, I also happen to know, I
know, I'm sorry, I also happen


269
00:13:27,676 --> 00:13:29,486
to know that this is not exactly
Helvetica that they're using.


270
00:13:29,486 --> 00:13:31,616
So, I recreate that sign with
a very Helvetica Neue Bold.


271
00:13:32,386 --> 00:13:34,516
But, what I'm trying to
convey here is this notion


272
00:13:34,516 --> 00:13:39,196
of typographic voice, which is
that if you change a typeface


273
00:13:39,196 --> 00:13:42,306
to a different style, even
within the same family,


274
00:13:42,676 --> 00:13:45,316
not only does that sign
not work the same way,


275
00:13:45,606 --> 00:13:47,696
but it doesn't feel the same.


276
00:13:48,086 --> 00:13:52,196
Okay. So, typefaces
have this voice quality,


277
00:13:52,196 --> 00:13:54,136
and this does not feel
like New York to me at all,


278
00:13:54,856 --> 00:13:57,296
and nor does this one.


279
00:13:57,576 --> 00:13:59,596
So, this voice property
is now secondary.


280
00:13:59,596 --> 00:14:02,266
And actually it helps
creating a context.


281
00:14:02,636 --> 00:14:04,876
So, for instance, I am
reading my email in SF,


282
00:14:04,876 --> 00:14:06,586
and now I'm playing a game.


283
00:14:06,826 --> 00:14:09,656
Maybe that's not so appropriate
to have the SF in there.


284
00:14:09,656 --> 00:14:12,776
So, typefaces really help
you with creating a context


285
00:14:12,926 --> 00:14:15,016
and helping your user
understand where they are.


286
00:14:15,656 --> 00:14:19,236
Okay. So, these are the
concepts we just saw.


287
00:14:19,236 --> 00:14:23,206
We saw legibility,
scale, density, and voice.


288
00:14:23,716 --> 00:14:26,166
So, now I want to talk
to you about some tools.


289
00:14:32,336 --> 00:14:34,406
When we do typography
in our platforms,


290
00:14:34,456 --> 00:14:37,706
you have three fundamental
tools that you can use.


291
00:14:38,546 --> 00:14:42,156
The first one is system font,
the second one is dynamic type,


292
00:14:42,776 --> 00:14:44,906
and the third one
is our custom fonts.


293
00:14:46,696 --> 00:14:49,956
Now, a system font you already
saw is native to the platform.


294
00:14:50,326 --> 00:14:52,666
And it feels native to the
platform as a typeface.


295
00:14:52,756 --> 00:14:58,336
To access it the system font
API's are the same between iOS,


296
00:14:58,456 --> 00:15:01,096
watchOS, tvOS, and the macOS.


297
00:15:02,156 --> 00:15:05,176
So, NSFont and UIFont
basically have the same API's.


298
00:15:05,866 --> 00:15:07,066
And they have a lot of benefits.


299
00:15:07,116 --> 00:15:10,756
They give you access to the
weight of San Francisco,


300
00:15:10,756 --> 00:15:13,816
of the nine weights, but also
to the size specific tracking.


301
00:15:14,456 --> 00:15:17,306
Basically the letters
move closer together


302
00:15:17,306 --> 00:15:20,336
or further apart automatically,
depending on the point size


303
00:15:20,336 --> 00:15:21,746
that you request
the system font at.


304
00:15:22,706 --> 00:15:25,106
You also get such specific
outlines automatically.


305
00:15:26,136 --> 00:15:31,456
And you get access for the Bold
Text switch, which is something


306
00:15:31,456 --> 00:15:32,886
in the settings in iOS.


307
00:15:33,426 --> 00:15:35,466
People can turn it on
and it makes the text


308
00:15:35,466 --> 00:15:37,006
on all their devices bold.


309
00:15:37,626 --> 00:15:42,496
Now, the second tool you have
available is dynamic type.


310
00:15:42,496 --> 00:15:43,696
And it's a great tool.


311
00:15:43,696 --> 00:15:45,496
It's available on
iOS and watchOS.


312
00:15:46,326 --> 00:15:48,366
And dynamic type is
really two things.


313
00:15:48,836 --> 00:15:52,196
The first one is the
text styles API's,


314
00:15:52,346 --> 00:15:53,696
preferredFont forTextStyle.


315
00:15:54,396 --> 00:15:57,196
And these give you access
to semantic identifiers


316
00:15:57,196 --> 00:16:00,226
that give you fonts that are
specific for that purpose.


317
00:16:00,226 --> 00:16:03,836
So, you can request a font for
headline, or body, or these,


318
00:16:03,836 --> 00:16:05,616
and you get fonts that
look like the system.


319
00:16:05,616 --> 00:16:07,646
But, they're tweaked
for that one purpose.


320
00:16:08,926 --> 00:16:11,686
But, dynamic type is also
the content size categories,


321
00:16:12,056 --> 00:16:15,456
which you may be familiar with
as the notches in this slider.


322
00:16:15,826 --> 00:16:17,576
So, people can go
in their settings,


323
00:16:17,916 --> 00:16:19,766
they can move the
slider up and down,


324
00:16:20,026 --> 00:16:22,426
and they can change the global
point size of their device.


325
00:16:22,566 --> 00:16:23,766
It's a great accessibility
feature.


326
00:16:27,696 --> 00:16:31,106
Now, if you use dynamic type and
you use the text styles API's,


327
00:16:31,436 --> 00:16:33,716
dynamic type support is
automatic with these.


328
00:16:34,166 --> 00:16:37,646
However, if you're
using custom fonts


329
00:16:37,826 --> 00:16:40,156
or you call a system font
directly, then you have


330
00:16:40,156 --> 00:16:42,116
to do some work to
implement the dynamic type.


331
00:16:42,476 --> 00:16:43,166
But, it's really easy.


332
00:16:43,166 --> 00:16:44,636
And let me show you
how that works.


333
00:16:44,636 --> 00:16:47,836
First you have to
pick or bundle a font,


334
00:16:48,866 --> 00:16:50,886
then you can have a
lookup table somewhere


335
00:16:50,886 --> 00:16:53,676
with content size
categories, then you have


336
00:16:53,676 --> 00:16:55,846
to override this
traitCollection DidChange.


337
00:16:56,056 --> 00:16:58,776
This is a method
of UIView and UI.


338
00:16:59,076 --> 00:17:00,226
You control the subclasses.


339
00:17:01,666 --> 00:17:03,436
Then you update your fonts
and paragraph styles,


340
00:17:04,386 --> 00:17:05,876
and you relayout,
and you're done.


341
00:17:06,586 --> 00:17:08,366
So, let's see these steps
a little bit closer.


342
00:17:09,146 --> 00:17:11,435
How do you actually
bundle a font in your app?


343
00:17:12,205 --> 00:17:12,986
Well, that's easy.


344
00:17:12,986 --> 00:17:16,776
You just drag it into Xcode, and
then you declare the font names


345
00:17:16,836 --> 00:17:17,646
in the info plist list.


346
00:17:17,715 --> 00:17:19,246
There is a key for it.


347
00:17:20,415 --> 00:17:23,006
Now, for the concise
categories you have


348
00:17:23,006 --> 00:17:27,396
to of course have a lookup table
that maps them into point sizes,


349
00:17:27,396 --> 00:17:29,236
and possibly weights,
or tracking values,


350
00:17:29,236 --> 00:17:31,956
or even leading, depending on
the typeface that you chose.


351
00:17:32,866 --> 00:17:35,596
So, I have a lookup table that
looks something like this.


352
00:17:35,736 --> 00:17:39,166
I have a tool pool, a
point size style name,


353
00:17:39,166 --> 00:17:39,976
leading, and tracking.


354
00:17:40,376 --> 00:17:43,476
And the symbols that you
see there are the content


355
00:17:43,476 --> 00:17:44,246
size categories.


356
00:17:44,576 --> 00:17:45,946
Notice that they
are actually more


357
00:17:46,026 --> 00:17:47,176
than the notches in the slider.


358
00:17:47,736 --> 00:17:51,486
Because there's five
accessibility ones that are,


359
00:17:52,246 --> 00:17:54,326
people can turn on in their
accessibility settings.


360
00:17:54,826 --> 00:17:57,016
So, when you went
to lookup table,


361
00:17:57,016 --> 00:17:58,136
remember about these as well.


362
00:17:58,136 --> 00:17:59,976
Now, once you have that,


363
00:18:00,196 --> 00:18:03,076
you just override
this traitCollection


364
00:18:03,296 --> 00:18:03,946
DidChange method.


365
00:18:03,946 --> 00:18:07,716
And inside of there
you can do whatever.


366
00:18:07,716 --> 00:18:10,596
You can have code that
depending on the view you have


367
00:18:10,596 --> 00:18:11,506
and whatever it looks like,


368
00:18:11,716 --> 00:18:13,666
can adjust the font
and then relayout.


369
00:18:15,016 --> 00:18:20,656
So, when you're inside of that
method you should query the


370
00:18:20,656 --> 00:18:22,776
trait collection of
the current object.


371
00:18:23,166 --> 00:18:25,226
And look up the preferred
content size category.


372
00:18:26,256 --> 00:18:27,966
And then you just
use that as the key


373
00:18:27,966 --> 00:18:29,786
of your lookup table
when you're done.


374
00:18:31,236 --> 00:18:32,606
Now, step 5 is relayout.


375
00:18:32,846 --> 00:18:36,056
But, if you're using auto layout
there is actually no step 5.


376
00:18:36,056 --> 00:18:37,846
If you're interested in
knowing about auto layout,


377
00:18:37,886 --> 00:18:39,996
there are sessions
tomorrow and on Friday


378
00:18:39,996 --> 00:18:43,646
about this specific topic.


379
00:18:43,646 --> 00:18:44,006
All right.


380
00:18:44,056 --> 00:18:46,226
So, we just saw how to
make dynamic type work


381
00:18:46,226 --> 00:18:47,556
with custom fonts.


382
00:18:48,106 --> 00:18:50,306
But, imagine you want to
get started with this.


383
00:18:50,616 --> 00:18:52,976
How do you actually go about it?


384
00:18:53,116 --> 00:18:55,076
Now, if you're getting
started and you're trying


385
00:18:55,076 --> 00:18:58,656
to use custom fonts,
I recommend starting


386
00:18:58,656 --> 00:19:00,686
with one typeface at a time.


387
00:19:01,276 --> 00:19:02,656
It's actually much
easier that way.


388
00:19:03,196 --> 00:19:05,176
But, more importantly,
once you have a typeface


389
00:19:05,176 --> 00:19:08,136
that you're considering, try to
understand its design intention,


390
00:19:08,456 --> 00:19:09,836
because it really
helps you out in usage.


391
00:19:10,166 --> 00:19:11,536
Typefaces are tools.


392
00:19:11,706 --> 00:19:13,956
They are designed by people
for specific purposes.


393
00:19:14,126 --> 00:19:17,106
And understanding the purpose
greatly helps you as the user


394
00:19:17,106 --> 00:19:18,746
of the font, as the
typographer actually.


395
00:19:19,266 --> 00:19:23,406
And also consider knobs
you can turn, right.


396
00:19:23,896 --> 00:19:26,576
Kerning is not something you
can actually easily alter


397
00:19:26,576 --> 00:19:27,876
from your app context.


398
00:19:27,876 --> 00:19:29,336
So if the font is not kerning.


399
00:19:29,696 --> 00:19:31,406
Well, you might want to
consider something else.


400
00:19:31,816 --> 00:19:33,456
But, however, if
the font has leading


401
00:19:33,456 --> 00:19:35,436
that is too tight you
can actually alter that.


402
00:19:35,756 --> 00:19:36,516
So, no worries.


403
00:19:38,296 --> 00:19:38,936
All right.


404
00:19:39,166 --> 00:19:42,216
So, we just saw system
font, we saw dynamic type,


405
00:19:42,216 --> 00:19:43,716
and we saw custom fonts.


406
00:19:45,086 --> 00:19:49,096
So, next I want to show you some
small details that you may want


407
00:19:49,316 --> 00:19:52,696
to consider using
in your own apps.


408
00:19:53,026 --> 00:19:55,726
The first one I want
to show is arrows.


409
00:19:56,866 --> 00:19:58,156
Arrows are a great thing.


410
00:19:58,296 --> 00:20:01,226
They are useful for
pointing to stuff.


411
00:20:01,606 --> 00:20:03,356
But, also they're
usable in complications


412
00:20:03,666 --> 00:20:05,816
where the information density
is very high and you want


413
00:20:05,816 --> 00:20:07,566
to get just a little
bit more information.


414
00:20:08,276 --> 00:20:11,006
Now, arrows in a staff,
they're actually stored


415
00:20:11,006 --> 00:20:12,326
in the font as characters.


416
00:20:12,326 --> 00:20:14,436
So, you can copy and paste
them in your strings,


417
00:20:14,516 --> 00:20:16,776
in Xcode for instance, and
they will just show up.


418
00:20:17,346 --> 00:20:19,476
But, more importantly
because they're in the font,


419
00:20:20,026 --> 00:20:21,836
they are weight matched
with system font.


420
00:20:22,276 --> 00:20:24,726
And if people change
their bold text switch,


421
00:20:24,836 --> 00:20:28,016
or use dynamic type, the
arrows will scale accordingly.


422
00:20:28,646 --> 00:20:32,546
Now, the second deal
I want to talk to you


423
00:20:32,546 --> 00:20:34,096
about is high-legibility
alternates.


424
00:20:34,826 --> 00:20:38,146
I talked about alternates
in typographic features.


425
00:20:38,746 --> 00:20:40,496
And we have the new
on in San Francisco,


426
00:20:40,796 --> 00:20:42,496
which helps in situations
like this.


427
00:20:42,936 --> 00:20:44,216
If you're typesetting a string


428
00:20:44,666 --> 00:20:46,826
where the context is
actually not enough to tell


429
00:20:46,826 --> 00:20:50,276
which glyph is which, and maybe
people have to pass this around


430
00:20:50,276 --> 00:20:51,836
or type it somewhere else.


431
00:20:51,836 --> 00:20:53,606
They have to read it
and be completely,


432
00:20:53,606 --> 00:20:56,196
it has to be ambiguous
which glyph is which one.


433
00:20:56,726 --> 00:20:59,216
So, there's a new statistic
set that changes the shape


434
00:20:59,216 --> 00:21:02,196
of these glyphs to
completely ambiguous ones.


435
00:21:02,196 --> 00:21:04,956
So, the I gets a serif,
the zero gets a slash,


436
00:21:05,446 --> 00:21:08,886
the L gets a little tail and
the six is less confusable


437
00:21:09,076 --> 00:21:09,716
from the eight.


438
00:21:10,206 --> 00:21:12,016
Now, these shapes we don't
recommend turning them


439
00:21:12,016 --> 00:21:13,816
on all the time,
because as you can see,


440
00:21:13,816 --> 00:21:15,556
they're pretty, they're
big changes.


441
00:21:15,556 --> 00:21:18,986
And they're highly disruptive
of the overall texture and look,


442
00:21:19,166 --> 00:21:20,596
and feel actually
of text as well.


443
00:21:20,966 --> 00:21:23,606
So, use them sparingly
if you can.


444
00:21:24,426 --> 00:21:26,986
But, this is the
code to turn them on.


445
00:21:27,266 --> 00:21:29,646
And this code, by the way,
works the same for UIFont


446
00:21:29,676 --> 00:21:31,186
and NSFont, is exactly the same.


447
00:21:31,846 --> 00:21:34,326
You start with the
UIFont or something,


448
00:21:34,566 --> 00:21:36,306
you derive a font
descriptor out of it.


449
00:21:36,376 --> 00:21:40,926
And then you can modify
it adding features to it.


450
00:21:41,016 --> 00:21:45,366
And then derive another
font out of it.


451
00:21:45,636 --> 00:21:47,396
Next, the small caps.


452
00:21:49,026 --> 00:21:51,476
Now, I'm sure you're
familiar with capital letters


453
00:21:51,786 --> 00:21:53,456
and lowercase letters as well.


454
00:21:53,836 --> 00:21:58,786
But, there is a third member of
this group, which is small caps.


455
00:21:58,786 --> 00:22:02,936
Now, small caps are a smaller
version of the capital letters


456
00:22:02,986 --> 00:22:04,416
that align with the lowercase.


457
00:22:04,416 --> 00:22:07,376
And when I say align,
I mean almost align.


458
00:22:07,746 --> 00:22:09,386
They actually ought
to be slightly larger.


459
00:22:10,046 --> 00:22:12,206
Now, when are they useful?


460
00:22:12,676 --> 00:22:13,766
Well, when you type
setting things


461
00:22:13,766 --> 00:22:15,316
like acronym, for instance.


462
00:22:16,466 --> 00:22:18,106
Acronyms or when you want


463
00:22:18,106 --> 00:22:19,796
to create subtle
information hierarchies,


464
00:22:19,796 --> 00:22:21,576
like you have the
number and then you want,


465
00:22:21,576 --> 00:22:25,396
to de-emphasize another piece
of information next to it.


466
00:22:25,776 --> 00:22:26,786
Let me show you a case study


467
00:22:26,786 --> 00:22:29,896
of how we use small
caps on Apple TV.


468
00:22:30,816 --> 00:22:34,496
Now, you have this paragraph,
and you have a hierarchy


469
00:22:34,496 --> 00:22:36,496
of like a list on the
left side and a paragraph


470
00:22:36,496 --> 00:22:37,286
on the right hand side.


471
00:22:37,596 --> 00:22:40,536
And you want the text of the
top left to be the header,


472
00:22:40,536 --> 00:22:41,496
to stand out a little bit.


473
00:22:42,096 --> 00:22:45,046
Now, if you look at his as
a wire frame, you can kind


474
00:22:45,046 --> 00:22:48,456
of start telling that that
string in all caps is sort


475
00:22:48,456 --> 00:22:50,536
of trumping everything
else in height.


476
00:22:50,536 --> 00:22:52,116
It looks a little bit too large.


477
00:22:53,136 --> 00:22:55,756
Now, one thing you could
do to tame that is,


478
00:22:55,756 --> 00:22:58,356
you could change the point
size and bring it down.


479
00:22:58,676 --> 00:23:01,656
But, if you did that it would
also make the letters lighter,


480
00:23:01,656 --> 00:23:02,516
and too close.


481
00:23:02,516 --> 00:23:03,426
So, the density will start


482
00:23:03,426 --> 00:23:05,816
to be non-matched
with everything else.


483
00:23:05,966 --> 00:23:08,016
So, what you can do, small caps.


484
00:23:08,336 --> 00:23:11,376
Small caps preserve
the all caps setting.


485
00:23:11,766 --> 00:23:13,506
But, they also preserve
the density that you want,


486
00:23:13,506 --> 00:23:14,456
and the stroke thickness.


487
00:23:15,516 --> 00:23:18,406
Now, there are two fundamental
ways, two API's actually,


488
00:23:18,406 --> 00:23:20,386
to get small caps
in our systems.


489
00:23:21,086 --> 00:23:24,096
And they have to do
with the interaction


490
00:23:24,096 --> 00:23:28,446
between the typographic features
and the underlying text.


491
00:23:28,986 --> 00:23:31,846
So, imagine you have a piece
of text which is all uppercase


492
00:23:32,476 --> 00:23:35,166
and you're turning on the small
caps from uppercase feature,


493
00:23:35,636 --> 00:23:37,686
you get a piece of text
that is all small caps.


494
00:23:38,236 --> 00:23:38,926
This looks good.


495
00:23:39,986 --> 00:23:43,556
Now, if you get, if you have
a string that is mixed case,


496
00:23:43,556 --> 00:23:45,406
upper and lowercase, and
you turn on the small caps


497
00:23:45,406 --> 00:23:47,846
from uppercase feature,
you get this.


498
00:23:48,596 --> 00:23:50,136
This does not look good.


499
00:23:50,656 --> 00:23:51,556
The problem with this one is


500
00:23:51,596 --> 00:23:54,406
that the capital letters are
not really emphasizing anything.


501
00:23:54,406 --> 00:23:56,076
And they almost look
like a mistake.


502
00:23:56,576 --> 00:23:58,226
So, please try not to
do this if you can.


503
00:23:58,936 --> 00:24:02,126
And lastly, if you have a
string that is all lowercase


504
00:24:02,126 --> 00:24:04,686
and you turn on the small
caps from uppercase feature,


505
00:24:04,946 --> 00:24:07,526
you get all lowercase, which
is not what you would expect.


506
00:24:07,526 --> 00:24:08,936
But at least it doesn't
look bad.


507
00:24:09,606 --> 00:24:10,536
So, we're fine.


508
00:24:11,386 --> 00:24:14,186
Now, the small caps from
uppercase feature is,


509
00:24:14,186 --> 00:24:16,176
the code is exactly the
same as the feature code


510
00:24:16,176 --> 00:24:19,026
that I showed you earlier for
the high-legibility alternates.


511
00:24:19,516 --> 00:24:21,366
And you just have to
change the feature amplifier


512
00:24:21,366 --> 00:24:24,376
and the selector.


513
00:24:24,476 --> 00:24:26,936
Now, there's another way of
turning, of getting small caps


514
00:24:26,936 --> 00:24:28,986
and it's from a lowercase
piece of text.


515
00:24:29,346 --> 00:24:33,126
Now, I'm sorry, if you have
an all uppercase strength,


516
00:24:33,426 --> 00:24:36,356
and you turn on small
caps from lowercase,


517
00:24:36,806 --> 00:24:38,276
you get all uppercase,


518
00:24:38,676 --> 00:24:40,096
which again is not really
what you would expect.


519
00:24:40,096 --> 00:24:41,616
But, at least it
doesn't look bad.


520
00:24:42,596 --> 00:24:45,006
Now, when you turn on
small caps from lower case


521
00:24:45,036 --> 00:24:48,226
on a mixed case string,
you get this.


522
00:24:48,526 --> 00:24:51,046
You get a mixed caps
and small caps string,


523
00:24:51,046 --> 00:24:51,716
which is legitimate.


524
00:24:52,236 --> 00:24:54,806
We actually do use this
in maps, for instance.


525
00:24:54,926 --> 00:24:56,026
It's certain zoom levels.


526
00:24:57,126 --> 00:24:58,516
Small caps are really
about subtlety.


527
00:24:58,516 --> 00:25:01,406
And this is one way to create a
subtle hierarchy for instance.


528
00:25:02,156 --> 00:25:03,456
So, again, this is fine.


529
00:25:04,496 --> 00:25:06,996
Now, if you have an all
lowercase string and you turn


530
00:25:06,996 --> 00:25:08,316
on the small caps
from lowercase,


531
00:25:08,606 --> 00:25:11,336
you get all small caps,
which is just fine.


532
00:25:12,496 --> 00:25:15,006
So, again the code to do
this is exactly the same.


533
00:25:15,006 --> 00:25:17,306
I just changed the piece
of code right there.


534
00:25:18,456 --> 00:25:20,046
And one thing you
can do with features,


535
00:25:20,046 --> 00:25:21,916
you can actually turn
multiples at once.


536
00:25:22,186 --> 00:25:24,436
So, depending where you got
that piece of text from,


537
00:25:24,656 --> 00:25:28,026
if it's under your control, if
it's user editable, you may want


538
00:25:28,026 --> 00:25:32,276
to turn both at once
as well, for instance.


539
00:25:32,606 --> 00:25:34,566
Now, there's one
subtlety about small caps.


540
00:25:34,916 --> 00:25:36,706
Which is, well they're
about subtlety,


541
00:25:36,706 --> 00:25:38,256
but there is something
subtle about them as well.


542
00:25:38,666 --> 00:25:44,226
Which is that they also operate
not just on capital letters,


543
00:25:44,436 --> 00:25:45,996
but also on numbers
and punctuation.


544
00:25:46,736 --> 00:25:48,296
And you may be wondering why.


545
00:25:48,976 --> 00:25:50,696
The reason is because you
may have a string that looks


546
00:25:50,696 --> 00:25:53,436
like this, and you want to
turn that all into small caps.


547
00:25:53,726 --> 00:25:56,256
So, we support small cap
numbers, small cap punctuation,


548
00:25:56,256 --> 00:25:58,266
and all of these in system font.


549
00:25:59,556 --> 00:26:00,136
All right.


550
00:26:00,216 --> 00:26:03,956
So, we just saw some details
of typography like arrows,


551
00:26:04,176 --> 00:26:06,786
high-legibility alternates,
and small caps.


552
00:26:07,996 --> 00:26:11,196
And that's really all
we have for today.


553
00:26:11,336 --> 00:26:14,476
We just saw the San Francisco
fonts and update there


554
00:26:14,626 --> 00:26:16,566
with the new SF Mono
family for coding.


555
00:26:16,566 --> 00:26:17,256
We hope you enjoy it.


556
00:26:17,256 --> 00:26:19,486
We saw some terminology.


557
00:26:19,796 --> 00:26:22,316
We looked at some typographic
concept design wise,


558
00:26:22,316 --> 00:26:24,236
and yeah, design concepts.


559
00:26:24,476 --> 00:26:25,556
And then we looked
at some tools.


560
00:26:25,946 --> 00:26:27,976
And lastly we saw some details.


561
00:26:27,976 --> 00:26:30,626
Some small new feature that you
may want to adopt in your apps.


562
00:26:31,646 --> 00:26:32,746
Now, for more information,


563
00:26:32,906 --> 00:26:36,406
at this URL you will find
the video of this talk.


564
00:26:36,406 --> 00:26:40,346
But, you'll also find a
bibliography and some references


565
00:26:40,346 --> 00:26:41,496
to sites that can
get you started


566
00:26:41,496 --> 00:26:43,286
in your new journey
as typographers.


567
00:26:44,646 --> 00:26:46,786
And there also related sessions.


568
00:26:46,836 --> 00:26:50,306
These have yet to happen,
are throughout the week.


569
00:26:51,056 --> 00:26:53,606
There is, the first session
is actually introducing a tool


570
00:26:53,606 --> 00:26:55,306
that will greatly help
your dynamic type.


571
00:26:55,406 --> 00:26:58,106
But, I don't want to spoil it.


572
00:26:58,106 --> 00:26:59,686
The other two sessions
have to do


573
00:26:59,686 --> 00:27:00,926
with making your apps adaptive.


574
00:27:00,926 --> 00:27:03,436
So, auto layout topics.


575
00:27:04,346 --> 00:27:07,226
The iterative design gives
you some elements of design,


576
00:27:07,656 --> 00:27:09,716
and of how to evaluate
it as well.


577
00:27:10,506 --> 00:27:13,156
And then, What's new in Auto
Layout session on Friday.


578
00:27:13,316 --> 00:27:13,856
It's really good too.


579
00:27:14,946 --> 00:27:15,606
And that's it.


580
00:27:15,706 --> 00:27:16,486
Thank you very much.


581
00:27:17,508 --> 00:27:19,508
[ Applause ]

