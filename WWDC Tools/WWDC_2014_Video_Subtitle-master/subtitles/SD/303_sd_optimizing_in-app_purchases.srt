1
00:00:11,576 --> 00:00:12,426
>> Good afternoon.


2
00:00:14,516 --> 00:00:18,706
[ Applause ]


3
00:00:19,206 --> 00:00:19,716
Thanks. Hi.


4
00:00:19,906 --> 00:00:21,166
My name is James Wilson.


5
00:00:21,166 --> 00:00:23,336
I'm an Engineering Manager
and one of the things


6
00:00:23,336 --> 00:00:25,866
that my team works
on is the frameworks


7
00:00:25,866 --> 00:00:29,396
that power the App Store
and the iBook store in OS X,


8
00:00:29,396 --> 00:00:31,186
which of course includes
StoreKit.


9
00:00:32,326 --> 00:00:36,366
And we've run a StoreKit session
at WWDC over the last few years,


10
00:00:36,816 --> 00:00:38,956
pretty much since
we debuted StoreKit


11
00:00:38,956 --> 00:00:40,026
for doing In-App Purchases.


12
00:00:41,306 --> 00:00:43,576
But the session has typically
been aimed at beginners


13
00:00:43,576 --> 00:00:46,286
and intermediate level for
developers to get a feel


14
00:00:46,286 --> 00:00:49,076
for how they can implement
In-App Purchases using StoreKit.


15
00:00:50,116 --> 00:00:52,776
We know obviously from the
absolutely massive uptake


16
00:00:52,886 --> 00:00:55,856
of In-App Purchases that it's
time to move on from that.


17
00:00:56,766 --> 00:00:58,516
So this year I wanted to
do something different.


18
00:00:58,756 --> 00:01:00,536
What we're going to focus
on in this session is how


19
00:01:00,536 --> 00:01:03,186
to optimize your In-App
Purchase implementation.


20
00:01:03,866 --> 00:01:05,886
And the kind of optimization
we are looking at is not


21
00:01:05,886 --> 00:01:08,536
so much using less
memory, using less memory,


22
00:01:08,536 --> 00:01:09,836
making it faster etcetera.


23
00:01:10,666 --> 00:01:12,206
What we're specifically looking


24
00:01:12,206 --> 00:01:13,996
at is optimizing
your implementation


25
00:01:13,996 --> 00:01:18,316
to be trouble-free, reliable,
smooth, and a great experience


26
00:01:18,316 --> 00:01:20,436
for the user every single time.


27
00:01:21,606 --> 00:01:23,706
But if you're not
familiar with StoreKit,


28
00:01:24,296 --> 00:01:26,366
here's the three key things
that StoreKit does for you.


29
00:01:27,276 --> 00:01:29,836
Of course we all know and
love that StoreKit allows us


30
00:01:29,836 --> 00:01:31,586
to do In-App Purchases
in our apps.


31
00:01:32,076 --> 00:01:34,366
This is for both consumable
and non-consumable items,


32
00:01:34,656 --> 00:01:36,076
as well as for subscriptions.


33
00:01:37,566 --> 00:01:39,856
One other thing that StoreKit
does is it has this thing called


34
00:01:39,856 --> 00:01:41,796
the StoreKit product
sheet, which is a way


35
00:01:41,796 --> 00:01:45,076
in which you can sell apps and
other content from the iTunes


36
00:01:45,076 --> 00:01:47,626
or the App Store
through your app.


37
00:01:47,626 --> 00:01:49,716
And lastly it can be
used for receipt renewal.


38
00:01:49,826 --> 00:01:51,836
Now receipts are a
really powerful way


39
00:01:52,146 --> 00:01:55,286
that you can enforce your
business model, prevent piracy,


40
00:01:55,526 --> 00:01:58,936
etcetera, right within your app
as well as within your service.


41
00:01:59,126 --> 00:02:00,556
And StoreKit's involved
there as well.


42
00:02:02,036 --> 00:02:07,136
Before we launch into optimizing
In-App Purchases using StoreKit,


43
00:02:07,186 --> 00:02:08,996
I wanted to cover a few
things that are new this year.


44
00:02:09,586 --> 00:02:12,126
The first is that that
StoreKit product sheet


45
00:02:12,126 --> 00:02:16,136
that I just mentioned before,
it allows you sell content


46
00:02:16,136 --> 00:02:18,816
from other developers or
other apps or content you have


47
00:02:18,816 --> 00:02:20,016
in the store through your app.


48
00:02:20,976 --> 00:02:24,246
That StoreKit product sheet now
supports the affiliate program.


49
00:02:25,306 --> 00:02:27,246
This is really great
for you as a developer.


50
00:02:27,746 --> 00:02:30,626
We debuted the product sheet,
I think it was last year.


51
00:02:31,306 --> 00:02:34,026
But at that time it was simply a
means by which you could market


52
00:02:34,026 --> 00:02:36,526
and sell those other product
and content through your app,


53
00:02:37,276 --> 00:02:39,866
but now with the StoreKit
product sheet supporting the


54
00:02:39,866 --> 00:02:41,736
affiliate program,
if you're part


55
00:02:41,736 --> 00:02:44,886
of that affiliate program you
can get paid for those items


56
00:02:44,886 --> 00:02:47,446
that you are selling
through your app.


57
00:02:48,336 --> 00:02:51,846
The second new thing that
I wanted to call out is


58
00:02:51,846 --> 00:02:54,256
that in StoreKit we're
introducing a new transaction


59
00:02:54,256 --> 00:02:57,446
state called deferred and we'll
look at a bit more in a second,


60
00:02:57,446 --> 00:03:00,386
but this has come about due
to the ask to buy feature


61
00:03:00,386 --> 00:03:03,066
that was implemented as part
of our family sharing feature.


62
00:03:04,016 --> 00:03:06,676
So family sharing allows
you to add up to six members


63
00:03:06,676 --> 00:03:08,246
of your family and
form a family,


64
00:03:09,196 --> 00:03:11,646
and that family can share
purchases and a payment method.


65
00:03:12,346 --> 00:03:14,306
And when you have children as
part of that family that are


66
00:03:14,306 --> 00:03:18,296
under 18 you can enable ask to
buy on them so that they can ask


67
00:03:18,296 --> 00:03:20,286
for permission to buy
things from the store,


68
00:03:20,286 --> 00:03:22,826
as well as In-App
Purchases in your app.


69
00:03:23,436 --> 00:03:24,666
And then the parent can approve


70
00:03:24,666 --> 00:03:26,476
that purchase remotely
from their devices.


71
00:03:27,246 --> 00:03:29,766
So when the transactions in
that state we call it deferred.


72
00:03:29,826 --> 00:03:32,356
And that's why we introduced
this new transaction state.


73
00:03:33,766 --> 00:03:35,386
We'll touch on this briefly
now and I'm going to look


74
00:03:35,386 --> 00:03:37,296
at an example of how to
handle it and what sort


75
00:03:37,296 --> 00:03:39,006
of things you should do
in your app later on.


76
00:03:39,006 --> 00:03:41,586
But it's called
SKPaymentTransactions


77
00:03:41,586 --> 00:03:42,366
StateDeferred.


78
00:03:43,326 --> 00:03:45,526
What this means is when
you see a transaction


79
00:03:45,846 --> 00:03:49,256
into the deferred state it
means it's neither purchased nor


80
00:03:49,256 --> 00:03:50,406
failed, yet.


81
00:03:51,796 --> 00:03:54,486
You will receive a further
update about this in the future


82
00:03:54,966 --> 00:03:57,346
as in the transaction will
enter that final state


83
00:03:57,346 --> 00:03:58,496
of either purchases or failed,


84
00:03:58,496 --> 00:04:01,466
but it will be an
indeterminate time


85
00:04:01,656 --> 00:04:03,376
between when the purchase begins


86
00:04:03,866 --> 00:04:05,466
and when it enters
that final state.


87
00:04:06,616 --> 00:04:09,726
The most important message
I want to get across for you


88
00:04:09,726 --> 00:04:12,846
as app developers is
that to implement support


89
00:04:12,846 --> 00:04:15,576
for handling this deferred
transactions state you need


90
00:04:15,576 --> 00:04:18,286
to engineer it in a way that
your app can still be used


91
00:04:18,286 --> 00:04:20,946
by the user while it's
in that deferred state.


92
00:04:22,146 --> 00:04:25,516
It's also worth mentioning
that we do actually support


93
00:04:25,516 --> 00:04:28,086
and allow you to repurchase
that item, that is attempt


94
00:04:28,086 --> 00:04:29,266
to make subsequent purchases


95
00:04:29,266 --> 00:04:31,996
for that item while the
permission is still pending,


96
00:04:31,996 --> 00:04:34,136
or while the transaction's
in that deferred state.


97
00:04:37,206 --> 00:04:39,496
Wherever possible though,
especially in regards


98
00:04:39,496 --> 00:04:40,896
to the deferred transaction
state,


99
00:04:40,896 --> 00:04:43,356
you should let StoreKit
handle the user interaction.


100
00:04:43,666 --> 00:04:46,016
We'll handle a lot of the
messaging and dialogues


101
00:04:46,016 --> 00:04:48,116
that are required for
the user in regards


102
00:04:48,116 --> 00:04:49,206
to the Ask to Buy feature.


103
00:04:50,496 --> 00:04:52,576
This is how ask to buy works,


104
00:04:52,576 --> 00:04:55,306
so I've got a child device
here and a parent device.


105
00:04:56,056 --> 00:04:58,486
When a child wants to
buy something such as one


106
00:04:58,486 --> 00:05:01,216
of your In-App Purchases, they
attempt to make the purchase


107
00:05:01,216 --> 00:05:03,626
by pressing the Buy button
and they'll be prompted


108
00:05:03,626 --> 00:05:05,656
to ask permission for that item.


109
00:05:06,276 --> 00:05:08,876
That causes a message to
be sent via the App Store


110
00:05:08,876 --> 00:05:11,356
to the parent's device, in
fact all the parent devices


111
00:05:11,396 --> 00:05:12,506
or approver's devices.


112
00:05:13,806 --> 00:05:15,116
And they receive a notification


113
00:05:15,116 --> 00:05:17,076
that this request has
been to buy this item.


114
00:05:17,076 --> 00:05:21,066
When it enters that state,
that's when the transaction goes


115
00:05:21,066 --> 00:05:22,326
into the deferred state.


116
00:05:23,176 --> 00:05:25,806
So once the child has tapped
the button to say yes they want


117
00:05:25,806 --> 00:05:28,406
to ask permission, and
the notification is sent


118
00:05:28,406 --> 00:05:29,676
out to the approvers' devices,


119
00:05:30,136 --> 00:05:33,726
that's when the transaction
becomes deferred.


120
00:05:33,726 --> 00:05:36,716
Now once the parent
goes ahead and approves


121
00:05:36,716 --> 00:05:38,696
or declines this
purchase request,


122
00:05:39,436 --> 00:05:41,666
we'll send a message back
down to the child's device


123
00:05:41,666 --> 00:05:42,816
or the requester's device.


124
00:05:43,316 --> 00:05:44,916
And at that point, that's


125
00:05:44,916 --> 00:05:47,336
when the transaction will
enter the familiar purchases,


126
00:05:47,336 --> 00:05:48,496
or failed states.


127
00:05:48,736 --> 00:05:53,056
Now let's talk about how


128
00:05:53,056 --> 00:05:55,526
to optimize your In-App
Purchase implementation.


129
00:05:57,416 --> 00:06:00,286
This next section is what I
call stock it in 60 seconds.


130
00:06:00,286 --> 00:06:02,366
It designed to give you a
really brief introduction


131
00:06:02,366 --> 00:06:03,606
to the processes involved


132
00:06:03,746 --> 00:06:05,856
in completing an In-App
Purchase using StoreKit.


133
00:06:06,796 --> 00:06:07,516
The first thing you've got


134
00:06:07,516 --> 00:06:09,056
to do is know what
you're going to sell.


135
00:06:09,186 --> 00:06:12,336
You need to load those In-App
Purchase product identifiers.


136
00:06:13,286 --> 00:06:15,016
Then once you know what
you're going to sell,


137
00:06:15,116 --> 00:06:16,826
in terms of those
product identifiers,


138
00:06:17,296 --> 00:06:18,756
you need to ask the App Store


139
00:06:18,756 --> 00:06:20,936
for the localized information
about those products.


140
00:06:21,166 --> 00:06:22,896
And we do that with
SKProduct request.


141
00:06:23,476 --> 00:06:25,706
That gives us back a
bunch of SKProduct objects


142
00:06:25,706 --> 00:06:28,446
that we can then go and draw
our really beautiful In-App


143
00:06:28,496 --> 00:06:29,076
Purchase UI.


144
00:06:29,076 --> 00:06:32,836
Once we've shown our beautiful
In-App Purchase store UI


145
00:06:33,046 --> 00:06:35,256
and we've enticed the user
to make that purchase,


146
00:06:35,746 --> 00:06:37,706
we proceed on to
converting that product


147
00:06:37,896 --> 00:06:40,286
into an SK payment
object and adding


148
00:06:40,286 --> 00:06:41,426
that into the payment queue.


149
00:06:43,016 --> 00:06:44,916
The payment queue will then
give us updates about how


150
00:06:44,916 --> 00:06:48,326
that transaction is progressing
and we will need to process


151
00:06:48,326 --> 00:06:51,236
that transaction as it moves to
the purchase or failed state.


152
00:06:52,006 --> 00:06:54,826
Assuming they purchase the
item, we then go ahead and make


153
00:06:54,826 --> 00:06:57,276
that asset or that content and
feature available to the user.


154
00:06:57,276 --> 00:07:00,366
And then lastly we
finish the transaction.


155
00:07:01,186 --> 00:07:02,066
So that's it.


156
00:07:02,066 --> 00:07:03,496
It's a pretty simple process


157
00:07:03,806 --> 00:07:05,676
when you string it
together like that.


158
00:07:06,246 --> 00:07:08,366
What we've noticed though
is though from all the apps


159
00:07:08,366 --> 00:07:11,536
that we see submitted, from all
the apps I've used personally,


160
00:07:11,786 --> 00:07:13,866
from the feedback we get from
developers and tech support,


161
00:07:13,866 --> 00:07:15,576
as well as from meeting
a lot of developers here


162
00:07:15,576 --> 00:07:20,236
at WWDC is we know that there
are definitely some danger zones


163
00:07:20,236 --> 00:07:20,626
in here.


164
00:07:21,386 --> 00:07:25,716
There's areas of this process
where the problems can crop up,


165
00:07:25,716 --> 00:07:27,656
or there's common
pitfalls or got you's.


166
00:07:28,066 --> 00:07:30,676
So the focus on this
session is to look at those,


167
00:07:30,676 --> 00:07:31,946
and to help you get over those.


168
00:07:32,286 --> 00:07:34,706
To really bring your In-App
Purchase implementation


169
00:07:34,796 --> 00:07:35,776
up to the next level.


170
00:07:36,526 --> 00:07:38,186
We want it to be as
smooth as possible,


171
00:07:38,416 --> 00:07:40,976
a great experience
every single time.


172
00:07:41,586 --> 00:07:45,326
To start off with let's
look at the user interaction


173
00:07:45,326 --> 00:07:47,736
in particularly in
the pre-sales piece


174
00:07:47,736 --> 00:07:48,906
of making an In-App Purchase.


175
00:07:49,256 --> 00:07:54,076
That is when you're
showing your store UI.


176
00:07:54,116 --> 00:07:55,176
Remember the first thing we have


177
00:07:55,226 --> 00:07:56,676
to do is know what
we want to sell.


178
00:07:56,676 --> 00:07:59,486
We need to load those In-App
Purchase product identifiers


179
00:07:59,486 --> 00:08:00,186
from somewhere.


180
00:08:00,736 --> 00:08:03,156
Now these are the product
identifiers that you set


181
00:08:03,156 --> 00:08:06,426
up in iTunes Connect when you
defined your In-App Purchase


182
00:08:06,526 --> 00:08:07,496
saleable items.


183
00:08:07,496 --> 00:08:10,186
So there's two options for
how you can load these product


184
00:08:10,186 --> 00:08:11,176
identifiers up.


185
00:08:11,976 --> 00:08:15,026
One is if you've got a very
static catalog of items


186
00:08:15,026 --> 00:08:17,756
that you're selling, that is
you might only have a handful


187
00:08:17,756 --> 00:08:19,626
of things you're selling and
you know they won't change


188
00:08:19,626 --> 00:08:20,716
throughout the lifetime
of the app,


189
00:08:21,426 --> 00:08:22,566
then it might be
simple enough for you


190
00:08:22,566 --> 00:08:25,466
to just bake those identifiers
directly into the apps binary,


191
00:08:25,766 --> 00:08:27,836
or include it as a pay
list that's part of the app


192
00:08:27,836 --> 00:08:29,146
that you submit to the store.


193
00:08:29,796 --> 00:08:31,306
That's the simplest
implementation.


194
00:08:32,206 --> 00:08:34,166
For a lot of developers though,


195
00:08:34,616 --> 00:08:36,966
we know that that doesn't
suit you well enough in terms


196
00:08:36,966 --> 00:08:39,765
of giving you enough flexibility
and what we see is that a lot


197
00:08:39,765 --> 00:08:42,246
of developers, the first
thing that happens during


198
00:08:42,246 --> 00:08:44,706
that In-App Purchase
flow is they make a call


199
00:08:44,706 --> 00:08:48,316
to their own service to fetch
that list of product identifiers


200
00:08:48,316 --> 00:08:49,806
that they're going to
display to the user.


201
00:08:50,486 --> 00:08:54,376
Now if you're doing that, you
need to think really carefully


202
00:08:54,376 --> 00:08:56,376
about how you're caching
and loading that data.


203
00:08:56,946 --> 00:09:00,106
Because it's the first step
in making an In-App Purchase.


204
00:09:00,426 --> 00:09:03,206
And that In-App Purchase process
is such a fleeting moment


205
00:09:03,206 --> 00:09:06,336
of trying to transform the
customer's intrigue and interest


206
00:09:06,806 --> 00:09:09,426
into a sale that's
obviously a benefit to you,


207
00:09:09,426 --> 00:09:11,736
but is also to help with
their enjoyment and usefulness


208
00:09:11,736 --> 00:09:12,796
of the app that they're using.


209
00:09:13,796 --> 00:09:18,456
Even more important is the
reliability of those servers


210
00:09:18,456 --> 00:09:20,156
that are hosting
your list of products


211
00:09:20,156 --> 00:09:21,006
that you're going to sell.


212
00:09:22,106 --> 00:09:23,826
You've got to make sure that
if you're going to have them


213
00:09:23,826 --> 00:09:26,076
on server and you're going
to make an HTTP request


214
00:09:26,076 --> 00:09:27,526
or whatever it might
be to load them,


215
00:09:28,076 --> 00:09:30,966
that you have a super-reliable,
font-tolerant,


216
00:09:31,016 --> 00:09:33,756
really performant server
platform that is able


217
00:09:33,756 --> 00:09:36,816
to issue those product codes
really, really quickly.


218
00:09:39,596 --> 00:09:45,026
Because that's not the way
to start an In-App Purchase.


219
00:09:45,836 --> 00:09:48,946
So often when, if I'm playing
games, or I'm using an app


220
00:09:49,106 --> 00:09:50,886
and I'm enticed to make
an In-App Purchase,


221
00:09:50,886 --> 00:09:52,396
probably because I'm not
doing very well at it,


222
00:09:53,376 --> 00:09:54,956
I tap the button to
see what it's about


223
00:09:54,956 --> 00:09:56,336
and I'm stuck at a spinner.


224
00:09:57,326 --> 00:09:58,406
There's no need for that.


225
00:09:58,746 --> 00:10:01,066
If you have to make a network
request in order to enter


226
00:10:01,066 --> 00:10:03,246
that In-App Purchase
flow, anticipate it


227
00:10:03,246 --> 00:10:03,976
and do it ahead of time.


228
00:10:04,046 --> 00:10:06,886
For most of you, you
know when it's likely


229
00:10:06,886 --> 00:10:08,196
that the user is
going to be presented


230
00:10:08,196 --> 00:10:10,676
with these In-App Purchase
offerings, so just ahead


231
00:10:10,676 --> 00:10:12,676
of time do those
network requests you need


232
00:10:12,996 --> 00:10:15,306
and avoid them getting stuck
at a spindle like this.


233
00:10:15,836 --> 00:10:19,966
So how do we load that
product information?


234
00:10:20,376 --> 00:10:22,596
You do that -- well sorry once
you've got those identifiers,


235
00:10:22,716 --> 00:10:24,726
you've got to load the
product information about them.


236
00:10:25,076 --> 00:10:27,116
This is when you transform
that simple identifier


237
00:10:27,116 --> 00:10:28,536
that you defined
in iTunes connect


238
00:10:29,096 --> 00:10:31,896
to getting the localized product
information, product price


239
00:10:32,076 --> 00:10:34,266
from the app-store that
the user is signed into.


240
00:10:35,066 --> 00:10:37,086
And you do that using
SKProduct request.


241
00:10:38,486 --> 00:10:41,196
You pass into this the set of
identifiers for which you want


242
00:10:41,196 --> 00:10:44,346
that localized product
information back.


243
00:10:44,346 --> 00:10:47,036
Now when you do this, as I
said just before, always try


244
00:10:47,036 --> 00:10:48,476
and anticipate the presentation.


245
00:10:48,946 --> 00:10:50,746
This will be another
round trip on the network.


246
00:10:51,326 --> 00:10:54,606
There's always, always going
to be some delay there.


247
00:10:54,726 --> 00:10:56,836
So it's best if you
can anticipate this,


248
00:10:57,136 --> 00:11:00,726
load it just ahead of time, or
at a point in time when you know


249
00:11:00,726 --> 00:11:02,826
that you can safely do that
without interrupting the user.


250
00:11:02,826 --> 00:11:05,966
So that you can present that
in-app UI really quickly.


251
00:11:06,896 --> 00:11:09,326
Now what you get
back when you make


252
00:11:09,326 --> 00:11:13,546
that SKProduct request is a
bunch of SKProduct objects.


253
00:11:14,406 --> 00:11:17,376
The SKProduct object will
contain the localized title


254
00:11:17,376 --> 00:11:19,946
and description, the
price and locale,


255
00:11:20,626 --> 00:11:22,496
and if you're hosting
In-App Purchases with us,


256
00:11:22,856 --> 00:11:25,166
then you'll also get back
the content size and version.


257
00:11:25,886 --> 00:11:32,146
The most important bit in the
SKProduct object you get back


258
00:11:32,146 --> 00:11:35,096
in terms of making for a really
good In-App Purchase experience,


259
00:11:35,646 --> 00:11:38,936
is that localized title, and the
localized pricing information.


260
00:11:40,566 --> 00:11:45,216
You would be amazed at how
many different ways there are


261
00:11:45,216 --> 00:11:49,116
to represent the simple concept
of currency around the world.


262
00:11:50,056 --> 00:11:52,646
This is just a very
small subset of examples.


263
00:11:53,496 --> 00:11:57,606
This is all different ways
to represent 1234 and 56


264
00:11:58,236 --> 00:11:59,566
in currencies around the world.


265
00:12:00,476 --> 00:12:02,656
Now currency is something that's
always near and dear to people,


266
00:12:02,656 --> 00:12:04,496
especially when you're offering
them something for sale.


267
00:12:05,186 --> 00:12:07,166
So make sure you can
present the currency


268
00:12:07,466 --> 00:12:09,426
for what you're offering
through In-App Purchases


269
00:12:09,776 --> 00:12:12,526
in a way that's comfortable
and familiar to that user.


270
00:12:12,866 --> 00:12:16,386
It makes for a much, much
nicer experience to make


271
00:12:16,386 --> 00:12:19,416
that user feel like they
are first-class experience


272
00:12:19,416 --> 00:12:20,816
in your app, regardless


273
00:12:20,816 --> 00:12:22,686
of wherever they are
around the world.


274
00:12:23,346 --> 00:12:25,736
Here's a neat trick
for doing that.


275
00:12:26,666 --> 00:12:28,636
You can show that you
can localize price using


276
00:12:28,636 --> 00:12:29,616
NSNumber formatter.


277
00:12:30,456 --> 00:12:32,316
Here I've created my
NSNumber formatter


278
00:12:33,096 --> 00:12:35,156
and I've set the number
style to be in currency,


279
00:12:35,156 --> 00:12:36,376
because that's what
we want to display,


280
00:12:36,896 --> 00:12:38,276
but here's where
the magic starts.


281
00:12:39,106 --> 00:12:43,466
I set the locale for that number
formatter, to the price locale


282
00:12:43,466 --> 00:12:45,626
that I got back from
the SKProduct object.


283
00:12:46,216 --> 00:12:47,346
I don't make any assumptions


284
00:12:47,346 --> 00:12:49,076
about how the device
is configured,


285
00:12:49,986 --> 00:12:51,076
I don't make any assumptions


286
00:12:51,076 --> 00:12:52,656
about where the user
might be based


287
00:12:52,656 --> 00:12:56,166
on any other criteria
whatsoever, because we want


288
00:12:56,166 --> 00:12:58,556
to show the price that's
correct for the App Store


289
00:12:58,556 --> 00:12:59,796
that they are signed into.


290
00:13:00,336 --> 00:13:03,256
And you do that by using the
price locale that you get back


291
00:13:03,256 --> 00:13:04,636
from that SKProduct object.


292
00:13:05,306 --> 00:13:09,246
Now the second piece to this
puzzle is when you go to create


293
00:13:09,246 --> 00:13:11,636
that formatted string by
calling the string for number,


294
00:13:11,706 --> 00:13:15,026
is you should pass into
that the price that you get


295
00:13:15,146 --> 00:13:17,476
from that SKProduct object.


296
00:13:18,366 --> 00:13:20,896
You see that SKProduct object
has everything you need


297
00:13:21,256 --> 00:13:23,866
to present this item
perfectly suited


298
00:13:24,096 --> 00:13:25,866
for the user no matter
what region


299
00:13:25,866 --> 00:13:26,826
or what country they're in.


300
00:13:27,216 --> 00:13:29,496
So use it to make sure that
it's the most comfortable


301
00:13:29,496 --> 00:13:31,156
and familiar experience
for the user.


302
00:13:32,066 --> 00:13:36,686
But really importantly is
there's absolutely no need


303
00:13:36,686 --> 00:13:39,896
and you definitely should
not be doing any currency


304
00:13:39,896 --> 00:13:40,926
conversion yourself.


305
00:13:41,656 --> 00:13:44,066
When the user signs into
the store with their account


306
00:13:44,166 --> 00:13:47,576
in their region or country, the
App Store is automatically set


307
00:13:47,576 --> 00:13:50,226
up to deliver you the pricing
information that is correct


308
00:13:50,356 --> 00:13:51,526
for the region they're in.


309
00:13:52,006 --> 00:13:53,626
Don't try to convert
currencies yourself.


310
00:13:56,536 --> 00:13:59,296
Another thing that I often
see go wrong is how developers


311
00:13:59,296 --> 00:14:04,186
handle errors especially during
this really important pre-sales


312
00:14:04,276 --> 00:14:05,876
part where you're making
the pitch to the user


313
00:14:05,876 --> 00:14:06,866
about what they want to buy.


314
00:14:08,076 --> 00:14:10,776
The important message here is
that not all errors are equal.


315
00:14:11,996 --> 00:14:13,256
I really encourage you


316
00:14:13,256 --> 00:14:15,716
to checkout either the In-App
Purchase programming guide,


317
00:14:15,716 --> 00:14:17,066
or probably even better,


318
00:14:17,066 --> 00:14:19,026
the StoreKit framework
reference guide.


319
00:14:19,366 --> 00:14:23,546
Because it will have a fairly
small and easily digestible list


320
00:14:23,896 --> 00:14:26,186
of error codes that the
framework may vend to you.


321
00:14:26,966 --> 00:14:29,216
Now errors can happen at
a lot of different times.


322
00:14:30,256 --> 00:14:32,686
And sometimes that error is
something you, the developer,


323
00:14:32,686 --> 00:14:35,846
needs to deal with and message
to the customer, but more often


324
00:14:35,846 --> 00:14:39,576
than not it's an error message
to just provide you feedback


325
00:14:39,576 --> 00:14:42,276
at your apps level of
what happened during


326
00:14:42,276 --> 00:14:43,146
that transaction.


327
00:14:43,776 --> 00:14:46,136
More likely than not, we've
already told them what happened.


328
00:14:46,736 --> 00:14:48,556
We've already presented
the dialogue to the user.


329
00:14:48,556 --> 00:14:50,526
We're already trying to take
them through the process


330
00:14:50,526 --> 00:14:52,296
of rectifying whatever
might have gone wrong.


331
00:14:53,376 --> 00:14:55,236
So make sure you know what
those error codes are.


332
00:14:55,826 --> 00:14:59,726
Check what the code is and know
for sure what errors you need


333
00:14:59,726 --> 00:15:03,236
to message the user about
and what you can rely


334
00:15:03,236 --> 00:15:05,146
on StoreKit having
taken care of for you.


335
00:15:05,626 --> 00:15:08,556
And the most popular example
that I see of this and the one


336
00:15:08,556 --> 00:15:11,446
that gets me every single time
I use an app that it does this,


337
00:15:12,506 --> 00:15:14,636
is when I'm seeing something
I want to buy in your app,


338
00:15:15,366 --> 00:15:17,266
tap the Buy button, I'm
all excited about it.


339
00:15:17,856 --> 00:15:20,326
Dialogue comes up to sign
into the store or touch ID.


340
00:15:20,746 --> 00:15:22,506
I've done that and
then I get the dialogue


341
00:15:22,506 --> 00:15:23,846
to confirm my purchase.


342
00:15:24,226 --> 00:15:26,376
And maybe for whatever reason
I've got a bit of cold feet


343
00:15:26,376 --> 00:15:27,486
and I hit the Cancel button.


344
00:15:28,856 --> 00:15:32,586
So many apps I see then follow
that up with a second dialogue


345
00:15:32,586 --> 00:15:35,676
that says purchase failed,
you cancelled the transaction.


346
00:15:37,536 --> 00:15:38,906
I know I cancelled
the transaction.


347
00:15:39,546 --> 00:15:40,596
I cancelled it.


348
00:15:40,656 --> 00:15:43,806
Okay? Yes your app got an
NS error back that told you


349
00:15:43,806 --> 00:15:45,156
that they cancelled
the transaction,


350
00:15:45,416 --> 00:15:47,896
but you really don't need to go
reinforce the point to the user


351
00:15:47,896 --> 00:15:50,206
that they got cold feet and
backed out of the transaction.


352
00:15:51,246 --> 00:15:55,046
In fact, it can be really
damaging for your, you know,


353
00:15:55,046 --> 00:15:56,166
possibility to keep


354
00:15:56,166 --> 00:15:58,186
that momentum going
and make that sale.


355
00:15:58,866 --> 00:16:01,186
Because if the first time
through a purchase I'm not sure


356
00:16:01,186 --> 00:16:02,726
about it and I decide
to back out,


357
00:16:03,446 --> 00:16:06,096
if my experience there wasn't
great, then I'll tell you what,


358
00:16:06,096 --> 00:16:09,346
I'm really not convinced that
I should be spending my money


359
00:16:09,346 --> 00:16:11,096
on this app if they
can't make a good job


360
00:16:11,326 --> 00:16:14,966
of letting me back
out of a purchase.


361
00:16:15,966 --> 00:16:17,146
So just being aware of that.


362
00:16:17,146 --> 00:16:19,876
It's one of a really good
example of where it's important


363
00:16:19,876 --> 00:16:21,776
to know exactly what
these error codes mean.


364
00:16:23,346 --> 00:16:25,286
Wherever possible just let us --


365
00:16:25,286 --> 00:16:27,186
let StockKit handle
the transaction flow


366
00:16:27,186 --> 00:16:28,026
as much as possible.


367
00:16:29,716 --> 00:16:31,836
We see an increasing
number of apps starting


368
00:16:31,836 --> 00:16:34,096
to introduce dialogs
and messaging ahead


369
00:16:34,096 --> 00:16:35,306
of the In-App Purchase flow.


370
00:16:35,826 --> 00:16:38,336
If that's something you feel
you need to do, that's fine,


371
00:16:38,846 --> 00:16:41,206
but I'd strongly encourage
you to come along tomorrow


372
00:16:41,206 --> 00:16:43,286
to a session given
my Chris Espinosa


373
00:16:43,616 --> 00:16:45,806
at 3:15 about apps and kids.


374
00:16:46,226 --> 00:16:48,456
It has some really good
tips there about how


375
00:16:48,456 --> 00:16:49,956
to handle this sort
of interaction.


376
00:16:52,656 --> 00:16:54,656
So now let's move on
to making the purchase.


377
00:16:55,656 --> 00:16:57,306
You have done a great job


378
00:16:57,306 --> 00:17:00,056
of showing this glorious
In-App Purchase UI to the user.


379
00:17:00,246 --> 00:17:02,336
It was perfectly presented
to them, no rough edges,


380
00:17:02,336 --> 00:17:03,486
no silly error messages.


381
00:17:03,906 --> 00:17:06,026
They've tapped the Buy button
and they want to move forward.


382
00:17:06,955 --> 00:17:12,116
So when you go and make that
purchase, this is when you start


383
00:17:12,116 --> 00:17:13,935
to really get into
using StoreKit.


384
00:17:14,935 --> 00:17:20,126
StoreKit revolves around and is
centered around a payment queue.


385
00:17:20,536 --> 00:17:22,945
And the most important
thing you've got to do


386
00:17:22,945 --> 00:17:26,026
with that payment queue
is observe it always.


387
00:17:27,326 --> 00:17:29,706
The payment queue is where
you'll get all information


388
00:17:29,706 --> 00:17:31,526
about how a transaction
is progressing,


389
00:17:32,276 --> 00:17:34,356
whether it was purchased
or failed, whether it's


390
00:17:34,356 --> 00:17:36,446
in progress, whether
it's deferred.


391
00:17:36,446 --> 00:17:37,386
You'll also get information


392
00:17:37,386 --> 00:17:39,246
about restored transactions,
etcetera.


393
00:17:40,066 --> 00:17:43,306
It should be the center of your
In-App Purchase implementation


394
00:17:43,816 --> 00:17:46,606
and it's the only
source of truth for state


395
00:17:46,606 --> 00:17:48,226
about transactions
as they occur.


396
00:17:48,616 --> 00:17:52,596
There's absolutely no need
for you as a developer to try


397
00:17:52,596 --> 00:17:55,356
and integrate some sort of
complicated state machine,


398
00:17:55,356 --> 00:17:58,366
or caching of state about
transactions that are in place,


399
00:17:59,216 --> 00:18:03,136
because you can get all of that
from the payment queue itself.


400
00:18:03,706 --> 00:18:05,776
You can get transactions
that are in progress.


401
00:18:06,056 --> 00:18:09,326
You can know about the status of
a transaction as it progresses.


402
00:18:09,966 --> 00:18:12,376
And if you're hosting In-App
Purchases with it, the queue is


403
00:18:12,376 --> 00:18:14,816
where you'll also get that
download status information.


404
00:18:14,906 --> 00:18:20,026
I think one of the most common
reasons I see developers attempt


405
00:18:20,026 --> 00:18:24,056
to tack on a side cache of
state about In-App Purchases,


406
00:18:24,406 --> 00:18:27,106
rather than just holy and
solely trusting the queue,


407
00:18:27,106 --> 00:18:30,826
is because they feel that in
order to update UI elements,


408
00:18:31,256 --> 00:18:33,566
and you know, communicate
the progress


409
00:18:33,566 --> 00:18:35,966
of the In-App Purchase flow
through the app that they need


410
00:18:35,966 --> 00:18:39,156
to somehow stash that
payment object away or try


411
00:18:39,156 --> 00:18:42,716
and tack some extra state on to
it somehow so that they can keep


412
00:18:42,716 --> 00:18:44,846
that UI up-to-date
and congruous,


413
00:18:45,156 --> 00:18:48,586
but in fact that's not true.


414
00:18:48,586 --> 00:18:50,146
And we will see in one
of the examples I'm going


415
00:18:50,146 --> 00:18:51,646
to give you how you
can harness the queue


416
00:18:51,886 --> 00:18:55,416
and trust only the queue
and still achieve all that.


417
00:18:56,696 --> 00:18:59,056
But just as you've got to
rely on the payment queue


418
00:18:59,056 --> 00:19:01,946
for all those updates and all
those pieces of information,


419
00:19:02,666 --> 00:19:05,536
you also need to be aware
that any and all transactions


420
00:19:05,536 --> 00:19:08,286
that appear in the queue
are real and valid.


421
00:19:09,586 --> 00:19:13,106
Just because your app didn't
start a payment or your --


422
00:19:13,106 --> 00:19:15,376
the running instance of your
app didn't start a payment


423
00:19:15,536 --> 00:19:18,526
or for whatever reason
you don't think


424
00:19:18,526 --> 00:19:20,556
for some reason this
transaction is valid,


425
00:19:21,466 --> 00:19:23,356
then you are likely
leaving your customers


426
00:19:23,356 --> 00:19:25,586
out from a real monetary
transaction


427
00:19:25,676 --> 00:19:26,676
that has taken place.


428
00:19:27,596 --> 00:19:30,016
So make sure you trust
the queue completely.


429
00:19:30,456 --> 00:19:32,236
Any and all transactions
that you see in there,


430
00:19:32,236 --> 00:19:34,916
any and all updates you
see are real and valid.


431
00:19:35,256 --> 00:19:37,096
Now if you're concerned
about how to ensure


432
00:19:37,096 --> 00:19:38,636
that they are not
an unauthorized


433
00:19:39,086 --> 00:19:41,936
or a fraudulent transaction,
that's a different matter.


434
00:19:42,656 --> 00:19:45,106
Please come along on
Friday morning at 10:15,


435
00:19:45,106 --> 00:19:45,886
I'm doing a session


436
00:19:45,886 --> 00:19:48,706
about preventing unauthorized
transactions using receipts


437
00:19:49,036 --> 00:19:51,516
and you'll see that it's the
receipt that holds that source


438
00:19:51,516 --> 00:19:53,816
of truth about whether
something was a real,


439
00:19:53,816 --> 00:19:55,386
valid monetary transaction.


440
00:19:56,246 --> 00:19:57,416
But otherwise for all intents


441
00:19:57,416 --> 00:19:58,976
and purposes, we
trust the queue.


442
00:20:00,056 --> 00:20:02,146
And how do we do that?


443
00:20:02,316 --> 00:20:04,786
On launch, as soon as possible,


444
00:20:04,786 --> 00:20:06,966
ideally in your application
deep finish launching,


445
00:20:07,356 --> 00:20:09,686
you should be calling
SKPaymetQueue


446
00:20:09,686 --> 00:20:11,026
addTransactionObserver.


447
00:20:12,186 --> 00:20:14,946
The object you add in there will
be your object that conforms


448
00:20:14,946 --> 00:20:18,236
to the SKPaymentQueue observer
protocol and that's your object


449
00:20:18,236 --> 00:20:21,466
that forms the center of your
In-App Purchase implementation.


450
00:20:21,906 --> 00:20:23,386
It's going to receive
all the updates


451
00:20:23,386 --> 00:20:25,186
about how payments are
progressing in the queue


452
00:20:25,256 --> 00:20:27,826
and it's how you can handle
everything from dealing


453
00:20:27,826 --> 00:20:30,366
with errors, to updating
UI, etcetera.


454
00:20:30,456 --> 00:20:34,866
So I'm going to walk you
through a quick example here.


455
00:20:35,936 --> 00:20:38,186
Not so much because you need
to get this beginner sort


456
00:20:38,186 --> 00:20:39,886
of level information,
but because I want


457
00:20:40,046 --> 00:20:41,146
to show you how it leads


458
00:20:41,146 --> 00:20:43,606
into a really bad design
pattern and why that's wrong.


459
00:20:43,836 --> 00:20:46,326
First thing we've got to do is


460
00:20:46,326 --> 00:20:50,046
of course we make this call
making to SKProduct request


461
00:20:50,436 --> 00:20:52,756
to get information about the
products we want to sell.


462
00:20:53,946 --> 00:20:57,346
Now once we've done that and we
set our delegate and call start,


463
00:20:57,786 --> 00:20:59,726
we're going to get that
product information back.


464
00:20:59,726 --> 00:21:01,926
We're going to get a bunch
of SKProduct objects.


465
00:21:02,506 --> 00:21:05,056
When the user taps the Buy
button and wants to end


466
00:21:05,056 --> 00:21:09,366
that purchase flow, we
take that SKProduct object,


467
00:21:09,466 --> 00:21:11,376
and we transform
it into a payment


468
00:21:11,866 --> 00:21:13,856
by calling SKPayment
payment with product.


469
00:21:14,696 --> 00:21:17,736
One little thing to note here
is I've heard some feedback


470
00:21:17,736 --> 00:21:20,356
from DTS in particular is
that they've seen a lot


471
00:21:20,356 --> 00:21:23,736
of developers try and handcraft
their own SKProduct objects


472
00:21:24,176 --> 00:21:25,226
to create the payment with.


473
00:21:25,816 --> 00:21:27,546
That's totally not
the right thing to do.


474
00:21:28,146 --> 00:21:30,096
What you need to do is
get your identifiers


475
00:21:30,096 --> 00:21:30,956
of what you want to sell.


476
00:21:31,466 --> 00:21:34,376
Use SKProduct request to get
that localized information


477
00:21:34,376 --> 00:21:35,836
and the SKProduct objects.


478
00:21:36,386 --> 00:21:41,116
Then you hand those SKProduct
objects into SKPayment


479
00:21:41,116 --> 00:21:42,096
to get the payment object.


480
00:21:42,476 --> 00:21:43,616
Don't try to craft your own.


481
00:21:43,616 --> 00:21:46,026
You've got to use those
real live SKProduct objects.


482
00:21:47,266 --> 00:21:50,566
So the first step was that
we call SKPayment payment


483
00:21:50,636 --> 00:21:51,186
with product.


484
00:21:52,016 --> 00:21:54,396
The next step is we take
that payment and we add it


485
00:21:54,396 --> 00:21:56,476
into our payment queue
to start that process.


486
00:21:58,006 --> 00:22:02,716
It's very, very deliberate that
there is no step three here.


487
00:22:03,436 --> 00:22:06,816
Because at this point in time
you are completely hands-off


488
00:22:06,816 --> 00:22:09,696
and you should step back and let
StoreKit handle this transaction


489
00:22:09,696 --> 00:22:10,076
for you.


490
00:22:12,216 --> 00:22:14,106
In fact the transaction
will take on a life


491
00:22:14,106 --> 00:22:16,216
of its own completely
outside of your app.


492
00:22:16,496 --> 00:22:19,476
StoreKit and its background
processes will handle the actual


493
00:22:19,476 --> 00:22:21,876
purchasing process, the
dialogues, and the sign


494
00:22:21,876 --> 00:22:24,046
in with the user
outside of your app.


495
00:22:24,866 --> 00:22:28,456
That means that payment takes
on a life outside of your app,


496
00:22:28,456 --> 00:22:33,236
even if your app crashes,
even if your app is quit,


497
00:22:33,786 --> 00:22:37,116
or other circumstances
that cause a long delay


498
00:22:37,116 --> 00:22:40,856
in that payment process
transacting, it will continue


499
00:22:40,856 --> 00:22:43,076
to happen even if your
app's not running.


500
00:22:43,686 --> 00:22:47,946
So what we need to do is
we've got to handle the events


501
00:22:47,946 --> 00:22:50,436
from the queue to know
where this payment is at.


502
00:22:51,556 --> 00:22:54,506
The most important
SKPaymentQueue observer method


503
00:22:54,736 --> 00:22:57,646
to implement is payment
queue updated transactions.


504
00:22:58,166 --> 00:23:00,696
This is what gets called
every time a payment starts


505
00:23:00,696 --> 00:23:02,006
progressing through the process


506
00:23:02,006 --> 00:23:05,026
of becoming an actual In-App
Purchase that is made.


507
00:23:06,586 --> 00:23:08,556
And we can implement
this like this.


508
00:23:09,326 --> 00:23:11,306
So here I've got a full
loop that loops over each


509
00:23:11,306 --> 00:23:13,536
of those transactions that
I'm receiving an update for,


510
00:23:14,076 --> 00:23:16,376
and for each transaction I
set up a switch statement


511
00:23:16,376 --> 00:23:17,866
because I want to
particularly know


512
00:23:18,226 --> 00:23:20,026
which state this
transaction is in.


513
00:23:20,916 --> 00:23:23,906
Then I can do things like
looking for the state


514
00:23:23,906 --> 00:23:26,296
of SKPayment transaction
purchased.


515
00:23:26,716 --> 00:23:28,466
That means the purchase
has completed


516
00:23:28,466 --> 00:23:29,786
and I can unlock
features and content.


517
00:23:29,786 --> 00:23:31,986
I can go ahead and
check the receipt,


518
00:23:32,266 --> 00:23:34,296
make sure it's a real
monetary transaction,


519
00:23:34,296 --> 00:23:35,716
not a fraudulent
one that's occurred,


520
00:23:35,966 --> 00:23:38,456
and then unlock those features
and content accordingly.


521
00:23:39,926 --> 00:23:45,366
But don't do this.


522
00:23:45,576 --> 00:23:48,106
Don't set up that case
statement to look for the state


523
00:23:48,106 --> 00:23:51,316
of purchased and then try
and find a matching payment


524
00:23:51,316 --> 00:23:54,346
in some side cache that
you've got of payments


525
00:23:54,346 --> 00:23:55,806
that you thought
were in progress.


526
00:23:56,826 --> 00:23:59,396
Because once you've created that
payment object and thrown it


527
00:23:59,396 --> 00:24:00,996
in the payment queue
to start the process,


528
00:24:01,446 --> 00:24:03,076
that object should
be dead to you.


529
00:24:03,076 --> 00:24:03,986
You should forget about it.


530
00:24:04,876 --> 00:24:06,716
You'll get information
about those payments


531
00:24:06,716 --> 00:24:08,296
and those transactions
through the queue.


532
00:24:09,706 --> 00:24:12,756
So if you did something
like this and tried to fetch


533
00:24:12,756 --> 00:24:14,926
that payment out of some cache
that you were maintaining


534
00:24:14,926 --> 00:24:18,336
of what you thought was in
progress, and then even worse,


535
00:24:18,936 --> 00:24:21,096
did something like
this and said, "Huh?'


536
00:24:21,096 --> 00:24:24,226
"I don't know this payment, I've
got no idea where it comes from.


537
00:24:24,266 --> 00:24:26,236
I'm just going to ignore
it and skip over it."


538
00:24:27,746 --> 00:24:29,736
You will have left
the customer out here.


539
00:24:30,076 --> 00:24:32,646
Okay. If something
arrives in the queue,


540
00:24:32,646 --> 00:24:34,776
it's because someone
bought something.


541
00:24:35,396 --> 00:24:37,766
Even if you don't think it
originated from your app,


542
00:24:38,146 --> 00:24:40,876
or the running instance of your
app, there's lots of reasons


543
00:24:40,876 --> 00:24:43,956
of why a transaction can
suddenly appear in the queue.


544
00:24:44,266 --> 00:24:45,076
They're always real.


545
00:24:45,076 --> 00:24:45,886
They're always valid.


546
00:24:45,986 --> 00:24:48,126
You should process them.


547
00:24:50,236 --> 00:24:51,166
So why not?


548
00:24:51,226 --> 00:24:52,206
Why wouldn't we do that?


549
00:24:52,546 --> 00:24:53,946
Because what if your
app crashes?


550
00:24:54,336 --> 00:24:56,396
Obviously then you've lost
your cache of information.


551
00:24:56,566 --> 00:24:59,486
And not only will the user have
to endure a crash in your app,


552
00:25:00,016 --> 00:25:01,196
but next time when they launch


553
00:25:01,196 --> 00:25:03,176
if you then ignore the
subsequent update you get


554
00:25:03,176 --> 00:25:06,106
about the payment, then not only
have they put up with a crash,


555
00:25:06,446 --> 00:25:11,416
they've missed out on
what you've sold them.


556
00:25:11,636 --> 00:25:12,456
It's just as valid.


557
00:25:12,996 --> 00:25:14,686
Always process those
transactions.


558
00:25:15,236 --> 00:25:18,836
Now, getting back to what
we talked about before.


559
00:25:18,836 --> 00:25:22,356
This new state of the
SKPayment transaction deferred.


560
00:25:23,316 --> 00:25:24,846
Here's an example
of how to handle


561
00:25:25,296 --> 00:25:26,736
that transaction being deferred.


562
00:25:26,996 --> 00:25:30,026
So remember in this
state, a child that's part


563
00:25:30,026 --> 00:25:33,136
of a family sharing unit
has asked permission


564
00:25:33,136 --> 00:25:34,306
to buy something in your app.


565
00:25:34,306 --> 00:25:36,196
And the transaction has moved


566
00:25:36,196 --> 00:25:39,086
from SKPayment state
purchasing to deferred.


567
00:25:40,386 --> 00:25:42,556
Now when you see
that status come


568
00:25:42,556 --> 00:25:45,186
through as SKPaymentTransaction
StateDeferred,


569
00:25:45,996 --> 00:25:47,026
here's what you should do.


570
00:25:48,086 --> 00:25:51,316
There's three important things
that we'd really encourage you


571
00:25:51,316 --> 00:25:53,866
as developers to do in your
handling of this situation.


572
00:25:54,656 --> 00:25:57,606
The first is allow the
user to keep using the app.


573
00:25:58,286 --> 00:26:00,986
It would be an absolute
buzz-kill for the kids


574
00:26:01,536 --> 00:26:04,516
if they are sitting there in
the app, absolutely delighted


575
00:26:04,516 --> 00:26:07,836
about the possibility that
mom or dad might just say yes


576
00:26:07,936 --> 00:26:09,196
to this purchase
they've asked for,


577
00:26:09,196 --> 00:26:12,146
but all the while they
have to sit there waiting.


578
00:26:12,466 --> 00:26:13,466
Spinners up.


579
00:26:13,616 --> 00:26:14,906
Waiting for permission.


580
00:26:15,216 --> 00:26:16,456
They're going to quit.


581
00:26:16,456 --> 00:26:18,146
They're going to
go to another app.


582
00:26:18,196 --> 00:26:18,906
You're going to lose them.


583
00:26:19,666 --> 00:26:22,316
Okay. Make sure they can keep
using the app in some way.


584
00:26:23,316 --> 00:26:25,466
Because it may be
some time before


585
00:26:25,466 --> 00:26:26,786
that transaction is updated.


586
00:26:27,376 --> 00:26:29,586
It could be up to 24
hours before the approval


587
00:26:29,586 --> 00:26:31,456
or decline comes
through from the parents.


588
00:26:33,406 --> 00:26:36,566
So really don't get them stuck
in that modal purchasing state


589
00:26:36,566 --> 00:26:38,576
where they can't do
anything with your app.


590
00:26:38,636 --> 00:26:40,256
In fact one way to think


591
00:26:40,256 --> 00:26:43,056
of it is you've got a
very captive audience


592
00:26:43,056 --> 00:26:43,936
at this point in time.


593
00:26:44,226 --> 00:26:45,946
Someone wants something
in your app


594
00:26:45,946 --> 00:26:47,546
and they're waiting
for approval for it.


595
00:26:48,406 --> 00:26:49,366
Make use of that time.


596
00:26:49,906 --> 00:26:57,406
But at the end of any
transaction you perform


597
00:26:57,406 --> 00:26:59,716
with StoreKit, whether it
gets purchased or failed.


598
00:27:00,086 --> 00:27:04,286
You always must call
FinishTransaction.


599
00:27:05,556 --> 00:27:08,356
When you call FinishTransaction
that tells the App Store


600
00:27:08,356 --> 00:27:09,786
that you're done with
this transaction.


601
00:27:09,876 --> 00:27:11,506
You've seen it, you've
processed it,


602
00:27:11,666 --> 00:27:13,066
you don't need to see it again.


603
00:27:13,666 --> 00:27:16,406
It removes it from the
queue and then it makes sure


604
00:27:16,406 --> 00:27:19,436
that we don't keep calling the
Updated Transaction Method each


605
00:27:19,436 --> 00:27:23,016
time on launch or at other
points when your app is running.


606
00:27:23,786 --> 00:27:28,066
Now this is most common cause
that I see for bad app behavior


607
00:27:28,066 --> 00:27:32,316
on launch, especially things
like really slow launch time,


608
00:27:32,986 --> 00:27:34,526
or a launch time
where it launches,


609
00:27:34,526 --> 00:27:36,116
then it's hanging
there for a while.


610
00:27:36,706 --> 00:27:39,396
Or worst of all when the app
launches and I'm presented


611
00:27:39,396 --> 00:27:41,706
with a series of dialogues that
just don't make sense to me


612
00:27:42,496 --> 00:27:45,946
because in fact what's happening
is because you didn't remove


613
00:27:45,946 --> 00:27:50,906
that transaction from the queue,
when your app launches we get --


614
00:27:50,906 --> 00:27:53,266
and you add that
transaction queue observer in,


615
00:27:53,826 --> 00:27:56,206
the first thing we do is
go and look at the history


616
00:27:56,286 --> 00:27:57,796
of transactions that
are still pending


617
00:27:57,796 --> 00:27:59,816
and haven't had Transaction
Finished called on them,


618
00:28:00,246 --> 00:28:02,556
and we'll go and
replay all those updates


619
00:28:02,556 --> 00:28:03,496
through to your app.


620
00:28:04,276 --> 00:28:07,066
So if you then start
processing them and have reason


621
00:28:07,066 --> 00:28:09,246
to message something to
the user and still fail


622
00:28:09,246 --> 00:28:10,516
to call FinishTransaction


623
00:28:10,516 --> 00:28:14,726
that means every single
time your app launches,


624
00:28:15,236 --> 00:28:16,816
it's going to go
through this process.


625
00:28:17,696 --> 00:28:19,296
It's a bad user experience
and it's one


626
00:28:19,296 --> 00:28:22,076
that gets worse the more
the user uses your app.


627
00:28:22,466 --> 00:28:24,326
So always call FinishTransaction


628
00:28:24,646 --> 00:28:26,066
to get those items
out of the queue.


629
00:28:27,336 --> 00:28:31,476
Two tips about the
SKPaymentQueue object itself.


630
00:28:31,956 --> 00:28:34,006
One is going back to this notion


631
00:28:34,006 --> 00:28:36,436
that the SKPaymentQueue is
your single source of truth.


632
00:28:37,036 --> 00:28:39,156
It has a property on
it called transactions.


633
00:28:39,616 --> 00:28:42,866
And you can call that property
and get the list of transactions


634
00:28:42,866 --> 00:28:43,886
that are currently inflight.


635
00:28:44,566 --> 00:28:47,216
So for example, if
you wanted to --


636
00:28:47,416 --> 00:28:49,646
when you show your In-App
Purchase UI make sure


637
00:28:49,646 --> 00:28:52,416
that you correctly
represented any items


638
00:28:52,416 --> 00:28:53,426
that are still purchasing.


639
00:28:54,046 --> 00:28:55,916
You could call transactions
to get the list


640
00:28:56,106 --> 00:28:57,366
of payments in progress.


641
00:28:58,056 --> 00:29:00,846
As opposed to trying to track
that state yourself on the side.


642
00:29:01,856 --> 00:29:04,526
The other one is keep in mind


643
00:29:04,526 --> 00:29:07,166
that in-app purchasing can
be disabled on the device.


644
00:29:07,816 --> 00:29:10,766
And it's a really bad experience
for the user if they're enticed


645
00:29:10,986 --> 00:29:13,806
to play your game or use
your app enough to want


646
00:29:13,806 --> 00:29:16,356
to make an In-App
Purchase then only to find


647
00:29:16,356 --> 00:29:17,926
that they get some error
message telling them


648
00:29:17,926 --> 00:29:18,966
that that's been disabled.


649
00:29:20,136 --> 00:29:22,146
So you can call it
can make payments


650
00:29:22,496 --> 00:29:25,096
on SKPyament queue it's a class
method for returning a BOOL


651
00:29:25,096 --> 00:29:28,726
to know whether or not In-App
Purchase can actually be made.


652
00:29:28,726 --> 00:29:33,866
Now I want to give you a
quick demo of a few things


653
00:29:33,866 --> 00:29:34,806
that we've just talked about.


654
00:29:44,646 --> 00:29:49,166
Okay. I have here a very,
very simple app for OS X


655
00:29:49,166 --> 00:29:50,986
that does an In-App Purchase.


656
00:29:51,756 --> 00:29:54,136
Everything I talk about in this
session, including this demo,


657
00:29:54,136 --> 00:29:55,976
applies equally to iOS and OS X.


658
00:29:56,396 --> 00:29:58,386
StoreKit is the same
on both platforms.


659
00:29:58,576 --> 00:30:00,976
But in this app a few
things to call out.


660
00:30:01,166 --> 00:30:03,446
In my application
deep finish launching,


661
00:30:03,976 --> 00:30:06,436
first thing I'm doing
is I'm adding an object


662
00:30:06,436 --> 00:30:07,616
in to observe the queue.


663
00:30:09,156 --> 00:30:12,386
And down here you'll see I will
have implemented my payment


664
00:30:12,426 --> 00:30:14,196
queue updated transaction
method.


665
00:30:15,066 --> 00:30:18,076
It's in here that I start
inspecting and dealing


666
00:30:18,076 --> 00:30:19,356
with all those events
that happen


667
00:30:19,716 --> 00:30:21,926
as purchases progress
through the queue.


668
00:30:22,426 --> 00:30:24,786
I deal with things like
entering the purchasing state,


669
00:30:24,786 --> 00:30:28,116
when things first start,
when it gets purchased,


670
00:30:28,536 --> 00:30:29,696
where it's failed or restored.


671
00:30:29,696 --> 00:30:33,226
So for the sake of this demo,


672
00:30:33,226 --> 00:30:36,106
I'm going to run my
really, really simple app.


673
00:30:36,486 --> 00:30:39,086
All it does is it sells
a .99 cent banana via an


674
00:30:39,086 --> 00:30:39,816
In-App Purchase.


675
00:30:40,116 --> 00:30:40,926
Really exciting.


676
00:30:41,166 --> 00:30:43,396
I'm going to go ahead
and purchase that.


677
00:30:44,516 --> 00:30:46,276
Now as soon as I hit
the Purchase button,


678
00:30:47,076 --> 00:30:48,746
before any other
user interaction,


679
00:30:49,056 --> 00:30:52,196
I've straightaway my
breakpoint was hit that I set


680
00:30:52,456 --> 00:30:54,796
in my payment queue
updated transactions method.


681
00:30:55,906 --> 00:30:57,256
So that's really
important to know,


682
00:30:57,256 --> 00:31:00,236
because if you were thinking you
had to track UI state yourself,


683
00:31:00,746 --> 00:31:01,886
this demonstrates you don't.


684
00:31:02,276 --> 00:31:04,006
As soon as that button
was clicked -- bang.


685
00:31:04,496 --> 00:31:07,056
We're into the payment queue and
observing an event occurring.


686
00:31:07,646 --> 00:31:10,396
And in fact the event that
we're observing is the fact


687
00:31:10,396 --> 00:31:13,696
that this payment or this
transaction has entered the


688
00:31:13,696 --> 00:31:14,886
state of purchasing.


689
00:31:15,306 --> 00:31:17,296
So this would be a time when I
could go and update the state


690
00:31:17,296 --> 00:31:21,026
of my Buy buttons whatever else
I need to do to inform the user


691
00:31:21,026 --> 00:31:23,056
that yes this transaction
is underway.


692
00:31:23,156 --> 00:31:25,276
I'm going to take that
breakpoint out because


693
00:31:25,276 --> 00:31:26,166
that can get a big noisy.


694
00:31:26,166 --> 00:31:28,466
But let's let the app continue
and see what happens here.


695
00:31:29,356 --> 00:31:31,156
So I've been prompted
to sign in.


696
00:31:31,866 --> 00:31:34,396
Now one thing to note is
because this is a test app,


697
00:31:34,966 --> 00:31:38,216
I'm using the App
Store test environment.


698
00:31:38,756 --> 00:31:40,416
That is I have my app signed


699
00:31:40,786 --> 00:31:42,956
with my development
certificate as we see here.


700
00:31:44,276 --> 00:31:45,506
Scroll down to the code sign.


701
00:31:45,506 --> 00:31:47,666
Sometimes it's easy to just
search here for code signing.


702
00:31:48,656 --> 00:31:51,946
Of course you need to
set it all and combine.


703
00:31:54,036 --> 00:31:56,336
See here my code
signing identity is set


704
00:31:56,336 --> 00:31:57,286
to Mac developer.


705
00:31:58,006 --> 00:32:01,256
This makes sure that my app is
development-signed when it runs.


706
00:32:01,256 --> 00:32:03,346
That means that when we
start using StoreKit,


707
00:32:03,626 --> 00:32:05,646
StoreKit can inspect
our code signature --


708
00:32:05,646 --> 00:32:08,376
the code signature of
this app and it can know


709
00:32:08,376 --> 00:32:10,516
that because it's
development-signed it needs


710
00:32:10,516 --> 00:32:13,486
to talk to the test environment,
not the production App store.


711
00:32:13,866 --> 00:32:16,316
And that allows us to test our
In-App Purchase implementation


712
00:32:16,316 --> 00:32:17,856
before we have anything
on the store.


713
00:32:17,856 --> 00:32:21,406
So I'm going to go ahead
here and enter my password.


714
00:32:23,416 --> 00:32:24,296
Cool, yep.


715
00:32:24,296 --> 00:32:27,356
I definitely want
to buy this banana.


716
00:32:27,446 --> 00:32:28,706
And I've already purchased it.


717
00:32:29,066 --> 00:32:30,336
I've done this demo
a few times now.


718
00:32:31,336 --> 00:32:34,406
And see here when we
get the final thank you


719
00:32:34,406 --> 00:32:36,736
through from StoreKit
and from the App store,


720
00:32:37,166 --> 00:32:39,136
we're already back
in in our app,


721
00:32:39,276 --> 00:32:40,636
we've got our breakpoint fired


722
00:32:40,916 --> 00:32:43,906
in the SKPayment
transaction state purchased.


723
00:32:44,766 --> 00:32:47,236
This is where we can then go
ahead and inspect what it was


724
00:32:47,236 --> 00:32:49,986
that was bought by looking at
the receipt, unlocking features


725
00:32:49,986 --> 00:32:52,766
and content, and then whatever
else we need to do based


726
00:32:52,766 --> 00:32:54,106
on this purchase
having occurred.


727
00:32:56,556 --> 00:33:00,496
But right now, at this point
because of the breakpoint,


728
00:33:01,336 --> 00:33:04,636
notice that I have not yet
called FinishTransaction.


729
00:33:05,766 --> 00:33:07,516
I've made breakpoint
right at the point


730
00:33:07,516 --> 00:33:09,016
when I would normally
go and check the receipt


731
00:33:09,016 --> 00:33:12,016
to know what they bought
and unlock those features


732
00:33:12,016 --> 00:33:12,996
and content accordingly.


733
00:33:14,276 --> 00:33:17,156
But what if I hit
the Stop button


734
00:33:17,156 --> 00:33:18,636
up here in my app in X code?


735
00:33:19,276 --> 00:33:22,016
This is just like what would
happen if my app crashed midway


736
00:33:22,016 --> 00:33:24,436
through the In-App
Purchase, or what would happen


737
00:33:24,436 --> 00:33:25,496
if the user killed your app,


738
00:33:25,496 --> 00:33:27,236
or quit your app
during the purchase.


739
00:33:27,236 --> 00:33:28,446
Or maybe something
else happened,


740
00:33:28,446 --> 00:33:30,086
lost network, whatever
it may be.


741
00:33:31,086 --> 00:33:32,386
The important thing is here --


742
00:33:32,876 --> 00:33:36,836
let's put this breakpoint back
on, when my app next launches


743
00:33:36,836 --> 00:33:40,146
and this applies to iOS and
OS X, watch what happens,


744
00:33:40,676 --> 00:33:45,626
on launch I was immediately
taken again


745
00:33:46,056 --> 00:33:48,316
into Payment Queue
Updated Transactions.


746
00:33:48,986 --> 00:33:52,276
Why? Because that transaction
hadn't finished yet.


747
00:33:52,756 --> 00:33:54,656
Your app crashed
midway through handling


748
00:33:54,656 --> 00:33:58,976
that even though the user had
paid for what they've bought.


749
00:33:58,976 --> 00:34:01,486
So this is why it's so important
to always observe the queue


750
00:34:01,486 --> 00:34:03,626
and handle any and every
transaction that occurs


751
00:34:03,626 --> 00:34:05,676
through here in a
way that doesn't rely


752
00:34:05,676 --> 00:34:07,396
on you tracking any
state yourself.


753
00:34:08,666 --> 00:34:10,366
So this time I'm going
to let this go through.


754
00:34:10,426 --> 00:34:12,826
And it goes through
and make sure


755
00:34:12,826 --> 00:34:14,606
that we do actually
finish that transaction.


756
00:34:17,126 --> 00:34:18,886
One thing I did want to
note, we mentioned before


757
00:34:18,886 --> 00:34:20,166
about the updating of UI.


758
00:34:20,806 --> 00:34:22,346
Let's go through
this process again.


759
00:34:22,346 --> 00:34:24,045
I'm going to set
a breakpoint here


760
00:34:24,045 --> 00:34:26,106
on transaction state purchasing.


761
00:34:27,196 --> 00:34:30,866
Now when I run this
lets buy a banana again.


762
00:34:31,335 --> 00:34:35,545
Just take note of the
fact that this time


763
00:34:35,545 --> 00:34:41,766
around my breakpoint here was
called on the main thread.


764
00:34:42,376 --> 00:34:45,176
But you shouldn't necessarily
make any assumptions


765
00:34:45,246 --> 00:34:47,656
about which thread you
will get the call backs on.


766
00:34:48,466 --> 00:34:50,426
So if you're updating
UI elements in here


767
00:34:50,426 --> 00:34:53,005
such as setting the button
state, graying things out,


768
00:34:53,005 --> 00:34:54,456
anything in UI kit or app kit,


769
00:34:54,926 --> 00:34:56,886
make sure you don't make an
assumption about which thread


770
00:34:56,886 --> 00:35:00,006
that message comes in on and
dispatch it to main if you have


771
00:35:00,096 --> 00:35:02,246
to to work safely with
App Kit and UI kit.


772
00:35:02,246 --> 00:35:06,386
Okay, let's go back
to the slides.


773
00:35:06,386 --> 00:35:14,056
Let's move on to the
post sales experience.


774
00:35:14,956 --> 00:35:17,216
So we showed a beautiful
UI to the user,


775
00:35:17,656 --> 00:35:18,716
we enticed them to buy.


776
00:35:19,296 --> 00:35:21,296
The buy process was
smooth and seamless.


777
00:35:21,936 --> 00:35:24,886
Now you've got to make good
on what they've paid for.


778
00:35:26,376 --> 00:35:29,756
In particular you need to
process the transaction


779
00:35:30,286 --> 00:35:31,206
through the payment queue.


780
00:35:32,246 --> 00:35:34,916
Then you need to make that asset
or content or feature available


781
00:35:34,916 --> 00:35:36,556
and this may mean
downloading content.


782
00:35:37,276 --> 00:35:39,686
And then of course
finish the transaction.


783
00:35:40,666 --> 00:35:43,476
Now in the post-sale experience
there's three key things you're


784
00:35:43,476 --> 00:35:44,356
going to want to do.


785
00:35:45,136 --> 00:35:48,776
The first is validate the
purchase, verify the receipt


786
00:35:48,776 --> 00:35:51,756
from that transaction and
you can verify that on device


787
00:35:51,826 --> 00:35:53,616
or on a server to server
level if you're handing


788
00:35:53,616 --> 00:35:54,816
out content from servers.


789
00:35:55,466 --> 00:35:57,036
And that is your way to confirm


790
00:35:57,036 --> 00:36:00,646
that it was a real monetary
transaction that is authentic


791
00:36:00,646 --> 00:36:03,476
and trusted and occurred with
the production App store.


792
00:36:04,416 --> 00:36:06,776
Again, 10:15 Friday come along


793
00:36:06,776 --> 00:36:09,206
and let me tell you
all about that.


794
00:36:10,046 --> 00:36:13,476
The next thing you want to do
is give them what they paid for.


795
00:36:13,476 --> 00:36:14,646
And especially if you have


796
00:36:14,706 --> 00:36:16,566
to download content
for that feature.


797
00:36:17,016 --> 00:36:19,056
Obviously as apps
become more and more rich


798
00:36:19,056 --> 00:36:21,546
in the features they
offer, it often makes sense


799
00:36:21,636 --> 00:36:25,196
to have a smaller binary
for the actual app itself


800
00:36:25,266 --> 00:36:27,106
and then download extra content


801
00:36:27,106 --> 00:36:28,616
as those In-App Purchases
are made.


802
00:36:29,296 --> 00:36:32,226
You can host that with us, or
you could have it self-hosted.


803
00:36:32,626 --> 00:36:35,416
And then lastly,
depending on the type


804
00:36:35,416 --> 00:36:38,036
of transaction there may
be a need to persist state


805
00:36:38,226 --> 00:36:40,936
about the transaction
having occurred or be able


806
00:36:40,936 --> 00:36:42,886
to handle the situation
where the user needs


807
00:36:42,886 --> 00:36:45,066
to restore the previous
transactions


808
00:36:45,066 --> 00:36:45,996
that they have made.


809
00:36:47,956 --> 00:36:49,616
So a quick word on
receipt validation.


810
00:36:50,686 --> 00:36:52,806
When you do the on-device
validation of the receipt,


811
00:36:52,806 --> 00:36:55,106
that is confirming that there
was a real monetary transaction


812
00:36:55,106 --> 00:36:57,626
with the store, you can then
go and unlock those features


813
00:36:57,626 --> 00:36:59,376
and content within
the app itself.


814
00:37:00,726 --> 00:37:03,746
But increasingly, like I said we
see developers hosting content


815
00:37:03,746 --> 00:37:06,366
either with us or on their
own server infrastructure


816
00:37:06,746 --> 00:37:09,466
that is downloaded when
the purchase takes place.


817
00:37:10,176 --> 00:37:13,696
If you have your own servers
that are issuing that content


818
00:37:13,926 --> 00:37:15,936
out to your users based
on In-App Purchases,


819
00:37:16,526 --> 00:37:19,086
of course you want to make sure
that those servers only hand


820
00:37:19,086 --> 00:37:22,416
that content out to
real paying customers.


821
00:37:23,526 --> 00:37:26,076
And in fact you can to
server to server validation


822
00:37:26,076 --> 00:37:29,026
of receipts using Apple's
online validation service.


823
00:37:29,556 --> 00:37:32,686
And that will allow you to
restrict that access and be sure


824
00:37:32,686 --> 00:37:34,586
that you only hand out
those valuable assets


825
00:37:35,356 --> 00:37:36,186
to people who have paid.


826
00:37:37,426 --> 00:37:41,666
But what you definitely don't
want to do is try and use


827
00:37:41,666 --> 00:37:44,776
that online validation service
directly from the device.


828
00:37:45,326 --> 00:37:46,786
Now there was a time
a little while ago


829
00:37:46,786 --> 00:37:48,936
when that was kind
of okay to do.


830
00:37:50,166 --> 00:37:53,636
But when we introduced iOS 7
we introduced the grand unified


831
00:37:53,636 --> 00:37:54,486
receipt format.


832
00:37:55,266 --> 00:37:58,796
That unified the receipt format
that we use on iOS and OS X.


833
00:37:58,796 --> 00:38:02,186
And it empowered you as the
developer to be able to validate


834
00:38:02,186 --> 00:38:04,016
that receipt on the
device itself.


835
00:38:04,806 --> 00:38:07,176
That way there was no need
for your app to be calling


836
00:38:07,176 --> 00:38:08,866
out to Apple's validation
service


837
00:38:09,716 --> 00:38:11,706
to get back the information
about that receipt


838
00:38:11,706 --> 00:38:12,606
to know if it was valid.


839
00:38:13,986 --> 00:38:15,486
So you should no longer be using


840
00:38:15,666 --> 00:38:18,046
that validation service
directly from your device.


841
00:38:19,536 --> 00:38:21,346
It's okay to do it
from your service


842
00:38:21,736 --> 00:38:22,966
to the validation service.


843
00:38:23,326 --> 00:38:25,436
But as far as your app
running on a device,


844
00:38:25,886 --> 00:38:27,806
it should either validate
the receipt locally,


845
00:38:28,216 --> 00:38:30,746
or pass that receipt up
to your service first,


846
00:38:30,856 --> 00:38:34,496
then your service can talk to
the Apple validation service


847
00:38:34,756 --> 00:38:35,976
to know if the receipt is valid.


848
00:38:37,206 --> 00:38:41,176
And those iOS 6 APIs they
are in fact deprecated now,


849
00:38:41,596 --> 00:38:45,986
so you really need to
move away from those.


850
00:38:47,416 --> 00:38:49,866
Downloading content,
especially in terms


851
00:38:49,866 --> 00:38:52,546
of ensuring a very
hassle-free, smooth,


852
00:38:53,026 --> 00:38:55,516
and great In-App Purchase
experience every time,


853
00:38:55,906 --> 00:38:58,806
downloading content is a really
important area to focus on.


854
00:38:59,486 --> 00:39:01,346
At this point in time
the user has paid


855
00:39:01,346 --> 00:39:03,316
for what you're offering right?


856
00:39:03,396 --> 00:39:05,236
They've done their side of
the bargain they've paid you.


857
00:39:06,056 --> 00:39:08,816
Now it's up to you to deliver
what they've paid for as quickly


858
00:39:08,816 --> 00:39:11,416
and reliably as possible
every single time.


859
00:39:12,386 --> 00:39:14,536
One of the great ways
you can do that is


860
00:39:14,536 --> 00:39:16,776
by using Apple's hosted
In-App Purchase feature.


861
00:39:17,436 --> 00:39:20,096
That allows you to host In-App
Purchase content with us,


862
00:39:20,426 --> 00:39:21,786
it's hosted on our servers,


863
00:39:21,786 --> 00:39:24,036
which are very scalable,
very reliable.


864
00:39:25,486 --> 00:39:28,006
We can download that content
for you in the background,


865
00:39:28,006 --> 00:39:29,266
even when your apps not running.


866
00:39:29,496 --> 00:39:31,636
So once that purchase is
made, the user can switch


867
00:39:31,636 --> 00:39:34,056
around to doing lots of
other things and then


868
00:39:34,056 --> 00:39:35,686
when they get back to your app,


869
00:39:35,686 --> 00:39:36,936
the content's there
and waiting for them.


870
00:39:36,936 --> 00:39:38,096
Great experience for them.


871
00:39:38,636 --> 00:39:42,276
And you can have up to 2 GB
per In-App purchasable product.


872
00:39:42,636 --> 00:39:44,696
That's not 2 gig total per app.


873
00:39:44,926 --> 00:39:46,906
That's 2 gig per
item you are selling


874
00:39:46,906 --> 00:39:47,926
through In-App Purchases.


875
00:39:48,146 --> 00:39:52,716
Now if you're using the hosted
content it's so simple to use.


876
00:39:53,956 --> 00:39:55,936
We're back now in our
payment queue updated


877
00:39:55,936 --> 00:39:56,946
transaction method.


878
00:39:57,336 --> 00:39:59,886
Looping over our transactions
we're receiving updates for.


879
00:40:00,646 --> 00:40:03,446
If you see a transaction
with a downloads property


880
00:40:03,446 --> 00:40:05,886
and that download property
contains one or more download


881
00:40:06,496 --> 00:40:07,696
and you want to start
downloading


882
00:40:07,696 --> 00:40:10,926
that content, watch
this, simple.


883
00:40:11,886 --> 00:40:14,276
You simply call SKPaymentQueue
start download


884
00:40:14,276 --> 00:40:16,176
and hand those downloads
over to us.


885
00:40:16,666 --> 00:40:18,826
StoreKit in the background
process then takes care


886
00:40:18,826 --> 00:40:21,806
of downloading that content and
gets it to the user as quickly


887
00:40:21,806 --> 00:40:23,016
and seamlessly as possible.


888
00:40:24,086 --> 00:40:26,296
When a download progresses,


889
00:40:26,676 --> 00:40:30,066
you'll also receive updates
via the SKPaymentQueue Observer


890
00:40:30,066 --> 00:40:32,676
Method, payment queue
updated downloads.


891
00:40:32,776 --> 00:40:35,026
This will tell you things like
progress and time remaining,


892
00:40:35,346 --> 00:40:36,536
as well as state and error.


893
00:40:37,296 --> 00:40:40,696
And when it's finished,
you will get a content URL


894
00:40:40,696 --> 00:40:44,846
where you can locate where that
content has been downloaded to.


895
00:40:45,466 --> 00:40:47,666
Now of course there may be many
reason why you want to host


896
00:40:47,666 --> 00:40:49,856
that In-App Purchase content
yourself and that's okay,


897
00:40:50,676 --> 00:40:52,936
but make sure you use the
background download APIs


898
00:40:52,936 --> 00:40:55,606
to download that for
all the same reasons.


899
00:40:56,486 --> 00:41:00,406
If you're using the standard
old NS URL connection


900
00:41:00,746 --> 00:41:02,496
to download this
content, there's going


901
00:41:02,496 --> 00:41:06,326
to be some serious limitations
that you run into particularly


902
00:41:06,326 --> 00:41:08,486
around the fact that you can't
guarantee the download will


903
00:41:08,486 --> 00:41:10,906
start straight away depending
on the network conditions,


904
00:41:11,796 --> 00:41:13,826
and the user would
have to sit there


905
00:41:13,826 --> 00:41:16,556
in your app while
the download happens


906
00:41:16,556 --> 00:41:17,846
to guarantee it completes.


907
00:41:18,496 --> 00:41:19,206
That's not good.


908
00:41:19,606 --> 00:41:23,926
But what you can do is
you can us NS URL session


909
00:41:24,276 --> 00:41:26,226
to do the background
download for you.


910
00:41:27,026 --> 00:41:28,706
There's lots of great
documentation available


911
00:41:28,706 --> 00:41:30,256
for this online, but
here's a quick run


912
00:41:30,256 --> 00:41:31,216
through of how this works.


913
00:41:31,706 --> 00:41:34,506
You create your NS URL
session configuration


914
00:41:34,506 --> 00:41:37,326
by giving it a name, I've called
here my background download --


915
00:41:37,406 --> 00:41:38,326
my background session.


916
00:41:38,886 --> 00:41:41,326
And then when we've got
our session configured,


917
00:41:41,326 --> 00:41:43,486
we create the session itself
and we give it a delegate


918
00:41:43,546 --> 00:41:46,316
to get updates about how the
download's going and a queue


919
00:41:46,316 --> 00:41:47,856
on which to receive
those updates.


920
00:41:48,116 --> 00:41:49,066
That's a dispatch queue.


921
00:41:50,736 --> 00:41:52,246
This will be familiar
with anyone that's worked


922
00:41:52,246 --> 00:41:53,736
with NS URL connection before.


923
00:41:54,136 --> 00:41:57,206
You create an NS URL request, in
this case I've just created it


924
00:41:57,206 --> 00:41:58,846
with the URL that
I want to download.


925
00:42:00,776 --> 00:42:04,396
Then simple as this, I create
the download task using


926
00:42:04,396 --> 00:42:06,396
that request and the
download session.


927
00:42:07,056 --> 00:42:07,846
You see what we did there?


928
00:42:08,166 --> 00:42:09,886
We setup a session to
go and download this


929
00:42:09,886 --> 00:42:10,836
for us in the background.


930
00:42:11,356 --> 00:42:13,826
We told it what we wanted to
go and get and then we went


931
00:42:13,826 --> 00:42:15,166
and created the download task.


932
00:42:15,306 --> 00:42:18,556
And now the OS is taking care of
that for us in the background.


933
00:42:19,376 --> 00:42:22,116
You will get updates
via the delegate method


934
00:42:22,466 --> 00:42:23,846
as to how the download
is progressing


935
00:42:23,846 --> 00:42:25,256
so you can update your UI.


936
00:42:26,276 --> 00:42:28,326
But because these can continue


937
00:42:28,326 --> 00:42:30,116
to happen while your
app's not running,


938
00:42:30,786 --> 00:42:33,566
when your app launches you need
to reconnect to any sessions


939
00:42:33,566 --> 00:42:34,866
that might be in progress


940
00:42:35,136 --> 00:42:37,066
or might have finished while
your app wasn't running.


941
00:42:37,566 --> 00:42:39,026
And this is how you do that.


942
00:42:39,496 --> 00:42:42,276
In your application delegate
you should implement application


943
00:42:42,276 --> 00:42:44,316
handle events for
background URL session.


944
00:42:44,316 --> 00:42:47,396
That will get called on
launch so you can re-establish


945
00:42:47,396 --> 00:42:49,866
that session configuration,
get the session itself,


946
00:42:50,206 --> 00:42:51,276
set your delegate again,


947
00:42:51,606 --> 00:42:53,526
and then get those
same progress updates


948
00:42:53,526 --> 00:42:54,886
about how the download is going.


949
00:42:56,296 --> 00:42:59,056
But no matter how you
download the content,


950
00:42:59,686 --> 00:43:01,386
whether you download
it yourself,


951
00:43:01,566 --> 00:43:04,286
whether you download it
via host In-App Purchases,


952
00:43:05,096 --> 00:43:07,476
you must always call
finishTransaction of course,


953
00:43:07,916 --> 00:43:11,496
but you must do that once you've
completely downloaded the asset


954
00:43:11,836 --> 00:43:13,406
and made it available
to the user.


955
00:43:15,106 --> 00:43:16,616
One thing that can
go horribly wrong


956
00:43:16,616 --> 00:43:18,606
from the user's perspective is


957
00:43:18,606 --> 00:43:20,656
if you call finishTransaction
earlier,


958
00:43:21,826 --> 00:43:23,146
before the download is done,


959
00:43:23,226 --> 00:43:25,316
and then something happens
during the download,


960
00:43:25,876 --> 00:43:27,706
they may have no
way to get back,


961
00:43:28,256 --> 00:43:30,356
or get to that purchase
they've just made.


962
00:43:31,316 --> 00:43:33,646
So you call the
finishTransaction once the


963
00:43:33,646 --> 00:43:35,706
content's downloaded and
you've made it available.


964
00:43:36,066 --> 00:43:37,896
That way only then does
it go out of the queue


965
00:43:37,996 --> 00:43:40,036
and only then will you not
receive further updates


966
00:43:40,036 --> 00:43:41,846
about it.


967
00:43:43,016 --> 00:43:45,476
Now restoring transactions,
this is something you have


968
00:43:45,476 --> 00:43:46,676
to offer -- excuse me.


969
00:43:46,676 --> 00:43:48,576
This is something
you have to offer


970
00:43:49,256 --> 00:43:51,946
if you are selling
non-consumable items


971
00:43:51,946 --> 00:43:53,376
or order renewal subscriptions.


972
00:43:54,336 --> 00:43:57,326
Now, non-consumable items,
they're things like game levels


973
00:43:57,326 --> 00:44:01,276
of maps, or run off purchases
that are designed to be used


974
00:44:01,276 --> 00:44:02,616
across multiple devices.


975
00:44:03,926 --> 00:44:06,876
Order renewal subscriptions,
they're like your periodicals


976
00:44:07,216 --> 00:44:09,366
where you are setting up
a subscription payment


977
00:44:09,366 --> 00:44:11,256
for ongoing delivery
of new content.


978
00:44:11,426 --> 00:44:13,536
If you're offering
either of those,


979
00:44:14,306 --> 00:44:16,356
you have to make sure
you can offer the ability


980
00:44:16,596 --> 00:44:18,536
to restore previous
transactions.


981
00:44:18,536 --> 00:44:19,426
That is allow the user


982
00:44:19,426 --> 00:44:21,556
to get back what they've
bought before through your app.


983
00:44:22,146 --> 00:44:25,296
Especially if they buy a
new device or otherwise need


984
00:44:25,296 --> 00:44:27,076
to get back what
they've already paid for.


985
00:44:27,996 --> 00:44:31,196
But if you're offering
consumables


986
00:44:31,196 --> 00:44:32,546
and non-renewing subscriptions,


987
00:44:32,546 --> 00:44:34,566
so a consumable might
be something like gas


988
00:44:34,566 --> 00:44:38,126
in a racecar track, gems,
or coins, or currency,


989
00:44:38,126 --> 00:44:40,726
generally an item that's
purchased, then used up,


990
00:44:40,726 --> 00:44:43,436
and ideally purchased
again, and again, and again.


991
00:44:43,816 --> 00:44:47,006
If you're offering
those sorts of items


992
00:44:47,006 --> 00:44:50,716
through In-App Purchase, then
it's up to you, the developer,


993
00:44:50,716 --> 00:44:51,886
to persist that state.


994
00:44:52,446 --> 00:44:53,756
You can't restore those.


995
00:44:54,666 --> 00:44:56,356
Now this comes back to what
I was just saying before


996
00:44:56,356 --> 00:44:58,266
about making sure you
call finishTransaction


997
00:44:58,266 --> 00:44:59,346
at the right point in time.


998
00:45:00,086 --> 00:45:02,156
Because you get one
shot at a consumable


999
00:45:02,156 --> 00:45:03,516
and non-renewing subscription.


1000
00:45:04,386 --> 00:45:06,736
You have to make sure your
app handles the transaction


1001
00:45:06,736 --> 00:45:08,956
properly, makes it
available to the user,


1002
00:45:09,396 --> 00:45:11,656
and only then calls
finishTransaction,


1003
00:45:11,656 --> 00:45:12,936
because you can't restore those.


1004
00:45:12,936 --> 00:45:15,936
But for the content
types you can restore,


1005
00:45:16,456 --> 00:45:18,476
you call SKPaymentQueue
default queue


1006
00:45:18,746 --> 00:45:20,456
restoreCompletedTransactions.


1007
00:45:21,376 --> 00:45:23,506
Now what happens
here, is of course,


1008
00:45:23,656 --> 00:45:24,826
you need to observe the queue


1009
00:45:25,696 --> 00:45:28,156
because you will receive these
delegate callback methods


1010
00:45:28,376 --> 00:45:30,246
such as
restorCompletedTransaction


1011
00:45:30,246 --> 00:45:32,216
FailedWithError if
things don't go well,


1012
00:45:33,126 --> 00:45:36,026
or paymentQueueRestoreCompleted
TransactionFinished.


1013
00:45:36,916 --> 00:45:38,996
At that point you can go
and inspect the receipt


1014
00:45:38,996 --> 00:45:42,666
to know what purchases were
restored, unlock those features


1015
00:45:42,666 --> 00:45:49,446
and content; but, note that this
requires a network connection


1016
00:45:49,536 --> 00:45:53,316
and the user will be prompted to
sign into the store if we have


1017
00:45:53,316 --> 00:45:56,466
to verify their identity so that
we know exactly what they've


1018
00:45:56,466 --> 00:45:59,896
paid for to get you that list
of restored transactions.


1019
00:46:02,076 --> 00:46:06,026
Now just because your app has
to offer restore transactions,


1020
00:46:06,206 --> 00:46:08,666
it doesn't mean you should
call it all the time.


1021
00:46:09,486 --> 00:46:10,916
Because it requires
a network connection


1022
00:46:10,916 --> 00:46:13,746
and because it will
require the user to sign in,


1023
00:46:14,306 --> 00:46:17,436
it should be something you do
only when the user asks you to.


1024
00:46:18,266 --> 00:46:20,346
I know a lot of developers
think it would make sense


1025
00:46:20,346 --> 00:46:22,496
to just call restore
transactions every time the app


1026
00:46:22,496 --> 00:46:25,056
launches, because
don't they always want


1027
00:46:25,056 --> 00:46:26,196
to get back what
they've paid for?


1028
00:46:27,326 --> 00:46:31,076
Yes, but when they have
to sign in to do that,


1029
00:46:31,406 --> 00:46:34,126
it becomes too much of a
heavy-weight process on launch.


1030
00:46:34,736 --> 00:46:37,126
So let the app launch and
offer a graceful way for them


1031
00:46:37,126 --> 00:46:39,896
to restore transactions if
you have to do that based


1032
00:46:39,896 --> 00:46:41,296
on the content types
you're selling.


1033
00:46:43,656 --> 00:46:45,456
So let's wrap this
up with a summary.


1034
00:46:46,686 --> 00:46:49,656
This is my recipe for
trouble-free In-App Purchases.


1035
00:46:51,976 --> 00:46:56,276
So, when you are loading up
your In-App Purchase product


1036
00:46:56,276 --> 00:46:59,246
identifiers, the list of product
identifiers that you're going


1037
00:46:59,246 --> 00:47:03,096
to sell or offer to the
user, be very careful


1038
00:47:03,096 --> 00:47:05,836
about how you choose to host
them and where you host them


1039
00:47:05,836 --> 00:47:07,846
if you're not going to bake
them into your app yourself.


1040
00:47:08,546 --> 00:47:11,086
Because if that first experience
is a spinner while you wait


1041
00:47:11,086 --> 00:47:13,306
for that to load, or
even worse an error


1042
00:47:13,306 --> 00:47:14,706
because the server
can't be reached,


1043
00:47:15,246 --> 00:47:17,876
that totally derails
your sales experience.


1044
00:47:18,896 --> 00:47:21,436
Cache it appropriately if
you can and avoid delay


1045
00:47:21,436 --> 00:47:24,136
in presenting these products
by fetching just ahead of time


1046
00:47:24,136 --> 00:47:25,116
if you can anticipate.


1047
00:47:25,546 --> 00:47:28,766
A great example of this is if
you've got a racing car game


1048
00:47:28,766 --> 00:47:32,096
for example, there's probably
just a lot of conditions


1049
00:47:32,096 --> 00:47:34,226
that you can anticipate
around when you're going


1050
00:47:34,226 --> 00:47:35,356
to offer In-App Purchases.


1051
00:47:35,356 --> 00:47:37,196
Let's say I'm going to
offer an In-App Purchase


1052
00:47:37,756 --> 00:47:39,466
that allows the user
to go faster


1053
00:47:39,466 --> 00:47:40,856
around the track
next time around,


1054
00:47:41,146 --> 00:47:42,546
or somehow upgrades their car.


1055
00:47:42,546 --> 00:47:44,456
When are we going to offer that?


1056
00:47:44,886 --> 00:47:47,186
Well probably when they come
in dead last in the race,


1057
00:47:47,266 --> 00:47:48,386
when they finish last.


1058
00:47:49,086 --> 00:47:52,146
So those sorts of things we
could anticipate in code right?


1059
00:47:52,786 --> 00:47:55,486
If we know they are about
to cross the finish line


1060
00:47:55,486 --> 00:47:57,336
and we know that they're
in a bad position,


1061
00:47:58,396 --> 00:48:00,986
just ahead of time go and
grab that product information


1062
00:48:02,006 --> 00:48:03,446
and make sure you've
got it on hand


1063
00:48:03,656 --> 00:48:06,266
for when they cross the
finish line in last place


1064
00:48:06,266 --> 00:48:09,056
and then you can offer them a
great way to beat their friends


1065
00:48:09,056 --> 00:48:10,776
and finish in first
place next time around.


1066
00:48:12,676 --> 00:48:14,856
Likewise, the same applies
when you go and fetch


1067
00:48:14,856 --> 00:48:15,956
that product information,


1068
00:48:15,956 --> 00:48:18,156
the localized product
information from the App Store.


1069
00:48:18,566 --> 00:48:21,196
Fetch only the products
you need.


1070
00:48:22,356 --> 00:48:24,996
Sure a lot of you have got 10s,
and 10s, maybe even hundreds


1071
00:48:24,996 --> 00:48:27,176
of In-App Purchase
identifiers in your app,


1072
00:48:28,496 --> 00:48:32,336
but you're probably only going
to offer 3, 4, 5, maybe 6 items


1073
00:48:32,336 --> 00:48:33,876
to the user at any
one point in time.


1074
00:48:34,526 --> 00:48:36,886
And because this involves a
round trip to the App Store


1075
00:48:36,886 --> 00:48:40,166
and network, you only want to
fetch just the products you need


1076
00:48:40,166 --> 00:48:41,996
so that this happens
as quickly as possible.


1077
00:48:42,946 --> 00:48:45,426
So fetch it just ahead of time,
just like we said before try


1078
00:48:45,426 --> 00:48:47,286
and anticipate when you're
going to display this,


1079
00:48:47,636 --> 00:48:49,996
fetch just ahead of time
to avoid any delay there.


1080
00:48:50,306 --> 00:48:52,956
It just makes for such a smooth
In-App Purchase experience


1081
00:48:53,416 --> 00:48:55,896
if the user can go directly
from the point in time


1082
00:48:55,896 --> 00:48:58,506
when they may be enticed to buy
something to being able to tap


1083
00:48:58,576 --> 00:48:59,756
that Buy button straightaway.


1084
00:49:01,066 --> 00:49:05,016
Now when you show your beautiful
In-App Purchase UI and I've got


1085
00:49:05,016 --> 00:49:07,386
to mention earlier today there
was a really great session


1086
00:49:07,386 --> 00:49:09,676
called Designing a Great
In-App Purchase experience.


1087
00:49:09,676 --> 00:49:11,416
You should really check
out the video of that.


1088
00:49:11,416 --> 00:49:14,656
Because it goes far more in
depth about design techniques


1089
00:49:14,656 --> 00:49:17,166
about how to provide a great
In-App Purchase experience.


1090
00:49:17,756 --> 00:49:20,366
But from a code level, make sure


1091
00:49:20,366 --> 00:49:22,746
that you ensure proper
localization.


1092
00:49:23,716 --> 00:49:25,736
We deal with a global
marketplace.


1093
00:49:26,106 --> 00:49:28,116
And just because we're
familiar with a particular way


1094
00:49:28,116 --> 00:49:29,386
of representing currency


1095
00:49:29,716 --> 00:49:32,866
or a particular display style
doesn't mean everyone else will


1096
00:49:32,866 --> 00:49:35,926
like that, let alone want to buy
your app if you get it wrong.


1097
00:49:36,686 --> 00:49:39,386
So take care to ensure
great localization.


1098
00:49:39,676 --> 00:49:42,086
It makes users feel comfortable
and it makes them feel happy


1099
00:49:42,256 --> 00:49:44,776
that the customs they're
familiar with are being enticed


1100
00:49:44,776 --> 00:49:45,916
and enjoyed by your app.


1101
00:49:47,406 --> 00:49:48,786
Do not convert the
currencies though.


1102
00:49:49,466 --> 00:49:53,356
Everything you get back in the
SKProduct object will be correct


1103
00:49:53,356 --> 00:49:55,306
for the store that the
user is signed into.


1104
00:49:55,836 --> 00:50:01,316
And when they make the
purchase, that is you take


1105
00:50:01,316 --> 00:50:03,646
that SKProduct object,
make and SKPayment throw it


1106
00:50:03,646 --> 00:50:06,636
in the payment queue, once
you've added it to the queue,


1107
00:50:06,726 --> 00:50:07,976
step back, and be hands-off.


1108
00:50:08,516 --> 00:50:09,796
There's no step three, remember?


1109
00:50:10,096 --> 00:50:12,696
Create the payment, add it
to the queue, that's it.


1110
00:50:12,696 --> 00:50:16,046
Let the payment queue then
drive the further updates.


1111
00:50:16,316 --> 00:50:19,336
And then process those updates.


1112
00:50:20,246 --> 00:50:21,776
Make sure you verify the receipt


1113
00:50:21,776 --> 00:50:23,696
to make sure it's a real
monetary transaction


1114
00:50:23,696 --> 00:50:24,666
that happened with the App Store


1115
00:50:24,666 --> 00:50:25,956
and that nothing
funny's going on.


1116
00:50:26,476 --> 00:50:28,226
Unlock those features
and content as soon


1117
00:50:28,226 --> 00:50:30,436
as you possibly can
for a great experience.


1118
00:50:31,126 --> 00:50:34,376
And avoid deprecated APIs and
unsafe receipt verification


1119
00:50:34,566 --> 00:50:35,516
that could leave you opened


1120
00:50:35,516 --> 00:50:37,426
to unauthorized transactions
occurring.


1121
00:50:38,306 --> 00:50:40,506
If you've got to
download content


1122
00:50:40,506 --> 00:50:43,626
to make a feature available,
get that asset as reliably


1123
00:50:43,626 --> 00:50:44,746
and quickly as possible.


1124
00:50:44,946 --> 00:50:46,456
Use our In-App Purchases
if you can.


1125
00:50:46,926 --> 00:50:49,106
If not, if you're going
to download it yourself,


1126
00:50:49,586 --> 00:50:52,886
make sure you use those
background download APIs.


1127
00:50:54,546 --> 00:50:58,776
And lastly make sure you
finish the transaction.


1128
00:50:59,976 --> 00:51:03,476
If you need more
information, there is --


1129
00:51:03,476 --> 00:51:05,856
we an evangelist mailing list
setup that you're welcome


1130
00:51:05,856 --> 00:51:08,386
to email to get help from our
wonderful evangelist team.


1131
00:51:09,136 --> 00:51:11,276
There is also the In-App
Purchase programming guide


1132
00:51:11,276 --> 00:51:13,966
available online and also the
StoreKit framework reference.


1133
00:51:14,496 --> 00:51:16,986
And there's the Apple developer
forums that are great resources


1134
00:51:16,986 --> 00:51:18,256
as well for discussion and help.


1135
00:51:19,116 --> 00:51:21,416
There are some related
session that I mentioned,


1136
00:51:21,846 --> 00:51:23,286
Preventing Unauthorized
Purchases


1137
00:51:23,286 --> 00:51:25,236
with Receipt that's me
again on Friday morning


1138
00:51:25,416 --> 00:51:26,486
up in Pacific Heights.


1139
00:51:27,306 --> 00:51:29,446
That's where we'll take you
through how to make sure


1140
00:51:29,446 --> 00:51:30,706
that your revenue is protected


1141
00:51:30,996 --> 00:51:32,656
and your business
model is enforced


1142
00:51:32,656 --> 00:51:34,216
in your app and your service.


1143
00:51:34,446 --> 00:51:36,316
If you care about your
revenue come along


1144
00:51:36,316 --> 00:51:38,986
and let's talk about it.


1145
00:51:39,066 --> 00:51:41,026
Also, designing a great
In-App Purchase experience.


1146
00:51:41,026 --> 00:51:43,536
Rachel did an amazing
job this morning in here,


1147
00:51:43,666 --> 00:51:44,776
telling developers how


1148
00:51:44,776 --> 00:51:47,316
to structure their
In-App Purchase UI


1149
00:51:47,396 --> 00:51:49,086
to deliver a great
experience every time.


1150
00:51:49,336 --> 00:51:50,826
The video should be
available shortly.


1151
00:51:51,436 --> 00:51:54,176
And lastly, Chris Espinosa's
session tomorrow, or Thursday.


1152
00:51:54,556 --> 00:51:57,806
He's really good if your app in
particular is targeted at kids.


1153
00:51:58,246 --> 00:51:59,416
Thank you very much.


1154
00:52:00,516 --> 00:52:07,550
[ Applause ]

