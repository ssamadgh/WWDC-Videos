1
00:00:07,516 --> 00:00:16,500
[ Cheering ]


2
00:00:22,516 --> 00:00:27,486
[ Applause ]


3
00:00:27,986 --> 00:00:29,326
>> Welcome to Making Great


4
00:00:29,326 --> 00:00:30,356
SiriKit Experiences.


5
00:00:31,456 --> 00:00:33,456
My name is Jose Angel Castillo


6
00:00:33,456 --> 00:00:35,336
Sanchez and with my coworker


7
00:00:35,336 --> 00:00:36,126
Rohit [assumed spelling], we


8
00:00:36,126 --> 00:00:37,886
want to tell you all about it.


9
00:00:38,996 --> 00:00:40,936
It has been a year since we


10
00:00:40,936 --> 00:00:41,766
announced SiriKit.


11
00:00:42,266 --> 00:00:44,356
Since then, many applications


12
00:00:44,356 --> 00:00:45,166
have [inaudible].


13
00:00:45,816 --> 00:00:48,556
We have heard your feedback, the


14
00:00:48,556 --> 00:00:49,536
developers feedback.


15
00:00:50,216 --> 00:00:52,066
With that, we have put together


16
00:00:52,166 --> 00:00:53,986
four major areas that we want to


17
00:00:53,986 --> 00:00:54,896
focus on today.


18
00:00:56,256 --> 00:00:57,866
First, we want to talk about


19
00:00:57,866 --> 00:00:58,816
contact resolution.


20
00:00:59,236 --> 00:01:01,396
If your application is a


21
00:01:01,396 --> 00:01:03,646
messaging, call, or a payments


22
00:01:03,646 --> 00:01:05,416
application, you probably have


23
00:01:05,416 --> 00:01:06,546
dealed [phonetic] with it.


24
00:01:07,126 --> 00:01:08,946
After that, we're going to talk


25
00:01:08,946 --> 00:01:09,906
about security.


26
00:01:11,096 --> 00:01:13,496
If your application requires an


27
00:01:13,496 --> 00:01:15,086
authorization to finalize a


28
00:01:15,086 --> 00:01:16,926
transaction, we'll tell you how


29
00:01:16,926 --> 00:01:18,976
to achieve that in simple steps.


30
00:01:21,956 --> 00:01:23,506
Next, we're going to cover


31
00:01:23,666 --> 00:01:24,756
custom vocabulary.


32
00:01:25,916 --> 00:01:28,276
Siri understands many words in


33
00:01:28,276 --> 00:01:30,146
many languages, but there might


34
00:01:30,146 --> 00:01:31,516
be some specific words to your


35
00:01:31,516 --> 00:01:33,256
application you might want to


36
00:01:33,256 --> 00:01:34,256
tell Siri about.


37
00:01:34,766 --> 00:01:38,116
Last but not least, we're going


38
00:01:38,116 --> 00:01:39,116
to cover UI testing.


39
00:01:39,756 --> 00:01:41,286
Since the last year, we have


40
00:01:41,286 --> 00:01:42,886
made great improvement of how to


41
00:01:42,886 --> 00:01:44,286
automate Siri testing.


42
00:01:47,156 --> 00:01:48,816
Let's get started with contact


43
00:01:48,816 --> 00:01:49,446
resolution.


44
00:01:50,416 --> 00:01:52,126
For this, I want to use a


45
00:01:52,126 --> 00:01:53,516
messaging example.


46
00:01:53,726 --> 00:01:54,846
A messaging application.


47
00:01:55,286 --> 00:01:56,366
You may be familiar with it.


48
00:01:57,566 --> 00:01:58,376
UnicornChat.


49
00:01:58,706 --> 00:02:01,556
For this, we're going to walk


50
00:02:01,556 --> 00:02:02,876
through the process of sending a


51
00:02:02,876 --> 00:02:03,356
message.


52
00:02:04,316 --> 00:02:05,906
Text hello to John on


53
00:02:05,906 --> 00:02:06,556
UnicornChat.


54
00:02:07,376 --> 00:02:09,645
We clearly see that John is who


55
00:02:09,686 --> 00:02:12,176
we want to message to.


56
00:02:12,406 --> 00:02:14,926
In this case, on my address book


57
00:02:14,926 --> 00:02:16,476
I have multiple Johns.


58
00:02:16,956 --> 00:02:18,966
I have John Appleseed and John


59
00:02:18,966 --> 00:02:19,286
Baily.


60
00:02:19,736 --> 00:02:22,646
From the user intent, it's not


61
00:02:22,646 --> 00:02:23,946
yet clear which of these John I


62
00:02:23,946 --> 00:02:26,926
want to message to.


63
00:02:27,176 --> 00:02:30,226
In iOS 10.3, we introduced a new


64
00:02:30,226 --> 00:02:32,976
property in the INPerson object.


65
00:02:33,596 --> 00:02:34,366
SiriMatches.


66
00:02:35,736 --> 00:02:37,336
SiriMatches is what Siri


67
00:02:37,336 --> 00:02:38,046
understands.


68
00:02:38,276 --> 00:02:39,716
In this case, the multiple


69
00:02:39,716 --> 00:02:40,136
Johns.


70
00:02:40,436 --> 00:02:42,356
It can also be homophones to


71
00:02:42,356 --> 00:02:42,706
John.


72
00:02:43,546 --> 00:02:44,626
You will get an array of


73
00:02:44,736 --> 00:02:46,306
INPerson objects representing


74
00:02:46,486 --> 00:02:47,876
all the possibilities that Siri


75
00:02:47,876 --> 00:02:48,456
understood.


76
00:02:48,946 --> 00:02:51,776
Let's walk through the flow of


77
00:02:51,896 --> 00:02:53,466
text hello to John on


78
00:02:53,466 --> 00:02:56,096
UnicornChat and see how we can


79
00:02:56,386 --> 00:02:57,646
take advantage of these


80
00:02:58,376 --> 00:03:00,136
siriMatches to resolve our


81
00:03:00,136 --> 00:03:01,306
contact.


82
00:03:02,616 --> 00:03:04,746
Text John hello on UnicornChat.


83
00:03:05,476 --> 00:03:07,886
Siri clearly understands that


84
00:03:07,886 --> 00:03:08,966
you want to text John.


85
00:03:09,426 --> 00:03:13,266
After that, Siri is going to


86
00:03:13,266 --> 00:03:15,786
contact your app extension or


87
00:03:15,786 --> 00:03:17,336
your intent parameter


88
00:03:17,336 --> 00:03:18,336
resolveRecipients.


89
00:03:19,566 --> 00:03:21,226
In there, Siri is going to


90
00:03:21,226 --> 00:03:23,126
provide you an array of INPerson


91
00:03:23,126 --> 00:03:24,566
objects, in this case, John


92
00:03:24,566 --> 00:03:25,846
Appleseed and John Baily.


93
00:03:26,276 --> 00:03:27,816
As we saw earlier, John


94
00:03:27,816 --> 00:03:29,486
Appleseed and John Baily are


95
00:03:29,486 --> 00:03:30,746
part of my address book.


96
00:03:31,516 --> 00:03:32,796
It could also be they could be


97
00:03:32,796 --> 00:03:34,546
part of my custom vocabulary on


98
00:03:34,546 --> 00:03:36,706
my property address book on my


99
00:03:36,706 --> 00:03:37,386
application.


100
00:03:38,326 --> 00:03:39,626
At this point, the


101
00:03:39,626 --> 00:03:40,726
resolveRecipients intent


102
00:03:40,726 --> 00:03:41,686
parameter is going to get


103
00:03:41,686 --> 00:03:43,196
invoked and it's up to the app


104
00:03:43,196 --> 00:03:44,486
extension to make a decision.


105
00:03:44,966 --> 00:03:47,136
Do we have enough information to


106
00:03:47,136 --> 00:03:48,476
decide which John we want to


107
00:03:48,476 --> 00:03:52,206
send the message or do we need


108
00:03:52,236 --> 00:03:53,836
the help from the user to decide


109
00:03:53,836 --> 00:03:54,686
which of these John?


110
00:03:55,706 --> 00:03:57,316
In this case, we want to


111
00:03:57,316 --> 00:03:58,106
disambiguate.


112
00:03:58,456 --> 00:04:00,666
We are going to return back to


113
00:04:00,666 --> 00:04:02,346
Siri the disambiguation list.


114
00:04:03,196 --> 00:04:04,766
The list is going to be John


115
00:04:04,766 --> 00:04:06,136
Appleseed and John Baily.


116
00:04:07,566 --> 00:04:09,086
Siri is going to bring a great


117
00:04:09,086 --> 00:04:10,306
experience to our user, going to


118
00:04:10,306 --> 00:04:11,426
ask which one.


119
00:04:11,896 --> 00:04:13,516
John Baily or John Appleseed?


120
00:04:14,036 --> 00:04:15,536
At this point, it's up to the


121
00:04:15,536 --> 00:04:17,546
user to decide which John they


122
00:04:17,546 --> 00:04:19,805
want to use on their message.


123
00:04:22,296 --> 00:04:23,606
For the purpose of this flow,


124
00:04:23,606 --> 00:04:25,556
let's assume John Baily was the


125
00:04:25,556 --> 00:04:26,446
one we chose.


126
00:04:26,916 --> 00:04:29,756
Siri clearly understands that


127
00:04:29,756 --> 00:04:31,896
John Baily is the message-- is


128
00:04:31,896 --> 00:04:33,106
the contact we want to use.


129
00:04:33,666 --> 00:04:35,636
Siri's going to provide back to


130
00:04:35,636 --> 00:04:36,886
your resolveRecipients intent


131
00:04:36,886 --> 00:04:38,836
parameter that John Baily is the


132
00:04:38,836 --> 00:04:40,176
chosen INPerson object.


133
00:04:40,986 --> 00:04:43,076
At this point, it's clearly that


134
00:04:43,076 --> 00:04:44,336
we want to message John Baily


135
00:04:45,246 --> 00:04:47,146
and your intent recipients--


136
00:04:47,546 --> 00:04:48,986
intent parameter is ready to


137
00:04:48,986 --> 00:04:50,046
move to the next stage.


138
00:04:53,076 --> 00:04:54,636
To recap, we walked through the


139
00:04:54,636 --> 00:04:56,276
process when we have multiple


140
00:04:56,276 --> 00:04:58,086
Johns on our address book and we


141
00:04:58,156 --> 00:04:59,596
walked through the flow to


142
00:04:59,596 --> 00:05:01,836
disambiguate between them.


143
00:05:02,196 --> 00:05:03,336
We decided that we want to


144
00:05:03,336 --> 00:05:04,226
message John Baily.


145
00:05:07,496 --> 00:05:10,986
But what if-- what if John Baily


146
00:05:10,986 --> 00:05:12,936
has multiple phone numbers or


147
00:05:12,936 --> 00:05:14,856
email addresses or a combination


148
00:05:14,856 --> 00:05:15,276
of both?


149
00:05:15,896 --> 00:05:18,366
It is yet not clear that-- which


150
00:05:18,366 --> 00:05:20,046
of these handles we want to use


151
00:05:20,086 --> 00:05:21,056
to send our message.


152
00:05:21,806 --> 00:05:23,716
So, let's take a step back to


153
00:05:23,716 --> 00:05:24,976
the point where the user chose


154
00:05:25,006 --> 00:05:25,586
John Baily.


155
00:05:26,746 --> 00:05:28,506
Siri understands that we want to


156
00:05:28,506 --> 00:05:29,576
message John Baily.


157
00:05:32,116 --> 00:05:33,876
Siri's going to communicate back


158
00:05:34,056 --> 00:05:35,546
to your extension under


159
00:05:35,546 --> 00:05:36,976
resolveRecipients intent


160
00:05:36,976 --> 00:05:40,186
parameter with John Baily.


161
00:05:40,586 --> 00:05:43,526
At this point, it's up to your


162
00:05:43,526 --> 00:05:44,516
resolveRecipients intent


163
00:05:44,516 --> 00:05:47,326
parameter implementation to


164
00:05:47,326 --> 00:05:49,256
access your address book and


165
00:05:49,256 --> 00:05:50,956
make sure that you have enough


166
00:05:50,956 --> 00:05:52,576
information to which one handle


167
00:05:52,576 --> 00:05:53,326
is going to be used.


168
00:05:54,076 --> 00:05:55,656
In this case, as we saw, we have


169
00:05:55,656 --> 00:05:57,386
multiple handles, so we need


170
00:05:57,386 --> 00:05:58,226
user input.


171
00:05:58,776 --> 00:06:00,616
Focusing on the phone handles,


172
00:06:00,616 --> 00:06:01,386
we're going to provide the


173
00:06:01,386 --> 00:06:03,786
disambiguation list as we did


174
00:06:03,786 --> 00:06:05,566
before with the multiple Johns,


175
00:06:05,836 --> 00:06:07,136
but in this case it's the


176
00:06:07,136 --> 00:06:08,806
multiple phone number handles.


177
00:06:09,226 --> 00:06:11,446
As we saw, we have home, mobile,


178
00:06:11,446 --> 00:06:11,946
and work.


179
00:06:13,716 --> 00:06:17,016
Siri is going to bring up a


180
00:06:17,176 --> 00:06:18,106
prompt to the user.


181
00:06:18,296 --> 00:06:19,586
Which one do you want to use?


182
00:06:20,246 --> 00:06:21,316
So, in this case, it's pretty


183
00:06:21,316 --> 00:06:22,976
clear to the user that they need


184
00:06:22,976 --> 00:06:24,346
to pick one handle to send their


185
00:06:24,346 --> 00:06:24,816
message.


186
00:06:25,836 --> 00:06:27,866
Let's assume the user wants to


187
00:06:27,866 --> 00:06:32,276
send to the mobile number.


188
00:06:32,436 --> 00:06:33,746
User says mobile to Siri.


189
00:06:34,266 --> 00:06:35,566
We go through the same cycle


190
00:06:35,726 --> 00:06:37,416
where Siri understands that you


191
00:06:37,416 --> 00:06:38,926
want to message on the mobile


192
00:06:38,926 --> 00:06:40,166
number to John Baily.


193
00:06:40,636 --> 00:06:42,286
Siri's going to share that


194
00:06:42,286 --> 00:06:43,446
information back to the


195
00:06:43,446 --> 00:06:44,956
resolveRecipients intent


196
00:06:44,956 --> 00:06:45,426
parameter.


197
00:06:45,986 --> 00:06:48,056
Here you're going to get the


198
00:06:48,056 --> 00:06:48,956
whole information.


199
00:06:49,106 --> 00:06:50,496
We want to message John Baily


200
00:06:50,546 --> 00:06:51,916
and we want to do it in the


201
00:06:51,916 --> 00:06:52,816
mobile handle.


202
00:06:53,376 --> 00:06:56,106
At this point, the


203
00:06:56,106 --> 00:06:57,106
resolveRecipients intent


204
00:06:57,106 --> 00:06:58,846
parameter returns success, so we


205
00:06:58,846 --> 00:07:00,356
have finalized picking our


206
00:07:00,356 --> 00:07:01,966
recipient and we can move on to


207
00:07:01,966 --> 00:07:03,866
the next stage.


208
00:07:04,996 --> 00:07:06,916
As we know, any SiriKit intent


209
00:07:06,916 --> 00:07:09,486
implementation has three steps:


210
00:07:09,636 --> 00:07:11,346
resolve, confirm, and handle.


211
00:07:12,576 --> 00:07:14,776
So, let's take a look at sample


212
00:07:14,776 --> 00:07:16,376
code of the resolveRecipients


213
00:07:16,446 --> 00:07:17,906
intent parameter implementation.


214
00:07:20,836 --> 00:07:23,196
Here I have resolveRecipients


215
00:07:23,196 --> 00:07:23,836
implemented.


216
00:07:25,226 --> 00:07:26,356
The first thing that we're going


217
00:07:26,356 --> 00:07:28,556
to do is make sure a recipient


218
00:07:28,556 --> 00:07:29,156
was provided.


219
00:07:29,826 --> 00:07:31,046
In the case that the recipient


220
00:07:31,046 --> 00:07:32,526
wasn't provided, we can


221
00:07:32,526 --> 00:07:34,246
basically ask Siri to ask for


222
00:07:34,246 --> 00:07:36,446
that value to the user and we do


223
00:07:36,446 --> 00:07:38,536
that by returning needsValue.


224
00:07:39,406 --> 00:07:40,736
Siri will prompt the user.


225
00:07:41,166 --> 00:07:42,246
To who do you want to send your


226
00:07:42,246 --> 00:07:42,726
message?


227
00:07:43,276 --> 00:07:45,606
In the sample we walked through,


228
00:07:46,216 --> 00:07:47,616
the user said they want to


229
00:07:47,616 --> 00:07:48,256
message John.


230
00:07:49,286 --> 00:07:51,386
So, we got John.


231
00:07:51,686 --> 00:07:53,036
We got John Appleseed and John


232
00:07:53,036 --> 00:07:53,436
Baily.


233
00:07:53,756 --> 00:07:54,906
Here is where we're going to


234
00:07:54,906 --> 00:07:56,096
resolve which of these


235
00:07:56,096 --> 00:07:57,866
recipients we want to use or


236
00:07:57,866 --> 00:07:59,326
provide the disambiguation list


237
00:07:59,356 --> 00:08:01,286
back to Siri so it can prompt to


238
00:08:01,456 --> 00:08:01,966
the user.


239
00:08:03,276 --> 00:08:04,166
In the case that we need to


240
00:08:04,166 --> 00:08:07,026
provide back a list to Siri, we


241
00:08:07,026 --> 00:08:08,246
basically return that under a


242
00:08:08,246 --> 00:08:09,066
completion handle.


243
00:08:11,696 --> 00:08:13,076
Let's see a demo of this in


244
00:08:13,076 --> 00:08:13,466
action.


245
00:08:17,136 --> 00:08:19,936
Here I have my resolveRecipients


246
00:08:20,236 --> 00:08:21,336
intent parameter to be


247
00:08:21,336 --> 00:08:22,836
implemented on my UnicornChat


248
00:08:22,836 --> 00:08:23,406
application.


249
00:08:24,496 --> 00:08:26,226
As we saw, the first thing that


250
00:08:26,226 --> 00:08:29,556
we need to do is to validate


251
00:08:29,556 --> 00:08:30,826
that we got a recipient.


252
00:08:31,976 --> 00:08:33,306
Here we're making sure that a


253
00:08:33,306 --> 00:08:34,346
recipient got provided.


254
00:08:34,895 --> 00:08:38,296
In the case the recipient wasn't


255
00:08:38,296 --> 00:08:40,535
provided, we ask Siri to ask the


256
00:08:40,535 --> 00:08:44,636
user that we need that value.


257
00:08:44,796 --> 00:08:46,506
Once we got that recipient


258
00:08:47,206 --> 00:08:49,666
provided, we're going to process


259
00:08:49,666 --> 00:08:50,506
those recipients.


260
00:08:51,066 --> 00:08:53,116
Here we're going to walk through


261
00:08:53,116 --> 00:08:54,566
all the recipients that we got


262
00:08:54,566 --> 00:08:56,346
from Siri so we can process one


263
00:08:56,346 --> 00:08:56,746
by one.


264
00:08:57,186 --> 00:08:59,406
The first thing that I'm going


265
00:08:59,406 --> 00:09:00,896
to do, I'm going to check with


266
00:09:00,896 --> 00:09:02,916
my address book to resolve this


267
00:09:02,916 --> 00:09:03,416
recipient.


268
00:09:04,706 --> 00:09:06,276
My address book will do the


269
00:09:06,276 --> 00:09:07,766
heavy lifting to making sure


270
00:09:07,916 --> 00:09:10,236
that we have a contact backing


271
00:09:10,236 --> 00:09:11,036
up that recipient.


272
00:09:12,626 --> 00:09:14,336
Once that's done, we need to


273
00:09:14,336 --> 00:09:15,106
make a decision.


274
00:09:16,306 --> 00:09:18,076
The first case is where there's


275
00:09:18,076 --> 00:09:19,776
not a contact backing up that


276
00:09:19,776 --> 00:09:20,266
recipient.


277
00:09:20,666 --> 00:09:21,796
Going back to our example of


278
00:09:21,796 --> 00:09:23,476
John, if I don't have any John


279
00:09:23,476 --> 00:09:25,236
on my address book, we basically


280
00:09:25,236 --> 00:09:26,946
tell back Siri that I don't have


281
00:09:26,946 --> 00:09:28,146
it and it's not supported.


282
00:09:28,696 --> 00:09:30,186
It will make Siri to ask the


283
00:09:30,186 --> 00:09:31,966
user to provide a valid


284
00:09:31,966 --> 00:09:32,546
recipient.


285
00:09:33,076 --> 00:09:35,706
In the case where we found one,


286
00:09:36,216 --> 00:09:37,376
we need to process that


287
00:09:37,996 --> 00:09:38,566
recipient.


288
00:09:39,046 --> 00:09:40,806
So, let me walk through this


289
00:09:40,806 --> 00:09:41,366
piece of code.


290
00:09:42,756 --> 00:09:44,566
The first thing that we're going


291
00:09:44,566 --> 00:09:47,076
to do is validate if that


292
00:09:47,076 --> 00:09:48,996
recipient that we found has one


293
00:09:48,996 --> 00:09:49,936
or multiple handles.


294
00:09:50,356 --> 00:09:51,536
This case, we are focusing on


295
00:09:51,536 --> 00:09:52,286
the phone numbers.


296
00:09:52,826 --> 00:09:54,056
Where there are more than one


297
00:09:54,056 --> 00:09:55,836
phone number and we cannot make


298
00:09:55,836 --> 00:09:57,616
the decision for the user, we're


299
00:09:57,616 --> 00:09:58,446
going to return back a


300
00:09:58,446 --> 00:10:01,316
disambiguation response code


301
00:10:01,646 --> 00:10:02,896
with the handle that we want to


302
00:10:02,896 --> 00:10:03,326
display.


303
00:10:03,666 --> 00:10:05,206
This is going to be used by Siri


304
00:10:05,636 --> 00:10:07,676
to ask to the user which of the


305
00:10:07,676 --> 00:10:08,956
handles you want to use.


306
00:10:12,656 --> 00:10:15,296
In the case where we have a


307
00:10:15,296 --> 00:10:17,326
single recipient with a single


308
00:10:17,326 --> 00:10:18,966
handle, we basically return


309
00:10:18,966 --> 00:10:19,536
success.


310
00:10:19,656 --> 00:10:20,776
We tell them we found the


311
00:10:20,776 --> 00:10:22,216
recipient and we're ready to


312
00:10:22,216 --> 00:10:23,466
move on to the next stage.


313
00:10:24,566 --> 00:10:25,706
Have a special case here.


314
00:10:27,476 --> 00:10:31,216
This special case, it will cause


315
00:10:31,216 --> 00:10:33,766
Siri to make a question to user.


316
00:10:33,766 --> 00:10:35,196
Are you sure you want to message


317
00:10:35,196 --> 00:10:35,516
John?


318
00:10:36,236 --> 00:10:38,166
I use this in the cases where I


319
00:10:38,166 --> 00:10:39,776
do some level of fuzzy matching


320
00:10:39,856 --> 00:10:42,066
when the contact that Siri got


321
00:10:42,066 --> 00:10:43,666
requested doesn't completely


322
00:10:43,666 --> 00:10:44,846
match to the one I have on my


323
00:10:44,846 --> 00:10:48,556
address book.


324
00:10:48,776 --> 00:10:50,026
We're missing one or more case


325
00:10:50,026 --> 00:10:50,556
to handle.


326
00:10:52,316 --> 00:10:53,996
This is a case where we have


327
00:10:53,996 --> 00:10:55,036
more than one match.


328
00:10:56,136 --> 00:10:58,256
As we saw, we have John Baily


329
00:10:58,256 --> 00:11:00,166
and John Appleseed on my address


330
00:11:00,166 --> 00:11:01,746
book, so we need to disambiguate


331
00:11:01,746 --> 00:11:02,356
between them.


332
00:11:02,986 --> 00:11:04,066
Here we're using the same


333
00:11:04,066 --> 00:11:05,176
technique, using a


334
00:11:05,176 --> 00:11:06,976
disambiguation and providing the


335
00:11:06,976 --> 00:11:12,406
list of matches.


336
00:11:12,526 --> 00:11:13,616
There is one more case.


337
00:11:14,016 --> 00:11:15,336
As we saw on the flow that we


338
00:11:15,336 --> 00:11:17,046
walked through, first we asked


339
00:11:17,046 --> 00:11:18,976
with John and then when the user


340
00:11:18,976 --> 00:11:20,766
picked John Baily we asked which


341
00:11:20,766 --> 00:11:21,176
handle.


342
00:11:22,076 --> 00:11:23,616
We are going to call back the


343
00:11:23,616 --> 00:11:24,696
resolveRecipients intent


344
00:11:24,696 --> 00:11:26,346
parameter and we need to handle


345
00:11:26,346 --> 00:11:26,966
that case.


346
00:11:27,576 --> 00:11:28,776
In that case, we need to


347
00:11:28,776 --> 00:11:30,656
validate if the handle has been


348
00:11:30,656 --> 00:11:32,016
already provided, we can


349
00:11:32,016 --> 00:11:33,436
basically return back with that


350
00:11:33,436 --> 00:11:33,966
recipient.


351
00:11:34,486 --> 00:11:36,916
So, let's see this in action.


352
00:11:39,696 --> 00:11:41,236
In order to do that, I'm going


353
00:11:41,236 --> 00:11:44,236
to use the edit a scheme.


354
00:11:44,386 --> 00:11:45,736
So, you can provide the Siri


355
00:11:45,736 --> 00:11:48,086
intent query from the get go so


356
00:11:48,086 --> 00:11:49,706
you actually have to trigger


357
00:11:49,706 --> 00:11:50,806
Siri and speak to it.


358
00:11:51,096 --> 00:11:52,576
So, when I run my example, it's


359
00:11:52,576 --> 00:11:54,056
going to trigger Siri for me and


360
00:11:54,086 --> 00:11:55,666
it's going to say text John


361
00:11:55,666 --> 00:11:56,836
hello on UnicornChat.


362
00:12:08,266 --> 00:12:09,986
As we see, we have multiple


363
00:12:09,986 --> 00:12:11,766
Johns on my address book, so we


364
00:12:11,766 --> 00:12:12,446
need to pick one.


365
00:12:13,136 --> 00:12:14,096
Let's pick John Baily.


366
00:12:14,636 --> 00:12:17,066
As we walk through the flow, we


367
00:12:17,066 --> 00:12:18,376
also have to pick a handle.


368
00:12:18,546 --> 00:12:19,786
In this case, we want to pick


369
00:12:19,786 --> 00:12:20,576
the mobile handle.


370
00:12:21,956 --> 00:12:23,196
At this point, we are ready to


371
00:12:23,196 --> 00:12:24,936
send the message and all the--


372
00:12:25,046 --> 00:12:29,000
the recipient has been resolved.


373
00:12:32,516 --> 00:12:37,326
[ Applause ]


374
00:12:37,826 --> 00:12:39,326
We just saw how to walk through


375
00:12:39,326 --> 00:12:41,056
the process of resolving a


376
00:12:41,056 --> 00:12:42,436
contact when trying to send a


377
00:12:42,436 --> 00:12:42,886
message.


378
00:12:43,436 --> 00:12:45,056
This technique also applies to


379
00:12:45,056 --> 00:12:46,536
any other intent that requires


380
00:12:46,576 --> 00:12:47,416
contact resolution.


381
00:12:49,876 --> 00:12:52,416
Messaging applications are great


382
00:12:52,416 --> 00:12:53,856
for sending messages, but


383
00:12:53,856 --> 00:12:55,386
they're also great for reading


384
00:12:55,386 --> 00:12:55,876
messages.


385
00:12:56,496 --> 00:12:58,246
A great example of that is


386
00:12:58,246 --> 00:12:59,846
reading messages on CarPlay.


387
00:13:00,746 --> 00:13:02,716
If your application implements


388
00:13:03,076 --> 00:13:05,116
the INSearchForMessagesIntent,


389
00:13:05,566 --> 00:13:07,396
you will get access to reading


390
00:13:07,396 --> 00:13:09,716
experience on iOS as well as on


391
00:13:09,716 --> 00:13:09,946
CarPlay.


392
00:13:10,446 --> 00:13:14,046
So, on iOS 11, we introduce a


393
00:13:14,046 --> 00:13:16,446
new property to make replying to


394
00:13:16,446 --> 00:13:18,266
the messages that Siri just read


395
00:13:18,266 --> 00:13:19,656
to our users easier.


396
00:13:21,436 --> 00:13:23,286
That new property is


397
00:13:23,286 --> 00:13:24,526
conversationIdentifier.


398
00:13:25,336 --> 00:13:27,116
This has been introduced on the


399
00:13:27,176 --> 00:13:29,906
INMessage object as well on the


400
00:13:29,906 --> 00:13:31,276
INSendMessageIntent.


401
00:13:32,176 --> 00:13:33,966
This conversationIdentifier is


402
00:13:33,966 --> 00:13:36,596
going to be used to reply to a


403
00:13:36,596 --> 00:13:37,056
message.


404
00:13:37,366 --> 00:13:38,626
Siri is going to read a message


405
00:13:38,626 --> 00:13:41,326
for you from UnicornChat and the


406
00:13:41,326 --> 00:13:42,806
value of this property is going


407
00:13:42,846 --> 00:13:44,416
to help you to short circuit the


408
00:13:44,416 --> 00:13:45,996
contact resolution process that


409
00:13:45,996 --> 00:13:48,426
we walked through.


410
00:13:48,626 --> 00:13:51,486
Let's see the flow of how this


411
00:13:51,486 --> 00:13:51,836
is done.


412
00:13:52,346 --> 00:13:55,416
Read my messages on UnicornChat.


413
00:13:56,526 --> 00:13:57,896
We want to read the messages


414
00:13:57,896 --> 00:13:59,696
that we have on the UnicornChat.


415
00:14:00,326 --> 00:14:03,736
Siri clearly understands that.


416
00:14:03,956 --> 00:14:05,496
Siri is going to send an


417
00:14:05,526 --> 00:14:07,356
INSearchForMessagesIntent to


418
00:14:07,356 --> 00:14:08,256
your app extension.


419
00:14:09,146 --> 00:14:10,446
Your app extension has


420
00:14:10,446 --> 00:14:11,556
implemented the


421
00:14:11,556 --> 00:14:13,106
SearchForMessageIntent handle.


422
00:14:14,206 --> 00:14:16,206
This handle is going to provide


423
00:14:16,206 --> 00:14:18,006
the list of INMessages object


424
00:14:18,576 --> 00:14:19,846
that Siri is going to read back


425
00:14:19,906 --> 00:14:20,456
to the user.


426
00:14:21,676 --> 00:14:23,936
As we notice, the INMessage


427
00:14:23,976 --> 00:14:26,566
object contains a property named


428
00:14:26,566 --> 00:14:27,756
conversationIdentifier.


429
00:14:29,026 --> 00:14:31,686
This identifier represents the


430
00:14:31,686 --> 00:14:33,486
uniqueness of that conversation.


431
00:14:34,626 --> 00:14:36,006
With that uniqueness, you can


432
00:14:36,006 --> 00:14:37,616
use that conversationIdentifier


433
00:14:37,846 --> 00:14:38,976
when the user wants to reply


434
00:14:39,806 --> 00:14:39,906
back.


435
00:14:41,146 --> 00:14:43,326
As we see, Siri finished reading


436
00:14:43,326 --> 00:14:44,596
the message and it will ask the


437
00:14:44,596 --> 00:14:45,896
user if they want to reply.


438
00:14:47,516 --> 00:14:49,116
To continue this flow, let's


439
00:14:49,116 --> 00:14:51,166
assume the user wants to reply


440
00:14:51,626 --> 00:14:52,376
saying hello.


441
00:14:52,896 --> 00:14:56,506
Siri clearly understands the


442
00:14:56,506 --> 00:14:58,646
user say just hello, meaning I


443
00:14:58,646 --> 00:14:59,996
want to reply to this message


444
00:15:00,026 --> 00:15:01,726
and I want it to say hello on my


445
00:15:01,726 --> 00:15:02,296
content.


446
00:15:03,676 --> 00:15:05,146
Siri is going to send down an


447
00:15:05,146 --> 00:15:07,016
INSendMessageIntent with a


448
00:15:07,016 --> 00:15:08,326
conversationIdentifier


449
00:15:08,416 --> 00:15:08,976
populated.


450
00:15:09,716 --> 00:15:11,156
This conversationIdentifier


451
00:15:11,156 --> 00:15:12,836
value is the same one that you


452
00:15:12,836 --> 00:15:14,356
populated on the INMessage


453
00:15:14,416 --> 00:15:16,306
object that Siri used for


454
00:15:16,306 --> 00:15:17,106
reading the message.


455
00:15:18,276 --> 00:15:20,206
With this value, now it's


456
00:15:20,206 --> 00:15:20,946
provided in the


457
00:15:20,946 --> 00:15:22,126
resolveRecipients intent


458
00:15:22,126 --> 00:15:22,576
parameter.


459
00:15:23,366 --> 00:15:24,826
Would it-- we can short circuit


460
00:15:24,826 --> 00:15:26,236
the contact resolution by


461
00:15:26,236 --> 00:15:27,776
basically using it and going


462
00:15:27,776 --> 00:15:29,626
straight to our messaging


463
00:15:29,626 --> 00:15:31,426
conversation, grabbing that


464
00:15:31,426 --> 00:15:32,746
conversation, getting the


465
00:15:32,746 --> 00:15:34,996
recipients, and moving on to the


466
00:15:34,996 --> 00:15:36,486
next step of replying to the


467
00:15:36,486 --> 00:15:36,916
message.


468
00:15:41,556 --> 00:15:43,146
To learn more about enabling


469
00:15:43,146 --> 00:15:44,506
your app for CarPlay, I


470
00:15:44,506 --> 00:15:45,526
recommend you take a look to


471
00:15:45,526 --> 00:15:47,276
this video that we released this


472
00:15:47,806 --> 00:15:47,896
year.


473
00:15:52,716 --> 00:15:56,036
In addition to doing contact


474
00:15:56,036 --> 00:15:59,016
resolution, we also had looked


475
00:15:59,016 --> 00:16:00,116
at response codes.


476
00:16:01,226 --> 00:16:02,556
Last year, when we introduced


477
00:16:02,556 --> 00:16:03,946
SiriKit, we introduced a set of


478
00:16:03,946 --> 00:16:05,236
response codes that you might be


479
00:16:05,236 --> 00:16:06,886
familiar with on the messaging


480
00:16:06,886 --> 00:16:07,216
world.


481
00:16:07,606 --> 00:16:09,216
For example, when the service is


482
00:16:09,216 --> 00:16:11,046
not available, you can return


483
00:16:11,046 --> 00:16:13,116
back a failure service not


484
00:16:13,116 --> 00:16:14,596
available and Siri will gladly


485
00:16:14,596 --> 00:16:16,436
tell that to the user what went


486
00:16:16,436 --> 00:16:16,676
wrong.


487
00:16:16,926 --> 00:16:19,646
We look at that and we have


488
00:16:19,646 --> 00:16:21,646
improved the response codes on


489
00:16:22,626 --> 00:16:24,646
calling intents, messaging


490
00:16:24,646 --> 00:16:27,306
intents, and payment intents.


491
00:16:27,986 --> 00:16:30,026
In this case, I have an example


492
00:16:30,086 --> 00:16:32,046
of a call intent where we


493
00:16:32,046 --> 00:16:33,486
introduced an invalid number


494
00:16:33,486 --> 00:16:35,336
response code and it will help


495
00:16:35,336 --> 00:16:36,706
us to be more transparent to the


496
00:16:36,706 --> 00:16:39,436
user when the intent created


497
00:16:39,436 --> 00:16:40,646
doesn't have a valid number.


498
00:16:41,276 --> 00:16:42,646
That way Siri will provide a


499
00:16:42,646 --> 00:16:44,726
nice experience and it will be


500
00:16:44,816 --> 00:16:46,796
pretty clear what went wrong.


501
00:16:47,536 --> 00:16:49,006
For more information for this,


502
00:16:49,216 --> 00:16:49,736
you can look at the


503
00:16:49,736 --> 00:16:50,516
documentation.


504
00:16:52,456 --> 00:16:54,546
To recap what we have covered so


505
00:16:54,546 --> 00:16:56,306
far, we talked about


506
00:16:56,306 --> 00:16:58,226
INPerson.siriMatches, the new


507
00:16:58,226 --> 00:16:59,766
property that we introduced on


508
00:16:59,876 --> 00:17:02,796
iOS 10.3 that can help you do


509
00:17:02,796 --> 00:17:04,016
better contact resolution


510
00:17:04,016 --> 00:17:04,396
handling.


511
00:17:05,465 --> 00:17:06,945
After that, we walked through


512
00:17:06,945 --> 00:17:08,106
the process of resolving


513
00:17:08,106 --> 00:17:09,705
multiple handles, meaning


514
00:17:09,806 --> 00:17:11,606
multiple phone numbers or email


515
00:17:11,606 --> 00:17:13,356
addresses or a combination of


516
00:17:13,356 --> 00:17:13,626
both.


517
00:17:16,296 --> 00:17:17,955
We also covered the introduction


518
00:17:18,086 --> 00:17:19,576
of the conversationIdentifier


519
00:17:19,656 --> 00:17:21,506
and how it's helpful to replying


520
00:17:21,506 --> 00:17:23,665
messages that Siri just read.


521
00:17:24,935 --> 00:17:26,866
And we also briefly covered


522
00:17:26,866 --> 00:17:27,796
response codes and the


523
00:17:27,796 --> 00:17:29,676
enhancement we have provided in


524
00:17:29,736 --> 00:17:30,386
iOS 11.


525
00:17:31,646 --> 00:17:32,896
With that, I'm going to hand


526
00:17:32,896 --> 00:17:34,636
over to my coworker Rohit so he


527
00:17:34,636 --> 00:17:35,826
can talk to you more about


528
00:17:35,826 --> 00:17:36,356
security.


529
00:17:37,516 --> 00:17:42,366
[ Applause ]


530
00:17:42,866 --> 00:17:43,526
>> Thank you, Angel.


531
00:17:45,056 --> 00:17:46,096
Hello everyone.


532
00:17:46,726 --> 00:17:48,516
My name is Rohit Dasari.


533
00:17:48,586 --> 00:17:49,866
I work on the SiriKit team.


534
00:17:50,486 --> 00:17:52,026
So, let's talk about security in


535
00:17:52,026 --> 00:17:53,316
the context of SiriKit.


536
00:17:53,846 --> 00:17:56,876
Let's go back to the example of


537
00:17:56,876 --> 00:17:58,106
UnicornChat which we saw


538
00:17:58,106 --> 00:17:58,436
earlier.


539
00:17:59,486 --> 00:18:00,686
You see here that the user is


540
00:18:00,686 --> 00:18:02,366
able to send a message even when


541
00:18:02,366 --> 00:18:03,476
the device is locked.


542
00:18:04,076 --> 00:18:05,466
Now, Siri lets this through


543
00:18:05,996 --> 00:18:07,656
makes-- Siri makes a decision


544
00:18:07,926 --> 00:18:09,696
based on the intent whether--


545
00:18:09,696 --> 00:18:12,456
how to balance usability and


546
00:18:12,456 --> 00:18:14,166
convenience with security.


547
00:18:15,366 --> 00:18:16,946
In this case, for the messaging


548
00:18:16,946 --> 00:18:18,786
case, Siri lets requests through


549
00:18:18,786 --> 00:18:20,086
even when the device is locked.


550
00:18:20,956 --> 00:18:23,366
Some of you might be required to


551
00:18:23,436 --> 00:18:24,786
ask the user to unlock the


552
00:18:24,786 --> 00:18:26,566
device before handling intents


553
00:18:26,566 --> 00:18:27,236
of this kind.


554
00:18:28,636 --> 00:18:29,746
This might be due to some


555
00:18:29,746 --> 00:18:31,956
security policies or some


556
00:18:31,956 --> 00:18:34,136
corporate or legal requirements


557
00:18:34,136 --> 00:18:35,596
that your app has to conform to.


558
00:18:37,156 --> 00:18:39,236
There's a way to do this with


559
00:18:39,496 --> 00:18:42,296
the current SiriKit mechanisms


560
00:18:42,676 --> 00:18:44,056
without any code changes.


561
00:18:44,056 --> 00:18:45,596
That is zero code changes.


562
00:18:47,676 --> 00:18:50,106
All you have to do is go into


563
00:18:50,106 --> 00:18:52,856
the info.plist of your SiriKit


564
00:18:52,856 --> 00:18:56,696
intents extension and in the


565
00:18:56,696 --> 00:18:58,406
place where you list the intents


566
00:18:58,626 --> 00:19:00,106
that your extension supports,


567
00:19:01,026 --> 00:19:05,156
add this entry for the intents


568
00:19:05,156 --> 00:19:06,086
you want to restrict.


569
00:19:07,156 --> 00:19:08,106
The section is called


570
00:19:08,156 --> 00:19:09,816
IntentsRestrictedWhileLocked,


571
00:19:09,816 --> 00:19:10,996
which speaks for itself.


572
00:19:11,946 --> 00:19:14,866
So, with this one change, Siri


573
00:19:14,866 --> 00:19:18,386
now knows that when the user


574
00:19:18,386 --> 00:19:22,316
wants to perform an intent which


575
00:19:22,316 --> 00:19:25,346
falls into this category, the


576
00:19:25,346 --> 00:19:27,336
device must first be unlocked.


577
00:19:29,336 --> 00:19:31,026
Zero lines of code change.


578
00:19:34,976 --> 00:19:37,386
But sometimes that's not enough.


579
00:19:37,966 --> 00:19:39,036
Unlocking the device is not


580
00:19:39,036 --> 00:19:39,456
enough.


581
00:19:40,036 --> 00:19:41,496
Let's take this example of an


582
00:19:41,496 --> 00:19:45,236
app which users can use to lock


583
00:19:45,236 --> 00:19:46,566
and unlock their cars.


584
00:19:47,556 --> 00:19:49,276
For an app like this to


585
00:19:49,276 --> 00:19:51,286
integrate with SiriKit, it has


586
00:19:51,286 --> 00:19:53,646
to handle an intent called


587
00:19:54,056 --> 00:19:56,556
setCarLockStatusIntent.


588
00:19:57,676 --> 00:19:58,936
This is an intent we added in


589
00:19:59,306 --> 00:20:00,616
iOS 10.3.


590
00:20:01,156 --> 00:20:03,956
Let's take a quick look at this


591
00:20:03,956 --> 00:20:04,426
intent.


592
00:20:04,976 --> 00:20:06,066
It's a pretty simple intent.


593
00:20:06,576 --> 00:20:07,846
There are two properties.


594
00:20:08,596 --> 00:20:09,856
The name of the car you want to


595
00:20:09,856 --> 00:20:13,336
lock or unlock and the state


596
00:20:13,426 --> 00:20:14,646
that you want to set on that


597
00:20:14,646 --> 00:20:14,816
car.


598
00:20:17,706 --> 00:20:19,626
Once the app provides an


599
00:20:19,626 --> 00:20:20,806
extension that handles this


600
00:20:20,806 --> 00:20:23,166
intent, it can handle commands


601
00:20:23,166 --> 00:20:25,046
like this where the user can say


602
00:20:25,046 --> 00:20:27,616
unlock my car and Siri will know


603
00:20:27,616 --> 00:20:29,456
to invoke the app extension,


604
00:20:29,456 --> 00:20:30,936
give it intent, and let the


605
00:20:30,936 --> 00:20:32,816
intent-- and let the extension


606
00:20:32,816 --> 00:20:33,256
handle it.


607
00:20:34,156 --> 00:20:35,336
Notice I'm not saying the name


608
00:20:35,336 --> 00:20:36,076
of the app here.


609
00:20:36,656 --> 00:20:38,096
This is because Siri is smart


610
00:20:38,096 --> 00:20:39,376
enough to know when there is


611
00:20:39,376 --> 00:20:41,396
only one qualifying app to


612
00:20:41,396 --> 00:20:42,776
handle a particular intent and


613
00:20:43,216 --> 00:20:45,536
it will not ask the user for


614
00:20:45,636 --> 00:20:47,466
either confirming the name of


615
00:20:47,466 --> 00:20:48,926
the app or for disambiguating.


616
00:20:50,106 --> 00:20:51,606
So, with this intent handled,


617
00:20:52,306 --> 00:20:54,886
the example app I have reflects


618
00:20:54,886 --> 00:20:56,186
the change in the state of the


619
00:20:56,186 --> 00:20:58,476
car's doors by showing it


620
00:20:58,476 --> 00:20:59,756
graphically, as you can see


621
00:21:00,406 --> 00:21:00,496
here.


622
00:21:01,396 --> 00:21:03,096
So, this is a pretty sensitive


623
00:21:03,096 --> 00:21:03,586
transaction.


624
00:21:03,586 --> 00:21:04,896
You are unlocking somebody's


625
00:21:04,896 --> 00:21:05,296
car.


626
00:21:06,026 --> 00:21:07,806
So, for transactions like this,


627
00:21:07,806 --> 00:21:09,026
even when the device is


628
00:21:09,026 --> 00:21:10,596
unlocked, you might want to


629
00:21:10,596 --> 00:21:12,676
present another authorization


630
00:21:12,676 --> 00:21:13,536
request to the user.


631
00:21:14,986 --> 00:21:17,936
We recommend you use the secure


632
00:21:17,936 --> 00:21:19,526
authorization mechanism which is


633
00:21:19,686 --> 00:21:21,986
already built into iOS, which is


634
00:21:22,156 --> 00:21:22,636
Touch ID.


635
00:21:23,736 --> 00:21:24,966
Using the local authentication


636
00:21:24,966 --> 00:21:27,736
API, you can even customize the


637
00:21:27,736 --> 00:21:29,906
prompt which is shown along with


638
00:21:29,906 --> 00:21:32,016
the Touch ID to tell the user to


639
00:21:32,016 --> 00:21:33,916
give the user some context about


640
00:21:33,916 --> 00:21:35,396
why they're being asked to


641
00:21:35,396 --> 00:21:37,866
authorize all over again even


642
00:21:37,866 --> 00:21:38,896
when the device is locked--


643
00:21:38,896 --> 00:21:39,326
unlocked.


644
00:21:41,586 --> 00:21:43,036
In case your device does not--


645
00:21:43,116 --> 00:21:44,696
in case the user's device does


646
00:21:44,696 --> 00:21:46,466
not support Touch ID or maybe


647
00:21:46,466 --> 00:21:47,666
the user has not configured


648
00:21:47,666 --> 00:21:50,326
Touch ID yet on that device, the


649
00:21:50,326 --> 00:21:52,066
local authentication API allows


650
00:21:52,066 --> 00:21:53,986
you to fall back to unlocking


651
00:21:53,986 --> 00:21:55,326
the device using just the


652
00:21:55,326 --> 00:21:55,896
passcode.


653
00:21:57,506 --> 00:21:58,726
You notice it has the same


654
00:21:58,936 --> 00:22:00,356
customized string which is


655
00:22:00,626 --> 00:22:02,366
provided by your app over here


656
00:22:02,366 --> 00:22:03,896
to give the user some context.


657
00:22:04,906 --> 00:22:06,256
This is pretty simple to do.


658
00:22:06,556 --> 00:22:08,076
Let me show you a demo of how to


659
00:22:08,076 --> 00:22:08,426
do it.


660
00:22:09,136 --> 00:22:11,076
So, what I have here is the


661
00:22:11,076 --> 00:22:12,796
intent handler for the


662
00:22:12,796 --> 00:22:15,376
setCarLockStatusIntent of the


663
00:22:15,376 --> 00:22:16,926
test app I just showed you.


664
00:22:18,196 --> 00:22:19,596
Let us see what this app looks


665
00:22:19,596 --> 00:22:19,876
like.


666
00:22:22,636 --> 00:22:23,906
As we saw, there is a


667
00:22:23,906 --> 00:22:25,936
representation of the car, of


668
00:22:25,996 --> 00:22:28,086
the user's car, and this also


669
00:22:28,086 --> 00:22:29,736
represents the state of the car,


670
00:22:29,736 --> 00:22:30,916
whether it's locked or unlocked.


671
00:22:31,126 --> 00:22:33,606
In this case, it's locked and I


672
00:22:33,606 --> 00:22:34,706
can unlock it with a tap.


673
00:22:35,366 --> 00:22:40,966
Set it to the lock state and I


674
00:22:40,966 --> 00:22:42,876
want to ask Siri to unlock the


675
00:22:42,876 --> 00:22:44,336
car using this app.


676
00:22:44,736 --> 00:22:46,826
So, as my colleague Angel showed


677
00:22:46,826 --> 00:22:48,946
earlier, I'm going to use the


678
00:22:48,946 --> 00:22:51,436
scheme editor to enter the


679
00:22:51,436 --> 00:22:53,026
request I want to send to Siri


680
00:22:54,386 --> 00:22:56,406
and I'm going to issue the


681
00:22:56,406 --> 00:22:57,006
request.


682
00:23:00,896 --> 00:23:02,576
The scheme editor is very handy,


683
00:23:02,576 --> 00:23:04,056
in case you haven't realized.


684
00:23:05,006 --> 00:23:05,946
It saves you the trouble of


685
00:23:05,946 --> 00:23:06,926
speaking to your phone when you


686
00:23:06,926 --> 00:23:08,466
are testing, which is really


687
00:23:08,466 --> 00:23:10,216
useful in a shared workspace


688
00:23:10,216 --> 00:23:10,726
environment.


689
00:23:11,996 --> 00:23:15,346
So, in this case, Siri has


690
00:23:15,346 --> 00:23:16,736
handled the request, given it to


691
00:23:16,736 --> 00:23:18,536
the app, and has reported


692
00:23:18,536 --> 00:23:18,986
success.


693
00:23:19,736 --> 00:23:21,526
Let us confirm that it actually


694
00:23:21,526 --> 00:23:22,356
did unlock the car.


695
00:23:23,216 --> 00:23:25,456
So, now the car is-- state is


696
00:23:25,456 --> 00:23:27,436
update-- is updated to show that


697
00:23:27,436 --> 00:23:28,216
it has been unlocked.


698
00:23:28,796 --> 00:23:30,856
Let's go back to the intent


699
00:23:30,896 --> 00:23:31,236
handler.


700
00:23:32,796 --> 00:23:36,056
This intent handler extracts the


701
00:23:36,056 --> 00:23:37,536
fields that we saw on the


702
00:23:37,536 --> 00:23:39,186
intent, which is should I lock


703
00:23:39,186 --> 00:23:41,346
the car or unlock the car and


704
00:23:42,596 --> 00:23:44,586
the-- and it looks up an


705
00:23:44,586 --> 00:23:46,956
internal car object matching the


706
00:23:46,956 --> 00:23:48,076
name on the intent.


707
00:23:49,676 --> 00:23:52,886
Then it sets the lock state on


708
00:23:52,886 --> 00:23:55,026
the car object based on the


709
00:23:55,026 --> 00:23:56,446
input on the intent.


710
00:23:57,206 --> 00:23:59,026
And, finally, after having--


711
00:23:59,026 --> 00:24:01,156
after having changed the state


712
00:24:01,156 --> 00:24:03,196
of the car, it returns a success


713
00:24:03,196 --> 00:24:05,056
response to Siri.


714
00:24:06,286 --> 00:24:08,056
In case of a failure or in case


715
00:24:08,056 --> 00:24:10,406
when there is no-- when there is


716
00:24:10,406 --> 00:24:11,756
not enough information on the


717
00:24:11,756 --> 00:24:14,046
intent, it returns a failure


718
00:24:14,046 --> 00:24:14,566
response.


719
00:24:15,876 --> 00:24:18,526
So, you notice how that this


720
00:24:18,526 --> 00:24:20,226
extent-- this intent handler is


721
00:24:20,226 --> 00:24:21,636
unconditionally handling the


722
00:24:21,636 --> 00:24:23,286
request that the user gave it.


723
00:24:24,196 --> 00:24:25,886
We want to add a prompt here


724
00:24:26,006 --> 00:24:27,496
using the local authentication


725
00:24:27,496 --> 00:24:27,756
API.


726
00:24:28,836 --> 00:24:31,866
So, once we confirmed that the


727
00:24:31,866 --> 00:24:33,316
intent has all the parameters we


728
00:24:33,316 --> 00:24:35,136
need, let's call the local


729
00:24:35,136 --> 00:24:39,976
authentication API.


730
00:24:40,146 --> 00:24:41,036
In order to call the local


731
00:24:41,036 --> 00:24:43,896
authentication API, I'm first


732
00:24:45,106 --> 00:24:47,826
generating a string based on the


733
00:24:47,826 --> 00:24:49,866
lock state that is requested.


734
00:24:51,206 --> 00:24:53,066
That is if it is-- if the user


735
00:24:53,066 --> 00:24:54,436
wants me to lock the car, then I


736
00:24:54,436 --> 00:24:55,716
will show the appropriate


737
00:24:55,716 --> 00:24:56,056
prompt.


738
00:24:57,376 --> 00:24:58,766
Then, to the local


739
00:24:58,766 --> 00:25:00,806
authentication context, I'm


740
00:25:00,806 --> 00:25:03,276
going to ask it to evaluate a


741
00:25:03,276 --> 00:25:04,116
certain policy.


742
00:25:04,906 --> 00:25:06,576
In this case, I'm asking it to


743
00:25:06,576 --> 00:25:07,956
evaluate the device owner


744
00:25:07,956 --> 00:25:09,096
authentication policy.


745
00:25:09,696 --> 00:25:11,496
This is a policy which attempts


746
00:25:11,596 --> 00:25:13,086
to do a Touch ID prompt first


747
00:25:13,086 --> 00:25:14,436
and if that doesn't work it


748
00:25:14,436 --> 00:25:15,766
falls back to the device


749
00:25:15,806 --> 00:25:18,166
passcode prompt.


750
00:25:18,296 --> 00:25:19,896
Next, I pass in the prompt


751
00:25:19,896 --> 00:25:21,436
string which I just generated in


752
00:25:21,436 --> 00:25:23,406
the previous line, and finally I


753
00:25:23,406 --> 00:25:24,346
have the reply block.


754
00:25:24,996 --> 00:25:26,146
So, let's fill in the reply


755
00:25:26,146 --> 00:25:26,426
block.


756
00:25:29,476 --> 00:25:31,776
If the user has granted access


757
00:25:32,266 --> 00:25:33,626
via Touch ID or a device


758
00:25:33,626 --> 00:25:35,526
passcode prompt, I'm going to go


759
00:25:35,526 --> 00:25:38,416
ahead and change the state of


760
00:25:38,416 --> 00:25:40,516
the car as I did earlier without


761
00:25:40,516 --> 00:25:41,576
prompting, but this time I'm


762
00:25:41,576 --> 00:25:42,876
actually waiting for the user to


763
00:25:42,876 --> 00:25:43,786
give me access.


764
00:25:44,166 --> 00:25:46,876
And then I'm going to call the


765
00:25:46,876 --> 00:25:49,236
completion block with the


766
00:25:49,236 --> 00:25:50,956
success response to tell Siri


767
00:25:50,956 --> 00:25:53,166
that request has been completed


768
00:25:53,516 --> 00:25:54,086
successfully.


769
00:25:54,496 --> 00:25:56,906
I also need to tell Siri when


770
00:25:56,906 --> 00:25:58,696
there is a failure, that is if


771
00:25:58,696 --> 00:26:00,706
the access was not granted, then


772
00:26:00,706 --> 00:26:02,036
I need to tell Siri that there


773
00:26:02,036 --> 00:26:02,636
was a failure.


774
00:26:03,026 --> 00:26:05,256
I do that by returning a failure


775
00:26:05,256 --> 00:26:06,826
response using the same


776
00:26:06,826 --> 00:26:07,606
completion block.


777
00:26:09,116 --> 00:26:11,566
So, with this change, let us go


778
00:26:11,566 --> 00:26:13,596
and see if unlocking the car


779
00:26:14,876 --> 00:26:16,406
prompts the user to do


780
00:26:17,956 --> 00:26:18,716
authentication.


781
00:26:19,826 --> 00:26:21,176
So, let's restore the car state


782
00:26:21,176 --> 00:26:24,806
back to being locked and run


783
00:26:24,806 --> 00:26:25,146
this.


784
00:26:26,466 --> 00:26:28,066
I'm using the same request as


785
00:26:28,066 --> 00:26:29,526
earlier, which is unlock my car.


786
00:26:44,186 --> 00:26:46,366
So, you notice during the Siri


787
00:26:46,366 --> 00:26:48,176
request a prompt comes up.


788
00:26:48,886 --> 00:26:50,296
If the simulator was configured


789
00:26:50,296 --> 00:26:51,526
to do a Touch ID, it would have


790
00:26:51,526 --> 00:26:52,556
shown a Touch ID prompt.


791
00:26:53,406 --> 00:26:54,626
In this case, I configured it to


792
00:26:54,626 --> 00:26:56,756
do device passcode prompt.


793
00:26:56,976 --> 00:27:00,076
So, let me enter my super secure


794
00:27:00,076 --> 00:27:00,916
password.


795
00:27:00,916 --> 00:27:01,876
Please look away.


796
00:27:05,696 --> 00:27:07,026
And once I've entered the


797
00:27:07,026 --> 00:27:09,796
password, the request went


798
00:27:09,796 --> 00:27:10,076
through.


799
00:27:10,756 --> 00:27:12,036
Let us confirm that it actually


800
00:27:12,036 --> 00:27:12,916
went through by launching the


801
00:27:12,916 --> 00:27:12,983
app.


802
00:27:15,096 --> 00:27:16,676
Yep. The car was unlocked.


803
00:27:17,516 --> 00:27:25,656
[ Applause ]


804
00:27:26,156 --> 00:27:28,106
So, with a few lines of code, we


805
00:27:28,106 --> 00:27:29,496
were able to add a local


806
00:27:29,496 --> 00:27:31,736
authentication prompt during a


807
00:27:31,736 --> 00:27:34,416
Siri request.


808
00:27:34,506 --> 00:27:35,836
Using the local authentication


809
00:27:35,836 --> 00:27:38,496
API allows you to do multiple


810
00:27:38,496 --> 00:27:39,686
forms of authentication.


811
00:27:40,496 --> 00:27:41,986
Touch ID, if supported and


812
00:27:41,986 --> 00:27:44,316
configured, or a device passcode


813
00:27:44,796 --> 00:27:45,276
if not.


814
00:27:46,896 --> 00:27:48,396
The place where you call this


815
00:27:48,396 --> 00:27:50,806
local authentication API is in


816
00:27:50,806 --> 00:27:52,296
the handle method of your intent


817
00:27:52,296 --> 00:27:53,956
handler before calling the


818
00:27:53,956 --> 00:27:54,646
completion block.


819
00:27:56,696 --> 00:27:58,136
And because the local


820
00:27:58,136 --> 00:27:59,636
authentication framework is part


821
00:27:59,636 --> 00:28:01,526
of the system, Siri knows to


822
00:28:01,526 --> 00:28:04,436
coordinate with it so that if


823
00:28:04,436 --> 00:28:07,266
the user has made a request over


824
00:28:07,266 --> 00:28:10,536
Hey Siri, then the request waits


825
00:28:10,536 --> 00:28:12,456
for the user for a prompt to be


826
00:28:12,456 --> 00:28:16,276
responded to.


827
00:28:16,506 --> 00:28:17,786
To learn more about the local


828
00:28:17,786 --> 00:28:19,696
authentication API, we refer you


829
00:28:19,696 --> 00:28:24,516
to this talk from 2014.


830
00:28:24,636 --> 00:28:26,016
Some of you might be working on


831
00:28:26,016 --> 00:28:28,666
apps which require a payment to


832
00:28:28,666 --> 00:28:30,516
be completed before a Siri


833
00:28:30,516 --> 00:28:31,956
request can be satisfied.


834
00:28:34,996 --> 00:28:37,666
In this example, the user wants


835
00:28:37,666 --> 00:28:39,036
to book a RainbowCar on


836
00:28:39,036 --> 00:28:42,556
UnicornRides and you need a


837
00:28:42,556 --> 00:28:44,286
payment to be made from the user


838
00:28:44,376 --> 00:28:45,596
before you can accept this


839
00:28:45,596 --> 00:28:46,146
request.


840
00:28:47,016 --> 00:28:48,856
We recommend you use the secure


841
00:28:48,856 --> 00:28:51,736
Apple Pay API for handling


842
00:28:51,736 --> 00:28:53,436
payment transactions during your


843
00:28:53,436 --> 00:28:54,236
Siri request.


844
00:28:54,976 --> 00:28:56,696
Using the Apply Pay API gives


845
00:28:56,696 --> 00:28:58,666
you the same advantages as using


846
00:28:58,666 --> 00:28:59,906
the local authentication API,


847
00:29:00,376 --> 00:29:03,216
which is you get coordination


848
00:29:03,216 --> 00:29:05,576
with Siri and the place where


849
00:29:05,576 --> 00:29:06,916
you could call this API is in


850
00:29:06,916 --> 00:29:08,306
the same place that is in the


851
00:29:08,306 --> 00:29:09,866
handle method before you call


852
00:29:09,866 --> 00:29:10,626
the completion block.


853
00:29:14,596 --> 00:29:16,036
Now let's talk about teaching


854
00:29:16,036 --> 00:29:17,366
Siri new words.


855
00:29:21,276 --> 00:29:23,126
Let's take this example of an


856
00:29:23,256 --> 00:29:25,636
app called UnicornPay which


857
00:29:25,636 --> 00:29:28,346
allows the user to query account


858
00:29:28,346 --> 00:29:30,276
balances on their accounts.


859
00:29:32,456 --> 00:29:34,316
This-- an app like this might


860
00:29:34,316 --> 00:29:36,626
also allow users to give names


861
00:29:36,676 --> 00:29:38,296
to accounts in the app.


862
00:29:38,576 --> 00:29:39,836
Now, these names are user


863
00:29:39,836 --> 00:29:42,656
configured, so they need not be


864
00:29:42,656 --> 00:29:44,016
real English words.


865
00:29:44,566 --> 00:29:46,016
In this example, we have an


866
00:29:46,016 --> 00:29:48,446
account called NestEgg, which


867
00:29:48,446 --> 00:29:50,036
would have been a word, except


868
00:29:50,036 --> 00:29:50,986
there is no space.


869
00:29:51,426 --> 00:29:53,066
So, it's made of two English


870
00:29:53,066 --> 00:29:55,346
words, which, without help, Siri


871
00:29:55,346 --> 00:29:56,696
might not be able to recognize.


872
00:29:58,836 --> 00:30:00,666
When we introduced SiriKit last


873
00:30:00,666 --> 00:30:03,136
year, we talked about some


874
00:30:03,136 --> 00:30:05,946
mechanisms that will allow you


875
00:30:05,946 --> 00:30:07,926
to help Siri understand words


876
00:30:07,926 --> 00:30:08,486
like these.


877
00:30:09,186 --> 00:30:11,066
These words are not unique to an


878
00:30:11,656 --> 00:30:12,576
app, but are unique to a


879
00:30:12,576 --> 00:30:16,706
particular user of that app.


880
00:30:16,706 --> 00:30:19,076
Examples of these are names of


881
00:30:19,076 --> 00:30:21,196
photo albums, names of workouts,


882
00:30:21,196 --> 00:30:21,826
and so on.


883
00:30:25,656 --> 00:30:27,536
The mechanism that we recommend


884
00:30:27,696 --> 00:30:29,706
you use to teach Siri these


885
00:30:29,706 --> 00:30:32,896
words is the INVocabulary API.


886
00:30:35,796 --> 00:30:39,776
To get a refresher about custom


887
00:30:39,776 --> 00:30:42,076
vocabulary introduction, we


888
00:30:42,076 --> 00:30:43,186
refer you to these talks from


889
00:30:43,186 --> 00:30:44,376
last year when we introduced


890
00:30:44,376 --> 00:30:46,826
SiriKit, but today let's dive


891
00:30:46,826 --> 00:30:49,046
deeper into the INVocabulary


892
00:30:49,636 --> 00:30:49,736
API.


893
00:30:50,476 --> 00:30:51,996
The API is pretty simple.


894
00:30:52,206 --> 00:30:54,496
It has one method which takes an


895
00:30:54,606 --> 00:30:57,956
NSOrderedSet of vocabulary


896
00:30:57,956 --> 00:31:01,266
strings and this set is meant


897
00:31:01,266 --> 00:31:04,226
for a particular vocabulary item


898
00:31:04,226 --> 00:31:04,476
type.


899
00:31:04,476 --> 00:31:06,296
For example, a photo album name


900
00:31:06,496 --> 00:31:07,286
or a workout name.


901
00:31:07,886 --> 00:31:10,376
Note that this is an ordered


902
00:31:10,376 --> 00:31:12,686
set, which means that Siri gives


903
00:31:12,746 --> 00:31:15,376
preference to the words towards


904
00:31:15,416 --> 00:31:18,186
the beginning of the set.


905
00:31:18,396 --> 00:31:21,076
But also note that these are


906
00:31:21,076 --> 00:31:22,206
strings that you're teaching


907
00:31:22,206 --> 00:31:22,536
Siri.


908
00:31:22,636 --> 00:31:24,206
Plain strings with no context


909
00:31:24,206 --> 00:31:24,636
around them.


910
00:31:25,996 --> 00:31:27,466
That might have some


911
00:31:27,466 --> 00:31:28,066
limitations.


912
00:31:29,076 --> 00:31:30,806
Let us see what those


913
00:31:30,806 --> 00:31:33,326
limitations are by diving deeper


914
00:31:33,326 --> 00:31:35,066
into how this would actually


915
00:31:35,776 --> 00:31:35,866
work.


916
00:31:37,056 --> 00:31:38,666
Here we have an application


917
00:31:39,056 --> 00:31:41,846
where in its private store has


918
00:31:41,976 --> 00:31:44,406
some accounts which are named by


919
00:31:44,406 --> 00:31:44,856
the user.


920
00:31:45,696 --> 00:31:47,506
To tell Siri about these


921
00:31:47,506 --> 00:31:49,946
accounts, the app would use the


922
00:31:49,946 --> 00:31:53,216
INVocabulary API and send those


923
00:31:53,216 --> 00:31:56,056
strings using the API which we


924
00:31:56,056 --> 00:31:57,076
just saw.


925
00:31:57,936 --> 00:31:59,936
With this knowledge, now Siri is


926
00:31:59,936 --> 00:32:02,246
aware of these new words and the


927
00:32:02,246 --> 00:32:03,636
next time the user makes a


928
00:32:03,636 --> 00:32:05,686
request that uses one of these


929
00:32:05,686 --> 00:32:08,876
words, Siri is capable of


930
00:32:08,876 --> 00:32:10,316
looking up the knowledge that


931
00:32:10,316 --> 00:32:12,386
the app has given it and


932
00:32:13,216 --> 00:32:14,896
identifying candidates in the


933
00:32:14,896 --> 00:32:18,426
user's input that match a custom


934
00:32:18,426 --> 00:32:21,586
word like this and recognize it


935
00:32:21,586 --> 00:32:22,836
correctly as the user would


936
00:32:22,836 --> 00:32:23,596
expect to see.


937
00:32:24,526 --> 00:32:25,686
Now, once this word has been


938
00:32:25,686 --> 00:32:28,006
recognized, Siri will be able to


939
00:32:28,006 --> 00:32:29,026
give this word to the


940
00:32:29,026 --> 00:32:31,216
application's intents extension


941
00:32:31,556 --> 00:32:33,996
and expect it to use that word


942
00:32:34,276 --> 00:32:35,576
to look up the corresponding


943
00:32:35,576 --> 00:32:36,576
object in the store.


944
00:32:37,696 --> 00:32:39,216
But note that this is just a


945
00:32:39,216 --> 00:32:41,046
plain string with no context


946
00:32:41,046 --> 00:32:41,546
around it.


947
00:32:42,126 --> 00:32:44,156
So, your application might not


948
00:32:44,156 --> 00:32:47,406
have enough information to look


949
00:32:47,406 --> 00:32:48,976
it up unambiguously.


950
00:32:49,236 --> 00:32:52,296
It might have to-- it might have


951
00:32:52,296 --> 00:32:55,266
to do fuzzy match, it might not


952
00:32:55,266 --> 00:32:58,106
be an index based on the string


953
00:32:58,106 --> 00:32:59,846
in your application store.


954
00:33:00,426 --> 00:33:02,126
So, this is not an ideal


955
00:33:02,126 --> 00:33:02,776
situation.


956
00:33:03,496 --> 00:33:05,766
In iOS 11, we thought we could


957
00:33:05,766 --> 00:33:08,776
make this better.


958
00:33:08,946 --> 00:33:11,266
We added this new API which


959
00:33:11,266 --> 00:33:13,856
allows you to send Siri


960
00:33:14,236 --> 00:33:17,836
objects-- any objects-- as long


961
00:33:17,836 --> 00:33:19,526
as they conform to an


962
00:33:19,626 --> 00:33:20,876
INSpeakable protocol.


963
00:33:22,576 --> 00:33:25,276
Again, these objects have to be


964
00:33:25,316 --> 00:33:27,056
in an ordered set which follow


965
00:33:27,056 --> 00:33:28,696
the same rules as the strings in


966
00:33:28,696 --> 00:33:31,316
the older API and they are meant


967
00:33:31,366 --> 00:33:34,006
for a particular parameter type.


968
00:33:34,706 --> 00:33:37,416
Let's take a deeper look at what


969
00:33:37,416 --> 00:33:38,296
this protocol is.


970
00:33:39,896 --> 00:33:42,976
The INSpeakable protocol is a


971
00:33:43,206 --> 00:33:45,296
detailed description of the


972
00:33:45,296 --> 00:33:46,636
vocabulary item that you are


973
00:33:46,636 --> 00:33:47,396
teaching Siri.


974
00:33:49,956 --> 00:33:52,696
The main parts of it-- the main


975
00:33:52,696 --> 00:33:54,286
property on it is the actual


976
00:33:54,286 --> 00:33:55,566
word that you're teaching Siri.


977
00:33:56,616 --> 00:33:57,826
In this case, it would be the


978
00:33:57,826 --> 00:33:59,446
word NestEgg without a space in


979
00:33:59,446 --> 00:34:01,596
it or some other creative


980
00:34:01,596 --> 00:34:04,506
misspelling of a workout name or


981
00:34:04,506 --> 00:34:05,956
it could even be a word which


982
00:34:05,956 --> 00:34:08,005
has mixed in numbers or special


983
00:34:08,005 --> 00:34:08,646
characters.


984
00:34:09,196 --> 00:34:12,676
You can also teach Siri-- you


985
00:34:13,896 --> 00:34:16,436
can also give Siri hints about


986
00:34:16,696 --> 00:34:18,446
how to recognize the words that


987
00:34:18,446 --> 00:34:19,076
you are teaching it.


988
00:34:19,936 --> 00:34:22,346
In this case, they are spelled


989
00:34:23,056 --> 00:34:24,775
in a sounds-like pattern, which


990
00:34:24,926 --> 00:34:26,116
is the same pattern you would


991
00:34:26,116 --> 00:34:27,755
use for configuring phonetic


992
00:34:27,755 --> 00:34:32,306
names in your contacts app.


993
00:34:32,565 --> 00:34:34,516
With each INSpeakable object,


994
00:34:35,116 --> 00:34:36,166
you can also provide a


995
00:34:36,166 --> 00:34:38,525
vocabulary identifier which can


996
00:34:38,525 --> 00:34:40,396
uniquely identify this object in


997
00:34:40,396 --> 00:34:41,136
your app store.


998
00:34:42,166 --> 00:34:43,755
We-- it's a plain string, so we


999
00:34:43,755 --> 00:34:45,815
don't restrict what value you


1000
00:34:45,815 --> 00:34:47,926
can give this identifier, but


1001
00:34:48,226 --> 00:34:50,956
using a unique grid or something


1002
00:34:50,956 --> 00:34:52,795
like that will help you match


1003
00:34:53,255 --> 00:34:55,275
this object unambiguously in


1004
00:34:55,275 --> 00:34:57,356
your app's data store.


1005
00:34:58,856 --> 00:35:01,446
Finally, the INSpeakable


1006
00:35:01,446 --> 00:35:04,356
protocol also allows Siri to


1007
00:35:05,076 --> 00:35:08,276
provide alternative matches for


1008
00:35:08,276 --> 00:35:10,486
words which the-- which Siri


1009
00:35:10,486 --> 00:35:12,166
thinks the user might mean.


1010
00:35:12,786 --> 00:35:14,606
This is analogous to the


1011
00:35:14,606 --> 00:35:16,836
siriMatches property that my


1012
00:35:16,836 --> 00:35:18,556
college Angel talked about


1013
00:35:18,556 --> 00:35:21,606
earlier where an INPerson object


1014
00:35:21,606 --> 00:35:23,176
which actually does conform to


1015
00:35:23,176 --> 00:35:26,516
the INSpeakable protocol can


1016
00:35:26,516 --> 00:35:28,636
have candidate alternative


1017
00:35:28,636 --> 00:35:30,996
matches exposed as siriMatches.


1018
00:35:32,306 --> 00:35:34,776
With this new protocol and API,


1019
00:35:34,876 --> 00:35:36,336
let us take a look again at the


1020
00:35:36,336 --> 00:35:38,416
same example and see how things


1021
00:35:38,736 --> 00:35:39,376
have changed.


1022
00:35:40,046 --> 00:35:42,536
So, the application wants to


1023
00:35:42,536 --> 00:35:44,776
tell Siri about the same two


1024
00:35:44,776 --> 00:35:45,886
account objects with the


1025
00:35:45,886 --> 00:35:46,846
customized names.


1026
00:35:47,916 --> 00:35:50,086
It would call the INVocabulary


1027
00:35:50,206 --> 00:35:51,506
API, but this time it would give


1028
00:35:51,506 --> 00:35:54,326
it the objects themselves and


1029
00:35:54,326 --> 00:35:57,616
Siri will use those INSpeakable


1030
00:35:57,616 --> 00:36:00,756
parts of these objects and when


1031
00:36:02,576 --> 00:36:06,286
the user says a request that has


1032
00:36:06,286 --> 00:36:08,776
a word which matches this new


1033
00:36:08,776 --> 00:36:10,966
object that Siri has learned


1034
00:36:10,966 --> 00:36:14,376
about, Siri will recognize the


1035
00:36:14,376 --> 00:36:19,036
pattern and replace it with the


1036
00:36:19,036 --> 00:36:22,756
expected spelling and when


1037
00:36:22,896 --> 00:36:24,616
communicating back to the app's


1038
00:36:24,616 --> 00:36:26,556
intent extension, instead of


1039
00:36:26,556 --> 00:36:28,836
giving it a plain string without


1040
00:36:28,836 --> 00:36:30,926
any context, Siri will now give


1041
00:36:30,926 --> 00:36:32,836
it the INSpeakable object.


1042
00:36:34,456 --> 00:36:36,586
Because this INSpeakable object


1043
00:36:36,846 --> 00:36:39,326
has the vocabulary identifier,


1044
00:36:39,456 --> 00:36:42,316
which, as I said earlier, could


1045
00:36:42,316 --> 00:36:44,536
be a unique ID for that object.


1046
00:36:45,096 --> 00:36:47,356
The lookup on the app side for


1047
00:36:47,356 --> 00:36:49,106
this object becomes easier.


1048
00:36:53,036 --> 00:36:54,986
So, we hope that with this new


1049
00:36:54,986 --> 00:36:57,736
API requests like this where the


1050
00:36:57,736 --> 00:37:02,306
user is able to issue a request


1051
00:37:02,306 --> 00:37:05,656
with a custom vocabulary word to


1052
00:37:05,656 --> 00:37:07,916
Siri, your app can handle them


1053
00:37:07,916 --> 00:37:09,586
without worrying about doing


1054
00:37:09,586 --> 00:37:11,046
fuzzy matching against your app


1055
00:37:11,046 --> 00:37:11,366
store.


1056
00:37:15,286 --> 00:37:18,206
The other example where you


1057
00:37:18,206 --> 00:37:19,446
might want to teach Siri new


1058
00:37:19,446 --> 00:37:23,196
words is when there's a word


1059
00:37:23,196 --> 00:37:25,166
which is unique to your app, but


1060
00:37:25,446 --> 00:37:27,376
common to all users of your app.


1061
00:37:27,526 --> 00:37:29,556
An example of this would be a


1062
00:37:29,556 --> 00:37:32,486
ride-booking app which has a


1063
00:37:32,836 --> 00:37:35,906
branded or a customized vehicle


1064
00:37:35,906 --> 00:37:38,826
name or a workout app which


1065
00:37:38,876 --> 00:37:43,946
might have a non-English workout


1066
00:37:43,946 --> 00:37:44,186
name.


1067
00:37:47,336 --> 00:37:48,996
In order to teach Siri words


1068
00:37:48,996 --> 00:37:51,186
like this, we recommend that you


1069
00:37:51,186 --> 00:37:52,006
use the


1070
00:37:52,006 --> 00:37:57,866
AppIntentVocabulary.plist.


1071
00:37:58,026 --> 00:38:00,036
Once you provide a plist to


1072
00:38:00,576 --> 00:38:02,736
Siri, in examples like this


1073
00:38:02,736 --> 00:38:05,106
where a ride-booking app has


1074
00:38:05,266 --> 00:38:07,486
customized its ride names--


1075
00:38:08,566 --> 00:38:09,826
which are not real words in this


1076
00:38:09,826 --> 00:38:10,796
case, as you can see--


1077
00:38:11,196 --> 00:38:13,016
RainbowCar without a space is


1078
00:38:13,016 --> 00:38:16,056
not a real word.


1079
00:38:16,256 --> 00:38:19,156
Users can now say the words and


1080
00:38:20,156 --> 00:38:21,886
expect Siri to recognize them.


1081
00:38:25,236 --> 00:38:27,336
The way you would register words


1082
00:38:27,336 --> 00:38:29,426
like this with Siri is to use


1083
00:38:29,426 --> 00:38:30,996
the custom vocabulary plist


1084
00:38:31,626 --> 00:38:33,776
where the main pieces are the


1085
00:38:33,776 --> 00:38:35,486
intent parameter for which you


1086
00:38:35,486 --> 00:38:36,376
are providing the custom


1087
00:38:36,376 --> 00:38:37,206
vocabulary item.


1088
00:38:38,086 --> 00:38:40,406
In this case, this parameter


1089
00:38:40,626 --> 00:38:42,736
would itself be of type


1090
00:38:42,736 --> 00:38:47,126
INSpeakable and inside that


1091
00:38:47,126 --> 00:38:51,466
parameter the subfields of the


1092
00:38:51,756 --> 00:38:53,626
INSpeakable object can be


1093
00:38:53,626 --> 00:38:54,246
specified.


1094
00:38:55,336 --> 00:38:56,666
For example, you can give a


1095
00:38:56,666 --> 00:38:58,756
vocabulary identifier for the


1096
00:38:58,756 --> 00:38:59,916
SparkleCar which you are


1097
00:38:59,916 --> 00:39:03,216
teaching Siri about, and the


1098
00:39:03,446 --> 00:39:04,976
actual name that you're teaching


1099
00:39:04,976 --> 00:39:08,046
Siri as the spoken phrase, and


1100
00:39:08,046 --> 00:39:09,876
the pronunciation hint, similar


1101
00:39:10,006 --> 00:39:11,686
to the one we saw in the earlier


1102
00:39:11,686 --> 00:39:13,156
case for user-specific


1103
00:39:13,156 --> 00:39:13,796
vocabulary.


1104
00:39:15,336 --> 00:39:17,436
Having done this, Siri will now


1105
00:39:17,436 --> 00:39:19,106
be able to understand requests


1106
00:39:19,106 --> 00:39:20,746
like this where the user is


1107
00:39:20,746 --> 00:39:23,136
using the customized vocabulary


1108
00:39:23,136 --> 00:39:25,576
word which are specific to your


1109
00:39:26,426 --> 00:39:26,506
app.


1110
00:39:31,496 --> 00:39:33,516
Now let's talk about how you can


1111
00:39:33,686 --> 00:39:35,296
test the quality of SiriKit


1112
00:39:35,296 --> 00:39:37,676
integration with UI testing.


1113
00:39:39,696 --> 00:39:41,676
We introduced UI testing a


1114
00:39:41,676 --> 00:39:43,386
couple of years ago as a


1115
00:39:43,386 --> 00:39:45,006
mechanism for you to write UI


1116
00:39:45,006 --> 00:39:46,656
tests-- automation tests--


1117
00:39:46,656 --> 00:39:48,686
inside your project in Xcode.


1118
00:39:49,246 --> 00:39:52,166
Now that Siri is supported in


1119
00:39:52,166 --> 00:39:54,126
the simulator, you can run these


1120
00:39:54,126 --> 00:39:55,846
tests on any hardware


1121
00:39:55,846 --> 00:39:57,956
configuration without actually


1122
00:39:57,956 --> 00:39:59,966
requiring to have the hardware


1123
00:39:59,966 --> 00:40:00,336
with you.


1124
00:40:03,216 --> 00:40:05,196
These UI tests are automatable,


1125
00:40:05,346 --> 00:40:06,936
so you can keep them running


1126
00:40:07,196 --> 00:40:09,836
automatedly in your CI pipelines


1127
00:40:10,216 --> 00:40:11,976
or custom integration pipelines


1128
00:40:12,676 --> 00:40:14,826
to make sure that code changes


1129
00:40:14,826 --> 00:40:16,076
are not breaking existing


1130
00:40:16,076 --> 00:40:16,766
functionality.


1131
00:40:17,226 --> 00:40:20,946
Using these UI tests also gives


1132
00:40:20,946 --> 00:40:22,586
you a certain degree of language


1133
00:40:22,586 --> 00:40:24,796
independence, that way you can


1134
00:40:24,796 --> 00:40:26,776
test Siri integration in a


1135
00:40:26,776 --> 00:40:28,556
language which is not the


1136
00:40:28,556 --> 00:40:29,916
primary language of your


1137
00:40:29,916 --> 00:40:30,546
development.


1138
00:40:30,956 --> 00:40:32,456
We will see an example of this


1139
00:40:32,456 --> 00:40:32,856
shortly.


1140
00:40:35,376 --> 00:40:37,216
For further info about UI


1141
00:40:37,216 --> 00:40:38,836
testing, we refer you to these


1142
00:40:38,836 --> 00:40:40,936
docs about when UI testing was


1143
00:40:40,936 --> 00:40:47,116
introduced in 2015.


1144
00:40:47,116 --> 00:40:49,306
To enable UI testing with Siri,


1145
00:40:49,566 --> 00:40:51,956
the main API that is new to iOS


1146
00:40:51,956 --> 00:40:55,446
11 is a way to refer to the Siri


1147
00:40:55,446 --> 00:41:00,546
service on the device.


1148
00:41:00,686 --> 00:41:02,346
Using this reference, you can


1149
00:41:02,346 --> 00:41:05,396
feed in Siri request strings


1150
00:41:05,556 --> 00:41:07,416
directly into the Siri service


1151
00:41:07,856 --> 00:41:08,416
in code.


1152
00:41:08,996 --> 00:41:10,226
And because this is done in


1153
00:41:10,226 --> 00:41:12,636
code, you no longer need to do a


1154
00:41:12,636 --> 00:41:14,556
manual test of your Siri


1155
00:41:14,556 --> 00:41:15,166
integration.


1156
00:41:15,566 --> 00:41:17,456
Let us see a demo of this.


1157
00:41:22,676 --> 00:41:24,136
So, I'll take you back to the


1158
00:41:24,136 --> 00:41:25,836
same app that we saw earlier


1159
00:41:26,226 --> 00:41:27,906
where we added an authentication


1160
00:41:27,906 --> 00:41:30,116
prompt while unlocking a car.


1161
00:41:31,526 --> 00:41:33,916
So, it's the same app where


1162
00:41:34,106 --> 00:41:36,106
there's an image showing the


1163
00:41:36,106 --> 00:41:38,616
locked state of the car and


1164
00:41:40,196 --> 00:41:42,576
using Siri I'm able to test


1165
00:41:42,686 --> 00:41:45,926
whether I'm able to lock and


1166
00:41:45,926 --> 00:41:46,546
unlock the car.


1167
00:41:47,016 --> 00:41:48,536
So, if I want to test my Siri


1168
00:41:48,536 --> 00:41:50,696
integration in this app, how


1169
00:41:50,696 --> 00:41:52,356
would I do it as a manual test?


1170
00:41:52,916 --> 00:41:57,046
I would first launch the app,


1171
00:41:57,306 --> 00:41:58,756
set the state to the state I


1172
00:41:58,756 --> 00:41:59,606
expect it to be.


1173
00:42:00,206 --> 00:42:01,596
Let's say I want to test whether


1174
00:42:01,926 --> 00:42:04,136
my lock requests are working, so


1175
00:42:04,136 --> 00:42:05,466
I would want to start it off in


1176
00:42:05,466 --> 00:42:06,496
an unlocked state.


1177
00:42:08,136 --> 00:42:10,236
Then I would want to issue a


1178
00:42:10,796 --> 00:42:12,686
request to lock the car.


1179
00:42:14,496 --> 00:42:16,216
So, let's issue that request.


1180
00:42:31,486 --> 00:42:34,816
OK. And then I would need to


1181
00:42:34,816 --> 00:42:36,666
verify that the request was


1182
00:42:36,666 --> 00:42:38,056
actually handled successfully.


1183
00:42:38,426 --> 00:42:40,116
And in order to do that, I would


1184
00:42:40,116 --> 00:42:42,236
need to launch the app and check


1185
00:42:42,236 --> 00:42:44,276
the state-- visually inspect the


1186
00:42:44,276 --> 00:42:45,046
state of the app.


1187
00:42:45,746 --> 00:42:47,426
So, it looks like when I asked


1188
00:42:47,426 --> 00:42:49,306
Siri to lock the car, the car


1189
00:42:49,306 --> 00:42:50,376
was locked, so the test


1190
00:42:50,376 --> 00:42:50,866
succeeds.


1191
00:42:51,286 --> 00:42:52,536
This was the manual test.


1192
00:42:53,376 --> 00:42:54,786
How would I automate a test like


1193
00:42:54,786 --> 00:42:55,116
this?


1194
00:42:55,406 --> 00:42:59,166
Using the UI automation API, I


1195
00:42:59,166 --> 00:43:01,796
can create a UI tests class in


1196
00:43:01,796 --> 00:43:03,936
my project using-- by adding it


1197
00:43:03,976 --> 00:43:06,746
to my UI testing bundle and


1198
00:43:07,966 --> 00:43:11,166
create a test like this.


1199
00:43:11,356 --> 00:43:12,736
So, a test is basically a


1200
00:43:12,736 --> 00:43:15,156
function with these four steps.


1201
00:43:15,616 --> 00:43:17,076
First, I need to set up the


1202
00:43:17,076 --> 00:43:19,066
test, then I need to invoke


1203
00:43:19,066 --> 00:43:21,056
Siri, then wait for Siri's


1204
00:43:21,056 --> 00:43:23,446
response, and then confirm that


1205
00:43:23,446 --> 00:43:25,706
Siri's request actually went


1206
00:43:25,706 --> 00:43:26,866
through and that the app


1207
00:43:26,866 --> 00:43:28,186
actually handled the request.


1208
00:43:28,856 --> 00:43:31,216
So, let's start by setting up a


1209
00:43:32,416 --> 00:43:32,586
test.


1210
00:43:32,766 --> 00:43:34,526
So, in order to set up a test,


1211
00:43:34,666 --> 00:43:36,886
I've created a helper method to


1212
00:43:37,086 --> 00:43:38,736
set the car lock status to


1213
00:43:38,736 --> 00:43:41,176
false, that is to unlock the


1214
00:43:41,176 --> 00:43:41,446
car.


1215
00:43:41,996 --> 00:43:43,796
So, before running the locking


1216
00:43:43,796 --> 00:43:45,536
test, I'm unlocking the car.


1217
00:43:46,426 --> 00:43:49,456
Now, this helper method is-- I


1218
00:43:49,456 --> 00:43:51,046
configured it by using the UI


1219
00:43:51,046 --> 00:43:53,386
recording mechanism, which if


1220
00:43:53,386 --> 00:43:54,796
you refer to the UI testing


1221
00:43:54,796 --> 00:43:57,196
framework talk, then you can


1222
00:43:57,196 --> 00:43:58,656
learn how to do the UI recording


1223
00:43:58,926 --> 00:44:01,906
for generating the test like


1224
00:44:03,056 --> 00:44:03,246
this.


1225
00:44:03,366 --> 00:44:05,796
Then for invoking Siri, I'm


1226
00:44:05,796 --> 00:44:07,576
going to use the API which I


1227
00:44:07,576 --> 00:44:08,856
talked about, the new API.


1228
00:44:10,226 --> 00:44:12,926
So, I'm feeding in the request


1229
00:44:13,386 --> 00:44:14,156
lock my car.


1230
00:44:14,196 --> 00:44:16,776
And then, finally, I'm going


1231
00:44:16,776 --> 00:44:18,486
to-- then next I'm going to wait


1232
00:44:18,486 --> 00:44:19,726
for Siri's response.


1233
00:44:20,566 --> 00:44:21,786
In order to wait for Siri's


1234
00:44:21,786 --> 00:44:23,216
response, I'm using this API


1235
00:44:23,346 --> 00:44:26,796
called wait and this wait


1236
00:44:26,876 --> 00:44:28,306
parameter-- this wait method


1237
00:44:28,486 --> 00:44:29,456
takes two parameters.


1238
00:44:29,866 --> 00:44:32,166
One is an expectation and the


1239
00:44:32,166 --> 00:44:33,096
other is a time out.


1240
00:44:33,806 --> 00:44:35,726
The expectation I'm waiting to


1241
00:44:35,726 --> 00:44:38,646
be fulfilled is a predicate


1242
00:44:38,646 --> 00:44:40,926
expectation and I'm using the


1243
00:44:40,926 --> 00:44:43,846
predicate which basically sleeps


1244
00:44:43,846 --> 00:44:44,816
for 5 seconds.


1245
00:44:45,176 --> 00:44:46,086
It's nothing fancy.


1246
00:44:46,496 --> 00:44:48,076
I think it's enough time for


1247
00:44:48,076 --> 00:44:50,286
Siri to respond to this request.


1248
00:44:52,656 --> 00:44:55,606
So, it waits for 5 seconds and


1249
00:44:56,016 --> 00:44:57,646
I'll wait for that wait for 10


1250
00:44:57,646 --> 00:44:58,706
minute-- for 10 seconds.


1251
00:44:59,076 --> 00:45:02,426
So, that was the waiting for


1252
00:45:02,426 --> 00:45:04,026
Siri's response piece.


1253
00:45:05,496 --> 00:45:07,726
Next, I need to confirm that the


1254
00:45:07,726 --> 00:45:09,356
state of the app has actually


1255
00:45:09,356 --> 00:45:09,916
changed.


1256
00:45:13,056 --> 00:45:15,496
In order to do that, I have


1257
00:45:15,496 --> 00:45:17,756
tagged one of the UI elements in


1258
00:45:17,756 --> 00:45:19,726
my app with an accessibility tag


1259
00:45:20,316 --> 00:45:22,526
which I am now using to extract


1260
00:45:22,526 --> 00:45:25,946
that view and then comparing the


1261
00:45:25,946 --> 00:45:28,026
value of the accessibility label


1262
00:45:28,026 --> 00:45:30,026
on that view to see whether it


1263
00:45:30,026 --> 00:45:34,616
matches what I expect.


1264
00:45:34,726 --> 00:45:37,436
So, now that we've written--


1265
00:45:37,496 --> 00:45:38,876
automated the test that we just


1266
00:45:38,876 --> 00:45:41,196
saw manually done, let us run


1267
00:45:41,196 --> 00:45:43,276
this automated test and see if


1268
00:45:43,276 --> 00:45:45,766
it does what we expect.


1269
00:45:52,336 --> 00:45:53,936
Because this is an automated


1270
00:45:53,936 --> 00:45:57,086
test, it frees me up to do real


1271
00:45:57,086 --> 00:46:00,716
development work and not spend


1272
00:46:00,716 --> 00:46:02,876
my time testing something which


1273
00:46:02,876 --> 00:46:04,786
I already know how it's supposed


1274
00:46:04,786 --> 00:46:05,166
to work.


1275
00:46:08,356 --> 00:46:10,296
So, you notice that it's waiting


1276
00:46:10,296 --> 00:46:12,176
for Siri's response for 5


1277
00:46:12,176 --> 00:46:14,706
seconds and then, finally, it


1278
00:46:14,706 --> 00:46:16,676
launches the app and checks


1279
00:46:16,876 --> 00:46:18,166
whether the state matches what


1280
00:46:18,166 --> 00:46:18,876
it expects.


1281
00:46:21,516 --> 00:46:27,276
[ Applause ]


1282
00:46:27,776 --> 00:46:30,006
And these indicators of


1283
00:46:30,006 --> 00:46:32,886
happiness tell me that the test


1284
00:46:32,886 --> 00:46:36,316
has actually passed.


1285
00:46:37,636 --> 00:46:39,616
Now, Siri is supported in many


1286
00:46:39,616 --> 00:46:41,406
languages and I am most


1287
00:46:41,406 --> 00:46:43,266
comfortable in English, but I


1288
00:46:43,266 --> 00:46:45,436
might want to test my app's Siri


1289
00:46:45,436 --> 00:46:47,376
integration in Mandarin.


1290
00:46:47,836 --> 00:46:49,596
Now, I don't speak Mandarin, but


1291
00:46:50,366 --> 00:46:54,686
I can look up the utterances for


1292
00:46:57,056 --> 00:47:01,126
this intent on the developer


1293
00:47:01,126 --> 00:47:01,616
website.


1294
00:47:01,616 --> 00:47:03,276
So, the intent I'm looking for


1295
00:47:03,276 --> 00:47:07,876
is INSetCarLockStatusIntent.


1296
00:47:12,046 --> 00:47:13,486
And in the documentation for


1297
00:47:13,486 --> 00:47:17,696
this intent we actually have


1298
00:47:17,696 --> 00:47:21,196
examples of sample utterances in


1299
00:47:21,266 --> 00:47:22,566
all the languages that Siri


1300
00:47:22,566 --> 00:47:23,076
supports.


1301
00:47:24,176 --> 00:47:26,096
So, I am going to take the


1302
00:47:26,096 --> 00:47:28,636
example utterance for Mandarin


1303
00:47:32,076 --> 00:47:36,746
and feed it in here.


1304
00:47:40,196 --> 00:47:41,646
And I'm going to run this test


1305
00:47:42,346 --> 00:47:44,796
on a device which is configured


1306
00:47:45,216 --> 00:47:47,036
to use Siri in Mandarin.


1307
00:47:47,716 --> 00:47:49,276
So, let me first bring up that


1308
00:47:49,276 --> 00:47:50,106
device.


1309
00:48:01,316 --> 00:48:02,916
So, it launches the app, sets


1310
00:48:02,916 --> 00:48:05,026
the initial state, invokes Siri,


1311
00:48:05,026 --> 00:48:06,826
gives it the request, waits for


1312
00:48:06,826 --> 00:48:07,586
a response.


1313
00:48:08,186 --> 00:48:11,136
And then it launches the app


1314
00:48:11,136 --> 00:48:12,736
again and confirms that the


1315
00:48:12,736 --> 00:48:14,276
state matches what it expects.


1316
00:48:15,516 --> 00:48:19,666
[ Applause ]


1317
00:48:20,166 --> 00:48:21,056
Again, happiness.


1318
00:48:21,126 --> 00:48:21,566
Yay!


1319
00:48:29,266 --> 00:48:30,416
So, it was that simple to


1320
00:48:30,416 --> 00:48:32,906
automate my SiriKit integration


1321
00:48:33,066 --> 00:48:33,456
testing.


1322
00:48:34,196 --> 00:48:35,926
So, let's recap what we heard


1323
00:48:35,926 --> 00:48:36,216
today.


1324
00:48:37,566 --> 00:48:39,756
From my colleague Angel, we


1325
00:48:39,756 --> 00:48:41,886
learned how to handle situations


1326
00:48:42,326 --> 00:48:44,166
where users need to be prompted


1327
00:48:44,586 --> 00:48:46,756
about disambiguating between


1328
00:48:47,006 --> 00:48:49,026
contacts with the same name or


1329
00:48:49,026 --> 00:48:50,946
between handles of the-- of a


1330
00:48:50,946 --> 00:48:51,886
particular contact.


1331
00:48:53,246 --> 00:48:55,946
We then saw some ways to


1332
00:48:56,386 --> 00:48:58,606
reauthorize Siri requests using


1333
00:48:58,606 --> 00:49:00,696
the local authentication API.


1334
00:49:01,916 --> 00:49:03,436
Then we saw how we can teach


1335
00:49:03,436 --> 00:49:05,186
Siri words which are specific to


1336
00:49:05,186 --> 00:49:08,386
users or specific to apps, and


1337
00:49:08,386 --> 00:49:10,446
then, finally, we saw some demos


1338
00:49:10,446 --> 00:49:13,046
of how we can do UI testing of


1339
00:49:13,216 --> 00:49:16,016
our SiriKit integration even in


1340
00:49:16,016 --> 00:49:17,576
languages that we are not


1341
00:49:18,156 --> 00:49:20,016
conversant in.


1342
00:49:20,956 --> 00:49:23,066
For more information about the


1343
00:49:23,066 --> 00:49:25,296
sample codes and the APIs that


1344
00:49:25,296 --> 00:49:26,406
we talked about in this talk,


1345
00:49:26,406 --> 00:49:28,586
please refer to this URL.


1346
00:49:28,586 --> 00:49:33,056
And we have some other talks


1347
00:49:34,026 --> 00:49:35,716
which are relevant to your


1348
00:49:35,716 --> 00:49:37,576
SiriKit integration, including


1349
00:49:37,806 --> 00:49:41,066
Apple Pay and CarPlay talks and


1350
00:49:41,596 --> 00:49:43,656
the talks from previous years


1351
00:49:43,656 --> 00:49:45,026
which we referred to in this


1352
00:49:45,026 --> 00:49:45,906
talk are listed here.


1353
00:49:47,186 --> 00:49:49,776
Thank you for coming and we hope


1354
00:49:49,776 --> 00:49:51,086
you have enough information to


1355
00:49:51,226 --> 00:49:53,416
create great SiriKit experiences


1356
00:49:53,416 --> 00:49:54,066
after this talk.


1357
00:49:54,826 --> 00:49:55,486
Thank you everybody.


1358
00:49:56,516 --> 00:50:02,010
[ Applause ]

