1
00:00:07,516 --> 00:00:19,500
[ Music ]


2
00:00:24,516 --> 00:00:28,076
[ Applause ]


3
00:00:28,576 --> 00:00:29,076
>> Good morning.


4
00:00:32,266 --> 00:00:34,996
How many of you have apps
in the App Store or working


5
00:00:35,116 --> 00:00:36,186
on apps that play video?


6
00:00:36,636 --> 00:00:38,846
That's quite a few of you.


7
00:00:38,846 --> 00:00:44,216
Good. Whether for sports, news,
entertainment or education.


8
00:00:44,726 --> 00:00:50,126
What's the most important
part of your video playback?


9
00:00:50,206 --> 00:00:52,956
Is it the Play/Pause control?


10
00:00:52,956 --> 00:00:53,866
The scrubbing?


11
00:00:54,386 --> 00:00:57,506
Maybe the audio and
subtitle settings?


12
00:00:58,236 --> 00:01:01,706
No. Of course not.


13
00:01:02,016 --> 00:01:03,556
It's the video presentation.


14
00:01:04,656 --> 00:01:08,676
So it's important when users
are using your application


15
00:01:08,676 --> 00:01:11,656
and watching your video
that they focus entirely


16
00:01:11,656 --> 00:01:13,366
on your video presentation.


17
00:01:13,646 --> 00:01:16,366
And they aren't distracted
by trying to figure


18
00:01:16,366 --> 00:01:17,756
out your user interface.


19
00:01:18,626 --> 00:01:24,306
That's why it's important
that video playback be easy,


20
00:01:24,536 --> 00:01:28,076
consistent and predictable
for viewers as they move


21
00:01:28,076 --> 00:01:30,366
between apps on their Apple TV.


22
00:01:31,786 --> 00:01:35,386
Video playback on Apple
TV appears simple,


23
00:01:35,386 --> 00:01:36,756
but it's no easy task.


24
00:01:37,066 --> 00:01:39,146
There are many different
tools for user interaction,


25
00:01:40,046 --> 00:01:44,256
including the buttons and touch
surface of the Siri remote,


26
00:01:45,056 --> 00:01:50,876
Siri voice commands, older Apple
TV remotes, the iOS remote app,


27
00:01:51,586 --> 00:01:55,736
Bluetooth keyboards, game
controllers, and of course,


28
00:01:55,736 --> 00:01:57,336
infrared universal remotes.


29
00:01:57,776 --> 00:02:04,386
Wouldn't it be great if you
didn't have to deal with this?


30
00:02:04,826 --> 00:02:06,956
I'm Dan Wright and
today I'll be talking


31
00:02:06,956 --> 00:02:10,586
about how you can accomplish
all this easily with AVKit.


32
00:02:11,316 --> 00:02:13,996
AVKit provides modern playback


33
00:02:13,996 --> 00:02:15,636
with a consistent
user interface.


34
00:02:16,276 --> 00:02:19,666
Let's take a quick look at some
of the features AVKit provides.


35
00:02:20,386 --> 00:02:24,106
Here is AVKit playing a video


36
00:02:24,586 --> 00:02:27,516
with a transport bar visible
showing the elapsed time,


37
00:02:27,516 --> 00:02:29,876
the position in the video
and the time remaining.


38
00:02:31,426 --> 00:02:34,156
Touching the surface of
the remote reveals hints.


39
00:02:35,166 --> 00:02:38,776
And clicking on the edges
will skip forward or back.


40
00:02:39,096 --> 00:02:40,876
Or by holding down
the touch surface,


41
00:02:40,876 --> 00:02:42,876
viewers can fast
forward or rewind.


42
00:02:44,486 --> 00:02:47,836
And when paused,
swiping side to side


43
00:02:48,646 --> 00:02:51,096
on the remote will scrub quickly
through the entire video.


44
00:02:52,886 --> 00:02:55,796
Swiping down reveals info panel,
which includes information


45
00:02:55,796 --> 00:03:00,486
about the video and navigation
markers as well as access


46
00:03:00,486 --> 00:03:03,366
to settings related to
audio and subtitles.


47
00:03:04,576 --> 00:03:08,856
Finally, AVKit supports Siri
voice commands automatically.


48
00:03:08,856 --> 00:03:10,346
And as I go back
to the beginning,


49
00:03:10,806 --> 00:03:12,006
or "What did she say?"


50
00:03:12,006 --> 00:03:14,276
to skip back 30 seconds
and replay


51
00:03:14,276 --> 00:03:16,116
with captions turned
on temporarily.


52
00:03:17,466 --> 00:03:20,276
AVKit uses the modern
media stack,


53
00:03:20,276 --> 00:03:22,756
the same as on iOS and macOS.


54
00:03:24,306 --> 00:03:26,606
AVKit provides the
user experience.


55
00:03:27,756 --> 00:03:31,396
AVFoundation and CoreMedia
provide the core playback tools.


56
00:03:32,416 --> 00:03:38,906
And UIKit or on macOS AppKit
provides interface elements.


57
00:03:40,286 --> 00:03:43,236
Today we're going to
talk about three things.


58
00:03:44,126 --> 00:03:48,116
First, we'll show you how easy
it is to get started with AVKit.


59
00:03:48,736 --> 00:03:50,736
Second, we'll look at several


60
00:03:50,736 --> 00:03:53,036
of the ways you can extend
the playback experience


61
00:03:53,036 --> 00:03:55,156
with features unique to tvOS.


62
00:03:55,806 --> 00:03:58,226
And third, we'll talk
about some best practices.


63
00:03:59,426 --> 00:04:00,306
All right, let's get started.


64
00:04:01,706 --> 00:04:04,216
Let's talk about
AVPlayerViewController.


65
00:04:05,226 --> 00:04:09,586
AVPlayerViewController uses
an AVPlayer, AVPlayerItem


66
00:04:09,586 --> 00:04:12,066
and AVAsset provided
by your application.


67
00:04:12,766 --> 00:04:16,266
The AVAsset represents
the audio visual media.


68
00:04:16,755 --> 00:04:20,386
AVPlayerItem represents the
presentation state of an asset.


69
00:04:21,116 --> 00:04:22,946
The AVPlayer controls playback.


70
00:04:23,346 --> 00:04:26,876
And AVPlayerViewController
sits on top, providing the UI.


71
00:04:28,206 --> 00:04:33,206
Let's look at how you'll
provide your media to AVKit.


72
00:04:33,856 --> 00:04:36,356
There are four steps.


73
00:04:37,066 --> 00:04:39,286
First, create an
asset from the URL.


74
00:04:41,076 --> 00:04:42,816
Second, create a
playerItem of the asset.


75
00:04:44,516 --> 00:04:46,526
Third, create a player
with the playerItem.


76
00:04:47,076 --> 00:04:50,266
And fourth, associate the player
with the playerViewController.


77
00:04:50,806 --> 00:04:55,386
Now, you can simplify
all that to one line just


78
00:04:55,766 --> 00:04:58,506
to create the player directly
from the URL and assign it


79
00:04:58,636 --> 00:05:01,056
to the player property of
the playerViewController.


80
00:05:01,776 --> 00:05:03,376
All right.


81
00:05:03,996 --> 00:05:07,866
Next, let's see how you can
embed an inline player view.


82
00:05:08,936 --> 00:05:11,506
First, you'll set up your
playerViewController.


83
00:05:13,206 --> 00:05:15,756
Next you're going to set the
frame to the inline view.


84
00:05:16,316 --> 00:05:18,346
We're setting the
frame directly here,


85
00:05:18,346 --> 00:05:20,506
but you should use
constraints, of course.


86
00:05:21,786 --> 00:05:25,496
And third, add the view from
the playerViewController


87
00:05:25,496 --> 00:05:26,186
to your view.


88
00:05:26,556 --> 00:05:28,506
And add the playerViewController
itself


89
00:05:28,506 --> 00:05:30,996
as a child view controller
of your view controller.


90
00:05:31,606 --> 00:05:34,076
Now, once you're ready


91
00:05:34,076 --> 00:05:36,026
for interactive full-screen
presentation,


92
00:05:36,026 --> 00:05:38,206
you can just present
the view controller


93
00:05:38,206 --> 00:05:40,416
and it will automatically
animate


94
00:05:40,416 --> 00:05:42,836
from the inline playback
to the full screen.


95
00:05:46,136 --> 00:05:47,096
All right.


96
00:05:47,096 --> 00:05:50,596
Let's talk about extending
the playback experience.


97
00:05:51,996 --> 00:05:56,906
AVKit for tvOS was introduced
in tvOS 9, last fall,


98
00:05:57,246 --> 00:05:59,026
with several enhancements.


99
00:05:59,916 --> 00:06:04,746
Namely, the ability to add
non-interactive overlays.


100
00:06:05,486 --> 00:06:07,106
Restrict playback interaction.


101
00:06:08,126 --> 00:06:10,976
Provide informational metadata.


102
00:06:11,286 --> 00:06:12,356
Navigation markers.


103
00:06:13,306 --> 00:06:15,996
And identify interstitial
content.


104
00:06:17,006 --> 00:06:22,776
With tvOS 10, we will introduce
a couple new enhancements:


105
00:06:23,236 --> 00:06:26,406
The ability to modify
skipping behavior


106
00:06:26,976 --> 00:06:32,066
and presents content proposals.


107
00:06:32,816 --> 00:06:39,046
And now let's talk
about each of these.


108
00:06:39,646 --> 00:06:43,246
Overlays are for logos and
other overlaid graphics.


109
00:06:43,646 --> 00:06:46,946
The playback overlay view
lies above the video,


110
00:06:47,986 --> 00:06:54,476
but below the controls.


111
00:06:54,476 --> 00:06:56,586
Views may be static or animated.


112
00:06:57,036 --> 00:06:59,856
But views will not
receive focus or events.


113
00:07:00,666 --> 00:07:04,146
Let's move on to
restricting playback.


114
00:07:05,316 --> 00:07:07,296
The requiresLinearPlayback
property


115
00:07:07,386 --> 00:07:10,656
of the player view controller
limits user interaction


116
00:07:10,656 --> 00:07:13,136
when set to Play and Pause.


117
00:07:13,546 --> 00:07:16,216
Things like fast forward,
scrubbing, skipping,


118
00:07:16,556 --> 00:07:20,006
chapter navigation and so on are
all forbidden when this is set.


119
00:07:20,886 --> 00:07:24,116
Typically you'll set it to true
when you want to enforce viewing


120
00:07:24,116 --> 00:07:26,056
of a particular section
of video,


121
00:07:26,056 --> 00:07:29,116
for example ads or
a legal notice.


122
00:07:31,576 --> 00:07:36,056
The external metadata
property supplements


123
00:07:36,056 --> 00:07:39,106
or replaces information
embedded in your asset.


124
00:07:39,486 --> 00:07:43,866
Things like title, description,
genre, media content and rating,


125
00:07:43,916 --> 00:07:46,726
PG-13 or R, that sort of
thing, or poster artwork.


126
00:07:47,546 --> 00:07:52,516
Let's go back to our screenshot


127
00:07:52,516 --> 00:07:54,176
that showed the info
panel we saw earlier.


128
00:07:54,956 --> 00:07:56,686
And I want to direct
your attention


129
00:07:56,756 --> 00:07:58,636
to this top section right here.


130
00:07:59,326 --> 00:08:03,426
This is where the informational
metadata is displayed on tvOS.


131
00:08:03,916 --> 00:08:07,086
Now, in addition, it'll also be
displayed in the iOS remote app.


132
00:08:08,756 --> 00:08:11,136
Here we see the artwork,
which in this case looks


133
00:08:11,136 --> 00:08:12,796
like a still from the video.


134
00:08:13,436 --> 00:08:14,866
We have the title.


135
00:08:14,866 --> 00:08:17,686
We have the duration, which
comes directly from the asset,


136
00:08:17,836 --> 00:08:20,546
a media content rating
and a description.


137
00:08:23,146 --> 00:08:24,416
Now, let's look at
how we're going


138
00:08:24,416 --> 00:08:26,636
to create external
metadata items.


139
00:08:27,236 --> 00:08:31,276
And we will create a
couple of helper functions


140
00:08:31,276 --> 00:08:32,525
to make it a little easier.


141
00:08:33,596 --> 00:08:36,486
The first one called
metadataItem takes an identifier


142
00:08:36,546 --> 00:08:37,256
and a value.


143
00:08:37,296 --> 00:08:39,486
And it's going to
return an AVMetadataItem.


144
00:08:40,655 --> 00:08:43,996
And so metadataItem has a
whole bunch of properties.


145
00:08:44,296 --> 00:08:47,796
You really need to set three,
these three: The value,


146
00:08:47,796 --> 00:08:51,366
the identifier, and
often overlooked,


147
00:08:51,406 --> 00:08:52,676
the extended language tag.


148
00:08:54,286 --> 00:08:58,246
Now, you see here I've set it
to the string und which is short


149
00:08:58,246 --> 00:09:01,646
for undefined and it
acts like a wildcard.


150
00:09:02,146 --> 00:09:05,546
So if you do not have a more
specific language translation


151
00:09:05,546 --> 00:09:10,456
available, this is the version
that AVKit will display.


152
00:09:11,486 --> 00:09:13,886
If you don't have any
translations, if everything,


153
00:09:13,886 --> 00:09:16,546
for example, is in English
or everything's in French,


154
00:09:17,026 --> 00:09:20,216
then just use und so that users,


155
00:09:20,216 --> 00:09:24,316
regardless of their
language, will see something.


156
00:09:24,826 --> 00:09:26,816
Now, artwork is a
little bit different.


157
00:09:27,396 --> 00:09:32,666
The value of the artwork
metadataItem is an


158
00:09:32,666 --> 00:09:33,766
image representation.


159
00:09:33,766 --> 00:09:34,636
So it's raw data.


160
00:09:35,166 --> 00:09:37,766
You can use PNG or JPEG.


161
00:09:38,026 --> 00:09:40,866
You also need to set the data
type field to identify what kind


162
00:09:40,866 --> 00:09:41,876
of data you're providing.


163
00:09:42,616 --> 00:09:46,176
And once again, you
set the identifier


164
00:09:46,176 --> 00:09:47,346
and the extended language tag.


165
00:09:47,346 --> 00:09:51,296
Now we're going to
bring it all together.


166
00:09:51,456 --> 00:09:53,986
We're going to create several
external metadata items.


167
00:09:53,986 --> 00:09:54,666
We create an array.


168
00:09:54,666 --> 00:09:57,626
Then we're going to use our
helper function to add a title,


169
00:09:58,386 --> 00:10:01,266
a description and the poster
image to that array --


170
00:10:02,076 --> 00:10:03,446
oh, and sorry, also the genre.


171
00:10:03,446 --> 00:10:05,656
And then finally we're
going to assign that array


172
00:10:05,656 --> 00:10:08,576
to the external metadata
property of the playerItem.


173
00:10:09,256 --> 00:10:09,466
All right.


174
00:10:10,956 --> 00:10:13,226
Back to our info panel.


175
00:10:14,506 --> 00:10:18,046
Now we're going to look down
here at the bottom part.


176
00:10:18,486 --> 00:10:19,756
This is the navigation section.


177
00:10:19,756 --> 00:10:23,966
And this is displaying a
navigation marker group.


178
00:10:24,136 --> 00:10:27,396
Navigation markers most
often are used for chapters.


179
00:10:27,786 --> 00:10:29,226
But they allow for easy access


180
00:10:29,226 --> 00:10:31,336
to different parts
of your video.


181
00:10:32,056 --> 00:10:35,306
Navigation marker groups
are for chapters or events.


182
00:10:35,626 --> 00:10:37,156
Examples of events would be


183
00:10:37,156 --> 00:10:43,816
in a sports video you might have
game highlights, for example.


184
00:10:44,936 --> 00:10:49,076
A navigation marker group
is defined by an object


185
00:10:49,076 --> 00:10:51,396
of class
AVNavigationMarkersGroup.


186
00:10:52,036 --> 00:10:54,866
And it contains an array
of navigation markers,


187
00:10:54,866 --> 00:10:56,826
in this case chapters.


188
00:11:00,336 --> 00:11:02,306
Every marker has a title.


189
00:11:03,396 --> 00:11:05,826
And in most cases
an image as well,


190
00:11:05,826 --> 00:11:07,206
usually a thumbnail
from the video.


191
00:11:07,756 --> 00:11:08,506
But that's optional.


192
00:11:10,096 --> 00:11:16,236
An event group itself also has a
title, a chapter group does not.


193
00:11:19,276 --> 00:11:19,936
All right.


194
00:11:19,936 --> 00:11:22,626
Another little helper function,
the create navigation marker.


195
00:11:23,026 --> 00:11:26,906
This takes a title, a
description and a time range.


196
00:11:27,326 --> 00:11:30,566
Now, the time range is the
time range of the thing


197
00:11:30,566 --> 00:11:31,806
that you're navigating to.


198
00:11:31,806 --> 00:11:33,736
However, the duration
is optional.


199
00:11:34,056 --> 00:11:38,956
If you don't really care to set
it, you can just leave it zero.


200
00:11:39,606 --> 00:11:41,446
Here again, we're
creating metadata items.


201
00:11:41,446 --> 00:11:43,306
In this case, for a
title, description.


202
00:11:43,306 --> 00:11:46,346
And then finally we're going to
create the timed metadata group


203
00:11:46,386 --> 00:11:49,606
with our metadata
and the time range.


204
00:11:50,196 --> 00:11:54,156
All right.


205
00:11:54,296 --> 00:11:55,906
Now let's talk about
interstitials.


206
00:11:56,626 --> 00:12:04,446
Here we see a video with several
interstitials as indicated


207
00:12:04,446 --> 00:12:06,406
by the dots on the
transport bar.


208
00:12:07,866 --> 00:12:10,786
The user is watching
an interstitial here.


209
00:12:10,786 --> 00:12:14,136
And the time above the
transport bar is counting


210
00:12:14,136 --> 00:12:15,346
down the time remaining.


211
00:12:16,086 --> 00:12:24,786
The time below is the
elapsed time into the video.


212
00:12:25,426 --> 00:12:27,476
Interstitial content is content


213
00:12:27,476 --> 00:12:29,136
that is unrelated
to the main video.


214
00:12:29,136 --> 00:12:32,556
So for example, advertisements,
legal notices,


215
00:12:32,556 --> 00:12:33,536
other things like that.


216
00:12:35,276 --> 00:12:39,476
An interstitial time range
identifies the portion


217
00:12:39,476 --> 00:12:41,836
of an asset that contains
interstitial content.


218
00:12:43,386 --> 00:12:45,666
And interstitial
time ranges collapse.


219
00:12:45,666 --> 00:12:49,086
The dots on the transfer bar
are [inaudible] holes as we saw


220
00:12:49,086 --> 00:12:49,836
in the previous slide.


221
00:12:51,256 --> 00:12:55,356
And finally, during scrubbing,
interstitial content is hidden.


222
00:12:55,356 --> 00:12:58,576
So the user just is navigating
through the entire main video


223
00:12:58,576 --> 00:12:59,686
and they're not getting
distracted


224
00:12:59,686 --> 00:13:04,386
by ads popping ups
as they're scrubbing.


225
00:13:05,256 --> 00:13:09,236
Now here we have a diagram
comparing the timelines


226
00:13:09,236 --> 00:13:12,936
of your asset on the top
and the transfer bar as seen


227
00:13:12,936 --> 00:13:14,346
by the user on the bottom.


228
00:13:14,646 --> 00:13:17,446
We have a nine minute asset
with a couple of interstitials,


229
00:13:19,076 --> 00:13:21,316
both of which are going
to be collapsed into dots.


230
00:13:21,536 --> 00:13:23,256
And you'll notice
that the duration


231
00:13:23,626 --> 00:13:27,246
on the transfer bar has
been reduced by the length,


232
00:13:27,246 --> 00:13:29,786
or rather the duration
of those interstitials.


233
00:13:30,346 --> 00:13:37,346
Now let's look at creating and
declaring interstitial content.


234
00:13:38,656 --> 00:13:44,076
First, on your server you should
stitch the interstitial content


235
00:13:44,076 --> 00:13:46,846
directly into your HLS asset.


236
00:13:47,496 --> 00:13:50,576
Then, in your client app,


237
00:13:50,926 --> 00:13:53,556
you will declare the
interstitial time ranges.


238
00:13:54,036 --> 00:13:56,956
And implement a few
delegate methods


239
00:13:56,956 --> 00:13:58,296
to enforce playback policy.


240
00:14:00,216 --> 00:14:02,776
Here's a short snippet
showing how


241
00:14:02,776 --> 00:14:04,876
to declare the interstitial
time ranges.


242
00:14:05,186 --> 00:14:09,286
For each interstitial create
an AVInterstititalTimeRange.


243
00:14:10,246 --> 00:14:12,496
Then set the
interstitialTimeRanges property


244
00:14:12,496 --> 00:14:14,526
of your player item
to this array.


245
00:14:15,276 --> 00:14:21,326
In this case we're just
creating a single interstitial


246
00:14:21,326 --> 00:14:21,846
time range.


247
00:14:22,326 --> 00:14:29,596
Next, the delegate methods.


248
00:14:30,436 --> 00:14:33,486
There are three important
ones I'm going to talk about.


249
00:14:33,486 --> 00:14:34,496
The first is willPresent.


250
00:14:35,536 --> 00:14:37,236
willPresent is called when one


251
00:14:37,506 --> 00:14:40,026
of your interstitials
begins to play.


252
00:14:41,836 --> 00:14:44,276
Typically, this is
where you're going


253
00:14:44,276 --> 00:14:47,496
to change requiresLinearPlayback
to restrict navigation.


254
00:14:48,206 --> 00:14:50,036
So for example, if this
is an advertisement,


255
00:14:50,036 --> 00:14:52,846
you probably need, for
contractual reasons,


256
00:14:52,846 --> 00:14:55,316
to require the user to watch
the entire interstitial once


257
00:14:55,316 --> 00:14:55,836
they start.


258
00:14:56,606 --> 00:14:57,326
You set it to true.


259
00:14:57,326 --> 00:14:58,376
Then they can't skip out.


260
00:14:58,376 --> 00:15:01,566
They could still pause,
head to the kitchen


261
00:15:01,566 --> 00:15:03,776
or something and come back.


262
00:15:03,776 --> 00:15:06,346
But they can't navigate,
they can't skip


263
00:15:06,346 --> 00:15:08,386
over it once they're inside.


264
00:15:10,316 --> 00:15:12,896
didPresent is called at the
end of your interstitial.


265
00:15:13,416 --> 00:15:15,736
And usually you set
requiresLinearPlayback back


266
00:15:15,736 --> 00:15:18,056
to False so that the users
can once again navigate.


267
00:15:18,556 --> 00:15:20,996
And finally,


268
00:15:22,566 --> 00:15:27,886
timeToSeekAfterUserNavigatedFrom
time to some target time.


269
00:15:28,106 --> 00:15:32,326
So this is called when the
user navigates or indicates


270
00:15:32,326 --> 00:15:34,646
that they want to navigate to
a different part of your video.


271
00:15:34,646 --> 00:15:38,716
For example, they
skipped forward or back.


272
00:15:38,716 --> 00:15:40,486
They scrub and hit Play again.


273
00:15:40,746 --> 00:15:43,446
Or they use the navigation
markers to jump


274
00:15:43,446 --> 00:15:44,616
to another part in your video.


275
00:15:45,776 --> 00:15:47,816
The oldTime is the time
that they were playing


276
00:15:47,816 --> 00:15:49,006
at just before they skipped.


277
00:15:49,456 --> 00:15:52,246
The targetTime is the time
that they want to watch next.


278
00:15:53,116 --> 00:15:55,816
The time returned
by this delegate is


279
00:15:55,816 --> 00:15:58,666
where you want playback
to resume.


280
00:15:59,776 --> 00:16:02,546
So by default, if you didn't
implement this method,


281
00:16:02,546 --> 00:16:04,896
it would resume at
the target time.


282
00:16:04,896 --> 00:16:07,366
AVKit would seek to the target
time and start playback there.


283
00:16:07,486 --> 00:16:10,826
If you provide the start time
of an interstitial instead,


284
00:16:10,826 --> 00:16:14,336
AVKit will automatically
redirect to that interstitial.


285
00:16:15,396 --> 00:16:17,596
Now, if you do redirect
to an interstitial,


286
00:16:18,386 --> 00:16:21,396
unlike in our very simple sample
here, you're going to want


287
00:16:21,396 --> 00:16:22,826
to save the target time.


288
00:16:23,226 --> 00:16:25,446
And when your interstitial
is complete,


289
00:16:26,176 --> 00:16:27,606
seek back to the target time


290
00:16:27,606 --> 00:16:31,326
so that the user can once
again resume at the time


291
00:16:31,326 --> 00:16:33,036
that they wanted to watch.


292
00:16:33,206 --> 00:16:36,096
Now let's turn to
skipping behavior.


293
00:16:39,036 --> 00:16:40,256
Here we see the skipping
indicator.


294
00:16:40,256 --> 00:16:43,096
And this is a new skipping
indicator in tvOS 10,


295
00:16:43,346 --> 00:16:51,896
the skip by item indicator which
can replace the older indicator,


296
00:16:51,896 --> 00:16:54,606
which is the skip forward
or back 10 seconds.


297
00:16:55,386 --> 00:16:58,716
In tvOS 10 you can choose


298
00:16:58,716 --> 00:17:00,596
between these two
skipping behaviors.


299
00:17:01,016 --> 00:17:05,116
If your app is displaying
something like a movie


300
00:17:05,116 --> 00:17:09,266
or a TV show, it's probably
most useful for users to be able


301
00:17:09,266 --> 00:17:12,915
to navigate skip 10 seconds
back and forward at a time


302
00:17:12,915 --> 00:17:15,976
to more easily find the scene
that they're looking for.


303
00:17:17,046 --> 00:17:19,386
If you have a series
of short videos,


304
00:17:19,386 --> 00:17:23,126
for example exercise videos,
it probably makes more sense


305
00:17:23,256 --> 00:17:27,705
to let users easily skip to the
next video, the next exercise,


306
00:17:27,896 --> 00:17:30,266
or the previous video,
previous exercise, then to move


307
00:17:30,266 --> 00:17:32,376
around a little bit
within an exercise.


308
00:17:32,856 --> 00:17:35,836
So, to accommodate that, you can
change the skipping behavior.


309
00:17:36,146 --> 00:17:38,556
There are two skipping
behaviors defined today.


310
00:17:38,556 --> 00:17:40,006
The default, which
is to skip plus


311
00:17:40,006 --> 00:17:42,316
or minus 10 seconds,
and skip item.


312
00:17:42,956 --> 00:17:44,506
And there are three properties


313
00:17:44,506 --> 00:17:47,026
in the PlayerViewController
related to this:


314
00:17:47,026 --> 00:17:50,196
The skipping behavior
and properties to enable


315
00:17:50,196 --> 00:17:54,316
and disable the skip forward and
skip backward hint indicators.


316
00:17:54,886 --> 00:18:00,166
So let's look at
skipping by item instead


317
00:18:00,166 --> 00:18:01,766
of skipping a few seconds.


318
00:18:02,816 --> 00:18:04,556
First thing we're going
to do is we're going


319
00:18:04,556 --> 00:18:05,596
to set the three properties.


320
00:18:06,546 --> 00:18:07,966
Select the new skipping
behavior.


321
00:18:08,046 --> 00:18:09,076
In this case we're just going


322
00:18:09,076 --> 00:18:11,056
to always enable skip
forward and skip back.


323
00:18:11,056 --> 00:18:12,216
I'm being a little lazy.


324
00:18:13,006 --> 00:18:16,476
And then we're going to
implement two delegate methods.


325
00:18:17,376 --> 00:18:19,246
Skip to next item,
all we're going


326
00:18:19,246 --> 00:18:23,156
to do is replace the current
item with the new video.


327
00:18:23,156 --> 00:18:25,856
And skip to previous item.


328
00:18:25,966 --> 00:18:27,396
Same thing, but going backwards.


329
00:18:27,956 --> 00:18:34,436
Okay. Now for a demo
of all these features,


330
00:18:34,646 --> 00:18:37,026
I'd like to welcome
Jonathan Long to the stage.


331
00:18:37,516 --> 00:18:37,886
Jonathan.


332
00:18:39,516 --> 00:18:44,626
[ Applause ]


333
00:18:45,126 --> 00:18:45,556
>> Good morning.


334
00:18:46,206 --> 00:18:47,196
My name is Jonathan Long.


335
00:18:47,196 --> 00:18:49,716
I work with Dan on
AVKit for tvOS.


336
00:18:50,666 --> 00:18:52,886
And today, we are going


337
00:18:52,886 --> 00:18:55,406
to be demoing an app
called AVKit Player.


338
00:18:56,386 --> 00:18:59,276
I have the project
open here in Xcode.


339
00:18:59,336 --> 00:19:01,226
And this is the main
view controller.


340
00:19:01,606 --> 00:19:04,016
It is the subclass
of UIViewController.


341
00:19:04,686 --> 00:19:07,226
And we have a reference to
an AVPlayerViewController.


342
00:19:07,836 --> 00:19:11,746
We obtain this reference in
the prepare for segue callback.


343
00:19:12,856 --> 00:19:16,676
In addition, we also create
an AVAsset, an AVPlayerItem


344
00:19:16,936 --> 00:19:18,956
and an AVPlayer, which we assign


345
00:19:18,956 --> 00:19:20,686
to the PlayerViewController's
player property.


346
00:19:20,916 --> 00:19:22,576
I'll go ahead and
build and run this


347
00:19:22,576 --> 00:19:24,346
so we can see what
it looks like.


348
00:19:25,031 --> 00:19:27,031
[ Music ]


349
00:19:27,046 --> 00:19:28,846
So here's our
playerViewController


350
00:19:28,846 --> 00:19:31,486
in full screen with all of the
standard user interactions.


351
00:19:32,116 --> 00:19:34,726
If I swipe down to
reveal the info panel,


352
00:19:35,316 --> 00:19:36,616
you can see that
there's not a whole lot


353
00:19:36,616 --> 00:19:37,906
of interesting information here.


354
00:19:38,426 --> 00:19:40,766
Most notably we are
missing the info tab.


355
00:19:41,546 --> 00:19:43,366
So the first thing we're
going to do is we are going


356
00:19:43,366 --> 00:19:46,166
to add some external metadata
and some navigation markers


357
00:19:46,166 --> 00:19:47,576
so that info tab shows up.


358
00:19:49,206 --> 00:19:52,286
Jumping back into Xcode, the
first thing that we're going


359
00:19:52,286 --> 00:19:54,866
to do is we are going to
add some external metadata.


360
00:19:55,276 --> 00:19:57,906
To do this we need to
create some AVMetadataItems,


361
00:19:58,416 --> 00:20:00,586
add them to an array
and assign this array


362
00:20:00,586 --> 00:20:02,346
to the
playerItemExternalMetadata


363
00:20:02,346 --> 00:20:02,776
property.


364
00:20:03,356 --> 00:20:07,216
I'll go ahead and add some
helper functions here.


365
00:20:08,046 --> 00:20:09,576
These probably look
very familiar,


366
00:20:09,716 --> 00:20:10,826
as they are the same ones


367
00:20:10,826 --> 00:20:12,376
that Dan showed you
in slides earlier.


368
00:20:13,346 --> 00:20:15,746
The first creates and
AVMetadataItem for artwork,


369
00:20:16,216 --> 00:20:18,416
setting the data
type to be JPEG.


370
00:20:19,636 --> 00:20:21,636
The second creates
an AVMetadataItem


371
00:20:21,956 --> 00:20:23,286
for all other value types,


372
00:20:23,486 --> 00:20:26,226
setting the extendedLanguageTag
to be undefined.


373
00:20:26,736 --> 00:20:30,506
Now, I have one more
helper function here


374
00:20:31,276 --> 00:20:34,956
that takes a dictionary
as its argument.


375
00:20:35,306 --> 00:20:38,826
And it simply maps the key
value pairs of this dictionary


376
00:20:39,146 --> 00:20:40,786
to create AVMetadataItems


377
00:20:40,786 --> 00:20:43,446
and returns an array
of AVMetadataItems.


378
00:20:44,536 --> 00:20:47,546
So now with these
helper functions,


379
00:20:47,986 --> 00:20:51,746
we can set the
playerItem.externalMetadata


380
00:20:51,746 --> 00:20:57,596
property to be our array
of AVMetadataItems.


381
00:20:58,126 --> 00:21:00,336
Cool. So we created
AVMetadataItems,


382
00:21:00,666 --> 00:21:02,936
added them to an array,
assigned that array


383
00:21:02,936 --> 00:21:04,526
to the
playerItem.externalMetadata


384
00:21:04,526 --> 00:21:04,976
property.


385
00:21:06,256 --> 00:21:09,146
So now let's move on and
add some navigation markers.


386
00:21:10,636 --> 00:21:13,956
I have some helper
functions here for that.


387
00:21:14,546 --> 00:21:17,636
The first creates an
AVTimedMetadataGroup


388
00:21:17,846 --> 00:21:22,306
with a title, a description
and a time range.


389
00:21:22,856 --> 00:21:27,696
The second creates an
AVNavigationMarkersGroup


390
00:21:28,236 --> 00:21:33,186
with a name and four
time metadata groups


391
00:21:33,216 --> 00:21:36,146
that represent different
time ranges in our content.


392
00:21:36,856 --> 00:21:39,816
So now with these functions,


393
00:21:39,976 --> 00:21:43,346
I can set the
navigationMarkerGroups property


394
00:21:43,346 --> 00:21:49,446
on the playerItem to be an array
of AVNavigationMarkerGroups.


395
00:21:50,016 --> 00:21:52,076
We'll name this one
Additional Group.


396
00:21:53,536 --> 00:21:56,946
Cool. So we created an
AVNavigationMarkersGroup


397
00:21:57,116 --> 00:21:59,716
with some time metadata
groups with a name.


398
00:22:00,406 --> 00:22:01,586
We added that to an array.


399
00:22:01,666 --> 00:22:03,066
And then we assigned the array


400
00:22:03,066 --> 00:22:06,476
to the navigationMarkerGroups
property on the playerItem.


401
00:22:07,006 --> 00:22:11,926
So, let's build and run
and see what happened.


402
00:22:13,366 --> 00:22:16,786
So here is our Player
View Controller again.


403
00:22:16,786 --> 00:22:19,846
And I can swipe down
to see the Info tab.


404
00:22:19,846 --> 00:22:22,906
And now we see in the
metadata space all the metadata


405
00:22:22,906 --> 00:22:27,196
that we've specified as well
as the artwork for this title.


406
00:22:27,196 --> 00:22:29,126
And if I select down
at the bottom,


407
00:22:29,126 --> 00:22:30,766
one of the navigation
markers that we've added,


408
00:22:30,766 --> 00:22:33,796
we can skip to that
point in the content.


409
00:22:33,796 --> 00:22:38,316
So with just a little
bit of code it's easy


410
00:22:38,316 --> 00:22:40,746
to add external metadata
and navigation markers


411
00:22:41,066 --> 00:22:43,596
to provide a rich user
experience in your info panel.


412
00:22:44,776 --> 00:22:46,226
Now I'll hand it back
over to Dan to talk


413
00:22:46,226 --> 00:22:50,606
about new APIs in
AVKit for tvOS.


414
00:22:51,556 --> 00:22:51,646
Dan.


415
00:22:52,516 --> 00:22:54,876
[ Applause ]


416
00:22:55,376 --> 00:22:55,976
>> Thank you, Jonathan.


417
00:23:00,876 --> 00:23:01,326
All right.


418
00:23:01,416 --> 00:23:02,586
Content proposals.


419
00:23:03,986 --> 00:23:08,996
Content proposals are about
suggesting what to watch next.


420
00:23:09,586 --> 00:23:11,836
You may have seen Up
Next suggestions in some


421
00:23:11,836 --> 00:23:16,866
of your favorite apps such
as Netflix, Hulu, HBO.


422
00:23:18,046 --> 00:23:20,736
When you reach the end
of each episode of, say,


423
00:23:20,736 --> 00:23:23,506
"The West Wing" you'll
see a suggestion pop


424
00:23:23,506 --> 00:23:27,196
up to watch the next
episode and so on and so


425
00:23:27,196 --> 00:23:30,686
on until it's 3:00
in the morning.


426
00:23:31,076 --> 00:23:34,506
Many apps implemented their
own version of this for tvOS 9.


427
00:23:34,506 --> 00:23:35,606
And then it was kind of tricky.


428
00:23:37,196 --> 00:23:42,426
No more. With tvOS 10 AVKit
provides a standard way


429
00:23:42,426 --> 00:23:46,106
to present your own
customized Up Next experience.


430
00:23:46,216 --> 00:23:48,026
We call these Content Proposals.


431
00:23:48,966 --> 00:23:50,486
Here is one example


432
00:23:51,016 --> 00:23:52,776
[ Applause ]


433
00:23:52,776 --> 00:23:53,226
Thank you.


434
00:23:55,926 --> 00:23:58,266
Now, you have the entire
screen to work with.


435
00:23:58,676 --> 00:24:01,286
So you're not limited
to anything here.


436
00:24:01,286 --> 00:24:02,496
This is just an example.


437
00:24:03,746 --> 00:24:06,436
In the lower right
we have some metadata


438
00:24:06,436 --> 00:24:08,356
and some big buttons
that you can press.


439
00:24:10,276 --> 00:24:12,736
Up here we have the
currently playing video.


440
00:24:13,686 --> 00:24:17,826
And here is the thumbnail
representing the proposed video.


441
00:24:18,666 --> 00:24:24,546
Now, a content proposal is
represented by an object


442
00:24:24,546 --> 00:24:26,356
of class AVContentProposal.


443
00:24:26,856 --> 00:24:28,666
This is basically
a model object.


444
00:24:29,896 --> 00:24:32,106
Now, there are several
properties on here.


445
00:24:32,106 --> 00:24:34,196
I'm not going to spend a
lot of time on all of them.


446
00:24:34,196 --> 00:24:36,226
But I want to highlight
a few important ones.


447
00:24:37,826 --> 00:24:39,866
The first is
contentTimeForTransition.


448
00:24:40,556 --> 00:24:44,516
This is the time within
the currently playing video


449
00:24:45,486 --> 00:24:49,206
that you want your proposal
to be presented to the user.


450
00:24:50,456 --> 00:24:53,996
So, if you specify the
duration of your video or zero


451
00:24:53,996 --> 00:24:58,076
as a shortcut, that means
that you want it to appear


452
00:24:58,076 --> 00:24:59,626
at the very end of the video.


453
00:25:00,646 --> 00:25:03,786
However, if you're presenting a
TV show or a movie or something


454
00:25:03,786 --> 00:25:05,586
like that, you probably
have a bunch of end credits


455
00:25:05,586 --> 00:25:07,056
that the user may not
want to sit through.


456
00:25:07,396 --> 00:25:10,096
And you may want to present
your proposal at the beginning


457
00:25:10,096 --> 00:25:11,766
of those end credits, in
which case you can set this


458
00:25:11,766 --> 00:25:12,676
property accordingly.


459
00:25:13,166 --> 00:25:20,186
Next automaticAcceptanceInterval
allows you to specify a timeout


460
00:25:20,186 --> 00:25:21,896
for your presentation.


461
00:25:23,056 --> 00:25:25,226
You can say, for
example, 30 seconds.


462
00:25:25,226 --> 00:25:29,316
Which means that if the user
does absolutely nothing,


463
00:25:29,316 --> 00:25:31,356
they take no action
for 30 seconds,


464
00:25:31,436 --> 00:25:33,706
then the proposal will
be automatically accepted


465
00:25:34,056 --> 00:25:35,606
and advanced.


466
00:25:37,276 --> 00:25:42,096
If you don't set this, then your
proposal will just stay onscreen


467
00:25:42,096 --> 00:25:43,696
until the user takes
some sort of action.


468
00:25:44,786 --> 00:25:49,406
Title and preview image
would be the bare minimum bit


469
00:25:49,406 --> 00:25:51,466
of information that you
should provide to a user.


470
00:25:52,626 --> 00:25:55,176
You can, of course, provide
as much additional information


471
00:25:55,176 --> 00:26:00,196
as you like: Description,
maybe a little widget


472
00:26:00,196 --> 00:26:01,606
to set a user rating,


473
00:26:02,266 --> 00:26:04,896
maybe additional suggestions
for alternate videos.


474
00:26:05,726 --> 00:26:10,476
And finally, the way you
specify your content proposal is


475
00:26:10,476 --> 00:26:12,606
to set the next contentProposal
property


476
00:26:13,196 --> 00:26:15,246
on the current playerItem.


477
00:26:15,846 --> 00:26:19,376
So let's look at creating
the content proposal.


478
00:26:22,046 --> 00:26:23,286
Well, this is pretty easy.


479
00:26:23,286 --> 00:26:25,256
We just create an instance
of AVContentProposal.


480
00:26:26,096 --> 00:26:27,866
We're going to specify
a time of zero


481
00:26:27,866 --> 00:26:29,466
for our
contentTimeForTransition.


482
00:26:30,396 --> 00:26:32,656
This means we want it to
show up at the very end.


483
00:26:32,656 --> 00:26:35,366
This is a nice shortcut if you
don't have the duration yet.


484
00:26:35,426 --> 00:26:38,076
For example, if your
playerItem hasn't loaded.


485
00:26:39,996 --> 00:26:43,326
And we're going to set the
title and a preview image.


486
00:26:43,686 --> 00:26:47,466
In this case, our proposal
is for Episode 2 of Season 9


487
00:26:47,466 --> 00:26:50,316
of a fictional TV show
called "Happy Hijinks."


488
00:26:51,206 --> 00:26:56,806
In this case we're going set
one of the optional properties


489
00:26:56,806 --> 00:26:58,356
of the content proposal, a URL.


490
00:26:58,356 --> 00:27:01,106
And we're going to set it
to the URL for this episode,


491
00:27:02,386 --> 00:27:03,436
for our own use later.


492
00:27:05,326 --> 00:27:07,176
Now we assign the
proposal to the playerItem,


493
00:27:07,286 --> 00:27:08,456
which should show the proposal.


494
00:27:09,816 --> 00:27:11,026
Naturally, this is
the playerItem


495
00:27:11,066 --> 00:27:16,996
for Season 9, Episode 1.


496
00:27:18,046 --> 00:27:20,946
And, once again, we've got three
interesting delegate methods.


497
00:27:22,766 --> 00:27:26,616
shouldPresent is called
immediately before your proposal


498
00:27:26,616 --> 00:27:28,126
is to be presented to the user.


499
00:27:29,146 --> 00:27:32,016
Now, you could take this
opportunity to return False


500
00:27:32,016 --> 00:27:34,256
and prevent the proposal
from being presented.


501
00:27:35,606 --> 00:27:38,786
But you can also use it as a
last minute opportunity to set


502
00:27:38,786 --> 00:27:41,026
up to prepare for
your presentation.


503
00:27:41,916 --> 00:27:43,806
And we'll show an example
of that in just a minute.


504
00:27:45,306 --> 00:27:49,676
didAccept is called when the
user accepts your proposal.


505
00:27:49,676 --> 00:27:52,346
That means they want to watch
the video that you've suggested.


506
00:27:52,816 --> 00:27:57,486
It will also be called
if the timeout occurs.


507
00:27:57,966 --> 00:28:01,286
And didReject is called
if the user has indicated


508
00:28:01,286 --> 00:28:03,146
that they want out
of your proposal.


509
00:28:03,146 --> 00:28:05,086
They want out of the video.


510
00:28:05,086 --> 00:28:11,656
They want to get
back to your menu.


511
00:28:12,336 --> 00:28:15,756
Now finally, you will
implement your presentation


512
00:28:15,756 --> 00:28:19,496
by creating a custom subclass of
AVContentProposalViewController.


513
00:28:19,496 --> 00:28:23,706
There are a few interesting
things in the subclass.


514
00:28:23,706 --> 00:28:25,766
Let's look at two,


515
00:28:26,316 --> 00:28:31,346
preferredPlayerViewFrame
is the frame onscreen


516
00:28:31,346 --> 00:28:34,456
where you want the video to
appear during your presentation.


517
00:28:35,426 --> 00:28:39,006
Now, the base class
simply returns the frame


518
00:28:39,006 --> 00:28:43,226
of the entire screen, in which
case the video will continue


519
00:28:43,226 --> 00:28:44,086
to fill the screen.


520
00:28:45,016 --> 00:28:47,726
And your presentation controls
will be overlaid on top.


521
00:28:48,186 --> 00:28:50,566
However, you can specify
a smaller rectangle,


522
00:28:50,566 --> 00:28:52,696
maybe off to the side in
a corner or something,


523
00:28:53,126 --> 00:28:56,326
to give yourself lots of space,
the rest of the screen to work


524
00:28:56,326 --> 00:29:00,016
with for your controls.


525
00:29:01,046 --> 00:29:04,306
And dismissContentProposal
is how content proposals


526
00:29:04,306 --> 00:29:05,246
are dismissed.


527
00:29:05,436 --> 00:29:07,396
You can specify one
of three actions:


528
00:29:08,096 --> 00:29:12,796
Accept, Reject and Defer.


529
00:29:13,026 --> 00:29:17,856
Defer means the user simply
wants to hide your presentation,


530
00:29:17,856 --> 00:29:20,776
get back to watching the
end credits so they can,


531
00:29:20,776 --> 00:29:22,496
I don't know, maybe they
want to spot their name


532
00:29:22,496 --> 00:29:24,666
in the end credits if
they worked on the video.


533
00:29:25,516 --> 00:29:28,886
And then as the name implies,
Defer, it will reappear


534
00:29:28,886 --> 00:29:29,846
at the end of the video.


535
00:29:30,666 --> 00:29:36,126
Now let's look at responding to
those delegate notifications.


536
00:29:37,746 --> 00:29:38,486
shouldPresent.


537
00:29:38,796 --> 00:29:41,666
In this case, we're going
to create an instance


538
00:29:41,986 --> 00:29:45,386
of our custom
contentProposalViewController


539
00:29:45,386 --> 00:29:46,866
subclass and assign it


540
00:29:46,926 --> 00:29:48,826
to the
contentProposalViewController


541
00:29:48,826 --> 00:29:49,296
property


542
00:29:49,436 --> 00:29:51,736
of the playerViewController
and return true.


543
00:29:52,956 --> 00:29:56,006
This lets us set that up
at the very last minute


544
00:29:56,006 --> 00:29:57,796
when we know we're going
to actually need it


545
00:29:57,796 --> 00:29:59,756
and not allocate
a bunch of memory


546
00:30:00,036 --> 00:30:03,636
that the user may never get to.


547
00:30:04,166 --> 00:30:04,986
didAccept.


548
00:30:05,946 --> 00:30:07,246
Here all we're going
to do is we're going


549
00:30:07,246 --> 00:30:08,596
to replace the current
playerItem


550
00:30:09,436 --> 00:30:10,916
with a proposed content
playerItem.


551
00:30:12,056 --> 00:30:12,966
Pretty straightforward.


552
00:30:12,966 --> 00:30:14,336
We've seen this code
a few times already.


553
00:30:15,466 --> 00:30:18,936
You'll notice here I'm making
use of the URL property


554
00:30:18,936 --> 00:30:21,696
of the proposal that I set when
I created the contentProposal.


555
00:30:22,916 --> 00:30:25,286
Now, if this is literally
all you're going to do here,


556
00:30:25,846 --> 00:30:27,796
you don't need to
implement this.


557
00:30:27,866 --> 00:30:31,156
Because AVKit, if you provide
a URL on your proposal,


558
00:30:31,716 --> 00:30:33,976
AVKit will automatically do this


559
00:30:33,976 --> 00:30:36,446
if you don't implement
the delegate method.


560
00:30:38,516 --> 00:30:41,806
All right, and now for a
demo with content proposals.


561
00:30:42,086 --> 00:30:42,486
Jonathan.


562
00:30:45,516 --> 00:30:49,086
[ Applause ]


563
00:30:49,586 --> 00:30:50,146
>> Hello, again.


564
00:30:50,996 --> 00:30:51,546
All right.


565
00:30:52,256 --> 00:30:58,346
So, let's continue with
AVKitPlayer and add an


566
00:30:58,346 --> 00:30:59,526
Up Next experience


567
00:30:59,576 --> 00:31:02,326
by subclassing
AVContentProposalViewController.


568
00:31:03,246 --> 00:31:05,226
So the first thing we
need to do is we need


569
00:31:05,226 --> 00:31:08,596
to create a custom subclass of
AVContentProposalViewController.


570
00:31:09,686 --> 00:31:11,546
I have one right here
that I will go ahead


571
00:31:11,546 --> 00:31:12,936
and add to our project.


572
00:31:20,216 --> 00:31:23,166
So, this is our
UpNextContentViewController.


573
00:31:23,796 --> 00:31:26,926
It is a subclass of
AVContentProposalViewController.


574
00:31:26,926 --> 00:31:30,016
And we have some
UI properties here


575
00:31:30,016 --> 00:31:33,586
such as a UIImageView,
a UILabel and others.


576
00:31:34,496 --> 00:31:37,206
We override the
preferredPlayerViewFrame


577
00:31:37,446 --> 00:31:42,036
to return the CGRect that we
want our playerViewController's


578
00:31:42,036 --> 00:31:45,866
view to animate to when the
contentProposal is presented.


579
00:31:47,716 --> 00:31:48,526
Now, the rest


580
00:31:48,526 --> 00:31:50,526
of the viewController
simply handles the layout


581
00:31:50,526 --> 00:31:52,006
of its view and subviews.


582
00:31:52,356 --> 00:31:54,646
So we'll jump back into
our main viewController.


583
00:31:56,126 --> 00:31:57,916
So there's two more
things that we need to do.


584
00:31:58,526 --> 00:32:01,956
First, we need to create an
instance of AVContentProposal


585
00:32:02,306 --> 00:32:02,956
and assign it


586
00:32:03,006 --> 00:32:06,496
to the playerItem's next
content proposal property.


587
00:32:13,046 --> 00:32:18,066
So, here we are creating an
instance of AVContentProposal.


588
00:32:18,066 --> 00:32:22,936
We have a transition time,
a title and a preview image.


589
00:32:23,736 --> 00:32:26,576
We're also setting the
automaticAcceptanceInterval


590
00:32:26,576 --> 00:32:27,816
to be 15 seconds.


591
00:32:28,726 --> 00:32:32,206
In addition, we set the
URL and the metadata


592
00:32:32,206 --> 00:32:36,006
on this content proposal that
corresponds to the next item


593
00:32:36,006 --> 00:32:39,246
that will be played if the user
chooses to accept this proposal.


594
00:32:40,536 --> 00:32:44,406
Finally, we set the
contentProposal we just created


595
00:32:44,546 --> 00:32:49,576
as the next contentProposal
property on our AVPlayerItem.


596
00:32:50,456 --> 00:32:52,866
So the next thing we need to
do, and the last thing we need


597
00:32:52,866 --> 00:32:55,666
to do, is implement two
playerVIewController


598
00:32:55,666 --> 00:32:56,556
delegate methods.


599
00:32:56,996 --> 00:33:00,626
You can see here that we set the
playerViewController delegate


600
00:33:00,626 --> 00:33:01,136
to Self.


601
00:33:01,246 --> 00:33:04,336
And the two methods that we need


602
00:33:04,336 --> 00:33:08,126
to implement are
shouldPresentProposal


603
00:33:08,796 --> 00:33:10,976
and didAccept.


604
00:33:11,996 --> 00:33:15,766
So in shouldPresentProposal
we create an instance


605
00:33:15,766 --> 00:33:18,746
of our custom subclass of
AVContentProposalViewController


606
00:33:19,606 --> 00:33:22,516
and we assign that as the
playerViewController's


607
00:33:22,756 --> 00:33:24,196
contentProposalViewController.


608
00:33:25,696 --> 00:33:27,826
In addition we return
true to indicate


609
00:33:27,826 --> 00:33:29,946
that the contentProposal
should be presented.


610
00:33:30,316 --> 00:33:34,166
And finally, in didAccept,


611
00:33:34,626 --> 00:33:36,746
we need to handle
transitioning our player


612
00:33:36,746 --> 00:33:37,876
to the next playerItem.


613
00:33:38,756 --> 00:33:44,136
So, to do this, we get the
URL from the contentProposal.


614
00:33:45,156 --> 00:33:47,516
We create an AVPlayerItem
from that URL.


615
00:33:47,586 --> 00:33:51,456
And then we simply replace the
current item on our playerItem.


616
00:33:51,836 --> 00:33:53,306
And we're done.


617
00:33:54,256 --> 00:33:56,386
So let's build and run
and see what happens.


618
00:34:03,136 --> 00:34:06,686
So I'll go ahead and skip closer
to the end of the content.


619
00:34:08,516 --> 00:34:14,545
[ Music ]


620
00:34:15,045 --> 00:34:17,596
And here is our contentProposal.


621
00:34:17,596 --> 00:34:20,306
As you can see, the metadata
that we specified is here.


622
00:34:20,306 --> 00:34:23,216
The preview image as
well as the title.


623
00:34:23,216 --> 00:34:27,676
And if I select Play
Next, we would transition


624
00:34:27,676 --> 00:34:28,545
to our next playerItem.


625
00:34:28,545 --> 00:34:34,706
So I think if you
have implemented this


626
00:34:34,706 --> 00:34:37,876
on tvOS 9 you'll be very happy
with this API and you will find


627
00:34:37,876 --> 00:34:39,076
that it's much easier to use.


628
00:34:40,136 --> 00:34:41,856
I'd like to invite
Dan back up to talk


629
00:34:41,856 --> 00:34:44,876
about some best practices
of the AVKit.


630
00:34:45,516 --> 00:34:52,156
[ Applause ]


631
00:34:52,656 --> 00:34:54,826
>> Okay. Best practices.


632
00:34:56,406 --> 00:35:00,236
I'm going to talk
about a few things.


633
00:35:00,496 --> 00:35:02,226
Things to do and
things to avoid doing.


634
00:35:04,536 --> 00:35:08,216
First, some things that
we recommend that you do.


635
00:35:09,406 --> 00:35:14,006
Once again, present or present
view controler will handle


636
00:35:14,006 --> 00:35:15,806
zooming automatically
from an inline view.


637
00:35:15,806 --> 00:35:18,146
So there's no reason to
implement your own animation.


638
00:35:19,876 --> 00:35:23,166
Second, remember Playback
is only interactive


639
00:35:23,166 --> 00:35:24,016
when full screen.


640
00:35:25,626 --> 00:35:28,056
Third, use the new
content proposal API.


641
00:35:28,786 --> 00:35:32,156
Some of you wrote it
the hard way before.


642
00:35:32,236 --> 00:35:34,766
And we encourage you to switch
over to doing it the new way.


643
00:35:34,766 --> 00:35:37,146
I think you'll find your
code is a lot simpler.


644
00:35:37,146 --> 00:35:38,736
It's easy to understand
the flow.


645
00:35:38,736 --> 00:35:42,466
And you may avoid some
bugs and other things


646
00:35:42,466 --> 00:35:43,566
that you may have
had trying to get it


647
00:35:43,566 --> 00:35:44,936
to work just perfectly before.


648
00:35:48,196 --> 00:35:53,226
And observe the error property
of the player in playerItem.


649
00:35:53,636 --> 00:35:55,146
This is how you find
out about errors


650
00:35:55,146 --> 00:35:56,286
that occur during playback.


651
00:35:56,896 --> 00:36:01,076
And I'm going to talk about one
particular error in a minute


652
00:36:01,076 --> 00:36:01,716
that you should handle.


653
00:36:01,716 --> 00:36:03,616
But you should watch for
any errors that occur


654
00:36:03,786 --> 00:36:08,856
and respond appropriately
to the user.


655
00:36:09,326 --> 00:36:09,706
All right.


656
00:36:09,706 --> 00:36:10,856
Now a few things to avoid.


657
00:36:11,836 --> 00:36:14,186
Avoid toggling
showsPlaybackControls.


658
00:36:15,376 --> 00:36:17,936
This property is not
for temporarily showing


659
00:36:17,936 --> 00:36:19,286
or hiding the controls.


660
00:36:19,286 --> 00:36:22,226
This is for indicating
your permanent intent.


661
00:36:22,626 --> 00:36:24,346
So when you set this to false,


662
00:36:24,346 --> 00:36:28,376
you're saying we don't want
the playback controls at all.


663
00:36:28,906 --> 00:36:30,536
So if you toggle
this back and forth,


664
00:36:30,536 --> 00:36:31,906
what you're doing is
you're telling AVKit


665
00:36:31,946 --> 00:36:34,196
to destroy all the
controls and recreate them.


666
00:36:34,196 --> 00:36:34,736
Destroy them.


667
00:36:34,736 --> 00:36:35,366
Recreate them.


668
00:36:35,696 --> 00:36:38,326
And it's not very
efficient, as you can imagine.


669
00:36:39,556 --> 00:36:42,616
Second, some people hate this,


670
00:36:42,616 --> 00:36:45,406
but avoid adding supplemental
gestures to playback


671
00:36:45,406 --> 00:36:47,056
because it's going
to confuse users.


672
00:36:47,116 --> 00:36:48,686
People will not discover them.


673
00:36:49,646 --> 00:36:53,086
And by the same token, do not
overload the Select button


674
00:36:53,486 --> 00:36:54,936
or touch service gestures.


675
00:36:55,586 --> 00:36:57,386
Not only will that
confuse users,


676
00:36:57,386 --> 00:37:02,296
but you'll likely
break in the future.


677
00:37:03,576 --> 00:37:06,136
Now, some more general tips.


678
00:37:06,136 --> 00:37:08,926
Replace your asset if
you see this error:


679
00:37:08,926 --> 00:37:11,266
AVErrorMediaServicesWereReset.


680
00:37:12,286 --> 00:37:14,156
If you don't respond to this


681
00:37:14,156 --> 00:37:16,846
and the media services
are reset during playback,


682
00:37:18,226 --> 00:37:19,566
video playback will fail.


683
00:37:19,566 --> 00:37:21,716
And the user won't be able


684
00:37:21,716 --> 00:37:24,126
to do anything except,
hopefully, get out.


685
00:37:24,546 --> 00:37:25,766
So what they'll have
to do is get out,


686
00:37:25,766 --> 00:37:27,256
go back to your menu
and go back in.


687
00:37:27,936 --> 00:37:29,056
If you catch this error


688
00:37:29,056 --> 00:37:32,206
and automatically replace
your asset, your player item


689
00:37:32,206 --> 00:37:34,986
and your player, basically
your AV foundation objects,


690
00:37:35,486 --> 00:37:38,386
then you can more
seamlessly handle this case.


691
00:37:38,386 --> 00:37:40,686
And the user will barely even
know that anything happened.


692
00:37:42,276 --> 00:37:44,796
Now, some other sessions
with best practices


693
00:37:44,796 --> 00:37:47,136
for playback include this year,


694
00:37:47,136 --> 00:37:49,016
Advances in AVFoundation
Playback.


695
00:37:49,486 --> 00:37:50,486
It was earlier this week.


696
00:37:50,866 --> 00:37:53,336
You can catch the
video in the WWDC app.


697
00:37:54,456 --> 00:37:56,926
And two years ago we had
an excellent session,


698
00:37:57,376 --> 00:38:00,016
Mastering Modern Media
Playback, which includes tips


699
00:38:00,016 --> 00:38:02,916
for both AVKit and
AVFoundation and getting them


700
00:38:02,916 --> 00:38:03,866
to work well together.


701
00:38:04,446 --> 00:38:11,506
So in summary, AVKit provides
standard playback controls


702
00:38:11,506 --> 00:38:14,926
and behaviors, support for
remotes, game controllers


703
00:38:14,926 --> 00:38:20,336
and Siri, full access to the
media stack, powerful new APIs


704
00:38:20,736 --> 00:38:23,716
and it's easy to get started.


705
00:38:23,716 --> 00:38:26,756
Be sure to check out the sample
code for more in-depth examples.


706
00:38:27,236 --> 00:38:28,796
And we're excited
to see your app.


707
00:38:29,726 --> 00:38:32,166
So, for more information,
go to the URL on the screen.


708
00:38:32,166 --> 00:38:35,326
We'll have links to the sample
code and other resources.


709
00:38:37,266 --> 00:38:39,246
And check out some of
the related sessions.


710
00:38:39,246 --> 00:38:43,606
We also have on here the HTTP
Live Streaming session also


711
00:38:43,606 --> 00:38:44,446
earlier this week.


712
00:38:44,776 --> 00:38:47,256
And a pair of sessions
on using TVMLKit,


713
00:38:47,256 --> 00:38:51,386
which is an alternative approach
to using AVKit directly.


714
00:38:52,186 --> 00:38:54,106
So, thank you.


715
00:38:55,508 --> 00:38:57,508
[ Applause ]

