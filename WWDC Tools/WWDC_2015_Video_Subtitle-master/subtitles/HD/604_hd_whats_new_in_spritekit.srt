1
00:00:23,516 --> 00:00:29,176
[Applause]


2
00:00:29,676 --> 00:00:32,316
>> TIM ORIOL: Hi and welcome
to What's New in SpriteKit.


3
00:00:32,906 --> 00:00:35,606
We have a lot of great new
features and enhancements


4
00:00:35,606 --> 00:00:36,416
to tell you about today.


5
00:00:36,416 --> 00:00:39,776
I know that there's a few people
in the audience that are new


6
00:00:39,776 --> 00:00:43,136
to SpriteKit and I just wanted
to take a few minutes first


7
00:00:43,546 --> 00:00:45,666
to recap what we're all about.


8
00:00:48,846 --> 00:00:52,996
So SpriteKit is Apple's 2D frame
work for games and graphics.


9
00:00:53,426 --> 00:00:56,306
And we provide you tools
like integrated physics,


10
00:00:56,936 --> 00:00:58,896
particle simulations, actions


11
00:00:58,896 --> 00:01:00,726
and animations and,
of course, Sprite.


12
00:01:01,706 --> 00:01:06,206
We set out to design
SpriteKit to be both powerful


13
00:01:06,206 --> 00:01:08,926
but also really,
really easy to use.


14
00:01:09,016 --> 00:01:11,896
We wanted someone who's maybe
even has never written a game


15
00:01:11,896 --> 00:01:15,966
before to be able to come to
our platform, pick up SpriteKit


16
00:01:16,426 --> 00:01:17,766
and be up and running
in no time.


17
00:01:18,676 --> 00:01:22,176
We really wanted to deliver
something that lets you focus


18
00:01:22,176 --> 00:01:25,306
on what you do best and
that is making great games.


19
00:01:25,836 --> 00:01:33,246
We designed SpriteKit to work
across iPhone iPad and Mac


20
00:01:33,246 --> 00:01:35,936
and in addition to this media
you can deliver your app


21
00:01:35,936 --> 00:01:39,726
to multiple platforms, it also
means that you can prototype


22
00:01:39,726 --> 00:01:41,906
and test all of your
SpriteKit games directly


23
00:01:41,906 --> 00:01:47,416
on the Mac before you
even put it on a device.


24
00:01:47,566 --> 00:01:50,626
and with SpriteKit the framework
is really only half the story.


25
00:01:51,206 --> 00:01:54,626
Since the beginning we spent
a lot of effort on our tools


26
00:01:54,796 --> 00:01:57,506
and we have continued to
invest in that year after year


27
00:01:57,506 --> 00:02:02,036
to allow you to edit your
particle affects as well


28
00:02:02,036 --> 00:02:06,396
as entire scenes and new this
year actions and animations


29
00:02:06,396 --> 00:02:08,175
as well, directly inside


30
00:02:08,175 --> 00:02:11,606
of Xcode before you even
write a line of code.


31
00:02:13,516 --> 00:02:15,896
So now lets talk about the new
additions to the framework.


32
00:02:16,716 --> 00:02:19,576
The first one was requested
by developers quite a bit


33
00:02:20,226 --> 00:02:25,336
and this has to do with the
Viewport and the Viewport is


34
00:02:25,336 --> 00:02:28,046
when we're talking about which
portion of your scene is visible


35
00:02:28,046 --> 00:02:31,356
in a SpriteKit view at any time.


36
00:02:31,356 --> 00:02:34,336
The way this works now is if
you want to move your camera,


37
00:02:34,826 --> 00:02:38,426
you would have to realign
every piece of geometry


38
00:02:38,426 --> 00:02:41,056
within your game, or if you
wanted to follow along one


39
00:02:41,056 --> 00:02:42,826
of your hero characters
through your game world,


40
00:02:43,196 --> 00:02:44,756
you need to do those
calculations.


41
00:02:45,386 --> 00:02:48,376
Now this works, but it is
not as intuitive as we'd like


42
00:02:49,316 --> 00:02:51,596
and if you're also
running physics simulations


43
00:02:51,656 --> 00:02:54,806
on those game entities while
you're changing their actual


44
00:02:54,806 --> 00:02:57,526
position, you can get
artifacts from that.


45
00:02:58,716 --> 00:03:00,906
We thought we could do
something a little bit better.


46
00:03:01,986 --> 00:03:04,086
We would like to
introduce SKCameraNode.


47
00:03:04,556 --> 00:03:10,576
With the CameraNode we allow you
to simply specify which portion


48
00:03:10,576 --> 00:03:13,456
of your view is going to be
visible and the camera does this


49
00:03:13,456 --> 00:03:14,626
by representing the center


50
00:03:14,626 --> 00:03:16,016
of the visible content
in your scene.


51
00:03:16,626 --> 00:03:19,816
So now you can move the
CameraNode through your scene


52
00:03:20,246 --> 00:03:22,036
with the same logic
that you move all


53
00:03:22,036 --> 00:03:23,736
of your other game
entities through your scene.


54
00:03:24,716 --> 00:03:26,896
We have a property on
SKScene that will allow you


55
00:03:26,896 --> 00:03:29,746
to select the camera you'd
like to use so these scenes,


56
00:03:29,746 --> 00:03:31,806
you can have multiple
cameras throughout your scene


57
00:03:32,126 --> 00:03:34,576
and you can select the
active one via property.


58
00:03:35,976 --> 00:03:38,696
If you leave the property
as its default value of nil,


59
00:03:39,156 --> 00:03:41,666
we get the same experiences
you have today


60
00:03:41,666 --> 00:03:44,146
and all the SpriteKit
rendering is as it was.


61
00:03:44,656 --> 00:03:47,716
But the best feature of all


62
00:03:47,716 --> 00:03:50,906
about SKCameraNode
is that it's a node.


63
00:03:51,626 --> 00:03:54,366
And this means that you get
access to all the great features


64
00:03:54,366 --> 00:03:55,426
in SpriteKit for nodes.


65
00:03:55,706 --> 00:03:57,846
You have access to
our actions library


66
00:03:57,846 --> 00:03:59,706
so you can now run
actions on the camera.


67
00:04:00,176 --> 00:04:02,076
You have access to
our constraint system


68
00:04:02,076 --> 00:04:03,886
so you can apply
constraints to the camera.


69
00:04:04,246 --> 00:04:06,356
You can make it align
with game entities,


70
00:04:06,356 --> 00:04:08,766
you can make it always stay
within a certain distance


71
00:04:08,766 --> 00:04:10,026
of objects within your game.


72
00:04:10,616 --> 00:04:13,646
Beyond just moving the camera
you now have access to rotation


73
00:04:13,646 --> 00:04:16,065
and scale via those
properties on the node.


74
00:04:17,305 --> 00:04:21,726
So for example, in a game like
this, I may start the camera off


75
00:04:21,726 --> 00:04:24,726
to the side, and I might
apply a few move animations


76
00:04:24,766 --> 00:04:27,256
to reveal the bad guys in
my scene before centering


77
00:04:27,256 --> 00:04:28,236
on the hero character.


78
00:04:28,926 --> 00:04:31,166
And then I can apply a
scale action if I want


79
00:04:31,166 --> 00:04:33,446
to zoom the camera in or out.


80
00:04:33,446 --> 00:04:36,016
I can even use our follow
path action if I want


81
00:04:36,016 --> 00:04:37,816
to have the camera follow
a Bezier [Unintelligable]


82
00:04:37,816 --> 00:04:41,516
and if I really want to make my
user sick I can spin the camera


83
00:04:41,516 --> 00:04:42,946
around and throw it
around the scene.


84
00:04:43,766 --> 00:04:46,676
So you really have full
control over what part


85
00:04:46,676 --> 00:04:48,836
of your game is visible
now in SpriteKit


86
00:04:49,126 --> 00:04:49,806
and I think this is going


87
00:04:49,806 --> 00:04:51,966
to be a great addition
to your toolkit.


88
00:04:52,516 --> 00:04:57,216
[Applause]


89
00:04:57,716 --> 00:04:59,346
>> TIM ORIOL: In
addition to camera,


90
00:04:59,346 --> 00:05:00,856
we've also done work with audio.


91
00:05:01,486 --> 00:05:05,876
We're adding an SKAudioNode to
allow you to add positional,


92
00:05:06,026 --> 00:05:07,976
environmental sound right
in your SpriteKit game.


93
00:05:08,516 --> 00:05:12,606
[Applause]


94
00:05:13,106 --> 00:05:16,336
>> TIM ORIOL: We're leveraging
Apple's powerful AV audio engine


95
00:05:16,386 --> 00:05:18,116
framework that we
introduced last year.


96
00:05:18,526 --> 00:05:19,886
If you're not familiar
with this,


97
00:05:19,936 --> 00:05:22,336
it lets you specify
your tone soundscape


98
00:05:22,736 --> 00:05:24,886
and play sound emitters
within that environment


99
00:05:25,266 --> 00:05:27,896
and it will play them
back in correspondence


100
00:05:27,896 --> 00:05:29,566
to a listener position
that you specify.


101
00:05:30,686 --> 00:05:33,596
In SpriteKit we're going to
do all the wiring up for you.


102
00:05:34,356 --> 00:05:37,636
All you have to do is specify
the sound asset that you want


103
00:05:37,636 --> 00:05:40,716
to play back via
file name or URL


104
00:05:41,146 --> 00:05:44,526
and we'll use the AudioNodes
position in your scene,


105
00:05:44,526 --> 00:05:46,826
along with the listener
point that you specify,


106
00:05:46,826 --> 00:05:50,626
to wire up the whole audiograph
and give you really easy access


107
00:05:50,896 --> 00:05:53,096
to immersive, positional
audio in your game.


108
00:05:53,966 --> 00:05:56,556
If you want to dig a little
deeper and get your hands-on,


109
00:05:56,976 --> 00:06:00,106
you can access the
underlying AVAudioNode as well


110
00:06:00,426 --> 00:06:02,856
from a property on the
node and go to town


111
00:06:02,856 --> 00:06:05,766
and set any settings
you want on there.


112
00:06:05,966 --> 00:06:09,566
To demonstrate the types of
affects you'd be able to add


113
00:06:09,686 --> 00:06:12,646
to your SpriteKit game
using this new technology,


114
00:06:12,836 --> 00:06:14,436
I'm going to have an
example scene here


115
00:06:14,766 --> 00:06:15,926
where I've got my goblin.


116
00:06:15,926 --> 00:06:17,926
I'm going to make
him my listener,


117
00:06:18,186 --> 00:06:20,036
so I set my listener
position there.


118
00:06:21,076 --> 00:06:23,056
I have added a fireball
to my scene.


119
00:06:23,276 --> 00:06:24,756
This is going to
be my sound source,


120
00:06:24,756 --> 00:06:26,556
so I've added it
as an SKAudioNode.


121
00:06:27,276 --> 00:06:31,416
When I play this back
listen how the audio affects


122
00:06:31,416 --> 00:06:33,416
as the fireball moves
around the scene.


123
00:06:33,416 --> 00:06:37,476
You should notice it become
richer, more centered and louder


124
00:06:37,476 --> 00:06:41,196
as it gets close to our listener
and more one-sided and distant


125
00:06:41,666 --> 00:06:42,816
as it gets to the
side of the scene.


126
00:06:42,816 --> 00:06:43,976
Let's take a listen.


127
00:06:44,516 --> 00:06:59,306
[Sound effect]


128
00:06:59,806 --> 00:07:00,976
>> TIM ORIOL: So that's
pretty cool, right?


129
00:07:01,516 --> 00:07:05,236
[Applause]


130
00:07:05,736 --> 00:07:07,406
>> TIM ORIOL: Beyond the
additional set up I have


131
00:07:07,406 --> 00:07:09,696
to do nothing to update
these effects as they move


132
00:07:09,696 --> 00:07:11,686
around the game world,
they're completely tied


133
00:07:12,066 --> 00:07:14,016
to the game logic that's
driving my game already.


134
00:07:16,136 --> 00:07:20,766
Also this year we focused on
referencing and instancing.


135
00:07:21,196 --> 00:07:25,496
We know you spend a lot of time
designing high-quality content


136
00:07:25,756 --> 00:07:30,056
and animations for your games
and we want you to let you reuse


137
00:07:30,056 --> 00:07:33,376
that content anywhere
where you would like to.


138
00:07:33,376 --> 00:07:36,836
We're allowing you to
create serialized data files


139
00:07:37,256 --> 00:07:42,296
for your nodes and your
actions and then add them


140
00:07:42,366 --> 00:07:45,066
as a reference instead of just
loading them into your scene.


141
00:07:45,066 --> 00:07:48,336
This way, every time you make
a change to the source asset


142
00:07:48,656 --> 00:07:52,536
that is automatically reflected
in the content of your game.


143
00:07:54,196 --> 00:07:55,916
How do I do this for nodes?


144
00:07:56,736 --> 00:07:59,756
For nodes I design
part of my scene,


145
00:07:59,756 --> 00:08:02,816
maybe a background element,
or some scenery in our editor


146
00:08:02,816 --> 00:08:07,356
with an Xcode and then I can
just drag-and-drop those files


147
00:08:07,736 --> 00:08:08,936
into my main scene in Xcode


148
00:08:08,936 --> 00:08:10,616
and it will automatically
create a reference


149
00:08:10,896 --> 00:08:12,036
and it is all set up for you.


150
00:08:13,086 --> 00:08:15,216
If you want to do this
in code you can as well,


151
00:08:15,676 --> 00:08:18,696
you can manually construct
an SKReferenceNode,


152
00:08:19,066 --> 00:08:23,106
assign it a file name
or even a URL and when


153
00:08:23,106 --> 00:08:26,046
that content is first presented
in your game we'll load


154
00:08:26,046 --> 00:08:28,526
in that content based
on the latest version


155
00:08:28,806 --> 00:08:29,986
of the file that's
in your bundle.


156
00:08:30,616 --> 00:08:34,025
We can also do the
same thing for actions.


157
00:08:34,525 --> 00:08:37,395
With actions go check out
our great new action editor


158
00:08:37,976 --> 00:08:40,726
and beyond creating and
composing the actions


159
00:08:40,726 --> 00:08:43,066
in Xcode you can
give all them names.


160
00:08:43,746 --> 00:08:46,076
These names are the key to
using them in your game.


161
00:08:46,716 --> 00:08:50,446
We have added a selector to
SKAction called actionNamed.


162
00:08:51,016 --> 00:08:54,556
This works just like it does
for SKTexture and textureNamed.


163
00:08:55,056 --> 00:08:56,766
You pass in the name
of the action you want.


164
00:08:57,416 --> 00:09:00,996
We're going to automatically
look inside of your app bundle


165
00:09:01,706 --> 00:09:04,336
in all of the serialized
action files, find the one


166
00:09:04,336 --> 00:09:06,526
with the appropriate
name and then surface


167
00:09:06,526 --> 00:09:07,546
that to the application.


168
00:09:08,506 --> 00:09:11,276
Please use this multiple
times within your game.


169
00:09:11,276 --> 00:09:14,966
We have done all the work on
our side to take care of caching


170
00:09:15,356 --> 00:09:17,776
and we guarantee that the same
action will never be loaded


171
00:09:17,776 --> 00:09:21,436
from disk more than
once in your game.


172
00:09:21,666 --> 00:09:24,686
Sometimes you have an action
that you would want to use more


173
00:09:24,686 --> 00:09:26,866
than once but it will play
back faster or slower.


174
00:09:27,456 --> 00:09:29,616
We have added an additional
selector that will allow you


175
00:09:29,616 --> 00:09:31,326
to override the duration
of the action.


176
00:09:32,106 --> 00:09:34,006
This is a smart scaling
of the time,


177
00:09:34,096 --> 00:09:37,336
so even if you have a nested
action with nested groups


178
00:09:37,336 --> 00:09:39,806
and sequences, it will
dynamically scale it


179
00:09:39,806 --> 00:09:43,576
to the new duration so that each
component is the same fractional


180
00:09:43,606 --> 00:09:45,286
size to the original duration.


181
00:09:46,646 --> 00:09:50,226
Those are our utilities
for reusable components


182
00:09:50,596 --> 00:09:53,626
that you can use in the
same scene in the same game


183
00:09:53,626 --> 00:09:54,826
or across multiple games.


184
00:09:55,296 --> 00:09:59,046
We have also added a couple
new actions to the framework.


185
00:09:59,046 --> 00:10:01,746
So now that we have these
positional AudioNodes it would


186
00:10:01,746 --> 00:10:04,286
be nice to be able to control
the playback via actions.


187
00:10:04,476 --> 00:10:10,026
We have added play, pause, play
back rate as well as actions


188
00:10:10,096 --> 00:10:12,066
for volume and stereo panning.


189
00:10:12,636 --> 00:10:17,786
We also are doing a little bit
more with frame animations.


190
00:10:18,246 --> 00:10:21,486
We have always had
frame-based animations


191
00:10:21,486 --> 00:10:24,526
in SpriteKit via the
animate with textures action


192
00:10:25,546 --> 00:10:28,126
but last year we introduced
lighting to SpriteKit.


193
00:10:28,126 --> 00:10:31,766
With lighting you're able to
either automatically generate


194
00:10:32,226 --> 00:10:34,966
or supply your own normal
textures for sprites


195
00:10:34,966 --> 00:10:37,926
within your scene and then
we can light them dynamically


196
00:10:37,926 --> 00:10:40,196
at run time by moving the
light nodes around your scene.


197
00:10:41,596 --> 00:10:43,936
This works great for
elements that don't change,


198
00:10:43,936 --> 00:10:46,906
but if I have a frame-based
animation like this guy here,


199
00:10:47,666 --> 00:10:49,876
we want those highlights
and shadows to line


200
00:10:49,876 --> 00:10:50,806
up with the current position.


201
00:10:50,806 --> 00:10:53,366
We don't want a specular
highlight where the leg used


202
00:10:53,366 --> 00:10:56,126
to be, so we're adding
an animate


203
00:10:56,126 --> 00:10:58,256
with normal textures
action as well


204
00:10:58,506 --> 00:11:01,236
so you can use this
alongside the normal animation


205
00:11:01,726 --> 00:11:04,606
and get both of them in
sync for every frame.


206
00:11:04,686 --> 00:11:08,836
If I run that on our character
and add lighting to the scene,


207
00:11:09,126 --> 00:11:11,966
you can see that all the
highlights, shadows are kept


208
00:11:11,966 --> 00:11:15,586
in sync with every frame, no
matter how my character runs.


209
00:11:16,516 --> 00:11:24,406
[Applause]


210
00:11:24,906 --> 00:11:27,456
>> TIM ORIOL: So those are
additional features we added


211
00:11:27,456 --> 00:11:29,476
to the framework, we've
also done a lot of work


212
00:11:29,816 --> 00:11:33,046
to integrate well with the rest
of the system and take advantage


213
00:11:33,046 --> 00:11:35,256
of new hardware and frameworks


214
00:11:35,306 --> 00:11:36,806
that have been added
to our platform.


215
00:11:37,906 --> 00:11:40,126
First I want to talk
about Metal.


216
00:11:40,756 --> 00:11:43,516
We're making SpriteKit and
we're moving it directly on top


217
00:11:43,516 --> 00:11:48,026
of Metal on iOS and Mac
and it will be Metal backed


218
00:11:48,836 --> 00:11:51,366
on any device that
supports it and any device


219
00:11:51,366 --> 00:11:53,636
that doesn't will automatically
fall back to OpenGL.


220
00:11:54,816 --> 00:11:58,286
This means that you get
lower CPU utilization,


221
00:11:58,576 --> 00:12:00,526
it means you get better
draw call performance


222
00:12:00,526 --> 00:12:03,416
and better battery life
with zero action required


223
00:12:03,416 --> 00:12:04,646
to you as a developer.


224
00:12:05,516 --> 00:12:10,016
[Applause]


225
00:12:10,516 --> 00:12:11,036
>> TIM ORIOL: We're going


226
00:12:11,036 --> 00:12:13,796
to upgrade all SpriteKit apps
automatically, you don't have


227
00:12:13,796 --> 00:12:15,256
to recompile or resubmit.


228
00:12:15,686 --> 00:12:18,746
If it supports Metal
we're going to run it.


229
00:12:18,746 --> 00:12:19,756
For those of you
that are wondering


230
00:12:19,756 --> 00:12:22,456
about your custom shaders, we've
taken care of that as well.


231
00:12:23,006 --> 00:12:25,636
If you have a custom shader
in your game, we're supporting


232
00:12:25,636 --> 00:12:28,316
to upgrade almost all of
those to a Metal variant


233
00:12:28,516 --> 00:12:30,976
and that will run just fine
on Metal devices as well.


234
00:12:31,516 --> 00:12:35,966
[Applause]


235
00:12:36,466 --> 00:12:37,396
>> TIM ORIOL: Next up is Swift.


236
00:12:38,176 --> 00:12:39,976
We have gone through
the entire API


237
00:12:40,136 --> 00:12:42,366
and we've applied
nullability qualifiers


238
00:12:42,666 --> 00:12:45,866
and we've adopted Objective-C
generics on any array types


239
00:12:45,936 --> 00:12:47,716
that are used for
paramaters or return types


240
00:12:48,366 --> 00:12:50,576
and this will allow you
to access the full power


241
00:12:50,576 --> 00:12:53,376
of SpriteKit from Swift
without any hassle.


242
00:12:54,396 --> 00:12:56,226
This will also give you
enhanced type safety


243
00:12:56,226 --> 00:12:58,326
within your application
whether you're using Swift


244
00:12:59,166 --> 00:12:59,926
or Objective C.


245
00:13:00,506 --> 00:13:04,086
Now I would like to talk
a bit about SceneKit.


246
00:13:04,086 --> 00:13:06,906
With SceneKit in case you
don't know, we allow you


247
00:13:06,906 --> 00:13:09,106
to render SpriteKit
content in SceneKit


248
00:13:09,106 --> 00:13:10,666
and SceneKit content
in SpriteKit.


249
00:13:11,326 --> 00:13:13,966
This year we're allowing you
to go a little bit further


250
00:13:13,966 --> 00:13:16,536
and use all the SpriteKit
transitions that you know


251
00:13:16,536 --> 00:13:19,936
and love directly in
your SceneKits games


252
00:13:19,936 --> 00:13:22,756
and you don't even have to
be using SpriteKit to do it.


253
00:13:22,756 --> 00:13:26,726
You can use transitions like
the doorway one here, clip,


254
00:13:27,026 --> 00:13:29,706
or even the core image
based transition effects


255
00:13:30,166 --> 00:13:33,166
for your SceneKit game
and that all works fine.


256
00:13:34,296 --> 00:13:35,816
SceneKit has also done work


257
00:13:35,876 --> 00:13:38,196
to support Metal backed
context for this release.


258
00:13:38,886 --> 00:13:41,456
We take care of automatically
matching that.


259
00:13:41,456 --> 00:13:43,616
If you have a SceneKit game
that's running Metal backed


260
00:13:44,246 --> 00:13:45,496
and you have SpriteKit content


261
00:13:45,496 --> 00:13:46,956
in there we'll render
using Metal.


262
00:13:47,176 --> 00:13:49,096
If you have a SceneKit
game that's GL backed


263
00:13:49,526 --> 00:13:51,806
and you have SpriteKit in there,
we'll render using OpenGL.


264
00:13:52,256 --> 00:13:54,756
You never have additional
overhead for us


265
00:13:54,786 --> 00:14:00,356
to translate between
the two APIs.


266
00:14:00,356 --> 00:14:03,396
This year we've also
announced a brand-new framework


267
00:14:03,606 --> 00:14:04,646
called GameplayKit.


268
00:14:05,116 --> 00:14:09,736
This is really cool, it provides
you the building blocks you need


269
00:14:09,976 --> 00:14:14,326
to build your game Logic like
Entity/Component systems as well


270
00:14:14,536 --> 00:14:18,266
as state machines and also
provides great utilities


271
00:14:18,396 --> 00:14:21,516
like AI opponents and
deterministic random sources.


272
00:14:22,456 --> 00:14:24,566
One of my favorite ones
here, is its ability


273
00:14:24,566 --> 00:14:26,806
to provide a pathfinding
solution for your game.


274
00:14:26,976 --> 00:14:28,506
I think a lot of SpriteKit
developers are going


275
00:14:28,506 --> 00:14:29,186
to be interested in this.


276
00:14:30,466 --> 00:14:31,916
The way Pathfinding works


277
00:14:31,916 --> 00:14:34,726
in GameplayKit is you would
specify a navigation graph


278
00:14:35,416 --> 00:14:37,646
of the traversable areas
within your game world.


279
00:14:38,196 --> 00:14:41,436
Then you would make
connections between those nodes


280
00:14:41,786 --> 00:14:43,356
and give them an
associated cost.


281
00:14:44,626 --> 00:14:46,016
Once you have this graph,


282
00:14:46,576 --> 00:14:48,696
GameplayKit will then
calculate the optimal path


283
00:14:48,816 --> 00:14:50,086
between any two points
in the graph.


284
00:14:50,986 --> 00:14:52,756
How would I set one of
these up for a game?


285
00:14:53,986 --> 00:14:56,336
If I have this SpriteKit game
here, and I've got my hero


286
00:14:56,336 --> 00:14:58,156
in the lower corner, I have --


287
00:14:58,616 --> 00:15:01,676
maybe I want him to move
to a certain destination.


288
00:15:02,216 --> 00:15:05,856
I'll then specify a couple
of obstacles in my scene


289
00:15:05,856 --> 00:15:07,426
that are non-traversable
regions.


290
00:15:07,856 --> 00:15:12,076
Giving just this to
GameplayKit and a buffer radius


291
00:15:12,106 --> 00:15:14,716
around my character that
I want it to pass through,


292
00:15:15,056 --> 00:15:17,746
GameplayKit will take that
buffer radius into account,


293
00:15:17,746 --> 00:15:20,496
automatically expand all of
the obstacles so we never get


294
00:15:20,496 --> 00:15:22,556
within that radius of
any of the obstacles


295
00:15:23,246 --> 00:15:25,436
and then create the
valid connections


296
00:15:25,436 --> 00:15:27,686
and only the valid
connections within that graph,


297
00:15:27,856 --> 00:15:29,876
so you're never traversing
through the obstacles.


298
00:15:30,436 --> 00:15:33,566
You can then use this to perform
any pathfinding operations


299
00:15:33,956 --> 00:15:35,046
within your game.


300
00:15:35,596 --> 00:15:37,286
It is not specific to SpriteKit,


301
00:15:37,356 --> 00:15:40,636
so you can use GameplayKits
features with SceneKit,


302
00:15:40,636 --> 00:15:45,506
SpriteKit, OpenGL, Metal, any
kind of game scenario you want.


303
00:15:45,506 --> 00:15:47,426
If you are doing it with
SpriteKit we made it easier.


304
00:15:47,426 --> 00:15:49,316
You don't even need to
create the obstacles.


305
00:15:50,036 --> 00:15:53,696
You can create the obstacles
directly from a sprite's bounds,


306
00:15:54,296 --> 00:15:57,746
you can create the
obstacles from a physics body


307
00:15:57,746 --> 00:16:01,316
that you may have set
on the sprite or even


308
00:16:01,316 --> 00:16:03,376
from the alpha transparency
information


309
00:16:03,596 --> 00:16:05,986
in the texture that's associated
with that sprite in your game.


310
00:16:06,286 --> 00:16:09,206
This gives you really easy
access to harness the power


311
00:16:09,456 --> 00:16:11,976
of GameplayKits pathfinding
from your SpriteKit app.


312
00:16:12,516 --> 00:16:17,856
[Applause]


313
00:16:18,356 --> 00:16:19,826
>> TIM ORIOL: As I said before,


314
00:16:20,136 --> 00:16:22,186
the framework really
is only half the story.


315
00:16:22,646 --> 00:16:25,126
We have a number of
really cool enhancements


316
00:16:25,196 --> 00:16:27,916
to our tools this year and I'd
like to turn it over to Norman


317
00:16:27,916 --> 00:16:28,976
to tell you all about it.


318
00:16:29,516 --> 00:16:34,276
[Applause]


319
00:16:34,776 --> 00:16:35,956
>> NORMAN WANG: Thanks, Tim.


320
00:16:37,376 --> 00:16:40,456
Building games is a complex
and iteration process.


321
00:16:40,946 --> 00:16:44,286
Various parts of the game needs
to be iterated like game play,


322
00:16:44,886 --> 00:16:47,476
making sure a game
is fun, animation,


323
00:16:48,066 --> 00:16:50,236
making sure the character
movement is fluid,


324
00:16:50,826 --> 00:16:53,286
or art assets, making
sure that the pixels


325
00:16:53,286 --> 00:16:56,046
on the screen really pop.


326
00:16:56,246 --> 00:16:58,756
In addition to the
iteration problem you also,


327
00:16:58,756 --> 00:17:01,536
as a game developer, face
the scalability problem.


328
00:17:01,906 --> 00:17:05,386
How do I replicate a current
design across multiple levels.


329
00:17:05,386 --> 00:17:07,776
At Apple when we first set


330
00:17:07,776 --> 00:17:11,496
out to design SpriteKit we
wanted not only to provide you


331
00:17:11,496 --> 00:17:16,886
with a high performance and easy
to use API but also the tools


332
00:17:17,066 --> 00:17:20,425
to help you with scalability and
iteration so that we can focus


333
00:17:20,425 --> 00:17:21,586
on just building the game.


334
00:17:22,556 --> 00:17:24,006
Ever since day one release


335
00:17:24,006 --> 00:17:26,636
of the SpriteKit
framework we have created


336
00:17:26,836 --> 00:17:30,596
and continuously added
multiple tools as part of Xcode.


337
00:17:31,066 --> 00:17:34,536
Let me give you a quick tour
of what are the tools available


338
00:17:34,676 --> 00:17:36,396
for you as a SpriteKit user.


339
00:17:37,306 --> 00:17:40,156
The first thing I want to
talk about is texture atlas.


340
00:17:41,166 --> 00:17:42,236
One of the main benefits


341
00:17:42,236 --> 00:17:45,806
of using texture atlas is
performance improvement.


342
00:17:46,776 --> 00:17:49,806
SpriteKit uses texture
atlas to minimize the amount


343
00:17:49,806 --> 00:17:53,096
of draw calls sent out to the
GPU to optimize the efficiency.


344
00:17:53,756 --> 00:17:57,816
We don't want to force our
users to adopt a manual process


345
00:17:58,136 --> 00:18:01,826
by manually building these
texture atlas, [unintelligible]


346
00:18:02,546 --> 00:18:05,006
and every time when the
source acts as a change,


347
00:18:05,106 --> 00:18:07,476
this manual process will
have to be kickedoff again.


348
00:18:08,196 --> 00:18:11,346
Therefore it builds an automatic
texture atlas generator right


349
00:18:11,346 --> 00:18:12,166
inside the Xcode.


350
00:18:12,796 --> 00:18:15,276
To build one of these
atlas is as simple


351
00:18:15,276 --> 00:18:17,796
as dragging a folder
into your workspace.


352
00:18:18,686 --> 00:18:22,526
And we'll do something like this
automatically at build time.


353
00:18:22,526 --> 00:18:25,216
Each of the source images
is automatically going


354
00:18:25,216 --> 00:18:27,336
through a complex
post processing stage.


355
00:18:27,736 --> 00:18:31,916
For example, we trim the alpha
transparent pixels for the image


356
00:18:32,466 --> 00:18:34,366
that doesn't really contribute
anything to the screen.


357
00:18:34,906 --> 00:18:38,836
We rotate the image up to 90°
if they result a tighter fit


358
00:18:39,366 --> 00:18:41,206
or result a smaller
texture atlas.


359
00:18:41,986 --> 00:18:46,046
For each of the source
images, we also introspect each


360
00:18:46,046 --> 00:18:47,466
of the edges on the image


361
00:18:47,886 --> 00:18:50,856
and if they're fully opaque
we'll perform extrusion


362
00:18:50,856 --> 00:18:51,436
on the edge.


363
00:18:51,476 --> 00:18:54,276
So when you tile these
images on your scene,


364
00:18:54,376 --> 00:18:57,066
you will not see any seams,


365
00:18:57,246 --> 00:18:59,456
that's automatic
texture atlas generation.


366
00:19:00,446 --> 00:19:02,536
This year we have
made that even better.


367
00:19:03,286 --> 00:19:07,146
Now you can generate texture
atlas instead of asset catalog.


368
00:19:07,686 --> 00:19:09,186
There are two major benefits


369
00:19:09,186 --> 00:19:11,906
of generating texture
atlas using asset catalog.


370
00:19:12,276 --> 00:19:16,006
Number one, you have
precise control


371
00:19:16,006 --> 00:19:18,826
of the targeted device
resolutions matching


372
00:19:18,826 --> 00:19:19,856
with your image names.


373
00:19:20,426 --> 00:19:25,256
You have freedom to not follow
the post-fix in your image names


374
00:19:25,256 --> 00:19:28,506
like add 2X or add
2X to the iPhone,


375
00:19:29,196 --> 00:19:31,196
all of that can be
designed right in the UI.


376
00:19:32,356 --> 00:19:36,876
The second benefit is we support
[unintelligible] now inside the


377
00:19:36,876 --> 00:19:37,606
asset catalog.


378
00:19:38,236 --> 00:19:41,236
Each group of the target
resolution are going


379
00:19:41,236 --> 00:19:43,836
to be generated by their
device independent textures.


380
00:19:44,346 --> 00:19:45,836
When the user goes
to the App Store


381
00:19:45,836 --> 00:19:48,086
and downloads your
SpriteKit enabled games,


382
00:19:48,846 --> 00:19:51,776
only the texture atlas
that's relevant to his


383
00:19:51,776 --> 00:19:53,396
or her device will
get downloaded,


384
00:19:54,056 --> 00:19:57,686
not only does this minimize
the amount of bandwidth as well


385
00:19:57,746 --> 00:20:01,056
as install time for the app
to get on the users phone


386
00:20:01,416 --> 00:20:06,986
but also minimizes the amount
of storage overhead on the app.


387
00:20:07,256 --> 00:20:10,436
In addition, texture atlas
supports on-demand resources.


388
00:20:10,916 --> 00:20:14,776
On-demand resources is a
brand-new API that enables you


389
00:20:14,776 --> 00:20:18,246
to stream in art assets over
the network in the background


390
00:20:18,316 --> 00:20:19,206
when the game is running.


391
00:20:20,046 --> 00:20:22,096
SpriteKit builds that
support right in.


392
00:20:22,486 --> 00:20:24,886
These assets are
identified by tags.


393
00:20:25,266 --> 00:20:28,356
Here, for example, my
background elements in Xcode


394
00:20:28,356 --> 00:20:32,446
in Inspector I can specify what
are the tags associated with it.


395
00:20:33,016 --> 00:20:35,536
I'm calling it level
1 and background.


396
00:20:35,656 --> 00:20:38,516
These are the tags, you can
use either of these tags


397
00:20:38,576 --> 00:20:42,226
to retrieve this asset and
start background streaming


398
00:20:42,486 --> 00:20:44,566
when your application
requests it.


399
00:20:46,536 --> 00:20:51,426
Particle effects really help
you set up the game right.


400
00:20:52,176 --> 00:20:56,846
We provide SKEmitterNode as a
very powerful and flexible APIs


401
00:20:57,066 --> 00:20:58,696
in the framework for you to use.


402
00:20:59,596 --> 00:21:02,856
The downside of being
powerful and flexible is


403
00:21:02,856 --> 00:21:05,836
that it also comes with 49
properties for you to set.


404
00:21:07,136 --> 00:21:09,136
To set a combination
of permutations


405
00:21:09,136 --> 00:21:12,806
of these 49 properties to
match with the look and feel


406
00:21:12,806 --> 00:21:15,456
that you're going after
is time consuming.


407
00:21:16,106 --> 00:21:20,316
Therefore we build a particle
editor right inside of Xcode


408
00:21:20,746 --> 00:21:23,076
that uses the same
SpriteKit rendering engine


409
00:21:23,406 --> 00:21:27,186
that gives you the visual look
right inside of your work space


410
00:21:27,186 --> 00:21:31,126
so that you can tweak and change
any of these 49 properties


411
00:21:31,496 --> 00:21:33,296
without ever having
to write any lines


412
00:21:33,296 --> 00:21:35,076
of code or rebuild your game.


413
00:21:35,076 --> 00:21:37,946
These particles are
going to be exported


414
00:21:37,946 --> 00:21:41,936
as a really small data file that
can be serialized and deployed


415
00:21:41,936 --> 00:21:44,676
across multiple levels or
across multiple projects.


416
00:21:47,556 --> 00:21:50,576
SpriteKit also supports
Quick Look.


417
00:21:50,576 --> 00:21:53,176
Here for example I'm trying
to learn the new Swift.


418
00:21:53,696 --> 00:21:57,576
I create a brand-new
playground and try to play


419
00:21:57,576 --> 00:22:00,746
around with the SpriteKit
API using the new Swift


420
00:22:00,746 --> 00:22:01,686
2.0 language.


421
00:22:02,266 --> 00:22:06,596
What I'm doing here is I'm
creating a bad guy character,


422
00:22:07,266 --> 00:22:09,156
called bad guy, which
is a sprite node,


423
00:22:09,316 --> 00:22:12,226
it copied a single texture
called the car hood,


424
00:22:13,186 --> 00:22:16,956
and in addition I create two
children node that appear


425
00:22:16,956 --> 00:22:21,166
under this bad guy, one has
the texture of the roof,


426
00:22:21,686 --> 00:22:23,626
the other one has the
texture of the trunk.


427
00:22:24,726 --> 00:22:29,326
What's happening here, SpriteKit
will do a partial off-screen


428
00:22:29,326 --> 00:22:31,216
rendering of this
subterrain when you try


429
00:22:31,216 --> 00:22:32,646
to introspect the sprite node


430
00:22:32,886 --> 00:22:36,336
and it will provide the result
right inside of the playground


431
00:22:36,336 --> 00:22:39,546
for you so that every step
along the way when you try


432
00:22:39,546 --> 00:22:42,406
to learn a new language or
make changes to the object,


433
00:22:42,786 --> 00:22:45,586
you will see the live changes
right inside of the playground.


434
00:22:47,176 --> 00:22:50,796
In addition the Quicklook
in SpriteKit also supported


435
00:22:50,796 --> 00:22:54,086
when you debug your applications
whether they're in Swift,


436
00:22:54,846 --> 00:22:57,966
Objective-C, whether they
are running on iOS devices


437
00:22:58,266 --> 00:22:59,586
or running on Mac OS X.


438
00:23:00,456 --> 00:23:03,946
So here I'm trying to debug an
application that I have written,


439
00:23:05,036 --> 00:23:06,356
I trigger a break point,


440
00:23:06,416 --> 00:23:10,126
the target process is actually
paused, but we're still able


441
00:23:10,126 --> 00:23:14,086
to wrap the partial screen
rendering of the current texture


442
00:23:14,706 --> 00:23:15,926
and show that in the debugger.


443
00:23:16,366 --> 00:23:20,826
So you know exactly what that
texture is before I go ahead


444
00:23:20,826 --> 00:23:23,416
and grab it to assign
to an SKSpriteNode.


445
00:23:23,926 --> 00:23:29,826
Last year in iOS 8 we
announced a visual scene editor


446
00:23:29,826 --> 00:23:32,896
which will allow you to set up a
full scene layout without having


447
00:23:32,896 --> 00:23:36,306
to write any lines of code.


448
00:23:36,516 --> 00:23:41,666
Not only you can set up the
position, rotation and scale


449
00:23:41,666 --> 00:23:44,006
on each of the available
nodes that are in the scene,


450
00:23:44,396 --> 00:23:47,816
but you can also define its
physics properties like setting


451
00:23:47,816 --> 00:23:51,506
up a graphic, gravities,
mass, frictions,


452
00:23:52,036 --> 00:23:55,756
you can also perform
live simulations


453
00:23:56,196 --> 00:23:59,126
of these physics
simulations without having


454
00:23:59,126 --> 00:24:01,626
to launch your game or
rebuild the application.


455
00:24:03,116 --> 00:24:06,946
SpriteKit will support some
advanced rendering techniques


456
00:24:06,946 --> 00:24:08,066
like custom shaders.


457
00:24:08,766 --> 00:24:12,906
Here in my level the waterfall
in the background and the fog


458
00:24:12,906 --> 00:24:15,316
on the bottom I actually
implement using two


459
00:24:15,396 --> 00:24:16,256
custom shaders.


460
00:24:16,726 --> 00:24:20,056
To add the shaders,
it is a matter of --


461
00:24:20,556 --> 00:24:22,846
it is as simple as opening
up the assist editor,


462
00:24:22,956 --> 00:24:25,076
it automatically shows
you the current scene


463
00:24:25,636 --> 00:24:27,656
with the shader that's
being rendering


464
00:24:27,656 --> 00:24:30,136
and it will show you
the assistant editor


465
00:24:30,136 --> 00:24:31,146
with the shader source code.


466
00:24:31,536 --> 00:24:33,356
Any live changes you make


467
00:24:33,356 --> 00:24:35,976
in the assistant editor will
automatically recompile the


468
00:24:35,976 --> 00:24:39,406
shader, open up to OpenGL
or Metal and provide you


469
00:24:39,406 --> 00:24:42,846
with a real realtime
preview rather than having


470
00:24:42,846 --> 00:24:46,086
to build a game, go
through the level,


471
00:24:46,596 --> 00:24:48,586
go through the certain
spots and trigger the event


472
00:24:48,896 --> 00:24:52,626
to see whether I'm sending
this stream to OpenGL or Metal,


473
00:24:52,626 --> 00:24:54,296
whether it compiles
successfully or not.


474
00:24:54,656 --> 00:24:56,386
It saves a lot of
iteration time.


475
00:24:58,116 --> 00:25:00,956
This year we have made
a lot of enhancements


476
00:25:00,956 --> 00:25:02,066
to the visual scene editor.


477
00:25:02,066 --> 00:25:05,246
The number one requested
feature is custom classes.


478
00:25:06,266 --> 00:25:11,556
Now in the level my hero
character I can specify its


479
00:25:11,596 --> 00:25:16,156
class is called main
character class.


480
00:25:16,156 --> 00:25:18,666
When the scene is
de-serialized at runtime,


481
00:25:19,006 --> 00:25:21,526
whether your application
is written in Objective-C


482
00:25:21,526 --> 00:25:28,306
or Swift the correct class will
be instantiated and created


483
00:25:28,306 --> 00:25:33,336
when the scene is running
and loaded on the scene.


484
00:25:33,336 --> 00:25:38,576
In addition we have been
very busy adding the support


485
00:25:38,576 --> 00:25:41,156
from day one of the
brand-new SKNodes.


486
00:25:41,566 --> 00:25:44,766
Now you can design your
scene with the Camera nodes,


487
00:25:45,356 --> 00:25:47,486
position AudioNode and as well


488
00:25:47,486 --> 00:25:50,146
as the ReferenceNode right
inside of the editor.


489
00:25:50,486 --> 00:25:53,646
It is really cool to be able
to see the camera sending


490
00:25:53,646 --> 00:25:56,546
up the correct scale,
the zoom factor as well


491
00:25:56,546 --> 00:25:58,976
as run actions right inside
of the scene editor rather


492
00:25:58,976 --> 00:26:01,516
than having to rebuild
your game.


493
00:26:02,106 --> 00:26:06,206
You can also set up the
position of the SKAudioNode,


494
00:26:06,686 --> 00:26:11,866
move them around and hear the
actual sound change to make sure


495
00:26:11,866 --> 00:26:14,186
that your effect is set up
correctly on your scene.


496
00:26:14,786 --> 00:26:18,706
Now this year, one of the
most exciting features


497
00:26:18,706 --> 00:26:21,406
on the tools front is
to have the ability


498
00:26:21,406 --> 00:26:23,086
to design complex actions.


499
00:26:23,956 --> 00:26:26,646
You can design a
really complex action


500
00:26:27,046 --> 00:26:28,846
by using the fundamental
building blocks


501
00:26:28,846 --> 00:26:32,186
that we've provided as part
of SpriteKit action runtime.


502
00:26:32,756 --> 00:26:38,766
It is timeline based, also just
like any other editors we have


503
00:26:38,766 --> 00:26:42,366
in Xcode it provides
live visualization.


504
00:26:43,356 --> 00:26:47,096
You can use not only
to create 2D actions,


505
00:26:47,816 --> 00:26:50,126
you can also create
3D animations


506
00:26:50,276 --> 00:26:52,706
for SceneKit, it's
the same editor.


507
00:26:53,826 --> 00:26:56,206
You can also create
cinematic animations


508
00:26:56,746 --> 00:26:59,606
which will be the animations
saved out as part of scene


509
00:26:59,606 --> 00:27:02,676
when the scene is loaded
that automatically gets run


510
00:27:02,676 --> 00:27:05,326
for any node that has
action in a scene.


511
00:27:06,636 --> 00:27:11,356
You can also create interactive
animations like running cycle


512
00:27:11,706 --> 00:27:14,266
or jump animations,
falling off from a ledge


513
00:27:14,266 --> 00:27:19,006
and trigger these animations
with one or two lines of code


514
00:27:19,946 --> 00:27:21,366
at different game
play scenarios.


515
00:27:25,216 --> 00:27:28,976
Here I have a scene, I designed
to move the camera around,


516
00:27:28,976 --> 00:27:30,436
I focus on the main character,


517
00:27:30,436 --> 00:27:32,126
the main character
starts animating,


518
00:27:32,126 --> 00:27:34,086
running the walk cycle, and walk


519
00:27:34,086 --> 00:27:35,676
across the scene,
that's my opening.


520
00:27:35,736 --> 00:27:42,326
You can do that in less
than 5 minutes of your time.


521
00:27:42,516 --> 00:27:45,486
Now another major focus
this year on the tools front


522
00:27:45,486 --> 00:27:48,106
for both 2D and 3D is
to have the ability


523
00:27:48,106 --> 00:27:50,546
of doing referencing
and instancing.


524
00:27:50,956 --> 00:27:56,666
On SpriteKit side with support
references on the actions


525
00:27:56,716 --> 00:28:00,336
as well as references on the
node which is your art assets


526
00:28:00,336 --> 00:28:03,056
in your scene, these
are reusable components


527
00:28:03,146 --> 00:28:05,386
and they are data files
that can be shared


528
00:28:05,666 --> 00:28:07,626
across multiple projects,


529
00:28:07,886 --> 00:28:10,066
multiple persons
or multiple levels.


530
00:28:10,936 --> 00:28:12,436
To use these reference files,


531
00:28:12,436 --> 00:28:14,136
you don't have to
write any code.


532
00:28:14,746 --> 00:28:19,386
To create the reference
animation is really easy,


533
00:28:19,736 --> 00:28:24,236
we provide a brand new SK
action file template in Xcode 7


534
00:28:24,236 --> 00:28:27,066
and you can a pure
animation file,


535
00:28:27,466 --> 00:28:31,156
in there design all your complex
animation, give it out a name,


536
00:28:31,486 --> 00:28:34,846
each of these actions can be
retrieved with the SKAction,


537
00:28:34,846 --> 00:28:38,246
actionNamed selector to
create the right instance


538
00:28:38,246 --> 00:28:39,256
and to add it to your scene.


539
00:28:40,006 --> 00:28:44,306
Any of the referenced actions,
automatically will be picked out


540
00:28:44,306 --> 00:28:46,216
and reside in object library.


541
00:28:46,346 --> 00:28:48,686
If you want to have
the actions reused


542
00:28:48,686 --> 00:28:50,986
across multiple intro scenes


543
00:28:50,986 --> 00:28:54,086
in different levels it is just
a matter of drag-n-drop these


544
00:28:54,086 --> 00:28:55,176
from the object library.


545
00:28:56,756 --> 00:28:59,396
Creating reference
nodes is also easier.


546
00:29:00,806 --> 00:29:04,266
It is just as simple as
dragging another SKS file


547
00:29:04,266 --> 00:29:06,696
from your work space
to your scene.


548
00:29:07,546 --> 00:29:09,866
These references,
we automatically


549
00:29:09,866 --> 00:29:12,486
in the editor create
SKReferenceNode instances


550
00:29:12,776 --> 00:29:14,606
and set up correct URL for you.


551
00:29:15,096 --> 00:29:19,896
You can also use it, the API
to build a custom collection


552
00:29:20,406 --> 00:29:23,616
of the nodes, for example, if I
have a bird house that I'm going


553
00:29:23,616 --> 00:29:25,396
to be using as a level prop


554
00:29:25,396 --> 00:29:29,056
across multiple levels I
can just build that and have


555
00:29:29,056 --> 00:29:32,696
that instance in multiple
levels and any changes


556
00:29:32,696 --> 00:29:33,936
to the original design


557
00:29:33,996 --> 00:29:36,506
of the bird house will
automatically get reflected


558
00:29:36,506 --> 00:29:39,146
in each of the instances
that use the reference.


559
00:29:41,816 --> 00:29:45,686
Here you can also
manually change


560
00:29:45,686 --> 00:29:48,596
and update the reference
file in the editor as well.


561
00:29:48,596 --> 00:29:54,916
Next, I like to invite Tyler on
stage to give you a quick demo


562
00:29:55,056 --> 00:29:56,976
of these great new
features in Xcode.


563
00:29:57,516 --> 00:30:02,496
[Applause]


564
00:30:02,996 --> 00:30:03,816
>> TYLER CASELLA:
Thank you Norman.


565
00:30:03,996 --> 00:30:06,996
As you see, we have a lot of
great new additions to SpriteKit


566
00:30:06,996 --> 00:30:09,596
and Xcode 7, and I'd like to
show you how they'll integrate


567
00:30:09,596 --> 00:30:12,166
in your development workflow
by showing you a quick demo


568
00:30:12,166 --> 00:30:15,246
of creating a simple level,
adding a cut scene to it,


569
00:30:15,576 --> 00:30:17,336
and then creating some
interactive game play.


570
00:30:22,176 --> 00:30:25,526
Well see here, I just
started a game project


571
00:30:25,526 --> 00:30:28,596
and I've started a level
within this project.


572
00:30:28,596 --> 00:30:31,576
I've got a player sprite
as well as some platforms.


573
00:30:32,056 --> 00:30:35,656
The first thing I want to do is
to create the environment in it


574
00:30:35,916 --> 00:30:39,076
by adding a background and
some foreground elements.


575
00:30:39,636 --> 00:30:42,466
Previously I would do this
directly into the scene


576
00:30:42,466 --> 00:30:45,496
and then create copies for
each instance that I needed.


577
00:30:45,896 --> 00:30:48,686
This quickly becomes cumbersome
if I need to make changes


578
00:30:48,686 --> 00:30:51,016
because I need to make the
change in many different spots.


579
00:30:51,306 --> 00:30:53,076
It is not easy to reuse.


580
00:30:53,076 --> 00:30:55,516
We have addressed that
with the ReferenceNode.


581
00:30:56,196 --> 00:30:58,726
So see here in a separate
file I've created all


582
00:30:58,726 --> 00:31:00,856
of my elements for
our environment.


583
00:31:01,096 --> 00:31:03,646
I've got a nice background
with the waterfall as well


584
00:31:03,646 --> 00:31:05,646
as a nice foreground fog effect.


585
00:31:06,396 --> 00:31:08,146
What I can do to
reference the contents


586
00:31:08,176 --> 00:31:10,826
of this file is simply
drag it into our level.


587
00:31:11,246 --> 00:31:13,376
Now we've automatically
created a ReferenceNode


588
00:31:13,576 --> 00:31:14,776
with all those elements.


589
00:31:14,856 --> 00:31:18,816
You will notice even the
foreground Z value is preserved


590
00:31:18,816 --> 00:31:20,356
as we add it into our scene.


591
00:31:21,226 --> 00:31:23,746
So go ahead and create a
few copies of these to fill


592
00:31:23,746 --> 00:31:26,716
out our level and you'll
notice that I'm creating copies


593
00:31:26,716 --> 00:31:28,326
of the ReferenceNode itself


594
00:31:28,586 --> 00:31:31,206
and not the actual
individual elements


595
00:31:31,326 --> 00:31:33,276
within our reference scene.


596
00:31:33,896 --> 00:31:37,296
What's great about that is,
later on in my project when I,


597
00:31:37,606 --> 00:31:39,966
for example, want to change
the background texture


598
00:31:39,966 --> 00:31:41,246
because it doesn't quite match


599
00:31:41,246 --> 00:31:43,736
with the platforms I've got
here, I don't have to make


600
00:31:43,736 --> 00:31:45,786
that change on the
three instances I have.


601
00:31:46,146 --> 00:31:48,136
Instead I can go to
our single source


602
00:31:48,486 --> 00:31:53,486
and make this change only once
and that change is echoed to all


603
00:31:53,486 --> 00:31:55,906
of our instances
within our level.


604
00:31:56,516 --> 00:32:00,646
[Applause]


605
00:32:01,146 --> 00:32:01,726
>> TYLER CASELLA: Next I'd


606
00:32:01,726 --> 00:32:03,846
like to create a cut
scene within our level.


607
00:32:03,846 --> 00:32:07,066
I'll do that by using
our new action editor


608
00:32:07,266 --> 00:32:08,096
that we've introduced.


609
00:32:08,556 --> 00:32:10,836
Previously you could only
create actions in code


610
00:32:10,836 --> 00:32:13,536
which is very difficult
to visualize so we wanted


611
00:32:13,536 --> 00:32:16,696
to create an editor that was
easy to create complex actions


612
00:32:16,696 --> 00:32:19,146
from and give you
realtime previews


613
00:32:19,146 --> 00:32:19,996
of what you're creating.


614
00:32:20,786 --> 00:32:22,376
To access the action editor,


615
00:32:22,376 --> 00:32:23,996
you just click the
disclosure button here


616
00:32:23,996 --> 00:32:26,326
in the bottom-left corner and
you'll see you're presented


617
00:32:26,326 --> 00:32:29,136
with all of the nodes in your
scene as well as the timeline


618
00:32:29,136 --> 00:32:30,876
of all of the actions
they contain.


619
00:32:31,266 --> 00:32:33,416
We'll see here our player
has one action on it,


620
00:32:33,416 --> 00:32:35,136
which is an animate
with textures action,


621
00:32:35,536 --> 00:32:37,366
and we've got our
idle frames within it.


622
00:32:37,486 --> 00:32:38,756
So now when I click animate,


623
00:32:39,036 --> 00:32:41,856
we'll see that our player is
running this animate action


624
00:32:42,146 --> 00:32:42,826
within our scene.


625
00:32:43,216 --> 00:32:46,376
Let's go ahead and make a
cut scene within our level,


626
00:32:46,376 --> 00:32:49,266
we're going to make the
player run across the level.


627
00:32:50,106 --> 00:32:52,016
To do that, I'll
start by filtering


628
00:32:52,016 --> 00:32:54,186
down to just our player
interaction editor


629
00:32:54,986 --> 00:32:57,506
and to just the actions
within our object library.


630
00:32:57,696 --> 00:33:01,276
We provide you a set of
building block actions to use


631
00:33:01,276 --> 00:33:03,056
to create your more
complex actions


632
00:33:03,056 --> 00:33:04,656
which is exactly
what I'm going to do.


633
00:33:05,056 --> 00:33:08,216
We'll start by adding a move
action into our cut scene.


634
00:33:08,216 --> 00:33:09,206
All I have to do is drag it


635
00:33:09,206 --> 00:33:10,966
from the object library
into our timeline.


636
00:33:11,186 --> 00:33:16,256
Now for this movement I'll go
850 units in the X direction


637
00:33:16,256 --> 00:33:18,246
and we're going to ease in
for more natural motion.


638
00:33:18,246 --> 00:33:20,086
Now when I click
animate we'll see


639
00:33:20,086 --> 00:33:22,226
that the player is
running that action.


640
00:33:22,566 --> 00:33:24,656
That was a bit quick, so
let's change the duration


641
00:33:24,656 --> 00:33:27,436
by just dragging out the
action to about 2 seconds.


642
00:33:27,756 --> 00:33:30,626
I'm going to adjust the
scale so now when we run,


643
00:33:30,836 --> 00:33:32,576
the movement has a
much better velocity.


644
00:33:32,576 --> 00:33:36,216
Now I'm going to also make
the player run as he moves


645
00:33:36,216 --> 00:33:39,596
across the screen so I'll add in
an animate with textures action.


646
00:33:40,336 --> 00:33:42,836
To define what animation
we're going to be playing,


647
00:33:43,006 --> 00:33:45,426
I can just go into the
media library and filter


648
00:33:45,426 --> 00:33:46,746
down to our run frames.


649
00:33:47,336 --> 00:33:49,896
I can select them and simply
drag them into our action.


650
00:33:50,386 --> 00:33:55,006
Now when we run we'll see that
the player plays that animation.


651
00:33:55,406 --> 00:33:58,056
But of course we're only
playing it once so we're going


652
00:33:58,056 --> 00:34:00,476
to add a loop so that we
can span the whole time


653
00:34:00,476 --> 00:34:01,546
of our movement.


654
00:34:01,546 --> 00:34:03,916
I can create a loop by
clicking this loop button here


655
00:34:03,916 --> 00:34:05,276
in the corner and I'm presented


656
00:34:05,276 --> 00:34:06,636
with all the controls
for looping.


657
00:34:06,956 --> 00:34:10,426
I can increase the number of
iterations, I can decrease


658
00:34:10,426 --> 00:34:11,636
or I can loop indefinitely.


659
00:34:12,196 --> 00:34:14,516
In our case I'm going to
only want to loop twice


660
00:34:14,516 --> 00:34:16,676
and then I'll adjust the
duration to match our movement.


661
00:34:17,025 --> 00:34:19,106
Now we have the player
running across the scene.


662
00:34:20,346 --> 00:34:22,926
Next we've got two
gaps within the level


663
00:34:22,926 --> 00:34:24,616
so let's make the
player jump over them.


664
00:34:24,616 --> 00:34:30,085
In the action editor we're
able to scrub to specific times


665
00:34:30,085 --> 00:34:33,815
within our action so I can scrub
to just before we reach the gap


666
00:34:33,936 --> 00:34:35,886
and we'll add another
movement action.


667
00:34:36,335 --> 00:34:38,045
We'll snap right to
where we're scrubbed.


668
00:34:39,616 --> 00:34:43,985
For this movement we'll move
in the Y direction 100 units


669
00:34:44,176 --> 00:34:46,496
and I'll ease out so that
we slow down as we get


670
00:34:46,496 --> 00:34:47,496
to the top of our jump.


671
00:34:48,416 --> 00:34:51,306
Then I'll scrub once again
towards the middle of our gap


672
00:34:51,306 --> 00:34:53,436
and I'll adjust the duration
so that we reach the top


673
00:34:53,436 --> 00:34:56,076
of our jump right there
in the center of the gap.


674
00:34:56,786 --> 00:35:00,736
Then I'll copy the first part of
our action and simply reverse it


675
00:35:00,886 --> 00:35:02,896
to get our full motion
of the jump.


676
00:35:03,886 --> 00:35:05,486
That last step for
our jump is I'm going


677
00:35:05,486 --> 00:35:07,806
to create one more
animation which is going


678
00:35:07,806 --> 00:35:11,086
to have our jump frames so I'll
follow the same process going


679
00:35:11,086 --> 00:35:14,066
to our media library, filter
down to our jump frames


680
00:35:14,146 --> 00:35:15,266
and add them to our action


681
00:35:16,306 --> 00:35:18,906
and now we've got the player
jumping over that first gap.


682
00:35:19,466 --> 00:35:23,336
Of course we have one more
gap so one option I have is


683
00:35:23,336 --> 00:35:25,876
to simply copy these
actions I have just added


684
00:35:25,876 --> 00:35:28,696
and displace them, but then we
run into the same issue we had


685
00:35:28,696 --> 00:35:31,096
with the background where if
I want it make changes to it,


686
00:35:31,096 --> 00:35:33,756
I'm going to have to do it to
every instance I have copied.


687
00:35:34,096 --> 00:35:37,116
It very likely I'm going to
want to reuse these actions


688
00:35:37,116 --> 00:35:37,976
in different levels


689
00:35:37,976 --> 00:35:39,756
or potentially even
a different project.


690
00:35:40,366 --> 00:35:41,546
We've addressed this
the same way


691
00:35:41,546 --> 00:35:44,076
with the background allowing
you to reference actions.


692
00:35:44,416 --> 00:35:46,636
To do that we've introduced
a new file in Xcode


693
00:35:46,826 --> 00:35:48,526
which is the SpriteKit
action file.


694
00:35:49,276 --> 00:35:51,966
This is a file where you can
place these actions with a name


695
00:35:51,966 --> 00:35:54,096
that you can then
reference across scenes,


696
00:35:54,296 --> 00:35:55,826
projects, and in code.


697
00:35:56,296 --> 00:35:57,816
Let's go ahead, make
one of those files


698
00:35:58,226 --> 00:36:00,676
by right clicking our selected
actions and we're going


699
00:36:00,676 --> 00:36:01,756
to convert it to a reference.


700
00:36:02,176 --> 00:36:04,806
I'm prompted to give it a
name, so I'll name it jump


701
00:36:05,216 --> 00:36:07,426
and we can select an
action file to put this in,


702
00:36:07,426 --> 00:36:09,346
and in our case we'll
create the new file.


703
00:36:10,866 --> 00:36:13,736
So I'll name this file player
actions because I'm going


704
00:36:13,736 --> 00:36:16,366
to put all the actions related
to the player into this file.


705
00:36:17,896 --> 00:36:19,466
The file is added to our project


706
00:36:19,556 --> 00:36:22,056
and you will see now those
actions that we created


707
00:36:22,056 --> 00:36:24,426
for the jump are within our
file under the name jump


708
00:36:24,806 --> 00:36:27,836
and within our scene
we're simply referencing


709
00:36:27,906 --> 00:36:28,616
those actions.


710
00:36:29,696 --> 00:36:31,036
So now all the actions
that you put


711
00:36:31,036 --> 00:36:33,426
into this file are completely
independent of any scene


712
00:36:33,426 --> 00:36:35,256
or project but you're going
to often want to edit them


713
00:36:35,256 --> 00:36:36,906
in the context of some scene.


714
00:36:37,416 --> 00:36:40,116
We allow you to set a preview
screen that you can assign any


715
00:36:40,116 --> 00:36:42,546
of the actions in your file on
any of the nodes in your scene.


716
00:36:42,546 --> 00:36:45,376
So for example, I can preview my
jump on any node in this scene


717
00:36:45,576 --> 00:36:46,866
or I can set up my own scene


718
00:36:46,946 --> 00:36:48,696
with different orientations
of the player.


719
00:36:48,966 --> 00:36:52,046
For example, I can preview
what this jump action will look


720
00:36:52,046 --> 00:36:55,106
like on the left and right
orientations of my player.


721
00:36:55,656 --> 00:36:59,186
So now on our level I'll
go ahead and scrub back


722
00:36:59,186 --> 00:37:02,686
to our next gap and in our
object library we automatically


723
00:37:02,686 --> 00:37:04,446
populate it with
all of the actions


724
00:37:04,446 --> 00:37:05,776
that are available to reference.


725
00:37:05,886 --> 00:37:08,956
So that jump action that I
just created is automatically


726
00:37:09,006 --> 00:37:12,036
in our object library and
I can just drag it in.


727
00:37:12,036 --> 00:37:13,366
So now we've got our
finished cut scene.


728
00:37:13,406 --> 00:37:14,526
Let's take a look.


729
00:37:16,656 --> 00:37:17,556
That looks great.


730
00:37:18,356 --> 00:37:20,666
Now I want to show you how
you can use these actions


731
00:37:20,666 --> 00:37:23,156
within code itself instead
of just a cut scene.


732
00:37:23,846 --> 00:37:26,516
What I want to do is create a
named action for every state


733
00:37:26,516 --> 00:37:29,996
that the player can be in and
then reference those in code.


734
00:37:30,256 --> 00:37:35,366
I will create a reference, a
referencable action called run


735
00:37:35,486 --> 00:37:38,976
that has our animation and
I'll do the same for our idle.


736
00:37:39,596 --> 00:37:42,186
I'll go ahead and delete these


737
00:37:42,186 --> 00:37:44,356
because we'll do this
interactively now


738
00:37:44,706 --> 00:37:48,166
and you can see in our action
file we now have the three


739
00:37:48,166 --> 00:37:50,256
states present within this file.


740
00:37:50,666 --> 00:37:52,626
Now to use these
within code all you have


741
00:37:52,626 --> 00:37:54,626
to do is use the new
selectors we have introduced,


742
00:37:54,986 --> 00:37:57,066
the action name selectors
providing them


743
00:37:57,066 --> 00:37:58,956
with the names we have just
created the actions with,


744
00:37:59,276 --> 00:38:00,966
idle, run, and jump.


745
00:38:01,666 --> 00:38:04,516
Now when I run our game
you can see the actions


746
00:38:04,516 --> 00:38:07,356
that I have just created are
being used in the game itself.


747
00:38:08,176 --> 00:38:08,876
Interactively.


748
00:38:09,866 --> 00:38:11,856
The real power of this
comes when you want


749
00:38:11,856 --> 00:38:12,986
to make a change
to your actions.


750
00:38:13,016 --> 00:38:15,006
I can go in my action
file and let's


751
00:38:15,006 --> 00:38:18,116
for example make the player
do a flip when we jump.


752
00:38:18,116 --> 00:38:22,636
I can go in here and I can add
a rotate action to the jump,


753
00:38:23,336 --> 00:38:27,786
give it a value of negative
360, ease in and out


754
00:38:27,786 --> 00:38:30,156
and now I run the game without
even recompiling our game,


755
00:38:30,556 --> 00:38:31,436
we can see the changes


756
00:38:31,436 --> 00:38:33,976
that I have made are now
applied to our player.


757
00:38:34,516 --> 00:38:39,686
[Applause]


758
00:38:40,186 --> 00:38:42,316
>> TYLER CASELLA: So now
the level looks pretty good


759
00:38:42,316 --> 00:38:43,106
so the last thing I want


760
00:38:43,106 --> 00:38:45,186
to do is create a
nice cinematic opening


761
00:38:45,186 --> 00:38:47,046
to really introduce the
player to the level.


762
00:38:47,496 --> 00:38:51,686
I can do that by creating an
SKCameraNode and into our scene.


763
00:38:52,196 --> 00:38:54,956
The camera node let's us
define a Viewport within it


764
00:38:55,126 --> 00:38:57,116
and we can go ahead
and assign our scene


765
00:38:57,316 --> 00:38:59,316
to use the camera
I've just added.


766
00:39:00,186 --> 00:39:02,696
For our cinematic opening
I'm going to start us off


767
00:39:02,696 --> 00:39:05,526
in the corner here and I'll
have the camera zoomed in.


768
00:39:09,776 --> 00:39:12,246
I'm going to zoom in
on the fog over here.


769
00:39:12,726 --> 00:39:15,446
What's great is, because it
is just an SKNode I can apply


770
00:39:15,446 --> 00:39:16,526
actions to the camera.


771
00:39:17,206 --> 00:39:19,166
I'll filter down
to just our camera


772
00:39:19,866 --> 00:39:21,936
and then I'll add
a move 2 action.


773
00:39:22,246 --> 00:39:24,776
What I'm going to do for our
cinematic opening is pan the


774
00:39:24,776 --> 00:39:26,426
camera over to the
center of our level


775
00:39:26,606 --> 00:39:27,986
and zoom out at the same time.


776
00:39:28,296 --> 00:39:32,746
For our move 2 I'll use this
platforms X value as our center,


777
00:39:32,806 --> 00:39:36,826
507, and I'll also want
to center it in the Y


778
00:39:37,036 --> 00:39:39,596
which is 384 units
and we're going


779
00:39:39,596 --> 00:39:40,866
to want this to ease in and out.


780
00:39:41,796 --> 00:39:44,256
I'm going to move our action
to start about half a second


781
00:39:44,256 --> 00:39:46,086
after we begin our
scene and I'm going


782
00:39:46,086 --> 00:39:48,456
to have it take three
seconds to pan over.


783
00:39:48,916 --> 00:39:52,906
I'll also add a scale 2 action
and give it a half second offset


784
00:39:52,946 --> 00:39:57,636
from our move and have it end at
the same time as our movement.


785
00:39:58,036 --> 00:39:59,386
Now within that short amount


786
00:39:59,386 --> 00:40:00,986
of time we have created
the cinematic opening,


787
00:40:01,146 --> 00:40:02,176
and we have finished our level,


788
00:40:02,396 --> 00:40:04,326
so let's take a look
at how it looks.


789
00:40:11,876 --> 00:40:14,486
So that's just a taste
of what you're able to do


790
00:40:14,596 --> 00:40:16,916
with SpriteKit and Xcode 7 now.


791
00:40:17,516 --> 00:40:23,156
[Applause]


792
00:40:23,656 --> 00:40:25,276
>> TYLER CASELLA: And with that,
I would like to hand it off back


793
00:40:25,406 --> 00:40:27,946
to Tim to summarize for you.


794
00:40:29,406 --> 00:40:30,566
>> TIM ORIOL: Thanks, Tyler.


795
00:40:30,676 --> 00:40:32,346
That is really, really
cool stuff.


796
00:40:32,346 --> 00:40:35,396
I think as you all can see,


797
00:40:35,396 --> 00:40:37,306
it is going to be an
extremely exciting year


798
00:40:37,306 --> 00:40:38,466
for SpriteKit developers.


799
00:40:38,706 --> 00:40:41,106
We've added the AudioNode,
we've added the CameraNode,


800
00:40:41,106 --> 00:40:43,046
we have reference
actions and nodes,


801
00:40:43,506 --> 00:40:46,446
we have a brand-new timeline
based action editor built right


802
00:40:46,446 --> 00:40:47,106
into Xcode.


803
00:40:47,436 --> 00:40:50,926
We have integrated our texture
atlases with the Asset Catalog


804
00:40:50,926 --> 00:40:52,626
to give you access
to new features


805
00:40:52,866 --> 00:40:55,086
like On-Demand Resources
and app thinning


806
00:40:55,646 --> 00:40:59,096
and we have also made SpriteKit
Metal backed on every device


807
00:40:59,126 --> 00:41:01,976
that supports it and
provides you easy access


808
00:41:02,086 --> 00:41:03,836
to the new GamePlayKit
framework.


809
00:41:04,286 --> 00:41:08,166
If you need any more
information, please check


810
00:41:08,166 --> 00:41:11,146
out our great developer site
or for general inquiries,


811
00:41:11,276 --> 00:41:15,856
contact our graphics evangelist
Allan Schaffer, there's a couple


812
00:41:15,856 --> 00:41:17,896
of related sessions if
you want to find out more


813
00:41:17,896 --> 00:41:19,596
about GamePlayKit or SceneKit.


814
00:41:21,016 --> 00:41:22,766
We also have a few labs,


815
00:41:22,836 --> 00:41:24,506
the first of which
is the SpriteKit lab


816
00:41:24,506 --> 00:41:25,646
which is starting right now.


817
00:41:26,056 --> 00:41:28,756
So, feel free to follow us
downstairs and we'd be happy


818
00:41:28,756 --> 00:41:30,396
to answer any questions
you may have.


819
00:41:31,076 --> 00:41:31,906
Thank you very much.


820
00:41:31,906 --> 00:41:32,976
Please enjoy your conference.


821
00:41:33,516 --> 00:41:37,500
[Applause]

