1
00:00:23,516 --> 00:00:26,806
[ Applause ]


2
00:00:27,306 --> 00:00:27,906
>> JASON YAO: Wow, wow.


3
00:00:28,666 --> 00:00:29,776
Good morning, everybody.


4
00:00:29,896 --> 00:00:30,466
Good morning.


5
00:00:31,056 --> 00:00:32,266
My name is Jason Yao.


6
00:00:32,266 --> 00:00:33,716
I am an interface
builder engineer.


7
00:00:33,716 --> 00:00:36,696
I am going to be presenting with
Kasia, an iOS keyboard engineer.


8
00:00:37,046 --> 00:00:38,926
Welcome to the Mysteries
of Auto Layout.


9
00:00:40,386 --> 00:00:43,436
As developers, you want to
build bold and beautiful apps


10
00:00:43,496 --> 00:00:45,516
that will surprise and
delight your customers.


11
00:00:46,226 --> 00:00:49,126
Having a great layout
will put your app ahead,


12
00:00:49,126 --> 00:00:51,326
and your customers
will reward you for it.


13
00:00:51,936 --> 00:00:54,476
Having to target all
the different devices


14
00:00:54,516 --> 00:00:57,336
and configurations as
well as multitasking


15
00:00:57,416 --> 00:01:00,376
and localization
can be a challenge.


16
00:01:00,626 --> 00:01:02,966
Luckily, you have a tool
to help, Auto Layout.


17
00:01:08,156 --> 00:01:11,736
Auto Layout, in its essence,
takes a large set of inputs


18
00:01:12,036 --> 00:01:16,156
in the form of constraints,
transforms them into equations,


19
00:01:16,476 --> 00:01:18,856
uses linear algebra to
give you a set of frames.


20
00:01:19,426 --> 00:01:22,896
And that will give you the
layout that you've specified.


21
00:01:23,466 --> 00:01:25,886
Now, working with Auto Layout,
you will find it's powerful


22
00:01:25,886 --> 00:01:30,906
and flexible but can seem
somewhat mysterious at times.


23
00:01:31,476 --> 00:01:33,986
And that's why we're
here today, to discover


24
00:01:34,166 --> 00:01:35,756
and unravel the mysteries
of Auto Layout.


25
00:01:36,276 --> 00:01:42,006
We have a number of tips and
techniques to tell you about,


26
00:01:42,516 --> 00:01:47,416
and learning them will save
you hours of development time


27
00:01:47,706 --> 00:01:48,786
and save you from frustration.


28
00:01:49,416 --> 00:01:50,106
Let's get started.


29
00:01:50,606 --> 00:01:53,726
If you are new to Auto Layout,
whether you're new or a veteran,


30
00:01:53,726 --> 00:01:55,326
there is something
in this talk for you.


31
00:01:55,956 --> 00:01:59,746
You can refer to
past WWDC sessions


32
00:02:00,266 --> 00:02:01,106
if you need a refresher.


33
00:02:01,976 --> 00:02:02,986
Let's take a look
at the outline.


34
00:02:03,546 --> 00:02:06,366
This is a two-part session.


35
00:02:06,366 --> 00:02:09,316
We are covering the morning
half today, right now,


36
00:02:09,536 --> 00:02:12,856
and the afternoon one is in
this very same room later on.


37
00:02:14,096 --> 00:02:15,896
Let's get started with
the first mystery,


38
00:02:16,726 --> 00:02:20,196
mystery number one,
maintainable layouts.


39
00:02:20,966 --> 00:02:24,456
Now, when you are working with
Auto Layout, you are going


40
00:02:24,456 --> 00:02:27,076
to discover very soon you are
going to work with constraints.


41
00:02:27,656 --> 00:02:31,656
Picture developing a
relationship between two views.


42
00:02:32,246 --> 00:02:35,036
You can have a label on one
side, a bundle on the other,


43
00:02:35,366 --> 00:02:39,866
specify how far apart it's going
to be, where it's going to go


44
00:02:39,866 --> 00:02:40,726
into the superview,


45
00:02:41,026 --> 00:02:43,796
and beautifully align
them along their baseline.


46
00:02:44,696 --> 00:02:47,226
Now, whether those
specifications change for you


47
00:02:47,786 --> 00:02:53,006
at runtime or design time,
Auto Layout will do its thing.


48
00:02:53,206 --> 00:02:54,536
Picture a more complex example.


49
00:02:55,166 --> 00:02:55,956
This is the App Store


50
00:02:56,256 --> 00:02:57,996
with GarageBand showing
up as the app.


51
00:02:58,236 --> 00:02:59,576
It has a number of
controls inside.


52
00:03:00,236 --> 00:03:03,596
It has a label at the top and
some buttons, it's got an icon


53
00:03:03,596 --> 00:03:06,646
to one side, a segmented
control in between,


54
00:03:06,646 --> 00:03:09,116
and then some preview
images at the bottom.


55
00:03:09,826 --> 00:03:11,916
We can use Auto Layout
to lay this thing out


56
00:03:12,276 --> 00:03:13,576
and adapt to different sizes.


57
00:03:14,186 --> 00:03:15,966
And the constraints
might look like this.


58
00:03:20,466 --> 00:03:22,946
Now for the maintainability
part.


59
00:03:23,896 --> 00:03:26,606
Pretend that you were
not the developer


60
00:03:26,606 --> 00:03:27,506
who created this layout.


61
00:03:28,336 --> 00:03:30,546
But your boss comes
up to you and says,


62
00:03:30,716 --> 00:03:34,046
I want a new control right
underneath the essentials


63
00:03:34,226 --> 00:03:35,366
and above the star rating.


64
00:03:35,996 --> 00:03:36,926
Where do you start?


65
00:03:37,826 --> 00:03:39,536
You are probably going to
have to examine the controls


66
00:03:39,536 --> 00:03:41,196
in the area, look
at the constraints,


67
00:03:41,626 --> 00:03:44,206
try to insert your
button, break some of them,


68
00:03:44,576 --> 00:03:46,646
and then reassemble it,
hopefully it all works out.


69
00:03:47,986 --> 00:03:49,646
There is a more maintainable
way,


70
00:03:49,726 --> 00:03:53,236
as you've guessed,
that is Stack View.


71
00:03:53,456 --> 00:03:57,766
New to iOS 9 and made even
better than before on the Mac,


72
00:03:58,516 --> 00:04:00,976
Stack View allows you to
arrange your views linearly.


73
00:04:01,536 --> 00:04:04,436
Stack View has parity
across both platforms.


74
00:04:05,056 --> 00:04:08,266
It is built on top
of Auto Layout.


75
00:04:10,006 --> 00:04:13,906
It manages the constraints
of your subviews for you


76
00:04:13,906 --> 00:04:15,786
so you don't have
to, and it works well


77
00:04:15,786 --> 00:04:16,946
when you add user constraints.


78
00:04:17,456 --> 00:04:22,516
You can have a horizontal or
vertical orientation or axis,


79
00:04:23,806 --> 00:04:25,546
as well as other
customizable properties,


80
00:04:25,966 --> 00:04:27,076
such as the alignment.


81
00:04:28,196 --> 00:04:30,466
Here you have a whole bunch
of horizontal stack views,


82
00:04:30,466 --> 00:04:32,536
and here are examples
of top, center, bottom,


83
00:04:32,746 --> 00:04:33,766
and baseline alignments.


84
00:04:33,766 --> 00:04:35,036
There are other alignments
as well.


85
00:04:35,846 --> 00:04:39,016
As well as vertical stack views.


86
00:04:39,486 --> 00:04:42,876
Here are examples of fill,
leading, center, and trailing.


87
00:04:44,066 --> 00:04:47,106
Now, one of the properties I
want to draw your attention


88
00:04:47,106 --> 00:04:49,396
to is really cool,
distribution property,


89
00:04:49,396 --> 00:04:51,246
and this one is also
new to NSStackView


90
00:04:51,366 --> 00:04:53,176
as well as it's on iOS 9.


91
00:04:54,546 --> 00:04:57,826
This allows you to
distribute along the axis,


92
00:04:58,816 --> 00:05:02,196
and you can do some pretty
complex distribution behaviors


93
00:05:02,446 --> 00:05:04,336
without having to deal
with any constraints.


94
00:05:05,086 --> 00:05:06,466
Here we have examples of fill


95
00:05:07,246 --> 00:05:08,566
so that we are filling
the stack view.


96
00:05:09,336 --> 00:05:12,106
Fill equally, fill
proportionally, which is based


97
00:05:12,106 --> 00:05:15,346
on the content size of the
subviews, and equal spacing.


98
00:05:15,476 --> 00:05:17,396
And there are other
distribution options as well.


99
00:05:18,066 --> 00:05:20,656
So we can build -- Thank you.


100
00:05:21,516 --> 00:05:25,736
[ Applause ]


101
00:05:26,236 --> 00:05:28,396
We can build this out of
stack views, so I am going


102
00:05:28,396 --> 00:05:29,976
to give you a demo inside
of Interface Builder.


103
00:05:41,066 --> 00:05:41,216
All right.


104
00:05:41,596 --> 00:05:42,676
So I've got Xcode loaded.


105
00:05:43,426 --> 00:05:45,976
With a view controller,
and to set up my scene,


106
00:05:45,976 --> 00:05:47,786
all I have done is dragged
a whole bunch of controls


107
00:05:47,786 --> 00:05:50,416
and images out from the Object
Library and Media Library.


108
00:05:50,416 --> 00:05:52,356
You can see they are
all top-level labels,


109
00:05:52,356 --> 00:05:53,126
buttons, and images.


110
00:05:53,996 --> 00:05:57,566
Now we are going to go ahead and
put these things into a layout.


111
00:05:58,506 --> 00:06:02,696
So first I am going to select
my button and my labels.


112
00:06:03,086 --> 00:06:04,986
Then I am going to draw your
attention to this new button


113
00:06:05,046 --> 00:06:07,926
on the IB canvas, the
Embed in Stack View button.


114
00:06:08,436 --> 00:06:11,696
When you click on it,
it's created my stack view


115
00:06:11,816 --> 00:06:14,636
and affirmed my alignment
and my axis.


116
00:06:15,516 --> 00:06:20,806
[ Applause ]


117
00:06:21,306 --> 00:06:23,166
Now we are going to
tune the properties.


118
00:06:23,496 --> 00:06:29,206
You can see in the
Property Inspector up here


119
00:06:29,406 --> 00:06:32,266
that we have the axis,
alignment, distribution,


120
00:06:32,266 --> 00:06:33,566
and spacing as some
of the options,


121
00:06:33,566 --> 00:06:35,356
and you'll notice
there's also a plus here.


122
00:06:35,746 --> 00:06:38,596
You can make this an
iOS 9 size classable.


123
00:06:40,576 --> 00:06:44,116
We are going to go ahead
and adjust the alignment,


124
00:06:44,116 --> 00:06:47,956
and for the people who have
dealt with constraints before


125
00:06:47,956 --> 00:06:50,606
in Auto Layout, you will
note that all we need


126
00:06:50,606 --> 00:06:53,646
to do now is switch it
from trailing to leading.


127
00:06:55,066 --> 00:06:56,176
Not touching any constraints.


128
00:06:57,066 --> 00:07:00,276
Let's go ahead and stack a whole
bunch of other views in here.


129
00:07:00,276 --> 00:07:03,546
I am going to go ahead
and click on my ratings,


130
00:07:04,516 --> 00:07:08,146
stack them to horizontal --
create a horizontal stack view.


131
00:07:08,146 --> 00:07:10,136
I am going to go
ahead and drag that up


132
00:07:10,656 --> 00:07:11,586
into my first stack view.


133
00:07:12,676 --> 00:07:16,486
Now I am going to select
the icon and the header,


134
00:07:17,056 --> 00:07:20,156
click the Stack View button
for that, and then finally,


135
00:07:20,696 --> 00:07:24,716
the top three controls, and
my layout is nearly there.


136
00:07:26,516 --> 00:07:31,546
[ Applause ]


137
00:07:32,046 --> 00:07:33,936
Now let's go ahead and
tune some properties.


138
00:07:33,936 --> 00:07:35,636
We have the top-level
stack views selected.


139
00:07:36,466 --> 00:07:40,346
I am going to go ahead and
first adjust this alignment not


140
00:07:40,346 --> 00:07:43,656
to center but to fill,
so it's really filled


141
00:07:43,656 --> 00:07:44,766
across the entire stack view.


142
00:07:45,206 --> 00:07:46,866
And I am also going
to spread it out so


143
00:07:46,866 --> 00:07:49,256
that it's a little more --
it's got a little more spacing.


144
00:07:49,616 --> 00:07:54,386
Let's say about 20
points, maybe 25.


145
00:07:57,056 --> 00:08:00,516
Then we will also add some
spacing into the stack view


146
00:08:00,516 --> 00:08:03,336
with the labels and the buttons,
so I am going to go ahead


147
00:08:03,336 --> 00:08:05,646
and click on that and
change its spacing,


148
00:08:05,646 --> 00:08:08,176
and we will give it
about five points.


149
00:08:08,596 --> 00:08:12,786
We also want to add spacing
between the icon and the header,


150
00:08:13,096 --> 00:08:14,456
and I could go ahead and select


151
00:08:14,456 --> 00:08:16,726
that stack view using
the document outline.


152
00:08:17,436 --> 00:08:21,646
Or I can hold down
Control-Shift on my keyboard,


153
00:08:22,506 --> 00:08:26,296
click over the icon, and get
all the views underneath my


154
00:08:26,296 --> 00:08:26,726
mouse click.


155
00:08:27,266 --> 00:08:31,106
So we will click on the
closest stack view to me,


156
00:08:31,106 --> 00:08:36,046
the horizontal one, and increase
that to about 25 points.


157
00:08:36,556 --> 00:08:37,496
Let's go ahead and run this.


158
00:08:42,046 --> 00:08:45,086
You can see it's got my layout,
but we haven't positioned it


159
00:08:45,086 --> 00:08:46,606
yet in the superview,
and this is


160
00:08:46,606 --> 00:08:47,706
where we are going
to use constraints.


161
00:08:48,996 --> 00:08:52,536
I am going to go ahead and
take the stack view and put it


162
00:08:52,536 --> 00:08:54,476
against the top and
leading margins.


163
00:08:55,146 --> 00:08:57,976
Then I am going to draw your
attention to this other button


164
00:08:57,976 --> 00:09:03,796
on the IB canvas that brings
up the Pin menu and brings


165
00:09:03,796 --> 00:09:05,466
up a pop-up for being able


166
00:09:05,616 --> 00:09:08,446
to add your leading
and top constraints.


167
00:09:08,736 --> 00:09:10,246
And when I hit the Add button,


168
00:09:10,856 --> 00:09:13,096
it's added the constraints
for me.


169
00:09:13,406 --> 00:09:16,286
Now, we also want to add to
the bottom and the trailing,


170
00:09:16,836 --> 00:09:17,656
but there's another trick


171
00:09:17,656 --> 00:09:19,756
in Interface Builder
that you can do.


172
00:09:19,756 --> 00:09:21,546
You can control-drag
between two views.


173
00:09:21,546 --> 00:09:23,246
So I am going to
control-drag from the stack view


174
00:09:23,846 --> 00:09:26,736
to its superview and
select Trailing Space


175
00:09:26,736 --> 00:09:27,546
to Container Margin.


176
00:09:28,426 --> 00:09:29,626
That's going to add
my constraints.


177
00:09:29,726 --> 00:09:33,386
For those already familiar
with the menu, check it out,


178
00:09:33,386 --> 00:09:36,426
there are a few new
other features in there.


179
00:09:36,626 --> 00:09:39,836
We are going to add another
constraint to the bottom,


180
00:09:40,486 --> 00:09:42,006
vertical spacing to
bottom layout guide.


181
00:09:42,836 --> 00:09:47,086
Now I am going to
double-click on my constraints,


182
00:09:47,316 --> 00:09:49,846
set their constants so they
are flush against the edges,


183
00:09:50,436 --> 00:09:56,966
and now when we run it, you
can see it fits my superview.


184
00:09:57,526 --> 00:09:59,046
Something isn't quite right yet.


185
00:09:59,346 --> 00:10:01,056
Take a look at that
segmented control.


186
00:10:01,426 --> 00:10:02,456
It's a little too stretched.


187
00:10:02,676 --> 00:10:03,476
What is going on there?


188
00:10:03,776 --> 00:10:05,976
In fact, if we rotate this,
it's a little too squished.


189
00:10:06,316 --> 00:10:08,316
[ Laughter ]


190
00:10:08,616 --> 00:10:13,176
At the top-level stack view,
it's looking at its subviews,


191
00:10:13,176 --> 00:10:14,846
and all of them have
the same priorities,


192
00:10:15,116 --> 00:10:17,046
the same content-hugging
priority


193
00:10:17,106 --> 00:10:18,646
and content
compression-resistance


194
00:10:18,646 --> 00:10:19,166
priorities.


195
00:10:19,676 --> 00:10:22,606
We will talk more about that
later on in the session,


196
00:10:22,606 --> 00:10:25,046
but for what you need to
know for now is that we need


197
00:10:25,046 --> 00:10:27,916
to tell Stack View which
one is going to win.


198
00:10:28,036 --> 00:10:30,336
All I have to do is select
the segmented control,


199
00:10:30,966 --> 00:10:34,106
go into the sizing inspector,
choose the priority section,


200
00:10:35,186 --> 00:10:37,776
go ahead and adjust my
hugging priority because I want


201
00:10:38,086 --> 00:10:40,306
to have the segmented
control hug tighter,


202
00:10:41,546 --> 00:10:44,356
change it from 250 to 260.


203
00:10:44,706 --> 00:10:48,436
You only need to go a little
bit above its default.


204
00:10:48,506 --> 00:10:52,576
Likewise, I wanted to resist
compression and not get swished,


205
00:10:52,856 --> 00:10:58,126
so I am going to also increase
my vertical content compression


206
00:10:58,126 --> 00:11:00,776
resistance from 750 to 760.


207
00:11:01,326 --> 00:11:06,076
Now when we run it, it's
looking much better.


208
00:11:07,816 --> 00:11:09,476
Now remember - -- thank you.


209
00:11:09,536 --> 00:11:09,876
Thank you.


210
00:11:10,516 --> 00:11:13,636
[ Applause ]


211
00:11:14,136 --> 00:11:15,716
Remember the original problem?


212
00:11:16,596 --> 00:11:18,446
Our boss wanted us
to add a new control.


213
00:11:19,386 --> 00:11:21,176
So here's what you do.


214
00:11:21,216 --> 00:11:24,276
You tell your boss, it's okay.


215
00:11:24,356 --> 00:11:24,846
I've got it.


216
00:11:25,186 --> 00:11:28,226
Then you go back to your
desk, open up the storyboard,


217
00:11:29,786 --> 00:11:30,786
search for the control --


218
00:11:30,786 --> 00:11:31,876
in this case we will
use a button --


219
00:11:32,536 --> 00:11:34,306
drag it out from
the object library,


220
00:11:34,786 --> 00:11:38,076
and target which stack view
you want to drop it in.


221
00:11:39,176 --> 00:11:40,076
Then you go grab a coffee.


222
00:11:41,516 --> 00:11:48,646
[ Laughter and Applause ]


223
00:11:49,146 --> 00:11:52,676
I would also like to point out
that Stack View handles Hidden


224
00:11:52,676 --> 00:11:54,196
for its subviews really nicely.


225
00:11:54,196 --> 00:11:57,676
You can set it programmatically
or through Interface Builder.


226
00:11:57,976 --> 00:12:02,376
It's like it collapses or is
taken out of the view hierarchy


227
00:12:02,376 --> 00:12:03,986
but is still owned
by Stack View.


228
00:12:04,576 --> 00:12:08,476
So if I mark Hidden, you can see
everything adjusts accordingly.


229
00:12:08,806 --> 00:12:09,976
We think you will
find this useful.


230
00:12:10,516 --> 00:12:14,666
[ Applause ]


231
00:12:15,166 --> 00:12:17,166
That is the demo of Stack View.


232
00:12:18,516 --> 00:12:22,806
[ Applause ]


233
00:12:23,306 --> 00:12:25,886
I also wanted to point out that
animation is really easy, too.


234
00:12:27,016 --> 00:12:28,046
This is what it might look like.


235
00:12:29,566 --> 00:12:34,266
Use a UIView Animate with
Duration block and just go ahead


236
00:12:34,266 --> 00:12:35,856
and modify the Hidden
property of the subviews,


237
00:12:35,856 --> 00:12:36,966
and we specially handle those.


238
00:12:37,156 --> 00:12:39,886
Or you can put other
animatable properties in there


239
00:12:39,886 --> 00:12:42,866
for adjustment, including
properties


240
00:12:42,866 --> 00:12:43,866
on the stack view itself.


241
00:12:44,196 --> 00:12:47,266
Try, for instance, adjusting
the axis so it's going


242
00:12:47,266 --> 00:12:48,476
between horizontal and vertical,


243
00:12:48,766 --> 00:12:50,006
and you will see
something pretty cool.


244
00:12:51,516 --> 00:12:55,766
[ Applause ]


245
00:12:56,266 --> 00:12:59,216
And of course, this is what
it looks like on Cocoa.


246
00:12:59,476 --> 00:13:02,946
Use NSAnimationContext,
run animation group.


247
00:13:05,256 --> 00:13:06,616
So what have we seen?


248
00:13:06,916 --> 00:13:08,496
Let's take a look
at the API first.


249
00:13:09,436 --> 00:13:11,626
It's simple, familiar,
straightforward.


250
00:13:12,236 --> 00:13:13,866
You have your axis
or orientation,


251
00:13:13,996 --> 00:13:16,686
describing whether the stack
view is horizontal or vertical.


252
00:13:17,236 --> 00:13:18,866
We have seen the
distribution, alignment,


253
00:13:19,216 --> 00:13:20,986
and spacing properties.


254
00:13:21,636 --> 00:13:22,876
And then you have
methods for being able


255
00:13:22,876 --> 00:13:24,476
to add new things to be stacked.


256
00:13:24,636 --> 00:13:25,806
Add and arrange subviews.


257
00:13:25,866 --> 00:13:27,876
There's also an insert
and remove.


258
00:13:28,556 --> 00:13:31,006
I want to draw your attention to
the Arrange Subviews property.


259
00:13:32,296 --> 00:13:37,916
This property returns you a
subset of all of the views


260
00:13:38,856 --> 00:13:40,256
that are owned by
the stack view.


261
00:13:40,606 --> 00:13:43,286
It returns you the views that
are currently being stacked.


262
00:13:44,886 --> 00:13:47,776
What that implies is
that you can have views


263
00:13:47,776 --> 00:13:50,476
that are not being stacked by
Stack View, such as decorators


264
00:13:50,476 --> 00:13:52,776
or overlays, and have
a clean view hierarchy,


265
00:13:52,776 --> 00:13:56,026
and we think you will
find that useful.


266
00:13:56,276 --> 00:13:59,996
All you need to do is call Add
Subviews for those other cases.


267
00:14:01,366 --> 00:14:02,206
What have we seen here?


268
00:14:03,456 --> 00:14:06,816
Stack View is easy to
build, easy to maintain,


269
00:14:08,196 --> 00:14:10,836
we believe you are going to
compose a lot of these things,


270
00:14:11,596 --> 00:14:14,326
and because Stack
View is about layout


271
00:14:15,016 --> 00:14:20,016
and therefore it doesn't need
to render its own background,


272
00:14:20,286 --> 00:14:21,936
we've been able to do
some optimizations.


273
00:14:22,156 --> 00:14:24,926
So we have a special Transform
Layer class that doesn't render


274
00:14:24,926 --> 00:14:28,096
on its own that can
make Stack View run fast


275
00:14:28,216 --> 00:14:30,156
and even more performant
than your regular views.


276
00:14:30,696 --> 00:14:31,976
So it is lightweight.


277
00:14:33,516 --> 00:14:38,296
[ Applause ]


278
00:14:38,796 --> 00:14:41,766
We went from an example
with many constraints


279
00:14:42,446 --> 00:14:45,566
and a little bit of difficulty
maintaining it down to just four


280
00:14:46,476 --> 00:14:48,286
and a bunch of stack views,
and this reads a lot nicer.


281
00:14:49,556 --> 00:14:52,826
We feel that you can build
most of your user interfaces


282
00:14:53,266 --> 00:14:56,336
with stack views, so we
recommend start with Stack View


283
00:14:56,836 --> 00:14:58,156
and use constraints as needed.


284
00:14:58,666 --> 00:14:59,716
And that is Stack View.


285
00:15:00,516 --> 00:15:05,556
[ Applause ]


286
00:15:06,056 --> 00:15:09,886
Now, for the cases where you
need more than just Stack View,


287
00:15:10,846 --> 00:15:11,996
you are going to have to --


288
00:15:11,996 --> 00:15:14,796
I would like to invite up
my friend Kasia to talk


289
00:15:14,796 --> 00:15:16,246
about feeding the layout engine.


290
00:15:17,516 --> 00:15:21,826
[ Applause ]


291
00:15:22,326 --> 00:15:22,576
>> KASIA WAWER: Hi.


292
00:15:22,916 --> 00:15:23,746
My name's Kasia.


293
00:15:23,776 --> 00:15:26,766
I am on the iOS Keyboards Team,
and I am here to talk to you


294
00:15:26,766 --> 00:15:28,966
about proper care and
feeding of your layout engine.


295
00:15:28,966 --> 00:15:32,016
It's a finicky little critter,
but it wants to do right by you.


296
00:15:32,016 --> 00:15:34,276
If you treat it correctly,
it will treat you correctly.


297
00:15:34,966 --> 00:15:37,306
As you have seen over of
the course of the week,


298
00:15:37,306 --> 00:15:39,866
we have these new adaptive
environments as well as all


299
00:15:39,866 --> 00:15:43,126
of the different iPhone
screen sizes we have.


300
00:15:43,126 --> 00:15:46,266
It's critical to plan you
layout property to work


301
00:15:46,266 --> 00:15:47,906
across all these environments


302
00:15:47,906 --> 00:15:51,026
and not spend too
much time iterating


303
00:15:51,026 --> 00:15:51,956
for every single screen.


304
00:15:52,386 --> 00:15:54,036
So most people, when they are
thinking about constraints,


305
00:15:54,036 --> 00:15:55,756
think of them sort of like this.


306
00:15:55,756 --> 00:15:58,146
You create some views, you
create some constraints


307
00:15:58,146 --> 00:16:01,996
in different ways, and you kind
of throw them into a black hole.


308
00:16:01,996 --> 00:16:02,826
Something happens.


309
00:16:03,486 --> 00:16:04,816
And a layout pops
out the other end.


310
00:16:05,196 --> 00:16:08,456
Hopefully yours, possibly not.


311
00:16:08,756 --> 00:16:11,626
So what I really want to do
today is try and clear up some


312
00:16:11,626 --> 00:16:13,866
of this mystery here and get it


313
00:16:13,866 --> 00:16:16,186
so you are hitting
your layout every time.


314
00:16:16,186 --> 00:16:18,486
And we are going to start
with changing constraints.


315
00:16:19,756 --> 00:16:22,146
When I talk about changing
constraints, I am mostly talking


316
00:16:22,146 --> 00:16:24,316
about activating and
deactivating constraints.


317
00:16:24,926 --> 00:16:26,776
Those of you who have
used Auto Layout before


318
00:16:26,776 --> 00:16:29,446
and for a while may remember
we originally had the concept


319
00:16:29,446 --> 00:16:31,926
of adding and removing
constraints to and from views.


320
00:16:32,356 --> 00:16:33,636
Well, don't do that anymore.


321
00:16:33,726 --> 00:16:35,776
Activate and deactivate
is much better.


322
00:16:35,776 --> 00:16:38,786
It's a class method on NSLayout
constraint for both of them,


323
00:16:39,366 --> 00:16:42,706
and there are some
really big benefits


324
00:16:42,706 --> 00:16:44,026
to using activate
and deactivate.


325
00:16:44,366 --> 00:16:45,946
Constraints find
their own container.


326
00:16:45,946 --> 00:16:47,156
They are more efficient.


327
00:16:47,656 --> 00:16:49,176
And you don't need
to own all the views


328
00:16:49,176 --> 00:16:50,586
in your layout in
order to use them.


329
00:16:51,316 --> 00:16:53,986
So this all really boils
down to just don't use add


330
00:16:53,986 --> 00:16:54,766
and remove anymore.


331
00:16:55,546 --> 00:16:56,876
Use activate and deactivate.


332
00:16:56,876 --> 00:17:00,656
So there are a few other
things to keep in mind


333
00:17:01,006 --> 00:17:03,356
when you are thinking about
changing your constraints.


334
00:17:04,536 --> 00:17:07,366
Number one, never
deactivate everything


335
00:17:07,366 --> 00:17:08,715
in self.view.constraints.


336
00:17:09,205 --> 00:17:10,726
If anybody has tried this,


337
00:17:10,726 --> 00:17:13,026
you've probably seen some
really odd things happen.


338
00:17:13,636 --> 00:17:15,705
Not all the constraints in
that array belong to you,


339
00:17:16,556 --> 00:17:18,616
such as the ones the view
uses to set itself up,


340
00:17:18,616 --> 00:17:20,656
so weird things are
going to happen.


341
00:17:21,246 --> 00:17:22,326
Just please don't.


342
00:17:22,856 --> 00:17:24,306
We will see why in a moment.


343
00:17:25,086 --> 00:17:27,665
What you need to do instead is
keep references to constraints


344
00:17:27,665 --> 00:17:30,556
that you may need to change
later, either in an array


345
00:17:30,556 --> 00:17:32,586
of constraints or as
individual constraints


346
00:17:32,686 --> 00:17:35,046
so that you can manage things
exactly the way you want to.


347
00:17:35,146 --> 00:17:37,376
So let's take a look at
changing constraints.


348
00:17:44,046 --> 00:17:47,166
So I have here an iPad app
that I've made with a bunch


349
00:17:47,166 --> 00:17:52,196
of planets, and it's
been set up for iPad


350
00:17:52,196 --> 00:17:54,126
and it also has an iPhone mode,


351
00:17:54,126 --> 00:17:55,976
so it should work well
with multitasking.


352
00:17:56,616 --> 00:17:59,016
Except that I am not actually
removing any constraints,


353
00:17:59,616 --> 00:18:02,536
so when I move from my nice
vertical compact layout back


354
00:18:02,536 --> 00:18:04,906
to my regular layout,
I have lost all


355
00:18:04,906 --> 00:18:06,566
of my nice curve
that I had before.


356
00:18:07,316 --> 00:18:09,346
So the first thing I might
be tempted to do to try


357
00:18:09,346 --> 00:18:12,176
to rectify this is to remove all


358
00:18:12,176 --> 00:18:15,976
of the constraints
in the superview.


359
00:18:19,456 --> 00:18:21,016
And when I do that, I
am also going to need


360
00:18:21,016 --> 00:18:22,736
to reactivate any
shared constraints.


361
00:18:27,046 --> 00:18:29,946
But you will see all sorts of
exciting things happen here


362
00:18:30,116 --> 00:18:31,636
if you try to take
this approach.


363
00:18:32,566 --> 00:18:33,846
So here's my regular
layout again.


364
00:18:33,846 --> 00:18:34,306
That's nice.


365
00:18:34,916 --> 00:18:36,856
And here it is still nice.


366
00:18:38,836 --> 00:18:40,526
Hmm. That's not good.


367
00:18:41,116 --> 00:18:43,586
And if I move back to
the regular layout, well,


368
00:18:43,586 --> 00:18:46,116
I didn't actually want to make
the planets quite that giant,


369
00:18:46,506 --> 00:18:47,916
so this is not really
what I want to do.


370
00:18:48,576 --> 00:18:49,906
So how do we do this properly?


371
00:18:49,966 --> 00:18:52,866
I am going to take a moment to
grab this code so you don't have


372
00:18:52,866 --> 00:18:55,696
to watch me type it all out.


373
00:18:56,116 --> 00:18:58,126
So in your trait collection
did change, what you want


374
00:18:58,126 --> 00:19:02,596
to do is check and see with each
environment whether the other


375
00:19:02,596 --> 00:19:04,716
set of constraints that you
might need to change are active.


376
00:19:05,016 --> 00:19:07,156
Here I have two arrays
with eight constraints each


377
00:19:07,466 --> 00:19:10,576
that differentiate between
that vertical alignment


378
00:19:10,916 --> 00:19:12,736
with the planets.


379
00:19:12,946 --> 00:19:14,716
So if I check and make
sure that that's active,


380
00:19:14,986 --> 00:19:17,586
remove the ones -- or deactivate
the ones I don't want anymore


381
00:19:17,586 --> 00:19:23,366
and activate the new ones,
it should look much better.


382
00:19:23,526 --> 00:19:29,326
Regular. Still regular.


383
00:19:30,626 --> 00:19:33,696
Compact. And regular again.


384
00:19:34,156 --> 00:19:35,556
So that's where I
actually want it to be.


385
00:19:36,516 --> 00:19:38,546
[ Applause ]


386
00:19:39,046 --> 00:19:39,766
Oh, thank you.


387
00:19:40,556 --> 00:19:42,546
So a cool thing in
Auto Layout is


388
00:19:42,546 --> 00:19:44,846
that you can actually animate
constraint changes as well.


389
00:19:45,336 --> 00:19:49,466
Here I have a double-tap gesture
to animate between this regular


390
00:19:49,466 --> 00:19:53,166
and compact layout by dropping
that activation and deactivation


391
00:19:53,166 --> 00:19:56,736
into an animation block
along with a call of layout


392
00:19:56,736 --> 00:19:58,576
if needed to the superview.


393
00:19:59,066 --> 00:20:02,756
So you'll see if I double-tap,
I can move really nicely


394
00:20:03,016 --> 00:20:05,846
between the set of views with
just a couple lines of code.


395
00:20:05,936 --> 00:20:09,946
And if you want to get fancy,
you can keep references to all


396
00:20:09,946 --> 00:20:12,976
of those individual constraints
and use keyframe animations


397
00:20:13,636 --> 00:20:16,856
to really kind of spice
things up in your app.


398
00:20:17,956 --> 00:20:19,546
So that's activating


399
00:20:19,546 --> 00:20:21,466
and deactivating
constraints properly.


400
00:20:21,586 --> 00:20:24,806
So what do we know about
changing constraints?


401
00:20:25,436 --> 00:20:26,176
Well, number one,


402
00:20:26,286 --> 00:20:28,346
never deactivate
self.view.constraints.


403
00:20:28,966 --> 00:20:30,016
We know that very well now.


404
00:20:30,436 --> 00:20:32,046
Keep references to
constraints are going


405
00:20:32,046 --> 00:20:33,096
to change in the future.


406
00:20:33,456 --> 00:20:35,446
It will make everything
work better,


407
00:20:35,446 --> 00:20:36,856
and you can do cool
things like animation.


408
00:20:36,856 --> 00:20:39,686
And you can also animate
changing constraints


409
00:20:40,106 --> 00:20:42,166
by just dropping it into
a View Animation block,


410
00:20:42,536 --> 00:20:43,136
which is pretty cool.


411
00:20:43,136 --> 00:20:45,596
So we are still at
the kind of basic part


412
00:20:45,596 --> 00:20:47,586
of building our layout,
where we still have our views


413
00:20:47,586 --> 00:20:49,546
and constraints and are putting
them into the layout engine.


414
00:20:50,106 --> 00:20:52,326
But if we give the layout
engine more information,


415
00:20:52,376 --> 00:20:56,306
we can get a lot better
results that work properly


416
00:20:56,306 --> 00:20:57,806
in all these different
adaptive environments.


417
00:20:59,366 --> 00:21:02,366
So we have kind of positioning
for all of our constraints,


418
00:21:02,366 --> 00:21:03,646
and now I want to
talk about size.


419
00:21:04,886 --> 00:21:06,946
So mystery number
three, view sizing.


420
00:21:08,326 --> 00:21:10,026
There are a couple different
ways to size your views,


421
00:21:10,246 --> 00:21:11,616
and you no longer have to say,


422
00:21:11,666 --> 00:21:14,746
I want a view that's 200
points wide, 300 points tall.


423
00:21:15,316 --> 00:21:17,406
Instead, you can
use different ways


424
00:21:17,406 --> 00:21:21,276
to create your constraints
adaptively to, you know,


425
00:21:21,376 --> 00:21:23,116
work in all of our various
environments we have


426
00:21:23,116 --> 00:21:26,726
for you now, and we start with
intrinsic content size on that.


427
00:21:27,356 --> 00:21:29,666
Many views have this, such
as labels and image views,


428
00:21:30,196 --> 00:21:32,626
and it's basically the
size that the view would be


429
00:21:32,626 --> 00:21:36,216
if it was just right
around its content.


430
00:21:36,216 --> 00:21:38,656
And the engine looks at this
and tries to solve your layout


431
00:21:39,186 --> 00:21:44,086
at this size, and it will
actually create the internal


432
00:21:44,086 --> 00:21:45,086
size constraints for you.


433
00:21:45,806 --> 00:21:48,956
But it can't guarantee the
layout size because of stuff


434
00:21:48,956 --> 00:21:51,436
like adaptivity, it needs
to be able to stretch


435
00:21:51,436 --> 00:21:52,536
and shrink views a little bit.


436
00:21:52,916 --> 00:21:55,586
So around things like this,
the user won't see it,


437
00:21:55,706 --> 00:21:56,976
but you might have
a few extra points


438
00:21:56,976 --> 00:21:57,896
of padding here and there.


439
00:21:58,906 --> 00:22:02,126
So you can use this in order
to lay out your views in a way


440
00:22:02,126 --> 00:22:04,076
that means you don't
have to specify


441
00:22:04,076 --> 00:22:05,926
that this label is this wide.


442
00:22:06,206 --> 00:22:07,976
It will simply be as
wide as its content.


443
00:22:09,006 --> 00:22:11,136
But if you need to define
a particular view size,


444
00:22:11,976 --> 00:22:12,956
start with constraints.


445
00:22:13,916 --> 00:22:15,716
It's very easy to
do things like,


446
00:22:16,076 --> 00:22:18,176
this view should be half
the width of my superview.


447
00:22:18,666 --> 00:22:19,876
This one should be
three-quarters


448
00:22:19,876 --> 00:22:20,776
of the height of my superview.


449
00:22:21,136 --> 00:22:22,736
This one should be equal
to the view next to it.


450
00:22:23,196 --> 00:22:26,486
You can, however, override
that intrinsic content size


451
00:22:26,556 --> 00:22:27,706
if you absolutely need to.


452
00:22:27,926 --> 00:22:30,196
There are only a couple reasons
you might need to do that.


453
00:22:30,796 --> 00:22:33,086
One is if you can't get
the size information


454
00:22:33,086 --> 00:22:33,786
from the constraints.


455
00:22:35,026 --> 00:22:37,536
And another might be if you
are using custom drawing


456
00:22:37,536 --> 00:22:37,996
in your view.


457
00:22:38,286 --> 00:22:40,406
But a lot of times you can still
just set up the constraints


458
00:22:40,806 --> 00:22:43,416
for that view, and you
won't have to do anything


459
00:22:43,416 --> 00:22:45,396
with overriding intrinsic
content size.


460
00:22:45,936 --> 00:22:47,766
If you do override
intrinsic content size,


461
00:22:47,946 --> 00:22:50,086
you are responsible
for invalidating it


462
00:22:50,486 --> 00:22:53,246
in case the slide class
changes or the text changes


463
00:22:53,246 --> 00:22:55,666
that you've got dynamic
text, localization,


464
00:22:55,666 --> 00:22:59,616
or anything like that that
may cause your view to need


465
00:22:59,616 --> 00:23:01,126
to recalculate its
internal size.


466
00:23:02,196 --> 00:23:05,406
So let's look at setting
up a view with constraints


467
00:23:05,406 --> 00:23:07,466
without using any
particular point sizes,


468
00:23:07,616 --> 00:23:08,546
all in relationships.


469
00:23:09,096 --> 00:23:10,346
Here we have a standard
image view.


470
00:23:11,016 --> 00:23:13,136
So what I want this to
take up most of my view,


471
00:23:13,766 --> 00:23:16,876
so I want the width to be
equal to three-quarters


472
00:23:16,876 --> 00:23:18,426
of the view that it's in.


473
00:23:18,626 --> 00:23:20,446
That means that every
environment it's in,


474
00:23:20,776 --> 00:23:22,406
the width will be
three-quarters of that view.


475
00:23:22,716 --> 00:23:23,666
So I set that up first.


476
00:23:24,596 --> 00:23:27,986
And then I can take that
proportion that I now have


477
00:23:28,066 --> 00:23:31,366
from calculating from the
superviews with and multiply it


478
00:23:31,366 --> 00:23:33,046
by one and a half
to get the height.


479
00:23:33,046 --> 00:23:35,356
And this will give me
a consistent layout


480
00:23:35,356 --> 00:23:38,386
across all devices and
all modes in multitasking.


481
00:23:39,496 --> 00:23:43,446
So view sizing is important,
and the more you rely


482
00:23:43,446 --> 00:23:45,916
on proportions, the more likely
you are to have a good layout


483
00:23:45,916 --> 00:23:48,436
that will really, you know,
be easy for you to put


484
00:23:48,436 --> 00:23:51,166
across all these different
screens we are giving you.


485
00:23:51,166 --> 00:23:52,956
And one of the things that a
lot of people when they think


486
00:23:52,956 --> 00:23:55,646
about sizing views think
about is self-sizing views,


487
00:23:56,216 --> 00:23:58,776
and most particularly
self-sizing table view cells.


488
00:23:58,776 --> 00:24:02,746
And these are cells that get
their height from their content


489
00:24:02,746 --> 00:24:05,696
so that you don't have to
have one size of cell all up


490
00:24:05,696 --> 00:24:06,566
and down your table view.


491
00:24:06,566 --> 00:24:08,626
You can have them in
different sizes depending


492
00:24:08,626 --> 00:24:09,526
on what's inside of them.


493
00:24:10,276 --> 00:24:11,226
And you don't actually have


494
00:24:11,346 --> 00:24:13,806
to calculate every
row height yourself.


495
00:24:14,226 --> 00:24:15,326
The constraints can
help you with that.


496
00:24:15,696 --> 00:24:21,816
So self-sizing needs to get
its size from your constraints.


497
00:24:22,486 --> 00:24:23,926
Again, this doesn't mean points.


498
00:24:24,096 --> 00:24:26,016
This means proportions
and relying on things


499
00:24:26,016 --> 00:24:28,726
like intrinsic content size
to help you sort of do that.


500
00:24:28,726 --> 00:24:32,236
Width is defined with table view
cells already, so you just need


501
00:24:32,236 --> 00:24:32,946
to worry about height.


502
00:24:33,856 --> 00:24:35,686
And you can take advantage
of proportions to do this.


503
00:24:36,346 --> 00:24:37,506
Here we have a table view cell.


504
00:24:37,836 --> 00:24:40,776
The label should be twice
as wide as the image view,


505
00:24:41,496 --> 00:24:43,706
and they have a little bit
of padding between them.


506
00:24:44,976 --> 00:24:48,256
So when I have a label that's
taller because it has more text,


507
00:24:49,286 --> 00:24:52,266
the table view cell grows in
order to accommodate that.


508
00:24:53,196 --> 00:24:54,976
So let's look at a quick
demo of how that's done.


509
00:25:02,376 --> 00:25:04,936
Okay. So here I have my table
view cell that I have set


510
00:25:04,936 --> 00:25:06,526
up the horizontal
constraints for already.


511
00:25:07,126 --> 00:25:09,826
If I were to just build
and run it the way it is,


512
00:25:09,826 --> 00:25:12,136
it would not be exactly
what I was hoping for.


513
00:25:13,746 --> 00:25:14,976
So everything is
kind of squished.


514
00:25:14,976 --> 00:25:17,806
My estimated table
view height is 60,


515
00:25:17,806 --> 00:25:19,156
so it's drawing it
there by default.


516
00:25:19,906 --> 00:25:22,746
So what I want to do now
is tell the table view cell


517
00:25:23,326 --> 00:25:28,206
that if the label
grows, it grows with it.


518
00:25:28,246 --> 00:25:33,616
And I do that by putting their
top and bottom anchors together.


519
00:25:34,016 --> 00:25:36,546
So then the label is going to go
ahead and push against the size


520
00:25:36,546 --> 00:25:38,306
of the table view cell
and make it taller.


521
00:25:38,856 --> 00:25:42,856
So top space and bottom
space, to container margin.


522
00:25:43,166 --> 00:25:43,976
Let's see what we get here.


523
00:25:47,236 --> 00:25:48,266
This is better.


524
00:25:49,116 --> 00:25:50,616
But it's still not
quite what I wanted.


525
00:25:50,756 --> 00:25:53,096
Because we have cells
like this one


526
00:25:53,436 --> 00:25:55,126
where the image is now cut off


527
00:25:55,126 --> 00:25:56,476
because the label
isn't tall enough.


528
00:25:57,136 --> 00:25:59,786
So to fix this, we can
take advantage of the fact


529
00:25:59,906 --> 00:26:02,386
that views can stretch beyond
their intrinsic content size


530
00:26:02,386 --> 00:26:05,126
and tell the label
that it should be


531
00:26:05,486 --> 00:26:08,436
at least as tall as the image.


532
00:26:09,326 --> 00:26:11,706
And so the label will get
some extra padding around it


533
00:26:11,786 --> 00:26:17,356
that will allow it to -- to
start at the height of the image


534
00:26:17,566 --> 00:26:19,226
and stretch beyond that
when it's tall enough.


535
00:26:19,226 --> 00:26:20,996
So you don't see
that extra spacing,


536
00:26:20,996 --> 00:26:22,326
and the text stays
nice and centered.


537
00:26:22,786 --> 00:26:25,126
But the label is still
what's defining the height


538
00:26:25,126 --> 00:26:26,696
of the table view cell.


539
00:26:26,696 --> 00:26:29,636
And now that looks much better.


540
00:26:29,786 --> 00:26:31,786
All of my cells are
properly sized,


541
00:26:32,336 --> 00:26:34,196
and I can see everything
I wanted to see.


542
00:26:34,196 --> 00:26:36,596
And that's really
all that's involved


543
00:26:36,596 --> 00:26:38,436
in creating self-sizing
table view cells.


544
00:26:39,146 --> 00:26:41,476
Just making sure that
everything is fully defined.


545
00:26:42,516 --> 00:26:46,706
[ Applause ]


546
00:26:47,206 --> 00:26:48,196
Thanks. Okay.


547
00:26:48,296 --> 00:26:49,436
So view sizing.


548
00:26:49,506 --> 00:26:49,996
What have we got?


549
00:26:50,386 --> 00:26:52,136
Certain views have an
intrinsic content size.


550
00:26:52,136 --> 00:26:54,206
You can use that when you
are defining relationships


551
00:26:54,206 --> 00:26:55,086
to other views.


552
00:26:55,436 --> 00:26:57,826
Constraints should define
your size when possible.


553
00:26:57,826 --> 00:27:00,646
When not, you can override
intrinsic content size,


554
00:27:01,006 --> 00:27:03,046
but make sure you invalidate
intrinsic content size


555
00:27:03,046 --> 00:27:03,596
when you do so.


556
00:27:03,896 --> 00:27:05,696
For self-sizing views,
you just need


557
00:27:05,696 --> 00:27:07,356
to define the size fully
in your constraints.


558
00:27:08,496 --> 00:27:09,736
Where are we building
the layout?


559
00:27:09,936 --> 00:27:11,356
We have our original
information.


560
00:27:11,356 --> 00:27:13,986
We are going to add
some sizing constraints.


561
00:27:14,756 --> 00:27:16,616
From the views we
just put together,


562
00:27:16,616 --> 00:27:17,996
their intrinsic content sizes.


563
00:27:18,616 --> 00:27:19,176
What's next?


564
00:27:19,746 --> 00:27:22,406
How do we help layout
engine know what we want?


565
00:27:22,926 --> 00:27:23,936
We give it some priorities.


566
00:27:24,866 --> 00:27:27,506
This is mystery number 5.


567
00:27:27,936 --> 00:27:30,146
If you have been doing
Auto Layout for a while,


568
00:27:30,146 --> 00:27:31,516
you may have landed
in a situation


569
00:27:31,516 --> 00:27:34,056
where views aren't landing
where you expect them


570
00:27:34,056 --> 00:27:35,756
to in regard to their superview.


571
00:27:36,216 --> 00:27:38,816
Maybe on each build and run
it's a little bit different,


572
00:27:39,136 --> 00:27:41,816
or if you rotate or resize it
gets a little bit different.


573
00:27:42,306 --> 00:27:43,846
So that's called ambiguity.


574
00:27:44,486 --> 00:27:46,106
And it can happen for a
couple different reasons.


575
00:27:46,726 --> 00:27:48,496
One is because you don't
have enough constraints


576
00:27:48,496 --> 00:27:50,086
in the direction
you are looking for.


577
00:27:50,686 --> 00:27:54,706
So for instance, if I had Saturn
here kind of where I wanted it


578
00:27:54,706 --> 00:27:57,856
in the middle, in this dotted
line, but when I actually ran


579
00:27:57,856 --> 00:28:00,746
that app it ended up way
off to the left or right,


580
00:28:01,276 --> 00:28:02,856
that might mean that I
don't have enough horizontal


581
00:28:02,856 --> 00:28:05,506
constraints to tell the
engine where to put Saturn.


582
00:28:05,686 --> 00:28:07,496
Vertically it seems
fine, so that's good.


583
00:28:07,916 --> 00:28:10,866
And the other thing that
can cause this is equal


584
00:28:10,866 --> 00:28:12,046
nonrequired priorities.


585
00:28:12,486 --> 00:28:15,466
Equal required priorities often
calls unsatisfiable constraints


586
00:28:15,896 --> 00:28:17,726
if the layout engine can't
solve your view that way.


587
00:28:18,106 --> 00:28:21,206
Equal nonrequired priorities
means the engine has


588
00:28:21,256 --> 00:28:22,326
to make a choice for you.


589
00:28:23,446 --> 00:28:26,016
And it tries really hard
to make a good choice,


590
00:28:26,656 --> 00:28:28,456
but it doesn't really
know what you want.


591
00:28:28,636 --> 00:28:30,996
So you just need to give it
a little bit more information


592
00:28:30,996 --> 00:28:31,446
to get there.


593
00:28:32,806 --> 00:28:33,966
So how do priorities work?


594
00:28:34,636 --> 00:28:37,686
They go from 1 to 1,000, and
we have a couple of constants


595
00:28:37,686 --> 00:28:40,266
to help you balance
your priorities.


596
00:28:40,386 --> 00:28:42,986
One thousand is layout
priority required.


597
00:28:43,666 --> 00:28:46,386
Default high is 750,
and default low is 250.


598
00:28:47,056 --> 00:28:49,526
And they look like this in
a visual format language,


599
00:28:49,526 --> 00:28:52,446
you simply put an @ symbol
before the number you wish


600
00:28:52,446 --> 00:28:52,866
to use.


601
00:28:53,086 --> 00:28:54,576
In Interface Builder,
you can stick it right


602
00:28:54,576 --> 00:28:55,746
into a text field here.


603
00:28:56,736 --> 00:28:59,456
And if you are using explicit
constraints, it's a property.


604
00:28:59,456 --> 00:29:01,886
And that's where you can
actually use these constants


605
00:29:02,186 --> 00:29:04,236
or numbers or a combination
of the two.


606
00:29:04,856 --> 00:29:07,726
The highest priority, when
they are competing, wins.


607
00:29:08,576 --> 00:29:11,636
And we'll look at
this in the context


608
00:29:11,636 --> 00:29:12,896
of content priorities
in a moment.


609
00:29:13,746 --> 00:29:15,216
But an important note.


610
00:29:15,216 --> 00:29:17,936
The system has some
priorities that it uses to lay


611
00:29:17,936 --> 00:29:18,886
out its views internally.


612
00:29:19,396 --> 00:29:22,786
On iOS, we have system layout
size fitting size at 50,


613
00:29:23,066 --> 00:29:26,196
and there are several window
priorities around 500 --


614
00:29:26,246 --> 00:29:30,436
490, 500, and 510
-- that OS X uses.


615
00:29:30,726 --> 00:29:32,626
If you look at the
NSLayoutConstraint header,


616
00:29:32,696 --> 00:29:34,106
you will see what
those numbers are.


617
00:29:34,106 --> 00:29:35,786
If you set those
equal to each other,


618
00:29:35,856 --> 00:29:37,576
you may end up in these
ambiguous situations


619
00:29:37,576 --> 00:29:38,456
that you're about to see.


620
00:29:38,856 --> 00:29:40,896
You want to use something
that's a little higher or lower


621
00:29:40,956 --> 00:29:42,426
than the priorities
the system is using.


622
00:29:43,486 --> 00:29:44,626
Content priorities.


623
00:29:45,506 --> 00:29:47,286
These are how a view
handles its content.


624
00:29:47,946 --> 00:29:50,126
By default, they are
set as Not Required,


625
00:29:50,816 --> 00:29:52,216
and you should not
set them as Required.


626
00:29:53,096 --> 00:29:54,776
Content needs to be able
to move a little bit.


627
00:29:54,976 --> 00:29:55,946
We have dynamic text.


628
00:29:55,946 --> 00:29:56,936
We have localization.


629
00:29:56,936 --> 00:29:59,546
We might be able to have users
choosing different images,


630
00:29:59,546 --> 00:30:00,176
stuff like that.


631
00:30:00,506 --> 00:30:02,516
It needs to have a
little bit of wiggle room.


632
00:30:02,516 --> 00:30:04,226
You can't say it always
has to be this size.


633
00:30:04,486 --> 00:30:05,806
You will end up with
unsatisfiable


634
00:30:05,806 --> 00:30:06,716
constraints eventually.


635
00:30:07,396 --> 00:30:10,286
But equal priorities that
are not resolved can cause


636
00:30:10,286 --> 00:30:11,766
ambiguity, as I said earlier.


637
00:30:11,766 --> 00:30:15,006
Let's look at an example of
this using content-hugging


638
00:30:15,006 --> 00:30:16,636
priorities, which is
one of the two types


639
00:30:16,666 --> 00:30:18,006
of content priorities
that we have.


640
00:30:18,856 --> 00:30:20,716
Here we have a text
field and button,


641
00:30:21,676 --> 00:30:23,636
and the text field is all
squished off to the side,


642
00:30:23,636 --> 00:30:25,606
and the button is
all spread out.


643
00:30:25,606 --> 00:30:28,186
That's because they both have
a content-hugging priority


644
00:30:28,186 --> 00:30:30,416
at their default, which is 250.


645
00:30:31,056 --> 00:30:32,256
The engine needed
to make a choice,


646
00:30:32,796 --> 00:30:35,436
and it wasn't sure whether
the answer was this or this.


647
00:30:36,446 --> 00:30:39,486
So you can actually tell it what
answer it should choose every


648
00:30:39,486 --> 00:30:41,206
time instead of getting one


649
00:30:41,206 --> 00:30:44,266
or the other depending
on your environment.


650
00:30:44,616 --> 00:30:47,226
So if you bring the button's
content-hugging priority


651
00:30:47,226 --> 00:30:49,666
down to 249, you will
get the first layout.


652
00:30:50,266 --> 00:30:53,936
And this is because the engine
looks at your constraints


653
00:30:53,936 --> 00:30:55,126
and your priorities
and says, oh,


654
00:30:55,606 --> 00:30:57,836
the text view hugging
priority is fairly important,


655
00:30:58,386 --> 00:31:00,596
but the button hugging priority
is not at all important,


656
00:31:00,926 --> 00:31:02,966
so I can go ahead and stretch
that away from its content


657
00:31:03,316 --> 00:31:06,456
to fill up this horizontal
part of your view here.


658
00:31:07,456 --> 00:31:08,736
Meanwhile, if you
take the button


659
00:31:08,736 --> 00:31:11,176
and you put its content-hugging
priority above that


660
00:31:11,226 --> 00:31:13,326
of the text field, you
will get the other solution


661
00:31:13,326 --> 00:31:14,976
because the engine says, hey,


662
00:31:15,186 --> 00:31:17,226
now I want to hug this
button text really closely,


663
00:31:17,466 --> 00:31:19,366
and that means that I can
stretch the text field


664
00:31:19,666 --> 00:31:20,826
in order to solve your layout.


665
00:31:21,716 --> 00:31:23,136
And that's really
all that's required


666
00:31:23,196 --> 00:31:27,016
to adjust an ambiguous
situation like that.


667
00:31:27,016 --> 00:31:29,036
The other type of
content priority is


668
00:31:29,036 --> 00:31:29,966
compression resistance.


669
00:31:30,816 --> 00:31:34,536
And this is how much a
view resists its content


670
00:31:34,536 --> 00:31:35,156
getting squished.


671
00:31:36,006 --> 00:31:39,076
So if you have -- squished is
a technical term, by the way.


672
00:31:39,356 --> 00:31:41,556
Feel free to use it
whenever to impress people.


673
00:31:42,296 --> 00:31:45,526
Compression resistance
priorities for image views


674
00:31:45,526 --> 00:31:49,216
and labels in the horizontal
direction default at 750,


675
00:31:49,216 --> 00:31:51,846
and that's a very high priority
because generally you want


676
00:31:51,846 --> 00:31:53,106
to see all of your content.


677
00:31:53,776 --> 00:31:56,166
But what if you localize
this app?


678
00:31:56,226 --> 00:31:58,296
And you had these two
things that were competing,


679
00:31:58,536 --> 00:32:00,636
and you had a language that
used a much longer word for


680
00:32:00,636 --> 00:32:01,546
"red," such as Polish.


681
00:32:02,176 --> 00:32:02,846
It could get clipped.


682
00:32:03,126 --> 00:32:05,366
This is one of the choices
that the engine has to make.


683
00:32:05,366 --> 00:32:08,276
It can either shrink the
image view or clip your label.


684
00:32:08,276 --> 00:32:10,236
It doesn't really know
what you want it to do,


685
00:32:10,676 --> 00:32:11,446
so it makes that choice.


686
00:32:12,416 --> 00:32:14,526
If you wanted the label to
always show all of its content


687
00:32:14,526 --> 00:32:16,986
and it was okay to shrink that
image a little bit, again,


688
00:32:16,986 --> 00:32:20,526
all you have to do is set the
labels content compression


689
00:32:20,526 --> 00:32:22,266
resistance priority
slightly higher than that


690
00:32:22,266 --> 00:32:25,756
of the image view, and now
you can see the whole view.


691
00:32:25,756 --> 00:32:29,436
So as you localize, that's the
adjustment that's made in order


692
00:32:29,436 --> 00:32:31,276
to make sure that all
of your text is visible


693
00:32:31,496 --> 00:32:34,276
to your audience.


694
00:32:34,406 --> 00:32:36,076
So those are priorities.


695
00:32:37,576 --> 00:32:39,316
They can help you
solve unsatisfiability,


696
00:32:40,226 --> 00:32:42,766
which is that thing that causes
that horrible log that you see


697
00:32:43,256 --> 00:32:45,376
when you build and run
and everything is broken.


698
00:32:45,596 --> 00:32:48,156
So they are really helpful,
but you want to look


699
00:32:48,156 --> 00:32:49,236
out for competing priorities.


700
00:32:49,236 --> 00:32:51,966
If they are competing, you can
get ambiguity, as you just saw.


701
00:32:52,576 --> 00:32:54,586
Results are more
consistent across screens


702
00:32:54,586 --> 00:32:56,986
and windows when you do this.


703
00:32:56,986 --> 00:32:58,956
If you use content
priorities well,


704
00:32:58,956 --> 00:33:00,016
you can get to the right layout.


705
00:33:00,366 --> 00:33:02,796
Sometimes all that's
needed is adjusting hugging


706
00:33:02,796 --> 00:33:05,476
or compression resistance
a little bit.


707
00:33:05,526 --> 00:33:08,056
Now in building our layout,
we have added some priorities


708
00:33:08,166 --> 00:33:10,206
for your constraints
and your content.


709
00:33:10,986 --> 00:33:14,206
So what else do we need in order
to finish solving this layout?


710
00:33:14,866 --> 00:33:15,276
Alignment.


711
00:33:15,276 --> 00:33:17,996
Again, if you have been using
Auto Layout, you are familiar


712
00:33:17,996 --> 00:33:18,966
with aligning your views.


713
00:33:18,966 --> 00:33:21,266
They need to have some sort
of horizontal alignment,


714
00:33:21,266 --> 00:33:23,536
so they know how to relate
to each other, and some sort


715
00:33:23,536 --> 00:33:24,376
of vertical alignment.


716
00:33:24,376 --> 00:33:28,306
I am going to talk specifically
here about aligning text.


717
00:33:29,466 --> 00:33:32,606
So first of all, with text
views, we have the concept


718
00:33:32,606 --> 00:33:34,866
of a baseline, and
this is the line right


719
00:33:34,866 --> 00:33:38,866
under the bottom of the text.


720
00:33:38,866 --> 00:33:40,586
Text views have a first baseline


721
00:33:40,626 --> 00:33:45,726
and a last baseline alignment
thing, where you can --


722
00:33:45,726 --> 00:33:47,716
the first baseline runs right
under the first line of text,


723
00:33:47,966 --> 00:33:50,416
and the last baseline runs right
under the last line of text.


724
00:33:50,966 --> 00:33:54,486
A single-line text view has
these two equal to each other.


725
00:33:55,516 --> 00:33:58,156
So it aligns text
better than top or bottom


726
00:33:58,156 --> 00:34:00,426
in many circumstances
and helps with stuff


727
00:34:00,426 --> 00:34:01,626
like dynamic text sizing.


728
00:34:02,346 --> 00:34:05,136
It gives you better control
over changing views as well


729
00:34:05,376 --> 00:34:06,606
if something needs to grow.


730
00:34:06,606 --> 00:34:08,315
For instance, if you have
a label next to a button


731
00:34:08,315 --> 00:34:10,916
and they are aligned by the
bottom, the button's frame


732
00:34:10,916 --> 00:34:12,636
in this instance
is a little large


733
00:34:12,636 --> 00:34:14,096
because it's filling
in some extra space.


734
00:34:14,806 --> 00:34:18,116
So if I add a couple of lines of
text to it, the button can sort


735
00:34:18,116 --> 00:34:20,436
of end up in a nebulous area.


736
00:34:21,126 --> 00:34:24,525
And I might want to center align
that, or it might be better


737
00:34:24,525 --> 00:34:26,406
to have it look more
something like messages


738
00:34:26,795 --> 00:34:28,485
and have it sit right
at the bottom next


739
00:34:28,485 --> 00:34:29,476
to that last line of text.


740
00:34:29,666 --> 00:34:33,556
So if I just align them by
last baseline, no matter what


741
00:34:33,556 --> 00:34:36,516
that text view does, the
button will stay aligned


742
00:34:36,516 --> 00:34:37,516
with that last baseline.


743
00:34:37,706 --> 00:34:39,656
And of course, you can also
do it for the first baseline


744
00:34:39,656 --> 00:34:41,886
if that's the sort
of view you desire.


745
00:34:41,886 --> 00:34:44,856
So as you have a growing
view, it's staying aligned


746
00:34:44,856 --> 00:34:46,616
with the views around it.


747
00:34:46,926 --> 00:34:50,946
The other important part of
text alignment is leading


748
00:34:50,946 --> 00:34:51,476
and trailing.


749
00:34:51,476 --> 00:34:53,456
This is actually important
for all types of views,


750
00:34:53,876 --> 00:34:56,346
but its big use is
for localization.


751
00:34:56,775 --> 00:34:59,376
If you are in a left-to-right
language


752
00:34:59,376 --> 00:35:01,406
when you are writing
your app and you use left


753
00:35:01,406 --> 00:35:04,516
and right constraints for your
layout and it gets localized


754
00:35:04,516 --> 00:35:06,926
to a language that uses
right-to-left, you're going


755
00:35:06,926 --> 00:35:07,926
to get some odd results.


756
00:35:08,076 --> 00:35:09,446
It will look something
like this.


757
00:35:10,126 --> 00:35:11,576
Everything sort of
flips in place,


758
00:35:12,356 --> 00:35:14,256
but it no longer reads properly.


759
00:35:14,386 --> 00:35:16,436
I was reading from the image
view over through the text,


760
00:35:16,436 --> 00:35:19,356
and now I am reading the
text from the other direction


761
00:35:19,356 --> 00:35:20,716
and it's going over
to the image view.


762
00:35:20,716 --> 00:35:23,106
That's not really what I wanted.


763
00:35:23,136 --> 00:35:26,076
If you use the exact same
constraints with leading


764
00:35:26,076 --> 00:35:28,856
and trailing alignments instead,
leading for left and trailing


765
00:35:28,856 --> 00:35:31,596
for right, you would end
up with the correct layout,


766
00:35:31,596 --> 00:35:35,036
where everything actually reads
exactly the way you originally


767
00:35:35,036 --> 00:35:37,586
designed it when you switch
to a language that goes


768
00:35:37,586 --> 00:35:39,846
in a different orientation than
the one you were starting with.


769
00:35:40,446 --> 00:35:43,256
So use leading and
trailing pretty much always.


770
00:35:43,526 --> 00:35:45,416
There might be some
circumstances


771
00:35:45,416 --> 00:35:46,736
where you still need
to use left and right.


772
00:35:46,906 --> 00:35:48,526
I am not familiar
with any right now.


773
00:35:48,526 --> 00:35:49,786
I am sure that you
guys have a few.


774
00:35:50,296 --> 00:35:52,626
But if you do use
left and right at all,


775
00:35:53,196 --> 00:35:55,396
be careful when you are mixing
and matching that with leading


776
00:35:55,396 --> 00:35:58,096
and trailing because, again,
when that environment changes,


777
00:35:58,096 --> 00:36:00,036
you might end up with
unsatisfiable constraints.


778
00:36:01,446 --> 00:36:02,646
Okay. Final piece


779
00:36:02,646 --> 00:36:06,016
of our alignment puzzle
is alignment rects.


780
00:36:06,736 --> 00:36:08,006
Alignment rects are important


781
00:36:08,006 --> 00:36:10,556
because it's what the
engine actually calculates.


782
00:36:11,116 --> 00:36:12,836
The engine takes all
of your constraints,


783
00:36:13,216 --> 00:36:15,636
calculates the alignment
rects, and uses them


784
00:36:15,636 --> 00:36:16,846
to actually lay out your views.


785
00:36:17,786 --> 00:36:20,536
So what are alignment rects?


786
00:36:20,536 --> 00:36:23,236
They are usually the frame
of the view, but not always.


787
00:36:24,066 --> 00:36:26,376
Instead of just being the
frame around the view,


788
00:36:26,376 --> 00:36:28,496
it includes the critical
content of the view,


789
00:36:28,936 --> 00:36:30,376
which is what you
really want to align.


790
00:36:30,936 --> 00:36:32,416
Here we have a checkbox,
for instance,


791
00:36:32,416 --> 00:36:33,896
where if you were doing
a center x alignment


792
00:36:33,896 --> 00:36:35,976
with some other view, you
would probably want to align it


793
00:36:35,976 --> 00:36:38,376
by the center of the
circle and not by the center


794
00:36:38,376 --> 00:36:40,366
of the checkbox,
the whole check,


795
00:36:40,436 --> 00:36:41,586
which would be a
little bit too high.


796
00:36:42,036 --> 00:36:43,966
Same thing with a
button that has a shadow.


797
00:36:44,346 --> 00:36:47,266
It kind of gets rid of those
little extra bits and focuses


798
00:36:47,266 --> 00:36:48,726
on the critical part
of the content.


799
00:36:49,186 --> 00:36:51,506
It doesn't change when the
view transforms, either.


800
00:36:51,916 --> 00:36:53,846
So when you lay out your
view and want to emphasize


801
00:36:53,846 --> 00:36:56,356
or deemphasize something,
it won't mess up the rest


802
00:36:56,356 --> 00:36:58,216
of your layout to throw
a transform in there.


803
00:36:59,276 --> 00:37:00,876
If you do need to change these,


804
00:37:01,126 --> 00:37:04,536
which you should very rarely
need to do, we have an override


805
00:37:04,646 --> 00:37:06,586
for alignment rect
insets you can use.


806
00:37:06,986 --> 00:37:09,946
And that basically means you
can hand the engine, say, oh,


807
00:37:09,946 --> 00:37:11,586
whatever alignment rect
you are calculating,


808
00:37:11,786 --> 00:37:15,036
inset it by this much
and use that instead.


809
00:37:15,036 --> 00:37:17,816
You will very rarely if ever
need to do that in your layout,


810
00:37:17,866 --> 00:37:18,986
but it is there if you need it.


811
00:37:19,076 --> 00:37:23,346
To find out what the engine has
actually calculated for you,


812
00:37:23,576 --> 00:37:26,086
you can draw it on your view
using the view debugging option


813
00:37:26,086 --> 00:37:27,746
in the Debug menu of Xcode


814
00:37:28,616 --> 00:37:30,816
and just selecting Show
Alignment Rectangles.


815
00:37:31,186 --> 00:37:33,256
This will draw yellow alignment
rectangles on your view.


816
00:37:33,256 --> 00:37:36,976
You can also get it from the
debugger using alignment rect


817
00:37:36,976 --> 00:37:38,636
for frame on specific views.


818
00:37:39,586 --> 00:37:42,026
We are going to talk about that
more in Part 2 when we talk


819
00:37:42,026 --> 00:37:44,566
about debugging layouts,
so definitely tune in there


820
00:37:44,566 --> 00:37:46,496
if you want to learn more
about how all this works.


821
00:37:47,386 --> 00:37:49,516
So for alignment, we've learned


822
00:37:49,516 --> 00:37:52,086
that text is a little bit
different than everything else.


823
00:37:52,166 --> 00:37:54,546
You want to make sure that you
are ready for both dynamic text


824
00:37:54,546 --> 00:37:56,906
and localization when you
are preparing your app,


825
00:37:56,906 --> 00:37:58,776
and Auto Layout can
really help you with that.


826
00:37:59,306 --> 00:38:00,816
You also have this possibility


827
00:38:00,816 --> 00:38:02,446
of overriding alignment
rect insets


828
00:38:02,446 --> 00:38:05,786
if you have very interesting,
specific views that need to sit


829
00:38:05,946 --> 00:38:07,366
in a very specific frame.


830
00:38:08,296 --> 00:38:09,656
So where are we in our layout?


831
00:38:10,226 --> 00:38:13,946
Okay. We have now alignment,
and if we needed to,


832
00:38:13,946 --> 00:38:15,686
we overrode a couple of
alignment rect insets.


833
00:38:16,856 --> 00:38:19,786
Now we are ready to let
the engine do its work.


834
00:38:20,546 --> 00:38:21,676
So let's throw everything
in there.


835
00:38:22,786 --> 00:38:24,026
The layout engine
will think about it,


836
00:38:24,086 --> 00:38:27,726
calculate your alignment rects,
and then that will be used


837
00:38:27,786 --> 00:38:29,276
to actually build the layout.


838
00:38:30,136 --> 00:38:33,376
Now you have a very happy layout
that's exactly what you wanted


839
00:38:33,706 --> 00:38:34,606
for every screen size.


840
00:38:34,606 --> 00:38:35,886
Trust me, this is your
layout that you wanted.


841
00:38:35,886 --> 00:38:35,976
Okay?


842
00:38:36,041 --> 00:38:38,041
[ Laughter ]


843
00:38:38,066 --> 00:38:39,166
So let's see.


844
00:38:39,166 --> 00:38:41,046
Let's summarize what
you've learned today.


845
00:38:41,836 --> 00:38:44,686
Stack views are a great way
to build a maintainable layout


846
00:38:44,986 --> 00:38:49,156
that will work well across
all of our devices and sizes.


847
00:38:49,156 --> 00:38:52,406
And you can use -- if you use
activate and deactivate properly


848
00:38:52,406 --> 00:38:54,526
for your constraints, you
can get really dynamic,


849
00:38:54,526 --> 00:38:59,116
interesting layouts that require
less work than having to design


850
00:38:59,116 --> 00:39:00,086
for every single screen.


851
00:39:01,176 --> 00:39:05,186
When you determine specific
sizes, use constraints.


852
00:39:05,716 --> 00:39:11,156
Override intrinsic content size
only when absolutely necessary.


853
00:39:11,156 --> 00:39:14,496
Use priorities to get those last
little adjustments together.


854
00:39:14,826 --> 00:39:17,996
Finally, alignment goes beyond
top, bottom, and center,


855
00:39:18,176 --> 00:39:20,696
especially when you are looking
at text, keep localization


856
00:39:20,696 --> 00:39:21,986
and dynamic text in mind.


857
00:39:22,926 --> 00:39:25,016
For more information
about all of this,


858
00:39:25,016 --> 00:39:26,756
we've got some documentation up.


859
00:39:27,186 --> 00:39:29,666
You can download that planets
sample code if you want to play


860
00:39:29,666 --> 00:39:32,326
around with animation,
and of course,


861
00:39:32,326 --> 00:39:36,836
you can go to the forums or, in
a pinch, contact our Evangelist.


862
00:39:37,166 --> 00:39:40,776
Tune in this afternoon for
Mysteries of Auto Layout Part 2,


863
00:39:41,056 --> 00:39:43,026
where you will learn more
about the layout cycle in depth


864
00:39:43,496 --> 00:39:44,496
and more information


865
00:39:44,496 --> 00:39:46,986
about debugging a layout that's
not doing what you want it


866
00:39:46,986 --> 00:39:47,826
to do.


867
00:39:47,826 --> 00:39:49,406
We have some other
related sessions here.


868
00:39:50,216 --> 00:39:50,636
Have a great day.


869
00:39:50,636 --> 00:39:50,816
Thank you.


870
00:39:51,016 --> 00:39:53,000
[ Applause ]

