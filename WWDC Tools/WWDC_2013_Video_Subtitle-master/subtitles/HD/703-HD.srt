1
00:00:00,506 --> 00:00:09,456
[ Silence ]


2
00:00:09,956 --> 00:00:11,376
>> Good afternoon.


3
00:00:11,446 --> 00:00:12,266
How is everybody?


4
00:00:13,686 --> 00:00:14,946
Really? That's exciting.


5
00:00:16,315 --> 00:00:16,646
[applause] Good.


6
00:00:16,986 --> 00:00:21,626
Good. Well, welcome to
the afternoon of day 2


7
00:00:21,626 --> 00:00:23,346
of the Worldwide
Developers Conference.


8
00:00:23,686 --> 00:00:27,406
My name is Brian Tucker and
I am ultimately responsible


9
00:00:27,406 --> 00:00:32,046
for Bluetooth here at Apple and
it's a honor and a privilege


10
00:00:32,116 --> 00:00:35,156
to spend a few minutes
to talk to you guys


11
00:00:35,156 --> 00:00:38,246
about what we're doing
specifically in CoreBluetooth,


12
00:00:38,296 --> 00:00:41,556
but in some sense of what we're
doing in Bluetooth in general.


13
00:00:41,956 --> 00:00:45,876
And in a major way where we
think Bluetooth is going.


14
00:00:46,116 --> 00:00:50,536
Right now, Bluetooth is
just absolutely everywhere.


15
00:00:50,786 --> 00:00:53,926
I'm seeing it-- Well, I went


16
00:00:53,926 --> 00:00:57,406
to a Consumer Electronic
Show this winter


17
00:00:57,406 --> 00:00:59,866
and I literally saw
Bluetooth everywhere.


18
00:00:59,866 --> 00:01:02,506
I saw it in trade
show booths walls.


19
00:01:02,506 --> 00:01:04,465
I saw it in people's shirts.


20
00:01:04,516 --> 00:01:07,886
I saw-- I think I saw a couple
of tattoos on people's arms.


21
00:01:07,886 --> 00:01:10,096
I swear. Bluetooth is
literally everywhere.


22
00:01:10,366 --> 00:01:13,096
So it's super, super
exciting times for us


23
00:01:13,096 --> 00:01:14,776
to talk about this stuff.


24
00:01:14,866 --> 00:01:18,396
So speaking of which, what
are we going to cover?


25
00:01:18,396 --> 00:01:21,116
So we're going to be covering
these particular areas.


26
00:01:21,486 --> 00:01:24,626
I'm going to focus a little bit
on BLE and the State of Union


27
00:01:24,626 --> 00:01:26,716
of where BLE is currently.


28
00:01:27,056 --> 00:01:30,306
We'll get into the evolution
of CoreBluetooth kind


29
00:01:30,306 --> 00:01:32,856
of where we started
to where we are today.


30
00:01:33,606 --> 00:01:35,956
We'll talk about
CoreBluetooth in iOS 7.


31
00:01:35,956 --> 00:01:38,366
Jason is going to take
you through that and some


32
00:01:38,496 --> 00:01:42,466
of the cool new features that I
think you guys are going to dig.


33
00:01:42,756 --> 00:01:45,566
Jason has a demo, a
code demo on that.


34
00:01:45,566 --> 00:01:48,006
He'll go through to the code
tying in to some of the things


35
00:01:48,006 --> 00:01:50,866
that he's talking as
it relates to iOS 7.


36
00:01:51,166 --> 00:01:53,826
And then finally, we have
some tips and best practices


37
00:01:53,826 --> 00:01:57,156
that we've learned by listening
to you guys in the forums


38
00:01:57,396 --> 00:02:00,556
as well as all the phone calls
and visits and conversations


39
00:02:00,556 --> 00:02:04,616
that we've had over the
last year or so on the do's


40
00:02:04,616 --> 00:02:07,146
and don't's around some
of this technology.


41
00:02:07,146 --> 00:02:11,136
So State of the Union,
so where is BLE today?


42
00:02:12,036 --> 00:02:15,156
Well, I think this number
pretty much says it all,


43
00:02:16,286 --> 00:02:17,756
a billion devices.


44
00:02:18,206 --> 00:02:21,926
Right now, we're--
there is estimation


45
00:02:22,266 --> 00:02:25,616
that over a billion Bluetooth--
low energy devices will ship


46
00:02:25,876 --> 00:02:28,956
by the end of this year and
that includes the last couple


47
00:02:28,956 --> 00:02:29,516
of years.


48
00:02:29,936 --> 00:02:32,356
But that's remarkable
considering this technology


49
00:02:32,356 --> 00:02:35,686
really kind of came in to its
own just a couple of years ago.


50
00:02:36,166 --> 00:02:39,436
So it's just crazy to think


51
00:02:39,866 --> 00:02:42,086
that we've reached
this point so quickly.


52
00:02:42,086 --> 00:02:44,286
In fact, if you look
at the projection


53
00:02:44,626 --> 00:02:47,946
over our BLE devices are
going to be in the market just


54
00:02:47,946 --> 00:02:49,106
in the next few years.


55
00:02:49,106 --> 00:02:50,906
It's just up and up and up


56
00:02:51,166 --> 00:02:52,926
and this is conservative
on my opinion.


57
00:02:53,236 --> 00:02:55,016
It's absolutely amazing.


58
00:02:55,016 --> 00:02:58,496
And this kind of ties into those
used cases that I keep talking


59
00:02:58,496 --> 00:03:01,086
to you guys about,
around all the areas,


60
00:03:01,446 --> 00:03:03,316
healthcare for example.


61
00:03:03,316 --> 00:03:06,906
I mean, I was in the lab earlier
today and group after group


62
00:03:06,906 --> 00:03:09,376
after group came up and
talked to me about healthcare


63
00:03:09,596 --> 00:03:11,526
and it's not just
one element of it.


64
00:03:11,736 --> 00:03:13,896
It might be a blood
glucose monitor.


65
00:03:13,896 --> 00:03:14,666
It might be something


66
00:03:14,666 --> 00:03:17,036
that literally controls a
limb attached to your leg


67
00:03:17,036 --> 00:03:19,736
that controls the
robotics that's a part--


68
00:03:19,736 --> 00:03:23,806
I mean it's just crazy where
these products are going to go,


69
00:03:23,806 --> 00:03:25,906
sports and fitness, security,


70
00:03:25,906 --> 00:03:28,286
we talked a little bit
about already, toys.


71
00:03:28,286 --> 00:03:30,976
I hope all of you got to see the
demo and the keynote on Monday


72
00:03:30,976 --> 00:03:36,446
which was awesome, and that was
all Bluetooth LE, pay systems,


73
00:03:36,446 --> 00:03:37,836
time services, proximity.


74
00:03:38,056 --> 00:03:39,866
We have some new stuff in
proximity that we're going


75
00:03:39,866 --> 00:03:42,606
to talk about today and it's
going to come up and more


76
00:03:42,606 --> 00:03:48,636
in a Core Location session
later tomorrow I believe is


77
00:03:48,636 --> 00:03:50,766
when the Core Location
session is.


78
00:03:51,176 --> 00:03:54,046
So without further adieu,
I'd like to invite up Renaud


79
00:03:54,456 --> 00:03:56,816
who is going just to
talk about the evolution


80
00:03:56,816 --> 00:03:59,006
of CoreBluetooth
and get us going.


81
00:03:59,006 --> 00:03:59,626
So, Renaud?


82
00:03:59,626 --> 00:04:01,056
[Applause]


83
00:04:01,056 --> 00:04:02,856
>> Thank you, Brian.


84
00:04:03,866 --> 00:04:07,416
So, we introduced
CoreBluetooth in 2011


85
00:04:07,416 --> 00:04:10,576
and we were the first ones to
support Bluetooth Low Energy,


86
00:04:10,576 --> 00:04:13,436
the mass produced
device in the market.


87
00:04:14,366 --> 00:04:17,166
So if you remember in iOS 5
we introduced two classes,


88
00:04:17,166 --> 00:04:19,826
the CBCentralManager and
CBPeripheral that allowed you


89
00:04:19,826 --> 00:04:23,866
to scan for devices, connect
to them and then exchange it


90
00:04:23,866 --> 00:04:26,826
with them, which allowed
you to do a lot of--


91
00:04:26,826 --> 00:04:28,336
which a lot of applications
already.


92
00:04:29,566 --> 00:04:35,036
In iOS 6, we implemented the
other side of the Java rule


93
00:04:35,036 --> 00:04:37,586
of specification which is they
[inaudible] a peripheral rule


94
00:04:37,586 --> 00:04:38,496
and gets over rule.


95
00:04:38,496 --> 00:04:43,046
And for the CBPeripheralManager,
you were able to implement you


96
00:04:43,046 --> 00:04:45,516
on services and Field
CBCentralRequest.


97
00:04:45,966 --> 00:04:47,586
We also introduced
for the first time


98
00:04:47,586 --> 00:04:51,436
or peripheral database
caching mechanism


99
00:04:51,986 --> 00:04:55,016
which drastically improves
performance especially


100
00:04:55,016 --> 00:04:59,626
on discovery as you may
already use that in your app.


101
00:05:00,656 --> 00:05:03,376
Well, iOS 7 is all
about LE, Evolved.


102
00:05:03,376 --> 00:05:07,966
It's about refining OAPIs
based on new feedback


103
00:05:07,966 --> 00:05:11,556
and because we monitor, first
and foremost the mailing list


104
00:05:11,556 --> 00:05:12,626
and the [inaudible] forums.


105
00:05:12,626 --> 00:05:14,956
We also looked at all your
radars that you sent us.


106
00:05:15,606 --> 00:05:19,046
And we are refining OAPIs and
we're also filling the gaps.


107
00:05:19,046 --> 00:05:21,706
We're also putting the last
remaining pieces of the puzzle


108
00:05:21,986 --> 00:05:24,436
to provide user-based
API, so best


109
00:05:24,436 --> 00:05:26,016
and the simplest
API you can use.


110
00:05:26,466 --> 00:05:30,936
So here's what you're going
to talk, a high level agenda.


111
00:05:30,936 --> 00:05:34,176
We simplified Device
Management in iOS 7.


112
00:05:34,536 --> 00:05:36,526
We got more intelligent
peripherals.


113
00:05:37,546 --> 00:05:40,156
We improved performance again.


114
00:05:40,156 --> 00:05:44,356
And pretty drastically
again, we solved the problem


115
00:05:44,356 --> 00:05:46,906
of application persistence
that some of you may have


116
00:05:47,496 --> 00:05:50,716
and we also did some built-in
services right into the OS.


117
00:05:51,136 --> 00:05:55,296
But before I move
to these points,


118
00:05:55,296 --> 00:05:58,346
I want to have a discussion
with you about the simulator.


119
00:05:59,316 --> 00:06:05,306
In 2011, we had a simulator's
report for all coverage of APIs


120
00:06:05,306 --> 00:06:07,606
because low energy was
an emerging market.


121
00:06:07,606 --> 00:06:09,936
There was almost no
device available.


122
00:06:10,576 --> 00:06:12,906
We were in shipping
iOS devices until late


123
00:06:12,906 --> 00:06:14,516
in the year with iPhone 4S.


124
00:06:15,096 --> 00:06:18,226
And that made development very
difficult for you and for us.


125
00:06:18,286 --> 00:06:19,776
Therefore, we introduced
a simulator.


126
00:06:19,776 --> 00:06:23,716
In 2013, nowadays,
things are very different.


127
00:06:23,906 --> 00:06:27,256
The market is exploding,
like Brian just told you.


128
00:06:27,946 --> 00:06:30,156
There are many, many
LE-compatible devices


129
00:06:30,156 --> 00:06:33,166
on the market including all
our shipping iOS hardware


130
00:06:33,166 --> 00:06:34,606
and most of them are hardware.


131
00:06:35,096 --> 00:06:36,196
And you also have access


132
00:06:36,196 --> 00:06:39,086
to fantastic third-party
development kits running


133
00:06:39,086 --> 00:06:41,746
on less fantastic OSs,
but very fantastic anyway.


134
00:06:42,456 --> 00:06:46,916
And as we move forward and
implement more and more feature


135
00:06:46,916 --> 00:06:49,386
in CoreBluetooth and we're
moving in a breakneck speed.


136
00:06:49,386 --> 00:06:54,396
It gets harder and harder for us
to give the simulator up to par


137
00:06:54,396 --> 00:06:56,116
with what's running
on the hardware.


138
00:06:56,116 --> 00:06:59,936
We cannot continue properly
supporting all the [inaudible]


139
00:06:59,936 --> 00:07:03,116
goals that you guys may be
able to buy from third parties


140
00:07:03,276 --> 00:07:04,486
that you can plug on your Mac.


141
00:07:04,796 --> 00:07:08,356
And run it exactly as it
should on an iOS device.


142
00:07:09,336 --> 00:07:11,226
And for these reasons
we are now seeing


143
00:07:11,226 --> 00:07:13,646
that we're dropping
simulator support.


144
00:07:13,836 --> 00:07:16,916
So best way to test
CoreBluetooth is really


145
00:07:16,916 --> 00:07:20,446
on the iOS hardware itself
with all the behaviors--


146
00:07:20,446 --> 00:07:23,056
specific behaviors to iOS,


147
00:07:23,056 --> 00:07:25,636
because all hardware
has specificities


148
00:07:25,636 --> 00:07:27,376
that a simulator cannot obtain.


149
00:07:27,996 --> 00:07:29,396
So we're dropping
simulator support.


150
00:07:30,076 --> 00:07:31,686
I'm sorry about that.


151
00:07:31,686 --> 00:07:32,776
Let's move on to the good stuff.


152
00:07:32,886 --> 00:07:35,906
So I'm going to go into the
major changes in the API


153
00:07:36,066 --> 00:07:37,696
that we are doing in iOS 7.


154
00:07:37,696 --> 00:07:40,786
There's more, more-- There's
much more that you can see.


155
00:07:41,416 --> 00:07:42,466
I'm going to put that down.


156
00:07:43,086 --> 00:07:43,896
There's much more
in [inaudible].


157
00:07:43,896 --> 00:07:46,366
But I'm going to talk
about the major ones.


158
00:07:46,366 --> 00:07:49,506
So first of all, like I said,
we simplified device management.


159
00:07:49,506 --> 00:07:51,486
And you probably all
know this property.


160
00:07:51,486 --> 00:07:54,316
You probably all hate this
property which is UUID


161
00:07:54,386 --> 00:07:56,076
of CBPeripherals and CBCentrals.


162
00:07:56,526 --> 00:08:00,956
Another time in 2011, we
didn't have UUID class


163
00:08:00,956 --> 00:08:02,066
in the foundation framework.


164
00:08:02,066 --> 00:08:04,396
Therefore, we use a CFUUIDRef.


165
00:08:04,536 --> 00:08:08,446
Since then we now have
the NSUUID and we're going


166
00:08:08,446 --> 00:08:11,036
to deprecate a UUID property
and we have a new one


167
00:08:11,036 --> 00:08:12,186
which is called "IDentifier".


168
00:08:12,186 --> 00:08:15,426
And which is for all intents
and purposes the same value,


169
00:08:15,686 --> 00:08:18,096
but as a convenient NSUUID.


170
00:08:18,796 --> 00:08:21,636
And also these identifiers,
I know because--


171
00:08:21,636 --> 00:08:24,626
are now going to be created
at discovery, because we know


172
00:08:24,626 --> 00:08:27,386
that you had problems
with these being created


173
00:08:27,386 --> 00:08:28,206
at connection time.


174
00:08:28,206 --> 00:08:29,456
So they will always be there.


175
00:08:29,486 --> 00:08:30,546
I guarantee it to be there


176
00:08:30,976 --> 00:08:32,546
and they are much more
convenient to use.


177
00:08:33,076 --> 00:08:34,765
So UUID is deprecated.


178
00:08:35,576 --> 00:08:40,296
And so peripheral retrieval was
also-- was always very wonky.


179
00:08:40,885 --> 00:08:44,646
So UIVs retrievePeripherals
method that you gave an array


180
00:08:44,646 --> 00:08:49,466
of UUID to [inaudible]
peripherals callback comes


181
00:08:49,466 --> 00:08:49,996
to delegate.


182
00:08:49,996 --> 00:08:53,126
Same thing for the
connected peripherals,


183
00:08:53,126 --> 00:08:56,276
we have the same kind of
asynchronous delegate callback.


184
00:08:57,556 --> 00:08:59,396
This was always wonky.


185
00:08:59,396 --> 00:09:00,196
We didn't like it.


186
00:09:00,196 --> 00:09:00,946
You didn't like it.


187
00:09:01,116 --> 00:09:02,026
So we're changing that.


188
00:09:02,606 --> 00:09:05,186
In iOS 7, we're introducing
a new method called


189
00:09:05,186 --> 00:09:07,866
retrievePeripherals
WithIdentifiers.


190
00:09:08,446 --> 00:09:11,536
And whereas before UUIDs are
synchronous callback you had


191
00:09:11,536 --> 00:09:13,006
to wait for, for your objects.


192
00:09:13,646 --> 00:09:15,156
Now, you don't have
to do this anymore.


193
00:09:15,156 --> 00:09:17,446
This is asynchronous method,
it returns to you directly


194
00:09:17,446 --> 00:09:18,826
as the objects you
want to work with.


195
00:09:19,686 --> 00:09:21,246
Same thing for the
connected services,


196
00:09:21,246 --> 00:09:22,536
we also have asynchronous method


197
00:09:22,536 --> 00:09:25,846
for the connected
peripherals, sorry.


198
00:09:25,846 --> 00:09:29,206
And you can also pass an array
service you're interested in--


199
00:09:29,206 --> 00:09:30,336
you are interested in.


200
00:09:31,016 --> 00:09:34,066
So that you don't get just an
anonymous list of peripheral


201
00:09:34,066 --> 00:09:36,306
as you get peripherals that
you are only interested in.


202
00:09:37,026 --> 00:09:38,566
And once you use these methods,


203
00:09:38,566 --> 00:09:40,586
you cans continue using
your CBPeripherals


204
00:09:40,586 --> 00:09:45,796
like you use them before by,
for example, connecting to them.


205
00:09:46,286 --> 00:09:48,856
And so we saw that you
guys, these are a lot


206
00:09:48,856 --> 00:09:51,066
of boilerplate code to find


207
00:09:51,066 --> 00:09:53,386
out whenever a CBPeripheral
was being connected


208
00:09:53,416 --> 00:09:54,646
to it any point in time.


209
00:09:54,646 --> 00:09:56,776
So you had your upper
classes just around that,


210
00:09:56,776 --> 00:09:57,996
just to get this property.


211
00:09:58,496 --> 00:10:00,616
And we have the folders
be simple Boolean


212
00:10:00,616 --> 00:10:02,666
that told you whether a
peripheral was connected or not.


213
00:10:03,416 --> 00:10:05,006
We are deprecating that as well


214
00:10:05,006 --> 00:10:07,056
and we're introducing
a tri-state instead


215
00:10:07,516 --> 00:10:09,646
that tells you whenever a
peripheral is connected--


216
00:10:09,826 --> 00:10:12,876
connected to or simply
connected at any point in time.


217
00:10:13,186 --> 00:10:16,156
Simple change is going to-- we
think is going to simplify a lot


218
00:10:16,156 --> 00:10:20,236
of your code, is
going to be great.


219
00:10:20,376 --> 00:10:24,306
We also improve all
service and validation API.


220
00:10:24,426 --> 00:10:29,156
So for those of you that cared
about that, we had this kind


221
00:10:29,156 --> 00:10:32,966
of bazooka callback that nukes
the world service database


222
00:10:32,966 --> 00:10:35,056
on a peripheral or
when database changed.


223
00:10:35,586 --> 00:10:38,176
And that wasn't really good,
because you had to restart,


224
00:10:38,176 --> 00:10:39,446
rediscover all services


225
00:10:39,446 --> 00:10:41,266
and restart all services
from scratch.


226
00:10:41,936 --> 00:10:45,566
Well, we have a more fine grain
callback that gives you exactly


227
00:10:45,566 --> 00:10:48,506
which services when
validated, and all services


228
00:10:48,506 --> 00:10:50,376
that were not been
validated are still valid


229
00:10:50,376 --> 00:10:53,016
and you can continue using them
without restarting anything.


230
00:10:53,686 --> 00:10:57,596
So again you see all these-- all
these APIs are about refining


231
00:10:57,596 --> 00:11:00,076
and fixing of things we--
that are not proper--


232
00:11:00,076 --> 00:11:02,756
that were not proper previously.


233
00:11:03,206 --> 00:11:05,216
All right.


234
00:11:05,456 --> 00:11:08,106
Anyway, going to now-- that's
finished for the API changes.


235
00:11:08,106 --> 00:11:10,326
I'm going to invite Jason
to the stage to talk more


236
00:11:10,326 --> 00:11:11,856
about new iOS 7 features.


237
00:11:11,856 --> 00:11:12,046
[Applause]


238
00:11:12,046 --> 00:11:12,636
>> Thanks Renaud.


239
00:11:13,346 --> 00:11:16,116
So next I want to talk about
something that's very near


240
00:11:16,116 --> 00:11:17,526
and dear to our heart
here at Apple.


241
00:11:17,586 --> 00:11:20,556
I think it's super important
and that's performance.


242
00:11:20,876 --> 00:11:24,696
So in iOS 7 we've made a ton
if performance improvements.


243
00:11:25,166 --> 00:11:27,626
And don't worry I'm not going
to bore you with the details


244
00:11:27,626 --> 00:11:29,486
of each and everyone
that we've done.


245
00:11:29,486 --> 00:11:32,376
But I am going to talk about
two main areas of improvement


246
00:11:32,376 --> 00:11:33,896
that we're really excited about


247
00:11:33,896 --> 00:11:35,476
and we think you guys
are going to love.


248
00:11:35,806 --> 00:11:37,466
The first of those is caching.


249
00:11:38,206 --> 00:11:40,036
So as Renauld said earlier,


250
00:11:40,556 --> 00:11:43,456
we first implemented the
database caching in iOS 6.


251
00:11:43,746 --> 00:11:45,576
And what caching
does is it allows us


252
00:11:45,576 --> 00:11:48,776
to remember the attributes that
we find on a remote device.


253
00:11:49,176 --> 00:11:51,056
So the next time one
of your application--


254
00:11:51,056 --> 00:11:52,486
wants one of those
attributes, we don't have


255
00:11:52,486 --> 00:11:53,846
to go backout over the air.


256
00:11:54,576 --> 00:11:58,226
And these lets us really
make things go a lot faster


257
00:11:58,226 --> 00:11:59,946
and save a lot of power,
'cause we're cutting back


258
00:11:59,946 --> 00:12:01,636
on the unnecessary conversation.


259
00:12:02,526 --> 00:12:05,986
So in iOS 6, we are currently
caching two attributes,


260
00:12:06,456 --> 00:12:08,366
cache services and
their characteristics.


261
00:12:08,366 --> 00:12:09,556
And this is working really well


262
00:12:09,556 --> 00:12:12,426
because once you do your
initial discovery it--


263
00:12:12,426 --> 00:12:13,576
they're all in the cache


264
00:12:13,576 --> 00:12:15,336
and discovery will fly
the next time around.


265
00:12:15,906 --> 00:12:19,396
In iOS 7, we've taken the
caching that we've done


266
00:12:19,696 --> 00:12:22,356
and we've extended it,
and we've added caching


267
00:12:22,356 --> 00:12:23,806
for characteristic descriptors.


268
00:12:23,906 --> 00:12:26,506
So now, every attribute
that you can discover


269
00:12:26,506 --> 00:12:30,046
in a remote device's database,
services, characteristics


270
00:12:30,246 --> 00:12:33,396
and characteristic descriptors
will be automatically cached


271
00:12:33,396 --> 00:12:34,716
for you by the system.


272
00:12:35,586 --> 00:12:37,346
So we're really excited
about that.


273
00:12:37,696 --> 00:12:40,696
But you might notice there is
one attribute up there that's--


274
00:12:40,746 --> 00:12:41,766
we haven't talked about yet.


275
00:12:42,106 --> 00:12:43,576
That's characteristic values.


276
00:12:43,576 --> 00:12:45,116
And there's a good
reason for it.


277
00:12:45,686 --> 00:12:48,496
So up to this point,
all of the attributes


278
00:12:48,496 --> 00:12:50,696
that we're caching are static.


279
00:12:50,956 --> 00:12:52,326
Their contents never change.


280
00:12:52,766 --> 00:12:55,066
But characteristic
values can be dynamic.


281
00:12:55,256 --> 00:12:56,646
You see what I mean
by that, you--


282
00:12:56,746 --> 00:12:58,896
we can look at the heart rate
measurement characteristic value


283
00:12:58,896 --> 00:12:59,546
as an example.


284
00:13:00,176 --> 00:13:01,836
So right now, if you're to read


285
00:13:01,956 --> 00:13:04,076
that heart rate measurement
characteristic value,


286
00:13:04,186 --> 00:13:07,076
you'd see that it's at
190 beats per minute,


287
00:13:07,146 --> 00:13:09,216
which by no small
coincidence is right


288
00:13:09,216 --> 00:13:10,896
about where my own heart
rate is at the moment.


289
00:13:11,396 --> 00:13:16,086
But later on if you were to read
it perhaps once I got off this


290
00:13:16,086 --> 00:13:18,826
giant stage with this bright
lights in my face, you might see


291
00:13:18,826 --> 00:13:22,146
that it's dropped down
to under 100, good thing.


292
00:13:22,886 --> 00:13:25,086
So how do we cache this?


293
00:13:25,086 --> 00:13:25,616
What do we do?


294
00:13:25,796 --> 00:13:29,146
Well since the system doesn't
know whether a characteristic


295
00:13:29,146 --> 00:13:30,806
value is static or dynamic.


296
00:13:31,536 --> 00:13:34,236
Your application knows,
because you guys are the ones


297
00:13:34,236 --> 00:13:35,316
who were using this service.


298
00:13:35,956 --> 00:13:39,056
So what we are going to do is
when we discover characteristic,


299
00:13:39,586 --> 00:13:43,086
if we've previously read
that characteristic value,


300
00:13:43,416 --> 00:13:44,936
we're going to pre-fill that out


301
00:13:45,446 --> 00:13:46,916
when we send you
the characteristic


302
00:13:46,916 --> 00:13:48,136
up in your discovery call.


303
00:13:48,816 --> 00:13:51,666
So that if you know that you
just discovered a characteristic


304
00:13:51,666 --> 00:13:54,146
that is static, you know it
will never change, you're done.


305
00:13:54,286 --> 00:13:55,836
You don't even have to
issue that we're going


306
00:13:55,836 --> 00:13:56,916
to wait for that response.


307
00:13:57,146 --> 00:13:58,416
There's nothing left
for you to do.


308
00:13:58,836 --> 00:14:00,366
So we're really excited
about this.


309
00:14:00,366 --> 00:14:01,846
We think this is--
this can be great


310
00:14:01,846 --> 00:14:03,116
for a lot of your used cases.


311
00:14:03,476 --> 00:14:05,806
And the best part about
this is you don't have


312
00:14:05,806 --> 00:14:07,056
to do anything to get this.


313
00:14:07,156 --> 00:14:10,046
Just like the caching iOS 6,
it's all handled automatically


314
00:14:10,046 --> 00:14:11,146
for you by the system.


315
00:14:11,706 --> 00:14:15,296
The second performance
improvement that I want to talk


316
00:14:15,296 --> 00:14:18,966
about is something that we've
seen a lot of discussion around,


317
00:14:19,516 --> 00:14:21,246
and that's sending data.


318
00:14:21,956 --> 00:14:24,356
So when we are first
taking a look


319
00:14:24,356 --> 00:14:26,356
at the Bluetooth Low Energy
technology, we're trying


320
00:14:26,356 --> 00:14:28,906
to figure out, OK,
what are people going


321
00:14:28,906 --> 00:14:29,756
to want to do with this?


322
00:14:29,756 --> 00:14:30,706
How are they going to use it?


323
00:14:31,116 --> 00:14:33,306
So we're thinking its
Bluetooth Low Energy,


324
00:14:33,796 --> 00:14:36,066
it's a packet-based protocol.


325
00:14:36,066 --> 00:14:38,996
It's good for sending small
amounts of data back and forth,


326
00:14:39,036 --> 00:14:40,206
but it's not really fast.


327
00:14:40,296 --> 00:14:44,036
So people will send things
like your heart rate.


328
00:14:44,036 --> 00:14:47,056
Or you might send
your GPS location.


329
00:14:47,626 --> 00:14:50,696
And of course there are always
the crazy ones out there.


330
00:14:51,256 --> 00:14:53,536
And they're going to-- they
might send something huge


331
00:14:53,536 --> 00:14:57,166
like all of the information
for one of your contacts.


332
00:14:57,986 --> 00:14:59,726
So maybe a little naive of us.


333
00:15:00,176 --> 00:15:01,916
But to be fair, there
were applications


334
00:15:01,916 --> 00:15:03,186
that sent all of those things.


335
00:15:03,816 --> 00:15:05,256
But then we started seeing apps


336
00:15:05,336 --> 00:15:07,286
that we're sending
a little bit more.


337
00:15:07,936 --> 00:15:09,476
Things like photographs


338
00:15:10,046 --> 00:15:13,106
or they'd be thinking the
week's worth of activity data.


339
00:15:13,886 --> 00:15:16,756
And then we learn that some
of you are successfully,


340
00:15:16,916 --> 00:15:21,216
I might add, using CoreBluetooth
to updates to their devices.


341
00:15:23,106 --> 00:15:27,646
So once we kind of got over the
shock, we took a look, you know,


342
00:15:27,646 --> 00:15:29,776
obviously things are
growing by leaps and bounds.


343
00:15:29,776 --> 00:15:33,956
It's not a single heart rate
value anymore it's entire files.


344
00:15:34,506 --> 00:15:36,426
And we crunch some numbers.


345
00:15:36,426 --> 00:15:37,956
And based on this
current rate of growth,


346
00:15:38,106 --> 00:15:40,046
we're pretty confident
that somewhere out there,


347
00:15:40,176 --> 00:15:42,936
there's a government
contractor who's laboring a way


348
00:15:42,936 --> 00:15:44,736
on an application that's going


349
00:15:44,736 --> 00:15:47,386
to transfer the entire digital
collection of the Library


350
00:15:47,386 --> 00:15:48,976
of Congress when you
walk into the building.


351
00:15:50,566 --> 00:15:52,726
Frankly, it's the--
scares the hell out of us.


352
00:15:52,726 --> 00:15:54,966
But since some of you appear


353
00:15:54,966 --> 00:15:58,456
to have confused Buetooth
low energy with 80211N,


354
00:15:59,556 --> 00:16:03,426
we figure that the least we can
do is take a page from Wi-Fi


355
00:16:03,426 --> 00:16:05,126
and try to make things
go a little faster.


356
00:16:05,166 --> 00:16:09,596
So in iOS 7, we worked on
improving our throughput speeds.


357
00:16:10,336 --> 00:16:12,346
How do we do this?


358
00:16:12,526 --> 00:16:14,086
The primary way we've
done this is


359
00:16:14,086 --> 00:16:16,316
by implementing the
MTU exchange request.


360
00:16:16,716 --> 00:16:17,836
And for those of
you who don't know,


361
00:16:17,986 --> 00:16:20,336
MTU stands for Maximum
Transmission Unit.


362
00:16:20,636 --> 00:16:22,116
And that's the largest
amount of data


363
00:16:22,116 --> 00:16:23,866
that we can send
in a single packet.


364
00:16:24,836 --> 00:16:28,166
Now when we increase this, we
can send more data in one go.


365
00:16:28,166 --> 00:16:29,736
And when we're sending
large amounts of data,


366
00:16:30,036 --> 00:16:31,666
it means we can send
it more efficiently.


367
00:16:32,536 --> 00:16:35,516
It might help to kind of
see exactly what this means


368
00:16:35,516 --> 00:16:36,906
when we're talking
about changing MTU.


369
00:16:36,906 --> 00:16:39,986
So I'm asking you to get
creative with me for a moment


370
00:16:39,986 --> 00:16:41,156
and we're going to imagine


371
00:16:41,156 --> 00:16:44,596
that when you're transferring
data via CoreBluetooth,


372
00:16:44,776 --> 00:16:46,936
you're actually sending
it by Rail.


373
00:16:48,086 --> 00:16:51,156
So you have same data to
send, you package it up,


374
00:16:51,156 --> 00:16:52,576
you take it down to
the train station,


375
00:16:52,976 --> 00:16:54,466
throw it out on the
train, the train leaves.


376
00:16:55,366 --> 00:16:57,426
When you have small
MTU, like what we have


377
00:16:57,426 --> 00:17:00,496
for the default you can
put a very small amount


378
00:17:00,496 --> 00:17:01,756
of data on each train.


379
00:17:01,916 --> 00:17:04,896
So you end up with
a lot little trains,


380
00:17:05,175 --> 00:17:09,026
and there's a reason why you
don't often see a train engine


381
00:17:09,026 --> 00:17:10,396
pulling a single car behind it,


382
00:17:10,866 --> 00:17:12,836
because it would be
incredibly inefficient.


383
00:17:13,445 --> 00:17:15,945
And the same holds through
for our Bluetooth Low Energy.


384
00:17:16,415 --> 00:17:20,156
So when we increase our
MTU, like I said before,


385
00:17:20,606 --> 00:17:24,276
we increase the amount of data
that we can send at once or put


386
00:17:24,276 --> 00:17:25,435
on a train if you will.


387
00:17:25,586 --> 00:17:29,686
So we end up with that same
train engine pulling a lot more


388
00:17:29,686 --> 00:17:30,526
data behind it.


389
00:17:31,056 --> 00:17:34,306
So by doing this we've cut
down on the overhead a ton


390
00:17:34,386 --> 00:17:36,856
and that allows us to
send more data in the


391
00:17:36,856 --> 00:17:39,246
in the same amount of time.


392
00:17:39,436 --> 00:17:42,806
So now in iOS 7 when you make
a connection from your app


393
00:17:43,136 --> 00:17:45,616
to remote peripheral, one of the
first things that we're going


394
00:17:45,616 --> 00:17:47,956
to do once that connection
goes through is try


395
00:17:47,956 --> 00:17:50,666
to negotiate a larger
MTU with that device.


396
00:17:51,376 --> 00:17:54,066
And we did some internal testing
while you're working on this


397
00:17:54,176 --> 00:17:56,686
to try to characterize
the amount


398
00:17:56,686 --> 00:17:58,306
of speed improvement
that we have seen.


399
00:17:58,776 --> 00:18:02,256
So we wrote a test app
that streamed large amounts


400
00:18:02,256 --> 00:18:05,316
of data via notifications,
which is a used case


401
00:18:05,316 --> 00:18:06,716
that we've seen a
lot of you doing.


402
00:18:07,176 --> 00:18:09,906
And we saw up to a
20 percent increase


403
00:18:09,906 --> 00:18:10,956
in throughput speeds there.


404
00:18:11,866 --> 00:18:13,766
And you don't-- this comes
with the standard disclaimer,


405
00:18:14,576 --> 00:18:16,246
this is very used
case dependent.


406
00:18:16,346 --> 00:18:18,006
It's going to depend on a lot


407
00:18:18,006 --> 00:18:20,456
of things you may see
less, you may see more.


408
00:18:21,636 --> 00:18:23,936
Things that could affect us
are your connection interval,


409
00:18:23,936 --> 00:18:27,586
the number of connection events,
what you had for breakfast


410
00:18:27,586 --> 00:18:30,506
that morning, the face of the
moon, you know, you name it.


411
00:18:30,506 --> 00:18:33,176
There's a lot that comes in
the play here, but all of this


412
00:18:33,176 --> 00:18:37,646
to say that it can be a very
nontrivial speed boost for those


413
00:18:37,646 --> 00:18:39,256
of you who are sending
large amounts of data.


414
00:18:39,356 --> 00:18:41,846
And even if you're not you
should still see a bump in kind


415
00:18:41,846 --> 00:18:43,856
of your standard activities
like your discovery,


416
00:18:43,856 --> 00:18:45,026
your reads and your writes.


417
00:18:45,256 --> 00:18:47,966
And again, let's save the
best part of this for last,


418
00:18:47,966 --> 00:18:49,926
because you get this all
for free, you don't have


419
00:18:49,926 --> 00:18:51,806
to make any changes
to your application


420
00:18:51,806 --> 00:18:54,746
to start taking advantage
of this.


421
00:18:56,146 --> 00:18:58,316
So we spend a lot of
time talking about how


422
00:18:58,316 --> 00:19:00,336
to make things faster,
faster, faster, faster.


423
00:19:00,336 --> 00:19:03,006
But for all of you who are
familiar with the story


424
00:19:03,006 --> 00:19:04,056
of the Tortoise and the Hare,


425
00:19:04,576 --> 00:19:07,396
you know that it's not
always the fastest one


426
00:19:07,396 --> 00:19:08,536
that wins the race.


427
00:19:09,156 --> 00:19:12,836
Sometimes it's Raphael the
running Teenage Mutant Ninja


428
00:19:12,836 --> 00:19:13,306
Turtle here.


429
00:19:14,186 --> 00:19:16,826
So for all of your Tortoises
out there, we're going to talk


430
00:19:16,826 --> 00:19:18,756
about how to give you
more staying power.


431
00:19:20,026 --> 00:19:22,766
But first let's take a
look at the current state


432
00:19:22,766 --> 00:19:24,296
of multitasking with
CoreBluetooth.


433
00:19:25,056 --> 00:19:30,396
So today, the user launches
their apps, they work well,


434
00:19:30,396 --> 00:19:31,576
they do everything
they're supposed to,


435
00:19:31,576 --> 00:19:33,006
they look great while doing it,


436
00:19:33,486 --> 00:19:35,896
but at some point despite
your valiant effort


437
00:19:36,486 --> 00:19:38,756
that user is going to want
to do somethings else.


438
00:19:39,236 --> 00:19:40,116
Depressing, I know.


439
00:19:40,326 --> 00:19:41,716
They're going to
background your application.


440
00:19:42,456 --> 00:19:44,356
But that's OK, because
that's why we came


441
00:19:44,356 --> 00:19:46,226
up with these two great
backgrounding modes.


442
00:19:46,526 --> 00:19:49,646
And your peripheral managers can
continue to host their services


443
00:19:49,646 --> 00:19:51,956
in the database and field
request from its remote central.


444
00:19:52,466 --> 00:19:53,556
And this work great.


445
00:19:53,556 --> 00:19:55,076
They allow your application
to continue


446
00:19:55,076 --> 00:19:57,396
to use CoreBluetooth even when
it's not on the foreground.


447
00:19:58,136 --> 00:20:00,806
But as many of you may be
aware, there's a problem.


448
00:20:01,656 --> 00:20:04,066
Because while your application
is running in the background,


449
00:20:04,066 --> 00:20:07,416
the system may terminate it if
it needs to free up more memory


450
00:20:07,416 --> 00:20:08,616
for the foreground application.


451
00:20:09,256 --> 00:20:11,846
So it doesn't take a
computer engineer to see


452
00:20:11,846 --> 00:20:15,146
that there might be a problem
here, because a lot of things


453
00:20:15,146 --> 00:20:15,676
that you guys do


454
00:20:15,676 --> 00:20:18,946
with CoreBluetooth
are really long-term,


455
00:20:19,456 --> 00:20:21,126
some of these used
cases can take hours,


456
00:20:21,126 --> 00:20:22,136
they can even take days.


457
00:20:22,136 --> 00:20:26,206
If you imagine an application,
a home security application


458
00:20:26,206 --> 00:20:28,846
that wants to reconnect to your
Smart Lock when you get home


459
00:20:28,846 --> 00:20:30,886
in the evening, well,
a lot of times


460
00:20:30,886 --> 00:20:33,016
if you've been using you phone
heavily throughout the day,


461
00:20:33,136 --> 00:20:34,936
that application
might not be running


462
00:20:34,936 --> 00:20:36,106
by the time you get back.


463
00:20:36,606 --> 00:20:39,886
So the question is,
"Can we allow the system


464
00:20:40,276 --> 00:20:45,246
to reclaim the memory that
it needs while allowing your


465
00:20:45,246 --> 00:20:48,666
application to continue
to use CoreBluetooth?"


466
00:20:49,796 --> 00:20:51,376
And the answer is no.


467
00:20:51,786 --> 00:20:54,326
So I'd like to thank you all
for coming to our session today


468
00:20:54,326 --> 00:20:55,596
and we'll see you
down at the lab.


469
00:20:55,876 --> 00:20:57,816
No, I'm just kidding, of
course, the answer is yes


470
00:20:57,816 --> 00:20:58,966
or we wouldn't be
here right now.


471
00:20:58,966 --> 00:21:01,196
And not only is it
yes, but we've come


472
00:21:01,196 --> 00:21:02,346
up with a really simple way


473
00:21:02,406 --> 00:21:03,906
that we think you guys
are going to love.


474
00:21:04,916 --> 00:21:05,806
So what are we doing?


475
00:21:06,576 --> 00:21:10,156
Well, the systems going to watch
the state of your application.


476
00:21:10,156 --> 00:21:11,226
It knows when it's running.


477
00:21:11,286 --> 00:21:12,716
It knows when it's
in the background.


478
00:21:13,146 --> 00:21:14,896
And it knows when
it gets terminated.


479
00:21:15,196 --> 00:21:17,746
So when that happens,
when it's gets terminated,


480
00:21:17,746 --> 00:21:19,056
we're going to look at why.


481
00:21:19,546 --> 00:21:22,426
And if it's because the system
needed free up more memory


482
00:21:22,426 --> 00:21:26,476
for the foreground app, and your
application was performing some


483
00:21:26,476 --> 00:21:29,086
long-term action with
CoreBluetooth at the time,


484
00:21:29,796 --> 00:21:32,676
then we're going to step in
on your application's behalf


485
00:21:32,856 --> 00:21:35,256
and take over and we'll
continue to do everything


486
00:21:35,256 --> 00:21:37,066
that it was doing when
it was in the background.


487
00:21:37,866 --> 00:21:40,536
At some point later, when you
need your application again,


488
00:21:40,876 --> 00:21:42,526
it will bring you
back and we're going


489
00:21:42,526 --> 00:21:44,726
to give you back everything, we
bring you right back up to speed


490
00:21:44,726 --> 00:21:46,046
where you were before
you went away.


491
00:21:47,076 --> 00:21:52,576
So we're calling this-- So
we're calling this feature State


492
00:21:52,576 --> 00:21:53,996
Preservations and restoration.


493
00:21:54,176 --> 00:21:55,536
Those of you might be familiar


494
00:21:55,536 --> 00:21:57,226
with the UIKit feature
the same name.


495
00:21:57,566 --> 00:21:59,256
It's pretty similar
conceptually.


496
00:21:59,776 --> 00:22:03,616
So this is an optional feature,
for those of you who don't run


497
00:22:03,616 --> 00:22:05,786
into the background or
who aren't interested


498
00:22:05,786 --> 00:22:07,686
in performing long-term
actions in the background,


499
00:22:08,006 --> 00:22:09,116
there's nothing for
you to do here.


500
00:22:09,456 --> 00:22:12,586
If you do care, you should
know that it's fully supported


501
00:22:12,586 --> 00:22:15,276
by both of our manager
classes, CBCentralManager


502
00:22:15,276 --> 00:22:16,446
and CBPeripheralManager.


503
00:22:17,006 --> 00:22:20,216
And there's not much work that
you need to do to adapt this.


504
00:22:20,216 --> 00:22:20,996
It's pretty simple.


505
00:22:21,286 --> 00:22:23,806
You're going to have to create
a unique restore identifier


506
00:22:23,806 --> 00:22:25,676
when you instantiate
your manager objects.


507
00:22:25,776 --> 00:22:26,796
And you're going to have


508
00:22:26,826 --> 00:22:29,206
to implement a single
new delegate method.


509
00:22:29,616 --> 00:22:31,286
That's it.


510
00:22:32,056 --> 00:22:34,656
So how does this work from
the system perspective?


511
00:22:34,876 --> 00:22:38,076
Well, when your application
is terminated,


512
00:22:38,076 --> 00:22:40,536
right before it goes away,
we're going to take a snap shot


513
00:22:40,536 --> 00:22:41,606
of everything it was doing.


514
00:22:41,886 --> 00:22:44,686
Assuming it was performing
some action with CoreBluetooth.


515
00:22:45,376 --> 00:22:49,056
For things like-- central
manager things this is what you


516
00:22:49,056 --> 00:22:53,116
are discovering, the devices
that you try to connect to


517
00:22:53,116 --> 00:22:56,886
or you had already connected to,
and all of the characteristics


518
00:22:56,886 --> 00:22:58,786
that you were subscribed
to on these devices.


519
00:22:59,686 --> 00:23:02,316
And the peripheral manager side
may keep track of everything


520
00:23:02,316 --> 00:23:04,966
as well, what you're
advertising, all the services


521
00:23:04,966 --> 00:23:07,786
that you'd publish in the
database, and all the centrals


522
00:23:07,786 --> 00:23:09,566
that were subscribed to
your characteristics.


523
00:23:10,066 --> 00:23:11,656
So once we take the snapshot,


524
00:23:11,656 --> 00:23:13,436
your application is
still terminated,


525
00:23:13,436 --> 00:23:14,466
it's no longer running.


526
00:23:14,466 --> 00:23:15,856
But like I said,
we've stepped in


527
00:23:15,856 --> 00:23:17,656
and we're doing everything
on its behalf.


528
00:23:18,276 --> 00:23:22,446
And we said that at some point,
something is going to happen


529
00:23:22,446 --> 00:23:24,276
and we said we'd bring you back.


530
00:23:24,986 --> 00:23:29,436
So any event that the system
either can't handle without you


531
00:23:29,436 --> 00:23:32,216
or that you need to know
about will trigger us


532
00:23:32,216 --> 00:23:33,556
to re-launch your application.


533
00:23:33,656 --> 00:23:36,486
And these are things like
that peripheral you're trying


534
00:23:36,486 --> 00:23:39,576
to connect to finally
completed or someone subscribed


535
00:23:39,576 --> 00:23:42,486
to a characteristic that you're
hosting, or your got an update


536
00:23:42,846 --> 00:23:45,056
to a characteristic that
your were subscribed on.


537
00:23:45,056 --> 00:23:48,256
And at that point we'll
re-launch you back


538
00:23:48,256 --> 00:23:49,496
into the background
where you were.


539
00:23:50,016 --> 00:23:52,296
And allow you to run for
a short period of time.


540
00:23:52,836 --> 00:23:56,616
The application is then going to
reinstantiate all the managers


541
00:23:56,616 --> 00:23:58,096
that I was using
before it went away.


542
00:23:58,936 --> 00:24:00,636
It's going to get that
one delegate callback


543
00:24:00,636 --> 00:24:02,056
where we give you
back all the state


544
00:24:02,056 --> 00:24:03,306
that we're keeping
track of for you.


545
00:24:03,476 --> 00:24:05,626
And then it's kind
of business as usual.


546
00:24:05,666 --> 00:24:08,796
You'll see that power on event
in your didUpdateState callback.


547
00:24:09,236 --> 00:24:12,626
And you're going to get whatever
event triggered us to re-launch


548
00:24:12,626 --> 00:24:14,406
and you'll get that
delegate callback as normal.


549
00:24:15,426 --> 00:24:17,596
So I know it might
seem like there a lot


550
00:24:17,596 --> 00:24:19,886
of moving pieces here,
but I said it was simple


551
00:24:19,946 --> 00:24:21,646
and I'd never lead you astray.


552
00:24:22,116 --> 00:24:24,376
So I'm going to show
you how simple it is


553
00:24:24,376 --> 00:24:27,276
by taking an existing
background capable application


554
00:24:27,276 --> 00:24:29,966
and adding support for state
preservation and restoration.


555
00:24:30,516 --> 00:24:38,596
[ Pause ]


556
00:24:39,096 --> 00:24:41,536
All right, so here is our app


557
00:24:42,226 --> 00:24:45,506
and it's a very simple heart
rate monitor application,


558
00:24:45,506 --> 00:24:48,086
it looks for all the
heart rate monitor devices


559
00:24:48,186 --> 00:24:49,236
that are near you.


560
00:24:49,296 --> 00:24:51,946
It connects to them and
it finds and subscribes


561
00:24:51,946 --> 00:24:54,316
to the heart rate-- at heart
rate measurement characteristics


562
00:24:54,316 --> 00:24:55,256
that we looked at earlier.


563
00:24:56,666 --> 00:24:58,066
It's been pretty
stripped down just


564
00:24:58,066 --> 00:24:59,746
for illustrative
purposes for this demo.


565
00:24:59,746 --> 00:25:02,586
But it should look pretty
familiar for any of you


566
00:25:02,586 --> 00:25:04,446
who have worked with
the CBCentralManager


567
00:25:04,446 --> 00:25:06,186
and CBPeripheral classes before.


568
00:25:06,836 --> 00:25:09,376
So before we get started, I'm
just going to take you in kind


569
00:25:09,376 --> 00:25:10,956
of a quick tour through
the code here


570
00:25:10,956 --> 00:25:13,146
so you can see what
we're working


571
00:25:13,146 --> 00:25:14,566
with before we start
making changes.


572
00:25:15,716 --> 00:25:17,276
So this is a single
view controller.


573
00:25:17,396 --> 00:25:18,856
Like I said very
simple application.


574
00:25:19,136 --> 00:25:21,696
Down here in viewDidLoad
where the magic starts,


575
00:25:21,946 --> 00:25:24,636
you can see that we instantiate
out central manager--


576
00:25:24,696 --> 00:25:25,976
single central manager object.


577
00:25:26,396 --> 00:25:28,586
And this object is going to be


578
00:25:28,586 --> 00:25:31,026
around for the lifetime
of our application.


579
00:25:31,976 --> 00:25:35,436
So as you all know after we
instantiate our manager, we're--


580
00:25:35,436 --> 00:25:36,206
the first thing that we're going


581
00:25:36,206 --> 00:25:38,026
to get is a callback
on didUpdateState.


582
00:25:38,456 --> 00:25:40,016
So in this situation when we see


583
00:25:40,016 --> 00:25:43,066
that the state has been powered
on, we simply begin scanning


584
00:25:43,066 --> 00:25:45,936
for devices that are advertising
the heart rate service.


585
00:25:47,026 --> 00:25:49,186
At this point when
we find the device,


586
00:25:49,186 --> 00:25:51,576
we're going to get a callback
to didDiscoverPeripheral.


587
00:25:51,656 --> 00:25:53,796
And there are a couple of things
that I wanted point out in here.


588
00:25:54,416 --> 00:25:57,546
So the first is that you can
see here, we have a list--


589
00:25:57,546 --> 00:25:59,776
we keep a list of heart
rate monitor devices around.


590
00:26:00,136 --> 00:26:03,986
So when you find a device and
you want to use that device,


591
00:26:04,256 --> 00:26:05,546
you need to keep
a reference to it.


592
00:26:05,966 --> 00:26:09,276
So the system knows, "Hey,
this application is trying


593
00:26:09,276 --> 00:26:10,936
to use this device, we
better keep it around.


594
00:26:11,456 --> 00:26:15,496
So we looked to see if we
have this OS in our list;


595
00:26:15,496 --> 00:26:16,756
and if not, we put it in there.


596
00:26:17,236 --> 00:26:19,226
And at that point we call
connect.net [phonetic].


597
00:26:19,746 --> 00:26:22,306
Hopefully, later on that
connection will complete


598
00:26:22,306 --> 00:26:24,136
and we'll get our
didConnectPeripheral callback.


599
00:26:24,136 --> 00:26:28,946
And at this point we simply set
the delegate and then we move


600
00:26:28,946 --> 00:26:31,986
on to kind of the
service interaction part


601
00:26:31,986 --> 00:26:33,396
of our phase of our application.


602
00:26:33,726 --> 00:26:36,156
The first thing we do is
we simply discover services


603
00:26:36,156 --> 00:26:38,296
and we're only interested
that heart rate service,


604
00:26:38,666 --> 00:26:39,486
pretty straightforward.


605
00:26:40,386 --> 00:26:42,156
Later on when the
command completes,


606
00:26:42,156 --> 00:26:44,456
we'll get our
didDiscoverServices callback.


607
00:26:44,456 --> 00:26:45,646
We're going to look
and see, hey,


608
00:26:45,856 --> 00:26:47,266
were we able to find
the service?


609
00:26:47,516 --> 00:26:49,266
And if so, the next
step we're going to look


610
00:26:49,266 --> 00:26:50,816
for that heart rate
measurement characteristic.


611
00:26:51,926 --> 00:26:54,196
Once that completes, again,
we're going to check to see,


612
00:26:54,196 --> 00:26:56,806
were we able to find it,
and we're simply going


613
00:26:56,806 --> 00:26:59,796
to call set notify value
to subscribe updates on it.


614
00:27:01,096 --> 00:27:03,526
Later on when that
value changes,


615
00:27:03,786 --> 00:27:06,806
the peripheral will send
us the new updated value,


616
00:27:06,806 --> 00:27:09,126
we'll get a didUpdateValue
for characteristic callback.


617
00:27:09,126 --> 00:27:10,736
And since this is
such a simple app,


618
00:27:10,736 --> 00:27:12,116
we're not really doing
anything here other


619
00:27:12,116 --> 00:27:13,376
than logging that information.


620
00:27:14,176 --> 00:27:17,766
OK, so I said this is a
background capable app,


621
00:27:17,766 --> 00:27:19,766
of course it wants to do all
of this in the background.


622
00:27:20,016 --> 00:27:22,766
So we're going to go to
the info.plist here and see


623
00:27:22,836 --> 00:27:27,016
that it is in fact specified
the correct required background


624
00:27:27,016 --> 00:27:29,276
mode, app communicates
using CoreBluetooth,


625
00:27:29,276 --> 00:27:31,366
which as you all know
is the appropriate one.


626
00:27:31,366 --> 00:27:33,606
We're going to be using a
CBCentralManager and you want


627
00:27:33,606 --> 00:27:36,036
to continue using peripherals
while in the background.


628
00:27:38,476 --> 00:27:40,166
So one thing I want to note,


629
00:27:40,646 --> 00:27:44,676
you notice that even though this
application is geared toward


630
00:27:44,726 --> 00:27:46,646
CBCentralManager, everything
that we're going to talk


631
00:27:46,646 --> 00:27:47,856
about here for this preservation


632
00:27:47,856 --> 00:27:50,046
and restoration feature
applies equally


633
00:27:50,046 --> 00:27:51,636
to peripheral manages as well.


634
00:27:52,576 --> 00:27:54,936
So the first thing
that it said before was


635
00:27:54,936 --> 00:27:57,306
that this is an optional
feature, so we need the opt-in.


636
00:27:57,306 --> 00:27:59,646
And we're going to go back
down to this viewDidLoad here


637
00:27:59,906 --> 00:28:02,516
where we instantiate our
central manger object.


638
00:28:02,826 --> 00:28:06,526
And we're going to move
it to a new init method.


639
00:28:06,966 --> 00:28:08,656
It looks pretty much
the same as the old one,


640
00:28:08,656 --> 00:28:10,846
but now we've got this
options dictionary on the end


641
00:28:11,436 --> 00:28:14,396
and we need to provide a
single new option for this


642
00:28:14,616 --> 00:28:16,416
and that's our restore
identifier.


643
00:28:17,356 --> 00:28:20,566
So by providing this
restore identifier key,


644
00:28:20,566 --> 00:28:21,586
we're doing two things.


645
00:28:22,386 --> 00:28:26,416
One, we are telling the
system and the application,


646
00:28:26,856 --> 00:28:29,166
we're giving them a
way to uniquely refer


647
00:28:29,166 --> 00:28:30,726
to this specific manager.


648
00:28:31,316 --> 00:28:33,046
The second thing that we're
doing is telling the system,


649
00:28:33,046 --> 00:28:34,726
"Hey, I want to support
this feature."


650
00:28:35,536 --> 00:28:38,186
So I need to give it a
restore identifier and I


651
00:28:38,186 --> 00:28:40,016
like to just do something
descriptive here,


652
00:28:40,016 --> 00:28:42,246
something like heart
rate central


653
00:28:42,396 --> 00:28:43,916
since this is a central
manager we're using


654
00:28:43,916 --> 00:28:45,086
to find heart rate devices.


655
00:28:45,236 --> 00:28:47,066
You can name it whatever
you want.


656
00:28:47,286 --> 00:28:49,126
The only thing that you
need to be aware of is


657
00:28:49,226 --> 00:28:51,916
that it should be unique
within your application.


658
00:28:52,346 --> 00:28:55,366
If you give two managers
the same restore identifier,


659
00:28:55,706 --> 00:28:57,416
both the system and
your app is--


660
00:28:57,416 --> 00:28:59,216
aren't going to able
to know which is which.


661
00:28:59,986 --> 00:29:02,416
OK, so now, we've opted-in.


662
00:29:02,416 --> 00:29:04,956
And I said, the second thing
that we needed to do was


663
00:29:04,956 --> 00:29:06,556
to implement our
new delegate method.


664
00:29:06,956 --> 00:29:10,566
And that delegate method is
central manager will restore


665
00:29:10,566 --> 00:29:10,976
a state.


666
00:29:12,036 --> 00:29:15,166
When the system is persisting
some sort of long-term action


667
00:29:15,166 --> 00:29:16,786
on your behalf like we
talked about earlier


668
00:29:17,126 --> 00:29:19,176
and something happens
that we decide


669
00:29:19,176 --> 00:29:20,356
to re-launch your application,


670
00:29:21,096 --> 00:29:23,946
this is the very first delegate
method that will be called.


671
00:29:23,996 --> 00:29:27,076
Let me reiterate because
this is important.


672
00:29:27,236 --> 00:29:29,336
This is the very
first delegate method.


673
00:29:29,466 --> 00:29:31,016
No longer is it didUpdateState.


674
00:29:31,016 --> 00:29:33,966
If you are restored, you
will first get a call


675
00:29:33,966 --> 00:29:37,356
to will restore state and
that's your application's chance


676
00:29:37,476 --> 00:29:40,926
to bring itself back up to
speed with what has been going


677
00:29:40,926 --> 00:29:44,086
on in the system because it
has been gone, it doesn't know.


678
00:29:44,936 --> 00:29:48,026
So, we're going to get back
a variety of things in this.


679
00:29:48,026 --> 00:29:51,166
And the first thing that
we'll do in this application,


680
00:29:51,166 --> 00:29:52,056
we're always scanning.


681
00:29:52,386 --> 00:29:54,656
So we are scanning
from the background.


682
00:29:54,766 --> 00:29:56,326
When our application
got terminated,


683
00:29:56,326 --> 00:29:57,216
we are still scanning.


684
00:29:57,496 --> 00:29:58,506
The system stepped in


685
00:29:58,506 --> 00:29:59,976
and continued scanning
in our behalf.


686
00:30:00,526 --> 00:30:01,636
So now, when we're coming back,


687
00:30:01,996 --> 00:30:03,216
that scanning is
still happening.


688
00:30:03,376 --> 00:30:06,356
So, we can see the services
that we're scanning for


689
00:30:06,816 --> 00:30:09,416
and the scan options that we
provided to the scan call.


690
00:30:10,236 --> 00:30:13,416
Again, in the case of this app,
since we're always scanning


691
00:30:13,416 --> 00:30:14,126
and we're always scanning


692
00:30:14,126 --> 00:30:17,256
for the same thing this is
already kind of expected.


693
00:30:17,346 --> 00:30:19,546
We don't really need to
do anything with this.


694
00:30:20,136 --> 00:30:24,336
The next thing that we're
going to back is a list of all


695
00:30:24,336 --> 00:30:26,726
of the devices that we
had tried to connect


696
00:30:26,756 --> 00:30:28,246
to or were connected to.


697
00:30:28,816 --> 00:30:33,016
So, in this situation we
actually do care about these


698
00:30:33,016 --> 00:30:36,686
because in this app once we find
a device we add it to our list


699
00:30:36,686 --> 00:30:39,186
of Heart Rate devices because we
need to keep a reference to it.


700
00:30:39,646 --> 00:30:43,456
So, here we're coming back
starting up with devices


701
00:30:43,456 --> 00:30:44,786
that we may already
be connected to.


702
00:30:44,856 --> 00:30:47,366
So, they again we need to
keep a reference to them


703
00:30:47,676 --> 00:30:49,426
and they're going
to go on our list.


704
00:30:50,996 --> 00:30:53,106
So, we just go through
any peripherals


705
00:30:53,106 --> 00:30:54,846
that were restored
with, go right back


706
00:30:54,846 --> 00:30:57,866
into that Heart Rate Peripheral
list and we set the delegate.


707
00:30:59,546 --> 00:31:01,756
Now, for some of your
applications this might be


708
00:31:01,756 --> 00:31:04,166
enough, really simple we
haven't done a lot here


709
00:31:04,276 --> 00:31:07,216
but there are two
other things that--


710
00:31:07,796 --> 00:31:09,716
and one in particular
that you really should


711
00:31:09,716 --> 00:31:10,496
at least think about.


712
00:31:10,986 --> 00:31:12,956
And the next thing that
I want to take a look


713
00:31:12,956 --> 00:31:16,256
at is our initialization
process for this application


714
00:31:16,706 --> 00:31:19,556
because before we started
supporting this feature,


715
00:31:19,726 --> 00:31:22,176
every time our application
started up we'd be starting


716
00:31:22,176 --> 00:31:23,426
up with a clean slate.


717
00:31:24,086 --> 00:31:27,306
Now that we support restoration,
we might be getting restored


718
00:31:27,306 --> 00:31:28,656
with stuff that's
still happening


719
00:31:28,656 --> 00:31:30,096
on our behalf in this system.


720
00:31:30,666 --> 00:31:32,656
So, we're going to go to a
Data Update State Method here


721
00:31:33,096 --> 00:31:35,556
and pretend that we've
just been restored.


722
00:31:35,906 --> 00:31:38,026
So, we've gotten that call
to Will Restore State.


723
00:31:38,766 --> 00:31:40,976
So, as we saw before
when power goes


724
00:31:40,976 --> 00:31:43,526
on the first we do
is start scanning.


725
00:31:44,706 --> 00:31:47,146
If we've been restored
we're already scanning,


726
00:31:47,396 --> 00:31:49,216
in this situation calling


727
00:31:49,216 --> 00:31:51,216
up one more time isn't really
going to hurt anything.


728
00:31:51,216 --> 00:31:52,996
It'll actually be
optimized a way anyway


729
00:31:52,996 --> 00:31:55,006
because we're providing
the exact same parameters


730
00:31:55,006 --> 00:31:56,846
as we were-- as we're
already scanning with.


731
00:31:57,296 --> 00:31:58,766
So, it's OK to leave
it, we don't need


732
00:31:58,766 --> 00:31:59,716
to get too tricky here.


733
00:32:00,406 --> 00:32:03,256
But the next thing
that we want to do is


734
00:32:03,256 --> 00:32:06,356
because we may have been
restored with those peripherals,


735
00:32:06,786 --> 00:32:09,496
we're going to take
a look and see,


736
00:32:10,096 --> 00:32:12,176
do I already have
connected peripherals.


737
00:32:12,416 --> 00:32:14,226
So, I might not-- like I
said, we might not be starting


738
00:32:14,226 --> 00:32:15,296
with that clean slate anymore.


739
00:32:15,296 --> 00:32:16,766
So, we're going to
look through our list


740
00:32:16,766 --> 00:32:17,646
of Heart Rate peripherals


741
00:32:17,646 --> 00:32:19,766
and see "Am I connected
to this device?"


742
00:32:21,106 --> 00:32:24,726
And now, if we really want
to be robust which I do


743
00:32:24,726 --> 00:32:26,796
because I'm trying to set a good
example here for all of you,


744
00:32:27,526 --> 00:32:30,816
we could've have gone away
at any point during that kind


745
00:32:30,816 --> 00:32:33,136
of initialization
discovery process that we do


746
00:32:33,136 --> 00:32:34,366
when we connect to a device.


747
00:32:34,756 --> 00:32:37,056
So, we need to be
able to handle that


748
00:32:37,226 --> 00:32:39,196
but it's really--
really quite simple.


749
00:32:39,236 --> 00:32:41,626
So, the first thing that we'll
do is we'll look and we're going


750
00:32:41,626 --> 00:32:43,906
to see have we discovered
that Heart Rate Service.


751
00:32:44,976 --> 00:32:47,636
If not, that's our starting
point we just got something go


752
00:32:47,636 --> 00:32:49,576
discover that service
and everything will kind


753
00:32:49,576 --> 00:32:50,826
of fall back through
that state machine.


754
00:32:52,026 --> 00:32:53,626
Next, we're going
to look and see, OK,


755
00:32:53,626 --> 00:32:56,406
have we discovered the Heart
Rate measurement characteristic?


756
00:32:56,686 --> 00:32:59,646
Again, if not, that's where we
know we need to begin by trying


757
00:32:59,646 --> 00:33:00,756
to discover that characteristic.


758
00:33:01,406 --> 00:33:05,026
And finally, we're going to
look and see, are we subscribed


759
00:33:05,026 --> 00:33:06,416
for updates on that
characteristic?


760
00:33:06,876 --> 00:33:08,696
And if we are, we're done.


761
00:33:08,996 --> 00:33:11,986
We don't need to do anything
else, we've done restored,


762
00:33:12,106 --> 00:33:14,186
we're still connected to
that Heart Rate device


763
00:33:14,186 --> 00:33:16,636
and we're still subscribed
in our app as back


764
00:33:16,636 --> 00:33:17,626
up to speed with everything.


765
00:33:17,826 --> 00:33:19,176
It's just got away for updates.


766
00:33:20,246 --> 00:33:23,066
Now, there-- may be one more
thing that you need to consider


767
00:33:23,506 --> 00:33:26,026
for those of you who
have multiple managers


768
00:33:26,326 --> 00:33:29,476
or maybe you have a manager
that isn't always around.


769
00:33:29,476 --> 00:33:32,106
So, you instantiate it sometimes
in your app and get rid of it.


770
00:33:32,386 --> 00:33:36,196
You might be wondering, this
all looks great but if I have


771
00:33:36,246 --> 00:33:39,606
to instantiate my manager
in order to restore it,


772
00:33:39,756 --> 00:33:42,826
how do I know what manager
I need to instantiate?


773
00:33:43,736 --> 00:33:44,456
Very good question.


774
00:33:45,626 --> 00:33:48,496
And the answer to that is in
your application delegate,


775
00:33:48,596 --> 00:33:51,006
in this did finish
launching with options method.


776
00:33:51,646 --> 00:33:53,416
Because when we're
relaunching you,


777
00:33:53,826 --> 00:33:57,236
we will give you
back the list of all


778
00:33:57,236 --> 00:34:00,306
of the identifiers representing
the restored managers


779
00:34:00,306 --> 00:34:03,296
that we've been keeping track
off for you in this system.


780
00:34:03,796 --> 00:34:07,006
So, you can see that you can
retrieve all the identifiers


781
00:34:07,006 --> 00:34:08,666
for the peripheral
managers that you were using


782
00:34:08,666 --> 00:34:11,106
at the time you went away
and the central managers.


783
00:34:11,726 --> 00:34:14,126
In this application,
we don't care again


784
00:34:14,286 --> 00:34:15,295
about peripheral managers


785
00:34:15,295 --> 00:34:17,085
as we're only using
a central manager.


786
00:34:17,916 --> 00:34:20,206
And we're going to go through
and what you need to do


787
00:34:20,206 --> 00:34:23,636
at this point is tell
your application, "Hey,


788
00:34:23,746 --> 00:34:26,315
these are the managers that
I need to reinstantiate.


789
00:34:26,376 --> 00:34:30,536
If you don't reinstantiate a
manager that is being preserved


790
00:34:30,536 --> 00:34:33,505
for you in the system, after
a reasonable amount of time,


791
00:34:33,505 --> 00:34:35,085
the system is going
to assume that, "Hey,


792
00:34:35,085 --> 00:34:37,466
he must not want this
anymore and we're going


793
00:34:37,466 --> 00:34:38,226
to clean it up for you."


794
00:34:38,335 --> 00:34:41,466
So, any long term actions
that was still performing,


795
00:34:41,726 --> 00:34:43,446
those will stop at
that point in time.


796
00:34:43,876 --> 00:34:46,456
In the case of this app, we
have been lucky there's nothing


797
00:34:46,456 --> 00:34:49,206
for us to here because like
I said we have one manager


798
00:34:49,286 --> 00:34:51,106
and it's around for the
lifetime of the application.


799
00:34:52,235 --> 00:34:56,406
So, it's a-- this is pretty
simple, just a recap, we've--


800
00:34:56,545 --> 00:34:58,986
the first thing that we did was
look at our central manager,


801
00:34:58,986 --> 00:35:00,906
we changed the initialization
call


802
00:35:00,906 --> 00:35:03,096
to provide a restore
identifier for it.


803
00:35:03,626 --> 00:35:07,326
We implemented that single new
delegate method will restore


804
00:35:07,326 --> 00:35:10,146
state which gives our
application a chance to kind


805
00:35:10,146 --> 00:35:12,976
of get back into sync with what
has been going on in the system.


806
00:35:12,976 --> 00:35:14,406
And then we took at look


807
00:35:14,406 --> 00:35:17,286
at our initialization
process and did update state.


808
00:35:17,566 --> 00:35:19,246
And we made sure to be able to--


809
00:35:19,246 --> 00:35:21,146
that we're able to
handle possibly starting


810
00:35:21,146 --> 00:35:23,796
up with devices that
we're already connected.


811
00:35:23,956 --> 00:35:27,966
And I also show you guys how
to handle the possibility


812
00:35:27,966 --> 00:35:29,306
where you have multiple--


813
00:35:29,456 --> 00:35:31,006
multiple managers
being restored.


814
00:35:32,556 --> 00:35:34,476
So, that's it, hopefully
you agree


815
00:35:34,476 --> 00:35:36,896
that there's not a whole
lot of code involved here.


816
00:35:36,986 --> 00:35:39,566
This isn't as complicated
as it may have seen.


817
00:35:39,956 --> 00:35:42,246
And, you know, with this
little amount of change


818
00:35:42,246 --> 00:35:44,046
to our application, we
now don't have to worry


819
00:35:44,046 --> 00:35:45,346
about being killed
in the background.


820
00:35:46,736 --> 00:35:48,606
So, I'd like to invite
Renaud back up here.


821
00:35:48,606 --> 00:35:51,126
And he's going to talk to you


822
00:35:52,206 --> 00:35:55,516
about the great new built
in services in iOS 7.


823
00:35:55,846 --> 00:35:58,746
>> So, Bluetooth Low Energy has
been around for a few years now.


824
00:35:58,836 --> 00:36:00,466
Four years if I count correctly.


825
00:36:01,026 --> 00:36:02,466
And as you see you guys come up,


826
00:36:02,466 --> 00:36:04,286
we start our profiles
already for it.


827
00:36:04,286 --> 00:36:07,326
And we feel the technology
is mature enough now


828
00:36:07,326 --> 00:36:10,406
and our stack is mature enough
that we can make this directly


829
00:36:10,406 --> 00:36:13,326
into the system, and that's what
we're going to do with iOS 7.


830
00:36:15,356 --> 00:36:16,716
So, what did we do?


831
00:36:16,716 --> 00:36:21,226
So, first of all we implemented
some services when we act


832
00:36:21,226 --> 00:36:24,216
as a GATT client and
this is basically a HID


833
00:36:24,216 --> 00:36:26,726
Over GATT Profile as we
talked about this morning


834
00:36:26,776 --> 00:36:27,946
in the accessory session.


835
00:36:27,946 --> 00:36:30,656
The HID Over GATT Profile


836
00:36:30,686 --> 00:36:33,466
which is a bad name
implements these free services.


837
00:36:33,466 --> 00:36:35,786
These are the HID service,
the battery service


838
00:36:35,786 --> 00:36:37,336
and the Device Information
service.


839
00:36:38,026 --> 00:36:40,266
What's special about that
and the fact that it's built


840
00:36:40,266 --> 00:36:42,426
into a system is
that it works just


841
00:36:42,426 --> 00:36:43,986
like Bluetooth Classic devices.


842
00:36:44,426 --> 00:36:47,446
So, you will be able to discover
Bluetooth flow energy HID


843
00:36:47,446 --> 00:36:49,706
devices directly from the
Bluetooth settings pane


844
00:36:49,706 --> 00:36:51,826
like a Bluetooth
Classic would be.


845
00:36:52,466 --> 00:36:55,706
And once you are paired with
Bluetooth Energy HID Device,


846
00:36:55,766 --> 00:36:58,276
iOS will automatically manage
the connection and reconnect


847
00:36:58,276 --> 00:37:02,826
to it if the connection goes
away therefore giving this


848
00:37:02,826 --> 00:37:05,276
illusion that it works just
like a normal Bluetooth device


849
00:37:05,276 --> 00:37:06,676
that customers are used to.


850
00:37:07,026 --> 00:37:09,696
So, that's what we use
on the GATT client side.


851
00:37:10,996 --> 00:37:14,156
But we have also interesting
things on the GATT server side.


852
00:37:14,156 --> 00:37:17,076
So, if you connect your
accessory to an iOS device


853
00:37:17,076 --> 00:37:19,426
and you implements
have GATT clients roll.


854
00:37:19,786 --> 00:37:22,906
And you discover services on an
iOS device you will now be able


855
00:37:22,906 --> 00:37:24,606
to see these services
implemented.


856
00:37:24,606 --> 00:37:27,236
And first of all we
have the battery service


857
00:37:27,416 --> 00:37:30,436
which is trivial, I'm not
going to spend much time on it.


858
00:37:31,606 --> 00:37:33,366
We also implemented the
current time service


859
00:37:33,366 --> 00:37:37,826
which is a nifty service if your
accessory requires an accurate


860
00:37:37,826 --> 00:37:40,426
source of time, we provide
accurate time and date


861
00:37:40,426 --> 00:37:41,856
and the time zone information.


862
00:37:42,316 --> 00:37:45,856
So, for example, things
like watches can use that.


863
00:37:47,986 --> 00:37:50,156
But there's one more
thing an iOS dream,


864
00:37:50,156 --> 00:37:51,066
I'm saying that on stage.


865
00:37:53,796 --> 00:37:56,356
And this one more thing
is about Notifications.


866
00:37:56,916 --> 00:37:59,116
We've seen especially
in the last year a lot


867
00:37:59,116 --> 00:38:02,036
of accessories going
on the markets,


868
00:38:02,586 --> 00:38:05,076
the so called "Companion
Devices" that are


869
00:38:05,076 --> 00:38:09,266
for example smart watch that
are all about displaying to you


870
00:38:09,266 --> 00:38:11,016
or relaying notifications


871
00:38:11,016 --> 00:38:13,576
that are happening
on your iOS device.


872
00:38:14,306 --> 00:38:17,626
But they all use methods
to access the notifications


873
00:38:17,626 --> 00:38:19,826
that I'm not very good for
your hockey and all that


874
00:38:19,826 --> 00:38:21,616
and you guys probably know
what I'm talking about.


875
00:38:22,226 --> 00:38:24,246
But these are three
other command solutions


876
00:38:24,246 --> 00:38:25,506
that are being used nowadays.


877
00:38:26,376 --> 00:38:28,296
So, first one is the
Message Access Pro--


878
00:38:28,296 --> 00:38:32,886
or the Message Access Profile
also commonly known as MAP


879
00:38:32,886 --> 00:38:33,946
over Bluetooth Classic.


880
00:38:34,306 --> 00:38:37,696
The problem with MAP is that
it was developed originally


881
00:38:37,696 --> 00:38:39,076
for an automative usage.


882
00:38:39,286 --> 00:38:43,856
It was not meant to be used by a
small smart watch on your wrist.


883
00:38:43,856 --> 00:38:46,596
And it actually doesn't--
it's very constraint,


884
00:38:46,596 --> 00:38:50,766
it only does SMS's, MMS's and
E-mails very well, anything else


885
00:38:50,766 --> 00:38:52,506
that you pass of a MAP is ugly


886
00:38:52,506 --> 00:38:54,396
and it's not going
to go over well.


887
00:38:55,676 --> 00:38:58,516
There is also low energy's
profiles that have come


888
00:38:58,556 --> 00:38:58,906
up from the [inaudible]


889
00:38:58,906 --> 00:39:01,936
for example is the Alert
Notification Service.


890
00:39:02,286 --> 00:39:06,436
The problem with it is that
it is very, very limited,


891
00:39:06,496 --> 00:39:09,356
it's very simple and it's too
simple, it's not good enough.


892
00:39:10,796 --> 00:39:13,206
There's also a full solution
that we've seen a lot


893
00:39:13,206 --> 00:39:16,726
which is you guys developed
a custom application tailored


894
00:39:16,726 --> 00:39:18,246
to your specific accessory.


895
00:39:18,296 --> 00:39:21,246
And those problems
are obvious we've--


896
00:39:21,366 --> 00:39:24,406
did this solution as well which
is that when it's heavyweight,


897
00:39:24,896 --> 00:39:27,346
you have to Run a full
iOS app and any point


898
00:39:27,346 --> 00:39:30,636
on the customer's device
which is not very good.


899
00:39:31,106 --> 00:39:34,006
And your data you
are able to send


900
00:39:34,006 --> 00:39:36,346
through this method is also
limited to what the app


901
00:39:36,346 --> 00:39:38,646
and send both allows and
what the customer allows you


902
00:39:38,646 --> 00:39:40,956
that your app to see which
is not much as you may know.


903
00:39:42,556 --> 00:39:45,576
So, all the solutions are not
very good and that's a state


904
00:39:45,576 --> 00:39:48,116
as it is now but we come
up with all solution


905
00:39:48,116 --> 00:39:50,016
that we think you're
going to love.


906
00:39:50,746 --> 00:39:54,706
And the solution we call it
the Apple Notification Center


907
00:39:54,706 --> 00:39:58,946
Service also known as
ANCS, I may say ANCS


908
00:39:58,946 --> 00:39:59,976
in the next few minutes.


909
00:40:00,846 --> 00:40:03,436
This is also a GATT
server service.


910
00:40:03,436 --> 00:40:05,956
So again, if your accessory
connects to the nearest device


911
00:40:05,956 --> 00:40:07,266
and discover services on it,


912
00:40:07,266 --> 00:40:09,566
it will see this service
implemented on it.


913
00:40:10,356 --> 00:40:14,346
It is Apple's specific uses
on [inaudible] 128 bits UUIDs.


914
00:40:14,986 --> 00:40:18,596
And it basically allows you
to be notified about any kind


915
00:40:18,596 --> 00:40:19,586
of event on your phone.


916
00:40:20,066 --> 00:40:22,826
And that's includes all the
phone functionality events,


917
00:40:22,826 --> 00:40:25,786
for example your incoming
calls and your voice mails.


918
00:40:26,446 --> 00:40:30,116
It notifies you about your IMs
and all the messages you can get


919
00:40:30,116 --> 00:40:31,796
for Facebook or anything else.


920
00:40:32,616 --> 00:40:33,796
It notifies you about calendar.


921
00:40:33,796 --> 00:40:35,156
For example if you are


922
00:40:35,156 --> 00:40:37,976
in 5 minutes it will
be carried over--


923
00:40:37,976 --> 00:40:39,896
this information would be
carried over this service.


924
00:40:40,526 --> 00:40:41,966
And what I'm getting
at basically is


925
00:40:41,966 --> 00:40:43,676
that I need notification


926
00:40:43,676 --> 00:40:46,806
and notification center will
be carried over this service.


927
00:40:46,806 --> 00:40:49,266
There's no preferential
treatment, anything which is


928
00:40:49,266 --> 00:40:52,126
in notification center will
be sent over this service.


929
00:40:52,126 --> 00:40:55,676
You have full access to anything
that's will be notifiable


930
00:40:55,676 --> 00:40:57,516
on iOS by default.


931
00:40:57,986 --> 00:41:03,506
And again, like the HID service
I just talked to you about,


932
00:41:03,506 --> 00:41:07,336
once an accessory has been
recognized as using ANCS,


933
00:41:07,336 --> 00:41:10,336
iOS would automatically
manage a connection


934
00:41:10,336 --> 00:41:11,146
and reconnect for you.


935
00:41:11,146 --> 00:41:13,026
So, your app doesn't
have to do that anymore.


936
00:41:13,616 --> 00:41:14,586
We will do that for you.


937
00:41:14,856 --> 00:41:18,396
So, detailed specification
will be posted


938
00:41:18,396 --> 00:41:19,646
on the developers portal soon.


939
00:41:19,646 --> 00:41:21,246
We still have a few
things to work-out.


940
00:41:21,626 --> 00:41:24,116
But look forward to that and,
well, [inaudible] is going


941
00:41:24,116 --> 00:41:25,586
to be out really soon.


942
00:41:26,296 --> 00:41:29,636
But before I finish that,
I just want to give you


943
00:41:29,636 --> 00:41:32,366
like a sneak peek of the
mechanisms on who it works


944
00:41:32,366 --> 00:41:34,356
and you will see it's really
simple and straightforward.


945
00:41:34,356 --> 00:41:35,476
It's not complex at all.


946
00:41:35,886 --> 00:41:37,976
But it [inaudible]
very powerful.


947
00:41:38,836 --> 00:41:40,236
So, let's take the used case


948
00:41:40,236 --> 00:41:43,106
of an iPhone connected
to a smart watch.


949
00:41:43,106 --> 00:41:46,416
For example, in this case
a very blue smart watch.


950
00:41:47,066 --> 00:41:49,676
And the user just
received a new iMessage.


951
00:41:49,676 --> 00:41:55,276
Well, we will send a
message over ANCS telling you


952
00:41:55,276 --> 00:41:58,296
that the user just received
a so-called new social


953
00:41:58,296 --> 00:42:02,236
notification and we will create
a UUID for this notification


954
00:42:02,236 --> 00:42:03,656
which is going to
[inaudible] a handle


955
00:42:03,656 --> 00:42:05,386
to retrieve more
information about it.


956
00:42:05,786 --> 00:42:07,386
In this case, we just use one.


957
00:42:08,096 --> 00:42:11,396
And the accessory as supposedly
to retrieve more information


958
00:42:11,396 --> 00:42:13,966
about this notification which
is exactly what it does now


959
00:42:14,476 --> 00:42:17,336
where it can go back
and ask for attributes.


960
00:42:17,696 --> 00:42:20,686
In this example, it wants
the title and message.


961
00:42:20,686 --> 00:42:22,236
There's a list of
attribute to provide.


962
00:42:22,236 --> 00:42:23,636
In this case, we just want two.


963
00:42:24,466 --> 00:42:27,906
And iPhone will provide all this
information to your accessory.


964
00:42:27,906 --> 00:42:30,876
In this case it's the title
is actually the sender


965
00:42:30,876 --> 00:42:33,926
of the iMessage and the
message is the body of iMessage


966
00:42:33,926 --> 00:42:36,656
and it's Jason because
Jason is part is looking


967
00:42:36,656 --> 00:42:37,726
to get beers pretty soon.


968
00:42:38,476 --> 00:42:41,996
Of course at this point
your accessory is free


969
00:42:41,996 --> 00:42:43,006
to do whatever it want.


970
00:42:43,006 --> 00:42:47,636
You can blink an LED or you
can displays the entirety


971
00:42:47,636 --> 00:42:49,006
of the message and
a big display.


972
00:42:49,006 --> 00:42:50,756
Whatever you accessory
implements,


973
00:42:51,276 --> 00:42:52,456
it's up to you at this point.


974
00:42:54,026 --> 00:42:55,956
Later on when the
iMessages is read


975
00:42:55,956 --> 00:42:59,106
or the notification is
dismissed on the device,


976
00:42:59,106 --> 00:43:00,766
we will also notify
the accessory


977
00:43:00,766 --> 00:43:04,206
that this notification is
now invalid and you're free


978
00:43:04,206 --> 00:43:06,066
to dismiss the alert
on your device as well.


979
00:43:06,066 --> 00:43:07,536
So, a full synchronization
mechanism


980
00:43:07,536 --> 00:43:09,866
between notification
center and all these events


981
00:43:10,306 --> 00:43:13,846
and your accessory and
as pretty much ANCS


982
00:43:13,846 --> 00:43:16,466
and this was just a sneak
peek, it's capable of much,


983
00:43:16,466 --> 00:43:19,226
much more-- it's very
powerful, very simple as well.


984
00:43:19,226 --> 00:43:22,086
We try to keep it simple
and look forward to that


985
00:43:22,086 --> 00:43:26,376
onto the developer
portals again.


986
00:43:27,066 --> 00:43:30,516
I just want to quickly finish
by some tips and best practices


987
00:43:30,516 --> 00:43:34,686
that I've come up by monitoring
the developer forums and,


988
00:43:34,686 --> 00:43:36,336
you know, and getting
your radars


989
00:43:36,336 --> 00:43:39,716
because radar [inaudible]
is not a black hole as--


990
00:43:40,386 --> 00:43:43,466
I assure you, all the radar you
filed they're going all queue


991
00:43:43,466 --> 00:43:44,736
and we looked at
everyone of them.


992
00:43:45,356 --> 00:43:46,366
So, here are some few tips


993
00:43:46,366 --> 00:43:49,186
and best practices
some common mishaps


994
00:43:49,186 --> 00:43:51,066
and pitfalls you guys
tend to fall in to.


995
00:43:51,066 --> 00:43:54,836
So, I just-- I just want
you to keep track of that.


996
00:43:55,396 --> 00:43:57,806
So, first of all, like we said
before, CoreBluetooth needs


997
00:43:57,806 --> 00:43:59,436
to know if you intend
CBPeripherals.


998
00:43:59,436 --> 00:44:00,936
Please keep a reference to them.


999
00:44:01,706 --> 00:44:03,756
If a CBPeripheral gets locked,


1000
00:44:03,756 --> 00:44:06,546
we will assume you are
not interested in it


1001
00:44:07,056 --> 00:44:08,886
and the system will take action


1002
00:44:08,886 --> 00:44:11,286
in your behalf including
disconnecting the peripheral


1003
00:44:11,286 --> 00:44:15,936
implicitly because we do not
want to making that connection


1004
00:44:15,936 --> 00:44:18,476
that is not used by
your system at all.


1005
00:44:18,476 --> 00:44:20,846
So, keep a reference, it
is something that a lot


1006
00:44:20,846 --> 00:44:22,316
of you probably made
the mistake,


1007
00:44:22,316 --> 00:44:23,616
it's the first time
you use CoreBluetooth.


1008
00:44:25,766 --> 00:44:28,966
Scan request and connection
request never time out


1009
00:44:28,966 --> 00:44:30,256
and you needed to
call them once.


1010
00:44:30,256 --> 00:44:31,616
So, it's like an
elevator button.


1011
00:44:31,616 --> 00:44:33,366
You don't need to press
them multiple times.


1012
00:44:33,366 --> 00:44:34,556
It's not going to go any faster.


1013
00:44:35,056 --> 00:44:36,746
And actually it might
be detriment


1014
00:44:36,746 --> 00:44:38,146
or to the speed of your action.


1015
00:44:38,146 --> 00:44:41,166
So, just call it once and
everything will work fine.


1016
00:44:41,166 --> 00:44:42,226
We'll take care of
the rest for you.


1017
00:44:43,516 --> 00:44:48,086
It wasn't explicit before
but now it's explicit.


1018
00:44:48,086 --> 00:44:51,206
CBPeripherals and CBCentrals
conform to NSCopying.


1019
00:44:51,616 --> 00:44:55,206
And actually most CB objects can
be used as NS dictionary keys.


1020
00:44:55,546 --> 00:44:58,156
We've seen a lot of you
guys using an indirect map


1021
00:44:58,156 --> 00:45:00,276
between UUIDs and CB
objects and all of that.


1022
00:45:00,886 --> 00:45:02,936
Just use the CB objects
as dictionary keys.


1023
00:45:02,936 --> 00:45:04,206
It simplifies a lot
of the codes.


1024
00:45:04,206 --> 00:45:06,636
I know I simplify a lot
of my code by doing that.


1025
00:45:06,906 --> 00:45:10,236
So, please just use that as
keys and you'll see it's great.


1026
00:45:12,116 --> 00:45:15,126
Please, please do not touch
the Client Configuration


1027
00:45:15,126 --> 00:45:17,936
Characteristic Descriptor
directly.


1028
00:45:17,936 --> 00:45:20,836
This is not going to work


1029
00:45:21,066 --> 00:45:23,076
and you guys may
already have tried that.


1030
00:45:23,076 --> 00:45:23,856
These are not going to work.


1031
00:45:23,856 --> 00:45:26,496
This is going to break the
state in the application.


1032
00:45:26,496 --> 00:45:30,286
So, we have an API for that
whether set notify value


1033
00:45:30,726 --> 00:45:32,836
for descriptor which--
for characteristic, sorry,


1034
00:45:33,396 --> 00:45:35,846
which is much easier
to use and it's going


1035
00:45:35,846 --> 00:45:37,966
to work instead of that.


1036
00:45:38,916 --> 00:45:42,246
Please, please do not game
the background mechanisms.


1037
00:45:42,896 --> 00:45:43,686
We are not stupid.


1038
00:45:43,686 --> 00:45:46,376
We know it's the kind of
tricks you guys are using


1039
00:45:46,976 --> 00:45:50,186
and if you start using them
or you continue using them,


1040
00:45:50,186 --> 00:45:51,846
you're going to get
in trouble eventually.


1041
00:45:51,846 --> 00:45:55,376
And we hope that we-- what we
introduce today with iOS 7,


1042
00:45:55,926 --> 00:45:58,086
you will have all the
tools and APIs especially


1043
00:45:58,086 --> 00:45:59,776
with application restoration,


1044
00:45:59,776 --> 00:46:02,136
things that Jason
have told about.


1045
00:46:02,136 --> 00:46:05,896
You have all to the
tools for you to not have


1046
00:46:05,896 --> 00:46:09,426
to use these nasty
tricks that nobody likes.


1047
00:46:09,426 --> 00:46:10,196
We don't like them.


1048
00:46:10,196 --> 00:46:10,886
You don't like them.


1049
00:46:10,886 --> 00:46:13,036
We know we've provided
you everything.


1050
00:46:13,036 --> 00:46:15,426
We hope that that you don't
need to do that anymore.


1051
00:46:17,686 --> 00:46:21,686
And that's it for my tips
and best practices session.


1052
00:46:21,686 --> 00:46:24,346
And I'm going call back Brian
to have the final words.


1053
00:46:25,406 --> 00:46:26,926
>> Pretty amazing stuff, right?


1054
00:46:26,926 --> 00:46:31,856
I mean this-- this in my mind
makes CoreBluetooth really the


1055
00:46:31,856 --> 00:46:35,516
launching platform for
really major initiates


1056
00:46:35,596 --> 00:46:36,666
in Bluetooth Low Energy.


1057
00:46:36,666 --> 00:46:40,116
I'm thrilled that we've
finally got this stuff in there.


1058
00:46:40,536 --> 00:46:43,926
And with the stuff around
restoration, you know,


1059
00:46:43,926 --> 00:46:49,296
preservation and restoration,
it completely opens up markets


1060
00:46:49,386 --> 00:46:53,626
that we know that you guys
have tried to participate in.


1061
00:46:54,056 --> 00:46:57,806
But now from a consumer's
perspective it should work all


1062
00:46:57,806 --> 00:46:58,296
the time.


1063
00:46:58,486 --> 00:47:00,996
It should be 100
percent up all the time.


1064
00:47:01,246 --> 00:47:05,266
Every time I walk in front of
my home door, it unlocks, right.


1065
00:47:05,266 --> 00:47:07,956
Every time that my blood
glucose monitor takes reading,


1066
00:47:08,176 --> 00:47:09,346
my phone knows about it.


1067
00:47:09,626 --> 00:47:11,486
And it's not going to
work some of the time


1068
00:47:11,486 --> 00:47:12,956
and not work the other time.


1069
00:47:13,206 --> 00:47:17,526
It's now completely bulletproof,
consumer-ready, you know,


1070
00:47:17,526 --> 00:47:19,596
industry leading technology.


1071
00:47:19,596 --> 00:47:21,806
And we're super, super
excited to bring it to you.


1072
00:47:21,806 --> 00:47:25,336
The other thing around Apple
Notification Center Service,


1073
00:47:25,776 --> 00:47:30,516
affectionately called ANCS, is
we feel like that that's going


1074
00:47:30,516 --> 00:47:33,826
to make this [inaudible]
products sing and the things


1075
00:47:33,826 --> 00:47:35,756
that you guys are going
to be doing with this.


1076
00:47:35,816 --> 00:47:39,696
It doesn't matter if it's a
watch like Renaud showed here


1077
00:47:39,896 --> 00:47:44,496
or something as simple as
fashion or jewelry that lights


1078
00:47:44,496 --> 00:47:48,096
up when you get a text message
from your significant other


1079
00:47:48,336 --> 00:47:51,696
or your child, the things
that you guys can make


1080
00:47:51,696 --> 00:47:54,136
with these things is
just going to be awesome


1081
00:47:54,136 --> 00:47:55,346
and I can't wait to see that.


1082
00:47:56,066 --> 00:47:59,876
One thing, I will note on Jason
and Renaud, these guys wrote


1083
00:47:59,876 --> 00:48:02,276
in part CoreBluetooth.


1084
00:48:02,276 --> 00:48:06,316
So, these, you cannot hear
from anybody more expert


1085
00:48:06,316 --> 00:48:07,826
in this particular topics.


1086
00:48:07,826 --> 00:48:10,646
And both of them will be
in the lab this afternoon


1087
00:48:10,646 --> 00:48:12,326
to answer any questions
you may have.


1088
00:48:12,326 --> 00:48:16,186
We also have folks like
Gus [phonetic] is here


1089
00:48:16,186 --> 00:48:18,946
who is our senior
engineer for all


1090
00:48:18,946 --> 00:48:20,656
of our Bluetooth
server and stack.


1091
00:48:20,896 --> 00:48:24,676
Ardy Kumar is here which is
one of our audio experts.


1092
00:48:24,676 --> 00:48:28,926
We have you know industry
leading engineering in this area


1093
00:48:28,926 --> 00:48:30,996
and they're all here to
answer questions for you.


1094
00:48:30,996 --> 00:48:33,686
So, if you do have more
questions definitely come


1095
00:48:33,686 --> 00:48:36,766
down into the lab
after this session


1096
00:48:36,766 --> 00:48:38,706
and we would love to
help you guys out.


1097
00:48:40,216 --> 00:48:43,526
One other question that we get
a lot and I don't have a slide


1098
00:48:43,526 --> 00:48:44,686
for it here but I just wanted


1099
00:48:44,686 --> 00:48:48,096
to cover it really quick is I
get a lot of people asking me,


1100
00:48:48,096 --> 00:48:52,036
"How do I submit apps that
use CoreBluetooth and talk


1101
00:48:52,036 --> 00:48:54,376
to Bluetooth Low
Energy hardware?


1102
00:48:54,866 --> 00:48:57,386
And so, the App Store
folks have asked me


1103
00:48:57,386 --> 00:48:59,786
to just give you a
couple of suggestions.


1104
00:49:00,056 --> 00:49:02,766
When you submit an app that's
using a Bluetooth Low Energy


1105
00:49:02,766 --> 00:49:04,916
device, send the
device in as well.


1106
00:49:05,226 --> 00:49:08,596
And when you send that device
in, the extremely explicit


1107
00:49:08,596 --> 00:49:10,746
and exactly what
that device does,


1108
00:49:11,066 --> 00:49:13,166
you could provide the
services and characteristics


1109
00:49:13,166 --> 00:49:14,646
that device implements.


1110
00:49:14,676 --> 00:49:18,016
Give it the-- you know describe
exactly what the device does.


1111
00:49:18,226 --> 00:49:19,616
How to use that device?


1112
00:49:19,756 --> 00:49:22,606
A lot of times we'll get a
device and it's like a big trunk


1113
00:49:22,606 --> 00:49:26,256
of plastic and there're not
buttons and it's like, OK,


1114
00:49:26,536 --> 00:49:27,446
that's great, you know.


1115
00:49:27,446 --> 00:49:28,686
And it goes on a
shelf somewhere.


1116
00:49:28,816 --> 00:49:33,986
So, just be explicit in
providing that information to us


1117
00:49:33,986 --> 00:49:35,336
when you send those apps.


1118
00:49:35,336 --> 00:49:38,096
And if you have more questions
on this, a lot of guys


1119
00:49:38,096 --> 00:49:41,716
from our [inaudible] team
will be in the lab as well


1120
00:49:41,716 --> 00:49:43,726
to answer some of those
questions in more detail


1121
00:49:43,726 --> 00:49:45,066
as much as they possibly can.


1122
00:49:45,666 --> 00:49:49,276
As always our Bluetooth
guidelines document is online.


1123
00:49:49,276 --> 00:49:52,966
You can search for this pretty
much anywhere and it's available


1124
00:49:52,966 --> 00:49:54,346
if you go in our developer site.


1125
00:49:54,486 --> 00:49:56,626
It's absolutely super
easy to find.


1126
00:49:56,626 --> 00:49:58,866
We constantly keep this updated


1127
00:49:59,146 --> 00:50:01,706
and this is being
updated as we speak.


1128
00:50:02,136 --> 00:50:04,416
I don't know if an
update is online yet.


1129
00:50:04,416 --> 00:50:06,266
Hopefully, it'll
be very, very soon.


1130
00:50:06,536 --> 00:50:08,796
And in addition to that,
for the first time,


1131
00:50:09,016 --> 00:50:11,386
we now have a CoreBluetooth
programming guide


1132
00:50:11,596 --> 00:50:13,416
or reference manual, finally.


1133
00:50:13,416 --> 00:50:15,316
It took us awhile
to get this done.


1134
00:50:15,516 --> 00:50:19,016
But we have some awesome writers
working on this and I know


1135
00:50:19,016 --> 00:50:22,246
that they have a little bit more
work to do to incorporate some


1136
00:50:22,246 --> 00:50:25,516
of the new things that
we've implemented in iOS 7.


1137
00:50:25,786 --> 00:50:27,386
But this will be available very,


1138
00:50:27,386 --> 00:50:29,716
very soon on the
developer portal as well.


1139
00:50:29,716 --> 00:50:32,636
So, definitely check it
out as soon it's there.


1140
00:50:32,636 --> 00:50:34,746
It's going to be a
huge, huge reference


1141
00:50:34,826 --> 00:50:37,996
of you guys not only the
kind of introduce you the lot


1142
00:50:37,996 --> 00:50:40,796
of the key concepts that
we brought up today.


1143
00:50:41,096 --> 00:50:43,096
But then it'll go into
lot of the reference


1144
00:50:43,096 --> 00:50:45,706
around that the actual code
and implementation details.


1145
00:50:45,706 --> 00:50:46,706
So, check it out.


1146
00:50:47,386 --> 00:50:51,676
For more information, we
have these people who eat


1147
00:50:51,676 --> 00:50:52,566
and breathe this stuff.


1148
00:50:52,936 --> 00:50:55,626
Craig and Stephen, both
of them are awesome guys.


1149
00:50:55,626 --> 00:50:57,686
They love to answer any
questions you may have


1150
00:50:57,686 --> 00:50:59,666
around CoreBluetooth or
Bluetooth in general.


1151
00:50:59,976 --> 00:51:02,966
We also have the
developer program, DTS.


1152
00:51:02,966 --> 00:51:05,466
It's a little bit more formal.


1153
00:51:05,466 --> 00:51:07,856
You're going to get a
guaranteed response with that.


1154
00:51:08,256 --> 00:51:11,846
Our developer programs, MFI,
we briefly talk about that


1155
00:51:11,846 --> 00:51:13,136
in our session this morning.


1156
00:51:13,446 --> 00:51:16,006
You're going to get for-- more
information from those guys


1157
00:51:16,006 --> 00:51:19,786
at our MFI web landing
page on the developer site.


1158
00:51:19,786 --> 00:51:23,336
In addition of that,
all these other things,


1159
00:51:23,606 --> 00:51:27,856
the one thing I want to iterate
right now before we go any


1160
00:51:27,856 --> 00:51:31,976
further is right now you guys
having your hands hopefully all


1161
00:51:31,976 --> 00:51:34,556
of you have updated
your devices to iOS 7.


1162
00:51:34,556 --> 00:51:36,376
You have the new SDK.


1163
00:51:36,376 --> 00:51:37,876
You're playing around with
it and you're going to come


1164
00:51:37,876 --> 00:51:39,916
to the lab with all
of your code in hand


1165
00:51:40,226 --> 00:51:41,556
and work with those on that.


1166
00:51:41,556 --> 00:51:44,276
And if you haven't, we're going
to have another lab on Thursday.


1167
00:51:44,276 --> 00:51:46,976
So, hopefully that gives you a
couple of more nights to work


1168
00:51:46,976 --> 00:51:48,206
through upgrading your code.


1169
00:51:48,616 --> 00:51:49,936
But bring that to us,


1170
00:51:50,276 --> 00:51:52,286
if for whatever reason
you can't make it,


1171
00:51:52,656 --> 00:51:54,406
or even if you can make it


1172
00:51:54,406 --> 00:51:56,416
and you find what
you think are bugs,


1173
00:51:56,606 --> 00:51:59,186
report those bugs
especially right now.


1174
00:51:59,546 --> 00:52:01,446
This is the time to
get those bugs to as


1175
00:52:01,446 --> 00:52:04,706
so that we can investigate these
issues and get them resolve


1176
00:52:04,706 --> 00:52:05,906
as quickly as possible.


1177
00:52:06,176 --> 00:52:10,436
And if by the way send an email
to Craig or Stephen as well just


1178
00:52:10,436 --> 00:52:12,996
to let them know, hey, I found
this issue, it's the problem.


1179
00:52:13,356 --> 00:52:16,066
The developer forums
are both active,


1180
00:52:16,126 --> 00:52:18,036
very active for iOS and Mac.


1181
00:52:18,036 --> 00:52:19,796
We have a great community
in that space


1182
00:52:19,796 --> 00:52:21,566
that you guys are
helping each other


1183
00:52:21,836 --> 00:52:23,286
to solve a lot of
these problems.


1184
00:52:23,626 --> 00:52:25,386
We personally cannot respond


1185
00:52:25,386 --> 00:52:27,636
to everything that's
going on in those forms.


1186
00:52:27,846 --> 00:52:30,606
But rest assured we
read every single post.


1187
00:52:30,736 --> 00:52:34,586
I personally read every
single post in those spaces.


1188
00:52:34,626 --> 00:52:37,786
I can't always respond but
I love hearing the feedback.


1189
00:52:38,086 --> 00:52:41,496
And certainly we take all that
information and internalize it.


1190
00:52:41,726 --> 00:52:45,046
As far as what's going
on, with other sessions.


1191
00:52:45,046 --> 00:52:47,196
There was a session
this morning--


1192
00:52:47,196 --> 00:52:48,516
you cannot go back in time.


1193
00:52:48,516 --> 00:52:49,856
If you can, good for you.


1194
00:52:50,136 --> 00:52:52,386
But if you can't, you
can watch this later.


1195
00:52:52,636 --> 00:52:54,686
The WWDC app is making a lot


1196
00:52:54,686 --> 00:52:56,736
of these sessions
available almost instantly.


1197
00:52:57,066 --> 00:52:58,576
So, definitely go check it out.


1198
00:52:58,876 --> 00:53:01,276
And then we didn't talk a
whole lot about proximity.


1199
00:53:01,486 --> 00:53:03,826
Well, because they're talking
about that in Core Location.


1200
00:53:03,886 --> 00:53:06,506
We felt like that's a
location services technology


1201
00:53:06,726 --> 00:53:09,016
and the Core Location guys
should really go into that.


1202
00:53:09,276 --> 00:53:12,616
There is a session on Thursday
that you guys should check out.


1203
00:53:13,356 --> 00:53:16,196
So, I want close
was just talking


1204
00:53:16,196 --> 00:53:18,086
about these used cases again.


1205
00:53:18,146 --> 00:53:23,156
And I want to kind of reiterate
how important we think Bluetooth


1206
00:53:23,156 --> 00:53:28,396
Low Energy is to the future
of accessory communications.


1207
00:53:28,396 --> 00:53:31,776
I mean all of these used
cases are profoundly important


1208
00:53:31,776 --> 00:53:32,656
to the consumer.


1209
00:53:32,996 --> 00:53:35,026
And when they have iOS
products in their hand


1210
00:53:35,346 --> 00:53:37,236
and it just naturally
communicates


1211
00:53:37,236 --> 00:53:41,036
with these devices we really are
starting to realize this concept


1212
00:53:41,036 --> 00:53:42,186
of the internet of things.


1213
00:53:42,466 --> 00:53:44,646
And it's just incredibly
powerful.


1214
00:53:45,106 --> 00:53:48,326
And it's super, super exciting
to be an engineer working


1215
00:53:48,326 --> 00:53:51,686
in communications because
of the nature the fact


1216
00:53:51,686 --> 00:53:55,866
that we can now truly put a
radio in everything around us


1217
00:53:55,866 --> 00:53:57,366
and have it fully integrate


1218
00:53:57,366 --> 00:53:59,856
with the consumer's
applications in their devices.


1219
00:54:00,296 --> 00:54:03,566
And ultimately it means this
idea of connecting the world


1220
00:54:03,566 --> 00:54:05,656
that we can connect
all these devices


1221
00:54:05,956 --> 00:54:09,496
in this heterogeneous
ecosystem that's just going


1222
00:54:09,496 --> 00:54:12,556
to create incredibly profound
experiences for our customers.


1223
00:54:12,856 --> 00:54:15,886
So, with that, I'd like to thank
you for coming for our session.


1224
00:54:15,886 --> 00:54:16,636
Enjoy WWDC.


1225
00:54:16,636 --> 00:54:18,386
We'll see you guys in the lab.


1226
00:54:18,786 --> 00:54:19,806
Thanks. [Applause]

