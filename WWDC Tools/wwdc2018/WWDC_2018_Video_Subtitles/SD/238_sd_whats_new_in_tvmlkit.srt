1
00:00:07,516 --> 00:00:16,500
[ Music ]


2
00:00:19,296 --> 00:00:20,086
>> Hi everyone.


3
00:00:20,226 --> 00:00:21,616
My name is Jeremy and I'm an


4
00:00:21,616 --> 00:00:23,366
engineer on the tvOS team.


5
00:00:23,866 --> 00:00:25,066
Today I'm really excited to


6
00:00:25,066 --> 00:00:26,586
speak with you about what's new


7
00:00:26,586 --> 00:00:28,436
in TVMLKit that we've added in


8
00:00:28,436 --> 00:00:29,236
tvOS 12.


9
00:00:29,776 --> 00:00:32,706
For the uninitiated, TVMLKit is


10
00:00:32,706 --> 00:00:34,366
Apple's high level framework for


11
00:00:34,366 --> 00:00:35,816
quickly building content based


12
00:00:35,816 --> 00:00:37,506
applications on tvOS.


13
00:00:38,016 --> 00:00:39,826
Out of the box, it is compliant


14
00:00:39,826 --> 00:00:40,836
with our human interface


15
00:00:40,836 --> 00:00:41,416
guidelines.


16
00:00:41,766 --> 00:00:42,996
So your applications look


17
00:00:42,996 --> 00:00:44,776
beautiful and feel correct.


18
00:00:45,536 --> 00:00:47,406
It uses JavaScript to drive


19
00:00:47,406 --> 00:00:49,526
application logic and a special


20
00:00:49,526 --> 00:00:51,226
XML based markup language which


21
00:00:51,226 --> 00:00:53,876
you define that renders into


22
00:00:53,876 --> 00:00:55,326
user interfaces on the screen.


23
00:00:57,226 --> 00:00:59,346
In fact, some of the apps you're


24
00:00:59,346 --> 00:01:01,996
familiar with and use today are


25
00:01:01,996 --> 00:01:03,216
built using TVMLKit.


26
00:01:04,146 --> 00:01:04,976
Along with that, there are


27
00:01:04,976 --> 00:01:06,336
thousands more in the app store


28
00:01:06,336 --> 00:01:07,046
that you write.


29
00:01:09,006 --> 00:01:10,706
So let's get started with the


30
00:01:10,706 --> 00:01:12,006
enhancements we've made to


31
00:01:12,006 --> 00:01:14,046
TVMLKit, beginning with three


32
00:01:14,306 --> 00:01:15,336
things we want to talk about


33
00:01:15,336 --> 00:01:15,606
today.


34
00:01:16,336 --> 00:01:18,176
First, we have some enhancements


35
00:01:18,176 --> 00:01:20,006
to Web Inspector that allow you


36
00:01:20,006 --> 00:01:21,186
to further debug your


37
00:01:21,186 --> 00:01:22,816
applications and introspect them


38
00:01:23,116 --> 00:01:24,446
at a deeper level.


39
00:01:26,056 --> 00:01:27,476
Since last year, we've added a


40
00:01:27,476 --> 00:01:28,716
bunch of features and


41
00:01:28,716 --> 00:01:29,986
enhancements to the framework


42
00:01:30,196 --> 00:01:31,306
and I'm going to discuss three


43
00:01:31,306 --> 00:01:32,676
of them with you today.


44
00:01:32,676 --> 00:01:34,936
We're going to talk about new


45
00:01:34,936 --> 00:01:37,006
Web Inspector enhancements for


46
00:01:37,006 --> 00:01:39,506
better debugging, new data


47
00:01:39,506 --> 00:01:41,176
binding constructs that are


48
00:01:41,176 --> 00:01:42,416
added to make it more powerful,


49
00:01:43,026 --> 00:01:44,436
and finally, a new way to


50
00:01:44,436 --> 00:01:45,716
customize the playback


51
00:01:45,716 --> 00:01:47,196
experience on TVMLKit.


52
00:01:47,786 --> 00:01:49,956
Let's get started with Web


53
00:01:49,956 --> 00:01:50,446
Inspector.


54
00:01:50,876 --> 00:01:53,156
tvOS 11 introduced more support


55
00:01:53,156 --> 00:01:54,466
for Web Inspector that allow


56
00:01:54,466 --> 00:01:56,156
better introspection into your


57
00:01:56,156 --> 00:01:57,236
TVMLKit apps.


58
00:01:57,966 --> 00:01:59,506
Since then, we've enhanced this


59
00:01:59,506 --> 00:02:01,976
support even further.


60
00:02:02,476 --> 00:02:05,596
In tvOS 11.3, in addition to


61
00:02:05,596 --> 00:02:06,996
showing install event listeners


62
00:02:06,996 --> 00:02:08,616
on an element, you can now


63
00:02:08,616 --> 00:02:09,886
temporarily disable them.


64
00:02:10,985 --> 00:02:13,166
This vastly helps with debugging


65
00:02:13,166 --> 00:02:14,456
as you can now toggle the event


66
00:02:14,456 --> 00:02:16,166
handlers off and on at whim.


67
00:02:20,436 --> 00:02:22,476
In the network tab, joining at


68
00:02:22,476 --> 00:02:23,516
[inaudible] in document


69
00:02:23,516 --> 00:02:25,416
resources are image resources.


70
00:02:25,806 --> 00:02:27,206
This allows you to see the


71
00:02:27,206 --> 00:02:29,336
images that are being loaded as


72
00:02:29,336 --> 00:02:30,576
well as information about how


73
00:02:30,576 --> 00:02:32,116
long it took and where time was


74
00:02:32,116 --> 00:02:32,436
spent.


75
00:02:32,946 --> 00:02:35,806
If you are interested in seeing


76
00:02:35,806 --> 00:02:37,076
the actual image that comes off


77
00:02:37,076 --> 00:02:38,646
the wire, this is now also an


78
00:02:38,646 --> 00:02:39,676
option you have at your


79
00:02:39,676 --> 00:02:40,236
disposal.


80
00:02:40,746 --> 00:02:42,206
However, please note that this


81
00:02:42,206 --> 00:02:43,386
only works after you've


82
00:02:43,386 --> 00:02:45,206
connected the Web Inspector.


83
00:02:45,806 --> 00:02:47,026
It does not show what has


84
00:02:47,026 --> 00:02:47,876
already been loaded.


85
00:02:49,636 --> 00:02:51,496
Finally, my most favorite


86
00:02:51,496 --> 00:02:53,086
feature of all, the inspect


87
00:02:53,086 --> 00:02:53,396
button.


88
00:02:54,176 --> 00:02:55,596
Clicking this will show you the


89
00:02:55,596 --> 00:02:56,916
approximately element that


90
00:02:56,916 --> 00:02:58,026
represents the view that's


91
00:02:58,026 --> 00:02:59,186
currently in focus.


92
00:03:00,946 --> 00:03:02,576
If your elementary is collapsed,


93
00:03:03,036 --> 00:03:05,156
Web Inspector will expand it to


94
00:03:05,156 --> 00:03:06,876
the exact element and highlight


95
00:03:06,876 --> 00:03:07,016
it.


96
00:03:09,596 --> 00:03:11,966
To use Web Inspector, either


97
00:03:11,966 --> 00:03:13,636
download the latest version of


98
00:03:13,636 --> 00:03:15,616
macOS and install it, or use


99
00:03:15,616 --> 00:03:16,966
Safari technology preview.


100
00:03:17,796 --> 00:03:19,176
More information about how to


101
00:03:19,176 --> 00:03:21,406
use Web Inspector can be seen in


102
00:03:21,406 --> 00:03:23,296
our talk given last year using


103
00:03:23,296 --> 00:03:24,876
Web Inspector with tvOS apps.


104
00:03:28,516 --> 00:03:30,256
With that, let's talk about data


105
00:03:30,256 --> 00:03:30,636
binding.


106
00:03:33,696 --> 00:03:35,176
And before we jump into the new


107
00:03:35,176 --> 00:03:36,646
features of data binding itself,


108
00:03:36,766 --> 00:03:37,976
let me give you an overview of


109
00:03:37,976 --> 00:03:38,566
what it is.


110
00:03:39,236 --> 00:03:40,576
Data binding helps you easily


111
00:03:40,576 --> 00:03:42,746
transform your data to user


112
00:03:42,746 --> 00:03:44,346
interface elements through


113
00:03:44,346 --> 00:03:45,766
expressions in your template


114
00:03:45,766 --> 00:03:46,166
markup.


115
00:03:47,356 --> 00:03:48,876
This is really good because it


116
00:03:48,876 --> 00:03:50,706
allows you to decouple your data


117
00:03:50,906 --> 00:03:52,066
and your lot -- and your layout


118
00:03:52,066 --> 00:03:53,796
logic as well as your


119
00:03:53,796 --> 00:03:55,116
application logic itself.


120
00:03:57,526 --> 00:03:58,776
Because of this, data bound


121
00:03:58,776 --> 00:04:00,126
templates can reduce the amount


122
00:04:00,126 --> 00:04:01,366
of JavaScript code you actually


123
00:04:01,366 --> 00:04:02,566
have to write to convert your


124
00:04:02,566 --> 00:04:04,556
data to TVML documents, since


125
00:04:04,556 --> 00:04:06,116
the framework does this on your


126
00:04:06,776 --> 00:04:07,016
behalf.


127
00:04:07,016 --> 00:04:08,566
In fact, by authoring your


128
00:04:08,566 --> 00:04:10,646
documents on your behalf, it is


129
00:04:10,646 --> 00:04:11,716
able to do it in the most


130
00:04:11,716 --> 00:04:13,236
performing way so you don't have


131
00:04:13,236 --> 00:04:14,666
to worry about the right APIs to


132
00:04:14,666 --> 00:04:15,076
use.


133
00:04:16,456 --> 00:04:17,926
Let's look at a practical


134
00:04:17,926 --> 00:04:19,266
example to explain this.


135
00:04:19,856 --> 00:04:21,026
Say you want to generate a


136
00:04:21,026 --> 00:04:22,936
banner with a title and a


137
00:04:22,936 --> 00:04:23,596
description.


138
00:04:24,136 --> 00:04:25,316
And this is how you would


139
00:04:25,386 --> 00:04:26,706
typically do it without data


140
00:04:26,706 --> 00:04:28,546
binding itself.


141
00:04:30,996 --> 00:04:32,386
First, you will fetch the


142
00:04:32,386 --> 00:04:33,666
relevant data that's supposed to


143
00:04:33,666 --> 00:04:35,146
be shown to the user in this


144
00:04:35,146 --> 00:04:36,856
case, a title and a description.


145
00:04:38,656 --> 00:04:40,596
And upon fetching, you pass it


146
00:04:40,596 --> 00:04:42,406
onto a part of the JavaScript


147
00:04:42,406 --> 00:04:43,666
code you've already written that


148
00:04:43,666 --> 00:04:45,126
processes this data and


149
00:04:45,126 --> 00:04:46,786
generates the actual final


150
00:04:46,976 --> 00:04:47,766
document itself.


151
00:04:49,306 --> 00:04:52,336
Now, with data bindings, you can


152
00:04:52,336 --> 00:04:53,666
take out JavaScript processing


153
00:04:53,666 --> 00:04:55,526
step and provide binding


154
00:04:55,526 --> 00:04:57,206
specifications in your template


155
00:04:57,206 --> 00:04:58,956
itself, and TVMLKit will


156
00:04:58,956 --> 00:05:00,556
populate the final document on


157
00:05:00,556 --> 00:05:01,876
your behalf as directed.


158
00:05:02,786 --> 00:05:04,616
Effectively, your application


159
00:05:04,616 --> 00:05:05,676
just needs to worry about


160
00:05:05,676 --> 00:05:08,186
fetching and massaging data, and


161
00:05:08,186 --> 00:05:09,186
not worry about dom [phonetic]


162
00:05:09,186 --> 00:05:09,866
editing at all.


163
00:05:11,076 --> 00:05:12,316
In a nutshell, that's how data


164
00:05:12,316 --> 00:05:13,936
binding works and helps reduce


165
00:05:13,936 --> 00:05:14,906
the amount of code you write.


166
00:05:17,516 --> 00:05:19,336
Last year, we introduced the


167
00:05:19,336 --> 00:05:20,626
concept of data binding with


168
00:05:20,626 --> 00:05:22,356
some core concepts that include


169
00:05:22,636 --> 00:05:23,896
binding of attributes of an


170
00:05:23,896 --> 00:05:25,896
element, binding the text


171
00:05:25,896 --> 00:05:28,146
content of an element, and of


172
00:05:28,146 --> 00:05:29,516
course, binding items of a


173
00:05:29,516 --> 00:05:31,546
section in either a shelf, grid,


174
00:05:31,816 --> 00:05:32,456
or list.


175
00:05:33,266 --> 00:05:35,016
Let's quickly recap on these


176
00:05:35,016 --> 00:05:36,796
concepts with another example.


177
00:05:39,756 --> 00:05:40,946
The corresponding data bound


178
00:05:40,946 --> 00:05:42,316
template representation of this


179
00:05:42,316 --> 00:05:43,666
image element would contain a


180
00:05:43,666 --> 00:05:45,046
binding expression with the 'at'


181
00:05:45,046 --> 00:05:46,336
symbol, followed by the


182
00:05:46,336 --> 00:05:47,796
attribute name and the property


183
00:05:47,796 --> 00:05:49,806
you want to bind it to.


184
00:05:50,236 --> 00:05:52,466
Next, let's seek the example of


185
00:05:52,466 --> 00:05:54,076
generating text content of an


186
00:05:54,076 --> 00:05:54,456
element.


187
00:05:55,946 --> 00:05:57,406
Like in this case, a title


188
00:05:57,406 --> 00:05:58,856
element that has corresponding


189
00:05:58,856 --> 00:06:00,486
data of what it should actually


190
00:06:00,486 --> 00:06:01,126
be filled with.


191
00:06:03,356 --> 00:06:04,646
The data bound template


192
00:06:04,646 --> 00:06:05,976
representation for this title


193
00:06:05,976 --> 00:06:07,386
element will contain a text


194
00:06:07,386 --> 00:06:09,216
content binding and the property


195
00:06:09,216 --> 00:06:09,836
it maps to.


196
00:06:13,186 --> 00:06:14,386
Finally let's talk a little bit


197
00:06:14,386 --> 00:06:15,376
about items binding.


198
00:06:15,836 --> 00:06:17,356
It is a slightly different


199
00:06:17,356 --> 00:06:19,256
binding and involves a group of


200
00:06:19,256 --> 00:06:20,886
data pieces you want to show.


201
00:06:21,586 --> 00:06:23,156
It also only works with sections


202
00:06:23,156 --> 00:06:24,696
on a shelf, list, or grid.


203
00:06:26,656 --> 00:06:27,796
In this example, we have some


204
00:06:27,796 --> 00:06:30,146
data with the tree list items as


205
00:06:30,146 --> 00:06:30,736
an array.


206
00:06:31,236 --> 00:06:32,636
And the final representation


207
00:06:32,636 --> 00:06:34,836
should be a section of tree list


208
00:06:34,836 --> 00:06:35,656
item lockups.


209
00:06:37,246 --> 00:06:38,416
The corresponding data bound


210
00:06:38,416 --> 00:06:39,586
template for this section will


211
00:06:39,586 --> 00:06:41,696
contain two things; an item's


212
00:06:41,696 --> 00:06:43,366
binding and the property it maps


213
00:06:43,366 --> 00:06:46,336
to, and also a prototype to


214
00:06:46,336 --> 00:06:48,016
convert each data object


215
00:06:48,136 --> 00:06:49,006
contained in the array.


216
00:06:49,636 --> 00:06:51,296
In this case, it would be a data


217
00:06:51,296 --> 00:06:52,826
bound template representation of


218
00:06:52,826 --> 00:06:53,836
a list item lockup.


219
00:06:55,976 --> 00:06:57,236
So that's the tree binding


220
00:06:57,236 --> 00:06:58,666
constructs we've introduced in


221
00:06:58,666 --> 00:06:59,556
tvOS 11.


222
00:06:59,736 --> 00:07:01,366
For more information, please


223
00:07:01,366 --> 00:07:02,736
look at our talk, Advances in


224
00:07:02,736 --> 00:07:05,116
TVMLKit from last year's WWDC.


225
00:07:08,246 --> 00:07:10,706
This year, we've extended that


226
00:07:10,706 --> 00:07:11,436
vocabulary.


227
00:07:11,996 --> 00:07:13,366
To begin, we've added a more


228
00:07:13,366 --> 00:07:14,896
generic way of binding child


229
00:07:14,896 --> 00:07:17,076
elements of an element using the


230
00:07:17,076 --> 00:07:17,876
children binding.


231
00:07:19,406 --> 00:07:20,986
And to help better organize your


232
00:07:20,986 --> 00:07:22,526
DOM, we've added a couple of


233
00:07:22,526 --> 00:07:24,186
special elements, namely


234
00:07:24,186 --> 00:07:25,276
fragment and rules.


235
00:07:25,836 --> 00:07:27,446
We'll go into this in detail,


236
00:07:27,446 --> 00:07:29,076
starting with children binding.


237
00:07:32,246 --> 00:07:33,526
Children binding is a more


238
00:07:33,526 --> 00:07:35,106
generic form of items binding.


239
00:07:35,996 --> 00:07:37,966
Items binding is optimized for


240
00:07:37,966 --> 00:07:39,936
use cases where you have a


241
00:07:39,936 --> 00:07:42,046
section of a shelf, grid, or


242
00:07:42,276 --> 00:07:44,316
list in order to work


243
00:07:44,316 --> 00:07:45,486
efficiently with large data


244
00:07:45,486 --> 00:07:45,836
sets.


245
00:07:46,826 --> 00:07:48,146
They can be used outside these


246
00:07:48,146 --> 00:07:48,706
elements.


247
00:07:49,686 --> 00:07:51,046
For everything else, use


248
00:07:51,046 --> 00:07:51,766
children's binding.


249
00:07:54,116 --> 00:07:55,436
And it's because of a very


250
00:07:55,436 --> 00:07:56,136
simple reason.


251
00:07:56,206 --> 00:07:57,976
It works by generating children


252
00:07:57,976 --> 00:07:59,736
of a target element itself.


253
00:08:02,356 --> 00:08:03,946
And it behaves the same way as


254
00:08:03,946 --> 00:08:04,986
items binding does.


255
00:08:05,566 --> 00:08:06,686
You require the use of


256
00:08:06,686 --> 00:08:09,086
prototypes to define the


257
00:08:09,186 --> 00:08:10,356
elements that data should be


258
00:08:10,356 --> 00:08:13,526
converted into and this will be


259
00:08:13,526 --> 00:08:15,536
used as a template when


260
00:08:15,536 --> 00:08:16,976
generating the final DOM itself.


261
00:08:20,346 --> 00:08:21,596
Let's take an example to explain


262
00:08:21,596 --> 00:08:22,286
how this works.


263
00:08:23,256 --> 00:08:24,766
I am going back to the same


264
00:08:24,766 --> 00:08:26,536
example of tree items in an


265
00:08:26,536 --> 00:08:26,916
array.


266
00:08:27,536 --> 00:08:28,916
We have this very same piece of


267
00:08:28,916 --> 00:08:30,736
data but in this particular


268
00:08:30,736 --> 00:08:32,546
situation, we have three


269
00:08:32,546 --> 00:08:33,655
different menu items.


270
00:08:34,346 --> 00:08:36,086
And this would be used in a menu


271
00:08:36,086 --> 00:08:36,326
bar.


272
00:08:37,676 --> 00:08:39,246
This is the final representation


273
00:08:39,246 --> 00:08:40,466
we expect to see.


274
00:08:40,836 --> 00:08:42,796
Basically a menu bar tree, menu


275
00:08:42,796 --> 00:08:43,635
bar items.


276
00:08:46,026 --> 00:08:47,846
And this is a very simple way to


277
00:08:47,846 --> 00:08:50,876
specify the template for it.


278
00:08:50,876 --> 00:08:52,686
As you can see, it's similar to


279
00:08:52,686 --> 00:08:54,236
how you would do items binding.


280
00:08:54,756 --> 00:08:56,196
It has prototypes that's used to


281
00:08:56,196 --> 00:08:58,386
map data to elements and it has


282
00:08:58,386 --> 00:08:59,516
a binding expression.


283
00:09:00,526 --> 00:09:01,616
The only difference is that the


284
00:09:01,616 --> 00:09:03,186
element is expressed on


285
00:09:03,416 --> 00:09:04,416
[inaudible] section.


286
00:09:05,036 --> 00:09:06,546
Children binding works with any


287
00:09:06,716 --> 00:09:07,066
element.


288
00:09:10,166 --> 00:09:11,636
Now this works really well as


289
00:09:11,636 --> 00:09:13,196
long as you want to generate all


290
00:09:13,196 --> 00:09:14,716
the child elements itself.


291
00:09:15,456 --> 00:09:16,656
There might be cases where you


292
00:09:16,656 --> 00:09:18,326
want to only generate some of


293
00:09:18,326 --> 00:09:19,016
those children.


294
00:09:19,146 --> 00:09:20,996
Take, for example, an auto


295
00:09:20,996 --> 00:09:22,886
streaming app with a now playing


296
00:09:22,886 --> 00:09:23,476
menu item.


297
00:09:24,186 --> 00:09:25,406
The now playing menu item is a


298
00:09:25,406 --> 00:09:27,386
special menu item that should


299
00:09:27,386 --> 00:09:29,686
always be in the menu bar but


300
00:09:29,686 --> 00:09:32,016
would only appear if background


301
00:09:32,016 --> 00:09:33,896
audio is currently playing.


302
00:09:36,716 --> 00:09:38,376
However in this case, we still


303
00:09:38,376 --> 00:09:39,556
want the menu bar items to be


304
00:09:39,556 --> 00:09:40,186
data bound.


305
00:09:40,986 --> 00:09:42,996
In order for this work, we need


306
00:09:42,996 --> 00:09:44,386
to compartmentalize the data


307
00:09:44,386 --> 00:09:46,326
driven and non-data driven parts


308
00:09:46,326 --> 00:09:47,006
of the menu bar.


309
00:09:47,626 --> 00:09:49,136
And that's where fragments comes


310
00:09:49,136 --> 00:09:51,776
into play.


311
00:09:51,966 --> 00:09:52,946
So what are fragments?


312
00:09:54,376 --> 00:09:56,066
Fragments are invisible elements


313
00:09:56,216 --> 00:09:57,436
that the renderer doesn't see


314
00:09:58,216 --> 00:09:59,746
and it helps you organize your


315
00:09:59,746 --> 00:10:00,056
DOM.


316
00:10:01,366 --> 00:10:02,796
But what's special about


317
00:10:02,796 --> 00:10:04,666
fragments are that its children


318
00:10:04,756 --> 00:10:05,346
are visible.


319
00:10:08,176 --> 00:10:10,586
And because it is an element and


320
00:10:10,586 --> 00:10:12,086
children binding works with any


321
00:10:12,086 --> 00:10:14,526
element, the fragments itself


322
00:10:14,526 --> 00:10:15,816
works with children binding.


323
00:10:18,576 --> 00:10:19,926
So let's go back to our data in


324
00:10:19,926 --> 00:10:21,486
the final form we want and we


325
00:10:21,486 --> 00:10:22,696
have something like this.


326
00:10:23,126 --> 00:10:24,626
You have the menu bar items.


327
00:10:25,436 --> 00:10:27,046
Nice to encapsulate in a


328
00:10:27,046 --> 00:10:29,336
fragment and this is great


329
00:10:29,336 --> 00:10:30,406
because it allows us to do


330
00:10:30,406 --> 00:10:31,676
children binding like so.


331
00:10:34,806 --> 00:10:36,896
Now all we have done is moved


332
00:10:36,896 --> 00:10:38,456
the data around [inaudible] into


333
00:10:38,456 --> 00:10:39,986
fragment while keeping the menu


334
00:10:39,986 --> 00:10:41,766
bar intact with the now playing


335
00:10:41,766 --> 00:10:42,356
menu item.


336
00:10:42,656 --> 00:10:44,336
And because the renderer only


337
00:10:44,336 --> 00:10:45,756
sees the children of the


338
00:10:45,756 --> 00:10:48,076
fragment, this still renders as


339
00:10:48,076 --> 00:10:49,536
a properly formed menu bar.


340
00:10:52,576 --> 00:10:53,946
On the very subject of data


341
00:10:53,946 --> 00:10:56,416
itself, that you can use to map


342
00:10:56,536 --> 00:10:58,496
to user interface elements, this


343
00:10:58,496 --> 00:11:00,376
is another likely scenario where


344
00:11:00,376 --> 00:11:02,406
you have data that some do not


345
00:11:02,406 --> 00:11:04,196
change, and some change all the


346
00:11:04,196 --> 00:11:04,516
time.


347
00:11:05,606 --> 00:11:07,296
For example in this particular


348
00:11:07,296 --> 00:11:10,186
piece of data itself, it is for


349
00:11:10,186 --> 00:11:12,366
a video that has a poster image,


350
00:11:12,496 --> 00:11:14,906
a title, and a playback


351
00:11:14,906 --> 00:11:15,496
progress.


352
00:11:17,726 --> 00:11:19,316
In some situations, we want to


353
00:11:19,316 --> 00:11:21,236
show different user interfaces


354
00:11:21,236 --> 00:11:22,356
based on that information


355
00:11:22,356 --> 00:11:22,716
itself.


356
00:11:23,176 --> 00:11:25,576
In the case where playback


357
00:11:25,576 --> 00:11:27,596
progress hasn't started, it's


358
00:11:27,596 --> 00:11:29,796
naturally zero and we are


359
00:11:29,796 --> 00:11:31,596
interested in showing the poster


360
00:11:31,596 --> 00:11:33,836
image and the title for the


361
00:11:33,836 --> 00:11:34,576
video itself.


362
00:11:36,086 --> 00:11:37,766
But when we start watching the


363
00:11:37,766 --> 00:11:39,326
video, progress will naturally


364
00:11:39,326 --> 00:11:40,226
be greater than zero.


365
00:11:41,126 --> 00:11:42,256
For that, we want to show the


366
00:11:42,256 --> 00:11:43,606
same thing that never change,


367
00:11:44,526 --> 00:11:45,836
the poster image and its title.


368
00:11:47,076 --> 00:11:48,586
However to make things obvious


369
00:11:48,586 --> 00:11:50,736
this video's being played back,


370
00:11:51,376 --> 00:11:52,626
we want to show a progress bar


371
00:11:52,626 --> 00:11:53,506
that's filled through the


372
00:11:53,506 --> 00:11:55,216
playback progress' percentage


373
00:11:55,216 --> 00:11:55,646
itself.


374
00:11:57,546 --> 00:11:58,886
In the very same vein, we have


375
00:11:58,886 --> 00:12:00,526
now two use cases where data is


376
00:12:00,526 --> 00:12:02,556
different and we also want to


377
00:12:02,556 --> 00:12:04,016
show two different looks of what


378
00:12:04,016 --> 00:12:04,416
it is.


379
00:12:05,146 --> 00:12:06,756
In the first case, we -- all we


380
00:12:06,756 --> 00:12:08,366
have is an image and a title in


381
00:12:08,366 --> 00:12:08,816
the lock up.


382
00:12:09,926 --> 00:12:11,556
And in the second case, we have


383
00:12:11,556 --> 00:12:13,256
the addition of an overlay and a


384
00:12:13,256 --> 00:12:13,896
progress bar.


385
00:12:17,046 --> 00:12:17,916
Typically you would have


386
00:12:17,916 --> 00:12:19,456
application logic that outputs


387
00:12:19,496 --> 00:12:21,126
different x amount based on that


388
00:12:21,126 --> 00:12:24,016
data itself but with rules, you


389
00:12:24,016 --> 00:12:25,356
can have a single statically


390
00:12:25,356 --> 00:12:27,076
defined template that would give


391
00:12:27,076 --> 00:12:28,606
you either representations of


392
00:12:28,636 --> 00:12:29,526
the final document.


393
00:12:31,126 --> 00:12:32,096
So what are the rules?


394
00:12:32,446 --> 00:12:35,236
Well, rules used data states to


395
00:12:35,236 --> 00:12:38,186
redefine your final document


396
00:12:38,416 --> 00:12:40,166
which, in turns, refines your


397
00:12:40,666 --> 00:12:40,756
UI.


398
00:12:41,806 --> 00:12:43,296
It is an invisible element.


399
00:12:43,516 --> 00:12:44,746
So the renderer doesn't see it


400
00:12:45,246 --> 00:12:46,736
but it affects how the document


401
00:12:46,736 --> 00:12:47,236
is authored.


402
00:12:49,296 --> 00:12:50,716
Any operations within those


403
00:12:50,716 --> 00:12:53,616
rules happen on sibling elements


404
00:12:53,726 --> 00:12:55,476
that the rules are a part of.


405
00:12:56,476 --> 00:12:57,756
And the best way to show this to


406
00:12:57,756 --> 00:12:59,396
you is in another example of how


407
00:12:59,396 --> 00:13:00,286
this can be setup.


408
00:13:02,836 --> 00:13:04,286
So let's look at the rules that


409
00:13:04,476 --> 00:13:06,756
we would use to structure the


410
00:13:06,756 --> 00:13:08,106
very prototype that we want --


411
00:13:08,106 --> 00:13:10,036
that we've shown as an example.


412
00:13:10,536 --> 00:13:11,976
We will start by defining the


413
00:13:11,976 --> 00:13:13,386
prototype as the lowest common


414
00:13:13,386 --> 00:13:15,116
denominator of what our user


415
00:13:15,116 --> 00:13:16,446
interface should look like.


416
00:13:17,276 --> 00:13:18,916
And in this case, we have an


417
00:13:18,916 --> 00:13:20,016
image and a title.


418
00:13:21,716 --> 00:13:23,196
However, you would notice that


419
00:13:23,196 --> 00:13:25,216
we also have a place holder for


420
00:13:25,216 --> 00:13:25,896
the progress bar.


421
00:13:26,566 --> 00:13:28,056
Placeholders are also special


422
00:13:28,056 --> 00:13:29,426
elements that are invisible to


423
00:13:29,426 --> 00:13:31,096
the renderer and in this case,


424
00:13:31,366 --> 00:13:32,876
would be used by the rules as a


425
00:13:32,876 --> 00:13:34,686
target for replacement when data


426
00:13:34,686 --> 00:13:35,426
states match.


427
00:13:36,886 --> 00:13:39,026
Now let's fill in our rules.


428
00:13:40,136 --> 00:13:41,466
A group of rules that act on


429
00:13:41,466 --> 00:13:42,466
sibling elements are


430
00:13:42,466 --> 00:13:43,976
encapsulated in the rules tag.


431
00:13:47,606 --> 00:13:48,926
Individual rules that match a


432
00:13:48,926 --> 00:13:51,426
data state are encapsulated as


433
00:13:51,516 --> 00:13:54,186
specialized elements, and


434
00:13:54,606 --> 00:13:56,776
specialized elements become


435
00:13:56,806 --> 00:13:58,576
active when it matches certain


436
00:13:58,576 --> 00:13:59,166
data states.


437
00:14:00,396 --> 00:14:01,696
And the way that that's matched


438
00:14:01,826 --> 00:14:03,766
is based on a query in the state


439
00:14:03,766 --> 00:14:04,526
attribute itself.


440
00:14:07,266 --> 00:14:09,186
When data state matches, the


441
00:14:09,186 --> 00:14:10,876
children of the special element


442
00:14:10,876 --> 00:14:12,696
-- specialized element are the


443
00:14:12,696 --> 00:14:14,346
list of operations that act on


444
00:14:14,346 --> 00:14:16,146
the sibling elements of rules.


445
00:14:16,556 --> 00:14:18,606
In this case, we want the


446
00:14:18,606 --> 00:14:19,996
placeholder to be replaced with


447
00:14:19,996 --> 00:14:21,456
an overlay element and its


448
00:14:21,456 --> 00:14:21,846
children.


449
00:14:25,956 --> 00:14:27,666
TVMLKit matches the elements to


450
00:14:27,666 --> 00:14:29,106
be replaced by looking at the


451
00:14:29,106 --> 00:14:30,936
tag attribute on any element.


452
00:14:31,676 --> 00:14:33,456
It effectively does replacement


453
00:14:33,676 --> 00:14:35,356
by first matching on that tag


454
00:14:35,776 --> 00:14:37,046
and then comparing the element


455
00:14:37,046 --> 00:14:37,256
name.


456
00:14:38,146 --> 00:14:39,236
If the element name is


457
00:14:39,236 --> 00:14:40,726
different, it would replace that


458
00:14:40,726 --> 00:14:42,786
element hole and in this case,


459
00:14:43,086 --> 00:14:44,776
placeholder becomes an overlay.


460
00:14:45,736 --> 00:14:47,236
However, if the element name


461
00:14:47,236 --> 00:14:49,046
matches, whatever that's new


462
00:14:49,386 --> 00:14:50,576
would be appended to what's


463
00:14:50,576 --> 00:14:51,476
already existing.


464
00:14:53,426 --> 00:14:55,586
And so we have a single template


465
00:14:55,586 --> 00:14:56,986
with rules that will generate


466
00:14:56,986 --> 00:14:58,806
two different output based on


467
00:14:58,806 --> 00:14:59,946
the state of the data that's


468
00:14:59,946 --> 00:15:00,416
provided.


469
00:15:02,136 --> 00:15:04,016
Effectively you can move your


470
00:15:04,016 --> 00:15:05,606
application logic to deal with


471
00:15:05,606 --> 00:15:07,276
how things are displayed into a


472
00:15:07,276 --> 00:15:08,916
statically specific template


473
00:15:09,596 --> 00:15:11,216
that exists within the context


474
00:15:11,586 --> 00:15:12,926
of elements that's transformed


475
00:15:13,106 --> 00:15:14,196
into user interfaces.


476
00:15:15,556 --> 00:15:16,846
Now let's switch gears and talk


477
00:15:16,876 --> 00:15:18,506
about playback in TVMLKit.


478
00:15:19,296 --> 00:15:20,896
TVMLKit has long provided


479
00:15:20,966 --> 00:15:22,486
extension points where you need


480
00:15:22,486 --> 00:15:24,226
more customization of your user


481
00:15:24,226 --> 00:15:26,326
interfaces, be it individual


482
00:15:26,326 --> 00:15:28,226
views or even whole templates.


483
00:15:29,126 --> 00:15:31,276
In tvOS 12, we are extending


484
00:15:31,276 --> 00:15:32,586
this to our playback pipeline,


485
00:15:32,976 --> 00:15:34,586
giving you control over playback


486
00:15:34,726 --> 00:15:36,586
as well as its associated user


487
00:15:36,766 --> 00:15:37,416
experience.


488
00:15:41,046 --> 00:15:43,976
This experience works with all


489
00:15:44,046 --> 00:15:45,176
the different playback styles we


490
00:15:45,176 --> 00:15:47,786
have, whether it is embedded or


491
00:15:47,866 --> 00:15:48,656
in a full screen.


492
00:15:51,676 --> 00:15:53,106
You do this by providing a


493
00:15:53,106 --> 00:15:55,006
TVPlayer object and its


494
00:15:55,006 --> 00:15:56,936
associated user interface as a


495
00:15:56,936 --> 00:15:57,916
UIViewController.


496
00:16:01,156 --> 00:16:03,016
These have close analogues to


497
00:16:03,016 --> 00:16:04,486
our JavaScript APIs.


498
00:16:04,626 --> 00:16:06,256
So that would be less confusion


499
00:16:06,406 --> 00:16:07,696
in talking to your JavaScript


500
00:16:07,696 --> 00:16:08,276
developers.


501
00:16:09,556 --> 00:16:11,856
And finally there's a limited


502
00:16:11,856 --> 00:16:13,066
JavaScript Bridge that's


503
00:16:13,066 --> 00:16:13,736
exposed.


504
00:16:13,736 --> 00:16:15,206
It allows communications between


505
00:16:15,336 --> 00:16:17,456
your native code and JavaScript


506
00:16:17,456 --> 00:16:17,866
itself.


507
00:16:20,536 --> 00:16:23,916
Let's talk about TVPlayer and


508
00:16:23,916 --> 00:16:25,736
that's the base where you can


509
00:16:25,736 --> 00:16:26,926
get your customized playback


510
00:16:26,926 --> 00:16:27,766
experience working.


511
00:16:28,996 --> 00:16:32,466
TVPlayer is a public AVPlayer


512
00:16:32,466 --> 00:16:33,886
adaptor to the Playback


513
00:16:33,886 --> 00:16:34,336
Pipeline.


514
00:16:35,396 --> 00:16:36,916
What this means is that TVPlayer


515
00:16:36,916 --> 00:16:38,506
effectively translates regular


516
00:16:38,506 --> 00:16:40,506
AVPlayer callbacks into what


517
00:16:40,506 --> 00:16:41,746
JavaScript expects.


518
00:16:45,316 --> 00:16:47,306
TVPlayer is also the object that


519
00:16:47,306 --> 00:16:48,726
you can use to dispatch custom


520
00:16:48,726 --> 00:16:51,276
events to JavaScript and by


521
00:16:51,276 --> 00:16:52,526
default, it already handles


522
00:16:52,576 --> 00:16:54,806
everything that AVPlayer has as


523
00:16:54,806 --> 00:16:55,536
playback events.


524
00:16:55,656 --> 00:16:57,586
So anything extra is on you to


525
00:16:57,586 --> 00:16:57,976
dispatch.


526
00:17:02,046 --> 00:17:03,616
Changes that JavaScript makes to


527
00:17:03,616 --> 00:17:05,306
the player are KVO observable.


528
00:17:05,496 --> 00:17:06,656
So you know when things are


529
00:17:06,656 --> 00:17:07,695
changed by your JavaScript


530
00:17:07,695 --> 00:17:08,306
developers.


531
00:17:09,705 --> 00:17:11,526
Finally the TVPlayer object


532
00:17:11,806 --> 00:17:13,506
plays media in a sequential


533
00:17:13,506 --> 00:17:15,546
fashion from the very first


534
00:17:15,546 --> 00:17:16,746
[inaudible] item all the way to


535
00:17:16,746 --> 00:17:17,976
the very last in its playlist.


536
00:17:20,945 --> 00:17:22,175
Whenever a player is needed,


537
00:17:22,576 --> 00:17:24,256
TVApplicationControllerDelegate


538
00:17:24,256 --> 00:17:25,945
will ask for a TVPlayer and you


539
00:17:25,945 --> 00:17:27,506
will have to return an instance


540
00:17:27,566 --> 00:17:29,646
in order to participate in the


541
00:17:29,646 --> 00:17:30,496
Playback Pipeline.


542
00:17:34,076 --> 00:17:35,066
The next step of the Playback


543
00:17:35,066 --> 00:17:36,406
Pipeline is to actually show


544
00:17:36,406 --> 00:17:37,826
Playback on the screen itself in


545
00:17:37,826 --> 00:17:39,236
the form of a user interface.


546
00:17:39,736 --> 00:17:42,066
This can happen anytime whether


547
00:17:42,066 --> 00:17:44,116
it's full screen playback or


548
00:17:44,116 --> 00:17:44,936
embedded playback.


549
00:17:45,426 --> 00:17:47,016
It is entirely up to you to


550
00:17:47,016 --> 00:17:48,406
create your own user interface.


551
00:17:49,186 --> 00:17:51,826
When TVMLKit needs a user


552
00:17:51,826 --> 00:17:53,646
interfact, the TVInterface


553
00:17:53,646 --> 00:17:54,316
[inaudible] will ask its


554
00:17:54,316 --> 00:17:55,616
delegate for a view controller.


555
00:17:56,246 --> 00:17:58,046
It will also pass it a reference


556
00:17:58,046 --> 00:18:00,336
to TVPlayer that is responsible


557
00:18:00,336 --> 00:18:01,806
for playing media in that view.


558
00:18:04,726 --> 00:18:05,476
With everything, there are


559
00:18:05,476 --> 00:18:07,226
several caveats to using


560
00:18:07,666 --> 00:18:10,086
TVPlayer and its associated user


561
00:18:10,086 --> 00:18:10,596
interface.


562
00:18:12,266 --> 00:18:13,246
The very first thing is you


563
00:18:13,246 --> 00:18:14,476
should handle any 'should'


564
00:18:14,476 --> 00:18:15,266
events yourself.


565
00:18:16,026 --> 00:18:17,156
These are usually tied to


566
00:18:17,156 --> 00:18:19,246
interstitials and since that's


567
00:18:19,246 --> 00:18:20,786
largely user interface, this


568
00:18:20,786 --> 00:18:22,656
should be handled by the native


569
00:18:22,656 --> 00:18:23,446
code that you write.


570
00:18:25,676 --> 00:18:27,266
If you use FairPlay encryption


571
00:18:27,266 --> 00:18:29,836
for your video playback, you


572
00:18:29,836 --> 00:18:32,456
need to use AVContentKeySession


573
00:18:32,456 --> 00:18:33,486
for secure key loading.


574
00:18:34,006 --> 00:18:36,326
For more information about


575
00:18:36,326 --> 00:18:38,406
AVContentKeySession, look at our


576
00:18:38,406 --> 00:18:39,866
talks from last year, Advances


577
00:18:39,866 --> 00:18:42,166
in HTTP Live Streaming, and a


578
00:18:42,166 --> 00:18:43,086
talk from this year about


579
00:18:43,086 --> 00:18:44,646
AVContentKeySession Best


580
00:18:44,646 --> 00:18:45,206
Practices.


581
00:18:47,456 --> 00:18:49,826
Finally, if your JavaScript


582
00:18:49,826 --> 00:18:51,586
developers use overlay and


583
00:18:51,586 --> 00:18:53,526
interactive overlays, this will


584
00:18:53,526 --> 00:18:54,856
not work out of the box.


585
00:18:55,556 --> 00:18:56,896
They are user interfaces and


586
00:18:56,896 --> 00:18:57,856
because you are building your


587
00:18:57,856 --> 00:18:59,396
own, you will have to handle it


588
00:18:59,446 --> 00:18:59,896
yourself.


589
00:19:04,206 --> 00:19:06,166
In summary, the changes we've


590
00:19:06,166 --> 00:19:09,746
made to TVMLKit and tvOS 12 are


591
00:19:10,176 --> 00:19:11,876
the following two: One is the


592
00:19:11,876 --> 00:19:13,256
data binding is now even more


593
00:19:13,256 --> 00:19:15,406
powerful, enabling you to build


594
00:19:15,406 --> 00:19:17,306
data driven templates in any


595
00:19:17,306 --> 00:19:17,676
form.


596
00:19:18,316 --> 00:19:19,556
We highly encourage you to check


597
00:19:19,556 --> 00:19:19,936
this out.


598
00:19:21,376 --> 00:19:22,986
And finally, if you've been long


599
00:19:22,986 --> 00:19:24,716
waiting to customize the


600
00:19:24,716 --> 00:19:26,146
playback experience itself, you


601
00:19:26,146 --> 00:19:27,886
can do it today by implementing


602
00:19:27,886 --> 00:19:28,806
your own native playback


603
00:19:28,806 --> 00:19:29,356
experience.


604
00:19:31,246 --> 00:19:32,566
For more information about this


605
00:19:32,566 --> 00:19:34,406
talk, please look at the


606
00:19:34,406 --> 00:19:35,226
following url.


607
00:19:37,286 --> 00:19:38,946
And thank you for attending WWDC


608
00:19:38,946 --> 00:19:40,326
2018.


609
00:19:41,166 --> 00:19:41,506
Thank you.

