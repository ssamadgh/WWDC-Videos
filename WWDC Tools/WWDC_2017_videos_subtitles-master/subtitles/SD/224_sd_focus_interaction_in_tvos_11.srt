1
00:00:20,416 --> 00:00:20,906
>> Good morning.


2
00:00:21,516 --> 00:00:24,636
[ Applause ]


3
00:00:25,136 --> 00:00:27,036
Welcome to Focus Interaction in


4
00:00:27,036 --> 00:00:27,876
tvOS 11.


5
00:00:28,826 --> 00:00:30,086
My name is Matt, I'm a software


6
00:00:30,086 --> 00:00:31,736
engineer working on UIKit and


7
00:00:31,736 --> 00:00:33,146
I'll be joined later today by my


8
00:00:33,146 --> 00:00:33,976
colleague Jon.


9
00:00:33,976 --> 00:00:37,016
We have a lot to cover today, so


10
00:00:37,236 --> 00:00:37,916
let's get started.


11
00:00:38,936 --> 00:00:41,126
First, we're going to showcase


12
00:00:41,126 --> 00:00:42,326
some of the new features and


13
00:00:42,326 --> 00:00:44,026
enhancements that we've made for


14
00:00:44,026 --> 00:00:45,636
Focus Interaction support in


15
00:00:45,636 --> 00:00:46,386
tvOS 11.


16
00:00:47,666 --> 00:00:49,056
These cover a number of requests


17
00:00:49,056 --> 00:00:50,156
that we've received from you


18
00:00:50,156 --> 00:00:51,066
over the past year.


19
00:00:52,886 --> 00:00:54,996
Next, Focus Interaction support


20
00:00:55,496 --> 00:00:57,616
is now in SceneKit and so we're


21
00:00:57,616 --> 00:00:58,666
going to cover everything that


22
00:00:58,666 --> 00:01:00,226
you need to know in order to get


23
00:01:00,226 --> 00:01:00,596
started.


24
00:01:02,056 --> 00:01:03,676
And finally, we've built some


25
00:01:03,676 --> 00:01:05,966
great new focus debugging tools


26
00:01:05,966 --> 00:01:07,556
in tvOS 11 for helping you


27
00:01:07,556 --> 00:01:09,966
diagnose focus related issues in


28
00:01:09,966 --> 00:01:10,866
your app.


29
00:01:11,316 --> 00:01:12,266
We think these new tools are


30
00:01:12,266 --> 00:01:14,686
going to save you a ton of time.


31
00:01:15,566 --> 00:01:16,976
But before we start it's


32
00:01:16,976 --> 00:01:18,416
important that we review some of


33
00:01:18,416 --> 00:01:19,986
the basics of how the Focus API


34
00:01:20,096 --> 00:01:21,716
works into tvOS 11.


35
00:01:22,156 --> 00:01:23,376
This information is going to be


36
00:01:23,376 --> 00:01:24,786
important throughout our session


37
00:01:25,676 --> 00:01:25,906
today.


38
00:01:26,276 --> 00:01:27,356
From the perspective of the


39
00:01:27,356 --> 00:01:28,926
focus engine your app is app is


40
00:01:28,926 --> 00:01:31,396
made up of focus items and focus


41
00:01:31,536 --> 00:01:32,256
environments.


42
00:01:33,716 --> 00:01:35,646
Focus items are the user


43
00:01:35,646 --> 00:01:37,006
interface elements that are


44
00:01:37,096 --> 00:01:38,606
capable of becoming focused.


45
00:01:39,386 --> 00:01:41,186
They conform to the UIFocusItem


46
00:01:41,186 --> 00:01:42,036
item protocol.


47
00:01:42,456 --> 00:01:45,496
Examples of focus items include


48
00:01:45,496 --> 00:01:48,976
UIViews in UIKit and nodes in


49
00:01:50,416 --> 00:01:50,856
SpriteKit.


50
00:01:51,166 --> 00:01:53,106
Focus environments conform to


51
00:01:53,106 --> 00:01:54,976
the UIFocusEnvironment protocol.


52
00:01:56,206 --> 00:01:57,426
Environments are allowed to


53
00:01:57,476 --> 00:01:59,196
influence the focus behavior in


54
00:01:59,196 --> 00:02:00,856
your application and they also


55
00:02:00,856 --> 00:02:02,096
get notified about focus


56
00:02:02,096 --> 00:02:02,686
updates.


57
00:02:03,496 --> 00:02:05,496
All focus items are also focus


58
00:02:05,496 --> 00:02:07,446
environments, but these also


59
00:02:07,446 --> 00:02:08,866
cover other objects like view


60
00:02:08,866 --> 00:02:09,446
controllers.


61
00:02:11,096 --> 00:02:13,536
Focus items and focus


62
00:02:13,536 --> 00:02:15,026
environments are arranged in a


63
00:02:15,026 --> 00:02:15,566
hierarchy.


64
00:02:16,196 --> 00:02:17,836
In UIKit this hierarchy loosely


65
00:02:17,836 --> 00:02:19,276
follows the view and view


66
00:02:19,276 --> 00:02:20,846
controller hierarchies and in


67
00:02:20,846 --> 00:02:22,376
SpriteKit it follows the node


68
00:02:22,376 --> 00:02:22,786
hierarchy.


69
00:02:23,596 --> 00:02:25,426
This hierarchy is important when


70
00:02:25,426 --> 00:02:26,516
it comes to getting notified


71
00:02:26,606 --> 00:02:27,656
about focus updates.


72
00:02:28,246 --> 00:02:31,206
A focus update can happen in one


73
00:02:31,206 --> 00:02:31,736
of two ways.


74
00:02:32,596 --> 00:02:34,896
First, a user can move focus


75
00:02:34,896 --> 00:02:36,176
geometrically, such as by


76
00:02:36,176 --> 00:02:38,466
swiping on the Siri remote or


77
00:02:38,466 --> 00:02:39,566
your app can trigger a


78
00:02:39,566 --> 00:02:41,176
programmatic focus update, such


79
00:02:41,176 --> 00:02:42,736
as by calling APIs like


80
00:02:42,786 --> 00:02:43,886
setNeedsFocusUpdate.


81
00:02:44,466 --> 00:02:48,376
When a focus update happens, we


82
00:02:48,376 --> 00:02:50,336
notify every focus environment


83
00:02:50,336 --> 00:02:51,976
that contains both the


84
00:02:52,016 --> 00:02:54,016
previously focused item and the


85
00:02:54,016 --> 00:02:54,936
next focused item.


86
00:02:55,366 --> 00:02:56,816
And this includes all common


87
00:02:56,816 --> 00:02:58,346
ancestor environments as well.


88
00:03:00,856 --> 00:03:02,116
We notify environments in


89
00:03:02,176 --> 00:03:04,516
ascending order starting with


90
00:03:04,516 --> 00:03:06,156
the two items that are directly


91
00:03:06,156 --> 00:03:07,066
involved in the update.


92
00:03:08,346 --> 00:03:09,566
Notifications are sent by


93
00:03:09,566 --> 00:03:11,166
calling the didUpdateFocus


94
00:03:11,166 --> 00:03:12,706
method, which is defined on the


95
00:03:12,706 --> 00:03:14,296
UIFocusEnvironment protocol.


96
00:03:14,856 --> 00:03:17,266
And this leads us straight into


97
00:03:17,266 --> 00:03:19,106
our first topic of today, which


98
00:03:19,106 --> 00:03:20,156
is that in tvOS 11 we're


99
00:03:20,156 --> 00:03:22,456
providing a few helpful new ways


100
00:03:22,456 --> 00:03:23,876
to get notified about focus


101
00:03:23,876 --> 00:03:24,306
updates.


102
00:03:24,886 --> 00:03:26,046
Let's jump back to that diagram.


103
00:03:27,066 --> 00:03:28,066
Like I was just saying, we


104
00:03:28,066 --> 00:03:29,736
notify your app using this


105
00:03:29,736 --> 00:03:31,776
didUpdateFocus method defined on


106
00:03:31,776 --> 00:03:32,996
UIFocusEnvironment.


107
00:03:34,386 --> 00:03:35,606
But sometimes there might be


108
00:03:35,606 --> 00:03:38,416
another object in your app not a


109
00:03:38,416 --> 00:03:40,016
focus environment that you don't


110
00:03:40,016 --> 00:03:41,236
want to be loosely coupled to


111
00:03:41,236 --> 00:03:42,456
the rest of your user interface


112
00:03:42,456 --> 00:03:42,816
code.


113
00:03:43,556 --> 00:03:45,226
So, for this case we're


114
00:03:45,226 --> 00:03:46,846
introducing a new foundation


115
00:03:46,846 --> 00:03:48,306
notification type called


116
00:03:48,306 --> 00:03:50,106
UIFocusDidUpdate.


117
00:03:51,476 --> 00:03:52,646
And you can observe this from


118
00:03:52,646 --> 00:03:53,886
anywhere in your app and it will


119
00:03:53,886 --> 00:03:55,426
get sent every time focus


120
00:03:55,426 --> 00:03:55,926
updates.


121
00:03:56,686 --> 00:03:58,166
This notification includes all


122
00:03:58,166 --> 00:03:59,426
the same information that you're


123
00:03:59,426 --> 00:04:00,456
used to getting for a normal


124
00:04:00,456 --> 00:04:02,236
focus update, including a


125
00:04:02,266 --> 00:04:04,036
context that describes the


126
00:04:04,036 --> 00:04:06,166
update, as well as an animation


127
00:04:06,166 --> 00:04:07,496
coordinator for controlling


128
00:04:07,496 --> 00:04:08,266
visual feedback.


129
00:04:09,036 --> 00:04:11,596
You can access both of these


130
00:04:11,596 --> 00:04:13,906
objects using two new user info


131
00:04:13,906 --> 00:04:15,076
keys that we're providing.


132
00:04:15,596 --> 00:04:17,526
The UIFocusUpdateContext key and


133
00:04:17,755 --> 00:04:19,146
the UIFocusUpdate


134
00:04:19,146 --> 00:04:21,276
AnimiationCoordinator key.


135
00:04:23,156 --> 00:04:25,856
We're also introducing another


136
00:04:25,856 --> 00:04:27,546
key notification type related to


137
00:04:27,546 --> 00:04:29,686
focus updates and that's called


138
00:04:29,686 --> 00:04:32,686
UIFocusMovementDidFail and this


139
00:04:32,686 --> 00:04:34,086
notification is sent whenever


140
00:04:34,086 --> 00:04:36,626
the user tries, but fails to


141
00:04:36,626 --> 00:04:37,826
move focus in a certain


142
00:04:37,826 --> 00:04:38,276
direction.


143
00:04:38,916 --> 00:04:40,676
This will only be sent when the


144
00:04:40,676 --> 00:04:42,786
user is trying to move focus not


145
00:04:42,786 --> 00:04:44,806
when your app fails to perform


146
00:04:44,806 --> 00:04:46,036
some kind of programmatic focus


147
00:04:46,036 --> 00:04:46,386
update.


148
00:04:46,886 --> 00:04:48,086
And this is really useful for


149
00:04:48,086 --> 00:04:49,336
cases where you might want to


150
00:04:49,336 --> 00:04:50,706
provide some kind of feedback to


151
00:04:50,706 --> 00:04:53,306
the user when they try to move


152
00:04:53,306 --> 00:04:54,296
focus in a direction that


153
00:04:54,296 --> 00:04:55,076
they're not allowed to.


154
00:04:55,546 --> 00:04:57,086
Now a good example of this is on


155
00:04:57,086 --> 00:04:59,076
Apple TV where VoiceOver will


156
00:04:59,076 --> 00:05:02,136
provide a sound when a user


157
00:05:02,136 --> 00:05:03,486
tries to move focus in a


158
00:05:03,486 --> 00:05:04,176
direction that they're not


159
00:05:04,176 --> 00:05:04,746
allowed to.


160
00:05:04,846 --> 00:05:06,366
And this is a really helpful way


161
00:05:06,366 --> 00:05:08,136
to provide some extra auditory


162
00:05:08,136 --> 00:05:09,926
feedback to visually impaired


163
00:05:09,926 --> 00:05:11,736
users letting them know that


164
00:05:11,736 --> 00:05:13,066
their action was appropriately


165
00:05:13,066 --> 00:05:14,646
received, but that it didn't


166
00:05:14,646 --> 00:05:15,266
have any effect.


167
00:05:15,886 --> 00:05:18,976
So that's it for focus update


168
00:05:18,976 --> 00:05:19,756
notifications.


169
00:05:20,686 --> 00:05:22,826
We're also providing a few new


170
00:05:22,826 --> 00:05:24,496
helpful protocol extensions on


171
00:05:24,496 --> 00:05:26,086
the UIFocusEnvironment and


172
00:05:26,086 --> 00:05:28,346
UIFocusItem protocols to help


173
00:05:28,346 --> 00:05:29,696
you write more succinct and


174
00:05:29,696 --> 00:05:30,286
safer code.


175
00:05:32,826 --> 00:05:33,986
The first of these is a pretty


176
00:05:33,986 --> 00:05:35,206
easy one we're adding an


177
00:05:35,256 --> 00:05:37,426
isFocused property to the


178
00:05:37,426 --> 00:05:39,376
UIFocusItem protocol and this is


179
00:05:39,376 --> 00:05:41,226
just a simple way to check if


180
00:05:41,276 --> 00:05:42,666
any item is currently focused.


181
00:05:44,506 --> 00:05:45,866
We've exposed this property on


182
00:05:45,866 --> 00:05:48,366
UIView since tvOS 9, but now


183
00:05:48,366 --> 00:05:49,826
that we're exposing it on the


184
00:05:49,826 --> 00:05:51,376
protocol UIFocusItem item


185
00:05:51,376 --> 00:05:53,126
directly you can use this with


186
00:05:53,126 --> 00:05:54,416
any type of focus item and that


187
00:05:54,416 --> 00:05:56,316
includes SpriteKit nodes.


188
00:05:57,316 --> 00:06:00,576
We've also added a new contains


189
00:06:00,576 --> 00:06:02,506
method to the UIFocusEnvironment


190
00:06:02,506 --> 00:06:02,946
protocol.


191
00:06:03,846 --> 00:06:05,146
This method allows you to easily


192
00:06:05,146 --> 00:06:07,156
check if one focus environment


193
00:06:07,246 --> 00:06:08,516
contains another focus


194
00:06:08,516 --> 00:06:10,356
environment, but without having


195
00:06:10,356 --> 00:06:12,456
to know the underlying types


196
00:06:12,526 --> 00:06:14,896
involved in the check.


197
00:06:16,146 --> 00:06:17,026
Let's look at an example of


198
00:06:17,026 --> 00:06:17,256
this.


199
00:06:18,326 --> 00:06:19,996
Suppose we want to check if an


200
00:06:19,996 --> 00:06:21,326
item that just got focused is


201
00:06:21,326 --> 00:06:22,906
contained by our current view


202
00:06:22,906 --> 00:06:23,366
controller.


203
00:06:24,426 --> 00:06:26,376
We can accomplish this by simply


204
00:06:26,376 --> 00:06:27,776
calling the contains method on


205
00:06:27,776 --> 00:06:29,556
the view controller itself and


206
00:06:29,556 --> 00:06:30,906
passing in the next focus item


207
00:06:30,906 --> 00:06:31,376
directly.


208
00:06:32,306 --> 00:06:33,836
This will work if that item is a


209
00:06:33,836 --> 00:06:34,956
view, it'll work if it's a


210
00:06:34,956 --> 00:06:36,206
SpriteKit node, it doesn't


211
00:06:36,206 --> 00:06:37,066
matter what the types are


212
00:06:37,066 --> 00:06:38,656
involved, you can just call


213
00:06:38,656 --> 00:06:40,626
contains and it'll just work.


214
00:06:41,496 --> 00:06:42,886
And so, this will hopefully cut


215
00:06:42,886 --> 00:06:43,796
down on the amount of


216
00:06:43,796 --> 00:06:44,756
typecasting that you have to


217
00:06:44,756 --> 00:06:45,726
perform in your code.


218
00:06:46,726 --> 00:06:48,986
So that's it for new protocol


219
00:06:48,986 --> 00:06:49,506
extensions.


220
00:06:50,956 --> 00:06:51,946
For our next enhancements, I'd


221
00:06:51,946 --> 00:06:53,286
like to invite up my colleague


222
00:06:53,286 --> 00:06:55,146
Jon to talk to you about some


223
00:06:55,146 --> 00:06:56,676
new APIs for focus animations.


224
00:06:57,146 --> 00:07:01,086
>> Good morning, last year we


225
00:07:01,086 --> 00:07:02,886
showed you the coordination API


226
00:07:02,886 --> 00:07:04,616
that you can use to keep your


227
00:07:04,616 --> 00:07:06,146
animations in sync with the


228
00:07:06,146 --> 00:07:07,936
system animations during a focus


229
00:07:07,936 --> 00:07:08,346
update.


230
00:07:09,206 --> 00:07:10,576
And this is done by using the


231
00:07:10,576 --> 00:07:13,126
UIFocusAnimationCoordinator that


232
00:07:13,126 --> 00:07:15,146
is provided whenever a focus


233
00:07:15,146 --> 00:07:16,076
update occurs.


234
00:07:17,616 --> 00:07:18,886
Today, I'd like to talk to you


235
00:07:18,886 --> 00:07:19,766
about some enhancements that


236
00:07:19,766 --> 00:07:22,366
we've made to this API in tvOS


237
00:07:22,366 --> 00:07:22,856
11.


238
00:07:23,616 --> 00:07:25,706
But before I get started let's


239
00:07:25,706 --> 00:07:27,316
take a more in-depth look at how


240
00:07:27,316 --> 00:07:28,476
animations work today.


241
00:07:30,216 --> 00:07:32,176
Focus animations are a really


242
00:07:32,176 --> 00:07:33,826
important part of the tvOS user


243
00:07:33,886 --> 00:07:34,676
experience.


244
00:07:35,046 --> 00:07:36,536
Not only do they show your users


245
00:07:36,536 --> 00:07:38,356
where focus has moved they help


246
00:07:38,356 --> 00:07:39,686
them feel more connected with


247
00:07:39,686 --> 00:07:40,366
your content.


248
00:07:40,736 --> 00:07:43,206
But as with most things, timing


249
00:07:43,206 --> 00:07:43,956
is essential.


250
00:07:43,956 --> 00:07:46,146
If the animations are too fast


251
00:07:46,536 --> 00:07:47,926
it creates a jarring effect for


252
00:07:47,926 --> 00:07:48,596
your users.


253
00:07:48,886 --> 00:07:50,456
And if they're too slow well


254
00:07:50,456 --> 00:07:51,246
they're getting in the way.


255
00:07:52,246 --> 00:07:53,986
So, UIKit has a lot of work put


256
00:07:53,986 --> 00:07:55,326
into it to manage these


257
00:07:55,326 --> 00:07:56,576
animations and their timing.


258
00:07:57,116 --> 00:07:59,646
We do a lot of manipulations,


259
00:07:59,926 --> 00:08:02,516
such as duration changes, to


260
00:08:02,516 --> 00:08:03,786
keep the animations feeling


261
00:08:03,786 --> 00:08:04,216
fluid.


262
00:08:05,126 --> 00:08:06,576
Quicker movements through


263
00:08:06,576 --> 00:08:08,156
multiple focus items will result


264
00:08:08,156 --> 00:08:09,386
in quicker animations.


265
00:08:09,666 --> 00:08:11,196
And when we move slowly from one


266
00:08:11,196 --> 00:08:13,056
item to the next we slow down


267
00:08:13,056 --> 00:08:14,346
the animations to match.


268
00:08:15,356 --> 00:08:16,966
When a user moves focus to an


269
00:08:16,966 --> 00:08:19,156
item offscreen we make sure to


270
00:08:19,156 --> 00:08:21,356
add an appropriate delay until


271
00:08:21,356 --> 00:08:22,556
that item is fully visible


272
00:08:22,636 --> 00:08:24,016
before we perform the focusing


273
00:08:24,016 --> 00:08:24,686
animations.


274
00:08:28,636 --> 00:08:30,116
And you might have noticed that


275
00:08:30,116 --> 00:08:31,636
focusing animations and


276
00:08:31,636 --> 00:08:33,426
unfocusing animations have a


277
00:08:33,426 --> 00:08:34,655
different set of timing.


278
00:08:36,376 --> 00:08:37,756
This is because focusing


279
00:08:37,756 --> 00:08:39,006
animations should be prominent


280
00:08:39,006 --> 00:08:40,206
and they should grab the user's


281
00:08:40,206 --> 00:08:42,106
attention, whereas unfocusing


282
00:08:42,106 --> 00:08:43,676
animations should be subtler and


283
00:08:43,756 --> 00:08:44,786
more in the background.


284
00:08:45,636 --> 00:08:47,616
So, you can see here as focus


285
00:08:47,616 --> 00:08:49,746
moves between these items, the


286
00:08:49,746 --> 00:08:52,206
item becoming focused pops up


287
00:08:52,206 --> 00:08:54,006
very quickly and the item


288
00:08:54,436 --> 00:08:56,636
becoming unfocused slowly moves


289
00:08:56,636 --> 00:08:57,276
into the background.


290
00:08:57,276 --> 00:08:58,326
In fact, it leaves a trail


291
00:08:58,326 --> 00:09:00,286
behind it as focus has moved


292
00:09:00,286 --> 00:09:03,106
from it to the next item.


293
00:09:03,296 --> 00:09:04,056
So, when you call


294
00:09:04,056 --> 00:09:06,506
addCoordinatedAnimations to


295
00:09:06,506 --> 00:09:08,706
synchronize your animations we


296
00:09:08,706 --> 00:09:10,716
automatically determine whether


297
00:09:10,716 --> 00:09:12,376
these are focusing or unfocusing


298
00:09:12,376 --> 00:09:14,976
animations based on the focus


299
00:09:14,976 --> 00:09:15,936
environment hierarchy.


300
00:09:16,216 --> 00:09:17,806
So, here's the same diagram Matt


301
00:09:17,806 --> 00:09:19,836
showed earlier for the


302
00:09:19,836 --> 00:09:21,676
didUpdateFocus notifications.


303
00:09:22,556 --> 00:09:24,006
Whenever you call


304
00:09:24,536 --> 00:09:27,236
addCoordinatedAnimations from


305
00:09:27,236 --> 00:09:28,616
either the previously focused


306
00:09:28,616 --> 00:09:30,346
item or any of its direct


307
00:09:30,346 --> 00:09:32,616
ancestors up to but not


308
00:09:32,616 --> 00:09:33,976
including the common parent


309
00:09:33,976 --> 00:09:36,086
environment we consider these


310
00:09:36,276 --> 00:09:38,016
unfocusing animations and we


311
00:09:38,016 --> 00:09:39,316
coordinate them as such.


312
00:09:40,676 --> 00:09:43,226
Conversely, if your animations


313
00:09:43,226 --> 00:09:45,356
are added from either the next


314
00:09:45,356 --> 00:09:47,256
focused item or any of its


315
00:09:47,256 --> 00:09:48,956
direct ancestors we consider


316
00:09:48,956 --> 00:09:50,696
these focusing animations and so


317
00:09:50,696 --> 00:09:51,956
they get that more prominent


318
00:09:51,956 --> 00:09:52,376
timing.


319
00:09:52,906 --> 00:09:55,386
And this works really well.


320
00:09:56,736 --> 00:09:58,536
But in tvOS 11 we're now


321
00:09:58,536 --> 00:10:00,826
allowing you to specifically


322
00:10:00,826 --> 00:10:03,186
target either the focusing or


323
00:10:03,186 --> 00:10:03,976
unfocusing animations.


324
00:10:04,046 --> 00:10:06,756
And we're doing this by adding


325
00:10:06,756 --> 00:10:08,346
two new methods to the UIFocus


326
00:10:08,346 --> 00:10:09,356
AnimationCoordinator,


327
00:10:09,956 --> 00:10:10,826
addCoordinated


328
00:10:10,826 --> 00:10:12,446
FocusingAnimations and


329
00:10:12,446 --> 00:10:13,236
addCoordinated


330
00:10:13,236 --> 00:10:14,526
UnfocusingAnimations.


331
00:10:16,716 --> 00:10:18,176
So, addCoordinated


332
00:10:18,176 --> 00:10:19,836
FocusingAnimations will function


333
00:10:19,836 --> 00:10:21,966
exactly the same as if you call


334
00:10:21,966 --> 00:10:23,916
addCoordinatedAnimations from


335
00:10:23,916 --> 00:10:25,856
within the next focused item or


336
00:10:25,856 --> 00:10:27,446
any of its direct ancestors.


337
00:10:27,886 --> 00:10:28,826
And addCoordinated


338
00:10:28,826 --> 00:10:30,936
UnfocusingAnimations will


339
00:10:30,936 --> 00:10:31,796
function the same as


340
00:10:31,796 --> 00:10:33,516
addCoordinatedAnimations from


341
00:10:33,516 --> 00:10:35,326
within the previous focused item


342
00:10:35,326 --> 00:10:36,446
or its ancestors.


343
00:10:36,596 --> 00:10:38,906
And so, the best way to show you


344
00:10:38,906 --> 00:10:40,406
how this works is with a demo.


345
00:10:42,616 --> 00:10:43,976
So, let's dive right in.


346
00:10:50,056 --> 00:10:50,826
All right, so I'm working a very


347
00:10:50,826 --> 00:10:52,416
simple timeline application that


348
00:10:52,416 --> 00:10:53,906
shows some entries from past


349
00:10:53,946 --> 00:10:55,036
dubdub events and their


350
00:10:55,036 --> 00:10:55,706
keynotes.


351
00:10:56,506 --> 00:10:58,416
And each entry is represented by


352
00:10:58,416 --> 00:10:59,976
this cell that has a number in


353
00:10:59,976 --> 00:11:03,126
it and as we move focus the


354
00:11:03,126 --> 00:11:05,136
corresponding image above moves


355
00:11:05,136 --> 00:11:06,236
down to give a little bit of


356
00:11:06,236 --> 00:11:06,756
emphasis.


357
00:11:07,136 --> 00:11:11,016
As I move through these you


358
00:11:11,016 --> 00:11:12,416
might notice that it feels a


359
00:11:12,416 --> 00:11:15,146
little bit choppy as we move


360
00:11:15,146 --> 00:11:15,606
quickly.


361
00:11:15,926 --> 00:11:17,726
Well let's hop over and take a


362
00:11:17,726 --> 00:11:20,506
look at the code.


363
00:11:20,506 --> 00:11:22,946
And you'll see that everything


364
00:11:22,946 --> 00:11:24,386
is done within the


365
00:11:24,386 --> 00:11:26,296
addCoordinatedAnimations block.


366
00:11:26,646 --> 00:11:29,286
And this is a great use for our


367
00:11:29,286 --> 00:11:33,146
new API, what we have here is


368
00:11:33,246 --> 00:11:35,326
the focusing view and I've


369
00:11:36,496 --> 00:11:38,026
gotten a reference to this by


370
00:11:38,026 --> 00:11:40,336
using the nextFocusedIndexPath


371
00:11:40,606 --> 00:11:41,886
to grab the supplementary view


372
00:11:41,886 --> 00:11:43,336
it corresponds with and I'm


373
00:11:43,336 --> 00:11:45,266
simply doing a transform of 100


374
00:11:45,266 --> 00:11:46,876
points down.


375
00:11:46,956 --> 00:11:48,456
And then similarly for the


376
00:11:48,456 --> 00:11:50,166
unfocusing view the image that's


377
00:11:50,166 --> 00:11:52,246
going back up I get it by using


378
00:11:52,246 --> 00:11:53,796
the previouslyFocusedIndexPath


379
00:11:54,146 --> 00:11:55,426
and then transforming to the


380
00:11:55,426 --> 00:11:55,946
identity.


381
00:11:57,436 --> 00:12:00,706
So instead of using the single


382
00:12:01,076 --> 00:12:02,676
addCoordinatedAnimations call


383
00:12:03,036 --> 00:12:05,546
which in fact makes everything


384
00:12:05,676 --> 00:12:06,676
coordinate alongside the


385
00:12:06,676 --> 00:12:08,466
focusing animations, we can now


386
00:12:08,466 --> 00:12:14,156
split this up into two explicit


387
00:12:14,156 --> 00:12:17,066
calls, one for the focusing


388
00:12:17,066 --> 00:12:20,726
animations for the focusing view


389
00:12:21,256 --> 00:12:23,236
and then one for the unfocusing


390
00:12:23,236 --> 00:12:24,696
animations for the unfocusing


391
00:12:24,696 --> 00:12:24,926
view.


392
00:12:25,286 --> 00:12:27,786
So, now let's rerun this and


393
00:12:28,876 --> 00:12:29,776
take a look.


394
00:12:36,096 --> 00:12:37,316
Now as we move from one item to


395
00:12:37,316 --> 00:12:38,106
the next you can see that the


396
00:12:38,106 --> 00:12:41,346
same trail as focus moves in the


397
00:12:41,346 --> 00:12:43,936
cells itself exists in the image


398
00:12:43,936 --> 00:12:44,976
views themselves and this


399
00:12:44,976 --> 00:12:46,546
creates a much nicer user


400
00:12:46,546 --> 00:12:48,476
experience for your application.


401
00:12:48,476 --> 00:12:51,806
All right, so now let's hope


402
00:12:51,806 --> 00:12:53,216
back over to the slides.


403
00:12:53,496 --> 00:12:54,626
And there's one other thing I'd


404
00:12:54,626 --> 00:12:55,996
like to talk about regarding


405
00:12:55,996 --> 00:12:56,716
animations.


406
00:12:57,556 --> 00:12:58,516
In addition to the two new


407
00:12:58,516 --> 00:13:00,136
methods we're also providing an


408
00:13:00,136 --> 00:13:01,016
instance of the


409
00:13:01,016 --> 00:13:03,316
UIFocusAnimationContext and this


410
00:13:03,316 --> 00:13:05,366
is a new object in tvOS 11 that


411
00:13:05,366 --> 00:13:07,036
gives you some additional timing


412
00:13:07,036 --> 00:13:08,626
information about the animations


413
00:13:08,626 --> 00:13:12,086
occurring which should make


414
00:13:12,086 --> 00:13:13,696
advance animations even easier.


415
00:13:14,096 --> 00:13:15,806
So, let's say we'd like to run


416
00:13:15,806 --> 00:13:17,216
an animation during the second


417
00:13:17,216 --> 00:13:18,956
half of the system focusing


418
00:13:18,956 --> 00:13:19,596
animations.


419
00:13:20,616 --> 00:13:21,816
Well this is very easy to do,


420
00:13:22,326 --> 00:13:23,406
all we need to do is grab the


421
00:13:23,406 --> 00:13:25,546
duration off of the animation


422
00:13:25,546 --> 00:13:27,936
context, divide it by two, and


423
00:13:27,966 --> 00:13:29,726
then pass these values into the


424
00:13:29,726 --> 00:13:31,836
standard UIView animate method


425
00:13:32,916 --> 00:13:33,716
and we're done.


426
00:13:34,336 --> 00:13:36,016
One important point to mention


427
00:13:36,016 --> 00:13:37,896
is the overrideInheritedDuration


428
00:13:37,896 --> 00:13:39,126
option that needs to get passed


429
00:13:39,126 --> 00:13:40,876
in because without this the


430
00:13:40,876 --> 00:13:42,766
nested view based animations are


431
00:13:42,766 --> 00:13:44,286
going to ignore the duration


432
00:13:44,286 --> 00:13:45,636
that you gave and instead use


433
00:13:45,636 --> 00:13:46,476
the outer duration.


434
00:13:47,526 --> 00:13:49,166
But this doesn't just make you


435
00:13:49,426 --> 00:13:51,406
UIVIewAnimation easier it also


436
00:13:51,406 --> 00:13:53,216
provides better non-UIKit


437
00:13:53,216 --> 00:13:53,586
support.


438
00:13:53,926 --> 00:13:55,256
So, if you're using SpriteKit


439
00:13:55,256 --> 00:13:56,446
which is fully supported by the


440
00:13:56,446 --> 00:13:58,366
focus system it allows you to


441
00:13:58,366 --> 00:14:00,136
create a more consistent feel


442
00:14:00,476 --> 00:14:02,166
for your animations using SK


443
00:14:02,166 --> 00:14:03,196
actions for example.


444
00:14:04,486 --> 00:14:07,416
This is an example of using SK


445
00:14:07,416 --> 00:14:09,236
actions to fade the opacity to


446
00:14:09,236 --> 00:14:11,926
50% using the exact same timing


447
00:14:12,346 --> 00:14:14,396
that the system UIKit focusing


448
00:14:14,396 --> 00:14:15,186
animations would.


449
00:14:15,696 --> 00:14:18,826
All right, so the existing API


450
00:14:19,136 --> 00:14:20,096
works really well.


451
00:14:21,256 --> 00:14:23,926
And if you don't have a need to


452
00:14:23,926 --> 00:14:25,246
explicitly target either


453
00:14:25,246 --> 00:14:27,186
focusing or unfocusing continue


454
00:14:27,186 --> 00:14:29,016
using the existing API because


455
00:14:29,016 --> 00:14:30,266
it does the right thing for you.


456
00:14:31,206 --> 00:14:33,156
However, if you need to target


457
00:14:33,156 --> 00:14:34,786
your animations to focusing or


458
00:14:34,786 --> 00:14:36,866
unfocusing regardless of their


459
00:14:36,866 --> 00:14:38,286
association with the focus


460
00:14:38,286 --> 00:14:40,146
environment hierarchy use the


461
00:14:40,146 --> 00:14:41,446
new APIs and you'll be able to


462
00:14:41,446 --> 00:14:42,486
do that to great effect.


463
00:14:43,096 --> 00:14:45,696
And lastly, the focus animation


464
00:14:45,696 --> 00:14:47,176
context is provided for some


465
00:14:47,176 --> 00:14:48,526
additional timing information


466
00:14:48,816 --> 00:14:49,586
which should make advanced


467
00:14:49,586 --> 00:14:50,736
animations even easier.


468
00:14:51,176 --> 00:14:54,006
So, next I'd like to talk about


469
00:14:54,006 --> 00:14:55,046
focus sounds.


470
00:14:56,086 --> 00:14:57,476
Where animations give a visual


471
00:14:57,476 --> 00:14:58,806
representation of the focus


472
00:14:58,806 --> 00:15:01,016
update focus sounds provide an


473
00:15:01,016 --> 00:15:02,796
auditory queue to the user that


474
00:15:02,796 --> 00:15:03,686
focus has moved.


475
00:15:04,196 --> 00:15:08,396
And just like animations there's


476
00:15:08,396 --> 00:15:10,386
some subtlety to sound playback


477
00:15:10,496 --> 00:15:11,516
to create the best user


478
00:15:11,516 --> 00:15:12,606
experience possible.


479
00:15:14,056 --> 00:15:15,606
UIKit performs a number of


480
00:15:15,606 --> 00:15:18,136
volume and panning modifications


481
00:15:18,136 --> 00:15:19,466
to every sound that's played.


482
00:15:20,426 --> 00:15:22,016
So, faster focus movements


483
00:15:22,266 --> 00:15:25,936
result in a quieter sound and


484
00:15:25,936 --> 00:15:27,706
slower focus movements result in


485
00:15:27,706 --> 00:15:29,956
a louder sound, which nicely


486
00:15:29,956 --> 00:15:31,256
complements the same duration


487
00:15:31,256 --> 00:15:32,436
modifications we make to


488
00:15:32,436 --> 00:15:33,186
animations.


489
00:15:34,146 --> 00:15:36,876
We also use the location of the


490
00:15:36,876 --> 00:15:39,606
focusing item onscreen to pan


491
00:15:39,606 --> 00:15:41,176
the volume either stereo left or


492
00:15:41,176 --> 00:15:41,966
stereo right.


493
00:15:42,276 --> 00:15:43,826
So, if you swipe right across


494
00:15:43,826 --> 00:15:46,036
the screen you'll notice sound


495
00:15:46,036 --> 00:15:47,446
starts to pan to the right and


496
00:15:47,446 --> 00:15:49,336
as you swipe back left you'll


497
00:15:49,336 --> 00:15:51,036
notice sound pans to the left


498
00:15:51,036 --> 00:15:52,356
bouncing out when focus is


499
00:15:52,356 --> 00:15:53,376
centered horizontally.


500
00:15:54,536 --> 00:15:55,996
Again, this helps create a much


501
00:15:55,996 --> 00:15:57,796
more immersive user experience.


502
00:15:58,306 --> 00:16:03,396
But a lot of requested that we


503
00:16:03,396 --> 00:16:04,816
allow you to provide custom


504
00:16:04,816 --> 00:16:06,286
focus sounds or to opt out of


505
00:16:06,286 --> 00:16:08,316
the UIKit sounds and started in


506
00:16:08,316 --> 00:16:10,166
tvOS 11 I'm happy to announce


507
00:16:10,166 --> 00:16:11,096
that we're allowing you to do


508
00:16:11,096 --> 00:16:11,516
both.


509
00:16:12,566 --> 00:16:14,506
So, to play custom sounds you


510
00:16:15,076 --> 00:16:16,746
simply need to register your


511
00:16:16,746 --> 00:16:18,706
sound with an identifier and


512
00:16:19,716 --> 00:16:21,716
then provide that identifier


513
00:16:21,716 --> 00:16:23,326
during a focus update that will


514
00:16:23,326 --> 00:16:24,306
play a focus sound.


515
00:16:24,566 --> 00:16:26,356
This is only a user initiated


516
00:16:26,356 --> 00:16:27,126
focus movement.


517
00:16:27,636 --> 00:16:29,706
And then once we have that


518
00:16:29,706 --> 00:16:31,606
identifier we'll play the sound


519
00:16:31,606 --> 00:16:33,166
it's associated with.


520
00:16:35,556 --> 00:16:39,126
To register sounds you'll use a


521
00:16:39,126 --> 00:16:40,606
class method register


522
00:16:40,606 --> 00:16:42,256
soundFileURL for sound


523
00:16:42,256 --> 00:16:44,106
identifier which is exposed on


524
00:16:44,106 --> 00:16:46,026
the new UIFocusSystem, a new


525
00:16:46,026 --> 00:16:47,466
object in tvOS 11.


526
00:16:48,016 --> 00:16:52,116
The sound registration is a


527
00:16:52,116 --> 00:16:54,016
global action, meaning that once


528
00:16:54,016 --> 00:16:55,716
you do it that custom sound is


529
00:16:55,716 --> 00:16:57,056
available throughout your entire


530
00:16:57,056 --> 00:16:57,676
application.


531
00:16:58,066 --> 00:17:00,926
Because of this, you should only


532
00:17:00,926 --> 00:17:03,806
register a sound for a single


533
00:17:03,806 --> 00:17:04,406
identifier.


534
00:17:05,056 --> 00:17:06,536
In fact, reregistering with the


535
00:17:06,646 --> 00:17:08,086
same sound identifier is an


536
00:17:08,086 --> 00:17:08,455
error.


537
00:17:09,665 --> 00:17:11,026
But it's perfectly acceptable


538
00:17:11,076 --> 00:17:12,695
and reasonable to have multiple


539
00:17:12,695 --> 00:17:14,215
sounds in your application, just


540
00:17:14,215 --> 00:17:15,685
give each one of them a unique


541
00:17:15,685 --> 00:17:16,256
identifier.


542
00:17:16,675 --> 00:17:20,316
Because it's global you also


543
00:17:20,316 --> 00:17:21,576
want to register early.


544
00:17:22,616 --> 00:17:24,215
There's a nontrivial performance


545
00:17:24,215 --> 00:17:25,616
cost to setting up your custom


546
00:17:25,616 --> 00:17:27,386
sounds for playback and we want


547
00:17:27,386 --> 00:17:28,326
to make sure there's as much


548
00:17:28,326 --> 00:17:30,216
time between registration and


549
00:17:30,216 --> 00:17:31,756
user focus movement so that


550
00:17:31,756 --> 00:17:33,216
sounds can play seamlessly.


551
00:17:34,096 --> 00:17:35,796
The registration method accepts


552
00:17:35,936 --> 00:17:38,146
all standard iOS file formats


553
00:17:38,366 --> 00:17:39,636
that are locally stored on your


554
00:17:39,636 --> 00:17:40,176
device.


555
00:17:40,726 --> 00:17:43,546
So, when you actually need to


556
00:17:43,546 --> 00:17:45,816
play the sound you'll use the


557
00:17:45,816 --> 00:17:47,146
new optional method on the


558
00:17:47,146 --> 00:17:49,056
UIFocusEnvironment protocol.


559
00:17:49,996 --> 00:17:51,266
So, we call this method


560
00:17:51,616 --> 00:17:52,376
soundIdentifier


561
00:17:52,376 --> 00:17:53,406
ForFocusUpdate.


562
00:17:53,776 --> 00:17:57,126
In the same ascending order that


563
00:17:57,876 --> 00:17:59,676
the didUpdateFocus notifications


564
00:17:59,676 --> 00:18:00,166
are delivered.


565
00:18:01,246 --> 00:18:02,616
And we start by calling this


566
00:18:02,616 --> 00:18:04,806
method on the next focused item.


567
00:18:05,136 --> 00:18:07,856
If the next focused item gives


568
00:18:08,016 --> 00:18:09,766
us a no focus sound identifier


569
00:18:10,276 --> 00:18:11,686
we use that to control sound


570
00:18:11,686 --> 00:18:13,126
playback for this focus update


571
00:18:13,126 --> 00:18:13,856
and then we're done.


572
00:18:14,836 --> 00:18:16,366
However, if we don't get a sound


573
00:18:16,366 --> 00:18:17,696
identifier back from the next


574
00:18:17,696 --> 00:18:19,626
focus item we look to its parent


575
00:18:20,456 --> 00:18:21,646
and we try again.


576
00:18:22,646 --> 00:18:24,046
Now if the parent doesn't return


577
00:18:24,046 --> 00:18:25,586
anything we repeat this process


578
00:18:25,586 --> 00:18:27,076
and we go up to its parent and


579
00:18:27,076 --> 00:18:28,376
we repeat this over and over


580
00:18:28,376 --> 00:18:29,806
until we get to the root focus


581
00:18:29,806 --> 00:18:31,826
environment which if none of


582
00:18:31,826 --> 00:18:33,136
your focus environments have


583
00:18:33,176 --> 00:18:34,926
chosen to provide a custom sound


584
00:18:35,966 --> 00:18:37,226
then we simply use the default


585
00:18:37,226 --> 00:18:38,606
that UIKit would use on its own.


586
00:18:39,416 --> 00:18:40,116
So, there are a number of


587
00:18:40,116 --> 00:18:41,546
options for what values you


588
00:18:41,546 --> 00:18:42,946
might return from sound


589
00:18:42,946 --> 00:18:44,356
identifier for focus update.


590
00:18:44,886 --> 00:18:47,246
Of course, you're able to return


591
00:18:47,246 --> 00:18:48,476
any of the sounds that you had


592
00:18:48,476 --> 00:18:50,326
previously registered and doing


593
00:18:50,326 --> 00:18:52,996
so will play the sound that that


594
00:18:52,996 --> 00:18:55,316
identifier was registered with.


595
00:18:55,516 --> 00:18:57,096
UIKit also provides two sound


596
00:18:57,096 --> 00:18:59,556
identifiers, default and none.


597
00:19:00,146 --> 00:19:02,446
By providing the default sound


598
00:19:02,446 --> 00:19:04,426
identifier it explicitly signals


599
00:19:04,426 --> 00:19:06,006
to UIKit that you want to force


600
00:19:06,006 --> 00:19:07,766
the default sound that UIKit


601
00:19:07,766 --> 00:19:09,246
would play on its own to be


602
00:19:09,246 --> 00:19:10,736
played for this focus update.


603
00:19:10,986 --> 00:19:13,006
Now keep in mind if none of your


604
00:19:13,006 --> 00:19:14,546
environments wish to control


605
00:19:14,546 --> 00:19:16,606
sound for this update then this


606
00:19:16,606 --> 00:19:18,366
is value we'll use anyway.


607
00:19:18,366 --> 00:19:19,796
So, it's probably rare you'll


608
00:19:19,796 --> 00:19:21,216
need to use, this provide this


609
00:19:21,216 --> 00:19:23,696
for the cases that you do.


610
00:19:23,866 --> 00:19:25,656
And last, the non-identifier can


611
00:19:25,656 --> 00:19:27,376
be used to entirely opt out of


612
00:19:27,436 --> 00:19:29,136
focus sounds for this focus


613
00:19:29,136 --> 00:19:29,496
update.


614
00:19:33,256 --> 00:19:34,716
You're able to very easily


615
00:19:34,716 --> 00:19:37,096
conditionally modify which sound


616
00:19:37,096 --> 00:19:38,986
is played and using the same


617
00:19:38,986 --> 00:19:40,686
contains protocol extension that


618
00:19:40,686 --> 00:19:42,756
Matt showed earlier we're able


619
00:19:42,756 --> 00:19:46,006
to determine when focus moves


620
00:19:46,006 --> 00:19:47,396
through a particular environment


621
00:19:47,396 --> 00:19:49,046
and when it does modify the


622
00:19:49,046 --> 00:19:50,836
sound, otherwise deferred to


623
00:19:50,836 --> 00:19:51,116
pair it.


624
00:19:51,116 --> 00:19:53,906
So, I here I have a particular


625
00:19:53,906 --> 00:19:54,956
environment, I'll call it sound


626
00:19:54,956 --> 00:19:56,536
enabled environment where when


627
00:19:56,536 --> 00:19:57,826
focus moves through this


628
00:19:57,826 --> 00:19:59,146
environment I want to play a


629
00:19:59,236 --> 00:20:01,466
sound that I registered with my


630
00:20:01,466 --> 00:20:02,616
custom sound identifier.


631
00:20:03,626 --> 00:20:04,856
Again, it's very easy to do,


632
00:20:04,856 --> 00:20:07,336
take the next focused item and


633
00:20:07,336 --> 00:20:08,596
then just check whether or not


634
00:20:08,596 --> 00:20:09,866
that's contained within the


635
00:20:09,866 --> 00:20:10,896
sound enabled environment.


636
00:20:11,006 --> 00:20:14,966
So, a couple quick points on


637
00:20:14,966 --> 00:20:16,486
opting out of focus sounds.


638
00:20:17,756 --> 00:20:19,976
First, users expect a sound to


639
00:20:19,976 --> 00:20:21,866
be played when focus movement


640
00:20:21,866 --> 00:20:22,306
occurs.


641
00:20:22,626 --> 00:20:23,836
Like I mentioned before, this is


642
00:20:23,836 --> 00:20:25,136
an auditory queue to them that


643
00:20:25,136 --> 00:20:26,086
focus has moved.


644
00:20:26,876 --> 00:20:28,496
So, you should only be opting


645
00:20:28,496 --> 00:20:30,666
out of sounds if the user is


646
00:20:30,666 --> 00:20:31,916
explicitly expected to.


647
00:20:32,226 --> 00:20:33,646
A great example of this might be


648
00:20:33,646 --> 00:20:36,086
an in-game menu where the user


649
00:20:36,086 --> 00:20:37,816
can turn off sounds for your


650
00:20:37,816 --> 00:20:39,796
entire application.


651
00:20:41,636 --> 00:20:43,486
Also, if you were think about


652
00:20:43,486 --> 00:20:45,196
opting out of focus sounds and


653
00:20:45,196 --> 00:20:46,156
then playing your own when a


654
00:20:46,156 --> 00:20:48,276
focus update occurs, I highly


655
00:20:48,276 --> 00:20:49,636
encourage you to use our API


656
00:20:49,636 --> 00:20:51,966
instead because not only do you


657
00:20:51,966 --> 00:20:53,956
get the same volume and panning


658
00:20:53,956 --> 00:20:55,836
adjustments that we perform for


659
00:20:55,836 --> 00:20:57,736
our internal sounds which are


660
00:20:57,876 --> 00:20:59,606
probably very hard to replicate.


661
00:21:00,796 --> 00:21:02,206
We also respect the user's


662
00:21:02,206 --> 00:21:03,796
device settings for playing


663
00:21:03,796 --> 00:21:04,416
these sounds.


664
00:21:04,996 --> 00:21:06,396
So, Apple TV has a setting that


665
00:21:06,396 --> 00:21:07,206
allows you to turn off


666
00:21:07,206 --> 00:21:08,996
navigation sounds for the entire


667
00:21:08,996 --> 00:21:11,456
system and you don't want your


668
00:21:11,456 --> 00:21:13,086
application to be the only one


669
00:21:13,086 --> 00:21:14,636
playing sounds if the user says


670
00:21:14,636 --> 00:21:15,916
they don't want them.


671
00:21:18,436 --> 00:21:20,066
All right, so to recap.


672
00:21:20,386 --> 00:21:24,576
You should use good judgment


673
00:21:24,826 --> 00:21:26,536
when determining when and where


674
00:21:26,536 --> 00:21:28,386
and which sounds to play for


675
00:21:28,386 --> 00:21:30,156
focus update because your sound


676
00:21:30,156 --> 00:21:31,246
should enhance the user


677
00:21:31,246 --> 00:21:32,776
experience they should not


678
00:21:32,776 --> 00:21:34,086
detract from it.


679
00:21:34,676 --> 00:21:36,446
A great example of this might be


680
00:21:36,446 --> 00:21:37,926
differentiating between elements


681
00:21:37,926 --> 00:21:38,516
onscreen.


682
00:21:38,786 --> 00:21:40,716
We do this in UIKit based on the


683
00:21:40,716 --> 00:21:42,266
size of particular items.


684
00:21:42,656 --> 00:21:45,186
So, very large focus items have


685
00:21:45,186 --> 00:21:47,406
a larger, deeper sound and


686
00:21:47,406 --> 00:21:49,096
smaller items have a smaller,


687
00:21:49,096 --> 00:21:50,126
higher pitched sound.


688
00:21:51,046 --> 00:21:52,676
Again, this is all to enhance


689
00:21:52,676 --> 00:21:53,906
the user experience.


690
00:21:54,416 --> 00:21:56,896
All right and with that I'd like


691
00:21:56,896 --> 00:21:58,236
to turn things back over to Matt


692
00:21:58,756 --> 00:22:00,006
who will talk about support for


693
00:22:00,006 --> 00:22:00,566
SceneKit.


694
00:22:00,566 --> 00:22:00,816
Matt.


695
00:22:01,516 --> 00:22:05,606
[ Applause ]


696
00:22:06,106 --> 00:22:06,406
>> Thanks Jon.


697
00:22:07,896 --> 00:22:09,446
All right, I'm excited to


698
00:22:09,446 --> 00:22:11,526
announce that in tvOS 11 we're


699
00:22:11,526 --> 00:22:12,996
now extending focus system


700
00:22:12,996 --> 00:22:14,656
support into the SceneKit


701
00:22:14,846 --> 00:22:15,306
framework.


702
00:22:16,466 --> 00:22:17,256
So, how does this work?


703
00:22:17,946 --> 00:22:19,606
Well if you recall back to tvOS


704
00:22:19,606 --> 00:22:21,926
9 it used to be that UIView was


705
00:22:21,926 --> 00:22:24,476
the only type that was able to


706
00:22:24,576 --> 00:22:25,126
be focused.


707
00:22:27,026 --> 00:22:28,886
In tvOS 10 we introduced this


708
00:22:28,886 --> 00:22:31,456
new UI focused item protocol and


709
00:22:31,456 --> 00:22:33,146
we extended focus interaction


710
00:22:33,146 --> 00:22:34,986
support into SpriteKit by


711
00:22:34,986 --> 00:22:36,296
adopting this protocol on both


712
00:22:36,296 --> 00:22:38,036
UIView and SKNode.


713
00:22:39,126 --> 00:22:41,326
Well now in tvOS 11 we're adding


714
00:22:41,556 --> 00:22:44,336
SCNNode to the UIFocusItem


715
00:22:44,446 --> 00:22:44,856
family.


716
00:22:45,446 --> 00:22:47,746
So, how does this work?


717
00:22:48,676 --> 00:22:50,266
Just like SpriteKit you need to


718
00:22:50,266 --> 00:22:52,256
opt in in order to get focus


719
00:22:52,256 --> 00:22:53,986
support in your SceneKit apps.


720
00:22:54,466 --> 00:22:55,906
This means that nodes are not


721
00:22:55,906 --> 00:22:57,306
focusable by default.


722
00:22:57,776 --> 00:23:00,516
In order to make them focusable


723
00:23:00,516 --> 00:23:02,016
it couldn't be easier, all you


724
00:23:02,016 --> 00:23:03,636
have to do is set the new focus


725
00:23:03,676 --> 00:23:05,696
behavior property to focusable


726
00:23:05,696 --> 00:23:07,616
and that's it, it's that easy.


727
00:23:08,796 --> 00:23:10,186
FocusBehavior is a new property


728
00:23:10,186 --> 00:23:12,106
on SCNNode and we've also made


729
00:23:12,106 --> 00:23:13,526
this property available on


730
00:23:13,526 --> 00:23:15,206
SKNode so now it's even easier


731
00:23:15,206 --> 00:23:16,546
to make your SpriteKit nodes


732
00:23:16,546 --> 00:23:17,566
focusable as well.


733
00:23:18,236 --> 00:23:21,056
But I think it would be a lot


734
00:23:21,056 --> 00:23:22,396
more fun to just show you this


735
00:23:22,396 --> 00:23:22,976
in action with a quick demo.


736
00:23:27,066 --> 00:23:27,826
All right, I've been building a


737
00:23:27,826 --> 00:23:30,746
tic-tac-toe app for tvOS and I


738
00:23:30,746 --> 00:23:32,576
really wanted my app to just


739
00:23:32,666 --> 00:23:34,956
have an extra bit of pop and so


740
00:23:34,956 --> 00:23:36,186
I decided to implement it with


741
00:23:36,316 --> 00:23:36,776
SceneKit.


742
00:23:37,316 --> 00:23:38,286
And so, you can see my


743
00:23:38,376 --> 00:23:39,766
three-dimensional tic-tac-toe


744
00:23:39,766 --> 00:23:42,356
board with full perspective and


745
00:23:42,356 --> 00:23:43,616
I've already implement focus


746
00:23:43,616 --> 00:23:44,726
interaction support in my


747
00:23:44,726 --> 00:23:45,596
tic-tac-toe game.


748
00:23:46,056 --> 00:23:47,766
So, I can move focus around


749
00:23:47,766 --> 00:23:49,686
using any type of input device


750
00:23:49,866 --> 00:23:50,966
to each of the tiles on my


751
00:23:50,966 --> 00:23:51,286
board.


752
00:23:51,896 --> 00:23:54,176
And if I press Select I can drop


753
00:23:54,176 --> 00:23:56,986
an X or an O anywhere on the


754
00:23:56,986 --> 00:23:59,686
tile, on any tile.


755
00:23:59,906 --> 00:24:00,996
So, implementing this couldn't


756
00:24:00,996 --> 00:24:02,166
have been easier, in addition to


757
00:24:02,166 --> 00:24:03,626
just setting up my SceneKit


758
00:24:03,626 --> 00:24:05,876
scene all I had to do was mark


759
00:24:06,126 --> 00:24:08,266
each of the nodes that represent


760
00:24:08,266 --> 00:24:09,696
the tiles on the board as


761
00:24:09,696 --> 00:24:11,296
focusable using that one line


762
00:24:11,296 --> 00:24:13,086
code I showed earlier.


763
00:24:14,216 --> 00:24:15,636
And then provide custom


764
00:24:15,636 --> 00:24:17,376
animations using those same


765
00:24:17,376 --> 00:24:19,426
animation APIs that Jon was just


766
00:24:19,426 --> 00:24:20,536
talking about a moment ago.


767
00:24:21,446 --> 00:24:22,716
And that's really all that we


768
00:24:22,716 --> 00:24:23,306
had to do.


769
00:24:23,586 --> 00:24:25,076
Now we can fully interact with


770
00:24:25,076 --> 00:24:26,006
our SceneKit scene.


771
00:24:26,586 --> 00:24:27,426
And the focus engine


772
00:24:27,426 --> 00:24:29,616
automatically takes care of


773
00:24:29,616 --> 00:24:30,726
everything else for us.


774
00:24:31,096 --> 00:24:33,276
In fact, I added two UIKit


775
00:24:33,276 --> 00:24:35,116
buttons, UI buttons to the


776
00:24:35,116 --> 00:24:36,986
bottom of our SceneKit scene by


777
00:24:36,986 --> 00:24:38,616
just placing them on top of our


778
00:24:38,616 --> 00:24:40,326
SK view and the focus engine


779
00:24:40,326 --> 00:24:41,596
will automatically handle moving


780
00:24:41,596 --> 00:24:43,656
focus between our nodes and


781
00:24:43,876 --> 00:24:44,526
these buttons.


782
00:24:45,556 --> 00:24:46,906
And it'll do the correct thing


783
00:24:46,906 --> 00:24:48,136
no matter whether I'm on the


784
00:24:48,136 --> 00:24:49,836
left or right side of the board


785
00:24:50,096 --> 00:24:51,586
hitting the correct button based


786
00:24:51,586 --> 00:24:53,366
on what's geometrically closer


787
00:24:54,036 --> 00:24:54,776
to our nodes.


788
00:24:55,276 --> 00:24:58,616
And so, that's just a quick demo


789
00:24:58,616 --> 00:25:02,186
of SceneKit support for focus


790
00:25:02,186 --> 00:25:02,626
interaction.


791
00:25:05,516 --> 00:25:09,546
[ Applause ]


792
00:25:10,046 --> 00:25:11,176
There are just a few more things


793
00:25:11,176 --> 00:25:11,996
to keep in mind when


794
00:25:12,106 --> 00:25:13,356
implementing focus interaction


795
00:25:13,356 --> 00:25:14,846
support in your SceneKit apps


796
00:25:14,846 --> 00:25:15,346
and games.


797
00:25:16,776 --> 00:25:18,976
First, SceneKit obviously


798
00:25:19,036 --> 00:25:20,626
operates in three-dimensional


799
00:25:20,626 --> 00:25:23,106
space, but focus interaction


800
00:25:23,106 --> 00:25:24,516
operates in two-dimensional


801
00:25:24,516 --> 00:25:25,006
space.


802
00:25:25,386 --> 00:25:26,296
So how does this work?


803
00:25:27,216 --> 00:25:28,846
Well when a user tries to move


804
00:25:28,846 --> 00:25:30,406
focus in a certain direction


805
00:25:30,766 --> 00:25:31,936
we're going to look for the next


806
00:25:32,016 --> 00:25:35,016
focusable SceneKit node based on


807
00:25:35,016 --> 00:25:38,146
its area as it's drawn onto the


808
00:25:39,216 --> 00:25:39,386
screen.


809
00:25:39,806 --> 00:25:41,826
Second, now that we support


810
00:25:41,826 --> 00:25:43,496
focus interaction in SceneKit


811
00:25:43,966 --> 00:25:45,336
that means we're now also able


812
00:25:45,336 --> 00:25:46,946
to support your focusable


813
00:25:46,946 --> 00:25:48,576
SpriteKit scenes that are


814
00:25:48,576 --> 00:25:50,236
embedded within SceneKit scenes.


815
00:25:51,016 --> 00:25:52,196
And in fact, we automatically


816
00:25:52,196 --> 00:25:53,736
support moving focus between


817
00:25:53,736 --> 00:25:56,206
UIKit, SpriteKit and SceneKit


818
00:25:56,206 --> 00:25:58,116
objects with no extra work


819
00:25:58,116 --> 00:25:59,206
required on your part.


820
00:26:00,086 --> 00:26:01,676
So, you can build your user


821
00:26:01,676 --> 00:26:03,206
interface using whatever tools


822
00:26:03,206 --> 00:26:04,276
make the most sense for


823
00:26:04,276 --> 00:26:05,116
different areas of your


824
00:26:05,116 --> 00:26:06,486
application and focus


825
00:26:06,486 --> 00:26:07,666
interaction support will just


826
00:26:07,666 --> 00:26:08,546
work automatically.


827
00:26:08,746 --> 00:26:10,626
And then finally, all the focus


828
00:26:10,626 --> 00:26:12,346
APIs that we define in UIKit


829
00:26:12,346 --> 00:26:14,116
using the UIFocusItem and


830
00:26:14,116 --> 00:26:16,116
UIFocusEnvironment protocols


831
00:26:16,356 --> 00:26:18,376
also work for SpriteKit and


832
00:26:18,446 --> 00:26:18,806
SceneKit.


833
00:26:19,486 --> 00:26:20,926
And so, those custom sound and


834
00:26:20,926 --> 00:26:22,396
animation APIs like Jon was


835
00:26:22,396 --> 00:26:24,136
explaining earlier, those work


836
00:26:24,136 --> 00:26:26,266
for SceneKit as well and really


837
00:26:26,266 --> 00:26:27,206
helped to create a more


838
00:26:27,206 --> 00:26:28,416
immersive user experience.


839
00:26:29,856 --> 00:26:31,256
To learn more about working with


840
00:26:31,256 --> 00:26:32,856
both SceneKit and SpriteKit we


841
00:26:32,856 --> 00:26:34,146
encourage you to check out some


842
00:26:34,146 --> 00:26:36,226
of these related sessions that


843
00:26:36,226 --> 00:26:39,396
we're putting on this week.


844
00:26:40,026 --> 00:26:42,126
Now for our grand finale today


845
00:26:42,846 --> 00:26:44,006
I'd like to talk about something


846
00:26:44,006 --> 00:26:45,386
that definitely affects all of


847
00:26:45,386 --> 00:26:46,356
us and that's debugging.


848
00:26:46,916 --> 00:26:48,706
I'm happy to say that in tvOS 11


849
00:26:48,706 --> 00:26:50,436
we're introducing some great new


850
00:26:50,686 --> 00:26:53,116
focus debugging tools that we've


851
00:26:53,116 --> 00:26:54,336
built right into UIKit.


852
00:26:54,976 --> 00:26:57,936
And first up is live focus


853
00:26:57,936 --> 00:26:58,856
update logging.


854
00:27:00,776 --> 00:27:02,186
By including the


855
00:27:02,186 --> 00:27:04,926
UIFocusLoggingEnabled option in


856
00:27:04,926 --> 00:27:06,926
your Xcode schemes launch


857
00:27:06,926 --> 00:27:09,286
arguments you can turn on live


858
00:27:09,286 --> 00:27:10,406
focus update logging.


859
00:27:10,406 --> 00:27:12,456
Now what's really helpful about


860
00:27:12,456 --> 00:27:13,616
this is that for each


861
00:27:13,956 --> 00:27:15,556
programmatic focus update that


862
00:27:15,556 --> 00:27:17,236
gets logged we're going to


863
00:27:17,236 --> 00:27:19,766
include a step-by-step outline


864
00:27:19,976 --> 00:27:21,186
of the preferred focus


865
00:27:21,186 --> 00:27:23,106
environment's search logic that


866
00:27:23,106 --> 00:27:24,546
the focus engine used to


867
00:27:24,546 --> 00:27:26,206
determine the next focus item.


868
00:27:26,426 --> 00:27:27,756
And so, this is incredibly


869
00:27:27,756 --> 00:27:29,886
helpful for diagnosing issues


870
00:27:30,116 --> 00:27:31,066
where focus is not


871
00:27:31,066 --> 00:27:32,626
programmatically updating to the


872
00:27:32,626 --> 00:27:34,246
item that we would expect it to.


873
00:27:34,836 --> 00:27:36,306
And because these are logs this


874
00:27:36,306 --> 00:27:37,556
can help you diagnose issues


875
00:27:37,556 --> 00:27:40,336
like focus not updating to the


876
00:27:40,336 --> 00:27:42,596
correct item on app launch and


877
00:27:42,596 --> 00:27:43,866
during transitions.


878
00:27:44,876 --> 00:27:45,926
However, this tool does come


879
00:27:45,926 --> 00:27:47,996
with one warning which is that


880
00:27:48,226 --> 00:27:49,356
please only use this for


881
00:27:49,356 --> 00:27:49,936
debugging.


882
00:27:50,456 --> 00:27:51,996
There is a nontrivial


883
00:27:51,996 --> 00:27:53,306
performance cost that comes with


884
00:27:53,306 --> 00:27:54,196
adding logging to your


885
00:27:54,196 --> 00:27:55,626
application so you never want


886
00:27:55,626 --> 00:27:56,606
this enabled for shipping


887
00:27:56,606 --> 00:27:57,276
applications.


888
00:27:57,926 --> 00:28:01,856
So that's focus update logging.


889
00:28:03,656 --> 00:28:04,786
The next tool that we're


890
00:28:04,786 --> 00:28:05,726
unveiling today is


891
00:28:05,726 --> 00:28:08,016
UIFocusDebugger which is a new


892
00:28:08,016 --> 00:28:09,686
class that we're exposing in


893
00:28:09,686 --> 00:28:10,706
tvOS 11.


894
00:28:12,326 --> 00:28:14,956
UIFocusDebugger is a tool for


895
00:28:14,956 --> 00:28:16,636
diagnosing focus related issues


896
00:28:16,706 --> 00:28:19,926
at runtime in your app and this


897
00:28:19,926 --> 00:28:20,466
is really cool.


898
00:28:20,466 --> 00:28:21,896
It's structured like a miniature


899
00:28:21,896 --> 00:28:23,636
command line tool that's built


900
00:28:23,636 --> 00:28:25,346
right into UIKit available for


901
00:28:25,346 --> 00:28:26,156
you to use.


902
00:28:26,616 --> 00:28:28,196
To take advantage of it all you


903
00:28:28,196 --> 00:28:29,776
need to do is call any of its


904
00:28:29,776 --> 00:28:32,596
methods from LLDB while your app


905
00:28:32,596 --> 00:28:33,186
is paused.


906
00:28:34,086 --> 00:28:35,046
Let's take a look at some of its


907
00:28:35,046 --> 00:28:35,676
capabilities.


908
00:28:37,696 --> 00:28:39,276
The simplest one is that you can


909
00:28:39,406 --> 00:28:41,196
simply call status to quickly


910
00:28:41,196 --> 00:28:42,226
print out the currently focused


911
00:28:42,226 --> 00:28:43,026
item at any time.


912
00:28:43,096 --> 00:28:45,636
And this is often step one in


913
00:28:45,636 --> 00:28:47,016
diagnosing some focus related


914
00:28:47,016 --> 00:28:48,816
issue, especially if you can't


915
00:28:48,986 --> 00:28:50,196
see where the currently focused


916
00:28:50,196 --> 00:28:52,836
item is.


917
00:28:53,196 --> 00:28:54,686
Next, you can use the simulate


918
00:28:54,686 --> 00:28:56,336
focus update request from


919
00:28:56,336 --> 00:28:58,256
environment method to diagnose


920
00:28:58,306 --> 00:28:59,676
issues related to your app's


921
00:28:59,816 --> 00:29:00,846
preferred focus logic.


922
00:29:01,716 --> 00:29:04,106
Calling this method is similar


923
00:29:04,106 --> 00:29:04,996
to calling the


924
00:29:05,096 --> 00:29:06,916
setNeedsFocusUpdate API and


925
00:29:06,916 --> 00:29:08,546
having that focus update execute


926
00:29:08,546 --> 00:29:09,966
on the environment that you pass


927
00:29:09,966 --> 00:29:10,636
in immediately.


928
00:29:10,636 --> 00:29:13,236
But what's great about this is


929
00:29:13,236 --> 00:29:14,596
it outputs that same


930
00:29:14,596 --> 00:29:16,846
step-by-step preferred focus


931
00:29:16,846 --> 00:29:18,386
environment search logic that we


932
00:29:18,386 --> 00:29:19,996
also include in the live focus


933
00:29:19,996 --> 00:29:20,746
update logging.


934
00:29:21,996 --> 00:29:24,096
But with this simulation method


935
00:29:24,236 --> 00:29:25,816
you can simulate any focus


936
00:29:25,816 --> 00:29:26,736
update anywhere in your


937
00:29:26,736 --> 00:29:27,886
application without having to


938
00:29:27,886 --> 00:29:29,256
actually trigger that focus


939
00:29:29,256 --> 00:29:31,786
update manually in your UI.


940
00:29:31,956 --> 00:29:33,516
And so, this helps with quickly


941
00:29:33,516 --> 00:29:35,246
diagnosing different preferred


942
00:29:35,246 --> 00:29:36,836
focus environments issues in


943
00:29:36,886 --> 00:29:37,716
different places of your app.


944
00:29:42,176 --> 00:29:43,806
Personally, my favorite tool in


945
00:29:43,806 --> 00:29:46,126
UIFocusDebugger is this next


946
00:29:46,126 --> 00:29:47,626
method, check focus ability for


947
00:29:47,626 --> 00:29:47,926
item.


948
00:29:48,606 --> 00:29:50,106
And this is used to print out a


949
00:29:50,106 --> 00:29:52,246
list of potential issues that


950
00:29:52,246 --> 00:29:53,996
may cause an item to not be


951
00:29:53,996 --> 00:29:54,566
focusable.


952
00:29:56,256 --> 00:29:57,436
We've all had that kind of issue


953
00:29:57,436 --> 00:29:58,886
where there is some item on the


954
00:29:58,886 --> 00:30:01,016
screen that we expect to be


955
00:30:01,016 --> 00:30:02,596
focusable, but for some reason


956
00:30:02,596 --> 00:30:03,656
we just can't focus on it and we


957
00:30:03,656 --> 00:30:03,976
don't know why.


958
00:30:04,556 --> 00:30:07,076
And in fact, there are many


959
00:30:07,076 --> 00:30:08,826
different reasons why an item


960
00:30:08,916 --> 00:30:11,126
might not be focusable and they


961
00:30:11,126 --> 00:30:12,616
could be issues not just with


962
00:30:12,616 --> 00:30:14,226
that item itself, but with


963
00:30:14,306 --> 00:30:15,676
ancestors of that item that


964
00:30:15,676 --> 00:30:16,556
affect their children.


965
00:30:17,736 --> 00:30:18,846
And so, this is where this new


966
00:30:18,846 --> 00:30:20,586
focusability for item method


967
00:30:20,826 --> 00:30:21,726
really shines.


968
00:30:22,226 --> 00:30:24,266
It will automatically detect and


969
00:30:24,266 --> 00:30:25,856
diagnose all of these potential


970
00:30:25,856 --> 00:30:27,656
issues for you and print out a


971
00:30:27,656 --> 00:30:29,186
list of the issues that it


972
00:30:29,216 --> 00:30:31,016
detects and this allows you to


973
00:30:31,016 --> 00:30:32,086
save a ton of time.


974
00:30:32,086 --> 00:30:34,236
Obviously, investigating all of


975
00:30:34,236 --> 00:30:36,276
these issues on your own would


976
00:30:36,276 --> 00:30:38,586
just be a huge waste of time.


977
00:30:38,746 --> 00:30:42,286
And then finally, like any good


978
00:30:42,286 --> 00:30:43,896
command line tool you can always


979
00:30:43,896 --> 00:30:45,406
just ask UIFocusDebugger for


980
00:30:45,406 --> 00:30:47,226
help and this is going to print


981
00:30:47,226 --> 00:30:48,576
out a detailed list of


982
00:30:48,576 --> 00:30:50,096
instructions for each of the


983
00:30:50,096 --> 00:30:52,086
commands that are available and


984
00:30:52,086 --> 00:30:53,216
so don't worry about remembering


985
00:30:53,216 --> 00:30:54,546
all of these methods right now


986
00:30:54,656 --> 00:30:56,206
because the help command has you


987
00:30:56,236 --> 00:30:56,556
covered.


988
00:30:58,306 --> 00:31:00,536
But the best way to show you all


989
00:31:00,536 --> 00:31:01,666
these new tools is with a quick


990
00:31:01,666 --> 00:31:01,886
demo.


991
00:31:11,086 --> 00:31:11,756
All right, so I'm in the process


992
00:31:11,756 --> 00:31:12,526
of building a new tvOS


993
00:31:12,526 --> 00:31:14,156
application, but I've already


994
00:31:14,156 --> 00:31:15,636
run into some pretty serious


995
00:31:15,636 --> 00:31:17,056
focus related issues so let's


996
00:31:17,056 --> 00:31:18,736
see if we can figure out what's


997
00:31:19,426 --> 00:31:20,186
going on.


998
00:31:20,186 --> 00:31:22,686
I'm going to build and run our


999
00:31:25,186 --> 00:31:25,486
application.


1000
00:31:26,056 --> 00:31:26,886
All right, so this is just a


1001
00:31:26,886 --> 00:31:28,436
simple app that showcases some


1002
00:31:28,436 --> 00:31:30,156
my favorite movies and the first


1003
00:31:30,156 --> 00:31:31,796
thing you might notice is that


1004
00:31:31,986 --> 00:31:33,186
nothing appears focused


1005
00:31:33,186 --> 00:31:33,766
onscreen.


1006
00:31:33,766 --> 00:31:35,236
And in fact, if I swipe on the


1007
00:31:35,236 --> 00:31:36,826
remote or if I try to move focus


1008
00:31:36,826 --> 00:31:37,776
around the screen using the


1009
00:31:37,776 --> 00:31:39,366
arrow keys nothing appears


1010
00:31:39,366 --> 00:31:39,806
focused.


1011
00:31:40,486 --> 00:31:42,646
So, I'm at a loss here, don't


1012
00:31:42,646 --> 00:31:44,086
really know what's going, let's


1013
00:31:44,086 --> 00:31:45,466
see if UIFocusDebugger can help.


1014
00:31:45,926 --> 00:31:47,346
We're going to go back to our


1015
00:31:47,346 --> 00:31:51,546
application, pause it, which


1016
00:31:51,546 --> 00:31:54,956
will be LLDB and like I was


1017
00:31:54,956 --> 00:31:56,356
saying earlier, a good thing to


1018
00:31:56,356 --> 00:31:58,546
check is the status of the


1019
00:31:58,546 --> 00:31:59,466
current focus system.


1020
00:31:59,466 --> 00:32:00,266
So, I'm going to type in


1021
00:32:00,266 --> 00:32:04,756
UIFocusDebugger status and these


1022
00:32:04,756 --> 00:32:06,536
calls work with both Objective-C


1023
00:32:06,536 --> 00:32:07,826
and Swift as well.


1024
00:32:07,826 --> 00:32:11,826
And what status is telling me is


1025
00:32:11,826 --> 00:32:13,756
that there is an item currently


1026
00:32:13,756 --> 00:32:14,896
focused, it's one of those


1027
00:32:14,896 --> 00:32:15,666
poster cells.


1028
00:32:17,066 --> 00:32:18,516
But obviously, if we take a look


1029
00:32:18,576 --> 00:32:20,356
it doesn't appear focused and so


1030
00:32:20,356 --> 00:32:21,666
this points to some kind of


1031
00:32:21,666 --> 00:32:23,226
potential issue with the visual


1032
00:32:23,226 --> 00:32:24,356
appearance of our cells.


1033
00:32:24,826 --> 00:32:26,516
Let's go to our storyboard to


1034
00:32:26,516 --> 00:32:27,736
see if we can figure out what's


1035
00:32:28,246 --> 00:32:30,926
going on.


1036
00:32:31,166 --> 00:32:31,706
All right, I've got my


1037
00:32:31,706 --> 00:32:33,456
storyboard, let's open up our


1038
00:32:33,456 --> 00:32:36,646
collection view and we have a


1039
00:32:36,776 --> 00:32:38,096
template for our cell and the


1040
00:32:38,096 --> 00:32:40,256
cell contains an image view.


1041
00:32:40,606 --> 00:32:41,766
And what we want is for that


1042
00:32:41,766 --> 00:32:43,056
image view when the cell is


1043
00:32:43,056 --> 00:32:44,726
focused to float up above our


1044
00:32:44,726 --> 00:32:44,906
UI.


1045
00:32:47,026 --> 00:32:47,986
And now I'm taking a look at


1046
00:32:47,986 --> 00:32:49,536
this I noticed that we forgot to


1047
00:32:49,536 --> 00:32:51,076
switch on this adjust on


1048
00:32:51,076 --> 00:32:53,036
ancestor focus option and this


1049
00:32:53,036 --> 00:32:54,156
is what creates that floating


1050
00:32:54,156 --> 00:32:56,106
effect and so that's probably


1051
00:32:56,106 --> 00:32:56,586
our issue.


1052
00:32:56,586 --> 00:32:58,466
Let's rerun our application and


1053
00:32:58,556 --> 00:32:59,656
see if that fixes it.


1054
00:33:06,046 --> 00:33:06,716
Awesome, now we can move between


1055
00:33:06,716 --> 00:33:08,676
these cells, it clearly


1056
00:33:08,676 --> 00:33:09,846
indicates which cell is


1057
00:33:09,846 --> 00:33:10,786
currently focused with that


1058
00:33:10,846 --> 00:33:12,506
floating effect so we're looking


1059
00:33:12,506 --> 00:33:13,046
in better shape.


1060
00:33:13,896 --> 00:33:15,166
There is another issue with this


1061
00:33:15,166 --> 00:33:16,446
allocation though, which is that


1062
00:33:16,446 --> 00:33:18,226
I can't seem to focus on this


1063
00:33:18,226 --> 00:33:20,656
more info button that's in this


1064
00:33:20,656 --> 00:33:23,476
bottom shelf of our app and I


1065
00:33:23,476 --> 00:33:24,236
don't really know what's going


1066
00:33:24,236 --> 00:33:25,426
on there, there's nothing I can


1067
00:33:25,426 --> 00:33:26,126
do from here.


1068
00:33:26,126 --> 00:33:27,106
So, let's go back into our


1069
00:33:27,106 --> 00:33:28,926
application and see if we can


1070
00:33:28,926 --> 00:33:29,816
figure out what's going on.


1071
00:33:30,476 --> 00:33:32,446
We're going to go to our


1072
00:33:32,446 --> 00:33:34,236
mainViewController, set up


1073
00:33:34,236 --> 00:33:37,006
breakpoints, let's trigger that


1074
00:33:37,006 --> 00:33:37,616
breakpoints.


1075
00:33:39,096 --> 00:33:40,096
All right, so this is a great


1076
00:33:40,096 --> 00:33:41,206
opportunity to use that new


1077
00:33:41,206 --> 00:33:42,676
check focus ability method.


1078
00:33:43,376 --> 00:33:44,466
I'm going to type in P-O


1079
00:33:46,006 --> 00:33:47,066
UIFocusDebugger.


1080
00:33:48,446 --> 00:33:49,536
What's great is that we get full


1081
00:33:49,536 --> 00:33:52,716
autocomplete support and we're


1082
00:33:52,716 --> 00:33:54,446
allowed to invoke this, we need


1083
00:33:54,446 --> 00:33:55,116
a Swift code.


1084
00:33:56,966 --> 00:33:58,236
Let's check the focusability of


1085
00:33:58,236 --> 00:33:59,436
our more info button which I


1086
00:33:59,436 --> 00:34:02,216
have an outlet referenced to.


1087
00:34:02,996 --> 00:34:04,506
All right, so it detected an


1088
00:34:04,506 --> 00:34:05,826
issue and what this is telling


1089
00:34:05,826 --> 00:34:07,366
us is that the item is being


1090
00:34:07,366 --> 00:34:09,206
visually occluded, that's


1091
00:34:09,206 --> 00:34:10,956
visually blocked by some other


1092
00:34:10,956 --> 00:34:11,866
item on the screen.


1093
00:34:12,505 --> 00:34:14,755
And it really helpfully even


1094
00:34:14,916 --> 00:34:16,246
printed out a reference to the


1095
00:34:16,246 --> 00:34:18,366
item that it thinks is causing


1096
00:34:18,366 --> 00:34:18,755
the problem.


1097
00:34:19,525 --> 00:34:20,846
Let's go back to our storyboard


1098
00:34:21,386 --> 00:34:22,585
to see if we can figure out


1099
00:34:22,585 --> 00:34:22,976
what's going on here.


1100
00:34:30,016 --> 00:34:30,436
All right, I'm going to go to


1101
00:34:30,466 --> 00:34:30,976
our mainViewController.


1102
00:34:35,196 --> 00:34:36,076
All right, so here's our more


1103
00:34:36,076 --> 00:34:36,525
info button.


1104
00:34:37,416 --> 00:34:41,356
So, it said that we were being


1105
00:34:41,356 --> 00:34:43,466
visually occluded by some other


1106
00:34:43,466 --> 00:34:46,196
item, but I can obviously see


1107
00:34:46,196 --> 00:34:47,755
this more info button here so


1108
00:34:47,755 --> 00:34:48,356
what's going on.


1109
00:34:49,545 --> 00:34:50,396
Well now I'm looking at the


1110
00:34:50,396 --> 00:34:51,775
storyboard I notice this other


1111
00:34:51,775 --> 00:34:53,516
sibling view to our more info


1112
00:34:53,516 --> 00:34:54,636
button and this is a


1113
00:34:54,636 --> 00:34:57,306
semitransparent white view that


1114
00:34:57,306 --> 00:34:58,886
we use as the background of the


1115
00:34:58,886 --> 00:35:00,546
bottom shelf in our application.


1116
00:35:02,156 --> 00:35:03,586
And I'm noticing that this view


1117
00:35:03,586 --> 00:35:05,296
was accidentally placed on top


1118
00:35:05,296 --> 00:35:06,246
of our more info button, but


1119
00:35:06,246 --> 00:35:07,396
that was really hard to see


1120
00:35:07,396 --> 00:35:08,926
because it's semitransparent.


1121
00:35:09,776 --> 00:35:11,296
So, let's try dragging this just


1122
00:35:11,296 --> 00:35:13,526
below our more info button and


1123
00:35:13,526 --> 00:35:15,116
relaunch our application and see


1124
00:35:15,116 --> 00:35:15,976
if that fixes the issue.


1125
00:35:24,436 --> 00:35:25,476
All right, let's try that again.


1126
00:35:32,136 --> 00:35:32,846
All right, make that a little


1127
00:35:32,846 --> 00:35:33,176
bit bigger.


1128
00:35:34,226 --> 00:35:37,136
Okay now I can go and focus on


1129
00:35:37,136 --> 00:35:38,426
that more info button.


1130
00:35:38,806 --> 00:35:40,046
As our application is looking in


1131
00:35:40,046 --> 00:35:41,806
better shape now we can start to


1132
00:35:41,806 --> 00:35:43,356
move on to the more important


1133
00:35:43,356 --> 00:35:45,166
work of building out our new


1134
00:35:45,166 --> 00:35:45,676
features.


1135
00:35:45,966 --> 00:35:47,476
Let's [inaudible] back to the


1136
00:35:47,476 --> 00:35:47,976
presentation.


1137
00:35:48,516 --> 00:35:52,666
[ Applause ]


1138
00:35:53,166 --> 00:35:54,696
So that's just a quick example


1139
00:35:54,696 --> 00:35:56,466
of how UIFocusDebugger helped us


1140
00:35:56,496 --> 00:35:58,256
to identify those kinds of


1141
00:35:58,256 --> 00:35:59,756
simple mistakes that are easy to


1142
00:35:59,756 --> 00:36:01,636
fix, but that can nonetheless


1143
00:36:02,076 --> 00:36:03,666
waste a ton of time during


1144
00:36:03,666 --> 00:36:04,966
application development as we


1145
00:36:04,966 --> 00:36:06,016
try to track them down.


1146
00:36:08,126 --> 00:36:09,976
So that's focused debugging in


1147
00:36:09,976 --> 00:36:10,846
tvOS 11.


1148
00:36:12,526 --> 00:36:13,846
To recap our session for today.


1149
00:36:16,326 --> 00:36:17,666
Please take advantage of the new


1150
00:36:17,666 --> 00:36:19,886
focus update notifications and


1151
00:36:19,886 --> 00:36:21,196
the protocol extension methods


1152
00:36:21,196 --> 00:36:23,246
that we're adding in tvOS 11 in


1153
00:36:23,246 --> 00:36:25,126
order to accomplish common tasks


1154
00:36:25,276 --> 00:36:26,006
with less code.


1155
00:36:28,176 --> 00:36:29,556
You can use the new animation


1156
00:36:29,556 --> 00:36:32,116
APIs and the custom sound APIs


1157
00:36:32,116 --> 00:36:33,656
that Jon was talking about


1158
00:36:33,656 --> 00:36:35,136
earlier in this session in order


1159
00:36:35,136 --> 00:36:36,736
to provide a more immersive


1160
00:36:36,986 --> 00:36:38,646
experience for your apps and


1161
00:36:38,646 --> 00:36:39,106
games.


1162
00:36:40,796 --> 00:36:41,786
Definitely check out the new


1163
00:36:41,786 --> 00:36:43,026
focus interaction support in


1164
00:36:43,116 --> 00:36:43,626
SceneKit.


1165
00:36:43,816 --> 00:36:45,306
This is a great way to add


1166
00:36:45,306 --> 00:36:46,956
interactivity to your SceneKit


1167
00:36:46,956 --> 00:36:47,356
games.


1168
00:36:48,696 --> 00:36:50,576
And then finally, use the new


1169
00:36:50,576 --> 00:36:52,006
focus debugging tools to save


1170
00:36:52,006 --> 00:36:53,306
yourself a lot of time.


1171
00:36:55,586 --> 00:36:56,696
For more information on today's


1172
00:36:56,696 --> 00:36:57,526
session, you can go to


1173
00:36:57,526 --> 00:36:58,816
developer.apple.com.


1174
00:37:00,246 --> 00:37:01,546
If you're interested in learning


1175
00:37:01,546 --> 00:37:03,046
more about developing for tvOS


1176
00:37:03,046 --> 00:37:04,056
you can check out some of these


1177
00:37:04,056 --> 00:37:05,176
related sessions that we're


1178
00:37:05,176 --> 00:37:05,756
putting on this week.


1179
00:37:06,386 --> 00:37:06,976
Thank you very much.

