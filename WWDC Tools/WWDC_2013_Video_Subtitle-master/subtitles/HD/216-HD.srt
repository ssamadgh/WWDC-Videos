1
00:00:00,506 --> 00:00:10,496
[ Silence ]


2
00:00:10,996 --> 00:00:11,906
>> Good morning.


3
00:00:13,256 --> 00:00:16,456
[applause] Before
we get started,


4
00:00:17,236 --> 00:00:19,396
I'd like to do a
small, informal survey.


5
00:00:19,996 --> 00:00:22,146
How many of you are
new Apple developers?


6
00:00:22,146 --> 00:00:27,906
Please clap your hands.


7
00:00:27,986 --> 00:00:28,536
[applause] Excellent.


8
00:00:28,676 --> 00:00:32,595
Welcome. And how many
of you have made an app


9
00:00:33,056 --> 00:00:35,826
for iPhone, iPad, or iPod Touch?


10
00:00:35,826 --> 00:00:40,586
Please clap your hands.


11
00:00:41,136 --> 00:00:42,156
[applause] It sounds
like about all of you.


12
00:00:42,156 --> 00:00:44,826
OK. And how many of those


13
00:00:44,826 --> 00:00:47,516
that have made apps have
brought those same apps


14
00:00:47,816 --> 00:00:49,406
over to OS X, to the Mac?


15
00:00:49,906 --> 00:00:52,746
[applause] Sounds
like a few of you.


16
00:00:52,746 --> 00:00:54,696
But it sounds like we're all
in the right place today.


17
00:00:55,046 --> 00:00:56,976
Did you know that in
the last quarter alone,


18
00:00:56,976 --> 00:00:59,066
Apple sold nearly
4 million Macs?


19
00:00:59,926 --> 00:01:02,676
Yeah, and we want your apps to
be in every single one of them.


20
00:01:02,806 --> 00:01:04,766
And we're here to show
you how to do that.


21
00:01:05,596 --> 00:01:07,916
Now, after you leave
here today, you're going


22
00:01:07,916 --> 00:01:09,736
to be ready to do three things.


23
00:01:10,866 --> 00:01:18,456
Number one, you're going to be
able to rethink your iOS app


24
00:01:18,796 --> 00:01:22,826
in terms of a Mac,
in terms of OS X.


25
00:01:23,196 --> 00:01:28,186
Two, you're going to be ready
to restructure your code,


26
00:01:28,346 --> 00:01:30,466
just cleanly separate
your model from your view


27
00:01:30,466 --> 00:01:33,596
and your controller so that you
can maximize your code reuse.


28
00:01:33,596 --> 00:01:35,146
And number 3 is easy.


29
00:01:35,506 --> 00:01:37,686
You're going to be ready
to just get started.


30
00:01:39,046 --> 00:01:40,306
So let's talk about your design.


31
00:01:40,766 --> 00:01:45,096
Many of you may be thinking,
"OK, so I have my iOS app


32
00:01:45,096 --> 00:01:47,276
and I'm going to bring it
over to OS X and I'm going


33
00:01:47,276 --> 00:01:48,396
to leave everything the same


34
00:01:48,396 --> 00:01:50,436
because that's going
to be pretty easy."


35
00:01:51,356 --> 00:01:52,966
I'm going to discourage
you from doing that.


36
00:01:53,116 --> 00:01:56,066
Your users are going to love
it if you embrace the things


37
00:01:56,066 --> 00:01:57,046
that make the Mac great.


38
00:01:57,876 --> 00:01:59,946
So what makes the Mac
different form iOS?


39
00:02:01,096 --> 00:02:04,126
Well, for one thing,
screen size.


40
00:02:05,326 --> 00:02:10,556
If you think about it, your
iPhone is on a 4-inch display,


41
00:02:10,556 --> 00:02:13,196
if you have an iPhone 5,
or if you have an iPad,


42
00:02:13,196 --> 00:02:14,376
it's on a 10-inch display.


43
00:02:15,256 --> 00:02:17,836
But our Macs go from
an 11-inch Macbook Air


44
00:02:17,836 --> 00:02:20,126
to a 27-inch Thunderbolt
Display.


45
00:02:20,156 --> 00:02:24,536
And your users could
have multiple displays.


46
00:02:25,296 --> 00:02:26,456
So, that's something
to think about.


47
00:02:26,456 --> 00:02:30,656
And then on top of that,
your content is going to be


48
00:02:30,656 --> 00:02:32,036
on a window that's resizable.


49
00:02:32,756 --> 00:02:37,606
So, who knows how big your
content will be for the user


50
00:02:37,606 --> 00:02:38,646
at any one point in time.


51
00:02:39,216 --> 00:02:42,026
So, I'm going to encourage
you to use Auto Layout


52
00:02:42,406 --> 00:02:44,416
because that's going to
solve a lot of your issues


53
00:02:44,786 --> 00:02:47,486
with these different
display sizes.


54
00:02:48,496 --> 00:02:50,086
OK. Let's talk about
input devices.


55
00:02:51,756 --> 00:02:54,646
On iOS, your primary input
device is your finger


56
00:02:55,086 --> 00:03:00,686
and as such, we've given
you guidance to use controls


57
00:03:00,686 --> 00:03:04,046
and buttons that are
44 points by 44 points.


58
00:03:05,406 --> 00:03:10,006
Now, in OS X, your input
devices are a trackpad or mouse,


59
00:03:10,546 --> 00:03:11,796
and are much more precise.


60
00:03:11,796 --> 00:03:15,186
So you don't want to make your
controls unnecessarily large


61
00:03:15,186 --> 00:03:16,286
on OS X.


62
00:03:16,286 --> 00:03:17,866
It's going to look-- well,


63
00:03:17,866 --> 00:03:20,036
it looks out of place
so keep that in mind.


64
00:03:21,306 --> 00:03:22,316
What about other things?


65
00:03:22,316 --> 00:03:24,206
What are some other things
that make the Mac different?


66
00:03:25,146 --> 00:03:30,306
Well, for one thing, the Mac's
got menus and keyboard shortcuts


67
00:03:30,406 --> 00:03:32,106
and these aren't just any menus.


68
00:03:32,926 --> 00:03:35,076
Mac users are going to
be expecting to see File,


69
00:03:35,076 --> 00:03:37,886
Edit, and the Window menu.


70
00:03:38,546 --> 00:03:42,996
And they're expecting to see
the standard keyboard shortcuts


71
00:03:43,406 --> 00:03:44,376
for those menus.


72
00:03:44,836 --> 00:03:46,546
Like for instance,
Cut, Copy, and Paste.


73
00:03:47,056 --> 00:03:51,046
And they're going to expect
to see Undo and Redo support.


74
00:03:51,216 --> 00:03:53,646
You may have it in your
iOS apps but you may not.


75
00:03:53,676 --> 00:03:56,676
But on the Mac, if it's
appropriate, please use that,


76
00:03:57,086 --> 00:03:58,916
because your Mac
users will expect it.


77
00:03:58,956 --> 00:04:03,496
They're going to expect to be
able to drag files and texts


78
00:04:03,496 --> 00:04:07,676
and images into, out of, and
between windows in your apps.


79
00:04:08,926 --> 00:04:11,736
Quick Look is a technology
on OS X that allows users


80
00:04:11,736 --> 00:04:15,626
to see the contents of your file
without opening it in your app.


81
00:04:16,666 --> 00:04:18,685
And we've handled many
of the common cases


82
00:04:18,685 --> 00:04:20,786
like for PDF, and texts, images.


83
00:04:21,476 --> 00:04:25,556
But if you're making a custom
file format in your app,


84
00:04:25,556 --> 00:04:31,066
it'll be great if you added a
Quick Look plugin to allow users


85
00:04:31,066 --> 00:04:34,636
to see the contents of your
file without opening your app.


86
00:04:34,636 --> 00:04:35,966
That would really
make them happy.


87
00:04:36,856 --> 00:04:40,826
Similarly, Spotlight, that's
the technology that allows users


88
00:04:40,826 --> 00:04:42,846
to search the contents
of your file.


89
00:04:43,226 --> 00:04:44,736
So if you have a
custom file format,


90
00:04:45,596 --> 00:04:48,476
consider making a
custom Spotlight indexer


91
00:04:48,476 --> 00:04:51,106
so that users can search
the contents of your file.


92
00:04:51,766 --> 00:04:54,366
So then, we've talked
about design a little bit.


93
00:04:54,366 --> 00:04:55,486
Let's talk about your code.


94
00:04:56,286 --> 00:04:58,906
Now the good news is that
you can leverage a lot


95
00:04:58,906 --> 00:05:03,286
of existing knowledge that
you already know from iOS.


96
00:05:03,736 --> 00:05:05,166
For instance, the
design patterns,


97
00:05:05,646 --> 00:05:09,436
the model-view-controller,
the target-action pattern,


98
00:05:09,876 --> 00:05:14,666
the responder chain, delegation,
all of those patterns work


99
00:05:14,666 --> 00:05:16,816
on iOS just like
they do in OS X.


100
00:05:17,326 --> 00:05:20,596
A new development
environment, Xcode,


101
00:05:20,786 --> 00:05:25,016
with its built-in user Interface
Editor and Static Analyzer,


102
00:05:25,486 --> 00:05:29,596
its profiling tools,
and all the things


103
00:05:29,596 --> 00:05:32,476
like the source control tools
that you get from Xcode,


104
00:05:32,476 --> 00:05:35,286
all of those are available
on OS X as well as an iOS


105
00:05:35,286 --> 00:05:38,356
because you're using the
same development tool, Xcode.


106
00:05:39,476 --> 00:05:44,996
The languages, C, Objective-C,
C++, and many of the frameworks


107
00:05:45,056 --> 00:05:47,596
like Core Foundation
and Foundation are going


108
00:05:47,596 --> 00:05:51,196
to be the same on iOS
as they are in OS X.


109
00:05:52,236 --> 00:05:54,016
The resources, your images,


110
00:05:54,346 --> 00:05:56,636
some of your images might be
different because you're going


111
00:05:56,636 --> 00:05:59,536
to be resizing them to
make them smaller perhaps,


112
00:06:00,406 --> 00:06:01,696
but some of them
will be the same.


113
00:06:01,696 --> 00:06:02,916
You'll be able to
use those again.


114
00:06:03,436 --> 00:06:06,076
And then, also the
image technologies,


115
00:06:06,346 --> 00:06:08,926
this week we're talking
about asset catalogues,


116
00:06:08,926 --> 00:06:12,206
the Xcode talked about
that and that's one


117
00:06:12,206 --> 00:06:15,706
of the things that's
available on both OS X and iOS


118
00:06:16,776 --> 00:06:19,266
and you can use that for this,
and also the naming conventions.


119
00:06:19,266 --> 00:06:22,646
If you're doing a Retina Mac,
you're going to add at 2X


120
00:06:23,056 --> 00:06:26,276
to your file names just
like you do on iOS.


121
00:06:26,776 --> 00:06:30,266
And localizations, most
of your strings are going


122
00:06:30,266 --> 00:06:33,476
to be exactly the same
and the technologies used


123
00:06:33,736 --> 00:06:35,076
to localize are going
to be the same.


124
00:06:35,076 --> 00:06:37,986
So you're going to use
NSLocalizedString method


125
00:06:38,366 --> 00:06:41,936
to make sure that your
localizations work.


126
00:06:42,896 --> 00:06:45,166
So, I've outlined some of
the things that are the same.


127
00:06:45,166 --> 00:06:45,906
So what's different?


128
00:06:45,906 --> 00:06:49,226
Well, let's take a deeper
look at the technology stack.


129
00:06:49,806 --> 00:06:54,896
So here's a big table
and that has a lot


130
00:06:55,026 --> 00:06:57,576
of the frameworks
on iOS and OS X.


131
00:06:57,576 --> 00:06:59,336
There's a couple of things
I'd like you to notice.


132
00:06:59,336 --> 00:07:02,036
Number one is that a
lot of the frameworks


133
00:07:02,036 --> 00:07:05,046
on iOS are the exact
same as they are in OS X.


134
00:07:05,046 --> 00:07:09,556
And this is actually just
a small subset of all


135
00:07:09,556 --> 00:07:11,136
of the frameworks that
we have available.


136
00:07:11,136 --> 00:07:12,396
I only did one slide here.


137
00:07:13,116 --> 00:07:14,006
Actually, I did two.


138
00:07:14,006 --> 00:07:17,116
We'll look at the other one
in a second, but, anyway.


139
00:07:17,226 --> 00:07:19,906
The-- but yeah, so keep in mind
that most of the frameworks--


140
00:07:19,906 --> 00:07:21,476
a lot of the frameworks
are going to be the same.


141
00:07:21,476 --> 00:07:24,146
Now, there are some that are
different and of the ones


142
00:07:24,146 --> 00:07:25,326
that are different,
most of the ones


143
00:07:25,326 --> 00:07:28,486
that are different are going to
be subsets of the OS X version.


144
00:07:28,486 --> 00:07:31,066
So you get to keep your code
the same because you're going


145
00:07:31,066 --> 00:07:35,516
to be using the subset
part on iOS.


146
00:07:35,516 --> 00:07:37,806
So when you move to OS X, you
can even use some new features.


147
00:07:38,816 --> 00:07:43,206
The last thing I would like to
point out, most of you are going


148
00:07:43,206 --> 00:07:48,646
to be spending a lot of time
in UIKit and the news is


149
00:07:48,646 --> 00:07:51,436
that UIKit does not
exist on OS X.


150
00:07:51,826 --> 00:07:54,196
But the good news is
that we have AppKit.


151
00:07:54,246 --> 00:07:56,906
And actually, UIKit
was inspired by AppKit.


152
00:07:57,256 --> 00:07:57,626
That's right.


153
00:07:57,766 --> 00:08:00,876
That means that a lot of the
things will feel very familiar.


154
00:08:00,876 --> 00:08:04,886
And we're going to talk about
some of the differences and ways


155
00:08:04,886 --> 00:08:06,086
that you can cope with those.


156
00:08:06,726 --> 00:08:08,936
And then one more slide on
technology, I want to talk


157
00:08:08,936 --> 00:08:12,626
about games briefly because
many of you may be making games.


158
00:08:13,106 --> 00:08:16,496
If you're making games for OS
X, there's some great news.


159
00:08:16,496 --> 00:08:19,126
One thing is we have OpenGL,
Game Center, and SpriteKit.


160
00:08:19,126 --> 00:08:24,306
And if you're making a Mac 2D
game, really take advantage


161
00:08:24,306 --> 00:08:27,516
of SpriteKit if you can
because that's going to do most


162
00:08:27,516 --> 00:08:28,566
of the heavy lifting for you.


163
00:08:28,566 --> 00:08:30,286
That's already cross-platform


164
00:08:30,286 --> 00:08:32,126
and so you'll have an
app that works on both.


165
00:08:33,145 --> 00:08:36,206
So, now that we've talked
a little bit about that,


166
00:08:36,316 --> 00:08:38,836
let's go into design patterns.


167
00:08:40,176 --> 00:08:41,515
Does everyone recognize that,


168
00:08:41,515 --> 00:08:43,666
that's the Model-View-Controller
design pattern,


169
00:08:44,416 --> 00:08:46,156
and hopefully you're
using that in your apps.


170
00:08:46,596 --> 00:08:47,116
If you're not,


171
00:08:47,506 --> 00:08:50,396
Model-View-Controller is a
software architecture pattern


172
00:08:50,396 --> 00:08:53,436
that separates the
representation of information


173
00:08:53,436 --> 00:08:54,886
from the user's interaction
with it.


174
00:08:55,696 --> 00:08:58,196
And the model, we're
going to talk about first,


175
00:08:59,056 --> 00:09:02,806
is only supposed to be used
for your data structures,


176
00:09:03,616 --> 00:09:04,966
your business rules and logic.


177
00:09:05,406 --> 00:09:07,586
And if you cleanly
separate it out that way,


178
00:09:07,686 --> 00:09:09,196
you're going to get
some benefits.


179
00:09:09,666 --> 00:09:12,886
Almost all of your model
code is going to be reusable.


180
00:09:13,206 --> 00:09:17,096
Why? Because the frameworks
underneath the model


181
00:09:17,096 --> 00:09:18,956
are cross-platform.


182
00:09:19,416 --> 00:09:21,756
So what that means,
if you have some code


183
00:09:21,756 --> 00:09:26,876
and here's some iOS code, that
is going to init an array,


184
00:09:27,606 --> 00:09:30,676
a mutable array with ten
elements and we're going


185
00:09:30,676 --> 00:09:35,016
to add a string to it,
in this case, WWDC 2013.


186
00:09:35,536 --> 00:09:37,256
Your OS X code is going
to look like this.


187
00:09:37,376 --> 00:09:39,206
It's the same, right?


188
00:09:39,206 --> 00:09:40,926
That's great.


189
00:09:40,926 --> 00:09:42,126
So you don't have to
do any work there.


190
00:09:42,376 --> 00:09:44,296
So cleanly separate your model.


191
00:09:44,296 --> 00:09:45,906
Now, one thing to
keep in mind is


192
00:09:45,906 --> 00:09:49,886
that your model code may be
making an assumption that's not


193
00:09:49,886 --> 00:09:54,886
true on the Mac which is
Macs are 64 bit and iOS,


194
00:09:54,966 --> 00:09:57,526
your iOS code may not
be ready to handle that.


195
00:09:57,526 --> 00:09:59,076
So what do you for that?


196
00:09:59,216 --> 00:10:01,206
Well, it's really easy.


197
00:10:01,836 --> 00:10:04,496
Adopt NSInteger and NSUInterger.


198
00:10:04,626 --> 00:10:06,826
Those are variably sized
integers that are going


199
00:10:06,826 --> 00:10:08,796
to give you 64 bit
on the hardware


200
00:10:08,876 --> 00:10:11,826
and we'll give you 32
bits when you need it.


201
00:10:12,386 --> 00:10:14,406
So, that's perfect.


202
00:10:14,406 --> 00:10:17,886
Now what if you really do need
a 32 bit integer and not 64 bit?


203
00:10:18,136 --> 00:10:20,766
Like for instance, if you're
doing a binary file format


204
00:10:20,766 --> 00:10:23,396
that's already specified
and you want to make sure


205
00:10:23,396 --> 00:10:28,546
that it is right, well, we
recommend that you use uint32-t


206
00:10:28,546 --> 00:10:31,826
and its cousins and that's
got you taken care of.


207
00:10:31,826 --> 00:10:35,406
So what about platform
specific code?


208
00:10:36,156 --> 00:10:39,836
So if I'm writing iOS only code
and there may be some times


209
00:10:39,836 --> 00:10:41,916
that you do that, you're going


210
00:10:41,916 --> 00:10:46,056
to use the preprocessor
macro #if TARGET-OS-IPHONE.


211
00:10:46,586 --> 00:10:49,366
And if you're doing
Mac only code,


212
00:10:50,146 --> 00:10:55,406
you would use #if TARGET-OS-MAC
&& !TARGET-OS-IPHONE.


213
00:10:55,406 --> 00:10:59,926
OK. So now that we've
talked about the model,


214
00:11:00,176 --> 00:11:01,026
let's go on to the view.


215
00:11:01,946 --> 00:11:05,576
The view is any output
representation of your data


216
00:11:06,176 --> 00:11:08,126
and it's also where you're
user interface lives.


217
00:11:08,906 --> 00:11:12,486
So, a big part of the user
interface are the built-in


218
00:11:12,486 --> 00:11:13,156
control set.


219
00:11:13,826 --> 00:11:17,626
So what does it look
like on OS X?


220
00:11:18,586 --> 00:11:20,406
Well here's kind of an
idea of the landscape.


221
00:11:20,736 --> 00:11:23,636
We have a lot of controls
on iOS a ton of controls,


222
00:11:23,636 --> 00:11:25,036
even more controls on OS X.


223
00:11:25,036 --> 00:11:28,476
And they overlap and there are
a lot of controls in common


224
00:11:28,476 --> 00:11:29,516
but there are some
that are different.


225
00:11:29,616 --> 00:11:31,796
So, you'll need to
look at alternatives


226
00:11:31,796 --> 00:11:33,396
in some cases between the two.


227
00:11:33,396 --> 00:11:37,996
One of the most used controls
on iOS is the TableView,


228
00:11:38,646 --> 00:11:41,986
and good news, there's
a TableView on OS X.


229
00:11:42,926 --> 00:11:44,556
So, it's called NSTableView.


230
00:11:45,316 --> 00:11:48,956
If you're noticing a pattern,
it's just a coincidence


231
00:11:49,196 --> 00:11:52,016
but all the UIs and
actually, yeah.


232
00:11:52,476 --> 00:11:55,146
So, there's some
similarities between the two.


233
00:11:55,146 --> 00:11:58,026
They both use data
sources as their delegates.


234
00:11:58,796 --> 00:12:02,956
They both encourage the use
of reusable cells that's going


235
00:12:02,956 --> 00:12:04,146
to maximize your performance.


236
00:12:04,616 --> 00:12:08,976
And they both animate insertion,
deletion, and moving of cells.


237
00:12:08,976 --> 00:12:10,756
So, that's great.


238
00:12:11,346 --> 00:12:12,676
There are some differences too.


239
00:12:12,776 --> 00:12:14,726
One of the things
that's different is


240
00:12:14,726 --> 00:12:16,996
that NSTableView actually
has two different variants,


241
00:12:17,156 --> 00:12:19,386
that's for legacy reasons.


242
00:12:20,086 --> 00:12:21,606
You want to use the
view-based variant.


243
00:12:21,716 --> 00:12:23,116
That's most similar to iOS.


244
00:12:23,116 --> 00:12:26,136
The other one NSCell and
I'm done talking about that.


245
00:12:26,136 --> 00:12:30,156
It's an NScell-based
variant but don't use that.


246
00:12:30,156 --> 00:12:33,056
OK. The other thing to keep
in mind is that you're going


247
00:12:33,056 --> 00:12:34,206
to get multiple columns.


248
00:12:34,336 --> 00:12:35,576
So, yay, that's cool.


249
00:12:36,276 --> 00:12:40,326
And lastly, is this really
the right control for you?


250
00:12:40,646 --> 00:12:41,176
It may be.


251
00:12:41,646 --> 00:12:45,706
If you're doing tabular data
then it's the right control


252
00:12:45,706 --> 00:12:47,286
for iOS and OS X.


253
00:12:47,286 --> 00:12:49,096
But if you're doing
something else,


254
00:12:49,396 --> 00:12:52,076
then it might be the
right control for iOS


255
00:12:52,106 --> 00:12:53,726
but maybe not for OS X.


256
00:12:53,726 --> 00:12:55,396
So let's take a look
at some examples.


257
00:12:56,276 --> 00:13:00,406
So here on your left, you're
going to see a TableView


258
00:13:00,406 --> 00:13:04,786
that the user selecting a region
out of a whole list of regions.


259
00:13:05,176 --> 00:13:07,506
In this case, they've
selected United States.


260
00:13:07,976 --> 00:13:11,036
On OS X, the appropriate control


261
00:13:11,036 --> 00:13:13,306
to use here would
be a popup menu.


262
00:13:13,906 --> 00:13:16,256
So, think about that.


263
00:13:16,626 --> 00:13:19,716
Now, one thing about that
is that you can make those


264
00:13:19,716 --> 00:13:23,206
with NSPopupButton or just drag
them out from Interface Builder.


265
00:13:23,206 --> 00:13:24,476
That's probably the
easier way to go.


266
00:13:25,556 --> 00:13:26,616
So what about something else?


267
00:13:26,616 --> 00:13:27,726
OK. So let's look at this one.


268
00:13:28,676 --> 00:13:31,056
OK. So, here's a TableView


269
00:13:31,236 --> 00:13:32,856
where it has it broken
up into sections.


270
00:13:32,856 --> 00:13:34,676
So this first section, again,
you're selecting an item


271
00:13:34,676 --> 00:13:36,416
out of-- in this
case, just two items.


272
00:13:36,986 --> 00:13:40,046
So, on OS X, we'd recommend
using a radio-button


273
00:13:40,076 --> 00:13:41,126
matrix instead.


274
00:13:43,006 --> 00:13:47,616
And on OS X-- sorry, on
iOS, we have a on-off switch


275
00:13:47,746 --> 00:13:51,686
in your TableView, and
that would be best suited


276
00:13:51,686 --> 00:13:52,776
for a checkbox.


277
00:13:53,566 --> 00:13:55,306
And if-- one thing else
I'd like to point out.


278
00:13:55,306 --> 00:13:57,746
This window here can be
made with a StackView


279
00:13:57,816 --> 00:13:59,886
which will make your
job a lot easier.


280
00:14:00,086 --> 00:14:00,926
So check out that.


281
00:14:01,356 --> 00:14:04,586
NSStackView, it's a new
technology for Mavericks.


282
00:14:05,346 --> 00:14:08,506
OK. So, what if I
am doing custom view


283
00:14:08,656 --> 00:14:11,626
like making a custom button
or that kind of things?


284
00:14:11,946 --> 00:14:13,476
In a lot of cases,
you're going to want


285
00:14:13,476 --> 00:14:15,996
to overwrite UIView or NSView.


286
00:14:16,426 --> 00:14:18,456
So, what if-- so
what's the differences?


287
00:14:18,456 --> 00:14:22,016
They both receive and handle
events, they're both responsible


288
00:14:22,016 --> 00:14:25,066
for drawing, but
there's a couple


289
00:14:25,066 --> 00:14:26,486
of differences so
let's go in those.


290
00:14:27,096 --> 00:14:29,756
The UIView's origin
is in the upper left


291
00:14:30,156 --> 00:14:32,536
and the NSView's origin
is in the lower left.


292
00:14:33,106 --> 00:14:36,306
Before you despair, we'll have
some information on how to fix


293
00:14:36,616 --> 00:14:39,286
that or accommodate for that.


294
00:14:39,286 --> 00:14:43,406
The UIView always has a layer, a
Core Animation layer backing it,


295
00:14:43,566 --> 00:14:45,966
and that has some
interesting benefits.


296
00:14:46,276 --> 00:14:47,906
On NSView, you can have
a Core Animation layer


297
00:14:47,906 --> 00:14:48,906
but you have to opt-in to that.


298
00:14:49,786 --> 00:14:53,826
And then, subviews can draw
outside their bounds on UIView


299
00:14:53,826 --> 00:14:56,066
but they're clip to
their bounds for NSView.


300
00:14:56,296 --> 00:14:57,436
So let's talk about origins.


301
00:14:57,526 --> 00:14:59,426
I promised to show
you how to do that.


302
00:14:59,706 --> 00:15:00,466
Here's what it looks like.


303
00:15:00,626 --> 00:15:04,436
In UIView, you've got your upper
left origin, NSView, lower left,


304
00:15:04,626 --> 00:15:07,146
you're just going to overwrite
isFlipped and return yes.


305
00:15:07,846 --> 00:15:08,906
And what does that give you?


306
00:15:09,366 --> 00:15:11,056
Well, that.


307
00:15:12,946 --> 00:15:15,166
So, there are some controls


308
00:15:15,276 --> 00:15:19,666
that are actually already have
the origin flipped for you


309
00:15:20,196 --> 00:15:25,196
in advance, so be aware, and
they are NSButton, NSScrollView,


310
00:15:25,246 --> 00:15:27,786
NSSPlitView, NSTabView,
and NSTableView.


311
00:15:28,096 --> 00:15:29,776
So, what about layer
backed views?


312
00:15:29,776 --> 00:15:33,876
So we have the Core
Animation layers on UIView.


313
00:15:34,196 --> 00:15:35,166
What are the benefits?


314
00:15:35,166 --> 00:15:36,586
Why would we want to opt-in?


315
00:15:37,286 --> 00:15:38,806
Well, we'd get smoother
animation.


316
00:15:38,846 --> 00:15:40,996
And if you want to do
anything with CAFilters,


317
00:15:41,346 --> 00:15:43,616
then that's the right
choice for you.


318
00:15:43,956 --> 00:15:46,156
CAFfilters are pretty cool


319
00:15:46,156 --> 00:15:48,556
and if you watched
the SpriteKit Talk,


320
00:15:48,556 --> 00:15:49,746
then you know a little
bit about that.


321
00:15:50,706 --> 00:15:55,636
The downsides are that they
can be more resource intensive.


322
00:15:55,916 --> 00:15:57,826
So, we urge you to test.


323
00:15:57,826 --> 00:16:01,286
Try it out, see if it works
better, see if it fits


324
00:16:01,286 --> 00:16:04,526
in within the resources you
want to use, and then pick one.


325
00:16:04,896 --> 00:16:07,466
So what about layer
backed views?


326
00:16:07,836 --> 00:16:10,716
So we have layer backed views, I
told you what the benefits are,


327
00:16:10,826 --> 00:16:13,476
and that for UIViews
they are on automatically


328
00:16:13,476 --> 00:16:15,216
and you have to opt-in
on NSViews.


329
00:16:15,826 --> 00:16:17,936
So, how do you opt-in?


330
00:16:18,316 --> 00:16:21,176
Well, in code, you would
call setWantsLayer:YES.


331
00:16:22,226 --> 00:16:23,486
But you can also do it in Xcode.


332
00:16:24,316 --> 00:16:28,826
And so in Xcode, you go into the
Interface Builder portion of it


333
00:16:28,826 --> 00:16:32,156
and you would-- in the inspector
on the right, you're going


334
00:16:32,156 --> 00:16:38,176
to pick the last tab, that
one there, and then you click


335
00:16:38,176 --> 00:16:39,826
on the little checkbox
next to your View


336
00:16:39,826 --> 00:16:41,406
and that would make
it layer backed.


337
00:16:42,356 --> 00:16:46,526
OK. So for iOS, your animation
code might look like this.


338
00:16:46,526 --> 00:16:48,476
So you do an
animateWithDuration,


339
00:16:49,316 --> 00:16:52,436
you pass it a time,
and then you're going


340
00:16:52,436 --> 00:16:53,506
to give it an animation block.


341
00:16:53,806 --> 00:16:56,096
Here we're setting the frame so
we're going to animate the frame


342
00:16:56,096 --> 00:16:57,336
and then I'm closing the block.


343
00:16:57,596 --> 00:16:59,956
On OS X, we're going to
use animation proxies.


344
00:17:00,416 --> 00:17:03,256
The codes look very
familiar but it's going


345
00:17:03,256 --> 00:17:04,396
to be slightly different.


346
00:17:04,996 --> 00:17:08,016
So, instead of changing the
frame on the view directly,


347
00:17:08,106 --> 00:17:10,316
you're going to do
something like this


348
00:17:10,566 --> 00:17:14,396
where you call this
animator proxy in the middle


349
00:17:14,486 --> 00:17:15,646
and that's going to make sure


350
00:17:15,646 --> 00:17:17,756
that your view gets
its frame set


351
00:17:18,396 --> 00:17:24,606
and also that it will animate.


352
00:17:24,606 --> 00:17:27,246
If you notice here that the
we're not setting the time


353
00:17:27,246 --> 00:17:29,596
of the animation that
has an implicit duration


354
00:17:29,986 --> 00:17:32,736
and there's some more details on
that that you can learn about.


355
00:17:33,256 --> 00:17:38,076
And we'll have references
to that at the end.


356
00:17:38,356 --> 00:17:40,246
So, what about events?


357
00:17:40,316 --> 00:17:45,546
So you have on iOS these gesture
recognizers and they're great.


358
00:17:46,326 --> 00:17:48,146
So, you have the
UIGestureRecognizer


359
00:17:48,146 --> 00:17:50,986
and its subclasses and it makes
it really easy to handle events.


360
00:17:51,276 --> 00:17:54,456
On OS X, you can handle all
those same events but we--


361
00:17:54,456 --> 00:17:56,456
there's no such thing as
an NSGestureRecognizer.


362
00:17:56,456 --> 00:17:57,256
So how do you do it?


363
00:17:57,366 --> 00:17:59,526
So here's a
TapGestureRecognizer.


364
00:17:59,896 --> 00:18:02,996
And TapGestureRecognizer,
the idea here it's a lot


365
00:18:02,996 --> 00:18:04,716
of times you use for
a simple interactions


366
00:18:04,716 --> 00:18:05,726
like a simple touch.


367
00:18:06,246 --> 00:18:09,836
So, on OS X, it would
be a simple click.


368
00:18:10,336 --> 00:18:13,976
And so, you would
overwrite the mouseUp event


369
00:18:13,976 --> 00:18:16,076
and handle your click there.


370
00:18:16,656 --> 00:18:19,106
So, pretty easy, and you
could do mouseDown as well


371
00:18:19,106 --> 00:18:22,676
but we recommend mouseUp because
it's more what the user expects.


372
00:18:23,306 --> 00:18:25,636
So they can cancel the event.


373
00:18:25,936 --> 00:18:27,286
OK. So what about long press?


374
00:18:28,576 --> 00:18:30,606
Well, for long press,
you could do this.


375
00:18:30,826 --> 00:18:33,276
It's kind of complicated
but I'll just run


376
00:18:33,276 --> 00:18:33,816
through it real quick.


377
00:18:33,816 --> 00:18:37,826
You set up a timer, and it's
a half a second timer that's


378
00:18:37,826 --> 00:18:41,826
to mimic the way that the
default long press recognizer is


379
00:18:41,826 --> 00:18:42,156
set up.


380
00:18:42,156 --> 00:18:43,886
And then you're going
to do something.


381
00:18:44,296 --> 00:18:45,836
You've set up the
selector to do something,


382
00:18:45,836 --> 00:18:46,766
that's the bottom method.


383
00:18:47,226 --> 00:18:51,206
And then in your mouseUp event,
you can invalidate that timer.


384
00:18:51,206 --> 00:18:54,016
So, like for instance that they
mouseUp before the half second


385
00:18:54,016 --> 00:18:55,316
was over then it would stop it.


386
00:18:55,316 --> 00:18:57,876
So, you'd be effectively
doing a long press there.


387
00:18:58,176 --> 00:19:01,186
But 99 percent of the
time, you're going to want


388
00:19:01,186 --> 00:19:02,566
to use a Right Click instead


389
00:19:02,566 --> 00:19:06,576
because the long press is not
really going to be familiar


390
00:19:06,886 --> 00:19:10,756
for the OS X crowd, and
so, use the right click.


391
00:19:11,356 --> 00:19:13,756
And you're going to want
to show a menu probably.


392
00:19:14,296 --> 00:19:17,256
So to help you with
that, we have a method


393
00:19:17,256 --> 00:19:19,736
that you can overwrite which is
menuForEvent and that's going


394
00:19:19,736 --> 00:19:22,146
to get called if you
right click on something


395
00:19:22,146 --> 00:19:23,826
or if you control click on it,


396
00:19:23,826 --> 00:19:26,566
any kind of contextual
click, will give you this.


397
00:19:27,466 --> 00:19:30,396
And with this, you're
going to pass back the menu


398
00:19:30,666 --> 00:19:31,986
which is going to
handle the interaction.


399
00:19:32,616 --> 00:19:33,916
So what about dragging?


400
00:19:34,166 --> 00:19:37,466
Well, one thing you
could do is you could set


401
00:19:37,466 --> 00:19:38,936
up the mouseDown
event and you're going


402
00:19:38,936 --> 00:19:43,786
to record your drag start
location and your mouseDragged,


403
00:19:44,026 --> 00:19:46,966
you're going to do-- you're
going to move the view and then


404
00:19:46,966 --> 00:19:48,536
in the mouseUp event
you'd clean up.


405
00:19:48,536 --> 00:19:50,936
And that works really
well especially it will--


406
00:19:50,936 --> 00:19:54,336
I should say that works really
well if you're inside of a View.


407
00:19:54,336 --> 00:19:56,156
So if you're moving
something within a View,


408
00:19:56,956 --> 00:19:58,136
then that works great.


409
00:19:58,136 --> 00:20:00,416
So-- and that's kind of
what you're used to in iOS.


410
00:20:01,056 --> 00:20:03,656
But what if you wanted to do
something really fancy like,


411
00:20:03,896 --> 00:20:07,276
say drag something from
one window to another


412
00:20:07,276 --> 00:20:09,016
or perhaps one application
to another.


413
00:20:09,016 --> 00:20:09,856
How would you do that?


414
00:20:10,326 --> 00:20:11,486
Well, it's pretty simple.


415
00:20:11,486 --> 00:20:12,126
I'll show you how to do it.


416
00:20:12,126 --> 00:20:15,956
So you're going to use this
for mouseDown or mouseDragged


417
00:20:16,616 --> 00:20:19,106
and then you're going
to set up a pasteboard


418
00:20:19,926 --> 00:20:21,806
and in your pasteboard,
you're going


419
00:20:21,806 --> 00:20:24,046
to clear the current pasteboard
and then you're going to pass


420
00:20:24,046 --> 00:20:25,876
in the element that
you want to have--


421
00:20:26,636 --> 00:20:29,856
actually, the model behind
what you want to have dragged.


422
00:20:29,856 --> 00:20:32,786
In this example, we're dragging
an image, so we're going


423
00:20:32,836 --> 00:20:35,456
to just pass in one
element array,


424
00:20:35,906 --> 00:20:39,756
that's the new array syntax-,
and, pass in that image.


425
00:20:40,866 --> 00:20:44,196
And then we're going
to call this bad boy.


426
00:20:44,196 --> 00:20:49,696
dragImage at Offset event
pasteboard source slideBack.


427
00:20:49,956 --> 00:20:51,616
OK. So what is all that stuff.


428
00:20:52,186 --> 00:20:55,606
So, first thing is the dragImage


429
00:20:55,606 --> 00:20:57,516
and that's the image
underneath the mouse pointer


430
00:20:57,516 --> 00:20:58,196
as you're dragging.


431
00:20:58,696 --> 00:20:59,996
The second thing you're going


432
00:20:59,996 --> 00:21:02,256
to pass is the location,
the start location.


433
00:21:02,786 --> 00:21:05,086
And the dragOffset
actually is ignored


434
00:21:05,086 --> 00:21:07,886
so let's not talk
about that anymore.


435
00:21:07,886 --> 00:21:12,866
The event is the mouseDown
event that you've been passed in


436
00:21:12,866 --> 00:21:15,806
or mouseDragged event
and only use this


437
00:21:15,806 --> 00:21:17,276
with mouseDown and mouseDragged.


438
00:21:18,076 --> 00:21:19,876
The documentation-- by the
way, if there's anything here


439
00:21:19,876 --> 00:21:22,006
that I'm saying, go look
at the documentations,


440
00:21:22,006 --> 00:21:22,716
it's got all the stuff.


441
00:21:22,746 --> 00:21:24,526
But I'm just pointing you
in the right direction here.


442
00:21:25,046 --> 00:21:28,136
Pasteboard, so the pasteboard
is what you just set up there,


443
00:21:28,136 --> 00:21:30,186
the source is self
and then slideBack.


444
00:21:30,186 --> 00:21:34,076
That's when if the user cancels
then whether it slides back


445
00:21:34,076 --> 00:21:35,546
in the place, a little
cool animation there.


446
00:21:35,976 --> 00:21:37,826
So you can put yes or no there.


447
00:21:38,386 --> 00:21:40,586
OK. So, now that we've
talked about the view,


448
00:21:41,266 --> 00:21:42,646
let's take a look
at the controller.


449
00:21:42,646 --> 00:21:46,416
Now, the controller is the part


450
00:21:46,416 --> 00:21:50,106
of your Model-View-Controller
system that handles user input.


451
00:21:50,106 --> 00:21:54,876
And it's going to mediate that
input and send it to commands


452
00:21:54,876 --> 00:21:56,296
for the Model or View to handle.


453
00:21:56,976 --> 00:21:59,726
So, what do we do--
what are some tips


454
00:21:59,726 --> 00:22:00,826
for migrating the controller?


455
00:22:01,026 --> 00:22:04,776
First off, this is the common
mistake, UIViewController.


456
00:22:04,826 --> 00:22:06,276
There is an NSViewController


457
00:22:06,276 --> 00:22:07,726
but it's probably not
what you're looking for.


458
00:22:07,846 --> 00:22:10,416
You probably want to use
NSWindowController instead


459
00:22:10,496 --> 00:22:12,736
which is a lot more similar
to the UIVIewController.


460
00:22:12,736 --> 00:22:15,346
So, look there if you want that.


461
00:22:16,106 --> 00:22:19,546
And a lot of you may be using
or I would say almost all


462
00:22:19,546 --> 00:22:22,346
of you are using
UINavigationControllers.


463
00:22:22,886 --> 00:22:25,376
There is no such thing as
an NSNavigationController.


464
00:22:26,136 --> 00:22:28,186
And the reason-- now you
think about that for a second.


465
00:22:28,576 --> 00:22:30,906
UINavigationController,
what does it do?


466
00:22:31,366 --> 00:22:33,826
Well, it allows you to
navigate between lots


467
00:22:33,826 --> 00:22:36,566
of different TableViews that are
stacked on top of each other.


468
00:22:36,566 --> 00:22:37,986
And why do we stack them
on top of each other?


469
00:22:37,986 --> 00:22:39,286
Because we have a 4-inch screen.


470
00:22:39,636 --> 00:22:41,696
So, we don't really
need that on OS X.


471
00:22:41,696 --> 00:22:44,356
In any case, it doesn't exist
on OS X so you're going to have


472
00:22:44,356 --> 00:22:45,276
to find some alternative.


473
00:22:45,926 --> 00:22:47,786
But it's not the right
interaction anyway.


474
00:22:47,786 --> 00:22:51,986
So, the next thing that we
want to point out is Bindings.


475
00:22:51,986 --> 00:22:54,526
Bindings is going to really help
you out here with controllers


476
00:22:55,266 --> 00:22:58,866
because bindings is a way
on OS X that you can wire


477
00:22:58,866 --> 00:23:03,536
up your user interface
without using any code inside


478
00:23:03,536 --> 00:23:04,356
of Interface Builder.


479
00:23:04,356 --> 00:23:05,086
So that's pretty cool.


480
00:23:06,166 --> 00:23:10,086
OK. Next, NSDocument,
NSDocument is amazing.


481
00:23:11,676 --> 00:23:13,986
It allows you to do some really
cool stuff and it's going


482
00:23:13,986 --> 00:23:16,526
to really reduce the
amount of controller code


483
00:23:16,526 --> 00:23:17,276
that you have to write.


484
00:23:18,706 --> 00:23:21,486
And you may be thinking,
"NSDocument, that sounds like--


485
00:23:21,556 --> 00:23:23,156
is that similar to UIDocument?"


486
00:23:23,156 --> 00:23:24,136
Well, yes it is.


487
00:23:25,386 --> 00:23:27,446
In fact, they have a
lot of similarities.


488
00:23:27,846 --> 00:23:30,526
Both of them are responsible
for saving and loading,


489
00:23:31,576 --> 00:23:35,246
both of them will give you undo
support very, very cheaply,


490
00:23:36,156 --> 00:23:38,086
and both of them are
your tickets to iCloud.


491
00:23:38,676 --> 00:23:41,836
So if you want to get to
iCloud, adopt UIDocument


492
00:23:41,836 --> 00:23:45,046
or NSDocument or both really.


493
00:23:45,466 --> 00:23:48,706
And-- but there's
some differences


494
00:23:48,706 --> 00:23:50,476
between NSDocument
and UIDocument.


495
00:23:50,476 --> 00:23:53,726
NSDocument has some extras,
some real nice things


496
00:23:53,726 --> 00:23:55,486
that you should take
advantage of.


497
00:23:55,996 --> 00:23:58,296
You'll get for free
really most of them.


498
00:23:58,296 --> 00:23:59,646
One of them is that
you're going to get--


499
00:23:59,646 --> 00:24:01,866
if you set up a document-based
app on OS X, you're going


500
00:24:01,866 --> 00:24:04,306
to get a File, Edit, and
Windows menu for free


501
00:24:04,686 --> 00:24:08,246
and they're almost entirely work
without any code on your part.


502
00:24:08,816 --> 00:24:11,876
You're going to get open
panels and save sheets.


503
00:24:13,006 --> 00:24:17,086
And, you know, when you quit
your app and you haven't saved,


504
00:24:17,186 --> 00:24:18,636
you get that little
dialogue that comes down,


505
00:24:18,636 --> 00:24:20,466
that's for free, you'll
get that, unless you turn


506
00:24:20,466 --> 00:24:22,446
on auto-save and then,
you don't really need it.


507
00:24:23,026 --> 00:24:25,956
But if you turn on
auto-save, you get Versions.


508
00:24:26,416 --> 00:24:30,186
Yes, you're going to get this
cool UI, a time machine UI right


509
00:24:30,186 --> 00:24:34,096
within your app, that allows
you to compare one version


510
00:24:34,096 --> 00:24:35,206
of your file with another one.


511
00:24:35,436 --> 00:24:36,356
So that's really cool.


512
00:24:36,356 --> 00:24:39,396
And there's a really a lot
more that NSDocument can do.


513
00:24:39,396 --> 00:24:42,946
So, check out the
documentation for NSDocuments.


514
00:24:43,986 --> 00:24:47,026
OK. So, I'm going to
bring Dan Schimpf on stage


515
00:24:47,026 --> 00:24:49,026
and we've been talking a lot
in abstract and he's going


516
00:24:49,026 --> 00:24:52,246
to show you an iOS
app that we're going


517
00:24:52,246 --> 00:24:53,316
to bring to OS X in a second.


518
00:24:53,446 --> 00:24:55,156
So, take it away, Dan.


519
00:24:55,606 --> 00:24:57,606
[applause]


520
00:24:58,056 --> 00:24:59,536
>> Hi, good morning.


521
00:25:00,066 --> 00:25:02,546
OK. I'm going to show you--
I'm first going to start off


522
00:25:02,546 --> 00:25:06,636
with my awesome iOS application
that I'm working on some


523
00:25:06,636 --> 00:25:08,886
into the store, and it's a
simple graphics application.


524
00:25:09,446 --> 00:25:13,416
And what we can do here is
just tap and make a few shapes.


525
00:25:15,706 --> 00:25:18,946
So, I can also change
what size I want to make


526
00:25:19,196 --> 00:25:20,516
or what shape I'm going to make.


527
00:25:20,776 --> 00:25:22,926
I can drag-- even drag it
around and put that around top


528
00:25:22,926 --> 00:25:25,906
of there, like do
three whole shapes.


529
00:25:27,206 --> 00:25:32,846
You can even change the
color, sure, let's do that.


530
00:25:33,396 --> 00:25:35,886
So now look I have a nice little
picture of a house with my--


531
00:25:35,886 --> 00:25:37,366
this is what my house
looks like.


532
00:25:37,976 --> 00:25:40,526
OK. So, that's just a demo.


533
00:25:40,526 --> 00:25:43,196
That's my brand new application
but I'm thinking I want


534
00:25:43,196 --> 00:25:45,776
to bring this application
to OS X.


535
00:25:47,406 --> 00:25:49,386
So, I'm going to open the
project here and let's just go


536
00:25:49,386 --> 00:25:50,506
through some of the code.


537
00:25:50,816 --> 00:25:53,756
So, as you can see I've
already separated my code


538
00:25:53,756 --> 00:25:56,286
out into a Model
View and Controller.


539
00:25:56,926 --> 00:25:58,726
So this is my document model.


540
00:25:59,056 --> 00:26:02,056
Don't need to go through a whole
lot of this right now but it--


541
00:26:02,296 --> 00:26:04,166
but the important thing
is that a lot of it--


542
00:26:04,636 --> 00:26:06,346
this is all things that
are cross-platform.


543
00:26:06,346 --> 00:26:10,606
It imports foundation, things
that are on both platforms.


544
00:26:10,606 --> 00:26:14,596
And the view side, I have the
document view itself, the thing,


545
00:26:14,596 --> 00:26:17,946
the canvas, and then I have
the shape view which is--


546
00:26:18,236 --> 00:26:20,216
stand for each of
these individual shapes


547
00:26:20,216 --> 00:26:21,136
that I can drag around.


548
00:26:21,626 --> 00:26:22,986
And then on the controller side,


549
00:26:24,036 --> 00:26:27,366
I have a standard controller
hierarchy, an app delegate,


550
00:26:27,366 --> 00:26:29,266
and then I have adopted
UIDocument because I want


551
00:26:29,376 --> 00:26:31,896
to bring this to iPod and win
an Apple design award next year.


552
00:26:32,776 --> 00:26:35,246
And then I've got a view
controller for the view


553
00:26:35,246 --> 00:26:37,366
that I see and then
two controllers


554
00:26:37,366 --> 00:26:40,706
for the things that pop up.


555
00:26:40,966 --> 00:26:42,326
So, this is all pretty standard.


556
00:26:42,326 --> 00:26:45,456
And now I want to start
on bringing this to OS X.


557
00:26:45,726 --> 00:26:46,646
So what's the first thing I do?


558
00:26:46,646 --> 00:26:49,976
Well, the first thing I'm going
to do is just make a new target.


559
00:26:49,976 --> 00:26:53,546
So I'm going to make
an OS X application,


560
00:26:54,086 --> 00:26:55,306
so the Cocoa application.


561
00:26:56,116 --> 00:26:58,636
I'm going to make
this Shape Art OS X.


562
00:26:58,636 --> 00:26:59,786
You don't have to call it--


563
00:26:59,866 --> 00:27:03,246
if you don't have the OS X
at the end, I'm just going


564
00:27:03,496 --> 00:27:06,766
to say OS X just so there's
no confusion during this demo.


565
00:27:06,926 --> 00:27:09,116
And I'm also going to make a
document-based application.


566
00:27:11,916 --> 00:27:15,616
So, you can see this is
made a target for me.


567
00:27:16,006 --> 00:27:18,866
And also because I know this is
a heavy graphics application,


568
00:27:18,866 --> 00:27:20,096
I'm also going to
add a framework.


569
00:27:20,096 --> 00:27:25,996
I can search the Quartz
framework and it knows


570
00:27:25,996 --> 00:27:27,426
that this is an OS X
target so it's going


571
00:27:27,426 --> 00:27:30,426
to only give me the OS
X version of Quartz.


572
00:27:31,656 --> 00:27:34,796
OK. So now, I have
this basic app


573
00:27:34,796 --> 00:27:38,856
and because I've separated my
model cleanly, I can select all


574
00:27:38,856 --> 00:27:42,176
of the model classes and just
simply add them into my--


575
00:27:42,176 --> 00:27:46,386
excuse me, add them
to my OS X target.


576
00:27:46,386 --> 00:27:51,046
Now, if I switch to my OS X
target, I can actually build


577
00:27:51,336 --> 00:27:53,516
and run and see what it gets me.


578
00:27:53,746 --> 00:27:57,476
So here we have-- this
is what you get for free.


579
00:27:57,596 --> 00:27:59,396
You get a whole-- you have
windows, you can make--


580
00:27:59,396 --> 00:28:00,336
I can make many of them,


581
00:28:01,336 --> 00:28:05,466
I got all of the menu bar
items that actually work.


582
00:28:05,466 --> 00:28:08,366
And I probably don't
want to shift with


583
00:28:08,366 --> 00:28:11,996
"my document contents there"
but it's a good starting point


584
00:28:11,996 --> 00:28:16,436
that you get for free and then
you can adapt it from there.


585
00:28:16,596 --> 00:28:18,536
So I'm going to hand
it back to Cortis,


586
00:28:18,536 --> 00:28:19,686
he's going to talk
more about that part.


587
00:28:20,736 --> 00:28:21,186
>> Thanks, Dan.


588
00:28:22,216 --> 00:28:23,646
So, awesome.


589
00:28:23,646 --> 00:28:27,546
So we have this app and it does
some really cool things like


590
00:28:27,716 --> 00:28:28,476
"your documents here".


591
00:28:28,856 --> 00:28:31,756
But we don't have--
where's our colors?


592
00:28:31,756 --> 00:28:33,126
Where's our little shapes?


593
00:28:33,506 --> 00:28:34,356
So let's talk about--


594
00:28:34,356 --> 00:28:37,046
we're going to talk about
some migration strategies.


595
00:28:37,466 --> 00:28:40,146
They're going to help you move
over your view and controller


596
00:28:40,146 --> 00:28:42,326
because we've only moved
over the model at this point.


597
00:28:43,096 --> 00:28:46,196
Now keep in mind, this is kind
of a toolbox of approaches.


598
00:28:46,196 --> 00:28:47,836
We're going to give you a
bunch of different approaches.


599
00:28:48,256 --> 00:28:52,126
You know your code so you should
decide what's the right approach


600
00:28:52,126 --> 00:28:53,146
for which situation.


601
00:28:53,346 --> 00:28:56,016
And your apps may
use several of these.


602
00:28:56,566 --> 00:29:02,186
And so to help with this, we're
going to talk about it in terms


603
00:29:02,306 --> 00:29:03,836
of a particular example.


604
00:29:04,196 --> 00:29:06,726
In this case, we're going to
talk about it in terms of color.


605
00:29:07,856 --> 00:29:11,496
Now, on iOS, you may all
be familiar with UIColor.


606
00:29:11,656 --> 00:29:15,516
It's a relatively simple class,
it allows you to create colors


607
00:29:15,886 --> 00:29:18,206
with red, green, blue,
and alpha, and allows you


608
00:29:18,206 --> 00:29:20,306
to set them on the
current context.


609
00:29:21,056 --> 00:29:25,236
Now, it turns out that there's
another class on OS X called,


610
00:29:25,616 --> 00:29:29,286
surprisingly enough,
NSColor, and it allows you


611
00:29:29,506 --> 00:29:31,836
to create a color with red,
green, blue, and alpha and set


612
00:29:31,836 --> 00:29:32,906
in on the current context.


613
00:29:32,906 --> 00:29:34,566
Now, NSColor does
some other cool things


614
00:29:34,566 --> 00:29:36,696
like it will allow you to
set up seem like CMYK colors


615
00:29:36,696 --> 00:29:38,916
and patterns, color spaces.


616
00:29:39,126 --> 00:29:41,736
But for now, let's just
focus on those two things.


617
00:29:42,646 --> 00:29:48,906
OK. So, if were overwriting
code that we're using UIColor,


618
00:29:48,906 --> 00:29:49,966
I might do something like this.


619
00:29:50,006 --> 00:29:53,056
UIColor redColor, that's going
to make a new color for me,


620
00:29:53,486 --> 00:29:56,886
and then your color,
aColor dot set.


621
00:29:56,886 --> 00:29:58,526
So that's going to set
on the current context.


622
00:29:58,726 --> 00:29:59,246
Pretty simple.


623
00:29:59,906 --> 00:30:04,856
On OS X it might look like this
and the only difference here is


624
00:30:04,856 --> 00:30:08,786
that we have a different class
name in place of the UIColor.


625
00:30:09,546 --> 00:30:12,346
Now, this is what we're going to
call the mirrored code strategy


626
00:30:13,276 --> 00:30:16,836
and for purposes of talking
about it, I don't know


627
00:30:16,836 --> 00:30:18,656
if it's really officially
called that


628
00:30:19,196 --> 00:30:20,366
but we're going to call that.


629
00:30:20,366 --> 00:30:23,606
Now, just to show you a little
bit more what that might look


630
00:30:23,606 --> 00:30:26,456
like in a more complicated case,
let's look at this next one.


631
00:30:26,796 --> 00:30:28,116
This is not with colors.


632
00:30:28,396 --> 00:30:30,026
Now, There's a fair bit of code


633
00:30:30,026 --> 00:30:32,036
so let me explain
what it's doing.


634
00:30:32,426 --> 00:30:35,896
It going to create a new
view, it's going to center it


635
00:30:35,896 --> 00:30:37,466
on its parent view
and then it's going


636
00:30:37,466 --> 00:30:40,586
to insert it underneath all of
the other views on that view.


637
00:30:40,966 --> 00:30:43,376
OK. So this first
bit of code is going


638
00:30:43,376 --> 00:30:45,666
to compute the new
origin, the new X and Y.


639
00:30:45,666 --> 00:30:48,726
And we did that with a little
bit of math and it turns


640
00:30:48,726 --> 00:30:51,136
out that the math for OS
X is going to be the same.


641
00:30:51,786 --> 00:30:53,186
So that part of the
code is the same.


642
00:30:54,036 --> 00:30:56,036
And then we're going to
create the view itself.


643
00:30:56,286 --> 00:31:00,466
We'll make the frame, the
CGRect frame, and we're going


644
00:31:00,466 --> 00:31:01,856
to create it with initWithFrame.


645
00:31:02,816 --> 00:31:05,596
And if you notice, the
OS X code is very similar


646
00:31:05,596 --> 00:31:06,986
but there's a couple of changes.


647
00:31:06,986 --> 00:31:09,516
One is that we're using an
NSRect instead of CGRect,


648
00:31:10,426 --> 00:31:15,636
and we also are using an NSView
instead of a UIView, so--


649
00:31:15,636 --> 00:31:17,266
but very similar at this point.


650
00:31:17,266 --> 00:31:18,956
And then for this last bit,


651
00:31:19,206 --> 00:31:21,666
we're going to insert it
underneath all the other views


652
00:31:21,796 --> 00:31:22,386
on that view.


653
00:31:22,636 --> 00:31:25,146
So this is subview, so
all of the other subviews.


654
00:31:25,916 --> 00:31:28,976
And we use insertSubview
atIndex on iOS.


655
00:31:29,746 --> 00:31:33,246
On OS X, we don't actually
have that API so in that case,


656
00:31:33,246 --> 00:31:35,306
we're going to have
to call addSubview,


657
00:31:35,306 --> 00:31:36,666
positioned, relativeTo.


658
00:31:37,126 --> 00:31:39,906
And so what that does is it--
we're going to add the subview


659
00:31:40,726 --> 00:31:43,126
which is the one that we just
made, and then we're going


660
00:31:43,126 --> 00:31:45,646
to position it with
NSWindowBelow


661
00:31:45,886 --> 00:31:47,426
and that's we below something.


662
00:31:47,876 --> 00:31:50,476
And since we're passing
nil for our relativeTo,


663
00:31:50,476 --> 00:31:51,686
it's going to be
below everything.


664
00:31:51,686 --> 00:31:53,446
So it does the same
thing as the iOS code.


665
00:31:53,946 --> 00:31:56,346
OK. So that's the
mirrored code strategy.


666
00:31:56,826 --> 00:31:57,966
What are some of the benefits?


667
00:31:57,966 --> 00:32:00,416
Well, it's going to give
us a lot of flexibility.


668
00:32:00,886 --> 00:32:02,776
So we're going to
have things on iOS,


669
00:32:03,386 --> 00:32:04,886
we're going to write our
code completely different


670
00:32:04,886 --> 00:32:05,736
on iOS from OS X.


671
00:32:05,736 --> 00:32:07,356
In fact it can give you
something completely different.


672
00:32:07,396 --> 00:32:12,856
So that's kind of cool but
it has some downsides, right?


673
00:32:14,396 --> 00:32:17,756
There's code duplication
there which means


674
00:32:17,756 --> 00:32:20,856
that whenever we want to change
something on the iOS side,


675
00:32:20,856 --> 00:32:23,186
let' say add a feature
or fix a bug,


676
00:32:24,096 --> 00:32:26,446
it's going to require a
change on the OS X side.


677
00:32:26,846 --> 00:32:29,286
So there's greater maintenance
cost and greater testing cost.


678
00:32:29,286 --> 00:32:30,646
So when do we use this strategy?


679
00:32:30,646 --> 00:32:31,576
Is it ever appropriate?


680
00:32:31,866 --> 00:32:34,486
The answer is yes, it is,
sometimes appropriate.


681
00:32:34,986 --> 00:32:37,476
When you're using heavily
platform dependent code,


682
00:32:37,476 --> 00:32:39,666
when there's stuff that's
really just very different


683
00:32:39,666 --> 00:32:42,076
between the two, then this
might be the right approach.


684
00:32:42,406 --> 00:32:44,326
But there are some other
approaches that we can take.


685
00:32:44,726 --> 00:32:47,366
So let's take a look at those.


686
00:32:47,366 --> 00:32:50,946
One thing that we can do is
that, it turns out that UIKit


687
00:32:51,436 --> 00:32:54,336
and AppKit are actually built
upon a common framework.


688
00:32:54,936 --> 00:32:56,776
And so, we can drop down
to that lower framework.


689
00:32:57,336 --> 00:33:00,506
And it turns out that
that will give us code


690
00:33:00,506 --> 00:33:02,726
that is cross-platform
out of the box.


691
00:33:02,726 --> 00:33:04,006
Let's look at some code.


692
00:33:04,636 --> 00:33:06,796
Here we're dropping down
to the Core Image framework


693
00:33:06,796 --> 00:33:10,776
and it turns out that Core
Image has a CIColor there


694
00:33:11,956 --> 00:33:14,506
and CIColor has a color
with red, green, blue,


695
00:33:14,506 --> 00:33:15,986
alpha so we can create
a red color.


696
00:33:16,826 --> 00:33:19,176
And in this case, we're
actually going to--


697
00:33:19,396 --> 00:33:20,656
we're not setting on
the current context.


698
00:33:20,656 --> 00:33:22,366
We're creating an image with
that color because that's one


699
00:33:22,366 --> 00:33:24,416
of the things that Core
Image would want to do.


700
00:33:24,886 --> 00:33:27,256
And so, that's the code
there for doing that.


701
00:33:27,826 --> 00:33:30,596
Now, some benefits
to using this--


702
00:33:31,436 --> 00:33:33,726
since lower level
frameworks are cross-platform,


703
00:33:34,006 --> 00:33:38,116
we're going to get-- we're going
to maximize our code reuse.


704
00:33:38,686 --> 00:33:41,486
It's very robust and there's
a lot less maintenance


705
00:33:41,486 --> 00:33:43,776
because we only have one
set of code to deal with


706
00:33:43,776 --> 00:33:46,126
and with the interface
is common so all


707
00:33:46,126 --> 00:33:48,186
of our code calling this
is going to be the same.


708
00:33:48,496 --> 00:33:50,186
There are some downsides.


709
00:33:50,756 --> 00:33:53,526
For one thing, it's going to
require that you rewrite a bunch


710
00:33:53,526 --> 00:33:56,906
of your code and
perhaps most importantly,


711
00:33:56,906 --> 00:33:58,846
and I want to stress
this, you're losing a lot


712
00:33:58,846 --> 00:34:01,166
of functionality by dropping
to the low level framework.


713
00:34:01,166 --> 00:34:04,296
There's a reason why
we're making NSColor


714
00:34:04,406 --> 00:34:06,626
and UIColor available.


715
00:34:07,126 --> 00:34:09,246
And it's not just to
like duplicate work.


716
00:34:09,835 --> 00:34:12,056
So, because, you know,


717
00:34:12,146 --> 00:34:14,386
and CIColor doesn't
handle color spaces,


718
00:34:14,386 --> 00:34:16,676
it won't do CMYK color,
it won't do patterns.


719
00:34:17,016 --> 00:34:18,505
So, these are all things
that you're going to lose.


720
00:34:18,505 --> 00:34:20,876
If you ever think that
you're going to need that,


721
00:34:20,876 --> 00:34:22,696
then probably not
the right strategy.


722
00:34:22,696 --> 00:34:23,786
So when do you use this?


723
00:34:24,085 --> 00:34:26,295
It's when the lower level
framework provides the needed


724
00:34:26,295 --> 00:34:29,005
functionality that you need,
for now and in the future.


725
00:34:29,106 --> 00:34:31,926
So look at it and say "Hey,
is this an appropriate match?"


726
00:34:32,326 --> 00:34:35,326
And if it's not, then let's
look at some other strategies.


727
00:34:35,496 --> 00:34:38,966
OK. So, from software
engineering, if any of you took


728
00:34:38,966 --> 00:34:40,815
that in college,
you may be familiar


729
00:34:40,815 --> 00:34:42,076
with the adapter pattern.


730
00:34:42,976 --> 00:34:45,295
The idea here is that we
have some common source


731
00:34:45,295 --> 00:34:46,956
and it's already targeting iOS.


732
00:34:48,025 --> 00:34:52,755
And the code is already
written so we don't really have


733
00:34:52,755 --> 00:34:53,666
to do anything on iOS.


734
00:34:53,666 --> 00:34:57,476
But what if we made the OS
X code work the same way?


735
00:34:57,476 --> 00:34:59,196
So we could stick
an adapter in there


736
00:34:59,836 --> 00:35:04,156
and that would give us the same
interface for iOS and OS X.


737
00:35:04,156 --> 00:35:06,506
And let me just modify
this slightly.


738
00:35:06,506 --> 00:35:08,746
We're going to make this
a little bit different.


739
00:35:08,746 --> 00:35:11,236
I want to make that
adapter actually


740
00:35:11,236 --> 00:35:12,906
across both iOS and OS X?


741
00:35:12,906 --> 00:35:15,666
So if we do this, it will take
a little bit of extra code


742
00:35:15,666 --> 00:35:19,586
but it means that our iOS
code-- sorry, the iOS framework


743
00:35:19,586 --> 00:35:23,676
and the OS X framework can
change and it doesn't matter


744
00:35:23,676 --> 00:35:26,836
because our code, our adapter
code can stay the same.


745
00:35:26,836 --> 00:35:29,376
And so, the code that's calling
it doesn't need to change.


746
00:35:30,156 --> 00:35:33,676
And so, we can just
change the implementation.


747
00:35:33,756 --> 00:35:35,576
So that's actually
a nice approach.


748
00:35:36,486 --> 00:35:38,176
And it would look
like this in code.


749
00:35:38,816 --> 00:35:41,026
Perhaps, this is
a very simplified,


750
00:35:41,026 --> 00:35:42,436
just the header file
version of it


751
00:35:42,756 --> 00:35:45,546
and without all the interfaces


752
00:35:45,546 --> 00:35:47,976
that you would need
for various things.


753
00:35:47,976 --> 00:35:48,966
But this gives you an idea.


754
00:35:49,286 --> 00:35:52,926
We created class
called XPlatformColor


755
00:35:53,406 --> 00:35:56,306
and we'd base it off of
NSObject, and underneath


756
00:35:56,306 --> 00:36:00,656
that class, we would place a
UIColor as the underlying color.


757
00:36:00,716 --> 00:36:04,496
And so, whenever we need to
do something on the color,


758
00:36:04,496 --> 00:36:07,566
we'd actually call through
to iOS to do that for us


759
00:36:07,566 --> 00:36:11,006
so we wouldn't have to
duplicate that code.


760
00:36:11,006 --> 00:36:13,196
And on OS X, we could put
this in a separate file.


761
00:36:13,196 --> 00:36:14,736
In this case, we're
putting it in on one slide


762
00:36:14,736 --> 00:36:16,266
so we use the condition--


763
00:36:16,266 --> 00:36:20,336
the cross-platform macros
that we talked about earlier.


764
00:36:20,886 --> 00:36:24,536
But in this case, we're
going to base XPlatformColor


765
00:36:24,536 --> 00:36:26,236
on the underlying
color of NSColor.


766
00:36:26,946 --> 00:36:28,876
So that's what that
would look like.


767
00:36:29,016 --> 00:36:30,316
So what are the benefits
of that?


768
00:36:30,556 --> 00:36:31,446
And so you're going to have to--


769
00:36:31,446 --> 00:36:35,146
by the way, this is doing
some hand waving on the rest


770
00:36:35,146 --> 00:36:37,656
of the interface because you're
going to have things like color


771
00:36:37,656 --> 00:36:39,836
with red, green, blue, alpha
perhaps, or a red color


772
00:36:39,836 --> 00:36:41,706
or whatever you want to
have as your interface.


773
00:36:41,706 --> 00:36:42,456
You can choose, right?


774
00:36:42,456 --> 00:36:43,856
This is your class
that you're making.


775
00:36:44,436 --> 00:36:46,246
So what are the benefits
of that?


776
00:36:46,246 --> 00:36:48,166
Well, one thing, you're
going to be flexible again,


777
00:36:48,836 --> 00:36:50,516
a lot more flexible
than mirrored code.


778
00:36:50,516 --> 00:36:53,386
You're going to maximize
your code reuse.


779
00:36:53,386 --> 00:36:56,456
This is a lot more reuse
than mirrored code.


780
00:36:57,386 --> 00:36:57,886
Why is that?


781
00:36:57,886 --> 00:36:59,196
Because your interface
is the same.


782
00:36:59,296 --> 00:37:01,056
So any place that you need
to color, you're going


783
00:37:01,056 --> 00:37:02,026
to call XPlatformColor.


784
00:37:02,026 --> 00:37:04,586
And all of your platform
specific stuff is hidden


785
00:37:04,586 --> 00:37:07,086
underneath an implementation
of the XPlatformColor code.


786
00:37:07,166 --> 00:37:08,216
So that's nice.


787
00:37:08,806 --> 00:37:10,796
It's a simplified interface
because you're making it.


788
00:37:10,796 --> 00:37:12,886
It's tailor-made for
you, so that's great.


789
00:37:12,886 --> 00:37:16,656
And it requires less maintenance
because, again, you're--


790
00:37:16,816 --> 00:37:20,156
you have a common interface and
unlike mirrored code where you,


791
00:37:20,366 --> 00:37:22,216
you know, you want to change
something, you had to change


792
00:37:22,216 --> 00:37:23,536
in all different places.


793
00:37:23,836 --> 00:37:24,706
So that's great.


794
00:37:25,596 --> 00:37:27,586
The downsides are, it
has some downsides,


795
00:37:27,916 --> 00:37:30,106
it's a lot of additional
code that you got to write.


796
00:37:30,656 --> 00:37:36,166
So-- and so, there's going to
be another strategy we can talk


797
00:37:36,166 --> 00:37:38,416
about next that has a little
bit less code, so, anyway.


798
00:37:38,646 --> 00:37:39,506
When do you use this?


799
00:37:39,606 --> 00:37:42,176
Well, you use this
when you're dealing


800
00:37:42,176 --> 00:37:45,486
with an underlying API that's
significantly different


801
00:37:46,286 --> 00:37:47,526
between iOS and OS X.


802
00:37:47,526 --> 00:37:49,086
And this is a great
pattern for that.


803
00:37:49,086 --> 00:37:50,886
OK. So, this is a
great strategy.


804
00:37:51,536 --> 00:37:52,406
What about another strategy?


805
00:37:52,406 --> 00:37:55,966
OK. So here's one that we can
take advantage of in some cases


806
00:37:55,966 --> 00:37:59,406
and that is the adapter
pattern using #define.


807
00:38:00,366 --> 00:38:02,646
Now, #define is the
pre-processor macro


808
00:38:03,166 --> 00:38:05,736
that in this case is, what
we're going to do is we're going


809
00:38:05,736 --> 00:38:08,996
to substitute every occurrence
of XPlatformColor with UIColor.


810
00:38:08,996 --> 00:38:11,156
And we're doing that before
the compiler ever gets to it.


811
00:38:11,456 --> 00:38:14,796
So this happens before
compile time and that's going


812
00:38:14,796 --> 00:38:16,976
to have some cool
advantages for that.


813
00:38:16,976 --> 00:38:20,176
And for OS X, we would
substitute that with NSColor.


814
00:38:20,176 --> 00:38:22,376
So every time we
see XPlatformColor,


815
00:38:22,376 --> 00:38:23,736
it's an automatically
insert that.


816
00:38:24,466 --> 00:38:28,656
Now, what does that do for us
and what is it not do to us?


817
00:38:28,656 --> 00:38:29,436
There's a couple of things.


818
00:38:29,616 --> 00:38:32,476
For one thing, there's
almost no new code to write.


819
00:38:32,476 --> 00:38:33,686
You saw it there, that's it.


820
00:38:34,226 --> 00:38:35,916
OK. So, that's nice.


821
00:38:35,916 --> 00:38:38,646
It's going to give you
compile time air checking.


822
00:38:38,646 --> 00:38:42,076
So because it's doing it before
the compiler ever gets to it,


823
00:38:42,356 --> 00:38:45,616
it will tell you if you're using
it wrong, the compiler will.


824
00:38:46,016 --> 00:38:48,856
So if you're using a selector
that's not appropriate,


825
00:38:49,166 --> 00:38:50,806
it's going to tell you that.


826
00:38:51,696 --> 00:38:56,346
Now, there's some downsides
and the first one is key.


827
00:38:56,346 --> 00:38:57,336
Everyone pay attention.


828
00:38:57,636 --> 00:38:59,596
This is only for
supported classes.


829
00:39:00,016 --> 00:39:00,836
Let me say that again.


830
00:39:00,836 --> 00:39:02,536
Only for supported classes.


831
00:39:02,536 --> 00:39:03,566
So what are those classes?


832
00:39:04,846 --> 00:39:11,206
UIColor and NSColor, UIFont and
NSFont, UIImage and NSImage,


833
00:39:11,816 --> 00:39:14,156
and UIBezierPath
and NSBezierPath.


834
00:39:14,156 --> 00:39:17,866
If you have a class that is
not in this set of four pairs


835
00:39:18,436 --> 00:39:20,806
and you want to use the
strategy, please don't.


836
00:39:22,936 --> 00:39:24,686
You will have undefined results.


837
00:39:24,786 --> 00:39:28,266
So-- and the other thing to
keep in mind is that even


838
00:39:28,266 --> 00:39:31,186
for these classes, it's
got limited API coverage.


839
00:39:31,186 --> 00:39:33,256
So just because we're doing
this #define it doesn't mean


840
00:39:33,256 --> 00:39:35,716
that we magically
get CMYK on UIColor.


841
00:39:36,056 --> 00:39:37,516
We don't. It doesn't
happen that way.


842
00:39:38,096 --> 00:39:41,406
So-- but the compiler
will warn you if you try


843
00:39:41,406 --> 00:39:42,586
to use it so, that's good.


844
00:39:42,586 --> 00:39:46,396
It will say, "Hey,
you-- this is an error."


845
00:39:46,396 --> 00:39:46,866
So, anyway.


846
00:39:47,356 --> 00:39:50,436
The other thing to
keep in mind is that,


847
00:39:50,596 --> 00:39:53,746
if you're doing cross-platform
work which you obviously are


848
00:39:53,746 --> 00:39:55,676
because you're in this talk
and that's what this is about,


849
00:39:56,156 --> 00:39:58,986
and you're doing
archiving of your things,


850
00:39:58,986 --> 00:40:01,526
it's going to require
some custom archiving.


851
00:40:01,526 --> 00:40:03,396
because if you archive,
what ultimately ends


852
00:40:03,396 --> 00:40:05,136
up being a UIColor
and you try to bring


853
00:40:05,136 --> 00:40:08,346
that into OS X using
iCloud, that is going to say,


854
00:40:08,346 --> 00:40:10,906
"I don't know UIColor is,"
and it's going to barf on you.


855
00:40:10,906 --> 00:40:12,246
So, you're going to have


856
00:40:12,246 --> 00:40:14,216
to write some custom
archiving code for that.


857
00:40:14,416 --> 00:40:15,156
And that's pretty easy.


858
00:40:15,156 --> 00:40:17,066
What you just want to do is
you want to save it in the way


859
00:40:17,066 --> 00:40:18,586
that both platforms
can recognize.


860
00:40:19,126 --> 00:40:23,316
So, migration testing
is my next slide.


861
00:40:23,836 --> 00:40:26,546
And one thing to keep in mind
is all of the stuff means


862
00:40:26,546 --> 00:40:28,536
that if you're code
compiles, it doesn't mean--


863
00:40:28,536 --> 00:40:29,606
necessarily mean it's correct.


864
00:40:30,076 --> 00:40:31,066
So please test.


865
00:40:32,156 --> 00:40:34,426
Unit tests are good,
very, very good.


866
00:40:34,426 --> 00:40:35,146
You should use them.


867
00:40:35,566 --> 00:40:39,126
Xcode has some cool things in
it, Xcode 5 for doing that.


868
00:40:39,306 --> 00:40:41,756
Manual testing is important too
because there are some things


869
00:40:41,756 --> 00:40:43,416
that you probably can't
cover in a unit test.


870
00:40:43,666 --> 00:40:45,156
Don't forget to send
it to your users.


871
00:40:45,156 --> 00:40:47,446
They have different system
configurations and they're going


872
00:40:47,446 --> 00:40:48,896
to use the software
differently than you.


873
00:40:49,316 --> 00:40:50,646
So, do beta testing.


874
00:40:50,646 --> 00:40:54,606
That's why there's reason why
we have the provisioning profile


875
00:40:54,606 --> 00:40:56,246
so you can send out your
apps to those people.


876
00:40:57,236 --> 00:41:01,146
And testing plans, you know,
if you have a testing plan,


877
00:41:01,416 --> 00:41:03,306
then it means that every
single time that you come


878
00:41:03,306 --> 00:41:05,296
out with a release and
you follow that plan,


879
00:41:05,296 --> 00:41:09,006
it's going to mean that your
software is a lot more--


880
00:41:09,006 --> 00:41:11,896
well, at least it's
tested, right?


881
00:41:11,896 --> 00:41:17,416
Now, I stress this because the
number one reason why apps get


882
00:41:17,416 --> 00:41:20,076
rejected from the app
store at least initially is


883
00:41:20,076 --> 00:41:22,476
because they crash
during the review process.


884
00:41:22,476 --> 00:41:24,906
So you don't want your app to be
one of those because it's going


885
00:41:24,906 --> 00:41:26,426
to take more time
to get it reviewed.


886
00:41:26,426 --> 00:41:29,346
And that's actually good
news because if it crashes


887
00:41:29,346 --> 00:41:30,686
for the reviewers
then it's not going


888
00:41:30,686 --> 00:41:32,636
to be crashing for your users.


889
00:41:32,636 --> 00:41:34,826
That would even be worse if it
didn't-- so do your testing.


890
00:41:35,446 --> 00:41:38,366
Anyway, I'm going to bring Dan
back on stage and he's going


891
00:41:38,366 --> 00:41:39,746
to show you how we've
implemented some


892
00:41:39,746 --> 00:41:43,216
of these strategies to
bring the iOS app to OS X.


893
00:41:43,216 --> 00:41:44,476
Thanks Dan.


894
00:41:44,976 --> 00:41:47,716
[applause]


895
00:41:48,216 --> 00:41:48,726
>> Thank you, Cortis.


896
00:41:49,406 --> 00:41:51,566
I've been hard at work while
Cortis has been talking


897
00:41:51,736 --> 00:41:55,346
and now I have a near final
copy of my application.


898
00:41:56,046 --> 00:41:57,946
So here we are, this
is an untitled document


899
00:41:58,376 --> 00:42:00,606
and you see instead of
the toolbar at the bottom,


900
00:42:00,606 --> 00:42:03,176
I have a toolbar on the
top that has selectors


901
00:42:03,176 --> 00:42:05,986
for the different shapes and
the Stroke and Fill colors.


902
00:42:06,196 --> 00:42:07,516
So-- but the same
things applies.


903
00:42:07,516 --> 00:42:09,606
I click, I can create things.


904
00:42:10,056 --> 00:42:13,616
I can even create a new
document and I can even--


905
00:42:13,616 --> 00:42:15,976
I can use that to make the
same shape that I did before.


906
00:42:16,456 --> 00:42:17,456
I can drag it.


907
00:42:18,356 --> 00:42:22,436
All right, two documents here.


908
00:42:22,666 --> 00:42:24,286
And I can change my Fill color.


909
00:42:24,286 --> 00:42:28,216
Let's do lemon, or
a nice purple,


910
00:42:28,416 --> 00:42:29,276
it could be different planet.


911
00:42:29,556 --> 00:42:31,846
OK. So then here we have
[laughter] roughly the same


912
00:42:31,846 --> 00:42:33,756
document here.


913
00:42:33,756 --> 00:42:39,096
And I can give this a name, see,


914
00:42:39,646 --> 00:42:44,486
"My House," saved
on the desktop.


915
00:42:44,676 --> 00:42:46,666
So let's say-- OK
and I saved it.


916
00:42:47,696 --> 00:42:49,496
I have made some other
changes by mistake.


917
00:42:49,896 --> 00:42:52,146
Let's say-- oh, and
now I kind of want


918
00:42:52,146 --> 00:42:54,716
to see, versions in the past.


919
00:42:54,716 --> 00:42:58,706
So I can browse Versions
and then this is entirely


920
00:42:58,706 --> 00:43:01,036
for free just by
adopting NSDocument.


921
00:43:01,186 --> 00:43:04,326
And I can go-- oh, this is
the one I actually wanted us


922
00:43:04,326 --> 00:43:04,766
to save.


923
00:43:05,446 --> 00:43:09,406
Now, this is-- that's
how it works.


924
00:43:09,486 --> 00:43:13,376
OK. So let's go back
and look at the code.


925
00:43:13,376 --> 00:43:17,926
OK. So, I've re-organized
my code a bit.


926
00:43:17,926 --> 00:43:19,726
I have-- I've broken
all the common code


927
00:43:19,726 --> 00:43:22,736
out into the common source
and I have as different spots


928
00:43:22,776 --> 00:43:24,166
for iOS and the MacOS source.


929
00:43:24,876 --> 00:43:27,266
So in my common source,
we have all the model bits


930
00:43:27,716 --> 00:43:29,096
and I was lying a
little bit before.


931
00:43:29,096 --> 00:43:31,996
We had already done some-- a
little bit of work that like


932
00:43:32,086 --> 00:43:34,006
of what Cortis was
talking about.


933
00:43:34,006 --> 00:43:38,316
So here we have our platform
color and I can show you,


934
00:43:38,316 --> 00:43:39,536
let's see, well, on a shape.


935
00:43:42,606 --> 00:43:43,776
The shape has all these things.


936
00:43:43,776 --> 00:43:46,066
It also has a Fill
Color and a Stroke Color


937
00:43:46,066 --> 00:43:47,876
and it's using this
platform color.


938
00:43:48,916 --> 00:43:51,836
And again, like what
Cortis is talking about,


939
00:43:52,196 --> 00:43:52,996
let's see, let's go down.


940
00:43:52,996 --> 00:43:54,466
This is about-- this
my archiving code.


941
00:43:54,466 --> 00:43:56,956
This is when I-- how I
init in from the archive.


942
00:43:57,406 --> 00:43:59,806
Let's hide this to
easier to see.


943
00:43:59,806 --> 00:44:03,866
So you can see, I'm
using-- when I encode it,


944
00:44:04,366 --> 00:44:07,876
I'm actually using a CIColor
to archive it to a file


945
00:44:07,876 --> 00:44:10,126
because that's something
that exist on both platforms.


946
00:44:10,366 --> 00:44:15,036
So that's something I can use
to make a consistent archive


947
00:44:15,036 --> 00:44:17,136
so I can open the same
document on both sides.


948
00:44:17,286 --> 00:44:21,326
So if the models are the same,


949
00:44:21,326 --> 00:44:23,206
what is the controller
level look like?


950
00:44:23,416 --> 00:44:25,176
So on the view side,
it looks very similar.


951
00:44:25,176 --> 00:44:28,046
I've got a Document
View that respond--


952
00:44:28,046 --> 00:44:29,226
that corresponds to the canvas.


953
00:44:29,746 --> 00:44:31,836
I've got a Shape View that
corresponds to each shape


954
00:44:32,116 --> 00:44:34,606
and these are both
subclasses of NSView.


955
00:44:35,826 --> 00:44:39,926
And then on the controller
side, I've got a single document


956
00:44:39,926 --> 00:44:40,696
because there's some--


957
00:44:40,976 --> 00:44:43,626
the document can serve as the
controller for the whole thing


958
00:44:43,626 --> 00:44:45,516
because there are not other
screens that could show up.


959
00:44:46,546 --> 00:44:51,056
And the document really
only has support for--


960
00:44:51,156 --> 00:44:55,006
really only need to do things
like it has some undo support.


961
00:44:55,006 --> 00:45:00,806
And then it does-- this
is the data, same code.


962
00:45:00,806 --> 00:45:02,876
So this takes the archiving
and then it reads it.


963
00:45:03,546 --> 00:45:07,026
So I can build this and
I'm back to my same data


964
00:45:07,206 --> 00:45:11,316
and I should mention that I
can also do keyboard shortcuts.


965
00:45:11,316 --> 00:45:14,756
So if I can do Command-Z,
see the Edit Menu Flash


966
00:45:14,756 --> 00:45:16,256
and those shapes go away.


967
00:45:16,256 --> 00:45:18,556
I can also go back
up here, do the redo.


968
00:45:18,556 --> 00:45:19,796
This is all again for free just


969
00:45:19,796 --> 00:45:21,676
by using NSUndoManager,
in my model.


970
00:45:22,296 --> 00:45:24,006
And I can use keyboard
equivalence.


971
00:45:24,256 --> 00:45:25,856
These are custom
things that I set up.


972
00:45:25,856 --> 00:45:28,816
I can use keyboard
equivalence to change the shape.


973
00:45:29,346 --> 00:45:31,156
And these are things that
our users are going to expect


974
00:45:31,156 --> 00:45:32,196
when they come to
your application.


975
00:45:32,366 --> 00:45:35,656
So I'm going to hand it back
over to Cortis to finish up.


976
00:45:36,036 --> 00:45:36,336
Thank you.


977
00:45:36,481 --> 00:45:38,481
[applause]


978
00:45:38,626 --> 00:45:39,186
>> Thanks Dan.


979
00:45:39,286 --> 00:45:40,446
That is some amazing work.


980
00:45:41,036 --> 00:45:42,836
He's a fast coder isn't he?


981
00:45:42,836 --> 00:45:46,976
OK. So, like I said before,
there's three things I'd


982
00:45:46,976 --> 00:45:49,206
like you to take home today.


983
00:45:49,556 --> 00:45:52,796
Number one is I want you
to rethink your iOS apps


984
00:45:53,076 --> 00:45:55,336
in terms of OS X apps, OK?


985
00:45:55,496 --> 00:45:57,186
So there are some changes that
you'll need to make there.


986
00:45:57,396 --> 00:45:59,876
Number two, restructure
your code


987
00:45:59,876 --> 00:46:02,436
so that your model is cleanly
separated from your view


988
00:46:02,436 --> 00:46:03,146
and you're controller.


989
00:46:03,146 --> 00:46:05,956
That way, you'll be
able to take advantage


990
00:46:05,956 --> 00:46:07,806
of the maximum code
reuse possible.


991
00:46:08,536 --> 00:46:10,396
And three, just get started.


992
00:46:10,596 --> 00:46:12,426
You know, your customers
are going to love it


993
00:46:12,426 --> 00:46:14,426
that you have an
OS X app especially


994
00:46:14,426 --> 00:46:16,876
if you integrate your iOS
and OS X app experience.


995
00:46:16,876 --> 00:46:17,696
So that's going to be great.


996
00:46:18,226 --> 00:46:19,316
If you want more information,


997
00:46:19,316 --> 00:46:21,436
please take contact
Jake Behrens.


998
00:46:21,856 --> 00:46:22,476
He's awesome.


999
00:46:22,476 --> 00:46:24,796
He will answer your
emails maybe.


1000
00:46:25,296 --> 00:46:25,796
I think he will.


1001
00:46:26,226 --> 00:46:27,376
>> He will.


1002
00:46:27,786 --> 00:46:28,626
>> He will, he says.


1003
00:46:28,876 --> 00:46:33,446
OK. Documentation, go
to AppKit documentation


1004
00:46:33,446 --> 00:46:36,076
at developer.apple.com/mac.


1005
00:46:36,556 --> 00:46:39,716
For the User Interface
Guidelines, this is important


1006
00:46:39,716 --> 00:46:41,856
because this is going to show
you how to make a great Mac app.


1007
00:46:42,196 --> 00:46:43,676
So go to that one.


1008
00:46:43,676 --> 00:46:45,936
That's developer.apple.com/ue.


1009
00:46:46,326 --> 00:46:49,016
The Developer Forums, a great
place to talk to developers.


1010
00:46:49,806 --> 00:46:51,176
We've got real developers there.


1011
00:46:51,246 --> 00:46:55,096
We haven't put Siri to work yet
there but real Apple developers.


1012
00:46:56,726 --> 00:46:58,746
Some great talks to look at.


1013
00:46:59,016 --> 00:47:01,986
So we have taken control
of Auto Layout in Xcode 5.


1014
00:47:02,386 --> 00:47:03,646
If you want to know
how to do X--


1015
00:47:03,646 --> 00:47:05,416
Auto Layout, that's
a great one to go to.


1016
00:47:05,416 --> 00:47:07,736
There are lots of also
talks from previous years


1017
00:47:08,016 --> 00:47:08,986
that you're going to have access


1018
00:47:08,986 --> 00:47:11,956
to on your WWDC app
for Auto Layout.


1019
00:47:12,186 --> 00:47:14,416
Introduction to SpriteKit, I
made a plug for it earlier.


1020
00:47:14,416 --> 00:47:16,326
That's going to be great
if you're doing any kind


1021
00:47:16,326 --> 00:47:18,196
of cross-platform 2D Game.


1022
00:47:18,946 --> 00:47:21,316
Best practices for Cocoa
Animation, that's a great place


1023
00:47:21,316 --> 00:47:23,446
to go to for information
on NSStackView


1024
00:47:23,836 --> 00:47:27,566
for core animation
changes and for things


1025
00:47:27,566 --> 00:47:28,986
about auto layout as well.


1026
00:47:28,986 --> 00:47:29,716
And we'll give you a few--


1027
00:47:29,906 --> 00:47:31,386
things about animation
and auto layout.


1028
00:47:31,386 --> 00:47:33,196
And then Introducing TextKit,
and then we haven't talked


1029
00:47:33,196 --> 00:47:34,796
about that at all
in this session


1030
00:47:35,156 --> 00:47:37,086
but if you've attended some
of the earlier sessions,


1031
00:47:37,086 --> 00:47:38,376
you'll probably be
quite pleased.


1032
00:47:38,376 --> 00:47:39,456
But we didn't really
talk about that


1033
00:47:39,456 --> 00:47:42,066
but the TextKit is
actually implemented


1034
00:47:42,066 --> 00:47:46,326
on the same fundamentals
as the OS X Cocoa Text.


1035
00:47:46,766 --> 00:47:52,216
So, all of the things that you
can do is Cocoa Text or sorry,


1036
00:47:52,216 --> 00:47:54,936
in TextKit that you've
learned about, you can also do


1037
00:47:54,936 --> 00:47:56,666
in Cocoa Text and your code
is going to be the same.


1038
00:47:56,666 --> 00:47:59,676
So, your NSLayoutManagers
and your NSTextStorage,


1039
00:47:59,676 --> 00:48:01,036
all of that is on OS X


1040
00:48:01,306 --> 00:48:02,886
and you're code can
be largely the same.


1041
00:48:03,286 --> 00:48:04,086
Thank for coming.


1042
00:48:04,086 --> 00:48:05,306
Enjoy the rest of your show.


1043
00:48:05,806 --> 00:48:08,973
[Applause]


1044
00:48:09,473 --> 00:48:12,640
[ Silence ]

