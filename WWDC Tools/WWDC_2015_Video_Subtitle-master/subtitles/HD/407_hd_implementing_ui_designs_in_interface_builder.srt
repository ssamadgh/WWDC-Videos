1
00:00:23,516 --> 00:00:25,876
[Applause]


2
00:00:26,376 --> 00:00:26,866
Thanks!


3
00:00:30,356 --> 00:00:32,195
>> KEVIN CATHEY: Good afternoon,
welcome back from lunch.


4
00:00:32,616 --> 00:00:34,626
I guess if you guys are watching
the video you are like, lunch,


5
00:00:34,936 --> 00:00:36,126
I'm eating breakfast right now.


6
00:00:36,706 --> 00:00:39,226
Or whatever meal you just
ate, wherever you came from,


7
00:00:39,376 --> 00:00:42,476
welcome to threading
issues with core data.


8
00:00:42,476 --> 00:00:44,116
I'm just kidding.


9
00:00:44,256 --> 00:00:46,716
No, we are here to talk
about interface builder.


10
00:00:46,716 --> 00:00:48,806
My name is Kevin Cathey I'm one


11
00:00:48,806 --> 00:00:50,566
of the interface builder
engineers and we're going


12
00:00:50,566 --> 00:00:51,806
to do something a
little different today,


13
00:00:52,436 --> 00:00:53,736
we're going to show you
some of the new features


14
00:00:53,736 --> 00:00:56,576
of interface builder but I want
to do two other things, one,


15
00:00:56,576 --> 00:00:59,016
we're going to give you
some more advanced content,


16
00:00:59,046 --> 00:01:01,556
tips and tricks, best
practices, interface builder


17
00:01:01,556 --> 00:01:04,126
under the hood, and then
second we're going to look


18
00:01:04,126 --> 00:01:07,076
at interface builder and how
it helps you through each step


19
00:01:07,076 --> 00:01:08,896
of the development
of your application.


20
00:01:09,136 --> 00:01:10,926
Let me explain a
little bit more.


21
00:01:11,786 --> 00:01:12,476
Here is you.


22
00:01:12,796 --> 00:01:14,296
You have a bright idea.


23
00:01:15,056 --> 00:01:17,136
Now, thankfully there
are some other people


24
00:01:17,136 --> 00:01:19,236
who also think your idea
is pretty bright too,


25
00:01:19,406 --> 00:01:20,486
but here is the problem.


26
00:01:20,736 --> 00:01:22,086
They live all around the world


27
00:01:22,086 --> 00:01:24,436
and they use all different
kinds of Apple products.


28
00:01:25,376 --> 00:01:26,166
What are you doing to do?


29
00:01:26,166 --> 00:01:28,226
First you're going to think
about your application,


30
00:01:28,686 --> 00:01:30,156
what are the features
it's going to have?


31
00:01:30,156 --> 00:01:33,956
What will be the different
clumps of shared functionality


32
00:01:33,956 --> 00:01:35,096
that you're going to have?


33
00:01:35,096 --> 00:01:38,056
When you have those you will
look at an individual scene


34
00:01:38,346 --> 00:01:40,236
and within that scene
you will go down


35
00:01:40,236 --> 00:01:41,986
and actually work
at the view level.


36
00:01:42,646 --> 00:01:44,156
Okay so if we step
back for a second,


37
00:01:44,736 --> 00:01:47,916
going from a view all the way up
to deploying multiple products


38
00:01:48,016 --> 00:01:50,106
in languages, that's
a huge process


39
00:01:50,596 --> 00:01:53,406
and interface builder helps
you save boat loads of time


40
00:01:53,636 --> 00:01:55,276
in each one of those steps.


41
00:01:56,106 --> 00:01:58,476
We can take this entire
process and boil it


42
00:01:58,476 --> 00:02:01,696
down into three main
phases which works out great


43
00:02:01,866 --> 00:02:03,186
for an agenda for the session.


44
00:02:03,796 --> 00:02:05,006
We're going to start by talking


45
00:02:05,006 --> 00:02:06,926
about interface builder
at design time.


46
00:02:07,086 --> 00:02:09,186
I'm going to give you
guys some best practices


47
00:02:09,186 --> 00:02:12,046
and then we're going to pull the
hood up a little bit and look


48
00:02:12,046 --> 00:02:13,776
at interface builder
at build time,


49
00:02:13,776 --> 00:02:16,986
and then finally we're going
to spend a large section


50
00:02:17,026 --> 00:02:19,176
of this presentation talking
about interface builder


51
00:02:19,176 --> 00:02:22,666
at run time, both how you can
interact with interface builder


52
00:02:22,666 --> 00:02:25,746
at run time and also how can
you take advantage of many


53
00:02:25,746 --> 00:02:27,846
of the different
run time OS features


54
00:02:27,896 --> 00:02:29,716
for making applications
adaptable.


55
00:02:30,766 --> 00:02:32,466
Let's dive in and start
talking about interface builder


56
00:02:32,466 --> 00:02:34,856
at design time and the best way
to talk about interface builder


57
00:02:34,856 --> 00:02:36,706
at design time is to show
you interface builder


58
00:02:36,706 --> 00:02:38,216
at design time.


59
00:02:38,686 --> 00:02:40,386
Now, before I switch
over to the demo here,


60
00:02:40,746 --> 00:02:44,046
in this demo I'm going to
show you five tips and tricks


61
00:02:44,046 --> 00:02:45,956
and five best practices.


62
00:02:46,266 --> 00:02:48,276
We're going to do that
by adding a new feature


63
00:02:48,276 --> 00:02:49,436
to an application we are working


64
00:02:49,436 --> 00:02:51,336
on which is a road
trip application.


65
00:02:51,336 --> 00:02:53,616
We're going to add a new
tab to it that allows me


66
00:02:53,616 --> 00:03:00,636
to follow my friends who are
currently going on a road trip.


67
00:03:00,636 --> 00:03:03,286
In this application, I'm
going to be working off


68
00:03:03,286 --> 00:03:07,486
of a specification from my
designer, and I'm enjoying this


69
00:03:07,486 --> 00:03:09,656
for two reasons, one if you
are working with a designer


70
00:03:09,656 --> 00:03:11,326
to help maybe give you
guys some of the lingo


71
00:03:11,326 --> 00:03:13,466
that you might interact with
when working with a designer,


72
00:03:14,036 --> 00:03:16,276
and then secondly if you're
not working with a designer


73
00:03:16,356 --> 00:03:17,786
to show you that
building applications


74
00:03:17,786 --> 00:03:20,526
and the best processes going
into that can be done with


75
00:03:20,526 --> 00:03:21,416
or without a designer.


76
00:03:22,826 --> 00:03:25,756
With a static mock up
like the one you see


77
00:03:25,756 --> 00:03:29,496
on the screen there's two main
pieces of data you will grab


78
00:03:29,496 --> 00:03:32,686
from this, one, the
layout, where things go.


79
00:03:33,006 --> 00:03:36,016
Two, the appearance,
what things look like.


80
00:03:36,626 --> 00:03:38,466
We're going to start by
working on the layout


81
00:03:38,466 --> 00:03:39,906
of the application,
and that brings us


82
00:03:39,906 --> 00:03:43,356
to our best practice number
one, adopting auto layout


83
00:03:43,356 --> 00:03:45,836
and specifically
adopting stack views.


84
00:03:46,826 --> 00:03:49,616
Adopting auto layout means
taking the relationships


85
00:03:49,616 --> 00:03:51,626
between views and
co-defying those


86
00:03:51,626 --> 00:03:53,346
in objects called constraints.


87
00:03:53,716 --> 00:03:56,346
For those of you who have
used auto layout in the past,


88
00:03:56,486 --> 00:03:57,676
you'll know that working


89
00:03:57,676 --> 00:04:01,006
with raw constraints is very
flexible, very powerful.


90
00:04:01,486 --> 00:04:02,626
It's some other things too.


91
00:04:02,876 --> 00:04:06,136
For example, you will sometimes
need to specify the same sets


92
00:04:06,136 --> 00:04:08,566
of constraints repeatedly
and that's


93
00:04:08,596 --> 00:04:09,866
where stack views
come into play.


94
00:04:10,426 --> 00:04:13,866
If constraints are taking
the old, you know, position


95
00:04:13,866 --> 00:04:15,756
and size information
and abstracting


96
00:04:15,756 --> 00:04:18,786
that into relationships, stack
view takes it a step farther


97
00:04:18,786 --> 00:04:22,526
and takes those relationships
and abstracts it into behaviors.


98
00:04:22,886 --> 00:04:25,476
Let's go ahead and adopt
stack view in our application.


99
00:04:26,186 --> 00:04:28,416
Let me switch over to Xcode.


100
00:04:28,416 --> 00:04:31,206
Here is the beginnings of
our awesome new feature.


101
00:04:31,556 --> 00:04:35,996
Adopting stack view in interface
builder literally I don't think


102
00:04:35,996 --> 00:04:36,746
it could be simpler.


103
00:04:36,936 --> 00:04:39,576
I'm just going to select
the views that I want to put


104
00:04:39,576 --> 00:04:43,386
into a stack view and then
using the stack button down here


105
00:04:43,386 --> 00:04:45,966
in the bottom of the
canvas, I just click it,


106
00:04:46,516 --> 00:04:47,496
and now we have a stack view.


107
00:04:48,566 --> 00:04:51,436
Once we have a stack view,
we can adjust several


108
00:04:51,436 --> 00:04:53,416
of the different properties
that a stack view has.


109
00:04:53,866 --> 00:04:55,726
Now, in tomorrow's auto layout
session they're going to go


110
00:04:55,726 --> 00:04:57,666
into all of the different
properties that stack view has


111
00:04:58,066 --> 00:04:59,346
but one that we're
going to focus


112
00:04:59,346 --> 00:05:00,646
on now is called alignment.


113
00:05:01,476 --> 00:05:03,226
If I switch back to my mock-up,


114
00:05:04,546 --> 00:05:06,496
you can see that my
designer has specified


115
00:05:06,746 --> 00:05:09,676
to baseline a line these labels.


116
00:05:10,826 --> 00:05:12,156
What is baseline alignment?


117
00:05:13,346 --> 00:05:15,666
Baseline alignment basically
allows you to take text


118
00:05:16,076 --> 00:05:19,226
that is different font sizes and
make it look nice and aligned.


119
00:05:19,226 --> 00:05:22,396
If you have textual objects
like buttons and labels


120
00:05:22,396 --> 00:05:24,146
and segmented controls
you're going to want


121
00:05:24,146 --> 00:05:28,986
to baseline align these versus
using top or center or bottom.


122
00:05:28,986 --> 00:05:35,096
So let's go back to interface
builder and what we can do is


123
00:05:35,096 --> 00:05:40,176
if I go into the attributes
inspector I can change the


124
00:05:40,176 --> 00:05:43,396
alignment of my stack view
to be baseline aligned.


125
00:05:43,546 --> 00:05:44,856
Now, there is first
and last year,


126
00:05:44,856 --> 00:05:46,416
so if you have multi-line text,


127
00:05:46,716 --> 00:05:48,466
you can target either
the first line of text


128
00:05:48,466 --> 00:05:49,346
or the last line of text.


129
00:05:49,616 --> 00:05:53,776
In this case it's single line
so it doesn't really matter


130
00:05:53,776 --> 00:05:54,856
so we'll go with first.


131
00:05:54,856 --> 00:05:55,426
Wonderful.


132
00:05:56,256 --> 00:05:59,126
So let's continue adopting stack
view, I can take this stack


133
00:05:59,126 --> 00:06:00,666
in this label and
put it in stack view


134
00:06:01,216 --> 00:06:02,406
and I can add our image view.


135
00:06:02,406 --> 00:06:05,186
As I'm embedding in stack view,


136
00:06:05,186 --> 00:06:07,996
interface builder is
automatically inferring the


137
00:06:07,996 --> 00:06:10,996
different attributes such as the
alignment and the orientation.


138
00:06:10,996 --> 00:06:14,206
Now that we have this
outer stack view we want


139
00:06:14,206 --> 00:06:16,116
to position this
within our table cell


140
00:06:16,206 --> 00:06:17,076
which is not a stack view.


141
00:06:17,506 --> 00:06:19,876
And to do this we're going
to use raw constraints.


142
00:06:20,896 --> 00:06:26,016
I'm going to go to my tie
fighter and go ahead and open


143
00:06:26,016 --> 00:06:28,966
up add constraints and I
want to clarify two things


144
00:06:28,966 --> 00:06:31,846
in this pop-up, the
first is what is


145
00:06:31,846 --> 00:06:32,886
up with the layout margins?


146
00:06:33,086 --> 00:06:34,016
What are these things.


147
00:06:34,896 --> 00:06:37,326
Layout margins are
insets from a view


148
00:06:37,626 --> 00:06:40,536
that by default the system
provides some values for


149
00:06:40,536 --> 00:06:44,046
and if you use the default
layout margins they can be


150
00:06:44,046 --> 00:06:47,246
automatically adapted based upon
different context, for example,


151
00:06:47,246 --> 00:06:48,396
the device or the
view hierarchy.


152
00:06:49,446 --> 00:06:53,896
Generally if you have
content like buttons, labels,


153
00:06:54,056 --> 00:06:57,116
things that people interact
with or see, then you are going


154
00:06:57,116 --> 00:06:58,876
to want to constrain
things to the margins


155
00:06:58,966 --> 00:07:00,596
if it's not constrained
to another sub view.


156
00:07:01,216 --> 00:07:02,796
If you have something like
an image view that kind


157
00:07:02,796 --> 00:07:05,656
of sits behind your
entire table view cell


158
00:07:05,916 --> 00:07:07,456
that makes perfect
sense to constrain it


159
00:07:07,456 --> 00:07:09,186
to the edges instead so even


160
00:07:09,186 --> 00:07:11,666
if those margins change
your imagery will still be


161
00:07:11,896 --> 00:07:13,816
in the background.


162
00:07:13,846 --> 00:07:16,196
If I uncheck constraints,
constraints


163
00:07:16,196 --> 00:07:18,346
and margins you can see larger
values coming into play.


164
00:07:18,716 --> 00:07:21,336
Interface builder defaults
to margins which is helpful


165
00:07:21,336 --> 00:07:22,356
because that's exactly
what I want.


166
00:07:23,406 --> 00:07:26,036
Second thing I want to clarify
is this update frames here


167
00:07:26,036 --> 00:07:26,766
which I am going to use.


168
00:07:27,186 --> 00:07:28,506
Update frames is the process


169
00:07:28,506 --> 00:07:31,806
of interface builder moving
your views in the IB canvas


170
00:07:31,806 --> 00:07:33,956
to match what the constraints
would be at run time.


171
00:07:34,426 --> 00:07:36,186
When I'm adding constraints
I have a couple


172
00:07:36,186 --> 00:07:37,516
of options for doing this.


173
00:07:38,516 --> 00:07:41,616
If I say all frames in
container it means for all


174
00:07:41,616 --> 00:07:43,016
of the sub views in
my table view cell,


175
00:07:43,016 --> 00:07:45,296
move them to where the
constraints would tell them


176
00:07:45,296 --> 00:07:46,996
to be at run time.


177
00:07:47,416 --> 00:07:50,866
However, if I have a really
large view with lots and lots


178
00:07:50,866 --> 00:07:54,236
of sub views, I might only
want to move the things


179
00:07:54,236 --> 00:07:56,116
that I'm currently working
on at that instance,


180
00:07:56,166 --> 00:07:58,476
and that's what this
middle option is,


181
00:07:58,476 --> 00:08:01,796
it only moves the items that
are actually going to be


182
00:08:01,796 --> 00:08:02,966
in the new constraints
I'm adding.


183
00:08:03,786 --> 00:08:05,546
Now, I only have one
thing so it doesn't matter


184
00:08:06,026 --> 00:08:08,986
so we will do all frames
and add those constraints


185
00:08:10,006 --> 00:08:11,586
and now we are on our way.


186
00:08:12,206 --> 00:08:14,956
Okay. Next thing I want to
do is change the alignment


187
00:08:15,016 --> 00:08:17,036
of the items inside
the stack view.


188
00:08:17,446 --> 00:08:19,156
Another example of doing that.


189
00:08:19,156 --> 00:08:21,766
I will change that
to fill and now,


190
00:08:21,886 --> 00:08:24,336
that's not exactly what
I'm looking for, right?


191
00:08:25,306 --> 00:08:28,286
Stack views are built
on top of auto layout,


192
00:08:28,616 --> 00:08:30,386
which means that you
can use constraints


193
00:08:30,386 --> 00:08:32,316
to fine tune your layout.


194
00:08:33,226 --> 00:08:36,376
So if I want to make this image
view have a one-on-one ratio,


195
00:08:36,376 --> 00:08:37,265
even though it's
in a stack view,


196
00:08:37,265 --> 00:08:40,405
I can still add constraints
so I can add an aspect ratio


197
00:08:40,405 --> 00:08:46,436
and then change the
multiplier to be one to one.


198
00:08:46,626 --> 00:08:50,656
The next thing I want to do
is add spacing in between


199
00:08:50,656 --> 00:08:52,866
that image view and
the right hand content.


200
00:08:53,906 --> 00:08:56,246
Because my designer would like
there to be some padding there.


201
00:08:57,196 --> 00:08:59,986
Now, the stack view that I
need to change the spacing


202
00:08:59,986 --> 00:09:03,826
on is fully occluded by
labels and other stack views?


203
00:09:04,006 --> 00:09:04,786
How can I get at it?


204
00:09:04,886 --> 00:09:06,286
There are a couple
of ways you can get


205
00:09:06,286 --> 00:09:07,776
at occluded views in
interface builder.


206
00:09:08,136 --> 00:09:10,366
I could use the jump bar or
I could use the outline view,


207
00:09:10,566 --> 00:09:12,186
but I'm going to show
you my personal favorite


208
00:09:12,186 --> 00:09:14,216
which brings us to
Xcode pro tip number one


209
00:09:14,586 --> 00:09:15,656
which is fast selection.


210
00:09:16,296 --> 00:09:18,636
If I shift right click
or control left click.


211
00:09:18,636 --> 00:09:21,196
I can get a menu of
everything underneath the mouse


212
00:09:21,196 --> 00:09:23,386
at that point and then I
can easily select the thing


213
00:09:23,386 --> 00:09:24,066
that I'm looking for.


214
00:09:24,066 --> 00:09:28,706
Once I have it selected
I can change the spacing


215
00:09:29,316 --> 00:09:31,486
to what I need and there we go.


216
00:09:32,676 --> 00:09:34,296
The last thing I
want to show you


217
00:09:34,296 --> 00:09:38,236
with stack view is how you can
use multiple stack views nested


218
00:09:38,236 --> 00:09:41,196
together to get the exact
layout you are looking for.


219
00:09:41,736 --> 00:09:43,656
If we go back to our
specification here,


220
00:09:44,986 --> 00:09:48,866
you can see this set of labels
our designer would like it


221
00:09:48,866 --> 00:09:51,766
to act as a unit and
be centered vertically


222
00:09:51,766 --> 00:09:53,136
within the table view cell.


223
00:09:54,166 --> 00:09:56,596
We can do this by putting
the right hand content


224
00:09:56,646 --> 00:09:58,646
in another stack view and
adjusting the alignment.


225
00:09:59,196 --> 00:09:59,866
Let me show you that.


226
00:10:00,916 --> 00:10:04,436
I will use my fast selection
again to get to the stack view.


227
00:10:04,436 --> 00:10:06,976
I'm going to embed it
in another stack view.


228
00:10:08,396 --> 00:10:10,936
You can see the blue got a
little darker to show you that,


229
00:10:11,266 --> 00:10:14,236
and now I can change
my alignment to center.


230
00:10:15,186 --> 00:10:18,196
Now, alignment affects the
non-stacking direction.


231
00:10:18,196 --> 00:10:20,556
Because this is a
vertical stack view,


232
00:10:20,556 --> 00:10:22,636
it's going to be adjusting
the horizontal alignment,


233
00:10:22,636 --> 00:10:24,236
but I want to affect
the vertical alignment


234
00:10:24,236 --> 00:10:26,786
so I will change the
access to horizontal.


235
00:10:27,796 --> 00:10:31,136
And you can see with stack views
I can get the exact layout I'm


236
00:10:31,136 --> 00:10:33,526
looking for with very
minimal constraints.


237
00:10:34,256 --> 00:10:37,916
Our recommendation when
adopting auto layout is


238
00:10:37,916 --> 00:10:41,156
to use stack views and to
try to use stack views first


239
00:10:41,156 --> 00:10:43,736
and then only when you need to
actually use raw constraints.


240
00:10:44,166 --> 00:10:45,596
We think you're going
to be able to build most


241
00:10:45,596 --> 00:10:47,186
of your UIs using stack views.


242
00:10:47,186 --> 00:10:48,396
Which makes it easy to build.


243
00:10:48,396 --> 00:10:50,296
It makes it really
easy to experiment


244
00:10:50,566 --> 00:10:53,416
with different layouts without
having to adjust a bunch


245
00:10:53,416 --> 00:10:55,956
of constraints and it also
makes it very maintainable


246
00:10:55,956 --> 00:10:57,506
when you go back
in later and have


247
00:10:57,506 --> 00:11:01,566
to edit one of your documents.


248
00:11:03,346 --> 00:11:06,616
The next thing we want
to do is start looking


249
00:11:06,616 --> 00:11:08,516
at the appearance
of our application.


250
00:11:08,726 --> 00:11:09,556
And the first thing I'm going


251
00:11:09,556 --> 00:11:12,496
to do is prepare our
canvas for some design time.


252
00:11:13,696 --> 00:11:16,866
To do this I'm going to go
under the edit canvas menu.


253
00:11:16,866 --> 00:11:18,806
And interface builder
has lots of options


254
00:11:18,806 --> 00:11:20,756
for customizing what's
drawn on the canvas.


255
00:11:21,356 --> 00:11:23,596
For example, these blue
backgrounds the stack view is


256
00:11:24,086 --> 00:11:26,426
drawing for me are really
helpful at layout time


257
00:11:26,426 --> 00:11:29,216
so I can see exactly how big
that stack view is going to be,


258
00:11:29,456 --> 00:11:32,506
but at design time I want to
see what it's actually going


259
00:11:32,506 --> 00:11:33,876
to look like at runtime.


260
00:11:33,876 --> 00:11:36,396
So I will just go ahead
and turn those off.


261
00:11:38,206 --> 00:11:41,906
Okay. In the appearance section
of this demo, we are going


262
00:11:41,906 --> 00:11:44,866
to look at three best practices
with using interface builder.


263
00:11:45,806 --> 00:11:47,346
If we go back to
our specification,


264
00:11:47,346 --> 00:11:48,306
we'll see the first one.


265
00:11:49,896 --> 00:11:53,036
Our designer has specified
headline and body instead


266
00:11:53,036 --> 00:11:56,976
of an explicit font
or font size.


267
00:11:57,246 --> 00:11:57,916
What are these?


268
00:11:58,706 --> 00:12:00,826
These are called
dynamic type styles.


269
00:12:01,156 --> 00:12:03,486
They are defined by the
system and when you use them,


270
00:12:03,826 --> 00:12:04,766
it allows the system


271
00:12:04,766 --> 00:12:08,466
to automatically adapt what the
effective size and font is going


272
00:12:08,466 --> 00:12:12,206
to be at runtime based upon
your user's preferences.


273
00:12:12,446 --> 00:12:15,726
For example, the user
can adjust accessibility


274
00:12:15,726 --> 00:12:16,616
to have a larger font.


275
00:12:17,416 --> 00:12:20,096
Your application when using
dynamic type will automatically


276
00:12:20,096 --> 00:12:23,596
adapt to those font changes and
if you are using auto layout,


277
00:12:23,596 --> 00:12:26,176
the views will all
flow around it.


278
00:12:26,296 --> 00:12:28,086
So we can adopt this
really easily inside


279
00:12:28,086 --> 00:12:28,776
of interface builder.


280
00:12:30,146 --> 00:12:32,546
I can just select the label I
want to adopt dynamic type for


281
00:12:32,586 --> 00:12:37,506
and the inspector,
I can pick one


282
00:12:37,506 --> 00:12:41,106
of the font styles instead
of an explicit font.


283
00:12:41,216 --> 00:12:43,466
In this case, I will
choose headline.


284
00:12:43,996 --> 00:12:45,916
I have already adopted it
for the rest of my labels


285
00:12:45,976 --> 00:12:48,766
so we are done with
dynamic type.


286
00:12:50,456 --> 00:12:52,616
The next thing we are going
to do is we are going to bring


287
00:12:52,616 --> 00:12:55,096
that image view to
life and we are going


288
00:12:55,096 --> 00:12:56,886
to use two best practices
for this.


289
00:12:57,156 --> 00:12:59,836
One is designables, and
two is inspectables.


290
00:13:00,606 --> 00:13:04,256
Designables allows us to see our
custom drawing code right inside


291
00:13:04,256 --> 00:13:05,446
the interface builder canvas.


292
00:13:06,196 --> 00:13:07,646
So let's go ahead and
get some code for that.


293
00:13:07,786 --> 00:13:12,256
I want to go ahead and open
up the product navigator.


294
00:13:12,456 --> 00:13:13,836
Let's add some files.


295
00:13:14,226 --> 00:13:15,926
Tony, who is going to come


296
00:13:15,926 --> 00:13:19,296
up later just air dropped me
this code, so let's go ahead


297
00:13:19,296 --> 00:13:21,916
and add that to our project,
and I'm going to go ahead


298
00:13:21,916 --> 00:13:24,556
and open this, and
in opening it,


299
00:13:24,556 --> 00:13:27,416
I'm going to show you guys
Xcode pro tip number three,


300
00:13:27,486 --> 00:13:29,066
which is advanced navigation.


301
00:13:29,816 --> 00:13:34,316
If I option shift click this
file, I get a little hud.


302
00:13:35,346 --> 00:13:38,986
This hud allows me to target
where I want to open this file.


303
00:13:39,526 --> 00:13:42,996
So I can choose a new tab,
I can choose a new split.


304
00:13:43,126 --> 00:13:46,036
If I have multiple tabs I can
even target specific splits


305
00:13:46,036 --> 00:13:47,526
within tabs that
aren't even open.


306
00:13:48,196 --> 00:13:51,256
And as I use command I can also
even open it in a new window.


307
00:13:52,176 --> 00:13:57,616
In this case, I'm just going
to do the assistant editor.


308
00:13:58,076 --> 00:14:01,696
Adopting designables is a
really simple two step process.


309
00:14:02,186 --> 00:14:04,826
All you have to do is
mark a subclass of UI view


310
00:14:04,826 --> 00:14:08,056
with IB designable, and
then set that custom class


311
00:14:08,296 --> 00:14:09,146
with an interface builder.


312
00:14:09,726 --> 00:14:13,436
So if we select our image
view or what's going


313
00:14:13,436 --> 00:14:16,316
to be our image view, change
the identity inspector,


314
00:14:16,356 --> 00:14:19,906
and add in our customs
subclass here.


315
00:14:20,596 --> 00:14:22,446
Interface builder is
going to build my project,


316
00:14:22,966 --> 00:14:27,476
launch a process for rendering,
bring in my code, render it


317
00:14:27,476 --> 00:14:28,936
and show me that in the canvas.


318
00:14:30,536 --> 00:14:32,776
And if I change the code,


319
00:14:32,776 --> 00:14:38,496
it's going to automatically take
those new changes, build them,


320
00:14:39,026 --> 00:14:42,016
and apply them within
interface builder as well.


321
00:14:42,016 --> 00:14:47,606
The next thing I want to
go is adopt inspectables.


322
00:14:48,036 --> 00:14:49,976
You can see I have a couple
different properties here marked


323
00:14:49,976 --> 00:14:50,956
add IB inspectable.


324
00:14:51,126 --> 00:14:52,456
When you mark a property


325
00:14:52,456 --> 00:14:54,886
as IB inspectable it
allows interface builder


326
00:14:54,886 --> 00:14:56,396
to generate an inspector
for you.


327
00:14:57,466 --> 00:15:01,216
If I select image view, go
to the attributes inspector,


328
00:15:02,176 --> 00:15:03,846
you can see that those
three properties I marked


329
00:15:03,846 --> 00:15:05,886
as inspectable are showing
up now in our inspector


330
00:15:06,886 --> 00:15:08,026
and we can quickly adopt these.


331
00:15:09,086 --> 00:15:12,946
So I can say I'm going to
add that little image there.


332
00:15:13,036 --> 00:15:14,066
We're going to do
our stroke with.


333
00:15:14,066 --> 00:15:17,006
I think the spec said two,
if I recall correctly.


334
00:15:18,336 --> 00:15:21,126
And we can give it a nice
border color as well.


335
00:15:22,576 --> 00:15:24,206
Now, what's going on
here is that designables


336
00:15:24,206 --> 00:15:25,726
and inspectables
are working together


337
00:15:25,726 --> 00:15:28,306
to help you rapidly
iterate on your design.


338
00:15:28,546 --> 00:15:32,096
I haven't built and ran once and
I can see exactly what I'm going


339
00:15:32,096 --> 00:15:33,836
to get at runtime
because of the power


340
00:15:33,836 --> 00:15:35,386
of designables and inspectables.


341
00:15:35,916 --> 00:15:41,046
And that's our section on
adjusting the appearance


342
00:15:41,396 --> 00:15:42,736
of our application
with the dynamic type,


343
00:15:43,166 --> 00:15:44,946
designables and inspectables.


344
00:15:47,076 --> 00:15:51,736
Now, we all know that our
applications are not made


345
00:15:51,736 --> 00:15:53,866
up of a single scene, okay,


346
00:15:53,866 --> 00:15:57,686
unless you write the flashlight
app, but generally you're going


347
00:15:57,686 --> 00:15:59,466
to have multiple scenes
in your application.


348
00:15:59,716 --> 00:16:01,236
And if I zoom the storyboard


349
00:16:01,236 --> 00:16:04,396
out I can see there is a lot
more scenes in my application.


350
00:16:05,316 --> 00:16:06,796
You can bring a scene
into the flow


351
00:16:06,796 --> 00:16:08,476
of your application
using segues.


352
00:16:09,396 --> 00:16:12,066
To make a segue I can control
drag from a view controller


353
00:16:12,116 --> 00:16:15,256
or an object that can initiate
a segue and select the type


354
00:16:15,256 --> 00:16:17,086
of segue I want to add.


355
00:16:17,356 --> 00:16:19,336
In this case I will add
a relationship segue


356
00:16:19,336 --> 00:16:22,436
to add another tab to
our tab bar controller.


357
00:16:24,306 --> 00:16:26,966
Now, once we actually have made
the segue, I realize that I kind


358
00:16:27,016 --> 00:16:28,296
of want to be able to navigate


359
00:16:28,536 --> 00:16:30,196
within this table view
controller, so I am going


360
00:16:30,196 --> 00:16:32,076
to embed this in a
navigation controller.


361
00:16:32,076 --> 00:16:33,996
I will choose the editor menu,


362
00:16:34,376 --> 00:16:37,696
embed and embed this inside
a navigation controller.


363
00:16:38,786 --> 00:16:40,406
I want to point out something


364
00:16:40,406 --> 00:16:42,236
that interface builder
is doing to help us here.


365
00:16:42,236 --> 00:16:43,626
This is another Xcode pro tip.


366
00:16:44,466 --> 00:16:47,956
Interface builder is showing
us a nav bar and a tab bar


367
00:16:47,956 --> 00:16:49,256
for this particular scene.


368
00:16:49,926 --> 00:16:52,146
Now these objects are
not added to the scene,


369
00:16:52,146 --> 00:16:53,936
interface builder has not
added these to your scene


370
00:16:54,216 --> 00:16:57,436
but what it is doing is helping
you see what your application is


371
00:16:57,436 --> 00:16:59,836
going to look like at
runtime given some context.


372
00:17:00,236 --> 00:17:02,556
This makes it really
easy to be able to design


373
00:17:02,946 --> 00:17:06,496
for different contexts without
having to build and run.


374
00:17:06,576 --> 00:17:08,836
You can see what your simulated
metrics are, which is the name


375
00:17:08,836 --> 00:17:11,596
of the feature, by selecting
your view controller.


376
00:17:11,596 --> 00:17:14,366
And then going to the
attributes inspector


377
00:17:15,356 --> 00:17:17,046
and you can see my
simulated metrics.


378
00:17:17,445 --> 00:17:19,246
Now, right now they are
all saying inferred.


379
00:17:19,455 --> 00:17:21,596
Inferred just basically means
use the context around me.


380
00:17:21,925 --> 00:17:23,536
We know we are inside
a tab bar controller,


381
00:17:23,536 --> 00:17:25,465
we know that we're
inside a nav controller


382
00:17:25,746 --> 00:17:28,096
so interface builder
knows which bar to show.


383
00:17:28,096 --> 00:17:30,376
I can override these
to be whatever I need.


384
00:17:31,386 --> 00:17:34,226
So, for example, I could
say actually I want to look


385
00:17:34,226 --> 00:17:35,736
like what is it going
to look like with prompt


386
00:17:35,736 --> 00:17:36,916
if I had prompt text in there?


387
00:17:36,916 --> 00:17:38,476
What if the top bar was black.


388
00:17:38,476 --> 00:17:40,906
I will put this back
on inferred.


389
00:17:42,376 --> 00:17:46,766
All of these metrics do not
affect your actual application


390
00:17:46,766 --> 00:17:49,016
at runtime with one exception


391
00:17:49,206 --> 00:17:50,996
and that's the size
simulated metric.


392
00:17:51,446 --> 00:17:53,906
The size simulated metric
will actually change the size


393
00:17:53,906 --> 00:17:55,956
of your view controller but
generally you're going to put it


394
00:17:55,956 --> 00:17:58,236
into a view controller
hierarchy which will resize it,


395
00:17:58,746 --> 00:18:01,806
but it's also helpful if you
are creating free form view


396
00:18:01,806 --> 00:18:03,806
controllers, for example, and
want to set your own size.


397
00:18:04,846 --> 00:18:08,506
It's also helpful if you are
wanting to be able to design


398
00:18:08,506 --> 00:18:10,076
with a specific size
in mind even


399
00:18:10,076 --> 00:18:12,196
if your application is going
to run on multiple devices.


400
00:18:12,816 --> 00:18:17,356
The spec I was given was for
iPhone 6 Plus, so I can change


401
00:18:17,356 --> 00:18:20,536
to a 5.5 in screen size
and be able to edit


402
00:18:21,256 --> 00:18:24,766
as if the view controller
was going to be that size.


403
00:18:25,566 --> 00:18:26,276
There's other features


404
00:18:26,276 --> 00:18:27,916
of interface builder we are
not going to talk about today


405
00:18:28,196 --> 00:18:30,586
which allows you to see what
your view controller will look


406
00:18:30,586 --> 00:18:31,976
like on multiple devices


407
00:18:31,976 --> 00:18:34,306
at the same time using
the preview assistant,


408
00:18:34,706 --> 00:18:37,116
but this is really helpful
for just being able to edit


409
00:18:37,336 --> 00:18:39,006
with a particular
context in mind.


410
00:18:39,066 --> 00:18:39,686
All right.


411
00:18:40,996 --> 00:18:42,586
Let's go back to inferred


412
00:18:42,586 --> 00:18:44,076
and let's finish off
our view controller.


413
00:18:45,536 --> 00:18:47,646
Give it a title, your friends.


414
00:18:48,836 --> 00:18:50,826
Let's add some bar button items.


415
00:18:51,376 --> 00:18:57,536
We had add one for being
able to invite a new friend.


416
00:18:58,076 --> 00:19:00,646
And with Xcode 7 I can
add multiple bar items


417
00:19:00,766 --> 00:19:02,526
to my navigation item.


418
00:19:04,516 --> 00:19:09,716
[Applause]


419
00:19:10,216 --> 00:19:10,936
It's the small features, right?


420
00:19:11,516 --> 00:19:13,606
[laughter]


421
00:19:14,106 --> 00:19:16,906
Let's finish off this
by adding a segue


422
00:19:17,376 --> 00:19:20,306
to present this guy
modally, and if you zoom


423
00:19:20,306 --> 00:19:23,826
out we have a great start
to your application.


424
00:19:25,576 --> 00:19:28,166
Just like I would
refactor my code


425
00:19:28,166 --> 00:19:31,636
into separate files based
upon the reuse of it


426
00:19:31,636 --> 00:19:32,946
or related functionality,


427
00:19:32,946 --> 00:19:35,366
I can do the exact same
thing now with interface.


428
00:19:36,706 --> 00:19:40,096
If I just select the view
controllers that I want and go


429
00:19:40,096 --> 00:19:42,836
under the editor menu, I can
select refactor to storyboard.


430
00:19:43,796 --> 00:19:45,566
You can type in a name,
I will call it follow


431
00:19:45,566 --> 00:19:46,686
because this is our follow tab.


432
00:19:47,226 --> 00:19:49,856
Interface builder is going
to create a new storyboard,


433
00:19:50,046 --> 00:19:52,586
move those view controller
scenes into the storyboard


434
00:19:53,006 --> 00:19:56,546
and put a reference to the
scenes in the old storyboard.


435
00:19:57,096 --> 00:19:59,916
Now, it's really easy to
collaborate with storyboards.


436
00:20:00,516 --> 00:20:06,546
[Applause]


437
00:20:07,046 --> 00:20:07,696
And it's the big features.


438
00:20:08,191 --> 00:20:10,191
[laughter]


439
00:20:10,366 --> 00:20:13,016
Let's go back to slides.


440
00:20:13,216 --> 00:20:15,096
We have looked at a number


441
00:20:15,096 --> 00:20:16,736
of different things
here so let's recap.


442
00:20:17,416 --> 00:20:18,606
All right.


443
00:20:19,546 --> 00:20:22,096
I have given you
five best practices.


444
00:20:22,526 --> 00:20:25,046
We have adopted stack
views and dynamic type


445
00:20:25,046 --> 00:20:26,666
to make your applications
adaptable.


446
00:20:26,666 --> 00:20:30,096
We have adopted designables
and inspectables to be able


447
00:20:30,096 --> 00:20:31,536
to rapidly iterate
on your design


448
00:20:31,536 --> 00:20:32,616
without having to build and run.


449
00:20:33,236 --> 00:20:35,716
And finally we have used
storyboard references


450
00:20:35,716 --> 00:20:38,616
to make sure we are properly
modularizing our interface just


451
00:20:38,616 --> 00:20:39,616
like we would do for our code.


452
00:20:39,616 --> 00:20:42,246
I have also given
you a couple of tips


453
00:20:42,246 --> 00:20:43,786
that I hope you guys
are going to find useful


454
00:20:43,786 --> 00:20:45,386
as you're using interface
builder like being able


455
00:20:45,386 --> 00:20:48,366
to select things, being able
to customize the canvas,


456
00:20:48,856 --> 00:20:51,806
open files exactly where you
want them using multiple bar


457
00:20:51,806 --> 00:20:55,026
items and, of course, taking
advantage of simulated metrics


458
00:20:55,126 --> 00:20:59,056
to see at design time what you
are going to get at run time.


459
00:21:00,056 --> 00:21:01,666
But what happens
when I hit build?


460
00:21:01,666 --> 00:21:04,626
Let's talk a little bit about
what interface builder is doing


461
00:21:04,626 --> 00:21:05,506
for you at build time.


462
00:21:07,086 --> 00:21:08,956
Now, to do this we are going
to have to take a step back


463
00:21:09,096 --> 00:21:11,096
and look again at design time


464
00:21:11,096 --> 00:21:12,826
and where we are
going with run time.


465
00:21:13,406 --> 00:21:16,216
At design time you are
working with XML documents.


466
00:21:16,756 --> 00:21:20,626
At build time a process called
IB tool takes these documents


467
00:21:20,906 --> 00:21:23,716
and compiles them
into nib files.


468
00:21:24,186 --> 00:21:27,546
Nib files are small, very
optimized binary files


469
00:21:27,546 --> 00:21:29,956
and it uses a process
called keyed archiving


470
00:21:29,956 --> 00:21:30,726
for creating these.


471
00:21:31,806 --> 00:21:34,526
I have a few examples of
what this could look like.


472
00:21:35,366 --> 00:21:37,286
When interface builder is
compiling a storyboard it's


473
00:21:37,286 --> 00:21:38,886
doing two things first,


474
00:21:38,886 --> 00:21:41,976
it's trying to maximize the
performance of your application


475
00:21:42,526 --> 00:21:44,556
and secondly it's also
minimizing the number


476
00:21:44,556 --> 00:21:45,826
of nib files created.


477
00:21:46,816 --> 00:21:50,966
If I have a view controller with
a view and a bunch of sub views,


478
00:21:52,256 --> 00:21:53,866
interface builder, the
build time is going


479
00:21:53,866 --> 00:21:55,496
to create a nib file
for the view controller


480
00:21:55,876 --> 00:21:57,906
and create a nib
file for the view.


481
00:21:59,166 --> 00:22:00,586
Why two nib files.


482
00:22:01,476 --> 00:22:03,906
By having separate nib files
for both the view controller


483
00:22:03,906 --> 00:22:06,476
and the view, this means the
view hierarchy can be loaded


484
00:22:06,476 --> 00:22:07,216
on demand.


485
00:22:08,446 --> 00:22:10,606
With this other example here,
with the table view controller


486
00:22:10,606 --> 00:22:13,476
and navigation controller
things get even a little


487
00:22:13,476 --> 00:22:14,036
more interesting.


488
00:22:14,796 --> 00:22:16,876
Again, interface builder is
trying to minimize the number


489
00:22:16,876 --> 00:22:19,816
of nib files it's creating with
a relationship segue we know


490
00:22:19,816 --> 00:22:22,226
that those two view
controllers go together,


491
00:22:22,226 --> 00:22:24,176
so we will put those
in the same nib.


492
00:22:25,226 --> 00:22:28,676
Next we are going to give you
a nib file for the table view


493
00:22:28,926 --> 00:22:31,576
and also a nib file
for each of the cells.


494
00:22:32,326 --> 00:22:35,216
So how does this
play out at run time?


495
00:22:36,606 --> 00:22:40,456
When you allocate a storyboard
instance using UI storyboard,


496
00:22:40,726 --> 00:22:43,946
API, initially all you
are allocating memory


497
00:22:43,946 --> 00:22:46,176
for is the UI storyboard
instance itself.


498
00:22:46,546 --> 00:22:48,326
No view controllers
no views yet.


499
00:22:49,396 --> 00:22:51,426
When you instantiate your
initial view controller it will


500
00:22:51,426 --> 00:22:54,516
load the nib for that initial
view controller but, again,


501
00:22:54,596 --> 00:22:55,846
no view hierarchy
has been loaded


502
00:22:55,846 --> 00:22:57,956
yet until someone
actually asks for it.


503
00:22:59,656 --> 00:23:02,256
Similarly, if I gave that
navigation controller


504
00:23:02,256 --> 00:23:04,956
and table view controller an
identifier then I could use the


505
00:23:04,956 --> 00:23:07,656
instantiate API to
be able to get


506
00:23:07,656 --> 00:23:09,626
that view controller
instance, but, again,


507
00:23:09,626 --> 00:23:11,076
the view has not been
loaded into memory


508
00:23:11,366 --> 00:23:13,426
until someone actually
asks for it.


509
00:23:14,456 --> 00:23:15,886
How about those table
view cells?


510
00:23:16,006 --> 00:23:16,766
This is where it gets fun.


511
00:23:16,766 --> 00:23:18,326
So interface builder is going


512
00:23:18,326 --> 00:23:22,556
to automatically take table view
cells, nibs, and register them


513
00:23:22,556 --> 00:23:25,256
with the table view under
your reuse identifier


514
00:23:25,256 --> 00:23:26,986
that you set, that
table view cell.


515
00:23:26,986 --> 00:23:30,096
Now, what this means is that
these cells are not going


516
00:23:30,096 --> 00:23:33,536
to be loaded until someone
actually DQs the cell


517
00:23:33,536 --> 00:23:34,516
with the identifier.


518
00:23:34,516 --> 00:23:39,176
Now, it also means that once
the nib run time has loaded


519
00:23:39,176 --> 00:23:42,976
that nib file into memory, it
can rapidly instantiate it.


520
00:23:43,306 --> 00:23:46,856
So there are a couple of
take aways for talking


521
00:23:46,856 --> 00:23:48,796
about interface builder
at build time.


522
00:23:49,316 --> 00:23:50,636
The first is performance.


523
00:23:51,116 --> 00:23:53,456
Interface builder is
working on your behalf


524
00:23:53,806 --> 00:23:56,146
to make the performance of your
applications as good as we can.


525
00:23:57,496 --> 00:23:59,586
Nib files are only
loaded on demand


526
00:24:00,036 --> 00:24:02,906
and nib files themselves are
really small and optimized.


527
00:24:04,176 --> 00:24:08,396
Secondly, interface builder has
reuse of different nib files.


528
00:24:08,396 --> 00:24:10,556
For example, on the table
view cell that's we saw,


529
00:24:11,066 --> 00:24:13,586
once the runtime has
the nib file it's able


530
00:24:13,586 --> 00:24:17,156
to reinstantiate it very very
quickly as new cells are needed.


531
00:24:18,446 --> 00:24:21,306
Finally hopefully you
can see the lifecycle


532
00:24:21,306 --> 00:24:23,976
of how things are happening
between build time and runtime


533
00:24:24,266 --> 00:24:26,556
so you know how to interact
with the different objects


534
00:24:26,796 --> 00:24:28,676
like your view controllers
and your view hierarchies.


535
00:24:29,186 --> 00:24:33,346
We talks about interface
builder at design time.


536
00:24:33,586 --> 00:24:35,786
We have pulled the hood up
a little bit at build time,


537
00:24:35,786 --> 00:24:38,276
but we're going to spend the
rest of the session talking


538
00:24:38,276 --> 00:24:41,236
about interface builder at
runtime and what happens


539
00:24:41,236 --> 00:24:43,066
when you have all those
different products


540
00:24:43,066 --> 00:24:43,766
and languages.


541
00:24:43,896 --> 00:24:46,066
To do that, I'm going to bring
up my colleague, Tony Ricciardi.


542
00:24:47,516 --> 00:24:49,926
[Applause]


543
00:24:50,426 --> 00:24:50,976
>> TONY RICCIARDI:
Thank you Kevin.


544
00:24:52,856 --> 00:24:53,426
Good afternoon.


545
00:24:54,176 --> 00:24:56,286
My name is Tony, and I also
work on interface builder.


546
00:24:57,026 --> 00:25:00,596
So Kevin just gave you
some great best practices


547
00:25:00,596 --> 00:25:04,126
for building your UI at design
time and then he gave you a peek


548
00:25:04,126 --> 00:25:06,366
at what happens behind
the scenes at build time.


549
00:25:06,366 --> 00:25:09,276
Now, I'm going to give
you a few examples


550
00:25:09,276 --> 00:25:13,046
of how you can add dynamic
behavior to your UI at run time.


551
00:25:13,966 --> 00:25:16,656
Interface builder supports
three general mechanisms


552
00:25:16,986 --> 00:25:18,696
for controlling your
UI at run time.


553
00:25:20,036 --> 00:25:21,656
First of all, you can
create connections


554
00:25:21,996 --> 00:25:25,466
between your storyboard and your
source code using IB actions


555
00:25:25,576 --> 00:25:28,276
and IB outlets.


556
00:25:28,446 --> 00:25:31,346
You can also customize the
behavior of your segues


557
00:25:31,526 --> 00:25:33,506
or dynamically instantiate


558
00:25:33,506 --> 00:25:36,296
and add view controllers
using the storyboard API.


559
00:25:38,186 --> 00:25:41,286
And finally, you can use
auto layout or size classes


560
00:25:41,676 --> 00:25:44,156
to specify how your
UI adapts as the size


561
00:25:44,156 --> 00:25:45,176
of its container changes.


562
00:25:46,216 --> 00:25:49,166
Let's start with connections.


563
00:25:49,166 --> 00:25:51,306
In Swift, IB outlets are


564
00:25:51,306 --> 00:25:53,656
by default implicitly
unwrapped optionals.


565
00:25:54,926 --> 00:25:57,296
If you have an outlet between
a view controller and one


566
00:25:57,296 --> 00:26:00,026
of the views in its hierarchy
you can safely unwrap


567
00:26:00,026 --> 00:26:01,946
that optional after viewed load.


568
00:26:03,776 --> 00:26:06,186
Sometimes you will have an
additional property stored


569
00:26:06,186 --> 00:26:08,216
on your view controller
that affects the appearance


570
00:26:08,216 --> 00:26:11,566
of that view, and in that
case, you will want to unwrap


571
00:26:11,616 --> 00:26:14,066
that property using
optional chaining


572
00:26:14,216 --> 00:26:16,386
within the did set
observer of that property.


573
00:26:17,306 --> 00:26:19,986
In case your outlet
hasn't been connected yet.


574
00:26:21,356 --> 00:26:24,926
IBAction is allowing you
to respond to events sent


575
00:26:24,926 --> 00:26:27,736
from gesture recognizers
and controls.


576
00:26:28,246 --> 00:26:30,886
You might use an action
just to update some state


577
00:26:31,066 --> 00:26:34,296
without navigating away
from the current view.


578
00:26:34,776 --> 00:26:37,546
You can also use an IBAction
to dynamically choose


579
00:26:37,546 --> 00:26:39,656
which segue you want to
perform after an event.


580
00:26:43,516 --> 00:26:44,916
Next we have the storyboard API.


581
00:26:45,846 --> 00:26:50,106
The class UI storyboard or NS
storyboard on the Mac allows you


582
00:26:50,106 --> 00:26:52,346
to grab a reference
to a storyboard file


583
00:26:52,346 --> 00:26:54,766
and instantiate view controllers
from that storyboard.


584
00:26:55,366 --> 00:26:57,826
It's extremely useful if
you have a reusable piece


585
00:26:57,826 --> 00:26:59,936
of UI you want to
repeatedly instantiate.


586
00:27:00,566 --> 00:27:03,446
It's also the only way you can
connect multiple storyboards


587
00:27:03,446 --> 00:27:05,296
in your app if you
are displaying prior


588
00:27:05,296 --> 00:27:08,166
to iOS 9 or Mac OS 10, 11.


589
00:27:09,116 --> 00:27:13,296
We also have a lot of great
API hooks on UI controller


590
00:27:13,296 --> 00:27:16,756
to allow you to customize
behavior of your segues.


591
00:27:16,756 --> 00:27:18,506
This year we have made
a lot of improvements


592
00:27:18,566 --> 00:27:20,506
to segue unwinding on iOS.


593
00:27:21,056 --> 00:27:24,846
We have made it a lot easier
to subclass UI storyboard segue


594
00:27:24,846 --> 00:27:25,936
or NS storyboard segue.


595
00:27:25,936 --> 00:27:27,746
If you would like to
learn more about that,


596
00:27:28,026 --> 00:27:29,566
please come to our What's New


597
00:27:29,566 --> 00:27:31,066
in Storyboard session
tomorrow morning.


598
00:27:31,526 --> 00:27:35,456
Finally we have adaptability.


599
00:27:37,066 --> 00:27:39,486
Interface builder
supports two technologies


600
00:27:39,806 --> 00:27:42,506
to help you adapt your UI to
different container sizes.


601
00:27:43,136 --> 00:27:48,076
First of all, we have auto
layout which allows you to size


602
00:27:48,176 --> 00:27:50,846
and position your views
relative to each other


603
00:27:51,226 --> 00:27:54,226
so that you are not relying
on hard coded frame values.


604
00:27:55,496 --> 00:27:57,246
In some situations,
you will want


605
00:27:57,246 --> 00:28:00,886
to make a significant change
to your layout as the width


606
00:28:01,056 --> 00:28:03,526
or height of the container
crosses a certain threshold,


607
00:28:04,066 --> 00:28:06,876
and in those situations we have
another great feature called


608
00:28:06,876 --> 00:28:11,626
size classes which makes
that very easy to do.


609
00:28:11,876 --> 00:28:13,056
Now, I would like
to give you a demo


610
00:28:13,056 --> 00:28:15,896
of how you can apply these
three general techniques to work


611
00:28:15,896 --> 00:28:17,206
with interface builder
at run time.


612
00:28:17,636 --> 00:28:18,736
Let's head over to Xcode.


613
00:28:26,616 --> 00:28:30,096
Today we will be building a UI
to keep track of the activity


614
00:28:30,096 --> 00:28:32,306
of your friends on
their Roadtrip and plan


615
00:28:32,306 --> 00:28:34,626
on integrating this into
Kevin's Roadtrip app later on.


616
00:28:36,326 --> 00:28:41,136
As you can see in this UI,
I have three rows of posts,


617
00:28:41,806 --> 00:28:45,406
and within each row, I
show the top three posts


618
00:28:45,406 --> 00:28:46,196
from that category.


619
00:28:46,796 --> 00:28:50,816
If we take a look at the
storyboard for my app,


620
00:28:51,356 --> 00:28:53,886
you can see I have implemented
this UI using a stack view.


621
00:28:54,856 --> 00:28:57,426
Within this stack view, I
have three container views.


622
00:28:58,906 --> 00:29:02,726
A container view allows you to
embed one view controller inside


623
00:29:02,726 --> 00:29:04,936
of another one, and
that's extremely useful


624
00:29:04,936 --> 00:29:08,136
if you have a reusable piece
of UI like this that you want


625
00:29:08,136 --> 00:29:10,906
to use multiple times
within the same scene.


626
00:29:11,736 --> 00:29:13,156
My embedded view controller


627
00:29:13,156 --> 00:29:14,706
over here has a stack
view of its own.


628
00:29:15,246 --> 00:29:17,756
In this stack view
holds multiple instances


629
00:29:17,836 --> 00:29:20,136
of this post view
controller down here.


630
00:29:20,876 --> 00:29:23,846
The number of posts that I show
in each category is controlled


631
00:29:23,846 --> 00:29:26,346
by a user setting and so
I don't know it statically


632
00:29:26,346 --> 00:29:26,926
at design time.


633
00:29:27,936 --> 00:29:30,196
Instead of using container
views like I do over here,


634
00:29:30,196 --> 00:29:31,856
for this view controller,


635
00:29:31,856 --> 00:29:34,266
I instantiate it using
the storyboard API.


636
00:29:35,556 --> 00:29:36,976
I refer to this view controller


637
00:29:37,016 --> 00:29:42,256
from code using its storyboard
ID up here which I have set


638
00:29:42,256 --> 00:29:43,716
up here in the identity
inspector.


639
00:29:45,066 --> 00:29:47,096
Let's take a look at the
code where I do that.


640
00:29:47,096 --> 00:29:52,026
I'm going to use the jump bar to
navigate to the source code file


641
00:29:52,026 --> 00:29:53,476
for my post stack
view controller.


642
00:30:01,376 --> 00:30:02,376
All right.


643
00:30:02,376 --> 00:30:03,526
So you can see down here


644
00:30:03,526 --> 00:30:12,846
in my view.load method I'm using
the storybook API instantiate


645
00:30:12,846 --> 00:30:13,996
that post view controller.


646
00:30:15,066 --> 00:30:18,746
Specifically, I'm using
the storyboard property


647
00:30:19,206 --> 00:30:20,986
that I'm getting from
UI view controller


648
00:30:21,916 --> 00:30:24,576
and then I'm calling instantiate
view controller with identifier.


649
00:30:25,316 --> 00:30:29,456
And that identifier I pass in
is the same string we just saw


650
00:30:29,456 --> 00:30:30,406
in the identity inspector.


651
00:30:30,986 --> 00:30:35,396
After I add or after I
instantiate the child,


652
00:30:35,726 --> 00:30:37,816
I add it as a child
view controller.


653
00:30:37,816 --> 00:30:40,066
And then I add it's view


654
00:30:40,256 --> 00:30:41,906
as an arranged sub
view of my stacking.


655
00:30:43,066 --> 00:30:46,626
So the storyboard API is
great for instantiating


656
00:30:46,626 --> 00:30:49,196
and adding a child view
controller, but what if you want


657
00:30:49,796 --> 00:30:51,796
to add a sub view
that is not associated


658
00:30:51,796 --> 00:30:52,746
with a different
view controller.


659
00:30:53,506 --> 00:30:55,336
Let's head back to the
storyboard for an example.


660
00:30:56,896 --> 00:31:00,246
If we take a look
up here at the top


661
00:31:00,246 --> 00:31:03,616
of my activity view controller,
you can see I have a view


662
00:31:03,616 --> 00:31:04,436
up here in the scene doc.


663
00:31:05,376 --> 00:31:06,286
The scene doc allows you


664
00:31:06,286 --> 00:31:09,366
to store top level objects
alongside your view controller


665
00:31:09,956 --> 00:31:12,106
and you might put a view in
your scene doc if you don't want


666
00:31:12,106 --> 00:31:14,906
that view to initially be
part of your view at run time.


667
00:31:15,996 --> 00:31:18,856
In Xcode 7 when you put
a view in your scene doc


668
00:31:18,856 --> 00:31:22,096
and you select it, it
shows up in its own editor


669
00:31:22,096 --> 00:31:23,016
above the view controller.


670
00:31:24,516 --> 00:31:26,926
[Applause]


671
00:31:27,426 --> 00:31:30,436
This means you can now visually
edit your views right here


672
00:31:30,436 --> 00:31:32,996
in the storyboard canvas, even
if they are not initially part


673
00:31:32,996 --> 00:31:33,706
of your view hierarchy.


674
00:31:34,166 --> 00:31:37,226
This view here shows
an error message


675
00:31:37,226 --> 00:31:38,376
if there is a problem
connecting.


676
00:31:38,916 --> 00:31:42,316
So what I want to do now is
create an outlet connection


677
00:31:42,406 --> 00:31:45,006
to this view and
then add it from code


678
00:31:45,176 --> 00:31:46,106
if there is a problem
connecting.


679
00:31:47,306 --> 00:31:50,196
I want to open up the assistant
editor and that's going


680
00:31:50,196 --> 00:31:53,586
to take me to the implementation
for my activity view controller.


681
00:31:54,166 --> 00:31:56,916
And then I'm just
going to control drag


682
00:31:57,046 --> 00:32:00,726
over to the source code and when
I let go, I get a little pop


683
00:32:00,726 --> 00:32:02,926
over allowing me to configure
my outlet connection.


684
00:32:04,246 --> 00:32:07,736
But -- the first option
here is whether I want


685
00:32:07,736 --> 00:32:09,396
to make an outlet or
outlet collection.


686
00:32:10,336 --> 00:32:14,396
Outlet collections are great
for adding or removing groups


687
00:32:14,396 --> 00:32:17,686
of sub views or constraints
all at once, but in my case,


688
00:32:17,816 --> 00:32:19,176
I just want to add
a single view,


689
00:32:19,176 --> 00:32:20,336
so I'm going to choose outlet.


690
00:32:22,246 --> 00:32:23,546
Next we can name the connection.


691
00:32:23,546 --> 00:32:26,006
I'm going to call it
connection error view.


692
00:32:26,676 --> 00:32:33,426
And the last option I want to
point out is the storage type,


693
00:32:34,456 --> 00:32:36,066
which can either
be strong or weak.


694
00:32:37,936 --> 00:32:39,996
In general you should
make your outlet strong,


695
00:32:40,656 --> 00:32:43,516
especially if you are connecting
an outlet to a sub view


696
00:32:43,596 --> 00:32:45,906
or to a constraint that's not
always going to be retained


697
00:32:45,906 --> 00:32:46,696
by the view hierarchy.


698
00:32:47,426 --> 00:32:50,516
The only time you really need
to make an outlet weak is


699
00:32:50,516 --> 00:32:53,156
if you have a custom view
that references something back


700
00:32:53,156 --> 00:32:55,666
up the view hierarchy and in
general that's not recommended.


701
00:32:55,666 --> 00:32:58,926
So I'm going to choose strong
and I will click connect


702
00:32:59,346 --> 00:33:00,756
which will generate my outlet.


703
00:33:01,566 --> 00:33:05,916
Now, I'm just going
to paste in some code,


704
00:33:06,296 --> 00:33:09,226
and this code is an
implementation of view did load.


705
00:33:10,276 --> 00:33:14,196
And I check if there is a
problem connecting and if it so,


706
00:33:14,426 --> 00:33:18,566
I add my connection error view
to the top of my root stack view


707
00:33:19,076 --> 00:33:23,516
and I'm accessing both
views using outlets.


708
00:33:23,516 --> 00:33:31,236
Let's take a look at
this in the simulator.


709
00:33:31,236 --> 00:33:32,826
So as you can see, there
was a problem connecting,


710
00:33:33,616 --> 00:33:35,936
and now my view is showing up
right at the top as we expected.


711
00:33:37,316 --> 00:33:40,666
So this UI looks great
on a full screen iPad.


712
00:33:40,696 --> 00:33:43,086
What happens if I
run it in split view?


713
00:33:43,776 --> 00:33:49,296
I'm just going to drag the
split to be in the middle


714
00:33:49,296 --> 00:33:50,096
of the screen and let go,


715
00:33:50,186 --> 00:33:53,416
and you can see my UI
is not doing a great job


716
00:33:53,416 --> 00:33:54,526
of adapting to the narrow width.


717
00:33:56,016 --> 00:33:59,266
What I really want is for these
posts to lay out vertically


718
00:33:59,666 --> 00:34:00,786
when the width is compact


719
00:34:01,746 --> 00:34:04,066
so that each post can
get the full width


720
00:34:04,116 --> 00:34:05,236
of the screen to itself.


721
00:34:05,236 --> 00:34:09,106
And at the same time, when we
are back in full screen mode,


722
00:34:09,335 --> 00:34:11,366
I want my stack views
to continue to lay


723
00:34:11,366 --> 00:34:12,755
out horizontally
like they are now.


724
00:34:14,946 --> 00:34:17,196
So to do that, I'm going to
head back to my storyboard,


725
00:34:17,815 --> 00:34:19,186
and I'm going to
close the assistant


726
00:34:19,186 --> 00:34:20,386
to give us a little more room.


727
00:34:20,996 --> 00:34:24,025
And I'm going to select
my stack view and head


728
00:34:24,025 --> 00:34:25,376
over to its attributes
inspector.


729
00:34:25,916 --> 00:34:31,286
You can see currently my stack
view is configured to lay


730
00:34:31,286 --> 00:34:33,406
out horizontally, and next


731
00:34:33,406 --> 00:34:35,706
to this access property
there is a plus button.


732
00:34:36,565 --> 00:34:39,235
This plus button allows you to
add a size class customization.


733
00:34:40,076 --> 00:34:43,585
A size class is an abstract
range of sizes in one


734
00:34:43,585 --> 00:34:46,456
or two dimensions
and in my case I want


735
00:34:46,505 --> 00:34:49,786
to customize this property
for when the width is compact.


736
00:34:51,356 --> 00:34:53,045
And since I don't care
about the height dimension,


737
00:34:53,126 --> 00:34:53,966
I will choose any height.


738
00:34:55,666 --> 00:34:57,416
When I do that, I get a
new row in my inspector


739
00:34:57,976 --> 00:35:00,736
and the value I put here
is going to take effect


740
00:35:01,016 --> 00:35:05,186
when the width is compact
and the height is anything.


741
00:35:05,186 --> 00:35:06,556
I will change that
to vertical now.


742
00:35:06,556 --> 00:35:13,286
And I will run this again.


743
00:35:13,286 --> 00:35:15,066
So once again we
are in full screen


744
00:35:15,346 --> 00:35:18,486
and our stack views are still
laying out horizontally.


745
00:35:19,166 --> 00:35:21,606
Now, let's try this in
split view mode again.


746
00:35:26,136 --> 00:35:26,286
All right.


747
00:35:26,286 --> 00:35:27,246
We got it.


748
00:35:29,676 --> 00:35:31,816
So there you go, now our
accessory view is laying


749
00:35:31,816 --> 00:35:33,376
out vertically like we wanted


750
00:35:33,546 --> 00:35:35,886
and each post gets the full
width of the half screen.


751
00:35:36,516 --> 00:35:41,396
[Applause]


752
00:35:41,896 --> 00:35:44,136
So that was just one way
you can use size classes.


753
00:35:44,136 --> 00:35:47,826
You can override a property
value for single property,


754
00:35:48,396 --> 00:35:51,676
but you can also add and
remove entirely new sub views


755
00:35:51,676 --> 00:35:53,586
or constraints, and if
you want to learn more


756
00:35:53,586 --> 00:35:55,046
about all you can do
with size classes,


757
00:35:55,256 --> 00:35:56,466
we had a fantastic session


758
00:35:56,466 --> 00:35:58,826
on that last year called
building adaptive apps


759
00:35:58,826 --> 00:36:01,186
with UI kit.


760
00:36:01,186 --> 00:36:03,326
That's all I have for the demo,


761
00:36:03,326 --> 00:36:04,486
so let's head back
to the slides.


762
00:36:10,656 --> 00:36:13,046
Kevin and I just showed you
a ton of great techniques


763
00:36:13,046 --> 00:36:14,916
to help you get the most
out of interface builder.


764
00:36:15,336 --> 00:36:16,796
Let's review the
most important ones.


765
00:36:17,416 --> 00:36:21,726
First of all, you saw how
you can build flexible user


766
00:36:21,726 --> 00:36:23,306
interfaces that don't rely


767
00:36:23,396 --> 00:36:26,586
on hard coded frame values
using auto layout constraints


768
00:36:26,896 --> 00:36:29,546
and stack views.


769
00:36:29,736 --> 00:36:31,936
Then Kevin showed you how
you can rapidly iterate


770
00:36:31,936 --> 00:36:34,796
on the appearance of your
custom views using designables


771
00:36:34,796 --> 00:36:35,616
and inspectables.


772
00:36:37,756 --> 00:36:39,746
We introduced a new feature


773
00:36:39,746 --> 00:36:43,186
to help you modularize your UI
called storyboard references,


774
00:36:43,186 --> 00:36:46,526
and then I showed you how you
can use the storyboard API


775
00:36:47,096 --> 00:36:49,456
to repeatedly instantiate
reusable components.


776
00:36:51,046 --> 00:36:54,046
And finally, you saw how
you can make your UI adapt


777
00:36:54,236 --> 00:36:57,506
to different container
sizes using size classes.


778
00:36:58,556 --> 00:37:00,976
If you would like more
information, you can post


779
00:37:00,976 --> 00:37:03,386
on the forums or
contact our evangelist


780
00:37:03,896 --> 00:37:06,976
and we also highly recommend
checking out our What's New


781
00:37:06,976 --> 00:37:08,966
in Storyboard session
tomorrow morning as well


782
00:37:08,966 --> 00:37:10,966
as our two auto layout
sessions later that day.


783
00:37:12,176 --> 00:37:13,456
Once again if you
want to learn more


784
00:37:13,456 --> 00:37:14,876
about size classes please check


785
00:37:14,876 --> 00:37:17,566
out our building adaptive
app session from last year.


786
00:37:18,406 --> 00:37:19,716
And finally if you
want to learn more


787
00:37:19,716 --> 00:37:21,586
about troubleshooting
your auto layout


788
00:37:21,716 --> 00:37:25,426
within Xcode we had a great
session on that in 2013.


789
00:37:25,426 --> 00:37:27,576
And thank you all and
please enjoy the rest


790
00:37:27,576 --> 00:37:27,976
of the conference.


791
00:37:28,516 --> 00:37:31,500
[Applause]

