1
00:00:24,516 --> 00:00:31,546
[ Applause ]


2
00:00:32,046 --> 00:00:32,506
>> KATIE SKINNER: Hi, everyone.


3
00:00:32,836 --> 00:00:35,556
My name's Katie Skinner,
and along with Jason Novak,


4
00:00:36,126 --> 00:00:37,916
we are going to be
talking about privacy


5
00:00:37,916 --> 00:00:39,376
in your app this afternoon.


6
00:00:40,386 --> 00:00:43,506
We are both members of Product
Security and Privacy at Apple.


7
00:00:44,556 --> 00:00:47,586
That means we work with
teams all across Apple


8
00:00:47,986 --> 00:00:50,386
to build privacy into
our apps and services.


9
00:00:50,386 --> 00:00:55,266
A few of the teams that I work
closely with are Apple Pay,


10
00:00:55,596 --> 00:00:58,356
Siri, Proactive Assistant,
Health,


11
00:00:59,356 --> 00:01:01,206
and our newest OS, watchOS.


12
00:01:02,286 --> 00:01:04,206
First I am going to
talk a little bit


13
00:01:04,206 --> 00:01:09,806
about why privacy matters at
Apple and how we think about it.


14
00:01:10,416 --> 00:01:14,246
At Apple, we see
privacy as a human right.


15
00:01:15,486 --> 00:01:18,206
That's a guiding principle
that we take every day


16
00:01:18,206 --> 00:01:23,576
into how we design our apps,
our services, and new versions


17
00:01:23,576 --> 00:01:26,366
of iOS, OS X, and watchOS.


18
00:01:28,196 --> 00:01:30,406
Users want their
privacy respected


19
00:01:30,406 --> 00:01:33,846
when they use our
products, and all developers,


20
00:01:33,916 --> 00:01:36,246
everyone in this room,
shares that responsibility.


21
00:01:37,286 --> 00:01:38,496
So when you are building
your apps,


22
00:01:39,016 --> 00:01:45,346
be mindful of user privacy, and
build privacy into your apps.


23
00:01:45,896 --> 00:01:50,246
Not only at Apple are we focused
on building great products,


24
00:01:50,626 --> 00:01:54,716
we also are focused on
building great tools for you,


25
00:01:55,466 --> 00:01:58,616
the developer community,
to make it easy for you


26
00:01:58,616 --> 00:02:01,376
to respect user privacy
and build privacy


27
00:02:01,486 --> 00:02:02,916
into your apps and services.


28
00:02:03,716 --> 00:02:07,686
At the end of the day,
all of our success relies


29
00:02:07,686 --> 00:02:09,246
on our relationship
with our users.


30
00:02:10,876 --> 00:02:13,906
And trust is key to
maintaining that relationship.


31
00:02:15,636 --> 00:02:18,716
We've all read stories in
the press about breaches,


32
00:02:19,726 --> 00:02:24,056
about misuse of user data,
and nobody in this room wants


33
00:02:24,056 --> 00:02:27,486
to be the next one in the news.


34
00:02:27,636 --> 00:02:31,066
Our platform is a place
where users have excited


35
00:02:31,066 --> 00:02:33,106
about new experiences, excited


36
00:02:33,106 --> 00:02:35,696
about downloading
new applications.


37
00:02:36,506 --> 00:02:41,256
And it's all about keeping
our app ecosystem healthy


38
00:02:41,446 --> 00:02:42,096
and thriving.


39
00:02:42,096 --> 00:02:46,226
And the trustworthiness of
all of you is part of that.


40
00:02:47,646 --> 00:02:52,266
So be trustworthy
with our users.


41
00:02:52,916 --> 00:02:56,516
Now, users trust us with
lots of sensitive data.


42
00:02:57,996 --> 00:03:00,236
And we need to be good
stewards of their data.


43
00:03:01,356 --> 00:03:06,666
And architecting for privacy is
the place to start to do that.


44
00:03:06,826 --> 00:03:09,836
Now, all data should
have a retention policy.


45
00:03:10,786 --> 00:03:12,986
Now, how do you come up
with that retention policy?


46
00:03:13,486 --> 00:03:16,326
The place to start is how
you will use that data.


47
00:03:17,766 --> 00:03:20,706
Now, if you are no
longer using that data,


48
00:03:21,416 --> 00:03:23,626
it's no longer serving
a user need,


49
00:03:24,236 --> 00:03:27,546
then you should delete
that data.


50
00:03:27,706 --> 00:03:30,746
All data that you are
storing and the more data


51
00:03:30,746 --> 00:03:34,706
that you store makes you a
richer target for attackers,


52
00:03:35,296 --> 00:03:36,566
a more valuable target.


53
00:03:37,686 --> 00:03:40,646
So only collect the
data that you need.


54
00:03:41,306 --> 00:03:45,606
I believe that all data
collected carries risk,


55
00:03:46,606 --> 00:03:51,226
so you need to balance the
value that you provide to users


56
00:03:52,056 --> 00:03:55,856
with the risks inherent in
collecting and storing data.


57
00:03:56,546 --> 00:03:59,836
Now, you can mitigate this risk


58
00:03:59,836 --> 00:04:02,886
by applying data
minimization techniques.


59
00:04:04,376 --> 00:04:08,856
To learn more about the list of
techniques and to see examples


60
00:04:08,856 --> 00:04:15,216
on how to apply them, go and
watch User Privacy in iOS


61
00:04:15,666 --> 00:04:18,226
and OS X from last year's WWDC.


62
00:04:19,435 --> 00:04:24,756
Aggregation, de-resolution,
these are all ways


63
00:04:24,756 --> 00:04:27,596
to reduce the risk for
the data that you retain.


64
00:04:28,956 --> 00:04:30,506
But which techniques
should you apply?


65
00:04:32,096 --> 00:04:35,676
The place to start is what
is the use of the data?


66
00:04:36,066 --> 00:04:36,966
How are you going to use it?


67
00:04:37,946 --> 00:04:39,966
What questions are
you going to answer?


68
00:04:40,796 --> 00:04:42,816
What decisions is
this data driving?


69
00:04:44,236 --> 00:04:46,876
And if you can't come up with
an answer to this question,


70
00:04:46,876 --> 00:04:48,336
you can't think of anything,


71
00:04:48,776 --> 00:04:52,336
then you shouldn't be
retaining this data at all.


72
00:04:53,186 --> 00:04:57,096
Apply the last technique
on the list, minimization,


73
00:04:57,516 --> 00:04:59,956
and don't collect or
transfer the data at all.


74
00:05:01,636 --> 00:05:05,886
Now, for the data that
you decide is actionable,


75
00:05:06,696 --> 00:05:09,996
all data sent off device
should be protected in transit.


76
00:05:11,366 --> 00:05:14,216
Later Jason will talk about
App Transport Security,


77
00:05:14,496 --> 00:05:17,576
which is a new way in
iOS 9 to make it easier


78
00:05:18,006 --> 00:05:21,356
to communicate securely
with your services.


79
00:05:23,036 --> 00:05:26,576
To reduce the risk, avoid
transferring data off device


80
00:05:26,576 --> 00:05:29,356
when possible, especially
think twice


81
00:05:29,696 --> 00:05:31,356
about sensitive data categories.


82
00:05:32,096 --> 00:05:33,836
This includes things
like health data.


83
00:05:34,946 --> 00:05:39,116
For example, during a cycling
workout, there's information


84
00:05:39,116 --> 00:05:42,446
like the user's heart rate,
the distance traveled,


85
00:05:42,706 --> 00:05:45,516
maybe the user's height and
weight, calibration data,


86
00:05:46,136 --> 00:05:49,666
and all of that is processed
on the paired devices


87
00:05:50,266 --> 00:05:52,726
to show what calories were
burned during that workout.


88
00:05:53,776 --> 00:05:56,436
None of that data is sent
to server for processing.


89
00:05:57,106 --> 00:06:02,266
Now, data needs to be
protected not only in transit


90
00:06:02,476 --> 00:06:03,846
but also when persisted.


91
00:06:05,056 --> 00:06:08,966
First think about does the
data need to be stored at all?


92
00:06:10,126 --> 00:06:10,986
Can it be transient?


93
00:06:11,566 --> 00:06:13,576
Can it be stored only in memory?


94
00:06:14,186 --> 00:06:17,416
Or does it need to
be written to disk?


95
00:06:17,416 --> 00:06:19,976
On iOS and watchOS, take
advantage of data protection,


96
00:06:20,026 --> 00:06:22,276
which I will be talking
about more later.


97
00:06:23,596 --> 00:06:25,396
If you are storing
your data server-side,


98
00:06:25,486 --> 00:06:27,326
make sure you encrypt
your data at rest.


99
00:06:28,446 --> 00:06:32,176
With CloudKit, we make
it simple to do this.


100
00:06:32,386 --> 00:06:35,546
Think about what identifiers are
sent and stored with your data.


101
00:06:36,166 --> 00:06:38,946
Jason's going to talk
in depth later about how


102
00:06:38,946 --> 00:06:40,736
to choose an appropriate
identifier.


103
00:06:43,156 --> 00:06:45,906
Now, you want to be
clear with your users


104
00:06:45,986 --> 00:06:48,596
about what you are doing
with your data, their data,


105
00:06:48,866 --> 00:06:51,096
how you are using it, if you are
sharing it with third parties,


106
00:06:51,096 --> 00:06:53,166
and this is all part
of transparency.


107
00:06:53,646 --> 00:06:55,886
Making sure users
understand what's happening,


108
00:06:56,916 --> 00:06:58,696
avoiding any user surprise.


109
00:07:00,576 --> 00:07:05,066
Now, one way to do this
is to be clear to users


110
00:07:05,066 --> 00:07:07,826
about what data is being
collected or stored.


111
00:07:08,246 --> 00:07:10,196
Give users a way to
inspect their data.


112
00:07:11,826 --> 00:07:14,606
Also, when you're
collecting the data


113
00:07:14,606 --> 00:07:18,686
or when you give users a
choice, it's at that point


114
00:07:18,686 --> 00:07:20,656
that you really want to
give them the information


115
00:07:21,106 --> 00:07:22,206
to make a good choice.


116
00:07:22,866 --> 00:07:25,016
You can do that with
things like purpose strings.


117
00:07:25,596 --> 00:07:26,896
When users are deciding
if they want


118
00:07:26,896 --> 00:07:28,866
to grant you access to,
maybe, their photos.


119
00:07:30,256 --> 00:07:32,036
Also, you want to
give users control.


120
00:07:32,876 --> 00:07:35,266
Give them a way to
remake their decision.


121
00:07:35,426 --> 00:07:38,396
If they decide later that
they want a different decision


122
00:07:38,396 --> 00:07:39,026
for themselves.


123
00:07:39,866 --> 00:07:41,416
Also, give them a chance


124
00:07:41,416 --> 00:07:44,566
to reset information you
store or even delete.


125
00:07:44,936 --> 00:07:50,896
Now I am going to talk about
some updates to our platforms


126
00:07:50,896 --> 00:07:52,746
to improve user privacy.


127
00:07:52,746 --> 00:07:58,136
I am going to talk about
changes in iOS, OS X,


128
00:07:58,136 --> 00:08:01,996
and some of the foundational
bits for watchOS.


129
00:08:03,456 --> 00:08:06,576
So first on iOS, we are going
to go back to last year.


130
00:08:07,526 --> 00:08:11,226
Last year, we began using
privately assigned MAC addresses


131
00:08:11,556 --> 00:08:13,456
for certain types
of Wi-Fi scans.


132
00:08:14,656 --> 00:08:17,336
In iOS 9, we've increased
the number of scans


133
00:08:17,606 --> 00:08:19,766
that use privately
assigned MAC addresses.


134
00:08:20,596 --> 00:08:24,296
Note if your functionality
is based on working


135
00:08:24,296 --> 00:08:27,276
with an external piece of
hardware, make sure to test


136
00:08:27,276 --> 00:08:30,016
on iOS 9 because you cannot rely


137
00:08:30,016 --> 00:08:32,525
on the MAC address
before authentication.


138
00:08:33,155 --> 00:08:40,025
Now, simply put, we think
what apps are installed


139
00:08:40,025 --> 00:08:42,086
on a user's device
are their business.


140
00:08:43,856 --> 00:08:48,436
Users use their devices for lots
of things, and they have lots


141
00:08:48,436 --> 00:08:50,576
of reasons for what kinds of
apps they want to install,


142
00:08:51,396 --> 00:08:54,346
from health to financial
to home.


143
00:08:55,566 --> 00:08:58,316
Now, what apps a
user has installed


144
00:08:58,716 --> 00:09:01,496
and what can be gleaned from
them can be very sensitive.


145
00:09:01,496 --> 00:09:06,066
Trying to detect what
apps a user has installed,


146
00:09:06,686 --> 00:09:10,706
either to identify them
or to glean information,


147
00:09:10,946 --> 00:09:13,616
is contrary to the
iOS security model.


148
00:09:15,396 --> 00:09:19,846
Ultimately, the iOS security
model the apps are isolated.


149
00:09:20,916 --> 00:09:23,536
They live within their own
sandbox, protecting them


150
00:09:23,796 --> 00:09:25,236
from other apps and processes.


151
00:09:25,696 --> 00:09:29,976
Trying to determine what
apps a user has installed


152
00:09:29,976 --> 00:09:33,816
in their device is a subversion
of the iOS security model.


153
00:09:36,006 --> 00:09:38,536
Now, along those
lines, the behavior


154
00:09:38,536 --> 00:09:40,426
of canOpenURL is
changing this year.


155
00:09:41,406 --> 00:09:47,376
The purpose of canOpenURL
is to determine


156
00:09:47,426 --> 00:09:49,986
if an app can open a
given URL resource.


157
00:09:51,006 --> 00:09:53,986
This can be used to
support functionality,


158
00:09:54,066 --> 00:09:57,666
like revealing new
things that a user can do


159
00:09:58,456 --> 00:10:02,886
if an app is installed
in the device.


160
00:10:04,266 --> 00:10:07,736
One of the things you should be
moving towards are extensions


161
00:10:08,436 --> 00:10:09,616
and universal links.


162
00:10:09,916 --> 00:10:12,026
They both support a lot
of the same functionality,


163
00:10:12,116 --> 00:10:14,396
and we encourage
you to move to that.


164
00:10:14,396 --> 00:10:18,046
But if you continue to use URL
schemes when you build your app


165
00:10:18,046 --> 00:10:21,806
for iOS 9 and you want to call
URL schemes, you will now need


166
00:10:21,896 --> 00:10:24,216
to declare them in
your apps Info.plist.


167
00:10:24,216 --> 00:10:28,686
There is new key,
LSApplicationQueriesSchemes,


168
00:10:29,376 --> 00:10:31,676
and here you will
need to add the list


169
00:10:31,676 --> 00:10:35,426
of schemes you want
to are canOpenURL on.


170
00:10:35,616 --> 00:10:40,706
Now you don't need to change
handle calling canOpenURL.


171
00:10:41,086 --> 00:10:43,056
The actual API is not changing.


172
00:10:43,816 --> 00:10:51,276
But when you call canOpenURL, it
will check your app's Info.plist


173
00:10:51,276 --> 00:10:54,086
and see if the scheme you
are calling is declared.


174
00:10:55,236 --> 00:10:58,876
So let's say you declared it.


175
00:10:59,036 --> 00:11:05,246
When you call canOpenURL on
that scheme, it will return true


176
00:11:05,696 --> 00:11:08,286
if there is an app installed
that does support the scheme.


177
00:11:09,316 --> 00:11:15,046
Now, if there is not an app
installed, it will return no.


178
00:11:16,226 --> 00:11:18,746
So what if you didn't
declare the URL scheme.


179
00:11:19,066 --> 00:11:22,136
No matter if there is an
app or there is not an app


180
00:11:22,346 --> 00:11:25,086
that supports it, you will
always be returned no.


181
00:11:25,866 --> 00:11:35,376
So for apps that are linked
before iOS 9 and are running


182
00:11:35,456 --> 00:11:39,566
on iOS 9, they will be given
50 distinct URL schemes.


183
00:11:41,116 --> 00:11:43,406
When you call the
subsequent 51st scheme,


184
00:11:43,436 --> 00:11:45,506
you will be returned
the value no.


185
00:11:46,676 --> 00:11:49,676
These 50 URL schemes
are not restarted


186
00:11:49,706 --> 00:11:54,276
when the user restarts
the device.


187
00:11:54,416 --> 00:11:55,946
One alternate that I mention


188
00:11:56,196 --> 00:11:58,256
that is new this year
is universal links.


189
00:11:58,886 --> 00:12:01,226
The great thing about
universal links is


190
00:12:01,226 --> 00:12:03,036
if the user has the
app installed,


191
00:12:03,206 --> 00:12:04,186
the link will open there.


192
00:12:05,016 --> 00:12:06,756
But then there's
also a fallback.


193
00:12:07,306 --> 00:12:09,696
If the app is not
installed, it will open


194
00:12:09,696 --> 00:12:11,036
in the webpage of that app.


195
00:12:12,356 --> 00:12:15,326
There's also changes
coming to sysctl this year.


196
00:12:16,036 --> 00:12:20,336
Sysctl is a low-level
API used for querying


197
00:12:20,596 --> 00:12:22,236
and setting system information.


198
00:12:23,356 --> 00:12:28,126
It's designed to allow processes
with appropriate privileges


199
00:12:29,756 --> 00:12:34,596
to view information,
but as I said before,


200
00:12:34,956 --> 00:12:38,766
apps on iOS are not privileged
to see other apps' information.


201
00:12:39,576 --> 00:12:43,136
So there is a change to
the iOS sandbox this year,


202
00:12:43,726 --> 00:12:51,356
and now there will no longer
be able to call kern.proc,


203
00:12:51,776 --> 00:12:56,086
kern.procargs, kern.procargs2
and see data


204
00:12:56,546 --> 00:12:58,766
from any other processes
then one's self.


205
00:13:00,456 --> 00:13:05,816
This year, on both iOS and OS X,


206
00:13:06,056 --> 00:13:09,336
we will have a new extension
point for content filtering.


207
00:13:10,476 --> 00:13:14,206
Your block list -- the block
list will apply to both Safari


208
00:13:15,026 --> 00:13:18,546
and any apps that use
SafariViewController.


209
00:13:20,496 --> 00:13:23,176
You should go and test
with popular extensions


210
00:13:23,176 --> 00:13:24,936
to understand the
impact this will have


211
00:13:25,216 --> 00:13:27,726
on your application
or your webpage.


212
00:13:30,276 --> 00:13:33,746
You should always be prepared
for part of your content to fail


213
00:13:33,746 --> 00:13:35,896
to load and handle
it appropriately.


214
00:13:37,996 --> 00:13:43,416
Next, on OS X, we are
changing the cookie policy.


215
00:13:44,116 --> 00:13:48,076
As of Yosemite, where
cookies could be shared


216
00:13:48,076 --> 00:13:50,296
across all applications
and processes,


217
00:13:51,076 --> 00:13:53,896
now, cookies are local.


218
00:13:54,706 --> 00:13:56,216
They are local to
a single process,


219
00:13:56,216 --> 00:13:57,386
and they are not shared.


220
00:13:58,166 --> 00:14:02,406
Note: If you have shipped your
application in the App Store,


221
00:14:03,116 --> 00:14:04,306
there's no change for you.


222
00:14:05,326 --> 00:14:06,526
You are already in this state.


223
00:14:07,546 --> 00:14:10,726
If you use Web Clips
or Dashboard widgets,


224
00:14:10,936 --> 00:14:14,286
please test on OS X El Capitan.


225
00:14:15,306 --> 00:14:20,486
Now I am going to talk a little
bit about our newest platform.


226
00:14:21,946 --> 00:14:27,396
Over many years, we've seen
iOS and OS X evolve and grow.


227
00:14:28,376 --> 00:14:32,306
It's that experience that drove
us to focus on making sure


228
00:14:32,306 --> 00:14:35,366
from the start that we laid
the appropriate groundwork


229
00:14:36,126 --> 00:14:40,396
for privacy and security
on this newest platform.


230
00:14:40,396 --> 00:14:42,236
We leveraged existing
technologies,


231
00:14:42,486 --> 00:14:45,346
like data protection,
our just-in-time alerts,


232
00:14:46,216 --> 00:14:49,216
and we think that these
devices work closely together.


233
00:14:50,526 --> 00:14:52,436
The user has a single
relationship


234
00:14:52,626 --> 00:14:55,616
with the two devices,
and so that's why lots


235
00:14:55,616 --> 00:14:56,946
of the settings are
shared across.


236
00:14:58,126 --> 00:15:00,966
This also includes
your privacy settings


237
00:15:01,976 --> 00:15:03,386
for native WatchKit apps.


238
00:15:03,846 --> 00:15:07,596
So whether the user is
interacting with your app


239
00:15:07,596 --> 00:15:12,206
on iOS, as a Glance, as a
third-party complication,


240
00:15:13,076 --> 00:15:15,826
the same privacy settings apply.


241
00:15:17,036 --> 00:15:19,686
We believe that the user has
a single trust relationship


242
00:15:19,686 --> 00:15:21,076
with you as an app developer.


243
00:15:22,076 --> 00:15:23,876
They don't think
differently about, oh,


244
00:15:23,876 --> 00:15:26,616
can they access my
photos on the Glance.


245
00:15:26,956 --> 00:15:28,676
They have one trust
relationship.


246
00:15:29,146 --> 00:15:31,706
They trust you to access
that data and protect


247
00:15:31,706 --> 00:15:33,496
that data or they don't.


248
00:15:35,876 --> 00:15:39,486
So we think that this
is important to focus


249
00:15:39,936 --> 00:15:43,336
on making sure that you
embed and think about privacy


250
00:15:43,336 --> 00:15:47,386
from the beginning because your
Glance may become the place


251
00:15:47,386 --> 00:15:52,976
where users interact with
your app the most often.


252
00:15:53,036 --> 00:15:56,996
Also, in watchOS 2,
Keychain is now on Watch.


253
00:15:57,286 --> 00:16:01,346
Now I am going to hand it
over to Jason, who is going


254
00:16:01,346 --> 00:16:03,396
to talk more about how
to choose an identifier.


255
00:16:04,516 --> 00:16:10,546
[ Applause ]


256
00:16:11,046 --> 00:16:11,626
>> JASON NOVAK: Thanks, Katie.


257
00:16:11,716 --> 00:16:13,356
Now I am going to
talk a little bit


258
00:16:13,356 --> 00:16:15,856
about identifiers
on iOS and watchOS.


259
00:16:16,176 --> 00:16:18,186
This is a topic that
we've covered before


260
00:16:18,186 --> 00:16:19,636
in previous presentations,


261
00:16:19,636 --> 00:16:22,716
and you should review
last year's WWDC talk


262
00:16:22,746 --> 00:16:24,296
to get a more in-depth
look into.


263
00:16:24,296 --> 00:16:26,596
But I thought it was
important to go over some


264
00:16:26,596 --> 00:16:27,646
of the lessons we learned


265
00:16:27,726 --> 00:16:30,906
from iOS before discussing
how we brought identifiers


266
00:16:30,906 --> 00:16:31,686
to watchOS.


267
00:16:33,116 --> 00:16:34,506
So identifiers are powerful.


268
00:16:34,916 --> 00:16:36,916
They are powerful because
in and of themselves,


269
00:16:36,916 --> 00:16:39,536
they can reveal something about
a user if you use something


270
00:16:39,536 --> 00:16:41,876
like a user's name,
phone number,


271
00:16:41,996 --> 00:16:43,876
or email address
to identify a user.


272
00:16:45,076 --> 00:16:47,336
You can build a more
privacy-friendly identifier


273
00:16:47,476 --> 00:16:51,456
by using things like randomly
generated numbers or a UUID


274
00:16:51,456 --> 00:16:53,536
if you need a structured
random number.


275
00:16:54,506 --> 00:16:57,906
While a random number or UUID
doesn't identify a person,


276
00:16:58,106 --> 00:16:59,666
depending what you
log against it,


277
00:17:00,236 --> 00:17:01,996
how frequently you
rotate identifiers,


278
00:17:02,036 --> 00:17:03,676
and what controls a user has,


279
00:17:03,846 --> 00:17:06,326
over time the identifier
can be de-anonymized


280
00:17:06,326 --> 00:17:08,955
as you can log a lot of
different kinds of data


281
00:17:09,326 --> 00:17:12,496
that may be identifying to a
person, like app activities,


282
00:17:13,026 --> 00:17:16,636
search queries, messages,
or location,


283
00:17:16,636 --> 00:17:19,096
depending upon what
your app is doing.


284
00:17:20,046 --> 00:17:22,536
And what this means is that
all identifiers carry risk.


285
00:17:23,046 --> 00:17:24,996
Even though an identifier
itself may be anonymous,


286
00:17:25,425 --> 00:17:27,056
if the data you hold
against it isn't,


287
00:17:27,616 --> 00:17:30,116
then if there is a data
breach, you still have to deal


288
00:17:30,116 --> 00:17:31,706
with a harm to customers'
privacy,


289
00:17:31,706 --> 00:17:34,096
and the ensuing reputational
damage


290
00:17:34,406 --> 00:17:35,836
as you'll lose customer trust.


291
00:17:36,506 --> 00:17:38,836
When I say data breach, that may
cause you to think about hackers


292
00:17:38,836 --> 00:17:42,206
or other nefarious forces,
but it may be as simple


293
00:17:42,206 --> 00:17:45,036
as an unencrypted laptop
stolen out of the back of a car


294
00:17:45,206 --> 00:17:47,376
or backup tapes falling
off the back of a truck.


295
00:17:48,716 --> 00:17:51,676
As a result of the power
identifiers, Apple spent a lot


296
00:17:51,676 --> 00:17:53,656
of time thinking about
how identifiers operate


297
00:17:54,006 --> 00:17:55,096
and some best practices.


298
00:17:56,566 --> 00:17:59,156
So first, before you
use an identifier,


299
00:17:59,156 --> 00:18:01,286
ask yourself: Do you need one?


300
00:18:01,706 --> 00:18:03,886
Can you structure your
data collection in some way


301
00:18:04,086 --> 00:18:07,296
that you have a database
or dictionary of values


302
00:18:07,296 --> 00:18:11,526
that you are storing server side
that the client sends up a value


303
00:18:11,986 --> 00:18:15,726
to your server and then you just
increment a counter server side?


304
00:18:16,336 --> 00:18:18,886
If you determine that you
really do need an identifier,


305
00:18:19,236 --> 00:18:20,796
think about what
you are identifying


306
00:18:20,986 --> 00:18:22,886
and for how long you
need to identify it for.


307
00:18:23,636 --> 00:18:25,706
Are you identifying a
session and just trying


308
00:18:25,706 --> 00:18:29,196
to correlate activities across
a single launch of your app?


309
00:18:29,316 --> 00:18:31,806
Are you trying -- and can you
rotate the identifier every time


310
00:18:31,806 --> 00:18:33,096
the app opens or closes?


311
00:18:33,936 --> 00:18:36,276
Are you looking at temporal
activity and you need


312
00:18:36,276 --> 00:18:39,836
to rotate the identifier
every 5, 10, 15 minutes?


313
00:18:40,866 --> 00:18:42,646
We know that rotating
identifiers has a lot


314
00:18:42,646 --> 00:18:46,316
of privacy-preserving power
as it prevents the correlation


315
00:18:46,316 --> 00:18:47,886
of data over time,
and we will walk


316
00:18:47,886 --> 00:18:50,776
through an example
of that later.


317
00:18:50,866 --> 00:18:54,296
If you are identifying a user,
how are you making it clear


318
00:18:54,296 --> 00:18:56,656
to the user that you are
identifying them as opposed


319
00:18:56,656 --> 00:18:58,366
to an installation on device?


320
00:18:59,196 --> 00:19:02,126
Are you having them create
an account with your service?


321
00:19:02,256 --> 00:19:03,616
Are you having them log in?


322
00:19:04,216 --> 00:19:06,986
Are you using words in the UI
that make it very clear to them


323
00:19:06,986 --> 00:19:08,806
that this is about
their experience?


324
00:19:09,876 --> 00:19:12,026
And after you thought about
how you are explaining this


325
00:19:12,026 --> 00:19:14,166
to users, have you
really thought


326
00:19:14,166 --> 00:19:16,786
about the risk you are
taking on in collecting data


327
00:19:16,786 --> 00:19:19,556
that is associated with
an individual's identity?


328
00:19:21,506 --> 00:19:24,176
Finally, if you are
trying to collect data


329
00:19:24,336 --> 00:19:26,926
about an installation of
your app on a device divorced


330
00:19:26,926 --> 00:19:28,776
from these other notions
of users or sessions,


331
00:19:29,356 --> 00:19:31,446
have you designed your
metrics to support the cases


332
00:19:31,446 --> 00:19:34,086
that we know occur with
a user and their device,


333
00:19:34,146 --> 00:19:37,016
such as uninstalling an
app or installing an app


334
00:19:37,016 --> 00:19:40,706
on a secondary device or backing
up and restoring across devices


335
00:19:41,116 --> 00:19:45,546
and how the privacy preservation
of a user that occurs there


336
00:19:45,546 --> 00:19:47,856
in terms of the identifiers
being reset


337
00:19:47,856 --> 00:19:49,966
or persisting affect
your metrics?


338
00:19:52,506 --> 00:19:55,066
Finally, you should consider
how you scope your identifiers.


339
00:19:55,396 --> 00:19:57,016
It's easy to construct a world


340
00:19:57,016 --> 00:19:59,616
where a persistent
identifier is used to track all


341
00:19:59,616 --> 00:20:01,856
of the user's activities
across properties,


342
00:20:02,506 --> 00:20:04,776
but then a user's
privacy is minimized.


343
00:20:05,066 --> 00:20:07,026
Lots of data is collected
against a single identity


344
00:20:07,026 --> 00:20:09,636
that may never change that
has different contexts,


345
00:20:09,636 --> 00:20:12,446
different meanings in
different contexts.


346
00:20:12,896 --> 00:20:15,676
Moreover, users may not want to
be tracked across all properties


347
00:20:15,676 --> 00:20:16,796
under a single identity.


348
00:20:17,286 --> 00:20:18,946
Contemplate scoping
your identifiers


349
00:20:18,946 --> 00:20:20,656
so that you have
different identifiers


350
00:20:20,656 --> 00:20:23,346
for different purposes with
different data associated


351
00:20:23,346 --> 00:20:25,086
with them with different
retention periods.


352
00:20:26,036 --> 00:20:28,376
Now I am going to walk
through an example


353
00:20:28,376 --> 00:20:31,686
of a specific architecture
of identifiers


354
00:20:31,686 --> 00:20:32,986
that increases your privacy


355
00:20:33,046 --> 00:20:34,596
and decrease the
risk you might face.


356
00:20:35,016 --> 00:20:37,976
It's easy to design a search
service that logs all data


357
00:20:37,976 --> 00:20:40,716
to a user identifier, but
then if this data is breached,


358
00:20:41,126 --> 00:20:43,116
then even if the
identifier is anonymous,


359
00:20:43,766 --> 00:20:45,776
it allows for the ready
re-identification of a user,


360
00:20:46,076 --> 00:20:48,336
as among other things,
users search for themselves,


361
00:20:48,836 --> 00:20:50,236
and this scenario may result


362
00:20:50,236 --> 00:20:51,836
in a significant
loss of user trust.


363
00:20:52,566 --> 00:20:55,316
For example, in this case,
the identifier is anonymous.


364
00:20:55,316 --> 00:20:58,886
It's 123. But we can see a
fairly clear set of facts.


365
00:20:58,886 --> 00:21:02,226
User 123 is thinking about
getting engaged -- probably --


366
00:21:02,586 --> 00:21:03,816
probably this past Saturday.


367
00:21:03,816 --> 00:21:07,306
They are probably not from San
Francisco as they are looking


368
00:21:07,306 --> 00:21:08,626
for a flight from San Francisco.


369
00:21:08,626 --> 00:21:10,586
They are probably going to WWDC.


370
00:21:10,586 --> 00:21:14,056
And they may be John Appleseed,


371
00:21:14,246 --> 00:21:15,946
they may be interested
in John Appleseed.


372
00:21:16,206 --> 00:21:16,796
We don't know.


373
00:21:16,796 --> 00:21:19,136
But given more data, we
could probably figure


374
00:21:19,136 --> 00:21:21,226
out if this was a
vanity search or not.


375
00:21:21,646 --> 00:21:25,156
On the other hand, if your
search service uses rotating


376
00:21:25,156 --> 00:21:28,496
identifiers, then even if
data is released, the exposure


377
00:21:28,496 --> 00:21:30,426
for a given user is minimized


378
00:21:30,426 --> 00:21:32,396
as the identifier
rotates over time.


379
00:21:32,876 --> 00:21:35,826
In this case, if the identifier
rotated every 15 minutes,


380
00:21:36,296 --> 00:21:39,236
we can't necessarily say
that user 123 is the same


381
00:21:39,236 --> 00:21:42,076
as 456, is the same as 789.


382
00:21:43,206 --> 00:21:47,036
So now I am going to talk
about persistent identifiers


383
00:21:47,036 --> 00:21:49,436
for a moment, and because of
the risk that they present


384
00:21:49,436 --> 00:21:51,166
to user privacy in
terms of the ability


385
00:21:51,166 --> 00:21:54,566
to permit long-term tracking of
users, they are not available


386
00:21:54,566 --> 00:21:56,806
on iOS and watchOS by design.


387
00:21:57,536 --> 00:22:00,706
Apple tries to surprise
and delight its customers,


388
00:22:00,906 --> 00:22:02,736
and customers aren't delighted
when they are being tracked


389
00:22:02,736 --> 00:22:03,496
without their knowledge.


390
00:22:04,026 --> 00:22:05,846
It's not in line with
users' expectations


391
00:22:06,006 --> 00:22:08,636
that they are being tracked by
an app under the same identity,


392
00:22:09,216 --> 00:22:11,586
even after they have uninstalled
the app and reinstalled it


393
00:22:11,586 --> 00:22:13,146
or if they've done
something more destructive


394
00:22:13,746 --> 00:22:14,766
like erase their device.


395
00:22:16,556 --> 00:22:19,316
And finally, because persistent
identifiers are persistent,


396
00:22:19,796 --> 00:22:21,356
users don't have
control over them,


397
00:22:21,956 --> 00:22:24,566
and as Katie was saying
earlier, we think of control


398
00:22:24,566 --> 00:22:26,586
as a very important
part for user privacy.


399
00:22:27,206 --> 00:22:31,836
To try and balance the needs
of developers to identify data


400
00:22:32,516 --> 00:22:35,606
and with the privacy of
users, we've developed a set


401
00:22:35,606 --> 00:22:37,356
of purpose scoped
identifiers on iOS


402
00:22:37,896 --> 00:22:40,646
so that developers can collect
the data they need and use it


403
00:22:40,646 --> 00:22:42,896
in the analytics and
advertising context while


404
00:22:42,896 --> 00:22:46,586
at the same time users have
control to reset the identifiers


405
00:22:46,816 --> 00:22:49,696
and break the relationship
between their current activities


406
00:22:49,916 --> 00:22:52,846
and whatever data has been
historically collected


407
00:22:52,846 --> 00:22:53,306
about them.


408
00:22:53,886 --> 00:22:55,866
At the app level, we enable this


409
00:22:56,086 --> 00:22:59,076
by resetting the vendor
identifier or the IDFV


410
00:22:59,506 --> 00:23:03,666
after a user has uninstalled
all apps from a given team ID.


411
00:23:04,286 --> 00:23:06,806
And on the advertising context,
we give users the ability


412
00:23:06,806 --> 00:23:10,186
to reset their advertising
identifier by going to Settings,


413
00:23:10,266 --> 00:23:11,756
Privacy, Advertising,


414
00:23:12,126 --> 00:23:14,516
and tapping the Reset
Advertisement Identifier.


415
00:23:15,056 --> 00:23:18,616
As a result a user can reset
the identifier on their device


416
00:23:18,886 --> 00:23:21,836
without erasing all data on
it and they break the link


417
00:23:21,836 --> 00:23:25,336
with whatever data has been
historically collected.


418
00:23:25,746 --> 00:23:29,076
With watchOS 1, the vendor ID


419
00:23:29,076 --> 00:23:32,236
and the advertising ID
were actually on the iPhone


420
00:23:32,866 --> 00:23:35,166
as the WatchKit extension
itself ran on the iPhone.


421
00:23:35,786 --> 00:23:39,086
With watchOS 2, you will
need to sync the vendor ID


422
00:23:39,086 --> 00:23:41,136
and advertising ID
from the iPhone


423
00:23:41,566 --> 00:23:42,966
to the Watch and use it there.


424
00:23:43,036 --> 00:23:45,836
And you will need to
maintain the vendor ID


425
00:23:45,836 --> 00:23:47,106
and advertising ID up-to-date.


426
00:23:47,326 --> 00:23:50,656
So now I am going to go
over some best practices.


427
00:23:51,786 --> 00:23:53,386
Determine if you need
an identifier at all.


428
00:23:53,936 --> 00:23:56,576
Can you just send up a value and
increment a server-side counter?


429
00:23:57,126 --> 00:24:00,316
Collecting data against an
identifier brings responsibility


430
00:24:00,376 --> 00:24:01,316
as it brings risk.


431
00:24:01,486 --> 00:24:03,886
And if you can collect just a
value in increment encounter,


432
00:24:03,886 --> 00:24:06,126
you have significantly
increased user privacy


433
00:24:06,326 --> 00:24:08,016
and derisked your
data collection.


434
00:24:09,326 --> 00:24:11,486
Use a properly purposed
scope identifier.


435
00:24:11,986 --> 00:24:14,946
Determine if you need to
identify a session, a user,


436
00:24:15,306 --> 00:24:18,046
or a device and use an
identifier of the proper scope


437
00:24:18,106 --> 00:24:19,186
for your app's purpose.


438
00:24:20,976 --> 00:24:23,826
iOS and watchOS offer
identifiers for you,


439
00:24:23,996 --> 00:24:25,536
so use them instead
of building your own.


440
00:24:26,326 --> 00:24:28,046
Trying to build a
persistent identifier


441
00:24:28,046 --> 00:24:31,446
that survives device reset
and other destructive actions


442
00:24:31,446 --> 00:24:33,256
like removing your app is bad


443
00:24:33,256 --> 00:24:35,336
for user privacy and
bad for your app.


444
00:24:35,816 --> 00:24:39,526
If you are using private APIs to
build a persistent identifier,


445
00:24:39,746 --> 00:24:41,626
you are in violation
of the App Store terms,


446
00:24:41,746 --> 00:24:43,006
and there will be consequences.


447
00:24:44,546 --> 00:24:47,926
Finally, follow the
guidelines for the identifiers


448
00:24:47,926 --> 00:24:49,196
that are provided, and one


449
00:24:49,196 --> 00:24:52,326
of the most important
guidelines you can follow is


450
00:24:52,326 --> 00:24:55,146
to check the value of Limit Ad
Tracking before you call the


451
00:24:55,146 --> 00:24:58,866
advertisingIdentifier and to
always get the current value


452
00:24:58,866 --> 00:25:00,066
of the advertisingIdentifier.


453
00:25:01,046 --> 00:25:03,586
A user can reset the value
of the advertisingIdentifier


454
00:25:03,586 --> 00:25:07,296
at any time, in addition
to enabling ad tracking.


455
00:25:07,536 --> 00:25:10,596
Which also causes a reset of
the advertisingIdentifier.


456
00:25:11,246 --> 00:25:12,856
Because of this, you
should always be sure


457
00:25:12,856 --> 00:25:17,176
that you have the current value,
and you should never cache it.


458
00:25:17,696 --> 00:25:19,426
Finally, we are going to talk
a little bit about reporting.


459
00:25:19,956 --> 00:25:22,386
We know that many of you
have reporting obligations


460
00:25:22,636 --> 00:25:24,546
to your partners, but
we think it's important


461
00:25:24,546 --> 00:25:27,246
to maintain user privacy when
reporting to third parties.


462
00:25:27,996 --> 00:25:29,796
We thought a lot about
how to report on users,


463
00:25:30,136 --> 00:25:30,956
and you can see a lot


464
00:25:30,956 --> 00:25:33,346
of our learnings
embedded in App Analytics.


465
00:25:33,736 --> 00:25:36,856
And there are sort of
three big ideas here


466
00:25:36,856 --> 00:25:38,286
that you can implement
when reporting.


467
00:25:38,796 --> 00:25:40,906
Report insights about
your users.


468
00:25:40,906 --> 00:25:42,176
Report aggregates.


469
00:25:42,526 --> 00:25:43,366
And set a threshold.


470
00:25:44,176 --> 00:25:45,706
What do I mean by
report insights?


471
00:25:46,516 --> 00:25:49,736
Instead of if a partner
wants to know


472
00:25:50,296 --> 00:25:54,006
who uses your app frequently
and say give us all data


473
00:25:54,006 --> 00:25:56,696
about your app's usage so
that they can calculate that,


474
00:25:57,166 --> 00:26:00,686
instead, agree upon a
definition of common usage,


475
00:26:01,146 --> 00:26:03,906
run that calculation,
and on your data,


476
00:26:04,406 --> 00:26:06,376
and provide the results of
that calculation instead


477
00:26:06,376 --> 00:26:07,386
of giving over the raw data.


478
00:26:08,566 --> 00:26:11,696
The next step to protecting user
privacy would be to aggregate.


479
00:26:12,086 --> 00:26:14,776
Instead of saying which
users are frequent users,


480
00:26:15,066 --> 00:26:17,296
say how many frequent users
you have, what percentage


481
00:26:17,296 --> 00:26:18,896
of your user base
are frequent users.


482
00:26:19,636 --> 00:26:22,186
And finally, require
thresholds in reporting.


483
00:26:22,736 --> 00:26:25,036
If you are going to report
that you have one frequent user


484
00:26:25,316 --> 00:26:27,396
and you have one user of
your app and you are going


485
00:26:27,396 --> 00:26:29,396
to provide some information
about them


486
00:26:29,396 --> 00:26:31,496
from an audience
standpoint, like zip code,


487
00:26:32,066 --> 00:26:34,026
you have effectively
de-anonymized your user.


488
00:26:34,196 --> 00:26:36,986
Before you provide
personal information be sure


489
00:26:36,986 --> 00:26:39,266
to have a threshold, so that
you're not de-anonymizing a


490
00:26:39,266 --> 00:26:40,526
person, and they're in a group.


491
00:26:40,526 --> 00:26:44,816
I am now going to explain some
best practices on how to prompt


492
00:26:44,816 --> 00:26:46,616
for user data and
then extend those


493
00:26:46,616 --> 00:26:51,896
to the Watch Just a refresher,
on iOS and OS X, when you want


494
00:26:51,896 --> 00:26:53,416
to access data classes,


495
00:26:53,846 --> 00:26:56,306
the operating system doesn't
give access to that data


496
00:26:56,726 --> 00:26:59,386
until the user makes a
decision as to whether or not


497
00:26:59,886 --> 00:27:01,496
to give your app
access to that data.


498
00:27:02,836 --> 00:27:06,426
So that it's clear to users why
an app needs this data and so


499
00:27:06,426 --> 00:27:08,806
that you can be transparent
with users about your collection


500
00:27:08,806 --> 00:27:11,526
and use, we provide you
with a place in the prompt


501
00:27:11,526 --> 00:27:12,776
where you can provide
an explanation.


502
00:27:13,286 --> 00:27:14,846
This is called a purpose string.


503
00:27:15,196 --> 00:27:17,546
You can set them for the
various protected data classes


504
00:27:17,616 --> 00:27:19,956
in your apps and
Info.plist, and we think


505
00:27:19,956 --> 00:27:23,456
that if users understand why
you are asking for their data,


506
00:27:23,716 --> 00:27:26,146
they are more likely to make the
choice that's right for them.


507
00:27:27,216 --> 00:27:31,896
As Katie said earlier, given the
limited real estate available


508
00:27:31,896 --> 00:27:35,126
on the watch and our perspective
on transparency and consent


509
00:27:35,126 --> 00:27:37,286
to control, a lot of
thought went into how apps


510
00:27:37,286 --> 00:27:38,766
on the watch could
access user data.


511
00:27:39,866 --> 00:27:43,116
First, just like
on iOS and OS X,


512
00:27:43,606 --> 00:27:46,296
apps on watchOS can't
access a user's data


513
00:27:46,586 --> 00:27:48,006
until the user has
approved that.


514
00:27:49,546 --> 00:27:53,506
Unlike on iOS or OS X, on
watchOS, a user can't accept


515
00:27:53,506 --> 00:27:56,546
or deny a just-in-time
prompt on the device itself.


516
00:27:57,246 --> 00:27:59,016
Rather, they are
directed to their iPhone.


517
00:27:59,376 --> 00:28:03,366
As Katie was saying, we think of
the iPhone and the paired Watch


518
00:28:03,736 --> 00:28:06,876
as a tightly coupled experience,
and the privacy decisions


519
00:28:06,876 --> 00:28:09,596
that users make on one platform
affects them on the other.


520
00:28:10,206 --> 00:28:11,956
Given the limited real
estate on the watch,


521
00:28:12,086 --> 00:28:14,066
we thought that it made more
sense to present the choice


522
00:28:14,106 --> 00:28:17,676
on the iPhone, where the
user will see the prompt


523
00:28:17,676 --> 00:28:20,266
on the larger screen,
including the purpose string,


524
00:28:20,266 --> 00:28:22,426
explaining why your iPhone app


525
00:28:22,426 --> 00:28:24,566
and Watch app want
access to that data.


526
00:28:25,716 --> 00:28:27,906
Unlike in iOS where you
get a yes or no answer,


527
00:28:28,356 --> 00:28:30,256
you can prompt, get dismissed,


528
00:28:30,366 --> 00:28:32,676
or otherwise not have the user
make a choice when you prompt


529
00:28:32,676 --> 00:28:35,796
from the watch, and as a result
be left in an unset state.


530
00:28:36,526 --> 00:28:39,516
In this unset state, you will
be able to prompt again later.


531
00:28:40,296 --> 00:28:43,126
Just to give a concrete
example of that unset state,


532
00:28:43,546 --> 00:28:46,296
a user could go on a run with
their Watch but not their Phone,


533
00:28:46,906 --> 00:28:48,186
launch your app on the Watch.


534
00:28:48,946 --> 00:28:49,966
Your app could prompt.


535
00:28:50,476 --> 00:28:51,666
The prompt would be dismissed.


536
00:28:52,016 --> 00:28:53,856
And your app would
have to continue to run


537
00:28:54,136 --> 00:28:55,336
without access to that data.


538
00:28:56,326 --> 00:29:01,836
But at a later point in time,
your app could prompt again.


539
00:29:02,376 --> 00:29:04,656
Now, as Katie said
earlier, the settings,


540
00:29:04,656 --> 00:29:06,536
including your privacy settings,


541
00:29:07,066 --> 00:29:09,196
are shared between the
Watch and the iPhone.


542
00:29:10,116 --> 00:29:11,906
And we think that users
have a single relationship


543
00:29:11,906 --> 00:29:14,736
with your app, a single
relationship with the iPhone


544
00:29:14,736 --> 00:29:16,296
and the Watch, so as a result,


545
00:29:16,296 --> 00:29:17,986
we've combined these
single relationships


546
00:29:17,986 --> 00:29:20,296
into a single relationship
of settings for the iPhone,


547
00:29:20,296 --> 00:29:21,196
the watch, and your app.


548
00:29:21,196 --> 00:29:23,336
And this is something


549
00:29:23,336 --> 00:29:24,706
that exists elsewhere
in our platforms.


550
00:29:24,886 --> 00:29:27,926
On iOS, if a user makes a
privacy decision for your app,


551
00:29:28,306 --> 00:29:30,506
then all facets of your app
have access to that data.


552
00:29:31,156 --> 00:29:32,666
If you prompt for a
location in your app,


553
00:29:33,166 --> 00:29:36,906
your extensions can use
it, and if the first time


554
00:29:36,906 --> 00:29:39,646
that a user encounters
a prompt for your app is


555
00:29:39,646 --> 00:29:42,646
in the extension, your app will
also have access to that data.


556
00:29:42,646 --> 00:29:48,916
On the Watch, the decisions that
a user makes carries over to all


557
00:29:48,986 --> 00:29:52,646
of your Watch app, the
app itself, your Glance,


558
00:29:53,196 --> 00:29:54,156
and your Complication.


559
00:29:55,216 --> 00:29:57,636
When a user gives permission
for one aspect of your app,


560
00:29:57,636 --> 00:30:01,436
they give permission for
all aspects of your app.


561
00:30:01,636 --> 00:30:04,166
Now that you know what data is
available on iOS, OS X, watchOS,


562
00:30:04,166 --> 00:30:07,986
and how to prompt for them,
we think it's also important


563
00:30:07,986 --> 00:30:10,716
to consider how to protect user
data once a user has given you


564
00:30:10,716 --> 00:30:14,636
access to it with a
new set of OS releases.


565
00:30:15,026 --> 00:30:16,776
We have new security
features you should leverage


566
00:30:16,776 --> 00:30:17,376
and be aware of.


567
00:30:18,016 --> 00:30:20,526
The first of these is
App Transport Security.


568
00:30:20,976 --> 00:30:23,046
To secure user communications
by default,


569
00:30:23,466 --> 00:30:25,376
we introduced App
Transport Security


570
00:30:25,746 --> 00:30:27,896
to iOS 9 and OS X El Capitan.


571
00:30:27,966 --> 00:30:30,326
By default, your communication


572
00:30:30,326 --> 00:30:32,296
through higher level
APIs will need


573
00:30:32,296 --> 00:30:34,686
to be encrypted using
TLS version 1.2


574
00:30:34,686 --> 00:30:35,656
with forward secrecy.


575
00:30:36,166 --> 00:30:39,166
If you try to make connection


576
00:30:39,166 --> 00:30:40,736
that doesn't follow
this requirement,


577
00:30:41,166 --> 00:30:42,266
an error will be thrown.


578
00:30:43,866 --> 00:30:46,556
If your app does need to make a
request to an insecure domain,


579
00:30:46,556 --> 00:30:49,766
you have to specify this domain
in your app's Info.plist.


580
00:30:50,376 --> 00:30:52,646
This will be gone into more
detail in the Networking


581
00:30:52,646 --> 00:30:57,596
with NSURLSession tomorrow at 9
a.m. in Pacific Heights as well


582
00:30:57,596 --> 00:30:59,316
as in the security talk
later this afternoon.


583
00:31:00,526 --> 00:31:03,006
If you do want to
declare an exception


584
00:31:03,006 --> 00:31:05,636
to App Transport Security, you
need to declare the exception


585
00:31:05,636 --> 00:31:08,176
in your app's Info.plist
and then optionally set one


586
00:31:08,176 --> 00:31:09,066
or more of these keys.


587
00:31:10,726 --> 00:31:15,056
Now I am going to talk
about rewards cards.


588
00:31:15,926 --> 00:31:18,136
With iOS 9, rewards cards
can now be presented


589
00:31:18,136 --> 00:31:19,596
with Contact list transactions.


590
00:31:20,046 --> 00:31:22,646
We know that some rewards cards
use a person's phone number,


591
00:31:22,646 --> 00:31:24,946
email address, or other
personally identifiable data


592
00:31:25,406 --> 00:31:27,206
as the identifier for
the rewards cards.


593
00:31:27,816 --> 00:31:30,126
So to protect user
privacy in the presentation


594
00:31:30,126 --> 00:31:32,096
of rewards cards and
Contact list transactions,


595
00:31:33,046 --> 00:31:35,976
we provided developers with an
easy way to encrypt this data


596
00:31:36,246 --> 00:31:38,346
when it goes over the Contact
list transaction channel.


597
00:31:39,346 --> 00:31:42,236
All you have to do is
modify your pass.json


598
00:31:42,236 --> 00:31:45,646
with this new nfc dictionary
where you specify the message,


599
00:31:45,646 --> 00:31:49,116
the identifier, and your
public encryption key.


600
00:31:49,586 --> 00:31:52,846
From there, iOS takes care of
the encryption of the message


601
00:31:52,846 --> 00:31:54,846
for you when the
rewards card is presented


602
00:31:54,846 --> 00:31:56,826
in the contactless payment.


603
00:31:57,576 --> 00:32:01,616
With the App Search, App
history, and App links in iOS 9,


604
00:32:01,736 --> 00:32:02,876
it now means you
can now store data


605
00:32:03,016 --> 00:32:05,786
about your app outside
of your app.


606
00:32:05,786 --> 00:32:07,896
As a result, you have
to be a good steward


607
00:32:07,896 --> 00:32:10,326
and protect the data
for your users both


608
00:32:10,326 --> 00:32:11,596
when it is inside your app


609
00:32:12,046 --> 00:32:14,536
and when it is stored
outside of your app.


610
00:32:15,726 --> 00:32:17,146
There's a great talk
about this on Wednesday


611
00:32:17,146 --> 00:32:19,006
at 11 a.m. Please go check
this out as they will go


612
00:32:19,006 --> 00:32:21,316
into much greater depth
than I can, but I am going


613
00:32:21,316 --> 00:32:24,736
to talk briefly about two ways
an app can have data indexed


614
00:32:24,926 --> 00:32:26,406
and the privacy impacts of them.


615
00:32:28,026 --> 00:32:31,076
The first is NSUserActivity,
which is an API introduced


616
00:32:31,076 --> 00:32:32,526
in iOS 8 to support Handoff.


617
00:32:32,976 --> 00:32:36,666
In iOS 9, we extended it so
you can use NSUserActivity


618
00:32:36,766 --> 00:32:39,596
to create views of your app this
can be indexed and then searched


619
00:32:39,596 --> 00:32:40,906
for by user to return to.


620
00:32:41,656 --> 00:32:44,746
For example, in your Recipe
app, when a user looks


621
00:32:44,746 --> 00:32:47,426
at a poutine recipe, you
can create a NSUserActivity


622
00:32:47,426 --> 00:32:49,296
for that view and
have it indexed.


623
00:32:49,986 --> 00:32:53,376
Then when the user searches for
poutine on their phone later,


624
00:32:53,626 --> 00:32:54,946
one of the results
will be a link


625
00:32:54,996 --> 00:32:56,666
to the recipe they
were looking at before.


626
00:32:57,126 --> 00:33:00,156
Think of it as handing off to
yourself in the future instead


627
00:33:00,156 --> 00:33:01,526
of on to another machine.


628
00:33:02,316 --> 00:33:05,846
We thought about how to
make search privacy friendly


629
00:33:05,846 --> 00:33:08,856
from the ground up, and
part of how we did so was


630
00:33:08,856 --> 00:33:11,186
to have the default
be not to index data.


631
00:33:12,266 --> 00:33:12,716
That's right.


632
00:33:13,046 --> 00:33:15,926
By default, NSUserActivity
continues to be for Handoff.


633
00:33:16,406 --> 00:33:18,246
If you want to make a
view that's searchable,


634
00:33:18,656 --> 00:33:21,146
you have to set the
eligibleForSearch property


635
00:33:21,196 --> 00:33:25,076
to true, and if you want to make
that view publicly indexable --


636
00:33:25,076 --> 00:33:26,236
and we will get into
that later --


637
00:33:27,236 --> 00:33:27,886
you have to make


638
00:33:27,886 --> 00:33:32,246
that eligibleForPublicIndexing
property set to true as well.


639
00:33:33,416 --> 00:33:35,136
The other property
that you should set


640
00:33:35,136 --> 00:33:37,836
when you are making data
indexable is the expirationDate,


641
00:33:38,086 --> 00:33:39,606
since as Katie discussed
earlier,


642
00:33:40,146 --> 00:33:43,096
part of protecting user
privacy is protecting their data


643
00:33:43,096 --> 00:33:45,456
by deleting it when it's no
longer relevant to the user.


644
00:33:46,366 --> 00:33:50,766
So now I am going
to talk a little bit


645
00:33:50,766 --> 00:33:52,556
about NSUserActivity
and public indexing.


646
00:33:53,566 --> 00:33:56,196
NSUserActivity are a
great light-weight way


647
00:33:56,226 --> 00:33:57,686
to make your apps searchable.


648
00:33:58,196 --> 00:34:01,786
We made indexing privacy
friendly by not indexing it


649
00:34:01,786 --> 00:34:05,076
by default and leaving it to
developers to determine whether


650
00:34:05,076 --> 00:34:06,636
or not to index a specific view.


651
00:34:08,666 --> 00:34:11,186
But we understand that
some developers have apps


652
00:34:11,226 --> 00:34:13,505
that contain public
content that they want


653
00:34:13,505 --> 00:34:15,286
to be searchable on all devices.


654
00:34:16,386 --> 00:34:19,116
To enable this, we
came up with a way


655
00:34:19,116 --> 00:34:22,156
to protect user privacy while
also indexing additional data.


656
00:34:23,596 --> 00:34:26,485
When you make a view
eligible for search


657
00:34:26,936 --> 00:34:28,976
and then mark it eligible
for public indexing


658
00:34:29,346 --> 00:34:31,416
if it contains only
publicly available data,


659
00:34:32,516 --> 00:34:36,166
then when a user searches for
that view and engages with it,


660
00:34:36,166 --> 00:34:37,896
a hash of that view
is sent to Apple.


661
00:34:39,576 --> 00:34:42,726
After multiple devices,
hash this view


662
00:34:42,726 --> 00:34:44,226
and send the hash to Apple.


663
00:34:45,255 --> 00:34:47,876
Eventually, when the
threshold is exceeded,


664
00:34:48,886 --> 00:34:51,235
the actual view will
be sent to Apple,


665
00:34:51,946 --> 00:34:54,886
and this is so that views
accidentally marked public


666
00:34:54,996 --> 00:34:58,236
aren't unintentionally sent up.


667
00:34:59,026 --> 00:35:00,356
That's NSUserActivity.


668
00:35:00,356 --> 00:35:02,306
I am going to talk a little
bit about CoreSpotlight now.


669
00:35:03,036 --> 00:35:05,706
CoreSpotlight now is a new
API in iOS 9 that you can use


670
00:35:05,706 --> 00:35:08,296
to make user content
in your app searchable,


671
00:35:08,596 --> 00:35:10,976
things like Mail,
Contacts, Calendars.


672
00:35:11,396 --> 00:35:13,586
This is derivative
data, and you need


673
00:35:13,586 --> 00:35:16,596
to protect it the same way you
protect underlying data yourself


674
00:35:16,596 --> 00:35:17,066
in your app.


675
00:35:17,646 --> 00:35:20,836
The first up here is a set data
protection class on it just


676
00:35:20,836 --> 00:35:23,686
as you do data in your app.


677
00:35:23,686 --> 00:35:27,186
The next is to practice
data management


678
00:35:27,186 --> 00:35:28,806
with the derivative
data in the index.


679
00:35:29,216 --> 00:35:31,856
You can store -- first you
should store relevant user data


680
00:35:32,236 --> 00:35:33,676
-- for instance,
does anyone need


681
00:35:33,676 --> 00:35:35,586
to see drafts or
deleted documents?


682
00:35:36,576 --> 00:35:39,766
When a user updates
documents in your app,


683
00:35:39,856 --> 00:35:42,186
you should update the copy of
those documents in the index.


684
00:35:43,026 --> 00:35:44,796
When a user deletes a
document in your app,


685
00:35:44,896 --> 00:35:46,766
you should delete the
document in your index.


686
00:35:46,766 --> 00:35:49,286
Because users have multiple ways
of deleting documents in apps,


687
00:35:49,286 --> 00:35:51,026
like deleting all
files of a type


688
00:35:51,236 --> 00:35:54,046
or of a folder we have made it
easy to delete multiple items


689
00:35:54,046 --> 00:35:57,166
at once or to delete
all items from search.


690
00:35:58,426 --> 00:35:59,776
That's a brief overview of some


691
00:35:59,776 --> 00:36:03,036
of the new privacy
protecting features in iOS 9.


692
00:36:03,156 --> 00:36:05,226
I am now going to hand it over
to Katie to talk about some


693
00:36:05,226 --> 00:36:07,656
of the existing technologies
you should be adopting


694
00:36:07,656 --> 00:36:08,356
if you haven't already.


695
00:36:10,516 --> 00:36:14,946
[ Applause ]


696
00:36:15,446 --> 00:36:16,166
>> KATIE SKINNER: Thanks, Jason.


697
00:36:16,396 --> 00:36:19,426
I want to highlight a few
of the existing technologies


698
00:36:19,426 --> 00:36:22,226
that we have that makes it
easy to protect user data


699
00:36:22,616 --> 00:36:24,296
without having to do work


700
00:36:24,296 --> 00:36:26,486
like writing crypto
primitives yourself.


701
00:36:26,486 --> 00:36:31,546
Touch ID is a great
way to protect your app


702
00:36:31,546 --> 00:36:33,166
or protect data within your app.


703
00:36:34,226 --> 00:36:38,166
You can use Apple Pay in app to
make it so you don't have to go


704
00:36:38,166 --> 00:36:40,396
through the process of creating


705
00:36:40,396 --> 00:36:43,006
and accepting user data
and credit card data.


706
00:36:43,006 --> 00:36:46,076
Now I am going to dive
a little bit deeper


707
00:36:46,336 --> 00:36:48,726
on privacy policies
and data protection.


708
00:36:49,616 --> 00:36:53,526
In addition to protecting
your user's data technically,


709
00:36:54,056 --> 00:36:56,486
it's important to explain
to users how you are going


710
00:36:56,486 --> 00:36:58,776
to use their data
and if you are going


711
00:36:58,776 --> 00:36:59,906
to share it with a third party.


712
00:36:59,906 --> 00:37:04,126
We actually require privacy
policies for certain types


713
00:37:04,126 --> 00:37:07,226
of applications, including
apps that link to HealthKit.


714
00:37:08,236 --> 00:37:11,346
We make it easy for you to
include a privacy policy.


715
00:37:12,166 --> 00:37:14,526
On iTunes Connect, you
just put in the URL,


716
00:37:14,846 --> 00:37:18,216
and then it will show up
on all of our App Stores.


717
00:37:18,316 --> 00:37:21,866
It gives users a chance to read
your privacy policy before they


718
00:37:21,866 --> 00:37:23,006
make a purchase decision.


719
00:37:23,546 --> 00:37:27,006
You can use iOS's built-in
data protection classes


720
00:37:27,166 --> 00:37:29,456
to encrypt your data to
keys that are derived


721
00:37:29,456 --> 00:37:30,556
from the user's passcode.


722
00:37:31,576 --> 00:37:33,316
This is incredibly
powerful encryption,


723
00:37:33,316 --> 00:37:36,386
and you can easily
leverage it without having


724
00:37:36,386 --> 00:37:38,106
to write any crypto
code yourself.


725
00:37:39,906 --> 00:37:44,996
Now, every iOS, data
protection is implemented


726
00:37:44,996 --> 00:37:47,986
by managing a hierarchy of keys.


727
00:37:49,006 --> 00:37:51,406
It builds on the hardware
encryption that's built


728
00:37:51,406 --> 00:37:53,826
into every iOS and
watchOS device.


729
00:37:54,956 --> 00:37:57,856
Data protection is
controlled on a per-file basis,


730
00:37:58,246 --> 00:38:00,116
so each file is assigned
to a class.


731
00:38:01,346 --> 00:38:05,286
Accessibility is determined
whether the class keys have


732
00:38:05,286 --> 00:38:06,126
been unlocked.


733
00:38:06,856 --> 00:38:10,136
So there are four data
classes, and I am going


734
00:38:10,136 --> 00:38:11,276
to go through each one.


735
00:38:11,876 --> 00:38:13,616
But the one that you
may be most aware


736
00:38:13,616 --> 00:38:17,986
of is NSFileProtectionComplete
UntilFirstAuthentication.


737
00:38:18,066 --> 00:38:21,866
As of iOS 7, all
third-party app data


738
00:38:21,866 --> 00:38:24,416
by default is this data class.


739
00:38:25,316 --> 00:38:29,306
Now, your apps can't
run until after boot,


740
00:38:29,306 --> 00:38:31,426
until after the user
puts in their passcode.


741
00:38:32,166 --> 00:38:35,126
So all of your data should
at least be this protection.


742
00:38:36,176 --> 00:38:39,526
We know that some developers
are using no protection,


743
00:38:39,746 --> 00:38:43,446
but there's no reason,
no value for doing that.


744
00:38:45,456 --> 00:38:46,696
So I'm going to quickly go


745
00:38:46,786 --> 00:38:48,856
through the different data
classes in the behavior.


746
00:38:48,856 --> 00:38:50,846
As you can see, with
no protection,


747
00:38:51,256 --> 00:38:53,336
even if the user enters
the passcode or not,


748
00:38:53,816 --> 00:38:55,786
the data is always unlocked.


749
00:38:55,786 --> 00:38:56,906
It's always accessible.


750
00:38:57,876 --> 00:39:01,786
Lastly -- so next, protected
until first authentication,


751
00:39:02,206 --> 00:39:05,496
this is your default class.


752
00:39:06,596 --> 00:39:09,006
Now, it's not accessible
on boot,


753
00:39:09,526 --> 00:39:11,776
but as soon as a user
enters their passcode,


754
00:39:12,096 --> 00:39:14,726
the data is accessible, and
then it's still accessible


755
00:39:14,726 --> 00:39:16,086
when the device is locked.


756
00:39:16,586 --> 00:39:20,216
Next is protected until open.


757
00:39:20,586 --> 00:39:23,376
This is designed for
data that comes in


758
00:39:23,376 --> 00:39:25,686
and is sensitive while
the device is locked.


759
00:39:26,466 --> 00:39:29,996
So there's two types of
access, reading and writing.


760
00:39:30,606 --> 00:39:34,086
So the device boots,
and there's no access.


761
00:39:34,446 --> 00:39:35,816
The user enters their passcode.


762
00:39:36,236 --> 00:39:37,996
Now you can both read and write.


763
00:39:38,856 --> 00:39:40,046
The device locks again.


764
00:39:40,666 --> 00:39:43,736
You are unable to read, but
you can still write data.


765
00:39:45,206 --> 00:39:46,986
Lastly, complete protection.


766
00:39:47,296 --> 00:39:49,516
Now, this is for most
sensitive kinds of data,


767
00:39:49,906 --> 00:39:52,386
including health data,
financial information.


768
00:39:53,616 --> 00:39:56,946
When the device boots,
the data is unaccessible.


769
00:39:57,936 --> 00:40:01,226
When the user enters their
passcode, the data is available.


770
00:40:02,016 --> 00:40:05,036
The device locks, the data
is no longer available.


771
00:40:06,616 --> 00:40:09,446
This is a great chart to
look at later to think


772
00:40:09,446 --> 00:40:12,006
about which data protection
class you should be using.


773
00:40:12,846 --> 00:40:15,786
And lastly, make sure you test
with data protection enabled.


774
00:40:16,166 --> 00:40:19,416
You can check this by going to
Settings, Touch ID & Passcode,


775
00:40:19,806 --> 00:40:20,856
scrolling down to the bottom,


776
00:40:20,926 --> 00:40:22,646
and see if data protection
is enabled.


777
00:40:22,646 --> 00:40:28,256
Now, we've talked about a
lot of things, and you need


778
00:40:28,256 --> 00:40:32,256
to make sure that you take your
apps and test on iOS and OS X.


779
00:40:32,846 --> 00:40:34,926
You want to understand the
impact to these changes


780
00:40:35,196 --> 00:40:38,206
and make sure you are still
providing a great experience


781
00:40:38,206 --> 00:40:38,886
for your users.


782
00:40:39,646 --> 00:40:40,826
Prompt with purpose.


783
00:40:42,266 --> 00:40:45,016
Make sure to minimize data
and keep it up to date.


784
00:40:46,186 --> 00:40:48,196
Leverage some of the
platform technologies


785
00:40:48,196 --> 00:40:49,226
that we talked about today.


786
00:40:50,176 --> 00:40:54,356
And lastly, user privacy is
our shared responsibility.


787
00:40:55,196 --> 00:40:58,616
We have to do this
together, so both us and you.


788
00:40:59,186 --> 00:41:00,506
It's our responsibility


789
00:41:00,506 --> 00:41:03,006
to protect the privacy
rights of our users.


790
00:41:04,046 --> 00:41:05,056
Thank you very much.


791
00:41:06,516 --> 00:41:19,050
[ Applause ]

