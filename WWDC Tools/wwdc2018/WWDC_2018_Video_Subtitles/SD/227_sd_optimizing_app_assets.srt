1
00:00:07,516 --> 00:00:17,516
[ Music ]


2
00:00:18,516 --> 00:00:25,006
[ Applause ]


3
00:00:25,506 --> 00:00:27,126
>> Good afternoon, welcome to


4
00:00:27,126 --> 00:00:29,406
Optimizing App Assets, my name


5
00:00:29,406 --> 00:00:30,996
is Will, engineer on the Cocoa


6
00:00:30,996 --> 00:00:33,156
Frameworks group and today make


7
00:00:33,426 --> 00:00:35,266
my coworker Patrick and I are


8
00:00:35,266 --> 00:00:36,176
going to go through some of the


9
00:00:36,176 --> 00:00:38,056
best practices for optimizing


10
00:00:38,056 --> 00:00:39,296
assets in your application.


11
00:00:41,516 --> 00:00:43,726
In this day and age, many apps


12
00:00:43,726 --> 00:00:45,816
and games offer great user


13
00:00:45,816 --> 00:00:47,526
experience by incorporating high


14
00:00:47,526 --> 00:00:49,126
fidelity artwork and other type


15
00:00:49,126 --> 00:00:50,506
of assets in their application.


16
00:00:50,966 --> 00:00:52,616
And by doing so they're able to


17
00:00:52,616 --> 00:00:53,786
attract a large number of


18
00:00:53,786 --> 00:00:55,586
audience, as well as they're


19
00:00:55,586 --> 00:00:56,266
engaging.


20
00:00:56,816 --> 00:00:58,296
We want this to be true for all


21
00:00:58,296 --> 00:01:00,196
of your apps as well and that is


22
00:01:00,196 --> 00:01:02,336
why we're here today to showcase


23
00:01:02,336 --> 00:01:03,496
some of the best practices with


24
00:01:03,496 --> 00:01:05,266
Asset Catalog and also more


25
00:01:05,266 --> 00:01:06,926
importantly, on how you can


26
00:01:06,926 --> 00:01:08,876
better deploy the assets in your


27
00:01:08,876 --> 00:01:10,496
application to your users and


28
00:01:10,536 --> 00:01:11,726
how to translate that to the


29
00:01:11,726 --> 00:01:13,056
overall user experience.


30
00:01:15,386 --> 00:01:17,546
And throughout this talk we're


31
00:01:17,546 --> 00:01:19,106
going to touch on a variety of


32
00:01:19,106 --> 00:01:21,046
different aspects through the


33
00:01:21,046 --> 00:01:22,906
traditional, design, develop,


34
00:01:22,946 --> 00:01:24,156
and deployment workflow.


35
00:01:25,026 --> 00:01:26,676
But first I'd like to spend a


36
00:01:26,676 --> 00:01:28,696
little bit of time to talk about


37
00:01:28,696 --> 00:01:31,106
a topic and that is image


38
00:01:31,106 --> 00:01:31,686
compression.


39
00:01:34,706 --> 00:01:35,936
Image compression is at the


40
00:01:35,996 --> 00:01:37,106
heart of the Asset Catalog


41
00:01:37,106 --> 00:01:40,776
editor and is the last step in


42
00:01:40,776 --> 00:01:41,966
the Asset Catalog compilation


43
00:01:41,966 --> 00:01:42,516
pipeline.


44
00:01:43,106 --> 00:01:44,886
And is greatly related to some


45
00:01:44,886 --> 00:01:46,346
of the other optimizations that


46
00:01:46,346 --> 00:01:47,536
happen throughout the pipeline.


47
00:01:49,476 --> 00:01:51,896
By default Asset Catalog offers


48
00:01:52,086 --> 00:01:54,356
a variety of different types of


49
00:01:54,386 --> 00:01:56,706
compression types and is also by


50
00:01:56,706 --> 00:01:58,346
default able to select the most


51
00:01:58,346 --> 00:01:59,826
optimal compression type for


52
00:01:59,826 --> 00:02:01,296
getting any given image or


53
00:02:01,296 --> 00:02:02,006
texture asset.


54
00:02:03,616 --> 00:02:04,906
While that may be sufficient for


55
00:02:04,906 --> 00:02:07,036
most projects, it's still a good


56
00:02:07,036 --> 00:02:08,886
idea to understand what are some


57
00:02:08,886 --> 00:02:10,936
of the options offered and more


58
00:02:10,936 --> 00:02:12,766
importantly, to understand what


59
00:02:12,766 --> 00:02:14,536
are their trade-offs, as well as


60
00:02:14,536 --> 00:02:15,676
what are the implications on


61
00:02:15,676 --> 00:02:16,266
your project.


62
00:02:19,526 --> 00:02:20,726
Now before I dive into the


63
00:02:20,726 --> 00:02:22,536
specifics of any image


64
00:02:22,536 --> 00:02:24,396
compression, I'd like to talk a


65
00:02:24,396 --> 00:02:25,586
little bit about another


66
00:02:25,696 --> 00:02:27,946
optimization in Asset Catalog


67
00:02:28,616 --> 00:02:30,186
that has a huge implication on


68
00:02:30,186 --> 00:02:31,256
all of the compression that we


69
00:02:31,256 --> 00:02:33,426
do, and it's called automatic


70
00:02:33,426 --> 00:02:34,196
image packing.


71
00:02:38,116 --> 00:02:39,506
Traditionally, before the


72
00:02:39,506 --> 00:02:41,896
inception of Asset Catalog, one


73
00:02:41,896 --> 00:02:43,606
way to deploy assets in your


74
00:02:43,606 --> 00:02:45,126
application is just to dump a


75
00:02:45,126 --> 00:02:46,686
bunch of image files in the


76
00:02:46,686 --> 00:02:47,596
application [inaudible] of your


77
00:02:47,596 --> 00:02:48,076
project.


78
00:02:49,486 --> 00:02:51,206
It's important to be aware that


79
00:02:51,206 --> 00:02:52,626
there are many drawbacks, as


80
00:02:52,626 --> 00:02:54,416
well as trade-offs when doing


81
00:02:54,416 --> 00:02:55,136
this approach.


82
00:02:56,216 --> 00:02:58,956
There are two sides of downsize


83
00:02:58,986 --> 00:03:00,126
that you have to be aware of.


84
00:03:00,986 --> 00:03:01,966
The first comes from the


85
00:03:01,966 --> 00:03:03,476
additional disk storage that


86
00:03:03,476 --> 00:03:05,656
comes with doing so.


87
00:03:07,046 --> 00:03:08,876
Traditional image container


88
00:03:08,876 --> 00:03:11,796
formats uses extra space to


89
00:03:11,796 --> 00:03:13,376
store metadata, as well as other


90
00:03:13,376 --> 00:03:15,516
attributes associated with the


91
00:03:15,516 --> 00:03:16,396
underlying image.


92
00:03:17,766 --> 00:03:18,876
Now if your application has a


93
00:03:18,876 --> 00:03:21,006
huge number of assets, and if


94
00:03:21,006 --> 00:03:23,366
they have similar metadata, the


95
00:03:23,366 --> 00:03:25,016
same information gets duplicated


96
00:03:25,016 --> 00:03:26,796
over and over on disk for no


97
00:03:26,796 --> 00:03:27,466
real benefit.


98
00:03:28,936 --> 00:03:31,276
Additionally, if most of your


99
00:03:31,276 --> 00:03:33,636
assets are fairly small then you


100
00:03:33,636 --> 00:03:35,026
do not get the full benefit of


101
00:03:35,076 --> 00:03:36,236
most image compression.


102
00:03:38,346 --> 00:03:40,486
The other type of drawback comes


103
00:03:40,486 --> 00:03:41,726
mainly from the organizational


104
00:03:41,726 --> 00:03:43,086
overhead that you have to pay


105
00:03:43,086 --> 00:03:43,396
for.


106
00:03:43,766 --> 00:03:45,826
It is very hard work with a


107
00:03:45,826 --> 00:03:47,626
large cache of loose image files


108
00:03:48,666 --> 00:03:50,636
and it's also much harder to


109
00:03:50,636 --> 00:03:52,096
interact with them from the


110
00:03:52,096 --> 00:03:53,986
NSImage and UIImage family of


111
00:03:53,986 --> 00:03:54,476
APIs.


112
00:03:55,966 --> 00:03:57,526
Last but not least, you also


113
00:03:57,526 --> 00:03:58,176
have to deal with the


114
00:03:58,176 --> 00:04:00,416
inconsistency in image format,


115
00:04:00,746 --> 00:04:02,796
as well as other image


116
00:04:02,796 --> 00:04:03,656
attributes as well.


117
00:04:04,126 --> 00:04:06,256
For example, in your artwork


118
00:04:06,256 --> 00:04:07,956
collection you can have a mix of


119
00:04:07,956 --> 00:04:09,696
images but some of them support


120
00:04:09,696 --> 00:04:11,316
transparency while the others do


121
00:04:11,316 --> 00:04:11,656
not.


122
00:04:13,026 --> 00:04:14,226
The same applies to other


123
00:04:14,226 --> 00:04:16,076
attributes, such as color space


124
00:04:16,076 --> 00:04:17,586
and color gamut.


125
00:04:19,255 --> 00:04:20,805
As the catalog is able to


126
00:04:20,805 --> 00:04:22,616
address all these problems by


127
00:04:22,616 --> 00:04:24,396
identifying images that share a


128
00:04:24,396 --> 00:04:26,316
similar color spectrum profile


129
00:04:26,856 --> 00:04:28,636
and group them together to


130
00:04:28,636 --> 00:04:30,336
generate larger image atlases.


131
00:04:31,236 --> 00:04:32,726
This way you do not have to


132
00:04:32,726 --> 00:04:34,536
store the same metadata over and


133
00:04:34,536 --> 00:04:36,026
over for all of your image


134
00:04:36,026 --> 00:04:36,426
artwork.


135
00:04:37,396 --> 00:04:39,506
And you also benefit better from


136
00:04:39,506 --> 00:04:40,636
all the underlying image


137
00:04:40,636 --> 00:04:41,126
compression.


138
00:04:42,916 --> 00:04:44,866
Now let's take a look at a


139
00:04:44,866 --> 00:04:45,816
real-world example.


140
00:04:48,716 --> 00:04:49,786
Here on the left-hand side of


141
00:04:49,786 --> 00:04:51,366
the screen there are a dozen


142
00:04:51,366 --> 00:04:52,096
image artwork.


143
00:04:53,146 --> 00:04:54,436
These may look familiar to you


144
00:04:54,796 --> 00:04:55,936
and that is because they are


145
00:04:55,936 --> 00:04:57,406
taken directly from one of our


146
00:04:57,406 --> 00:04:57,966
platforms.


147
00:04:59,456 --> 00:05:00,866
Now these image artwork are all


148
00:05:00,866 --> 00:05:03,276
fairly small, but still the


149
00:05:03,276 --> 00:05:06,146
overall size add up to over 50


150
00:05:06,146 --> 00:05:06,756
kilobytes.


151
00:05:10,096 --> 00:05:11,786
This automatic image packing


152
00:05:12,636 --> 00:05:13,786
Asset Catalog is able to


153
00:05:13,786 --> 00:05:15,386
identify that all of these image


154
00:05:15,386 --> 00:05:17,426
artwork share very similar color


155
00:05:17,426 --> 00:05:19,606
spectrum and if so it'll group


156
00:05:19,656 --> 00:05:21,526
them together to generate one


157
00:05:21,526 --> 00:05:23,476
single larger image atlas.


158
00:05:25,066 --> 00:05:28,956
This way the overall disk size


159
00:05:29,056 --> 00:05:31,666
gets reduced to only 20% of the


160
00:05:31,666 --> 00:05:32,566
original size.


161
00:05:32,976 --> 00:05:34,966
That is an 80% size reduction


162
00:05:34,966 --> 00:05:36,496
saving and that is huge.


163
00:05:38,156 --> 00:05:40,086
It's also important to be aware


164
00:05:40,086 --> 00:05:41,456
of these optimization scales


165
00:05:41,456 --> 00:05:42,036
very well.


166
00:05:42,646 --> 00:05:44,576
The larger the amount of our


167
00:05:44,666 --> 00:05:46,926
asset in your application, the


168
00:05:46,926 --> 00:05:47,936
more benefit you're going to get


169
00:05:47,936 --> 00:05:48,976
out of this optimization.


170
00:05:52,356 --> 00:05:53,786
So that's automatic image


171
00:05:53,786 --> 00:05:54,126
packing.


172
00:05:56,666 --> 00:05:57,496
Now let's talk a little bit


173
00:05:57,496 --> 00:05:58,976
about lossy compression.


174
00:06:01,486 --> 00:06:03,606
Lossy compression is all about


175
00:06:03,676 --> 00:06:05,476
trading minor losses in vision


176
00:06:05,476 --> 00:06:08,146
fidelity for the large savings


177
00:06:08,216 --> 00:06:09,406
that you gain from the


178
00:06:09,406 --> 00:06:10,406
underlying compression.


179
00:06:10,926 --> 00:06:12,336
So it's really important to


180
00:06:12,336 --> 00:06:13,916
understand what are the


181
00:06:13,916 --> 00:06:15,316
scenarios in your application


182
00:06:15,556 --> 00:06:16,956
where lossy compression is most


183
00:06:16,956 --> 00:06:17,716
applicable to.


184
00:06:19,666 --> 00:06:21,916
Typically we recommend you use


185
00:06:21,966 --> 00:06:24,036
lossy compression for image


186
00:06:24,036 --> 00:06:25,296
artwork that have fairly short


187
00:06:25,296 --> 00:06:26,296
on-screen duration.


188
00:06:27,196 --> 00:06:28,726
For example, that will be


189
00:06:28,726 --> 00:06:29,916
artwork that is shown on the


190
00:06:29,916 --> 00:06:30,816
splash screen of your


191
00:06:30,816 --> 00:06:32,656
application or through


192
00:06:32,656 --> 00:06:34,106
animations and effects.


193
00:06:36,206 --> 00:06:37,636
Now it wouldn't be exciting for


194
00:06:37,636 --> 00:06:38,756
me to just stand here to talk


195
00:06:38,756 --> 00:06:40,766
about lossy compression without


196
00:06:40,766 --> 00:06:41,656
introducing a new lossy


197
00:06:41,656 --> 00:06:42,626
compression in the Asset


198
00:06:42,626 --> 00:06:43,096
Catalog.


199
00:06:43,656 --> 00:06:45,386
So I'm very happy to announce


200
00:06:45,386 --> 00:06:47,586
that this year we're extending


201
00:06:47,826 --> 00:06:50,266
support of high-efficiency image


202
00:06:50,266 --> 00:06:52,206
file format in Asset Catalog.


203
00:06:54,606 --> 00:06:55,556
If you followed our


204
00:06:55,556 --> 00:06:56,796
announcements from last year,


205
00:06:57,446 --> 00:06:58,716
you know that we introduced


206
00:06:58,716 --> 00:07:00,236
high-efficiency file image


207
00:07:00,236 --> 00:07:02,636
format on all of our platforms,


208
00:07:02,956 --> 00:07:04,826
as well as in the Asset Catalog


209
00:07:04,826 --> 00:07:05,246
editor.


210
00:07:06,616 --> 00:07:08,216
This year we're taking it one


211
00:07:08,216 --> 00:07:09,876
step further, we're making


212
00:07:09,876 --> 00:07:11,276
high-efficiency image file


213
00:07:11,276 --> 00:07:12,846
format with default lossy


214
00:07:12,846 --> 00:07:13,956
compression in Asset Catalog.


215
00:07:18,516 --> 00:07:21,566
[ Applause ]


216
00:07:22,066 --> 00:07:22,856
Thank you.


217
00:07:23,846 --> 00:07:25,836
Now let's have a quick recap of


218
00:07:25,836 --> 00:07:26,816
some of the benefits that we get


219
00:07:26,816 --> 00:07:28,636
from high-efficiency image file


220
00:07:28,636 --> 00:07:29,026
format.


221
00:07:30,066 --> 00:07:32,076
The most important thing to know


222
00:07:32,076 --> 00:07:33,396
that it's able to offer much


223
00:07:33,446 --> 00:07:35,776
better compression ratio than


224
00:07:35,936 --> 00:07:36,976
compared to some of the existing


225
00:07:36,976 --> 00:07:38,356
lossy compression that we


226
00:07:38,356 --> 00:07:39,056
already offer.


227
00:07:40,066 --> 00:07:41,246
One that you may be already


228
00:07:41,296 --> 00:07:43,566
familiar with is JPEG.


229
00:07:45,286 --> 00:07:46,706
There are many benefits that


230
00:07:46,736 --> 00:07:48,046
come with this high-efficiency


231
00:07:48,506 --> 00:07:50,146
image file format, such as


232
00:07:50,146 --> 00:07:51,766
support for transparency out of


233
00:07:51,766 --> 00:07:52,186
the box.


234
00:07:54,006 --> 00:07:55,726
And more importantly, it's


235
00:07:55,726 --> 00:07:57,836
important to be aware that Asset


236
00:07:57,836 --> 00:07:59,266
Catalog is able to automatically


237
00:07:59,356 --> 00:08:01,246
convert image files from other


238
00:08:01,246 --> 00:08:03,676
formats to high-efficiency image


239
00:08:03,676 --> 00:08:05,686
file formats, which means that


240
00:08:05,846 --> 00:08:07,916
as long as your image assets are


241
00:08:07,916 --> 00:08:09,396
tagged to this lossy compression


242
00:08:09,826 --> 00:08:12,606
there are no extra required, no


243
00:08:12,606 --> 00:08:14,186
extra action required on your


244
00:08:14,186 --> 00:08:14,476
end.


245
00:08:14,676 --> 00:08:16,486
This all happens automatically


246
00:08:17,066 --> 00:08:18,346
in the Asset Catalog compilation


247
00:08:18,346 --> 00:08:18,806
pipeline.


248
00:08:20,136 --> 00:08:22,636
For more in-depth information on


249
00:08:22,636 --> 00:08:23,766
high-efficiency image file


250
00:08:23,766 --> 00:08:26,086
format, I suggest you refer to


251
00:08:26,086 --> 00:08:26,956
our session from last year.


252
00:08:32,046 --> 00:08:33,535
Now let's shift our focus to


253
00:08:33,535 --> 00:08:34,515
lossless compression.


254
00:08:35,775 --> 00:08:37,035
Lossless compression is the


255
00:08:37,035 --> 00:08:39,066
default compression type and


256
00:08:39,066 --> 00:08:40,826
it's used for the majority of


257
00:08:40,826 --> 00:08:41,856
application assets.


258
00:08:43,256 --> 00:08:44,376
Therefore, it is really


259
00:08:44,376 --> 00:08:45,856
important to understand how you


260
00:08:45,856 --> 00:08:47,406
can get the most benefit out of


261
00:08:47,466 --> 00:08:47,976
lossy compression.


262
00:08:51,716 --> 00:08:54,236
Typically image artwork can be


263
00:08:54,236 --> 00:08:55,786
categorized into two groups


264
00:08:55,956 --> 00:08:57,256
based on their color spectrum


265
00:08:57,256 --> 00:09:00,046
profile, and they each benefit


266
00:09:00,116 --> 00:09:02,706
differently from any lossless


267
00:09:02,706 --> 00:09:03,296
compression.


268
00:09:04,366 --> 00:09:05,336
Let's take a look at that.


269
00:09:08,326 --> 00:09:09,786
The first category of images are


270
00:09:09,786 --> 00:09:12,006
commonly referred as simple


271
00:09:12,006 --> 00:09:12,476
artwork.


272
00:09:13,766 --> 00:09:15,366
And they're referred this way


273
00:09:16,586 --> 00:09:17,686
because they have a fairly


274
00:09:17,686 --> 00:09:19,546
narrow color spectrum and a


275
00:09:19,546 --> 00:09:21,226
fairly small number of discrete


276
00:09:21,306 --> 00:09:24,536
color values and that is because


277
00:09:24,536 --> 00:09:26,066
of the simplistic designs.


278
00:09:26,496 --> 00:09:27,776
And they're best represented as


279
00:09:27,776 --> 00:09:29,046
many application icons.


280
00:09:29,776 --> 00:09:32,806
On the other hand, the other


281
00:09:32,806 --> 00:09:34,656
type of image artwork are


282
00:09:34,886 --> 00:09:36,186
referred as complex artwork.


283
00:09:38,026 --> 00:09:39,606
Again, both these types of image


284
00:09:39,606 --> 00:09:41,756
assets benefit differently from


285
00:09:41,756 --> 00:09:42,666
lossless compression.


286
00:09:43,386 --> 00:09:44,766
And generally speaking, any


287
00:09:44,766 --> 00:09:46,366
lossless compression will do


288
00:09:46,366 --> 00:09:47,956
really great to either one of


289
00:09:47,956 --> 00:09:49,156
them because they're optimized


290
00:09:49,156 --> 00:09:49,506
for it.


291
00:09:51,156 --> 00:09:52,676
We realize that both of these


292
00:09:52,826 --> 00:09:54,786
are really important in many


293
00:09:54,886 --> 00:09:55,356
projects.


294
00:09:55,746 --> 00:09:57,926
And we also want to have all of


295
00:09:57,926 --> 00:09:59,886
your assets to be deployed


296
00:09:59,886 --> 00:10:00,886
through the best lossless


297
00:10:00,886 --> 00:10:01,956
compression possible.


298
00:10:03,286 --> 00:10:04,606
So I'm very happy to announce


299
00:10:04,606 --> 00:10:06,576
this year we're introducing a


300
00:10:06,576 --> 00:10:08,646
new lossless compression in


301
00:10:08,646 --> 00:10:11,996
Asset Catalog and it's called


302
00:10:12,066 --> 00:10:13,576
Apple Deep Pixel Image


303
00:10:13,576 --> 00:10:13,976
Compression.


304
00:10:17,516 --> 00:10:21,806
[ Applause ]


305
00:10:22,306 --> 00:10:22,886
Thank you again.


306
00:10:24,046 --> 00:10:26,286
Apple Deep Pixel Image


307
00:10:26,286 --> 00:10:28,116
Compression is a flexible


308
00:10:28,116 --> 00:10:30,366
compression that is adapted to


309
00:10:30,366 --> 00:10:31,546
the image color spectrum.


310
00:10:32,726 --> 00:10:33,686
What that means is that it's


311
00:10:33,686 --> 00:10:35,076
able to select the most optimal


312
00:10:35,076 --> 00:10:36,906
compression algorithm based on


313
00:10:36,906 --> 00:10:37,686
the color spectrum


314
00:10:37,686 --> 00:10:40,166
characteristics of any image


315
00:10:40,446 --> 00:10:40,896
artwork.


316
00:10:42,566 --> 00:10:44,106
This year not only we're


317
00:10:44,106 --> 00:10:46,006
extending this new compression


318
00:10:46,346 --> 00:10:48,126
to all of you guys, we're also


319
00:10:48,126 --> 00:10:49,506
enabling it on all of our


320
00:10:49,616 --> 00:10:51,056
platforms, as well as first


321
00:10:51,056 --> 00:10:51,746
party apps.


322
00:10:52,616 --> 00:10:55,036
And by doing so we're able to


323
00:10:55,036 --> 00:10:57,746
observe on average 20% size


324
00:10:57,746 --> 00:10:59,586
reduction across all of our


325
00:11:00,136 --> 00:11:02,556
built projects, which is a


326
00:11:02,556 --> 00:11:02,976
pretty big deal.


327
00:11:03,516 --> 00:11:08,566
[ Applause ]


328
00:11:09,066 --> 00:11:11,976
Now let's look at some numbers.


329
00:11:15,186 --> 00:11:16,656
Here's a chart that shows you


330
00:11:16,846 --> 00:11:18,586
the overall size of all the


331
00:11:18,586 --> 00:11:20,896
Asset Catalogs from some of our


332
00:11:20,896 --> 00:11:22,486
select platforms.


333
00:11:23,066 --> 00:11:25,316
And it is immediately obvious


334
00:11:25,616 --> 00:11:27,606
that we're able to see about up


335
00:11:27,716 --> 00:11:30,086
to 20% size reductions across


336
00:11:30,086 --> 00:11:30,956
all of our platforms.


337
00:11:36,046 --> 00:11:37,206
When it comes to lossless


338
00:11:37,206 --> 00:11:39,216
compression, compression ratio


339
00:11:39,216 --> 00:11:40,426
is only half the story.


340
00:11:41,556 --> 00:11:42,386
Because of the fact that


341
00:11:42,386 --> 00:11:44,336
lossless compression is used for


342
00:11:44,336 --> 00:11:46,086
the majority of your application


343
00:11:46,086 --> 00:11:48,496
artwork, decode time is just


344
00:11:48,496 --> 00:11:49,456
important as well.


345
00:11:50,796 --> 00:11:51,886
Apple Deep Pixel Image


346
00:11:51,916 --> 00:11:54,056
Compression is also able to


347
00:11:54,056 --> 00:11:56,656
offer up to 20% improvement in


348
00:11:56,656 --> 00:11:56,966
decode time.


349
00:12:03,046 --> 00:12:04,076
So that was lossless


350
00:12:04,076 --> 00:12:04,626
compression.


351
00:12:06,016 --> 00:12:07,976
Now I'd like to shift gears to


352
00:12:07,976 --> 00:12:10,346
touch on two separate but


353
00:12:10,456 --> 00:12:13,256
strongly connected subjects that


354
00:12:13,326 --> 00:12:15,056
have a huge implication on all


355
00:12:15,056 --> 00:12:16,176
the optimizations and


356
00:12:16,256 --> 00:12:17,706
compressions that I just talked


357
00:12:17,706 --> 00:12:20,746
about, and their deployment and


358
00:12:20,746 --> 00:12:20,956
App Thinning.


359
00:12:25,606 --> 00:12:27,376
Here's a quick recap of what App


360
00:12:27,376 --> 00:12:27,996
Thinning is.


361
00:12:28,396 --> 00:12:29,966
App thinning is a process that


362
00:12:29,966 --> 00:12:31,466
takes place in the App Store


363
00:12:31,836 --> 00:12:33,306
that generates all variants of


364
00:12:33,306 --> 00:12:35,046
your project targeting all the


365
00:12:35,046 --> 00:12:36,926
device models, as well as


366
00:12:37,526 --> 00:12:38,916
versions of your deployment


367
00:12:38,916 --> 00:12:39,226
target.


368
00:12:41,336 --> 00:12:42,656
When we take advantage of App


369
00:12:42,656 --> 00:12:46,216
Thinning is to have the


370
00:12:46,216 --> 00:12:47,216
deployment target of your


371
00:12:47,216 --> 00:12:49,496
application to a version that is


372
00:12:49,496 --> 00:12:51,806
lower than the latest version of


373
00:12:51,806 --> 00:12:52,926
the platform you're targeting.


374
00:12:53,886 --> 00:12:55,756
This way you'll be able to reach


375
00:12:55,786 --> 00:12:56,726
more audience.


376
00:12:57,346 --> 00:13:00,926
App thinning is able to take


377
00:13:00,926 --> 00:13:02,676
care of generating all the


378
00:13:02,676 --> 00:13:04,596
variants of your project and


379
00:13:04,596 --> 00:13:06,786
deploy the most optimal one


380
00:13:06,786 --> 00:13:08,896
across all of your user base.


381
00:13:10,716 --> 00:13:12,196
This year if you build your


382
00:13:12,196 --> 00:13:14,116
project with Xcode 10 and the


383
00:13:14,116 --> 00:13:17,016
iOS 12 family of SDKs, your


384
00:13:17,016 --> 00:13:18,546
project is automatically going


385
00:13:18,546 --> 00:13:19,606
to benefit from all the


386
00:13:19,606 --> 00:13:20,896
optimizations and new


387
00:13:20,896 --> 00:13:22,186
compressions that I just talked


388
00:13:22,186 --> 00:13:22,556
about.


389
00:13:24,336 --> 00:13:27,456
However, if you back deploy your


390
00:13:27,456 --> 00:13:28,566
application to an earlier


391
00:13:28,566 --> 00:13:33,026
version the new optimizations


392
00:13:33,326 --> 00:13:34,216
are not preserved.


393
00:13:35,836 --> 00:13:37,156
And that is because App Thinning


394
00:13:37,726 --> 00:13:39,116
has to generate variants that


395
00:13:39,116 --> 00:13:40,456
are compatible to the earlier


396
00:13:40,456 --> 00:13:41,986
versions of the targeted


397
00:13:41,986 --> 00:13:42,466
platform.


398
00:13:44,056 --> 00:13:47,396
This isn't ideal and more


399
00:13:47,396 --> 00:13:48,826
importantly, we really want all


400
00:13:48,826 --> 00:13:50,986
of your assets to be deployed in


401
00:13:50,986 --> 00:13:52,156
the most optimal manner.


402
00:13:52,886 --> 00:13:54,546
So I'm happy to announce this


403
00:13:54,546 --> 00:13:56,646
year we're introducing a new


404
00:13:56,646 --> 00:13:59,176
version of App Thinning, called


405
00:13:59,176 --> 00:13:59,926
OS Variant Thinning.


406
00:14:02,496 --> 00:14:05,936
With OS Variant Thinning your


407
00:14:05,936 --> 00:14:07,846
application can still target


408
00:14:08,806 --> 00:14:09,846
those that are on earlier


409
00:14:09,846 --> 00:14:11,116
versions of your target


410
00:14:11,116 --> 00:14:13,736
platform, say in this case from


411
00:14:13,736 --> 00:14:15,356
iOS 9 all the way to iOS 11.


412
00:14:17,246 --> 00:14:18,216
And for those that are running


413
00:14:18,216 --> 00:14:20,936
on the latest version of iOS, OS


414
00:14:20,936 --> 00:14:22,276
Variant Thinning is able to


415
00:14:22,276 --> 00:14:23,536
generate a special variant of


416
00:14:23,536 --> 00:14:25,226
your project that has all the


417
00:14:25,226 --> 00:14:26,826
latest optimizations and


418
00:14:26,826 --> 00:14:27,696
compression types.


419
00:14:28,786 --> 00:14:31,206
This way everybody is able to


420
00:14:31,206 --> 00:14:33,166
get the most effective version


421
00:14:33,166 --> 00:14:34,856
of your project and everybody's


422
00:14:34,856 --> 00:14:34,976
happy.


423
00:14:39,516 --> 00:14:43,416
[ Applause ]


424
00:14:43,916 --> 00:14:45,006
So that was App Thinning and


425
00:14:45,006 --> 00:14:45,896
backward deployment.


426
00:14:47,506 --> 00:14:48,586
Now I'd like to walk you through


427
00:14:48,586 --> 00:14:50,246
an example of how you can


428
00:14:50,246 --> 00:14:52,486
exercise the same App Thinning


429
00:14:52,486 --> 00:14:54,416
expert workflow locally within


430
00:14:54,446 --> 00:14:54,986
Xcode.


431
00:14:56,246 --> 00:14:58,226
It is a fairly simple process,


432
00:14:59,146 --> 00:15:00,436
all you have to do is go to


433
00:15:00,506 --> 00:15:02,816
Xcode archive button.


434
00:15:04,136 --> 00:15:05,746
This will simply instruct Xcode


435
00:15:05,966 --> 00:15:08,576
to generate all variants of your


436
00:15:09,376 --> 00:15:09,616
project.


437
00:15:10,436 --> 00:15:12,536
Once that is done simply click


438
00:15:12,536 --> 00:15:15,106
on the Organizer button and that


439
00:15:15,106 --> 00:15:17,106
will bring up a window that


440
00:15:17,106 --> 00:15:18,496
shows all the variants generated


441
00:15:18,656 --> 00:15:19,356
for your project.


442
00:15:22,256 --> 00:15:23,936
And here's a window for the


443
00:15:23,936 --> 00:15:25,836
garage band project that we took


444
00:15:25,986 --> 00:15:27,546
to perform this exercise.


445
00:15:29,196 --> 00:15:30,556
The first thing that Xcode is


446
00:15:30,556 --> 00:15:32,626
going to ask is to select a type


447
00:15:32,626 --> 00:15:34,976
of distribution method that you


448
00:15:34,976 --> 00:15:36,196
can distribute all the variants


449
00:15:36,196 --> 00:15:37,176
that it just generated.


450
00:15:38,596 --> 00:15:39,676
For the purpose of this


451
00:15:39,746 --> 00:15:42,086
exercise, simply select Ad Hoc


452
00:15:42,386 --> 00:15:43,016
Distribution.


453
00:15:46,406 --> 00:15:49,086
And on the next window, in the


454
00:15:49,086 --> 00:15:51,656
App Thinning field, simply


455
00:15:51,656 --> 00:15:54,406
select all compatible device


456
00:15:54,406 --> 00:15:54,956
variants.


457
00:15:56,196 --> 00:15:58,446
This will instruct Xcode to


458
00:15:58,446 --> 00:16:01,316
export all the variants that are


459
00:16:01,316 --> 00:16:02,966
targeting all the supported


460
00:16:03,926 --> 00:16:06,056
device types.


461
00:16:06,536 --> 00:16:08,786
Once this is done Xcode is able


462
00:16:08,786 --> 00:16:11,126
to synthesize a report that


463
00:16:11,126 --> 00:16:12,446
summarizes all the variants that


464
00:16:12,446 --> 00:16:13,276
it just generated.


465
00:16:14,536 --> 00:16:15,486
And there are a few key data


466
00:16:15,486 --> 00:16:16,816
points that you can extract from


467
00:16:16,816 --> 00:16:18,476
the report to help you better


468
00:16:18,476 --> 00:16:19,686
understand the deployment of


469
00:16:19,716 --> 00:16:21,946
your project and again help to


470
00:16:21,946 --> 00:16:24,106
answer a few key questions such


471
00:16:24,106 --> 00:16:25,616
as how many variants are


472
00:16:25,616 --> 00:16:28,016
generated from my project, what


473
00:16:28,016 --> 00:16:30,526
do their sizes look like, and


474
00:16:30,526 --> 00:16:32,336
are there any rooms left for the


475
00:16:32,336 --> 00:16:34,026
optimization and fine-tuning for


476
00:16:34,026 --> 00:16:35,186
any particular variant.


477
00:16:35,836 --> 00:16:39,036
And it turns out that actually


478
00:16:39,036 --> 00:16:40,686
half the numbers generated for


479
00:16:40,686 --> 00:16:42,386
the garage project that it just


480
00:16:42,386 --> 00:16:44,806
exported and let's take a look


481
00:16:44,806 --> 00:16:45,666
at that.


482
00:16:47,556 --> 00:16:50,576
So here on this chart it's going


483
00:16:50,766 --> 00:16:53,216
to show you the sizes of all the


484
00:16:53,216 --> 00:16:55,226
variants generated for a select


485
00:16:55,336 --> 00:16:56,636
set of device models.


486
00:16:58,056 --> 00:16:59,776
And these are the sizes


487
00:16:59,776 --> 00:17:01,876
generated for the iOS 11 and


488
00:17:01,876 --> 00:17:03,126
earlier versions of the


489
00:17:03,126 --> 00:17:03,626
variants.


490
00:17:05,156 --> 00:17:07,175
Now because garage band is a


491
00:17:07,175 --> 00:17:08,856
fairly large project, with tens


492
00:17:08,856 --> 00:17:10,316
of thousands of image artwork


493
00:17:11,165 --> 00:17:12,376
the sizes of the generated


494
00:17:12,445 --> 00:17:15,516
variants range from 90 to over


495
00:17:15,516 --> 00:17:16,396
100 megabytes.


496
00:17:19,586 --> 00:17:21,415
And here are the numbers for the


497
00:17:21,415 --> 00:17:22,536
iOS 12 variants.


498
00:17:23,826 --> 00:17:25,675
And again from this graph it is


499
00:17:25,866 --> 00:17:27,516
immediately obvious that we're


500
00:17:27,516 --> 00:17:29,896
getting about from 10 to 20%


501
00:17:29,896 --> 00:17:31,976
saving sizes in size reductions.


502
00:17:32,756 --> 00:17:34,556
Now if this number looks


503
00:17:34,556 --> 00:17:36,786
familiar to you by now all of


504
00:17:36,786 --> 00:17:38,786
these optimizations are from all


505
00:17:38,786 --> 00:17:39,896
the optimizations and


506
00:17:39,896 --> 00:17:40,746
compressions that I just talked


507
00:17:40,746 --> 00:17:40,966
about.


508
00:17:46,396 --> 00:17:47,666
So that is image compression.


509
00:17:48,886 --> 00:17:50,046
Now I'd like to hand it to my


510
00:17:50,046 --> 00:17:51,896
colleague Patrick to talk about


511
00:17:52,556 --> 00:17:53,916
design and production of your


512
00:17:53,916 --> 00:17:54,846
application asset.


513
00:17:55,516 --> 00:17:58,766
[ Applause ]


514
00:17:59,266 --> 00:17:59,826
>> Thank you Will.


515
00:18:02,506 --> 00:18:03,766
So that's great, so you just


516
00:18:03,766 --> 00:18:05,486
heard about some amazing ways


517
00:18:05,486 --> 00:18:07,106
that you can get your assets


518
00:18:07,106 --> 00:18:08,606
improved just by using Asset


519
00:18:08,606 --> 00:18:09,746
Catalogs in Xcode.


520
00:18:09,746 --> 00:18:11,866
I'm going to talk a little bit


521
00:18:12,136 --> 00:18:13,296
more about a few other things


522
00:18:13,296 --> 00:18:14,166
that you can do with just a


523
00:18:14,166 --> 00:18:15,116
little bit of effort in Asset


524
00:18:15,116 --> 00:18:17,366
Catalogs to really optimize your


525
00:18:17,486 --> 00:18:18,726
application's assets.


526
00:18:19,436 --> 00:18:21,966
So and I'd like to begin with


527
00:18:22,096 --> 00:18:23,496
design and production because


528
00:18:23,496 --> 00:18:24,826
this is really where it all


529
00:18:24,826 --> 00:18:25,326
begins.


530
00:18:28,376 --> 00:18:29,986
So assets as you know they come


531
00:18:29,986 --> 00:18:31,446
from many tools, many different


532
00:18:31,446 --> 00:18:32,726
workflows, many different


533
00:18:32,726 --> 00:18:34,516
sources but they have one thing


534
00:18:34,516 --> 00:18:35,806
in common, they ultimately all


535
00:18:35,806 --> 00:18:37,206
came from humans at some point.


536
00:18:38,146 --> 00:18:39,446
And it really pays to be


537
00:18:39,446 --> 00:18:41,056
organized in terms of


538
00:18:41,056 --> 00:18:43,086
understanding that process of


539
00:18:43,086 --> 00:18:44,376
how those assets come into your


540
00:18:44,376 --> 00:18:46,386
software workflow and to pay


541
00:18:46,386 --> 00:18:47,086
attention to some of those


542
00:18:47,086 --> 00:18:48,306
details that can really pay big


543
00:18:48,306 --> 00:18:50,376
dividends in your application


544
00:18:50,376 --> 00:18:50,886
efficacy.


545
00:18:51,636 --> 00:18:54,796
So the topic I'd like to talk


546
00:18:54,796 --> 00:18:56,746
about first is color management,


547
00:18:56,886 --> 00:18:58,606
often overlooked but still quite


548
00:18:58,606 --> 00:18:59,116
essential.


549
00:19:01,256 --> 00:19:03,886
So on disk an image asset is


550
00:19:03,926 --> 00:19:05,296
just a bunch of boring bytes


551
00:19:05,946 --> 00:19:07,126
right, it doesn't really mean


552
00:19:07,126 --> 00:19:09,846
anything until you apply color


553
00:19:09,846 --> 00:19:10,126
to it.


554
00:19:10,206 --> 00:19:11,276
How does it get the color, how


555
00:19:11,276 --> 00:19:12,756
does the system even know what


556
00:19:12,756 --> 00:19:13,656
each of the numbers on those


557
00:19:13,656 --> 00:19:14,476
bytes means?


558
00:19:14,546 --> 00:19:15,926
Well the answer is it comes from


559
00:19:15,926 --> 00:19:17,836
the color profile, that is what


560
00:19:17,836 --> 00:19:19,816
actually gives each one of those


561
00:19:19,816 --> 00:19:21,746
color [inaudible] a value and an


562
00:19:21,746 --> 00:19:23,206
absolute colorimetric value, it


563
00:19:23,206 --> 00:19:24,776
tells the system how it should


564
00:19:24,776 --> 00:19:25,006
look.


565
00:19:25,866 --> 00:19:27,086
As such, I want to emphasize


566
00:19:27,086 --> 00:19:27,996
that it's really important to


567
00:19:27,996 --> 00:19:29,376
maintain those color profiles in


568
00:19:29,376 --> 00:19:31,016
your assets as source artifacts.


569
00:19:31,536 --> 00:19:33,016
These are vital pieces of


570
00:19:33,016 --> 00:19:34,956
metadata that keep the designer


571
00:19:34,956 --> 00:19:37,706
intent intact on how that asset


572
00:19:37,706 --> 00:19:38,256
was delivered.


573
00:19:38,696 --> 00:19:40,966
And resist the temptation to


574
00:19:40,966 --> 00:19:42,476
strip those profiles out because


575
00:19:42,476 --> 00:19:43,616
you think they're just extra


576
00:19:43,616 --> 00:19:45,266
metadata that you know take up a


577
00:19:45,266 --> 00:19:45,946
bunch of payload.


578
00:19:45,946 --> 00:19:47,216
These are source artifacts that


579
00:19:47,216 --> 00:19:48,166
are checking into your project,


580
00:19:48,386 --> 00:19:49,706
let the tools worry about


581
00:19:49,706 --> 00:19:51,066
optimization for deployment.


582
00:19:53,526 --> 00:19:55,496
So why is any of this color


583
00:19:55,496 --> 00:19:55,966
stuff important?


584
00:19:56,106 --> 00:19:58,236
Well the answer is our devices


585
00:19:58,236 --> 00:19:59,866
have a broad range of displays


586
00:20:00,276 --> 00:20:01,496
with different characteristics


587
00:20:01,706 --> 00:20:03,006
and something needs to make sure


588
00:20:03,006 --> 00:20:04,146
that the actual colors in your


589
00:20:04,146 --> 00:20:05,556
assets match appropriately and


590
00:20:05,556 --> 00:20:06,406
look appropriate and get


591
00:20:06,406 --> 00:20:08,086
reproduced appropriately on all


592
00:20:08,086 --> 00:20:09,186
those different displays, that's


593
00:20:09,186 --> 00:20:11,146
the job of color management.


594
00:20:11,776 --> 00:20:13,586
This is a computational process,


595
00:20:14,236 --> 00:20:15,946
it can be done either on a CPU


596
00:20:15,946 --> 00:20:18,226
or at times on a GPU, but it is


597
00:20:18,226 --> 00:20:18,786
some work.


598
00:20:20,146 --> 00:20:22,406
Now Asset Catalogs come into


599
00:20:22,406 --> 00:20:24,006
play here because what they will


600
00:20:24,006 --> 00:20:25,536
do is at build time in the


601
00:20:25,536 --> 00:20:27,416
compilation process they will


602
00:20:27,416 --> 00:20:29,116
perform this color matching for


603
00:20:29,116 --> 00:20:29,236
you.


604
00:20:29,906 --> 00:20:31,116
And this is really great because


605
00:20:31,116 --> 00:20:32,916
it means that computation is not


606
00:20:32,916 --> 00:20:34,056
happening on device when it


607
00:20:34,056 --> 00:20:34,986
really doesn't have to.


608
00:20:35,856 --> 00:20:37,746
And your assets are ready to go


609
00:20:37,746 --> 00:20:39,076
on device and ready to be loaded


610
00:20:39,076 --> 00:20:39,986
and ready to be displayed


611
00:20:39,986 --> 00:20:41,236
without any further ado.


612
00:20:42,176 --> 00:20:43,566
And as a bonus this extra


613
00:20:43,566 --> 00:20:44,806
processing we do to do this


614
00:20:44,806 --> 00:20:46,066
color management at build time


615
00:20:46,426 --> 00:20:48,276
eliminates the profile payload


616
00:20:48,276 --> 00:20:49,246
that you might've intended to


617
00:20:49,246 --> 00:20:51,086
strip earlier and replaces it


618
00:20:51,086 --> 00:20:52,516
with an ultra-efficient way of


619
00:20:52,516 --> 00:20:54,846
annotating exactly what color


620
00:20:54,846 --> 00:20:56,316
space we now have and the pixels


621
00:20:56,316 --> 00:20:59,416
on disk, so that's color


622
00:20:59,416 --> 00:20:59,896
management.


623
00:21:00,306 --> 00:21:02,346
A related topic I'd like to talk


624
00:21:02,346 --> 00:21:03,886
about here is working space.


625
00:21:05,316 --> 00:21:06,816
Now by working space I'm really


626
00:21:06,816 --> 00:21:08,506
referring to the environment in


627
00:21:08,506 --> 00:21:09,746
which these assets actually got


628
00:21:09,746 --> 00:21:10,826
originated in the first place,


629
00:21:10,826 --> 00:21:13,226
this is the designer or maybe as


630
00:21:13,226 --> 00:21:14,796
an engineer are working on some


631
00:21:14,796 --> 00:21:16,276
artwork yourself, you're working


632
00:21:16,276 --> 00:21:17,596
in a design tool, you're


633
00:21:17,596 --> 00:21:18,586
creating content.


634
00:21:19,106 --> 00:21:21,476
It's important in these contexts


635
00:21:21,476 --> 00:21:23,076
to use consistent color settings


636
00:21:23,076 --> 00:21:24,196
for all the design files that


637
00:21:24,196 --> 00:21:25,206
you have for your project.


638
00:21:25,666 --> 00:21:27,346
This actually is a good practice


639
00:21:27,346 --> 00:21:28,606
and it actually has positive


640
00:21:28,606 --> 00:21:30,086
technical benefits because it


641
00:21:30,086 --> 00:21:32,296
ensures a consistency between


642
00:21:32,466 --> 00:21:35,176
how you organize everything


643
00:21:35,176 --> 00:21:37,956
across your application.


644
00:21:38,726 --> 00:21:40,836
There are two specific formats


645
00:21:40,926 --> 00:21:42,576
that are most talked about and


646
00:21:42,576 --> 00:21:44,726
most recommended for creating


647
00:21:44,726 --> 00:21:45,686
working design files.


648
00:21:46,136 --> 00:21:49,046
sRGB 8 bits is by far the most


649
00:21:49,046 --> 00:21:50,506
common, a very popular choice


650
00:21:50,506 --> 00:21:51,406
and it has broadest


651
00:21:51,406 --> 00:21:52,686
applicability across all of our


652
00:21:52,686 --> 00:21:55,166
devices and your content types


653
00:21:55,166 --> 00:21:55,386
really.


654
00:21:56,216 --> 00:21:58,136
However, if you're working on a


655
00:21:58,136 --> 00:22:00,006
really killer take it up to the


656
00:22:00,006 --> 00:22:01,566
next notch vibrant design like


657
00:22:01,616 --> 00:22:03,236
this wonderful flower icon here


658
00:22:03,236 --> 00:22:05,206
for example you may want to take


659
00:22:05,206 --> 00:22:06,466
advantage of the wide color


660
00:22:06,466 --> 00:22:08,306
characteristics, capabilities of


661
00:22:08,306 --> 00:22:11,716
some of our devices and use the


662
00:22:11,716 --> 00:22:14,406
wide color, use a generated wide


663
00:22:14,406 --> 00:22:15,006
color asset.


664
00:22:15,006 --> 00:22:16,466
For this we recommend you use


665
00:22:16,506 --> 00:22:18,096
Display P3 as your working


666
00:22:18,096 --> 00:22:20,456
profile and 16 bits per channel


667
00:22:20,456 --> 00:22:21,496
to make sure you don't lose


668
00:22:21,496 --> 00:22:23,766
anything in executing that


669
00:22:23,766 --> 00:22:24,166
design.


670
00:22:25,206 --> 00:22:27,186
Now Xcode and the platforms,


671
00:22:27,186 --> 00:22:28,536
runtime platforms have a wide


672
00:22:28,536 --> 00:22:30,246
range of processing and


673
00:22:30,246 --> 00:22:31,606
management options to handle


674
00:22:31,606 --> 00:22:33,346
this wide color asset.


675
00:22:34,126 --> 00:22:35,156
I'm not going to go into too


676
00:22:35,156 --> 00:22:36,786
much depth here, but I encourage


677
00:22:36,786 --> 00:22:38,706
you to refer to and look at the


678
00:22:38,706 --> 00:22:40,226
Working with Wide Color session


679
00:22:40,226 --> 00:22:42,366
that I did two years ago where I


680
00:22:42,366 --> 00:22:43,576
went into some depth on these


681
00:22:43,576 --> 00:22:44,526
topics and it gives you some


682
00:22:44,526 --> 00:22:45,556
more background for this.


683
00:22:45,976 --> 00:22:48,536
Also, new since last year


684
00:22:48,536 --> 00:22:50,496
there's a great treatment of


685
00:22:50,496 --> 00:22:52,046
working with P3 assets up on the


686
00:22:52,046 --> 00:22:54,066
iOS Design Resources section of


687
00:22:54,066 --> 00:22:55,916
the developer.apple.com website.


688
00:22:58,506 --> 00:23:00,106
Okay now let's get into some


689
00:23:00,106 --> 00:23:03,496
actual software art here.


690
00:23:03,496 --> 00:23:08,396
Okay so you may have, your UI


691
00:23:08,396 --> 00:23:10,296
typically has to adapt to a lot


692
00:23:10,296 --> 00:23:11,436
of different presentations and


693
00:23:11,436 --> 00:23:14,026
layouts, this can commonly call


694
00:23:14,026 --> 00:23:15,706
for artwork that actually needs


695
00:23:15,756 --> 00:23:18,576
to stretch and grow to adapt to


696
00:23:18,576 --> 00:23:19,546
those layout changes.


697
00:23:20,076 --> 00:23:21,126
How do you accomplish this with


698
00:23:21,126 --> 00:23:21,616
artwork?


699
00:23:22,506 --> 00:23:24,396
Well the most common approach is


700
00:23:24,396 --> 00:23:25,976
to identify a stretchable


701
00:23:25,976 --> 00:23:27,176
portion of the image and the


702
00:23:27,176 --> 00:23:28,266
unstretchable portions of the


703
00:23:28,266 --> 00:23:28,556
image.


704
00:23:29,056 --> 00:23:29,986
Why is there a difference?


705
00:23:29,986 --> 00:23:31,576
Well considering, this is a


706
00:23:31,726 --> 00:23:33,136
crude example here on the slide,


707
00:23:33,136 --> 00:23:34,146
but imagine that we had a


708
00:23:34,146 --> 00:23:35,686
beautiful shape to the overall


709
00:23:35,686 --> 00:23:36,946
asset and like round corners


710
00:23:36,946 --> 00:23:37,856
that you wanted to preserve at


711
00:23:37,856 --> 00:23:39,576
all possible sizes like a frame.


712
00:23:40,276 --> 00:23:41,126
You want to make sure that you


713
00:23:41,126 --> 00:23:42,486
don't stretch those pieces, the


714
00:23:42,486 --> 00:23:44,126
blue pieces in this slide but


715
00:23:44,126 --> 00:23:45,396
you can stretch the yellow


716
00:23:45,396 --> 00:23:45,786
pieces.


717
00:23:46,496 --> 00:23:48,286
So traditionally the way this is


718
00:23:48,286 --> 00:23:50,236
done is with the modern design


719
00:23:50,236 --> 00:23:52,066
tools is to slice all these


720
00:23:52,256 --> 00:23:54,276
items up, identify all these


721
00:23:54,276 --> 00:23:55,556
regions, and distribute them as


722
00:23:55,556 --> 00:23:56,716
individual assets.


723
00:23:57,096 --> 00:23:58,746
Then the programmer would


724
00:23:58,746 --> 00:24:00,426
reassemble these in the final


725
00:24:00,426 --> 00:24:02,126
design size using a draw 3 or a


726
00:24:02,126 --> 00:24:03,786
nine-part API for example.


727
00:24:04,886 --> 00:24:07,046
Now this works fine and has been


728
00:24:07,046 --> 00:24:08,066
a tried and true practice for


729
00:24:08,066 --> 00:24:09,976
many years, but it does have a


730
00:24:09,976 --> 00:24:10,586
downside.


731
00:24:10,986 --> 00:24:12,616
Reassembling those images at a


732
00:24:12,616 --> 00:24:13,996
final size is a pretty CPU


733
00:24:13,996 --> 00:24:16,096
intensive task and it can be a


734
00:24:16,096 --> 00:24:17,996
bit complex and inefficient and


735
00:24:17,996 --> 00:24:21,176
it's not really a good fit for


736
00:24:21,176 --> 00:24:23,306
modern GPU UI pipeline like core


737
00:24:23,306 --> 00:24:24,126
animation.


738
00:24:25,946 --> 00:24:26,926
What's a better approach?


739
00:24:27,706 --> 00:24:29,156
A better approach is to take a


740
00:24:29,216 --> 00:24:31,556
single image and just provide


741
00:24:31,556 --> 00:24:33,666
the stretching metadata for it


742
00:24:33,666 --> 00:24:34,716
that identifies what the


743
00:24:34,716 --> 00:24:35,916
stretchable portion is.


744
00:24:36,996 --> 00:24:38,426
And that really enables the most


745
00:24:38,426 --> 00:24:40,226
optimal smooth GPU animation of


746
00:24:40,226 --> 00:24:41,286
that resizable image.


747
00:24:42,006 --> 00:24:44,026
And I'm happy to tell you that


748
00:24:44,026 --> 00:24:45,716
Asset Catalogs makes this really


749
00:24:45,716 --> 00:24:48,256
easy to do and it's called the


750
00:24:48,256 --> 00:24:49,306
Show Slicing editor.


751
00:24:50,636 --> 00:24:51,896
It's really easy to work with,


752
00:24:52,186 --> 00:24:53,576
you just click the Start Slicing


753
00:24:53,576 --> 00:24:55,646
button and then you start


754
00:24:55,646 --> 00:24:57,836
manipulating the dividing lines


755
00:24:57,836 --> 00:24:59,126
here which actually lets you


756
00:24:59,126 --> 00:25:00,456
identify the stretchable


757
00:25:00,456 --> 00:25:02,526
portions of the image and the


758
00:25:02,526 --> 00:25:03,526
unstretchable portions of the


759
00:25:03,526 --> 00:25:03,806
image.


760
00:25:04,066 --> 00:25:05,616
In this example the left and


761
00:25:05,616 --> 00:25:06,786
right end caps and then that


762
00:25:06,876 --> 00:25:08,646
middle slice that's orange is


763
00:25:08,646 --> 00:25:09,596
the one that's the stretchable


764
00:25:09,596 --> 00:25:09,956
piece.


765
00:25:10,696 --> 00:25:13,696
Now you may notice there's a big


766
00:25:13,896 --> 00:25:15,446
piece of this image that has got


767
00:25:15,446 --> 00:25:17,366
this white shading over it, what


768
00:25:17,366 --> 00:25:18,086
is that all about?


769
00:25:18,086 --> 00:25:19,736
Well that's actually a really


770
00:25:19,736 --> 00:25:21,986
interesting thing, that part of


771
00:25:21,986 --> 00:25:24,086
the asset is not actually going


772
00:25:24,086 --> 00:25:26,106
to be needed anymore because we


773
00:25:26,106 --> 00:25:27,556
can represent any possible size


774
00:25:27,556 --> 00:25:28,886
with the three remaining pieces.


775
00:25:29,506 --> 00:25:31,126
Okay why is this important?


776
00:25:31,966 --> 00:25:33,596
Well the nice thing is now that


777
00:25:33,596 --> 00:25:35,876
Xcode knows this at build time


778
00:25:35,876 --> 00:25:37,866
we can actually just take the


779
00:25:37,866 --> 00:25:39,066
pieces we need and leave the


780
00:25:39,066 --> 00:25:40,056
rest behind.


781
00:25:40,756 --> 00:25:42,306
So that large section we don't


782
00:25:42,306 --> 00:25:43,126
have to include that in the


783
00:25:43,126 --> 00:25:44,836
bytes on disk that we actually


784
00:25:44,836 --> 00:25:46,746
ship in your app, that's great.


785
00:25:47,276 --> 00:25:49,616
And it also means that it has a


786
00:25:49,616 --> 00:25:50,936
secondary benefit and this is a


787
00:25:50,936 --> 00:25:52,376
more subtle one, but I really


788
00:25:52,376 --> 00:25:52,856
like this.


789
00:25:53,366 --> 00:25:54,556
It means that you can tell your


790
00:25:54,556 --> 00:25:56,376
designer to feel totally


791
00:25:56,376 --> 00:25:57,956
comfortable delivering assets at


792
00:25:57,956 --> 00:26:00,066
sort of their natural size and


793
00:26:00,066 --> 00:26:00,946
don't have to worry about


794
00:26:01,006 --> 00:26:02,136
pre-optimizing them to be the


795
00:26:02,136 --> 00:26:03,846
smallest possible things so that


796
00:26:03,946 --> 00:26:05,966
it's efficiently deployed right.


797
00:26:06,236 --> 00:26:07,346
That shouldn't be the concern of


798
00:26:07,346 --> 00:26:08,256
the designer it's actually much


799
00:26:08,256 --> 00:26:08,996
more meaningful over the


800
00:26:08,996 --> 00:26:10,876
long-term to put something in


801
00:26:10,876 --> 00:26:12,196
the source code that's easy to


802
00:26:12,196 --> 00:26:13,946
look at and obvious what it is


803
00:26:14,326 --> 00:26:15,836
and let the tools worry about


804
00:26:15,836 --> 00:26:16,946
these deployment details.


805
00:26:18,046 --> 00:26:20,066
So in addition to the graphical


806
00:26:20,066 --> 00:26:21,506
inspector and graphical way of


807
00:26:21,506 --> 00:26:22,556
identifying the stretchable


808
00:26:22,556 --> 00:26:24,076
portion there is of course also


809
00:26:24,076 --> 00:26:25,636
the Show Slicing Inspector which


810
00:26:25,636 --> 00:26:27,006
where you can have fine control


811
00:26:27,376 --> 00:26:29,396
over these edge insets and also


812
00:26:29,786 --> 00:26:31,696
control the behavior of the


813
00:26:31,696 --> 00:26:33,286
centerpiece when it stretches or


814
00:26:33,286 --> 00:26:33,846
tiles.


815
00:26:36,206 --> 00:26:38,106
All this of course adds up to


816
00:26:38,106 --> 00:26:39,376
keeping the stretching metadata


817
00:26:39,376 --> 00:26:41,166
close to the artwork which will


818
00:26:41,166 --> 00:26:42,976
then yield enormous benefits the


819
00:26:42,976 --> 00:26:44,446
next time, which inevitably


820
00:26:44,446 --> 00:26:46,026
happens, the designer comes up


821
00:26:46,026 --> 00:26:47,086
with a new update to your


822
00:26:47,086 --> 00:26:47,536
design.


823
00:26:48,196 --> 00:26:49,716
Now you can update everything in


824
00:26:49,716 --> 00:26:50,866
one place and don't have to


825
00:26:50,866 --> 00:26:52,286
remember the five or six places


826
00:26:52,286 --> 00:26:53,406
in code where you might have a


827
00:26:53,406 --> 00:26:54,736
hang code of the edge insets


828
00:26:54,776 --> 00:26:57,196
previously, now it's all tied


829
00:26:57,196 --> 00:26:58,336
together in one place.


830
00:26:58,706 --> 00:27:00,976
Thank you.


831
00:27:01,516 --> 00:27:04,576
[ Applause ]


832
00:27:05,076 --> 00:27:06,166
Okay next up I'd like to talk


833
00:27:06,166 --> 00:27:07,166
about vector assets.


834
00:27:08,046 --> 00:27:10,866
So because our displays on all


835
00:27:10,866 --> 00:27:12,586
of our products have a variety


836
00:27:12,586 --> 00:27:13,656
of different resolutions you're


837
00:27:13,656 --> 00:27:15,016
probably very used to delivering


838
00:27:15,016 --> 00:27:17,156
1x, 2x, 3x depending on what


839
00:27:17,266 --> 00:27:18,196
platform you're targeting,


840
00:27:18,656 --> 00:27:19,526
distinct assets.


841
00:27:19,956 --> 00:27:21,326
And that's fine and works really


842
00:27:21,326 --> 00:27:23,646
well, but it's kind of a mess to


843
00:27:23,646 --> 00:27:25,196
have to deliver three or two or


844
00:27:25,196 --> 00:27:26,486
three assets every time for a


845
00:27:26,486 --> 00:27:28,516
single design for no other


846
00:27:28,516 --> 00:27:29,526
reason than just resolution.


847
00:27:30,886 --> 00:27:32,296
What if you can actually get


848
00:27:32,296 --> 00:27:33,816
away with this with just one


849
00:27:33,816 --> 00:27:34,106
asset?


850
00:27:34,106 --> 00:27:35,196
Well you can and we've been


851
00:27:35,196 --> 00:27:36,396
supporting vector assets in


852
00:27:36,396 --> 00:27:37,556
Asset Catalogs for a number of


853
00:27:37,556 --> 00:27:39,236
years now in the PDF format.


854
00:27:39,886 --> 00:27:42,806
And with Xcode Asset Catalogs


855
00:27:43,746 --> 00:27:45,876
you can actually supply a PDF


856
00:27:45,956 --> 00:27:48,656
and Xcode will generate and


857
00:27:48,656 --> 00:27:50,926
rasterize that PDF into all of


858
00:27:50,926 --> 00:27:52,496
the applicable scale factors


859
00:27:53,286 --> 00:27:54,426
that your app is currently


860
00:27:54,426 --> 00:27:55,796
targeting depending on platform.


861
00:27:56,486 --> 00:27:58,196
And that's really great because


862
00:27:58,196 --> 00:27:59,596
it means you don't have to worry


863
00:27:59,596 --> 00:28:02,086
about paying any cost at runtime


864
00:28:02,086 --> 00:28:03,086
on device to render an


865
00:28:03,086 --> 00:28:04,086
arbitrary, potentially


866
00:28:04,086 --> 00:28:06,626
arbitrarily complex PDF vector


867
00:28:06,626 --> 00:28:06,916
asset.


868
00:28:08,096 --> 00:28:09,216
So it gives you some peace of


869
00:28:09,216 --> 00:28:10,366
mind about using vectors.


870
00:28:11,486 --> 00:28:13,556
Now you may have a scenario


871
00:28:13,556 --> 00:28:15,026
where actually you want to


872
00:28:15,026 --> 00:28:16,836
present your assets in some


873
00:28:16,946 --> 00:28:18,916
circumstances at a different


874
00:28:18,916 --> 00:28:20,956
size or scale than the most


875
00:28:20,956 --> 00:28:22,166
common natural size that the


876
00:28:22,166 --> 00:28:23,086
asset was designed for.


877
00:28:23,776 --> 00:28:26,836
Well new since last year in iOS


878
00:28:26,836 --> 00:28:29,146
11 and Xcode 9 we now allow you


879
00:28:29,146 --> 00:28:31,496
to preserve the vector data so


880
00:28:31,496 --> 00:28:35,256
that when that image is put into


881
00:28:35,256 --> 00:28:37,216
an image view that is larger


882
00:28:37,216 --> 00:28:38,356
than the natural size of that


883
00:28:38,356 --> 00:28:39,766
asset it'll go ahead and find


884
00:28:39,766 --> 00:28:41,456
that original PDF vector data,


885
00:28:41,846 --> 00:28:43,656
which by the way we've linked it


886
00:28:43,656 --> 00:28:44,746
out and cleaned of any


887
00:28:44,746 --> 00:28:46,426
extraneous metadata and profiles


888
00:28:46,426 --> 00:28:47,526
as well so it's nice and tight


889
00:28:47,526 --> 00:28:49,186
and it's slim as possible.


890
00:28:49,896 --> 00:28:51,316
And we'll go ahead and


891
00:28:51,316 --> 00:28:52,706
re-rasterize that at runtime but


892
00:28:52,706 --> 00:28:53,966
only if you're going beyond the


893
00:28:53,966 --> 00:28:55,096
natural size, otherwise we'll


894
00:28:55,096 --> 00:28:57,216
use that optimized prerendered


895
00:28:57,216 --> 00:28:57,596
bitmap.


896
00:28:58,426 --> 00:28:59,836
So this is great because it


897
00:28:59,836 --> 00:29:00,866
means your app might be able to


898
00:29:00,866 --> 00:29:02,616
more flexibly respond to dynamic


899
00:29:02,646 --> 00:29:06,216
type and automatically your


900
00:29:06,216 --> 00:29:07,366
images will look more crisply


901
00:29:07,366 --> 00:29:09,776
when you resize your UIImage


902
00:29:09,776 --> 00:29:09,966
view.


903
00:29:12,356 --> 00:29:13,616
That's vector assets.


904
00:29:15,136 --> 00:29:16,766
Okay next, I'd like to talk a


905
00:29:16,766 --> 00:29:21,726
bit about designing for 2x, 2x


906
00:29:21,726 --> 00:29:24,376
commonly known as retina is the


907
00:29:24,376 --> 00:29:26,266
most popular and common display


908
00:29:26,266 --> 00:29:27,796
density that your apps are


909
00:29:27,796 --> 00:29:30,606
probably being experienced on.


910
00:29:31,076 --> 00:29:33,566
And it's great right, it was a


911
00:29:33,566 --> 00:29:34,976
huge step forward, however,


912
00:29:35,626 --> 00:29:38,686
there are still cases where you


913
00:29:38,686 --> 00:29:42,156
can have designs where a stroke


914
00:29:42,156 --> 00:29:43,616
or an edge might land on a


915
00:29:43,616 --> 00:29:45,196
fractional pixel boundary and


916
00:29:45,196 --> 00:29:46,236
result in a fuzzy edge.


917
00:29:46,236 --> 00:29:48,386
It's still not high-resolution


918
00:29:48,386 --> 00:29:49,256
enough that you won't notice a


919
00:29:49,256 --> 00:29:50,376
difference between a sharp edge


920
00:29:50,376 --> 00:29:51,046
and a fuzzy edge.


921
00:29:52,256 --> 00:29:53,576
And this can still be a


922
00:29:53,576 --> 00:29:56,326
challenge in designing assets at


923
00:29:56,326 --> 00:29:56,786
times.


924
00:29:58,376 --> 00:30:00,426
Well what are some techniques


925
00:30:00,426 --> 00:30:01,736
that can be used to address


926
00:30:01,736 --> 00:30:01,976
this?


927
00:30:03,816 --> 00:30:06,106
One common design technique is


928
00:30:06,106 --> 00:30:07,396
to turn on point boundary


929
00:30:07,396 --> 00:30:08,796
snapping in your vector design


930
00:30:08,796 --> 00:30:11,806
tool, set up a grid at one-point


931
00:30:11,806 --> 00:30:13,496
intervals and turn on snapping


932
00:30:13,496 --> 00:30:15,106
so that when you adjust your


933
00:30:15,106 --> 00:30:16,496
shape or your control points


934
00:30:16,496 --> 00:30:17,366
that you know that they can


935
00:30:17,366 --> 00:30:18,876
snap, when they snap to a


936
00:30:18,876 --> 00:30:19,726
boundary you know that that's


937
00:30:19,726 --> 00:30:23,416
going to be a pixel boundary and


938
00:30:23,416 --> 00:30:23,916
that's great.


939
00:30:24,836 --> 00:30:26,506
But there's still some cases


940
00:30:26,506 --> 00:30:27,866
that you might have with a


941
00:30:27,866 --> 00:30:29,626
design where some of the edges


942
00:30:29,626 --> 00:30:31,476
are still perhaps landing


943
00:30:31,606 --> 00:30:34,596
somewhere in between one and two


944
00:30:34,596 --> 00:30:35,546
and you're not sure, but you'd


945
00:30:35,546 --> 00:30:37,086
really like to know, especially


946
00:30:37,086 --> 00:30:38,476
on a retina 2x device what's


947
00:30:38,476 --> 00:30:39,876
going to happen there and can I


948
00:30:39,876 --> 00:30:42,216
optimize further for the actual


949
00:30:42,216 --> 00:30:42,846
display density.


950
00:30:43,466 --> 00:30:44,976
Well what you can do is you can


951
00:30:44,976 --> 00:30:46,456
actually use a 2x grid, make


952
00:30:46,456 --> 00:30:48,206
your asset twice as nominally


953
00:30:48,206 --> 00:30:49,636
big in your vector design tool


954
00:30:50,126 --> 00:30:52,216
and make that grid now be a


955
00:30:52,216 --> 00:30:54,566
one-pixel grid where every two


956
00:30:54,566 --> 00:30:56,206
points, every two units is going


957
00:30:56,206 --> 00:30:57,416
to be one point for retina.


958
00:30:58,676 --> 00:31:01,066
And then adjust your assets and


959
00:31:01,066 --> 00:31:03,556
use the point snapping to adjust


960
00:31:03,556 --> 00:31:05,336
your strokes and edges to fit


961
00:31:05,406 --> 00:31:05,656
there.


962
00:31:06,256 --> 00:31:08,686
Okay that's great, now what do


963
00:31:08,686 --> 00:31:09,556
you do with this thing once


964
00:31:09,556 --> 00:31:10,996
you've got it, it's too big


965
00:31:10,996 --> 00:31:11,716
right, it doesn't work?


966
00:31:12,286 --> 00:31:14,496
Yes it does, all you have to do


967
00:31:14,496 --> 00:31:16,196
is just drop it into the 2x slot


968
00:31:16,476 --> 00:31:18,936
in the Asset Catalog scales bins


969
00:31:19,316 --> 00:31:20,716
and that will automatically


970
00:31:20,716 --> 00:31:22,686
enable Xcode to process that


971
00:31:22,686 --> 00:31:24,266
artwork, realize it's actually a


972
00:31:24,266 --> 00:31:25,956
2x piece of artwork, it's


973
00:31:25,956 --> 00:31:27,246
slightly too big, one point is


974
00:31:27,246 --> 00:31:29,256
not equal to two pixels of


975
00:31:29,256 --> 00:31:30,816
retina, but rather the other way


976
00:31:30,816 --> 00:31:31,146
around.


977
00:31:31,386 --> 00:31:32,746
We'll do all the math, we'll


978
00:31:32,746 --> 00:31:34,776
render all the right rasterized


979
00:31:34,776 --> 00:31:35,826
bitmaps for all the other scale


980
00:31:35,826 --> 00:31:37,926
factors and handle that for you.


981
00:31:37,926 --> 00:31:40,106
Freeing the designer to use that


982
00:31:40,106 --> 00:31:41,626
2x grid which can be rather


983
00:31:41,626 --> 00:31:41,986
helpful.


984
00:31:43,746 --> 00:31:45,656
Of course, if the automatic


985
00:31:45,656 --> 00:31:46,506
scaling that we do is


986
00:31:46,506 --> 00:31:47,726
insufficient or still presents


987
00:31:47,796 --> 00:31:50,756
problems in some areas, you can


988
00:31:50,756 --> 00:31:52,276
have ultimate control of your


989
00:31:52,276 --> 00:31:54,366
results as always by dropping in


990
00:31:54,366 --> 00:31:55,696
hinted bitmaps into the


991
00:31:55,696 --> 00:31:56,956
appropriate scale factor bins


992
00:31:57,116 --> 00:31:58,586
and we'll go ahead and use that


993
00:31:58,586 --> 00:31:59,726
and prefer that over the


994
00:31:59,976 --> 00:32:02,656
generated PDF rasterizations.


995
00:32:04,916 --> 00:32:07,656
Okay so that's a bit about


996
00:32:07,656 --> 00:32:08,856
design and production ends of


997
00:32:08,856 --> 00:32:10,646
things, now let's talk about


998
00:32:10,736 --> 00:32:11,986
cataloging and sort of the


999
00:32:11,986 --> 00:32:13,906
organizational aspects once


1000
00:32:13,906 --> 00:32:15,086
you're in Xcode.


1001
00:32:16,026 --> 00:32:17,746
So those of you who have played


1002
00:32:17,746 --> 00:32:19,446
around a little bit with Xcode


1003
00:32:19,446 --> 00:32:20,576
Asset Catalogs it can be a bit


1004
00:32:20,576 --> 00:32:22,276
overwhelming to see how many


1005
00:32:22,276 --> 00:32:23,626
things there are in front of you


1006
00:32:23,626 --> 00:32:25,286
there and what you're supposed


1007
00:32:25,286 --> 00:32:26,556
to use and how many options


1008
00:32:26,556 --> 00:32:26,806
there are.


1009
00:32:27,366 --> 00:32:29,236
Well I'm here to tell you, you


1010
00:32:29,576 --> 00:32:31,766
really should only use what


1011
00:32:31,766 --> 00:32:33,836
makes sense, what makes sense


1012
00:32:33,836 --> 00:32:36,226
for your project and what makes


1013
00:32:36,226 --> 00:32:37,346
sense for the content that


1014
00:32:37,346 --> 00:32:37,966
you're working with.


1015
00:32:38,476 --> 00:32:39,786
There's a lot of options here


1016
00:32:39,786 --> 00:32:41,176
and we've made a very powerful


1017
00:32:41,176 --> 00:32:42,976
engine and organizational scheme


1018
00:32:42,976 --> 00:32:43,576
here that has lots of


1019
00:32:43,576 --> 00:32:44,976
capabilities, but you really


1020
00:32:44,976 --> 00:32:46,296
need to fit it to the need that


1021
00:32:46,296 --> 00:32:47,976
you have and use the simple,


1022
00:32:47,976 --> 00:32:49,196
start with simple first and then


1023
00:32:49,196 --> 00:32:49,776
go from there.


1024
00:32:50,136 --> 00:32:53,906
So I'd like to talk about two


1025
00:32:53,966 --> 00:32:55,316
organizational techniques that


1026
00:32:55,346 --> 00:32:57,396
can help in this area.


1027
00:32:58,216 --> 00:33:00,966
The first is bundles, now why


1028
00:33:00,966 --> 00:33:02,166
would I be talking about bundles


1029
00:33:02,166 --> 00:33:03,326
in an asset talk that seems


1030
00:33:03,326 --> 00:33:04,146
rather incongruous?


1031
00:33:04,146 --> 00:33:05,326
Well I'm really trying to


1032
00:33:05,326 --> 00:33:08,696
address large projects.


1033
00:33:09,186 --> 00:33:11,096
So if you have a large project


1034
00:33:11,526 --> 00:33:13,426
where there are perhaps multiple


1035
00:33:13,426 --> 00:33:14,756
frameworks involved, maybe you


1036
00:33:14,756 --> 00:33:16,186
even work with multiple teams.


1037
00:33:17,066 --> 00:33:19,106
Dealing with assets can


1038
00:33:19,106 --> 00:33:20,406
sometimes be a pain if you have


1039
00:33:20,576 --> 00:33:21,776
to pour them all into the main


1040
00:33:21,776 --> 00:33:23,406
app bundle and have to manage


1041
00:33:23,406 --> 00:33:25,086
them all there and make sure


1042
00:33:25,086 --> 00:33:27,946
names don't conflict and


1043
00:33:28,626 --> 00:33:30,026
appropriately sourced to the


1044
00:33:30,026 --> 00:33:30,836
relevant parts of your


1045
00:33:30,836 --> 00:33:31,306
application.


1046
00:33:31,886 --> 00:33:33,136
One of the ways you can solve


1047
00:33:33,136 --> 00:33:34,516
this problem is by building


1048
00:33:34,516 --> 00:33:36,056
those assets into multiple


1049
00:33:36,056 --> 00:33:38,096
bundles because Xcode will


1050
00:33:38,096 --> 00:33:39,536
always generate a unique Asset


1051
00:33:39,536 --> 00:33:40,966
Catalog deployment artifact per


1052
00:33:40,966 --> 00:33:41,816
bundle or target.


1053
00:33:42,626 --> 00:33:43,996
So for example, consider


1054
00:33:43,996 --> 00:33:46,036
creating an artwork only bundle


1055
00:33:46,286 --> 00:33:47,516
as an example and this can be


1056
00:33:47,516 --> 00:33:49,716
for a good reuse strategy for


1057
00:33:49,716 --> 00:33:50,786
example to have a single


1058
00:33:50,786 --> 00:33:52,836
consolidated component that


1059
00:33:52,836 --> 00:33:54,426
contains all your artwork, that


1060
00:33:54,426 --> 00:33:56,826
has a consistent namespace, that


1061
00:33:56,986 --> 00:33:59,456
can provide images to the rest


1062
00:33:59,456 --> 00:34:00,556
-- to the other components of


1063
00:34:00,556 --> 00:34:01,406
your application.


1064
00:34:02,756 --> 00:34:04,616
How do you retrieve these?


1065
00:34:04,946 --> 00:34:07,976
It's simple, you just use the


1066
00:34:08,036 --> 00:34:10,235
image constructors like UIImage


1067
00:34:10,235 --> 00:34:12,025
named in bundle compatible with


1068
00:34:12,025 --> 00:34:13,596
trait collection that gives the


1069
00:34:13,596 --> 00:34:14,576
bundle argument.


1070
00:34:14,576 --> 00:34:15,866
On the macOS side of course


1071
00:34:15,866 --> 00:34:17,226
there's the NS bundle category


1072
00:34:17,505 --> 00:34:18,436
image for resource.


1073
00:34:19,726 --> 00:34:21,806
And keep in mind, that each of


1074
00:34:21,806 --> 00:34:23,295
these bundles provide a unique


1075
00:34:23,295 --> 00:34:25,795
namespace, so within them the


1076
00:34:25,795 --> 00:34:27,536
names have to be unique.


1077
00:34:27,536 --> 00:34:29,946
But across bundles you feel free


1078
00:34:29,946 --> 00:34:31,626
to use any naming convention you


1079
00:34:31,626 --> 00:34:31,866
like.


1080
00:34:34,255 --> 00:34:36,235
So speaking of namespaces,


1081
00:34:36,235 --> 00:34:37,496
there's another feature I'd like


1082
00:34:37,496 --> 00:34:39,496
to call attention to and another


1083
00:34:39,556 --> 00:34:41,016
challenge with large projects.


1084
00:34:41,366 --> 00:34:43,815
Now in this case the problem I'm


1085
00:34:43,815 --> 00:34:46,156
addressing is large collections


1086
00:34:46,585 --> 00:34:47,446
where they might have some


1087
00:34:47,446 --> 00:34:49,806
structure in them right.


1088
00:34:50,286 --> 00:34:52,266
So let's imagine you have an app


1089
00:34:52,266 --> 00:34:53,775
that deals with 50 different


1090
00:34:53,775 --> 00:34:55,216
rooms, each one of those rooms


1091
00:34:55,216 --> 00:34:56,585
has a table and a chair in it


1092
00:34:56,585 --> 00:34:57,656
and there's assets for each of


1093
00:34:57,656 --> 00:34:57,976
those.


1094
00:34:58,216 --> 00:34:59,326
In your code you'd really like


1095
00:34:59,326 --> 00:35:00,516
to refer to them as table and


1096
00:35:00,516 --> 00:35:01,516
chair, that seems like the most


1097
00:35:01,516 --> 00:35:02,886
natural thing but unfortunately


1098
00:35:02,886 --> 00:35:03,976
there's 50 of them what are you


1099
00:35:03,976 --> 00:35:05,076
going to do.


1100
00:35:05,336 --> 00:35:06,616
One alternative is to just


1101
00:35:06,616 --> 00:35:08,616
generate a naming convention of


1102
00:35:08,616 --> 00:35:09,856
some form and figure out how to


1103
00:35:09,856 --> 00:35:11,776
demux that in your code, that's


1104
00:35:11,816 --> 00:35:12,326
not ideal.


1105
00:35:13,186 --> 00:35:14,696
One solution that Asset Catalogs


1106
00:35:14,696 --> 00:35:16,726
can offer is to use the provide


1107
00:35:16,726 --> 00:35:18,236
namespace option.


1108
00:35:19,116 --> 00:35:21,376
By checking this box after


1109
00:35:21,506 --> 00:35:23,186
organizing your artwork into a


1110
00:35:23,186 --> 00:35:25,666
folder, we will automatically


1111
00:35:25,666 --> 00:35:28,126
prepend the folder name into


1112
00:35:29,456 --> 00:35:32,096
each image's record in the Asset


1113
00:35:32,096 --> 00:35:34,406
Catalog, which you then use to


1114
00:35:34,406 --> 00:35:34,856
retrieve it.


1115
00:35:35,486 --> 00:35:36,816
This can be a nice way to


1116
00:35:36,816 --> 00:35:38,596
organize large structure


1117
00:35:38,596 --> 00:35:39,616
collections of assets.


1118
00:35:40,776 --> 00:35:44,076
Okay so we talked about


1119
00:35:44,076 --> 00:35:46,786
cataloging, now let's talk about


1120
00:35:46,786 --> 00:35:47,806
some exciting stuff around


1121
00:35:47,806 --> 00:35:49,806
deployment which is really where


1122
00:35:49,806 --> 00:35:51,316
the exciting stuff starts to


1123
00:35:52,106 --> 00:35:53,636
kick in.


1124
00:35:53,846 --> 00:35:55,136
So Will talked about App


1125
00:35:55,136 --> 00:35:56,926
Thinning, I'd like to give some


1126
00:35:56,926 --> 00:35:58,226
overall perspective on what we


1127
00:35:58,226 --> 00:35:59,596
try to do with Asset Catalogs in


1128
00:35:59,596 --> 00:36:00,036
App Thinning.


1129
00:36:00,506 --> 00:36:01,886
So overall what you're trying to


1130
00:36:01,886 --> 00:36:03,806
do is you're providing all the


1131
00:36:03,806 --> 00:36:04,796
content variants for your


1132
00:36:04,796 --> 00:36:06,136
application, you're adapting


1133
00:36:06,136 --> 00:36:07,836
your content to the needs of the


1134
00:36:07,836 --> 00:36:09,236
various devices your app runs


1135
00:36:09,236 --> 00:36:09,366
on.


1136
00:36:09,366 --> 00:36:10,996
The most common technique for


1137
00:36:10,996 --> 00:36:12,446
doing this is you know split


1138
00:36:12,446 --> 00:36:14,566
across product family iPad or


1139
00:36:14,566 --> 00:36:18,856
iPhone, tv or watch or different


1140
00:36:18,856 --> 00:36:21,146
resolutions, 3x and 2x.


1141
00:36:21,886 --> 00:36:23,056
You provide all those content


1142
00:36:23,056 --> 00:36:24,306
variants to effectively adapt


1143
00:36:24,306 --> 00:36:25,936
your content and then App


1144
00:36:25,936 --> 00:36:27,096
Thinning is responsible for


1145
00:36:27,096 --> 00:36:28,776
making sure that we just select


1146
00:36:28,776 --> 00:36:30,346
the right subset of that content


1147
00:36:30,346 --> 00:36:31,176
that's appropriate for the


1148
00:36:31,176 --> 00:36:32,586
device that your customer is


1149
00:36:32,586 --> 00:36:35,076
running the application on.


1150
00:36:36,476 --> 00:36:37,566
Well I'd like to talk about a


1151
00:36:37,886 --> 00:36:39,176
different way you can approach


1152
00:36:39,176 --> 00:36:40,306
the same sort of content


1153
00:36:40,306 --> 00:36:42,176
adaptation and that is


1154
00:36:42,176 --> 00:36:43,266
performance classes.


1155
00:36:43,266 --> 00:36:44,266
It's a different way of looking


1156
00:36:44,266 --> 00:36:45,346
at the exact same problem.


1157
00:36:46,136 --> 00:36:48,356
What if the entire product mix


1158
00:36:48,956 --> 00:36:50,506
the way your application saw


1159
00:36:50,506 --> 00:36:53,516
that continuum was instead


1160
00:36:53,586 --> 00:36:54,836
segmented by performance


1161
00:36:54,836 --> 00:36:56,826
capability, not by other


1162
00:36:56,826 --> 00:36:58,096
characteristics?


1163
00:36:58,886 --> 00:36:59,786
Well this is what you can do


1164
00:36:59,786 --> 00:37:00,736
with Asset Catalogs.


1165
00:37:01,536 --> 00:37:03,246
There's such a broad range of


1166
00:37:03,246 --> 00:37:04,736
hardware capabilities between


1167
00:37:04,736 --> 00:37:06,406
the supported devices that we


1168
00:37:06,406 --> 00:37:07,816
have, even if you go back a few


1169
00:37:07,816 --> 00:37:09,906
iOS, I mean all the way from say


1170
00:37:09,906 --> 00:37:11,586
an iPhone 5 up to the latest


1171
00:37:11,586 --> 00:37:13,636
iPhone 10, that's a huge range


1172
00:37:13,636 --> 00:37:14,796
of performance capability.


1173
00:37:15,706 --> 00:37:16,716
Wouldn't it be nice to take


1174
00:37:16,716 --> 00:37:19,246
advantage of that and avoid the


1175
00:37:19,326 --> 00:37:21,296
needing to constrain your app to


1176
00:37:21,296 --> 00:37:22,996
the least capable device that


1177
00:37:22,996 --> 00:37:24,006
your application needs to


1178
00:37:24,006 --> 00:37:24,436
support?


1179
00:37:25,166 --> 00:37:26,766
That's the goal here to be able


1180
00:37:26,766 --> 00:37:28,986
to have your cake and eat it too


1181
00:37:29,016 --> 00:37:30,536
and to do that you can solve it


1182
00:37:30,536 --> 00:37:31,796
with adaptive resources.


1183
00:37:32,176 --> 00:37:33,316
I'm going to tell you how now.


1184
00:37:34,636 --> 00:37:36,616
So there are two main ways that


1185
00:37:36,616 --> 00:37:37,616
we divide the performance


1186
00:37:37,616 --> 00:37:38,116
continuum.


1187
00:37:38,116 --> 00:37:39,756
The first is memory classes and


1188
00:37:39,756 --> 00:37:40,736
this is perhaps the most


1189
00:37:40,736 --> 00:37:41,416
important one.


1190
00:37:41,776 --> 00:37:43,556
We have four memory tiers, 1 GB


1191
00:37:43,556 --> 00:37:45,526
through 4 GB and that


1192
00:37:45,526 --> 00:37:46,836
corresponds to the installed


1193
00:37:46,836 --> 00:37:48,956
memory on the various devices


1194
00:37:48,956 --> 00:37:50,026
and again this is across our


1195
00:37:50,026 --> 00:37:51,536
entire product mix, it doesn't


1196
00:37:51,536 --> 00:37:53,266
matter what it is, it's in one


1197
00:37:53,266 --> 00:37:53,786
of these bins.


1198
00:37:55,686 --> 00:37:59,086
The second access of collection


1199
00:37:59,436 --> 00:38:00,956
is graphics classes.


1200
00:38:00,956 --> 00:38:02,826
Now these actually correspond to


1201
00:38:02,826 --> 00:38:03,586
two things.


1202
00:38:04,056 --> 00:38:06,536
One, they correspond to Metal


1203
00:38:06,536 --> 00:38:08,176
feature family sets, which if


1204
00:38:08,176 --> 00:38:09,066
you're a Metal programmer you


1205
00:38:09,066 --> 00:38:10,056
may be familiar with, this is


1206
00:38:10,056 --> 00:38:11,326
the GPU family concept.


1207
00:38:11,886 --> 00:38:13,116
But they actually correspond


1208
00:38:13,116 --> 00:38:15,096
also exactly with a particular


1209
00:38:15,396 --> 00:38:17,216
processor revision in your


1210
00:38:17,216 --> 00:38:17,656
device.


1211
00:38:18,326 --> 00:38:20,506
So Metal 1 corresponds to Apple


1212
00:38:20,616 --> 00:38:22,766
A7 all the way through Metal 4


1213
00:38:22,766 --> 00:38:24,236
which is the Apple A11


1214
00:38:24,236 --> 00:38:24,806
processor.


1215
00:38:25,376 --> 00:38:27,536
And we allow you to catalog and


1216
00:38:27,536 --> 00:38:29,526
route assets to each of these


1217
00:38:29,526 --> 00:38:31,506
particular graphics classes.


1218
00:38:33,006 --> 00:38:34,356
That can be pretty powerful by


1219
00:38:34,356 --> 00:38:36,186
itself either one of those, but


1220
00:38:36,336 --> 00:38:38,046
where it gets really interesting


1221
00:38:38,046 --> 00:38:40,756
is when you can combine these


1222
00:38:40,756 --> 00:38:42,436
two traits together to form a


1223
00:38:42,436 --> 00:38:44,416
full capability matrix that you


1224
00:38:44,416 --> 00:38:46,346
can really finally calibrate how


1225
00:38:46,346 --> 00:38:47,906
you want to adapt your assets to


1226
00:38:48,176 --> 00:38:49,616
this hardware landscape.


1227
00:38:52,086 --> 00:38:53,146
Now how does this work?


1228
00:38:54,036 --> 00:38:56,326
I'd like to explain this to you


1229
00:38:56,326 --> 00:38:57,566
by walking through a simple


1230
00:38:57,566 --> 00:38:58,886
example and this is really key


1231
00:38:58,886 --> 00:39:00,206
to understand how we do things,


1232
00:39:00,206 --> 00:39:01,656
it helps you understand how you


1233
00:39:01,656 --> 00:39:02,576
might be able to use it.


1234
00:39:03,206 --> 00:39:04,746
So in this example, we've


1235
00:39:04,856 --> 00:39:05,906
provided three specialized


1236
00:39:05,906 --> 00:39:07,426
assets, one any any which is


1237
00:39:07,426 --> 00:39:09,276
just the backstop for the lower


1238
00:39:09,276 --> 00:39:11,026
capability devices.


1239
00:39:11,266 --> 00:39:12,296
And then we provide two


1240
00:39:12,296 --> 00:39:14,506
optimized assets, one for 3 GB


1241
00:39:14,506 --> 00:39:16,376
devices with Metal 3 or better


1242
00:39:16,836 --> 00:39:19,036
and one for 2 GB devices with


1243
00:39:19,036 --> 00:39:19,546
Metal 4.


1244
00:39:20,486 --> 00:39:22,866
So let's imagine that I'm


1245
00:39:22,866 --> 00:39:24,046
selecting the asset from the


1246
00:39:24,046 --> 00:39:25,806
context or the viewpoint of an


1247
00:39:25,926 --> 00:39:27,006
iPhone 8 Plus.


1248
00:39:27,386 --> 00:39:29,686
So I'm 4 GB, Metal 4, that's


1249
00:39:29,686 --> 00:39:31,656
where I'm starting and I'm


1250
00:39:31,656 --> 00:39:33,696
searching, I'm finding nothing


1251
00:39:33,726 --> 00:39:35,046
in 4 GB memory tier.


1252
00:39:36,136 --> 00:39:38,926
So next, I'm going to go drop


1253
00:39:38,926 --> 00:39:40,726
down a memory tier and look for


1254
00:39:40,726 --> 00:39:42,236
anything that can be found in 3


1255
00:39:42,236 --> 00:39:42,996
GB memory tier.


1256
00:39:44,486 --> 00:39:46,586
I do that and I find this asset


1257
00:39:46,586 --> 00:39:49,306
here and I'm going to select


1258
00:39:49,306 --> 00:39:49,506
that.


1259
00:39:49,746 --> 00:39:52,316
Now what's important here is


1260
00:39:52,316 --> 00:39:54,336
that I have selected this asset


1261
00:39:54,556 --> 00:39:56,936
at 3 gigabyte Metal 3 even


1262
00:39:56,936 --> 00:39:58,436
though there is an asset that


1263
00:39:58,436 --> 00:40:00,206
actually matches exactly to my


1264
00:40:00,206 --> 00:40:00,976
GPU class.


1265
00:40:01,566 --> 00:40:04,736
But because we prefer and scan


1266
00:40:04,736 --> 00:40:05,796
through things in memory


1267
00:40:05,796 --> 00:40:07,176
priority order before we do


1268
00:40:07,176 --> 00:40:08,376
graphics classes, we're going to


1269
00:40:08,376 --> 00:40:09,126
select this first.


1270
00:40:09,126 --> 00:40:10,366
This is really important because


1271
00:40:10,366 --> 00:40:11,966
we have decided that memory is


1272
00:40:11,966 --> 00:40:13,126
really the most important way


1273
00:40:13,126 --> 00:40:14,086
that you can characterize the


1274
00:40:14,086 --> 00:40:15,436
overall performance of a device,


1275
00:40:15,726 --> 00:40:17,516
so we're going to prefer that as


1276
00:40:17,516 --> 00:40:19,026
we go through the selection


1277
00:40:19,026 --> 00:40:19,526
matrix.


1278
00:40:21,586 --> 00:40:23,046
Okay that's how it works, how do


1279
00:40:23,046 --> 00:40:24,006
you think about using it.


1280
00:40:24,916 --> 00:40:26,616
Memory really represents the


1281
00:40:26,616 --> 00:40:28,346
overall headroom of your device


1282
00:40:28,776 --> 00:40:30,336
and is really the best aggregate


1283
00:40:30,336 --> 00:40:31,796
indicator of capability.


1284
00:40:31,796 --> 00:40:33,006
So it's a really good choice to


1285
00:40:33,006 --> 00:40:34,426
use with larger or richer


1286
00:40:34,426 --> 00:40:35,896
assets, more detailed stuff,


1287
00:40:35,896 --> 00:40:37,256
things that are bigger on disk,


1288
00:40:37,576 --> 00:40:38,306
things that are going to take a


1289
00:40:38,306 --> 00:40:39,196
little more memory when they're


1290
00:40:39,196 --> 00:40:41,416
expanded in in memory for


1291
00:40:41,416 --> 00:40:41,836
rendering.


1292
00:40:42,486 --> 00:40:44,046
Just a richer user experience is


1293
00:40:44,046 --> 00:40:45,076
usually associated with higher


1294
00:40:45,076 --> 00:40:45,336
memory.


1295
00:40:45,826 --> 00:40:47,116
Now higher graphics is a little


1296
00:40:47,116 --> 00:40:48,946
more subtle since that tracks


1297
00:40:48,946 --> 00:40:50,566
the raw processing capability,


1298
00:40:50,566 --> 00:40:52,626
both CPU and GPU, of the device


1299
00:40:52,846 --> 00:40:54,166
so it's better for more complex


1300
00:40:54,166 --> 00:40:54,646
assets.


1301
00:40:55,436 --> 00:40:57,696
Maybe you use a shader that


1302
00:40:57,696 --> 00:40:58,526
takes advantage of certain


1303
00:40:58,526 --> 00:40:59,536
features that are only available


1304
00:40:59,536 --> 00:41:01,326
on certain GPUs or not or you


1305
00:41:01,396 --> 00:41:02,986
put an asset that requires a


1306
00:41:02,986 --> 00:41:05,106
little more processing than


1307
00:41:05,106 --> 00:41:05,526
others.


1308
00:41:06,136 --> 00:41:08,006
I'd like to give two simple


1309
00:41:08,006 --> 00:41:10,386
examples as food for thought on


1310
00:41:10,386 --> 00:41:11,056
how this could work.


1311
00:41:11,306 --> 00:41:14,076
And the way I'm going to give


1312
00:41:14,076 --> 00:41:15,576
the example is by talking about


1313
00:41:15,576 --> 00:41:16,386
NSDataAsset.


1314
00:41:16,936 --> 00:41:19,116
NSDataAsset is a very simple


1315
00:41:19,116 --> 00:41:20,216
piece of Asset Catalog but it


1316
00:41:20,216 --> 00:41:21,076
can be very powerful.


1317
00:41:21,306 --> 00:41:23,006
All it is is a way to provide a


1318
00:41:23,006 --> 00:41:24,306
flexible container that you can


1319
00:41:24,306 --> 00:41:26,256
put in your Asset Catalog with


1320
00:41:26,256 --> 00:41:27,786
content variants around


1321
00:41:27,876 --> 00:41:29,036
arbitrary files.


1322
00:41:29,336 --> 00:41:30,446
This doesn't have to be an


1323
00:41:30,446 --> 00:41:31,196
image, it doesn't have to be a


1324
00:41:31,196 --> 00:41:32,366
very specific format, this can


1325
00:41:32,366 --> 00:41:32,976
be anything.


1326
00:41:33,596 --> 00:41:36,226
But you can use this with Asset


1327
00:41:36,226 --> 00:41:37,666
Catalogs in App Thinning to


1328
00:41:37,696 --> 00:41:39,676
route arbitrary data to these


1329
00:41:39,676 --> 00:41:40,806
different performance classes.


1330
00:41:40,876 --> 00:41:42,706
So that's an example, consider a


1331
00:41:42,706 --> 00:41:44,636
cut scene video in a game.


1332
00:41:45,676 --> 00:41:47,126
So you might provide, have a


1333
00:41:47,126 --> 00:41:49,096
nice video that you put in sort


1334
00:41:49,096 --> 00:41:49,856
of the mid-tier of the


1335
00:41:49,856 --> 00:41:52,246
performance spectrum and then


1336
00:41:52,246 --> 00:41:53,416
you might have a really awesome


1337
00:41:53,416 --> 00:41:55,456
high resolution, maybe it's even


1338
00:41:55,456 --> 00:41:57,246
HDR who knows video that you put


1339
00:41:57,246 --> 00:41:59,396
in the really capable quadrants


1340
00:41:59,396 --> 00:42:00,776
of that capability spectrum.


1341
00:42:01,076 --> 00:42:03,426
And then on the lower end you


1342
00:42:03,426 --> 00:42:05,226
put a still image or a very


1343
00:42:05,226 --> 00:42:06,846
simple image sequence that's not


1344
00:42:06,846 --> 00:42:08,016
going to take any time or


1345
00:42:08,016 --> 00:42:09,316
excessive resources on those


1346
00:42:09,316 --> 00:42:10,906
devices and still give those


1347
00:42:10,906 --> 00:42:11,866
customers running those older


1348
00:42:11,866 --> 00:42:13,616
devices a nice and responsive


1349
00:42:13,616 --> 00:42:14,436
user experience.


1350
00:42:16,076 --> 00:42:17,176
So that's one example.


1351
00:42:17,176 --> 00:42:18,566
Another more intriguing example


1352
00:42:18,566 --> 00:42:20,656
is plist, well why I put a plist


1353
00:42:20,656 --> 00:42:21,546
in an Asset Catalog, it seems


1354
00:42:21,546 --> 00:42:22,536
like there's much better ways to


1355
00:42:22,536 --> 00:42:24,156
deploy plists than Asset


1356
00:42:24,156 --> 00:42:24,546
Catalogs.


1357
00:42:24,546 --> 00:42:26,096
Well when you use it in


1358
00:42:26,096 --> 00:42:28,226
conjunction with NSDataAsset for


1359
00:42:28,226 --> 00:42:29,386
example you could consider using


1360
00:42:29,386 --> 00:42:31,146
a plist to tune your application


1361
00:42:32,246 --> 00:42:33,396
with different configuration


1362
00:42:33,396 --> 00:42:35,196
parameters that scale according


1363
00:42:35,196 --> 00:42:36,566
to the performance class that


1364
00:42:36,566 --> 00:42:39,086
you cataloged that plist in, in


1365
00:42:39,086 --> 00:42:40,026
your NSDataAsset.


1366
00:42:40,446 --> 00:42:42,266
So for example if you have an


1367
00:42:42,266 --> 00:42:45,596
app that renders a crowd for


1368
00:42:45,596 --> 00:42:47,246
example you could set the size


1369
00:42:47,246 --> 00:42:48,266
of the crowd based on the


1370
00:42:48,266 --> 00:42:49,566
capability of the underlying


1371
00:42:49,566 --> 00:42:52,226
hardware and your code would


1372
00:42:52,226 --> 00:42:53,906
automatically be self-tuned


1373
00:42:53,906 --> 00:42:55,436
based on what device it's


1374
00:42:55,436 --> 00:42:56,476
actually running on at the


1375
00:42:56,476 --> 00:42:56,816
moment.


1376
00:42:57,756 --> 00:42:58,856
So that's an interesting idea


1377
00:42:58,856 --> 00:43:00,056
about how to use performance


1378
00:43:00,056 --> 00:43:00,566
classes.


1379
00:43:02,956 --> 00:43:04,086
Next, I'd like to talk about


1380
00:43:04,086 --> 00:43:05,276
Sprite atlases.


1381
00:43:06,126 --> 00:43:08,326
So Sprite atlases were


1382
00:43:08,356 --> 00:43:09,906
introduced a few years ago in


1383
00:43:09,906 --> 00:43:11,476
support of SpriteKit


1384
00:43:11,616 --> 00:43:13,956
applications in SpriteKit games.


1385
00:43:15,336 --> 00:43:17,406
Now, but I'm not going to talk


1386
00:43:17,406 --> 00:43:18,466
about them in the context of


1387
00:43:18,466 --> 00:43:20,996
SpriteKit based games, I'm going


1388
00:43:20,996 --> 00:43:22,186
to talk about them in the


1389
00:43:22,186 --> 00:43:23,586
context of regular applications.


1390
00:43:25,466 --> 00:43:27,456
Now they have some attributes


1391
00:43:27,456 --> 00:43:28,796
that are very similar to what


1392
00:43:28,796 --> 00:43:30,056
Will talked about with automatic


1393
00:43:30,056 --> 00:43:31,936
image packing, you're taking all


1394
00:43:31,936 --> 00:43:33,006
of the related images in that


1395
00:43:33,006 --> 00:43:34,276
Sprite atlas and packing them


1396
00:43:34,276 --> 00:43:35,486
into a single unit, they get


1397
00:43:35,486 --> 00:43:37,476
loaded at once, and then all the


1398
00:43:37,476 --> 00:43:38,716
images that you reference that


1399
00:43:38,716 --> 00:43:40,076
are contained within that atlas


1400
00:43:40,326 --> 00:43:41,886
are just lightweight references


1401
00:43:42,076 --> 00:43:44,096
to locations within that atlas.


1402
00:43:45,486 --> 00:43:46,186
So that's great.


1403
00:43:46,676 --> 00:43:49,716
But the key thing is that you


1404
00:43:49,716 --> 00:43:51,096
don't really need to use


1405
00:43:51,186 --> 00:43:52,616
SpriteKit to access these, you


1406
00:43:52,616 --> 00:43:53,826
can just use this as a grouping


1407
00:43:53,826 --> 00:43:54,946
mechanism because the one


1408
00:43:54,946 --> 00:43:56,146
difference that Sprite atlases


1409
00:43:56,146 --> 00:43:57,216
have over automatic image


1410
00:43:57,216 --> 00:43:58,586
packing is you get to control


1411
00:43:58,586 --> 00:44:00,486
the grouping and you to assign a


1412
00:44:00,486 --> 00:44:01,206
name to it.


1413
00:44:01,206 --> 00:44:02,396
So you can deal with it, you can


1414
00:44:02,396 --> 00:44:03,456
have a little bit of control and


1415
00:44:03,456 --> 00:44:04,916
sort of organize things that


1416
00:44:04,916 --> 00:44:05,146
way.


1417
00:44:06,166 --> 00:44:07,866
But you can still access the


1418
00:44:07,866 --> 00:44:09,246
images contained within using


1419
00:44:09,246 --> 00:44:11,216
the standard UIImage and NSImage


1420
00:44:11,546 --> 00:44:13,586
APIs, and the names within that.


1421
00:44:13,996 --> 00:44:15,706
In addition, there is an


1422
00:44:15,706 --> 00:44:16,916
intriguing way that you can use


1423
00:44:16,916 --> 00:44:18,346
SpriteKit framework even though


1424
00:44:18,346 --> 00:44:19,606
you're not building a SpriteKit


1425
00:44:19,606 --> 00:44:21,786
application by taking advantage


1426
00:44:21,786 --> 00:44:23,416
of the SKTextureAtlas preload


1427
00:44:23,416 --> 00:44:25,416
texture atlas named API if you


1428
00:44:25,416 --> 00:44:27,086
have a case where you have a


1429
00:44:27,086 --> 00:44:28,436
large number of images that have


1430
00:44:28,436 --> 00:44:30,786
to be loaded fairly quickly and


1431
00:44:30,786 --> 00:44:31,906
have to be used right away.


1432
00:44:32,246 --> 00:44:33,646
So what this API will do is


1433
00:44:33,646 --> 00:44:35,656
it'll preload or load from disk,


1434
00:44:35,696 --> 00:44:38,636
decode, get ready and warmed up


1435
00:44:38,696 --> 00:44:40,426
in memory asynchronously with a


1436
00:44:40,426 --> 00:44:43,286
callback completion handler for


1437
00:44:43,286 --> 00:44:44,546
a set of named atlases.


1438
00:44:44,816 --> 00:44:46,796
So this is great, but I will


1439
00:44:46,796 --> 00:44:48,606
caution you, do not use this API


1440
00:44:48,666 --> 00:44:51,586
indiscriminately because it does


1441
00:44:51,586 --> 00:44:52,916
exactly what it says it's going


1442
00:44:52,916 --> 00:44:55,376
to do and that means it's going


1443
00:44:55,376 --> 00:44:57,436
to potentially consume a large


1444
00:44:57,436 --> 00:45:00,016
amount of I/O and memory to load


1445
00:45:00,016 --> 00:45:00,866
all those images.


1446
00:45:01,006 --> 00:45:02,286
So please be sure that you're


1447
00:45:02,286 --> 00:45:03,996
about to use them right away and


1448
00:45:03,996 --> 00:45:04,956
that it's the right choice,


1449
00:45:05,376 --> 00:45:07,296
otherwise a jetsam awaits you.


1450
00:45:09,836 --> 00:45:12,316
So another powerful thing about


1451
00:45:12,316 --> 00:45:14,976
Sprite atlases is that any image


1452
00:45:14,976 --> 00:45:17,426
within the Sprite atlas has all


1453
00:45:17,426 --> 00:45:18,776
of the regular features of any


1454
00:45:18,776 --> 00:45:20,076
other normal image set within


1455
00:45:20,236 --> 00:45:21,766
code Asset Catalogs, including


1456
00:45:21,766 --> 00:45:23,856
all the cataloging features, all


1457
00:45:23,856 --> 00:45:26,066
the compression settings, and


1458
00:45:26,426 --> 00:45:27,706
all the App Thinning features.


1459
00:45:27,846 --> 00:45:28,756
We will take care to


1460
00:45:28,806 --> 00:45:30,546
automatically split and collate


1461
00:45:30,546 --> 00:45:31,456
all of the images that you


1462
00:45:31,456 --> 00:45:33,746
provide appropriately, split


1463
00:45:33,746 --> 00:45:34,966
them by pixel formats, by


1464
00:45:34,966 --> 00:45:36,186
different device traits, and


1465
00:45:36,186 --> 00:45:37,156
different compression types.


1466
00:45:37,426 --> 00:45:38,376
And make sure everything gets


1467
00:45:38,426 --> 00:45:39,456
baked appropriately and then


1468
00:45:39,456 --> 00:45:40,636
thinned appropriately so that


1469
00:45:40,636 --> 00:45:42,086
the data gets routed to the


1470
00:45:42,086 --> 00:45:46,796
right device in the right way.


1471
00:45:47,006 --> 00:45:48,076
So those are some interesting


1472
00:45:48,076 --> 00:45:49,746
details about deployment, we're


1473
00:45:49,746 --> 00:45:50,686
in the homestretch here.


1474
00:45:51,396 --> 00:45:52,846
So I'd like to remind you of the


1475
00:45:52,846 --> 00:45:53,636
important things about


1476
00:45:53,636 --> 00:45:54,926
optimizing app assets here.


1477
00:45:54,926 --> 00:45:56,666
First and foremost, I think


1478
00:45:57,216 --> 00:45:58,926
Xcode Asset Catalogs are really


1479
00:45:58,926 --> 00:46:00,146
the best choice for managing the


1480
00:46:00,146 --> 00:46:01,096
image resources in your


1481
00:46:01,096 --> 00:46:01,756
application.


1482
00:46:02,156 --> 00:46:04,536
This year you get 10 to 20% less


1483
00:46:04,896 --> 00:46:07,096
space on disk just by using our


1484
00:46:07,096 --> 00:46:08,276
new compression algorithms.


1485
00:46:08,836 --> 00:46:10,566
No matter what deployment target


1486
00:46:10,566 --> 00:46:12,876
you have, your iOS 12 customers


1487
00:46:12,926 --> 00:46:14,966
will get those benefits thanks


1488
00:46:14,966 --> 00:46:15,906
to the improvements in App


1489
00:46:15,906 --> 00:46:18,006
Thinning, which now optimizes


1490
00:46:18,006 --> 00:46:19,936
for the latest OS going forward.


1491
00:46:20,816 --> 00:46:22,356
And we have a bunch of


1492
00:46:22,356 --> 00:46:23,666
cataloging features that you can


1493
00:46:23,666 --> 00:46:25,456
use to adapt the resources of


1494
00:46:25,456 --> 00:46:27,226
your app to the devices your


1495
00:46:27,226 --> 00:46:28,136
customers use.


1496
00:46:28,526 --> 00:46:32,106
For more information please look


1497
00:46:32,106 --> 00:46:36,386
at this link and hope you all


1498
00:46:36,386 --> 00:46:36,936
had a nice day.


1499
00:46:37,666 --> 00:46:37,976
Thank you.


1500
00:46:38,516 --> 00:46:41,500
[ Applause ]

