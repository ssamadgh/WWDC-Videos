1
00:00:20,016 --> 00:00:20,376
[Applause]


2
00:00:20,376 --> 00:00:21,456
>> RALEIGH LEDET: Good morning.


3
00:00:25,036 --> 00:00:27,996
Welcome to Session 217:
Adopting New Trackpad Features.


4
00:00:28,486 --> 00:00:31,656
My name is Raleigh Ledet, I'm an
AppKit engineer and I'm master


5
00:00:31,656 --> 00:00:33,526
of using the new
Force Touch trackpads,


6
00:00:34,736 --> 00:00:37,116
so this is what we're
going to be talking about,


7
00:00:37,116 --> 00:00:38,456
the new Force Touch trackpads.


8
00:00:39,276 --> 00:00:42,306
They're very, very cool
pieces of technology.


9
00:00:42,406 --> 00:00:45,236
What makes them different
than our previous trackpads is


10
00:00:45,236 --> 00:00:48,176
that there isn't a physical
button for you to press on.


11
00:00:48,706 --> 00:00:51,206
Instead, we have these
four force sensors


12
00:00:51,496 --> 00:00:54,006
so we can measure how much
force the user is applying


13
00:00:54,006 --> 00:00:55,896
to the trackpad and
then we marry


14
00:00:55,896 --> 00:00:57,516
that with our Taptic Engine.


15
00:00:57,986 --> 00:00:58,826
And when we've determined


16
00:00:58,826 --> 00:01:01,366
that the user has pressed
enough force on the trackpad


17
00:01:01,446 --> 00:01:04,995
to issue a mouse down, we go
ahead and use the Taptic Engine


18
00:01:05,316 --> 00:01:07,796
and we yank the trackpad
sideways just a little bit,


19
00:01:07,796 --> 00:01:10,366
and the user gets the feeling


20
00:01:10,366 --> 00:01:12,676
that they have actually
pressed down on a button.


21
00:01:13,176 --> 00:01:14,936
And so, the trackpad
moves sideways,


22
00:01:15,346 --> 00:01:17,036
but your brain makes you think


23
00:01:17,036 --> 00:01:18,566
that you have actually
pressed down on a button.


24
00:01:18,876 --> 00:01:21,346
It's a really awesome
sensation and it's really neat


25
00:01:21,346 --> 00:01:23,346
on how your mind is tricked


26
00:01:23,346 --> 00:01:24,516
into believing you've
pressed a button.


27
00:01:24,816 --> 00:01:26,516
We have some of these
downstairs in the lab,


28
00:01:26,516 --> 00:01:28,156
if you haven't experienced
one of these yet,


29
00:01:28,576 --> 00:01:29,746
please come down and try it out.


30
00:01:30,606 --> 00:01:33,466
Another quick look at the
Taptic Engine going there --


31
00:01:34,356 --> 00:01:34,926
pretty awesome.


32
00:01:35,396 --> 00:01:38,336
So, to recap, you get a
little bit of pressure


33
00:01:38,336 --> 00:01:41,546
and you get a click, but
allows us to recognize


34
00:01:41,616 --> 00:01:45,626
when you apply more pressure to
the trackpad and we can sense


35
00:01:45,626 --> 00:01:47,226
that as what we call
a Force click,


36
00:01:47,226 --> 00:01:48,856
and you'll get a little
bit more haptic feedback


37
00:01:48,856 --> 00:01:49,636
from that as well.


38
00:01:51,026 --> 00:01:52,096
So, you can do lots


39
00:01:52,096 --> 00:01:53,636
of interesting things
with the Force click.


40
00:01:53,966 --> 00:01:54,816
In fact, let me show you some


41
00:01:54,816 --> 00:01:57,466
of the interesting things
you can do with that now.


42
00:01:57,536 --> 00:02:06,006
I have up here, you can see as
I'm moving the cursor around,


43
00:02:06,396 --> 00:02:09,395
you can see the force that
I'm applying to the trackpad.


44
00:02:09,395 --> 00:02:12,806
If I go down to the next level,
you get down to Force click.


45
00:02:13,016 --> 00:02:14,406
And so, everybody was
able to hear that?


46
00:02:14,766 --> 00:02:16,936
I've added -- you know, normally
your computer doesn't play a


47
00:02:16,936 --> 00:02:18,916
sound when you do Force
click; I've added that in


48
00:02:18,916 --> 00:02:21,136
because you can't actually feel
the haptic feedback since you're


49
00:02:21,136 --> 00:02:22,246
over there and I'm over here.


50
00:02:22,906 --> 00:02:27,226
So, you'll be able to watch
as I do this demo the force


51
00:02:27,226 --> 00:02:28,406
that I'm applying
to the trackpad.


52
00:02:29,136 --> 00:02:31,956
One of the things that you
can do is renaming files


53
00:02:31,956 --> 00:02:33,696
in the Finder; sometimes
it's kind of tricky,


54
00:02:33,696 --> 00:02:37,266
you have to click on it, and
you have to do it a second time


55
00:02:37,266 --> 00:02:39,356
in such a way that --
and I missed it again.


56
00:02:39,356 --> 00:02:40,366
You got to do the right timing


57
00:02:40,366 --> 00:02:41,706
so you don't double-click
and open it.


58
00:02:42,186 --> 00:02:45,756
But with the Force Touch,
you just Force click on it,


59
00:02:45,756 --> 00:02:48,296
it goes right immediately
into editing the filename.


60
00:02:48,486 --> 00:02:51,346
It's a lot easier to do; that's
just one of the small things


61
00:02:51,346 --> 00:02:52,566
that you can do with
Force click.


62
00:02:52,566 --> 00:02:54,616
I'm going to open up
TextEdit real quick.


63
00:02:55,256 --> 00:02:59,646
Let me grab the window.


64
00:03:00,356 --> 00:03:03,366
You have seen this example
as well, you can Force click


65
00:03:03,496 --> 00:03:05,736
and you can get Quick
Look to come up.


66
00:03:05,736 --> 00:03:08,306
It's kind of neat, you can
actually sit here, you can play


67
00:03:08,306 --> 00:03:12,506
around with the animation if
you adjust your force levels.


68
00:03:12,656 --> 00:03:15,536
That's another feature
that we have.


69
00:03:15,576 --> 00:03:18,136
Lastly to show you some
things real quick, you know,


70
00:03:18,136 --> 00:03:20,756
I could change how fast
by varying the force,


71
00:03:20,756 --> 00:03:24,886
how fast the photos come
in, or changing the amount


72
00:03:25,096 --> 00:03:27,416
that the indicator is showing,


73
00:03:27,416 --> 00:03:29,096
you can control the
amount of pressure here.


74
00:03:29,166 --> 00:03:31,686
And of course, no pressure
demo would be complete


75
00:03:31,686 --> 00:03:34,776
without having a drawing field
that you can draw on as well.


76
00:03:35,566 --> 00:03:38,526
Lastly, don't have the
sound hooked up for this,


77
00:03:38,526 --> 00:03:40,806
but on this control
when it gets --


78
00:03:40,926 --> 00:03:42,336
when you rotate the
photo back to zero,


79
00:03:42,336 --> 00:03:43,956
you're feeling a little
bit of haptic feedback


80
00:03:44,286 --> 00:03:45,446
on the trackpad for that.


81
00:03:45,876 --> 00:03:47,696
So that's pretty neat.


82
00:03:48,176 --> 00:03:49,426
Let's switch back to the slides.


83
00:03:50,566 --> 00:03:51,756
We've got a lot to cover.


84
00:03:52,296 --> 00:03:53,506
We're going to talk
about the APIs,


85
00:03:53,506 --> 00:03:57,036
that that application was using,
the various APIs that we use


86
00:03:57,036 --> 00:03:59,116
in the system as well,
so that you can go ahead


87
00:03:59,116 --> 00:04:00,426
and add all sorts


88
00:04:00,556 --> 00:04:04,266
of new features using
the Force Touch trackpad


89
00:04:04,266 --> 00:04:05,076
in your application.


90
00:04:05,656 --> 00:04:08,366
I'm going to teach you today how


91
00:04:08,366 --> 00:04:11,276
to become a master using the
Force Touch trackpad on OS X.


92
00:04:11,866 --> 00:04:13,626
To become a master in
the Force Touch trackpad,


93
00:04:13,626 --> 00:04:14,986
even though we're going
to do it in one day,


94
00:04:15,026 --> 00:04:15,976
you've got to start off small,


95
00:04:15,976 --> 00:04:17,156
you've got to start
off learning everything


96
00:04:17,156 --> 00:04:20,106
that a squire would know about
using the Force Touch trackpad,


97
00:04:20,106 --> 00:04:22,716
and this is all about
using the high-level APIs


98
00:04:23,036 --> 00:04:26,756
and the built-in tools that we
have in some of our controls.


99
00:04:27,296 --> 00:04:28,506
The we're going to move
on, and we're going


100
00:04:28,566 --> 00:04:30,046
to learn everything a
knight needs to know


101
00:04:30,046 --> 00:04:31,546
about using the Force
Touch trackpad.


102
00:04:31,906 --> 00:04:34,896
This is all about the flow of
the force through the system,


103
00:04:34,896 --> 00:04:37,276
the event stream, we'll talk
about customizing Spring Loading


104
00:04:37,276 --> 00:04:39,726
in your application and
then taking it all the way


105
00:04:39,726 --> 00:04:41,146
to doing some Alignment Feedback


106
00:04:41,146 --> 00:04:43,426
and providing some additional
haptic feedback to the user.


107
00:04:44,166 --> 00:04:47,146
Then finally, we're going to cap
it off with becoming a master


108
00:04:47,146 --> 00:04:49,086
of using the Force Touch
trackpad and this is


109
00:04:49,086 --> 00:04:50,386
about controlling the force.


110
00:04:50,516 --> 00:04:52,066
Configuring the trackpad


111
00:04:52,366 --> 00:04:54,876
so it is doing the
appropriate haptic feedbacks


112
00:04:54,876 --> 00:04:57,516
for the given situation
for your controls


113
00:04:57,946 --> 00:05:00,246
and manually playing haptic
feedbacks where appropriate.


114
00:05:01,056 --> 00:05:03,056
So let's dig in.


115
00:05:05,216 --> 00:05:08,466
In being a squire we're going
to talk about Table Row Actions,


116
00:05:08,466 --> 00:05:10,066
it's a nice, neat new
feature, you have seen


117
00:05:10,066 --> 00:05:12,206
that in the Mail
application demo


118
00:05:12,206 --> 00:05:13,376
that Craig did during
the keynote.


119
00:05:13,806 --> 00:05:15,176
We'll talk about
spring-loaded controls,


120
00:05:15,256 --> 00:05:18,246
some things that are built in,
and the accelerator controls.


121
00:05:18,316 --> 00:05:20,396
We're going to do that by
looking at some case studies.


122
00:05:21,026 --> 00:05:24,186
Here is Mail, for example, and
if you do a two-finger swipe


123
00:05:24,186 --> 00:05:27,246
on a row in Mail, you get
some more Table Row Actions


124
00:05:27,246 --> 00:05:28,776
that could come up, and
you can click on them,


125
00:05:28,886 --> 00:05:31,736
or you can do a smooth swipe,
a little bit longer swipe


126
00:05:31,736 --> 00:05:35,166
and it will actually
activate the default action


127
00:05:35,266 --> 00:05:37,156
and so it is one complete
gesture for the user.


128
00:05:37,526 --> 00:05:39,476
It is a really nice way


129
00:05:39,576 --> 00:05:41,316
of adding some additional
functionality


130
00:05:41,316 --> 00:05:42,076
to your application.


131
00:05:42,076 --> 00:05:43,686
I use it every day
in Mail myself.


132
00:05:44,226 --> 00:05:45,926
The API for it is
incredibly simple.


133
00:05:46,296 --> 00:05:47,496
In your tableView delegate,


134
00:05:47,496 --> 00:05:49,906
just implement tableView
rowActionsForRow edge,


135
00:05:50,306 --> 00:05:52,496
and we will tell you what edge
it is, it's either the leading


136
00:05:52,496 --> 00:05:54,196
or the trailing, so we
handle right to left


137
00:05:54,196 --> 00:05:55,186
and left to right for you.


138
00:05:56,516 --> 00:06:00,736
And then you just return back
an array of Table Row Actions.


139
00:06:00,736 --> 00:06:05,066
Create a new NSTable Row Action,
you init with a style, a title,


140
00:06:05,066 --> 00:06:08,446
and a handler, the handler's
what's going to get called back


141
00:06:08,446 --> 00:06:11,166
if that item is selected,
either by clicking on it


142
00:06:11,166 --> 00:06:13,206
or if they did a complete
swipe for the default one,


143
00:06:13,586 --> 00:06:17,216
it goes ahead and the
handler is called.


144
00:06:17,346 --> 00:06:20,076
We have a couple of styles:
Regular and Destructive.


145
00:06:20,876 --> 00:06:22,956
Regular is the one with
the blue highlighting,


146
00:06:22,956 --> 00:06:25,616
and that's what you
should use for most styles


147
00:06:25,616 --> 00:06:27,206
of your Table Row Actions.


148
00:06:27,846 --> 00:06:29,226
Destructive is the
one that's red.


149
00:06:29,946 --> 00:06:31,836
Don't choose these
because of their color;


150
00:06:31,956 --> 00:06:33,366
it is more than just red.


151
00:06:33,686 --> 00:06:38,786
The destructive items, since by
nature they're destructive we


152
00:06:38,786 --> 00:06:39,936
actually make it a
little bit harder


153
00:06:39,936 --> 00:06:41,506
for the user to do a full swipe.


154
00:06:41,776 --> 00:06:44,006
They have to swipe
a further distance


155
00:06:44,276 --> 00:06:47,616
on the trackpad before a
destructive action is triggered


156
00:06:47,616 --> 00:06:48,166
by default.


157
00:06:48,636 --> 00:06:51,966
This is so that they don't
accidentally trigger it.


158
00:06:51,966 --> 00:06:54,256
Use regular for almost
everything


159
00:06:54,256 --> 00:06:57,326
and reserve destructive items
just for destructive, don't try


160
00:06:57,326 --> 00:07:00,746
and get the red color, there is
some important semantics there


161
00:07:00,746 --> 00:07:01,606
that you need to be aware of.


162
00:07:02,136 --> 00:07:04,586
And that's all there
is to this API.


163
00:07:04,836 --> 00:07:05,586
It's that simple.


164
00:07:05,796 --> 00:07:08,856
This works on a new Force Touch
trackpad and it also works


165
00:07:08,856 --> 00:07:10,956
on our legacy trackpads
and the Magic Mouse,


166
00:07:11,256 --> 00:07:13,306
so you can easily add
these to your application


167
00:07:13,606 --> 00:07:16,056
and you can open up some
great new possibilities.


168
00:07:16,686 --> 00:07:19,806
Let's look at Spring
Loading in the Finder.


169
00:07:19,806 --> 00:07:23,736
So I have this image of
Lola that I downloaded,


170
00:07:23,736 --> 00:07:25,806
and I want to move her
to my Documents folder.


171
00:07:25,806 --> 00:07:28,416
Some I'm going to start dragging
and go back in my history


172
00:07:28,416 --> 00:07:31,106
by Force clicking, I'm even
going to change it to icon mode


173
00:07:31,106 --> 00:07:32,766
so I can find the
Documents folder easier,


174
00:07:33,026 --> 00:07:35,176
and then finally go ahead and
drop it in my Documents folder.


175
00:07:35,916 --> 00:07:38,026
You might have known about
spring loading before


176
00:07:38,376 --> 00:07:40,626
where you could hover over a
folder and after a timeout,


177
00:07:40,626 --> 00:07:43,326
the folder would go
ahead and spring load.


178
00:07:43,656 --> 00:07:45,376
We have added spring
loading to a lot more places


179
00:07:45,376 --> 00:07:47,096
and applications to
bring windows forwards,


180
00:07:47,516 --> 00:07:49,436
and as you saw the
buttons were spring loaded,


181
00:07:49,666 --> 00:07:52,386
and you can bypass
the hover timeout


182
00:07:52,386 --> 00:07:53,556
by just doing a Force click,


183
00:07:53,556 --> 00:07:58,606
and it becomes much more
intuitive and easier to use.


184
00:07:59,336 --> 00:08:02,146
To implement Spring Loading


185
00:08:02,146 --> 00:08:05,706
in those toolbar buttons all
Finder did was set the Spring


186
00:08:05,706 --> 00:08:08,746
Loading property of
NSButton to true.


187
00:08:09,176 --> 00:08:10,806
Really what they did was
just check the box in IB.


188
00:08:10,806 --> 00:08:11,546
It is that easy.


189
00:08:11,546 --> 00:08:13,966
You can do that for
segmented control as well;


190
00:08:13,966 --> 00:08:17,616
when I change the icon layout
from list view to icon view,


191
00:08:18,106 --> 00:08:19,616
that's on NSSegmentedControl,


192
00:08:19,616 --> 00:08:21,216
and again it's just a
springLoaded property


193
00:08:21,776 --> 00:08:24,016
and you can set it
with a check box in IB.


194
00:08:24,016 --> 00:08:27,126
It's that simple to turn Spring
Loading on in your buttons


195
00:08:27,396 --> 00:08:28,396
and your segmented controls.


196
00:08:28,656 --> 00:08:31,146
You have to opt in for
this, but for places


197
00:08:31,146 --> 00:08:33,155
that are doing navigation
during drag


198
00:08:33,155 --> 00:08:35,006
and drop it is really
useful and I suggest


199
00:08:35,006 --> 00:08:35,916
that you go and turn it on.


200
00:08:37,376 --> 00:08:40,405
There is another example of
using force; this is QuickTime.


201
00:08:40,405 --> 00:08:42,866
I want you to pay attention to
the fast-forward button here.


202
00:08:42,916 --> 00:08:46,736
I'm going to use the Force
Touch trackpad and I'm going


203
00:08:46,736 --> 00:08:48,176
to apply different
pressure to the button,


204
00:08:48,176 --> 00:08:50,496
and you can see I can
go up to 5x, 10x, 30x.


205
00:08:50,766 --> 00:08:51,596
You can back off.


206
00:08:51,986 --> 00:08:53,736
As you're moving
through your movie file,


207
00:08:54,056 --> 00:08:56,036
you can control how fast
you're moving forward,


208
00:08:56,036 --> 00:08:58,196
so you slow down when you
get close to that area


209
00:08:58,196 --> 00:09:00,036
that you're looking for
without overshooting.


210
00:09:00,596 --> 00:09:04,906
The way QuickTime does this
is we have a new button type,


211
00:09:04,906 --> 00:09:08,876
so the fast-forward buttons are
really literally just NSButtons


212
00:09:08,876 --> 00:09:11,516
with a custom image, and
they set the button type


213
00:09:11,746 --> 00:09:14,586
to either AcceleratorButton or
MultiLevelAcceleratorButton.


214
00:09:15,526 --> 00:09:18,586
For AcceleratorButton -- you
can set it right here in IB --


215
00:09:19,136 --> 00:09:23,086
as the force in the
trackpad changes,


216
00:09:23,356 --> 00:09:25,436
the button will continually
send its action message,


217
00:09:25,546 --> 00:09:27,606
so as the force changes, you
get a new action message;


218
00:09:27,796 --> 00:09:29,686
when the force changes again,
you get a new action message,


219
00:09:30,256 --> 00:09:33,086
and the range of the
doubleValue is going to be 1


220
00:09:33,086 --> 00:09:35,676
when the user clicks
the button up to 2


221
00:09:35,676 --> 00:09:39,236
as the user presses the
maximum amount of force


222
00:09:39,236 --> 00:09:41,686
on the trackpad that we accept.


223
00:09:42,856 --> 00:09:45,626
You can see the pressure
change between 1 and 2


224
00:09:45,626 --> 00:09:48,356
and you can adjust
however you --


225
00:09:48,356 --> 00:09:49,736
whatever you need
to do with that.


226
00:09:49,736 --> 00:09:52,956
In QuickTime's case, that
controls the acceleration.


227
00:09:54,036 --> 00:09:55,786
You will finally
get a value of 0.


228
00:09:55,786 --> 00:09:58,116
A final action message
with a value of 0


229
00:09:58,116 --> 00:10:00,326
when the user ends
tracking of the button.


230
00:10:00,626 --> 00:10:01,936
When they release
the mouse button up,


231
00:10:02,386 --> 00:10:04,486
you'll get a last action
message with a range of zero.


232
00:10:05,506 --> 00:10:07,506
Now, what QuickTime is
actually using here is the


233
00:10:07,506 --> 00:10:09,396
MultiLevelAcceleratorButton.


234
00:10:09,986 --> 00:10:11,706
You can set that
right here in IB.


235
00:10:12,326 --> 00:10:15,606
The MultiLevelAcceleratorButton
is discrete;


236
00:10:15,976 --> 00:10:19,816
whereas the AcceleratorButton
is a smooth range,


237
00:10:19,816 --> 00:10:21,466
a continuous range
between 1 and 2,


238
00:10:21,616 --> 00:10:24,326
the AcceleratorButton
is integer levels,


239
00:10:24,366 --> 00:10:26,386
it's a discrete integer
levels, and you can set


240
00:10:26,386 --> 00:10:29,186
that with the
maxAcceleratorLevel.


241
00:10:29,766 --> 00:10:33,246
Our range is between 1 and 5
so you can set how many levels


242
00:10:33,246 --> 00:10:35,156
that you want to have
in your acceleration;


243
00:10:35,956 --> 00:10:37,696
by default it is 2.


244
00:10:38,266 --> 00:10:39,506
QuickTime sets it to 5.


245
00:10:40,286 --> 00:10:42,256
Then again, you look
at the doubleValue.


246
00:10:42,296 --> 00:10:45,286
Now the range is going to be
0 to 5, it's 1 when you click,


247
00:10:45,286 --> 00:10:46,796
as the user goes up
through the levels,


248
00:10:46,796 --> 00:10:48,976
it'll go up to whatever
you set the max level to,


249
00:10:49,356 --> 00:10:51,716
and you'll get a final
message action of 0


250
00:10:51,716 --> 00:10:53,286
when the user finishes tracking.


251
00:10:53,526 --> 00:10:54,846
And this is what
QuickTime is doing.


252
00:10:55,116 --> 00:10:58,626
Here you can see how QuickTime
is just mapping 1, 2, 3, 4,


253
00:10:58,626 --> 00:11:00,316
and 5 to your various speeds,


254
00:11:00,516 --> 00:11:03,466
and for example 3 is
10x fast-forwarding.


255
00:11:03,906 --> 00:11:08,766
Another example of Accelerator
Controls: here is Maps,


256
00:11:09,446 --> 00:11:11,176
and Maps has this
nice zoom buttons,


257
00:11:11,976 --> 00:11:14,636
and these are actually
implemented


258
00:11:14,716 --> 00:11:16,686
as NSSegmentedControls.


259
00:11:17,146 --> 00:11:19,256
NSSegmentedControls
has a new tracking mode


260
00:11:19,256 --> 00:11:23,206
which is MomentaryAccelerator,
and this works exactly


261
00:11:23,206 --> 00:11:26,666
like the accelerator
NSButtonType does --


262
00:11:27,386 --> 00:11:29,166
real easy to set
that in IB as well.


263
00:11:29,166 --> 00:11:31,766
But instead of asking
for the doubleValue


264
00:11:31,766 --> 00:11:34,586
when the segmented control
action messages are fired,


265
00:11:34,756 --> 00:11:36,016
you want to ask for
the doubleValue


266
00:11:36,016 --> 00:11:37,246
for the selected segment.


267
00:11:37,686 --> 00:11:40,406
It is the same range as
we discussed earlier;


268
00:11:40,406 --> 00:11:44,006
it's 1 to 2 with a final action
message with a value of 0


269
00:11:44,006 --> 00:11:44,996
when tracking has ended.


270
00:11:46,446 --> 00:11:49,206
Segmented controls don't
have a multilevel option,


271
00:11:49,436 --> 00:11:51,926
they only support
the continuous mode.


272
00:11:52,456 --> 00:11:56,356
Here is an example of Photos.


273
00:11:57,176 --> 00:12:02,386
For moving through your
photos in Photos by applying,


274
00:12:03,096 --> 00:12:04,326
varying the pressure,


275
00:12:04,326 --> 00:12:07,026
I can control how fast
the photos move across.


276
00:12:07,796 --> 00:12:10,906
This is something that we call a
continuous accelerator control.


277
00:12:11,606 --> 00:12:14,006
If you have an accelerator
control settings


278
00:12:14,006 --> 00:12:16,206
on either NSButton or
NSSegmentedControl,


279
00:12:16,546 --> 00:12:20,136
in the NSControl section you can
set the continuous flag to true


280
00:12:20,356 --> 00:12:22,036
or just check the box in IB,


281
00:12:22,766 --> 00:12:26,396
and you'll get what we call a
continuous accelerator control.


282
00:12:27,186 --> 00:12:29,176
Continuous accelerator
controls are different


283
00:12:29,176 --> 00:12:31,916
because you don't worry about
their doubleValues so much.


284
00:12:31,916 --> 00:12:33,996
You just want to move to
the next slide as soon


285
00:12:33,996 --> 00:12:34,906
as the action happens.


286
00:12:34,956 --> 00:12:37,086
The doubleValue doesn't matter.


287
00:12:37,086 --> 00:12:39,196
They come back, come
in on a heartbeat,


288
00:12:39,376 --> 00:12:41,646
and the force changes the
frequency of that heartbeat.


289
00:12:42,036 --> 00:12:42,996
That's the difference.


290
00:12:43,276 --> 00:12:46,416
To drive the point home a little
bit, let's compare the two.


291
00:12:46,956 --> 00:12:48,056
In accelerated control,


292
00:12:48,926 --> 00:12:51,656
ou get your action message
whenever the pressure happens


293
00:12:51,696 --> 00:12:53,836
to change, so there may be a
little bit of delay in there,


294
00:12:54,046 --> 00:12:56,046
it may come close together,


295
00:12:56,256 --> 00:12:58,446
and you just change how
fast you're fast-forwarding


296
00:12:58,446 --> 00:12:58,916
in the movie.


297
00:13:00,296 --> 00:13:05,026
For a continuous control
it comes in on a heartbeat


298
00:13:05,026 --> 00:13:06,246
for a continuous acceleration,


299
00:13:06,246 --> 00:13:07,766
and then you just
do your action.


300
00:13:07,936 --> 00:13:10,006
The frequency, they might
come together closely


301
00:13:10,006 --> 00:13:12,616
if the frequency is high because
the user is applying a lot


302
00:13:12,616 --> 00:13:12,996
of force.


303
00:13:13,286 --> 00:13:16,826
It is a great way for doing
something like sliding photos


304
00:13:16,826 --> 00:13:19,276
where the animation speed is
constant, but when do you need


305
00:13:19,276 --> 00:13:20,516
to bring in the next photo?


306
00:13:20,726 --> 00:13:22,436
That's the next time
the action message fires


307
00:13:22,706 --> 00:13:24,186
and it gives the user
a lot of control.


308
00:13:25,476 --> 00:13:27,456
That's everything you need
to know to be a squire.


309
00:13:27,456 --> 00:13:28,196
Congratulations.


310
00:13:28,196 --> 00:13:30,456
You are all now squires in
using the Force Touch trackpads.


311
00:13:30,456 --> 00:13:33,586
We have talked about Table
Row Actions, a very easy API


312
00:13:33,586 --> 00:13:36,026
to implement, spring-loaded
NSButtons


313
00:13:36,026 --> 00:13:38,446
and accelerator NS Buttons
and segmented controls,


314
00:13:38,576 --> 00:13:41,506
they're real easy to turn
on, our high-level API,


315
00:13:41,616 --> 00:13:45,076
you get a lot of bang for your
buck here in using these APIs


316
00:13:45,386 --> 00:13:47,326
and we hope that you turn
them on in your applications.


317
00:13:48,416 --> 00:13:49,586
Let's move forward
to being a knight.


318
00:13:50,516 --> 00:13:51,726
Being a knight is all


319
00:13:51,726 --> 00:13:54,216
about understanding how the
force flows through the system.


320
00:13:54,716 --> 00:13:56,576
We're going to talk about
the force event stream,


321
00:13:56,576 --> 00:13:58,516
and then I'm also going to talk


322
00:13:58,516 --> 00:14:01,156
about the spring-loading
protocol


323
00:14:01,156 --> 00:14:04,766
so that you can use the same
API that NSButton is doing


324
00:14:04,966 --> 00:14:07,376
to provide spring loading
in your custom applications.


325
00:14:08,006 --> 00:14:11,506
Then finally we will talk about
some Alignment Feedback API


326
00:14:11,506 --> 00:14:15,136
to help you do snap-to
guides and things like that.


327
00:14:15,136 --> 00:14:17,376
Let's talk about
the event stream.


328
00:14:18,296 --> 00:14:23,176
We have a ton of events already
on OS X; you get the mouse downs


329
00:14:23,176 --> 00:14:26,226
and ups, your gestures
for magnify and rotate.


330
00:14:26,496 --> 00:14:27,916
And now we're introducing
another one:


331
00:14:27,996 --> 00:14:29,296
NSEventTypePressure.


332
00:14:30,116 --> 00:14:32,576
Or actually, we introduced
it in 10.10.3


333
00:14:32,576 --> 00:14:33,926
when we introduced
the new MacBooks,


334
00:14:34,266 --> 00:14:37,706
so you can get
NSEventTypePressures there


335
00:14:37,706 --> 00:14:38,086
as well.


336
00:14:38,706 --> 00:14:40,066
The are pressure gesture.


337
00:14:41,126 --> 00:14:42,866
And along with the new
event type, of course,


338
00:14:42,866 --> 00:14:44,296
we have the event
mask to go along


339
00:14:44,296 --> 00:14:46,506
with it: NSEventMaskPressure.


340
00:14:46,856 --> 00:14:49,056
And what this means is that
during your tracking loops,


341
00:14:49,596 --> 00:14:51,236
you can just add
event mask pressure


342
00:14:51,236 --> 00:14:52,726
to your tracking loop mask,


343
00:14:53,696 --> 00:14:56,796
and you can get the
pressure events coming


344
00:14:56,796 --> 00:14:58,436
in as you're tracking
the mouse as well.


345
00:14:59,176 --> 00:15:00,216
It is really easy to use.


346
00:15:01,686 --> 00:15:03,576
If you prefer to use
the responder approach


347
00:15:03,576 --> 00:15:06,716
where you're overriding
mouse down and mouse drag


348
00:15:06,716 --> 00:15:08,856
and mouse up, we also have
a new responder method


349
00:15:08,896 --> 00:15:11,016
pressureChangeWithEvent, so
you can get them that way


350
00:15:11,016 --> 00:15:11,836
as well if you prefer.


351
00:15:12,366 --> 00:15:17,316
Let's dig into the properties
of the pressure gesture.


352
00:15:17,636 --> 00:15:20,496
It is a gesture; unlike
a mouse event sequence


353
00:15:20,496 --> 00:15:23,266
which has individual types
for mouse down, mouse drag,


354
00:15:23,266 --> 00:15:26,606
and mouse up, there is just
the single type for pressure,


355
00:15:26,946 --> 00:15:29,886
it has a phase, and it goes
through a cycle of Began,


356
00:15:30,136 --> 00:15:32,076
Changed, and Ended
when the gesture ends.


357
00:15:33,536 --> 00:15:34,686
And we have a stage.


358
00:15:34,896 --> 00:15:37,226
A stage is how we determine
when a Force click happens.


359
00:15:37,816 --> 00:15:43,416
So when you do a mouse down with
a trackpad you'll get a Began


360
00:15:43,416 --> 00:15:46,406
phase pressure gesture and
it will have a stage of 1.


361
00:15:46,406 --> 00:15:48,886
This is the standard
click level stage.


362
00:15:48,946 --> 00:15:51,716
The user presses harder to
get to Force click level


363
00:15:51,716 --> 00:15:53,746
on the trackpad, the
stage will change to 2.


364
00:15:53,746 --> 00:15:56,386
That's how you know the user's
accomplished Force click


365
00:15:56,806 --> 00:15:59,526
and you can just immediately do
your Force click action and go


366
00:15:59,526 --> 00:16:01,716
into rename on the
Finder, for example.


367
00:16:02,756 --> 00:16:05,316
Then as the user releases
the force from the trackpad,


368
00:16:05,786 --> 00:16:08,116
it goes back to stage 1
as it gets to click level,


369
00:16:08,116 --> 00:16:10,496
and eventually it gets to
stage 0 when the gesture ends


370
00:16:10,906 --> 00:16:15,266
because the mouse button
down, it is no longer down,


371
00:16:15,736 --> 00:16:19,906
so you get a final event of
stage 0 with a phase of Ended.


372
00:16:20,486 --> 00:16:25,226
Now, of course, no pressure
gesture would be complete


373
00:16:25,226 --> 00:16:26,676
without actually
having a pressure value,


374
00:16:26,676 --> 00:16:28,376
so we have a pressure
property as well,


375
00:16:28,376 --> 00:16:29,726
it is within the
range of 0 to 1.


376
00:16:30,866 --> 00:16:32,216
It is important to note here


377
00:16:32,216 --> 00:16:34,386
that the pressure
property is the pressure


378
00:16:34,386 --> 00:16:35,476
of the current stage.


379
00:16:35,476 --> 00:16:36,616
So as you can see in the chart,


380
00:16:36,616 --> 00:16:39,566
as you enter stage 1 the
pressure starts to go up


381
00:16:39,566 --> 00:16:43,066
and reaches 1 as you approach
stage 2, and once you cross


382
00:16:43,066 --> 00:16:45,306
over to stage 2, the pressure
drops immediately back


383
00:16:45,306 --> 00:16:47,576
down to 0, and it
goes back up again


384
00:16:47,966 --> 00:16:51,466
as you increase the pressure
while you're in stage 2.


385
00:16:51,526 --> 00:16:54,386
The pressure is of
the current stage.


386
00:16:55,036 --> 00:16:55,756
That's really important.


387
00:16:57,206 --> 00:16:59,966
Now I'm showing a linear
mapping between the force


388
00:17:00,006 --> 00:17:03,416
on the trackpad to what the
user is doing to the values


389
00:17:03,416 --> 00:17:05,516
in the pressure event,
but I don't want you


390
00:17:05,516 --> 00:17:06,506
to read too much into that.


391
00:17:07,175 --> 00:17:10,316
We like to think of every
click on the trackpad


392
00:17:10,316 --> 00:17:13,066
as a new adventure,
and we look at a lot


393
00:17:13,066 --> 00:17:15,836
of different variables -- is
the user using their thumb,


394
00:17:15,836 --> 00:17:18,516
what firmness setting do they
have in their preferences,


395
00:17:18,976 --> 00:17:20,935
how are they interacting
with the trackpad --


396
00:17:20,935 --> 00:17:23,165
so we dynamically change
these curves on the fly


397
00:17:23,165 --> 00:17:25,136
to give the user the
best possible experience,


398
00:17:25,496 --> 00:17:28,296
and we normalize the
input from the trackpad


399
00:17:28,696 --> 00:17:30,496
into the pressure
range of 0 to 1


400
00:17:30,796 --> 00:17:32,436
and that's what you should
be using in your application.


401
00:17:32,996 --> 00:17:37,226
As you notice when I was
clicking around earlier


402
00:17:37,226 --> 00:17:39,836
in the demo, just clicking
around in TextEdit,


403
00:17:40,386 --> 00:17:45,016
I wasn't getting the animation
of the popover until I started


404
00:17:45,016 --> 00:17:46,906
to really get close to
having enough pressure


405
00:17:46,906 --> 00:17:47,736
to reach Force click.


406
00:17:47,736 --> 00:17:51,446
You don't want to
have a whole bunch


407
00:17:51,446 --> 00:17:52,736
of distracting animations
occurring


408
00:17:52,736 --> 00:17:54,176
when the user's just
clicking around.


409
00:17:54,326 --> 00:17:57,906
Doing this animation as they're
approaching the transition


410
00:17:57,906 --> 00:17:59,016
to stage 2 can be useful.


411
00:17:59,336 --> 00:18:01,056
This is what the stage
transition property is


412
00:18:01,056 --> 00:18:01,606
useful for.


413
00:18:02,156 --> 00:18:04,356
As you see here, it is in
the range of 0 to 1 just


414
00:18:04,356 --> 00:18:07,226
like pressure, but it stays at 0
for a much longer period of time


415
00:18:07,226 --> 00:18:09,466
until you start to
approach the next stage,


416
00:18:09,466 --> 00:18:10,506
stage 2 in this case.


417
00:18:11,066 --> 00:18:13,996
I want you to get to approach
stage 2, it will then shoot


418
00:18:13,996 --> 00:18:17,716
up to 1, you can use this range
to control your animation,


419
00:18:18,016 --> 00:18:19,666
and it won't interfere
with just clicking


420
00:18:19,666 --> 00:18:21,166
around in your interface.


421
00:18:21,216 --> 00:18:23,656
You can get that
animation and as soon


422
00:18:23,656 --> 00:18:26,076
as you reach stage 2 you can pop
that animation to completion,


423
00:18:26,076 --> 00:18:29,526
and you can see the
stageTransition value drops back


424
00:18:29,566 --> 00:18:32,426
to 0 once you reach stage 2,
and we don't have a stage 3


425
00:18:32,426 --> 00:18:35,046
in this case to transition
to, so it just stays at 0


426
00:18:35,046 --> 00:18:37,886
for the remainder of the time.


427
00:18:38,086 --> 00:18:42,286
I mentioned earlier that
mouse events are going


428
00:18:42,286 --> 00:18:45,386
on at the same time as
pressure gestures are.


429
00:18:45,476 --> 00:18:47,756
The trackpad is still emulating
a mouse like it always has.


430
00:18:48,686 --> 00:18:51,706
It is also issuing
pressure gestures.


431
00:18:51,706 --> 00:18:54,116
I'm going to look at how
those flow in the system


432
00:18:54,116 --> 00:18:55,326
at the same time in parallel.


433
00:18:55,746 --> 00:18:56,606
This is what we're
going to cover.


434
00:18:56,606 --> 00:19:00,856
This is an example of the user
putting force on the trackpad,


435
00:19:01,246 --> 00:19:02,716
applying a click,
going all the way


436
00:19:02,716 --> 00:19:03,766
to the Force click threshold,


437
00:19:03,766 --> 00:19:05,246
and then releasing
pressure off of that.


438
00:19:05,316 --> 00:19:06,026
That's their input.


439
00:19:06,526 --> 00:19:09,136
Down here we're going to show
you the events as they're coming


440
00:19:09,136 --> 00:19:10,026
into your application.


441
00:19:10,106 --> 00:19:13,246
So the user starts off,
they're applying light pressure,


442
00:19:13,846 --> 00:19:15,786
and these are all mouse moves.


443
00:19:15,846 --> 00:19:18,056
We haven't reached a
click threshold yet.


444
00:19:18,386 --> 00:19:20,406
We haven't even started
a pressure gesture yet.


445
00:19:20,486 --> 00:19:21,616
These are just mouse moves,


446
00:19:21,786 --> 00:19:23,596
there are no pressure
gestures coming in.


447
00:19:24,706 --> 00:19:27,036
You reach the click
threshold, a mouse down occurs,


448
00:19:27,566 --> 00:19:31,136
and you also get a pressure
began event with a stage of 1


449
00:19:31,436 --> 00:19:33,686
and the pressure value is
going to be 0 at this point.


450
00:19:34,386 --> 00:19:35,146
We don't guarantee


451
00:19:35,146 --> 00:19:38,236
if the pressure began event
occurs first or if the mouse


452
00:19:38,236 --> 00:19:41,106
down occurs first; they
can swap sometimes.


453
00:19:41,886 --> 00:19:45,356
The easiest way to handle that
is just look for the mouse down


454
00:19:45,426 --> 00:19:47,336
and if you also want pressure
events, then start looking


455
00:19:47,336 --> 00:19:49,016
for them after the
mouse down occurs.


456
00:19:49,516 --> 00:19:53,096
As the user starts to apply
more force to the trackpad,


457
00:19:53,096 --> 00:19:55,076
you see the pressure
rises up towards 1


458
00:19:55,076 --> 00:19:56,696
as we approach the
Force click threshold.


459
00:19:57,206 --> 00:19:59,056
If the cursor is moving,
these are going to come


460
00:19:59,056 --> 00:20:00,316
through as mouse dragged events,


461
00:20:00,536 --> 00:20:01,566
you have the mouse
dragged events


462
00:20:01,566 --> 00:20:03,556
and the pressure events --
we're still in stage 1 --


463
00:20:04,076 --> 00:20:05,686
we reach the Force
click threshold,


464
00:20:06,356 --> 00:20:08,646
you now get a pressure
gesture with a stage 2


465
00:20:08,646 --> 00:20:11,286
and the pressure value
drops all the way back to 0.


466
00:20:11,286 --> 00:20:14,516
The user continues to apply
more force on the trackpad,


467
00:20:14,916 --> 00:20:17,196
the pressure starts to
increase again, as they start


468
00:20:17,196 --> 00:20:19,056
to release the pressure
from the trackpad it starts


469
00:20:19,056 --> 00:20:20,436
to go back down toward 0.


470
00:20:20,976 --> 00:20:23,266
Now they have released it back
to the Force click threshold,


471
00:20:23,266 --> 00:20:24,326
that pressure is at 0.


472
00:20:25,846 --> 00:20:27,426
We're still at stage
2 at this point.


473
00:20:28,286 --> 00:20:30,536
As the user releases
a bit more pressure,


474
00:20:30,666 --> 00:20:31,906
we're still at stage 2.


475
00:20:31,906 --> 00:20:34,606
We have actually exaggerated
it a little bit on this graph.


476
00:20:35,096 --> 00:20:37,706
But it is very difficult for
somebody to hold pressure


477
00:20:37,706 --> 00:20:39,836
at a constant rate
on the trackpad.


478
00:20:39,886 --> 00:20:42,086
If they're right at the Force
click level they'll be going


479
00:20:42,086 --> 00:20:44,516
above it and slightly
below it and we don't want


480
00:20:44,516 --> 00:20:47,236
to be triggering Force click on
and off, on and off, on and off;


481
00:20:47,236 --> 00:20:49,096
that's not what the
user's trying to do.


482
00:20:49,096 --> 00:20:52,396
We require that you drop below
the Force click threshold a


483
00:20:52,396 --> 00:20:55,856
little bit further before we
finally unlatch from stage 2,


484
00:20:56,376 --> 00:20:59,006
and we give you finally
an event of stage 1.


485
00:20:59,496 --> 00:21:00,656
And during that small section


486
00:21:00,656 --> 00:21:03,956
of time the pressure is
going to be 0 in the event.


487
00:21:04,366 --> 00:21:06,236
You're obviously below
the Force click threshold


488
00:21:06,236 --> 00:21:08,446
where the pressure
would start to go up.


489
00:21:09,176 --> 00:21:13,146
Then now that you're in stage
1, the user continues to release


490
00:21:13,346 --> 00:21:16,346
and the pressure jumps up and
starts to come back down again.


491
00:21:16,346 --> 00:21:18,466
You notice it didn't jump
all the way back up to 1,


492
00:21:18,466 --> 00:21:20,036
because that's part
of the little gap.


493
00:21:20,636 --> 00:21:23,526
One of the things to note
here is that this is one


494
00:21:23,526 --> 00:21:25,576
of the reasons why you
shouldn't try to combine stage 1


495
00:21:25,576 --> 00:21:27,546
and stage 2 to get a
larger dynamic range,


496
00:21:27,546 --> 00:21:30,236
we're going to talk more
about that when we get


497
00:21:30,236 --> 00:21:32,336
to the master section.


498
00:21:32,676 --> 00:21:33,966
Whenever there's stage 2 occurs,


499
00:21:33,966 --> 00:21:37,166
automatically we also provide
haptic feedback, so don't try


500
00:21:37,166 --> 00:21:38,896
and combine the pressure
into two stages.


501
00:21:39,246 --> 00:21:41,866
Either look at stage 1 and use
the pressure or look at stage 2


502
00:21:41,966 --> 00:21:43,466
and use the pressure if
that's where you need


503
00:21:43,466 --> 00:21:48,936
to do your animation or the
stage transition property.


504
00:21:48,936 --> 00:21:52,366
We reached the click
threshold point for stage 1,


505
00:21:52,366 --> 00:21:54,666
so your pressure is now back
down to 0, and just like we did


506
00:21:54,666 --> 00:21:57,026
with the Force click
threshold, the user actually has


507
00:21:57,076 --> 00:21:58,756
to release even more pressure


508
00:21:58,756 --> 00:22:03,496
from the trackpad before we
finally release from stage 1.


509
00:22:04,126 --> 00:22:06,746
We're going to do a
pressure with a phase ended


510
00:22:06,746 --> 00:22:08,496
at stage 0 and the mouse up.


511
00:22:08,906 --> 00:22:11,266
Again, whether the
mouse up occurs first


512
00:22:11,266 --> 00:22:13,646
or the pressure ended
event occurs first,


513
00:22:14,096 --> 00:22:16,806
that is not guaranteed;
the easiest way to deal


514
00:22:16,806 --> 00:22:19,506
with this is look for the
mouse up, track your pressure


515
00:22:19,506 --> 00:22:21,126
and your mouse movements
at the same time


516
00:22:21,176 --> 00:22:22,966
until the mouse up occurs.


517
00:22:23,246 --> 00:22:25,666
Just ignore any pressure
events that might occur before


518
00:22:25,666 --> 00:22:26,746
or after that sequence.


519
00:22:27,256 --> 00:22:32,416
This will work with mice as
well as our older trackpads


520
00:22:32,466 --> 00:22:33,956
and the new Force Touch
trackpads as well.


521
00:22:35,046 --> 00:22:37,526
Finally, if the user is
moving around with very,


522
00:22:37,526 --> 00:22:39,936
very light pressure after the
mouse up, these are mouse moves,


523
00:22:40,096 --> 00:22:42,456
the pressure gesture has ended
and we're starting the cycle


524
00:22:42,456 --> 00:22:44,116
over again as we did
in the beginning.


525
00:22:44,676 --> 00:22:49,166
It gets real important to
know sometimes on the mouse


526
00:22:49,166 --> 00:22:50,966
down if there is going


527
00:22:50,966 --> 00:22:53,396
to be pressure associated
with this mouse down.


528
00:22:53,596 --> 00:22:56,596
Is this coming from a device
that's emulating the mouse


529
00:22:56,676 --> 00:22:59,886
and also issuing
pressure gesture events.


530
00:22:59,886 --> 00:23:01,926
The way we have to
help you do this is


531
00:23:01,926 --> 00:23:03,916
by using the associatedEventMask
property


532
00:23:04,486 --> 00:23:06,226
on the mouse down events.


533
00:23:06,226 --> 00:23:08,216
You can see this on the
mouse dragged events as well.


534
00:23:08,216 --> 00:23:09,996
It is real easy to use.


535
00:23:09,996 --> 00:23:13,956
You ask the mouse down event
for the associatedEventMask,


536
00:23:13,956 --> 00:23:16,256
you find out if it contains
the EventMaskPressure,


537
00:23:16,366 --> 00:23:20,276
if you're using Cocoa
you're just ending it


538
00:23:20,276 --> 00:23:21,806
with the NSEventMaskPressure


539
00:23:21,806 --> 00:23:23,226
because you're checking
the bit field.


540
00:23:24,606 --> 00:23:27,096
If it does contain
the EventMaskPressure,


541
00:23:27,096 --> 00:23:29,396
you know pressure events
are going to be coming,


542
00:23:29,436 --> 00:23:32,756
and you can set it up so that
you have varying brush widths


543
00:23:33,026 --> 00:23:34,076
for example in your drawing.


544
00:23:34,076 --> 00:23:34,876
And that's great.


545
00:23:35,426 --> 00:23:37,146
If it doesn't contain
the EventMaskPressure,


546
00:23:37,606 --> 00:23:41,296
then it is coming from a mouse
or an older style trackpad


547
00:23:41,296 --> 00:23:43,166
for example, and at
that point you want


548
00:23:43,166 --> 00:23:45,176
to choose a default brush size,


549
00:23:45,246 --> 00:23:47,966
usually you choose the maximum
brush size at that point


550
00:23:48,316 --> 00:23:51,546
or maybe you want to just
choose half a brush size


551
00:23:51,726 --> 00:23:53,176
and you use this constant value


552
00:23:53,586 --> 00:23:55,956
for the entire mouse
dragging sequence.


553
00:23:56,446 --> 00:24:01,146
That's the new
EventTypePressure,


554
00:24:01,146 --> 00:24:05,166
it's got a lot of new
properties, it's got a phase,


555
00:24:05,536 --> 00:24:07,736
because it is a gesture,
pressure which is


556
00:24:07,736 --> 00:24:10,746
within the range of 0 to
1 for the current stage.


557
00:24:11,066 --> 00:24:12,886
Of course you have
stage, you can easily see


558
00:24:12,886 --> 00:24:15,616
when the user goes to Force
click, stage transitions


559
00:24:15,616 --> 00:24:18,506
for animating those transitions,
the associated event mask


560
00:24:18,506 --> 00:24:20,266
so you know when your
mouse events are going


561
00:24:20,266 --> 00:24:21,816
to have pressure
associated with them,


562
00:24:22,186 --> 00:24:24,096
and of course the
pressure change


563
00:24:24,096 --> 00:24:25,316
with event responder method


564
00:24:25,536 --> 00:24:26,836
if you're using the
responder methods.


565
00:24:27,326 --> 00:24:29,906
Let's talk a little bit
about spring loading


566
00:24:29,906 --> 00:24:31,916
and how NSButton
implemented spring loading;


567
00:24:32,026 --> 00:24:34,706
you can use that exact same
API in your custom controls


568
00:24:34,706 --> 00:24:36,546
to add spring loading
to your application.


569
00:24:37,896 --> 00:24:40,306
There is an
NSSpringLoadingDestination


570
00:24:40,306 --> 00:24:43,676
protocol; it's very similar to
NSDraggingDestination protocol


571
00:24:43,676 --> 00:24:45,006
if you've ever implemented that.


572
00:24:45,006 --> 00:24:49,726
In your destination, in your
destination view you need


573
00:24:49,726 --> 00:24:51,406
to implement either
springLoadingEntered


574
00:24:51,406 --> 00:24:52,566
or springLoadingUpdated.


575
00:24:53,276 --> 00:24:55,446
To give you an example
of how these work,


576
00:24:55,446 --> 00:24:57,446
NSButton implements
springLoadingEntered


577
00:24:57,446 --> 00:24:58,806
and not springLoadingUpdated,


578
00:24:59,286 --> 00:25:01,436
because a button is
either enabled or disabled,


579
00:25:01,436 --> 00:25:02,756
so as soon as you
enter the button,


580
00:25:03,076 --> 00:25:06,216
it can return the spring-loading
options and it is not going


581
00:25:06,216 --> 00:25:07,396
to change for the lifetime


582
00:25:07,396 --> 00:25:08,786
that the drag is
occurring in the button.


583
00:25:09,476 --> 00:25:11,236
NSSegmentedControl,
on the other hand,


584
00:25:11,326 --> 00:25:12,856
implements springLoadingUpdated.


585
00:25:13,326 --> 00:25:16,046
Each segment may be enabled
or disabled independently


586
00:25:16,046 --> 00:25:19,626
of each other, it's one view,
so with springLoadingUpdated,


587
00:25:20,166 --> 00:25:23,366
segmented control can watch
the drag and find out exactly


588
00:25:23,366 --> 00:25:24,546
where in the control the drag is


589
00:25:24,546 --> 00:25:26,406
and dynamically change the
spring-loading options.


590
00:25:26,896 --> 00:25:28,716
As I mentioned, you need to --


591
00:25:29,076 --> 00:25:30,426
if you implement one
of these methods,


592
00:25:30,536 --> 00:25:32,756
you need to implement
spring-loading options.


593
00:25:32,756 --> 00:25:35,996
You can implement both if
you want, you don't have


594
00:25:35,996 --> 00:25:37,776
to implement just one of
these, you need to implement


595
00:25:37,776 --> 00:25:38,716
at least one of these though.


596
00:25:38,716 --> 00:25:41,396
For your spring-loading
options, it is pretty obvious,


597
00:25:41,396 --> 00:25:43,496
you return if spring
loading should be enabled


598
00:25:43,496 --> 00:25:45,366
or disabled, that's pretty easy.


599
00:25:45,366 --> 00:25:47,606
We also have a couple of
other interesting options,


600
00:25:47,606 --> 00:25:49,016
continuous activation --


601
00:25:49,536 --> 00:25:52,526
generally a spring-loading
action is discrete,


602
00:25:52,526 --> 00:25:53,506
spring loading occurred,


603
00:25:53,746 --> 00:25:56,846
the button fires its
action, it is over.


604
00:25:57,286 --> 00:25:58,716
There is also a continuous
version


605
00:25:58,716 --> 00:26:00,466
which we'll cover
a little bit more


606
00:26:00,466 --> 00:26:02,126
in the next couple of slides.


607
00:26:02,216 --> 00:26:04,096
I want to move on to no hover.


608
00:26:05,496 --> 00:26:07,996
As I mentioned earlier, spring
loading can be triggered either


609
00:26:07,996 --> 00:26:11,146
with a hover, which
works great for people


610
00:26:11,146 --> 00:26:12,586
that don't have Force
Touch trackpads


611
00:26:12,586 --> 00:26:13,516
or you can Force click.


612
00:26:14,676 --> 00:26:17,266
If you want to do a Force
click on a canvas for example


613
00:26:17,266 --> 00:26:20,286
that has a large area, and the
user is just dragging the item


614
00:26:20,286 --> 00:26:22,976
across the canvas, they're just
trying to get across the canvas,


615
00:26:23,136 --> 00:26:24,806
and they lift the
finger up to come back


616
00:26:24,806 --> 00:26:26,636
down to continue the
drag, or lift the mouse


617
00:26:26,636 --> 00:26:27,776
up to continue the drag,


618
00:26:28,416 --> 00:26:30,546
that amount of time
might be just long enough


619
00:26:30,546 --> 00:26:34,116
that the cursor stays still that
spring loading is activated.


620
00:26:34,936 --> 00:26:37,176
So this would be a
false activation,


621
00:26:37,176 --> 00:26:38,726
that wasn't what the
user was trying to do.


622
00:26:39,396 --> 00:26:41,206
If you have a situation
where you're getting a lot


623
00:26:41,206 --> 00:26:44,516
of false activations because
of hover, then you might want


624
00:26:44,516 --> 00:26:47,086
to consider the no hover
spring-loading option


625
00:26:47,266 --> 00:26:49,956
which will still allow users
with the Force Touch trackpad


626
00:26:50,026 --> 00:26:52,366
to do a Force click
to get spring loading


627
00:26:52,506 --> 00:26:53,496
in that area of your view.


628
00:26:54,306 --> 00:26:57,556
Use it sparingly, make sure
that you really think about it


629
00:26:57,556 --> 00:26:59,146
because we don't want
to leave out any users


630
00:26:59,146 --> 00:27:00,676
that don't have a
Force Touch trackpad,


631
00:27:01,056 --> 00:27:03,816
but if you're getting
more false activations,


632
00:27:04,036 --> 00:27:05,616
this is a good option
to use sometimes.


633
00:27:07,496 --> 00:27:09,446
Along with springLoadingEntered
and Updated,


634
00:27:09,446 --> 00:27:11,216
of course we have
springLoadingExited --


635
00:27:11,216 --> 00:27:13,776
this lets you know when the
drag has exited your view --


636
00:27:13,966 --> 00:27:15,296
and there's also draggingEnded.


637
00:27:15,496 --> 00:27:17,816
Spring loading is part of
the drag and drop operations,


638
00:27:17,816 --> 00:27:21,746
so if the user has
dragged over your view


639
00:27:21,956 --> 00:27:24,656
and your spring-loading
destination


640
00:27:24,916 --> 00:27:26,356
and you implement draggingEnded,


641
00:27:26,866 --> 00:27:29,336
when the dragging does
completed, when the user lets go


642
00:27:29,336 --> 00:27:30,696
of the mouse, cancels the drag,


643
00:27:31,376 --> 00:27:33,266
you will get back
the draggingEnded.


644
00:27:33,396 --> 00:27:36,256
Whether this drag, whether
the user completed the drag


645
00:27:36,256 --> 00:27:37,106
in your application


646
00:27:37,106 --> 00:27:39,066
or in another process,
it doesn't matter.


647
00:27:39,506 --> 00:27:41,926
Everybody that's implemented
draggingUpdated will get


648
00:27:41,926 --> 00:27:42,526
their callback.


649
00:27:42,736 --> 00:27:46,836
Since this is part of dragging,


650
00:27:47,356 --> 00:27:52,976
the NSDraggingDestination also
has a draggingEnded function.


651
00:27:53,176 --> 00:27:55,136
It is the exact same
function we have here.


652
00:27:55,136 --> 00:27:57,286
If you are both a Spring
Loading destination


653
00:27:57,356 --> 00:28:00,546
and an NSDraggingDestination,
you only need


654
00:28:00,546 --> 00:28:02,526
to have one implementation
of draggingEnded,


655
00:28:02,526 --> 00:28:04,976
it applies to both, so you'll
need to do any cleanup you need


656
00:28:04,976 --> 00:28:07,296
to do for both Spring Loading
and dragging destination


657
00:28:07,686 --> 00:28:09,556
if you're both a Spring
Loading destination


658
00:28:09,636 --> 00:28:12,866
and a dragging destination
at the same time.


659
00:28:13,086 --> 00:28:15,596
Now we get to the really fun
stuff about spring loading.


660
00:28:16,106 --> 00:28:18,596
So you're required to implement
springLoadingActivated.


661
00:28:18,926 --> 00:28:21,806
This is where we
tell your destination


662
00:28:21,806 --> 00:28:23,286
that the user has spring loaded.


663
00:28:24,486 --> 00:28:26,276
We have a Boolean value,
which is normally yes.


664
00:28:26,616 --> 00:28:29,166
As I mentioned, spring
loading is a discrete action,


665
00:28:29,166 --> 00:28:32,046
it has occurred, and
NSButton just fires its action


666
00:28:32,916 --> 00:28:36,196
and everybody is happy.


667
00:28:36,426 --> 00:28:39,556
But if you have that
continuous bit set, then as soon


668
00:28:39,556 --> 00:28:40,756
as the user Force clicks,


669
00:28:41,376 --> 00:28:43,186
we'll send a
springLoadingActivated yes,


670
00:28:43,186 --> 00:28:45,506
you can start a timer,
you can add continuously


671
00:28:45,676 --> 00:28:49,066
on that timer firing your action
message, and when you release


672
00:28:49,066 --> 00:28:54,186
from Force click it will respond
with a springLoadingActivated no


673
00:28:54,186 --> 00:28:56,526
and that you know to turn
off your timer at that point.


674
00:28:56,936 --> 00:28:58,536
If the user is using hover,


675
00:28:59,076 --> 00:29:00,616
you will get the
springLoadingActivated


676
00:29:00,616 --> 00:29:03,916
at the hover timeout with
a yes, and you'll get a no


677
00:29:03,916 --> 00:29:05,126
when they move out
of the control.


678
00:29:06,506 --> 00:29:09,026
Again to compare this to
the normal discrete action,


679
00:29:09,286 --> 00:29:11,526
usually spring loading
from Force click occurs


680
00:29:11,756 --> 00:29:14,216
on the release of Force click,
so they move all the way


681
00:29:14,216 --> 00:29:15,596
down into Force click, it's


682
00:29:15,596 --> 00:29:17,406
when they release Force
click you will get a


683
00:29:17,406 --> 00:29:20,056
springLoadingActivated yes, if
you're not using continuous;


684
00:29:20,336 --> 00:29:22,156
that's the one that
we generally suggest


685
00:29:22,156 --> 00:29:23,356
that you use unless you need


686
00:29:23,356 --> 00:29:29,196
to continuously fire your action
message during a spring load.


687
00:29:29,196 --> 00:29:31,146
Lastly, we have
springLoadingHighlightChanged.


688
00:29:31,626 --> 00:29:33,666
We like to give the user
feedback on what's going on.


689
00:29:33,716 --> 00:29:35,746
We have three forms
of highlighting: None,


690
00:29:35,966 --> 00:29:37,246
Standard, and Emphasized.


691
00:29:38,676 --> 00:29:41,566
When you get a
springLoadingHighlightChanged


692
00:29:41,696 --> 00:29:44,816
message, you need to ask
the draggingInfo for what


693
00:29:44,816 --> 00:29:48,246
that springLoadingHighlight
is, set your view


694
00:29:48,246 --> 00:29:51,546
that needs display, and
then you update and you draw


695
00:29:51,546 --> 00:29:52,866
with the correct highlighting.


696
00:29:54,236 --> 00:29:56,756
What's important here is that
you don't try to infer any kind


697
00:29:56,756 --> 00:29:59,476
of behavior that the user
is doing with this yet.


698
00:29:59,896 --> 00:30:02,046
That's what
springLoadingActivated is for.


699
00:30:04,236 --> 00:30:08,216
Sort of like when you select
an item from a menu we blink


700
00:30:08,216 --> 00:30:10,496
that menu item to let
the user know and confirm


701
00:30:10,496 --> 00:30:13,466
that they have selected that
item, we'll do something similar


702
00:30:13,466 --> 00:30:14,936
to that in spring loading,


703
00:30:14,936 --> 00:30:17,306
and we do that by
changing the highlighting,


704
00:30:17,676 --> 00:30:19,646
and so all you have
to do is just draw


705
00:30:19,646 --> 00:30:21,736
with the new highlighting
style whenever requested


706
00:30:22,096 --> 00:30:24,866
and you'll get a consistent
look in your application


707
00:30:24,866 --> 00:30:25,986
to match the rest of the system.


708
00:30:26,356 --> 00:30:27,686
Use springLoadingActivated
to know


709
00:30:27,686 --> 00:30:29,116
when to fire the
action messages.


710
00:30:29,486 --> 00:30:32,126
That's Spring Loading
Destination.


711
00:30:33,236 --> 00:30:34,886
We have Alignment
Feedback, you can see this


712
00:30:34,886 --> 00:30:37,086
in Interface Builder when
you get two items together,


713
00:30:37,086 --> 00:30:39,256
we snap them together, draw that
nice little alignment guide.


714
00:30:40,106 --> 00:30:42,476
We have some new API
to help you do this.


715
00:30:42,646 --> 00:30:45,326
The drawing is up to you, but
our new API helps you decide


716
00:30:45,326 --> 00:30:46,326
when to do the snapping.


717
00:30:47,076 --> 00:30:50,616
To give you an example of that,
let's look at a tracking loop,


718
00:30:50,616 --> 00:30:51,786
a typical tracking loop.


719
00:30:51,786 --> 00:30:53,676
Let's zoom in on that.


720
00:30:53,676 --> 00:30:54,946
You get your mouse down event,


721
00:30:54,946 --> 00:30:57,836
you figure out what your event
mask is, which events you want


722
00:30:57,836 --> 00:31:01,666
to track, you ask for the next
event, you move your item,


723
00:31:01,766 --> 00:31:04,156
update your data model,
set your needs display,


724
00:31:04,156 --> 00:31:06,706
is this a mouse up, no, and
you just continue the cycle,


725
00:31:06,866 --> 00:31:10,346
you draw whenever drawRect is
called and you drag your item


726
00:31:10,346 --> 00:31:12,586
across the screen until
the mouse up occurs.


727
00:31:13,396 --> 00:31:16,486
We have an
NSAlignmentFeedbackFilter object


728
00:31:16,486 --> 00:31:17,556
to help you out with this.


729
00:31:18,956 --> 00:31:20,456
You get your mouse down,
the first thing you do,


730
00:31:20,456 --> 00:31:21,976
you get the input event mask


731
00:31:21,976 --> 00:31:23,636
from the Alignment
Feedback filter.


732
00:31:23,636 --> 00:31:27,746
This is the events that the
Alignment Feedback filter needs


733
00:31:27,746 --> 00:31:31,506
to know about, you just or them
or union them in the Swift case


734
00:31:31,506 --> 00:31:34,676
with your event mask for when
you call nextEventMatchingMask.


735
00:31:35,576 --> 00:31:38,916
Once you get the next event,
the very first thing you do,


736
00:31:38,916 --> 00:31:41,256
you give that event to the
Alignment Feedback filter,


737
00:31:41,256 --> 00:31:42,506
it's going to return right away,


738
00:31:42,506 --> 00:31:44,106
it just updates some
internal state.


739
00:31:44,946 --> 00:31:48,746
You move -- excuse me, if you're
using a pan gesture recognizer,


740
00:31:48,746 --> 00:31:51,076
you can also update with the
pan gesture recognizer --


741
00:31:51,076 --> 00:31:52,746
it works very similar
to a tracking loop,


742
00:31:52,996 --> 00:31:56,276
everything applies except for
this one message difference.


743
00:31:58,256 --> 00:32:00,006
Once Alignment Feedback
filter returns


744
00:32:00,006 --> 00:32:03,596
from processing the input, you
move the item in your data model


745
00:32:03,596 --> 00:32:06,086
as you normally would, and
then you prepare alignment.


746
00:32:06,616 --> 00:32:09,366
Let's dig in to prepareAlignment
a bit and you're going


747
00:32:09,366 --> 00:32:12,536
to use the Alignment Feedback
filter to help you do that.


748
00:32:12,536 --> 00:32:14,746
We have the object in the
data model previously,


749
00:32:14,746 --> 00:32:17,156
we got the event, and we decided
the user moved it to here,


750
00:32:17,256 --> 00:32:18,646
this is the default location


751
00:32:19,066 --> 00:32:20,736
that if we don't
do any snapping,


752
00:32:20,856 --> 00:32:22,476
this is where the object
is going to end up.


753
00:32:23,246 --> 00:32:26,336
We want to know, should we
snap it here, should we snap it


754
00:32:26,336 --> 00:32:29,146
down to this line, or should
we snap both at the same time


755
00:32:29,146 --> 00:32:30,156
and get it down in the corner.


756
00:32:31,416 --> 00:32:34,356
Use the Alignment Feedback
filter object to help


757
00:32:34,356 --> 00:32:35,066
to decide this,


758
00:32:35,066 --> 00:32:37,866
alignmentFeedbackToken
ForHorizontalMovementInView


759
00:32:37,866 --> 00:32:40,186
(without space), previousX,
alignedX, and defaultX,


760
00:32:40,806 --> 00:32:43,086
these coordinates are in
the window coordinates space


761
00:32:43,086 --> 00:32:47,256
so it works really well
regardless of your zoom level


762
00:32:47,256 --> 00:32:48,496
that you might have
in your view.


763
00:32:49,836 --> 00:32:52,046
If snapping should
occur, we will go ahead


764
00:32:52,046 --> 00:32:54,316
and return you an
Alignment Feedback token.


765
00:32:55,016 --> 00:32:56,776
If you don't get an
Alignment Feedback token,


766
00:32:56,776 --> 00:32:57,656
don't do any alignment.


767
00:32:57,656 --> 00:32:59,076
If you get an Alignment
Feedback token,


768
00:32:59,416 --> 00:33:01,776
in your data model change
the X position in this case


769
00:33:02,006 --> 00:33:04,536
to the aligned position
and hang on to


770
00:33:04,536 --> 00:33:05,706
that Alignment Feedback token.


771
00:33:06,656 --> 00:33:09,336
You can then check for
vertical movement as well,


772
00:33:09,336 --> 00:33:11,536
except you send your Y
values instead of your X


773
00:33:11,816 --> 00:33:14,396
and again you may or may not
get an Alignment Feedback token.


774
00:33:14,966 --> 00:33:17,116
If you've gotten two Alignment
Feedback tokens you'll have


775
00:33:17,116 --> 00:33:19,536
aligned in both axes and
so your object will be


776
00:33:19,536 --> 00:33:20,866
down here in the corner.


777
00:33:22,896 --> 00:33:25,196
Then sometimes -- this
happens more rarely,


778
00:33:25,196 --> 00:33:28,156
but sometimes you only
want to snap to a position


779
00:33:28,696 --> 00:33:32,446
if it is both aligned on
the X axis and the Y axis,


780
00:33:32,726 --> 00:33:35,756
and it's either aligned to both
axes or aligned to neither,


781
00:33:35,966 --> 00:33:39,256
in that case we have Alignment
Feedback token for movement


782
00:33:39,256 --> 00:33:42,196
and you pass in points
instead of an individual X


783
00:33:42,196 --> 00:33:45,386
or Y coordinate, and it
works the same way, you may


784
00:33:45,386 --> 00:33:49,246
or may not get an
Alignment Feedback token.


785
00:33:49,946 --> 00:33:53,936
You iterate over the various
items that are being dragged


786
00:33:53,936 --> 00:33:56,276
that they can snap to, you get
back your Alignment Feedback


787
00:33:56,276 --> 00:33:59,146
tokens and you change your data
model if snapping should happen,


788
00:33:59,686 --> 00:34:02,276
and now you have a
collection of tokens.


789
00:34:02,766 --> 00:34:04,366
You want to perform
haptic feedback


790
00:34:04,416 --> 00:34:06,326
to the user using the
new Force Touch trackpad.


791
00:34:07,266 --> 00:34:09,806
We'll use the Alignment Feedback
filter to help us do that;


792
00:34:09,806 --> 00:34:11,306
we'll just ask the
Alignment Feedback filter


793
00:34:11,306 --> 00:34:13,156
to perform feedback
at a performance time,


794
00:34:13,616 --> 00:34:15,686
just use the default for the
performance time for now,


795
00:34:15,686 --> 00:34:17,985
we'll cover performance times
a little bit more later.


796
00:34:18,835 --> 00:34:20,856
Then you just pass the
array a feedback token.


797
00:34:21,036 --> 00:34:23,326
You can even pass an empty
array if nothing was aligned


798
00:34:23,596 --> 00:34:26,235
and Alignment Feedback
filter is robust with that,


799
00:34:26,235 --> 00:34:27,446
it knows to just do nothing.


800
00:34:28,496 --> 00:34:30,116
Then you set that your
view needs display


801
00:34:30,466 --> 00:34:35,815
and you redraw whenever you're
asked; if you have the tokens,


802
00:34:35,866 --> 00:34:37,315
then you know when
you're redrawing


803
00:34:37,315 --> 00:34:41,226
to also draw alignment guides if
that's appropriate for your UI.


804
00:34:41,565 --> 00:34:43,846
The feedback will then be
performed synchronously


805
00:34:43,846 --> 00:34:46,516
with the screen change and
the user will have a nice


806
00:34:46,516 --> 00:34:49,196
synchronous -- sees the
alignment guide pop up


807
00:34:49,376 --> 00:34:50,596
and they feel the
haptic feedback


808
00:34:50,596 --> 00:34:53,196
from the trackpad
at the same time.


809
00:34:53,326 --> 00:34:56,916
If the user is not using a Force
Touch trackpad the Alignment


810
00:34:56,916 --> 00:34:59,016
Feedback filter knows how
to work with that as well,


811
00:34:59,356 --> 00:35:01,536
and so you just have to write it


812
00:35:01,536 --> 00:35:02,956
as if there is a
Force Touch trackpad;


813
00:35:03,006 --> 00:35:04,566
if there's not, it
just works great.


814
00:35:05,106 --> 00:35:08,996
So that's all there really is


815
00:35:09,126 --> 00:35:10,826
to using Alignment
Feedback filters.


816
00:35:11,026 --> 00:35:13,196
They're pretty simple
APIs, real easy to add it


817
00:35:13,196 --> 00:35:15,716
to your application and
existing tracking loops,


818
00:35:16,086 --> 00:35:17,566
provided a consistent
feel across app,


819
00:35:17,796 --> 00:35:20,846
we look at the velocity of
the cursor, for example,


820
00:35:21,076 --> 00:35:23,696
so that we don't do snapping
if the user is moving quickly,


821
00:35:23,696 --> 00:35:24,286
because we don't want


822
00:35:24,286 --> 00:35:26,406
to do Alignment Feedback
either at that point.


823
00:35:26,966 --> 00:35:28,576
That's not what the
user is trying to do,


824
00:35:28,996 --> 00:35:30,456
we look at the modifier values,


825
00:35:30,936 --> 00:35:32,686
and so this will
provide a consistent feel


826
00:35:32,686 --> 00:35:35,366
across all applications that are
using the system-wide Alignment


827
00:35:35,366 --> 00:35:36,006
Feedback API.


828
00:35:36,976 --> 00:35:39,756
And you can use this for more
than just dragging a item;


829
00:35:40,106 --> 00:35:42,506
if you're doing a resize for
example or a size to fit,


830
00:35:42,676 --> 00:35:44,786
that's another good place to
use Alignment Feedback filter.


831
00:35:45,176 --> 00:35:47,566
It could be used in a
lot of different places.


832
00:35:48,016 --> 00:35:50,656
So that's everything you
need to know to be a knight.


833
00:35:50,656 --> 00:35:51,286
Congratulations.


834
00:35:51,286 --> 00:35:53,456
You're all knights in using
the Force Touch trackpad.


835
00:35:55,046 --> 00:35:56,976
Let's move on to
becoming masters.


836
00:35:57,506 --> 00:35:59,086
This is all about
controlling the force.


837
00:35:59,576 --> 00:36:01,316
This is about configuring
the trackpad


838
00:36:01,316 --> 00:36:04,526
so that it works appropriately
for your custom situations


839
00:36:04,736 --> 00:36:06,366
and manually providing
haptic feedback.


840
00:36:06,986 --> 00:36:11,616
Let's go back to
that drawing example.


841
00:36:12,776 --> 00:36:14,716
You start to do a
drawing and you press


842
00:36:14,716 --> 00:36:16,906
on the Force Touch trackpad,
you get a Force click


843
00:36:17,106 --> 00:36:19,206
and that's not really
appropriate in your drawing.


844
00:36:19,206 --> 00:36:20,866
And as I mentioned earlier,
you don't want to try


845
00:36:20,866 --> 00:36:23,256
to combine the pressure
values from stage 1


846
00:36:23,256 --> 00:36:25,666
with with the pressure values
from stage 2, it's not going


847
00:36:25,666 --> 00:36:27,856
to be even during the
release, and the user's going


848
00:36:27,856 --> 00:36:29,726
to get this haptic feedback
in the middle of the drawing,


849
00:36:29,726 --> 00:36:31,106
that's not a good experience.


850
00:36:32,006 --> 00:36:33,406
So we want to configure
the trackpad


851
00:36:33,446 --> 00:36:37,876
to not provide Force click
actuations at all in that case.


852
00:36:37,876 --> 00:36:38,816
And this is what we can do


853
00:36:38,816 --> 00:36:40,236
with the pressure
configuration object.


854
00:36:40,526 --> 00:36:42,716
We initialize one with
a pressureBehavior,


855
00:36:43,386 --> 00:36:45,776
check out the header file
and the documentation,


856
00:36:45,776 --> 00:36:49,106
check out NSEvent.h,
there's a lot of description


857
00:36:49,106 --> 00:36:50,586
in the header file
about each of these,


858
00:36:50,586 --> 00:36:51,576
I'm not going to cover them all.


859
00:36:51,936 --> 00:36:54,656
The default one is
DeepClick, that's what happens


860
00:36:54,656 --> 00:36:55,606
by default in the system.


861
00:36:55,606 --> 00:36:57,526
In this case we want
PrimaryGeneric;


862
00:36:57,946 --> 00:37:00,466
PrimaryGeneric is a
one-stage gesture,


863
00:37:00,786 --> 00:37:03,386
so the user won't get
a Force click actuation


864
00:37:03,386 --> 00:37:04,496
when they're drawing,


865
00:37:04,966 --> 00:37:08,686
and it provides the largest
dynamic range of user input


866
00:37:08,686 --> 00:37:11,596
of their force on the trackpad,
mapping that back out to you


867
00:37:11,596 --> 00:37:12,966
and to pressure between 0 and 1.


868
00:37:13,256 --> 00:37:15,686
It's the best one to use
for drawing and for a lot


869
00:37:15,686 --> 00:37:18,386
of other situations, and
then check the header files


870
00:37:18,386 --> 00:37:21,416
for the descriptions of
the other behaviors to see


871
00:37:21,416 --> 00:37:22,966
which one is appropriate
for your situation.


872
00:37:23,436 --> 00:37:25,976
Once you have a pressure
configuration,


873
00:37:25,976 --> 00:37:26,656
you just call set.


874
00:37:26,806 --> 00:37:29,506
The trackpad is now configured
in this new configuration


875
00:37:29,876 --> 00:37:32,556
and everything is great
-- with some caveats.


876
00:37:33,206 --> 00:37:34,866
You can only set the trackpad


877
00:37:34,866 --> 00:37:37,786
into a different configuration
during a mouse drag,


878
00:37:37,966 --> 00:37:40,046
so on mouse down, you
check the mouse location,


879
00:37:40,046 --> 00:37:41,406
if it is supposed to be changed


880
00:37:41,406 --> 00:37:42,726
for this specific
mouse location,


881
00:37:43,526 --> 00:37:45,646
create a pressure
configuration, you call the set,


882
00:37:45,646 --> 00:37:47,016
and the trackpad is
going to be changed.


883
00:37:47,896 --> 00:37:50,586
You need to realize that
you're racing the user here.


884
00:37:51,306 --> 00:37:55,736
The user might move the cursor
over your view, go immediately


885
00:37:55,736 --> 00:37:57,386
to a Force click,
release the mouse,


886
00:37:57,386 --> 00:37:58,886
and you didn't even
get the mouse down yet,


887
00:37:58,986 --> 00:38:02,026
perhaps you're being paged
in from virtual memory


888
00:38:02,026 --> 00:38:03,386
and your app is not responsive.


889
00:38:04,316 --> 00:38:07,386
You can try to set the pressure,
the trackpad configuration


890
00:38:07,386 --> 00:38:10,766
at this point but the user is
already completed their gesture,


891
00:38:11,026 --> 00:38:12,106
and it won't take effect.


892
00:38:12,676 --> 00:38:17,066
When you do set the
trackpad configuration it is


893
00:38:17,066 --> 00:38:19,336
automatically reset back
to the system default


894
00:38:19,336 --> 00:38:21,536
when the user ends the gesture
as well, so you don't have


895
00:38:21,536 --> 00:38:22,496
to worry about unsetting it.


896
00:38:23,256 --> 00:38:26,516
But this isn't ideal for most
situations; it is really useful


897
00:38:26,516 --> 00:38:30,126
when you need to decide at
the very last minute based


898
00:38:30,126 --> 00:38:32,086
on the mouse location what
the configuration should be.


899
00:38:33,016 --> 00:38:37,516
Instead, just set the pressure
configuration on NSView.


900
00:38:38,366 --> 00:38:40,226
Create a pressure
configuration ahead of time,


901
00:38:40,426 --> 00:38:42,076
set it as the pressure
configuration property


902
00:38:42,076 --> 00:38:44,346
on the NSView and the
system will go ahead and set


903
00:38:44,346 --> 00:38:46,396
up the trackpad before
mouse down even occurs.


904
00:38:46,396 --> 00:38:48,776
In fact, the system can
configure the trackpad


905
00:38:48,776 --> 00:38:50,766
to this configuration even


906
00:38:50,766 --> 00:38:52,566
if your app isn't
being responsive yet.


907
00:38:53,086 --> 00:38:56,436
Now the user can go ahead and
interact with your application,


908
00:38:56,436 --> 00:38:57,856
you didn't even get
the mouse down yet,


909
00:38:58,146 --> 00:38:59,956
but they didn't feel the
Force click because it is


910
00:38:59,956 --> 00:39:04,066
in the PrimaryGeneric
behavior and the events you get


911
00:39:04,066 --> 00:39:06,546
in from the application,
from the system at that point


912
00:39:07,066 --> 00:39:08,476
when you finally
do get your events


913
00:39:08,476 --> 00:39:12,076
if you're not being responsive,
don't have Force click in them,


914
00:39:12,076 --> 00:39:12,996
they don't go to stage 2.


915
00:39:12,996 --> 00:39:16,386
Let's talk a little bit
about haptic feedback.


916
00:39:18,176 --> 00:39:20,346
Haptic feedback should
be used sparingly.


917
00:39:20,726 --> 00:39:22,056
This is for subtle interactions.


918
00:39:22,056 --> 00:39:23,996
We just want the trackpad
to just feel right, right?


919
00:39:25,166 --> 00:39:26,706
So when the user is
trying to align something,


920
00:39:26,706 --> 00:39:28,536
they get that haptic
feedback and it feels great,


921
00:39:28,616 --> 00:39:30,686
we're not trying to massage
the user's finger here,


922
00:39:31,016 --> 00:39:33,036
we just want this to
be subtle interaction.


923
00:39:33,876 --> 00:39:37,126
In fact, if the user
goes back to one


924
00:39:37,126 --> 00:39:38,906
of our older trackpads
we want them


925
00:39:38,906 --> 00:39:41,356
to maybe not even realize
why something is wrong


926
00:39:41,356 --> 00:39:42,926
but it just doesn't
quite feel right.


927
00:39:43,386 --> 00:39:47,526
That's the point of using the
haptic feedback is doing it


928
00:39:47,766 --> 00:39:50,056
appropriately when the user
is trying to do something


929
00:39:50,056 --> 00:39:52,246
to give them that little
bit of subtle feedback,


930
00:39:52,416 --> 00:39:53,896
oh yes, this is just right.


931
00:39:53,896 --> 00:39:55,256
This is how it should
have always been,


932
00:39:55,256 --> 00:39:55,986
and I didn't know that.


933
00:39:56,706 --> 00:39:57,586
Subtle interactions.


934
00:39:58,596 --> 00:40:00,356
You just ask the
NSHapticFeedbackManager


935
00:40:00,356 --> 00:40:02,976
for the defaultPerformer, always
ask for the defaultPerformer


936
00:40:02,976 --> 00:40:05,826
because it can change
based on the input device


937
00:40:06,226 --> 00:40:09,506
and the user's preferences.


938
00:40:10,196 --> 00:40:11,886
You ask to perform
the feedback pattern


939
00:40:11,886 --> 00:40:14,486
at a specific performance
time, we have three --


940
00:40:14,956 --> 00:40:17,476
three patterns: Generic,
Alignment, and LevelChange.


941
00:40:17,666 --> 00:40:19,396
Alignment can be used for
a lot of different things,


942
00:40:19,886 --> 00:40:23,896
even if you're just rotating
a photo to align a horizon,


943
00:40:23,896 --> 00:40:26,196
for example, you can go ahead
and use alignment for that.


944
00:40:26,566 --> 00:40:30,226
LevelChange is what NSButton
uses in the multilevel mode;


945
00:40:30,226 --> 00:40:32,606
it will provide haptic
feedback as the levels change.


946
00:40:33,306 --> 00:40:35,856
If those two don't sufficiently
describe what you're trying


947
00:40:35,856 --> 00:40:37,916
to do, then go ahead
and just use generic.


948
00:40:39,066 --> 00:40:42,166
You want your haptic feedback
to perform synchronously


949
00:40:42,166 --> 00:40:44,246
with what's going on
the screen so that


950
00:40:44,316 --> 00:40:45,656
by default that's
the DrawCompleted.


951
00:40:45,656 --> 00:40:47,626
If you're using Cocoa
drawing or core animation,


952
00:40:47,876 --> 00:40:50,856
you just use a DrawCompleted
performance time


953
00:40:50,996 --> 00:40:54,066
and this will just automatically
synchronize them for you


954
00:40:54,066 --> 00:40:57,106
so that you can determine your
haptic feedbacks during event


955
00:40:57,106 --> 00:40:59,836
processing and your drawing can
just concentrate on drawing.


956
00:41:00,306 --> 00:41:02,396
If you're using Medal
or OpenGL directly,


957
00:41:02,666 --> 00:41:05,816
then you can just use Now and
as things update on the screen,


958
00:41:06,126 --> 00:41:09,336
you will go ahead and need to
make sure that you line them


959
00:41:09,336 --> 00:41:10,956
up so that they occur
simultaneously.


960
00:41:12,126 --> 00:41:13,086
That's all there is.


961
00:41:13,276 --> 00:41:15,746
You're now all masters in
using the Force Touch trackpad.


962
00:41:16,356 --> 00:41:18,376
I can't wait to see what
you do with these things


963
00:41:18,376 --> 00:41:20,966
in your application, we have
covered Table Row Actions,


964
00:41:20,966 --> 00:41:24,326
accelerator buttons,
Spring Loading, we've talked


965
00:41:24,516 --> 00:41:26,516
about how the force
flows through the system,


966
00:41:26,756 --> 00:41:29,776
doing Alignment Feedback, and
finally controlling the trackpad


967
00:41:29,776 --> 00:41:32,206
and configuring it for
your specific needs.


968
00:41:32,616 --> 00:41:35,596
There's a lot that
you can do here.


969
00:41:35,796 --> 00:41:37,856
That little app that I
did earlier in my demo,


970
00:41:37,856 --> 00:41:39,786
it's called Force Touch
Catalog, you can download


971
00:41:39,786 --> 00:41:40,526
that and check that out.


972
00:41:40,526 --> 00:41:43,306
We also have an alignment
guide sample application,


973
00:41:43,306 --> 00:41:44,796
so that's really
great to use as well.


974
00:41:44,796 --> 00:41:49,066
I suggest that you also
check out the What's New


975
00:41:49,066 --> 00:41:50,876
in Web Development
in WebKit and Safari


976
00:41:50,876 --> 00:41:54,676
so you can learn how
Safari is exposing pressure


977
00:41:54,676 --> 00:41:58,246
in the web environment.


978
00:41:59,596 --> 00:42:03,496
We have a lab coming up
right after this, the Cocoa


979
00:42:03,496 --> 00:42:06,156
and Force Touch and Gesture
lab; I will of course be there.


980
00:42:06,426 --> 00:42:08,926
I'm real excited to hear your
ideas on how to use Force Touch


981
00:42:08,926 --> 00:42:12,046
in your applications or
even to show me anything


982
00:42:12,046 --> 00:42:14,726
that you have already done,
I'm really excited to see that


983
00:42:14,726 --> 00:42:15,666
and to talk about it with you.


984
00:42:15,666 --> 00:42:18,036
Please come find me in the
lab right after this session.


985
00:42:18,776 --> 00:42:19,656
Thank you very much.


986
00:42:19,656 --> 00:42:20,396
Enjoy the rest of the show.


987
00:42:21,516 --> 00:42:24,500
[Applause]

