1
00:00:07,516 --> 00:00:21,546
[ Music ]


2
00:00:22,046 --> 00:00:23,976
>> Good morning everyone,
welcome.


3
00:00:24,516 --> 00:00:27,746
[ Applause ]


4
00:00:28,246 --> 00:00:31,146
Thank you for attending this
session, my name is Sara Raid,


5
00:00:31,216 --> 00:00:33,366
I'm an internationalization
software engineer,


6
00:00:33,716 --> 00:00:36,306
and today with my
colleague, Joaquim Lobo Silva,


7
00:00:36,386 --> 00:00:38,976
we're going to talk about
international user interfaces.


8
00:00:39,336 --> 00:00:40,166
So let's get started.


9
00:00:40,836 --> 00:00:46,796
At Apple we support over 40
localizations in our software


10
00:00:47,126 --> 00:00:50,346
and every language has its
own challenges, but today,


11
00:00:50,346 --> 00:00:53,626
in particular, we are going to
talk about two specific right


12
00:00:53,626 --> 00:00:55,176
to left languages
that we support


13
00:00:55,606 --> 00:00:57,716
which are Arabic and Hebrew.


14
00:00:58,476 --> 00:01:01,096
So this language has
presented a unique challenge


15
00:01:01,706 --> 00:01:05,666
in building your apps and
that's because of the nature


16
00:01:05,666 --> 00:01:06,886
of the writing direction.


17
00:01:07,496 --> 00:01:10,096
So why are we talking about
these languages specifically?


18
00:01:10,606 --> 00:01:15,006
With over 400 million
people in the Middle East,


19
00:01:15,376 --> 00:01:16,896
this really is a growing market.


20
00:01:17,556 --> 00:01:20,456
So just last year, we
opened two Apple Stores


21
00:01:20,456 --> 00:01:24,116
in the UAE these are images
from the opening in Abu Dhabi,


22
00:01:25,266 --> 00:01:31,986
Dubai and just few weeks ago,
we launched Apple.com in the UAE


23
00:01:32,176 --> 00:01:33,656
in Arabic for the first time.


24
00:01:33,936 --> 00:01:37,686
This is really, really exciting,
but what does it mean to you?


25
00:01:38,446 --> 00:01:43,146
As a developer, you have growth
opportunities in this market


26
00:01:43,666 --> 00:01:45,226
and designing word ready apps


27
00:01:45,226 --> 00:01:47,636
for your customers
is really important.


28
00:01:48,386 --> 00:01:50,896
So in this session we're mainly
going to talk about right


29
00:01:50,896 --> 00:01:54,526
to left languages, but if you
are interested in learning more


30
00:01:54,526 --> 00:01:57,246
about designing word ready
apps, check out these two talks:


31
00:01:57,516 --> 00:01:59,856
Inclusive App Design,
which focuses more


32
00:01:59,856 --> 00:02:02,206
on the human interface
aspect of it


33
00:02:02,556 --> 00:02:05,306
and Internationalization Best
Practices if you'd like to learn


34
00:02:05,306 --> 00:02:06,616
about internationalization.


35
00:02:08,036 --> 00:02:13,476
Last year, on iOS 9 we extended
internationalization support


36
00:02:13,476 --> 00:02:16,076
to fully support languages
written from right to left.


37
00:02:16,456 --> 00:02:20,066
And just after that, we
included native Hebrew


38
00:02:20,066 --> 00:02:23,466
and Arabic localizations
into watchOS 2.1.


39
00:02:24,446 --> 00:02:27,846
This year I'm happy to say
that we have been working


40
00:02:27,846 --> 00:02:30,396
on redesigning macOS
for this market.


41
00:02:31,406 --> 00:02:33,856
So now, I would like to
walk you through some,


42
00:02:34,796 --> 00:02:37,416
the agenda to see what we
going to cover in this session.


43
00:02:38,466 --> 00:02:41,916
So first, Joaquim is going
to start with a quick recap


44
00:02:41,916 --> 00:02:45,756
of the APIs we introduced last
year, then he's going to talk


45
00:02:45,756 --> 00:02:48,856
about what's new in iOS
X with image handling,


46
00:02:48,856 --> 00:02:52,816
and how you can evaluate
layout direction.


47
00:02:54,176 --> 00:02:58,056
He will finish up with
watchOS support, then,


48
00:02:58,386 --> 00:03:02,916
I am going to talk about what's
new in macOS, and what's new


49
00:03:02,916 --> 00:03:06,636
in text support and how can you
handle displaying mixed text


50
00:03:06,636 --> 00:03:08,206
correctly in your applications.


51
00:03:08,656 --> 00:03:11,206
And with that, I'm going
to hand it over to Joaquim,


52
00:03:11,346 --> 00:03:13,776
to talk about iOS, Joaquim.


53
00:03:14,516 --> 00:03:17,546
[ Applause ]


54
00:03:18,046 --> 00:03:20,046
>> Alright, thank you
Sara, good morning.


55
00:03:20,136 --> 00:03:21,076
Thank you all for coming.


56
00:03:21,756 --> 00:03:24,646
So, my name is Joaquim,
and I'll get things started


57
00:03:24,736 --> 00:03:27,216
by talking about iOS.


58
00:03:27,396 --> 00:03:32,916
So as Sara mentioned, last year
at WWDC we announced full right


59
00:03:32,916 --> 00:03:36,706
to left UISupport on iOS 9
across the entire platform.


60
00:03:36,916 --> 00:03:40,096
When your users run their apps


61
00:03:40,096 --> 00:03:43,116
in these languages they
expect your UI to adapt


62
00:03:43,326 --> 00:03:44,786
to the nature of
these languages.


63
00:03:45,276 --> 00:03:49,526
UIKit does a lot of the work
for you, all of its controls


64
00:03:49,526 --> 00:03:51,606
and views do the correct
thing when running


65
00:03:51,606 --> 00:03:52,966
in a right to left context.


66
00:03:54,516 --> 00:03:57,296
Managing the layout between
these views can be done using


67
00:03:57,296 --> 00:03:57,876
auto layout.


68
00:03:57,946 --> 00:04:00,146
And this can either
mean high level elements


69
00:04:00,146 --> 00:04:03,596
such as UIStack view new in iOS
9, also announced last year,


70
00:04:04,636 --> 00:04:08,526
which lets you easily model
and maintain your UI in terms


71
00:04:09,306 --> 00:04:10,806
of easy to use horizontal


72
00:04:10,806 --> 00:04:12,386
and vertical groups
that can be nested.


73
00:04:12,846 --> 00:04:15,096
And the nice thing
about stack view is


74
00:04:15,096 --> 00:04:17,766
that it manages auto
layout constraints for you.


75
00:04:18,666 --> 00:04:20,755
And in particular, for right


76
00:04:20,755 --> 00:04:23,336
to left languages it manages
leading and trailing constraints


77
00:04:23,336 --> 00:04:25,846
and what these are, are
left and right properties


78
00:04:26,226 --> 00:04:29,676
that change automatically to
right and left when running


79
00:04:29,676 --> 00:04:30,906
in a right to left context.


80
00:04:33,246 --> 00:04:36,906
Having said that, it's
important to note that just


81
00:04:36,906 --> 00:04:39,256
because these languages are
written and read from right


82
00:04:39,256 --> 00:04:42,216
to left, this doesn't mean
that every single control


83
00:04:42,216 --> 00:04:45,466
in an aspect of your app should
strictly follow the writing


84
00:04:45,466 --> 00:04:46,746
direction of these languages.


85
00:04:47,306 --> 00:04:50,706
There are nuances and some
exceptions even to keep in mind


86
00:04:50,706 --> 00:04:52,606
when designing for
these languages.


87
00:04:52,956 --> 00:04:56,506
So one example up above is
playback UI, anything related


88
00:04:56,506 --> 00:05:01,006
to playback such as rewind and
fast forward, video and audio,


89
00:05:01,006 --> 00:05:03,156
timeline scrubbers, these
should all stay the same


90
00:05:03,156 --> 00:05:06,916
across layout direction.


91
00:05:07,096 --> 00:05:09,596
Another example is
something we call spatial UI,


92
00:05:09,746 --> 00:05:12,036
this can either refer
to clusters of controls


93
00:05:12,036 --> 00:05:14,946
that don't have a specific
directionality associated


94
00:05:14,946 --> 00:05:17,776
to them, things like left
and right text alignment


95
00:05:17,776 --> 00:05:19,176
which should obviously stay


96
00:05:19,176 --> 00:05:21,686
in the same position
across all languages.


97
00:05:22,056 --> 00:05:24,246
And also the example above
which is the compass,


98
00:05:24,276 --> 00:05:26,396
so things that have a physical


99
00:05:26,396 --> 00:05:29,396
or geographical correspondence
should also stay the same,


100
00:05:29,396 --> 00:05:32,276
north, east and west don't
change in right to left.


101
00:05:32,916 --> 00:05:37,436
On iOS we have semantic content
attribute that helps you manage


102
00:05:37,766 --> 00:05:40,966
and in turn, determine and
fine-tune the layout flow


103
00:05:40,966 --> 00:05:42,936
of individual views
and their sub views.


104
00:05:43,746 --> 00:05:46,756
This exposes an enum it's
a property on UIView,


105
00:05:46,756 --> 00:05:49,506
like I said before, and
it's got all the cases


106
00:05:49,506 --> 00:05:51,396
that I just mentioned,
so one for playback,


107
00:05:51,886 --> 00:05:55,796
one for spatial UI, we have
self-explanatory force direction


108
00:05:55,796 --> 00:05:58,576
cases as well, in
addition to unspecified


109
00:05:58,576 --> 00:05:59,836
which is the default value.


110
00:05:59,916 --> 00:06:02,816
And this is probably where most
of your views will fall into.


111
00:06:03,416 --> 00:06:08,996
So, if you want to look
at these in more detail


112
00:06:08,996 --> 00:06:11,916
and if you're also new to right
to left UI design in general,


113
00:06:11,916 --> 00:06:14,576
I highly recommend you check
out this talk from last year,


114
00:06:14,656 --> 00:06:16,906
New UIKit Ssupport
for International UI.


115
00:06:17,216 --> 00:06:19,546
It goes into all of these
concepts into great detail


116
00:06:19,546 --> 00:06:22,866
and also talks about some of
the new API, or not new anymore,


117
00:06:22,866 --> 00:06:26,736
some of the API we added in
iOS 9 for right to left UI.


118
00:06:27,416 --> 00:06:30,106
So that's a recap of what
we have right now in iOS


119
00:06:30,106 --> 00:06:33,796
for layout, and with that I'd
like to move on over to images.


120
00:06:34,916 --> 00:06:38,166
So images for right to left are
interesting because they tend


121
00:06:38,166 --> 00:06:40,046
to fall into one of
three categories.


122
00:06:41,876 --> 00:06:45,986
The first one is universal
images, so these are probably


123
00:06:45,986 --> 00:06:49,026
where most of your images will
fall into, they're just artwork


124
00:06:49,026 --> 00:06:52,216
or icons, and they don't need
any special consideration


125
00:06:52,216 --> 00:06:54,476
for any language or
writing direction.


126
00:06:54,476 --> 00:06:58,266
So they just stay the same, this
is of course familiar to you


127
00:06:58,726 --> 00:07:01,756
as regular UIImage or
setting a name on a image view


128
00:07:01,756 --> 00:07:02,446
and Interface Builder.


129
00:07:04,496 --> 00:07:06,706
The second category is images


130
00:07:06,706 --> 00:07:09,216
that do have the direction
associated to them.


131
00:07:09,496 --> 00:07:12,576
So whether this is
a representation


132
00:07:12,576 --> 00:07:16,346
of navigation arrows such as the
Back button in navigation bars,


133
00:07:16,676 --> 00:07:19,736
or the detail disclosure
or disclosure indicator


134
00:07:19,736 --> 00:07:22,446
on UITableView cells,
or in this case,


135
00:07:22,446 --> 00:07:24,476
a simplified representation
of text,


136
00:07:24,946 --> 00:07:26,816
these should be mirrored
in right to left.


137
00:07:26,816 --> 00:07:29,556
And simply flipping the image
will produce the correct result


138
00:07:29,916 --> 00:07:32,236
for right to left, so in this
case I just flip the image,


139
00:07:32,236 --> 00:07:34,386
and now bullets are
in the correct place.


140
00:07:35,056 --> 00:07:39,216
On iOS you can do this
using imageFlippedForRightTo


141
00:07:39,216 --> 00:07:42,656
LeftLlayoutDirection, we
call this method on a UIImage


142
00:07:42,826 --> 00:07:45,126
and the object returned
by it, when displayed


143
00:07:45,126 --> 00:07:48,106
in the UIImage view, does the
correct thing automatically


144
00:07:48,376 --> 00:07:50,406
if it's running in a
right to left context.


145
00:07:52,956 --> 00:07:56,466
Lastly, the third
category is images


146
00:07:56,466 --> 00:07:59,696
that do have the direction
associated to them but,


147
00:07:59,916 --> 00:08:01,746
they are relatively complex


148
00:08:01,776 --> 00:08:04,686
such that simply flipping
them would actually produce an


149
00:08:04,756 --> 00:08:06,946
incorrect result
for right to left.


150
00:08:07,316 --> 00:08:09,336
So in this case I have
that same bulleted list,


151
00:08:09,896 --> 00:08:11,676
but instead of bullets
I have checkmarks


152
00:08:11,676 --> 00:08:14,046
and when I flip the image
the checkmarks are now


153
00:08:14,046 --> 00:08:16,796
in the correct place,
but they're also flipped


154
00:08:16,976 --> 00:08:18,336
and they should actually
stay the same


155
00:08:18,336 --> 00:08:19,666
in this example for
right to left.


156
00:08:20,476 --> 00:08:23,956
So really what I need here is
two separate images entirely,


157
00:08:23,956 --> 00:08:25,496
one for each layout direction.


158
00:08:25,496 --> 00:08:28,576
So I can fine-tune my
image for right to left


159
00:08:28,676 --> 00:08:30,146
and now it's displaying
correctly,


160
00:08:31,026 --> 00:08:32,405
but now I have two
different images.


161
00:08:32,566 --> 00:08:35,466
And up until now the way
you would do this on iOS


162
00:08:35,466 --> 00:08:36,676
to display the correct one


163
00:08:36,676 --> 00:08:38,856
at runtime is really
with a runtime check.


164
00:08:39,275 --> 00:08:42,186
You would use our semantic
content attribute API to check


165
00:08:42,186 --> 00:08:44,896
for your layout direction and
then load the correct image


166
00:08:44,896 --> 00:08:49,146
from your bundle at runtime.


167
00:08:49,146 --> 00:08:51,546
On iOS X we're changing
things up a little bit,


168
00:08:51,546 --> 00:08:54,946
and we're starting with the
deprecation of image flip


169
00:08:54,946 --> 00:08:56,376
for right to left
layout direction.


170
00:08:57,206 --> 00:08:59,606
And with it we're
introducing a new concept


171
00:08:59,676 --> 00:09:01,346
that will let you do all three


172
00:09:01,346 --> 00:09:04,696
of these things using
just regular UIImages


173
00:09:04,846 --> 00:09:06,426
or image names in
Interface Builder.


174
00:09:07,156 --> 00:09:10,156
Introducing, brand new,
directional image assets


175
00:09:10,366 --> 00:09:12,496
in Xcode 8 for your
asset catalogs.


176
00:09:12,986 --> 00:09:14,816
Thank you.


177
00:09:15,516 --> 00:09:17,546
[ Applause ]


178
00:09:18,046 --> 00:09:19,486
So, what does this mean?


179
00:09:20,076 --> 00:09:24,006
So your image assets, in Xcode,
you will now have a new concept


180
00:09:24,006 --> 00:09:26,986
and a new property that you
can set, it's called direction


181
00:09:27,596 --> 00:09:30,186
and the values that you
can set echo the concepts


182
00:09:30,226 --> 00:09:31,666
that I mentioned in
the previous slide.


183
00:09:31,666 --> 00:09:34,506
So an image can either
have a fixed direction,


184
00:09:35,076 --> 00:09:38,506
you can specify also
that an image is designed


185
00:09:38,506 --> 00:09:40,896
for one layout direction
and that it should mirror


186
00:09:40,896 --> 00:09:43,046
for the other, either from
left to right to right


187
00:09:43,046 --> 00:09:44,246
to left or vice versa.


188
00:09:44,246 --> 00:09:49,266
Or you can simply specify
two different images right


189
00:09:49,266 --> 00:09:51,636
in your asset catalogs,
one for each direction.


190
00:09:52,246 --> 00:09:56,426
Now these are image assets and
you might already be familiar


191
00:09:56,426 --> 00:09:59,706
with the technology for other
kinds of image specialization


192
00:09:59,706 --> 00:10:02,966
such as different
pixel densities or for


193
00:10:02,966 --> 00:10:04,356
across different platforms.


194
00:10:04,896 --> 00:10:07,736
So really this is the same
concept and all you have


195
00:10:07,766 --> 00:10:10,476
to do is either set an
image in Interface Builder


196
00:10:10,826 --> 00:10:15,816
or load it using
UIImage, image named.


197
00:10:16,046 --> 00:10:19,826
And with that, I'd love
to show you a demo.


198
00:10:20,226 --> 00:10:26,026
Alright so, so I have
here a very simple app


199
00:10:26,656 --> 00:10:30,166
and let me just run it once
to show you how it looks like.


200
00:10:31,086 --> 00:10:35,816
It's called Flags and in
true international fashion,


201
00:10:35,816 --> 00:10:38,736
of course it's a
flag quiz game, yay.


202
00:10:39,256 --> 00:10:42,576
So, this is pretty
straightforward,


203
00:10:42,576 --> 00:10:44,396
it's a lot of fun in groups,


204
00:10:44,476 --> 00:10:47,856
and what you can see
here is very simple UI.


205
00:10:47,856 --> 00:10:50,186
So I've got here the
flag that I should guess


206
00:10:50,186 --> 00:10:52,286
and I have a Reveal
button down at the top,


207
00:10:52,286 --> 00:10:54,586
does anybody know what
this one is by any chance?


208
00:10:55,016 --> 00:10:57,736
I know it's Friday,
early, 9 a.m. yeah?


209
00:10:58,016 --> 00:10:58,966
Yeah, alright, I heard,


210
00:10:59,306 --> 00:11:00,876
I'm hearing France a
lot, that's good, cool.


211
00:11:01,136 --> 00:11:03,166
Okay, so thank you.


212
00:11:03,396 --> 00:11:07,796
We also have two arrows,
so one to go forward


213
00:11:08,226 --> 00:11:10,176
for the next question
and one to go back.


214
00:11:10,566 --> 00:11:14,176
And this is all done using
auto layout constraints


215
00:11:14,176 --> 00:11:16,006
and this is a vertical
stack view as well.


216
00:11:16,336 --> 00:11:18,136
Anybody know what this one is?


217
00:11:18,646 --> 00:11:22,046
Oh, wow, okay, awesome,
listen to that, okay.


218
00:11:22,746 --> 00:11:25,416
Sweet, yeah, that's my
home country, Portugal, so,


219
00:11:25,526 --> 00:11:26,596
you get the idea, right?


220
00:11:27,486 --> 00:11:31,436
So, I'm thinking of adding right
to left support to this app.


221
00:11:32,166 --> 00:11:35,576
Now I don't speak a word of
any language that happens


222
00:11:35,576 --> 00:11:38,206
to be written and read in
right to left, but if I want


223
00:11:38,206 --> 00:11:40,826
to see how my app would
look like, I don't have to.


224
00:11:41,606 --> 00:11:43,476
Xcode allows me to
simulate a right


225
00:11:43,476 --> 00:11:45,696
to left environment
right from itself.


226
00:11:45,696 --> 00:11:50,926
So all I have to do is go to
edit my scheme, so up here


227
00:11:50,926 --> 00:11:53,016
and edit the scheme
right at the top.


228
00:11:54,036 --> 00:11:57,076
So this drops down
and with run selected,


229
00:11:57,386 --> 00:11:59,016
I have Options tab
here at the top.


230
00:12:00,066 --> 00:12:03,636
And over here I have an
application language override.


231
00:12:04,526 --> 00:12:06,996
So this lists my
supported localizations


232
00:12:06,996 --> 00:12:08,236
which are just English
at the moment


233
00:12:08,236 --> 00:12:10,926
but I could also pick a right
to left pseudo language.


234
00:12:11,346 --> 00:12:13,566
What this is going to do
is it's going to run my app


235
00:12:13,876 --> 00:12:17,416
in my development language which
is English, but it's also going


236
00:12:17,416 --> 00:12:19,246
to make the UI think
that it's running


237
00:12:19,246 --> 00:12:20,816
in a right to left environment.


238
00:12:21,336 --> 00:12:26,846
So I can just do that,
close, and rerun the app.


239
00:12:31,476 --> 00:12:33,226
Yep. So let me start
the game again.


240
00:12:33,466 --> 00:12:35,526
So already we're seeing
a few things right,


241
00:12:35,526 --> 00:12:37,476
the navigation bar is
doing the correct thing,


242
00:12:37,476 --> 00:12:40,016
it's showing the Back
button in the right place.


243
00:12:41,266 --> 00:12:43,566
And my UI largely
looks the same,


244
00:12:43,806 --> 00:12:45,406
except you might
have already noticed


245
00:12:45,406 --> 00:12:46,956
that the arrows are now pointing


246
00:12:46,956 --> 00:12:49,056
at each other which,
looks kind of wrong.


247
00:12:49,656 --> 00:12:52,456
They're actually in the
correct place, so forward is now


248
00:12:52,456 --> 00:12:54,386
on the left, which is
correct for right to left.


249
00:12:54,836 --> 00:12:57,296
But the images themselves
have not adapted,


250
00:12:57,536 --> 00:12:59,286
so I need to do that.


251
00:12:59,916 --> 00:13:02,876
Now all I have to do in Xcode
8 is go to my image assets,


252
00:13:02,966 --> 00:13:04,896
so I'm going to go ahead
and select them here.


253
00:13:06,796 --> 00:13:09,526
And you'll notice that I
have two different images,


254
00:13:09,526 --> 00:13:11,756
one for the back arrow,
and one for the forward.


255
00:13:12,096 --> 00:13:14,986
And I'm going to go
here in the inspector


256
00:13:14,986 --> 00:13:17,906
and select this new
direction property and instead


257
00:13:17,906 --> 00:13:21,116
of it being a fixed image,
it's a left to right image


258
00:13:21,336 --> 00:13:23,756
that mirrors for the
opposite layout direction.


259
00:13:24,496 --> 00:13:29,656
I'm going to go do the same
for the forward arrow, whoops,


260
00:13:29,656 --> 00:13:30,696
just so you can see that,


261
00:13:30,796 --> 00:13:33,466
left to right mirrors
instead of it being fixed.


262
00:13:33,636 --> 00:13:35,766
And now let me just
run my app again,


263
00:13:38,456 --> 00:13:41,146
and see how it looks like.


264
00:13:47,146 --> 00:13:48,376
Cool, let's start the game.


265
00:13:49,006 --> 00:13:51,066
Alright, that's all I had to do


266
00:13:51,576 --> 00:13:54,526
to now completely
support right to left.


267
00:13:54,526 --> 00:13:56,776
This is without an
extra single line


268
00:13:56,776 --> 00:13:59,036
of code dedicated
to right to left UI.


269
00:13:59,036 --> 00:14:03,016
Auto layout, stack views and
now image assets do the heavy


270
00:14:03,016 --> 00:14:04,666
lifting for you at runtime.


271
00:14:04,976 --> 00:14:07,776
And by the way, I forgot to
mention this is also backed


272
00:14:07,776 --> 00:14:12,376
by a page controller that
also, manages the gestures


273
00:14:12,376 --> 00:14:14,496
for going forward and
backwards, so I don't even have


274
00:14:14,496 --> 00:14:15,416
to worry about that either.


275
00:14:16,256 --> 00:14:22,056
So that's the demo on image
assets, let's go back to slides.


276
00:14:24,156 --> 00:14:26,816
Cool. So that's a brief
look at image assets


277
00:14:26,816 --> 00:14:28,076
in the new direction support.


278
00:14:29,296 --> 00:14:32,346
Now you can also do all of this


279
00:14:32,526 --> 00:14:35,296
if your images are not
directly stored in your bundle


280
00:14:35,296 --> 00:14:36,966
and say you're fetching
remote content


281
00:14:37,026 --> 00:14:39,306
that you know has a
particular directionality


282
00:14:39,396 --> 00:14:41,336
and you want display on your UI.


283
00:14:42,326 --> 00:14:43,956
So this is for images
not stored locally,


284
00:14:43,956 --> 00:14:46,476
you can associate these
images using trait collections


285
00:14:46,476 --> 00:14:47,096
in UIKit.


286
00:14:48,976 --> 00:14:51,456
We also have the
convenience method on UIImage


287
00:14:51,456 --> 00:14:54,336
that lets you specify that
one image is a counterpart


288
00:14:54,336 --> 00:14:56,286
of another and that
it should be mirrored


289
00:14:56,736 --> 00:14:59,066
for adding to an image asset.


290
00:15:00,076 --> 00:15:02,666
It's called imageWith
HorizontallyFlippedOrientation


291
00:15:03,046 --> 00:15:06,566
and it's probably simpler if
I just show it to you in code.


292
00:15:07,396 --> 00:15:10,596
So here it is and all I have
to do is create an image asset,


293
00:15:11,616 --> 00:15:14,216
in this particular example I'm
getting a left to right image


294
00:15:14,216 --> 00:15:15,746
from the remote source,
like a server.


295
00:15:17,046 --> 00:15:19,416
And my right to left image
is just that same object


296
00:15:19,716 --> 00:15:22,166
but horizontally flipped and
I'm using this new method


297
00:15:22,466 --> 00:15:23,276
on UIImage.


298
00:15:24,816 --> 00:15:27,126
Then just register each image,


299
00:15:27,246 --> 00:15:30,006
one for each layout direction
using a trait collection


300
00:15:30,496 --> 00:15:32,236
for left to right
and right to left.


301
00:15:32,626 --> 00:15:38,626
And then really you might
already be using or writing code


302
00:15:38,626 --> 00:15:41,866
that is similar to this, you
just get the image compatible


303
00:15:41,866 --> 00:15:44,756
with a trait collection
for say an image view.


304
00:15:44,756 --> 00:15:46,226
And this probably doesn't
even have to change


305
00:15:46,226 --> 00:15:49,466
because once again, it's the
same concept we just have a new


306
00:15:49,466 --> 00:15:51,356
directionality property
on top of it.


307
00:15:51,816 --> 00:15:57,896
So that's directional
images, new in Xcode 8, iOS X,


308
00:15:57,896 --> 00:16:00,306
and also watchOS and macOS.


309
00:16:01,636 --> 00:16:04,576
We have a new trait which
is, layout direction


310
00:16:04,576 --> 00:16:08,706
as you saw before, this is a
new UITrait collection in UIKit


311
00:16:08,706 --> 00:16:11,256
and because this is a new trait,
there are some things to keep


312
00:16:11,256 --> 00:16:14,396
in mind when it comes to
evaluating layout direction


313
00:16:14,396 --> 00:16:16,326
on iOS with this new concept.


314
00:16:17,136 --> 00:16:19,696
So let's say just as a very
simple example I have a UIView


315
00:16:19,696 --> 00:16:22,496
subclass and I'm doing
some very custom layout


316
00:16:22,496 --> 00:16:24,676
on layout sub views,
and it's represented


317
00:16:24,676 --> 00:16:26,096
by this very simple blue box.


318
00:16:27,996 --> 00:16:30,956
This is informed by semantic
content attribute whether it


319
00:16:30,956 --> 00:16:32,416
should be left to
right or right to left,


320
00:16:32,896 --> 00:16:34,846
and you can use our
API for this.


321
00:16:35,486 --> 00:16:37,316
Now if this is unspecified,


322
00:16:37,716 --> 00:16:40,686
semantic content attribute can
defer to your app environment


323
00:16:40,686 --> 00:16:43,086
and this can either be
part of a trait environment


324
00:16:43,546 --> 00:16:44,866
which has a trait collection,


325
00:16:45,206 --> 00:16:48,376
or the app's general user
interface layout direction.


326
00:16:49,936 --> 00:16:54,066
Now really, your UIView should
probably really only care


327
00:16:54,066 --> 00:16:56,366
about whether or not it should
be left to right or right


328
00:16:56,366 --> 00:16:57,646
to left, that's it, right.


329
00:16:57,646 --> 00:16:59,636
And this can get pretty
complicated real fast.


330
00:17:00,546 --> 00:17:03,746
So I'm happy to say that
on iOS X, you can do just


331
00:17:03,746 --> 00:17:07,076
that by using this new
property on UIView,


332
00:17:07,076 --> 00:17:09,326
it's a computed property
called effectiveUserInterface


333
00:17:09,326 --> 00:17:12,526
LayoutDirection and it takes all
of these concepts into account


334
00:17:12,846 --> 00:17:14,836
and tells you immediately
whether you should be laying


335
00:17:14,836 --> 00:17:17,175
yourself out in left to
right or right to left.


336
00:17:17,816 --> 00:17:22,876
If you're not using UIKit or
UIView In particular at all


337
00:17:22,876 --> 00:17:25,886
for your drawing, say you have
a game using a SceneKit view


338
00:17:25,886 --> 00:17:28,276
or a SpriteKit view, but
you still want to make use


339
00:17:28,276 --> 00:17:29,716
of these view controller
concepts.


340
00:17:29,986 --> 00:17:32,416
You can with this new
class method on UIView


341
00:17:32,856 --> 00:17:36,916
that gives you the same, that
same layout evaluation relative


342
00:17:36,916 --> 00:17:38,336
to a semantic content attribute.


343
00:17:38,786 --> 00:17:43,426
And that's a brief look
at what's new in iOS,


344
00:17:43,646 --> 00:17:47,046
so we saw brand new directional
image assets ready for use


345
00:17:47,046 --> 00:17:49,006
with Interface Builder
and regular UI images


346
00:17:49,286 --> 00:17:50,806
with no extra lines
of code needed


347
00:17:51,056 --> 00:17:52,116
for right to left support.


348
00:17:53,336 --> 00:17:55,066
You can do the same
thing with images


349
00:17:55,066 --> 00:17:56,756
that are not directly
stored in your bundle,


350
00:17:57,936 --> 00:17:59,756
and as a result we
are deprecating


351
00:17:59,756 --> 00:18:03,346
imageFlippedForRightToLeft
LayoutDirection in iOS X.


352
00:18:04,576 --> 00:18:06,986
We also just took a look at
the new convenience property


353
00:18:06,986 --> 00:18:10,506
on UIView for determining layout
direction in custom layouts,


354
00:18:11,096 --> 00:18:12,506
in addition to a class method


355
00:18:12,506 --> 00:18:14,966
that lets you achieve the
same thing in other contexts.


356
00:18:15,626 --> 00:18:18,456
So that's iOS, and now I'd


357
00:18:18,456 --> 00:18:21,306
like to move swiftly
on over to watchOS.


358
00:18:23,116 --> 00:18:27,676
So watchOS 2.1 added
Arabic and Hebrew


359
00:18:27,966 --> 00:18:29,606
as selectable system languages.


360
00:18:30,856 --> 00:18:33,126
And what this means
for your apps is


361
00:18:33,126 --> 00:18:36,596
that watchKit is now
right to left aware.


362
00:18:37,396 --> 00:18:39,616
So all watchKit elements
now do the right thing


363
00:18:39,616 --> 00:18:41,246
when running in Arabic
or Hebrew.


364
00:18:42,236 --> 00:18:44,156
We have an API that's
similar to iOS


365
00:18:44,266 --> 00:18:47,006
that lets you fine-tune
individual group


366
00:18:47,006 --> 00:18:48,796
or interface object instances.


367
00:18:49,386 --> 00:18:54,216
And it's important to note
also that, having said that,


368
00:18:54,216 --> 00:18:55,936
it's natural that it
should follow that,


369
00:18:56,006 --> 00:18:58,466
a lot of the design
concepts that we saw


370
00:18:58,466 --> 00:18:59,986
in iOS do apply on the watch.


371
00:18:59,986 --> 00:19:03,666
So, the idea of pushing and
popping interface controllers


372
00:19:03,666 --> 00:19:06,156
in their direction, these
should adapt for right to left


373
00:19:06,156 --> 00:19:08,336
and you should keep this
in mind if you have any UI


374
00:19:08,336 --> 00:19:09,946
that reflects this as well.


375
00:19:11,956 --> 00:19:15,906
Any horizontal layout that
prioritizes certain things first


376
00:19:15,906 --> 00:19:20,206
or has an ordering like showing
an image on a table view cell,


377
00:19:20,636 --> 00:19:22,946
and then a label, you
should also adapt.


378
00:19:23,916 --> 00:19:26,556
And, something very particular
to the watch, of course,


379
00:19:26,556 --> 00:19:28,376
is the idea and concept of time


380
00:19:28,436 --> 00:19:32,196
and in particular
clockwise and anti-clockwise.


381
00:19:32,196 --> 00:19:35,306
And this is going back to
those nuances and exceptions,


382
00:19:35,536 --> 00:19:38,176
if you have any radial
or clockwise


383
00:19:38,176 --> 00:19:40,616
and anti-clockwise UI
this should stay the same


384
00:19:40,806 --> 00:19:43,506
across layout directions, just
one of those things to keep


385
00:19:43,506 --> 00:19:46,296
in mind in addition to the
concepts that we talked about.


386
00:19:46,856 --> 00:19:49,786
So how do you do
this using the API?


387
00:19:50,076 --> 00:19:51,426
So like I said before,


388
00:19:51,426 --> 00:19:53,716
all interface objects now do
the right thing when running


389
00:19:53,716 --> 00:19:55,236
in right to left,
these are your buttons,


390
00:19:55,236 --> 00:19:56,556
your sliders and your switches.


391
00:19:58,226 --> 00:20:00,896
In addition to that,
the concept of direction


392
00:20:00,896 --> 00:20:03,406
and alignment also
change automatically.


393
00:20:03,406 --> 00:20:06,616
So this means that the direction
of horizontal interface groups


394
00:20:07,096 --> 00:20:11,166
and their alignment and also
alignment for any object


395
00:20:11,166 --> 00:20:13,496
in watchKit relative to
its parent also changes.


396
00:20:13,496 --> 00:20:16,876
So in the example, above
I have a very simple app


397
00:20:17,106 --> 00:20:18,766
with a horizontal
group up at the top


398
00:20:18,766 --> 00:20:20,236
with left alignment
and direction.


399
00:20:21,156 --> 00:20:23,366
And a vertical group at the
bottom with left alignment.


400
00:20:24,146 --> 00:20:27,906
When I run this app in Hebrew,
all of these change to right,


401
00:20:28,116 --> 00:20:29,766
so note the ordering
of the elements


402
00:20:29,766 --> 00:20:31,676
at the horizontal
interface group as well.


403
00:20:32,216 --> 00:20:35,836
We have semantic content
attribute just like on iOS


404
00:20:35,836 --> 00:20:37,886
with the same cases
that I talked


405
00:20:37,886 --> 00:20:40,806
about to help manage
individual interface,


406
00:20:40,806 --> 00:20:43,236
interface objects or groups.


407
00:20:43,856 --> 00:20:46,546
And seeing this in action
is really just as simple


408
00:20:46,726 --> 00:20:49,226
as any other property that you
would set on a watchKit object.


409
00:20:51,506 --> 00:20:53,996
If you're not using
watchKit to draw your UI,


410
00:20:53,996 --> 00:20:55,776
say you're using
SceneKit or SpriteKit,


411
00:20:55,776 --> 00:20:56,956
they're new in watchOS 3,


412
00:20:57,566 --> 00:21:00,296
you could still evaluate
a layout direction


413
00:21:00,576 --> 00:21:02,556
if you have a semantic
content attribute in mind.


414
00:21:02,556 --> 00:21:06,126
So here I just got the
direction using a class method


415
00:21:06,176 --> 00:21:08,846
on interface device and once
I have that I just check


416
00:21:08,846 --> 00:21:10,716
if it's left to right
or right to left.


417
00:21:11,186 --> 00:21:15,766
And that's a brief look at
what we added in watchOS 2.1.


418
00:21:16,336 --> 00:21:19,366
So once again it's the same
ideas and principles as iOS.


419
00:21:20,866 --> 00:21:23,306
All watchKit elements do the
correct thing out of the box


420
00:21:23,556 --> 00:21:26,956
with no extra work needed
and any custom UI or elements


421
00:21:26,956 --> 00:21:28,436
that you have should
also reflect this.


422
00:21:29,136 --> 00:21:32,046
Keeping in mind of course,
the nuances and exceptions


423
00:21:32,046 --> 00:21:34,646
that I mentioned and you can
use semantic content attribute


424
00:21:34,966 --> 00:21:37,916
to help determine the
layout direction at runtime.


425
00:21:38,356 --> 00:21:41,736
And with that, I'd like to
hand it over back to Sara,


426
00:21:41,966 --> 00:21:44,706
to talk to you about macOS and
handling bidirectional text,


427
00:21:45,046 --> 00:21:47,876
thank you very much, I hope you
have a great Friday, thanks.


428
00:21:48,111 --> 00:21:50,111
[ Applause ]


429
00:21:50,206 --> 00:21:50,666
>> Thank you.


430
00:21:51,646 --> 00:21:53,676
So let's talk about macOS.


431
00:21:53,956 --> 00:21:56,976
Just like the other
platforms, iOS and watchOS,


432
00:21:57,236 --> 00:21:59,596
the concepts are exactly
the same for macOS.


433
00:21:59,946 --> 00:22:02,366
So if you are using
standard AppKit controls,


434
00:22:03,106 --> 00:22:05,086
you will get the
behavior out of the box


435
00:22:05,086 --> 00:22:07,226
when you're running your app
in a right to left environment.


436
00:22:07,676 --> 00:22:10,046
So now I would like to walk
you through some examples


437
00:22:10,046 --> 00:22:13,286
from our own system to show
you how active controls behave.


438
00:22:14,276 --> 00:22:17,456
So let's start with what we
call system level controls.


439
00:22:17,976 --> 00:22:19,926
So we call these
system level controls


440
00:22:20,066 --> 00:22:23,506
because the layout follow the
system language is running


441
00:22:23,506 --> 00:22:25,786
in instead of your
app layout direction.


442
00:22:26,176 --> 00:22:28,716
But this will make more sense
with some visual examples,


443
00:22:28,926 --> 00:22:31,336
so let's take a look,
at the menu bar here.


444
00:22:32,656 --> 00:22:35,006
So I'm running my system in
a right to left environment


445
00:22:35,456 --> 00:22:39,016
and as you can see here,
the upper menu starts


446
00:22:39,016 --> 00:22:40,606
from the right edge
of the window.


447
00:22:41,516 --> 00:22:45,606
Also, the elements inside the
menu expand from right to left.


448
00:22:46,606 --> 00:22:51,086
And this concept also
applies to NSWindow.


449
00:22:51,616 --> 00:22:55,266
So by design we decided to
keep window controls always


450
00:22:55,266 --> 00:22:57,956
consistent across
all apps regardless


451
00:22:57,956 --> 00:22:59,566
if your app is localized or not.


452
00:23:00,246 --> 00:23:01,986
So if you are doing
your own logic


453
00:23:02,156 --> 00:23:04,956
and you're doing your own custom
controls you will need to take


454
00:23:04,956 --> 00:23:07,496
that into consideration
and update that logic even


455
00:23:07,496 --> 00:23:09,876
if you don't support Arabic
or Hebrew localizations.


456
00:23:11,436 --> 00:23:13,436
Next, app level controls.


457
00:23:13,996 --> 00:23:18,156
So app level controls here,
we follow the app language,


458
00:23:18,156 --> 00:23:19,646
your layout direction
in your app.


459
00:23:20,236 --> 00:23:24,626
So for example, NSTableView,
so this is a screenshot


460
00:23:24,656 --> 00:23:28,146
from the activity monitor app,
we're using a stack table view


461
00:23:28,216 --> 00:23:30,746
and as you can see the table
view [inaudible] reverse order


462
00:23:30,746 --> 00:23:33,666
automatically when I'm running
my app in Arabic for example.


463
00:23:34,436 --> 00:23:36,986
Another example,
NSCollectionView


464
00:23:37,936 --> 00:23:39,206
and from the finder app


465
00:23:39,356 --> 00:23:42,086
where the collection view flow
layout flows from right to left.


466
00:23:42,696 --> 00:23:44,086
I will give you one
more example.


467
00:23:45,436 --> 00:23:48,706
NSScrollView and the
same concept here,


468
00:23:49,046 --> 00:23:50,566
so we also switch the position


469
00:23:50,566 --> 00:23:52,766
of the scroll bar
inside the scroll view.


470
00:23:53,186 --> 00:23:54,826
And this also will
avoid overlapping


471
00:23:54,826 --> 00:23:56,646
with the content of
your application.


472
00:23:57,386 --> 00:24:02,356
And keep in mind if you are
using web views in your apps,


473
00:24:02,766 --> 00:24:05,286
so scroll in there works
a little bit differently.


474
00:24:05,656 --> 00:24:08,806
So WebKit will look at the
content of your webpage


475
00:24:08,986 --> 00:24:12,336
and evaluate its HTML
attributes and based


476
00:24:12,336 --> 00:24:14,606
on that value it will
position the scroll bar.


477
00:24:15,316 --> 00:24:18,766
So for example here, I'm running
Safari in English and I am


478
00:24:18,766 --> 00:24:20,076
in Apple.com in English.


479
00:24:20,836 --> 00:24:24,586
So looking at the content of
my webpage, so I will get,


480
00:24:25,076 --> 00:24:27,266
the dir attribute here
is set to left to right


481
00:24:27,326 --> 00:24:30,076
so we position the scroll
bar on the right side.


482
00:24:31,576 --> 00:24:33,836
If I take the exact
same configuration,


483
00:24:34,316 --> 00:24:36,576
but this time I am in
Apple.com in Arabic,


484
00:24:36,656 --> 00:24:37,986
so looking at the content.


485
00:24:38,566 --> 00:24:40,196
So here my content is in Arabic,


486
00:24:40,296 --> 00:24:43,136
looking at the dir attributes
here again, it's set to right


487
00:24:43,136 --> 00:24:45,426
to left, so we switch the
position of the scroll bar.


488
00:24:45,726 --> 00:24:48,666
So these are just examples
from WebKit controls


489
00:24:48,776 --> 00:24:51,086
and AppKit controls,
and now I would


490
00:24:51,086 --> 00:24:52,726
like to talk to you about API.


491
00:24:55,666 --> 00:24:57,816
So we just saw in
the last example


492
00:24:57,816 --> 00:25:00,016
that WebKit's controls work
a little bit differently


493
00:25:00,016 --> 00:25:01,036
from AppKit.


494
00:25:01,666 --> 00:25:04,016
So with that we are
providing a new API


495
00:25:04,616 --> 00:25:08,036
in WebKit called
userInterfaceDirectionPolicy.


496
00:25:08,516 --> 00:25:12,346
As I mentioned, the default
value is set to the content


497
00:25:12,536 --> 00:25:16,816
of your webpage, but you can
override this value if you want


498
00:25:16,816 --> 00:25:18,266
for example your scrollers


499
00:25:18,266 --> 00:25:20,276
to follow the system
language instead


500
00:25:20,356 --> 00:25:22,046
of the content of your webpage.


501
00:25:22,306 --> 00:25:24,996
So you can override it to use
system instead of content.


502
00:25:26,776 --> 00:25:28,856
Next, let's talk
about AppKit API.


503
00:25:29,576 --> 00:25:35,406
As a quick recap, if you use
standard AppKit controls you


504
00:25:35,406 --> 00:25:36,586
don't have to do anything,


505
00:25:36,726 --> 00:25:38,446
everything will just
work for free.


506
00:25:39,176 --> 00:25:43,296
Now you might have a specific
design in mind and you want


507
00:25:43,296 --> 00:25:45,056
to layout your views
by yourself.


508
00:25:45,736 --> 00:25:47,446
So in that case we
highly recommend


509
00:25:47,446 --> 00:25:49,216
that you use StackViews
and GridViews.


510
00:25:49,356 --> 00:25:50,806
So grid views are new to macOS,


511
00:25:50,806 --> 00:25:54,476
and both these tools are really
powerful because they will set


512
00:25:54,476 --> 00:25:56,896
up auto layouts constraints
for you under the hood.


513
00:25:57,496 --> 00:26:00,096
And they also use leading
and trailing constraints


514
00:26:00,096 --> 00:26:01,946
which will flip your
views automatically


515
00:26:01,946 --> 00:26:03,756
when you're running in a
right to left environment.


516
00:26:03,836 --> 00:26:08,896
If you are not using StackViews
or GridViews, use auto layout.


517
00:26:09,416 --> 00:26:11,586
If you're not familiar with
it, there are great sessions


518
00:26:11,586 --> 00:26:15,256
from previous years and there is
a session this afternoon called


519
00:26:15,256 --> 00:26:17,286
What's New in Auto
Layout, check it out.


520
00:26:17,836 --> 00:26:21,126
Finally, if you're
using storyboards


521
00:26:21,126 --> 00:26:22,926
in base approach
we also take care


522
00:26:22,926 --> 00:26:24,746
of flipping the text
alignment for you.


523
00:26:25,296 --> 00:26:30,256
In addition to that, we
have an API in NSView


524
00:26:30,466 --> 00:26:33,036
that will let you get and
set the layout direction


525
00:26:33,036 --> 00:26:33,756
of your views.


526
00:26:34,426 --> 00:26:37,036
So for example here,
I have a banner slider


527
00:26:37,036 --> 00:26:38,986
that has two values,
left and right.


528
00:26:39,536 --> 00:26:41,736
So I want my slider
to be consistent


529
00:26:41,736 --> 00:26:43,386
across all my localizations,


530
00:26:43,476 --> 00:26:45,306
because it makes sense
left should always stay


531
00:26:45,306 --> 00:26:47,736
on the left side and
right should always stay


532
00:26:47,736 --> 00:26:48,476
on the right side.


533
00:26:48,476 --> 00:26:51,656
So here it will make total sense
if I force the layout direction


534
00:26:51,656 --> 00:26:53,596
of my slider to be
always left to right.


535
00:26:54,686 --> 00:26:57,586
So as I mentioned, we
have an API in NSView


536
00:26:57,866 --> 00:26:59,016
that will let you do that.


537
00:26:59,556 --> 00:27:01,186
The default value is set


538
00:27:01,186 --> 00:27:03,676
to NSApp.userInterfaceLayout
Direction,


539
00:27:04,626 --> 00:27:07,886
but you can override it
to left or right based


540
00:27:07,886 --> 00:27:09,496
on what you want to
do in your views.


541
00:27:11,116 --> 00:27:13,476
Now let's talk about images.


542
00:27:14,196 --> 00:27:17,926
As we just saw in
Joaquim's demo,


543
00:27:18,106 --> 00:27:22,146
we introduced directional
image assets, in asset catalog.


544
00:27:22,146 --> 00:27:24,926
So assets catalogs
also exist in macOS


545
00:27:24,926 --> 00:27:28,226
and they work exactly the same
way as iOS, so I'm not going


546
00:27:28,226 --> 00:27:29,466
to go through details here.


547
00:27:30,146 --> 00:27:32,936
But again, sometimes you
don't have your images


548
00:27:32,936 --> 00:27:36,176
in your application bundle
but you still want to get them


549
00:27:36,176 --> 00:27:38,716
from a remote location,
let's say a server.


550
00:27:39,486 --> 00:27:43,466
So we also have an API in
NSImageRep that will let you do


551
00:27:43,466 --> 00:27:45,416
that and register
your images in code.


552
00:27:45,986 --> 00:27:47,836
So let's go through an
example together here,


553
00:27:47,986 --> 00:27:49,546
just see how it works.


554
00:27:51,256 --> 00:27:56,016
So as I mentioned, sometimes you
have images in another location


555
00:27:56,216 --> 00:27:57,616
and you want to register them.


556
00:27:57,616 --> 00:28:00,016
So first what you need to
do is to create your left


557
00:28:00,016 --> 00:28:02,046
to right image by
using NSImage API.


558
00:28:02,986 --> 00:28:04,376
And once you have that you need


559
00:28:04,376 --> 00:28:06,476
to set this layout
direction to be left to right.


560
00:28:06,956 --> 00:28:09,186
So same thing for your
right to left image,


561
00:28:09,506 --> 00:28:12,436
but this time you will
need to use NSImageRep API.


562
00:28:13,136 --> 00:28:17,806
So once you have both images, so
you need to register your right


563
00:28:17,806 --> 00:28:22,066
to left image representation
with the left to right image


564
00:28:22,066 --> 00:28:24,126
and that by using
other presentation API.


565
00:28:24,886 --> 00:28:28,446
So with that, once you have both
images registered we will load


566
00:28:28,446 --> 00:28:30,766
the right image for
you at runtime,


567
00:28:31,246 --> 00:28:33,046
either if you're running
your app in a left


568
00:28:33,046 --> 00:28:35,386
to right localization or a
right to left localization.


569
00:28:37,616 --> 00:28:41,486
Finally, we have new
convenience initializers


570
00:28:41,926 --> 00:28:43,376
for common AppKit controls.


571
00:28:44,086 --> 00:28:49,336
For an accessory for example, it
will set the alignment attribute


572
00:28:49,336 --> 00:28:51,646
and auto layout attributes
correctly for you.


573
00:28:52,356 --> 00:28:55,806
And for NSButton, it
will flip the image,


574
00:28:56,056 --> 00:28:59,536
the checkbox position, and the
Radio button positions also


575
00:28:59,536 --> 00:29:00,046
for free.


576
00:29:00,596 --> 00:29:02,486
So with that, I would
like to show you a demo


577
00:29:02,486 --> 00:29:10,316
to summarize what we
just saw in the section.


578
00:29:15,796 --> 00:29:19,026
Alright. Cool, so I got
inspired by Joaquim's demo


579
00:29:19,026 --> 00:29:23,166
and I created a scoreboard
app so we can track our scores


580
00:29:23,166 --> 00:29:24,586
when we are playing
the game together.


581
00:29:24,746 --> 00:29:29,286
So here I have a simple,
app where you can see it


582
00:29:29,286 --> 00:29:31,806
in my view controller, I
just have a table view,


583
00:29:32,296 --> 00:29:34,766
and I already setup my
auto layout constraints.


584
00:29:35,256 --> 00:29:39,546
And inside my table view cell
I have an image, a text field,


585
00:29:39,966 --> 00:29:41,306
and a [inaudible]
so pretty simple.


586
00:29:41,746 --> 00:29:43,906
So here I'm using
StackViews to lay


587
00:29:43,906 --> 00:29:47,456
out the elements inside my table
view cell, so I didn't even need


588
00:29:47,456 --> 00:29:49,626
to worry about setting
up auto layout constraint


589
00:29:49,626 --> 00:29:52,076
because text view just
took care of that for me.


590
00:29:52,856 --> 00:29:55,606
And here at the bottom,
I have a label


591
00:29:55,606 --> 00:29:58,296
where I update my highest
score and my best play.


592
00:29:58,536 --> 00:29:59,276
So pretty simple.


593
00:29:59,986 --> 00:30:02,806
So what I'm going to do now,
I'm going to simulate a right


594
00:30:02,806 --> 00:30:04,936
to left environment
directly on my app


595
00:30:04,996 --> 00:30:06,716
and see how it looks like.


596
00:30:07,706 --> 00:30:10,376
Great. So I'm going to
go to my scheme editor,


597
00:30:11,056 --> 00:30:14,486
to my application language
and choose my right


598
00:30:14,486 --> 00:30:16,776
to left pseudo language
instead of my system language.


599
00:30:17,586 --> 00:30:21,786
I'm going to build
and run my app again.


600
00:30:21,786 --> 00:30:23,056
And it's building, great.


601
00:30:23,406 --> 00:30:26,036
So as you can see here without
writing one line of code,


602
00:30:26,036 --> 00:30:28,026
just by using storyboard,
StackViews,


603
00:30:28,026 --> 00:30:29,606
auto layouts, it just works.


604
00:30:30,036 --> 00:30:34,366
So that's it, so now that my app
looks great in right to left,


605
00:30:34,496 --> 00:30:40,236
what I'm going to do, I want
to go back to my code and,


606
00:30:40,676 --> 00:30:43,836
I'm going to run
my app, this time,


607
00:30:45,196 --> 00:30:49,376
in my system language instead
of right to left pseudo language


608
00:30:49,546 --> 00:30:51,366
So this will just run
the app in English


609
00:30:51,366 --> 00:30:52,796
because my system
now is in English.


610
00:30:53,486 --> 00:30:55,386
Now I'm going to
run my app again.


611
00:30:57,686 --> 00:31:00,946
So why I'm doing this, so I just
want to show you another aspect


612
00:31:00,946 --> 00:31:02,556
of international
user interfaces.


613
00:31:02,916 --> 00:31:06,196
So here, so my app looks
great in English as well,


614
00:31:06,546 --> 00:31:07,856
and now I want to join the game.


615
00:31:07,856 --> 00:31:09,366
So I'm going to add
a new player.


616
00:31:09,936 --> 00:31:15,156
I'm going to click here, add
a new player and here just


617
00:31:15,156 --> 00:31:17,976
for fun, I want to write my
name in my native language.


618
00:31:17,976 --> 00:31:20,106
So I'm going to go ahead
and change my keyword


619
00:31:21,106 --> 00:31:22,746
to use Arabic instead
of English.


620
00:31:23,126 --> 00:31:27,556
Alright, so I type my
name in Arabic, great.


621
00:31:28,856 --> 00:31:31,386
And I'm also really good at
guessing flags, so I'm going


622
00:31:31,386 --> 00:31:33,346
to win this game, so I'm
not going to waste time.


623
00:31:33,346 --> 00:31:34,776
So I'm just going to
update my score anyway.


624
00:31:35,486 --> 00:31:39,476
So, alright, see
what happened here?


625
00:31:39,556 --> 00:31:44,496
So just by updating my name, so
my label is completely broken


626
00:31:44,496 --> 00:31:46,906
because it jumps
to the right side


627
00:31:46,906 --> 00:31:48,676
and now my label just reads "!


628
00:31:48,676 --> 00:31:51,616
has the highest score 12, Sara."


629
00:31:51,616 --> 00:31:53,086
That doesn't make any sense.


630
00:31:53,986 --> 00:31:57,526
So in the next section I
would like to show you how


631
00:31:57,526 --> 00:32:00,186
to solve this kind of
problem and how can you render


632
00:32:00,886 --> 00:32:02,456
by directional text correctly.


633
00:32:02,956 --> 00:32:04,786
So let's go back to slides.


634
00:32:14,196 --> 00:32:16,936
So we just saw in the demo
app, just by entering my name


635
00:32:16,936 --> 00:32:19,866
in Arabic, it broke the
rendering of my text.


636
00:32:20,376 --> 00:32:22,776
So now let's see how we can
fix these kind of problems.


637
00:32:26,886 --> 00:32:30,446
So rendering text in
your applications is


638
00:32:30,446 --> 00:32:31,486
really important.


639
00:32:32,436 --> 00:32:35,136
It doesn't matter if
you support localization


640
00:32:35,286 --> 00:32:36,726
of that specific language,


641
00:32:36,796 --> 00:32:39,386
even if you are supporting
only English,


642
00:32:39,866 --> 00:32:43,336
your users can still
read and write content


643
00:32:43,396 --> 00:32:44,986
in any other language.


644
00:32:45,676 --> 00:32:49,656
And when it comes to text, it's
really important to remember


645
00:32:50,036 --> 00:32:53,216
that text alignment and
text directionality are two


646
00:32:53,216 --> 00:32:54,196
different concepts.


647
00:32:54,836 --> 00:32:57,926
So for example here, I have
a paragraph in English,


648
00:32:58,136 --> 00:33:00,746
it's right aligned, it's
fine, it looks great,


649
00:33:01,336 --> 00:33:03,336
because you might need
to do that by design,


650
00:33:03,336 --> 00:33:04,916
so it won't break
the text rendering.


651
00:33:05,836 --> 00:33:10,186
But if I take the same example
but this time it's left aligned,


652
00:33:10,526 --> 00:33:12,886
but I'm forcing the writing
direction of it to be right


653
00:33:12,886 --> 00:33:15,016
to left, that will break
the rendering of your text.


654
00:33:15,296 --> 00:33:17,576
As you can see here the
exclamation marks are not


655
00:33:17,576 --> 00:33:18,666
in the correct position.


656
00:33:19,326 --> 00:33:21,886
So let's talk a little
bit for that.


657
00:33:22,386 --> 00:33:25,646
Lateral alignment is
default in all our platforms,


658
00:33:25,746 --> 00:33:27,556
so if you don't override
that value,


659
00:33:28,076 --> 00:33:30,926
so we'll get the right
behavior, in most cases.


660
00:33:31,426 --> 00:33:33,076
So let's talk about
text directionality


661
00:33:33,076 --> 00:33:34,556
because it's a little
bit more complex.


662
00:33:35,176 --> 00:33:40,596
So here I'm just going to give
you a really simplified overview


663
00:33:40,676 --> 00:33:43,376
of the text engine by algorithm.


664
00:33:43,656 --> 00:33:45,986
But if you want to
learn more about Unicode


665
00:33:45,986 --> 00:33:47,626
by the algorithm please check


666
00:33:47,626 --> 00:33:50,006
out the full specification
in Unicode.org.


667
00:33:50,706 --> 00:33:52,136
But let's start with the basics.


668
00:33:52,796 --> 00:33:56,236
So there are three types
of Unicode characters.


669
00:33:56,816 --> 00:33:59,766
So they can be either
strong left to right,


670
00:33:59,946 --> 00:34:02,696
for example scripts
that we are familiar


671
00:34:02,696 --> 00:34:05,196
with Latin, Chinese or Japanese.


672
00:34:06,396 --> 00:34:10,275
They can be strong right to left
characters for example scripts


673
00:34:10,275 --> 00:34:15,306
like Arabic, Hebrew, Farsi or
Urdu and there are characters


674
00:34:15,516 --> 00:34:17,626
that they don't have a
directionality at all,


675
00:34:18,056 --> 00:34:20,926
and we call these neutral
or weak characters.


676
00:34:21,146 --> 00:34:22,516
For example spaces.


677
00:34:23,176 --> 00:34:28,775
So how the text engine decides
about the directionality


678
00:34:28,775 --> 00:34:30,436
of a specific paragraph?


679
00:34:31,926 --> 00:34:33,946
So the text engine just look


680
00:34:33,946 --> 00:34:37,186
at the first strong Unicode
characters, that's it.


681
00:34:37,565 --> 00:34:39,036
And if it's a strong
right to left,


682
00:34:39,036 --> 00:34:41,036
my paragraph would
be right to left.


683
00:34:41,036 --> 00:34:43,235
If it's strong left to right,
my paragraph will have a left


684
00:34:43,235 --> 00:34:44,166
to right directionality.


685
00:34:44,926 --> 00:34:47,936
So let's walk through an example
together to see how it works.


686
00:34:48,766 --> 00:34:51,005
So if I take my label
from the demo app,


687
00:34:51,295 --> 00:34:53,246
%@ has the highest color.


688
00:34:54,335 --> 00:34:59,336
So I have no idea at runtime
what my %@ will be replaced by,


689
00:34:59,336 --> 00:35:00,956
because my user can write


690
00:35:01,056 --> 00:35:03,156
or input anything,
use any keyboard.


691
00:35:03,766 --> 00:35:05,646
So let's take the
simple case here,


692
00:35:06,006 --> 00:35:09,626
where my %@ will be
replaced with a Latin name.


693
00:35:10,596 --> 00:35:14,646
So here the first character
is an A, it belongs to Latin,


694
00:35:14,966 --> 00:35:16,306
so it's a strong left to right.


695
00:35:16,626 --> 00:35:19,776
So the directionality of my
paragraph here is left to right


696
00:35:19,776 --> 00:35:20,946
so it renders correctly.


697
00:35:22,046 --> 00:35:26,506
Now if my variable is
replaced with an Arabic name.


698
00:35:26,926 --> 00:35:30,886
So the first strong character
here is an Arabic character


699
00:35:30,886 --> 00:35:32,616
which give the directionality


700
00:35:32,616 --> 00:35:34,936
of my whole paragraph
to be right to left.


701
00:35:35,076 --> 00:35:38,696
So that's why the, my
text rendering was broken,


702
00:35:38,756 --> 00:35:39,566
so this is wrong.


703
00:35:40,296 --> 00:35:44,606
So the right behavior here will
be something, so I will expect


704
00:35:44,606 --> 00:35:47,126
to see something like that,
even my name is in Arabic.


705
00:35:47,236 --> 00:35:49,646
I want it to be on the
left side and the rest


706
00:35:49,646 --> 00:35:52,566
of my paragraph will be rendered
correctly from left to right.


707
00:35:53,976 --> 00:35:56,536
So wouldn't it be great
if I had something


708
00:35:56,726 --> 00:35:59,306
that will take my
variable, will isolate it


709
00:35:59,726 --> 00:36:02,086
and give it its own
writing direction


710
00:36:02,136 --> 00:36:04,126
without affecting the
rest of my paragraph?


711
00:36:04,616 --> 00:36:07,456
And that's possible
with Isolates supports.


712
00:36:07,926 --> 00:36:11,746
So Isolates are the latest
Unicode [inaudible] characters


713
00:36:11,746 --> 00:36:13,966
that were introduced
in Unicode 6.3


714
00:36:14,436 --> 00:36:17,506
and that our text engine
supports in all our platforms.


715
00:36:18,156 --> 00:36:22,736
So as I mentioned, Isolates will
allow some text to be isolated


716
00:36:23,166 --> 00:36:26,396
and have the directionality
of its first strong character


717
00:36:26,866 --> 00:36:30,166
and that's without affecting
the surrounding text.


718
00:36:30,166 --> 00:36:32,956
And I'm happy to
say, you don't need


719
00:36:32,956 --> 00:36:36,956
to insert these characters
yourself, like in case-by-case


720
00:36:37,696 --> 00:36:40,436
because if you use
localizedStringWithFormat,


721
00:36:41,146 --> 00:36:42,956
we do that for you
automatically.


722
00:36:43,076 --> 00:36:46,946
So localizedStringWithFormat
will isolate %@ automatically


723
00:36:46,946 --> 00:36:49,036
and it will do the
right thing at runtime.


724
00:36:50,376 --> 00:36:53,456
So now, I would like to
go back to the demo app


725
00:36:53,456 --> 00:36:55,956
and fix the issue we introduce
earlier just by one line


726
00:36:55,956 --> 00:36:57,026
of code, so let's do that.


727
00:37:04,726 --> 00:37:06,336
Alright, so cool.


728
00:37:06,456 --> 00:37:09,626
So now I'm going to go back
to, my view controller here


729
00:37:10,376 --> 00:37:12,096
and this is where
I update my label.


730
00:37:12,636 --> 00:37:16,836
So just to save some time
I already wrote the code


731
00:37:16,836 --> 00:37:18,066
to use localized standard string


732
00:37:18,066 --> 00:37:20,126
with format instead
of a regular string.


733
00:37:20,126 --> 00:37:24,046
So I'm going to go ahead here
and comment this regular string


734
00:37:24,486 --> 00:37:27,526
and uncomment the line that is
using localizedStringWithFormat.


735
00:37:28,406 --> 00:37:32,686
I'm going to run my app again,
and see if my issue's fixed.


736
00:37:38,396 --> 00:37:42,346
Right, so as you can see
here, so my problem is fixed.


737
00:37:42,346 --> 00:37:45,266
So my name now is on the
left side of my sentence,


738
00:37:45,366 --> 00:37:46,626
I can read it correctly.


739
00:37:46,956 --> 00:37:49,796
So let's see if it works
with English names as well.


740
00:37:50,506 --> 00:37:54,106
So see here if I update
with, Rana, see if it works.


741
00:37:54,806 --> 00:37:56,316
And with Arabic names as well,


742
00:37:56,596 --> 00:37:59,126
and that's Isolates
support in our platforms.


743
00:37:59,796 --> 00:38:00,976
So let's go back to slides.


744
00:38:01,516 --> 00:38:05,986
[ Applause ]


745
00:38:06,486 --> 00:38:07,966
Alright so let's summarize.


746
00:38:07,966 --> 00:38:13,496
So in this session we introduced
directional image assets.


747
00:38:14,086 --> 00:38:17,576
So it's easier now for you
to support different images


748
00:38:17,576 --> 00:38:20,736
for both your left to right and
right to left localizations.


749
00:38:22,076 --> 00:38:26,316
We have new APIs for you
on iOS, watchOS and macOS.


750
00:38:27,566 --> 00:38:31,276
And auto layout is your best
friend if you want to lay


751
00:38:31,276 --> 00:38:33,786
out your views and support
other localizations.


752
00:38:35,436 --> 00:38:38,296
And we also improved
our text engine


753
00:38:38,426 --> 00:38:40,646
by supporting Isolates
Unicode characters.


754
00:38:42,166 --> 00:38:45,956
So with all these improvements,
it's really easy for you,


755
00:38:45,956 --> 00:38:49,386
as a developer, to go ahead
and reach new markets.


756
00:38:50,766 --> 00:38:54,426
For more information, please
visit developer.apple.com


757
00:38:54,496 --> 00:38:57,756
to find our session there and
thank you so much for coming.


758
00:38:58,126 --> 00:38:59,616
And those are related sessions


759
00:38:59,616 --> 00:39:01,036
if you didn't watch
them already,


760
00:39:01,036 --> 00:39:03,176
please check them
out, they are good.


761
00:39:04,596 --> 00:39:07,456
And have a wonderful
day, enjoy the rest


762
00:39:07,456 --> 00:39:09,416
of WWDC, thank you so much.

