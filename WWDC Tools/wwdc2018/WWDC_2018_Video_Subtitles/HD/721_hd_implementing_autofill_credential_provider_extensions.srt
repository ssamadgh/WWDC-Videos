1
00:00:07,516 --> 00:00:15,500
[ Music ]


2
00:00:18,046 --> 00:00:19,216
>> Hello, and welcome to the


3
00:00:19,216 --> 00:00:20,916
session on implementing AutoFill


4
00:00:20,916 --> 00:00:22,386
Credential Provider Extensions.


5
00:00:23,846 --> 00:00:25,246
In this video, I'll first give


6
00:00:25,246 --> 00:00:26,506
an overview of the Password


7
00:00:26,506 --> 00:00:28,006
AutoFill feature and how it is


8
00:00:28,006 --> 00:00:29,186
improved in iOS 12.


9
00:00:30,386 --> 00:00:31,986
After that I'll go into detail


10
00:00:31,986 --> 00:00:33,546
about how Password Manager apps


11
00:00:33,606 --> 00:00:34,786
can now integrate with Password


12
00:00:34,786 --> 00:00:37,056
AutoFill using new APIs in iOS


13
00:00:37,056 --> 00:00:37,326
12.


14
00:00:38,846 --> 00:00:39,886
And along the way, I will


15
00:00:39,886 --> 00:00:41,256
recommend a few best practices


16
00:00:41,256 --> 00:00:42,746
to take as you adopt these new


17
00:00:42,746 --> 00:00:43,866
APIs.


18
00:00:45,556 --> 00:00:47,486
First, let's talk about Password


19
00:00:47,486 --> 00:00:47,906
AutoFill.


20
00:00:50,696 --> 00:00:52,596
iOS 11 brought two major


21
00:00:52,596 --> 00:00:53,506
improvements to Password


22
00:00:53,506 --> 00:00:53,946
AutoFill.


23
00:00:54,776 --> 00:00:56,186
First, the most relevant


24
00:00:56,186 --> 00:00:57,266
credentials were displayed


25
00:00:57,266 --> 00:00:58,416
directly on the QuickType bar,


26
00:00:58,706 --> 00:00:59,876
so they're only one tap away,


27
00:01:00,786 --> 00:01:02,466
and second, iOS 11 brought


28
00:01:02,466 --> 00:01:04,025
password AutoFill to apps.


29
00:01:04,506 --> 00:01:05,836
This makes it super convenient


30
00:01:05,916 --> 00:01:07,166
to use credentials from iCloud


31
00:01:07,166 --> 00:01:08,826
keychain, whether they're needed


32
00:01:08,826 --> 00:01:10,846
on the web or in apps, like the


33
00:01:10,846 --> 00:01:12,006
shiny app you just saw.


34
00:01:13,996 --> 00:01:17,046
And new in iOS and tvOS 12, you


35
00:01:17,046 --> 00:01:18,426
can also use password AutoFill


36
00:01:18,526 --> 00:01:20,306
in Apple TV apps by selecting


37
00:01:20,306 --> 00:01:21,716
credentials to fill from an iOS


38
00:01:21,716 --> 00:01:23,476
device.


39
00:01:23,476 --> 00:01:24,456
These features are great for


40
00:01:24,456 --> 00:01:26,006
users of iCloud keychain, but


41
00:01:26,006 --> 00:01:27,186
some users rely on other


42
00:01:27,186 --> 00:01:28,406
password manager apps to store


43
00:01:28,406 --> 00:01:29,116
their credentials.


44
00:01:30,656 --> 00:01:32,136
To make it just as convenient


45
00:01:32,136 --> 00:01:33,346
for these users to access their


46
00:01:33,346 --> 00:01:35,736
safe credentials, iOS 12 allows


47
00:01:35,736 --> 00:01:37,036
password manager apps to


48
00:01:37,036 --> 00:01:38,446
participate in AutoFill for the


49
00:01:38,446 --> 00:01:39,656
same experience as iCloud


50
00:01:39,656 --> 00:01:40,046
Keychain.


51
00:01:41,736 --> 00:01:44,346
In iOS 12, there is a new UI for


52
00:01:44,346 --> 00:01:45,676
password AutoFill settings,


53
00:01:45,926 --> 00:01:47,476
which allows users to select an


54
00:01:47,476 --> 00:01:48,776
app to provide credentials to


55
00:01:48,776 --> 00:01:51,126
AutoFill, in addition to or


56
00:01:51,126 --> 00:01:52,406
instead of iCloud Keychain.


57
00:01:52,586 --> 00:01:56,006
Using the QuickType bar, the


58
00:01:56,936 --> 00:01:58,146
user can bring up a list of


59
00:01:58,146 --> 00:01:59,266
their credentials saved in the


60
00:01:59,266 --> 00:02:00,036
password manager.


61
00:02:00,876 --> 00:02:02,146
This UI is provided by an


62
00:02:02,146 --> 00:02:03,296
extension bundled with the


63
00:02:03,296 --> 00:02:04,146
password manager app.


64
00:02:04,146 --> 00:02:06,656
When a credential is selected,


65
00:02:06,976 --> 00:02:07,986
the extension hands it back to


66
00:02:07,986 --> 00:02:10,515
AutoFill, and the username and


67
00:02:10,515 --> 00:02:11,686
password are filled in the app.


68
00:02:12,326 --> 00:02:15,126
Of course, this also works with


69
00:02:15,126 --> 00:02:16,356
the QuickType bar suggestions as


70
00:02:16,356 --> 00:02:16,626
well.


71
00:02:17,186 --> 00:02:18,386
AutoFill can now surface the


72
00:02:18,386 --> 00:02:19,796
best credentials as defined by


73
00:02:19,796 --> 00:02:21,396
the app, so they're accessible


74
00:02:21,646 --> 00:02:22,416
with just one tap.


75
00:02:23,956 --> 00:02:25,486
When using these credentials,


76
00:02:25,606 --> 00:02:27,016
the app extension can optionally


77
00:02:27,016 --> 00:02:28,596
show its own UI to authenticate


78
00:02:28,596 --> 00:02:29,666
the user before filling the


79
00:02:29,666 --> 00:02:30,106
credential.


80
00:02:33,116 --> 00:02:34,796
This integration makes logging


81
00:02:34,796 --> 00:02:36,506
into apps even easier for users


82
00:02:36,506 --> 00:02:38,076
of password manager apps, as


83
00:02:38,076 --> 00:02:39,066
they no longer need to switch


84
00:02:39,066 --> 00:02:40,436
apps to copy their credentials.


85
00:02:41,846 --> 00:02:43,216
It also makes Password AutoFill


86
00:02:43,216 --> 00:02:44,426
available in more apps.


87
00:02:44,836 --> 00:02:46,346
Any app that supports AutoFill


88
00:02:46,346 --> 00:02:47,826
from iCloud Keychain will now


89
00:02:47,826 --> 00:02:49,336
work with Password Manager apps,


90
00:02:49,336 --> 00:02:50,346
without any additional work.


91
00:02:50,826 --> 00:02:54,726
With that overview, let's dive


92
00:02:54,726 --> 00:02:55,926
into how you can implement these


93
00:02:55,926 --> 00:02:57,336
capabilities in your password


94
00:02:57,336 --> 00:02:57,926
manager app.


95
00:02:58,576 --> 00:02:59,666
There are four main steps I'll


96
00:02:59,666 --> 00:02:59,946
cover.


97
00:03:02,336 --> 00:03:04,006
First, you'll need to configure


98
00:03:04,006 --> 00:03:05,426
your project to take advantage


99
00:03:05,426 --> 00:03:06,536
of some new APIs.


100
00:03:07,226 --> 00:03:08,106
This involves adding a


101
00:03:08,106 --> 00:03:09,706
capability to your app and an


102
00:03:09,706 --> 00:03:11,006
extension to your project.


103
00:03:11,526 --> 00:03:13,116
AutoFill will use this extension


104
00:03:13,116 --> 00:03:14,136
when it needs to consult your


105
00:03:14,136 --> 00:03:16,636
app or show its UI across the


106
00:03:17,696 --> 00:03:18,006
system.


107
00:03:18,036 --> 00:03:19,566
Next, your extension will need


108
00:03:19,566 --> 00:03:20,786
to support showing the user a


109
00:03:20,786 --> 00:03:21,896
list of their credentials to


110
00:03:21,896 --> 00:03:23,256
choose from when they open your


111
00:03:23,256 --> 00:03:24,346
extension from the QuickType


112
00:03:24,346 --> 00:03:24,536
bar.


113
00:03:26,736 --> 00:03:28,626
After that, if you want AutoFill


114
00:03:28,626 --> 00:03:29,746
to show your app's credentials


115
00:03:29,746 --> 00:03:31,226
in the QuickType bar, you will


116
00:03:31,226 --> 00:03:32,466
need to add support for this by


117
00:03:32,466 --> 00:03:33,566
telling the system about the


118
00:03:33,566 --> 00:03:34,656
credentials you want to show,


119
00:03:35,116 --> 00:03:36,536
and implementing another API in


120
00:03:36,536 --> 00:03:37,856
your extension to respond to


121
00:03:37,856 --> 00:03:38,746
users selecting those


122
00:03:38,746 --> 00:03:39,326
credentials.


123
00:03:40,856 --> 00:03:42,236
And finally, you may want to


124
00:03:42,236 --> 00:03:43,536
take advantage of an API that


125
00:03:43,536 --> 00:03:44,886
will allow you to present your


126
00:03:44,886 --> 00:03:46,806
extension's UI when users enable


127
00:03:46,806 --> 00:03:47,876
your Password Manager in


128
00:03:47,876 --> 00:03:48,356
Settings.


129
00:03:49,096 --> 00:03:50,096
Let's talk about these steps in


130
00:03:50,096 --> 00:03:50,546
more detail.


131
00:03:53,016 --> 00:03:54,646
First, you will need to make a


132
00:03:54,646 --> 00:03:55,826
few changes to your project.


133
00:03:56,456 --> 00:03:57,506
This starts with enabling


134
00:03:57,506 --> 00:03:59,356
AutoFill Credential Provider in


135
00:03:59,356 --> 00:04:00,556
your app's capabilities.


136
00:04:01,316 --> 00:04:02,716
This adds a required entitlement


137
00:04:02,716 --> 00:04:04,116
to your app, and links it to the


138
00:04:04,116 --> 00:04:05,696
new authentication services


139
00:04:05,696 --> 00:04:07,716
framework, which provides the


140
00:04:07,716 --> 00:04:08,936
APIs for Password Autofill


141
00:04:08,936 --> 00:04:09,416
integration.


142
00:04:09,826 --> 00:04:13,936
Next, you will need to add an


143
00:04:13,936 --> 00:04:15,316
AutoFill Credential Provider


144
00:04:15,316 --> 00:04:16,456
Extension target to your


145
00:04:16,456 --> 00:04:16,946
project.


146
00:04:17,676 --> 00:04:19,296
Xcode 10 includes a new template


147
00:04:19,296 --> 00:04:20,116
for this extension.


148
00:04:20,656 --> 00:04:23,666
The template will create a view


149
00:04:23,666 --> 00:04:24,706
controller class for you.


150
00:04:25,136 --> 00:04:26,876
A subclass of AS credential


151
00:04:26,876 --> 00:04:27,986
provider view controller.


152
00:04:29,076 --> 00:04:30,326
When AutoFill needs to invoke


153
00:04:30,326 --> 00:04:31,766
your extension, it will create


154
00:04:31,766 --> 00:04:33,336
an instance of this class and


155
00:04:33,336 --> 00:04:34,366
call certain methods on it,


156
00:04:34,766 --> 00:04:35,606
which your subclass will


157
00:04:35,606 --> 00:04:36,026
override.


158
00:04:37,756 --> 00:04:38,996
So once you've configured your


159
00:04:38,996 --> 00:04:41,146
project, the first thing to


160
00:04:41,146 --> 00:04:42,626
implement in your extension is


161
00:04:42,626 --> 00:04:43,756
the list of credentials that the


162
00:04:43,756 --> 00:04:44,726
user can bring up from the


163
00:04:44,726 --> 00:04:45,286
QuickType bar.


164
00:04:45,566 --> 00:04:46,866
Here is how this works.


165
00:04:47,446 --> 00:04:50,616
When the user is signing into an


166
00:04:50,736 --> 00:04:51,926
app, they can use the QuickType


167
00:04:51,926 --> 00:04:53,076
bar to bring up your credential


168
00:04:53,076 --> 00:04:53,376
list.


169
00:04:54,026 --> 00:04:56,306
At this point, AutoFill will


170
00:04:56,306 --> 00:04:57,776
launch your app extension and


171
00:04:57,776 --> 00:04:58,946
let it know where the user is


172
00:04:58,946 --> 00:05:00,566
logging in, so you can suggest


173
00:05:00,566 --> 00:05:01,926
the most relevant credentials.


174
00:05:03,816 --> 00:05:05,436
AutoFill will do this by


175
00:05:05,436 --> 00:05:06,736
preparing a list of AS


176
00:05:06,736 --> 00:05:08,086
credentials service identifier


177
00:05:08,086 --> 00:05:09,446
objects, representing the


178
00:05:09,446 --> 00:05:10,716
service the user is currently


179
00:05:10,716 --> 00:05:11,146
using.


180
00:05:11,976 --> 00:05:12,956
Your extension may receive


181
00:05:12,956 --> 00:05:14,636
multiple service identifiers, if


182
00:05:14,636 --> 00:05:16,086
AutoFill can determine multiple


183
00:05:16,086 --> 00:05:17,386
better [inaudible] to use in the


184
00:05:17,386 --> 00:05:18,236
current context.


185
00:05:19,956 --> 00:05:21,866
In apps, service identifiers are


186
00:05:21,866 --> 00:05:23,216
based on the app's associated


187
00:05:23,216 --> 00:05:23,836
domains.


188
00:05:24,406 --> 00:05:25,976
Apps that have adopted universal


189
00:05:25,976 --> 00:05:27,876
links hand-off or shared web


190
00:05:27,876 --> 00:05:29,346
credentials will have associated


191
00:05:29,346 --> 00:05:29,856
domains.


192
00:05:31,006 --> 00:05:32,606
For example, the Shiny app is


193
00:05:32,606 --> 00:05:33,456
associated with


194
00:05:33,456 --> 00:05:36,386
shiny.example.com, so AutoFill


195
00:05:36,386 --> 00:05:37,586
will provide your extension a


196
00:05:37,586 --> 00:05:39,086
service identifier of type


197
00:05:39,086 --> 00:05:41,436
domain for shiny.example.com.


198
00:05:42,866 --> 00:05:44,286
In Safari, the service


199
00:05:44,286 --> 00:05:46,056
identifiers are based on the URL


200
00:05:46,086 --> 00:05:47,336
of the current page the user is


201
00:05:47,336 --> 00:05:47,966
logging into.


202
00:05:51,316 --> 00:05:52,976
AutoFill will send the service


203
00:05:52,976 --> 00:05:54,786
identifiers to your extension by


204
00:05:54,786 --> 00:05:56,186
calling the prepared credential


205
00:05:56,186 --> 00:05:57,796
list for service identifiers


206
00:05:57,796 --> 00:05:59,266
method on your view controller.


207
00:06:00,286 --> 00:06:02,066
Here, your extension should set


208
00:06:02,066 --> 00:06:03,526
up its UI for displaying the


209
00:06:03,526 --> 00:06:05,466
user's credentials, and it can


210
00:06:05,466 --> 00:06:06,546
use the provided service


211
00:06:06,546 --> 00:06:08,156
identifiers to prioritize the


212
00:06:08,156 --> 00:06:09,166
most relevant ones.


213
00:06:09,926 --> 00:06:11,326
From here, two things can


214
00:06:11,326 --> 00:06:11,636
happen.


215
00:06:12,196 --> 00:06:15,286
If the user chooses to dismiss


216
00:06:15,286 --> 00:06:16,656
your extension, you tell the


217
00:06:16,656 --> 00:06:18,306
system about this by calling


218
00:06:18,436 --> 00:06:20,456
Cancel Request With Error on


219
00:06:20,456 --> 00:06:21,586
your view controller's extension


220
00:06:21,586 --> 00:06:23,906
context, and AutoFill will


221
00:06:23,906 --> 00:06:24,886
dismiss your extension.


222
00:06:28,976 --> 00:06:30,886
Otherwise, if the user selects a


223
00:06:30,886 --> 00:06:32,086
credential they want to use,


224
00:06:32,506 --> 00:06:33,976
your extension creates an AS


225
00:06:33,976 --> 00:06:35,736
password credential object based


226
00:06:35,736 --> 00:06:37,596
on the user's selection and then


227
00:06:37,596 --> 00:06:39,286
hands it to AutoFill by calling


228
00:06:39,286 --> 00:06:40,596
the complete request with


229
00:06:40,596 --> 00:06:42,106
selected credential method on


230
00:06:42,106 --> 00:06:43,206
the extension context.


231
00:06:44,046 --> 00:06:45,526
And AutoFill will use that


232
00:06:45,526 --> 00:06:47,236
credential to fill the username


233
00:06:47,316 --> 00:06:49,126
and password in the app.


234
00:06:51,656 --> 00:06:53,036
There are a few best practices


235
00:06:53,036 --> 00:06:53,986
the credential list should


236
00:06:53,986 --> 00:06:55,276
adhere to for the best user


237
00:06:55,276 --> 00:06:55,926
experience.


238
00:06:56,946 --> 00:06:58,426
First of all, be sure to include


239
00:06:58,426 --> 00:06:59,856
a button in your UI to cancel


240
00:06:59,856 --> 00:07:00,456
the request.


241
00:07:01,446 --> 00:07:02,616
The user may change their mind


242
00:07:02,616 --> 00:07:03,986
about signing into the service,


243
00:07:03,986 --> 00:07:05,136
or realize they don't have a


244
00:07:05,136 --> 00:07:06,746
credential saved, so you should


245
00:07:06,746 --> 00:07:08,096
support letting the user dismiss


246
00:07:08,096 --> 00:07:09,466
your extension without selecting


247
00:07:09,466 --> 00:07:09,956
a credential.


248
00:07:12,856 --> 00:07:14,746
Also, your credential list UI


249
00:07:14,746 --> 00:07:16,006
should make it possible to see


250
00:07:16,006 --> 00:07:17,646
all credentials, whether or not


251
00:07:17,676 --> 00:07:18,536
they match the service


252
00:07:18,536 --> 00:07:19,216
identifiers.


253
00:07:19,896 --> 00:07:21,486
In some cases, the user may need


254
00:07:21,486 --> 00:07:22,526
to choose a credential from a


255
00:07:22,526 --> 00:07:23,246
different domain.


256
00:07:24,226 --> 00:07:25,516
Allowing the user to access


257
00:07:25,516 --> 00:07:26,776
their entire set of credentials


258
00:07:26,776 --> 00:07:28,256
from the list, ensures your


259
00:07:28,256 --> 00:07:29,696
extension is always useful.


260
00:07:31,916 --> 00:07:33,576
And user authentication is


261
00:07:33,576 --> 00:07:35,096
completely up to your extension.


262
00:07:35,406 --> 00:07:36,796
If you need to authenticate the


263
00:07:36,796 --> 00:07:38,236
user, you should do so when the


264
00:07:38,236 --> 00:07:39,426
credential list is presented.


265
00:07:39,856 --> 00:07:43,396
And that is how you can


266
00:07:43,396 --> 00:07:44,596
implement a credential list in


267
00:07:44,596 --> 00:07:45,936
your extension so your app's


268
00:07:45,936 --> 00:07:47,576
credentials are available to use


269
00:07:47,576 --> 00:07:48,466
when signing in anywhere.


270
00:07:49,076 --> 00:07:51,566
Now we will make this even more


271
00:07:51,566 --> 00:07:53,206
convenient by allowing AutoFill


272
00:07:53,206 --> 00:07:54,396
to surface these credentials


273
00:07:54,486 --> 00:07:55,566
directly on the QuickType bar.


274
00:07:56,116 --> 00:07:58,346
I'll start with an overview of


275
00:07:58,346 --> 00:07:59,516
how this process works,


276
00:07:59,776 --> 00:08:01,116
describing the roles played by


277
00:08:01,116 --> 00:08:03,176
your code, the system, and the


278
00:08:03,176 --> 00:08:04,536
app where the user is signing


279
00:08:05,056 --> 00:08:05,123
in.


280
00:08:07,376 --> 00:08:09,186
To start with, your app needs to


281
00:08:09,186 --> 00:08:10,876
let AutoFill know ahead of time


282
00:08:11,126 --> 00:08:12,356
what credentials it wants to


283
00:08:12,356 --> 00:08:13,606
make available for the QuickType


284
00:08:13,606 --> 00:08:13,816
bar.


285
00:08:15,126 --> 00:08:16,266
Your app provides AutoFill a


286
00:08:16,266 --> 00:08:17,996
list of credential identities.


287
00:08:18,336 --> 00:08:19,846
The credential identity includes


288
00:08:19,846 --> 00:08:21,106
information about a credential,


289
00:08:21,406 --> 00:08:22,746
such as the username and the


290
00:08:22,746 --> 00:08:24,616
service, but not the password.


291
00:08:25,106 --> 00:08:28,116
When the user begins signing


292
00:08:28,116 --> 00:08:29,886
into an app, the app talks to


293
00:08:29,886 --> 00:08:31,356
AutoFill, and lets it know when


294
00:08:31,356 --> 00:08:32,756
a username or password field is


295
00:08:32,756 --> 00:08:33,356
focused.


296
00:08:34,645 --> 00:08:35,946
AutoFill then looks for


297
00:08:35,946 --> 00:08:36,796
appropriate credential


298
00:08:36,796 --> 00:08:38,046
identities to suggest for the


299
00:08:38,046 --> 00:08:38,265
app.


300
00:08:38,905 --> 00:08:39,866
It does this by searching


301
00:08:39,866 --> 00:08:40,616
through the credential


302
00:08:40,616 --> 00:08:41,635
identities that your app has


303
00:08:41,635 --> 00:08:43,076
already provided, so your


304
00:08:43,076 --> 00:08:44,176
extension doesn't need to be


305
00:08:44,176 --> 00:08:44,706
launched yet.


306
00:08:45,996 --> 00:08:46,856
If there are any matching


307
00:08:46,856 --> 00:08:47,726
credential identities to


308
00:08:47,726 --> 00:08:49,886
suggest, AutoFill displays them


309
00:08:49,886 --> 00:08:50,616
on the QuickType bar.


310
00:08:51,726 --> 00:08:53,096
These suggestions are rendered


311
00:08:53,096 --> 00:08:54,666
privately by the system, so the


312
00:08:54,666 --> 00:08:56,246
app isn't yet able to determine


313
00:08:56,246 --> 00:08:57,466
what credentials the user has


314
00:08:57,466 --> 00:08:58,946
saved for the app.


315
00:09:01,356 --> 00:09:02,746
When the user selects one of the


316
00:09:02,746 --> 00:09:05,106
suggestions, AutoFill launches


317
00:09:05,106 --> 00:09:06,496
your app extension to ask it for


318
00:09:06,496 --> 00:09:07,846
the full credential, including


319
00:09:07,846 --> 00:09:08,346
the password.


320
00:09:08,836 --> 00:09:11,516
It will tell your extension


321
00:09:11,596 --> 00:09:12,736
which credential identity the


322
00:09:12,736 --> 00:09:16,216
user chose, then your extension


323
00:09:16,216 --> 00:09:17,556
looks up the password belonging


324
00:09:17,556 --> 00:09:18,926
to the selected credential in


325
00:09:18,926 --> 00:09:20,316
your app's password database.


326
00:09:21,256 --> 00:09:22,736
At this point, the extension has


327
00:09:22,736 --> 00:09:24,426
the option to present its own UI


328
00:09:24,546 --> 00:09:25,806
before returning the password.


329
00:09:26,726 --> 00:09:27,826
This is useful for password


330
00:09:27,826 --> 00:09:29,246
manager apps that ask the user


331
00:09:29,246 --> 00:09:31,126
to enter a master password, or


332
00:09:31,126 --> 00:09:32,016
perform another type of


333
00:09:32,016 --> 00:09:34,266
authentication specific to the


334
00:09:36,556 --> 00:09:36,626
app.


335
00:09:36,886 --> 00:09:37,976
Once your extension has the


336
00:09:37,976 --> 00:09:39,906
password, it packages it in an


337
00:09:39,906 --> 00:09:41,536
AS password credential and hands


338
00:09:41,536 --> 00:09:42,796
it to AutoFill by completing the


339
00:09:42,796 --> 00:09:43,736
extension request.


340
00:09:44,226 --> 00:09:47,426
If the extension didn't show its


341
00:09:47,426 --> 00:09:49,476
own UI, AutoFill will perform


342
00:09:49,476 --> 00:09:50,826
appropriate authentication for


343
00:09:50,826 --> 00:09:51,296
the user.


344
00:09:52,116 --> 00:09:53,346
Depending on the device and the


345
00:09:53,346 --> 00:09:55,116
user's preference, this may be


346
00:09:55,116 --> 00:09:57,356
Face ID, Touch ID, Device


347
00:09:57,356 --> 00:09:58,666
Passcode, or None.


348
00:09:59,236 --> 00:10:02,726
If that authentication is


349
00:10:02,726 --> 00:10:04,686
successful, AutoFill will fill


350
00:10:04,686 --> 00:10:05,856
the username and the password in


351
00:10:05,856 --> 00:10:05,976
the app.


352
00:10:06,336 --> 00:10:08,676
There is a lot going on here, so


353
00:10:08,806 --> 00:10:09,596
I'm going to walk through the


354
00:10:09,596 --> 00:10:10,666
steps you need to take as a


355
00:10:10,666 --> 00:10:11,856
developer to support this


356
00:10:11,856 --> 00:10:12,286
workflow.


357
00:10:12,816 --> 00:10:16,096
The three things you need to do


358
00:10:16,346 --> 00:10:17,656
are provide AutoFill with the


359
00:10:17,656 --> 00:10:18,866
credential identities you want


360
00:10:18,866 --> 00:10:19,966
it to suggest to the user.


361
00:10:20,926 --> 00:10:21,836
Implement support in your


362
00:10:21,836 --> 00:10:22,736
extension to provide the


363
00:10:22,736 --> 00:10:24,196
passwords when those suggestions


364
00:10:24,196 --> 00:10:26,266
are selected, and display custom


365
00:10:26,266 --> 00:10:27,666
UI in your extension to


366
00:10:27,666 --> 00:10:28,866
authenticate the user before


367
00:10:28,866 --> 00:10:30,446
returning the credential, if


368
00:10:30,446 --> 00:10:31,546
your UX requires it.


369
00:10:32,546 --> 00:10:33,736
Once again, this step is


370
00:10:33,736 --> 00:10:34,196
optional.


371
00:10:34,776 --> 00:10:36,036
If you don't show custom UI for


372
00:10:36,036 --> 00:10:37,716
authentication, AutoFill will


373
00:10:37,716 --> 00:10:38,646
perform appropriate


374
00:10:38,646 --> 00:10:39,746
authentication for you.


375
00:10:42,936 --> 00:10:44,296
Credential identities are


376
00:10:44,296 --> 00:10:46,246
represented by instances of AS


377
00:10:46,246 --> 00:10:47,606
Password Credential Identity.


378
00:10:48,336 --> 00:10:49,526
This class contains all the


379
00:10:49,526 --> 00:10:50,816
information about a credential


380
00:10:50,816 --> 00:10:52,126
that AutoFill needs to know in


381
00:10:52,126 --> 00:10:53,246
order to determine where to


382
00:10:53,246 --> 00:10:53,746
offer it.


383
00:10:54,676 --> 00:10:55,636
This includes a service


384
00:10:55,636 --> 00:10:57,526
identifier, which tells AutoFill


385
00:10:57,526 --> 00:10:59,036
which apps or websites to


386
00:10:59,036 --> 00:11:00,336
suggest the credential on.


387
00:11:01,496 --> 00:11:03,086
The username of the credential,


388
00:11:03,626 --> 00:11:06,646
and optional record identifier


389
00:11:06,646 --> 00:11:07,906
string that you can use to


390
00:11:07,906 --> 00:11:09,086
correlate this identity to a


391
00:11:09,086 --> 00:11:10,176
record in your app's own


392
00:11:10,176 --> 00:11:13,446
database, and a rank parameter.


393
00:11:14,336 --> 00:11:15,776
If the user has more credentials


394
00:11:15,776 --> 00:11:17,166
for a particular service than


395
00:11:17,166 --> 00:11:19,006
the QuickType bar can show, you


396
00:11:19,006 --> 00:11:20,196
can use the rank parameter to


397
00:11:20,196 --> 00:11:21,156
mark certain credential


398
00:11:21,156 --> 00:11:22,626
identities as higher or lower


399
00:11:22,626 --> 00:11:23,206
priority.


400
00:11:24,436 --> 00:11:25,556
Credential identities having a


401
00:11:25,656 --> 00:11:26,826
higher rank value will be


402
00:11:26,826 --> 00:11:27,956
ordered before credential


403
00:11:27,956 --> 00:11:29,466
identities with lower ranks.


404
00:11:32,476 --> 00:11:34,316
These credential identities get


405
00:11:34,316 --> 00:11:35,696
saved to the Credential Identity


406
00:11:35,696 --> 00:11:37,426
Store, which is the database


407
00:11:37,426 --> 00:11:38,896
inside your app's container that


408
00:11:38,896 --> 00:11:40,606
you can modify using the AS


409
00:11:40,606 --> 00:11:42,296
Credential Identity Store class.


410
00:11:43,356 --> 00:11:44,846
AutoFill suggests credentials to


411
00:11:44,846 --> 00:11:46,276
the user by searching through


412
00:11:46,276 --> 00:11:47,456
your app's Credential Identity


413
00:11:47,456 --> 00:11:47,736
Store.


414
00:11:48,316 --> 00:11:51,836
The Credential Identity Store is


415
00:11:51,836 --> 00:11:53,196
secured with complete unless


416
00:11:53,196 --> 00:11:55,026
open data protection, so no


417
00:11:55,026 --> 00:11:56,446
operations can start while the


418
00:11:56,446 --> 00:11:57,266
device is locked.


419
00:11:58,246 --> 00:11:59,416
The system never syncs the


420
00:11:59,416 --> 00:12:00,616
Credential Identity Store to the


421
00:12:00,616 --> 00:12:02,516
Cloud or includes it in backups,


422
00:12:02,736 --> 00:12:04,746
so this information never leaves


423
00:12:05,276 --> 00:12:06,000
the device.


424
00:12:07,826 --> 00:12:09,246
Each app has its own Credential


425
00:12:09,246 --> 00:12:11,216
Identity Store, and only the app


426
00:12:11,216 --> 00:12:12,736
and its extensions can modify


427
00:12:13,366 --> 00:12:13,436
it.


428
00:12:14,066 --> 00:12:15,336
The store is only read by


429
00:12:15,336 --> 00:12:17,246
AutoFill for determining which


430
00:12:17,246 --> 00:12:19,286
credentials to suggest to users.


431
00:12:19,836 --> 00:12:23,316
And the Credential Identity


432
00:12:23,316 --> 00:12:25,046
Store can only be modified while


433
00:12:25,046 --> 00:12:26,226
your app's extension has been


434
00:12:26,226 --> 00:12:27,296
enabled by the user.


435
00:12:28,506 --> 00:12:29,716
If your extension is disabled,


436
00:12:29,866 --> 00:12:31,036
attempts to update the store


437
00:12:31,036 --> 00:12:31,616
will fail.


438
00:12:32,106 --> 00:12:33,386
And if the user disables your


439
00:12:33,386 --> 00:12:34,806
extension or deletes your app,


440
00:12:35,146 --> 00:12:36,296
the Credential Identity Store


441
00:12:36,296 --> 00:12:37,026
will be deleted.


442
00:12:37,476 --> 00:12:41,276
Your app should update its


443
00:12:41,276 --> 00:12:42,706
Credential Identity Store when


444
00:12:42,706 --> 00:12:43,856
it has new information about


445
00:12:43,856 --> 00:12:45,076
what credentials it can offer.


446
00:12:46,316 --> 00:12:47,896
As an example, let's say your


447
00:12:47,896 --> 00:12:49,616
app uses an online service to


448
00:12:49,616 --> 00:12:50,916
store the user's credentials.


449
00:12:51,456 --> 00:12:54,156
When the user signs in, your app


450
00:12:54,156 --> 00:12:55,006
would start retrieving the


451
00:12:55,006 --> 00:12:56,026
user's credentials.


452
00:12:56,486 --> 00:12:58,356
At this time, you would update


453
00:12:58,356 --> 00:12:59,186
the list of credential


454
00:12:59,186 --> 00:13:00,796
identities in the store, so the


455
00:13:00,796 --> 00:13:02,066
newly-fetched credentials could


456
00:13:02,066 --> 00:13:03,226
be suggested on the QuickType


457
00:13:03,226 --> 00:13:03,406
bar.


458
00:13:03,926 --> 00:13:08,506
As the user adds, removes, or


459
00:13:08,506 --> 00:13:10,326
modifies their credentials, your


460
00:13:10,326 --> 00:13:11,446
app updates the Credential


461
00:13:11,446 --> 00:13:13,556
Identity Store so it continues


462
00:13:13,556 --> 00:13:15,006
to accurately reflect this set


463
00:13:15,006 --> 00:13:16,296
of credentials that your app can


464
00:13:16,296 --> 00:13:16,716
provide.


465
00:13:18,516 --> 00:13:20,046
These updates might be because


466
00:13:20,046 --> 00:13:21,466
the user locally makes changes


467
00:13:21,536 --> 00:13:23,426
within your app, or perhaps


468
00:13:23,426 --> 00:13:24,096
because your app is


469
00:13:24,096 --> 00:13:25,566
synchronizing changes from other


470
00:13:25,566 --> 00:13:27,056
devices signed into the online


471
00:13:27,056 --> 00:13:27,606
service.


472
00:13:29,746 --> 00:13:31,616
Then, if the user were to sign


473
00:13:31,616 --> 00:13:33,096
out of the online service on the


474
00:13:33,096 --> 00:13:34,926
current device, your app would


475
00:13:34,926 --> 00:13:36,016
remove all the credential


476
00:13:36,016 --> 00:13:37,696
identities from the store, so


477
00:13:37,696 --> 00:13:39,136
the user doesn't continue to see


478
00:13:39,136 --> 00:13:40,036
suggestions for these


479
00:13:40,036 --> 00:13:40,606
credentials.


480
00:13:44,086 --> 00:13:46,136
In your code, you use the AS


481
00:13:46,136 --> 00:13:47,826
Credential Identity Store Class


482
00:13:47,826 --> 00:13:48,976
to interact with the Credential


483
00:13:48,976 --> 00:13:51,686
Identity Store.


484
00:13:51,686 --> 00:13:53,246
Using the Replace Credential


485
00:13:53,246 --> 00:13:55,286
Identities With and Remove All


486
00:13:55,286 --> 00:13:56,946
Credential Identities methods,


487
00:13:57,716 --> 00:13:59,116
you can replace or clear the


488
00:13:59,116 --> 00:14:00,516
list of credential identities


489
00:14:00,516 --> 00:14:01,676
that AutoFill will consider


490
00:14:01,676 --> 00:14:02,246
suggesting.


491
00:14:04,556 --> 00:14:06,026
When individual changes are


492
00:14:06,026 --> 00:14:07,826
made, these saved credential


493
00:14:07,826 --> 00:14:09,496
identities or removed credential


494
00:14:09,496 --> 00:14:11,666
identities methods allow you to


495
00:14:11,666 --> 00:14:13,846
add, update or remove credential


496
00:14:13,846 --> 00:14:15,386
identities without completely


497
00:14:15,386 --> 00:14:16,596
replacing the contents of the


498
00:14:16,596 --> 00:14:16,906
store.


499
00:14:20,426 --> 00:14:21,486
One important aspect of the


500
00:14:21,486 --> 00:14:23,426
system to understand is that the


501
00:14:23,426 --> 00:14:25,036
Credential Identity Store may be


502
00:14:25,036 --> 00:14:26,506
deleted at times that your app


503
00:14:26,506 --> 00:14:27,516
won't be able to predict.


504
00:14:28,076 --> 00:14:31,276
As a few examples, if the user


505
00:14:31,276 --> 00:14:32,596
disables your extension for


506
00:14:32,596 --> 00:14:34,336
AutoFill, then later re-enables


507
00:14:34,336 --> 00:14:36,026
it, the system will have cleared


508
00:14:36,026 --> 00:14:36,386
the store.


509
00:14:37,296 --> 00:14:38,696
If the system determines that


510
00:14:38,696 --> 00:14:39,996
your app provides credential


511
00:14:39,996 --> 00:14:41,546
identities, but consistently


512
00:14:41,546 --> 00:14:43,076
fails to provide the passwords


513
00:14:43,076 --> 00:14:44,276
when the user selects these


514
00:14:44,276 --> 00:14:46,076
credentials, the credential


515
00:14:46,076 --> 00:14:47,976
identity store may be deleted to


516
00:14:47,976 --> 00:14:49,116
prevent the user from seeing


517
00:14:49,116 --> 00:14:49,926
these stale credential


518
00:14:49,926 --> 00:14:50,646
suggestions.


519
00:14:51,076 --> 00:14:54,756
If the user restores their


520
00:14:54,756 --> 00:14:56,176
device from a backup where they


521
00:14:56,176 --> 00:14:57,116
were using your credential


522
00:14:57,116 --> 00:14:59,056
provider extension, the store


523
00:14:59,056 --> 00:15:00,306
won't contain any credential


524
00:15:00,306 --> 00:15:01,736
identities since it wasn't


525
00:15:01,736 --> 00:15:02,596
included in the backup.


526
00:15:02,596 --> 00:15:04,546
Your app should be able to


527
00:15:04,546 --> 00:15:06,516
handle these cases, and AS


528
00:15:06,596 --> 00:15:08,316
Credential Identity Store can


529
00:15:08,316 --> 00:15:09,576
help you detect these cases, so


530
00:15:09,706 --> 00:15:10,726
you can take the appropriate


531
00:15:10,726 --> 00:15:12,006
action when you need to update


532
00:15:12,006 --> 00:15:12,376
the store.


533
00:15:15,776 --> 00:15:17,336
You can use the Get State method


534
00:15:17,446 --> 00:15:18,666
to ask the system about the


535
00:15:18,666 --> 00:15:20,006
state of your app's Credential


536
00:15:20,006 --> 00:15:21,846
Identity Store, return it as an


537
00:15:21,846 --> 00:15:23,356
AS Credential Identity Store


538
00:15:23,356 --> 00:15:24,176
State Object.


539
00:15:25,876 --> 00:15:27,566
The first thing it tells you is


540
00:15:27,566 --> 00:15:28,926
whether or not the user has your


541
00:15:28,926 --> 00:15:30,016
app extension enabled.


542
00:15:30,726 --> 00:15:31,816
You should check this before


543
00:15:31,816 --> 00:15:32,686
attempting to update the


544
00:15:32,686 --> 00:15:33,746
credential identity store.


545
00:15:34,256 --> 00:15:35,606
If your extension is disabled,


546
00:15:35,736 --> 00:15:36,816
there is no point in trying to


547
00:15:36,816 --> 00:15:38,136
save or remove credential


548
00:15:38,136 --> 00:15:38,716
identities.


549
00:15:42,116 --> 00:15:44,306
The State also has a Supports


550
00:15:44,306 --> 00:15:45,606
Incremental Updates Property,


551
00:15:46,026 --> 00:15:47,136
which you can use to determine


552
00:15:47,136 --> 00:15:48,626
if the Identity Store is intact


553
00:15:48,626 --> 00:15:49,576
since the last time you've


554
00:15:49,576 --> 00:15:51,636
updated it.


555
00:15:51,636 --> 00:15:52,746
If you previously saved any


556
00:15:52,746 --> 00:15:53,756
credential identities to the


557
00:15:53,756 --> 00:15:55,826
store, this will return true,


558
00:15:56,436 --> 00:15:57,646
indicating you should use the


559
00:15:57,646 --> 00:15:59,146
incremental Save Credential


560
00:15:59,146 --> 00:16:00,696
Identities and Remove Credential


561
00:16:00,696 --> 00:16:03,386
Identities methods.


562
00:16:03,386 --> 00:16:04,916
Otherwise, if the Store hasn't


563
00:16:04,916 --> 00:16:06,656
been written to yet, perhaps


564
00:16:06,656 --> 00:16:07,746
because your app was just


565
00:16:07,786 --> 00:16:08,996
disabled and re-enabled,


566
00:16:10,026 --> 00:16:11,446
Supports Incremental Updates


567
00:16:11,446 --> 00:16:12,546
will return false.


568
00:16:12,736 --> 00:16:13,706
And you should populate the


569
00:16:13,706 --> 00:16:15,176
Identity Store by providing the


570
00:16:15,176 --> 00:16:16,176
full list of credential


571
00:16:16,176 --> 00:16:18,046
identities using the Replace


572
00:16:18,046 --> 00:16:19,366
Credential Identities With


573
00:16:19,626 --> 00:16:19,996
method.


574
00:16:22,306 --> 00:16:23,466
Once your app starts saving


575
00:16:23,466 --> 00:16:24,626
credential identities to the


576
00:16:24,626 --> 00:16:26,716
store, AutoFill can start


577
00:16:26,716 --> 00:16:27,546
suggesting your app's


578
00:16:27,546 --> 00:16:28,576
credentials in the QuickType


579
00:16:28,576 --> 00:16:28,776
bar.


580
00:16:29,916 --> 00:16:31,556
Next, you'll need to add support


581
00:16:31,556 --> 00:16:32,816
in your extension to provide the


582
00:16:32,816 --> 00:16:33,976
password when one of these


583
00:16:33,976 --> 00:16:35,246
credential suggestions is


584
00:16:35,246 --> 00:16:35,756
selected.


585
00:16:37,836 --> 00:16:39,846
When this happens, AutoFill will


586
00:16:39,846 --> 00:16:41,376
first launch your extension and


587
00:16:41,376 --> 00:16:42,866
ask it for the password without


588
00:16:42,866 --> 00:16:44,166
presenting your UI on screen.


589
00:16:44,346 --> 00:16:46,886
When it does this, AutoFill will


590
00:16:46,886 --> 00:16:48,596
call the Provide Credential


591
00:16:48,626 --> 00:16:50,306
Without User Interaction For


592
00:16:50,536 --> 00:16:51,896
method on your view controller,


593
00:16:52,616 --> 00:16:53,846
providing an AS Password


594
00:16:53,846 --> 00:16:54,776
Credential Identity,


595
00:16:55,026 --> 00:16:56,026
representing the credential


596
00:16:56,026 --> 00:16:56,526
being filled.


597
00:16:57,136 --> 00:16:59,766
In this method, you will look up


598
00:16:59,766 --> 00:17:00,956
the associated password


599
00:17:00,956 --> 00:17:01,786
belonging to the given


600
00:17:01,786 --> 00:17:03,346
credential and hand it back to


601
00:17:03,346 --> 00:17:05,106
AutoFill using the Complete


602
00:17:05,106 --> 00:17:06,646
Request With Selected Credential


603
00:17:06,646 --> 00:17:07,026
method.


604
00:17:07,536 --> 00:17:11,016
If your extension wants to have


605
00:17:11,016 --> 00:17:12,526
its UI presented at this point,


606
00:17:13,195 --> 00:17:14,546
cancel the extension request


607
00:17:14,705 --> 00:17:15,986
with the User Interaction


608
00:17:15,986 --> 00:17:18,016
Required error code in the


609
00:17:18,016 --> 00:17:19,846
domain AS Extension Error


610
00:17:19,846 --> 00:17:20,236
Domain.


611
00:17:22,116 --> 00:17:23,836
The system will then call the


612
00:17:23,836 --> 00:17:25,746
Prepare Interface To Provide


613
00:17:25,746 --> 00:17:27,386
Credential For method on your


614
00:17:27,386 --> 00:17:28,966
view controller, and present its


615
00:17:28,966 --> 00:17:29,286
UI.


616
00:17:30,436 --> 00:17:31,966
In this method, your extension


617
00:17:31,966 --> 00:17:33,786
sets up its UI for its workflow


618
00:17:33,786 --> 00:17:34,726
to provide the password.


619
00:17:35,796 --> 00:17:37,236
When the password is eventually


620
00:17:37,236 --> 00:17:39,006
available, you return the


621
00:17:39,006 --> 00:17:40,916
credential to AutoFill, also


622
00:17:40,916 --> 00:17:42,356
using the Complete Request With


623
00:17:42,356 --> 00:17:43,586
Selected Credential method.


624
00:17:44,806 --> 00:17:46,346
Once again, if your Extensions


625
00:17:46,346 --> 00:17:48,746
UI was presented, AutoFill won't


626
00:17:48,746 --> 00:17:50,076
perform any authentication


627
00:17:50,076 --> 00:17:51,166
before filling the returned


628
00:17:51,166 --> 00:17:51,676
credential.


629
00:17:52,266 --> 00:17:53,486
It is up to your extension to


630
00:17:53,486 --> 00:17:54,236
decide what type of


631
00:17:54,236 --> 00:17:55,546
authentication is needed.


632
00:17:59,016 --> 00:18:00,436
The most important thing to keep


633
00:18:00,436 --> 00:18:01,526
in mind when implementing this


634
00:18:01,526 --> 00:18:02,896
functionality is that your


635
00:18:02,896 --> 00:18:04,346
extension needs to respond to


636
00:18:04,346 --> 00:18:05,846
the initial non-UI request


637
00:18:05,846 --> 00:18:07,376
quickly, regardless of the


638
00:18:07,376 --> 00:18:07,896
results.


639
00:18:09,316 --> 00:18:11,066
Your UI hasn't been presented


640
00:18:11,066 --> 00:18:12,816
yet, so it's not obvious to the


641
00:18:12,816 --> 00:18:14,086
user that your extension is


642
00:18:14,086 --> 00:18:15,056
working in the background.


643
00:18:16,076 --> 00:18:17,226
If it takes a long time to


644
00:18:17,226 --> 00:18:18,776
return the password, the user


645
00:18:18,776 --> 00:18:20,676
may perceive the system, your


646
00:18:20,676 --> 00:18:22,246
app, or the service they're


647
00:18:22,246 --> 00:18:23,846
using as being unresponsive.


648
00:18:24,796 --> 00:18:25,786
This would be a poor user


649
00:18:25,786 --> 00:18:26,426
experience.


650
00:18:26,946 --> 00:18:29,436
And this is so important.


651
00:18:29,776 --> 00:18:31,396
If a few seconds pass, and your


652
00:18:31,396 --> 00:18:32,556
extension hasn't returned the


653
00:18:32,556 --> 00:18:34,586
password, requested to show its


654
00:18:34,586 --> 00:18:36,356
UI, or canceled with another


655
00:18:36,356 --> 00:18:38,116
error, AutoFill will cancel the


656
00:18:38,116 --> 00:18:39,336
extension without filling the


657
00:18:39,336 --> 00:18:39,776
credential.


658
00:18:41,616 --> 00:18:43,486
However, this timeout doesn't


659
00:18:43,486 --> 00:18:45,376
happen for debug builds, or when


660
00:18:45,376 --> 00:18:47,066
running on the simulator, so you


661
00:18:47,066 --> 00:18:48,226
can take your time to debug the


662
00:18:48,226 --> 00:18:49,556
extension without the system


663
00:18:49,556 --> 00:18:49,996
interrupting.


664
00:18:54,236 --> 00:18:55,746
When you're implementing support


665
00:18:55,746 --> 00:18:56,736
for displaying your app's


666
00:18:56,736 --> 00:18:57,726
credentials on the QuickType


667
00:18:57,726 --> 00:18:59,346
bar, it's essential that you


668
00:18:59,346 --> 00:19:00,406
keep the Credential Identity


669
00:19:00,406 --> 00:19:02,226
Store up to date, and in sync


670
00:19:02,226 --> 00:19:03,156
with the credentials your app


671
00:19:03,156 --> 00:19:03,756
knows about.


672
00:19:04,856 --> 00:19:06,276
If the store becomes out of sync


673
00:19:06,276 --> 00:19:07,996
with your app's data, the user


674
00:19:07,996 --> 00:19:09,166
might not see newly added


675
00:19:09,166 --> 00:19:10,156
credentials on the QuickType


676
00:19:10,156 --> 00:19:12,166
bar, or may continue to see


677
00:19:12,166 --> 00:19:13,436
credentials on the QuickType bar


678
00:19:13,606 --> 00:19:14,816
even after they've been deleted


679
00:19:14,816 --> 00:19:15,286
from your app.


680
00:19:16,686 --> 00:19:18,046
You should take advantage of AS


681
00:19:18,046 --> 00:19:19,416
Credential Identity Store's


682
00:19:19,616 --> 00:19:21,186
incremental update APIs.


683
00:19:21,906 --> 00:19:23,346
Replacing the entire list of


684
00:19:23,346 --> 00:19:25,266
credential identities every time


685
00:19:25,266 --> 00:19:26,986
any credential has changed, may


686
00:19:26,986 --> 00:19:28,286
become expensive the more


687
00:19:28,286 --> 00:19:29,466
credential identities you need


688
00:19:29,466 --> 00:19:29,966
to update.


689
00:19:31,016 --> 00:19:32,506
It's better for performance to


690
00:19:32,506 --> 00:19:33,666
incrementally save new


691
00:19:33,666 --> 00:19:35,396
credential identities or remove


692
00:19:35,396 --> 00:19:36,986
deleted ones as those changes


693
00:19:36,986 --> 00:19:39,076
are made, rather than re-writing


694
00:19:39,076 --> 00:19:39,866
the entire store.


695
00:19:42,316 --> 00:19:43,916
Keep in mind, when your


696
00:19:43,916 --> 00:19:45,266
extension is being called, the


697
00:19:45,336 --> 00:19:46,496
user is in the middle of using


698
00:19:46,496 --> 00:19:47,106
another app.


699
00:19:47,816 --> 00:19:49,046
Keep the interactions and your


700
00:19:49,046 --> 00:19:50,886
UI to a minimum, and only


701
00:19:50,886 --> 00:19:52,306
include what the user needs in


702
00:19:52,306 --> 00:19:53,546
order to user their passwords.


703
00:19:56,496 --> 00:19:57,666
If loading your password


704
00:19:57,666 --> 00:19:59,086
database involves expensive


705
00:19:59,086 --> 00:20:01,206
setup, avoid redoing the setup


706
00:20:01,206 --> 00:20:02,676
in the view load method of your


707
00:20:02,676 --> 00:20:04,016
view controller, and tearing it


708
00:20:04,016 --> 00:20:04,596
down later.


709
00:20:05,416 --> 00:20:06,836
The system may reuse your app


710
00:20:06,836 --> 00:20:08,446
extensions process if the user


711
00:20:08,446 --> 00:20:09,806
sequentially signs into multiple


712
00:20:09,806 --> 00:20:11,386
services using your extension.


713
00:20:12,686 --> 00:20:13,886
Consider using a singleton


714
00:20:13,886 --> 00:20:15,766
pattern, so any work done in one


715
00:20:15,766 --> 00:20:17,596
invocation of your extension can


716
00:20:17,596 --> 00:20:19,276
be reused the next time if it


717
00:20:19,276 --> 00:20:20,296
doesn't need to be repeated.


718
00:20:20,836 --> 00:20:24,836
And that wraps up how you can


719
00:20:24,836 --> 00:20:26,096
display credentials from your


720
00:20:26,096 --> 00:20:29,206
app in the QuickType bar.


721
00:20:29,376 --> 00:20:31,056
Finally, I'll discuss one more


722
00:20:31,056 --> 00:20:32,726
API your extension may find


723
00:20:32,726 --> 00:20:33,056
useful.


724
00:20:34,106 --> 00:20:35,426
When the user enables your app


725
00:20:35,426 --> 00:20:37,006
extension for Password AutoFill,


726
00:20:37,276 --> 00:20:38,296
you may have some setup that


727
00:20:38,296 --> 00:20:39,796
needs to be done before the user


728
00:20:39,796 --> 00:20:41,096
can get the best experience.


729
00:20:41,676 --> 00:20:43,186
For starters, if you support


730
00:20:43,186 --> 00:20:44,046
showing credentials in the


731
00:20:44,046 --> 00:20:45,726
QuickType bar, your app or


732
00:20:45,726 --> 00:20:47,026
extension will need to provide


733
00:20:47,026 --> 00:20:48,126
its credential identities to


734
00:20:48,126 --> 00:20:49,086
AutoFill first.


735
00:20:50,116 --> 00:20:51,166
But it may also be useful to


736
00:20:51,166 --> 00:20:52,296
show other settings at this


737
00:20:52,296 --> 00:20:54,226
point, perhaps to offer the user


738
00:20:54,226 --> 00:20:55,416
the ability to sign in to an


739
00:20:55,416 --> 00:20:56,736
online service to retrieve the


740
00:20:56,736 --> 00:20:58,016
passwords if they haven't


741
00:20:58,016 --> 00:20:58,396
already.


742
00:21:00,286 --> 00:21:02,156
Authentication services provides


743
00:21:02,156 --> 00:21:03,366
an API to support these work


744
00:21:03,366 --> 00:21:03,816
flows.


745
00:21:04,476 --> 00:21:05,516
When these are enabled to your


746
00:21:05,516 --> 00:21:07,396
extension, settings can launch


747
00:21:07,396 --> 00:21:08,726
your extension and present its


748
00:21:08,726 --> 00:21:10,216
UI, so you can let users


749
00:21:10,216 --> 00:21:11,386
configure it.


750
00:21:13,096 --> 00:21:15,646
To opt into this behavior, open


751
00:21:15,646 --> 00:21:17,076
the Info Property List for your


752
00:21:17,076 --> 00:21:19,176
app extension and add a new key


753
00:21:19,276 --> 00:21:21,096
under NS extension attributes.


754
00:21:21,156 --> 00:21:23,716
AS Credential Provider Extension


755
00:21:23,716 --> 00:21:26,186
shows configuration UI with the


756
00:21:26,186 --> 00:21:27,496
bullion value of yes.


757
00:21:28,426 --> 00:21:29,666
This is how the system will know


758
00:21:29,666 --> 00:21:30,956
to launch your extension when


759
00:21:30,956 --> 00:21:31,496
its enabled.


760
00:21:33,896 --> 00:21:36,276
Then, implement the Prepare


761
00:21:36,276 --> 00:21:37,546
Interface For Extension


762
00:21:37,546 --> 00:21:38,906
Configuration method in your


763
00:21:38,906 --> 00:21:40,466
view controller, and set up the


764
00:21:40,466 --> 00:21:41,776
appropriate UI for when your


765
00:21:41,776 --> 00:21:43,026
extension is first enabled.


766
00:21:43,606 --> 00:21:47,146
When your extension is done,


767
00:21:47,726 --> 00:21:49,076
call the Complete Extension


768
00:21:49,076 --> 00:21:50,906
Configuration Request method on


769
00:21:50,906 --> 00:21:52,616
your extension context, and


770
00:21:52,616 --> 00:21:54,256
settings will dismiss your UI.


771
00:21:54,336 --> 00:21:57,036
At this point, your extension is


772
00:21:57,036 --> 00:21:57,456
enabled.


773
00:21:57,906 --> 00:21:58,936
It has provided credential


774
00:21:58,936 --> 00:22:00,236
identities for AutoFill to


775
00:22:00,236 --> 00:22:01,486
suggest for the QuickType bar.


776
00:22:02,136 --> 00:22:03,356
It can provide the passwords


777
00:22:03,356 --> 00:22:04,326
when those suggestions are


778
00:22:04,326 --> 00:22:06,316
chosen, and it can show the user


779
00:22:06,316 --> 00:22:07,666
a list of all their credentials.


780
00:22:08,236 --> 00:22:09,496
You're now done integrating your


781
00:22:09,496 --> 00:22:10,926
app with Password AutoFill and


782
00:22:10,926 --> 00:22:11,906
the users can enjoy the


783
00:22:11,906 --> 00:22:13,166
convenience of AutoFilling


784
00:22:13,166 --> 00:22:14,576
Passwords saved into your app


785
00:22:14,806 --> 00:22:15,646
wherever they're needed.


786
00:22:18,276 --> 00:22:19,636
There are just a few more


787
00:22:19,676 --> 00:22:20,906
general best practices to


788
00:22:20,906 --> 00:22:22,156
consider while developing your


789
00:22:22,156 --> 00:22:22,706
extension.


790
00:22:23,256 --> 00:22:27,496
As discussed before, your


791
00:22:27,496 --> 00:22:28,856
principal view controller may be


792
00:22:28,856 --> 00:22:30,396
responsible for showing the UI


793
00:22:30,396 --> 00:22:31,256
for a diverse set of


794
00:22:31,256 --> 00:22:32,076
functionalities.


795
00:22:32,866 --> 00:22:34,156
To achieve this, we recommend


796
00:22:34,156 --> 00:22:35,536
using separate view controllers


797
00:22:35,536 --> 00:22:36,876
managed by your principal view


798
00:22:36,876 --> 00:22:37,376
controller.


799
00:22:38,596 --> 00:22:40,286
For example, you may want to


800
00:22:40,286 --> 00:22:41,756
have one view controller class


801
00:22:41,756 --> 00:22:42,786
for displaying the credential


802
00:22:42,786 --> 00:22:43,146
list.


803
00:22:43,456 --> 00:22:44,896
And another for authenticating


804
00:22:44,896 --> 00:22:45,886
the user when filling


805
00:22:45,886 --> 00:22:46,546
credentials.


806
00:22:47,056 --> 00:22:48,996
You can either present these


807
00:22:48,996 --> 00:22:50,066
view controllers from your


808
00:22:50,066 --> 00:22:51,826
principal view controller, or


809
00:22:51,826 --> 00:22:53,306
use view controller containment


810
00:22:53,376 --> 00:22:54,366
to embed their views.


811
00:22:54,506 --> 00:22:56,496
And if you prepare your


812
00:22:56,496 --> 00:22:57,746
interface by presenting view


813
00:22:57,746 --> 00:22:59,366
controllers, the presentation


814
00:22:59,366 --> 00:23:00,206
should be done without


815
00:23:00,206 --> 00:23:01,736
animation, since the


816
00:23:01,736 --> 00:23:03,086
presentation of your principal


817
00:23:03,086 --> 00:23:04,296
view controller is already


818
00:23:04,296 --> 00:23:04,766
animated.


819
00:23:05,356 --> 00:23:09,766
In general, extensions should be


820
00:23:09,766 --> 00:23:10,826
lightweight and ready to


821
00:23:10,826 --> 00:23:12,416
terminate when they're done, and


822
00:23:12,416 --> 00:23:13,396
this includes AutoFill


823
00:23:13,396 --> 00:23:14,896
Credential Provider Extensions.


824
00:23:16,046 --> 00:23:17,226
Your extension will be invoked


825
00:23:17,226 --> 00:23:18,846
to perform one particular task,


826
00:23:18,996 --> 00:23:20,126
and you shouldn't include any


827
00:23:20,126 --> 00:23:21,966
unnecessary work flows or user


828
00:23:21,966 --> 00:23:23,216
interactions beyond what is


829
00:23:23,216 --> 00:23:23,536
needed.


830
00:23:25,116 --> 00:23:26,666
Be aware that the system may


831
00:23:26,666 --> 00:23:27,866
terminate or suspend your


832
00:23:27,866 --> 00:23:29,526
extension for various reasons at


833
00:23:29,526 --> 00:23:30,026
any time.


834
00:23:30,026 --> 00:23:32,256
For example, the system will


835
00:23:32,256 --> 00:23:33,566
terminate AutoFill Credential


836
00:23:33,566 --> 00:23:34,866
Provider Extensions while


837
00:23:34,866 --> 00:23:36,166
they're in use if the user


838
00:23:36,166 --> 00:23:37,016
switches apps.


839
00:23:38,656 --> 00:23:39,936
And your extension will have a


840
00:23:39,936 --> 00:23:41,206
separate sign box from your main


841
00:23:41,206 --> 00:23:42,616
app, but it will still need to


842
00:23:42,616 --> 00:23:44,066
share data, such as the user's


843
00:23:44,066 --> 00:23:44,726
credentials.


844
00:23:45,586 --> 00:23:47,106
Use App Groups or Shared


845
00:23:47,106 --> 00:23:48,746
Keychains to share data between


846
00:23:48,746 --> 00:23:50,146
your app and its extensions.


847
00:23:51,316 --> 00:23:52,616
For a review about extension


848
00:23:52,616 --> 00:23:54,596
development in general, refer to


849
00:23:54,596 --> 00:23:56,426
the Creating Extensions for iOS


850
00:23:56,506 --> 00:23:58,856
and OS 10 part two session from


851
00:23:58,856 --> 00:24:00,436
WWDC 2014.


852
00:24:03,036 --> 00:24:05,246
Finally, you can use Safari if


853
00:24:05,246 --> 00:24:06,046
you need to debug your


854
00:24:06,046 --> 00:24:07,386
credential provider extension


855
00:24:07,576 --> 00:24:08,456
while testing filling


856
00:24:08,456 --> 00:24:09,096
credentials.


857
00:24:10,396 --> 00:24:12,416
To do this, first activate the


858
00:24:12,416 --> 00:24:13,966
extension scheme, select a


859
00:24:13,966 --> 00:24:15,476
target, and select Run.


860
00:24:17,556 --> 00:24:19,526
When you do this, Xcode will ask


861
00:24:19,526 --> 00:24:20,896
you to choose an app to host the


862
00:24:20,896 --> 00:24:21,476
extension.


863
00:24:22,136 --> 00:24:23,886
Choose Safari from the list, and


864
00:24:23,886 --> 00:24:25,266
click the Run button.


865
00:24:26,766 --> 00:24:28,386
Safari will then open, and you


866
00:24:28,386 --> 00:24:29,946
can navigate to a sign-in page


867
00:24:29,946 --> 00:24:30,926
where you want to test your


868
00:24:30,926 --> 00:24:31,496
extension.


869
00:24:32,376 --> 00:24:33,496
When you open your credential


870
00:24:33,496 --> 00:24:34,936
list, or select a credential


871
00:24:34,936 --> 00:24:36,416
from the QuickType bar, your


872
00:24:36,546 --> 00:24:38,076
extension will be launched, and


873
00:24:38,076 --> 00:24:39,376
Xcode will attach the debugger


874
00:24:39,376 --> 00:24:40,916
to it, so you can begin your


875
00:24:40,916 --> 00:24:41,576
debug session.


876
00:24:44,506 --> 00:24:46,106
For debugging your extension in


877
00:24:46,106 --> 00:24:48,316
the other cases, use the Attach


878
00:24:48,316 --> 00:24:50,436
to Process Item in Xcode's debug


879
00:24:50,436 --> 00:24:51,806
menu to start attaching the


880
00:24:51,806 --> 00:24:52,206
debugger.


881
00:24:53,426 --> 00:24:54,626
You can then manually open


882
00:24:54,626 --> 00:24:55,676
Settings to enable your


883
00:24:55,676 --> 00:24:56,746
extension if you want to test


884
00:24:56,746 --> 00:24:58,806
the settings UI, or you can open


885
00:24:58,806 --> 00:25:00,326
any app's login screen if you'd


886
00:25:00,326 --> 00:25:01,636
like to debug AutoFill there.


887
00:25:05,376 --> 00:25:07,686
In summary, iOS 12 enables


888
00:25:07,686 --> 00:25:08,836
Password Manager apps to


889
00:25:08,836 --> 00:25:09,606
integrate with Password


890
00:25:09,606 --> 00:25:10,056
AutoFill.


891
00:25:11,146 --> 00:25:12,626
Using APIs from the New


892
00:25:12,626 --> 00:25:13,736
Authentication Services


893
00:25:13,736 --> 00:25:15,426
framework, your credential


894
00:25:15,426 --> 00:25:16,896
provider extension can show the


895
00:25:16,896 --> 00:25:17,666
user a list of their


896
00:25:17,666 --> 00:25:18,296
credentials.


897
00:25:18,916 --> 00:25:19,746
Show credentials on the


898
00:25:19,746 --> 00:25:21,696
QuickType bar, and optionally


899
00:25:21,696 --> 00:25:22,976
provide a way for the user to


900
00:25:22,976 --> 00:25:24,346
configure the extension from


901
00:25:24,346 --> 00:25:24,856
settings.


902
00:25:27,416 --> 00:25:29,156
For more information, refer to


903
00:25:29,156 --> 00:25:30,486
the Apple Developer Page for


904
00:25:30,486 --> 00:25:31,006
this session.


905
00:25:32,066 --> 00:25:32,996
To learn more about the other


906
00:25:32,996 --> 00:25:33,916
improvements to password


907
00:25:33,916 --> 00:25:36,226
management in iOS 12, see the


908
00:25:36,226 --> 00:25:37,796
Automatic Strong Passwords and


909
00:25:37,796 --> 00:25:39,276
Security Code AutoFill session.


910
00:25:40,156 --> 00:25:41,226
And if you'd like to learn more


911
00:25:41,226 --> 00:25:42,216
about the Password AutoFill


912
00:25:42,216 --> 00:25:44,276
feature and associated domains,


913
00:25:44,736 --> 00:25:46,156
see the Introducing Password


914
00:25:46,156 --> 00:25:48,166
AutoFill for Apps session from


915
00:25:48,166 --> 00:25:49,866
WWDC 2017.

