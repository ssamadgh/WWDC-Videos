1
00:00:22,016 --> 00:00:23,256
[ Applause ]


2
00:00:23,256 --> 00:00:23,636
>> JOSH SHAFFER: All right.


3
00:00:24,046 --> 00:00:24,506
Good morning.


4
00:00:25,036 --> 00:00:27,746
Thank you for coming out this
morning to learn what's new


5
00:00:27,746 --> 00:00:29,706
in WatchKit and watchOS 2.


6
00:00:30,476 --> 00:00:32,686
We've got a lot of great stuff
to talk about this morning.


7
00:00:33,436 --> 00:00:36,496
Of course WatchKit will be
the biggest part of the topic,


8
00:00:36,766 --> 00:00:37,846
What's New in WatchKit,
after all.


9
00:00:38,806 --> 00:00:43,246
WatchKit is now one part of
the overall watchOS platform.


10
00:00:43,676 --> 00:00:45,476
There's a whole bunch
of other frameworks.


11
00:00:45,886 --> 00:00:47,186
Many of which you're
already familiar


12
00:00:47,186 --> 00:00:50,386
with in building your iOS apps,
but there's a few new ones


13
00:00:50,386 --> 00:00:53,546
that are specific to
watchOS that provide features


14
00:00:53,546 --> 00:00:54,996
that are unique to Apple Watch.


15
00:00:55,606 --> 00:00:58,306
We're going to talk through all
of those new things and some


16
00:00:58,306 --> 00:00:59,306
of the ones you're
already familiar


17
00:00:59,306 --> 00:01:02,326
with to cover what's new in
those specifically in watchOS.


18
00:01:03,166 --> 00:01:07,746
That's going to be watchOS 2.


19
00:01:08,976 --> 00:01:11,266
First let's talk a little
bit about architecture.


20
00:01:12,886 --> 00:01:16,436
So you're already familiar with
watchOS apps for watchOS 1.


21
00:01:17,166 --> 00:01:19,626
The way that works was
you had a user interface


22
00:01:19,626 --> 00:01:21,596
on both your iPhone
and Apple Watch.


23
00:01:22,086 --> 00:01:24,826
So you have an iPhone app,


24
00:01:24,926 --> 00:01:27,976
and inside of your iPhone app is
an Apple Watch that's packaged


25
00:01:27,976 --> 00:01:29,636
as part of that Apple Watch app.


26
00:01:30,186 --> 00:01:33,776
The UI, your storyboards,
your resources,


27
00:01:34,176 --> 00:01:36,436
those exist on Apple Watch
and are installed there,


28
00:01:36,856 --> 00:01:38,336
but your app extension
runs on iPhone.


29
00:01:39,046 --> 00:01:43,186
The big change with watchOS 2
is that that app extension moves


30
00:01:43,186 --> 00:01:45,256
over and runs natively
on Apple Watch itself.


31
00:01:47,536 --> 00:01:50,556
This gives you a few really
great benefits for your users,


32
00:01:51,016 --> 00:01:53,396
the first of course is that
now that the user interface


33
00:01:53,396 --> 00:01:55,196
and the back-end code is running


34
00:01:55,196 --> 00:01:58,316
on the same device you can
provide much lower interaction


35
00:01:58,316 --> 00:02:01,806
latencies making your apps far
more responsive for your users.


36
00:02:03,116 --> 00:02:05,516
Of course this also enables
some really great new things


37
00:02:06,086 --> 00:02:08,346
like running your app when
the iPhone is not present.


38
00:02:09,545 --> 00:02:12,426
In order to make sure that that
can happen efficiently you need


39
00:02:12,426 --> 00:02:14,176
to take some time
and figure out how


40
00:02:14,176 --> 00:02:16,926
to move your application
logic into the app extension.


41
00:02:18,076 --> 00:02:19,946
If in watchOS 1 you
were spending a bunch


42
00:02:19,946 --> 00:02:23,726
of time using open parent
application to run code


43
00:02:23,726 --> 00:02:26,396
in your iPhone app you want
to try and refactor that logic


44
00:02:26,396 --> 00:02:27,976
and move it in the
extension yourself.


45
00:02:29,176 --> 00:02:30,426
The more code you can get


46
00:02:30,426 --> 00:02:33,306
in the app extension the more
standalone functionality you can


47
00:02:33,306 --> 00:02:35,546
provide when the
iPhone is not present.


48
00:02:36,616 --> 00:02:37,686
Of course the other big part


49
00:02:37,686 --> 00:02:39,506
about stand-alone
functionality is


50
00:02:39,506 --> 00:02:43,156
that Apple Watch can access the
network using tether-less Wi-Fi


51
00:02:43,726 --> 00:02:46,636
so your applications can
get data off of HTTP servers


52
00:02:46,636 --> 00:02:48,736
on the internet even when
the iPhone is not present.


53
00:02:49,656 --> 00:02:52,906
If you're used to using NSURL
Session in your iOS apps,


54
00:02:53,306 --> 00:02:54,976
you already know how to
take advantage of this.


55
00:02:55,286 --> 00:02:56,396
We'll talk more about
that later.


56
00:02:57,146 --> 00:02:58,716
But first let's talk
about what's new


57
00:02:59,016 --> 00:03:00,306
in the WatchKit framework
itself.


58
00:03:00,976 --> 00:03:04,086
In addition to the big change of
moving the code to run natively


59
00:03:04,086 --> 00:03:06,736
on Apple Watch, we've also
added a whole bunch of new stuff


60
00:03:06,736 --> 00:03:10,576
into WatchKit to help you build
even cooler apps with watchOS 2.


61
00:03:11,646 --> 00:03:13,026
To give you an idea of
some of those things,


62
00:03:13,026 --> 00:03:14,876
we've got a list here of
some of what we're going


63
00:03:14,876 --> 00:03:17,526
to cover right now, we have
the digital crown support,


64
00:03:17,526 --> 00:03:18,506
layout and animations.


65
00:03:18,746 --> 00:03:21,296
A bunch of great stuff, so we'll
go through all of these now.


66
00:03:21,676 --> 00:03:23,516
First off let's talk
about the Digital Crown,


67
00:03:24,056 --> 00:03:26,726
this is the really unique
interaction mechanisms specific


68
00:03:26,726 --> 00:03:30,736
to Apple Watch and you can
access this using a simple new


69
00:03:30,736 --> 00:03:32,246
control that you can put


70
00:03:32,246 --> 00:03:34,996
into your storyboards
called wk interface picker.


71
00:03:36,236 --> 00:03:39,926
The picker control is a
control that lets you scroll


72
00:03:39,926 --> 00:03:42,426
through a list of elements
using the digital crown


73
00:03:42,756 --> 00:03:43,416
and choose one.


74
00:03:44,186 --> 00:03:45,986
It has three different styles.


75
00:03:46,546 --> 00:03:47,526
We'll talk through
each of those.


76
00:03:47,616 --> 00:03:50,216
The first is the list style
that you can see here.


77
00:03:50,856 --> 00:03:53,156
If you're familiar with
configuring complications


78
00:03:53,156 --> 00:03:55,466
on the watch face you already
know what this looks like.


79
00:03:55,466 --> 00:03:59,926
It is a list of items and it can
have the optional focus outline


80
00:03:59,926 --> 00:04:02,286
around it and a caption
up at the top


81
00:04:02,486 --> 00:04:04,816
that can give you more detail
about the selected item


82
00:04:04,816 --> 00:04:06,356
in case it is not obvious


83
00:04:06,356 --> 00:04:08,586
from the item itself
exactly what it means.


84
00:04:10,076 --> 00:04:11,576
You can choose to
hide or show either


85
00:04:11,576 --> 00:04:12,916
of those user interface
elements.


86
00:04:13,386 --> 00:04:15,186
If you have multiple
pickers onscreen


87
00:04:15,186 --> 00:04:18,255
at the same time you probably
want to show the focus outline


88
00:04:18,466 --> 00:04:19,565
to make it clear to the user


89
00:04:19,565 --> 00:04:22,116
when they turn the crown what's
going to end up happening.


90
00:04:23,346 --> 00:04:27,876
The second style
is the stack style.


91
00:04:28,926 --> 00:04:32,526
The stack style provides
you with a list of images


92
00:04:32,656 --> 00:04:34,606
that your user can scroll
through and pick one.


93
00:04:34,946 --> 00:04:37,106
It has this really nice
transition automation


94
00:04:37,106 --> 00:04:39,866
up while the other fades back.


95
00:04:39,866 --> 00:04:42,256
Any content that you might
want to allow them to choose


96
00:04:42,256 --> 00:04:44,636
from that you can represent
graphically you can use the


97
00:04:44,636 --> 00:04:45,556
stack style for.


98
00:04:45,846 --> 00:04:46,856
It looks really nice.


99
00:04:47,776 --> 00:04:49,936
The third style is
the image sequence.


100
00:04:50,876 --> 00:04:53,886
The image sequence style lets
you scroll through a list


101
00:04:53,886 --> 00:04:57,476
of images but without any
transitions between them.


102
00:04:57,476 --> 00:04:59,746
If you have something that looks
really natural as you just move


103
00:04:59,746 --> 00:05:02,096
from one frame to the
next, you can use this one


104
00:05:02,166 --> 00:05:03,726
and you'll get a
nice way to pick


105
00:05:03,946 --> 00:05:05,516
which image you want
to be able to use.


106
00:05:05,886 --> 00:05:09,076
You can also see here
in the top right corner


107
00:05:09,446 --> 00:05:11,056
that we have a scroll
indicator in this one.


108
00:05:11,686 --> 00:05:14,556
That's an optional user
interface element to put on any


109
00:05:14,556 --> 00:05:15,776
of the three different styles.


110
00:05:16,716 --> 00:05:19,036
You would want to use this in
cases where it is not obvious


111
00:05:19,036 --> 00:05:22,136
from the content exactly
where the user is in the list


112
00:05:22,136 --> 00:05:23,736
of content or how
many things there are.


113
00:05:24,296 --> 00:05:26,636
For example, if you're letting
the user choose from a day --


114
00:05:26,746 --> 00:05:28,906
from an hour out of the day,


115
00:05:29,456 --> 00:05:31,606
you probably don't need
the scroll indicator


116
00:05:31,866 --> 00:05:34,276
because the users likely
know how many hours there are


117
00:05:34,276 --> 00:05:36,156
in a day and they can figure
out where they are in the list.


118
00:05:36,486 --> 00:05:37,906
If you're doing something else


119
00:05:37,906 --> 00:05:39,756
where it's not self-evident
how many things there are,


120
00:05:39,856 --> 00:05:42,726
like choosing from emoji, you
might want to show the indicator


121
00:05:42,726 --> 00:05:44,566
so that they have some
context of where they are


122
00:05:44,566 --> 00:05:47,976
and how many options they have.


123
00:05:48,186 --> 00:05:49,976
Now, in addition to
these three styles,


124
00:05:49,976 --> 00:05:53,276
there is actually another
great feature of picker control


125
00:05:53,276 --> 00:05:55,796
that gives you even more
flexibility in how this works


126
00:05:55,796 --> 00:05:56,856
in your user interfaces.


127
00:05:57,326 --> 00:05:59,276
That's called coordinated
images.


128
00:05:59,876 --> 00:06:01,416
The really cool thing
about this,


129
00:06:01,416 --> 00:06:03,746
you can take an animated
image that you may have set


130
00:06:03,746 --> 00:06:06,416
on some other interface element,
like the background of a group,


131
00:06:06,796 --> 00:06:10,496
or some wk interface image and
you can set it to be coordinated


132
00:06:10,696 --> 00:06:12,076
with the picker control itself.


133
00:06:12,626 --> 00:06:13,956
This way as the user scrubs


134
00:06:14,026 --> 00:06:17,906
through we'll adjust the frame
offset in the animated image


135
00:06:18,086 --> 00:06:20,866
to match the relative offset
in the items in the list.


136
00:06:21,346 --> 00:06:22,846
That will let you
build user interfaces


137
00:06:22,846 --> 00:06:23,996
that look something like this.


138
00:06:24,686 --> 00:06:26,716
As the user goes through,
picks which minute,


139
00:06:26,716 --> 00:06:29,326
you have a coordinated image in
the back that's filling a ring.


140
00:06:30,146 --> 00:06:32,876
The combination of the different
styles lets you get some really


141
00:06:32,876 --> 00:06:35,246
interesting, unique
interfaces all controlled


142
00:06:35,246 --> 00:06:36,136
by the Digital Crown.


143
00:06:36,646 --> 00:06:40,056
Next up, let's talk about
animations and layout.


144
00:06:40,946 --> 00:06:43,786
So as you know, you build your
user interfaces for watchOS


145
00:06:44,116 --> 00:06:45,506
in storyboards in Xcode.


146
00:06:47,556 --> 00:06:51,036
In Xcode you have a whole bunch
of different options you can set


147
00:06:51,036 --> 00:06:53,086
on the different interface
elements in your storyboard.


148
00:06:53,806 --> 00:06:56,126
Now, in watchOS 1 there
were a lot of these


149
00:06:56,126 --> 00:06:57,466
that you could change
programmatically


150
00:06:57,546 --> 00:06:59,696
but some could only be set
within the storyboard itself.


151
00:07:00,336 --> 00:07:02,716
In watchOS 2 we have gone
through and enhanced this


152
00:07:02,836 --> 00:07:04,546
to add setters for
all of the items


153
00:07:04,636 --> 00:07:06,366
that were previously
only settable


154
00:07:06,366 --> 00:07:08,356
in Xcode at design time.


155
00:07:09,096 --> 00:07:11,806
This lets you change a lot of
stuff in the program at runtime


156
00:07:11,806 --> 00:07:13,296
that previously had
to be static.


157
00:07:14,326 --> 00:07:18,576
In addition we have added a new
animation API called animate


158
00:07:18,576 --> 00:07:21,396
with duration that lets
you pass in a block


159
00:07:21,646 --> 00:07:23,256
that can include changes
that you may have set


160
00:07:23,296 --> 00:07:24,346
to your interface elements.


161
00:07:24,806 --> 00:07:27,076
Anything that you change within
that block will get animated.


162
00:07:27,366 --> 00:07:29,976
If you're familiar with UI kits
animation API you'll be right


163
00:07:29,976 --> 00:07:30,766
at home with this one.


164
00:07:31,456 --> 00:07:34,416
It lets you build a lot of cool,


165
00:07:34,416 --> 00:07:36,766
smoother interfaces
with animation.


166
00:07:37,466 --> 00:07:38,776
Now, there is so much
to talk about with


167
00:07:38,776 --> 00:07:41,216
that that there is an entire
session covering layout


168
00:07:41,216 --> 00:07:42,756
and animation techniques
for WatchKit,


169
00:07:42,756 --> 00:07:44,326
so you should definitely
go check that out.


170
00:07:45,076 --> 00:07:46,846
There is a lot of things
that may not be self-evident


171
00:07:46,846 --> 00:07:49,346
and cool tricks and
tips to use these APIs


172
00:07:49,716 --> 00:07:50,926
to get some really cool effects.


173
00:07:50,926 --> 00:07:52,756
So if you come check that
out there will be a lot


174
00:07:52,756 --> 00:07:53,556
of great stuff to see.


175
00:07:54,026 --> 00:07:56,986
Next up, let's talk
about Taptic Engine,


176
00:07:57,646 --> 00:08:00,646
this is another really
unique element on Apple Watch


177
00:08:00,846 --> 00:08:02,776
that lets you get
information to your users


178
00:08:02,996 --> 00:08:05,746
without actually having to have
them read it off the screen.


179
00:08:05,746 --> 00:08:06,736
It is really great.


180
00:08:07,156 --> 00:08:10,166
The cool thing about Taptic
Engine is your users will come


181
00:08:10,166 --> 00:08:13,796
to know the feeling and
sound of individual haptics


182
00:08:14,086 --> 00:08:17,026
and what those things mean in
the context of applications.


183
00:08:17,696 --> 00:08:19,126
We have a great API
that is simple


184
00:08:19,126 --> 00:08:22,496
that lets you just play
haptics on wk interface device,


185
00:08:22,496 --> 00:08:24,366
you just call play
haptic, and there's a list


186
00:08:24,366 --> 00:08:26,746
of different styles
you can choose from.


187
00:08:26,776 --> 00:08:29,416
Each of these as I mentioned
has a particular intended use


188
00:08:29,416 --> 00:08:31,936
and your users will come
to know what they mean


189
00:08:32,176 --> 00:08:34,176
because the intent is
to deliver information


190
00:08:34,426 --> 00:08:35,866
without them having
to read anything.


191
00:08:36,316 --> 00:08:38,476
You want to make sure that
you use these consistently


192
00:08:38,775 --> 00:08:40,376
and they're named in such
a way to help you figure


193
00:08:40,376 --> 00:08:42,096
out how they should be used.


194
00:08:42,496 --> 00:08:44,746
There is also really clear
documentation in the docs


195
00:08:44,746 --> 00:08:47,196
about the intended use of
each and they're covered


196
00:08:47,196 --> 00:08:49,436
in more depth in the
designing Apple Watch session.


197
00:08:49,856 --> 00:08:51,496
So definitely check those
things out if you're going


198
00:08:51,496 --> 00:08:52,506
to use haptics in your app


199
00:08:52,846 --> 00:08:54,406
and make sure you
use them consistently


200
00:08:54,476 --> 00:08:56,446
so that your users will
understand what's happening


201
00:08:56,446 --> 00:08:58,206
without having to
look at the screen.


202
00:08:58,746 --> 00:09:03,916
There is also a few other
pieces of hardware we wanted


203
00:09:03,916 --> 00:09:05,466
to enable access
to with WatchKit.


204
00:09:05,966 --> 00:09:07,496
The first is the microphone.


205
00:09:08,396 --> 00:09:11,186
So we've got a new API in
watchOS 2 that lets you bring


206
00:09:11,186 --> 00:09:14,926
up this recording sheet, record
any audio that's going on,


207
00:09:15,336 --> 00:09:18,326
play it back before
the user acts on it,


208
00:09:18,326 --> 00:09:19,766
and then ultimately act


209
00:09:20,026 --> 00:09:21,516
by tapping the button
in the top right.


210
00:09:23,206 --> 00:09:25,766
So the button in the top
right can be named based


211
00:09:25,766 --> 00:09:28,576
on whatever is appropriate for
your application's context.


212
00:09:28,926 --> 00:09:30,096
In this case I call it "send"


213
00:09:30,096 --> 00:09:31,836
because I'm assuming I
might send a message.


214
00:09:32,196 --> 00:09:33,566
But you might also
have it be "save"


215
00:09:33,566 --> 00:09:35,276
if you were doing something
like a voice memo app.


216
00:09:36,716 --> 00:09:37,676
It's really simple.


217
00:09:37,676 --> 00:09:40,176
It records to a file and when
the user hits the confirmation


218
00:09:40,176 --> 00:09:43,006
button you'll be handed
the file back to act on it


219
00:09:43,006 --> 00:09:45,196
as whatever way is appropriate
for your application.


220
00:09:46,396 --> 00:09:48,746
Of course, in addition to
the microphone, we also want


221
00:09:48,746 --> 00:09:50,026
to enable access to the speaker.


222
00:09:50,026 --> 00:09:53,046
We have done that in a way
that lets you play back audio


223
00:09:53,046 --> 00:09:55,116
and video content in
your applications.


224
00:09:55,856 --> 00:09:58,616
There is three APIs that
enable this in different ways.


225
00:09:59,286 --> 00:10:02,286
The first one is a new
interface object called wk


226
00:10:02,286 --> 00:10:03,266
interface movie.


227
00:10:04,446 --> 00:10:06,926
This element lets you get a
really standard appearance


228
00:10:07,176 --> 00:10:10,226
for what it would look like in
your app to see a video file


229
00:10:10,226 --> 00:10:11,046
and start its playback.


230
00:10:11,726 --> 00:10:13,516
In this case you see
I have two onscreen.


231
00:10:13,846 --> 00:10:15,056
You provide a poster image,


232
00:10:15,406 --> 00:10:17,446
a URL where your
content is located,


233
00:10:17,776 --> 00:10:19,176
and WatchKit handles
playback for you.


234
00:10:19,646 --> 00:10:21,316
That URL can be a local file


235
00:10:21,316 --> 00:10:23,186
if you've already gotten
the content onto the watch


236
00:10:23,386 --> 00:10:26,626
or it can be a remote HTTP URL
if it is not already local.


237
00:10:27,096 --> 00:10:28,876
If you provide a
remote resource,


238
00:10:29,116 --> 00:10:31,466
WatchKit will handle
downloading it, showing progress


239
00:10:31,606 --> 00:10:33,966
and then ultimately playing once
the resource was downloaded.


240
00:10:34,466 --> 00:10:36,906
If it's local, playback
will start really quickly.


241
00:10:38,306 --> 00:10:40,406
When the user taps on the
play button they're going


242
00:10:40,406 --> 00:10:43,316
to be presented with a great
full-screen view of that video


243
00:10:43,586 --> 00:10:45,746
and it's going to play back
taking up the whole screen


244
00:10:46,096 --> 00:10:48,986
with playback controls that fade
out right away to give access


245
00:10:49,066 --> 00:10:50,936
to quick view into
the full content.


246
00:10:53,516 --> 00:10:56,066
Additionally, if you want to
start playback some way other


247
00:10:56,066 --> 00:10:58,756
than the standard interface
element there is also an API


248
00:10:58,756 --> 00:11:00,826
that lets you just present
that controller directly


249
00:11:00,826 --> 00:11:01,976
from some other interaction.


250
00:11:05,056 --> 00:11:08,456
These APIs play video and
audio content and they're best


251
00:11:08,456 --> 00:11:10,026
for playing back short content.


252
00:11:10,396 --> 00:11:12,776
The watch is designed
for short interaction.


253
00:11:13,546 --> 00:11:14,326
So the best kind of content


254
00:11:14,326 --> 00:11:17,076
to play here is something that's
not going to be very long.


255
00:11:17,286 --> 00:11:19,466
You probably don't want to
be playing a two-hour movie


256
00:11:19,676 --> 00:11:22,956
on Apple Watch this way.


257
00:11:23,056 --> 00:11:25,896
Sometimes there are some types
of audio content that are longer


258
00:11:25,896 --> 00:11:26,856
that you do want to play back.


259
00:11:27,286 --> 00:11:30,016
If you're writing something
like a podcasting application,


260
00:11:30,266 --> 00:11:33,366
you might want to download some
podcasts and then go for a run,


261
00:11:33,366 --> 00:11:35,186
listen to them on your
Bluetooth headphones.


262
00:11:35,686 --> 00:11:38,086
We've got another API
that is really great


263
00:11:38,086 --> 00:11:40,116
for playing back
this long-form audio.


264
00:11:40,826 --> 00:11:43,826
If you're familiar with the AV
foundation APIs you know how


265
00:11:43,826 --> 00:11:44,406
to use these.


266
00:11:44,446 --> 00:11:45,616
They're very, very similar.


267
00:11:46,486 --> 00:11:49,396
The one difference between
this and the AV foundation APIs


268
00:11:49,396 --> 00:11:52,956
that you might know from
iOS is that in order


269
00:11:53,096 --> 00:11:55,486
to enable really
high performance


270
00:11:55,486 --> 00:11:59,566
and great battery usage for
the app it doesn't require


271
00:11:59,566 --> 00:12:01,696
that your application continue
to run in the background


272
00:12:01,696 --> 00:12:03,116
in order to play
back that audio.


273
00:12:03,516 --> 00:12:05,126
The file can be handed
off to the system


274
00:12:05,316 --> 00:12:07,626
to be played back even when
your application is suspended


275
00:12:07,626 --> 00:12:08,236
and not running.


276
00:12:08,236 --> 00:12:12,906
If the user goes to the watch
face while out for a run,


277
00:12:12,906 --> 00:12:14,666
they can bring up the
now playing glance


278
00:12:14,856 --> 00:12:16,536
and control the playback
of the audio that's


279
00:12:16,536 --> 00:12:19,176
from your application even while
your application is not running.


280
00:12:19,746 --> 00:12:25,536
So there is a few other
APIs that are not related


281
00:12:25,536 --> 00:12:27,456
to hardware things that I still
want to go over quickly here.


282
00:12:28,196 --> 00:12:29,976
The first one here is alerts.


283
00:12:30,286 --> 00:12:33,046
Again, I mentioned Apple
Watch is really designed


284
00:12:33,046 --> 00:12:35,476
for short interactions,
so you probably want


285
00:12:35,476 --> 00:12:38,246
to be really careful about
not over using this API


286
00:12:38,576 --> 00:12:40,386
because it does introduce
an additional step


287
00:12:40,466 --> 00:12:43,516
into some other work
flow in your app.


288
00:12:44,106 --> 00:12:45,556
There are some times
when you just need


289
00:12:45,556 --> 00:12:46,636
to ask the user a question


290
00:12:46,636 --> 00:12:48,136
to get an answer
before you proceed.


291
00:12:48,476 --> 00:12:50,106
For those cases, we
have the alert API


292
00:12:50,546 --> 00:12:53,416
which gives you a consistent
appearance for this style of UI.


293
00:12:54,426 --> 00:12:56,766
You provide a title, a
description, then the list


294
00:12:56,766 --> 00:12:59,506
of buttons and the actions that
should be taken in a block.


295
00:13:00,246 --> 00:13:02,276
They'll just be displayed
and you get called back


296
00:13:02,276 --> 00:13:03,406
when the user taps
on one of them.


297
00:13:03,756 --> 00:13:07,486
In this case I have included a
destructive style button making


298
00:13:07,516 --> 00:13:09,086
it clear that something
destructive will happen


299
00:13:09,086 --> 00:13:09,986
when I tap delete here.


300
00:13:10,556 --> 00:13:15,676
We have a great open
system URL API


301
00:13:16,106 --> 00:13:17,806
which enable a whole
bunch of new things.


302
00:13:18,236 --> 00:13:22,356
Open system URL can take
another URL and sends the user


303
00:13:22,356 --> 00:13:24,356
to the messages application
to send an iMessage


304
00:13:24,356 --> 00:13:26,926
to some recipient that
you've defined in your app


305
00:13:28,276 --> 00:13:31,586
and even cooler, you can
pass tel URLs you can have


306
00:13:31,676 --> 00:13:34,866
from your application a phone
call started on Apple Watch.


307
00:13:35,646 --> 00:13:38,426
When that happens, the in-call
UI will show up over your app,


308
00:13:38,426 --> 00:13:41,926
the user can make the phone
call, as soon as they hang up,


309
00:13:41,926 --> 00:13:44,286
they'll be right back
where they left the app


310
00:13:44,396 --> 00:13:48,746
when they started the call.


311
00:13:48,966 --> 00:13:51,806
We also have integration
with Passbook -- PassKit.


312
00:13:52,476 --> 00:13:55,616
In fact, the PassKit framework
is part of the watchOS


313
00:13:56,806 --> 00:13:58,546
so you can get access
to the passes


314
00:13:58,546 --> 00:14:01,126
that your application
may have on iPhone.


315
00:14:01,396 --> 00:14:03,366
The pass library is
synchronized between iPhone


316
00:14:03,366 --> 00:14:04,366
and watch so you get both.


317
00:14:04,366 --> 00:14:08,676
Even better, WatchKit now has
an API that lets you add passes


318
00:14:08,726 --> 00:14:11,226
to the pass library,
you hand your PK pass


319
00:14:11,226 --> 00:14:13,726
over to the WatchKit API,
it presents this way,


320
00:14:13,816 --> 00:14:17,046
the user can scroll through
it to check out what is


321
00:14:17,046 --> 00:14:19,466
in that pass and all the way
at the bottom is an add button


322
00:14:19,716 --> 00:14:20,926
to add it to the library.


323
00:14:21,736 --> 00:14:23,506
When they tap that, it will
be added to the library


324
00:14:23,506 --> 00:14:25,796
on Apple Watch, but
also on iPhone


325
00:14:25,796 --> 00:14:27,966
and all their other devices that
are synchronized through iCloud.


326
00:14:28,806 --> 00:14:32,176
So it's a really great way to
get an end to end pass story all


327
00:14:32,176 --> 00:14:34,566
on Apple Watch, from
ingestion all the way


328
00:14:34,566 --> 00:14:38,596
through to using the pass later.


329
00:14:38,836 --> 00:14:40,486
So that's what's
new in WatchKit,


330
00:14:40,486 --> 00:14:42,066
there is a whole
bunch of stuff there.


331
00:14:42,786 --> 00:14:45,116
As I mentioned, WatchKit
is just one part


332
00:14:45,296 --> 00:14:49,096
of the overall watchOS STK and
there are other frameworks,


333
00:14:49,186 --> 00:14:52,936
some are new and
some that existed


334
00:14:52,936 --> 00:14:54,166
and have some new functionality.


335
00:14:54,226 --> 00:14:57,216
I would like to talk through
a few of the other ones now.


336
00:14:57,466 --> 00:15:00,066
Starting with two that are
specific just to watchOS.


337
00:15:00,936 --> 00:15:03,566
The first is Clock Kit.


338
00:15:05,076 --> 00:15:08,506
So Clock Kit is a
framework giving up access


339
00:15:08,786 --> 00:15:12,586
to building complications that
show up right on the watch face.


340
00:15:12,836 --> 00:15:14,606
It is a great way to
get your data in front


341
00:15:14,606 --> 00:15:16,116
of the users really,
really quickly.


342
00:15:18,736 --> 00:15:20,826
There is a few styles
of complications,


343
00:15:21,116 --> 00:15:22,526
and Clock Kit supports
all of them.


344
00:15:22,946 --> 00:15:24,726
And to give you an idea
of what that is let's look


345
00:15:24,726 --> 00:15:26,396
through the watch
faces, see what they are.


346
00:15:27,246 --> 00:15:29,386
Here we have our utility face


347
00:15:29,386 --> 00:15:31,476
and there are three different
complications visible


348
00:15:31,476 --> 00:15:33,526
on this face right now.


349
00:15:33,566 --> 00:15:37,856
You see complications with
different sizes and shapes


350
00:15:38,186 --> 00:15:40,676
and Clock Kit supports
formatting the data


351
00:15:40,676 --> 00:15:42,596
in the appropriate
way to display in each


352
00:15:42,596 --> 00:15:44,276
of these complications.


353
00:15:45,146 --> 00:15:47,156
If we look at our
color face for example,


354
00:15:47,506 --> 00:15:50,656
this has more square sized
complications and they're taller


355
00:15:50,746 --> 00:15:53,626
to display two lines
of text or an image.


356
00:15:54,606 --> 00:15:57,346
Finally, on the digital
modular face we have our biggest


357
00:15:57,346 --> 00:16:00,156
complication right in the center
and four others are on the edge.


358
00:16:00,626 --> 00:16:03,936
Clock Kit provides some great
APIs to let you format your data


359
00:16:04,416 --> 00:16:06,506
in various different
templates to fit all


360
00:16:06,506 --> 00:16:10,026
of these different
appearances and tailoring it


361
00:16:10,806 --> 00:16:13,606
to show the right amount of
data given each particular


362
00:16:13,606 --> 00:16:14,686
complication size.


363
00:16:15,286 --> 00:16:18,726
Now the other important
thing about complications,


364
00:16:18,996 --> 00:16:20,716
is that they're right
on your watch face


365
00:16:21,076 --> 00:16:23,196
which means every time the user
raises their wrist and looks


366
00:16:23,196 --> 00:16:25,216
at the watch, they
want to see the most


367
00:16:25,216 --> 00:16:26,676
up to date data right away.


368
00:16:27,406 --> 00:16:30,696
If we had to every time the user
raises the wrist ask the code


369
00:16:30,696 --> 00:16:32,446
to give the current
value to be shown,


370
00:16:32,786 --> 00:16:33,866
we would already have failed.


371
00:16:34,366 --> 00:16:38,226
It needs to be there immediately
before the user even raises


372
00:16:38,226 --> 00:16:38,686
their wrist.


373
00:16:39,176 --> 00:16:42,196
In order to facilitate that,
you provide your app's data


374
00:16:42,196 --> 00:16:44,486
to Clock Kit in the
form of a timeline.


375
00:16:45,266 --> 00:16:49,036
In this case, I've got the data
for the WWDC app in the form


376
00:16:49,036 --> 00:16:50,566
of a complication
and timeline here.


377
00:16:51,186 --> 00:16:52,706
If this were 10:00 a.m.,


378
00:16:53,046 --> 00:16:55,416
the morning of the
keynote it might be showing


379
00:16:55,416 --> 00:16:57,216
that the keynote is the
current session coming up.


380
00:16:58,686 --> 00:17:01,926
As the day progresses,
let's say it becomes 2:00


381
00:17:01,986 --> 00:17:04,415
and it already has the
data so Clock Kit chooses


382
00:17:04,415 --> 00:17:06,506
to show the appropriate
thing for that time of day.


383
00:17:06,566 --> 00:17:08,586
It would have moved to the
platform state of the union.


384
00:17:09,165 --> 00:17:11,586
Moving on to 4:00,
Apple Design Awards.


385
00:17:12,386 --> 00:17:16,336
The great thing with
this format,


386
00:17:16,336 --> 00:17:18,846
you get the automatic
behavior throughout the day


387
00:17:18,846 --> 00:17:21,945
without the code having to run
all the time, but you also get


388
00:17:21,945 --> 00:17:23,445
to participate in time travel


389
00:17:23,445 --> 00:17:25,296
without any additional
effort on your part.


390
00:17:25,336 --> 00:17:28,286
If the user turned the
digital crown to move backwards


391
00:17:28,286 --> 00:17:30,206
and see what was happening
earlier in the day,


392
00:17:30,646 --> 00:17:33,476
clock kit would just switch to
showing the appropriate piece


393
00:17:33,476 --> 00:17:36,226
of your data for
that point in time.


394
00:17:36,226 --> 00:17:38,946
Really, really easy to add
support for complications


395
00:17:39,186 --> 00:17:40,976
and a really powerful
way to get your data


396
00:17:41,106 --> 00:17:42,226
in front of your users.


397
00:17:42,766 --> 00:17:43,956
That's Clock Kit.


398
00:17:43,956 --> 00:17:47,946
There is a whole session that
goes into a lot of this in a ton


399
00:17:47,946 --> 00:17:50,076
of detail and tells
you all about the APIs,


400
00:17:50,076 --> 00:17:52,756
different templates, everything
you need to get started.


401
00:17:53,126 --> 00:17:55,906
Check out Creating
Complications with Clock Kit.


402
00:17:57,556 --> 00:18:01,056
The next thing I want to
talk about, networking.


403
00:18:01,116 --> 00:18:05,126
Networking is an important story
now that you have code running


404
00:18:05,126 --> 00:18:07,026
on both Apple Watch and iPhone.


405
00:18:07,096 --> 00:18:11,006
There is two kinds of
networking you may wanted


406
00:18:11,006 --> 00:18:12,066
to do in your applications.


407
00:18:12,486 --> 00:18:14,596
The first of those is
you may want to talk


408
00:18:14,936 --> 00:18:16,336
to the broader internet.


409
00:18:17,816 --> 00:18:19,756
The way you can do
that when you're


410
00:18:19,756 --> 00:18:22,906
in either a stand alone mode or
when your watch and phone are


411
00:18:22,906 --> 00:18:25,996
in the same place, using
the NSURL session APIs.


412
00:18:27,656 --> 00:18:28,776
These will get to the internet


413
00:18:28,776 --> 00:18:31,616
in the most efficient way
possible given how your user is


414
00:18:31,616 --> 00:18:35,146
currently using the phone
including detect over Wi-Fi


415
00:18:35,146 --> 00:18:37,226
with tether-less Wi-Fi when
the phone is not present.


416
00:18:37,226 --> 00:18:42,606
There is a whole session to
talk about NSURL session.


417
00:18:42,866 --> 00:18:45,946
Networking with NSURL session
so go check that one out.


418
00:18:46,486 --> 00:18:49,736
Any server anywhere
on the internet, hit,


419
00:18:49,736 --> 00:18:53,636
download the data, it is the
same API you're used to using


420
00:18:53,636 --> 00:18:56,686
if you used it on iOS and
it has all the same set


421
00:18:56,686 --> 00:18:58,816
of features including
background downloads.


422
00:18:59,386 --> 00:19:04,436
Of course, there are some times
where you have code now running


423
00:19:04,436 --> 00:19:06,776
on both Apple Watch
and iPhone and you want


424
00:19:06,776 --> 00:19:08,626
to have them share data
or talk to each other.


425
00:19:09,586 --> 00:19:12,826
We have provided a brand-new
framework for watchOS


426
00:19:12,826 --> 00:19:14,926
and iOS called watch
connectivity


427
00:19:15,236 --> 00:19:16,756
that allows you to do just that.


428
00:19:16,876 --> 00:19:19,706
Your iPhone can link watch
connectivity while running


429
00:19:19,706 --> 00:19:22,546
on your iPhone and your watch
app can link watch connectivity


430
00:19:22,586 --> 00:19:23,386
running on your watch.


431
00:19:23,966 --> 00:19:29,186
So a good example of when
you may want to use something


432
00:19:29,186 --> 00:19:31,676
like this is when you're
downloading data off the


433
00:19:31,676 --> 00:19:34,886
internet, such as if you
were building a weather app


434
00:19:34,986 --> 00:19:37,016
downloading the current
weather information.


435
00:19:37,816 --> 00:19:39,756
Let's say your user
picks up their iPhone


436
00:19:40,046 --> 00:19:42,056
and launches the app,
you go to the internet,


437
00:19:42,176 --> 00:19:45,016
grab the latest weather, you
show it to them on their iPhone.


438
00:19:45,846 --> 00:19:48,926
If you didn't do anything
else, you built the watch app


439
00:19:48,926 --> 00:19:51,566
to do the same thing, the next
time they looked at the app


440
00:19:51,566 --> 00:19:53,536
on the watch, it goes
out to the internet,


441
00:19:53,536 --> 00:19:55,286
download the latest
data and show it there.


442
00:19:56,496 --> 00:19:58,116
But that's not the
best we could do,


443
00:19:58,116 --> 00:19:59,216
we could definitely do better.


444
00:19:59,456 --> 00:20:02,256
We had the data, we just got
it on the iPhone and it's


445
00:20:02,256 --> 00:20:04,696
in the user's pocket now.


446
00:20:05,046 --> 00:20:06,636
It would be really great
if we could find some way


447
00:20:06,636 --> 00:20:07,706
to take advantage of the fact


448
00:20:07,706 --> 00:20:10,116
that we already downloaded
our data on one of our devices


449
00:20:10,116 --> 00:20:12,136
and not have to do
it multiple times.


450
00:20:13,116 --> 00:20:15,146
To facilitate that, that might
look something like this.


451
00:20:15,146 --> 00:20:18,516
The user downloads the data on
their iPhone, you move it over,


452
00:20:18,516 --> 00:20:22,556
keep it available on the
watch so if the user then goes


453
00:20:22,556 --> 00:20:25,686
and looks at the app on their
watch the data is already there


454
00:20:26,016 --> 00:20:28,406
and it can be displayed without
having to be downloaded again.


455
00:20:29,326 --> 00:20:30,506
Of course you may still go out


456
00:20:30,506 --> 00:20:32,516
and download the more
recent updated version.


457
00:20:32,756 --> 00:20:33,876
If you knew, for example,


458
00:20:33,876 --> 00:20:36,366
that the weather data is only
updating data once an hour,


459
00:20:36,626 --> 00:20:39,526
you might have the newest
data and not have to do that.


460
00:20:39,526 --> 00:20:42,586
You may have something
newer available


461
00:20:42,586 --> 00:20:43,646
for display right away.


462
00:20:45,026 --> 00:20:47,646
Watch connectivity
provides this functionality.


463
00:20:48,366 --> 00:20:50,076
There are two APIs
that it provides


464
00:20:50,076 --> 00:20:52,816
for background downloading,


465
00:20:53,126 --> 00:20:55,946
the first is called application
context and what it does,


466
00:20:55,946 --> 00:20:58,786
it lets you hand over a
dictionary of data that you want


467
00:20:58,786 --> 00:20:59,906
to have available in your app


468
00:20:59,906 --> 00:21:01,936
on the other side
whenever it runs next.


469
00:21:02,626 --> 00:21:05,716
It's always got the
latest version of the data


470
00:21:05,716 --> 00:21:07,246
so you just set whatever
is current


471
00:21:07,516 --> 00:21:08,946
and the next time
your application runs,


472
00:21:08,946 --> 00:21:10,476
it will be available over there.


473
00:21:11,116 --> 00:21:12,066
Behind the scenes,


474
00:21:12,236 --> 00:21:13,766
watch connectivity
will transfer the data


475
00:21:13,906 --> 00:21:16,736
at the time that's most power
and performance efficient.


476
00:21:17,936 --> 00:21:21,226
There is also a file transfer
API, if you have larger data,


477
00:21:21,226 --> 00:21:24,846
more bits of data you can
transfer files from your iPhone


478
00:21:24,846 --> 00:21:26,656
to your watch and vice versa.


479
00:21:27,116 --> 00:21:29,676
Again, it will do it in
the background in the times


480
00:21:29,676 --> 00:21:31,946
that are most power and
performance efficient.


481
00:21:32,596 --> 00:21:35,966
There are also times when you
need interactive messaging


482
00:21:35,966 --> 00:21:38,006
between the two sides.


483
00:21:38,006 --> 00:21:40,716
If your watch app is going
to kick off some operation


484
00:21:40,716 --> 00:21:43,026
on your iPhone, you may
want to send a message over.


485
00:21:43,026 --> 00:21:46,586
In this example I've got
a go button on my watch.


486
00:21:46,926 --> 00:21:49,366
When I tap it, I want to
send a message to the iPhone


487
00:21:50,636 --> 00:21:53,436
and what will happen is if
your app is not already running


488
00:21:53,436 --> 00:21:55,316
on the iPhone it will get
launched in the background


489
00:21:55,546 --> 00:21:56,756
and the message will
be delivered


490
00:21:56,756 --> 00:21:58,716
so you could do something
like start a session


491
00:21:59,156 --> 00:22:00,966
or perform some activity
on the iPhone.


492
00:22:00,966 --> 00:22:04,726
Now I mentioned that these
APIs exist on both sides


493
00:22:04,726 --> 00:22:05,816
and they are bi-directional,


494
00:22:06,206 --> 00:22:08,066
application context
can go both ways,


495
00:22:08,526 --> 00:22:11,456
the file transfer APIs can
transfer files both ways.


496
00:22:12,046 --> 00:22:14,026
One difference is in
the send message API.


497
00:22:14,886 --> 00:22:16,896
When sending a message from
the watch to the iPhone,


498
00:22:16,896 --> 00:22:19,256
it can wake your application
in the background on the iPhone


499
00:22:19,256 --> 00:22:20,276
to perform some activity.


500
00:22:20,876 --> 00:22:22,936
However when going the
other way from iPhone


501
00:22:22,936 --> 00:22:25,676
to watch it won't wake up
the watch in the background.


502
00:22:25,936 --> 00:22:27,886
Your app has to be running
on the watch in order


503
00:22:27,886 --> 00:22:30,276
to receive messages
coming in from the iPhone.


504
00:22:31,676 --> 00:22:34,496
There is a ton of detail to
be had on all of these APIs


505
00:22:34,496 --> 00:22:35,466
and there is a whole session


506
00:22:35,466 --> 00:22:37,666
about it called Introducing
Watch Connectivity,


507
00:22:38,106 --> 00:22:40,176
so you should definitely
check that out to learn how


508
00:22:40,176 --> 00:22:44,196
to move your back end from
a situation where it ran


509
00:22:44,266 --> 00:22:46,906
on one device into
having your code running


510
00:22:46,906 --> 00:22:48,796
on both iPhone and Apple Watch.


511
00:22:49,366 --> 00:22:55,616
So those are the three new
frameworks that are brand-new


512
00:22:55,616 --> 00:22:57,506
and specific to watchOS.


513
00:22:57,896 --> 00:23:00,306
There is a bunch much
frameworks that exist on iOS


514
00:23:00,696 --> 00:23:02,776
that you're used to
using in the apps today


515
00:23:03,186 --> 00:23:04,816
that have some new functionality


516
00:23:05,056 --> 00:23:07,986
or some enhanced functionality
specific to Apple Watch.


517
00:23:08,596 --> 00:23:10,326
I would like to go over
a few of those right now.


518
00:23:11,206 --> 00:23:12,716
The first is Core Motion.


519
00:23:13,786 --> 00:23:17,526
Now, Core Motion, as you know,
is the API giving you access


520
00:23:17,526 --> 00:23:20,156
to the motion sensors
in the iOS devices.


521
00:23:20,686 --> 00:23:22,436
It also exists on watchOS


522
00:23:22,476 --> 00:23:24,156
and gives you access
to the accelerometer.


523
00:23:24,996 --> 00:23:28,446
As on iOS, on watchOS Core
Motion can give you live data


524
00:23:28,446 --> 00:23:32,536
while the application is
running, but new and cool


525
00:23:32,536 --> 00:23:36,746
and specific to Apple Watch
is it also records motion data


526
00:23:36,746 --> 00:23:38,646
on your applications behalf even


527
00:23:38,646 --> 00:23:42,186
when your application is not
running at a lower refresh rate


528
00:23:42,496 --> 00:23:44,446
and then give that
accelerometer data to you


529
00:23:44,446 --> 00:23:46,526
in a batch the next time
your application runs.


530
00:23:47,586 --> 00:23:50,516
Cool way to get insight
into the motion


531
00:23:50,856 --> 00:23:52,406
when the app is not running.


532
00:23:53,456 --> 00:23:56,376
There is a whole talk about
this, What's New in Core Motion,


533
00:23:56,546 --> 00:23:59,026
so you should definitely
go check that out.


534
00:23:59,176 --> 00:24:01,786
Additionally, core location
is part of the watch iOS


535
00:24:02,396 --> 00:24:06,096
and there is a great way to find
out the user's new location,


536
00:24:06,646 --> 00:24:12,246
there is a great thing making
it super easy to figure


537
00:24:12,246 --> 00:24:15,286
out the current location
with just a simple API call.


538
00:24:15,946 --> 00:24:19,316
Now, the other thing to
note about core location


539
00:24:19,316 --> 00:24:24,446
on watchOS is that watch is
location authorization is shared


540
00:24:24,446 --> 00:24:26,616
between your iOS app
running on the iPhone


541
00:24:26,926 --> 00:24:29,156
and the watchOS app
running on the Apple Watch.


542
00:24:30,006 --> 00:24:32,696
As you know, when you go to
use core location you have


543
00:24:32,696 --> 00:24:34,396
to request location
authorization


544
00:24:34,396 --> 00:24:37,206
from the user before the app is
allowed to find out location.


545
00:24:37,646 --> 00:24:39,186
That's true in Apple
Watch as well.


546
00:24:39,896 --> 00:24:43,176
Once you have -- once the user
accepted the authorization


547
00:24:43,176 --> 00:24:46,406
on the iPhone or watch,
it applies to both


548
00:24:46,796 --> 00:24:48,466
so they won't have to
answer the question twice


549
00:24:48,716 --> 00:24:50,286
and there is one way to manage


550
00:24:50,286 --> 00:24:51,846
that authorization
for the users.


551
00:24:51,846 --> 00:24:56,206
There is a whole session
on core location what's new


552
00:24:56,206 --> 00:25:00,116
in core location, a lot of
new stuff to learn on that.


553
00:25:00,576 --> 00:25:01,486
Next up is HealthKit.


554
00:25:02,436 --> 00:25:05,886
HealthKit is also part of
watchOS, same framework


555
00:25:05,886 --> 00:25:08,256
with the same set of APIs
you're used to using on iOS.


556
00:25:09,456 --> 00:25:13,276
The great thing about using
HealthKit on watchOS is so much


557
00:25:13,276 --> 00:25:15,876
of the health data
recorded is being recorded


558
00:25:15,876 --> 00:25:19,666
on the watch itself that you now
have even more up-to-date live


559
00:25:19,666 --> 00:25:22,516
access to the data as it is
coming in on the watch itself.


560
00:25:22,936 --> 00:25:25,016
You're now running on the
same device that's generating


561
00:25:25,016 --> 00:25:25,286
that data.


562
00:25:26,876 --> 00:25:29,856
So for example you have
really up-to-date heart rate


563
00:25:29,856 --> 00:25:31,676
information as it
is being recorded


564
00:25:31,676 --> 00:25:32,426
and stored in HealthKit.


565
00:25:33,596 --> 00:25:34,756
The other great thing
about HealthKit


566
00:25:34,756 --> 00:25:37,036
and watchOS is it provides API


567
00:25:37,696 --> 00:25:39,816
that lets you start
workout sessions.


568
00:25:40,596 --> 00:25:43,976
These workout sessions can do a
lot of the same kinds of things


569
00:25:44,276 --> 00:25:48,456
that the workout app
on watch itself can do.


570
00:25:48,556 --> 00:25:50,796
For example, if you
go start a run,


571
00:25:50,796 --> 00:25:52,456
you want to record
the user's heart rate


572
00:25:52,456 --> 00:25:55,426
at a higher frequency, you can
use the HealthKit API to start


573
00:25:55,426 --> 00:25:58,316
that session and request
the heart rate information


574
00:25:58,316 --> 00:26:00,616
to be recorded in
high frequency.


575
00:26:01,946 --> 00:26:03,766
The other great thing
about using this API


576
00:26:04,176 --> 00:26:07,926
for your workout applications
is it allows the application


577
00:26:07,926 --> 00:26:10,096
to continue to come back to
the foreground every time


578
00:26:10,096 --> 00:26:13,416
that the user raises a
wrist in that session.


579
00:26:13,466 --> 00:26:15,086
If you're writing a biking app


580
00:26:15,216 --> 00:26:17,396
and the user starts
the biking session,


581
00:26:17,996 --> 00:26:19,666
every time they raise
the wrist while


582
00:26:19,666 --> 00:26:22,836
in that session they'll see the
app and be able to get the most


583
00:26:22,836 --> 00:26:26,866
up to date data to find out
how they're doing during


584
00:26:27,436 --> 00:26:28,296
the workout.


585
00:26:28,406 --> 00:26:30,806
Now, while the user has dropped
the wrist and the screen is off,


586
00:26:30,806 --> 00:26:32,526
the application is suspended


587
00:26:33,136 --> 00:26:36,316
but HealthKit behind the scenes
will record all of that data


588
00:26:36,316 --> 00:26:39,006
for you so when the user raises
the wrist and you get a chance


589
00:26:39,006 --> 00:26:40,916
to run again, you update


590
00:26:40,916 --> 00:26:43,876
on the data recorded while
your app was suspended.


591
00:26:45,076 --> 00:26:48,756
This provides a really great
way to gather all this data


592
00:26:49,296 --> 00:26:50,066
in the most power


593
00:26:50,066 --> 00:26:51,656
and performance efficient
way possible


594
00:26:51,956 --> 00:26:54,476
and provide great
experience to your users.


595
00:26:56,616 --> 00:26:59,396
So there is also a whole session
on What's New in HealthKit,


596
00:26:59,846 --> 00:27:01,936
definitely check that out
if you're writing work


597
00:27:01,936 --> 00:27:04,236
out style apps or anything
that may take advantage


598
00:27:04,336 --> 00:27:06,836
of the HealthKit data.


599
00:27:07,016 --> 00:27:08,456
I also want to take
time and talk


600
00:27:08,456 --> 00:27:09,596
about the security framework,


601
00:27:09,596 --> 00:27:12,386
which maybe is not the most
exciting way to spend time.


602
00:27:13,076 --> 00:27:14,746
Trust me, there is
important stuff here.


603
00:27:15,106 --> 00:27:20,506
If you've used the security
framework on iOS you know


604
00:27:20,506 --> 00:27:23,156
that this provides you with
access to the Keychain.


605
00:27:23,606 --> 00:27:26,586
The Keychain on Apple
Watch is really interesting


606
00:27:27,016 --> 00:27:29,466
because the unique thing
about Apple Watch is


607
00:27:29,466 --> 00:27:32,666
that while it stays on your
user's wrist it remains unlocked


608
00:27:33,216 --> 00:27:36,336
and as soon as the user
removes their watch the device


609
00:27:36,336 --> 00:27:37,326
immediately locks.


610
00:27:38,476 --> 00:27:41,526
You can take advantage of this
by storing your credentials


611
00:27:41,526 --> 00:27:45,026
and secured data
in the Keychain.


612
00:27:46,486 --> 00:27:49,126
By doing that, you ensure that
as long as the watch remains


613
00:27:49,126 --> 00:27:52,756
on the user's wrist you have
access to the data and as soon


614
00:27:52,756 --> 00:27:55,716
as it is removed the
data becomes inaccessible


615
00:27:55,716 --> 00:27:58,036
because the watch is
locked [applause].


616
00:27:58,426 --> 00:28:06,926
Thanks. He was very excited
about that [laughter]!


617
00:28:08,056 --> 00:28:08,906
All right.


618
00:28:09,046 --> 00:28:09,896
That's security.


619
00:28:11,366 --> 00:28:12,266
Next up is MapKit.


620
00:28:12,556 --> 00:28:16,986
There is a subset of the
MapKit API available as part


621
00:28:17,056 --> 00:28:20,926
of the watchOS STK and in
particular the MK Map API.


622
00:28:21,896 --> 00:28:22,946
The cool thing about this,


623
00:28:22,946 --> 00:28:27,226
from your application you hand
a location over to the maps app


624
00:28:27,266 --> 00:28:30,096
to send the user to go view it
in the full maps application.


625
00:28:30,696 --> 00:28:34,486
Not only can they view it,
you can start directions


626
00:28:34,486 --> 00:28:36,646
and routing from the app.


627
00:28:36,646 --> 00:28:39,056
If you have a location and
want to have the user be able


628
00:28:39,056 --> 00:28:40,566
to start getting
directions right to it,


629
00:28:40,896 --> 00:28:43,496
you use the MapKit API
to begin the directions


630
00:28:43,496 --> 00:28:46,216
on the Apple Watch and the
iPhone and send the user


631
00:28:46,216 --> 00:28:48,826
over to get the directions
from the app.


632
00:28:50,076 --> 00:28:53,016
There is also a session in
MapKit, What's New in MapKit


633
00:28:53,016 --> 00:28:54,706
to learn all about that.


634
00:28:55,656 --> 00:28:58,116
The last two frameworks
I want to talk about,


635
00:28:58,116 --> 00:29:01,676
they're all about getting access
to your data on Apple Watch --


636
00:29:02,146 --> 00:29:05,456
your user's data on Apple
Watch for types of data


637
00:29:05,456 --> 00:29:07,026
that we've already
synchronized over.


638
00:29:08,616 --> 00:29:10,466
The first one is the
contacts framework.


639
00:29:11,396 --> 00:29:14,306
Contacts is a brand-new
framework in iOS 9


640
00:29:14,306 --> 00:29:18,026
and watchOS 2 giving you
access to the address book


641
00:29:18,176 --> 00:29:22,396
on Apple Watch and it has been
synchronized because we use it


642
00:29:22,396 --> 00:29:25,296
in our own applications and you
have access to the local data


643
00:29:25,296 --> 00:29:26,736
without having to transfer it.


644
00:29:26,736 --> 00:29:29,856
There is a session on
the brand new framework,


645
00:29:30,246 --> 00:29:33,046
Introducing Contacts
Framework for iOS and OS 10,


646
00:29:33,356 --> 00:29:34,826
so you should definitely
check that out if you're going


647
00:29:34,826 --> 00:29:36,126
to be using contact information.


648
00:29:36,866 --> 00:29:40,216
Just like with core
location, the authorization


649
00:29:40,216 --> 00:29:42,376
to access the user's
address book is shared


650
00:29:42,376 --> 00:29:44,716
between the iOS app
and the watchOS app.


651
00:29:45,386 --> 00:29:48,616
Since the user authorized you to
get access to the address book


652
00:29:48,616 --> 00:29:50,966
on either sides you have
authorization on both


653
00:29:51,426 --> 00:29:53,716
and there is one place
to manage authorization


654
00:29:54,066 --> 00:29:56,456
on both Apple Watch and iPhone.


655
00:29:57,436 --> 00:30:00,836
The final is EventKit.


656
00:30:01,186 --> 00:30:03,646
EventKit is how you get
access to the user's calendar.


657
00:30:04,656 --> 00:30:07,286
This has the same set of story


658
00:30:07,286 --> 00:30:08,526
as we talked about
with contacts.


659
00:30:09,116 --> 00:30:10,906
Once you have gotten
authorization to access it,


660
00:30:10,906 --> 00:30:14,226
it is the same on both your
iPhone app and the watch app.


661
00:30:16,496 --> 00:30:20,456
So there is a ton of
stuff in watchOS 2.


662
00:30:21,716 --> 00:30:23,116
Three brand-new frameworks --


663
00:30:23,946 --> 00:30:27,496
well, three watch-specific
frameworks, WatchKit,


664
00:30:27,836 --> 00:30:32,106
watch connectivity --
oh -- and Clock Kit.


665
00:30:34,576 --> 00:30:35,496
Thank you.


666
00:30:36,016 --> 00:30:38,016
[ Laughter ]


667
00:30:38,016 --> 00:30:43,000
[ Applause ]


668
00:30:43,046 --> 00:30:45,206
Three brand-new frameworks
that are specific to watchOS


669
00:30:45,956 --> 00:30:48,916
and there is a ton of new
functionality available in all


670
00:30:48,916 --> 00:30:52,746
of the other frameworks
that are specific to watchOS


671
00:30:52,746 --> 00:30:54,646
and some are shared
across all your apps.


672
00:30:55,766 --> 00:30:57,956
There is a lot of
stuff when you learn it


673
00:30:57,956 --> 00:31:00,976
on one platform you apply it
to all of the apps running


674
00:31:00,976 --> 00:31:03,996
on all platforms and other
frameworks to take advantage


675
00:31:03,996 --> 00:31:05,486
of the watch-specific
functionality.


676
00:31:06,486 --> 00:31:08,166
There is a ton of sessions
throughout the week


677
00:31:08,166 --> 00:31:09,966
and other places to
learn more stuff.


678
00:31:10,706 --> 00:31:12,886
In the documentation we
have a transition guide,


679
00:31:12,946 --> 00:31:17,176
the WatchKit transition guide
having you learn the WatchKit


680
00:31:17,176 --> 00:31:21,296
app for watchOS 1 and updated
it to run for watchOS 2 to run


681
00:31:21,296 --> 00:31:23,296
as a native app on
the watch itself.


682
00:31:24,506 --> 00:31:27,466
There is plenty of sample
code and the developer forum


683
00:31:27,466 --> 00:31:30,096
and the technical support
are great places to go


684
00:31:30,096 --> 00:31:31,546
to get all your questions
answered.


685
00:31:32,096 --> 00:31:33,316
That's what's new in WatchKit.


686
00:31:33,636 --> 00:31:35,166
Thank you for coming
out this morning.


687
00:31:35,416 --> 00:31:38,916
I can't wait to see what you
guys build with all of this.


688
00:31:41,516 --> 00:31:52,950
[ Applause ]

