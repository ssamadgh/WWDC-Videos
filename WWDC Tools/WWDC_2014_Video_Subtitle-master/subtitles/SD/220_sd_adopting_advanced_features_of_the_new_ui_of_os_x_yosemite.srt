1
00:00:11,316 --> 00:00:11,666
>> Hi.


2
00:00:12,826 --> 00:00:13,216
>> Hi.


3
00:00:13,406 --> 00:00:16,006
>> Hope you all had
a good lunch.


4
00:00:16,006 --> 00:00:18,486
This is Session 220,
"Adopting Advanced Features


5
00:00:18,486 --> 00:00:20,306
of the New UI" in
Mac OS X Yosemite.


6
00:00:21,146 --> 00:00:26,126
I'm Chris Dreessen, and let
me start by showing off some


7
00:00:26,126 --> 00:00:28,296
of those new UI features
in Yosemite.


8
00:00:29,796 --> 00:00:33,206
So to begin with here's
a simple Finder window,


9
00:00:33,416 --> 00:00:36,266
and the big changes here,
you'll notice the dock is kind


10
00:00:36,266 --> 00:00:39,206
of just grabbing the color
from the desktop picture.


11
00:00:39,586 --> 00:00:43,946
Likewise, the Finder sidebar is
infused with the bright pinks


12
00:00:43,946 --> 00:00:46,106
and oranges of the
desktop picture,


13
00:00:46,466 --> 00:00:49,626
and it's really complimenting
the user's content onscreen.


14
00:00:50,486 --> 00:00:56,136
Likewise, we have a picture of
Safari here, and the content


15
00:00:56,136 --> 00:00:57,136
in the Safari window
is very different


16
00:00:57,136 --> 00:01:00,896
than the Finder window, but
the toolbar is just grabbing


17
00:01:00,896 --> 00:01:04,495
that color from the webpage
and making the UI really,


18
00:01:04,495 --> 00:01:06,636
really compliment
the web content here.


19
00:01:07,226 --> 00:01:11,696
And finally, we have
Notification Center,


20
00:01:11,726 --> 00:01:14,406
which has been around
a little while now,


21
00:01:14,826 --> 00:01:19,006
but in Yosemite you can see it's
using one of our new appearances


22
00:01:19,446 --> 00:01:21,736
and it's pulling up the
really bright reds and oranges


23
00:01:21,736 --> 00:01:23,056
and yellows from
the desktop picture.


24
00:01:23,296 --> 00:01:24,326
And it's not just
the background.


25
00:01:24,326 --> 00:01:25,416
Also the text is pulling it up


26
00:01:25,416 --> 00:01:27,676
and the buttons are pulling
it up, and we're going


27
00:01:27,676 --> 00:01:30,806
to show you how to build
UIs that also grab color


28
00:01:30,806 --> 00:01:32,706
from the environment like this.


29
00:01:33,716 --> 00:01:37,136
So to start with I'm going
to mention a few changes


30
00:01:37,136 --> 00:01:40,586
in existing AppKit APIs,
especially NSColor, NSImage.


31
00:01:40,586 --> 00:01:43,556
Then I'm going to spend a
while talking about title bars


32
00:01:43,556 --> 00:01:45,636
and toolbars in a
section I like to call,


33
00:01:45,636 --> 00:01:46,886
title bars and toolbars.


34
00:01:48,226 --> 00:01:52,086
And after that I'll invite
Corbin on stage to talk


35
00:01:52,236 --> 00:01:56,396
about some important new
classes that allow you


36
00:01:56,396 --> 00:01:59,026
to use these visual effects,
particularly a visual effect we


37
00:01:59,026 --> 00:02:00,506
like to refer to as Vibrancy.


38
00:02:01,396 --> 00:02:03,696
And finally we'll top
that off with discussion


39
00:02:03,696 --> 00:02:07,176
of performance regarding
these new effects.


40
00:02:07,536 --> 00:02:11,886
So to begin reviewing our
oldie but goodie APIs,


41
00:02:12,366 --> 00:02:15,386
this is NSSegmentedControl
in Yosemite.


42
00:02:15,416 --> 00:02:20,166
You'll notice we have Finder in
the background in this picture,


43
00:02:20,166 --> 00:02:21,116
Safari in the foreground,


44
00:02:21,146 --> 00:02:22,526
and these are the
back/forward controls,


45
00:02:22,526 --> 00:02:24,366
and these are separate
elements now,


46
00:02:24,816 --> 00:02:27,446
but they're not actually
separate NSControls.


47
00:02:27,856 --> 00:02:30,436
This is the same
NSSegmentedControl as always,


48
00:02:30,786 --> 00:02:35,686
we just configured its segment
style property with a new value.


49
00:02:35,686 --> 00:02:37,786
The NSSegmentStyle
enumeration has been augmented


50
00:02:37,786 --> 00:02:39,386
with NSSegmentStyleSeparated,


51
00:02:39,656 --> 00:02:41,486
and this gives you the
disjoint appearance


52
00:02:41,486 --> 00:02:42,796
between the back
and forward buttons.


53
00:02:43,176 --> 00:02:45,206
So, when you replicate
that appearance,


54
00:02:45,206 --> 00:02:46,486
don't throw two NS
buttons at it,


55
00:02:46,486 --> 00:02:49,246
just use an NSSegmentedControl,
and just NSSegmentStyle.


56
00:02:49,246 --> 00:02:55,496
So, I'd like to talk
about NSImage now,


57
00:02:55,566 --> 00:02:57,726
especially if you've been using
UIImage you'll be familiar


58
00:02:57,726 --> 00:02:58,966
with some of the things
I'm talking about.


59
00:02:59,446 --> 00:03:02,276
But let's just start with
this little sample image here.


60
00:03:02,276 --> 00:03:04,626
This is kind of a button
or a bubble or a background


61
00:03:04,626 --> 00:03:06,506
of some sort, and if you tried


62
00:03:06,506 --> 00:03:08,836
to stretch it using the
NSImage API right now,


63
00:03:08,836 --> 00:03:11,446
you put it in NSImageView or you
draw it yourself, you're going


64
00:03:11,446 --> 00:03:14,226
to notice the image is
stretched uniformly.


65
00:03:14,566 --> 00:03:17,546
So the corners here distort
as the image is resized,


66
00:03:17,856 --> 00:03:20,986
and that's kind of neat but
if we're going for a button


67
00:03:21,456 --> 00:03:24,636
or a window background, it's
not really the effect we want.


68
00:03:24,636 --> 00:03:28,186
And UIImage has had this
for quite a few releases,


69
00:03:28,546 --> 00:03:30,086
but NSImage now joins it


70
00:03:30,086 --> 00:03:31,836
in introducing the
capInsets property,


71
00:03:32,406 --> 00:03:33,926
and this takes an
NSEdgeInsets struct [applause].


72
00:03:34,386 --> 00:03:34,796
Thank you.


73
00:03:35,056 --> 00:03:35,396
Thank you.


74
00:03:37,206 --> 00:03:38,676
This takes an NSEdgeInsets
struct


75
00:03:38,676 --> 00:03:40,296
which lets you specify
the distance


76
00:03:40,326 --> 00:03:42,026
to the edges to make these caps.


77
00:03:42,576 --> 00:03:46,336
And those capInsets are in
the image coordinate system,


78
00:03:46,446 --> 00:03:49,796
so to review, the NSImage
coordinate system begins at a -


79
00:03:49,796 --> 00:03:51,996
sorry, (0,0) on the lower
left, the image size


80
00:03:51,996 --> 00:03:52,816
and height on the right.


81
00:03:53,416 --> 00:03:56,076
Anyway, if you set the capInsets
on an image and draw it


82
00:03:56,076 --> 00:03:57,376
like you used to
resize you'll note


83
00:03:57,376 --> 00:03:58,886
that we're now holding the edges


84
00:03:59,136 --> 00:04:02,776
and corners constant while
resizing the interiors


85
00:04:02,776 --> 00:04:05,266
of the image, so this lets you
get those stretchable buttons,


86
00:04:05,486 --> 00:04:08,176
those stretchable
backgrounds quite easily.


87
00:04:08,366 --> 00:04:11,306
There's one other thing I
want to mention about this.


88
00:04:11,666 --> 00:04:14,036
So again, if you're
familiar with UIImage,


89
00:04:14,036 --> 00:04:15,876
you know the
UIImageResizingMode,


90
00:04:16,076 --> 00:04:17,696
we now have NSImageResizingMode,


91
00:04:17,745 --> 00:04:19,255
which offers Stretch
and Tile options.


92
00:04:19,636 --> 00:04:22,336
Stretch is the default, it
matches the behavior we've used


93
00:04:22,336 --> 00:04:24,106
on Mac OS X, pretty
much forever now.


94
00:04:24,516 --> 00:04:26,986
Tile is a new option,
and these are exposed


95
00:04:26,986 --> 00:04:29,366
on the surprisingly named
resizing mode property


96
00:04:29,396 --> 00:04:30,056
on NSImage [applause].


97
00:04:30,686 --> 00:04:31,196
Thank you, again.


98
00:04:31,746 --> 00:04:34,766
So, as an example here, this
is setting the resizing mode


99
00:04:34,766 --> 00:04:38,396
to Tile, and Keynote
doesn't quite do it justice.


100
00:04:38,396 --> 00:04:39,176
There's a crossfade here,


101
00:04:39,176 --> 00:04:41,166
but you can see how the
image is actually being tiled


102
00:04:41,166 --> 00:04:42,226
into these larger sizes.


103
00:04:42,766 --> 00:04:45,416
So if you have interesting
detail you don't want stretched,


104
00:04:45,416 --> 00:04:46,576
you want replicated instead.


105
00:04:46,856 --> 00:04:48,616
This is how you would pull
it off, and you can use


106
00:04:48,616 --> 00:04:50,466
that with an NSButton
or any NSImage view.


107
00:04:51,276 --> 00:04:54,456
So, to set up the slicing,
I've taught you how


108
00:04:54,456 --> 00:04:56,546
to do it programmatically
now, but you can also do this


109
00:04:56,546 --> 00:04:59,426
with Xcode, and to do that
you just open your image


110
00:04:59,426 --> 00:05:01,516
in your asset catalog, and you
get a nice preview of it here.


111
00:05:01,516 --> 00:05:03,616
Here's the nine slice
checkerboard image,


112
00:05:04,196 --> 00:05:07,266
and you can set this up
using the IB Inspector


113
00:05:07,736 --> 00:05:09,646
in this area here.


114
00:05:09,846 --> 00:05:12,416
We've got the slicing
mode, you have horizontal


115
00:05:12,416 --> 00:05:13,976
and vertical here for
a nine slice image.


116
00:05:13,976 --> 00:05:17,346
You can also do three slice,
just horizontal, just vertical.


117
00:05:18,616 --> 00:05:20,816
And if you want to
change the tiling mode,


118
00:05:20,816 --> 00:05:22,436
we have the Stretches
option here.


119
00:05:22,436 --> 00:05:23,676
So you can do that graphically


120
00:05:23,676 --> 00:05:24,956
without ever having
to change your code.


121
00:05:25,716 --> 00:05:27,966
That covered NSImage.


122
00:05:28,286 --> 00:05:30,926
I'd like to mention a few things
about NSAppearance in Yosemite.


123
00:05:31,656 --> 00:05:37,746
So, NSAppearance is an API we've
had a reappearance in Mavericks.


124
00:05:37,746 --> 00:05:41,146
We offer two appearances in
Mavericks, which you could get


125
00:05:41,146 --> 00:05:43,286
at using the appearanceNamed
class method


126
00:05:43,636 --> 00:05:44,646
on the NSAppearance class.


127
00:05:45,856 --> 00:05:49,206
And the default is
NSAppearanceNameAqua,


128
00:05:49,206 --> 00:05:50,816
which is what we've
used forever.


129
00:05:50,816 --> 00:05:52,586
We continue to use this
as the default appearance,


130
00:05:52,936 --> 00:05:54,526
and we had this other
appearance called


131
00:05:54,526 --> 00:05:57,276
NSAppearanceNameLightContent,
which was used by popovers.


132
00:05:57,886 --> 00:06:00,736
And in Yosemite we
are saying goodbye


133
00:06:01,006 --> 00:06:02,966
to LightContent,
don't use it anymore.


134
00:06:03,476 --> 00:06:06,186
Instead, popovers use one
of our new appearance names,


135
00:06:06,666 --> 00:06:09,606
which is VibrantLight
and VibrantDark.


136
00:06:09,796 --> 00:06:11,926
And Corbin's going to talk a
lot about these in his section.


137
00:06:12,346 --> 00:06:14,086
But let me just give you a
preview to what these look like.


138
00:06:14,086 --> 00:06:15,446
We have VibrantLight
on the left,


139
00:06:15,956 --> 00:06:17,036
and VibrantDark on the right.


140
00:06:17,036 --> 00:06:19,866
And you can see how the
background and the elements are


141
00:06:19,866 --> 00:06:22,206
like what's pulling up that
color from beneath the window


142
00:06:22,206 --> 00:06:27,396
in this case, and how the house
image offers much more contrast


143
00:06:27,396 --> 00:06:29,246
against that background
that it might have before.


144
00:06:29,246 --> 00:06:33,626
So I mentioned color here, so it
probably won't surprise anyone


145
00:06:33,626 --> 00:06:36,726
to know that NSColor has
some notable mentions here.


146
00:06:37,326 --> 00:06:40,266
The big one is that system
colors are appearance-sensitive,


147
00:06:40,266 --> 00:06:41,866
so if you use VibrantLight
or VibrantDark,


148
00:06:42,026 --> 00:06:43,196
the system colors are going


149
00:06:43,196 --> 00:06:45,146
to return different
effective values.


150
00:06:45,246 --> 00:06:46,386
So system colors are things


151
00:06:46,386 --> 00:06:48,356
like controlBackgroundColor,
controlTextColor.


152
00:06:48,686 --> 00:06:51,426
There's dozens more,
they're in the NSColor header


153
00:06:51,426 --> 00:06:52,426
and the documentation.


154
00:06:53,056 --> 00:06:57,036
We also have two new system
colors and that's labelColor


155
00:06:57,036 --> 00:06:58,266
and SecondaryLabelColor,


156
00:06:58,846 --> 00:07:01,716
and Corbin will also talk
about these in depth.


157
00:07:01,716 --> 00:07:05,476
All right, this is my
favorite section here,


158
00:07:05,706 --> 00:07:06,786
title bars and toolbars.


159
00:07:06,836 --> 00:07:09,096
We're all familiar with
title bars and toolbars,


160
00:07:09,786 --> 00:07:12,826
but in Yosemite they have
a new default appearance,


161
00:07:13,106 --> 00:07:16,086
and one of the key elements of
that new default appearance is


162
00:07:16,086 --> 00:07:17,976
that they blur document content.


163
00:07:19,076 --> 00:07:22,686
So here's a slightly awkward
video of me scrolling a picture


164
00:07:22,686 --> 00:07:26,366
in Preview, and you can see
that as I scroll, the title bar


165
00:07:26,366 --> 00:07:28,236
and toolbar are actually
absorbing and blurring


166
00:07:28,236 --> 00:07:31,266
that content in real time,
and Preview didn't have


167
00:07:31,326 --> 00:07:32,836
to do anything to
gain this state,


168
00:07:32,836 --> 00:07:34,386
they got that feature for free.


169
00:07:35,356 --> 00:07:37,736
Let me explain how that works.


170
00:07:38,206 --> 00:07:41,196
So, if you have a scroll
view and it's adjacent


171
00:07:41,196 --> 00:07:43,066
to your title bar or toolbar,


172
00:07:43,066 --> 00:07:44,586
we're going to automatically
draw


173
00:07:44,866 --> 00:07:48,096
that previously obscured content
and we'll blur it for you.


174
00:07:48,546 --> 00:07:51,666
If your scroll view isn't
adjacent to the title bar,


175
00:07:51,666 --> 00:07:52,536
we're going to ignore it.


176
00:07:52,536 --> 00:07:54,006
So you can see on
the left I've kind


177
00:07:54,006 --> 00:07:55,956
of made a mockup showing
the title bar blurring


178
00:07:55,956 --> 00:07:57,306
that orange document content,


179
00:07:57,306 --> 00:07:59,846
and on the right it's not
adjacent to the title bar


180
00:07:59,956 --> 00:08:02,066
so we're not blurring it
or absorbing it at all.


181
00:08:02,556 --> 00:08:06,426
And that works really well for
almost all content out there,


182
00:08:06,706 --> 00:08:08,426
but there's a few
cases I want to call


183
00:08:08,426 --> 00:08:13,016
out where our magic there
can use a little bit of help.


184
00:08:13,016 --> 00:08:17,836
So, one of those is movie
views, this is a big area


185
00:08:17,836 --> 00:08:19,396
where we can't just
automatically replicate the


186
00:08:19,396 --> 00:08:19,996
content for you.


187
00:08:20,496 --> 00:08:25,646
Likewise, OpenGL views
are in a similar place.


188
00:08:25,646 --> 00:08:27,776
You may notice kind of a
hardware-accelerated theme going


189
00:08:27,776 --> 00:08:30,366
on using the GPU, and
that's a good observation.


190
00:08:30,706 --> 00:08:33,326
Some types of layers
also need a little bit


191
00:08:33,326 --> 00:08:34,106
of help in these areas.


192
00:08:34,346 --> 00:08:36,826
Movie layers and OpenGL layers
kind of get grandfathered


193
00:08:36,826 --> 00:08:39,135
in with the views, but
other things like layers


194
00:08:39,135 --> 00:08:41,246
with 3D transforms and layers


195
00:08:41,246 --> 00:08:44,216
with Core Image filters also
require a little bit of help


196
00:08:44,376 --> 00:08:45,956
to show up in a title
bar and toolbar.


197
00:08:46,526 --> 00:08:47,936
Let me show you how
you can do that.


198
00:08:48,806 --> 00:08:51,646
We have to place them
there explicitly,


199
00:08:51,706 --> 00:08:54,756
and we can do this using this
new window style mask called


200
00:08:54,806 --> 00:08:56,786
NSFullSizeContentViewWindowMask.


201
00:08:56,786 --> 00:09:00,236
This is a simple demo
app I threw together.


202
00:09:00,586 --> 00:09:02,206
This is using a style mask


203
00:09:02,206 --> 00:09:04,536
that does not include the
full size content view flag,


204
00:09:04,666 --> 00:09:08,046
and you can see our content view
is vertically beneath the title


205
00:09:08,046 --> 00:09:11,196
bar and toolbar, and this
content view just has a slightly


206
00:09:11,196 --> 00:09:13,276
odd red box and black box.


207
00:09:13,756 --> 00:09:15,856
If we add the
NSFullSizeContentViewWindowMask,


208
00:09:16,806 --> 00:09:19,276
all of a sudden the content
view size hasn't changed


209
00:09:19,746 --> 00:09:21,366
but the title bar and
toolbar are overlaid


210
00:09:21,366 --> 00:09:22,346
on top of that content.


211
00:09:22,346 --> 00:09:24,296
You can see it blurring
the red and the black


212
00:09:24,296 --> 00:09:25,666
in the title bar there.


213
00:09:26,476 --> 00:09:27,866
So, if you look at this mockup


214
00:09:27,866 --> 00:09:30,326
and you use the
NSFullSizeContentViewWindowMask,


215
00:09:30,706 --> 00:09:33,566
a problem you'll notice is that
those controls you used to have


216
00:09:33,566 --> 00:09:35,966
at the top of your window are
still at the top of your window


217
00:09:36,336 --> 00:09:38,576
but the title bar overlays them.


218
00:09:39,256 --> 00:09:42,966
And unless you're trying to
play a very intricate mind game


219
00:09:42,966 --> 00:09:44,926
with your user, and if
you are your job is done,


220
00:09:44,926 --> 00:09:47,566
congratulations, you're going
to want figure out a way


221
00:09:47,646 --> 00:09:50,506
to get your controls to
be anchored at the bottom


222
00:09:50,506 --> 00:09:51,306
of the title bar again.


223
00:09:52,046 --> 00:09:56,346
And probably the easiest way to
do this is by using Auto Layout.


224
00:09:57,016 --> 00:10:00,476
So, NSWindow offers
a new property called


225
00:10:00,476 --> 00:10:04,446
contentLayoutGuide and
this returns an object


226
00:10:04,446 --> 00:10:06,206
that you can use in
a layout constraint,


227
00:10:06,206 --> 00:10:07,676
just like you would
use in NSView.


228
00:10:08,226 --> 00:10:11,606
The example here I'm creating a
constraint which binds the top


229
00:10:11,606 --> 00:10:14,586
of my view to the top of the
windows contentLayoutGuide,


230
00:10:14,586 --> 00:10:16,416
and that means that
the top coordinate


231
00:10:16,416 --> 00:10:18,626
of both our views is going to be
at the same place in the window


232
00:10:18,656 --> 00:10:21,046
when Auto Layout lays them out.


233
00:10:21,416 --> 00:10:25,116
If you're not using Auto
Layout, sorry, we have a new API


234
00:10:25,336 --> 00:10:28,886
in Yosemite on layout
constraints called the active


235
00:10:28,956 --> 00:10:31,446
property, and you can now
install a constraint just


236
00:10:31,446 --> 00:10:33,576
by setting it to be
active, you don't need


237
00:10:33,576 --> 00:10:37,796
to find a common ancestor
to add the constraint to.


238
00:10:38,326 --> 00:10:39,246
In this case,


239
00:10:39,346 --> 00:10:41,536
the contentLayoutGuide doesn't
necessarily have a common


240
00:10:41,536 --> 00:10:45,976
ancestor and this API
takes care of it for you.


241
00:10:46,056 --> 00:10:48,466
If you're not using Auto
Layout we have another property


242
00:10:48,466 --> 00:10:50,176
for you called
contentLayoutRect,


243
00:10:50,326 --> 00:10:51,426
and that's just an NSRect


244
00:10:51,426 --> 00:10:56,356
that represents the
unobscured area of the window.


245
00:10:56,956 --> 00:10:58,466
It's key-value observing
compliant,


246
00:10:58,996 --> 00:11:01,526
which means if you register as
a key-value observer for it,


247
00:11:01,526 --> 00:11:03,026
you're going to get called
back when it changes,


248
00:11:03,426 --> 00:11:05,696
and that's important
because it can change.


249
00:11:05,846 --> 00:11:09,026
The title bar can change height,
the toolbar can have items added


250
00:11:09,026 --> 00:11:11,006
or removed or labels
added and removed.


251
00:11:11,006 --> 00:11:12,806
You can go from small icon
mode to large icon mode,


252
00:11:13,126 --> 00:11:14,796
so it's important
to be aware of it.


253
00:11:15,646 --> 00:11:16,816
Anyway, assuming we use one


254
00:11:16,816 --> 00:11:19,616
of those methods we can now
layout our buttons beneath the


255
00:11:19,616 --> 00:11:20,536
title bar the way we want.


256
00:11:20,536 --> 00:11:21,746
They're accessible
to the user again,


257
00:11:22,286 --> 00:11:25,336
but the scroll view presents
kind of a challenge for us.


258
00:11:25,586 --> 00:11:29,106
We want it to start off
unobscured by the title bar


259
00:11:29,106 --> 00:11:31,506
and we don't want the
scroller to be obscured


260
00:11:31,506 --> 00:11:32,696
by the title bar either.


261
00:11:32,986 --> 00:11:36,076
However, if we just leave the
scroll view positioned to take


262
00:11:36,076 --> 00:11:38,476
up the entire height of the
content view, it will be.


263
00:11:38,476 --> 00:11:42,286
So we need a way to fix that,
and we have a way to fix that.


264
00:11:42,966 --> 00:11:43,866
We have a new API


265
00:11:43,866 --> 00:11:46,456
on NSScrollView called
contentInsets,


266
00:11:46,706 --> 00:11:49,596
and this just adds margins
around the scroll view


267
00:11:50,006 --> 00:11:51,806
where we'll inset
the content view.


268
00:11:52,316 --> 00:11:56,266
So, in this example I'm using
the contentLayoutRect property


269
00:11:56,266 --> 00:11:59,486
of the window and the windows
frame to infer the offset


270
00:11:59,556 --> 00:12:02,376
between the top of the window
and the top of the content area,


271
00:12:02,376 --> 00:12:04,836
and I had just gone ahead
and set a contentInsets


272
00:12:04,836 --> 00:12:06,756
where its top property
is equal to that offset.


273
00:12:07,466 --> 00:12:09,106
There's an easier
way of doing this.


274
00:12:09,106 --> 00:12:10,616
If you do this you're
going to need a key-value


275
00:12:10,616 --> 00:12:12,816
to observe the contentLayoutRect
notice when it changes.


276
00:12:13,466 --> 00:12:15,866
NSScroll view also
offers a Boolean called


277
00:12:15,866 --> 00:12:17,736
automaticallyAdjusts
ContentInsets.


278
00:12:17,736 --> 00:12:19,786
And if you set this to Yes,


279
00:12:20,296 --> 00:12:23,736
it will automatically
adjust your contents


280
00:12:23,736 --> 00:12:25,676
so the scroller isn't
obscured by the title bar


281
00:12:25,676 --> 00:12:27,746
and the content itself
will start unobscured


282
00:12:27,746 --> 00:12:28,446
by the title bar.


283
00:12:28,446 --> 00:12:32,036
So if we hit back our little
simplified example here,


284
00:12:32,326 --> 00:12:33,786
this is how the window will look


285
00:12:33,786 --> 00:12:35,976
like when it's opened
by the user.


286
00:12:36,476 --> 00:12:37,556
When they begin scrolling,


287
00:12:37,776 --> 00:12:39,326
the scroll view content
can still slide


288
00:12:39,326 --> 00:12:41,156
under the title bar
just the way we want


289
00:12:41,156 --> 00:12:45,146
and we can get this appearance
of blurring the document content


290
00:12:45,146 --> 00:12:48,216
or the title bar without
packet replicating it for you.


291
00:12:48,276 --> 00:12:53,266
So I'd like to show you
another screenshot here.


292
00:12:53,266 --> 00:12:57,236
This is a picture of Safari, and
something you're going to notice


293
00:12:57,236 --> 00:13:00,356
about it is that the title
of the window isn't there,


294
00:13:00,356 --> 00:13:03,856
instead the window widgets and
the toolbar share the same row.


295
00:13:04,416 --> 00:13:06,036
Likewise here's a
picture of Maps.


296
00:13:06,496 --> 00:13:07,496
It's doing a similar thing.


297
00:13:07,866 --> 00:13:10,196
Notice the title bar is
grabbing that content


298
00:13:10,196 --> 00:13:13,396
from the window again,
but it's also leaving


299
00:13:13,396 --> 00:13:14,456
out the title of the window.


300
00:13:15,396 --> 00:13:18,326
So, if you want to do this in
your apps, it's not difficult.


301
00:13:18,796 --> 00:13:21,646
We have a new enumeration
called NSWindowTitleVisiblity.


302
00:13:21,646 --> 00:13:24,846
It has three states: Visible,
Hidden and Hidden When Active.


303
00:13:25,446 --> 00:13:27,716
Hidden When Active adds
a little bit of context


304
00:13:27,716 --> 00:13:29,826
so when a window goes to the
background the title comes back.


305
00:13:29,826 --> 00:13:33,956
That could distinguish it from
otherwise similar windows.


306
00:13:34,006 --> 00:13:36,986
These are settable through
the NSWindowTitleVisibility


307
00:13:36,986 --> 00:13:37,366
property.


308
00:13:37,696 --> 00:13:40,306
So just a quick example, here's
that Finder window again.


309
00:13:40,746 --> 00:13:43,506
This is TitleVisible, and you
can see it has a separate row


310
00:13:43,506 --> 00:13:47,666
for the widgets and the title,
followed by the toolbar.


311
00:13:47,666 --> 00:13:51,416
Whereas NSWindowTitleHidden,
it's gone, the title's gone,


312
00:13:51,416 --> 00:13:53,496
the window widgets and the
toolbar share the same row.


313
00:13:54,186 --> 00:13:56,776
Here's another picture, this
is an app called Reminders.


314
00:13:56,996 --> 00:13:58,706
If you didn't know
this was Reminders,


315
00:13:58,936 --> 00:14:01,176
there's a hint at the top.


316
00:14:01,646 --> 00:14:04,696
But you can see the window
is divided into two sections.


317
00:14:04,696 --> 00:14:08,516
They have a sidebar that runs
all the way from the bottom


318
00:14:08,516 --> 00:14:10,216
of the window to the
top of the window,


319
00:14:10,216 --> 00:14:12,026
but you'll note the
sidebar is not being blurred


320
00:14:12,026 --> 00:14:12,736
by the title bar.


321
00:14:14,166 --> 00:14:15,356
Likewise, here's a
picture of Notes,


322
00:14:15,706 --> 00:14:16,886
and they're doing
a similar thing,


323
00:14:17,226 --> 00:14:19,906
the note on the right actually
has this nice paper texture


324
00:14:19,906 --> 00:14:21,996
to it and that paper
texture goes all the way


325
00:14:21,996 --> 00:14:23,066
to the top of the window again.


326
00:14:23,626 --> 00:14:25,396
And this is also
easy to accomplish.


327
00:14:25,856 --> 00:14:28,506
NSWindow has a new
property called


328
00:14:28,506 --> 00:14:29,786
titlebarAppearsTransparent.


329
00:14:30,296 --> 00:14:33,196
So, if we go back to my
silly little red box,


330
00:14:33,196 --> 00:14:34,656
black box example, this is it


331
00:14:34,656 --> 00:14:37,076
when titlebarAppearsTransparent
equals No,


332
00:14:37,076 --> 00:14:37,916
and that's the default.


333
00:14:37,916 --> 00:14:40,546
So you can see the title
bar is blurring our content.


334
00:14:40,866 --> 00:14:44,986
If we set it to Yes, the red box


335
00:14:44,986 --> 00:14:46,306
and the black box
are unobscured.


336
00:14:46,606 --> 00:14:48,816
So you can do tricks like
put views that go all the way


337
00:14:48,816 --> 00:14:50,416
from the bottom of
the window to the top


338
00:14:50,626 --> 00:14:54,146
or otherwise augment
the title bar.


339
00:14:54,366 --> 00:14:56,586
So, I'd like to invite
Corbin on stage.


340
00:14:56,586 --> 00:14:59,036
He's going to talk about some
new APIs that'll let you take


341
00:14:59,036 --> 00:15:02,136
advantage of our visual effects,
especially one called Vibrancy.


342
00:15:02,696 --> 00:15:03,286
Welcome, Corbin.


343
00:15:03,686 --> 00:15:04,166
>> Thanks, Chris.


344
00:15:04,516 --> 00:15:07,486
So, my name's Corbin Dunn, and
I'm an AppKit Software Engineer.


345
00:15:08,626 --> 00:15:10,356
So, what am I going
to talk about today?


346
00:15:10,356 --> 00:15:12,566
I'm going to talk about
a new class in AppKit


347
00:15:12,826 --> 00:15:14,396
to do these blurring
and visual effects


348
00:15:14,426 --> 00:15:15,756
called NSVisualEffectView.


349
00:15:15,756 --> 00:15:18,706
I'm going to talk about
NSAppearance and some materials


350
00:15:18,706 --> 00:15:21,776
and how to get the custom
colors and whatnot that we have.


351
00:15:22,556 --> 00:15:24,776
Then we'll talk about Vibrancy
and how to get that vibrancy


352
00:15:24,956 --> 00:15:26,166
and how to do it
in your controls


353
00:15:26,376 --> 00:15:27,646
and standard controls in AppKit.


354
00:15:28,086 --> 00:15:30,306
And then finally I'm going
to discuss briefly some


355
00:15:30,306 --> 00:15:33,096
of the standard controls in
AppKit that adopt these features


356
00:15:33,176 --> 00:15:35,156
and how we do it and
how it affects you.


357
00:15:36,126 --> 00:15:39,476
So, first of all let's jump
right in and go to a demo.


358
00:15:40,166 --> 00:15:42,866
This demo is called
VisualEffectPlayground,


359
00:15:43,416 --> 00:15:45,676
and it's not an actual
playground app


360
00:15:45,676 --> 00:15:50,116
like you might think, but what
it has here is it shows a lot


361
00:15:50,116 --> 00:15:52,486
of the features that I'm
going to discuss today.


362
00:15:52,486 --> 00:15:53,806
There are a lot of
buttons in this app,


363
00:15:54,196 --> 00:15:56,026
and they show each
thing that I talk about.


364
00:15:56,556 --> 00:15:58,566
Search on the developer's
site for Yosemite


365
00:15:58,566 --> 00:16:00,916
for VisualEffectPlayground
and you can find this,


366
00:16:01,286 --> 00:16:03,116
take it apart, and play around
with it and figure out how


367
00:16:03,116 --> 00:16:04,266
to create apps like this.


368
00:16:04,966 --> 00:16:06,416
So some things that it
does, if I click one


369
00:16:06,416 --> 00:16:08,226
of these images here
it shows how


370
00:16:08,336 --> 00:16:10,506
to create basically your
own type of sidebar,


371
00:16:10,506 --> 00:16:11,896
how to do some vibrancy.


372
00:16:12,396 --> 00:16:16,576
There's a couple examples of
how to do some type of blurring


373
00:16:16,576 --> 00:16:19,906
with a Maps type of application,
how to get to blur here,


374
00:16:19,906 --> 00:16:23,686
and it also will blur
under the title bar, too.


375
00:16:23,936 --> 00:16:26,106
Another one showing off
our dark look too and how


376
00:16:26,106 --> 00:16:28,486
to do something similar
to what FaceTime does.


377
00:16:29,826 --> 00:16:31,736
So these new visual
effects, I'm going to talk


378
00:16:31,736 --> 00:16:33,986
about a new class called
NSVisualEffectView,


379
00:16:34,266 --> 00:16:37,116
and here's a screenshot of it,
and we see that it's blending


380
00:16:37,116 --> 00:16:38,876
with stuff behind the window.


381
00:16:40,276 --> 00:16:42,176
Here's another screenshot
of the demo application


382
00:16:42,176 --> 00:16:44,516
and it's blending with
stuff inside the window.


383
00:16:45,846 --> 00:16:48,126
And now this is an
important difference to note


384
00:16:48,276 --> 00:16:49,976
because we have two
concepts here.


385
00:16:50,316 --> 00:16:51,826
We have "behind window"
blending,


386
00:16:52,286 --> 00:16:54,956
where whatever's behind the view
and behind the window is blended


387
00:16:54,956 --> 00:16:57,866
with what you see and we
have within window blending.


388
00:16:58,166 --> 00:16:59,726
So there are two
different modes for this.


389
00:17:00,436 --> 00:17:03,346
And so that's reflected in the
API for NSVisualEffectView.


390
00:17:03,776 --> 00:17:06,836
There's an enum and it's
NSVisualEffectBlendingMode


391
00:17:06,836 --> 00:17:09,836
and it has two options,
BlendingModeBehindWindow,


392
00:17:10,136 --> 00:17:14,826
and a BlendingModeWithinWindow,
and then property to set it.


393
00:17:15,636 --> 00:17:19,195
So, you can just set
it code or you can open


394
00:17:19,195 --> 00:17:23,136
up your application
inside of Interface Builder


395
00:17:23,246 --> 00:17:25,685
and you can go ahead and set
the blending mode directly here.


396
00:17:26,036 --> 00:17:28,215
It's really easy to do,
to get that behind window


397
00:17:28,215 --> 00:17:29,106
or in-window blending.


398
00:17:31,256 --> 00:17:32,856
So how does this work?


399
00:17:33,066 --> 00:17:36,396
How does the behind window
blending actually behave


400
00:17:36,396 --> 00:17:37,336
and what does it do?


401
00:17:37,726 --> 00:17:40,366
Well, our implementation
is in Core Graphics


402
00:17:40,366 --> 00:17:41,306
and the Windows Server.


403
00:17:41,546 --> 00:17:43,736
This means that as your
window is moving around,


404
00:17:44,056 --> 00:17:46,576
none of the content in your
window is actually redrawn,


405
00:17:47,026 --> 00:17:48,796
it's managed for
you automatically


406
00:17:48,796 --> 00:17:49,816
by our Window Server.


407
00:17:50,626 --> 00:17:54,056
What NSWindowEffectView does
is it kind of finds regions


408
00:17:54,056 --> 00:17:56,676
with the Window Server to tell
it, "Hey, this is the area


409
00:17:56,676 --> 00:17:58,776
that I want to be
vibrant or to be blurred,"


410
00:17:58,916 --> 00:18:00,316
and do it automatically.


411
00:18:01,016 --> 00:18:03,696
The visual effect view
also implements Vibrancy,


412
00:18:03,766 --> 00:18:09,316
and I'm going to discuss about
that in detail in a little bit.


413
00:18:09,576 --> 00:18:12,776
So, one thing to note about
this and the visual effect view


414
00:18:12,776 --> 00:18:13,956
with behind window blending,


415
00:18:14,456 --> 00:18:17,586
whatever is behind your view
inside your application is going


416
00:18:17,586 --> 00:18:19,626
to be poked out or knocked out.


417
00:18:20,186 --> 00:18:22,726
So if I have this view inside
my window and it's on top


418
00:18:22,726 --> 00:18:24,676
of an image view, a
picture of this elephant,


419
00:18:25,086 --> 00:18:26,906
it's going to poke out
whatever's behind it,


420
00:18:27,156 --> 00:18:29,686
and so it kind of
just knocks it out.


421
00:18:30,096 --> 00:18:32,286
So it's something to be
aware of in your application.


422
00:18:32,886 --> 00:18:37,726
So, how does within
window blending work?


423
00:18:38,156 --> 00:18:40,746
Within window blending
utilizes Core Animation


424
00:18:40,746 --> 00:18:41,556
to achieve this effect.


425
00:18:42,636 --> 00:18:46,066
NSVisualEffectView uses special
layers and special filters


426
00:18:46,066 --> 00:18:47,836
to do this work behind
the scenes.


427
00:18:48,606 --> 00:18:50,596
Core Animation is also used
to implement the Vibrancy,


428
00:18:50,596 --> 00:18:52,786
which I'll talk about
more in a little bit.


429
00:18:54,016 --> 00:18:56,096
Now, if it's used
in Core Animation


430
00:18:56,506 --> 00:18:58,616
and you set the property
to be within window,


431
00:18:59,386 --> 00:19:01,036
it requires layer backing.


432
00:19:01,456 --> 00:19:03,386
And so this is a
screenshot of what happens


433
00:19:03,386 --> 00:19:05,416
in Interface Builder if you
don't have it layer-backed.


434
00:19:05,946 --> 00:19:07,806
It'll show it has
red, to indicate, hey,


435
00:19:07,806 --> 00:19:08,806
you're doing something wrong


436
00:19:09,036 --> 00:19:10,456
and should probably
make it layer-backed.


437
00:19:11,256 --> 00:19:13,216
But you probably don't want


438
00:19:13,216 --> 00:19:15,346
to make just your visual
effect view the thing that's


439
00:19:15,346 --> 00:19:17,476
layer-backed, you
want to make the thing


440
00:19:17,476 --> 00:19:19,666
that contains it
be layer-backed.


441
00:19:20,136 --> 00:19:21,516
So in this case,
the content view


442
00:19:21,516 --> 00:19:22,546
of your window would
be the thing


443
00:19:22,546 --> 00:19:24,486
that you make layer-backed,
because it needs


444
00:19:24,486 --> 00:19:25,696
to blend those things together


445
00:19:25,696 --> 00:19:27,636
and they both need
Core Animation layers


446
00:19:27,816 --> 00:19:29,506
in order to achieve that.


447
00:19:31,616 --> 00:19:33,086
So, how can you set it?


448
00:19:33,616 --> 00:19:39,146
Well, you can also set this
easily inside of Xcode,


449
00:19:39,566 --> 00:19:41,226
if you don't do any code
for the wants layer,


450
00:19:41,226 --> 00:19:43,816
and you can just check that box
if you're not familiar with it,


451
00:19:43,816 --> 00:19:45,666
it's been around for a
while, Core Animation layer.


452
00:19:46,116 --> 00:19:50,026
Now let me talk about
some state.


453
00:19:50,546 --> 00:19:53,116
The visual effect view
has an active state,


454
00:19:53,246 --> 00:19:55,346
which we see here
blending with the window.


455
00:19:56,586 --> 00:19:59,986
And it also has a
non-key or inactive state,


456
00:20:00,186 --> 00:20:03,666
so it automatically removes
the blurring and just goes


457
00:20:03,666 --> 00:20:05,646
to being a solid color fill.


458
00:20:06,676 --> 00:20:08,746
This is also represented in API.


459
00:20:09,476 --> 00:20:12,786
So the visual effect view
has a property called state


460
00:20:13,226 --> 00:20:16,476
and it's an enum value,
NSVisualEffectState,


461
00:20:17,036 --> 00:20:20,916
and it has NSVisualEffectState
FollowsWindowActiveState,


462
00:20:20,916 --> 00:20:22,736
which is probably
what you want to do.


463
00:20:22,736 --> 00:20:25,206
And what this means is
when your window is key


464
00:20:25,206 --> 00:20:28,156
and your window is active that
visual effect view will be key


465
00:20:28,156 --> 00:20:31,086
and active, but you may want
to control it more explicitly.


466
00:20:31,466 --> 00:20:33,376
So you can explicitly
set the active state


467
00:20:34,056 --> 00:20:36,016
or explicitly set
the inactive state


468
00:20:36,776 --> 00:20:39,286
and actually have full power
and full control over this.


469
00:20:40,546 --> 00:20:42,726
Now the things about
that, as I said before,


470
00:20:42,726 --> 00:20:46,596
you want probably always use the
FollowsWindowsActiveState value


471
00:20:46,596 --> 00:20:49,096
because if your window
becomes key and non-key,


472
00:20:49,096 --> 00:20:50,656
it'll automatically
do the work for you


473
00:20:50,656 --> 00:20:51,876
and you don't have
to do anything.


474
00:20:52,076 --> 00:20:55,576
You want to use the active state
explicitly, very sparingly.


475
00:20:56,176 --> 00:20:57,746
It can affect performance
and battery life,


476
00:20:57,746 --> 00:20:59,406
because if you have a lot
of visual effect views


477
00:20:59,406 --> 00:21:02,876
around they're always active,
but you probably want to use it


478
00:21:02,876 --> 00:21:04,736
in places where you know
that view is always going


479
00:21:04,736 --> 00:21:06,706
to be active and
maybe it's a panel


480
00:21:06,706 --> 00:21:08,676
that can't become key
for whatever reason.


481
00:21:09,376 --> 00:21:11,856
Internally we use it in things
like popovers and sheets,


482
00:21:11,856 --> 00:21:14,106
which always want to have
that particular look.


483
00:21:16,296 --> 00:21:19,196
So, that was discussing
some of the basic properties


484
00:21:19,196 --> 00:21:22,946
of visual effect view, now
let me discuss how do set the


485
00:21:22,946 --> 00:21:25,546
material and how it
works with NSAppearance


486
00:21:25,836 --> 00:21:27,386
and visual effect view itself.


487
00:21:27,906 --> 00:21:32,346
As Chris mentioned, here are
two screenshots showing two


488
00:21:32,346 --> 00:21:33,226
different appearances.


489
00:21:33,666 --> 00:21:36,056
We have the
NSAppearanceNameVibrantLight


490
00:21:36,426 --> 00:21:39,206
to get this light
appearance and light controls.


491
00:21:39,206 --> 00:21:42,556
And we have
NSAppearanceNameVibrantDark


492
00:21:42,916 --> 00:21:45,146
to get the dark look
and dark appearance.


493
00:21:45,516 --> 00:21:47,686
And notice the controls
automatically look different


494
00:21:48,196 --> 00:21:50,766
and automatically are
changing the colors as needed.


495
00:21:51,336 --> 00:21:55,406
It's easy to do this,
you can just use


496
00:21:55,876 --> 00:21:58,586
visualEffectView.appearance
and set the appearance


497
00:21:58,636 --> 00:22:00,286
to either VibrantLight
or VibrantDark


498
00:22:00,546 --> 00:22:02,316
and do it in code, very simple.


499
00:22:03,096 --> 00:22:06,206
Or, as usual, you can go
into Interface Builder,


500
00:22:06,716 --> 00:22:08,026
select Visual Effect View,


501
00:22:08,636 --> 00:22:12,016
and when you select the Visual
Effect View the appearance


502
00:22:12,256 --> 00:22:13,986
property will now
have Vibrant Light


503
00:22:14,276 --> 00:22:15,706
and Vibrant Dark as options.


504
00:22:16,186 --> 00:22:17,816
Other views won't
have this option.


505
00:22:18,666 --> 00:22:24,016
So, the vibrant appearances
require and NSVisualEffectView.


506
00:22:24,016 --> 00:22:26,436
I'm going to say more
about this in a bit, why.


507
00:22:27,106 --> 00:22:32,266
That visual effect view can
be a direct ancestor or has


508
00:22:32,266 --> 00:22:35,096
to be a direct ancestor of
your child views in order


509
00:22:35,096 --> 00:22:37,056
to get the vibrant look
in the vibrant effect.


510
00:22:38,496 --> 00:22:40,216
However, whatever
materials shown


511
00:22:40,216 --> 00:22:42,986
by the visual effect
view may be different


512
00:22:43,496 --> 00:22:46,886
than what the appearance is
saying, and let me describe


513
00:22:46,886 --> 00:22:47,956
that a little bit differently.


514
00:22:48,636 --> 00:22:51,356
Visual effect view has a
property called material.


515
00:22:51,996 --> 00:22:57,076
The NSVisualEffectMaterial
has several enum values.


516
00:22:57,686 --> 00:23:00,566
The first one is what you
will probably use the majority


517
00:23:00,566 --> 00:23:03,056
of the time, and it's
NSVisualEffectMaterial


518
00:23:03,146 --> 00:23:04,336
AppearanceBased.


519
00:23:04,886 --> 00:23:06,406
So let me show you
how that one works.


520
00:23:06,996 --> 00:23:11,426
If you have a visual
effect view and it's set


521
00:23:11,476 --> 00:23:14,056
to NSVisualEffectMaterial
AppearanceBased,


522
00:23:14,886 --> 00:23:16,406
the actual materials shown


523
00:23:16,406 --> 00:23:19,226
by the visual effect view
is automatically determined


524
00:23:19,726 --> 00:23:20,746
by the appearance.


525
00:23:21,126 --> 00:23:22,676
So if you set the
VibrantLight appearance,


526
00:23:23,496 --> 00:23:26,396
the MaterialLight will appear
for that visual effect view.


527
00:23:26,396 --> 00:23:28,596
If you set the VibrantDark
appearance,


528
00:23:29,126 --> 00:23:31,806
the MaterialDark will appear
for the visual effect view.


529
00:23:32,786 --> 00:23:34,616
Now you can explicitly
set the material


530
00:23:34,616 --> 00:23:35,836
and not set the appearance,


531
00:23:35,836 --> 00:23:37,416
which is why it's
an enum option.


532
00:23:37,916 --> 00:23:42,466
So the last option here is
NSVisualEffectMaterialTitlebar.


533
00:23:43,166 --> 00:23:45,556
And so what this
material is for is for you


534
00:23:45,556 --> 00:23:48,176
to create your own
title bar like views.


535
00:23:48,416 --> 00:23:50,616
So you may have a need
in your application


536
00:23:50,916 --> 00:23:53,446
to replicate the title bar
that we do inside the AppKit,


537
00:23:53,476 --> 00:23:56,826
and we just use this and this
NSVisualEffectMaterialTitle Bar


538
00:23:56,856 --> 00:23:58,606
internally, and so
you can also use it


539
00:23:58,606 --> 00:24:01,066
to create your own title
bars if you need to.


540
00:24:01,356 --> 00:24:04,206
All right, so that was
discussing visual effect view,


541
00:24:04,546 --> 00:24:06,736
appearance, and some
of the materials.


542
00:24:06,886 --> 00:24:10,066
So now I'm going to talk about
Vibrancy and custom controls.


543
00:24:11,416 --> 00:24:13,676
First of all, well,
what is Vibrancy?


544
00:24:14,256 --> 00:24:16,796
And Vibrancy is just
basically a special blend mode


545
00:24:16,796 --> 00:24:18,626
where we're taking
two difference pixels,


546
00:24:18,626 --> 00:24:21,146
combining them together, and
getting a different result


547
00:24:21,146 --> 00:24:23,666
that looks more vibrant when
they're combined together.


548
00:24:24,656 --> 00:24:27,566
Vibrancy is just an abstract
term that we coined in AppKit,


549
00:24:27,966 --> 00:24:29,416
and that way you
don't have to worry


550
00:24:29,416 --> 00:24:30,756
about the actual implementation.


551
00:24:31,286 --> 00:24:32,756
The actual implementation
and blending


552
00:24:32,756 --> 00:24:34,756
that we do could
be a Linear Burn,


553
00:24:34,916 --> 00:24:36,096
a Color Dodge, PlusD, PlusL.


554
00:24:36,096 --> 00:24:39,396
It doesn't matter, we're
abstracting it for you.


555
00:24:40,126 --> 00:24:41,926
But if you don't know
what those terms mean,


556
00:24:42,426 --> 00:24:43,576
let me give an example.


557
00:24:44,346 --> 00:24:48,346
So here's just a simple
image of some flowers.


558
00:24:48,346 --> 00:24:51,246
And if I drop a little
square onto it,


559
00:24:51,606 --> 00:24:54,766
it's just a solid gray
square with a darker border.


560
00:24:55,186 --> 00:24:56,636
If I set it to be color burned,


561
00:24:57,006 --> 00:24:58,786
as you can see it
looks more vibrant.


562
00:24:59,506 --> 00:25:01,856
So effectively this is what
we're doing to our controls,


563
00:25:01,856 --> 00:25:04,696
and this is just a very simple
example of what color burn is


564
00:25:04,936 --> 00:25:06,436
and what we mean by Vibrancy.


565
00:25:07,026 --> 00:25:11,466
So how does this work
with NSVisualEffectView,


566
00:25:12,156 --> 00:25:14,116
and how does the
text become vibrant?


567
00:25:15,066 --> 00:25:17,926
Let's take a look at
what you have to do.


568
00:25:18,436 --> 00:25:20,516
First of all, in order to
get any sort of Vibrancy,


569
00:25:20,516 --> 00:25:22,506
you have to use the
vibrant appearance.


570
00:25:22,506 --> 00:25:24,216
So you have to set
the VibrantLight


571
00:25:24,416 --> 00:25:27,776
or VibrantDark appearance, and
then Vibrancy is automatically


572
00:25:27,776 --> 00:25:28,886
and abstractly applied.


573
00:25:29,306 --> 00:25:36,016
So for this little piece of text
here in order to get this text


574
00:25:36,016 --> 00:25:38,736
to look vibrant, and it
might be difficult to see,


575
00:25:38,736 --> 00:25:41,716
but it is actually blending with
the contents behind the window,


576
00:25:42,486 --> 00:25:45,566
you just use NSColor labelColor,
and it looks more vibrant.


577
00:25:47,216 --> 00:25:50,746
You may also have a need for
a secondary vibrant look,


578
00:25:50,746 --> 00:25:52,656
and this one's just
slightly lighter


579
00:25:52,896 --> 00:25:54,226
and it looks a little
bit different.


580
00:25:55,336 --> 00:25:58,526
And again, we have a new color,
NSColor secondaryLabelColor


581
00:25:58,866 --> 00:26:03,946
to achieve this Vibrancy
in this text field.


582
00:26:04,116 --> 00:26:07,406
Now, let me remind you
about some template images.


583
00:26:07,526 --> 00:26:08,466
You may or may not be aware


584
00:26:08,466 --> 00:26:12,996
that NSImage has had a
template property since 10.5


585
00:26:13,386 --> 00:26:16,856
and it's really simple, you can
create your image as a black


586
00:26:16,856 --> 00:26:19,606
and white image and
do Set Template Yes.


587
00:26:19,826 --> 00:26:21,396
We'll have a specific
naming convention


588
00:26:21,396 --> 00:26:23,626
to make it a template, and
that gives you a template image


589
00:26:23,926 --> 00:26:26,416
where we can apply effects on
top of it instead of AppKit.


590
00:26:26,926 --> 00:26:29,686
So if you're using
a template image,


591
00:26:30,326 --> 00:26:33,006
NSImageView will
automatically apply Vibrancy.


592
00:26:34,316 --> 00:26:37,386
So here's an example
of a regular image,


593
00:26:37,636 --> 00:26:38,646
not a template image,


594
00:26:39,036 --> 00:26:41,266
and it automatically
does not have Vibrancy.


595
00:26:42,506 --> 00:26:45,986
However, this image below
automatically has Vibrancy


596
00:26:46,056 --> 00:26:47,666
because it's using
a template image.


597
00:26:48,306 --> 00:26:51,146
So if you and your application
use template images you can


598
00:26:51,206 --> 00:26:52,436
automatically get Vibrancy.


599
00:26:53,006 --> 00:26:55,756
So that begs the question,
well, how does something


600
00:26:55,756 --> 00:26:57,776
like ImageView say, "Hey,


601
00:26:57,776 --> 00:26:59,616
I want to be vibrant
or not be vibrant?"


602
00:26:59,616 --> 00:27:01,746
And how does it dynamically
choose its answer?


603
00:27:02,106 --> 00:27:06,546
And the answer is we have a
new API in NSView to do this,


604
00:27:06,966 --> 00:27:09,486
and this is basically
the implementation inside


605
00:27:09,556 --> 00:27:10,586
of NSImageView.


606
00:27:10,656 --> 00:27:13,306
It says allowsVibrancy
is the new API.


607
00:27:14,006 --> 00:27:17,786
And the answer to allowsVibrancy
is self.image.isTemplate,


608
00:27:18,076 --> 00:27:20,536
which is saying, "Hey, if I'm
a template I can be vibrant,


609
00:27:20,616 --> 00:27:22,616
if I'm not a template,
I can't be vibrant."


610
00:27:23,106 --> 00:27:23,666
Very simple.


611
00:27:23,666 --> 00:27:29,086
So you may be wondering
then, well, how do I signal


612
00:27:29,086 --> 00:27:30,686
to the system that
that's changed?


613
00:27:30,686 --> 00:27:33,716
What if my answer is changing
based on something that I said,


614
00:27:33,716 --> 00:27:35,126
like change the image
or whatnot?


615
00:27:35,766 --> 00:27:39,326
And just like normal AppKit
things, if you change the state


616
00:27:39,326 --> 00:27:40,906
of Vibrancy or need the question


617
00:27:40,906 --> 00:27:42,836
to be intAskedYouAgain
[phonetic],


618
00:27:43,136 --> 00:27:46,146
just call setNeedsDisplay and
we'll automatically call back


619
00:27:46,286 --> 00:27:48,696
and update the Vibrancy
effect for your view.


620
00:27:51,436 --> 00:27:54,706
Now, NSTextField
also is vibrant.


621
00:27:55,296 --> 00:27:58,576
NSTextField behaves very
similar to NSImageView


622
00:27:58,576 --> 00:28:01,186
and it answers Yes
to allowsVibrancy


623
00:28:01,596 --> 00:28:03,686
if you're using our
particular vibrant colors.


624
00:28:04,076 --> 00:28:05,966
So, if you're inside
of a vibrant appearance


625
00:28:05,966 --> 00:28:08,696
and you're using labelColor,
secondaryLabelColor,


626
00:28:09,236 --> 00:28:12,086
or any other colors which might
be custom for that appearance,


627
00:28:12,506 --> 00:28:14,266
they will probably
appear vibrant.


628
00:28:14,976 --> 00:28:17,066
If you don't want the
text to appear vibrant,


629
00:28:17,316 --> 00:28:21,606
you need to explicitly opt out
by setting the controlTextColor


630
00:28:21,856 --> 00:28:23,486
or some other color
that's not there.


631
00:28:24,086 --> 00:28:28,766
NSAppearance also has a method
called allowsVibrancy on it.


632
00:28:29,156 --> 00:28:31,526
This is so you and
your API can know


633
00:28:31,526 --> 00:28:34,356
if a particular appearance
needs Vibrancy or not.


634
00:28:34,356 --> 00:28:37,006
I'm going to discuss more
about this in detail later.


635
00:28:37,946 --> 00:28:41,326
But what this gives us
is it gives us a recipe


636
00:28:42,146 --> 00:28:43,386
to let you know


637
00:28:43,386 --> 00:28:45,366
when a particular view
is going to be vibrant.


638
00:28:46,276 --> 00:28:47,636
Any view will be vibrant


639
00:28:47,926 --> 00:28:49,856
if all these conditions
up here are true.


640
00:28:50,396 --> 00:28:53,366
The appearance has to say
Yes from allowsVibrancy,


641
00:28:54,016 --> 00:28:56,266
which means currently,
that is the VibrantLight


642
00:28:56,266 --> 00:28:57,356
or VibrantDark appearance.


643
00:28:58,796 --> 00:29:01,716
Your view subclass has to
override allowsVibrancy


644
00:29:01,896 --> 00:29:05,146
and say Yes, have you expressing
that it can be vibrant.


645
00:29:05,216 --> 00:29:09,176
And that view has to be
inside of a VisualEffectView.


646
00:29:09,666 --> 00:29:12,246
The VisualEffectView
is sort of the glue


647
00:29:12,246 --> 00:29:13,526
that binds it all together.


648
00:29:14,056 --> 00:29:16,096
If it's not contained inside
of a VisualEffectView,


649
00:29:16,216 --> 00:29:17,286
Vibrancy will not work.


650
00:29:17,786 --> 00:29:20,156
So when all these conditions
are met your control will


651
00:29:20,156 --> 00:29:20,826
become vibrant.


652
00:29:20,826 --> 00:29:25,316
So let's talk about custom
controls and Vibrancy


653
00:29:25,316 --> 00:29:27,886
and what you can do in your
control to make them vibrant.


654
00:29:28,676 --> 00:29:34,676
So here we have a custom view,
it's just drawing a gray oval


655
00:29:34,676 --> 00:29:36,336
and then another gray
oval inside of it.


656
00:29:36,416 --> 00:29:38,066
And this one's appearing
vibrant,


657
00:29:38,446 --> 00:29:40,466
you can see how it's
a deeper orange color,


658
00:29:40,856 --> 00:29:43,176
the gray is being blended
with what's behind the window


659
00:29:43,176 --> 00:29:44,316
to produce this vibrant effect.


660
00:29:45,036 --> 00:29:48,656
And when it's not in
the VisualEffectView


661
00:29:48,986 --> 00:29:51,586
that same exact view is
drawing non-vibrantly,


662
00:29:51,726 --> 00:29:54,366
it's drawing its normal
gray colors with no work


663
00:29:54,366 --> 00:29:55,266
from you the developer.


664
00:29:56,546 --> 00:29:59,086
In addition, another thing
to point out in this view,


665
00:29:59,756 --> 00:30:03,726
this bottom view here, it is
inside of a VisualEffectView


666
00:30:04,006 --> 00:30:05,736
yet it's not appearing vibrant.


667
00:30:05,796 --> 00:30:07,416
I'm going to discuss
how to achieve


668
00:30:07,416 --> 00:30:09,166
that effect, too,
in a short bit.


669
00:30:09,886 --> 00:30:12,276
How do you actually go
ahead and implement this?


670
00:30:12,326 --> 00:30:14,996
Well, first of all, in
your custom view subclass,


671
00:30:15,346 --> 00:30:18,086
as I mentioned before, you'll
override allowsVibrancy


672
00:30:18,276 --> 00:30:19,266
and you'll prior return Yes.


673
00:30:20,076 --> 00:30:21,466
That way, when you're
in a vibrant appearance,


674
00:30:21,466 --> 00:30:23,096
you automatically
will appear vibrant.


675
00:30:24,186 --> 00:30:26,486
And then inside of your drawRect
you'll probably just do whatever


676
00:30:26,516 --> 00:30:31,406
you're doing today, you set your
particular colors, fill a path,


677
00:30:31,936 --> 00:30:33,576
or do whatever type
of drawing you want


678
00:30:33,976 --> 00:30:35,436
and you'll automatically
become vibrant.


679
00:30:35,936 --> 00:30:38,326
Here I'm just drawing
with some regular colors,


680
00:30:38,326 --> 00:30:41,776
I have a variation of black
with a different Alpha value,


681
00:30:42,326 --> 00:30:44,286
and this view automatically
becomes vibrant.


682
00:30:44,846 --> 00:30:49,906
Now, because that view
says Yes to allowsVibrancy,


683
00:30:50,436 --> 00:30:53,176
anything drawn inside of
that view will automatically


684
00:30:53,176 --> 00:30:53,866
become vibrant.


685
00:30:54,516 --> 00:30:57,726
Even if you drew images,
any text, any color,


686
00:30:57,796 --> 00:30:59,326
everything inside of
it will be vibrant.


687
00:30:59,856 --> 00:31:02,756
You don't have to use labelColor
or secondarylabelColor


688
00:31:03,006 --> 00:31:07,036
to get Vibrancy in that view.


689
00:31:07,236 --> 00:31:11,316
However, what you can do is you
can utilize named system colors


690
00:31:11,316 --> 00:31:12,886
to have your application


691
00:31:12,886 --> 00:31:16,086
and your custom view be more
dynamic depending on what kind


692
00:31:16,086 --> 00:31:17,546
of appearance it's in, if it's


693
00:31:17,546 --> 00:31:19,186
in a light appearance
or dark appearance.


694
00:31:20,016 --> 00:31:20,876
So, for instance, something


695
00:31:20,876 --> 00:31:24,886
like NSColor controlTextColor
now is dark when it's


696
00:31:24,886 --> 00:31:28,176
on a light appearance and light
when it's on a dark appearance.


697
00:31:28,606 --> 00:31:32,146
Something to be aware of, if
you're taking these colors


698
00:31:32,146 --> 00:31:34,856
and storing them in your
app, store the name color,


699
00:31:35,216 --> 00:31:38,516
don't convert that color to
a CGColor or don't convert it


700
00:31:38,516 --> 00:31:41,116
to a colorspace, don't
extract the RGB elements


701
00:31:41,116 --> 00:31:44,056
and save them off, because
if you do that you'll lose


702
00:31:44,056 --> 00:31:45,606
that dynamic nature
of the color.


703
00:31:45,956 --> 00:31:47,616
Instead just save
the color itself,


704
00:31:47,616 --> 00:31:49,166
like the NSColor
controlTextColor


705
00:31:49,486 --> 00:31:51,626
and utilize it again and again.


706
00:31:52,056 --> 00:31:54,116
Now again, if you
change your appearance


707
00:31:54,116 --> 00:31:57,086
on your particular view it'll
automatically invalidate the


708
00:31:57,086 --> 00:32:00,056
subviews so you're holding
onto that color, you don't have


709
00:32:00,056 --> 00:32:01,486
to worry about invalidating
things.


710
00:32:01,486 --> 00:32:02,626
It's done automatically.


711
00:32:02,966 --> 00:32:08,056
So let's take a look at some
code that uses a system color,


712
00:32:08,056 --> 00:32:09,646
because you may not
be familiar with it.


713
00:32:10,026 --> 00:32:13,036
We have ColorList, and
so you can easily grab


714
00:32:13,386 --> 00:32:14,696
a colorListNamed:@"System".


715
00:32:15,316 --> 00:32:17,746
And what this sample
code is doing, and again,


716
00:32:17,746 --> 00:32:19,876
this is provided in that
demo application I mentioned


717
00:32:19,876 --> 00:32:22,266
at the start, it's
going to go ahead


718
00:32:22,266 --> 00:32:23,306
and set up some attributes.


719
00:32:23,306 --> 00:32:25,716
It's going to enumerate through
all the colors in the ColorList,


720
00:32:26,226 --> 00:32:28,716
grab a particular color
out based on its key,


721
00:32:28,716 --> 00:32:31,426
the key is the name of
the color, do a set of it,


722
00:32:31,426 --> 00:32:35,556
and just do a RectFill to fill
that color, one after another.


723
00:32:36,856 --> 00:32:38,296
So if we look at a view


724
00:32:38,296 --> 00:32:40,416
where all it's doing is
drawing those colors,


725
00:32:40,606 --> 00:32:44,436
and this looks very busy,
so let me explain it.


726
00:32:45,216 --> 00:32:46,126
This is what we would get.


727
00:32:46,266 --> 00:32:47,896
This is what that
demo application does.


728
00:32:48,986 --> 00:32:51,616
So in the first column, this
is just drawing the name


729
00:32:52,036 --> 00:32:53,016
of the particular color.


730
00:32:53,546 --> 00:32:57,446
Next column is drawing
the same color, same view,


731
00:32:57,686 --> 00:32:58,876
in the Aqua Appearance.


732
00:33:00,136 --> 00:33:02,306
Same color, same view in the
Vibrant Light Appearance.


733
00:33:03,466 --> 00:33:05,776
Same color and same view in
the Vibrant Dark Appearance.


734
00:33:06,946 --> 00:33:09,366
And if we zoom in so you
can see one particular row,


735
00:33:09,686 --> 00:33:13,196
this is the controlTextColor,
and as you can see, the Aqua,


736
00:33:13,196 --> 00:33:14,616
Vibrant Light, and Vibrant Dark,


737
00:33:14,856 --> 00:33:17,206
the colors are all
slightly different depending


738
00:33:17,206 --> 00:33:19,906
on what we decide in
AppKit to make it look


739
00:33:19,906 --> 00:33:20,976
for a particular appearance.


740
00:33:20,976 --> 00:33:22,836
The point here is
they are different,


741
00:33:22,946 --> 00:33:23,926
depending on your appearance.


742
00:33:25,236 --> 00:33:27,596
So if we take a look at
that CustomView again


743
00:33:27,936 --> 00:33:31,726
that was drawing the circles,
if we use NSColor labelColor,


744
00:33:31,726 --> 00:33:35,436
NSColor secondaryLabelColor,
that view would look good


745
00:33:35,436 --> 00:33:38,456
if it's in a light
appearance or a dark appearance


746
00:33:38,566 --> 00:33:40,086
without you having
to do anything.


747
00:33:40,756 --> 00:33:42,436
Now one of the things
to note in this view,


748
00:33:42,746 --> 00:33:44,546
at the bottom there is one


749
00:33:44,546 --> 00:33:47,156
of these CustomViews that's
not drawing vibrantly.


750
00:33:47,506 --> 00:33:50,306
So how did it opt-out of
Vibrancy and what did it do?


751
00:33:51,166 --> 00:33:52,196
It's very simple.


752
00:33:52,696 --> 00:33:55,166
All that view is doing, and
this is just done inside


753
00:33:55,166 --> 00:33:56,896
of Interface Builder,
you can do it in code,


754
00:33:57,336 --> 00:33:59,236
is I have it selected
and I go ahead


755
00:33:59,236 --> 00:34:01,026
and set the appearance
back to aqua,


756
00:34:01,596 --> 00:34:03,306
and so it no longer
meets the criteria


757
00:34:03,666 --> 00:34:06,386
of being a vibrant control
and it won't draw vibrantly.


758
00:34:07,006 --> 00:34:11,706
So the things to note is


759
00:34:11,706 --> 00:34:13,335
that you can opt-out
your particular controls


760
00:34:13,335 --> 00:34:16,096
from Vibrancy, one at a
time, or you can do it


761
00:34:16,096 --> 00:34:17,235
on a whole view hierarchy.


762
00:34:17,235 --> 00:34:19,826
So you could have a hierarchy
controls, opt in or out


763
00:34:19,826 --> 00:34:23,746
by setting a container to be one
particular appearance or not.


764
00:34:24,246 --> 00:34:27,235
You can opt it in or out
depending on what you need.


765
00:34:27,956 --> 00:34:32,956
One think to note is your view
that's apparent can't have


766
00:34:32,956 --> 00:34:34,676
already said Yes
to allowsVibrancy,


767
00:34:35,096 --> 00:34:36,576
because there are
caveats with that,


768
00:34:36,786 --> 00:34:38,576
which I will discuss
in a little bit.


769
00:34:39,126 --> 00:34:43,576
Let's discuss how you would
actually achieve something


770
00:34:43,576 --> 00:34:46,076
like this where the same view -


771
00:34:46,126 --> 00:34:49,565
where it's in a VisualEffectView
it draws one way and when it's


772
00:34:49,565 --> 00:34:51,866
in a the regular Aqua appearance
it's drawing another way.


773
00:34:51,946 --> 00:34:53,376
And in this case, when it's


774
00:34:53,376 --> 00:34:56,346
in the Aqua appearance I'm
drawing red and purple just


775
00:34:56,346 --> 00:34:57,826
to be dramatically different.


776
00:34:58,696 --> 00:34:59,956
So why would you
want to do this?


777
00:35:00,456 --> 00:35:02,326
Well, in your application
you might want


778
00:35:02,326 --> 00:35:05,426
to provide different artwork
for when you're inside


779
00:35:05,426 --> 00:35:09,516
of a vibrant appearance
than when you're not inside


780
00:35:09,516 --> 00:35:11,346
of a vibrant appearance,
and when you're inside


781
00:35:11,346 --> 00:35:12,986
of a regular Aqua appearance.


782
00:35:13,996 --> 00:35:15,876
Or you could use
different colors


783
00:35:15,916 --> 00:35:17,946
or something along that line.


784
00:35:18,346 --> 00:35:20,956
In this particular case, I'm
just using different colors.


785
00:35:21,296 --> 00:35:23,216
And it's really easy to use.


786
00:35:23,926 --> 00:35:25,106
As I mentioned before,


787
00:35:25,386 --> 00:35:28,946
NSAppearance has an
allowsVibrancy property,


788
00:35:29,126 --> 00:35:31,436
and it's Yes when it's
in a vibrant appearance.


789
00:35:32,006 --> 00:35:33,486
And so your code
can key off that.


790
00:35:34,406 --> 00:35:37,296
NSView has a method
called effectiveAppearance


791
00:35:37,516 --> 00:35:40,426
where it finds out what
the appearance set on it


792
00:35:40,876 --> 00:35:44,036
or somewhere up the chain
and you can query that


793
00:35:44,036 --> 00:35:45,606
and see if it allowsVibrancy.


794
00:35:45,606 --> 00:35:48,096
And if it does you can
set one particular color,


795
00:35:48,376 --> 00:35:49,856
if it doesn't you can
set another color.


796
00:35:50,186 --> 00:35:52,696
So here it's just saying
redColor when it's not


797
00:35:52,856 --> 00:35:54,006
in a vibrant appearance.


798
00:35:55,126 --> 00:35:58,346
So let me discuss some caveats
with Vibrancy and blending.


799
00:35:58,706 --> 00:36:01,576
This is the within
window blending mode


800
00:36:01,576 --> 00:36:02,676
and some caveats with it.


801
00:36:03,626 --> 00:36:06,726
So let's say that we have
this super view here,


802
00:36:07,006 --> 00:36:10,706
the one with the gray or
darker square around it,


803
00:36:11,306 --> 00:36:12,416
and it has some subviews.


804
00:36:12,996 --> 00:36:16,906
Now if that super view says Yes
to allowsVibrancy, what's going


805
00:36:16,906 --> 00:36:20,906
to happen is all the subviews
are going to always be vibrant,


806
00:36:21,216 --> 00:36:22,886
and so it's a little
difficult to see here,


807
00:36:23,416 --> 00:36:28,276
but now that subview, that
image view is doing a different


808
00:36:28,276 --> 00:36:30,406
blending and it looks a
little bit murky and muddy


809
00:36:30,546 --> 00:36:32,516
because it's doing
a vibrant blending.


810
00:36:32,726 --> 00:36:36,296
And that's not desired.


811
00:36:36,406 --> 00:36:38,996
So, the thing to
be aware of here is


812
00:36:38,996 --> 00:36:41,796
if your custom view is returning
Yes from allowsVibrancy,


813
00:36:41,796 --> 00:36:43,976
all your subviews are
going to be vibrant.


814
00:36:44,716 --> 00:36:46,656
So if you're designing
applications,


815
00:36:46,956 --> 00:36:49,546
you need to keep this in mind
and design all your subviews


816
00:36:49,546 --> 00:36:53,306
to be vibrant or to be aware


817
00:36:53,306 --> 00:36:54,276
that they're going
to be vibrant.


818
00:36:54,856 --> 00:36:58,926
Or design it so that your
parent view is not saying Yes


819
00:36:58,926 --> 00:37:02,996
to allowsVibrancy, overlapping
with the siblings - or children.


820
00:37:03,516 --> 00:37:07,486
There are also some
other caveats


821
00:37:07,486 --> 00:37:10,646
with behind window blending
that has that same once vibrant,


822
00:37:10,646 --> 00:37:11,486
always vibrant effect,


823
00:37:12,276 --> 00:37:14,856
but there's an additional
problem here


824
00:37:14,856 --> 00:37:15,826
that I'm going to highlight.


825
00:37:17,226 --> 00:37:21,166
And what is happening here
is I have this blue box,


826
00:37:21,536 --> 00:37:24,016
which is saying, no I
don't want vibrancy.


827
00:37:24,746 --> 00:37:26,716
However, there's a text
field alongside of it


828
00:37:27,126 --> 00:37:30,596
which is using labelColor,
which as you know from before,


829
00:37:30,596 --> 00:37:32,506
is saying Yes to allowsVibrancy.


830
00:37:32,506 --> 00:37:34,886
So the text wants to be vibrant,


831
00:37:35,376 --> 00:37:37,806
but the thing drawn behind
it wants to not be vibrant.


832
00:37:38,356 --> 00:37:39,986
However, those areas
are overlapping,


833
00:37:39,986 --> 00:37:42,386
and we just described
this to the Window Server


834
00:37:42,676 --> 00:37:45,026
and so what's going to happen
is anything in that square


835
00:37:45,026 --> 00:37:46,676
of the text is going
to be vibrant,


836
00:37:47,066 --> 00:37:49,466
including what was drawn
behind it, that blue area.


837
00:37:49,466 --> 00:37:52,346
And so it gets also
vibrancy applied to it.


838
00:37:53,166 --> 00:37:54,416
So this is another caveat


839
00:37:54,416 --> 00:37:57,196
which you should be
aware of and not do.


840
00:37:57,406 --> 00:38:00,046
Instead, you probably want to
opt your text to not be vibrant


841
00:38:00,766 --> 00:38:02,606
or have that blue
control to be vibrant


842
00:38:02,606 --> 00:38:03,586
so that everything is vibrant.


843
00:38:04,306 --> 00:38:08,576
Another thing that we have is
visual effect view can have a


844
00:38:08,576 --> 00:38:10,056
maskImage property.


845
00:38:10,856 --> 00:38:13,356
The mask image allows
you to mask it.


846
00:38:14,026 --> 00:38:15,586
So right here are two
visual effect views,


847
00:38:15,586 --> 00:38:17,456
one using the light
appearance or light material,


848
00:38:17,456 --> 00:38:18,816
and another using
the dark material.


849
00:38:18,816 --> 00:38:21,256
And if I set a mask
image on each of them,


850
00:38:22,156 --> 00:38:25,216
just the area blending behind
it, to behind the window,


851
00:38:25,766 --> 00:38:27,416
is only inside of
that masked area.


852
00:38:28,026 --> 00:38:30,466
So you just see that for
the actual house icon,


853
00:38:30,546 --> 00:38:32,996
or the gear icon,
and what was drawn


854
00:38:32,996 --> 00:38:35,216
in the window you can
now see the poppy flower.


855
00:38:35,576 --> 00:38:37,436
And again, the demo
application shows this.


856
00:38:38,036 --> 00:38:41,316
You can easily set a maskImage,


857
00:38:41,516 --> 00:38:44,056
or you can use NSImage
imageWithSize


858
00:38:44,536 --> 00:38:47,046
and do the block handler
to create it on the fly.


859
00:38:47,596 --> 00:38:50,626
And so here's setting
it to be a BezierPath,


860
00:38:50,766 --> 00:38:51,786
that's just a RoundRect.


861
00:38:52,436 --> 00:38:53,656
And when you do something
like this,


862
00:38:54,846 --> 00:38:57,176
it's how you would achieve
this shown in the demo app,


863
00:38:57,266 --> 00:38:58,186
where it's a RoundRect


864
00:38:58,186 --> 00:39:01,056
for my entire window using
the maskImage property.


865
00:39:01,696 --> 00:39:04,976
Some notes about maskImage.


866
00:39:05,356 --> 00:39:08,166
Chris highlighted some of
the new features that we use


867
00:39:08,166 --> 00:39:11,206
with NSImage, so you
know, set those capInsets


868
00:39:11,206 --> 00:39:12,996
so we can properly
stretch the mask image


869
00:39:13,676 --> 00:39:15,286
and everything will work fine.


870
00:39:16,776 --> 00:39:20,166
Okay, so that was discussing
VisualEffectView, mask image,


871
00:39:20,646 --> 00:39:23,056
appearance, and how
to get Vibrancy.


872
00:39:23,356 --> 00:39:26,326
Let me talk about some of our
Standard controls in AppKit


873
00:39:26,326 --> 00:39:28,926
and how they do Vibrancy,
and things to be aware of.


874
00:39:30,006 --> 00:39:33,936
First of all, table view and
outline view, and a table view


875
00:39:33,936 --> 00:39:35,176
and an outline view configured


876
00:39:35,176 --> 00:39:38,416
as a source list is
automatically opting


877
00:39:38,416 --> 00:39:39,896
into a vibrant appearance now.


878
00:39:40,416 --> 00:39:42,666
So you see that in
something like the sidebar


879
00:39:42,866 --> 00:39:45,556
in Mail, Calendar, et cetera.


880
00:39:46,186 --> 00:39:49,886
So how does this work,
and how does this work


881
00:39:49,886 --> 00:39:51,086
with your applications already?


882
00:39:51,086 --> 00:39:53,906
If you're using the
selectionHighlightStyle


883
00:39:54,226 --> 00:39:56,936
of NSTableViewSelection
HighlightStyleSourceList,


884
00:39:57,426 --> 00:39:59,236
that tells the table, or
our only view of that,


885
00:39:59,586 --> 00:40:01,136
it wants to be a source list.


886
00:40:01,686 --> 00:40:04,186
And as soon as you set
that, either in code


887
00:40:04,186 --> 00:40:07,336
or in Interface Builder, it
has always had side effects,


888
00:40:07,446 --> 00:40:09,386
and these are documented
in the release notes.


889
00:40:09,456 --> 00:40:10,946
I'm going to reiterate
them here.


890
00:40:12,066 --> 00:40:14,486
OutlineView's indentation
is automatically affected


891
00:40:14,486 --> 00:40:16,396
and controlled to
meet specific metrics.


892
00:40:16,656 --> 00:40:20,596
New to 10.10 we start tweaking
the intercell spacing just


893
00:40:20,596 --> 00:40:22,086
slightly to make it
meet new metrics.


894
00:40:23,506 --> 00:40:25,856
If you're using a TableCellView,
its position of the imageView


895
00:40:25,856 --> 00:40:27,476
and textView are
automatically controlled


896
00:40:27,476 --> 00:40:28,476
to whatever it needs to be.


897
00:40:29,146 --> 00:40:32,036
And we apply attributes to the
texts to make it appear correct.


898
00:40:32,376 --> 00:40:34,326
So if your application was
using a source list highlighting


899
00:40:34,326 --> 00:40:36,996
before, and doesn't make
any significant changes,


900
00:40:36,996 --> 00:40:38,996
it will automatically
get the new 10.10 look


901
00:40:39,036 --> 00:40:40,536
for SourceList in the side bar.


902
00:40:41,686 --> 00:40:43,996
The last little bit here
is the backgroundColor


903
00:40:44,216 --> 00:40:47,456
for the actual source list
for table is set to a magical,


904
00:40:47,456 --> 00:40:52,576
internal color, and it's
important to be aware of this.


905
00:40:52,796 --> 00:40:56,446
Because it has this magical
color, what's happening inside


906
00:40:56,446 --> 00:40:58,706
of AppKit when we
see that you're using


907
00:40:58,706 --> 00:41:01,456
that special background
color, we're going to go ahead


908
00:41:01,966 --> 00:41:04,546
and put a VisualEffectView
behind your TableView


909
00:41:04,926 --> 00:41:07,056
and do the blurring
automatically for you.


910
00:41:07,316 --> 00:41:08,726
So you don't have
to do anything.


911
00:41:09,326 --> 00:41:10,756
If you don't want that behavior,


912
00:41:11,406 --> 00:41:13,526
after you set the
selectionHighlightStyle


913
00:41:13,526 --> 00:41:16,016
to SourceList, you can
change the backgroundColor


914
00:41:16,016 --> 00:41:16,796
to anything else.


915
00:41:16,906 --> 00:41:18,876
You can change it back
to clear or to nothing,


916
00:41:18,876 --> 00:41:21,026
and it will not do
the operation.


917
00:41:21,026 --> 00:41:23,086
And this is the way
it's always worked,


918
00:41:23,086 --> 00:41:25,936
and so we respect old
behavior of opting out of


919
00:41:25,936 --> 00:41:27,776
that backgroundColor
or the background blur.


920
00:41:27,996 --> 00:41:30,346
So you could do it manually
in some other super view


921
00:41:30,526 --> 00:41:31,826
if you need to for some reason.


922
00:41:34,036 --> 00:41:37,776
Another note, or thing to be
aware of, is now automatically


923
00:41:37,776 --> 00:41:41,536
in 10.10, the sidebar
SourceList for TableViews,


924
00:41:41,826 --> 00:41:43,326
automatically get
their appearance set


925
00:41:43,496 --> 00:41:45,386
to the VibrantLight
appearance for you,


926
00:41:45,506 --> 00:41:47,346
and you don't have to do that.


927
00:41:49,596 --> 00:41:51,156
Another control inside
of AppKit,


928
00:41:51,726 --> 00:41:56,446
NSPopover is now utilizing
the Light and Dark materials


929
00:41:56,446 --> 00:41:59,246
as necessary, and it will
have its appearance set


930
00:41:59,246 --> 00:42:01,516
to Vibrant Light or
Vibrant Dark, as necessary,


931
00:42:01,516 --> 00:42:03,966
and you don't have to
do anything for that.


932
00:42:05,496 --> 00:42:07,606
So, that was an overview


933
00:42:07,606 --> 00:42:10,076
of the standard AppKit
controls inside of AppKit.


934
00:42:10,336 --> 00:42:12,686
I'm going to bring it
back to Chris to talk more


935
00:42:12,686 --> 00:42:15,226
about performance and what you
can do to make your app fast


936
00:42:15,226 --> 00:42:16,236
with these new visual
effects [applause].


937
00:42:17,276 --> 00:42:17,846
>> Thank you, Corbin.


938
00:42:18,596 --> 00:42:20,416
All right, so that was fun.


939
00:42:20,416 --> 00:42:22,386
Let's talk about
performance, which is also fun.


940
00:42:23,226 --> 00:42:28,116
So you notice that blur we had
and this may not surprise you


941
00:42:28,866 --> 00:42:31,136
but the blur effect
isn't exactly free.


942
00:42:31,796 --> 00:42:34,656
It does cost something, and
that something is graphics


943
00:42:34,656 --> 00:42:36,236
performance and battery usage.


944
00:42:36,956 --> 00:42:40,856
And sometimes, though, the
cost is worth the results.


945
00:42:42,066 --> 00:42:44,146
So, something you
should be aware


946
00:42:44,146 --> 00:42:46,236
of here is you're not trying
to not use this effect.


947
00:42:46,236 --> 00:42:47,266
You want your app
to look beautiful.


948
00:42:47,636 --> 00:42:49,536
You just need to pay
attention to striking a balance


949
00:42:49,596 --> 00:42:52,436
between that appearance and
the resource utilization.


950
00:42:53,126 --> 00:42:55,046
So, here's a small example.


951
00:42:55,046 --> 00:42:57,346
These two images on the left
and right appear as samples.


952
00:42:57,346 --> 00:42:59,686
It's actually controlled
with three image views


953
00:43:00,126 --> 00:43:01,926
and these vibrant
template houses.


954
00:43:02,496 --> 00:43:04,976
And you recall that Vibrancy
requires a VisualEffectView.


955
00:43:05,386 --> 00:43:07,806
So there's actually a few
ways of accomplishing this,


956
00:43:08,066 --> 00:43:11,466
but on the left we
choose to accomplish this


957
00:43:11,966 --> 00:43:13,446
with a single visual
effect view.


958
00:43:14,386 --> 00:43:16,396
Meanwhile on the right,
we can accomplish this


959
00:43:16,396 --> 00:43:19,886
with three visual effect views
and there's some obvious reasons


960
00:43:19,886 --> 00:43:21,856
to structure things on the
right versus on the left.


961
00:43:22,256 --> 00:43:23,716
One of them would
be flexibility.


962
00:43:23,716 --> 00:43:24,926
If you needed different
appearances


963
00:43:24,926 --> 00:43:26,756
or difference materials
for those houses


964
00:43:26,756 --> 00:43:28,386
on the right you would need
to use VisualEffectViews.


965
00:43:28,796 --> 00:43:31,546
However, you should be conscious


966
00:43:31,546 --> 00:43:33,206
about how many VisualEffectViews
you're using


967
00:43:33,286 --> 00:43:34,196
and when you're using them.


968
00:43:34,806 --> 00:43:37,136
In this case, the number
of pixels affected here,


969
00:43:37,136 --> 00:43:39,916
the surface area of these
houses is almost identical


970
00:43:40,096 --> 00:43:41,466
between the left and the right.


971
00:43:42,066 --> 00:43:45,006
And in that case, a single
VisualEffectView is going


972
00:43:45,006 --> 00:43:46,026
to mean more performance


973
00:43:46,026 --> 00:43:47,836
if there's less information
for us to track.


974
00:43:48,456 --> 00:43:50,646
The opposite of this
case is also true.


975
00:43:50,686 --> 00:43:53,606
If you had a window with,
say, some very small areas


976
00:43:53,606 --> 00:43:56,486
of Vibrancy and they were on
different edges of the window,


977
00:43:56,706 --> 00:43:57,576
it might be more efficient


978
00:43:57,576 --> 00:43:59,356
to use two VisualEffectViews
instead


979
00:43:59,356 --> 00:44:00,956
of a single enormous
VisualEffectView.


980
00:44:02,036 --> 00:44:04,986
Something else to be aware of,
especially for in window blurs,


981
00:44:05,696 --> 00:44:07,006
is frequently updated content.


982
00:44:07,006 --> 00:44:08,656
And what do I mean by
frequently updated content?


983
00:44:08,906 --> 00:44:10,046
Well, I mean movies.


984
00:44:10,236 --> 00:44:11,026
I mean animations.


985
00:44:11,226 --> 00:44:12,476
I even mean blinking cursors.


986
00:44:12,476 --> 00:44:15,996
These are going to be
updating at 24 or 35ths,


987
00:44:15,996 --> 00:44:18,836
or 65ths for animation, or
even 2/5 for blinking cursors.


988
00:44:19,066 --> 00:44:21,526
And the thing is whenever these
update we're going to have


989
00:44:21,526 --> 00:44:22,826
to recompute that blur.


990
00:44:22,826 --> 00:44:25,536
This is also true for
behind window blurs,


991
00:44:25,726 --> 00:44:27,966
but you don't usually control
the content behind the window


992
00:44:27,966 --> 00:44:29,846
in your app, so that's not
something you really need


993
00:44:29,846 --> 00:44:30,976
to worry about.


994
00:44:31,516 --> 00:44:34,696
Corbin mentioned that
layers are often required,


995
00:44:34,696 --> 00:44:36,436
especially for in window blurs,


996
00:44:36,776 --> 00:44:38,776
and layer usage is
increasing just in general.


997
00:44:38,776 --> 00:44:41,456
But something I wanted
to mention is


998
00:44:41,456 --> 00:44:45,146
that if you're using layers, the
dirty shapes on screen are going


999
00:44:45,146 --> 00:44:47,526
to be different than if
you're not using layers.


1000
00:44:47,806 --> 00:44:50,336
So, here's an example
of a mock text view


1001
00:44:50,336 --> 00:44:53,076
that just blinks an insertion
point in this "r" rectangle,


1002
00:44:53,396 --> 00:44:54,366
when it's not layer-backed.


1003
00:44:55,886 --> 00:44:58,176
And you can see here we
have this blinking cursor.


1004
00:44:58,466 --> 00:45:00,616
What you probably can't see
is, I've actually turned


1005
00:45:00,616 --> 00:45:02,376
on color flush in one
of our de-bug tools,


1006
00:45:02,716 --> 00:45:05,416
and this rectangle is
turning yellow every time the


1007
00:45:05,416 --> 00:45:06,296
cursor updates.


1008
00:45:06,726 --> 00:45:08,166
For a non-layer backed view,


1009
00:45:08,356 --> 00:45:10,926
that small rectangle is all
that's flushed on screen.


1010
00:45:12,166 --> 00:45:14,816
If, however, we say we do
want to layer for this,


1011
00:45:14,946 --> 00:45:16,556
we're still using
the small dirty rect,


1012
00:45:17,186 --> 00:45:20,896
but whenever the view
updates, we see this instead.


1013
00:45:21,626 --> 00:45:22,746
The entire layer is flushed.


1014
00:45:22,946 --> 00:45:24,326
It's not that we're
drawing anymore,


1015
00:45:24,326 --> 00:45:27,366
our application is still just
drawing that tiny cursor rect,


1016
00:45:27,586 --> 00:45:29,636
it's just that Core Animation
has been built for GPUs,


1017
00:45:29,636 --> 00:45:32,506
which involve submitting
geometry in large batches,


1018
00:45:32,826 --> 00:45:34,756
so we just flush
the entire contents


1019
00:45:34,756 --> 00:45:35,606
of the layer to the screen.


1020
00:45:36,266 --> 00:45:38,396
If, for example, you
had a VisualEffectView


1021
00:45:38,396 --> 00:45:40,586
that overlaid the right
side of this view,


1022
00:45:40,926 --> 00:45:44,476
even though only the insertion
point on the left is blinking,


1023
00:45:44,876 --> 00:45:46,536
that blur is going to
have to be recomputed.


1024
00:45:47,186 --> 00:45:49,386
So, that is something
to keep in mind.


1025
00:45:50,316 --> 00:45:53,246
Something else to be aware of,
if you're using a updateLayer


1026
00:45:53,246 --> 00:45:54,366
or you have your own layer tree


1027
00:45:54,366 --> 00:45:55,756
and you're setting your
own layer properties,


1028
00:45:55,756 --> 00:45:57,956
like the corner radius or
other elements directly,


1029
00:45:58,376 --> 00:46:01,926
the entire layer is still going
to be flushed in one pass there.


1030
00:46:02,386 --> 00:46:05,896
So that caveat applies to
update layer users also.


1031
00:46:06,406 --> 00:46:08,376
Often, though, you can fix this


1032
00:46:08,376 --> 00:46:11,056
by just re-factoring your
view hierarchy a little.


1033
00:46:11,256 --> 00:46:13,986
So, for example, if you have
frequently updating content,


1034
00:46:14,236 --> 00:46:17,496
try to put it in a small view
and have - reserve large views


1035
00:46:17,736 --> 00:46:20,266
for static or unfrequently
updated content.


1036
00:46:21,506 --> 00:46:23,956
Something unrelated, but very
important to be aware of,


1037
00:46:24,336 --> 00:46:27,076
is NSWindow has an opaque
property and you shouldn't mess


1038
00:46:27,076 --> 00:46:28,616
with it if you're using
visual effect views.


1039
00:46:28,616 --> 00:46:31,426
In the past, if you needed to
punch a hole through your window


1040
00:46:31,426 --> 00:46:33,616
or have transparency, you
had to set this to Yes.


1041
00:46:34,056 --> 00:46:36,436
However, if you're using
VisualEffectViews you don't have


1042
00:46:36,436 --> 00:46:38,236
to do that, we take care
of it automatically.


1043
00:46:38,636 --> 00:46:40,836
If you set this to No, you're
going to take away a lot


1044
00:46:40,836 --> 00:46:44,326
of information the Window Server
uses to call obscured windows


1045
00:46:44,476 --> 00:46:46,576
and it'll be doing a lot
more drawing than necessary.


1046
00:46:46,826 --> 00:46:50,506
So, avoid this unless
you're already using it


1047
00:46:51,676 --> 00:46:52,486
for other reasons.


1048
00:46:52,486 --> 00:46:53,986
I want to point out this option


1049
00:46:54,096 --> 00:46:55,466
in the Accessibility
preferences,


1050
00:46:55,636 --> 00:46:57,286
this is in the Display
subsection called


1051
00:46:57,286 --> 00:46:58,336
Reduce Transparency.


1052
00:46:58,426 --> 00:47:00,676
And that'll actually
turn off our blurs


1053
00:47:00,676 --> 00:47:01,866
on a system-wide basis.


1054
00:47:02,246 --> 00:47:04,736
And I'm not suggesting
this as a user feature.


1055
00:47:05,186 --> 00:47:07,086
Instead I'm suggesting
this as a diagnostic tool.


1056
00:47:07,616 --> 00:47:09,586
If you add a lot of
VisualEffectViews to your app


1057
00:47:09,586 --> 00:47:10,626
and all of the sudden you notice


1058
00:47:10,666 --> 00:47:12,276
that maybe your window
resizing animations


1059
00:47:12,276 --> 00:47:14,476
or your fullscreen
transitions have become slow,


1060
00:47:14,986 --> 00:47:16,276
you can set this to Yes,


1061
00:47:16,586 --> 00:47:21,076
and this will avoid the cost
we pay when doing that blur.


1062
00:47:21,636 --> 00:47:23,286
So if you notice when
this is turned on,


1063
00:47:23,286 --> 00:47:24,616
your performance is fine.


1064
00:47:24,616 --> 00:47:26,836
And when this is turned off,
your performance is kind


1065
00:47:26,836 --> 00:47:30,456
of sluggish, it's probably
you're using a VisualEffectView


1066
00:47:30,456 --> 00:47:32,916
that's too large or too
many VisualEffectViews,


1067
00:47:33,136 --> 00:47:36,296
and that's a cue to dial
down the transparency


1068
00:47:36,296 --> 00:47:37,636
and blurring in the app.


1069
00:47:38,896 --> 00:47:39,656
Some other things I want


1070
00:47:39,656 --> 00:47:43,836
to mention is some performance
tools we can use for this.


1071
00:47:44,066 --> 00:47:48,106
So I used Quartz Debug to turn
on a coloring of dirty areas


1072
00:47:48,156 --> 00:47:49,546
that the Windows
Server had to redraw,


1073
00:47:49,546 --> 00:47:52,146
and that can be very
useful for diagnosing cases


1074
00:47:52,146 --> 00:47:54,316
where you may be drawing more
content than you're expecting,


1075
00:47:54,566 --> 00:47:56,796
or when you're using layers
and you're drawing a little bit


1076
00:47:56,796 --> 00:47:58,616
of content but it's
affecting an entire view.


1077
00:47:59,296 --> 00:48:01,106
Something I want to
point out about a lot


1078
00:48:01,106 --> 00:48:04,806
of our drawing here is that the
blur effect actually happens


1079
00:48:04,806 --> 00:48:05,576
out of process.


1080
00:48:05,576 --> 00:48:07,156
It happens in the Windows
Server, and furthermore,


1081
00:48:07,156 --> 00:48:09,216
it happens on the
GPU, and that means


1082
00:48:09,216 --> 00:48:12,286
that profiling your own process
won't necessarily tell you


1083
00:48:12,286 --> 00:48:13,356
as much as you would hope.


1084
00:48:13,756 --> 00:48:16,096
I'm still, however, going to
call out the Instruments tool,


1085
00:48:16,716 --> 00:48:20,186
because the Windows Server and
your app are kind of competing


1086
00:48:20,186 --> 00:48:22,496
to get frames on the screen
in a single display cycle.


1087
00:48:23,306 --> 00:48:24,976
And the faster you
can make your app


1088
00:48:24,976 --> 00:48:28,226
and the less GPU it utilizes,
the more that is available


1089
00:48:28,226 --> 00:48:28,986
for the Windows Server.


1090
00:48:29,046 --> 00:48:30,846
So you can still improve the
performance of the system


1091
00:48:30,846 --> 00:48:33,126
as a whole by just improving
the performance of your app,


1092
00:48:33,126 --> 00:48:36,016
and Instruments gives you the
tools to monitor all that.


1093
00:48:36,286 --> 00:48:39,476
If you're just doing a lighter
development on your app,


1094
00:48:39,476 --> 00:48:41,556
having Activity Monitor open
can sometimes be useful.


1095
00:48:41,766 --> 00:48:43,926
It's certainly not as
in-depth as Instruments


1096
00:48:44,266 --> 00:48:46,066
but it will tell you how
much CPU you're using


1097
00:48:46,066 --> 00:48:49,386
and more importantly it'll tell
you how much energy your app is


1098
00:48:49,386 --> 00:48:50,856
taking to do what it's doing.


1099
00:48:50,856 --> 00:48:52,686
And if you see that
operating a little higher


1100
00:48:52,686 --> 00:48:54,846
than you're expecting,
that may be another clue


1101
00:48:54,846 --> 00:48:58,486
that your VisualEffectView usage
has gotten a little excessive.


1102
00:48:59,236 --> 00:49:02,436
Finally, for the purists amongst
you who really don't want


1103
00:49:02,436 --> 00:49:05,516
to impact what their app is
doing by adding some GUI stuff


1104
00:49:05,516 --> 00:49:08,256
to profile it, you can SSH
in a new sample for example,


1105
00:49:08,256 --> 00:49:09,806
which will tell you
what your app is doing.


1106
00:49:10,806 --> 00:49:11,626
So we've covered a lot.


1107
00:49:11,626 --> 00:49:13,836
So let me give you a quick
summary of these things.


1108
00:49:14,386 --> 00:49:16,026
I mentioned the NSImage
drawing enhancements,


1109
00:49:16,146 --> 00:49:17,256
especially capInsets.


1110
00:49:17,256 --> 00:49:20,056
I also mentioned the new
behaviors of NSColor,


1111
00:49:20,056 --> 00:49:23,486
the importance of NSAppearance,
and some SegmentedControl API.


1112
00:49:23,486 --> 00:49:26,166
We covered new window features,


1113
00:49:26,436 --> 00:49:28,166
especially the full
size content view,


1114
00:49:28,706 --> 00:49:31,246
but also the title
visibility options


1115
00:49:31,246 --> 00:49:33,586
so you can make your title
bars look like Safari and Maps.


1116
00:49:33,696 --> 00:49:37,236
We also covered the transparent
title bar, which is what Notes


1117
00:49:37,236 --> 00:49:38,496
and Reminders are using to have


1118
00:49:38,496 --> 00:49:40,856
that crisp appearance all
the way from the bottom


1119
00:49:40,856 --> 00:49:43,956
to the top of their windows.


1120
00:49:43,956 --> 00:49:45,206
Corbin gave you a
huge run-through


1121
00:49:45,206 --> 00:49:46,856
on NSVisualEffectView
and what you can do


1122
00:49:46,856 --> 00:49:48,806
with our visual effects
and how appearances


1123
00:49:48,806 --> 00:49:49,966
and Vibrancy are accomplished.


1124
00:49:50,436 --> 00:49:52,076
And finally, you folks remember


1125
00:49:52,076 --> 00:49:54,436
like 40 seconds ago we talked
a little bit about performance,


1126
00:49:54,776 --> 00:49:57,286
and I do hope you'll take some
of those performance messages


1127
00:49:57,286 --> 00:49:58,976
to heart when you leave.


1128
00:49:59,846 --> 00:50:00,696
Oh, thank you, Riley.


1129
00:50:01,056 --> 00:50:02,436
One other thing I failed
to mention, though,


1130
00:50:02,436 --> 00:50:05,566
is the new NSScrollView API that
you would use in conjunction


1131
00:50:05,566 --> 00:50:07,546
with full size content
view didn't make it


1132
00:50:07,546 --> 00:50:09,096
into the CU Guide
earlier this week,


1133
00:50:09,376 --> 00:50:10,806
but it will be available
to you shortly.


1134
00:50:12,646 --> 00:50:16,166
So, I'd like to point
out Jake Behrens,


1135
00:50:16,166 --> 00:50:17,416
our Frameworks Evangelist.


1136
00:50:17,706 --> 00:50:19,726
He's here in the plaid shirt


1137
00:50:19,726 --> 00:50:21,766
and the dark vibrant
appearance shoes.


1138
00:50:22,066 --> 00:50:24,156
We have taken to
describing his appearance


1139
00:50:24,156 --> 00:50:25,986
in great detail throughout
the course of the week.


1140
00:50:25,986 --> 00:50:27,896
I'm eager to see what we
come up with tomorrow.


1141
00:50:28,336 --> 00:50:31,036
We also, of course, have
documentation available online.


1142
00:50:31,416 --> 00:50:33,036
At developer.apple.com is also


1143
00:50:33,036 --> 00:50:34,766
where you can get the Quartz
Debug tool I mentioned.


1144
00:50:35,146 --> 00:50:36,496
And, of course, our
developer forums.


1145
00:50:36,926 --> 00:50:40,656
There's some related
sessions, "Adapting Your App


1146
00:50:40,656 --> 00:50:43,306
to the New UI" was a session
yesterday that's available


1147
00:50:43,306 --> 00:50:44,156
online now.


1148
00:50:44,716 --> 00:50:46,946
Additionally, later this
afternoon there's "What's New


1149
00:50:46,946 --> 00:50:48,986
in Interface Builder", which
will cover not only a bit


1150
00:50:48,986 --> 00:50:50,916
of what we showed you during
Interface Builder today


1151
00:50:50,916 --> 00:50:52,816
but other useful
Interface Builder tools


1152
00:50:52,816 --> 00:50:54,416
for designing your app.


1153
00:50:54,416 --> 00:50:57,616
And tomorrow morning is
"Creating Modern Cocoa Apps",


1154
00:50:57,616 --> 00:50:59,546
which if you found some of
these new APIs interesting,


1155
00:50:59,546 --> 00:51:02,356
that'll cover a lot more of
what's gone into Cocoa recently.


1156
00:51:02,676 --> 00:51:03,366
Thank you very much.


1157
00:51:04,516 --> 00:51:11,230
[ Applause ]

