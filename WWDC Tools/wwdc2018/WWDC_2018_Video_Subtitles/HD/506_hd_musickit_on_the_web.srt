1
00:00:07,516 --> 00:00:15,500
[ Music ]


2
00:00:17,516 --> 00:00:20,976
[ Applause ]


3
00:00:21,476 --> 00:00:24,166
>> Hello, everyone, and welcome.


4
00:00:25,086 --> 00:00:26,766
My name is Betim Deva, and I'm


5
00:00:26,766 --> 00:00:28,216
an engineer on the Apple Music


6
00:00:28,256 --> 00:00:30,336
team, and I'm excited to share


7
00:00:30,336 --> 00:00:32,266
with you some updates that we


8
00:00:32,266 --> 00:00:33,296
have made to MusicKit.


9
00:00:35,106 --> 00:00:36,566
MusicKit was announced last


10
00:00:36,566 --> 00:00:38,626
year, and it enabled developers


11
00:00:38,626 --> 00:00:41,366
like yourselves bring customized


12
00:00:41,366 --> 00:00:43,136
music experiences within their


13
00:00:43,136 --> 00:00:43,556
apps.


14
00:00:44,476 --> 00:00:46,476
This year, we are announcing


15
00:00:46,476 --> 00:00:48,796
Apple Music on the web, which


16
00:00:48,796 --> 00:00:50,486
will allow you to bring the same


17
00:00:50,486 --> 00:00:52,616
kind of music experiences for


18
00:00:52,616 --> 00:00:53,586
your websites.


19
00:00:54,766 --> 00:00:56,856
We have a great web player ready


20
00:00:56,856 --> 00:00:58,916
for you to embed, and we are


21
00:00:58,916 --> 00:01:00,796
introducing MusicKit for the


22
00:01:00,796 --> 00:01:02,976
web, which will allow you to


23
00:01:03,046 --> 00:01:05,656
integrate Apple Music into your


24
00:01:05,656 --> 00:01:06,456
websites.


25
00:01:07,066 --> 00:01:09,006
We will talk more about Apple


26
00:01:09,006 --> 00:01:10,546
Music on the web in a little


27
00:01:10,546 --> 00:01:12,566
bit, but first, let's take a


28
00:01:12,566 --> 00:01:14,196
look at some exciting updates on


29
00:01:14,196 --> 00:01:14,736
MusicKit.


30
00:01:15,256 --> 00:01:18,906
It's been great to see how app


31
00:01:18,906 --> 00:01:20,816
developers have incorporated


32
00:01:21,196 --> 00:01:23,466
Apple Music into their apps.


33
00:01:24,026 --> 00:01:27,026
For instance, we all know and


34
00:01:27,026 --> 00:01:28,906
love making music videos with


35
00:01:28,906 --> 00:01:29,986
musical.ly.


36
00:01:30,636 --> 00:01:32,086
When you find new music in this


37
00:01:32,086 --> 00:01:34,036
app, you can easily add it to a


38
00:01:34,036 --> 00:01:34,586
playlist.


39
00:01:36,216 --> 00:01:38,726
Houdini makes joining Apple


40
00:01:38,726 --> 00:01:39,716
Music simple.


41
00:01:40,306 --> 00:01:42,366
It allows you to transfer your


42
00:01:42,366 --> 00:01:44,336
playlists to Apple Music.


43
00:01:45,716 --> 00:01:48,166
And Stationhead turns your


44
00:01:48,166 --> 00:01:50,596
playlists to radio stations.


45
00:01:50,976 --> 00:01:53,126
It allows you to broadcast your


46
00:01:53,126 --> 00:01:55,406
music and your voice to the


47
00:01:55,406 --> 00:01:56,046
world.


48
00:01:57,556 --> 00:02:00,536
And lastly, Ola is the biggest


49
00:02:00,536 --> 00:02:02,286
ride-hailing service in India.


50
00:02:03,106 --> 00:02:04,296
We have been partnering with


51
00:02:04,296 --> 00:02:06,466
them to bring the Apple Music


52
00:02:06,466 --> 00:02:08,705
experience within their fleet of


53
00:02:08,746 --> 00:02:09,256
cars.


54
00:02:10,876 --> 00:02:13,406
Since MusicKit was announced


55
00:02:13,406 --> 00:02:15,466
last year, we got a lot of


56
00:02:15,466 --> 00:02:18,276
feedback for providing a way to


57
00:02:18,276 --> 00:02:20,406
look up content using the


58
00:02:20,406 --> 00:02:22,926
International Standard Recording


59
00:02:22,926 --> 00:02:24,796
Code known as ISRC.


60
00:02:24,846 --> 00:02:28,336
I am happy to report that this


61
00:02:28,336 --> 00:02:30,156
has been added, and it will


62
00:02:30,156 --> 00:02:31,986
enable you to precisely match


63
00:02:32,246 --> 00:02:35,296
songs and music videos in the


64
00:02:35,296 --> 00:02:37,066
Apple Music catalog from


65
00:02:37,066 --> 00:02:38,916
virtually any other source.


66
00:02:40,596 --> 00:02:43,036
Another enhancement to MusicKit


67
00:02:43,626 --> 00:02:45,526
is the addition of iCloud Music


68
00:02:45,526 --> 00:02:46,686
Library APIs.


69
00:02:48,096 --> 00:02:50,026
Once the user has given


70
00:02:50,026 --> 00:02:52,736
authorization to your app, you


71
00:02:52,736 --> 00:02:54,396
can now provide them with ways


72
00:02:54,756 --> 00:02:56,486
to interact with their music


73
00:02:56,486 --> 00:02:59,206
library from within your app.


74
00:03:00,676 --> 00:03:03,966
These APIs enable your users to


75
00:03:03,966 --> 00:03:08,176
browse, search, and add content


76
00:03:08,176 --> 00:03:09,506
to their music library.


77
00:03:10,816 --> 00:03:12,246
You can also provide a way for


78
00:03:12,246 --> 00:03:14,506
your user to create playlists


79
00:03:14,976 --> 00:03:16,736
and add songs to an existing


80
00:03:16,776 --> 00:03:18,846
playlist, all from within your


81
00:03:19,946 --> 00:03:20,000
app.


82
00:03:24,256 --> 00:03:26,146
Last year, we gave you Apple


83
00:03:26,146 --> 00:03:28,366
Music APIs for our catalog.


84
00:03:29,576 --> 00:03:32,366
This year, we added the iCloud


85
00:03:32,366 --> 00:03:33,876
Music Library APIs.


86
00:03:34,476 --> 00:03:35,906
We think this is a great set of


87
00:03:35,906 --> 00:03:37,276
music APIs.


88
00:03:38,266 --> 00:03:40,196
If you have been using our


89
00:03:40,196 --> 00:03:42,576
existing iTunes Search API, we


90
00:03:42,616 --> 00:03:44,916
encourage you to migrate over to


91
00:03:44,916 --> 00:03:48,126
Apple Music APIs now.


92
00:03:48,356 --> 00:03:50,246
Now, I would like to invite my


93
00:03:50,246 --> 00:03:52,466
colleague DJ to the stage to


94
00:03:52,466 --> 00:03:53,916
talk about Apple Music on the


95
00:03:53,916 --> 00:03:54,216
web.


96
00:03:54,716 --> 00:03:55,126
Thank you.


97
00:03:56,516 --> 00:04:00,836
[ Applause ]


98
00:04:01,336 --> 00:04:01,846
>> Thank you, Betim.


99
00:04:03,256 --> 00:04:04,396
This year, we're excited to be


100
00:04:04,396 --> 00:04:05,676
announcing MusicKit on the web.


101
00:04:06,476 --> 00:04:08,306
Last year, we talked all about


102
00:04:08,346 --> 00:04:09,686
the great ways for you to add


103
00:04:09,686 --> 00:04:11,236
Apple Music to your iOS apps.


104
00:04:12,166 --> 00:04:13,186
This year, we're bringing all of


105
00:04:13,186 --> 00:04:14,396
that same great functionality to


106
00:04:14,396 --> 00:04:14,786
the web.


107
00:04:16,456 --> 00:04:17,435
So let's talk about the


108
00:04:17,435 --> 00:04:18,896
components that make up MusicKit


109
00:04:18,896 --> 00:04:21,906
on the web.


110
00:04:22,106 --> 00:04:23,416
Last year, we added access to


111
00:04:23,416 --> 00:04:24,906
the entire Apple Music catalog


112
00:04:24,906 --> 00:04:26,496
with a REST API.


113
00:04:27,056 --> 00:04:28,646
This year, as Betim mentioned,


114
00:04:29,286 --> 00:04:30,526
we're launching new additions to


115
00:04:30,526 --> 00:04:32,006
that REST API that'll let you


116
00:04:32,006 --> 00:04:33,786
access the iCloud Music Library


117
00:04:33,786 --> 00:04:34,766
for the logged-in user.


118
00:04:36,276 --> 00:04:37,386
We're also launching the


119
00:04:37,386 --> 00:04:38,936
MusicKit JS library.


120
00:04:39,606 --> 00:04:41,766
Makes it really easy to use both


121
00:04:41,766 --> 00:04:42,816
of those REST APIs in the


122
00:04:42,816 --> 00:04:46,296
browser, and it gives your users


123
00:04:46,296 --> 00:04:47,486
the ability to play back full


124
00:04:47,486 --> 00:04:49,266
songs from the Apple Music


125
00:04:49,266 --> 00:04:51,026
catalog and from the iCloud


126
00:04:51,026 --> 00:04:52,356
Music Library right in their


127
00:04:52,356 --> 00:04:52,756
browser.


128
00:04:56,616 --> 00:04:58,206
Before we dig into MusicKit JS,


129
00:04:58,206 --> 00:04:59,906
I want to show you the Apple


130
00:04:59,906 --> 00:05:00,876
Music web player.


131
00:05:02,836 --> 00:05:04,646
A few weeks ago, we launched a


132
00:05:04,646 --> 00:05:05,616
new embeddable player.


133
00:05:06,586 --> 00:05:08,306
It works great both on the


134
00:05:08,306 --> 00:05:10,176
desktop and on mobile browsers.


135
00:05:11,996 --> 00:05:13,496
These embeddable players are a


136
00:05:13,496 --> 00:05:15,016
simple way for you to add full


137
00:05:15,016 --> 00:05:16,186
song playback from the Apple


138
00:05:16,186 --> 00:05:17,626
Music catalog right to your


139
00:05:17,626 --> 00:05:18,246
website.


140
00:05:18,506 --> 00:05:20,986
We have players for a single


141
00:05:20,986 --> 00:05:22,696
song, an album, or a whole


142
00:05:22,696 --> 00:05:23,176
playlist.


143
00:05:24,496 --> 00:05:26,346
You can find the embed code on


144
00:05:26,346 --> 00:05:28,636
the Apple Music preview pages or


145
00:05:28,636 --> 00:05:29,496
right within the embeddable


146
00:05:29,496 --> 00:05:30,236
player itself.


147
00:05:31,316 --> 00:05:32,816
All you have to do is copy and


148
00:05:32,816 --> 00:05:34,156
paste into your own website.


149
00:05:34,156 --> 00:05:36,116
These embeddable players are


150
00:05:36,116 --> 00:05:38,526
great for full song playback on


151
00:05:38,526 --> 00:05:40,036
third-party websites, and we've


152
00:05:40,036 --> 00:05:41,466
also enabled that functionality


153
00:05:41,466 --> 00:05:42,646
on the Apple Music preview


154
00:05:42,646 --> 00:05:43,026
pages.


155
00:05:43,596 --> 00:05:47,366
So the embeds are powered by


156
00:05:47,506 --> 00:05:49,706
MusicKit JS, which we're also


157
00:05:49,706 --> 00:05:50,766
releasing so you can build your


158
00:05:50,766 --> 00:05:52,086
own great music experiences.


159
00:05:53,636 --> 00:05:54,696
So let's talk about the


160
00:05:54,696 --> 00:05:55,916
functionality.


161
00:05:58,256 --> 00:05:59,936
First and most importantly,


162
00:05:59,936 --> 00:06:01,046
you'll be able to play back full


163
00:06:01,046 --> 00:06:02,856
songs from Apple Music in the


164
00:06:02,856 --> 00:06:03,246
browser.


165
00:06:04,076 --> 00:06:05,536
It works on all modern browsers


166
00:06:05,536 --> 00:06:06,746
without the need for any plug


167
00:06:06,746 --> 00:06:08,646
ins or external dependencies.


168
00:06:09,436 --> 00:06:11,156
You can use it on its own or


169
00:06:11,216 --> 00:06:12,626
with any JavaScript framework of


170
00:06:12,626 --> 00:06:13,066
your choice.


171
00:06:14,796 --> 00:06:15,976
So for playback, we need to


172
00:06:15,976 --> 00:06:16,856
authorize the user.


173
00:06:18,046 --> 00:06:19,426
We'll handle that for you to


174
00:06:19,426 --> 00:06:20,606
ensure that the user is an Apple


175
00:06:20,606 --> 00:06:21,376
Music subscriber.


176
00:06:21,916 --> 00:06:24,066
The JavaScript library is going


177
00:06:24,066 --> 00:06:25,326
to keep a queue of songs so you


178
00:06:25,326 --> 00:06:26,756
can play back a full album or a


179
00:06:26,756 --> 00:06:27,336
whole playlist.


180
00:06:27,446 --> 00:06:31,536
Once you have that queue of


181
00:06:31,536 --> 00:06:32,486
songs, you'll be able to


182
00:06:32,486 --> 00:06:32,866
control.


183
00:06:33,006 --> 00:06:34,466
You'll be able to play, pause,


184
00:06:34,466 --> 00:06:36,256
and skip to the previous or skip


185
00:06:36,256 --> 00:06:37,466
to the next track.


186
00:06:38,676 --> 00:06:39,736
And we're also going to keep


187
00:06:39,736 --> 00:06:40,786
track of the Now Playing


188
00:06:40,786 --> 00:06:42,606
metadata for the song that's


189
00:06:42,606 --> 00:06:43,916
currently playing or currently


190
00:06:43,916 --> 00:06:45,446
loading so you can render your


191
00:06:45,446 --> 00:06:47,126
UI off of it.


192
00:06:48,596 --> 00:06:49,836
So let's talk about how we would


193
00:06:49,836 --> 00:06:50,896
build a simple player for the


194
00:06:50,896 --> 00:06:51,146
web.


195
00:06:51,576 --> 00:06:53,066
We're going to include the


196
00:06:53,066 --> 00:06:54,566
JavaScript library.


197
00:06:56,676 --> 00:06:57,876
Then, you need to provide your


198
00:06:57,876 --> 00:06:58,686
developer token.


199
00:06:58,936 --> 00:07:00,296
You can generate this using your


200
00:07:00,296 --> 00:07:00,976
private key.


201
00:07:01,506 --> 00:07:05,466
We have a really great way to


202
00:07:05,466 --> 00:07:07,606
use declarative HTML markup.


203
00:07:07,796 --> 00:07:08,696
You can add some markup to your


204
00:07:08,696 --> 00:07:09,156
page.


205
00:07:09,196 --> 00:07:10,636
For example, buttons for sign


206
00:07:10,636 --> 00:07:11,906
in, sign out, or playback


207
00:07:11,906 --> 00:07:12,376
controls.


208
00:07:13,776 --> 00:07:15,236
We'll handle wiring up those


209
00:07:15,236 --> 00:07:16,866
elements to the appropriate


210
00:07:16,866 --> 00:07:17,856
functions in MusicKit.


211
00:07:18,346 --> 00:07:20,366
Then, we're going to add some


212
00:07:20,366 --> 00:07:21,026
play buttons.


213
00:07:21,026 --> 00:07:22,596
We'll use some content IDs or


214
00:07:22,596 --> 00:07:24,456
some URLs from the Apple Music


215
00:07:24,456 --> 00:07:26,236
catalog that'll let the users


216
00:07:26,236 --> 00:07:26,876
start playback.


217
00:07:27,236 --> 00:07:31,446
So let's take a look at the code


218
00:07:31,446 --> 00:07:31,716
for this.


219
00:07:31,716 --> 00:07:33,476
You're going to include the


220
00:07:33,476 --> 00:07:34,926
JavaScript library, and we're


221
00:07:34,926 --> 00:07:36,176
going to host this on our CDN


222
00:07:36,176 --> 00:07:36,566
for you.


223
00:07:37,086 --> 00:07:39,016
We're going to add some buttons


224
00:07:39,256 --> 00:07:41,286
for signing in and signing out.


225
00:07:42,496 --> 00:07:43,656
Some buttons to control


226
00:07:43,656 --> 00:07:44,156
playback.


227
00:07:44,366 --> 00:07:45,386
Here we have a play button, a


228
00:07:45,386 --> 00:07:46,766
pause button, and a next track


229
00:07:46,766 --> 00:07:46,936
button.


230
00:07:46,936 --> 00:07:50,836
We'll add some elements that we


231
00:07:50,836 --> 00:07:52,286
will render in metadata about


232
00:07:52,286 --> 00:07:53,126
what's currently playing.


233
00:07:53,546 --> 00:07:54,636
Here we can get the playlist


234
00:07:54,636 --> 00:07:56,336
name, the title, and the artist


235
00:07:56,336 --> 00:07:57,046
name, for example.


236
00:07:57,476 --> 00:07:59,746
And then, we have some elements


237
00:07:59,746 --> 00:08:01,736
that let you show the progress


238
00:08:01,736 --> 00:08:02,746
through the track that's


239
00:08:02,746 --> 00:08:04,566
currently playing -- the


240
00:08:04,566 --> 00:08:05,926
playback duration, the playback


241
00:08:05,926 --> 00:08:07,166
time, and the playback progress.


242
00:08:07,656 --> 00:08:10,376
So I'd like to bring up Jae Hess


243
00:08:10,376 --> 00:08:12,166
to the stage to show you how to


244
00:08:12,166 --> 00:08:13,866
use the MusicKit JS to build


245
00:08:13,866 --> 00:08:15,196
that simple player that we just


246
00:08:15,796 --> 00:08:16,856
talked about.


247
00:08:17,516 --> 00:08:20,016
[ Applause ]


248
00:08:20,516 --> 00:08:21,056
>> Thanks, DJ.


249
00:08:22,806 --> 00:08:24,556
So we're going to get started


250
00:08:24,556 --> 00:08:27,586
here, and I have a basic HTML


251
00:08:27,586 --> 00:08:29,106
template on the right side in


252
00:08:29,156 --> 00:08:30,746
Xcode that's already linked to


253
00:08:30,746 --> 00:08:32,196
the MusicKit JS library.


254
00:08:32,466 --> 00:08:34,586
And on the left side, I have a


255
00:08:34,586 --> 00:08:35,966
Safari window open that's


256
00:08:35,966 --> 00:08:37,405
running a live reload server.


257
00:08:37,616 --> 00:08:38,956
This way, any changes I make to


258
00:08:38,956 --> 00:08:40,486
my markup will be reflected


259
00:08:40,486 --> 00:08:42,196
directly on the left-hand side.


260
00:08:42,756 --> 00:08:45,996
To get started with MusicKit JS,


261
00:08:45,996 --> 00:08:47,626
the first thing we need to do is


262
00:08:47,626 --> 00:08:49,046
configure it for our use.


263
00:08:49,426 --> 00:08:51,076
And with declarative markup, we


264
00:08:51,076 --> 00:08:52,026
have a very simple way to do


265
00:08:52,026 --> 00:08:53,296
that using meta tags.


266
00:08:53,816 --> 00:08:58,266
We can specify our application


267
00:08:58,266 --> 00:09:00,136
name as well as provide our


268
00:09:00,136 --> 00:09:01,096
developer token.


269
00:09:01,096 --> 00:09:05,936
Next, to get the functionality


270
00:09:05,936 --> 00:09:08,396
we want, we're going to put a


271
00:09:08,396 --> 00:09:09,776
button on the page for the user


272
00:09:09,776 --> 00:09:10,176
to click.


273
00:09:10,276 --> 00:09:11,356
And when this button is clicked,


274
00:09:11,356 --> 00:09:13,516
it's going to take a playlist


275
00:09:13,516 --> 00:09:14,676
from the Apple Music catalog,


276
00:09:15,306 --> 00:09:17,036
set a playback queue, and start


277
00:09:17,036 --> 00:09:18,026
playback in the browser.


278
00:09:18,506 --> 00:09:20,746
Here I'm feeding a content URL


279
00:09:20,886 --> 00:09:22,256
that I got from iTunes on the


280
00:09:22,256 --> 00:09:24,166
desktop for a specific playlist


281
00:09:24,166 --> 00:09:25,166
I'd like to embed.


282
00:09:26,426 --> 00:09:27,846
This playlist is the "Today at


283
00:09:27,846 --> 00:09:29,000
Apple Music" playlist.


284
00:09:34,516 --> 00:09:41,016
[ Music ]


285
00:09:41,516 --> 00:09:42,836
And so with that 1 simple line


286
00:09:42,836 --> 00:09:44,866
of code, we have full playback


287
00:09:45,136 --> 00:09:47,936
of the "Today at Apple" playlist


288
00:09:49,336 --> 00:09:51,776
in the browser.


289
00:09:51,946 --> 00:09:53,436
While this is great and it


290
00:09:53,436 --> 00:09:55,076
offers a really good solution,


291
00:09:55,546 --> 00:09:56,876
we probably want to add more


292
00:09:56,876 --> 00:09:58,146
controls and more functionality


293
00:09:58,146 --> 00:09:59,176
for the user to use.


294
00:10:00,146 --> 00:10:01,466
The first thing we want to do is


295
00:10:01,466 --> 00:10:02,816
allow the users of your


296
00:10:02,816 --> 00:10:03,926
application, which are


297
00:10:03,926 --> 00:10:05,396
subscribers of Apple Music, to


298
00:10:05,396 --> 00:10:06,336
log in and log out.


299
00:10:06,806 --> 00:10:08,476
And we'll do that by adding


300
00:10:08,536 --> 00:10:09,666
Authorize and Unauthorize


301
00:10:09,696 --> 00:10:13,316
buttons to the page.


302
00:10:13,376 --> 00:10:15,946
We use the Apple Music Authorize


303
00:10:15,946 --> 00:10:19,706
and Unauthorize attribute, and


304
00:10:19,706 --> 00:10:21,376
MusicKit JS manages the state of


305
00:10:21,376 --> 00:10:22,816
displaying those buttons for me.


306
00:10:22,946 --> 00:10:24,576
I've logged in previously, so


307
00:10:24,576 --> 00:10:25,826
you see that the state reflects,


308
00:10:25,826 --> 00:10:28,000
"Sign out of Apple Music."


309
00:10:32,276 --> 00:10:33,776
Next, we want to add some


310
00:10:33,776 --> 00:10:34,746
playback controls.


311
00:10:35,346 --> 00:10:37,116
And we can specify these using


312
00:10:37,116 --> 00:10:39,156
the Apple Music attribute, and


313
00:10:39,156 --> 00:10:41,206
we can specify things like skip


314
00:10:41,276 --> 00:10:47,656
to previous item, pause, play,


315
00:10:48,156 --> 00:10:52,000
skip to next item.


316
00:10:56,556 --> 00:10:58,276
We can add Now Playing


317
00:10:58,276 --> 00:10:59,696
information for the user to see


318
00:10:59,696 --> 00:11:00,756
the current playing item in the


319
00:11:00,756 --> 00:11:01,086
queue.


320
00:11:02,596 --> 00:11:03,596
And here I've specified the


321
00:11:03,596 --> 00:11:05,316
playlist artwork URL, and I can


322
00:11:05,316 --> 00:11:06,796
specify the height and width I


323
00:11:06,796 --> 00:11:07,616
would like that to render.


324
00:11:08,236 --> 00:11:09,706
And I also have access to any


325
00:11:09,706 --> 00:11:11,196
data attribute that's available


326
00:11:11,196 --> 00:11:11,996
on the media item.


327
00:11:12,646 --> 00:11:14,176
So I can specify things like


328
00:11:15,076 --> 00:11:18,636
playlist name, the title of the


329
00:11:18,636 --> 00:11:20,276
track, as well as the artist


330
00:11:20,276 --> 00:11:20,496
name.


331
00:11:21,716 --> 00:11:22,996
Underneath, I've specified that


332
00:11:22,996 --> 00:11:23,646
I would like the current


333
00:11:23,646 --> 00:11:26,116
playback time to be loaded into


334
00:11:26,116 --> 00:11:28,966
the HTML time element.


335
00:11:29,036 --> 00:11:31,376
So when the page reloaded,


336
00:11:31,686 --> 00:11:33,036
nothing's there for Now Playing.


337
00:11:33,036 --> 00:11:33,916
That's because we aren't playing


338
00:11:33,916 --> 00:11:35,856
anything, so let's fix that by


339
00:11:35,856 --> 00:11:37,076
adding buttons that would allow


340
00:11:37,076 --> 00:11:39,306
the user to queue up playlists.


341
00:11:39,856 --> 00:11:44,206
I'm going to paste in 16


342
00:11:44,456 --> 00:11:45,026
playlists.


343
00:11:45,376 --> 00:11:48,826
And when the user--


344
00:11:51,516 --> 00:11:58,036
[ Music ]


345
00:11:58,536 --> 00:11:59,366
Now, using the playback


346
00:11:59,366 --> 00:12:01,536
controls, I can pause playback.


347
00:12:01,886 --> 00:12:03,136
I can skip to the next item.


348
00:12:05,516 --> 00:12:09,186
[ Music ]


349
00:12:09,686 --> 00:12:16,606
I could even go back to that.


350
00:12:18,166 --> 00:12:21,076
Now, MusicKit JS offers great


351
00:12:21,076 --> 00:12:22,256
solutions with a declarative


352
00:12:22,256 --> 00:12:24,086
markup, but it also offers a


353
00:12:24,086 --> 00:12:26,306
full JavaScript API, so I'd like


354
00:12:26,306 --> 00:12:28,406
to bring DJ back up on stage to


355
00:12:29,046 --> 00:12:30,206
go over the JavaScript API with


356
00:12:30,206 --> 00:12:30,306
you.


357
00:12:30,736 --> 00:12:30,996
Thank you.


358
00:12:32,516 --> 00:12:38,236
[ Applause ]


359
00:12:38,736 --> 00:12:39,556
>> Thank you, Jae.


360
00:12:40,156 --> 00:12:43,686
The declarative markup is a very


361
00:12:43,686 --> 00:12:45,946
straightforward way to add basic


362
00:12:45,946 --> 00:12:46,646
functionality.


363
00:12:47,436 --> 00:12:48,326
Let's talk about some more


364
00:12:48,326 --> 00:12:49,246
advanced usage.


365
00:12:49,246 --> 00:12:50,836
Here we're going to write some


366
00:12:50,836 --> 00:12:52,016
JavaScript to interact with


367
00:12:52,016 --> 00:12:53,646
MusicKit, and let's take a look


368
00:12:53,646 --> 00:12:54,496
at a couple examples.


369
00:12:55,746 --> 00:12:57,516
We can fetch metadata from the


370
00:12:57,516 --> 00:12:58,626
catalog by ID.


371
00:12:59,156 --> 00:13:03,206
We can search for content within


372
00:13:03,206 --> 00:13:04,156
the Apple Music catalog.


373
00:13:04,796 --> 00:13:08,276
We can browse the iCloud Music


374
00:13:08,276 --> 00:13:09,876
Library for the logged-in user,


375
00:13:10,306 --> 00:13:11,996
and search also works within a


376
00:13:11,996 --> 00:13:12,856
library scope.


377
00:13:13,286 --> 00:13:16,196
We can set and control that


378
00:13:16,196 --> 00:13:17,206
queue of songs directly.


379
00:13:17,266 --> 00:13:20,576
And we can react to playback


380
00:13:20,576 --> 00:13:22,116
events, and we drive our UI off


381
00:13:23,006 --> 00:13:25,936
of this.


382
00:13:26,146 --> 00:13:28,676
So we're going to look at some


383
00:13:28,786 --> 00:13:28,876
code.


384
00:13:28,876 --> 00:13:29,836
First, we're going to use the


385
00:13:29,836 --> 00:13:33,366
MusicKit getInstant method.


386
00:13:33,506 --> 00:13:34,776
MusicKit is a singleton because


387
00:13:34,776 --> 00:13:35,986
you can only play back a single


388
00:13:35,986 --> 00:13:37,886
song at a time, so we're going


389
00:13:37,886 --> 00:13:39,026
to assign this to that music


390
00:13:39,026 --> 00:13:40,896
variable, and we'll use that


391
00:13:40,896 --> 00:13:41,666
throughout the rest of these


392
00:13:41,666 --> 00:13:42,246
examples.


393
00:13:42,756 --> 00:13:46,486
You can look up a song by ID.


394
00:13:47,376 --> 00:13:49,406
The song method takes the ID,


395
00:13:49,406 --> 00:13:50,416
and then you need to supply a


396
00:13:50,416 --> 00:13:50,866
callback.


397
00:13:50,866 --> 00:13:52,006
And this is a promise.


398
00:13:52,406 --> 00:13:53,516
You'll see that promise model


399
00:13:53,516 --> 00:13:54,476
used throughout MusicKit.


400
00:13:54,996 --> 00:13:58,086
You then get a content object


401
00:13:58,086 --> 00:13:59,486
back, and this content object


402
00:13:59,486 --> 00:14:00,756
shows you the attributes of that


403
00:14:00,756 --> 00:14:02,906
song and any relationships --


404
00:14:03,216 --> 00:14:05,496
for example, the artist and the


405
00:14:05,496 --> 00:14:05,826
album.


406
00:14:06,116 --> 00:14:10,806
As Betim talked about earlier,


407
00:14:10,806 --> 00:14:11,806
if you don't have a content ID,


408
00:14:11,806 --> 00:14:13,716
you can do the exact same lookup


409
00:14:14,216 --> 00:14:16,246
with a query filter for the


410
00:14:16,246 --> 00:14:16,936
ISRC.


411
00:14:17,766 --> 00:14:19,056
The objects that get returned


412
00:14:19,376 --> 00:14:20,566
are the same as the previous


413
00:14:20,566 --> 00:14:20,926
example.


414
00:14:24,596 --> 00:14:27,176
We have a batch API if you want


415
00:14:27,586 --> 00:14:29,766
to return a array of song


416
00:14:29,766 --> 00:14:30,896
objects with a single network


417
00:14:30,896 --> 00:14:33,156
call, and this also works for


418
00:14:33,156 --> 00:14:35,000
albums and playlists.


419
00:14:39,756 --> 00:14:41,146
We can let the user play back


420
00:14:41,146 --> 00:14:42,436
content from within their iCloud


421
00:14:42,436 --> 00:14:43,156
Music Library.


422
00:14:44,436 --> 00:14:46,246
So these APIs live under the


423
00:14:46,246 --> 00:14:47,306
library scope.


424
00:14:47,976 --> 00:14:49,506
You can get a list of songs,


425
00:14:49,876 --> 00:14:51,166
albums, and playlists.


426
00:14:52,356 --> 00:14:54,206
These APIs are paginated, so you


427
00:14:54,206 --> 00:14:56,346
can fetch just a subset


428
00:14:56,466 --> 00:14:57,846
[inaudible] manner, and you can


429
00:14:57,846 --> 00:15:00,066
unload more in as the user pages


430
00:15:00,066 --> 00:15:01,416
through or scrolls through your


431
00:15:01,446 --> 00:15:02,296
application.


432
00:15:02,816 --> 00:15:06,026
You could search the Apple Music


433
00:15:06,026 --> 00:15:06,456
catalog.


434
00:15:07,086 --> 00:15:09,306
Here we're going to search for


435
00:15:09,686 --> 00:15:11,446
just songs, and then the second


436
00:15:11,446 --> 00:15:12,486
example, we'll search for both


437
00:15:12,486 --> 00:15:13,606
songs and albums at the same


438
00:15:13,606 --> 00:15:13,926
time.


439
00:15:14,086 --> 00:15:16,056
You can also supply a limit to


440
00:15:16,156 --> 00:15:17,296
limit the number of results


441
00:15:17,296 --> 00:15:17,666
returned.


442
00:15:18,176 --> 00:15:22,626
You can do the same query, but


443
00:15:22,626 --> 00:15:24,046
scope it to within the user's


444
00:15:24,046 --> 00:15:25,286
iCloud Music Library.


445
00:15:26,036 --> 00:15:27,576
Here we're using the exact same


446
00:15:27,576 --> 00:15:28,736
search method with the same


447
00:15:28,736 --> 00:15:30,796
parameters, but we're doing it


448
00:15:30,796 --> 00:15:32,026
under the library scope.


449
00:15:35,906 --> 00:15:37,466
Next up, we have authorization.


450
00:15:38,596 --> 00:15:39,526
We're always going to handle


451
00:15:39,526 --> 00:15:40,726
authorization right before it's


452
00:15:40,726 --> 00:15:42,496
needed -- when playback's


453
00:15:42,496 --> 00:15:44,096
starting or when you're trying


454
00:15:44,096 --> 00:15:45,886
to access the iCloud Music


455
00:15:45,886 --> 00:15:46,866
Library for the current


456
00:15:46,866 --> 00:15:47,516
logged-in user.


457
00:15:48,996 --> 00:15:49,646
You could also trigger it


458
00:15:49,646 --> 00:15:50,486
yourself if you'd like.


459
00:15:51,156 --> 00:15:52,386
Perhaps you want to force that


460
00:15:52,386 --> 00:15:53,786
at the beginning when someone


461
00:15:53,786 --> 00:15:54,586
comes to your website.


462
00:15:58,256 --> 00:15:59,706
When the user presses a button,


463
00:16:00,716 --> 00:16:01,476
you can start playback.


464
00:16:01,766 --> 00:16:03,626
You do this using the setQueue


465
00:16:03,626 --> 00:16:03,996
method.


466
00:16:04,946 --> 00:16:06,576
Here we're supplying the idea of


467
00:16:06,576 --> 00:16:07,926
an album, and MusicKit will


468
00:16:07,926 --> 00:16:10,286
handle fetching the metadata and


469
00:16:10,286 --> 00:16:11,206
then setting that queue.


470
00:16:12,346 --> 00:16:13,496
If you have a content object


471
00:16:13,496 --> 00:16:15,206
that we saw previously, you can


472
00:16:15,206 --> 00:16:16,526
pass that in directly, and it


473
00:16:16,526 --> 00:16:19,946
will figure out what to do.


474
00:16:19,946 --> 00:16:21,176
setQueue returns a promise.


475
00:16:22,166 --> 00:16:23,276
When the queue is fully loaded,


476
00:16:23,276 --> 00:16:24,206
you can start playback.


477
00:16:24,256 --> 00:16:24,966
Here we're going to start


478
00:16:24,966 --> 00:16:26,556
playback automatically with


479
00:16:26,556 --> 00:16:30,996
music.play.


480
00:16:31,206 --> 00:16:32,176
Once those songs are playing,


481
00:16:32,176 --> 00:16:33,246
you might want to be able to


482
00:16:33,246 --> 00:16:34,616
control that.


483
00:16:34,616 --> 00:16:36,356
You can skip to the next or


484
00:16:36,356 --> 00:16:37,106
previous item.


485
00:16:37,146 --> 00:16:38,000
You can pause.


486
00:16:42,406 --> 00:16:44,056
You can present actions in your


487
00:16:44,056 --> 00:16:46,016
UI that will let a user quickly


488
00:16:46,016 --> 00:16:47,196
add those songs, albums, or


489
00:16:47,196 --> 00:16:49,056
playlists they're browsing to


490
00:16:49,056 --> 00:16:50,366
their own iCloud Music Library.


491
00:16:51,236 --> 00:16:52,746
We have an addToLibrary method


492
00:16:52,746 --> 00:16:52,986
here.


493
00:16:52,986 --> 00:16:58,646
You can do that same, you can do


494
00:16:58,646 --> 00:17:00,216
those same 3 calls in batch.


495
00:17:00,706 --> 00:17:01,886
Here we're adding those same 4


496
00:17:01,886 --> 00:17:03,546
items as the top example, but


497
00:17:03,846 --> 00:17:04,646
we're going to do it in a single


498
00:17:04,646 --> 00:17:05,146
network call.


499
00:17:05,715 --> 00:17:11,476
So let's look at events next.


500
00:17:11,636 --> 00:17:12,945
MusicKit's going to fire events


501
00:17:13,256 --> 00:17:14,616
that you use to drive your UI


502
00:17:14,616 --> 00:17:14,806
from.


503
00:17:15,185 --> 00:17:16,846
We do this because MusicKit


504
00:17:16,955 --> 00:17:18,445
needs to own the audio element


505
00:17:18,636 --> 00:17:19,856
in order to do that full song


506
00:17:19,856 --> 00:17:20,826
playback.


507
00:17:21,376 --> 00:17:22,606
Here we're going to use


508
00:17:22,766 --> 00:17:24,656
addEventListener, which is going


509
00:17:24,656 --> 00:17:26,016
to be a very familiar pattern if


510
00:17:26,016 --> 00:17:27,146
you've done DOM scripting in the


511
00:17:27,146 --> 00:17:27,606
past.


512
00:17:28,856 --> 00:17:30,096
We're going to dive into just a


513
00:17:30,096 --> 00:17:31,256
couple of the events to give you


514
00:17:31,256 --> 00:17:31,766
an example.


515
00:17:34,756 --> 00:17:36,756
The mediaItem WillChange and the


516
00:17:36,756 --> 00:17:38,536
mediaItem DidChange events fire


517
00:17:38,536 --> 00:17:39,766
when the Now Playing item in the


518
00:17:39,766 --> 00:17:41,386
queue changes, when the first


519
00:17:41,386 --> 00:17:42,586
song you're playing transitions


520
00:17:42,586 --> 00:17:43,326
to the second song.


521
00:17:44,266 --> 00:17:45,646
You can use this to trigger an


522
00:17:45,646 --> 00:17:47,726
update to your UI that shows the


523
00:17:47,726 --> 00:17:48,696
song that's currently playing.


524
00:17:49,186 --> 00:17:53,106
When you actually begin


525
00:17:53,106 --> 00:17:54,616
playback, the playbackState


526
00:17:54,686 --> 00:17:56,096
changes events are fired.


527
00:17:56,266 --> 00:17:57,326
Here we have a will and a did


528
00:17:57,326 --> 00:17:58,686
change event again.


529
00:17:59,616 --> 00:18:01,586
For example, you can know when a


530
00:18:01,586 --> 00:18:03,596
song is loading, when it's


531
00:18:03,596 --> 00:18:04,906
playing, or when it's paused,


532
00:18:05,026 --> 00:18:06,766
and then you would update your


533
00:18:06,766 --> 00:18:07,416
UI appropriately.


534
00:18:08,406 --> 00:18:09,646
This event is going to give you


535
00:18:09,646 --> 00:18:11,076
the old state and then the new


536
00:18:11,076 --> 00:18:11,826
state that it's being


537
00:18:11,826 --> 00:18:12,586
transitioned to.


538
00:18:16,676 --> 00:18:18,486
As the song is playing, you'll


539
00:18:18,486 --> 00:18:20,296
get playback progress change


540
00:18:20,296 --> 00:18:23,786
events, and this event has the


541
00:18:23,786 --> 00:18:25,366
current playback progress as a


542
00:18:25,366 --> 00:18:25,896
percentage.


543
00:18:26,426 --> 00:18:27,476
You can use this to update a


544
00:18:27,476 --> 00:18:28,166
progress UI.


545
00:18:31,576 --> 00:18:32,766
And you're also going to listen


546
00:18:32,766 --> 00:18:34,326
for any media playback errors.


547
00:18:35,206 --> 00:18:37,196
The mediaPlaybackError event


548
00:18:37,196 --> 00:18:37,806
will fire.


549
00:18:39,016 --> 00:18:40,276
You can catch that and then


550
00:18:40,276 --> 00:18:41,496
present the appropriate error


551
00:18:41,496 --> 00:18:42,466
messaging to the user.


552
00:18:42,726 --> 00:18:46,846
So I'd like to bring up Jae back


553
00:18:46,846 --> 00:18:47,396
to the stage.


554
00:18:47,706 --> 00:18:48,676
He's going to take the player we


555
00:18:48,676 --> 00:18:50,616
just built, and we're going to


556
00:18:50,616 --> 00:18:51,466
show you how to use some of


557
00:18:51,466 --> 00:18:53,336
those JavaScript APIs to add


558
00:18:53,726 --> 00:18:55,046
search for the Apple Music


559
00:18:55,046 --> 00:18:56,866
catalog, search within the


560
00:18:56,866 --> 00:18:58,936
iCloud Music Library, and we're


561
00:18:58,936 --> 00:19:00,556
also going to use events to


562
00:19:00,556 --> 00:19:02,356
build a simple progress bar.


563
00:19:03,536 --> 00:19:03,716
Jae?


564
00:19:04,526 --> 00:19:05,516
>> Thanks, DJ.


565
00:19:06,516 --> 00:19:11,686
[ Applause ]


566
00:19:12,186 --> 00:19:13,996
As DJ mentioned, we're going to


567
00:19:13,996 --> 00:19:15,786
take the previous example and


568
00:19:15,786 --> 00:19:17,186
we're going to extend it to add


569
00:19:17,556 --> 00:19:18,446
playlist search.


570
00:19:19,026 --> 00:19:22,116
Now, I've taken the, off stage,


571
00:19:22,116 --> 00:19:23,736
I've removed a lot of the stuff


572
00:19:23,736 --> 00:19:24,716
that we did from the previous


573
00:19:24,716 --> 00:19:26,046
example, but I've left some


574
00:19:26,046 --> 00:19:27,046
things in the page.


575
00:19:27,336 --> 00:19:29,846
I've also included an


576
00:19:29,846 --> 00:19:31,276
application JavaScript file that


577
00:19:31,276 --> 00:19:32,476
we'll be adding our JavaScript


578
00:19:32,476 --> 00:19:33,806
to in a moment, but I wanted to


579
00:19:33,806 --> 00:19:35,296
walk through quickly the HTML


580
00:19:35,296 --> 00:19:35,556
again.


581
00:19:36,976 --> 00:19:38,966
The major change we've done is


582
00:19:38,966 --> 00:19:40,406
we've added an input element for


583
00:19:40,406 --> 00:19:42,896
the user to search as well as 2


584
00:19:43,226 --> 00:19:45,096
DOM containers that we can put


585
00:19:45,096 --> 00:19:46,546
those search results into.


586
00:19:47,176 --> 00:19:48,656
MusicKit JS doesn't offer an


587
00:19:48,656 --> 00:19:50,336
opinion on a library or a


588
00:19:50,336 --> 00:19:51,476
framework that you would be


589
00:19:51,476 --> 00:19:53,336
using with your application, so


590
00:19:53,336 --> 00:19:55,256
for this example, our CSS has


591
00:19:55,256 --> 00:19:56,566
been prebuilt off screen.


592
00:19:56,896 --> 00:19:58,046
We have some template helpers


593
00:19:58,046 --> 00:19:59,036
that we've built in a separate


594
00:19:59,036 --> 00:19:59,786
file as well.


595
00:20:00,706 --> 00:20:02,846
And we'll notice that our markup


596
00:20:02,846 --> 00:20:04,446
looks a little weird on the


597
00:20:04,446 --> 00:20:05,346
left-hand side.


598
00:20:05,856 --> 00:20:06,926
We got a couple of buttons that


599
00:20:06,926 --> 00:20:09,486
are magically floating, and the


600
00:20:09,486 --> 00:20:10,826
artwork is obviously empty.


601
00:20:11,396 --> 00:20:15,106
And this is because MusicKit JS


602
00:20:15,176 --> 00:20:16,756
assumes that if you're


603
00:20:16,756 --> 00:20:18,456
configuring it with the meta


604
00:20:18,456 --> 00:20:20,066
tags, that you want declarative


605
00:20:20,066 --> 00:20:20,886
markup enabled.


606
00:20:21,246 --> 00:20:22,256
When you don't provide that


607
00:20:22,256 --> 00:20:24,156
configuration, it assumes you're


608
00:20:24,156 --> 00:20:25,776
running JavaScript and you don't


609
00:20:25,776 --> 00:20:26,756
want declarative markup.


610
00:20:26,786 --> 00:20:28,856
But we provide a hook for you to


611
00:20:28,856 --> 00:20:30,146
re-enable that with JavaScript.


612
00:20:30,616 --> 00:20:35,486
We can configure MusicKit JS by


613
00:20:35,486 --> 00:20:36,956
listening to the MusicKit loaded


614
00:20:36,956 --> 00:20:37,946
event that's fired on the


615
00:20:37,946 --> 00:20:38,456
document.


616
00:20:38,976 --> 00:20:40,646
This lets us know that MusicKit


617
00:20:40,646 --> 00:20:42,016
JS is ready to be used and


618
00:20:42,016 --> 00:20:43,716
configured and playback can


619
00:20:43,716 --> 00:20:44,076
happen.


620
00:20:44,576 --> 00:20:46,926
We can configure our application


621
00:20:46,926 --> 00:20:48,166
name just like we did with the


622
00:20:48,166 --> 00:20:49,986
meta tags, but we now have an


623
00:20:49,986 --> 00:20:50,806
attribute that says


624
00:20:50,806 --> 00:20:52,226
declarativeMarkup that we can


625
00:20:52,226 --> 00:20:54,756
set to true, which lets MusicKit


626
00:20:54,756 --> 00:20:55,916
JS know that we're running in a


627
00:20:55,916 --> 00:20:57,276
mixed mode and we want those


628
00:20:57,276 --> 00:20:58,526
declarative markup features to


629
00:20:58,526 --> 00:21:00,000
be enabled.


630
00:21:05,636 --> 00:21:07,266
Next, I'm going to add a search


631
00:21:07,266 --> 00:21:07,656
handler.


632
00:21:07,906 --> 00:21:09,566
This is straight JavaScript.


633
00:21:09,686 --> 00:21:10,966
It's not specific to MusicKit


634
00:21:10,966 --> 00:21:12,056
JS, but I did want to walk


635
00:21:12,056 --> 00:21:13,286
through that when the user


636
00:21:13,286 --> 00:21:15,066
presses Enter on the search box


637
00:21:15,366 --> 00:21:16,696
is when we're going to fire our


638
00:21:17,086 --> 00:21:18,506
callback to do the search.


639
00:21:19,046 --> 00:21:23,036
And we can implement that by


640
00:21:23,036 --> 00:21:24,936
using the search method off of


641
00:21:24,936 --> 00:21:26,496
MusicKit's API property.


642
00:21:27,816 --> 00:21:29,286
This will perform the search


643
00:21:29,286 --> 00:21:30,796
against the Apple Music API, and


644
00:21:31,026 --> 00:21:32,976
we can specify any query


645
00:21:32,976 --> 00:21:34,736
parameters that the Apple Music


646
00:21:34,736 --> 00:21:38,186
API accepts with a configuration


647
00:21:38,186 --> 00:21:38,516
object.


648
00:21:39,286 --> 00:21:40,376
So we can specify we want to


649
00:21:40,376 --> 00:21:41,436
search, we want to limit the


650
00:21:41,436 --> 00:21:43,436
search to playlists and that we


651
00:21:43,436 --> 00:21:44,796
want our results to be limited


652
00:21:44,796 --> 00:21:45,786
to 8.


653
00:21:46,856 --> 00:21:48,546
We have our custom templating,


654
00:21:49,796 --> 00:21:51,356
but I want to highlight these 3


655
00:21:51,356 --> 00:21:53,186
lines, which is where we tell


656
00:21:53,186 --> 00:21:55,966
our MusicKit instance to take


657
00:21:55,966 --> 00:21:57,256
the artwork that the user has


658
00:21:57,256 --> 00:21:59,016
clicked on, and we want to set


659
00:21:59,016 --> 00:22:00,286
the playback queue to that


660
00:22:00,286 --> 00:22:01,016
playlist ID.


661
00:22:01,816 --> 00:22:04,026
That returns a promise where we


662
00:22:04,026 --> 00:22:05,636
can call music.play, which will


663
00:22:05,636 --> 00:22:06,896
start playback for the user.


664
00:22:07,066 --> 00:22:08,466
And then, we have our custom


665
00:22:08,466 --> 00:22:09,256
rendering as well.


666
00:22:13,496 --> 00:22:15,196
I perform a search for "a list."


667
00:22:16,126 --> 00:22:18,346
We'll see 8 catalog results from


668
00:22:18,346 --> 00:22:19,766
the Apple Music catalog for A


669
00:22:19,766 --> 00:22:20,466
list playlists.


670
00:22:20,996 --> 00:22:25,946
It would be nice if the same


671
00:22:25,946 --> 00:22:27,586
search could apply to my


672
00:22:27,586 --> 00:22:29,356
personal iCloud library as well.


673
00:22:30,336 --> 00:22:31,936
And we can do that in almost the


674
00:22:31,936 --> 00:22:34,996
exact same manner, except the


675
00:22:34,996 --> 00:22:36,526
search method is off of the


676
00:22:36,526 --> 00:22:38,196
library property instead of the


677
00:22:38,196 --> 00:22:39,126
API property.


678
00:22:39,756 --> 00:22:41,066
This lets MusicKit JS know


679
00:22:41,066 --> 00:22:44,886
you're looking for the cloud


680
00:22:44,966 --> 00:22:45,246
library.


681
00:22:45,246 --> 00:22:47,316
Set playlists and set the same


682
00:22:47,576 --> 00:22:47,926
for 8.


683
00:22:47,956 --> 00:22:49,806
And then, the code looks exactly


684
00:22:49,806 --> 00:22:52,086
the same with setting the queue


685
00:22:52,256 --> 00:22:53,746
and starting playback.


686
00:22:57,096 --> 00:22:58,956
If I perform that same search,


687
00:23:00,496 --> 00:23:02,396
we'll see my iCloud Music


688
00:23:02,396 --> 00:23:04,216
Library results as well as the


689
00:23:04,216 --> 00:23:05,946
catalog library results.


690
00:23:06,366 --> 00:23:10,866
And I can click, and we get


691
00:23:10,866 --> 00:23:12,326
playback of the cloud library


692
00:23:12,326 --> 00:23:12,896
item as well.


693
00:23:14,516 --> 00:23:17,736
[ Music ]


694
00:23:18,236 --> 00:23:19,706
Looking at the Now Playing


695
00:23:19,706 --> 00:23:21,096
screen, or the Now Playing


696
00:23:21,096 --> 00:23:22,616
information at the bottom makes


697
00:23:22,616 --> 00:23:23,996
me realize that it's missing a


698
00:23:23,996 --> 00:23:25,256
progress indicator to let me


699
00:23:25,256 --> 00:23:26,856
know how far through the current


700
00:23:26,856 --> 00:23:27,806
playing track we are.


701
00:23:28,346 --> 00:23:30,576
And we can add something like


702
00:23:30,576 --> 00:23:33,636
that by simply listening for the


703
00:23:33,636 --> 00:23:35,206
playbackProgress DidChange event


704
00:23:35,476 --> 00:23:38,000
that MusicKit JS provides.


705
00:23:42,296 --> 00:23:43,696
Here we add an event listener to


706
00:23:43,696 --> 00:23:45,686
the MusicKit instance, listen


707
00:23:45,686 --> 00:23:47,136
for playbackProgress DidChange,


708
00:23:47,356 --> 00:23:48,636
and have a custom renderer to


709
00:23:48,636 --> 00:23:51,166
render progress when we get that


710
00:23:54,336 --> 00:23:54,526
event.


711
00:23:54,646 --> 00:23:56,186
So we can look for A list again.


712
00:23:56,716 --> 00:23:59,226
And this time, when I play that


713
00:23:59,226 --> 00:24:01,126
song, we see our custom progress


714
00:24:01,126 --> 00:24:03,000
bar rendering.


715
00:24:07,946 --> 00:24:09,076
Now, there's a lot more we could


716
00:24:09,076 --> 00:24:10,996
get into with MusicKit JS, but


717
00:24:10,996 --> 00:24:12,556
I'd like to bring DJ back up to


718
00:24:12,556 --> 00:24:13,566
kind of summarize what we've


719
00:24:13,566 --> 00:24:15,356
gone over today.


720
00:24:16,516 --> 00:24:19,776
[ Applause ]


721
00:24:20,276 --> 00:24:21,946
>> You can now bring great music


722
00:24:21,946 --> 00:24:23,226
experiences to your websites.


723
00:24:24,416 --> 00:24:25,386
You can use the declarative


724
00:24:25,386 --> 00:24:27,896
markup to quickly add simple


725
00:24:27,896 --> 00:24:30,736
functionality or you can use the


726
00:24:30,736 --> 00:24:32,356
JavaScript APIs directly to


727
00:24:32,356 --> 00:24:33,306
build a more advanced


728
00:24:33,306 --> 00:24:33,856
application.


729
00:24:34,466 --> 00:24:35,926
We're looking forward to seeing


730
00:24:35,926 --> 00:24:36,786
what you can build with it.


731
00:24:37,396 --> 00:24:38,426
We have some great documentation


732
00:24:38,426 --> 00:24:40,936
available, and we have a lab


733
00:24:41,416 --> 00:24:42,196
coming up right after this


734
00:24:42,196 --> 00:24:43,986
session in Technology Lab 3.


735
00:24:44,716 --> 00:24:45,766
Happy to answer any questions


736
00:24:45,766 --> 00:24:46,666
you have.


737
00:24:47,416 --> 00:24:48,006
Thank you.


738
00:24:49,508 --> 00:24:51,508
[ Applause ]

