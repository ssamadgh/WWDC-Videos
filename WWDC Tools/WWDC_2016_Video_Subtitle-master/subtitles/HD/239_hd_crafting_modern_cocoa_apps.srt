1
00:00:07,516 --> 00:00:19,500
[ Music ]


2
00:00:29,516 --> 00:00:34,816
[ Applause ]


3
00:00:35,316 --> 00:00:38,116
>> Hello, welcome to
Crafting Modern Cocoa Apps.


4
00:00:38,516 --> 00:00:40,696
My name's Corbin Dunn, and
I'm going to give this talk


5
00:00:40,696 --> 00:00:41,966
with my colleague Jeff.


6
00:00:42,106 --> 00:00:43,686
We're both AppKit
software engineers.


7
00:00:44,626 --> 00:00:45,826
So let's jump right into it.


8
00:00:46,046 --> 00:00:47,176
What are we going
to talk about today?


9
00:00:47,176 --> 00:00:48,876
We have a whole bunch
of subjects.


10
00:00:49,216 --> 00:00:50,906
We're going to talk about
getting a modern look,


11
00:00:51,406 --> 00:00:53,466
drag and drop and how
to do it correctly,


12
00:00:53,466 --> 00:00:55,466
container view controls,
table views,


13
00:00:56,066 --> 00:00:59,316
using some system appearances,
designing with storyboards


14
00:00:59,456 --> 00:01:01,106
and some other cool
Mac features.


15
00:01:01,416 --> 00:01:03,616
Tons of stuff which
we're going to highlight


16
00:01:03,616 --> 00:01:05,176
with a quick demo
app that we have


17
00:01:05,266 --> 00:01:06,566
that we see in this screen shot.


18
00:01:07,306 --> 00:01:08,656
How it's alive in new features


19
00:01:08,656 --> 00:01:10,206
or existing features
they can adopt.


20
00:01:11,846 --> 00:01:16,446
And all these technologies, most
everything you can use already


21
00:01:16,446 --> 00:01:19,386
on Mac OS 10.10 or
10.11, anything new


22
00:01:19,386 --> 00:01:22,546
to 10.12 we will specifically
highlight and point out.


23
00:01:23,216 --> 00:01:25,656
And this demo app we
encourage you to download it.


24
00:01:25,656 --> 00:01:27,966
It's not quite available
yet but it will be soon,


25
00:01:27,966 --> 00:01:30,956
and it will be associated
with the talk.


26
00:01:31,156 --> 00:01:33,796
So let's jump right
into it and talk


27
00:01:33,796 --> 00:01:37,226
about creating a modern
look with modern views


28
00:01:37,226 --> 00:01:39,646
and what you can do there.


29
00:01:39,816 --> 00:01:43,566
So modern look means a modern
window and a modern toolbar


30
00:01:43,896 --> 00:01:45,606
such as shown in
this demo app here.


31
00:01:46,696 --> 00:01:49,836
One thing you want to be
doing is using a full size


32
00:01:49,896 --> 00:01:50,776
content view.


33
00:01:51,416 --> 00:01:54,616
The full size content view
allows your content view


34
00:01:54,616 --> 00:01:57,436
to extend underneath
the toolbar area


35
00:01:57,586 --> 00:01:59,156
that I'm highlighting
here in white.


36
00:01:59,686 --> 00:02:03,346
And that means that full size
content view will have its area


37
00:02:03,406 --> 00:02:06,106
automatically blurred by the
titlebar and toolbar area


38
00:02:06,296 --> 00:02:07,746
without you having
to do anything.


39
00:02:08,205 --> 00:02:11,846
Using a full size content
view is really easy.


40
00:02:12,106 --> 00:02:13,586
It's just a window style mask.


41
00:02:13,756 --> 00:02:16,206
You can use the
.fullSizeContentView bit


42
00:02:16,206 --> 00:02:17,126
on it to include it.


43
00:02:18,096 --> 00:02:20,746
Or if you're using Interface
Builder you can just check a


44
00:02:20,746 --> 00:02:23,626
check box, full size
content view, and you get it.


45
00:02:24,676 --> 00:02:28,536
So if you're using the full
size content view you may need


46
00:02:28,536 --> 00:02:31,566
to offset your content
underneath it.


47
00:02:32,246 --> 00:02:34,916
For instance, let's say
that we have something


48
00:02:34,916 --> 00:02:37,536
that we want underneath
that titlebar/toolbar area.


49
00:02:38,366 --> 00:02:42,426
We might want to put like
a label or something there.


50
00:02:43,806 --> 00:02:45,896
If we put that label
there how do we get it


51
00:02:45,896 --> 00:02:48,996
under that titlebar/toolbar
area which might have, say,


52
00:02:48,996 --> 00:02:52,626
a dynamic height that would
change, and we want that label


53
00:02:52,626 --> 00:02:55,176
to not have a hard
coded Y offset


54
00:02:55,176 --> 00:02:56,966
because hard coding
offsets would be really bad.


55
00:02:57,546 --> 00:03:01,766
So what we have is we have the
content layout rec property


56
00:03:01,766 --> 00:03:02,616
on NSWindow.


57
00:03:03,116 --> 00:03:06,596
This is a key value observable,
a KVO observable property


58
00:03:07,016 --> 00:03:07,996
which you can use to find


59
00:03:07,996 --> 00:03:10,316
out whenever the
contentLayoutRect the area


60
00:03:10,316 --> 00:03:11,616
in turquoise changes.


61
00:03:12,156 --> 00:03:14,186
So you can go and place your
view directly underneath the


62
00:03:14,296 --> 00:03:16,666
titlebar/toolbar based on that.


63
00:03:17,836 --> 00:03:20,516
But we also encourage you
to be using auto layout.


64
00:03:20,616 --> 00:03:23,326
And if you're using auto
layout you can use the


65
00:03:23,326 --> 00:03:26,446
contentLayoutGuide which
is a property on NSWindow.


66
00:03:27,526 --> 00:03:31,106
For instance, inside of your
NSViewController subclass you


67
00:03:31,106 --> 00:03:33,726
might be overriding
updateViewConstraints,


68
00:03:34,206 --> 00:03:35,456
and you want to create
a constraint.


69
00:03:36,026 --> 00:03:38,296
You grab the window's
contentLayoutGuide,


70
00:03:39,196 --> 00:03:42,286
tick the top anchor for it,
and you have your text field,


71
00:03:42,776 --> 00:03:45,416
and you create a constraint


72
00:03:45,566 --> 00:03:49,066
to that text field's top
anchor also and activate it.


73
00:03:49,066 --> 00:03:53,076
And if you do that, that text
view will automatically be below


74
00:03:53,076 --> 00:03:54,646
that titlebar/toolbar area


75
00:03:54,896 --> 00:03:56,336
without you having
to do anything.


76
00:03:56,686 --> 00:03:59,526
It's very simple to do.


77
00:03:59,766 --> 00:04:02,566
Next for a modern app
you might be wanting


78
00:04:02,566 --> 00:04:04,596
to use a streamlined toolbar.


79
00:04:05,116 --> 00:04:07,656
So here's a screen shot
of a normal application.


80
00:04:08,136 --> 00:04:11,436
The things to notice here is
it's got an explicit titlebar


81
00:04:11,626 --> 00:04:14,396
or, sorry, it's got
explicit title up at the top,


82
00:04:14,846 --> 00:04:16,565
and you would have an icon there


83
00:04:16,565 --> 00:04:18,565
if the app actually had
an icon for this document.


84
00:04:19,586 --> 00:04:23,516
If I go to using a streamlined
toolbar that title disappears,


85
00:04:24,436 --> 00:04:26,486
the toolbar is pushed
up a little bit,


86
00:04:27,186 --> 00:04:29,856
and the window buttons,
the close button, etcetera,


87
00:04:30,726 --> 00:04:33,266
are directly in line with
that titlebar/toolbar area.


88
00:04:34,666 --> 00:04:37,016
To do this it's really simple.


89
00:04:37,266 --> 00:04:40,646
And all you have to do is set
the title visibility property


90
00:04:40,956 --> 00:04:43,826
to .hidden, and that
title will be hidden,


91
00:04:43,826 --> 00:04:46,236
the toolbar will be pushed up,
and everything will be in line.


92
00:04:46,236 --> 00:04:47,996
When do you want to do this?


93
00:04:47,996 --> 00:04:49,776
You probably want to do this
for applications that are kind


94
00:04:49,776 --> 00:04:53,766
of like shoebox applications,
for instance maps, calendar,


95
00:04:54,226 --> 00:04:56,826
system preferences, things
of that nature that are kind


96
00:04:56,826 --> 00:05:03,456
of like one window applications
are good for this type of look.


97
00:05:03,676 --> 00:05:06,116
So what other things
could you want to do?


98
00:05:06,116 --> 00:05:08,736
Well, you might want
to complement


99
00:05:08,906 --> 00:05:12,666
that titlebar/toolbar area with
accessory view controllers.


100
00:05:13,306 --> 00:05:15,176
For instance, you might want


101
00:05:15,176 --> 00:05:18,056
to have an accessory view
controller that's right below


102
00:05:18,056 --> 00:05:21,426
the titlebar, and by
doing this you want it


103
00:05:21,496 --> 00:05:22,666
to automatically be blurred


104
00:05:22,666 --> 00:05:24,066
without you having
to do anything.


105
00:05:24,706 --> 00:05:26,686
The size to be automatically
changing


106
00:05:26,686 --> 00:05:29,656
as the window is resized without
you having to do anything.


107
00:05:30,166 --> 00:05:30,976
So how do you do this?


108
00:05:32,106 --> 00:05:32,886
It's really simple.


109
00:05:33,006 --> 00:05:35,016
We have a view controller
subclass,


110
00:05:35,156 --> 00:05:38,526
called NSTitlebar
AccessoryViewController you can


111
00:05:38,526 --> 00:05:40,076
set the view to that
view controller.


112
00:05:40,796 --> 00:05:43,046
In addition, it exposes
a layout attribute.


113
00:05:43,046 --> 00:05:46,836
So the layout attribute could be
set to .bottom which means, hey,


114
00:05:46,836 --> 00:05:50,096
this accessory is going to be on
the bottom of the titlebar area.


115
00:05:50,096 --> 00:05:53,596
And notice the text appeared
below it because, again,


116
00:05:53,596 --> 00:05:56,186
we're using the proper
content layout wrapped


117
00:05:56,186 --> 00:05:58,466
in content layout guide
without having to do anything.


118
00:05:59,016 --> 00:06:03,636
In addition to the bottom, the
layout attribute could be set


119
00:06:03,636 --> 00:06:05,586
to leading or trailing.


120
00:06:05,726 --> 00:06:09,276
And this means you get a
accessory view controller


121
00:06:09,276 --> 00:06:13,216
up in your titlebar area
such as a register me button


122
00:06:13,216 --> 00:06:14,896
or something else that
you might want up there.


123
00:06:15,936 --> 00:06:19,106
New to macOs 10.12 is the
ability to use leading


124
00:06:19,106 --> 00:06:22,096
and trailing as opposed
to using left and right


125
00:06:22,166 --> 00:06:23,316
which were published before.


126
00:06:24,106 --> 00:06:25,626
We prefer you to use
leading and trailing


127
00:06:25,626 --> 00:06:27,926
because it allows your
window to work better


128
00:06:28,226 --> 00:06:30,746
when you're using a right
to left localization.


129
00:06:31,176 --> 00:06:34,126
So, for instance, if I'm just
running this in pseudo right


130
00:06:34,126 --> 00:06:35,686
to left mode you can see


131
00:06:35,686 --> 00:06:38,936
that that accessory view
controller automatically flips


132
00:06:38,936 --> 00:06:43,636
to the other side without
having to do anything.


133
00:06:43,736 --> 00:06:45,736
Next we, the system,


134
00:06:45,736 --> 00:06:48,466
may actually be adding our
own accessory view controllers


135
00:06:48,566 --> 00:06:49,426
to your window.


136
00:06:49,596 --> 00:06:53,146
For instance, we might be using
it for creation of tab windows


137
00:06:53,146 --> 00:06:54,876
where we aggregate
multiple windows


138
00:06:55,156 --> 00:06:56,976
into one sort of virtual window.


139
00:06:58,286 --> 00:07:01,426
So how do we do tab windows, and
what do you do as a developer?


140
00:07:01,976 --> 00:07:03,246
You don't really
have to do anything.


141
00:07:03,506 --> 00:07:07,106
If you order a window front what
we do is we look for windows


142
00:07:07,106 --> 00:07:08,716
that are similar to that window.


143
00:07:09,366 --> 00:07:10,846
And by similar I mean we look


144
00:07:10,846 --> 00:07:12,856
for the tabbing identifier
property.


145
00:07:13,116 --> 00:07:16,136
If it has the same tabbing
identifier we're going to prefer


146
00:07:16,136 --> 00:07:19,226
to aggregate those windows
into one single tabbed window.


147
00:07:20,316 --> 00:07:22,526
The windows themselves are all
considered visible even though


148
00:07:22,526 --> 00:07:23,616
it might be in a hidden tab.


149
00:07:24,366 --> 00:07:26,596
But we actually hide them
with respect to core graphics.


150
00:07:27,076 --> 00:07:29,556
If you're using NSDocument,
a lot of the things


151
00:07:29,556 --> 00:07:32,856
such as the plus button inside
the tab bar work automatically


152
00:07:32,856 --> 00:07:34,226
without you having
to support anything.


153
00:07:34,906 --> 00:07:37,026
But if you aren't using
NSDocument you can implement a


154
00:07:37,026 --> 00:07:39,406
responder chain method
new window for tab


155
00:07:39,476 --> 00:07:42,516
to create a new document or a
new window on the plus button.


156
00:07:42,996 --> 00:07:46,356
For more information check out
the, What's New in Cocoa talk


157
00:07:46,976 --> 00:07:51,606
to see more details on this.


158
00:07:51,856 --> 00:07:53,626
For more information
on the titlebars,


159
00:07:53,796 --> 00:07:56,426
the accessory view controllers
and how they interact


160
00:07:56,426 --> 00:07:59,066
with full screen, I highly
recommend seeing the talk


161
00:07:59,066 --> 00:08:02,306
from 2015 on improving the
full screen window experience.


162
00:08:02,306 --> 00:08:08,436
Next let's talk a little
bit about core animation.


163
00:08:09,176 --> 00:08:10,636
So what is core animation?


164
00:08:10,726 --> 00:08:14,266
Well, it's a graphics
rendering engine that does a lot


165
00:08:14,266 --> 00:08:17,416
of the work on the
GPU as opposed to CPU.


166
00:08:17,836 --> 00:08:21,576
So everything can be
very fast for scrolling.


167
00:08:22,256 --> 00:08:24,416
We can do very fast
and smooth animations.


168
00:08:25,446 --> 00:08:27,876
And the base component
of this is a CA layer.


169
00:08:28,476 --> 00:08:32,635
How we actually create
your layout


170
00:08:32,635 --> 00:08:35,635
and your views using
layers or views themselves.


171
00:08:35,635 --> 00:08:38,716
So this is an example
animation where you might have


172
00:08:38,716 --> 00:08:41,525
like a background
layer, a middle layer,


173
00:08:41,525 --> 00:08:43,676
and then a front layer
actually doing an animation.


174
00:08:44,226 --> 00:08:47,166
So you want to compose your
views of multiple subviews


175
00:08:47,696 --> 00:08:48,816
to create the final look.


176
00:08:49,376 --> 00:08:53,406
Let's take a look at some of
the properties in core animation


177
00:08:53,406 --> 00:08:56,896
or CALayer that allow
you to set the contents


178
00:08:56,896 --> 00:08:58,046
of what you see on screen.


179
00:08:59,486 --> 00:09:02,006
Speaking of contents, CALayer
has a contents property.


180
00:09:02,346 --> 00:09:05,796
The contents property can be
an NS image or a CG image ref


181
00:09:05,936 --> 00:09:07,906
that actually represents
what you see


182
00:09:08,326 --> 00:09:09,626
for that layer's contents.


183
00:09:10,326 --> 00:09:12,676
But you could also set
other properties on CALayer


184
00:09:12,676 --> 00:09:15,666
such as the background
color, the border color,


185
00:09:15,666 --> 00:09:18,126
the border width,
the corner radius.


186
00:09:18,456 --> 00:09:20,896
There are more properties you
can take a look at CALayer


187
00:09:20,896 --> 00:09:23,816
to see the other things that are
available and how to control it.


188
00:09:24,086 --> 00:09:25,986
So these are some of
the intrinsic basic ways


189
00:09:26,036 --> 00:09:29,616
to actually set how
a CALayer will look.


190
00:09:29,826 --> 00:09:34,376
And we're going to talk a little
bit more about this in a second.


191
00:09:34,486 --> 00:09:36,906
But what you should be doing
is you should be using a layer


192
00:09:36,906 --> 00:09:37,886
backed view.


193
00:09:38,556 --> 00:09:42,686
So you're going to be using
NSViews set once layer to yes


194
00:09:43,066 --> 00:09:44,706
which I'll show in a
second how to do that,


195
00:09:45,366 --> 00:09:47,556
and that will implicitly
create a layer for you.


196
00:09:48,286 --> 00:09:51,046
And that means that you can
provide the layer contents via


197
00:09:51,046 --> 00:09:51,746
draw method.


198
00:09:52,736 --> 00:09:55,786
But if you're using layers we'll
actually have two more important


199
00:09:55,786 --> 00:09:58,366
methods, updateLayer
and wantsUpdateLayer.


200
00:09:59,066 --> 00:10:01,366
And in just a second I'm going
to show how these come into play


201
00:10:01,366 --> 00:10:02,826
and when you'll want
to use them.


202
00:10:03,466 --> 00:10:07,206
So what do we actually recommend
for using core animation


203
00:10:07,206 --> 00:10:09,236
or when should you use core
animation and layer backing?


204
00:10:09,856 --> 00:10:11,826
Well, we recommend that
you layer back your windows


205
00:10:12,036 --> 00:10:13,016
content view.


206
00:10:13,896 --> 00:10:17,446
And when you layer back one
particular view all the children


207
00:10:17,446 --> 00:10:19,476
will automatically get
layer backed for you, too,


208
00:10:19,736 --> 00:10:21,736
without you have
to opt into a layer


209
00:10:21,736 --> 00:10:23,796
for every individual child view.


210
00:10:25,056 --> 00:10:26,996
We recommend that
you layer back views


211
00:10:27,546 --> 00:10:30,896
and you not use CALayers
directly added as a sublayer


212
00:10:31,246 --> 00:10:34,026
because that takes care of some
things automatically for you


213
00:10:34,536 --> 00:10:38,456
such as when a layer is
shown on a retina display.


214
00:10:38,756 --> 00:10:44,296
We'll do some more setup
that takes care of the work.


215
00:10:44,446 --> 00:10:46,106
Turning on layer
backing is really simple.


216
00:10:46,176 --> 00:10:49,286
On the content view of your
window you can set wants layer


217
00:10:49,286 --> 00:10:50,106
to true and code.


218
00:10:50,106 --> 00:10:53,996
Or, of course, you can just go
ahead inside interface folder


219
00:10:53,996 --> 00:10:56,446
and check the checkbox
for Core Animation Layer


220
00:10:56,726 --> 00:11:00,196
on a top most view.


221
00:11:00,386 --> 00:11:02,606
So an important property


222
00:11:02,856 --> 00:11:07,046
on layer backed views is the
layerContents RedrawPolicy.


223
00:11:07,836 --> 00:11:11,236
You want to set this
.onSetNeedsDisplay


224
00:11:11,806 --> 00:11:14,196
which is not the
default value for NSView.


225
00:11:15,096 --> 00:11:16,306
What this means is you


226
00:11:16,306 --> 00:11:19,736
as a developer whenever you
want the contents of your layer


227
00:11:19,736 --> 00:11:23,266
or the view to change you
have to call SetNeedsDisplay.


228
00:11:24,156 --> 00:11:25,736
This is slightly
different semantics


229
00:11:25,736 --> 00:11:27,436
in the way normal
views would work


230
00:11:27,656 --> 00:11:30,016
where they might actually
redisplay as they're moving


231
00:11:30,016 --> 00:11:32,966
across changing a frame origin.


232
00:11:33,056 --> 00:11:36,496
So it's something you need
to explicitly opt into,


233
00:11:36,496 --> 00:11:39,166
and it's better for performance
particularly with animations.


234
00:11:39,216 --> 00:11:44,026
So how do you actually get
contents into your layer?


235
00:11:44,876 --> 00:11:46,046
So let's say your view is dirty.


236
00:11:46,336 --> 00:11:47,546
You mark SetNeedsDisplay.


237
00:11:48,246 --> 00:11:52,116
And what we do is we
ask your view, hey,


238
00:11:52,556 --> 00:11:54,176
what do you do for
wantsUpdateLayer?


239
00:11:54,466 --> 00:11:56,186
What's your answer
for wantsUpdateLayer?


240
00:11:56,186 --> 00:11:57,736
And here we fork.


241
00:11:57,976 --> 00:11:58,726
If you say yes


242
00:11:58,726 --> 00:12:01,846
for wantsUpdateLayer then we're
going to call updateLayer.


243
00:12:03,326 --> 00:12:05,776
If you say no we're
going to call drawRect.


244
00:12:06,146 --> 00:12:07,436
So this is a complete fork.


245
00:12:07,726 --> 00:12:08,566
It's an either/or.


246
00:12:10,256 --> 00:12:12,936
Then you may be wondering, well,


247
00:12:12,936 --> 00:12:15,876
when should I use
updateLayer versus drawRect.


248
00:12:17,386 --> 00:12:19,706
This gets back to what I was
showing about core animation


249
00:12:19,896 --> 00:12:21,236
and NSLayer properties.


250
00:12:22,016 --> 00:12:26,836
So if you can represent your
views representation directly


251
00:12:26,836 --> 00:12:30,106
by setting CALayer properties
then you probably want


252
00:12:30,106 --> 00:12:31,136
to use updateLayer.


253
00:12:31,546 --> 00:12:32,896
It's going to be more efficient.


254
00:12:33,436 --> 00:12:35,236
So if you can set
the layer contents,


255
00:12:35,556 --> 00:12:37,716
layer background color,
prefer to do that.


256
00:12:38,376 --> 00:12:40,566
If you can't, then that's
the point where you want


257
00:12:40,566 --> 00:12:42,946
to override draw or drawRect


258
00:12:43,766 --> 00:12:47,676
and actually do your manual
drawing inside of the subclass.


259
00:12:48,186 --> 00:12:50,426
The thing about doing
this is that every view


260
00:12:50,426 --> 00:12:53,056
which implements drawRect
will get its own unique little


261
00:12:53,056 --> 00:12:55,246
backing score which you
can think of as an image.


262
00:12:55,416 --> 00:12:58,146
And so if you have a lot of
those it might be expensive


263
00:12:58,456 --> 00:12:59,416
in particular for memory.


264
00:12:59,926 --> 00:13:05,796
Let's take a quick look at an
example of using update layer


265
00:13:05,796 --> 00:13:06,816
and how you would use it.


266
00:13:07,736 --> 00:13:09,896
So first of all you'll
override wantsUpdateLayer,


267
00:13:10,366 --> 00:13:12,916
say that you want to get
an updateLayer callback


268
00:13:12,916 --> 00:13:14,536
by responding with a true.


269
00:13:15,326 --> 00:13:17,316
And then you're going to get
a callback to update layer


270
00:13:17,316 --> 00:13:18,906
where you can actually
set the layer properties.


271
00:13:19,176 --> 00:13:22,266
So we access the view's
property, self.layer contents


272
00:13:22,686 --> 00:13:24,106
and the self.layer
backgroundColor


273
00:13:24,106 --> 00:13:25,896
or whatever other
things you want to set,


274
00:13:25,896 --> 00:13:27,386
and you set it at this time.


275
00:13:27,966 --> 00:13:34,826
So that was talking about modern
views and creating a modern look


276
00:13:34,826 --> 00:13:35,836
for the titlebar/toolbar.


277
00:13:36,186 --> 00:13:39,426
Let's talk about drag and drop
and do some event tracking.


278
00:13:40,576 --> 00:13:42,426
So modern drag and drop,


279
00:13:43,346 --> 00:13:46,646
what you should be doing is
adopting drag flocking as shown


280
00:13:46,646 --> 00:13:47,666
in this video right here.


281
00:13:48,256 --> 00:13:51,636
Drag flocking is where each
individual item will move


282
00:13:51,636 --> 00:13:55,046
independently and flock
together or unflock together.


283
00:13:55,046 --> 00:13:58,326
And when you let go of the mouse
they'll actually all flock back


284
00:13:58,396 --> 00:14:00,036
to where their original
location was.


285
00:14:01,396 --> 00:14:05,146
To use drag flocking you
just use NSViews method


286
00:14:05,416 --> 00:14:08,366
beginDraggingSession,
and you pass an array


287
00:14:08,726 --> 00:14:11,816
of the actual items that you
want to have be dragged around.


288
00:14:12,566 --> 00:14:14,256
It's very simple to do.


289
00:14:15,466 --> 00:14:18,446
For more complex
controls like a table view


290
00:14:18,756 --> 00:14:21,316
or collection view we
provide delegate methods


291
00:14:21,316 --> 00:14:22,456
for you to adopt these.


292
00:14:22,816 --> 00:14:25,236
So for table view you should
really be preferring the


293
00:14:25,236 --> 00:14:25,916
delegate method.


294
00:14:26,446 --> 00:14:28,466
tableView pasteboardWriter
ForRow


295
00:14:28,936 --> 00:14:32,036
where it can provide an
individual NSPasteboard writing


296
00:14:32,036 --> 00:14:35,196
item for every item in a table
view that's being dragged.


297
00:14:35,686 --> 00:14:39,266
As opposed to the older
method, tableView writeRowsWith


298
00:14:39,636 --> 00:14:42,066
to a pasteboard where you
would have written everything


299
00:14:42,066 --> 00:14:43,596
in one go to the pasteboard.


300
00:14:45,516 --> 00:14:50,426
Similarly, collection view
has two delegate methods


301
00:14:50,426 --> 00:14:51,766
that look very similar to that.


302
00:14:52,096 --> 00:14:54,096
And for collection view
you should also prefer the


303
00:14:54,096 --> 00:14:56,566
pasteboardWriter
ForItemAt version


304
00:14:56,566 --> 00:14:57,966
as opposed to the other version.


305
00:14:58,546 --> 00:15:03,926
So with drag flocking new to
macOS 10.12 is the support


306
00:15:03,926 --> 00:15:05,616
for drag file promises.


307
00:15:06,076 --> 00:15:08,176
This may be a reason why you
weren't using drag flocking


308
00:15:08,396 --> 00:15:09,266
up until this point.


309
00:15:10,016 --> 00:15:12,036
And you can use NSFile
PromiseReceiver


310
00:15:12,036 --> 00:15:14,736
and NSFile PromiseProvider
to do reading


311
00:15:14,736 --> 00:15:16,066
and writing of file promises.


312
00:15:16,766 --> 00:15:18,586
Take a look at the talk,
What's New In Cocoa


313
00:15:18,586 --> 00:15:23,376
for more information and
more details on this.


314
00:15:23,586 --> 00:15:25,826
So let's take a look
at event tracking.


315
00:15:25,916 --> 00:15:27,516
And let's say you
have your window here.


316
00:15:27,976 --> 00:15:30,006
And let's say it has a
button up at the top.


317
00:15:30,006 --> 00:15:31,896
So you have this button.


318
00:15:32,326 --> 00:15:35,566
And what you want to happen
is that when you click


319
00:15:35,566 --> 00:15:38,736
on that button down and up it
works like a normal button.


320
00:15:38,786 --> 00:15:41,266
You will do some action
like showing a popover.


321
00:15:42,606 --> 00:15:45,866
But you also want to be aware
you click on that button,


322
00:15:46,146 --> 00:15:49,336
and if you actually drag the
mouse it starts a window drag.


323
00:15:49,996 --> 00:15:52,956
So how to get both those
behaviors together in a proper,


324
00:15:52,956 --> 00:15:55,976
modern way that works well
with modern system features?


325
00:15:56,366 --> 00:15:59,626
Well, first of all let's
talk about event tracking


326
00:15:59,626 --> 00:16:01,226
and how you'll track
events to do this.


327
00:16:01,876 --> 00:16:04,986
And this window has a method
track events matching mask


328
00:16:05,106 --> 00:16:06,646
with a timeout mode handler.


329
00:16:07,106 --> 00:16:09,106
And the handler is
a block callback.


330
00:16:10,066 --> 00:16:12,826
We prefer that you use this
as opposed to the older method


331
00:16:12,886 --> 00:16:16,776
on NSApplication which was
nextEvent matchingMask.


332
00:16:17,576 --> 00:16:19,616
With the older method you
would create your own loop.


333
00:16:20,316 --> 00:16:22,776
With the newer method you
just get a block callback


334
00:16:22,776 --> 00:16:24,166
to do your work.


335
00:16:25,836 --> 00:16:28,306
Taking a look at a
block callback let's say


336
00:16:28,306 --> 00:16:31,456
in that button we subclass
and override mouseDown.


337
00:16:33,076 --> 00:16:34,196
The first thing we're going


338
00:16:34,196 --> 00:16:38,076
to do inside this mouseDown
is call window track events.


339
00:16:38,146 --> 00:16:39,596
We want to track
all of the events


340
00:16:39,596 --> 00:16:41,776
for the drag and
the leftMouseUp.


341
00:16:42,476 --> 00:16:46,676
If the user did a click,
just a down and back up,


342
00:16:47,146 --> 00:16:49,546
then we're going to just be
like, oh, we're going to stop


343
00:16:49,876 --> 00:16:52,406
and we're going to say,
oh, we're going to call yes


344
00:16:52,406 --> 00:16:55,076
for super because that way
everything will work normal


345
00:16:55,076 --> 00:16:55,996
like an NS button.


346
00:16:56,916 --> 00:16:58,226
But here's the extra part.


347
00:16:58,506 --> 00:17:01,396
Let's say you click and
you drag, and if you click


348
00:17:01,396 --> 00:17:03,626
and drag inside this
button we're going to figure


349
00:17:03,626 --> 00:17:07,626
out if you went far enough, if
you went far enough we're going


350
00:17:07,705 --> 00:17:10,626
to pass off to the window
to do a performDrag.


351
00:17:12,346 --> 00:17:16,266
And so what that means is when
you pass off to the performDrag


352
00:17:16,266 --> 00:17:19,266
of the window the window and
the system is going to take


353
00:17:19,266 --> 00:17:20,925
over dragging the
window at that point.


354
00:17:21,945 --> 00:17:24,256
You should not be dragging
and moving a window


355
00:17:24,256 --> 00:17:26,646
by calling set frame again
and again on a window.


356
00:17:27,646 --> 00:17:30,676
If you pass off to the system
as soon as you pass it off,


357
00:17:30,896 --> 00:17:35,036
if your application hangs,
then that window will continue


358
00:17:35,036 --> 00:17:37,936
to be moveable even if your
application is spinning.


359
00:17:38,546 --> 00:17:40,866
In addition, other
system features will work


360
00:17:41,366 --> 00:17:44,426
such as space switching,
the spaces bar will drop


361
00:17:44,476 --> 00:17:46,156
down when you move to
the top of the window,


362
00:17:46,666 --> 00:17:48,086
window snapping,
window alignment.


363
00:17:48,746 --> 00:17:50,256
Any other new system
features we add


364
00:17:50,256 --> 00:17:52,306
with window movement
will automatically work


365
00:17:52,476 --> 00:17:53,636
without you having
to do anything.


366
00:17:54,366 --> 00:17:57,386
So we encourage you to
pass off to the system


367
00:17:57,386 --> 00:17:58,366
by calling performDrag.


368
00:17:59,016 --> 00:18:03,286
So that was talking
about drag and drop,


369
00:18:03,286 --> 00:18:04,576
a little bit about
event handling.


370
00:18:04,816 --> 00:18:07,846
Let's talk about container
view controls and how


371
00:18:07,846 --> 00:18:08,976
to handle those properly.


372
00:18:09,976 --> 00:18:12,586
So container view controls we
should be using the view based


373
00:18:12,586 --> 00:18:13,656
table view at this point.


374
00:18:14,146 --> 00:18:16,486
And you do that by using the
delegate method table view view


375
00:18:16,486 --> 00:18:20,586
40, or inside of an interface
builder you can set things


376
00:18:21,126 --> 00:18:23,116
up directly in interface
builder itself.


377
00:18:23,646 --> 00:18:27,306
And why you want to do it is
so you can get what we saw


378
00:18:27,306 --> 00:18:30,336
on that video new features
such as swipe to delete


379
00:18:30,606 --> 00:18:32,786
which only exists in the
view base table view.


380
00:18:33,376 --> 00:18:36,196
To do the swipe to
delete is very simple.


381
00:18:36,616 --> 00:18:39,486
There's a table view
method, row actions for row


382
00:18:39,486 --> 00:18:42,516
on a particular edge, the left
or the right edge or, sorry,


383
00:18:42,586 --> 00:18:43,776
leading or trailing edge.


384
00:18:44,006 --> 00:18:46,706
And you can return an
array of one or more


385
00:18:46,706 --> 00:18:48,506
or a zero or more row actions.


386
00:18:49,026 --> 00:18:52,476
In the NSTableView
row action allows you


387
00:18:52,476 --> 00:18:56,586
to create a string value for
what the title is of the button


388
00:18:57,236 --> 00:19:00,776
and a handler to actually
do the code that happens


389
00:19:00,776 --> 00:19:03,516
when the user clicks on the
button or swipes far enough


390
00:19:03,516 --> 00:19:07,426
to actually invoke it.


391
00:19:07,706 --> 00:19:11,516
Next let's talk about ScrollView
and that complex control.


392
00:19:11,996 --> 00:19:14,106
So for using all these
technologies we talked


393
00:19:14,106 --> 00:19:17,306
about let's say that we
take the ScrollView --


394
00:19:17,306 --> 00:19:21,076
or let's say we take the window
and set the window property,


395
00:19:21,216 --> 00:19:22,926
titlebar appears transparent


396
00:19:23,216 --> 00:19:24,926
which makes the titlebar
appear transparent.


397
00:19:25,436 --> 00:19:27,506
Applications like Messages
take advantage of this


398
00:19:28,476 --> 00:19:29,886
to allow the contents
to show underneath.


399
00:19:30,256 --> 00:19:32,356
So here we can see
what's happening.


400
00:19:32,356 --> 00:19:38,026
That ScrollView on the side is
showing the content underneath


401
00:19:38,026 --> 00:19:39,136
the titlebar/toolbar area


402
00:19:39,136 --> 00:19:40,666
and would automatically
blur with it.


403
00:19:41,286 --> 00:19:42,706
But this presents a dilemma.


404
00:19:43,336 --> 00:19:46,756
How do you get that ScrollView
to automatically be inset


405
00:19:46,756 --> 00:19:49,666
so that you don't have to add
in like an extra empty row


406
00:19:49,666 --> 00:19:50,916
or anything really weird?


407
00:19:51,596 --> 00:19:54,056
And it's very convenient
and easy to do this.


408
00:19:54,256 --> 00:19:57,976
ScrollView has a method or a
property called contentInsets


409
00:19:58,376 --> 00:20:01,976
that allows you to drop the
content down a little bit.


410
00:20:02,046 --> 00:20:03,766
In fact, we can do
it automatically


411
00:20:03,826 --> 00:20:05,586
so we have a property
automaticallyAdjust


412
00:20:05,586 --> 00:20:06,506
ContentInsets.


413
00:20:07,216 --> 00:20:09,426
And if you set that to
true then what we're going


414
00:20:09,426 --> 00:20:11,486
to do is ScrollView
is going to use KVO


415
00:20:11,556 --> 00:20:14,386
to track the contentLayoutRect
that we talked about earlier


416
00:20:14,826 --> 00:20:16,766
and automatically set
the content insets


417
00:20:16,926 --> 00:20:18,506
to be the appropriate
value for you.


418
00:20:19,076 --> 00:20:23,356
But you as a developer may
actually want more control


419
00:20:23,356 --> 00:20:24,326
of the content insets.


420
00:20:24,616 --> 00:20:26,446
You might want to drop
it down even further


421
00:20:26,806 --> 00:20:28,836
and add some other
accessories there such as


422
00:20:28,836 --> 00:20:30,726
like a search field
or something else.


423
00:20:31,616 --> 00:20:35,236
And an example of where we do
this in the system Mail drops it


424
00:20:35,236 --> 00:20:37,666
down a little bit and adds
another sort indicator.


425
00:20:38,536 --> 00:20:40,296
That's how we accomplish
things like that


426
00:20:40,296 --> 00:20:41,456
in our system applications.


427
00:20:41,936 --> 00:20:45,916
Next let's talk about
auto layout.


428
00:20:46,786 --> 00:20:47,966
You should be using auto layout,


429
00:20:48,586 --> 00:20:50,546
and you should be using
base localization.


430
00:20:51,386 --> 00:20:54,526
Which means that all your nymphs
should be in base.lproj instead


431
00:20:54,526 --> 00:20:57,136
of multiple copies
of different folders


432
00:20:57,136 --> 00:20:58,326
and different localizations.


433
00:20:58,906 --> 00:21:01,006
You shouldn't use fixed
width constraints.


434
00:21:01,386 --> 00:21:05,686
You want to use controls to have
intrinsic content sizes instead


435
00:21:05,686 --> 00:21:06,856
of hard coding sizes.


436
00:21:07,576 --> 00:21:08,886
Prefer to use StackView.


437
00:21:09,366 --> 00:21:10,756
Use leading and trailing
attributes.


438
00:21:10,756 --> 00:21:11,566
All these things are right


439
00:21:11,756 --> 00:21:14,426
for creating a properly
localized application.


440
00:21:15,696 --> 00:21:18,186
But let's take a look at some of
the localization options in IB.


441
00:21:18,186 --> 00:21:21,096
In particular let's look
at this Text Direction,


442
00:21:21,196 --> 00:21:22,546
Layout and Mirror section.


443
00:21:23,716 --> 00:21:26,276
So the text direction
has three values.


444
00:21:26,636 --> 00:21:29,326
It has natural, left to
right and right to left.


445
00:21:30,036 --> 00:21:33,726
Natural means that the actual
control is going to look


446
00:21:33,726 --> 00:21:35,976
at the string value that
you set on that control


447
00:21:35,976 --> 00:21:38,126
like a text field, look
at the string value.


448
00:21:38,656 --> 00:21:40,096
And if that string is a right


449
00:21:40,096 --> 00:21:43,776
to left string then
we will actually put


450
00:21:43,776 --> 00:21:45,196
in the direction right to left.


451
00:21:45,566 --> 00:21:49,046
If it's a left to right string
we'll put it in left to right.


452
00:21:49,256 --> 00:21:51,716
Or you can manually control
it by setting these to left


453
00:21:51,716 --> 00:21:52,816
to right or right to left.


454
00:21:53,606 --> 00:21:57,166
The next property is the
userInterface LayoutDirection


455
00:21:58,056 --> 00:21:59,466
which is key to layout.


456
00:21:59,556 --> 00:22:02,436
And it has either left to
right or right to left.


457
00:22:03,686 --> 00:22:06,426
System controls such as table
view will look at this property


458
00:22:06,426 --> 00:22:07,186
and may do things


459
00:22:07,186 --> 00:22:09,226
like automatically
flipping the table columns


460
00:22:09,296 --> 00:22:10,466
when it's set to right to left.


461
00:22:11,296 --> 00:22:13,866
The default here is
based on the app value.


462
00:22:14,906 --> 00:22:18,066
But the interesting thing
is the mirroring property


463
00:22:18,146 --> 00:22:19,626
because it's a little confusing.


464
00:22:19,936 --> 00:22:22,476
So if mirroring is set
to automatically then


465
00:22:22,476 --> 00:22:24,076
that userInterface
LayoutDirection,


466
00:22:24,296 --> 00:22:27,296
the last property we just
looked at, will automatically go


467
00:22:27,296 --> 00:22:30,426
from left to right to right
to left when it's in a right


468
00:22:30,426 --> 00:22:33,026
to left localization
and vice versa.


469
00:22:33,576 --> 00:22:38,206
And it will also flip other
properties automatically


470
00:22:38,206 --> 00:22:39,806
like the cell image
position for a button.


471
00:22:40,066 --> 00:22:42,806
So the button's image is on
the left and we'll flip it


472
00:22:42,806 --> 00:22:44,636
and put it on the right
for you automatically.


473
00:22:45,986 --> 00:22:49,046
But one property that we won't
flip is on text alignment.


474
00:22:49,546 --> 00:22:51,016
If you have it set
to center, justify


475
00:22:51,016 --> 00:22:52,936
or natural those don't
really make sense to flip


476
00:22:52,936 --> 00:22:55,256
so we won't flip them.


477
00:22:55,466 --> 00:22:57,516
So then you might
be wondering, well,


478
00:22:57,516 --> 00:22:59,556
when do I actually not
want to have mirroring?


479
00:23:00,086 --> 00:23:02,906
Well, you might want to
have mirroring set to no


480
00:23:03,206 --> 00:23:06,516
when you want a control that has
a very physical representation


481
00:23:06,516 --> 00:23:07,316
like a play button,


482
00:23:07,316 --> 00:23:09,086
a fast forward button
or a rewind button.


483
00:23:09,616 --> 00:23:13,796
And then these are all
interface builder things


484
00:23:13,876 --> 00:23:15,636
so how do you actually
do this in code?


485
00:23:16,516 --> 00:23:19,676
So in code you actually have
to look at your controls value


486
00:23:19,676 --> 00:23:21,256
for the user interface
layout direction.


487
00:23:21,656 --> 00:23:23,906
If it's set to left to right
then you're going to have


488
00:23:23,936 --> 00:23:27,006
to say, hey button, I want
that image to be on the left


489
00:23:27,316 --> 00:23:29,146
when it's in a left
to right localization.


490
00:23:29,496 --> 00:23:31,256
And I want that image to
be on the right when it's


491
00:23:31,256 --> 00:23:32,666
in a right to left localization.


492
00:23:32,986 --> 00:23:34,546
You have to manually do this.


493
00:23:35,126 --> 00:23:37,726
But to make it a
little bit easier


494
00:23:37,726 --> 00:23:40,776
in 10.12 we added a
convenience method on button


495
00:23:41,116 --> 00:23:45,136
and an init method which allows
you to pass a string, an image,


496
00:23:45,136 --> 00:23:48,886
a target and an action and
have the flipping automatically


497
00:23:48,886 --> 00:23:49,526
happen for you.


498
00:23:50,086 --> 00:23:54,916
So that's it for
my first section.


499
00:23:55,096 --> 00:23:57,016
I'm going to bring up Jeff
to talk about appearances,


500
00:23:57,016 --> 00:23:58,686
storyboards and some
other Mac features.


501
00:23:59,166 --> 00:23:59,476
Thank you.


502
00:24:00,516 --> 00:24:04,636
[ Applause ]


503
00:24:05,136 --> 00:24:05,776
>> All right, thanks, Corbin.


504
00:24:06,076 --> 00:24:09,176
We got an absolute ton of
stuff to cover in this section


505
00:24:09,176 --> 00:24:11,606
so I'm going to dive right
in with system appearances.


506
00:24:12,976 --> 00:24:14,416
So here's our app.


507
00:24:14,416 --> 00:24:16,266
We've been looking at
it for a while now.


508
00:24:16,266 --> 00:24:19,776
And we're trying to
develop our UI a little bit.


509
00:24:20,166 --> 00:24:21,376
And we've decided that we want


510
00:24:21,376 --> 00:24:23,776
to adopt this really
slick dark look.


511
00:24:23,776 --> 00:24:27,416
This is kind of characteristic
of Pro apps usually.


512
00:24:27,746 --> 00:24:29,506
And we're nothing
if not ambitious


513
00:24:29,506 --> 00:24:30,746
with our little demo app here.


514
00:24:32,186 --> 00:24:34,416
But look at this, this
looks really complicated.


515
00:24:34,416 --> 00:24:37,816
We have an entirely different
system, Window Chrome,


516
00:24:38,146 --> 00:24:40,216
we need all our control
artwork to change,


517
00:24:40,296 --> 00:24:42,546
segmented controls,
buttons, sliders.


518
00:24:43,086 --> 00:24:46,386
And all of our text
labels need to invert


519
00:24:46,386 --> 00:24:48,216
from dark text to light text.


520
00:24:49,076 --> 00:24:52,016
Which seems like an awful lot of
work, but actually we can do it


521
00:24:52,016 --> 00:24:54,296
in one line of code
using NSAppearance.


522
00:24:55,046 --> 00:24:58,086
All we've got to do is create
one of our system appearances,


523
00:24:58,266 --> 00:24:59,236
assign it to the window,


524
00:24:59,236 --> 00:25:01,266
and it's automatically
applied to everything within.


525
00:25:02,146 --> 00:25:04,896
You can think of an appearance
as sort of a pallet of colors


526
00:25:04,896 --> 00:25:08,386
and artwork that we use
to resolve how to draw all


527
00:25:08,386 --> 00:25:09,966
of our standard system controls


528
00:25:09,966 --> 00:25:12,266
and also all of our
named colors.


529
00:25:12,266 --> 00:25:14,626
These are things like
label color, control color.


530
00:25:14,626 --> 00:25:16,956
And for that reason
it's really important


531
00:25:16,956 --> 00:25:18,896
that you use these
colors when applicable.


532
00:25:19,116 --> 00:25:22,276
Not only do you fit in better
with the entire system theme,


533
00:25:22,646 --> 00:25:25,276
but you'll continue to fit in if
that theme changes in the future


534
00:25:25,276 --> 00:25:27,216
or if you change your
appearance in the future.


535
00:25:28,036 --> 00:25:29,376
So let's take a closer look.


536
00:25:30,076 --> 00:25:30,796
Here we've got a panel.


537
00:25:30,836 --> 00:25:33,656
It's got tons of nice labels,
controls, etcetera, on it.


538
00:25:34,546 --> 00:25:36,556
And all we have to do is
just apply dark appearance,


539
00:25:36,846 --> 00:25:38,716
and we see a pretty
dramatic change.


540
00:25:38,916 --> 00:25:41,626
Our control artwork has changed,
and all of our labels have,


541
00:25:41,626 --> 00:25:43,196
of course, inverted
from dark to light.


542
00:25:43,196 --> 00:25:45,926
We can actually take
it one step further


543
00:25:46,286 --> 00:25:48,996
and apply this cool
vibrancy effect.


544
00:25:48,996 --> 00:25:51,336
You may have noticed a slide
ago that the appearance


545
00:25:51,336 --> 00:25:52,906
that we applied is
called vibrant dark.


546
00:25:53,116 --> 00:25:55,516
That doesn't mean that you're
obligated to use vibrancy,


547
00:25:55,516 --> 00:25:57,186
but it does mean that
the artwork looks great


548
00:25:57,226 --> 00:25:58,536
in a vibrant context.


549
00:25:59,036 --> 00:26:01,976
And to get this appearance
all you need to do is add all


550
00:26:01,976 --> 00:26:04,786
of your controls as a subview
of NSVisualEffect View.


551
00:26:05,166 --> 00:26:07,126
And you'll automatically
get this great behind window


552
00:26:07,126 --> 00:26:09,186
blurring and also
this cool blend effect


553
00:26:09,326 --> 00:26:10,176
for everything on top.


554
00:26:10,176 --> 00:26:13,256
Now, you might be thinking
that's great and all,


555
00:26:13,596 --> 00:26:17,146
but my designer has this
really cool like specific color


556
00:26:17,146 --> 00:26:18,666
that they want for
our text labels,


557
00:26:18,976 --> 00:26:20,886
and so I'm not going
to use label color.


558
00:26:20,886 --> 00:26:23,646
I think that I'm not planning
on changing from dark to light


559
00:26:23,646 --> 00:26:26,276
or vice versa so I'm
fine, right, I'm safe.


560
00:26:26,896 --> 00:26:30,716
Well, let's have some
food for thought.


561
00:26:31,046 --> 00:26:33,756
Let's check in with
the accessibility pane,


562
00:26:33,756 --> 00:26:34,716
and we're going to
turn on this setting


563
00:26:34,716 --> 00:26:36,676
in the middle here
called Increase contrast.


564
00:26:36,676 --> 00:26:38,246
And let's see what
that does to our UI.


565
00:26:38,246 --> 00:26:42,076
On the left we again
have our standard panel.


566
00:26:42,636 --> 00:26:44,576
But on the right
we have that panel


567
00:26:44,576 --> 00:26:46,156
with Increase contrast
turned on.


568
00:26:46,736 --> 00:26:49,336
And although we haven't
inverted all of our colors,


569
00:26:49,336 --> 00:26:51,506
this transformation is
every bit as dramatic


570
00:26:51,886 --> 00:26:53,836
as the transformation
from light to dark.


571
00:26:54,266 --> 00:26:56,606
You can see that the window
background color has gotten


572
00:26:56,606 --> 00:26:59,066
lighter, our text is
darker at every level,


573
00:26:59,066 --> 00:27:00,906
and all of our controls have
gotten this really nice,


574
00:27:00,906 --> 00:27:01,916
bold outline.


575
00:27:02,116 --> 00:27:04,036
It makes it really pop
against the background.


576
00:27:04,946 --> 00:27:07,906
Now, when you provide a
hardcoded color value we can't


577
00:27:07,906 --> 00:27:09,126
really second guess that.


578
00:27:09,126 --> 00:27:11,046
We can't adjust for
settings like this.


579
00:27:11,486 --> 00:27:16,086
And so if you don't supply
things like label color,


580
00:27:16,086 --> 00:27:18,826
secondary label color, you
might be doing a real disservice


581
00:27:18,826 --> 00:27:21,266
to people who need settings
like increased contrast


582
00:27:21,266 --> 00:27:23,816
to get the most out
of their Mac.


583
00:27:24,136 --> 00:27:27,356
Now I hinted a moment ago at
visual effect view and vibrancy.


584
00:27:27,356 --> 00:27:29,956
We're not going to go into
depth on that API right now,


585
00:27:29,956 --> 00:27:31,826
but I would refer
you back to our talk


586
00:27:31,826 --> 00:27:34,526
in 2014 that's Adopting
the Advanced Features


587
00:27:34,526 --> 00:27:36,396
of the new UI of OS X Yosemite.


588
00:27:36,866 --> 00:27:38,446
And that's appearances.


589
00:27:38,676 --> 00:27:41,626
It's a real simple way to theme
your application while remaining


590
00:27:41,626 --> 00:27:43,976
harmonious with the overall
look of the operating system.


591
00:27:44,426 --> 00:27:46,606
Next up storyboards.


592
00:27:48,266 --> 00:27:49,886
Storyboards are a
technology that will allow you


593
00:27:49,886 --> 00:27:52,746
to design not only the
individual components


594
00:27:52,746 --> 00:27:54,756
and the views that comprise
them for your application,


595
00:27:55,116 --> 00:27:56,906
but also visually
design the relationships


596
00:27:56,906 --> 00:27:58,256
between those components.


597
00:27:59,126 --> 00:28:01,796
In this case when I say
component storyboards operate


598
00:28:01,796 --> 00:28:03,976
in terms of controllers,
there's our window controllers


599
00:28:03,976 --> 00:28:04,956
and view controllers.


600
00:28:05,596 --> 00:28:07,796
And we connect them together
with these things called segues,


601
00:28:07,796 --> 00:28:09,706
those are the arrows up
there on my screenshot.


602
00:28:09,706 --> 00:28:12,986
And segues abstract away
all of the glue code


603
00:28:13,526 --> 00:28:15,056
of putting these
components together.


604
00:28:15,296 --> 00:28:18,236
Those are things like adding
subviews, adding constraints,


605
00:28:18,346 --> 00:28:20,796
creating popovers,
really just housekeeping.


606
00:28:20,796 --> 00:28:29,536
Now, one thing that we need to
think about with storyboards is


607
00:28:30,226 --> 00:28:32,156
when we have separable
components like these,


608
00:28:32,156 --> 00:28:33,626
you can see I've got
a split view here,


609
00:28:33,766 --> 00:28:35,276
and you can see the
storyboard that creates it,


610
00:28:35,276 --> 00:28:37,076
all these new little components
do their own little thing,


611
00:28:37,786 --> 00:28:40,926
that every piece of UI
has some kind of data


612
00:28:40,926 --> 00:28:43,416
that it wants to
look at or modify.


613
00:28:43,896 --> 00:28:47,516
And we can't necessarily
just drag outlets or actions


614
00:28:47,516 --> 00:28:48,606
from one scene to another.


615
00:28:48,606 --> 00:28:51,136
Of course, if we did that
they would not be separable


616
00:28:51,136 --> 00:28:53,866
components anymore, and then
we have defeated the purpose


617
00:28:53,866 --> 00:28:54,456
of this whole thing.


618
00:28:55,036 --> 00:28:57,486
But sometimes this
data that we're working


619
00:28:57,486 --> 00:29:01,046
on doesn't really live conically
in the scene that we have here


620
00:29:01,046 --> 00:29:02,076
in down in our leaf node.


621
00:29:02,396 --> 00:29:03,516
Sometimes it might
live all the way


622
00:29:03,516 --> 00:29:04,976
up on the window
or in the document.


623
00:29:05,486 --> 00:29:07,856
So how do we propagate
that data all the way


624
00:29:07,856 --> 00:29:11,316
up from the top level
down into our leaf nodes?


625
00:29:11,996 --> 00:29:14,786
Well, we have a couple of
rules of thumb, not hard


626
00:29:14,786 --> 00:29:17,056
and fast rules but
just a couple of ideas


627
00:29:17,056 --> 00:29:19,306
that we think are good
for handling this.


628
00:29:20,216 --> 00:29:23,816
For one, dependencies should
generally cascade downward.


629
00:29:24,236 --> 00:29:26,466
If you're wondering, if you
need some kind of rule of thumb


630
00:29:26,466 --> 00:29:29,606
for this just follow the
arrows in your segues.


631
00:29:30,526 --> 00:29:33,306
If nothing else this gives you a
nice unidirectional information


632
00:29:33,306 --> 00:29:34,486
flow in your application,


633
00:29:34,826 --> 00:29:36,646
and that makes it a lot
easier to reason about.


634
00:29:37,246 --> 00:29:40,586
Next try to reduce the
amount of assumptions


635
00:29:40,586 --> 00:29:43,816
about your UI structure that
you hardcode into your code.


636
00:29:43,816 --> 00:29:47,816
Now, you just got done designing
your UI and your storyboard.


637
00:29:47,816 --> 00:29:50,266
And if you hardcode
assumptions about how


638
00:29:50,266 --> 00:29:53,226
that structure is put together
in your code, now when you want


639
00:29:53,226 --> 00:29:55,616
to make a change to your
storyboard you're going back


640
00:29:55,616 --> 00:29:56,016
and forth.


641
00:29:56,016 --> 00:29:57,676
You've got to change your
code, change your storyboard,


642
00:29:57,676 --> 00:29:58,876
and now you're fighting
yourself.


643
00:29:59,406 --> 00:29:59,976
Let's not do that.


644
00:30:00,236 --> 00:30:03,326
Let's have our code focus
on our data and focus


645
00:30:03,326 --> 00:30:05,446
on designing our interface
and interface builder.


646
00:30:06,486 --> 00:30:09,396
And one technique that we
can use to address that is


647
00:30:09,396 --> 00:30:10,806
to use protocol conformances


648
00:30:10,806 --> 00:30:12,626
to work really generically
across our UI.


649
00:30:12,626 --> 00:30:15,106
So here's an example.


650
00:30:15,816 --> 00:30:16,946
Let's say we have
this property here,


651
00:30:16,946 --> 00:30:18,396
it's up on our window
controller,


652
00:30:18,676 --> 00:30:20,896
and we want to automatically
provide that property


653
00:30:21,096 --> 00:30:23,386
to anything in our view
hierarchy that understands it.


654
00:30:23,996 --> 00:30:25,976
So in our didSet we're
going to go ahead


655
00:30:25,976 --> 00:30:27,216
and call this propagate method.


656
00:30:27,976 --> 00:30:29,026
And we've got this protocol


657
00:30:29,026 --> 00:30:31,596
that we've defined off screen
called photoControllerConsumer.


658
00:30:32,196 --> 00:30:34,396
And this just says I
know how to do something


659
00:30:34,396 --> 00:30:35,346
with a photoController.


660
00:30:36,066 --> 00:30:39,336
And so if we look at a
child ViewController and see


661
00:30:39,336 --> 00:30:41,166
that it conforms to
that protocol we can set


662
00:30:41,166 --> 00:30:41,736
the property.


663
00:30:41,926 --> 00:30:45,306
And then we also automatically
propagate recursively


664
00:30:45,306 --> 00:30:46,536
to all of its children.


665
00:30:49,276 --> 00:30:54,696
But what about things like
popovers or sheet presentations,


666
00:30:54,696 --> 00:30:56,046
things that are kind
of on demand?


667
00:30:56,636 --> 00:30:58,086
These probably don't exist


668
00:30:58,086 --> 00:30:59,596
when you're setting
a property like that.


669
00:31:00,136 --> 00:31:01,996
And we need to be able
to provide their data


670
00:31:02,076 --> 00:31:04,326
on demand before they
show up on screen.


671
00:31:05,026 --> 00:31:07,516
And that's exactly what the
prepare for segue method is for.


672
00:31:08,436 --> 00:31:10,446
This is called on the
presenting view controller


673
00:31:10,486 --> 00:31:13,716
or window controller at the time
that the presentation occurs.


674
00:31:14,136 --> 00:31:17,976
And in this case instead of
doing something like inspecting


675
00:31:17,976 --> 00:31:21,846
or segue identifier forcibly
casting to the controller class


676
00:31:21,846 --> 00:31:23,746
that we expect it to be
and then doing some kind


677
00:31:23,746 --> 00:31:26,796
of specific setup, here we're
just doing the exact same thing.


678
00:31:27,376 --> 00:31:29,376
We're checking out what
protocols it conforms to


679
00:31:29,716 --> 00:31:31,366
and then setting the
property appropriately.


680
00:31:31,936 --> 00:31:34,976
And what this does is
it changes our logic


681
00:31:34,976 --> 00:31:39,296
from focusing really strictly
on identity into capability.


682
00:31:39,296 --> 00:31:41,026
We're saying I have
this knowledge,


683
00:31:41,296 --> 00:31:43,926
and anything that's presented
off of me could potentially gain


684
00:31:43,926 --> 00:31:46,886
that knowledge automatically
through a protocol conformance.


685
00:31:47,106 --> 00:31:47,786
It's really handy.


686
00:31:48,316 --> 00:31:50,506
More about actions.


687
00:31:51,246 --> 00:31:54,146
It's really frequent
that the best object


688
00:31:54,146 --> 00:31:57,496
to handle an action that's
triggered in UI is not actually


689
00:31:57,496 --> 00:32:00,686
in the same scene that
the control is defined in.


690
00:32:00,686 --> 00:32:03,386
And this is exemplified
by menu items which are


691
00:32:03,386 --> 00:32:06,066
in their own little scene
completely disconnected


692
00:32:06,066 --> 00:32:06,616
from your UI.


693
00:32:07,886 --> 00:32:10,316
And luckily we have a
really great mechanism


694
00:32:10,316 --> 00:32:12,916
for handling this case, and
that's the responder chain.


695
00:32:13,626 --> 00:32:15,686
If you're coming from
a platform like iOS


696
00:32:15,686 --> 00:32:17,716
where maybe you don't use
the responder chain quite


697
00:32:17,716 --> 00:32:21,806
so heavily, that is that little
orange cube that is in the top


698
00:32:21,806 --> 00:32:23,246
of every storyboard scene.


699
00:32:23,246 --> 00:32:25,006
That's a proxy for
the first responder.


700
00:32:25,596 --> 00:32:28,156
And so if you hook up
an action from a control


701
00:32:28,156 --> 00:32:31,046
to that proxy it will
automatically be sent


702
00:32:31,046 --> 00:32:33,286
up the responder chain when
the control is invoked.


703
00:32:34,486 --> 00:32:36,486
But what if there's no
object in the responder chain


704
00:32:36,486 --> 00:32:37,306
that handles your method?


705
00:32:38,316 --> 00:32:40,436
Or what if in the case of zoom


706
00:32:40,436 --> 00:32:43,216
in it's not always
appropriate to send that action?


707
00:32:43,666 --> 00:32:46,086
For example, we might be
at our maximum zoom level,


708
00:32:46,086 --> 00:32:49,006
and so we don't want our zoom
in button to just do nothing.


709
00:32:49,406 --> 00:32:51,796
We should be able to look
before we leap with our action.


710
00:32:51,796 --> 00:32:54,196
And that's what UI
validation is for.


711
00:32:55,056 --> 00:32:57,466
So let's take a look
at a block of code


712
00:32:57,466 --> 00:33:00,756
that would inspect UI
validation to determine


713
00:33:00,756 --> 00:33:01,976
if a control is actionable.


714
00:33:01,976 --> 00:33:05,226
The first thing that we're
going to do is ask NSApp


715
00:33:05,536 --> 00:33:08,476
for the target for an
action from a control.


716
00:33:09,376 --> 00:33:11,106
And what that does is it
automatically walks the


717
00:33:11,106 --> 00:33:13,326
responder chain and
finds some object


718
00:33:13,326 --> 00:33:14,956
that implements that action.


719
00:33:15,356 --> 00:33:16,966
Or it might not find any action,


720
00:33:17,006 --> 00:33:18,546
or it might not find
any object at all.


721
00:33:20,596 --> 00:33:21,856
The first case we want to look


722
00:33:21,856 --> 00:33:24,236
at for the results
there is any object


723
00:33:24,236 --> 00:33:26,196
that implements the
NSUserInterface


724
00:33:26,196 --> 00:33:27,366
validations protocol.


725
00:33:27,516 --> 00:33:30,146
And this just means you
can ask me proactively


726
00:33:30,416 --> 00:33:31,476
if a control is valid.


727
00:33:31,996 --> 00:33:33,946
And so if you're on the
other side of this equation


728
00:33:33,986 --> 00:33:37,556
and you have a control that
is conditionally valid you can


729
00:33:37,556 --> 00:33:38,466
implement this method.


730
00:33:39,046 --> 00:33:40,736
And controls like NSMenuItem


731
00:33:40,736 --> 00:33:42,626
and toolbar item will
automatically validate


732
00:33:42,626 --> 00:33:43,396
against that method.


733
00:33:43,806 --> 00:33:45,396
So we can ask that method.


734
00:33:45,796 --> 00:33:48,736
And then, of course, we also
have the cases of some object


735
00:33:48,736 --> 00:33:51,966
that just handles the method
unconditionally or no object


736
00:33:51,966 --> 00:33:52,996
at all which clearly means


737
00:33:52,996 --> 00:33:54,606
that we're not prepared
to do that action.


738
00:33:55,256 --> 00:33:58,426
And there's just some techniques
for deal with storyboards.


739
00:33:59,046 --> 00:34:02,076
So now we've been talking
a lot about the kind


740
00:34:02,326 --> 00:34:05,676
of design time facets
of building your app.


741
00:34:06,116 --> 00:34:07,986
Let's look at some more
user facing features


742
00:34:07,986 --> 00:34:10,126
that really help you make
the most out of our platform.


743
00:34:11,065 --> 00:34:13,585
And the first of those
is user activities.


744
00:34:14,025 --> 00:34:18,496
NSUserActivity is this
object that describes kind


745
00:34:18,496 --> 00:34:21,946
of what your app is doing
right now, what is it viewing,


746
00:34:21,946 --> 00:34:23,686
what is it editing, etcetera.


747
00:34:24,576 --> 00:34:27,396
And this is the object
that's used by Handoff


748
00:34:27,396 --> 00:34:29,536
to move those activities
between devices.


749
00:34:29,536 --> 00:34:32,386
It kind of takes your whole
context and moves it between.


750
00:34:32,806 --> 00:34:37,656
I won't have time to go into the
entire API in depth right now,


751
00:34:37,656 --> 00:34:38,985
but I do want to
highlight how simple


752
00:34:38,985 --> 00:34:40,206
of an object this really is.


753
00:34:41,346 --> 00:34:42,735
You construct it
with an activityType,


754
00:34:43,246 --> 00:34:44,585
and that is a unique identifier


755
00:34:44,585 --> 00:34:46,106
that describes the
activity that you're doing.


756
00:34:46,846 --> 00:34:49,866
And this is also a key that you
would put into your info plist


757
00:34:49,866 --> 00:34:51,775
to declare I'm a
good app to pick


758
00:34:51,775 --> 00:34:53,576
up this activity
on another device.


759
00:34:54,186 --> 00:34:57,486
And then you just fill in
some basic configuration info


760
00:34:57,486 --> 00:35:01,436
to describe your activity,
a nice user facing title


761
00:35:01,436 --> 00:35:02,636
and also some user info.


762
00:35:03,046 --> 00:35:07,006
Basically just the most basic
amount of data necessary


763
00:35:07,116 --> 00:35:09,656
to jump back into that
task at a later time.


764
00:35:10,326 --> 00:35:11,906
We want to keep this
dictionary small


765
00:35:11,906 --> 00:35:13,756
because it's often
transmitted wirelessly,


766
00:35:13,756 --> 00:35:16,536
and we definitely want our
handoff interaction to be fast.


767
00:35:17,876 --> 00:35:19,616
We also get an opportunity
in the delegate


768
00:35:20,056 --> 00:35:22,676
to add the absolute
latest information


769
00:35:22,676 --> 00:35:24,516
about our context right before


770
00:35:24,516 --> 00:35:27,116
or at some point before
we perform a handoff.


771
00:35:27,686 --> 00:35:30,566
And this is called at some
point after you mark an activity


772
00:35:30,566 --> 00:35:31,656
as needing to be saved.


773
00:35:31,656 --> 00:35:33,046
And we'll call this
method for you


774
00:35:33,176 --> 00:35:34,696
so you can fill in
that latest data.


775
00:35:35,076 --> 00:35:39,566
Now, how do we decide
what activity is the


776
00:35:39,566 --> 00:35:40,326
current activity?


777
00:35:40,326 --> 00:35:41,186
Because, of course, we need


778
00:35:41,186 --> 00:35:44,556
to certainly determine what
is being looked at right now.


779
00:35:45,026 --> 00:35:47,626
Well, you can manually manage
that with the become current


780
00:35:47,626 --> 00:35:49,946
and resign current
methods on NSUserActivity.


781
00:35:50,476 --> 00:35:52,156
That means that you're
probably going to have


782
00:35:52,156 --> 00:35:54,726
to follow your user around
your application figuring


783
00:35:54,726 --> 00:35:56,846
out what they clicked
on and trying to figure


784
00:35:56,846 --> 00:35:57,586
out what they're doing.


785
00:35:58,256 --> 00:36:01,226
AppKit can make this a
lot easier by allowing you


786
00:36:01,226 --> 00:36:03,756
to attach activities
to the responder chain


787
00:36:03,756 --> 00:36:05,006
for automatic management.


788
00:36:06,436 --> 00:36:08,776
For an example of this let's say
we're building a calendar app


789
00:36:09,146 --> 00:36:11,166
which looks a lot
like our calendar app.


790
00:36:11,786 --> 00:36:14,436
And we have two activities
that we want to put


791
00:36:14,436 --> 00:36:15,356
into our responder chain.


792
00:36:15,796 --> 00:36:18,706
We've got a higher level
activity for the view


793
00:36:18,706 --> 00:36:20,626
that we're looking at,
this whole, this day view


794
00:36:20,626 --> 00:36:22,986
that we have here, and then
we have a much more specific


795
00:36:22,986 --> 00:36:24,816
activity for the specific event


796
00:36:24,946 --> 00:36:27,796
that we want to view
right there.


797
00:36:27,796 --> 00:36:31,856
And by attaching these to the
responder chain when we click


798
00:36:31,856 --> 00:36:33,576
that event and make it
their first responder


799
00:36:34,116 --> 00:36:36,196
that activity becomes
the closest thing


800
00:36:36,196 --> 00:36:38,346
in the responder chain
through the first responder.


801
00:36:38,346 --> 00:36:40,486
And it becomes current
automatically.


802
00:36:42,116 --> 00:36:44,836
Now, you may not have
considered Handoff


803
00:36:44,836 --> 00:36:47,716
or the NSUserActivity
API before,


804
00:36:47,996 --> 00:36:50,206
maybe you don't have
a companion iOS app


805
00:36:50,206 --> 00:36:51,176
or you just haven't
really thought


806
00:36:51,176 --> 00:36:54,816
that Handoff is especially
compelling for your application


807
00:36:54,816 --> 00:36:55,836
and your specific needs.


808
00:36:56,206 --> 00:36:58,656
But activities are
not just for Handoff.


809
00:36:59,316 --> 00:37:01,286
New in Sierra we
have Siri on the Mac,


810
00:37:01,636 --> 00:37:03,276
and Siri uses the
current activity


811
00:37:03,276 --> 00:37:05,316
to provide context to commands.


812
00:37:06,076 --> 00:37:08,686
So, for example, if you
say remind me about this


813
00:37:08,766 --> 00:37:11,386
at some date, Siri is
going to infer this


814
00:37:11,386 --> 00:37:12,636
to mean your current activity.


815
00:37:12,636 --> 00:37:14,746
And it will actually
even take that activity


816
00:37:14,746 --> 00:37:16,876
and embed it inside
of your reminders


817
00:37:16,876 --> 00:37:18,696
so that you can pick
it up in the future.


818
00:37:19,196 --> 00:37:21,496
So we see activities as
a generalized mechanism


819
00:37:21,496 --> 00:37:23,036
for describing this
kind of information.


820
00:37:23,266 --> 00:37:24,466
It's not just for Handoff.


821
00:37:25,046 --> 00:37:27,026
Now, for full information


822
00:37:27,026 --> 00:37:29,156
about the Handoff API I
recommend checking out this talk


823
00:37:29,156 --> 00:37:33,676
from 2014, Adopting
Handoff in OS X and iOS.


824
00:37:33,806 --> 00:37:35,816
That covers a lot more
of the advanced topics


825
00:37:35,816 --> 00:37:38,456
like continuation streams
which allow you to move a lot


826
00:37:38,456 --> 00:37:39,566
of data between devices.


827
00:37:42,356 --> 00:37:44,346
The next feature, resume,


828
00:37:44,496 --> 00:37:46,256
which we sometimes
call state restoration.


829
00:37:46,906 --> 00:37:48,566
It's one of the best
features on the Mac is


830
00:37:48,566 --> 00:37:50,046
that when you quit
an application


831
00:37:50,046 --> 00:37:52,976
and then relaunch it, it
comes back exactly the way you


832
00:37:52,976 --> 00:37:53,376
left it.


833
00:37:53,426 --> 00:37:56,696
In fact, that happens if
you crash an application


834
00:37:56,696 --> 00:37:57,746
or even reboot your machine.


835
00:37:57,746 --> 00:37:59,926
Everything just comes back
exactly the way that it was.


836
00:38:00,926 --> 00:38:06,766
Now, clearly to accomplish
this effect we need to save all


837
00:38:06,766 --> 00:38:10,676
of the UI state that builds up
over time and then restore it


838
00:38:10,676 --> 00:38:11,766
when the app relaunches.


839
00:38:12,826 --> 00:38:14,986
But clearly we don't want to
save that state in our model.


840
00:38:14,986 --> 00:38:17,036
It doesn't really belong there.


841
00:38:17,566 --> 00:38:21,346
So a state restoration API gives
you a distinct place to save


842
00:38:21,346 --> 00:38:24,186
that UI state separately,
and it gives you a good place


843
00:38:24,186 --> 00:38:26,386
to restore that state
when you're launching


844
00:38:26,656 --> 00:38:28,686
but before your UI
has gone up on screen.


845
00:38:29,776 --> 00:38:31,316
You enable it on a
per window basis.


846
00:38:31,656 --> 00:38:32,326
It's pretty simple.


847
00:38:32,326 --> 00:38:33,836
You just say isRestorable
is true.


848
00:38:33,896 --> 00:38:36,706
And then you may provide
a restoration class


849
00:38:37,046 --> 00:38:40,896
that just handles the act
of creating your windows


850
00:38:41,146 --> 00:38:42,486
from the encoded data.


851
00:38:42,926 --> 00:38:44,716
And good news if
you're using NSDocument,


852
00:38:44,916 --> 00:38:46,586
NSDocument handles
this all for you.


853
00:38:47,496 --> 00:38:49,616
Now, what kind of state
might we want to restore?


854
00:38:50,586 --> 00:38:54,316
Well, we might choose
to save the current tool


855
00:38:54,316 --> 00:38:55,536
that we have active in our app.


856
00:38:56,446 --> 00:38:59,466
We might also want to save
the state of the sidebar,


857
00:38:59,466 --> 00:39:01,956
what's selected, what
our scroll offset is.


858
00:39:03,106 --> 00:39:03,956
How do we do that?


859
00:39:04,976 --> 00:39:07,776
Well, if you've used
NSCoding before it's really,


860
00:39:07,776 --> 00:39:08,366
really simple.


861
00:39:09,506 --> 00:39:12,676
The first method
encodeRestorableState


862
00:39:12,806 --> 00:39:13,376
with coder.


863
00:39:14,216 --> 00:39:16,066
You implement this on
any NSResponder method,


864
00:39:16,066 --> 00:39:18,206
and then it's just
like using NSCoding


865
00:39:18,206 --> 00:39:19,726
but for your controllers
effectively.


866
00:39:20,186 --> 00:39:25,566
Another important call is
invalidateRestorableState.


867
00:39:25,566 --> 00:39:29,206
And this just says
whatever my backing data is


868
00:39:29,446 --> 00:39:32,396
for encodeFestorableState
has changed in some way.


869
00:39:33,046 --> 00:39:34,646
And we'll schedule to
make sure that we save


870
00:39:34,646 --> 00:39:36,526
that state again
sometime in the future.


871
00:39:37,066 --> 00:39:40,316
And then finally
restoring is just as easy.


872
00:39:40,346 --> 00:39:42,036
It's exactly like you'd expect.


873
00:39:42,036 --> 00:39:43,186
It's a lot like a
init with coder.


874
00:39:43,896 --> 00:39:47,276
All you have to do is call
super, decode all the saved data


875
00:39:47,276 --> 00:39:50,246
that you've encoded before,
and then set up your UI based


876
00:39:50,246 --> 00:39:51,776
on that information
that you've encoded.


877
00:39:52,486 --> 00:39:55,376
Now, that's pretty easy,


878
00:39:55,376 --> 00:39:57,326
but we can actually
make it even easier.


879
00:39:57,996 --> 00:40:00,086
All you have to do is
implement a class method


880
00:40:00,086 --> 00:40:01,726
restorableState KeyPaths.


881
00:40:02,226 --> 00:40:03,496
Of course, we're
going to ask super


882
00:40:03,496 --> 00:40:04,696
because that's the
polite thing to do,


883
00:40:04,696 --> 00:40:06,986
but then we also append
our own key paths.


884
00:40:07,426 --> 00:40:08,796
And these are the
properties that you want


885
00:40:08,796 --> 00:40:11,186
to have automatically
restored or saved


886
00:40:11,186 --> 00:40:13,306
and restored by the system.


887
00:40:13,706 --> 00:40:15,416
These properties need to be KVC,


888
00:40:15,416 --> 00:40:16,906
that's key value
coding accessible


889
00:40:16,906 --> 00:40:19,186
because we access them by
key path, and they also need


890
00:40:19,186 --> 00:40:22,576
to be observable so that we
can observe them and invalidate


891
00:40:22,576 --> 00:40:23,656
or state when they change.


892
00:40:25,036 --> 00:40:26,776
And that's state restoration.


893
00:40:27,276 --> 00:40:29,856
The third and final technology
we want to talk about,


894
00:40:29,926 --> 00:40:30,966
documents in the cloud.


895
00:40:32,186 --> 00:40:35,196
So once upon a time
to opt into documents


896
00:40:35,196 --> 00:40:37,596
in the cloud you actually
had to proactively opt in


897
00:40:37,596 --> 00:40:38,486
and create a container.


898
00:40:39,096 --> 00:40:40,406
But these days with iCloud Drive


899
00:40:40,406 --> 00:40:42,316
and now especially
now iCloud Desktop


900
00:40:42,316 --> 00:40:45,086
and Documents it's
more likely than ever


901
00:40:45,086 --> 00:40:47,636
that your app is working with
documents that live in iCloud.


902
00:40:48,416 --> 00:40:51,756
Now, this is important because
new in 10.12 local copies


903
00:40:51,756 --> 00:40:54,346
of documents might be
evicted to free up space.


904
00:40:54,536 --> 00:40:56,516
And this means that you might
be working with documents


905
00:40:56,876 --> 00:40:59,496
that aren't actually
on the local hard disk.


906
00:41:00,676 --> 00:41:01,826
So how do we handle this?


907
00:41:01,826 --> 00:41:02,826
That seems pretty scary.


908
00:41:03,706 --> 00:41:06,986
Luckily, first off if you're
using NSDocument it handles


909
00:41:06,986 --> 00:41:08,886
everything for you so
you're in great shape.


910
00:41:09,726 --> 00:41:10,846
But if not you need to make sure


911
00:41:10,846 --> 00:41:12,466
that you're using
file coordination.


912
00:41:13,176 --> 00:41:15,706
If you register yourself
as a file presenter


913
00:41:15,776 --> 00:41:18,016
with the file coordination
API we will make sure


914
00:41:18,016 --> 00:41:20,456
that your document is not
evicted out from under you


915
00:41:20,916 --> 00:41:21,676
which is a good thing.


916
00:41:22,406 --> 00:41:24,646
And then next if you
use file coordination


917
00:41:24,716 --> 00:41:28,266
to coordination your IO on
those files we'll make sure


918
00:41:28,266 --> 00:41:31,526
that we schedule
your IO conveniently


919
00:41:31,666 --> 00:41:33,926
after the entire file
has been downloaded.


920
00:41:34,756 --> 00:41:36,736
And that's documents
in the cloud.


921
00:41:37,596 --> 00:41:39,186
Now, there are a
couple of technologies


922
00:41:39,186 --> 00:41:40,976
that we didn't have time
to talk about but I do want


923
00:41:40,976 --> 00:41:42,286
to give an honorable mention to.


924
00:41:42,626 --> 00:41:46,006
The first is asset
catalogs, faster and smaller


925
00:41:46,006 --> 00:41:47,576
than having loose
assets in your bundle.


926
00:41:47,636 --> 00:41:48,986
And they can also
help you with things


927
00:41:48,986 --> 00:41:50,716
like wide gamut and
right to left.


928
00:41:51,756 --> 00:41:54,206
Accessibility, extremely
important.


929
00:41:54,566 --> 00:41:57,306
Cocoa puts really powerful
accessibility technologies


930
00:41:57,346 --> 00:41:59,106
within an arm's reach
of your application.


931
00:41:59,666 --> 00:42:01,736
And it's extremely
important that you make sure


932
00:42:01,736 --> 00:42:04,486
that you learn to use voice
over, learn to use all


933
00:42:04,486 --> 00:42:06,106
of these accessible
technologies and make sure


934
00:42:06,106 --> 00:42:07,356
that your app is
doing the right thing.


935
00:42:07,856 --> 00:42:11,166
You would never ship an app with
a visibly broken user interface,


936
00:42:11,246 --> 00:42:14,176
so don't ship an app that
has a UI that's broken


937
00:42:14,176 --> 00:42:15,016
to accessibility.


938
00:42:16,766 --> 00:42:20,976
Sandboxing and also XPC
services, two different


939
00:42:20,976 --> 00:42:22,426
but somewhat related
technologies


940
00:42:22,756 --> 00:42:25,486
in that they help you isolate
code from the rest of the system


941
00:42:25,486 --> 00:42:26,626
and from other processes.


942
00:42:27,106 --> 00:42:29,896
Sandboxing is, of course,
mandatory for the Mac App Store,


943
00:42:29,896 --> 00:42:31,486
but it's appropriate
for every app really.


944
00:42:32,076 --> 00:42:35,376
And XPC services can help
you separate out code


945
00:42:35,556 --> 00:42:36,986
into separate processes.


946
00:42:38,216 --> 00:42:40,606
This is really great
for things like, say,


947
00:42:40,996 --> 00:42:43,526
code that's handling
untrusted data off the network


948
00:42:43,526 --> 00:42:45,406
or doing some kind
of parsing work.


949
00:42:45,626 --> 00:42:48,946
We all like to think that our
code is perfect but, you know,


950
00:42:49,446 --> 00:42:52,496
we also wear seatbelts in our
cars, and we're very happy


951
00:42:52,496 --> 00:42:56,736
that it's there if
something goes wrong.


952
00:42:56,946 --> 00:43:00,056
So we have covered an
absolute ton of content


953
00:43:00,056 --> 00:43:01,276
in a very short amount of time.


954
00:43:01,276 --> 00:43:03,146
So I want to rewind
and recap and make sure


955
00:43:03,146 --> 00:43:06,266
that we all remember what
we just talked about.


956
00:43:06,426 --> 00:43:09,556
And we started off by looking
at creating a modern look


957
00:43:10,306 --> 00:43:13,066
with our modern view and window
pipeline making sure you get


958
00:43:13,066 --> 00:43:14,476
great animation performance.


959
00:43:15,116 --> 00:43:17,716
Then we talked about drag
and drop and event tracking,


960
00:43:17,816 --> 00:43:20,436
making sure that you get the
really cool drag flocking


961
00:43:20,436 --> 00:43:22,506
effect, modern drag
file promises.


962
00:43:23,456 --> 00:43:26,096
Then we covered container views
likes scroll view and table view


963
00:43:26,416 --> 00:43:28,176
and making sure that we
localize them correctly.


964
00:43:29,656 --> 00:43:32,686
Then we walked into system
appearances, storyboards


965
00:43:33,086 --> 00:43:35,126
and also a couple of
modern Mac features


966
00:43:35,126 --> 00:43:36,936
that really make
the platform shine


967
00:43:36,936 --> 00:43:38,626
and really take advantage of it.


968
00:43:39,296 --> 00:43:40,436
Here's the permalink
for our talk.


969
00:43:40,826 --> 00:43:44,216
You should find related
resources there including the


970
00:43:44,216 --> 00:43:46,096
download for our demo
application as soon


971
00:43:46,096 --> 00:43:47,156
as it becomes available.


972
00:43:47,386 --> 00:43:50,196
All of our related
sessions are in the past.


973
00:43:50,196 --> 00:43:51,486
I hope you were able
to attend them.


974
00:43:51,486 --> 00:43:53,076
If not, then you
should definitely check


975
00:43:53,076 --> 00:43:54,386
out the videos online.


976
00:43:55,296 --> 00:43:56,296
And that's a wrap.


977
00:43:56,296 --> 00:43:56,976
Thank you for attending.


978
00:43:57,516 --> 00:44:01,500
[ Applause ]

