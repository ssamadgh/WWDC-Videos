1
00:00:06,516 --> 00:00:15,500
[ Music ]


2
00:00:20,516 --> 00:00:25,176
[ Applause ]


3
00:00:25,676 --> 00:00:26,356
>> Hi everyone.


4
00:00:27,316 --> 00:00:29,336
Welcome to session 221, TextKit


5
00:00:29,336 --> 00:00:29,906
Best Practices.


6
00:00:29,906 --> 00:00:31,086
I'm Donna Tom.


7
00:00:31,086 --> 00:00:32,826
And I'm the TextKit engineer.


8
00:00:32,826 --> 00:00:35,076
And my colleague Emily Van Haren


9
00:00:35,076 --> 00:00:36,116
from authoring tools will be


10
00:00:36,116 --> 00:00:36,806
joining me today.


11
00:00:37,036 --> 00:00:38,796
And we're both really excited to


12
00:00:38,796 --> 00:00:39,756
share with you some best


13
00:00:39,756 --> 00:00:40,866
practices for working with


14
00:00:40,866 --> 00:00:41,286
TextKit.


15
00:00:41,676 --> 00:00:42,746
So let's get started.


16
00:00:43,416 --> 00:00:45,786
First, we're going to review


17
00:00:45,786 --> 00:00:47,086
some key concepts for working


18
00:00:47,086 --> 00:00:47,616
with TextKit.


19
00:00:48,466 --> 00:00:49,916
Then, we'll dive into some


20
00:00:49,916 --> 00:00:51,316
examples to illustrate how to


21
00:00:51,316 --> 00:00:52,596
apply the key concepts in your


22
00:00:52,596 --> 00:00:52,663
app.


23
00:00:53,916 --> 00:00:55,316
And finally, we'll wrap up with


24
00:00:55,316 --> 00:00:56,716
some best practices in the areas


25
00:00:56,716 --> 00:00:58,706
of correctness, performance, and


26
00:00:58,706 --> 00:00:59,116
security.


27
00:01:00,496 --> 00:01:02,476
So let's start with the key


28
00:01:03,136 --> 00:01:03,496
concepts.


29
00:01:03,496 --> 00:01:04,346
Now to make sure we're on the


30
00:01:04,385 --> 00:01:05,726
same page, we're going to start


31
00:01:05,726 --> 00:01:06,496
at the very beginning.


32
00:01:07,526 --> 00:01:08,616
What is TextKit?


33
00:01:09,126 --> 00:01:12,016
And your first instinct might be


34
00:01:12,296 --> 00:01:13,626
to open a shiny new playground


35
00:01:13,626 --> 00:01:15,276
in Xcode and type import


36
00:01:15,426 --> 00:01:17,716
TextKit, except if you've ever


37
00:01:17,716 --> 00:01:19,116
actually tried this, you found


38
00:01:19,116 --> 00:01:19,796
that it doesn't work.


39
00:01:20,216 --> 00:01:23,236
And that's because TextKit is a


40
00:01:23,236 --> 00:01:24,456
little different than other


41
00:01:24,456 --> 00:01:25,406
frameworks you might have used.


42
00:01:26,306 --> 00:01:27,116
You don't have to import


43
00:01:27,116 --> 00:01:28,336
anything special to use it.


44
00:01:29,376 --> 00:01:30,776
The text controls in UIKit and


45
00:01:30,776 --> 00:01:32,866
AppKit are built on top of


46
00:01:32,866 --> 00:01:33,246
TextKit.


47
00:01:33,806 --> 00:01:34,946
And so if you've ever used a


48
00:01:34,946 --> 00:01:37,026
label, the text field, or a text


49
00:01:37,066 --> 00:01:38,426
view, you've actually used


50
00:01:38,426 --> 00:01:38,846
TextKit.


51
00:01:39,846 --> 00:01:40,796
And TextKit pulls together


52
00:01:40,796 --> 00:01:42,386
powerful underlying technologies


53
00:01:42,596 --> 00:01:44,146
such as Core Text, Core Graphics


54
00:01:44,296 --> 00:01:46,036
and Foundation to make it simple


55
00:01:46,036 --> 00:01:47,306
and seamless for your apps to


56
00:01:47,306 --> 00:01:47,756
show text.


57
00:01:49,176 --> 00:01:50,396
And every time you use one of


58
00:01:50,396 --> 00:01:51,806
these built-in controls, you're


59
00:01:51,806 --> 00:01:53,416
using the power of TextKit to


60
00:01:53,416 --> 00:01:55,156
show or edit text in a fully,


61
00:01:55,156 --> 00:01:56,826
internationalized, localizable


62
00:01:56,826 --> 00:01:58,186
manner without having to


63
00:01:58,186 --> 00:01:59,426
directly use these underlying


64
00:01:59,426 --> 00:02:01,086
technologies or understand the


65
00:02:01,086 --> 00:02:02,566
intricacies of complex scripts.


66
00:02:02,626 --> 00:02:04,356
And there are a lot of things


67
00:02:04,356 --> 00:02:05,706
you get for free too like all of


68
00:02:05,706 --> 00:02:06,736
these display features that you


69
00:02:06,736 --> 00:02:07,146
see here.


70
00:02:07,796 --> 00:02:10,346
And for editing, you'll also get


71
00:02:10,346 --> 00:02:11,636
access to all the tech services


72
00:02:11,636 --> 00:02:12,646
that are supported by the OS


73
00:02:12,766 --> 00:02:14,466
like accessibility, spell


74
00:02:14,466 --> 00:02:15,186
checking and more.


75
00:02:15,886 --> 00:02:16,946
And you can take advantage of


76
00:02:16,946 --> 00:02:18,276
all of these great features


77
00:02:18,406 --> 00:02:19,566
without having to write a single


78
00:02:19,566 --> 00:02:21,086
line of code and that's pretty


79
00:02:21,086 --> 00:02:21,486
awesome.


80
00:02:22,486 --> 00:02:23,716
And so with all of this


81
00:02:23,716 --> 00:02:24,406
functionality at your


82
00:02:24,406 --> 00:02:25,986
fingertips, how do you decide


83
00:02:25,986 --> 00:02:27,646
which control to use?


84
00:02:28,196 --> 00:02:29,246
So let's talk about that,


85
00:02:29,756 --> 00:02:30,796
choosing the right control for


86
00:02:30,796 --> 00:02:31,636
your situation.


87
00:02:31,946 --> 00:02:32,956
And the options are going to be


88
00:02:32,956 --> 00:02:33,926
a little bit different depending


89
00:02:33,926 --> 00:02:35,676
on whether you're using UIKit or


90
00:02:35,676 --> 00:02:36,046
AppKit.


91
00:02:36,436 --> 00:02:37,506
So let's review them separately.


92
00:02:37,506 --> 00:02:38,166
All right.


93
00:02:38,696 --> 00:02:40,466
Let's start with UIKit.


94
00:02:41,006 --> 00:02:43,296
And first you're going to


95
00:02:43,296 --> 00:02:44,456
consider whether you need text


96
00:02:44,456 --> 00:02:44,846
input.


97
00:02:45,346 --> 00:02:47,476
And if you don't need text


98
00:02:47,476 --> 00:02:49,006
input, then consider whether you


99
00:02:49,006 --> 00:02:50,406
need selection or scrolling.


100
00:02:50,976 --> 00:02:53,376
And if you don't need these,


101
00:02:53,676 --> 00:02:54,916
then you should use UILabel.


102
00:02:55,666 --> 00:02:57,276
UILabels are intended for small


103
00:02:57,276 --> 00:02:58,936
amounts of text like a few words


104
00:02:58,936 --> 00:02:59,656
or a few lines.


105
00:03:01,136 --> 00:03:02,096
And so if you have more text


106
00:03:02,136 --> 00:03:03,696
than that or if you need these


107
00:03:03,826 --> 00:03:04,546
selection or scrolling


108
00:03:04,546 --> 00:03:05,966
capabilities then you should use


109
00:03:05,966 --> 00:03:07,676
a UITextView with editing


110
00:03:07,676 --> 00:03:08,116
disabled.


111
00:03:08,116 --> 00:03:10,286
Now going back to the top.


112
00:03:10,286 --> 00:03:12,456
If you do need text input, then


113
00:03:12,456 --> 00:03:13,626
consider whether you need secure


114
00:03:13,626 --> 00:03:14,186
text entry.


115
00:03:14,186 --> 00:03:15,336
And this would be like a


116
00:03:15,336 --> 00:03:16,936
password field where the text is


117
00:03:16,936 --> 00:03:18,206
obscured and copying is


118
00:03:18,206 --> 00:03:18,666
disabled.


119
00:03:19,236 --> 00:03:21,806
And so if you need that, then


120
00:03:21,806 --> 00:03:23,726
use UITextField because this is


121
00:03:23,726 --> 00:03:25,076
the only control that supports


122
00:03:25,246 --> 00:03:26,026
secure text entry.


123
00:03:26,476 --> 00:03:29,346
Otherwise, think about how much


124
00:03:29,456 --> 00:03:30,886
text you expect to be entered.


125
00:03:32,076 --> 00:03:33,016
And if you want something that's


126
00:03:33,016 --> 00:03:34,466
like a form field input that


127
00:03:34,466 --> 00:03:36,076
only needs a line, then use


128
00:03:36,076 --> 00:03:36,836
UITextField.


129
00:03:37,126 --> 00:03:38,686
And UITextField only supports


130
00:03:38,766 --> 00:03:41,716
one line of text entry.


131
00:03:41,936 --> 00:03:42,996
Otherwise, if you need more than


132
00:03:43,176 --> 00:03:44,556
that, you can use UITextView.


133
00:03:45,106 --> 00:03:47,976
And so now here's that same


134
00:03:47,976 --> 00:03:49,206
decision process for AppKit.


135
00:03:49,206 --> 00:03:51,006
And it's similar to the UIKit


136
00:03:51,006 --> 00:03:52,286
process but there's a few small


137
00:03:52,286 --> 00:03:52,656
differences.


138
00:03:53,406 --> 00:03:55,496
So, again, you're going to start


139
00:03:55,496 --> 00:03:56,456
by considering whether you need


140
00:03:56,456 --> 00:03:57,036
text input.


141
00:03:57,596 --> 00:04:00,196
And AppKit doesn't have a label


142
00:04:00,196 --> 00:04:00,526
control.


143
00:04:00,716 --> 00:04:02,106
So if you need to display text,


144
00:04:03,116 --> 00:04:04,546
use an NSTextField and you can


145
00:04:04,546 --> 00:04:05,546
disable both editing and


146
00:04:05,546 --> 00:04:06,616
selection to get that label


147
00:04:06,616 --> 00:04:07,036
behavior.


148
00:04:07,036 --> 00:04:10,566
Now going back to the top here.


149
00:04:10,566 --> 00:04:12,286
If you do need text input, again


150
00:04:12,456 --> 00:04:13,526
ask if you need secure text


151
00:04:13,526 --> 00:04:13,806
entry.


152
00:04:13,806 --> 00:04:15,856
And if so, you can use


153
00:04:15,986 --> 00:04:16,766
NSSecureTextField.


154
00:04:17,176 --> 00:04:19,296
Otherwise, we're going to ask


155
00:04:19,296 --> 00:04:20,596
our favorite question, how much


156
00:04:20,596 --> 00:04:22,346
text do you expect?


157
00:04:23,176 --> 00:04:25,116
So NSTextView is optimized for


158
00:04:25,116 --> 00:04:26,286
performance with large amounts


159
00:04:26,286 --> 00:04:26,556
of text.


160
00:04:26,946 --> 00:04:28,416
And so if you're expecting a lot


161
00:04:28,416 --> 00:04:30,506
of text, you should use


162
00:04:31,126 --> 00:04:32,556
NSTextView otherwise you can use


163
00:04:32,556 --> 00:04:33,216
NSTextField.


164
00:04:33,946 --> 00:04:34,986
Now, unlike its UIKit


165
00:04:34,986 --> 00:04:36,926
counterpart, NSTextField does


166
00:04:36,976 --> 00:04:38,136
support multiple lines of text,


167
00:04:39,056 --> 00:04:40,086
but it's still optimized for


168
00:04:40,086 --> 00:04:41,556
shorter strings and so you


169
00:04:41,556 --> 00:04:43,076
should still use NSTextView if


170
00:04:43,076 --> 00:04:45,766
you have a lot of text.


171
00:04:45,896 --> 00:04:46,636
Now those of you who have been


172
00:04:46,636 --> 00:04:47,616
around the block a few times


173
00:04:47,616 --> 00:04:49,336
with TextKit might notice that


174
00:04:49,336 --> 00:04:50,266
the flow charts are missing an


175
00:04:50,266 --> 00:04:51,616
option and that's string


176
00:04:51,616 --> 00:04:51,896
drawing.


177
00:04:53,096 --> 00:04:54,416
And you use string drawing by


178
00:04:54,416 --> 00:04:56,016
directly calling draw in point


179
00:04:56,296 --> 00:04:58,396
or draw in rect methods under


180
00:04:58,466 --> 00:04:59,296
NSString or your


181
00:04:59,296 --> 00:05:00,236
NSAttributedString.


182
00:05:01,146 --> 00:05:02,366
And many of you may be using


183
00:05:02,366 --> 00:05:03,696
this for the performance benefit


184
00:05:03,846 --> 00:05:05,236
to avoid the overhead of view


185
00:05:05,236 --> 00:05:06,276
objects at the kit level.


186
00:05:07,606 --> 00:05:08,446
And so if you're going to go


187
00:05:08,446 --> 00:05:09,836
this route, please keep the


188
00:05:09,836 --> 00:05:10,826
following tips in mind.


189
00:05:11,696 --> 00:05:12,686
You want to use it for small


190
00:05:12,686 --> 00:05:13,676
amounts of static text.


191
00:05:14,166 --> 00:05:14,926
And you want to limit how


192
00:05:14,926 --> 00:05:16,066
frequently you call the draw


193
00:05:16,066 --> 00:05:16,396
methods.


194
00:05:17,236 --> 00:05:18,186
Now if you're calling the string


195
00:05:18,186 --> 00:05:20,296
drawing methods a lot, you might


196
00:05:20,296 --> 00:05:21,626
actually get better performance


197
00:05:21,896 --> 00:05:23,706
out of a label or a text field


198
00:05:23,846 --> 00:05:25,006
because these controls provide


199
00:05:25,006 --> 00:05:26,516
better caching, especially if


200
00:05:26,516 --> 00:05:27,306
you're using auto layout.


201
00:05:27,306 --> 00:05:29,216
And if you're drawing an


202
00:05:29,216 --> 00:05:31,056
attributed string with a lot of


203
00:05:31,056 --> 00:05:33,176
custom attributes, this could


204
00:05:33,176 --> 00:05:34,366
also be slowing down your string


205
00:05:34,366 --> 00:05:35,756
drawing because the text system


206
00:05:35,756 --> 00:05:36,936
needs to validate all of the


207
00:05:36,936 --> 00:05:38,966
attributes before rendering and


208
00:05:38,966 --> 00:05:40,386
so for best performance, you


209
00:05:40,386 --> 00:05:41,326
should strip out extra


210
00:05:41,326 --> 00:05:42,906
attributes before drawing and


211
00:05:42,906 --> 00:05:44,776
only pass in the ones that are


212
00:05:44,776 --> 00:05:46,706
needed to determine the visual


213
00:05:46,706 --> 00:05:48,236
appearance like font or like


214
00:05:48,236 --> 00:05:48,506
color.


215
00:05:49,076 --> 00:05:51,996
And finally, remember that by


216
00:05:51,996 --> 00:05:53,146
using string drawing, you'll


217
00:05:53,146 --> 00:05:54,546
miss out on all of this free


218
00:05:54,546 --> 00:05:55,746
functionality that's offered by


219
00:05:55,746 --> 00:05:57,286
the text controls, so you should


220
00:05:57,286 --> 00:05:58,746
use the text controls whenever


221
00:05:58,746 --> 00:05:59,166
possible.


222
00:05:59,726 --> 00:06:02,706
So now you know what you can do


223
00:06:02,706 --> 00:06:03,966
with TextKit just by using the


224
00:06:03,966 --> 00:06:04,796
built-in controls.


225
00:06:05,596 --> 00:06:06,686
But if you want to go beyond


226
00:06:06,766 --> 00:06:07,716
what these controls provide,


227
00:06:08,206 --> 00:06:08,986
you'll need to find the right


228
00:06:08,986 --> 00:06:10,336
customization point within the


229
00:06:10,336 --> 00:06:11,276
text stack.


230
00:06:12,376 --> 00:06:14,036
And like much of Cocoa, TextKit


231
00:06:14,036 --> 00:06:15,496
is based on the model view


232
00:06:15,496 --> 00:06:16,766
controller design pattern.


233
00:06:17,316 --> 00:06:19,356
And the text system can be


234
00:06:19,356 --> 00:06:20,946
divided into three phases that


235
00:06:20,946 --> 00:06:22,256
correspond it directly to NBC


236
00:06:22,386 --> 00:06:24,676
and that's storage, display, and


237
00:06:24,866 --> 00:06:25,236
layout.


238
00:06:25,996 --> 00:06:27,446
And so now let's take a closer


239
00:06:27,446 --> 00:06:28,916
look at the TextKit objects that


240
00:06:28,916 --> 00:06:29,946
make up each of these phases.


241
00:06:30,346 --> 00:06:32,176
And we'll start with the storage


242
00:06:32,466 --> 00:06:35,746
which corresponds to the model.


243
00:06:35,746 --> 00:06:36,866
Now NSTextStorage holds your


244
00:06:36,866 --> 00:06:38,026
string data and your attributes.


245
00:06:38,746 --> 00:06:40,166
It's a subclass of mutable


246
00:06:40,166 --> 00:06:41,806
attributed string and so you can


247
00:06:41,806 --> 00:06:43,146
work with it in the same way


248
00:06:43,146 --> 00:06:44,046
that you already know how to


249
00:06:44,046 --> 00:06:45,046
work with attributed strings.


250
00:06:46,036 --> 00:06:47,256
And my colleague Emily will show


251
00:06:47,256 --> 00:06:48,666
you some really powerful ways to


252
00:06:48,666 --> 00:06:49,896
customize the text storage a


253
00:06:49,896 --> 00:06:51,246
little bit later so stay tuned


254
00:06:51,246 --> 00:06:52,146
for that.


255
00:06:53,706 --> 00:06:55,716
Now NSTextContainer models the


256
00:06:55,716 --> 00:06:56,906
geometry of the area where your


257
00:06:56,906 --> 00:06:57,866
text will be laid out.


258
00:06:58,586 --> 00:07:00,006
And by default, it's a rectangle


259
00:07:00,306 --> 00:07:01,596
but you can customize the flow


260
00:07:01,596 --> 00:07:02,746
or the shape of the text layout


261
00:07:02,876 --> 00:07:03,486
as shown here.


262
00:07:04,096 --> 00:07:06,186
And for more detailed


263
00:07:06,186 --> 00:07:07,216
information on working with the


264
00:07:07,266 --> 00:07:08,806
storage objects, check out these


265
00:07:08,806 --> 00:07:10,606
great past WWDC sessions and


266
00:07:10,606 --> 00:07:11,246
documentation.


267
00:07:11,246 --> 00:07:12,656
And they'll be available from


268
00:07:12,656 --> 00:07:13,896
the more information link at the


269
00:07:13,896 --> 00:07:16,596
end of the session.


270
00:07:17,396 --> 00:07:18,676
And next up is the display phase


271
00:07:18,966 --> 00:07:21,156
and that corresponds to the


272
00:07:21,156 --> 00:07:21,276
view.


273
00:07:21,276 --> 00:07:22,626
And we've already talked about


274
00:07:22,626 --> 00:07:23,746
the display phase quite a bit


275
00:07:23,746 --> 00:07:24,736
when we talked about choosing


276
00:07:24,736 --> 00:07:25,396
the right control.


277
00:07:25,766 --> 00:07:26,436
And so for additional


278
00:07:26,436 --> 00:07:27,876
information, you can again check


279
00:07:27,876 --> 00:07:28,816
out these documentation


280
00:07:28,816 --> 00:07:29,186
resources.


281
00:07:29,186 --> 00:07:30,796
And they'll also be accessible


282
00:07:30,796 --> 00:07:31,986
from that more information link


283
00:07:31,986 --> 00:07:35,166
at the end of the session.


284
00:07:35,426 --> 00:07:36,586
And finally, we have the layout


285
00:07:36,586 --> 00:07:37,956
phase which corresponds to the


286
00:07:37,956 --> 00:07:38,446
controller.


287
00:07:39,026 --> 00:07:41,836
And NSLayoutManager is the only


288
00:07:41,836 --> 00:07:42,656
component in this phase.


289
00:07:42,656 --> 00:07:44,396
And let me tell you it is a


290
00:07:44,546 --> 00:07:44,806
beast.


291
00:07:46,036 --> 00:07:47,386
And I mean that in a good way


292
00:07:47,726 --> 00:07:49,256
because it's so awesome at what


293
00:07:49,256 --> 00:07:49,656
it does.


294
00:07:50,146 --> 00:07:51,316
So it's the brains of the whole


295
00:07:51,316 --> 00:07:52,056
operation.


296
00:07:52,056 --> 00:07:53,296
It coordinates changes between


297
00:07:53,296 --> 00:07:54,616
all of the phases, and it


298
00:07:54,616 --> 00:07:55,776
controls the layout process


299
00:07:55,776 --> 00:07:55,996
itself.


300
00:07:56,066 --> 00:07:59,296
So here's a quick overview of


301
00:07:59,296 --> 00:08:00,546
how that layout process works.


302
00:08:01,426 --> 00:08:03,166
So text layout happens after the


303
00:08:03,216 --> 00:08:04,596
system fixes attributes in the


304
00:08:04,596 --> 00:08:06,006
text storage to remove


305
00:08:06,006 --> 00:08:08,206
inconsistencies like making sure


306
00:08:08,206 --> 00:08:09,626
that all the characters in the


307
00:08:09,626 --> 00:08:11,206
string are covered by fonts that


308
00:08:11,246 --> 00:08:12,156
support displaying those


309
00:08:12,186 --> 00:08:12,626
characters.


310
00:08:13,086 --> 00:08:14,906
And so in this example, the


311
00:08:14,906 --> 00:08:15,996
Times New Roman font is


312
00:08:16,056 --> 00:08:17,566
specified for the entire string,


313
00:08:18,096 --> 00:08:19,486
but this font doesn't support


314
00:08:19,936 --> 00:08:21,486
displaying Japanese kanji or


315
00:08:21,486 --> 00:08:21,906
emoji.


316
00:08:23,136 --> 00:08:24,536
And so after attribute fixing,


317
00:08:24,536 --> 00:08:25,446
your text storage will look


318
00:08:25,476 --> 00:08:26,876
something like this with an


319
00:08:26,876 --> 00:08:28,146
appropriate Japanese font


320
00:08:28,376 --> 00:08:29,346
assigned to the Japanese


321
00:08:29,346 --> 00:08:31,186
characters and the emoji font


322
00:08:31,186 --> 00:08:32,476
assigned to the emoji character.


323
00:08:32,476 --> 00:08:33,145
All right.


324
00:08:33,856 --> 00:08:36,006
So once the attributes are


325
00:08:36,006 --> 00:08:37,405
fixed, the layout process can


326
00:08:37,405 --> 00:08:37,666
begin.


327
00:08:37,666 --> 00:08:39,606
And we can think of layout in


328
00:08:39,666 --> 00:08:41,806
two steps: glyph generation


329
00:08:41,956 --> 00:08:42,866
followed by glyph layout.


330
00:08:44,256 --> 00:08:45,366
And once they're laid out,


331
00:08:45,646 --> 00:08:46,456
they're ready for display.


332
00:08:47,086 --> 00:08:48,606
But wait a minute.


333
00:08:48,946 --> 00:08:49,356
What's a glyph?


334
00:08:50,206 --> 00:08:51,226
Let's back up and review that.


335
00:08:52,146 --> 00:08:53,296
A glyph is a visual


336
00:08:53,296 --> 00:08:54,536
representation of one or more


337
00:08:54,536 --> 00:08:55,046
characters.


338
00:08:55,536 --> 00:08:56,916
And as you can see here, the


339
00:08:56,916 --> 00:08:58,056
mapping between characters and


340
00:08:58,056 --> 00:09:00,066
glyphs is not always one-to-one.


341
00:09:01,476 --> 00:09:03,286
So here this string ffi has


342
00:09:03,386 --> 00:09:04,996
three characters, but it could


343
00:09:04,996 --> 00:09:06,476
be represented by a single glyph


344
00:09:06,556 --> 00:09:07,096
for the ligature.


345
00:09:07,096 --> 00:09:09,176
And you can go in the other


346
00:09:09,176 --> 00:09:09,726
direction too.


347
00:09:10,456 --> 00:09:11,626
Here we have n [inaudible] which


348
00:09:11,846 --> 00:09:13,436
is a single character that can


349
00:09:13,436 --> 00:09:14,436
be represented by multiple


350
00:09:14,436 --> 00:09:16,786
glyphs: one for the n and one


351
00:09:16,786 --> 00:09:17,226
for the tilde.


352
00:09:18,836 --> 00:09:20,416
And so going back to our diagram


353
00:09:20,416 --> 00:09:22,456
here, we have NSLayoutManager


354
00:09:22,456 --> 00:09:24,206
performing glyph generation and


355
00:09:24,206 --> 00:09:24,726
glyph layout.


356
00:09:25,486 --> 00:09:27,036
And glyph generation is where


357
00:09:27,036 --> 00:09:28,096
the layout manager takes the


358
00:09:28,096 --> 00:09:29,446
characters and figures out what


359
00:09:29,476 --> 00:09:30,396
glyphs need to be drawn.


360
00:09:31,276 --> 00:09:32,716
And glyph layout is where the


361
00:09:32,716 --> 00:09:34,056
layout manager positions those


362
00:09:34,056 --> 00:09:35,646
glyphs for display in your view.


363
00:09:36,116 --> 00:09:38,416
And there's a lot more to learn


364
00:09:38,416 --> 00:09:39,876
about the layout manager from


365
00:09:39,876 --> 00:09:41,536
these past WWDC sessions and


366
00:09:41,536 --> 00:09:42,216
documentation.


367
00:09:42,596 --> 00:09:43,916
And you can access them from,


368
00:09:44,356 --> 00:09:45,596
you guessed it, the more


369
00:09:45,596 --> 00:09:46,936
information link at the end of


370
00:09:47,596 --> 00:09:49,416
the session.


371
00:09:49,576 --> 00:09:51,976
Okay. So now you understand the


372
00:09:51,976 --> 00:09:53,096
phases of the text system.


373
00:09:53,466 --> 00:09:54,296
And you know the TextKit


374
00:09:54,296 --> 00:09:55,366
components that make up each


375
00:09:55,366 --> 00:09:55,666
phase.


376
00:09:57,276 --> 00:09:58,796
So now let's explore choosing


377
00:09:58,796 --> 00:10:00,336
the right configuration of these


378
00:10:00,336 --> 00:10:01,826
components to create different


379
00:10:02,686 --> 00:10:02,876
effects.


380
00:10:03,376 --> 00:10:04,806
So this is your standard


381
00:10:04,806 --> 00:10:05,466
configuration.


382
00:10:05,466 --> 00:10:07,666
And when you drag and drop a


383
00:10:07,746 --> 00:10:08,816
text view from Interface


384
00:10:08,816 --> 00:10:10,116
Builder, you'll automatically


385
00:10:10,116 --> 00:10:11,896
get one of each component as


386
00:10:11,896 --> 00:10:12,306
shown here.


387
00:10:13,216 --> 00:10:14,416
And most the time this is all


388
00:10:14,416 --> 00:10:17,286
you're going to need.


389
00:10:17,566 --> 00:10:19,046
If you want a multiple page or a


390
00:10:19,046 --> 00:10:20,776
multiple column layout, you can


391
00:10:20,776 --> 00:10:22,426
use pairs of text containers and


392
00:10:22,426 --> 00:10:24,076
text views, one pair for each


393
00:10:24,076 --> 00:10:24,756
page or column.


394
00:10:25,656 --> 00:10:26,856
And you can hook all of these up


395
00:10:26,916 --> 00:10:28,166
to the same layout manager in


396
00:10:28,166 --> 00:10:29,526
the same text storage so that


397
00:10:29,526 --> 00:10:30,866
they share the layout


398
00:10:30,866 --> 00:10:31,856
information in the backing


399
00:10:31,936 --> 00:10:32,166
store.


400
00:10:32,746 --> 00:10:35,016
And if you want different


401
00:10:35,016 --> 00:10:36,156
layouts in each of you, you can


402
00:10:36,156 --> 00:10:37,906
do that too, just use multiple


403
00:10:37,906 --> 00:10:38,576
layout managers.


404
00:10:39,006 --> 00:10:40,416
And, again, since the text


405
00:10:40,416 --> 00:10:41,726
shares the same backing store,


406
00:10:42,246 --> 00:10:43,626
updating that text will update


407
00:10:43,626 --> 00:10:44,186
all of the views.


408
00:10:44,886 --> 00:10:47,796
Now we didn't go into too much


409
00:10:47,796 --> 00:10:48,636
detail about these


410
00:10:48,636 --> 00:10:49,986
configurations because there's a


411
00:10:49,986 --> 00:10:50,926
great past session that's


412
00:10:50,926 --> 00:10:52,496
already done that so check out


413
00:10:52,546 --> 00:10:54,686
WWDC 2010 session Advanced Cocoa


414
00:10:54,686 --> 00:10:55,996
Text Tips and Tricks.


415
00:10:55,996 --> 00:10:57,836
And this will be accessible from


416
00:10:57,836 --> 00:10:59,006
that more information link at


417
00:10:59,006 --> 00:11:02,476
the end of the session.


418
00:11:02,626 --> 00:11:02,946
All right.


419
00:11:04,036 --> 00:11:04,946
So we've looked at the built-in


420
00:11:04,946 --> 00:11:05,576
text controls.


421
00:11:06,296 --> 00:11:07,236
We've looked at the components


422
00:11:07,236 --> 00:11:07,766
in TextKit.


423
00:11:07,976 --> 00:11:09,016
And we've look at how to


424
00:11:09,016 --> 00:11:10,336
configure those components to


425
00:11:10,336 --> 00:11:11,066
achieve different effects.


426
00:11:11,066 --> 00:11:12,956
And there's a lot that you can


427
00:11:12,956 --> 00:11:14,406
do with that knowledge already,


428
00:11:14,636 --> 00:11:15,586
but if you need even more,


429
00:11:16,196 --> 00:11:17,056
you'll need to extend and


430
00:11:17,056 --> 00:11:18,216
customize parts of TextKit


431
00:11:18,216 --> 00:11:18,596
yourself.


432
00:11:19,766 --> 00:11:21,076
And so now we'll talk a little


433
00:11:21,076 --> 00:11:22,166
bit about choosing the right


434
00:11:22,166 --> 00:11:23,766
approach for doing that.


435
00:11:24,826 --> 00:11:26,516
And choosing the right approach


436
00:11:26,556 --> 00:11:27,686
is like building up your text


437
00:11:27,686 --> 00:11:28,036
toolbox.


438
00:11:28,616 --> 00:11:29,806
It's like going to the store


439
00:11:29,806 --> 00:11:30,606
because you need a hammer.


440
00:11:30,606 --> 00:11:32,056
And then when you get there, you


441
00:11:32,056 --> 00:11:33,246
encounter this giant wall of


442
00:11:33,246 --> 00:11:34,216
hammers to choose from.


443
00:11:34,966 --> 00:11:36,086
And you want to pick your hammer


444
00:11:36,216 --> 00:11:38,206
that can do the job and ideally


445
00:11:38,286 --> 00:11:39,526
the least expensive one that


446
00:11:39,526 --> 00:11:40,346
will do what you need.


447
00:11:40,896 --> 00:11:43,416
And so these are the hammers


448
00:11:43,566 --> 00:11:44,456
that are available to us.


449
00:11:45,396 --> 00:11:46,836
Delegation is like your standard


450
00:11:46,836 --> 00:11:48,046
hammer with the claw on the end,


451
00:11:48,176 --> 00:11:48,866
and it's used to perform


452
00:11:48,866 --> 00:11:49,626
multiple tasks.


453
00:11:50,316 --> 00:11:51,466
So the delegates have a lot of


454
00:11:51,466 --> 00:11:52,566
different customization hooks


455
00:11:52,706 --> 00:11:53,766
and most of the time they'll get


456
00:11:53,766 --> 00:11:56,206
the job done for you.


457
00:11:56,426 --> 00:11:57,686
Notifications is like a


458
00:11:57,686 --> 00:11:58,446
ball-peen hammer.


459
00:11:58,596 --> 00:11:59,666
And this has a ball on the end


460
00:11:59,666 --> 00:12:01,786
instead of a claw so it's more


461
00:12:01,786 --> 00:12:03,196
specialized and it's better


462
00:12:03,296 --> 00:12:04,866
suited for certain tasks, but


463
00:12:04,866 --> 00:12:06,466
it's not as versatile as the


464
00:12:06,466 --> 00:12:07,956
standard hammer of delegation.


465
00:12:08,506 --> 00:12:11,546
And finally, subclassing is your


466
00:12:11,546 --> 00:12:12,106
sledgehammer.


467
00:12:13,496 --> 00:12:14,596
The sledgehammer is very


468
00:12:14,596 --> 00:12:16,096
powerful, and you can use it for


469
00:12:16,096 --> 00:12:17,596
just about anything that you


470
00:12:17,596 --> 00:12:19,136
would need a hammer for but it's


471
00:12:19,136 --> 00:12:20,466
probably overkill for a lot of


472
00:12:20,466 --> 00:12:20,756
things.


473
00:12:21,386 --> 00:12:23,396
And with that, I'd like to


474
00:12:23,396 --> 00:12:24,606
invite Emily up to show us how


475
00:12:24,606 --> 00:12:25,596
to use these different kinds of


476
00:12:25,596 --> 00:12:25,936
hammers.


477
00:12:26,326 --> 00:12:26,656
Emily.


478
00:12:27,516 --> 00:12:32,166
[ Applause ]


479
00:12:32,666 --> 00:12:33,216
>> Thank you, Donna.


480
00:12:34,396 --> 00:12:36,106
So, as developers, we have a


481
00:12:36,106 --> 00:12:37,506
collection of controls to choose


482
00:12:37,566 --> 00:12:39,676
from, various configurations,


483
00:12:40,106 --> 00:12:41,036
and a wide range of


484
00:12:41,036 --> 00:12:42,786
customization options to achieve


485
00:12:42,786 --> 00:12:43,266
what we need.


486
00:12:44,156 --> 00:12:45,406
So our tool chest is stocked


487
00:12:45,496 --> 00:12:47,656
full, but how do we know what


488
00:12:47,656 --> 00:12:48,346
tools to choose?


489
00:12:49,066 --> 00:12:51,696
So we're going to take a look at


490
00:12:51,696 --> 00:12:52,886
some examples of apps that


491
00:12:52,886 --> 00:12:54,326
harness the power of TextKit.


492
00:12:55,326 --> 00:12:56,326
And we don't have to look very


493
00:12:56,326 --> 00:12:58,436
far because almost every app


494
00:12:58,496 --> 00:13:00,536
that we use displays or edits


495
00:13:01,436 --> 00:13:01,586
text.


496
00:13:03,336 --> 00:13:04,666
We're going to start by looking


497
00:13:04,666 --> 00:13:05,776
at two apps that we're all


498
00:13:05,826 --> 00:13:07,826
familiar with and then go


499
00:13:07,826 --> 00:13:08,846
through the steps of building


500
00:13:08,846 --> 00:13:09,136
our own.


501
00:13:09,706 --> 00:13:12,086
So the first app we're going to


502
00:13:12,086 --> 00:13:13,816
look at is Apple News on iOS,


503
00:13:14,576 --> 00:13:15,906
which is a beautiful app that


504
00:13:15,906 --> 00:13:18,926
displays text in a personalized


505
00:13:18,926 --> 00:13:19,936
and curated articles.


506
00:13:20,646 --> 00:13:23,586
So here's an example of an


507
00:13:23,586 --> 00:13:25,326
article that is featured in the


508
00:13:25,366 --> 00:13:26,106
spotlight tab.


509
00:13:27,186 --> 00:13:29,616
Now the top of the app shows


510
00:13:29,616 --> 00:13:31,016
some details about this article.


511
00:13:32,046 --> 00:13:33,846
Now how could we use TextKit to


512
00:13:33,846 --> 00:13:34,976
re-create this look and feel?


513
00:13:38,176 --> 00:13:39,356
So let's consider the flow chart


514
00:13:39,356 --> 00:13:41,156
that Donna showed us earlier to


515
00:13:41,156 --> 00:13:42,386
pick the control that's best


516
00:13:42,386 --> 00:13:43,416
suited for this example.


517
00:13:43,986 --> 00:13:47,186
So we have a handful of text


518
00:13:47,186 --> 00:13:49,506
controls to choose from, but


519
00:13:49,596 --> 00:13:50,946
since we want to display small


520
00:13:50,946 --> 00:13:52,776
amounts of text, each on a


521
00:13:52,876 --> 00:13:54,946
single line, we'll use a label.


522
00:13:54,946 --> 00:13:58,806
Now we can see that there is a


523
00:13:58,806 --> 00:14:00,446
ton of customization options in


524
00:14:00,446 --> 00:14:01,256
the inspector panel.


525
00:14:01,846 --> 00:14:03,756
So we're going to go ahead and


526
00:14:03,756 --> 00:14:05,076
change the text to spotlight.


527
00:14:05,716 --> 00:14:07,776
We're going to change the font


528
00:14:08,226 --> 00:14:09,336
to use the body style.


529
00:14:09,926 --> 00:14:12,616
And we're going to enable


530
00:14:12,616 --> 00:14:14,546
dynamic type, which allows those


531
00:14:14,546 --> 00:14:15,866
with accessibility settings


532
00:14:15,866 --> 00:14:17,956
enabled to see text in a font


533
00:14:18,026 --> 00:14:19,236
size and style that is


534
00:14:19,236 --> 00:14:20,306
appropriate for their needs.


535
00:14:21,026 --> 00:14:23,266
Now it's great that we can


536
00:14:23,266 --> 00:14:24,216
customize this label in


537
00:14:24,216 --> 00:14:25,966
Interface Builder, but we can


538
00:14:25,966 --> 00:14:27,196
also see all these properties in


539
00:14:27,276 --> 00:14:27,596
Swift.


540
00:14:28,826 --> 00:14:30,616
So we can set the text and the


541
00:14:30,616 --> 00:14:31,626
formatting properties


542
00:14:31,846 --> 00:14:33,036
dynamically at runtime.


543
00:14:33,036 --> 00:14:36,266
Now back in Interface Builder,


544
00:14:36,866 --> 00:14:38,276
we'll go ahead and add two more


545
00:14:38,276 --> 00:14:38,646
labels.


546
00:14:40,206 --> 00:14:41,536
Now everything fits pretty well,


547
00:14:42,146 --> 00:14:44,146
but we have one more thing we


548
00:14:44,146 --> 00:14:44,786
need to do here.


549
00:14:46,286 --> 00:14:47,586
So looking back at Apple News,


550
00:14:47,716 --> 00:14:48,876
we can see that the text on the


551
00:14:48,876 --> 00:14:50,246
right is actually displayed with


552
00:14:50,246 --> 00:14:51,416
two different colors.


553
00:14:51,516 --> 00:14:53,226
Part of it's black and part of


554
00:14:53,226 --> 00:14:53,676
it's white.


555
00:14:55,006 --> 00:14:56,016
Now we could achieve this with


556
00:14:56,016 --> 00:14:57,876
two separate labels, but if we


557
00:14:57,876 --> 00:15:00,066
wanted to use just one label, we


558
00:15:00,066 --> 00:15:01,486
wouldn't be able to do this in


559
00:15:01,486 --> 00:15:02,356
Interface Builder.


560
00:15:02,836 --> 00:15:06,156
So how could we do this?


561
00:15:06,546 --> 00:15:07,646
Well, we can take advantage of


562
00:15:07,646 --> 00:15:09,216
the power and flexibility of


563
00:15:09,216 --> 00:15:10,056
attributed strings.


564
00:15:11,856 --> 00:15:13,556
Now an attributed string is a


565
00:15:13,556 --> 00:15:15,026
run of characters that can have


566
00:15:15,026 --> 00:15:16,796
attributes applied to ranges of


567
00:15:16,796 --> 00:15:17,236
characters.


568
00:15:18,076 --> 00:15:19,246
Now some attributes you get for


569
00:15:19,246 --> 00:15:21,506
free like the default font and


570
00:15:21,506 --> 00:15:23,766
text color, but we can override


571
00:15:23,766 --> 00:15:24,796
these attributes with our own


572
00:15:24,796 --> 00:15:25,156
values.


573
00:15:25,956 --> 00:15:27,216
In this case, we're going to set


574
00:15:27,216 --> 00:15:28,426
part of our string's text color


575
00:15:28,426 --> 00:15:28,756
to white.


576
00:15:28,756 --> 00:15:32,796
Now to see attributed string in


577
00:15:32,926 --> 00:15:34,386
action, we'll use the add


578
00:15:34,556 --> 00:15:35,646
attribute method on


579
00:15:35,706 --> 00:15:37,606
NSMutableAttributedString to set


580
00:15:37,606 --> 00:15:39,376
the text color to white just for


581
00:15:39,376 --> 00:15:40,266
the range that we want.


582
00:15:41,506 --> 00:15:42,816
And this time we'll set the


583
00:15:42,816 --> 00:15:44,476
attributed text property on our


584
00:15:44,476 --> 00:15:44,796
label.


585
00:15:45,256 --> 00:15:49,586
At runtime, this looks pretty


586
00:15:50,066 --> 00:15:50,246
spiffy.


587
00:15:51,336 --> 00:15:53,516
Now UILabels were a great choice


588
00:15:53,516 --> 00:15:55,846
for this sort of text.


589
00:15:55,846 --> 00:15:56,876
Now if we look at the bottom of


590
00:15:56,876 --> 00:15:57,846
the screen, we'll see a


591
00:15:57,966 --> 00:15:58,366
headline.


592
00:15:58,546 --> 00:15:59,666
Now this is also text, but it's


593
00:15:59,666 --> 00:16:01,516
a little bit bigger and it spans


594
00:16:01,516 --> 00:16:02,216
multiple lines.


595
00:16:02,826 --> 00:16:05,956
Another thing that makes this


596
00:16:05,956 --> 00:16:06,976
text different is that it's


597
00:16:06,976 --> 00:16:07,616
selectable.


598
00:16:08,206 --> 00:16:10,676
So which control should we use


599
00:16:10,676 --> 00:16:11,166
this time?


600
00:16:12,376 --> 00:16:14,076
Now both text field and text


601
00:16:14,076 --> 00:16:16,246
view support selection but text


602
00:16:16,246 --> 00:16:18,206
field is meant for usually just


603
00:16:18,206 --> 00:16:18,706
one line.


604
00:16:19,306 --> 00:16:21,596
So in this case, since our


605
00:16:21,596 --> 00:16:22,716
headline can span multiple


606
00:16:22,716 --> 00:16:25,206
lines, we're going to use a text


607
00:16:26,386 --> 00:16:26,496
view.


608
00:16:26,716 --> 00:16:28,126
Now when we put a text view onto


609
00:16:28,126 --> 00:16:29,596
our storyboard, we can see that


610
00:16:29,596 --> 00:16:31,046
we get a lot of lorem ipsum text


611
00:16:31,236 --> 00:16:31,706
by default.


612
00:16:32,606 --> 00:16:33,456
So we're going to go ahead and


613
00:16:33,456 --> 00:16:35,286
change the text in the inspector


614
00:16:35,366 --> 00:16:35,626
panel.


615
00:16:37,236 --> 00:16:38,096
We're also going to change the


616
00:16:38,166 --> 00:16:39,396
font to look a little bit more


617
00:16:39,396 --> 00:16:40,166
like Apple News.


618
00:16:40,806 --> 00:16:43,276
And we want to disable the


619
00:16:43,276 --> 00:16:44,316
editing feature because the


620
00:16:44,316 --> 00:16:45,646
headline isn't really editable.


621
00:16:46,246 --> 00:16:49,386
Now UITextView scroll by default


622
00:16:49,426 --> 00:16:51,336
because they are a subclass of


623
00:16:51,336 --> 00:16:52,136
UIScrollView.


624
00:16:53,156 --> 00:16:54,746
But if we want our text view to


625
00:16:54,746 --> 00:16:57,046
play well with auto layout, we


626
00:16:57,046 --> 00:16:58,126
want to disable scrolling.


627
00:16:59,066 --> 00:17:00,456
So this will allow the bounds of


628
00:17:00,456 --> 00:17:02,466
our text view to resize to fit


629
00:17:03,256 --> 00:17:05,296
the text.


630
00:17:05,455 --> 00:17:07,465
Last but not least, this white


631
00:17:07,496 --> 00:17:09,056
background really needs to go,


632
00:17:09,906 --> 00:17:10,826
so we're going to set it to


633
00:17:10,826 --> 00:17:11,506
transparent.


634
00:17:12,675 --> 00:17:13,886
Now Interface Builder made it


635
00:17:13,886 --> 00:17:15,205
really easy to customize this


636
00:17:15,246 --> 00:17:16,695
text view but just like our


637
00:17:16,695 --> 00:17:18,596
labels before, we can set all


638
00:17:18,596 --> 00:17:19,076
this in code.


639
00:17:20,026 --> 00:17:21,586
So here in Swift, we can set the


640
00:17:21,586 --> 00:17:23,036
text and the formatting


641
00:17:23,036 --> 00:17:24,606
properties dynamically at


642
00:17:24,606 --> 00:17:24,906
runtime.


643
00:17:26,386 --> 00:17:27,506
So we looked at Apple News to


644
00:17:27,506 --> 00:17:28,546
pick the right control, but now


645
00:17:29,396 --> 00:17:30,196
we're going to look at a


646
00:17:30,196 --> 00:17:32,096
different app that we're all


647
00:17:32,096 --> 00:17:33,216
familiar with to choose the


648
00:17:33,216 --> 00:17:36,036
right configuration and that's


649
00:17:36,336 --> 00:17:36,786
TextEdit.


650
00:17:37,516 --> 00:17:39,476
Now TextEdit is an app on macOS


651
00:17:40,286 --> 00:17:42,136
that handles display and editing


652
00:17:42,196 --> 00:17:43,406
of rich text content.


653
00:17:44,946 --> 00:17:46,156
Now what most people don't know


654
00:17:46,346 --> 00:17:48,396
is that TextEdit is actually a


655
00:17:48,396 --> 00:17:49,656
really thin wrapper around


656
00:17:49,876 --> 00:17:50,526
NSTextView.


657
00:17:51,826 --> 00:17:52,906
So I want to take a moment to


658
00:17:52,906 --> 00:17:54,646
marvel at just how much we get


659
00:17:54,646 --> 00:17:56,436
for free with TextKit.


660
00:17:57,006 --> 00:17:59,156
So this is the inspector bar,


661
00:17:59,526 --> 00:18:00,956
and we get this for free just by


662
00:18:00,986 --> 00:18:02,456
checking a checkbox in Interface


663
00:18:02,456 --> 00:18:02,796
Builder.


664
00:18:03,396 --> 00:18:04,716
And right below it is a ruler


665
00:18:04,716 --> 00:18:06,456
view which we also get for free


666
00:18:06,696 --> 00:18:09,006
just by enabling it.


667
00:18:09,006 --> 00:18:10,116
And everything below that is


668
00:18:10,206 --> 00:18:12,996
just a text view.


669
00:18:13,206 --> 00:18:15,296
Actually, it's a text view, text


670
00:18:15,296 --> 00:18:17,346
container, layout manager, and


671
00:18:17,346 --> 00:18:18,066
text storage.


672
00:18:18,866 --> 00:18:19,756
Now this is the standard


673
00:18:19,756 --> 00:18:21,216
configuration for both


674
00:18:21,216 --> 00:18:24,966
NSTextView and UITextView, but


675
00:18:24,966 --> 00:18:26,746
the similarities mostly stop


676
00:18:26,826 --> 00:18:27,056
there.


677
00:18:27,646 --> 00:18:30,556
So, for example, tables are only


678
00:18:30,556 --> 00:18:31,896
supported in NSTextView.


679
00:18:32,696 --> 00:18:34,386
And marveling again at the power


680
00:18:34,636 --> 00:18:36,336
that we get for free, TextKit


681
00:18:36,336 --> 00:18:37,576
provides a table editor that


682
00:18:37,576 --> 00:18:38,746
does all the heavy lifting for


683
00:18:39,556 --> 00:18:39,646
us.


684
00:18:42,476 --> 00:18:44,026
Now when we use TextEdit, we're


685
00:18:44,026 --> 00:18:45,336
often editing large amounts of


686
00:18:45,336 --> 00:18:45,596
text.


687
00:18:46,686 --> 00:18:48,026
Sometimes we paste in a lot of


688
00:18:48,026 --> 00:18:49,446
lorem ipsum to see that we also


689
00:18:49,446 --> 00:18:50,666
get a spell-checker for free.


690
00:18:51,396 --> 00:18:52,776
But really what we want to see


691
00:18:52,936 --> 00:18:54,126
is that when we use the format


692
00:18:54,126 --> 00:18:55,976
menu to choose wrap to page, we


693
00:18:56,466 --> 00:18:58,706
end up with it looking a little


694
00:18:58,706 --> 00:18:59,626
bit more like a page.


695
00:18:59,926 --> 00:19:00,716
We can see that the text


696
00:19:00,756 --> 00:19:02,956
container has been resized to


697
00:19:02,956 --> 00:19:04,386
match the dimensions of a piece


698
00:19:04,976 --> 00:19:06,056
of paper.


699
00:19:06,176 --> 00:19:07,696
Now if we scroll down, we can


700
00:19:07,696 --> 00:19:08,866
see that the text jumps from the


701
00:19:08,866 --> 00:19:09,946
first page to the second.


702
00:19:10,886 --> 00:19:12,116
Now the standard configuration


703
00:19:12,116 --> 00:19:13,266
doesn't really support layout


704
00:19:13,266 --> 00:19:13,636
like this.


705
00:19:15,066 --> 00:19:16,626
Sure enough, this layout uses


706
00:19:16,626 --> 00:19:17,856
two text views and text


707
00:19:17,856 --> 00:19:18,326
containers.


708
00:19:19,076 --> 00:19:20,006
Now they're still managed by the


709
00:19:20,106 --> 00:19:21,276
same layout manager and text


710
00:19:21,276 --> 00:19:22,626
storage, which allows the text


711
00:19:22,626 --> 00:19:24,176
to freely jump from one page to


712
00:19:25,016 --> 00:19:26,566
the next.


713
00:19:26,776 --> 00:19:27,926
Now if you'd like to see more


714
00:19:27,926 --> 00:19:29,276
about how TextEdit works, you


715
00:19:29,276 --> 00:19:31,136
can actually find its source in


716
00:19:31,136 --> 00:19:32,116
the guides and sample codes


717
00:19:32,116 --> 00:19:32,546
library.


718
00:19:32,546 --> 00:19:36,046
So we've picked the right


719
00:19:36,046 --> 00:19:37,666
controls, we've picked the right


720
00:19:37,666 --> 00:19:39,716
configuration, but sometimes we


721
00:19:39,716 --> 00:19:41,016
actually need to hammer on these


722
00:19:41,096 --> 00:19:42,126
to achieve what we want.


723
00:19:43,346 --> 00:19:44,386
But how do we decide which


724
00:19:44,386 --> 00:19:45,076
hammer to use?


725
00:19:45,806 --> 00:19:49,006
So we're going to try and pick


726
00:19:49,006 --> 00:19:50,166
the right hammer for the job


727
00:19:50,306 --> 00:19:51,526
when we go through the steps of


728
00:19:51,526 --> 00:19:53,146
building a journal app together.


729
00:19:54,516 --> 00:19:55,876
We'll start by putting today's


730
00:19:55,946 --> 00:19:57,056
date on to the window.


731
00:19:58,316 --> 00:19:59,546
Now we don't have UILabels in


732
00:19:59,546 --> 00:20:01,226
AppKit, but we can make a text


733
00:20:01,226 --> 00:20:02,476
field behave like a label.


734
00:20:03,716 --> 00:20:05,396
All we need to do is disable


735
00:20:05,396 --> 00:20:05,766
editing.


736
00:20:06,366 --> 00:20:09,116
Now for the journal entry part


737
00:20:09,116 --> 00:20:10,246
of the window, we're going to


738
00:20:10,246 --> 00:20:10,976
use a text view.


739
00:20:12,206 --> 00:20:13,676
So in the inspector, we can make


740
00:20:13,676 --> 00:20:14,706
sure that the text view is


741
00:20:14,706 --> 00:20:16,916
editable and selectable and


742
00:20:16,916 --> 00:20:18,596
supports rich text and undo.


743
00:20:18,596 --> 00:20:21,916
We're going to add a couple of


744
00:20:21,916 --> 00:20:23,006
text fields to the bottom of the


745
00:20:23,006 --> 00:20:24,056
window as well so that we can


746
00:20:24,056 --> 00:20:25,266
show how many words have been


747
00:20:25,266 --> 00:20:25,566
written.


748
00:20:26,166 --> 00:20:29,746
Now when we run our app, we want


749
00:20:29,746 --> 00:20:30,766
the word count at the bottom to


750
00:20:30,766 --> 00:20:32,836
change, so let's find the right


751
00:20:32,886 --> 00:20:33,676
hammer for this job.


752
00:20:33,676 --> 00:20:36,446
Now we can either conform to a


753
00:20:36,446 --> 00:20:38,416
delegate, handle a notification


754
00:20:38,836 --> 00:20:39,266
or subclass.


755
00:20:39,266 --> 00:20:41,796
But in this case, we're going to


756
00:20:41,796 --> 00:20:42,636
use a small hammer.


757
00:20:42,916 --> 00:20:43,756
And we're going to listen for a


758
00:20:43,756 --> 00:20:45,226
notification from text storage.


759
00:20:46,726 --> 00:20:47,886
Now we can get the number of


760
00:20:47,886 --> 00:20:49,496
words from the text storage.


761
00:20:50,686 --> 00:20:51,246
And when we hear the


762
00:20:51,246 --> 00:20:52,886
notification, we can update the


763
00:20:52,886 --> 00:20:54,556
string value property of our


764
00:20:54,556 --> 00:20:55,026
text field.


765
00:20:55,586 --> 00:20:58,726
And when we start typing, we can


766
00:20:58,756 --> 00:20:59,726
see the word count change.


767
00:21:00,326 --> 00:21:03,446
Now if we want to emphasize part


768
00:21:03,446 --> 00:21:05,806
of our text, we can use keyboard


769
00:21:05,806 --> 00:21:07,586
shortcuts or the menu to apply


770
00:21:07,586 --> 00:21:08,616
formatting like bold.


771
00:21:09,166 --> 00:21:11,846
But it would be great if we


772
00:21:11,846 --> 00:21:13,946
could support modern text


773
00:21:13,946 --> 00:21:15,746
formatting like Markdown, which


774
00:21:15,746 --> 00:21:17,346
uses control characters to


775
00:21:17,406 --> 00:21:18,406
specify formatting.


776
00:21:19,206 --> 00:21:20,566
So if we start inserting


777
00:21:20,786 --> 00:21:22,536
asterisks before and after, we


778
00:21:22,536 --> 00:21:23,366
want it to be bold.


779
00:21:24,216 --> 00:21:26,426
But which hammer should we use


780
00:21:27,816 --> 00:21:28,216
for this?


781
00:21:28,336 --> 00:21:29,276
Well, we want to know when a


782
00:21:29,276 --> 00:21:31,396
change happens, and we want to


783
00:21:31,396 --> 00:21:32,586
know where a change happens.


784
00:21:32,616 --> 00:21:33,846
But notifications don't really


785
00:21:33,846 --> 00:21:35,286
give us much information about


786
00:21:35,286 --> 00:21:35,896
this change.


787
00:21:37,416 --> 00:21:38,456
So we're going to use a bigger


788
00:21:38,456 --> 00:21:40,076
hammer and implement the text


789
00:21:40,076 --> 00:21:42,686
storage delegate, specifically


790
00:21:42,686 --> 00:21:44,286
the didProcessEditing method.


791
00:21:45,226 --> 00:21:46,786
Now we can make a new bold font


792
00:21:47,016 --> 00:21:47,946
from our existing one.


793
00:21:48,646 --> 00:21:50,026
And we can add that font


794
00:21:50,026 --> 00:21:51,426
directly to our text storage for


795
00:21:51,426 --> 00:21:52,336
the range that we want to be


796
00:21:52,336 --> 00:21:52,646
bold.


797
00:21:53,176 --> 00:21:55,586
And now when we insert that last


798
00:21:55,586 --> 00:21:57,696
asterisk, we can make it bold.


799
00:21:58,346 --> 00:22:01,126
Now we're feeling pretty good


800
00:22:01,126 --> 00:22:02,426
about this whole Markdown thing


801
00:22:02,586 --> 00:22:04,856
so what if we try inserting a


802
00:22:04,856 --> 00:22:05,476
code snippet?


803
00:22:06,756 --> 00:22:07,836
Now in Markdown it looks like


804
00:22:07,906 --> 00:22:07,996
this.


805
00:22:09,256 --> 00:22:10,516
And if we add this last


806
00:22:10,636 --> 00:22:12,116
back-tick, we want it to look


807
00:22:12,116 --> 00:22:12,766
like a code block.


808
00:22:14,136 --> 00:22:15,156
It should have a background and


809
00:22:15,156 --> 00:22:16,346
a header that says Swift Code.


810
00:22:17,716 --> 00:22:18,906
Now this is actually a complex


811
00:22:18,906 --> 00:22:21,216
task, so we're going to need two


812
00:22:21,306 --> 00:22:22,006
sledgehammers.


813
00:22:23,386 --> 00:22:24,716
And the first is a subclass


814
00:22:24,886 --> 00:22:25,526
NSTextStorage.


815
00:22:26,556 --> 00:22:27,946
Now when we subclass


816
00:22:27,946 --> 00:22:28,916
NSTextStorage, we need to


817
00:22:28,916 --> 00:22:30,706
implement four required methods.


818
00:22:31,236 --> 00:22:32,806
And we can do this by operating


819
00:22:32,856 --> 00:22:34,336
on a private instance of a


820
00:22:34,336 --> 00:22:34,946
mutable string.


821
00:22:34,946 --> 00:22:37,996
Now let's pay attention to the


822
00:22:37,996 --> 00:22:39,056
replaceCharacters method.


823
00:22:39,836 --> 00:22:42,066
Now we can add an NSTextBlock to


824
00:22:42,066 --> 00:22:42,876
our paragraph style.


825
00:22:43,406 --> 00:22:46,046
And then we can add that


826
00:22:46,046 --> 00:22:47,546
paragraph style to our text


827
00:22:47,546 --> 00:22:49,116
storage over the range of that


828
00:22:49,116 --> 00:22:49,496
code block.


829
00:22:50,256 --> 00:22:51,746
Now NSTextBlock by itself


830
00:22:51,746 --> 00:22:53,526
doesn't do any custom drawing by


831
00:22:53,526 --> 00:22:53,906
itself.


832
00:22:54,596 --> 00:22:56,766
So we'll need to subclass that


833
00:22:57,916 --> 00:22:57,996
too.


834
00:22:58,226 --> 00:23:00,846
Our NSTextBlock subclass needs


835
00:23:00,846 --> 00:23:02,756
to have some padding with some


836
00:23:02,756 --> 00:23:04,626
extra padding on the top and a


837
00:23:04,626 --> 00:23:07,346
light gray background.


838
00:23:07,546 --> 00:23:08,906
We'll override drawBackground


839
00:23:09,566 --> 00:23:11,346
and use string drawing to draw


840
00:23:11,346 --> 00:23:12,666
the header Swift Code.


841
00:23:13,606 --> 00:23:14,836
Now this is actually all we need


842
00:23:14,836 --> 00:23:16,386
to do to make a text block look


843
00:23:16,386 --> 00:23:18,886
like a code snippet.


844
00:23:18,986 --> 00:23:20,216
Now back in our custom text


845
00:23:20,216 --> 00:23:21,866
storage, we can create an


846
00:23:21,866 --> 00:23:23,076
instance of our new code block


847
00:23:24,256 --> 00:23:25,856
instead of using a plain text


848
00:23:27,156 --> 00:23:27,286
block.


849
00:23:27,856 --> 00:23:31,476
Now, last but not least, we need


850
00:23:31,476 --> 00:23:32,896
to tell our text view to use one


851
00:23:32,896 --> 00:23:34,606
of our custom text storages, so


852
00:23:34,606 --> 00:23:36,076
we'll replace the text storage


853
00:23:36,116 --> 00:23:37,096
on the layout manager.


854
00:23:37,706 --> 00:23:41,076
Now this is turning into a real


855
00:23:41,076 --> 00:23:42,266
WYSIWYG Markdown editor.


856
00:23:43,126 --> 00:23:44,366
Now a popular feature of most


857
00:23:44,366 --> 00:23:45,556
Markdown editor's is a


858
00:23:45,666 --> 00:23:47,726
side-by-side view with an


859
00:23:47,726 --> 00:23:49,046
editing version on the left and


860
00:23:49,046 --> 00:23:50,016
a rendering on the right.


861
00:23:51,516 --> 00:23:52,996
Now we can do this with two text


862
00:23:52,996 --> 00:23:54,426
views side-by-side.


863
00:23:55,936 --> 00:23:57,406
We'll disable editing for the


864
00:23:57,406 --> 00:23:57,946
one on the right.


865
00:23:58,866 --> 00:24:00,376
And now we have two text views


866
00:24:00,376 --> 00:24:01,596
but we want them to display the


867
00:24:01,696 --> 00:24:03,546
same content but look a little


868
00:24:03,546 --> 00:24:04,286
different on the right.


869
00:24:05,916 --> 00:24:07,176
So we want a configuration like


870
00:24:07,176 --> 00:24:08,806
this where we have one text


871
00:24:08,806 --> 00:24:10,716
storage but two of everything


872
00:24:11,546 --> 00:24:11,666
else.


873
00:24:14,096 --> 00:24:16,506
To do this, we will replace the


874
00:24:16,506 --> 00:24:17,996
text storage on the right with


875
00:24:18,066 --> 00:24:19,106
that from the left.


876
00:24:20,616 --> 00:24:21,506
Now let's see what this looks


877
00:24:21,536 --> 00:24:21,766
like.


878
00:24:22,286 --> 00:24:25,186
Now this is actually really


879
00:24:25,186 --> 00:24:25,326
cool.


880
00:24:25,526 --> 00:24:26,626
If we add any characters to the


881
00:24:26,626 --> 00:24:27,636
left, they'll show up


882
00:24:27,636 --> 00:24:28,556
immediately on the right-hand


883
00:24:28,556 --> 00:24:28,826
side.


884
00:24:29,726 --> 00:24:31,056
Now usually the right-hand side


885
00:24:31,906 --> 00:24:33,166
doesn't really show the Markdown


886
00:24:33,166 --> 00:24:35,406
characters but since this is a


887
00:24:35,406 --> 00:24:38,036
shared text storage, it means we


888
00:24:38,036 --> 00:24:39,196
have to hide the characters


889
00:24:39,406 --> 00:24:40,486
during the layout process.


890
00:24:40,486 --> 00:24:44,236
Now since we need to do it this


891
00:24:44,236 --> 00:24:45,846
way, we really only have one


892
00:24:45,916 --> 00:24:48,486
option and that's to implement


893
00:24:49,016 --> 00:24:50,746
the shouldGenerateGlyphs method


894
00:24:51,176 --> 00:24:52,746
on the NSLayoutManager delegate.


895
00:24:53,796 --> 00:24:55,196
This will allow us to intervene


896
00:24:55,316 --> 00:24:57,446
in the glyph generation process.


897
00:24:58,036 --> 00:24:59,776
So we can take the glyphs that


898
00:24:59,776 --> 00:25:01,986
are about to be laid out and if


899
00:25:01,986 --> 00:25:03,446
they represent a Markdown


900
00:25:03,446 --> 00:25:05,446
control character, we can apply


901
00:25:05,446 --> 00:25:07,356
the null property to that glyph.


902
00:25:08,096 --> 00:25:09,216
Now this will eliminate the


903
00:25:09,216 --> 00:25:10,516
glyph altogether during the


904
00:25:10,516 --> 00:25:12,526
layout process without changing


905
00:25:12,526 --> 00:25:13,756
the underlying text storage.


906
00:25:14,306 --> 00:25:19,096
Then, we will use the new glyphs


907
00:25:19,096 --> 00:25:20,686
and tell the layout manager that


908
00:25:20,686 --> 00:25:22,046
we want to present these glyphs


909
00:25:22,106 --> 00:25:23,116
with our new properties.


910
00:25:27,096 --> 00:25:28,766
Now this is actually really


911
00:25:28,766 --> 00:25:29,106
cool.


912
00:25:29,106 --> 00:25:30,416
So the left-hand side shows an


913
00:25:30,416 --> 00:25:31,436
editable version with all the


914
00:25:31,436 --> 00:25:32,626
Markdown characters included.


915
00:25:32,956 --> 00:25:34,576
And the right-hand side shows no


916
00:25:34,576 --> 00:25:36,306
Markdown characters all, all


917
00:25:36,306 --> 00:25:37,686
using the same text storage.


918
00:25:38,286 --> 00:25:40,836
Now building a side-by-side


919
00:25:40,836 --> 00:25:42,046
Markdown editor is not something


920
00:25:42,096 --> 00:25:44,256
all of us do every day, but it


921
00:25:44,256 --> 00:25:45,536
was really good to see how


922
00:25:45,536 --> 00:25:47,856
customizable TextKit is with


923
00:25:47,856 --> 00:25:48,816
real world examples.


924
00:25:49,536 --> 00:25:51,626
If you'd like to learn more


925
00:25:51,626 --> 00:25:53,026
about how to use and customize


926
00:25:53,066 --> 00:25:54,816
TextKit, check out our amazing


927
00:25:54,816 --> 00:25:55,576
programming guides.


928
00:25:56,286 --> 00:25:57,646
And with that, I will hand it


929
00:25:57,646 --> 00:25:58,186
back to Donna.


930
00:25:59,516 --> 00:26:06,066
[ Applause ]


931
00:26:06,566 --> 00:26:07,236
>> Thanks, Emily.


932
00:26:08,056 --> 00:26:09,056
Those are some really cool


933
00:26:09,056 --> 00:26:09,536
examples.


934
00:26:09,666 --> 00:26:10,786
And I really hope you'll be able


935
00:26:10,786 --> 00:26:11,706
to take some of the techniques


936
00:26:11,706 --> 00:26:13,056
that she showed off and use them


937
00:26:13,056 --> 00:26:13,876
in your own apps.


938
00:26:14,596 --> 00:26:16,086
But now let's shift gears a bit


939
00:26:16,416 --> 00:26:17,226
and talk about some best


940
00:26:17,266 --> 00:26:19,766
practices for working with text.


941
00:26:21,756 --> 00:26:23,196
So on the topic of correctness,


942
00:26:23,796 --> 00:26:24,996
if your text doesn't render the


943
00:26:24,996 --> 00:26:26,716
way you expect, it could be


944
00:26:26,716 --> 00:26:28,596
related to incomplete or


945
00:26:28,596 --> 00:26:29,806
incorrect attributes on your


946
00:26:29,806 --> 00:26:30,556
attributed string.


947
00:26:31,946 --> 00:26:33,636
And so let's take a look at an


948
00:26:33,636 --> 00:26:35,066
example to see this in practice.


949
00:26:36,116 --> 00:26:37,466
Let's say we have a UITextView


950
00:26:37,666 --> 00:26:39,536
with some attributed text that


951
00:26:39,536 --> 00:26:40,846
says don't hate.


952
00:26:40,846 --> 00:26:42,636
And it says this in the font


953
00:26:42,706 --> 00:26:44,266
Comic Sans 24 point.


954
00:26:44,766 --> 00:26:46,746
And we want to programmatically


955
00:26:46,746 --> 00:26:48,946
apply a bold typeface to the


956
00:26:48,946 --> 00:26:50,736
word don't because if there's


957
00:26:50,736 --> 00:26:52,396
any font more universally hated


958
00:26:52,396 --> 00:26:54,116
than Comic Sans, it's Comic Sans


959
00:26:54,116 --> 00:26:54,396
bold.


960
00:26:54,776 --> 00:26:58,316
And so at first blush, it might


961
00:26:58,316 --> 00:26:59,366
seem reasonable to write code


962
00:26:59,366 --> 00:26:59,696
like this.


963
00:27:00,716 --> 00:27:02,366
Now here we have our original


964
00:27:02,366 --> 00:27:02,746
font.


965
00:27:03,386 --> 00:27:05,326
And we're going to use a font


966
00:27:05,326 --> 00:27:06,796
descriptor to create a bold


967
00:27:06,796 --> 00:27:08,376
version of this original font.


968
00:27:09,936 --> 00:27:11,796
Then, we're going to initialize


969
00:27:11,796 --> 00:27:13,196
our mutable attributed string


970
00:27:13,526 --> 00:27:14,526
using the original text.


971
00:27:14,526 --> 00:27:16,866
We're going to apply our new


972
00:27:16,866 --> 00:27:18,876
font or new bold font to the


973
00:27:18,876 --> 00:27:20,586
word don't and that's going to


974
00:27:20,586 --> 00:27:21,496
be the first five characters.


975
00:27:21,496 --> 00:27:22,986
And then we're going to set the


976
00:27:22,986 --> 00:27:24,386
attributed text property of our


977
00:27:24,386 --> 00:27:25,996
UITextView to use this new


978
00:27:25,996 --> 00:27:28,566
attributed string except when we


979
00:27:28,606 --> 00:27:30,096
do that we'll see that our new


980
00:27:30,096 --> 00:27:32,186
bold font applied to the word


981
00:27:32,186 --> 00:27:34,416
don't just as we expected but


982
00:27:34,416 --> 00:27:35,676
the rest of the string somehow


983
00:27:35,676 --> 00:27:36,986
lost the original font.


984
00:27:37,506 --> 00:27:39,696
And now those of you who despise


985
00:27:39,696 --> 00:27:40,966
Comic Sans might be happy about


986
00:27:40,966 --> 00:27:43,676
that, but the result is wrong


987
00:27:43,806 --> 00:27:45,296
and so that warrants a sad face.


988
00:27:46,456 --> 00:27:47,926
So why did this happen?


989
00:27:48,506 --> 00:27:51,046
And to answer that, let's take a


990
00:27:51,046 --> 00:27:52,196
closer look at how we're


991
00:27:52,196 --> 00:27:53,476
initializing our attributed


992
00:27:53,546 --> 00:27:53,856
string.


993
00:27:55,226 --> 00:27:56,806
So notice that we're using a


994
00:27:56,966 --> 00:27:58,526
plain text string to initialize


995
00:27:58,526 --> 00:27:59,616
it, and we're using the


996
00:27:59,616 --> 00:28:01,006
initializer with no attribute


997
00:28:01,006 --> 00:28:01,516
information.


998
00:28:01,516 --> 00:28:04,046
And when you create a new


999
00:28:04,046 --> 00:28:05,646
attributed string and you don't


1000
00:28:05,646 --> 00:28:06,526
provide any attribute


1001
00:28:06,526 --> 00:28:08,626
information, that new attributed


1002
00:28:08,626 --> 00:28:09,826
string, we use the default


1003
00:28:09,826 --> 00:28:10,226
attributes.


1004
00:28:11,026 --> 00:28:11,926
And the default font is


1005
00:28:11,926 --> 00:28:13,136
Helvetica 12 point.


1006
00:28:13,686 --> 00:28:15,876
And so to recap what happened,


1007
00:28:16,166 --> 00:28:17,366
we started with this original


1008
00:28:17,366 --> 00:28:19,036
attributed string with the font


1009
00:28:19,036 --> 00:28:20,566
Comic Sans 24 applied to the


1010
00:28:20,566 --> 00:28:21,356
entire range.


1011
00:28:21,866 --> 00:28:24,986
And then we created this new


1012
00:28:24,986 --> 00:28:26,416
attributed string, and it got


1013
00:28:26,416 --> 00:28:27,506
initialized with the default


1014
00:28:27,506 --> 00:28:27,966
attributes.


1015
00:28:28,856 --> 00:28:30,156
And we applied our bold font to


1016
00:28:30,156 --> 00:28:31,226
the word don't on this new


1017
00:28:31,276 --> 00:28:33,016
string, and we ended up with


1018
00:28:33,016 --> 00:28:34,896
this incorrect result here where


1019
00:28:34,896 --> 00:28:36,296
the word don't is in Comic Sans


1020
00:28:36,296 --> 00:28:37,886
bold 24, and the rest of the


1021
00:28:37,886 --> 00:28:39,366
string is in the default font of


1022
00:28:39,366 --> 00:28:40,146
Helvetica 12.


1023
00:28:40,726 --> 00:28:43,916
And so there are two different


1024
00:28:43,916 --> 00:28:44,776
ways that we could do this


1025
00:28:44,776 --> 00:28:46,826
correctly and one way is to


1026
00:28:46,826 --> 00:28:47,916
avoid mixing the plain and


1027
00:28:47,916 --> 00:28:49,086
attributed text altogether.


1028
00:28:50,146 --> 00:28:51,416
So by initializing our new


1029
00:28:51,416 --> 00:28:52,446
attributed string using the


1030
00:28:52,446 --> 00:28:53,676
original one, we're going to


1031
00:28:53,676 --> 00:28:54,816
keep those original attributes.


1032
00:28:55,296 --> 00:28:56,326
And then we can apply our new


1033
00:28:56,326 --> 00:28:57,606
attributes without getting this


1034
00:28:57,606 --> 00:28:58,976
reset effect with the default


1035
00:28:58,976 --> 00:28:59,176
ones.


1036
00:28:59,696 --> 00:29:02,466
But it's not always feasible to


1037
00:29:02,466 --> 00:29:03,746
just avoid mixing plain and


1038
00:29:03,746 --> 00:29:04,256
attributed text.


1039
00:29:04,576 --> 00:29:06,156
So if you've got to mix it up,


1040
00:29:06,736 --> 00:29:08,096
you can explicitly supply the


1041
00:29:08,096 --> 00:29:09,876
attributes when creating that


1042
00:29:09,876 --> 00:29:11,216
new attributed string from the


1043
00:29:11,216 --> 00:29:11,846
plain text string.


1044
00:29:11,846 --> 00:29:13,596
And if we make sure to apply the


1045
00:29:13,656 --> 00:29:14,526
same attributes from the


1046
00:29:14,526 --> 00:29:15,716
original text, we'll get the


1047
00:29:15,716 --> 00:29:16,356
correct result.


1048
00:29:16,886 --> 00:29:19,816
But you should be aware that


1049
00:29:19,816 --> 00:29:20,896
this reset effect can happen


1050
00:29:20,896 --> 00:29:22,126
with any attributes that have


1051
00:29:22,126 --> 00:29:23,456
default values and not just


1052
00:29:23,456 --> 00:29:23,736
fonts.


1053
00:29:24,816 --> 00:29:26,106
And as you can see, there are a


1054
00:29:26,106 --> 00:29:27,326
lot of attributes with default


1055
00:29:27,326 --> 00:29:27,676
values.


1056
00:29:27,676 --> 00:29:30,746
So I'd like to call out the


1057
00:29:30,746 --> 00:29:31,986
paragraph style here in


1058
00:29:31,986 --> 00:29:33,506
particular as being a sneaky


1059
00:29:33,506 --> 00:29:34,096
reset point.


1060
00:29:35,056 --> 00:29:36,466
And to see why, we'll revisit


1061
00:29:36,466 --> 00:29:37,256
our earlier example.


1062
00:29:37,406 --> 00:29:38,496
But instead of changing the


1063
00:29:38,496 --> 00:29:39,826
font, we're going to change the


1064
00:29:39,826 --> 00:29:41,576
paragraph style to truncate the


1065
00:29:41,576 --> 00:29:43,136
word hate because nobody likes


1066
00:29:43,646 --> 00:29:43,746
hate.


1067
00:29:44,376 --> 00:29:45,786
So we want our text to look like


1068
00:29:45,856 --> 00:29:47,886
this, but when we run this code,


1069
00:29:48,716 --> 00:29:49,836
we'll get a result like this


1070
00:29:50,686 --> 00:29:51,696
with all of the text in


1071
00:29:51,696 --> 00:29:53,526
Helvetica 12 and using the


1072
00:29:53,526 --> 00:29:55,136
default paragraph style with the


1073
00:29:55,136 --> 00:29:56,526
default line break mode of word


1074
00:29:56,526 --> 00:29:56,866
wrapping.


1075
00:29:57,566 --> 00:29:59,016
And, again, this is really great


1076
00:29:59,016 --> 00:29:59,956
for those of you who loathe


1077
00:29:59,956 --> 00:30:01,056
Comic Sans because it's been


1078
00:30:01,056 --> 00:30:02,136
totally eliminated from the


1079
00:30:02,226 --> 00:30:03,976
string but it's wrong.


1080
00:30:04,086 --> 00:30:05,446
And it's wrong in a different


1081
00:30:05,446 --> 00:30:06,276
way from last time.


1082
00:30:06,826 --> 00:30:08,586
And to understand the


1083
00:30:08,586 --> 00:30:09,796
difference, let's recall that


1084
00:30:09,796 --> 00:30:11,686
attribute fixing happens before


1085
00:30:11,686 --> 00:30:13,296
layout and this is where the


1086
00:30:13,296 --> 00:30:14,736
system repairs the inconsistent


1087
00:30:14,736 --> 00:30:15,236
attributes.


1088
00:30:16,216 --> 00:30:17,196
And so here in our attributed


1089
00:30:17,286 --> 00:30:18,546
string we have a single


1090
00:30:18,546 --> 00:30:19,906
paragraph with multiple


1091
00:30:19,906 --> 00:30:21,736
paragraph styles and that's


1092
00:30:21,776 --> 00:30:22,646
pretty inconsistent.


1093
00:30:23,496 --> 00:30:24,996
So when the system fixes the


1094
00:30:24,996 --> 00:30:26,426
attributes of this string, it's


1095
00:30:26,426 --> 00:30:27,086
going to take the first


1096
00:30:27,086 --> 00:30:28,976
paragraph style it finds and


1097
00:30:28,976 --> 00:30:29,706
apply it to the entire


1098
00:30:29,706 --> 00:30:30,206
paragraph.


1099
00:30:31,236 --> 00:30:32,296
And that's how we ended up with


1100
00:30:32,296 --> 00:30:34,096
our attributed string displaying


1101
00:30:34,096 --> 00:30:35,046
with the default paragraph


1102
00:30:35,046 --> 00:30:35,386
style.


1103
00:30:35,946 --> 00:30:38,486
And the key take away here is to


1104
00:30:38,486 --> 00:30:39,906
be explicit with your


1105
00:30:39,906 --> 00:30:41,416
attributes, especially when


1106
00:30:41,416 --> 00:30:42,216
you're mixing plain and


1107
00:30:42,216 --> 00:30:42,926
attributed text.


1108
00:30:43,836 --> 00:30:44,916
So by doing this, you're going


1109
00:30:44,916 --> 00:30:46,346
to avoid this reset effect with


1110
00:30:46,346 --> 00:30:47,216
the default attributes.


1111
00:30:47,826 --> 00:30:49,406
And for AppKit developers, this


1112
00:30:49,406 --> 00:30:51,126
is actually super important if


1113
00:30:51,126 --> 00:30:52,176
you're updating your app for


1114
00:30:52,176 --> 00:30:52,696
dark mode.


1115
00:30:53,286 --> 00:30:54,526
So by using the explicit


1116
00:30:54,526 --> 00:30:56,056
attributes with the dynamic


1117
00:30:56,056 --> 00:30:57,886
colors like NSColor.textColor,


1118
00:30:57,946 --> 00:30:59,216
you'll ensure that your text is


1119
00:30:59,216 --> 00:31:00,146
drawn with the correct colors


1120
00:31:00,316 --> 00:31:03,116
for the context.


1121
00:31:03,216 --> 00:31:03,786
So moving on.


1122
00:31:04,316 --> 00:31:05,416
The next topic is performance.


1123
00:31:06,306 --> 00:31:07,116
If you're working with large


1124
00:31:07,116 --> 00:31:08,656
amounts of text, a good way to


1125
00:31:08,656 --> 00:31:10,046
improve your apps performance is


1126
00:31:10,046 --> 00:31:11,636
to use noncontinuous layout.


1127
00:31:11,636 --> 00:31:14,076
And to understand what that


1128
00:31:14,076 --> 00:31:15,276
means, let's revisit our old


1129
00:31:15,336 --> 00:31:16,766
friend the layout process.


1130
00:31:17,826 --> 00:31:18,856
We said that the layout process


1131
00:31:18,896 --> 00:31:20,436
consists of glyph generation


1132
00:31:20,526 --> 00:31:21,386
followed by glyph layout.


1133
00:31:22,806 --> 00:31:24,046
And so with continuous layout,


1134
00:31:24,266 --> 00:31:25,416
the layout manager is going to


1135
00:31:25,416 --> 00:31:26,716
perform glyph generation and


1136
00:31:26,716 --> 00:31:27,946
glyph layout starting at the


1137
00:31:27,986 --> 00:31:29,496
beginning of the text storage.


1138
00:31:30,286 --> 00:31:31,546
And it goes in order from the


1139
00:31:31,546 --> 00:31:32,426
beginning to the end.


1140
00:31:33,786 --> 00:31:34,986
And so if someone using your app


1141
00:31:35,026 --> 00:31:36,066
scrolls to some point in the


1142
00:31:36,066 --> 00:31:37,556
middle of your text view, the


1143
00:31:37,556 --> 00:31:38,966
layout manager has to generate


1144
00:31:38,966 --> 00:31:41,056
and layout the glyphs for all


1145
00:31:41,056 --> 00:31:42,316
the glyphs that come before that


1146
00:31:42,316 --> 00:31:44,106
point as indicated by the red


1147
00:31:44,106 --> 00:31:44,596
rectangle.


1148
00:31:45,166 --> 00:31:46,726
And note that this also includes


1149
00:31:46,726 --> 00:31:47,846
the text that you can't see


1150
00:31:47,846 --> 00:31:49,016
that's been scrolled off the top


1151
00:31:49,016 --> 00:31:50,116
of the screen all the way back


1152
00:31:50,176 --> 00:31:51,196
to the beginning of the text


1153
00:31:51,196 --> 00:31:51,596
storage.


1154
00:31:52,696 --> 00:31:54,186
And so if you have a lot of


1155
00:31:54,236 --> 00:31:56,406
text, that poor person might


1156
00:31:56,406 --> 00:31:57,756
have to wait a while for your


1157
00:31:57,756 --> 00:31:59,946
app to finish layout but


1158
00:31:59,946 --> 00:32:01,626
luckily, we can avoid this


1159
00:32:01,626 --> 00:32:03,616
situation by using noncontinuous


1160
00:32:03,616 --> 00:32:03,916
layout.


1161
00:32:04,966 --> 00:32:06,896
And so as the name implies, with


1162
00:32:06,896 --> 00:32:08,286
noncontinuous layout, the layout


1163
00:32:08,286 --> 00:32:10,216
manager doesn't have to do glyph


1164
00:32:10,216 --> 00:32:11,656
generation and layout in order


1165
00:32:11,716 --> 00:32:12,896
from the beginning of the text


1166
00:32:12,896 --> 00:32:13,296
storage.


1167
00:32:14,166 --> 00:32:15,626
So now when that person, using


1168
00:32:15,626 --> 00:32:16,756
your app, scrolls to the middle


1169
00:32:17,026 --> 00:32:18,956
of your text view, the layout


1170
00:32:18,956 --> 00:32:20,016
manager can perform glyph


1171
00:32:20,016 --> 00:32:21,106
generation and layout for that


1172
00:32:21,106 --> 00:32:22,696
middle section right away.


1173
00:32:23,346 --> 00:32:25,696
So if your text storage has a


1174
00:32:25,696 --> 00:32:26,886
lot of text in it, using


1175
00:32:26,886 --> 00:32:28,376
noncontinuous layout is a huge


1176
00:32:28,376 --> 00:32:29,276
performance win.


1177
00:32:29,776 --> 00:32:32,476
Great. So how do you turn this


1178
00:32:33,266 --> 00:32:33,366
on?


1179
00:32:33,836 --> 00:32:35,946
Well, noncontinuous layout is a


1180
00:32:35,946 --> 00:32:37,366
property of NSLayoutManager.


1181
00:32:37,366 --> 00:32:39,346
And so for NSTextView, you can


1182
00:32:39,346 --> 00:32:41,346
access the text to use layout


1183
00:32:41,346 --> 00:32:42,486
manager and then you can set


1184
00:32:42,486 --> 00:32:43,436
that property there.


1185
00:32:44,006 --> 00:32:46,896
For UITextView, you usually


1186
00:32:46,896 --> 00:32:47,786
don't have to do anything


1187
00:32:47,786 --> 00:32:48,756
because this is turned on by


1188
00:32:48,756 --> 00:32:50,846
default, but there's just one


1189
00:32:50,846 --> 00:32:51,946
important thing to remember.


1190
00:32:53,006 --> 00:32:54,926
Since UITextView is a subclass


1191
00:32:55,416 --> 00:32:57,806
of UIScrollView, noncontinuous


1192
00:32:57,846 --> 00:32:59,586
layout will require scrolling to


1193
00:32:59,586 --> 00:33:00,106
be enabled.


1194
00:33:01,266 --> 00:33:02,776
And this is because when you


1195
00:33:02,776 --> 00:33:04,366
disable scrolling, asking for


1196
00:33:04,366 --> 00:33:06,086
the intrinsic content size of


1197
00:33:06,086 --> 00:33:07,116
your text view is going to


1198
00:33:07,116 --> 00:33:08,376
require laying out all the text


1199
00:33:08,906 --> 00:33:09,776
and then you wouldn't get the


1200
00:33:09,776 --> 00:33:10,716
performance benefits of


1201
00:33:10,716 --> 00:33:11,726
noncontinuous layout in the


1202
00:33:11,726 --> 00:33:12,156
first place.


1203
00:33:12,816 --> 00:33:15,636
And that brings me to a really


1204
00:33:15,636 --> 00:33:16,376
important point.


1205
00:33:17,186 --> 00:33:18,236
You should avoid requesting


1206
00:33:18,236 --> 00:33:19,696
layout for all or most of the


1207
00:33:19,696 --> 00:33:20,916
text at once when you're using


1208
00:33:20,916 --> 00:33:23,136
noncontinuous layout since that


1209
00:33:23,136 --> 00:33:24,116
kind of defeats the purpose of


1210
00:33:24,116 --> 00:33:25,026
using it in the first place.


1211
00:33:25,086 --> 00:33:27,516
So if you have only one text


1212
00:33:27,516 --> 00:33:28,926
container, don't ask for the


1213
00:33:28,926 --> 00:33:29,956
layout of the entire thing.


1214
00:33:30,796 --> 00:33:31,866
And don't ask for layout for


1215
00:33:31,866 --> 00:33:33,196
large ranges of characters or


1216
00:33:33,196 --> 00:33:34,256
glyphs that include the end of


1217
00:33:35,116 --> 00:33:37,106
the text.


1218
00:33:37,366 --> 00:33:38,526
And we didn't dig too deeply


1219
00:33:38,526 --> 00:33:39,406
into the topic of text


1220
00:33:39,406 --> 00:33:40,806
performance here because I gave


1221
00:33:40,806 --> 00:33:42,076
a great talk on this last year


1222
00:33:42,386 --> 00:33:44,826
at WWDC 2017, Efficient


1223
00:33:44,826 --> 00:33:45,766
unteractions with Frameworks.


1224
00:33:46,186 --> 00:33:47,226
And you can access the video


1225
00:33:47,226 --> 00:33:48,576
from that more information link


1226
00:33:48,576 --> 00:33:49,306
at the end of the session.


1227
00:33:49,306 --> 00:33:50,026
All right.


1228
00:33:51,396 --> 00:33:53,876
Now it's time to talk about


1229
00:33:53,876 --> 00:33:55,006
everyone's favorite topic,


1230
00:33:55,206 --> 00:33:55,666
security.


1231
00:33:56,406 --> 00:33:59,486
So you may have noticed that


1232
00:33:59,486 --> 00:34:00,526
there have been incidents in the


1233
00:34:00,526 --> 00:34:02,456
recent past where some people on


1234
00:34:02,456 --> 00:34:04,446
the Internet have exploited bugs


1235
00:34:04,446 --> 00:34:05,746
in our software to cause


1236
00:34:05,816 --> 00:34:06,976
problems for people who use our


1237
00:34:07,016 --> 00:34:07,346
products.


1238
00:34:08,896 --> 00:34:10,016
And in response, we're


1239
00:34:10,016 --> 00:34:11,416
continuing to devise techniques


1240
00:34:11,606 --> 00:34:12,956
for mitigating these kinds of


1241
00:34:12,956 --> 00:34:16,036
attacks, but today I'd like to


1242
00:34:16,036 --> 00:34:17,326
talk about how we can work


1243
00:34:17,326 --> 00:34:18,755
together to provide a stronger


1244
00:34:18,755 --> 00:34:20,025
defense against these attacks.


1245
00:34:20,815 --> 00:34:21,626
So you may have heard of the


1246
00:34:21,626 --> 00:34:24,126
concept defense in depth.


1247
00:34:24,706 --> 00:34:26,056
And in case you're not familiar


1248
00:34:26,056 --> 00:34:27,856
with the terms, defense in depth


1249
00:34:27,856 --> 00:34:29,085
refers to creating multiple


1250
00:34:29,085 --> 00:34:30,706
layers of protection to defend


1251
00:34:30,706 --> 00:34:31,226
against threats.


1252
00:34:31,226 --> 00:34:33,315
And this concept has been around


1253
00:34:33,315 --> 00:34:33,926
for centuries.


1254
00:34:34,096 --> 00:34:35,556
You can see it in the design of


1255
00:34:35,556 --> 00:34:36,275
medieval castles.


1256
00:34:36,826 --> 00:34:38,056
The land around the outside is


1257
00:34:38,085 --> 00:34:39,266
clear of trees so you can see


1258
00:34:39,266 --> 00:34:39,906
attackers coming.


1259
00:34:39,906 --> 00:34:41,656
And there's a moat to make


1260
00:34:41,656 --> 00:34:42,525
approaching the castle more


1261
00:34:42,525 --> 00:34:43,545
difficult and to prevent


1262
00:34:43,545 --> 00:34:44,306
tunneling underneath it.


1263
00:34:44,306 --> 00:34:46,505
And the walls are another


1264
00:34:46,505 --> 00:34:46,876
defense.


1265
00:34:47,076 --> 00:34:48,166
They're built tall so that


1266
00:34:48,166 --> 00:34:49,096
they're difficult to climb.


1267
00:34:49,956 --> 00:34:50,926
And there are arrow slits in the


1268
00:34:50,926 --> 00:34:52,456
walls and crenellations at the


1269
00:34:52,456 --> 00:34:54,255
top to allow defenders to fire


1270
00:34:54,255 --> 00:34:55,406
on attackers from protected


1271
00:34:55,406 --> 00:34:55,886
locations.


1272
00:34:57,096 --> 00:34:58,796
Now any one of these individual


1273
00:34:58,796 --> 00:35:00,176
protections might not be enough


1274
00:35:00,296 --> 00:35:01,836
to fend off an attack but


1275
00:35:01,836 --> 00:35:03,556
collectively they provide a


1276
00:35:03,676 --> 00:35:04,356
strong defense.


1277
00:35:05,066 --> 00:35:07,796
And like the castle, we here at


1278
00:35:07,796 --> 00:35:09,246
Apple provide multiple layers of


1279
00:35:09,246 --> 00:35:11,126
defense against attacks, but


1280
00:35:11,126 --> 00:35:12,246
there's nothing stopping you


1281
00:35:12,316 --> 00:35:13,376
from also taking your own


1282
00:35:13,376 --> 00:35:14,636
defensive measures in your app


1283
00:35:14,636 --> 00:35:15,106
or framework.


1284
00:35:15,776 --> 00:35:17,266
And by doing this, you're adding


1285
00:35:17,266 --> 00:35:18,596
another layer of protection and


1286
00:35:18,596 --> 00:35:19,936
improving your product security.


1287
00:35:20,406 --> 00:35:21,066
Everyone wins.


1288
00:35:21,646 --> 00:35:23,216
So let's talk about what you can


1289
00:35:23,866 --> 00:35:25,466
do here.


1290
00:35:25,676 --> 00:35:26,556
And something I'd like you to


1291
00:35:26,556 --> 00:35:28,626
consider is setting limits on


1292
00:35:28,626 --> 00:35:30,106
text input in your app or


1293
00:35:30,106 --> 00:35:30,506
framework.


1294
00:35:31,426 --> 00:35:32,766
And now I'd like to emphasize


1295
00:35:32,766 --> 00:35:33,766
that this might not always make


1296
00:35:33,816 --> 00:35:34,456
sense to do.


1297
00:35:34,756 --> 00:35:36,106
So, for example, if your app is


1298
00:35:36,106 --> 00:35:37,606
an authoring tool like that


1299
00:35:37,606 --> 00:35:38,736
journal app that Emily showed


1300
00:35:38,736 --> 00:35:40,336
earlier, it wouldn't really make


1301
00:35:40,336 --> 00:35:42,066
any sense to set a limit on the


1302
00:35:42,066 --> 00:35:42,986
length of the text there.


1303
00:35:43,296 --> 00:35:44,276
So if it doesn't make sense, you


1304
00:35:44,516 --> 00:35:45,626
shouldn't do it.


1305
00:35:46,416 --> 00:35:47,996
But in contrast, if your phone


1306
00:35:47,996 --> 00:35:49,436
app has a text field for


1307
00:35:49,436 --> 00:35:50,886
assigning a nickname to an


1308
00:35:50,886 --> 00:35:52,676
account, you probably have some


1309
00:35:52,676 --> 00:35:53,816
idea what a reasonable limit


1310
00:35:53,816 --> 00:35:54,266
would be there.


1311
00:35:54,846 --> 00:35:57,456
And it's a good idea to set


1312
00:35:57,456 --> 00:35:58,926
these limits because all text


1313
00:35:58,926 --> 00:36:00,916
input is potentially untrusted.


1314
00:36:02,086 --> 00:36:03,926
When you allow text input, you


1315
00:36:03,926 --> 00:36:05,906
allow copy and paste.


1316
00:36:05,906 --> 00:36:08,206
You don't know what kind of text


1317
00:36:08,206 --> 00:36:08,986
can be pasted in there.


1318
00:36:10,126 --> 00:36:10,926
It could be anything.


1319
00:36:10,926 --> 00:36:12,016
It could be a string with


1320
00:36:12,016 --> 00:36:12,766
malicious character


1321
00:36:12,766 --> 00:36:14,436
combinations, or it could just


1322
00:36:14,436 --> 00:36:15,816
be a string that's really,


1323
00:36:16,126 --> 00:36:19,236
really, really long.


1324
00:36:20,566 --> 00:36:21,796
And even though long strings


1325
00:36:21,796 --> 00:36:23,116
like that may not be malicious


1326
00:36:23,116 --> 00:36:24,336
in themselves, it could cause


1327
00:36:24,336 --> 00:36:25,526
your app to freeze or hang.


1328
00:36:26,296 --> 00:36:27,386
So if you have a text field


1329
00:36:27,676 --> 00:36:29,276
that's intended for one line of


1330
00:36:29,276 --> 00:36:30,816
input and someone pastes the


1331
00:36:30,816 --> 00:36:32,126
entire contents of "War and


1332
00:36:32,126 --> 00:36:33,536
Peace" into it, which is about


1333
00:36:33,856 --> 00:36:35,106
3.1 million characters in


1334
00:36:35,106 --> 00:36:37,576
English, is that reasonable?


1335
00:36:39,636 --> 00:36:41,226
Probably not.


1336
00:36:42,316 --> 00:36:43,916
So this is a great example of a


1337
00:36:43,916 --> 00:36:45,106
case where it makes sense to


1338
00:36:45,106 --> 00:36:46,656
impose your own limits.


1339
00:36:47,926 --> 00:36:49,376
And here are the recommended


1340
00:36:49,376 --> 00:36:50,316
approaches for setting these


1341
00:36:50,316 --> 00:36:50,926
kinds of limits.


1342
00:36:51,766 --> 00:36:52,856
You want to validate the input


1343
00:36:52,926 --> 00:36:54,236
string before it's set on the


1344
00:36:54,236 --> 00:36:54,756
text field.


1345
00:36:55,186 --> 00:36:56,846
And so for UITextFields, you can


1346
00:36:56,846 --> 00:36:57,706
do this by using


1347
00:36:57,986 --> 00:36:59,066
UITextFieldDelegate.


1348
00:36:59,936 --> 00:37:01,356
And for NSTextFields, you should


1349
00:37:01,356 --> 00:37:03,126
use a custom NSFormatter to


1350
00:37:03,126 --> 00:37:04,426
implement your validation logic.


1351
00:37:04,426 --> 00:37:07,656
Oh, and we've also got some


1352
00:37:07,796 --> 00:37:09,146
additional security enhancements


1353
00:37:09,146 --> 00:37:09,706
coming your way.


1354
00:37:10,386 --> 00:37:11,396
So keep an eye out for them in


1355
00:37:11,396 --> 00:37:12,816
the release notes and come see


1356
00:37:12,816 --> 00:37:13,856
us at the labs this week if you


1357
00:37:13,856 --> 00:37:14,526
have any questions.


1358
00:37:15,176 --> 00:37:16,666
All right.


1359
00:37:16,876 --> 00:37:18,886
We're just about out of time so


1360
00:37:18,886 --> 00:37:19,456
let's recap.


1361
00:37:20,436 --> 00:37:21,516
You know how to choose the right


1362
00:37:21,516 --> 00:37:23,286
control, customization point,


1363
00:37:23,786 --> 00:37:25,466
and customization approach and


1364
00:37:25,466 --> 00:37:26,626
you know the best practices to


1365
00:37:26,626 --> 00:37:27,646
follow in the areas of


1366
00:37:27,646 --> 00:37:29,326
correctness, performance, and


1367
00:37:29,326 --> 00:37:29,876
security.


1368
00:37:30,626 --> 00:37:32,066
So use this knowledge to go


1369
00:37:32,066 --> 00:37:33,476
forth and create great things


1370
00:37:33,706 --> 00:37:34,216
with TextKit.


1371
00:37:35,636 --> 00:37:36,946
Oh, and before you go, here's


1372
00:37:36,946 --> 00:37:38,066
that super important more


1373
00:37:38,066 --> 00:37:39,346
information link where you can


1374
00:37:39,346 --> 00:37:40,506
find all of the great past


1375
00:37:40,506 --> 00:37:41,766
sessions and documentation that


1376
00:37:41,766 --> 00:37:42,596
we've referenced today.


1377
00:37:43,096 --> 00:37:44,326
And come visit us at the labs on


1378
00:37:44,326 --> 00:37:45,036
Thursday and Friday.


1379
00:37:45,596 --> 00:37:47,396
Thank you and enjoy the rest of


1380
00:37:47,396 --> 00:37:47,976
the conference.


1381
00:37:48,016 --> 00:37:50,000
[ Applause ]

