1
00:00:07,516 --> 00:00:22,176
[ Music ]


2
00:00:22,676 --> 00:00:23,306
>> Good afternoon.


3
00:00:25,176 --> 00:00:26,816
Welcome to What's New in tvOS.


4
00:00:28,366 --> 00:00:29,846
My name is Hans Kim, and I'm one


5
00:00:29,846 --> 00:00:31,066
of the engineers on the tvOS


6
00:00:31,116 --> 00:00:31,366
team.


7
00:00:32,506 --> 00:00:33,896
I'm thrilled this afternoon to


8
00:00:33,896 --> 00:00:35,476
tell you about some of the new


9
00:00:35,476 --> 00:00:36,836
features in tvOS 12.


10
00:00:37,886 --> 00:00:39,026
We're going to talk about


11
00:00:39,026 --> 00:00:41,276
Password AutoFill, and we'll


12
00:00:41,276 --> 00:00:42,266
take a look at some new


13
00:00:42,266 --> 00:00:44,736
enhancements in tvOS's focus


14
00:00:44,856 --> 00:00:45,186
engine.


15
00:00:46,206 --> 00:00:47,586
And, we'll conclude with some


16
00:00:47,586 --> 00:00:51,026
exciting news about some new UI


17
00:00:51,026 --> 00:00:51,786
patterns on tvOS.


18
00:00:51,786 --> 00:00:53,996
We have a lot of ground to


19
00:00:53,996 --> 00:00:55,086
cover, and we have some great


20
00:00:55,116 --> 00:00:56,536
demos, so let's begin.


21
00:00:56,936 --> 00:00:58,766
And, to get us started, I'd like


22
00:00:58,766 --> 00:01:00,166
to invite my colleagues Alex and


23
00:01:00,166 --> 00:01:02,346
Conrad to tell us about helping


24
00:01:02,346 --> 00:01:03,626
your customers sign into your


25
00:01:03,626 --> 00:01:03,806
app.


26
00:01:04,516 --> 00:01:10,716
[ Applause ]


27
00:01:11,216 --> 00:01:11,796
>> Thank you, Hans.


28
00:01:12,686 --> 00:01:13,386
Hello everyone.


29
00:01:13,846 --> 00:01:15,256
My name is Alex Sanciangco.


30
00:01:15,256 --> 00:01:17,016
And, today I am so excited to


31
00:01:17,016 --> 00:01:18,556
talk to you all about Password


32
00:01:18,556 --> 00:01:19,056
AutoFill.


33
00:01:20,746 --> 00:01:22,076
Signing in is a common


34
00:01:22,076 --> 00:01:23,236
experience that users have with


35
00:01:23,236 --> 00:01:23,636
apps.


36
00:01:24,056 --> 00:01:25,276
For instance, here's an app I've


37
00:01:25,276 --> 00:01:26,676
been working on called "shiny,"


38
00:01:27,006 --> 00:01:28,756
that shows our users an adorable


39
00:01:28,756 --> 00:01:30,026
photo of their favorite dogs


40
00:01:30,026 --> 00:01:31,116
every day when they log in.


41
00:01:32,276 --> 00:01:33,826
In order to make logging in as


42
00:01:33,856 --> 00:01:35,046
smooth as possible, we've


43
00:01:35,046 --> 00:01:37,006
brought Password AutoFill to


44
00:01:37,006 --> 00:01:37,626
tvOS 12.


45
00:01:38,086 --> 00:01:39,566
With an experience just as


46
00:01:39,676 --> 00:01:41,896
familiar and easy as Password


47
00:01:41,896 --> 00:01:42,796
AutoFill on iOS.


48
00:01:42,796 --> 00:01:43,976
Let me show you what I mean.


49
00:01:53,376 --> 00:01:54,646
First, I'd like to show you


50
00:01:54,646 --> 00:01:55,666
continuity keyboard.


51
00:01:56,056 --> 00:01:56,926
As you might remember,


52
00:01:57,136 --> 00:01:58,846
continuity keyboard is an iOS


53
00:01:58,846 --> 00:02:00,576
feature that allows users to


54
00:02:00,576 --> 00:02:02,036
enter text on the Apple TV,


55
00:02:02,166 --> 00:02:03,416
using their iOS device.


56
00:02:04,156 --> 00:02:04,946
Let's see it in action.


57
00:02:05,026 --> 00:02:06,696
I'm going to navigate to that


58
00:02:06,696 --> 00:02:08,556
shiny app, and I'll select the


59
00:02:08,556 --> 00:02:09,235
email field.


60
00:02:09,756 --> 00:02:12,416
As I expect, I see the


61
00:02:12,416 --> 00:02:13,906
continuity keyboard notification


62
00:02:13,906 --> 00:02:15,136
appear, which has now been


63
00:02:15,136 --> 00:02:16,666
enhanced to offer Password


64
00:02:16,666 --> 00:02:17,466
AutoFill as well.


65
00:02:17,466 --> 00:02:19,136
So, I'll open that up now.


66
00:02:19,746 --> 00:02:22,946
And, I see that my username and


67
00:02:22,946 --> 00:02:24,776
password are suggested for the


68
00:02:24,776 --> 00:02:25,906
shiny app right there on the


69
00:02:25,906 --> 00:02:26,566
QuickType bar.


70
00:02:26,916 --> 00:02:28,236
And, I know that with one tap,


71
00:02:28,426 --> 00:02:29,646
it'll be automatically filled


72
00:02:29,646 --> 00:02:30,836
into the TV, and I'll be signed


73
00:02:30,836 --> 00:02:31,016
in.


74
00:02:31,186 --> 00:02:32,000
So, I'll do that now.


75
00:02:35,556 --> 00:02:35,976
Aw, look at that guy.


76
00:02:36,516 --> 00:02:43,286
[ Applause ]


77
00:02:43,786 --> 00:02:45,386
So, I got the notification on my


78
00:02:45,386 --> 00:02:47,146
iPhone because my iPhone and


79
00:02:47,186 --> 00:02:48,436
Apple TV are on the same iCloud


80
00:02:48,436 --> 00:02:48,856
account.


81
00:02:49,836 --> 00:02:51,356
And, if you're a user of the TV


82
00:02:51,356 --> 00:02:52,896
remote and control center, or


83
00:02:52,896 --> 00:02:54,116
the TV remote app, the


84
00:02:54,116 --> 00:02:55,316
experience is similar there as


85
00:02:55,316 --> 00:02:55,536
well.


86
00:02:56,316 --> 00:02:57,896
But, we have something else


87
00:02:58,026 --> 00:02:59,256
brand new we want to show you


88
00:02:59,256 --> 00:03:01,496
today, that shows just how easy


89
00:03:01,496 --> 00:03:03,446
we've made signing in, even for


90
00:03:03,446 --> 00:03:04,846
a guest that might not have ever


91
00:03:04,846 --> 00:03:06,156
used your Apple TV before.


92
00:03:06,506 --> 00:03:07,686
And, to demonstrate that, I'd


93
00:03:07,686 --> 00:03:08,806
like to invite Conrad up to the


94
00:03:08,806 --> 00:03:09,000
stage.


95
00:03:11,016 --> 00:03:13,676
[ Applause ]


96
00:03:14,176 --> 00:03:14,896
>> Thank you, Alex.


97
00:03:16,246 --> 00:03:18,216
Now, suppose that I'm Alex's


98
00:03:18,216 --> 00:03:18,626
cousin.


99
00:03:18,986 --> 00:03:19,866
I'm visiting for the week.


100
00:03:20,876 --> 00:03:22,636
Now, his puppy's pretty cute.


101
00:03:23,286 --> 00:03:24,566
But, I really want to sign in to


102
00:03:24,566 --> 00:03:26,956
shiny so I can see pictures of


103
00:03:26,956 --> 00:03:29,196
my own dog Max, or maybe his


104
00:03:29,196 --> 00:03:30,596
adorable sister, Min.


105
00:03:31,616 --> 00:03:33,996
Now, I've never used his Apple


106
00:03:33,996 --> 00:03:36,266
TV before, so I don't have any


107
00:03:36,266 --> 00:03:37,246
of the keyboard options


108
00:03:37,246 --> 00:03:38,436
available that he just


109
00:03:38,436 --> 00:03:38,996
discussed.


110
00:03:39,556 --> 00:03:41,536
Furthermore, since I use a


111
00:03:41,536 --> 00:03:43,826
strong password saved in iCloud


112
00:03:43,826 --> 00:03:45,886
keychain, I haven't memorized


113
00:03:45,886 --> 00:03:46,026
it.


114
00:03:46,736 --> 00:03:48,416
I expect that I'm going to have


115
00:03:48,446 --> 00:03:50,196
to look up my password, and then


116
00:03:50,196 --> 00:03:52,256
type it in character by


117
00:03:52,256 --> 00:03:54,296
character on the Apple TV.


118
00:03:55,456 --> 00:03:56,476
Well, let's see what happens.


119
00:03:58,596 --> 00:03:59,596
I'm going to go over here.


120
00:03:59,596 --> 00:04:02,156
I'm going to go to my phone.


121
00:04:02,906 --> 00:04:04,776
And, let's sign in.


122
00:04:05,476 --> 00:04:08,546
Oh, and even before I can open


123
00:04:08,546 --> 00:04:10,776
settings, or ask Siri to look up


124
00:04:10,776 --> 00:04:13,046
my password, my iPhone is


125
00:04:13,046 --> 00:04:14,586
already offering to help me


126
00:04:14,586 --> 00:04:15,526
AutoFill my password.


127
00:04:16,846 --> 00:04:18,406
So, I'm going to open up this


128
00:04:18,406 --> 00:04:18,956
notification.


129
00:04:19,526 --> 00:04:21,146
There we go.


130
00:04:21,755 --> 00:04:24,396
And, by entering a PIN I know


131
00:04:24,396 --> 00:04:27,226
that I am securely connecting to


132
00:04:27,316 --> 00:04:28,386
this Apple TV.


133
00:04:29,246 --> 00:04:30,026
Going to Touch ID.


134
00:04:30,026 --> 00:04:33,246
And, my shiny credential appears


135
00:04:33,246 --> 00:04:35,286
right at the top, with one tap


136
00:04:36,426 --> 00:04:37,156
I'm signed in.


137
00:04:37,656 --> 00:04:37,976
Super easy.


138
00:04:38,516 --> 00:04:40,816
[ Applause ]


139
00:04:41,316 --> 00:04:44,496
Aw. Sorry, it's just-- it's Min.


140
00:04:44,496 --> 00:04:44,836
OK.


141
00:04:45,696 --> 00:04:47,796
Now one thing you might be


142
00:04:47,796 --> 00:04:50,086
wondering is how did that work


143
00:04:50,566 --> 00:04:53,606
without all the iPhones in the


144
00:04:53,606 --> 00:04:55,456
room showing a notification?


145
00:04:56,616 --> 00:04:59,316
I think this is really, really


146
00:04:59,316 --> 00:04:59,586
cool.


147
00:05:00,676 --> 00:05:02,606
The Siri remote is able to


148
00:05:02,606 --> 00:05:05,286
locate nearby iPhones on which


149
00:05:05,286 --> 00:05:06,196
to offer AutoFill.


150
00:05:06,566 --> 00:05:09,306
So, in this case, only my iPhone


151
00:05:09,306 --> 00:05:10,436
showed a notification.


152
00:05:11,186 --> 00:05:13,126
And that is Password AutoFill


153
00:05:13,296 --> 00:05:14,116
for tvOS.


154
00:05:14,706 --> 00:05:15,806
I'd now like to thank-- sorry,


155
00:05:15,806 --> 00:05:17,636
I'd like to invite Alex back up


156
00:05:17,636 --> 00:05:19,906
to the stage to show you just


157
00:05:19,906 --> 00:05:21,786
how easy it is to make this work


158
00:05:21,886 --> 00:05:23,516
flawlessly in your apps.


159
00:05:23,516 --> 00:05:23,676
Alex?


160
00:05:24,516 --> 00:05:29,486
[ Applause ]


161
00:05:29,986 --> 00:05:30,616
>> Thank you, Conrad.


162
00:05:31,586 --> 00:05:33,096
Man, I love that demo.


163
00:05:33,126 --> 00:05:34,196
I just think that feature is so


164
00:05:34,196 --> 00:05:34,486
cool.


165
00:05:36,636 --> 00:05:38,536
Password AutoFill for tvOS is


166
00:05:38,536 --> 00:05:39,756
part of a suite of features that


167
00:05:39,756 --> 00:05:40,586
you might have heard about on


168
00:05:40,586 --> 00:05:42,316
Monday, meant to simplify the


169
00:05:42,316 --> 00:05:43,256
password experience.


170
00:05:44,046 --> 00:05:45,516
These features integrate into


171
00:05:45,516 --> 00:05:46,786
existing apps, without you


172
00:05:46,786 --> 00:05:48,206
having to make any big changes.


173
00:05:49,156 --> 00:05:50,096
And, there's a few things that


174
00:05:50,096 --> 00:05:51,756
you developers can do to ensure


175
00:05:51,756 --> 00:05:53,006
that Password AutoFill is as


176
00:05:53,006 --> 00:05:53,916
great as possible.


177
00:05:54,346 --> 00:05:56,356
Let's go over those briefly now.


178
00:05:57,096 --> 00:05:58,906
First, you'll want to ensure


179
00:05:58,906 --> 00:06:00,446
that the QuickType bar appears


180
00:06:00,446 --> 00:06:01,286
for your text fields.


181
00:06:02,726 --> 00:06:03,976
Next, you want to make sure that


182
00:06:03,976 --> 00:06:05,366
your app's credentials are


183
00:06:05,366 --> 00:06:06,746
suggested on the QuickType bar.


184
00:06:07,726 --> 00:06:10,326
And lastly, you want to enable a


185
00:06:10,326 --> 00:06:12,126
one-tap sign in experience.


186
00:06:12,756 --> 00:06:13,886
Now, let's look at how to do


187
00:06:13,886 --> 00:06:14,716
this in more detail.


188
00:06:16,486 --> 00:06:17,666
To ensure the QuickType bar


189
00:06:17,666 --> 00:06:19,186
appears for your text fields,


190
00:06:19,616 --> 00:06:20,466
you want to adopt


191
00:06:20,616 --> 00:06:22,156
UITextContentTypes.


192
00:06:22,716 --> 00:06:24,906
tvOS will automatically try to


193
00:06:24,906 --> 00:06:26,256
detect username and password


194
00:06:26,256 --> 00:06:27,746
fields, and you can help this


195
00:06:27,796 --> 00:06:29,646
process by explicitly marking


196
00:06:29,646 --> 00:06:30,416
your text fields.


197
00:06:31,386 --> 00:06:32,556
This is as easy as setting a


198
00:06:32,666 --> 00:06:33,836
single property on those text


199
00:06:33,836 --> 00:06:34,116
fields.


200
00:06:34,756 --> 00:06:36,576
Simply set, for your username


201
00:06:36,576 --> 00:06:37,556
text fields, it's


202
00:06:37,736 --> 00:06:39,556
textContentType to .username,


203
00:06:39,926 --> 00:06:41,316
and similarly for your password


204
00:06:41,316 --> 00:06:42,296
field, you'll set its


205
00:06:42,296 --> 00:06:43,986
textContentType to .password.


206
00:06:44,626 --> 00:06:45,836
Very simple, and this can be


207
00:06:45,836 --> 00:06:46,976
done in Interface Builder as


208
00:06:46,976 --> 00:06:47,216
well.


209
00:06:48,576 --> 00:06:49,876
So, after adopting the


210
00:06:49,876 --> 00:06:51,536
textContentTypes, here's what


211
00:06:51,536 --> 00:06:52,756
viewers would likely see in that


212
00:06:52,756 --> 00:06:53,606
continuity keyboard


213
00:06:53,606 --> 00:06:54,266
notification.


214
00:06:54,426 --> 00:06:55,826
And, this is good, because it


215
00:06:55,826 --> 00:06:57,236
gives users access to their


216
00:06:57,236 --> 00:06:57,816
passwords.


217
00:06:58,586 --> 00:07:00,036
But, it's behind that key icon.


218
00:07:00,536 --> 00:07:01,446
Too many taps away.


219
00:07:01,626 --> 00:07:03,266
What we really want the user to


220
00:07:03,266 --> 00:07:05,686
see is this: your app's


221
00:07:05,686 --> 00:07:07,766
credentials suggested right on


222
00:07:07,766 --> 00:07:08,496
the QuickType bar.


223
00:07:09,636 --> 00:07:10,976
The way you get this behavior is


224
00:07:10,976 --> 00:07:12,866
by adopting a technology called


225
00:07:12,866 --> 00:07:14,576
Associated Domains, which


226
00:07:14,576 --> 00:07:16,286
securely tells Password AutoFill


227
00:07:16,316 --> 00:07:17,906
which domains to suggest on the


228
00:07:17,906 --> 00:07:19,000
QuickType bar.


229
00:07:21,236 --> 00:07:23,496
Associated Domains is a powerful


230
00:07:23,496 --> 00:07:25,116
technology that enables other


231
00:07:25,116 --> 00:07:26,366
features, such as universal


232
00:07:26,366 --> 00:07:26,976
links and Handoff.


233
00:07:31,496 --> 00:07:33,646
It creates a secure relationship


234
00:07:33,966 --> 00:07:35,386
between the domain the user's


235
00:07:35,386 --> 00:07:36,966
accessing and the app that they


236
00:07:36,966 --> 00:07:37,806
have downloaded.


237
00:07:38,946 --> 00:07:40,976
Password AutoFill then uses this


238
00:07:40,976 --> 00:07:42,456
relationship to suggest the


239
00:07:42,456 --> 00:07:44,176
exact right credential, right on


240
00:07:44,176 --> 00:07:46,576
top of the QuickType bar.


241
00:07:46,766 --> 00:07:48,236
To learn how to adopt Associated


242
00:07:48,236 --> 00:07:49,996
Domains, I highly recommend


243
00:07:50,036 --> 00:07:51,456
checking out "Introducing


244
00:07:51,456 --> 00:07:53,176
Password AutoFill for Apps" from


245
00:07:53,176 --> 00:07:54,416
WWDC of last year.


246
00:07:55,016 --> 00:07:56,006
This talk contains a


247
00:07:56,126 --> 00:07:58,146
step-by-step guide for how to


248
00:07:58,146 --> 00:07:59,946
adopt Associated Domains for iOS


249
00:07:59,946 --> 00:08:01,096
apps, and the steps are


250
00:08:01,096 --> 00:08:02,826
identical for tvOS apps.


251
00:08:04,796 --> 00:08:06,086
So, after adopting Associated


252
00:08:06,086 --> 00:08:07,486
Domains, this is what the user


253
00:08:07,486 --> 00:08:09,686
will likely see on the shiny app


254
00:08:09,686 --> 00:08:11,046
after tapping your credential on


255
00:08:11,046 --> 00:08:11,766
the QuickType bar.


256
00:08:12,006 --> 00:08:13,046
And, this is awesome.


257
00:08:13,346 --> 00:08:14,806
The user has their username and


258
00:08:14,806 --> 00:08:16,526
passwords on their Apple TV


259
00:08:16,526 --> 00:08:17,856
without having to type a single


260
00:08:17,856 --> 00:08:18,476
character.


261
00:08:18,546 --> 00:08:20,446
But what we really want the user


262
00:08:20,446 --> 00:08:21,966
to see is this.


263
00:08:22,996 --> 00:08:24,586
Being automatically signed in


264
00:08:24,586 --> 00:08:25,626
and seeing their pupper of the


265
00:08:25,626 --> 00:08:27,696
day, because they've been signed


266
00:08:27,696 --> 00:08:28,476
in with one tap.


267
00:08:30,186 --> 00:08:31,796
You can get this behavior by


268
00:08:31,796 --> 00:08:32,436
implementing the


269
00:08:32,436 --> 00:08:34,916
preferredFocusEnvironments API.


270
00:08:36,056 --> 00:08:38,025
So, after filling in a password,


271
00:08:38,166 --> 00:08:39,566
a focus update occurs.


272
00:08:39,775 --> 00:08:40,846
And, Password AutoFill will


273
00:08:40,846 --> 00:08:42,116
perform the action of the


274
00:08:42,116 --> 00:08:43,566
focused button if one is


275
00:08:43,566 --> 00:08:44,046
focused.


276
00:08:44,606 --> 00:08:46,056
So, you should implement the


277
00:08:46,056 --> 00:08:47,696
preferredFocusEnvironments API,


278
00:08:48,176 --> 00:08:49,536
so you can provide your login


279
00:08:49,536 --> 00:08:50,766
button to the focus engine.


280
00:08:51,386 --> 00:08:52,126
Let's look at how you might


281
00:08:52,126 --> 00:08:53,966
implement this.


282
00:08:54,636 --> 00:08:55,546
Here I have a sample


283
00:08:55,546 --> 00:08:56,406
implementation of the


284
00:08:56,406 --> 00:08:58,036
preferredFocusEnvironments API,


285
00:08:58,516 --> 00:08:59,716
which returns an array of


286
00:08:59,716 --> 00:09:01,636
UIFocusEnvironment objects.


287
00:09:02,996 --> 00:09:04,666
First, we'll try to grab text


288
00:09:04,666 --> 00:09:05,766
out of our username and password


289
00:09:05,766 --> 00:09:06,106
fields.


290
00:09:06,526 --> 00:09:07,606
And, if we can, we'll just


291
00:09:07,606 --> 00:09:08,806
return that login button to the


292
00:09:08,806 --> 00:09:09,476
focus engine.


293
00:09:10,426 --> 00:09:11,486
If we weren't able to grab any


294
00:09:11,486 --> 00:09:12,956
text, that just means the user


295
00:09:12,956 --> 00:09:14,186
hasn't entered any yet.


296
00:09:14,376 --> 00:09:16,036
So, we'll return the username


297
00:09:16,036 --> 00:09:17,306
text field to be focused.


298
00:09:18,136 --> 00:09:18,736
Super simple.


299
00:09:20,766 --> 00:09:21,656
So, let's recap some of the


300
00:09:21,656 --> 00:09:23,056
major takeaways of Password


301
00:09:23,056 --> 00:09:23,566
AutoFill.


302
00:09:25,296 --> 00:09:27,856
For customers, Password AutoFill


303
00:09:27,856 --> 00:09:29,406
reduces the friction within your


304
00:09:29,406 --> 00:09:32,006
app by enabling a one-tap sign


305
00:09:32,006 --> 00:09:32,986
in experience.


306
00:09:33,666 --> 00:09:35,316
If any adoption is needed on


307
00:09:35,316 --> 00:09:37,266
your part for developers, this


308
00:09:37,266 --> 00:09:38,076
is super simple.


309
00:09:39,236 --> 00:09:41,296
You simply have to just adopt


310
00:09:41,476 --> 00:09:44,876
UITextContentTypes, adopt


311
00:09:44,876 --> 00:09:46,376
Associated Domains so that your


312
00:09:46,376 --> 00:09:47,886
apps credentials are surfaced to


313
00:09:47,886 --> 00:09:48,646
the QuickType bar.


314
00:09:50,086 --> 00:09:51,436
And, lastly, implement


315
00:09:51,476 --> 00:09:53,116
preferredFocusEnvironments to


316
00:09:53,116 --> 00:09:55,006
enable that one-tap sign in


317
00:09:55,006 --> 00:09:55,696
experience.


318
00:09:56,736 --> 00:09:57,916
And that's Password AutoFill for


319
00:09:57,916 --> 00:09:58,536
tvOS.


320
00:09:59,066 --> 00:10:00,436
We cannot wait for you and your


321
00:10:00,436 --> 00:10:01,966
users to get your hands on it.


322
00:10:02,546 --> 00:10:03,676
Next, I'd like to invite up Ada


323
00:10:03,676 --> 00:10:04,306
to talk about focus


324
00:10:04,306 --> 00:10:04,906
enhancements.


325
00:10:05,516 --> 00:10:12,746
[ Applause ]


326
00:10:13,246 --> 00:10:14,206
>> Thanks, Alex.


327
00:10:14,716 --> 00:10:16,486
Hi, my name is Ada Turner, and


328
00:10:16,486 --> 00:10:17,816
I'm really excited to talk to


329
00:10:17,816 --> 00:10:18,826
you today about some


330
00:10:18,826 --> 00:10:19,956
enhancements that we've made to


331
00:10:19,956 --> 00:10:21,716
Focus in tvOS 12.


332
00:10:22,956 --> 00:10:25,036
Focus is a great way for users


333
00:10:25,036 --> 00:10:27,276
to interact with your apps on


334
00:10:27,526 --> 00:10:27,656
tvOS.


335
00:10:27,656 --> 00:10:29,046
It allows them to gracefully


336
00:10:29,046 --> 00:10:30,746
scroll through content and


337
00:10:30,746 --> 00:10:31,966
provides playful movement


338
00:10:31,966 --> 00:10:33,516
hinting as they interact with


339
00:10:33,516 --> 00:10:34,836
the touch surface of the Siri


340
00:10:34,836 --> 00:10:35,296
remote.


341
00:10:36,216 --> 00:10:37,616
Apps built with UIKit,


342
00:10:37,926 --> 00:10:40,166
SpriteKit, and SceneKit, all


343
00:10:40,166 --> 00:10:41,806
have native support for focus.


344
00:10:42,146 --> 00:10:43,616
However, apps that use


345
00:10:43,616 --> 00:10:45,246
alternative methods to render


346
00:10:45,246 --> 00:10:47,076
their content have not been able


347
00:10:47,076 --> 00:10:48,706
to directly support the focus


348
00:10:48,706 --> 00:10:49,086
engine.


349
00:10:50,076 --> 00:10:51,856
Today, I am pleased to announce


350
00:10:51,856 --> 00:10:54,046
that in tvOS 12, the focus


351
00:10:54,046 --> 00:10:55,436
engine, now supports apps


352
00:10:55,466 --> 00:10:56,786
regardless of how they are


353
00:10:56,786 --> 00:10:56,976
rendered.


354
00:10:57,516 --> 00:11:02,546
[ Applause ]


355
00:11:03,046 --> 00:11:04,966
This means that apps written in


356
00:11:04,966 --> 00:11:07,036
frameworks such as Metal can now


357
00:11:07,036 --> 00:11:09,056
adopt focus directly into their


358
00:11:09,056 --> 00:11:09,996
interaction model.


359
00:11:10,456 --> 00:11:12,006
This is accomplished by allowing


360
00:11:12,006 --> 00:11:13,596
you to conform your own classes


361
00:11:13,596 --> 00:11:15,666
to focus protocols, even if they


362
00:11:15,666 --> 00:11:17,196
don't inherit from UIKit


363
00:11:17,196 --> 00:11:17,976
components.


364
00:11:18,796 --> 00:11:20,386
Now, what this means for your


365
00:11:20,386 --> 00:11:22,726
apps is they will get state


366
00:11:22,726 --> 00:11:24,266
management of what's currently


367
00:11:24,266 --> 00:11:24,876
focused.


368
00:11:25,406 --> 00:11:27,246
Geometric determination of where


369
00:11:27,246 --> 00:11:28,806
focus can and cannot move.


370
00:11:29,366 --> 00:11:32,136
Full accessibility support, and


371
00:11:32,426 --> 00:11:34,316
focus movement, hinting, and


372
00:11:34,316 --> 00:11:36,216
scrolling that feels just like


373
00:11:36,216 --> 00:11:37,686
native tvOS apps.


374
00:11:39,076 --> 00:11:40,556
Before we take a look at the new


375
00:11:40,556 --> 00:11:42,626
focus API's, let's briefly


376
00:11:42,626 --> 00:11:43,816
refresh ourselves on some


377
00:11:43,816 --> 00:11:45,266
existing focus components.


378
00:11:46,256 --> 00:11:47,226
First, we have


379
00:11:47,226 --> 00:11:48,536
UIFocusEnvironments.


380
00:11:48,866 --> 00:11:50,626
This protocol manages state


381
00:11:50,626 --> 00:11:52,026
where focus interactions can


382
00:11:52,026 --> 00:11:52,666
take place.


383
00:11:53,076 --> 00:11:54,316
It is notified when focus


384
00:11:54,316 --> 00:11:56,296
updates occur, and can influence


385
00:11:56,296 --> 00:11:57,506
focus update behavior.


386
00:11:57,976 --> 00:12:00,206
In UIKit, UIViewController is a


387
00:12:00,206 --> 00:12:01,696
great example of a focus


388
00:12:01,696 --> 00:12:02,316
environment.


389
00:12:03,456 --> 00:12:05,526
Next, we have UIFocusItem.


390
00:12:06,336 --> 00:12:08,036
This protocol inherits from


391
00:12:08,036 --> 00:12:09,756
FocusEnvironment, and adds the


392
00:12:09,756 --> 00:12:11,326
ability for focus items to


393
00:12:11,326 --> 00:12:12,636
actually be able to become


394
00:12:12,636 --> 00:12:13,246
focused.


395
00:12:13,646 --> 00:12:16,186
UIKit's UIView, and SpriteKit's


396
00:12:16,186 --> 00:12:18,156
SKNode are great examples of


397
00:12:18,156 --> 00:12:19,036
focus items.


398
00:12:19,976 --> 00:12:21,746
And, finally we have the


399
00:12:21,746 --> 00:12:23,666
UIFocusSystem, which provides


400
00:12:23,666 --> 00:12:24,736
the famously useful


401
00:12:24,736 --> 00:12:26,556
functionality of being able to


402
00:12:26,556 --> 00:12:28,616
register custom sounds to play


403
00:12:28,806 --> 00:12:30,216
during focus interactions.


404
00:12:31,216 --> 00:12:32,906
For more information on how to


405
00:12:32,906 --> 00:12:34,706
work with these components, and


406
00:12:34,776 --> 00:12:37,036
debug focus, I highly recommend


407
00:12:37,036 --> 00:12:38,176
that you watch "Focus


408
00:12:38,176 --> 00:12:40,476
Interaction in tvOS 11" from


409
00:12:40,476 --> 00:12:41,096
last year.


410
00:12:42,046 --> 00:12:44,286
And now, I'm really excited to


411
00:12:44,286 --> 00:12:46,196
introduce some new components to


412
00:12:46,196 --> 00:12:47,076
the focus engine.


413
00:12:47,656 --> 00:12:50,756
First, starting in tvOS 12, we


414
00:12:50,756 --> 00:12:52,486
are expanding the functionality


415
00:12:52,536 --> 00:12:54,056
of the focusSystem object.


416
00:12:54,476 --> 00:12:55,496
You may now retrieve a


417
00:12:55,496 --> 00:12:56,996
focusSystem for a given


418
00:12:56,996 --> 00:12:58,926
environment, and access the


419
00:12:58,926 --> 00:13:00,596
currently focused item off of


420
00:13:00,596 --> 00:13:01,466
the focusSystem.


421
00:13:02,346 --> 00:13:04,256
Next, we are introducing a new


422
00:13:04,256 --> 00:13:05,346
protocol, called


423
00:13:05,346 --> 00:13:07,446
UIFocusItemContainer, which


424
00:13:07,446 --> 00:13:09,306
provides geometric context to


425
00:13:09,306 --> 00:13:10,056
Focus items.


426
00:13:11,266 --> 00:13:13,416
A focusItemContainer is owned by


427
00:13:13,416 --> 00:13:15,276
a focusEnvironment, and can


428
00:13:15,276 --> 00:13:17,136
locate focus items within


429
00:13:17,136 --> 00:13:19,076
specific regions, allowing the


430
00:13:19,076 --> 00:13:20,826
focus engine to move focus to


431
00:13:20,826 --> 00:13:21,886
the best candidate.


432
00:13:22,306 --> 00:13:25,476
Next, we have a special type of


433
00:13:25,476 --> 00:13:27,046
focusItemContainer, called


434
00:13:27,046 --> 00:13:28,836
focusItemScrollableContainer,


435
00:13:29,126 --> 00:13:30,236
which adds support for


436
00:13:30,236 --> 00:13:31,646
automatically scrolling through


437
00:13:31,646 --> 00:13:33,426
content as focus is moved.


438
00:13:34,516 --> 00:13:36,606
And, finally, we now supply


439
00:13:36,606 --> 00:13:38,846
focusItems with movement hints,


440
00:13:39,036 --> 00:13:40,726
which contain raw values that


441
00:13:40,726 --> 00:13:42,206
you can use to create visual


442
00:13:42,206 --> 00:13:44,236
effects that suggest what


443
00:13:44,236 --> 00:13:46,056
direction focus is about to move


444
00:13:46,056 --> 00:13:46,266
in.


445
00:13:47,266 --> 00:13:49,446
Now, let's take a closer look at


446
00:13:49,446 --> 00:13:51,346
how we can form our own classes


447
00:13:51,346 --> 00:13:52,246
to these protocols.


448
00:13:53,086 --> 00:13:54,576
Let's start by implementing a


449
00:13:54,576 --> 00:13:56,056
custom focusEnvironment.


450
00:13:56,826 --> 00:13:58,586
In order for the focus engine to


451
00:13:58,586 --> 00:14:00,666
find your environment, and its


452
00:14:00,666 --> 00:14:02,876
child environments or items, you


453
00:14:02,876 --> 00:14:04,766
must supply a parent focus


454
00:14:04,766 --> 00:14:05,906
environment, and a


455
00:14:05,906 --> 00:14:07,066
focusItemContainer.


456
00:14:07,326 --> 00:14:09,506
For example, UIViewController


457
00:14:09,506 --> 00:14:10,736
might provide its parent


458
00:14:10,736 --> 00:14:11,866
viewController as its


459
00:14:11,866 --> 00:14:13,806
parentFocusEnvironment, and its


460
00:14:13,806 --> 00:14:16,076
view as its focusItemContainer.


461
00:14:17,336 --> 00:14:18,926
FocusEnvironment provides


462
00:14:18,926 --> 00:14:20,296
several methods you can use to


463
00:14:20,296 --> 00:14:22,016
control and react to focus


464
00:14:22,016 --> 00:14:22,636
updates.


465
00:14:22,986 --> 00:14:23,766
For example,


466
00:14:24,036 --> 00:14:25,706
preferredFocusEnvironments


467
00:14:25,706 --> 00:14:27,336
allows you to guide the focus


468
00:14:27,336 --> 00:14:29,476
system in selecting what item is


469
00:14:29,546 --> 00:14:30,636
focused after view


470
00:14:30,636 --> 00:14:32,246
initialization, or a


471
00:14:32,246 --> 00:14:33,776
programmatic focus update.


472
00:14:34,686 --> 00:14:36,136
I'd like to call your attention


473
00:14:36,136 --> 00:14:38,036
to two specific methods on the


474
00:14:38,036 --> 00:14:39,076
focusEnvironment.


475
00:14:39,666 --> 00:14:41,666
SetNeedsFocusUpdate and


476
00:14:41,666 --> 00:14:42,836
updateFocusIfNeeded.


477
00:14:43,276 --> 00:14:44,866
Your implementation of these


478
00:14:44,866 --> 00:14:48,006
methods must call to a specific


479
00:14:48,006 --> 00:14:49,766
method on the focusSystem.


480
00:14:51,116 --> 00:14:53,626
Next, let's implement a custom


481
00:14:53,626 --> 00:14:54,896
focusItemContainer.


482
00:14:56,876 --> 00:14:58,716
First, you will need to provide


483
00:14:58,716 --> 00:14:59,726
a coordinateSpace.


484
00:15:00,146 --> 00:15:01,656
UIView provides itself as a


485
00:15:01,656 --> 00:15:02,546
coordinateSpace.


486
00:15:03,026 --> 00:15:04,256
If your container is more


487
00:15:04,256 --> 00:15:05,626
abstract, you may return an


488
00:15:05,626 --> 00:15:07,676
existing coordinateSpace or


489
00:15:07,676 --> 00:15:08,516
implement your own.


490
00:15:09,926 --> 00:15:11,466
Next, you will need to implement


491
00:15:11,466 --> 00:15:12,626
focusItems in rect.


492
00:15:13,126 --> 00:15:14,686
This method must return any


493
00:15:14,686 --> 00:15:16,496
contained focusItems whose


494
00:15:16,596 --> 00:15:17,806
frames intersect with the


495
00:15:17,806 --> 00:15:18,566
provided rect.


496
00:15:19,126 --> 00:15:20,626
Note that the rect passed to


497
00:15:20,626 --> 00:15:22,276
this method is expressed in the


498
00:15:22,276 --> 00:15:23,306
coordinateSpace of the


499
00:15:23,306 --> 00:15:25,756
container, and the frames of


500
00:15:25,756 --> 00:15:27,506
each focusItem you return from


501
00:15:27,506 --> 00:15:29,166
this method must also be


502
00:15:29,166 --> 00:15:30,006
expressed in that


503
00:15:30,006 --> 00:15:30,976
coordinateSpace.


504
00:15:33,206 --> 00:15:35,126
Next, let's implement a custom


505
00:15:35,126 --> 00:15:35,806
FocusItem.


506
00:15:36,916 --> 00:15:38,246
Remember that this protocol


507
00:15:38,246 --> 00:15:39,826
inherits from FocusEnvironment,


508
00:15:39,826 --> 00:15:40,986
so you will need to implement


509
00:15:40,986 --> 00:15:42,296
all of those methods as well.


510
00:15:43,526 --> 00:15:45,196
In order for the focus engine to


511
00:15:45,196 --> 00:15:47,216
move focus onto your item, it


512
00:15:47,216 --> 00:15:48,586
must return "true" from


513
00:15:48,586 --> 00:15:49,726
canBecomeFocused.


514
00:15:51,066 --> 00:15:52,896
DidHintFocusMovement is an


515
00:15:52,946 --> 00:15:54,606
optional method that is called


516
00:15:54,606 --> 00:15:55,966
whenever the user moves their


517
00:15:55,966 --> 00:15:57,606
finger on the touch surface of


518
00:15:57,606 --> 00:15:58,406
the Siri remote.


519
00:15:58,936 --> 00:16:01,486
It provides the focusItem with a


520
00:16:01,486 --> 00:16:03,206
movement hint that contains raw


521
00:16:03,206 --> 00:16:04,806
values you can use to create an


522
00:16:04,806 --> 00:16:06,706
effect that indicates what


523
00:16:06,706 --> 00:16:08,376
direction focus is about to move


524
00:16:08,376 --> 00:16:08,566
in.


525
00:16:09,746 --> 00:16:11,066
Finally, you will need to


526
00:16:11,066 --> 00:16:11,856
provide a frame.


527
00:16:12,256 --> 00:16:14,006
As I said before, this frame


528
00:16:14,006 --> 00:16:15,246
must be expressed in the


529
00:16:15,246 --> 00:16:16,606
coordinateSpace of the


530
00:16:16,606 --> 00:16:18,536
containing focusItemContainer.


531
00:16:18,856 --> 00:16:21,456
For example, UIView expresses


532
00:16:21,496 --> 00:16:23,526
its frame in the coordinateSpace


533
00:16:23,636 --> 00:16:25,866
of its superview, which is also


534
00:16:25,866 --> 00:16:26,816
its containing


535
00:16:26,926 --> 00:16:27,996
focusItemContainer.


536
00:16:29,296 --> 00:16:31,336
Now, let's take a closer look at


537
00:16:31,336 --> 00:16:33,006
the focusMovementHint object.


538
00:16:34,186 --> 00:16:35,956
Movement direction is a vector,


539
00:16:36,196 --> 00:16:37,736
whose values range between


540
00:16:37,736 --> 00:16:40,306
negative 1, negative 1 and 1,1


541
00:16:40,636 --> 00:16:42,606
representing how close focus is


542
00:16:42,606 --> 00:16:43,956
to moving in a particular


543
00:16:43,956 --> 00:16:44,586
direction.


544
00:16:45,426 --> 00:16:47,676
This value is tied to the path a


545
00:16:47,676 --> 00:16:49,276
user's finger creates on the


546
00:16:49,276 --> 00:16:50,716
touch surface of the Siri


547
00:16:50,716 --> 00:16:51,056
remote.


548
00:16:52,456 --> 00:16:54,546
Perspective, rotation, and


549
00:16:54,546 --> 00:16:56,686
translation are all values you


550
00:16:56,686 --> 00:16:59,006
can use to match tvOS's native


551
00:16:59,006 --> 00:17:00,106
interaction hinting.


552
00:17:01,046 --> 00:17:02,496
And, interactionTransform


553
00:17:02,626 --> 00:17:04,116
combines all three of these


554
00:17:04,116 --> 00:17:05,715
values into a single 3D


555
00:17:05,715 --> 00:17:06,326
transform.


556
00:17:06,786 --> 00:17:09,945
Next, let's look at how to


557
00:17:09,945 --> 00:17:11,006
implement a custom


558
00:17:11,006 --> 00:17:12,965
focusItemScrollableContainer.


559
00:17:13,726 --> 00:17:15,286
This is a special type of


560
00:17:15,286 --> 00:17:17,086
focusItemContainer, and by


561
00:17:17,086 --> 00:17:18,606
conforming to this protocol,


562
00:17:18,876 --> 00:17:20,336
your container signals to the


563
00:17:20,336 --> 00:17:22,016
focus engine that it supports


564
00:17:22,016 --> 00:17:22,486
scrolling.


565
00:17:22,806 --> 00:17:24,626
For example, UIScrollView


566
00:17:24,626 --> 00:17:26,006
conforms to this protocol.


567
00:17:26,986 --> 00:17:28,856
It provides three additional


568
00:17:28,856 --> 00:17:30,786
properties that allows the focus


569
00:17:30,786 --> 00:17:32,446
engine to manage its scrolling


570
00:17:32,446 --> 00:17:32,986
behavior.


571
00:17:33,436 --> 00:17:36,146
First, we have contentOffset,


572
00:17:36,456 --> 00:17:38,376
which is a read/write property


573
00:17:38,536 --> 00:17:39,746
representing how far the


574
00:17:39,746 --> 00:17:41,106
container has been scrolled.


575
00:17:41,586 --> 00:17:43,406
This property will automatically


576
00:17:43,406 --> 00:17:45,506
be set by the focus engine as


577
00:17:45,506 --> 00:17:47,916
focus is moved in order to keep


578
00:17:47,916 --> 00:17:49,416
the currently focused item on


579
00:17:49,416 --> 00:17:49,916
screen.


580
00:17:51,196 --> 00:17:53,076
Second, we have contentSize,


581
00:17:53,276 --> 00:17:56,686
which represents the total size


582
00:17:56,686 --> 00:17:58,626
of your scrollable content and


583
00:17:58,726 --> 00:18:00,956
third, we have visibleSize,


584
00:18:01,146 --> 00:18:02,626
which represents the onscreen


585
00:18:02,626 --> 00:18:04,016
size of your container.


586
00:18:04,406 --> 00:18:06,196
This property is analogous to


587
00:18:06,196 --> 00:18:08,346
bounds.size on the UIScrollView.


588
00:18:09,396 --> 00:18:11,736
It is important to remember that


589
00:18:11,736 --> 00:18:13,166
contentOffset will be set


590
00:18:13,256 --> 00:18:15,086
automatically, and it is your


591
00:18:15,086 --> 00:18:17,306
responsibility to update your


592
00:18:17,306 --> 00:18:18,786
rendered content as appropriate


593
00:18:18,786 --> 00:18:19,976
whenever this property is set.


594
00:18:24,166 --> 00:18:25,916
Now, let's talk about adding


595
00:18:25,916 --> 00:18:27,566
accessibility to our custom


596
00:18:27,566 --> 00:18:28,326
rendered apps.


597
00:18:28,926 --> 00:18:30,926
It's actually incredibly easy.


598
00:18:31,496 --> 00:18:32,366
By implementing


599
00:18:32,366 --> 00:18:34,816
focusItemContainers, focusItems


600
00:18:34,816 --> 00:18:36,356
in rect method, you are


601
00:18:36,356 --> 00:18:38,176
providing the focus engine with


602
00:18:38,176 --> 00:18:39,826
enough information to allow


603
00:18:39,826 --> 00:18:41,836
voiceover to assist your users


604
00:18:41,836 --> 00:18:42,736
in navigation.


605
00:18:43,526 --> 00:18:45,456
Remember to set accessibility


606
00:18:45,456 --> 00:18:47,716
labels and accessibility hints


607
00:18:47,866 --> 00:18:49,876
on your focusItems in order for


608
00:18:49,876 --> 00:18:51,676
voiceover to give your users the


609
00:18:51,676 --> 00:18:53,066
best experience.


610
00:18:53,676 --> 00:18:55,056
I highly recommend that you


611
00:18:55,056 --> 00:18:56,536
watch "What's New in


612
00:18:56,536 --> 00:18:59,946
Accessibility" from WWDC 2016


613
00:18:59,946 --> 00:19:02,206
for a more in-depth look at how


614
00:19:02,316 --> 00:19:04,576
focus and voiceover work


615
00:19:04,576 --> 00:19:06,116
together in tvOS.


616
00:19:06,966 --> 00:19:10,336
And now, I'd like to invite my


617
00:19:10,526 --> 00:19:12,026
colleague, Paul, to give us a


618
00:19:12,026 --> 00:19:13,406
demo on how to create a


619
00:19:13,406 --> 00:19:14,886
focus-powered Metal app.


620
00:19:15,516 --> 00:19:21,516
[ Applause ]


621
00:19:22,016 --> 00:19:22,466
>> Thanks, Ada.


622
00:19:22,466 --> 00:19:25,036
So, I'm working on the setting


623
00:19:25,036 --> 00:19:26,576
screen for a Metal-based game.


624
00:19:27,136 --> 00:19:28,156
At the bottom of the screen,


625
00:19:28,306 --> 00:19:29,226
there's some standard UI


626
00:19:29,226 --> 00:19:29,646
buttons.


627
00:19:30,426 --> 00:19:32,116
And, up at the top are some


628
00:19:32,116 --> 00:19:33,406
tiles for selecting levels.


629
00:19:34,086 --> 00:19:35,076
These tiles are actually


630
00:19:35,076 --> 00:19:36,006
rendered by the game engine


631
00:19:36,006 --> 00:19:36,526
itself.


632
00:19:36,906 --> 00:19:37,736
I'm sure you can tell by the


633
00:19:37,736 --> 00:19:38,986
incredible 3D graphics that you


634
00:19:38,986 --> 00:19:39,516
see up there.


635
00:19:40,266 --> 00:19:41,736
So, I want to be able to select


636
00:19:41,736 --> 00:19:43,216
the tiles using the remote.


637
00:19:44,296 --> 00:19:45,646
Previously, I would have had to


638
00:19:45,646 --> 00:19:46,616
handle events from the remote


639
00:19:46,616 --> 00:19:48,596
myself, and implement my own


640
00:19:48,596 --> 00:19:50,446
navigation, trying my best to


641
00:19:50,446 --> 00:19:51,466
match the feel of the focus


642
00:19:51,466 --> 00:19:51,806
engine.


643
00:19:52,306 --> 00:19:54,256
In tvOS 12, I can connect these


644
00:19:54,256 --> 00:19:55,706
tiles directly to the focus


645
00:19:55,706 --> 00:19:56,016
engine.


646
00:19:56,016 --> 00:19:56,976
So, let's go ahead and do that.


647
00:20:01,506 --> 00:20:02,696
The first thing I'm going to do


648
00:20:02,916 --> 00:20:04,566
is extend my LevelTile class to


649
00:20:04,566 --> 00:20:06,046
implement the UIFocusItem.


650
00:20:06,316 --> 00:20:07,826
This is what will allow it to


651
00:20:07,826 --> 00:20:08,536
become focused.


652
00:20:09,726 --> 00:20:10,866
There's a few methods here.


653
00:20:10,866 --> 00:20:11,956
I'm just going to direct your


654
00:20:11,956 --> 00:20:13,126
attention to a few at the top.


655
00:20:14,226 --> 00:20:15,556
It canBecomeFocused, I'm going


656
00:20:15,556 --> 00:20:16,396
to enter in "true."


657
00:20:16,786 --> 00:20:17,616
That's straightforward.


658
00:20:18,616 --> 00:20:20,116
For parentFocusEnvironment, I'm


659
00:20:20,216 --> 00:20:21,536
going to return the MetalView


660
00:20:21,536 --> 00:20:22,576
that renders these items.


661
00:20:23,536 --> 00:20:25,156
Finally in didUpdateFocus in


662
00:20:25,206 --> 00:20:26,676
context, I'm going to set the


663
00:20:26,676 --> 00:20:28,516
tile to draw itself in an active


664
00:20:28,516 --> 00:20:30,286
state when it becomes focused.


665
00:20:31,686 --> 00:20:33,356
Next, I need to tell the focus


666
00:20:33,356 --> 00:20:34,666
engine about these new items.


667
00:20:35,466 --> 00:20:37,076
To do that, I'm going to extend


668
00:20:37,076 --> 00:20:39,176
that MetalView that renders


669
00:20:39,176 --> 00:20:39,356
them.


670
00:20:40,496 --> 00:20:41,636
The view is already in the view


671
00:20:41,636 --> 00:20:43,026
hierarchy, and the focus engine


672
00:20:43,026 --> 00:20:43,956
already knows about it.


673
00:20:44,016 --> 00:20:45,216
So, it's a great place to hook


674
00:20:45,216 --> 00:20:45,496
in.


675
00:20:46,436 --> 00:20:47,906
And, because this is a UIView,


676
00:20:48,186 --> 00:20:49,196
it already conforms to


677
00:20:49,196 --> 00:20:50,526
UIFocusItemContainer.


678
00:20:50,906 --> 00:20:52,686
And, it provides itself as a


679
00:20:52,686 --> 00:20:53,526
coordinatespace.


680
00:20:54,406 --> 00:20:55,776
The only thing I have to do is


681
00:20:55,776 --> 00:20:58,296
override FocusItem in rect to


682
00:20:58,296 --> 00:21:00,066
return my level tiles, which of


683
00:21:00,066 --> 00:21:01,826
course are now UIFocusItems.


684
00:21:02,286 --> 00:21:04,286
And, I can get a performance win


685
00:21:04,286 --> 00:21:05,896
here, by only returning the


686
00:21:05,896 --> 00:21:07,496
tiles these frames intersect the


687
00:21:07,496 --> 00:21:08,506
path in search rect.


688
00:21:10,326 --> 00:21:10,576
Yikes.


689
00:21:11,436 --> 00:21:12,606
Let's take a look and see how


690
00:21:12,606 --> 00:21:12,976
that works.


691
00:21:18,096 --> 00:21:18,866
So, now you can see that the


692
00:21:18,866 --> 00:21:21,276
tiles are focusable, and the


693
00:21:21,276 --> 00:21:22,536
system even plays a standard


694
00:21:22,536 --> 00:21:23,846
sound when they become focused.


695
00:21:24,476 --> 00:21:25,996
I can even move focus in between


696
00:21:25,996 --> 00:21:27,216
my custom tiles, and the


697
00:21:27,216 --> 00:21:28,476
standard UI buttons down at the


698
00:21:28,476 --> 00:21:28,846
bottom.


699
00:21:29,816 --> 00:21:31,396
There's a problem here, though.


700
00:21:32,016 --> 00:21:33,536
The tiles extend offscreen.


701
00:21:34,146 --> 00:21:35,986
If I move focus offscreen, I


702
00:21:35,986 --> 00:21:37,056
can't see what I'm interacting


703
00:21:37,056 --> 00:21:37,206
with.


704
00:21:38,156 --> 00:21:39,326
Of course, what I want is for


705
00:21:39,326 --> 00:21:40,836
the tiles to move onscreen as


706
00:21:40,836 --> 00:21:41,616
they become focused.


707
00:21:42,386 --> 00:21:43,256
So, let's implement that.


708
00:21:43,256 --> 00:21:47,226
I'm going to extend that


709
00:21:47,376 --> 00:21:49,706
RenderView again, this time to


710
00:21:49,706 --> 00:21:50,166
implement


711
00:21:50,436 --> 00:21:52,286
UIFocusItemScrollableContainer.


712
00:21:53,086 --> 00:21:54,776
Now, the important thing here is


713
00:21:54,826 --> 00:21:56,086
to adjust my rendering by the


714
00:21:56,086 --> 00:21:56,916
contentOffset.


715
00:21:57,536 --> 00:21:58,726
The focus engine will set my


716
00:21:58,726 --> 00:22:01,496
contentOffset as focus moves to


717
00:22:01,496 --> 00:22:02,676
keep the currently focused item


718
00:22:02,676 --> 00:22:03,296
onscreen.


719
00:22:04,306 --> 00:22:05,426
Because this is a UIView, I'm


720
00:22:05,426 --> 00:22:07,206
going to also update by


721
00:22:07,206 --> 00:22:08,986
bounds.origin so that the


722
00:22:08,986 --> 00:22:10,336
coordinateSpace conversion


723
00:22:10,336 --> 00:22:11,486
continues to work correctly.


724
00:22:14,886 --> 00:22:17,466
See how that works?


725
00:22:18,676 --> 00:22:19,616
So, now you can see that as I


726
00:22:19,616 --> 00:22:21,836
focus a tile, it moves onscreen.


727
00:22:22,586 --> 00:22:24,546
If I keep going, I get nice,


728
00:22:24,576 --> 00:22:26,286
smooth scrolling with the same


729
00:22:26,286 --> 00:22:28,746
momentum-- thanks-- nice, smooth


730
00:22:28,746 --> 00:22:30,216
scrolling with the same momentum


731
00:22:30,216 --> 00:22:31,826
and animation as if this was a


732
00:22:31,826 --> 00:22:32,536
UIScrollView.


733
00:22:32,986 --> 00:22:35,006
So, this is looking pretty good,


734
00:22:35,446 --> 00:22:36,476
but I think we can do even


735
00:22:36,476 --> 00:22:36,776
better.


736
00:22:37,376 --> 00:22:38,496
What I really want is for these


737
00:22:38,526 --> 00:22:40,036
tiles to come alive when they're


738
00:22:40,036 --> 00:22:41,506
focused, just like the system


739
00:22:41,506 --> 00:22:41,986
elements.


740
00:22:43,106 --> 00:22:45,246
Let's go ahead and do that.


741
00:22:46,016 --> 00:22:47,046
Going to go back up to


742
00:22:47,046 --> 00:22:47,776
LevelTile.


743
00:22:47,776 --> 00:22:49,886
And, I'm going to implement an


744
00:22:49,886 --> 00:22:50,666
optional method,


745
00:22:51,296 --> 00:22:52,406
didHintFocusMovement.


746
00:22:53,486 --> 00:22:55,036
I'm going to take the suggested


747
00:22:55,036 --> 00:22:56,866
perspective, rotation, and


748
00:22:56,866 --> 00:22:58,156
translation values from the


749
00:22:58,156 --> 00:23:00,176
UIFocusMovementHint, and apply


750
00:23:00,176 --> 00:23:01,206
them when I render the


751
00:23:01,206 --> 00:23:02,206
focusTile.


752
00:23:03,366 --> 00:23:03,976
Let's see how that looks.


753
00:23:10,336 --> 00:23:11,506
Now, as I move my finger on the


754
00:23:11,506 --> 00:23:14,156
trackpad, the tile interacts


755
00:23:14,216 --> 00:23:15,896
just the way I'd expect.


756
00:23:16,216 --> 00:23:18,036
So, now I've added focus support


757
00:23:18,136 --> 00:23:19,966
to my custom Metal objects, and


758
00:23:19,966 --> 00:23:21,486
they feel just as familiar as if


759
00:23:21,486 --> 00:23:22,716
they were written using ULikeIT.


760
00:23:23,306 --> 00:23:23,976
Back to you, Ada.


761
00:23:24,516 --> 00:23:28,356
[ Applause ]


762
00:23:28,856 --> 00:23:29,466
>> Thank you, Paul.


763
00:23:30,686 --> 00:23:32,446
Wow, that was a really Metal


764
00:23:32,446 --> 00:23:32,826
demo.


765
00:23:33,246 --> 00:23:35,146
With just a few lines of code,


766
00:23:35,316 --> 00:23:37,136
we were able to give our Metal


767
00:23:37,136 --> 00:23:38,956
user interface beautifully


768
00:23:38,956 --> 00:23:40,886
smooth focused movement and


769
00:23:40,886 --> 00:23:42,976
scrolling, and delightful


770
00:23:42,976 --> 00:23:44,816
interaction hinting, just like


771
00:23:44,816 --> 00:23:46,366
native tvOS apps.


772
00:23:47,516 --> 00:23:49,496
Now, let's recap all the awesome


773
00:23:49,496 --> 00:23:50,746
new focus features we learned


774
00:23:50,746 --> 00:23:51,236
about today.


775
00:23:52,116 --> 00:23:53,646
First, we learned how to


776
00:23:53,646 --> 00:23:54,576
implement custom


777
00:23:54,576 --> 00:23:55,806
focusEnvironments and


778
00:23:55,806 --> 00:23:58,116
focusItems, even if they don't


779
00:23:58,116 --> 00:23:59,796
inherit from UIKit components.


780
00:24:00,796 --> 00:24:02,596
Second, we learned how to use


781
00:24:02,736 --> 00:24:04,966
focusItemContainer, so that when


782
00:24:04,966 --> 00:24:06,336
users move focus through our


783
00:24:06,336 --> 00:24:08,126
apps, it feels just like native


784
00:24:08,126 --> 00:24:09,196
tvOS apps.


785
00:24:09,926 --> 00:24:11,566
Third, we learned how to use


786
00:24:11,606 --> 00:24:13,286
focusMovementHint to make our


787
00:24:13,286 --> 00:24:15,056
interface come alive as people


788
00:24:15,056 --> 00:24:16,836
interact with the Siri remote.


789
00:24:17,736 --> 00:24:19,636
Fourth, we learned how to use


790
00:24:19,636 --> 00:24:21,676
focusItemScrollableContainer to


791
00:24:21,676 --> 00:24:23,276
allow people to scroll through


792
00:24:23,276 --> 00:24:24,466
our apps content with that


793
00:24:24,466 --> 00:24:25,906
smooth, familiar, native


794
00:24:25,906 --> 00:24:26,446
feeling.


795
00:24:26,996 --> 00:24:28,786
And, finally, we learned how to


796
00:24:28,786 --> 00:24:31,856
give our apps full accessibility


797
00:24:31,856 --> 00:24:34,156
support simply by adopting these


798
00:24:34,156 --> 00:24:36,026
protocols, and providing


799
00:24:36,026 --> 00:24:37,576
accessibility labels and hints


800
00:24:37,876 --> 00:24:39,606
so that everyone can enjoy our


801
00:24:39,876 --> 00:24:40,196
apps.


802
00:24:40,976 --> 00:24:42,186
All of these awesome new


803
00:24:42,186 --> 00:24:43,726
features are available today in


804
00:24:43,726 --> 00:24:45,496
the Developer Beta, and I highly


805
00:24:45,496 --> 00:24:46,706
recommend that you download it,


806
00:24:46,916 --> 00:24:48,936
and find out just how easy it is


807
00:24:48,936 --> 00:24:50,326
to add focus support to your


808
00:24:50,326 --> 00:24:52,356
custom rendered apps.


809
00:24:52,356 --> 00:24:54,466
And now, I'd like to invite Hans


810
00:24:54,466 --> 00:24:55,856
back on the stage, to tell us


811
00:24:55,856 --> 00:24:57,466
about some awesome UI patterns


812
00:24:57,466 --> 00:24:57,976
on tvOS.


813
00:24:58,516 --> 00:25:00,766
[ Applause ]


814
00:25:01,266 --> 00:25:01,736
>> Thank you, Ada.


815
00:25:04,796 --> 00:25:06,546
Focus interaction is integral in


816
00:25:06,546 --> 00:25:07,906
how we feel connected to the


817
00:25:07,906 --> 00:25:08,936
screen across the room.


818
00:25:09,666 --> 00:25:11,726
And, tvOS has many common UI


819
00:25:11,726 --> 00:25:13,256
patterns that make the most out


820
00:25:13,256 --> 00:25:14,386
of it.


821
00:25:14,476 --> 00:25:17,756
One such example is a label that


822
00:25:17,756 --> 00:25:19,006
animates its text when it's


823
00:25:19,006 --> 00:25:19,516
focused.


824
00:25:21,586 --> 00:25:23,606
Internally scrolling text, or


825
00:25:24,046 --> 00:25:25,936
marquee animation, is a useful


826
00:25:25,936 --> 00:25:27,736
technique in presenting variable


827
00:25:27,736 --> 00:25:29,426
length strings without altering


828
00:25:29,426 --> 00:25:30,996
the label's external geometry.


829
00:25:31,566 --> 00:25:34,436
It's also very effective in


830
00:25:34,436 --> 00:25:36,256
visually highlighting where your


831
00:25:36,256 --> 00:25:37,516
current focus is.


832
00:25:39,056 --> 00:25:40,676
This behavior is very widely


833
00:25:40,676 --> 00:25:43,156
used across tvOS, but there's


834
00:25:43,156 --> 00:25:44,506
not an easy way to do this.


835
00:25:45,166 --> 00:25:46,636
That is, until now.


836
00:25:47,606 --> 00:25:49,356
tvOS 12 makes it really easy.


837
00:25:50,006 --> 00:25:52,786
All you have to do is to set a


838
00:25:52,786 --> 00:25:54,066
new property on your label,


839
00:25:54,946 --> 00:25:55,356
enables


840
00:25:55,356 --> 00:25:56,886
MarqueeWhenAncestorFocused to


841
00:25:56,886 --> 00:25:56,976
"true."


842
00:25:57,516 --> 00:26:01,766
[ Applause ]


843
00:26:02,266 --> 00:26:04,316
Then, when a view containing the


844
00:26:04,316 --> 00:26:06,136
label comes in focus, and the


845
00:26:06,136 --> 00:26:07,936
label contains a string, it's


846
00:26:08,086 --> 00:26:09,846
too long for the width.


847
00:26:11,406 --> 00:26:13,486
It will animate the string


848
00:26:14,416 --> 00:26:15,456
horizontally in a loop.


849
00:26:17,206 --> 00:26:19,046
We've used this API ourselves,


850
00:26:19,046 --> 00:26:20,286
and we think you will really


851
00:26:20,286 --> 00:26:21,656
like how simple it is to adopt


852
00:26:21,656 --> 00:26:22,256
the behavior.


853
00:26:23,436 --> 00:26:24,976
So, that's text scrolling in UI


854
00:26:24,976 --> 00:26:25,256
label.


855
00:26:27,246 --> 00:26:30,256
But, tvOS has many more idioms


856
00:26:30,256 --> 00:26:33,066
and patterns, such as an image


857
00:26:33,066 --> 00:26:35,316
and a label when come alive when


858
00:26:36,056 --> 00:26:39,116
in focus, an arbitrary view


859
00:26:39,116 --> 00:26:40,636
hierarchy that floats as one


860
00:26:40,636 --> 00:26:45,526
solid unit, buttons with


861
00:26:45,526 --> 00:26:47,346
customizable focus movement and


862
00:26:47,346 --> 00:26:47,766
content,


863
00:26:50,986 --> 00:26:52,276
and widgets for representing


864
00:26:52,276 --> 00:26:52,666
people.


865
00:26:53,916 --> 00:26:55,536
And, as you can see, these


866
00:26:55,536 --> 00:26:57,466
patterns are ubiquitous across


867
00:26:57,466 --> 00:26:58,626
tvOS and Apple's own apps.


868
00:26:59,266 --> 00:27:00,646
And, since they've been


869
00:27:00,856 --> 00:27:03,036
available in TVMLKit, we see


870
00:27:03,226 --> 00:27:04,626
them adopted in your apps as


871
00:27:04,626 --> 00:27:04,926
well.


872
00:27:04,926 --> 00:27:07,466
But, what if your app is based


873
00:27:07,466 --> 00:27:08,106
on UIKit?


874
00:27:09,406 --> 00:27:11,446
Well, we're really thrilled to


875
00:27:11,816 --> 00:27:14,856
share with you that tvOS 12 will


876
00:27:14,856 --> 00:27:16,436
make several of these available


877
00:27:16,436 --> 00:27:17,966
for your UIKit-based apps.


878
00:27:18,516 --> 00:27:22,796
[ Applause ]


879
00:27:23,296 --> 00:27:24,806
And, we do this through a new


880
00:27:24,916 --> 00:27:26,956
lightweight framework, TVUIKit.


881
00:27:29,316 --> 00:27:30,676
The first four elements in


882
00:27:30,676 --> 00:27:34,386
TVUIKit are poster, caption


883
00:27:34,386 --> 00:27:34,736
button,


884
00:27:35,846 --> 00:27:38,016
card, and monogram.


885
00:27:39,146 --> 00:27:40,156
Let's take a look at each.


886
00:27:41,846 --> 00:27:43,316
Poster view is about images.


887
00:27:44,306 --> 00:27:46,186
And, TVPosterView is a composed


888
00:27:46,186 --> 00:27:47,986
view specializing in presenting


889
00:27:47,986 --> 00:27:50,256
an image, and a footer, which


890
00:27:50,256 --> 00:27:52,116
itself is composed of up to two


891
00:27:52,116 --> 00:27:52,606
labels.


892
00:27:53,796 --> 00:27:55,146
When a poster view is in focus,


893
00:27:55,826 --> 00:27:57,446
the image grows in size, and the


894
00:27:57,446 --> 00:27:58,926
labels move out of the way to


895
00:27:58,926 --> 00:27:59,526
give room.


896
00:28:00,916 --> 00:28:02,966
When it relinquishes focus, the


897
00:28:02,966 --> 00:28:04,506
image and labels come back to


898
00:28:04,506 --> 00:28:05,226
the normal layout.


899
00:28:06,446 --> 00:28:08,156
When you program an image to a


900
00:28:08,156 --> 00:28:10,506
TVPosterView, it works out just


901
00:28:10,506 --> 00:28:11,946
the right amount by which the


902
00:28:11,946 --> 00:28:12,616
image grows.


903
00:28:13,256 --> 00:28:15,986
And, TVPosterView is an ideal


904
00:28:15,986 --> 00:28:18,456
API for creating a UI like this.


905
00:28:19,006 --> 00:28:19,786
It's really easy.


906
00:28:20,476 --> 00:28:23,296
And, that's TVPosterView.


907
00:28:24,776 --> 00:28:26,166
Next, is caption button.


908
00:28:27,356 --> 00:28:28,526
Caption button is about


909
00:28:28,526 --> 00:28:29,336
call-to-action.


910
00:28:32,176 --> 00:28:34,156
And, TVCaptionButtonView is a


911
00:28:34,156 --> 00:28:35,896
composed view specializing in


912
00:28:35,896 --> 00:28:37,276
presenting a button-like


913
00:28:37,366 --> 00:28:40,226
content, and a footer, which


914
00:28:40,226 --> 00:28:41,806
itself is composed of up to two


915
00:28:41,806 --> 00:28:42,156
labels.


916
00:28:42,816 --> 00:28:45,306
The content view has a blurred


917
00:28:45,306 --> 00:28:47,366
background, and can either have


918
00:28:47,366 --> 00:28:49,266
an image, or a text.


919
00:28:51,046 --> 00:28:52,366
When a CaptionButtonView is in


920
00:28:52,366 --> 00:28:57,106
focus, it floats and unlike the


921
00:28:57,106 --> 00:28:59,176
PosterView, it increases its


922
00:28:59,216 --> 00:29:01,376
size only in the leading, top,


923
00:29:01,376 --> 00:29:03,106
and trailing directions.


924
00:29:03,636 --> 00:29:06,276
You can also limit the floating


925
00:29:06,276 --> 00:29:10,106
motion to horizontal only or


926
00:29:10,246 --> 00:29:10,956
vertical only.


927
00:29:12,506 --> 00:29:13,956
And, when you use multiple


928
00:29:13,956 --> 00:29:15,926
TVCaptionButtons and give them a


929
00:29:15,926 --> 00:29:18,026
consistent motion direction, you


930
00:29:18,026 --> 00:29:19,466
can create a sense of grouping.


931
00:29:20,256 --> 00:29:21,976
And, TVCaptionButton makes it


932
00:29:21,976 --> 00:29:22,976
really easy to do this.


933
00:29:25,346 --> 00:29:26,816
Next, is CardView.


934
00:29:28,836 --> 00:29:30,616
CardView is about custom views.


935
00:29:32,296 --> 00:29:34,576
And, TVCardView specializes in


936
00:29:34,576 --> 00:29:36,406
presenting arbitrarily composed


937
00:29:36,406 --> 00:29:37,166
view hierarchy.


938
00:29:38,346 --> 00:29:41,066
When a CardView is in focus,


939
00:29:42,416 --> 00:29:44,146
it's content view floats and all


940
00:29:44,146 --> 00:29:46,356
of its subviews move in unison


941
00:29:46,356 --> 00:29:48,226
as part of the floating content


942
00:29:48,906 --> 00:29:49,016
view.


943
00:29:51,156 --> 00:29:53,226
TVCardView is a great way to


944
00:29:53,226 --> 00:29:56,296
create a UI like this.


945
00:29:57,016 --> 00:29:59,956
It's really straightforward.


946
00:30:02,256 --> 00:30:04,716
Next, is monogram.


947
00:30:06,816 --> 00:30:08,656
MonogramView is for representing


948
00:30:08,656 --> 00:30:09,006
people.


949
00:30:10,966 --> 00:30:13,716
And, TVMonogramView has a


950
00:30:13,716 --> 00:30:15,876
circular content image, and a


951
00:30:15,976 --> 00:30:17,836
footer, which itself is composed


952
00:30:17,836 --> 00:30:18,746
of up to two labels.


953
00:30:20,456 --> 00:30:22,496
When you don't provide either a


954
00:30:22,496 --> 00:30:23,786
person name, or an image,


955
00:30:24,416 --> 00:30:26,266
TVMonogramView provides a


956
00:30:26,266 --> 00:30:27,156
generic silhouette.


957
00:30:27,696 --> 00:30:30,606
If you do provide a person name,


958
00:30:31,386 --> 00:30:33,146
TVMonogramView will create a


959
00:30:33,146 --> 00:30:34,306
monogram from the initials.


960
00:30:34,906 --> 00:30:38,656
And, of course, when you provide


961
00:30:38,656 --> 00:30:40,446
an image, it doesn't question


962
00:30:40,446 --> 00:30:41,576
it, we'll just use it.


963
00:30:44,096 --> 00:30:46,266
When TVMonogramView is in focus,


964
00:30:47,396 --> 00:30:48,686
the labels move out of the way


965
00:30:49,116 --> 00:30:50,526
for the image to grow in size.


966
00:30:53,106 --> 00:30:54,926
When you use a TVMonogramView,


967
00:30:56,006 --> 00:30:57,666
creating a UI like this becomes


968
00:30:57,666 --> 00:30:58,746
really straightforward.


969
00:30:59,856 --> 00:31:01,396
Now, you might have noticed that


970
00:31:01,396 --> 00:31:02,946
there's a consistent pattern


971
00:31:03,206 --> 00:31:04,376
among these four elements.


972
00:31:05,696 --> 00:31:08,056
Namely, there's a main content,


973
00:31:09,146 --> 00:31:10,496
and an optional header and


974
00:31:10,546 --> 00:31:10,816
footer.


975
00:31:11,806 --> 00:31:13,116
And, when this composition comes


976
00:31:13,116 --> 00:31:14,916
in focus, the header and footer


977
00:31:14,916 --> 00:31:16,726
move out of the way, and the


978
00:31:16,726 --> 00:31:18,886
content to grow in size.


979
00:31:19,876 --> 00:31:21,766
This common behavior is


980
00:31:21,766 --> 00:31:23,606
encapsulated in a base class,


981
00:31:24,076 --> 00:31:25,066
TVLockupView.


982
00:31:25,656 --> 00:31:28,206
Some of the things you can


983
00:31:28,206 --> 00:31:31,066
customize in a TVLockupView are


984
00:31:32,126 --> 00:31:33,496
the explicit content size.


985
00:31:34,576 --> 00:31:35,696
This is really helpful when


986
00:31:35,696 --> 00:31:36,696
you're laying out multiple


987
00:31:36,696 --> 00:31:37,546
LockupViews.


988
00:31:40,086 --> 00:31:41,856
Another one is the content-- the


989
00:31:41,906 --> 00:31:43,406
size by which the content grows


990
00:31:43,406 --> 00:31:44,176
when it's in focus.


991
00:31:45,796 --> 00:31:47,066
These are directional insets, so


992
00:31:47,626 --> 00:31:49,426
you can even specify different


993
00:31:49,426 --> 00:31:50,776
amount in all four directions.


994
00:31:51,436 --> 00:31:53,496
You may recall that the


995
00:31:53,496 --> 00:31:54,456
CaptionButtonView is actually


996
00:31:54,456 --> 00:31:54,916
using this.


997
00:31:59,296 --> 00:32:00,546
When you're providing your own


998
00:32:00,546 --> 00:32:03,396
content to the TVLockupView, you


999
00:32:03,396 --> 00:32:05,166
can take advantage of


1000
00:32:05,336 --> 00:32:07,186
TVLockupViewComponent protocol.


1001
00:32:08,676 --> 00:32:10,216
Whenever TVLockupView state


1002
00:32:10,216 --> 00:32:11,896
changes, it will call


1003
00:32:12,266 --> 00:32:13,066
updateAppearance


1004
00:32:13,066 --> 00:32:15,736
forLockupViewState method on all


1005
00:32:15,736 --> 00:32:16,956
of its subviews that implement


1006
00:32:16,956 --> 00:32:17,096
it.


1007
00:32:18,286 --> 00:32:19,286
This is your subviews


1008
00:32:19,286 --> 00:32:21,026
opportunity to update its


1009
00:32:21,066 --> 00:32:22,936
behavior, or customize the


1010
00:32:23,476 --> 00:32:27,766
appearance based on the state.


1011
00:32:28,286 --> 00:32:30,186
You can use TVLockupView to


1012
00:32:30,186 --> 00:32:31,696
create your own widget that


1013
00:32:31,696 --> 00:32:33,076
responds to focus interaction,


1014
00:32:33,716 --> 00:32:35,986
or further customize the four


1015
00:32:35,986 --> 00:32:37,926
special purpose subclasses we


1016
00:32:37,926 --> 00:32:38,736
just discussed.


1017
00:32:39,476 --> 00:32:43,796
So, that's TVLockupView and its


1018
00:32:44,376 --> 00:32:44,686
subclasses.


1019
00:32:45,146 --> 00:32:47,256
Finally, you may recall seeing


1020
00:32:47,256 --> 00:32:47,976
something like this.


1021
00:32:49,936 --> 00:32:52,316
It's simple, but its simplicity


1022
00:32:52,316 --> 00:32:53,966
disguises just how difficult it


1023
00:32:53,966 --> 00:32:57,606
is to implement this screen.


1024
00:32:57,786 --> 00:32:59,686
TVUIKit makes it really easy to


1025
00:32:59,686 --> 00:33:01,276
do this, and that's with


1026
00:33:01,596 --> 00:33:03,256
TVDigitEntryViewController.


1027
00:33:05,536 --> 00:33:07,086
TVDigitEntryViewController


1028
00:33:07,326 --> 00:33:09,726
manages a fullscreen view that


1029
00:33:09,726 --> 00:33:12,476
presents a title label, prompt


1030
00:33:12,476 --> 00:33:16,166
label, a digit view, and the


1031
00:33:16,166 --> 00:33:16,986
numeric keyboard.


1032
00:33:17,596 --> 00:33:20,496
Among the things you can


1033
00:33:20,496 --> 00:33:21,236
customize in a


1034
00:33:21,236 --> 00:33:23,896
TVDigitEntryViewController are


1035
00:33:24,516 --> 00:33:26,746
the number of digits, and


1036
00:33:26,746 --> 00:33:29,426
whether the entry is secure or


1037
00:33:29,426 --> 00:33:29,716
not.


1038
00:33:30,296 --> 00:33:33,596
And, a completion handler that


1039
00:33:33,596 --> 00:33:34,766
allows you to process the


1040
00:33:34,766 --> 00:33:35,466
entered digits.


1041
00:33:36,496 --> 00:33:37,986
Instead of just talking about


1042
00:33:37,986 --> 00:33:39,176
it, I'd like to invite my


1043
00:33:39,176 --> 00:33:40,386
colleague Marshall over to give


1044
00:33:40,486 --> 00:33:40,976
us a demo.


1045
00:33:41,516 --> 00:33:47,916
[ Applause ]


1046
00:33:48,416 --> 00:33:49,146
>> Thank you, Hans.


1047
00:33:49,146 --> 00:33:50,556
My name's Marshall, and today


1048
00:33:50,556 --> 00:33:51,336
we're going to take a look at


1049
00:33:51,336 --> 00:33:51,926
how you can use


1050
00:33:51,966 --> 00:33:53,996
TVDigitEntryViewController to


1051
00:33:53,996 --> 00:33:56,056
collect numerical data from your


1052
00:33:56,056 --> 00:33:56,576
users.


1053
00:33:57,176 --> 00:33:58,426
So, I have an app here that we


1054
00:33:58,426 --> 00:33:59,816
call Top Movies which allows me


1055
00:33:59,816 --> 00:34:01,096
to watch my favorite content,


1056
00:34:01,656 --> 00:34:03,506
but not all this content may be


1057
00:34:03,506 --> 00:34:04,736
appropriate for everybody in my


1058
00:34:04,786 --> 00:34:06,006
household, so what I'd like to


1059
00:34:06,006 --> 00:34:07,846
do is protect it behind a PIN


1060
00:34:07,846 --> 00:34:09,596
code, so I can restrict who's


1061
00:34:09,596 --> 00:34:10,326
allowed to watch it.


1062
00:34:11,126 --> 00:34:12,116
So, what we have here is a


1063
00:34:12,116 --> 00:34:13,706
collection view, full of some


1064
00:34:13,706 --> 00:34:15,085
TVPosterViews that Hans


1065
00:34:15,085 --> 00:34:15,676
introduced.


1066
00:34:17,016 --> 00:34:19,025
So, if we dive in to our


1067
00:34:19,076 --> 00:34:19,815
collection views:


1068
00:34:19,815 --> 00:34:21,286
didSelectItemAt indexPath.


1069
00:34:21,846 --> 00:34:23,646
First thing we want to do is


1070
00:34:23,646 --> 00:34:24,045
vend a


1071
00:34:24,045 --> 00:34:26,186
TVDigitEntryViewController, and


1072
00:34:26,226 --> 00:34:27,446
send appropriate title and


1073
00:34:27,446 --> 00:34:29,416
prompt text, let the user know


1074
00:34:29,416 --> 00:34:30,775
they should enter a 5-digit


1075
00:34:30,775 --> 00:34:31,266
passcode.


1076
00:34:32,085 --> 00:34:33,235
We set the number of digits to


1077
00:34:33,235 --> 00:34:35,896
5, and we set the isSecure entry


1078
00:34:35,896 --> 00:34:36,985
to "true" since we are


1079
00:34:36,985 --> 00:34:38,326
collecting a passcode.


1080
00:34:40,235 --> 00:34:41,835
Next, we're going to implement


1081
00:34:41,835 --> 00:34:43,295
the entryCompletionHandler.


1082
00:34:44,166 --> 00:34:46,545
This returns a string, once the


1083
00:34:46,646 --> 00:34:48,136
user has filled in the total


1084
00:34:48,136 --> 00:34:49,696
number of digits in the digit


1085
00:34:49,696 --> 00:34:49,956
view.


1086
00:34:50,906 --> 00:34:52,416
So, here for now, since I'm


1087
00:34:52,416 --> 00:34:53,456
working on the app, we're just


1088
00:34:53,456 --> 00:34:54,286
going to check to see if it's


1089
00:34:54,286 --> 00:34:54,746
all 1's.


1090
00:34:54,835 --> 00:34:56,525
If it is, we're going to dismiss


1091
00:34:56,525 --> 00:34:57,456
the view controller, and play


1092
00:34:57,456 --> 00:34:58,046
the content.


1093
00:34:58,566 --> 00:34:59,756
Otherwise, we're going to update


1094
00:34:59,756 --> 00:35:01,006
the prompt text, let the user


1095
00:35:01,006 --> 00:35:02,296
know that it was an invalid


1096
00:35:02,296 --> 00:35:03,296
passcode, and we're going to


1097
00:35:03,296 --> 00:35:05,076
call the clearEntry animated


1098
00:35:05,076 --> 00:35:05,486
true.


1099
00:35:05,866 --> 00:35:08,086
What this will do is clear out


1100
00:35:08,086 --> 00:35:09,576
all the digits, and shake the


1101
00:35:09,576 --> 00:35:10,736
digit view to let the user know


1102
00:35:10,736 --> 00:35:11,586
that something went wrong.


1103
00:35:11,946 --> 00:35:13,296
And then, finally, we're going


1104
00:35:13,296 --> 00:35:14,396
to present the viewController.


1105
00:35:14,706 --> 00:35:15,606
And, since this is just a


1106
00:35:15,606 --> 00:35:16,806
viewController, we can use


1107
00:35:16,806 --> 00:35:18,916
custom presentation styles.


1108
00:35:19,296 --> 00:35:20,306
So here we're going to use the


1109
00:35:20,306 --> 00:35:22,396
blurOverFullScreen, which was


1110
00:35:22,396 --> 00:35:23,986
introduced in tvOS last year.


1111
00:35:25,556 --> 00:35:26,576
Let's run this and see how it


1112
00:35:26,576 --> 00:35:26,846
works.


1113
00:35:26,846 --> 00:35:29,556
So, I'm going to select my


1114
00:35:29,556 --> 00:35:29,916
movie.


1115
00:35:30,336 --> 00:35:31,506
And, we see we get the


1116
00:35:31,506 --> 00:35:33,096
blurOverFullScreen animation,


1117
00:35:33,096 --> 00:35:34,466
and we get prompted to enter our


1118
00:35:34,466 --> 00:35:35,046
passcode.


1119
00:35:35,436 --> 00:35:36,786
Now, we know that it's all 1's


1120
00:35:36,816 --> 00:35:38,136
right now, so let's see what


1121
00:35:38,136 --> 00:35:39,566
happens if I enter all 2's.


1122
00:35:39,566 --> 00:35:41,576
We see that we get a nice shake


1123
00:35:41,576 --> 00:35:42,886
animation, and we update the


1124
00:35:42,886 --> 00:35:43,346
text.


1125
00:35:44,226 --> 00:35:45,926
Now, we go enter all 1's.


1126
00:35:47,006 --> 00:35:47,916
We know that's the correct


1127
00:35:47,916 --> 00:35:49,166
passcode, so we dismiss the


1128
00:35:49,166 --> 00:35:50,236
viewController and we can play


1129
00:35:50,236 --> 00:35:50,766
our content.


1130
00:35:50,906 --> 00:35:54,736
Now, if the user wants to use--


1131
00:35:54,736 --> 00:35:56,476
they most likely want to use


1132
00:35:56,476 --> 00:35:57,626
their own passcode, so what


1133
00:35:57,626 --> 00:35:58,506
we're going to do is we're going


1134
00:35:58,506 --> 00:35:59,566
to take this settings button


1135
00:35:59,566 --> 00:36:00,846
here, and we're going to allow


1136
00:36:00,846 --> 00:36:02,056
the user to set their own


1137
00:36:02,056 --> 00:36:02,546
passcode.


1138
00:36:03,436 --> 00:36:04,216
So, I've got my [inaudible]


1139
00:36:04,306 --> 00:36:05,156
action down here.


1140
00:36:06,036 --> 00:36:07,996
And, again, we're going to vend


1141
00:36:07,996 --> 00:36:09,496
a TVDigitEntryViewController,


1142
00:36:09,996 --> 00:36:10,966
and we're going to set the title


1143
00:36:10,966 --> 00:36:12,546
text to let them know that we're


1144
00:36:12,816 --> 00:36:14,176
collecting a passcode that will


1145
00:36:14,296 --> 00:36:15,456
restrict which content can be


1146
00:36:15,456 --> 00:36:17,006
watched, and again, set the


1147
00:36:17,006 --> 00:36:18,116
number of digits to 5.


1148
00:36:19,446 --> 00:36:20,926
Next, we're going to implement


1149
00:36:21,336 --> 00:36:22,596
the entryCompletionHandler


1150
00:36:22,596 --> 00:36:22,886
again.


1151
00:36:23,486 --> 00:36:25,506
Now, I have an extra variable up


1152
00:36:25,506 --> 00:36:27,176
here, a optional string called


1153
00:36:27,176 --> 00:36:28,076
passcodeToVerify.


1154
00:36:28,386 --> 00:36:29,716
What this is going to do, is


1155
00:36:29,716 --> 00:36:32,066
it's going to hold the passcode


1156
00:36:32,066 --> 00:36:33,416
the user enters the first time


1157
00:36:33,416 --> 00:36:34,936
so we can verify it to make sure


1158
00:36:34,936 --> 00:36:36,126
that they actually entered the


1159
00:36:36,126 --> 00:36:36,876
correct passcode.


1160
00:36:37,526 --> 00:36:38,606
So, we see that when our


1161
00:36:38,606 --> 00:36:39,816
completionHandler gets called,


1162
00:36:40,626 --> 00:36:41,386
we check to see if the


1163
00:36:41,386 --> 00:36:42,776
passcodeToVerify is nil.


1164
00:36:42,906 --> 00:36:44,056
If it is, this is the first


1165
00:36:44,056 --> 00:36:46,196
time, so we're going to ask them


1166
00:36:46,266 --> 00:36:48,376
to verify their passcode, and


1167
00:36:48,376 --> 00:36:49,086
we're going to call the


1168
00:36:49,086 --> 00:36:51,366
clearEntry animated, except this


1169
00:36:51,396 --> 00:36:52,086
time false.


1170
00:36:52,346 --> 00:36:53,086
We don't want to shake it,


1171
00:36:53,086 --> 00:36:53,886
because they didn't do anything


1172
00:36:53,886 --> 00:36:55,646
wrong, but we want to clear it


1173
00:36:55,646 --> 00:36:56,606
so they can enter it again.


1174
00:36:57,266 --> 00:36:58,766
Otherwise, if there is a value


1175
00:36:58,766 --> 00:37:00,366
stored in the passcodeToVerify,


1176
00:37:00,366 --> 00:37:01,606
we know they are verifying it.


1177
00:37:01,606 --> 00:37:02,646
And, we check to make sure


1178
00:37:02,646 --> 00:37:03,116
they're equal.


1179
00:37:03,306 --> 00:37:05,126
If they are, we save the new


1180
00:37:05,126 --> 00:37:06,646
passcode, and dismiss the


1181
00:37:06,646 --> 00:37:07,236
viewController.


1182
00:37:07,626 --> 00:37:09,456
Otherwise, we reset the prompt


1183
00:37:09,456 --> 00:37:10,726
text back to what we originally


1184
00:37:10,726 --> 00:37:13,096
asked, clear the entry, and then


1185
00:37:13,296 --> 00:37:14,666
set the passcodeToVerify to nil


1186
00:37:14,666 --> 00:37:15,546
so they can try again.


1187
00:37:16,046 --> 00:37:17,336
And, finally we present our


1188
00:37:17,336 --> 00:37:17,886
viewController.


1189
00:37:22,046 --> 00:37:22,976
So, now we're going to go to


1190
00:37:22,976 --> 00:37:23,326
Settings.


1191
00:37:23,326 --> 00:37:24,756
It's going to ask us to please


1192
00:37:24,756 --> 00:37:25,646
set a passcode.


1193
00:37:25,736 --> 00:37:27,156
Let's go ahead and set it all


1194
00:37:27,156 --> 00:37:27,866
1's first.


1195
00:37:28,266 --> 00:37:29,436
Now it's asked us to verify.


1196
00:37:29,586 --> 00:37:30,556
But, this time I'm going to


1197
00:37:30,556 --> 00:37:31,146
enter all 2's.


1198
00:37:32,146 --> 00:37:32,836
Since we know that was


1199
00:37:32,836 --> 00:37:33,376
incorrect.


1200
00:37:33,916 --> 00:37:35,136
So, now let's do it correctly


1201
00:37:35,136 --> 00:37:35,526
this time.


1202
00:37:36,376 --> 00:37:37,716
We've got five 1's, we're going


1203
00:37:37,716 --> 00:37:38,796
to verify our PIN code.


1204
00:37:39,476 --> 00:37:40,756
And, we can save the PIN code so


1205
00:37:40,756 --> 00:37:42,026
the user can use it when they


1206
00:37:42,026 --> 00:37:42,336
need to.


1207
00:37:42,566 --> 00:37:44,226
And, that's how you can


1208
00:37:44,226 --> 00:37:44,626
implement


1209
00:37:44,626 --> 00:37:46,896
TVDigitEntryViewController into


1210
00:37:46,896 --> 00:37:47,546
your application.


1211
00:37:47,686 --> 00:37:48,756
I'd like to invite Hans back up


1212
00:37:48,756 --> 00:37:48,976
on stage.


1213
00:37:49,516 --> 00:37:52,546
[ Applause ]


1214
00:37:53,046 --> 00:37:53,696
>> Thank you, Marshall.


1215
00:37:54,576 --> 00:37:56,586
That was a great demo showing


1216
00:37:56,586 --> 00:37:58,196
just how easy it is to adopt a


1217
00:37:58,196 --> 00:37:59,726
common UI patterns, using


1218
00:37:59,726 --> 00:38:00,446
TVUIKit.


1219
00:38:02,696 --> 00:38:05,176
In addition, TVUIKit also has


1220
00:38:05,226 --> 00:38:06,056
built-in support for


1221
00:38:06,056 --> 00:38:07,326
localization, including


1222
00:38:07,326 --> 00:38:08,506
right-to-left language support,


1223
00:38:09,216 --> 00:38:10,546
and of course, accessibility.


1224
00:38:11,566 --> 00:38:12,976
TVUIKit is available in the


1225
00:38:12,976 --> 00:38:14,206
Developer Beta, so please


1226
00:38:14,206 --> 00:38:15,066
download and check out the


1227
00:38:15,066 --> 00:38:15,396
headers.


1228
00:38:16,056 --> 00:38:17,486
And, as you use it in your app,


1229
00:38:18,556 --> 00:38:19,736
we think it will really save you


1230
00:38:19,736 --> 00:38:21,066
time and resources so you can


1231
00:38:21,066 --> 00:38:22,856
instead, focus on what makes


1232
00:38:22,856 --> 00:38:23,816
your app truly shine.


1233
00:38:25,276 --> 00:38:27,006
So, that's TVUIKit.


1234
00:38:28,716 --> 00:38:30,816
This afternoon we've just looked


1235
00:38:30,816 --> 00:38:32,996
at a few areas where tvOS 12 can


1236
00:38:32,996 --> 00:38:34,246
improve your app's user


1237
00:38:34,246 --> 00:38:35,726
experience and performance.


1238
00:38:37,466 --> 00:38:38,676
We learned about Password


1239
00:38:38,676 --> 00:38:40,326
AutoFill, which makes it really


1240
00:38:40,326 --> 00:38:42,316
easy for your customers to sign


1241
00:38:42,316 --> 00:38:42,886
in to your app.


1242
00:38:44,046 --> 00:38:45,216
And, it's especially more


1243
00:38:45,216 --> 00:38:46,906
helpful if they have strong


1244
00:38:46,906 --> 00:38:47,356
password.


1245
00:38:47,936 --> 00:38:51,426
We've also saw how we expanded


1246
00:38:51,746 --> 00:38:53,726
tvOS's focus engine to support


1247
00:38:53,806 --> 00:38:55,996
all apps, regardless of how they


1248
00:38:55,996 --> 00:38:56,526
are rendered.


1249
00:38:57,516 --> 00:38:58,806
This is truly game-changing.


1250
00:39:00,846 --> 00:39:02,316
And, finally we looked at


1251
00:39:02,316 --> 00:39:04,796
TVUIKit, which makes it really


1252
00:39:04,796 --> 00:39:06,676
easy to adopt common UI patterns


1253
00:39:06,676 --> 00:39:07,286
on tvOS.


1254
00:39:08,016 --> 00:39:11,156
We have a session page with all


1255
00:39:11,156 --> 00:39:12,356
of this information and more.


1256
00:39:12,356 --> 00:39:14,076
And, we'll be available at the


1257
00:39:14,746 --> 00:39:17,096
tvOS labs, and Safari WebKit


1258
00:39:17,096 --> 00:39:18,866
labs throughout the week.


1259
00:39:19,516 --> 00:39:20,796
Please drop by and say hello,


1260
00:39:20,796 --> 00:39:21,686
and bring your questions and


1261
00:39:21,686 --> 00:39:21,996
code.


1262
00:39:22,716 --> 00:39:23,596
Thanks for joining us this


1263
00:39:23,596 --> 00:39:24,126
afternoon.


1264
00:39:24,846 --> 00:39:26,156
Have a wonderful WWDC.

