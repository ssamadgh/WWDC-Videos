1
00:00:07,516 --> 00:00:20,516
[ Music ]


2
00:00:21,516 --> 00:00:23,636
[ Applause ]


3
00:00:24,136 --> 00:00:26,976
>> Welcome to Mastering
UIKit on tvOS.


4
00:00:27,706 --> 00:00:28,446
My name's Justin.


5
00:00:28,496 --> 00:00:29,446
I work on UIKit.


6
00:00:29,806 --> 00:00:32,336
And I am here to show you how
you can go beyond the basics


7
00:00:32,386 --> 00:00:35,506
and really take your tvOS
app to the next level.


8
00:00:35,666 --> 00:00:38,276
So to do that, there's
a few things that I want


9
00:00:38,276 --> 00:00:39,326
to talk to you about today.


10
00:00:39,446 --> 00:00:40,846
And the first is event handling.


11
00:00:41,326 --> 00:00:43,056
What kind of events is
your app going to receive,


12
00:00:43,056 --> 00:00:45,646
and what are the best ways for
you to handle those events?


13
00:00:46,556 --> 00:00:48,246
Then I'd like to talk
about layered images.


14
00:00:48,676 --> 00:00:51,326
This is a user interface
element that's unique to tvOS,


15
00:00:51,326 --> 00:00:55,046
and we'll show you how to
really take advantage of it.


16
00:00:55,296 --> 00:00:56,576
Thirdly, we'll talk
about scrolling.


17
00:00:56,936 --> 00:00:58,986
Scrolling on tvOS works
a little bit differently


18
00:00:58,986 --> 00:00:59,686
than scrolling on iOS.


19
00:00:59,686 --> 00:01:01,546
And we'll show you how
you really take control


20
00:01:01,546 --> 00:01:02,056
of scrolling.


21
00:01:02,056 --> 00:01:05,456
And finally, we'll
talk about text input


22
00:01:05,706 --> 00:01:07,286
and how you can use
the system keyboard


23
00:01:07,286 --> 00:01:08,736
to accept text from users.


24
00:01:09,256 --> 00:01:11,436
So let's get started and dive
right into event handling.


25
00:01:12,486 --> 00:01:13,836
So when it comes
to event handling,


26
00:01:14,406 --> 00:01:16,606
there are a few overall best
practices that I want to share


27
00:01:16,606 --> 00:01:17,306
with you right off the bat.


28
00:01:17,936 --> 00:01:21,696
And the first is, is that when
it comes to allowing your users


29
00:01:21,696 --> 00:01:24,646
to navigate your application
and to move focus from one item


30
00:01:24,646 --> 00:01:26,506
to another, you don't
need to write any


31
00:01:26,506 --> 00:01:27,946
of your own event
handling code at all.


32
00:01:28,256 --> 00:01:30,606
The focus engine is going take
care of all of that for you,


33
00:01:31,306 --> 00:01:33,966
including handling different
kinds of events based


34
00:01:33,966 --> 00:01:36,386
on what kind of input device
the user is currently using.


35
00:01:36,386 --> 00:01:37,866
So it'll take care of
all of that for you.


36
00:01:40,926 --> 00:01:44,026
Secondly, if you decide you do
need to start handling events,


37
00:01:44,026 --> 00:01:46,336
I recommend that you start
with UIGestureRecognizer.


38
00:01:46,656 --> 00:01:48,276
Not only to have a
really expressive API,


39
00:01:48,276 --> 00:01:51,316
but it'll also help ensure all
of the gestures and interactions


40
00:01:51,316 --> 00:01:52,886
in your app are going
to be consistent


41
00:01:52,886 --> 00:01:54,666
across all the system
apps and other apps.


42
00:01:57,236 --> 00:01:59,386
And finally, as you are
designing the interaction model


43
00:01:59,386 --> 00:02:00,746
for your application,
keep in mind


44
00:02:00,746 --> 00:02:03,446
that not every input device can
generate every kind of event.


45
00:02:03,726 --> 00:02:06,266
So for example, a user might
be using a game controller


46
00:02:06,266 --> 00:02:07,596
to navigate to your application.


47
00:02:07,856 --> 00:02:09,826
And game controllers can't
generate touch events.


48
00:02:10,145 --> 00:02:12,776
So you might not want to use
touch events as the only way


49
00:02:12,776 --> 00:02:13,836
to interact with
your application.


50
00:02:13,916 --> 00:02:16,556
So keep that in mind as
you are designing your app.


51
00:02:17,846 --> 00:02:20,386
So speaking of touches,
we have touches


52
00:02:20,386 --> 00:02:23,376
on tvOS using the touch
surface on the Siri remote.


53
00:02:23,646 --> 00:02:26,106
And we deliver them to you
using UITouch, which is an API


54
00:02:26,106 --> 00:02:27,756
that you might recognize
from iOS.


55
00:02:28,226 --> 00:02:30,996
And a touch represents the
contact between a user's finger


56
00:02:31,246 --> 00:02:32,886
and that surface on the remote.


57
00:02:34,936 --> 00:02:36,436
This is just like
the iOS version.


58
00:02:36,436 --> 00:02:37,936
It has the location and
all the other properties


59
00:02:37,936 --> 00:02:39,686
that you are used to.


60
00:02:39,956 --> 00:02:41,646
But there is one important
difference between touches


61
00:02:41,646 --> 00:02:43,306
on tvOS and touches on iOS.


62
00:02:43,766 --> 00:02:45,696
A touch on iOS is
happening directly


63
00:02:45,696 --> 00:02:46,746
onto the user interface.


64
00:02:46,746 --> 00:02:48,936
The user is physically
touching the UI.


65
00:02:49,906 --> 00:02:51,286
That's not the case on tvOS.


66
00:02:51,346 --> 00:02:52,946
The user interface
is 10 feet away,


67
00:02:52,946 --> 00:02:54,706
and the user is touching
their remote.


68
00:02:55,286 --> 00:02:58,356
And so we bucket these into
two different categories.


69
00:02:58,356 --> 00:03:00,346
We say the ones on iOS
are direct touches,


70
00:03:00,346 --> 00:03:02,846
and the ones tvOS are
considered indirect touches.


71
00:03:03,226 --> 00:03:05,646
And we have this touch type
called UITouchTypeIndirect


72
00:03:05,646 --> 00:03:09,506
to help you tell the difference
between the two of those.


73
00:03:09,606 --> 00:03:12,696
And because of this indirection,
if you were to ask the UITouch,


74
00:03:12,746 --> 00:03:14,036
"What's your location onscreen?"


75
00:03:14,566 --> 00:03:17,916
on a direct touch interface
that's a pretty obvious answer.


76
00:03:17,956 --> 00:03:19,946
We give you a location
that maps exactly


77
00:03:19,946 --> 00:03:21,296
where the user's
finger is on the screen.


78
00:03:21,956 --> 00:03:23,736
But on tvOS, the user
isn't touching the screen.


79
00:03:23,796 --> 00:03:25,716
What location should we
report for the touch?


80
00:03:25,896 --> 00:03:28,416
And so what we do in this
case is that no matter


81
00:03:28,416 --> 00:03:30,616
where the user's finger
begins touching the remote,


82
00:03:30,616 --> 00:03:32,656
we always deliver the
touch to your application


83
00:03:32,706 --> 00:03:35,526
as if it had begun directly in
the center of the focused view.


84
00:03:35,866 --> 00:03:37,486
And this is really
great, because it means


85
00:03:37,486 --> 00:03:39,926
that any gesture recognizers
or event handling logic


86
00:03:39,926 --> 00:03:41,026
that you might have attached


87
00:03:41,026 --> 00:03:43,276
to the focused view will
always have an opportunity


88
00:03:43,276 --> 00:03:44,316
to participate in the gesture.


89
00:03:44,316 --> 00:03:48,886
One thing that we don't expose
is the absolute location


90
00:03:48,886 --> 00:03:50,356
of the user's finger
on the track pad.


91
00:03:50,356 --> 00:03:51,916
And there is a few
reasons why we do that,


92
00:03:51,916 --> 00:03:53,976
but one of the really important
ones is that that we want


93
00:03:53,976 --> 00:03:55,706
to discourage pointer-based
UIs on tvOS.


94
00:03:55,706 --> 00:03:58,196
We don't want to see
anything like mouse cursors


95
00:03:58,196 --> 00:03:59,016
or anything like that.


96
00:03:59,166 --> 00:04:01,186
We'd really rather
that applications stick


97
00:04:01,186 --> 00:04:05,386
to the focus interaction
model that we have created.


98
00:04:05,496 --> 00:04:08,026
So in addition to touches, there
is also another kind of event


99
00:04:08,026 --> 00:04:09,886
that you'll get on tvOS; and
these are called presses.


100
00:04:10,346 --> 00:04:12,986
And presses are delivered
using the classical UIPress.


101
00:04:13,336 --> 00:04:16,456
And a press represents an
actual physical hardware button


102
00:04:16,456 --> 00:04:17,606
that the user is
interacting with.


103
00:04:18,586 --> 00:04:21,796
And not all of those buttons are
simply pressed or not pressed.


104
00:04:21,796 --> 00:04:23,316
Some buttons, like those
on game controllers,


105
00:04:23,316 --> 00:04:24,156
are pressure sensitive.


106
00:04:24,156 --> 00:04:26,446
But we can actually detect how
firmly the user is pressing the


107
00:04:26,446 --> 00:04:28,336
button, and we can deliver
that information to you.


108
00:04:28,876 --> 00:04:32,816
You can recognize presses
using UIGestureRecognizer,


109
00:04:32,816 --> 00:04:34,616
including things like
TapGestureRecognizer


110
00:04:34,906 --> 00:04:36,626
and LongPressGestureRecognizer.


111
00:04:36,796 --> 00:04:39,746
And we have low-level
press handling events


112
00:04:39,746 --> 00:04:40,706
that follow the same pattern


113
00:04:40,706 --> 00:04:42,076
as a low-level touch
handling event.


114
00:04:42,116 --> 00:04:44,536
So we have pressesBegan,
which fires as soon


115
00:04:44,536 --> 00:04:46,006
as the user begins
depressing the button.


116
00:04:46,356 --> 00:04:48,086
We have pressesChanged,
which will be delivered


117
00:04:48,086 --> 00:04:49,396
if it's a pressure-sensitive
button


118
00:04:49,396 --> 00:04:50,786
and the amount of
pressure changes.


119
00:04:51,506 --> 00:04:53,666
And we also have pressesEnded
and pressesCancelled.


120
00:04:53,826 --> 00:04:54,856
And just like touchesCancelled,


121
00:04:54,906 --> 00:04:56,806
yes you really do
have to implement it.


122
00:04:57,696 --> 00:04:59,706
There's one thing to
know about these methods,


123
00:04:59,846 --> 00:05:01,306
which is that press events


124
00:05:01,306 --> 00:05:03,786
because they don't really have
a location they get delivered


125
00:05:03,786 --> 00:05:04,866
directly to the focus view.


126
00:05:04,866 --> 00:05:06,976
And they go up the
responder chain from there.


127
00:05:07,046 --> 00:05:09,146
They won't go to any child
views of the focus views.


128
00:05:09,146 --> 00:05:11,436
So keep that in mind when
you are deciding what view


129
00:05:11,436 --> 00:05:12,736
to attach gesture
recognizers to.


130
00:05:12,976 --> 00:05:16,786
Okay, so we are talking
a lot about presses.


131
00:05:16,786 --> 00:05:18,626
Let's go through some of the
press types that are available


132
00:05:18,626 --> 00:05:20,826
to you and what buttons
will trigger them


133
00:05:20,826 --> 00:05:21,976
on various input devices.


134
00:05:22,056 --> 00:05:25,946
So I want to show you the
Siri remote, the Apple remote


135
00:05:25,946 --> 00:05:27,226
from previous-generation
Apple TVs,


136
00:05:27,226 --> 00:05:29,806
and I want to show
you game controllers.


137
00:05:30,006 --> 00:05:31,206
And I don't have room
on the slides here,


138
00:05:31,206 --> 00:05:33,146
but keep in mind presses
can also be generated


139
00:05:33,146 --> 00:05:35,546
from programmable
universal remotes and also


140
00:05:35,546 --> 00:05:36,496
from Bluetooth keyboards.


141
00:05:36,496 --> 00:05:40,506
So there is a lot of
ways to get presses.


142
00:05:40,536 --> 00:05:42,196
Probably the most common
press type you'll encounter


143
00:05:42,196 --> 00:05:43,406
is UIPressTypeSelect.


144
00:05:43,406 --> 00:05:45,766
And this is the press type that
represents that the user wants


145
00:05:45,766 --> 00:05:47,726
to activate a control or select


146
00:05:47,726 --> 00:05:49,306
on a CollectionView cell,
something like that.


147
00:05:49,306 --> 00:05:50,986
And on the Siri remote,


148
00:05:50,986 --> 00:05:52,656
that's the button that's
actually underneath the touch


149
00:05:52,656 --> 00:05:53,616
surface on the remote.


150
00:05:54,836 --> 00:05:56,816
On the Apple remote,
that's the silver circle.


151
00:05:56,816 --> 00:05:58,646
And on game controllers
we use the A button


152
00:05:58,646 --> 00:06:01,636
to generate this press type.


153
00:06:01,856 --> 00:06:03,306
Another really common
press type you'll encounter


154
00:06:03,306 --> 00:06:04,466
is UIPressTypeMenu.


155
00:06:04,466 --> 00:06:05,386
And this is the press type


156
00:06:05,386 --> 00:06:07,046
that indicates the
user wants to go back.


157
00:06:07,306 --> 00:06:09,256
They want to dismiss a
presented view controller


158
00:06:09,256 --> 00:06:11,096
or even dismiss your
application entirely


159
00:06:11,096 --> 00:06:12,076
and return to the Home screen.


160
00:06:12,656 --> 00:06:14,596
And in all three of
these on the screen,


161
00:06:14,596 --> 00:06:16,176
that'll be the button
that says Menu.


162
00:06:17,516 --> 00:06:20,296
And on game controllers, we
will also use the B button.


163
00:06:20,716 --> 00:06:24,696
And finally, there is
UIPressTypePlayPause.


164
00:06:24,896 --> 00:06:27,766
And this is obviously useful
for pausing or playing content,


165
00:06:27,946 --> 00:06:29,676
but it can also be used
as sort of a shortcut


166
00:06:29,676 --> 00:06:30,676
in addition to Select.


167
00:06:30,676 --> 00:06:33,346
So if the users focus
on, say, a movie poster,


168
00:06:33,606 --> 00:06:36,106
pressing the Select button might
show the details for the movie.


169
00:06:36,276 --> 00:06:37,896
But pressing Play/Pause
will just jump straight


170
00:06:37,896 --> 00:06:38,416
into playback.


171
00:06:39,236 --> 00:06:41,676
And so that's the
icon that has the --


172
00:06:41,676 --> 00:06:43,656
or the button that has
the Play/Pause icon on it.


173
00:06:43,656 --> 00:06:45,606
And on game controllers
we'll use the X button


174
00:06:45,606 --> 00:06:47,036
to generate that press type.


175
00:06:48,506 --> 00:06:49,536
Okay, so to round things


176
00:06:49,536 --> 00:06:50,916
out there is just a
few more press types,


177
00:06:50,916 --> 00:06:52,696
and these are directional
presses.


178
00:06:52,696 --> 00:06:55,366
So we have up, down, left,
and right arrow presses


179
00:06:55,366 --> 00:06:56,166
that can be generated.


180
00:06:56,216 --> 00:06:59,766
On the Apple remote we use
the four directional buttons.


181
00:06:59,766 --> 00:07:02,506
On game controllers there is
lots of ways to get these.


182
00:07:02,506 --> 00:07:04,286
So we'll use the D pad.


183
00:07:04,966 --> 00:07:07,256
We'll also use the
directional analog stick.


184
00:07:07,256 --> 00:07:09,196
And we'll even generate left


185
00:07:09,196 --> 00:07:10,976
and right presses using
the shoulder buttons


186
00:07:10,976 --> 00:07:11,646
on the game controller.


187
00:07:12,796 --> 00:07:14,556
Now there aren't any
discrete hardware buttons


188
00:07:14,556 --> 00:07:16,526
for these arrows on the serial
remote, so you might think


189
00:07:16,526 --> 00:07:18,096
that it's not possible
to generate these there


190
00:07:18,096 --> 00:07:19,086
but that's actually not true.


191
00:07:19,486 --> 00:07:22,016
If you do a touch tap you
are not pressing all the way


192
00:07:22,016 --> 00:07:23,576
down on the Select
button but just touching


193
00:07:23,576 --> 00:07:25,706
on these four cardinal
points on the surface.


194
00:07:26,086 --> 00:07:27,306
Then UIKit will detect that


195
00:07:27,306 --> 00:07:29,246
and actually generate
arrow presses for you.


196
00:07:29,246 --> 00:07:31,566
And this is a really
convenient way to navigate


197
00:07:31,566 --> 00:07:33,946
through your user interface
exactly one item at a time.


198
00:07:34,326 --> 00:07:36,486
So just because the user
is using the Siri remote,


199
00:07:36,596 --> 00:07:38,406
that doesn't mean that they
can't generate arrow presses.


200
00:07:38,676 --> 00:07:42,916
Okay, so I promised you that
you can use gesture recognizers


201
00:07:42,916 --> 00:07:43,636
to recognize these.


202
00:07:43,636 --> 00:07:45,136
And I won't go through these
in detail, but I just want


203
00:07:45,136 --> 00:07:46,426
to show you a few
quick examples.


204
00:07:46,796 --> 00:07:48,236
You know, we can use the
TapGestureRecognizer there


205
00:07:48,236 --> 00:07:49,056
on the top.


206
00:07:49,286 --> 00:07:51,706
We can even do a long press
just like you might do to go


207
00:07:51,706 --> 00:07:53,566
into the editing mode
on the tvOS Home screen.


208
00:07:53,736 --> 00:07:56,006
And there at the bottom I
can even adjust the number


209
00:07:56,006 --> 00:07:56,726
of taps required.


210
00:07:56,726 --> 00:07:59,036
So now I am listening for a
double tap on the Select button.


211
00:08:01,766 --> 00:08:04,466
Okay, let's talk about
one button in particular,


212
00:08:04,466 --> 00:08:05,626
and that's the Menu button.


213
00:08:06,656 --> 00:08:09,776
The Menu button has some
interesting behavior on tvOS.


214
00:08:09,776 --> 00:08:11,086
It kind of has to
play two roles.


215
00:08:11,486 --> 00:08:13,166
Not only does it need
to be useful inside


216
00:08:13,166 --> 00:08:14,906
of your application,
because we need to do things


217
00:08:14,906 --> 00:08:17,216
like dismiss view
controllers or pop things off


218
00:08:17,216 --> 00:08:18,606
of a UINavigationController.


219
00:08:18,946 --> 00:08:20,836
But it also needs to have
system-level behavior.


220
00:08:20,836 --> 00:08:23,216
And eventually your
app needs to dismiss --


221
00:08:23,216 --> 00:08:25,566
be dismissed so the user can
return to the Home screen.


222
00:08:25,866 --> 00:08:27,416
And your user is going
to be really frustrated


223
00:08:27,416 --> 00:08:28,256
if that's not possible.


224
00:08:28,636 --> 00:08:29,966
And we can think that
this is so important,


225
00:08:29,966 --> 00:08:32,635
that this is something that App
Review looks for specifically.


226
00:08:32,916 --> 00:08:34,626
So if your application
can't be exited


227
00:08:34,626 --> 00:08:36,806
by pressing the Menu button,
you might fail App Review.


228
00:08:36,866 --> 00:08:39,535
And we don't want
that to happen.


229
00:08:39,535 --> 00:08:41,826
So how does this work?


230
00:08:41,826 --> 00:08:44,636
How do we get it so that the
Menu button can both be captured


231
00:08:44,636 --> 00:08:46,506
by your application but
also used by the system?


232
00:08:46,886 --> 00:08:49,406
Well the technical thing
that needs to happen in order


233
00:08:49,406 --> 00:08:51,616
for your app to gracefully
resign and go back


234
00:08:51,616 --> 00:08:54,506
to the Home screen is that when
the Menu button is released,


235
00:08:54,586 --> 00:08:56,896
the pressesEnded event
needs to go all the way


236
00:08:56,896 --> 00:08:59,186
up the responder chain if you
are received by UIApplication.


237
00:08:59,396 --> 00:09:01,726
If that doesn't happen, your
application won't resign.


238
00:09:02,596 --> 00:09:04,216
Now sometimes that's
exactly what you want.


239
00:09:04,216 --> 00:09:06,206
So if you are deep into
UINavigationController,


240
00:09:06,206 --> 00:09:07,966
and the user presses the
Menu button, they don't want


241
00:09:07,966 --> 00:09:09,386
to resign your app; they
just want to go back


242
00:09:09,386 --> 00:09:10,496
to the previous view controller.


243
00:09:11,016 --> 00:09:13,596
So in that case, there might be
a TapGestureRecognizer that's


244
00:09:13,596 --> 00:09:14,616
listening for the Menu button.


245
00:09:14,676 --> 00:09:17,086
And if that recognizer
begins to recognize,


246
00:09:17,086 --> 00:09:19,316
it'll send pressesCancelled
to the responder chain.


247
00:09:19,316 --> 00:09:21,446
And in that case the
application won't exit,


248
00:09:21,446 --> 00:09:23,636
and then UINavigationController
can hop off


249
00:09:23,636 --> 00:09:24,226
that view controller.


250
00:09:24,596 --> 00:09:26,776
So it's okay to not
always send pressesEnded


251
00:09:26,776 --> 00:09:27,456
to your application.


252
00:09:27,496 --> 00:09:30,346
You just need to make sure that
it is possible when it becomes


253
00:09:30,346 --> 00:09:33,326
at the appropriate time.


254
00:09:33,526 --> 00:09:35,306
So to do this correctly,
we obviously recommend


255
00:09:35,306 --> 00:09:36,676
that you start with
gesture recognizers.


256
00:09:36,676 --> 00:09:38,286
And when you no longer
are interested


257
00:09:38,286 --> 00:09:40,256
in handling the Menu
button, you need to make sure


258
00:09:40,256 --> 00:09:41,676
that GestureRecognizer
gets out of the way.


259
00:09:42,266 --> 00:09:43,606
And so one way to do
that is just remove the


260
00:09:43,606 --> 00:09:46,466
GestureRecognizer from the view.


261
00:09:46,466 --> 00:09:47,506
You also disable the gesture.


262
00:09:47,506 --> 00:09:49,536
So gesture recognizers have
a property called enabled.


263
00:09:49,536 --> 00:09:50,536
And if you set that to false,


264
00:09:50,536 --> 00:09:51,806
then the gesture will
get out of the way.


265
00:09:51,866 --> 00:09:54,776
And if you don't want to
do either one of those,


266
00:09:54,776 --> 00:09:57,386
there is UIGestureRecognizer
delegate API called


267
00:09:57,386 --> 00:09:58,736
gestureRecognizerShouldBegin.


268
00:09:59,086 --> 00:10:01,226
And you can implement this,
and then for every press


269
00:10:01,226 --> 00:10:02,756
of the Menu button you
get the opportunity


270
00:10:02,756 --> 00:10:04,676
to decide right then
whether or not you want


271
00:10:04,676 --> 00:10:05,336
to handle the gesture.


272
00:10:07,176 --> 00:10:09,066
If you are implementing the
lower-level press handling


273
00:10:09,066 --> 00:10:12,316
methods, in your pressesEnded
implementation decide whether


274
00:10:12,316 --> 00:10:13,686
or not you want to
handle the event.


275
00:10:13,866 --> 00:10:16,426
And if you do want to handle the
event, then don't call super.


276
00:10:16,676 --> 00:10:19,336
But if you are not going to
handle the event, then make sure


277
00:10:19,336 --> 00:10:21,536
that you do call super so
that it can continue to go


278
00:10:21,536 --> 00:10:22,376
up the responder chain


279
00:10:22,376 --> 00:10:25,196
and UIApplication has the
opportunity to receive it.


280
00:10:26,406 --> 00:10:27,736
Finally, if you are
writing a game,


281
00:10:27,736 --> 00:10:29,826
it's common that you only
really have one view controller,


282
00:10:29,826 --> 00:10:30,986
which is the one
that shows your game.


283
00:10:31,496 --> 00:10:33,286
And so in that case
you might want to look


284
00:10:33,286 --> 00:10:34,786
at using GCEventViewController.


285
00:10:34,896 --> 00:10:36,146
Now it has this property,


286
00:10:36,146 --> 00:10:37,796
controllerUser
InteractionEnabled.


287
00:10:38,306 --> 00:10:40,766
And what this does is that
when the user is navigating


288
00:10:40,766 --> 00:10:42,226
through your app using
a game controller,


289
00:10:42,526 --> 00:10:44,636
not only are events going to
the game controller framework,


290
00:10:44,636 --> 00:10:46,136
which you are probably
already using your game.


291
00:10:46,556 --> 00:10:48,486
But they also can
generate UIKit events,


292
00:10:48,486 --> 00:10:49,706
like these presses
and other things.


293
00:10:50,006 --> 00:10:51,316
And when you are in the
middle of game play,


294
00:10:51,316 --> 00:10:52,336
you are probably not interested


295
00:10:52,336 --> 00:10:54,226
in receiving the UIKit
version of those events.


296
00:10:54,256 --> 00:10:56,416
So if you set controllerUser
InteractionEnabled


297
00:10:56,736 --> 00:11:00,746
to false during your game
play, then pressing, say,


298
00:11:00,746 --> 00:11:03,186
the Menu button won't
instantly exit your application.


299
00:11:03,186 --> 00:11:04,676
And instead you'll
be able to capture it


300
00:11:04,676 --> 00:11:05,696
and take care of it on your own.


301
00:11:05,696 --> 00:11:08,676
But when the user gets back
to the root menu of your game,


302
00:11:08,676 --> 00:11:10,176
you are going to want
to turn this back to yes


303
00:11:10,176 --> 00:11:11,956
so that pressing the Menu button
can exit your application.


304
00:11:13,476 --> 00:11:15,546
So that is event handling.


305
00:11:16,216 --> 00:11:20,156
Let's talk now about
layered images.


306
00:11:20,156 --> 00:11:22,596
Layered images are this user
interface element that's really


307
00:11:22,596 --> 00:11:23,616
unique to tvOS.


308
00:11:24,196 --> 00:11:25,946
And there are these images


309
00:11:25,946 --> 00:11:27,246
that you've probably
seen in all the demos.


310
00:11:27,796 --> 00:11:30,966
And they can have up to
five layers within them,


311
00:11:30,966 --> 00:11:32,866
a parallaxing content
that moves.


312
00:11:32,986 --> 00:11:35,856
And these are required
for application icons.


313
00:11:35,856 --> 00:11:38,416
So your application
icon on tvOS has to have


314
00:11:38,416 --> 00:11:39,666
at a minimum of two layers.


315
00:11:39,666 --> 00:11:41,706
So you'll have to be at least a
little familiar with this format


316
00:11:41,706 --> 00:11:45,566
if you are going to be on
tvOS and they're interactive.


317
00:11:45,566 --> 00:11:48,266
As the user moves their finger
around on the Siri remote,


318
00:11:48,646 --> 00:11:51,726
the image moves in
time with their finger.


319
00:11:51,726 --> 00:11:53,136
And this is more
than just eye candy.


320
00:11:53,456 --> 00:11:55,006
This helps the user to realize


321
00:11:55,006 --> 00:11:57,106
that their inputs are being
received and helps them


322
00:11:57,106 --> 00:11:59,356
to anticipate focus
movement before it happens.


323
00:12:00,746 --> 00:12:02,076
And they're animated.


324
00:12:02,076 --> 00:12:04,606
So they have a lot of great
animation that comes built-in,


325
00:12:04,606 --> 00:12:06,056
especially like when
they become focused.


326
00:12:06,426 --> 00:12:09,286
And we'll show you how you can
coordinate those animations


327
00:12:09,286 --> 00:12:13,476
to really make your
app come to life.


328
00:12:13,476 --> 00:12:14,906
Okay, so let's talk
about that interactivity.


329
00:12:15,166 --> 00:12:19,716
So the video that I just showed
you, that's a UIImageView.


330
00:12:19,716 --> 00:12:21,236
And if the UIImageView
becomes focused,


331
00:12:21,236 --> 00:12:22,536
then it'll automatically
give you


332
00:12:22,536 --> 00:12:24,616
that great floating appearance


333
00:12:24,616 --> 00:12:26,826
if you have a layered image
inside of that ImageView.


334
00:12:27,376 --> 00:12:28,196
But it's often the case


335
00:12:28,196 --> 00:12:30,576
that a UI image is not the
control that's actually


336
00:12:30,576 --> 00:12:31,246
becoming focused.


337
00:12:31,246 --> 00:12:34,846
Images are typically a
component of a larger control,


338
00:12:34,846 --> 00:12:36,286
and in that case the
larger control is going


339
00:12:36,286 --> 00:12:37,016
to become focused.


340
00:12:37,466 --> 00:12:38,996
So how do we get this
floating appearance


341
00:12:38,996 --> 00:12:40,756
if the image isn't
what's becoming focused?


342
00:12:41,126 --> 00:12:42,366
Well it doesn't have
to be focused.


343
00:12:42,776 --> 00:12:43,986
We have this property
that we've added


344
00:12:43,986 --> 00:12:46,136
to UIImageView called
adjustsImage


345
00:12:46,136 --> 00:12:47,246
WhenAncestorfocused.


346
00:12:47,466 --> 00:12:50,426
And if you set this to be
true, then if any parent view


347
00:12:50,426 --> 00:12:51,746
of the image becomes focused,


348
00:12:51,746 --> 00:12:53,106
then the image will
automatically get


349
00:12:53,106 --> 00:12:53,986
that floating appearance


350
00:12:53,986 --> 00:12:55,466
and begin reacting
to the user's input.


351
00:12:55,976 --> 00:12:59,746
And these images can also
have a pressed-in state.


352
00:12:59,746 --> 00:13:00,906
And so this is slightly
different


353
00:13:00,906 --> 00:13:02,646
than the normal default state,


354
00:13:02,646 --> 00:13:04,426
where they are sitting
back on the screen.


355
00:13:04,776 --> 00:13:06,626
They kind of have this sort
of smooshed-in appearance


356
00:13:06,626 --> 00:13:08,366
as if the user is
physically pressing them down.


357
00:13:09,266 --> 00:13:11,006
And you can trigger
this manually


358
00:13:11,006 --> 00:13:13,286
by setting the isHighlighted
property on your ImageView


359
00:13:13,556 --> 00:13:15,656
to be either true or
false, and that'll turn


360
00:13:15,656 --> 00:13:16,656
on or off that effect.


361
00:13:16,736 --> 00:13:19,996
And you might want to do
this in your control subclass


362
00:13:19,996 --> 00:13:22,116
when the user starts pressing
the Select button, for example.


363
00:13:22,946 --> 00:13:25,606
But there are a few cases
where we cover this for you


364
00:13:25,606 --> 00:13:27,166
and you won't have to
do this manually at all.


365
00:13:27,166 --> 00:13:29,756
And those are images that are
inside UICollectionViewCells


366
00:13:29,856 --> 00:13:32,926
and images that are
inside of custom UIButton.


367
00:13:33,016 --> 00:13:35,416
In those cases you don't have
to manage isHighlighted property


368
00:13:35,416 --> 00:13:36,686
at all; we'll take
care of that for you.


369
00:13:37,206 --> 00:13:40,396
Okay, so we talked
about animations.


370
00:13:40,396 --> 00:13:43,266
So let's look at that
a little more closely.


371
00:13:43,436 --> 00:13:45,106
So one of the things
that happens


372
00:13:45,106 --> 00:13:46,596
when these images become,


373
00:13:46,596 --> 00:13:48,556
in their floating
appearances they get bigger


374
00:13:48,746 --> 00:13:49,736
or they look like
they get bigger.


375
00:13:49,736 --> 00:13:51,466
And you might have to
use it on your nearbys.


376
00:13:51,466 --> 00:13:52,996
You might want to move
it out of the way,


377
00:13:52,996 --> 00:13:55,536
like you have a label
underneath of a movie poster.


378
00:13:56,186 --> 00:13:58,796
And you can constrain
those using Auto Layouts.


379
00:13:58,796 --> 00:14:00,656
So, you know, if I have
this ImageView here,


380
00:14:00,886 --> 00:14:02,226
let's say that I have
sized the ImageView


381
00:14:02,226 --> 00:14:04,596
to be the same size
as the image.


382
00:14:04,856 --> 00:14:07,006
Then you can constrain to
the frame of the image.


383
00:14:07,006 --> 00:14:09,256
But when it becomes enlarged,
the frame doesn't change


384
00:14:09,256 --> 00:14:11,556
but the visible extent
of the image does.


385
00:14:11,556 --> 00:14:14,966
And so to find out how
large the image will be


386
00:14:14,966 --> 00:14:15,776
when it becomes focused,


387
00:14:15,776 --> 00:14:18,056
we expose this layout guide
called focusedFrameGuide.


388
00:14:18,346 --> 00:14:20,246
And you can attach
other constraints


389
00:14:20,246 --> 00:14:23,486
to that layout guide, and that
way those views will be far


390
00:14:23,486 --> 00:14:25,406
enough away from the image that
they won't be clipped by it


391
00:14:25,406 --> 00:14:26,366
when it becomes larger.


392
00:14:26,796 --> 00:14:28,826
So let's run through this.


393
00:14:28,826 --> 00:14:31,236
So I have my ImageView here,
and I have this red outline


394
00:14:31,236 --> 00:14:33,256
that represents the
frame of the UIImageView.


395
00:14:33,256 --> 00:14:37,576
And when it becomes focused
it's going to get bigger,


396
00:14:37,576 --> 00:14:39,496
but the frame is still
at that red outline.


397
00:14:39,966 --> 00:14:42,826
And so now this dotted
outline shows


398
00:14:42,876 --> 00:14:44,586
where the focusedFrameGuide is.


399
00:14:44,586 --> 00:14:46,466
And that focusedFrameGuide
will always be there,


400
00:14:46,466 --> 00:14:48,086
even if it's not
currently focused.


401
00:14:48,086 --> 00:14:49,906
And so you can choose
which one of these you want


402
00:14:49,906 --> 00:14:51,146
to attach your layout
constraints to.


403
00:14:52,436 --> 00:14:54,666
Or you may choose to change


404
00:14:54,666 --> 00:14:56,306
which constraints are
active based on whether


405
00:14:56,306 --> 00:14:57,846
or not the element
is currently focused.


406
00:14:57,846 --> 00:15:00,626
And if you do that you should
really use the coordination API


407
00:15:00,626 --> 00:15:03,366
that we expose on the focus
update context to make sure


408
00:15:03,366 --> 00:15:05,866
that the animation happens in
time with the system animation.


409
00:15:06,546 --> 00:15:08,766
The system animation has a
lot of subtlety in it in terms


410
00:15:08,766 --> 00:15:10,226
of what exactly the timing is.


411
00:15:10,226 --> 00:15:12,466
It depends on how quickly
the user is swiping


412
00:15:12,466 --> 00:15:14,516
or how far off-screen
the view is focused


413
00:15:14,516 --> 00:15:15,716
at the moment it became focused.


414
00:15:15,716 --> 00:15:18,466
So it's not really possible to
get target values into your app.


415
00:15:18,466 --> 00:15:21,006
You are going to need to use the
coordination API to make sure


416
00:15:21,006 --> 00:15:23,196
that your animations will
match the system animations.


417
00:15:23,386 --> 00:15:24,516
And to show you how to do that,


418
00:15:24,516 --> 00:15:26,486
I'd like to invite Randy
onstage to give you a demo.


419
00:15:26,696 --> 00:15:26,976
Randy?


420
00:15:27,516 --> 00:15:31,546
[ Applause ]


421
00:15:32,046 --> 00:15:32,616
>> Thank you Justin.


422
00:15:33,386 --> 00:15:34,616
So today I am going to walk


423
00:15:34,616 --> 00:15:36,786
through those two
common cases we have


424
00:15:36,936 --> 00:15:39,266
with adding interactivity
to layered images.


425
00:15:39,786 --> 00:15:42,626
And first we are going
to look at a UIButton.


426
00:15:42,816 --> 00:15:44,216
And second we are going to look


427
00:15:44,216 --> 00:15:45,916
at a custom collection
view table cell.


428
00:15:46,256 --> 00:15:49,446
So to get started, I have got
a project here opened in Xcode


429
00:15:49,446 --> 00:15:51,806
with an asset catalog that
has some layered images.


430
00:15:51,836 --> 00:15:56,036
And I just have a
ViewController subclass here.


431
00:15:56,316 --> 00:15:58,986
And we are going to
drag out a button --


432
00:16:03,146 --> 00:16:09,286
into the canvas and inspect
it to give it an image.


433
00:16:17,496 --> 00:16:18,666
And we'll delete its title.


434
00:16:22,046 --> 00:16:23,416
And then we'll add a
couple of constraints


435
00:16:24,716 --> 00:16:26,706
to center it horizontally
and vertically.


436
00:16:27,266 --> 00:16:31,896
And then we'll update
that Buttons frame


437
00:16:32,186 --> 00:16:33,486
to match those constraints.


438
00:16:33,486 --> 00:16:35,496
You can do that with
this menu down here,


439
00:16:35,856 --> 00:16:38,736
but I usually the keyboard
shortcut Command Option Equals.


440
00:16:40,156 --> 00:16:43,456
And if you look closely,
there is a little bit


441
00:16:43,456 --> 00:16:45,466
of extra space around
the button.


442
00:16:46,156 --> 00:16:48,276
Those are the edge
content insets.


443
00:16:48,276 --> 00:16:50,076
We don't want those, so
we can just delete them.


444
00:16:50,576 --> 00:16:54,706
So that looks about
like what we want.


445
00:16:54,706 --> 00:16:57,566
So we'll build and run
and see how it behaves.


446
00:16:57,926 --> 00:17:00,296
Now I am using the
tvOS simulator here,


447
00:17:00,296 --> 00:17:02,186
but I have paired a
Siri remote with Mac


448
00:17:02,936 --> 00:17:04,826
so you can get a good feel


449
00:17:04,826 --> 00:17:07,066
for how the interaction
is going to work.


450
00:17:08,126 --> 00:17:11,476
And my finger is pressing
down on the Select button,


451
00:17:11,695 --> 00:17:13,996
but it's just doing this
darkening effect and sort


452
00:17:13,996 --> 00:17:15,616
of doing that sort
of smooshing in.


453
00:17:15,976 --> 00:17:17,796
And when I move my
finger on the digitizer,


454
00:17:17,796 --> 00:17:19,195
it doesn't react to my touch.


455
00:17:19,695 --> 00:17:20,556
So let's make that better.


456
00:17:22,326 --> 00:17:26,486
To do that, I am going to
open up the Assistant Editor


457
00:17:26,695 --> 00:17:30,766
for our ViewController
subclass and drag


458
00:17:30,766 --> 00:17:32,136
out an outlet for the button.


459
00:17:36,526 --> 00:17:37,966
And then in viewDidLoad,


460
00:17:38,136 --> 00:17:41,486
I am going to grab the
ImageView from that button.


461
00:17:47,136 --> 00:17:49,496
And I want to turn on that
property that Justin told us


462
00:17:49,496 --> 00:17:53,596
about adjustsImage
WhenAncestorFocused.


463
00:17:56,156 --> 00:18:00,236
And now if I build and
run, you should see


464
00:18:00,236 --> 00:18:04,086
that the button responds
to my finger on the remote.


465
00:18:04,086 --> 00:18:07,626
And it pushes in
when I click on it.


466
00:18:07,896 --> 00:18:09,456
But we still have an issue
here because the edges


467
00:18:09,456 --> 00:18:10,466
of this button are clipped.


468
00:18:11,286 --> 00:18:13,066
And that's because by default,


469
00:18:13,646 --> 00:18:17,026
the button's ImageView has
clipsToBounds turned on.


470
00:18:17,806 --> 00:18:18,836
So we just turn that off.


471
00:18:19,956 --> 00:18:20,856
Build and run again.


472
00:18:21,286 --> 00:18:23,406
We should get exactly
what we are looking for.


473
00:18:23,486 --> 00:18:27,696
It's a great interactive
layered image that moves


474
00:18:27,696 --> 00:18:29,746
around with my finger
and smooshes it


475
00:18:29,746 --> 00:18:32,076
when I press on it, great.


476
00:18:33,016 --> 00:18:34,526
Let's do something a
little more involved.


477
00:18:34,636 --> 00:18:38,446
I have another project here,


478
00:18:39,576 --> 00:18:42,096
and this one has a
CollectionViewController


479
00:18:42,096 --> 00:18:44,166
subclass in it.


480
00:18:44,166 --> 00:18:48,736
And I have gone ahead and
configured the sizing parameters


481
00:18:48,736 --> 00:18:50,646
of the CollectionView according


482
00:18:50,646 --> 00:18:52,766
to the Human Interface
Guidelines for tvOS


483
00:18:52,766 --> 00:18:53,966
for a six-column layout.


484
00:18:54,806 --> 00:18:57,886
Those guidelines tell us we
want a cell width of 250 points.


485
00:18:58,546 --> 00:19:02,176
And I know, based on my designs,
I'll need 450 points vertically


486
00:19:02,326 --> 00:19:03,736
for the content of the cells.


487
00:19:03,736 --> 00:19:05,366
And the guidelines tell us


488
00:19:05,366 --> 00:19:07,416
for a six-column
layout we need 48 points


489
00:19:07,416 --> 00:19:10,356
between cells horizontally
and at least 100 points


490
00:19:10,356 --> 00:19:11,466
between cells vertically.


491
00:19:11,876 --> 00:19:15,276
And finally, to stay within
the safe areas of a wide range


492
00:19:15,276 --> 00:19:17,746
of TVs, we want to leave 60
points at the top and the bottom


493
00:19:17,946 --> 00:19:19,466
and 90 points on the
left and the right.


494
00:19:19,466 --> 00:19:21,456
And those numbers are
also in the guidelines.


495
00:19:21,996 --> 00:19:24,326
So let's take a look
at the cell itself.


496
00:19:24,326 --> 00:19:29,436
I have already given it a custom
class and a reuse identifier.


497
00:19:29,556 --> 00:19:32,616
And we are going to
zoom in a little bit


498
00:19:32,616 --> 00:19:36,196
and add some custom subviews.


499
00:19:37,926 --> 00:19:39,886
First we'll drag
out an ImageView.


500
00:19:46,046 --> 00:19:47,156
And then we'll drag out a label.


501
00:19:53,056 --> 00:19:55,826
Now I'll add some constraints
to lay out these views.


502
00:19:55,876 --> 00:19:59,396
We want the ImageView to hug
the top left and right edges.


503
00:19:59,966 --> 00:20:01,356
And we happen to know that all


504
00:20:01,356 --> 00:20:03,876
of our images have
the same aspect ratio.


505
00:20:03,876 --> 00:20:06,226
So I'll also add an
aspect ratio constraint.


506
00:20:06,226 --> 00:20:09,826
And then I'll edit that
aspect ratio constraint


507
00:20:09,826 --> 00:20:12,166
to match our images so they
have a ratio of 2-to-3.


508
00:20:13,876 --> 00:20:15,936
And then I'll add some
constraints to my label.


509
00:20:16,416 --> 00:20:18,856
I'll Control-Drag from
the label to the ImageView


510
00:20:18,936 --> 00:20:22,336
to add a horizontal
centering constraint.


511
00:20:22,636 --> 00:20:28,096
And then I also want
my ImageView the top


512
00:20:28,096 --> 00:20:31,276
of my label will be 15 points
from the bottom of my ImageView.


513
00:20:31,446 --> 00:20:33,886
So I'll add a constraint
between those things.


514
00:20:34,116 --> 00:20:38,346
Now that we have added
all those constraints,


515
00:20:38,346 --> 00:20:40,706
we can do Command Option
Equals to get everything


516
00:20:40,706 --> 00:20:43,066
where it's supposed to be.


517
00:20:43,276 --> 00:20:45,856
And finally, that font
is a little small.


518
00:20:45,856 --> 00:20:49,886
So I am going to bump it up
to Body style, nice pick.


519
00:20:51,206 --> 00:20:55,696
And we've got some outlets for
the ImageView on our poster.


520
00:20:55,986 --> 00:20:57,926
So we'll just hook
those up and the label.


521
00:20:57,926 --> 00:21:02,376
Now we'll take a quick look at
our CollectionViewController.


522
00:21:02,456 --> 00:21:04,676
You can see I have just
implemented number of items


523
00:21:04,676 --> 00:21:06,886
in section, and cellForItemAt
indexPath.


524
00:21:07,646 --> 00:21:13,046
So if I build and run, we should
get basically the layout we are


525
00:21:13,046 --> 00:21:13,536
looking for.


526
00:21:14,146 --> 00:21:15,976
But we'll see what
the behavior is like.


527
00:21:20,216 --> 00:21:22,356
So this is pretty much the
layout I was looking for.


528
00:21:22,356 --> 00:21:23,686
It's all the right things.


529
00:21:23,686 --> 00:21:26,566
But right away you can't
tell which item is focused.


530
00:21:26,566 --> 00:21:29,836
And when I click, you can't
see which cell I am selecting.


531
00:21:30,496 --> 00:21:33,966
So let's take care
of all those things.


532
00:21:34,926 --> 00:21:38,886
Now first, to see where the
focus is we are going to go


533
00:21:39,196 --> 00:21:42,316
into Interface Builder and
select our ImageView and check


534
00:21:42,316 --> 00:21:44,816
that adjustImagewhenfocused
check mark.


535
00:21:45,136 --> 00:21:50,026
And that'll be enough
to get our cells


536
00:21:50,026 --> 00:21:51,746
to start responding to focus.


537
00:21:52,366 --> 00:21:55,376
As you can see, it's big,
and it reacts to my touch;


538
00:21:55,376 --> 00:21:56,906
and when I click it pushes in.


539
00:21:57,656 --> 00:21:59,766
But the labels are
overlapping on the bottom.


540
00:21:59,766 --> 00:22:03,006
They are not responding to
the change in the focus size.


541
00:22:03,006 --> 00:22:06,186
So to do something about
that, we are going to open


542
00:22:06,186 --> 00:22:10,276
up our custom cell class
in the Assistant Editor.


543
00:22:10,776 --> 00:22:16,016
And first we are going
to drag out an outlet


544
00:22:16,016 --> 00:22:19,256
for that vertical constraint
between the top of the label


545
00:22:19,296 --> 00:22:20,476
and the bottom of the ImageView.


546
00:22:21,586 --> 00:22:24,126
So we'll add an outlet
for that, and we'll call


547
00:22:24,126 --> 00:22:28,316
that the unfocusedConstraint.


548
00:22:34,116 --> 00:22:35,056
And then I'll add
another property


549
00:22:38,886 --> 00:22:40,526
for the focusedConstraint.


550
00:22:40,526 --> 00:22:44,816
We'll set that focusedConstraint
up in awakeFromNib


551
00:22:48,036 --> 00:22:50,596
to be the labels.topAnchor


552
00:23:00,356 --> 00:23:06,686
relative to the imageView's
focusedFrameGuide bottomAnchor


553
00:23:07,846 --> 00:23:09,016
plus those 15 points.


554
00:23:12,426 --> 00:23:19,876
Then in updateConstraints
we'll set the focusedFrame --


555
00:23:20,406 --> 00:23:24,896
we'll make the focusedConstraint
active when the cell is focused.


556
00:23:25,646 --> 00:23:29,206
And we'll make the
unfocusedConstraint active


557
00:23:29,876 --> 00:23:32,576
in the opposite case.


558
00:23:34,236 --> 00:23:38,226
Finally, in didUpdateFocus,
we'll invalidate our constraints


559
00:23:38,226 --> 00:23:41,436
by calling
setNeedsUpdateConstraints.


560
00:23:41,936 --> 00:23:44,716
And then we'll add a
coordinated animation


561
00:23:45,556 --> 00:23:48,336
by calling
addCoordinatedAnimations.


562
00:23:49,986 --> 00:23:54,636
And inside there, we'll
call layoutIfNeeded.


563
00:24:02,046 --> 00:24:04,946
And that'll be enough that
now when we build and run,


564
00:24:06,756 --> 00:24:11,846
we should see the label has
move down below out of the way


565
00:24:11,846 --> 00:24:13,946
of the focused poster.


566
00:24:14,626 --> 00:24:19,896
And when I move from one to
the other, they all animate


567
00:24:19,896 --> 00:24:22,406
out of the way and back
to where they should be.


568
00:24:23,416 --> 00:24:23,686
Great!


569
00:24:24,516 --> 00:24:29,936
[ Applause ]


570
00:24:30,436 --> 00:24:32,336
So remember, use
focusedFrameGuide


571
00:24:32,336 --> 00:24:33,596
and coordinatedAnimations.


572
00:24:33,596 --> 00:24:34,756
And don't forget to turn


573
00:24:34,756 --> 00:24:37,076
on adjustsImage
WhenAncestorFocused


574
00:24:37,076 --> 00:24:37,776
to get these effects.


575
00:24:37,806 --> 00:24:40,976
With that, back to Justin.


576
00:24:41,516 --> 00:24:45,586
[ Applause ]


577
00:24:46,086 --> 00:24:47,076
>> Thanks for that
awesome demo, Randy.


578
00:24:47,076 --> 00:24:49,496
So you can see how easy it
is to really take advantage


579
00:24:49,496 --> 00:24:51,186
of this unique user
interface element


580
00:24:51,186 --> 00:24:52,916
to really bring your
tvOS apps to life.


581
00:24:52,916 --> 00:24:55,456
All right, let's change
gears a little bit now


582
00:24:55,456 --> 00:24:56,756
and talk about scrolling.


583
00:24:57,296 --> 00:25:00,766
So scrolling on tvOS is a bit
different than scrolling on iOS.


584
00:25:00,826 --> 00:25:02,686
And it has to do with
those indirect touches.


585
00:25:03,296 --> 00:25:06,026
So when the user is scrolling
in ScrollView on iOS,


586
00:25:06,026 --> 00:25:07,576
they are physically
touching the ScrollView.


587
00:25:07,576 --> 00:25:09,766
And as they move their finger,
it will adjust the offset


588
00:25:09,766 --> 00:25:11,756
of the ScrollView to match
the motion of their finger.


589
00:25:12,436 --> 00:25:14,856
But that's not really
how it works on tvOS.


590
00:25:14,856 --> 00:25:16,846
On tvOS, you are not
touching the screen,


591
00:25:17,076 --> 00:25:19,246
but you are also not
manipulating the scroll


592
00:25:19,246 --> 00:25:19,936
views directly.


593
00:25:19,996 --> 00:25:21,616
What you are really doing is
you are changing what's the


594
00:25:21,616 --> 00:25:22,316
focused item.


595
00:25:22,736 --> 00:25:25,706
Then as the focus item changes,
the focus engine will detect


596
00:25:25,706 --> 00:25:28,196
that and it will automatically
scroll any scroll views


597
00:25:28,196 --> 00:25:30,416
as needed to make sure that
the focused view will always


598
00:25:30,416 --> 00:25:31,026
be onscreen.


599
00:25:33,756 --> 00:25:36,356
The focus engine will choose
the best offset that it can


600
00:25:36,356 --> 00:25:37,826
for you based on
the size of the view


601
00:25:37,826 --> 00:25:38,736
and the size of the ScrollView.


602
00:25:38,736 --> 00:25:40,886
But there are some times
where you want to take control


603
00:25:40,886 --> 00:25:42,906
of what offset that it's
going to send you to.


604
00:25:42,906 --> 00:25:45,416
So for example, one common
customization that people want


605
00:25:45,416 --> 00:25:47,926
to do is they want to that the
focused view is always centered


606
00:25:48,046 --> 00:25:49,056
within the bounds
of the ScrollView.


607
00:25:49,446 --> 00:25:50,616
And you can do that.


608
00:25:50,616 --> 00:25:51,516
And the way you can do that is


609
00:25:51,516 --> 00:25:53,986
with the UIScrollViewDelegate
method that you might recognize


610
00:25:53,986 --> 00:25:56,986
from iOS which is
scrollView WillEndDragging,


611
00:25:56,986 --> 00:25:59,026
withVelocity,
targetContentOffset.


612
00:25:59,556 --> 00:26:02,046
And the final parameter there,
the targetContentOffset,


613
00:26:02,046 --> 00:26:03,786
is a pointer to a CGPoint.


614
00:26:04,536 --> 00:26:07,086
And that point represents
the offset


615
00:26:07,086 --> 00:26:08,546
that the focus engine
will scroll you


616
00:26:08,546 --> 00:26:10,406
to if you don't do
anything else.


617
00:26:10,406 --> 00:26:12,256
That's the offset that it
shows for you automatically.


618
00:26:12,946 --> 00:26:15,526
But if you'd like to do your
own calculations and decide


619
00:26:15,526 --> 00:26:16,956
for yourself what you
want the scroll offset


620
00:26:16,956 --> 00:26:18,336
to be, you can do that.


621
00:26:18,336 --> 00:26:20,146
Make your calculation about
what offset you'd like,


622
00:26:20,376 --> 00:26:23,466
and then store the value
into the point that's pointed


623
00:26:23,466 --> 00:26:24,286
to you by that pointer.


624
00:26:24,286 --> 00:26:26,136
And then the focus engine
will scroll there instead.


625
00:26:26,216 --> 00:26:28,076
And you'll get all the great
system animations that come


626
00:26:28,076 --> 00:26:29,626
with that, but to
your selected offset.


627
00:26:31,476 --> 00:26:33,886
But it's not to say that direct
manipulation is always bad


628
00:26:33,886 --> 00:26:35,726
or is never a good idea on tvOS.


629
00:26:35,726 --> 00:26:38,206
There are some cases where
you'd want to do that.


630
00:26:38,206 --> 00:26:41,186
And so some of the situations
that call for that are things


631
00:26:41,186 --> 00:26:42,836
like you have a lot of
full-screen content.


632
00:26:42,906 --> 00:26:44,396
Maybe you have full-screen
photo gallery,


633
00:26:44,396 --> 00:26:46,556
where the photos go completely
to the edges of the screen.


634
00:26:47,136 --> 00:26:49,536
So one example from UIKit
is UIPageViewController.


635
00:26:49,816 --> 00:26:51,246
When you have a
UIPageViewController,


636
00:26:51,246 --> 00:26:52,536
it doesn't do the
focused scrolling.


637
00:26:52,536 --> 00:26:54,846
And instead, you are directly
manipulating the ScrollView


638
00:26:54,846 --> 00:26:56,126
content of the
PageViewController.


639
00:26:56,126 --> 00:26:58,916
There are other cases where you
have a lot of scrolling text.


640
00:26:58,916 --> 00:27:00,146
So it's another good
place where you might want


641
00:27:00,146 --> 00:27:01,156
to do direct manipulation.


642
00:27:01,506 --> 00:27:03,886
Basically, anytime where
it's not clear what ought


643
00:27:03,886 --> 00:27:06,546
to be the focused item,
and you wouldn't be able


644
00:27:06,546 --> 00:27:08,326
to see what the next
focused item would be,


645
00:27:08,646 --> 00:27:10,546
and those are good situations
to do direct manipulation.


646
00:27:10,936 --> 00:27:12,646
So if you want to do
that, you don't have


647
00:27:12,646 --> 00:27:14,346
to write your own
gesture handling code.


648
00:27:14,346 --> 00:27:15,676
You can reuse the pan gesture


649
00:27:15,676 --> 00:27:16,946
that already comes
on ScrollView.


650
00:27:17,596 --> 00:27:20,946
The trick is that scroll views
are configured to only listen


651
00:27:20,946 --> 00:27:22,806
for direct touches
out of the box.


652
00:27:23,276 --> 00:27:25,856
And the Siri remote is
generating indirect touched.


653
00:27:25,856 --> 00:27:27,986
So you just need to get
this pan gesture recognizer


654
00:27:27,986 --> 00:27:31,386
and convince it to listen
to indirect touches.


655
00:27:31,386 --> 00:27:33,916
We also have a directional
press gesture recognizer,


656
00:27:33,916 --> 00:27:35,546
which is only on
ScrollView on tvOS.


657
00:27:35,546 --> 00:27:37,506
And this is listening for
those arrow button presses.


658
00:27:37,836 --> 00:27:39,996
So that way a user who
is not using a device


659
00:27:39,996 --> 00:27:42,896
that he can do touch input
can also scroll ScrollViews.


660
00:27:42,946 --> 00:27:44,866
And this gesture is
disabled by default


661
00:27:44,866 --> 00:27:46,726
because we would rather have
this arrow presses manipulate


662
00:27:46,726 --> 00:27:48,846
focus instead of manipulating
the ScrollView offset.


663
00:27:48,846 --> 00:27:49,726
So you'll have to enable it.


664
00:27:49,726 --> 00:27:52,016
And this is the code
that you can use


665
00:27:52,016 --> 00:27:52,966
to do both of those things.


666
00:27:53,356 --> 00:27:54,526
So we are getting


667
00:27:54,526 --> 00:27:56,106
to panGestureRecognizer
from the ScrollView.


668
00:27:56,106 --> 00:27:57,346
And we are telling it that we'd


669
00:27:57,346 --> 00:27:58,626
like to listen for
indirect touches.


670
00:27:58,726 --> 00:28:00,076
And we are getting


671
00:28:00,076 --> 00:28:01,496
that directionalPressGesture
Recognizer,


672
00:28:01,496 --> 00:28:02,936
and we are telling it
that it should be enabled.


673
00:28:02,936 --> 00:28:06,056
And if you do this, then all
of those events that come


674
00:28:06,056 --> 00:28:09,176
into the ScrollView will
directly manipulate the offset


675
00:28:09,176 --> 00:28:09,666
of the ScrollView.


676
00:28:09,726 --> 00:28:11,406
And it's actually possible


677
00:28:11,406 --> 00:28:14,056
to combine this direct
manipulation technique


678
00:28:14,056 --> 00:28:15,466
and the focus interaction
technique.


679
00:28:15,616 --> 00:28:16,796
And to show you how
you can do that,


680
00:28:16,796 --> 00:28:19,296
I'd like to invite Kevin
onstage to give you a demo.


681
00:28:20,206 --> 00:28:20,546
Kevin [applause]?


682
00:28:22,226 --> 00:28:22,986
>> Thanks Justin.


683
00:28:24,776 --> 00:28:28,186
Hi. I'm Kevin Hiscott, and
I'm an engineer on tvOS.


684
00:28:28,186 --> 00:28:30,546
We are going to look at
a sample view controller


685
00:28:30,936 --> 00:28:33,926
that presents terms and
conditions text in a text view.


686
00:28:34,866 --> 00:28:37,096
TextView is a subclass
of ScrollView.


687
00:28:37,096 --> 00:28:41,226
So we can take a look at how to
add direct manipulation to it.


688
00:28:44,206 --> 00:28:45,666
Let's head over to
my ZIB [phonetic]


689
00:28:45,666 --> 00:28:46,936
and see what I have
set up so far.


690
00:28:47,136 --> 00:28:50,676
I have a text view with very
lengthy lower mid sub [phonetic]


691
00:28:50,676 --> 00:28:51,396
pasted into it.


692
00:28:52,656 --> 00:28:55,746
And if we go into our
application, we can see what


693
00:28:55,746 --> 00:28:57,646
that looks like in
the app context.


694
00:28:57,646 --> 00:29:00,646
When I present my
ViewController,


695
00:29:00,756 --> 00:29:02,396
we can see along the bottom edge


696
00:29:02,506 --> 00:29:03,936
that the text is
actually clipped.


697
00:29:04,336 --> 00:29:06,246
And if I try swiping
the Siri remote,


698
00:29:06,556 --> 00:29:07,846
the text does not scroll.


699
00:29:08,466 --> 00:29:09,946
Well let's go improve that.


700
00:29:11,506 --> 00:29:13,376
Let's head over to
my ViewController.


701
00:29:13,376 --> 00:29:14,566
And in viewDidLoad we are going


702
00:29:14,566 --> 00:29:17,486
to grab the outlet I have
created to that UITextView.


703
00:29:17,486 --> 00:29:19,896
I have called it
messageTextView.


704
00:29:20,896 --> 00:29:23,166
And on messageTextView
and any ScrollView,


705
00:29:23,166 --> 00:29:24,576
there is a panGestureRecognizer.


706
00:29:24,576 --> 00:29:26,816
And we are going to change
its allowed touch types


707
00:29:26,816 --> 00:29:28,556
to include the indirect
touch type.


708
00:29:29,276 --> 00:29:31,696
As Justin mentioned, those
are the touches created


709
00:29:31,696 --> 00:29:32,516
by the Siri remote.


710
00:29:33,836 --> 00:29:37,256
The second thing we are going to
do is set isSelectable to true.


711
00:29:37,586 --> 00:29:40,976
This will allow the text view to
be focused, to become focused,


712
00:29:41,076 --> 00:29:42,066
and receive these events.


713
00:29:42,486 --> 00:29:44,006
Let's build and run
and see how this works.


714
00:29:52,306 --> 00:29:53,896
Now when I present
my ViewController,


715
00:29:53,966 --> 00:29:57,806
I am actually able to directly
swipe to scroll the text up


716
00:29:57,806 --> 00:29:58,956
and down with the Siri remote.


717
00:29:59,456 --> 00:30:01,006
Great direct manipulation.


718
00:30:01,996 --> 00:30:03,356
The other thing any good terms


719
00:30:03,356 --> 00:30:06,416
and conditions ViewController
needs is a way for the user


720
00:30:06,416 --> 00:30:09,386
to either accept or
reject your conditions.


721
00:30:10,126 --> 00:30:13,846
So to do that, let's head
over to my ZIB and drag


722
00:30:13,846 --> 00:30:14,776
in a couple of buttons.


723
00:30:14,776 --> 00:30:21,806
I am going to label one Disagree
and the other one Agree.


724
00:30:23,696 --> 00:30:25,926
Let's build and run
and see what happens.


725
00:30:25,926 --> 00:30:30,216
What I hope to happen is for
our focus to move horizontally


726
00:30:30,216 --> 00:30:32,746
with horizontal swipes,
and for vertical swipes


727
00:30:32,746 --> 00:30:34,106
to still scroll the text view.


728
00:30:34,986 --> 00:30:37,806
However, when I present my
ViewController I can see


729
00:30:37,806 --> 00:30:42,026
that vertical swipes does
move the text; however,


730
00:30:42,026 --> 00:30:44,346
if I swipe too far down,
focus actually moves


731
00:30:44,346 --> 00:30:47,236
down into the buttons, and I
can no longer scroll my text


732
00:30:47,306 --> 00:30:49,326
until focus moves back
into the text view.


733
00:30:50,156 --> 00:30:52,606
This isn't exactly the
behavior I was looking for.


734
00:30:52,606 --> 00:30:55,496
Let's head back to
my ViewController.


735
00:30:55,496 --> 00:30:57,846
And we are going to
disable isSelectable.


736
00:30:58,276 --> 00:31:00,686
We don't actually
want the TextView


737
00:31:00,686 --> 00:31:02,686
to be a focusable
element onscreen.


738
00:31:03,476 --> 00:31:05,066
Instead, I am going to
show you a little trick.


739
00:31:05,226 --> 00:31:08,226
We are going to grab
the panGestureRecognizer


740
00:31:08,226 --> 00:31:12,176
and actually add it to our
ViewController's view instead.


741
00:31:12,626 --> 00:31:15,746
This will allow the message
TextView to receive events


742
00:31:15,746 --> 00:31:17,246
without being focusable itself.


743
00:31:18,426 --> 00:31:19,976
Let's build and run
and see how it behaves.


744
00:31:26,056 --> 00:31:27,536
Now when I present
my ViewController,


745
00:31:28,736 --> 00:31:31,116
we can see that the
Disagree button immediately


746
00:31:31,116 --> 00:31:31,996
becomes focused.


747
00:31:32,216 --> 00:31:34,826
And that's because the text
view is no longer focusable.


748
00:31:34,916 --> 00:31:38,306
I can swipe the Siri remote
left and right to move focus.


749
00:31:38,306 --> 00:31:41,616
But any time I can swipe up
and down to move the text.


750
00:31:42,266 --> 00:31:44,076
Great this is looking
really good.


751
00:31:44,076 --> 00:31:46,366
The last thing we
need to consider


752
00:31:46,366 --> 00:31:49,926
on tvOS are directional
press type events generated


753
00:31:49,926 --> 00:31:52,426
by other input methods
like game controllers,


754
00:31:52,596 --> 00:31:54,516
keyboards, or IR remotes.


755
00:31:54,516 --> 00:31:57,726
And we make this really
easy to support on tvOS.


756
00:31:58,036 --> 00:32:00,526
Let's head back to my view
controller, and we are going


757
00:32:00,526 --> 00:32:02,616
to grab the
directionalPressGesture


758
00:32:02,616 --> 00:32:05,336
Recognizer from our
messageTextView and enable it.


759
00:32:05,826 --> 00:32:08,086
This will allow scrolling
to occur


760
00:32:08,086 --> 00:32:10,556
with those press types generated
on those other devices.


761
00:32:11,656 --> 00:32:14,126
The last thing we are
going to do is move


762
00:32:14,126 --> 00:32:17,136
that GestureRecognizer onto our
own view, just as we did before.


763
00:32:17,176 --> 00:32:21,766
Let's build and run and see
how this all comes together.


764
00:32:25,656 --> 00:32:27,416
Now when I present my
terms and conditions,


765
00:32:27,806 --> 00:32:30,616
I can both swipe left
and right to move focus,


766
00:32:30,776 --> 00:32:34,216
but I can also tap left
and right to move focus


767
00:32:34,566 --> 00:32:36,706
with the directional press
type events generated


768
00:32:36,706 --> 00:32:39,196
on the Siri remote and
all the other devices.


769
00:32:39,296 --> 00:32:43,716
I can swipe up and down to
change the content offset,


770
00:32:43,716 --> 00:32:46,636
but I can also tap up and
down to incrementally scroll.


771
00:32:47,336 --> 00:32:49,756
Great! This is a
fully functional terms


772
00:32:49,756 --> 00:32:51,716
and conditions ViewController
for tvOS.


773
00:32:52,456 --> 00:32:53,576
Thanks so much for your time.


774
00:32:53,576 --> 00:32:55,196
And I can't wait to
accept all the terms


775
00:32:55,196 --> 00:32:56,426
and conditions in your apps.


776
00:32:56,816 --> 00:32:57,556
Back to Justin [applause].


777
00:33:00,046 --> 00:33:00,426
>> All right, let's move


778
00:33:00,426 --> 00:33:02,356
on to our final topic,
which is text input.


779
00:33:03,146 --> 00:33:05,736
So we have this great
system keyboard on tvOS.


780
00:33:05,846 --> 00:33:08,786
And there is a lot of features
that are only available


781
00:33:08,786 --> 00:33:10,196
if you are using
the system keyboard.


782
00:33:10,196 --> 00:33:11,996
I want to go through just
a few of them for you.


783
00:33:12,586 --> 00:33:14,086
One of them is dictation.


784
00:33:14,306 --> 00:33:16,756
So the user can just
speak into the Siri remote


785
00:33:16,756 --> 00:33:18,096
and their words will
show up on the screen.


786
00:33:19,306 --> 00:33:20,676
We also support Bluetooth
keyboards.


787
00:33:20,676 --> 00:33:21,826
So if you pair it with
a Bluetooth keyboard,


788
00:33:21,826 --> 00:33:22,676
and you just type
right on there.


789
00:33:23,316 --> 00:33:25,606
We have the new Apple
TV Remote app


790
00:33:25,606 --> 00:33:27,896
so that users can pair
their phone with their TV


791
00:33:27,896 --> 00:33:29,616
and they can type right
on their phone's keyboard


792
00:33:29,746 --> 00:33:30,956
to send text to the TV.


793
00:33:31,416 --> 00:33:32,616
There is also a lot


794
00:33:32,616 --> 00:33:35,196
of localization details the
system keyboard takes care


795
00:33:35,196 --> 00:33:35,626
of for you.


796
00:33:36,576 --> 00:33:38,926
And it also automatically
changes its layout based


797
00:33:38,926 --> 00:33:40,406
on the input device
the user is using.


798
00:33:40,976 --> 00:33:42,316
So there is the linear layout


799
00:33:42,316 --> 00:33:43,626
that you are probably
most familiar with,


800
00:33:43,626 --> 00:33:45,376
but there is also a grid
layout that we'll use


801
00:33:45,376 --> 00:33:47,346
if there is no Siri
remote paired with the TV.


802
00:33:47,346 --> 00:33:50,186
These are a lot of great
features that are only available


803
00:33:50,186 --> 00:33:51,246
in the system keyboard.


804
00:33:51,246 --> 00:33:53,116
And if you are not using
the system keyboard,


805
00:33:53,116 --> 00:33:55,666
then users won't be able to take
advantage of these features.


806
00:33:56,156 --> 00:33:59,196
So we discourage you from trying
to roll your own keyboard.


807
00:33:59,196 --> 00:34:00,506
Really stick to the
system keyboard


808
00:34:00,506 --> 00:34:02,456
so that users can enjoy
all these great features


809
00:34:02,456 --> 00:34:03,836
that are only available
through the system one.


810
00:34:04,216 --> 00:34:07,036
Now there are some ways that
you can customer the built-in


811
00:34:07,036 --> 00:34:07,776
system keyboard.


812
00:34:08,246 --> 00:34:10,126
And one way that you can
customize it is to add some


813
00:34:10,126 --> 00:34:11,585
of your own views
to the keyboard


814
00:34:11,585 --> 00:34:12,795
that will appear
alongside of it.


815
00:34:12,795 --> 00:34:15,686
And you can use some API
that's on UIResponder


816
00:34:15,686 --> 00:34:17,136
that you might recognize
from iOS.


817
00:34:17,136 --> 00:34:19,056
There is the inputAccessoryView


818
00:34:19,056 --> 00:34:20,906
and the inputAccessory
ViewController.


819
00:34:20,906 --> 00:34:23,326
And if you assign to these
properties on the text fields


820
00:34:23,326 --> 00:34:24,996
that you are wanting
to edit text in,


821
00:34:25,326 --> 00:34:27,396
then when the keyboard
appears you can show some


822
00:34:27,396 --> 00:34:29,246
of your own views right
there alongside the keyboard.


823
00:34:29,246 --> 00:34:31,226
And I'll show you a screenshot
of that here in just a second.


824
00:34:32,456 --> 00:34:34,076
And finally, I want to
point out one change


825
00:34:34,076 --> 00:34:37,016
in behavior that's happened
between tvOS 9 and tvOS 10.


826
00:34:37,456 --> 00:34:40,376
UITextField has this property
called keyboardAppearance,


827
00:34:40,376 --> 00:34:42,346
and you can set to
unspecified light or dark.


828
00:34:42,606 --> 00:34:45,616
And on tvOS 9, if you
set it, say, to dark,


829
00:34:45,906 --> 00:34:47,966
then not only would the
keyboard itself be dark


830
00:34:47,966 --> 00:34:50,646
when it presents itself, but the
text field would also be dark


831
00:34:50,646 --> 00:34:51,815
as it's sitting there
on the screen.


832
00:34:52,545 --> 00:34:54,896
Well now in tvOS 10 we have
this new appearance API.


833
00:34:54,896 --> 00:34:57,596
And so the entire system can
respond to light or to dark.


834
00:34:57,876 --> 00:35:00,226
And so now what we
do on tvOS 10 is


835
00:35:00,226 --> 00:35:02,466
that this keyboard appearance
property will only affect the


836
00:35:02,466 --> 00:35:04,246
keyboard, and the appearance


837
00:35:04,246 --> 00:35:05,846
of the text field
will now be dictated


838
00:35:05,846 --> 00:35:08,476
by the larger tray
collection in UPI.


839
00:35:09,306 --> 00:35:10,986
Okay, so here's the
screen shot I promised you.


840
00:35:10,986 --> 00:35:14,036
So in this case I have created
just a regular text field,


841
00:35:14,036 --> 00:35:15,536
and I gave it an
inputAccessoryView.


842
00:35:15,536 --> 00:35:17,556
And I put a red border on it
so you can see where it is.


843
00:35:17,896 --> 00:35:20,366
And those UI labels in there
are there are totally custom.


844
00:35:20,366 --> 00:35:22,476
And I just put them in there
so you can add any kind


845
00:35:22,476 --> 00:35:23,586
of accessory views that you'd


846
00:35:23,586 --> 00:35:24,996
like that could appear
right above the keyboard.


847
00:35:26,776 --> 00:35:29,246
Now another great way that
you can get UI on the screen


848
00:35:29,246 --> 00:35:31,236
at the same time as the keyboard
is to use SearchController.


849
00:35:31,496 --> 00:35:33,996
And you use some APIs you
also might recognize from iOS,


850
00:35:33,996 --> 00:35:35,246
and that's UISearchController.


851
00:35:35,676 --> 00:35:40,406
So we have the keyboard, and the
search results appear below it.


852
00:35:40,726 --> 00:35:42,876
And this also automatically
adapts.


853
00:35:42,876 --> 00:35:45,116
There is a grid-based layout and
a linear-based layout depending


854
00:35:45,116 --> 00:35:46,556
on the input device
the user is using.


855
00:35:46,896 --> 00:35:48,606
And you can even
embed this inside


856
00:35:48,606 --> 00:35:49,456
of other view controllers.


857
00:35:49,456 --> 00:35:51,776
SearchController usually wants
to be presented modally and take


858
00:35:51,776 --> 00:35:52,566
over the whole screen.


859
00:35:52,876 --> 00:35:54,726
But you can embed it
inside of another search --


860
00:35:54,726 --> 00:35:57,496
another view controller
by using UISearchContainer


861
00:35:57,496 --> 00:35:58,006
ViewController.


862
00:35:58,006 --> 00:35:59,926
And I'll show you a code sample
of that, just a few slides.


863
00:36:00,176 --> 00:36:04,206
You provide your own custom view
controller for search results.


864
00:36:04,236 --> 00:36:06,576
So the visual appearance
of the search results


865
00:36:06,576 --> 00:36:08,146
and the interaction of them
is completely up to you.


866
00:36:08,146 --> 00:36:09,196
You can do whatever you want.


867
00:36:09,196 --> 00:36:11,516
You might use a collection view,
or maybe you'll use a split view


868
00:36:11,516 --> 00:36:13,066
that has a table view and a
collection view if you want.


869
00:36:13,266 --> 00:36:14,146
Any other things you'd like --


870
00:36:14,146 --> 00:36:15,646
it's totally up to you
for that view controller.


871
00:36:17,696 --> 00:36:18,786
So here's a quick sample


872
00:36:18,786 --> 00:36:21,386
of how you might embed a
search controller inside


873
00:36:21,386 --> 00:36:23,006
of something else like,
say, a tab bar controller.


874
00:36:23,006 --> 00:36:25,166
So I have got my custom
ViewController class here.


875
00:36:26,046 --> 00:36:29,126
And in viewDidAppear I am going
to create a searchController.


876
00:36:29,126 --> 00:36:30,766
I want to make sure I don't do
this twice, so I am checking


877
00:36:30,766 --> 00:36:32,016
to make sure I haven't
done this already.


878
00:36:32,516 --> 00:36:35,316
Then I am creating
my UISearchController


879
00:36:35,316 --> 00:36:38,066
and telling it view controller
to use for my results and who


880
00:36:38,066 --> 00:36:39,816
to contact as the
search query changes.


881
00:36:40,486 --> 00:36:42,216
Then I am going to
wrap that inside


882
00:36:42,216 --> 00:36:44,246
of this UISearchContainer
ViewController.


883
00:36:44,246 --> 00:36:46,126
And this allows me now
to take this container,


884
00:36:46,286 --> 00:36:48,436
and I can do regular
ViewController containment


885
00:36:48,436 --> 00:36:48,686
on it.


886
00:36:48,726 --> 00:36:50,946
And then I am going to add
it as a ChildViewController.


887
00:36:50,946 --> 00:36:53,116
And if you do something like
this, then you'll be able


888
00:36:53,116 --> 00:36:55,626
to easily use a search
controller inside of a tab bar,


889
00:36:55,786 --> 00:36:59,276
much like some of the
system apps on tvOS.


890
00:36:59,666 --> 00:37:01,176
And that is text input.


891
00:37:01,556 --> 00:37:03,586
So in summary, one of the
things that we want you


892
00:37:03,586 --> 00:37:04,466
to take away from this talk.


893
00:37:04,856 --> 00:37:07,706
First one is, when you are
doing Menu button handling,


894
00:37:07,806 --> 00:37:08,256
be careful.


895
00:37:08,256 --> 00:37:09,766
Keep in mind that you
don't want to interfere


896
00:37:09,766 --> 00:37:11,406
with the system gestures.


897
00:37:11,776 --> 00:37:14,936
When you are working with
layered images, take advantage


898
00:37:14,936 --> 00:37:16,626
of the layout guides
that we have given you


899
00:37:16,626 --> 00:37:18,816
and the coordinated
animation API to make sure


900
00:37:18,816 --> 00:37:21,046
that your views can
move around in tandem


901
00:37:21,096 --> 00:37:22,146
with the system animations.


902
00:37:23,656 --> 00:37:25,096
If you want to do
direct manipulation


903
00:37:25,096 --> 00:37:26,606
on ScrollViews you
don't have to do any


904
00:37:26,606 --> 00:37:27,696
of that handling code yourself.


905
00:37:27,696 --> 00:37:30,136
Just reuse the pan gestures
that already come built in.


906
00:37:30,616 --> 00:37:33,836
And finally, take advantage of
the system keyboard to make sure


907
00:37:33,836 --> 00:37:35,766
that your users are getting
all the features they can


908
00:37:35,766 --> 00:37:36,806
when it comes to text input.


909
00:37:37,526 --> 00:37:39,196
So for more information
about this talk,


910
00:37:39,196 --> 00:37:40,126
you can visit this URL,


911
00:37:40,126 --> 00:37:41,506
where you'll find
links to documentation.


912
00:37:41,506 --> 00:37:43,576
We have got a bunch
of other sessions


913
00:37:43,576 --> 00:37:44,826
that are coming up this week.


914
00:37:44,826 --> 00:37:46,176
I want to call up two
of them in particular


915
00:37:46,176 --> 00:37:48,186
that are both about
UIKit on tvOS.


916
00:37:48,186 --> 00:37:49,836
So have a great rest
of the conference.


917
00:37:49,836 --> 00:37:50,136
Thank you.


918
00:37:51,508 --> 00:37:53,508
[ Applause ]

