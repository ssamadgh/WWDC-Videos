1
00:00:00,506 --> 00:00:09,516
[ Silence ]


2
00:00:10,016 --> 00:00:14,000
[ Applause ]


3
00:00:15,056 --> 00:00:17,156
>> So many people,
this is awesome.


4
00:00:17,156 --> 00:00:19,376
Thank you very much
for coming out.


5
00:00:19,376 --> 00:00:21,806
So, it's Friday, as
you probably noticed.


6
00:00:22,366 --> 00:00:25,096
And, you know, 'cause
it's Friday,


7
00:00:25,096 --> 00:00:26,796
we thought we'd do
something a little different,


8
00:00:26,796 --> 00:00:28,446
have a little fun.


9
00:00:28,446 --> 00:00:30,806
You all got the note that today
is Audience Participation Day.


10
00:00:30,806 --> 00:00:32,146
Did you saw it in your--
I just made that up.


11
00:00:32,466 --> 00:00:34,146
But, no, seriously,
audience participation.


12
00:00:34,616 --> 00:00:36,776
So the first thing,
if you'd help me out--


13
00:00:36,776 --> 00:00:38,216
by the way, my name
is Scott Stevenson.


14
00:00:38,306 --> 00:00:39,226
I work in Apple Engineering.


15
00:00:39,746 --> 00:00:43,466
Thank you.


16
00:00:43,466 --> 00:00:46,106
So, if you would help me
out, just by show hands,


17
00:00:46,106 --> 00:00:48,696
how many people here today
consider themselves sort


18
00:00:48,696 --> 00:00:51,016
of beginner, just getting
started with iOS or OS X?


19
00:00:52,026 --> 00:00:53,146
No beginners, really?


20
00:00:54,066 --> 00:00:55,436
Two, three, OK, all right.


21
00:00:55,436 --> 00:00:57,856
We're going to see-- you
think you're really good,


22
00:00:58,286 --> 00:00:59,256
but we'll see.


23
00:00:59,256 --> 00:01:00,726
So-- And who considers
themselves sort


24
00:01:00,726 --> 00:01:01,306
of like intermediate,


25
00:01:01,306 --> 00:01:03,006
like pretty good but
not total expert?


26
00:01:03,006 --> 00:01:04,266
Wow, OK, all right.


27
00:01:04,266 --> 00:01:05,536
See now, we're being honest, OK.


28
00:01:06,266 --> 00:01:07,336
What about like total expert,


29
00:01:07,336 --> 00:01:09,066
like people there's no way
you're going to learn something,


30
00:01:09,066 --> 00:01:10,476
you're just here to like
heckle the other guys?


31
00:01:11,626 --> 00:01:12,736
OK, all right.


32
00:01:12,736 --> 00:01:14,046
So you guys are going
to learn something.


33
00:01:14,046 --> 00:01:15,676
So, here's my-- here's the deal.


34
00:01:17,026 --> 00:01:19,406
My goal is to make sure every
single person in here learns


35
00:01:19,406 --> 00:01:20,716
at least a few awesome things.


36
00:01:21,366 --> 00:01:24,416
And the AMB guys and the
first two groups, you guys--


37
00:01:24,416 --> 00:01:25,586
your job is to watch
the other guys.


38
00:01:25,586 --> 00:01:28,316
And if they learn something,
'cause I'm going to check later,


39
00:01:28,316 --> 00:01:31,516
then I want to hear about it.


40
00:01:31,766 --> 00:01:34,646
So, the first thing
I want to say here


41
00:01:34,646 --> 00:01:37,426
at the beginning is how many of
you know about NSHipster.com?


42
00:01:37,426 --> 00:01:43,446
OK, yeah. So right, so you
guys know the deal with this.


43
00:01:43,446 --> 00:01:46,616
But just in case you don't, the
thing here is that the author,


44
00:01:46,616 --> 00:01:48,696
Mattt Thompson, what he
does is he goes out--


45
00:01:48,696 --> 00:01:50,936
and of course, Cocoa and
Cocoa Touch are these really


46
00:01:50,936 --> 00:01:54,656
like expensive rich frameworks
with so many things available,


47
00:01:54,996 --> 00:01:57,456
and you're-- it's likely that
because there's so much stuff,


48
00:01:57,456 --> 00:01:59,256
you're actually going to
miss some really cool things.


49
00:01:59,256 --> 00:02:01,956
So, what Mattt does, he's
been doing this for a while,


50
00:02:01,956 --> 00:02:04,836
he goes out and digs up
these really, you know,


51
00:02:04,836 --> 00:02:07,396
amazing gems hidden in Cocoa
and Cocoa Touch and brings them


52
00:02:07,396 --> 00:02:08,496
to the surface and says, "Hey,


53
00:02:08,496 --> 00:02:10,246
you guys really should be using
this 'cause it's awesome."


54
00:02:10,916 --> 00:02:14,296
So we ran across the site and we
said, "Well, this is super cool.


55
00:02:14,296 --> 00:02:16,026
Let's do a session on this,"
you know, 'cause that seems


56
00:02:16,026 --> 00:02:16,816
like a really good idea.


57
00:02:17,316 --> 00:02:19,476
And so, we called Mattt
and we're like, you know,


58
00:02:19,476 --> 00:02:22,466
"Would you want to come up
WWDC and talk about it?"


59
00:02:22,466 --> 00:02:23,666
He's like, "Sure,
that sounds good."


60
00:02:23,666 --> 00:02:25,636
So we actually brought him
today and I'm going to bring him


61
00:02:25,636 --> 00:02:27,516
up in a little bit, but
I just want to call this


62
00:02:27,516 --> 00:02:28,496
out in the beginning
and just, you know,


63
00:02:28,496 --> 00:02:30,776
give credit where credit's
due that this is sort of based


64
00:02:30,776 --> 00:02:31,536
on something Mattt did.


65
00:02:32,076 --> 00:02:35,166
So, we have 30 tips.


66
00:02:35,696 --> 00:02:37,806
So remember the expert folks
that appears you're not going


67
00:02:37,806 --> 00:02:39,266
to learn anything,
remember below of averages,


68
00:02:39,466 --> 00:02:40,886
pretty good chance you're
going to learn something


69
00:02:41,366 --> 00:02:42,996
and you're going to see
them counted down as we go.


70
00:02:42,996 --> 00:02:45,816
So, here's the little
map here that we did.


71
00:02:45,936 --> 00:02:48,796
We have a graphics
team as you can tell.


72
00:02:48,796 --> 00:02:50,806
And-- So we're going to cover a
bunch of different frameworks.


73
00:02:50,806 --> 00:02:52,776
We're going to start at Xcode,
Objective-C, and then kind


74
00:02:52,776 --> 00:02:54,716
of work our way up to
the different levels.


75
00:02:54,716 --> 00:02:56,456
And we'll eventually end up on--


76
00:02:56,456 --> 00:02:58,146
I guess that's like
AppKit Peninsula


77
00:02:58,146 --> 00:02:58,856
or something like that.


78
00:02:59,226 --> 00:03:02,316
So let's start with Xcode and
we're going to focus on editing


79
00:03:02,316 --> 00:03:03,166
and debugging to start.


80
00:03:03,166 --> 00:03:06,646
And we're going to kind of start
with some more basic things


81
00:03:06,646 --> 00:03:08,176
and work our way up
to the advanced stuff.


82
00:03:08,636 --> 00:03:11,876
So to start, if I can get the
clicker to work, there we go.


83
00:03:11,876 --> 00:03:13,966
So, I'm sure a lot of you
are familiar with the feature


84
00:03:13,966 --> 00:03:16,666
in Xcode called Open
Quickly, and you just bring it


85
00:03:16,666 --> 00:03:18,046
up by going to the File menu


86
00:03:18,046 --> 00:03:19,476
and choosing Open
Quickly of all things.


87
00:03:20,106 --> 00:03:21,776
And you can also just
hit Command-Shift-O.


88
00:03:22,376 --> 00:03:23,796
And what happens
is you choose that


89
00:03:23,796 --> 00:03:25,006
and you see a window
like this pop.


90
00:03:25,006 --> 00:03:26,696
This is Xcode 4, of
course, so, you know,


91
00:03:26,696 --> 00:03:28,266
it looks a little
different than Xcode 5.


92
00:03:28,486 --> 00:03:30,576
But this window comes up
and then you just go ahead


93
00:03:30,576 --> 00:03:31,556
and start typing something.


94
00:03:31,556 --> 00:03:33,046
And what Xcode is going to
do is it's going to look


95
00:03:33,046 --> 00:03:35,266
across all the code in your
project and all the frameworks


96
00:03:35,266 --> 00:03:36,906
that you brought in,
and it's just going


97
00:03:36,906 --> 00:03:38,266
to start live filtering results.


98
00:03:38,266 --> 00:03:39,696
And I'm sure a lot of
you are actually familiar


99
00:03:39,696 --> 00:03:40,186
with this feature.


100
00:03:40,186 --> 00:03:42,086
If you're not using this, you
definitely should be using this


101
00:03:42,086 --> 00:03:44,306
because compared to like
Project Search where you have


102
00:03:44,306 --> 00:03:46,766
to type something and look at
the long list result and say,


103
00:03:46,766 --> 00:03:47,886
"Ah-ah, that wasn't
quite what I wanted.


104
00:03:47,886 --> 00:03:49,036
Let me delete it
and do it again,"


105
00:03:49,626 --> 00:03:51,206
you're live filtering
stuff in Open Quickly.


106
00:03:51,206 --> 00:03:53,386
So you should be using this
like all the time, all day.


107
00:03:54,106 --> 00:03:55,306
But the thing you
may not know is


108
00:03:55,306 --> 00:03:56,926
that it's actually
pretty incredibly smart


109
00:03:57,066 --> 00:03:58,476
for what you're searching for.


110
00:03:58,476 --> 00:04:02,916
So, in this example on screen,
I've typed coretextctpar,


111
00:04:02,916 --> 00:04:04,966
and Open Quickly is
smart to say, "You know,


112
00:04:04,966 --> 00:04:07,956
I think what you actually meant
was the CTParagraphStyle header


113
00:04:08,196 --> 00:04:10,116
in CoreText," so
it splits that up.


114
00:04:10,116 --> 00:04:14,706
So, another example is you
can type in abbreviations.


115
00:04:14,706 --> 00:04:19,366
So you can type in UK/UIVC,
and again Open Quickly is like,


116
00:04:19,366 --> 00:04:21,276
"You know what, I'm pretty
sure what you actually meant


117
00:04:21,276 --> 00:04:22,156
was UIViewController."


118
00:04:22,156 --> 00:04:23,606
So, it's going to go
ahead and highlight that.


119
00:04:23,606 --> 00:04:25,156
There's other options,
but that's the one


120
00:04:25,156 --> 00:04:28,056
that pops up to the top.


121
00:04:28,056 --> 00:04:31,216
Next tip-- by the way, since
we have 30 tips, we've got just


122
00:04:31,216 --> 00:04:32,846
about an hour, I'm going to
have to race through this


123
00:04:32,846 --> 00:04:33,576
in case that's not clear.


124
00:04:33,576 --> 00:04:36,896
So next tip, this is
one of these things


125
00:04:36,896 --> 00:04:39,426
that I see my coworkers
everyday using


126
00:04:39,426 --> 00:04:41,076
and every time I see
them using, I'm like,


127
00:04:41,076 --> 00:04:42,176
"Why am I not using this?


128
00:04:42,176 --> 00:04:44,646
This is so useful," and
that I'm just wasting time.


129
00:04:44,646 --> 00:04:46,086
They're like done and
I'm like going to lunch.


130
00:04:46,376 --> 00:04:49,436
So, all you have to do is in
the upper left hand corner


131
00:04:49,566 --> 00:04:52,046
of the Xcode Editor pane,
there's this tiny little,


132
00:04:52,476 --> 00:04:54,656
really not super obvious button


133
00:04:54,656 --> 00:04:56,816
but incredibly useful
called Related Files.


134
00:04:56,816 --> 00:04:59,816
So if you click on it, it
pops up and shows you files


135
00:04:59,816 --> 00:05:01,316
that are related to the
cluster you're currently working


136
00:05:01,316 --> 00:05:03,806
on which is a great thing for--
to you based on what I'm saying.


137
00:05:03,806 --> 00:05:07,446
It shows you Subclasses,
Superclasses, Categories,


138
00:05:07,716 --> 00:05:09,746
and one of the most
useful items actually


139
00:05:09,746 --> 00:05:11,326
in here is the Callers
and Callees.


140
00:05:11,646 --> 00:05:14,836
So, other classes that
are calling this class


141
00:05:15,076 --> 00:05:17,386
and other classes you
call are actually listed


142
00:05:17,386 --> 00:05:18,096
in that menu item.


143
00:05:18,096 --> 00:05:20,096
So you should always be
using this all the time,


144
00:05:20,566 --> 00:05:22,476
[inaudible] thing here
so I remember to use it


145
00:05:22,476 --> 00:05:25,086
so I'm not wasting so much time.


146
00:05:25,286 --> 00:05:27,656
Next trick-- and this honestly
is another one of these things


147
00:05:27,656 --> 00:05:29,226
where I wish I'm really
just putting this here


148
00:05:29,226 --> 00:05:30,026
so I remember to use it.


149
00:05:30,356 --> 00:05:31,716
So a lot of times what happens


150
00:05:31,946 --> 00:05:34,186
when I'm debugging something
is I'll get kind of halfway


151
00:05:34,186 --> 00:05:36,936
through my debugging session
and I'll be thinking, "Boy,


152
00:05:36,996 --> 00:05:39,316
if I got just one thing I need
to actually have here to help me


153
00:05:39,316 --> 00:05:41,956
through this problem," and
so I'll like typing in NSLog


154
00:05:41,956 --> 00:05:43,946
and stop and recompile,
and then I'll be like,


155
00:05:43,946 --> 00:05:45,976
"Why didn't I use Breakpoint
Actions 'cause this is


156
00:05:45,976 --> 00:05:46,676
so much better?"


157
00:05:47,186 --> 00:05:49,506
So all you need to do to
use Breakpoint Action is go


158
00:05:49,506 --> 00:05:50,616
to the line of code
where you need


159
00:05:50,616 --> 00:05:52,706
to log some additional
information,


160
00:05:53,256 --> 00:05:54,286
just pop in a breakpoint.


161
00:05:54,286 --> 00:05:56,106
And if you right click
on the breakpoint,


162
00:05:56,426 --> 00:05:58,826
it will pop up this popover.


163
00:05:58,826 --> 00:06:00,696
You can do a bunch of things
with this just pop over,


164
00:06:00,696 --> 00:06:02,216
but the one thing I just
want to highlight here is


165
00:06:02,216 --> 00:06:04,006
that you can actually
just add a log message.


166
00:06:04,006 --> 00:06:05,636
So, just use Log Message,


167
00:06:05,636 --> 00:06:07,316
type in whatever the format
string is that you want.


168
00:06:07,316 --> 00:06:09,036
And you can actually do
some pretty cools things


169
00:06:09,036 --> 00:06:13,126
with conditionals and the number
of times to skip the breakpoint.


170
00:06:13,606 --> 00:06:17,116
But anyway, you can type in a
log message and you don't have


171
00:06:17,116 --> 00:06:18,446
to stop running the program.


172
00:06:18,446 --> 00:06:19,416
It can just keep
going, of course,


173
00:06:19,416 --> 00:06:20,176
'cause this is a breakpoint.


174
00:06:20,396 --> 00:06:23,906
So, do not-- from this day on,
do not stop and write NSLog


175
00:06:23,906 --> 00:06:26,746
and recompile, just use this
'cause it'll save you tons


176
00:06:27,246 --> 00:06:29,176
of time.


177
00:06:29,176 --> 00:06:30,696
Debug description, just
a really quick one.


178
00:06:30,836 --> 00:06:33,186
I'm sure actually a lot of you,
hopefully, are aware of this.


179
00:06:33,636 --> 00:06:35,066
So of course there's
the description method


180
00:06:35,066 --> 00:06:38,116
that you implement on your
classes just to see something


181
00:06:38,116 --> 00:06:39,416
in the console when
you use NSLog.


182
00:06:39,686 --> 00:06:41,216
But debug description is
a little bit different.


183
00:06:41,896 --> 00:06:44,966
So it's intended to be kind of
more provost debugging string


184
00:06:44,966 --> 00:06:46,066
that gives you extra information


185
00:06:46,066 --> 00:06:47,776
that you only really
need at debugging time.


186
00:06:48,466 --> 00:06:49,606
So it just looks like this.


187
00:06:49,606 --> 00:06:50,666
This is not rocket science.


188
00:06:50,666 --> 00:06:52,146
You implement a method
called debugDescription.


189
00:06:52,646 --> 00:06:54,676
You return some ridiculously
long string


190
00:06:54,676 --> 00:06:56,516
that you think you might need
to print out for some reason.


191
00:06:57,026 --> 00:06:59,126
And then when you're
in lldb or in the--


192
00:06:59,126 --> 00:07:01,526
just in the Xcode
visual view and I do a po


193
00:07:01,526 --> 00:07:04,606
on self.rootViewController here,
I get that really long string.


194
00:07:04,606 --> 00:07:07,396
So of course, you're not getting
the normal just description


195
00:07:07,396 --> 00:07:08,586
which you may be using
for other purposes,


196
00:07:08,586 --> 00:07:09,506
it's just for debugging.


197
00:07:10,766 --> 00:07:13,236
And these are for Breakpoint
Actions, that's obvious, OK.


198
00:07:14,476 --> 00:07:17,296
One more quick hit in case you
guys are not familiar with it.


199
00:07:17,296 --> 00:07:20,716
There's a method you can call
called recursiveDescription


200
00:07:21,176 --> 00:07:23,236
on View Hierarchy, and it
will give you back something


201
00:07:23,236 --> 00:07:23,866
like this.


202
00:07:24,956 --> 00:07:26,696
So you can actually
see the complete layout


203
00:07:26,696 --> 00:07:29,626
of your View Hierarchy just
sitting there on the debugger


204
00:07:29,996 --> 00:07:36,436
which is ridiculously useful,
so you should be using this.


205
00:07:36,496 --> 00:07:36,836
OK, [inaudible].


206
00:07:37,516 --> 00:07:43,056
[ Pause ]


207
00:07:43,556 --> 00:07:44,256
How are we doing?


208
00:07:44,256 --> 00:07:45,176
Are we learning stuff already?


209
00:07:45,176 --> 00:07:46,236
Did somebody learn anything?


210
00:07:46,716 --> 00:07:47,996
Hands. OK.


211
00:07:49,556 --> 00:07:50,736
Just wait, there's more.


212
00:07:51,696 --> 00:07:54,286
OK, so we're going to
work our way up now.


213
00:07:54,286 --> 00:07:55,986
We're going to look
at Objective-C stuff.


214
00:07:57,076 --> 00:07:59,976
So, just a quick refresh
on what Subscripting is.


215
00:07:59,976 --> 00:08:00,836
I don't-- I think most


216
00:08:00,836 --> 00:08:02,426
of you are probably
using it at this point.


217
00:08:02,426 --> 00:08:04,906
But it was something
really nice added in--


218
00:08:05,076 --> 00:08:06,146
recently to Objective-C.


219
00:08:06,496 --> 00:08:09,626
So a typical use case here is
I have an NSMutableArray called


220
00:08:09,626 --> 00:08:10,296
in indexedValues.


221
00:08:11,366 --> 00:08:13,856
And using the new subscripting
syntax which is, you know,


222
00:08:13,986 --> 00:08:16,556
very common to people from
other-- or very familiar,


223
00:08:16,556 --> 00:08:18,206
I should say, to people
from other languages,


224
00:08:18,566 --> 00:08:20,006
you can just use this
nice little bracket thing.


225
00:08:20,006 --> 00:08:21,626
So don't have to say
like objectAtIndex,


226
00:08:21,626 --> 00:08:22,866
you just say in bracket zero.


227
00:08:23,736 --> 00:08:25,486
You can give values
out, set them.


228
00:08:25,486 --> 00:08:27,216
That's all totally
straightforward.


229
00:08:27,936 --> 00:08:29,696
And of course, you can do the
same thing with dictionary.


230
00:08:29,696 --> 00:08:31,186
So that's just a little review.


231
00:08:31,186 --> 00:08:32,936
That's not the actual tip.


232
00:08:32,936 --> 00:08:34,936
The tip is that you can add
this to your own classes.


233
00:08:34,936 --> 00:08:37,346
And I'm pretty sure most
people based on who I've talked


234
00:08:37,346 --> 00:08:38,836
to don't actually even
know you can do this.


235
00:08:39,296 --> 00:08:41,035
So, here's how it works.


236
00:08:41,035 --> 00:08:42,996
I'm going to make up a fake
class here called Record Set


237
00:08:42,996 --> 00:08:45,216
and I'm just going to
add a property here


238
00:08:45,216 --> 00:08:46,226
called indexedValues.


239
00:08:46,226 --> 00:08:47,926
You could have anything
[inaudible] as much as here,


240
00:08:48,476 --> 00:08:49,446
and you got two methods.


241
00:08:49,506 --> 00:08:52,276
So the first one is called
objectAtIndex subscript,


242
00:08:52,276 --> 00:08:54,486
and you can actually see
this declared in NSArray.


243
00:08:54,486 --> 00:08:57,276
And then the setter, you don't'
actually need the setter.


244
00:08:57,276 --> 00:08:58,156
But if you want the setter,


245
00:08:58,216 --> 00:09:00,176
you implement
setObject:atIndexedSubscript,


246
00:09:00,736 --> 00:09:02,376
and then I'll just close
up the class like that.


247
00:09:02,376 --> 00:09:04,256
But it says-- oops, jumped
a little ahead there.


248
00:09:04,256 --> 00:09:04,616
Oh that's OK.


249
00:09:05,036 --> 00:09:06,476
But just those two
methods that back this,


250
00:09:06,476 --> 00:09:08,816
and then the implementation is
just whatever you want to do


251
00:09:08,816 --> 00:09:10,086
to get that object
to that index.


252
00:09:10,086 --> 00:09:14,306
In this case, I've just looked
at my indexedValues property


253
00:09:14,396 --> 00:09:16,606
and pulled out the value
and I set in the setter,


254
00:09:17,506 --> 00:09:19,466
and here's how that
looks in use.


255
00:09:20,856 --> 00:09:22,956
So I'm making-- just an instance


256
00:09:22,956 --> 00:09:24,336
of my fake record
set class here.


257
00:09:24,336 --> 00:09:26,706
And then after if
it's initiated,


258
00:09:26,706 --> 00:09:28,976
I can just use this
subscripting syntax directly


259
00:09:28,976 --> 00:09:31,216
on my class which
is pretty cool.


260
00:09:31,216 --> 00:09:32,266
You could imagine
this would be--


261
00:09:32,266 --> 00:09:33,546
I called it records
out here just to kind


262
00:09:33,546 --> 00:09:36,016
of suggest it might be kind of
cool for like a dataset coming


263
00:09:36,016 --> 00:09:39,716
from a database, that sort of
thing, you know, so I can set it


264
00:09:39,716 --> 00:09:43,016
and get it, not super
rocket science.


265
00:09:43,356 --> 00:09:45,736
And you can do it for
keyed subscripting too.


266
00:09:45,846 --> 00:09:48,616
So, it's going to look very
similar to the last example.


267
00:09:48,616 --> 00:09:50,016
In this case, I made
a person class.


268
00:09:50,366 --> 00:09:52,416
And actually I'm backing it
this time by a dictionary.


269
00:09:52,416 --> 00:09:53,946
But again, it doesn't
have to be backed


270
00:09:53,946 --> 00:09:54,936
by a dictionary or an array.


271
00:09:54,936 --> 00:09:57,546
It can be anything that you
need to accomplish a task.


272
00:09:58,146 --> 00:09:59,486
So again, there's two methods,


273
00:09:59,486 --> 00:10:01,946
objectKeyed [assumed spelling]
subscript instead of index,


274
00:10:02,316 --> 00:10:03,976
and setObject:
forKeyedSubscript.


275
00:10:04,086 --> 00:10:06,726
And these also are declared in
NSDictionary if you just want


276
00:10:06,726 --> 00:10:08,396
to copy and paste them.


277
00:10:08,396 --> 00:10:10,836
So it's just those two methods
you need for the declaration.


278
00:10:11,396 --> 00:10:16,066
And the implementation is
really not very surprising.


279
00:10:16,796 --> 00:10:19,966
Again, you're just using the
regular dictionary method set


280
00:10:19,966 --> 00:10:20,746
and get the objects.


281
00:10:21,546 --> 00:10:23,426
So, that's pretty
straightforward.


282
00:10:23,876 --> 00:10:28,216
And here's just a quick little
example of how it works.


283
00:10:28,216 --> 00:10:29,866
You say, you know,
person favorite color,


284
00:10:29,866 --> 00:10:31,126
and you might be kind
of wondering, "Well,


285
00:10:31,126 --> 00:10:32,996
why not just say
person.favoritecolor?"


286
00:10:33,326 --> 00:10:35,546
This is a literal string, but
you can imagine a scenario


287
00:10:35,546 --> 00:10:37,156
where you're fetching
something from a service


288
00:10:37,156 --> 00:10:38,586
or you're pulling
something out of a database,


289
00:10:38,806 --> 00:10:40,626
and you may have actually
know those keys ahead of time,


290
00:10:40,956 --> 00:10:43,726
so this will be a useful way
to kind of to simply, you know,


291
00:10:43,726 --> 00:10:45,376
put those values and
get them back out.


292
00:10:46,196 --> 00:10:47,546
So, that's pretty cool.


293
00:10:47,546 --> 00:10:49,316
But, hey, you know what
would be really cool is


294
00:10:49,316 --> 00:10:51,346
if you can actually use
both at the same time.


295
00:10:52,506 --> 00:10:55,866
So, I heard some clapping
there, that's awesome.


296
00:10:55,866 --> 00:10:58,816
So, I have just one more fake
class here called Ultra Record


297
00:10:58,816 --> 00:11:00,066
Set because it's inappropriate.


298
00:11:00,276 --> 00:11:03,586
So, I've got indexedValues
and keyedValues, and this is--


299
00:11:03,766 --> 00:11:05,826
you know, I bet you can see
where the plot is going here,


300
00:11:05,826 --> 00:11:07,886
objectAtIndexedSubscript
I implement both


301
00:11:07,886 --> 00:11:10,086
of the indexed ones, I
implement with the keyed one,


302
00:11:10,596 --> 00:11:12,746
close it out, it all just
works, so you would expect.


303
00:11:12,886 --> 00:11:15,726
And then, of course-- let
me get the clicker to work.


304
00:11:16,616 --> 00:11:19,416
And of course, I'll just
make an instance of this


305
00:11:19,416 --> 00:11:20,796
and I can just go ahead
and start setting,


306
00:11:20,796 --> 00:11:22,396
getting those values the
same way I did before.


307
00:11:22,566 --> 00:11:25,446
So, all that, you can
just go home and use that


308
00:11:25,446 --> 00:11:27,266
and have fun with that.


309
00:11:28,096 --> 00:11:30,546
OK. A few quick things,
so these are--


310
00:11:30,546 --> 00:11:32,336
everything so far as
being kind of additive.


311
00:11:32,336 --> 00:11:33,076
This is reductive.


312
00:11:33,076 --> 00:11:38,816
So in versions of Xcode
prior to 4.3, and really just


313
00:11:38,816 --> 00:11:41,586
like the entire lifetime
of C, if you wanted


314
00:11:41,586 --> 00:11:44,306
to call a method inside of--
like a private method inside


315
00:11:44,306 --> 00:11:46,086
of a file, you would have


316
00:11:46,086 --> 00:11:48,016
to declare it somewhere
'cause the compiler would


317
00:11:48,016 --> 00:11:49,456
like somehow not be
able to figure it out.


318
00:11:49,456 --> 00:11:51,616
But guess what, since Xcode 4.3,


319
00:11:51,616 --> 00:11:52,936
you actually don't
need this anymore.


320
00:11:53,256 --> 00:11:56,016
So, if you have a private
method that you're calling


321
00:11:56,016 --> 00:11:58,186
from within the same file,
you don't need to declare it.


322
00:11:58,186 --> 00:12:02,206
The compiler will figure
that out, so that's good.


323
00:12:02,396 --> 00:12:04,726
And this is-- maybe more of
you are familiar with this,


324
00:12:04,726 --> 00:12:06,666
but since Xcode 4.4, you would--


325
00:12:06,696 --> 00:12:08,006
you can of course
declare properties.


326
00:12:08,376 --> 00:12:10,826
And then in earlier versions
of Xcode and Objective-C,


327
00:12:11,216 --> 00:12:13,686
you would then synthesize the
accessor if you wanted to set


328
00:12:13,686 --> 00:12:14,736
and get those values
automatically,


329
00:12:14,736 --> 00:12:16,366
if you want the compiler to
make the accessors for you.


330
00:12:16,366 --> 00:12:19,636
Since Xcode 4.4, you don't
even need this anymore.


331
00:12:20,186 --> 00:12:24,746
So, go delete all that, we
did/ so I recommend that,


332
00:12:24,746 --> 00:12:25,266
[inaudible] your code.


333
00:12:25,266 --> 00:12:29,176
OK, so as I promised,
we pulled Mattt Thompson


334
00:12:29,176 --> 00:12:31,796
out from the NSHipster hole
or whatever it's called,


335
00:12:31,796 --> 00:12:34,406
NSHipster Cave, I'm not
sure what it's called.


336
00:12:34,406 --> 00:12:37,326
And he said he would come up
and show off some cool things.


337
00:12:37,326 --> 00:12:38,926
So, I'm going to
bring Mattt out.


338
00:12:39,476 --> 00:12:39,896
Thank you.


339
00:12:40,516 --> 00:12:42,546
[ Applause & Inaudible Remark ]


340
00:12:43,046 --> 00:12:44,946
>> Hey everybody.


341
00:12:46,086 --> 00:12:46,586
Good morning.


342
00:12:47,636 --> 00:12:49,976
My name is Mattt Thompson
and I am an NSHipster.


343
00:12:49,976 --> 00:12:52,226
And today, I'm very
excited to show you some


344
00:12:52,226 --> 00:12:53,966
of those Xcode tips that
Scott just told us about,


345
00:12:53,966 --> 00:12:56,566
and my favorite new
addition to Xcode,


346
00:12:56,836 --> 00:12:57,976
something called Instance Type.


347
00:12:58,726 --> 00:13:01,106
So, let's switch over to this.


348
00:13:03,276 --> 00:13:04,396
All right, you can see code.


349
00:13:04,396 --> 00:13:05,996
All right, this is a
very simple project.


350
00:13:06,896 --> 00:13:08,296
We have an employee class.


351
00:13:08,886 --> 00:13:13,036
Well actually, let's use Open
Quickly employee.h. There we go,


352
00:13:13,036 --> 00:13:13,626
pretty nice.


353
00:13:13,626 --> 00:13:17,226
We can also use our assistant
things, so we can see the .h


354
00:13:17,226 --> 00:13:18,486
and .m on the same view.


355
00:13:18,766 --> 00:13:20,356
Pretty simple, we have
a name and a salary.


356
00:13:20,666 --> 00:13:22,846
But here, we have
a common pattern.


357
00:13:22,846 --> 00:13:25,296
It's a class constructor,
convenience method


358
00:13:25,576 --> 00:13:27,686
that returns an instance


359
00:13:27,736 --> 00:13:30,806
of an object initialize
with, in this case, a name.


360
00:13:30,806 --> 00:13:33,936
This is just a short-hand
for alloc-init and setName.


361
00:13:34,496 --> 00:13:36,656
The thing here though
is that we have ID


362
00:13:36,656 --> 00:13:38,266
as being the return type.


363
00:13:38,566 --> 00:13:40,656
So, let's kind of
illustrate what kind


364
00:13:40,656 --> 00:13:42,686
of problems you can
get into with that.


365
00:13:42,776 --> 00:13:48,446
We'll go to main.m. All right,
let's say we have employee,


366
00:13:48,916 --> 00:13:52,316
employee with name, and I'll
employ myself, all right.


367
00:13:53,756 --> 00:13:55,736
Here, you know, Xcode is--


368
00:13:55,736 --> 00:13:58,146
doesn't have any sort of idea
what kind of objects returned.


369
00:13:58,146 --> 00:13:59,836
It just knows that the
returned type is ID.


370
00:14:00,196 --> 00:14:02,436
So, I could do for
instance add object.


371
00:14:03,116 --> 00:14:05,456
What? That doesn't
make any sense.


372
00:14:05,516 --> 00:14:07,596
I can build and it's
not going to complain.


373
00:14:07,596 --> 00:14:08,566
It's going to say it succeeds.


374
00:14:08,566 --> 00:14:10,146
But of course if I build
and run, and I'm going


375
00:14:10,146 --> 00:14:12,196
to get immediately,
you know, [inaudible].


376
00:14:12,196 --> 00:14:13,656
That's terrible.


377
00:14:14,046 --> 00:14:15,536
So how can we improve on this?


378
00:14:15,536 --> 00:14:18,786
Well, up until recently, kind of
the suggested pattern might be


379
00:14:18,786 --> 00:14:23,626
to let's say, OK, go
to-- back to employee.


380
00:14:24,646 --> 00:14:27,986
Instead, return just an
instance of employee, right?


381
00:14:27,986 --> 00:14:29,586
So we have our employee object.


382
00:14:29,706 --> 00:14:32,076
We would change it in our
implementation as well.


383
00:14:32,606 --> 00:14:34,686
And then if we go
back to main.m,


384
00:14:35,406 --> 00:14:38,336
if we have this method
here, let's say add--


385
00:14:38,696 --> 00:14:40,076
well, it's doing add observer.


386
00:14:40,076 --> 00:14:41,706
So we know that it's
not responding.


387
00:14:41,706 --> 00:14:43,156
It knows to narrow
down the selectors


388
00:14:43,156 --> 00:14:45,566
to only NSObject and employee.


389
00:14:45,956 --> 00:14:49,836
But let's say, you know, I
give myself a permission.


390
00:14:49,926 --> 00:14:51,276
We have a manager class too.


391
00:14:51,716 --> 00:14:56,416
So manager is a class, no
real implementation here,


392
00:14:56,416 --> 00:14:59,016
just a new property,
subordinates


393
00:14:59,016 --> 00:15:02,886
because I have subordinates, I'm
a powerful man now as a manager.


394
00:15:03,006 --> 00:15:05,456
So-- And again, we
don't have to, you know,


395
00:15:05,716 --> 00:15:07,266
synthesize our property.


396
00:15:07,266 --> 00:15:12,736
So back to main.m,
say it's manager,


397
00:15:13,086 --> 00:15:15,746
so I'll make myself a
manager, and I do set--


398
00:15:16,096 --> 00:15:17,976
well, setting salaries
is kind of cool.


399
00:15:18,016 --> 00:15:19,176
I'll keep that one for later.


400
00:15:19,176 --> 00:15:22,116
If I do set subordinates,
you know,


401
00:15:22,116 --> 00:15:23,986
it's not completing, darn it.


402
00:15:24,396 --> 00:15:25,316
No, no, OK.


403
00:15:25,386 --> 00:15:26,186
So, what's going on here?


404
00:15:26,186 --> 00:15:28,576
Well, manager-- employee
with name,


405
00:15:28,576 --> 00:15:30,196
that's for turning an employee.


406
00:15:30,496 --> 00:15:31,916
What I want is manager.


407
00:15:31,916 --> 00:15:34,496
But if I went back to ID,
I'd still be, you know,


408
00:15:34,496 --> 00:15:35,446
you understand where
this is going.


409
00:15:35,706 --> 00:15:38,016
So, we have something
called Instance Type.


410
00:15:38,196 --> 00:15:42,996
If we go back to employee, we
change this to Instance Type.


411
00:15:42,996 --> 00:15:46,106
It's sort of the Goldilocks
kind of return type.


412
00:15:46,106 --> 00:15:49,786
It is the flexibility of ID, but
you still get the type inference


413
00:15:49,786 --> 00:15:53,746
of kind of doing an explicit
declaration of the return type.


414
00:15:54,076 --> 00:15:55,296
So in this case, it's saying,


415
00:15:55,296 --> 00:15:58,096
"I will return whatever
class kind of called this."


416
00:15:58,096 --> 00:16:02,126
So, if we go back and make sure
to fill out our implementation


417
00:16:02,126 --> 00:16:09,436
as well and then back to
main, now if we do this,


418
00:16:09,496 --> 00:16:10,936
I can set subordinates.


419
00:16:10,936 --> 00:16:11,566
Hey, check that out.


420
00:16:11,876 --> 00:16:15,116
So Instance Type, it is
the perfect kind of way


421
00:16:15,116 --> 00:16:16,136
to do class constructors.


422
00:16:16,136 --> 00:16:20,816
And you'll notice that in the
API divs for iOS 7, Mac 10.9,


423
00:16:20,816 --> 00:16:21,806
there's a lot of methods.


424
00:16:21,806 --> 00:16:24,196
Although previous class
constructors that were using ID


425
00:16:24,426 --> 00:16:27,806
like NSArray array, they're
all now using Instance Type.


426
00:16:27,806 --> 00:16:29,826
So using your own
code, clean it up,


427
00:16:29,826 --> 00:16:31,506
it's really a convenient
thing, and I'm going


428
00:16:31,506 --> 00:16:32,306
to pass back to Scott.


429
00:16:32,306 --> 00:16:34,616
We're going to talk about
some Foundation stuff.


430
00:16:34,616 --> 00:16:35,976
So, yeah.


431
00:16:36,516 --> 00:16:40,516
[ Applause ]


432
00:16:41,016 --> 00:16:41,736
>> All right.


433
00:16:43,406 --> 00:16:45,116
Learning things, all right, OK.


434
00:16:45,246 --> 00:16:46,426
So, move on.


435
00:16:46,496 --> 00:16:48,906
So we're going to
talk about Foundation.


436
00:16:48,906 --> 00:16:53,296
So we've worked our way up
from Xcode and Objective-C,


437
00:16:53,296 --> 00:16:54,466
and now we're getting
into the frameworks.


438
00:16:54,466 --> 00:16:56,766
And for the most part,
everything we talk


439
00:16:56,766 --> 00:16:57,546
about for the rest of the talk


440
00:16:57,546 --> 00:16:58,296
and really everything
we've talked


441
00:16:58,296 --> 00:17:01,316
about so far applies
to both iOS and OS X.


442
00:17:01,316 --> 00:17:04,506
So everything for iOS 7,
everything from Mavericks,


443
00:17:04,506 --> 00:17:05,396
all these should apply.


444
00:17:05,396 --> 00:17:06,665
So you can keep that in mind.


445
00:17:06,726 --> 00:17:08,556
We have some iOS specific stuff


446
00:17:08,556 --> 00:17:10,336
and AppKit specific
stuff at the end.


447
00:17:11,026 --> 00:17:12,195
OK, so Foundation.


448
00:17:12,195 --> 00:17:12,876
Let's jump on to this.


449
00:17:13,146 --> 00:17:14,665
So, a lot of you I'm
sure are familiar


450
00:17:14,665 --> 00:17:16,656
with Grand Central Dispatch.


451
00:17:16,705 --> 00:17:18,546
This is great technology
we added a few years ago


452
00:17:18,546 --> 00:17:21,366
that allows you to breakup
work into individual work units


453
00:17:21,366 --> 00:17:24,066
and distribute them across
whatever resources are available


454
00:17:24,066 --> 00:17:25,286
on the system, so
it's really great.


455
00:17:25,746 --> 00:17:28,646
But I don't know how many
of you are actually familiar


456
00:17:28,646 --> 00:17:30,806
or are using NSOperation.


457
00:17:30,806 --> 00:17:34,486
It's this really great
object-oriented API that sits


458
00:17:34,486 --> 00:17:35,846
on top of Grand Central
Dispatch.


459
00:17:35,846 --> 00:17:38,876
So, all that really super cool
performance stuff that you get


460
00:17:38,876 --> 00:17:41,476
from Grand Central
Dispatch, NSOperation offers


461
00:17:41,756 --> 00:17:43,756
with all the Cocoa
Objective-C goodness.


462
00:17:44,176 --> 00:17:48,336
So, in addition to
that really nice API,


463
00:17:49,426 --> 00:17:51,826
it also has some features
that are unique to NSOperation


464
00:17:51,826 --> 00:17:54,286
that you can't just-- you
can't get using just Grand


465
00:17:54,286 --> 00:17:55,006
Central Dispatch.


466
00:17:55,006 --> 00:17:57,336
So, for example, you
can cancel queues.


467
00:17:57,336 --> 00:18:00,126
So, you can have stuff running
out there and you say Cancel


468
00:18:00,126 --> 00:18:01,526
and it will stop running.


469
00:18:01,526 --> 00:18:03,406
I mean if you're subclassing,
you have to do that in your side


470
00:18:03,406 --> 00:18:04,536
as well, but it's
available to you.


471
00:18:04,536 --> 00:18:06,546
You can also set max number


472
00:18:06,546 --> 00:18:09,166
of concurrent operations
at the same time.


473
00:18:09,476 --> 00:18:12,206
So, you might have tons and tons
of hardware and you say, "Well,


474
00:18:12,206 --> 00:18:14,566
a hundred concurrent
operations is fine here.


475
00:18:14,566 --> 00:18:16,666
But if you're stilling it down
to a mobile device, I might say,


476
00:18:16,666 --> 00:18:19,796
well, maybe four
concurrent is good."


477
00:18:19,796 --> 00:18:21,506
And you can set up dependencies,
and this is super cool.


478
00:18:21,506 --> 00:18:22,906
I'm going to show you an
example of this in a second,


479
00:18:22,906 --> 00:18:26,156
but you can actually take
different work units and say,


480
00:18:26,156 --> 00:18:28,386
"I really do not want
this one to even start


481
00:18:28,936 --> 00:18:30,646
until the thing it
depends on has completed."


482
00:18:31,126 --> 00:18:34,136
And of course, I
mentioned Objective-C APIs,


483
00:18:34,136 --> 00:18:36,946
so that means you can subclass
it, you can add categories


484
00:18:36,946 --> 00:18:39,306
to NSOperation, and you can
use even key-value observing


485
00:18:39,306 --> 00:18:42,136
to monitor the state of the
operations as they're running.


486
00:18:42,586 --> 00:18:45,916
So, it's a great way to cleanup
your code and use for a--


487
00:18:45,916 --> 00:18:48,346
sorry, build a more
robust source base.


488
00:18:49,566 --> 00:18:50,956
So, here's a really
good example.


489
00:18:51,066 --> 00:18:52,916
I'm sure a lot of you are
actually familiar with this app.


490
00:18:53,326 --> 00:18:56,246
This is the WWDC
app running in iPad


491
00:18:56,246 --> 00:18:58,556
and we used NSOperation
here in an interesting way


492
00:18:58,556 --> 00:19:00,356
where you may actually
anticipate.


493
00:19:00,356 --> 00:19:03,586
So we use the Dependencies
feature in NSOperation


494
00:19:04,106 --> 00:19:07,676
to specifically make sure that
any time we go do a request


495
00:19:08,016 --> 00:19:10,476
to the server for things
like to fetch your favorites,


496
00:19:10,476 --> 00:19:12,266
to find out which sessions
are currently available


497
00:19:12,266 --> 00:19:13,646
or to get the information
on session,


498
00:19:14,136 --> 00:19:17,426
we set up a dependent operation
that first authorizes the user.


499
00:19:17,696 --> 00:19:19,236
So, anytime we go
out and do that feed,


500
00:19:19,316 --> 00:19:20,986
before we actually
launch that operation,


501
00:19:20,986 --> 00:19:23,476
we set a dependency
on the authorization.


502
00:19:23,716 --> 00:19:24,536
So, here's what it looks like.


503
00:19:24,536 --> 00:19:26,906
This is code, it's almost
directly from the source base,


504
00:19:26,906 --> 00:19:28,536
so I cleaned it up a little
bit so it fits on the slides,


505
00:19:28,536 --> 00:19:29,846
but it's pretty much
true to form.


506
00:19:30,496 --> 00:19:33,146
So, just walking through
this, I have this method


507
00:19:33,146 --> 00:19:35,516
that says addDependencies
ForAuthorizedOperation.


508
00:19:35,776 --> 00:19:38,426
I'm creating these
authorization operations,


509
00:19:38,426 --> 00:19:39,206
sounds like Dr. Seuss.


510
00:19:39,626 --> 00:19:41,536
And then I add it
as a dependency


511
00:19:41,536 --> 00:19:42,736
on the operation
being passed in.


512
00:19:42,736 --> 00:19:44,826
So might be passed in, for
example, like set of favorite.


513
00:19:46,006 --> 00:19:48,766
And then I add the off
operation-- author--


514
00:19:49,156 --> 00:19:51,986
off operation to
the operation queue,


515
00:19:52,566 --> 00:19:54,116
and that's all I
need to do here.


516
00:19:54,186 --> 00:19:56,966
And then I have the zipper
method which is setFavorite.


517
00:19:57,476 --> 00:19:59,706
I create that operation.


518
00:20:00,426 --> 00:20:02,756
I instantiate it with the
block I'm going to use.


519
00:20:03,456 --> 00:20:06,326
Set favorite status, and then I
call this method I've defined.


520
00:20:06,646 --> 00:20:10,126
So, if you think through
this, it means that anytime


521
00:20:10,126 --> 00:20:12,626
that we want to go ahead and
do an operation, I just call,


522
00:20:12,626 --> 00:20:15,436
set the method and says,
"Whatever you do, just make sure


523
00:20:15,436 --> 00:20:17,036
that the user is authorized
before you go do this."


524
00:20:17,036 --> 00:20:19,436
So it's a great way to
kind of cleanup that logic


525
00:20:19,436 --> 00:20:21,186
and make all these independent
work units work together


526
00:20:21,186 --> 00:20:21,456
for you.


527
00:20:22,706 --> 00:20:24,076
And add to queue of course.


528
00:20:25,336 --> 00:20:27,956
OK, NSExpression.


529
00:20:27,956 --> 00:20:31,726
So, I'm sure a lot of you
are familiar with NSPredicate


530
00:20:31,916 --> 00:20:34,226
which is used in Core Data and
it's used in different places


531
00:20:34,226 --> 00:20:35,546
if you're filtering
arrays for example.


532
00:20:35,986 --> 00:20:37,966
But NSPredicate is
actually built


533
00:20:37,966 --> 00:20:41,016
up by individual constituent
parts in NSExpression.


534
00:20:41,536 --> 00:20:42,626
And this thing is really cool.


535
00:20:42,626 --> 00:20:43,226
I'm going to show you.


536
00:20:43,806 --> 00:20:46,376
By the way, this is one of
these things, when we're working


537
00:20:46,376 --> 00:20:48,456
on the session, there were
four of us working on it,


538
00:20:48,826 --> 00:20:51,526
and every one of us,
when we were trying


539
00:20:51,526 --> 00:20:53,186
to brainstorm the
ideas, we're like,


540
00:20:53,186 --> 00:20:54,476
"I didn't know you
could do that."


541
00:20:54,586 --> 00:20:56,396
And we've accessed the source
code and we didn't know that.


542
00:20:56,396 --> 00:20:58,326
And this is one of those.


543
00:20:58,326 --> 00:21:01,686
So, NSExpression can actually
parse mathematical expressions.


544
00:21:02,466 --> 00:21:06,406
So here, I've got 3
plus 5 times 4e10.


545
00:21:06,856 --> 00:21:09,376
And if you've ever messed
around with this spotlight menu


546
00:21:09,376 --> 00:21:10,206
in the upper right hand corner,


547
00:21:10,206 --> 00:21:12,006
you've probably discovered you
can actually type mathematical


548
00:21:12,196 --> 00:21:12,936
expressions in there.


549
00:21:13,096 --> 00:21:14,086
So this is that same thing.


550
00:21:14,086 --> 00:21:15,346
And this is actually
pretty flexible.


551
00:21:15,346 --> 00:21:17,156
I was blown away when I
was trying it yesterday,


552
00:21:17,396 --> 00:21:19,676
square root, you know,
syntax, all that kind of stuff.


553
00:21:19,826 --> 00:21:21,436
So you just say NSExpression
WithFormat,


554
00:21:21,436 --> 00:21:24,066
you pass in your text, of course
you can pass in a variable


555
00:21:24,066 --> 00:21:25,816
if you want, I didn't in
this particular example.


556
00:21:26,256 --> 00:21:30,326
But then you just evaluate
the value, print it out,


557
00:21:30,326 --> 00:21:32,036
and then you get this
really, really big number.


558
00:21:32,036 --> 00:21:32,996
So that's pretty cool.


559
00:21:32,996 --> 00:21:35,086
So you can imagine, if you
wanted to have the user type


560
00:21:35,086 --> 00:21:36,896
in some sort of mathematical
equation,


561
00:21:36,896 --> 00:21:38,746
you wanted to show them the
results, so there's going


562
00:21:38,746 --> 00:21:40,566
to be a bazillion math
apps now, I'm sure,


563
00:21:40,916 --> 00:21:42,956
but that's actually
available to you if you want.


564
00:21:42,956 --> 00:21:44,306
It's going to be
the new flashlight.


565
00:21:46,846 --> 00:21:50,656
OK. So-- yeah, flashlight
fans, yeah.


566
00:21:53,006 --> 00:21:54,326
It's a great app.


567
00:21:56,116 --> 00:22:01,136
OK. So, in addition to
our friends, NSArray


568
00:22:01,136 --> 00:22:02,786
and NSDictionary that
we're using all day long,


569
00:22:03,606 --> 00:22:06,566
you should also be using
NSSet, NSOrderedSet.


570
00:22:06,566 --> 00:22:09,556
And there's some very
specific scenarios


571
00:22:09,946 --> 00:22:10,856
where they work really well.


572
00:22:10,926 --> 00:22:12,796
If you're not familiar
NSSet, OrderedSet,


573
00:22:12,796 --> 00:22:14,836
you don't really know the
details, basically one


574
00:22:14,836 --> 00:22:16,946
of the key things they do is
they guarantee uniqueness.


575
00:22:16,946 --> 00:22:18,966
So with an array
or a dictionary,


576
00:22:18,966 --> 00:22:21,956
you can have multiple
instances of the same object or,


577
00:22:21,956 --> 00:22:25,256
for example, like two NSNumbers
of the value of 2, you know,


578
00:22:25,676 --> 00:22:27,246
you can have those
across the entire--


579
00:22:27,666 --> 00:22:29,856
you know, multiple instances
of those across the collection.


580
00:22:30,196 --> 00:22:32,596
But NSSet and OrderedSet
guarantees you'll have a unique


581
00:22:33,246 --> 00:22:34,706
one instance of a
value throughout the


582
00:22:34,706 --> 00:22:35,336
entire collection.


583
00:22:36,096 --> 00:22:38,016
So, the other thing it
does that's really great


584
00:22:38,016 --> 00:22:41,486
and in particular for NSSet
is if you need to check to see


585
00:22:41,486 --> 00:22:43,336
if it-- like, for example, an
object has already been loaded


586
00:22:43,336 --> 00:22:46,526
into memory so it uses as a
cache, checking for membership


587
00:22:46,526 --> 00:22:48,426
in an NSSet is practically free.


588
00:22:48,716 --> 00:22:50,456
So there's absolutely
no reason to not use it


589
00:22:50,456 --> 00:22:51,616
for that sort of thing.


590
00:22:51,616 --> 00:22:54,326
And I actually just talked to
somebody in the labs yesterday


591
00:22:54,326 --> 00:22:57,476
and they were blown away
that this was so fast.


592
00:22:57,506 --> 00:22:58,726
So this is really, really good.


593
00:22:59,036 --> 00:23:01,696
And there's also something
interesting you can do


594
00:23:01,696 --> 00:23:03,776
with set calculations
that are not available


595
00:23:03,776 --> 00:23:04,676
on array and dictionary.


596
00:23:04,836 --> 00:23:05,856
So here's an example.


597
00:23:05,856 --> 00:23:09,136
You can do intersectsSet, so you
can take one set and another set


598
00:23:09,136 --> 00:23:10,336
and see, you know,
do they intersect.


599
00:23:11,116 --> 00:23:12,916
You can say, "Is this
is a complete subset


600
00:23:12,916 --> 00:23:15,376
of the other set?"


601
00:23:15,576 --> 00:23:17,346
You can do a -minusSet.


602
00:23:17,346 --> 00:23:20,456
You take one set and just
remove the entire contents


603
00:23:20,456 --> 00:23:21,116
of the other set.


604
00:23:21,116 --> 00:23:23,016
And you can union them.


605
00:23:23,086 --> 00:23:24,766
So this-- on the surface,
it says, "Yeah, yeah,


606
00:23:24,766 --> 00:23:26,076
that's great," but
think about that.


607
00:23:26,296 --> 00:23:27,996
That means that you don't
actually have to loop


608
00:23:27,996 --> 00:23:29,836
through the arrays and do
all the stuff yourself.


609
00:23:29,836 --> 00:23:30,996
You can convert them to sets.


610
00:23:31,336 --> 00:23:32,716
You'll guarantee that
they're all unique.


611
00:23:33,046 --> 00:23:34,626
And then when you've
actually run these operations,


612
00:23:34,626 --> 00:23:36,116
you'll going get the final
set of the thing you need.


613
00:23:36,116 --> 00:23:37,056
So this is really, really good.


614
00:23:37,306 --> 00:23:38,206
The one thing just to keep


615
00:23:38,206 --> 00:23:40,966
in mind is before you
go converting all your


616
00:23:40,966 --> 00:23:42,736
NSMutableArrays to
NSOrderedSets,


617
00:23:42,896 --> 00:23:46,146
NSMutableArray is
faster at adding objects.


618
00:23:46,386 --> 00:23:49,156
So if you just need to add a
lot of objects, continue to use


619
00:23:49,156 --> 00:23:51,246
that as MutableArray and you
can switch back and forth


620
00:23:51,246 --> 00:23:52,836
when you need to filter them.


621
00:23:53,816 --> 00:23:54,726
All right.


622
00:23:55,416 --> 00:23:56,916
Oh also, I just want to mention,


623
00:23:57,136 --> 00:23:59,246
there was a talk right
before this one, I don't know


624
00:23:59,246 --> 00:24:00,916
if you were in the room, but
you should catch on video


625
00:24:00,916 --> 00:24:02,416
if you didn't see
it, Designing Code


626
00:24:02,416 --> 00:24:04,136
for Performance,
so Quinn gave that.


627
00:24:04,136 --> 00:24:08,116
And it dives into how to use the
Foundation collection classes


628
00:24:08,446 --> 00:24:10,096
to have really, really
fast codes.


629
00:24:10,096 --> 00:24:12,836
So you should definitely
check that out.


630
00:24:12,836 --> 00:24:14,726
OK, so a few quick hits here


631
00:24:14,726 --> 00:24:16,466
for different collection things
you may not be familiar with.


632
00:24:16,466 --> 00:24:18,076
We'll just kind to go
through this real fast.


633
00:24:18,476 --> 00:24:19,556
I see 11 on this slide.


634
00:24:19,556 --> 00:24:21,196
It really should
count for like 15, so.


635
00:24:21,706 --> 00:24:23,786
So, reverse arrays
inline quickly.


636
00:24:24,326 --> 00:24:26,126
So I just have an
array of numbers here


637
00:24:26,236 --> 00:24:28,316
and if I call
reverseObjectEnumerator,


638
00:24:28,316 --> 00:24:29,776
usually when you get an
enumerator from array,


639
00:24:29,776 --> 00:24:31,086
you're going to look through it.


640
00:24:31,086 --> 00:24:33,056
But in this case, I'm just sort
of borrowing one little method


641
00:24:33,056 --> 00:24:36,816
from it which is
numbers.reverseObjectEnumerator,


642
00:24:36,816 --> 00:24:39,266
we should get the reverse order,
and then I just call allObjects.


643
00:24:39,266 --> 00:24:40,676
So we don't actually have
to loop through that.


644
00:24:40,676 --> 00:24:43,026
I'll just get the complete
set of reversed object.


645
00:24:43,026 --> 00:24:43,596
So that's good.


646
00:24:43,966 --> 00:24:47,046
A lot of times, when you're
implementing a method,


647
00:24:47,096 --> 00:24:49,726
you're passed in some sort
of value and need them mutate


648
00:24:49,726 --> 00:24:52,186
that array or you need to
mutate that dictionary.


649
00:24:52,626 --> 00:24:56,736
And a common pattern that I see
is you may want to check to see


650
00:24:56,736 --> 00:24:58,626
if that value you're
being passed in is nil


651
00:24:58,626 --> 00:25:00,506
because if you call
mutable copy a nil,


652
00:25:00,506 --> 00:25:01,746
you're going to get nil back.


653
00:25:01,746 --> 00:25:02,626
So that's not really helpful.


654
00:25:02,996 --> 00:25:04,476
So instead of doing that,


655
00:25:04,476 --> 00:25:07,996
you can just say
NSMutableArray arrayWithArray.


656
00:25:07,996 --> 00:25:09,606
And even if it's
nil, you're going


657
00:25:09,606 --> 00:25:10,596
to get a MutableArray back.


658
00:25:10,596 --> 00:25:12,616
And that's a case for most
of the collections classes,


659
00:25:12,956 --> 00:25:15,876
dictionaries, NSSet,
OrderedSet, OK.


660
00:25:16,666 --> 00:25:18,406
Another scenario
you might yourself


661
00:25:18,406 --> 00:25:21,146
in is you might be passed
in one of any number


662
00:25:21,146 --> 00:25:22,916
of collection objects.


663
00:25:23,296 --> 00:25:24,596
So for example, you
might have a method


664
00:25:24,596 --> 00:25:26,676
that takes a dictionary
or an array.


665
00:25:26,676 --> 00:25:28,936
And there's sort of this
question about, "Well, you know,


666
00:25:28,936 --> 00:25:29,896
how do I declare that?


667
00:25:29,896 --> 00:25:32,306
Do I-- is it like an id or
an id component to NSObject?"


668
00:25:32,756 --> 00:25:35,676
Well, what you can do is
just specify id conform


669
00:25:35,676 --> 00:25:36,916
to NSFastEnumeration.


670
00:25:36,916 --> 00:25:39,306
The only thing you need to do is
actually just iterate over it.


671
00:25:39,546 --> 00:25:40,956
This is absolutely
perfect for that.


672
00:25:40,996 --> 00:25:42,986
So that can be almost any
collection class that we have.


673
00:25:43,846 --> 00:25:47,226
And, interestingly enough, you
can do this on your own class.


674
00:25:47,546 --> 00:25:49,466
So again, if you're thinking
about that record example


675
00:25:49,466 --> 00:25:51,456
that I showed you before and
you want to actually enumerate


676
00:25:51,456 --> 00:25:54,146
through them, all you have to
do is implement this one method,


677
00:25:54,486 --> 00:25:58,066
countByEnumeratingWithState,
objects count.


678
00:25:58,676 --> 00:26:00,766
And it turns out that
the implementation is


679
00:26:00,766 --> 00:26:01,496
incredibly simple.


680
00:26:01,496 --> 00:26:03,246
If you have an array, you
just call that on the array.


681
00:26:04,516 --> 00:26:07,836
So, there you go.


682
00:26:07,836 --> 00:26:13,846
So, now, I would like
to bring up Mattt.


683
00:26:13,846 --> 00:26:16,986
And you probably--
when you saw his demo,


684
00:26:16,986 --> 00:26:19,026
you might have been thinking,
"Yeah, yeah, I knew that."


685
00:26:19,256 --> 00:26:21,366
He's going to show you
some stuff I guarantee you,


686
00:26:21,366 --> 00:26:21,826
you do not know.


687
00:26:21,826 --> 00:26:23,286
I did not know it,
none of us know it.


688
00:26:23,346 --> 00:26:24,736
So, he'll bring that back up.


689
00:26:25,966 --> 00:26:28,266
>> All right, so Foundation
and Core Foundation,


690
00:26:28,266 --> 00:26:31,176
two of my favorite pieces of
software in the whole world.


691
00:26:31,176 --> 00:26:33,176
Let's talk about
some obscure stuff.


692
00:26:33,466 --> 00:26:34,386
Well, first of all, let's--


693
00:26:34,386 --> 00:26:37,576
at the outset, let's say
Objective-C really sits


694
00:26:37,576 --> 00:26:41,186
at the interface between the
procedural world of C, you know,


695
00:26:41,186 --> 00:26:43,046
the really strong foundations,
but it also combines


696
00:26:43,046 --> 00:26:47,016
that with the object-oriented
paradigm inspired by small talk.


697
00:26:47,376 --> 00:26:50,286
And right at that interface
is a class and its value.


698
00:26:50,656 --> 00:26:53,516
You might be more familiar with
its subclass, NSNumber which is


699
00:26:53,516 --> 00:26:56,996
in an object representation
for things like ints, floats,


700
00:26:57,326 --> 00:26:58,786
doubles, and Booleans.


701
00:26:59,026 --> 00:27:01,986
But NSValue, you know, still
has a few tricks up its sleeve.


702
00:27:01,986 --> 00:27:03,966
For instance, it can store
all those scalar values


703
00:27:03,966 --> 00:27:06,456
but it can also store
things like structs.


704
00:27:06,456 --> 00:27:09,706
Specifically, you might be
working with structs like ranges


705
00:27:09,706 --> 00:27:11,966
or point, sizes and rects.


706
00:27:12,346 --> 00:27:14,046
And then one of the
other things that it does


707
00:27:14,046 --> 00:27:15,676
that actually very
few people know about,


708
00:27:15,676 --> 00:27:17,726
it can also return
unretained references,


709
00:27:17,956 --> 00:27:19,796
and I'll show you an example of
how you might use that later.


710
00:27:21,036 --> 00:27:22,856
So, another tip.


711
00:27:23,226 --> 00:27:25,916
Let's say you're trying to
construct an array and you want


712
00:27:25,916 --> 00:27:27,786
to have a whole bunch
of different, you know,


713
00:27:27,786 --> 00:27:30,306
C-values in it, so
this is how you do it.


714
00:27:30,306 --> 00:27:33,476
So you have a MutableArray
using the subscripting here,


715
00:27:33,476 --> 00:27:35,036
just adding, you know, values,


716
00:27:35,036 --> 00:27:36,996
valueWithPoint passing
a CGPoint,


717
00:27:37,326 --> 00:27:39,986
valueWithRange that's
passing in an NSRange.


718
00:27:40,766 --> 00:27:42,506
Let's say you have a custom
struct here, you know,


719
00:27:42,556 --> 00:27:44,336
if you don't UIColor
for some reason,


720
00:27:44,336 --> 00:27:46,766
you just want this
RGB triple, right?


721
00:27:46,856 --> 00:27:49,946
You have red, green and blue
values, and you have an instance


722
00:27:49,946 --> 00:27:53,226
to that, you can encode
that and put into an array


723
00:27:53,226 --> 00:27:57,896
by doing NSValue valueWithBytes
passing a pointer to the color,


724
00:27:58,246 --> 00:28:02,016
and then Objective-C
type using the @encode


725
00:28:02,366 --> 00:28:05,076
and then the type of the struct.


726
00:28:07,206 --> 00:28:09,736
Whenever you're using
NSMutableDictionary,


727
00:28:09,736 --> 00:28:12,266
another kind of collection,
you know, it's simple.


728
00:28:12,266 --> 00:28:13,746
You do a Key equals Value.


729
00:28:13,916 --> 00:28:16,116
That's works really well
whenever Key conforms the


730
00:28:16,246 --> 00:28:18,896
NSCopying and because
NSMutableDictionary copies


731
00:28:18,896 --> 00:28:19,456
its keys.


732
00:28:19,926 --> 00:28:22,286
That does not work so
well for some objects


733
00:28:22,286 --> 00:28:23,936
that don't conform to NSCopying.


734
00:28:23,936 --> 00:28:25,826
And you might not be
able to think of any,


735
00:28:25,826 --> 00:28:27,996
off the top of your head,
but certainly if you'd gotten


736
00:28:27,996 --> 00:28:29,876
into a situation where
you're trying to do this


737
00:28:30,096 --> 00:28:32,326
and you're trying to figure
out why this doesn't work,


738
00:28:32,326 --> 00:28:33,526
this is a lifesaver right here,


739
00:28:33,656 --> 00:28:36,086
NSValue
valueWithNonretainedObject,


740
00:28:36,086 --> 00:28:38,006
you pass it in, it will
just work magically,


741
00:28:38,256 --> 00:28:40,606
just assume that the object is
being owned by something else,


742
00:28:40,826 --> 00:28:42,096
everything works
just marvelously.


743
00:28:42,726 --> 00:28:44,136
Let's talk about
Key-Value Coding.


744
00:28:44,506 --> 00:28:46,606
Key-Value Coding is
another really cool feature


745
00:28:46,606 --> 00:28:47,446
of Foundation.


746
00:28:48,206 --> 00:28:49,146
You know it, you love it.


747
00:28:49,276 --> 00:28:52,916
valueForKey, name, it's an
equivalent to emloyee.name.


748
00:28:52,916 --> 00:28:54,976
The thing about Key-Value
Coding, of course, is it's a way


749
00:28:54,976 --> 00:28:58,706
to dynamically set and get
properties and also, you know,


750
00:28:58,706 --> 00:28:59,936
traverse object crafts too.


751
00:28:59,936 --> 00:29:03,246
So, valueForKeyPath,
manager.name, that's equivalent


752
00:29:03,246 --> 00:29:05,216
to employee.manager.name.


753
00:29:05,276 --> 00:29:06,246
All right, you guys
already know that.


754
00:29:06,246 --> 00:29:06,836
That's not the tip.


755
00:29:06,836 --> 00:29:11,296
The tip here is that you can
also do this on collections


756
00:29:11,296 --> 00:29:15,336
and by passing in
Key-Value Coding, you know,


757
00:29:15,336 --> 00:29:17,986
doing that on a collection,
you'll actually get the result


758
00:29:18,426 --> 00:29:19,736
for each objective
in the collection.


759
00:29:19,736 --> 00:29:21,916
So here, we have an array of
words, Alpha, Bravo, Charlie.


760
00:29:22,436 --> 00:29:24,786
Let's do valueForKey,
uppercaseString.


761
00:29:24,816 --> 00:29:27,036
You get an array of
the uppercased words.


762
00:29:27,806 --> 00:29:29,696
Or, let's say you do length.


763
00:29:30,696 --> 00:29:32,046
This is actually
really neat, right?


764
00:29:32,046 --> 00:29:34,426
So, Key-Value Coding
automatically boxes


765
00:29:34,426 --> 00:29:37,006
and unboxes values into
their object representation.


766
00:29:37,316 --> 00:29:39,536
Length normally returns
an NSUInteger.


767
00:29:39,886 --> 00:29:42,936
But in this case, you can see
that we have the @5, @5, @7.


768
00:29:42,936 --> 00:29:45,396
We have NSNumber
representations of that.


769
00:29:45,636 --> 00:29:48,336
So, really useful, you stay
within the object paradigm.


770
00:29:50,676 --> 00:29:52,566
Another cool thing
you can do here.


771
00:29:52,566 --> 00:29:55,646
So, it's often the case
that you will be making app,


772
00:29:55,646 --> 00:29:57,636
especially like iOS apps,
you're going to be interfacing


773
00:29:57,636 --> 00:30:00,596
with some sort of web service
API and maybe encoding,


774
00:30:00,766 --> 00:30:03,516
you know, serializing values
from JSON into an object.


775
00:30:03,856 --> 00:30:04,546
Instead of doing


776
00:30:04,546 --> 00:30:06,666
that boilerplateself.name=json
[assumed spelling]


777
00:30:06,666 --> 00:30:08,326
valueForKeyName,
you can use this


778
00:30:08,326 --> 00:30:10,166
dictionaryWithValuesForKeys.


779
00:30:10,856 --> 00:30:12,686
And you can-- you know,
it's kind of a shortcut


780
00:30:12,686 --> 00:30:14,386
for all that-- or
sorry, that's the way


781
00:30:14,386 --> 00:30:15,196
to serialize it, I guess.


782
00:30:15,196 --> 00:30:17,786
So, you can create a
dictionary representation


783
00:30:17,786 --> 00:30:19,816
of an object using
dictionaryWithValuesForKeys,


784
00:30:19,816 --> 00:30:22,376
the keys that you want to
serialize out, maybe send back


785
00:30:22,376 --> 00:30:24,176
to that web service
and then pass


786
00:30:24,176 --> 00:30:27,196
in that resulting NSDictionary
to NSJSONSerialization.


787
00:30:27,586 --> 00:30:29,556
And then that
setValuesForKeysWithDictionary,


788
00:30:29,556 --> 00:30:30,236
that's where you'll be able


789
00:30:30,236 --> 00:30:31,686
to serialize your
object really quickly.


790
00:30:32,376 --> 00:30:32,926
Really neat.


791
00:30:32,926 --> 00:30:33,896
That's just assuming, of course,


792
00:30:33,896 --> 00:30:37,286
parity between like your JSON
keys and your property names.


793
00:30:37,556 --> 00:30:40,836
Let's talk about KVC
Collection Operators.


794
00:30:40,836 --> 00:30:41,906
You might have seen
this in the wild,


795
00:30:41,906 --> 00:30:43,876
but may not have had a
chance to use these yet.


796
00:30:44,506 --> 00:30:47,786
So the most common one you
might see is valueForKeyPath


797
00:30:47,786 --> 00:30:49,946
and then you say, "Here's
a collection colleagues,"


798
00:30:50,116 --> 00:30:50,516
and then .


799
00:30:50,966 --> 00:30:55,046
@count. Some other examples
of this you might have,


800
00:30:55,046 --> 00:30:58,106
the @avg.salary or
the max.temperature.


801
00:30:58,626 --> 00:31:01,426
So there are three kinds
of collection operators


802
00:31:01,426 --> 00:31:03,146
and they are kind of
distinguished based


803
00:31:03,146 --> 00:31:04,636
on the different
return types they have.


804
00:31:04,926 --> 00:31:07,336
Simple collection
operators return objects.


805
00:31:09,026 --> 00:31:10,926
Object operators return arrays.


806
00:31:11,226 --> 00:31:13,446
Maybe a count or two,
but it'll all make sense.


807
00:31:13,446 --> 00:31:16,276
Array and set operators
return either arrays or sets.


808
00:31:17,116 --> 00:31:18,536
And the syntax for
this is something


809
00:31:18,536 --> 00:31:20,286
that you might find
yourself looking often.


810
00:31:20,286 --> 00:31:22,206
I know I have this
bookmarked in my documentation.


811
00:31:22,726 --> 00:31:25,646
You have on the Left Key
Path, however to get--


812
00:31:25,646 --> 00:31:28,116
the way you get to
the collection itself.


813
00:31:28,116 --> 00:31:31,186
So in the middle,
you have the dot--


814
00:31:31,346 --> 00:31:32,936
these are all separated by dots.


815
00:31:32,976 --> 00:31:35,446
You have @ and then the
collectionOperator itself.


816
00:31:35,936 --> 00:31:38,346
And then on the right, if you
want any aggregate properties


817
00:31:38,386 --> 00:31:40,126
on the result of the
collectionOperator,


818
00:31:40,436 --> 00:31:41,266
you both head to the right.


819
00:31:41,806 --> 00:31:43,116
Again, you'll be
looking this up often.


820
00:31:43,116 --> 00:31:45,146
It's just one of those
things that it takes a while


821
00:31:45,146 --> 00:31:45,786
to get into your head.


822
00:31:47,346 --> 00:31:49,236
All right, so Simple
Collection Operators.


823
00:31:49,236 --> 00:31:52,416
We have, again, count that'll
give you the number of elements


824
00:31:52,486 --> 00:31:55,306
in your collection
represented by an NSNumber.


825
00:31:56,346 --> 00:31:57,806
You also have sum and average.


826
00:31:57,806 --> 00:32:01,256
So for collections of NSNumbers,
it'll give you the, you know,


827
00:32:01,256 --> 00:32:05,366
arithmetic sum and average of
the numbers in that collection.


828
00:32:06,226 --> 00:32:07,536
I think the two most useful


829
00:32:07,616 --> 00:32:09,866
and interesting ones
are max and min.


830
00:32:10,126 --> 00:32:12,076
These don't work
just on numbers.


831
00:32:12,076 --> 00:32:14,526
They work on any object
that implements compare.


832
00:32:14,526 --> 00:32:17,836
So you can have the max
and min date, or the max


833
00:32:17,836 --> 00:32:19,976
and min weather, or the
max and min whatever.


834
00:32:20,096 --> 00:32:21,766
It's a really cool
and convenient thing


835
00:32:21,766 --> 00:32:27,416
that you can add to your own
objects and take advantage of.


836
00:32:27,796 --> 00:32:29,306
We have Object Operators.


837
00:32:29,386 --> 00:32:31,856
We have unionOfObjects and
distinctUnionOfObjects.


838
00:32:32,126 --> 00:32:32,876
The difference here is


839
00:32:32,876 --> 00:32:36,496
that distinctUnionOfObjects
will unique the resulting array.


840
00:32:36,856 --> 00:32:40,036
An example of this in
code, let's say you want


841
00:32:40,036 --> 00:32:41,986
to remove all the
duplicate values in array


842
00:32:41,986 --> 00:32:44,446
without actually passing
it through an NSSet first.


843
00:32:44,676 --> 00:32:47,876
The way you do that is that
you do array valueForKeyPath:@


844
00:32:48,076 --> 00:32:50,546
"distinctUnionOfObjects.self".


845
00:32:51,076 --> 00:32:52,246
And that's actually a cool tip.


846
00:32:52,246 --> 00:32:55,686
You can pass self in for
different situations and kind


847
00:32:55,686 --> 00:32:59,316
of use these different operators
on collection, you know, itself.


848
00:32:59,696 --> 00:33:03,056
So, finally, we have
Array and Set Operators.


849
00:33:03,456 --> 00:33:05,786
You have unionOfArrays,
distinctUnionOfArrays,


850
00:33:05,786 --> 00:33:07,536
again just like the
previous one,


851
00:33:07,726 --> 00:33:09,276
and then distinctUnionOfSets.


852
00:33:09,626 --> 00:33:11,396
Sets, of course,
everything is distinct.


853
00:33:11,396 --> 00:33:13,836
So there's no non-distinct
version of your--


854
00:33:13,836 --> 00:33:16,436
and the return type is going
to depend on what you pass in,


855
00:33:16,536 --> 00:33:19,616
arrays for arrays
and sets for sets.


856
00:33:20,216 --> 00:33:22,056
Let's kind of illustrate,
this is an example.


857
00:33:22,056 --> 00:33:25,396
This is for flattening out
values within sub-collection.


858
00:33:25,396 --> 00:33:27,896
So let's say I have an array
with two color schemes here,


859
00:33:27,896 --> 00:33:29,436
some beautiful color schemes.


860
00:33:29,436 --> 00:33:32,656
If I do valueForKey
unionOfArrays,


861
00:33:32,886 --> 00:33:33,616
it'll look like that.


862
00:33:33,656 --> 00:33:36,826
So it's taking the two arrays--
the subarrays and putting them


863
00:33:36,826 --> 00:33:38,796
into one flat array values.


864
00:33:39,296 --> 00:33:41,476
Or if I do
@distinctUnionOfArrays,


865
00:33:41,736 --> 00:33:44,026
we now just have the four
distinct colors in an array.


866
00:33:44,026 --> 00:33:47,786
Let's talk about NSDataDetector.


867
00:33:48,136 --> 00:33:50,326
So in Mail, you might notice


868
00:33:50,326 --> 00:33:52,666
that whenever you have an email
message with certain kinds


869
00:33:52,666 --> 00:33:55,226
of information, that
information will be highlighted.


870
00:33:55,536 --> 00:33:56,826
And by clicking on
that information,


871
00:33:56,826 --> 00:33:59,626
you can very easily add
stuff like a phone number


872
00:33:59,626 --> 00:34:02,426
to your address book or
a date to your calendar.


873
00:34:02,556 --> 00:34:03,416
Very convenient.


874
00:34:03,606 --> 00:34:04,856
The coolest thing about this is


875
00:34:04,856 --> 00:34:08,065
that NSDataDetector is
underneath the hood of all this


876
00:34:08,065 --> 00:34:09,966
and you can add that to
your application too.


877
00:34:10,525 --> 00:34:13,496
So NSDataDetector,
it's the sub-class


878
00:34:13,496 --> 00:34:14,826
of NSRegularExpression.


879
00:34:15,126 --> 00:34:17,985
But instead of passing in
kind of arbitrary formats,


880
00:34:18,235 --> 00:34:20,346
it has kind of these
pre-calculated, really,


881
00:34:20,346 --> 00:34:23,815
really complex regular
expressions to find dates,


882
00:34:24,076 --> 00:34:26,726
you know, relative dates or, you
know, any sort of date format,


883
00:34:27,306 --> 00:34:32,295
addresses, links, both URLs and
email addresses, phone numbers,


884
00:34:32,295 --> 00:34:33,985
and transit information,
like flight numbers.


885
00:34:33,985 --> 00:34:35,976
So this is really, really cool.


886
00:34:36,406 --> 00:34:38,795
Let's show how this
works in example.


887
00:34:38,795 --> 00:34:39,786
So we have this string, right?


888
00:34:39,786 --> 00:34:42,766
We have obviously an address
in there and a phone number,


889
00:34:44,186 --> 00:34:45,466
and we have this error.


890
00:34:45,466 --> 00:34:48,226
We're going to pass it in when
we initialize Data Detector.


891
00:34:48,226 --> 00:34:51,116
And you see that when we have
initialized this, we're passing


892
00:34:51,116 --> 00:34:53,136
in the different types of
information to look for.


893
00:34:53,585 --> 00:34:55,826
When you're creating this in
your application, you only want


894
00:34:55,826 --> 00:34:57,356
to pass in the types
that you're interested


895
00:34:57,356 --> 00:34:59,576
in because each additional
type will incur a little bit


896
00:34:59,576 --> 00:35:00,386
more processing.


897
00:35:00,496 --> 00:35:01,956
So in this case, we're
only looking for--


898
00:35:02,426 --> 00:35:04,726
well, I guess that should
be address and phone number.


899
00:35:05,246 --> 00:35:08,526
And then of course, because
it's an NSRegularExpression


900
00:35:08,526 --> 00:35:09,356
sub-class, it's using


901
00:35:09,356 --> 00:35:12,576
that familiar
enumerateMatchesInString method


902
00:35:12,616 --> 00:35:15,676
with options, range, and
then enumerating each time


903
00:35:15,676 --> 00:35:16,256
with a block.


904
00:35:16,256 --> 00:35:18,026
In this case, we're just
locking up the match.


905
00:35:18,566 --> 00:35:20,636
All right, and finally,
we're going to talk


906
00:35:20,636 --> 00:35:23,316
about CStringTransform which
might be my favorite thing


907
00:35:23,346 --> 00:35:26,206
in the whole of Cocoa
and Cocoa Touch.


908
00:35:26,536 --> 00:35:28,546
It's obscure, it's powerful.


909
00:35:28,546 --> 00:35:29,866
It's like perfect, all right?


910
00:35:29,866 --> 00:35:32,766
We have great string
APIs and it's a shame


911
00:35:32,766 --> 00:35:33,726
if you don't know about them.


912
00:35:34,006 --> 00:35:35,906
So CStringTransform,
it's a multitasker.


913
00:35:35,906 --> 00:35:37,666
It will strip accents
and diacritics.


914
00:35:37,906 --> 00:35:39,406
It will name Unicode characters.


915
00:35:39,686 --> 00:35:42,706
It will encode XML hex entities
which is useful if you're ever,


916
00:35:42,706 --> 00:35:44,906
you know, making
XML or decoding XML.


917
00:35:44,906 --> 00:35:47,816
And you can also transliterate
between writing systems


918
00:35:47,816 --> 00:35:50,006
which is kind of mind-blowing
whenever you see it in action.


919
00:35:50,846 --> 00:35:53,176
So here it is, meet
CStringTransform.


920
00:35:53,176 --> 00:35:56,316
Of course, it's a C-Function,
CF coming from Core Foundation.


921
00:35:57,436 --> 00:35:59,446
It's returning a Boolean whether
or not it was successful.


922
00:35:59,446 --> 00:36:02,426
The first argument is
a CFMutableStringRef


923
00:36:02,426 --> 00:36:03,166
which you remember


924
00:36:03,166 --> 00:36:05,376
that NSMutableString
is toll-free bridge.


925
00:36:05,376 --> 00:36:06,966
So this makes it really
convenient to work with.


926
00:36:07,316 --> 00:36:08,436
The range that you're going


927
00:36:08,436 --> 00:36:10,216
to put the transformation
on is Next.


928
00:36:10,446 --> 00:36:12,736
And if you're just doing
it on the entire string,


929
00:36:12,736 --> 00:36:14,366
which you normally are,
you just pass a Null.


930
00:36:14,786 --> 00:36:16,956
The kind of transform
is the third argument.


931
00:36:16,956 --> 00:36:18,096
We're going to get into a couple


932
00:36:18,096 --> 00:36:19,466
of the constants you
might pass in there.


933
00:36:19,466 --> 00:36:21,966
And then some of those
transformations can be reversed.


934
00:36:22,156 --> 00:36:24,216
And if they are,
you put a Yes there.


935
00:36:25,206 --> 00:36:27,746
So if you were in English,


936
00:36:28,166 --> 00:36:29,606
English doesn't get all
these cool characters


937
00:36:29,606 --> 00:36:30,636
which is really a darn shame.


938
00:36:30,906 --> 00:36:33,216
But as a result of that, of
course, even the bigger shame is


939
00:36:33,216 --> 00:36:34,636
that most applica-- or a lot


940
00:36:34,636 --> 00:36:36,446
of applications can't
handle this kind of input.


941
00:36:36,446 --> 00:36:38,686
We need to normalize
that into something,


942
00:36:38,686 --> 00:36:39,956
you know, the base ASCII set.


943
00:36:40,726 --> 00:36:44,066
So, you know, if we're going to
turn that into that, you know,


944
00:36:44,066 --> 00:36:45,676
something that is
more processible,


945
00:36:45,676 --> 00:36:47,776
we can use CStringTransform.


946
00:36:48,246 --> 00:36:50,336
So we do CStringTransform
but passing


947
00:36:50,336 --> 00:36:53,896
in the kCFStringTransform
StripCombiningMarks transform.


948
00:36:53,896 --> 00:36:56,766
It's a mouthful, but here
StripCombiningMarks is doing


949
00:36:56,766 --> 00:36:58,096
both accents and diacritics.


950
00:36:58,346 --> 00:37:00,626
The difference between the
two is sort of academic.


951
00:37:00,626 --> 00:37:02,266
In this case, it just
noted all the squiggly bits


952
00:37:02,266 --> 00:37:04,296
and interesting cool
stuff is being removed.


953
00:37:05,136 --> 00:37:06,656
Next, naming Unicodes.


954
00:37:06,656 --> 00:37:09,056
Every character you see
on a screen corresponds


955
00:37:09,056 --> 00:37:12,166
to some standard character
documented in Unicode.


956
00:37:12,166 --> 00:37:13,236
Each one of those has a name.


957
00:37:13,636 --> 00:37:17,146
Some of those names are known
like Latin capital letter A,


958
00:37:17,146 --> 00:37:19,056
or you know, ornamented A


959
00:37:19,056 --> 00:37:22,156
with the ring above,
or symbols Snowman.


960
00:37:23,366 --> 00:37:25,126
But what about this,
Emoji, right?


961
00:37:25,126 --> 00:37:27,796
We love Emoji but what the
heck is that called, right?


962
00:37:28,036 --> 00:37:30,846
But now with CFStringTransform,
we can find out.


963
00:37:31,256 --> 00:37:33,536
So let's put in the code.


964
00:37:33,766 --> 00:37:35,666
Of course, because
Xcode supports Emoji,


965
00:37:35,666 --> 00:37:39,076
you can put that right into
your code, take the mutable copy


966
00:37:39,076 --> 00:37:40,656
of this pig thing and then pass


967
00:37:40,656 --> 00:37:42,776
in the
kCFStringTransformToUnicodeName.


968
00:37:43,666 --> 00:37:45,286
If anybody didn't learn
anything yet, you're going


969
00:37:45,286 --> 00:37:45,946
to learn something now.


970
00:37:46,016 --> 00:37:47,166
The name of that?


971
00:37:47,286 --> 00:37:47,726
Pig Face.


972
00:37:48,516 --> 00:37:56,106
[ Laughter & Applause ]


973
00:37:56,606 --> 00:37:56,916
All right.


974
00:37:57,816 --> 00:37:59,556
So finally, we're going
to talk about, again,


975
00:37:59,556 --> 00:38:00,526
really, really cool stuff.


976
00:38:00,526 --> 00:38:02,836
Translating between writing
system or Orthographies.


977
00:38:02,836 --> 00:38:05,786
If you don't [inaudible] there's
really no way that you can begin


978
00:38:05,786 --> 00:38:07,206
to understand how
that's pronounced.


979
00:38:07,396 --> 00:38:09,606
So it might be convenient
to put into something


980
00:38:09,606 --> 00:38:11,806
that you do understand, a
writing system that you do know.


981
00:38:12,166 --> 00:38:13,916
CFStringTransform,
as you might expect,


982
00:38:14,106 --> 00:38:15,766
does this pretty cool, well.


983
00:38:15,766 --> 00:38:19,276
You can pass in that Korean
string we just saw and pass


984
00:38:19,276 --> 00:38:23,536
in the kCFStringTransformToLatin
transform.


985
00:38:23,976 --> 00:38:26,466
And what that will do is it will
transliterate from that Korean


986
00:38:27,166 --> 00:38:28,776
to a Latin representation.


987
00:38:29,356 --> 00:38:30,116
So that's how you say it.


988
00:38:30,116 --> 00:38:31,786
Actually, we're just
saying "hello", "annyeong".


989
00:38:32,276 --> 00:38:36,076
But that works for a lot
of the other languages too.


990
00:38:37,246 --> 00:38:40,476
So you can transliterate between
Russian and Greek and Korean


991
00:38:40,476 --> 00:38:43,086
and Hebrew and Chinese
and Arabic and Thai,


992
00:38:43,586 --> 00:38:45,796
all sorts of these-- all these
languages, you can put them


993
00:38:45,796 --> 00:38:47,596
into their Latin equivalent.


994
00:38:48,246 --> 00:38:50,676
So it's sort of a super power
in a lot of ways, right?


995
00:38:50,756 --> 00:38:53,386
You can now read any
scripts in the entire world


996
00:38:53,386 --> 00:38:54,336
with CFStringTransform.


997
00:38:54,806 --> 00:38:59,116
It can transliterate between
hiragana and katakana,


998
00:38:59,116 --> 00:39:01,546
the two phonetic writing
systems of Japanese.


999
00:39:01,546 --> 00:39:03,586
You can convert between the
two which is really convenient,


1000
00:39:03,796 --> 00:39:05,426
especially if you're
leaning Japanese or want


1001
00:39:05,426 --> 00:39:08,836
to make a Japanese learning app
for instance, pretty cool idea.


1002
00:39:09,096 --> 00:39:11,356
Or you could turn it
into a Latin, you know,


1003
00:39:11,356 --> 00:39:12,536
the Romanization of it.


1004
00:39:13,246 --> 00:39:15,446
So even if you knew
about CFStringTransform,


1005
00:39:15,446 --> 00:39:17,726
you probably didn't know about
this techno way at the bottom.


1006
00:39:17,726 --> 00:39:18,376
I know I didn't.


1007
00:39:18,376 --> 00:39:20,076
I didn't read the--
you know, who reads all


1008
00:39:20,076 --> 00:39:22,036
of the documentation
from top to bottom?


1009
00:39:22,036 --> 00:39:26,276
But this note, you can pass in
any ICU transform ID as defined


1010
00:39:26,276 --> 00:39:27,446
in the ICU User Guide.


1011
00:39:27,446 --> 00:39:30,806
So all of the really,
really cool linguistic APIs,


1012
00:39:30,806 --> 00:39:33,506
they're using ICU, this open
source library under the hood.


1013
00:39:34,416 --> 00:39:37,196
So using-- you know, tying
into that, you can pass


1014
00:39:37,196 --> 00:39:40,516
in any arbitrary transform
ID into your third option.


1015
00:39:40,646 --> 00:39:42,616
So that means it's not only
do you get to convert those--


1016
00:39:42,616 --> 00:39:44,036
you know, transliterate
all those cool languages


1017
00:39:44,036 --> 00:39:46,536
that we showed before, but you
would do some foreign languages


1018
00:39:46,536 --> 00:39:48,626
that you probably have never
seen in your life before.


1019
00:39:48,966 --> 00:39:52,216
Things like, you know, Georgian
or Bengali or, you know,


1020
00:39:52,216 --> 00:39:54,896
Armenian or up there,
IPA, one of my favorites.


1021
00:39:55,146 --> 00:39:59,336
So it's a really cool and
powerful method and, you know,


1022
00:39:59,366 --> 00:40:01,236
[inaudible] actually show how
you might use this in action.


1023
00:40:01,496 --> 00:40:03,106
Let's say you've
taken Apple's advice


1024
00:40:03,346 --> 00:40:05,906
and you've internationalized and
localized your app to a bunch


1025
00:40:05,906 --> 00:40:08,586
of different markets and now you
have users all around the world.


1026
00:40:08,756 --> 00:40:11,276
You want to make sure that you
are able to handle, you know,


1027
00:40:11,276 --> 00:40:12,276
whatever they throw at you.


1028
00:40:12,376 --> 00:40:15,676
So here is a rather extreme
case where somebody is very--


1029
00:40:16,326 --> 00:40:18,966
you know, they're saying hello
in a lot of different languages.


1030
00:40:19,296 --> 00:40:21,016
Let's normalize that into a way


1031
00:40:21,016 --> 00:40:22,696
that we might be able
to like index later.


1032
00:40:23,296 --> 00:40:26,036
So first of all, we're
going to take that string.


1033
00:40:27,256 --> 00:40:29,596
To transform it into its
Latin equivalent, of course,


1034
00:40:29,596 --> 00:40:32,706
we're going to do the
kCFStringTransformToLatin.


1035
00:40:33,716 --> 00:40:34,836
Next, we're going
to get rid of--


1036
00:40:34,836 --> 00:40:36,296
again, there were a
couple of accents there


1037
00:40:36,296 --> 00:40:39,116
because Latin characters don't
encode all of the different--


1038
00:40:39,116 --> 00:40:41,256
it doesn't-- can code the
entire phonetic inventory


1039
00:40:41,516 --> 00:40:42,526
of all the different languages.


1040
00:40:42,526 --> 00:40:46,106
So, we take away those
with the kCFStringTransform


1041
00:40:46,106 --> 00:40:47,116
StripCombiningMarks.


1042
00:40:47,496 --> 00:40:51,686
Then we use CFString lowercase
to just turn it all lowercase,


1043
00:40:51,686 --> 00:40:53,706
really, normalize
all that input.


1044
00:40:54,336 --> 00:40:57,426
Finally, to get all
the words in that,


1045
00:40:57,426 --> 00:40:59,206
to get rid of all the
punctuation and white space,


1046
00:40:59,206 --> 00:41:01,966
we're going to use our friend
enumerateLinguisticTagsInRange


1047
00:41:02,176 --> 00:41:05,136
which, again, really
excellent API for linguistics.


1048
00:41:05,136 --> 00:41:06,716
You're going to pass
in your scheme,


1049
00:41:06,716 --> 00:41:09,686
so we're looking
for tokens, options.


1050
00:41:09,806 --> 00:41:11,166
No options here,
and we don't care


1051
00:41:11,166 --> 00:41:12,326
about the orthography argument.


1052
00:41:12,326 --> 00:41:14,696
And then in the block, we're
just going to iterate through.


1053
00:41:14,696 --> 00:41:16,016
For each match, we're
going to make sure--


1054
00:41:16,016 --> 00:41:17,116
we're going to see
if it's a word.


1055
00:41:17,116 --> 00:41:19,876
And if it is a word, we're going
to add it to that collection


1056
00:41:19,876 --> 00:41:20,846
of words that we created.


1057
00:41:21,216 --> 00:41:22,696
Finally, the output
of that, we have--


1058
00:41:22,696 --> 00:41:25,936
this is what we started out with
and then finally we have here.


1059
00:41:25,936 --> 00:41:27,096
So that's something
that you can read.


1060
00:41:27,096 --> 00:41:28,856
That's something you can
linguistically process.


1061
00:41:29,286 --> 00:41:30,276
It's just a powerful idea


1062
00:41:30,276 --> 00:41:32,006
of how you can use this
in your application.


1063
00:41:32,006 --> 00:41:33,696
So those are some of
my favorite things


1064
00:41:33,696 --> 00:41:35,136
in Foundation and
Core Foundation.


1065
00:41:35,136 --> 00:41:36,716
And with that, I'll
pass it back to Scott.


1066
00:41:37,076 --> 00:41:37,596
Thanks. [applause]


1067
00:41:40,196 --> 00:41:43,176
>> All right, so I think the
thing we've learned is there's


1068
00:41:43,246 --> 00:41:45,396
suddenly going to be an
explosion of math apps


1069
00:41:46,196 --> 00:41:47,566
and translation apps, right?


1070
00:41:48,606 --> 00:41:52,056
OK. So, we are moving
our way up to the layers.


1071
00:41:52,056 --> 00:41:53,326
We're going to get
to the really--


1072
00:41:53,326 --> 00:41:56,506
what I think is the really cool
stuff now, the UI Layer stuff


1073
00:41:56,506 --> 00:41:57,726
and eye candy [phonetic].


1074
00:41:58,176 --> 00:41:59,606
So let's look at Core Animation.


1075
00:41:59,606 --> 00:42:03,226
And real quickly, if
you're not super familiar


1076
00:42:03,226 --> 00:42:04,996
with Core Animation, I'm sure
most of you have heard of it.


1077
00:42:05,416 --> 00:42:07,486
It's a framework data that
is actually just, again,


1078
00:42:07,486 --> 00:42:09,586
on both iOS and OS X,


1079
00:42:09,586 --> 00:42:12,616
and it powers all the
super cool animations,


1080
00:42:12,616 --> 00:42:13,976
the really fluid look


1081
00:42:13,976 --> 00:42:17,526
that defines the
iPhone, defines OS X.


1082
00:42:17,526 --> 00:42:19,486
It powers that by
staying on top of OpenGL.


1083
00:42:19,486 --> 00:42:23,046
So it's this really great, easy
Objective-C API that taps all


1084
00:42:23,046 --> 00:42:24,326
that power of OpenGL
so you don't have


1085
00:42:24,326 --> 00:42:27,676
to know all the low level C API
for OpenGL, so that's great.


1086
00:42:27,676 --> 00:42:34,666
And just a real quick primer
on what the key classes are.


1087
00:42:34,666 --> 00:42:36,786
There's CALayer which is the
thing that actually shows


1088
00:42:36,786 --> 00:42:39,666
up on the screen and
every UIView and in,


1089
00:42:39,716 --> 00:42:43,736
more recent versions of OS
X, every NSView has access


1090
00:42:43,736 --> 00:42:44,656
to one of these layers.


1091
00:42:45,136 --> 00:42:48,126
And a CAAnimation acts on that
layer over time, so it's--


1092
00:42:48,176 --> 00:42:50,206
for example, to change
the opacity


1093
00:42:50,206 --> 00:42:51,446
or change the color,
that sort of thing.


1094
00:42:51,446 --> 00:42:52,746
All right, so we're good.


1095
00:42:53,876 --> 00:42:54,726
What you may not know is


1096
00:42:54,726 --> 00:42:57,286
that there are some pretty
cool CALayer subclasses.


1097
00:42:57,556 --> 00:43:00,566
So CAGradientLayer
will actually animate


1098
00:43:00,566 --> 00:43:02,146
between different gradients.


1099
00:43:02,146 --> 00:43:03,396
Here, I'm simulating a sunrise,


1100
00:43:04,016 --> 00:43:07,016
but you can pass it
either an array of colors


1101
00:43:07,796 --> 00:43:10,206
or an array of colors
plus stops.


1102
00:43:10,246 --> 00:43:12,186
So, you can imagine, you
can go pretty crazy here.


1103
00:43:12,886 --> 00:43:15,046
And you can actually
[inaudible] things you want


1104
00:43:15,046 --> 00:43:15,766
to animate between.


1105
00:43:15,766 --> 00:43:19,306
So-- And it turns out, this
is actually ridiculously easy.


1106
00:43:19,736 --> 00:43:22,536
So here, I've actually created
an instance of CAGradientLayer.


1107
00:43:22,586 --> 00:43:24,906
I just chose some
random geometry,


1108
00:43:24,906 --> 00:43:26,266
but you can do anything,
obviously.


1109
00:43:26,816 --> 00:43:31,876
I have three separate colors and
I'm basically taking three sets


1110
00:43:31,876 --> 00:43:35,756
of colors-- or sorry, three
colors, two sets of them


1111
00:43:36,076 --> 00:43:39,406
and using a starting
value and ending value.


1112
00:43:39,406 --> 00:43:41,466
So, I'm just starting
with 2, 3, 3,


1113
00:43:41,466 --> 00:43:43,186
just sort of for
the aesthetic feel.


1114
00:43:43,946 --> 00:43:46,176
And then I'm switching
to 1, 2, 2.


1115
00:43:46,176 --> 00:43:47,716
So I'm using those
three colors together.


1116
00:43:48,276 --> 00:43:50,136
I set the duration
to four seconds,


1117
00:43:50,166 --> 00:43:52,616
sunrise takes four
seconds, auto reverses,


1118
00:43:52,616 --> 00:43:54,266
and I've already [inaudible]
longer repeatCount here


1119
00:43:54,266 --> 00:43:55,376
which is effectively infinity.


1120
00:43:55,956 --> 00:43:57,996
And then I just add that
animation to the layer,


1121
00:43:57,996 --> 00:44:01,416
and then I can just go ahead
and take that layer and add it


1122
00:44:01,416 --> 00:44:03,476
to any view that that has
a layer already on it.


1123
00:44:03,476 --> 00:44:06,306
So you can do that
both on iOS and OS X.


1124
00:44:06,306 --> 00:44:09,286
And again, this is
what it looks like.


1125
00:44:10,396 --> 00:44:11,156
So, it's pretty cool.


1126
00:44:11,546 --> 00:44:14,896
So another sister, I guess,


1127
00:44:14,896 --> 00:44:18,116
class of CAGradientLayer
is CAShapeLayer


1128
00:44:18,116 --> 00:44:20,636
and this is actually super cool.


1129
00:44:20,636 --> 00:44:25,176
This is you are literally
giving it two separate CGPaths


1130
00:44:25,176 --> 00:44:26,326
and it animates between them.


1131
00:44:27,306 --> 00:44:28,466
It's not-- it's crazy.


1132
00:44:29,226 --> 00:44:31,956
And you can also animate
between multiple paths.


1133
00:44:31,956 --> 00:44:33,966
Here, I'm just using two and
it's actually a much more fluid


1134
00:44:33,966 --> 00:44:35,416
than it appears here
on the screen.


1135
00:44:35,916 --> 00:44:39,086
But again, this is
really, really simple.


1136
00:44:39,746 --> 00:44:41,776
I literally just
make a CALayer--


1137
00:44:41,776 --> 00:44:45,756
I'm sorry, CAShapeLayer
and I set up my path


1138
00:44:45,756 --> 00:44:47,266
and I can put all the
vertices here 'cause


1139
00:44:47,266 --> 00:44:47,986
that would become a crazy.


1140
00:44:48,326 --> 00:44:50,056
But I'd have a starting
path, an ending path.


1141
00:44:50,886 --> 00:44:52,636
I create the animation
for the path.


1142
00:44:53,096 --> 00:44:55,606
And then, again, I just hit
the duration, the auto reverse,


1143
00:44:55,606 --> 00:44:58,486
repeatCount and I
add it to layer.


1144
00:44:58,486 --> 00:45:01,926
And it looks like that,
so it's pretty cool.


1145
00:45:03,216 --> 00:45:04,756
Now, what would be really cool?


1146
00:45:05,126 --> 00:45:07,826
How about if we took both
gradient and shape and put them


1147
00:45:07,826 --> 00:45:09,806
in the same example, what
would that look like?


1148
00:45:10,066 --> 00:45:10,806
I don't even know.


1149
00:45:10,806 --> 00:45:13,186
Oh, it will look like this.


1150
00:45:13,186 --> 00:45:14,256
So, you've got this crazy--


1151
00:45:14,256 --> 00:45:16,536
so what's actually happening
here is the shape layer is


1152
00:45:16,536 --> 00:45:18,006
masking the gradient layer.


1153
00:45:18,676 --> 00:45:21,286
So, you have all the animation
that's happening on the gradient


1154
00:45:21,696 --> 00:45:23,286
but the star, the shape


1155
00:45:23,376 --> 00:45:25,666
of the star is actually
clipping the bounds


1156
00:45:26,146 --> 00:45:27,936
of the gradient,
so that's awesome.


1157
00:45:28,706 --> 00:45:29,896
And literally, all
you need to do


1158
00:45:29,896 --> 00:45:32,376
to make this work is you
set all the shape layer code


1159
00:45:32,376 --> 00:45:35,136
that I showed you before,
you set that shape layer


1160
00:45:35,136 --> 00:45:36,366
as the mask on the gradient.


1161
00:45:39,476 --> 00:45:40,606
So here's something else


1162
00:45:40,606 --> 00:45:43,286
that you probably
find yourself doing.


1163
00:45:43,356 --> 00:45:46,416
You may have some sort of
animation that responds


1164
00:45:46,416 --> 00:45:50,096
to user interaction and sort of
the first place a lot people go


1165
00:45:50,096 --> 00:45:52,326
with this is that they
actually update the animation


1166
00:45:52,326 --> 00:45:53,346
as the user is dragging.


1167
00:45:53,916 --> 00:45:56,326
But it's actually really
computationally expensive


1168
00:45:56,326 --> 00:45:57,046
to do it that way.


1169
00:45:57,466 --> 00:46:00,316
So instead what you can do is
actually change the time offset


1170
00:46:00,316 --> 00:46:03,056
of the layer itself and that
the subtle thing here is


1171
00:46:03,056 --> 00:46:04,876
that there's this protocol
that you might not be familiar


1172
00:46:04,876 --> 00:46:07,866
with called CAMediaTiming and
the animations adhere to it


1173
00:46:07,866 --> 00:46:10,216
but the layer is also
adhere to it which opens


1174
00:46:10,216 --> 00:46:11,176
up a whole range of option.


1175
00:46:11,176 --> 00:46:13,906
So, in this example, for
the example you just saw


1176
00:46:13,906 --> 00:46:15,996
on the screen, I got two
views, I've got the container


1177
00:46:15,996 --> 00:46:17,336
and then the square,
and then the slider


1178
00:46:17,336 --> 00:46:18,156
to move and back and forth.


1179
00:46:19,046 --> 00:46:22,096
And I initially set the
speed of the layer to zero.


1180
00:46:22,096 --> 00:46:24,876
And, you know, a lot of these
details I think you're probably


1181
00:46:24,876 --> 00:46:26,946
familiar with, so I'm not going
to spend too much time on them.


1182
00:46:26,946 --> 00:46:29,886
But I have a BezierPath
which is just a circle.


1183
00:46:30,496 --> 00:46:33,296
And-- So the calculation
or the pace sets the speeds


1184
00:46:33,296 --> 00:46:35,386
to a quarter of a second
and then add that animation


1185
00:46:35,386 --> 00:46:37,406
to the square, the layer.


1186
00:46:37,406 --> 00:46:39,756
And then I have this slider
as I'm moving back and forth.


1187
00:46:39,846 --> 00:46:41,946
I change the time
offset of the layer


1188
00:46:41,946 --> 00:46:46,536
and that's totally responsive,
really super efficient,


1189
00:46:46,776 --> 00:46:47,856
so that's the way to do that.


1190
00:46:47,856 --> 00:46:49,056
All right, let's keep moving.


1191
00:46:49,056 --> 00:46:50,776
Oh yeah, here's [inaudible]
again in case you forgot.


1192
00:46:51,976 --> 00:46:53,076
So, here you go.


1193
00:46:53,536 --> 00:46:54,796
OK, let's move on.


1194
00:46:55,106 --> 00:46:56,176
So, we're going to
look at Core Data.


1195
00:46:56,176 --> 00:46:58,586
So Core Data, of course, is
the framework that's available


1196
00:46:58,586 --> 00:47:00,696
for both iOS and OS
X developers as a way


1197
00:47:00,696 --> 00:47:02,126
to persist your data
between launches.


1198
00:47:02,926 --> 00:47:05,836
And here's just a really quick
overview for those of you


1199
00:47:05,836 --> 00:47:08,076
that aren't familiar
with the main classes.


1200
00:47:08,406 --> 00:47:10,936
Your Data Stored and
Persistent Store, you access it


1201
00:47:10,936 --> 00:47:12,536
through a Persistent
Store Coordinator


1202
00:47:12,676 --> 00:47:15,286
and then you fetch objects
into this ManagedObjectContext.


1203
00:47:15,286 --> 00:47:17,376
And those ManagedObjects then
kind of like living your app


1204
00:47:17,376 --> 00:47:19,186
and populate views,
that sort of thing.


1205
00:47:19,186 --> 00:47:20,636
So there's ManagedObject,


1206
00:47:21,016 --> 00:47:22,976
ManagedObjectContext,
and Fetch request.


1207
00:47:22,976 --> 00:47:24,506
Fetch request is the thing
that's pulling those things


1208
00:47:24,506 --> 00:47:25,846
from the database.


1209
00:47:26,346 --> 00:47:30,116
But the thing that people kind
of struggle in and actually


1210
00:47:30,266 --> 00:47:31,246
in this week in the lab,


1211
00:47:31,346 --> 00:47:33,526
[inaudible] a lot is
people don't quite know how


1212
00:47:33,526 --> 00:47:35,086
to do backgrounding
operations and it turns


1213
00:47:35,086 --> 00:47:36,436
out it's really, really easy.


1214
00:47:36,526 --> 00:47:39,266
There's new API added
as far back as iOS 5


1215
00:47:39,646 --> 00:47:40,806
in Lion that's been available,


1216
00:47:40,806 --> 00:47:42,096
but not everybody has
taken advantage of.


1217
00:47:42,096 --> 00:47:43,076
So I just want to mention,


1218
00:47:43,426 --> 00:47:45,186
when you create a
ManagedObjectContext,


1219
00:47:45,626 --> 00:47:48,716
you can specify that you want
the PrivateQueueConcurrencyType


1220
00:47:48,716 --> 00:47:51,296
and this is awesome because
basically what it means is you


1221
00:47:51,296 --> 00:47:52,706
get backgrounding
almost for free.


1222
00:47:53,216 --> 00:47:54,926
So what happens is you
create this context


1223
00:47:55,426 --> 00:47:57,216
with the
NSPrivateQueueConcurrencyType.


1224
00:47:57,806 --> 00:48:00,486
You say performBlock with
just any work you want to do


1225
00:48:00,766 --> 00:48:02,346
and you don't even have
to create the queue


1226
00:48:02,346 --> 00:48:03,176
that does the work on it.


1227
00:48:03,176 --> 00:48:04,106
You don't have to
create the thread.


1228
00:48:04,106 --> 00:48:05,846
You just say, "Go do this,
I don't care what happens.


1229
00:48:06,046 --> 00:48:07,726
Let me know when you're
done and we'll move on."


1230
00:48:07,726 --> 00:48:08,936
So it's super, super easy.


1231
00:48:10,456 --> 00:48:11,436
Here's an example.


1232
00:48:11,436 --> 00:48:13,506
I mean it's almost
[inaudible] to set it up.


1233
00:48:13,506 --> 00:48:16,986
And then with concurrency type,
PrivateQueueConcurrencyType,


1234
00:48:16,986 --> 00:48:19,736
I do some work and I
save, it feels great.


1235
00:48:21,116 --> 00:48:23,276
And a few other quick
hits Core Data here.


1236
00:48:23,546 --> 00:48:26,516
When you're fetching, again in
the labs this week, a lot of saw


1237
00:48:26,516 --> 00:48:28,786
that people didn't know about a
lot of this propertiesToFetch.


1238
00:48:29,026 --> 00:48:30,536
If you're fetching stuff
from Core Data and you want


1239
00:48:30,536 --> 00:48:32,146
to be fast, just fetch
the stuff you need.


1240
00:48:32,516 --> 00:48:34,926
So just say propertiesToFetch
on name and phone number.


1241
00:48:35,496 --> 00:48:36,936
You can get back
just a dictionary.


1242
00:48:36,936 --> 00:48:37,976
If you don't need
the whole object,


1243
00:48:37,976 --> 00:48:39,816
you can get back
just the objects ID


1244
00:48:40,186 --> 00:48:42,566
and sometimes maybe
just want the account.


1245
00:48:44,246 --> 00:48:46,686
You can also do fetchBatchSize
which is awesome.


1246
00:48:46,686 --> 00:48:48,726
So if you have like people came
in the labs and they're like,


1247
00:48:48,726 --> 00:48:50,786
"Well, we've-- I have
four million records."


1248
00:48:51,146 --> 00:48:53,046
It's like, "Well, no
wonder, your app is slow.


1249
00:48:53,046 --> 00:48:55,226
You're launching, you know,
four million records on launch."


1250
00:48:55,476 --> 00:48:57,096
So just set Batch Size and then


1251
00:48:57,096 --> 00:48:59,496
as you'll initially fetch a
hundred and then as you kind


1252
00:48:59,496 --> 00:49:01,186
of run through that array,
it will go and fetch more.


1253
00:49:01,886 --> 00:49:04,066
And also if you're doing
cross relationship fetching,


1254
00:49:04,066 --> 00:49:05,766
you actually want to say,
"Hey, during this batch,


1255
00:49:05,846 --> 00:49:07,276
I'm actually going
to need the artist.


1256
00:49:07,276 --> 00:49:08,446
I'm going to meet the catalog.


1257
00:49:08,446 --> 00:49:10,326
Go ahead and fetch that for me."


1258
00:49:10,916 --> 00:49:14,606
And there was a really fantastic
talk yesterday in Nob Hill.


1259
00:49:14,606 --> 00:49:16,276
I definitely recommend
checking the video


1260
00:49:16,276 --> 00:49:17,106
if you're using Core Data.


1261
00:49:17,106 --> 00:49:19,086
Even if you think you're doing
the right thing, trust me,


1262
00:49:19,086 --> 00:49:23,526
there are some pretty
amazing stuff in there.


1263
00:49:23,656 --> 00:49:25,476
And one last thing,
I don't know how many


1264
00:49:25,476 --> 00:49:26,906
of you are actually
familiar with this,


1265
00:49:26,906 --> 00:49:29,056
but they're built-in
store types in Core Data


1266
00:49:29,056 --> 00:49:30,326
and most people you SQLite,


1267
00:49:30,326 --> 00:49:32,456
but if you actually have
a different data format


1268
00:49:32,456 --> 00:49:35,286
that you need but you want all
the really nice conveniences a


1269
00:49:35,286 --> 00:49:37,756
Core Data, there's a class
for NSIncrementalStore


1270
00:49:37,986 --> 00:49:38,956
which you can subclass


1271
00:49:38,956 --> 00:49:41,306
and actually implement
your own storage type.


1272
00:49:42,036 --> 00:49:44,546
So, that's there, OK.


1273
00:49:44,546 --> 00:49:50,596
So, we have a couple
of iOS specific


1274
00:49:50,596 --> 00:49:52,406
and AppKit specific tips.


1275
00:49:52,946 --> 00:49:56,096
But first, who here has
learned something already?


1276
00:49:57,326 --> 00:49:58,896
OK. Wow, all right.


1277
00:49:59,026 --> 00:50:04,436
Has anyone not learned
something?


1278
00:50:05,686 --> 00:50:08,136
OK, yeah, because I was going
to call you on the pig face one.


1279
00:50:09,246 --> 00:50:11,666
Pretty sure, I didn't
know that, so-- OK.


1280
00:50:11,866 --> 00:50:13,776
So I guess then a few bonus tips


1281
00:50:13,776 --> 00:50:15,926
since apparently you've
covered everybody.


1282
00:50:16,176 --> 00:50:18,506
UIKit, so this is-- this
is one of these things


1283
00:50:18,506 --> 00:50:20,186
where I think most
people know about it


1284
00:50:20,696 --> 00:50:22,296
but because it just
came out in iOS 6,


1285
00:50:22,296 --> 00:50:24,086
I think maybe not
everybody is really using it.


1286
00:50:24,706 --> 00:50:27,036
So UICollectionView is
really, really awesome class


1287
00:50:27,036 --> 00:50:29,016
that was added in
iOS 6 that allows you


1288
00:50:29,016 --> 00:50:31,186
to do pretty incredibly
complex layouts.


1289
00:50:31,186 --> 00:50:32,466
And out-of-the box, you just--


1290
00:50:32,466 --> 00:50:34,156
it's basically like
a grid view for free.


1291
00:50:34,156 --> 00:50:36,296
So it's like a home
screen for free just


1292
00:50:36,296 --> 00:50:37,276
by creating one of these things.


1293
00:50:37,626 --> 00:50:40,986
And we actually use it in the
WWDC App that you see here.


1294
00:50:40,986 --> 00:50:43,116
So this whole grid
view is actually build


1295
00:50:43,166 --> 00:50:45,146
with UICollectionView and
we use a custom layout


1296
00:50:45,146 --> 00:50:47,536
and the custom layouts are
actually really straightforward


1297
00:50:47,536 --> 00:50:47,856
to do.


1298
00:50:49,216 --> 00:50:52,196
So something-- you know, a
lot of times when people run


1299
00:50:52,196 --> 00:50:54,206
across a new class,
they've got existing code


1300
00:50:54,206 --> 00:50:56,146
and they're thinking, "But--
yeah, but I don't want the API.


1301
00:50:56,146 --> 00:50:57,616
I'm going to have to sit
there and figure out.


1302
00:50:57,616 --> 00:50:59,236
And then I've got like not
working what I'm already


1303
00:50:59,236 --> 00:50:59,716
working on."


1304
00:50:59,716 --> 00:51:01,716
But here's the great news
about UICollectionView,


1305
00:51:02,086 --> 00:51:04,806
the API is incredibly
similar to UITableView.


1306
00:51:05,156 --> 00:51:07,736
So you-- these are really
just the methods you need,


1307
00:51:07,736 --> 00:51:09,086
numberOfSections
InCollectionView,


1308
00:51:09,086 --> 00:51:10,926
and I'm just returning my--


1309
00:51:10,926 --> 00:51:15,236
the count, and
numberOfItemsInSection,


1310
00:51:15,396 --> 00:51:16,446
so it's just like TableView.


1311
00:51:16,836 --> 00:51:20,196
And then I can just
return the view I want.


1312
00:51:20,196 --> 00:51:22,666
So I'm saying, OK-- and this
is actually [inaudible] code


1313
00:51:22,796 --> 00:51:24,786
from the WWDC App that I've
cleaned up a little bit,


1314
00:51:24,786 --> 00:51:26,306
but this is actually
what we're doing.


1315
00:51:26,306 --> 00:51:28,076
So we pull sessions
from a section.


1316
00:51:28,526 --> 00:51:30,026
We get that particular
session object.


1317
00:51:30,496 --> 00:51:34,206
We dequeue the cell just like
you would do in TableView.


1318
00:51:34,556 --> 00:51:36,806
And then we set the session
and return self, that's it,


1319
00:51:36,806 --> 00:51:37,746
and it shows up in the screen.


1320
00:51:38,026 --> 00:51:41,656
The real work that's done in
the app is the custom layout.


1321
00:51:41,656 --> 00:51:46,356
And it's a little bit more
in-depth, but you can do it.


1322
00:51:46,356 --> 00:51:48,546
And of course, with
Mavericks, you know,


1323
00:51:48,786 --> 00:51:51,316
being announced this week,
we think we're going to get--


1324
00:51:51,316 --> 00:51:52,846
you know, a lot of people are
kind of like, "Hey, you know,


1325
00:51:52,846 --> 00:51:53,906
this iOS thing is really cool


1326
00:51:53,906 --> 00:51:56,696
but I can actually be making Mac
apps too and be really awesome."


1327
00:51:56,966 --> 00:52:00,326
So one thing to know is if in
the past you're used to working


1328
00:52:00,326 --> 00:52:03,876
with UITableView and then
you were thinking, "Well,


1329
00:52:03,876 --> 00:52:04,846
I'd like [inaudible] Mac app


1330
00:52:04,846 --> 00:52:06,526
but I don't really
know what that's like,"


1331
00:52:07,136 --> 00:52:08,276
one thing you should know is


1332
00:52:08,276 --> 00:52:11,506
that in Lion we added this
version of NSTableView


1333
00:52:11,506 --> 00:52:14,056
that actually use views
just like UITableView.


1334
00:52:14,686 --> 00:52:16,116
So all that stuff that--


1335
00:52:16,116 --> 00:52:18,856
all those mechanisms that you're
familiar with from UITableView,


1336
00:52:18,856 --> 00:52:21,546
just doing arbitrary
layout in interface builder


1337
00:52:21,546 --> 00:52:24,496
and just returning entire
views, it's actually--


1338
00:52:24,496 --> 00:52:25,616
you know, it's X now,
so you can do it.


1339
00:52:25,616 --> 00:52:28,036
And the same people that worked
on UITableView or NSTableView,


1340
00:52:28,036 --> 00:52:30,166
so you can imagine that it
works pretty much the same.


1341
00:52:30,856 --> 00:52:32,826
And so, you get all that
hardware accelerated stuff.


1342
00:52:32,826 --> 00:52:34,036
You get the animation.


1343
00:52:34,036 --> 00:52:36,066
Here are some of the
animations facts you can do.


1344
00:52:36,066 --> 00:52:38,026
And you can actually add
Core Animation stuff.


1345
00:52:38,026 --> 00:52:40,856
So if you for some reason wanted
a TableView of shapes, clipping,


1346
00:52:40,856 --> 00:52:41,896
gradients, or something
like that,


1347
00:52:41,896 --> 00:52:42,666
you could actually do that.


1348
00:52:43,576 --> 00:52:46,036
And again, actually this
is incredibly similar


1349
00:52:46,036 --> 00:52:48,546
to the CollectionView example,
numberOfRowsInTableView.


1350
00:52:49,086 --> 00:52:50,226
You turn a row for the view


1351
00:52:50,586 --> 00:52:52,906
and I just can change whatever
properties I want before it


1352
00:52:52,906 --> 00:52:53,396
gets displayed.


1353
00:52:53,906 --> 00:52:58,426
And the one thing I want to
point out here, just calling


1354
00:52:58,426 --> 00:52:59,296
out a little bit separately,


1355
00:52:59,636 --> 00:53:04,776
is there's an existing
class that's NSTableCellView


1356
00:53:05,136 --> 00:53:06,446
which you can use generically.


1357
00:53:06,446 --> 00:53:08,826
You can just use as it is
or you can subclass it,


1358
00:53:08,936 --> 00:53:11,646
or you can just whatever
view you want.


1359
00:53:11,646 --> 00:53:13,336
So if you have-- I have an MS--


1360
00:53:13,336 --> 00:53:16,226
MyGridView and I've just
completely implement


1361
00:53:16,226 --> 00:53:16,856
that from scratch.


1362
00:53:16,856 --> 00:53:18,196
So it's just something
I was using elsewhere


1363
00:53:18,196 --> 00:53:19,086
but I'm including the table.


1364
00:53:19,086 --> 00:53:20,466
So if you have a lot
of flexibility there.


1365
00:53:21,176 --> 00:53:21,626
All right.


1366
00:53:21,996 --> 00:53:25,056
So, was that-- that
was pretty fast,


1367
00:53:25,056 --> 00:53:26,606
but I think we hit everybody.


1368
00:53:27,006 --> 00:53:29,016
So we got-- pretty much
everybody learned something.


1369
00:53:29,466 --> 00:53:32,186
So with all this stuff, if
you have questions on any


1370
00:53:32,186 --> 00:53:34,286
of this stuff, you can talk to
our good friend Dave DeLong.


1371
00:53:34,836 --> 00:53:37,106
He's the App Frameworks and
Developer Tools of Evangelist.


1372
00:53:37,146 --> 00:53:38,206
There's documentation and forms,


1373
00:53:38,206 --> 00:53:40,046
in case somehow you
haven't heard of those yet.


1374
00:53:40,946 --> 00:53:42,886
And do checkout those other
sessions 'cause they're really,


1375
00:53:42,886 --> 00:53:43,336
really good.


1376
00:53:43,336 --> 00:53:45,466
There's Designing Code
for Performance on video


1377
00:53:45,466 --> 00:53:46,906
and Core Data Performance
Optimization


1378
00:53:46,906 --> 00:53:48,976
for Debugging, and that is it.


1379
00:53:48,976 --> 00:53:49,916
Thank you very much.


1380
00:53:49,966 --> 00:53:51,966
[Applause]


1381
00:53:52,016 --> 00:53:57,156
[ Silence ]

