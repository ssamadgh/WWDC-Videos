1
00:00:13,046 --> 00:00:13,526
>> Welcome.


2
00:00:13,716 --> 00:00:15,116
Welcome to Friday.


3
00:00:15,116 --> 00:00:16,186
Thanks for being here.


4
00:00:16,896 --> 00:00:18,586
My name is Sal Soghoian.


5
00:00:18,586 --> 00:00:19,676
I am the Product Manager


6
00:00:19,676 --> 00:00:22,686
for Automation Technologies
at Apple, Inc.


7
00:00:23,236 --> 00:00:27,046
And this is Session
306, this is a big day.


8
00:00:27,246 --> 00:00:30,266
We get to welcome
JavaScript to the family


9
00:00:30,266 --> 00:00:32,776
of scripting languages on OS X.


10
00:00:33,516 --> 00:00:36,616
[ Applause ]


11
00:00:37,116 --> 00:00:38,956
We've been waiting
a long time for this


12
00:00:38,956 --> 00:00:40,766
and I know our customers
have, too,


13
00:00:40,766 --> 00:00:42,466
and we're really
thrilled about it.


14
00:00:43,136 --> 00:00:46,006
And before I get into the
details of the language


15
00:00:46,006 --> 00:00:49,486
and how it works I'd like
to take a moment to reflect


16
00:00:49,486 --> 00:00:54,116
on the state of automation,
beginning with Mavericks.


17
00:00:55,416 --> 00:00:59,386
Now, in Mavericks we introduced
a host of new features,


18
00:00:59,596 --> 00:01:01,516
some very powerful
things beginning


19
00:01:01,516 --> 00:01:05,296
with notification support in
both the scripting language


20
00:01:05,296 --> 00:01:06,636
and in Automator as well.


21
00:01:06,636 --> 00:01:10,376
So it became very easy to
use notifications instead


22
00:01:10,376 --> 00:01:13,506
of posting dialogues in
your automation routines.


23
00:01:14,226 --> 00:01:16,776
We also introduced
Code Signing ability


24
00:01:16,776 --> 00:01:19,356
in our Editor applications,
both in Automator


25
00:01:19,356 --> 00:01:21,926
and in the Script
Editor, which is great


26
00:01:21,926 --> 00:01:25,966
because then you could sign and
deliver Automation solutions


27
00:01:25,966 --> 00:01:28,296
to your customers,
friends and coworkers.


28
00:01:29,096 --> 00:01:31,686
We also introduced
a new construct


29
00:01:31,686 --> 00:01:34,886
in AppleScript called the
"use" statement that acts


30
00:01:34,886 --> 00:01:39,246
like an importer to import
functionality from applications


31
00:01:39,246 --> 00:01:43,746
and frameworks and scripting
editions, and allow them


32
00:01:44,136 --> 00:01:46,136
to be used in your scripts.


33
00:01:46,496 --> 00:01:49,986
And by doing this we
also made it possible


34
00:01:49,986 --> 00:01:53,076
to have Script Libraries
that we introduced.


35
00:01:53,556 --> 00:01:56,596
And Script Libraries are
scripts that you create yourself


36
00:01:57,356 --> 00:02:00,746
that contain your favorite
sub-routines or handlers,


37
00:02:01,286 --> 00:02:04,736
and you can call and load these
libraries from scripts anywhere


38
00:02:04,736 --> 00:02:06,086
in the operating system.


39
00:02:06,566 --> 00:02:11,206
You can also take advantage of
AppleScript Objective-C and any


40
00:02:11,206 --> 00:02:13,316
of the Cocoa calls
that you want to use.


41
00:02:13,576 --> 00:02:17,366
So they were very powerful,
very useful they be introduced.


42
00:02:18,236 --> 00:02:21,276
And then finally, we had
a new feature that worked


43
00:02:21,276 --> 00:02:24,666
on English-only systems but we
thought it was so interesting


44
00:02:24,666 --> 00:02:26,256
that we introduced it.


45
00:02:26,696 --> 00:02:30,056
It was called Speakable
Workflows, and it allowed you


46
00:02:30,056 --> 00:02:35,516
to take your Automator workflow
and save it as a speakable item


47
00:02:35,746 --> 00:02:37,646
in the dictation architecture.


48
00:02:37,646 --> 00:02:40,396
So you could say a command and
it would run your workflow.


49
00:02:40,946 --> 00:02:43,616
And so Mavericks was a very
productive release for us,


50
00:02:43,616 --> 00:02:46,526
we were very excited about
it, but we were also excited


51
00:02:46,526 --> 00:02:49,226
about what we've
done in Yosemite


52
00:02:49,226 --> 00:02:52,996
and how it builds upon the
groundwork we laid in Mavericks.


53
00:02:53,566 --> 00:02:56,776
As part of this evolutionary
process,


54
00:02:57,166 --> 00:03:00,456
we integrated Code Signing
with workflow files.


55
00:03:00,786 --> 00:03:03,926
So not only applets but now
your workflow files can be


56
00:03:03,926 --> 00:03:05,216
Code-Signed as well.


57
00:03:05,946 --> 00:03:08,666
And because of changes
that we implemented


58
00:03:08,666 --> 00:03:12,586
in the AppleScript language for
supporting optional parameters


59
00:03:12,586 --> 00:03:15,666
in sub-routines and
handlers we were enabled


60
00:03:15,666 --> 00:03:19,236
to upgrade the scripting
library support


61
00:03:19,236 --> 00:03:22,616
so that you can now have your
favorite calls have optional


62
00:03:22,616 --> 00:03:24,486
parameters and use
those as well.


63
00:03:25,016 --> 00:03:26,536
Very good improvement there.


64
00:03:27,446 --> 00:03:30,586
And listening to customer
requests that have been


65
00:03:31,166 --> 00:03:33,696
for years and years,
requesting some way


66
00:03:33,696 --> 00:03:38,866
to indicate a progress method
for their Automation routines,


67
00:03:38,896 --> 00:03:43,146
we now have built-in
script progress indicators.


68
00:03:43,346 --> 00:03:48,836
So, by calling simple properties
you can have your scripts


69
00:03:48,836 --> 00:03:52,506
display a progress
indicator, a circle,


70
00:03:52,706 --> 00:03:56,646
or even as a progress
bar in a floating window,


71
00:03:56,806 --> 00:03:59,996
and all of this is done for
you automatically, all you have


72
00:04:00,036 --> 00:04:02,796
to do is set properties
within your scripts.


73
00:04:03,256 --> 00:04:05,916
So I think our customers
are going to really enjoy


74
00:04:05,916 --> 00:04:07,266
that particular feature.


75
00:04:08,156 --> 00:04:10,806
And we took the idea
of Speakable Workflows


76
00:04:10,806 --> 00:04:12,566
and we've advanced it now


77
00:04:12,926 --> 00:04:16,366
because of the dictation
architecture in Yosemite


78
00:04:16,366 --> 00:04:18,435
that works with all languages.


79
00:04:19,125 --> 00:04:21,986
We now have a new
template item in Automator


80
00:04:22,246 --> 00:04:24,806
for creating a Dictation
Command.


81
00:04:25,266 --> 00:04:28,576
So you create your workflow,
you save it, it gets saved


82
00:04:28,576 --> 00:04:32,186
into the dictation architecture
and when you're in the process


83
00:04:32,186 --> 00:04:34,656
of dictating or just
sitting at the machine,


84
00:04:34,936 --> 00:04:38,166
you can say the name of your
command and it will execute.


85
00:04:38,736 --> 00:04:40,976
Very interesting, very
powerful, I know you're going


86
00:04:40,976 --> 00:04:43,246
to have a lot of
fun exploring that.


87
00:04:43,746 --> 00:04:47,106
So that's just a quick
overview of where we've been,


88
00:04:47,516 --> 00:04:50,456
but something that's been
on our minds for a long time


89
00:04:50,456 --> 00:04:52,576
that we've happy
and very pleased


90
00:04:52,576 --> 00:04:55,766
to have here today is
JavaScript for Automation.


91
00:04:57,036 --> 00:05:01,496
Now, those of you that are
familiar with JavaScript


92
00:05:01,496 --> 00:05:05,956
from the web-based community,
this is not the JavaScript


93
00:05:05,956 --> 00:05:11,326
for writing a DOM that uses CSS
and HTML5 to create a web app.


94
00:05:11,716 --> 00:05:15,366
We're talking about extending
the JavaScript core language


95
00:05:15,866 --> 00:05:18,736
to integrate with the open
scripting architecture.


96
00:05:19,016 --> 00:05:22,886
And by doing this, you
have now gained the ability


97
00:05:22,886 --> 00:05:26,266
to pull all those levers
inside of the scriptable apps


98
00:05:26,266 --> 00:05:30,096
on your operating system to
perform the kind of repetitive


99
00:05:30,096 --> 00:05:33,856
or interesting or complex
tasks that you do every day.


100
00:05:34,066 --> 00:05:38,526
And now this power is available
to you through JavaScript.


101
00:05:39,296 --> 00:05:42,586
Now many of you that write
JavaScript professionally


102
00:05:42,586 --> 00:05:47,676
or as your focus, you're used
to using editors like BBEdit,


103
00:05:47,896 --> 00:05:53,136
Sublime Text, WebStorm,
TextMate, things like that.


104
00:05:53,526 --> 00:05:58,596
Initially, as you adapt to
JavaScript for Automation,


105
00:05:58,876 --> 00:06:00,326
you'll write your first scripts


106
00:06:00,326 --> 00:06:02,666
in the Script Editor
application.


107
00:06:03,146 --> 00:06:05,866
And I'm going to give
you just a short overview


108
00:06:06,106 --> 00:06:09,546
of this application, its
interface and preferences


109
00:06:09,856 --> 00:06:12,416
so that you'll understand
what's happening


110
00:06:12,416 --> 00:06:14,896
as David presents
JavaScript for you.


111
00:06:15,656 --> 00:06:19,246
So let me take a look at the
Script Editor application.


112
00:06:19,886 --> 00:06:22,916
So when you open the Script
Editor Application you get this


113
00:06:22,916 --> 00:06:25,756
very simple interface,
this is a script window.


114
00:06:26,346 --> 00:06:29,966
And it has a simple but
very powerful design to it,


115
00:06:30,506 --> 00:06:32,176
beginning with the little slider


116
00:06:32,486 --> 00:06:35,246
that separates the two
main panes of the window,


117
00:06:35,576 --> 00:06:38,966
the script pane where you
enter the code for your script,


118
00:06:39,676 --> 00:06:42,656
and the bottom pane
contains an event log.


119
00:06:42,996 --> 00:06:46,856
So as the script is executing
you'll see the events listed


120
00:06:46,856 --> 00:06:49,586
there with the results
coming in from the events.


121
00:06:49,886 --> 00:06:51,826
And this is a live
log that happens


122
00:06:51,826 --> 00:06:53,796
as the script is executing.


123
00:06:54,756 --> 00:06:58,146
At the top there are
some simple controls


124
00:06:58,146 --> 00:06:59,826
for basically compiling
the script


125
00:06:59,826 --> 00:07:01,726
to make sure your
syntax is correct,


126
00:07:02,556 --> 00:07:05,596
and there's also a control for
running or stopping your script.


127
00:07:06,566 --> 00:07:10,276
Now, there at the bottom
here is a language control.


128
00:07:10,276 --> 00:07:12,656
So make sure if you're
writing JavaScript


129
00:07:13,006 --> 00:07:17,516
that this popup menu is set
for the JavaScript language.


130
00:07:18,116 --> 00:07:22,516
And that's basically
the interface,


131
00:07:22,516 --> 00:07:27,156
and the way that it works is
you enter your script code


132
00:07:27,586 --> 00:07:31,306
into the top area, then
you click the Run button


133
00:07:32,136 --> 00:07:35,986
and as it executes you can see


134
00:07:35,986 --> 00:07:37,856
that there's a progress
indicator here


135
00:07:37,856 --> 00:07:40,456
on the right showing the
progress of the script,


136
00:07:40,716 --> 00:07:42,976
and you can watch
the event log go by.


137
00:07:43,596 --> 00:07:47,696
Now this simple script that
exported open Keynote documents


138
00:07:47,726 --> 00:07:50,176
to movies, you can
see the results of it


139
00:07:50,176 --> 00:07:52,466
and how it was logged
and everything indicated


140
00:07:52,466 --> 00:07:54,686
in the final result of
the script at the bottom.


141
00:07:55,106 --> 00:07:57,236
So this is the interface
that you have


142
00:07:57,286 --> 00:07:59,186
when you're executing scripts,


143
00:07:59,186 --> 00:08:01,426
and as David shows
you the examples,


144
00:08:01,596 --> 00:08:03,626
this is what you're
going to see.


145
00:08:04,226 --> 00:08:06,806
There's some other important
preferences you should be aware


146
00:08:06,806 --> 00:08:09,096
of and let me just
quickly show those to you.


147
00:08:09,536 --> 00:08:14,896
So, in the Preferences menu
from the Application menu,


148
00:08:15,436 --> 00:08:19,556
in the General Settings
pane there is a Default


149
00:08:19,556 --> 00:08:20,906
Language popup.


150
00:08:20,906 --> 00:08:22,756
If you're going to
be using JavaScript


151
00:08:22,756 --> 00:08:26,376
as your primary language for
scripting you want to make sure


152
00:08:26,376 --> 00:08:29,576
that you change this
value to JavaScript.


153
00:08:29,946 --> 00:08:32,135
Now this says JavaScript 1.0.


154
00:08:32,135 --> 00:08:34,765
This is JavaScript
for Automation 1.0.


155
00:08:34,765 --> 00:08:37,385
It is not JavaScript 1.0.


156
00:08:37,385 --> 00:08:41,275
We use the current JavaScript
core language as the basis.


157
00:08:41,346 --> 00:08:44,316
So don't be freaked out
when you see 1.0 there.


158
00:08:44,796 --> 00:08:49,556
Also, make sure that you
check the Show Script menu


159
00:08:49,556 --> 00:08:53,296
in menu bar option, and what
this will do is activate the


160
00:08:53,376 --> 00:08:56,666
system-wide Script Menu at the
top right of your menu bar.


161
00:08:56,996 --> 00:09:00,946
And from this Script Menu you
can host your favorite scripts


162
00:09:01,226 --> 00:09:03,646
and you can make them
available contextually


163
00:09:03,646 --> 00:09:05,216
within certain applications.


164
00:09:05,216 --> 00:09:08,306
So if you write scripts for the
Finder, they can only appear


165
00:09:08,336 --> 00:09:09,246
if the Finder's there.


166
00:09:09,246 --> 00:09:10,916
If you write scripts for Pages,


167
00:09:11,056 --> 00:09:12,866
they'll only appear
when Pages are there.


168
00:09:13,106 --> 00:09:16,166
It's up to you, the Script
Menu runs shell scripts,


169
00:09:16,166 --> 00:09:19,246
Apple scripts, applications,
workflows, JavaScripts,


170
00:09:20,006 --> 00:09:21,856
any kind of scripting
language supported


171
00:09:21,856 --> 00:09:24,646
by the operating system can
run from the Script Menu.


172
00:09:24,646 --> 00:09:26,576
So you'll be taking
advantage of that.


173
00:09:27,356 --> 00:09:31,906
In addition, if you want to set
certain coloring for the code


174
00:09:31,906 --> 00:09:35,516
that you use, this formatting
pane is where you'll do that.


175
00:09:35,716 --> 00:09:39,096
You can choose fonts, font
size and coloring to apply


176
00:09:39,506 --> 00:09:42,026
to fit comfortably with
what you're used to.


177
00:09:43,306 --> 00:09:46,396
Next, I'd like to
look at dictionaries.


178
00:09:46,876 --> 00:09:49,356
Now, in the operating system,


179
00:09:49,356 --> 00:09:52,506
every scriptable
application carries internally


180
00:09:52,506 --> 00:09:55,646
within its bundle a
complete dictionary


181
00:09:55,646 --> 00:09:58,316
of all the terms
that it understands.


182
00:09:58,706 --> 00:10:02,576
It will list all the classes and
all the methods and the commands


183
00:10:02,576 --> 00:10:06,396
and the properties and elements
that it is familiar with.


184
00:10:06,626 --> 00:10:09,716
So this is where you will
go to learn about how


185
00:10:09,716 --> 00:10:12,266
to control a particular
application.


186
00:10:12,616 --> 00:10:14,826
And what you do is you
choose Open Dictionary


187
00:10:14,826 --> 00:10:18,176
from the File menu and in the
forthcoming dialogue choose


188
00:10:18,176 --> 00:10:18,966
an application.


189
00:10:19,686 --> 00:10:23,046
When you do that you'll
see a script viewer window


190
00:10:23,046 --> 00:10:25,606
like this one for the
Keynote dictionary,


191
00:10:26,856 --> 00:10:29,936
and this is what you
see when you look


192
00:10:29,936 --> 00:10:32,376
at an application's
scripting dictionary,


193
00:10:32,376 --> 00:10:35,476
and this is what you will do
to navigate that dictionary.


194
00:10:36,626 --> 00:10:38,896
At the top is a Language button,


195
00:10:38,896 --> 00:10:41,416
so this dictionary
viewer functions


196
00:10:41,536 --> 00:10:44,006
for all the scripting
languages we support,


197
00:10:44,006 --> 00:10:48,216
so it supports JavaScript,
AppleScript or Objective-C,


198
00:10:48,376 --> 00:10:49,906
and you can change the mode


199
00:10:50,026 --> 00:10:52,736
for viewing the content
right from this menu.


200
00:10:52,736 --> 00:10:57,976
Now at the top part of
this window, the top pane


201
00:10:57,976 --> 00:10:59,826
of this window, is
the Model Viewer.


202
00:10:59,826 --> 00:11:01,976
And this is where you
see how the objects


203
00:11:02,326 --> 00:11:06,086
in the application
scripting model are reflected.


204
00:11:06,796 --> 00:11:11,496
On the left-hand side, typically
a scripting dictionary is


205
00:11:11,496 --> 00:11:15,256
grouped into suites, and these
suites are usually grouped


206
00:11:15,256 --> 00:11:17,806
by functionality,
by what they do.


207
00:11:18,116 --> 00:11:20,046
In this particular
example you'll see


208
00:11:20,046 --> 00:11:21,666
that there's multiple suites.


209
00:11:22,096 --> 00:11:23,716
There's suites for iWork.


210
00:11:24,206 --> 00:11:27,766
Because Keynote is part of the
iWork family of applications,


211
00:11:28,546 --> 00:11:31,486
the iWork Suites
of common objects


212
00:11:31,486 --> 00:11:34,076
and common commands
are included there.


213
00:11:34,296 --> 00:11:37,286
And then Keynote has
its own suite of things


214
00:11:37,286 --> 00:11:39,946
that are particular for
the Keynote application.


215
00:11:39,946 --> 00:11:42,936
And then once the
suite is selected,


216
00:11:43,336 --> 00:11:47,566
you'll see in the next column
the methods and the classes


217
00:11:47,566 --> 00:11:50,146
that belong to that
particular suite.


218
00:11:50,146 --> 00:11:53,126
So here we have commands
like Export,


219
00:11:53,476 --> 00:11:55,746
where you would export
a presentation.


220
00:11:55,746 --> 00:11:57,796
And you see classes
like document.


221
00:11:58,366 --> 00:12:02,136
And then when you select a
class, you'll see the elements


222
00:12:02,356 --> 00:12:06,026
that belong to that class
in the right-hand column,


223
00:12:06,376 --> 00:12:10,096
and also the properties
of that particular class.


224
00:12:10,096 --> 00:12:14,126
And here you see the properties
of a Keynote document.


225
00:12:14,896 --> 00:12:18,146
Now for further information
and detail about these,


226
00:12:18,396 --> 00:12:21,666
in the bottom half of the
window is the dictionary viewer.


227
00:12:21,666 --> 00:12:25,426
And the dictionary viewer
contains the definitions for all


228
00:12:25,426 --> 00:12:27,146
of those particular elements.


229
00:12:27,256 --> 00:12:29,496
So when you want to
know about, well,


230
00:12:29,496 --> 00:12:32,466
how do I script the Finder,
or how do I script Numbers,


231
00:12:32,756 --> 00:12:35,766
how do I script Keynote,
how do I script Aperture?


232
00:12:36,376 --> 00:12:40,146
You open a dictionary and this
is where you learn and explore


233
00:12:40,306 --> 00:12:43,006
to find out how to
control those applications.


234
00:12:43,636 --> 00:12:46,756
So that's the scripting
dictionary,


235
00:12:46,756 --> 00:12:49,026
and that's the Script
Editor application.


236
00:12:49,026 --> 00:12:53,546
So, let me get out of the way
and bring up David Steinberg,


237
00:12:53,846 --> 00:12:56,296
who's the newest
member of our team,


238
00:12:56,296 --> 00:12:58,976
to show you JavaScript
for Automation.


239
00:12:59,206 --> 00:12:59,996
Enjoy this [applause].


240
00:13:02,226 --> 00:13:02,946
>> Thank you, Sal.


241
00:13:03,856 --> 00:13:04,596
Hello, everyone.


242
00:13:04,596 --> 00:13:06,256
Thank you for being here.


243
00:13:06,256 --> 00:13:07,206
It's a great honor.


244
00:13:07,286 --> 00:13:09,546
I'm really excited to be showing
you this awesome new feature


245
00:13:09,846 --> 00:13:12,606
of OS X Yosemite,
JavaScript for Automation.


246
00:13:13,066 --> 00:13:17,586
So today's talk will cover what
JavaScript for Automation is


247
00:13:17,966 --> 00:13:21,386
and how it works, how you can
use JavaScript for Automation


248
00:13:21,826 --> 00:13:23,726
from basic to more
advanced techniques,


249
00:13:24,236 --> 00:13:25,106
and finally we'll talk


250
00:13:25,106 --> 00:13:27,446
about where you can use
JavaScript for Automation.


251
00:13:28,036 --> 00:13:32,466
So to talk about what
JavaScript for Automation is,


252
00:13:33,186 --> 00:13:36,906
let's take a look at
the underlying pieces.


253
00:13:37,056 --> 00:13:39,576
Automation allows you
to accomplish tasks


254
00:13:39,746 --> 00:13:43,056
on your Mac automatically,
from simple tasks,


255
00:13:43,516 --> 00:13:46,776
such as changing the name of
a hundred files all at once,


256
00:13:47,276 --> 00:13:51,436
to more complex tasks, such as
sending personalized directions


257
00:13:51,486 --> 00:13:53,436
to guests before a
party you're having.


258
00:13:54,626 --> 00:13:58,656
I'd like to demonstrate the
power of Automation to you now.


259
00:13:59,536 --> 00:14:02,026
So I work for Acme
Widgets, we're a company


260
00:14:02,026 --> 00:14:03,956
that makes widgets,
as you might expect.


261
00:14:04,706 --> 00:14:07,466
We have three main
clients, Japan, USA,


262
00:14:07,466 --> 00:14:10,976
and then across Europe, and here
I have a chart detailing some


263
00:14:10,976 --> 00:14:13,826
of our widgets' prices and
the regions they go to,


264
00:14:13,826 --> 00:14:15,796
and the particular
currency, and so on.


265
00:14:16,486 --> 00:14:19,666
And now I have four
upcoming presentations.


266
00:14:20,246 --> 00:14:22,856
First, I have to give a
presentation to the president


267
00:14:22,856 --> 00:14:26,006
of the company about all of
the regions that we work with,


268
00:14:26,446 --> 00:14:28,976
all of their individual
prices, currencies, and so on,


269
00:14:29,056 --> 00:14:31,376
and then I have to give
presentations to each


270
00:14:31,376 --> 00:14:35,006
of those regions only detailing
the particular information


271
00:14:35,006 --> 00:14:36,236
that pertains to that region.


272
00:14:36,976 --> 00:14:38,466
So, now I'm thinking, okay,


273
00:14:38,526 --> 00:14:39,846
I have four Keynotes
I have to make.


274
00:14:40,506 --> 00:14:41,726
Well, let's start
with the first.


275
00:14:41,826 --> 00:14:45,086
I have all my data here,
it's formatted as I want it,


276
00:14:45,366 --> 00:14:47,586
I have some images that I
can use related to this data.


277
00:14:47,586 --> 00:14:51,006
How about I write a script
that does this for me?


278
00:14:51,636 --> 00:14:53,556
Well, I've done just that.


279
00:14:53,996 --> 00:14:56,926
So here I have a script, don't
worry about understanding all


280
00:14:56,926 --> 00:14:59,836
of it at the moment, but it's a
JavaScript for Automation script


281
00:14:59,836 --> 00:15:02,196
that uses this Numbers document


282
00:15:02,616 --> 00:15:05,236
and produces a full slide
deck for me in Keynote.


283
00:15:05,756 --> 00:15:09,796
So if I run this here, we see
our slides are being created


284
00:15:09,846 --> 00:15:13,776
for us with the information
that we got from that data,


285
00:15:13,776 --> 00:15:17,466
and now we have an entire slide
deck ready for my president


286
00:15:17,466 --> 00:15:19,596
to see, detailing
all of our widgets,


287
00:15:19,876 --> 00:15:22,756
their prices per region,
currency, and so on.


288
00:15:23,036 --> 00:15:23,766
This is perfect.


289
00:15:24,326 --> 00:15:27,476
Okay, so I've accomplished
one, completely automatically.


290
00:15:27,586 --> 00:15:31,326
I have three more to do,
and each of those are going


291
00:15:31,326 --> 00:15:33,186
to be pretty much
the exact same.


292
00:15:33,406 --> 00:15:36,346
Same number of slides, same
images, same information,


293
00:15:36,746 --> 00:15:39,546
changed per region with
particular currency and so on.


294
00:15:40,116 --> 00:15:42,716
And in fact, all of that
information is already


295
00:15:42,716 --> 00:15:45,386
in this presentation I have
here, I just need to slim it


296
00:15:45,386 --> 00:15:46,576
down for each version.


297
00:15:47,426 --> 00:15:49,076
So I wrote myself
a helper script,


298
00:15:49,236 --> 00:15:50,586
I'm going to use
it multiple times,


299
00:15:50,586 --> 00:15:52,216
so I put it in my script menu.


300
00:15:52,886 --> 00:15:55,176
And what this does
is it lets me say,


301
00:15:55,696 --> 00:15:57,016
where am I presenting today?


302
00:15:57,086 --> 00:15:59,716
Well, today I'm going to
be presenting in Japan.


303
00:15:59,816 --> 00:16:03,086
So I just slim down my
Keynote to the few slides


304
00:16:03,086 --> 00:16:04,276
that are important, put it


305
00:16:04,276 --> 00:16:06,676
in presentation mode
and I'm able to go.


306
00:16:06,676 --> 00:16:08,186
Hello everyone, thank
you for being here.


307
00:16:08,186 --> 00:16:09,236
Let's talk about prices.


308
00:16:09,236 --> 00:16:10,716
It's been a real
pleasure, have a good day.


309
00:16:11,496 --> 00:16:13,586
Now [laughter], right?


310
00:16:14,086 --> 00:16:17,296
Now, I'm going to be giving
a presentation for the USA.


311
00:16:17,796 --> 00:16:20,566
Okay, I don't want to make
another slide deck all together,


312
00:16:20,566 --> 00:16:23,116
I'm going to use my nice
little helper here, USA.


313
00:16:23,416 --> 00:16:24,906
Hello everybody, thank
you for being here.


314
00:16:24,906 --> 00:16:26,006
Let's talk some dollars.


315
00:16:26,006 --> 00:16:27,716
It's been a real
pleasure, have a nice day.


316
00:16:28,386 --> 00:16:28,936
Beautiful.


317
00:16:29,176 --> 00:16:34,006
That entire automatable
process was automated for me


318
00:16:34,236 --> 00:16:35,936
with just a couple little
scripts that I wrote.


319
00:16:36,546 --> 00:16:39,736
That made my life easier,
got my work done faster.


320
00:16:40,086 --> 00:16:42,186
And that is the power
of Automation.


321
00:16:44,516 --> 00:16:48,696
[ Applause ]


322
00:16:49,196 --> 00:16:52,126
Those demos were made possible
by scripting applications,


323
00:16:52,606 --> 00:16:55,696
and applications that are built
using Cocoa automatically have a


324
00:16:55,696 --> 00:16:58,406
certain level of scriptability,
such as being able


325
00:16:58,406 --> 00:17:00,106
to be told to open, or to print.


326
00:17:01,046 --> 00:17:02,016
And a wide variety


327
00:17:02,016 --> 00:17:04,415
of applications have fully
embraced scriptability,


328
00:17:04,836 --> 00:17:07,455
detailing the Object
Model of the application


329
00:17:07,766 --> 00:17:13,376
and offering rich suites of
functionality beyond the basics.


330
00:17:13,935 --> 00:17:17,506
Apple events are the underlying
communication mechanism behind


331
00:17:17,506 --> 00:17:18,566
application scripting.


332
00:17:19,386 --> 00:17:22,026
They provide access to the
scriptable pieces and parts


333
00:17:22,026 --> 00:17:24,116
of an application
that are defined


334
00:17:24,116 --> 00:17:27,116
in an application's scripting
dictionary, as Sal showed,


335
00:17:27,715 --> 00:17:31,286
detailing what objects can
be interacted with and how.


336
00:17:31,426 --> 00:17:32,816
So when you script
an application


337
00:17:33,126 --> 00:17:36,496
in whatever language you may,
its scripting dictionary is read


338
00:17:36,496 --> 00:17:37,996
and then Apple events are used


339
00:17:37,996 --> 00:17:39,436
to communicate with
the application.


340
00:17:40,446 --> 00:17:42,696
So let's take a look at an
example of an Object Model.


341
00:17:43,266 --> 00:17:47,576
Here we have Mail, which
has an application object


342
00:17:48,376 --> 00:17:52,176
with an inbox property, with
a messages element array,


343
00:17:52,576 --> 00:17:54,806
with each element
individually accessible.


344
00:17:55,466 --> 00:17:58,556
So for example, we could
pinpoint the second message


345
00:17:58,556 --> 00:18:02,486
of the inbox of the application
mail, as an object specifier,


346
00:18:02,846 --> 00:18:05,286
or a reference to
that particular object


347
00:18:05,286 --> 00:18:07,226
in that particular application.


348
00:18:08,736 --> 00:18:10,766
This is great, we've
looked really closely


349
00:18:10,766 --> 00:18:13,446
at the things behind Automation
and application scripting.


350
00:18:14,216 --> 00:18:16,876
Now let's talk about
JavaScript and how the power


351
00:18:16,876 --> 00:18:18,606
of Automation was brought to it.


352
00:18:19,766 --> 00:18:23,396
JavaScript is a scripting
language with C-like syntax


353
00:18:23,596 --> 00:18:25,456
and objects with
prototype-based inheritance.


354
00:18:26,096 --> 00:18:26,886
It's most well known


355
00:18:26,886 --> 00:18:29,686
in the browser being the
scripting language of HTML5.


356
00:18:29,756 --> 00:18:32,226
But it's also become
quite popular


357
00:18:32,226 --> 00:18:36,316
as a server-side scripting
language, evidenced by Node.js.


358
00:18:36,716 --> 00:18:40,036
JavaScript on OS X is
powered by JavaScriptCore,


359
00:18:40,216 --> 00:18:42,196
the engine used by
WebKit and Safari.


360
00:18:44,166 --> 00:18:47,686
JavaScript for Automation
is built on JavaScriptCore.


361
00:18:48,326 --> 00:18:51,576
It's using the modern JavaScript
environment, and it's a kind


362
00:18:51,576 --> 00:18:52,916
of server-side JavaScript,


363
00:18:53,196 --> 00:18:56,336
or as we like to call it
OS Automation JavaScript.


364
00:18:56,866 --> 00:18:58,946
And while the underlying
engine is the same,


365
00:18:59,466 --> 00:19:01,296
JavaScript for Automation
is quite different


366
00:19:01,296 --> 00:19:02,646
from running scripts
in your browser.


367
00:19:03,376 --> 00:19:04,986
When you use JavaScript
for Automation,


368
00:19:05,056 --> 00:19:08,096
you can do everything that
you as the Mac user can do.


369
00:19:08,096 --> 00:19:10,516
And this is very different
from browser scripts


370
00:19:10,516 --> 00:19:12,276
that don't have access
to your personal data


371
00:19:12,486 --> 00:19:14,676
or the applications on your Mac.


372
00:19:15,106 --> 00:19:17,626
And in browser scripts you
might expect a window object


373
00:19:17,626 --> 00:19:20,216
or a document object, but you're
not going to have those here.


374
00:19:20,216 --> 00:19:21,686
You have a host of
different objects


375
00:19:21,686 --> 00:19:24,906
that you can interact
with, to automate your Mac.


376
00:19:25,196 --> 00:19:27,646
So how exactly was this
brought to JavaScript?


377
00:19:28,436 --> 00:19:31,626
Well to recap, applications
have scripting dictionaries


378
00:19:31,696 --> 00:19:33,946
that detail what can be
interacted with and how,


379
00:19:34,536 --> 00:19:36,156
and Apple events are
used to communicate


380
00:19:36,156 --> 00:19:37,056
with those applications.


381
00:19:37,846 --> 00:19:38,566
So to bring this


382
00:19:38,616 --> 00:19:42,386
to JavaScriptCore we built the
JavaScript Apple Event Bridge


383
00:19:42,666 --> 00:19:44,426
that reads those
scripting dictionaries


384
00:19:44,756 --> 00:19:46,656
and then uses Apple
events to communicate


385
00:19:46,656 --> 00:19:47,716
with the applications.


386
00:19:48,476 --> 00:19:51,476
So now that we've seen what
JavaScript for Automation is


387
00:19:51,666 --> 00:19:54,946
and how it works, let's look
at how we can use JavaScript


388
00:19:54,946 --> 00:19:58,686
for Automation, beginning
with scripting applications.


389
00:19:59,336 --> 00:20:04,426
We introduced an
application object


390
00:20:04,736 --> 00:20:07,816
into a JavaScript context,
which is the main entrance point


391
00:20:07,886 --> 00:20:10,406
to all of the scriptable pieces
and parts of an application.


392
00:20:11,276 --> 00:20:12,886
So, the most common way


393
00:20:13,016 --> 00:20:15,356
to access an application
is by name.


394
00:20:16,046 --> 00:20:18,066
Here we're accessing
the Safari application.


395
00:20:18,846 --> 00:20:21,526
And beyond name we can
also access applications


396
00:20:21,526 --> 00:20:25,816
by Bundle ID, by
Path, by Process ID,


397
00:20:25,816 --> 00:20:30,476
and we can get the application
that's running the script we're


398
00:20:30,476 --> 00:20:34,026
currently in by getting
the current application.


399
00:20:35,076 --> 00:20:36,986
So now that we have
this application object,


400
00:20:36,986 --> 00:20:39,306
we're going to want
to interact with it.


401
00:20:39,496 --> 00:20:43,156
Let's look at some examples of
the syntax for doing just that.


402
00:20:44,436 --> 00:20:47,636
Accessing properties is
accomplished using dot notation.


403
00:20:48,676 --> 00:20:51,406
To access elements, you
use square brackets.


404
00:20:52,586 --> 00:20:57,046
To call commands, you call them
as functions using parentheses.


405
00:20:57,906 --> 00:21:01,416
And you can create new objects
by calling class constructors


406
00:21:01,616 --> 00:21:03,916
as functions, again,
using parentheses.


407
00:21:04,866 --> 00:21:07,496
So let's take a look at
getting and setting properties.


408
00:21:08,366 --> 00:21:12,336
Let's say we're scripting
Safari, we create a reference


409
00:21:12,386 --> 00:21:16,236
to the first document of
Safari, and now we can do things


410
00:21:16,266 --> 00:21:18,296
like get the document's URL.


411
00:21:19,576 --> 00:21:21,006
See the parentheses at the end?


412
00:21:21,616 --> 00:21:24,866
We're calling this property
as a function because we want


413
00:21:24,866 --> 00:21:27,886
to actually send the get
event to the application


414
00:21:27,916 --> 00:21:29,606
and get the string value.


415
00:21:29,996 --> 00:21:32,176
We don't simply want
to reference to the URL


416
00:21:32,176 --> 00:21:34,456
of the document, we want
to call it as a function


417
00:21:34,546 --> 00:21:35,866
and get that string value.


418
00:21:36,866 --> 00:21:38,976
We can also set the
document's URL,


419
00:21:39,126 --> 00:21:42,636
and this sends the set
event to the application


420
00:21:42,716 --> 00:21:43,916
and actually sets the URL.


421
00:21:46,156 --> 00:21:48,536
Let's say we want to get a
particular window in Safari.


422
00:21:49,756 --> 00:21:52,926
Well, there are three ways to
access elements in JavaScript


423
00:21:52,926 --> 00:22:00,316
for Automation: by
index, by name and by ID.


424
00:22:01,426 --> 00:22:03,676
Each has benefits and
risks associated with it


425
00:22:03,676 --> 00:22:05,816
and it's important you
understand the Object Model


426
00:22:05,816 --> 00:22:07,676
of the application that
you're scripting to know


427
00:22:07,676 --> 00:22:11,476
when it's best to use which.


428
00:22:11,656 --> 00:22:14,416
So already with just these
basics we can do some pretty


429
00:22:14,416 --> 00:22:15,156
amazing things.


430
00:22:15,876 --> 00:22:17,016
Let's put it to use.


431
00:22:18,686 --> 00:22:21,406
First, I'd like to just
open up Script Editor.


432
00:22:22,306 --> 00:22:25,416
We've got a little JavaScript
here, just straight JavaScript.


433
00:22:26,126 --> 00:22:29,796
Creating a string, some
text, and then I'm going


434
00:22:29,796 --> 00:22:32,136
to use console.log,
just like I expect


435
00:22:32,136 --> 00:22:33,716
in JavaScript, to log this text.


436
00:22:34,396 --> 00:22:37,136
And when I log this,
it's going to show


437
00:22:37,136 --> 00:22:39,216
up in the event log
on a lower panel.


438
00:22:39,216 --> 00:22:40,996
So I'm going to open
the event log,


439
00:22:41,766 --> 00:22:43,826
and if I run this script we see


440
00:22:43,826 --> 00:22:45,706
"hello world" was logged
just like we wanted.


441
00:22:46,126 --> 00:22:46,656
This is great.


442
00:22:46,656 --> 00:22:48,336
This is the JavaScript
I'm used to.


443
00:22:48,996 --> 00:22:50,426
It's doing exactly
what we wanted.


444
00:22:50,496 --> 00:22:52,416
This is hugely useful
for debugging,


445
00:22:52,416 --> 00:22:54,306
we can log throughout a
script to see what's going on.


446
00:22:55,046 --> 00:22:58,126
But let's say I wanted to
write some text and I wanted it


447
00:22:58,126 --> 00:23:01,726
to exist even after I quit
Script Editor, or perhaps I want


448
00:23:01,726 --> 00:23:05,056
to style that text, change
its font or color and so on.


449
00:23:06,226 --> 00:23:07,416
Now we can start interacting


450
00:23:07,416 --> 00:23:09,586
with applications
to accomplish that.


451
00:23:11,936 --> 00:23:14,766
So here we have a TextEdit
document named Log,


452
00:23:14,956 --> 00:23:15,826
and I'm going to use this


453
00:23:15,826 --> 00:23:19,576
across a couple demos
to write some text.


454
00:23:19,706 --> 00:23:21,986
First, this is a simple script,


455
00:23:23,696 --> 00:23:27,336
we access the TextEdit
application, we get a reference


456
00:23:27,456 --> 00:23:31,056
to the Log document, then
we set the document's text


457
00:23:31,276 --> 00:23:33,656
and we style its
font, size and color.


458
00:23:35,056 --> 00:23:37,616
So before I run this I'm
going to open the Event Log


459
00:23:37,616 --> 00:23:40,026
and we'll be able to see the
events that are being sent


460
00:23:40,026 --> 00:23:41,916
to this application
to accomplish this.


461
00:23:43,016 --> 00:23:44,186
So when I run this script,


462
00:23:45,016 --> 00:23:48,006
we see "I love JavaScript" was
logged just like we wanted,


463
00:23:48,266 --> 00:23:51,826
styled just liked we wanted, and
in the bottom here we see all


464
00:23:51,826 --> 00:23:54,286
of the events that were sent
to accomplish this task.


465
00:23:54,926 --> 00:23:56,936
So this is great, we have
some persistent text,


466
00:23:57,306 --> 00:23:59,056
it's been beautified
just like we wanted.


467
00:23:59,526 --> 00:24:01,206
But what if we want to
do this multiple times


468
00:24:01,206 --> 00:24:02,106
from the same script?


469
00:24:03,016 --> 00:24:06,896
Well, instead of repeating the
functionality again and again,


470
00:24:06,896 --> 00:24:09,376
we're playing in JavaScript,
we can write a function.


471
00:24:10,326 --> 00:24:11,666
And I've done just that.


472
00:24:12,406 --> 00:24:15,546
Here we have a function that
accepts some text to log


473
00:24:15,546 --> 00:24:17,736
and an optional formatting
parameter.


474
00:24:18,566 --> 00:24:23,626
Then, just like before, we
access the TextEdit application,


475
00:24:23,966 --> 00:24:27,556
we get a reference to the
log document, but now instead


476
00:24:27,556 --> 00:24:31,036
of setting the document's entire
text, we're going to append


477
00:24:31,036 --> 00:24:32,496
to the last paragraph.


478
00:24:33,006 --> 00:24:35,726
Then we're going to style
based on formatting you pass in


479
00:24:36,176 --> 00:24:37,126
or some default values.


480
00:24:37,126 --> 00:24:40,856
Now that we have our log,
we call it three times


481
00:24:40,856 --> 00:24:44,716
at the bottom here, passing in
parameters for formatting twice,


482
00:24:44,986 --> 00:24:47,036
and the last time we
use default values.


483
00:24:47,796 --> 00:24:53,316
So if I run this script, we see
that our text was logged just


484
00:24:53,316 --> 00:24:55,536
like we wanted, styled
as we wanted.


485
00:24:55,536 --> 00:24:58,496
And this is great, we're able
to log as many times as we want,


486
00:24:58,656 --> 00:25:01,286
style any different way that
we choose, every single time.


487
00:25:01,976 --> 00:25:07,206
So this is powerful stuff simply
by accessing an application,


488
00:25:07,206 --> 00:25:09,016
an element, and a
couple properties,


489
00:25:09,526 --> 00:25:11,926
right out of the box,
power at your fingertips,


490
00:25:12,256 --> 00:25:13,446
and it's really easy
to approach.


491
00:25:13,446 --> 00:25:18,486
Let's look at some other
ways that we might want


492
00:25:18,486 --> 00:25:19,806
to interact with applications.


493
00:25:21,796 --> 00:25:24,376
Let's say we're scripting Mail
and we want to access some


494
00:25:24,376 --> 00:25:25,646
of the messages in our inbox,


495
00:25:26,086 --> 00:25:28,536
but we don't want the entire
messages element array


496
00:25:28,536 --> 00:25:31,306
of the inbox, that's a whole
lot of messages usually.


497
00:25:31,846 --> 00:25:36,086
Let's say we want to get only
the messages whose subject


498
00:25:36,086 --> 00:25:36,876
is JavaScript.


499
00:25:38,056 --> 00:25:39,756
Using the special "whose" method


500
00:25:39,946 --> 00:25:42,086
of element arrays
we can do just that.


501
00:25:42,206 --> 00:25:45,316
By passing in a dictionary of
properties we'd like to match


502
00:25:45,316 --> 00:25:48,946
on those elements we now receive
an array only containing the


503
00:25:48,946 --> 00:25:52,746
elements that match.


504
00:25:53,346 --> 00:25:55,676
Objects have certain commands
that they can respond to


505
00:25:56,616 --> 00:25:58,856
and you can call those
commands as methods locally


506
00:25:58,986 --> 00:26:01,386
that send the command
events to the application.


507
00:26:02,716 --> 00:26:04,436
So again, let's say
we're scripting Mail,


508
00:26:04,996 --> 00:26:08,666
we have a reference to the
first message of our inbox,


509
00:26:09,096 --> 00:26:10,676
and we want to open it.


510
00:26:10,846 --> 00:26:13,606
Well, we could tell
the message to open,


511
00:26:14,976 --> 00:26:17,876
we could also tell Mail
to open the message.


512
00:26:18,256 --> 00:26:20,056
And both of these are
entirely equivalent.


513
00:26:20,586 --> 00:26:24,416
Some commands take
named parameters,


514
00:26:25,166 --> 00:26:27,476
and so you accomplish this
by passing in a dictionary


515
00:26:27,476 --> 00:26:28,756
of those named parameters.


516
00:26:29,296 --> 00:26:32,206
Here, for example, we're
creating a reply to our message,


517
00:26:32,506 --> 00:26:33,856
we're going to reply
to everybody


518
00:26:34,266 --> 00:26:35,686
and we're not going
to open a window.


519
00:26:37,106 --> 00:26:41,076
Now remember, you can always
use the dictionary viewer


520
00:26:41,076 --> 00:26:44,656
in Script Editor to see
which named parameters go


521
00:26:44,656 --> 00:26:46,526
with which commands, which
commands can be called


522
00:26:46,526 --> 00:26:47,856
on which objects, and so on.


523
00:26:47,936 --> 00:26:49,866
It's a phenomenal
tool and really useful


524
00:26:49,866 --> 00:26:52,216
when you're building
more complex scripts.


525
00:26:54,476 --> 00:26:56,746
Some commands take
files as parameters,


526
00:26:57,606 --> 00:27:00,116
such as opening a
document using TextEdit.


527
00:27:01,016 --> 00:27:04,386
So to accomplish this we've
introduced a path object


528
00:27:04,386 --> 00:27:07,176
into the environment that
you construct with a string


529
00:27:07,176 --> 00:27:10,066
that has a string with a file
path inside and now you can use


530
00:27:10,066 --> 00:27:13,636
that path object anywhere that a
file is expected as a parameter.


531
00:27:14,996 --> 00:27:17,056
So we could open our
document just like we wanted.


532
00:27:17,936 --> 00:27:20,546
Be aware that if you
pass a string instead


533
00:27:20,546 --> 00:27:22,906
of a path wherever
a file's expected,


534
00:27:22,906 --> 00:27:23,946
you will receive an error.


535
00:27:24,106 --> 00:27:28,046
So let's say we want to
create a document instead


536
00:27:28,046 --> 00:27:29,966
of simply opening
one in TextEdit.


537
00:27:31,206 --> 00:27:33,556
Well, we're scripting TextEdit,


538
00:27:34,176 --> 00:27:37,536
we can call the document class
constructor as a function.


539
00:27:38,476 --> 00:27:42,616
But now to actually create this
object inside the application,


540
00:27:42,706 --> 00:27:45,796
bring it to life, we're
going to push the document


541
00:27:46,126 --> 00:27:47,786
onto the documents
element array.


542
00:27:47,786 --> 00:27:51,106
And that actually creates
it inside the application.


543
00:27:51,666 --> 00:27:53,066
Then we can interact
with it just


544
00:27:53,066 --> 00:27:55,226
like any other objects
inside the application.


545
00:27:55,576 --> 00:27:56,946
We can set its text,
for example.


546
00:27:57,856 --> 00:28:01,736
And optionally, when you
create objects, you can pass


547
00:28:01,736 --> 00:28:04,156
in a dictionary of properties
you'd like to have set


548
00:28:04,216 --> 00:28:05,916
on that object when
it's created.


549
00:28:06,206 --> 00:28:09,046
Here we're creating a
document, passing in some text


550
00:28:09,046 --> 00:28:10,326
when we instantiate it.


551
00:28:10,546 --> 00:28:12,896
We push again on the
appropriate array,


552
00:28:12,896 --> 00:28:15,136
and it's created
inside the application,


553
00:28:15,556 --> 00:28:18,486
living and breathing, ready
for us to interact with.


554
00:28:18,846 --> 00:28:21,306
So this is a wide
range of functionality,


555
00:28:21,376 --> 00:28:24,276
inherently available in
applications, property access,


556
00:28:24,276 --> 00:28:27,096
element access, calling
commands, creating objects.


557
00:28:27,786 --> 00:28:31,226
But there are script
plug-ins, plug-ins for scripts


558
00:28:31,666 --> 00:28:34,336
that allow you to extend the
functionality of an application.


559
00:28:35,026 --> 00:28:38,796
And the OS has a set of
standard scripting additions


560
00:28:38,996 --> 00:28:39,536
that it ships.


561
00:28:40,086 --> 00:28:42,156
These are available from
every scripting environment,


562
00:28:42,976 --> 00:28:44,606
including JavaScript
for Automation.


563
00:28:45,576 --> 00:28:47,376
So let's say that we're
scripting the current


564
00:28:47,376 --> 00:28:49,286
application and we
want to be able


565
00:28:49,286 --> 00:28:50,306
to use these standard additions.


566
00:28:51,146 --> 00:28:55,216
To do so we're going to set the
includeStandardAdditions flag


567
00:28:55,216 --> 00:28:59,276
to true, and then we can do
things like tell the application


568
00:28:59,276 --> 00:29:01,596
to beep, which is hugely
useful for debugging,


569
00:29:02,216 --> 00:29:04,696
tell the application
to speak some text,


570
00:29:05,206 --> 00:29:06,546
which can extend
our functionality


571
00:29:06,546 --> 00:29:07,476
to a wider audience.


572
00:29:07,666 --> 00:29:10,866
We can also do things like
display alerts and dialogues,


573
00:29:11,126 --> 00:29:14,856
which is great because now
we have user interaction


574
00:29:15,056 --> 00:29:17,036
incorporated with
scripting applications.


575
00:29:18,866 --> 00:29:20,256
So we've covered a
lot of different ways


576
00:29:20,256 --> 00:29:22,286
that we can actually
script applications,


577
00:29:22,346 --> 00:29:23,876
their Object Models, and so on.


578
00:29:24,726 --> 00:29:28,106
Let's look at other uses of
JavaScript for Automation.


579
00:29:29,376 --> 00:29:32,826
Remember earlier when we racked
the logging functionality


580
00:29:32,826 --> 00:29:35,256
in a function so we could use it
multiple times from one script?


581
00:29:36,476 --> 00:29:37,816
Well what if we wanted to log


582
00:29:37,816 --> 00:29:40,086
from multiple scripts,
not just one?


583
00:29:41,106 --> 00:29:43,146
This is the perfect
use of a library.


584
00:29:43,676 --> 00:29:47,426
I've taken that log
function and I've saved it


585
00:29:47,426 --> 00:29:51,086
in a script named Toolbox in
the Script Library's folder.


586
00:29:51,476 --> 00:29:54,396
And now I can access this
library and its functions


587
00:29:54,396 --> 00:29:56,276
from any other script
that I write.


588
00:29:56,906 --> 00:30:01,936
To accomplish this I instantiate
a library object by name,


589
00:30:02,406 --> 00:30:06,946
and file extension is optional,
and then I can those functions


590
00:30:07,266 --> 00:30:09,556
as methods on that
library object.


591
00:30:09,916 --> 00:30:11,946
So this code would log
just like we did before.


592
00:30:12,696 --> 00:30:15,576
And the beautiful thing about
Libraries is they can be written


593
00:30:15,576 --> 00:30:17,696
in JavaScript and Apple Script,


594
00:30:17,986 --> 00:30:19,836
and used in JavaScript
for Automation.


595
00:30:21,556 --> 00:30:23,036
So now let's take a look at how


596
00:30:23,036 --> 00:30:25,736
to create applets using
JavaScript for Automation.


597
00:30:27,116 --> 00:30:29,966
Applets are applications
saved by Script Editor,


598
00:30:30,116 --> 00:30:33,126
and when you run an applet
the script that's saved inside


599
00:30:33,126 --> 00:30:34,226
is run.


600
00:30:34,886 --> 00:30:37,346
Applets have a certain
number of events


601
00:30:37,486 --> 00:30:38,766
that you can create
handlers for,


602
00:30:39,066 --> 00:30:42,746
such as when the applet is
run, when the applet is told


603
00:30:42,746 --> 00:30:44,826
to open documents
or print documents.


604
00:30:45,506 --> 00:30:47,816
There's a special idle
handler that allows you


605
00:30:47,816 --> 00:30:49,136
to perform periodic tasks.


606
00:30:49,986 --> 00:30:53,566
And you can also create handlers
for when an applet is reopened,


607
00:30:53,916 --> 00:30:54,896
or when an applet is quit.


608
00:30:55,866 --> 00:30:58,946
And just like Libraries, you can
have any other functions inside


609
00:30:58,946 --> 00:31:00,646
your applet and those
can be called.


610
00:31:00,646 --> 00:31:04,826
So let's take a look at an
example of a basic applet


611
00:31:05,246 --> 00:31:07,176
that uses a Script Library.


612
00:31:07,686 --> 00:31:13,556
Here we have our log document
like before, and let's look


613
00:31:13,556 --> 00:31:16,006
at the script inside
of this applet here.


614
00:31:16,616 --> 00:31:21,256
At the top we instantiate
our Toolbox Library,


615
00:31:21,796 --> 00:31:25,466
then in our run handler
we log Run in green.


616
00:31:26,256 --> 00:31:28,536
In our idle handler,
we log Idle in orange.


617
00:31:28,946 --> 00:31:31,266
And in quit handler,
we log Quit in red.


618
00:31:32,236 --> 00:31:36,526
So if I double click this
applet to run it we see that Run


619
00:31:36,526 --> 00:31:40,306
and Idle were logged just
like we wanted, and if I go


620
00:31:40,306 --> 00:31:42,916
and quit the applet, we see


621
00:31:42,916 --> 00:31:45,256
that Quit was also
logged, which is great.


622
00:31:45,776 --> 00:31:47,046
This is exactly what we wanted.


623
00:31:47,196 --> 00:31:50,366
And this is a very basic example
of using a couple handlers


624
00:31:50,366 --> 00:31:51,976
and an applet and
using a Library.


625
00:31:52,166 --> 00:31:53,956
But imagine the possibilities
here.


626
00:31:54,286 --> 00:31:56,766
This is double-clickable
JavaScript sitting


627
00:31:56,766 --> 00:31:58,736
on my desktop, ready to interact


628
00:31:58,736 --> 00:32:00,426
with all the scriptable
applications,


629
00:32:00,906 --> 00:32:02,706
Script Libraries and more.


630
00:32:04,066 --> 00:32:07,526
Speaking of more, we've looked
at scripting the Object Model


631
00:32:07,526 --> 00:32:10,186
of an application
extensively, but what if we want


632
00:32:10,186 --> 00:32:12,256
to script the user
interface of an application?


633
00:32:12,766 --> 00:32:17,406
This is accomplished
by using accessibility,


634
00:32:18,076 --> 00:32:21,426
which allows applications
on your Mac to interact


635
00:32:21,426 --> 00:32:23,626
with your Mac on your behalf.


636
00:32:23,916 --> 00:32:26,726
System Events uses
the accessibility APIs


637
00:32:26,726 --> 00:32:29,156
to expose the user
interface of an application.


638
00:32:29,266 --> 00:32:31,176
And in JavaScript
for Automation,


639
00:32:31,386 --> 00:32:35,006
you use the System Events
application to access the pieces


640
00:32:35,006 --> 00:32:36,616
and parts of a user interface.


641
00:32:36,956 --> 00:32:40,086
So let's look at an example.


642
00:32:40,396 --> 00:32:43,326
First, we're going to access
the System Events application.


643
00:32:44,156 --> 00:32:47,506
Then we're going to
access the Notes process


644
00:32:47,776 --> 00:32:51,196
of the System Events processes
elements array, and we're going


645
00:32:51,196 --> 00:32:53,136
to set it to a variable,
notesUI.


646
00:32:54,146 --> 00:32:56,856
Now we can do things
like close a window,


647
00:32:57,186 --> 00:32:59,726
by clicking the first
button of the first window


648
00:32:59,726 --> 00:33:00,646
of Notes user interface.


649
00:33:00,646 --> 00:33:04,236
Let's say we want to send some
keystrokes to this application.


650
00:33:04,616 --> 00:33:06,606
Well to do so, we're going


651
00:33:06,606 --> 00:33:10,336
to access the Notes application
itself and activate it,


652
00:33:10,336 --> 00:33:11,596
bringing it to the front,


653
00:33:12,006 --> 00:33:16,576
and then we could call the
SystemEvents.keystroke command,


654
00:33:17,026 --> 00:33:19,396
passing in 'm', using
'command down'


655
00:33:19,656 --> 00:33:21,806
to simulate a minimize event.


656
00:33:22,716 --> 00:33:25,826
To use accessibility
it must be enabled


657
00:33:25,826 --> 00:33:28,086
in the Privacy preferences,
for applications


658
00:33:28,086 --> 00:33:29,946
like Script Editor,
and so on, to use it.


659
00:33:29,946 --> 00:33:32,296
And the first time you try
to use it, accessibility,


660
00:33:32,296 --> 00:33:34,926
you will be prompted
to enable it.


661
00:33:35,386 --> 00:33:37,066
Okay, so we've looked
at another way


662
00:33:37,066 --> 00:33:39,216
to script an application,
its user interface.


663
00:33:39,216 --> 00:33:42,686
We've looked at scripting Object
Models, Libraries, and Applets.


664
00:33:43,346 --> 00:33:46,076
Now let's look at a more
advanced use of JavaScript


665
00:33:46,076 --> 00:33:51,376
for Automation using system
APIs, which provide access


666
00:33:51,496 --> 00:33:54,796
to really powerful and important
things like the file system


667
00:33:55,006 --> 00:33:57,816
and Cocoa app development
in JavaScript.


668
00:33:59,896 --> 00:34:02,886
We introduced two objects
into the environment


669
00:34:03,376 --> 00:34:05,946
that are your means for
interacting with system APIs.


670
00:34:06,726 --> 00:34:08,216
ObjC and $.


671
00:34:08,946 --> 00:34:10,835
And for those coming from
a browser environment,


672
00:34:10,906 --> 00:34:12,946
$ may mean something
very special to you,


673
00:34:13,335 --> 00:34:15,576
but in our environment
it's a very different $.


674
00:34:16,216 --> 00:34:22,085
ObjC can be used to do things
like bridging JavaScript values


675
00:34:22,246 --> 00:34:26,476
into Objective-C, bridging
Objective-C objects


676
00:34:26,536 --> 00:34:30,206
into JavaScript, and
importing frameworks


677
00:34:30,206 --> 00:34:31,196
that you'd like to use.


678
00:34:32,666 --> 00:34:35,585
So once you've imported a
framework you can access its


679
00:34:35,585 --> 00:34:39,196
classes and functions and
so on using the $ object,


680
00:34:39,866 --> 00:34:44,076
and you can also call $ as
a function, as a shorthand


681
00:34:44,076 --> 00:34:46,815
for bridging JavaScript
values into Objective-C.


682
00:34:47,906 --> 00:34:51,246
So now let's talk about
calling methods on objects.


683
00:34:52,206 --> 00:34:55,416
Well, to begin let's look
at some Objective-C code.


684
00:34:56,286 --> 00:34:58,896
It's quite simple, we're
going to create an NSString


685
00:34:58,896 --> 00:35:01,096
and then we're going to
write that string to a file.


686
00:35:01,626 --> 00:35:04,946
This is the equivalent
JavaScript


687
00:35:04,946 --> 00:35:06,736
for Automation code
to accomplish this.


688
00:35:06,906 --> 00:35:08,926
And there are a couple key
things to focus on here.


689
00:35:09,866 --> 00:35:13,586
First, the Foundation
Framework is available to you


690
00:35:13,586 --> 00:35:15,916
out of the box when you're
using JavaScript for Automation.


691
00:35:16,356 --> 00:35:18,716
So we don't need to
import Foundation.


692
00:35:19,966 --> 00:35:24,196
Then, we use the $ object to
access the NSString class,


693
00:35:24,946 --> 00:35:28,186
we call alloc, and because
it takes no parameters,


694
00:35:28,186 --> 00:35:29,466
we don't need parentheses.


695
00:35:29,656 --> 00:35:31,236
We do not use parentheses here.


696
00:35:31,986 --> 00:35:34,846
Then, we call
initWithUTF8String,


697
00:35:35,296 --> 00:35:37,856
and we're going to be passing
in a parameter, so we call it


698
00:35:37,856 --> 00:35:39,426
as a function and
pass in our parameter.


699
00:35:40,826 --> 00:35:44,876
Now, the method to write to a
file takes multiple parameters,


700
00:35:45,326 --> 00:35:47,266
so we're going to
convert the selector


701
00:35:47,526 --> 00:35:50,526
to a JavaScript method
name, that can catenating


702
00:35:50,526 --> 00:35:53,476
and camelCasing the pieces
together, and then we call it


703
00:35:53,476 --> 00:35:56,066
as a function, passing in the
parameters in the right order.


704
00:35:56,566 --> 00:35:59,996
So now that we've seen
how to write to a file,


705
00:36:00,916 --> 00:36:02,036
let's actually see it in use.


706
00:36:03,566 --> 00:36:05,206
This is a little script.


707
00:36:05,306 --> 00:36:08,476
At the top we create an
NSString with some text we'd


708
00:36:08,476 --> 00:36:09,466
like to write to a file.


709
00:36:10,366 --> 00:36:12,526
Then we create an
NSString with a file path,


710
00:36:12,526 --> 00:36:15,826
and we call this
stringByExpandingTildeInPath


711
00:36:16,126 --> 00:36:18,046
method on it to get
the full path.


712
00:36:18,726 --> 00:36:21,306
And then we write the
string to that file.


713
00:36:21,306 --> 00:36:23,186
And when we write this,


714
00:36:23,666 --> 00:36:25,696
it's going to appear
in this folder here.


715
00:36:26,766 --> 00:36:30,656
So if I run this script,
our file was created,


716
00:36:30,656 --> 00:36:33,296
our text was written
just like we wanted.


717
00:36:33,626 --> 00:36:34,406
This is phenomenal.


718
00:36:35,666 --> 00:36:39,936
And this is a simple example,
but you can imagine the power


719
00:36:39,936 --> 00:36:42,916
and utility that the system
APIs bring to the JavaScript


720
00:36:42,916 --> 00:36:44,116
for Automation environment.


721
00:36:46,056 --> 00:36:51,856
Let's look at other ways that we
can interact with these API's.


722
00:36:51,856 --> 00:36:53,916
Let's say we create
a new NSTask object.


723
00:36:54,606 --> 00:36:57,696
Well, to access its properties
we're going to use dot notation.


724
00:36:58,516 --> 00:37:02,016
So we can access the running
property, get its Boolean value


725
00:37:02,016 --> 00:37:02,976
and react accordingly.


726
00:37:02,976 --> 00:37:07,626
We could also set its
launchPath property, like so.


727
00:37:07,716 --> 00:37:09,456
This will actually
set it on the object.


728
00:37:10,636 --> 00:37:13,366
An interesting thing
of a JavaScript


729
00:37:13,366 --> 00:37:16,616
for Automation bridge,
is the bridged nil.


730
00:37:17,556 --> 00:37:20,556
So, nil in Objective-C
is somewhat similar


731
00:37:20,556 --> 00:37:22,606
to the undefined in JavaScript,


732
00:37:22,936 --> 00:37:24,036
but they're not exactly
the same,


733
00:37:24,036 --> 00:37:25,386
and they differ in key ways.


734
00:37:26,766 --> 00:37:29,346
In Objective-C it's absolutely
valid to call a method


735
00:37:29,346 --> 00:37:32,046
on a nil object, and you'll
receive another nil object.


736
00:37:32,446 --> 00:37:36,426
But in JavaScript, if you call
a method on an undefined object,


737
00:37:36,636 --> 00:37:37,626
you will receive an error.


738
00:37:38,266 --> 00:37:41,506
Therefore, we do not
bridge nil undefined,


739
00:37:41,506 --> 00:37:43,566
we keep it as a bridged
nil object


740
00:37:43,706 --> 00:37:45,366
that you can interact with.


741
00:37:46,876 --> 00:37:50,736
So to create a bridged nil
object, we call the $ function


742
00:37:50,736 --> 00:37:52,026
without any parameters.


743
00:37:52,946 --> 00:37:55,196
Why might you want to
create a bridged nil object,


744
00:37:55,196 --> 00:37:55,796
you're asking?


745
00:37:56,266 --> 00:37:59,216
Well, this allows you
to accomplish things


746
00:37:59,216 --> 00:38:00,306
like pass-by-reference.


747
00:38:01,136 --> 00:38:04,916
So here we're creating a new
NSXMLDocument, and we're going


748
00:38:04,916 --> 00:38:08,146
to pass our bridged nil
object, our error variable,


749
00:38:08,396 --> 00:38:10,046
as the third and
final parameter.


750
00:38:10,046 --> 00:38:12,796
And what'll happen
behind the scenes is


751
00:38:12,796 --> 00:38:14,816
if an NSError object is created,


752
00:38:14,976 --> 00:38:17,416
the bridged nil object
will be replaced by it,


753
00:38:17,746 --> 00:38:19,786
and now our error
variable will point


754
00:38:19,786 --> 00:38:21,116
at that and we can use that.


755
00:38:21,676 --> 00:38:24,336
So once we've created our
document, we can check


756
00:38:24,536 --> 00:38:27,406
if it's nil by calling
the isNil method on it,


757
00:38:27,776 --> 00:38:31,356
and if it is nil we could,
for example, log the user info


758
00:38:31,406 --> 00:38:34,046
from the now populated
error object.


759
00:38:36,756 --> 00:38:40,376
Another exciting thing that
you can do using system APIs is


760
00:38:40,376 --> 00:38:41,746
subclassing objects.


761
00:38:42,356 --> 00:38:45,946
So to accomplish this, you call
the registerSubclass method


762
00:38:46,066 --> 00:38:50,116
on the ObjC object, you pass
in a name of your Subclass,


763
00:38:50,936 --> 00:38:54,716
its superclass, although this
is optional, and will default


764
00:38:54,716 --> 00:39:00,066
to NSObject, any protocols
that your class made here, too.


765
00:39:01,366 --> 00:39:04,526
Properties are defined
as an object


766
00:39:04,996 --> 00:39:07,226
where the keys are the
names of the property


767
00:39:07,226 --> 00:39:09,576
and the values are the
type of the property.


768
00:39:10,196 --> 00:39:13,126
And methods are, again,


769
00:39:13,126 --> 00:39:15,706
an object where the
keys are the selector


770
00:39:15,706 --> 00:39:18,576
and the value is an
object detailing the types


771
00:39:18,576 --> 00:39:20,546
of the method and
its implementation.


772
00:39:21,366 --> 00:39:24,676
Now if you're defining a
function or a method, excuse me,


773
00:39:24,936 --> 00:39:27,666
that's declared in a
protocol or on a superclass,


774
00:39:27,846 --> 00:39:30,936
the types are optional, but for
demonstration purposes we'll


775
00:39:30,936 --> 00:39:31,536
show them here.


776
00:39:32,676 --> 00:39:33,846
So now let's put this to use.


777
00:39:34,476 --> 00:39:36,146
Let's see using a subclass


778
00:39:36,346 --> 00:39:40,446
and creating something
using system APIs.


779
00:39:40,656 --> 00:39:44,016
So here I have an applet, and
this is the script inside,


780
00:39:44,486 --> 00:39:47,596
and this produces a
Cocoa application,


781
00:39:47,596 --> 00:39:51,006
a temperature converter, nice
little guy for us to use.


782
00:39:51,356 --> 00:39:52,886
And there are two
things I'd like to point


783
00:39:52,886 --> 00:39:54,356
out before we actually run this.


784
00:39:54,746 --> 00:39:57,486
You'll see at the top
that we import Cocoa.


785
00:39:57,726 --> 00:40:00,816
Now this allows us to access
things like NSWindow, and so on.


786
00:40:01,776 --> 00:40:03,736
We create our windows
and our inputs,


787
00:40:04,306 --> 00:40:06,676
and then we register
our subclass,


788
00:40:07,496 --> 00:40:09,906
named TemperatureConverter,
that has two methods,


789
00:40:10,086 --> 00:40:12,046
to convert from Celsius
to Fahrenheit,


790
00:40:12,196 --> 00:40:13,636
and from Fahrenheit to Celsius.


791
00:40:14,356 --> 00:40:17,676
And you can see that all of the
logic inside of these methods,


792
00:40:17,676 --> 00:40:20,406
all of the math is
in JavaScript.


793
00:40:20,956 --> 00:40:24,406
Then we create a new
TemperatureConverter object,


794
00:40:24,846 --> 00:40:27,666
hook it up to our inputs, and
bring the window to the front.


795
00:40:28,526 --> 00:40:29,436
So let's run this.


796
00:40:30,526 --> 00:40:33,866
Close this here, and if I double
click this Applet to run it,


797
00:40:35,596 --> 00:40:40,106
we have a nice little Cocoa
application written entirely


798
00:40:40,106 --> 00:40:40,846
in JavaScript.


799
00:40:41,516 --> 00:40:43,546
[ Applause ]


800
00:40:44,046 --> 00:40:45,246
Of course, it does
what we promise.


801
00:40:45,656 --> 00:40:48,026
We can convert our
Fahrenheit to Celsius,


802
00:40:48,026 --> 00:40:50,016
our Celsius to Fahrenheit
and so on.


803
00:40:50,196 --> 00:40:52,046
And this is a little example.


804
00:40:52,596 --> 00:40:53,426
Look at this.


805
00:40:53,426 --> 00:40:56,076
We can create a Cocoa
application in JavaScript,


806
00:40:56,186 --> 00:40:57,606
imagine what you
can do from here.


807
00:40:57,936 --> 00:40:59,456
With all this at
your fingertips,


808
00:40:59,616 --> 00:41:03,946
there is power ready to be used.


809
00:41:03,946 --> 00:41:06,396
And definitely make sure
to check out the JavaScript


810
00:41:06,396 --> 00:41:07,736
for Automation for
release notes,


811
00:41:07,996 --> 00:41:10,596
where you can see other great
things you can do using system


812
00:41:10,596 --> 00:41:14,036
APIs, like binding C
functions into the environment,


813
00:41:15,276 --> 00:41:17,196
another mechanism for
pass-by-reference,


814
00:41:18,516 --> 00:41:20,976
and also passing functions
where blocks are expected.


815
00:41:24,596 --> 00:41:27,656
All right, so we've done
a beautiful whirlwind tour


816
00:41:27,656 --> 00:41:30,396
of all the ways we can use
JavaScript for Automation,


817
00:41:31,106 --> 00:41:34,046
from application scripting,
libraries and applets,


818
00:41:34,046 --> 00:41:36,426
UI scripting, using system APIs.


819
00:41:36,676 --> 00:41:38,346
I'm sure each and every
one of you is just itching


820
00:41:38,346 --> 00:41:39,256
to get your hands on this.


821
00:41:39,796 --> 00:41:40,896
I completely understand.


822
00:41:41,216 --> 00:41:42,596
But before you do let's talk


823
00:41:42,596 --> 00:41:44,996
about where you can use
JavaScript for Automation.


824
00:41:45,566 --> 00:41:50,386
So as all the demos have
shown, you can use JavaScript


825
00:41:50,386 --> 00:41:52,166
for Automation in Script Editor.


826
00:41:52,786 --> 00:41:56,376
You can save Applets and
Droplets from Script Editor,


827
00:41:56,376 --> 00:41:59,616
as we saw, and run them.


828
00:41:59,996 --> 00:42:03,116
As Sal mentioned, and you
saw in the presentation demo,


829
00:42:03,506 --> 00:42:05,906
you can save scripts in the
system-wide Script Menu,


830
00:42:05,906 --> 00:42:07,526
and this is phenomenal for
scripts that you're going


831
00:42:07,526 --> 00:42:10,936
to use repeatedly,
again and again.


832
00:42:11,096 --> 00:42:15,286
Automator, which allows
you to produce workflows,


833
00:42:15,606 --> 00:42:17,876
automating applications
and processes on your Macs,


834
00:42:18,546 --> 00:42:22,066
now has a run JavaScript
Automator action


835
00:42:22,486 --> 00:42:24,966
that lets you incorporate
JavaScript for Automation


836
00:42:25,236 --> 00:42:27,826
into your workflows,
and once you've done


837
00:42:27,876 --> 00:42:33,116
so you can save those workflows
as services that can be used


838
00:42:33,116 --> 00:42:35,326
from any application
and across your system.


839
00:42:35,876 --> 00:42:40,216
And finally, you can use
JavaScript for Automation


840
00:42:40,216 --> 00:42:43,806
in Terminal using the
osascript command line tool.


841
00:42:43,806 --> 00:42:46,506
And this is great, you
can incorporate JavaScript


842
00:42:46,506 --> 00:42:48,226
for Automation into
a Bash script.


843
00:42:48,546 --> 00:42:50,886
And for example, display
an alert when you're


844
00:42:50,886 --> 00:42:53,116
about to finish a
long-running background process.


845
00:42:53,856 --> 00:42:56,426
So we've seen some of the places
where you can use JavaScript


846
00:42:56,426 --> 00:43:01,616
for Automation already,
now let's look at the rest.


847
00:43:01,746 --> 00:43:05,376
Let me set the scene, I
work as a photographer


848
00:43:05,376 --> 00:43:08,826
in a travel magazine and I
take pictures for our cover.


849
00:43:09,226 --> 00:43:11,616
And every week I have to
send those cover photos


850
00:43:11,616 --> 00:43:12,736
to the same person


851
00:43:13,276 --> 00:43:15,936
to be approved before I
can submit them the print.


852
00:43:16,956 --> 00:43:20,566
Every week I sent the same
email message to the same person


853
00:43:20,856 --> 00:43:23,126
and all I'm changing
are the pictures.


854
00:43:23,956 --> 00:43:28,726
So, I whipped up a little
droplet here using the


855
00:43:29,676 --> 00:43:34,166
openDocuments handler that
accesses the mail application,


856
00:43:34,346 --> 00:43:35,876
creates a new mail message


857
00:43:35,876 --> 00:43:37,946
for us using some
pre-canned content.


858
00:43:38,686 --> 00:43:43,306
It then uses the Contact
application to get my recipient


859
00:43:43,306 --> 00:43:46,396
of the email message, gets their
name and their email address,


860
00:43:47,326 --> 00:43:49,896
puts it on the message, and
then for each of the pictures


861
00:43:49,896 --> 00:43:52,066
that we've dropped on this
droplet we're going to add them


862
00:43:52,066 --> 00:43:55,146
as attachments to the message,
activate mail and have it ready


863
00:43:55,146 --> 00:43:58,336
to send whenever I'd like.


864
00:43:58,576 --> 00:44:00,966
So, here are some of
the photos I took.


865
00:44:00,966 --> 00:44:03,766
I happen to know the last
three are the most beautiful,


866
00:44:03,766 --> 00:44:07,836
so I'm going to drop those
right here onto this droplet.


867
00:44:08,216 --> 00:44:11,726
Our mail message is
created, the content's there,


868
00:44:11,726 --> 00:44:15,006
our recipient's there and all
the pictures we wanted are ready


869
00:44:15,006 --> 00:44:15,846
for us to go.


870
00:44:16,226 --> 00:44:22,706
My workflow was cut from
100% down to 5, 10, 0%.


871
00:44:23,416 --> 00:44:24,516
This made my life easier.


872
00:44:25,196 --> 00:44:27,576
And while I have
this script open,


873
00:44:28,466 --> 00:44:30,486
I'd like to mention
another problem that I have.


874
00:44:31,376 --> 00:44:34,036
I read a lot of JavaScript for
Automation, as you might expect,


875
00:44:34,436 --> 00:44:36,676
and I regularly have
Script Editor windows open,


876
00:44:36,916 --> 00:44:38,396
multiples all at once.


877
00:44:38,906 --> 00:44:41,346
Sometimes I'm running a
Library that I'm going to use


878
00:44:41,346 --> 00:44:43,216
in another script
and I want to be able


879
00:44:43,216 --> 00:44:44,596
to see everything
at the same time.


880
00:44:45,626 --> 00:44:49,086
And so before I hopped on the
Automation train, I might've had


881
00:44:49,086 --> 00:44:52,306
to drag these windows around
the screen, resize them,


882
00:44:52,306 --> 00:44:54,326
make sure corners aren't
overlapping each other,


883
00:44:54,326 --> 00:44:55,466
and so on and so forth.


884
00:44:56,516 --> 00:44:58,896
But then I realized,
why don't I automate it?


885
00:44:59,546 --> 00:45:01,826
So I whipped up this script here


886
00:45:02,456 --> 00:45:04,516
that accesses the Script
Editor application,


887
00:45:05,166 --> 00:45:08,636
it gets all of the windows, and
then using the number of windows


888
00:45:08,636 --> 00:45:12,206
and the size of the screen
it carefully, meticulously,


889
00:45:12,356 --> 00:45:15,106
programmatically
tiles the windows


890
00:45:15,106 --> 00:45:17,276
around the screen,
based on their size.


891
00:45:18,216 --> 00:45:21,416
So if I run this from the
script menu, because I use it


892
00:45:21,416 --> 00:45:24,056
so frequently, we see all


893
00:45:24,056 --> 00:45:26,566
of my windows were tiled
exactly as I wanted.


894
00:45:26,866 --> 00:45:28,836
I can see everything
all at the same time.


895
00:45:29,036 --> 00:45:31,536
This is beautiful for
developing multiple scripts


896
00:45:31,536 --> 00:45:32,276
at the same time.


897
00:45:33,326 --> 00:45:35,696
So I used JavaScript
for Automation


898
00:45:35,996 --> 00:45:38,886
to make writing JavaScript
for Automation even easier.


899
00:45:39,356 --> 00:45:42,606
It's powerful, it's
flexible and it's everywhere.


900
00:45:44,516 --> 00:45:49,686
[ Applause ]


901
00:45:50,186 --> 00:45:53,586
Now, speaking of flexibility,
and power, and everywhere,


902
00:45:53,906 --> 00:45:57,796
in fact, we've proven to
ourselves how easy it is


903
00:45:58,006 --> 00:46:00,666
to extend popular Text
Editors for JavaScript,


904
00:46:00,926 --> 00:46:03,846
like Sublime Text, and
TextMate, to extend


905
00:46:03,846 --> 00:46:06,586
and to execute JavaScript
for Automation code


906
00:46:06,746 --> 00:46:08,526
that we're writing in
those applications.


907
00:46:09,576 --> 00:46:12,716
And to prove it to you how
easy it is to write JavaScript


908
00:46:12,716 --> 00:46:15,706
for Automation anywhere
and run it, we've whipped


909
00:46:15,706 --> 00:46:17,876
up this automated workflow


910
00:46:18,296 --> 00:46:22,476
that uses the new Run
JavaScript action,


911
00:46:22,476 --> 00:46:26,726
and what we do is we
access the content


912
00:46:26,946 --> 00:46:30,776
of the front-most document,
we evaluate that as a script,


913
00:46:31,836 --> 00:46:35,866
then we display the result
and we optionally copy it


914
00:46:35,866 --> 00:46:37,936
to the clipboard if we'd like.


915
00:46:39,156 --> 00:46:42,266
I've saved this as a service
and I've attached that service


916
00:46:42,266 --> 00:46:48,766
to a hotkey, so now my work is
very, very slim and easy to do.


917
00:46:49,886 --> 00:46:52,416
I would like you to notice
I'm in TextEdit right now


918
00:46:52,866 --> 00:46:53,736
and I have JavaScript


919
00:46:53,736 --> 00:46:55,936
for Automation code
written in a document.


920
00:46:56,796 --> 00:46:59,386
So using that Automator
workflow as a service attached


921
00:46:59,386 --> 00:47:05,066
to this hotkey, I can
run this, code executing


922
00:47:05,226 --> 00:47:08,236
from the TextEdit IDE
that I love so much,


923
00:47:08,236 --> 00:47:10,536
that I've created using
JavaScript for Automation.


924
00:47:11,296 --> 00:47:14,166
We get our result, we
could copy to the clipboard


925
00:47:14,166 --> 00:47:15,466
but not right now, thank you.


926
00:47:16,136 --> 00:47:18,566
And so, that's amazing.


927
00:47:18,656 --> 00:47:20,966
I just run JavaScript for
Automation from TextEdit,


928
00:47:20,966 --> 00:47:23,526
and this is to show that
you can use JavaScript


929
00:47:23,526 --> 00:47:26,086
for Automation how you'd
like, where you'd like.


930
00:47:26,086 --> 00:47:27,776
It's extraordinarily extensible


931
00:47:27,776 --> 00:47:29,406
and it's extraordinarily
flexible.


932
00:47:29,936 --> 00:47:36,386
And as we mentioned before,
you can use JavaScript


933
00:47:36,386 --> 00:47:39,436
for Automation from Terminal
using the osascript command


934
00:47:39,436 --> 00:47:39,856
line tool.


935
00:47:41,116 --> 00:47:42,936
So, let's look at an example.


936
00:47:42,936 --> 00:47:47,896
We're going to be calling the
osascript command line tool


937
00:47:47,896 --> 00:47:48,796
with a couple flags.


938
00:47:49,236 --> 00:47:51,016
We're going to be using
the JavaScript language.


939
00:47:51,446 --> 00:47:54,826
We want our result to print
a source, and then we pass


940
00:47:54,826 --> 00:47:55,986
in some JavaScript to run.


941
00:47:57,076 --> 00:47:59,156
This is what I talked
about before.


942
00:47:59,526 --> 00:48:01,726
We can display an alert, so
imagine this could be a part


943
00:48:01,726 --> 00:48:04,916
of a bash process at the
end that'll show us an alert


944
00:48:04,916 --> 00:48:06,336
when our process
is about to finish.


945
00:48:07,256 --> 00:48:10,406
So if I run this, our
alert was displayed just


946
00:48:10,406 --> 00:48:11,826
like we wanted, which is great.


947
00:48:12,516 --> 00:48:16,246
We get our result, we could
react accordingly if we wanted.


948
00:48:17,156 --> 00:48:19,326
And another really
exciting new feature


949
00:48:19,326 --> 00:48:21,886
of osascript is an
interactive mode.


950
00:48:22,856 --> 00:48:25,886
So a variety of programming
languages, like Ruby and Python,


951
00:48:25,886 --> 00:48:27,626
have interactive
modes that allow you


952
00:48:27,626 --> 00:48:30,286
to interactively program
in those environments,


953
00:48:30,786 --> 00:48:33,076
and now this is possible
from osascript.


954
00:48:33,756 --> 00:48:38,566
So, to do so I'm going
to call osascript,


955
00:48:38,566 --> 00:48:42,696
our language is JavaScript, and
I'm going to pass the -i flag


956
00:48:42,746 --> 00:48:44,266
to say I'm going in
interactive mode.


957
00:48:44,266 --> 00:48:47,206
Now to demo this
interactive mode,


958
00:48:47,206 --> 00:48:49,246
I'm going to be interacting
with Safari.


959
00:48:50,266 --> 00:48:53,806
So, I'm going to create
a variable and set it


960
00:48:53,806 --> 00:48:57,016
to the Safari application, we
see that Safari was activated


961
00:48:57,046 --> 00:49:01,226
for us, making it a
little better to see.


962
00:49:01,816 --> 00:49:03,546
Then we can do things


963
00:49:03,546 --> 00:49:06,816
like create a reference
to the first window.


964
00:49:07,136 --> 00:49:08,796
Let's say we want to
get that window's name


965
00:49:09,926 --> 00:49:12,046
and simply call the name
property as a function.


966
00:49:12,376 --> 00:49:14,116
Favorites, like we
expect, that's great.


967
00:49:14,116 --> 00:49:17,516
This is a lot of fun, but
let's spice it up a bit.


968
00:49:17,816 --> 00:49:20,086
Let's create a new tab
and add that to the window


969
00:49:20,316 --> 00:49:22,166
in real-time, interactively.


970
00:49:22,916 --> 00:49:25,346
First, we'll create a new tab,


971
00:49:25,346 --> 00:49:28,716
and we'll have the
URL be apple.com.


972
00:49:30,156 --> 00:49:33,686
Then, to actually create this
in the application I'm going


973
00:49:33,686 --> 00:49:36,496
to push it onto the
window's tabs element array.


974
00:49:38,186 --> 00:49:41,786
And, before I do though, I know
that I want to bring the tab


975
00:49:41,786 --> 00:49:45,006
to the front when I do this,
and I can't quite remember,


976
00:49:45,356 --> 00:49:48,706
I think it's the front
tab or there's a property


977
00:49:48,706 --> 00:49:50,706
that I can summon a window
to bring it to the front.


978
00:49:51,456 --> 00:49:53,776
So, we're interacting
with this live,


979
00:49:53,776 --> 00:49:55,906
before I do this let's make
sure that I know what I'm doing.


980
00:49:55,906 --> 00:49:57,266
So I'm going to bring
up Script Editor


981
00:49:57,266 --> 00:50:03,546
and I'm going access the
Library window and let's see,


982
00:50:03,706 --> 00:50:05,726
we'll access Safari
scripting Dictionary.


983
00:50:05,966 --> 00:50:09,046
Great. Okay, we'll look
at the Safari suite.


984
00:50:09,256 --> 00:50:12,986
Yes, window, thank you,
ah, the currentTab,


985
00:50:12,986 --> 00:50:14,576
not the frontTab, excuse me.


986
00:50:14,836 --> 00:50:18,816
So now that I have this property
I know exactly how to create,


987
00:50:19,196 --> 00:50:21,376
how to set the tab
to the current tab,


988
00:50:21,526 --> 00:50:22,306
bringing it to the front.


989
00:50:23,006 --> 00:50:25,446
So if I push out of the
array and bring the tab


990
00:50:25,446 --> 00:50:29,856
to the front we've just now
live, interactively added a tab


991
00:50:29,856 --> 00:50:32,796
to this window, and had a whole
lot of fun in the process.


992
00:50:33,516 --> 00:50:36,616
[ Applause ]


993
00:50:37,116 --> 00:50:40,046
And beyond being a cool way
to interact with applications,


994
00:50:40,386 --> 00:50:43,116
this is phenomenal for
exploring their scriptability,


995
00:50:43,236 --> 00:50:44,936
for learning JavaScript
for Automation.


996
00:50:44,936 --> 00:50:48,756
It's a great tool to have.


997
00:50:48,956 --> 00:50:49,786
All right.


998
00:50:50,006 --> 00:50:53,816
So we've covered what JavaScript
for Automation is, how it works,


999
00:50:54,356 --> 00:50:57,126
how you can use it and
where you can use it.


1000
00:50:57,916 --> 00:51:01,846
To summarize, JavaScript
for Automation is built


1001
00:51:01,846 --> 00:51:05,006
on JavaScriptCore, a modern
JavaScript environment


1002
00:51:05,006 --> 00:51:07,676
and it's built on the Open
Scripting Architecture,


1003
00:51:07,956 --> 00:51:12,816
which has been part of the
Mac OS since before OS X.


1004
00:51:13,426 --> 00:51:16,246
JavaScript for Automation has
been integrated system-wide


1005
00:51:16,246 --> 00:51:19,416
at all layers, from high-level
application scripting,


1006
00:51:19,606 --> 00:51:22,096
to system services, to
use in the terminal,


1007
00:51:22,326 --> 00:51:23,546
and accessing system APIs.


1008
00:51:24,546 --> 00:51:29,646
And as you saw, JavaScript
for Automation is flexible,


1009
00:51:30,066 --> 00:51:32,046
it allows you to
accomplish tasks


1010
00:51:32,166 --> 00:51:34,976
and solve problems the
best way that you see fit.


1011
00:51:36,456 --> 00:51:40,406
So, our call to action
today is go out


1012
00:51:40,406 --> 00:51:42,546
and script the scriptable
applications on your Mac.


1013
00:51:43,976 --> 00:51:46,736
For app developers, make
your applications scriptable


1014
00:51:46,736 --> 00:51:48,896
so other people can script
them and do amazing things.


1015
00:51:50,656 --> 00:51:52,116
And make sure to tell others


1016
00:51:52,116 --> 00:51:54,806
to make their applications
scriptable if it isn't already.


1017
00:51:55,496 --> 00:51:58,596
We have a phenomenal ecosystem,
we're really excited for more


1018
00:51:58,596 --> 00:52:00,536
and more applications
to join it every day.


1019
00:52:00,536 --> 00:52:05,826
To check out documentation,
make sure to go


1020
00:52:05,826 --> 00:52:07,986
to developer.apple.com,
for the JavaScript


1021
00:52:07,986 --> 00:52:10,846
for Automation release notes,
as well as some sample code.


1022
00:52:11,486 --> 00:52:14,436
We are having a phenomenal time
with this great new feature,


1023
00:52:14,436 --> 00:52:16,276
we cannot wait for you
to get your hands on it.


1024
00:52:16,736 --> 00:52:17,666
Thank you very much.


1025
00:52:18,516 --> 00:52:32,640
[ Applause ]

