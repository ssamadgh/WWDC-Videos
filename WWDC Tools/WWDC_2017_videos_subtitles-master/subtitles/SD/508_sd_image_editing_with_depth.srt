1
00:00:07,516 --> 00:00:15,500
[ Background Sounds ]


2
00:00:23,516 --> 00:00:27,160
[ Applause ]


3
00:00:28,276 --> 00:00:29,166
>> I'm happy -- my name is


4
00:00:29,166 --> 00:00:29,576
Etienne.


5
00:00:29,576 --> 00:00:30,966
And I'm happy to be here today


6
00:00:31,176 --> 00:00:33,546
to show you how you can use


7
00:00:33,586 --> 00:00:35,166
depth to apply new kind of


8
00:00:35,226 --> 00:00:36,696
effects to your images.


9
00:00:38,666 --> 00:00:40,866
First, we're going to see what


10
00:00:40,936 --> 00:00:42,746
depth is and what it looks like.


11
00:00:43,326 --> 00:00:44,936
Then we're going to see how to


12
00:00:44,936 --> 00:00:46,536
load it and read it from our


13
00:00:46,536 --> 00:00:47,166
image files.


14
00:00:48,356 --> 00:00:49,826
And then we're going to show you


15
00:00:50,156 --> 00:00:52,546
several examples of effects you


16
00:00:52,546 --> 00:00:53,866
can achieve with depth.


17
00:00:54,486 --> 00:00:56,456
And we'll conclude with how to


18
00:00:56,456 --> 00:00:57,286
save depth data.


19
00:00:58,606 --> 00:00:59,006
All right.


20
00:00:59,266 --> 00:00:59,966
So let's get started.


21
00:01:01,536 --> 00:01:03,226
What is depth?


22
00:01:03,956 --> 00:01:05,296
So, to answer that question,


23
00:01:05,626 --> 00:01:07,486
let's start with how we capture


24
00:01:07,486 --> 00:01:07,786
depth.


25
00:01:10,806 --> 00:01:13,396
Depth can be captured only on


26
00:01:14,016 --> 00:01:17,066
iPhone 7+ and only on iOS 11.


27
00:01:18,036 --> 00:01:22,006
iPhone 7+ has a dual camera


28
00:01:22,006 --> 00:01:24,106
system that can be set to


29
00:01:24,106 --> 00:01:25,856
capture two images of the same


30
00:01:25,856 --> 00:01:27,846
scene at the same time and at


31
00:01:27,846 --> 00:01:28,756
the same focal length.


32
00:01:29,476 --> 00:01:32,026
The differences between those


33
00:01:32,026 --> 00:01:34,236
two images is called disparity.


34
00:01:35,766 --> 00:01:38,146
So disparity is a measure of the


35
00:01:38,146 --> 00:01:39,016
parallax effect.


36
00:01:39,416 --> 00:01:41,546
It measures how objects that are


37
00:01:41,546 --> 00:01:43,496
closer to the camera tends to


38
00:01:43,496 --> 00:01:47,656
move, to shift more from one


39
00:01:47,656 --> 00:01:49,516
image to the other.


40
00:01:49,796 --> 00:01:51,656
Once we know disparity, we can


41
00:01:51,656 --> 00:01:53,866
compute depth with a simple


42
00:01:54,046 --> 00:01:54,446
formula.


43
00:01:55,476 --> 00:01:57,316
Depth is 1 over disparity.


44
00:01:59,546 --> 00:02:01,506
So, in the remaining of this


45
00:02:01,506 --> 00:02:02,626
session we're going to talk


46
00:02:02,626 --> 00:02:04,676
about depth or disparity under


47
00:02:04,676 --> 00:02:06,476
the broad term of depth data.


48
00:02:06,966 --> 00:02:09,145
But remember, they're pretty


49
00:02:09,145 --> 00:02:11,806
similar and one is the inverse


50
00:02:11,806 --> 00:02:13,686
of the other.


51
00:02:14,656 --> 00:02:16,216
For more information about how


52
00:02:16,216 --> 00:02:18,106
we capture depth, I would refer


53
00:02:18,106 --> 00:02:20,626
you to the session on capturing


54
00:02:20,626 --> 00:02:22,176
depth in iPhone photography that


55
00:02:22,176 --> 00:02:22,896
took place yesterday.


56
00:02:23,996 --> 00:02:25,006
All right.


57
00:02:26,986 --> 00:02:28,516
So now that we know what depth


58
00:02:28,516 --> 00:02:30,656
and disparity looks like --


59
00:02:30,656 --> 00:02:32,306
sorry -- now that we know what


60
00:02:32,306 --> 00:02:33,436
depth and disparity is, let's


61
00:02:33,436 --> 00:02:34,566
take a look at what it looks


62
00:02:34,566 --> 00:02:35,386
like in practice.


63
00:02:35,796 --> 00:02:36,996
And for that, I'm going to call


64
00:02:36,996 --> 00:02:38,376
my colleague, Craig, to show you


65
00:02:38,686 --> 00:02:39,376
what it looks like.


66
00:02:39,876 --> 00:02:40,076
Craig.


67
00:02:42,516 --> 00:02:46,856
[ Applause ]


68
00:02:47,356 --> 00:02:48,216
>> Thank you, Etienne.


69
00:02:49,046 --> 00:02:50,586
What we're seeing here is an


70
00:02:50,586 --> 00:02:51,916
image that was captured by the


71
00:02:51,916 --> 00:02:53,066
iPhone 7+.


72
00:02:55,326 --> 00:02:56,886
And here is its disparity map.


73
00:02:57,106 --> 00:02:59,816
And as we've learned, disparity


74
00:03:00,776 --> 00:03:03,126
refers to the distance between


75
00:03:03,126 --> 00:03:04,576
two corresponding points that


76
00:03:04,576 --> 00:03:06,396
were captured by the iPhone 7+'s


77
00:03:06,396 --> 00:03:07,576
dual camera system.


78
00:03:09,116 --> 00:03:11,286
Bright areas are closer to the


79
00:03:11,286 --> 00:03:14,226
camera and correspond to higher


80
00:03:14,226 --> 00:03:15,296
disparity values.


81
00:03:15,706 --> 00:03:18,196
Where dark values are farther


82
00:03:18,196 --> 00:03:19,166
away from the camera and


83
00:03:19,166 --> 00:03:20,446
correspond to low disparity


84
00:03:20,446 --> 00:03:20,956
values.


85
00:03:21,396 --> 00:03:24,266
So, let's go back to the image


86
00:03:24,666 --> 00:03:26,476
and look at the disparity map


87
00:03:26,476 --> 00:03:26,926
again.


88
00:03:27,876 --> 00:03:29,666
We can pinch in to zoom in on an


89
00:03:29,666 --> 00:03:30,046
area.


90
00:03:30,046 --> 00:03:31,636
But we have one more trick we


91
00:03:31,636 --> 00:03:32,946
can do with this application.


92
00:03:34,796 --> 00:03:36,576
If I drag my finger across we


93
00:03:36,576 --> 00:03:38,646
can view the data in 3-D.


94
00:03:39,516 --> 00:03:42,826
[ Applause ]


95
00:03:43,326 --> 00:03:45,146
We can zoom in and really get a


96
00:03:45,146 --> 00:03:47,886
good look at the range of data


97
00:03:47,886 --> 00:03:49,096
that's available to us.


98
00:03:49,096 --> 00:03:50,536
We can rotate all the way around


99
00:03:50,786 --> 00:03:51,806
and look at that again.


100
00:03:52,116 --> 00:03:54,706
And even switch back to the


101
00:03:54,706 --> 00:03:56,316
image data overlaid over top of


102
00:03:56,956 --> 00:03:57,026
it.


103
00:03:57,596 --> 00:04:00,946
So let's look at another image.


104
00:04:02,726 --> 00:04:04,966
Here are some beautiful flowers.


105
00:04:06,326 --> 00:04:08,446
When I zoom in and rotate


106
00:04:08,446 --> 00:04:11,516
around, you see that we need to


107
00:04:11,516 --> 00:04:13,486
fill in those polygons with some


108
00:04:13,486 --> 00:04:13,856
data.


109
00:04:13,856 --> 00:04:15,486
So we just take the image values


110
00:04:15,486 --> 00:04:16,666
and stretch them along there.


111
00:04:17,236 --> 00:04:19,846
This goes to the fact that the


112
00:04:19,846 --> 00:04:21,616
depth data is not a good


113
00:04:21,616 --> 00:04:23,816
representation for recreating a


114
00:04:23,816 --> 00:04:24,886
full 3-D scene.


115
00:04:25,346 --> 00:04:26,716
But this view is still


116
00:04:26,716 --> 00:04:29,246
interesting to look at.


117
00:04:29,486 --> 00:04:30,796
Also, it's important to note


118
00:04:30,796 --> 00:04:32,506
that the disparity map is a


119
00:04:32,506 --> 00:04:34,356
lower resolution than the full


120
00:04:34,356 --> 00:04:36,156
image, roughly a half a


121
00:04:36,156 --> 00:04:38,116
megapixel for the disparity map


122
00:04:38,116 --> 00:04:39,446
versus 12 megapixels for the


123
00:04:39,446 --> 00:04:39,886
image.


124
00:04:41,836 --> 00:04:43,216
This application we built with


125
00:04:43,216 --> 00:04:43,816
SceneKit.


126
00:04:43,956 --> 00:04:45,186
So it made it really easy to


127
00:04:45,186 --> 00:04:45,696
implement.


128
00:04:46,186 --> 00:04:48,066
We took a mesh and then we


129
00:04:48,066 --> 00:04:50,376
transformed the z positions of


130
00:04:50,376 --> 00:04:52,176
the vertices so that the


131
00:04:52,176 --> 00:04:53,496
brighter pixel values were


132
00:04:53,496 --> 00:04:54,576
closer to the camera.


133
00:04:55,886 --> 00:04:57,526
Also, we normalized and remapped


134
00:04:57,526 --> 00:04:58,936
the data so that it made sense


135
00:04:58,936 --> 00:05:00,096
when we viewed it in 3-D.


136
00:05:00,516 --> 00:05:03,746
We'll look at one more image.


137
00:05:04,936 --> 00:05:06,576
On this image, it's interesting


138
00:05:06,576 --> 00:05:08,066
if we look at the disparity map.


139
00:05:08,746 --> 00:05:11,106
And we zoom in and move around a


140
00:05:11,106 --> 00:05:12,316
little bit, we see that we have


141
00:05:12,316 --> 00:05:13,856
a few distinct planes to work


142
00:05:13,856 --> 00:05:14,326
with here.


143
00:05:15,666 --> 00:05:17,166
So, with that, we might get the


144
00:05:17,166 --> 00:05:18,316
idea that maybe it would be a


145
00:05:18,316 --> 00:05:19,696
good idea to quantize or


146
00:05:19,696 --> 00:05:21,376
threshold this depth data before


147
00:05:21,376 --> 00:05:22,836
we filter it for a more dramatic


148
00:05:22,836 --> 00:05:23,156
effect.


149
00:05:24,346 --> 00:05:26,106
So with that, I'd like to turn


150
00:05:26,106 --> 00:05:27,256
it back over to Etienne.


151
00:05:30,516 --> 00:05:34,026
[ Applause ]


152
00:05:34,526 --> 00:05:35,046
>> Thank you, Craig.


153
00:05:35,766 --> 00:05:38,446
All right.


154
00:05:38,446 --> 00:05:39,606
So now that we've seen what


155
00:05:39,606 --> 00:05:40,856
depth and disparity looks like,


156
00:05:41,366 --> 00:05:42,896
what kind of effects can we


157
00:05:42,896 --> 00:05:44,596
apply with that data?


158
00:05:45,246 --> 00:05:46,106
So let's take a look.


159
00:05:47,026 --> 00:05:49,226
Here's an example image and its


160
00:05:49,276 --> 00:05:49,986
disparity map.


161
00:05:52,706 --> 00:05:54,206
One effect we can apply is a


162
00:05:54,206 --> 00:05:55,286
depth blur effect.


163
00:05:55,616 --> 00:05:57,376
And this is the effect that you


164
00:05:57,376 --> 00:05:59,606
can achieve by capturing using


165
00:05:59,606 --> 00:06:00,916
camera in portrait mode.


166
00:06:03,746 --> 00:06:05,226
We can get a bit more creative.


167
00:06:05,316 --> 00:06:06,856
And here's an example where we


168
00:06:06,856 --> 00:06:08,556
apply a different effect to the


169
00:06:08,556 --> 00:06:09,896
background and the foreground.


170
00:06:10,526 --> 00:06:11,796
Here we [inaudible] the


171
00:06:11,796 --> 00:06:13,686
background while increasing the


172
00:06:13,686 --> 00:06:15,556
saturation of the foreground to


173
00:06:15,556 --> 00:06:16,796
make those flowers stand out.


174
00:06:19,356 --> 00:06:20,886
We can go even further than


175
00:06:20,886 --> 00:06:21,176
this.


176
00:06:21,516 --> 00:06:23,356
And here we are actually the


177
00:06:23,356 --> 00:06:24,676
deeming the pixels in the


178
00:06:24,676 --> 00:06:26,686
background proportionally to the


179
00:06:26,686 --> 00:06:27,176
depth.


180
00:06:28,366 --> 00:06:30,716
And so this is just a couple of


181
00:06:30,716 --> 00:06:32,366
examples to give you a taste of


182
00:06:32,366 --> 00:06:34,056
what you can do with depth data.


183
00:06:34,886 --> 00:06:35,936
And we're going to show you how


184
00:06:35,936 --> 00:06:37,686
to do this and more later in the


185
00:06:37,686 --> 00:06:38,006
talk.


186
00:06:40,256 --> 00:06:41,906
Now let's see who could use that


187
00:06:42,326 --> 00:06:42,446
depth.


188
00:06:42,646 --> 00:06:44,096
Well of course, if you are


189
00:06:44,096 --> 00:06:46,576
editing an application, you can


190
00:06:46,576 --> 00:06:48,536
now use depth to create new


191
00:06:48,536 --> 00:06:50,116
kinds of effects and to apply


192
00:06:50,116 --> 00:06:51,226
new kinds of effects to your


193
00:06:51,226 --> 00:06:51,706
images.


194
00:06:52,906 --> 00:06:53,686
But if you're a camera


195
00:06:53,756 --> 00:06:55,736
application, you can also opt in


196
00:06:55,736 --> 00:06:58,626
to capture depth and be the very


197
00:06:58,626 --> 00:07:00,236
first -- apply the very first


198
00:07:00,236 --> 00:07:01,896
depth effect to the images such


199
00:07:01,896 --> 00:07:03,246
as your own depth blur effects,


200
00:07:03,246 --> 00:07:03,776
for example.


201
00:07:05,016 --> 00:07:06,286
If you are a sharing


202
00:07:06,286 --> 00:07:07,646
application, you may also want


203
00:07:07,646 --> 00:07:09,706
to take advantage of depth to


204
00:07:09,706 --> 00:07:11,906
apply cool effects before


205
00:07:12,216 --> 00:07:13,156
sharing images.


206
00:07:14,246 --> 00:07:15,076
All right.


207
00:07:15,916 --> 00:07:17,206
But before we can apply any


208
00:07:17,206 --> 00:07:18,556
effects, let's take a look at


209
00:07:18,556 --> 00:07:20,696
how to read depth data and load


210
00:07:20,696 --> 00:07:21,386
it into memory.


211
00:07:23,806 --> 00:07:24,696
So let's take a look.


212
00:07:25,916 --> 00:07:27,996
Depth data is stored in image


213
00:07:27,996 --> 00:07:30,506
files alongside image data in a


214
00:07:30,506 --> 00:07:32,666
section called Auxiliary Data.


215
00:07:34,836 --> 00:07:37,846
Beware that the values image


216
00:07:37,896 --> 00:07:39,346
[inaudible] in the system such


217
00:07:39,346 --> 00:07:40,556
as UI image and [inaudible]


218
00:07:40,586 --> 00:07:41,546
image or [inaudible] image do


219
00:07:41,736 --> 00:07:43,256
not contain depth information.


220
00:07:44,136 --> 00:07:45,496
You need to access the image


221
00:07:45,496 --> 00:07:47,076
file in order to read the depth


222
00:07:47,076 --> 00:07:47,316
data.


223
00:07:48,036 --> 00:07:49,226
So let's see how to do that.


224
00:07:50,116 --> 00:07:51,306
If you're using PhotoKit,


225
00:07:52,336 --> 00:07:53,406
there's a couple of ways to can


226
00:07:53,406 --> 00:07:54,516
access the image file.


227
00:07:55,126 --> 00:07:57,116
You may be using PH Content


228
00:07:57,116 --> 00:08:00,046
Editing input, for instance.


229
00:08:00,396 --> 00:08:02,196
Here's how you can request the


230
00:08:02,196 --> 00:08:03,336
Content Editing input for a


231
00:08:03,336 --> 00:08:04,586
particular PHAsset.


232
00:08:05,856 --> 00:08:07,556
And you can access the image


233
00:08:07,646 --> 00:08:09,186
file URL from the Content


234
00:08:09,186 --> 00:08:10,176
Editing input that way.


235
00:08:12,966 --> 00:08:14,406
You may also use PH Image


236
00:08:14,406 --> 00:08:14,886
Manager.


237
00:08:15,816 --> 00:08:18,776
You can ask the PH Image Manager


238
00:08:18,916 --> 00:08:20,476
to request image data for a


239
00:08:20,476 --> 00:08:21,306
particular asset.


240
00:08:21,666 --> 00:08:22,996
And that will give you back a


241
00:08:22,996 --> 00:08:25,256
data object that contains the


242
00:08:25,256 --> 00:08:25,836
file data.


243
00:08:27,826 --> 00:08:28,286
All right.


244
00:08:29,276 --> 00:08:30,726
So now that we have access to a


245
00:08:30,726 --> 00:08:32,416
file, let's see if it contained


246
00:08:32,416 --> 00:08:32,876
depth data.


247
00:08:33,256 --> 00:08:34,025
And so we're going to use


248
00:08:34,025 --> 00:08:34,976
ImageIO for this.


249
00:08:37,436 --> 00:08:38,635
We start from an image


250
00:08:38,635 --> 00:08:39,746
[inaudible] that we create from


251
00:08:39,746 --> 00:08:40,535
our image file.


252
00:08:41,916 --> 00:08:45,786
And then we copy the image


253
00:08:45,786 --> 00:08:46,626
source properties.


254
00:08:47,576 --> 00:08:48,706
This will give you back a


255
00:08:48,706 --> 00:08:50,706
dictionary that looks like this


256
00:08:50,706 --> 00:08:50,996
one.


257
00:08:52,526 --> 00:08:54,086
You want to look for the


258
00:08:54,086 --> 00:08:56,276
kCKImage Property Auxiliary data


259
00:08:56,796 --> 00:08:58,106
key in that dictionary.


260
00:08:58,416 --> 00:09:00,146
The presence of that key will


261
00:09:00,146 --> 00:09:02,086
tell you that image file that


262
00:09:02,086 --> 00:09:03,256
you're working with contained


263
00:09:03,256 --> 00:09:03,936
auxiliary data.


264
00:09:05,306 --> 00:09:06,916
You can look at the type of the


265
00:09:06,916 --> 00:09:07,266
data.


266
00:09:07,266 --> 00:09:08,586
And here you can see its


267
00:09:08,586 --> 00:09:09,186
disparity.


268
00:09:09,596 --> 00:09:10,486
Could also be depth.


269
00:09:11,606 --> 00:09:13,556
One thing to note here is that


270
00:09:13,556 --> 00:09:15,016
the dimension of the depth data


271
00:09:15,656 --> 00:09:17,726
are smaller than the dimension


272
00:09:17,896 --> 00:09:19,036
of the full size image.


273
00:09:20,176 --> 00:09:21,476
This is an image captured by


274
00:09:21,476 --> 00:09:22,426
iPhone 7+.


275
00:09:22,556 --> 00:09:24,036
The full size image is 12


276
00:09:24,036 --> 00:09:24,726
megapixel.


277
00:09:25,206 --> 00:09:27,946
And the depth data is about less


278
00:09:28,116 --> 00:09:29,706
than a megapixel.


279
00:09:31,276 --> 00:09:32,746
All right.


280
00:09:34,156 --> 00:09:35,666
So now that we know that we have


281
00:09:35,666 --> 00:09:37,186
a file with depth data, let's


282
00:09:37,186 --> 00:09:41,406
see how we can read it


283
00:09:41,456 --> 00:09:43,456
[inaudible].


284
00:09:43,506 --> 00:09:44,826
So, it goes like this.


285
00:09:44,826 --> 00:09:46,186
We start with the auxiliary data


286
00:09:46,186 --> 00:09:46,846
from the file.


287
00:09:48,026 --> 00:09:49,516
And then we create an AV Depth


288
00:09:49,516 --> 00:09:50,906
Data object, which is an


289
00:09:50,906 --> 00:09:52,616
in-memory representation for the


290
00:09:52,616 --> 00:09:53,146
depth data.


291
00:09:54,346 --> 00:09:56,736
From that object we can access a


292
00:09:56,736 --> 00:09:58,956
CV pixel buffer that contains


293
00:09:58,956 --> 00:09:59,626
the depth data.


294
00:10:01,276 --> 00:10:02,676
The pixel buffer will be a


295
00:10:02,676 --> 00:10:04,126
single channel of data


296
00:10:05,046 --> 00:10:06,786
containing either depth or


297
00:10:06,786 --> 00:10:09,486
disparity and in 16-bit or


298
00:10:09,486 --> 00:10:10,696
32-bit floating [inaudible]


299
00:10:10,696 --> 00:10:11,336
values.


300
00:10:11,806 --> 00:10:11,966
All right.


301
00:10:12,676 --> 00:10:16,046
So let's see how to do that in


302
00:10:16,046 --> 00:10:16,376
code.


303
00:10:18,246 --> 00:10:21,616
Again we start from [inaudible].


304
00:10:21,616 --> 00:10:23,806
And next we ask to copy the


305
00:10:23,806 --> 00:10:25,646
auxiliary data out of the image


306
00:10:25,646 --> 00:10:25,713
[inaudible].


307
00:10:25,713 --> 00:10:27,626
So for that we request a


308
00:10:27,626 --> 00:10:29,846
particular auxiliary data type.


309
00:10:30,286 --> 00:10:31,306
Here we are requesting


310
00:10:31,306 --> 00:10:31,886
disparity.


311
00:10:32,856 --> 00:10:34,096
And this give us back a


312
00:10:34,096 --> 00:10:36,046
dictionary that contains the


313
00:10:36,046 --> 00:10:38,606
auxiliary data.


314
00:10:38,606 --> 00:10:40,256
It [inaudible], and that will


315
00:10:40,256 --> 00:10:41,956
indicate that the image file


316
00:10:41,956 --> 00:10:44,006
does not contain the disparity


317
00:10:44,006 --> 00:10:45,896
-- sorry, the auxiliary data of


318
00:10:45,896 --> 00:10:46,766
that particular type.


319
00:10:46,896 --> 00:10:48,436
So that's another way you can


320
00:10:48,436 --> 00:10:50,486
check if a file contains depth


321
00:10:50,486 --> 00:10:50,756
data.


322
00:10:53,536 --> 00:10:55,746
Next, we can create an AVDepth


323
00:10:55,746 --> 00:10:57,416
Data object from the auxiliary


324
00:10:57,416 --> 00:10:59,466
data, the representation that we


325
00:10:59,466 --> 00:11:00,526
got from ImageIO.


326
00:11:02,016 --> 00:11:03,516
And that AVDepth Data contains a


327
00:11:03,516 --> 00:11:04,676
couple of properties that you


328
00:11:04,676 --> 00:11:05,196
can ask.


329
00:11:05,196 --> 00:11:06,966
For example, you can check for


330
00:11:06,966 --> 00:11:08,976
its native data type.


331
00:11:09,836 --> 00:11:11,616
And that's a pixel format that


332
00:11:11,616 --> 00:11:12,306
you can check.


333
00:11:12,306 --> 00:11:13,956
And if it's not the one you


334
00:11:13,956 --> 00:11:16,906
want, you can also convert it to


335
00:11:16,906 --> 00:11:19,016
a new pixel format.


336
00:11:19,046 --> 00:11:22,156
So for example, here we ask for


337
00:11:22,156 --> 00:11:23,456
disparity float 16.


338
00:11:23,486 --> 00:11:24,866
Because maybe we're going to use


339
00:11:24,866 --> 00:11:26,436
a disparity map on the GPU, for


340
00:11:26,436 --> 00:11:26,856
example.


341
00:11:27,766 --> 00:11:30,216
And this will return a new AV


342
00:11:30,216 --> 00:11:31,506
Depth Data object of the right


343
00:11:31,506 --> 00:11:31,926
format.


344
00:11:32,706 --> 00:11:34,376
So once you have a depth data


345
00:11:34,376 --> 00:11:35,616
object that you're happy with,


346
00:11:35,656 --> 00:11:37,886
you can access a CV pixel buffer


347
00:11:38,226 --> 00:11:39,416
using the depth data map


348
00:11:39,416 --> 00:11:39,836
property.


349
00:11:41,326 --> 00:11:42,366
Once you have the CV pixel


350
00:11:42,366 --> 00:11:43,906
buffer you can use it directly.


351
00:11:43,906 --> 00:11:45,716
Or you can use it using Metal or


352
00:11:45,716 --> 00:11:46,246
Core Image.


353
00:11:47,526 --> 00:11:48,566
If you're working with Core


354
00:11:48,566 --> 00:11:50,646
Image, there's a convenient way


355
00:11:50,766 --> 00:11:52,476
you can load the depth data


356
00:11:52,476 --> 00:11:53,856
directly into a CI Image.


357
00:11:54,076 --> 00:11:54,976
Here's how to do it.


358
00:11:55,976 --> 00:11:57,986
When you create a CI Image from


359
00:11:57,986 --> 00:11:59,556
the contents of a file, you can


360
00:11:59,556 --> 00:12:01,626
now specify a new option such as


361
00:12:01,986 --> 00:12:05,566
kCGIImage auxiliary depth or


362
00:12:05,566 --> 00:12:09,246
disparity to indicate to CI to


363
00:12:09,246 --> 00:12:10,856
load the depth data -- the depth


364
00:12:10,856 --> 00:12:12,126
image instead of the regular


365
00:12:12,166 --> 00:12:12,526
image.


366
00:12:14,106 --> 00:12:16,806
Once you have a depth image, you


367
00:12:16,806 --> 00:12:18,286
can always go back to the AV


368
00:12:18,286 --> 00:12:20,276
Depth data object by calling its


369
00:12:20,276 --> 00:12:21,266
depth data property.


370
00:12:23,286 --> 00:12:24,416
And keep in mind that you can


371
00:12:24,416 --> 00:12:26,326
always convert back and forth


372
00:12:26,326 --> 00:12:27,706
between disparity and depth


373
00:12:27,856 --> 00:12:29,786
using convenient UCI filters


374
00:12:30,016 --> 00:12:33,416
such as CI depth to disparity.


375
00:12:34,776 --> 00:12:35,136
All right.


376
00:12:35,306 --> 00:12:37,196
So now that we've read the depth


377
00:12:37,336 --> 00:12:39,796
data out of a file and into an


378
00:12:39,796 --> 00:12:42,096
image, let's see -- we still


379
00:12:42,236 --> 00:12:44,446
need to take a couple more steps


380
00:12:44,446 --> 00:12:45,726
before we can start editing with


381
00:12:45,726 --> 00:12:45,906
it.


382
00:12:46,116 --> 00:12:49,286
If you remember, the depth data


383
00:12:49,286 --> 00:12:50,706
is lower resolution than the


384
00:12:50,706 --> 00:12:51,196
image.


385
00:12:51,626 --> 00:12:53,616
So, the very first thing that


386
00:12:53,616 --> 00:12:55,156
you want to do is to scale it up


387
00:12:55,816 --> 00:12:57,196
to the resolution of the image


388
00:12:57,196 --> 00:12:57,966
that you're working with.


389
00:12:58,536 --> 00:12:59,596
There's a couple ways to do


390
00:12:59,596 --> 00:12:59,826
that.


391
00:12:59,826 --> 00:13:01,046
So, let's take a look.


392
00:13:02,896 --> 00:13:04,846
Here's our example image and its


393
00:13:04,846 --> 00:13:05,736
disparity map.


394
00:13:06,516 --> 00:13:08,436
So, if we scale up, let's say


395
00:13:08,436 --> 00:13:10,716
this small, tiny portion there,


396
00:13:10,826 --> 00:13:12,826
using narrow sampling, you can


397
00:13:12,826 --> 00:13:13,716
see that it's very, very


398
00:13:13,716 --> 00:13:14,336
pixelated.


399
00:13:14,716 --> 00:13:16,006
So at the very least you would


400
00:13:16,006 --> 00:13:17,496
want to apply linear sampling to


401
00:13:17,496 --> 00:13:18,636
get the smoother result.


402
00:13:19,926 --> 00:13:22,096
You can also use a new CI filter


403
00:13:22,446 --> 00:13:25,226
to CI BiCubicScale Transform to


404
00:13:25,226 --> 00:13:27,936
get an even smoother result.


405
00:13:28,946 --> 00:13:31,336
However, beware that depth data


406
00:13:31,336 --> 00:13:32,206
is not color data.


407
00:13:32,886 --> 00:13:34,896
And so, instead of smoothing,


408
00:13:34,896 --> 00:13:36,476
maybe what you want is actually


409
00:13:36,476 --> 00:13:38,686
preserve as much as possible the


410
00:13:38,686 --> 00:13:41,216
details of the image so that the


411
00:13:41,216 --> 00:13:42,786
depth data matches the image


412
00:13:42,786 --> 00:13:43,426
more closely.


413
00:13:43,836 --> 00:13:44,796
And you can do this with a


414
00:13:44,796 --> 00:13:46,926
convenient CI filter called CI


415
00:13:46,926 --> 00:13:48,636
Edge Preserve Upsample Filter.


416
00:13:49,966 --> 00:13:52,206
This filter will upsample the


417
00:13:52,206 --> 00:13:54,226
depth data and will try to


418
00:13:54,226 --> 00:13:56,686
preserve the edges from the


419
00:13:56,926 --> 00:13:58,156
color image.


420
00:13:59,586 --> 00:14:00,506
All right.


421
00:14:01,786 --> 00:14:04,106
Oh, also another thing that you


422
00:14:04,106 --> 00:14:05,826
need to be careful of.


423
00:14:06,026 --> 00:14:07,466
For all of those resampling


424
00:14:07,466 --> 00:14:09,446
operation, we recommend that you


425
00:14:09,446 --> 00:14:11,016
use disparity over depth because


426
00:14:11,016 --> 00:14:12,736
it gives you -- it will give you


427
00:14:12,736 --> 00:14:13,546
better results.


428
00:14:15,056 --> 00:14:17,836
Okay. A couple thing that you


429
00:14:17,836 --> 00:14:18,886
may want to do as well.


430
00:14:20,166 --> 00:14:21,836
You may want to compute the


431
00:14:21,836 --> 00:14:23,786
minimum and maximum value for


432
00:14:23,786 --> 00:14:24,446
the depth data.


433
00:14:25,896 --> 00:14:28,186
Because there are many cases


434
00:14:28,186 --> 00:14:29,116
where you need to know those


435
00:14:29,116 --> 00:14:30,486
values for the particular


436
00:14:30,486 --> 00:14:32,346
effects that you want to apply.


437
00:14:34,806 --> 00:14:36,066
Also keep in mind that the depth


438
00:14:36,066 --> 00:14:37,996
data is not normalized between 0


439
00:14:37,996 --> 00:14:39,016
and 1.


440
00:14:39,016 --> 00:14:41,296
For example, disparity values


441
00:14:41,296 --> 00:14:43,326
can range from 0, which means


442
00:14:43,676 --> 00:14:48,906
infinity, to greater than 1 for


443
00:14:48,906 --> 00:14:51,016
objects that are closer than one


444
00:14:51,016 --> 00:14:51,706
meter away.


445
00:14:53,156 --> 00:14:58,066
Okay. Another thing you can do


446
00:14:58,066 --> 00:14:59,346
is to normalize the depth data.


447
00:14:59,346 --> 00:15:00,546
So once you know the min and max


448
00:15:00,546 --> 00:15:02,316
you can normalize the depth or


449
00:15:02,316 --> 00:15:03,796
disparity between 0 and 1.


450
00:15:04,086 --> 00:15:05,226
And that's pretty convenient


451
00:15:05,466 --> 00:15:07,446
first to visualize it.


452
00:15:07,826 --> 00:15:09,456
But also if you want to apply


453
00:15:09,826 --> 00:15:12,396
your depth effects consistently


454
00:15:12,396 --> 00:15:14,036
across various different scenes.


455
00:15:14,876 --> 00:15:15,226
All right.


456
00:15:15,226 --> 00:15:17,276
So now that we've read our depth


457
00:15:17,276 --> 00:15:18,886
data, and prepared it for


458
00:15:18,886 --> 00:15:20,396
editing we are ready to start


459
00:15:20,396 --> 00:15:21,126
filtering with it.


460
00:15:23,096 --> 00:15:24,546
So in this section we're going


461
00:15:24,546 --> 00:15:26,546
to show you several example of


462
00:15:26,706 --> 00:15:28,406
depth effects you can apply.


463
00:15:29,236 --> 00:15:30,696
We're going to start with simple


464
00:15:30,696 --> 00:15:31,956
background effects that you can


465
00:15:31,956 --> 00:15:34,106
achieve using built in Core


466
00:15:34,106 --> 00:15:34,926
Image filters.


467
00:15:35,736 --> 00:15:37,996
Then we're going to show you a


468
00:15:37,996 --> 00:15:39,486
custom depth effect that you can


469
00:15:39,486 --> 00:15:41,446
achieve using a custom CI


470
00:15:41,696 --> 00:15:42,116
[inaudible] code.


471
00:15:43,526 --> 00:15:45,396
Then we're going to show you how


472
00:15:45,396 --> 00:15:46,546
you can apply your own depth


473
00:15:46,546 --> 00:15:48,216
blur effect using a brand new CI


474
00:15:48,216 --> 00:15:48,506
Filter.


475
00:15:49,726 --> 00:15:51,196
And finally, we're going to show


476
00:15:51,196 --> 00:15:52,996
you how to create a brand new


477
00:15:52,996 --> 00:15:54,966
3-D effect using depth.


478
00:15:55,376 --> 00:15:56,516
So let's get started with the


479
00:15:56,516 --> 00:15:57,026
first one.


480
00:15:57,596 --> 00:15:58,696
And for that I'm going to call


481
00:15:58,696 --> 00:16:00,276
my colleague, Stephen, on stage


482
00:16:00,276 --> 00:16:00,736
for that demo.


483
00:16:01,416 --> 00:16:01,746
Stephen.


484
00:16:02,516 --> 00:16:06,686
[ Applause ]


485
00:16:07,186 --> 00:16:07,816
>> Thank you, Etienne.


486
00:16:08,626 --> 00:16:09,396
Good morning everybody.


487
00:16:09,396 --> 00:16:10,296
My name is Stephen.


488
00:16:10,296 --> 00:16:12,176
And now that Etienne has shown


489
00:16:12,176 --> 00:16:14,006
you how to load and prepare your


490
00:16:14,006 --> 00:16:16,566
depth data, it's my pleasure to


491
00:16:16,566 --> 00:16:18,106
be here to show you a couple of


492
00:16:18,106 --> 00:16:20,136
ways that you can use depth now


493
00:16:20,136 --> 00:16:22,356
to achieve some new and


494
00:16:22,356 --> 00:16:23,746
interesting effects on your


495
00:16:23,746 --> 00:16:24,206
images.


496
00:16:24,946 --> 00:16:26,386
So we're going to jump right in


497
00:16:26,386 --> 00:16:29,596
with a demo.


498
00:16:29,966 --> 00:16:32,846
Okay. What we're looking at here


499
00:16:32,846 --> 00:16:35,366
is -- I'm in the Photos app.


500
00:16:36,336 --> 00:16:37,666
And I'm going to enter Edit here


501
00:16:37,666 --> 00:16:38,306
on this image.


502
00:16:38,596 --> 00:16:42,546
So, this effect is implemented


503
00:16:42,546 --> 00:16:43,546
here in a photo editing


504
00:16:43,546 --> 00:16:44,156
extension.


505
00:16:44,746 --> 00:16:48,986
And now that we got the rough


506
00:16:48,986 --> 00:16:51,026
parts out of the way, we're


507
00:16:51,026 --> 00:16:52,116
looking at the original image


508
00:16:52,116 --> 00:16:52,336
here.


509
00:16:53,346 --> 00:16:54,206
No edits applied.


510
00:16:54,506 --> 00:16:55,456
And I'm going to go ahead and


511
00:16:55,456 --> 00:16:56,296
turn on the effect now.


512
00:16:57,696 --> 00:16:58,476
What you see is that I've


513
00:16:58,476 --> 00:17:00,056
applied a de-saturating effect


514
00:17:00,276 --> 00:17:01,706
to the image, but only to the


515
00:17:01,706 --> 00:17:02,536
background region.


516
00:17:03,596 --> 00:17:05,195
And I can pick a different


517
00:17:05,435 --> 00:17:07,406
background effect to apply.


518
00:17:07,406 --> 00:17:08,516
In this case, I've picked just a


519
00:17:08,516 --> 00:17:09,445
flat white image.


520
00:17:10,256 --> 00:17:13,376
And maybe I'm not terribly


521
00:17:13,376 --> 00:17:14,516
satisfied with where that


522
00:17:14,516 --> 00:17:15,955
threshold is between background


523
00:17:15,955 --> 00:17:18,185
and foreground, so I can pick a


524
00:17:18,185 --> 00:17:19,496
new threshold by tapping.


525
00:17:20,646 --> 00:17:21,866
And this is all based on the


526
00:17:22,076 --> 00:17:22,626
depth data.


527
00:17:24,006 --> 00:17:25,586
So let me bring it back here to


528
00:17:25,586 --> 00:17:25,986
the front.


529
00:17:25,986 --> 00:17:27,215
And you can clearly see there's


530
00:17:27,536 --> 00:17:29,706
a pretty sharp boundary between


531
00:17:29,916 --> 00:17:31,066
what's considered background and


532
00:17:31,066 --> 00:17:31,596
foreground.


533
00:17:32,106 --> 00:17:33,386
There's actually a narrow region


534
00:17:33,386 --> 00:17:34,726
in between where we're doing a


535
00:17:34,726 --> 00:17:35,906
little bit of blending between


536
00:17:35,906 --> 00:17:36,306
the two.


537
00:17:36,856 --> 00:17:38,436
And I have control over the size


538
00:17:38,436 --> 00:17:39,286
of that blend region.


539
00:17:40,346 --> 00:17:42,986
I can adjust that by pinching.


540
00:17:43,376 --> 00:17:44,556
And there you can see it looks


541
00:17:44,936 --> 00:17:46,776
like a pretty nice white fog


542
00:17:48,366 --> 00:17:48,536
effect.


543
00:17:49,186 --> 00:17:51,206
We've implemented this effect by


544
00:17:51,206 --> 00:17:53,306
making use of a blend mask.


545
00:17:54,006 --> 00:17:54,736
So let me show you what our


546
00:17:54,736 --> 00:17:55,896
blend mask looks like here.


547
00:17:57,536 --> 00:17:59,096
The black regions of the blend


548
00:17:59,096 --> 00:18:00,016
mask correspond to the


549
00:18:00,016 --> 00:18:00,846
background image.


550
00:18:01,266 --> 00:18:02,656
Solid white is foreground.


551
00:18:02,656 --> 00:18:03,946
And then everything in between


552
00:18:04,036 --> 00:18:05,146
is where we blend between the


553
00:18:05,146 --> 00:18:05,386
two.


554
00:18:06,146 --> 00:18:07,766
So, this is what that blend mask


555
00:18:07,766 --> 00:18:08,996
looks like as I pinch.


556
00:18:09,656 --> 00:18:10,876
We're adjusting the size and


557
00:18:10,876 --> 00:18:11,966
slope of that blend.


558
00:18:13,556 --> 00:18:14,506
Okay, back to the original


559
00:18:14,506 --> 00:18:14,826
image.


560
00:18:15,356 --> 00:18:16,506
As many of you know, there are


561
00:18:16,506 --> 00:18:18,266
so many built in interesting


562
00:18:18,266 --> 00:18:19,626
Core Image filters we could


563
00:18:19,626 --> 00:18:20,466
choose to apply.


564
00:18:21,036 --> 00:18:22,376
I'm going to show you a couple


565
00:18:22,376 --> 00:18:22,756
of others.


566
00:18:22,756 --> 00:18:24,596
This one is a hexagonal pixelate


567
00:18:24,596 --> 00:18:24,986
filter.


568
00:18:25,636 --> 00:18:27,796
And a motion blur.


569
00:18:29,636 --> 00:18:30,836
Let's say I'm happy with this.


570
00:18:30,836 --> 00:18:32,086
And I'll save it back to my


571
00:18:32,766 --> 00:18:33,616
photo library.


572
00:18:34,476 --> 00:18:36,226
Okay, now let's talk about how


573
00:18:36,226 --> 00:18:36,786
we did this.


574
00:18:40,806 --> 00:18:44,996
As I mentioned, we accomplished


575
00:18:44,996 --> 00:18:46,506
this effect by building a blend


576
00:18:46,506 --> 00:18:46,896
mask.


577
00:18:47,446 --> 00:18:48,396
And so I'll talk to you now


578
00:18:48,396 --> 00:18:49,376
about how we build that blend


579
00:18:49,376 --> 00:18:49,716
mask.


580
00:18:50,086 --> 00:18:51,216
The basic idea is that we're


581
00:18:51,216 --> 00:18:52,626
going to map our normalized


582
00:18:52,656 --> 00:18:55,106
disparity values into values


583
00:18:55,106 --> 00:18:57,056
between 0 and 1 for the mask.


584
00:18:58,556 --> 00:19:00,796
And so we want some high region


585
00:19:00,796 --> 00:19:03,006
of disparity values to map to 1


586
00:19:03,106 --> 00:19:04,276
in our blend mask corresponding


587
00:19:04,276 --> 00:19:04,946
to the foreground.


588
00:19:06,416 --> 00:19:07,736
Some region of low disparity


589
00:19:07,736 --> 00:19:08,936
values to map to 0.


590
00:19:08,936 --> 00:19:10,736
And that will be the background


591
00:19:10,736 --> 00:19:11,106
region.


592
00:19:11,216 --> 00:19:12,576
And then all disparity values in


593
00:19:12,576 --> 00:19:14,366
between will blend with the


594
00:19:14,366 --> 00:19:14,946
linear ramp.


595
00:19:16,986 --> 00:19:18,126
The first part of building this


596
00:19:18,126 --> 00:19:20,446
blend mask is to pick the


597
00:19:20,716 --> 00:19:23,056
threshold between background and


598
00:19:23,056 --> 00:19:23,526
foreground.


599
00:19:24,446 --> 00:19:25,506
So when the user taps on the


600
00:19:25,506 --> 00:19:29,196
image what we do is to sample


601
00:19:29,196 --> 00:19:30,816
the normalized disparity map at


602
00:19:30,816 --> 00:19:33,136
that same location and set that


603
00:19:33,136 --> 00:19:34,806
as our threshold between


604
00:19:35,146 --> 00:19:36,006
background and foreground.


605
00:19:36,646 --> 00:19:39,126
Now I'll show you the code for


606
00:19:39,126 --> 00:19:39,766
what that looks like.


607
00:19:41,786 --> 00:19:43,006
This is all accomplished using


608
00:19:43,166 --> 00:19:44,466
built in Core Image filters.


609
00:19:44,466 --> 00:19:45,836
So the first of which I'd like


610
00:19:45,836 --> 00:19:47,496
to show you here is the CI Area


611
00:19:47,496 --> 00:19:48,796
Min Max Red filter.


612
00:19:49,926 --> 00:19:51,466
This filter, when you render it


613
00:19:51,466 --> 00:19:54,136
into a single pixel will return


614
00:19:54,136 --> 00:19:55,676
the minimum and maximum values


615
00:19:55,676 --> 00:19:57,136
of the image within the region


616
00:19:57,136 --> 00:19:58,036
that you specify.


617
00:19:58,386 --> 00:20:00,116
Here we're passing in the small


618
00:20:00,116 --> 00:20:01,536
rect that the user tapped on.


619
00:20:02,786 --> 00:20:04,226
The other thing to note about


620
00:20:04,226 --> 00:20:05,496
this line is that before we


621
00:20:05,496 --> 00:20:07,466
apply the effect we're clamping


622
00:20:07,466 --> 00:20:08,896
the disparity image so as to


623
00:20:08,896 --> 00:20:10,526
image that if the user taps near


624
00:20:10,526 --> 00:20:11,856
the boundary of the image we


625
00:20:11,856 --> 00:20:13,236
won't sample any clear pixels


626
00:20:13,236 --> 00:20:14,056
outside the boundary.


627
00:20:15,866 --> 00:20:18,046
On this line we're simply


628
00:20:18,046 --> 00:20:20,176
allocating a 4-byte buffer large


629
00:20:20,176 --> 00:20:21,426
enough to store a single pixel.


630
00:20:22,606 --> 00:20:24,086
And we render into that pixel on


631
00:20:24,086 --> 00:20:24,556
this line.


632
00:20:25,346 --> 00:20:26,846
Note that we're passing in nil


633
00:20:26,966 --> 00:20:27,876
as our color space.


634
00:20:27,876 --> 00:20:29,696
And this tells Core Image that


635
00:20:29,696 --> 00:20:31,196
we don't want it to do any color


636
00:20:31,196 --> 00:20:32,076
management for us.


637
00:20:34,256 --> 00:20:36,226
Finally, we read the maximum


638
00:20:36,226 --> 00:20:37,346
disparity value out of the


639
00:20:37,346 --> 00:20:39,476
pixel's green channel and then


640
00:20:39,476 --> 00:20:41,326
remap it to the range of 0 and 1


641
00:20:41,366 --> 00:20:43,066
by dividing by 255.


642
00:20:43,716 --> 00:20:47,946
The other input the user has


643
00:20:47,946 --> 00:20:49,286
control over is the size and


644
00:20:49,286 --> 00:20:50,416
slope of the blend region.


645
00:20:50,566 --> 00:20:52,496
So as the user is pinching on


646
00:20:52,496 --> 00:20:54,596
the view, we're adjusting the


647
00:20:54,596 --> 00:20:56,066
size and slope accordingly.


648
00:20:58,306 --> 00:21:00,056
And this is the result of a


649
00:21:00,056 --> 00:21:01,606
mapping -- sorry, this mapping


650
00:21:01,606 --> 00:21:03,756
is the result of applying a CI


651
00:21:03,756 --> 00:21:04,866
Color Matrix filter.


652
00:21:05,236 --> 00:21:06,236
So I'll show you in a second.


653
00:21:06,776 --> 00:21:08,676
But then we also apply a CI


654
00:21:08,676 --> 00:21:10,456
Color Clamp to ensure that the


655
00:21:10,456 --> 00:21:11,926
values remain within the region


656
00:21:12,026 --> 00:21:13,866
of 0 to 1, the range of 0 to 1.


657
00:21:15,126 --> 00:21:15,956
So here's the code.


658
00:21:16,446 --> 00:21:17,966
First we apply our CR Color


659
00:21:17,966 --> 00:21:19,026
Matrix filter.


660
00:21:19,706 --> 00:21:22,236
Its inputs are essentially the


661
00:21:22,706 --> 00:21:24,496
slope and the bias that were


662
00:21:24,496 --> 00:21:26,016
selected by the user by tapping


663
00:21:26,016 --> 00:21:26,486
and pinching.


664
00:21:27,486 --> 00:21:29,346
And then on a single line we


665
00:21:29,346 --> 00:21:31,386
apply the CI Color Clamp filter.


666
00:21:32,816 --> 00:21:36,116
Now that we've built the blend


667
00:21:36,116 --> 00:21:37,136
mask, the rest is


668
00:21:37,136 --> 00:21:37,766
straightforward.


669
00:21:37,856 --> 00:21:39,586
What you see on the left is the


670
00:21:39,586 --> 00:21:40,456
original image.


671
00:21:40,746 --> 00:21:42,016
And on the right you see that


672
00:21:42,016 --> 00:21:43,556
image with the background effect


673
00:21:43,556 --> 00:21:43,926
applied.


674
00:21:45,836 --> 00:21:47,156
When we apply the blend mask to


675
00:21:47,156 --> 00:21:49,216
the original image, the


676
00:21:49,216 --> 00:21:50,596
background region disappears.


677
00:21:50,716 --> 00:21:51,956
And when we blend that together


678
00:21:52,606 --> 00:21:53,866
with the background image, we


679
00:21:53,866 --> 00:21:54,676
get our final effect.


680
00:21:55,666 --> 00:21:58,226
One more slide of code.


681
00:21:59,396 --> 00:22:00,356
Here's where we apply our


682
00:22:00,356 --> 00:22:01,146
background filter.


683
00:22:02,166 --> 00:22:03,676
This could be any filter you


684
00:22:03,676 --> 00:22:04,156
choose.


685
00:22:04,436 --> 00:22:05,636
There are many built into Core


686
00:22:05,636 --> 00:22:05,956
Image.


687
00:22:05,956 --> 00:22:06,756
You could write your own.


688
00:22:08,326 --> 00:22:09,886
And then we apply the CI Blend


689
00:22:09,886 --> 00:22:12,426
With Mask filter, passing in


690
00:22:12,516 --> 00:22:13,816
both the background image and


691
00:22:13,976 --> 00:22:14,330
the mask.


692
00:22:16,576 --> 00:22:17,246
And that's it.


693
00:22:18,086 --> 00:22:20,406
That's how we accomplish this


694
00:22:20,406 --> 00:22:24,096
effect using a suite of built-in


695
00:22:24,096 --> 00:22:25,026
Core Image filters.


696
00:22:25,586 --> 00:22:27,846
And next I'd like to jump in and


697
00:22:27,846 --> 00:22:28,956
show you another demo.


698
00:22:30,656 --> 00:22:33,206
For this one -- the previous one


699
00:22:33,696 --> 00:22:36,266
we used disparity -- depth data


700
00:22:36,576 --> 00:22:37,966
indirectly, right?


701
00:22:38,156 --> 00:22:40,086
We used it to build a blend


702
00:22:40,086 --> 00:22:40,546
mask.


703
00:22:41,326 --> 00:22:42,316
For this one we're going to use


704
00:22:42,316 --> 00:22:44,736
disparity a little bit in more


705
00:22:44,736 --> 00:22:45,706
of a direct fashion.


706
00:22:46,306 --> 00:22:50,226
And I'm going to pull up this


707
00:22:50,226 --> 00:22:51,566
other editing extension here to


708
00:22:51,566 --> 00:22:52,036
show it to you.


709
00:22:52,746 --> 00:22:53,846
Okay. Here we are in photos


710
00:22:53,846 --> 00:22:54,116
again.


711
00:22:55,086 --> 00:22:56,886
Let's pick this next extension.


712
00:22:58,216 --> 00:22:58,966
There we go.


713
00:22:59,946 --> 00:23:00,666
Original image.


714
00:23:00,916 --> 00:23:02,176
No edits applied just yet.


715
00:23:02,176 --> 00:23:04,386
I have a slider at the bottom,


716
00:23:04,386 --> 00:23:04,646
though.


717
00:23:04,886 --> 00:23:06,726
And I'll start to move that now.


718
00:23:06,726 --> 00:23:09,706
And you can see that the


719
00:23:09,706 --> 00:23:11,676
background fades to black,


720
00:23:11,926 --> 00:23:13,226
leaving us just this prominent


721
00:23:13,226 --> 00:23:13,956
foreground figure.


722
00:23:14,526 --> 00:23:15,446
That's a really nice effect,


723
00:23:17,056 --> 00:23:17,566
wouldn't you say?


724
00:23:18,466 --> 00:23:20,766
Let's save that back to the


725
00:23:21,026 --> 00:23:22,496
library and show you how this


726
00:23:22,496 --> 00:23:22,916
one's done.


727
00:23:23,596 --> 00:23:24,376
What we're doing is we're


728
00:23:24,376 --> 00:23:25,686
mapping our normalized disparity


729
00:23:25,686 --> 00:23:28,086
values into a scale value, which


730
00:23:28,086 --> 00:23:29,406
we then apply directly to our


731
00:23:29,406 --> 00:23:29,916
pixels.


732
00:23:31,216 --> 00:23:33,286
And for this particular effect


733
00:23:33,726 --> 00:23:36,066
we're mapping our disparity


734
00:23:36,066 --> 00:23:37,736
values through an exponential


735
00:23:37,736 --> 00:23:39,426
function, which when we start


736
00:23:39,426 --> 00:23:41,656
off, we raise our normalized


737
00:23:41,656 --> 00:23:44,136
disparity values to the power of


738
00:23:44,136 --> 00:23:44,656
0.


739
00:23:44,806 --> 00:23:47,186
And that maps all of our scale


740
00:23:47,186 --> 00:23:49,556
factors into one, producing no


741
00:23:49,556 --> 00:23:50,636
effect on the output image.


742
00:23:51,186 --> 00:23:53,606
When we raise the power to 1 as


743
00:23:53,606 --> 00:23:55,356
we move the slider over, this is


744
00:23:55,356 --> 00:23:57,956
effectively the same thing as


745
00:23:58,426 --> 00:24:00,926
scaling our pixel intensities by


746
00:24:01,166 --> 00:24:04,006
the inverse of the depth because


747
00:24:04,006 --> 00:24:05,476
we're scaling by disparity


748
00:24:05,476 --> 00:24:05,926
directly.


749
00:24:06,846 --> 00:24:08,866
The effect becomes more


750
00:24:08,866 --> 00:24:10,106
interesting as we start to raise


751
00:24:10,106 --> 00:24:11,476
it to higher and higher powers.


752
00:24:12,146 --> 00:24:14,236
As you can see, the shape of the


753
00:24:14,236 --> 00:24:15,476
curve becomes such that there's


754
00:24:15,476 --> 00:24:16,746
a sharper distinction between


755
00:24:16,746 --> 00:24:18,786
background and foreground with


756
00:24:18,786 --> 00:24:19,836
the background quickly going to


757
00:24:19,836 --> 00:24:20,156
black.


758
00:24:20,596 --> 00:24:24,566
So I'm going to show you the


759
00:24:24,566 --> 00:24:25,886
code for this effect in just one


760
00:24:25,886 --> 00:24:26,236
slide.


761
00:24:26,386 --> 00:24:28,506
We've implemented this effect as


762
00:24:28,506 --> 00:24:29,936
a custom CI Color Kernel.


763
00:24:29,986 --> 00:24:31,076
And there are a couple of


764
00:24:31,076 --> 00:24:32,826
notable advantages to using a


765
00:24:32,826 --> 00:24:33,916
customer CI Color Kernel.


766
00:24:34,446 --> 00:24:35,976
One of which is performance.


767
00:24:35,976 --> 00:24:37,446
If you are able to express your


768
00:24:37,446 --> 00:24:39,076
effect in terms of a custom CI


769
00:24:39,076 --> 00:24:40,766
Color Kernel, Core Image is able


770
00:24:40,766 --> 00:24:42,196
to optimize that by


771
00:24:42,196 --> 00:24:43,726
concatenating your kernel into


772
00:24:43,726 --> 00:24:46,086
its render graph, thereby


773
00:24:46,346 --> 00:24:49,596
skipping any potentially costly


774
00:24:49,596 --> 00:24:50,916
intermediate images along the


775
00:24:50,916 --> 00:24:51,116
way.


776
00:24:51,976 --> 00:24:54,406
The other nice thing about this


777
00:24:54,406 --> 00:24:56,376
is that Core Image allows us to


778
00:24:56,376 --> 00:24:59,486
pass in multiple input images.


779
00:24:59,486 --> 00:25:00,136
And Core Image will


780
00:25:00,136 --> 00:25:01,626
automatically sample those for


781
00:25:01,626 --> 00:25:03,006
us and passing in those sample


782
00:25:03,006 --> 00:25:04,456
values to us as parameters to


783
00:25:04,456 --> 00:25:05,786
our kernel function, which you


784
00:25:05,786 --> 00:25:06,346
see here.


785
00:25:06,766 --> 00:25:08,606
The first parameter is a sample


786
00:25:08,606 --> 00:25:09,676
from the original image.


787
00:25:09,926 --> 00:25:11,126
The second is a sample from the


788
00:25:11,126 --> 00:25:12,236
normalized disparity map.


789
00:25:12,476 --> 00:25:14,096
And then third is the power


790
00:25:14,096 --> 00:25:15,296
selected by the user moving the


791
00:25:15,296 --> 00:25:15,706
slider.


792
00:25:17,356 --> 00:25:18,306
The first thing we do with a


793
00:25:18,306 --> 00:25:19,946
normalized disparity is to raise


794
00:25:19,946 --> 00:25:21,266
it to a power, as I mentioned.


795
00:25:22,056 --> 00:25:23,366
That gives us our scale factor.


796
00:25:24,556 --> 00:25:25,706
Then we take our scale factor


797
00:25:25,706 --> 00:25:27,446
and apply it to the intensity of


798
00:25:27,446 --> 00:25:28,926
the pixel while preserving the


799
00:25:28,926 --> 00:25:29,946
original alpha value.


800
00:25:32,096 --> 00:25:33,616
This last line is a line of


801
00:25:33,616 --> 00:25:36,156
Swift code illustrating how we


802
00:25:36,156 --> 00:25:37,706
can apply our custom kernel to


803
00:25:37,706 --> 00:25:39,106
our original image once it's


804
00:25:39,106 --> 00:25:40,386
been constructed from the source


805
00:25:40,386 --> 00:25:41,096
code you see above.


806
00:25:41,496 --> 00:25:43,576
We pass in our image extent as


807
00:25:43,576 --> 00:25:45,266
well as a list of arguments.


808
00:25:45,356 --> 00:25:46,986
Here these are the original


809
00:25:46,986 --> 00:25:48,416
image, the normalized disparity


810
00:25:48,416 --> 00:25:49,976
map, and the power selected by


811
00:25:49,976 --> 00:25:50,466
the user.


812
00:25:50,566 --> 00:25:52,046
Note that these arguments


813
00:25:52,046 --> 00:25:53,576
correspond one to one with the


814
00:25:53,576 --> 00:25:55,266
parameters defined in our kernel


815
00:25:55,266 --> 00:25:55,706
signature.


816
00:25:57,666 --> 00:25:58,886
Okay. So that's it.


817
00:25:58,886 --> 00:26:00,016
I've just shown you how to use a


818
00:26:00,016 --> 00:26:02,006
custom CI Color Kernel to


819
00:26:02,006 --> 00:26:03,466
produce this really nice


820
00:26:03,546 --> 00:26:04,826
darkening background effect.


821
00:26:05,476 --> 00:26:06,666
And hopefully it gives you some


822
00:26:06,666 --> 00:26:08,076
ideas of other things you can do


823
00:26:08,076 --> 00:26:09,766
with custom CI Color Kernels


824
00:26:09,766 --> 00:26:10,916
combined with depth to produce


825
00:26:10,916 --> 00:26:11,686
some nice effects.


826
00:26:11,686 --> 00:26:13,036
So now I'm going to invite my


827
00:26:13,036 --> 00:26:14,866
colleague, Alex, up onto the


828
00:26:14,866 --> 00:26:16,156
stage to show you something


829
00:26:16,226 --> 00:26:17,576
brand new in Core Image.


830
00:26:18,306 --> 00:26:19,000
Alex.


831
00:26:20,516 --> 00:26:24,126
[ Applause ]


832
00:26:24,626 --> 00:26:26,256
>> Thank you, Stephen.


833
00:26:26,366 --> 00:26:27,106
Good morning everyone.


834
00:26:27,906 --> 00:26:29,206
May name is Alexander Neimann.


835
00:26:29,206 --> 00:26:30,936
And today I'm really excited to


836
00:26:30,936 --> 00:26:31,166
be here.


837
00:26:31,166 --> 00:26:31,896
And today I'm going to talk to


838
00:26:31,896 --> 00:26:32,916
you about a new Core Image


839
00:26:32,916 --> 00:26:33,486
filter we have.


840
00:26:34,296 --> 00:26:37,566
So as you know, in iOS 10 using


841
00:26:37,566 --> 00:26:38,596
the iPhone 7+.


842
00:26:39,146 --> 00:26:41,156
You could capture images using


843
00:26:41,156 --> 00:26:42,866
-- with depth capabilities,


844
00:26:42,926 --> 00:26:44,626
using the camera app and the


845
00:26:44,626 --> 00:26:46,356
portrait mode.


846
00:26:46,576 --> 00:26:49,646
Now, with iOS 11, and Mac OS


847
00:26:49,646 --> 00:26:51,706
High Sierra, we're enhancing


848
00:26:51,706 --> 00:26:53,836
those capabilities by allowing


849
00:26:53,836 --> 00:26:55,026
you to use those exact same


850
00:26:55,026 --> 00:26:56,886
algorithms via a new Core Image


851
00:26:56,886 --> 00:26:58,416
filter called the CI Depth Blur


852
00:26:58,416 --> 00:26:58,766
Effect.


853
00:26:59,836 --> 00:27:02,296
So, now let's try and switch


854
00:27:02,296 --> 00:27:04,206
over to a demo and see how that


855
00:27:04,206 --> 00:27:04,976
works in real life.


856
00:27:07,616 --> 00:27:07,806
Yay!


857
00:27:09,726 --> 00:27:10,006
All right.


858
00:27:10,006 --> 00:27:10,886
So here we have an asset, a


859
00:27:10,886 --> 00:27:12,076
photo that was taken with depth.


860
00:27:12,076 --> 00:27:13,646
And we're just viewing the image


861
00:27:13,956 --> 00:27:14,876
without having applied any


862
00:27:14,876 --> 00:27:16,596
filters to it.


863
00:27:18,446 --> 00:27:20,556
If I tap on this once, we can


864
00:27:20,556 --> 00:27:22,226
see what the disparity data


865
00:27:22,226 --> 00:27:22,696
looks like.


866
00:27:23,546 --> 00:27:24,706
I'm going to tap on it once more


867
00:27:24,706 --> 00:27:25,486
and we'll back to the main


868
00:27:25,486 --> 00:27:25,866
image.


869
00:27:26,026 --> 00:27:28,206
And if I tap once more, we're


870
00:27:28,206 --> 00:27:29,016
going to see what happens when


871
00:27:29,016 --> 00:27:30,396
we use those two images together


872
00:27:30,736 --> 00:27:32,176
along with the new CI Depth Blur


873
00:27:32,176 --> 00:27:33,776
Effect filter to create a new


874
00:27:33,906 --> 00:27:34,526
rendered result.


875
00:27:34,956 --> 00:27:35,886
We should see the background get


876
00:27:35,886 --> 00:27:36,186
blurry.


877
00:27:36,956 --> 00:27:37,146
Yay.


878
00:27:39,566 --> 00:27:41,496
Now, in addition to just


879
00:27:41,496 --> 00:27:44,196
applying the filter as is, there


880
00:27:44,196 --> 00:27:45,936
are many tunable parameters that


881
00:27:45,936 --> 00:27:46,476
we can set.


882
00:27:46,726 --> 00:27:48,136
And inside of this application


883
00:27:48,626 --> 00:27:49,876
I've set things up such that it


884
00:27:49,946 --> 00:27:51,346
will respond to a few gestures.


885
00:27:51,586 --> 00:27:53,686
So, if I now, for example,


886
00:27:53,686 --> 00:27:56,046
pinch, we can dynamically change


887
00:27:56,046 --> 00:27:58,086
the aperture and get a new


888
00:27:58,086 --> 00:27:58,856
simulated look.


889
00:27:58,856 --> 00:28:00,536
And so we can simulate any lens


890
00:28:01,006 --> 00:28:02,446
opening that we would like quite


891
00:28:02,446 --> 00:28:02,846
simply.


892
00:28:05,836 --> 00:28:06,946
Another gesture I've set up in


893
00:28:06,946 --> 00:28:08,536
this application is such that


894
00:28:08,826 --> 00:28:10,186
when we tap at a different


895
00:28:10,186 --> 00:28:11,276
location it's going to change


896
00:28:11,276 --> 00:28:12,326
the focus rectangle.


897
00:28:12,676 --> 00:28:14,406
And so we can see right now the


898
00:28:14,406 --> 00:28:15,776
aperture is quite wide open.


899
00:28:16,166 --> 00:28:17,776
And only the lady in the front


900
00:28:17,776 --> 00:28:18,296
is in focus.


901
00:28:18,346 --> 00:28:19,666
But if I tap on the lady on the


902
00:28:19,666 --> 00:28:20,926
left, all of a sudden now she's


903
00:28:20,926 --> 00:28:21,456
in focus.


904
00:28:21,456 --> 00:28:22,796
The background is a little less


905
00:28:22,796 --> 00:28:23,176
blurry.


906
00:28:23,176 --> 00:28:24,526
And the gentleman on the right


907
00:28:24,526 --> 00:28:26,036
is still a little blurry.


908
00:28:26,036 --> 00:28:27,376
And I can tap on him now and


909
00:28:27,376 --> 00:28:28,366
change the focus rect once


910
00:28:28,366 --> 00:28:28,706
again.


911
00:28:29,836 --> 00:28:32,726
And now they're all three in


912
00:28:32,726 --> 00:28:33,756
focus and the background still


913
00:28:33,756 --> 00:28:34,276
remains blurry.


914
00:28:35,906 --> 00:28:37,086
Now that we're done with our


915
00:28:37,086 --> 00:28:38,696
demo, let's go and look at how


916
00:28:38,696 --> 00:28:38,976
this happens --


917
00:28:39,516 --> 00:28:42,246
[ Applause ]


918
00:28:42,746 --> 00:28:45,076
in terms of code.


919
00:28:46,946 --> 00:28:47,276
Okay.


920
00:28:50,746 --> 00:28:53,206
So as I was mentioning, at its


921
00:28:53,206 --> 00:28:54,876
base the CI Depth Blur Effect


922
00:28:54,876 --> 00:28:56,756
really just has two inputs: the


923
00:28:56,756 --> 00:28:58,026
input image and the input


924
00:28:58,056 --> 00:28:58,826
disparity image.


925
00:28:59,036 --> 00:29:00,406
And with those two, Core Image


926
00:29:00,406 --> 00:29:01,326
is going to extract a lot of


927
00:29:01,326 --> 00:29:04,216
metadata for you and apply the


928
00:29:04,216 --> 00:29:07,466
effect in order to render a new


929
00:29:07,886 --> 00:29:08,000
image.


930
00:29:12,086 --> 00:29:13,186
Internally, however, there are


931
00:29:13,186 --> 00:29:14,146
many parameters that you can


932
00:29:14,146 --> 00:29:15,116
set, as I was mentioning


933
00:29:15,116 --> 00:29:15,516
earlier.


934
00:29:16,096 --> 00:29:17,186
We already know that you can set


935
00:29:17,186 --> 00:29:18,086
the input image and the input


936
00:29:18,086 --> 00:29:18,946
disparity image.


937
00:29:19,296 --> 00:29:20,016
And in the case of the


938
00:29:20,016 --> 00:29:21,096
application that we were looking


939
00:29:21,096 --> 00:29:23,886
at earlier, when we were


940
00:29:23,886 --> 00:29:25,896
tapping, we were setting the


941
00:29:25,896 --> 00:29:26,896
input focus rect.


942
00:29:28,276 --> 00:29:31,566
And then as we were pinching, we


943
00:29:31,566 --> 00:29:32,496
were setting the aperture.


944
00:29:33,496 --> 00:29:35,106
So now that we have an idea of


945
00:29:35,106 --> 00:29:35,946
how we want to do this from a


946
00:29:35,946 --> 00:29:37,406
conceptual standpoint, let's


947
00:29:37,406 --> 00:29:38,926
take a look at how this will be


948
00:29:38,926 --> 00:29:39,986
done in terms of code.


949
00:29:41,386 --> 00:29:44,216
And this is effectively my only


950
00:29:44,216 --> 00:29:45,296
slide that has any code on it,


951
00:29:45,296 --> 00:29:46,316
so you can see how simple it is


952
00:29:46,316 --> 00:29:46,716
to use.


953
00:29:47,616 --> 00:29:49,796
As we saw earlier, you can load


954
00:29:49,796 --> 00:29:51,736
a CI Image via URL, quite


955
00:29:51,736 --> 00:29:51,996
simply.


956
00:29:51,996 --> 00:29:53,136
This gives us the main image.


957
00:29:53,136 --> 00:29:54,506
And then in order to get the


958
00:29:54,506 --> 00:29:56,066
disparity image, all you need to


959
00:29:56,066 --> 00:29:58,386
do is use that same URL and ask


960
00:29:58,986 --> 00:30:02,026
for the auxiliary disparity


961
00:30:02,026 --> 00:30:03,196
information via the Options


962
00:30:03,196 --> 00:30:04,836
dictionary as Etienne mentioned.


963
00:30:06,316 --> 00:30:08,956
Once we have our two images, we


964
00:30:08,956 --> 00:30:10,476
can create a filter.


965
00:30:10,966 --> 00:30:13,366
And we do that by name, CI Depth


966
00:30:13,366 --> 00:30:13,796
Blur Effect.


967
00:30:13,796 --> 00:30:14,826
And then we specify our two


968
00:30:14,826 --> 00:30:15,246
images.


969
00:30:16,796 --> 00:30:18,756
Once that's done, we can then


970
00:30:18,756 --> 00:30:20,946
ask for the output image via


971
00:30:20,946 --> 00:30:21,916
.outputImage.


972
00:30:21,916 --> 00:30:23,696
And we have a new CI Image that


973
00:30:23,696 --> 00:30:25,036
we can then render in any number


974
00:30:25,036 --> 00:30:25,436
of ways.


975
00:30:26,056 --> 00:30:27,286
And it's important to remember


976
00:30:27,286 --> 00:30:29,076
that a CI Image is really just a


977
00:30:29,076 --> 00:30:30,046
recipe for how to render.


978
00:30:30,046 --> 00:30:31,036
So this is actually a quite


979
00:30:31,036 --> 00:30:31,816
lightweight object.


980
00:30:34,416 --> 00:30:35,586
In the case of the application


981
00:30:35,586 --> 00:30:36,636
that we were looking at earlier,


982
00:30:37,506 --> 00:30:38,686
all we had to do in order to


983
00:30:38,686 --> 00:30:40,046
render a new effect with a new


984
00:30:40,046 --> 00:30:42,106
look was to change two values.


985
00:30:42,276 --> 00:30:43,926
So in this case, we changed the


986
00:30:43,926 --> 00:30:44,666
input aperture.


987
00:30:44,666 --> 00:30:45,906
And we do that by calling filter


988
00:30:45,906 --> 00:30:48,996
setValue forKey and specifying a


989
00:30:48,996 --> 00:30:51,236
float value between 1 and 22 to


990
00:30:51,236 --> 00:30:52,476
create a new simulated aperture.


991
00:30:53,406 --> 00:30:55,386
And we specified a new rectangle


992
00:30:55,586 --> 00:30:56,896
where we wanted to focus on via


993
00:30:57,156 --> 00:30:58,936
the input focus rec key, which


994
00:30:58,936 --> 00:31:00,856
corresponds to a lower left


995
00:31:01,286 --> 00:31:03,946
based rectangle in normalized


996
00:31:03,946 --> 00:31:04,466
coordinates.


997
00:31:06,046 --> 00:31:07,346
Once those two things are done,


998
00:31:07,466 --> 00:31:08,886
we can ask that filter for a new


999
00:31:08,886 --> 00:31:12,866
output image and then render as


1000
00:31:12,866 --> 00:31:13,496
we wish.


1001
00:31:15,506 --> 00:31:17,106
Now as I was mentioning, Core


1002
00:31:17,106 --> 00:31:18,326
Image does a lot of things for


1003
00:31:18,326 --> 00:31:20,126
you automatically by examining


1004
00:31:20,126 --> 00:31:20,786
the metadata.


1005
00:31:21,556 --> 00:31:22,556
There are, however, a few things


1006
00:31:22,556 --> 00:31:25,046
you can do in order to further


1007
00:31:25,046 --> 00:31:27,026
enhance the render that we don't


1008
00:31:27,026 --> 00:31:28,066
do for you automatically.


1009
00:31:28,726 --> 00:31:31,316
And those relate to finding


1010
00:31:31,316 --> 00:31:32,176
facial landmarks.


1011
00:31:33,266 --> 00:31:35,316
And you can use the new vision


1012
00:31:35,316 --> 00:31:37,076
framework that we have in order


1013
00:31:37,076 --> 00:31:37,556
to do this.


1014
00:31:37,826 --> 00:31:39,256
So, via the vision framework you


1015
00:31:39,256 --> 00:31:41,316
can get the left eye positions,


1016
00:31:41,536 --> 00:31:43,876
right eye positions, nose


1017
00:31:43,876 --> 00:31:45,736
positions and chin positions.


1018
00:31:45,736 --> 00:31:48,566
And you can specify up to four


1019
00:31:48,566 --> 00:31:50,726
faces to be used inside of the


1020
00:31:50,726 --> 00:31:51,856
CI Depth Blur Effect.


1021
00:31:52,766 --> 00:31:53,836
In the case of this image,


1022
00:31:54,116 --> 00:31:55,356
because there are three faces,


1023
00:31:55,806 --> 00:31:57,876
we would actually specify six


1024
00:31:58,076 --> 00:32:00,496
floating-point values into a CI


1025
00:32:00,496 --> 00:32:02,196
vector and set that for each


1026
00:32:02,196 --> 00:32:03,206
landmark that we found.


1027
00:32:04,406 --> 00:32:06,756
And there are triples, so it


1028
00:32:06,756 --> 00:32:11,766
would be xy, xy, xy.


1029
00:32:12,256 --> 00:32:13,476
The next thing I'd like to talk


1030
00:32:13,476 --> 00:32:14,536
to you a little bit about is


1031
00:32:14,656 --> 00:32:17,256
dealing with rendering outputs


1032
00:32:17,256 --> 00:32:19,676
of different sizes.


1033
00:32:21,796 --> 00:32:23,646
Although the inputs are quite


1034
00:32:23,646 --> 00:32:25,606
large, 12 megapixels, chances


1035
00:32:25,606 --> 00:32:26,906
are you won't often be rendering


1036
00:32:26,906 --> 00:32:27,696
the entire image.


1037
00:32:27,956 --> 00:32:29,136
And you may want to down sample


1038
00:32:29,136 --> 00:32:29,576
the output.


1039
00:32:30,576 --> 00:32:32,296
Your initial reflex may be to


1040
00:32:32,296 --> 00:32:34,336
just down sample it, the result


1041
00:32:34,336 --> 00:32:35,756
of the CI Depth Blur Effect.


1042
00:32:35,996 --> 00:32:37,216
But that's actually not very


1043
00:32:37,216 --> 00:32:38,416
efficient because the CI Depth


1044
00:32:38,416 --> 00:32:39,436
Blur Effect is actually quite


1045
00:32:39,436 --> 00:32:40,506
computationally expensive.


1046
00:32:40,506 --> 00:32:43,396
It makes more sense to, instead,


1047
00:32:43,396 --> 00:32:44,436
down sample the input.


1048
00:32:44,916 --> 00:32:47,776
And if you do this, we can then


1049
00:32:48,136 --> 00:32:49,266
take advantage of the fact that


1050
00:32:49,266 --> 00:32:51,016
the input image is smaller and


1051
00:32:51,016 --> 00:32:52,156
perform some optimizations.


1052
00:32:53,436 --> 00:32:54,376
In order to do this, however,


1053
00:32:54,376 --> 00:32:55,396
you do have to set one more


1054
00:32:55,396 --> 00:32:56,836
parameter, which is called the


1055
00:32:56,836 --> 00:32:57,906
Input Scale Factor.


1056
00:32:58,786 --> 00:33:00,436
So in this case if we wanted to


1057
00:33:00,436 --> 00:33:02,106
down sample the image by 2, we


1058
00:33:02,106 --> 00:33:03,396
would set the input scale factor


1059
00:33:03,396 --> 00:33:04,196
to 0.5.


1060
00:33:04,566 --> 00:33:06,336
And doing so ensures that we


1061
00:33:06,736 --> 00:33:07,846
sample appropriately from the


1062
00:33:07,846 --> 00:33:09,176
image and also take into account


1063
00:33:09,176 --> 00:33:10,916
other effects such as the noise


1064
00:33:10,916 --> 00:33:11,306
in the image.


1065
00:33:13,876 --> 00:33:16,146
There are a few additional


1066
00:33:16,146 --> 00:33:17,316
things that I'd like to mention


1067
00:33:17,806 --> 00:33:19,166
about using the CI Depth Blue


1068
00:33:19,166 --> 00:33:20,066
Effect which are important to


1069
00:33:20,066 --> 00:33:20,606
keep in mind.


1070
00:33:21,526 --> 00:33:23,786
The first and foremost is that


1071
00:33:23,786 --> 00:33:25,666
when you create your CI context


1072
00:33:26,336 --> 00:33:27,386
where you'll be using these


1073
00:33:27,386 --> 00:33:28,826
filters, you're going to want to


1074
00:33:28,826 --> 00:33:30,116
make sure that you're using half


1075
00:33:30,116 --> 00:33:31,056
float intermediates.


1076
00:33:31,366 --> 00:33:32,286
And you can do this by


1077
00:33:32,286 --> 00:33:34,036
specifying the kCI Context


1078
00:33:34,036 --> 00:33:36,956
Working Format to be RWAH.


1079
00:33:38,326 --> 00:33:39,806
On MacOS this is the default.


1080
00:33:39,806 --> 00:33:41,766
But on iOS, by default we use


1081
00:33:41,766 --> 00:33:42,126
8-bit.


1082
00:33:42,126 --> 00:33:43,636
And if you don't, you will see


1083
00:33:43,636 --> 00:33:45,246
that the data will be clipped


1084
00:33:45,246 --> 00:33:47,196
because disparity data comes in


1085
00:33:47,196 --> 00:33:47,976
extended range.


1086
00:33:48,366 --> 00:33:49,806
And without specifying this, it


1087
00:33:49,806 --> 00:33:50,816
will get clipped and the result


1088
00:33:50,816 --> 00:33:51,656
won't look very good.


1089
00:33:51,656 --> 00:33:52,676
So it's really important to


1090
00:33:52,676 --> 00:33:53,816
remember to keep doing this when


1091
00:33:53,816 --> 00:33:54,796
you use this filter.


1092
00:33:57,496 --> 00:33:59,996
Also as I mentioned earlier, the


1093
00:34:00,216 --> 00:34:02,536
CI Depth Blur Effect will


1094
00:34:02,536 --> 00:34:03,976
automatically set many


1095
00:34:03,976 --> 00:34:05,576
properties for you on the


1096
00:34:05,576 --> 00:34:05,966
filter.


1097
00:34:05,966 --> 00:34:08,016
In order to do so, it will


1098
00:34:08,016 --> 00:34:09,226
examine the metadata from the


1099
00:34:09,226 --> 00:34:13,436
main image as well the data that


1100
00:34:13,436 --> 00:34:16,346
exists inside of the auxiliary


1101
00:34:16,346 --> 00:34:16,616
image.


1102
00:34:16,766 --> 00:34:18,186
And so it's important to try to


1103
00:34:18,516 --> 00:34:19,626
preserve that throughout your


1104
00:34:19,626 --> 00:34:20,126
pipeline.


1105
00:34:20,485 --> 00:34:22,255
Core Image will do its best in


1106
00:34:22,255 --> 00:34:23,096
order to ensure that this


1107
00:34:23,096 --> 00:34:23,516
happens.


1108
00:34:23,886 --> 00:34:24,656
But it's something you're going


1109
00:34:24,656 --> 00:34:25,485
to want to keep in mind as


1110
00:34:25,485 --> 00:34:26,315
you're using this filter.


1111
00:34:26,356 --> 00:34:27,676
And Etienne's going to talk to


1112
00:34:27,676 --> 00:34:28,686
you a little bit later about how


1113
00:34:28,686 --> 00:34:30,005
to ensure that you do this when


1114
00:34:30,005 --> 00:34:31,000
you save images.


1115
00:34:33,646 --> 00:34:34,106
All right.


1116
00:34:34,696 --> 00:34:36,335
Well, the last thing I'd like to


1117
00:34:36,335 --> 00:34:37,926
talk to you about today has to


1118
00:34:37,926 --> 00:34:40,606
do with some internals of the CI


1119
00:34:40,606 --> 00:34:41,306
Depth Blur Effect.


1120
00:34:42,485 --> 00:34:43,636
It's been mentioned many times


1121
00:34:43,636 --> 00:34:46,326
so far already today, the main


1122
00:34:46,326 --> 00:34:47,466
image and the disparity image


1123
00:34:47,466 --> 00:34:49,266
are of very different


1124
00:34:49,266 --> 00:34:49,835
resolutions.


1125
00:34:49,835 --> 00:34:52,835
And now internally, Core Image


1126
00:34:52,835 --> 00:34:54,386
is going to up sample the


1127
00:34:54,386 --> 00:34:56,186
disparity image up to a certain


1128
00:34:56,186 --> 00:34:58,246
point in order to achieve the


1129
00:34:58,246 --> 00:34:58,936
final result.


1130
00:35:00,256 --> 00:35:02,036
And this is an area where we


1131
00:35:02,036 --> 00:35:03,076
feel like if you have additional


1132
00:35:03,076 --> 00:35:04,396
processing time you could


1133
00:35:04,396 --> 00:35:05,896
perhaps do something a little


1134
00:35:05,896 --> 00:35:06,296
different.


1135
00:35:06,856 --> 00:35:08,076
Maybe some of the methods that


1136
00:35:08,076 --> 00:35:09,406
Etienne spoke of earlier.


1137
00:35:10,976 --> 00:35:12,876
And that concludes pretty much


1138
00:35:12,876 --> 00:35:13,766
everything I wanted to tell you


1139
00:35:13,766 --> 00:35:15,136
about using the CI Depth Blur


1140
00:35:15,136 --> 00:35:15,436
Effect.


1141
00:35:15,756 --> 00:35:17,046
And I hope you all go and start


1142
00:35:17,046 --> 00:35:18,176
adding it to your apps.


1143
00:35:18,496 --> 00:35:19,576
And on that, I'm going to hand


1144
00:35:19,576 --> 00:35:20,436
it back over to Etienne.


1145
00:35:20,436 --> 00:35:21,166
Thank you very much.


1146
00:35:22,016 --> 00:35:23,666
[ Applause ]


1147
00:35:23,666 --> 00:35:24,226
>> Thank you, Alex.


1148
00:35:26,566 --> 00:35:27,556
All right.


1149
00:35:27,886 --> 00:35:29,016
So, so far we've seen


1150
00:35:29,016 --> 00:35:30,616
interesting cool new effects


1151
00:35:30,616 --> 00:35:32,056
that you can do using depth


1152
00:35:32,056 --> 00:35:32,206
data.


1153
00:35:32,346 --> 00:35:34,566
But the depth data was really


1154
00:35:34,566 --> 00:35:36,746
used as a mask to apply


1155
00:35:36,746 --> 00:35:38,466
different effects to different


1156
00:35:38,466 --> 00:35:39,666
part of the image.


1157
00:35:40,386 --> 00:35:42,136
And so now we want to show you


1158
00:35:42,136 --> 00:35:44,776
something different, something


1159
00:35:44,776 --> 00:35:46,566
that actually uses depth as a


1160
00:35:46,566 --> 00:35:47,366
third dimension.


1161
00:35:48,406 --> 00:35:49,806
And this will give you a taste


1162
00:35:49,806 --> 00:35:51,036
of what kind of new creative


1163
00:35:51,036 --> 00:35:52,286
effects you could apply using


1164
00:35:52,286 --> 00:35:52,966
this data.


1165
00:35:53,986 --> 00:35:55,576
And to tell you all about it,


1166
00:35:55,576 --> 00:35:57,066
I'm going to invite Stephen back


1167
00:35:57,066 --> 00:35:57,496
on stage.


1168
00:35:57,826 --> 00:35:58,000
Stephen.


1169
00:36:00,516 --> 00:36:02,856
[ Applause ]


1170
00:36:03,356 --> 00:36:04,216
>> Thank you, Etienne.


1171
00:36:05,246 --> 00:36:06,376
It's good to be back with you.


1172
00:36:06,376 --> 00:36:07,856
What I'm going to show you now


1173
00:36:09,456 --> 00:36:11,106
is a true 3-D effect.


1174
00:36:12,976 --> 00:36:14,316
And this particular effect that


1175
00:36:14,316 --> 00:36:15,306
we're going to show you is


1176
00:36:15,306 --> 00:36:16,156
called dolly zoom.


1177
00:36:16,436 --> 00:36:17,466
Many of you are probably already


1178
00:36:17,466 --> 00:36:18,896
familiar with what dolly zoom


1179
00:36:18,896 --> 00:36:20,106
is, especially if you've ever


1180
00:36:20,106 --> 00:36:20,996
seen a scary movie.


1181
00:36:21,566 --> 00:36:23,926
But to get everybody up to speed


1182
00:36:23,926 --> 00:36:24,796
a little bit, I'm going to show


1183
00:36:24,796 --> 00:36:26,426
you a little animation of what's


1184
00:36:26,426 --> 00:36:27,486
going on with dolly zoom.


1185
00:36:28,146 --> 00:36:29,256
So what you're looking at here


1186
00:36:30,506 --> 00:36:32,146
is a scene consisting of three


1187
00:36:32,146 --> 00:36:32,726
spheres.


1188
00:36:33,756 --> 00:36:35,476
While the camera is dollying


1189
00:36:35,646 --> 00:36:37,726
back and forth, it's also doing


1190
00:36:37,726 --> 00:36:39,626
it so in such a way that the


1191
00:36:39,626 --> 00:36:40,756
field of view is also


1192
00:36:40,996 --> 00:36:43,056
simultaneously constrained so


1193
00:36:43,106 --> 00:36:44,736
that the gray sphere in the


1194
00:36:44,736 --> 00:36:46,716
center on the focal plane


1195
00:36:47,226 --> 00:36:49,816
remains at roughly the same size


1196
00:36:50,036 --> 00:36:51,056
throughout the effect in the


1197
00:36:51,056 --> 00:36:52,656
output image, which you see on


1198
00:36:52,656 --> 00:36:52,936
the right.


1199
00:36:53,316 --> 00:36:54,376
Everything else in the scene


1200
00:36:54,376 --> 00:36:56,146
will move around due to


1201
00:36:56,146 --> 00:36:57,076
perspective effects.


1202
00:36:58,856 --> 00:36:59,736
So let's take a look.


1203
00:37:00,916 --> 00:37:02,046
Let's switch over here to the


1204
00:37:02,046 --> 00:37:02,616
device.


1205
00:37:04,506 --> 00:37:05,936
Perfect.


1206
00:37:06,046 --> 00:37:06,386
All right.


1207
00:37:09,206 --> 00:37:10,906
Let me pull up the dolly zoom


1208
00:37:10,906 --> 00:37:11,936
editing extension.


1209
00:37:14,446 --> 00:37:15,846
And I'll draw your attention now


1210
00:37:15,846 --> 00:37:17,716
to the group of flowers in the


1211
00:37:17,716 --> 00:37:18,696
center of the image.


1212
00:37:18,806 --> 00:37:20,596
Those are on the focal plane.


1213
00:37:21,546 --> 00:37:22,526
So as I begin to move the


1214
00:37:22,526 --> 00:37:23,000
camera,


1215
00:37:25,496 --> 00:37:27,486
there you see the dolly zoom


1216
00:37:27,486 --> 00:37:29,316
effects in its full glory.


1217
00:37:29,346 --> 00:37:31,716
When I pull the camera in this


1218
00:37:31,716 --> 00:37:32,976
direction in particular you can


1219
00:37:32,976 --> 00:37:34,476
really see the true 3-D nature


1220
00:37:34,476 --> 00:37:36,346
of this effect with the


1221
00:37:36,436 --> 00:37:37,636
foreground flowers really


1222
00:37:37,966 --> 00:37:39,486
popping out and the background


1223
00:37:39,486 --> 00:37:41,486
sort of fading or pulling away


1224
00:37:41,486 --> 00:37:42,096
from the camera.


1225
00:37:42,996 --> 00:37:44,186
You do also see a couple of


1226
00:37:44,186 --> 00:37:45,326
artifacts, of course.


1227
00:37:45,706 --> 00:37:47,546
One of which are the black


1228
00:37:47,546 --> 00:37:49,326
pixels that you see coming into


1229
00:37:49,326 --> 00:37:50,596
view around the background.


1230
00:37:51,346 --> 00:37:53,126
This is due to the fact that in


1231
00:37:53,126 --> 00:37:54,076
the camera's current


1232
00:37:54,146 --> 00:37:55,416
configuration, the virtual


1233
00:37:55,416 --> 00:37:57,386
camera, its field of view is


1234
00:37:57,386 --> 00:38:00,126
wider than the iPhone that


1235
00:38:00,126 --> 00:38:00,896
captured the image.


1236
00:38:01,956 --> 00:38:04,036
And so the virtual camera sees


1237
00:38:04,036 --> 00:38:05,386
more of the scene than the


1238
00:38:05,536 --> 00:38:06,646
iPhone did at the time of


1239
00:38:06,646 --> 00:38:07,156
capture.


1240
00:38:07,696 --> 00:38:08,876
So we're just filling those


1241
00:38:08,876 --> 00:38:10,666
pixels in with black.


1242
00:38:10,916 --> 00:38:12,966
Similarly, the stretching you


1243
00:38:12,966 --> 00:38:14,316
see in between the foreground


1244
00:38:14,316 --> 00:38:15,826
flowers and the green leaves


1245
00:38:15,826 --> 00:38:17,076
behind them is due to the fact


1246
00:38:17,076 --> 00:38:18,246
that this camera, the virtual


1247
00:38:18,246 --> 00:38:19,176
camera, has exposed some


1248
00:38:19,176 --> 00:38:20,456
portions of the scene that


1249
00:38:20,456 --> 00:38:22,566
weren't visible to the iPhone at


1250
00:38:22,566 --> 00:38:24,436
the time of capture.


1251
00:38:24,436 --> 00:38:26,296
One strategy you might take to


1252
00:38:26,296 --> 00:38:27,816
work around some of these issues


1253
00:38:28,516 --> 00:38:30,606
is to set a new focal plane.


1254
00:38:31,306 --> 00:38:33,406
So, now I've tapped on the


1255
00:38:33,406 --> 00:38:35,056
yellow flower in the foreground,


1256
00:38:35,056 --> 00:38:35,996
which is in the bottom right


1257
00:38:35,996 --> 00:38:38,106
corner of the image to set that


1258
00:38:38,356 --> 00:38:39,386
as the focal plane.


1259
00:38:39,876 --> 00:38:41,286
And as I move the camera now in


1260
00:38:41,286 --> 00:38:42,666
this direction you can see that


1261
00:38:43,216 --> 00:38:44,836
none of the black pixels are


1262
00:38:44,836 --> 00:38:45,586
coming into view.


1263
00:38:45,906 --> 00:38:47,506
Of course if I move the camera


1264
00:38:47,506 --> 00:38:49,436
again in this direction, they


1265
00:38:49,436 --> 00:38:50,106
show up again.


1266
00:38:50,616 --> 00:38:51,976
And really, that 3-D effect is


1267
00:38:51,976 --> 00:38:54,686
quite strong here.


1268
00:38:55,306 --> 00:38:57,466
Correspondingly, I can tap on a


1269
00:38:57,466 --> 00:38:58,496
background region of the image,


1270
00:38:58,496 --> 00:39:00,056
such as the trees you see in the


1271
00:39:00,056 --> 00:39:00,816
upper left corner.


1272
00:39:01,786 --> 00:39:03,676
And when I pull the camera now


1273
00:39:03,676 --> 00:39:06,536
in this direction, it really


1274
00:39:07,606 --> 00:39:09,086
produces a pleasing sort of


1275
00:39:09,086 --> 00:39:11,106
prominent effect on that central


1276
00:39:11,146 --> 00:39:11,996
group of flowers.


1277
00:39:12,786 --> 00:39:15,076
So let's take a look now at how


1278
00:39:15,076 --> 00:39:15,876
we implemented this.


1279
00:39:16,196 --> 00:39:18,096
Because of the true 3-D nature


1280
00:39:18,096 --> 00:39:20,866
of this problem, we turned to


1281
00:39:20,866 --> 00:39:23,396
Metal as a true 3-D tool to


1282
00:39:23,396 --> 00:39:26,256
solve this effect, to produce


1283
00:39:26,256 --> 00:39:26,706
the effect.


1284
00:39:27,136 --> 00:39:28,916
We were able to get our system


1285
00:39:28,916 --> 00:39:30,336
up and running quite quickly in


1286
00:39:30,336 --> 00:39:31,826
Metal because of all the work


1287
00:39:31,826 --> 00:39:33,506
that it does for us.


1288
00:39:33,806 --> 00:39:36,576
Basically all we had to do to


1289
00:39:36,576 --> 00:39:38,386
start off with was to construct


1290
00:39:38,386 --> 00:39:40,236
a triangular mesh that we mapped


1291
00:39:40,336 --> 00:39:42,396
onto the image, much like what


1292
00:39:42,396 --> 00:39:43,836
you saw in Craig's Depth


1293
00:39:43,836 --> 00:39:45,626
Explorer demo at the beginning


1294
00:39:45,626 --> 00:39:46,206
of the session.


1295
00:39:46,856 --> 00:39:49,196
And we mapped the -- excuse me


1296
00:39:49,196 --> 00:39:50,736
-- we mapped the image -- we


1297
00:39:50,736 --> 00:39:51,826
center the image around the


1298
00:39:51,826 --> 00:39:52,286
origin.


1299
00:39:54,096 --> 00:39:55,806
Metal also gives us the


1300
00:39:55,806 --> 00:39:57,336
opportunity to program a couple


1301
00:39:57,336 --> 00:39:59,146
of stages of its pipeline, one


1302
00:39:59,146 --> 00:40:00,476
of which is the vertex shader.


1303
00:40:00,526 --> 00:40:01,856
And the job of the vertex


1304
00:40:01,856 --> 00:40:03,426
shader, it gives us the


1305
00:40:03,426 --> 00:40:04,756
opportunity to process the


1306
00:40:04,756 --> 00:40:06,326
geometry of the scene in some


1307
00:40:06,326 --> 00:40:06,556
way.


1308
00:40:08,036 --> 00:40:09,486
And we can also program the


1309
00:40:09,486 --> 00:40:11,146
fragment shader, which gives us


1310
00:40:11,146 --> 00:40:12,866
the opportunity to produce a


1311
00:40:13,246 --> 00:40:14,996
color for each pixel in the


1312
00:40:14,996 --> 00:40:15,346
output.


1313
00:40:16,336 --> 00:40:18,806
We were able to reintegrate all


1314
00:40:18,806 --> 00:40:20,446
of this 3-D Metal rendering back


1315
00:40:20,446 --> 00:40:22,256
into our Core Image pipeline by


1316
00:40:22,256 --> 00:40:23,876
using a CI Image Processor


1317
00:40:23,876 --> 00:40:24,286
Kernel.


1318
00:40:25,496 --> 00:40:28,566
So here's the code for the


1319
00:40:28,566 --> 00:40:29,306
vertex shader.


1320
00:40:31,586 --> 00:40:33,136
Again, the job of the vertex


1321
00:40:33,136 --> 00:40:34,156
shader is to process the


1322
00:40:34,156 --> 00:40:34,846
geometry.


1323
00:40:34,936 --> 00:40:36,286
And it does so one vertex at a


1324
00:40:36,286 --> 00:40:36,656
time.


1325
00:40:37,036 --> 00:40:38,536
So we get one vertex of the


1326
00:40:38,536 --> 00:40:39,826
original mesh as input.


1327
00:40:40,566 --> 00:40:41,656
And then we'll produce something


1328
00:40:41,656 --> 00:40:42,456
new on the output.


1329
00:40:42,776 --> 00:40:44,256
The first thing we do in the


1330
00:40:44,256 --> 00:40:46,856
vertex shader is sample the


1331
00:40:46,856 --> 00:40:48,626
depth at that vertex.


1332
00:40:49,466 --> 00:40:50,616
That's this line you see here.


1333
00:40:50,616 --> 00:40:52,006
We're storing it in a variable


1334
00:40:52,006 --> 00:40:53,546
called z, which will get used in


1335
00:40:53,546 --> 00:40:54,556
a couple of places in this


1336
00:40:54,556 --> 00:40:54,906
shader.


1337
00:40:55,956 --> 00:40:57,986
The first of which is this


1338
00:40:57,986 --> 00:40:59,226
magical line right here.


1339
00:40:59,656 --> 00:41:01,296
This line is the line that every


1340
00:41:01,296 --> 00:41:02,836
young engineer grows up dreaming


1341
00:41:02,836 --> 00:41:03,866
that they'll write some day.


1342
00:41:03,986 --> 00:41:05,496
Because this is where we do the


1343
00:41:05,496 --> 00:41:05,636
math.


1344
00:41:07,276 --> 00:41:08,836
There are three variables as


1345
00:41:08,836 --> 00:41:11,506
input to this equation.


1346
00:41:12,476 --> 00:41:13,786
One is the depth, which we just


1347
00:41:13,786 --> 00:41:14,436
sampled above.


1348
00:41:14,846 --> 00:41:16,116
And the others correspond to the


1349
00:41:16,116 --> 00:41:18,856
user inputs of the focal plane


1350
00:41:18,856 --> 00:41:20,396
and the camera's configuration.


1351
00:41:22,086 --> 00:41:24,516
This produces a scale factor,


1352
00:41:24,776 --> 00:41:26,596
which we can apply to our


1353
00:41:27,346 --> 00:41:30,166
vertices, which we do on this


1354
00:41:30,166 --> 00:41:30,806
line right here.


1355
00:41:30,806 --> 00:41:32,936
And we can apply a scale factor


1356
00:41:32,936 --> 00:41:35,166
to it because the vertices are


1357
00:41:35,166 --> 00:41:37,136
centered around the origin.


1358
00:41:37,676 --> 00:41:39,676
So this scale factor serves to


1359
00:41:39,986 --> 00:41:42,076
move vertices either radially


1360
00:41:42,076 --> 00:41:43,466
away from the center or toward


1361
00:41:43,466 --> 00:41:44,376
the center of the image.


1362
00:41:45,056 --> 00:41:46,436
And this is what produces the


1363
00:41:46,436 --> 00:41:48,226
illusion of three dimensions.


1364
00:41:49,346 --> 00:41:51,016
Once we have transformed our


1365
00:41:51,016 --> 00:41:52,906
vertex position, we output it


1366
00:41:52,906 --> 00:41:54,546
here in the new output vertex


1367
00:41:55,146 --> 00:41:56,276
while preserving the original


1368
00:41:56,276 --> 00:41:57,616
depth value, z.


1369
00:41:58,006 --> 00:41:59,546
And this is important because it


1370
00:41:59,546 --> 00:42:01,026
will get passed into the z


1371
00:42:01,026 --> 00:42:02,716
buffer machinery of Metal, which


1372
00:42:02,716 --> 00:42:03,856
will then just do the right


1373
00:42:03,856 --> 00:42:05,296
thing for us as pixels move


1374
00:42:05,296 --> 00:42:06,466
around in the output and start


1375
00:42:06,466 --> 00:42:07,386
to overlap each other.


1376
00:42:09,546 --> 00:42:11,426
Also, we output the texture


1377
00:42:11,426 --> 00:42:12,586
coordinate of the original


1378
00:42:12,586 --> 00:42:13,136
vertex.


1379
00:42:13,906 --> 00:42:14,756
This will get used by the


1380
00:42:14,756 --> 00:42:16,676
fragment shader, which I'll show


1381
00:42:16,676 --> 00:42:18,256
you now.


1382
00:42:19,546 --> 00:42:20,636
Remember, the fragment shader's


1383
00:42:20,636 --> 00:42:23,216
job is to produce a color pixel


1384
00:42:23,216 --> 00:42:23,646
output.


1385
00:42:26,086 --> 00:42:28,276
And since Metal interpolates all


1386
00:42:28,276 --> 00:42:30,176
of these texture coordinates for


1387
00:42:30,176 --> 00:42:32,016
us, all we have to do in our


1388
00:42:32,016 --> 00:42:33,906
fragment shader is to sample the


1389
00:42:33,906 --> 00:42:35,286
original image at the


1390
00:42:35,286 --> 00:42:36,546
interpolated texture coordinate.


1391
00:42:37,156 --> 00:42:38,046
And that's it.


1392
00:42:38,046 --> 00:42:39,216
That's really all the code you


1393
00:42:39,216 --> 00:42:41,176
need to see to implement the


1394
00:42:41,176 --> 00:42:42,076
dolly zoom effect.


1395
00:42:42,356 --> 00:42:43,506
And hopefully it's given you


1396
00:42:43,506 --> 00:42:45,986
some ideas of new directions you


1397
00:42:45,986 --> 00:42:47,616
can take this in to produce your


1398
00:42:47,616 --> 00:42:49,286
own brand new custom 3-D


1399
00:42:49,286 --> 00:42:49,796
effects.


1400
00:42:50,146 --> 00:42:51,406
We're really excited to see what


1401
00:42:51,406 --> 00:42:51,936
you come up with.


1402
00:42:52,716 --> 00:42:55,196
And now, I'll hand the stage


1403
00:42:55,196 --> 00:42:57,676
back over to Etienne to finish


1404
00:42:57,676 --> 00:42:58,000
up.


1405
00:42:59,516 --> 00:43:03,126
[ Applause ]


1406
00:43:03,626 --> 00:43:04,476
>> Thank you, Stephen.


1407
00:43:05,466 --> 00:43:06,216
All right.


1408
00:43:06,796 --> 00:43:08,366
So now that we've applied


1409
00:43:08,366 --> 00:43:10,096
various new effects to our


1410
00:43:10,096 --> 00:43:12,046
images, there's one more step


1411
00:43:12,046 --> 00:43:12,756
that we need to take.


1412
00:43:13,336 --> 00:43:18,046
And that's save your depth data.


1413
00:43:18,146 --> 00:43:20,276
So, you should always preserve


1414
00:43:20,276 --> 00:43:21,156
the depth data.


1415
00:43:21,156 --> 00:43:22,456
All right?


1416
00:43:22,686 --> 00:43:24,836
That way your users will be able


1417
00:43:24,836 --> 00:43:26,826
to use other apps like yours to


1418
00:43:26,826 --> 00:43:28,396
apply their own depth effects on


1419
00:43:28,396 --> 00:43:29,156
top of yours.


1420
00:43:30,306 --> 00:43:31,756
Even if you don't use the depth


1421
00:43:31,756 --> 00:43:33,436
data, you should always preserve


1422
00:43:33,436 --> 00:43:34,826
it if it was present in your


1423
00:43:34,826 --> 00:43:35,626
original image.


1424
00:43:37,406 --> 00:43:38,956
This will really ensure the best


1425
00:43:38,956 --> 00:43:40,246
possible experience for your


1426
00:43:40,246 --> 00:43:40,766
users.


1427
00:43:41,776 --> 00:43:43,246
However, when you store the


1428
00:43:43,246 --> 00:43:45,106
depth data, be sure to match the


1429
00:43:45,106 --> 00:43:47,166
geometry of image data.


1430
00:43:48,376 --> 00:43:49,616
If you don't apply geometry


1431
00:43:49,616 --> 00:43:51,786
correctly, the depth data will


1432
00:43:51,786 --> 00:43:53,206
no longer match the image data.


1433
00:43:53,576 --> 00:43:55,186
And so further depth effect


1434
00:43:55,186 --> 00:43:56,756
applied on top of that will no


1435
00:43:56,756 --> 00:43:57,606
longer work properly.


1436
00:43:58,456 --> 00:44:00,746
So let's take a look at how the


1437
00:44:00,746 --> 00:44:01,996
kind of geometry transforming


1438
00:44:01,996 --> 00:44:04,086
might apply to depth data.


1439
00:44:05,366 --> 00:44:08,126
A very common operation is


1440
00:44:08,126 --> 00:44:08,706
orientation.


1441
00:44:09,256 --> 00:44:10,916
Often times you get to work with


1442
00:44:10,916 --> 00:44:12,136
a portrait image that was


1443
00:44:12,136 --> 00:44:13,686
actually shot in landscape and


1444
00:44:13,686 --> 00:44:15,276
has an [inaudible] orientation.


1445
00:44:16,696 --> 00:44:18,496
So, the depth data may look like


1446
00:44:18,496 --> 00:44:18,866
this.


1447
00:44:19,176 --> 00:44:21,316
And so you want to make sure to


1448
00:44:21,316 --> 00:44:22,836
orient the depth as well.


1449
00:44:23,116 --> 00:44:24,046
So make sure to apply


1450
00:44:24,046 --> 00:44:24,636
orientation.


1451
00:44:25,656 --> 00:44:27,836
Another very common operation is


1452
00:44:27,836 --> 00:44:28,176
crop.


1453
00:44:28,736 --> 00:44:31,006
Right? And so again, make sure


1454
00:44:31,006 --> 00:44:33,176
you crop the depth data to


1455
00:44:33,176 --> 00:44:33,596
match.


1456
00:44:35,266 --> 00:44:36,636
Now, you may have a more


1457
00:44:36,636 --> 00:44:37,946
advanced transform that you also


1458
00:44:37,946 --> 00:44:39,776
apply to your image such as


1459
00:44:39,966 --> 00:44:41,256
[inaudible] transform like this


1460
00:44:41,876 --> 00:44:41,976
one.


1461
00:44:42,526 --> 00:44:43,796
Right? Or maybe you have a


1462
00:44:43,796 --> 00:44:45,006
custom [inaudible] transform


1463
00:44:45,216 --> 00:44:46,976
such as a perspective transform.


1464
00:44:47,226 --> 00:44:48,896
Or maybe even a 3-D transform


1465
00:44:48,896 --> 00:44:50,496
like the one we saw in the dolly


1466
00:44:50,496 --> 00:44:50,956
zoom demo.


1467
00:44:52,606 --> 00:44:54,266
In any case, you want to also


1468
00:44:54,266 --> 00:44:55,626
apply the same transform to the


1469
00:44:55,626 --> 00:44:57,186
depth data so that it matches


1470
00:44:57,186 --> 00:44:58,176
the image perfectly.


1471
00:45:01,256 --> 00:45:03,186
Okay. So the key thing to


1472
00:45:03,186 --> 00:45:04,846
remember here is to apply your


1473
00:45:04,846 --> 00:45:06,206
transform at the native


1474
00:45:06,206 --> 00:45:07,796
resolution of the depth data.


1475
00:45:08,666 --> 00:45:10,276
So you want to scale your


1476
00:45:10,276 --> 00:45:11,456
transform parameter from the


1477
00:45:11,456 --> 00:45:13,986
full size image to that size of


1478
00:45:14,026 --> 00:45:18,276
the depth image.


1479
00:45:18,826 --> 00:45:21,246
Otherwise, right, your transform


1480
00:45:21,246 --> 00:45:22,546
will be applied incorrectly.


1481
00:45:22,546 --> 00:45:24,066
And then the depth image will no


1482
00:45:24,066 --> 00:45:26,776
longer match the image, the


1483
00:45:26,776 --> 00:45:27,416
output image.


1484
00:45:28,966 --> 00:45:30,256
Another thing to note is that


1485
00:45:30,486 --> 00:45:31,916
depth data is not color data.


1486
00:45:31,916 --> 00:45:33,456
So when you are rending a new


1487
00:45:33,456 --> 00:45:35,286
depth image, make sure you don't


1488
00:45:35,596 --> 00:45:36,826
apply any kind of color match


1489
00:45:36,826 --> 00:45:39,996
into it.


1490
00:45:39,996 --> 00:45:40,246
All right.


1491
00:45:41,516 --> 00:45:43,156
So now that we've seen what kind


1492
00:45:43,156 --> 00:45:44,816
of transform we may apply to


1493
00:45:44,816 --> 00:45:46,986
depth data we can render it into


1494
00:45:46,986 --> 00:45:48,196
a new CV pixel buffer.


1495
00:45:49,036 --> 00:45:50,556
Once we have a new CV pixel


1496
00:45:50,556 --> 00:45:52,606
buffer we can create a new AV


1497
00:45:52,606 --> 00:45:53,746
depth data object from it.


1498
00:45:54,026 --> 00:45:54,476
Here's how.


1499
00:45:55,166 --> 00:45:56,556
We start from our original depth


1500
00:45:56,556 --> 00:45:58,386
data object and then we call


1501
00:45:58,386 --> 00:45:59,966
Depth Data by replacing Depth


1502
00:45:59,966 --> 00:46:00,426
Data Map.


1503
00:46:00,706 --> 00:46:01,876
And we pass in all newly


1504
00:46:01,876 --> 00:46:03,006
rendered depth buffer.


1505
00:46:04,036 --> 00:46:06,586
Now returns a new AV depth data


1506
00:46:06,586 --> 00:46:07,066
object.


1507
00:46:07,066 --> 00:46:08,806
And we can then save into our


1508
00:46:08,876 --> 00:46:10,076
output image.


1509
00:46:10,956 --> 00:46:12,026
Let's a take a look at how to


1510
00:46:12,026 --> 00:46:13,886
write depth data using Image IO.


1511
00:46:15,876 --> 00:46:18,386
We start from an image


1512
00:46:18,386 --> 00:46:20,056
destination that we create for


1513
00:46:20,056 --> 00:46:20,766
our output file.


1514
00:46:22,476 --> 00:46:23,816
And here we ask for a JPEG


1515
00:46:23,816 --> 00:46:24,296
format.


1516
00:46:24,616 --> 00:46:26,006
So please note that not all


1517
00:46:26,006 --> 00:46:27,096
image from that [inaudible]


1518
00:46:27,096 --> 00:46:28,896
depth, but JPEG does.


1519
00:46:30,196 --> 00:46:31,896
Next we add our output image to


1520
00:46:31,896 --> 00:46:32,926
the image destination.


1521
00:46:35,456 --> 00:46:37,226
And then we ask all depth data


1522
00:46:37,226 --> 00:46:38,456
object that we want to store


1523
00:46:38,456 --> 00:46:40,566
into the image for a dictionary


1524
00:46:40,566 --> 00:46:42,046
representation for the auxiliary


1525
00:46:42,046 --> 00:46:43,306
data to store in the file.


1526
00:46:44,096 --> 00:46:44,986
So this is will return the


1527
00:46:44,986 --> 00:46:46,666
dictionary for the auxiliary


1528
00:46:46,666 --> 00:46:48,516
data as well as by reference the


1529
00:46:48,516 --> 00:46:49,966
type of the auxiliary data to


1530
00:46:49,966 --> 00:46:50,346
store.


1531
00:46:51,616 --> 00:46:53,486
Then we ask the CG image


1532
00:46:53,486 --> 00:46:54,576
destination to add that


1533
00:46:54,576 --> 00:46:56,246
auxiliary data, passing in the


1534
00:46:56,246 --> 00:46:57,466
type and the dictionary.


1535
00:46:58,566 --> 00:47:00,186
And finally, all we have to do


1536
00:47:00,186 --> 00:47:01,586
is to call CG image destination


1537
00:47:01,586 --> 00:47:02,916
finalized to write everything


1538
00:47:02,916 --> 00:47:03,486
down to disk.


1539
00:47:05,376 --> 00:47:06,596
If you're working with Core


1540
00:47:06,596 --> 00:47:08,816
Image, there's a new very


1541
00:47:08,816 --> 00:47:10,956
convenient way you can do this


1542
00:47:11,796 --> 00:47:12,286
as well.


1543
00:47:12,526 --> 00:47:15,756
So, if you are using CI context


1544
00:47:15,756 --> 00:47:18,256
[inaudible] representation for a


1545
00:47:18,256 --> 00:47:20,366
particular CI image directly in


1546
00:47:20,366 --> 00:47:21,906
order to render and save to a


1547
00:47:21,906 --> 00:47:24,856
JPEG file, you may now pass in


1548
00:47:25,366 --> 00:47:28,086
using an option key a depth data


1549
00:47:28,086 --> 00:47:29,586
object that you want to store as


1550
00:47:29,586 --> 00:47:30,316
part of that file.


1551
00:47:32,326 --> 00:47:35,266
Even better, if you have an


1552
00:47:35,266 --> 00:47:37,626
image, a depth image that you


1553
00:47:37,626 --> 00:47:38,506
have -- let's say you have


1554
00:47:38,506 --> 00:47:39,626
applied a transform to it or


1555
00:47:39,626 --> 00:47:40,026
something.


1556
00:47:40,526 --> 00:47:44,216
You can also specify it as an


1557
00:47:44,216 --> 00:47:46,636
option to that method so that


1558
00:47:47,356 --> 00:47:49,226
Core Image will render both the


1559
00:47:49,226 --> 00:47:50,636
regular image and the depth


1560
00:47:50,636 --> 00:47:52,346
image and save everything down


1561
00:47:52,866 --> 00:47:54,666
to the file in one call.


1562
00:47:55,116 --> 00:47:55,756
Very convenient.


1563
00:47:57,266 --> 00:47:57,806
And so that's it.


1564
00:47:57,806 --> 00:47:59,336
That concludes our session on


1565
00:47:59,496 --> 00:48:00,816
editing images with depth.


1566
00:48:01,806 --> 00:48:02,856
So, let's recap what we've


1567
00:48:02,856 --> 00:48:03,356
learned today.


1568
00:48:04,826 --> 00:48:06,916
We've learned what depth is and


1569
00:48:06,916 --> 00:48:08,196
what depth and disparity looks


1570
00:48:08,196 --> 00:48:08,466
like.


1571
00:48:10,786 --> 00:48:12,386
We've learned how to read and


1572
00:48:12,386 --> 00:48:13,936
prepare depth data for editing.


1573
00:48:14,796 --> 00:48:18,066
And then we saw several ways,


1574
00:48:18,066 --> 00:48:19,126
and we showed you several ways


1575
00:48:19,126 --> 00:48:21,256
to apply new depth effects to


1576
00:48:21,256 --> 00:48:21,906
your images.


1577
00:48:22,256 --> 00:48:23,486
The first one was background


1578
00:48:23,486 --> 00:48:25,646
effects using a built in Core


1579
00:48:25,646 --> 00:48:26,326
Image filter.


1580
00:48:26,986 --> 00:48:28,406
Then we had a custom darkness


1581
00:48:28,406 --> 00:48:30,336
effect using a custom Core Image


1582
00:48:30,336 --> 00:48:30,706
kernel.


1583
00:48:31,656 --> 00:48:32,926
And then we showed you how you


1584
00:48:32,926 --> 00:48:34,886
can apply your depth effect


1585
00:48:35,186 --> 00:48:37,056
using a new CI filter.


1586
00:48:38,246 --> 00:48:39,646
And then we saw how you can


1587
00:48:39,646 --> 00:48:42,116
create a brand new 3-D effect


1588
00:48:42,326 --> 00:48:42,956
using depth.


1589
00:48:43,736 --> 00:48:45,316
I hope that this session will


1590
00:48:45,316 --> 00:48:47,016
inspire you to use depth data


1591
00:48:47,016 --> 00:48:48,326
into your own applications.


1592
00:48:48,556 --> 00:48:49,626
And I can't wait to see what


1593
00:48:49,626 --> 00:48:50,516
cool effects you'll come up


1594
00:48:50,516 --> 00:48:50,706
with.


1595
00:48:51,566 --> 00:48:53,276
For more information, please go


1596
00:48:53,276 --> 00:48:54,606
to the [inaudible] at Apple.com.


1597
00:48:56,266 --> 00:48:57,476
We have a couple related


1598
00:48:57,476 --> 00:48:58,036
sessions.


1599
00:48:58,376 --> 00:49:00,616
There's a session on Advances in


1600
00:49:00,616 --> 00:49:01,986
Core Image that's going to take


1601
00:49:01,986 --> 00:49:03,056
place later today.


1602
00:49:03,056 --> 00:49:04,586
So we strongly encourage you to


1603
00:49:04,666 --> 00:49:05,076
go there.


1604
00:49:05,606 --> 00:49:06,246
Check it out.


1605
00:49:06,246 --> 00:49:08,396
And there was a couple of


1606
00:49:08,396 --> 00:49:10,376
session yesterday was doing


1607
00:49:10,376 --> 00:49:12,896
Photo Kit and also how to


1608
00:49:12,896 --> 00:49:14,526
capture depth with iPhone.


1609
00:49:15,276 --> 00:49:17,076
And with that, I hope that you


1610
00:49:17,076 --> 00:49:18,956
have a good rest of the WWDC.


1611
00:49:19,216 --> 00:49:19,896
Thank you very much.

