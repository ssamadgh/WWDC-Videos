1
00:00:24,516 --> 00:00:29,826
[Applause]


2
00:00:30,326 --> 00:00:30,816
>> Thank you.


3
00:00:31,656 --> 00:00:33,176
So good afternoon, and welcome


4
00:00:33,176 --> 00:00:35,586
to the enhancements
to SceneKit session.


5
00:00:35,886 --> 00:00:37,896
My name is Thomas Goossens.


6
00:00:37,896 --> 00:00:43,096
If you don't already know what
SceneKit is, here is an overview


7
00:00:43,176 --> 00:00:46,156
of the different
frameworks on iOS 10.


8
00:00:46,996 --> 00:00:50,296
SceneKit and SpriteKit
are the high-level APIs.


9
00:00:51,366 --> 00:00:53,926
SpriteKit for 2D
and SceneKit for 3D.


10
00:00:54,656 --> 00:00:57,986
You can use them with other game
technologies like Model I/O,


11
00:00:58,396 --> 00:01:02,706
GameplayKit, and GameController,
and give you access


12
00:01:02,706 --> 00:01:07,236
to the low-level APIs,
which are OpenGL and Metal.


13
00:01:07,786 --> 00:01:12,476
SceneKit was introduced
on OS X on Mountain Lion


14
00:01:12,886 --> 00:01:15,476
and last year on iOS in iOS 8.


15
00:01:17,216 --> 00:01:21,616
Last year, we added a few
new features to SceneKit


16
00:01:21,836 --> 00:01:25,306
to make it ready for casual
games, like particle systems,


17
00:01:25,836 --> 00:01:29,276
physics, force fields, and the
integration with SpriteKit,


18
00:01:29,606 --> 00:01:32,026
for example, for all
the 2D game overlays.


19
00:01:34,036 --> 00:01:36,506
This year, the two
main additions


20
00:01:36,506 --> 00:01:38,786
to SceneKit are the
transition to Metal


21
00:01:38,786 --> 00:01:40,796
and the new Scene Editor.


22
00:01:40,896 --> 00:01:43,866
In this presentation
we will start


23
00:01:43,866 --> 00:01:45,726
by showing you the
new Scene Editor,


24
00:01:46,226 --> 00:01:48,806
then explain why we are
transitioning to Metal


25
00:01:48,806 --> 00:01:51,146
and what it means for
you in terms of adoption.


26
00:01:51,876 --> 00:01:55,236
And we will finish by presenting
a few new features that we added


27
00:01:55,236 --> 00:01:56,456
to the engine this year.


28
00:01:56,616 --> 00:01:57,326
All right.


29
00:01:57,956 --> 00:02:00,076
The new Scene Editor.


30
00:02:00,816 --> 00:02:06,696
It is available in Xcode 7,
so we can run it in El Capitan


31
00:02:07,176 --> 00:02:10,916
or Yosemite, and it is
available in the force field.


32
00:02:12,266 --> 00:02:18,816
To open it, simply open a 3D
file with SceneKit, for example,


33
00:02:18,816 --> 00:02:26,586
DAE, OBJ, olympic, or you can
create using template chooser.


34
00:02:27,476 --> 00:02:32,186
In that case, it will create
a new empty SceneKit document


35
00:02:32,696 --> 00:02:34,606
with the extension .scn,


36
00:02:35,966 --> 00:02:41,436
and an scn file is simply an
scn scene instance archived


37
00:02:41,466 --> 00:02:42,916
with an archiver.


38
00:02:44,006 --> 00:02:46,996
That means that you can produce
your own SceneKit document


39
00:02:47,476 --> 00:02:50,226
programmatically if you
want, and this is very handy


40
00:02:50,226 --> 00:02:51,316
for the production flow.


41
00:02:51,846 --> 00:02:55,676
Then the main goal of
the Scene Editor is


42
00:02:55,726 --> 00:02:57,986
to let you build the
levels of your game.


43
00:02:58,546 --> 00:03:01,956
You will see that it's really
easy to combine multiple assets


44
00:03:01,956 --> 00:03:04,206
from different files
into a single scene


45
00:03:04,406 --> 00:03:08,216
by keeping references
to the original assets.


46
00:03:09,416 --> 00:03:13,496
The Scene Editor also includes
some visual editors for some


47
00:03:13,496 --> 00:03:16,046
of the key features of
SceneKit, for example,


48
00:03:16,046 --> 00:03:20,336
to let you configure particle
systems live in a 3D scene,


49
00:03:21,356 --> 00:03:25,546
configure your physics, inspect
and configure the physics shapes


50
00:03:25,546 --> 00:03:28,176
of your objects, and preview
a simulation for example,


51
00:03:29,266 --> 00:03:33,156
sensing for force fields, and
it includes an action editor


52
00:03:33,156 --> 00:03:35,166
to let you build
action sequences


53
00:03:35,466 --> 00:03:36,846
with a graphic user interface.


54
00:03:38,236 --> 00:03:40,866
Scene Editor also includes
some more advanced features,


55
00:03:40,866 --> 00:03:42,226
for example, if you want


56
00:03:42,326 --> 00:03:45,726
to editor your shared
modifiers live in your scene,


57
00:03:46,546 --> 00:03:49,296
and some baking tools,
for example,


58
00:03:49,296 --> 00:03:52,226
to bake ambient occlusion,
and for this please refer


59
00:03:52,226 --> 00:03:56,906
to the Model IO session for
more information about this.


60
00:03:57,326 --> 00:03:59,866
Okay. But nothing better
than a demo to show you this,


61
00:04:00,256 --> 00:04:03,616
so let me bring Amaury on stage
for presentation of Xcode 7.


62
00:04:03,616 --> 00:04:03,896
Thank you.


63
00:04:04,516 --> 00:04:10,206
[Applause]


64
00:04:10,706 --> 00:04:11,076
>> AMAURY BALLIET: Hello.


65
00:04:11,346 --> 00:04:13,656
My name is Amaury, and
I am a software engineer


66
00:04:13,876 --> 00:04:14,736
with the SceneKit team.


67
00:04:15,346 --> 00:04:18,906
We dramatically improved the
SceneKit editor in Xcode 7,


68
00:04:19,505 --> 00:04:22,096
and with its new
editing capabilities,


69
00:04:22,196 --> 00:04:24,566
it's now really easy to
build scenes from the ground


70
00:04:24,566 --> 00:04:28,526
up in a visual and
interactive manner.


71
00:04:28,586 --> 00:04:33,996
Later on in the session, I will
show you how we used SceneKit


72
00:04:33,996 --> 00:04:38,336
in editor to build Red
Panda, the puzzle game,


73
00:04:38,336 --> 00:04:41,516
but right now we will start
with something more simple,


74
00:04:42,116 --> 00:04:45,166
a small game of physical
scale, which consists


75
00:04:45,166 --> 00:04:48,506
of building a tower of blocks
that will eventually collapse


76
00:04:48,666 --> 00:04:54,866
as we remove blocks from it.


77
00:04:55,176 --> 00:04:58,446
So what you see here is a
SceneKit Scene Editor showing an


78
00:04:58,446 --> 00:04:59,006
empty scene.


79
00:05:00,056 --> 00:05:03,536
On the right side, you have
the usually utility area,


80
00:05:03,716 --> 00:05:06,116
with its inspectors
and libraries.


81
00:05:07,196 --> 00:05:10,106
In the object library, you can
find many SceneKit objects,


82
00:05:10,666 --> 00:05:17,666
such as modes, lights,
cameras, parametric geometries,


83
00:05:18,176 --> 00:05:19,936
as well as physics fields.


84
00:05:20,406 --> 00:05:24,856
Now, for our wooden block, we
use a simple box geometric.


85
00:05:26,776 --> 00:05:32,376
To customize its appearance,
I can drop and imagine it.


86
00:05:33,906 --> 00:05:36,456
Okay. So now just like
in Interface Builder,


87
00:05:36,956 --> 00:05:39,656
inspectors as well can
edit all the properties


88
00:05:39,656 --> 00:05:40,646
of your 3D objects.


89
00:05:41,386 --> 00:05:45,136
For instance, in the attributes
inspector, I can change the size


90
00:05:45,136 --> 00:05:49,746
of my geometry to
be 2 by 1 by 6.


91
00:05:50,316 --> 00:05:54,916
And to center it in the scene,
I can use the node inspector


92
00:05:55,896 --> 00:05:58,426
and set its position to zero.


93
00:05:59,626 --> 00:06:01,706
But actually, there is a
more simple way to do that.


94
00:06:03,106 --> 00:06:04,626
Using the 3D manipulator,


95
00:06:04,816 --> 00:06:08,996
I can freely move the
object in the scene.


96
00:06:09,226 --> 00:06:11,966
Okay. So now that our wooden
block is ready, we will use it


97
00:06:11,966 --> 00:06:14,406
as a template to
build other blocks.


98
00:06:15,696 --> 00:06:19,196
Using the 3D manipulator,
I can easily make copies


99
00:06:19,516 --> 00:06:21,146
by holding the alt key.


100
00:06:22,456 --> 00:06:29,746
I can repeat the
operation, make a selection,


101
00:06:30,236 --> 00:06:36,046
duplicate that selection,
rotate it, make a new selection,


102
00:06:37,116 --> 00:06:43,446
repeat the operation, and one
last time to finish the tower.


103
00:06:43,656 --> 00:06:47,996
Okay. We are now ready to use
the physics engine that's built


104
00:06:47,996 --> 00:06:50,516
into SceneKit to make the
scene more interesting.


105
00:06:51,586 --> 00:06:53,386
I will simply select
all the objects,


106
00:06:54,336 --> 00:06:56,666
head to the physics inspector,


107
00:06:57,736 --> 00:07:00,546
and add a dynamic
body to each block.


108
00:07:01,916 --> 00:07:04,646
We are now ready to
run the simulation.


109
00:07:05,606 --> 00:07:08,526
As you can see, our blocks
are now subject to gravity


110
00:07:08,606 --> 00:07:09,846
and fall indefinitely.


111
00:07:10,766 --> 00:07:13,596
To prevent that, we will
add a floor to the scene,


112
00:07:14,746 --> 00:07:20,606
so I open the objects library,
put a floor, position it,


113
00:07:22,066 --> 00:07:24,986
and I need a static body
so that it participates


114
00:07:24,986 --> 00:07:29,336
in the simulation but
is not allowed to move.


115
00:07:29,336 --> 00:07:31,756
If we run the simulation
again, nothing happens.


116
00:07:32,696 --> 00:07:39,776
But as we remove a few
blocks from the tower,


117
00:07:39,996 --> 00:07:43,666
we get a fair idea of what
the game could look like.


118
00:07:44,516 --> 00:07:49,366
[Applause]


119
00:07:49,866 --> 00:07:50,926
One additional thing I would


120
00:07:50,926 --> 00:07:52,726
like to show you
is a scene review.


121
00:07:53,196 --> 00:07:54,516
You can review the scene review


122
00:07:54,516 --> 00:07:56,276
in the lower left
corner of the editor.


123
00:07:57,696 --> 00:08:00,416
The scene review is where
you can see all the nodes


124
00:08:00,416 --> 00:08:04,256
in your scene, and it is where
you can edit the node hierarchy.


125
00:08:05,116 --> 00:08:09,056
For instance, we have our
floor, the many wooden boxes,


126
00:08:09,506 --> 00:08:12,116
but we also have a spotlight.


127
00:08:12,116 --> 00:08:14,556
I placed this light
in the scene right


128
00:08:14,556 --> 00:08:16,316
after I created the project.


129
00:08:17,056 --> 00:08:21,146
It is currently hidden and has
no effect, so let's show it.


130
00:08:22,036 --> 00:08:23,776
To further improve the lighting,


131
00:08:24,296 --> 00:08:26,276
and to avoid these
completely dark areas,


132
00:08:26,796 --> 00:08:29,476
I will simply add an
ambient light to the scene.


133
00:08:30,006 --> 00:08:32,946
And that's it.


134
00:08:33,346 --> 00:08:36,076
Just through the editor,
we built an entire scene


135
00:08:36,155 --> 00:08:40,836
with 3D objects, textures,
lighting, and dynamic bodies


136
00:08:41,236 --> 00:08:43,846
that could make a nice game
after we implement gestures.


137
00:08:43,846 --> 00:08:49,476
So the SceneKit Scene Editor
really allows you to build more


138
00:08:49,476 --> 00:08:53,316
of your game up by
writing less code.


139
00:08:53,886 --> 00:08:56,206
And there's actually much
more things that you can do


140
00:08:56,206 --> 00:08:59,556
with Editor, and to
cover that, let's switch


141
00:08:59,556 --> 00:09:06,146
to the Red Panda demo, and
let's see the demo again.


142
00:09:06,256 --> 00:09:09,266
So Red Panda is a puzzle
game in the 3D world,


143
00:09:09,586 --> 00:09:12,896
where you can manipulate
the camera with pan gestures


144
00:09:12,896 --> 00:09:17,156
and control the character
on his path.


145
00:09:17,156 --> 00:09:23,206
The goal of this game is
to collect these flowers


146
00:09:23,706 --> 00:09:25,776
and here is the first one.


147
00:09:25,776 --> 00:09:32,886
On his path, Red Panda will
also have to collect items.


148
00:09:32,886 --> 00:09:35,366
See how the world is rich and
animated with many details?


149
00:09:35,576 --> 00:09:39,386
We have lots of particle
systems and animated vegetation.


150
00:09:39,876 --> 00:09:44,326
Now, Red Panda can go
everywhere in the level.


151
00:09:44,476 --> 00:09:47,126
For instance, he
can climb hills.


152
00:09:47,126 --> 00:09:54,286
But on his path Red Panda will
also have to avoid obstacles.


153
00:09:54,286 --> 00:09:58,276
Notice the sound became
louder as we pushed.


154
00:09:58,276 --> 00:10:02,666
It's because we used one of
SceneKit new API's 3D audio.


155
00:10:02,666 --> 00:10:06,646
Many of the features
are in play here.


156
00:10:06,646 --> 00:10:08,846
We have the physics
engine for navigation


157
00:10:08,846 --> 00:10:09,946
and collision detection.


158
00:10:10,266 --> 00:10:12,496
Lots of particle systems.


159
00:10:12,496 --> 00:10:15,716
And shadow modifiers and actions
help to bring the scene to life.


160
00:10:15,716 --> 00:10:18,726
So we just collected
our seventh flower,


161
00:10:18,726 --> 00:10:23,816
and by moving the camera, we
can see where objects hide.


162
00:10:23,816 --> 00:10:26,126
We have a quick tour
under the arch,


163
00:10:26,126 --> 00:10:30,976
and the level is completed.


164
00:10:31,516 --> 00:10:35,306
[Music]


165
00:10:35,806 --> 00:10:36,486
Thank you, Thomas.


166
00:10:37,516 --> 00:10:42,906
[Applause]


167
00:10:43,406 --> 00:10:46,456
So we are now going to see how
we built this game using the


168
00:10:46,456 --> 00:10:47,686
SceneKit Scene Editor.


169
00:10:53,696 --> 00:10:57,406
So this is a starting
point for our game.


170
00:10:57,406 --> 00:10:58,486
A quick and easy way


171
00:10:58,626 --> 00:11:02,396
to immediately improve your
scene is to add a skybox.


172
00:11:03,046 --> 00:11:09,096
A skybox is simply a
collection of six images


173
00:11:09,286 --> 00:11:11,076
that represent the environment.


174
00:11:12,096 --> 00:11:15,486
After we add a skybox to
the scene, we have a context


175
00:11:15,486 --> 00:11:17,066
in which we can build the level.


176
00:11:17,806 --> 00:11:22,276
So if we now take a look at
the resources in our project,


177
00:11:22,876 --> 00:11:25,146
we can see that our
artist provided us


178
00:11:25,186 --> 00:11:27,636
with many building
blocks, and by that I mean


179
00:11:27,636 --> 00:11:34,326
that we have separate files for
the bamboos, for the flowers


180
00:11:35,096 --> 00:11:38,306
to collect, for the
pearls to collect,


181
00:11:38,306 --> 00:11:40,156
as well as the many
structural elements.


182
00:11:41,426 --> 00:11:45,506
So now how do you use these
external building blocks


183
00:11:45,506 --> 00:11:46,106
in your scene?


184
00:11:46,546 --> 00:11:49,976
Well, you go to the
scene, and if you drag


185
00:11:49,976 --> 00:11:52,646
and drop an external
building block in the scene,


186
00:11:53,226 --> 00:11:55,556
you can see that the
reference node has been created


187
00:11:55,736 --> 00:11:57,966
as indicated by this
little arrow icon.


188
00:11:59,056 --> 00:12:02,976
It is very nice and convenient
to have these external resources


189
00:12:02,976 --> 00:12:06,886
as external files because that
way you can design the level


190
00:12:07,096 --> 00:12:09,926
and still have a chance
to save the assets,


191
00:12:10,386 --> 00:12:12,396
and you can also
reuse these assets


192
00:12:12,566 --> 00:12:15,066
to build other levels
for your game.


193
00:12:15,916 --> 00:12:22,526
So as you can see, I've already
included other reference nodes


194
00:12:23,456 --> 00:12:26,066
for other industrial elements.


195
00:12:26,066 --> 00:12:30,706
So this is how you
typically build a level.


196
00:12:31,146 --> 00:12:33,686
You would add your
building blocks one


197
00:12:34,046 --> 00:12:36,656
after the other and iterate.


198
00:12:36,656 --> 00:12:43,246
You would do the same thing
for the flowers to collect.


199
00:12:43,376 --> 00:12:43,986
The pearls.


200
00:12:43,986 --> 00:12:46,546
And finally, the vegetation.


201
00:12:47,186 --> 00:12:51,836
So here you can see
how far we went


202
00:12:52,426 --> 00:12:54,036
with just a simple operation.


203
00:12:55,616 --> 00:12:58,196
So as you remember,
our scene is rich


204
00:12:58,196 --> 00:12:59,856
and animated with many details.


205
00:13:00,096 --> 00:13:01,646
We have a lot of
particle systems,


206
00:13:02,846 --> 00:13:05,206
but we also have
animated vegetation.


207
00:13:05,876 --> 00:13:09,086
Many were animated with skimming


208
00:13:09,346 --> 00:13:12,236
which is a fairly Complicated
animation technique that has


209
00:13:12,236 --> 00:13:14,806
to be done in a special tool.


210
00:13:15,316 --> 00:13:17,956
But for we use shadow modifiers.


211
00:13:18,946 --> 00:13:22,856
Actually, there is one last
element to animate here


212
00:13:23,566 --> 00:13:24,726
in the small waterfall.


213
00:13:25,326 --> 00:13:31,316
So to do that, I will open
the scene for our waterfall,


214
00:13:31,776 --> 00:13:33,956
and the SceneKit's
editor now allows you


215
00:13:34,536 --> 00:13:38,676
to add modifiers right into this
scene for immediate feedback


216
00:13:39,466 --> 00:13:40,866
and live compilation issues.


217
00:13:42,456 --> 00:13:44,726
You can add and edit
each of the modifiers


218
00:13:45,006 --> 00:13:46,306
in the assistant editor.


219
00:13:47,616 --> 00:13:50,926
So here I select the
waterfall and choose


220
00:13:50,926 --> 00:13:52,406
to add a geometry modifier.


221
00:13:52,596 --> 00:13:59,426
I add the modifier, and you
can immediately see its effect.


222
00:14:00,706 --> 00:14:03,056
You can play with your
shadow modifier and try


223
00:14:03,056 --> 00:14:05,396
to tweak the final rendering.


224
00:14:05,666 --> 00:14:09,246
You can try to find what
the final modifiers are.


225
00:14:10,706 --> 00:14:12,116
Once you are happy
with your scene,


226
00:14:13,456 --> 00:14:17,286
you close the assistant editor
and go back to your main level.


227
00:14:17,916 --> 00:14:22,636
As you can see, our
mountain is now animated.


228
00:14:23,336 --> 00:14:26,826
This is because we
used reference nodes,


229
00:14:27,226 --> 00:14:29,586
and when you edit assets,


230
00:14:29,886 --> 00:14:32,166
they are automatically
reflected in the scene.


231
00:14:33,316 --> 00:14:36,086
One last thing we
want to do here is


232
00:14:36,086 --> 00:14:37,526
to add an enemy in the scene.


233
00:14:39,566 --> 00:14:41,476
So this is a scene
for our enemy.


234
00:14:42,316 --> 00:14:44,426
As you can see, it is static.


235
00:14:44,736 --> 00:14:45,606
It has no behavior.


236
00:14:45,606 --> 00:14:49,846
To add the behavior,
we will use actions.


237
00:14:50,686 --> 00:14:52,916
The Scene Editor now
allows you to add


238
00:14:53,446 --> 00:14:55,386
and edit actions
right in the scene.


239
00:14:56,736 --> 00:14:58,486
So this is the action editor.


240
00:14:59,256 --> 00:15:00,446
I will select my enemy.


241
00:15:00,446 --> 00:15:03,656
Choose a row detection.


242
00:15:04,316 --> 00:15:11,176
Add it. Set it to
rotate along the Y axis.


243
00:15:12,636 --> 00:15:14,646
And make it repeat forever.


244
00:15:15,286 --> 00:15:20,496
So this is a simple behavior
that we have for our enemy,


245
00:15:21,326 --> 00:15:25,176
but the action editor allows you
to build some complex scenarios,


246
00:15:25,416 --> 00:15:27,686
and for more information
about that, I invite you


247
00:15:27,686 --> 00:15:29,566
to watch the What's New
in SpriteKit session.


248
00:15:30,976 --> 00:15:36,746
We can now go back to our level,
add a reference to our enemy,


249
00:15:38,176 --> 00:15:39,816
and our scene is finished.


250
00:15:40,366 --> 00:15:44,216
So just -- we just saw
how the editor allows you


251
00:15:44,216 --> 00:15:47,526
to build an entire level
from external building blocks


252
00:15:47,886 --> 00:15:49,756
and how you can bring
life to the scene


253
00:15:49,756 --> 00:15:51,586
with shadow modifiers
and actions.


254
00:15:52,216 --> 00:15:55,206
And with that, I hand over
to Thomas, who will talk


255
00:15:55,206 --> 00:15:57,346
about the architecture
of the game.


256
00:15:58,201 --> 00:16:00,201
[Applause]


257
00:16:00,386 --> 00:16:01,606
>> THOMAS GOOSSENS: So
yeah, we are very happy


258
00:16:01,836 --> 00:16:04,786
to give you this nice
demo as a sample code.


259
00:16:05,546 --> 00:16:07,076
It's available on the
developer website.


260
00:16:07,076 --> 00:16:11,016
You will see it's very
simple and straightforward.


261
00:16:11,146 --> 00:16:14,606
It's about 1,000 items of
code for both iOS and OS X,


262
00:16:14,716 --> 00:16:17,916
it includes everything like
the sound, the controls,


263
00:16:18,176 --> 00:16:21,386
everything you just saw.


264
00:16:21,636 --> 00:16:24,556
So Amaury showed
you what was done


265
00:16:24,556 --> 00:16:26,376
in Xcode 7 to build this demo.


266
00:16:26,416 --> 00:16:29,586
I will quickly present
the rest, what was done


267
00:16:29,586 --> 00:16:32,476
on the inside and the outside.


268
00:16:33,246 --> 00:16:37,186
The first thing we did
was to define a direction


269
00:16:37,846 --> 00:16:40,076
and a simple game
play for our game.


270
00:16:40,076 --> 00:16:42,086
So we started with
our main character.


271
00:16:42,606 --> 00:16:44,706
Then we defined the
shape of our level,


272
00:16:44,936 --> 00:16:47,336
including where the
collectible items should be


273
00:16:47,616 --> 00:16:48,786
and where the enemy should be.


274
00:16:49,766 --> 00:16:53,046
And we defined the final
appearance we wanted


275
00:16:53,046 --> 00:16:54,416
to achieve using SceneKit.


276
00:16:55,716 --> 00:17:00,836
Then the next step was to scope
the 3D models in the 3D tool,


277
00:17:02,086 --> 00:17:05,596
to paint the different
textures, configure,


278
00:17:05,596 --> 00:17:07,816
and animate our character.


279
00:17:08,786 --> 00:17:12,616
And the final polish was done
by adding some particles,


280
00:17:12,886 --> 00:17:16,185
vegetation, and fog,
and we finished the game


281
00:17:16,185 --> 00:17:20,766
by adding some 2D
overlays on top of that.


282
00:17:20,766 --> 00:17:23,506
Then the first challenge
on the code side was


283
00:17:23,506 --> 00:17:24,856
to manage the collisions.


284
00:17:25,356 --> 00:17:28,076
For example, we don't want our
character to cross the walls.


285
00:17:28,966 --> 00:17:32,246
To do this with collisions,
we work with collision meshes.


286
00:17:32,246 --> 00:17:37,056
A collision mesh is a simplified
version of a rounded mesh


287
00:17:37,616 --> 00:17:41,146
that has a similar shape so that
the collision feels consistent


288
00:17:41,146 --> 00:17:42,136
with what you see on the screen.


289
00:17:43,366 --> 00:17:45,756
It's very important to
work with collision meshes


290
00:17:45,806 --> 00:17:49,206
and not the rendered mesh
when you deal with physics


291
00:17:49,206 --> 00:17:51,156
and collisions for
performance reasons.


292
00:17:51,206 --> 00:17:56,726
And as for the ground, we
want our character to be able


293
00:17:56,726 --> 00:17:58,946
to progress everywhere
in the level


294
00:17:59,286 --> 00:18:00,706
but always stick on the ground.


295
00:18:01,326 --> 00:18:03,696
So we need to know
what is the elevation


296
00:18:03,696 --> 00:18:05,366
at any point in the 3D world.


297
00:18:06,616 --> 00:18:08,396
For that, there are
several solutions.


298
00:18:08,666 --> 00:18:12,036
What we did here was to again
work with the collision meshes.


299
00:18:13,676 --> 00:18:18,956
And we do array intersection,
vertical array and meshes,


300
00:18:19,696 --> 00:18:21,446
this I was go us an
intersection point,


301
00:18:22,136 --> 00:18:23,796
and this is where we
can place our character.


302
00:18:24,816 --> 00:18:27,756
Then whe we move the
character with the touchscreen


303
00:18:27,906 --> 00:18:32,186
of the keyboard, we simply
move it on the X and Z plane.


304
00:18:33,376 --> 00:18:36,656
Then we do a new intersection
where the character is.


305
00:18:37,896 --> 00:18:40,726
This gives us a new intersection
point, and we use that point


306
00:18:40,726 --> 00:18:43,426
to adjust the Y position
of our character.


307
00:18:44,296 --> 00:18:48,086
We redo that at every frame,
and this is how simple it is


308
00:18:48,086 --> 00:18:51,946
to animate our character
in the game.


309
00:18:52,816 --> 00:18:53,686
Then animations.


310
00:18:54,276 --> 00:18:56,236
There are several animated
elements in the game.


311
00:18:56,936 --> 00:19:01,186
The character is animated
when it is idle or working.


312
00:19:02,506 --> 00:19:04,596
The grass and the
bamboos are animated


313
00:19:04,596 --> 00:19:06,336
to simulate wind effect.


314
00:19:07,026 --> 00:19:09,696
And as a nice side effect, you
can see that the shadows casted


315
00:19:09,696 --> 00:19:12,956
by the bamboos are also
automatically animated.


316
00:19:13,596 --> 00:19:15,546
And all these animations
are important


317
00:19:16,066 --> 00:19:18,936
because they contribute
making your game more live.


318
00:19:20,346 --> 00:19:23,626
And technically, the character


319
00:19:23,626 --> 00:19:26,036
and the bamboos are
animated using skinning.


320
00:19:26,186 --> 00:19:30,456
So the artist already built
the skeleton and the animations


321
00:19:30,616 --> 00:19:33,736
in the 3D tool and
exported that to a DAE file,


322
00:19:34,236 --> 00:19:37,206
so they are absolutely no good
to do here for the developer.


323
00:19:37,786 --> 00:19:40,896
And the grass was animated


324
00:19:41,086 --> 00:19:45,736
with a shadow modifier
directly in Xcode 7.


325
00:19:45,856 --> 00:19:48,276
Related to animations,
particle effects.


326
00:19:49,956 --> 00:19:52,636
So there are several particle
effects in the game, and again,


327
00:19:52,636 --> 00:19:57,886
they were all done entirely
in Xcode 7, no code here.


328
00:19:57,886 --> 00:20:03,656
The pearl and the flower
with some sparkles emitted.


329
00:20:04,116 --> 00:20:07,226
And the enemy throws some fire.


330
00:20:07,386 --> 00:20:14,296
That was done with a --
modulated with a color gradient.


331
00:20:14,436 --> 00:20:18,726
The particle was done with
four images of dots more


332
00:20:18,856 --> 00:20:22,986
or less blurred with random
sizes and an initial velocity


333
00:20:22,986 --> 00:20:26,426
to simulate the wind effect.


334
00:20:26,556 --> 00:20:28,226
Now, one note about
our materials


335
00:20:29,086 --> 00:20:31,286
and how we achieve this
great-looking materials


336
00:20:31,286 --> 00:20:32,976
in the game.


337
00:20:33,196 --> 00:20:36,686
So here is our looks
like in the game,


338
00:20:37,046 --> 00:20:39,306
but if you just take its
geometry and render it


339
00:20:39,306 --> 00:20:41,396
with flat colors, it
would look like this,


340
00:20:41,816 --> 00:20:43,416
which is a little
bit too simplistic.


341
00:20:44,146 --> 00:20:47,606
So the first thing we did was
to set a diffused texture,


342
00:20:48,086 --> 00:20:50,386
and this gives us a base
color of our objects.


343
00:20:51,156 --> 00:20:55,806
Then we added a normal map
that added very fine details


344
00:20:56,036 --> 00:20:58,706
to our surface without
adding many polygons.


345
00:20:58,776 --> 00:21:00,266
So this is quite cheap.


346
00:21:00,976 --> 00:21:06,626
Then we added a light map using
the self-illumination property,


347
00:21:07,066 --> 00:21:08,536
which is new in this release.


348
00:21:09,976 --> 00:21:11,966
And the light map
adds very fine details


349
00:21:11,966 --> 00:21:14,566
about global illumination
to our objects.


350
00:21:14,566 --> 00:21:17,306
You can see in the
corner of the stone,


351
00:21:17,856 --> 00:21:20,896
you can see some
occlusion, for example,


352
00:21:20,896 --> 00:21:24,726
that is baked in the light map.


353
00:21:24,946 --> 00:21:27,946
Then the last thing we did
was a reflective cube map


354
00:21:28,376 --> 00:21:31,126
to reflect an environment
and, in particular, the sky.


355
00:21:31,126 --> 00:21:35,276
So the reflective cube
map looks like this.


356
00:21:35,276 --> 00:21:38,306
We attenuate its effect
using an attenuateer


357
00:21:39,166 --> 00:21:42,846
to attenuate the
reflection on the surfaces


358
00:21:42,956 --> 00:21:46,476
that are facing the
point of view.


359
00:21:46,686 --> 00:21:50,256
Now, one note about
the light map.


360
00:21:50,256 --> 00:21:52,746
It only baked the
global illumination


361
00:21:52,746 --> 00:21:56,446
and not the main direct light
and not the main shadows


362
00:21:57,066 --> 00:21:59,066
because we want the
main lighting


363
00:21:59,066 --> 00:22:00,776
to continue to be fully dynamic.


364
00:22:01,416 --> 00:22:04,326
That way if we want, we can
animate the position of the sun


365
00:22:04,326 --> 00:22:07,996
if needed, but most of all,
a character can progress


366
00:22:07,996 --> 00:22:11,076
in the game, and its shadows
are live and automatically,


367
00:22:11,076 --> 00:22:14,226
you have nothing to do here.


368
00:22:14,446 --> 00:22:16,076
So that's about it
for this demo,


369
00:22:16,076 --> 00:22:17,936
and I hand over to
Sebastien to talk


370
00:22:17,936 --> 00:22:19,396
about the transition to Metal.


371
00:22:19,746 --> 00:22:19,976
Thank you.


372
00:22:20,516 --> 00:22:24,596
[Applause]


373
00:22:25,096 --> 00:22:27,276
>> SEBASTIEN METROT:
Thank you, Thomas.


374
00:22:27,276 --> 00:22:30,556
So I am Sebastien, and I
am working on SceneKit,


375
00:22:30,946 --> 00:22:34,316
and I am going to talk to you
about the transition to Metal


376
00:22:34,316 --> 00:22:37,096
as well as a bunch
of new features


377
00:22:37,096 --> 00:22:38,366
that we have added this year.


378
00:22:39,946 --> 00:22:43,136
So SceneKit is transitioning
to Metal.


379
00:22:43,136 --> 00:22:45,036
Metal, as you know,
is very low-level


380
00:22:45,226 --> 00:22:50,476
and low-overhead graphic API
that brings better performances


381
00:22:50,636 --> 00:22:54,646
and in much more modern
API to the platforms,


382
00:22:55,406 --> 00:22:58,266
and most importantly for you
SceneKit users, it just works.


383
00:23:00,216 --> 00:23:02,486
It also brings some new
features to SceneKit,


384
00:23:03,206 --> 00:23:06,516
like compute shaders so
you can just use a Metal --


385
00:23:06,516 --> 00:23:13,086
or the geometry source or Metal
texture as material property.


386
00:23:14,046 --> 00:23:16,836
It also allows us to
do automatic batching.


387
00:23:17,216 --> 00:23:19,876
So if you have the geometry used


388
00:23:19,876 --> 00:23:22,306
by multiple objects
using the same material,


389
00:23:22,566 --> 00:23:25,666
we can dramatically reduce
the number of [Inaudible].


390
00:23:26,446 --> 00:23:28,226
I will show you that
with a demo.


391
00:23:29,326 --> 00:23:32,266
So what you see is a simple
SceneKit application running


392
00:23:32,266 --> 00:23:33,976
on the OpenGL ES editor.


393
00:23:34,346 --> 00:23:37,666
It is displaying a planet
with orbiting asteroids,


394
00:23:38,266 --> 00:23:41,176
and on the OpenGL
is eating up much


395
00:23:41,176 --> 00:23:43,076
of the CPU just displaying
the asteroids.


396
00:23:43,116 --> 00:23:46,986
As you can see, we cannot
add many more asteroids


397
00:23:47,106 --> 00:23:49,866
without maxing CPU and
reducing the frame rate.


398
00:23:51,066 --> 00:23:54,136
But if we move to the
same application running


399
00:23:55,306 --> 00:23:58,486
on the Metal renderer, we
can add many more asteroids,


400
00:23:58,916 --> 00:24:02,586
as you will see in a moment.


401
00:24:02,716 --> 00:24:06,326
Yes. Of course, the CPU
starts to be eaten too,


402
00:24:06,666 --> 00:24:10,686
but we can raise the number
of asteroids dramatically.


403
00:24:11,336 --> 00:24:14,566
I think it's quite awesome.


404
00:24:15,366 --> 00:24:17,366
[Applause]


405
00:24:17,716 --> 00:24:17,976
Thank you.


406
00:24:24,536 --> 00:24:29,196
So how do you adopt Metal with
your SceneKit applications?


407
00:24:30,416 --> 00:24:33,356
Well, first is the default
on iOS 9, so you just have


408
00:24:33,356 --> 00:24:35,726
to recompile your
application with the new SDK,


409
00:24:36,096 --> 00:24:39,156
and it will use Metal on all
the hardware that supports it.


410
00:24:40,316 --> 00:24:41,626
It's also backward compatible,


411
00:24:41,626 --> 00:24:43,476
so if you have an
existing application


412
00:24:43,476 --> 00:24:46,146
that you didn't change
and didn't recompile,


413
00:24:46,146 --> 00:24:48,496
it will work on OpenGL
by default.


414
00:24:49,686 --> 00:24:53,536
And you can opt for using the
OpenGL renderer, if you want to,


415
00:24:53,896 --> 00:24:55,946
for example, if you
have custom shaders


416
00:24:55,986 --> 00:24:57,746
that are OpenGL specific.


417
00:24:58,896 --> 00:25:02,106
Choosing the renderer
is really easy,


418
00:25:02,106 --> 00:25:03,816
if you have a built-in
application


419
00:25:03,816 --> 00:25:08,966
with built-in renderer, you just
have to use this small button


420
00:25:08,966 --> 00:25:10,016
to change the default.


421
00:25:11,186 --> 00:25:12,916
You can also do it
programmatically.


422
00:25:12,916 --> 00:25:16,916
So if you created your
scene view at runtime,


423
00:25:17,326 --> 00:25:21,486
you will give it the
right option, use Metal


424
00:25:21,546 --> 00:25:23,136
or OpenGL, as you want.


425
00:25:23,756 --> 00:25:27,366
And what's new also is
that we have added support


426
00:25:27,366 --> 00:25:28,446
for Metal shaders.


427
00:25:28,446 --> 00:25:31,696
So how do you deal with shaders
in SceneKit with the new API?


428
00:25:32,696 --> 00:25:37,226
The first way to use custom
shaders with SceneKit is


429
00:25:37,496 --> 00:25:39,556
to use Metal shader modifiers.


430
00:25:39,886 --> 00:25:43,016
Shadow modifyers used
to be only in GSL.


431
00:25:43,126 --> 00:25:45,296
Now we support both languages.


432
00:25:45,566 --> 00:25:51,396
If you add on GLSL modifier, it
will work as it is on OpenGL,


433
00:25:51,396 --> 00:25:53,336
and it will be translated
to Metal.


434
00:25:54,006 --> 00:25:55,586
It works in most situations.


435
00:25:56,156 --> 00:25:58,206
If you write your
shadow modifier


436
00:25:58,206 --> 00:26:01,056
with Metal shadow
language, it will not work,


437
00:26:01,056 --> 00:26:05,356
it will be ignored, but
it will work as Metal.


438
00:26:06,676 --> 00:26:13,496
The second way to use shaders in
SceneKit is to use SCNPrograms.


439
00:26:14,286 --> 00:26:16,246
In this case, there is
no automatic translation,


440
00:26:16,246 --> 00:26:17,716
so you will do it by hand.


441
00:26:17,946 --> 00:26:19,546
Will you have to
translate all your code.


442
00:26:20,276 --> 00:26:23,196
It's supported -- it
supports both GLSL


443
00:26:23,296 --> 00:26:28,266
and Metal shading languages,
so you can support both


444
00:26:28,266 --> 00:26:29,396
in the same application.


445
00:26:30,146 --> 00:26:31,516
You can compile them offline.


446
00:26:32,316 --> 00:26:35,356
You just have to provide the
function names for the shader


447
00:26:35,356 --> 00:26:37,526
for the fragment
and vertex shader,


448
00:26:38,176 --> 00:26:39,926
or you can compile
it at runtime.


449
00:26:39,956 --> 00:26:42,466
In this case, you just have to
give the source code in addition


450
00:26:42,466 --> 00:26:44,586
to the function names.


451
00:26:45,256 --> 00:26:47,106
I will show you now
how you do it


452
00:26:47,776 --> 00:26:51,316
by creating a very small shader
that would work in SceneKit.


453
00:26:51,386 --> 00:26:53,786
The first operation that
you will have to do is


454
00:26:53,926 --> 00:26:58,526
to include our SceneKit header
so that you can have access


455
00:26:58,926 --> 00:27:03,726
to some semantics and, for
example, the default metrics.


456
00:27:04,416 --> 00:27:09,726
Here we define our custom
vertex structure that is


457
00:27:09,726 --> 00:27:13,486
in the correct data
in SceneKit thanks


458
00:27:13,486 --> 00:27:15,106
to the semantic definition.


459
00:27:16,116 --> 00:27:21,316
We can also define the use of
a metrics that is, for example,


460
00:27:21,386 --> 00:27:22,386
the model view projection.


461
00:27:23,086 --> 00:27:28,116
And we can define our own
structure with our own data


462
00:27:28,116 --> 00:27:30,836
for the algorithm we
are trying to create.


463
00:27:32,146 --> 00:27:36,196
Then we just have to
create the vertex function


464
00:27:36,776 --> 00:27:42,566
by giving the arguments for the
structure that we have defined.


465
00:27:42,566 --> 00:27:43,046
Really easy.


466
00:27:44,146 --> 00:27:47,916
Then in the program, we just
define the same structures,


467
00:27:47,916 --> 00:27:50,236
we have to use the same
types and the same layout


468
00:27:50,236 --> 00:27:52,486
for the structure as we used
in the Metal definition.


469
00:27:53,626 --> 00:27:56,686
We created a program,
give the vertex


470
00:27:56,686 --> 00:27:58,446
and fragment function names.


471
00:27:59,736 --> 00:28:03,756
And then we can give some
data by using the structure


472
00:28:03,756 --> 00:28:06,566
and wrapping it around
time stamps.


473
00:28:07,476 --> 00:28:08,046
Very simple.


474
00:28:09,696 --> 00:28:14,516
The last way to use shaders in
SceneKit is to use techniques,


475
00:28:14,996 --> 00:28:16,836
techniques were introduced
last year.


476
00:28:17,216 --> 00:28:19,376
It's a great way to
do post-processing


477
00:28:19,376 --> 00:28:25,456
for all your applications on the
role scene, and in this case,


478
00:28:25,766 --> 00:28:28,456
you just have to give the
correct function names


479
00:28:28,756 --> 00:28:32,666
for the Metal shaders in your
pass definition, and that's it.


480
00:28:32,836 --> 00:28:34,706
It will work just like
the OpenGL version.


481
00:28:35,706 --> 00:28:37,116
That was it for Metal.


482
00:28:37,116 --> 00:28:38,966
Let's move on to
some new features


483
00:28:38,966 --> 00:28:40,236
that we have added
for you this year.


484
00:28:41,616 --> 00:28:46,226
The first one is the
integration with Model I/O,


485
00:28:46,226 --> 00:28:50,496
so we have added the support for
Model I/O, both for importing


486
00:28:50,496 --> 00:28:53,426
and exporting of your
models and scenes.


487
00:28:54,036 --> 00:29:01,266
As you can see, not all the file
formats support all the data


488
00:29:01,266 --> 00:29:04,376
that we are supporting in
SceneKit, so choose the one


489
00:29:04,376 --> 00:29:06,886
that is most suited
for your application.


490
00:29:07,496 --> 00:29:12,206
We have also added scene
transition with one line


491
00:29:12,206 --> 00:29:14,336
of code, very easy, you
can create transitions


492
00:29:14,336 --> 00:29:17,076
between scenes, and
with great animations.


493
00:29:18,236 --> 00:29:19,886
Really easy to use.


494
00:29:21,596 --> 00:29:23,596
We have added also
debug options,


495
00:29:24,066 --> 00:29:27,076
so you can visualize your
boxes, your physics shapes,


496
00:29:27,386 --> 00:29:30,076
everything at one time
for debugging purposes.


497
00:29:30,656 --> 00:29:36,056
We have also added
blend modes to material


498
00:29:36,516 --> 00:29:38,756
so you can choose how
transparency works


499
00:29:38,886 --> 00:29:42,786
for each node -- for each
material in your application.


500
00:29:43,446 --> 00:29:45,026
You can create new
effects with that.


501
00:29:45,666 --> 00:29:50,256
And we have also added an
audio engine that works


502
00:29:50,256 --> 00:29:52,266
for everything in SceneKit.


503
00:29:52,796 --> 00:29:57,326
We can create 3D sounds,
attach them to nodes,


504
00:29:57,436 --> 00:30:00,196
and they will move with
the nodes in the scene.


505
00:30:01,076 --> 00:30:03,236
It also works with
ambience and music,


506
00:30:03,236 --> 00:30:07,886
so you can digital position
audio and loop the sound.


507
00:30:07,886 --> 00:30:11,196
The listener is placed on the
camera node, but you can move it


508
00:30:11,196 --> 00:30:12,326
to any node in the scene.


509
00:30:12,326 --> 00:30:12,996
It's really easy.


510
00:30:14,846 --> 00:30:18,016
It's based on the AVAudioEngine,
so you just have to annotate


511
00:30:18,236 --> 00:30:22,246
from AV audio node, and you can
do your own audio processing


512
00:30:22,246 --> 00:30:24,536
if you want to if you have
an existing audio engine.


513
00:30:25,326 --> 00:30:29,086
And last, we have added also
a way to created sound action


514
00:30:29,086 --> 00:30:32,406
so you can integrate sound
into your action sequences.


515
00:30:32,406 --> 00:30:35,476
That's really easy to do.


516
00:30:35,736 --> 00:30:39,076
And here is how you
use the sound API.


517
00:30:39,576 --> 00:30:43,756
First you have to instantiate an
audio sound from the file fame.


518
00:30:44,236 --> 00:30:46,846
Then you create a player and
attach the player to any node


519
00:30:47,016 --> 00:30:50,206
in the scene, and it will start
to play right away and stop


520
00:30:50,256 --> 00:30:51,136
when the sound is finished.


521
00:30:51,926 --> 00:30:53,666
If you want to do
ambience or music,


522
00:30:53,936 --> 00:30:57,656
you have to just flip a switch,


523
00:30:58,076 --> 00:31:01,356
like digital positional
audio and start looping.


524
00:31:03,006 --> 00:31:06,866
And last, it's really easy to
create a play song selection.


525
00:31:06,866 --> 00:31:10,046
It's just one line, and you
can run the action or add it


526
00:31:10,136 --> 00:31:12,226
to an existing action sequence.


527
00:31:13,956 --> 00:31:18,086
This API was used in the
sample code for all the sound,


528
00:31:18,606 --> 00:31:21,906
and we used the collision
mesh as --


529
00:31:21,906 --> 00:31:26,436
that Thomas showed you
sooner to detect kind


530
00:31:26,436 --> 00:31:29,916
of ground the character
is working on.


531
00:31:30,246 --> 00:31:35,746
For example [scratching sound]
when he walks on the grass.


532
00:31:36,036 --> 00:31:37,626
Or when he walks on a rock.


533
00:31:38,276 --> 00:31:41,766
It was really easy to do.


534
00:31:42,036 --> 00:31:42,766
So that's about it.


535
00:31:42,766 --> 00:31:46,386
And I give you back to Thomas
for the wrap-up of this session.


536
00:31:46,556 --> 00:31:46,866
Thank you.


537
00:31:48,516 --> 00:31:52,756
[Applause]


538
00:31:53,256 --> 00:31:53,506
>> THOMAS GOOSSENS: Okay.


539
00:31:53,506 --> 00:31:56,706
So that was an overview of what
we added to SceneKit this year.


540
00:31:57,356 --> 00:32:00,936
So a great new Scene Editor
that will save you tons of lines


541
00:32:00,936 --> 00:32:03,736
of code and do more for
your game insight tools,


542
00:32:03,926 --> 00:32:06,146
which is usually a good idea.


543
00:32:06,146 --> 00:32:07,776
A smooth transition to Metal


544
00:32:08,126 --> 00:32:10,386
which should boost the
performance of your game


545
00:32:11,306 --> 00:32:13,786
with nothing to do on your
side most of the time.


546
00:32:15,146 --> 00:32:18,336
And some new features that were
presented, and we covered some


547
00:32:18,336 --> 00:32:19,406
of them in this session,


548
00:32:19,576 --> 00:32:23,976
but check the documentation
for a list.


549
00:32:24,726 --> 00:32:27,976
And an amazing demo app
that we are really proud


550
00:32:27,976 --> 00:32:29,116
to share the code with you.


551
00:32:30,066 --> 00:32:32,816
Search for fox on the developer
website, and you should find it.


552
00:32:34,526 --> 00:32:38,686
Now for more information,
please check the resources


553
00:32:38,686 --> 00:32:40,276
and documentation
we have online,


554
00:32:41,086 --> 00:32:42,476
and for general inquiries,


555
00:32:42,586 --> 00:32:44,606
contact our Evangelist,
Allan Schaffer.


556
00:32:45,856 --> 00:32:49,436
Some related sessions,
Model I/O,


557
00:32:49,436 --> 00:32:51,496
great new frameworks
introduced this year,


558
00:32:52,536 --> 00:32:55,806
and check the What's New
in SpriteKit session.


559
00:32:55,896 --> 00:32:58,786
They have a really great
demo of the scene editors


560
00:32:58,786 --> 00:33:00,476
that go much deeper
into details.


561
00:33:00,476 --> 00:33:02,416
So you definitely
want to see that one.


562
00:33:03,236 --> 00:33:04,146
And that's about it.


563
00:33:04,426 --> 00:33:05,806
Thanks, and enjoy
the conference.


564
00:33:05,916 --> 00:33:06,176
Thank you.


565
00:33:07,508 --> 00:33:09,508
[Applause]

