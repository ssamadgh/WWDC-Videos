1
00:00:23,066 --> 00:00:23,696
>> Good Morning [applause].


2
00:00:25,036 --> 00:00:27,876
Thank you, and welcome to What's


3
00:00:27,876 --> 00:00:29,496
New in Screen Recording and Live


4
00:00:29,496 --> 00:00:30,046
Broadcast.


5
00:00:30,576 --> 00:00:32,336
My name is Johnny Trenh, I'm a


6
00:00:32,336 --> 00:00:33,506
software engineer at Apple


7
00:00:33,676 --> 00:00:34,796
working on a ReplayKit team.


8
00:00:35,966 --> 00:00:37,926
Today, my teammate Alexander


9
00:00:37,996 --> 00:00:39,776
Subbotin and I are really


10
00:00:39,776 --> 00:00:41,646
excited to talk to you about all


11
00:00:41,646 --> 00:00:42,826
the new upcoming features we


12
00:00:42,826 --> 00:00:44,276
have planned for ReplayKit this


13
00:00:44,276 --> 00:00:44,426
year.


14
00:00:45,666 --> 00:00:46,866
We've got a lot to discuss, so


15
00:00:46,866 --> 00:00:47,956
let's go ahead and get started.


16
00:00:50,616 --> 00:00:52,896
ReplayKit is a framework that


17
00:00:52,896 --> 00:00:54,686
allows developers to record


18
00:00:54,686 --> 00:00:57,476
their applications audio, video,


19
00:00:57,786 --> 00:00:59,756
and microphone content to a


20
00:00:59,756 --> 00:01:01,546
movie file that their users can


21
00:01:01,546 --> 00:01:04,706
then review, edit, save, or


22
00:01:04,706 --> 00:01:05,566
share with the rest of the


23
00:01:05,566 --> 00:01:05,836
world.


24
00:01:08,286 --> 00:01:10,326
ReplayKit also supports Live


25
00:01:10,326 --> 00:01:10,966
Broadcast.


26
00:01:11,546 --> 00:01:12,956
For applications generating


27
00:01:12,956 --> 00:01:15,446
content, ReplayKit provides you


28
00:01:15,446 --> 00:01:17,476
with all the tools necessary to


29
00:01:17,476 --> 00:01:19,346
stream your application's audio,


30
00:01:19,346 --> 00:01:21,996
video, and microphone content to


31
00:01:21,996 --> 00:01:23,046
a broadcast extension.


32
00:01:24,456 --> 00:01:25,846
For applications implementing a


33
00:01:25,846 --> 00:01:28,416
broadcast extension, ReplayKit


34
00:01:28,416 --> 00:01:30,136
comes equipped with easy to use


35
00:01:30,136 --> 00:01:31,986
Xcode templates that will help


36
00:01:31,986 --> 00:01:33,746
your application stream


37
00:01:33,836 --> 00:01:37,576
ReplayKit content.


38
00:01:37,666 --> 00:01:39,856
ReplayKit records both audio and


39
00:01:39,856 --> 00:01:42,016
video in HD quality with


40
00:01:42,016 --> 00:01:43,886
low-performance impact and


41
00:01:43,926 --> 00:01:45,116
minimal power usage.


42
00:01:46,126 --> 00:01:47,826
Privacy is a very big thing with


43
00:01:47,826 --> 00:01:50,396
us, so both recording and


44
00:01:50,396 --> 00:01:51,946
broadcasting comes equipped with


45
00:01:52,026 --> 00:01:54,056
privacy safeguards such as user


46
00:01:54,056 --> 00:01:55,806
consent as well as all


47
00:01:55,806 --> 00:01:57,676
recordings and samples that


48
00:01:57,676 --> 00:01:58,646
exclude system UI.


49
00:02:01,286 --> 00:02:02,956
Since the release of ReplayKit,


50
00:02:02,956 --> 00:02:04,486
we have seen some amazing


51
00:02:04,486 --> 00:02:06,026
adoption from developers all


52
00:02:06,026 --> 00:02:06,926
around the world.


53
00:02:07,836 --> 00:02:09,395
Applications like Galaxy on


54
00:02:09,395 --> 00:02:11,886
Fire, Vainglory, Call of


55
00:02:11,886 --> 00:02:14,186
Champions, and Modern Combat 5,


56
00:02:14,496 --> 00:02:16,716
are all using ReplayKit today to


57
00:02:16,716 --> 00:02:18,466
record and broadcast their


58
00:02:18,466 --> 00:02:20,296
users' experiences with the rest


59
00:02:20,296 --> 00:02:20,716
of the world.


60
00:02:23,606 --> 00:02:25,356
Last year we introduced Live


61
00:02:25,356 --> 00:02:26,586
Broadcast with ReplayKit.


62
00:02:26,766 --> 00:02:28,356
And we are proud to say that


63
00:02:28,356 --> 00:02:30,116
ReplayKit now powers some of the


64
00:02:30,116 --> 00:02:31,786
industry leaders in mobile


65
00:02:31,786 --> 00:02:32,166
streaming.


66
00:02:33,796 --> 00:02:36,496
The support adoption and


67
00:02:36,536 --> 00:02:37,556
feedback we've received from


68
00:02:37,556 --> 00:02:39,056
developers has been amazing.


69
00:02:39,866 --> 00:02:41,036
That is why this year we're


70
00:02:41,166 --> 00:02:42,376
really happy to introduce


71
00:02:43,886 --> 00:02:44,676
ReplayKit 2.


72
00:02:45,816 --> 00:02:47,956
With ReplayKit 2, our goal is to


73
00:02:47,956 --> 00:02:49,906
bring ReplayKit to every user


74
00:02:50,126 --> 00:02:51,516
and every application.


75
00:02:52,616 --> 00:02:54,306
We've designed our new features


76
00:02:54,336 --> 00:02:55,976
to take ReplayKit beyond just


77
00:02:55,976 --> 00:02:58,466
gaming, enabling all developers


78
00:02:58,546 --> 00:03:00,866
to record and broadcast their


79
00:03:00,866 --> 00:03:02,576
users' experiences to the whole


80
00:03:02,576 --> 00:03:02,956
world.


81
00:03:03,476 --> 00:03:05,946
And to do that, the first thing


82
00:03:05,946 --> 00:03:08,486
I want to talk about is In-App


83
00:03:08,486 --> 00:03:09,196
Screen Capture.


84
00:03:10,506 --> 00:03:12,006
Look, we've already seen the


85
00:03:12,006 --> 00:03:13,826
amazing content your users have


86
00:03:13,826 --> 00:03:15,086
been creating with ReplayKit.


87
00:03:16,326 --> 00:03:17,666
With ReplayKit 2, we're


88
00:03:17,666 --> 00:03:19,636
introducing In-App Screen


89
00:03:19,636 --> 00:03:21,506
Capture, which is a powerful new


90
00:03:21,506 --> 00:03:23,586
API that's going to give you


91
00:03:23,826 --> 00:03:25,426
direct access to your


92
00:03:25,426 --> 00:03:28,316
application's own audio, video,


93
00:03:28,436 --> 00:03:30,196
and microphone content straight


94
00:03:30,196 --> 00:03:30,906
from ReplayKit.


95
00:03:31,416 --> 00:03:35,636
Our goal with ReplayKit 2 was to


96
00:03:35,636 --> 00:03:36,976
bring ReplayKit to every


97
00:03:36,976 --> 00:03:37,626
application.


98
00:03:38,506 --> 00:03:40,026
And to do that we're making


99
00:03:40,026 --> 00:03:42,086
ReplayKit instantly available to


100
00:03:42,086 --> 00:03:43,826
every application on iOS.


101
00:03:44,736 --> 00:03:47,096
Previously, to use ReplayKit and


102
00:03:47,096 --> 00:03:48,746
to have a application using


103
00:03:48,746 --> 00:03:50,646
ReplayKit, you'd have to use our


104
00:03:50,646 --> 00:03:50,926
API.


105
00:03:51,566 --> 00:03:54,936
But now, users can record and


106
00:03:54,936 --> 00:03:57,376
broadcast their entire iOS


107
00:03:57,376 --> 00:03:59,326
screen experience straight from


108
00:03:59,326 --> 00:04:00,736
the new screen recording control


109
00:04:00,906 --> 00:04:03,856
found in Control Center.


110
00:04:04,026 --> 00:04:06,006
Also new with ReplayKit 2 is the


111
00:04:06,006 --> 00:04:08,186
ability to pair your application


112
00:04:08,366 --> 00:04:09,876
with a particular streaming


113
00:04:09,876 --> 00:04:10,376
service.


114
00:04:11,696 --> 00:04:14,636
Developers can now seamlessly


115
00:04:14,636 --> 00:04:16,296
integrate their entire streaming


116
00:04:16,296 --> 00:04:17,896
solution right from within their


117
00:04:17,896 --> 00:04:18,625
own application.


118
00:04:20,676 --> 00:04:22,826
Last year, we introduced front


119
00:04:22,826 --> 00:04:24,116
camera support for ReplayKit.


120
00:04:24,896 --> 00:04:26,906
This year with ReplayKit 2 we're


121
00:04:26,906 --> 00:04:28,306
introducing Fast Camera


122
00:04:28,306 --> 00:04:29,826
Switching, which is going to


123
00:04:29,826 --> 00:04:31,516
enable you to use both the front


124
00:04:31,786 --> 00:04:33,486
and rear cameras for additional


125
00:04:33,486 --> 00:04:33,976
video commentary.


126
00:04:36,456 --> 00:04:37,906
We've got a lot of new and


127
00:04:37,906 --> 00:04:39,056
exciting things to talk about.


128
00:04:39,056 --> 00:04:40,126
So, I'm just going to go ahead


129
00:04:40,126 --> 00:04:42,526
and jump right in with In-App


130
00:04:42,526 --> 00:04:43,206
Screen Capture.


131
00:04:44,616 --> 00:04:46,036
In-App Screen Capture is a


132
00:04:46,126 --> 00:04:48,226
powerful new API that's going to


133
00:04:48,226 --> 00:04:50,496
give you direct access to your


134
00:04:50,536 --> 00:04:53,236
application's own audio, video,


135
00:04:53,556 --> 00:04:55,156
and microphone content straight


136
00:04:55,156 --> 00:04:55,846
from ReplayKit.


137
00:04:56,926 --> 00:04:58,786
This new API is going to open


138
00:04:58,786 --> 00:05:00,496
doors to new user experiences


139
00:05:00,496 --> 00:05:01,906
that just weren't possible


140
00:05:01,906 --> 00:05:02,276
before.


141
00:05:03,256 --> 00:05:05,086
But, before we get into In-App


142
00:05:05,086 --> 00:05:06,346
Screen Capture, let's go ahead


143
00:05:06,346 --> 00:05:07,316
and take a look at how


144
00:05:08,006 --> 00:05:09,756
applications are currently using


145
00:05:09,756 --> 00:05:11,096
ReplayKit to handle recording.


146
00:05:14,056 --> 00:05:15,236
An application that's currently


147
00:05:15,236 --> 00:05:17,326
using ReplayKit will call in to


148
00:05:17,326 --> 00:05:18,526
RPScreenRecorder to get the


149
00:05:18,526 --> 00:05:19,886
shared recorder instance.


150
00:05:20,536 --> 00:05:22,886
From there, you'll call start


151
00:05:22,886 --> 00:05:24,686
recording onto shared recorder


152
00:05:24,686 --> 00:05:26,696
instance, at which time the


153
00:05:26,696 --> 00:05:27,916
replay daemon will start to


154
00:05:27,916 --> 00:05:29,436
capture your application's


155
00:05:29,436 --> 00:05:31,586
audio, video, and microphone


156
00:05:31,586 --> 00:05:33,886
content, and create and manage a


157
00:05:33,886 --> 00:05:35,106
movie file just for your


158
00:05:35,106 --> 00:05:35,656
application.


159
00:05:37,436 --> 00:05:39,156
When you call stop recording on


160
00:05:39,156 --> 00:05:40,356
a shared recorder instance,


161
00:05:40,766 --> 00:05:42,176
replay daemon will communicate


162
00:05:42,176 --> 00:05:43,476
with a share and preview


163
00:05:43,476 --> 00:05:45,776
extension and instantiate an


164
00:05:45,776 --> 00:05:47,126
RPPreviewViewController.


165
00:05:47,976 --> 00:05:48,666
We'll pass that


166
00:05:48,666 --> 00:05:50,296
RPPreviewViewController back to


167
00:05:50,296 --> 00:05:51,626
your application so that you can


168
00:05:51,626 --> 00:05:52,886
present it to your users,


169
00:05:53,326 --> 00:05:55,706
allowing them to review, edit,


170
00:05:55,776 --> 00:05:57,116
save, or share the recording


171
00:05:57,116 --> 00:05:58,236
they just made in your


172
00:05:58,236 --> 00:05:58,806
application.


173
00:06:01,616 --> 00:06:02,716
With a new In-App Screen


174
00:06:02,716 --> 00:06:04,186
Capture, just like with


175
00:06:04,186 --> 00:06:06,036
recording, you're going to call


176
00:06:06,036 --> 00:06:07,266
into RPScreenRecorder to get the


177
00:06:07,266 --> 00:06:08,536
share recorder instance.


178
00:06:09,276 --> 00:06:11,036
From there, you'll call start


179
00:06:11,036 --> 00:06:12,236
capture on the share recorder


180
00:06:12,236 --> 00:06:13,746
instance, at which point the


181
00:06:13,746 --> 00:06:15,186
replay daemon will start to


182
00:06:15,186 --> 00:06:16,706
capture your application's


183
00:06:16,706 --> 00:06:19,096
audio, video, and microphone


184
00:06:19,096 --> 00:06:19,526
content.


185
00:06:20,076 --> 00:06:22,136
But instead of creating and


186
00:06:22,136 --> 00:06:23,716
managing a movie file just for


187
00:06:23,716 --> 00:06:25,866
your application, ReplayKit will


188
00:06:25,866 --> 00:06:27,366
send those audio and video


189
00:06:27,366 --> 00:06:28,896
samples right back up to


190
00:06:28,896 --> 00:06:29,736
RPScreenRecorder.


191
00:06:30,346 --> 00:06:33,826
A capture handler block is then


192
00:06:33,826 --> 00:06:35,406
called, and we'll send the audio


193
00:06:35,406 --> 00:06:37,116
and video samples, right back to


194
00:06:37,116 --> 00:06:38,446
your application's process.


195
00:06:39,706 --> 00:06:41,926
Your application now has direct


196
00:06:41,926 --> 00:06:44,786
access to its own audio, video,


197
00:06:44,936 --> 00:06:46,556
and microphone samples straight


198
00:06:46,556 --> 00:06:47,256
from ReplayKit.


199
00:06:49,376 --> 00:06:51,366
Giving you direct access to your


200
00:06:51,366 --> 00:06:52,936
application's audio and video


201
00:06:52,936 --> 00:06:54,346
samples from ReplayKit will


202
00:06:54,346 --> 00:06:55,456
provide you with more


203
00:06:55,456 --> 00:06:58,096
flexibility and control over the


204
00:06:58,096 --> 00:07:00,126
content your users are already


205
00:07:00,126 --> 00:07:00,546
creating.


206
00:07:01,806 --> 00:07:03,636
Just like with recording, In-App


207
00:07:03,636 --> 00:07:05,216
Screen Capture captures audio


208
00:07:05,576 --> 00:07:08,226
and video in HD quality, with


209
00:07:08,226 --> 00:07:10,166
low-performance impact and


210
00:07:10,166 --> 00:07:11,206
minimal power usage.


211
00:07:12,296 --> 00:07:14,186
Again, privacy is a very big


212
00:07:14,186 --> 00:07:16,166
thing with us, so In-App Screen


213
00:07:16,166 --> 00:07:17,386
Capture comes equipped with


214
00:07:17,386 --> 00:07:19,466
privacy safeguards such as user


215
00:07:19,466 --> 00:07:21,736
consent as well as all samples


216
00:07:21,736 --> 00:07:22,816
excluding system UI.


217
00:07:24,656 --> 00:07:26,696
The API is simple and


218
00:07:26,696 --> 00:07:27,096
lightweight.


219
00:07:27,216 --> 00:07:28,316
So, let's go ahead and take a


220
00:07:28,316 --> 00:07:30,606
quick look at it.


221
00:07:30,876 --> 00:07:32,766
StartCapture takes in two


222
00:07:32,766 --> 00:07:34,786
blocks, a captureHandler block


223
00:07:35,026 --> 00:07:36,476
and a completionHandler block.


224
00:07:37,866 --> 00:07:39,246
The captureHandler block is


225
00:07:39,246 --> 00:07:41,196
called every time ReplayKit is


226
00:07:41,196 --> 00:07:42,566
ready to hand your application


227
00:07:42,566 --> 00:07:43,506
back a sample.


228
00:07:44,386 --> 00:07:45,236
We provide you with a


229
00:07:45,236 --> 00:07:46,926
CMSampleBuffer ref an


230
00:07:46,926 --> 00:07:49,356
RPSampleBufferType and an NS


231
00:07:49,356 --> 00:07:49,596
Error.


232
00:07:50,696 --> 00:07:52,166
The completion handler block is


233
00:07:52,166 --> 00:07:53,936
called when startCapture has


234
00:07:53,936 --> 00:07:55,846
completed and will give you an


235
00:07:55,846 --> 00:07:57,306
NS Error indicating to you


236
00:07:57,306 --> 00:07:58,496
whether or not an error has


237
00:07:58,496 --> 00:08:00,046
occurred during startCapture.


238
00:08:01,286 --> 00:08:02,886
The stopCapture also takes in a


239
00:08:02,886 --> 00:08:04,076
completionHandler which will


240
00:08:04,076 --> 00:08:05,616
also pass you back and NS Error


241
00:08:05,966 --> 00:08:07,696
indicating to you whether or not


242
00:08:07,696 --> 00:08:08,626
an error has occurred during


243
00:08:08,626 --> 00:08:09,366
stopCapture.


244
00:08:10,566 --> 00:08:11,566
Let's go ahead and take a look


245
00:08:11,566 --> 00:08:12,446
at how we can use this in


246
00:08:12,446 --> 00:08:12,976
practice.


247
00:08:15,106 --> 00:08:16,476
Here, in our example, what I


248
00:08:16,476 --> 00:08:18,256
want to do is I want to take the


249
00:08:18,256 --> 00:08:19,656
samples that ReplayKit has given


250
00:08:19,656 --> 00:08:21,576
me and I want to use it to write


251
00:08:21,576 --> 00:08:23,126
a simple movie file to disc


252
00:08:23,276 --> 00:08:24,436
using AVAssetWriter.


253
00:08:25,126 --> 00:08:27,026
So, here I have method called


254
00:08:27,026 --> 00:08:28,226
didPressCaptureButton.


255
00:08:28,736 --> 00:08:30,326
Inside of it, I'm simply going


256
00:08:30,326 --> 00:08:31,656
to grab the sharedRecorder


257
00:08:31,656 --> 00:08:33,265
instance from RPScreenRecorder.


258
00:08:33,956 --> 00:08:35,416
From there, I'll call


259
00:08:35,416 --> 00:08:37,265
startCapture providing it a


260
00:08:37,265 --> 00:08:38,746
capture handler block and a


261
00:08:38,746 --> 00:08:39,726
completion handler block.


262
00:08:40,616 --> 00:08:41,936
Remember, I'm trying to write a


263
00:08:41,936 --> 00:08:43,645
movie file using AVAssetWriter


264
00:08:43,645 --> 00:08:44,866
with the samples we get back.


265
00:08:45,146 --> 00:08:46,406
So it's really important for me


266
00:08:46,406 --> 00:08:47,716
to know how I'm going to handle


267
00:08:47,716 --> 00:08:48,356
these samples.


268
00:08:49,006 --> 00:08:50,896
So, let's take a closer look at


269
00:08:50,976 --> 00:08:51,736
the capture handler.


270
00:08:53,876 --> 00:08:56,206
Remember, the capture handler is


271
00:08:56,206 --> 00:08:58,566
called every time ReplayKit is


272
00:08:58,566 --> 00:09:00,036
ready to hand your application


273
00:09:00,036 --> 00:09:00,966
back a sample.


274
00:09:01,616 --> 00:09:02,346
We'll provide you with a


275
00:09:02,346 --> 00:09:04,246
CMSampleBuffer ref, and


276
00:09:04,246 --> 00:09:06,526
RPSampleBufferType, and an NS


277
00:09:06,566 --> 00:09:06,836
Error.


278
00:09:08,046 --> 00:09:09,376
Since I'm using these samples to


279
00:09:09,376 --> 00:09:10,766
write a simple movie using


280
00:09:10,766 --> 00:09:12,786
AVAssetWriter, it's really


281
00:09:12,786 --> 00:09:13,926
important for me to know what


282
00:09:13,996 --> 00:09:15,456
type of samples I'm getting back


283
00:09:15,456 --> 00:09:16,136
from ReplayKit.


284
00:09:16,936 --> 00:09:18,476
Here we have a switch on


285
00:09:18,476 --> 00:09:20,996
RPSampleType that's going to do


286
00:09:20,996 --> 00:09:21,476
just that.


287
00:09:22,866 --> 00:09:24,206
If I get a sample buffer type


288
00:09:24,206 --> 00:09:25,906
that's video, I'm simply going


289
00:09:25,906 --> 00:09:27,356
to append that sample to my


290
00:09:27,356 --> 00:09:28,466
video input for my


291
00:09:28,466 --> 00:09:29,166
AVAssetWriter.


292
00:09:30,036 --> 00:09:31,396
If I get a sample buffer type


293
00:09:31,396 --> 00:09:32,956
that's audio, I'll append that


294
00:09:32,956 --> 00:09:35,266
sample to my audio input for my


295
00:09:35,266 --> 00:09:35,976
AVAssetWriter.


296
00:09:36,436 --> 00:09:38,136
And finally, if I get a sample


297
00:09:38,136 --> 00:09:39,076
buffer type that's for the


298
00:09:39,076 --> 00:09:40,576
microphone, I'll append that


299
00:09:40,576 --> 00:09:42,096
sample to my microphone input


300
00:09:42,446 --> 00:09:43,486
for my AVAssetWriter.


301
00:09:44,276 --> 00:09:46,086
And, just like that, I am now


302
00:09:46,086 --> 00:09:48,316
handling all the expected types


303
00:09:48,316 --> 00:09:49,926
of samples I'm going to get back


304
00:09:50,136 --> 00:09:50,786
from ReplayKit.


305
00:09:51,516 --> 00:09:52,906
And I'm also using them to write


306
00:09:52,906 --> 00:09:54,496
a simple movie to disc using


307
00:09:54,496 --> 00:09:55,276
AVAssetWriter.


308
00:09:56,726 --> 00:09:57,826
Let's go ahead and take a closer


309
00:09:57,826 --> 00:09:58,896
look at the completion handler.


310
00:10:02,046 --> 00:10:03,466
Just like with recording, you


311
00:10:03,466 --> 00:10:05,026
want to indicate to your users


312
00:10:05,226 --> 00:10:06,676
that a capture session has


313
00:10:06,676 --> 00:10:08,076
currently occurred or is in


314
00:10:08,076 --> 00:10:08,466
session.


315
00:10:08,826 --> 00:10:10,366
So, in our completion handler,


316
00:10:10,616 --> 00:10:11,956
we're going to simply call


317
00:10:11,956 --> 00:10:13,246
update the capture button with


318
00:10:13,246 --> 00:10:14,286
the error that we get back


319
00:10:14,496 --> 00:10:15,476
during our completion handler.


320
00:10:15,926 --> 00:10:17,426
This will allow me to update my


321
00:10:17,426 --> 00:10:19,926
UI and indicate to my users that


322
00:10:19,926 --> 00:10:21,176
a capture session has occurred.


323
00:10:21,826 --> 00:10:22,956
And that's it.


324
00:10:23,246 --> 00:10:24,166
That's all you have to do to


325
00:10:24,166 --> 00:10:24,886
start using this powerful new


326
00:10:24,886 --> 00:10:24,976
API.


327
00:10:28,096 --> 00:10:29,816
I want to take a minute to


328
00:10:29,816 --> 00:10:31,386
revisit how In-App Screen


329
00:10:31,386 --> 00:10:32,616
Capture's actually working.


330
00:10:33,076 --> 00:10:35,126
And I'd like to remind you that


331
00:10:35,126 --> 00:10:37,406
your application now has direct


332
00:10:37,406 --> 00:10:40,286
access to its own audio, video,


333
00:10:40,346 --> 00:10:41,406
and microphone content straight


334
00:10:41,406 --> 00:10:41,976
from ReplayKit.


335
00:10:45,046 --> 00:10:46,586
In our example, we use these


336
00:10:46,586 --> 00:10:48,156
samples to create a simple movie


337
00:10:48,156 --> 00:10:50,256
using AVAssetWriter, but you can


338
00:10:50,256 --> 00:10:52,056
do so much more with this.


339
00:10:52,756 --> 00:10:54,466
Now that your application has


340
00:10:54,466 --> 00:10:55,856
access to its own audio and


341
00:10:55,856 --> 00:10:58,726
video samples, you can create


342
00:10:58,726 --> 00:11:00,596
and manage videos right into


343
00:11:00,596 --> 00:11:01,416
your own application.


344
00:11:04,046 --> 00:11:05,656
You can even create a custom


345
00:11:05,656 --> 00:11:07,096
video editor and have it


346
00:11:07,096 --> 00:11:08,336
seamlessly integrated in the


347
00:11:08,336 --> 00:11:09,706
user experience for your


348
00:11:09,706 --> 00:11:10,166
application.


349
00:11:12,056 --> 00:11:14,576
Again, a goal of ReplayKit 2 was


350
00:11:14,576 --> 00:11:16,126
to bring ReplayKit to every


351
00:11:16,126 --> 00:11:17,736
application, not just gaming.


352
00:11:19,026 --> 00:11:20,716
Here, I have the same


353
00:11:20,716 --> 00:11:22,606
productivity app running on two


354
00:11:22,686 --> 00:11:23,976
different iOS devices.


355
00:11:24,546 --> 00:11:27,256
Now that I have access to my


356
00:11:27,256 --> 00:11:29,186
application's audio and video


357
00:11:29,186 --> 00:11:31,266
samples, just like with


358
00:11:31,316 --> 00:11:33,176
broadcasts, I can encode these


359
00:11:33,176 --> 00:11:34,996
samples myself, and I can send


360
00:11:34,996 --> 00:11:36,406
them to my own personal server.


361
00:11:37,656 --> 00:11:39,556
From there, I can share my


362
00:11:39,626 --> 00:11:41,366
application's Screen Capture


363
00:11:41,646 --> 00:11:43,436
with any other instance of my


364
00:11:43,436 --> 00:11:45,926
application running on any other


365
00:11:45,926 --> 00:11:46,486
device.


366
00:11:47,766 --> 00:11:49,276
This just wasn't possible


367
00:11:49,276 --> 00:11:50,936
before, but it is now with


368
00:11:50,936 --> 00:11:51,806
In-App Screen Capture.


369
00:11:53,276 --> 00:11:54,406
These are just some of the


370
00:11:54,406 --> 00:11:55,826
examples of the new user


371
00:11:55,826 --> 00:11:57,536
experiences you can create using


372
00:11:57,536 --> 00:11:58,396
In-App Screen Capture.


373
00:11:58,626 --> 00:12:00,106
We're really excited to see what


374
00:12:00,106 --> 00:12:00,916
developers are going to do with


375
00:12:00,916 --> 00:12:00,983
it.


376
00:12:05,046 --> 00:12:06,956
With ReplayKit 2, our goal was


377
00:12:06,956 --> 00:12:08,996
to bring ReplayKit to every type


378
00:12:08,996 --> 00:12:10,656
of application, not just gaming.


379
00:12:11,416 --> 00:12:13,616
And to do that, I'm really happy


380
00:12:13,616 --> 00:12:15,686
to introduce iOS Screen


381
00:12:15,686 --> 00:12:16,756
Recording and Broadcast.


382
00:12:17,836 --> 00:12:19,106
iOS Screen Recording and


383
00:12:19,106 --> 00:12:21,266
Broadcast is an amazing new user


384
00:12:21,266 --> 00:12:22,766
feature that's going to allow


385
00:12:22,766 --> 00:12:25,666
users to record and broadcast


386
00:12:25,666 --> 00:12:27,386
their entire iOS screen


387
00:12:27,386 --> 00:12:28,026
experience.


388
00:12:29,206 --> 00:12:30,206
Let's go ahead and take a look


389
00:12:30,206 --> 00:12:31,036
at how we can use this new


390
00:12:31,036 --> 00:12:31,396
feature.


391
00:12:33,456 --> 00:12:35,326
To use iOS Screen Recording and


392
00:12:35,326 --> 00:12:36,596
Broadcast, you're going to first


393
00:12:36,596 --> 00:12:37,866
need to enable the Screen


394
00:12:37,866 --> 00:12:39,446
Recording control for Control


395
00:12:39,446 --> 00:12:39,726
Center.


396
00:12:40,426 --> 00:12:41,466
To do that, we're going to jump


397
00:12:41,466 --> 00:12:43,406
right into settings, and Control


398
00:12:43,406 --> 00:12:43,686
Center.


399
00:12:44,446 --> 00:12:46,236
From there we'll be shown all


400
00:12:46,236 --> 00:12:47,756
these supported controls for


401
00:12:47,756 --> 00:12:48,326
Control Center.


402
00:12:49,136 --> 00:12:50,426
We simply add the screen


403
00:12:50,426 --> 00:12:52,566
recording control and we start


404
00:12:52,566 --> 00:12:53,136
Control Center.


405
00:12:54,196 --> 00:12:55,556
And just like that, you're now


406
00:12:55,556 --> 00:12:57,156
up and running ready to share


407
00:12:57,156 --> 00:12:58,546
your entire iOS screen


408
00:12:58,546 --> 00:12:59,186
experience.


409
00:12:59,716 --> 00:13:00,856
[applause] Thank you.


410
00:13:01,086 --> 00:13:05,016
To initiate an iOS screen


411
00:13:05,016 --> 00:13:06,386
recording, you simply tap the


412
00:13:06,386 --> 00:13:07,486
Screen Recording control.


413
00:13:08,876 --> 00:13:10,536
You are now recording your


414
00:13:10,536 --> 00:13:12,406
entire iOS screen experience.


415
00:13:13,056 --> 00:13:14,746
That status bar and our screen


416
00:13:14,746 --> 00:13:16,286
recording control will indicate


417
00:13:16,286 --> 00:13:17,376
to you that a recording is


418
00:13:17,376 --> 00:13:19,346
ongoing by showing you recording


419
00:13:19,346 --> 00:13:21,346
indicator as well as the elapsed


420
00:13:21,346 --> 00:13:22,516
time for your current recording


421
00:13:22,516 --> 00:13:22,876
session.


422
00:13:24,196 --> 00:13:26,776
To stop the recording you simply


423
00:13:26,776 --> 00:13:28,016
tap the screen recording control


424
00:13:28,016 --> 00:13:28,356
again.


425
00:13:29,826 --> 00:13:30,746
When the recording has been


426
00:13:30,746 --> 00:13:32,356
stopped, you'll be presented


427
00:13:32,466 --> 00:13:34,396
with a notification indicating


428
00:13:34,396 --> 00:13:36,026
to you that the screen recording


429
00:13:36,026 --> 00:13:37,756
you just took has now been saved


430
00:13:37,756 --> 00:13:38,906
in your Photos application.


431
00:13:39,926 --> 00:13:41,756
Tapping on this banner will take


432
00:13:41,756 --> 00:13:42,756
you straight to your Photos


433
00:13:42,756 --> 00:13:44,096
application where you can


434
00:13:44,096 --> 00:13:45,776
review, edit, or share the


435
00:13:45,776 --> 00:13:46,846
recording you just made.


436
00:13:48,996 --> 00:13:52,686
You can also 3D Touch into our


437
00:13:52,686 --> 00:13:53,776
screen recording control which


438
00:13:53,886 --> 00:13:55,536
will bring you straight to our


439
00:13:55,536 --> 00:13:57,626
expanded view where you'll have


440
00:13:57,696 --> 00:13:58,996
access to the microphone


441
00:13:58,996 --> 00:14:01,036
settings as well as the ability


442
00:14:01,036 --> 00:14:04,026
to start recording, or to stop


443
00:14:04,026 --> 00:14:04,366
recording.


444
00:14:06,716 --> 00:14:08,316
Now, let's say I've just


445
00:14:08,316 --> 00:14:09,416
downloaded a broadcast


446
00:14:09,416 --> 00:14:10,856
application that supports


447
00:14:10,856 --> 00:14:12,016
ReplayKit Live Streaming.


448
00:14:13,056 --> 00:14:14,576
And I'd like to use that


449
00:14:14,656 --> 00:14:16,916
broadcast application to share


450
00:14:16,916 --> 00:14:18,976
my entire iOS screen experience.


451
00:14:19,756 --> 00:14:20,536
Well, that's actually pretty


452
00:14:20,536 --> 00:14:21,946
simple to do, because all you


453
00:14:21,946 --> 00:14:24,216
need to do is 3D Touch into our


454
00:14:24,216 --> 00:14:25,256
screen recording control.


455
00:14:26,126 --> 00:14:27,716
You'll be taken to our expanded


456
00:14:27,716 --> 00:14:29,846
view, where all the applications


457
00:14:29,846 --> 00:14:30,836
that are installed on your


458
00:14:30,836 --> 00:14:32,456
device that currently support


459
00:14:32,456 --> 00:14:33,976
ReplayKit Live Streaming will be


460
00:14:33,976 --> 00:14:34,316
shown.


461
00:14:35,256 --> 00:14:36,846
You simply need to select the


462
00:14:36,846 --> 00:14:39,116
service you'd like to use and


463
00:14:39,256 --> 00:14:40,316
tap Start Broadcast.


464
00:14:41,876 --> 00:14:43,596
You are now broadcasting to the


465
00:14:43,596 --> 00:14:46,536
entire world your entire iOS


466
00:14:46,536 --> 00:14:47,486
screen experience.


467
00:14:48,856 --> 00:14:50,956
Just like with recording, the


468
00:14:50,956 --> 00:14:52,076
status bar in the screen


469
00:14:52,076 --> 00:14:53,996
recording control will indicate


470
00:14:53,996 --> 00:14:55,376
to you that a broadcast is


471
00:14:55,376 --> 00:14:57,116
currently in session by showing


472
00:14:57,116 --> 00:14:58,876
you the recording indicator, the


473
00:14:58,876 --> 00:15:00,266
current selected broadcast


474
00:15:00,266 --> 00:15:02,016
service, and the elapsed time


475
00:15:02,016 --> 00:15:03,046
for your current broadcast.


476
00:15:04,576 --> 00:15:05,966
To stop the broadcast, you


477
00:15:06,016 --> 00:15:07,646
simply tap the stop broadcast


478
00:15:07,646 --> 00:15:07,926
button.


479
00:15:09,126 --> 00:15:12,296
Now, you can record a video to


480
00:15:12,296 --> 00:15:13,846
teach your grandparents how to


481
00:15:13,846 --> 00:15:14,926
make that FaceTime call.


482
00:15:15,926 --> 00:15:17,636
You can even stream a video to


483
00:15:17,876 --> 00:15:19,086
teach your parents how to send


484
00:15:19,086 --> 00:15:19,996
that important email.


485
00:15:20,746 --> 00:15:22,166
Or better yet, you can now


486
00:15:22,166 --> 00:15:23,596
record a video to teach your


487
00:15:23,596 --> 00:15:25,986
kids how to find their favorite


488
00:15:25,986 --> 00:15:28,216
TV shows and movies in iTunes.


489
00:15:28,986 --> 00:15:30,926
It has never been easier to


490
00:15:30,926 --> 00:15:32,626
share your entire iOS screen


491
00:15:32,626 --> 00:15:33,226
experience.


492
00:15:33,776 --> 00:15:35,856
iOS Screen Recording and


493
00:15:35,856 --> 00:15:37,696
Broadcast creates new user


494
00:15:37,696 --> 00:15:39,766
experiences with applications


495
00:15:39,766 --> 00:15:40,656
that are already using


496
00:15:40,656 --> 00:15:41,136
ReplayKit.


497
00:15:41,536 --> 00:15:42,866
So, let's take a quick minute to


498
00:15:42,866 --> 00:15:46,886
talk about some best practices.


499
00:15:46,886 --> 00:15:47,826
iOS Screen Recording and


500
00:15:47,826 --> 00:15:49,276
Broadcast has priority when it


501
00:15:49,276 --> 00:15:50,056
comes to ReplayKit.


502
00:15:50,316 --> 00:15:51,806
So, if your application is


503
00:15:51,886 --> 00:15:53,136
currently using ReplayKit to


504
00:15:53,136 --> 00:15:55,266
record or broadcast and the user


505
00:15:55,266 --> 00:15:56,816
initiates an iOS Screen


506
00:15:56,816 --> 00:15:58,776
Recording and Broadcast, your


507
00:15:58,776 --> 00:16:00,956
application will be notified via


508
00:16:00,956 --> 00:16:02,816
RPScreenRecorderDelegate that


509
00:16:02,816 --> 00:16:03,546
your session has been


510
00:16:03,546 --> 00:16:04,106
interrupted.


511
00:16:05,136 --> 00:16:07,786
In this case, the recording will


512
00:16:07,786 --> 00:16:09,646
be discarded and you should


513
00:16:09,646 --> 00:16:11,546
update your UI and notify the


514
00:16:11,546 --> 00:16:12,326
users accordingly.


515
00:16:12,796 --> 00:16:15,016
iOS Screen Recording and


516
00:16:15,016 --> 00:16:17,096
Broadcast is an amazing feature.


517
00:16:17,506 --> 00:16:19,876
It's one that we hope users and


518
00:16:19,876 --> 00:16:21,496
developers will use to create


519
00:16:21,496 --> 00:16:23,336
new exciting iOS content.


520
00:16:23,836 --> 00:16:25,956
And to help you do that, I'd


521
00:16:25,956 --> 00:16:27,626
like to bring Alexander Subbotin


522
00:16:27,626 --> 00:16:29,026
up to the stage to talk to you a


523
00:16:29,026 --> 00:16:30,476
little bit more about how we do


524
00:16:30,476 --> 00:16:31,896
broadcasting with ReplayKit.


525
00:16:33,516 --> 00:16:35,636
[ Applause ]


526
00:16:36,136 --> 00:16:36,716
>> Thank you, Johnny.


527
00:16:38,006 --> 00:16:38,496
Good morning.


528
00:16:39,196 --> 00:16:40,696
My name is Alexander Subbotin


529
00:16:40,916 --> 00:16:43,536
and I am so excited to be here


530
00:16:43,746 --> 00:16:45,126
talk to you and share more


531
00:16:45,126 --> 00:16:46,886
details about our Live Broadcast


532
00:16:46,886 --> 00:16:46,976
API.


533
00:16:49,856 --> 00:16:52,526
ReplayKit enables applications


534
00:16:52,806 --> 00:16:54,556
to stream their content to third


535
00:16:54,556 --> 00:16:55,886
party broadcast services


536
00:16:55,956 --> 00:16:58,686
directly from your iOS and tvOS


537
00:16:59,776 --> 00:17:00,516
device.


538
00:17:00,516 --> 00:17:01,926
On iOS you can also include


539
00:17:01,926 --> 00:17:03,746
voice and video commentary using


540
00:17:03,746 --> 00:17:05,246
the microphone and the camera.


541
00:17:06,026 --> 00:17:07,286
And all this content is


542
00:17:07,326 --> 00:17:08,866
absolutely secure and


543
00:17:08,866 --> 00:17:11,016
unaccessible with a broadcast


544
00:17:11,016 --> 00:17:11,915
service that you use.


545
00:17:15,276 --> 00:17:17,326
This is a high level picture of


546
00:17:17,425 --> 00:17:19,226
how Live Broadcast really works.


547
00:17:20,386 --> 00:17:22,086
All on the left, you see a


548
00:17:22,086 --> 00:17:24,566
player who at some point wants


549
00:17:24,566 --> 00:17:27,386
to broadcast his game Tower Dash


550
00:17:27,386 --> 00:17:29,296
to Mobcrush which is a broadcast


551
00:17:29,436 --> 00:17:30,046
service.


552
00:17:31,876 --> 00:17:33,746
So Tower Dash communicates to


553
00:17:33,746 --> 00:17:35,486
the ReplayKit API to initiate


554
00:17:35,486 --> 00:17:36,146
the broadcast.


555
00:17:37,416 --> 00:17:40,026
And once that happens, ReplayKit


556
00:17:40,026 --> 00:17:41,716
will present some UI that allows


557
00:17:41,716 --> 00:17:43,086
user to ping the broadcast


558
00:17:43,086 --> 00:17:43,586
service.


559
00:17:44,006 --> 00:17:45,836
And that would be Mobcrush for


560
00:17:45,976 --> 00:17:46,556
us.


561
00:17:48,216 --> 00:17:49,696
And the broadcast starts.


562
00:17:49,696 --> 00:17:52,046
And once broadcast is running,


563
00:17:52,396 --> 00:17:55,256
ReplayKit will be providing


564
00:17:55,256 --> 00:17:57,566
audio and video samples to the


565
00:17:57,566 --> 00:17:59,366
mob crush app extension that


566
00:17:59,366 --> 00:18:02,016
directly talks to the broadcast


567
00:18:02,016 --> 00:18:03,616
service and the viewers around


568
00:18:03,616 --> 00:18:05,346
the world can watch the


569
00:18:05,346 --> 00:18:07,066
livestream online.


570
00:18:10,176 --> 00:18:12,296
This is just a picture of how


571
00:18:12,296 --> 00:18:13,376
broadcast runs.


572
00:18:13,636 --> 00:18:16,046
And the way I want to describe


573
00:18:16,046 --> 00:18:17,986
it to all of you is, I want to


574
00:18:17,986 --> 00:18:20,666
break it into parts because if


575
00:18:21,336 --> 00:18:23,396
you are a client application


576
00:18:23,396 --> 00:18:25,306
developer, game developer the


577
00:18:26,246 --> 00:18:29,236
only thing you need to do is to


578
00:18:29,236 --> 00:18:30,656
present some ViewController


579
00:18:30,656 --> 00:18:33,646
initiate broadcast and couple of


580
00:18:33,646 --> 00:18:35,066
other fairly simple steps.


581
00:18:38,196 --> 00:18:39,786
But I also know that some of you


582
00:18:39,786 --> 00:18:42,136
in this room broadcast service


583
00:18:42,136 --> 00:18:43,006
developers.


584
00:18:43,216 --> 00:18:45,216
And we are going to walk through


585
00:18:45,216 --> 00:18:47,716
the process for you and talk


586
00:18:47,716 --> 00:18:49,356
about how do you actually


587
00:18:49,356 --> 00:18:50,636
implement those extensions.


588
00:18:53,276 --> 00:18:54,656
So, starting with the client


589
00:18:54,656 --> 00:18:56,566
side and what the client


590
00:18:56,566 --> 00:18:58,186
application wants to do, for


591
00:18:59,116 --> 00:19:01,606
that we have a fairly simple API


592
00:19:02,876 --> 00:19:04,856
that really wrapped up in those


593
00:19:04,856 --> 00:19:05,676
three classes.


594
00:19:06,936 --> 00:19:07,406
There's


595
00:19:07,706 --> 00:19:09,396
BroadcastActivityViewController


596
00:19:10,216 --> 00:19:12,406
and this class is used to


597
00:19:12,406 --> 00:19:13,916
initiate a broadcast and it


598
00:19:13,916 --> 00:19:15,866
presents this built in UI where


599
00:19:15,866 --> 00:19:16,826
you select the broadcast


600
00:19:16,826 --> 00:19:17,306
service.


601
00:19:18,616 --> 00:19:22,346
RPBroadcastController allows you


602
00:19:22,946 --> 00:19:24,956
to manage the broadcast in your


603
00:19:24,956 --> 00:19:26,956
code and you would usually wire


604
00:19:26,956 --> 00:19:29,206
to some UI where user can start,


605
00:19:29,206 --> 00:19:30,916
stop, pause, or resume the


606
00:19:30,916 --> 00:19:31,826
broadcast.


607
00:19:32,286 --> 00:19:32,816
And the


608
00:19:32,816 --> 00:19:34,776
RPBroadcastControllerDelegate is


609
00:19:34,776 --> 00:19:37,216
internal and this is a dedicated


610
00:19:37,216 --> 00:19:38,326
[inaudible] part about different


611
00:19:38,326 --> 00:19:39,866
events during the broadcast.


612
00:19:39,866 --> 00:19:41,306
The broadcast can stop for some


613
00:19:41,306 --> 00:19:43,236
reason, there could be an error,


614
00:19:43,756 --> 00:19:46,566
or the broadcast extension may


615
00:19:46,566 --> 00:19:47,996
want to pass some information to


616
00:19:47,996 --> 00:19:49,626
the client app, and this is


617
00:19:49,626 --> 00:19:51,106
where the delegate tells the


618
00:19:51,106 --> 00:19:51,516
user.


619
00:19:53,476 --> 00:19:55,776
And now, I'm going to stop here


620
00:19:56,046 --> 00:19:57,176
talking about this part of the


621
00:19:57,176 --> 00:19:59,606
picture because last year,


622
00:20:00,056 --> 00:20:02,046
we covered this API in depth in


623
00:20:02,046 --> 00:20:03,636
our session Go Live with


624
00:20:03,636 --> 00:20:04,226
ReplayKit.


625
00:20:04,846 --> 00:20:06,366
So, in case you have not adopted


626
00:20:06,366 --> 00:20:09,976
the API yet, please go to the


627
00:20:09,976 --> 00:20:11,316
app and you can find the link to


628
00:20:11,316 --> 00:20:13,486
last year's session and learn


629
00:20:13,486 --> 00:20:15,106
more about that developer API.


630
00:20:19,776 --> 00:20:21,906
Now let's talk about the second


631
00:20:21,906 --> 00:20:24,686
part of the equation, you have


632
00:20:24,806 --> 00:20:26,416
developer of the broadcast


633
00:20:26,416 --> 00:20:26,946
service.


634
00:20:27,556 --> 00:20:28,686
How do you integrate your


635
00:20:28,686 --> 00:20:31,626
service so that you could stream


636
00:20:31,626 --> 00:20:33,486
the content created by all these


637
00:20:33,486 --> 00:20:35,616
players, games, and other


638
00:20:35,616 --> 00:20:36,366
applications?


639
00:20:41,496 --> 00:20:44,436
And the answer is these three


640
00:20:44,436 --> 00:20:45,086
extensions.


641
00:20:46,936 --> 00:20:49,856
The first one on the top is what


642
00:20:49,856 --> 00:20:52,136
we call Broadcast Setup


643
00:20:52,136 --> 00:20:54,306
extension, and its purpose is to


644
00:20:54,306 --> 00:20:56,146
present some UI where you can


645
00:20:56,146 --> 00:20:57,776
ask user to enter some


646
00:20:57,926 --> 00:20:59,656
information, you may want user


647
00:20:59,656 --> 00:21:02,026
to give the broadcast a


648
00:21:02,026 --> 00:21:05,076
particular name or maybe log in


649
00:21:05,076 --> 00:21:07,056
credentials or any details that


650
00:21:07,056 --> 00:21:08,716
you need fire up your broadcast.


651
00:21:09,236 --> 00:21:12,676
And the second one is called


652
00:21:13,016 --> 00:21:14,566
Broadcast Upload extension.


653
00:21:14,766 --> 00:21:16,926
And the function of this


654
00:21:16,926 --> 00:21:19,816
extension is to receive the


655
00:21:19,816 --> 00:21:21,856
media samples handed by


656
00:21:21,856 --> 00:21:25,306
ReplayKit and encode them,


657
00:21:26,396 --> 00:21:27,836
create a video stream, and


658
00:21:27,836 --> 00:21:30,526
upload to the online service.


659
00:21:31,066 --> 00:21:33,746
Each extension is a separate


660
00:21:33,746 --> 00:21:36,526
binary that is installed on your


661
00:21:36,526 --> 00:21:37,996
device along with the broadcast


662
00:21:37,996 --> 00:21:38,296
app.


663
00:21:38,666 --> 00:21:40,576
So you can install to Mobcrush,


664
00:21:40,666 --> 00:21:42,546
you also get setup extension and


665
00:21:42,546 --> 00:21:44,316
upload extension installed on


666
00:21:44,316 --> 00:21:44,926
your device.


667
00:21:44,926 --> 00:21:48,136
And each extension runs in its


668
00:21:48,136 --> 00:21:50,176
own process independently from


669
00:21:50,176 --> 00:21:51,476
Mobcrush that contains


670
00:21:51,476 --> 00:21:54,256
extensions and Tower Dash that


671
00:21:54,256 --> 00:21:55,266
initiates the broadcast.


672
00:21:55,266 --> 00:21:56,206
So usually these are three


673
00:21:56,206 --> 00:21:58,166
processes and the process of the


674
00:21:58,166 --> 00:22:01,176
containing app of the Mobcrush


675
00:22:01,176 --> 00:22:01,836
is never launched.


676
00:22:05,136 --> 00:22:06,316
And to help you get started


677
00:22:06,316 --> 00:22:07,656
developing new broadcast


678
00:22:07,656 --> 00:22:09,926
extensions, we provide very easy


679
00:22:09,926 --> 00:22:11,896
to use Xcode templates for both


680
00:22:11,896 --> 00:22:12,976
types of extensions.


681
00:22:12,976 --> 00:22:16,376
And just add two extensions to


682
00:22:16,376 --> 00:22:17,866
your Xcode project and you are


683
00:22:17,866 --> 00:22:18,546
ready to begin.


684
00:22:19,116 --> 00:22:22,846
And now let's talk about how you


685
00:22:22,846 --> 00:22:24,446
actually code all of this.


686
00:22:25,226 --> 00:22:26,426
Starting from the setup


687
00:22:26,426 --> 00:22:26,916
extension.


688
00:22:29,646 --> 00:22:31,316
As I said, the purpose of the


689
00:22:31,316 --> 00:22:32,936
setup extension is to present


690
00:22:32,936 --> 00:22:35,516
this UI for user can enter the


691
00:22:35,886 --> 00:22:36,716
name of the broadcast or


692
00:22:36,716 --> 00:22:37,316
something.


693
00:22:38,286 --> 00:22:39,716
But it also has another


694
00:22:39,836 --> 00:22:40,806
important function.


695
00:22:43,106 --> 00:22:44,586
It can get some information


696
00:22:44,586 --> 00:22:45,986
about the client application


697
00:22:45,986 --> 00:22:47,866
such as a bundleID, the name of


698
00:22:47,866 --> 00:22:49,836
the application, or the icon of


699
00:22:49,836 --> 00:22:50,686
the application.


700
00:22:51,896 --> 00:22:53,906
And it can upload this


701
00:22:53,906 --> 00:22:55,166
information to the broadcast


702
00:22:55,166 --> 00:22:56,536
service so that the broadcast


703
00:22:56,536 --> 00:22:58,166
service could build an


704
00:22:58,166 --> 00:23:00,976
experience for viewers when the


705
00:23:00,976 --> 00:23:02,496
viewer comes to the website and


706
00:23:02,496 --> 00:23:04,336
he knows here's this place where


707
00:23:04,336 --> 00:23:05,876
everyone playing Tower Dash,


708
00:23:06,106 --> 00:23:07,336
there's an icon of Tower Dash.


709
00:23:08,996 --> 00:23:12,436
And although the extension can


710
00:23:12,436 --> 00:23:14,026
request from the broadcast


711
00:23:14,026 --> 00:23:16,156
service a URL of that particular


712
00:23:16,156 --> 00:23:17,426
Live Broadcast happening on the


713
00:23:17,426 --> 00:23:20,056
website, and share it back to


714
00:23:20,056 --> 00:23:22,716
the application so that the


715
00:23:22,716 --> 00:23:24,186
player could send it to his


716
00:23:24,186 --> 00:23:25,726
friends and get more followers.


717
00:23:30,196 --> 00:23:31,436
The ViewController that


718
00:23:31,436 --> 00:23:33,176
implements this UI communicates


719
00:23:33,176 --> 00:23:34,636
to ReplayKit using property


720
00:23:34,636 --> 00:23:36,046
called extensionContext.


721
00:23:36,046 --> 00:23:38,086
And the class of this property


722
00:23:38,496 --> 00:23:39,446
is a category of


723
00:23:39,486 --> 00:23:42,126
NSExtensionContext that has two


724
00:23:42,126 --> 00:23:43,686
more functions added by


725
00:23:43,776 --> 00:23:44,906
ReplayKit.


726
00:23:45,326 --> 00:23:45,966
The first one is


727
00:23:45,966 --> 00:23:47,736
loadBroadcastingApplicationInfo


728
00:23:47,736 --> 00:23:48,646
and the second one is


729
00:23:48,826 --> 00:23:50,236
completeRequest with


730
00:23:50,236 --> 00:23:52,436
broadcastURL and setupInfo.


731
00:23:54,636 --> 00:23:57,066
The first one as I said it's


732
00:23:57,066 --> 00:23:58,696
used to get the icon and the


733
00:23:58,696 --> 00:23:59,976
name of the application, and


734
00:23:59,976 --> 00:24:01,246
here is a small code example of


735
00:24:01,246 --> 00:24:03,346
how you could do that and pass


736
00:24:03,346 --> 00:24:04,146
this information to the


737
00:24:04,146 --> 00:24:05,076
broadcast session.


738
00:24:07,486 --> 00:24:10,666
The broadcast service when it


739
00:24:10,666 --> 00:24:13,556
has this information, it can


740
00:24:13,826 --> 00:24:15,576
identify in the broadcast


741
00:24:15,576 --> 00:24:17,566
sessions, create channels, and


742
00:24:17,566 --> 00:24:20,046
build simple intuitive user


743
00:24:20,046 --> 00:24:21,916
experience of viewers experience


744
00:24:22,136 --> 00:24:22,746
like this.


745
00:24:23,156 --> 00:24:24,556
The viewer comes to the app and


746
00:24:24,556 --> 00:24:26,886
he has an icon and name of the


747
00:24:26,926 --> 00:24:27,846
application.


748
00:24:32,436 --> 00:24:34,676
So, when you're done uploading


749
00:24:34,676 --> 00:24:36,866
this icon, and already collected


750
00:24:36,866 --> 00:24:37,896
all the information that you


751
00:24:37,896 --> 00:24:40,206
need to begin the broadcast, you


752
00:24:40,206 --> 00:24:41,876
should call the second one


753
00:24:41,876 --> 00:24:44,246
called completeRequest with


754
00:24:44,246 --> 00:24:46,026
broadcastURL and setupInfo.


755
00:24:47,136 --> 00:24:48,766
The broadcastURL will be


756
00:24:48,766 --> 00:24:49,806
available to the client


757
00:24:49,806 --> 00:24:51,306
application as a property of the


758
00:24:51,306 --> 00:24:54,276
broadcast controller and the


759
00:24:54,476 --> 00:24:56,926
setupInfo it's a dictionary that


760
00:24:56,926 --> 00:24:58,586
you create inside this extension


761
00:24:58,586 --> 00:25:00,146
and all the information you


762
00:25:00,146 --> 00:25:01,836
collected from the user, you put


763
00:25:01,836 --> 00:25:03,386
it to that dictionary, and it


764
00:25:03,386 --> 00:25:04,746
will be passed to the upload


765
00:25:04,746 --> 00:25:06,266
extension when the broadcast


766
00:25:06,266 --> 00:25:06,716
starts.


767
00:25:07,096 --> 00:25:08,786
You should also always provide


768
00:25:08,786 --> 00:25:10,096
an option for the user to cancel


769
00:25:10,096 --> 00:25:11,456
broadcast, and for that you just


770
00:25:11,456 --> 00:25:12,326
use your regular old


771
00:25:12,326 --> 00:25:14,516
cancelRequest method of the


772
00:25:14,516 --> 00:25:16,066
extensionContext.


773
00:25:17,926 --> 00:25:20,266
Now, let's talk about the upload


774
00:25:20,266 --> 00:25:20,886
extension.


775
00:25:21,836 --> 00:25:24,666
As I said, it's function is to


776
00:25:25,046 --> 00:25:27,446
receive the media frames handed


777
00:25:27,446 --> 00:25:29,346
by ReplayKit in real time,


778
00:25:30,686 --> 00:25:32,616
encode them, create a video


779
00:25:32,616 --> 00:25:35,196
stream, and upload it to the


780
00:25:35,196 --> 00:25:36,126
broadcast service.


781
00:25:39,736 --> 00:25:41,786
If you create a new upload


782
00:25:41,786 --> 00:25:43,516
extension using Xcode templates,


783
00:25:43,516 --> 00:25:44,746
you will find a sampleHandler


784
00:25:44,746 --> 00:25:46,196
class like this in your Xcode


785
00:25:46,196 --> 00:25:47,986
project, and this is where you


786
00:25:47,986 --> 00:25:49,996
override functions that take


787
00:25:49,996 --> 00:25:51,076
care of events like the


788
00:25:51,076 --> 00:25:53,656
broadcast has started, stopped,


789
00:25:53,816 --> 00:25:54,846
paused, or resumed.


790
00:25:55,136 --> 00:25:57,016
And also the function called


791
00:25:57,246 --> 00:25:59,706
processSampleBuffer, now this is


792
00:25:59,706 --> 00:26:01,026
the one that you want to


793
00:26:01,026 --> 00:26:03,276
override to handle incoming


794
00:26:03,276 --> 00:26:04,146
media samples.


795
00:26:04,766 --> 00:26:06,226
This is where all the magic


796
00:26:06,226 --> 00:26:06,706
happens.


797
00:26:06,706 --> 00:26:08,126
You upload, the encoding, and


798
00:26:08,126 --> 00:26:08,856
uploading here.


799
00:26:11,556 --> 00:26:15,806
So, when the broadcast starts,


800
00:26:15,956 --> 00:26:18,826
ReplayKit notifies extension


801
00:26:18,826 --> 00:26:20,356
that it will begin providing it


802
00:26:20,356 --> 00:26:23,936
with media samples and ReplayKit


803
00:26:23,936 --> 00:26:25,516
is using the function called


804
00:26:25,516 --> 00:26:27,706
broadcastStarted with setupInfo


805
00:26:28,406 --> 00:26:28,956
of this.


806
00:26:29,026 --> 00:26:30,986
And here's a code example that


807
00:26:30,986 --> 00:26:33,146
shows you that you do receive a


808
00:26:33,146 --> 00:26:35,266
setupInfo as an argument of that


809
00:26:35,266 --> 00:26:37,166
function, and you could extract


810
00:26:37,166 --> 00:26:38,876
say, name of the broadcast from


811
00:26:38,876 --> 00:26:40,206
the dictionary and pass it to


812
00:26:40,206 --> 00:26:42,406
the broadcast session, or in


813
00:26:42,406 --> 00:26:43,796
case a broadcast has started


814
00:26:43,796 --> 00:26:45,076
from the Control Center you can


815
00:26:45,076 --> 00:26:46,566
just let know the session about


816
00:26:46,566 --> 00:26:46,936
this one.


817
00:26:47,086 --> 00:26:51,676
And now, let me zoom in on the


818
00:26:51,946 --> 00:26:53,256
processSampleBuffer function.


819
00:26:53,656 --> 00:26:55,546
ReplayKit provides extension


820
00:26:55,546 --> 00:26:56,706
with three types of the media


821
00:26:56,706 --> 00:26:57,256
samples.


822
00:26:59,456 --> 00:27:01,186
Video samples captured from the


823
00:27:01,186 --> 00:27:01,716
screen.


824
00:27:02,226 --> 00:27:03,976
Audio samples captured from the


825
00:27:03,976 --> 00:27:05,426
application, this is the audio


826
00:27:05,426 --> 00:27:07,216
your application's playing back


827
00:27:07,216 --> 00:27:07,846
right now.


828
00:27:07,846 --> 00:27:09,686
And the audio samples captured


829
00:27:09,686 --> 00:27:10,526
from the microphone.


830
00:27:10,526 --> 00:27:14,236
And you can use any technology


831
00:27:14,236 --> 00:27:16,066
to encode this media, but as a


832
00:27:16,066 --> 00:27:17,976
practical matter we provide you


833
00:27:17,976 --> 00:27:20,016
a lower level API called


834
00:27:20,016 --> 00:27:21,536
VideoToolbox.


835
00:27:21,536 --> 00:27:22,626
This is a framework that


836
00:27:22,626 --> 00:27:25,756
provides access to the hardware


837
00:27:25,756 --> 00:27:27,356
accelerated encoding and


838
00:27:27,356 --> 00:27:27,816
decoding.


839
00:27:29,826 --> 00:27:32,196
All samples go to the upload


840
00:27:32,196 --> 00:27:33,826
extension and handled by the


841
00:27:33,826 --> 00:27:35,646
function processSampleBuffer.


842
00:27:39,076 --> 00:27:40,986
And the function should encode


843
00:27:40,986 --> 00:27:42,296
and upload the media samples.


844
00:27:43,236 --> 00:27:44,566
Here in this code example, we


845
00:27:44,566 --> 00:27:45,586
show you how you could use a


846
00:27:45,586 --> 00:27:48,166
VideoToolbox to encode the video


847
00:27:48,166 --> 00:27:48,616
sample.


848
00:27:50,536 --> 00:27:51,776
In your real code, you would


849
00:27:51,776 --> 00:27:53,676
also have to implement the call


850
00:27:53,676 --> 00:27:55,346
back to receive the encoded


851
00:27:55,346 --> 00:27:56,286
data, et cetera.


852
00:27:57,126 --> 00:27:58,506
But here I would like to speak


853
00:27:58,506 --> 00:28:00,596
about the VideoToolbox, because


854
00:28:00,596 --> 00:28:02,286
it's especially important when


855
00:28:02,286 --> 00:28:03,936
you do your video processing in


856
00:28:03,936 --> 00:28:05,146
an app extension.


857
00:28:05,146 --> 00:28:07,136
Because app extensions have much


858
00:28:07,136 --> 00:28:09,306
lower memory limits compared to


859
00:28:09,306 --> 00:28:10,756
the programmed applications.


860
00:28:11,706 --> 00:28:13,086
And having access to this


861
00:28:13,146 --> 00:28:15,326
hardware accelerated video


862
00:28:15,326 --> 00:28:17,526
encoding is vital for the


863
00:28:17,526 --> 00:28:19,186
ReplayKit upload extensions.


864
00:28:19,496 --> 00:28:21,136
And this year, we have great


865
00:28:21,136 --> 00:28:24,036
news, VideoToolbox is also


866
00:28:24,036 --> 00:28:25,626
available on tvOS now.


867
00:28:25,786 --> 00:28:27,006
So, you can build highly


868
00:28:27,006 --> 00:28:28,776
optimized, very efficient


869
00:28:28,776 --> 00:28:29,956
extensions for both platforms.


870
00:28:36,046 --> 00:28:37,076
This is a high level picture of


871
00:28:37,166 --> 00:28:39,756
how Live Broadcast works, and


872
00:28:39,756 --> 00:28:41,296
who implements each part.


873
00:28:43,576 --> 00:28:44,916
Again if you are a game


874
00:28:44,916 --> 00:28:46,366
developer, client application


875
00:28:46,366 --> 00:28:48,036
developer, all you need to worry


876
00:28:48,036 --> 00:28:50,266
about is just present the


877
00:28:50,266 --> 00:28:52,546
ViewController initiate and stop


878
00:28:52,546 --> 00:28:56,686
the broadcast, and you could


879
00:28:56,686 --> 00:28:59,116
implement this API and be done


880
00:28:59,116 --> 00:29:00,786
by the end of this session.


881
00:29:01,996 --> 00:29:03,786
And if you are a broadcast


882
00:29:03,786 --> 00:29:05,666
service developer there's a


883
00:29:05,666 --> 00:29:07,036
little more work on your side.


884
00:29:07,766 --> 00:29:10,566
You need to receive the samples,


885
00:29:10,566 --> 00:29:12,766
encode them, and upload to the


886
00:29:12,766 --> 00:29:13,746
broadcast service.


887
00:29:17,576 --> 00:29:19,916
There's one more thing I need to


888
00:29:19,916 --> 00:29:21,486
go over before we finish with


889
00:29:21,486 --> 00:29:23,166
this part of the talk.


890
00:29:23,816 --> 00:29:25,496
Is that so far we've been


891
00:29:25,496 --> 00:29:28,626
assuming that all the data flows


892
00:29:28,626 --> 00:29:30,386
upwards from the application to


893
00:29:30,386 --> 00:29:32,236
the online service, but indeed


894
00:29:32,636 --> 00:29:34,336
it is also possible for the data


895
00:29:34,336 --> 00:29:36,886
to be flowing back from the


896
00:29:36,886 --> 00:29:39,706
online service to the


897
00:29:39,706 --> 00:29:40,546
application.


898
00:29:40,636 --> 00:29:42,116
And that could be some viewers


899
00:29:42,116 --> 00:29:43,826
feedback, like the comments of


900
00:29:43,826 --> 00:29:45,716
the viewers or likes, or any


901
00:29:45,716 --> 00:29:47,556
kind of data number viewers.


902
00:29:49,776 --> 00:29:51,866
And for that we provide an API


903
00:29:51,866 --> 00:29:53,776
that helps you to deliver this


904
00:29:53,776 --> 00:29:55,246
information from the extension


905
00:29:55,246 --> 00:29:55,976
to the client application.


906
00:29:58,476 --> 00:30:01,366
And you have to just put this


907
00:30:01,366 --> 00:30:02,926
data in a dictionary and use the


908
00:30:02,926 --> 00:30:03,866
function called


909
00:30:04,656 --> 00:30:06,466
updateServiceInfo from within


910
00:30:06,466 --> 00:30:07,326
your extension.


911
00:30:07,326 --> 00:30:08,626
And that dictionary would be


912
00:30:08,626 --> 00:30:10,196
available to the application as


913
00:30:10,196 --> 00:30:11,546
a property of the broadcast


914
00:30:11,546 --> 00:30:12,146
controller.


915
00:30:12,376 --> 00:30:13,596
The name of the property is


916
00:30:13,796 --> 00:30:16,536
serviceInfo and it's KVO


917
00:30:16,536 --> 00:30:19,136
observable, so you can monitor


918
00:30:19,136 --> 00:30:21,276
this and update the UI


919
00:30:21,276 --> 00:30:22,036
appropriately.


920
00:30:23,346 --> 00:30:24,756
This is it for the Live


921
00:30:25,166 --> 00:30:27,086
Broadcast API overview.


922
00:30:27,086 --> 00:30:29,916
And having all this information


923
00:30:29,916 --> 00:30:32,536
you can build absolutely new


924
00:30:32,536 --> 00:30:34,576
products, given that you also


925
00:30:34,576 --> 00:30:35,706
construct the broadcast from the


926
00:30:35,706 --> 00:30:37,116
Control Center you can build


927
00:30:37,176 --> 00:30:38,686
third parties screen mirroring


928
00:30:38,686 --> 00:30:41,796
or video share, sharing of the


929
00:30:41,796 --> 00:30:43,156
screen during the video


930
00:30:43,156 --> 00:30:43,756
conference.


931
00:30:46,086 --> 00:30:47,766
Thank you, and please come,


932
00:30:47,766 --> 00:30:48,976
please welcome Johnny back on


933
00:30:48,976 --> 00:30:49,336
stage.


934
00:30:50,516 --> 00:30:54,396
[ Applause ]


935
00:30:54,896 --> 00:30:55,996
>> Thank you, Alexander.


936
00:30:56,356 --> 00:30:58,656
So, as Alexander has just


937
00:30:58,656 --> 00:31:00,626
stated, current broadcaster


938
00:31:00,626 --> 00:31:02,606
application, you would need to


939
00:31:02,606 --> 00:31:04,346
present to the user a


940
00:31:04,346 --> 00:31:05,586
RPBroadcastActivity


941
00:31:05,586 --> 00:31:07,066
ViewController that allows them


942
00:31:07,066 --> 00:31:08,526
to choose a public service to


943
00:31:08,526 --> 00:31:09,986
broadcast your application to.


944
00:31:10,916 --> 00:31:12,966
Well, sometimes you don't want


945
00:31:12,966 --> 00:31:14,536
to broadcast your application to


946
00:31:14,536 --> 00:31:15,486
a public service.


947
00:31:15,846 --> 00:31:17,856
Sometimes, you want your


948
00:31:17,856 --> 00:31:19,506
application to use your


949
00:31:19,506 --> 00:31:20,676
broadcasting service.


950
00:31:21,326 --> 00:31:23,016
Well, with ReplayKit 2 and


951
00:31:23,016 --> 00:31:24,386
Broadcast Pairing, you can do


952
00:31:24,386 --> 00:31:24,896
just that.


953
00:31:25,766 --> 00:31:27,806
Broadcast Pairing enables you to


954
00:31:27,886 --> 00:31:29,526
fully and seamlessly integrate


955
00:31:29,526 --> 00:31:31,576
your entire streaming solution,


956
00:31:31,776 --> 00:31:32,706
all from within your own


957
00:31:32,706 --> 00:31:33,266
application.


958
00:31:35,076 --> 00:31:36,586
Here we have our budget


959
00:31:36,586 --> 00:31:38,186
application and we have our


960
00:31:38,186 --> 00:31:39,466
conference application that


961
00:31:39,466 --> 00:31:40,676
supports ReplayKit Live


962
00:31:40,676 --> 00:31:42,946
Streaming and has implemented a


963
00:31:42,946 --> 00:31:44,016
broadcast extension.


964
00:31:44,976 --> 00:31:46,996
I want our budget application to


965
00:31:46,996 --> 00:31:48,996
stream exclusively to our


966
00:31:48,996 --> 00:31:50,096
conference application's


967
00:31:50,096 --> 00:31:51,126
broadcast extension.


968
00:31:51,726 --> 00:31:53,246
So to do that, I'm going to


969
00:31:53,246 --> 00:31:54,796
initiate a broadcast pair.


970
00:31:55,646 --> 00:31:57,666
Our budget application is going


971
00:31:57,666 --> 00:31:59,126
to call load with preferred


972
00:31:59,126 --> 00:32:00,526
extension on the class


973
00:32:00,706 --> 00:32:02,526
RPActivityViewController.


974
00:32:03,646 --> 00:32:05,076
We'll get back an instance of


975
00:32:05,076 --> 00:32:06,316
RPBroadcastActivity


976
00:32:06,316 --> 00:32:07,806
ViewController much like we do


977
00:32:07,806 --> 00:32:09,016
with general broadcast


978
00:32:09,016 --> 00:32:11,626
initiation, but here is the main


979
00:32:11,626 --> 00:32:13,156
difference between Broadcast


980
00:32:13,156 --> 00:32:14,766
Pairing and general broadcast


981
00:32:14,766 --> 00:32:15,436
initiation.


982
00:32:15,916 --> 00:32:17,346
Because when you go and present


983
00:32:17,386 --> 00:32:19,586
that ViewController, instead of


984
00:32:19,586 --> 00:32:21,306
the user being presented with a


985
00:32:21,406 --> 00:32:22,486
picker that allows them to


986
00:32:22,486 --> 00:32:24,796
choose a public service, they'll


987
00:32:24,796 --> 00:32:26,726
be presented with an alert that


988
00:32:26,726 --> 00:32:28,156
indicates to them your


989
00:32:28,156 --> 00:32:30,066
application's intent to use a


990
00:32:30,116 --> 00:32:32,076
particular broadcast service.


991
00:32:32,566 --> 00:32:34,316
Here, our budget application


992
00:32:34,316 --> 00:32:35,156
wants to stream to our


993
00:32:35,156 --> 00:32:36,276
conference application's


994
00:32:36,276 --> 00:32:37,366
broadcast service.


995
00:32:38,076 --> 00:32:39,596
When a user taps accept,


996
00:32:40,536 --> 00:32:41,966
ReplayKit will immediately


997
00:32:41,966 --> 00:32:43,216
launch the paired broadcast


998
00:32:43,216 --> 00:32:45,046
extension allowing the user to


999
00:32:45,046 --> 00:32:47,166
input any information that might


1000
00:32:47,166 --> 00:32:48,446
be important to the broadcasting


1001
00:32:48,446 --> 00:32:48,796
session.


1002
00:32:50,086 --> 00:32:51,196
When the user has finished


1003
00:32:51,196 --> 00:32:52,766
inputting all their information,


1004
00:32:54,076 --> 00:32:55,696
ReplayKit will start


1005
00:32:55,906 --> 00:32:58,046
broadcasting to the paired


1006
00:32:58,046 --> 00:32:59,016
broadcast extension.


1007
00:32:59,446 --> 00:33:00,966
And just like that, our budget


1008
00:33:00,966 --> 00:33:03,046
application is now streaming


1009
00:33:03,046 --> 00:33:04,886
exclusively to its paired


1010
00:33:04,886 --> 00:33:05,836
broadcast extension.


1011
00:33:06,366 --> 00:33:08,916
Let's go ahead and take a look


1012
00:33:08,916 --> 00:33:10,196
at the API for Broadcast


1013
00:33:10,196 --> 00:33:10,406
Pairing.


1014
00:33:10,936 --> 00:33:13,876
The API for Broadcast Pairing is


1015
00:33:13,876 --> 00:33:14,546
very simple.


1016
00:33:15,506 --> 00:33:16,936
It's a new class method on


1017
00:33:16,986 --> 00:33:18,386
RPBroadcastActivity


1018
00:33:18,386 --> 00:33:19,566
ViewController called


1019
00:33:19,566 --> 00:33:21,046
load(withPreferredExtension.


1020
00:33:21,896 --> 00:33:23,256
We'll hand you back an instance


1021
00:33:23,256 --> 00:33:23,496
of


1022
00:33:23,496 --> 00:33:25,046
broadcastActivityViewController


1023
00:33:25,136 --> 00:33:26,346
that you can then present to


1024
00:33:26,346 --> 00:33:26,926
your users.


1025
00:33:28,026 --> 00:33:29,276
Let's jump in and take a look at


1026
00:33:29,276 --> 00:33:30,806
how our budget application is


1027
00:33:30,806 --> 00:33:32,066
going to imitate a broadcast


1028
00:33:32,066 --> 00:33:34,066
pair in a little bit more


1029
00:33:34,736 --> 00:33:34,886
detail.


1030
00:33:35,046 --> 00:33:36,366
Here, I have a method called


1031
00:33:36,576 --> 00:33:38,266
didPressBroadcastPairButton.


1032
00:33:38,826 --> 00:33:40,536
Inside of it, I'm simply going


1033
00:33:40,536 --> 00:33:40,816
to call


1034
00:33:40,816 --> 00:33:42,936
load(withPreferredExtension: on


1035
00:33:42,936 --> 00:33:44,756
the class RPBroadcastActivity


1036
00:33:44,756 --> 00:33:45,316
ViewController.


1037
00:33:45,976 --> 00:33:47,206
We'll go ahead and get back an


1038
00:33:47,206 --> 00:33:48,956
instance of RPBroadcastActivity


1039
00:33:48,956 --> 00:33:49,966
ViewController that.


1040
00:33:50,316 --> 00:33:52,106
When we go ahead and present the


1041
00:33:52,106 --> 00:33:54,456
user be presented with an alert


1042
00:33:54,456 --> 00:33:55,746
that indicates to them my


1043
00:33:55,746 --> 00:33:57,086
application's intent to use a


1044
00:33:57,086 --> 00:33:58,936
particular broadcasting service.


1045
00:33:59,616 --> 00:34:01,286
Once the user accepts, ReplayKit


1046
00:34:01,286 --> 00:34:02,386
will handle the rest and we'll


1047
00:34:02,536 --> 00:34:05,166
the broadcasting extension


1048
00:34:05,166 --> 00:34:05,836
that's been paired.


1049
00:34:09,235 --> 00:34:10,636
Broadcast Pairing has been


1050
00:34:10,636 --> 00:34:11,826
designed so that the


1051
00:34:11,826 --> 00:34:13,356
broadcasting app and the


1052
00:34:13,356 --> 00:34:15,136
broadcasting service are tightly


1053
00:34:15,136 --> 00:34:15,576
coupled.


1054
00:34:16,065 --> 00:34:18,576
So, initiating a Broadcast


1055
00:34:18,576 --> 00:34:20,226
Pairing session, developers are


1056
00:34:20,226 --> 00:34:22,106
going to have to supply a


1057
00:34:22,106 --> 00:34:23,596
bundleID for the broadcast


1058
00:34:23,596 --> 00:34:24,056
extension.


1059
00:34:25,085 --> 00:34:26,926
Users will also need to accept


1060
00:34:26,926 --> 00:34:28,746
the broadcasting pair through


1061
00:34:28,746 --> 00:34:30,346
the alert, which will be shown


1062
00:34:30,416 --> 00:34:32,096
every time you wish to initiate


1063
00:34:32,096 --> 00:34:33,235
a Broadcasting Pair session.


1064
00:34:35,065 --> 00:34:37,036
Broadcast Pairing allows you to


1065
00:34:37,036 --> 00:34:38,906
seamlessly integrate your entire


1066
00:34:38,906 --> 00:34:40,565
streaming solution all within


1067
00:34:40,565 --> 00:34:41,386
your own application.


1068
00:34:43,896 --> 00:34:46,005
Now, we know that creating


1069
00:34:46,005 --> 00:34:47,726
replays and Live Streams with


1070
00:34:47,726 --> 00:34:49,716
user commentary is a fantastic


1071
00:34:49,716 --> 00:34:51,746
way to get new user engagement


1072
00:34:51,746 --> 00:34:53,656
in your application as well as


1073
00:34:53,656 --> 00:34:55,036
generating a community around


1074
00:34:55,036 --> 00:34:55,835
your application.


1075
00:34:56,856 --> 00:34:57,996
That's why last year we


1076
00:34:57,996 --> 00:34:59,476
introduced front camera support


1077
00:34:59,476 --> 00:35:00,086
for ReplayKit.


1078
00:35:00,466 --> 00:35:01,846
And which is why this year we're


1079
00:35:01,846 --> 00:35:03,826
also introducing Fast Camera


1080
00:35:03,826 --> 00:35:07,246
Switching for ReplayKit 2.


1081
00:35:07,366 --> 00:35:09,256
Fast Camera Switching allows you


1082
00:35:09,256 --> 00:35:11,586
to change the camera feed in the


1083
00:35:11,586 --> 00:35:13,196
camera preview view found in


1084
00:35:13,196 --> 00:35:15,006
RPScreenRecorder to use either


1085
00:35:15,006 --> 00:35:16,606
the front camera or the rear


1086
00:35:16,606 --> 00:35:16,946
camera.


1087
00:35:18,066 --> 00:35:19,606
The camera preview view found in


1088
00:35:19,606 --> 00:35:21,406
RPScreenRecorder is a subclass


1089
00:35:21,406 --> 00:35:23,356
of UIView, so it can be added to


1090
00:35:23,356 --> 00:35:24,656
just about any application.


1091
00:35:25,936 --> 00:35:27,656
Developers are responsible for


1092
00:35:27,656 --> 00:35:29,846
UI elements that allow the user


1093
00:35:29,846 --> 00:35:31,476
to present and dismiss the


1094
00:35:31,646 --> 00:35:33,126
camera preview view, as well as


1095
00:35:33,126 --> 00:35:35,566
UI elements to allow the user to


1096
00:35:35,566 --> 00:35:36,806
switch the camera preview view.


1097
00:35:37,836 --> 00:35:39,156
Let's go ahead and take a quick


1098
00:35:39,156 --> 00:35:40,546
look at the API for Fast Camera


1099
00:35:40,546 --> 00:35:40,856
Switching.


1100
00:35:42,376 --> 00:35:43,836
The API for Fast Camera


1101
00:35:43,836 --> 00:35:45,236
Switching is really simple.


1102
00:35:45,536 --> 00:35:47,266
It consists of a new property on


1103
00:35:47,266 --> 00:35:48,756
RPScreenRecorder called


1104
00:35:48,756 --> 00:35:50,966
cameraPosition, which is used to


1105
00:35:50,966 --> 00:35:52,486
note the current cameraPosition


1106
00:35:52,536 --> 00:35:54,016
for the sharedRecorder instance.


1107
00:35:54,956 --> 00:35:56,826
CameraPosition is an enumeration


1108
00:35:56,906 --> 00:35:58,886
RPCameraPosition which includes


1109
00:35:59,076 --> 00:36:01,196
RPCameraPosition front and


1110
00:36:01,346 --> 00:36:03,256
RPCameraPosition back which is


1111
00:36:03,256 --> 00:36:04,486
used for the front and back


1112
00:36:04,486 --> 00:36:05,556
cameras respectively.


1113
00:36:06,516 --> 00:36:07,536
Let's go ahead and jump into an


1114
00:36:07,536 --> 00:36:08,756
example of how we can start


1115
00:36:08,756 --> 00:36:12,156
using Fast Camera Switching.


1116
00:36:12,296 --> 00:36:13,936
Wow, that photo looked a lot


1117
00:36:13,936 --> 00:36:15,806
better on a smaller screen.


1118
00:36:16,426 --> 00:36:17,656
Here, we have a function called


1119
00:36:17,656 --> 00:36:18,456
showPreviewView.


1120
00:36:19,036 --> 00:36:20,356
Inside we're simply going to


1121
00:36:20,356 --> 00:36:21,546
grab this sharedRecorder


1122
00:36:21,546 --> 00:36:23,256
instance on RPScreenRecorder.


1123
00:36:23,756 --> 00:36:25,056
From there, I'll grab the


1124
00:36:25,056 --> 00:36:26,826
cameraPreviewView for the RP,


1125
00:36:26,826 --> 00:36:28,296
for the sharedRecorder instance.


1126
00:36:28,696 --> 00:36:29,856
Since the sharedRecorder


1127
00:36:29,856 --> 00:36:32,126
instance and its cameraView is a


1128
00:36:32,126 --> 00:36:33,856
subclass of UI view, I'm simply


1129
00:36:33,856 --> 00:36:35,396
going to add it as a subview to


1130
00:36:35,396 --> 00:36:36,676
my view in my application.


1131
00:36:37,476 --> 00:36:38,926
And just like that, we're now


1132
00:36:38,926 --> 00:36:40,786
using the cameraPreviewView and


1133
00:36:40,786 --> 00:36:42,646
the front facing camera for our


1134
00:36:42,646 --> 00:36:43,426
video commentary.


1135
00:36:44,366 --> 00:36:45,626
Let's go ahead and take a quick


1136
00:36:45,626 --> 00:36:46,836
look at how we can use Fast


1137
00:36:46,836 --> 00:36:47,406
Camera Switching.


1138
00:36:49,156 --> 00:36:50,676
Here, I have a method called


1139
00:36:50,676 --> 00:36:52,066
didPressCameraSwitch.


1140
00:36:52,326 --> 00:36:53,786
Again, I'm simply going to grab


1141
00:36:53,786 --> 00:36:55,896
a sharedRecorder instance from


1142
00:36:55,896 --> 00:36:56,846
our RPScreenRecorder.


1143
00:36:57,526 --> 00:36:58,876
I'm really interested in knowing


1144
00:36:58,876 --> 00:37:00,326
what the current cameraPosition


1145
00:37:00,326 --> 00:37:00,576
is.


1146
00:37:00,736 --> 00:37:01,876
So, in our method here, we're


1147
00:37:02,336 --> 00:37:03,356
going to check to see what the


1148
00:37:03,356 --> 00:37:04,616
current cameraPosition is.


1149
00:37:04,896 --> 00:37:06,096
And whatever it is, I'm going to


1150
00:37:06,096 --> 00:37:07,236
switch it to its opposite.


1151
00:37:07,486 --> 00:37:09,116
So here, We notice that our


1152
00:37:09,116 --> 00:37:10,196
cameraPosition for our


1153
00:37:10,196 --> 00:37:11,456
sharedRecorder is using


1154
00:37:11,456 --> 00:37:12,996
RPCameraPosition.front.


1155
00:37:13,456 --> 00:37:14,536
I'm simply going to set the


1156
00:37:14,536 --> 00:37:16,336
shareRecorder's cameraPosition


1157
00:37:16,436 --> 00:37:18,086
to be RPCameraPosition.back.


1158
00:37:18,876 --> 00:37:20,516
And just like that, our preview


1159
00:37:20,516 --> 00:37:21,556
view is now using the rear


1160
00:37:21,556 --> 00:37:23,096
camera for its video commentary.


1161
00:37:23,936 --> 00:37:26,506
It really is just that easy and


1162
00:37:26,506 --> 00:37:28,306
it really is just that fast.


1163
00:37:29,566 --> 00:37:31,756
Fast Camera Switching will give


1164
00:37:31,756 --> 00:37:33,616
you additional tools to provide


1165
00:37:33,616 --> 00:37:35,126
your users with to create more


1166
00:37:35,126 --> 00:37:36,936
engaging video commentary in the


1167
00:37:36,936 --> 00:37:37,966
content their creating in your


1168
00:37:37,966 --> 00:37:38,546
application.


1169
00:37:40,616 --> 00:37:42,956
We have covered a lot today.


1170
00:37:43,216 --> 00:37:44,336
So let's go ahead and take a


1171
00:37:44,336 --> 00:37:45,106
minute to recap.


1172
00:37:45,656 --> 00:37:47,686
In ReplayKit 2, we introduced


1173
00:37:47,956 --> 00:37:49,676
In-App Screen Capture, which is


1174
00:37:49,676 --> 00:37:51,556
a powerful new API that's going


1175
00:37:51,556 --> 00:37:53,826
to give you direct access to


1176
00:37:53,826 --> 00:37:55,776
your application's own audio,


1177
00:37:56,186 --> 00:37:58,066
video, and microphone content


1178
00:37:58,156 --> 00:37:59,236
straight from ReplayKit.


1179
00:38:00,816 --> 00:38:02,506
With iOS Screen Recording and


1180
00:38:02,506 --> 00:38:04,736
Broadcast, users can now record


1181
00:38:04,956 --> 00:38:07,236
and broadcast their entire iOS


1182
00:38:07,236 --> 00:38:09,176
screen experience straight from


1183
00:38:09,176 --> 00:38:09,746
Control Center.


1184
00:38:11,626 --> 00:38:13,046
We introduced Broadcast Pairing


1185
00:38:13,256 --> 00:38:15,026
which enable you to seamlessly


1186
00:38:15,026 --> 00:38:16,566
integrate your entire streaming


1187
00:38:16,566 --> 00:38:17,976
solution all within your own


1188
00:38:17,976 --> 00:38:18,536
application.


1189
00:38:19,766 --> 00:38:21,756
And finally, with Fast Camera


1190
00:38:21,756 --> 00:38:23,166
Switching you now have more


1191
00:38:23,166 --> 00:38:24,996
tools to provide your users with


1192
00:38:25,126 --> 00:38:26,596
to create more engaging video


1193
00:38:26,596 --> 00:38:27,106
commentary.


1194
00:38:28,856 --> 00:38:30,256
For more information about our


1195
00:38:30,256 --> 00:38:31,546
session today, visit us at


1196
00:38:31,546 --> 00:38:33,036
developer.apple.com.


1197
00:38:33,096 --> 00:38:34,856
We are session 606.


1198
00:38:35,316 --> 00:38:36,286
We hope you have a wonderful


1199
00:38:36,356 --> 00:38:37,076
WWDC.


1200
00:38:37,396 --> 00:38:37,716
Thank you.


1201
00:38:38,516 --> 00:38:41,370
[ Applause ]

