1
00:00:06,516 --> 00:00:18,500
[ Music ]


2
00:00:22,516 --> 00:00:27,656
[ Applause ]


3
00:00:28,156 --> 00:00:29,626
>> Good afternoon and welcome


4
00:00:29,626 --> 00:00:31,736
to Game Technologies
for Apple Watch.


5
00:00:31,816 --> 00:00:35,796
I hope you've had a great WWDC
and are as excited as I am


6
00:00:35,796 --> 00:00:37,856
about all the great
new technologies.


7
00:00:39,596 --> 00:00:43,176
Gaming in iOS has captured
the imagination of users.


8
00:00:43,756 --> 00:00:47,146
As a longtime gamer, I've
marveled at the vast array


9
00:00:47,146 --> 00:00:49,376
of games created by
developers like you.


10
00:00:49,376 --> 00:00:53,866
We've heard that you're
intrigued by the potential


11
00:00:53,866 --> 00:00:58,436
for games on Apple Watch
so today we're pleased


12
00:00:58,436 --> 00:01:00,806
to present gaming for watchOS 3.


13
00:01:03,196 --> 00:01:07,266
This session covers everything
you need to create a great game


14
00:01:07,266 --> 00:01:08,836
on this most personal device.


15
00:01:09,036 --> 00:01:12,206
We will first show you
how to use various inputs


16
00:01:12,206 --> 00:01:15,106
on Apple Watch and provide
feedback to your users.


17
00:01:15,536 --> 00:01:18,586
We will then introduce you
to our graphics frameworks


18
00:01:18,636 --> 00:01:21,326
that allow you to create
vibrant 2D and 3D visuals.


19
00:01:22,276 --> 00:01:24,526
In addition we will show you
how to integrate social gaming


20
00:01:24,526 --> 00:01:26,386
and multiplayer into your app.


21
00:01:26,946 --> 00:01:29,716
And finally, we will show
you all the tools available


22
00:01:29,716 --> 00:01:31,906
to use during development,
as well as some


23
00:01:31,906 --> 00:01:33,056
of the best practices.


24
00:01:35,016 --> 00:01:38,246
watchOS provides a rich set of
tools to help you get started.


25
00:01:39,106 --> 00:01:41,656
This includes some things
you may be familiar with such


26
00:01:41,656 --> 00:01:43,686
as WatchKit and rich
notification.


27
00:01:44,966 --> 00:01:49,376
Today, however, we will
focus on what's new.


28
00:01:49,606 --> 00:01:52,776
In WatchKit we offer new
interfaces that allow you


29
00:01:52,776 --> 00:01:55,166
to create your game in Xcode
using Interface Builder.


30
00:01:55,776 --> 00:01:58,996
You can now use just your
recognizers in the Digital Crown


31
00:01:58,996 --> 00:02:00,816
for precise control
over your game.


32
00:02:01,896 --> 00:02:04,776
There's also haptic feedback
which we think is a good way


33
00:02:04,776 --> 00:02:09,656
to make your experience much
more personal and immersive.


34
00:02:09,806 --> 00:02:11,706
SpriteKit and SceneKit
are frameworks


35
00:02:11,706 --> 00:02:14,236
that let you create rich
visuals to delight your users.


36
00:02:14,666 --> 00:02:16,636
They provide good
places to add audio


37
00:02:16,776 --> 00:02:21,046
and form a simple foundation on
which you can build your game.


38
00:02:21,256 --> 00:02:25,036
Game Center provides API's
for adding social features


39
00:02:25,036 --> 00:02:27,346
to your game including
achievements,


40
00:02:27,486 --> 00:02:29,386
leaderboards, and multiplayer.


41
00:02:29,946 --> 00:02:34,006
But now let me show an
example of what's possible.


42
00:02:34,626 --> 00:02:37,346
This is a game built
with SceneKit


43
00:02:37,686 --> 00:02:39,076
which is our 3D framework.


44
00:02:40,076 --> 00:02:42,636
You start out with a collection
of blocks of various shapes.


45
00:02:43,956 --> 00:02:45,556
Your goal is to rotate them


46
00:02:45,556 --> 00:02:47,506
until they form a
familiar silhouette.


47
00:02:48,456 --> 00:02:49,826
Now let's watch this
for a moment.


48
00:02:54,756 --> 00:02:56,956
When the player, and now
that the player has won,


49
00:02:57,166 --> 00:02:59,526
we're going to play another
round and I'll talk a little bit


50
00:02:59,526 --> 00:03:02,976
about what's happening here.


51
00:03:03,546 --> 00:03:07,466
We use pan gestures to control
the left and right rotation.


52
00:03:08,076 --> 00:03:11,426
And when it is in the same plane
we'll use the Digital Crown


53
00:03:11,766 --> 00:03:13,326
to rotate it into
place for the win.


54
00:03:17,476 --> 00:03:20,066
So now that we've introduced
gaming on Apple Watch


55
00:03:20,216 --> 00:03:22,166
and showed a demo, let's dive


56
00:03:22,166 --> 00:03:24,236
into how we can make your
game interact with a user


57
00:03:24,236 --> 00:03:26,536
in a much more natural way.


58
00:03:27,106 --> 00:03:30,536
Apple Watch is our
most intimate device.


59
00:03:31,216 --> 00:03:35,406
We use it up close, usually with
one finger touching the screen


60
00:03:35,586 --> 00:03:36,776
or rotating the crown.


61
00:03:37,496 --> 00:03:39,456
You can read motion
from the accelerometer


62
00:03:39,916 --> 00:03:42,176
or you can even make it
vibrate with a haptic engine.


63
00:03:42,706 --> 00:03:46,156
When used together this
creates the sensation


64
00:03:46,216 --> 00:03:48,976
that you're using a
physical device that operates


65
00:03:49,136 --> 00:03:51,556
and responds in an
almost tangible way.


66
00:03:52,106 --> 00:03:55,276
Let's start with touch.


67
00:03:55,746 --> 00:04:00,076
On watchOS 3 we offer four
types of gestures that work well


68
00:04:00,076 --> 00:04:01,806
for different kinds of
interactions in your game.


69
00:04:01,806 --> 00:04:03,456
And I'd like to go
through those one by one.


70
00:04:03,876 --> 00:04:06,706
Tap is the simplest.


71
00:04:07,376 --> 00:04:10,126
You touch the screen and
you can select a target


72
00:04:10,126 --> 00:04:12,386
or a position to move to.


73
00:04:13,306 --> 00:04:16,815
Pan is nice scrolling
or for, you know,


74
00:04:16,815 --> 00:04:18,106
movement in a given direction.


75
00:04:20,755 --> 00:04:23,886
Swipe is good when you want
to navigate to another screen


76
00:04:24,286 --> 00:04:31,016
such as your inventory menu,
and you can swipe back to exit.


77
00:04:31,206 --> 00:04:36,096
Long press is a recommended way
to access your game's main menu.


78
00:04:36,096 --> 00:04:39,456
And here you can provide
options such as quit, resume,


79
00:04:39,456 --> 00:04:41,066
or even show Game Center stats.


80
00:04:41,596 --> 00:04:45,706
Now that we've showed
you some examples


81
00:04:45,706 --> 00:04:48,956
of the four gesture types, let's
talk about the classes we offer


82
00:04:49,166 --> 00:04:50,186
for you to adopt these.


83
00:04:50,576 --> 00:04:54,276
So for tap, we give you
WKTap Gesture Recognizer.


84
00:04:55,176 --> 00:04:58,096
For pan, WKPan Gesture
Recognizer.


85
00:04:58,716 --> 00:05:03,676
And similarly for swipe
and for long press.


86
00:05:04,286 --> 00:05:10,226
Now these gestures are available
from Interface Builder.


87
00:05:10,646 --> 00:05:13,186
When you go into the
Object Library and search


88
00:05:13,186 --> 00:05:14,986
for Gesture you'll find
the ones available.


89
00:05:16,316 --> 00:05:18,606
If you select one, you
can add it to your scene.


90
00:05:18,696 --> 00:05:24,516
And in our example we've
added tap, swipe, and pan.


91
00:05:24,736 --> 00:05:27,336
These gestures are various
options you can configure


92
00:05:27,456 --> 00:05:31,146
such making it a right swipe,
or a left, or up or down.


93
00:05:32,226 --> 00:05:34,946
These other options
configure various behavior.


94
00:05:35,766 --> 00:05:39,426
Now if you're using multiple
gestures, you should look


95
00:05:39,426 --> 00:05:41,726
at this last option
because it is important


96
00:05:41,726 --> 00:05:42,966
to specify the priority.


97
00:05:42,966 --> 00:05:45,156
And this is because
gestures can conflict.


98
00:05:45,256 --> 00:05:47,826
And what do I mean
by a conflict?


99
00:05:48,146 --> 00:05:52,366
Well, a right swipe
could also be interpreted


100
00:05:52,366 --> 00:05:55,416
as a tap followed by a pan.


101
00:05:55,776 --> 00:05:57,986
So you, as the developer,
have to decide


102
00:05:57,986 --> 00:05:59,956
which of these takes priority.


103
00:06:00,826 --> 00:06:06,166
And in a game a tap and a pan
represent interactions directly


104
00:06:06,166 --> 00:06:07,106
with your game world.


105
00:06:08,326 --> 00:06:11,416
And we'd rather have that
take priority over a swipe


106
00:06:11,416 --> 00:06:12,786
that would take you
to your inventory.


107
00:06:13,666 --> 00:06:17,506
So going back to Interface
Builder you configure this Must


108
00:06:17,506 --> 00:06:20,346
Fail First field for
in the swipe gesture.


109
00:06:20,846 --> 00:06:22,056
And you set tap and pan.


110
00:06:22,056 --> 00:06:24,216
And this reflects our priority.


111
00:06:25,206 --> 00:06:31,226
Now that we've added gestures
to our storyboard you need


112
00:06:31,226 --> 00:06:32,966
to implement an action method.


113
00:06:33,676 --> 00:06:36,256
This action method takes
the corresponding class


114
00:06:36,776 --> 00:06:40,816
and there are various properties
you can read, for example,


115
00:06:40,816 --> 00:06:42,796
location In Object and Bounds.


116
00:06:43,306 --> 00:06:44,576
And this last one, state.


117
00:06:44,576 --> 00:06:48,696
And I think state is best
shown in a code example.


118
00:06:49,606 --> 00:06:54,296
So from that puzzle app I demoed
we have a handle pan action.


119
00:06:54,296 --> 00:06:58,596
And the first thing we do is we
get the location and the bounds.


120
00:06:58,996 --> 00:07:02,656
And then we look at the state
and if we've begun the pan,


121
00:07:03,226 --> 00:07:04,636
we're going to set
up our rotation.


122
00:07:05,326 --> 00:07:09,136
If we're in the middle of a
pan, it's either change, ended,


123
00:07:09,136 --> 00:07:11,606
or cancelled, we will update it.


124
00:07:13,616 --> 00:07:15,636
So I'd like to finish
up with the gestures


125
00:07:15,916 --> 00:07:17,096
with some considerations.


126
00:07:18,036 --> 00:07:20,946
Since the user is
wearing Apple Watch each


127
00:07:20,946 --> 00:07:23,076
of these gestures
require both arms


128
00:07:23,276 --> 00:07:24,966
so it's a good idea
to keep them short.


129
00:07:25,836 --> 00:07:28,946
It's also important to
note that in comparison


130
00:07:28,946 --> 00:07:30,176
to our other devices,


131
00:07:30,756 --> 00:07:33,336
your finger is relatively
large compared to the screen.


132
00:07:34,056 --> 00:07:36,506
So please take this into
account and make sure


133
00:07:36,746 --> 00:07:39,096
that content remains visible
as you're interacting with it.


134
00:07:40,396 --> 00:07:44,586
And finally, you know, our
user interface guidelines,


135
00:07:45,596 --> 00:07:48,726
it recommends that we make
our gestures discoverable


136
00:07:48,926 --> 00:07:53,506
so you should follow them.


137
00:07:53,726 --> 00:07:56,576
Now many of you are probably
familiar with gestures


138
00:07:56,576 --> 00:07:58,696
but now let's talk about
something that is unique


139
00:07:58,696 --> 00:08:01,956
to Apple Watch and that
is the Digital Crown.


140
00:08:02,856 --> 00:08:04,916
The interface guidelines
say this is good


141
00:08:04,916 --> 00:08:06,756
for selection and scrolling.


142
00:08:07,746 --> 00:08:11,496
But as a gamer, this harkens
back to arcade machines


143
00:08:11,496 --> 00:08:14,166
with a physical dial
that can turn


144
00:08:14,166 --> 00:08:16,036
to rotate a spaceship
or move a paddle.


145
00:08:17,006 --> 00:08:21,726
Or in this example we can
move a ball back and forth


146
00:08:22,876 --> 00:08:24,766
until we decide where
we want to put it.


147
00:08:24,986 --> 00:08:30,636
And when we're ready we can
tap to drop it into position.


148
00:08:30,736 --> 00:08:32,546
Adopting the crown
is really easy.


149
00:08:33,135 --> 00:08:35,496
You access this Crown
Sequencer which is available


150
00:08:35,496 --> 00:08:37,006
on your main interface class


151
00:08:37,256 --> 00:08:39,826
and there are properties
you can read,


152
00:08:44,216 --> 00:08:47,296
such as rotation per second
or whether we're idle.


153
00:08:47,626 --> 00:08:50,146
Or you can define a delegate.


154
00:08:51,016 --> 00:08:53,136
And this delegate
provides two methods.


155
00:08:53,856 --> 00:08:56,566
crownDidRotate which
takes a rotationalDelta.


156
00:08:57,166 --> 00:09:01,496
This rotational Delta represents
the change in the crown


157
00:09:01,496 --> 00:09:03,226
since the last time
this method was called.


158
00:09:03,226 --> 00:09:06,296
And it is positive if it's
moving away from the user


159
00:09:06,656 --> 00:09:08,166
and negative if it's
moving towards you.


160
00:09:08,166 --> 00:09:09,656
And this is true
whether Apple Watch is


161
00:09:09,656 --> 00:09:12,006
on the left wrist
or the right wrist.


162
00:09:12,506 --> 00:09:18,076
When the crown stops rotating
crownDidBecomeIdle gets called.


163
00:09:18,766 --> 00:09:23,546
So to recap, we think Digital
Crown is great for games.


164
00:09:23,776 --> 00:09:25,276
It's also really easy to adopt.


165
00:09:25,586 --> 00:09:28,556
And I can't wait to see
what kind of games you make


166
00:09:28,676 --> 00:09:30,306
with this new kind of control.


167
00:09:30,906 --> 00:09:35,906
Now the accelerometer
provides a means


168
00:09:35,906 --> 00:09:38,366
to enhance other
interactions, for example,


169
00:09:38,366 --> 00:09:39,996
adding tilt on a
game of pinball,


170
00:09:40,966 --> 00:09:43,336
or to add spin to a pool shot.


171
00:09:43,726 --> 00:09:48,496
You access the accelerometer
through the CMMotionManager.


172
00:09:49,896 --> 00:09:51,416
And there are some
considerations here.


173
00:09:51,886 --> 00:09:56,266
As you probably know,
when you hold your watch


174
00:09:56,266 --> 00:09:58,516
up here the screen is visible.


175
00:09:58,516 --> 00:10:00,956
But when you lower your arm
to the side it goes blank.


176
00:10:01,256 --> 00:10:05,426
When this happens it's going to
put the app in the background.


177
00:10:06,426 --> 00:10:09,736
So as you move your wrist
the screen may go blank


178
00:10:10,406 --> 00:10:12,786
so you should account for
that in your game playing.


179
00:10:12,786 --> 00:10:16,356
And a recommendation here is
to use background processing.


180
00:10:17,306 --> 00:10:18,896
You can call the method


181
00:10:18,896 --> 00:10:22,316
in NSProcessInfo performExpiring
ActivityWithReason


182
00:10:23,806 --> 00:10:26,316
to give your game loop
some time to continue


183
00:10:26,496 --> 00:10:29,116
and give your user
a smooth experience.


184
00:10:29,266 --> 00:10:34,626
Now let's show an example
of how to use this in code.


185
00:10:35,716 --> 00:10:40,056
The first thing we need to do
is access the CMMotionManager


186
00:10:40,056 --> 00:10:43,446
singleton so we set it as a
property here to use later.


187
00:10:44,376 --> 00:10:47,546
Then in willActivate in
our main interface we ask


188
00:10:47,546 --> 00:10:48,956
if the accelerometer is visible.


189
00:10:49,636 --> 00:10:54,306
If it is, we configure things
like the Update Interval.


190
00:10:55,056 --> 00:10:56,536
And then we ask the
motionManager


191
00:10:56,536 --> 00:10:58,516
to start sending
us update events.


192
00:10:58,986 --> 00:11:03,346
We provide a block that receives
these events and we can send it


193
00:11:03,346 --> 00:11:05,356
to our game to give
the user feedback.


194
00:11:05,776 --> 00:11:09,866
When we are done we should
tell the motion Manager


195
00:11:09,866 --> 00:11:12,846
to stop sending us updates so
we can conserve battery life.


196
00:11:13,446 --> 00:11:19,366
Now to recap, we feel the
accelerometer is a good place


197
00:11:19,366 --> 00:11:20,826
to enhance other interactions.


198
00:11:21,416 --> 00:11:23,126
Be aware that the
screen may blank


199
00:11:23,256 --> 00:11:25,256
so consider using
background processing.


200
00:11:26,456 --> 00:11:29,326
And also make sure that
you use it when it's needed


201
00:11:29,476 --> 00:11:33,546
and you stop listening
when you're done.


202
00:11:33,746 --> 00:11:35,346
Now let's consider haptics.


203
00:11:36,546 --> 00:11:40,366
On iOS you could only
make your device vibrate.


204
00:11:41,736 --> 00:11:45,116
On Apple Watch you can create
a much more personal experience


205
00:11:45,116 --> 00:11:47,326
through the use of
distinct haptic patterns.


206
00:11:48,596 --> 00:11:51,426
Each haptic consists of
a vibration accompanied


207
00:11:51,426 --> 00:11:52,836
by a brief audio tone.


208
00:11:53,696 --> 00:11:55,676
By using the sense
of touch and sound,


209
00:11:56,256 --> 00:11:58,196
in addition to visual
cues on the screen,


210
00:11:59,496 --> 00:12:01,806
you can create a
much more immersive,


211
00:12:02,096 --> 00:12:04,156
interesting game experience.


212
00:12:05,616 --> 00:12:07,996
We offer nine types
of haptic feedback.


213
00:12:08,216 --> 00:12:09,716
I'd like to go through
a few examples


214
00:12:09,756 --> 00:12:11,206
of how they might be
used in your game.


215
00:12:11,626 --> 00:12:15,646
This is the notification haptic.


216
00:12:16,716 --> 00:12:19,066
These magenta triangles
represent the time


217
00:12:19,066 --> 00:12:20,696
when the haptic is vibrating.


218
00:12:21,266 --> 00:12:25,236
The waveform represents the
audio sound that's played along


219
00:12:25,236 --> 00:12:25,526
with it.


220
00:12:26,036 --> 00:12:26,966
Let's hear how this sounds.


221
00:12:27,291 --> 00:12:29,291
[ Audio Tone ]


222
00:12:29,566 --> 00:12:33,706
As this example shows, the
notification haptic is good


223
00:12:33,706 --> 00:12:36,226
for alerting people when
something important has happened


224
00:12:36,226 --> 00:12:37,376
that requires their attention.


225
00:12:37,966 --> 00:12:41,386
Now you get this for free if
you adopt rich notifications.


226
00:12:41,386 --> 00:12:42,276
But when you're in a game


227
00:12:42,276 --> 00:12:46,066
and you're exploring the world
you might use it tell the


228
00:12:46,066 --> 00:12:48,906
player, "Your village
is under attack."


229
00:12:50,916 --> 00:12:55,466
The direction haptics, up and
down, are used to alert people


230
00:12:55,466 --> 00:12:57,266
when an important
value has increased


231
00:12:57,266 --> 00:12:58,576
or decreased significantly.


232
00:12:59,366 --> 00:13:00,426
So in this example,


233
00:13:01,016 --> 00:13:02,546
[ Audio Tone ]


234
00:13:02,546 --> 00:13:03,356
Your health is low.


235
00:13:04,396 --> 00:13:05,866
Or when you drink
a health potion,


236
00:13:06,061 --> 00:13:08,061
[ Audio Tone ]


237
00:13:08,106 --> 00:13:08,806
You feel better.


238
00:13:11,616 --> 00:13:14,156
There's also a tone for
starting an activity


239
00:13:14,496 --> 00:13:19,096
such as beginning a race.


240
00:13:19,296 --> 00:13:20,976
Or when you wish to pause.


241
00:13:21,516 --> 00:13:25,816
[ Audio Tone ]


242
00:13:26,316 --> 00:13:29,106
The success haptic provides
a confirmation tone.


243
00:13:29,326 --> 00:13:30,976
And this is good for
something like --


244
00:13:31,016 --> 00:13:32,656
[ Audio Tone ]


245
00:13:32,656 --> 00:13:38,746
You won. Or if you didn't
make it, please try again.


246
00:13:40,296 --> 00:13:44,086
And as a final example, there's
a very subtle click haptic.


247
00:13:44,796 --> 00:13:46,206
This haptic is a bit special.


248
00:13:46,886 --> 00:13:49,066
As you can see, it's
much quieter


249
00:13:49,146 --> 00:13:50,356
and shorter than the others.


250
00:13:50,926 --> 00:13:53,076
In fact, I'm not sure if you'll
be able to hear the audio


251
00:13:53,376 --> 00:13:54,786
but let's give it a shot.


252
00:13:58,956 --> 00:14:02,176
This haptic provides the
sensation of a dial clicking


253
00:14:02,176 --> 00:14:04,006
at defined increments
or intervals.


254
00:14:04,556 --> 00:14:09,266
In a game this might be nice
for picking a lock on a chest


255
00:14:09,266 --> 00:14:10,506
or giving the user feedback


256
00:14:10,506 --> 00:14:11,906
that they have bumped
into an obstacle.


257
00:14:12,436 --> 00:14:18,366
Now that I've given some
examples I want to just point


258
00:14:18,366 --> 00:14:20,876
out that it's really easy to
adopt these haptic events.


259
00:14:20,916 --> 00:14:25,026
You call play and you pass
in the constant for the type


260
00:14:25,056 --> 00:14:27,636
that you desire and the
feeling you wish to evoke.


261
00:14:28,026 --> 00:14:32,436
And let me finish
up with haptics


262
00:14:32,436 --> 00:14:33,586
with some considerations.


263
00:14:34,126 --> 00:14:37,056
The Taptic Engine differs
from conventional audio


264
00:14:37,736 --> 00:14:42,706
in that you can only play
one haptic at a time.


265
00:14:42,906 --> 00:14:45,486
Also note that these
effects serve


266
00:14:45,486 --> 00:14:47,816
to draw attention
to important events.


267
00:14:48,586 --> 00:14:51,946
And their effectiveness
diminishes if you have


268
00:14:51,946 --> 00:14:53,906
to make the watch
vibrate constantly.


269
00:14:54,596 --> 00:14:56,226
So please exercise restraint


270
00:14:56,616 --> 00:14:58,816
and I think you'll have a
really awesome experience here.


271
00:14:59,446 --> 00:15:04,046
So to recap, we discussed
gesture recognizers


272
00:15:04,046 --> 00:15:05,706
and some ideas for
using them in the game.


273
00:15:06,416 --> 00:15:08,336
We showed how you can
incorporate the crown


274
00:15:08,336 --> 00:15:09,966
for compelling game play.


275
00:15:10,926 --> 00:15:13,776
We described how to incorporate
the accelerometer into your app.


276
00:15:14,326 --> 00:15:16,616
And finally, we discussed
using haptic feedback


277
00:15:16,856 --> 00:15:18,306
to make your game
more immersive.


278
00:15:19,506 --> 00:15:21,966
And now I'd like to hand
it off to Fatima to talk


279
00:15:21,966 --> 00:15:23,236
about our graphics frameworks.


280
00:15:23,486 --> 00:15:23,806
Thank you.


281
00:15:24,516 --> 00:15:31,296
[ Applause ]


282
00:15:31,796 --> 00:15:32,556
>> Thank you, Christy.


283
00:15:34,516 --> 00:15:35,256
Hi, everyone.


284
00:15:35,286 --> 00:15:37,876
My name is Fatima and in this
section we're going to talk


285
00:15:37,876 --> 00:15:40,546
about our graphics frameworks,
SpriteKit, and SceneKit


286
00:15:40,926 --> 00:15:45,696
that you can use to make really
cool games on Apple Watch.


287
00:15:46,686 --> 00:15:48,356
So what are SpriteKit
and SceneKit?


288
00:15:48,916 --> 00:15:52,276
SpriteKit and SceneKit are
Apple's 2D and 3D frameworks


289
00:15:52,276 --> 00:15:53,486
for games and graphics.


290
00:15:54,206 --> 00:15:56,056
You can use either
framework in your game


291
00:15:56,056 --> 00:15:57,806
or you can even combine
them together.


292
00:15:58,816 --> 00:16:00,686
They are easy to
use and they come


293
00:16:00,686 --> 00:16:03,536
with great integrated
tools and editors in Xcode.


294
00:16:04,376 --> 00:16:08,606
They are available
on macOS, iOS, tvOS,


295
00:16:08,606 --> 00:16:10,866
and this year they are
available on watchOS.


296
00:16:12,646 --> 00:16:17,726
On Apple Watch SpriteKit and
SceneKit are bringing you


297
00:16:17,726 --> 00:16:20,066
for the first time
GPU accelerated,


298
00:16:20,066 --> 00:16:21,076
real-time rendering.


299
00:16:21,886 --> 00:16:25,646
And this will enable you to
make really dynamic content


300
00:16:25,836 --> 00:16:27,966
and also make your games
really interactive.


301
00:16:29,536 --> 00:16:34,186
So now let's look at
some of the cool features


302
00:16:34,186 --> 00:16:35,436
that you can use on Apple Watch.


303
00:16:36,216 --> 00:16:39,366
And we're going to
start with animations.


304
00:16:41,426 --> 00:16:44,906
You can create 2D animations
in SpriteKit with SKAction.


305
00:16:45,436 --> 00:16:49,236
And you can create 3D animations
in SceneKit with SDNAction


306
00:16:49,336 --> 00:16:50,726
to make your games interactive.


307
00:16:52,536 --> 00:16:56,416
You can use actions to move,
rotate, and scale your objects


308
00:16:56,486 --> 00:17:00,126
by either applying a single
action or applying a sequence


309
00:17:00,126 --> 00:17:02,966
of actions to make more
complex animations.


310
00:17:07,486 --> 00:17:09,296
Next we have particles.


311
00:17:10,316 --> 00:17:13,646
You can create particle
simulations in both SpriteKit


312
00:17:13,646 --> 00:17:16,086
and SceneKit to add interesting
effects to your game.


313
00:17:18,486 --> 00:17:23,796
Using particle simulations you
can simulate fire, snow, rain,


314
00:17:23,836 --> 00:17:25,836
and many, many other
interesting effects.


315
00:17:29,896 --> 00:17:31,606
Next we have physics.


316
00:17:32,636 --> 00:17:36,116
Both SpriteKit and SceneKit
have integrated physics


317
00:17:36,116 --> 00:17:37,906
to make your game
even more interesting.


318
00:17:39,646 --> 00:17:41,506
You can turn on physics
for your object


319
00:17:41,736 --> 00:17:44,046
and then define properties
on them like mass,


320
00:17:44,346 --> 00:17:47,206
velocity, and friction.


321
00:17:47,676 --> 00:17:50,736
These properties will then
define how your objects move,


322
00:17:51,306 --> 00:17:54,056
how they respond to
collisions, and how they react


323
00:17:54,056 --> 00:17:55,556
to forces in your simulation.


324
00:18:00,716 --> 00:18:01,926
Next we have lighting.


325
00:18:02,086 --> 00:18:04,066
You can also add light
sources to your game.


326
00:18:05,296 --> 00:18:07,786
And lights is just
another node in your scene.


327
00:18:08,426 --> 00:18:11,356
So now you can apply actions
on it to move it around.


328
00:18:12,856 --> 00:18:16,026
And one cool feature here
that we have for lighting is


329
00:18:16,026 --> 00:18:18,756
that you can automatically
generate your normal maps


330
00:18:19,396 --> 00:18:20,576
using SKTextures.


331
00:18:27,236 --> 00:18:28,346
Next we have camera.


332
00:18:28,966 --> 00:18:32,586
Both SpriteKit and SceneKit
have a camera that you can use.


333
00:18:33,036 --> 00:18:34,666
And if you decide
to use a camera,


334
00:18:35,096 --> 00:18:38,616
then we will render the scene
from the camera's position.


335
00:18:38,806 --> 00:18:43,226
So the camera is really the
center of your viewport.


336
00:18:45,496 --> 00:18:48,906
And the camera is also just like
any other node in your scene.


337
00:18:49,466 --> 00:18:52,446
So now you can move it around
by applying actions on it.


338
00:18:56,006 --> 00:18:59,296
Next we have shapes and text.


339
00:18:59,396 --> 00:19:01,856
Text can be added as
a node to your game.


340
00:19:02,486 --> 00:19:04,976
So now it is really
easy to display text


341
00:19:05,496 --> 00:19:07,796
and also apply actions
and physics on it.


342
00:19:10,956 --> 00:19:15,146
We also have shape nodes so
now you can also create dynamic


343
00:19:15,146 --> 00:19:16,836
and geometric shapes
in your game.


344
00:19:17,436 --> 00:19:21,426
And we also have
programmable shaders


345
00:19:21,876 --> 00:19:23,546
in both SpriteKit and SceneKit.


346
00:19:23,936 --> 00:19:25,786
You can create shaders
in SpriteKit


347
00:19:26,246 --> 00:19:28,916
and you can create shader
modifiers in SceneKit


348
00:19:29,666 --> 00:19:32,326
to achieve most custom
looks to your game elements.


349
00:19:34,466 --> 00:19:38,946
So now that we have seen
some of the cool features


350
00:19:38,946 --> 00:19:42,506
that you can use, let's
see how exactly SpriteKit


351
00:19:42,506 --> 00:19:44,306
and SceneKit are
different on Apple Watch.


352
00:19:45,096 --> 00:19:49,426
And I'm going to
start with SpriteKit.


353
00:19:50,366 --> 00:19:52,916
So in SpriteKit we
have an SKView


354
00:19:53,806 --> 00:19:55,696
that we use to present
our scene.


355
00:19:57,246 --> 00:19:59,166
And our scene can
contain many nodes.


356
00:20:01,836 --> 00:20:04,746
For example, we have
SKSprite Node to add sprites.


357
00:20:05,556 --> 00:20:07,666
We have SKLight Node
to add lighting.


358
00:20:07,666 --> 00:20:10,876
And we have SKEmitter Node
to create particle systems.


359
00:20:12,506 --> 00:20:14,936
On watchOS a few
things are different.


360
00:20:16,596 --> 00:20:21,526
First, we don't have an
SKView but now we have


361
00:20:21,526 --> 00:20:24,316
to use WKInterface SKScene
to present our scene.


362
00:20:28,536 --> 00:20:32,446
We also don't have CIFilters but
we can achieve the same effects


363
00:20:32,766 --> 00:20:34,146
with using an SKShader.


364
00:20:37,076 --> 00:20:40,366
We don't have positional audio
but we can play sounds just


365
00:20:40,366 --> 00:20:44,366
like any other platform
using SKAction playSound.


366
00:20:47,166 --> 00:20:50,466
And finally, we don't
have SKVideo Node


367
00:20:50,636 --> 00:20:54,936
but we can use WKInterface
Movie to play a video.


368
00:21:00,096 --> 00:21:02,986
And this table summarizes the
differences for SpriteKit.


369
00:21:03,806 --> 00:21:06,196
For SceneKit we almost
have the same differences.


370
00:21:06,676 --> 00:21:11,006
Instead of SCNView now we have
to use WKInterface SCNScene.


371
00:21:12,906 --> 00:21:16,256
We don't have positional audio
but we do have standard audio.


372
00:21:17,256 --> 00:21:19,446
And we don't have
access to CIFilters


373
00:21:19,736 --> 00:21:23,156
but we can use Shader Modifiers
to achieve the same effects.


374
00:21:26,036 --> 00:21:27,936
So now let's walk
through an example


375
00:21:27,936 --> 00:21:30,416
of creating a game
target on Apple Watch


376
00:21:30,816 --> 00:21:32,876
for an already existing
iOS game.


377
00:21:37,526 --> 00:21:42,556
And here I am using the
SpriteKit template on iOS.


378
00:21:42,616 --> 00:21:45,686
On the left we can
see our project files


379
00:21:46,176 --> 00:21:48,076
and we can take a look
at our game scene.


380
00:21:49,076 --> 00:21:51,976
And we can see here that we are
using a really simple scene.


381
00:21:55,906 --> 00:21:58,416
We can also take a look at
our GameView Controller.


382
00:21:59,716 --> 00:22:04,786
And we can see here that
we are using an SKView


383
00:22:04,846 --> 00:22:06,006
to present our scene.


384
00:22:08,416 --> 00:22:11,856
Now to create a game target on
Apple Watch all we have to do is


385
00:22:11,936 --> 00:22:13,636
to click File, New Target.


386
00:22:14,826 --> 00:22:19,356
Choose the Game App
template under watchOS.


387
00:22:19,356 --> 00:22:25,186
Give it a name and
then press Finish.


388
00:22:25,786 --> 00:22:33,306
Now this template created two
folders for us: The app folder


389
00:22:33,306 --> 00:22:37,806
which contains our storyboard
and our extension folder


390
00:22:37,806 --> 00:22:41,146
which contains our Interface
Controller and our game scenes.


391
00:22:44,576 --> 00:22:46,876
So now let's take a
look at our storyboard.


392
00:22:47,916 --> 00:22:50,476
And this is our storyboard
and we can see


393
00:22:50,706 --> 00:22:52,796
that we have our interface
object in the middle.


394
00:22:52,796 --> 00:22:55,786
And our interface
object was selected


395
00:22:55,786 --> 00:22:57,086
from our object library.


396
00:22:57,766 --> 00:23:00,096
And here we can see
that we have the options


397
00:23:00,466 --> 00:23:02,516
between choosing
a SceneKit Scene


398
00:23:02,516 --> 00:23:05,536
to display SceneKit content
and a SpriteKit Scene


399
00:23:05,536 --> 00:23:07,466
to display SpriteKit content.


400
00:23:10,896 --> 00:23:14,786
Also our interface object
has an outlet defined


401
00:23:14,786 --> 00:23:17,116
in our Interface
Controller so we can use it


402
00:23:17,116 --> 00:23:18,196
to present our scenes.


403
00:23:19,266 --> 00:23:21,026
So let's take a look at that.


404
00:23:21,156 --> 00:23:25,326
And this is that
Interface Controller.


405
00:23:27,306 --> 00:23:29,576
And now let's take a
closer look at this code.


406
00:23:31,196 --> 00:23:34,266
And here we see that we
have our interface object


407
00:23:35,826 --> 00:23:37,856
and in awake(withContext
we can see


408
00:23:37,856 --> 00:23:39,926
that we are loading
the scene just


409
00:23:39,926 --> 00:23:41,366
like the way we do within iOS.


410
00:23:44,096 --> 00:23:46,676
And finally we are using
the interface object


411
00:23:47,026 --> 00:23:49,466
to present our scene
just like the way we did


412
00:23:49,466 --> 00:23:50,586
within an SKView in iOS.


413
00:23:54,736 --> 00:23:57,836
And these are all the steps that
you need to create a game target


414
00:23:57,836 --> 00:24:00,556
on Apple Watch for an
already existing iOS game.


415
00:24:03,056 --> 00:24:06,696
And now I'm going to
hand it over to Christy


416
00:24:06,696 --> 00:24:07,976
to go over social gaming.


417
00:24:08,516 --> 00:24:19,406
[ Applause ]


418
00:24:19,906 --> 00:24:20,686
>> Christy Warren:
Thank you, Fatima.


419
00:24:21,776 --> 00:24:23,306
Now let's talk about
Game Center.


420
00:24:24,886 --> 00:24:28,736
Today games are a lot about
encouraging engagement


421
00:24:29,106 --> 00:24:30,626
and competition with friends.


422
00:24:32,036 --> 00:24:35,436
Game Center makes it easy to
share achievements and scores


423
00:24:35,636 --> 00:24:38,596
or even play a game together.


424
00:24:38,666 --> 00:24:42,196
For multiplayer on
Apple Watch we'll focus


425
00:24:42,196 --> 00:24:43,336
on turn-based gaming.


426
00:24:44,756 --> 00:24:45,986
Turn-based gaming is something


427
00:24:45,986 --> 00:24:48,726
that we think is a really
excellent match for Apple Watch.


428
00:24:49,496 --> 00:24:54,126
It supports brief
interactions and there's no need


429
00:24:54,126 --> 00:24:55,986
for both players to be present.


430
00:24:56,686 --> 00:25:00,686
I can take a turn and when
I'm done I can pass it to you.


431
00:25:01,296 --> 00:25:02,766
You'll get a rich notification


432
00:25:03,586 --> 00:25:05,596
and you may take the
turn at your leisure.


433
00:25:05,596 --> 00:25:10,236
There are various details on how
to implement a turn-based game


434
00:25:10,306 --> 00:25:12,136
that we've talked
about in past years.


435
00:25:13,276 --> 00:25:16,846
But today we'll highlight
what is unique to Apple Watch.


436
00:25:17,796 --> 00:25:20,756
For other details please
review our documentation


437
00:25:21,546 --> 00:25:22,856
or view past sessions.


438
00:25:23,676 --> 00:25:26,256
I'd also like to call out
some great new features


439
00:25:26,256 --> 00:25:28,936
for Game Center in iOS 10 that
were covered this morning.


440
00:25:28,936 --> 00:25:30,806
And if you didn't catch that,


441
00:25:30,806 --> 00:25:32,566
I'd encourage you to
watch it on video.


442
00:25:33,186 --> 00:25:38,206
To get started on making
a turn-based game let's


443
00:25:38,206 --> 00:25:39,206
talk authentication.


444
00:25:39,816 --> 00:25:45,106
It is simpler than iOS
in that you do not need


445
00:25:45,106 --> 00:25:47,876
to enter a password
on the Apple Watch.


446
00:25:48,366 --> 00:25:51,646
When you sign in on the phone
you're automatically signed


447
00:25:51,646 --> 00:25:53,306
in on Apple Watch.


448
00:25:54,316 --> 00:25:58,056
Also if you're familiar
with Game Center for iOS,


449
00:25:58,446 --> 00:26:01,076
you may be aware of a View
Controller that you get


450
00:26:01,526 --> 00:26:03,786
and you have to present
under some circumstances.


451
00:26:03,786 --> 00:26:06,606
On iOS -- I mean on Watch
OS -- that is not necessary.


452
00:26:08,716 --> 00:26:10,526
Now let's show this in code.


453
00:26:11,496 --> 00:26:14,566
For those of you not
familiar with Game Center,


454
00:26:15,256 --> 00:26:17,616
there is the GKLocal Player
singleton which is sort


455
00:26:17,616 --> 00:26:19,126
of the focus of our API's.


456
00:26:19,496 --> 00:26:22,196
In this case we sent an
authentication Handler


457
00:26:23,156 --> 00:26:24,186
and this gets called


458
00:26:25,106 --> 00:26:28,156
when authentication
completes either successfully


459
00:26:28,156 --> 00:26:28,766
or with an error.


460
00:26:28,766 --> 00:26:31,566
If you succeed, you can
give the user feedback


461
00:26:31,566 --> 00:26:34,526
if they have signed in and
you can start game play.


462
00:26:35,206 --> 00:26:40,336
Now that we've authenticated you
can create a turn-based match.


463
00:26:40,776 --> 00:26:43,286
An important decision
here is how to match


464
00:26:43,286 --> 00:26:44,386
up with other players.


465
00:26:44,956 --> 00:26:47,606
Now the easiest way here is


466
00:26:47,606 --> 00:26:50,006
to let Game Center pick
the other player for you


467
00:26:50,006 --> 00:26:51,376
and this is called Automatch.


468
00:26:52,376 --> 00:26:55,666
Alternatively, you can load
a list of recent players


469
00:26:55,796 --> 00:26:57,256
and invite one programmatically.


470
00:26:58,576 --> 00:26:59,986
So let's start with Automatch.


471
00:27:00,646 --> 00:27:03,206
Here you create a
GKMatchRequest.


472
00:27:04,016 --> 00:27:05,826
You pass it to the method find,


473
00:27:06,366 --> 00:27:09,276
the class method find
on GKTurnBasedMatch.


474
00:27:10,006 --> 00:27:14,036
And when this returns it gives
you a new turn-based match


475
00:27:14,036 --> 00:27:15,566
instance that you can use


476
00:27:15,566 --> 00:27:17,426
to store your data
and play your game.


477
00:27:18,166 --> 00:27:21,946
Now please be aware that
this may be a new match or,


478
00:27:22,836 --> 00:27:25,596
if Norman created a
game and took his turn,


479
00:27:26,366 --> 00:27:28,736
I may be joining his
game in an open slot.


480
00:27:28,846 --> 00:27:32,846
So your game needs to take
into account both cases.


481
00:27:33,856 --> 00:27:35,326
So let's show this in code.


482
00:27:37,066 --> 00:27:40,696
You create your Match
Request and you set parameters


483
00:27:40,696 --> 00:27:45,426
such as the maximum number of
players and you call a find.


484
00:27:45,596 --> 00:27:47,486
When that succeeds you
can start your game.


485
00:27:48,296 --> 00:27:49,406
It's really that easy.


486
00:27:49,996 --> 00:27:54,026
And programmatic invites
are almost identical.


487
00:27:55,026 --> 00:27:58,516
You just set another parameter
here which is recipients


488
00:27:58,676 --> 00:28:01,276
and that is from a list of
players that you've chosen.


489
00:28:01,786 --> 00:28:06,056
However, to do this you need
to access a list of players


490
00:28:06,256 --> 00:28:07,116
who you can play with.


491
00:28:08,456 --> 00:28:10,676
So I'll show you some
sample code for this.


492
00:28:11,816 --> 00:28:14,436
This shows you how to access
the recent players list.


493
00:28:14,616 --> 00:28:17,136
And a good place to -- and
let's suppose you have a class.


494
00:28:17,916 --> 00:28:19,196
There's a player picker


495
00:28:19,196 --> 00:28:20,756
that will let you
pick from this list.


496
00:28:21,846 --> 00:28:25,326
So in awake we can call


497
00:28:25,326 --> 00:28:28,306
on the Local Player
singleton loadRecentPlayers.


498
00:28:28,876 --> 00:28:31,136
And this assumes that you've
previously authenticated


499
00:28:31,136 --> 00:28:32,346
in your main interface.


500
00:28:33,546 --> 00:28:36,836
And we call loadRecentPlayers
and you receive a list


501
00:28:36,836 --> 00:28:41,096
of players that you, you know,
you have played with recently


502
00:28:41,096 --> 00:28:45,396
on phone, or pad, or on
watch through Automatch.


503
00:28:45,646 --> 00:28:50,226
Now it's important to mention
that once we've loaded this


504
00:28:50,226 --> 00:28:54,936
and saved it away you need to
pick it, pick your opponent.


505
00:28:56,756 --> 00:28:59,246
So in order to help you
present this list of players


506
00:28:59,246 --> 00:29:01,926
and give you a head start on
building a turn-based game,


507
00:29:02,776 --> 00:29:05,126
we've created a sample
app, HelloGameKit,


508
00:29:05,126 --> 00:29:07,296
that implements the basics
of a turn-based game.


509
00:29:07,976 --> 00:29:10,096
It's also built on the
new SpriteKit template.


510
00:29:10,096 --> 00:29:12,156
And as a bonus it
will demonstrate how


511
00:29:12,156 --> 00:29:13,586
to use gesture recognizers.


512
00:29:14,416 --> 00:29:16,236
So I'd like to walk
you through a brief,


513
00:29:16,426 --> 00:29:18,146
briefly walk through
this example.


514
00:29:19,136 --> 00:29:22,696
When you launch the app it
brings up a screen like this


515
00:29:22,736 --> 00:29:23,996
and it says, "Authenticating."


516
00:29:25,106 --> 00:29:28,516
When the authenticate completes
it shows your display name


517
00:29:28,516 --> 00:29:30,246
on the top and gives you a place


518
00:29:30,246 --> 00:29:31,676
to pick your opponent
on the bottom.


519
00:29:32,866 --> 00:29:36,446
This counter in the middle
counts the various taps


520
00:29:36,446 --> 00:29:37,736
that you've made
and records them


521
00:29:37,736 --> 00:29:39,146
and saves them into
the game model.


522
00:29:39,146 --> 00:29:40,476
This is just a simple thing


523
00:29:40,796 --> 00:29:43,056
that will save an error
in turn-based match.


524
00:29:43,956 --> 00:29:46,276
Now if you've tapped Pick
an Opponent on the bottom,


525
00:29:46,856 --> 00:29:48,966
it'll bring up a player
picker that loads the list


526
00:29:48,966 --> 00:29:50,776
of recent players and
lets you pick one.


527
00:29:52,066 --> 00:29:53,826
It also gives you the
option to Automatch


528
00:29:53,826 --> 00:29:56,406
but in this case I
want to play with Alan.


529
00:29:56,976 --> 00:29:58,646
So now he's playing with me.


530
00:29:59,696 --> 00:30:03,636
If I want to access the list
of matches, I can swipe left


531
00:30:03,796 --> 00:30:05,316
and I'll get the Match Browser.


532
00:30:06,036 --> 00:30:07,946
Here I can create a
new match with Alan


533
00:30:08,546 --> 00:30:10,076
or I can pick an existing game.


534
00:30:10,176 --> 00:30:11,706
So I'm going to go
back to that game.


535
00:30:12,956 --> 00:30:16,606
And finally, I can end
my turn with a long press


536
00:30:16,936 --> 00:30:19,756
and that will pass it to Alan
and he can take his turn.


537
00:30:20,356 --> 00:30:23,076
So that's HelloGameKit.


538
00:30:23,586 --> 00:30:25,226
You can download it under
the developers' site


539
00:30:25,226 --> 00:30:26,596
under Session 612.


540
00:30:26,946 --> 00:30:29,186
Click on the Resources
tab to find that sample.


541
00:30:29,806 --> 00:30:34,376
So to recap, Game Center


542
00:30:34,376 --> 00:30:36,896
in watchOS gives you
streamlined authentication.


543
00:30:37,986 --> 00:30:42,476
It is a programmatic API but
we give you the sample app


544
00:30:42,766 --> 00:30:46,016
that has UI for all the
things that you need to do.


545
00:30:46,136 --> 00:30:48,176
So we hope that will
give you a good start.


546
00:30:49,606 --> 00:30:53,716
So with that I'd like to
hand it over to Tyler to talk


547
00:30:53,716 --> 00:30:54,976
about tools and best practices.


548
00:30:55,516 --> 00:31:01,566
[ Applause ]


549
00:31:02,066 --> 00:31:02,986
>> Thanks, Christy.


550
00:31:02,986 --> 00:31:04,026
So now you've been
introduced to some


551
00:31:04,026 --> 00:31:06,106
of the frameworks you have
available on Apple Watch.


552
00:31:06,106 --> 00:31:07,446
Let's talk about tools.


553
00:31:07,446 --> 00:31:09,126
Many of you may be
familiar with our rich set


554
00:31:09,126 --> 00:31:11,526
of game tools already
available inside of Xcode.


555
00:31:11,526 --> 00:31:12,676
And I'm happy to
tell you that all


556
00:31:12,676 --> 00:31:14,526
of these tools are
also available for you


557
00:31:14,526 --> 00:31:16,386
for your Apple Watch
development.


558
00:31:17,696 --> 00:31:20,066
This includes our scene
editor which takes the process


559
00:31:20,066 --> 00:31:22,796
of setting up and laying
out your scene from code


560
00:31:22,866 --> 00:31:25,366
and moves it into a visual
editor right inside of Xcode.


561
00:31:26,266 --> 00:31:28,486
So instead of repeatedly
compiling and iterating


562
00:31:28,486 --> 00:31:30,946
on a positioning of your
scene, you're able to see


563
00:31:30,946 --> 00:31:33,236
and manipulate exactly where
your nodes will be placed.


564
00:31:34,006 --> 00:31:35,236
And on top of that you're able


565
00:31:35,236 --> 00:31:36,686
to easily manipulate
the hierarchy


566
00:31:36,686 --> 00:31:40,296
of your scene using the scene
outline views, and create


567
00:31:40,296 --> 00:31:42,386
and modify your physics
bodies for your nodes,


568
00:31:42,456 --> 00:31:44,166
all without touching
a single line of code.


569
00:31:45,386 --> 00:31:47,726
Now our scene editors
also include a built


570
00:31:47,726 --> 00:31:48,776
in action editor.


571
00:31:49,196 --> 00:31:51,336
This lets you easily
create, modify,


572
00:31:51,336 --> 00:31:54,576
and preview complex reusable
animations right inside


573
00:31:54,576 --> 00:31:55,266
of your level.


574
00:31:55,266 --> 00:31:57,846
So whether you're creating
a complex cut scene


575
00:31:57,846 --> 00:32:00,286
to introduce your level
or a character animation


576
00:32:00,286 --> 00:32:02,536
that you'll be reusing
throughout your code,


577
00:32:02,726 --> 00:32:04,916
it's all easily possible
with this action editor.


578
00:32:05,476 --> 00:32:08,346
Now as you're developing
your game you're going


579
00:32:08,346 --> 00:32:10,736
to find the powerful particle
engines of both SpriteKit


580
00:32:10,736 --> 00:32:12,456
and SceneKit are going
to play an important role


581
00:32:12,456 --> 00:32:13,586
in bringing your game to life.


582
00:32:14,346 --> 00:32:15,646
But creating that
perfect particle


583
00:32:15,646 --> 00:32:16,936
for your game can be difficult


584
00:32:16,936 --> 00:32:18,256
if you're not able
to visualize it.


585
00:32:18,566 --> 00:32:21,726
And fortunately we provide you
a flexible tool for creating


586
00:32:21,726 --> 00:32:23,066
and visualizing your particles.


587
00:32:23,066 --> 00:32:25,806
So you're allowed access to
the huge number of properties


588
00:32:25,806 --> 00:32:27,066
that we have on our particles


589
00:32:27,066 --> 00:32:28,826
so that you can see
their effect immediately


590
00:32:28,826 --> 00:32:29,756
as they are changing them.


591
00:32:30,286 --> 00:32:33,906
And we also have tools to help
you maintain great performance


592
00:32:33,906 --> 00:32:34,666
in Apple Watch.


593
00:32:34,846 --> 00:32:36,326
This includes our
texture atlases.


594
00:32:37,036 --> 00:32:38,116
When you place your images


595
00:32:38,116 --> 00:32:40,976
within a Sprite atlas
we'll automatically rotate


596
00:32:40,976 --> 00:32:43,176
and reposition them to
form a single image.


597
00:32:43,796 --> 00:32:46,136
This reduces the number of draw
calls your game needs to make.


598
00:32:46,136 --> 00:32:47,176
And what's great about this is


599
00:32:47,176 --> 00:32:48,816
that nothing changes
for you in code.


600
00:32:49,246 --> 00:32:51,076
You're still able to
operate on these textures


601
00:32:51,076 --> 00:32:52,556
as if they're individual files.


602
00:32:53,186 --> 00:32:56,426
And when your game is running
we now provide you an SPF


603
00:32:56,426 --> 00:32:57,376
Performance Gauge.


604
00:32:57,626 --> 00:32:59,566
And at the top of the report
you're provided a number


605
00:32:59,566 --> 00:33:00,936
of real-time statistics.


606
00:33:01,486 --> 00:33:02,926
This includes your
current frame rate,


607
00:33:03,416 --> 00:33:06,346
as well as your GP
utilization to see which parts


608
00:33:06,346 --> 00:33:07,966
of your GP are being
used the most.


609
00:33:08,936 --> 00:33:11,626
And your frame time for
both the CPU and the GPU.


610
00:33:11,856 --> 00:33:13,996
And this will help indicate
whether you may CPU bound


611
00:33:14,126 --> 00:33:14,966
or GPU bound.


612
00:33:15,386 --> 00:33:18,076
Now in addition to
real-time statistics,


613
00:33:18,076 --> 00:33:20,056
we also provide you
a timeline history


614
00:33:20,446 --> 00:33:22,666
of our CPU and GPU frame times.


615
00:33:23,186 --> 00:33:24,836
And what's great about
this is that will break


616
00:33:24,836 --> 00:33:27,526
down your CPU frame times
into their individual parts


617
00:33:27,526 --> 00:33:30,046
so you're able to see
exactly how much time it spent


618
00:33:30,046 --> 00:33:31,756
rendering, or running
your update loop,


619
00:33:31,836 --> 00:33:33,446
or evaluating actions
in physics,


620
00:33:33,686 --> 00:33:35,316
as well as how much
time is spent idle.


621
00:33:36,246 --> 00:33:40,416
And when your app is paused you
can scroll through the history


622
00:33:40,416 --> 00:33:43,016
of your app's performance so
you can see how it evolves


623
00:33:43,016 --> 00:33:44,436
as you progress through
your game.


624
00:33:45,256 --> 00:33:48,476
And if there's a particular
interest you can dive deeper


625
00:33:48,476 --> 00:33:51,536
and examine details on it
and get some exact timings.


626
00:33:52,136 --> 00:33:55,996
So now there's some best
practices that you can take


627
00:33:55,996 --> 00:33:56,796
to make sure that you're going


628
00:33:56,796 --> 00:33:58,546
to get great performance
on Apple Watch.


629
00:33:59,256 --> 00:34:02,596
A great way to reduce your
battery consumption is


630
00:34:02,596 --> 00:34:04,726
to avoid updating your
scene unless you need to.


631
00:34:05,736 --> 00:34:08,726
Both SpriteKit and SceneKit will
now automatically skip rendering


632
00:34:08,726 --> 00:34:10,926
if we detect nothing has
changed within your scene.


633
00:34:11,985 --> 00:34:14,536
And if you're working with large
assets, you should load them


634
00:34:14,536 --> 00:34:15,696
at the start of your scenes


635
00:34:15,696 --> 00:34:17,396
but you don't experience
any hiccups due


636
00:34:17,396 --> 00:34:19,196
to loading those
assets throughout parts


637
00:34:19,196 --> 00:34:20,755
of your game you
expect to be fluid.


638
00:34:21,876 --> 00:34:23,876
And you should also aim for
a frame rate that's going


639
00:34:23,876 --> 00:34:26,255
to provide a consistent
experience for your users.


640
00:34:26,255 --> 00:34:27,076
And you can do this


641
00:34:27,076 --> 00:34:30,065
by explicitly setting your
interfaces' preferred frames


642
00:34:30,065 --> 00:34:30,646
per second.


643
00:34:31,826 --> 00:34:34,636
Now if you do find that you're
experiencing performance issues,


644
00:34:34,735 --> 00:34:36,735
there's a number of measures
that you can take to address it.


645
00:34:37,076 --> 00:34:39,936
And the first being to reduce
the number of particles present


646
00:34:39,936 --> 00:34:41,676
within your scene
at any given time.


647
00:34:42,636 --> 00:34:44,896
You'd also try reducing
the details of your assets


648
00:34:44,896 --> 00:34:47,706
that may be far in the
distance or scaled greatly.


649
00:34:47,706 --> 00:34:50,786
And what' great about this is
you often won't see any change


650
00:34:50,786 --> 00:34:53,286
in your game's visual fidelity
by making that reduction.


651
00:34:53,735 --> 00:34:55,186
And if you're still
seeing issues,


652
00:34:55,446 --> 00:34:57,706
try reducing the complexity
of your scene until you find


653
00:34:57,706 --> 00:35:00,196
that right balance between
performance and content.


654
00:35:00,196 --> 00:35:03,446
Now as you're developing
your game


655
00:35:03,446 --> 00:35:04,946
on Apple Watch there's a number


656
00:35:04,946 --> 00:35:06,516
of design considerations
you should keep


657
00:35:06,516 --> 00:35:07,816
in mind throughout
your development.


658
00:35:08,436 --> 00:35:11,446
Apple Watch, you shouldn't
simply be taking your iOS games


659
00:35:11,446 --> 00:35:13,036
experience and scaling it down.


660
00:35:13,036 --> 00:35:15,006
We want you to be
rethinking the experience.


661
00:35:15,456 --> 00:35:17,056
And the Apple Watch
really lends itself


662
00:35:17,056 --> 00:35:18,426
to lightweight interactions.


663
00:35:18,766 --> 00:35:20,536
Users love to be able
to see the progress


664
00:35:20,536 --> 00:35:21,646
of their game at a glance.


665
00:35:21,646 --> 00:35:23,156
And you should be
designing your interactions


666
00:35:23,156 --> 00:35:24,466
around someone who is on the go.


667
00:35:26,126 --> 00:35:28,666
In addition, you're going to
want an interface that's concise


668
00:35:28,666 --> 00:35:31,356
and simple, and should avoid
displaying too much information,


669
00:35:31,356 --> 00:35:33,226
or being too busy on
the screen at once.


670
00:35:33,766 --> 00:35:35,476
You may even want to
spread out your interactions


671
00:35:35,476 --> 00:35:37,756
across multiple screens so
that you can maximize your


672
00:35:37,756 --> 00:35:38,536
screen space.


673
00:35:39,276 --> 00:35:41,916
And if you have any
buttons or touch targets,


674
00:35:41,916 --> 00:35:42,876
make sure they're large enough


675
00:35:42,876 --> 00:35:45,066
so that your users can
comfortably interact with them.


676
00:35:45,586 --> 00:35:47,856
And you should also aim


677
00:35:47,856 --> 00:35:49,936
to maintain visual
continuity with your app.


678
00:35:50,156 --> 00:35:52,156
What that means is
transitioning from one app


679
00:35:52,156 --> 00:35:54,976
into yours should feel like
a consistent experience.


680
00:35:55,386 --> 00:35:57,376
And part of that can be
to select a color tint


681
00:35:57,376 --> 00:36:00,036
that supports your game's brand
to use throughout your game.


682
00:36:01,276 --> 00:36:04,306
Now we also recommend that
when possible you use a black


683
00:36:04,306 --> 00:36:05,326
background for your game.


684
00:36:05,326 --> 00:36:06,426
And what's great about this is


685
00:36:06,426 --> 00:36:08,066
that the black will
blend seamlessly


686
00:36:08,066 --> 00:36:10,896
with Apple Watch's bezel and
create this great illusion


687
00:36:10,896 --> 00:36:12,346
of having an edgeless screen.


688
00:36:12,916 --> 00:36:16,016
So now you've been
introduced to some


689
00:36:16,016 --> 00:36:18,596
of the awesome input you have
available on Apple Watch,


690
00:36:18,596 --> 00:36:20,586
and the great frameworks
that you can use


691
00:36:20,586 --> 00:36:23,986
to develop your game, and a rich
set of tools that you can use


692
00:36:23,986 --> 00:36:25,256
for your development workflow.


693
00:36:25,606 --> 00:36:27,396
We can't wait to see
what kind of exciting


694
00:36:27,396 --> 00:36:29,876
and fun games you're going to be
making on Apple Watch this year.


695
00:36:30,446 --> 00:36:33,886
If you'd like more information,
please visit the Developer Site


696
00:36:33,886 --> 00:36:36,566
and you can find us
under session ID 612.


697
00:36:37,156 --> 00:36:38,976
And there's been a lot
of great information


698
00:36:39,076 --> 00:36:40,806
from sessions previously
in the week.


699
00:36:40,886 --> 00:36:43,156
This includes What's
New in SpriteKit,


700
00:36:43,436 --> 00:36:46,766
What's New in Game Center,
Advances in SceneKit Rendering,


701
00:36:46,816 --> 00:36:48,866
and Quick Interaction
Techniques for watchOS.


702
00:36:49,066 --> 00:36:51,216
So if you want to dive
deeper into any of the areas


703
00:36:51,216 --> 00:36:52,176
that we touched on today,


704
00:36:52,606 --> 00:36:54,276
we highly recommend you
take a look at these.


705
00:36:55,286 --> 00:36:56,826
And thank you and I
hope you enjoy the rest


706
00:36:56,826 --> 00:36:57,536
of your conference.


707
00:36:58,516 --> 00:37:02,500
[ Applause ]

