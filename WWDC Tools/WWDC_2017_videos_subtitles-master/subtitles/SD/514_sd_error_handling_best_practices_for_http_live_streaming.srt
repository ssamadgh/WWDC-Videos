1
00:00:17,666 --> 00:00:19,886
>> Hello, welcome to our session


2
00:00:19,886 --> 00:00:21,876
on error handling best practices


3
00:00:22,156 --> 00:00:23,856
for HTTP live streaming.


4
00:00:24,596 --> 00:00:26,786
My name is Shravya Kunamalla and


5
00:00:26,786 --> 00:00:28,506
I am an AVFoundation engineer.


6
00:00:29,516 --> 00:00:30,546
Let's get started.


7
00:00:31,116 --> 00:00:34,506
There are a huge number of Apple


8
00:00:34,506 --> 00:00:36,336
developers streaming content


9
00:00:36,336 --> 00:00:38,776
using our very popular HTTP live


10
00:00:38,776 --> 00:00:39,276
streaming.


11
00:00:40,126 --> 00:00:42,066
Over the years, the usage has


12
00:00:42,066 --> 00:00:44,306
evolved into multiple complex


13
00:00:44,416 --> 00:00:45,446
delivery scenarios.


14
00:00:46,136 --> 00:00:48,046
The developers are doing live


15
00:00:48,046 --> 00:00:50,876
event broadcasts, prerecorded


16
00:00:51,466 --> 00:00:52,096
[inaudible], and in each of


17
00:00:52,096 --> 00:00:53,696
these there are possibly


18
00:00:53,696 --> 00:00:54,956
multiple different media


19
00:00:54,956 --> 00:00:56,786
selections, variance at


20
00:00:56,786 --> 00:00:58,756
different bit rates, audio and


21
00:00:58,756 --> 00:01:00,066
subtitles of different


22
00:01:00,066 --> 00:01:00,486
languages.


23
00:01:01,366 --> 00:01:02,886
The content itself might be


24
00:01:02,886 --> 00:01:04,726
protected and there could


25
00:01:04,726 --> 00:01:06,196
possibly be millions of


26
00:01:06,386 --> 00:01:08,406
simultaneous viewers subscribing


27
00:01:08,406 --> 00:01:09,136
to your streams.


28
00:01:10,116 --> 00:01:12,406
Given the enormity the system is


29
00:01:12,406 --> 00:01:13,786
bound to run into errors.


30
00:01:14,896 --> 00:01:17,026
A lot of developers and content


31
00:01:17,026 --> 00:01:19,056
providers have asked us one


32
00:01:19,056 --> 00:01:20,536
question in particular over the


33
00:01:20,536 --> 00:01:22,916
years, what is the right thing


34
00:01:22,916 --> 00:01:24,456
to do when an error happens.


35
00:01:25,526 --> 00:01:27,506
And on very popular demand, we


36
00:01:27,506 --> 00:01:29,096
present to you today the best


37
00:01:29,126 --> 00:01:31,506
practices for handling errors on


38
00:01:31,506 --> 00:01:33,666
both app and the server side.


39
00:01:34,506 --> 00:01:37,526
Most of you listening to this


40
00:01:37,526 --> 00:01:39,086
talk might already know all


41
00:01:39,086 --> 00:01:41,156
about HLS delivery, but let's


42
00:01:41,156 --> 00:01:42,456
quickly go through the overview.


43
00:01:43,516 --> 00:01:45,296
We have a master playlist, this


44
00:01:45,296 --> 00:01:47,106
consists of alternate versions


45
00:01:47,106 --> 00:01:48,326
of the same presentation.


46
00:01:49,286 --> 00:01:51,366
In this example, there is a 6


47
00:01:51,366 --> 00:01:53,236
megabit and 2 megabit video,


48
00:01:54,426 --> 00:01:55,926
English and French audio,


49
00:01:57,116 --> 00:01:58,936
English and French subtitles.


50
00:02:00,266 --> 00:02:02,056
Each of these is called a media


51
00:02:02,056 --> 00:02:04,066
playlist and has its own


52
00:02:04,066 --> 00:02:05,126
[inaudible] playlist.


53
00:02:06,616 --> 00:02:08,686
The media playlist consists of


54
00:02:08,686 --> 00:02:09,186
segments.


55
00:02:09,955 --> 00:02:11,646
In case of life, the segment


56
00:02:11,646 --> 00:02:13,326
list is updated at regular


57
00:02:13,326 --> 00:02:15,236
intervals on playlist re-fetch.


58
00:02:15,886 --> 00:02:17,376
The segments may be dropped off


59
00:02:17,376 --> 00:02:18,766
from the beginning and new


60
00:02:18,766 --> 00:02:22,376
segments are added to the end.


61
00:02:22,376 --> 00:02:24,016
In case segments are protected


62
00:02:24,266 --> 00:02:26,336
media playlist also contains


63
00:02:27,026 --> 00:02:27,146
keys.


64
00:02:28,566 --> 00:02:31,126
We also have session data, this


65
00:02:31,126 --> 00:02:33,586
can be for example titles or


66
00:02:33,806 --> 00:02:34,226
lyrics.


67
00:02:35,966 --> 00:02:37,716
These are the resources that the


68
00:02:37,716 --> 00:02:39,296
server is expected to deliver


69
00:02:39,786 --> 00:02:42,236
and the HLS client needs for


70
00:02:42,276 --> 00:02:42,736
playback.


71
00:02:44,476 --> 00:02:46,176
So, what should the server do


72
00:02:46,176 --> 00:02:48,106
when it's unable to deliver due


73
00:02:48,106 --> 00:02:48,576
to errors?


74
00:02:49,206 --> 00:02:51,056
What are the best practices for


75
00:02:51,056 --> 00:02:52,856
handling both content and


76
00:02:52,936 --> 00:02:54,506
delivery errors?


77
00:02:56,036 --> 00:02:57,946
There are a number of iOS,


78
00:02:58,116 --> 00:02:59,836
macOS, and tvOS clients


79
00:03:00,046 --> 00:03:02,196
expecting resources from server.


80
00:03:02,966 --> 00:03:04,816
The server should aim to deliver


81
00:03:04,816 --> 00:03:07,126
the resources in time and if it


82
00:03:07,216 --> 00:03:09,126
fails to do so, communicate the


83
00:03:09,186 --> 00:03:11,146
right error code to AVPlayer.


84
00:03:11,836 --> 00:03:13,826
This error code should clearly


85
00:03:13,826 --> 00:03:15,336
convey the cause of error.


86
00:03:16,066 --> 00:03:18,046
Was the request a valid request,


87
00:03:18,356 --> 00:03:20,256
was it authorized, has the


88
00:03:20,256 --> 00:03:21,596
server encountered an error?


89
00:03:21,596 --> 00:03:24,086
Is the server incapable of


90
00:03:24,086 --> 00:03:25,486
performing the request, for


91
00:03:25,486 --> 00:03:27,416
example due to an unsupported


92
00:03:27,416 --> 00:03:28,846
feature request?


93
00:03:29,946 --> 00:03:32,136
Next, let's see the recommended


94
00:03:32,136 --> 00:03:33,786
way to signal these various


95
00:03:33,786 --> 00:03:35,186
errors to AVPlayer.


96
00:03:35,766 --> 00:03:38,426
So, here is the list of failures


97
00:03:38,426 --> 00:03:40,236
and the recommended error codes.


98
00:03:41,106 --> 00:03:42,836
These are in compliance with the


99
00:03:42,916 --> 00:03:44,596
standard HTTP error codes


100
00:03:44,806 --> 00:03:47,296
specified in RFC7231.


101
00:03:48,896 --> 00:03:50,866
Segments are protected and the


102
00:03:50,866 --> 00:03:52,786
AVPlayer does not have the


103
00:03:52,786 --> 00:03:55,366
required authentication, send


104
00:03:55,366 --> 00:03:55,926
401.


105
00:03:56,436 --> 00:03:59,056
If the client doesn't have


106
00:03:59,056 --> 00:04:00,746
authorization for the content,


107
00:04:01,736 --> 00:04:03,486
send 403.


108
00:04:04,276 --> 00:04:06,076
For all temporary resource


109
00:04:06,076 --> 00:04:07,316
unavailable cases like


110
00:04:07,316 --> 00:04:10,326
[inaudible], send 404.


111
00:04:11,306 --> 00:04:14,256
For permanent resource


112
00:04:14,256 --> 00:04:17,366
unavailability, send 410.


113
00:04:18,156 --> 00:04:20,196
For all unexpected server


114
00:04:20,196 --> 00:04:21,526
conditions where no other


115
00:04:21,526 --> 00:04:23,756
specific message applies, send


116
00:04:23,756 --> 00:04:24,446
500.


117
00:04:25,836 --> 00:04:27,676
Most of the content providers or


118
00:04:27,676 --> 00:04:30,246
CDNs are cache in proxies which


119
00:04:30,246 --> 00:04:31,826
are getting the content itself


120
00:04:31,936 --> 00:04:33,286
from some encoder somewhere.


121
00:04:34,086 --> 00:04:36,186
To notify of invalid response


122
00:04:36,186 --> 00:04:38,626
from gateway, send 502.


123
00:04:39,176 --> 00:04:41,986
If server is down for


124
00:04:41,986 --> 00:04:44,536
maintenance or overloaded and is


125
00:04:44,536 --> 00:04:45,946
unavailable for any other


126
00:04:45,946 --> 00:04:48,036
reason, send 503.


127
00:04:48,486 --> 00:04:53,146
For gateway timeout, send 504.


128
00:04:53,726 --> 00:04:56,406
Now these error codes aren't


129
00:04:56,406 --> 00:04:57,666
necessarily new they have been


130
00:04:57,666 --> 00:04:58,496
around for a while.


131
00:04:59,196 --> 00:05:00,796
And if we look closer at these


132
00:05:00,796 --> 00:05:02,366
errors there is a class of


133
00:05:02,366 --> 00:05:04,516
errors that are temporary like


134
00:05:04,516 --> 00:05:06,276
resource and server temporary


135
00:05:06,326 --> 00:05:07,086
unavailability.


136
00:05:08,176 --> 00:05:10,926
Starting iOS 11 we now have a


137
00:05:10,926 --> 00:05:12,686
way to explicitly communicate


138
00:05:12,776 --> 00:05:14,116
such temporary failures to


139
00:05:14,276 --> 00:05:18,606
AVPlayer by means of GAP tag.


140
00:05:19,116 --> 00:05:21,556
We mark segments as GAP by the


141
00:05:21,556 --> 00:05:23,726
use of EXT-X-GAP tag.


142
00:05:24,656 --> 00:05:26,336
This can be applied to one or


143
00:05:26,336 --> 00:05:27,096
more segments.


144
00:05:27,666 --> 00:05:30,316
Put this in your playlist to


145
00:05:30,316 --> 00:05:32,656
indicate GAP and enable AVPlayer


146
00:05:33,136 --> 00:05:34,766
to make an informed decision.


147
00:05:35,906 --> 00:05:38,396
On seeing this tag AVPlayer will


148
00:05:38,396 --> 00:05:39,786
know that this is a temporary


149
00:05:39,786 --> 00:05:41,986
failure and may decide to go to


150
00:05:41,986 --> 00:05:43,996
a backup alternate or switch


151
00:05:43,996 --> 00:05:44,346
down.


152
00:05:45,726 --> 00:05:47,436
If nothing viable is available


153
00:05:47,776 --> 00:05:50,216
in the utmost case AVPlayer will


154
00:05:50,216 --> 00:05:52,146
play the available media until


155
00:05:52,146 --> 00:05:53,746
we recover from the error


156
00:05:53,746 --> 00:05:54,306
condition.


157
00:05:54,866 --> 00:05:58,796
So, going back to failures and


158
00:05:58,796 --> 00:05:59,466
error codes.


159
00:06:00,216 --> 00:06:01,956
For which of these errors is the


160
00:06:01,956 --> 00:06:05,336
GAP tag applicable, 404


161
00:06:05,446 --> 00:06:06,366
temporary resource


162
00:06:06,366 --> 00:06:09,836
unavailability and 503 server


163
00:06:09,836 --> 00:06:11,996
unavailability always use GAP


164
00:06:12,416 --> 00:06:12,506
tag.


165
00:06:12,816 --> 00:06:14,376
Keep in mind, this tag is


166
00:06:14,376 --> 00:06:16,816
applicable to both live and


167
00:06:16,816 --> 00:06:17,916
[inaudible] playback, but the


168
00:06:17,916 --> 00:06:20,146
use case is typically the live


169
00:06:20,216 --> 00:06:20,656
scenario.


170
00:06:21,726 --> 00:06:23,606
Next, let's move on to HLS


171
00:06:23,606 --> 00:06:25,616
specific media error cases.


172
00:06:27,146 --> 00:06:29,896
On live playback, the HLS pack


173
00:06:30,036 --> 00:06:31,636
specifies that the playlist


174
00:06:31,636 --> 00:06:34,006
needs to be updated on regular


175
00:06:34,006 --> 00:06:34,506
intervals.


176
00:06:35,616 --> 00:06:36,916
If the server is unable to


177
00:06:36,916 --> 00:06:38,596
update the playlist in time


178
00:06:38,596 --> 00:06:40,036
according to the published


179
00:06:40,036 --> 00:06:42,356
target duration, we recommend to


180
00:06:42,356 --> 00:06:44,006
communicate the stale playlist


181
00:06:44,006 --> 00:06:46,276
to AVPlayer by sending 404.


182
00:06:47,626 --> 00:06:49,526
Now returning stale playlist


183
00:06:49,526 --> 00:06:51,746
itself is fine, but that leaves


184
00:06:51,816 --> 00:06:53,146
the onus of identifying the


185
00:06:53,146 --> 00:06:55,296
stale playlist on the AVPlayer


186
00:06:55,806 --> 00:06:56,926
which it does eventually.


187
00:06:57,696 --> 00:07:00,176
And on identifying that AVPlayer


188
00:07:00,176 --> 00:07:01,986
will try to recover by means of


189
00:07:02,106 --> 00:07:03,946
switching to other available


190
00:07:03,946 --> 00:07:04,666
[inaudible] or retries.


191
00:07:06,016 --> 00:07:07,526
This may be too late in some


192
00:07:07,526 --> 00:07:09,286
cases leading to stalls.


193
00:07:10,616 --> 00:07:12,576
Sending 404 instead will


194
00:07:12,576 --> 00:07:14,146
communicate the stale playlist


195
00:07:14,146 --> 00:07:16,156
to AVPlayer much more quickly.


196
00:07:17,226 --> 00:07:19,436
There is another advantage here,


197
00:07:19,666 --> 00:07:21,316
it would also give immediate


198
00:07:21,316 --> 00:07:23,026
notification of stale playlist


199
00:07:23,336 --> 00:07:26,426
to any new AVPlayer joining the


200
00:07:28,456 --> 00:07:28,616
stream.


201
00:07:28,786 --> 00:07:30,516
For unsupported features for


202
00:07:30,516 --> 00:07:32,076
example, BYTE-RANGE not


203
00:07:32,076 --> 00:07:34,146
supported, send 501.


204
00:07:35,576 --> 00:07:37,246
For all authentication failures,


205
00:07:38,106 --> 00:07:38,926
send 401.


206
00:07:40,446 --> 00:07:45,686
Next, an example going through a


207
00:07:45,746 --> 00:07:47,356
typical live playback scenario.


208
00:07:48,016 --> 00:07:49,436
Let's say we have two video


209
00:07:49,436 --> 00:07:51,876
variants, one of 6 megabit and


210
00:07:51,876 --> 00:07:52,836
one of 2 megabit.


211
00:07:53,626 --> 00:07:55,226
We also have the responding


212
00:07:55,226 --> 00:07:57,276
encoder packagers one providing


213
00:07:57,276 --> 00:07:59,136
6-megabit content and another


214
00:07:59,136 --> 00:08:00,736
providing 2-megabit content to


215
00:08:00,736 --> 00:08:01,326
our server.


216
00:08:01,916 --> 00:08:03,636
And the server is distributing


217
00:08:03,636 --> 00:08:05,566
this content to the HLS client


218
00:08:05,746 --> 00:08:06,586
requesting it.


219
00:08:07,256 --> 00:08:08,246
Let's say the [inaudible]


220
00:08:08,246 --> 00:08:09,926
bandwidth of the app is good


221
00:08:09,926 --> 00:08:11,906
enough to handle the 6-megabit


222
00:08:11,906 --> 00:08:14,126
variant it goes ahead and


223
00:08:14,166 --> 00:08:15,696
fetches the 6 megabit media


224
00:08:15,696 --> 00:08:16,166
playlist.


225
00:08:16,726 --> 00:08:19,076
Gets the response back and moves


226
00:08:19,076 --> 00:08:20,636
on to fetch the first segment,


227
00:08:20,916 --> 00:08:21,486
segment one.


228
00:08:22,316 --> 00:08:23,646
Everything seems to be good


229
00:08:23,646 --> 00:08:24,796
until now.


230
00:08:25,396 --> 00:08:27,796
Then suddenly the 6-megabit


231
00:08:27,796 --> 00:08:30,016
encoder or packager is down with


232
00:08:30,106 --> 00:08:31,446
substantial downtime for


233
00:08:31,446 --> 00:08:31,946
example.


234
00:08:33,126 --> 00:08:34,826
The next time AVPlayer


235
00:08:34,826 --> 00:08:36,635
re-fetches the playlist the


236
00:08:36,726 --> 00:08:38,316
server now has a way to


237
00:08:38,316 --> 00:08:39,846
communicate the failure to it,


238
00:08:40,586 --> 00:08:41,166
GAP tag.


239
00:08:41,916 --> 00:08:44,015
For this re-fetch request, we


240
00:08:44,015 --> 00:08:45,876
recommend that server should now


241
00:08:45,956 --> 00:08:48,906
send 200 okay and the subsequent


242
00:08:48,906 --> 00:08:50,366
segments in the media playlist


243
00:08:50,736 --> 00:08:51,906
should be marked as GAP.


244
00:08:53,296 --> 00:08:55,806
AVPlayer on seeing this GAP tag


245
00:08:56,146 --> 00:08:57,596
switches down to 2-megabit


246
00:08:57,596 --> 00:09:01,446
variant media playlist and moves


247
00:09:01,496 --> 00:09:03,096
on to fetch the next segment,


248
00:09:03,426 --> 00:09:05,286
segment two, from the 2-megabit


249
00:09:05,286 --> 00:09:05,696
variant.


250
00:09:07,386 --> 00:09:09,436
With this we have switched down


251
00:09:09,436 --> 00:09:12,706
smoothly and in time to avoid a


252
00:09:13,656 --> 00:09:13,776
stall.


253
00:09:14,356 --> 00:09:16,356
For backward compatibility for


254
00:09:16,356 --> 00:09:18,376
any segment request marked as


255
00:09:18,466 --> 00:09:20,666
GAP the server should still send


256
00:09:20,666 --> 00:09:21,316
404.


257
00:09:26,046 --> 00:09:27,876
Next, let's move on to failover.


258
00:09:28,736 --> 00:09:29,776
What is a failover?


259
00:09:30,736 --> 00:09:32,366
It is a method of protecting the


260
00:09:32,416 --> 00:09:34,656
system from failure in which a


261
00:09:34,966 --> 00:09:37,476
standby or backup system takes


262
00:09:37,476 --> 00:09:39,306
over when the main system fails.


263
00:09:40,006 --> 00:09:43,206
So, what failover can our server


264
00:09:43,896 --> 00:09:43,986
have?


265
00:09:44,406 --> 00:09:46,566
One viable approach is to have


266
00:09:46,566 --> 00:09:48,616
redundant variants on backup


267
00:09:48,656 --> 00:09:51,546
servers, have variants on


268
00:09:51,546 --> 00:09:53,266
different servers with same bit


269
00:09:53,266 --> 00:09:55,086
rate an include them in the


270
00:09:55,086 --> 00:09:55,926
master playlist.


271
00:09:56,726 --> 00:09:58,686
This will give the AVPlayer the


272
00:09:58,686 --> 00:10:00,436
ability to smoothly switch over


273
00:10:00,716 --> 00:10:01,576
in case of error.


274
00:10:02,976 --> 00:10:04,896
Backup alternates will be tried


275
00:10:04,896 --> 00:10:06,546
first before switching down.


276
00:10:07,056 --> 00:10:10,576
If the server wants to


277
00:10:10,576 --> 00:10:12,916
explicitly trigger a failover it


278
00:10:12,916 --> 00:10:15,176
should send 404 to okay list


279
00:10:15,176 --> 00:10:15,636
request.


280
00:10:19,276 --> 00:10:22,356
To summarize, always notify the


281
00:10:22,356 --> 00:10:24,546
HLS client of error with correct


282
00:10:24,546 --> 00:10:25,256
error code.


283
00:10:26,446 --> 00:10:28,186
Have backup playlists on


284
00:10:28,186 --> 00:10:30,206
different servers to failover in


285
00:10:30,206 --> 00:10:32,216
case of server failures, having


286
00:10:32,216 --> 00:10:33,446
some redundancy is good.


287
00:10:33,936 --> 00:10:37,356
Send 501 for unsupported


288
00:10:37,356 --> 00:10:37,926
features.


289
00:10:38,466 --> 00:10:42,336
And in the case of live, update


290
00:10:42,336 --> 00:10:43,826
the playlist in time as


291
00:10:43,826 --> 00:10:46,866
specified by HLS Spec. Prefer


292
00:10:47,246 --> 00:10:49,516
GAP tag in case of temporary


293
00:10:49,516 --> 00:10:50,086
failures.


294
00:10:51,786 --> 00:10:54,586
And send 404 to indicate stale


295
00:10:54,636 --> 00:10:54,976
playlist.


296
00:11:00,156 --> 00:11:03,236
Next, let's move on to how to


297
00:11:03,236 --> 00:11:04,596
handle AVFoundation errors.


298
00:11:05,556 --> 00:11:07,396
When an error occurs, the user


299
00:11:07,396 --> 00:11:09,326
viewing the actual stream wants


300
00:11:09,326 --> 00:11:10,116
to know two things.


301
00:11:10,796 --> 00:11:12,656
First, that the error happened


302
00:11:12,916 --> 00:11:14,646
and second, what caused the


303
00:11:14,646 --> 00:11:15,396
error to happen.


304
00:11:16,596 --> 00:11:18,266
And not all errors can be


305
00:11:18,266 --> 00:11:19,536
anticipated on the server.


306
00:11:20,676 --> 00:11:22,836
The AVFoundation client or app


307
00:11:23,436 --> 00:11:25,006
should be returned to respond


308
00:11:25,006 --> 00:11:27,176
appropriately to various error


309
00:11:27,176 --> 00:11:29,106
conditions originating from the


310
00:11:29,106 --> 00:11:29,786
AVPlayer.


311
00:11:31,016 --> 00:11:32,396
So, how can we identify the


312
00:11:32,396 --> 00:11:32,696
error?


313
00:11:32,806 --> 00:11:36,556
The error can be identified by


314
00:11:36,556 --> 00:11:39,036
looking at AVPlayer.status and


315
00:11:39,036 --> 00:11:40,896
AVPlayerItem.status.


316
00:11:42,346 --> 00:11:43,696
This will change to


317
00:11:43,816 --> 00:11:45,936
AVPlayerStatsFailed and


318
00:11:45,936 --> 00:11:48,126
AVPlayerItemStatusFailed


319
00:11:48,126 --> 00:11:49,716
respectively on error.


320
00:11:50,226 --> 00:11:54,446
For the exact error that caused


321
00:11:54,446 --> 00:11:55,806
the status to change to fail


322
00:11:56,346 --> 00:11:58,386
look at AVPlayerItem.error.


323
00:11:59,726 --> 00:12:01,826
This describes what caused the


324
00:12:01,826 --> 00:12:03,626
item to be no longer playable.


325
00:12:04,056 --> 00:12:09,986
Listen to AVPLayerItemFailedTo


326
00:12:09,986 --> 00:12:12,426
PlayToEndTimeNotification to get


327
00:12:12,426 --> 00:12:14,566
notified that the item did not


328
00:12:14,566 --> 00:12:15,526
play to end.


329
00:12:16,596 --> 00:12:19,076
The user info dictionary of this


330
00:12:19,076 --> 00:12:21,236
notification contains an error


331
00:12:21,236 --> 00:12:22,636
object that describes the


332
00:12:22,636 --> 00:12:24,856
problem and can be retrieved by


333
00:12:24,856 --> 00:12:26,986
AVPlayerItemFailedTo


334
00:12:26,986 --> 00:12:28,846
PlayToEndTimeErrorKey.


335
00:12:29,426 --> 00:12:34,356
Dig deeper, look at


336
00:12:34,396 --> 00:12:36,306
AVPlayerItem.errorLog.


337
00:12:37,456 --> 00:12:39,526
This gives the snapshot of all


338
00:12:39,526 --> 00:12:41,366
the error events that happened


339
00:12:41,366 --> 00:12:43,166
during the playback session.


340
00:12:45,136 --> 00:12:47,496
So, what do these errors mean?


341
00:12:49,136 --> 00:12:51,036
They can mean one of these four


342
00:12:51,106 --> 00:12:52,946
things, network errors,


343
00:12:53,386 --> 00:12:55,996
timeouts, format errors, and


344
00:12:56,196 --> 00:12:57,726
live playlist update errors.


345
00:12:58,996 --> 00:13:01,426
Network errors are all the 4xx


346
00:13:01,426 --> 00:13:03,596
and 5xx errors that server sends


347
00:13:04,046 --> 00:13:07,306
and TCP/IP, DNS errors.


348
00:13:08,486 --> 00:13:10,396
After requesting a resource


349
00:13:10,686 --> 00:13:12,366
there are timeouts for each


350
00:13:12,366 --> 00:13:14,516
master playlist, media playlist,


351
00:13:14,776 --> 00:13:16,376
medial files, and keys.


352
00:13:17,086 --> 00:13:18,756
And failure to get a response


353
00:13:18,756 --> 00:13:20,646
within this timeout will cause


354
00:13:20,846 --> 00:13:22,286
timeout errors.


355
00:13:25,196 --> 00:13:27,356
Any incorrect format of playlist


356
00:13:27,446 --> 00:13:29,926
key and the session data will


357
00:13:29,926 --> 00:13:31,286
result in format errors.


358
00:13:31,876 --> 00:13:35,796
And in case of live, playlist


359
00:13:35,796 --> 00:13:37,496
needs to be updated according to


360
00:13:37,496 --> 00:13:39,146
published target duration and


361
00:13:39,146 --> 00:13:41,366
the failure to do so will cause


362
00:13:41,496 --> 00:13:42,976
live playlist update errors.


363
00:13:48,136 --> 00:13:48,946
What are the corresponding


364
00:13:48,946 --> 00:13:50,606
AVFoundationDomain error codes?


365
00:13:51,876 --> 00:13:54,036
For network errors and timeouts,


366
00:13:54,416 --> 00:13:56,386
it will be AVErrorContent


367
00:13:56,386 --> 00:13:59,226
IsUnavailable or AVErrorNo


368
00:13:59,226 --> 00:14:00,066
LongerPlayable.


369
00:14:01,526 --> 00:14:02,746
AVErrorContent


370
00:14:02,746 --> 00:14:04,826
IsUnavailable indicates that the


371
00:14:04,826 --> 00:14:06,416
content was never playable.


372
00:14:06,876 --> 00:14:08,626
This could mean authentication


373
00:14:08,626 --> 00:14:10,506
failures or authorization


374
00:14:10,506 --> 00:14:11,026
failures.


375
00:14:12,306 --> 00:14:13,286
AVErrorNo


376
00:14:13,286 --> 00:14:15,296
LongerPlayable indicates that


377
00:14:15,356 --> 00:14:17,376
the content was playable, but


378
00:14:17,376 --> 00:14:19,156
over the course of time one or


379
00:14:19,156 --> 00:14:21,266
more errors happened resulting


380
00:14:21,446 --> 00:14:26,056
in being no longer playable.


381
00:14:26,056 --> 00:14:26,866
AVErrorFailed


382
00:14:26,866 --> 00:14:29,756
ToParse indicates parsing


383
00:14:30,956 --> 00:14:31,576
failures.


384
00:14:31,576 --> 00:14:32,366
AVErrorContent


385
00:14:32,366 --> 00:14:35,016
NotUpdated means the playlist


386
00:14:35,096 --> 00:14:40,146
was not updated in time.


387
00:14:40,346 --> 00:14:42,326
Always look at the user info of


388
00:14:42,326 --> 00:14:44,036
the error to get the underlying


389
00:14:44,036 --> 00:14:44,306
error.


390
00:14:45,296 --> 00:14:47,166
Keep in mind, this can be nested


391
00:14:47,166 --> 00:14:49,006
if more than one error caused


392
00:14:49,006 --> 00:14:52,096
the item to fail.


393
00:14:52,326 --> 00:14:54,126
When a new error log entry is


394
00:14:54,126 --> 00:14:55,156
added to error log


395
00:14:55,646 --> 00:14:56,916
AVPlayerItemNewError


396
00:14:57,056 --> 00:14:59,676
LogEntryNotification is sent.


397
00:15:00,316 --> 00:15:01,896
So, listen to this for immediate


398
00:15:01,896 --> 00:15:03,106
notification of error.


399
00:15:03,316 --> 00:15:06,536
I would like to stress on one


400
00:15:06,536 --> 00:15:09,626
point here, AVPlayer will try


401
00:15:09,626 --> 00:15:11,926
its best to continue playback by


402
00:15:11,926 --> 00:15:14,086
means of retries and switching


403
00:15:14,256 --> 00:15:15,706
to different available variants.


404
00:15:15,806 --> 00:15:18,466
The AVPlayerItem.status will


405
00:15:18,466 --> 00:15:20,636
change to fail only when there


406
00:15:20,636 --> 00:15:22,796
is no viable variant to use to


407
00:15:22,796 --> 00:15:24,976
continue playback and we have


408
00:15:25,056 --> 00:15:26,646
played out whatever buffer we


409
00:15:27,326 --> 00:15:27,426
have.


410
00:15:28,916 --> 00:15:30,676
For all temporary errors,


411
00:15:31,256 --> 00:15:33,376
AVPlayer will attempt switching


412
00:15:33,586 --> 00:15:35,086
and/or retry.


413
00:15:35,916 --> 00:15:37,676
If there is nothing to switch to


414
00:15:38,096 --> 00:15:40,096
AVPlayer will retry for a


415
00:15:40,096 --> 00:15:41,936
reasonable amount of time before


416
00:15:41,936 --> 00:15:42,366
giving up.


417
00:15:43,136 --> 00:15:45,776
After a given amount of time it


418
00:15:45,776 --> 00:15:47,656
will attempt to switch back up


419
00:15:47,656 --> 00:15:49,326
to failed variant if the network


420
00:15:49,326 --> 00:15:50,596
conditions are suitable.


421
00:15:51,986 --> 00:15:54,896
For permanent errors like 410 no


422
00:15:54,896 --> 00:15:56,566
retries will be attempted and


423
00:15:56,566 --> 00:15:58,996
AVPlayer only tries switching to


424
00:15:58,996 --> 00:15:59,956
a different variant.


425
00:16:01,486 --> 00:16:03,326
The permanent and temporary


426
00:16:03,326 --> 00:16:05,246
error codes are in compliance


427
00:16:05,246 --> 00:16:06,866
with the standard HTTP error


428
00:16:06,866 --> 00:16:10,456
codes specified in RFC7231.


429
00:16:13,506 --> 00:16:15,746
All session data errors are not


430
00:16:15,746 --> 00:16:16,966
fatal and not ignored.


431
00:16:22,236 --> 00:16:23,646
Next, let's go to a code


432
00:16:23,646 --> 00:16:24,146
snippet.


433
00:16:25,216 --> 00:16:27,106
To view the error, once you have


434
00:16:27,106 --> 00:16:28,566
done the usual things, create


435
00:16:28,566 --> 00:16:30,326
your asset, create your player


436
00:16:30,326 --> 00:16:32,266
item, create a player with that


437
00:16:32,266 --> 00:16:34,266
item the first thing you should


438
00:16:34,266 --> 00:16:37,216
do is add observer to track the


439
00:16:37,276 --> 00:16:40,956
status of the player.


440
00:16:41,176 --> 00:16:44,526
Then add observer to track the


441
00:16:44,726 --> 00:16:47,786
status of player item.


442
00:16:48,426 --> 00:16:51,496
And here you register to listen


443
00:16:51,706 --> 00:16:53,566
to AVPlayerItemFailed


444
00:16:53,566 --> 00:16:55,256
ToPlayToEndTimeNotification.


445
00:16:55,766 --> 00:17:00,526
Once you have that and the


446
00:17:00,526 --> 00:17:01,966
status of the item changes to


447
00:17:01,966 --> 00:17:03,746
failed look at


448
00:17:03,746 --> 00:17:05,536
AVPlayerItem.error to print out


449
00:17:05,606 --> 00:17:06,486
what the error is.


450
00:17:07,566 --> 00:17:08,826
This is the place where you


451
00:17:08,826 --> 00:17:10,415
should add code to display


452
00:17:10,415 --> 00:17:11,636
relevant messages about the


453
00:17:11,636 --> 00:17:12,896
error to the user.


454
00:17:13,496 --> 00:17:18,146
On getting AVPlayerItemFailedTo


455
00:17:18,146 --> 00:17:19,886
PlayToEndTimeNotification


456
00:17:20,386 --> 00:17:22,406
extract the error as the value


457
00:17:22,406 --> 00:17:24,756
of AVPlayerItemFailedTo


458
00:17:24,756 --> 00:17:27,266
PlayToEndTimeErrorKey and again,


459
00:17:27,626 --> 00:17:28,826
take appropriate action.


460
00:17:28,966 --> 00:17:30,846
For instance, print the error or


461
00:17:30,846 --> 00:17:32,406
display relevant error messages


462
00:17:32,406 --> 00:17:32,966
to the user.


463
00:17:38,356 --> 00:17:40,466
To summarize, always monitor


464
00:17:40,466 --> 00:17:41,626
AVPlayer and


465
00:17:41,626 --> 00:17:43,216
AVPlayerItem.status.


466
00:17:44,586 --> 00:17:45,936
Listen to notifications,


467
00:17:46,036 --> 00:17:47,846
AVPlayerItemFailedTo


468
00:17:47,846 --> 00:17:49,936
PlayToEndTimeNotification tells


469
00:17:49,936 --> 00:17:51,396
you when the item did not play


470
00:17:51,396 --> 00:17:51,776
to end.


471
00:17:52,596 --> 00:17:53,946
If you want to more actively


472
00:17:53,946 --> 00:17:55,916
monitor the errors for example,


473
00:17:55,996 --> 00:17:57,596
for the purpose of sending debug


474
00:17:57,596 --> 00:17:59,836
info to server for analytics


475
00:18:00,196 --> 00:18:02,956
listen to AVPlayerItemNewError


476
00:18:02,956 --> 00:18:05,016
LogEntryNotification to know


477
00:18:05,016 --> 00:18:06,446
when a new error log entry is


478
00:18:06,446 --> 00:18:06,786
added.


479
00:18:07,706 --> 00:18:09,746
In conclusion, when an error


480
00:18:09,746 --> 00:18:12,356
occurs always take appropriate


481
00:18:12,356 --> 00:18:14,246
action, don't ignore it.


482
00:18:14,676 --> 00:18:17,156
Notify the user of the error and


483
00:18:17,156 --> 00:18:18,626
always, always display


484
00:18:18,626 --> 00:18:20,636
meaningful messages or pop-ups


485
00:18:21,176 --> 00:18:21,946
when suitable.


486
00:18:24,456 --> 00:18:26,726
For more information, go to the


487
00:18:26,726 --> 00:18:28,846
WWDC site and use the session


488
00:18:28,906 --> 00:18:30,996
number 514.


489
00:18:31,816 --> 00:18:33,396
Thank you and have a great


490
00:18:33,536 --> 00:18:33,946
conference.

