1
00:00:24,516 --> 00:00:31,546
[ Applause ]


2
00:00:32,046 --> 00:00:33,406
>> ELIZA BLOCK: Hi,
everybody, I'm Eliza


3
00:00:33,406 --> 00:00:36,456
and with me is Paul Salzman.


4
00:00:36,756 --> 00:00:39,746
We will be telling you about
complications, what they are


5
00:00:39,746 --> 00:00:44,856
and how you can make them.


6
00:00:45,046 --> 00:00:49,726
So, complications are
small pieces of information


7
00:00:49,726 --> 00:00:53,086
that appear right on your
clock face alongside the time.


8
00:00:54,226 --> 00:00:58,406
On these clock faces you see
here, if we remove the time


9
00:00:58,406 --> 00:01:03,266
from the equation, everything
left is a complication.


10
00:01:04,186 --> 00:01:09,136
So the ones you see here are all
built into the OS, but starting


11
00:01:09,136 --> 00:01:11,996
in watchOS 2 you can create
your own complications


12
00:01:11,996 --> 00:01:15,646
for the clock face and we
will tell you how to do that,


13
00:01:15,646 --> 00:01:21,136
and I'm going to use the example
of building a complication


14
00:01:21,136 --> 00:01:26,806
to display the upcoming
matches in a soccer tournament.


15
00:01:27,396 --> 00:01:31,766
So let's take a look
imagining you already built


16
00:01:31,766 --> 00:01:35,826
such a complication at what it
would look like to go select it.


17
00:01:36,446 --> 00:01:39,046
So focusing in on the
middle clock face here,


18
00:01:39,386 --> 00:01:41,586
if you were to Force
Touch the screen,


19
00:01:41,586 --> 00:01:48,856
you can customize the face,
swiping to the right allows you


20
00:01:49,346 --> 00:01:52,346
to start tapping on your
different complications,


21
00:01:52,756 --> 00:01:58,526
and turning the Digital
Crown allows you to pick one.


22
00:01:58,816 --> 00:02:00,806
So if we scroll all the
way to the end of the list,


23
00:02:01,266 --> 00:02:06,106
we will see our not-yet-built
soccer tournament complication


24
00:02:06,106 --> 00:02:07,516
and we could select it


25
00:02:07,516 --> 00:02:10,506
and we start seeing
the live data displayed


26
00:02:10,506 --> 00:02:13,946
on the clock face.


27
00:02:14,206 --> 00:02:16,206
How are you going
to provide the data


28
00:02:16,456 --> 00:02:17,796
to populate this complication?


29
00:02:18,456 --> 00:02:21,776
As you can see from looking


30
00:02:21,776 --> 00:02:25,426
at the face there is a
consistent look and feel to all


31
00:02:25,426 --> 00:02:26,786
of our clock faces
and that's what part


32
00:02:26,786 --> 00:02:30,266
of what makes them pleasant
to interact with so we wanted


33
00:02:30,266 --> 00:02:33,196
to do this while
preserving that consistency.


34
00:02:34,316 --> 00:02:38,336
So your extension
which is running


35
00:02:38,336 --> 00:02:41,696
on the watch will provide the
data for these complications


36
00:02:42,136 --> 00:02:43,636
in the form of text and images.


37
00:02:47,616 --> 00:02:51,426
And then the clock face will
actually draw it in a way


38
00:02:51,426 --> 00:02:56,426
that fits with the
rest of the face.


39
00:02:56,426 --> 00:03:01,806
So if I were to install this
complication on my watch,


40
00:03:03,026 --> 00:03:08,436
I will see it right away every
time that I raise my wrist.


41
00:03:08,436 --> 00:03:12,166
And that's a great thing, and
it's one of the great things


42
00:03:12,166 --> 00:03:14,976
about building a complication,
but it also presents a kind


43
00:03:14,976 --> 00:03:17,856
of a challenge because
as time passes


44
00:03:17,856 --> 00:03:19,606
and the information
that's displayed


45
00:03:19,606 --> 00:03:24,156
in this complication needs
to update, since it's visible


46
00:03:24,156 --> 00:03:26,746
as soon as you raise your
wrist, that update needs


47
00:03:26,746 --> 00:03:29,726
to already have happened by
the time the screen turns on.


48
00:03:29,726 --> 00:03:32,266
And if you think about it,


49
00:03:32,266 --> 00:03:35,076
there could be five different
complications showing


50
00:03:35,076 --> 00:03:36,136
on this single watch face.


51
00:03:36,136 --> 00:03:38,926
There is no way we would have
time to launch all of them,


52
00:03:39,626 --> 00:03:44,426
pull for new data, potentially
involving a network request


53
00:03:44,816 --> 00:03:48,556
and have all of them come back
with data in time for the screen


54
00:03:48,556 --> 00:03:51,126
to come on so to
solve this problem,


55
00:03:51,126 --> 00:03:54,316
what we're going do is collect
the data for your complications


56
00:03:54,636 --> 00:03:57,036
in the form of a
timeline in advance.


57
00:03:57,726 --> 00:04:00,966
So you will give us
a timeline of data,


58
00:04:02,326 --> 00:04:04,956
how much of the timeline
depends on the density


59
00:04:04,956 --> 00:04:06,276
of the data for your
application.


60
00:04:06,806 --> 00:04:11,546
And that way as I glance at
my wrist throughout the day,


61
00:04:12,236 --> 00:04:15,556
every time I look at it, the
complication has already updated


62
00:04:15,556 --> 00:04:23,676
to display the information that
makes sense at that moment.


63
00:04:23,676 --> 00:04:26,156
Now, timelines are a
really powerful concept


64
00:04:26,156 --> 00:04:29,046
and Paul will talk about
them later in the session,


65
00:04:29,296 --> 00:04:31,556
but I wanted to mention one
other thing that this buys us,


66
00:04:31,896 --> 00:04:34,356
which is the Time
Travel feature.


67
00:04:34,746 --> 00:04:38,676
So Time Travel is a new feature
we introduced in watchOS 2


68
00:04:39,556 --> 00:04:42,586
which allows you to turn
the Digital Crown and right


69
00:04:42,586 --> 00:04:45,036
on the clock face you can see
what your complications will be


70
00:04:45,036 --> 00:04:46,676
showing at different
times of the day.


71
00:04:46,676 --> 00:04:49,666
So you could peek forward to see
when does the next match start


72
00:04:49,856 --> 00:04:54,136
or what meeting should I have
been at an hour ago and so on.


73
00:04:54,676 --> 00:04:59,016
So to see how that works
with this complication,


74
00:04:59,336 --> 00:05:01,686
there is no extra work
that you had to do


75
00:05:01,686 --> 00:05:03,056
in order to make this happen.


76
00:05:03,056 --> 00:05:05,186
By providing your data in
the form of a timeline,


77
00:05:05,826 --> 00:05:09,526
we can just make Time
Travel happen for free.


78
00:05:10,736 --> 00:05:14,936
Getting started, so when
you make a new Xcode project


79
00:05:15,016 --> 00:05:20,176
or convert an old project over
for watchOS 2, you can choose


80
00:05:20,176 --> 00:05:23,396
to add a complication.


81
00:05:23,946 --> 00:05:27,486
You can check that box,
and that will cause Xcode


82
00:05:27,486 --> 00:05:30,216
to automatically generate
the files that you need


83
00:05:30,216 --> 00:05:32,566
and set things up
so it's super easy.


84
00:05:33,436 --> 00:05:35,296
There is one other
thing you need to do.


85
00:05:36,076 --> 00:05:40,666
If you navigate to your WatchKit
app extension's general info


86
00:05:40,666 --> 00:05:47,796
pane, you provide the dataSource
class which we will talk


87
00:05:47,796 --> 00:05:51,416
about later, and you
also provide checkboxes


88
00:05:51,546 --> 00:05:54,316
for the families of complication
that you want to support.


89
00:05:54,316 --> 00:05:57,436
So now what are these
families of complication?


90
00:05:59,356 --> 00:06:03,826
Complications on watchOS
look different ways


91
00:06:03,826 --> 00:06:06,506
on different clock faces
and we have divided this


92
00:06:06,506 --> 00:06:07,986
up into five different families


93
00:06:07,986 --> 00:06:10,396
and you can choose individually
whether to support each one


94
00:06:10,396 --> 00:06:11,656
of these families so I want


95
00:06:11,656 --> 00:06:14,226
to show you what these
families look like.


96
00:06:15,336 --> 00:06:16,956
This is the Modular face,


97
00:06:17,816 --> 00:06:21,426
and it has two complication
families on it.


98
00:06:24,276 --> 00:06:29,456
The ModularSmall family gives
you these square-shaped small


99
00:06:29,456 --> 00:06:34,046
complications, and the
ModularLarge family is the one,


100
00:06:34,276 --> 00:06:36,166
one complication in
the middle of the face


101
00:06:36,166 --> 00:06:37,726
that can show a fair
amount more data


102
00:06:37,726 --> 00:06:40,246
so that's the one we have been
focusing on with this example.


103
00:06:40,856 --> 00:06:45,976
A number of analog faces
also support complications.


104
00:06:46,356 --> 00:06:49,246
And these complications are
in the Utilitarian families.


105
00:06:49,666 --> 00:06:54,546
There is a UtilitarianSmall
which kind of fit in the corners


106
00:06:54,916 --> 00:06:58,266
of various analog faces and
then there is UtilitarianLarge


107
00:06:58,536 --> 00:07:02,566
which gets the entire
region along the bottom.


108
00:07:02,596 --> 00:07:07,636
And finally, on the Color
face, there is a single family


109
00:07:07,636 --> 00:07:08,956
which we have called
Circular Small.


110
00:07:09,186 --> 00:07:14,176
Here is what this
looks like in code.


111
00:07:14,176 --> 00:07:18,966
It's an enumeration named
as you would expect.


112
00:07:21,726 --> 00:07:22,276
All right.


113
00:07:22,766 --> 00:07:27,126
So when the user activates
your complication on a face,


114
00:07:27,426 --> 00:07:29,746
they are going to choose it
for a particular position


115
00:07:29,746 --> 00:07:31,036
that the complication can appear


116
00:07:31,036 --> 00:07:33,086
and that position
will be associated


117
00:07:33,086 --> 00:07:34,576
with a particular family.


118
00:07:35,006 --> 00:07:38,736
So you will be told that you are
providing data for this family,


119
00:07:39,086 --> 00:07:40,396
and at that point, you need


120
00:07:40,396 --> 00:07:42,836
to decide how you want
to lay that data out.


121
00:07:43,126 --> 00:07:46,416
And there is a number of ways
that you can lay out your data


122
00:07:46,496 --> 00:07:48,036
for each one of these
families and I want


123
00:07:48,036 --> 00:07:49,836
to show you the collection
of templates


124
00:07:49,876 --> 00:07:51,726
that our designers have created.


125
00:07:52,286 --> 00:07:55,636
So for the ModularSmall
complication family,


126
00:07:55,966 --> 00:07:57,416
we have these templates.


127
00:07:58,336 --> 00:08:02,186
There is a whole bunch
of different ones.


128
00:08:02,186 --> 00:08:06,416
You can have small text, two
different rows of text, an image


129
00:08:06,416 --> 00:08:09,796
and text, you can do a big
piece of text, a big image.


130
00:08:10,006 --> 00:08:13,476
These ones along near the
bottom here with a ring filling


131
00:08:13,476 --> 00:08:16,606
up can show you your progress
towards something in the form


132
00:08:16,606 --> 00:08:20,726
of a floating point number
that can change between 0 and 1


133
00:08:20,726 --> 00:08:23,566
and you can put text or
an image inside of that


134
00:08:23,566 --> 00:08:25,776
and finally there is a column
template which allows you


135
00:08:25,776 --> 00:08:30,366
to do something like
show a sports score.


136
00:08:30,486 --> 00:08:32,986
ModularLarge also has a number


137
00:08:32,986 --> 00:08:35,395
of different ways you
can layout your data.


138
00:08:35,395 --> 00:08:39,096
There is a simple standard
three-line template


139
00:08:39,546 --> 00:08:40,785
with an optional image.


140
00:08:41,836 --> 00:08:43,706
You can do a column-style
template,


141
00:08:44,126 --> 00:08:47,006
two different column-style
templates, actually.


142
00:08:47,536 --> 00:08:50,386
And finally you could do a
template with a large piece


143
00:08:50,386 --> 00:08:52,616
of text which is suitable for
something like a kitchen timer


144
00:08:52,616 --> 00:08:58,166
or a date, many other possible
things you could do with that.


145
00:08:58,276 --> 00:09:01,976
UtilitarianSmall, most
of these guys are flat


146
00:09:02,186 --> 00:09:03,796
and they have an optional
image in the corner,


147
00:09:03,966 --> 00:09:05,556
but you can also
have a larger image


148
00:09:05,556 --> 00:09:09,336
and you can also do this ring
style with UtilitarianSmall.


149
00:09:10,786 --> 00:09:13,646
UtilitarianLarge, there is
just one template for this.


150
00:09:13,646 --> 00:09:14,796
There is an image
that's optional


151
00:09:14,796 --> 00:09:18,456
and some text next to it.


152
00:09:18,456 --> 00:09:21,846
And finally, CircularSmall
has templates that are similar


153
00:09:21,846 --> 00:09:23,376
to the ModularSmall
ones although


154
00:09:23,376 --> 00:09:24,626
with slightly different sizes.


155
00:09:24,906 --> 00:09:28,756
So that's the templates that
you have access to in watchOS 2.


156
00:09:29,256 --> 00:09:34,376
I'm going to take a look
at what that means in code.


157
00:09:34,616 --> 00:09:40,516
So let's zoom in on
our soccer club digital


158
00:09:40,516 --> 00:09:41,716
ModularLarge template.


159
00:09:42,126 --> 00:09:43,726
This has four pieces.


160
00:09:45,126 --> 00:09:47,636
There is a header image
that you can provide.


161
00:09:48,276 --> 00:09:50,186
Header text.


162
00:09:51,136 --> 00:09:58,716
And then there is two
lines of body text.


163
00:09:58,776 --> 00:10:00,966
So you may have noticed
that there is a lot


164
00:10:00,966 --> 00:10:01,976
of these complication templates.


165
00:10:02,206 --> 00:10:05,406
All of these correspond
to a subclass


166
00:10:05,406 --> 00:10:08,806
of CLKComplicationTemplate
which is the superclass of all


167
00:10:08,806 --> 00:10:12,236
of them, and you can choose
which one you want to use


168
00:10:12,326 --> 00:10:14,386
and fill out its
various properties


169
00:10:14,386 --> 00:10:15,206
so it's pretty simple.


170
00:10:15,766 --> 00:10:19,006
So this one is the
CLKComplicationTemplate


171
00:10:19,006 --> 00:10:22,376
ModularLargeStandardBody
which is a bit of a mouthful,


172
00:10:22,886 --> 00:10:25,556
but it conveys one
really important piece


173
00:10:25,556 --> 00:10:27,346
of information right
in the name,


174
00:10:27,526 --> 00:10:29,236
which is that this template is


175
00:10:29,236 --> 00:10:32,676
for the ModularLarge
complication family.


176
00:10:32,886 --> 00:10:35,026
And it's really crucial
when you are asked


177
00:10:35,026 --> 00:10:38,016
to provide complication
data for a particular family


178
00:10:38,306 --> 00:10:40,766
that you provide a template
that matches that family,


179
00:10:40,766 --> 00:10:43,176
and that's why we have built
the name of the family right


180
00:10:43,176 --> 00:10:44,066
into the name of the class,


181
00:10:44,116 --> 00:10:45,866
so there can be no
confusion about it.


182
00:10:46,506 --> 00:10:49,176
It obviously wouldn't work to
produce a template that looks


183
00:10:49,176 --> 00:10:52,086
like this to appear
on the circular face.


184
00:10:52,616 --> 00:10:56,046
Now, you may have noticed
something else that's a little


185
00:10:56,046 --> 00:10:56,676
strange here.


186
00:10:58,096 --> 00:11:01,616
We have an image and three
text properties but instead


187
00:11:01,616 --> 00:11:05,056
of UI images and
NSStrings in the code,


188
00:11:06,296 --> 00:11:10,586
we have this imageProvider
and textProvider business.


189
00:11:10,706 --> 00:11:12,076
So what's going on here?


190
00:11:12,136 --> 00:11:16,526
That brings us to
our next section,


191
00:11:16,526 --> 00:11:18,826
how do you provide
images and text,


192
00:11:18,826 --> 00:11:20,786
and I want to explain
what these classes are for


193
00:11:20,786 --> 00:11:21,826
and what they can do for you.


194
00:11:22,326 --> 00:11:24,936
Let's start with images.


195
00:11:27,166 --> 00:11:32,616
Here is our complication in
the color editing screen.


196
00:11:32,686 --> 00:11:36,606
So the user can customize
what complications they see


197
00:11:36,606 --> 00:11:37,916
and they can pick
your complication


198
00:11:37,916 --> 00:11:38,676
in the course of that.


199
00:11:39,026 --> 00:11:41,566
They can also customize the
look and feel of the face.


200
00:11:41,566 --> 00:11:43,716
And that includes
changing the color.


201
00:11:44,556 --> 00:11:49,306
So when you provide images
for your complications,


202
00:11:49,536 --> 00:11:52,316
these images need to take
part in that same color scheme


203
00:11:52,316 --> 00:11:54,156
that the user has
selected for their face.


204
00:11:54,196 --> 00:11:58,216
So they need to be able to
change color as you see.


205
00:11:58,826 --> 00:12:02,986
So there is our soccer ball
obediently turning whatever


206
00:12:02,986 --> 00:12:04,466
color the user is choosing.


207
00:12:07,216 --> 00:12:12,596
So an image provider is a
sort of a bundle of properties


208
00:12:12,596 --> 00:12:14,666
that manages to achieve
this effect.


209
00:12:14,926 --> 00:12:17,586
So you can provide a background
image and you provide it


210
00:12:17,586 --> 00:12:19,296
as a template image, an image


211
00:12:19,296 --> 00:12:22,126
that only contains
alpha information


212
00:12:22,246 --> 00:12:23,556
and no color of its own.


213
00:12:23,556 --> 00:12:25,976
It can be -- the pixels can
be whatever color you want,


214
00:12:25,976 --> 00:12:28,056
but we are only going to pay
attention to the alpha channel.


215
00:12:28,776 --> 00:12:31,986
It will be colored depending
on the user's selected color,


216
00:12:32,636 --> 00:12:34,636
but you can do a little
bit more with this.


217
00:12:34,906 --> 00:12:37,506
You can also provide
a background image


218
00:12:38,006 --> 00:12:39,916
and a foreground image
and these will be laid


219
00:12:39,916 --> 00:12:40,636
on top of each other.


220
00:12:40,636 --> 00:12:42,766
The background image will be
colored according to the color


221
00:12:42,766 --> 00:12:47,446
of the face and the foreground
image will be superimposed on it


222
00:12:48,056 --> 00:12:50,856
so you can get a little bit
more detail in your images.


223
00:12:51,096 --> 00:12:53,246
You can also choose to make
the foreground image black.


224
00:12:54,326 --> 00:12:56,026
So let's take a look
at the code for this.


225
00:12:56,626 --> 00:12:58,016
You give us a background image.


226
00:12:58,476 --> 00:13:00,436
You give us an optional
foreground image.


227
00:13:00,956 --> 00:13:06,966
You can choose a background
color for your background image.


228
00:13:06,966 --> 00:13:09,526
For the most part the color
is going to be determined


229
00:13:09,766 --> 00:13:11,486
by what the user has picked


230
00:13:11,876 --> 00:13:14,586
so this background color
represents what the color you


231
00:13:14,586 --> 00:13:17,246
would like your background
image to be if you can choose


232
00:13:17,636 --> 00:13:19,946
and there are some contexts in
which that would be honored,


233
00:13:20,276 --> 00:13:22,026
but as long as this
is appearing on a face


234
00:13:22,026 --> 00:13:25,046
where the user chooses the color
is will override the color you


235
00:13:25,046 --> 00:13:27,416
supply here so this is
an optional property.


236
00:13:28,016 --> 00:13:32,776
Okay. That's image providers.


237
00:13:32,836 --> 00:13:34,386
So now what about
text providers?


238
00:13:35,006 --> 00:13:38,106
These are really cool!


239
00:13:38,106 --> 00:13:39,936
So I'm really excited to
get to tell you about them!


240
00:13:40,416 --> 00:13:44,166
When we started out
building complications


241
00:13:44,166 --> 00:13:50,426
in watchOS 1 we had
challenges which were mostly due


242
00:13:50,426 --> 00:13:55,046
to the fact that complications
were tiny compared to all


243
00:13:55,086 --> 00:13:57,656
of the other UI you
are used to creating


244
00:13:57,656 --> 00:13:58,786
for all of our platforms.


245
00:13:58,786 --> 00:14:04,156
Some of them are as small as 44
pixels square, and we are trying


246
00:14:04,156 --> 00:14:07,406
to fit information that's of
use in this very small space,


247
00:14:07,716 --> 00:14:10,316
but it can be challenging to
do that without having all


248
00:14:10,316 --> 00:14:11,356
of your text truncate.


249
00:14:11,566 --> 00:14:16,576
So a good example, so the idea
here for text providers is


250
00:14:16,576 --> 00:14:18,796
that because the space
is very constrained,


251
00:14:18,966 --> 00:14:24,666
you want to leverage some of the
work that we have already done


252
00:14:24,666 --> 00:14:28,106
to figure out how to format and
fit the text in the small space.


253
00:14:28,646 --> 00:14:31,816
So we are introducing text
providers as a way for you


254
00:14:31,816 --> 00:14:34,286
to declare your intentions
to us rather


255
00:14:34,286 --> 00:14:37,466
than always passing us an
already formatted string


256
00:14:37,466 --> 00:14:40,876
and then we will handle
the details of formatting


257
00:14:40,876 --> 00:14:42,636
and fitting that string for you.


258
00:14:43,696 --> 00:14:47,406
So an example is
formatting dates.


259
00:14:48,296 --> 00:14:51,706
There is a CLKDate text
provider that does this for you


260
00:14:51,706 --> 00:14:53,266
and I want to show you
what that's useful for.


261
00:14:53,956 --> 00:14:56,696
Imagine you wanted to
display the date, Wednesday,


262
00:14:56,696 --> 00:14:59,286
September 23rd in one
of your complications.


263
00:14:59,926 --> 00:15:03,936
Now, space is really
constrained so pretty much


264
00:15:03,936 --> 00:15:07,326
in most contexts you are
more likely to see something


265
00:15:07,516 --> 00:15:12,746
that looks like this, which is
obviously not very informative.


266
00:15:12,846 --> 00:15:15,436
We have lost kind of the
bulk of the information.


267
00:15:16,106 --> 00:15:18,736
So instead of truncating,
it would be better


268
00:15:18,736 --> 00:15:22,986
if we could fall back on
increasingly narrow renditions


269
00:15:22,986 --> 00:15:25,116
of this string that
were still informative.


270
00:15:25,176 --> 00:15:27,936
So, for example, we could
start abbreviating some


271
00:15:27,936 --> 00:15:28,636
of the elements.


272
00:15:28,636 --> 00:15:31,456
You could abbreviate
more of them,


273
00:15:31,456 --> 00:15:35,216
and if that still didn't fit, we
could even start dropping some


274
00:15:35,216 --> 00:15:36,826
of the elements instead
of truncating,


275
00:15:37,636 --> 00:15:41,906
preferable to see Sep23
versus Wed dot dot dot.


276
00:15:42,416 --> 00:15:47,446
And finally, if we had way less
space to deal with we could drop


277
00:15:47,446 --> 00:15:49,586
down to displaying
the day of the month.


278
00:15:50,426 --> 00:15:54,136
This is what CLKDate text
provider will do for you.


279
00:15:55,186 --> 00:15:57,716
You have a date you
want to display,


280
00:15:58,196 --> 00:16:00,916
you have units you would
ideally like to display,


281
00:16:01,786 --> 00:16:06,316
in this case the weekday,
the month and the day.


282
00:16:06,556 --> 00:16:10,846
You create a text provider
from these pieces and then


283
00:16:11,486 --> 00:16:14,216
that very text provider
can be attached to one


284
00:16:14,216 --> 00:16:18,036
of these templates and it
will look different depending


285
00:16:18,036 --> 00:16:18,876
on the context.


286
00:16:19,146 --> 00:16:20,176
So here it is,


287
00:16:21,006 --> 00:16:23,376
in the ModularLarge
complication displaying one


288
00:16:23,376 --> 00:16:25,646
of the longer renditions
of this date.


289
00:16:27,196 --> 00:16:30,346
Here are two of these very
same text providers produced


290
00:16:30,346 --> 00:16:34,566
with that very same code
displayed with widths


291
00:16:34,566 --> 00:16:37,106
of various degrees
of further constraint


292
00:16:37,566 --> 00:16:42,116
and here is the same text
provider providing a date in one


293
00:16:42,116 --> 00:16:43,756
of these CircularSmall
complications


294
00:16:44,156 --> 00:16:46,566
and there is no truncating
anywhere


295
00:16:46,566 --> 00:16:47,696
and there is no work you have


296
00:16:47,696 --> 00:16:51,476
to do beyond the code
that you see here.


297
00:16:51,726 --> 00:16:53,476
That's date text providers.


298
00:16:54,206 --> 00:16:56,026
There is other kinds of
text providers as well.


299
00:16:56,466 --> 00:16:58,756
The one you are most
likely to use most


300
00:16:58,756 --> 00:17:01,316
of the time is the simple
text provider this allows you


301
00:17:01,656 --> 00:17:04,276
to provide arbitrary text.


302
00:17:05,316 --> 00:17:09,546
And but it's better than an
NSString because in addition


303
00:17:09,546 --> 00:17:11,376
to providing the text
you would like to see,


304
00:17:11,576 --> 00:17:14,506
you can also provide a shorter
version and we will fall back


305
00:17:14,506 --> 00:17:17,616
on the shorter version before
truncating the ideal version.


306
00:17:18,106 --> 00:17:20,736
There is a time text provider


307
00:17:20,736 --> 00:17:23,006
which formats times
for you nicely.


308
00:17:23,146 --> 00:17:25,685
You get the nice small caps that
match the rest of the system


309
00:17:25,685 --> 00:17:27,266
and will drop the a.m.


310
00:17:27,266 --> 00:17:29,916
/p.m. if there isn't
room to fit it.


311
00:17:29,916 --> 00:17:33,046
As you see in the
sunrise/sunset complication


312
00:17:33,046 --> 00:17:35,796
which is using this text
provider at the bottom.


313
00:17:38,576 --> 00:17:41,766
There is also a time
interval text provider.


314
00:17:42,236 --> 00:17:45,306
This text provider is good for
formatting ranges of times.


315
00:17:45,576 --> 00:17:47,276
We use it in the
calendar complication


316
00:17:47,716 --> 00:17:50,086
and it has some nice
formatting features as well.


317
00:17:50,626 --> 00:17:54,576
It will look like this if the
first date is in the morning


318
00:17:54,576 --> 00:17:56,326
and the second date
is in the afternoon.


319
00:17:56,326 --> 00:17:59,396
If they are both in the
afternoon, it's smart,


320
00:17:59,396 --> 00:18:01,096
and it drops the redundant a.m.


321
00:18:01,156 --> 00:18:03,076
/p.m. symbol to make
this look nicer.


322
00:18:03,076 --> 00:18:06,696
It will also fall back
on narrower versions


323
00:18:06,696 --> 00:18:08,856
if this rendition won't fit.


324
00:18:09,136 --> 00:18:13,026
These are useful and we
encourage you to use them.


325
00:18:13,026 --> 00:18:17,666
There is one more I wanted to
talk about now, and before I get


326
00:18:18,646 --> 00:18:22,016
to it, let me show you
the problem it's solving.


327
00:18:22,586 --> 00:18:26,166
So here you see our
moon phase digital


328
00:18:26,166 --> 00:18:27,936
ModularLarge complication.


329
00:18:27,936 --> 00:18:33,106
And at the bottom of
that, the third row


330
00:18:33,106 --> 00:18:36,066
in that moon phase complication
it's telling us the amount


331
00:18:36,066 --> 00:18:39,076
of time until the moonset in
terms of hours and minutes.


332
00:18:39,206 --> 00:18:42,916
So the moonset is at 2:19
today, which is in 3 hours


333
00:18:42,916 --> 00:18:46,126
and 1 minutes from 11:18.


334
00:18:46,336 --> 00:18:50,636
So as time ticks by, this
string changes at 11:19,


335
00:18:50,636 --> 00:18:54,156
it shows 3 hours, at 11:20
it shows 2 hours 59 minutes,


336
00:18:54,616 --> 00:18:55,256
and so on.


337
00:18:55,866 --> 00:18:59,486
Now, imagine if you
were creating a timeline


338
00:19:00,436 --> 00:19:01,916
to populate this complication.


339
00:19:01,916 --> 00:19:06,616
You would need to
provide a new template


340
00:19:06,616 --> 00:19:08,346
for every minute
of the entire day.


341
00:19:08,416 --> 00:19:10,466
That's a lot of templates.


342
00:19:11,686 --> 00:19:13,236
And it could be even worse


343
00:19:13,536 --> 00:19:16,426
because that's the moon
phase complication ticking


344
00:19:16,426 --> 00:19:17,266
down by the minute.


345
00:19:17,746 --> 00:19:20,456
What about the timer which
ticks down by the second?


346
00:19:20,866 --> 00:19:22,966
Imagine how many
templates that is.


347
00:19:22,966 --> 00:19:25,476
It's more than we could
possibly reasonably cache


348
00:19:25,946 --> 00:19:27,726
and it's incredibly wasteful


349
00:19:28,196 --> 00:19:31,316
because these strings
are derivable


350
00:19:31,316 --> 00:19:33,066
from two pieces of information.


351
00:19:33,566 --> 00:19:36,776
The date you are counting down
to, and the date that it is now.


352
00:19:37,816 --> 00:19:39,416
And we know the date
that it is now.


353
00:19:39,526 --> 00:19:40,616
That's what we are doing.


354
00:19:40,616 --> 00:19:41,706
We're a clock.


355
00:19:42,086 --> 00:19:45,506
So we wanted to give you a
way to produce these strings


356
00:19:45,706 --> 00:19:49,456
without populating your timeline
full of just a massive quantity


357
00:19:49,726 --> 00:19:50,946
of redundant information,


358
00:19:51,306 --> 00:19:53,466
that's what the relative
date text provider does.


359
00:19:54,106 --> 00:19:58,006
Here is what it looks like
in code if we were trying


360
00:19:58,006 --> 00:20:00,926
to produce the third line
of text that you see here.


361
00:20:01,116 --> 00:20:03,586
We would get the
date for the moonset.


362
00:20:04,776 --> 00:20:06,976
We would choose the units
that we wanted to display


363
00:20:06,976 --> 00:20:09,256
and actually I will show on
the next screen there is a lot


364
00:20:09,256 --> 00:20:11,326
of different units
you can use here.


365
00:20:12,196 --> 00:20:13,966
We would choose a
style, and, again,


366
00:20:13,966 --> 00:20:15,266
I will show you the
possible styles.


367
00:20:15,306 --> 00:20:17,436
This one you see here
is the natural style.


368
00:20:18,026 --> 00:20:21,816
You would make a relative
date text provider


369
00:20:21,816 --> 00:20:22,946
out of these elements.


370
00:20:23,946 --> 00:20:25,896
And then you would just
set that text provider


371
00:20:26,146 --> 00:20:28,296
as your body 2 text
provider for your template


372
00:20:29,466 --> 00:20:31,226
and the clock face
does the rest.


373
00:20:31,226 --> 00:20:34,526
It will always display the
relative date to the date


374
00:20:34,526 --> 00:20:37,396
that you gave us at every
given moment without you having


375
00:20:37,396 --> 00:20:38,246
to do any further work.


376
00:20:38,866 --> 00:20:42,376
So these are some styles
that are available,


377
00:20:42,566 --> 00:20:44,596
and as you can see if you
look at the natural and style


378
00:20:44,596 --> 00:20:49,946
and the offset style, you can
get either fine grained relative


379
00:20:49,946 --> 00:20:52,496
dates or very course grained
relative dates so depending


380
00:20:52,496 --> 00:20:54,256
on the date that you wanted --


381
00:20:54,626 --> 00:20:57,616
depending on how far it is to
the date you want to display,


382
00:20:57,996 --> 00:21:01,256
we can show weeks and days,
months and years, so on,


383
00:21:01,776 --> 00:21:03,026
all the way down to seconds.


384
00:21:03,406 --> 00:21:03,706
All right.


385
00:21:04,496 --> 00:21:07,356
So that's text providers
and image providers.


386
00:21:07,876 --> 00:21:09,926
So I want to sum up how it is


387
00:21:09,926 --> 00:21:11,486
that you are giving
us your content.


388
00:21:12,496 --> 00:21:15,656
You choose a template
from one of the number


389
00:21:15,656 --> 00:21:17,746
of possible templates,
choosing one


390
00:21:17,746 --> 00:21:20,116
that matches the complication
family you are being asked


391
00:21:20,116 --> 00:21:21,026
to provide data for.


392
00:21:21,606 --> 00:21:25,156
And then you populate
that with image providers


393
00:21:25,896 --> 00:21:26,786
and text providers.


394
00:21:26,786 --> 00:21:31,086
And then you are going to
hand us a whole bunch of those


395
00:21:31,336 --> 00:21:35,176
in the form of a timeline and
to talk about more, to talk more


396
00:21:35,176 --> 00:21:37,756
about how to form one of
these timelines I want


397
00:21:37,756 --> 00:21:38,636
to invite up Paul.


398
00:21:39,306 --> 00:21:41,436
Here he is.


399
00:21:43,466 --> 00:21:43,586
>> PAUL SALZMAN: Awesome!


400
00:21:45,516 --> 00:21:48,646
[ Applause ]


401
00:21:49,146 --> 00:21:49,706
Hello everyone.


402
00:21:50,446 --> 00:21:52,876
So as Eliza mentioned we are
going to be gathering our data


403
00:21:52,876 --> 00:21:54,646
for your complication in
the form of a timeline.


404
00:21:55,296 --> 00:21:56,626
This helps to support
two things:


405
00:21:57,106 --> 00:22:00,376
the brand-new Time Travel
feature and we are going to able


406
00:22:00,376 --> 00:22:02,486
to present the user with
your content immediately


407
00:22:02,486 --> 00:22:03,696
on wrist raise without
any delay.


408
00:22:05,046 --> 00:22:06,216
Let's take a look at
about how to think


409
00:22:06,216 --> 00:22:07,676
about timelines and
complications.


410
00:22:08,466 --> 00:22:09,626
We are going to start


411
00:22:09,736 --> 00:22:11,226
by creating the weather
complication up here


412
00:22:11,226 --> 00:22:12,026
on the bottom left corner.


413
00:22:12,476 --> 00:22:15,316
We are showing 57
degrees because right now


414
00:22:15,626 --> 00:22:17,686
when the watch is showing
10:00 a.m., our forecast says


415
00:22:17,686 --> 00:22:19,876
that 57 degrees is the
temperature outside


416
00:22:19,876 --> 00:22:20,626
for this location.


417
00:22:20,916 --> 00:22:23,686
And in fact, we actually
have a forecast by hour


418
00:22:23,686 --> 00:22:25,586
until 7:00 p.m. today
for this location


419
00:22:25,586 --> 00:22:27,956
that we can take advantage of.


420
00:22:28,426 --> 00:22:31,876
For timelines we don't describe
a range we associate the data we


421
00:22:31,876 --> 00:22:33,206
want to show with
a point in time.


422
00:22:33,766 --> 00:22:34,926
So let's slide these over here.


423
00:22:34,926 --> 00:22:37,626
As the clock progresses
throughout the day.


424
00:22:38,046 --> 00:22:40,216
We will show the most recent
data you have provided


425
00:22:40,216 --> 00:22:41,896
on the timeline on
the watch face.


426
00:22:42,506 --> 00:22:45,576
So as we get past 11:00 a.m.
we will update the forecast


427
00:22:45,576 --> 00:22:46,386
to 55 degrees.


428
00:22:47,646 --> 00:22:50,276
As we inch closer
to noon at 11:59


429
00:22:50,276 --> 00:22:52,766
and 59 seconds we are
still at 55 degrees.


430
00:22:54,336 --> 00:22:56,076
Once we hit noon we will
update the template.


431
00:22:57,156 --> 00:22:59,126
This works similarly for
the Time Travel feature.


432
00:22:59,666 --> 00:23:02,646
As the user navigates throughout
the day we will show the most


433
00:23:02,646 --> 00:23:04,786
recent data available at
that point in your timeline.


434
00:23:05,646 --> 00:23:06,916
So as we get past 1:00 p.m.,


435
00:23:07,076 --> 00:23:08,986
we're going to update your
content to 54 degrees.


436
00:23:09,556 --> 00:23:12,876
The other complication is
kind of an easy example


437
00:23:12,876 --> 00:23:14,786
because your data
matches perfectly


438
00:23:15,096 --> 00:23:16,976
to unblocked time
on the timeline.


439
00:23:17,876 --> 00:23:19,786
Let's look at something
more complex by trying


440
00:23:19,786 --> 00:23:21,006
to build the calendar
complication here.


441
00:23:22,196 --> 00:23:24,026
If you are lucky your
calendar has plenty


442
00:23:24,026 --> 00:23:24,826
of gaps throughout the day.


443
00:23:26,086 --> 00:23:27,426
Today I'm going to
go have brunch


444
00:23:27,596 --> 00:23:28,896
and later I will get a haircut


445
00:23:28,896 --> 00:23:31,086
and when I look better
I will meet


446
00:23:31,086 --> 00:23:33,746
with friends and watch a movie.


447
00:23:33,906 --> 00:23:35,246
So we can be naive about this


448
00:23:35,666 --> 00:23:38,326
and associate the templates we
want to display for these events


449
00:23:38,326 --> 00:23:40,446
for they begin and clear
them out when the event ends.


450
00:23:40,446 --> 00:23:43,456
Let's see how this
works in practice.


451
00:23:44,626 --> 00:23:46,626
So at noon today we will
show that we are at a brunch,


452
00:23:46,816 --> 00:23:49,936
but once brunch is over and
it's 1:00 p.m. we no longer have


453
00:23:49,936 --> 00:23:51,456
content displaying
on the wrist watch.


454
00:23:52,006 --> 00:23:53,416
That's a bad user experience.


455
00:23:54,576 --> 00:23:56,786
What's worse though is
we get closer and closer


456
00:23:56,786 --> 00:23:58,996
to 4:00 p.m. I have
no idea I need to get


457
00:23:58,996 --> 00:24:00,116
into my car and get a haircut.


458
00:24:00,706 --> 00:24:02,556
So you never want to tick
off the person that's doing


459
00:24:02,556 --> 00:24:02,936
your hair.


460
00:24:04,276 --> 00:24:06,716
So now it's too late and
I'm going to get a perm


461
00:24:06,716 --> 00:24:10,706
and it's not going to work well.


462
00:24:10,706 --> 00:24:11,496
Let's fix this.


463
00:24:11,496 --> 00:24:14,276
The first mistake is
assuming we should have blocks


464
00:24:14,276 --> 00:24:16,656
for unused time frames
in the timeline.


465
00:24:17,156 --> 00:24:19,616
So let's get rid of those.


466
00:24:19,826 --> 00:24:22,256
And showing an event
isn't useful


467
00:24:22,256 --> 00:24:23,346
for a calendar complication.


468
00:24:23,906 --> 00:24:26,756
We should put the templates at
the end of the previous event


469
00:24:26,756 --> 00:24:32,486
so you have adequate time
to get to your next event.


470
00:24:32,766 --> 00:24:34,336
So the first event
over here actually,


471
00:24:34,336 --> 00:24:36,446
there is no previous event
so it might be useful


472
00:24:36,446 --> 00:24:39,246
to actually tag it at midnight
to you get adequate warning


473
00:24:39,246 --> 00:24:40,196
in the morning when you wake up


474
00:24:40,196 --> 00:24:43,566
and on the right we should let
users know there is nothing they


475
00:24:43,566 --> 00:24:44,976
should be worried about
for the rest of the day


476
00:24:44,976 --> 00:24:46,486
with an indication
there is no more events.


477
00:24:47,176 --> 00:24:48,836
How does this look?


478
00:24:48,836 --> 00:24:51,536
At noon just like before we
will know we are at brunch


479
00:24:51,976 --> 00:24:54,196
but once brunch is over
we have adequate heads-up


480
00:24:54,196 --> 00:24:55,596
to know we need to
get a haircut.


481
00:24:56,506 --> 00:24:57,456
We will meet with our friends


482
00:24:57,956 --> 00:24:59,076
because we didn't
miss any events


483
00:24:59,396 --> 00:25:01,936
and when we are done watching
a movie we can go home


484
00:25:01,936 --> 00:25:06,856
with knowing we didn't
miss out on anything else.


485
00:25:06,856 --> 00:25:09,166
So how do you get the data
points into your code?


486
00:25:09,806 --> 00:25:11,526
You will use the
complication timeline entry.


487
00:25:12,546 --> 00:25:15,336
So Eliza described earlier
generating templates using text


488
00:25:15,336 --> 00:25:18,046
and image providers and
all we need to associate


489
00:25:18,046 --> 00:25:19,006
with that is an NSState.


490
00:25:19,946 --> 00:25:21,356
We will stuff the objects


491
00:25:21,406 --> 00:25:23,426
into the CLKComplication
timeline entry.


492
00:25:24,156 --> 00:25:26,636
When you hand that to the clock
face we will inspect the date


493
00:25:26,636 --> 00:25:29,186
and make a note on the
timeline so we know


494
00:25:29,186 --> 00:25:30,936
to display the template
when you reach that time.


495
00:25:30,936 --> 00:25:33,866
You can see in code
what the object looks


496
00:25:33,866 --> 00:25:37,166
like with the Date property and
complicationTemplate property.


497
00:25:37,296 --> 00:25:41,856
So how do you actually
communicate this data to us?


498
00:25:42,596 --> 00:25:44,386
You will have an
object in your project


499
00:25:44,386 --> 00:25:45,906
that implements the
CLKComplication


500
00:25:45,906 --> 00:25:46,996
DataSource protocol.


501
00:25:47,676 --> 00:25:52,686
This object is annotated in your
Xcode WatchKit extensions target


502
00:25:52,686 --> 00:25:55,076
settings as Eliza showed you
during setting up your project.


503
00:25:56,076 --> 00:25:58,036
There are a bunch of callbacks
you will get on the object.


504
00:25:58,906 --> 00:26:00,536
They are generally
per complication.


505
00:26:00,536 --> 00:26:02,886
And we will pass you a
CLKComplication object


506
00:26:03,246 --> 00:26:05,196
that has a Family property
you will want to switch on.


507
00:26:05,196 --> 00:26:08,276
At this point you will
decide is this ModularLarge?


508
00:26:08,276 --> 00:26:09,246
Which template should I use?


509
00:26:09,306 --> 00:26:10,656
Is this ModularSmall?


510
00:26:10,656 --> 00:26:14,406
Which text providers go with the
template I'm choosing for that?


511
00:26:14,676 --> 00:26:17,056
And in addition to
passing the complication


512
00:26:17,056 --> 00:26:18,766
that you are interested
in providing content for,


513
00:26:18,766 --> 00:26:20,496
we are also going to
give you a handler.


514
00:26:20,926 --> 00:26:23,176
And you use this handler to give
us the data we have requested


515
00:26:23,176 --> 00:26:24,376
and let us know you
are done running.


516
00:26:24,846 --> 00:26:26,286
This is very important
because you are going


517
00:26:26,286 --> 00:26:28,716
to have opportunities to refresh
your content in the background.


518
00:26:29,036 --> 00:26:32,046
We want to know when
you are done running.


519
00:26:32,856 --> 00:26:34,306
So let's start building
up our timeline.


520
00:26:34,806 --> 00:26:37,526
You will see we have our clock
face on the left, your extension


521
00:26:37,526 --> 00:26:42,576
on the right and the timeline we
want to build across the bottom.


522
00:26:42,736 --> 00:26:45,386
Inside of your extension you
will have your complication


523
00:26:45,386 --> 00:26:46,236
controller object.


524
00:26:46,716 --> 00:26:49,666
Now, this is the default object
that Xcode will create for you


525
00:26:49,666 --> 00:26:52,666
that implements the
ComplicationDataSource protocol.


526
00:26:52,896 --> 00:26:54,796
This is the object we are
going to be communicating with.


527
00:26:55,486 --> 00:26:59,746
So to get started, we
are going to ask you


528
00:26:59,746 --> 00:27:03,626
which timeline entry should
we be displaying right now.


529
00:27:04,686 --> 00:27:07,736
So you will package up a
timeline entry and send it


530
00:27:07,736 --> 00:27:10,546
over the wire via the handler,
and then we're going to add it


531
00:27:10,546 --> 00:27:11,646
onto the timeline right then.


532
00:27:11,646 --> 00:27:13,756
What's important
to note with all


533
00:27:13,756 --> 00:27:15,616
of these questions
we are asking you is


534
00:27:15,616 --> 00:27:17,116
that we are basing
the next questions


535
00:27:17,116 --> 00:27:18,936
on the information you have
given in the previous one.


536
00:27:19,156 --> 00:27:19,676
So we are going


537
00:27:19,676 --> 00:27:21,976
to be incrementally
building this timeline out.


538
00:27:22,046 --> 00:27:23,476
We want the data to
be super accurate.


539
00:27:23,866 --> 00:27:25,876
You don't want to blindly
tag the current NSDate


540
00:27:25,876 --> 00:27:26,496
for this entry.


541
00:27:26,906 --> 00:27:30,406
If it's 10:30 a.m. and we want
10:00 a.m. forecast data you


542
00:27:30,406 --> 00:27:34,926
should tag this complication
timeline entry with 10:00 a.m.


543
00:27:35,086 --> 00:27:38,836
So the function we will ask
is GetCurrentTimelineEntry


544
00:27:38,836 --> 00:27:39,646
ForComplication.


545
00:27:40,606 --> 00:27:42,736
Again, we are going to
pass you a CLKComplication.


546
00:27:43,166 --> 00:27:45,566
This has a Family property
you should switch on to decide


547
00:27:45,566 --> 00:27:47,776
which template, which text
and image providers you want


548
00:27:47,776 --> 00:27:51,316
to supply, and a handler
that takes the timeline entry


549
00:27:51,316 --> 00:27:54,626
that you should call when you
are done with this callback.


550
00:27:55,476 --> 00:27:57,646
So now we have your
current entry and we need


551
00:27:57,646 --> 00:27:58,976
to start fleshing
out your timeline


552
00:27:58,976 --> 00:28:00,576
to the future and the past.


553
00:28:00,576 --> 00:28:01,756
Let's start looking
to the future.


554
00:28:02,876 --> 00:28:06,446
We are going to ask you
incrementally what timelines you


555
00:28:06,446 --> 00:28:07,726
have after a specific date.


556
00:28:08,196 --> 00:28:09,946
This date will generally
be based off


557
00:28:09,946 --> 00:28:11,606
of previous data
you have handed us


558
00:28:11,676 --> 00:28:13,146
and what's still in our cache.


559
00:28:14,186 --> 00:28:17,866
So we will hand you this date
and you will package up an array


560
00:28:17,866 --> 00:28:20,276
of CLKComplication
timeline entries that start


561
00:28:20,446 --> 00:28:21,786
after this date non-inclusively.


562
00:28:22,616 --> 00:28:27,036
A good rule of thumb is
charting a day's worth of data.


563
00:28:27,036 --> 00:28:29,036
When you send this data over
the wire, we will add it


564
00:28:29,036 --> 00:28:30,956
to your timeline and
if we feel we need


565
00:28:30,956 --> 00:28:32,776
to cache more data we
will ask you again.


566
00:28:33,216 --> 00:28:34,496
In which case if
you have more data


567
00:28:34,496 --> 00:28:36,236
to give us you happily
provide the array.


568
00:28:36,966 --> 00:28:39,456
Let's say we keep asking you


569
00:28:39,456 --> 00:28:42,276
and there is no more
content to show.


570
00:28:42,326 --> 00:28:44,956
You can pass an empty
NSArray or nil


571
00:28:44,956 --> 00:28:46,716
and that will give us the
hint to leave you alone.


572
00:28:46,716 --> 00:28:50,816
As time progresses all of
your entries will be further


573
00:28:50,816 --> 00:28:52,746
and further into the
past so it's possible


574
00:28:52,746 --> 00:28:54,186
to increase our cache,
we might have


575
00:28:54,186 --> 00:28:55,406
to query you again
in the future.


576
00:28:56,046 --> 00:29:00,276
So the future we are calling
here is getTimelineEntries


577
00:29:00,276 --> 00:29:01,006
ForComplication.


578
00:29:01,296 --> 00:29:03,726
We are always going to pass you
the complication we are curious


579
00:29:03,726 --> 00:29:05,226
about, so look at
the Family property.


580
00:29:05,866 --> 00:29:08,186
And then, of course,
we are going


581
00:29:08,186 --> 00:29:09,036
to give you the after date.


582
00:29:09,036 --> 00:29:10,156
This is the non-inclusive date.


583
00:29:10,156 --> 00:29:13,706
You will package up the adjacent
forward-looking timeline entries


584
00:29:13,706 --> 00:29:14,286
from this date.


585
00:29:14,816 --> 00:29:17,726
And to make sure we don't
get overloaded with data,


586
00:29:18,176 --> 00:29:20,546
we will pass you a
limit parameter here.


587
00:29:21,236 --> 00:29:24,146
So don't put any more
content into the arrays


588
00:29:24,246 --> 00:29:25,916
than this limit provided here.


589
00:29:26,456 --> 00:29:28,476
If you do, we will remove
them in a way we are not going


590
00:29:28,476 --> 00:29:30,286
to guarantee won't change
and you are not going


591
00:29:30,286 --> 00:29:31,166
to find out what that means.


592
00:29:32,216 --> 00:29:34,866
And then, of course, a
handler that takes this array.


593
00:29:35,506 --> 00:29:38,786
And corresponding to go into the
future we have the before date


594
00:29:38,786 --> 00:29:43,726
feature of this function that
helps flesh out the past.


595
00:29:43,726 --> 00:29:45,086
So depending on the type


596
00:29:45,086 --> 00:29:47,106
of complication you are
providing your needs


597
00:29:47,106 --> 00:29:48,416
for Time Travel may vary.


598
00:29:48,906 --> 00:29:51,516
Whether a complication that only
provides future forecast doesn't


599
00:29:51,516 --> 00:29:53,086
want to Time Travel
into the past


600
00:29:53,356 --> 00:29:55,666
and a stock complication can
only Time Travel to the past


601
00:29:56,076 --> 00:29:57,766
because we haven't
perfected looking


602
00:29:57,766 --> 00:29:58,596
into the future for that.


603
00:29:59,366 --> 00:30:02,096
So we will ask you on setup
which directions you support.


604
00:30:03,096 --> 00:30:05,946
So for the case of our
weather complication,


605
00:30:05,946 --> 00:30:07,216
we will say we only
support the future


606
00:30:07,736 --> 00:30:09,736
and that way our timeline
will only look forward.


607
00:30:10,036 --> 00:30:12,016
If the user Time Travels into
the past we'll actually dim


608
00:30:12,016 --> 00:30:13,546
out your content so they
know there's nothing there


609
00:30:13,606 --> 00:30:14,896
to look at.


610
00:30:15,266 --> 00:30:16,806
Similarly for the
stock complication,


611
00:30:17,116 --> 00:30:18,586
you may say you only
provide the past.


612
00:30:18,646 --> 00:30:20,196
And we will dim in
the other direction.


613
00:30:20,876 --> 00:30:24,926
It's possible that you don't
want to support Time Travel,


614
00:30:24,926 --> 00:30:27,306
but you still want to get
contents onto your watch face.


615
00:30:27,986 --> 00:30:30,446
In that case, you want to
supply none as an option.


616
00:30:30,496 --> 00:30:32,476
We will still show your
content but as soon


617
00:30:32,476 --> 00:30:34,416
as we enter Time Travel
we'll actually dim it out.


618
00:30:35,236 --> 00:30:37,046
It's important to note
that you might know some


619
00:30:37,046 --> 00:30:38,516
of the content you want
to show in the future.


620
00:30:38,516 --> 00:30:40,956
We will ask you, even though
you're not supporting Time


621
00:30:40,956 --> 00:30:43,716
Travel forward, for data we
might possibly be able to cache.


622
00:30:43,866 --> 00:30:45,536
We will never ask
you about the past


623
00:30:45,536 --> 00:30:47,236
because right now time
doesn't travel backwards.


624
00:30:47,916 --> 00:30:51,996
And if you want to a truly
bi-directional Time Travel


625
00:30:51,996 --> 00:30:54,386
experience you can support
forward and backward.


626
00:30:55,066 --> 00:30:57,996
So the function we will call


627
00:30:57,996 --> 00:31:01,016
to get this information during
setup is getSupportedTimeTravel


628
00:31:01,016 --> 00:31:02,136
DirectionsForComplication.


629
00:31:02,136 --> 00:31:04,296
We will pass you the
complication we are asking


630
00:31:04,296 --> 00:31:06,676
about as well as a handler
that accepts these directions.


631
00:31:07,446 --> 00:31:09,776
Now, giving an indication


632
00:31:09,776 --> 00:31:12,116
to what directions you support
may not be the full story


633
00:31:12,446 --> 00:31:14,066
for your Time Travel
complication.


634
00:31:14,536 --> 00:31:17,016
For instance, our weather
complication only had a forecast


635
00:31:17,016 --> 00:31:19,926
up until 7:00 p.m. but Time
Travel goes beyond that.


636
00:31:20,406 --> 00:31:22,736
So let's take a look
at what happens.


637
00:31:22,736 --> 00:31:25,136
As we Time Travel forward to
4:00 p.m. we still have data.


638
00:31:25,136 --> 00:31:26,426
All of our complications
are updating.


639
00:31:26,426 --> 00:31:29,766
But once we get to 7:09,
just past 7:00 p.m.,


640
00:31:30,266 --> 00:31:32,356
we don't want our users to
think we have valid data


641
00:31:32,356 --> 00:31:34,606
for the temperature in
the area so we will dim


642
00:31:34,606 --> 00:31:35,606
out your complication here.


643
00:31:36,246 --> 00:31:39,376
So the way that we figure
out when to actually dim


644
00:31:39,376 --> 00:31:41,466
out your complication is
by querying you for the end


645
00:31:41,466 --> 00:31:43,086
or beginning of your
timeline depending


646
00:31:43,086 --> 00:31:44,386
on the directions you support


647
00:31:44,386 --> 00:31:48,146
so we will ask you during setup
how far out into the future


648
00:31:48,146 --> 00:31:49,646
if you are a forward
complication,


649
00:31:49,646 --> 00:31:52,226
and you will give
us an NSDate back.


650
00:31:52,956 --> 00:31:55,176
If you support Time Travel
to the past, similarly,


651
00:31:55,176 --> 00:31:57,226
you can provide us another
NSDate to this question


652
00:32:01,076 --> 00:32:02,326
and we will adjust accordingly.


653
00:32:02,516 --> 00:32:04,066
We will adjust accordingly.


654
00:32:04,066 --> 00:32:06,356
So the function we are going
to call to find out how far


655
00:32:06,356 --> 00:32:09,216
into the future we should Time
Travel is getTimelineAndDate


656
00:32:09,356 --> 00:32:10,056
ForComplication.


657
00:32:10,596 --> 00:32:13,336
We will pass you the
complication and, of course,


658
00:32:13,476 --> 00:32:14,906
a handler that accepts
the NSDate


659
00:32:14,906 --> 00:32:15,656
for the end of your timeline.


660
00:32:17,076 --> 00:32:20,056
Correspondingly, we have
getTimelineStartDate to see


661
00:32:20,056 --> 00:32:22,896
when your timeline should begin.


662
00:32:23,146 --> 00:32:26,216
So when a user is customizing
the complication, the watch face


663
00:32:26,366 --> 00:32:28,006
and they want to select
your complication,


664
00:32:28,746 --> 00:32:31,116
they will select the slot
in this case ModularLarge


665
00:32:31,236 --> 00:32:32,936
and use the Digital Crown to end


666
00:32:32,936 --> 00:32:35,436
up on the San Francisco
soccer club complication.


667
00:32:35,896 --> 00:32:37,556
You will see here
a couple of things


668
00:32:37,556 --> 00:32:39,236
about the state of
customization.


669
00:32:40,576 --> 00:32:42,816
There is a caption but
your complications entry


670
00:32:42,816 --> 00:32:43,956
that says your application's
name


671
00:32:43,956 --> 00:32:45,156
and this is provided
by the system.


672
00:32:45,676 --> 00:32:48,686
Now, that we are in the
modular large slot we are able


673
00:32:48,686 --> 00:32:50,436
to provide a ModularLarge
template


674
00:32:50,436 --> 00:32:53,106
that describes what
our users expect to see


675
00:32:53,106 --> 00:32:54,346
and give them the right context


676
00:32:54,566 --> 00:32:56,586
for why they should
select our complication.


677
00:32:57,176 --> 00:32:59,836
After they select
the complication,


678
00:33:00,416 --> 00:33:02,376
go back to the switcher
and back to the live face.


679
00:33:02,376 --> 00:33:07,056
We will start querying you for
data and populate the timeline.


680
00:33:07,056 --> 00:33:08,486
We call those templates
we present


681
00:33:08,486 --> 00:33:10,456
in customization
placeholder templates.


682
00:33:11,046 --> 00:33:13,526
We will query you once
on installation and cache


683
00:33:13,566 --> 00:33:15,506
that so we don't have to
launch multiple extensions


684
00:33:15,506 --> 00:33:16,426
during customization.


685
00:33:17,366 --> 00:33:20,346
So during installation, for all


686
00:33:20,566 --> 00:33:23,856
of the complications you
support, we will query you


687
00:33:23,856 --> 00:33:24,916
for your placeholder template


688
00:33:25,456 --> 00:33:27,756
to which you provide us a
CLKComplicationTemplate.


689
00:33:28,206 --> 00:33:29,876
There is no timeline
on the bottom,


690
00:33:29,986 --> 00:33:32,506
this isn't happening live
while we are using it.


691
00:33:32,736 --> 00:33:34,066
And we are not using
a timeline entry


692
00:33:34,066 --> 00:33:34,996
in this callback right here,


693
00:33:34,996 --> 00:33:36,486
it's just a complication
template


694
00:33:36,546 --> 00:33:37,986
because there is no
date to associate.


695
00:33:38,866 --> 00:33:41,386
So the function we are calling
is getPlaceholderTemplate


696
00:33:41,696 --> 00:33:44,956
ForComplication with a
complication and as you are used


697
00:33:44,956 --> 00:33:46,606
to with this pattern, a handler.


698
00:33:47,786 --> 00:33:50,706
So now that you are very
comfortable constructing your


699
00:33:50,706 --> 00:33:52,316
timeline, I would like
to bring Eliza Block


700
00:33:52,316 --> 00:33:53,956
up to give you a demo of how


701
00:33:53,956 --> 00:33:59,976
to construct this
in code [applause].


702
00:34:00,676 --> 00:34:00,976
>> ELIZA BLOCK: Okay.


703
00:34:01,546 --> 00:34:03,496
So I have got a project here


704
00:34:03,496 --> 00:34:05,976
that I haven't done
very much to yet.


705
00:34:06,046 --> 00:34:08,025
We are going to actually
build the complication


706
00:34:08,286 --> 00:34:09,516
that we have been
showing you pictures


707
00:34:09,516 --> 00:34:12,656
of throughout the session.


708
00:34:12,735 --> 00:34:16,226
So let me just show you a
little bit about what's going


709
00:34:16,226 --> 00:34:17,426
on with Xcode project.


710
00:34:17,426 --> 00:34:20,176
I created a new project, I
dragged a couple resources in,


711
00:34:20,376 --> 00:34:22,406
including a model that
I had previously written


712
00:34:22,585 --> 00:34:24,176
to provide this schedule.


713
00:34:25,525 --> 00:34:32,016
And I configured it to work with
complications, so if I navigate


714
00:34:32,016 --> 00:34:34,856
over here to my -- oops!


715
00:34:38,315 --> 00:34:41,056
General settings for
my Watch extension.


716
00:34:41,056 --> 00:34:41,866
There it is.


717
00:34:42,545 --> 00:34:44,315
If I zoom in, you
can see at the top


718
00:34:44,666 --> 00:34:46,946
that I have got my
dataSource class.


719
00:34:47,045 --> 00:34:48,946
It looks a little ugly
in Xcode at the moment


720
00:34:48,946 --> 00:34:51,126
but if you click it you
can see it is pointing


721
00:34:51,126 --> 00:34:52,456
to our complication class.


722
00:34:52,976 --> 00:34:55,706
And then I have, for
now, unchecked all


723
00:34:55,706 --> 00:34:58,896
of the supported families
except for ModularLarge just


724
00:34:58,936 --> 00:35:00,916
to make things simpler in
the demo we will just focus


725
00:35:00,916 --> 00:35:02,626
on building the ModularLarge
complication.


726
00:35:02,976 --> 00:35:05,606
We recommend that you do
try to support as many


727
00:35:05,606 --> 00:35:07,756
of these different
families as you can


728
00:35:07,756 --> 00:35:09,886
because your users
will be interested


729
00:35:09,886 --> 00:35:12,956
in choosing different
faces and so the more


730
00:35:12,956 --> 00:35:14,806
of these families you support,
the more likely they are


731
00:35:14,806 --> 00:35:17,706
to be able to use your
content in their watch face.


732
00:35:18,476 --> 00:35:25,926
So when you created this
Xcode project, Xcode and say


733
00:35:26,056 --> 00:35:27,706
that you want to
support complications,


734
00:35:27,706 --> 00:35:31,606
Xcode actually makes a
complicationController object


735
00:35:32,456 --> 00:35:34,206
with stubs for all
of the methods


736
00:35:34,206 --> 00:35:35,436
that you need to implement.


737
00:35:35,966 --> 00:35:37,616
And this is pretty handy.


738
00:35:37,616 --> 00:35:40,106
We can go through it
and just flesh it out


739
00:35:40,106 --> 00:35:42,496
and have it give us the
information that we need.


740
00:35:42,896 --> 00:35:45,436
So I'm going to start
at the bottom here.


741
00:35:45,436 --> 00:35:48,986
I'm going to add some
extra space so we can see.


742
00:35:49,526 --> 00:35:52,376
At this getPlaceholder
TemplateForComplication.


743
00:35:52,546 --> 00:35:55,556
I want to do this first so
that we can actually go ahead


744
00:35:55,556 --> 00:35:57,666
and pick the complication
and have it look the way


745
00:35:57,666 --> 00:35:59,116
that Paul just showed
in the slides.


746
00:35:59,116 --> 00:36:03,546
So I'm going to remove the
boilerplate that Xcode provided.


747
00:36:03,986 --> 00:36:09,016
And we are going to make an
actual complication template


748
00:36:09,256 --> 00:36:14,666
of the ModularLargeStandardBody
class.


749
00:36:15,776 --> 00:36:18,856
I'm going to give it an image
which is my soccer ball image.


750
00:36:19,066 --> 00:36:22,006
Now, so I have got my
image as a UI image


751
00:36:22,006 --> 00:36:25,196
and I'm creating an image
provider using that image


752
00:36:25,196 --> 00:36:27,456
and I will not bother with
the background color for now.


753
00:36:28,076 --> 00:36:29,916
Let me show you what
that image looks like.


754
00:36:29,916 --> 00:36:31,596
I have it here in Xcode


755
00:36:31,596 --> 00:36:35,626
and I can actually open
it up in the Finder.


756
00:36:35,626 --> 00:36:39,606
And here is Preview.


757
00:36:39,686 --> 00:36:41,506
Let me zoom way in.


758
00:36:41,506 --> 00:36:46,746
So as you can see, this
is a template image.


759
00:36:46,916 --> 00:36:47,856
It's monochrome.


760
00:36:48,066 --> 00:36:49,576
It has alpha, an alpha channel


761
00:36:49,576 --> 00:36:51,516
so this is the format you
want your images to be


762
00:36:51,516 --> 00:36:53,506
in so they can get
properly colorized.


763
00:36:54,036 --> 00:36:58,236
Okay. So there is our image


764
00:36:59,166 --> 00:37:02,236
and we also need to
provide some text.


765
00:37:02,236 --> 00:37:05,046
So my header text provider is
going to say "Match schedule"


766
00:37:05,216 --> 00:37:07,386
and my body 1 text
provider is going to say


767
00:37:07,386 --> 00:37:08,996
"2015 Women's Tournament."


768
00:37:09,556 --> 00:37:11,926
I will not provide a
body 2 text provider,


769
00:37:12,036 --> 00:37:13,926
that's optional for
this template.


770
00:37:13,926 --> 00:37:17,526
And my goal here is for the
text in the first line to wrap


771
00:37:17,756 --> 00:37:19,036
to the second line
which will happen


772
00:37:19,036 --> 00:37:21,086
if you omit the second
text provider.


773
00:37:21,656 --> 00:37:26,856
We can build and run this with
only that much code added.


774
00:37:27,276 --> 00:37:29,026
And then we should be able


775
00:37:29,026 --> 00:37:31,196
to pick our complication
in editing.


776
00:37:31,966 --> 00:37:35,326
So I will switch over
to the simulators.


777
00:37:36,046 --> 00:37:41,206
And let me just double check
that the installation happened.


778
00:37:41,206 --> 00:37:41,986
Yes, there is our app.


779
00:37:42,076 --> 00:37:42,626
That's good.


780
00:37:43,236 --> 00:37:47,406
So I'm going to force
press on the simulator,


781
00:37:48,696 --> 00:37:51,666
customize, scroll over -- oops!


782
00:37:51,776 --> 00:37:53,066
To the complication pane.


783
00:37:53,466 --> 00:37:56,016
Actually, you know what
I'm going to do first --


784
00:37:56,016 --> 00:38:00,436
as Paul mentioned we only call
this placeholder template method


785
00:38:00,436 --> 00:38:03,026
once, when your app
is first installed,


786
00:38:03,396 --> 00:38:06,446
so if you do something like
that, you are going to want


787
00:38:06,596 --> 00:38:10,506
to uninstall it so that
then -- oh, this is --


788
00:38:11,536 --> 00:38:14,276
make sure that it's
gone from the -- oops!


789
00:38:14,446 --> 00:38:14,726
There we go.


790
00:38:14,836 --> 00:38:16,816
So make sure it gets
uninstalled.


791
00:38:17,496 --> 00:38:20,316
It's gone.


792
00:38:20,446 --> 00:38:23,906
And then we will have
it show up again.


793
00:38:24,236 --> 00:38:27,586
So that way our code
will ask you again


794
00:38:28,006 --> 00:38:29,096
for the placeholder template.


795
00:38:29,346 --> 00:38:30,916
So let's try this again.


796
00:38:40,076 --> 00:38:56,006
So let's have it not be
there and then -- all right.


797
00:38:56,176 --> 00:38:59,456
We will add it back in.


798
00:38:59,956 --> 00:39:14,486
And let's try this
one more time.


799
00:39:14,696 --> 00:39:16,646
Yay! Okay [applause].


800
00:39:18,456 --> 00:39:19,976
All right.


801
00:39:20,076 --> 00:39:23,766
So we have our template and
now we can actually select


802
00:39:23,766 --> 00:39:24,576
the complication.


803
00:39:24,576 --> 00:39:27,726
So I'm going to go ahead
and home out of there,


804
00:39:28,046 --> 00:39:29,806
and as you can see the
complication, of course,


805
00:39:29,806 --> 00:39:31,796
is not showing, switching
to showing live data


806
00:39:31,796 --> 00:39:33,016
because we haven't
written the part


807
00:39:33,246 --> 00:39:34,446
that provides the live data.


808
00:39:34,546 --> 00:39:38,396
So the -- so it's
just going to stick


809
00:39:38,396 --> 00:39:39,966
with the placeholder
template which is all


810
00:39:39,966 --> 00:39:41,436
of the information
it's got so far.


811
00:39:41,746 --> 00:39:43,906
Let's go back to the code
and we will add the part


812
00:39:43,906 --> 00:39:46,596
that actually implements the
rest of the protocol methods.


813
00:39:47,236 --> 00:39:51,356
Okay. So let me show
you about, a little bit


814
00:39:51,426 --> 00:39:52,956
about the model that I'm using.


815
00:39:52,956 --> 00:39:54,146
I will just switch
to the header.


816
00:39:54,146 --> 00:39:57,386
I have got a model and written
my model in Objective-C.


817
00:39:57,716 --> 00:39:59,826
You can mix and match
Objective-C and Swift


818
00:39:59,826 --> 00:40:03,766
in projects so you can take
code written in an existing app


819
00:40:03,766 --> 00:40:07,696
and pull it over into your
new watchOS 2 app and as long


820
00:40:07,696 --> 00:40:10,516
as you include the
header for that


821
00:40:10,516 --> 00:40:12,596
in your Swift bridging header,


822
00:40:12,596 --> 00:40:14,266
it will just work,
which is cool.


823
00:40:14,266 --> 00:40:16,646
So here is my soccer
match model object.


824
00:40:16,646 --> 00:40:18,826
And these guys have a
date which is the date


825
00:40:18,826 --> 00:40:19,766
that the match begins.


826
00:40:20,086 --> 00:40:22,786
They have a team description
which tells you who is playing,


827
00:40:23,286 --> 00:40:26,446
and what group in the
tournament this is.


828
00:40:26,666 --> 00:40:30,356
And also the model can tell
me what the first match


829
00:40:30,356 --> 00:40:32,596
in the schedule is,
what the last match is


830
00:40:32,596 --> 00:40:35,166
and then each match can tell
me the previous and the next.


831
00:40:35,946 --> 00:40:40,386
So with that handy, we can start
writing the code that's actually


832
00:40:40,386 --> 00:40:41,946
going to populate
this complication.


833
00:40:42,566 --> 00:40:47,066
So I'm going to write
two helper methods


834
00:40:47,456 --> 00:40:51,156
to solve the two problems
that we need to figure out,


835
00:40:51,236 --> 00:40:53,536
basically the two design
questions that we need to figure


836
00:40:53,536 --> 00:40:54,606
out for this complication.


837
00:40:54,856 --> 00:40:57,906
The first one is what should
our template actually look like?


838
00:40:57,906 --> 00:41:00,746
And for that, I'm
going to write a method


839
00:41:00,746 --> 00:41:03,556
that takes a soccer match


840
00:41:04,676 --> 00:41:08,906
and provides a
CLKComplicationTemplate object.


841
00:41:09,416 --> 00:41:11,156
So this is pretty
straightforward.


842
00:41:11,416 --> 00:41:15,726
We want to build a
-- all is well --


843
00:41:15,726 --> 00:41:18,416
build a ModularLarge standard
body template like we did


844
00:41:18,416 --> 00:41:20,746
for the place holder and get


845
00:41:21,336 --> 00:41:25,416
that same soccer ball image
provided as an image provider


846
00:41:25,416 --> 00:41:27,656
and then we are going
to have three lines


847
00:41:27,656 --> 00:41:28,766
of text for this one.


848
00:41:28,766 --> 00:41:31,416
So the header is going to
be the time of the match.


849
00:41:31,606 --> 00:41:35,446
And I'm using a CLKTime text
provider for that purpose.


850
00:41:35,956 --> 00:41:41,686
And then the first line of text
underneath the header will tell


851
00:41:41,686 --> 00:41:44,626
us which teams are playing and
I'm using a simple text provider


852
00:41:45,016 --> 00:41:49,686
with my matches team
description, and then finally,


853
00:41:49,686 --> 00:41:53,826
the third line is the
group description.


854
00:41:54,496 --> 00:41:55,856
So now we have got a template.


855
00:41:56,906 --> 00:41:58,506
We also have to decide
how we are going


856
00:41:58,506 --> 00:42:00,656
to arrange these
templates on our timeline.


857
00:42:01,076 --> 00:42:04,606
Now, the naive solution which
Paul mentioned in the context


858
00:42:04,606 --> 00:42:09,286
of a calendar complication would
be to use the match start date


859
00:42:09,476 --> 00:42:11,326
to be the date of
our timeline entry,


860
00:42:11,326 --> 00:42:14,066
but that would have the drawback
that it has for the calendar


861
00:42:14,066 --> 00:42:16,146
as well which is you
wouldn't be able to look


862
00:42:16,146 --> 00:42:18,436
at your complication to see
what game is about to start.


863
00:42:18,436 --> 00:42:21,166
You would only be able to see
what game has already started.


864
00:42:21,536 --> 00:42:23,866
So we actually want to do
the same thing Paul did


865
00:42:23,866 --> 00:42:25,376
with the calendar and move all


866
00:42:25,376 --> 00:42:27,116
of these entries
farther forward.


867
00:42:27,116 --> 00:42:30,356
We will have each
entry start at the time


868
00:42:30,356 --> 00:42:32,106
when the previous match ended.


869
00:42:32,546 --> 00:42:35,146
So for that, we have to decide
how long a soccer match is,


870
00:42:35,146 --> 00:42:37,496
so I have decided that
they are about 90 minutes.


871
00:42:37,626 --> 00:42:41,016
So I'm going to use a constant
that we could change later


872
00:42:41,016 --> 00:42:42,846
if we discover we are wrong.


873
00:42:42,846 --> 00:42:45,836
So the match duration we
will say is 90 minutes.


874
00:42:46,496 --> 00:42:53,256
And then we can write a method
timelineEntryDateForMatch


875
00:42:53,526 --> 00:42:56,366
that goes and figures
out for any given match


876
00:42:56,696 --> 00:42:58,796
where that should
appear on the timeline.


877
00:42:58,956 --> 00:43:04,646
So what we will do is we
will say, okay, match,


878
00:43:04,836 --> 00:43:06,146
what match is before you?


879
00:43:06,636 --> 00:43:09,006
And if there is one, then
we are going to use the end


880
00:43:09,006 --> 00:43:12,076
of that match as the
timeline date for this match.


881
00:43:12,646 --> 00:43:18,876
So if we have one, we will
return its date incremented


882
00:43:19,306 --> 00:43:21,156
by the duration of a match.


883
00:43:21,366 --> 00:43:28,346
And if we don't, that means it's
the first match in the schedule


884
00:43:28,346 --> 00:43:30,256
and I have pretty arbitrarily
decided that I'm going


885
00:43:30,256 --> 00:43:33,316
to start displaying the first
match six hours before it starts


886
00:43:33,386 --> 00:43:36,586
but you could obviously do
something different here


887
00:43:36,586 --> 00:43:38,656
depending on your use case.


888
00:43:38,656 --> 00:43:40,636
So those are the two
methods that are kind


889
00:43:40,636 --> 00:43:41,966
of doing the meat of the work.


890
00:43:42,276 --> 00:43:45,746
Now, we just need to go
through and implement all


891
00:43:45,746 --> 00:43:47,956
of the different protocol
methods that Paul described.


892
00:43:48,366 --> 00:43:49,906
So let's start from
the beginning.


893
00:43:49,906 --> 00:43:51,716
So here we have the
timeline configuration


894
00:43:51,716 --> 00:43:54,286
and the first method is
getSupportedTimeTravel


895
00:43:54,286 --> 00:43:55,706
DirectionsForComplication.


896
00:43:56,286 --> 00:44:00,066
The default Xcode
template here is saying


897
00:44:00,066 --> 00:44:02,366
that your timeline extends
both forward and backwards


898
00:44:02,366 --> 00:44:03,656
and that's what we
want in this case


899
00:44:03,736 --> 00:44:05,046
so we will leave that one alone.


900
00:44:05,906 --> 00:44:07,776
The next thing we
have to think about is


901
00:44:07,776 --> 00:44:09,216
when our timeline starts.


902
00:44:09,596 --> 00:44:12,576
So because we have written
these helper methods we can do


903
00:44:12,576 --> 00:44:13,476
that pretty easily.


904
00:44:13,756 --> 00:44:15,976
I will get rid of
the handler with nil


905
00:44:16,246 --> 00:44:18,356
and instead we will
figure out a start date


906
00:44:18,356 --> 00:44:22,036
which will be the entry date
of the first soccer match.


907
00:44:23,276 --> 00:44:26,306
And let's not forgot
to call the handler.


908
00:44:26,306 --> 00:44:29,476
And then the next thing we need


909
00:44:29,476 --> 00:44:31,046
to do is figure out
the end date.


910
00:44:32,016 --> 00:44:34,796
So the end date of the
timeline should probably be


911
00:44:34,916 --> 00:44:36,696
after the last match is over.


912
00:44:37,216 --> 00:44:40,096
So we will get the last match.


913
00:44:40,816 --> 00:44:44,416
We will get its date, and we
will add the match duration


914
00:44:44,416 --> 00:44:46,956
to that date and that's going
to be our timeline end date.


915
00:44:46,956 --> 00:44:50,886
We will call that
with a handler.


916
00:44:50,976 --> 00:44:53,186
This next method is something
we haven't actually gone


917
00:44:53,236 --> 00:44:55,576
into at all in the session,
but it's an important method


918
00:44:55,886 --> 00:44:58,226
if your data is in
any way sensitive.


919
00:44:58,596 --> 00:45:01,416
So when your user's Watch
is locked, you don't want


920
00:45:01,416 --> 00:45:03,056
to be showing sensitive
data on the screen


921
00:45:03,056 --> 00:45:04,976
because that's means they
have taken it off their wrist


922
00:45:05,166 --> 00:45:06,496
and somebody else
could have found it.


923
00:45:06,556 --> 00:45:09,496
If you are showing sensitive
data in your complication,


924
00:45:09,496 --> 00:45:13,236
you can use this method to
tell us to be sure to not show


925
00:45:13,236 --> 00:45:14,736
that data when the
device is locked.


926
00:45:15,076 --> 00:45:18,576
Now, the schedule of a fictional
soccer tournament is not


927
00:45:18,576 --> 00:45:21,376
particularly sensitive so I
will leave this at default value


928
00:45:21,376 --> 00:45:25,786
of go ahead and show this on
the lock screen no problem.


929
00:45:26,076 --> 00:45:31,996
So next we get to the
timeline population.


930
00:45:32,636 --> 00:45:34,946
These are the really
important ones.


931
00:45:34,946 --> 00:45:36,316
We need to give the
current entry.


932
00:45:36,316 --> 00:45:38,756
We need to tell us -- we
need to tell the clock how


933
00:45:38,756 --> 00:45:41,616
to extend the timeline backwards
and we need to tell it how


934
00:45:41,616 --> 00:45:43,016
to extend the timeline forwards.


935
00:45:43,386 --> 00:45:44,806
I will start with forwards.


936
00:45:45,376 --> 00:45:46,836
So let's skip down to here.


937
00:45:47,456 --> 00:45:51,686
And what we want to do
is construct an array


938
00:45:52,006 --> 00:45:55,676
of entries starting at the date
we were given and going forward


939
00:45:55,676 --> 00:45:58,336
into the future from there.


940
00:45:58,546 --> 00:46:00,916
My strategy is going
to be to make an array,


941
00:46:01,436 --> 00:46:04,396
and arrange to call the
handler when we are done.


942
00:46:04,976 --> 00:46:12,436
And then we want to iterate
through all of the matches


943
00:46:13,076 --> 00:46:15,686
until we get one that
should start after the date


944
00:46:15,686 --> 00:46:17,656
at which point we are going to
start creating the templates


945
00:46:17,656 --> 00:46:21,656
for that and sticking
them in this array.


946
00:46:22,446 --> 00:46:27,016
So I will start with the
first match in my tournament.


947
00:46:27,016 --> 00:46:29,446
And I have made this
an optional,


948
00:46:29,686 --> 00:46:31,806
not because the first
match might return nil,


949
00:46:32,026 --> 00:46:34,396
but because we are
going to change this


950
00:46:34,396 --> 00:46:36,816
to represent each subsequent
match and eventually we will run


951
00:46:36,816 --> 00:46:39,096
out of matches it will
eventually take on the value


952
00:46:39,096 --> 00:46:43,476
of nil at which point
we will know to stop.


953
00:46:43,686 --> 00:46:49,236
So next we are going to -- oops!


954
00:46:49,466 --> 00:46:54,126
While there is a match here,
we are going to get the date


955
00:46:54,126 --> 00:46:56,586
that we should display
that match at.


956
00:46:56,776 --> 00:46:59,226
That's the timeline entry date
for this particular match.


957
00:46:59,766 --> 00:47:04,856
And now we are going to compare
that to the date we were given,


958
00:47:04,856 --> 00:47:06,816
which is the date after
which we are supposed


959
00:47:06,816 --> 00:47:08,326
to be populating
timeline entries.


960
00:47:09,536 --> 00:47:12,136
If they are order
descending we have gotten


961
00:47:12,136 --> 00:47:14,276
into the right section of
matches and now we want


962
00:47:14,276 --> 00:47:16,746
to start giving back
timeline entries for these.


963
00:47:17,116 --> 00:47:19,006
So we are going to
populate a timeline entry.


964
00:47:19,376 --> 00:47:20,386
It's straightforward.


965
00:47:20,386 --> 00:47:22,096
We make a template
for the match.


966
00:47:23,176 --> 00:47:24,986
That was our other
helper method.


967
00:47:25,996 --> 00:47:28,556
We create an entry
from the entry date


968
00:47:28,556 --> 00:47:30,686
that we computed
and that template.


969
00:47:31,216 --> 00:47:38,246
We append it to our array,
now we need to be careful not


970
00:47:38,246 --> 00:47:39,476
to make too many of these.


971
00:47:39,526 --> 00:47:40,676
We have been past a limit.


972
00:47:41,716 --> 00:47:44,466
We want to adhere to the limit.


973
00:47:44,466 --> 00:47:47,006
So we will just check now
that we have added something


974
00:47:47,006 --> 00:47:50,636
to the array, did the count
of the array reach the limit,


975
00:47:50,636 --> 00:47:53,456
and if so, we will stop.


976
00:47:53,456 --> 00:47:56,386
And finally, to make the
loop work, we need to go


977
00:47:56,386 --> 00:47:58,806
and grab the next
match after the match


978
00:47:58,806 --> 00:47:59,886
that we just dealt with.


979
00:47:59,886 --> 00:48:05,886
So that's going to populate the
next N entries in the timeline


980
00:48:05,966 --> 00:48:07,056
after the date that
we were given,


981
00:48:07,226 --> 00:48:09,426
and we can do something
really similar


982
00:48:09,736 --> 00:48:12,576
to populate the earlier entries.


983
00:48:12,686 --> 00:48:14,666
So I'm just going to copy
that code that we just wrote.


984
00:48:14,666 --> 00:48:17,596
And here I'm going to move


985
00:48:17,596 --> 00:48:21,526
up to the getTimelineEntries
ForComplication before


986
00:48:21,526 --> 00:48:22,406
date method.


987
00:48:23,186 --> 00:48:25,606
Paste it. And we need
to make three changes.


988
00:48:26,116 --> 00:48:28,136
Here we are going to do the
exact same thing except we are


989
00:48:28,136 --> 00:48:31,486
going to start at the last
entry and move forward


990
00:48:31,486 --> 00:48:34,926
or the last match, rather, and
move back towards the first.


991
00:48:35,266 --> 00:48:39,536
So we will start with the
last match and then down here


992
00:48:39,536 --> 00:48:42,476
where the loop happens
we grab the previous one.


993
00:48:42,976 --> 00:48:47,826
Previous. And finally we only
want to start using these


994
00:48:47,826 --> 00:48:50,236
when they get before
the date we were passed.


995
00:48:50,236 --> 00:48:55,446
So we need to switch from order
ascending to order descending.


996
00:48:56,276 --> 00:48:58,396
That's our extension methods.


997
00:48:58,596 --> 00:49:03,506
The last thing we need to write
is the getCurrentTimelineEntry


998
00:49:03,506 --> 00:49:07,556
method and we can do something
tricky and take advantage


999
00:49:07,556 --> 00:49:08,956
of the method we just wrote


1000
00:49:09,156 --> 00:49:12,326
because getting the current
entry is basically getting the


1001
00:49:12,326 --> 00:49:15,266
entry before a particular
date, namely now.


1002
00:49:16,526 --> 00:49:18,016
That's the one we want
to show currently.


1003
00:49:18,386 --> 00:49:21,546
So what I'm going to do is
call the GetTimelineEntries


1004
00:49:21,546 --> 00:49:23,366
ForComplication before
date method


1005
00:49:23,366 --> 00:49:24,766
that we just finished writing.


1006
00:49:25,286 --> 00:49:29,816
I'm going to pass
now as the date.


1007
00:49:30,356 --> 00:49:34,436
I'm going to pass a limit of one


1008
00:49:34,436 --> 00:49:35,976
because we only need
one entry here.


1009
00:49:35,976 --> 00:49:41,316
And then when I get my
handler invoked, I'm just going


1010
00:49:41,316 --> 00:49:44,386
to grab the first entry in
that array and pass it back


1011
00:49:44,586 --> 00:49:47,236
to the handler for the
getCurrentTimelineEntry method.


1012
00:49:47,346 --> 00:49:51,986
So we can go ahead and run
this, and what I'm going


1013
00:49:51,986 --> 00:49:54,966
to do is I'm going to run
it and then switch quickly


1014
00:49:54,966 --> 00:49:57,296
over to the simulator, which
as you can see is still running


1015
00:49:57,296 --> 00:50:02,026
here and still showing us
the placeholder template we


1016
00:50:02,026 --> 00:50:02,926
populated earlier.


1017
00:50:03,346 --> 00:50:07,256
So as soon as I run this, it
will invalidate the timeline


1018
00:50:07,776 --> 00:50:11,166
on the simulator, at which point
it's going to go requery all


1019
00:50:11,166 --> 00:50:13,376
of these methods again and now
that we have implemented them,


1020
00:50:13,376 --> 00:50:14,756
we will actually get values.


1021
00:50:14,826 --> 00:50:15,486
So here we go.


1022
00:50:15,486 --> 00:50:16,886
Run and then swap over.


1023
00:50:16,886 --> 00:50:22,776
And then we should see
our stuff populate.


1024
00:50:23,286 --> 00:50:24,996
So there we have actual data.


1025
00:50:24,996 --> 00:50:25,816
This is showing us -


1026
00:50:26,516 --> 00:50:31,546
[ Applause ]


1027
00:50:32,046 --> 00:50:34,646
So this is showing us the
game that started at 11:00,


1028
00:50:34,646 --> 00:50:37,146
which is the right behavior if
you remember, because we wanted


1029
00:50:37,146 --> 00:50:39,436
to see the game that
started at 11:00


1030
00:50:39,436 --> 00:50:41,136
until 12:30, 90 minutes later.


1031
00:50:41,506 --> 00:50:46,216
If we Time Travel
forwards and reach 12:30,


1032
00:50:46,216 --> 00:50:48,926
we should start seeing this
change to the next game.


1033
00:50:49,276 --> 00:50:52,316
So Time Traveling is working if
we get all the way up to 3:00,


1034
00:50:52,316 --> 00:50:54,056
we should start seeing
the one after that.


1035
00:50:54,056 --> 00:50:54,976
Oops! I went way too far.


1036
00:50:54,976 --> 00:50:58,296
Our Time Travel is working.


1037
00:50:58,476 --> 00:51:00,686
All we had to do
was basically fill


1038
00:51:00,686 --> 00:51:02,806
out the three most
important methods


1039
00:51:03,026 --> 00:51:04,526
and we have a functional
complication.


1040
00:51:05,036 --> 00:51:08,416
So I will pass it back over
to Paul who will tell us more


1041
00:51:08,416 --> 00:51:11,396
about how to arrange for
your complication to update


1042
00:51:11,586 --> 00:51:13,716
as information changes
in the world.


1043
00:51:14,516 --> 00:51:22,566
[ Applause ]


1044
00:51:23,066 --> 00:51:23,456
>> PAUL SALZMAN: Thanks Eliza.


1045
00:51:26,956 --> 00:51:30,226
So now that we are up and
running with our complication.


1046
00:51:30,226 --> 00:51:31,736
We want to make sure we are
always showing something


1047
00:51:31,736 --> 00:51:33,856
that is accurate to
the world around us.


1048
00:51:34,396 --> 00:51:37,916
So in watchOS 2 there is a lot
of ways you can get contents


1049
00:51:37,976 --> 00:51:40,176
from the surrounding world
into your Watch extension.


1050
00:51:41,046 --> 00:51:43,226
You can use the new Watch
Connectivity APIs to talk


1051
00:51:43,226 --> 00:51:46,596
to your companion iOS app
and get data onto your Watch.


1052
00:51:46,826 --> 00:51:50,266
Or use NSURLSession directly
to talk to your web services


1053
00:51:50,266 --> 00:51:51,456
and bring content
onto the Watch.


1054
00:51:53,006 --> 00:51:55,676
So let's say we have our
complication timeline built up


1055
00:51:55,936 --> 00:51:57,606
and we go out and talk
to our web services


1056
00:51:57,606 --> 00:52:00,306
and get a new piece of data.


1057
00:52:00,306 --> 00:52:02,446
If that data has invalidated
our content, we will need


1058
00:52:02,446 --> 00:52:05,016
to tell the clock face we
want to reload our timeline.


1059
00:52:05,796 --> 00:52:08,196
So within our extension,
we can get access


1060
00:52:08,256 --> 00:52:10,276
to the CLKComplicationsServer
object.


1061
00:52:11,246 --> 00:52:13,236
That object is our
interface into the clock face.


1062
00:52:14,016 --> 00:52:15,476
We can make a request
to the clock face


1063
00:52:15,476 --> 00:52:18,276
to say please reload my data
at which point we are going


1064
00:52:18,276 --> 00:52:20,036
to throw away all of
your existing content


1065
00:52:20,036 --> 00:52:22,826
and start our communication
channels over again by finding


1066
00:52:22,826 --> 00:52:25,156
out your current timeline and
flushing things out from there.


1067
00:52:26,046 --> 00:52:26,856
You might already notice


1068
00:52:26,856 --> 00:52:30,166
that this is a pretty
destructive action.


1069
00:52:30,256 --> 00:52:32,466
If you had a stocks
complication,


1070
00:52:32,466 --> 00:52:34,696
where all of your previous
data is still valid.


1071
00:52:35,606 --> 00:52:37,086
The clock face isn't
querying you right now.


1072
00:52:37,376 --> 00:52:38,886
It's actually your
responsibility


1073
00:52:38,886 --> 00:52:40,906
to let us know we
either need to invalidate


1074
00:52:40,956 --> 00:52:42,916
or possibly extend your content.


1075
00:52:43,546 --> 00:52:44,766
So instead of getting rid


1076
00:52:44,766 --> 00:52:46,806
of this content you can
make a request to extend.


1077
00:52:47,456 --> 00:52:51,796
At which point instead of
asking you to reload everything,


1078
00:52:51,796 --> 00:52:53,876
we are going to ask you
to append data at the end


1079
00:52:53,876 --> 00:52:56,876
of the most recent content
we have available from you.


1080
00:52:57,616 --> 00:53:02,746
So how does this
look in your code?


1081
00:53:03,156 --> 00:53:04,826
You can get access
to the complication,


1082
00:53:04,906 --> 00:53:07,556
the CLKComplicationServer
shared instance.


1083
00:53:08,576 --> 00:53:10,746
On the shared instance, you
can actually query for all


1084
00:53:10,746 --> 00:53:11,956
of the active complications.


1085
00:53:12,436 --> 00:53:14,906
An active complication is
actually visible right now


1086
00:53:14,906 --> 00:53:17,006
on your watch face if
you were to wrist up.


1087
00:53:17,786 --> 00:53:19,966
And given a complication, you
can actually make a request


1088
00:53:19,966 --> 00:53:22,466
to the server to either
extend the timeline


1089
00:53:22,466 --> 00:53:26,336
or alternatively
reload the timeline.


1090
00:53:26,606 --> 00:53:27,116
So that's great.


1091
00:53:27,116 --> 00:53:29,876
We know it's our responsibility
to inform the clock face we need


1092
00:53:29,916 --> 00:53:32,026
to update, but when do we
actually have an opportunity


1093
00:53:32,026 --> 00:53:32,626
to do this?


1094
00:53:33,916 --> 00:53:36,716
Well, basically any time you
are exception is running you can


1095
00:53:36,716 --> 00:53:38,756
talk over the
CLKComplicationServer


1096
00:53:38,756 --> 00:53:39,776
to the clock face.


1097
00:53:40,536 --> 00:53:42,356
This happens in a
couple of instances,


1098
00:53:42,356 --> 00:53:44,216
like when your watch
application is foremost.


1099
00:53:44,216 --> 00:53:47,056
But you have some
opportunities to run


1100
00:53:47,056 --> 00:53:51,006
in the background via a
locally requested wake or even


1101
00:53:51,006 --> 00:53:54,046
from your iOS companion
application using some new Watch


1102
00:53:54,046 --> 00:53:56,796
Connectivity APIs you can
actually wake the extension


1103
00:53:56,796 --> 00:53:59,406
from the phone so it can receive
the data you have sent over.


1104
00:54:00,956 --> 00:54:03,106
But because the two last
calls allow you to run


1105
00:54:03,106 --> 00:54:05,526
in the background we
have to budget them.


1106
00:54:05,526 --> 00:54:07,276
If you do a lot of
expensive work


1107
00:54:07,276 --> 00:54:09,346
in the background calls
you can exhaust your budget


1108
00:54:09,946 --> 00:54:12,066
and until your budget is
replenished you may not have a


1109
00:54:12,066 --> 00:54:13,686
chance to update
your complication


1110
00:54:13,686 --> 00:54:16,446
until later in the day.


1111
00:54:16,696 --> 00:54:20,016
So learn more about the Watch
Connectivity APIs please go


1112
00:54:20,016 --> 00:54:21,856
to the Introducing Watch
Connectivity session.


1113
00:54:22,276 --> 00:54:24,506
There is also cool push
functionality we have added


1114
00:54:24,506 --> 00:54:27,046
in this release to
support complication data.


1115
00:54:27,866 --> 00:54:29,496
Let's talk a bit more


1116
00:54:29,496 --> 00:54:32,256
about locally scheduling
background wakes in order


1117
00:54:32,256 --> 00:54:35,196
to get your complication data
up to date via one more call


1118
00:54:35,196 --> 00:54:36,976
on the complicationDataSource
protocol.


1119
00:54:36,976 --> 00:54:40,136
All you are going to supply to
us is one date via the handler.


1120
00:54:40,206 --> 00:54:42,716
And we are going to make
this call across all


1121
00:54:42,716 --> 00:54:44,546
of your complications,
not by complication.


1122
00:54:45,916 --> 00:54:47,586
When we receive this date,
we are going to take this


1123
00:54:47,586 --> 00:54:50,146
as a hint, and when
budgetary constraints


1124
00:54:50,146 --> 00:54:51,916
or system conditions are
good we'll launch you


1125
00:54:51,916 --> 00:54:52,586
in the background.


1126
00:54:53,256 --> 00:54:55,456
At this point your
data delegates


1127
00:54:55,456 --> 00:54:57,586
from Watch Connectivity
and NSURL can come in


1128
00:54:57,586 --> 00:55:00,566
and it's your responsibility to
verify if anything has changed


1129
00:55:00,566 --> 00:55:03,336
and make any requests you
need to make to the clock face


1130
00:55:03,336 --> 00:55:04,156
to update your content.


1131
00:55:04,716 --> 00:55:08,526
At this point that's wrapping
up our session on complications.


1132
00:55:09,356 --> 00:55:12,926
We hope you have learned that
to be comfortable with building


1133
00:55:13,076 --> 00:55:15,206
up a timeline and
supplying us with templates


1134
00:55:15,206 --> 00:55:18,326
and the appropriate providers
and to take advantage of all


1135
00:55:18,326 --> 00:55:20,696
of the hard work that went into
the watchOS to actually form


1136
00:55:20,696 --> 00:55:22,756
and fit your content in
these text providers,


1137
00:55:24,296 --> 00:55:26,336
to be comfortable refreshing
your data as the world


1138
00:55:26,336 --> 00:55:30,276
around changes you, you will
get more opportunity to run


1139
00:55:30,276 --> 00:55:32,276
if you are a good
citizen and do less work


1140
00:55:32,276 --> 00:55:33,196
in your background refreshes.


1141
00:55:34,416 --> 00:55:35,596
For more information
please refer


1142
00:55:35,596 --> 00:55:37,156
to your documentation
and sample code.


1143
00:55:37,606 --> 00:55:40,076
We have good technical support
and fantastic evangelists.


1144
00:55:40,076 --> 00:55:43,086
There are great sessions
to dig further


1145
00:55:43,086 --> 00:55:44,536
into WatchKit, thank you!


1146
00:55:46,516 --> 00:56:01,570
[ Applause ]

