1
00:00:07,516 --> 00:00:20,936
[ Music ]


2
00:00:21,436 --> 00:00:22,216
>> Is this thing on?


3
00:00:23,516 --> 00:00:25,866
[ Applause ]


4
00:00:26,366 --> 00:00:27,116
Good afternoon.


5
00:00:27,536 --> 00:00:29,226
I'm Roger Pantos.


6
00:00:29,226 --> 00:00:32,046
This is what's new in
HTTP Live Streaming.


7
00:00:32,625 --> 00:00:36,456
We have been talking about
HLS now for 7 to 8 years.


8
00:00:36,526 --> 00:00:40,236
And yet, every time I do one
of these, marketing says.


9
00:00:40,806 --> 00:00:43,536
"You've got to tell the
people what's going on!"


10
00:00:43,826 --> 00:00:45,506
And so here we go.


11
00:00:46,156 --> 00:00:47,666
Here's what's new.


12
00:00:48,166 --> 00:00:52,046
But, first, HLS in 20 seconds.


13
00:00:52,326 --> 00:00:54,456
So HLS is about playing
playlists.


14
00:00:54,456 --> 00:00:55,146
What's a playlist?


15
00:00:55,386 --> 00:00:56,356
It's one of these things.


16
00:00:56,356 --> 00:00:57,216
It's a TXT file.


17
00:00:57,646 --> 00:01:00,586
It's got tags, which are
these blue things here.


18
00:01:00,926 --> 00:01:02,766
And it's got segments, which
are those white things.


19
00:01:02,766 --> 00:01:04,025
Each one is 10 seconds of media.


20
00:01:04,025 --> 00:01:06,796
If you want to play one,
then you go rummaging


21
00:01:06,796 --> 00:01:09,126
through the tags looking for
something interesting like --


22
00:01:09,126 --> 00:01:11,226
I don't know -- this one
says this is an INF segment.


23
00:01:11,226 --> 00:01:12,456
So, load it first.


24
00:01:12,986 --> 00:01:13,686
So you do that.


25
00:01:14,296 --> 00:01:15,426
Then you load segment1.


26
00:01:15,506 --> 00:01:16,156
You play it.


27
00:01:16,396 --> 00:01:17,306
You load segment2.


28
00:01:17,306 --> 00:01:17,906
You play it.


29
00:01:18,066 --> 00:01:19,266
Maybe it's a live playlist.


30
00:01:19,406 --> 00:01:20,676
So you refresh the playlist.


31
00:01:20,676 --> 00:01:21,636
You load segment3.


32
00:01:21,636 --> 00:01:22,186
You play that.


33
00:01:22,446 --> 00:01:24,576
And that is basically
HLS in a nutshell.


34
00:01:25,136 --> 00:01:27,886
So now that we're all on
the same page about that,


35
00:01:28,696 --> 00:01:29,756
let's go on to what's new.


36
00:01:30,726 --> 00:01:31,946
Sweet. OK.


37
00:01:33,506 --> 00:01:35,246
MPEG-4 Fragment Support.


38
00:01:35,246 --> 00:01:37,766
Who is this MPEG-4 guy
and why is he fragmented?


39
00:01:39,406 --> 00:01:40,966
Actually, most of you
are probably familiar


40
00:01:40,966 --> 00:01:42,266
with MPEG-4 files.


41
00:01:42,266 --> 00:01:45,626
If you've got a movie on
your hard disk, it's probably


42
00:01:45,626 --> 00:01:47,886
in MP4 format or one
of its close cousins.


43
00:01:48,596 --> 00:01:50,526
And if you've ever
looked into it,


44
00:01:50,526 --> 00:01:53,306
it consists of one
sample table --


45
00:01:53,306 --> 00:01:54,776
usually it's at the beginning --


46
00:01:54,836 --> 00:01:57,486
and then all the sample
data following that.


47
00:01:58,476 --> 00:01:59,996
And we did that originally.


48
00:01:59,996 --> 00:02:04,166
Then, we introduced a new
segment a little bit later


49
00:02:04,166 --> 00:02:04,966
called fragments.


50
00:02:04,966 --> 00:02:08,246
And fragments are basically a
way to take your MPEG-4 file


51
00:02:08,506 --> 00:02:11,846
and divide it up into these
little islands of playable data.


52
00:02:11,846 --> 00:02:14,336
A little sample table,
a little sample data.


53
00:02:14,336 --> 00:02:16,666
A little sample table, a
little more sample data.


54
00:02:17,286 --> 00:02:20,746
And these little islands
are all called "Fragments".


55
00:02:21,306 --> 00:02:23,596
So what we're announcing
today is essentially


56
00:02:24,026 --> 00:02:28,566
that what you can do now is
you'll be able to take one


57
00:02:28,566 --> 00:02:30,556
of these things, these
MPEG-4 fragments,


58
00:02:30,786 --> 00:02:33,376
and use it as a segment
in your HLS playlist just


59
00:02:33,376 --> 00:02:35,326
like you can do with
transport stream files


60
00:02:35,666 --> 00:02:37,596
or elementary audio streams.


61
00:02:38,476 --> 00:02:40,506
And we're updating
the spec to sort


62
00:02:40,506 --> 00:02:42,046
of give you the details of that.


63
00:02:42,086 --> 00:02:45,146
There should be a link to
the session I think now.


64
00:02:45,456 --> 00:02:52,786
But what it allows you to do is
essentially use fMP4 segments,


65
00:02:52,786 --> 00:02:56,036
and you can do anything
you can do


66
00:02:56,096 --> 00:02:58,806
with transport streams
with fMP4.


67
00:02:59,046 --> 00:03:01,536
That includes iframe playlists.


68
00:03:01,536 --> 00:03:03,116
That includes discontinuities.


69
00:03:03,116 --> 00:03:04,546
That includes live streams.


70
00:03:04,816 --> 00:03:05,506
All that stuff.


71
00:03:05,506 --> 00:03:06,476
Same set of features.


72
00:03:06,786 --> 00:03:10,286
And of course, we're delivering
it on all of our HLS platforms


73
00:03:10,526 --> 00:03:13,976
so you can choose to encode
all your streams as fMP4


74
00:03:13,976 --> 00:03:16,026
and deliver them
everywhere we are.


75
00:03:16,656 --> 00:03:17,576
Why would you do that?


76
00:03:18,166 --> 00:03:20,976
Well, in a word,
interoperability.


77
00:03:21,716 --> 00:03:23,896
If you're in a situation
where you have


78
00:03:23,896 --> 00:03:27,406
to encode your entire media
library one way to deliver it


79
00:03:27,406 --> 00:03:29,906
to Apple's platforms,
and then maybe you have


80
00:03:29,906 --> 00:03:34,016
to encode it again in another
way to deliver it to Android


81
00:03:34,016 --> 00:03:35,596
for instance, that
kind of sucks.


82
00:03:36,746 --> 00:03:39,486
But if you could have
a single library,


83
00:03:40,176 --> 00:03:42,376
then your delivery
costs would go down,


84
00:03:42,376 --> 00:03:43,736
your storage costs
would go down,


85
00:03:43,996 --> 00:03:45,826
you would get better
cache utilization


86
00:03:45,826 --> 00:03:47,686
because you're no longer
competing with yourself


87
00:03:47,976 --> 00:03:52,336
on the edge, and as
sort of fringe benefit.


88
00:03:53,346 --> 00:03:56,616
Also, if you've got a
single production chain,


89
00:03:56,816 --> 00:04:01,966
you can use the same set
of tools and validation


90
00:04:02,036 --> 00:04:04,076
across all of your ecosystems.


91
00:04:04,486 --> 00:04:08,186
And as a fringe benefit, because
fMP4 doesn't use the same kind


92
00:04:08,186 --> 00:04:10,906
of packetization that
transport streams do,


93
00:04:11,466 --> 00:04:17,086
you get slightly more
efficiency at lower bit rates.


94
00:04:17,086 --> 00:04:19,846
So that's sort of a gimmie.


95
00:04:20,065 --> 00:04:24,076
So how does that change HLS
for you, the playlist author?


96
00:04:24,786 --> 00:04:26,386
Well, as it turns
out, not very much.


97
00:04:26,766 --> 00:04:29,426
If we take our playlist here
that we were looking at earlier


98
00:04:29,636 --> 00:04:33,046
and we convert it to fMP4,
all we have to do is this.


99
00:04:33,486 --> 00:04:35,526
We change the initialization
segment to point


100
00:04:35,526 --> 00:04:38,906
to a movie box instead, and
then each segment becomes an


101
00:04:39,086 --> 00:04:40,146
MPEG-4 fragment.


102
00:04:41,086 --> 00:04:42,246
And that's it.


103
00:04:42,246 --> 00:04:45,316
Everything else is pretty much
the same at the playlist level.


104
00:04:45,906 --> 00:04:48,396
On the segment level, there's
one other thing I was going


105
00:04:48,396 --> 00:04:50,106
to talk about, which
is encryption.


106
00:04:50,536 --> 00:04:52,826
Now, as you know, HLS
has two different ways


107
00:04:52,826 --> 00:04:54,076
of encrypting your stuff.


108
00:04:54,076 --> 00:04:56,456
You can either just
encrypt the entire segment,


109
00:04:56,756 --> 00:04:58,396
AES CBC the entire thing.


110
00:04:58,726 --> 00:05:01,686
And that's the same whether
it's transport streams or fMP4.


111
00:05:02,236 --> 00:05:04,576
For sample encryption,
like if you want


112
00:05:04,576 --> 00:05:08,286
to use FairPlay Streaming, it's
a little bit more complicated


113
00:05:08,746 --> 00:05:10,696
because you have
to say what part


114
00:05:10,696 --> 00:05:12,686
of the files are encrypted
and what part aren't.


115
00:05:13,466 --> 00:05:15,356
And this time around --


116
00:05:15,356 --> 00:05:17,006
last time, we did it
for transport streams.


117
00:05:17,006 --> 00:05:18,456
We essentially made
up our own format.


118
00:05:18,486 --> 00:05:24,206
This time, we decided
to use an existing one.


119
00:05:24,736 --> 00:05:29,726
And so this is what MPEG
calls "Common Encryption".


120
00:05:29,726 --> 00:05:30,406
It's a standard.


121
00:05:30,406 --> 00:05:31,696
It came out a couple years ago.


122
00:05:32,016 --> 00:05:35,746
The newest edition of the
standard has a mode called cbcs,


123
00:05:35,746 --> 00:05:37,446
which is compatible
with FairPlay Streaming.


124
00:05:37,866 --> 00:05:40,256
And so if you're doing
sample encryption in HLS,


125
00:05:40,526 --> 00:05:44,046
you'll be using common
encryption cbcs mode for that.


126
00:05:44,476 --> 00:05:47,266
And so with encryption, and
playlist, and everything else,


127
00:05:47,266 --> 00:05:50,856
we pretty much have a whole
story put together for HLS


128
00:05:51,206 --> 00:05:53,106
around fragmented MPEG-4.


129
00:05:53,596 --> 00:05:57,926
But if we're going to get to
the happy, shiny, bouncy world


130
00:05:57,926 --> 00:06:00,966
where everybody can just have
a single copy of their catalog


131
00:06:01,216 --> 00:06:04,366
and deliver it everywhere,
we have to go beyond HLS.


132
00:06:04,646 --> 00:06:07,006
And one of the things we need
to do is we need to write


133
00:06:07,006 --> 00:06:09,876
down a set of rules that
says, "Here's how you're going


134
00:06:09,876 --> 00:06:14,186
to author your fMP4 segments
or fragments, or what have you,


135
00:06:14,496 --> 00:06:15,696
so that they play everywhere."


136
00:06:16,316 --> 00:06:17,956
And we've been working
on that as well.


137
00:06:17,986 --> 00:06:21,436
It started as sort
of a what-if exercise


138
00:06:21,796 --> 00:06:23,206
between us and Microsoft.


139
00:06:23,206 --> 00:06:25,606
And once we got to the
point where it seemed


140
00:06:25,606 --> 00:06:29,456
like it was practical, it seemed
like it would work, we took it


141
00:06:29,456 --> 00:06:30,726
and proposed it to MPEG.


142
00:06:31,086 --> 00:06:32,566
And a lot of folks there seemed


143
00:06:32,566 --> 00:06:33,746
to think it was a
really good idea.


144
00:06:34,076 --> 00:06:39,106
So what it comes down to is
it's a set of constraints


145
00:06:39,106 --> 00:06:42,166
for how you construct
your fMP4 segments.


146
00:06:42,546 --> 00:06:45,466
So you've got to deliver your
audio and your video separately.


147
00:06:45,466 --> 00:06:47,516
You've got to put an
iframe at the start


148
00:06:47,516 --> 00:06:48,626
of every video segment.


149
00:06:48,876 --> 00:06:51,326
You have to make sure you
rigidly align your segments


150
00:06:51,326 --> 00:06:52,676
across your different bit rates.


151
00:06:53,496 --> 00:06:54,766
You don't have to
do any of this stuff


152
00:06:54,766 --> 00:06:56,586
if all you want to
do is target HLS.


153
00:06:57,076 --> 00:07:00,296
But if you want the broadest
audience for that copy


154
00:07:00,296 --> 00:07:03,936
of your media library, then
we're putting together a set


155
00:07:03,936 --> 00:07:05,126
of recommendations for you.


156
00:07:05,466 --> 00:07:08,616
And so I think that
that will end


157
00:07:08,616 --> 00:07:11,356
up benefiting everyone
-- at least I hope so.


158
00:07:12,266 --> 00:07:16,056
So now I'm going to switch
gears a little bit and talk


159
00:07:16,056 --> 00:07:17,896
about something else --


160
00:07:18,356 --> 00:07:20,036
everyone's favorite
topic -- metadata.


161
00:07:21,066 --> 00:07:25,646
So to sort of frame this,
I'm going to start by talking


162
00:07:25,646 --> 00:07:28,046
about some of the existing
things we already do


163
00:07:28,046 --> 00:07:29,746
for you in HLS for metadata.


164
00:07:29,746 --> 00:07:32,486
Static metadata and ID3.


165
00:07:33,056 --> 00:07:35,946
Static metadata is used
for static metadata.


166
00:07:36,396 --> 00:07:37,006
No surprise.


167
00:07:37,176 --> 00:07:39,446
So it'll offer for
like a content title,


168
00:07:39,446 --> 00:07:40,186
or something like that.


169
00:07:40,486 --> 00:07:43,586
Most of it is text, and that
makes it really easy to put


170
00:07:43,586 --> 00:07:46,356
into the playlist file
either directly as a tag,


171
00:07:46,666 --> 00:07:50,036
or you can package it as a
JSON and refer to it by URL.


172
00:07:52,686 --> 00:07:55,286
Now you only get one
title, or one author,


173
00:07:55,286 --> 00:07:58,516
or one copyright per
presentation it's static.


174
00:07:59,276 --> 00:08:01,406
But the benefit of that is


175
00:08:01,406 --> 00:08:03,336
that it's available
whenever you want it.


176
00:08:03,336 --> 00:08:05,876
It's available right away.


177
00:08:06,126 --> 00:08:10,736
So let's contrast that to ID3.


178
00:08:10,736 --> 00:08:14,396
Because timed metadata
is linked to the timeline


179
00:08:14,396 --> 00:08:17,176
of the media presentation,
it's often used


180
00:08:17,176 --> 00:08:19,176
for signaling events
in the stream.


181
00:08:19,176 --> 00:08:22,156
For instance, the start of an
ad, the start of a program.


182
00:08:23,586 --> 00:08:25,916
It lives inside the
media format itself,


183
00:08:25,946 --> 00:08:28,006
so it's a binary
format called ID3.


184
00:08:28,696 --> 00:08:30,006
And that makes it compact.


185
00:08:30,006 --> 00:08:32,296
It also makes it kind
of difficult to author


186
00:08:32,296 --> 00:08:33,895
because it requires
specialized tools.


187
00:08:34,096 --> 00:08:35,836
It's kind of a pain in the
butt if you're debugging it.


188
00:08:36,155 --> 00:08:37,405
It's hard to read ID3.


189
00:08:38,436 --> 00:08:40,346
But you can have as
many as you want,


190
00:08:40,476 --> 00:08:42,856
and you can put them anywhere
on the timeline you like.


191
00:08:43,126 --> 00:08:44,196
And so that's powerful.


192
00:08:45,226 --> 00:08:47,716
The flipside of that however
is because it's in the media,


193
00:08:48,096 --> 00:08:50,766
we can't give it to you until
it's actually been played.


194
00:08:52,236 --> 00:08:55,586
So where does the new guy fit?


195
00:08:56,556 --> 00:08:58,176
What we're adding is a way


196
00:08:58,176 --> 00:09:01,766
to author timed metadata
inside the playlist itself.


197
00:09:02,806 --> 00:09:04,986
And so you can use it
for the same things


198
00:09:04,986 --> 00:09:07,526
that you're using ID3 for today.


199
00:09:09,556 --> 00:09:11,536
You can author them as text.


200
00:09:11,616 --> 00:09:12,726
So that's pretty easy.


201
00:09:12,996 --> 00:09:15,476
You can easily put
them into a playlist,


202
00:09:16,456 --> 00:09:18,516
and you can have as
many as you want.


203
00:09:18,516 --> 00:09:19,656
They can be overlapping.


204
00:09:19,656 --> 00:09:20,326
They can nest.


205
00:09:20,376 --> 00:09:21,176
They can do whatever.


206
00:09:22,766 --> 00:09:26,596
And on the other hand, because
they're in the playlist,


207
00:09:26,716 --> 00:09:28,636
we can give you the
entire set as soon


208
00:09:28,636 --> 00:09:31,196
as we read the playlist
no matter


209
00:09:31,196 --> 00:09:32,626
where the playhead
is in the media.


210
00:09:33,276 --> 00:09:35,296
And so that makes
it pretty nice.


211
00:09:35,296 --> 00:09:38,376
For doing things particularly
like navigation control.


212
00:09:39,866 --> 00:09:40,946
So what does it look like?


213
00:09:41,176 --> 00:09:45,206
How do we make it sort of sit?


214
00:09:45,616 --> 00:09:48,556
Well, we already had the
idea of dates in HLS.


215
00:09:48,556 --> 00:09:50,836
We have the PROGRAM-DATE-TIME
tag that allows you


216
00:09:50,836 --> 00:09:53,246
to precisely signal
times inside a playlist.


217
00:09:53,246 --> 00:09:55,256
So we built on top
of that and we said,


218
00:09:55,256 --> 00:10:01,276
each bit of metadata is going to
be expressed as a range of time


219
00:10:01,726 --> 00:10:04,296
that has a set of
attributes attached to it.


220
00:10:04,886 --> 00:10:06,336
And some of those are ours.


221
00:10:06,336 --> 00:10:07,566
Some of those are yours.


222
00:10:07,896 --> 00:10:12,086
We set up the syntax so
it'll be really clean to add


223
00:10:12,086 --> 00:10:13,956
and remove these
things for live streams.


224
00:10:14,266 --> 00:10:16,526
So it meshes really well
with the live workflow.


225
00:10:16,576 --> 00:10:20,466
So what does it look like?


226
00:10:21,336 --> 00:10:23,956
Let's take a look at
one of these guys.


227
00:10:24,816 --> 00:10:27,136
We called the new tag
the DATERANGE tag.


228
00:10:27,376 --> 00:10:28,446
Here's another playlist.


229
00:10:28,676 --> 00:10:30,816
The first guy says
basically what time it is.


230
00:10:31,156 --> 00:10:32,486
The second one is
a DATERANGE tag.


231
00:10:32,486 --> 00:10:35,286
And if you look at it, what
you can see is it's composed


232
00:10:35,286 --> 00:10:36,666
of attributes.


233
00:10:37,116 --> 00:10:39,666
These guys here, these
blue ones, are the ones


234
00:10:39,666 --> 00:10:40,846
that are defined by the spec --


235
00:10:41,186 --> 00:10:43,226
the ID, the START-DATE,
the DURATION.


236
00:10:44,106 --> 00:10:47,776
These guys, we reserve
the X-namespace somewhere


237
00:10:47,776 --> 00:10:50,486
to HTTP for all you guys.


238
00:10:50,486 --> 00:10:51,816
So you can use that to put


239
00:10:51,816 --> 00:10:53,556
in whatever attribute
value pairs you want.


240
00:10:53,916 --> 00:10:55,296
In this case, someone
decided to put


241
00:10:55,296 --> 00:10:57,536
in an AD-ID and a beacon URL.


242
00:10:58,186 --> 00:10:59,776
So that's an example.


243
00:10:59,776 --> 00:11:02,356
That's what one of these guys
looks like in a playlist.


244
00:11:03,846 --> 00:11:05,506
When you're doing your
content authoring,


245
00:11:06,456 --> 00:11:08,496
you can use it either
live or VOD.


246
00:11:08,496 --> 00:11:11,166
It just has to have a
DATERANGE tag and a date.


247
00:11:11,226 --> 00:11:14,076
You can obviously
put these things


248
00:11:14,076 --> 00:11:15,936
in when you're creating
your playlist.


249
00:11:16,056 --> 00:11:18,726
But the other nice thing is,
because the playlists are easy


250
00:11:18,726 --> 00:11:20,966
to manipulate, if
you've got something


251
00:11:20,966 --> 00:11:23,536
like a post-production workflow
that's doing ad insertion


252
00:11:23,536 --> 00:11:25,586
or something like
that, it's really easy


253
00:11:25,586 --> 00:11:27,976
to augment the playlist
and presentation


254
00:11:27,976 --> 00:11:29,316
with metadata at the same time.


255
00:11:30,096 --> 00:11:34,926
By popular request, we
also included rules for how


256
00:11:34,926 --> 00:11:38,846
to map SCTE-35 that you might
find in your source media


257
00:11:39,326 --> 00:11:41,076
into the DATERANGE tags.


258
00:11:41,276 --> 00:11:46,196
So you can carry SCTE-35
losslessly in HLS.


259
00:11:47,666 --> 00:11:51,006
And finally, we've added support
for the media stream validator.


260
00:11:51,226 --> 00:11:53,726
And I actually wanted to take
a moment to give a shout-out


261
00:11:53,726 --> 00:11:55,316
to the new set of tools we have.


262
00:11:55,756 --> 00:11:57,446
We put together a talk --


263
00:11:57,446 --> 00:11:59,666
we don't have time to talk about
it right now in this session --


264
00:11:59,666 --> 00:12:02,426
but we put together a talk
talking about the new tools.


265
00:12:02,826 --> 00:12:04,706
And so I'd encourage
you to go watch that.


266
00:12:04,966 --> 00:12:09,136
It's on demand on your apps
or whatever you guys have.


267
00:12:09,136 --> 00:12:10,556
And you should check it
and out see what kinds


268
00:12:10,556 --> 00:12:13,086
of new tricks the validator
in particular has learned.


269
00:12:13,876 --> 00:12:18,236
So for playback, when
you want to actually act


270
00:12:18,236 --> 00:12:20,246
on the metadata that's
in the stream,


271
00:12:20,246 --> 00:12:24,016
you have a set of
AVFoundation APIs.


272
00:12:24,306 --> 00:12:26,816
And so you have to be
in an app at this point.


273
00:12:27,466 --> 00:12:29,266
And the APIs are essentially,


274
00:12:29,396 --> 00:12:31,166
give me all the data
you currently got.


275
00:12:31,626 --> 00:12:33,766
And then if you've
got a live playlist,


276
00:12:33,826 --> 00:12:35,186
tell me when something
new shows up.


277
00:12:36,396 --> 00:12:42,146
And it's centered around
a new object called the


278
00:12:42,146 --> 00:12:44,916
AVPlayerItemMetadataCollector.


279
00:12:45,636 --> 00:12:47,886
And so we've got a
little sample up here.


280
00:12:47,886 --> 00:12:49,616
You can see it doing
your typical things.


281
00:12:49,616 --> 00:12:51,676
You create your asset.


282
00:12:51,676 --> 00:12:52,736
You create your PlayerItem.


283
00:12:52,736 --> 00:12:54,746
And then you say, "Hey, I want
to collect some metadata."


284
00:12:55,036 --> 00:12:57,126
So you create the
MetadataCollector.


285
00:12:57,466 --> 00:12:58,836
You set yourself
up as a delegate


286
00:12:58,836 --> 00:12:59,956
so we can tell you stuff,


287
00:12:59,956 --> 00:13:01,696
and then you add it
to the PlayerItem.


288
00:13:02,296 --> 00:13:03,536
And that's it.


289
00:13:03,676 --> 00:13:07,316
Then you get all
the metadata items.


290
00:13:07,856 --> 00:13:10,616
And so it's really easy to use.


291
00:13:10,616 --> 00:13:11,646
It's really powerful.


292
00:13:12,076 --> 00:13:15,466
And I think that it's going
to be the preferred way


293
00:13:15,466 --> 00:13:18,026
to carry metadata
in HLS pretty soon.


294
00:13:18,476 --> 00:13:21,256
So the next thing
we're going to talk


295
00:13:21,256 --> 00:13:27,136
about today is another feature
that's come by popular request.


296
00:13:27,696 --> 00:13:33,846
And that is the ability to
play HLS when you're offline.


297
00:13:35,516 --> 00:13:39,546
[ Applause ]


298
00:13:40,046 --> 00:13:42,076
And to talk about that, I'm
going to ask my colleague,


299
00:13:42,076 --> 00:13:44,906
Jordan Schneider, to come
up and explain it to you.


300
00:13:45,516 --> 00:13:51,716
[ Applause ]


301
00:13:52,216 --> 00:13:57,296
>> Hey. So, let's see
if those slides click.


302
00:13:57,746 --> 00:13:59,066
There we go.


303
00:13:59,856 --> 00:14:04,056
In iOS 10, we are bringing
you the ability to download


304
00:14:04,056 --> 00:14:06,566
and then play HLS content
without a network connection.


305
00:14:07,426 --> 00:14:09,756
So now you can bring
offline media playback


306
00:14:09,756 --> 00:14:13,006
to your users using
your existing streaming


307
00:14:13,006 --> 00:14:13,696
video library.


308
00:14:14,416 --> 00:14:15,886
So as part of this feature,


309
00:14:15,996 --> 00:14:18,816
we are extending the
FairPlay Streaming support


310
00:14:18,816 --> 00:14:24,146
that we introduced to you last
year to work with offline HLS,


311
00:14:24,766 --> 00:14:27,156
and we are providing you a way


312
00:14:27,156 --> 00:14:29,446
to download your HLS
content even while your app


313
00:14:29,446 --> 00:14:30,366
is backgrounded.


314
00:14:31,156 --> 00:14:33,776
And finally, we are
exposing the ability


315
00:14:33,776 --> 00:14:37,116
to play partially-downloaded
content even while your download


316
00:14:37,116 --> 00:14:38,226
might still be in progress.


317
00:14:39,386 --> 00:14:43,916
So the first question - when
and should you use offline HLS?


318
00:14:44,716 --> 00:14:48,956
Well, yes, if you want to
use this feature primarily


319
00:14:48,956 --> 00:14:53,136
when your user might want to
play content when they expect


320
00:14:53,136 --> 00:14:55,026
that they might not have
a network connection,


321
00:14:55,326 --> 00:14:56,686
such as when they go
into airplane mode.


322
00:14:57,186 --> 00:14:59,736
However, this feature is not
targeted toward preemptively


323
00:14:59,736 --> 00:15:00,426
loading media.


324
00:15:00,946 --> 00:15:03,516
We have other ways of doing
that using AVPlayerItem.


325
00:15:04,746 --> 00:15:08,336
So why use HLS for
offline content rather


326
00:15:08,336 --> 00:15:09,816
than just downloading
movie files?


327
00:15:10,286 --> 00:15:12,616
Well, for one, your content
might already be authored


328
00:15:12,976 --> 00:15:13,426
as HLS.


329
00:15:13,516 --> 00:15:16,836
So adopting HLS for offline
content might be a really


330
00:15:16,836 --> 00:15:19,516
convenient story for you from
an engineering perspective.


331
00:15:20,116 --> 00:15:22,506
But also, in addition
to a video track,


332
00:15:22,976 --> 00:15:25,826
movie files can contain
many different audio


333
00:15:25,826 --> 00:15:28,846
and subtitle tracks that your
user might not really need


334
00:15:28,846 --> 00:15:30,156
or want to persist offline.


335
00:15:31,066 --> 00:15:35,426
So in HLS, because all these
tracks are contained separately


336
00:15:35,426 --> 00:15:38,276
on the server into
different playlists,


337
00:15:38,276 --> 00:15:41,326
we can have a little
bit more flexibility.


338
00:15:41,666 --> 00:15:44,026
Specifically, we can
have precise control


339
00:15:44,026 --> 00:15:45,786
over which media
selections are downloaded,


340
00:15:46,126 --> 00:15:48,266
saving your user
time, network data,


341
00:15:48,266 --> 00:15:50,166
and storage space
on their device.


342
00:15:50,766 --> 00:15:54,656
So, for example, by default
we downloaded a user's default


343
00:15:54,656 --> 00:15:57,756
media selection, which is likely
all they're really going to care


344
00:15:57,756 --> 00:15:58,816
about when they play offline.


345
00:15:58,816 --> 00:16:00,856
What we're also providing
you is a way


346
00:16:00,856 --> 00:16:04,796
to configure exactly what you
and your user want to download


347
00:16:04,796 --> 00:16:06,556
to have available
for offline playback.


348
00:16:07,706 --> 00:16:12,996
So another cool thing about
playing HLS offline is that,


349
00:16:13,256 --> 00:16:14,316
using the same asset,


350
00:16:14,356 --> 00:16:16,966
we can still download
media selection options


351
00:16:16,966 --> 00:16:19,946
that have not been downloaded so
long as they are still available


352
00:16:19,946 --> 00:16:21,906
on your server, which is nice.


353
00:16:22,856 --> 00:16:25,036
So how do you do this?


354
00:16:25,336 --> 00:16:27,856
In iOS 10, we're
introducing a new class


355
00:16:27,856 --> 00:16:31,046
to download AVAssets
called AVAssetDownloadTask.


356
00:16:31,696 --> 00:16:35,246
This class inherits
features of URL session.


357
00:16:35,596 --> 00:16:39,256
Most importantly, the
ability to download assets


358
00:16:39,256 --> 00:16:42,286
in the background even while
your app isn't running using all


359
00:16:42,286 --> 00:16:43,206
of its mechanisms.


360
00:16:43,886 --> 00:16:45,696
As I mentioned before,
we're giving you the ability


361
00:16:45,696 --> 00:16:48,346
to control which media
selections you want to download.


362
00:16:48,836 --> 00:16:52,926
And because this is HLS,
we have the ability for you


363
00:16:52,926 --> 00:16:55,306
to select the quality of
your asset that you want


364
00:16:55,306 --> 00:16:56,666
to download for offline as well.


365
00:16:56,666 --> 00:16:59,256
So the interface


366
00:16:59,336 --> 00:17:01,336
of AVAssetDownloadTask
looks like this.


367
00:17:01,786 --> 00:17:04,266
It inherits from URLSessionTask.


368
00:17:04,266 --> 00:17:06,476
I want to mention here
that it does not inherit


369
00:17:06,476 --> 00:17:08,336
from URLSessionDownloadTask.


370
00:17:08,746 --> 00:17:10,896
It behaves similarly, but
there is a few differences


371
00:17:10,896 --> 00:17:13,626
that I'll point out as the
presentation goes along.


372
00:17:13,626 --> 00:17:15,016
So to create one
of these things,


373
00:17:15,016 --> 00:17:18,816
you want to set up a URLSession.


374
00:17:18,816 --> 00:17:20,896
Now we have a specific subclass


375
00:17:20,896 --> 00:17:23,516
of URLSession called
AVAssetDownloadURLSession


376
00:17:23,516 --> 00:17:24,816
that you have to use
for one of these things.


377
00:17:25,366 --> 00:17:27,425
And so you call
makeAssetDownloadTask


378
00:17:27,425 --> 00:17:28,856
to create an asset
download task.


379
00:17:29,406 --> 00:17:31,756
And then for your
selection of quality,


380
00:17:31,756 --> 00:17:34,196
we have a minimum required
bit rate options key,


381
00:17:34,586 --> 00:17:36,376
as well as a media
selection key.


382
00:17:37,206 --> 00:17:40,796
Now I should note here that each
AVAssetDownloadTask corresponds


383
00:17:40,796 --> 00:17:42,846
to a single set of
media selections.


384
00:17:43,256 --> 00:17:45,306
So if you want to download
multiple media selections


385
00:17:45,306 --> 00:17:47,406
on the same asset, then
you're going to want to set


386
00:17:47,406 --> 00:17:49,776
up multiple AVAssetDownloadTasks
to do so.


387
00:17:50,066 --> 00:17:51,766
I'll show you how to do
that in a few slides.


388
00:17:52,786 --> 00:17:55,366
So to use one of these
things, here's what we do.


389
00:17:55,886 --> 00:17:59,306
The first thing is to set
up an AVAssetDownloadTask,


390
00:17:59,306 --> 00:18:01,356
configure it how you want
it, and start the download.


391
00:18:02,166 --> 00:18:04,126
Next, we want to
respond to any events


392
00:18:04,126 --> 00:18:05,626
that might occur
during the download,


393
00:18:05,626 --> 00:18:07,326
such as monitoring the
progress of the download.


394
00:18:08,336 --> 00:18:10,336
Then once the download
finishes, we're going to want


395
00:18:10,336 --> 00:18:12,386
to store the location
for playback


396
00:18:12,386 --> 00:18:13,386
when we're actually offline.


397
00:18:14,316 --> 00:18:15,456
And then you might want


398
00:18:15,456 --> 00:18:18,046
to download additional media
selections for your user to use.


399
00:18:18,786 --> 00:18:22,256
And finally, you're going
to want to play this thing.


400
00:18:22,436 --> 00:18:26,796
So to set up one of these
downloads, the first thing


401
00:18:26,796 --> 00:18:30,326
after you have your asset set up
is you're going to want to set


402
00:18:30,326 --> 00:18:31,746
up a backgrounConfiguration


403
00:18:31,746 --> 00:18:34,636
from a background
URLSessionConfiguration.


404
00:18:35,466 --> 00:18:38,676
Then you're going to create
your AssetDownloadURLSession,


405
00:18:39,136 --> 00:18:42,296
and then create your
download task.


406
00:18:42,296 --> 00:18:45,526
Here, I have the download
task to download the quality


407
00:18:45,526 --> 00:18:47,916
at about a media bit rate of
about two megabits per second.


408
00:18:48,296 --> 00:18:51,046
But by default, we'll
download the highest-quality


409
00:18:51,586 --> 00:18:52,696
video available.


410
00:18:53,436 --> 00:18:54,746
Then once you have that set up,


411
00:18:54,746 --> 00:18:56,466
because this is a
URLSessionTask,


412
00:18:56,466 --> 00:18:58,126
you just call resume
to set your download.


413
00:18:59,536 --> 00:19:01,456
So once you have your download
going, then you're going


414
00:19:01,456 --> 00:19:02,246
to want to monitor it.


415
00:19:03,076 --> 00:19:05,216
To do this, we have
a new protocol


416
00:19:05,216 --> 00:19:07,346
for you called
AVAssetDownloadDelegate.


417
00:19:07,676 --> 00:19:09,986
So this inherits the
same delegate methods


418
00:19:09,986 --> 00:19:12,136
that URLSessionTaskDelegate has.


419
00:19:12,676 --> 00:19:15,156
But I want to point out two
things that we have on here


420
00:19:15,156 --> 00:19:16,476
that we are introducing to you.


421
00:19:17,256 --> 00:19:18,806
One is our method that we use


422
00:19:18,806 --> 00:19:21,656
to monitor the progress
of downloads.


423
00:19:22,286 --> 00:19:26,346
In this method, we express
our progress of the download


424
00:19:26,346 --> 00:19:28,216
and time ranges as
opposed to bytes


425
00:19:28,376 --> 00:19:30,696
for better parlance
of media interfaces.


426
00:19:31,336 --> 00:19:34,726
And then we have a
didFinishDownloadingTo location


427
00:19:34,726 --> 00:19:36,026
delegate method which
informs you


428
00:19:36,026 --> 00:19:38,616
where the download
gets downloaded to.


429
00:19:38,716 --> 00:19:39,696
So this is similar


430
00:19:39,696 --> 00:19:43,156
to URLSessionDownloadDelegate's
protocol method here.


431
00:19:43,606 --> 00:19:45,866
But your expectation
for what you need to do


432
00:19:46,636 --> 00:19:49,826
when you get this
delegate method is a little


433
00:19:49,826 --> 00:19:50,436
bit differently.


434
00:19:50,476 --> 00:19:53,566
So I'll point that
out in a second.


435
00:19:53,676 --> 00:19:57,366
So here's an example of our
progress delegate method.


436
00:19:57,366 --> 00:20:00,476
Here, I'm just converting
time ranges


437
00:20:00,476 --> 00:20:01,976
to a percent -- complete
downloaded.


438
00:20:02,046 --> 00:20:03,876
I'm not going to go
into it in detail,


439
00:20:03,876 --> 00:20:05,226
but that's how you
would do that.


440
00:20:06,466 --> 00:20:09,036
Another thing that might happen
during your download is your app


441
00:20:09,036 --> 00:20:09,746
might be killed.


442
00:20:10,116 --> 00:20:11,506
The process might be terminated.


443
00:20:11,506 --> 00:20:13,666
And then what do you do?


444
00:20:13,666 --> 00:20:14,716
Your download continues.


445
00:20:15,066 --> 00:20:17,706
Well, to respond to that, you
respond exactly how you respond


446
00:20:17,706 --> 00:20:19,496
to URLSessionDownloadTasks.


447
00:20:19,786 --> 00:20:22,546
And that's by, when your app
launches, you're going to want


448
00:20:22,546 --> 00:20:25,286
to set up another background
configuration using the same


449
00:20:25,286 --> 00:20:28,036
identifier you used to set up
your download in the first place


450
00:20:28,366 --> 00:20:30,306
and then create a
URLSession from that.


451
00:20:30,626 --> 00:20:32,676
And then from there, call
the getAllTasks method.


452
00:20:32,676 --> 00:20:35,836
And then here, you can restore
your AVAssetDownloadTask


453
00:20:35,836 --> 00:20:37,916
which will have the
current progress of it.


454
00:20:37,916 --> 00:20:39,406
And you can use this
to update any UI


455
00:20:39,406 --> 00:20:40,366
that you might have in the app.


456
00:20:40,606 --> 00:20:43,896
And you can even use it to
grab the original AVAsset


457
00:20:43,896 --> 00:20:45,386
that you used to set
up your download.


458
00:20:46,306 --> 00:20:50,256
So once your download finishes,
the first thing you're going


459
00:20:50,256 --> 00:20:52,786
to want to do is store the
location of the download asset.


460
00:20:53,496 --> 00:20:56,956
So this method is called
whenever anything is deposited


461
00:20:56,956 --> 00:20:58,746
at this location, including


462
00:20:58,746 --> 00:21:02,116
when a partially-downloaded
content is canceled


463
00:21:02,116 --> 00:21:02,956
by your user.


464
00:21:03,386 --> 00:21:05,676
Now you can use this
partially-downloaded,


465
00:21:05,706 --> 00:21:12,186
cancelled download to resume
the download at a future time.


466
00:21:12,516 --> 00:21:13,376
Or you can even use it


467
00:21:13,376 --> 00:21:16,176
to playback whatever has
been partially there.


468
00:21:16,636 --> 00:21:18,686
But if you really don't
want that download there


469
00:21:18,806 --> 00:21:21,566
or that content there on
your app storage anymore,


470
00:21:21,886 --> 00:21:23,746
then here's where you
should probably delete it.


471
00:21:24,546 --> 00:21:28,066
So, unlike
URLSessionDownloadDelegate,


472
00:21:28,336 --> 00:21:32,056
we ask that you do not move
the asset from this location.


473
00:21:32,536 --> 00:21:34,336
And we do this because
it's really important


474
00:21:34,336 --> 00:21:36,216
that the system be able
to find these files


475
00:21:36,216 --> 00:21:38,606
as the system may want
to reclaim disk space


476
00:21:38,606 --> 00:21:40,556
in low disk space
conditions, and might actually


477
00:21:40,556 --> 00:21:42,626
at some point go out
and delete this asset


478
00:21:42,966 --> 00:21:44,706
from your app container.


479
00:21:45,416 --> 00:21:47,756
So what you're going to
want to save is going


480
00:21:47,756 --> 00:21:50,176
to be the relative
path of the location.


481
00:21:50,176 --> 00:21:53,046
And then from there, you will
be able to restore your asset


482
00:21:53,046 --> 00:21:54,156
in the future for playback.


483
00:21:55,656 --> 00:21:59,966
So, now that you have a version
of your asset downloaded,


484
00:22:00,396 --> 00:22:02,576
let's say you want to download
additional media selections.


485
00:22:03,266 --> 00:22:04,956
A good place to do this would be


486
00:22:04,956 --> 00:22:08,036
in our didCompleteWithError
delegate method.


487
00:22:08,036 --> 00:22:10,196
This is the same one
that URLSessionTask has.


488
00:22:10,806 --> 00:22:13,456
And the reason why it
might be good to do here is


489
00:22:13,456 --> 00:22:14,506
because media selections


490
00:22:14,506 --> 00:22:16,556
on the same asset are
downloaded serially.


491
00:22:16,876 --> 00:22:20,416
And this is generally the
right place to do any cleanup


492
00:22:20,506 --> 00:22:21,976
of the complete download.


493
00:22:22,636 --> 00:22:26,606
So, to augment with an
additional media selection


494
00:22:26,606 --> 00:22:28,906
option -- say, the
Spanish audio --


495
00:22:28,906 --> 00:22:30,656
we would first grab
our spanishOption


496
00:22:30,656 --> 00:22:31,486
that we want to download.


497
00:22:32,166 --> 00:22:35,676
Then we would mutate
the AVMediaSelection


498
00:22:35,676 --> 00:22:37,876
that we originally passed


499
00:22:37,876 --> 00:22:40,926
in to select the
spanishOption from there.


500
00:22:41,576 --> 00:22:43,816
And then once we have that
selected, we're going to want


501
00:22:43,816 --> 00:22:47,416
to create a new
AVAssetDownloadTask preferably


502
00:22:47,416 --> 00:22:50,626
on the same session with passing
the additional media selection


503
00:22:50,626 --> 00:22:51,676
we want to download.


504
00:22:51,976 --> 00:22:53,046
And then we call resume,


505
00:22:53,046 --> 00:22:55,276
and then the whole
process repeats itself.


506
00:22:55,276 --> 00:22:57,066
And then we could download
additional media selection


507
00:22:57,066 --> 00:22:58,736
after that if we wanted to.


508
00:23:00,156 --> 00:23:02,056
So let's talk about
playing this thing now.


509
00:23:03,166 --> 00:23:06,846
So, say we had a --
here's an example


510
00:23:07,356 --> 00:23:09,826
of how we could create
a download task.


511
00:23:09,826 --> 00:23:13,186
And notice that I pass in an
asset with a networkURL to it.


512
00:23:13,656 --> 00:23:18,296
When we playback offline
HLS, if we still have


513
00:23:18,296 --> 00:23:21,666
that original urlAsset
available, then we should use


514
00:23:21,666 --> 00:23:25,406
that AVAsset instance to play.


515
00:23:25,776 --> 00:23:28,696
And we can grab this from
the urlAsset property off


516
00:23:28,696 --> 00:23:29,686
the AssetDownloadTask.


517
00:23:30,116 --> 00:23:32,316
If you pass in a new
asset with networkURL,


518
00:23:32,316 --> 00:23:33,436
AVFoundation will not know


519
00:23:33,436 --> 00:23:35,686
where to find the
downloaded content from.


520
00:23:36,066 --> 00:23:37,616
So you should use
that same asset,


521
00:23:37,616 --> 00:23:39,566
and then you will
have playback offline.


522
00:23:40,126 --> 00:23:43,026
However, if you no
longer have any references


523
00:23:43,026 --> 00:23:45,166
to that original AVAsset --


524
00:23:45,626 --> 00:23:48,356
for example, a long
period of time later


525
00:23:48,356 --> 00:23:50,476
when your app might not
have been running --


526
00:23:50,936 --> 00:23:52,626
then what you're going to want
to do is you're going to want


527
00:23:52,676 --> 00:23:56,826
to create a new AVAsset
from the download location


528
00:23:56,826 --> 00:23:57,726
that we supplied to you


529
00:23:57,726 --> 00:24:00,096
in the didFinishDownloadingTo
delegate method


530
00:24:00,526 --> 00:24:02,356
and create a PlayerItem
with that.


531
00:24:03,226 --> 00:24:05,836
Now even in this case, if
you want to do an operation


532
00:24:05,916 --> 00:24:08,896
on the asset -- for example,


533
00:24:08,966 --> 00:24:11,396
augment with an additional
media selection download --


534
00:24:11,716 --> 00:24:13,756
you really should
reuse that same asset.


535
00:24:13,756 --> 00:24:14,706
You shouldn't have a bunch


536
00:24:14,706 --> 00:24:19,586
of AVAssets pointing toward
the same fileURL on disk.


537
00:24:20,096 --> 00:24:21,616
This helps AVFoundation
be efficient


538
00:24:21,616 --> 00:24:24,166
about reusing already-downloaded
media data.


539
00:24:25,356 --> 00:24:29,676
So we also have an additional
class to help you be stringent


540
00:24:29,676 --> 00:24:32,426
about what you let your
users play offline,


541
00:24:32,426 --> 00:24:33,956
and this is called AVAssetCache.


542
00:24:34,406 --> 00:24:37,206
You grab this from the asset
cache property on an AVAsset.


543
00:24:37,206 --> 00:24:38,906
And it can do two things.


544
00:24:39,016 --> 00:24:42,746
One is that it can tell
you if any rendition


545
00:24:42,746 --> 00:24:44,886
of this asset is
playable offline.


546
00:24:45,436 --> 00:24:48,956
And the other thing it can do
is it can tell you whether a


547
00:24:48,956 --> 00:24:50,976
specific media selection
option is available offline.


548
00:24:51,406 --> 00:24:52,786
Now, remember, if it's
not available offline,


549
00:24:52,786 --> 00:24:55,186
it's still playable so long as
you're connected to the network


550
00:24:55,476 --> 00:24:58,286
and that media selection option
is still available on the server


551
00:24:58,286 --> 00:24:59,406
that you downloaded it from.


552
00:25:00,416 --> 00:25:03,206
So, that's how you use
AVAssetDownloadTask


553
00:25:03,326 --> 00:25:06,496
and play the subsequent
downloaded asset.


554
00:25:06,806 --> 00:25:08,576
And I should note
that number five here,


555
00:25:08,576 --> 00:25:10,866
playing the download asset
disk, that can happen really


556
00:25:11,246 --> 00:25:13,086
at any point in this process.


557
00:25:13,086 --> 00:25:16,706
It can even happen before
you start the download,


558
00:25:16,706 --> 00:25:17,866
or even during the download.


559
00:25:17,866 --> 00:25:20,476
And AVFoundation will be
efficient about trying


560
00:25:20,476 --> 00:25:22,976
to reuse what has already been
downloaded from the network.


561
00:25:24,036 --> 00:25:25,866
So I want to switch gears
a little bit here and talk


562
00:25:25,866 --> 00:25:27,816
about securing the
offline content.


563
00:25:28,656 --> 00:25:32,166
So, last year, we
introduced FairPlay Streaming


564
00:25:32,166 --> 00:25:34,786
to bring strong content
protection to the HLS ecosystem.


565
00:25:35,526 --> 00:25:39,176
However, in iOS 9, FairPlay
Streaming requires a live


566
00:25:39,176 --> 00:25:40,486
connection to a key server,


567
00:25:40,486 --> 00:25:43,186
which doesn't really work
for offline playback.


568
00:25:43,766 --> 00:25:46,406
So, this year, we've extended
FairPlay Streaming to work


569
00:25:46,406 --> 00:25:49,866
without an internet connection
for the offline HLS case.


570
00:25:50,406 --> 00:25:54,206
Now we do this by packaging your
keys in a manner that is safe


571
00:25:54,206 --> 00:25:56,796
to store on disk and reuse
for offline playback.


572
00:25:57,266 --> 00:26:00,606
But your app is still expected
to store this key itself


573
00:26:00,606 --> 00:26:03,876
and respond to key
requests from AVFoundation


574
00:26:03,876 --> 00:26:06,916
on every single playback without
hitting the network once it has


575
00:26:06,916 --> 00:26:07,666
its key cached.


576
00:26:08,636 --> 00:26:11,326
So support for these keys
does require a change


577
00:26:11,326 --> 00:26:14,496
in your key servers,
specifically a new TLV value


578
00:26:14,496 --> 00:26:17,096
so your key servers have
to explicitly opt-in keys


579
00:26:17,096 --> 00:26:19,046
to be eligible for
offline playback.


580
00:26:20,266 --> 00:26:23,536
And finally, we have
a caveat for FPS Keys.


581
00:26:23,866 --> 00:26:26,536
They must be declared in your
master playlist as session keys


582
00:26:26,536 --> 00:26:28,456
if you want to make sure
that they are downloaded.


583
00:26:29,656 --> 00:26:33,956
So, storing keys for offline
FairPlay Streaming really builds


584
00:26:33,956 --> 00:26:37,326
off the request flow of
online FairPlay Streaming.


585
00:26:37,586 --> 00:26:39,706
And so what you have to
change really just has to do


586
00:26:39,706 --> 00:26:41,436
with how you modify
this request flow.


587
00:26:41,886 --> 00:26:43,876
I'll give a quick recap
of it here to point


588
00:26:43,876 --> 00:26:44,896
out what you need to do.


589
00:26:45,246 --> 00:26:47,636
But for more information, you
should watch last year's talk


590
00:26:47,636 --> 00:26:49,226
where we go into this
in a lot of detail.


591
00:26:50,526 --> 00:26:52,996
So just like in FairPlay
Streaming for playback,


592
00:26:52,996 --> 00:26:54,636
AVFoundation will
download your playlist


593
00:26:54,636 --> 00:26:56,896
and trigger a key request
if it finds a key tag,


594
00:26:57,166 --> 00:26:58,946
which will give your
app a chance


595
00:26:58,946 --> 00:27:00,566
to save the key for
offline playback.


596
00:27:01,146 --> 00:27:04,406
So the first thing your app
would do is it would call back


597
00:27:04,406 --> 00:27:06,876
to AVFoundation to get
a streaming key request.


598
00:27:07,216 --> 00:27:10,966
Then it would talk to your
server, which would take


599
00:27:10,966 --> 00:27:11,836
that streaming key request


600
00:27:11,836 --> 00:27:14,426
and give you a content
key context or a CKC.


601
00:27:14,506 --> 00:27:17,186
And then in online
FairPlay Streaming,


602
00:27:17,186 --> 00:27:19,886
this is where you would finish
a request flow and simply return


603
00:27:19,886 --> 00:27:21,916
to AVFoundation with that CKC.


604
00:27:22,436 --> 00:27:26,476
However, in offline FairPlay
Streaming, here's where you need


605
00:27:26,476 --> 00:27:29,216
to give that CKC to AVFoundation


606
00:27:29,216 --> 00:27:32,486
so AVFoundation can freeze-dry
it into a format that is safe


607
00:27:32,486 --> 00:27:35,426
for you to store into
your app storage.


608
00:27:35,726 --> 00:27:38,156
And this is something
that you can also reuse


609
00:27:38,156 --> 00:27:40,716
on subsequent playbacks.


610
00:27:40,856 --> 00:27:43,196
So once you have this thing
written into your app storage,


611
00:27:43,456 --> 00:27:46,616
you want to return that
freeze-dried key to AVFoundation


612
00:27:46,616 --> 00:27:47,676
to complete the request.


613
00:27:48,016 --> 00:27:50,126
Now if your app were offline,
then all you would have


614
00:27:50,126 --> 00:27:52,766
to do is read that freeze-dried
key from your app storage


615
00:27:53,006 --> 00:27:55,726
and return it to AVFoundation
so you could do this


616
00:27:55,726 --> 00:27:56,556
without touching the network.


617
00:27:58,016 --> 00:27:59,826
So let's look at how this
actually changes your code.


618
00:28:00,796 --> 00:28:04,866
So in online FairPlay Streaming,
these key requests happen


619
00:28:04,976 --> 00:28:06,676
as a part of
AVAssetResourceLoader,


620
00:28:06,946 --> 00:28:08,536
specifically as a
delegate method


621
00:28:08,536 --> 00:28:11,116
on
AVAssetResourceLoadingRequest.


622
00:28:11,666 --> 00:28:13,016
So the first thing you
would do once you get one


623
00:28:13,016 --> 00:28:15,446
of these requests
is ask AVFoundation


624
00:28:15,446 --> 00:28:19,676
to create a streaming
content key request or an SPC,


625
00:28:19,766 --> 00:28:21,726
which sends that to your server.


626
00:28:21,866 --> 00:28:24,526
And then you get a CKC
back, and then you respond


627
00:28:24,526 --> 00:28:26,066
to AVFoundation with that.


628
00:28:27,596 --> 00:28:30,926
Now in offline FairPlay
Streaming, we have a new method.


629
00:28:30,926 --> 00:28:33,066
This is the method that you
use to freeze-dry the key.


630
00:28:33,066 --> 00:28:36,636
You pass in the CKC you
get back from the server,


631
00:28:36,996 --> 00:28:40,296
and it returns back that
data blob that is saved


632
00:28:40,296 --> 00:28:41,256
for you to store offline.


633
00:28:42,096 --> 00:28:44,926
We also have a new content type
as part of this request flow --


634
00:28:44,926 --> 00:28:46,406
the persistentContentKey type --


635
00:28:46,966 --> 00:28:48,926
and a new option to pass


636
00:28:48,926 --> 00:28:52,666
into our streaming content key
request data for app method.


637
00:28:54,086 --> 00:28:59,846
So here is how we would modify
that key request flow for a key


638
00:28:59,846 --> 00:29:00,876
that we want to save offline.


639
00:29:01,516 --> 00:29:03,256
The first thing that we want


640
00:29:03,506 --> 00:29:06,026
to do is ask AVFoundation
to create an SPC.


641
00:29:06,626 --> 00:29:08,036
The difference here is
that we need to pass


642
00:29:08,036 --> 00:29:09,826
in the required persistentKey
option.


643
00:29:09,826 --> 00:29:12,616
So that way, AVFoundation
and your key server knows


644
00:29:12,616 --> 00:29:14,886
to request a key
that will be eligible


645
00:29:14,886 --> 00:29:16,276
for that freeze-dry process.


646
00:29:17,016 --> 00:29:19,296
So it sends this SPC to
your server to get the CKC.


647
00:29:19,296 --> 00:29:21,336
And then once you
get the CKC back,


648
00:29:21,486 --> 00:29:23,196
you call your
persistentContentKey method


649
00:29:23,466 --> 00:29:25,796
to create this freeze-dried
thing that you can save to disk.


650
00:29:26,566 --> 00:29:28,256
Then, you want to actually
write that thing to your disk.


651
00:29:28,906 --> 00:29:30,796
And then, you want to
set your content type


652
00:29:30,796 --> 00:29:33,066
to a persistentContentKey type


653
00:29:33,736 --> 00:29:38,086
and then finish the downloading
request with that persistent CKC


654
00:29:38,086 --> 00:29:40,616
that you saved to your disk.


655
00:29:41,506 --> 00:29:43,316
So now if you are offline,


656
00:29:43,316 --> 00:29:45,926
or say you already satisfied
this key request previously,


657
00:29:46,666 --> 00:29:48,566
then this is what you will do.


658
00:29:49,276 --> 00:29:51,466
You get your resource
loadingRequest


659
00:29:52,296 --> 00:29:56,566
and you just simply read
your freeze-dried key


660
00:29:56,566 --> 00:29:58,506
from your app storage.


661
00:29:59,386 --> 00:30:01,106
Then you set your
persistentContentKey type,


662
00:30:01,546 --> 00:30:03,386
and you respond to the
key loadingRequest all


663
00:30:03,386 --> 00:30:06,556
without hitting the network,
which is obviously required


664
00:30:06,646 --> 00:30:09,716
as you may potentially
be in airplane mode


665
00:30:09,716 --> 00:30:11,726
and don't have any
network connectivity during


666
00:30:11,726 --> 00:30:12,386
this process.


667
00:30:13,106 --> 00:30:15,906
So that's how you modify
FairPlay Streaming to work


668
00:30:15,906 --> 00:30:18,056
with your offline HLS content.


669
00:30:19,286 --> 00:30:21,446
So now I want to talk
about best practices


670
00:30:21,446 --> 00:30:23,626
for managing your assets.


671
00:30:23,626 --> 00:30:26,556
So it's important to note that
these downloads do contribute


672
00:30:26,556 --> 00:30:27,676
to your app's disk usage,


673
00:30:27,676 --> 00:30:30,126
so you want to be a
little bit mindful here.


674
00:30:30,126 --> 00:30:32,736
You should really clean up
any unneeded assets on disk.


675
00:30:33,126 --> 00:30:35,686
Specifically, you should
definitely provide a way


676
00:30:35,686 --> 00:30:39,416
to your users to see everything
that you have downloaded


677
00:30:39,416 --> 00:30:42,176
and allow them to delete things
that they don't want any more.


678
00:30:44,196 --> 00:30:48,546
Remember that downloads that
users cancel do remain on disk.


679
00:30:48,686 --> 00:30:51,046
Now you can use those to
resume downloads in the future


680
00:30:51,046 --> 00:30:51,916
at some point if you like.


681
00:30:52,236 --> 00:30:54,476
But if that's not what you
want, then you should take care


682
00:30:54,476 --> 00:30:58,016
to go ahead and delete those
assets once they are cancelled.


683
00:30:59,116 --> 00:31:02,716
We're asking that you
keep downloads driven


684
00:31:02,716 --> 00:31:04,416
by explicit user actions.


685
00:31:04,416 --> 00:31:06,826
So you shouldn't just go ahead
and download a bunch of stuff


686
00:31:06,826 --> 00:31:08,796
that your user might not
actually want offline.


687
00:31:09,696 --> 00:31:12,096
We've gone ahead and taken
the liberty of opting


688
00:31:12,096 --> 00:31:14,246
out these downloads
from iCloud backup.


689
00:31:15,956 --> 00:31:18,576
As I mentioned earlier,
you should be prepared


690
00:31:18,576 --> 00:31:21,266
for the system to delete your
assets to reclaim disk space


691
00:31:21,266 --> 00:31:22,416
in low disk space conditions.


692
00:31:23,006 --> 00:31:25,366
Now this won't happen while
your app is running, ever.


693
00:31:25,366 --> 00:31:29,806
This will only happen while
your app is terminated.


694
00:31:29,806 --> 00:31:32,966
After your app is launched, you
should be a little bit defensive


695
00:31:33,046 --> 00:31:35,856
about assuming whether you
actually have the assets


696
00:31:35,856 --> 00:31:40,376
that you had previously
downloaded on disk.


697
00:31:40,476 --> 00:31:43,976
You do not move your
assets from the location


698
00:31:43,976 --> 00:31:44,896
which we provide them to.


699
00:31:44,896 --> 00:31:46,126
Again, it is very important


700
00:31:46,126 --> 00:31:48,606
that the system be able
to find these assets.


701
00:31:50,146 --> 00:31:55,456
And finally, because these
downloaded assets may contain


702
00:31:55,546 --> 00:31:58,756
media selections that have not
be downloaded, be careful not


703
00:31:58,756 --> 00:32:01,346
to mutate the asset that
you have on your servers.


704
00:32:01,556 --> 00:32:04,846
If you really must change,
say, like the location


705
00:32:04,846 --> 00:32:09,436
of a media playlist
and stuff like that,


706
00:32:09,436 --> 00:32:11,936
and mutate your master playlist,
then you should just host


707
00:32:11,936 --> 00:32:14,416
that modified asset
at a new URL rather


708
00:32:14,416 --> 00:32:15,996
than changing the one
that's already there.


709
00:32:17,506 --> 00:32:19,466
So, that's offline HLS.


710
00:32:19,606 --> 00:32:21,396
And we're really happy
to bring this to you


711
00:32:21,396 --> 00:32:23,136
and excited to see you adopt it.


712
00:32:24,126 --> 00:32:26,196
So, in summary, we
have new features


713
00:32:26,196 --> 00:32:27,246
for you to use this year.


714
00:32:27,366 --> 00:32:30,096
We have our fragmented
MP4 support


715
00:32:30,496 --> 00:32:34,276
which will bring a
common media format


716
00:32:34,276 --> 00:32:37,326
across different platforms
that you may be supporting.


717
00:32:38,036 --> 00:32:40,906
Remember that this is
compatible with all HLS features


718
00:32:40,906 --> 00:32:43,886
and requires minimal changes
to your HLS playlist to adopt.


719
00:32:45,156 --> 00:32:48,656
Next, we have our new
in-playlist metadata using the


720
00:32:48,656 --> 00:32:49,656
DATERANGE tag.


721
00:32:49,726 --> 00:32:53,566
and this is just really
good to use metadata


722
00:32:53,566 --> 00:32:56,706
with any live content that
might have dynamically updating


723
00:32:56,966 --> 00:32:59,056
metadata, like ad boundaries
and stuff like that.


724
00:33:00,116 --> 00:33:03,466
And finally, we're giving
you an offline HLS playback.


725
00:33:03,876 --> 00:33:07,716
So part of this we have a
powerful media downloading


726
00:33:07,816 --> 00:33:11,336
engine as well that you can
configure media selections


727
00:33:11,336 --> 00:33:12,286
and quality to download.


728
00:33:12,956 --> 00:33:16,766
And we're also extending our
FairPlay Streaming support


729
00:33:16,766 --> 00:33:18,636
to work without an
Internet connection.


730
00:33:19,936 --> 00:33:23,296
So for more information,
including some sample code


731
00:33:23,296 --> 00:33:26,296
on how to use
AVAssetDownloadTask


732
00:33:26,296 --> 00:33:32,656
and more documentation on these
new editions, go see our page


733
00:33:32,656 --> 00:33:34,116
on the development
site for this session.


734
00:33:34,266 --> 00:33:39,326
I want to point out the session
that Roger mentioned earlier,


735
00:33:39,416 --> 00:33:43,266
our version of authoring
and validation talk.


736
00:33:43,266 --> 00:33:47,646
You can watch this video
in the WWDC app right now.


737
00:33:48,166 --> 00:33:50,476
I highly recommend watching it.


738
00:33:50,886 --> 00:33:51,766
So, thanks for coming.


739
00:33:51,766 --> 00:33:52,976
And I hope you enjoy the
rest of the conference.


740
00:33:53,508 --> 00:33:55,508
[ Applause ]

