1
00:00:07,516 --> 00:00:15,500
[ Music ]


2
00:00:22,516 --> 00:00:29,546
[ Applause ]


3
00:00:30,046 --> 00:00:30,906
>> Well, good afternoon and


4
00:00:30,906 --> 00:00:32,576
welcome to a tour of


5
00:00:32,576 --> 00:00:33,536
UICollectionView.


6
00:00:34,336 --> 00:00:35,556
My name is Steve Breen-- I'll


7
00:00:35,556 --> 00:00:36,726
set this over here-- and I'm a


8
00:00:36,726 --> 00:00:38,356
frameworks engineer on the UIKit


9
00:00:38,356 --> 00:00:38,686
team.


10
00:00:39,766 --> 00:00:41,516
And I'm joined on stage today


11
00:00:41,516 --> 00:00:42,896
with my colleague, Mohammed


12
00:00:42,896 --> 00:00:45,636
Jisrawi, also on the UIKit team.


13
00:00:48,906 --> 00:00:49,836
So today we're going to do


14
00:00:49,836 --> 00:00:50,446
something a little bit


15
00:00:50,516 --> 00:00:50,936
different.


16
00:00:51,516 --> 00:00:52,966
We're going to build an app from


17
00:00:52,966 --> 00:00:54,296
some specs we receive from our


18
00:00:54,296 --> 00:00:55,496
designer, Breanka [phonetic],


19
00:00:56,006 --> 00:00:57,166
and this is going to leverage


20
00:00:57,166 --> 00:00:58,876
many of the capabilities of


21
00:00:58,876 --> 00:00:59,756
UICollectionView.


22
00:01:00,156 --> 00:01:02,086
Now, while we work through all


23
00:01:02,086 --> 00:01:03,916
the tasks required to build our


24
00:01:03,916 --> 00:01:05,266
app, we're going to touch on a


25
00:01:05,266 --> 00:01:07,466
wide range of topics regarding


26
00:01:07,466 --> 00:01:08,616
UICollectionView including


27
00:01:08,886 --> 00:01:10,916
layouts, updates, and


28
00:01:10,916 --> 00:01:11,606
animations.


29
00:01:12,356 --> 00:01:14,026
So we've got a ton of ground to


30
00:01:14,026 --> 00:01:15,326
cover, so let's jump right in.


31
00:01:17,116 --> 00:01:19,106
All right, so here's the first


32
00:01:19,106 --> 00:01:20,526
spec we got from our designer.


33
00:01:20,716 --> 00:01:21,916
It looks like a friends feed,


34
00:01:21,916 --> 00:01:22,406
imagine that.


35
00:01:22,406 --> 00:01:24,336
A great little columnar layout.


36
00:01:24,996 --> 00:01:28,826
It looks pretty straightforward,


37
00:01:28,826 --> 00:01:28,976
okay.


38
00:01:29,076 --> 00:01:30,086
Okay, this looks great.


39
00:01:30,526 --> 00:01:31,526
So here we've got this really


40
00:01:31,626 --> 00:01:33,296
fancy looking mosaic layout,


41
00:01:33,446 --> 00:01:34,786
which is the contents of our


42
00:01:34,786 --> 00:01:35,436
friends feed.


43
00:01:36,176 --> 00:01:37,966
Okay, so Mohammed, since you're


44
00:01:37,966 --> 00:01:38,826
going to be writing all the code


45
00:01:38,826 --> 00:01:39,936
for us and walking us through


46
00:01:39,936 --> 00:01:41,806
how to use these features, what


47
00:01:41,806 --> 00:01:42,476
are your thoughts on these


48
00:01:42,516 --> 00:01:43,046
designs?


49
00:01:43,256 --> 00:01:44,096
>> Well, you know, I'm seeing


50
00:01:44,096 --> 00:01:45,526
these for the first time, but


51
00:01:45,716 --> 00:01:47,346
they seem like great candidates


52
00:01:47,346 --> 00:01:48,096
for collection view.


53
00:01:48,166 --> 00:01:49,186
I think we can have a lot of fun


54
00:01:49,186 --> 00:01:50,146
with this one, especially.


55
00:01:50,146 --> 00:01:50,956
>> Yeah, this one looks great.


56
00:01:51,716 --> 00:01:52,746
All right.


57
00:01:52,746 --> 00:01:55,626
So before we dive into code, and


58
00:01:55,626 --> 00:01:56,686
Mohammed starts walking us


59
00:01:56,686 --> 00:01:58,566
through this, we need to cover


60
00:01:58,786 --> 00:02:00,196
three core concepts we need to


61
00:02:00,196 --> 00:02:01,596
understand about CollectionView


62
00:02:01,596 --> 00:02:02,526
before we dive right into that


63
00:02:02,606 --> 00:02:02,766
code.


64
00:02:02,766 --> 00:02:04,236
So let's do these now, and we're


65
00:02:04,236 --> 00:02:05,896
going to talk about the layout,


66
00:02:06,006 --> 00:02:09,936
data source, and the delegate.


67
00:02:10,036 --> 00:02:11,496
Okay. So, first of all, let's


68
00:02:11,496 --> 00:02:12,506
chat a little bit about the


69
00:02:12,506 --> 00:02:13,086
layout.


70
00:02:13,646 --> 00:02:15,566
So if you open up the definition


71
00:02:15,566 --> 00:02:16,706
for UICollectionView for the


72
00:02:16,706 --> 00:02:18,876
very first time, and you're


73
00:02:18,876 --> 00:02:20,546
familiar with UITableView, you


74
00:02:20,546 --> 00:02:21,716
notice right away that there's a


75
00:02:21,716 --> 00:02:22,936
lot of familiarity in the API.


76
00:02:22,936 --> 00:02:25,266
You got a delegate and a data


77
00:02:25,266 --> 00:02:25,676
source.


78
00:02:25,676 --> 00:02:26,686
All these things look pretty


79
00:02:26,686 --> 00:02:28,856
familiar, but the layout


80
00:02:28,856 --> 00:02:30,796
concept, that's pretty unique


81
00:02:30,846 --> 00:02:32,306
and distinct to


82
00:02:32,306 --> 00:02:33,176
UICollectionView.


83
00:02:33,176 --> 00:02:34,146
You can really think of it as


84
00:02:34,146 --> 00:02:35,656
UICollectionView's super power.


85
00:02:36,846 --> 00:02:38,146
It allows CollectionView to


86
00:02:38,146 --> 00:02:39,746
abstract away the visual


87
00:02:39,746 --> 00:02:40,936
arrangement from your content


88
00:02:41,336 --> 00:02:42,636
separate from the content


89
00:02:42,636 --> 00:02:43,326
itself.


90
00:02:44,416 --> 00:02:45,816
Layout is all about the where


91
00:02:46,146 --> 00:02:47,216
content is displayed.


92
00:02:48,946 --> 00:02:52,206
Now, each individual item is


93
00:02:52,206 --> 00:02:53,046
specified by the


94
00:02:53,046 --> 00:02:54,066
UICollectionView layout


95
00:02:54,066 --> 00:02:56,646
attributes, for attributes like


96
00:02:56,646 --> 00:02:58,046
such as bound, center, and


97
00:02:58,046 --> 00:02:59,116
frame, things like that.


98
00:02:59,656 --> 00:03:00,716
You can think of it as a set of


99
00:03:00,716 --> 00:03:02,566
properties you can use to define


100
00:03:02,566 --> 00:03:03,866
these items that are displayed.


101
00:03:03,896 --> 00:03:06,206
You can even customize these by


102
00:03:06,206 --> 00:03:07,886
printing your own subclasses of


103
00:03:07,886 --> 00:03:08,826
UICollectionView layout


104
00:03:08,826 --> 00:03:10,676
attributes and include these in


105
00:03:10,676 --> 00:03:11,546
your designs.


106
00:03:12,876 --> 00:03:14,996
Okay. So as the user is


107
00:03:14,996 --> 00:03:16,496
scrolling through the content on


108
00:03:16,496 --> 00:03:18,646
screen, the layout is considered


109
00:03:18,646 --> 00:03:19,636
to be immutable.


110
00:03:20,266 --> 00:03:22,186
Now if you need to change this,


111
00:03:22,186 --> 00:03:23,716
like for example you're going to


112
00:03:23,716 --> 00:03:24,916
change the appearance of the


113
00:03:24,916 --> 00:03:26,616
layout, you would use the


114
00:03:26,616 --> 00:03:28,116
invalidation mechanism, which


115
00:03:28,116 --> 00:03:29,256
Mohammed will walk us through in


116
00:03:29,256 --> 00:03:31,526
a little bit.


117
00:03:31,526 --> 00:03:33,936
Okay. Now, one great thing about


118
00:03:33,996 --> 00:03:35,066
layout being a separate


119
00:03:35,066 --> 00:03:37,226
abstraction is we can transition


120
00:03:37,226 --> 00:03:38,306
from one layout to another


121
00:03:38,306 --> 00:03:40,616
layout and get a great animated


122
00:03:40,616 --> 00:03:42,026
effect when you move between


123
00:03:42,026 --> 00:03:44,526
layouts, and layout A doesn't


124
00:03:44,526 --> 00:03:46,156
need to know anything about


125
00:03:46,446 --> 00:03:47,076
layout B.


126
00:03:47,286 --> 00:03:48,056
They just declare what the


127
00:03:48,056 --> 00:03:49,526
layout is going to be, and the


128
00:03:49,526 --> 00:03:50,396
transitions occur.


129
00:03:51,986 --> 00:03:54,926
Okay. So CollectionViewLayout is


130
00:03:54,926 --> 00:03:56,656
an abstract class, and as such,


131
00:03:56,656 --> 00:03:58,686
it's not meant to be used


132
00:03:58,686 --> 00:04:00,976
directly, but rather subclasses


133
00:04:00,976 --> 00:04:01,806
of CollectionViewLayout are


134
00:04:01,806 --> 00:04:02,726
meant to be used.


135
00:04:04,036 --> 00:04:05,646
Fortunately, we provide one.


136
00:04:06,556 --> 00:04:08,896
UICollectionViewFlowLayout, and


137
00:04:08,896 --> 00:04:09,736
you're probably familiar with


138
00:04:09,736 --> 00:04:10,566
this class if you used


139
00:04:10,566 --> 00:04:11,376
CollectionView before.


140
00:04:11,986 --> 00:04:13,736
Now there's a lot of


141
00:04:13,736 --> 00:04:15,026
customization points on


142
00:04:15,026 --> 00:04:16,776
CollectionViewLayout including


143
00:04:16,776 --> 00:04:17,906
some properties that we'll talk


144
00:04:17,906 --> 00:04:19,666
about in a little bit, but you


145
00:04:19,666 --> 00:04:21,176
can also customize it using a


146
00:04:21,176 --> 00:04:23,646
delegate, and we'll talk about


147
00:04:23,646 --> 00:04:24,616
the CollectionViewDelegate in a


148
00:04:24,616 --> 00:04:25,346
moment, but


149
00:04:25,436 --> 00:04:27,656
CollectionViewFlowLayout will


150
00:04:28,216 --> 00:04:30,156
specify additional things that


151
00:04:30,156 --> 00:04:31,086
extend that


152
00:04:31,086 --> 00:04:32,026
CollectionViewDelegate.


153
00:04:34,496 --> 00:04:35,986
Okay, so what's Flow all about?


154
00:04:35,986 --> 00:04:37,746
Well it's a line-based layout


155
00:04:37,746 --> 00:04:39,946
system, and because of this, it


156
00:04:39,946 --> 00:04:41,796
can cover a wide range of


157
00:04:41,796 --> 00:04:43,146
different designs that you might


158
00:04:43,146 --> 00:04:43,666
receive.


159
00:04:46,436 --> 00:04:47,786
All right, so what does line


160
00:04:47,786 --> 00:04:48,286
base mean?


161
00:04:48,286 --> 00:04:49,176
Well let's go through this.


162
00:04:49,176 --> 00:04:51,406
So the best way to explain what


163
00:04:51,476 --> 00:04:54,416
a line based system is like is


164
00:04:54,416 --> 00:04:55,636
to give an example, so let's do


165
00:04:55,636 --> 00:04:55,856
that.


166
00:04:56,556 --> 00:04:57,936
Okay. So here we see, we've got


167
00:04:57,936 --> 00:04:59,486
a vertical scrolling collection


168
00:04:59,486 --> 00:05:01,396
view, and we're going to mimic


169
00:05:01,396 --> 00:05:02,786
what flow layout does when it


170
00:05:02,786 --> 00:05:04,086
lays out this content.


171
00:05:04,606 --> 00:05:04,936
All right.


172
00:05:05,866 --> 00:05:07,806
So here's our first item, and we


173
00:05:07,806 --> 00:05:10,036
start at the top leading edge,


174
00:05:10,416 --> 00:05:12,126
and we start laying out our


175
00:05:12,126 --> 00:05:14,326
items along a line.


176
00:05:14,326 --> 00:05:15,216
Now look at this line.


177
00:05:15,216 --> 00:05:17,106
This line is orthogonal to the


178
00:05:17,106 --> 00:05:18,006
scroll axis.


179
00:05:18,006 --> 00:05:18,976
We're scrolling vertically, so


180
00:05:18,976 --> 00:05:20,126
the line is horizontal.


181
00:05:21,366 --> 00:05:22,796
Okay, now notice here, we filled


182
00:05:22,796 --> 00:05:24,266
up the available space for items


183
00:05:24,266 --> 00:05:25,646
on that line, so now we're going


184
00:05:25,756 --> 00:05:28,046
to drop to the next line and


185
00:05:28,046 --> 00:05:29,696
continue laying out our content.


186
00:05:30,216 --> 00:05:32,306
And finally, we drop to that


187
00:05:32,306 --> 00:05:34,846
last line, and bingo, we got all


188
00:05:34,846 --> 00:05:35,366
our content.


189
00:05:36,756 --> 00:05:38,596
Now if I dropped some guides on


190
00:05:38,596 --> 00:05:39,976
here to show highlight where


191
00:05:39,976 --> 00:05:41,556
those lines are horizontal,


192
00:05:42,496 --> 00:05:43,256
let's talk about some


193
00:05:43,256 --> 00:05:44,926
definitions that we have for


194
00:05:45,206 --> 00:05:46,586
ways to customize flow.


195
00:05:47,306 --> 00:05:49,436
First up is the notion of line


196
00:05:49,436 --> 00:05:49,986
spacing.


197
00:05:50,906 --> 00:05:52,076
And as you see the arrows here,


198
00:05:52,076 --> 00:05:53,586
the line spacing is going to be


199
00:05:53,586 --> 00:05:54,656
the space between these


200
00:05:54,656 --> 00:05:55,536
horizontal lines.


201
00:05:56,676 --> 00:06:00,166
Similarly, inter-item spacing is


202
00:06:00,166 --> 00:06:01,726
the space between the items


203
00:06:02,066 --> 00:06:03,426
along the layout line.


204
00:06:03,616 --> 00:06:04,766
And we have two properties on


205
00:06:04,766 --> 00:06:06,176
flow layout that let you specify


206
00:06:06,496 --> 00:06:07,996
the minimums for both of these.


207
00:06:08,536 --> 00:06:11,006
Okay. So let's cement our


208
00:06:11,006 --> 00:06:12,156
intuition a little bit and


209
00:06:12,156 --> 00:06:13,736
rotate the whole thing, pi over


210
00:06:13,736 --> 00:06:15,786
2, and let's start over at the


211
00:06:15,786 --> 00:06:17,276
top leading edge.


212
00:06:17,956 --> 00:06:19,096
Now, this one is scrolling


213
00:06:19,096 --> 00:06:20,756
horizontally, right, so we're


214
00:06:20,756 --> 00:06:22,346
going to have a vertical layout


215
00:06:22,346 --> 00:06:24,496
line, and when we get to the


216
00:06:24,496 --> 00:06:25,606
bottom of this area, we filled


217
00:06:25,606 --> 00:06:27,396
out that line, back up to the


218
00:06:27,396 --> 00:06:27,716
top.


219
00:06:28,646 --> 00:06:29,906
Okay. This pattern is pretty


220
00:06:29,906 --> 00:06:30,676
familiar now, right.


221
00:06:31,526 --> 00:06:32,196
There we go.


222
00:06:32,196 --> 00:06:33,386
There's all our content.


223
00:06:34,116 --> 00:06:35,736
Now we have our vertical layout


224
00:06:35,736 --> 00:06:36,236
lines.


225
00:06:36,926 --> 00:06:38,856
So now in this orientation, our


226
00:06:39,226 --> 00:06:40,596
line spacing is this.


227
00:06:41,876 --> 00:06:44,046
And our inter-item spacing is


228
00:06:44,046 --> 00:06:44,426
this.


229
00:06:45,266 --> 00:06:46,186
It's key to remember when you're


230
00:06:46,186 --> 00:06:47,086
working with flow layout.


231
00:06:48,426 --> 00:06:49,636
Okay, so that's layout.


232
00:06:50,366 --> 00:06:52,316
Let's talk a little bit about


233
00:06:52,316 --> 00:06:54,996
the data source, and if you work


234
00:06:54,996 --> 00:06:56,746
with TableView, this should look


235
00:06:56,746 --> 00:06:57,486
very familiar.


236
00:06:57,486 --> 00:06:58,606
It's a very similar pattern.


237
00:06:59,436 --> 00:07:00,936
They share very similar APIs.


238
00:07:00,936 --> 00:07:03,416
Okay, so if the layout is all


239
00:07:03,416 --> 00:07:05,766
about the where content goes,


240
00:07:06,276 --> 00:07:07,756
the data source is the what.


241
00:07:07,916 --> 00:07:08,986
The content itself.


242
00:07:09,836 --> 00:07:11,136
Three core methods to think


243
00:07:11,136 --> 00:07:11,816
about here.


244
00:07:11,816 --> 00:07:12,746
The first one is optional,


245
00:07:12,846 --> 00:07:13,686
number of sections in


246
00:07:13,686 --> 00:07:16,026
CollectionView, and this one if


247
00:07:16,026 --> 00:07:16,986
you don't provide it, we'll just


248
00:07:16,986 --> 00:07:18,086
assume you mean one.


249
00:07:19,336 --> 00:07:21,446
Similarly, we have number of


250
00:07:21,446 --> 00:07:22,966
items in section, and this is


251
00:07:22,966 --> 00:07:24,556
going to tell you the number of


252
00:07:24,556 --> 00:07:25,346
items in each individual


253
00:07:25,346 --> 00:07:26,116
section, because they can all


254
00:07:26,116 --> 00:07:26,986
have different numbers of items.


255
00:07:27,536 --> 00:07:29,026
And then the last one, sell for


256
00:07:29,026 --> 00:07:30,206
item index path is where you


257
00:07:30,206 --> 00:07:31,546
provide the actually content


258
00:07:31,546 --> 00:07:32,456
you're going to display to your


259
00:07:32,456 --> 00:07:32,836
users.


260
00:07:33,506 --> 00:07:35,686
Okay. So that's the data source.


261
00:07:36,076 --> 00:07:37,736
Okay, the final of our three


262
00:07:37,736 --> 00:07:38,846
topics we're going to talk about


263
00:07:39,086 --> 00:07:40,356
before we dive into code with


264
00:07:40,356 --> 00:07:42,086
Mohammed is the Delegate.


265
00:07:42,726 --> 00:07:45,346
Okay. So use of the Delegate is


266
00:07:45,346 --> 00:07:45,786
optional.


267
00:07:47,226 --> 00:07:48,576
Now, CollectionView is a


268
00:07:48,576 --> 00:07:50,036
subclass of UIScrollView.


269
00:07:50,476 --> 00:07:52,256
So we use the same Delegate


270
00:07:52,686 --> 00:07:54,276
that's provided by the


271
00:07:54,276 --> 00:07:56,116
ScrollView superclass, but we


272
00:07:56,116 --> 00:07:56,696
extend it.


273
00:07:57,526 --> 00:07:58,646
So if you need to modify


274
00:07:58,906 --> 00:08:00,116
scrolling behavior, you can do


275
00:08:00,116 --> 00:08:01,426
it also against this same


276
00:08:01,426 --> 00:08:03,826
Delegate and also work with some


277
00:08:03,826 --> 00:08:06,216
of the UICollectionViewDelegate


278
00:08:06,216 --> 00:08:08,496
methods that provide things like


279
00:08:08,616 --> 00:08:09,686
fine-grained control over


280
00:08:09,686 --> 00:08:11,176
highlighting and selection as


281
00:08:11,176 --> 00:08:12,186
the user interacts with your


282
00:08:12,186 --> 00:08:12,686
content.


283
00:08:13,206 --> 00:08:15,796
And we also got an API that


284
00:08:15,796 --> 00:08:17,086
let's you know, hey, something


285
00:08:17,086 --> 00:08:18,016
came on screen.


286
00:08:18,016 --> 00:08:19,426
WillDisplayItem and


287
00:08:19,426 --> 00:08:20,636
DidEndDisplayingItem.


288
00:08:21,116 --> 00:08:24,816
Okay. So those are the three


289
00:08:24,816 --> 00:08:26,196
core concepts we really need to


290
00:08:26,196 --> 00:08:28,156
talk about before we dive into


291
00:08:28,266 --> 00:08:30,016
code to get started with


292
00:08:30,016 --> 00:08:30,936
UICollectionView.


293
00:08:30,936 --> 00:08:32,775
So let's switch over to the dev


294
00:08:32,775 --> 00:08:34,226
box with Mohammed and have him


295
00:08:34,496 --> 00:08:35,395
show us how it works.


296
00:08:35,556 --> 00:08:35,846
Mohammed.


297
00:08:35,846 --> 00:08:38,746
>> All right, so the first of


298
00:08:38,746 --> 00:08:40,596
our two screens that column


299
00:08:40,596 --> 00:08:42,706
layout is a great use case for


300
00:08:42,706 --> 00:08:44,626
using CollectionViewFlowLayout.


301
00:08:45,106 --> 00:08:46,376
We can probably accomplish


302
00:08:46,376 --> 00:08:47,896
everything we need there, and it


303
00:08:47,896 --> 00:08:49,996
would be a great way to get us


304
00:08:50,106 --> 00:08:52,036
started using UICollectionView.


305
00:08:54,596 --> 00:08:56,686
So now while we could accomplish


306
00:08:56,686 --> 00:08:58,896
the entire goal of our design


307
00:08:58,896 --> 00:09:00,216
with a flow layout, I'm actually


308
00:09:00,216 --> 00:09:01,036
going to subclass


309
00:09:01,036 --> 00:09:02,566
CollectionViewFlowLayout because


310
00:09:02,566 --> 00:09:03,346
we're going to do a little bit


311
00:09:03,346 --> 00:09:04,576
of extra customization.


312
00:09:04,756 --> 00:09:06,596
So I'm going to start out by


313
00:09:07,646 --> 00:09:10,436
creating an instance of my


314
00:09:10,436 --> 00:09:12,066
ColumnFlowLayout class, which


315
00:09:12,066 --> 00:09:12,916
I've already prepared.


316
00:09:13,756 --> 00:09:15,276
I'm going to use that instance


317
00:09:15,276 --> 00:09:17,276
to create my CollectionView.


318
00:09:17,276 --> 00:09:18,946
I'm going to take that


319
00:09:18,946 --> 00:09:19,956
CollectionView, and I'm going to


320
00:09:19,956 --> 00:09:21,576
set some view properties, like


321
00:09:21,576 --> 00:09:23,356
auto resizing mask, background


322
00:09:23,356 --> 00:09:25,356
color, and since it's the


323
00:09:25,356 --> 00:09:26,876
ScrollView, I can set some of


324
00:09:26,876 --> 00:09:28,066
it's ScrollView properties as


325
00:09:28,066 --> 00:09:28,296
well.


326
00:09:28,296 --> 00:09:29,406
This is all just to get it to


327
00:09:29,406 --> 00:09:31,126
look and feel the way I want it


328
00:09:31,276 --> 00:09:33,086
to look in our app.


329
00:09:33,426 --> 00:09:34,786
After adding the CollectionView


330
00:09:34,786 --> 00:09:36,596
to my view hierarchy, I'm going


331
00:09:36,596 --> 00:09:38,816
to register my PersonCell class


332
00:09:38,816 --> 00:09:40,706
using its unique identifier with


333
00:09:40,706 --> 00:09:42,536
CollectionView so we can get our


334
00:09:42,536 --> 00:09:45,126
cell design to app.


335
00:09:45,126 --> 00:09:46,696
And then I'm going to set the


336
00:09:46,696 --> 00:09:47,866
view controller as the


337
00:09:47,866 --> 00:09:49,586
CollectionView's data source so


338
00:09:49,586 --> 00:09:51,186
we can give it some information


339
00:09:51,186 --> 00:09:52,496
about how many cells it's going


340
00:09:52,496 --> 00:09:54,616
to display and what sort of data


341
00:09:54,616 --> 00:09:55,556
it's going to display in it's


342
00:09:55,556 --> 00:09:56,146
cells.


343
00:09:56,516 --> 00:09:59,346
And then I'm going to set it as


344
00:09:59,346 --> 00:10:00,956
it's delegate as well, so we can


345
00:10:00,956 --> 00:10:02,066
handle cell selection.


346
00:10:02,986 --> 00:10:04,196
So now that we've gotten set up,


347
00:10:04,196 --> 00:10:05,976
we need to actually conform to


348
00:10:05,976 --> 00:10:07,216
these two protocols.


349
00:10:07,876 --> 00:10:10,036
So let's start out by conforming


350
00:10:10,036 --> 00:10:12,606
to the data source, and we have


351
00:10:12,676 --> 00:10:14,176
two required methods we need to


352
00:10:14,176 --> 00:10:14,816
implement here.


353
00:10:14,946 --> 00:10:17,906
The first of these is number of


354
00:10:17,976 --> 00:10:20,656
items in section where we can


355
00:10:20,656 --> 00:10:22,696
just return the number of people


356
00:10:22,816 --> 00:10:23,926
or the number of items in our


357
00:10:23,926 --> 00:10:26,956
people array to get our data


358
00:10:26,956 --> 00:10:27,996
model objects displayed.


359
00:10:28,666 --> 00:10:30,586
The second method we'll need to


360
00:10:30,586 --> 00:10:31,566
implement is


361
00:10:32,106 --> 00:10:34,456
CellForItemAtIndexPath where


362
00:10:34,456 --> 00:10:36,226
we'll dequeue a cell from the


363
00:10:36,226 --> 00:10:37,726
CollectionView using our unique


364
00:10:37,726 --> 00:10:41,106
identifier, pass a person and


365
00:10:41,106 --> 00:10:42,526
object that we get out of our


366
00:10:42,526 --> 00:10:43,976
people array, to the cell to


367
00:10:44,136 --> 00:10:47,126
actually display our data, and


368
00:10:47,126 --> 00:10:48,576
then return the cell.


369
00:10:50,426 --> 00:10:52,566
And to wrap things up here,


370
00:10:52,566 --> 00:10:54,686
we'll just need to implement one


371
00:10:54,756 --> 00:10:56,396
optional method from the


372
00:10:56,396 --> 00:10:58,066
Delegate protocol, so we can


373
00:10:58,066 --> 00:10:58,836
handle selection.


374
00:10:59,336 --> 00:11:00,826
So I'm just going to add


375
00:11:00,926 --> 00:11:04,226
DidSelectItemAtIndexPath where


376
00:11:04,226 --> 00:11:06,186
we'll just instantiate our


377
00:11:06,186 --> 00:11:07,716
FeedView controller, which is


378
00:11:07,716 --> 00:11:09,246
going to be our second screen if


379
00:11:09,246 --> 00:11:10,056
we don't already have an


380
00:11:10,056 --> 00:11:11,886
instance, and then we're going


381
00:11:12,136 --> 00:11:14,406
to pass it a person object so we


382
00:11:14,406 --> 00:11:16,566
know whose images to display,


383
00:11:17,116 --> 00:11:19,386
and then we'll push it onto our


384
00:11:19,386 --> 00:11:20,366
navigation controller.


385
00:11:21,256 --> 00:11:24,136
Okay. So let's build this and


386
00:11:24,176 --> 00:11:27,006
switch to the simulator to see.


387
00:11:29,256 --> 00:11:29,976
All right.


388
00:11:30,516 --> 00:11:33,606
[ Applause and Cheering ]


389
00:11:34,106 --> 00:11:35,836
Okay. So we have our


390
00:11:35,836 --> 00:11:37,446
CollectionView on screen here,


391
00:11:37,546 --> 00:11:39,816
and we have some cells.


392
00:11:39,816 --> 00:11:41,196
You can see them, though they're


393
00:11:41,196 --> 00:11:42,096
kind of squished.


394
00:11:42,146 --> 00:11:44,026
They're not the right size, so


395
00:11:44,026 --> 00:11:45,116
we're going to have to do some


396
00:11:45,116 --> 00:11:46,786
of that customization we thought


397
00:11:46,786 --> 00:11:47,656
we might need to do.


398
00:11:47,996 --> 00:11:51,066
So let's go back to Xcode, and


399
00:11:51,066 --> 00:11:55,916
let's pop open our column of


400
00:11:55,996 --> 00:11:59,906
class here, our ColumnFlowLayout


401
00:12:00,046 --> 00:12:01,936
class that we've put together,


402
00:12:03,106 --> 00:12:06,536
and let's take a look at what we


403
00:12:06,536 --> 00:12:07,176
need to do here.


404
00:12:07,176 --> 00:12:10,236
So I already have a stub


405
00:12:10,236 --> 00:12:12,376
override of the layouts prepare


406
00:12:12,456 --> 00:12:12,916
method.


407
00:12:13,506 --> 00:12:13,686
Now,


408
00:12:14,076 --> 00:12:15,756
UICollectionViewLayoutsPrepare


409
00:12:15,756 --> 00:12:17,266
method is called whenever the


410
00:12:17,266 --> 00:12:19,406
layout is invalidated, and in


411
00:12:19,406 --> 00:12:19,906
the case of


412
00:12:19,906 --> 00:12:22,476
UICollectionFlowLayout, our


413
00:12:22,636 --> 00:12:24,646
layout is invalidated whenever


414
00:12:24,646 --> 00:12:26,416
the CollectionView's bounds of


415
00:12:26,416 --> 00:12:27,336
size changes.


416
00:12:27,336 --> 00:12:29,626
So if our app rotates on a phone


417
00:12:29,626 --> 00:12:31,956
or if our app is resized on an


418
00:12:32,076 --> 00:12:32,446
iPad.


419
00:12:33,996 --> 00:12:35,976
So this is a great place to do


420
00:12:35,976 --> 00:12:39,366
any customization that takes the


421
00:12:39,366 --> 00:12:41,026
size of the CollectionView into


422
00:12:41,026 --> 00:12:41,506
account.


423
00:12:41,506 --> 00:12:42,986
In our case, we want our cells


424
00:12:42,986 --> 00:12:45,456
to be some function of the


425
00:12:45,456 --> 00:12:46,756
CollectionView's width.


426
00:12:47,266 --> 00:12:48,886
And we can let the


427
00:12:48,886 --> 00:12:51,236
CollectionView know how big we


428
00:12:51,236 --> 00:12:53,146
want our items to be by saying


429
00:12:53,146 --> 00:12:54,436
it's item sized properties.


430
00:12:54,516 --> 00:12:55,876
So I'm going to go ahead and do


431
00:12:55,876 --> 00:12:56,296
that here.


432
00:12:57,426 --> 00:12:58,586
So I'm just going to set my


433
00:12:58,586 --> 00:13:01,086
CollectionView's item size to a


434
00:13:01,276 --> 00:13:03,586
CG size with a width that is the


435
00:13:03,586 --> 00:13:04,886
width of the CollectionView's


436
00:13:04,886 --> 00:13:07,206
bounds, inset by its layout


437
00:13:07,206 --> 00:13:08,996
margins, and then we're going to


438
00:13:08,996 --> 00:13:10,946
give it a height of 70 points


439
00:13:10,946 --> 00:13:12,736
just to match our design.


440
00:13:14,046 --> 00:13:14,856
And since we're already here,


441
00:13:14,856 --> 00:13:15,746
I'm going to do a couple of


442
00:13:15,836 --> 00:13:17,536
other little things here just to


443
00:13:17,536 --> 00:13:18,816
get things to look nice.


444
00:13:19,296 --> 00:13:21,326
I'm going to apply a section


445
00:13:21,326 --> 00:13:22,816
inset with some padding at the


446
00:13:22,896 --> 00:13:24,526
top that matches our inter-item


447
00:13:24,646 --> 00:13:26,636
spacing, and I'm going to set


448
00:13:26,776 --> 00:13:28,216
the layout section inset


449
00:13:28,216 --> 00:13:30,106
reference property to from safe


450
00:13:30,106 --> 00:13:32,256
area so everything is neatly


451
00:13:32,256 --> 00:13:33,846
tucked within the CollectionView


452
00:13:33,846 --> 00:13:34,956
safe area insets.


453
00:13:35,616 --> 00:13:37,526
Okay. So let's go back to the


454
00:13:37,526 --> 00:13:39,546
simulator one more time and see


455
00:13:39,546 --> 00:13:40,746
what our properly constructed


456
00:13:40,746 --> 00:13:41,546
layout looks like.


457
00:13:41,816 --> 00:13:42,086
All right.


458
00:13:43,656 --> 00:13:44,926
That looks great.


459
00:13:44,926 --> 00:13:47,056
That looks just like our spec. I


460
00:13:47,056 --> 00:13:47,916
think our designer is going to


461
00:13:47,916 --> 00:13:48,626
be really happy.


462
00:13:48,626 --> 00:13:52,316
And if we rotate to landscape,


463
00:13:52,396 --> 00:13:53,426
we see that our cell is a great


464
00:13:53,426 --> 00:13:54,866
size, and so we know that our


465
00:13:55,206 --> 00:13:56,956
invalidation code is getting


466
00:13:56,956 --> 00:13:58,166
called again in prepare.


467
00:13:59,756 --> 00:14:01,176
Now while this is okay, you


468
00:14:01,176 --> 00:14:03,106
might be thinking, it's not the


469
00:14:03,106 --> 00:14:04,316
best that we can do here.


470
00:14:04,316 --> 00:14:06,886
It doesn't look as great as it


471
00:14:07,736 --> 00:14:07,976
can.


472
00:14:08,486 --> 00:14:09,736
We might want to do something


473
00:14:09,736 --> 00:14:10,696
more interesting here like


474
00:14:10,696 --> 00:14:12,216
display multiple columns since


475
00:14:12,216 --> 00:14:14,546
we have the space available to


476
00:14:14,546 --> 00:14:14,806
us.


477
00:14:15,336 --> 00:14:16,936
Now flow layout makes it really


478
00:14:16,936 --> 00:14:17,876
easy to do this.


479
00:14:18,166 --> 00:14:19,926
If you remember during Steve's


480
00:14:19,926 --> 00:14:21,366
explanation of how flow layout


481
00:14:21,486 --> 00:14:22,666
performs it's layout earlier,


482
00:14:22,746 --> 00:14:24,536
flow layout will automatically


483
00:14:24,536 --> 00:14:26,656
try to fit in as many items as


484
00:14:26,656 --> 00:14:28,876
it can within a line before it


485
00:14:28,876 --> 00:14:29,946
wraps to the next one.


486
00:14:30,526 --> 00:14:33,396
So using that, we can kind of


487
00:14:33,876 --> 00:14:36,086
figure out that layout-- that we


488
00:14:36,086 --> 00:14:37,626
can get multiple columns if we


489
00:14:37,626 --> 00:14:38,826
change our item size.


490
00:14:39,506 --> 00:14:41,996
So if we head back to Xcode, to


491
00:14:41,996 --> 00:14:44,446
our layout here, and if we just


492
00:14:44,446 --> 00:14:46,986
change how we're calculating our


493
00:14:46,986 --> 00:14:47,976
item size here.


494
00:14:47,976 --> 00:14:50,886
So I'm just going to remove this


495
00:14:50,886 --> 00:14:52,156
fit here, and I'm going to


496
00:14:52,906 --> 00:14:54,216
replace it with something that


497
00:14:54,296 --> 00:14:55,336
does a little bit of extra math.


498
00:14:56,336 --> 00:14:57,926
So I'm just starting out with


499
00:14:58,006 --> 00:14:59,896
the same available width that I


500
00:14:59,896 --> 00:15:00,536
had before.


501
00:15:00,536 --> 00:15:02,466
This is the bounds inset by the


502
00:15:02,466 --> 00:15:05,546
margins, and some arbitrary


503
00:15:05,546 --> 00:15:07,726
definition of what a minimum


504
00:15:07,856 --> 00:15:10,726
column width is, it's 300


505
00:15:10,726 --> 00:15:11,156
points.


506
00:15:11,696 --> 00:15:14,106
And then taking both of those


507
00:15:14,106 --> 00:15:15,796
values and using them to


508
00:15:15,796 --> 00:15:17,476
calculate a maximum number of


509
00:15:17,476 --> 00:15:18,986
column that I think I can fit


510
00:15:18,986 --> 00:15:21,146
within the available space, and


511
00:15:21,146 --> 00:15:23,096
I'm taking that and dividing the


512
00:15:23,096 --> 00:15:24,536
available width by it to


513
00:15:24,536 --> 00:15:26,546
calculate an optimal cell width,


514
00:15:26,546 --> 00:15:29,446
which might be more than our 300


515
00:15:29,446 --> 00:15:29,816
points.


516
00:15:30,626 --> 00:15:32,346
I'm then passing that to the CT


517
00:15:32,346 --> 00:15:33,636
size that I'm using as my item


518
00:15:33,636 --> 00:15:33,966
size.


519
00:15:34,886 --> 00:15:37,166
Okay. So let's go back to our


520
00:15:37,166 --> 00:15:39,546
simulator again and see what our


521
00:15:39,546 --> 00:15:40,676
updated layout looks like.


522
00:15:42,246 --> 00:15:43,596
Okay. So everything is the same


523
00:15:43,596 --> 00:15:43,806
here.


524
00:15:43,806 --> 00:15:44,466
We didn't break it.


525
00:15:44,736 --> 00:15:47,756
It's a good start, and if we go


526
00:15:47,756 --> 00:15:50,146
to portrait, there are our


527
00:15:50,146 --> 00:15:51,416
multiple columns side by side,


528
00:15:51,536 --> 00:15:52,136
just what we want.


529
00:15:53,436 --> 00:15:55,186
What do you think, Steve?


530
00:15:55,656 --> 00:15:56,306
>> That looks great.


531
00:15:56,306 --> 00:15:57,596
We got a great adaptable


532
00:15:57,596 --> 00:15:58,706
columnar base layout.


533
00:15:58,706 --> 00:15:59,726
Not a lot of work.


534
00:16:00,266 --> 00:16:00,436
>> No.


535
00:16:00,536 --> 00:16:01,486
>> What's next in our design?


536
00:16:02,036 --> 00:16:02,906
>> Well, now that we've eased


537
00:16:02,906 --> 00:16:04,366
ourselves in with our friends


538
00:16:04,366 --> 00:16:05,446
list, it's time to start


539
00:16:05,446 --> 00:16:07,846
thinking about that fancy mosaic


540
00:16:07,846 --> 00:16:08,306
layout for [inaudible].


541
00:16:08,336 --> 00:16:08,686
>> Oh, yeah.


542
00:16:08,686 --> 00:16:09,566
That's going to be great.


543
00:16:09,566 --> 00:16:09,676
>> Yeah.


544
00:16:09,676 --> 00:16:10,816
>> Let's switch back over


545
00:16:10,816 --> 00:16:13,076
slides, and let's chat a little


546
00:16:13,076 --> 00:16:16,926
bit about that.


547
00:16:17,136 --> 00:16:19,726
Okay. So let's take a look at


548
00:16:19,726 --> 00:16:21,686
this layout or design here and


549
00:16:21,686 --> 00:16:22,506
see what we can do.


550
00:16:22,506 --> 00:16:23,816
So our first inclination, I


551
00:16:23,816 --> 00:16:25,006
don't know about yours, but mine


552
00:16:25,006 --> 00:16:25,956
would be can I use Flow.


553
00:16:26,206 --> 00:16:26,626
I've got it.


554
00:16:26,626 --> 00:16:27,216
It's ready to go.


555
00:16:27,276 --> 00:16:28,036
Let's try to use it.


556
00:16:29,256 --> 00:16:30,796
So let's zero in on this design


557
00:16:30,796 --> 00:16:32,786
a little bit and see if Flow is


558
00:16:32,786 --> 00:16:33,946
going to make sense for us.


559
00:16:34,966 --> 00:16:36,726
And this particular region where


560
00:16:36,726 --> 00:16:37,886
these three photos are, I'm


561
00:16:37,886 --> 00:16:39,266
going to zoom in on that real


562
00:16:39,266 --> 00:16:39,626
quick.


563
00:16:40,276 --> 00:16:40,626
All right.


564
00:16:41,756 --> 00:16:43,496
So now in this instance we have


565
00:16:43,496 --> 00:16:45,206
a very large photo on the left


566
00:16:45,276 --> 00:16:47,306
and then a vertical stack on the


567
00:16:47,306 --> 00:16:47,656
right.


568
00:16:48,446 --> 00:16:49,836
So in the flow universe, since


569
00:16:49,836 --> 00:16:50,886
it's line based, we're going to


570
00:16:50,886 --> 00:16:52,446
lay out that large left item,


571
00:16:53,076 --> 00:16:54,186
move over to the next item where


572
00:16:54,186 --> 00:16:55,306
it's got room, try to lay out


573
00:16:55,306 --> 00:16:57,386
another item, and then jump to


574
00:16:57,386 --> 00:16:58,116
the next line.


575
00:16:58,606 --> 00:16:59,686
But we're not done.


576
00:16:59,686 --> 00:17:00,686
We've got that vertical stack to


577
00:17:00,686 --> 00:17:01,296
contend with.


578
00:17:01,296 --> 00:17:03,056
So this really is not going to


579
00:17:03,056 --> 00:17:04,326
work for Flow because it turns


580
00:17:04,326 --> 00:17:07,226
out it's not really a line-based


581
00:17:07,226 --> 00:17:08,656
layout, this fancy layout of


582
00:17:08,656 --> 00:17:08,986
ours.


583
00:17:09,796 --> 00:17:10,766
But going through this exercise


584
00:17:10,766 --> 00:17:12,205
is useful, so, you know, let's


585
00:17:12,205 --> 00:17:13,566
start with flow first.


586
00:17:15,096 --> 00:17:16,776
Okay. So in this instance, we're


587
00:17:16,776 --> 00:17:18,136
going to create our own custom


588
00:17:18,136 --> 00:17:18,506
layout.


589
00:17:19,685 --> 00:17:20,796
Oh, no, we're scared, right.


590
00:17:20,796 --> 00:17:21,876
Nope, it's not complicated.


591
00:17:21,876 --> 00:17:23,925
We've got four basic methods to


592
00:17:23,925 --> 00:17:25,356
deal with here, and I'm going to


593
00:17:25,356 --> 00:17:27,056
bring up one additional method


594
00:17:27,056 --> 00:17:28,276
that gets an honorable mention.


595
00:17:29,676 --> 00:17:31,156
Okay. So four methods.


596
00:17:31,156 --> 00:17:31,566
Here we go.


597
00:17:32,836 --> 00:17:34,076
Our first method I want to talk


598
00:17:34,076 --> 00:17:35,106
about is the CollectionView


599
00:17:35,106 --> 00:17:36,346
Content Size.


600
00:17:37,306 --> 00:17:39,286
Now, recall before we mentioned


601
00:17:39,286 --> 00:17:40,736
CollectionView is a subclass of


602
00:17:40,736 --> 00:17:42,126
UIScrollView, and one of the


603
00:17:42,126 --> 00:17:44,036
features of UIScrollView is that


604
00:17:44,036 --> 00:17:45,576
you have a visible region with a


605
00:17:45,576 --> 00:17:47,636
large content area, and you get


606
00:17:47,636 --> 00:17:49,096
that great iOS experience of


607
00:17:49,096 --> 00:17:50,596
moving your content around


608
00:17:50,596 --> 00:17:52,666
inside that, and so


609
00:17:52,756 --> 00:17:53,896
CollectionView needs to know how


610
00:17:53,896 --> 00:17:55,396
to tell the ScrollView, hey,


611
00:17:55,396 --> 00:17:56,836
here's how big my content is.


612
00:17:57,276 --> 00:17:59,256
Okay. So how do we get this


613
00:17:59,256 --> 00:17:59,856
size?


614
00:18:00,656 --> 00:18:01,986
Well, if you imagine a rectangle


615
00:18:01,986 --> 00:18:03,546
that encompassed all the content


616
00:18:03,546 --> 00:18:04,646
that the layout is going to


617
00:18:04,646 --> 00:18:06,196
define for your CollectionView,


618
00:18:06,626 --> 00:18:09,406
we want the size of that.


619
00:18:09,406 --> 00:18:11,596
Okay, so that's CollectionView


620
00:18:11,596 --> 00:18:12,436
Content Size.


621
00:18:13,556 --> 00:18:15,326
Next up we have two methods that


622
00:18:15,326 --> 00:18:17,176
are in the business of providing


623
00:18:17,176 --> 00:18:18,246
layout attributes.


624
00:18:19,376 --> 00:18:20,516
The first one is


625
00:18:20,516 --> 00:18:21,826
LayoutAttributesForElements (in


626
00:18:21,826 --> 00:18:22,116
Rect).


627
00:18:23,186 --> 00:18:24,606
Now this is called periodically


628
00:18:24,606 --> 00:18:25,996
by CollectionView when it needs


629
00:18:25,996 --> 00:18:26,856
to know what is needed to


630
00:18:26,856 --> 00:18:28,336
display on screen as the user


631
00:18:28,336 --> 00:18:29,696
scrolls through your content or


632
00:18:29,696 --> 00:18:30,916
displays for the first time.


633
00:18:31,906 --> 00:18:33,516
So this query is by a geometric


634
00:18:33,516 --> 00:18:33,966
region.


635
00:18:35,686 --> 00:18:38,166
Okay. It's companion API,


636
00:18:38,276 --> 00:18:39,596
LayoutAttributesForItem


637
00:18:39,596 --> 00:18:42,046
AtIndexPath, as you can imagine,


638
00:18:42,046 --> 00:18:43,096
it's just looking for a single


639
00:18:43,096 --> 00:18:43,366
item.


640
00:18:43,496 --> 00:18:44,876
Give me the attributes for that.


641
00:18:45,876 --> 00:18:47,416
Okay, so we're going to see more


642
00:18:47,416 --> 00:18:48,446
when Mohammed walks us through


643
00:18:48,446 --> 00:18:50,116
this, but for these two APIs,


644
00:18:50,116 --> 00:18:51,326
it's important to note that


645
00:18:51,326 --> 00:18:52,936
performance matters.


646
00:18:57,136 --> 00:18:58,956
Okay, so the fourth of our four


647
00:18:59,136 --> 00:19:01,906
core custom layout subclass


648
00:19:01,976 --> 00:19:03,766
items is going to be the Prepare


649
00:19:03,766 --> 00:19:04,106
method.


650
00:19:04,106 --> 00:19:05,396
Now Mohammed has already chatted


651
00:19:05,396 --> 00:19:06,706
about this a little bit.


652
00:19:06,706 --> 00:19:08,266
This is called every time the


653
00:19:08,266 --> 00:19:09,346
layout is invalidated.


654
00:19:09,406 --> 00:19:11,226
So this is a great time to


655
00:19:11,226 --> 00:19:12,436
compute anything, such as your


656
00:19:12,436 --> 00:19:13,486
layout attributes you might want


657
00:19:13,486 --> 00:19:16,206
to cache and also your content


658
00:19:16,206 --> 00:19:17,496
size, which is going to be asked


659
00:19:17,496 --> 00:19:18,976
for pretty soon afterwards.


660
00:19:23,456 --> 00:19:25,326
Okay. So our honorable mention


661
00:19:25,326 --> 00:19:26,876
APIs, so let's talk about this


662
00:19:26,876 --> 00:19:27,066
one.


663
00:19:27,066 --> 00:19:28,316
This is a Should Invalidate


664
00:19:28,316 --> 00:19:29,856
Layout For Bounds Change.


665
00:19:30,766 --> 00:19:33,046
So this is called every time the


666
00:19:33,046 --> 00:19:34,126
bounds in the CollectionView


667
00:19:34,126 --> 00:19:34,876
changes.


668
00:19:35,066 --> 00:19:36,366
Okay, so again, it's a


669
00:19:36,366 --> 00:19:37,926
CollectionView is a UIScrollView


670
00:19:37,926 --> 00:19:38,566
subclass.


671
00:19:38,566 --> 00:19:40,676
So what do we mean by a bounds


672
00:19:40,676 --> 00:19:41,216
change?


673
00:19:41,216 --> 00:19:43,206
Well, when a ScrollView bounds


674
00:19:43,206 --> 00:19:45,406
change, the origin can change


675
00:19:45,406 --> 00:19:47,246
during a scrolling, and also the


676
00:19:47,246 --> 00:19:48,546
size can change when the


677
00:19:48,546 --> 00:19:50,366
application size changes or the


678
00:19:50,366 --> 00:19:51,726
CollectionView size changes.


679
00:19:51,726 --> 00:19:53,256
So this is going to be called


680
00:19:53,256 --> 00:19:53,996
during scrolling.


681
00:19:55,116 --> 00:19:56,996
Hence the oh yeah emoji.


682
00:19:56,996 --> 00:19:58,196
This is called very often.


683
00:19:58,196 --> 00:20:00,126
So making the right decision


684
00:20:00,126 --> 00:20:00,906
here is important.


685
00:20:01,466 --> 00:20:03,176
Okay, so the default


686
00:20:03,176 --> 00:20:04,296
implementation in


687
00:20:04,296 --> 00:20:06,626
UICollectionViewLayout returns


688
00:20:06,626 --> 00:20:07,056
false.


689
00:20:07,746 --> 00:20:08,666
So if you need this to do


690
00:20:08,666 --> 00:20:10,456
something different, here's your


691
00:20:10,456 --> 00:20:10,906
chance.


692
00:20:11,906 --> 00:20:13,576
And as a way of an example,


693
00:20:13,906 --> 00:20:16,106
UICollectionViewLayout will


694
00:20:16,106 --> 00:20:18,166
return false if the origin


695
00:20:18,166 --> 00:20:18,876
changes.


696
00:20:18,876 --> 00:20:19,706
Okay, so if the user is just


697
00:20:19,706 --> 00:20:20,636
scrolling through your content,


698
00:20:20,636 --> 00:20:21,606
we won't invalidate.


699
00:20:21,606 --> 00:20:22,726
Let it by default.


700
00:20:23,366 --> 00:20:25,446
But if the iPad rotates, the


701
00:20:25,446 --> 00:20:26,856
phone rotates, and your app


702
00:20:26,856 --> 00:20:28,136
changes to a different size,


703
00:20:28,436 --> 00:20:29,316
it'll return true.


704
00:20:30,566 --> 00:20:32,596
Now a slight exception to this


705
00:20:32,596 --> 00:20:33,786
is things like floating headers


706
00:20:33,786 --> 00:20:34,346
and footers, right.


707
00:20:34,346 --> 00:20:35,606
We have to recompute those while


708
00:20:35,606 --> 00:20:37,056
you're scrolling your content.


709
00:20:37,376 --> 00:20:39,146
That'll do a custom invalidation


710
00:20:39,146 --> 00:20:40,196
to take care of those things.


711
00:20:40,826 --> 00:20:41,846
Okay. So enough theory.


712
00:20:42,536 --> 00:20:44,936
Let's switch back to our


713
00:20:44,936 --> 00:20:47,116
development machine and have


714
00:20:47,116 --> 00:20:48,616
Mohammed walk us through what


715
00:20:48,616 --> 00:20:49,376
this is going to look like in


716
00:20:49,406 --> 00:20:51,316
code building this fancy custom,


717
00:20:51,316 --> 00:20:52,206
UICollectionViewLayout.


718
00:20:53,916 --> 00:20:55,486
>> All right, let's dive right


719
00:20:55,486 --> 00:20:55,746
in.


720
00:20:56,136 --> 00:20:57,886
So I've already put together


721
00:20:58,156 --> 00:21:00,506
another layout subclass that


722
00:21:00,506 --> 00:21:01,416
we're going to use for this


723
00:21:01,416 --> 00:21:03,336
layout, and you might notice


724
00:21:03,336 --> 00:21:04,426
that it's a subclass of


725
00:21:04,426 --> 00:21:06,276
UICollectionViewLayout directly,


726
00:21:06,276 --> 00:21:07,736
not a subclass of


727
00:21:07,736 --> 00:21:09,906
CollectionViewLayout, and this


728
00:21:09,906 --> 00:21:11,596
is for the reasons that Steve


729
00:21:11,636 --> 00:21:13,786
explained to us earlier are


730
00:21:14,146 --> 00:21:16,006
UICollectionViewLayout doesn't


731
00:21:16,006 --> 00:21:17,356
really meet the needs of our


732
00:21:17,356 --> 00:21:19,446
custom mosaic design.


733
00:21:20,906 --> 00:21:22,076
So the first thing I'm doing


734
00:21:22,076 --> 00:21:23,626
here is I'm setting up a couple


735
00:21:23,626 --> 00:21:25,246
of instance variables that I'm


736
00:21:25,246 --> 00:21:26,646
going to use to hold onto some


737
00:21:26,646 --> 00:21:28,176
key pieces of information that I


738
00:21:28,176 --> 00:21:29,366
can refer to later.


739
00:21:30,706 --> 00:21:32,946
The first of these is a content


740
00:21:32,946 --> 00:21:34,816
bound CG rect, which I'm going


741
00:21:34,816 --> 00:21:37,476
to use to keep a representative


742
00:21:37,516 --> 00:21:39,396
bounds of all the items within


743
00:21:39,396 --> 00:21:40,226
my CollectionView.


744
00:21:40,776 --> 00:21:43,366
And the second is a cached


745
00:21:43,366 --> 00:21:44,636
attributes array, which I'm


746
00:21:44,636 --> 00:21:46,106
going to use to hold onto my


747
00:21:46,516 --> 00:21:48,336
layout attributes so I can refer


748
00:21:48,336 --> 00:21:49,606
to them quickly when performance


749
00:21:49,606 --> 00:21:50,086
matters.


750
00:21:51,496 --> 00:21:52,916
So we're going to start out by


751
00:21:52,916 --> 00:21:54,396
implementing our prepare method


752
00:21:54,396 --> 00:21:55,836
again for this layout.


753
00:21:56,846 --> 00:21:59,776
Prepare is the ideal place to do


754
00:21:59,776 --> 00:22:01,116
the bulk of our layout work


755
00:22:01,326 --> 00:22:03,086
because it's getting called once


756
00:22:03,146 --> 00:22:04,086
per invalidation.


757
00:22:04,686 --> 00:22:06,616
We can set up our layout here


758
00:22:06,756 --> 00:22:08,696
and then avoid having to do any


759
00:22:08,696 --> 00:22:10,626
heavy layout work or any heavy


760
00:22:10,626 --> 00:22:12,776
layout math in the methods that


761
00:22:12,776 --> 00:22:13,976
are called much more frequently.


762
00:22:18,486 --> 00:22:19,226
So we're doing a couple of


763
00:22:19,226 --> 00:22:19,696
things here.


764
00:22:19,956 --> 00:22:21,836
First, we're resetting our


765
00:22:21,836 --> 00:22:23,086
cached attributes and our


766
00:22:23,086 --> 00:22:24,816
content bounds just to clear out


767
00:22:24,816 --> 00:22:26,956
any stale information from


768
00:22:26,956 --> 00:22:28,276
previous invalidations.


769
00:22:29,576 --> 00:22:32,196
Next, we're doing a few things


770
00:22:32,196 --> 00:22:33,426
for every item in our


771
00:22:33,426 --> 00:22:34,056
CollectionView.


772
00:22:35,346 --> 00:22:36,736
The first of these is actually


773
00:22:36,786 --> 00:22:38,536
preparing the attributes, and


774
00:22:38,536 --> 00:22:39,626
now I'm not going to go too


775
00:22:39,626 --> 00:22:41,506
deeply into what that entails


776
00:22:41,506 --> 00:22:42,836
for our specific layout because


777
00:22:42,836 --> 00:22:43,676
this is going to be different


778
00:22:43,676 --> 00:22:44,076
for you.


779
00:22:44,466 --> 00:22:46,376
This is where you are going to


780
00:22:46,376 --> 00:22:47,606
calculate the sizes and


781
00:22:47,606 --> 00:22:49,506
positions and transforms, etc.,


782
00:22:49,506 --> 00:22:52,116
for your cells to match your


783
00:22:52,116 --> 00:22:52,976
design needs.


784
00:22:53,746 --> 00:22:54,886
But there are a couple of key


785
00:22:54,886 --> 00:22:55,646
things that we're going to do


786
00:22:55,646 --> 00:22:57,076
here after we are done with the


787
00:22:57,076 --> 00:22:57,706
attributes.


788
00:22:58,176 --> 00:22:59,266
The first is, we're going to


789
00:22:59,266 --> 00:22:59,676
cache them.


790
00:22:59,786 --> 00:23:00,576
We're going to put them in our


791
00:23:00,576 --> 00:23:01,936
cached attributes array so we


792
00:23:01,936 --> 00:23:03,536
can grab them quickly later on.


793
00:23:04,086 --> 00:23:06,486
And the second is, we're going


794
00:23:06,486 --> 00:23:08,406
to union their frame with our


795
00:23:08,406 --> 00:23:10,426
content bounds rect so that our


796
00:23:10,426 --> 00:23:11,726
content bounds are kept up to


797
00:23:11,726 --> 00:23:11,996
date.


798
00:23:13,896 --> 00:23:15,266
So now that our prepare is up


799
00:23:15,266 --> 00:23:16,366
and running, we need to


800
00:23:16,366 --> 00:23:18,546
implement the remaining methods


801
00:23:18,546 --> 00:23:20,206
in our layout that we need to


802
00:23:20,406 --> 00:23:21,536
get everything working.


803
00:23:22,416 --> 00:23:25,686
So the first of these is


804
00:23:25,686 --> 00:23:27,186
CollectionView Content Size


805
00:23:27,596 --> 00:23:29,036
where if we had done our job


806
00:23:29,036 --> 00:23:30,986
right in Prepare, we can just


807
00:23:30,986 --> 00:23:32,466
return our Content Bounds as


808
00:23:32,466 --> 00:23:33,006
size.


809
00:23:35,556 --> 00:23:37,286
Next is should invalidate layout


810
00:23:37,286 --> 00:23:38,306
for bounds change.


811
00:23:39,576 --> 00:23:40,876
Now since our layout doesn't


812
00:23:40,876 --> 00:23:43,036
have any elements that require


813
00:23:43,036 --> 00:23:44,946
us to invalidate while we're


814
00:23:44,946 --> 00:23:47,486
scrolling, so no floating


815
00:23:47,486 --> 00:23:48,966
headers, no floating footers or


816
00:23:48,966 --> 00:23:49,566
anything like that.


817
00:23:50,106 --> 00:23:50,916
We only really want to


818
00:23:50,916 --> 00:23:51,896
invalidate when our


819
00:23:51,896 --> 00:23:53,706
CollectionView's bounds of size


820
00:23:53,706 --> 00:23:54,276
changes.


821
00:23:54,706 --> 00:23:56,276
So we'll just return true if our


822
00:23:56,276 --> 00:23:58,076
new bounds of size is not equal


823
00:23:58,076 --> 00:23:59,606
to our CollectionView's bounds


824
00:23:59,606 --> 00:24:01,486
of size, our current bounds of


825
00:24:01,486 --> 00:24:01,856
size.


826
00:24:03,876 --> 00:24:05,366
After that, we'll implement


827
00:24:05,366 --> 00:24:06,616
LayoutAttributesForItem


828
00:24:06,616 --> 00:24:08,846
AtIndexPath where, again, since


829
00:24:08,846 --> 00:24:09,886
we've prepared all the


830
00:24:09,886 --> 00:24:10,906
attributes in our Prepare


831
00:24:10,906 --> 00:24:12,846
method, we can just grab the


832
00:24:12,846 --> 00:24:14,526
specific attributes that


833
00:24:14,526 --> 00:24:15,616
correspond to the


834
00:24:15,786 --> 00:24:17,626
RequestAtIndexPath from our


835
00:24:17,626 --> 00:24:17,936
array.


836
00:24:18,116 --> 00:24:20,756
And finally, we're going to


837
00:24:20,756 --> 00:24:21,236
implement


838
00:24:22,256 --> 00:24:23,786
LayoutAttributesForElements


839
00:24:23,786 --> 00:24:24,166
InRect.


840
00:24:25,316 --> 00:24:26,776
Now this method is called


841
00:24:26,776 --> 00:24:27,656
periodically by the


842
00:24:27,656 --> 00:24:29,096
CollectionView with different


843
00:24:29,096 --> 00:24:31,676
query rects, which may be bigger


844
00:24:31,676 --> 00:24:32,486
than our CollectionView.


845
00:24:32,616 --> 00:24:34,136
Our CollectionView is just


846
00:24:34,136 --> 00:24:36,566
asking for a set of attributes


847
00:24:36,566 --> 00:24:37,926
that match a certain region.


848
00:24:38,676 --> 00:24:41,746
It's our job to return an array


849
00:24:41,896 --> 00:24:44,386
that contains all the attributes


850
00:24:44,786 --> 00:24:46,266
that correspond to all the items


851
00:24:46,306 --> 00:24:47,576
that are going to appear within


852
00:24:47,576 --> 00:24:48,866
that rect in our CollectionView.


853
00:24:50,296 --> 00:24:52,766
So we can answer that question


854
00:24:52,846 --> 00:24:54,836
here simply by filtering our


855
00:24:54,836 --> 00:24:57,616
cached attributes array on the


856
00:24:57,616 --> 00:25:00,216
frame of the attributes.


857
00:25:00,216 --> 00:25:02,396
So if our attributes have a


858
00:25:02,476 --> 00:25:04,466
frame that intersects our query


859
00:25:04,466 --> 00:25:06,566
rect, we can return them.


860
00:25:06,566 --> 00:25:08,826
Okay. So let's switch back to


861
00:25:08,826 --> 00:25:11,206
the sim and see what our layout


862
00:25:11,206 --> 00:25:11,786
looks like.


863
00:25:12,626 --> 00:25:14,106
So I'm going to select one of


864
00:25:14,106 --> 00:25:15,806
these feeds, and there you go.


865
00:25:15,806 --> 00:25:17,586
We have our layout.


866
00:25:17,586 --> 00:25:19,086
Our images are nicely loaded in


867
00:25:19,086 --> 00:25:21,146
this fancy mosaic configuration,


868
00:25:21,146 --> 00:25:23,706
and if we rotate to landscape,


869
00:25:23,706 --> 00:25:25,246
you can see that our cells have


870
00:25:25,246 --> 00:25:26,996
resized so we've updated


871
00:25:26,996 --> 00:25:28,036
everything correctly, we've


872
00:25:28,036 --> 00:25:29,466
invalidated, which is great.


873
00:25:32,286 --> 00:25:36,876
So this looks like our spec, but


874
00:25:36,876 --> 00:25:38,516
that scrolling performance isn't


875
00:25:38,516 --> 00:25:39,306
great, is it?


876
00:25:39,436 --> 00:25:39,636
>> No.


877
00:25:39,636 --> 00:25:40,786
>> No, it's pretty bad, huh.


878
00:25:41,826 --> 00:25:43,116
So you might already have an


879
00:25:43,116 --> 00:25:44,286
idea of what's going on here.


880
00:25:44,386 --> 00:25:45,536
Let's switch back to the code


881
00:25:45,536 --> 00:25:47,946
and see what might be happening.


882
00:25:49,176 --> 00:25:50,386
So if we take a look at our


883
00:25:50,386 --> 00:25:51,666
layout attributes or elements in


884
00:25:51,666 --> 00:25:54,386
rect here, remember that this


885
00:25:54,386 --> 00:25:55,946
method gets called frequently


886
00:25:55,946 --> 00:25:56,836
during scrolling.


887
00:25:58,616 --> 00:26:01,376
So this function here, which is


888
00:26:01,376 --> 00:26:03,656
filtering our entire array, you


889
00:26:03,656 --> 00:26:05,036
might imagine can get really


890
00:26:05,036 --> 00:26:06,666
expensive as the number of items


891
00:26:06,666 --> 00:26:08,096
in our CollectionView increases.


892
00:26:08,416 --> 00:26:09,476
So the more photos we have in


893
00:26:09,476 --> 00:26:11,106
our app, the slower our


894
00:26:11,106 --> 00:26:12,316
scrolling performance is going


895
00:26:12,316 --> 00:26:13,096
to be.


896
00:26:14,296 --> 00:26:15,506
So if you find yourself in a


897
00:26:15,506 --> 00:26:17,146
situation like this, it helps to


898
00:26:17,146 --> 00:26:18,766
step back and think about the


899
00:26:18,766 --> 00:26:20,776
nature of your layout and think


900
00:26:20,776 --> 00:26:21,976
about whether you can find any


901
00:26:21,976 --> 00:26:23,466
optimization opportunities.


902
00:26:24,296 --> 00:26:28,476
So our layout kind of demands


903
00:26:28,476 --> 00:26:31,226
that every cell apps next to or


904
00:26:31,226 --> 00:26:32,856
below it's preceding cell.


905
00:26:33,536 --> 00:26:34,976
So this means that our


906
00:26:34,976 --> 00:26:37,926
attributes are already sorted


907
00:26:37,926 --> 00:26:39,126
within our cached attributes


908
00:26:39,126 --> 00:26:41,376
array by their frame's minimum y


909
00:26:41,376 --> 00:26:41,736
value.


910
00:26:43,456 --> 00:26:45,736
So we have a sorted array, so we


911
00:26:45,736 --> 00:26:48,006
can speed up our search by doing


912
00:26:48,006 --> 00:26:49,206
something like a binary search


913
00:26:49,206 --> 00:26:51,826
as opposed to our linear filter


914
00:26:51,826 --> 00:26:52,506
that we're doing now.


915
00:26:53,386 --> 00:26:57,786
So let's remove our slow


916
00:26:57,786 --> 00:27:00,216
implementation here, and let's


917
00:27:00,216 --> 00:27:01,026
replace it with something that


918
00:27:01,026 --> 00:27:01,936
should be much faster.


919
00:27:03,856 --> 00:27:06,196
So I'm going to step through


920
00:27:06,196 --> 00:27:07,226
this bit by bit, don't worry.


921
00:27:08,216 --> 00:27:10,066
So the first thing we're doing


922
00:27:10,066 --> 00:27:12,606
here is we're calling into


923
00:27:13,476 --> 00:27:15,136
binary search function that


924
00:27:15,316 --> 00:27:16,656
we've already prepared, which


925
00:27:16,656 --> 00:27:17,986
takes in a range of indices


926
00:27:17,986 --> 00:27:20,526
within our array and our query


927
00:27:20,526 --> 00:27:20,806
rect.


928
00:27:22,276 --> 00:27:25,956
If it finds a set of attributes


929
00:27:25,956 --> 00:27:27,086
with a frame that sits within


930
00:27:27,086 --> 00:27:28,706
our rect, it'll return the


931
00:27:28,706 --> 00:27:30,586
attributes as index within our


932
00:27:30,586 --> 00:27:30,806
array.


933
00:27:32,716 --> 00:27:34,616
Then starting from that index,


934
00:27:34,616 --> 00:27:36,856
we can build up the set of the


935
00:27:36,856 --> 00:27:39,016
rest of attributes for our query


936
00:27:39,016 --> 00:27:41,736
rect simply by looping up and


937
00:27:41,736 --> 00:27:43,736
down in our array and picking up


938
00:27:43,736 --> 00:27:46,376
attributes until we exit our


939
00:27:46,376 --> 00:27:47,506
query rect, until we find


940
00:27:47,506 --> 00:27:49,016
attributes that are outside our


941
00:27:49,016 --> 00:27:49,176
rect.


942
00:27:49,886 --> 00:27:51,466
And this should be much faster.


943
00:27:51,946 --> 00:27:53,056
You have thousands of items in


944
00:27:53,056 --> 00:27:53,416
your array.


945
00:27:53,416 --> 00:27:55,276
You're not going to loop through


946
00:27:55,276 --> 00:27:56,566
the array thousands of items,


947
00:27:56,566 --> 00:27:57,886
thousands of times.


948
00:27:58,576 --> 00:28:00,626
Okay, so let's go back to the


949
00:28:00,626 --> 00:28:02,436
sim again and let's see what our


950
00:28:02,436 --> 00:28:03,946
faster scrolling algorithm looks


951
00:28:03,946 --> 00:28:04,196
like.


952
00:28:07,056 --> 00:28:09,306
Let's pop this open and give it


953
00:28:09,306 --> 00:28:09,676
a flick.


954
00:28:10,116 --> 00:28:11,096
It's way faster.


955
00:28:11,816 --> 00:28:13,206
What do you think, Steve?


956
00:28:13,826 --> 00:28:14,326
>> Much better.


957
00:28:14,326 --> 00:28:14,906
Okay, great.


958
00:28:14,906 --> 00:28:16,216
So we've got these two great


959
00:28:16,216 --> 00:28:16,906
layouts.


960
00:28:17,246 --> 00:28:17,936
What's next?


961
00:28:18,776 --> 00:28:20,426
>> So we have our two screens.


962
00:28:20,426 --> 00:28:22,756
That just leaves our update


963
00:28:22,756 --> 00:28:24,366
animations for our friends list


964
00:28:24,366 --> 00:28:24,516
here.


965
00:28:24,936 --> 00:28:25,446
>> Oh, great.


966
00:28:25,496 --> 00:28:25,706
All right.


967
00:28:25,706 --> 00:28:26,676
Well let's switch back over to


968
00:28:27,096 --> 00:28:28,836
slides, and let's walk through


969
00:28:28,836 --> 00:28:30,786
that totally cool update


970
00:28:30,786 --> 00:28:32,036
animation I think our designer


971
00:28:32,036 --> 00:28:32,426
called it.


972
00:28:33,266 --> 00:28:34,766
All right, so we've got a video


973
00:28:34,766 --> 00:28:35,046
here.


974
00:28:35,046 --> 00:28:36,446
Let's run through this and see


975
00:28:36,946 --> 00:28:38,176
what this totally cool update


976
00:28:38,176 --> 00:28:39,086
animation looks like.


977
00:28:39,536 --> 00:28:41,656
Okay. So we have some elements


978
00:28:41,656 --> 00:28:41,756
here.


979
00:28:41,756 --> 00:28:44,186
We see that last item is getting


980
00:28:44,186 --> 00:28:44,966
refreshed.


981
00:28:44,966 --> 00:28:46,246
I guess somebody posted a


982
00:28:46,246 --> 00:28:48,136
picture, and then we got another


983
00:28:48,136 --> 00:28:49,656
item there, it looks like, yeah,


984
00:28:49,656 --> 00:28:51,706
that third item smears is not


985
00:28:51,706 --> 00:28:52,546
going to be here.


986
00:28:52,686 --> 00:28:55,316
Okay. So we've got three basic


987
00:28:55,316 --> 00:28:56,696
operations happening, right.


988
00:28:56,696 --> 00:28:59,006
We've got a reload, a move, and


989
00:28:59,006 --> 00:28:59,586
a delete.


990
00:29:00,216 --> 00:29:01,386
Why don't we switch back over to


991
00:29:01,386 --> 00:29:03,616
the dev machine, and Mohammed,


992
00:29:03,776 --> 00:29:04,686
why don't you show us how this


993
00:29:04,686 --> 00:29:04,996
works?


994
00:29:06,096 --> 00:29:08,416
>> Sure thing.


995
00:29:08,636 --> 00:29:11,226
Okay, so we're doing multiple


996
00:29:11,226 --> 00:29:12,746
animated updates at the same


997
00:29:12,746 --> 00:29:13,216
time.


998
00:29:14,036 --> 00:29:15,606
So you might be aware of a great


999
00:29:15,606 --> 00:29:17,206
tool that UICollectionView and


1000
00:29:17,206 --> 00:29:19,576
UITableView provide us, and it's


1001
00:29:19,576 --> 00:29:21,236
the Perform Batch Updates API,


1002
00:29:21,936 --> 00:29:24,266
which basically allows us to


1003
00:29:24,266 --> 00:29:26,636
pass the collection view a set


1004
00:29:26,636 --> 00:29:28,036
of updates that can be performed


1005
00:29:28,036 --> 00:29:29,736
at the same time with animation.


1006
00:29:30,606 --> 00:29:33,226
So I'm going to add a call to


1007
00:29:33,486 --> 00:29:34,126
CollectionView


1008
00:29:34,186 --> 00:29:36,426
PerformBatchUpdates, and note


1009
00:29:36,426 --> 00:29:37,646
that I'm doing both my data


1010
00:29:37,646 --> 00:29:38,896
source updates and my


1011
00:29:38,896 --> 00:29:40,126
CollectionView updates in the


1012
00:29:40,126 --> 00:29:40,856
closure here.


1013
00:29:41,256 --> 00:29:43,196
This is really the best way that


1014
00:29:43,196 --> 00:29:45,486
I have of coordinating my


1015
00:29:45,606 --> 00:29:47,576
updates and keeping things


1016
00:29:47,576 --> 00:29:48,806
neatly in sync and avoiding


1017
00:29:48,806 --> 00:29:49,676
inconsistencies.


1018
00:29:50,836 --> 00:29:53,356
So, first I'm just updating my


1019
00:29:53,356 --> 00:29:57,586
last item in my data source.


1020
00:29:57,666 --> 00:29:59,476
I'm removing the second to last


1021
00:29:59,476 --> 00:30:01,316
item, picking up the last item,


1022
00:30:01,316 --> 00:30:02,416
moving it to the top, and then


1023
00:30:02,416 --> 00:30:04,086
I'm asking the CollectionView to


1024
00:30:04,086 --> 00:30:05,736
perform the animations that I


1025
00:30:05,736 --> 00:30:05,926
want.


1026
00:30:06,766 --> 00:30:08,706
Okay. Let's go back to the sim


1027
00:30:08,706 --> 00:30:10,336
again and see what our update


1028
00:30:10,336 --> 00:30:10,846
looks like.


1029
00:30:10,846 --> 00:30:13,166
So I have wired our update code


1030
00:30:13,166 --> 00:30:14,426
through this update button at


1031
00:30:14,426 --> 00:30:17,856
the top right corner, and uh oh.


1032
00:30:18,056 --> 00:30:19,556
>> What's going on?


1033
00:30:20,876 --> 00:30:23,526
>> Oh, that's embarrassing.


1034
00:30:23,556 --> 00:30:25,456
What's going on here.


1035
00:30:25,456 --> 00:30:26,126
>> You know, I've been writing


1036
00:30:26,126 --> 00:30:27,026
iOS for a long time.


1037
00:30:27,026 --> 00:30:28,596
I've seen this movie before.


1038
00:30:29,076 --> 00:30:31,396
>> Yeah, it sucks when it


1039
00:30:31,596 --> 00:30:34,586
happens on stage though.


1040
00:30:34,586 --> 00:30:36,096
You know, we're running out of


1041
00:30:36,096 --> 00:30:37,756
time here, so why don't we just


1042
00:30:37,756 --> 00:30:39,256
call reload data, and we can


1043
00:30:39,636 --> 00:30:41,806
come back and do the animations


1044
00:30:41,806 --> 00:30:41,966
for V2.


1045
00:30:41,966 --> 00:30:42,396
>> Really?


1046
00:30:43,516 --> 00:30:47,816
[ Applause ]


1047
00:30:48,316 --> 00:30:50,756
You know, we could do that, but


1048
00:30:50,756 --> 00:30:51,846
then we'd lose that totally cool


1049
00:30:51,846 --> 00:30:53,426
update animation, and our users


1050
00:30:53,426 --> 00:30:55,036
expect these lively interfaces,


1051
00:30:56,016 --> 00:30:56,206
right?


1052
00:30:56,666 --> 00:30:57,766
>> Yeah, yeah, you're right.


1053
00:30:57,766 --> 00:30:58,286
You know what?


1054
00:30:58,286 --> 00:30:58,996
They deserve better.


1055
00:30:59,446 --> 00:31:00,526
>> Ah, I like the way you think.


1056
00:31:00,676 --> 00:31:01,426
All right, let's switch back


1057
00:31:01,426 --> 00:31:03,256
over to slides real quick, and


1058
00:31:03,256 --> 00:31:04,426
let's see if we can save our


1059
00:31:04,876 --> 00:31:06,736
totally cool update animation.


1060
00:31:07,846 --> 00:31:08,736
You've seen this before.


1061
00:31:08,876 --> 00:31:09,246
All right.


1062
00:31:09,246 --> 00:31:11,286
So first of all, let's dig into


1063
00:31:11,286 --> 00:31:12,596
this debug exception and see


1064
00:31:12,596 --> 00:31:14,446
what it's trying to tell us.


1065
00:31:14,446 --> 00:31:14,706
All right.


1066
00:31:15,566 --> 00:31:16,436
So it's saying here we're


1067
00:31:16,436 --> 00:31:18,276
attempting to perform a delete


1068
00:31:18,576 --> 00:31:20,716
and a move from the same index


1069
00:31:20,716 --> 00:31:21,766
path, 0-3.


1070
00:31:21,766 --> 00:31:22,756
So if I remember right, that was


1071
00:31:22,756 --> 00:31:23,656
the fourth item.


1072
00:31:23,656 --> 00:31:24,826
We did a reload and a move on


1073
00:31:24,826 --> 00:31:25,046
that.


1074
00:31:25,046 --> 00:31:27,806
We didn't delete it, we deleted


1075
00:31:27,806 --> 00:31:29,386
the third item, 0-2, right.


1076
00:31:30,186 --> 00:31:31,306
>> I don't remember deleting


1077
00:31:31,306 --> 00:31:31,396
them.


1078
00:31:31,396 --> 00:31:32,786
>> So, yeah, what's up with


1079
00:31:32,786 --> 00:31:33,026
that?


1080
00:31:33,026 --> 00:31:34,326
All right, but before we do


1081
00:31:34,326 --> 00:31:36,876
this, let's go back and take a


1082
00:31:36,876 --> 00:31:38,146
peek at the PerformBatchUpdates


1083
00:31:38,146 --> 00:31:39,826
API and talk about some


1084
00:31:40,126 --> 00:31:41,196
high-level principles.


1085
00:31:41,196 --> 00:31:41,456
All right.


1086
00:31:41,456 --> 00:31:43,496
So as Mohammed mentioned earlier


1087
00:31:43,496 --> 00:31:45,356
when he introduced this API, the


1088
00:31:45,356 --> 00:31:47,156
purpose of this API is that we


1089
00:31:47,156 --> 00:31:48,826
can commit multiple updates at


1090
00:31:48,826 --> 00:31:50,486
the same time and have anything


1091
00:31:50,486 --> 00:31:51,786
animate together and get that


1092
00:31:51,786 --> 00:31:53,526
great experience.


1093
00:31:54,296 --> 00:31:55,646
And as he also mentioned, it's


1094
00:31:55,646 --> 00:31:57,556
super important to perform your


1095
00:31:57,606 --> 00:31:59,516
data source updates alongside


1096
00:31:59,516 --> 00:32:00,466
your CollectionView updates


1097
00:32:00,526 --> 00:32:01,606
inside that CollectionView


1098
00:32:01,606 --> 00:32:02,466
update closure.


1099
00:32:03,276 --> 00:32:04,566
Now, what I'm saying for


1100
00:32:04,566 --> 00:32:05,826
CollectionView also applies for


1101
00:32:05,826 --> 00:32:06,316
TableView.


1102
00:32:06,316 --> 00:32:07,386
So if you got TableViews in your


1103
00:32:07,386 --> 00:32:09,136
apps, all this information is


1104
00:32:09,136 --> 00:32:10,256
going the same direction.


1105
00:32:11,496 --> 00:32:12,916
Okay. So let's make some


1106
00:32:12,916 --> 00:32:13,856
observations here.


1107
00:32:14,406 --> 00:32:16,136
The CollectionView updates, when


1108
00:32:16,136 --> 00:32:16,976
you do inserts, moves, and


1109
00:32:16,976 --> 00:32:19,186
deletes, the ordering of those


1110
00:32:19,246 --> 00:32:20,586
do not matter in your update's


1111
00:32:20,586 --> 00:32:21,016
closure.


1112
00:32:21,736 --> 00:32:22,556
Put them anywhere you want.


1113
00:32:23,666 --> 00:32:25,046
Now however your data source


1114
00:32:25,046 --> 00:32:26,176
updates, when you're changing


1115
00:32:26,176 --> 00:32:27,176
the structure offer your data


1116
00:32:27,176 --> 00:32:28,636
source, which is backing that


1117
00:32:28,816 --> 00:32:31,306
data source, or does matter.


1118
00:32:32,456 --> 00:32:34,906
Okay, so this is best served by


1119
00:32:34,906 --> 00:32:36,146
showing an example, so I'm going


1120
00:32:36,146 --> 00:32:38,086
to take a example of two arrays


1121
00:32:38,086 --> 00:32:39,106
that have three elements in


1122
00:32:39,106 --> 00:32:40,566
them, and we're going to


1123
00:32:40,566 --> 00:32:41,946
strengthen our intuition on this


1124
00:32:41,946 --> 00:32:43,796
and show a delete and an insert,


1125
00:32:44,006 --> 00:32:45,406
but we're going to do the first


1126
00:32:45,406 --> 00:32:46,916
run through with the delete


1127
00:32:46,996 --> 00:32:48,416
first and the second delete


1128
00:32:48,416 --> 00:32:48,846
second.


1129
00:32:48,846 --> 00:32:49,666
We're going to reverse the


1130
00:32:49,666 --> 00:32:51,196
order, just to kind of


1131
00:32:51,196 --> 00:32:52,156
strengthen our intuition.


1132
00:32:52,266 --> 00:32:53,076
I do this all the time, draw


1133
00:32:53,076 --> 00:32:53,646
pictures, right.


1134
00:32:53,826 --> 00:32:54,786
All right.


1135
00:32:54,786 --> 00:32:56,056
So we deleted the first item,


1136
00:32:57,246 --> 00:32:59,216
and now we're going to insert at


1137
00:32:59,296 --> 00:33:00,346
index one.


1138
00:33:01,186 --> 00:33:02,526
Okay, on the second example, we


1139
00:33:02,526 --> 00:33:03,846
reverse the order and do the


1140
00:33:03,846 --> 00:33:05,246
insert first and then the


1141
00:33:05,246 --> 00:33:05,626
delete.


1142
00:33:06,526 --> 00:33:08,436
So our intuition holds, indeed


1143
00:33:08,436 --> 00:33:09,356
we get a different result.


1144
00:33:09,456 --> 00:33:10,426
This is probably not a good


1145
00:33:10,496 --> 00:33:10,936
thing, right.


1146
00:33:12,376 --> 00:33:14,776
So let's contrast this with the


1147
00:33:14,776 --> 00:33:15,986
CollectionView updates.


1148
00:33:16,126 --> 00:33:17,806
Now here I have two sets of


1149
00:33:17,806 --> 00:33:18,816
CollectionView updates on a


1150
00:33:18,816 --> 00:33:21,256
submit via batch updates, and


1151
00:33:21,256 --> 00:33:22,396
I've left out the data source


1152
00:33:22,396 --> 00:33:23,526
updates, just to keep the slide


1153
00:33:23,636 --> 00:33:23,926
tidy.


1154
00:33:24,996 --> 00:33:25,906
But I've got an insert and a


1155
00:33:25,906 --> 00:33:27,206
delete on the first one, and the


1156
00:33:27,206 --> 00:33:28,766
second one has a delete and a


1157
00:33:28,766 --> 00:33:30,026
insert, and the order is


1158
00:33:30,056 --> 00:33:30,406
different.


1159
00:33:30,406 --> 00:33:31,696
This will give you the exact


1160
00:33:31,696 --> 00:33:32,326
same result.


1161
00:33:33,426 --> 00:33:34,376
We're all engineers.


1162
00:33:34,376 --> 00:33:35,956
We want to know why, why is


1163
00:33:35,956 --> 00:33:36,286
that?


1164
00:33:36,286 --> 00:33:38,066
Well, let's talk about that.


1165
00:33:38,676 --> 00:33:39,796
How does this happen?


1166
00:33:39,796 --> 00:33:40,766
Why is the ordering not


1167
00:33:40,766 --> 00:33:42,166
important for the update sent to


1168
00:33:42,166 --> 00:33:43,106
the CollectionView, and of


1169
00:33:43,106 --> 00:33:44,096
course it is for your data


1170
00:33:44,096 --> 00:33:44,296
source.


1171
00:33:44,296 --> 00:33:46,446
Okay. So let's walk through


1172
00:33:46,446 --> 00:33:47,926
these operation by operation.


1173
00:33:47,926 --> 00:33:50,346
So the first one to delete, this


1174
00:33:50,346 --> 00:33:52,506
is process in descending index


1175
00:33:52,586 --> 00:33:53,196
path order.


1176
00:33:53,196 --> 00:33:55,146
Now let's talk about the index


1177
00:33:55,146 --> 00:33:55,536
paths.


1178
00:33:55,716 --> 00:33:57,576
So first of all, if you can


1179
00:33:57,576 --> 00:33:58,586
think about what's happening on


1180
00:33:58,586 --> 00:33:59,946
a PerformBatchUpdate, before the


1181
00:33:59,946 --> 00:34:01,206
batch update starts, your data


1182
00:34:01,206 --> 00:34:02,786
source is in a before state.


1183
00:34:04,046 --> 00:34:05,466
Now once everything is done in


1184
00:34:05,466 --> 00:34:07,156
the batch updates, you'll be an


1185
00:34:07,276 --> 00:34:08,025
after state.


1186
00:34:08,606 --> 00:34:10,906
Okay. So for delete, the index


1187
00:34:10,966 --> 00:34:12,346
paths always referred to the


1188
00:34:12,346 --> 00:34:13,275
before stage.


1189
00:34:13,686 --> 00:34:15,326
So that's delete.


1190
00:34:15,326 --> 00:34:18,226
So insert is processed in


1191
00:34:18,335 --> 00:34:19,886
ascending index path order


1192
00:34:19,886 --> 00:34:20,255
paths.


1193
00:34:20,846 --> 00:34:23,346
So the index paths refer to in


1194
00:34:23,346 --> 00:34:25,376
the insert are always referring


1195
00:34:25,446 --> 00:34:27,116
to the final state or the after


1196
00:34:27,255 --> 00:34:28,206
updates stage.


1197
00:34:29,636 --> 00:34:30,946
Okay, a move is this mixture of


1198
00:34:30,946 --> 00:34:31,436
the two, right.


1199
00:34:31,436 --> 00:34:33,485
You have a from and a to index


1200
00:34:33,485 --> 00:34:35,235
path, and the from is in the


1201
00:34:35,235 --> 00:34:37,916
before state, right, and the to


1202
00:34:38,416 --> 00:34:39,366
is in the after state.


1203
00:34:39,806 --> 00:34:42,545
Reload. Now reload is a little


1204
00:34:42,545 --> 00:34:43,846
bit of a super command if you


1205
00:34:43,846 --> 00:34:44,186
will, right.


1206
00:34:44,186 --> 00:34:46,096
It actually decomposes down into


1207
00:34:46,096 --> 00:34:47,876
a delete and an insert.


1208
00:34:48,416 --> 00:34:51,266
And the index path specified in


1209
00:34:51,266 --> 00:34:54,045
a reload is speaking about the


1210
00:34:54,045 --> 00:34:55,016
before state.


1211
00:34:56,126 --> 00:34:57,776
Okay. So this insight now that


1212
00:34:57,776 --> 00:34:59,106
we understand what reload is


1213
00:34:59,106 --> 00:35:00,946
really doing can kind of tell us


1214
00:35:00,946 --> 00:35:02,426
a little bit of what's going on


1215
00:35:02,756 --> 00:35:04,466
with our error in our app


1216
00:35:05,476 --> 00:35:06,516
because of the delete on the


1217
00:35:06,516 --> 00:35:07,696
reload on the last one is


1218
00:35:07,696 --> 00:35:09,026
conflicting internally with the


1219
00:35:09,026 --> 00:35:10,376
notion of moving that item,


1220
00:35:10,476 --> 00:35:10,796
okay.


1221
00:35:10,846 --> 00:35:12,006
So we can address this in a


1222
00:35:12,006 --> 00:35:14,396
minute when we get back to code.


1223
00:35:14,396 --> 00:35:15,906
Okay, so I'm not going to go


1224
00:35:15,906 --> 00:35:16,856
through these, but you can


1225
00:35:16,856 --> 00:35:17,866
reason about these later.


1226
00:35:17,866 --> 00:35:18,996
Just put it up here as reference


1227
00:35:18,996 --> 00:35:19,706
that these are the things


1228
00:35:19,706 --> 00:35:21,596
that'll cause CollectionView to


1229
00:35:21,596 --> 00:35:22,346
go bonkers.


1230
00:35:22,726 --> 00:35:23,576
Don't do it.


1231
00:35:23,716 --> 00:35:27,486
And how can we take all this


1232
00:35:27,486 --> 00:35:29,176
knowledge and simplify it,


1233
00:35:29,176 --> 00:35:30,746
distill it in such a way that we


1234
00:35:30,746 --> 00:35:32,456
can always apply our data source


1235
00:35:32,456 --> 00:35:34,016
updates from a given set of


1236
00:35:34,016 --> 00:35:35,026
CollectionView or TableView


1237
00:35:35,026 --> 00:35:36,366
updates and make sure everything


1238
00:35:36,366 --> 00:35:36,826
is in sync.


1239
00:35:37,056 --> 00:35:37,426
All right.


1240
00:35:37,496 --> 00:35:38,796
So these four basic rules.


1241
00:35:39,446 --> 00:35:40,176
So first of all you want to


1242
00:35:40,176 --> 00:35:41,466
decompose those moves and to


1243
00:35:41,466 --> 00:35:42,336
delete and inserts.


1244
00:35:42,556 --> 00:35:44,776
Easy. And then combine all your


1245
00:35:44,776 --> 00:35:45,796
deletes and inserts into two


1246
00:35:45,796 --> 00:35:48,536
separate lists, process the


1247
00:35:48,536 --> 00:35:50,546
deletes first in descending


1248
00:35:50,546 --> 00:35:52,396
order on the index paths, and


1249
00:35:52,396 --> 00:35:54,176
then finally apply those inserts


1250
00:35:54,246 --> 00:35:55,356
in the ascending index path


1251
00:35:55,356 --> 00:35:55,636
order.


1252
00:35:55,776 --> 00:35:59,586
Do this, and you're good to go.


1253
00:35:59,816 --> 00:36:00,826
What about reload data?


1254
00:36:00,826 --> 00:36:02,466
And I know Mohammed said we


1255
00:36:02,466 --> 00:36:03,396
could just hit that and we're


1256
00:36:03,396 --> 00:36:04,676
done, and everybody laughed so


1257
00:36:04,676 --> 00:36:05,586
I'm pretty sure I yelled and


1258
00:36:05,586 --> 00:36:07,456
that's the case, but the thing


1259
00:36:07,456 --> 00:36:08,606
about reloaded data is you don't


1260
00:36:08,606 --> 00:36:09,926
get those great animations, and


1261
00:36:09,926 --> 00:36:11,236
this is really a sledge hammer


1262
00:36:11,236 --> 00:36:11,826
approach.


1263
00:36:12,516 --> 00:36:13,816
So, and we really prefer the


1264
00:36:13,816 --> 00:36:15,286
apps to be lively and animated


1265
00:36:15,286 --> 00:36:16,146
and feel great for our


1266
00:36:16,146 --> 00:36:16,686
customers.


1267
00:36:16,686 --> 00:36:19,036
So, and this is used in special


1268
00:36:19,036 --> 00:36:19,496
cases.


1269
00:36:20,356 --> 00:36:21,576
Okay, Mohammed, let's switch


1270
00:36:21,576 --> 00:36:23,416
back over real quick and see if


1271
00:36:23,416 --> 00:36:24,536
we can get this fixed in code


1272
00:36:24,536 --> 00:36:26,046
and save that totally cool


1273
00:36:26,566 --> 00:36:27,236
update animation.


1274
00:36:27,676 --> 00:36:28,546
>> All right, time to redeem


1275
00:36:28,546 --> 00:36:29,666
myself.


1276
00:36:29,666 --> 00:36:29,766
>> Yes.


1277
00:36:29,766 --> 00:36:32,066
>> So let's use the guidelines


1278
00:36:32,066 --> 00:36:33,446
that Steve just shared with us


1279
00:36:33,446 --> 00:36:34,966
to fix our update animation.


1280
00:36:35,156 --> 00:36:36,756
So let's remove our existing


1281
00:36:36,756 --> 00:36:37,556
implementation here.


1282
00:36:37,746 --> 00:36:40,456
And if you recall, our update


1283
00:36:40,456 --> 00:36:44,066
consisted of a reload, a delete


1284
00:36:44,066 --> 00:36:46,916
and a move, and our reload and


1285
00:36:46,916 --> 00:36:48,876
the move were at the same index


1286
00:36:48,876 --> 00:36:49,086
path.


1287
00:36:49,296 --> 00:36:50,386
They started at the same one.


1288
00:36:50,386 --> 00:36:51,286
So that's really where our


1289
00:36:51,286 --> 00:36:52,326
conflict is.


1290
00:36:52,796 --> 00:36:54,316
So we'll need to start out by


1291
00:36:54,436 --> 00:36:55,396
separating those two.


1292
00:36:55,956 --> 00:36:57,926
So let's take our reload out


1293
00:36:57,926 --> 00:36:59,706
into its own call to perform


1294
00:36:59,706 --> 00:37:03,546
batch updates, and here I'm just


1295
00:37:04,506 --> 00:37:06,176
updating my data source, again,


1296
00:37:06,496 --> 00:37:07,966
same as before, and calling


1297
00:37:08,156 --> 00:37:09,216
reload items on the


1298
00:37:09,216 --> 00:37:09,806
CollectionView.


1299
00:37:10,336 --> 00:37:12,496
I'm just performing it in a UI


1300
00:37:12,496 --> 00:37:14,156
view performed without animation


1301
00:37:14,686 --> 00:37:16,376
closure because if you look


1302
00:37:16,376 --> 00:37:18,336
closely at our spec, it's


1303
00:37:18,336 --> 00:37:19,716
actually nonanimated, that


1304
00:37:19,716 --> 00:37:20,436
initial reload.


1305
00:37:22,026 --> 00:37:24,236
Okay. So next up, we have to


1306
00:37:24,236 --> 00:37:25,266
take care of our remaining


1307
00:37:25,266 --> 00:37:27,496
updates, that delete and the


1308
00:37:29,616 --> 00:37:29,716
move.


1309
00:37:29,936 --> 00:37:31,866
And let's reason about them for


1310
00:37:31,866 --> 00:37:32,386
a second.


1311
00:37:32,386 --> 00:37:35,766
We have a delete at index two,


1312
00:37:35,766 --> 00:37:38,176
and then we're moving the item


1313
00:37:38,176 --> 00:37:40,376
at index three to index zero.


1314
00:37:41,386 --> 00:37:43,256
So if we break down our move


1315
00:37:43,256 --> 00:37:44,886
using the guidelines that we


1316
00:37:44,886 --> 00:37:47,146
just learned about, that becomes


1317
00:37:47,146 --> 00:37:50,046
a delete at index 2, a delete at


1318
00:37:50,046 --> 00:37:53,506
index 3, and an insertion of the


1319
00:37:53,506 --> 00:37:56,066
item from index 3 at index 0.


1320
00:37:57,496 --> 00:37:59,576
So now we have two sets of


1321
00:38:00,196 --> 00:38:00,836
operations.


1322
00:38:00,836 --> 00:38:01,926
We have deletions and


1323
00:38:01,926 --> 00:38:02,766
insertions.


1324
00:38:03,146 --> 00:38:04,826
We can process them accordingly.


1325
00:38:05,566 --> 00:38:07,246
First, we'll perform our


1326
00:38:07,246 --> 00:38:08,776
deletions in descending order.


1327
00:38:08,946 --> 00:38:11,516
So we'll do our deletion at


1328
00:38:11,656 --> 00:38:13,756
index 3 first, and will hold


1329
00:38:13,756 --> 00:38:15,546
onto the person from there so we


1330
00:38:15,546 --> 00:38:16,476
can insert them later on.


1331
00:38:17,376 --> 00:38:19,956
And then we'll delete the item


1332
00:38:19,956 --> 00:38:22,876
at index 2.


1333
00:38:23,126 --> 00:38:24,756
Then we'll need to process our


1334
00:38:24,756 --> 00:38:26,366
insertions in ascending order.


1335
00:38:26,526 --> 00:38:27,916
We just have one, so we can just


1336
00:38:27,916 --> 00:38:30,266
go ahead and insert it.


1337
00:38:30,266 --> 00:38:31,586
And finally, we'll ask the


1338
00:38:31,586 --> 00:38:34,296
CollectionView to perform the


1339
00:38:34,296 --> 00:38:35,446
animations that we want.


1340
00:38:35,816 --> 00:38:38,466
Now, note, I'm still calling


1341
00:38:38,466 --> 00:38:39,116
move here.


1342
00:38:39,116 --> 00:38:40,966
I didn't break it down into it's


1343
00:38:40,966 --> 00:38:42,726
component actions because we


1344
00:38:42,726 --> 00:38:43,836
still want the collection view


1345
00:38:44,046 --> 00:38:45,476
to play the right animations,


1346
00:38:45,476 --> 00:38:46,296
and if we've done the right


1347
00:38:46,386 --> 00:38:47,906
thing with our data source, the


1348
00:38:47,906 --> 00:38:49,086
CollectionView will do the right


1349
00:38:49,156 --> 00:38:50,616
think in terms of animations.


1350
00:38:51,376 --> 00:38:51,756
All right.


1351
00:38:51,846 --> 00:38:53,826
Let's go back to the simulator


1352
00:38:53,826 --> 00:38:56,826
and see what our update looks


1353
00:38:56,826 --> 00:38:58,066
like when it works.


1354
00:38:58,936 --> 00:38:59,966
All right.


1355
00:39:00,536 --> 00:39:01,146
Here goes nothing.


1356
00:39:01,986 --> 00:39:02,176
>> Wow.


1357
00:39:02,826 --> 00:39:02,976
>> Great!


1358
00:39:03,516 --> 00:39:07,716
[ Applause ]


1359
00:39:08,216 --> 00:39:09,296
I'm going to reload and take a


1360
00:39:09,296 --> 00:39:11,126
slow-mo victory lap just to--


1361
00:39:11,126 --> 00:39:13,696
there we go.


1362
00:39:13,946 --> 00:39:15,446
That looks exactly like our


1363
00:39:15,446 --> 00:39:16,356
spec, doesn't it.


1364
00:39:16,356 --> 00:39:17,956
>> That's great, awesome.


1365
00:39:17,986 --> 00:39:18,206
All right.


1366
00:39:18,906 --> 00:39:19,766
Well let's wrap it up.


1367
00:39:19,766 --> 00:39:21,496
We covered a ton of content.


1368
00:39:21,496 --> 00:39:22,236
Can you switch it back to


1369
00:39:22,236 --> 00:39:22,796
slides?


1370
00:39:23,906 --> 00:39:24,986
And I'd like to issue a bit of a


1371
00:39:24,986 --> 00:39:25,716
call to action.


1372
00:39:25,716 --> 00:39:28,576
So if you've been nervous or


1373
00:39:29,036 --> 00:39:30,636
anxiety building that custom


1374
00:39:30,636 --> 00:39:32,106
layout, take the stuff we just


1375
00:39:32,106 --> 00:39:33,586
applied today and go back and


1376
00:39:33,906 --> 00:39:35,196
dive in and create those custom


1377
00:39:35,196 --> 00:39:36,376
layouts and build really great


1378
00:39:36,806 --> 00:39:38,016
CollectionView solutions.


1379
00:39:38,016 --> 00:39:39,806
And if you got a lot of reload


1380
00:39:39,806 --> 00:39:41,016
data sprinkled all throughout


1381
00:39:41,016 --> 00:39:42,396
your apps and you're losing out


1382
00:39:42,396 --> 00:39:43,596
on these gray animations.


1383
00:39:44,016 --> 00:39:45,046
They'll inspect those things and


1384
00:39:45,046 --> 00:39:46,376
see maybe why you didn't


1385
00:39:46,376 --> 00:39:47,596
understand or something wasn't


1386
00:39:47,686 --> 00:39:48,966
quite jived about why it was


1387
00:39:48,966 --> 00:39:52,376
happening and fix those spots.


1388
00:39:52,546 --> 00:39:54,056
Okay, so more information, you


1389
00:39:54,056 --> 00:39:55,286
can see the link on the slide


1390
00:39:55,286 --> 00:39:55,536
here.


1391
00:39:56,266 --> 00:39:57,236
And we also have a


1392
00:39:57,236 --> 00:39:58,156
CollectionView lab tomorrow


1393
00:39:58,156 --> 00:39:59,346
morning at 9.


1394
00:39:59,346 --> 00:40:00,746
If you have any questions or


1395
00:40:00,746 --> 00:40:01,476
comments about your


1396
00:40:01,476 --> 00:40:02,706
CollectionViews, please swing on


1397
00:40:02,706 --> 00:40:03,316
by and chat.


1398
00:40:03,316 --> 00:40:04,896
Mohammed and I will both be


1399
00:40:04,896 --> 00:40:05,096
there.


1400
00:40:05,666 --> 00:40:07,376
And thanks very much for coming


1401
00:40:07,376 --> 00:40:08,386
out, and I hope you enjoy the


1402
00:40:08,386 --> 00:40:08,976
rest of your conference.


1403
00:40:09,516 --> 00:40:13,500
[ Applause ]

