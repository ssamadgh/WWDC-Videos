1
00:00:07,516 --> 00:00:17,500
[ Music ]


2
00:00:20,496 --> 00:00:22,836
>> Hi and welcome
to Session 511,


3
00:00:22,906 --> 00:00:25,786
AVCapturePhotoOutput,
Beyond the Basics.


4
00:00:26,506 --> 00:00:29,246
This is a chock talk
addendum to Session 501,


5
00:00:29,636 --> 00:00:31,506
Advances in iOS Photography.


6
00:00:32,156 --> 00:00:33,056
I'm Brad Ford.


7
00:00:33,186 --> 00:00:35,566
I'm an engineer on the core
media capture team at Apple.


8
00:00:36,116 --> 00:00:42,376
In session 501, we focused on AV
foundations camera capture APIs,


9
00:00:42,726 --> 00:00:45,596
specifically the
AVCapturePhotoOutput,


10
00:00:46,246 --> 00:00:49,566
which is a new interface
for taking photos in iOS 10.


11
00:00:50,796 --> 00:00:55,526
This output supports Capturing
Live Photos, RAW + DNG,


12
00:00:56,866 --> 00:01:01,356
Wide Color Content, and
Preview or Thumbnail Images.


13
00:01:01,646 --> 00:01:04,186
If you haven't watched
Session 501 yet,


14
00:01:04,396 --> 00:01:07,746
I recommend pausing here and
watching Session 501 first.


15
00:01:08,126 --> 00:01:09,906
You'll get a lot more
out of this addendum.


16
00:01:10,456 --> 00:01:15,796
In this session, we'll move
beyond the AVCapturePhotoOutput


17
00:01:15,796 --> 00:01:19,326
basics and discuss two important
topics we didn't have time


18
00:01:19,326 --> 00:01:20,746
for in Session 501.


19
00:01:21,246 --> 00:01:23,246
Namely, Scene Monitoring,


20
00:01:23,946 --> 00:01:26,796
and Resource Preparation
and Reclamation.


21
00:01:27,646 --> 00:01:30,296
Lastly, we'll spend a few
minutes on an unrelated


22
00:01:30,296 --> 00:01:31,886
but still very important topic,


23
00:01:32,426 --> 00:01:35,906
Camera Privacy Policy
Changes in iOS 10.


24
00:01:37,686 --> 00:01:38,966
By way of minimal review,


25
00:01:39,636 --> 00:01:42,976
the new AVCapturePhotoOutput
has an improved interface


26
00:01:42,976 --> 00:01:43,846
that addresses some


27
00:01:43,846 --> 00:01:47,356
of AVCaptureStillImangeOutput's
design challenges.


28
00:01:48,506 --> 00:01:51,846
AVCapturePhotoOutput uses a
function programming model.


29
00:01:52,216 --> 00:01:53,546
There are clear delineations


30
00:01:53,546 --> 00:01:55,666
between mutable and
immutable data.


31
00:01:56,106 --> 00:01:58,136
It uses a separate object


32
00:01:58,136 --> 00:02:00,216
to encapsulate per
photo settings


33
00:02:00,446 --> 00:02:02,456
called AVCapturePhotoSettings.


34
00:02:02,916 --> 00:02:05,666
You pass it when making
a photo capture request.


35
00:02:06,446 --> 00:02:08,476
It uses a delegate
style interface


36
00:02:08,476 --> 00:02:11,206
for tracking the progress
of photo capture requests.


37
00:02:11,526 --> 00:02:14,386
This is called the
AVCapturephotoCaptureDelegate


38
00:02:14,386 --> 00:02:15,026
protocol.


39
00:02:15,516 --> 00:02:19,956
All callbacks in the delegate
protocol return an instance


40
00:02:19,996 --> 00:02:22,696
of
AVCaptureResolvedPhotoSettings.


41
00:02:23,186 --> 00:02:24,546
This is an immutable object


42
00:02:24,546 --> 00:02:26,896
in which all photo
settings have been resolved.


43
00:02:29,586 --> 00:02:33,356
AVCapturePhotoOutput also
supports Scene Monitoring using


44
00:02:33,356 --> 00:02:36,706
a subset of these capture
objects I just talked about.


45
00:02:38,656 --> 00:02:41,126
Scene monitoring
allows you to present UI


46
00:02:41,126 --> 00:02:44,196
that informs the user what
scene dependent features are


47
00:02:44,196 --> 00:02:45,066
currently active.


48
00:02:45,776 --> 00:02:49,146
In this screenshot of Apple's
Camera app, the user is clear


49
00:02:49,146 --> 00:02:50,746
in a low-light situation.


50
00:02:51,576 --> 00:02:55,546
The flash iconography at the
bottom of the screen indicates


51
00:02:55,546 --> 00:02:58,036
that the user is
in auto flash mode,


52
00:02:58,326 --> 00:03:00,336
meaning the flash
should only be used


53
00:03:00,336 --> 00:03:01,856
if the situation requires it.


54
00:03:02,796 --> 00:03:06,006
Apple's Camera app is a client
of AVCapturePhotoOutput,


55
00:03:06,386 --> 00:03:08,016
which performs Scene Monitoring


56
00:03:08,016 --> 00:03:11,126
to drive the flash
active yellow flash badge


57
00:03:11,376 --> 00:03:12,786
that you see in the top middle.


58
00:03:13,296 --> 00:03:17,306
The presence of the yellow
flash badge shows the user


59
00:03:17,306 --> 00:03:20,326
that if they take a picture
now, the flash is going to fire.


60
00:03:21,456 --> 00:03:24,706
AVCapturePhotoOutput
offers Scene Monitoring


61
00:03:24,706 --> 00:03:26,026
for two kinds of scenes.


62
00:03:26,246 --> 00:03:27,766
The first is the flash.


63
00:03:30,096 --> 00:03:32,056
All of Apple's current
iPhone models,


64
00:03:32,056 --> 00:03:36,416
as well as the 9.7-inch iPad
Pro have a true tone flash


65
00:03:36,516 --> 00:03:39,886
to illuminate dark scenes for
the rear-facing eyesight camera


66
00:03:41,206 --> 00:03:44,496
and a retina flash that
turns your retina display


67
00:03:44,496 --> 00:03:47,456
into a true tone flash,
illuminating it at up


68
00:03:47,456 --> 00:03:49,736
to three times normal
in order to brighten


69
00:03:49,736 --> 00:03:51,176
up selfies in low light.


70
00:03:52,616 --> 00:03:56,306
The second type of supported
Scene Monitoring is Still


71
00:03:56,306 --> 00:03:57,396
Image Stabilization.


72
00:03:58,166 --> 00:04:02,186
Still Image Stabilization is
a multi-image fusion capture


73
00:04:02,446 --> 00:04:06,156
that blends differently
exposed images to reduce blur


74
00:04:06,156 --> 00:04:07,626
in low-light situations.


75
00:04:08,146 --> 00:04:11,066
It might not be totally obvious
why Still Image Stabilization is


76
00:04:11,066 --> 00:04:12,926
a low-light feature, it's not


77
00:04:12,926 --> 00:04:14,936
that your hands shake
more in the dark.


78
00:04:15,596 --> 00:04:17,896
It's just that the camera
needs to expose longer


79
00:04:17,896 --> 00:04:21,125
to gather the same number of
photons requiring the shooter


80
00:04:21,125 --> 00:04:22,786
to be very, very steady.


81
00:04:23,506 --> 00:04:25,726
Still Image Stabilization
counters this problem


82
00:04:25,976 --> 00:04:28,876
by capturing multiple images
at different exposures


83
00:04:28,916 --> 00:04:30,276
and then fusing them together


84
00:04:30,506 --> 00:04:32,736
to reduce noise and
motion artifacts.


85
00:04:33,436 --> 00:04:36,226
So at first glance,
flash worthiness


86
00:04:36,226 --> 00:04:38,906
or Still Image Stabilization
worthiness would seem


87
00:04:38,906 --> 00:04:40,286
like orthogonal features,


88
00:04:40,736 --> 00:04:42,416
but they're actually
closely related.


89
00:04:42,636 --> 00:04:44,936
And this causes some
API ambiguity.


90
00:04:46,976 --> 00:04:50,406
Looking at this graph, we see
the applicable light ranges


91
00:04:50,406 --> 00:04:51,796
for Flash Capture with


92
00:04:51,796 --> 00:04:54,006
and without Still
Image Stabilization.


93
00:04:54,536 --> 00:04:56,336
I've shortened Still
Image Stabilization


94
00:04:56,336 --> 00:04:57,996
to SIS for brevity.


95
00:04:58,806 --> 00:05:01,206
The blue bar represents
the light levels


96
00:05:01,206 --> 00:05:03,326
at which the photo
output will use the flash


97
00:05:03,486 --> 00:05:05,546
if you've opted in for SIS.


98
00:05:06,446 --> 00:05:09,196
The green bar represents
the applicable light levels


99
00:05:09,196 --> 00:05:12,736
for flash if you've
opted out of SIS.


100
00:05:12,736 --> 00:05:15,356
Note that with SIS on,
the photo output can do


101
00:05:15,356 --> 00:05:17,286
without the flash
in darker scenes.


102
00:05:18,146 --> 00:05:21,846
This is because SIS lowers the
noise in the image to a point


103
00:05:22,176 --> 00:05:23,546
so the flash is not needed.


104
00:05:23,976 --> 00:05:27,216
If your current scene's
light level is, say, here,


105
00:05:27,706 --> 00:05:28,936
the answer to the question,


106
00:05:29,206 --> 00:05:32,016
is this a flash scene
is a resounding yes.


107
00:05:32,826 --> 00:05:36,156
But if the light level is
here, the answer depends


108
00:05:36,156 --> 00:05:38,986
on whether you're interested in
using Still Image Stabilization,


109
00:05:39,326 --> 00:05:40,856
and the inverse is true also.


110
00:05:41,476 --> 00:05:43,776
So what to do.


111
00:05:43,776 --> 00:05:45,756
The AVCapturePhotoOutput
doesn't know what kind


112
00:05:45,756 --> 00:05:48,416
of capture you want
until you request it.


113
00:05:49,166 --> 00:05:50,816
But if you're using
Scene Monitoring,


114
00:05:51,096 --> 00:05:52,626
it needs to run continuously.


115
00:05:53,206 --> 00:05:55,976
Is the current scene a SIS
scene or a flash scene?


116
00:05:56,476 --> 00:06:01,446
In AVCapturePhotoOutput we've
addressed this ambiguity


117
00:06:01,446 --> 00:06:04,406
with a specific API for
Scene Monitoring called


118
00:06:04,756 --> 00:06:06,826
photoSettingsForSceneMonitoring.


119
00:06:08,096 --> 00:06:11,046
And we've provided two key
value observable properties


120
00:06:11,046 --> 00:06:13,116
that can asynchronously
inform you


121
00:06:13,416 --> 00:06:16,046
when scene suitability
changes with respect


122
00:06:16,046 --> 00:06:18,426
to Still Image Stabilization
or flash.


123
00:06:18,956 --> 00:06:23,906
You create an
AVCapturePhotoSettings instance


124
00:06:24,086 --> 00:06:27,306
specifically for Scene
Monitoring and specify


125
00:06:27,306 --> 00:06:28,186
which features you'd


126
00:06:28,186 --> 00:06:30,466
like AVCapturePhotoOutput
to consider.


127
00:06:31,306 --> 00:06:35,856
Here I've set the flash
mode to auto indicating


128
00:06:36,536 --> 00:06:38,586
that I'm interested in
using the flash feature


129
00:06:38,586 --> 00:06:41,026
when it's available,
and I've also set


130
00:06:41,026 --> 00:06:43,676
isAutoStillImageStabilization
Enabled to true.


131
00:06:44,266 --> 00:06:46,276
So SIS should be considered too.


132
00:06:46,956 --> 00:06:50,276
SIS tends to give better image
quality results than flash,


133
00:06:50,706 --> 00:06:53,506
so if a scene falls into the
overlapping range between SIS


134
00:06:53,506 --> 00:06:57,276
and flash, the photoOutput
reports that it's an SIS scene.


135
00:06:58,256 --> 00:07:01,146
Next, I assign this object
as the photo settings


136
00:07:01,216 --> 00:07:03,026
for SceneMonitoring property.


137
00:07:03,676 --> 00:07:04,656
This property can be set


138
00:07:04,656 --> 00:07:07,146
at any time including
before you start the


139
00:07:07,146 --> 00:07:08,626
AVCaptureSession running.


140
00:07:10,156 --> 00:07:12,276
To be informed of
changes to flash


141
00:07:12,276 --> 00:07:14,436
and Still Image Stabilization
Scene worthiness,


142
00:07:14,966 --> 00:07:18,896
I add key value observers for
the aforementioned isFlashScene


143
00:07:19,136 --> 00:07:21,176
and
isStillImageStabliziationScene


144
00:07:21,176 --> 00:07:21,836
Properties.


145
00:07:22,426 --> 00:07:25,286
And I'm called back as
scene worthiness changes


146
00:07:25,356 --> 00:07:26,496
for those two properties.


147
00:07:26,496 --> 00:07:31,746
Now let's talk about
Scene Monitoring defaults.


148
00:07:32,956 --> 00:07:36,526
photoSettingsforSceneMonitoring
is a nullable property,


149
00:07:36,756 --> 00:07:38,666
and its default value is nil,


150
00:07:38,956 --> 00:07:41,226
meaning no scenes
are being monitored.


151
00:07:42,206 --> 00:07:44,966
If you query
isStillImageStabilization


152
00:07:45,326 --> 00:07:48,956
or isFlashScene without first
configuring photo settings


153
00:07:48,956 --> 00:07:52,696
for Scene Monitoring, they will
answer false forever and ever.


154
00:07:53,716 --> 00:07:56,286
Once you do configure photo
settings for Scene Monitoring,


155
00:07:56,466 --> 00:07:59,826
you can query or key value
observe the two isScene


156
00:07:59,826 --> 00:08:02,056
properties and get
appropriate answers.


157
00:08:03,496 --> 00:08:05,406
Be aware, though that
if your photo settings


158
00:08:05,406 --> 00:08:08,816
for Scene Monitoring
contain a flash mode of off,


159
00:08:09,286 --> 00:08:11,936
isFlashScene will still
always report false.


160
00:08:12,456 --> 00:08:12,806
Ditto


161
00:08:12,806 --> 00:08:15,016
for AutoStillImageStabilization
Enabled.


162
00:08:18,056 --> 00:08:20,636
My recommendations for
Scene Monitoring are simple.


163
00:08:21,076 --> 00:08:24,596
If your app doesn't display
any UI indicating what kind


164
00:08:24,596 --> 00:08:26,776
of scene the user is
seeing, you don't need


165
00:08:26,776 --> 00:08:27,976
to enable Scene Monitoring.


166
00:08:28,596 --> 00:08:31,676
But if you do, monitor
what you intend to capture.


167
00:08:31,996 --> 00:08:35,135
For example, if you intend
to capture using Auto Flash


168
00:08:35,135 --> 00:08:38,405
but not SIS, then monitor
with flash node set


169
00:08:38,405 --> 00:08:40,956
to auto and auto SIS off.


170
00:08:41,506 --> 00:08:43,785
Doing otherwise will
likely confuse your user,


171
00:08:44,196 --> 00:08:45,526
as your UI might report


172
00:08:45,526 --> 00:08:48,606
that it's not a flash scene
while the flash actually does


173
00:08:48,606 --> 00:08:50,066
fire when taking a picture.


174
00:08:52,376 --> 00:08:54,086
That wraps up Scene Monitoring.


175
00:08:54,606 --> 00:08:56,426
On to our next Beyond
the Basics topic,


176
00:08:56,716 --> 00:08:59,026
Resource Preparation
and Reclamation.


177
00:09:00,936 --> 00:09:04,066
To understand the need for
on-demand resource preparation,


178
00:09:04,346 --> 00:09:07,116
let's look at AVCaptureSession's
normal flow of data.


179
00:09:08,976 --> 00:09:11,456
When you call AVCaptureSession
startRunning,


180
00:09:12,236 --> 00:09:15,506
data begins flowing from all
your AVCapture inputs the


181
00:09:15,506 --> 00:09:17,206
various AVCapture outputs.


182
00:09:17,996 --> 00:09:21,156
Most outputs receive and handle
this data in a streaming manner,


183
00:09:21,436 --> 00:09:23,126
such as the VideoPreviewLayer,


184
00:09:23,256 --> 00:09:26,126
which continuously displays
input data to the screen.


185
00:09:26,666 --> 00:09:29,016
Or VideoDataOutput
which pushes buffers


186
00:09:29,016 --> 00:09:30,736
to your app via delegate
callback.


187
00:09:31,646 --> 00:09:34,866
Streaming outputs such as these
require a disruptive capture


188
00:09:34,866 --> 00:09:38,216
render pipeline rebuild if you
change their configuration.


189
00:09:38,616 --> 00:09:40,676
You have to configure
them for one type


190
00:09:40,676 --> 00:09:42,996
of output before you
call startRunning.


191
00:09:43,936 --> 00:09:46,226
AVCapturePhotoOutput
is different,


192
00:09:46,626 --> 00:09:50,326
since it only receives data from
its input on an as-needed basis.


193
00:09:51,416 --> 00:09:54,506
When you request a photo
by calling CapturePhoto


194
00:09:54,776 --> 00:09:56,336
with settings and delegate,


195
00:09:56,896 --> 00:10:00,456
the photo output delivers just
one result or set of results.


196
00:10:02,086 --> 00:10:03,506
Unlike the streaming outputs,


197
00:10:03,766 --> 00:10:05,746
the photo output has
a lot of downtime.


198
00:10:06,336 --> 00:10:10,516
It's perfectly positioned to
prepare or reclaim resources


199
00:10:10,516 --> 00:10:14,036
on demand without causing a
disruptive reconfiguration


200
00:10:14,036 --> 00:10:15,066
of the render pipeline.


201
00:10:15,556 --> 00:10:18,386
It has the luxury of preparing
while no one's watching.


202
00:10:20,646 --> 00:10:22,806
Resource preparation
isn't free, of course.


203
00:10:23,346 --> 00:10:26,206
And AVCapturePhotoOutput's
feature set is extensive.


204
00:10:27,996 --> 00:10:31,586
Taking an uncompressed 420
photo in the native format


205
00:10:31,586 --> 00:10:34,846
of the AVCapture device
requires some minimal resources.


206
00:10:36,056 --> 00:10:38,816
Processed output such as EGRA


207
00:10:38,946 --> 00:10:41,546
or JPEG requires
additional resources,


208
00:10:41,966 --> 00:10:43,786
since there's a format
conversion involved.


209
00:10:45,156 --> 00:10:48,056
Flash captures require their
own set of hardware resources


210
00:10:48,316 --> 00:10:50,296
for delivering the
pre-flash sequence


211
00:10:50,446 --> 00:10:52,236
and strobe synchronized result.


212
00:10:53,926 --> 00:10:56,616
Still Image Stabilization
requires multiple buffers


213
00:10:56,696 --> 00:10:57,426
for fusion.


214
00:10:59,086 --> 00:11:01,366
RAW capture requires
very large buffers.


215
00:11:02,706 --> 00:11:04,956
RAW + JPEG requires
a combination


216
00:11:04,956 --> 00:11:06,476
of resources big and small.


217
00:11:07,626 --> 00:11:10,286
And bracketed capture
requires multiple buffers


218
00:11:10,486 --> 00:11:12,506
to return multiple
images to the client.


219
00:11:13,916 --> 00:11:16,096
And of course, many of
these features can be mixed


220
00:11:16,126 --> 00:11:19,026
and matched, requiring
a superset of resources.


221
00:11:21,576 --> 00:11:24,236
With so many capture features
available, it's difficult


222
00:11:24,236 --> 00:11:25,746
for the AVCapturePhotoOutput


223
00:11:25,746 --> 00:11:28,606
to guess how many
resources to prepare upfront.


224
00:11:29,346 --> 00:11:32,446
And both over-preparing and
under-preparing are bad.


225
00:11:33,586 --> 00:11:36,856
We liken an over-preparing to
baking a birthday cake every day


226
00:11:36,856 --> 00:11:39,016
of the year, just in
case it's your birthday.


227
00:11:39,766 --> 00:11:41,066
It's a lot of effort for us.


228
00:11:41,306 --> 00:11:42,836
A lot of material invested.


229
00:11:43,096 --> 00:11:45,176
A lot of uneaten cake
gets thrown away.


230
00:11:46,366 --> 00:11:48,686
Video preview might come
up slower each time.


231
00:11:49,496 --> 00:11:51,556
Memory consumption might
be needlessly high.


232
00:11:52,136 --> 00:11:55,836
Under-preparing is just
as bad, if not worse.


233
00:11:56,536 --> 00:11:58,226
If we're not ready
to capture a photo


234
00:11:58,446 --> 00:12:01,316
with your requested feature
set, we might miss the shot,


235
00:12:01,556 --> 00:12:03,376
while allocating
resources on-demand.


236
00:12:04,526 --> 00:12:06,566
Fortunately, we've
provided a solution.


237
00:12:07,896 --> 00:12:11,946
AVCapturePhotoOutput allows you
to tell it in advance what kinds


238
00:12:11,946 --> 00:12:13,326
of captures you're
interested in.


239
00:12:13,786 --> 00:12:17,536
You do this by calling
setPreparedPhotoSettingsArray,


240
00:12:18,526 --> 00:12:21,246
passing an array of
AVCapturePhotoSettings


241
00:12:21,576 --> 00:12:24,556
with each one representing a
different type of capture you'd


242
00:12:24,556 --> 00:12:25,996
like it to prepare for.


243
00:12:27,286 --> 00:12:30,056
You can optionally pass a
completion handler to be called


244
00:12:30,296 --> 00:12:31,646
when preparation is complete.


245
00:12:32,116 --> 00:12:35,976
The photo output also
provides a read only


246
00:12:36,156 --> 00:12:38,496
preparedPhotoSettingsArray
property


247
00:12:38,826 --> 00:12:41,346
so you can query the settings
array that you last set.


248
00:12:41,816 --> 00:12:46,416
The
setPreparedPhotoSettingsArray


249
00:12:46,416 --> 00:12:47,976
function can do several things.


250
00:12:48,516 --> 00:12:52,206
It prepares resources for
all the types of capture


251
00:12:52,206 --> 00:12:53,486
in your array of settings.


252
00:12:54,336 --> 00:12:57,776
Also, it reclaims unneeded
resources if there are any.


253
00:12:58,336 --> 00:13:02,806
And by passing an empty array,
you can reclaim everything.


254
00:13:03,386 --> 00:13:07,976
It calls you back when all
resources are prepared.


255
00:13:08,996 --> 00:13:12,526
And it returns an error if
resources couldn't be prepared.


256
00:13:13,056 --> 00:13:15,716
This is all delivered via
the completion callback.


257
00:13:17,516 --> 00:13:21,646
preparedPhotoSettingsArray's
default value is the default


258
00:13:21,646 --> 00:13:24,146
constructor for
AVCapturePhotoSettings,


259
00:13:24,386 --> 00:13:27,356
which has JPEG set
as the output format


260
00:13:27,576 --> 00:13:30,126
and AutoStillImageStabilization
enabled.


261
00:13:33,056 --> 00:13:36,236
preparedPhotoSettingsArray
is a sticky property.


262
00:13:36,696 --> 00:13:39,736
It persists across
AVCaptureSession start


263
00:13:39,736 --> 00:13:43,836
or stopRunning, begin
or commitConfiguration,


264
00:13:44,436 --> 00:13:45,766
and you can set it and forget it


265
00:13:45,766 --> 00:13:48,266
if you always take the same
kinds of captures in your app.


266
00:13:49,606 --> 00:13:53,246
Another nice feature of
setpreparedPhotoSettingsArray is


267
00:13:53,246 --> 00:13:54,446
that it participates


268
00:13:54,486 --> 00:13:57,636
in AVCaptureSession
begin/commitConfiguration


269
00:13:57,886 --> 00:13:59,266
deferred work semantics.


270
00:13:59,826 --> 00:14:02,286
That is, if you call
beginConfiguration


271
00:14:02,586 --> 00:14:05,416
and then change your
sessions to topology by adding


272
00:14:05,416 --> 00:14:07,206
or removing inputs or outputs


273
00:14:07,666 --> 00:14:10,316
and then set new
preparedPhotoSettingsArray


274
00:14:10,556 --> 00:14:13,986
and then commit the
configuration the preparation


275
00:14:14,106 --> 00:14:17,316
won't occur until the
commitConfiguration is called.


276
00:14:17,946 --> 00:14:20,446
You can atomically change
your session configuration


277
00:14:20,446 --> 00:14:22,026
and prepare your photo output


278
00:14:22,096 --> 00:14:24,616
for the new configuration
simultaneously.


279
00:14:25,116 --> 00:14:31,916
You can prepare before running
your AVCaptureSession to ensure


280
00:14:31,916 --> 00:14:34,316
that your app is ready
to capture photos as soon


281
00:14:34,316 --> 00:14:35,826
as video preview starts running.


282
00:14:36,756 --> 00:14:39,586
If you call
setPreparedPhotoSettingsArray


283
00:14:39,636 --> 00:14:40,756
when the session is stopped,


284
00:14:41,186 --> 00:14:43,676
it doesn't call your completion
handler back right away.


285
00:14:44,086 --> 00:14:47,556
Instead, the handler is called
when preparation completes,


286
00:14:47,896 --> 00:14:50,766
which is after you call
session startRunning.


287
00:14:51,526 --> 00:14:54,416
If your session is stopped
and you prepare with one set


288
00:14:54,416 --> 00:14:57,276
of settings and then you change
your mind and call it again


289
00:14:57,276 --> 00:14:58,536
with another set of settings,


290
00:14:58,966 --> 00:15:01,316
your first completion
handler fires immediately


291
00:15:01,556 --> 00:15:03,306
with prepared set to false.


292
00:15:03,726 --> 00:15:05,676
This is effectively
a cancellation


293
00:15:06,016 --> 00:15:07,706
of the first preparation.


294
00:15:08,236 --> 00:15:11,696
We have three simple
recommendations


295
00:15:11,696 --> 00:15:13,936
on how you should
use our prepare APIs.


296
00:15:14,506 --> 00:15:16,446
Firstly, prepare.


297
00:15:17,486 --> 00:15:20,606
You can always issue a capture
request without preparing first,


298
00:15:21,066 --> 00:15:24,786
but if the photo output isn't
prepared for precisely the type


299
00:15:24,786 --> 00:15:26,796
of capture you want,
you might get


300
00:15:26,796 --> 00:15:28,496
that first image back slowly.


301
00:15:30,456 --> 00:15:34,496
Second, prepare before calling
startRunning on your session.


302
00:15:35,076 --> 00:15:36,926
Knowing the kinds of
captures you're interested


303
00:15:36,926 --> 00:15:39,736
in lets the session allocate
just the right amount


304
00:15:39,736 --> 00:15:41,096
for you during startup.


305
00:15:42,636 --> 00:15:46,436
Third, re-prepare only
when your UI changes.


306
00:15:46,866 --> 00:15:49,516
You don't need to re-prepare
every time you capture a photo,


307
00:15:49,946 --> 00:15:52,856
just when you change the types
of capture you'll be performing,


308
00:15:53,206 --> 00:15:56,836
like when your user toggles RAW
Capture or Bracketed Capture


309
00:15:56,836 --> 00:15:58,746
on or off in your app.


310
00:16:01,186 --> 00:16:04,276
Not all AVCapturePhotoOutput
features qualify


311
00:16:04,276 --> 00:16:06,246
for on-demand resource
preparation.


312
00:16:07,186 --> 00:16:11,006
The first of these is
isHighResolutionCaptureEnabled.


313
00:16:11,956 --> 00:16:13,396
Some camera formats allow you


314
00:16:13,396 --> 00:16:16,496
to capture a high resolution
still image that is bigger


315
00:16:16,746 --> 00:16:19,406
than the format's sustainable
streaming resolution.


316
00:16:19,756 --> 00:16:24,136
For instance, the front camera's
photo format on iPhone 6s


317
00:16:24,226 --> 00:16:27,506
and 6s Plus supports
5 megapixel stills


318
00:16:27,926 --> 00:16:30,346
but can only stream
at 1280 by 960.


319
00:16:30,956 --> 00:16:33,106
When the camera is
configured with this format,


320
00:16:33,476 --> 00:16:36,386
it can either deliver
1280 by 960 stills


321
00:16:36,556 --> 00:16:39,106
or 5 megapixel stills depending


322
00:16:39,106 --> 00:16:42,656
on whether your photo settings
specify high resolution capture.


323
00:16:43,276 --> 00:16:45,216
But if the camera
must be configured


324
00:16:45,216 --> 00:16:47,246
for 5 megapixel stills upfront,


325
00:16:47,686 --> 00:16:50,816
so AVCapturePhotoOutput
requires you to opt-in


326
00:16:50,816 --> 00:16:52,996
for the feature before
you start running


327
00:16:53,286 --> 00:16:55,736
by setting
isHighResolutionCaptureEnabled


328
00:16:55,856 --> 00:16:56,426
to true.


329
00:16:57,226 --> 00:16:59,646
Once you've opted in,
you can take stills with


330
00:16:59,646 --> 00:17:01,506
or without high res
capture enabled


331
00:17:01,876 --> 00:17:04,386
without causing an
expensive graph rebuild.


332
00:17:06,226 --> 00:17:09,415
Similarly, LivePhotoCapture
involves delivering a movie


333
00:17:09,415 --> 00:17:11,406
asset as well as a still image.


334
00:17:11,935 --> 00:17:14,116
The movie contains
samples from the past,


335
00:17:14,685 --> 00:17:17,356
1.5 seconds before
your capture request.


336
00:17:17,806 --> 00:17:20,796
So the capture render pipeline
must be configured upfront


337
00:17:21,046 --> 00:17:22,586
to do this special
kind of capture.


338
00:17:23,726 --> 00:17:26,606
Lastly, live photos
can be intelligently


339
00:17:26,606 --> 00:17:28,886
and automatically
trimmed at capture time


340
00:17:29,206 --> 00:17:31,516
if large purposeful
motion is detected,


341
00:17:31,516 --> 00:17:33,656
such as dropping one's arm


342
00:17:33,656 --> 00:17:35,336
down to put the device
in their pocket.


343
00:17:35,726 --> 00:17:39,576
If you wish to capture full
duration untrimmed live photos,


344
00:17:39,866 --> 00:17:43,496
you must opt-out of autoTrimming
before calling startRunning


345
00:17:43,576 --> 00:17:44,936
on your AVCaptureSession.


346
00:17:45,456 --> 00:17:51,176
Our last topic of the day is
Camera Privacy Policy Changes


347
00:17:51,396 --> 00:17:52,966
in iOS 10.


348
00:17:54,586 --> 00:17:57,406
Let's review Apple's Privacy
Policy with respect to media.


349
00:17:57,946 --> 00:18:01,816
Photos and videos on a user's
iOS device are personal,


350
00:18:02,116 --> 00:18:03,906
private and sensitive data.


351
00:18:04,666 --> 00:18:07,816
Use of the camera or microphone
is a privileged allowance


352
00:18:07,816 --> 00:18:10,336
that must be granted
explicitly by the user.


353
00:18:11,426 --> 00:18:13,096
So beginning in iOS 7,


354
00:18:13,466 --> 00:18:16,896
users were notified the first
time an app used the camera


355
00:18:16,896 --> 00:18:20,526
or microphone and given an
opportunity to disallow it.


356
00:18:21,146 --> 00:18:22,426
This is a very good thing.


357
00:18:22,996 --> 00:18:26,406
Transparency and trust are well
worth the one-time annoyance


358
00:18:26,406 --> 00:18:27,416
of tapping okay.


359
00:18:27,936 --> 00:18:33,056
In iOS 10, we're requiring
apps to go one step further


360
00:18:33,056 --> 00:18:36,806
in transparency by informing
the user why they want


361
00:18:36,806 --> 00:18:38,266
to access sensitive data.


362
00:18:39,076 --> 00:18:42,196
Sometimes your UI makes it
obvious, but sometimes not.


363
00:18:43,016 --> 00:18:45,456
Your reason string should
remove all ambiguity.


364
00:18:45,926 --> 00:18:49,386
For instance, here AVCam is
telling the user it wants


365
00:18:49,386 --> 00:18:51,946
to use the camera to
take photos and video.


366
00:18:52,376 --> 00:18:53,886
That's a pretty explicit
statement


367
00:18:53,886 --> 00:18:55,706
about what it will
use the camera for.


368
00:18:57,586 --> 00:19:01,906
Likewise, apps linked against
iOS 10 must provide a reason


369
00:19:01,906 --> 00:19:03,666
string for using the microphone.


370
00:19:04,206 --> 00:19:08,586
And lastly, the Photos Library.


371
00:19:09,056 --> 00:19:11,476
You should be clear in your
reason string with respect


372
00:19:11,476 --> 00:19:12,676
to the Photos Library.


373
00:19:13,156 --> 00:19:16,196
Are you using it for
reading or writing or both?


374
00:19:16,656 --> 00:19:21,506
In the latest version of
Xcode you'll find a list


375
00:19:21,506 --> 00:19:25,206
of possible privacy description
keys, not just for camera,


376
00:19:25,206 --> 00:19:28,876
mic and photos, but for
access to all sensitive data.


377
00:19:29,616 --> 00:19:31,606
In order to use any
of these services,


378
00:19:31,876 --> 00:19:33,696
you must provide
a reason string.


379
00:19:34,056 --> 00:19:36,776
If you don't, your app
will not be granted access


380
00:19:36,776 --> 00:19:38,056
to the desired service.


381
00:19:38,596 --> 00:19:42,546
The three specific keys
you should be concerned


382
00:19:42,546 --> 00:19:46,426
about for Capture are
NSCameraUsageDescription,


383
00:19:46,746 --> 00:19:48,886
NSMicrophone3UsageDescription,


384
00:19:49,116 --> 00:19:51,716
and
NSPhotoLibraryUsageDescription.


385
00:19:52,226 --> 00:19:56,276
Let's summarize what
we've learned about.


386
00:19:57,266 --> 00:19:59,826
AVCapturePhotoOutput
allows fine control


387
00:19:59,826 --> 00:20:01,196
of scene monitoring behavior.


388
00:20:02,266 --> 00:20:04,786
It also allows on-demand
resource allocation


389
00:20:04,786 --> 00:20:05,766
and reclamation.


390
00:20:06,756 --> 00:20:10,576
And Capture clients must provide
a reason for camera, mic,


391
00:20:10,576 --> 00:20:13,436
and photos use as of iOS 10.


392
00:20:14,296 --> 00:20:18,206
For more information, visit
the URL for the Advances


393
00:20:18,206 --> 00:20:20,956
in iOS Photography
Session which is 501.


394
00:20:21,496 --> 00:20:26,656
And if you're still at the show,
we invite you to visit all three


395
00:20:26,656 --> 00:20:28,556
of these related
sessions that have to do


396
00:20:28,556 --> 00:20:31,956
with photography,
RAW, and Wide Color.


397
00:20:32,136 --> 00:20:34,476
Thanks for watching and
happy photo capture.


398
00:20:34,836 --> 00:20:35,906
Enjoy the rest of the show.

