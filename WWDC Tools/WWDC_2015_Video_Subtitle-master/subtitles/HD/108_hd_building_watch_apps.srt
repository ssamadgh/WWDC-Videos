1
00:00:06,726 --> 00:00:07,106
(Applause)


2
00:00:07,106 --> 00:00:10,806
>> NEIL DESAI: Hi, everyone.


3
00:00:23,296 --> 00:00:34,966
Welcome to Building Watch Apps.


4
00:00:35,006 --> 00:00:37,006
My name is Neil Desai,
and I am an engineer


5
00:00:37,276 --> 00:00:38,916
on the watchOS program.


6
00:00:39,946 --> 00:00:40,976
Today I am going to show you how


7
00:00:40,976 --> 00:00:43,356
to build a watchOS app
from the ground up.


8
00:00:43,786 --> 00:00:48,266
So we're going to talk through
the architecture of a Watch app,


9
00:00:48,266 --> 00:00:50,626
we are going to walk
through the app life cycle,


10
00:00:50,766 --> 00:00:51,666
the layout model.


11
00:00:51,666 --> 00:00:54,876
We are going to use those
different interface elements


12
00:00:54,956 --> 00:00:57,876
to provide a great
experience for your user.


13
00:00:58,806 --> 00:01:02,046
We're going to debug the
app, and we are also going


14
00:01:02,046 --> 00:01:04,896
to enhance our app using
various watchOS 2 features.


15
00:01:05,956 --> 00:01:08,956
So, on the Apple Watch you
have four opportunities


16
00:01:08,956 --> 00:01:10,156
to present information.


17
00:01:10,776 --> 00:01:12,326
From the Home screen
on Apple Watch


18
00:01:12,396 --> 00:01:14,146
to where it can manually
launch your Watch app.


19
00:01:14,726 --> 00:01:17,686
The Watch app offers an
in-depth user experience


20
00:01:17,686 --> 00:01:20,096
and where you will focus most
of your development efforts.


21
00:01:21,456 --> 00:01:23,086
You can optionally
provide a Glance,


22
00:01:23,326 --> 00:01:26,876
which offers the most timely
and relevant data from your app


23
00:01:26,976 --> 00:01:28,256
in an abbreviated form.


24
00:01:28,836 --> 00:01:33,246
You can also provide a custom
UI for your app's remote


25
00:01:33,246 --> 00:01:34,436
and local notifications.


26
00:01:34,946 --> 00:01:36,296
Apple Watch takes advantage


27
00:01:36,296 --> 00:01:39,236
of the existing interactive
notification support on iOS


28
00:01:39,846 --> 00:01:42,936
to allow the wearer to
respond with a specific action,


29
00:01:43,206 --> 00:01:45,906
transition to a specific
area of your app,


30
00:01:45,906 --> 00:01:47,526
or later view the notification


31
00:01:47,646 --> 00:01:49,626
in Notification Center
on Apple Watch.


32
00:01:50,616 --> 00:01:55,006
And lastly, you can add --
now you can add a Complication


33
00:01:55,006 --> 00:01:57,826
to display information on the
clock face, and this is one


34
00:01:57,826 --> 00:01:59,056
that I am really excited about.


35
00:01:59,176 --> 00:02:01,406
This is great for small
pieces of information


36
00:02:01,716 --> 00:02:06,036
that the user may want to
know while viewing the time.


37
00:02:06,236 --> 00:02:08,996
So now that we know the
different ways the user will


38
00:02:08,996 --> 00:02:10,166
interact with your app,


39
00:02:10,166 --> 00:02:14,126
let's discuss the
architecture of a Watch app.


40
00:02:14,396 --> 00:02:17,316
Your existing iPhone app
contains your WatchKit extension


41
00:02:17,376 --> 00:02:18,156
and Watch app.


42
00:02:18,746 --> 00:02:21,666
These both get installed on
the Watch after initial pairing


43
00:02:21,666 --> 00:02:25,946
at the user's request or a later
user-initiated installation via


44
00:02:25,946 --> 00:02:26,856
the Apple Watch app.


45
00:02:27,766 --> 00:02:30,956
The Watch app is comprised
of two pieces, first,


46
00:02:30,956 --> 00:02:33,966
the WatchKit extension,
and this extension now runs


47
00:02:33,966 --> 00:02:35,856
on Apple Watch and executes code


48
00:02:36,096 --> 00:02:38,006
in response to user
interactions.


49
00:02:38,496 --> 00:02:40,576
The second piece
is the Watch app.


50
00:02:40,676 --> 00:02:42,316
Your Watch app's UI is loaded


51
00:02:42,376 --> 00:02:44,226
from a bundle containing
your storyboard


52
00:02:44,516 --> 00:02:46,906
and static resources
such as images.


53
00:02:47,466 --> 00:02:51,216
So this UI, which
lives in the Watch app,


54
00:02:51,776 --> 00:02:53,496
then talks to your
WatchKit extension,


55
00:02:53,856 --> 00:02:55,466
where you can place
all of your logic.


56
00:02:56,226 --> 00:02:58,086
Now that the extension
lives on the Watch,


57
00:02:58,336 --> 00:03:00,566
you can enable all sorts
of new capabilities,


58
00:03:00,676 --> 00:03:01,736
which I will get into later.


59
00:03:02,746 --> 00:03:05,716
And in the moments when your
Watch app needs to communicate


60
00:03:05,946 --> 00:03:08,396
with your iOS app, there's
a new framework called


61
00:03:08,396 --> 00:03:12,036
WatchConnectivity that you can
use to offload heavy processing


62
00:03:12,226 --> 00:03:15,476
or networking tasks, and
WatchConnectivity lives


63
00:03:15,476 --> 00:03:20,166
on both iOS and watchOS 2 so you
can communicate back and forth.


64
00:03:23,056 --> 00:03:25,316
To summarize, your
storyboard and all


65
00:03:25,316 --> 00:03:28,106
of your static resources are
stored in the Watch app bundle.


66
00:03:28,986 --> 00:03:30,516
The Watch app target
provided to you


67
00:03:30,516 --> 00:03:33,706
by Xcode already contains
the storyboard you'll use


68
00:03:33,706 --> 00:03:34,486
during development.


69
00:03:35,386 --> 00:03:38,026
Because these resources
are part of the Watch app,


70
00:03:38,346 --> 00:03:40,496
they must all be
specified at design time


71
00:03:40,626 --> 00:03:42,846
and can only be modified
slightly at runtime.


72
00:03:43,686 --> 00:03:45,796
This means you need
to incorporate all


73
00:03:45,796 --> 00:03:47,626
of the UI elements
that you might need


74
00:03:47,626 --> 00:03:49,266
into each scene of
your storyboard.


75
00:03:50,236 --> 00:03:53,876
At runtime, coding your WatchKit
extension can update those UI


76
00:03:53,876 --> 00:03:56,456
elements, including
hiding, showing,


77
00:03:56,456 --> 00:03:57,946
or animating them as needed.


78
00:03:58,416 --> 00:04:01,196
Additionally, your WatchKit
extension can send dynamically


79
00:04:01,196 --> 00:04:03,846
generated content over to
the Watch app for display.


80
00:04:05,616 --> 00:04:09,106
So in Interface Controller
manages the UI elements


81
00:04:09,106 --> 00:04:10,466
for a single stream of content.


82
00:04:10,926 --> 00:04:12,876
It sets the initial
values of those elements,


83
00:04:13,116 --> 00:04:14,696
responds to user interactions,


84
00:04:15,066 --> 00:04:16,926
and updates the UI
as appropriate.


85
00:04:17,875 --> 00:04:20,026
When you create your
Interface Controller subclass,


86
00:04:20,555 --> 00:04:23,476
you add outlets for each UI
element you need to manage.


87
00:04:23,996 --> 00:04:26,416
These outlets connect to
objects in your storyboard


88
00:04:26,676 --> 00:04:28,386
and handle the transfer
of information


89
00:04:28,696 --> 00:04:31,536
between your WatchKit
extension and Watch app.


90
00:04:32,146 --> 00:04:34,896
In addition to outlets,
you set up action methods


91
00:04:34,896 --> 00:04:37,446
for the interactive
elements of your storyboard,


92
00:04:37,846 --> 00:04:41,096
and as with outlets, you
connect each action method


93
00:04:41,376 --> 00:04:42,896
to the corresponding UI element.


94
00:04:43,606 --> 00:04:46,516
And when the wearer interacts
with that element on the Watch,


95
00:04:46,976 --> 00:04:49,606
WatchKit will then call
your action method.


96
00:04:50,796 --> 00:04:52,816
So let's get started
thinking about how


97
00:04:52,816 --> 00:04:55,446
to modify an existing
iPhone app.


98
00:04:56,276 --> 00:05:00,776
So in the run-up to WWDC, I
have been a little forgetful


99
00:05:00,776 --> 00:05:03,296
about contacting people such
as my family and friends,


100
00:05:03,906 --> 00:05:06,256
so I wanted to create
an app that reminds me


101
00:05:06,256 --> 00:05:08,066
who I have contacted
and who I haven't,


102
00:05:08,476 --> 00:05:12,626
and it's called WWDC Call Me
Lately and helps notify me


103
00:05:12,656 --> 00:05:13,596
when I should contact them.


104
00:05:14,216 --> 00:05:17,226
So I communicate with
my server to keep track


105
00:05:17,226 --> 00:05:19,836
of the people I need to
contact via NSURLSession.


106
00:05:20,246 --> 00:05:23,626
This is a great iOS
app I made, but really,


107
00:05:23,626 --> 00:05:25,956
it makes even more
sense as a Watch app.


108
00:05:26,686 --> 00:05:31,566
When I am busy, I quickly can
know who I need to contact next.


109
00:05:31,566 --> 00:05:34,686
Let's get started
making our Watch app.


110
00:05:34,956 --> 00:05:37,306
So what I want to do is
I want to show you how


111
00:05:37,306 --> 00:05:40,046
to add a Watch app target
to an existing iOS app,


112
00:05:40,046 --> 00:05:42,666
and then we are going
to walk through where


113
00:05:42,666 --> 00:05:44,596
to get started configuring
your interface.


114
00:05:45,216 --> 00:05:46,996
And lastly, we are
going to build and run


115
00:05:47,076 --> 00:05:48,746
to see how things
look in the simulator.


116
00:05:50,116 --> 00:05:51,416
So speaking of the simulator,


117
00:05:51,726 --> 00:05:54,886
we actually have a brand-new
simulator in the watchOS 2 SDK.


118
00:05:56,086 --> 00:05:59,256
So you guys are all probably
familiar with the iOS simulator,


119
00:05:59,256 --> 00:06:00,476
and it looks something
like this.


120
00:06:01,466 --> 00:06:03,596
And now we have a
new Watch simulator.


121
00:06:04,326 --> 00:06:07,446
So what's great about this is
it's a fully fledged simulator,


122
00:06:07,516 --> 00:06:10,646
so we can easily look
at our 38-millimeter


123
00:06:10,646 --> 00:06:12,216
and 42-millimeter sizes.


124
00:06:13,256 --> 00:06:14,936
We can simulate touch pressure.


125
00:06:16,216 --> 00:06:18,116
We can also look at
different clock faces.


126
00:06:18,316 --> 00:06:20,786
So like I mentioned earlier,
there's now the ability


127
00:06:21,106 --> 00:06:25,246
to support Complications in
watchOS 2, and so you can look


128
00:06:25,246 --> 00:06:27,386
at how your Complication views


129
00:06:27,386 --> 00:06:29,616
in different clock
faces in the simulator.


130
00:06:30,986 --> 00:06:32,676
And lastly, you can have
multiple apps installed


131
00:06:32,676 --> 00:06:33,406
at the same time.


132
00:06:33,406 --> 00:06:36,216
So we think this is going to
be a really great way for you


133
00:06:36,216 --> 00:06:38,706
to easily make a new
project, iterate on an idea,


134
00:06:38,706 --> 00:06:43,266
and then quickly go back and
forth between different apps.


135
00:06:44,456 --> 00:06:47,876
So to simulate touch pressure,
you go into the Simulator menu,


136
00:06:47,876 --> 00:06:50,316
and you go to Hardware,
Simulate Touch Pressure,


137
00:06:50,586 --> 00:06:53,046
and then you can
select the Deep Press.


138
00:06:53,046 --> 00:06:55,346
This is useful for
things like wanting


139
00:06:55,346 --> 00:06:58,576
to change the clock
face in the sim.


140
00:06:58,576 --> 00:07:02,286
Now let's jump into Xcode and
see how we can add our Watch app


141
00:07:02,286 --> 00:07:03,866
and use this brand-new
simulator.


142
00:07:04,196 --> 00:07:18,416
So let's go to demo.


143
00:07:18,556 --> 00:07:19,896
Great. So let's launch Xcode.


144
00:07:20,536 --> 00:07:23,866
And let's select our app.


145
00:07:24,936 --> 00:07:28,436
And let's make this a
little bit easier to view.


146
00:07:29,056 --> 00:07:32,926
Great. So now if I wanted to
add a new app, I would just go


147
00:07:32,926 --> 00:07:41,396
to File, New Target, and then
I now have a new watchOS pane,


148
00:07:41,466 --> 00:07:43,706
so I have an application
and framework in library.


149
00:07:43,766 --> 00:07:47,016
I select Framework In Library
so I can add a Watch framework


150
00:07:47,016 --> 00:07:48,286
or Watch static library.


151
00:07:48,746 --> 00:07:51,966
For now I am going to
add a WatchKit app.


152
00:07:51,966 --> 00:07:56,896
I double-click, add
a product name,


153
00:07:56,896 --> 00:08:00,146
and my main app is always
going to be enabled by default,


154
00:08:00,146 --> 00:08:02,326
but I can also include
a Notification scene,


155
00:08:02,476 --> 00:08:04,326
a Glance scene, and
a Complication.


156
00:08:04,996 --> 00:08:06,036
So I can add those here.


157
00:08:06,636 --> 00:08:08,316
I already added it to this app.


158
00:08:08,826 --> 00:08:09,766
Let's just press Cancel.


159
00:08:11,106 --> 00:08:12,806
Now let's see what we are given.


160
00:08:13,796 --> 00:08:16,736
Here is our Watch app, and
here is our WatchKit extension.


161
00:08:17,336 --> 00:08:18,326
Like I mentioned before,


162
00:08:18,326 --> 00:08:20,646
our Watch app contains
our storyboard,


163
00:08:20,646 --> 00:08:23,746
all our static resources,
and our asset catalog.


164
00:08:24,146 --> 00:08:26,406
Our WatchKit extension will
contain all our interface


165
00:08:26,406 --> 00:08:31,966
controllers and any other
code we might want to add.


166
00:08:31,966 --> 00:08:33,496
Let's go into the storyboard.


167
00:08:36,895 --> 00:08:39,826
So now, as you can see,
I have a main interface,


168
00:08:40,006 --> 00:08:42,606
I have my Glance interface,
and then I have my static


169
00:08:42,606 --> 00:08:45,056
and dynamic interface
for my notification.


170
00:08:46,296 --> 00:08:48,516
Now, let's also go into
the utilities inspector,


171
00:08:49,806 --> 00:08:51,906
and I can look at the
object library and see


172
00:08:51,906 --> 00:08:55,026
that I have a lot of different
objects here that I can use,


173
00:08:55,026 --> 00:08:59,486
and I have all my WatchKit
interface elements as well.


174
00:08:59,696 --> 00:09:02,546
So let's just drag and drop
an interface controller over.


175
00:09:04,456 --> 00:09:06,276
For instance, if I wanted


176
00:09:06,276 --> 00:09:08,686
to very simply make
a page controller,


177
00:09:08,686 --> 00:09:12,426
I could select Control on
my keyboard and then drag


178
00:09:12,426 --> 00:09:14,016
over to my new interface
controller


179
00:09:14,276 --> 00:09:17,386
and create a segue
for next page.


180
00:09:17,596 --> 00:09:23,136
So for now, we'll just get rid
of that, and if you see below,


181
00:09:23,136 --> 00:09:25,506
there's a static interface
and a dynamic interface,


182
00:09:25,696 --> 00:09:28,276
so the dynamic interface
is actually what hooks


183
00:09:28,276 --> 00:09:30,196
up to your Notification
Controller class.


184
00:09:30,686 --> 00:09:33,836
So when your user first
raises their wrist


185
00:09:33,836 --> 00:09:36,476
when they get your notification
and then they see it,


186
00:09:36,476 --> 00:09:38,686
your Notification Controller
class will get called,


187
00:09:38,946 --> 00:09:41,456
and you can provide
a very rich UI there.


188
00:09:42,586 --> 00:09:46,266
Now, your static interface is
typically going to be invoked


189
00:09:46,266 --> 00:09:49,386
when the user, for example,
misses your notification


190
00:09:49,386 --> 00:09:51,586
and goes to view it again
in the Notification Center,


191
00:09:51,886 --> 00:09:54,016
and that's typically when you
will see the static interface.


192
00:09:56,076 --> 00:10:00,376
So also, I have this
My Category here.


193
00:10:00,826 --> 00:10:05,066
So for different categories that
we send for different payloads,


194
00:10:05,066 --> 00:10:08,236
we can actually create custom
UIs and custom notifications


195
00:10:08,786 --> 00:10:10,276
for those different categories.


196
00:10:10,546 --> 00:10:13,696
So it's not just one
interface for one --


197
00:10:14,126 --> 00:10:16,406
for all of the notifications
you send.


198
00:10:16,406 --> 00:10:19,516
You can actually modify this
and create multiple interfaces.


199
00:10:20,766 --> 00:10:22,876
So let's just add a new
notification controller.


200
00:10:27,176 --> 00:10:28,316
Let's place that here.


201
00:10:29,206 --> 00:10:32,546
So if I wanted to, I could drag
over an interface controller


202
00:10:32,546 --> 00:10:35,166
and then, just like I did
before, I would Control-click,


203
00:10:35,166 --> 00:10:37,276
and then create my
new dynamic interface.


204
00:10:38,126 --> 00:10:41,436
Or I can also just go here
into the attributes inspector


205
00:10:41,646 --> 00:10:43,446
and select Has Dynamic
Interface.


206
00:10:44,036 --> 00:10:46,706
So now I can modify my category


207
00:10:46,706 --> 00:10:48,046
and I can create
a new interface,


208
00:10:48,046 --> 00:10:50,086
and then I possibly would want


209
00:10:50,086 --> 00:10:53,216
to create a new Notification
Controller class


210
00:10:53,216 --> 00:10:54,746
and then hook that up as well.


211
00:10:55,876 --> 00:10:58,886
So also we have given to us


212
00:10:58,886 --> 00:11:02,296
by the template a push
notification payload .apns file.


213
00:11:03,306 --> 00:11:05,206
If you see here, this looks just


214
00:11:05,206 --> 00:11:06,836
like a normal payload
we might have.


215
00:11:07,176 --> 00:11:10,586
It has an alert, a body,
a title, a category.


216
00:11:11,196 --> 00:11:13,906
What's great about this
is in the simulator,


217
00:11:13,906 --> 00:11:16,316
we can use these
different payload files


218
00:11:16,586 --> 00:11:18,136
and mockup different interfaces.


219
00:11:18,436 --> 00:11:21,836
If we want to test out all of
these different notifications,


220
00:11:22,166 --> 00:11:23,586
we don't have to
just do it to device.


221
00:11:24,016 --> 00:11:25,886
We can now quickly iterate


222
00:11:25,886 --> 00:11:27,856
on different ideas
using the simulator


223
00:11:27,856 --> 00:11:29,386
and these notification payloads.


224
00:11:29,946 --> 00:11:32,896
So let's go back
to my storyboard.


225
00:11:33,406 --> 00:11:35,246
So now I just want
to build and run


226
00:11:35,676 --> 00:11:37,756
and view my main app
in the simulator.


227
00:11:38,566 --> 00:11:40,346
So I am going to go
up to my schemes,


228
00:11:40,726 --> 00:11:44,726
and I see I have my iOS scheme
and then my WatchKit app scheme.


229
00:11:45,596 --> 00:11:48,776
And then I have two simulators
here, an iPhone 6 Plus


230
00:11:48,776 --> 00:11:49,796
with a 38-millimeter


231
00:11:50,056 --> 00:11:52,566
and an iPhone 6 Plus
with a 42-millimeter.


232
00:11:52,976 --> 00:11:55,546
As I mentioned before, this
is actually a full simulator


233
00:11:55,546 --> 00:11:56,106
for the Watch.


234
00:11:56,216 --> 00:11:58,916
It's actually going to be
paired with my iPhone sim,


235
00:12:00,096 --> 00:12:06,256
so let's select the iPhone 6
scheme, and let's build and run,


236
00:12:06,476 --> 00:12:09,896
and now I have two
simulators open.


237
00:12:11,136 --> 00:12:15,836
So what I expect to have happen
is that the main app will launch


238
00:12:15,836 --> 00:12:17,786
and I will get attached
to it in the debugger.


239
00:12:18,586 --> 00:12:22,296
So great. So let's press Allow,
because I do want to allow this.


240
00:12:22,916 --> 00:12:24,676
And now I am attaching
the debugger,


241
00:12:24,676 --> 00:12:27,706
and I have a small thing
that has appeared here,


242
00:12:27,706 --> 00:12:29,806
it says "extension
received request to wake


243
00:12:29,806 --> 00:12:31,246
up for complication support."


244
00:12:31,636 --> 00:12:34,346
So if I were to implement
my Complication,


245
00:12:34,756 --> 00:12:37,266
this would later go away.


246
00:12:37,506 --> 00:12:40,626
So now let's just stop
this debug session.


247
00:12:41,056 --> 00:12:42,526
Let's go back to our Watch sim.


248
00:12:43,826 --> 00:12:46,366
So here's my new simulator.


249
00:12:46,366 --> 00:12:47,296
I have my clock face.


250
00:12:47,686 --> 00:12:50,826
Now if I really just wanted
to change out my clock face,


251
00:12:50,826 --> 00:12:53,826
I can go into Hardware,
Simulate Touch Pressure,


252
00:12:55,046 --> 00:12:58,666
and now I can simulate a deep
press, then I can go back


253
00:12:59,406 --> 00:13:02,756
to a shallow press, and then
I can modify my clock face.


254
00:13:03,766 --> 00:13:06,006
Now I can customize my
clock in the simulator.


255
00:13:06,946 --> 00:13:09,846
So if I were to go to
this screen on a device,


256
00:13:09,846 --> 00:13:11,196
I would use my Digital Crown,


257
00:13:11,196 --> 00:13:12,716
and then I would
easily change the color.


258
00:13:13,076 --> 00:13:15,196
So there isn't a Digital
Crown on my mouse,


259
00:13:15,456 --> 00:13:18,026
but thankfully I
have a scroll wheel,


260
00:13:18,446 --> 00:13:20,956
and I can use the
trackpad or Magic Mouse,


261
00:13:21,956 --> 00:13:23,656
and I can change
the color as such.


262
00:13:23,726 --> 00:13:26,066
Now I can simulate the
Digital Crown behavior.


263
00:13:26,976 --> 00:13:29,376
Also, when I am in my
Complications view,


264
00:13:29,686 --> 00:13:34,956
as I swipe over, I can
then enable my Complication


265
00:13:35,206 --> 00:13:38,826
that I have, and so if I am
iterating on Complication ideas,


266
00:13:38,826 --> 00:13:41,496
I want to build some
new Complications


267
00:13:41,496 --> 00:13:44,116
on different faces, I would
just enable these Complications


268
00:13:44,116 --> 00:13:44,656
as such.


269
00:13:45,956 --> 00:13:49,456
So for now, let's just go back,
and let's do Command-Shift-H


270
00:13:49,456 --> 00:13:54,956
for home, and let's select and
then do Command-Shift-H again.


271
00:13:55,716 --> 00:13:58,186
So now I am at the Home screen,
so I have my Settings app,


272
00:13:58,446 --> 00:14:00,146
my clock face, and
the app I have.


273
00:14:00,976 --> 00:14:04,286
And then I can launch my
app and see it as I expect.


274
00:14:04,666 --> 00:14:08,946
So let's go back home.


275
00:14:09,096 --> 00:14:12,216
And now, like I mentioned,
these sims are paired.


276
00:14:12,216 --> 00:14:14,426
I have two different
sims to choose from.


277
00:14:14,426 --> 00:14:17,266
I go into schemes and
I see my two sims.


278
00:14:17,686 --> 00:14:19,256
But what happens if I want


279
00:14:19,386 --> 00:14:22,306
to have an iPhone 5 sim
with a 42-millimeter?


280
00:14:22,346 --> 00:14:25,526
I am going to make a new sim
and have it paired for me.


281
00:14:26,656 --> 00:14:31,556
So let's go into Xcode and then
select Window, and then Devices.


282
00:14:32,356 --> 00:14:35,496
And so now in my sidebar, I have
all of my different simulators.


283
00:14:35,766 --> 00:14:39,326
So if I go to the bottom left,
I can then add a simulator.


284
00:14:39,636 --> 00:14:41,856
So I can call it iPhone 5.


285
00:14:43,496 --> 00:14:44,976
Change my device type.


286
00:14:45,546 --> 00:14:47,266
I will keep my iOS version.


287
00:14:47,916 --> 00:14:50,756
I will change the paired
watch to be a 42-millimeter,


288
00:14:51,146 --> 00:14:53,476
so I can easily create that.


289
00:14:53,476 --> 00:14:57,196
Now if I go back to my scheme,
there's my new simulator.


290
00:14:58,856 --> 00:15:01,836
So let's go back
to the storyboard.


291
00:15:02,486 --> 00:15:08,686
And so as I mentioned,
there's these schemes


292
00:15:08,686 --> 00:15:11,286
that we can pick from, so
there's a Notification scheme,


293
00:15:11,736 --> 00:15:13,566
there's Glance scheme,
and a Complication,


294
00:15:13,566 --> 00:15:15,266
so I can select these
different schemes


295
00:15:15,676 --> 00:15:17,516
and quickly debug
those parts of my app.


296
00:15:18,616 --> 00:15:21,256
And now, for example,
I want to just test


297
00:15:21,256 --> 00:15:22,436
out my Notification scheme,


298
00:15:22,436 --> 00:15:24,386
I want to see how it
looks in the simulator.


299
00:15:24,846 --> 00:15:26,526
We already talked
about the APNS files.


300
00:15:26,526 --> 00:15:30,356
I want to see that
appropriately appear.


301
00:15:30,586 --> 00:15:33,486
So let's just add a label
to my dynamic interface.


302
00:15:33,886 --> 00:15:35,726
And let's drag it over.


303
00:15:36,436 --> 00:15:40,536
And let's just rename
this Dynamic.


304
00:15:40,636 --> 00:15:42,916
So now I selected my
Notification scheme,


305
00:15:43,726 --> 00:15:46,236
and I am just going to build
and run this to the simulator.


306
00:15:50,376 --> 00:15:53,556
So what I want to have
happen is on the Watch sim,


307
00:15:54,666 --> 00:15:57,346
my notification will appear,
and then it says Dynamic,


308
00:15:57,806 --> 00:16:03,816
and that's all it
should say for now.


309
00:16:04,056 --> 00:16:07,006
So here's my notification,
and it says Test Message,


310
00:16:07,606 --> 00:16:10,246
so I am going to
look into my console.


311
00:16:10,996 --> 00:16:13,726
It says "took too long to
show custom notification.


312
00:16:13,726 --> 00:16:14,896
Falling back to static."


313
00:16:15,746 --> 00:16:19,376
Okay. So let me look into
my notification controller


314
00:16:19,376 --> 00:16:20,656
and see why that
might have occurred.


315
00:16:21,426 --> 00:16:23,676
Here is my code for my
notification controller.


316
00:16:24,776 --> 00:16:27,566
I go down.


317
00:16:27,946 --> 00:16:31,226
Okay, so my Did Receive Remote
Notification is commented out.


318
00:16:31,226 --> 00:16:33,186
I should probably
uncomment this.


319
00:16:37,056 --> 00:16:40,516
And now let's just
build and run again.


320
00:16:40,736 --> 00:16:43,956
So now hopefully, after I
dismiss the old notification,


321
00:16:45,086 --> 00:16:46,176
I should then see my new one,


322
00:16:46,236 --> 00:16:47,676
and it says Dynamic
like I expect.


323
00:16:48,596 --> 00:16:52,676
So on device, if I was in this
scenario and got a notification,


324
00:16:52,676 --> 00:16:54,696
I could select the
App icon or button


325
00:16:54,696 --> 00:16:56,096
and I would be taken
right to the app.


326
00:16:56,466 --> 00:16:58,756
So I can just do the same
thing here in the simulator,


327
00:16:58,756 --> 00:17:08,246
and I am taken right
to the app as I expect.


328
00:17:08,376 --> 00:17:13,596
So now I could flesh out this
code and add a great UI story


329
00:17:13,846 --> 00:17:16,326
in my notification,
and I still want


330
00:17:16,326 --> 00:17:18,146
to be testing my
static interface.


331
00:17:18,296 --> 00:17:21,886
The only way I just saw that
happen was I had to comment


332
00:17:21,886 --> 00:17:23,866
out Did Receive Remote
Notification


333
00:17:23,866 --> 00:17:25,996
to get my static interface,
and I don't want to be doing


334
00:17:25,996 --> 00:17:28,215
that while I am iterating
on my code.


335
00:17:28,876 --> 00:17:30,726
So there's a couple
ways I can do this.


336
00:17:31,026 --> 00:17:34,186
One, I can change this custom
in my completion handler


337
00:17:34,416 --> 00:17:38,486
to call Default, or I can
actually go into my schemes,


338
00:17:39,336 --> 00:17:44,886
I can edit the scheme, and now
I can choose my Watch interface.


339
00:17:44,886 --> 00:17:48,316
So I can change it to be a
static notification rather


340
00:17:48,316 --> 00:17:50,966
than a dynamic, and
as you can see,


341
00:17:50,966 --> 00:17:52,776
here's my push notification
payload.


342
00:17:53,166 --> 00:17:55,396
So if I had multiple payloads,
they would appear here,


343
00:17:55,656 --> 00:17:57,036
and I can quickly change


344
00:17:57,036 --> 00:18:00,796
out which payload I
am trying to test.


345
00:18:00,966 --> 00:18:05,166
So for my purposes, I might
want to keep a static scheme


346
00:18:05,166 --> 00:18:07,826
around for a while, so I am just
going to duplicate this scheme.


347
00:18:09,106 --> 00:18:10,866
Let's call it Static
Notification.


348
00:18:10,866 --> 00:18:15,526
Then let's go to Run.


349
00:18:16,316 --> 00:18:18,176
Then I change my Watch
interface to be static.


350
00:18:19,126 --> 00:18:20,376
Let's press Close.


351
00:18:21,146 --> 00:18:23,336
So now I have a static
notification as well


352
00:18:23,336 --> 00:18:25,086
as my normal dynamic
notification.


353
00:18:26,976 --> 00:18:29,676
So this is great, and
we have the beginning


354
00:18:29,676 --> 00:18:33,266
of a template project here, but
let's understand some context


355
00:18:33,266 --> 00:18:35,436
of how the app life
cycle works on watchOS.


356
00:18:35,436 --> 00:18:46,846
So let's go through the
life cycle of a watchOS app.


357
00:18:47,716 --> 00:18:50,756
So we looked at the interface
for the Watch app but haven't


358
00:18:50,756 --> 00:18:52,216
yet observed its life cycle.


359
00:18:52,676 --> 00:18:54,486
It's important to know
when the extension


360
00:18:54,486 --> 00:18:57,686
and interface controller get
called for setup and tear-down


361
00:18:58,066 --> 00:19:01,136
so you are configuring UI
elements at the right time,


362
00:19:01,236 --> 00:19:04,456
as well as performing cleanup
operations or finishing tasks


363
00:19:04,556 --> 00:19:06,616
when the wearer stops
interacting with your Watch app.


364
00:19:07,586 --> 00:19:08,876
When your Watch app is launched,


365
00:19:08,876 --> 00:19:12,796
the extension delegate
will get Application Did


366
00:19:12,796 --> 00:19:13,506
Finish Launching.


367
00:19:13,926 --> 00:19:15,526
The extension delegate
is analogous


368
00:19:15,526 --> 00:19:17,336
to UI application
delegate on iOS.


369
00:19:18,126 --> 00:19:21,146
As such, you will also receive
an Application Did Become Active


370
00:19:21,146 --> 00:19:23,586
callback to allow you to
update your model data.


371
00:19:24,866 --> 00:19:27,466
Next, the storyboard in your
Watch app bundle is loaded


372
00:19:27,466 --> 00:19:30,586
on Apple Watch, and the initial
interface controller is created.


373
00:19:31,356 --> 00:19:32,916
Once the UI is initialized,


374
00:19:33,186 --> 00:19:35,366
your interface controller
will receive an Awake


375
00:19:35,366 --> 00:19:38,566
With Context call, giving it a
chance to initialize variables


376
00:19:38,566 --> 00:19:40,956
for state and configure
UI elements


377
00:19:40,996 --> 00:19:41,876
with their initial values.


378
00:19:41,876 --> 00:19:45,546
When the UI of your Watch
app is in the process


379
00:19:45,546 --> 00:19:49,196
of getting displayed on screen,
Will Activate will be called,


380
00:19:49,376 --> 00:19:51,886
allowing you to perform
any last-minute tasks


381
00:19:51,886 --> 00:19:53,886
or final UI element
configurations.


382
00:19:54,576 --> 00:19:57,056
And now, as the wearer
interacts with UI elements,


383
00:19:57,236 --> 00:19:59,446
WatchKit calls the
action methods you defined


384
00:19:59,446 --> 00:20:00,646
on your interface controller.


385
00:20:01,336 --> 00:20:04,536
Those action methods are
your chance to execute code


386
00:20:04,976 --> 00:20:07,196
and update your app's UI.


387
00:20:07,196 --> 00:20:09,196
Keep in mind that
engagement times are short.


388
00:20:09,816 --> 00:20:13,336
On iOS, we traditionally think
in terms of our user interacting


389
00:20:13,336 --> 00:20:16,476
with our app in a sense of
minutes, but on watchOS,


390
00:20:16,656 --> 00:20:18,456
we are going to be thinking
in terms of seconds.


391
00:20:19,306 --> 00:20:22,686
Actually, we are going to
hit a Did Deactivate call


392
00:20:22,686 --> 00:20:25,826
after the wearer stops
interacting with our app.


393
00:20:25,826 --> 00:20:30,136
And after that method is
called, then at some point


394
00:20:30,136 --> 00:20:33,396
in the future, the
interface controller will then


395
00:20:33,526 --> 00:20:34,426
get deallocated.


396
00:20:34,996 --> 00:20:38,156
And now our extension delegate,


397
00:20:38,156 --> 00:20:39,676
after the wearer
stops interacting


398
00:20:39,676 --> 00:20:42,356
with the watch completely --
for example, they might go back


399
00:20:42,356 --> 00:20:45,776
to the Home screen -- you will
receive an Application Will


400
00:20:45,776 --> 00:20:49,256
Resign Active callback, and
so this is your opportunity


401
00:20:49,606 --> 00:20:52,666
to save any app-related
state information and close


402
00:20:52,666 --> 00:20:54,516
out any ongoing tasks.


403
00:20:56,436 --> 00:20:59,306
So we know the life cycle
of the WatchKit extension,


404
00:20:59,556 --> 00:21:01,096
but another important
thing to talk


405
00:21:01,096 --> 00:21:03,666
about is the layout
of the Watch app.


406
00:21:04,936 --> 00:21:11,326
So the model in watchOS for
WatchKit is different from UIKit


407
00:21:11,326 --> 00:21:13,886
and AppKit because it's
a flow-based layout.


408
00:21:14,476 --> 00:21:18,386
So all of our elements
go one after another,


409
00:21:19,416 --> 00:21:22,446
and our UI is primarily
created in Interface Builder.


410
00:21:23,596 --> 00:21:25,636
So when we have an
interface controller,


411
00:21:25,636 --> 00:21:28,696
we can use our object
library and just drag an image


412
00:21:29,026 --> 00:21:32,686
or drag a button, and then
in the instances when we want


413
00:21:32,686 --> 00:21:36,996
to have a slightly
more involved layout,


414
00:21:37,506 --> 00:21:39,446
we could use a WK
interface group,


415
00:21:39,536 --> 00:21:42,676
which will just manage the
layout for different items.


416
00:21:43,386 --> 00:21:44,986
So for example, we
could add an image


417
00:21:44,986 --> 00:21:46,086
and a label into the group.


418
00:21:46,596 --> 00:21:50,496
And so the programming model
is really important to note.


419
00:21:50,876 --> 00:21:53,726
You don't write object
creation code with WatchKit.


420
00:21:54,766 --> 00:21:57,036
You have fine-tuned control
in the Interface Builder


421
00:21:57,866 --> 00:22:02,806
of positioning and sizing, the
layout hierarchy, and animation.


422
00:22:03,396 --> 00:22:07,636
And I highly encourage
you to go to the Layout


423
00:22:07,636 --> 00:22:11,266
and Animation Techniques talk
for WatchKit on Thursday.


424
00:22:11,266 --> 00:22:12,896
It's going to be a
great session on how


425
00:22:12,896 --> 00:22:15,786
to create really rich
UIs for your users.


426
00:22:16,796 --> 00:22:19,466
And so I've been thinking about
how best to make my Watch app,


427
00:22:19,466 --> 00:22:23,156
and if you recall, my iOS app
is just a simple UI table view.


428
00:22:24,086 --> 00:22:26,956
So my first idea was to have
a list of all the people


429
00:22:26,956 --> 00:22:29,676
that I need to call, very
similar to my iOS app,


430
00:22:30,326 --> 00:22:31,926
and when I started
thinking about it,


431
00:22:31,926 --> 00:22:35,916
I realized I don't need all that
information in my Watch app.


432
00:22:36,376 --> 00:22:38,936
Really, I just want to know
who next to call rather


433
00:22:38,936 --> 00:22:41,126
than knowing a list of
all those I should call.


434
00:22:41,546 --> 00:22:43,686
So my UI might look
something like this.


435
00:22:44,486 --> 00:22:46,726
So great. Now I have an
idea of what I want to make,


436
00:22:47,406 --> 00:22:49,256
and I want to start
creating my UI.


437
00:22:49,796 --> 00:22:53,156
So I am going to walk
through how to create your UI


438
00:22:53,156 --> 00:22:55,906
for your main app, your
Glance, and your Notification.


439
00:22:56,406 --> 00:23:00,226
So let's jump into Xcode
and see what we have.


440
00:23:00,426 --> 00:23:02,286
So we understand what
the life cycle is


441
00:23:02,286 --> 00:23:04,366
and generally speaking
what the layout is,


442
00:23:04,546 --> 00:23:05,926
so let's go into our storyboard.


443
00:23:07,376 --> 00:23:10,596
If I wanted to add an image
to my interface controller,


444
00:23:10,946 --> 00:23:12,766
I would select it here
in the object library,


445
00:23:12,766 --> 00:23:16,706
and then I can just
quickly drag an image over,


446
00:23:17,686 --> 00:23:19,466
and now I just want to
add a label as well.


447
00:23:19,466 --> 00:23:23,516
So let's just find the
label and drag it over.


448
00:23:23,586 --> 00:23:26,226
And if you notice,
a blue line appears,


449
00:23:26,296 --> 00:23:30,116
so in my flow-based layout,
I can position my label to be


450
00:23:30,196 --> 00:23:32,056
after or before my image.


451
00:23:32,496 --> 00:23:35,046
So let's place it after.


452
00:23:35,236 --> 00:23:38,656
Now, for instance, if I want
to place them horizontally next


453
00:23:38,656 --> 00:23:40,166
to one another, I could --


454
00:23:41,116 --> 00:23:43,906
okay, so I can't actually do
this in Interface Builder.


455
00:23:43,906 --> 00:23:45,956
There's no blue line that
appears to help me out.


456
00:23:46,836 --> 00:23:51,286
So let me use a WK
interface group to do this.


457
00:23:51,486 --> 00:23:55,416
So let's drag this over,
resize our image a bit,


458
00:23:56,796 --> 00:23:58,756
and now let's add the
label into the group,


459
00:23:58,756 --> 00:24:02,106
and then let's also add the
image right next to the label.


460
00:24:02,226 --> 00:24:04,286
So this is how it can
position things horizontally.


461
00:24:05,326 --> 00:24:08,826
So for now, let's take our
label out and our image out,


462
00:24:08,826 --> 00:24:10,776
and let's just delete the group,


463
00:24:11,976 --> 00:24:13,686
and then in my attributes
inspector,


464
00:24:14,206 --> 00:24:15,406
already in my asset catalog,


465
00:24:15,406 --> 00:24:17,036
I have an image for
my friend, Ethan.


466
00:24:17,806 --> 00:24:20,976
So let's just reference
that image.


467
00:24:21,336 --> 00:24:22,706
Ethan looks a little squished.


468
00:24:22,876 --> 00:24:25,156
Let's make him look
a little bit happier.


469
00:24:26,506 --> 00:24:27,456
There we go.


470
00:24:27,456 --> 00:24:28,366
He seems pretty happy.


471
00:24:28,796 --> 00:24:33,246
So let's also change the
label text to be Ethan.


472
00:24:33,246 --> 00:24:35,986
Now my layout is positioned
-- it's left-aligned,


473
00:24:36,446 --> 00:24:39,116
so I actually want to position
it centered in the screen.


474
00:24:39,706 --> 00:24:41,816
So if I just select on my image,


475
00:24:42,106 --> 00:24:43,676
then go to my attributes
inspector,


476
00:24:44,266 --> 00:24:46,996
and I can change the
position to be in the center.


477
00:24:47,616 --> 00:24:50,996
Then I can also change
the position vertically,


478
00:24:50,996 --> 00:24:53,346
I can change the size,
I can change the view


479
00:24:53,346 --> 00:24:56,376
for this particular image, and
I can do the same for my label.


480
00:24:56,436 --> 00:25:00,096
I just want to position
it in the center.


481
00:25:00,096 --> 00:25:01,786
Now let's move on to the Glance.


482
00:25:01,996 --> 00:25:05,226
If you notice, this Glance
controller looks different


483
00:25:05,226 --> 00:25:05,766
than our main app.


484
00:25:06,216 --> 00:25:07,226
There's two groups here.


485
00:25:07,676 --> 00:25:09,696
That's because Glances
are actually templated.


486
00:25:10,266 --> 00:25:12,406
So I have an upper template
and a lower template.


487
00:25:12,736 --> 00:25:16,566
So if I select in my attributes
inspector my upper template,


488
00:25:16,746 --> 00:25:18,996
I have a list of options
that I can choose from.


489
00:25:19,826 --> 00:25:23,246
So for this particular case,
let's just have a large text,


490
00:25:24,036 --> 00:25:25,876
and let's change it to be Call.


491
00:25:28,096 --> 00:25:31,716
Then let's add an image
to my lower template.


492
00:25:32,396 --> 00:25:35,146
I am going to do the
same thing as before,


493
00:25:35,146 --> 00:25:37,826
just change the image
to reference Ethan.


494
00:25:38,736 --> 00:25:41,776
So when I look at my Glance,
I really kind of want the app


495
00:25:41,816 --> 00:25:44,116
to scream at me because I am
really bad about calling Ethan,


496
00:25:44,876 --> 00:25:49,646
so the app will help me do that.


497
00:25:49,836 --> 00:25:52,156
And so also I can
do the same thing


498
00:25:52,156 --> 00:25:54,356
for my notification
interfaces as well.


499
00:25:54,356 --> 00:25:58,986
So for the most part, I
figured out my new interface,


500
00:25:59,446 --> 00:26:02,916
and now let's just build
and run the interface


501
00:26:02,916 --> 00:26:04,016
by selecting the schemes.


502
00:26:04,546 --> 00:26:07,666
Let's build and run
to the Watch sim.


503
00:26:08,596 --> 00:26:20,806
So I just expect my new
interface to appear.


504
00:26:20,836 --> 00:26:21,666
Okay. Great.


505
00:26:21,666 --> 00:26:23,656
So there it is, and I have
attached in the debugger.


506
00:26:24,466 --> 00:26:27,106
So let's just stop this session,
and now let's take a look


507
00:26:27,106 --> 00:26:28,836
at the iOS sim because
it's important


508
00:26:28,836 --> 00:26:30,516
to note these are
paired devices.


509
00:26:31,966 --> 00:26:34,426
So I scroll up, and
I pan to the right.


510
00:26:35,036 --> 00:26:37,536
I see I have my iOS
app installed,


511
00:26:37,796 --> 00:26:41,046
so just like on a device, the
only way your app will get


512
00:26:41,046 --> 00:26:43,726
to a user's Watch is
by also being installed


513
00:26:43,726 --> 00:26:45,106
on the iOS device.


514
00:26:45,646 --> 00:26:47,116
And so this is what's
happened here.


515
00:26:47,646 --> 00:26:51,116
Now let's select our Apple
Watch app, and in the simulator,


516
00:26:51,346 --> 00:26:53,026
I can change out
my Complications.


517
00:26:54,346 --> 00:26:56,006
So Call Me Lately
is already enabled.


518
00:26:56,006 --> 00:27:02,016
I can also uninstall my
app and reinstall it,


519
00:27:02,016 --> 00:27:05,576
and I can also disable my
Glance and reenable it.


520
00:27:06,706 --> 00:27:08,226
So if I wanted to
view my Glance,


521
00:27:08,226 --> 00:27:11,816
I could go in the simulator,
go back to my clock face,


522
00:27:12,266 --> 00:27:16,636
and just like on device, I
swipe up, and then my Glance --


523
00:27:17,046 --> 00:27:19,046
so let's just reenable it.


524
00:27:19,046 --> 00:27:22,406
So -- oh, excuse me.


525
00:27:22,406 --> 00:27:24,096
So I would expect
my new UI to appear.


526
00:27:24,096 --> 00:27:28,536
That hasn't happened, but
let's just move on for now.


527
00:27:28,776 --> 00:27:32,196
So I figured out my new
interface, but I need to know


528
00:27:32,196 --> 00:27:34,406
who the next person is, and
I need to figure out how


529
00:27:34,406 --> 00:27:37,326
to update my app to do this.


530
00:27:37,466 --> 00:27:42,496
So let's go back to slides.


531
00:27:42,496 --> 00:27:44,576
So my iOS app mainly
communicates


532
00:27:44,576 --> 00:27:48,126
to my server via NSURLSession
to get my list of loved ones.


533
00:27:48,656 --> 00:27:51,166
What's great is in
watchOS 2, I can use a lot


534
00:27:51,166 --> 00:27:54,206
of the same NSURLSession
code to talk to my server.


535
00:27:55,276 --> 00:27:57,196
However, there are times
when I need to make sure


536
00:27:57,196 --> 00:28:00,506
that my iOS app and watchOS app
are in touch with each other,


537
00:28:00,866 --> 00:28:02,846
and I can use WatchConnectivity
to do so.


538
00:28:03,596 --> 00:28:05,976
So let's take a moment and talk


539
00:28:05,976 --> 00:28:08,906
about the new WatchConnectivity
framework before we see how we


540
00:28:08,906 --> 00:28:10,376
can use it in Call Me Lately.


541
00:28:11,656 --> 00:28:14,126
So WatchConnectivity
is a framework


542
00:28:14,176 --> 00:28:17,496
that has four core
uses for communication


543
00:28:17,496 --> 00:28:19,326
between iOS and watchOS.


544
00:28:19,986 --> 00:28:22,636
An important thing to note is
that WatchConnectivity lives


545
00:28:22,636 --> 00:28:27,556
on both iOS and watchOS, so you
can use APIs on both platforms.


546
00:28:27,926 --> 00:28:30,646
This isn't just your Watch
app talking to your iOS app


547
00:28:30,646 --> 00:28:32,796
when there are times when
you want your iOS app


548
00:28:32,796 --> 00:28:33,986
to be updating your Watch app.


549
00:28:34,986 --> 00:28:37,186
So the first use is
to allow your iOS app


550
00:28:37,426 --> 00:28:39,746
to update your Watch
app's application context,


551
00:28:39,746 --> 00:28:40,646
and vice versa.


552
00:28:41,256 --> 00:28:44,056
This may not be urgent data, but
something you know you'll want


553
00:28:44,056 --> 00:28:45,156
to update your user with.


554
00:28:45,866 --> 00:28:47,316
The second is Send Message.


555
00:28:47,716 --> 00:28:50,106
This is for small pieces
of information that I need


556
00:28:50,106 --> 00:28:51,476
to transfer back and forth


557
00:28:51,796 --> 00:28:53,946
between my iOS app
and Watch app.


558
00:28:54,756 --> 00:28:56,946
And the third is a
simple transfer file API.


559
00:28:57,866 --> 00:29:01,156
And lastly, there's a transfer
user info API that ties in more


560
00:29:01,156 --> 00:29:02,176
so with Complications.


561
00:29:03,566 --> 00:29:06,376
There's also a wider range
of things you can accomplish,


562
00:29:06,376 --> 00:29:09,266
and I encourage you to go to
the talk on WatchConnectivity


563
00:29:09,266 --> 00:29:10,626
to find out more information.


564
00:29:11,376 --> 00:29:14,906
Let's see in Call Me
Lately how I can best


565
00:29:14,906 --> 00:29:16,066
use WatchConnectivity.


566
00:29:16,936 --> 00:29:19,616
I just want to add
WatchConnectivity to my app,


567
00:29:19,616 --> 00:29:23,396
I want to debug it,
and lastly I want


568
00:29:23,436 --> 00:29:25,676
to just profile it
with Instruments.


569
00:29:26,166 --> 00:29:28,626
So speaking of Instruments,
for those that don't know,


570
00:29:28,946 --> 00:29:32,016
Instruments is a powerful
profiling tool to check


571
00:29:32,126 --> 00:29:34,496
out the performance of your app.


572
00:29:34,676 --> 00:29:36,606
So you will get a
profiling template


573
00:29:36,876 --> 00:29:40,406
when you first initially launch
Instruments, and you can pick


574
00:29:40,406 --> 00:29:44,056
from a time profiler,
leaks, allocations,


575
00:29:44,646 --> 00:29:48,866
and then you will see something,
if I select a time profiler,


576
00:29:48,866 --> 00:29:50,386
for instance, this is
the view I would see,


577
00:29:50,386 --> 00:29:53,536
and I can easily profile my app.


578
00:29:53,796 --> 00:29:55,276
And it's really important,


579
00:29:55,746 --> 00:29:57,816
so engagement times
are short on the Watch.


580
00:29:57,816 --> 00:30:00,126
So this means that
performance is critical,


581
00:30:00,726 --> 00:30:02,966
and we want to be using
Instruments to make sure


582
00:30:02,966 --> 00:30:06,736
that our app is giving
a good user experience,


583
00:30:06,976 --> 00:30:09,376
and we want to check it out
on both device and simulator.


584
00:30:10,146 --> 00:30:12,956
So now that we know a little
bit about WatchConnectivity


585
00:30:12,956 --> 00:30:14,826
and Instruments, let's
go into demo again.


586
00:30:15,426 --> 00:30:20,806
So in my app, I might have an
algorithm of sorts that says,


587
00:30:20,906 --> 00:30:22,816
oh, this is the next
person I want to call.


588
00:30:22,816 --> 00:30:25,646
And so when I have
this data available,


589
00:30:26,196 --> 00:30:30,246
I want to update my iOS app
to know who is the person


590
00:30:30,246 --> 00:30:31,536
that I am viewing on my Watch


591
00:30:31,536 --> 00:30:32,986
and the person I
should next call.


592
00:30:33,496 --> 00:30:36,046
So I might want to maybe
on the initial launch


593
00:30:36,046 --> 00:30:38,316
of the app just update
my application context


594
00:30:38,586 --> 00:30:41,376
over to the iOS app
and see that appear.


595
00:30:42,586 --> 00:30:44,836
So I would probably
just want to do this


596
00:30:44,836 --> 00:30:47,656
on my Application Did Become
Active in my extension delegate.


597
00:30:48,226 --> 00:30:51,476
So here I could just
place this code.


598
00:30:51,476 --> 00:30:53,896
So let me first import
WatchConnectivity.


599
00:31:00,236 --> 00:31:02,436
And now in Application
Did Become Active,


600
00:31:02,516 --> 00:31:03,556
I would add some code,


601
00:31:03,706 --> 00:31:06,746
just create a context
that's a string named Ethan,


602
00:31:06,746 --> 00:31:10,326
and then on WC Session, which
is part of WatchConnectivity,


603
00:31:10,456 --> 00:31:12,286
I have the default session


604
00:31:12,286 --> 00:31:14,446
and I call the method
Update Application Context


605
00:31:14,966 --> 00:31:17,526
with the key WC Application
Context,


606
00:31:17,936 --> 00:31:19,636
and I would just
send over my context.


607
00:31:19,976 --> 00:31:22,106
And worse comes to
worst, I am just going


608
00:31:22,106 --> 00:31:23,736
to print my error for now.


609
00:31:25,116 --> 00:31:26,456
So let's see this work.


610
00:31:27,286 --> 00:31:34,786
And let's build and run.


611
00:31:34,986 --> 00:31:36,566
Let's select our Watch app.


612
00:31:37,496 --> 00:31:45,976
My app launched, but I see
a WC error domain, 7004,


613
00:31:45,976 --> 00:31:49,026
so I know from previous
experience


614
00:31:49,026 --> 00:31:50,826
that my session just
isn't activated.


615
00:31:51,406 --> 00:31:52,636
Let's take a look at my code.


616
00:31:52,636 --> 00:31:56,166
I also haven't set
my delegate either,


617
00:31:56,396 --> 00:32:02,086
so I want to set a WC session
delegate, and then after --


618
00:32:02,736 --> 00:32:05,756
or before my update
application context code,


619
00:32:05,756 --> 00:32:10,836
I just want to set the delegate
to be myself, and then I want


620
00:32:10,836 --> 00:32:11,926
to activate my session.


621
00:32:12,056 --> 00:32:13,706
And it's important
to note that you want


622
00:32:13,706 --> 00:32:15,886
to set the delegate before
activating your session


623
00:32:16,256 --> 00:32:19,016
because you might have
messages waiting for you


624
00:32:19,256 --> 00:32:20,576
when you've activated
that session.


625
00:32:20,986 --> 00:32:23,946
So you want to receive the
appropriate delegate callbacks.


626
00:32:24,956 --> 00:32:30,246
So now let's just
build and run again.


627
00:32:30,246 --> 00:32:41,856
Now let's just make sure that
my error code has gone away.


628
00:32:41,856 --> 00:32:42,546
Okay. Great.


629
00:32:42,726 --> 00:32:44,056
So I don't have my
error anymore.


630
00:32:44,526 --> 00:32:47,156
So that means this is
appropriately sending my


631
00:32:47,156 --> 00:32:49,006
application context
to my iOS app.


632
00:32:49,306 --> 00:32:51,936
But now I want to see that my
iOS app actually receives it.


633
00:32:52,446 --> 00:32:54,346
So I can do this
by going to Schemes


634
00:32:55,166 --> 00:32:58,006
and selecting my iOS
scheme, and I am going


635
00:32:58,006 --> 00:33:02,376
to select the same simulator
that's paired with my Watch sim.


636
00:33:02,376 --> 00:33:04,876
So I'm going to select
my iPhone 6 sim.


637
00:33:05,466 --> 00:33:09,276
Now if I click on Control and
then press on Build and Run,


638
00:33:09,356 --> 00:33:10,926
I can actually run
without building,


639
00:33:11,196 --> 00:33:14,556
so this way I don't have to
-- if my app is really large,


640
00:33:14,556 --> 00:33:16,426
I don't have to wait
for it to keep compiling


641
00:33:16,426 --> 00:33:18,566
and install the app,
et cetera, et cetera.


642
00:33:18,566 --> 00:33:22,196
So let's just press Control
and then run without building.


643
00:33:23,816 --> 00:33:27,286
So now it looks like my
app launched, and I've hit


644
00:33:27,286 --> 00:33:29,086
on my app delegate
in my iOS app,


645
00:33:29,416 --> 00:33:32,616
I've hit my delegate callback,
Did Receive Application Context,


646
00:33:33,076 --> 00:33:36,316
and I can then update
my UI in my iOS app.


647
00:33:37,856 --> 00:33:39,376
Let's just continue through.


648
00:33:40,486 --> 00:33:44,566
So now if I am on my Watch
sim, and let's go back home.


649
00:33:46,096 --> 00:33:49,806
So my debugging session is
still ongoing in my iOS app,


650
00:33:50,126 --> 00:33:53,446
and my Watch app, when it's
activated -- excuse me --


651
00:33:53,586 --> 00:33:56,746
when it's launched, it will then
update my application context.


652
00:33:58,106 --> 00:34:00,406
So I can hit it again
on my iOS app


653
00:34:00,406 --> 00:34:01,776
and hit the delegate callback.


654
00:34:02,326 --> 00:34:05,216
So this is great because you
can now debug in both simulators


655
00:34:05,216 --> 00:34:07,316
at once, which is really great


656
00:34:07,316 --> 00:34:09,886
for when you are using
WatchConnectivity,


657
00:34:09,886 --> 00:34:12,556
so you can make sure all
of your calls are occurring


658
00:34:12,636 --> 00:34:16,326
in the order you want them
to on both watchOS and iOS.


659
00:34:16,985 --> 00:34:21,576
(Applause) Thank you.


660
00:34:24,646 --> 00:34:27,206
Let's just stop the session
for now, and I just want


661
00:34:27,206 --> 00:34:28,835
to quickly profile
an Instrument.


662
00:34:29,525 --> 00:34:33,956
So I'm going to hit Product,
Profile, and I am going


663
00:34:33,956 --> 00:34:38,525
to have Instruments come up, and
I expect my template to appear,


664
00:34:38,525 --> 00:34:39,525
my template selection.


665
00:34:40,166 --> 00:34:41,735
So let's find my -- okay.


666
00:34:41,896 --> 00:34:43,496
Let's find my time profiler.


667
00:34:44,106 --> 00:34:45,376
Let's just choose that.


668
00:34:46,036 --> 00:34:49,786
And then instead of my
iOS sim, I actually want


669
00:34:49,786 --> 00:34:52,456
to be debugging my,
profiling my extension.


670
00:34:53,295 --> 00:34:54,326
Select that here.


671
00:34:54,656 --> 00:34:55,766
I can press Record.


672
00:34:56,666 --> 00:34:58,486
And it looks like
I've hit an error.


673
00:34:58,486 --> 00:35:01,986
So let's just open up my
Watch sim, place that here.


674
00:35:03,386 --> 00:35:04,326
Press Record.


675
00:35:04,656 --> 00:35:07,356
And there I have attached,
and now I can profile my app.


676
00:35:08,446 --> 00:35:12,456
So in my call tree, I can
also see my sample list just


677
00:35:12,456 --> 00:35:15,356
like on an iOS app, I can
do the same sorts of things,


678
00:35:15,596 --> 00:35:17,306
and I can see that most
of my code is being run


679
00:35:17,306 --> 00:35:19,736
on my main thread
here, which is great,


680
00:35:19,736 --> 00:35:22,576
and then I can go
back to my call tree.


681
00:35:23,096 --> 00:35:26,386
And so this is just very simply
you can easily profile something


682
00:35:26,596 --> 00:35:27,706
using Instruments.


683
00:35:28,736 --> 00:35:32,466
So let's just stop this session.


684
00:35:32,466 --> 00:35:34,356
And now I've written an app


685
00:35:34,356 --> 00:35:37,146
that basically has a
very simple interface


686
00:35:37,326 --> 00:35:38,756
and uses WatchConnectivity,


687
00:35:38,756 --> 00:35:40,546
and I've profiled my
app in Instruments.


688
00:35:40,596 --> 00:35:43,196
Now I could talk
with my designer


689
00:35:43,196 --> 00:35:44,456
and really flesh this out.


690
00:35:45,786 --> 00:35:47,956
So let's talk about what
we were just able to do.


691
00:35:48,746 --> 00:35:51,766
So we added a Watch app to
our existing iPhone app.


692
00:35:52,776 --> 00:35:55,036
We created an interface
for our app and Glance.


693
00:35:55,956 --> 00:35:57,416
We used WatchConnectivity.


694
00:35:58,486 --> 00:36:01,656
We debugged our iOS and
watchOS apps at the same time.


695
00:36:02,866 --> 00:36:04,636
And we profiled our
app in Instruments.


696
00:36:05,166 --> 00:36:10,136
So these are just a few of the
things that you can get started


697
00:36:10,136 --> 00:36:14,946
with in WatchKit, and there are
so many other watchOS 2 features


698
00:36:14,946 --> 00:36:16,486
that I am incredibly
excited about,


699
00:36:16,986 --> 00:36:19,366
and like I mentioned before,
there's Complications,


700
00:36:19,736 --> 00:36:22,196
and as you might have seen
in the Keynote yesterday,


701
00:36:22,446 --> 00:36:24,086
you can even do Time Travel,


702
00:36:24,086 --> 00:36:26,066
which I think is
just the future.


703
00:36:26,316 --> 00:36:28,276
You can just, like,
go back and forth.


704
00:36:28,276 --> 00:36:28,866
It's amazing.


705
00:36:28,866 --> 00:36:29,496
It's so cool.


706
00:36:29,946 --> 00:36:32,656
And then you can also
use Digital Crown,


707
00:36:32,656 --> 00:36:34,836
so you can create really
intuitive experiences


708
00:36:34,836 --> 00:36:37,376
for your users using
the Digital Crown.


709
00:36:38,626 --> 00:36:42,146
You also have simple animations
to create really responsive apps


710
00:36:42,466 --> 00:36:44,716
for your user, just
nice and playful.


711
00:36:45,636 --> 00:36:47,716
You also have access to
the heart rate sensors,


712
00:36:47,716 --> 00:36:50,346
so if you are making a Workout
app or some sort of fitness app,


713
00:36:50,626 --> 00:36:53,906
you now get that data
via HealthKit and can use


714
00:36:53,906 --> 00:36:56,736
that to provide a better
experience for your user.


715
00:36:56,936 --> 00:37:00,226
You can also provide a great
experience using haptics


716
00:37:00,856 --> 00:37:04,286
and lightly tap your user
and provide some context


717
00:37:04,286 --> 00:37:07,996
as to what you are
doing in the app.


718
00:37:08,166 --> 00:37:10,136
And there's also media
playback, so like you saw


719
00:37:10,136 --> 00:37:13,616
in the Keynote yesterday,
you can view a simple video.


720
00:37:14,156 --> 00:37:18,726
And you can also have
audio playback as well,


721
00:37:18,726 --> 00:37:20,466
so this would use the
speaker on the Watch,


722
00:37:20,686 --> 00:37:22,766
or if the user has paired
Bluetooth headphones,


723
00:37:23,036 --> 00:37:24,746
it would then route
there as well.


724
00:37:24,746 --> 00:37:28,816
And you can do audio recording,
so for the first time,


725
00:37:28,816 --> 00:37:31,916
you can get access to the
mic on the Watch itself


726
00:37:32,076 --> 00:37:33,666
and provide a great experience.


727
00:37:35,156 --> 00:37:37,536
And you have access
to the Keychain now,


728
00:37:37,536 --> 00:37:40,266
so you can provide a really
secure experience for your user.


729
00:37:42,136 --> 00:37:46,956
So in recap, we were able
to discuss the architecture


730
00:37:47,276 --> 00:37:49,896
of an app, we added a Watch app,


731
00:37:50,616 --> 00:37:52,396
we talked through
the app life cycle,


732
00:37:52,996 --> 00:37:55,806
we used the different interface
elements and we made our app


733
00:37:55,806 --> 00:37:58,466
and our Glance, and we talked


734
00:37:58,466 --> 00:38:00,626
through our notification
interfaces and how


735
00:38:00,626 --> 00:38:02,816
to easily iterate on
different notifications


736
00:38:03,166 --> 00:38:05,656
and using different categories
and different payloads.


737
00:38:06,286 --> 00:38:09,856
And we were able to build
and run in the new simulator,


738
00:38:10,416 --> 00:38:11,656
and we debugged our app.


739
00:38:12,926 --> 00:38:15,866
And we were able to use
various watchOS capabilities.


740
00:38:17,156 --> 00:38:19,606
So there's some great
documentation online,


741
00:38:19,606 --> 00:38:22,126
the watchOS 2 Transition
Guide is excellent.


742
00:38:22,126 --> 00:38:24,306
I highly encourage you
guys to all check it out.


743
00:38:24,306 --> 00:38:25,736
There's some great
technical support.


744
00:38:25,926 --> 00:38:28,736
You can check out the
Forums, some sample code.


745
00:38:28,736 --> 00:38:31,686
If you have general inquiries,
please contact Jake Behrens,


746
00:38:31,686 --> 00:38:33,416
our watchOS framework's
Evangelist.


747
00:38:34,466 --> 00:38:37,956
There is a lot of really amazing
sessions happening this week,


748
00:38:38,196 --> 00:38:40,936
there's a lot of info to dig
through, WatchKit in Depth,


749
00:38:41,416 --> 00:38:44,916
Complications, Layout,
and so much more.


750
00:38:45,756 --> 00:38:49,286
If you have any questions,
if you have general questions


751
00:38:49,286 --> 00:38:51,066
or you're digging into
the code for a first time,


752
00:38:51,666 --> 00:38:54,256
or if you are an experienced
WatchKit dev, please come by,


753
00:38:54,256 --> 00:38:58,316
we will be happy to answer
any questions you might have.


754
00:38:58,316 --> 00:38:59,186
So thank you, everyone.


755
00:39:03,796 --> 00:39:04,206
(Applause) Thank you.

