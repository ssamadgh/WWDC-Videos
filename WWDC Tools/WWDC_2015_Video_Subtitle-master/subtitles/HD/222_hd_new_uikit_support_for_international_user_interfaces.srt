1
00:00:24,516 --> 00:00:29,896
[ Applause ]


2
00:00:30,396 --> 00:00:31,506
>> SARA RADI: Good
afternoon, everyone!


3
00:00:31,506 --> 00:00:33,296
Welcome to the new UIKit support


4
00:00:33,296 --> 00:00:35,506
for international user
interfaces session,


5
00:00:35,566 --> 00:00:38,616
my name is Sara Radi I'm a
international utilization


6
00:00:38,616 --> 00:00:41,276
software engineer, and
I'm one of those people


7
00:00:41,276 --> 00:00:43,316
who would really love
to use your amazing app


8
00:00:43,316 --> 00:00:47,046
in my native language, but
I just can't find great apps


9
00:00:47,046 --> 00:00:48,536
in the App Store localized.


10
00:00:49,356 --> 00:00:53,506
My native language is Arabic.


11
00:00:53,506 --> 00:00:55,426
And I grew up in a country,


12
00:00:55,426 --> 00:00:57,166
where we didn't write
right from right to left.


13
00:00:57,886 --> 00:01:01,436
And before Smart Phones became
so popular, we didn't have


14
00:01:01,496 --> 00:01:03,486
to think about layout
in right to left.


15
00:01:03,936 --> 00:01:07,626
So basically just
supporting the text rendering


16
00:01:07,936 --> 00:01:09,366
and the font was enough.


17
00:01:10,196 --> 00:01:13,606
However, today, with all of
these electronic devices,


18
00:01:14,026 --> 00:01:16,026
people are using
more and more eBooks,


19
00:01:16,476 --> 00:01:19,106
and they are interacting more
and more with their devices.


20
00:01:19,856 --> 00:01:23,276
So supporting just the text
in your apps is not enough


21
00:01:23,446 --> 00:01:26,716
and it becomes very important
to think about the layout


22
00:01:27,076 --> 00:01:30,706
and the flow of your app when
supporting these localizations.


23
00:01:31,296 --> 00:01:36,886
And just like me, there are
a million of users who wants


24
00:01:36,886 --> 00:01:38,846
to use their apps in
their native language.


25
00:01:39,716 --> 00:01:43,376
This is a huge opportunity
for you to grow your markets


26
00:01:43,376 --> 00:01:44,726
in these areas of the world.


27
00:01:45,306 --> 00:01:49,676
This is an example of an
Apple ad in Dubai in one


28
00:01:49,676 --> 00:01:51,876
of the largest buildings
in the world,


29
00:01:52,406 --> 00:01:54,136
and this gives you an idea


30
00:01:54,136 --> 00:01:56,726
of Apple's presence
in the Middle East.


31
00:01:58,116 --> 00:02:00,586
So what are we going
to talk about today?


32
00:02:01,056 --> 00:02:07,366
So mainly we are going
to focus -- I'm sorry.


33
00:02:07,366 --> 00:02:09,336
Mainly we are going to focus


34
00:02:09,336 --> 00:02:11,946
on right-to-left user
interface challenges,


35
00:02:11,946 --> 00:02:15,616
and then we are going to
introduce the new UIKit support.


36
00:02:16,366 --> 00:02:18,226
We added the native
UIKit support


37
00:02:18,226 --> 00:02:21,066
for right-to-left languages so
we made it seize easy for you


38
00:02:21,066 --> 00:02:24,186
to support right-to-left
with no effort.


39
00:02:24,186 --> 00:02:27,256
And then we are going to
talk about your custom layout


40
00:02:27,256 --> 00:02:29,666
and how can you add
right-to-left support


41
00:02:29,666 --> 00:02:32,896
in your custom layout with auto
layout, and then we are going


42
00:02:32,896 --> 00:02:37,996
to introduce new APIs that we
just added on iOS 9 and talk


43
00:02:37,996 --> 00:02:40,796
about exception cases
and hopefully by the end


44
00:02:40,796 --> 00:02:44,886
of the session, I want to see
more apps localized in Arabic


45
00:02:44,886 --> 00:02:46,466
in the App Store, and Hebrew.


46
00:02:46,466 --> 00:02:47,016
I'm sorry.


47
00:02:47,016 --> 00:02:51,686
So let's get started
with an overview.


48
00:02:52,536 --> 00:02:55,546
So when you are designing your
app in left-to-right languages


49
00:02:56,046 --> 00:02:59,106
or in English, for
example, you always start


50
00:02:59,646 --> 00:03:02,836
by placing the most
important elements


51
00:03:02,836 --> 00:03:04,346
on the left side of the screen.


52
00:03:05,106 --> 00:03:07,066
And then you if have,
like other elements,


53
00:03:07,176 --> 00:03:09,186
so they would flow
naturally left to right.


54
00:03:09,496 --> 00:03:11,056
And the reason why we do that,


55
00:03:11,056 --> 00:03:14,246
is because the layout itself it
starts to, [follow] the reading


56
00:03:14,246 --> 00:03:16,176
and the writing direction
of the script.


57
00:03:16,646 --> 00:03:20,076
So it makes total sense if you
are designing your app in right


58
00:03:20,076 --> 00:03:23,786
to left, to flip the layout and
this is because the scripts read


59
00:03:23,786 --> 00:03:25,046
and write from right to left.


60
00:03:25,556 --> 00:03:30,936
And the UI mirroring
concept does not only apply


61
00:03:30,936 --> 00:03:32,076
to static UI.


62
00:03:32,266 --> 00:03:34,056
It also applies to dynamic UI.


63
00:03:34,706 --> 00:03:36,136
For example, in your app,


64
00:03:36,136 --> 00:03:39,196
if you have navigation
gestures and animations.


65
00:03:39,486 --> 00:03:42,116
For example, so here the
back button is always


66
00:03:42,176 --> 00:03:43,726
on the left side of the screen.


67
00:03:44,076 --> 00:03:44,996
So when writing


68
00:03:44,996 --> 00:03:47,886
in a right-to-left environment
not only the back button should


69
00:03:47,886 --> 00:03:50,336
be on the right side,
but also the gesture


70
00:03:50,336 --> 00:03:52,746
and the animation
that comes with it.


71
00:03:54,896 --> 00:03:56,666
So what's new in UIKit.


72
00:03:57,876 --> 00:04:02,256
So on iOS 9 UIKit sender
controls fully support user


73
00:04:02,256 --> 00:04:03,426
interface mirroring.


74
00:04:03,576 --> 00:04:05,426
Which means when
your apps are running


75
00:04:05,546 --> 00:04:08,676
in right-to-left localizations
they will flip automatically


76
00:04:08,676 --> 00:04:09,096
for you.


77
00:04:09,316 --> 00:04:13,236
Also the whole system and all
our native apps fully support


78
00:04:13,236 --> 00:04:16,606
right-to-left UI so your
apps should be consistent.


79
00:04:17,755 --> 00:04:20,106
So let's go through
some standard controls


80
00:04:20,366 --> 00:04:21,435
in our native apps.


81
00:04:22,176 --> 00:04:24,276
Let's start with UI table view.


82
00:04:25,476 --> 00:04:28,266
So this is an example
from the Settings app,


83
00:04:28,336 --> 00:04:31,166
where we are using a
stock UI table view.


84
00:04:31,376 --> 00:04:34,586
As you can see here we are
running the device in English,


85
00:04:34,586 --> 00:04:37,666
so the icons are on the
left side of the screen,


86
00:04:37,846 --> 00:04:41,146
the labels are left aligned, and
the table view accessories are


87
00:04:41,146 --> 00:04:44,286
on the right side, so
changing my language to Hebrew,


88
00:04:44,286 --> 00:04:48,706
for example, will flip the table
view cells automatically for me


89
00:04:49,016 --> 00:04:51,496
so all of the icons now
are on the right side.


90
00:04:51,746 --> 00:04:55,566
The text labels are right
aligned on left of the icons,


91
00:04:55,566 --> 00:04:59,466
and the table accessories
are on the left side.


92
00:04:59,676 --> 00:05:01,376
Next navigation controller.


93
00:05:01,376 --> 00:05:04,096
And this is an example
from the phone app


94
00:05:04,376 --> 00:05:07,266
where you can see the back
button now is on the right side


95
00:05:07,266 --> 00:05:09,666
of the screen and also
the navigation gesture


96
00:05:09,666 --> 00:05:12,166
and animation comes from the
right edge of the screen.


97
00:05:12,496 --> 00:05:15,176
If you look closely,
also the UI table,


98
00:05:15,346 --> 00:05:18,196
the UI tab at the
bottom also flips


99
00:05:18,366 --> 00:05:20,226
so now favorite is
on the right side.


100
00:05:20,926 --> 00:05:25,336
Next, tracking gestures,
this is another example


101
00:05:25,396 --> 00:05:29,666
of a UI table view in the clock
app where you can see the slide,


102
00:05:29,976 --> 00:05:32,046
the swipe to the lead
gesture is coming


103
00:05:32,046 --> 00:05:33,486
from the left edge
of the screen.


104
00:05:34,426 --> 00:05:37,476
If you use a stock UI table
view and enable the swipe


105
00:05:37,476 --> 00:05:39,156
to the lead gesture --
that comes for free.


106
00:05:39,906 --> 00:05:43,946
So, how can you enable
right-to-left support


107
00:05:43,946 --> 00:05:44,476
in your apps?


108
00:05:44,996 --> 00:05:47,536
If you already have this
localizations in your app,


109
00:05:48,026 --> 00:05:50,656
all you need to do
is link against iOS 9


110
00:05:51,036 --> 00:05:52,696
and test your apps, make sure


111
00:05:52,696 --> 00:05:55,266
that your custom layout
works as expected.


112
00:05:56,946 --> 00:05:59,526
However, if you are
adding this localizations


113
00:05:59,526 --> 00:06:01,516
for the first time,
so we recommend


114
00:06:01,516 --> 00:06:04,866
that you move your
storyboards to base approach


115
00:06:04,866 --> 00:06:08,216
with auto layout and when
you add the localizations,


116
00:06:08,396 --> 00:06:12,456
XCode with create basically
strings fast for you


117
00:06:12,566 --> 00:06:15,236
so you can export them,
send them to translations.


118
00:06:15,426 --> 00:06:18,836
When you get them back, you
can import them via XCode again


119
00:06:19,256 --> 00:06:22,426
and when you run your app
at run time, you will see


120
00:06:22,426 --> 00:06:25,816
that your translation is
integrated automatically as well


121
00:06:25,816 --> 00:06:27,726
as your layout is flipped.


122
00:06:28,936 --> 00:06:31,046
So now let's talk about testing.


123
00:06:31,626 --> 00:06:36,716
So XCode makes it so easy for
you to test right-to-left layout


124
00:06:36,716 --> 00:06:39,006
without even having
the localizations


125
00:06:39,006 --> 00:06:40,666
or integrating the translations.


126
00:06:41,066 --> 00:06:42,816
So if you go to XCode scheme


127
00:06:43,086 --> 00:06:46,236
and you change your application
language from system language


128
00:06:46,236 --> 00:06:48,166
to right-to-left to do language,


129
00:06:48,166 --> 00:06:50,506
that will simulate a
right-to-left environment


130
00:06:50,506 --> 00:06:53,466
for you and you will have
an idea if your app is ready


131
00:06:53,586 --> 00:06:55,816
to ship or not with
right to left.


132
00:06:56,436 --> 00:06:59,096
And to show you, all what
we just talked about now.


133
00:06:59,096 --> 00:07:01,736
I am going to call my
colleague Aaltan Ahmad


134
00:07:01,736 --> 00:07:03,056
on stage to give you a demo.


135
00:07:15,506 --> 00:07:17,296
>> AALTAN AHMAD:
Great, thank you, Sara.


136
00:07:17,456 --> 00:07:23,296
I am going to show you an
example of an app that I wrote,


137
00:07:23,406 --> 00:07:26,106
a simple recipes app
that I wrote that I want


138
00:07:26,106 --> 00:07:28,526
to add a right-to-left
localization for


139
00:07:28,526 --> 00:07:30,556
and I will show you
how easy that can be


140
00:07:31,216 --> 00:07:34,196
with the new stuff we
have added to iOS 9.


141
00:07:34,286 --> 00:07:35,406
Here is the app.


142
00:07:35,406 --> 00:07:37,436
It's pretty straight forward.


143
00:07:37,506 --> 00:07:39,986
There is a table view,
a tab bar at the bottom.


144
00:07:40,596 --> 00:07:43,136
If we tap one of the
cells we get taken


145
00:07:43,136 --> 00:07:44,746
to the details view
for the recipe.


146
00:07:45,026 --> 00:07:47,566
Here we have some custom
labels and stuff like that laid


147
00:07:47,566 --> 00:07:51,046
out using auto layout
and a collection view


148
00:07:51,046 --> 00:07:54,756
to show off some pictures of
the recipe that the user is


149
00:07:54,756 --> 00:07:56,326
about to make hopefully.


150
00:07:57,896 --> 00:08:04,546
So now that we are ready to add
a right-to-left localization


151
00:08:04,546 --> 00:08:06,926
to our app we actually want to
see what it looks like first,


152
00:08:06,926 --> 00:08:10,046
before even integrating any of
the translations, or doing any


153
00:08:10,046 --> 00:08:12,056
of that work, we want to
see what our app looks


154
00:08:12,056 --> 00:08:14,006
like with the new
changes we have added.


155
00:08:14,816 --> 00:08:17,866
To do that as Sara mentioned I
will go to the edit screen menu


156
00:08:17,986 --> 00:08:22,766
in XCode and from the
application language drop-down,


157
00:08:22,806 --> 00:08:25,236
will select right-to-left
pseudolanguage.


158
00:08:25,876 --> 00:08:29,496
This basically has the effect
of bringing in those UI changes


159
00:08:29,496 --> 00:08:31,206
without loading any
of the translations.


160
00:08:31,656 --> 00:08:33,836
And it has the added bonus


161
00:08:33,836 --> 00:08:36,716
of if I'm not a native
right-to-left language speaker I


162
00:08:36,716 --> 00:08:39,706
can see my app in English
with the right-to-left UI


163
00:08:39,706 --> 00:08:41,806
and not need to learn
those languages


164
00:08:41,806 --> 00:08:45,486
or have a native review
before I do any translations.


165
00:08:45,866 --> 00:08:50,526
So I'm going to close that
and I will run the app again.


166
00:08:51,376 --> 00:08:51,786
That's it.


167
00:08:51,786 --> 00:08:56,056
So without writing a single line
of code, I have introduced all


168
00:08:56,056 --> 00:08:57,566
of these changes into
my app and I can see


169
00:08:57,566 --> 00:08:58,886
that things look great.


170
00:08:59,376 --> 00:09:04,096
So let's go through our app
and see what changes we got.


171
00:09:04,096 --> 00:09:07,006
So because I was using a
standard table view cell type,


172
00:09:07,736 --> 00:09:11,116
I, the text label is
over on the right side.


173
00:09:11,706 --> 00:09:14,506
The Chevron is on the left
side and points to the left.


174
00:09:14,956 --> 00:09:16,706
Even the tab bar at
the bottom is flipped.


175
00:09:16,706 --> 00:09:19,846
So the first tab is now
on the right-most side


176
00:09:19,986 --> 00:09:21,496
as a right-to-left
user would expect.


177
00:09:22,186 --> 00:09:26,056
If you look at the navigation
bar, the navigation button


178
00:09:26,056 --> 00:09:27,766
that was on the right side
is it now flipped over.


179
00:09:27,766 --> 00:09:29,896
And if I tap on one
of the cells,


180
00:09:30,266 --> 00:09:32,226
I can see that because
I was using auto layout,


181
00:09:32,226 --> 00:09:33,666
with leading-to-trailing
constraints,


182
00:09:33,976 --> 00:09:37,136
that entire UI is flipped
along with the text alignments.


183
00:09:37,806 --> 00:09:40,946
The cool thing here to notice
is that the collection view --


184
00:09:40,946 --> 00:09:42,726
because I was using a
stock collection view


185
00:09:42,726 --> 00:09:46,156
with the default collection view
flow layout -- has also flipped.


186
00:09:46,156 --> 00:09:48,506
So the first picture is
now on the right side


187
00:09:48,506 --> 00:09:52,706
and the subsequent items
follow to the left.


188
00:09:53,136 --> 00:09:55,846
As Sara pointed out, the
navigation is also reversed.


189
00:09:55,846 --> 00:09:59,096
If I click this back button,
you can see it takes me,


190
00:09:59,416 --> 00:10:01,826
the navigation comes over from
the right edge, and in fact,


191
00:10:02,206 --> 00:10:05,166
if we try to swipe, we
see the same effect.


192
00:10:06,036 --> 00:10:06,916
So, great.


193
00:10:06,916 --> 00:10:10,036
I have checked out my app with
these new right-to-left changes


194
00:10:10,036 --> 00:10:12,026
and I have seen it looks
great and I'm ready


195
00:10:12,026 --> 00:10:13,276
to add the translations.


196
00:10:13,596 --> 00:10:15,316
So let's add the translations


197
00:10:15,316 --> 00:10:17,386
and see what the
process looks like.


198
00:10:17,386 --> 00:10:20,316
So, I am going to
select my project,


199
00:10:20,316 --> 00:10:23,516
in the project navigator, I
will head to the editor men,


200
00:10:23,516 --> 00:10:26,456
and here you can see there
is a few localization-related


201
00:10:26,456 --> 00:10:29,176
options, so I will go
to add localization


202
00:10:29,426 --> 00:10:30,496
and I will pick Arabic.


203
00:10:31,606 --> 00:10:36,276
So XCode presents me with a
dialogue and it does its thing.


204
00:10:36,276 --> 00:10:40,156
This basically creates the
localizable resource files


205
00:10:40,156 --> 00:10:42,646
that I need to have translated.


206
00:10:43,606 --> 00:10:47,796
The next step is to
actually export the strings


207
00:10:47,796 --> 00:10:50,416
from my project, so we go
back to the editor menu


208
00:10:50,416 --> 00:10:51,926
and hit export for localization.


209
00:10:52,356 --> 00:10:54,206
XCode asks me where
I want to do that.


210
00:10:54,206 --> 00:10:57,346
I select the desk
top, and hit save.


211
00:10:58,196 --> 00:11:01,976
XCode has now taken the all of
the strings from my project,


212
00:11:02,306 --> 00:11:04,196
packaged them up
into an XLIFF file


213
00:11:04,236 --> 00:11:07,376
which is a common file format
for software translations,


214
00:11:07,656 --> 00:11:09,036
and put that file on my desktop.


215
00:11:09,666 --> 00:11:14,236
I can take that file and send
it to a translator, who will go


216
00:11:14,356 --> 00:11:16,716
and make the correct
translations for me


217
00:11:16,716 --> 00:11:18,896
and send me back a
translated XLIFF file.


218
00:11:20,046 --> 00:11:24,406
So very sweet, the
translator, they do the work.


219
00:11:25,726 --> 00:11:27,246
I'm ready to import
the localizations,


220
00:11:27,246 --> 00:11:29,886
I go back to editor,
import localizations,


221
00:11:30,866 --> 00:11:34,286
go to my translated XLIFF
folder, and here is my Arabic


222
00:11:34,286 --> 00:11:37,566
or XLIFF with the
translations, hit Enter.


223
00:11:38,616 --> 00:11:42,776
XCode goes and takes all
of those translations


224
00:11:42,776 --> 00:11:44,126
and integrates them
into my project.


225
00:11:45,136 --> 00:11:49,806
And now we have both the UI, and
the translations ready to go.


226
00:11:51,096 --> 00:11:55,006
So final step, I'm going to go
back to the edit scheme menu,


227
00:11:55,006 --> 00:11:56,836
and this time instead


228
00:11:56,836 --> 00:11:59,866
of right-to-left pseudolanguage
I will select Arabic,


229
00:12:00,176 --> 00:12:02,136
which shows up because I
wrote the localization.


230
00:12:04,616 --> 00:12:10,786
Close. Run the app again.


231
00:12:10,946 --> 00:12:11,656
So there you have it.


232
00:12:12,006 --> 00:12:13,906
Now, I have my translated
strings,


233
00:12:13,906 --> 00:12:16,346
my navigation controller
title is translated.


234
00:12:16,746 --> 00:12:20,516
My tab bar items are also
translated into Arabic


235
00:12:20,516 --> 00:12:23,276
as the user would
expect, and I'm able


236
00:12:23,276 --> 00:12:27,526
to offer a complete
right-to-left user experience


237
00:12:27,526 --> 00:12:29,166
for my Arabic-speaking
customers,


238
00:12:29,506 --> 00:12:31,306
and in fact the bonus
item here is


239
00:12:31,306 --> 00:12:35,116
because I was using date
component formatters


240
00:12:35,646 --> 00:12:38,976
to format my prep time
and cook time durations,


241
00:12:39,146 --> 00:12:42,406
I actually get localized
versions of those as well.


242
00:12:42,406 --> 00:12:46,236
So shameless plug for using
number and date formatters.


243
00:12:46,696 --> 00:12:48,626
And that's it.


244
00:12:48,626 --> 00:12:50,716
That's how easy it can
be to bring your app,


245
00:12:50,716 --> 00:12:53,736
your existing right-to-left--
, existing left-to-right apps


246
00:12:53,796 --> 00:12:55,196
over to right-to-left.


247
00:12:55,326 --> 00:12:56,456
To talk to you a little bit more


248
00:12:56,456 --> 00:12:58,936
about how you can bring
your custom UI over,


249
00:12:59,296 --> 00:13:00,546
I will hand it over to Paul.


250
00:13:01,516 --> 00:13:10,586
[ Applause ]


251
00:13:11,086 --> 00:13:13,556
>> PAUL BOROKHOV: So as you
just saw from Sara and Aaltan,


252
00:13:13,556 --> 00:13:17,086
if you are using stock UIKit
controls it is very easy for you


253
00:13:17,086 --> 00:13:18,866
to add a right-to-left
localization


254
00:13:18,866 --> 00:13:19,616
to your application.


255
00:13:19,966 --> 00:13:22,546
But what if you have something
a little bit more complex?


256
00:13:23,426 --> 00:13:26,616
First, before we jump in, I just
want to go over some API changes


257
00:13:26,616 --> 00:13:29,176
that we have made, if you
are customizing UI controls,


258
00:13:29,456 --> 00:13:30,666
that make it easier for you


259
00:13:30,666 --> 00:13:32,136
to support right-to-left
localizations.


260
00:13:32,746 --> 00:13:36,216
If you are using UI text
fields, left view, right view,


261
00:13:36,316 --> 00:13:38,896
left view mode and left view
mode are automatically mirrored


262
00:13:38,896 --> 00:13:40,886
for you in right to left, so you
don't need to do anything else.


263
00:13:41,316 --> 00:13:44,056
The only thing to be aware of
is that rect for bounds methods,


264
00:13:44,056 --> 00:13:44,966
they'll stay unchanged.


265
00:13:46,576 --> 00:13:49,266
For table views if you are
setting separatorInsets,


266
00:13:49,616 --> 00:13:51,666
the left and right measurements
will automatically be flipped


267
00:13:51,666 --> 00:13:53,906
for you, with no
additional work on your part.


268
00:13:55,316 --> 00:13:58,156
If you are using a
slider, the minimum


269
00:13:58,156 --> 00:14:00,766
and maximum value images are
automatically flipped for you,


270
00:14:00,766 --> 00:14:02,216
because in a right-to-left
context,


271
00:14:02,216 --> 00:14:03,806
the minimum of a
slider is on the right.


272
00:14:04,946 --> 00:14:07,946
The only thing you need to
be aware of is that the rect


273
00:14:07,946 --> 00:14:09,906
for bounds methods,
while they are flipped,


274
00:14:10,016 --> 00:14:13,086
if you are customizing
the offsets on the x-axis,


275
00:14:13,086 --> 00:14:15,506
you'll need to make sure
those are properly accounting


276
00:14:15,506 --> 00:14:17,926
for right to left, if you
are running in that context.


277
00:14:18,806 --> 00:14:21,666
And finally for a navigation
bar like you saw in the demo,


278
00:14:22,326 --> 00:14:25,866
we are flipping left bar button
items and right bar button items


279
00:14:25,866 --> 00:14:29,586
for you automatically, but if
you are adding subviews outside


280
00:14:29,586 --> 00:14:31,696
of those APIs, you
will want to make sure


281
00:14:31,696 --> 00:14:33,016
that those are properly
positioned,


282
00:14:33,016 --> 00:14:35,766
as otherwise you are going
to have overlapping content.


283
00:14:36,576 --> 00:14:40,046
So let's talk about some
different types of custom UI


284
00:14:40,046 --> 00:14:41,496
that you might have on
your application and how


285
00:14:41,496 --> 00:14:42,446
to handle those correctly.


286
00:14:42,966 --> 00:14:45,286
So like you saw earlier,
standard cell types will flip


287
00:14:45,286 --> 00:14:47,246
for you automatically with
no additional work needed.


288
00:14:47,856 --> 00:14:49,946
What that means is that,
if you have custom layouts,


289
00:14:50,016 --> 00:14:51,746
you will want to make sure
those are flipped as well,


290
00:14:52,096 --> 00:14:53,786
to be consistent with
the rest of the OS,


291
00:14:54,096 --> 00:14:56,456
as well as potentially,
other table view cell types


292
00:14:56,456 --> 00:14:57,496
in your own application.


293
00:14:57,956 --> 00:15:01,326
You can of course do this by
simply mirroring the frames


294
00:15:01,416 --> 00:15:04,086
in your layout, but the
recommendation that we give is


295
00:15:04,086 --> 00:15:05,736
that you simply use
auto layout with leading


296
00:15:05,736 --> 00:15:08,386
and trailing constraints because
this requires no additional work


297
00:15:08,386 --> 00:15:11,066
on your part, and you can
have the exact same interface


298
00:15:11,066 --> 00:15:14,066
and code handling both left
to right and right to left.


299
00:15:14,836 --> 00:15:17,056
The story is quite similar
for collection views.


300
00:15:17,476 --> 00:15:18,626
So, like we saw in the demo,


301
00:15:18,626 --> 00:15:21,166
collection vew flow layout
automatically supports right


302
00:15:21,166 --> 00:15:23,026
to left and just
reorders the items


303
00:15:23,026 --> 00:15:24,046
to flow from right to left.


304
00:15:24,776 --> 00:15:25,586
What that means if that


305
00:15:25,586 --> 00:15:28,206
if you are doing a custom
collection view layout you will


306
00:15:28,206 --> 00:15:30,926
want to make sure it's properly
flipped on the x-axis as well.


307
00:15:31,596 --> 00:15:34,956
Generally, what we recommend
today is you subclass collection


308
00:15:34,956 --> 00:15:36,106
view flow layout instead


309
00:15:36,106 --> 00:15:38,486
of writing your own
layout code from scratch.


310
00:15:39,256 --> 00:15:41,756
And there is actually a session
that will happen tomorrow


311
00:15:41,756 --> 00:15:44,386
in the afternoon that talks
about how to do this well,


312
00:15:44,386 --> 00:15:46,606
as well as other
customizations you may want


313
00:15:46,606 --> 00:15:47,416
to do in Cocoa Touch.


314
00:15:48,026 --> 00:15:51,996
Now, we have said the
word auto layout a lot


315
00:15:51,996 --> 00:15:53,996
of times already
throughout this presentation,


316
00:15:53,996 --> 00:15:55,806
but maybe you are not
familiar with this technology.


317
00:15:56,436 --> 00:16:00,126
So Auto Layout is a way to
position elements in your UI,


318
00:16:00,376 --> 00:16:02,576
instead of using frames,
using a set of constraints.


319
00:16:02,886 --> 00:16:06,966
It's been available since iOS 6
it makes it much easier for you


320
00:16:06,966 --> 00:16:10,766
to support different screen
sizes both iPhone and iPad,


321
00:16:10,886 --> 00:16:12,556
as well as different
size classes.


322
00:16:13,046 --> 00:16:14,966
With the new split-view
multitasking,


323
00:16:15,226 --> 00:16:18,606
it makes it that much easier to
make your application compatible


324
00:16:18,606 --> 00:16:19,596
with this new technology.


325
00:16:20,906 --> 00:16:22,896
Finally, even before
right to left,


326
00:16:23,466 --> 00:16:25,136
Auto Layout makes
it easier for you


327
00:16:25,226 --> 00:16:26,966
to support additional
localizations


328
00:16:27,326 --> 00:16:29,266
because once you have a
good set of constraints,


329
00:16:29,596 --> 00:16:31,556
adding a new localization
is just a matter


330
00:16:31,556 --> 00:16:33,496
of translating strings,
and you don't need


331
00:16:33,496 --> 00:16:35,836
to write any special code to
properly handle the layout.


332
00:16:35,836 --> 00:16:38,836
If these are the constraints
that I have in XCode,


333
00:16:39,596 --> 00:16:41,566
it looks exactly the same
in English, of course.


334
00:16:42,226 --> 00:16:44,216
When I'm running in Russian
is might look like this,


335
00:16:44,656 --> 00:16:46,846
and if I go and decide
to add a localization


336
00:16:46,846 --> 00:16:49,316
for a language that's double
the length of the English one,


337
00:16:49,566 --> 00:16:50,836
I don't need to do
anything extra,


338
00:16:50,836 --> 00:16:52,426
because the constraints
are handling all


339
00:16:52,426 --> 00:16:53,886
of the positioning
of the UI for me.


340
00:16:54,506 --> 00:16:57,586
Today there is one more
reason for right to left.


341
00:16:58,616 --> 00:17:03,166
Now, your layout will also
just automatically flip,


342
00:17:03,166 --> 00:17:04,705
and you don't need
to do anything extra.


343
00:17:05,256 --> 00:17:07,896
Now, you can use auto
layout both in storyboards,


344
00:17:08,236 --> 00:17:10,786
as well as in code, as well
as a combination of the two.


345
00:17:10,976 --> 00:17:13,596
So you can have outlets to your
constraints and storyboard,


346
00:17:13,906 --> 00:17:16,616
and then manipulate them
programmatically when you need


347
00:17:16,616 --> 00:17:20,376
to change your UI
for some reason.


348
00:17:20,556 --> 00:17:22,776
So we have talked about
leading and trailing.


349
00:17:22,776 --> 00:17:24,715
Again, maybe this is something
you are not familiar with.


350
00:17:25,425 --> 00:17:27,796
Basically if you have
two labels side by side


351
00:17:28,185 --> 00:17:29,656
and you have horizontal
constrains


352
00:17:29,656 --> 00:17:32,436
between them you can specify
them either as left to right


353
00:17:32,746 --> 00:17:33,726
or leading to trailing.


354
00:17:34,086 --> 00:17:36,066
The difference is that
left to right stays left


355
00:17:36,066 --> 00:17:36,966
to right all of the time.


356
00:17:37,576 --> 00:17:40,446
Leading to trailing on the other
hand, looks like left to right


357
00:17:40,446 --> 00:17:41,766
in a left to right localization,


358
00:17:42,006 --> 00:17:44,296
but it will actually
mirror your UI and layout


359
00:17:44,516 --> 00:17:45,786
in a right-to-left localization.


360
00:17:47,076 --> 00:17:49,056
If you are creating
constraints in storyboards,


361
00:17:49,326 --> 00:17:51,686
when you create horizontal
constraints by the default,


362
00:17:52,096 --> 00:17:54,156
they will already be
leading to trailing


363
00:17:54,156 --> 00:17:55,446
so you don't need
to do anything else.


364
00:17:56,836 --> 00:17:59,066
Similarly if you are
creating constraints in code


365
00:17:59,066 --> 00:18:00,786
and you are using the
visual format language,


366
00:18:01,196 --> 00:18:03,636
there again the default for
horizontal constraints is going


367
00:18:03,636 --> 00:18:04,576
to be leading to trailing.


368
00:18:05,046 --> 00:18:07,726
However, if you are creating
constraints explicitly,


369
00:18:08,126 --> 00:18:10,826
or using the new layout
anchors API in iOS 9,


370
00:18:11,406 --> 00:18:12,426
there you will want to make sure


371
00:18:12,426 --> 00:18:14,336
that you are selecting
the correct attribute


372
00:18:14,336 --> 00:18:18,196
when you are creating
your constraints.


373
00:18:18,196 --> 00:18:21,696
Animations, as you saw in the
demos, are flipped for all


374
00:18:21,696 --> 00:18:22,616
of the stock controls.


375
00:18:22,966 --> 00:18:25,226
What that means is that if
you have custom animation


376
00:18:25,226 --> 00:18:26,616
in your UI, you will want


377
00:18:26,616 --> 00:18:28,276
to make sure that's
properly flipped as well.


378
00:18:28,846 --> 00:18:30,976
Again, of course, you can
use frames if you want,


379
00:18:31,466 --> 00:18:35,686
but the recommendation that we
have is that you use Auto Layout


380
00:18:35,686 --> 00:18:37,286
with leading and trailing
constraints instead,


381
00:18:37,286 --> 00:18:40,506
and simply change the constant
value of those constraints,


382
00:18:40,726 --> 00:18:42,796
which will automatically do
the right thing for both left


383
00:18:42,796 --> 00:18:43,726
to right and right to left


384
00:18:44,016 --> 00:18:45,436
without requiring
any additional code.


385
00:18:46,236 --> 00:18:47,926
Here is an example of
how this would look.


386
00:18:48,466 --> 00:18:51,276
Let's say I want to
change the constant value


387
00:18:51,276 --> 00:18:52,286
of one of my constraints.


388
00:18:53,076 --> 00:18:54,156
I have a duration here.


389
00:18:54,646 --> 00:18:56,746
I will change the offset
to a different value.


390
00:18:57,676 --> 00:19:00,116
Before doing the animation,
I call layoutIfNeeded,


391
00:19:00,116 --> 00:19:01,206
to make sure that the frames are


392
00:19:01,206 --> 00:19:02,546
in the correct position
to begin with.


393
00:19:03,406 --> 00:19:05,486
Then I call an implicit
animation block,


394
00:19:05,486 --> 00:19:08,166
inside which I change
the actual constant value


395
00:19:08,166 --> 00:19:10,886
of the constraint, and
call layoutIfNeeded again.


396
00:19:10,886 --> 00:19:12,096
This will update the frames


397
00:19:12,396 --> 00:19:14,626
and because it's inside the
implicit animation block,


398
00:19:14,626 --> 00:19:16,026
it will also animate
that change.


399
00:19:16,426 --> 00:19:19,286
You will notice here that there
is no special casing for right


400
00:19:19,286 --> 00:19:22,486
to left, or left to right,
it's just a single set of code


401
00:19:22,486 --> 00:19:24,346
that works perfectly
in both contexts.


402
00:19:24,346 --> 00:19:27,526
Now, let's talk about gestures.


403
00:19:27,566 --> 00:19:30,616
Now, like you saw again for
table views and for navigation,


404
00:19:30,616 --> 00:19:31,976
we flip the standard gestures.


405
00:19:32,406 --> 00:19:36,166
However, the gesture recognizer
API itself remains unchanged.


406
00:19:36,396 --> 00:19:38,646
The reason for that is
because gesture recognizers


407
00:19:38,646 --> 00:19:40,476
on their own are
fairly abstract,


408
00:19:40,476 --> 00:19:42,596
and at the framework
level, we have no way


409
00:19:42,596 --> 00:19:45,086
of knowing what your using
the gesture recognizer for.


410
00:19:46,036 --> 00:19:49,876
So what that means for you as a
developer, is that you just need


411
00:19:49,876 --> 00:19:52,086
to be aware of when you are
using gesture recognizers,


412
00:19:52,086 --> 00:19:54,066
and when you are
responding to gesture events,


413
00:19:54,786 --> 00:19:56,346
what you are actually
using them for.


414
00:19:57,326 --> 00:19:59,486
So, for example, if you are
using your gesture recognizer


415
00:19:59,776 --> 00:20:02,786
to draw on the screen, you
will want to keep that as is


416
00:20:02,856 --> 00:20:03,556
because speakers


417
00:20:03,556 --> 00:20:05,406
of right-to-left languages
don't draw backwards.


418
00:20:06,276 --> 00:20:08,966
However, if you have a
custom gesture recognizer


419
00:20:08,966 --> 00:20:11,386
for your table view cells,
for example, you will want


420
00:20:11,386 --> 00:20:12,876
to make sure you flip
that because the layout


421
00:20:12,876 --> 00:20:16,366
of the table view style
has been flipped as well.


422
00:20:16,606 --> 00:20:20,836
Similarly if you are
using navigation gestures,


423
00:20:20,836 --> 00:20:22,946
you will want to flip those,
since like we saw earlier,


424
00:20:22,946 --> 00:20:24,576
back and forward are
actually reversed.


425
00:20:25,696 --> 00:20:27,006
The main thing to
remember here is


426
00:20:27,006 --> 00:20:29,806
that no matter what you are
doing you will want to make sure


427
00:20:29,806 --> 00:20:32,946
that the gesture tracks the UI
that's under it appropriately,


428
00:20:33,196 --> 00:20:35,936
and you don't get a situation
where you are swiping from left


429
00:20:35,936 --> 00:20:37,826
to right but the UI
moves from right to left,


430
00:20:37,866 --> 00:20:39,086
because that would
be very confusing.


431
00:20:39,756 --> 00:20:42,806
If you use Auto Layout this
will make your job much easier.


432
00:20:42,806 --> 00:20:45,606
I would like now to invite
Aaltan back up on stage


433
00:20:45,606 --> 00:20:47,566
to give you a demo of the stuff
that we just talked about.


434
00:20:48,516 --> 00:20:53,986
[ Applause ]


435
00:20:54,486 --> 00:20:54,936
>> AALTAN AHMAD: Thanks, Paul.


436
00:20:56,736 --> 00:21:02,196
So while Paul was talking,
I thought a little bit


437
00:21:02,196 --> 00:21:04,726
about my app and I
decided that I wanted


438
00:21:05,866 --> 00:21:08,676
to add some more custom UI.


439
00:21:09,266 --> 00:21:14,196
So I went ahead and created
a cool custom table view cell


440
00:21:14,196 --> 00:21:16,236
subclass that I laid
out using Auto Layout.


441
00:21:16,566 --> 00:21:17,536
It's pretty straight forward.


442
00:21:17,536 --> 00:21:20,406
There is some more informative
text labels in the row


443
00:21:20,716 --> 00:21:23,076
and there's a nice image so
the user can see a picture


444
00:21:23,076 --> 00:21:24,146
of what they are about to cook.


445
00:21:24,226 --> 00:21:29,336
There is also this cool little
favorites view on the left side


446
00:21:29,336 --> 00:21:31,986
that the user can drag out
by swiping across the cell,


447
00:21:32,316 --> 00:21:35,906
similar to the stock
swipeToDelete gesture


448
00:21:35,906 --> 00:21:37,576
that we have on table
view cells right now.


449
00:21:38,086 --> 00:21:41,676
If they pull far enough, a
little star appears on top


450
00:21:41,676 --> 00:21:43,066
of the image in order
to show them


451
00:21:43,066 --> 00:21:45,516
that they favorited this recipe.


452
00:21:46,816 --> 00:21:49,406
So let's look at what this looks


453
00:21:49,406 --> 00:21:52,566
like in left to right,
in English.


454
00:21:53,126 --> 00:21:58,626
So, great, my app looks
like lot more vibrant


455
00:21:58,626 --> 00:22:01,746
and inviting right now,
so there is a picture,


456
00:22:02,136 --> 00:22:07,416
there's some more text labels,
and in fact, if I pull the cell


457
00:22:07,416 --> 00:22:10,336
out far enough, the
favorite view is revealed,


458
00:22:10,336 --> 00:22:14,146
and if I complete the gesture,
the little star shows up.


459
00:22:14,376 --> 00:22:18,686
Great. And while Paul was
also talking I had a chance


460
00:22:18,686 --> 00:22:21,536
to learn the entire
Hebrew language


461
00:22:21,886 --> 00:22:24,496
and add a Hebrew
localization to my app as well,


462
00:22:24,946 --> 00:22:27,606
so for this demo we are
going to be running in Hebrew


463
00:22:27,876 --> 00:22:29,566
as our right-to-left language.


464
00:22:29,906 --> 00:22:32,276
So I will go back to
the edit scheme menu,


465
00:22:32,656 --> 00:22:39,546
and this time select Hebrew,
hit enter and run the app.


466
00:22:39,806 --> 00:22:42,366
Wow! It's because I was using
auto layout with leading


467
00:22:42,366 --> 00:22:44,776
and trailing constraints,
everything just flips.


468
00:22:44,776 --> 00:22:47,086
The image is now over
on the right side.


469
00:22:47,306 --> 00:22:48,786
The text labels are
all right-aligned


470
00:22:48,786 --> 00:22:49,896
in the correct position.


471
00:22:50,236 --> 00:22:53,686
The Chevron, of course, is
stock so that stays where it is,


472
00:22:54,036 --> 00:22:57,786
and again, formatters
plug, my durations


473
00:22:57,786 --> 00:23:00,836
and numbers are correctly
localized for Hebrew.


474
00:23:01,616 --> 00:23:03,376
But we didn't look
at the custom gesture


475
00:23:03,376 --> 00:23:05,436
yet so let's check that out.


476
00:23:05,726 --> 00:23:08,486
Because the entire cell is
laid out from right to left,


477
00:23:08,826 --> 00:23:12,726
the user is also expecting that
the swipe for favorites will be


478
00:23:12,726 --> 00:23:16,846
in that direction as well,
and more so because the swipe


479
00:23:16,846 --> 00:23:18,816
to delete gesture
system-wide, is flipped.


480
00:23:19,246 --> 00:23:20,926
So they are going to
know that that comes


481
00:23:20,926 --> 00:23:21,786
over from the left edge


482
00:23:21,786 --> 00:23:23,566
and whatever your custom
gesture was they are going


483
00:23:23,566 --> 00:23:24,736
to be expecting it
from the right.


484
00:23:25,436 --> 00:23:27,976
So let's swipe in that
direction and see what happens


485
00:23:28,016 --> 00:23:31,186
for a right-to-left
user in that case.


486
00:23:31,836 --> 00:23:34,416
And you can see that things
don't work as expected.


487
00:23:34,656 --> 00:23:38,006
I swiped, but instead
of revealing that view,


488
00:23:38,006 --> 00:23:39,906
the table view cell
thought I was tapping on it,


489
00:23:40,326 --> 00:23:42,046
and instead presented
the details view.


490
00:23:42,046 --> 00:23:43,426
It doesn't make too much sense.


491
00:23:44,406 --> 00:23:46,366
And the reason this
is happening is


492
00:23:46,366 --> 00:23:49,876
because there is an implicit
assumption in my code,


493
00:23:50,226 --> 00:23:52,246
off the directionality
of that swipe.


494
00:23:52,826 --> 00:23:55,696
I'm expecting the swipe
to go from left to right.


495
00:23:56,126 --> 00:23:58,316
Or, in other words, in
a positive X direction.


496
00:23:59,236 --> 00:24:02,306
In fact, if I go and
swipe in that direction,


497
00:24:02,306 --> 00:24:04,296
you can see that the
view does reveal itself.


498
00:24:04,586 --> 00:24:07,536
However, it reveals itself
in the direction opposite


499
00:24:07,536 --> 00:24:09,676
to the direction that
I'm dragging my finger,


500
00:24:10,056 --> 00:24:12,576
and that doesn't really
make any sense to the user.


501
00:24:12,976 --> 00:24:16,106
And you really want to
avoid situations like this.


502
00:24:16,856 --> 00:24:20,126
So let's jump into the table
view cell subclass and see


503
00:24:20,126 --> 00:24:23,506
if we can figure out
what's going on here.


504
00:24:24,366 --> 00:24:26,786
So here you can see
I have two gesture


505
00:24:26,786 --> 00:24:28,236
recognizer-related methods.


506
00:24:28,236 --> 00:24:30,786
So the first is this gesture
recognizer should begin method.


507
00:24:31,416 --> 00:24:33,446
And the reason I have
to implement this is


508
00:24:33,446 --> 00:24:35,426
because like I said,
I want to support both


509
00:24:35,426 --> 00:24:38,096
that custom gesture, as well
as a stock table view gesture.


510
00:24:38,646 --> 00:24:41,506
What goes on here if the
user swipes in the direction


511
00:24:41,506 --> 00:24:44,826
of my gesture, I allow my
gesture recognizer to begin,


512
00:24:45,136 --> 00:24:47,736
and if they swipe in the
direction of the swipeToDelete,


513
00:24:47,736 --> 00:24:50,046
I don't do anything and I let
table view handle that stuff.


514
00:24:50,916 --> 00:24:53,666
So right here you can see
I have the X translation


515
00:24:53,966 --> 00:24:56,676
of the gesture recognizer and
if that translation is greater


516
00:24:56,676 --> 00:24:59,586
than zero, or left
to right, I go ahead


517
00:24:59,586 --> 00:25:00,996
and begin my gesture recognizer.


518
00:25:01,316 --> 00:25:03,716
So what we really need to do
here, is check if we are running


519
00:25:03,716 --> 00:25:07,036
in a right-to-left localization,
and if we are, we need to look


520
00:25:07,036 --> 00:25:10,126
for translation in the
opposite direction.


521
00:25:10,376 --> 00:25:13,476
In order to figure out whether
I'm running in a localization


522
00:25:13,476 --> 00:25:16,466
in a right-to-left localization
or not, I will use new API


523
00:25:16,576 --> 00:25:19,086
that we added in iOS that
Paul is actually going to talk


524
00:25:19,086 --> 00:25:21,936
about shortly, but since it's
exactly what we need right now,


525
00:25:21,936 --> 00:25:23,016
I will go ahead and use it.


526
00:25:23,066 --> 00:25:28,806
So I will declare a new constant
called isLeftToRightLayout


527
00:25:30,316 --> 00:25:33,966
And I'm going to use a new
user interface layout direction


528
00:25:33,966 --> 00:25:38,036
for semantic content attribute,
API, that we added in iOS 9


529
00:25:38,306 --> 00:25:41,886
and I am going to parse in my
view semantic content attribute.


530
00:25:42,146 --> 00:25:45,266
This returns the resolved
layout direction, left to right


531
00:25:45,266 --> 00:25:50,096
or right to left for this view,
and if that direction comes back


532
00:25:50,096 --> 00:25:51,906
as left to right,
I know I'm running


533
00:25:51,906 --> 00:25:53,176
in a left-to-right localization.


534
00:25:54,416 --> 00:25:57,916
So next step before
checking that translation,


535
00:25:57,916 --> 00:26:00,466
I will look at my
isLeftToRight variable.


536
00:26:00,806 --> 00:26:03,346
If it's left to right,
we continue as usual.


537
00:26:04,276 --> 00:26:07,416
If it's right to left, we look
for a translation for less


538
00:26:07,416 --> 00:26:09,056
than zero or in the negative X.


539
00:26:09,556 --> 00:26:14,716
The second method here, is this
updateFavoriteButtonPosition


540
00:26:14,716 --> 00:26:15,066
method.


541
00:26:15,986 --> 00:26:19,296
So here is where we actually
manipulate the constants


542
00:26:19,296 --> 00:26:22,296
of the constraints and
show that view on screen.


543
00:26:22,296 --> 00:26:25,246
Here you can see against I have
should allow dragging favorite


544
00:26:25,246 --> 00:26:28,316
button constant that allows--


545
00:26:28,356 --> 00:26:30,396
that tells the following
code whether it should start


546
00:26:30,396 --> 00:26:33,666
revealing that view, and, again,
similar thing, we are checking


547
00:26:33,666 --> 00:26:35,256
for a positive X translation.


548
00:26:35,636 --> 00:26:38,206
Solution is also similar, we
can just pick up this check,


549
00:26:39,536 --> 00:26:46,186
bring it over here, and check
for the left to right layout,


550
00:26:46,186 --> 00:26:47,876
and check for translation


551
00:26:47,876 --> 00:26:49,756
in the opposite direction,
and right to left.


552
00:26:50,846 --> 00:26:53,986
The last bit over here is
this distancePulled variable.


553
00:26:53,986 --> 00:26:58,476
So the distancePulled
variable, or constant,


554
00:26:58,476 --> 00:27:02,666
is telling the following code
how far the user has dragged


555
00:27:02,666 --> 00:27:03,946
their finger across the cell.


556
00:27:04,346 --> 00:27:07,006
Now that we can accept a
negative translation it doesn't


557
00:27:07,006 --> 00:27:10,056
really make sense for the
distancePulled variable


558
00:27:10,056 --> 00:27:12,466
to also be negative
because it's conveying sort


559
00:27:12,466 --> 00:27:15,736
of an absolute value, so to
rectify that, we are going


560
00:27:15,736 --> 00:27:19,496
to just take the absolute value
of the translation as well.


561
00:27:19,866 --> 00:27:21,406
That solved that problem for us.


562
00:27:22,166 --> 00:27:25,066
With those few changes
let's run the app again.


563
00:27:25,566 --> 00:27:29,486
And see where that got us.


564
00:27:29,716 --> 00:27:31,956
Okay. Things look
good here still.


565
00:27:32,266 --> 00:27:37,576
Now, if I drag my finger
over, things work as a right


566
00:27:37,576 --> 00:27:38,696
to left user would expect.


567
00:27:38,896 --> 00:27:40,406
So really that's it,
you really just need


568
00:27:40,406 --> 00:27:42,746
to make sure you are
watching out for these kinds


569
00:27:42,746 --> 00:27:45,466
of assumptions in your code,
and really just accommodating


570
00:27:45,466 --> 00:27:47,756
for the right-to-left keys,
which oftentimes turns


571
00:27:47,756 --> 00:27:50,106
out to be something that's
really just that simple.


572
00:27:50,556 --> 00:27:55,666
And that's all it takes to bring
your custom gestures and UI


573
00:27:55,666 --> 00:27:56,506
over to right to left.


574
00:27:56,506 --> 00:27:59,216
To talk to you a little bit
more about some exceptions


575
00:27:59,216 --> 00:28:01,416
and best practices,
back over to Paul.


576
00:28:02,516 --> 00:28:07,686
[ Applause ]


577
00:28:08,186 --> 00:28:11,366
>> PAUL BOROKHOV:
Alright, Thanks Aaltan.


578
00:28:12,316 --> 00:28:14,276
So let's talk about
some exceptions and some


579
00:28:14,276 --> 00:28:16,426
of the new API that we
have introduced in iOS 9.


580
00:28:17,526 --> 00:28:18,856
One of the things we saw


581
00:28:18,856 --> 00:28:21,926
in Aaltan's demo was the
semantic content attribute API


582
00:28:22,056 --> 00:28:23,846
so before we get
into that let's talk


583
00:28:23,846 --> 00:28:25,556
about what semantic
content attributes are.


584
00:28:26,536 --> 00:28:29,576
The semantic content attribute
is a new property on UI view,


585
00:28:30,306 --> 00:28:34,236
and it's there to make sure that
all UI looks correct in right


586
00:28:34,236 --> 00:28:37,986
to left and left to right
because in some cases not all


587
00:28:37,986 --> 00:28:40,106
of the UI flips and
we need to make sure


588
00:28:40,106 --> 00:28:42,346
that we have a way
to specify that.


589
00:28:42,786 --> 00:28:44,586
Now, the default
semantic content attribute


590
00:28:44,586 --> 00:28:45,506
is unspecified.


591
00:28:46,716 --> 00:28:49,316
This will flip in a
right-to-left localization


592
00:28:49,316 --> 00:28:51,826
and stay as is in a left
to right localization.


593
00:28:52,766 --> 00:28:55,366
But we have some
additional attribute types


594
00:28:55,406 --> 00:28:57,626
that you can set, that
will prevent the flipping


595
00:28:57,626 --> 00:29:01,046
from happening, for a number of
historical and other reasons,


596
00:29:01,326 --> 00:29:03,536
but they manage the expectations
of right-to-left users.


597
00:29:04,416 --> 00:29:06,736
Finally, the resolution
of leading


598
00:29:06,736 --> 00:29:08,576
and trailing constraints
is actually based


599
00:29:08,576 --> 00:29:10,046
on the semantic content
attribute.


600
00:29:10,606 --> 00:29:12,476
So that's just something
to keep in mind.


601
00:29:13,186 --> 00:29:15,056
So the first one is playback.


602
00:29:15,606 --> 00:29:19,516
The idea here is if you have
some sort of playback control,


603
00:29:19,786 --> 00:29:22,066
you sub the semantic content
attribute of that control,


604
00:29:22,066 --> 00:29:24,076
or that group of
controls, to be playback,


605
00:29:24,076 --> 00:29:25,666
and that will keep
them left to right.


606
00:29:25,666 --> 00:29:28,806
So you can see here
in the new music app,


607
00:29:28,806 --> 00:29:32,516
we have the progress bar as
well as the playback controls,


608
00:29:32,516 --> 00:29:33,416
they stay left to right.


609
00:29:33,416 --> 00:29:34,806
They do not flip.


610
00:29:35,876 --> 00:29:37,466
The next one is spatial.


611
00:29:37,956 --> 00:29:41,356
This is for annotating controls
that correspond to some sort


612
00:29:41,356 --> 00:29:44,886
of direct UI manipulation
where maybe you have a D pad


613
00:29:44,886 --> 00:29:47,636
in your game and you
press up and it goes up.


614
00:29:47,636 --> 00:29:51,046
You press left, it goes left,
or similarly for text alignment.


615
00:29:51,396 --> 00:29:54,896
So here we have on the pages
app, a segmental control


616
00:29:54,896 --> 00:29:56,466
that lets you set the
alignment of your text.


617
00:29:56,896 --> 00:29:59,346
Left-aligned text will
still stay on the left side,


618
00:29:59,346 --> 00:30:01,306
even when running in a
right-to-left localization,


619
00:30:01,626 --> 00:30:04,286
so we keep that as is.


620
00:30:04,686 --> 00:30:07,176
Finally, for those of you
who want to be more explicit,


621
00:30:08,046 --> 00:30:09,506
we have these forceLeftToRight


622
00:30:09,506 --> 00:30:12,166
and -RightToLeftand
right-to-left attribute types,


623
00:30:12,166 --> 00:30:14,226
and they just do what you
would expect from the name.


624
00:30:14,776 --> 00:30:16,706
The forceRighToLeft one
will actually affect layout


625
00:30:16,706 --> 00:30:17,916
in a left-to-right localization.


626
00:30:17,916 --> 00:30:19,526
All the others only
have an impact


627
00:30:19,526 --> 00:30:20,616
when you are running
in right to left.


628
00:30:20,616 --> 00:30:23,656
And the only thing that I will
say about these is if you feel


629
00:30:23,656 --> 00:30:25,386
like you want to use them,
please come talk to us


630
00:30:25,386 --> 00:30:27,016
on the lab or post
on the dev forums


631
00:30:27,016 --> 00:30:29,916
to just make sure you
are doing the right thing


632
00:30:29,916 --> 00:30:32,516
and that the existing
API doesn't quite satisfy


633
00:30:32,516 --> 00:30:32,956
your needs.


634
00:30:32,956 --> 00:30:35,166
or maybe we are missing API,
there is another type we need


635
00:30:35,166 --> 00:30:37,766
to add, and you can
tell us that.


636
00:30:39,156 --> 00:30:43,316
I want to talk about some
best practices for UI and text


637
00:30:43,316 --> 00:30:45,436
when you are supporting
right to left.


638
00:30:46,016 --> 00:30:48,576
One of the things you want to
make sure you are doing all


639
00:30:48,576 --> 00:30:51,456
of the time (and like we saw in
the demos) is to use formatters.


640
00:30:51,756 --> 00:30:53,666
For Arabic this is
particularly important


641
00:30:53,666 --> 00:30:56,016
because different Arabic
speaking countries will use


642
00:30:56,016 --> 00:30:59,266
actually use different words
for the months of the year.


643
00:30:59,506 --> 00:31:01,696
So you will want to make sure
that you display those correctly


644
00:31:01,696 --> 00:31:03,536
to all of your users,
no matter what region


645
00:31:03,536 --> 00:31:05,496
or language they are using.


646
00:31:05,496 --> 00:31:06,856
In fact, there is a What's New


647
00:31:06,856 --> 00:31:09,176
in Internationalization talk
tomorrow, bright and early


648
00:31:09,176 --> 00:31:12,006
at 9:00 in the morning, where
they will talk about all


649
00:31:12,006 --> 00:31:13,576
of the existing formatters
as well as some


650
00:31:13,576 --> 00:31:18,466
of the new formatter APIs
that are available in iOS 9.


651
00:31:18,666 --> 00:31:21,126
However, you will want to make
sure that if you have some sort


652
00:31:21,346 --> 00:31:24,506
of layout or logic
branching like we saw


653
00:31:24,506 --> 00:31:27,656
for the gesture recognizer,
you never want to use NSLocale


654
00:31:27,656 --> 00:31:30,666
or NSbundle or NSFormatter
for determining that.


655
00:31:31,776 --> 00:31:33,626
So perhaps you have
seen code like this.


656
00:31:34,226 --> 00:31:35,276
You want to figure
out if you are running


657
00:31:35,276 --> 00:31:36,576
in a right-to-left localization.


658
00:31:36,576 --> 00:31:38,996
You look up the preferred
languages, you pick the top one


659
00:31:39,486 --> 00:31:41,626
and if its writing direction
is right to left, boom!


660
00:31:42,736 --> 00:31:44,576
This is something that you
literally never want to do.


661
00:31:45,146 --> 00:31:47,366
There is many ways
that this can break.


662
00:31:48,136 --> 00:31:50,296
It's just not what
you want to be doing.


663
00:31:50,296 --> 00:31:52,466
If you want to find out that
your application is running


664
00:31:52,466 --> 00:31:52,926
right to left.


665
00:31:53,596 --> 00:31:56,326
Instead, you'll want to use
this new API we saw in the demo.


666
00:31:56,716 --> 00:31:59,236
User interface layout direction
for semantic content attribute,


667
00:31:59,816 --> 00:32:02,516
and pass in the semantic
content attribute of the view


668
00:32:02,516 --> 00:32:04,706
that you are interested
in figuring


669
00:32:04,706 --> 00:32:05,886
out how it's being laid out.


670
00:32:05,886 --> 00:32:09,646
And that will give you either
left to right or right to left


671
00:32:09,646 --> 00:32:10,566
as the UI layout direction.


672
00:32:11,116 --> 00:32:14,146
Of course, the converse is that
you shouldn't be using this


673
00:32:14,146 --> 00:32:15,926
for regional or format settings.


674
00:32:16,866 --> 00:32:20,356
Now, here is a sample that
matches sort of the intent


675
00:32:20,356 --> 00:32:22,206
of the previous slide
but is actually correct.


676
00:32:22,616 --> 00:32:24,596
We get the semantic
attribute of the view,


677
00:32:25,186 --> 00:32:27,876
we ask for the layout direction,
and if that happens to be right


678
00:32:27,876 --> 00:32:31,796
to left, we do custom
logic, perhaps.


679
00:32:31,926 --> 00:32:34,176
Now, when dealing with
text, what you will want


680
00:32:34,176 --> 00:32:36,716
to do is just leave
alignment and directionalty


681
00:32:36,716 --> 00:32:38,546
at their default
values most of the time.


682
00:32:39,056 --> 00:32:42,566
So, new in iOS 9, natural
alignment is now the default


683
00:32:42,566 --> 00:32:44,896
so you don't need to do
anything to have text


684
00:32:44,896 --> 00:32:47,386
that is left-aligned in
left-to-right languages,


685
00:32:47,386 --> 00:32:49,046
and right-aligned, in
right-to-left languages.


686
00:32:50,116 --> 00:32:52,626
Similarly the base writing
direction is something you


687
00:32:52,626 --> 00:32:55,016
should never have to touch
unless you are writing a


688
00:32:55,016 --> 00:32:55,626
text editor.


689
00:32:56,016 --> 00:32:57,666
That has been the
default since iOS 7.


690
00:32:57,986 --> 00:33:01,306
For probably 99% of applications
there is no reason you should


691
00:33:01,306 --> 00:33:03,596
ever need to touch this value
and change it from default.


692
00:33:04,526 --> 00:33:09,116
Again, you don't want to use
these for layout code branching.


693
00:33:09,116 --> 00:33:11,756
Instead use the API that we
saw in the previous slide.


694
00:33:13,636 --> 00:33:17,186
Finally, I would like to talk
about images so we have new API


695
00:33:17,186 --> 00:33:19,486
and UI image called
imageflipped for right


696
00:33:19,486 --> 00:33:20,496
to left layout direction.


697
00:33:21,146 --> 00:33:23,736
What this will do is this will
horizontally flip the image


698
00:33:23,736 --> 00:33:26,076
automatically for you when you
are in a right-to-left context.


699
00:33:26,486 --> 00:33:28,006
So an image flipped


700
00:33:28,006 --> 00:33:30,086
for right-to-left layout
direction will stay as is


701
00:33:30,086 --> 00:33:32,066
in left to right, and then
flip in right to left.


702
00:33:32,596 --> 00:33:34,616
This also based on the
semantic content attribute


703
00:33:34,616 --> 00:33:36,616
of the image view that
contains the image


704
00:33:37,066 --> 00:33:40,186
and generally speaking, you
will want to use this only


705
00:33:40,186 --> 00:33:41,906
for directional images
or something


706
00:33:41,906 --> 00:33:43,906
that conveys some sort of UI.


707
00:33:44,086 --> 00:33:46,546
So people who speak
right-to-left languages they


708
00:33:46,546 --> 00:33:48,106
don't look at all their
photos in the mirror.


709
00:33:48,756 --> 00:33:52,466
So if you see errors or
Chevrons in your application,


710
00:33:52,466 --> 00:33:55,216
like for example, we have in
the Safari toolbar, for the back


711
00:33:55,216 --> 00:33:57,576
and forward buttons, you want
to make sure that those flip,


712
00:33:57,826 --> 00:33:59,026
because all


713
00:33:59,026 --> 00:34:02,826
of the directionality concepts
have flipped from right to left.


714
00:34:02,966 --> 00:34:05,826
Similarly, if you have some
sort of icons that represent UI,


715
00:34:07,006 --> 00:34:10,156
for example, a list,
so in the new maps app


716
00:34:10,156 --> 00:34:13,275
in the transit feature,
we have this icon


717
00:34:13,275 --> 00:34:16,206
that lets you see the list
of steps because that sort


718
00:34:16,206 --> 00:34:18,696
of represents the table
view, and in the table view,


719
00:34:18,696 --> 00:34:19,966
the icons are on the right side.


720
00:34:19,966 --> 00:34:21,545
You can see the icon
has been flipped,


721
00:34:22,196 --> 00:34:24,406
and more subtly we have
also flipped the person


722
00:34:24,606 --> 00:34:26,946
for the walking directions
because if we didn't,


723
00:34:26,946 --> 00:34:29,096
it would look like the person
was just walking off the edge


724
00:34:29,096 --> 00:34:30,916
of the screen, and it
wouldn't really match the rest


725
00:34:30,916 --> 00:34:31,585
of the layout file.


726
00:34:32,206 --> 00:34:35,906
So I would like to invite
Aaltan back up on stage


727
00:34:35,906 --> 00:34:37,226
to give you a quick
demo of that.


728
00:34:38,516 --> 00:34:43,545
[ Applause ]


729
00:34:44,045 --> 00:34:47,696
>> AALTAN AHMAD:
Last demo, I promise.


730
00:34:56,335 --> 00:34:56,946
All right.


731
00:34:57,216 --> 00:34:58,696
So, great!


732
00:34:58,806 --> 00:35:02,386
I just learned a lot about the
new, cool new APIs we added


733
00:35:02,386 --> 00:35:05,056
and I decided to take
the customization


734
00:35:05,056 --> 00:35:08,016
of my custom table view
cell to the next level,


735
00:35:08,376 --> 00:35:12,766
by adding a custom Chevron
that is indeed a pizza slice,


736
00:35:13,696 --> 00:35:18,706
so the pizza slice will be
directing our users to go


737
00:35:18,706 --> 00:35:19,716
on to the next screen.


738
00:35:20,216 --> 00:35:23,186
And since we are all really
familiar with the right to left


739
00:35:23,186 --> 00:35:26,066
by now, let's run our
app directly in Arabic


740
00:35:26,766 --> 00:35:29,196
without showing you what
it looks like in English,


741
00:35:29,196 --> 00:35:34,166
since we are past that point.


742
00:35:34,326 --> 00:35:38,476
Great. So because I put in that
image view with the pizza slice,


743
00:35:38,476 --> 00:35:40,546
using auto layout and leading
to trailing constraints,


744
00:35:40,806 --> 00:35:42,516
it actually is in
the correct position.


745
00:35:42,516 --> 00:35:45,336
It's over on the left side of
the cell, where a user on right


746
00:35:45,336 --> 00:35:46,326
to left would expect it.


747
00:35:46,646 --> 00:35:50,406
However, clearly you can see
that the pizza slice is pointing


748
00:35:50,406 --> 00:35:51,476
in the wrong direction.


749
00:35:52,096 --> 00:35:54,836
And this is exactly the
kind of directional image


750
00:35:54,836 --> 00:35:56,316
that Paul was talking
about earlier,


751
00:35:56,606 --> 00:35:58,576
that we can use the
image flipping API


752
00:35:58,696 --> 00:36:00,116
in order to rectify.


753
00:36:00,856 --> 00:36:03,756
So let's go back to that
table view cell subclass.


754
00:36:04,296 --> 00:36:07,466
And here you can see I have
my [unintelligible] method


755
00:36:07,466 --> 00:36:11,376
where all of those outlets, all
of my outlets will be loaded


756
00:36:12,046 --> 00:36:14,416
and ready to go, so the
first thing I'm going


757
00:36:14,416 --> 00:36:17,286
to do is get a reference
to my custom Chevron image.


758
00:36:18,336 --> 00:36:21,106
customChevronImageView.image.


759
00:36:21,606 --> 00:36:25,346
Now that I have that,
I'm going to put it back


760
00:36:25,346 --> 00:36:30,196
in the image view, except
with one small change,


761
00:36:30,196 --> 00:36:32,186
which is I'm going to
call the image flip


762
00:36:32,186 --> 00:36:33,936
for right-to-left
layout direction method


763
00:36:33,976 --> 00:36:35,376
on the UI image itself.


764
00:36:36,386 --> 00:36:38,436
And this basically
has the effect


765
00:36:38,436 --> 00:36:41,906
of leaving your image alone in
a left to right localization,


766
00:36:42,276 --> 00:36:45,266
but flipping it horizontally in
a right-to-left localization.


767
00:36:45,266 --> 00:36:46,616
And the important
thing to note here,


768
00:36:46,906 --> 00:36:50,806
is that because the method
does the right thing for you,


769
00:36:50,806 --> 00:36:53,826
you don't need to worry about
gating it around, and is it left


770
00:36:53,826 --> 00:36:57,216
to right or is it right to left
check, as I was doing earlier.


771
00:36:57,646 --> 00:36:59,826
So you can do call this
method with confidence


772
00:36:59,826 --> 00:37:01,576
in any localization,
and you can be sure


773
00:37:01,576 --> 00:37:02,646
that it will do the right thing.


774
00:37:03,666 --> 00:37:05,056
And that's it, that's
all we need to do.


775
00:37:05,656 --> 00:37:07,586
With that change, let's
run the app again.


776
00:37:10,836 --> 00:37:11,906
Pizza perfection.


777
00:37:12,176 --> 00:37:14,616
So our Chevron is
flipped [applause].


778
00:37:15,046 --> 00:37:15,816
Thank you.


779
00:37:19,246 --> 00:37:21,016
Our Chevron is flipped,
our app looks great,


780
00:37:21,066 --> 00:37:24,456
we have the translations,
custom gesture looks beautiful,


781
00:37:24,636 --> 00:37:25,466
and we are ready to go.


782
00:37:25,776 --> 00:37:28,786
That's how easy it can be to
localize your apps right to left


783
00:37:29,106 --> 00:37:32,656
and back to Sara to finish
up the session for you guys.


784
00:37:38,046 --> 00:37:39,726
>> SARA RADI: Thank you
Aaltan for the great demo.


785
00:37:39,936 --> 00:37:42,306
So just to let you know we
will be posting the demo


786
00:37:42,306 --> 00:37:45,276
that Aaltan gave us
today online soon,


787
00:37:45,336 --> 00:37:47,796
so if you missed anything during
the session, please feel free


788
00:37:47,796 --> 00:37:50,906
to download the simple
code and look at it.


789
00:37:51,526 --> 00:37:56,376
So to summarize before closing
the session, keep in mind


790
00:37:56,376 --> 00:37:58,786
when you are designing your
app for right-to-left languages


791
00:37:58,786 --> 00:38:03,256
that natives of these language
expect right-to-left UI,


792
00:38:03,256 --> 00:38:04,706
and this is a perfect
opportunity


793
00:38:04,706 --> 00:38:08,046
with the new native UIKit
support that we add it on iOS 9,


794
00:38:08,556 --> 00:38:11,576
it's a great opportunity for
you to add this localizations.


795
00:38:11,576 --> 00:38:16,166
It takes no effort, and we also
added new APIs that will make it


796
00:38:16,296 --> 00:38:21,026
so easy not only for non-native-
the native developers,


797
00:38:21,026 --> 00:38:22,966
but also for non-native
developers.


798
00:38:23,576 --> 00:38:26,416
And also it's your
opportunity to reach millions


799
00:38:26,416 --> 00:38:27,876
of users and new markets.


800
00:38:28,556 --> 00:38:34,136
And for more information, please
visit our documentation website


801
00:38:34,136 --> 00:38:36,836
at developer.Apple.com
we have documentation


802
00:38:36,836 --> 00:38:39,766
for internationalization
and also for localization


803
00:38:40,026 --> 00:38:42,866
and if you have questions, also
post them in the Dev forums.


804
00:38:44,586 --> 00:38:46,256
We also recommend that you go


805
00:38:46,256 --> 00:38:47,716
and watch these relates
sessions.


806
00:38:47,866 --> 00:38:49,356
I highly recommend
the What's New


807
00:38:49,356 --> 00:38:52,386
in Internationalization tomorrow
at 9:00 a.m. so thank you,


808
00:38:52,386 --> 00:38:56,016
thank you so much for coming
and have a great afternoon!


809
00:38:56,206 --> 00:38:56,646
Thanks!


810
00:38:58,516 --> 00:39:09,790
[ Applause ]

