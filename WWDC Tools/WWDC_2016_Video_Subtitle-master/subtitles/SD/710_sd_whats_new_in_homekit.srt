1
00:00:06,516 --> 00:00:18,500
[ Music ]


2
00:00:24,516 --> 00:00:28,546
[ Applause ]


3
00:00:29,046 --> 00:00:31,426
>> Hello, everyone.


4
00:00:32,206 --> 00:00:33,026
Thank you for coming.


5
00:00:33,326 --> 00:00:37,456
Welcome. My name is Dennis
Matthews, and I'm part


6
00:00:37,456 --> 00:00:39,746
of the HomeKit engineering
team here at Apple.


7
00:00:41,576 --> 00:00:44,686
So before we get started
with what's new in HomeKit,


8
00:00:45,416 --> 00:00:49,666
we'll spend the first couple of
minutes and talk about HomeKit,


9
00:00:49,666 --> 00:00:51,816
and I want to highlight
some of the key features


10
00:00:51,816 --> 00:00:52,796
of what makes HomeKit.


11
00:00:55,436 --> 00:00:59,396
HomeKit is a framework which
provides a rich set of API's


12
00:00:59,746 --> 00:01:03,966
that allow your applications
to talk to different classes


13
00:01:03,966 --> 00:01:05,816
of HomeKit enabled accessories.


14
00:01:06,626 --> 00:01:10,506
Your applications can use
the same API's to talk


15
00:01:10,506 --> 00:01:14,036
with accessories from
different manufacturers.


16
00:01:17,256 --> 00:01:23,876
HomeKit maintains the user's
home data in a common database.


17
00:01:24,366 --> 00:01:27,286
Now this is great
because all applications


18
00:01:27,286 --> 00:01:32,466
in the system have access
to this exact same home data


19
00:01:32,646 --> 00:01:35,656
and configuration
of the user's home.


20
00:01:37,906 --> 00:01:41,556
And if the user has multiple
devices, all of them signed


21
00:01:41,556 --> 00:01:44,386
in to the same iCloud
account, HomeKit takes care


22
00:01:44,386 --> 00:01:49,406
of synchronizing this home data
over to the different devices


23
00:01:49,406 --> 00:01:50,376
that the user may have.


24
00:01:50,746 --> 00:01:54,056
Now this is great because
without any additional set


25
00:01:54,056 --> 00:01:56,806
up on the user's part, the
user can just pick up any


26
00:01:56,806 --> 00:01:59,646
of their devices and
start communicating


27
00:01:59,646 --> 00:02:01,426
with the HomeKit accessories.


28
00:02:04,476 --> 00:02:08,746
HomeKit also supports for
sharing of a user's home.


29
00:02:09,476 --> 00:02:13,546
So a user can share their
home and allow their family


30
00:02:13,546 --> 00:02:16,676
and friends also to
control the accessories


31
00:02:16,676 --> 00:02:18,696
that the user has
set up in their home.


32
00:02:19,456 --> 00:02:21,176
Sharing is very simple.


33
00:02:21,336 --> 00:02:26,006
All that a user has to do is
invite additional users using


34
00:02:26,006 --> 00:02:30,816
their iCloud account, and once
the user accepts the invitation,


35
00:02:30,976 --> 00:02:35,086
HomeKit automatically takes
care of sharing the home data


36
00:02:35,086 --> 00:02:37,366
across to additional
devices as well


37
00:02:37,366 --> 00:02:40,046
as configuring all the
accessories in the home


38
00:02:40,326 --> 00:02:43,206
so that now the shared
users can have access


39
00:02:43,486 --> 00:02:45,236
and control these accessories.


40
00:02:46,286 --> 00:02:50,666
The owner, of course, can
also revoke this control


41
00:02:50,666 --> 00:02:55,066
at any point in time.


42
00:02:55,246 --> 00:03:00,416
HomeKit supports a common
protocol for all the accessories


43
00:03:00,416 --> 00:03:04,206
to securely communicate
with the Apple device.


44
00:03:05,576 --> 00:03:08,606
So all HomeKit accessories,
irrespective


45
00:03:08,606 --> 00:03:10,856
of their underlying
medium of communication,


46
00:03:11,226 --> 00:03:13,626
use the same common protocol.


47
00:03:14,476 --> 00:03:19,166
Now all this protocol Apple
has also defined a rich set


48
00:03:19,166 --> 00:03:23,476
of profiles which describe
many of the common accessories.


49
00:03:23,976 --> 00:03:27,436
Now with this profiles,
Siri support is built in.


50
00:03:28,396 --> 00:03:32,356
This is great and it provides
a very natural way for users


51
00:03:32,646 --> 00:03:36,156
to communicate and control their
accessories just using Siri.


52
00:03:40,636 --> 00:03:43,616
When the user is at
home, communication


53
00:03:43,616 --> 00:03:45,076
between their Apple device


54
00:03:45,076 --> 00:03:47,856
and their HomeKit enabled
accessories is direct.


55
00:03:48,646 --> 00:03:51,976
So all that a user need is their
HomeKit enabled accessories


56
00:03:52,236 --> 00:03:56,006
and their Apple device to
talk to their accessories.


57
00:03:56,496 --> 00:03:58,716
This communication
is either using Wi-Fi


58
00:03:59,096 --> 00:04:00,486
or Bluetooth low energy.


59
00:04:01,006 --> 00:04:07,916
When the user is away from
their home, remote access


60
00:04:08,086 --> 00:04:12,366
to their accessories at home
is provided via the Apple TV,


61
00:04:12,576 --> 00:04:15,036
which acts as a remote
access gateway.


62
00:04:15,816 --> 00:04:18,796
And Apple TV then securely
channels the communication


63
00:04:18,796 --> 00:04:19,935
between the user's device


64
00:04:20,185 --> 00:04:25,266
and their accessories,
which are at home.


65
00:04:25,476 --> 00:04:30,156
Security. We have built
HomeKit with security


66
00:04:30,156 --> 00:04:32,176
in mind right from day one.


67
00:04:33,496 --> 00:04:37,126
All HomeKit communications
are end-to-end secure.


68
00:04:37,896 --> 00:04:40,076
What this means is
the keys that are used


69
00:04:40,076 --> 00:04:43,226
to secure this communication
reside only


70
00:04:43,226 --> 00:04:44,516
on the user's devices.


71
00:04:46,026 --> 00:04:48,246
So even if the communication
flows


72
00:04:48,246 --> 00:04:50,356
through intermediate
devices or services,


73
00:04:50,716 --> 00:04:52,206
they cannot be decrypted.


74
00:04:52,716 --> 00:04:53,976
Not even by Apple.


75
00:04:59,816 --> 00:05:02,286
HomeKit provides for
what's known in the industry


76
00:05:02,286 --> 00:05:04,126
as perfect forward secrecy.


77
00:05:04,996 --> 00:05:07,816
What this means is every
communication session


78
00:05:07,936 --> 00:05:09,726
between an Apple user's device


79
00:05:10,186 --> 00:05:12,326
and their HomeKit
enabled accessory,


80
00:05:12,786 --> 00:05:15,976
user's new session keys
which are generated just


81
00:05:15,976 --> 00:05:18,466
for that session, and after
the session is completed,


82
00:05:18,746 --> 00:05:20,046
these keys are then discarded.


83
00:05:20,826 --> 00:05:25,486
Now this is great because
even if in the future any


84
00:05:25,486 --> 00:05:28,696
of the device is compromised and
a long-term key is compromised,


85
00:05:29,136 --> 00:05:33,276
that then cannot be used to
decrypt any communication


86
00:05:33,516 --> 00:05:38,326
that would have happened
in the past.


87
00:05:38,466 --> 00:05:40,336
Home data is private.


88
00:05:41,076 --> 00:05:44,266
We take care of privacy
in our API's as well


89
00:05:44,266 --> 00:05:48,536
as applications have to
explicitly ask user's permission


90
00:05:48,956 --> 00:05:53,216
to get access to
their home data.


91
00:05:53,376 --> 00:05:55,676
HomeKit supports a
variety of accessories.


92
00:05:56,326 --> 00:05:59,486
Working with our accessory
partners, we have a variety


93
00:05:59,486 --> 00:06:01,046
of accessories in
the market today,


94
00:06:01,516 --> 00:06:04,086
and many of our partners
are bringing new


95
00:06:04,086 --> 00:06:05,806
and exciting classes
of accessories


96
00:06:06,126 --> 00:06:07,676
to the HomeKit ecosystem.


97
00:06:10,556 --> 00:06:14,196
So that was a very
high-level overview of HomeKit.


98
00:06:14,456 --> 00:06:17,206
With that background,
let's get started


99
00:06:17,566 --> 00:06:22,146
with what's new in HomeKit.


100
00:06:22,236 --> 00:06:25,216
So we're going to cover
three major areas.


101
00:06:26,576 --> 00:06:27,966
First, platform.


102
00:06:29,326 --> 00:06:31,686
We are expanding
HomeKit capabilities


103
00:06:32,116 --> 00:06:36,766
through Apple's platform
for iOS, watchOS, and tvOS.


104
00:06:37,636 --> 00:06:43,226
We are introducing support
for new and exciting classes


105
00:06:43,226 --> 00:06:45,096
of accessories in this release.


106
00:06:45,646 --> 00:06:51,496
And all this new
functionality as well


107
00:06:51,496 --> 00:06:54,246
as several enhancements
are available


108
00:06:54,586 --> 00:06:57,736
to your applications via
updates to the framework,


109
00:06:57,976 --> 00:07:02,826
and we will cover
the details there.


110
00:07:02,996 --> 00:07:07,226
First, on platform,
we are really thrilled


111
00:07:07,696 --> 00:07:11,146
to deliver an Apple app
for HomeKit this year.


112
00:07:12,436 --> 00:07:18,386
The home app provides a very
simple interface for users


113
00:07:18,386 --> 00:07:20,416
to control their
accessories as well


114
00:07:20,416 --> 00:07:22,816
as configure their
accessories in their home.


115
00:07:23,476 --> 00:07:26,586
It also enables users
to set up automations


116
00:07:26,586 --> 00:07:27,646
that they have in their home.


117
00:07:29,996 --> 00:07:34,956
Home app is supported on all
iOS devices, iPod Touch, iPhone,


118
00:07:35,046 --> 00:07:41,346
looks beautiful on an iPad,
and, yes, with watchOS 3,


119
00:07:41,926 --> 00:07:44,836
home app is also supported
on the Apple Watch.


120
00:07:47,716 --> 00:07:50,456
We think this is going to be a
great experience for our users.


121
00:07:53,066 --> 00:07:57,546
Not only that, we are also
integrating HomeKit deep


122
00:07:57,726 --> 00:07:58,626
into the system.


123
00:07:59,206 --> 00:08:03,346
Now HomeKit is also available
directly on the control center.


124
00:08:04,486 --> 00:08:07,486
So the user can configure
their favorite accessories


125
00:08:07,596 --> 00:08:11,736
and can have control of the
accessories as well as control


126
00:08:11,846 --> 00:08:13,956
to [inaudible] directly
from the control center.


127
00:08:17,376 --> 00:08:22,316
Second on platform is remote
access and automation.


128
00:08:23,566 --> 00:08:28,196
With tvOS 10, we are extending
the cable, capabilities


129
00:08:28,196 --> 00:08:31,336
on the Apple TV so that in
addition to remote access,


130
00:08:31,646 --> 00:08:35,336
now the Apple TV runs
all the automations


131
00:08:35,546 --> 00:08:37,446
that the user has set
up for their home.


132
00:08:38,515 --> 00:08:44,976
[ Applause ]


133
00:08:45,476 --> 00:08:49,946
Yeah, that's great because now
no matter where the user is,


134
00:08:50,696 --> 00:08:53,276
the virtual part of the world,
they can be rest assured


135
00:08:53,686 --> 00:08:55,756
that all the automations now run


136
00:08:56,036 --> 00:08:58,386
from their Apple
TV at their homes.


137
00:09:00,816 --> 00:09:03,006
Apple TV also enables


138
00:09:03,006 --> 00:09:06,406
for additional controls
for shared users.


139
00:09:07,136 --> 00:09:09,336
Now it is also possible now


140
00:09:09,336 --> 00:09:12,716
to grant administrative
access to a shared user.


141
00:09:13,466 --> 00:09:16,736
So a shared user with an
administrative access can change


142
00:09:16,736 --> 00:09:17,876
configurations in the home.


143
00:09:18,476 --> 00:09:20,856
So they can add or remove
accessories in the home,


144
00:09:21,356 --> 00:09:24,656
or they, in turn, can also
invite additional users


145
00:09:25,006 --> 00:09:27,016
to the home and give
them control


146
00:09:27,016 --> 00:09:31,176
of the accessories at home.


147
00:09:31,386 --> 00:09:34,956
Now it is also possible to
control per user remote access.


148
00:09:35,306 --> 00:09:39,606
So it is possible to grant or
deny remote access capabilities


149
00:09:39,906 --> 00:09:42,696
to your accessories at home
using this functionality.


150
00:09:47,616 --> 00:09:48,936
It's the same set


151
00:09:48,936 --> 00:09:55,296
of functionality is now
also supported by the iPad.


152
00:09:55,446 --> 00:10:00,326
Not only that, if
the user has multiple


153
00:10:00,326 --> 00:10:02,806
of these remote access
capability devices


154
00:10:02,806 --> 00:10:06,956
in their home, like in this
example, an Apple TV and an iPad


155
00:10:07,266 --> 00:10:09,376
or any combination
of these devices,


156
00:10:09,946 --> 00:10:12,336
they will automatically
work together


157
00:10:12,506 --> 00:10:14,976
and extend the HomeKit
network within the home.


158
00:10:15,606 --> 00:10:17,296
And to communicate
with the accessories,


159
00:10:17,596 --> 00:10:20,446
they will automatically select
the part to communicate.


160
00:10:20,926 --> 00:10:23,206
No additional configuration
from the user's part.


161
00:10:23,496 --> 00:10:26,506
This is all just
automatic from HomeKit.


162
00:10:28,276 --> 00:10:32,516
Third update on platform
is on tvOS 10.


163
00:10:33,566 --> 00:10:38,856
We are thrilled to bring the
HomeKit framework to the tvOS.


164
00:10:39,476 --> 00:10:43,206
[ Applause ]


165
00:10:43,706 --> 00:10:45,206
Now with the HomeKit
framework on the tvOS,


166
00:10:45,206 --> 00:10:49,566
your applications can
view home configurations,


167
00:10:50,666 --> 00:10:53,316
control the accessories
in the home as well


168
00:10:53,316 --> 00:10:58,926
as execute scenes
directly from the Apple TV.


169
00:10:59,116 --> 00:11:03,206
This also means that
now Siri is available


170
00:11:03,206 --> 00:11:04,976
for HomeKit on the Apple TV.


171
00:11:06,676 --> 00:11:09,876
[ Applause ]


172
00:11:10,376 --> 00:11:13,416
So directly from your
convenience of your Siri remote,


173
00:11:13,766 --> 00:11:18,996
you can control your
HomeKit accessories at home.


174
00:11:19,196 --> 00:11:23,016
So those were the major
updates on the platform front.


175
00:11:24,316 --> 00:11:25,436
Let's just quickly recap.


176
00:11:26,286 --> 00:11:28,626
First, home app.


177
00:11:28,876 --> 00:11:32,986
An Apple-designed app for
HomeKit that makes setting


178
00:11:32,986 --> 00:11:36,176
up of accessories as well as
controlling common functions


179
00:11:36,176 --> 00:11:40,526
of the accessories very easy.


180
00:11:40,786 --> 00:11:42,906
Second, remote access
and automation.


181
00:11:43,026 --> 00:11:45,636
We're extending the capabilities
provided by the Apple TV


182
00:11:45,636 --> 00:11:47,096
so that it now runs automation,


183
00:11:47,346 --> 00:11:51,186
and it also enables additional
controls for shared users.


184
00:11:53,256 --> 00:11:58,936
And the same capability is
now also extended to the iPad.


185
00:11:59,026 --> 00:12:02,676
And, third, on tvOS, we're
bringing the HomeKit framework.


186
00:12:03,916 --> 00:12:04,826
So we are really thrilled


187
00:12:04,826 --> 00:12:10,936
to bring these capabilities
to the platform.


188
00:12:11,016 --> 00:12:15,206
The second area we will
cover is new accessories.


189
00:12:17,916 --> 00:12:22,796
First on new accessories, we
are introducing popular class


190
00:12:22,796 --> 00:12:25,646
of air treatment accessories
to HomeKit this year.


191
00:12:26,706 --> 00:12:30,676
So now HomeKit can support
air conditioners and heaters,


192
00:12:31,826 --> 00:12:35,726
air purifiers as
well as humidifiers.


193
00:12:36,696 --> 00:12:41,086
This is great because our users
can now have these accessories


194
00:12:41,146 --> 00:12:45,276
which are also HomeKit enabled
part of their HomeKit ecosystem


195
00:12:45,276 --> 00:12:46,826
in their home and add it


196
00:12:46,826 --> 00:12:52,566
to their automations
and other things.


197
00:12:52,756 --> 00:12:58,426
Next, we are really thrilled to
bring, to bring a powerful class


198
00:12:58,526 --> 00:13:01,116
of camera accessories
to HomeKit this year.


199
00:13:02,516 --> 00:13:07,886
[ Applause ]


200
00:13:08,386 --> 00:13:09,866
Now with camera accessories,


201
00:13:10,256 --> 00:13:14,016
your applications can
display live video streams


202
00:13:14,016 --> 00:13:14,896
from the camera.


203
00:13:15,746 --> 00:13:18,206
Display take and display
still images from the camera.


204
00:13:19,666 --> 00:13:23,026
Control all the settings
on the camera as well


205
00:13:23,026 --> 00:13:26,116
as control the speaker
and microphone settings.


206
00:13:29,956 --> 00:13:31,936
Third, doorbells.


207
00:13:32,956 --> 00:13:35,426
Now doorbell is a
very simple accessory.


208
00:13:36,296 --> 00:13:41,076
It generates and events once
the doorbell is pressed.


209
00:13:41,286 --> 00:13:42,786
Also the doorbell has control


210
00:13:42,786 --> 00:13:46,176
where it can control the volume
settings of the doorbell chime,


211
00:13:46,816 --> 00:13:49,566
and also if the doorbell has
a visual indicator settings,


212
00:13:49,906 --> 00:13:53,626
those can also be controlled
by the doorbell accessory.


213
00:13:54,856 --> 00:13:58,216
Now doorbells we are
seeing are also integrated


214
00:13:58,216 --> 00:14:00,176
with other kinds of accessories.


215
00:14:01,046 --> 00:14:03,366
So doorbell camera
is popular category.


216
00:14:04,106 --> 00:14:07,286
Now this configuration is
also supported by HomeKit.


217
00:14:07,886 --> 00:14:14,426
Not only are these powerful
accessories supported


218
00:14:14,426 --> 00:14:19,266
by HomeKit, we are also tightly
integrating the experience


219
00:14:19,536 --> 00:14:20,436
into the system.


220
00:14:22,476 --> 00:14:29,166
So now, for example, if you
have a doorbell, a door lock,


221
00:14:29,756 --> 00:14:34,826
and a camera which are
all configured by the user


222
00:14:34,826 --> 00:14:38,396
to be part of a room, maybe
the user called the room an


223
00:14:38,396 --> 00:14:43,536
entryway, HomeKit will
automatically associate services


224
00:14:43,846 --> 00:14:45,946
from these different
accessories,


225
00:14:46,756 --> 00:14:50,326
and they can provide
contact-sensitive controls


226
00:14:50,686 --> 00:14:51,306
to the user.


227
00:14:52,596 --> 00:14:55,616
This enables for some
magical experiences


228
00:14:55,616 --> 00:14:57,576
like rich notifications.


229
00:14:58,226 --> 00:15:03,456
So, for example, now here,
when the doorbell rings,


230
00:15:03,976 --> 00:15:07,386
HomeKit will automatically take
a snapshot from the camera,


231
00:15:07,876 --> 00:15:11,236
and the user is presented
with a rich notification.


232
00:15:13,426 --> 00:15:17,556
Also, there are controls
directly on the notification


233
00:15:17,786 --> 00:15:20,736
where the user can press,
touch on the intercom


234
00:15:20,736 --> 00:15:23,806
and start an audio session
with the camera, or if the user


235
00:15:23,806 --> 00:15:25,616
so chooses, unlock the door,


236
00:15:26,396 --> 00:15:29,956
and the notification
displays live video streaming


237
00:15:30,526 --> 00:15:33,906
from the camera.


238
00:15:33,906 --> 00:15:37,396
And, yes, the same
functionality is also available


239
00:15:37,786 --> 00:15:38,936
on the Apple Watch.


240
00:15:39,706 --> 00:15:41,036
And, yes, touching on the,


241
00:15:41,806 --> 00:15:44,566
on the picture there will
start a live video stream


242
00:15:44,796 --> 00:15:47,826
from your HomeKit camera
to your Apple Watch.


243
00:15:49,696 --> 00:15:53,396
And, yeah, you can unlock
your door, if you so choose,


244
00:15:53,576 --> 00:15:54,776
directly from the Apple Watch.


245
00:15:56,196 --> 00:15:59,856
Next, let's look at the updates
to the HomeKit framework.


246
00:16:01,676 --> 00:16:05,636
So we'll start off first
with a, with few simple


247
00:16:06,006 --> 00:16:08,266
but very powerful
enhancements that we have added


248
00:16:08,306 --> 00:16:11,336
to the framework that
gives more context


249
00:16:11,336 --> 00:16:13,816
about the accessory
to your applications.


250
00:16:14,726 --> 00:16:16,606
First up is primary service.


251
00:16:18,016 --> 00:16:20,216
Now this is an example
of an accessory


252
00:16:20,556 --> 00:16:24,726
which has two services - a fan
service and a light service.


253
00:16:25,066 --> 00:16:27,446
So this is what your
application today gets.


254
00:16:27,786 --> 00:16:29,436
Now just by looking
at these services,


255
00:16:29,726 --> 00:16:34,226
it is not clear what the user
perceives this accessory as.


256
00:16:35,306 --> 00:16:40,236
Is this a light with an
exhaust fan, or is this a fan


257
00:16:40,236 --> 00:16:41,116
which also has a light?


258
00:16:42,906 --> 00:16:45,206
Now, with update to
the HomeKit protocol,


259
00:16:45,206 --> 00:16:48,916
the accessory can mark
its primary service,


260
00:16:49,516 --> 00:16:51,276
and this is available back


261
00:16:51,346 --> 00:16:55,116
to your application using
the isPrimaryService property


262
00:16:55,416 --> 00:16:56,696
on the HMService class.


263
00:16:57,226 --> 00:16:58,646
Now this will be great for you


264
00:16:59,106 --> 00:17:02,816
because now you can show
content-sensitive controls


265
00:17:02,816 --> 00:17:04,866
about the accessory
to your users.


266
00:17:07,915 --> 00:17:10,886
Second example is
on linked services.


267
00:17:11,806 --> 00:17:16,326
Here's another example where
an accessory has three outlet


268
00:17:16,326 --> 00:17:18,366
services and a switch service.


269
00:17:19,476 --> 00:17:21,656
Now, again, by just
looking at these services,


270
00:17:21,656 --> 00:17:24,126
it is not clear what
the switch controls.


271
00:17:24,665 --> 00:17:26,476
Does the switch control
one of the outlet


272
00:17:26,806 --> 00:17:29,256
or any other combination
of these outlets?


273
00:17:30,666 --> 00:17:33,026
When a user looks
at the accessory,


274
00:17:33,496 --> 00:17:37,796
it is clear that that switch
controls all the three outlets.


275
00:17:38,416 --> 00:17:41,216
Now with linked services,
services can link


276
00:17:41,216 --> 00:17:46,136
with each other and communicate
back their relationship


277
00:17:46,356 --> 00:17:50,046
to HomeKit, and this is
available back to you.


278
00:17:50,346 --> 00:17:52,686
So in this case, the
switch is linking


279
00:17:52,686 --> 00:17:55,136
to these three outlets
communicating a logical


280
00:17:55,136 --> 00:17:56,756
relationship that the switch has


281
00:17:57,036 --> 00:17:58,756
in controlling these
three outlets.


282
00:17:59,336 --> 00:18:02,136
So now for your users, when
they, when they are looking


283
00:18:02,136 --> 00:18:05,546
at your UI, which is
showing the outlet,


284
00:18:05,546 --> 00:18:07,836
you can now additionally
show the state of the outlet,


285
00:18:07,836 --> 00:18:10,776
whether it is powered on
or off based on the fact


286
00:18:10,776 --> 00:18:12,866
that it is linked
to, from a switch.


287
00:18:15,916 --> 00:18:17,866
Third is valid values.


288
00:18:18,346 --> 00:18:21,796
To explain valid values, let's
take an example where we want


289
00:18:21,796 --> 00:18:22,756
to build an accessory.


290
00:18:23,346 --> 00:18:25,646
Let's say we're building an
air conditioner accessory,


291
00:18:26,536 --> 00:18:27,976
and as we're building
this accessory,


292
00:18:27,976 --> 00:18:31,356
we want to incorporate the
Apple-defined characteristics


293
00:18:31,626 --> 00:18:32,526
for this accessory.


294
00:18:32,956 --> 00:18:36,696
So we will pick a target and
cooling state for our accessory.


295
00:18:37,186 --> 00:18:40,786
So this is how it is
defined in the specification.


296
00:18:41,966 --> 00:18:45,886
Now the air conditioner that we
are building doesn't support,


297
00:18:46,016 --> 00:18:46,736
let's say, heating.


298
00:18:47,816 --> 00:18:51,376
So the heat and the auto
state here is not valid


299
00:18:51,376 --> 00:18:52,346
for my configuration.


300
00:18:55,016 --> 00:18:59,456
Now it is possible for
accessories to mark enumerations


301
00:19:00,306 --> 00:19:03,636
in Apple-defined characteristics
which are not valid


302
00:19:03,636 --> 00:19:04,656
for its configuration.


303
00:19:04,976 --> 00:19:08,506
So in this case, the accessory
marks the heat and auto


304
00:19:08,506 --> 00:19:11,846
as not supported, and this
information is then, again,


305
00:19:12,126 --> 00:19:14,116
available back to
your applications


306
00:19:14,406 --> 00:19:17,756
through the
HMCharacteristicMetadata valid


307
00:19:17,756 --> 00:19:18,686
values property.


308
00:19:20,086 --> 00:19:23,336
Now you can show controls
that are only valid


309
00:19:23,666 --> 00:19:28,836
to that particular
configuration of the accessory.


310
00:19:28,936 --> 00:19:31,556
Next, setting up of
HomeKit accessories.


311
00:19:32,916 --> 00:19:36,136
Today, to set up a
HomeKit accessories,


312
00:19:36,216 --> 00:19:39,436
which is probably the first
step that your user will do,


313
00:19:40,046 --> 00:19:41,966
involves a few different steps.


314
00:19:43,236 --> 00:19:46,676
First, you will start
browsing for the accessories,


315
00:19:47,936 --> 00:19:52,506
and once a new accessory is
found, which is already part


316
00:19:52,506 --> 00:19:54,786
of your Wi-Fi network, or if
it is a Bluetooth accessory,


317
00:19:54,786 --> 00:19:57,216
which is in range,
this is informed back


318
00:19:57,216 --> 00:20:01,776
to you via the accessory
browser's didFindNewAccessory


319
00:20:01,776 --> 00:20:02,666
delegate callback.


320
00:20:04,386 --> 00:20:06,136
And once you have
that accessory,


321
00:20:06,356 --> 00:20:10,226
you can then call the add
accessory method on HMHome


322
00:20:10,296 --> 00:20:12,436
to start adding this
accessory to the home.


323
00:20:15,056 --> 00:20:19,396
But for Wi-Fi accessories
that are not already part


324
00:20:19,396 --> 00:20:21,356
of the user's Wi-Fi
home network,


325
00:20:22,586 --> 00:20:24,936
you need to do some
additional steps


326
00:20:24,936 --> 00:20:27,986
to get these accessories
added and configured


327
00:20:27,986 --> 00:20:29,366
into the user's Wi-Fi network.


328
00:20:30,166 --> 00:20:32,466
You do that today using
the [inaudible] framework.


329
00:20:33,166 --> 00:20:36,596
So there are some additional
steps required for that.


330
00:20:36,926 --> 00:20:38,286
We thought we can do better.


331
00:20:39,086 --> 00:20:45,786
So now in iOS 10, we
have one simple API,


332
00:20:46,476 --> 00:20:50,756
add and set up accessories
that completely takes care


333
00:20:50,756 --> 00:20:52,746
of all the steps
that are required


334
00:20:52,856 --> 00:20:56,136
to configure the accessory
and add it to the user's home.


335
00:20:56,916 --> 00:21:00,246
So on calling this method,
addAndSetupAccessories,


336
00:21:00,596 --> 00:21:04,606
the user is guided
directly using this UI


337
00:21:04,926 --> 00:21:06,226
to select the accessory.


338
00:21:06,226 --> 00:21:10,126
So in this case here, it's
showing all the configured


339
00:21:10,126 --> 00:21:12,626
as well as accessory,
new accessories


340
00:21:12,626 --> 00:21:13,976
that are part of
the Wi-Fi network.


341
00:21:14,576 --> 00:21:17,486
The user can select the
accessories they want to add,


342
00:21:17,486 --> 00:21:20,716
and once it is selected,
if it was not already part


343
00:21:20,716 --> 00:21:21,916
of the user's Wi-Fi network,


344
00:21:21,916 --> 00:21:24,306
it is added to the user's
Wi-Fi network securely.


345
00:21:25,256 --> 00:21:27,886
Then the HomeKit
scan code is scanned,


346
00:21:29,106 --> 00:21:31,836
and HomeKit pairing is
performed on the accessory,


347
00:21:32,426 --> 00:21:38,166
and then the user is prompted
to name the accessory,


348
00:21:38,536 --> 00:21:40,216
select a room for the accessory.


349
00:21:40,816 --> 00:21:43,366
And also in this case,
since it's an outlet


350
00:21:43,366 --> 00:21:45,126
which is generally
kind of an accessory,


351
00:21:45,396 --> 00:21:49,046
the user is also prompt
to associate what kind


352
00:21:49,046 --> 00:21:50,756
of accessory is connected
to this outlet.


353
00:21:51,126 --> 00:21:53,956
So in our example here,
this outlet, let's say,


354
00:21:53,956 --> 00:21:55,156
is being connected to a fan.


355
00:21:55,566 --> 00:21:57,986
So we select the fan as
the associated service


356
00:21:57,986 --> 00:22:00,076
for this accessory,
and, finally,


357
00:22:00,076 --> 00:22:03,986
the user can also choose to
show this accessory as part


358
00:22:03,986 --> 00:22:05,796
of their favorites, and using,


359
00:22:05,796 --> 00:22:09,796
doing that enables this
accessory to appear as part


360
00:22:09,796 --> 00:22:11,426
of their control
center controls.


361
00:22:12,516 --> 00:22:13,126
So that's it.


362
00:22:13,516 --> 00:22:16,356
Just one simple API,
and user is guided


363
00:22:16,406 --> 00:22:18,246
through this complete
set up flow.


364
00:22:18,726 --> 00:22:22,466
And now all applications
then will also have this


365
00:22:22,626 --> 00:22:24,036
consistent experience.


366
00:22:24,266 --> 00:22:26,096
We think this is going to
be great for our users,


367
00:22:26,346 --> 00:22:29,836
and we really encourage all of
you to start using this API.


368
00:22:32,516 --> 00:22:39,456
[ Applause ]


369
00:22:39,956 --> 00:22:42,856
Next, let's talk about
camera accessories.


370
00:22:48,456 --> 00:22:53,436
So a camera is a rich
and complex accessories.


371
00:22:53,996 --> 00:22:56,596
It has many different
controls and configurations.


372
00:22:57,866 --> 00:23:00,956
So rather than exposing all the
raw services and characteristics


373
00:23:00,956 --> 00:23:04,746
to your app, we are providing
a very easy way for you


374
00:23:04,746 --> 00:23:06,966
to take advantage of
this powerful accessory


375
00:23:07,506 --> 00:23:09,456
with cameraProfile objects.


376
00:23:10,586 --> 00:23:14,246
A profile is nothing but a
collection of related services


377
00:23:14,586 --> 00:23:17,256
that describe a general
behavior for an accessory.


378
00:23:18,136 --> 00:23:21,786
So cameraProfile objects
provides you all the interfaces


379
00:23:21,786 --> 00:23:25,556
that is needed for you to
control the camera accessories.


380
00:23:27,876 --> 00:23:31,326
So on an accessory, you can
get to the cameraProfile


381
00:23:31,836 --> 00:23:36,306
from the cameraProfile
property on the HM accessory.


382
00:23:36,306 --> 00:23:40,646
An accessory can
support multiple cameras,


383
00:23:40,976 --> 00:23:42,646
and those are all
supported by HomeKit.


384
00:23:42,966 --> 00:23:44,526
So it will be one
of the elements


385
00:23:44,526 --> 00:23:45,626
in this cameraProfile array.


386
00:23:45,626 --> 00:23:51,356
Let's look at what a
cameraProfile provides.


387
00:23:52,006 --> 00:23:54,436
A cameraProfile provides
additional interfaces


388
00:23:54,436 --> 00:23:57,436
that allow you to control
different aspects of the camera.


389
00:23:57,786 --> 00:24:00,686
So you can display and
control the camera stream,


390
00:24:00,966 --> 00:24:03,046
which is both the audio and
video stream from the camera;


391
00:24:04,136 --> 00:24:06,836
display, take and display
still images from the camera;


392
00:24:08,046 --> 00:24:10,926
control all the settings
on the camera as well


393
00:24:10,926 --> 00:24:12,396
as control the speaker


394
00:24:12,396 --> 00:24:14,176
and microphone settings
on the camera.


395
00:24:15,486 --> 00:24:17,956
Let's look at the
HMCameraProfileClass


396
00:24:17,956 --> 00:24:19,476
that provides these interfaces.


397
00:24:20,286 --> 00:24:22,506
First is stream control.


398
00:24:23,536 --> 00:24:25,646
Let's look at HMStreamControl.


399
00:24:25,956 --> 00:24:29,556
So HMStreamControl provides
some few simple methods


400
00:24:29,726 --> 00:24:32,936
that allow you to start
and stop streams directly


401
00:24:32,936 --> 00:24:33,536
from the camera.


402
00:24:34,786 --> 00:24:38,466
So you call the startStream
method on the HMCameraStream


403
00:24:38,696 --> 00:24:41,706
to start a live stream
from the camera.


404
00:24:42,226 --> 00:24:45,226
Once the stream starts,
it is informed back


405
00:24:45,326 --> 00:24:48,616
to you using the
StreamControl delegate callback.


406
00:24:51,676 --> 00:24:53,036
So once a stream starts,


407
00:24:53,186 --> 00:24:56,996
the camera stream control
didStartStream informs you back


408
00:24:57,236 --> 00:24:58,316
that the stream has started.


409
00:24:58,956 --> 00:25:02,336
Similarly, to stop the stream,
you call the stopStream method,


410
00:25:02,836 --> 00:25:06,326
and, again, using the same
mechanism it is informed back


411
00:25:06,326 --> 00:25:10,276
to you via the camera
stream control didStopStream


412
00:25:10,276 --> 00:25:11,716
with error delegate callback.


413
00:25:13,916 --> 00:25:18,656
Once the stream is started,
your application has a reference


414
00:25:18,656 --> 00:25:22,446
to the stream using via
the cameraStream property.


415
00:25:23,466 --> 00:25:25,596
Let's look at what the
cameraStream looks like.


416
00:25:26,866 --> 00:25:30,406
The cameraStream
represents both the audio


417
00:25:30,746 --> 00:25:32,536
and the video parts
of the stream.


418
00:25:33,476 --> 00:25:35,366
So on the cameraStream class,


419
00:25:35,776 --> 00:25:38,946
you have additional controls
whereby you can control the


420
00:25:39,216 --> 00:25:41,326
audio settings from
the camera stream.


421
00:25:42,416 --> 00:25:45,456
So using this, you can
either mute the stream


422
00:25:45,906 --> 00:25:47,946
or fully allow incoming audio


423
00:25:48,366 --> 00:25:51,296
or allow bidirectional
audio from the camera.


424
00:25:51,926 --> 00:25:56,356
Now that you have a stream,
what do you want to do with it?


425
00:25:56,876 --> 00:25:59,546
Well, you would like to
display it in your app.


426
00:26:00,426 --> 00:26:03,326
How do you do that?


427
00:26:03,506 --> 00:26:04,736
It's simple.


428
00:26:04,736 --> 00:26:07,456
On iOS 10 and tvOS
10, all that you need


429
00:26:07,516 --> 00:26:10,636
to do is create a HMCameraView.


430
00:26:11,336 --> 00:26:16,316
And to the view and on the
view we have a single property,


431
00:26:16,516 --> 00:26:19,746
the camera source, and you
need to just assign the stream


432
00:26:19,746 --> 00:26:22,066
that you just got when
you started the stream


433
00:26:22,376 --> 00:26:23,096
to this property.


434
00:26:23,386 --> 00:26:23,776
That's it.


435
00:26:24,506 --> 00:26:26,446
All that is needed for your app


436
00:26:26,546 --> 00:26:31,306
to show live stream
from the camera.


437
00:26:31,456 --> 00:26:33,016
It's very similar on watch OS.


438
00:26:33,306 --> 00:26:36,516
You just create an
HM WKInterface camera


439
00:26:36,696 --> 00:26:39,926
and call the setCameraSource
method


440
00:26:40,366 --> 00:26:45,326
to show live stream
directly on your Apple Watch.


441
00:26:45,746 --> 00:26:50,526
So those were a few different
objects for you to look


442
00:26:51,566 --> 00:26:53,616
to control your camera
accessory,


443
00:26:53,956 --> 00:26:55,456
but in reality, it's
pretty simple.


444
00:26:55,456 --> 00:26:57,746
Let's look at an example call.


445
00:27:00,246 --> 00:27:03,726
So first we get to our
cameraProfile on our accessory,


446
00:27:03,896 --> 00:27:06,976
and in this case, we're just
picking the first cameraProfile


447
00:27:06,976 --> 00:27:11,016
that is there, and on the
cameraProfile's stream.Control,


448
00:27:11,426 --> 00:27:12,736
we call the startStream method


449
00:27:12,996 --> 00:27:14,386
which will start
a camera stream.


450
00:27:15,016 --> 00:27:19,956
And to display our stream,
we'll create a HMCameraView,


451
00:27:21,116 --> 00:27:23,186
and once our stream is started,


452
00:27:23,896 --> 00:27:26,636
it's informed back via
this delegate callback


453
00:27:26,766 --> 00:27:28,716
cameraStreamControl
didStartStream,


454
00:27:29,266 --> 00:27:33,416
and all that we need to do here
is assign the camera stream


455
00:27:33,826 --> 00:27:35,836
to the camera source
property on the view.


456
00:27:36,366 --> 00:27:36,786
That's it.


457
00:27:37,226 --> 00:27:40,156
Now your view in your
application is showing live


458
00:27:40,156 --> 00:27:41,326
stream from the camera.


459
00:27:45,336 --> 00:27:47,486
Next, let's look
at snapshotControl.


460
00:27:47,736 --> 00:27:50,366
Snapshot control interfaces
are also very similar


461
00:27:50,366 --> 00:27:52,136
to what we saw with
streamControl.


462
00:27:53,606 --> 00:27:57,476
So for snapshotControl we
have one method, takeSnapshot,


463
00:27:57,976 --> 00:28:01,366
which once a snapshot
is taken informed back


464
00:28:01,446 --> 00:28:05,546
to you via the
cameraSnapshotControl didTake


465
00:28:05,546 --> 00:28:07,156
snapshot method callback.


466
00:28:07,846 --> 00:28:12,166
And the most recent snapshot
reference is available to you


467
00:28:12,536 --> 00:28:14,796
in this most recent
snapshot property.


468
00:28:15,086 --> 00:28:17,726
Let's look at the
SnapshotControl.


469
00:28:17,726 --> 00:28:22,276
The SnapshotControl has
just one additional thing


470
00:28:22,496 --> 00:28:24,056
which will show you
the capture date


471
00:28:24,056 --> 00:28:27,116
of when this snapshot
was captured.


472
00:28:27,116 --> 00:28:28,756
It has both the time and date.


473
00:28:30,116 --> 00:28:35,816
And, again, similarly,
to display your snapshot


474
00:28:35,816 --> 00:28:38,506
into a view, all that you
need to do is create a view


475
00:28:38,806 --> 00:28:41,036
and assign it to this snapshot.


476
00:28:42,816 --> 00:28:44,596
So here's an example to take


477
00:28:44,596 --> 00:28:46,286
and display a snapshot
from the camera.


478
00:28:46,676 --> 00:28:48,956
It's very similar, core
structure is very similar.


479
00:28:49,636 --> 00:28:51,456
First we get to our
cameraProfile.


480
00:28:52,876 --> 00:28:55,346
On this cameraProfile's
snapshotControl,


481
00:28:55,806 --> 00:28:57,616
we call the takeSnapshot method.


482
00:28:58,436 --> 00:29:01,256
We create a view to
display our snapshot,


483
00:29:01,926 --> 00:29:05,536
and once a delegate is
called back, it comes back


484
00:29:05,536 --> 00:29:07,506
with a reference
of our snapshot.


485
00:29:07,866 --> 00:29:09,676
We just take that and assign it


486
00:29:09,736 --> 00:29:11,766
to the camera's source
property on our view.


487
00:29:12,136 --> 00:29:12,516
That's it.


488
00:29:13,106 --> 00:29:19,936
That's all you need to show
the snapshot from the camera.


489
00:29:20,256 --> 00:29:21,526
Next, let's look
at settingControls.


490
00:29:21,526 --> 00:29:25,916
So settingControl gives you HM
characteristics which allow you


491
00:29:25,916 --> 00:29:28,786
to control all the settings that
are supported by the camera.


492
00:29:31,756 --> 00:29:35,476
So you have interfaces to
control night vision, tilt,


493
00:29:35,956 --> 00:29:39,856
zoom, rotation, and
mirroring on the camera.


494
00:29:40,186 --> 00:29:43,346
So if the cameraSupport does
not support any one of this,


495
00:29:43,656 --> 00:29:45,076
then that property will be nil.


496
00:29:45,496 --> 00:29:48,286
Otherwise, you have full access
to control all the settings


497
00:29:48,526 --> 00:29:50,866
of this camera from your app.


498
00:29:54,696 --> 00:29:58,876
Last, we'll look at camera
audio control, which allows you


499
00:29:58,876 --> 00:30:00,446
to control both the speaker


500
00:30:00,506 --> 00:30:02,476
and microphone settings
on the camera.


501
00:30:03,856 --> 00:30:06,206
Again, these are also
HM characteristic


502
00:30:06,656 --> 00:30:08,926
which will allow you to
change the mute settings


503
00:30:08,926 --> 00:30:12,016
on the microphone, change the
mute settings of the speaker,


504
00:30:12,636 --> 00:30:14,296
control the gain
on the microphone,


505
00:30:14,576 --> 00:30:16,996
or control the speaker volume.


506
00:30:18,006 --> 00:30:21,506
So those are all the key API's
that is available for you


507
00:30:21,846 --> 00:30:27,946
to take advantage of
this powerful accessory.


508
00:30:28,136 --> 00:30:29,126
So let's summarize.


509
00:30:29,766 --> 00:30:32,006
We covered three major areas.


510
00:30:32,986 --> 00:30:34,646
First, platform.


511
00:30:36,376 --> 00:30:40,396
We're bringing the home app, an
Apple-designed app for HomeKit.


512
00:30:42,016 --> 00:30:43,736
For remote access
and automation.


513
00:30:43,736 --> 00:30:46,166
We're extending the capabilities
of the Apple TV as well


514
00:30:46,166 --> 00:30:49,106
as adding iPad to
have the remote access


515
00:30:49,106 --> 00:30:51,956
and automation capability
for users' home.


516
00:30:53,016 --> 00:30:56,626
We're bringing HomeKit
to the tvOS framework.


517
00:30:59,006 --> 00:31:04,106
Next area on accessories,
we're adding the popular class


518
00:31:04,186 --> 00:31:05,646
of air treatment accessories.


519
00:31:07,186 --> 00:31:09,936
We're adding powerful
camera accessories


520
00:31:09,966 --> 00:31:11,096
to the HomeKit ecosystem.


521
00:31:12,396 --> 00:31:15,986
And we're also adding doorbells
and combination accessories,


522
00:31:15,986 --> 00:31:17,546
which are doorbell cameras.


523
00:31:18,116 --> 00:31:23,856
On the framework
updates, we covered simple


524
00:31:24,046 --> 00:31:27,796
but powerful capabilities that
allow you to get more context


525
00:31:27,796 --> 00:31:29,326
about your accessory
in your app.


526
00:31:29,666 --> 00:31:30,666
So you can show rich


527
00:31:30,926 --> 00:31:33,486
and context-sensitive
UI to your users.


528
00:31:34,036 --> 00:31:37,446
We have greatly simplified
the accessory setup flow.


529
00:31:37,776 --> 00:31:39,136
Now with just one API call,


530
00:31:39,196 --> 00:31:42,646
all apps get the consistent
experience of guiding the user


531
00:31:42,986 --> 00:31:46,346
through the complete setup for,
for their HomeKit accessories.


532
00:31:46,876 --> 00:31:50,316
And we introduced cam,
camera profile objects


533
00:31:50,656 --> 00:31:53,756
that allow your applications
to take advantage


534
00:31:53,966 --> 00:32:00,086
of this powerful
class of accessories.


535
00:32:00,086 --> 00:32:04,706
Now before I conclude, I want
to leave you with this thought.


536
00:32:05,596 --> 00:32:10,516
HomeKit accessories and your
applications are changing the


537
00:32:10,556 --> 00:32:15,766
way that our users
interact with their homes.


538
00:32:15,956 --> 00:32:21,476
With system features like Siri,
automations, and notifications,


539
00:32:22,586 --> 00:32:27,406
also combined with the rich
set of accessibility features


540
00:32:27,406 --> 00:32:30,506
on Apple platforms like
voiceover and others,


541
00:32:31,176 --> 00:32:34,536
these accessories are,
for the very first time,


542
00:32:34,896 --> 00:32:37,076
becoming accessible to users


543
00:32:37,076 --> 00:32:39,236
with various kinds
of disabilities.


544
00:32:40,046 --> 00:32:44,076
This is powerful, and it is
a life-changing experience


545
00:32:44,076 --> 00:32:45,676
for many of our users.


546
00:32:46,476 --> 00:32:50,346
So I encourage you to check out
all these different capabilities


547
00:32:50,346 --> 00:32:52,596
that are available to
you on Apple platforms,


548
00:32:52,896 --> 00:32:56,616
and take full advantage
and make your accessories


549
00:32:56,866 --> 00:32:59,976
and applications
accessible to everyone.


550
00:33:02,716 --> 00:33:05,236
For our MFi program members,


551
00:33:06,186 --> 00:33:09,516
a preview of the updated
specifications will become


552
00:33:09,856 --> 00:33:15,076
available to you soon, and for
new accessory manufacturers


553
00:33:15,076 --> 00:33:16,646
who'd like to join the program,


554
00:33:17,316 --> 00:33:20,576
this URL gives you more
information, or please come


555
00:33:20,576 --> 00:33:24,706
and talk to one of us.


556
00:33:24,976 --> 00:33:28,276
More information about this
session as well as HomeKit


557
00:33:28,636 --> 00:33:31,606
and references are
available via this URL.


558
00:33:33,496 --> 00:33:37,796
These are some related sessions
I'll encourage you to watch


559
00:33:37,796 --> 00:33:39,136
on video if you have
missed them.


560
00:33:39,836 --> 00:33:41,456
The first one is
really inspiring.


561
00:33:44,076 --> 00:33:45,516
Thank you very much.


562
00:33:45,846 --> 00:33:46,766
Have a great conference.


563
00:33:47,516 --> 00:33:56,090
[ Applause ]

