1
00:00:07,516 --> 00:00:15,500
[ Music ]


2
00:00:19,516 --> 00:00:25,176
[ Applause ]


3
00:00:25,676 --> 00:00:26,186
>> Good afternoon.


4
00:00:27,166 --> 00:00:28,956
Welcome. My name is Ken Ferry.


5
00:00:29,246 --> 00:00:30,736
Today Kasia Wawer and I are


6
00:00:30,736 --> 00:00:31,536
going to talk to you about


7
00:00:31,536 --> 00:00:32,686
performance in Auto Layout.


8
00:00:33,666 --> 00:00:35,466
Last time I was up here talking


9
00:00:35,466 --> 00:00:37,446
about Auto Layout was in 2011


10
00:00:38,056 --> 00:00:39,356
when we first introduced it.


11
00:00:39,726 --> 00:00:42,216
So it's really great to be back


12
00:00:42,316 --> 00:00:43,206
up here chatting with you all


13
00:00:43,206 --> 00:00:43,446
today.


14
00:00:44,956 --> 00:00:48,896
OK, so Auto Layout.


15
00:00:49,796 --> 00:00:51,366
This is how we position content


16
00:00:51,576 --> 00:00:52,916
on iOS on the Mac.


17
00:00:53,486 --> 00:00:55,096
The main object involved as we


18
00:00:55,096 --> 00:00:57,456
know are views and constraints,


19
00:00:58,246 --> 00:00:59,096
constraints giving the


20
00:00:59,096 --> 00:01:00,406
relationships between views.


21
00:01:01,206 --> 00:01:02,826
When it comes to performance, I


22
00:01:03,126 --> 00:01:04,756
think the challenge here is that


23
00:01:04,756 --> 00:01:06,146
if all you've said is the


24
00:01:06,146 --> 00:01:07,276
distance between these two


25
00:01:07,416 --> 00:01:09,286
buttons should be 20, it can be


26
00:01:09,286 --> 00:01:10,446
hard to understand the


27
00:01:10,446 --> 00:01:12,606
step-by-step process that the


28
00:01:12,606 --> 00:01:13,936
machine goes through to do that


29
00:01:14,226 --> 00:01:15,466
and that means it can be hard to


30
00:01:15,466 --> 00:01:17,726
understand the expectations


31
00:01:17,726 --> 00:01:18,736
around performance and


32
00:01:18,736 --> 00:01:19,826
understand what's fast and


33
00:01:19,826 --> 00:01:21,296
what's not and generally how


34
00:01:21,296 --> 00:01:22,006
things are working.


35
00:01:22,986 --> 00:01:24,886
So that's our goal for this


36
00:01:24,886 --> 00:01:25,156
talk.


37
00:01:25,456 --> 00:01:27,386
It's to really understand that,


38
00:01:27,386 --> 00:01:28,926
to have a good feel for how


39
00:01:28,926 --> 00:01:29,556
things are going to work.


40
00:01:29,896 --> 00:01:31,146
So we're going to start things


41
00:01:31,146 --> 00:01:32,696
off by first showing some of the


42
00:01:32,696 --> 00:01:33,826
work that we've been doing in


43
00:01:33,826 --> 00:01:35,556
this release for iOS 12 around


44
00:01:35,556 --> 00:01:36,096
performance.


45
00:01:36,436 --> 00:01:37,256
We've been doing a lot of work,


46
00:01:37,706 --> 00:01:40,286
that's we get to give this talk.


47
00:01:41,206 --> 00:01:44,646
When that's done we're going to


48
00:01:44,646 --> 00:01:46,166
move on to trying to build that


49
00:01:46,166 --> 00:01:47,636
step-by-step understanding that


50
00:01:47,636 --> 00:01:48,376
I was talking about.


51
00:01:48,686 --> 00:01:50,506
So we have good intuition and


52
00:01:50,506 --> 00:01:51,576
good expectations around


53
00:01:51,576 --> 00:01:52,006
performance.


54
00:01:52,456 --> 00:01:53,626
To do that we're going to do


55
00:01:53,626 --> 00:01:55,496
something very unusual for us,


56
00:01:55,786 --> 00:01:57,076
which is to go into internals.


57
00:01:57,746 --> 00:01:58,756
So enjoy that please.


58
00:02:02,546 --> 00:02:04,756
Last, if you only ever rely on


59
00:02:04,756 --> 00:02:06,316
our intuition for performance,


60
00:02:06,546 --> 00:02:07,706
it's not going to work out very


61
00:02:07,706 --> 00:02:07,896
well.


62
00:02:08,286 --> 00:02:10,776
So we will then look -- Kasia


63
00:02:10,776 --> 00:02:12,376
will take over and we'll analyze


64
00:02:12,506 --> 00:02:14,686
code and we'll sort of show how


65
00:02:14,686 --> 00:02:16,696
to merge your intuition with,


66
00:02:16,916 --> 00:02:17,736
you know, practice.


67
00:02:18,846 --> 00:02:20,126
But let's get to it.


68
00:02:20,436 --> 00:02:22,226
So first as is traditional for


69
00:02:22,226 --> 00:02:23,326
an Apple presentation, we're


70
00:02:23,326 --> 00:02:23,916
going to look at a bunch of


71
00:02:23,916 --> 00:02:24,676
numbers and brag.


72
00:02:25,516 --> 00:02:28,796
[ Laughter ]


73
00:02:29,296 --> 00:02:31,116
Here we have, what we're looking


74
00:02:31,116 --> 00:02:32,806
at here is a benchmark.


75
00:02:33,416 --> 00:02:35,456
So the way we approached this


76
00:02:35,456 --> 00:02:37,536
work is we went out and looked a


77
00:02:37,536 --> 00:02:38,816
bunch of third party apps as


78
00:02:38,816 --> 00:02:40,406
well as our own apps and we


79
00:02:40,406 --> 00:02:41,906
tried to isolate what we saw


80
00:02:41,906 --> 00:02:44,646
happening into test cases that


81
00:02:44,646 --> 00:02:45,476
we could then benchmark.


82
00:02:45,996 --> 00:02:47,056
So this one here, what we're


83
00:02:47,056 --> 00:02:49,006
looking at, is UICollectionView


84
00:02:49,006 --> 00:02:51,486
with self-sizing cells and on


85
00:02:51,706 --> 00:02:53,236
the whichever side looks bad is


86
00:02:53,436 --> 00:02:59,136
iOS 11, which hopefully looked


87
00:02:59,306 --> 00:03:00,086
janky and bad.


88
00:03:00,266 --> 00:03:02,946
And on iOS 12 it's perfect.


89
00:03:03,216 --> 00:03:04,116
It's hitting full frame rate.


90
00:03:05,096 --> 00:03:07,086
So that's just one of the cases


91
00:03:07,086 --> 00:03:07,586
we looked at.


92
00:03:07,896 --> 00:03:10,296
Here are some more, just another


93
00:03:10,296 --> 00:03:10,846
sampling.


94
00:03:10,846 --> 00:03:11,806
We have a lot.


95
00:03:12,526 --> 00:03:14,186
These ones are all time.


96
00:03:14,766 --> 00:03:16,446
So what you're looking at is


97
00:03:16,446 --> 00:03:18,176
that the gray bars are iOS 11.


98
00:03:18,346 --> 00:03:19,666
How much time it took on iOS 11


99
00:03:20,016 --> 00:03:21,506
and the blue are iOS12.


100
00:03:22,936 --> 00:03:24,236
So what you take from this is


101
00:03:24,236 --> 00:03:25,516
that we found a lot of places


102
00:03:25,516 --> 00:03:26,496
where we could make things


103
00:03:26,706 --> 00:03:27,476
really a lot better.


104
00:03:28,076 --> 00:03:31,306
And that will only improve your


105
00:03:31,306 --> 00:03:31,546
apps.


106
00:03:31,676 --> 00:03:32,646
That will make things quite a


107
00:03:32,856 --> 00:03:35,616
bit better for you I hope.


108
00:03:35,616 --> 00:03:36,896
This is going all the way up and


109
00:03:36,896 --> 00:03:37,466
down the stack.


110
00:03:37,766 --> 00:03:39,336
So some of it is in the real


111
00:03:39,336 --> 00:03:41,156
guts that affect just absolutely


112
00:03:41,156 --> 00:03:41,676
everything.


113
00:03:42,166 --> 00:03:44,106
Some of it's moving into UI


114
00:03:44,106 --> 00:03:44,366
kits.


115
00:03:44,366 --> 00:03:45,486
Some of it's up in the client


116
00:03:45,486 --> 00:03:47,846
layer so for in how people use


117
00:03:47,846 --> 00:03:48,326
Auto Layout.


118
00:03:48,716 --> 00:03:49,766
So if you look at for example


119
00:03:49,766 --> 00:03:51,246
that UICollectionView benchmark


120
00:03:51,606 --> 00:03:52,776
that we were looking at that's


121
00:03:52,776 --> 00:03:53,536
all of those.


122
00:03:54,016 --> 00:03:55,846
It does include stuff that's in


123
00:03:55,846 --> 00:03:57,386
the real guts but it also


124
00:03:57,446 --> 00:03:58,856
includes a lot of really


125
00:03:58,856 --> 00:04:00,236
important changes in just how


126
00:04:00,236 --> 00:04:01,876
UICollectionView uses Auto


127
00:04:01,876 --> 00:04:03,576
Layout and is more performance


128
00:04:04,296 --> 00:04:04,866
due to it.


129
00:04:05,376 --> 00:04:07,186
Which is a good segue to the


130
00:04:07,186 --> 00:04:09,186
rest of the talk, which is how


131
00:04:09,256 --> 00:04:10,116
you can do that too.


132
00:04:10,676 --> 00:04:11,786
So how to use it properly.


133
00:04:12,606 --> 00:04:14,286
When we were going through these


134
00:04:15,026 --> 00:04:16,505
I think a lot of the time the


135
00:04:16,505 --> 00:04:17,956
reason why we were able to make


136
00:04:17,956 --> 00:04:19,375
all these improvements is that


137
00:04:19,375 --> 00:04:21,786
we have a good mental model for


138
00:04:21,786 --> 00:04:24,336
how things are put together and


139
00:04:24,366 --> 00:04:26,226
how it performs, how it works.


140
00:04:27,366 --> 00:04:29,156
We want to help you develop that


141
00:04:29,156 --> 00:04:29,756
model as well.


142
00:04:30,286 --> 00:04:31,876
So to frame this we're going to


143
00:04:31,876 --> 00:04:34,126
go through an example case, some


144
00:04:34,126 --> 00:04:36,726
client code, that is not -- that


145
00:04:36,726 --> 00:04:38,036
has some issues and we're going


146
00:04:38,036 --> 00:04:38,676
to discuss why.


147
00:04:39,266 --> 00:04:40,796
So your code may or may not have


148
00:04:40,796 --> 00:04:42,166
this particular issue, but we


149
00:04:42,166 --> 00:04:43,226
did choose what we thought was


150
00:04:43,226 --> 00:04:44,636
the most common thing that we


151
00:04:44,636 --> 00:04:45,816
saw when we went through all


152
00:04:46,056 --> 00:04:47,496
these client apps.


153
00:04:48,096 --> 00:04:49,146
But even if you don't have this


154
00:04:49,146 --> 00:04:50,876
particular issue, the work we do


155
00:04:50,876 --> 00:04:52,476
to go through what's happening


156
00:04:52,706 --> 00:04:53,596
should be meaningful to


157
00:04:53,596 --> 00:04:55,326
everybody and probably new to


158
00:04:55,326 --> 00:04:56,026
almost everybody.


159
00:04:56,876 --> 00:04:58,426
So let's do it.


160
00:04:59,656 --> 00:05:00,756
This is the case we're going to


161
00:05:00,756 --> 00:05:01,436
go through so we're going to


162
00:05:01,436 --> 00:05:04,006
produce this layout, obviously


163
00:05:04,006 --> 00:05:04,516
very simple.


164
00:05:05,106 --> 00:05:06,976
Oftentimes I think you would


165
00:05:06,976 --> 00:05:08,046
build this in interface builder.


166
00:05:08,806 --> 00:05:09,756
That's a great idea.


167
00:05:09,876 --> 00:05:11,716
It is such a good idea that it


168
00:05:11,716 --> 00:05:12,786
would completely prevent the


169
00:05:12,786 --> 00:05:13,896
performance issues that we'd


170
00:05:13,896 --> 00:05:15,796
like to go through.


171
00:05:16,076 --> 00:05:18,976
So let's say we didn't do that.


172
00:05:19,406 --> 00:05:21,006
Let's say that we built it like


173
00:05:21,766 --> 00:05:21,886
this.


174
00:05:24,066 --> 00:05:25,216
First let's just walk through --


175
00:05:25,216 --> 00:05:26,406
before we try to analyze it,


176
00:05:26,406 --> 00:05:27,236
let's walk through what this


177
00:05:27,236 --> 00:05:27,796
code is doing.


178
00:05:28,826 --> 00:05:31,316
First, we are overriding the


179
00:05:31,316 --> 00:05:33,226
UIView method updateConstraints,


180
00:05:33,866 --> 00:05:34,976
whatever that does.


181
00:05:35,366 --> 00:05:37,426
So we'll talk about it.


182
00:05:37,916 --> 00:05:41,736
Next, we have an Ivar called


183
00:05:41,736 --> 00:05:42,476
myConstraints.


184
00:05:42,716 --> 00:05:45,446
And we are taking everything in


185
00:05:45,446 --> 00:05:46,436
that variable and we are


186
00:05:46,436 --> 00:05:47,336
deactivating all those


187
00:05:47,336 --> 00:05:47,836
constraints.


188
00:05:48,586 --> 00:05:49,516
We are then creating


189
00:05:49,516 --> 00:05:51,176
constraints, which implement the


190
00:05:51,176 --> 00:05:52,216
layout that we were just looking


191
00:05:52,216 --> 00:05:52,416
at.


192
00:05:53,006 --> 00:05:54,106
That's fairly straightforward.


193
00:05:54,106 --> 00:05:55,066
It's using visual format


194
00:05:55,066 --> 00:05:55,546
language here.


195
00:05:56,276 --> 00:05:57,276
We're then activating those


196
00:05:57,276 --> 00:05:58,776
constraints, installing them,


197
00:05:59,236 --> 00:06:00,296
and last we're calling


198
00:06:00,296 --> 00:06:02,356
super.updateConstraints was an


199
00:06:02,356 --> 00:06:04,256
important thing to do because


200
00:06:04,586 --> 00:06:06,556
the UIView level implementation


201
00:06:06,556 --> 00:06:08,976
that this method does do work.


202
00:06:09,166 --> 00:06:10,966
OK, that's the basic structure


203
00:06:11,436 --> 00:06:14,256
of what it's doing and it does


204
00:06:14,256 --> 00:06:15,306
work, it's functions.


205
00:06:15,906 --> 00:06:18,676
But let's talk about what it's


206
00:06:18,676 --> 00:06:20,136
doing more concretely now so


207
00:06:20,136 --> 00:06:20,806
that we can understand the


208
00:06:20,806 --> 00:06:21,276
performance.


209
00:06:22,016 --> 00:06:23,116
So the first thing to understand


210
00:06:23,116 --> 00:06:24,736
is what exactly is


211
00:06:24,856 --> 00:06:26,336
updateConstraints, this method


212
00:06:26,336 --> 00:06:26,906
we're overriding.


213
00:06:28,316 --> 00:06:30,166
Well, it's one component of the


214
00:06:30,166 --> 00:06:30,646
Render Loop.


215
00:06:31,636 --> 00:06:33,266
The Render Loop is the process


216
00:06:33,506 --> 00:06:35,446
that runs potentially at 120


217
00:06:35,446 --> 00:06:36,476
times every second.


218
00:06:37,216 --> 00:06:38,976
That makes sure that all the


219
00:06:38,976 --> 00:06:40,346
content is ready to go for each


220
00:06:40,346 --> 00:06:40,656
frame.


221
00:06:41,656 --> 00:06:43,786
OK, so it consists of three


222
00:06:43,786 --> 00:06:45,066
phases -- Update Constraints,


223
00:06:45,066 --> 00:06:46,386
Layout, and Display.


224
00:06:47,096 --> 00:06:49,246
First every view that needs it


225
00:06:49,246 --> 00:06:50,916
will receive updateConstraints.


226
00:06:51,306 --> 00:06:53,306
And that runs from the leaf most


227
00:06:53,306 --> 00:06:55,096
views up to the view hierarchy


228
00:06:55,096 --> 00:06:55,786
towards the window.


229
00:06:56,656 --> 00:06:58,676
Next, every view receives layout


230
00:06:58,676 --> 00:06:59,086
sub views.


231
00:06:59,366 --> 00:07:00,616
This runs the opposite direction


232
00:07:00,616 --> 00:07:01,686
starting from the window going


233
00:07:01,686 --> 00:07:02,516
down towards the leaves.


234
00:07:03,176 --> 00:07:05,886
Last, every view gets draw if it


235
00:07:05,886 --> 00:07:07,856
needs it, that kind of thing.


236
00:07:08,636 --> 00:07:11,166
OK, what are these for?


237
00:07:11,166 --> 00:07:12,156
Why do they exist?


238
00:07:13,306 --> 00:07:14,736
Well, they all have the exact


239
00:07:14,736 --> 00:07:17,016
same purpose and they have exact


240
00:07:17,056 --> 00:07:18,226
parallel sets of methods.


241
00:07:18,646 --> 00:07:20,586
And that purpose is to avoid


242
00:07:20,846 --> 00:07:23,416
wasted work, which I can explain


243
00:07:23,416 --> 00:07:23,966
by example.


244
00:07:24,856 --> 00:07:28,516
So a label, a UI label needs to


245
00:07:28,516 --> 00:07:30,346
have constraints that describe


246
00:07:30,576 --> 00:07:33,466
the size of its text, OK?


247
00:07:34,056 --> 00:07:34,986
But there are many properties


248
00:07:34,986 --> 00:07:36,126
that contribute to that size.


249
00:07:36,406 --> 00:07:37,426
There's the text property


250
00:07:37,426 --> 00:07:39,936
itself, there's the font, and


251
00:07:39,936 --> 00:07:41,356
the text size, etcetera.


252
00:07:41,936 --> 00:07:44,196
One way to do this would be that


253
00:07:44,196 --> 00:07:44,946
every time one of those


254
00:07:44,946 --> 00:07:47,076
properties changes go re-measure


255
00:07:47,076 --> 00:07:47,576
your text.


256
00:07:48,556 --> 00:07:51,006
However, that would often be


257
00:07:51,006 --> 00:07:52,096
pretty inefficient because you


258
00:07:52,096 --> 00:07:53,206
usually change a bunch of these


259
00:07:53,206 --> 00:07:53,766
right in a row.


260
00:07:54,206 --> 00:07:55,076
When you're first setting up a


261
00:07:55,076 --> 00:07:56,176
label, you're probably going to


262
00:07:56,176 --> 00:07:57,306
call a bunch of these property


263
00:07:57,306 --> 00:07:58,506
setters and if you're


264
00:07:58,506 --> 00:07:59,976
re-measuring text on each one,


265
00:08:00,506 --> 00:08:01,536
all the intermediate ones are


266
00:08:01,536 --> 00:08:02,856
wasted, you really just want to


267
00:08:02,856 --> 00:08:03,516
measure at the end.


268
00:08:03,816 --> 00:08:04,896
And that's what the Render Loop


269
00:08:04,896 --> 00:08:05,316
gives you.


270
00:08:05,876 --> 00:08:07,656
Because what you can do instead


271
00:08:08,086 --> 00:08:10,066
is that inside a set font you


272
00:08:10,066 --> 00:08:10,646
can just call


273
00:08:10,646 --> 00:08:13,206
setNeedsUpdateConstraints and


274
00:08:13,336 --> 00:08:14,986
then you're guaranteed to get


275
00:08:15,176 --> 00:08:17,366
update constraints at the end


276
00:08:17,436 --> 00:08:18,466
before the frame goes to the


277
00:08:18,466 --> 00:08:18,826
screen.


278
00:08:19,816 --> 00:08:20,456
And that's what it's for.


279
00:08:21,486 --> 00:08:22,876
So the couple things to


280
00:08:22,876 --> 00:08:24,386
understand from this before we


281
00:08:24,386 --> 00:08:26,176
move on is number one it runs a


282
00:08:26,176 --> 00:08:27,626
lot, 120 frames a second.


283
00:08:28,406 --> 00:08:30,346
Number two they're parallel.


284
00:08:30,686 --> 00:08:31,906
So you can use that for


285
00:08:31,906 --> 00:08:32,696
intuition as well.


286
00:08:32,726 --> 00:08:33,866
If you feel like you understand


287
00:08:33,866 --> 00:08:35,035
the layout pass or have some


288
00:08:35,035 --> 00:08:36,956
feel for that, same deal when


289
00:08:36,956 --> 00:08:37,506
you're thinking about


290
00:08:37,506 --> 00:08:38,525
UpdateConstraints or you're


291
00:08:38,525 --> 00:08:39,256
thinking about display.


292
00:08:40,155 --> 00:08:41,746
And then the last thing being


293
00:08:41,746 --> 00:08:43,756
that the whole reason it's there


294
00:08:43,756 --> 00:08:45,886
is to avoid wasted work, to


295
00:08:45,886 --> 00:08:47,656
defer work and possibly skip it


296
00:08:47,656 --> 00:08:48,036
entirely.


297
00:08:49,006 --> 00:08:53,316
All right, so having looked at


298
00:08:53,316 --> 00:08:54,876
that we are now in position to


299
00:08:54,876 --> 00:08:56,156
analyze the rest of this method.


300
00:08:56,896 --> 00:08:59,476
See how we are -- every time


301
00:08:59,476 --> 00:09:01,076
it's called we're deactivating


302
00:09:01,276 --> 00:09:03,196
constraints and then activating


303
00:09:03,196 --> 00:09:03,996
them again new ones.


304
00:09:05,406 --> 00:09:06,546
We are saying this is analogous


305
00:09:06,546 --> 00:09:07,326
to layoutSubviews.


306
00:09:07,706 --> 00:09:09,616
So if we wrote the exact same


307
00:09:09,616 --> 00:09:11,966
code in layout Subviews that is


308
00:09:11,966 --> 00:09:14,076
the analog, that would be as if


309
00:09:14,476 --> 00:09:16,996
you -- every time layoutSubviews


310
00:09:16,996 --> 00:09:18,436
was called you destroyed all


311
00:09:18,436 --> 00:09:20,236
your Subviews, created them from


312
00:09:20,236 --> 00:09:22,076
scratch and then added them


313
00:09:22,076 --> 00:09:22,346
again.


314
00:09:23,436 --> 00:09:25,596
And I think a lot of people have


315
00:09:25,596 --> 00:09:26,836
the completely accurate


316
00:09:26,836 --> 00:09:27,946
intuition that that's not going


317
00:09:27,946 --> 00:09:28,726
to perform very well.


318
00:09:29,306 --> 00:09:31,916
So the thing to really get is


319
00:09:31,916 --> 00:09:33,266
that it's the same.


320
00:09:33,586 --> 00:09:34,976
Whatever intuition you take from


321
00:09:34,976 --> 00:09:36,436
that apply it to


322
00:09:36,436 --> 00:09:37,756
updateConstraints as well.


323
00:09:38,046 --> 00:09:39,216
When you are ripping down


324
00:09:39,216 --> 00:09:40,336
constraints like that you're


325
00:09:40,336 --> 00:09:42,376
doing a lot of extra work.


326
00:09:42,466 --> 00:09:43,156
So how do you fix it?


327
00:09:43,766 --> 00:09:46,076
Well, you need to use -- as we


328
00:09:46,076 --> 00:09:47,116
were saying, you need to make


329
00:09:47,116 --> 00:09:48,536
sure that you're not doing it


330
00:09:48,536 --> 00:09:49,286
more than once.


331
00:09:49,506 --> 00:09:50,606
It's for deferring work.


332
00:09:51,566 --> 00:09:53,076
So it should be something like


333
00:09:53,076 --> 00:09:54,576
this, we say did we already do


334
00:09:54,576 --> 00:09:55,056
this work?


335
00:09:55,636 --> 00:09:57,326
If we did then just don't do


336
00:09:57,326 --> 00:09:57,856
anything at all.


337
00:09:57,856 --> 00:09:58,886
If we haven't done it yet, then


338
00:09:58,886 --> 00:09:59,816
sure set up those constraints


339
00:09:59,816 --> 00:09:59,976
once.


340
00:10:00,046 --> 00:10:03,816
And that will perform well, OK?


341
00:10:04,176 --> 00:10:05,956
So this is again, this is


342
00:10:05,956 --> 00:10:07,916
actually the most common error


343
00:10:07,916 --> 00:10:09,636
that we see in client code,


344
00:10:09,866 --> 00:10:11,606
which is we call it churning the


345
00:10:11,606 --> 00:10:12,146
constraints.


346
00:10:12,846 --> 00:10:14,116
Unnecessarily ripping them down


347
00:10:14,116 --> 00:10:16,036
and putting them back up.


348
00:10:16,036 --> 00:10:17,326
OK, great.


349
00:10:17,886 --> 00:10:19,396
We are going to do more but


350
00:10:19,766 --> 00:10:21,196
stepping back for a second now


351
00:10:21,386 --> 00:10:22,676
to think about the Render Loop


352
00:10:22,676 --> 00:10:23,626
for a little bit.


353
00:10:24,296 --> 00:10:26,576
The Render Loop is great if you


354
00:10:26,576 --> 00:10:27,696
actually need it.


355
00:10:27,926 --> 00:10:29,066
The purpose again, it's really


356
00:10:29,066 --> 00:10:30,486
useful for avoiding that


357
00:10:30,486 --> 00:10:31,236
redundant work.


358
00:10:32,106 --> 00:10:34,386
But it's also dangerous because


359
00:10:34,616 --> 00:10:35,506
it runs to often.


360
00:10:35,826 --> 00:10:38,036
It's very sensitive code.


361
00:10:38,356 --> 00:10:40,586
So in a case like this usually


362
00:10:40,586 --> 00:10:41,236
what you want to do about


363
00:10:41,236 --> 00:10:43,486
sensitive code is not -- like,


364
00:10:43,486 --> 00:10:44,336
you should take care if you're


365
00:10:44,336 --> 00:10:45,196
writing it but you should also


366
00:10:45,196 --> 00:10:46,956
try to minimize how often you


367
00:10:46,956 --> 00:10:48,216
write sensitive code because,


368
00:10:48,616 --> 00:10:50,636
you know, you're probably going


369
00:10:50,636 --> 00:10:51,846
to screw it up.


370
00:10:52,166 --> 00:10:53,426
We all do.


371
00:10:53,426 --> 00:10:55,096
So in this case, in fact you


372
00:10:55,096 --> 00:10:55,986
might be, you should really


373
00:10:55,986 --> 00:10:57,716
think again like could I just do


374
00:10:57,716 --> 00:10:59,956
it once and not put it in


375
00:11:00,346 --> 00:11:01,256
updateConstraints?


376
00:11:01,326 --> 00:11:03,396
And a good way to do that is use


377
00:11:03,396 --> 00:11:03,936
Interface Builder.


378
00:11:04,286 --> 00:11:05,796
If you can use Interface Builder


379
00:11:06,026 --> 00:11:06,506
you should.


380
00:11:07,496 --> 00:11:08,606
It's great for all sorts of


381
00:11:08,606 --> 00:11:08,946
reasons.


382
00:11:08,946 --> 00:11:11,276
It puts you on a good path.


383
00:11:11,466 --> 00:11:13,206
OK, so that's great.


384
00:11:13,346 --> 00:11:14,876
We've now talked about that.


385
00:11:14,876 --> 00:11:15,856
I think we have a better


386
00:11:15,856 --> 00:11:17,286
understanding for why that's


387
00:11:17,286 --> 00:11:18,746
problematic, at least somewhat


388
00:11:18,966 --> 00:11:20,266
by analogy sub use.


389
00:11:21,336 --> 00:11:22,486
But for the purposes of this


390
00:11:22,486 --> 00:11:23,606
talk we want to do better than


391
00:11:23,606 --> 00:11:23,846
that.


392
00:11:23,846 --> 00:11:25,706
We don't just want to say this


393
00:11:25,706 --> 00:11:26,336
is bad.


394
00:11:26,536 --> 00:11:28,376
We want to really understand it


395
00:11:28,376 --> 00:11:29,666
and understand the process.


396
00:11:30,366 --> 00:11:32,956
So to do that we're now going to


397
00:11:33,016 --> 00:11:34,816
peel back the covers and start


398
00:11:34,816 --> 00:11:36,596
to really see what really


399
00:11:36,596 --> 00:11:36,976
happens.


400
00:11:37,546 --> 00:11:42,156
So when we activate these


401
00:11:42,156 --> 00:11:43,096
constraints, when we add the


402
00:11:43,096 --> 00:11:45,246
constraints, what is the process


403
00:11:45,246 --> 00:11:45,626
that occurs?


404
00:11:46,916 --> 00:11:48,016
Let's diagram it out at a high


405
00:11:48,016 --> 00:11:48,276
level.


406
00:11:48,626 --> 00:11:50,856
So if this is the view that


407
00:11:50,856 --> 00:11:51,946
we're adding the constraints to,


408
00:11:53,056 --> 00:11:55,596
this view is in a window.


409
00:11:55,726 --> 00:11:57,406
Hanging off the window is an


410
00:11:57,406 --> 00:11:59,426
internal object called the


411
00:11:59,426 --> 00:12:00,086
engine.


412
00:12:00,516 --> 00:12:01,626
And the engine is the


413
00:12:01,626 --> 00:12:03,066
computational core of Auto


414
00:12:03,066 --> 00:12:03,296
Layout.


415
00:12:03,816 --> 00:12:06,246
When the constraint is added


416
00:12:06,576 --> 00:12:10,336
what will happen is that we make


417
00:12:10,336 --> 00:12:12,146
an equation, which corresponds


418
00:12:12,146 --> 00:12:13,616
to the constraints, and we add


419
00:12:13,616 --> 00:12:15,846
that equation to the engine.


420
00:12:16,516 --> 00:12:18,306
The last object to understand in


421
00:12:18,306 --> 00:12:19,906
the diagram is that the equation


422
00:12:20,186 --> 00:12:22,996
is in terms of variables where a


423
00:12:22,996 --> 00:12:24,526
variable is like, you know, if I


424
00:12:24,526 --> 00:12:25,936
hand you an equation and I say


425
00:12:25,936 --> 00:12:28,336
solve for X, X is a variable.


426
00:12:29,396 --> 00:12:30,666
The things that we need to solve


427
00:12:30,666 --> 00:12:33,326
for in this case is the frame


428
00:12:33,326 --> 00:12:34,746
data of a view.


429
00:12:35,166 --> 00:12:36,356
So there will be four variables


430
00:12:36,356 --> 00:12:37,916
for every view, which is the min


431
00:12:37,916 --> 00:12:40,246
X, the min Y, the width, and the


432
00:12:40,796 --> 00:12:40,906
height.


433
00:12:41,126 --> 00:12:43,536
OK, so let's go into this


434
00:12:43,536 --> 00:12:43,956
process.


435
00:12:44,276 --> 00:12:45,436
So this was the layout we were


436
00:12:45,436 --> 00:12:45,906
going to do.


437
00:12:45,906 --> 00:12:46,976
We're going to focus just on the


438
00:12:46,976 --> 00:12:48,166
horizontal constraints for


439
00:12:48,166 --> 00:12:49,386
simplicity, but we're going to


440
00:12:49,386 --> 00:12:50,486
follow through the process.


441
00:12:51,356 --> 00:12:52,496
So the first thing that happens,


442
00:12:52,636 --> 00:12:53,996
as we said, is we make these


443
00:12:53,996 --> 00:12:55,536
equations, which look like this.


444
00:12:57,156 --> 00:12:57,986
These are pretty straight


445
00:12:57,986 --> 00:12:58,366
forward.


446
00:12:58,676 --> 00:13:00,656
The most interesting one is I


447
00:13:00,656 --> 00:13:01,936
think the space between the two


448
00:13:01,936 --> 00:13:03,896
text fields, which looks like


449
00:13:03,896 --> 00:13:05,366
we're saying it looks very, very


450
00:13:05,366 --> 00:13:07,656
similar to what you say with the


451
00:13:07,656 --> 00:13:08,896
constraint but it's somewhat


452
00:13:08,896 --> 00:13:10,416
lower level because it's in


453
00:13:10,416 --> 00:13:11,756
terms of these variables.


454
00:13:13,376 --> 00:13:16,806
OK, then each of those equations


455
00:13:16,806 --> 00:13:17,986
needs to get added to the


456
00:13:17,986 --> 00:13:18,336
engine.


457
00:13:18,336 --> 00:13:20,546
And we're actually going to


458
00:13:20,546 --> 00:13:22,596
follow along that process again


459
00:13:22,596 --> 00:13:24,006
with the goal being to have a


460
00:13:24,006 --> 00:13:26,816
good feel for the performance


461
00:13:26,816 --> 00:13:27,386
characteristics.


462
00:13:27,746 --> 00:13:28,696
What is happening when we do


463
00:13:28,696 --> 00:13:28,846
this?


464
00:13:29,856 --> 00:13:31,856
So the engine is trying to solve


465
00:13:31,856 --> 00:13:33,806
for these variables, which is


466
00:13:33,806 --> 00:13:36,086
something you may have done in


467
00:13:36,086 --> 00:13:37,726
algebra and it actually looks


468
00:13:37,726 --> 00:13:38,936
exactly the same.


469
00:13:38,936 --> 00:13:40,106
So let's follow it.


470
00:13:40,386 --> 00:13:42,166
So first equation comes in, says


471
00:13:42,166 --> 00:13:44,146
the first fields minX is 8.


472
00:13:44,486 --> 00:13:47,846
Cool. Its width is 100, fine.


473
00:13:48,436 --> 00:13:50,696
OK, when this one comes in we


474
00:13:50,696 --> 00:13:52,106
say the second field's minX is


475
00:13:52,106 --> 00:13:53,556
equal to the first minX plus the


476
00:13:53,556 --> 00:13:54,406
width plus 20.


477
00:13:54,406 --> 00:13:57,096
What would you do in algebra if


478
00:13:57,096 --> 00:13:59,046
somebody asked you to solve for


479
00:13:59,046 --> 00:13:59,666
these variables?


480
00:14:00,956 --> 00:14:02,836
You would substitute out for the


481
00:14:02,836 --> 00:14:03,826
ones that you already had in


482
00:14:03,826 --> 00:14:03,996
there.


483
00:14:04,146 --> 00:14:05,286
And that's exactly what's going


484
00:14:05,286 --> 00:14:05,646
to happen.


485
00:14:06,636 --> 00:14:08,486
If you are profiling, you'll see


486
00:14:08,486 --> 00:14:10,356
there is a genuine method in the


487
00:14:10,356 --> 00:14:12,186
engine that contains the word


488
00:14:12,186 --> 00:14:13,986
substitute as well as another


489
00:14:13,986 --> 00:14:16,956
140 characters because we are


490
00:14:16,956 --> 00:14:18,776
Cocoa Code Programmers.


491
00:14:18,776 --> 00:14:21,716
But and that's what it will do.


492
00:14:22,266 --> 00:14:23,726
And then, you know, and the last


493
00:14:23,726 --> 00:14:26,306
equation comes in and this looks


494
00:14:26,306 --> 00:14:26,726
done.


495
00:14:27,126 --> 00:14:29,106
it looks like that was all the


496
00:14:29,106 --> 00:14:30,636
work that had to happen at least


497
00:14:30,636 --> 00:14:32,656
in this case to solve for those


498
00:14:32,656 --> 00:14:34,466
variables and that's true.


499
00:14:35,006 --> 00:14:36,646
That's what I want to understand


500
00:14:36,646 --> 00:14:38,506
at this point is that the work


501
00:14:38,506 --> 00:14:39,856
that happens is both not very


502
00:14:39,856 --> 00:14:40,546
complicated.


503
00:14:41,046 --> 00:14:42,856
It corresponds very, very, very


504
00:14:42,856 --> 00:14:43,956
closely to what you would do if


505
00:14:43,956 --> 00:14:46,566
you were doing it by hand.


506
00:14:46,566 --> 00:14:47,476
And it's also not very


507
00:14:47,476 --> 00:14:47,916
expensive.


508
00:14:48,266 --> 00:14:49,826
It's just sort of substituting


509
00:14:49,826 --> 00:14:50,296
out like this.


510
00:14:50,536 --> 00:14:51,626
That's the work it does.


511
00:14:52,626 --> 00:14:54,976
OK, so now we have sort of


512
00:14:55,326 --> 00:14:56,686
solved for these variables in


513
00:14:56,686 --> 00:14:57,616
the engine but that's not


514
00:14:57,616 --> 00:14:57,936
layout.


515
00:14:58,386 --> 00:15:00,716
So let's finish the process.


516
00:15:02,036 --> 00:15:03,106
What happens for the rest of the


517
00:15:03,106 --> 00:15:04,516
process is that whenever the


518
00:15:04,516 --> 00:15:06,506
engine sort of assigns a value


519
00:15:06,506 --> 00:15:07,816
to one of these variables, it's


520
00:15:07,816 --> 00:15:09,746
going to inform the view that


521
00:15:09,746 --> 00:15:11,246
the variable came from and say,


522
00:15:11,246 --> 00:15:12,036
this thing changed.


523
00:15:12,496 --> 00:15:14,726
What will the view do in


524
00:15:14,726 --> 00:15:15,406
response to that?


525
00:15:16,526 --> 00:15:17,556
Well, if you think about it for


526
00:15:17,556 --> 00:15:19,646
a minute it will call it


527
00:15:19,646 --> 00:15:20,956
Superview and say hey,


528
00:15:20,956 --> 00:15:23,536
setNeedsLayout because it needs


529
00:15:23,536 --> 00:15:23,816
to move.


530
00:15:25,226 --> 00:15:27,196
OK, that was all happening as


531
00:15:27,226 --> 00:15:29,926
part of the update constraints


532
00:15:29,926 --> 00:15:30,216
phase.


533
00:15:31,136 --> 00:15:32,106
We now just receive


534
00:15:32,106 --> 00:15:33,716
setNeedsLayout, so at some point


535
00:15:33,716 --> 00:15:35,246
it will move on to the layout


536
00:15:35,246 --> 00:15:35,536
phase.


537
00:15:36,696 --> 00:15:39,846
Then, OK, so the last piece of


538
00:15:39,846 --> 00:15:40,846
the puzzle is that we'll


539
00:15:40,846 --> 00:15:42,236
receive, UIView will receive


540
00:15:42,236 --> 00:15:45,776
layout Subviews will do is it


541
00:15:45,776 --> 00:15:47,816
will copy that data from the


542
00:15:47,816 --> 00:15:49,096
engine into the frame.


543
00:15:50,336 --> 00:15:52,356
So it will just say engine, what


544
00:15:52,356 --> 00:15:53,546
are the values for those


545
00:15:53,546 --> 00:15:53,956
variables?


546
00:15:54,446 --> 00:15:56,676
Engine will tell it and it will


547
00:15:56,676 --> 00:15:58,746
just call set Superview of that


548
00:15:58,746 --> 00:16:00,216
view we'll call setBounds at


549
00:16:00,216 --> 00:16:02,076
setCenter on that Subview.


550
00:16:03,306 --> 00:16:04,606
And that is the entire process.


551
00:16:06,146 --> 00:16:07,686
So just step back and think for


552
00:16:07,686 --> 00:16:08,096
a second.


553
00:16:08,096 --> 00:16:08,996
Like, that is the step-by-step


554
00:16:08,996 --> 00:16:09,976
process of Layout.


555
00:16:10,206 --> 00:16:12,716
If you can try to internalize


556
00:16:12,716 --> 00:16:13,906
that and get a feel for it,


557
00:16:14,166 --> 00:16:15,236
you're going to have a much,


558
00:16:15,236 --> 00:16:17,066
much, much better feel for


559
00:16:17,066 --> 00:16:19,166
performance expectations around


560
00:16:19,166 --> 00:16:19,586
this stuff.


561
00:16:20,486 --> 00:16:21,896
In fact, let's see how that's


562
00:16:21,896 --> 00:16:23,676
going right now, because now


563
00:16:24,196 --> 00:16:26,206
when we look at this and we look


564
00:16:26,206 --> 00:16:26,886
at this method that we were


565
00:16:26,886 --> 00:16:28,416
looking at that where we're


566
00:16:28,416 --> 00:16:29,506
deactivating constraints and


567
00:16:29,506 --> 00:16:30,736
we're reactivating constraints,


568
00:16:31,106 --> 00:16:32,346
think about what we just did and


569
00:16:32,346 --> 00:16:33,656
think about what the engine is


570
00:16:33,656 --> 00:16:34,206
going to be doing.


571
00:16:35,596 --> 00:16:36,626
It's going to look like this.


572
00:16:40,426 --> 00:16:42,136
Which we call churning [laughs].


573
00:16:42,556 --> 00:16:45,226
So each operation it's doing is


574
00:16:45,226 --> 00:16:47,246
not super expensive, but it's


575
00:16:47,246 --> 00:16:49,576
doing a lot of them and it's


576
00:16:49,576 --> 00:16:51,086
just completely unnecessary.


577
00:16:51,086 --> 00:16:52,196
This work is wasted.


578
00:16:52,726 --> 00:16:54,456
So if you can feel this in your


579
00:16:54,456 --> 00:16:56,336
heart, if you can really feel


580
00:16:56,406 --> 00:16:57,636
that this is what is happening


581
00:16:58,046 --> 00:16:59,236
when you do this, then you're


582
00:16:59,236 --> 00:17:00,046
going to be in good shape.


583
00:17:00,356 --> 00:17:02,046
Then that's -- you're going to


584
00:17:02,046 --> 00:17:03,036
be in the same position we are


585
00:17:03,036 --> 00:17:05,056
to go through and really get a


586
00:17:05,056 --> 00:17:05,715
good feel for this.


587
00:17:06,636 --> 00:17:08,935
OK, so I hope that's great.


588
00:17:08,935 --> 00:17:14,246
There's one other big topic that


589
00:17:14,246 --> 00:17:15,236
we want to cover though.


590
00:17:15,236 --> 00:17:16,256
If we want to really have a good


591
00:17:16,256 --> 00:17:18,356
performance model is this idea


592
00:17:18,356 --> 00:17:20,766
that you only pay for what you


593
00:17:20,766 --> 00:17:21,965
use with Auto Layout.


594
00:17:22,086 --> 00:17:23,056
And having looked at this, I


595
00:17:23,056 --> 00:17:23,965
think we're in a good position


596
00:17:23,965 --> 00:17:26,266
to understand what that means,


597
00:17:26,266 --> 00:17:26,665
OK?


598
00:17:26,665 --> 00:17:28,346
To do this, let's say we double


599
00:17:28,346 --> 00:17:29,476
the situation we had before.


600
00:17:29,476 --> 00:17:31,346
So we have four text fields in


601
00:17:31,346 --> 00:17:32,526
two sort of independent


602
00:17:32,526 --> 00:17:33,076
hierarchies.


603
00:17:34,496 --> 00:17:36,886
Now something you can do is you


604
00:17:36,886 --> 00:17:38,426
can make a constraint that


605
00:17:38,426 --> 00:17:40,606
crosses the hierarchy like this.


606
00:17:40,976 --> 00:17:42,866
That goes -- that you can say,


607
00:17:42,866 --> 00:17:44,286
well text field one should be


608
00:17:44,286 --> 00:17:45,316
aligned with text field three


609
00:17:45,316 --> 00:17:46,016
even though they don't have the


610
00:17:46,016 --> 00:17:46,656
same Superview.


611
00:17:48,186 --> 00:17:50,956
I think sometimes people have


612
00:17:50,956 --> 00:17:52,486
the impression that because this


613
00:17:52,516 --> 00:17:54,526
possible, it means that things


614
00:17:54,526 --> 00:17:56,606
are going to be generally quite


615
00:17:56,606 --> 00:17:58,226
slow because anything could


616
00:17:58,226 --> 00:17:59,646
affect anything at any time and


617
00:17:59,646 --> 00:18:00,746
so it's just sort of a giant


618
00:18:00,746 --> 00:18:03,026
ball of mud and performance


619
00:18:03,026 --> 00:18:04,296
probably sucks.


620
00:18:05,056 --> 00:18:07,306
OK, but having looked at what


621
00:18:07,306 --> 00:18:08,936
we've looked at, let's see what


622
00:18:08,936 --> 00:18:11,086
happens in the common case where


623
00:18:11,086 --> 00:18:13,136
you don't have this because most


624
00:18:13,136 --> 00:18:14,006
of the time you don't.


625
00:18:14,506 --> 00:18:16,476
Most of the time views are only


626
00:18:16,476 --> 00:18:17,906
constrained to their parent and


627
00:18:17,906 --> 00:18:18,916
to their siblings.


628
00:18:19,736 --> 00:18:22,056
What you'll see there is that


629
00:18:22,056 --> 00:18:23,026
since we have these two


630
00:18:23,026 --> 00:18:25,586
independent blocks, that will


631
00:18:25,586 --> 00:18:27,036
give, if you look inside the


632
00:18:27,036 --> 00:18:28,366
engine it will be two


633
00:18:28,366 --> 00:18:29,926
independent blocks of equations


634
00:18:29,926 --> 00:18:31,206
that completely don't interact


635
00:18:31,206 --> 00:18:32,366
with each other, that don't have


636
00:18:32,366 --> 00:18:33,636
any overlapping variables.


637
00:18:34,146 --> 00:18:36,776
What that will do, is that


638
00:18:36,776 --> 00:18:38,186
because they completely don' t


639
00:18:38,186 --> 00:18:39,266
overlap, they just don't


640
00:18:39,266 --> 00:18:39,596
interact.


641
00:18:39,996 --> 00:18:41,296
And if we have one of these it


642
00:18:41,296 --> 00:18:43,586
will take some amount of time to


643
00:18:43,586 --> 00:18:43,966
deal with.


644
00:18:44,246 --> 00:18:45,536
If we have two of them it will


645
00:18:45,536 --> 00:18:47,256
just take twice the time because


646
00:18:47,556 --> 00:18:48,206
they have nothing to do with


647
00:18:48,206 --> 00:18:48,486
each other.


648
00:18:49,246 --> 00:18:50,316
Three of them, three times,


649
00:18:50,546 --> 00:18:52,566
etcetera, the point is you're


650
00:18:52,626 --> 00:18:54,366
going to see a line.


651
00:18:54,366 --> 00:18:56,836
You're going to see linear


652
00:18:56,836 --> 00:18:58,026
performance, which is the best


653
00:18:58,026 --> 00:18:59,016
you can get.


654
00:18:59,276 --> 00:19:00,706
That's perfect marks for this


655
00:19:00,706 --> 00:19:01,106
kind of thing.


656
00:19:01,246 --> 00:19:03,816
So I want to stress this again,


657
00:19:03,816 --> 00:19:05,496
the reason why it's linear is


658
00:19:05,496 --> 00:19:06,306
because there aren't any


659
00:19:06,306 --> 00:19:07,546
dependencies between these


660
00:19:07,546 --> 00:19:07,886
pieces.


661
00:19:08,516 --> 00:19:09,596
If you do have a dependency,


662
00:19:10,066 --> 00:19:11,846
then it will tie those blocks of


663
00:19:11,846 --> 00:19:14,106
equations together and that will


664
00:19:14,106 --> 00:19:15,996
be somewhat more, you know, more


665
00:19:15,996 --> 00:19:18,096
computation to deal with but


666
00:19:18,566 --> 00:19:19,876
that's only if you use it.


667
00:19:20,396 --> 00:19:21,456
And of course if you do have


668
00:19:21,456 --> 00:19:22,236
something like that, you know,


669
00:19:22,236 --> 00:19:23,446
if you're doing it by hand of


670
00:19:23,446 --> 00:19:24,246
course it's going to be a little


671
00:19:24,246 --> 00:19:25,396
bit more expensive that's what


672
00:19:25,396 --> 00:19:25,776
you expect.


673
00:19:26,006 --> 00:19:26,986
You're doing something more


674
00:19:26,986 --> 00:19:27,446
complicated.


675
00:19:27,546 --> 00:19:29,626
So it's kind of this usual thing


676
00:19:29,626 --> 00:19:31,456
that we often aim for in Cocoa,


677
00:19:31,456 --> 00:19:32,626
which is that the simple things


678
00:19:32,626 --> 00:19:34,286
are simple and the complex


679
00:19:34,286 --> 00:19:34,976
things are possible.


680
00:19:35,306 --> 00:19:36,476
In this case it's more like they


681
00:19:36,476 --> 00:19:37,176
cost a little more.


682
00:19:37,596 --> 00:19:38,986
But you're not paying for it if


683
00:19:38,986 --> 00:19:41,296
you're not using it, which is


684
00:19:41,296 --> 00:19:43,036
actually the right way to think


685
00:19:43,036 --> 00:19:44,716
of the whole engine in terms of


686
00:19:44,716 --> 00:19:46,726
intuition again, you can think


687
00:19:46,726 --> 00:19:49,206
of it as a cache for layout and


688
00:19:49,206 --> 00:19:50,446
as a dependency tracker.


689
00:19:51,296 --> 00:19:52,736
It's very, very targeted.


690
00:19:52,776 --> 00:19:54,396
It understands which constraints


691
00:19:54,396 --> 00:19:55,896
affect which views, and when you


692
00:19:55,896 --> 00:19:58,346
change things it just updates


693
00:19:58,346 --> 00:19:59,526
exactly the things that are


694
00:19:59,526 --> 00:19:59,866
needed.


695
00:20:00,396 --> 00:20:02,616
And this has implications on how


696
00:20:02,616 --> 00:20:02,976
you write code too.


697
00:20:04,696 --> 00:20:07,306
Sometimes we see -- one issue we


698
00:20:07,306 --> 00:20:08,886
sometimes see is people taking


699
00:20:08,886 --> 00:20:11,236
great pains to avoid making


700
00:20:11,236 --> 00:20:13,686
constraints because they have


701
00:20:13,686 --> 00:20:15,116
the impression it's going to be


702
00:20:15,116 --> 00:20:15,546
expensive.


703
00:20:16,476 --> 00:20:17,706
But actually, it's very, very


704
00:20:17,706 --> 00:20:18,296
targeted.


705
00:20:18,526 --> 00:20:19,736
As long as the constraints that


706
00:20:19,736 --> 00:20:21,866
you're making correspond closely


707
00:20:21,866 --> 00:20:22,746
to the problem that's being


708
00:20:22,746 --> 00:20:24,456
solved, it's pretty unlikely


709
00:20:24,456 --> 00:20:25,556
that whatever you do, if you


710
00:20:25,556 --> 00:20:26,646
tried to dodge it, it's going to


711
00:20:26,646 --> 00:20:27,636
be more performance.


712
00:20:28,126 --> 00:20:29,796
Oftentimes we'll see people


713
00:20:29,796 --> 00:20:31,036
doing very complicated


714
00:20:31,036 --> 00:20:33,006
measurement and adding things up


715
00:20:33,006 --> 00:20:34,406
and sort of trying to pull


716
00:20:34,406 --> 00:20:35,756
information out and then push it


717
00:20:35,756 --> 00:20:37,496
back in and that's almost always


718
00:20:37,496 --> 00:20:38,986
more expensive than just


719
00:20:38,986 --> 00:20:40,126
directly expressing as a


720
00:20:40,126 --> 00:20:41,296
constraint what you're after.


721
00:20:42,606 --> 00:20:45,456
Now the converse side of that is


722
00:20:45,456 --> 00:20:47,286
that sometimes we see


723
00:20:47,716 --> 00:20:49,366
hierarchies that look like


724
00:20:49,526 --> 00:20:51,006
something like this where we see


725
00:20:51,006 --> 00:20:52,356
lots and lots of constraints and


726
00:20:52,356 --> 00:20:54,456
lots of priority and it's really


727
00:20:54,456 --> 00:20:56,176
not clear what's happening and


728
00:20:56,176 --> 00:20:58,146
this is a -- usually this is a


729
00:20:58,146 --> 00:21:00,466
telltale sign of this being the


730
00:21:00,466 --> 00:21:01,816
situation that there's actually


731
00:21:01,816 --> 00:21:03,426
just two completely separate


732
00:21:03,426 --> 00:21:04,896
layouts that someone has in mind


733
00:21:05,346 --> 00:21:07,406
and we're trying to sort of pack


734
00:21:07,406 --> 00:21:09,196
them together into one set of


735
00:21:09,196 --> 00:21:10,766
constraints and do it all in


736
00:21:10,766 --> 00:21:11,286
one.


737
00:21:11,836 --> 00:21:13,606
And that's also not a real good


738
00:21:13,606 --> 00:21:13,906
idea.


739
00:21:14,276 --> 00:21:17,056
So that will -- that creates a


740
00:21:17,056 --> 00:21:18,316
lot of false dependencies,


741
00:21:18,616 --> 00:21:19,776
places where it seems like


742
00:21:19,776 --> 00:21:20,846
things interact that they really


743
00:21:20,846 --> 00:21:21,196
don't.


744
00:21:21,586 --> 00:21:22,786
It's also nearly impossible to


745
00:21:22,786 --> 00:21:25,506
Debug, if you haven't noticed.


746
00:21:26,186 --> 00:21:30,406
So the overall advice is try to


747
00:21:30,406 --> 00:21:32,026
model the problem as directly as


748
00:21:32,026 --> 00:21:32,516
possible.


749
00:21:32,766 --> 00:21:33,826
Kasia is going to walk through


750
00:21:33,826 --> 00:21:34,786
this kind of case where you're


751
00:21:34,786 --> 00:21:35,736
switching between different


752
00:21:35,736 --> 00:21:36,706
layouts and show that a little


753
00:21:36,706 --> 00:21:37,396
more explicitly.


754
00:21:38,186 --> 00:21:40,106
But that's the general advice.


755
00:21:40,346 --> 00:21:41,886
Just use it in a natural way.


756
00:21:42,036 --> 00:21:43,276
It's better for both performance


757
00:21:43,606 --> 00:21:45,176
and for understandability.


758
00:21:45,736 --> 00:21:50,596
OK, so that most of what we have


759
00:21:50,596 --> 00:21:50,926
to say.


760
00:21:51,186 --> 00:21:52,526
But since we're trying to build


761
00:21:52,526 --> 00:21:54,276
an overall mental model of the


762
00:21:54,276 --> 00:21:55,336
performance characteristics of


763
00:21:55,336 --> 00:21:57,146
Layout, I want to at least make


764
00:21:57,146 --> 00:21:58,836
sure we touch on all of the


765
00:21:58,836 --> 00:21:59,636
major features.


766
00:21:59,856 --> 00:22:01,186
So there are some other things


767
00:22:01,186 --> 00:22:01,546
you can do.


768
00:22:02,676 --> 00:22:04,046
And let's discuss.


769
00:22:04,626 --> 00:22:05,946
So you can say that some


770
00:22:05,946 --> 00:22:07,186
particular view should be at


771
00:22:07,186 --> 00:22:08,346
least 100 points wide.


772
00:22:08,466 --> 00:22:09,366
You can use inequalities.


773
00:22:10,106 --> 00:22:10,806
What does that cost?


774
00:22:11,736 --> 00:22:12,816
Very, very, very little.


775
00:22:13,006 --> 00:22:13,876
Compared to just saying it's


776
00:22:13,876 --> 00:22:15,736
equal to hundred points wide.


777
00:22:15,736 --> 00:22:17,346
Since we went internals a little


778
00:22:17,656 --> 00:22:19,166
bit, it's going to coast exactly


779
00:22:19,166 --> 00:22:19,966
one more variable.


780
00:22:20,236 --> 00:22:20,636
That's it.


781
00:22:21,156 --> 00:22:23,936
You can also call set constant.


782
00:22:24,436 --> 00:22:26,066
The example use case for this is


783
00:22:26,066 --> 00:22:27,926
something like I have a gesture


784
00:22:27,926 --> 00:22:29,206
recognizer and I'm kind of


785
00:22:29,266 --> 00:22:31,396
trying to drag a view around and


786
00:22:31,396 --> 00:22:32,676
what I'm going to do is every


787
00:22:32,676 --> 00:22:34,976
time I receive a call from the


788
00:22:34,976 --> 00:22:36,196
gesture recognizer I'm going to


789
00:22:36,196 --> 00:22:38,416
take its translation and I'm


790
00:22:38,416 --> 00:22:39,296
going to pump it into a


791
00:22:39,296 --> 00:22:41,006
constraint by calling set


792
00:22:41,006 --> 00:22:43,866
constant on that constraint with


793
00:22:44,626 --> 00:22:45,896
that translation value.


794
00:22:46,616 --> 00:22:48,966
OK, what that's going to do is


795
00:22:48,966 --> 00:22:50,616
we talked about how the engine


796
00:22:50,616 --> 00:22:51,786
is a dependency tracker.


797
00:22:52,346 --> 00:22:53,976
This exploits that to the


798
00:22:53,976 --> 00:22:55,016
maximal degree.


799
00:22:55,656 --> 00:22:58,016
So that's sort of a very, very,


800
00:22:58,016 --> 00:23:00,266
very fast one step update of


801
00:23:00,266 --> 00:23:02,426
just exactly what has to change


802
00:23:02,696 --> 00:23:03,756
due to this one constraint


803
00:23:03,756 --> 00:23:04,106
changing.


804
00:23:04,916 --> 00:23:05,896
So that's a performance


805
00:23:05,896 --> 00:23:06,606
optimization.


806
00:23:06,606 --> 00:23:07,936
That's why we even have this


807
00:23:07,936 --> 00:23:08,936
method set constant.


808
00:23:09,476 --> 00:23:11,526
Last to talk about it priority.


809
00:23:12,436 --> 00:23:14,536
So here you can say, you know,


810
00:23:14,536 --> 00:23:16,266
you can say this view should


811
00:23:16,266 --> 00:23:18,676
ideally be 100 points wide, but


812
00:23:18,876 --> 00:23:20,046
if something else prevents that


813
00:23:20,046 --> 00:23:21,766
just please be as close as


814
00:23:21,766 --> 00:23:22,236
possible.


815
00:23:22,956 --> 00:23:24,636
This does incur some more work,


816
00:23:25,326 --> 00:23:26,196
some amount of work.


817
00:23:26,196 --> 00:23:27,666
So let's talk about that a


818
00:23:27,666 --> 00:23:28,306
little bit more.


819
00:23:28,576 --> 00:23:29,866
Another way to think about that


820
00:23:30,206 --> 00:23:31,626
is to say that the width of that


821
00:23:31,626 --> 00:23:32,936
field is going to be equal to


822
00:23:32,936 --> 00:23:35,666
100 plus some error and please


823
00:23:35,666 --> 00:23:36,716
minimize the error.


824
00:23:37,436 --> 00:23:38,496
That's what you're asking for.


825
00:23:39,776 --> 00:23:41,266
So there is an error


826
00:23:41,266 --> 00:23:42,536
minimization phase I didn't


827
00:23:42,536 --> 00:23:43,156
discuss before.


828
00:23:43,366 --> 00:23:46,816
So when the view asks the engine


829
00:23:46,816 --> 00:23:48,086
as part of layout subviews and


830
00:23:48,086 --> 00:23:49,896
says, hey what's the value for


831
00:23:49,896 --> 00:23:50,446
these variables?


832
00:23:50,686 --> 00:23:51,866
The engine needs to make sure


833
00:23:51,866 --> 00:23:53,366
that all of those error terms


834
00:23:53,366 --> 00:23:54,626
have been minimized first.


835
00:23:55,386 --> 00:23:57,476
And this is actually, this is --


836
00:23:57,476 --> 00:23:58,546
I'm not going to go into how


837
00:23:58,546 --> 00:23:59,976
this works but I am going to


838
00:23:59,976 --> 00:24:00,726
talk a little bit about


839
00:24:00,726 --> 00:24:02,006
performance characteristics and


840
00:24:02,056 --> 00:24:02,996
I'm also going to say that's


841
00:24:02,996 --> 00:24:03,586
super neat.


842
00:24:04,536 --> 00:24:06,746
So you might want to look this


843
00:24:06,746 --> 00:24:07,196
up.


844
00:24:07,196 --> 00:24:08,476
This is the simple X algorithm.


845
00:24:08,476 --> 00:24:09,526
This is what we're really doing.


846
00:24:09,866 --> 00:24:11,206
It's super old.


847
00:24:11,676 --> 00:24:12,666
It was developed during World


848
00:24:12,666 --> 00:24:13,186
War II.


849
00:24:13,576 --> 00:24:16,606
What you might note is before


850
00:24:16,806 --> 00:24:17,246
computers.


851
00:24:17,416 --> 00:24:19,026
In fact, the people who used to


852
00:24:19,026 --> 00:24:20,356
be called computers, before


853
00:24:20,356 --> 00:24:21,156
there were machines that were


854
00:24:21,156 --> 00:24:22,416
called computers, this is kind


855
00:24:22,416 --> 00:24:23,016
of what they're doing.


856
00:24:23,486 --> 00:24:25,706
They're doing it by hand, which


857
00:24:25,856 --> 00:24:27,146
does give you some feel for the


858
00:24:27,146 --> 00:24:28,076
performance characteristics.


859
00:24:28,316 --> 00:24:29,566
It must be pretty fast if you do


860
00:24:29,566 --> 00:24:30,096
it by hand.


861
00:24:30,376 --> 00:24:30,816
And it is.


862
00:24:31,126 --> 00:24:33,336
It's pretty much the same stuff


863
00:24:33,336 --> 00:24:34,106
we've been doing.


864
00:24:34,166 --> 00:24:35,326
It's more substitutions.


865
00:24:35,726 --> 00:24:36,966
That's how you should think of


866
00:24:36,966 --> 00:24:37,066
it.


867
00:24:38,266 --> 00:24:39,676
Anyway, but it does -- you know,


868
00:24:39,676 --> 00:24:40,986
when you use priority it does


869
00:24:40,986 --> 00:24:42,116
cost at this level so that's


870
00:24:42,256 --> 00:24:43,146
just something to be aware of.


871
00:24:44,226 --> 00:24:45,526
OK, and other than that it's


872
00:24:45,526 --> 00:24:46,216
just same as before.


873
00:24:46,616 --> 00:24:50,276
So that's what I wanted to talk


874
00:24:50,276 --> 00:24:50,546
about.


875
00:24:50,756 --> 00:24:52,556
So that is our attempt to build


876
00:24:52,556 --> 00:24:54,836
this intuitive understanding of


877
00:24:54,836 --> 00:24:56,086
the performance characteristics


878
00:24:56,086 --> 00:24:58,046
around Auto Layout.


879
00:24:58,176 --> 00:24:59,296
So quick review of what we


880
00:24:59,296 --> 00:24:59,746
talked about.


881
00:25:00,226 --> 00:25:01,186
Try not to churn your


882
00:25:01,186 --> 00:25:01,766
constraints.


883
00:25:02,316 --> 00:25:03,036
That's when you're doing all


884
00:25:03,036 --> 00:25:04,576
this work that just doesn't


885
00:25:04,576 --> 00:25:04,826
matter.


886
00:25:05,116 --> 00:25:05,686
So don't do it.


887
00:25:06,326 --> 00:25:08,256
When you do work with


888
00:25:08,256 --> 00:25:09,876
constraints it's basic algebra


889
00:25:10,176 --> 00:25:11,566
and that algebra is happening


890
00:25:11,566 --> 00:25:12,706
when you add constraints, when


891
00:25:12,706 --> 00:25:14,586
you remove constraints, when you


892
00:25:14,586 --> 00:25:16,706
call set constant, that's the


893
00:25:16,706 --> 00:25:17,466
primary times.


894
00:25:17,956 --> 00:25:20,956
And then also, you know, when we


895
00:25:20,956 --> 00:25:22,196
have this error minimization


896
00:25:22,746 --> 00:25:22,866
phase.


897
00:25:23,436 --> 00:25:26,916
The way to think about what Auto


898
00:25:26,916 --> 00:25:28,546
Layout does is that it's a cash


899
00:25:28,546 --> 00:25:29,806
for your layout, we saw the


900
00:25:29,806 --> 00:25:31,226
engine sort of contains all


901
00:25:31,226 --> 00:25:33,016
those solved values and it's a


902
00:25:33,016 --> 00:25:34,766
dependency tracker so that when


903
00:25:34,766 --> 00:25:36,916
things change we can update


904
00:25:37,066 --> 00:25:38,586
those values in a super, super


905
00:25:38,586 --> 00:25:39,296
targeted way.


906
00:25:39,896 --> 00:25:41,016
Which leads to our last point,


907
00:25:41,186 --> 00:25:43,236
which is that you only pay for


908
00:25:43,236 --> 00:25:44,216
the features that you're using.


909
00:25:45,266 --> 00:25:46,916
That's what we talked about.


910
00:25:47,276 --> 00:25:48,566
You know, that's your intuition.


911
00:25:48,956 --> 00:25:51,186
And for the rest of the talk I'm


912
00:25:51,186 --> 00:25:53,376
going to turn it over to Kasia


913
00:25:53,376 --> 00:25:54,556
because if you, again, if you


914
00:25:54,556 --> 00:25:55,916
only rely on intuition, things


915
00:25:55,916 --> 00:25:56,586
are not going to go well.


916
00:25:56,866 --> 00:25:58,336
So she's now going to go into


917
00:25:58,336 --> 00:25:59,946
some analysis, avoid we talked


918
00:25:59,946 --> 00:26:01,286
about and putting that intuition


919
00:26:01,286 --> 00:26:02,006
into practice.


920
00:26:02,336 --> 00:26:03,926
So please enjoy.


921
00:26:04,516 --> 00:26:11,546
[ Applause ]


922
00:26:12,046 --> 00:26:12,846
>> Ok let me get to my slide


923
00:26:12,846 --> 00:26:13,096
here.


924
00:26:14,056 --> 00:26:14,586
Thank you, Ken.


925
00:26:14,946 --> 00:26:15,696
Hi everybody.


926
00:26:15,956 --> 00:26:17,246
My name is Kasia Wawer.


927
00:26:17,796 --> 00:26:18,896
I am a member of the iOS


928
00:26:18,896 --> 00:26:20,886
Keyboards Team and we use Auto


929
00:26:20,886 --> 00:26:22,106
Layout and we love it.


930
00:26:22,646 --> 00:26:24,006
So I get to talk to all of you


931
00:26:24,006 --> 00:26:24,916
about building efficient


932
00:26:24,916 --> 00:26:25,206
layouts.


933
00:26:26,286 --> 00:26:27,056
All right, let's go back to


934
00:26:27,056 --> 00:26:28,376
Constraint Churn real quick


935
00:26:28,376 --> 00:26:28,586
here.


936
00:26:29,116 --> 00:26:30,396
Constraint churn as we heard


937
00:26:30,396 --> 00:26:31,876
happens when you change your


938
00:26:31,876 --> 00:26:33,726
constraints but the actual views


939
00:26:33,726 --> 00:26:35,396
don't need to move so you're


940
00:26:35,396 --> 00:26:36,816
sending extra work to the engine


941
00:26:37,276 --> 00:26:38,456
and enough of that can affect


942
00:26:38,456 --> 00:26:39,106
your performance.


943
00:26:39,106 --> 00:26:40,776
So you tend to want to avoid it.


944
00:26:41,636 --> 00:26:43,646
So let's talk about how you


945
00:26:43,646 --> 00:26:45,746
might run into this problem and


946
00:26:45,746 --> 00:26:46,556
how you might get out of it.


947
00:26:46,556 --> 00:26:48,386
So we're going to work with a


948
00:26:48,386 --> 00:26:49,056
spec here.


949
00:26:49,286 --> 00:26:50,586
This is for a social media type


950
00:26:50,586 --> 00:26:50,866
app.


951
00:26:51,586 --> 00:26:52,526
There's an avatar view that


952
00:26:52,526 --> 00:26:53,566
shows you who is sharing.


953
00:26:53,566 --> 00:26:56,336
There's a title, a date, and a


954
00:26:56,336 --> 00:26:59,206
log entry view and for that


955
00:26:59,206 --> 00:27:00,186
you're going to need some


956
00:27:00,186 --> 00:27:01,606
spacing, you're going to need


957
00:27:01,606 --> 00:27:03,416
some sizing and you're probably


958
00:27:03,416 --> 00:27:04,276
going to need some alignment


959
00:27:04,366 --> 00:27:04,516
too.


960
00:27:05,566 --> 00:27:08,036
But this is actually not a pure


961
00:27:08,036 --> 00:27:08,946
social media app.


962
00:27:09,266 --> 00:27:11,036
It is a semi social media app,


963
00:27:11,476 --> 00:27:12,476
where you can choose whether you


964
00:27:12,476 --> 00:27:13,276
want to share things.


965
00:27:14,176 --> 00:27:15,986
So there's also optionally a


966
00:27:15,986 --> 00:27:16,756
view that says that you've


967
00:27:16,756 --> 00:27:17,846
shared and who you've shared


968
00:27:17,846 --> 00:27:18,016
with.


969
00:27:18,946 --> 00:27:20,376
And no social media app would be


970
00:27:20,376 --> 00:27:22,166
complete without the ability to


971
00:27:22,166 --> 00:27:23,036
share cat pictures.


972
00:27:23,936 --> 00:27:24,896
So that's another layout that


973
00:27:24,896 --> 00:27:25,846
you might have to put in.


974
00:27:26,836 --> 00:27:28,326
And maybe you don't even want to


975
00:27:28,326 --> 00:27:29,236
share that cat picture because


976
00:27:29,236 --> 00:27:30,346
it's just too good, you want to


977
00:27:30,346 --> 00:27:31,066
keep it to yourself.


978
00:27:32,056 --> 00:27:33,586
So we have four very similar


979
00:27:33,586 --> 00:27:33,976
layouts.


980
00:27:34,626 --> 00:27:35,996
They're not the same and there's


981
00:27:35,996 --> 00:27:36,776
going to need to be some


982
00:27:36,776 --> 00:27:38,196
adjustment when these table view


983
00:27:38,196 --> 00:27:39,306
cells come on to the screen.


984
00:27:39,396 --> 00:27:40,396
If I didn't mention it these are


985
00:27:40,396 --> 00:27:41,156
in table view cells.


986
00:27:42,026 --> 00:27:43,406
And let's say that you are


987
00:27:43,406 --> 00:27:45,236
working on performance in this


988
00:27:45,236 --> 00:27:47,026
app and you ran it for the first


989
00:27:47,026 --> 00:27:48,266
time and this is the scrolling


990
00:27:48,266 --> 00:27:49,036
performance you got.


991
00:27:49,386 --> 00:27:51,316
And there are a lot of hiccups


992
00:27:51,316 --> 00:27:52,706
there, especially on the scroll


993
00:27:52,706 --> 00:27:52,976
back to top.


994
00:27:53,086 --> 00:27:55,666
So you're like, OK, how do I


995
00:27:55,666 --> 00:27:57,026
improve this app?


996
00:27:57,026 --> 00:27:57,716
What's going on?


997
00:27:58,636 --> 00:28:00,986
So I get to introduce something


998
00:28:01,096 --> 00:28:02,406
new today, a sneak peek into


999
00:28:02,406 --> 00:28:03,416
something we're working on.


1000
00:28:03,886 --> 00:28:05,096
This is not actually available


1001
00:28:05,096 --> 00:28:07,486
in the beta but stay tuned


1002
00:28:07,946 --> 00:28:08,886
because we're going to be


1003
00:28:08,886 --> 00:28:10,176
introducing an instrument for


1004
00:28:10,176 --> 00:28:10,386
layout.


1005
00:28:12,076 --> 00:28:12,796
And, OK.


1006
00:28:13,516 --> 00:28:18,716
[ Applause ]


1007
00:28:19,216 --> 00:28:20,086
I'm glad you are excited.


1008
00:28:20,606 --> 00:28:21,866
That's good motivation.


1009
00:28:22,576 --> 00:28:24,056
Anyway, let's take a look at


1010
00:28:24,106 --> 00:28:24,526
what's here.


1011
00:28:25,466 --> 00:28:27,186
The top track is your standard


1012
00:28:27,226 --> 00:28:28,856
how much CPU is being used.


1013
00:28:29,496 --> 00:28:30,646
And this is sort of your canary


1014
00:28:30,646 --> 00:28:31,556
in the coalmine view.


1015
00:28:31,756 --> 00:28:33,116
If there are a lot of peaks here


1016
00:28:33,446 --> 00:28:34,486
you have an indication that you


1017
00:28:34,486 --> 00:28:35,436
might have something you need to


1018
00:28:35,436 --> 00:28:36,846
look at in your layout.


1019
00:28:37,576 --> 00:28:38,686
And if it's pretty flat,


1020
00:28:39,166 --> 00:28:40,106
probably your performance


1021
00:28:40,106 --> 00:28:41,056
problems are originating


1022
00:28:41,056 --> 00:28:41,526
somewhere else.


1023
00:28:42,466 --> 00:28:43,906
Below that we will be


1024
00:28:43,906 --> 00:28:45,416
specifically tracking constraint


1025
00:28:45,416 --> 00:28:45,756
churn.


1026
00:28:46,446 --> 00:28:47,616
The height of the bars in this


1027
00:28:47,616 --> 00:28:49,846
instance correspond to the


1028
00:28:49,846 --> 00:28:51,196
number of views that are


1029
00:28:51,196 --> 00:28:52,596
experiencing constraint churn.


1030
00:28:53,506 --> 00:28:54,506
So when you see a big piece


1031
00:28:54,506 --> 00:28:55,736
there you know a lot of views


1032
00:28:55,736 --> 00:28:56,226
are affected.


1033
00:28:57,446 --> 00:28:59,456
We're also going to show you how


1034
00:28:59,456 --> 00:29:00,746
to remove and change constraint


1035
00:29:01,776 --> 00:29:05,326
instances and finally sizing for


1036
00:29:05,326 --> 00:29:06,716
UILabel and other text views.


1037
00:29:06,906 --> 00:29:08,286
This one says UILabel because


1038
00:29:08,286 --> 00:29:09,156
that's what's in this app.


1039
00:29:09,956 --> 00:29:11,026
It's also going to track other


1040
00:29:11,026 --> 00:29:12,186
types of text views as well.


1041
00:29:13,786 --> 00:29:16,286
So this was taken with that app


1042
00:29:16,366 --> 00:29:18,556
scrolling, so what do we look at


1043
00:29:18,556 --> 00:29:18,816
here?


1044
00:29:19,206 --> 00:29:21,136
There are several peaks in the


1045
00:29:21,136 --> 00:29:24,236
CPU view but let's zoom in on


1046
00:29:24,236 --> 00:29:25,776
this one because right below it


1047
00:29:25,776 --> 00:29:27,106
I see a big jump in constraint


1048
00:29:27,106 --> 00:29:28,386
churn and that's a little


1049
00:29:28,386 --> 00:29:28,926
concerning.


1050
00:29:29,906 --> 00:29:31,396
So if you highlight this view


1051
00:29:31,526 --> 00:29:32,966
and go down to the detailed view


1052
00:29:33,666 --> 00:29:35,486
in instruments, what you'll see


1053
00:29:35,726 --> 00:29:36,846
is a list of the views that are


1054
00:29:36,846 --> 00:29:38,396
affected by churn by view


1055
00:29:38,396 --> 00:29:38,896
description.


1056
00:29:39,586 --> 00:29:40,556
And we are grouping them by


1057
00:29:40,556 --> 00:29:42,326
Superview so that in an instance


1058
00:29:42,326 --> 00:29:44,576
of say Table View Cells, it's


1059
00:29:44,576 --> 00:29:46,486
easier to see that it's


1060
00:29:46,486 --> 00:29:48,286
happening over and over in a


1061
00:29:48,286 --> 00:29:49,556
specific context and not


1062
00:29:49,556 --> 00:29:50,116
different ones.


1063
00:29:51,016 --> 00:29:52,536
So in this instance we see that


1064
00:29:52,536 --> 00:29:54,586
the avatar view and three labels


1065
00:29:54,966 --> 00:29:55,956
are experiencing churn.


1066
00:29:57,316 --> 00:29:59,646
And since I am the one who ran


1067
00:29:59,646 --> 00:30:01,696
this through the instrument, I


1068
00:30:01,696 --> 00:30:02,386
know that these labels


1069
00:30:02,426 --> 00:30:03,876
correspond to the Title Label,


1070
00:30:03,876 --> 00:30:05,386
Date Label, and our Log Entry


1071
00:30:05,386 --> 00:30:05,686
Label.


1072
00:30:07,036 --> 00:30:08,516
That's almost all of our views


1073
00:30:08,516 --> 00:30:09,086
in this cell.


1074
00:30:09,086 --> 00:30:10,736
That's a little concerning.


1075
00:30:11,406 --> 00:30:12,136
Let's see what happened.


1076
00:30:13,766 --> 00:30:15,066
All right, back to our spec


1077
00:30:15,156 --> 00:30:15,376
here.


1078
00:30:16,326 --> 00:30:19,626
So look into the code and find


1079
00:30:19,666 --> 00:30:21,096
that UpdateConstraints is being


1080
00:30:21,096 --> 00:30:21,566
overridden.


1081
00:30:22,526 --> 00:30:24,876
And in that method when anything


1082
00:30:24,876 --> 00:30:25,956
changes or when


1083
00:30:25,956 --> 00:30:27,426
UpdateConstraints runs at all,


1084
00:30:27,896 --> 00:30:28,696
we're removing all of the


1085
00:30:28,696 --> 00:30:30,716
constraints and then adding back


1086
00:30:30,716 --> 00:30:32,056
the ones that we think we still


1087
00:30:32,056 --> 00:30:32,276
need.


1088
00:30:33,876 --> 00:30:35,956
Well, everything landed back in


1089
00:30:35,956 --> 00:30:37,206
the same place where it started.


1090
00:30:37,646 --> 00:30:39,436
So that removal just is


1091
00:30:39,436 --> 00:30:41,146
contributing to performance


1092
00:30:41,146 --> 00:30:41,516
issues.


1093
00:30:42,486 --> 00:30:44,986
So in the instance of the social


1094
00:30:44,986 --> 00:30:46,986
label here, social avatar thing,


1095
00:30:47,356 --> 00:30:49,176
being added and removed, we


1096
00:30:49,176 --> 00:30:50,076
don't actually need to pull it


1097
00:30:50,076 --> 00:30:50,626
all the way out.


1098
00:30:51,806 --> 00:30:52,856
When you look at the constraints


1099
00:30:52,856 --> 00:30:54,966
around this view, you'll see


1100
00:30:54,966 --> 00:30:56,036
that they don't actually


1101
00:30:56,036 --> 00:30:57,316
interact with anything else,


1102
00:30:57,876 --> 00:30:58,946
just that particular view.


1103
00:30:59,516 --> 00:31:01,156
So here you can use, you know,


1104
00:31:01,156 --> 00:31:03,366
this neat little feature called


1105
00:31:03,566 --> 00:31:04,816
setHidden, maybe you've heard of


1106
00:31:05,456 --> 00:31:05,536
it.


1107
00:31:05,656 --> 00:31:07,936
And because it's not affecting


1108
00:31:07,936 --> 00:31:09,686
any of the views around it, it's


1109
00:31:09,686 --> 00:31:10,626
just going to disappear, it's


1110
00:31:10,626 --> 00:31:11,866
constraints stay in place and


1111
00:31:11,866 --> 00:31:13,656
this is a very, very, very cheap


1112
00:31:14,136 --> 00:31:15,846
way to hide and show views,


1113
00:31:16,416 --> 00:31:17,476
rather than removing them from


1114
00:31:17,476 --> 00:31:18,036
the hierarchy.


1115
00:31:18,986 --> 00:31:19,736
So that's fine.


1116
00:31:20,246 --> 00:31:21,156
But this is a really simple


1117
00:31:21,156 --> 00:31:21,556
example.


1118
00:31:21,556 --> 00:31:22,546
What about the image view?


1119
00:31:23,016 --> 00:31:24,606
All right, so for the image


1120
00:31:24,606 --> 00:31:25,806
view, again we might we might


1121
00:31:25,806 --> 00:31:26,686
want to try removing all


1122
00:31:26,686 --> 00:31:28,176
constraints and then adding back


1123
00:31:28,626 --> 00:31:30,206
the ones we already had plus the


1124
00:31:30,206 --> 00:31:30,896
image view ones.


1125
00:31:31,816 --> 00:31:33,526
And again, everything is landing


1126
00:31:33,526 --> 00:31:34,446
in the same place so we're


1127
00:31:34,446 --> 00:31:35,356
experiencing churn.


1128
00:31:36,566 --> 00:31:37,776
Well, in a situation like this


1129
00:31:38,156 --> 00:31:39,326
how I want you to think about it


1130
00:31:39,326 --> 00:31:40,696
is to look at groups of


1131
00:31:40,696 --> 00:31:41,176
constraints.


1132
00:31:41,896 --> 00:31:43,446
So let's start with this group


1133
00:31:43,446 --> 00:31:44,366
that I'm highlighting here in


1134
00:31:44,366 --> 00:31:44,716
green.


1135
00:31:45,756 --> 00:31:48,256
These constraints stay the same


1136
00:31:48,446 --> 00:31:49,476
in every one of our layouts.


1137
00:31:50,466 --> 00:31:51,386
Once we're doing the hide and


1138
00:31:51,386 --> 00:31:53,286
show on the sharing view that


1139
00:31:53,286 --> 00:31:54,196
doesn't need to change, the


1140
00:31:54,196 --> 00:31:56,356
avatar view never moves, and the


1141
00:31:56,356 --> 00:31:59,006
labels never move other than the


1142
00:31:59,006 --> 00:32:00,346
log entry label being able to


1143
00:32:00,346 --> 00:32:00,806
get longer.


1144
00:32:01,616 --> 00:32:02,726
So those green constraints


1145
00:32:03,046 --> 00:32:04,866
should be added when you create


1146
00:32:04,866 --> 00:32:07,806
the views and then left in


1147
00:32:07,806 --> 00:32:08,206
place.


1148
00:32:08,566 --> 00:32:09,046
Don't touch them.


1149
00:32:09,276 --> 00:32:10,236
They want to stay where they


1150
00:32:10,236 --> 00:32:10,446
are.


1151
00:32:12,026 --> 00:32:13,646
But now we have the four


1152
00:32:13,646 --> 00:32:15,076
constraints that are controlling


1153
00:32:15,076 --> 00:32:15,586
the image view.


1154
00:32:15,846 --> 00:32:16,926
So what do we do with those?


1155
00:32:17,216 --> 00:32:17,916
Well, let's stick them in an


1156
00:32:17,916 --> 00:32:21,366
array and let's also take the


1157
00:32:21,366 --> 00:32:22,276
constraints that are going to be


1158
00:32:22,276 --> 00:32:23,746
there when there's no image.


1159
00:32:24,126 --> 00:32:25,246
And I very creatively named


1160
00:32:25,246 --> 00:32:26,416
these imageConstraints and


1161
00:32:26,416 --> 00:32:27,696
noImageConstraints so you can


1162
00:32:27,696 --> 00:32:28,526
keep them apart.


1163
00:32:29,216 --> 00:32:32,316
And let's, when we're getting to


1164
00:32:32,316 --> 00:32:33,456
the point where we're going to


1165
00:32:33,456 --> 00:32:34,526
be putting in this image view or


1166
00:32:34,526 --> 00:32:36,366
taking it away, let's see what


1167
00:32:36,366 --> 00:32:37,556
layout we're currently in.


1168
00:32:38,036 --> 00:32:38,666
Deactivate the


1169
00:32:38,666 --> 00:32:40,546
noImageConstraints if we need to


1170
00:32:41,086 --> 00:32:42,346
and activate the ones for the


1171
00:32:42,346 --> 00:32:42,776
image.


1172
00:32:43,786 --> 00:32:45,516
If we don't have an image coming


1173
00:32:45,516 --> 00:32:46,716
in, you know, all of our other


1174
00:32:46,716 --> 00:32:47,426
constraints are already


1175
00:32:47,426 --> 00:32:48,886
activated, we just have the one


1176
00:32:49,186 --> 00:32:49,846
that we're adding.


1177
00:32:50,176 --> 00:32:51,416
Now I put these both in arrays


1178
00:32:51,416 --> 00:32:52,456
despite the fact that this is a


1179
00:32:52,456 --> 00:32:53,936
single constraint because it


1180
00:32:53,936 --> 00:32:55,226
simplifies things in my code.


1181
00:32:55,756 --> 00:32:56,676
I don't need to check and see


1182
00:32:56,676 --> 00:32:57,486
whether I'm dealing with an


1183
00:32:57,486 --> 00:32:58,846
array or a single constraint,


1184
00:32:59,206 --> 00:33:00,226
I'm always dealing with an array


1185
00:33:00,226 --> 00:33:00,846
of constraints.


1186
00:33:01,856 --> 00:33:02,666
Your mileage may vary though.


1187
00:33:03,526 --> 00:33:06,406
So the nice thing about this is


1188
00:33:06,406 --> 00:33:08,286
that if you are tracking your


1189
00:33:08,286 --> 00:33:09,766
constraints properly like this


1190
00:33:10,186 --> 00:33:11,716
and you know that you want to


1191
00:33:11,716 --> 00:33:13,276
add this image view live in


1192
00:33:13,276 --> 00:33:15,056
front of the user, you can


1193
00:33:15,056 --> 00:33:15,876
deactivate these


1194
00:33:15,876 --> 00:33:17,426
noImageConstraints, activate the


1195
00:33:17,426 --> 00:33:18,966
ImageConstraints and call Layout


1196
00:33:18,966 --> 00:33:20,326
in needed inside a View


1197
00:33:20,326 --> 00:33:22,026
Animation block and it's going


1198
00:33:22,026 --> 00:33:23,146
to animate nicely into your


1199
00:33:23,146 --> 00:33:23,416
view.


1200
00:33:24,126 --> 00:33:25,036
If you tried to do this with


1201
00:33:25,036 --> 00:33:25,996
deactivating all of your


1202
00:33:25,996 --> 00:33:26,886
constraints and putting them


1203
00:33:26,886 --> 00:33:29,236
back in, it would look very


1204
00:33:29,236 --> 00:33:29,796
interesting.


1205
00:33:29,986 --> 00:33:30,756
Let's say it that way.


1206
00:33:31,696 --> 00:33:33,006
All right, so now that we've


1207
00:33:33,006 --> 00:33:34,296
debugged this and we're working


1208
00:33:34,296 --> 00:33:35,266
with groups of constraints


1209
00:33:35,266 --> 00:33:36,536
instead of throwing everything


1210
00:33:36,536 --> 00:33:38,026
at it, let's look at what it


1211
00:33:38,026 --> 00:33:38,646
will look like.


1212
00:33:38,706 --> 00:33:39,376
This is what it looked like


1213
00:33:39,376 --> 00:33:40,566
originally just to remind you.


1214
00:33:41,706 --> 00:33:44,906
Let's scroll to the top.


1215
00:33:44,906 --> 00:33:45,216
It's very bad.


1216
00:33:45,216 --> 00:33:46,256
And this is what it looks like


1217
00:33:46,256 --> 00:33:48,876
after we've debugged it.


1218
00:33:48,966 --> 00:33:50,136
And that is much smoother.


1219
00:33:50,776 --> 00:33:51,676
Thank you.


1220
00:33:52,031 --> 00:33:54,031
[ Applause ]


1221
00:33:54,046 --> 00:33:54,986
But wait there's more!


1222
00:33:55,596 --> 00:33:57,206
I actually took this video on


1223
00:33:57,306 --> 00:33:57,936
iOS 11.


1224
00:33:57,936 --> 00:34:00,586
This is not taking advantage of


1225
00:34:00,586 --> 00:34:01,556
any of our performance


1226
00:34:01,556 --> 00:34:02,826
improvements in iOS 12.


1227
00:34:03,826 --> 00:34:05,376
This is just the client code


1228
00:34:06,366 --> 00:34:07,396
doing things more efficiently.


1229
00:34:07,396 --> 00:34:09,626
In iOS12 it also looks great.


1230
00:34:09,626 --> 00:34:13,416
And of course fabulous


1231
00:34:13,416 --> 00:34:14,016
[laughing].


1232
00:34:14,516 --> 00:34:16,556
[ Applause ]


1233
00:34:17,056 --> 00:34:17,446
Yes, it's great.


1234
00:34:20,396 --> 00:34:21,815
So how do we avoid constraint


1235
00:34:21,815 --> 00:34:22,106
churn?


1236
00:34:23,176 --> 00:34:24,545
Well, avoid removing all of your


1237
00:34:24,545 --> 00:34:25,106
constraints.


1238
00:34:25,106 --> 00:34:26,206
That's usually going to put you


1239
00:34:26,206 --> 00:34:27,406
into a situation where you have


1240
00:34:27,406 --> 00:34:29,036
to put a bunch of them back and


1241
00:34:29,036 --> 00:34:30,956
that's going to land you in a


1242
00:34:30,956 --> 00:34:32,596
position where you're relaying


1243
00:34:32,596 --> 00:34:33,626
out frames that don't need to --


1244
00:34:33,626 --> 00:34:34,795
or relaying out views that don't


1245
00:34:34,795 --> 00:34:35,636
need to be laid out again.


1246
00:34:36,866 --> 00:34:38,286
If you have a set of constraints


1247
00:34:38,315 --> 00:34:39,626
that going to be common to all


1248
00:34:39,626 --> 00:34:40,585
of the potential layouts in your


1249
00:34:40,585 --> 00:34:42,556
app, add them one and then leave


1250
00:34:42,556 --> 00:34:43,085
them alone.


1251
00:34:43,156 --> 00:34:44,295
This is a good use for Interface


1252
00:34:44,295 --> 00:34:45,326
Builder and the initial layout


1253
00:34:45,326 --> 00:34:46,916
of your app.


1254
00:34:46,916 --> 00:34:47,786
Changes to the constraints that


1255
00:34:47,786 --> 00:34:48,826
need changing but don't change


1256
00:34:48,826 --> 00:34:49,585
the ones that don't need


1257
00:34:49,585 --> 00:34:49,956
changing.


1258
00:34:50,886 --> 00:34:51,946
Kind of tautological but it


1259
00:34:52,295 --> 00:34:52,755
seems good.


1260
00:34:53,186 --> 00:34:54,606
And then you have a neat trick


1261
00:34:54,606 --> 00:34:56,786
now for hiding views instead of


1262
00:34:56,786 --> 00:34:58,086
removing them when that makes


1263
00:34:58,086 --> 00:34:58,436
sense.


1264
00:34:59,076 --> 00:35:00,096
All right, so that was


1265
00:35:00,096 --> 00:35:01,026
constraint churn in the


1266
00:35:01,026 --> 00:35:01,546
instrument.


1267
00:35:01,626 --> 00:35:02,596
We also have that view at the


1268
00:35:02,596 --> 00:35:04,326
bottom that said UILabel sizing.


1269
00:35:05,236 --> 00:35:07,186
UILabel sizing is tracking the


1270
00:35:07,186 --> 00:35:08,246
amount of time it takes for the


1271
00:35:08,246 --> 00:35:09,926
label to calculate its size.


1272
00:35:10,226 --> 00:35:11,566
So let's talk about intrinsic


1273
00:35:11,566 --> 00:35:12,236
content size.


1274
00:35:12,566 --> 00:35:14,796
I'm going to take a walk over


1275
00:35:14,796 --> 00:35:15,036
here.


1276
00:35:15,886 --> 00:35:17,546
OK, not all views actually need


1277
00:35:17,896 --> 00:35:19,096
intrinsic content size.


1278
00:35:20,716 --> 00:35:21,426
Some views do.


1279
00:35:21,836 --> 00:35:24,076
Views with non-view content like


1280
00:35:24,076 --> 00:35:25,276
to return a size for their


1281
00:35:25,276 --> 00:35:26,936
intrinsic content size based on


1282
00:35:26,936 --> 00:35:28,086
that non-view content.


1283
00:35:28,486 --> 00:35:30,126
Two examples of this are


1284
00:35:30,126 --> 00:35:32,156
UIImageView, which uses the size


1285
00:35:32,156 --> 00:35:33,826
of its image to calculate its


1286
00:35:33,826 --> 00:35:36,036
intrinsic content size and


1287
00:35:36,036 --> 00:35:38,116
UILabel, which measures its text


1288
00:35:38,576 --> 00:35:39,976
and uses that to return its


1289
00:35:39,976 --> 00:35:41,056
intrinsic content size.


1290
00:35:41,636 --> 00:35:43,666
There's nothing really magical


1291
00:35:43,666 --> 00:35:45,076
about intrinsic content size,


1292
00:35:45,486 --> 00:35:47,286
it's used to create constraints


1293
00:35:47,286 --> 00:35:47,856
by UIView.


1294
00:35:48,486 --> 00:35:49,886
It makes sizing constraints for


1295
00:35:49,886 --> 00:35:50,886
you and that's it.


1296
00:35:51,596 --> 00:35:52,476
You can define all of your


1297
00:35:52,476 --> 00:35:54,106
sizing in constraints yourself


1298
00:35:54,576 --> 00:35:55,576
and skip this whole thing.


1299
00:35:56,436 --> 00:35:57,496
There are a few circumstances


1300
00:35:57,496 --> 00:35:58,646
where it needs to be overridden,


1301
00:35:58,646 --> 00:36:00,026
that's what it's there, as we


1302
00:36:00,026 --> 00:36:01,156
saw there are these couple of


1303
00:36:01,156 --> 00:36:02,586
things plus some other examples


1304
00:36:02,586 --> 00:36:03,776
in UIView subclasses.


1305
00:36:04,346 --> 00:36:05,786
But a lot of the times it gets


1306
00:36:05,786 --> 00:36:07,026
overridden because the


1307
00:36:07,026 --> 00:36:07,986
assumption that it's either


1308
00:36:07,986 --> 00:36:10,136
faster or more exact and it is


1309
00:36:10,136 --> 00:36:10,946
neither of those things.


1310
00:36:12,076 --> 00:36:14,546
However, there is a circumstance


1311
00:36:14,546 --> 00:36:15,846
where overriding it might help


1312
00:36:15,846 --> 00:36:16,506
your performance.


1313
00:36:18,206 --> 00:36:19,406
Text measurement can be


1314
00:36:19,406 --> 00:36:19,926
expensive.


1315
00:36:21,186 --> 00:36:24,106
In our app here the UILabel


1316
00:36:24,106 --> 00:36:25,626
sizing did not take very long.


1317
00:36:25,716 --> 00:36:27,386
It was very short durations.


1318
00:36:27,826 --> 00:36:28,986
So messing around with that is


1319
00:36:28,986 --> 00:36:29,766
not going to improve the


1320
00:36:29,766 --> 00:36:31,096
performance of that that much.


1321
00:36:31,666 --> 00:36:32,956
But if you have a text intensive


1322
00:36:32,956 --> 00:36:34,586
app and you're seeing a lot of


1323
00:36:34,586 --> 00:36:36,106
time happening in the UILabel


1324
00:36:36,106 --> 00:36:37,886
text measurement or you have


1325
00:36:37,886 --> 00:36:38,936
text view text measurement or


1326
00:36:39,066 --> 00:36:39,956
whatever else you're using, you


1327
00:36:40,386 --> 00:36:42,136
might be able to help it along


1328
00:36:42,136 --> 00:36:43,026
if you have some additional


1329
00:36:43,026 --> 00:36:43,566
information.


1330
00:36:45,116 --> 00:36:46,296
If you know the size that the


1331
00:36:46,296 --> 00:36:47,886
text needs to be without doing


1332
00:36:47,886 --> 00:36:49,696
all that text measurement, you


1333
00:36:49,696 --> 00:36:50,746
can return that size and


1334
00:36:50,746 --> 00:36:53,916
intrinsic content size, or if


1335
00:36:53,916 --> 00:36:55,286
when you're going to be putting


1336
00:36:55,286 --> 00:36:56,726
this view on the screen the


1337
00:36:56,726 --> 00:36:57,546
constraints are going to be


1338
00:36:57,546 --> 00:36:58,706
fully defining the size


1339
00:36:58,776 --> 00:36:59,976
regardless of the size of the


1340
00:37:00,046 --> 00:37:00,846
text inside of it.


1341
00:37:00,946 --> 00:37:02,306
For instance, the constraints


1342
00:37:02,306 --> 00:37:03,156
are always going to make it


1343
00:37:03,156 --> 00:37:04,316
larger than the amount of text


1344
00:37:04,316 --> 00:37:04,706
you have.


1345
00:37:05,546 --> 00:37:06,586
Then you can go ahead and return


1346
00:37:06,586 --> 00:37:07,996
no intrinsic metric for the


1347
00:37:07,996 --> 00:37:09,716
width and height in intrinsic


1348
00:37:09,716 --> 00:37:10,446
content size.


1349
00:37:11,146 --> 00:37:12,206
And what this will do is tell


1350
00:37:12,206 --> 00:37:13,486
the parent, hey I already have


1351
00:37:13,486 --> 00:37:15,206
my size, don't bother to do the


1352
00:37:15,276 --> 00:37:15,846
text measurement.


1353
00:37:16,826 --> 00:37:18,226
So obviously this only works if


1354
00:37:18,226 --> 00:37:19,096
you're not trying to detect


1355
00:37:19,096 --> 00:37:21,826
measurement yourself, but it can


1356
00:37:21,826 --> 00:37:23,136
help some apps improve their


1357
00:37:23,136 --> 00:37:23,646
performance.


1358
00:37:23,646 --> 00:37:24,886
So I wanted you to know that


1359
00:37:24,886 --> 00:37:26,016
this little trick exists.


1360
00:37:26,766 --> 00:37:27,766
And we can't talk about


1361
00:37:27,766 --> 00:37:29,116
intrinsic content size without


1362
00:37:29,116 --> 00:37:30,566
talking about system layout size


1363
00:37:30,566 --> 00:37:33,326
fitting size because people


1364
00:37:33,326 --> 00:37:35,666
often conflate the two even


1365
00:37:35,666 --> 00:37:36,196
though they're kind of


1366
00:37:36,196 --> 00:37:37,846
opposites, so that's kind of


1367
00:37:37,846 --> 00:37:39,376
unfortunate.


1368
00:37:39,376 --> 00:37:41,456
Intrinsic content size is a way


1369
00:37:41,456 --> 00:37:42,446
that you communicate size


1370
00:37:42,446 --> 00:37:43,866
information to be put into the


1371
00:37:43,866 --> 00:37:44,226
engine.


1372
00:37:45,206 --> 00:37:46,796
System Layout Size Fitting Size


1373
00:37:47,156 --> 00:37:48,206
is a way that you get sizing


1374
00:37:48,206 --> 00:37:49,456
information back out of the


1375
00:37:49,456 --> 00:37:49,826
engine.


1376
00:37:50,356 --> 00:37:51,276
They're actually kind of


1377
00:37:51,816 --> 00:37:52,486
opposites.


1378
00:37:52,486 --> 00:37:54,696
So this is used in sort of mixed


1379
00:37:54,696 --> 00:37:56,086
layouts where there's some


1380
00:37:56,086 --> 00:37:57,136
reason that you need frame


1381
00:37:57,136 --> 00:37:58,816
information from a view that


1382
00:37:58,816 --> 00:38:00,236
manages its subviews using Auto


1383
00:38:00,236 --> 00:38:00,576
Layout.


1384
00:38:01,876 --> 00:38:03,616
Not very frequent usage but is


1385
00:38:03,616 --> 00:38:05,306
there and can be used.


1386
00:38:05,696 --> 00:38:07,346
I want to tell you how this


1387
00:38:07,346 --> 00:38:09,096
method works because it might be


1388
00:38:09,096 --> 00:38:10,066
a little more expensive than you


1389
00:38:10,066 --> 00:38:10,306
think.


1390
00:38:11,736 --> 00:38:13,046
When you call System Layout Size


1391
00:38:13,046 --> 00:38:14,926
Fitting Size an engine is


1392
00:38:14,966 --> 00:38:15,386
created.


1393
00:38:16,086 --> 00:38:17,006
Constraints are added to this


1394
00:38:17,006 --> 00:38:18,886
engine, the layout is solved,


1395
00:38:19,536 --> 00:38:21,206
and then the size of the top


1396
00:38:21,206 --> 00:38:23,546
views frame is returned, and


1397
00:38:23,546 --> 00:38:24,666
then the engine gets discarded.


1398
00:38:25,706 --> 00:38:26,646
So each time you call this


1399
00:38:26,646 --> 00:38:27,916
method an engine is being


1400
00:38:27,916 --> 00:38:28,946
created and discarded.


1401
00:38:29,856 --> 00:38:31,386
While this is fine for small


1402
00:38:31,386 --> 00:38:33,006
uses, if you're doing it a lot


1403
00:38:33,286 --> 00:38:34,306
you can see how it might start


1404
00:38:34,306 --> 00:38:35,486
to build up over time.


1405
00:38:35,706 --> 00:38:37,336
So be cautious when calling


1406
00:38:37,336 --> 00:38:38,616
System Layout Size Fitting Size.


1407
00:38:39,636 --> 00:38:41,486
One of the uses that we


1408
00:38:41,486 --> 00:38:42,956
sometimes see people do is


1409
00:38:42,996 --> 00:38:44,646
forwarding that call from their


1410
00:38:44,646 --> 00:38:45,886
self-sizing collection or table


1411
00:38:45,886 --> 00:38:47,636
view cell to a content view.


1412
00:38:47,896 --> 00:38:49,186
And when you do that you're


1413
00:38:49,186 --> 00:38:50,326
actually overriding some


1414
00:38:50,326 --> 00:38:51,886
optimizations we've made to make


1415
00:38:51,886 --> 00:38:53,026
that scrolling, scrolling in


1416
00:38:53,026 --> 00:38:54,716
that view faster and you're


1417
00:38:54,716 --> 00:38:55,706
adding extra engines.


1418
00:38:56,026 --> 00:38:57,086
So if you're currently doing


1419
00:38:57,086 --> 00:38:58,106
that and your scrolling is no


1420
00:38:58,106 --> 00:38:59,946
good, maybe look into that.


1421
00:39:01,026 --> 00:39:02,266
All right, now we come to my


1422
00:39:02,266 --> 00:39:03,126
very favorite topic in the


1423
00:39:03,126 --> 00:39:03,366
world.


1424
00:39:03,836 --> 00:39:05,216
Unsatisfiable Constraints.


1425
00:39:06,226 --> 00:39:09,526
OK, so what are unsatisfiable


1426
00:39:09,526 --> 00:39:10,146
constraints?


1427
00:39:10,226 --> 00:39:11,116
If you haven't run into this


1428
00:39:11,116 --> 00:39:13,216
before, this is what happens


1429
00:39:13,216 --> 00:39:14,856
when you do something like, hey


1430
00:39:15,396 --> 00:39:16,806
this view should be 50 points


1431
00:39:16,806 --> 00:39:18,486
wide, also it should be 200


1432
00:39:18,486 --> 00:39:18,936
points wide.


1433
00:39:19,836 --> 00:39:21,356
Well, that's not really going to


1434
00:39:21,356 --> 00:39:21,606
work.


1435
00:39:21,976 --> 00:39:23,686
These are not actually quantum


1436
00:39:23,686 --> 00:39:24,116
phones.


1437
00:39:25,276 --> 00:39:26,436
You know, I can't speak to the


1438
00:39:26,436 --> 00:39:30,696
future but so the engine has to


1439
00:39:30,696 --> 00:39:31,876
kind of calculate the fact that


1440
00:39:31,876 --> 00:39:33,906
there's no layout available and


1441
00:39:33,906 --> 00:39:35,566
break a constraint in order to


1442
00:39:35,956 --> 00:39:37,386
generate some sort of layout for


1443
00:39:37,386 --> 00:39:37,556
you.


1444
00:39:38,536 --> 00:39:39,626
When it breaks that constraint


1445
00:39:40,246 --> 00:39:42,026
it sends a very detailed log to


1446
00:39:42,386 --> 00:39:43,496
your debugger, possibly you've


1447
00:39:43,496 --> 00:39:46,026
seen it, that says, hey


1448
00:39:46,026 --> 00:39:47,316
unsatisfiable constraints.


1449
00:39:47,636 --> 00:39:48,476
Here's the constraint that I


1450
00:39:48,476 --> 00:39:49,876
broke and here's all the other


1451
00:39:49,876 --> 00:39:51,476
ones that affected, that caused


1452
00:39:51,476 --> 00:39:52,186
me to have to break it.


1453
00:39:53,146 --> 00:39:54,836
So this can sometimes affect


1454
00:39:55,366 --> 00:39:56,856
performance directly and it can


1455
00:39:56,856 --> 00:39:57,986
also mask other issues.


1456
00:39:57,986 --> 00:39:59,186
So it's a good idea to get them


1457
00:39:59,186 --> 00:39:59,596
debugged.


1458
00:40:00,206 --> 00:40:01,346
And Mysteries of Auto Layout,


1459
00:40:01,346 --> 00:40:02,756
Part 2, had some good debugging


1460
00:40:02,756 --> 00:40:04,566
information so you might be


1461
00:40:04,566 --> 00:40:05,706
interested in checking that out


1462
00:40:05,936 --> 00:40:06,786
if you have been having trouble


1463
00:40:06,786 --> 00:40:07,676
with your unsatisfiable


1464
00:40:07,676 --> 00:40:08,236
constraints.


1465
00:40:09,806 --> 00:40:11,556
OK, guys you've graduated.


1466
00:40:11,556 --> 00:40:12,346
Congratulations.


1467
00:40:12,346 --> 00:40:13,946
You are all Auto Layout experts


1468
00:40:14,746 --> 00:40:16,626
and, you know, I hope that you


1469
00:40:16,626 --> 00:40:17,856
really enjoyed learning about


1470
00:40:17,856 --> 00:40:19,236
the internals of how it works.


1471
00:40:19,866 --> 00:40:21,736
Now you know better how to think


1472
00:40:21,736 --> 00:40:23,056
before you update constraints


1473
00:40:23,256 --> 00:40:24,416
and understand the process they


1474
00:40:24,416 --> 00:40:25,826
go through, you've got some


1475
00:40:25,826 --> 00:40:27,916
tuning information with size and


1476
00:40:27,916 --> 00:40:29,846
priority and inequality, and you


1477
00:40:29,846 --> 00:40:32,056
have faster layouts in iOS 12 so


1478
00:40:32,056 --> 00:40:32,726
that's awesome.


1479
00:40:33,416 --> 00:40:34,426
We're going to be in the Labs


1480
00:40:34,496 --> 00:40:35,886
tomorrow if anybody has


1481
00:40:35,926 --> 00:40:36,386
questions.


1482
00:40:37,006 --> 00:40:38,406
And we've got the link here for


1483
00:40:38,406 --> 00:40:39,696
information in related sessions.


1484
00:40:40,286 --> 00:40:40,976
Enjoy the rest of your week.


1485
00:40:41,516 --> 00:40:45,500
[ Applause ]

