1
00:00:00,506 --> 00:00:10,516
[ Silence ]


2
00:00:11,016 --> 00:00:13,000
[ Applause ]


3
00:00:13,076 --> 00:00:13,986
>> Jacob Xiao: Hello everyone.


4
00:00:15,276 --> 00:00:19,756
You've all seen iOS 7's
amazing new design and big part


5
00:00:19,756 --> 00:00:22,616
of that change is there's
a lot less ornamentation,


6
00:00:23,226 --> 00:00:25,076
which is a big part of
what used to make a lot


7
00:00:25,076 --> 00:00:26,136
of applications unique.


8
00:00:27,356 --> 00:00:30,046
So you may be wondering how you
can make your application stand


9
00:00:30,046 --> 00:00:31,106
out in this new world.


10
00:00:32,226 --> 00:00:33,386
Well, there's still
a lot of ways


11
00:00:33,386 --> 00:00:36,256
that you can customize your
application including several


12
00:00:36,256 --> 00:00:36,726
new ones.


13
00:00:37,696 --> 00:00:39,456
So today, I'd like to talk


14
00:00:39,556 --> 00:00:41,486
about how you can
customize your application


15
00:00:41,976 --> 00:00:43,856
to make it still have its
own unique appearance,


16
00:00:44,396 --> 00:00:46,786
but fit in with the rest
of the iOS 7 design.


17
00:00:47,476 --> 00:00:52,116
I'll be talking about
three things today: First,


18
00:00:52,816 --> 00:00:55,576
some of what's changed for
customization in iOS 7.


19
00:00:56,546 --> 00:00:58,416
Then, some advanced topics


20
00:00:58,856 --> 00:01:00,476
for how you can customize
your application


21
00:01:01,326 --> 00:01:04,166
and finally how you can create
your own custom controls


22
00:01:04,566 --> 00:01:06,916
that work just as well
as our UIKit controls.


23
00:01:07,436 --> 00:01:11,396
I'll be using a sample
application today


24
00:01:12,826 --> 00:01:13,646
that looks like this.


25
00:01:14,606 --> 00:01:17,646
It's a simple application that's
a combination of messaging


26
00:01:18,196 --> 00:01:21,566
and what I think is the greatest
game of all time, Tic-Tac-Toe.


27
00:01:21,616 --> 00:01:23,576
I think it's going
to be a big hit.


28
00:01:24,826 --> 00:01:25,986
This is what it looks
like today.


29
00:01:26,826 --> 00:01:30,196
It's a simple standard
uncustomized iOS 7 application,


30
00:01:31,126 --> 00:01:31,516
but we're going


31
00:01:31,516 --> 00:01:35,266
to be customizing it
to look like this.


32
00:01:35,456 --> 00:01:36,506
And I'll be telling you all


33
00:01:36,506 --> 00:01:39,586
of the different customizations
we use and how you can use them


34
00:01:39,586 --> 00:01:40,836
in your application as well.


35
00:01:41,516 --> 00:01:44,886
And one important note
about this application is


36
00:01:44,886 --> 00:01:47,046
that it's actually available
as sample code for you


37
00:01:47,046 --> 00:01:48,396
to download and look at.


38
00:01:49,016 --> 00:01:50,566
Just go to the developer website


39
00:01:50,566 --> 00:01:53,256
and in the prerelease section
search for Tic-Tac-Toe.


40
00:01:53,256 --> 00:01:56,666
And I encourage you to
take a look to see how all


41
00:01:56,666 --> 00:01:57,586
of these technique works.


42
00:01:58,146 --> 00:02:03,126
But before I start, I wanted
to mention one thing and that's


43
00:02:03,126 --> 00:02:05,436
that all of the existing
customization techniques


44
00:02:05,436 --> 00:02:07,976
that we had still
work great in iOS 7.


45
00:02:08,466 --> 00:02:10,925
And we use a lot of these
in the sample application,


46
00:02:11,466 --> 00:02:13,286
things like UAappearance
customization


47
00:02:13,546 --> 00:02:14,626
and resizable images.


48
00:02:15,596 --> 00:02:17,186
I'm not going to be
talking about those today,


49
00:02:17,656 --> 00:02:20,616
but you can look at the last two
years appearance customization


50
00:02:20,616 --> 00:02:26,256
talks in the last two WWDCs to
check out some of the concepts.


51
00:02:26,316 --> 00:02:29,306
Alright, let's get started
with some of what's changed


52
00:02:29,386 --> 00:02:31,186
for appearance customization
in iOS 7.


53
00:02:31,186 --> 00:02:35,936
One of the first things you'll
notice is the Status Bar.


54
00:02:37,136 --> 00:02:39,516
The Status Bar has an entirely
different look in iOS 7


55
00:02:39,516 --> 00:02:42,096
and it has two different
styles that you can use.


56
00:02:43,146 --> 00:02:46,926
The default style shows dark
content on a white background


57
00:02:47,696 --> 00:02:51,546
and we have the new style called
US Status Bar Light Content,


58
00:02:52,256 --> 00:02:54,516
which shows light colored
content on a dark background.


59
00:02:55,776 --> 00:02:58,526
However, neither of these
two styles actually draw the


60
00:02:58,526 --> 00:02:59,366
background themselves.


61
00:03:00,006 --> 00:03:02,576
I've shown them here with
black and white backgrounds,


62
00:03:03,636 --> 00:03:05,136
but they're actually
fully transparent.


63
00:03:05,636 --> 00:03:09,316
And this means a lot for
how you draw the Status Bar.


64
00:03:09,606 --> 00:03:11,726
You can now customize the
background that's behind it


65
00:03:12,016 --> 00:03:13,336
by showing anything
you want there.


66
00:03:14,356 --> 00:03:15,946
Of course, you'll want to
be careful to make sure


67
00:03:15,946 --> 00:03:17,116
that you provide a background


68
00:03:17,356 --> 00:03:19,176
that keeps the Status
Bar readable


69
00:03:19,656 --> 00:03:22,086
by giving it enough contrast
and not being too busy,


70
00:03:22,686 --> 00:03:23,816
but you have a lot
of freedom here.


71
00:03:25,026 --> 00:03:27,746
And so, part of how we've let
you draw this background is


72
00:03:27,746 --> 00:03:31,086
by changing the way that we lay
out view controllers in iOS 7.


73
00:03:32,086 --> 00:03:33,306
We'll now layout the content


74
00:03:33,306 --> 00:03:35,526
of your view controller
beneath the Status Bar,


75
00:03:36,406 --> 00:03:38,356
which is what allows you
to draw this background.


76
00:03:39,616 --> 00:03:41,366
So if you'll look
at what we've done


77
00:03:41,366 --> 00:03:44,546
in our sample application we
have a simple white background


78
00:03:45,226 --> 00:03:48,616
and we're careful to not show
our game content underneath the


79
00:03:48,616 --> 00:03:52,016
Status Bar to keep it visible.


80
00:03:52,106 --> 00:03:54,726
However, in other views
in our sample app,


81
00:03:54,856 --> 00:03:56,136
we actually haven't
done anything


82
00:03:56,826 --> 00:03:58,206
for the background
of the Status Bar.


83
00:03:58,796 --> 00:04:00,096
So, here in the messages


84
00:04:00,346 --> 00:04:03,556
and profiles view we're using
a navigation controller.


85
00:04:04,356 --> 00:04:07,556
And any time that use a
navigation controller it will


86
00:04:07,556 --> 00:04:09,966
actually draw the background
beneath the Status Bar


87
00:04:10,036 --> 00:04:11,196
for you automatically.


88
00:04:12,466 --> 00:04:15,596
It does this by taking the
background of the navigation bar


89
00:04:15,596 --> 00:04:18,836
that it shows and extending it
to go beneath the Status Bar.


90
00:04:19,726 --> 00:04:21,176
This happens for
you automatically


91
00:04:21,276 --> 00:04:22,856
if you're using a
navigation controller


92
00:04:23,396 --> 00:04:27,106
so you don't have
to worry about that.


93
00:04:27,306 --> 00:04:29,536
Alright, there's
another implication


94
00:04:29,536 --> 00:04:31,786
of this Status Bar
change on your application


95
00:04:31,786 --> 00:04:34,256
and that's the default.png
images you use.


96
00:04:35,146 --> 00:04:36,936
These are what we're using
in our sample application


97
00:04:37,186 --> 00:04:40,546
for our startup images and
the important thing here is


98
00:04:40,546 --> 00:04:42,506
that they have to be
full-screen size images.


99
00:04:43,446 --> 00:04:47,836
So that means 320 x 480
points and 320 x 568 points.


100
00:04:48,406 --> 00:04:50,476
And this allows you to draw


101
00:04:50,476 --> 00:04:52,386
in your default.png
images backgrounds


102
00:04:52,386 --> 00:04:53,686
that goes behind the Status Bar,


103
00:04:54,506 --> 00:04:57,536
but don't include the Status Bar
itself in your default.png image


104
00:04:57,976 --> 00:05:01,126
and that way as your application
launches we'll draw a live


105
00:05:01,196 --> 00:05:02,266
Status Bar on top of it


106
00:05:02,266 --> 00:05:04,586
and it'll look great
as you start out.


107
00:05:05,596 --> 00:05:08,626
We've actually gone a little
further and made it easier


108
00:05:08,766 --> 00:05:12,426
for you to create your own
default.png images in iOS 7


109
00:05:13,056 --> 00:05:16,346
by introducing a new system that
allows you to set multiple sets


110
00:05:16,346 --> 00:05:19,726
of default startup images for
different versions of iOS.


111
00:05:21,006 --> 00:05:24,296
Previously you could only have a
single set that was used for all


112
00:05:24,296 --> 00:05:26,016
of the versions of iOS
that your app ran on.


113
00:05:27,046 --> 00:05:29,296
In iOS 7 we're introducing
a new key


114
00:05:29,506 --> 00:05:31,376
that you can use
in your info.plist.


115
00:05:32,366 --> 00:05:35,066
Just add the UI launch
images values


116
00:05:35,166 --> 00:05:38,196
and you can add a dictionary
with different information


117
00:05:38,436 --> 00:05:40,726
for kind of default.png
images you want to use.


118
00:05:41,526 --> 00:05:43,946
And if you want to see all the
details of how to set this up,


119
00:05:44,036 --> 00:05:45,806
check out the sample
application which uses this.


120
00:05:46,746 --> 00:05:49,596
But the important thing
is that this allows you


121
00:05:49,886 --> 00:05:53,676
to set different minimum iOS
versions for your different sets


122
00:05:53,676 --> 00:05:55,416
of default.png images.


123
00:05:55,486 --> 00:05:59,086
So you can now create a
full-screen sized default image


124
00:05:59,396 --> 00:06:02,506
for iOS 7 but still keep
your older default images


125
00:06:02,626 --> 00:06:05,986
for older versions of iOS.


126
00:06:06,186 --> 00:06:09,056
Alright, now you may
have seen that many


127
00:06:09,056 --> 00:06:12,096
of our system applications have
their own different key colors


128
00:06:12,156 --> 00:06:12,576
in iOS 7.


129
00:06:12,686 --> 00:06:16,556
And this color is used for
drawing interactive elements


130
00:06:16,556 --> 00:06:19,376
in the application and
also selectable elements.


131
00:06:20,036 --> 00:06:23,206
So, if you look at the buttons
here and also the current day


132
00:06:23,206 --> 00:06:25,766
and calendar you'll see that
they have different colors


133
00:06:25,766 --> 00:06:26,936
in these different applications.


134
00:06:27,396 --> 00:06:29,276
And this is a lot
of what you can use


135
00:06:29,616 --> 00:06:31,996
to make your application
different in iOS 7.


136
00:06:33,056 --> 00:06:35,676
So even if you don't use any
other customization techniques


137
00:06:36,156 --> 00:06:39,186
I'd really encourage you to
choose your own key color


138
00:06:39,186 --> 00:06:42,916
for your application in
iOS 7 and we've tried


139
00:06:42,916 --> 00:06:44,436
to make this really
easy for you to do.


140
00:06:45,526 --> 00:06:48,786
In fact, you can customize
the color, the key color


141
00:06:48,786 --> 00:06:52,266
of your entire application with
just this one line of code.


142
00:06:54,456 --> 00:06:57,996
So, the way this works
is by extending a concept


143
00:06:57,996 --> 00:06:59,566
that we've had for
a while in UIKit


144
00:07:00,136 --> 00:07:01,106
and that's called Tint Color.


145
00:07:02,526 --> 00:07:05,906
Tint Color used to be a property
that several controls and views


146
00:07:05,906 --> 00:07:08,926
in UIKit had and affected how
they drew their own content.


147
00:07:09,706 --> 00:07:13,196
But now we've taken Tint Color
and added it to every UIview


148
00:07:14,756 --> 00:07:16,206
and it also has some
new behaviors.


149
00:07:17,356 --> 00:07:18,906
One of the most important
behaviors


150
00:07:18,906 --> 00:07:21,516
of Tint Color now is the
new inheritant system.


151
00:07:22,436 --> 00:07:25,356
And the way this works is
that when you set a Tint Color


152
00:07:25,356 --> 00:07:29,256
on one view like the window it
will actually flow down to all


153
00:07:29,256 --> 00:07:32,186
of the subviews of that window
and recolor them as well.


154
00:07:33,106 --> 00:07:34,316
So when we set the red color


155
00:07:34,496 --> 00:07:37,636
for our window we're
actually recoloring the Pause


156
00:07:37,636 --> 00:07:40,386
and New Game buttons and also
the content in the Tab bar.


157
00:07:41,406 --> 00:07:44,466
So, with this change to how
Tint Color works the Tint Color


158
00:07:44,466 --> 00:07:45,746
Property that used to exist


159
00:07:45,746 --> 00:07:47,926
for navigation bars now
has a different meaning.


160
00:07:48,946 --> 00:07:51,276
In iOS 6 if you set
the Tint Color


161
00:07:51,276 --> 00:07:54,886
for a navigation bar it
would recolor the background


162
00:07:54,886 --> 00:07:55,846
that was shown for the bar.


163
00:07:55,846 --> 00:07:58,406
So, if you set it to red
you'd get this appearance.


164
00:07:59,716 --> 00:08:00,956
Now, if you ran that same code


165
00:08:01,196 --> 00:08:03,416
in iOS 7 you'd get
something very different.


166
00:08:04,416 --> 00:08:07,976
As I said, changing the tint
color now affects the foreground


167
00:08:07,976 --> 00:08:09,806
interactive elements
that are shown.


168
00:08:10,486 --> 00:08:13,986
So if you now set the Tint Color
to red notice that the buttons


169
00:08:14,086 --> 00:08:15,606
that are in the navigation
bar are changed


170
00:08:15,606 --> 00:08:17,156
to red instead of
its background.


171
00:08:18,216 --> 00:08:19,996
If you still do want to
change the background


172
00:08:19,996 --> 00:08:22,516
of the bar itself we've
added a new property


173
00:08:22,516 --> 00:08:23,506
that you can use to do that.


174
00:08:24,756 --> 00:08:28,156
All you have to do is set
the Bar Tint Color your bar


175
00:08:28,506 --> 00:08:29,746
to whatever color
you want to use


176
00:08:30,416 --> 00:08:31,676
and that will change
the background


177
00:08:31,676 --> 00:08:33,216
of the bar instead
of its foreground.


178
00:08:34,046 --> 00:08:35,655
Of course, you can
combine these as well


179
00:08:36,155 --> 00:08:38,346
to set a different background
and foreground color.


180
00:08:38,926 --> 00:08:42,976
So, that's the new Bar Tint
Color and you can use it


181
00:08:43,086 --> 00:08:47,806
on navigation bars, tool bars,
search bars and tab bars.


182
00:08:47,986 --> 00:08:49,896
Another way that you can
customize the backgrounds


183
00:08:49,896 --> 00:08:52,896
for your bars is by setting
custom images on them just


184
00:08:52,896 --> 00:08:54,266
as you've traditionally
done in iOS.


185
00:08:55,676 --> 00:08:58,196
And we're going to be using
that for our sample application


186
00:08:58,686 --> 00:09:02,586
to set this custom image that
looks kind of like a grid


187
00:09:02,796 --> 00:09:05,566
to match with our
tic-tac-toe theme.


188
00:09:05,786 --> 00:09:09,036
Now, traditionally in iOS
you would set a 44 point tall


189
00:09:09,036 --> 00:09:11,806
background as your
custom background image


190
00:09:12,086 --> 00:09:14,626
and this way it would be
shown beneath the bar,


191
00:09:14,776 --> 00:09:16,026
which is 44 points tall


192
00:09:16,056 --> 00:09:18,496
and we would show a black
background beneath the Status


193
00:09:18,566 --> 00:09:21,046
Bar and you can still
do that in iOS 7.


194
00:09:21,986 --> 00:09:23,016
But as I mentioned earlier,


195
00:09:23,196 --> 00:09:27,196
navigation bars now often
show a full larger content


196
00:09:27,446 --> 00:09:29,506
that shows the background
beneath the Status Bar


197
00:09:30,126 --> 00:09:32,366
to get a kind of
unified look there.


198
00:09:33,046 --> 00:09:34,656
And you can participate
in this system


199
00:09:34,986 --> 00:09:36,876
with your custom
background images as well.


200
00:09:38,106 --> 00:09:39,386
To do that, all you have


201
00:09:39,386 --> 00:09:42,796
to do is set a 64 point tall
background image instead


202
00:09:42,796 --> 00:09:44,216
of 44 points.


203
00:09:44,756 --> 00:09:45,726
When you do this,


204
00:09:45,726 --> 00:09:47,556
we'll automatically
extend the backgrounds


205
00:09:47,636 --> 00:09:49,046
to go beneath the
Status Bar as well


206
00:09:49,726 --> 00:09:52,606
and if you're wondering the
64 point height is the 44


207
00:09:52,606 --> 00:09:55,326
of the navigation bar plus the
20 points of the Status Bar.


208
00:09:56,426 --> 00:09:57,776
So this is what we'll be doing


209
00:09:57,776 --> 00:10:01,956
in our sample application using
the full height background image


210
00:10:02,876 --> 00:10:04,616
and this-- these changes apply


211
00:10:04,706 --> 00:10:07,046
to landscape size
background images as well.


212
00:10:08,106 --> 00:10:10,586
So, in those cases you
would use 32 points tall


213
00:10:11,056 --> 00:10:14,416
for just the navigation bar
background images or 52 points


214
00:10:14,566 --> 00:10:16,126
if you want the combined look.


215
00:10:18,056 --> 00:10:21,116
Now, when you use
navigation bars most


216
00:10:21,116 --> 00:10:22,996
of the time they appear at
the top of your application,


217
00:10:23,396 --> 00:10:24,916
but they can also
appear lower down


218
00:10:24,916 --> 00:10:26,186
and not part of the Status Bar.


219
00:10:26,686 --> 00:10:28,186
This usually happens
when they're used


220
00:10:28,186 --> 00:10:29,176
in things like popovers.


221
00:10:29,696 --> 00:10:32,886
And we've actually
introduced a new system


222
00:10:32,886 --> 00:10:35,466
so that you can set different
custom background images


223
00:10:35,606 --> 00:10:36,696
for these two different cases.


224
00:10:38,056 --> 00:10:41,476
To do this you can use a new
setter called setBackgroundImage


225
00:10:41,626 --> 00:10:44,576
for bar position,
barMetrics and this allows you


226
00:10:44,576 --> 00:10:47,816
to specify the top attached
bar position for the case


227
00:10:47,876 --> 00:10:50,276
of a combined Status
Bar and navigation bar


228
00:10:51,166 --> 00:10:54,056
or just the top bar
position if you want


229
00:10:54,056 --> 00:10:57,276
to customize the background of
a bar when it appears by itself.


230
00:10:58,756 --> 00:11:00,896
So this way, you can set
different custom background


231
00:11:00,896 --> 00:11:02,856
images that have
exactly the right height


232
00:11:03,166 --> 00:11:05,036
for the navigation
bars where it appears.


233
00:11:06,306 --> 00:11:08,546
And if you want, you can
also use the bar position,


234
00:11:08,546 --> 00:11:12,036
any bar position to set a
custom background images,


235
00:11:12,196 --> 00:11:13,766
image that applies
to both cases.


236
00:11:14,406 --> 00:11:16,786
And this is great if you have
a vertically resizable image


237
00:11:17,066 --> 00:11:21,486
because it will just be shown
at exactly the right size.


238
00:11:21,706 --> 00:11:24,546
Now, in older versions
of iOS we had a behavior


239
00:11:24,546 --> 00:11:26,586
when you set a custom
background image on a bar


240
00:11:27,226 --> 00:11:29,516
where if the height of your
background image was taller


241
00:11:29,516 --> 00:11:32,576
than the bar's height we
would extend that background


242
00:11:32,796 --> 00:11:35,546
to go beneath the bar and
into the content below.


243
00:11:35,546 --> 00:11:37,576
And this allowed
you to do things


244
00:11:37,576 --> 00:11:40,566
like have a shadow effect
inside of your background image.


245
00:11:41,266 --> 00:11:44,356
But because of this new behavior
where the background image


246
00:11:44,356 --> 00:11:48,656
of the bar can extend behind the
Status Bar we no longer support


247
00:11:48,656 --> 00:11:49,986
that older shadow behavior.


248
00:11:50,906 --> 00:11:54,266
However, instead you can use
a property called shadowImage


249
00:11:54,676 --> 00:11:55,996
that we introduced in iOS 6.


250
00:11:57,016 --> 00:11:59,786
This lets you set your own
dedicated shadowImage that's


251
00:11:59,786 --> 00:12:02,776
shown in just an area beneath
your bar and above the content


252
00:12:03,456 --> 00:12:06,486
and that allows you to create
exactly the custom shadow image


253
00:12:06,486 --> 00:12:08,856
that you want instead
of including it as part


254
00:12:08,856 --> 00:12:14,266
of an overly tall
background image for the bar.


255
00:12:14,466 --> 00:12:17,986
So another big change with
bars in iOS 7 is Translucency.


256
00:12:19,126 --> 00:12:21,916
By default, all of our
bars are now translucent


257
00:12:21,916 --> 00:12:24,416
and this includes
both the default


258
00:12:24,416 --> 00:12:29,026
and the black style navigation
bars and it also applies to bars


259
00:12:29,236 --> 00:12:31,086
that you've set a custom
Bar Tint Color for.


260
00:12:31,626 --> 00:12:35,426
When you set a custom background
image the behavior is a little


261
00:12:35,426 --> 00:12:39,116
bit more complex, will actually
analyze the background image


262
00:12:39,116 --> 00:12:40,596
that you set for the bar


263
00:12:41,146 --> 00:12:43,996
and determine whether the
image has any transparency


264
00:12:43,996 --> 00:12:44,556
in it or not.


265
00:12:45,686 --> 00:12:48,446
We'll use that determination
to set the Translucent Property


266
00:12:48,446 --> 00:12:50,546
of the bar so that it
matches what you've set


267
00:12:50,546 --> 00:12:51,656
as a background image.


268
00:12:52,816 --> 00:12:55,096
So these are all of the
default values that bars have


269
00:12:55,146 --> 00:12:57,776
for a Translucent Property,
but if you want to override


270
00:12:57,776 --> 00:13:00,136
that you can always set the
Translucent Property directly


271
00:13:00,136 --> 00:13:01,096
to whatever you want.


272
00:13:02,206 --> 00:13:04,456
And this will, of course,
change the appearance of the bar


273
00:13:05,246 --> 00:13:06,696
but it'll actually
also have an effect


274
00:13:06,966 --> 00:13:10,156
on how view controllers are laid
out in relation to that bar.


275
00:13:10,806 --> 00:13:15,176
So by default in iOS 7, if
you have a view controller


276
00:13:15,406 --> 00:13:18,166
that appears with bars like
this top navigation bar


277
00:13:18,216 --> 00:13:21,896
or bottom tab bar, if the
bar is translucent we'll lay


278
00:13:21,896 --> 00:13:23,786
out your view controller
such that it's


279
00:13:23,786 --> 00:13:25,166
under both of those two bars.


280
00:13:26,116 --> 00:13:28,786
However, if those bars are
opaque then we'll just lay


281
00:13:28,786 --> 00:13:30,996
out your view controller
in the area between them.


282
00:13:31,626 --> 00:13:33,946
So, this is something
to keep in mind


283
00:13:34,226 --> 00:13:35,686
as you're designing
your view controllers


284
00:13:35,836 --> 00:13:36,596
and how they're laid out.


285
00:13:37,926 --> 00:13:39,966
And there are also places


286
00:13:39,966 --> 00:13:42,696
that you can set the different
behavior of these properties


287
00:13:42,756 --> 00:13:43,756
in the UIView controller.


288
00:13:43,876 --> 00:13:45,756
I don't have time to
talk about all of--


289
00:13:45,756 --> 00:13:47,656
how all of this works
today, but you can look


290
00:13:47,656 --> 00:13:48,976
at the UIView controller header


291
00:13:49,296 --> 00:13:55,056
to see details of
how that works.


292
00:13:55,246 --> 00:13:58,096
Now, another change that
you'll see with the buttons


293
00:13:58,156 --> 00:14:01,206
that appear both the
navigation bars and in the rest


294
00:14:01,206 --> 00:14:04,856
of your application is that
they no longer show any bezels


295
00:14:05,076 --> 00:14:06,116
around them by default.


296
00:14:07,136 --> 00:14:09,476
The new default appearance
of our buttons is


297
00:14:10,126 --> 00:14:12,566
that they'll show either
their text or their image


298
00:14:12,906 --> 00:14:14,676
and the tint color
that they have.


299
00:14:15,656 --> 00:14:18,786
So as you can see, we have
this Edit and Compose buttons


300
00:14:18,786 --> 00:14:20,756
and they don't have any bezels.


301
00:14:21,986 --> 00:14:25,336
If you'd like to use some kind
of outline, background or bezel


302
00:14:25,626 --> 00:14:28,066
in your buttons you can
actually still use all


303
00:14:28,066 --> 00:14:30,326
of the customization
techniques that we've had before


304
00:14:30,616 --> 00:14:32,416
to set a custom background
image for your buttons


305
00:14:32,416 --> 00:14:35,946
and this will still draw bezels
just as it has traditionally.


306
00:14:36,566 --> 00:14:40,316
And this applies to the
Back Button as well.


307
00:14:40,926 --> 00:14:44,536
Here, you'll notice that the
Back Button shows just the back


308
00:14:44,536 --> 00:14:46,266
text and back chevron.


309
00:14:47,896 --> 00:14:50,386
And this is the default
appearance that you can custom


310
00:14:50,476 --> 00:14:51,786
in actually two different ways.


311
00:14:52,456 --> 00:14:56,796
As I said, you can use our
traditional older methods


312
00:14:56,986 --> 00:14:59,296
to set a background image
for your Back Button


313
00:15:00,056 --> 00:15:00,806
and if you do that,


314
00:15:00,986 --> 00:15:03,566
we'll actually turn off the back
indicator chevron that's shown


315
00:15:03,606 --> 00:15:07,036
here, because generally you'll
include a back indicator as part


316
00:15:07,036 --> 00:15:08,126
of your background artwork.


317
00:15:09,346 --> 00:15:10,896
However, if you want to continue


318
00:15:11,016 --> 00:15:13,686
with the background list
appearance of our buttons


319
00:15:14,206 --> 00:15:17,316
as we're doing in our sample
application then instead you can


320
00:15:17,316 --> 00:15:18,906
customize the back
indicator chevron.


321
00:15:18,966 --> 00:15:22,166
To do that we've
introduced a new property


322
00:15:22,166 --> 00:15:24,986
to UI Navigation Bar
called backIndicatorImage.


323
00:15:26,246 --> 00:15:29,196
And this lets you set your
own custom back chevron.


324
00:15:30,176 --> 00:15:32,156
This is the one we're using
in our ample application.


325
00:15:32,736 --> 00:15:35,356
It's kind of a combination of
the back chevron with the X


326
00:15:35,356 --> 00:15:38,896
from the tic-tac-toe game


327
00:15:38,896 --> 00:15:40,606
and that's what it
looks like in context.


328
00:15:41,856 --> 00:15:43,426
However, one thing you
want to keep in mind


329
00:15:43,686 --> 00:15:47,356
as we're customizing this back
indicator is that it's also used


330
00:15:47,596 --> 00:15:49,896
for push and pop transitions
of the navigation bar


331
00:15:50,516 --> 00:15:53,926
to make the text of the
Back Button flow into


332
00:15:53,926 --> 00:15:55,316
and out of the back chevron.


333
00:15:55,926 --> 00:15:59,486
So to do this effect,
we actually show--


334
00:15:59,656 --> 00:16:01,896
use a mask image that's
a triangular shape


335
00:16:02,586 --> 00:16:05,406
to mask the text as its
moving during the transition.


336
00:16:05,406 --> 00:16:09,206
And if you're changing the
back indicator then you'll want


337
00:16:09,206 --> 00:16:10,576
to change this mask
image as well.


338
00:16:10,576 --> 00:16:12,666
And you can use this
other method


339
00:16:12,786 --> 00:16:14,696
backIndicatorTransitionMask
Image


340
00:16:15,106 --> 00:16:16,496
to set a custom image for that.


341
00:16:16,496 --> 00:16:19,636
And in fact, these two
properties are closely


342
00:16:19,636 --> 00:16:20,236
linked together.


343
00:16:20,646 --> 00:16:23,246
So if you want to customize
the back indicator you have


344
00:16:23,246 --> 00:16:25,436
to set custom values for
both of these two properties.


345
00:16:25,766 --> 00:16:28,766
Otherwise, we won't use the
custom image that you set.


346
00:16:29,316 --> 00:16:32,216
This is our custom back
transition mask that we're using


347
00:16:32,216 --> 00:16:35,536
in our application and notice
that when we use it the text


348
00:16:35,986 --> 00:16:37,776
of the Back Button
as its flowing


349
00:16:37,776 --> 00:16:39,956
in is clipped to exactly match.


350
00:16:40,976 --> 00:16:43,916
As you're designing these two
images you want to keep this


351
00:16:43,916 --> 00:16:46,346
in mind, the fact that they
should exactly fit together


352
00:16:46,726 --> 00:16:51,386
so that the masking effect
works as the text is moving.


353
00:16:51,526 --> 00:16:54,566
Alright, our application
also uses a Tab bar


354
00:16:54,566 --> 00:16:55,536
as part of its appearance.


355
00:16:56,846 --> 00:16:59,006
And the first thing you'll
notice about Tab Bars


356
00:16:59,006 --> 00:17:01,526
in iOS 7 is that they're
now wiped by default.


357
00:17:02,396 --> 00:17:04,536
But they also have a
new bar style property


358
00:17:05,096 --> 00:17:07,195
that matches the rest
of our bars in UIKit


359
00:17:07,195 --> 00:17:11,786
and this lets you set either a
default bar style for dark text


360
00:17:11,786 --> 00:17:15,425
on a white colored
background or a black bar style


361
00:17:15,756 --> 00:17:17,945
to get the inverse, light
text on a dark background.


362
00:17:18,685 --> 00:17:20,705
And this is exactly the
same behavior as all


363
00:17:20,705 --> 00:17:21,955
of the bar styles
on our other bars.


364
00:17:22,516 --> 00:17:28,076
[ Silence ]


365
00:17:28,576 --> 00:17:31,676
>> Alright, now another
thing you'll see as you look


366
00:17:31,676 --> 00:17:34,566
at Tab Bars in iOS
7 is that many


367
00:17:34,566 --> 00:17:37,056
of them have different print
images for their selected


368
00:17:37,316 --> 00:17:38,306
and unselected states.


369
00:17:39,196 --> 00:17:41,836
So, if you look at this example
from the Clock application,


370
00:17:42,586 --> 00:17:44,246
you'll see that all
of the images,


371
00:17:44,246 --> 00:17:46,196
that all of the tabs have
different selected images


372
00:17:46,196 --> 00:17:49,096
that are a little heavier
and they have more fills


373
00:17:49,706 --> 00:17:52,046
than the outlines in
the unselected images.


374
00:17:53,006 --> 00:17:54,566
We've made this easier
for you to do


375
00:17:54,566 --> 00:17:56,466
in your application
in iOS 7 as well.


376
00:17:57,176 --> 00:18:01,496
So, traditionally UItabBarItem
has had an image property


377
00:18:01,966 --> 00:18:05,046
that lets you set your own
image on the tab bar item


378
00:18:05,046 --> 00:18:07,056
and that image was used both


379
00:18:07,056 --> 00:18:09,566
when the tab bar items was
selected and unselected.


380
00:18:11,076 --> 00:18:12,156
You can still use that now


381
00:18:12,156 --> 00:18:15,366
but we've also introduced a new
property called selected Image.


382
00:18:16,156 --> 00:18:17,706
And this lets you
set a second image


383
00:18:17,936 --> 00:18:21,266
to override the image property
when the tab bar is selected.


384
00:18:22,286 --> 00:18:25,896
So, if we use that in our sample
application we can set three


385
00:18:25,896 --> 00:18:30,246
different images to have
a heavier look as well


386
00:18:30,516 --> 00:18:32,086
when our different
tabs are selected.


387
00:18:32,686 --> 00:18:35,086
So, that's Tab Bars.


388
00:18:36,396 --> 00:18:40,756
Table Views also have
many changes in iOS 7.


389
00:18:40,906 --> 00:18:43,096
One of the first things
you'll see is that instead


390
00:18:43,226 --> 00:18:45,716
of the rounded rectangle
appearance group style table


391
00:18:45,716 --> 00:18:49,396
views had in iOS 6, they now
have an end-to-end design


392
00:18:49,396 --> 00:18:51,686
that looks more similar to
the plain style table views.


393
00:18:52,636 --> 00:18:54,516
However, they still
do have differences.


394
00:18:55,016 --> 00:18:58,916
The backgrounds are now a darker
gray and there's a larger space


395
00:18:59,036 --> 00:19:00,046
between the different sections.


396
00:19:00,916 --> 00:19:03,716
So, redesigning your app
for iOS 7 you may want


397
00:19:03,716 --> 00:19:07,996
to consider using Group Style
Table Views in different places.


398
00:19:08,126 --> 00:19:10,866
Another change with table views
is their highlighted appearance


399
00:19:11,016 --> 00:19:13,626
of the rows in Table Views.


400
00:19:13,806 --> 00:19:17,466
Before iOS 7 we would show a
dark blue background behind a


401
00:19:17,536 --> 00:19:18,636
selected Table View cell


402
00:19:19,206 --> 00:19:21,156
and we would generally
invert the content


403
00:19:21,156 --> 00:19:23,086
of the Table View cell
to appear in white.


404
00:19:24,646 --> 00:19:28,766
However, in iOS 7 we show a more
subtle gray background behind


405
00:19:28,766 --> 00:19:29,986
the selected Table View cell


406
00:19:30,796 --> 00:19:32,726
and generally now we
don't invert the colors


407
00:19:32,726 --> 00:19:33,316
of the content.


408
00:19:34,366 --> 00:19:37,016
So as you're designing your
new Table View cells you should


409
00:19:37,016 --> 00:19:38,846
consider leaving the
colors as they are


410
00:19:39,056 --> 00:19:40,766
when your Table View
cell becomes selected.


411
00:19:41,366 --> 00:19:44,826
Now additionally, if you'd
like to change the color


412
00:19:45,226 --> 00:19:47,336
of the background that's
shown behind a cell


413
00:19:47,336 --> 00:19:50,506
when it's selected you can still
use the same property we've had


414
00:19:50,546 --> 00:19:52,636
for a while,
selectedBackgroundView.


415
00:19:53,136 --> 00:19:55,186
This lets you provide
your own background view


416
00:19:55,186 --> 00:19:58,376
for the cell that's used in
place of our standard one.


417
00:20:00,696 --> 00:20:03,836
Something else we've introduced
in iOS 7 is the new button type.


418
00:20:04,786 --> 00:20:06,516
We call this UIButton
Type System.


419
00:20:06,886 --> 00:20:08,956
You can get it with the same
button with type method.


420
00:20:09,946 --> 00:20:13,796
Now this button is a standard
system button just like the ones


421
00:20:13,796 --> 00:20:15,106
that we use in navigation bars.


422
00:20:16,526 --> 00:20:19,216
And this new button type
replaces the existing rounded


423
00:20:19,246 --> 00:20:21,736
Rec button type, which is
now deprecated on iOS 7.


424
00:20:22,816 --> 00:20:28,466
When you use this system style
button you'll get all the


425
00:20:28,466 --> 00:20:30,316
default behaviors that
we use for our buttons,


426
00:20:30,756 --> 00:20:32,916
which includes this
appearance where they're shown


427
00:20:32,916 --> 00:20:37,056
without a bezel and with their
text or image in the Tint Color


428
00:20:37,396 --> 00:20:41,156
of the application and you
also get several animations


429
00:20:41,156 --> 00:20:42,266
and other effects for free.


430
00:20:43,186 --> 00:20:45,646
So, you'll get a highlighted
effect that looks like this


431
00:20:46,406 --> 00:20:49,106
where a window button is
tapped will change its opacity


432
00:20:49,326 --> 00:20:50,706
to indicate that
it's being pressed.


433
00:20:51,656 --> 00:20:55,266
And you'll also get a new
selected appearance just


434
00:20:55,266 --> 00:20:57,536
by setting the selected
property of the button to Yes.


435
00:20:59,036 --> 00:21:02,746
When you do that we'll show
the selection indicator to show


436
00:21:02,746 --> 00:21:03,956
that your button
has been selected.


437
00:21:04,546 --> 00:21:08,616
So we're using these buttons
in our sample application


438
00:21:08,616 --> 00:21:11,626
for the Pause and New
Game buttons and also


439
00:21:11,626 --> 00:21:13,756
for this Reply Button that
we show in the messages view.


440
00:21:13,756 --> 00:21:17,976
All of the other
controls that we have


441
00:21:17,976 --> 00:21:21,146
in UIKit have all changed
quite a bit as well in iOS 7.


442
00:21:21,856 --> 00:21:23,936
They all have different
appearances and many


443
00:21:23,936 --> 00:21:25,316
of them have different
metrics as well.


444
00:21:26,286 --> 00:21:28,206
And the best way to deal
with these metrics changes is


445
00:21:28,206 --> 00:21:29,946
to use Autolayout
in your application


446
00:21:30,366 --> 00:21:33,236
so that you remain flexible to
these changes and don't have


447
00:21:33,296 --> 00:21:36,636
to hard-coat in different sizes.


448
00:21:36,636 --> 00:21:38,886
However, despite these
appearance changes all


449
00:21:38,886 --> 00:21:40,976
of the traditional methods
that we have for setting,


450
00:21:40,976 --> 00:21:45,106
customizing images, colors and
text attributes still work great


451
00:21:45,106 --> 00:21:46,186
on all of these controls.


452
00:21:46,186 --> 00:21:48,466
So you can still
make them themed


453
00:21:48,606 --> 00:21:50,686
to exactly match your
application just as you'd like.


454
00:21:51,266 --> 00:21:55,096
Now, there's one
last change in iOS 7


455
00:21:55,286 --> 00:21:57,706
that will affect how you set up
your customizations for your app


456
00:21:58,156 --> 00:21:59,336
and that's Asset Catalogs.


457
00:22:00,346 --> 00:22:03,396
Asset Catalogs are a new
system that we've introduced


458
00:22:03,616 --> 00:22:05,916
that allows you to combine
all of the images that you use


459
00:22:05,916 --> 00:22:08,266
into your application
into one resource file.


460
00:22:09,116 --> 00:22:11,136
And this lets you
consolidate all of your images


461
00:22:11,586 --> 00:22:13,866
and also gives you
several new capabilities.


462
00:22:14,506 --> 00:22:17,116
You can now set different images
for different device types


463
00:22:17,356 --> 00:22:19,846
and scales and you can
even do your slicing


464
00:22:19,886 --> 00:22:21,656
of your images right
inside of Xcode.


465
00:22:22,626 --> 00:22:24,886
So, I would highly recommend
that you use Asset Catalogs


466
00:22:25,216 --> 00:22:27,666
for all of your custom images
in your iOS 7 application.


467
00:22:28,046 --> 00:22:31,976
Alright, so those are some of
the basics of what's changed


468
00:22:31,976 --> 00:22:33,626
with customization in iOS 7.


469
00:22:34,296 --> 00:22:38,026
Now, let's talk about
some advanced topics.


470
00:22:38,136 --> 00:22:41,226
Earlier I mentioned Tint Color
and how you can use one line


471
00:22:41,226 --> 00:22:44,026
of code to change the tint color
of your entire application.


472
00:22:44,026 --> 00:22:46,016
But what's actually
happening here?


473
00:22:46,546 --> 00:22:50,146
When I showed you the
Tint Color on every view,


474
00:22:50,686 --> 00:22:52,496
it's actually a little
bit more subtle than that.


475
00:22:53,866 --> 00:22:55,106
Conceptually, you can think


476
00:22:55,106 --> 00:22:57,386
of their being two different
Tint Colors on each view.


477
00:22:58,086 --> 00:22:59,266
Now there's only one property.


478
00:22:59,396 --> 00:23:00,796
This is just a conceptual
way to think


479
00:23:00,796 --> 00:23:03,066
about how this property
works and try


480
00:23:03,066 --> 00:23:06,286
to help you understand the
behavior of Tint Color in iOS 7.


481
00:23:07,416 --> 00:23:09,696
So, I'll call these the Specific


482
00:23:09,696 --> 00:23:11,256
and Inherited tint
color of the view.


483
00:23:12,126 --> 00:23:16,306
The Specific Tint Color is the
one that you've set on a view


484
00:23:16,366 --> 00:23:17,426
with a tint color setter.


485
00:23:18,896 --> 00:23:21,566
The Inherited Tint Color on the
other hand is what you get back


486
00:23:21,676 --> 00:23:23,436
when you call the
tintColorGetter


487
00:23:23,436 --> 00:23:24,146
on the same view.


488
00:23:24,146 --> 00:23:28,026
And these two are not
necessarily the same.


489
00:23:28,206 --> 00:23:32,136
So, the reason that I call
it an Inherited Tint Color is


490
00:23:32,136 --> 00:23:34,056
that if you haven't set
a specific Tint Color


491
00:23:34,056 --> 00:23:36,756
on that view then it will
actually inherit the Tint Color


492
00:23:36,896 --> 00:23:37,626
of its super view.


493
00:23:37,626 --> 00:23:41,066
And if it doesn't have a super
view it will inherit a system


494
00:23:41,066 --> 00:23:44,136
default color, in this
case, this blue color.


495
00:23:44,716 --> 00:23:47,376
So, now if we look again
at the example from earlier


496
00:23:47,626 --> 00:23:51,246
where we set a red tint color
on our window you'll see


497
00:23:51,246 --> 00:23:53,296
that the setter sets
the specific Tint Color


498
00:23:53,356 --> 00:23:53,756
for the window.


499
00:23:54,696 --> 00:23:58,006
After that happens the Inherited
Tint Color will now use the


500
00:23:58,006 --> 00:24:00,476
specific Tint Color
because it's non-nil instead


501
00:24:00,476 --> 00:24:01,996
of inheriting the
system default.


502
00:24:03,086 --> 00:24:05,786
After that all of the
subviews that have nil


503
00:24:05,846 --> 00:24:08,916
as their specific tint color
will inherit the tint--


504
00:24:08,916 --> 00:24:11,796
the inherited Tint Color of
their superview, the window,


505
00:24:12,366 --> 00:24:13,396
and they'll become red as well.


506
00:24:14,726 --> 00:24:18,126
Then that process will
repeat until all of the views


507
00:24:18,126 --> 00:24:20,956
in that window that did have
their own specific color have


508
00:24:20,956 --> 00:24:23,736
adopted the red tint color.


509
00:24:23,926 --> 00:24:27,476
Now, if we then change the Tint
Color of the window back to nil,


510
00:24:28,126 --> 00:24:29,856
we've essentially erased
the Specific Tint Color


511
00:24:29,856 --> 00:24:32,136
for the window, which
means it will go back


512
00:24:32,136 --> 00:24:33,466
to inheriting the system default


513
00:24:34,126 --> 00:24:36,566
and that change will be
inherited by all of its subviews


514
00:24:36,956 --> 00:24:40,076
and so on until all of the
views in the window will go back


515
00:24:40,076 --> 00:24:43,826
to the system default
blue color.


516
00:24:44,006 --> 00:24:46,766
So, this same behavior applies
if you set the Tint Color


517
00:24:46,956 --> 00:24:48,076
on a subview of the window.


518
00:24:49,106 --> 00:24:51,986
So, now let's set the Tint
Color of this Tab Bar to green.


519
00:24:52,886 --> 00:24:54,406
Once again when we
call the setter,


520
00:24:54,526 --> 00:24:57,406
the setter for Tint Color we're
setting the Specific Tint Color,


521
00:24:58,126 --> 00:25:00,116
which it then becomes
the Inherited Tint Color


522
00:25:00,766 --> 00:25:02,896
and which then is also
inherited by its children.


523
00:25:03,546 --> 00:25:07,786
So now that we set a Tint Color
for this subview hierarchy


524
00:25:08,326 --> 00:25:10,996
if we again go back and set
the windows Tint Color to red,


525
00:25:11,296 --> 00:25:12,656
something a little bit
different will happen.


526
00:25:13,656 --> 00:25:16,646
Once again, the Specific Tint
Color becomes the Inherited Tint


527
00:25:16,696 --> 00:25:20,306
Color and now that
color is inherited by--


528
00:25:21,106 --> 00:25:23,536
by only the children
that have a nil,


529
00:25:23,876 --> 00:25:26,216
a nil Specific Tint
Color of their own.


530
00:25:28,196 --> 00:25:34,026
So you'll see that the Pause
and New Game buttons become red,


531
00:25:34,936 --> 00:25:35,976
but the Tab Bar remains green.


532
00:25:36,516 --> 00:25:43,686
[ Silence ]


533
00:25:44,186 --> 00:25:44,506
>> Alright.


534
00:25:45,206 --> 00:25:47,786
So this is how you can
get different colors


535
00:25:47,986 --> 00:25:49,526
for different parts of
your view hierarchy.


536
00:25:50,206 --> 00:25:53,676
Now, there's one
additional special behavior


537
00:25:53,676 --> 00:25:56,646
that Tint Color has and
that's related to what happens


538
00:25:56,696 --> 00:25:59,226
when you show alerts and action
sheets in your application.


539
00:26:00,206 --> 00:26:03,556
If you look closely when this
alert is shown the background is


540
00:26:03,556 --> 00:26:06,986
dimmed, but also all of the
places that show the Tint Color


541
00:26:06,986 --> 00:26:09,186
of the application
have become desaturated


542
00:26:09,186 --> 00:26:12,386
and that happens automatically
whenever an alert appears.


543
00:26:13,736 --> 00:26:16,216
The reason we do this is
so that those tint colors


544
00:26:16,216 --> 00:26:17,846
in the background
don't interfere


545
00:26:17,846 --> 00:26:19,756
with your focus on
the alert itself.


546
00:26:21,066 --> 00:26:22,186
And this is accomplished


547
00:26:22,186 --> 00:26:24,136
by a new property
called TintAdjustMode.


548
00:26:25,286 --> 00:26:27,886
TintAdjustmentMode is
closely related to Tint Color


549
00:26:28,116 --> 00:26:30,166
and it can have these
three different values.


550
00:26:31,476 --> 00:26:34,426
When it's set to normal then
we'll show the Tint Color


551
00:26:34,486 --> 00:26:38,286
of those-- of every view as
its original saturated color


552
00:26:38,346 --> 00:26:41,716
and when it's dimmed then we'll
automatically desaturate the


553
00:26:41,716 --> 00:26:43,176
tint color of those
views for you.


554
00:26:44,176 --> 00:26:44,766
And we'll come back


555
00:26:44,766 --> 00:26:48,456
to the AutomaticTintMode
a little bit later.


556
00:26:48,646 --> 00:26:49,616
So, let's take a look


557
00:26:49,616 --> 00:26:51,716
at how TintAdjustmentMode
works for view hierarchy.


558
00:26:52,846 --> 00:26:55,076
Every view has a
TintAjusmentMode property


559
00:26:55,076 --> 00:26:58,446
as well and if you call the
getter it defaults returning


560
00:26:58,446 --> 00:26:59,926
normal for all of these views.


561
00:27:00,466 --> 00:27:05,296
Now, when an alert appears
it sets the TintAdjusmentMode


562
00:27:05,406 --> 00:27:07,046
of the window to be dimmed.


563
00:27:08,546 --> 00:27:11,486
Once that is dimmed then the
Tint Color that's returned


564
00:27:11,536 --> 00:27:12,566
for the Inherited Tint Color


565
00:27:12,566 --> 00:27:14,856
of that window becomes
a desaturated gray.


566
00:27:16,276 --> 00:27:19,706
Then that will be inherited
similarly to Tint Color by all


567
00:27:19,706 --> 00:27:23,236
of the subviews of the window so
those views will become dimmed


568
00:27:23,306 --> 00:27:24,706
as their TintAdjusmentMode
as well,


569
00:27:25,316 --> 00:27:28,086
which will cause their tint
color to be desaturated and so


570
00:27:28,086 --> 00:27:31,506
on until the entire
window becomes dimmed


571
00:27:31,506 --> 00:27:35,186
and has desaturated Tint Colors.


572
00:27:35,346 --> 00:27:37,686
So, this is not only
something that happens


573
00:27:37,686 --> 00:27:39,666
with system views like alerts.


574
00:27:40,026 --> 00:27:42,356
You can actually incorporate
this into your own app as well.


575
00:27:42,356 --> 00:27:43,606
And we've done this


576
00:27:43,676 --> 00:27:46,326
in our sample application
in the Messages view.


577
00:27:47,276 --> 00:27:50,856
Here when you tap on the
Compose icon we show a new


578
00:27:50,856 --> 00:27:51,466
message sheet.


579
00:27:51,976 --> 00:27:55,956
And when this sheet appears
we like it to look similarly


580
00:27:55,956 --> 00:27:56,986
to how an alert appears.


581
00:27:57,816 --> 00:28:00,106
So, we'll set the
TintAdjustmentMode of the window


582
00:28:00,296 --> 00:28:03,556
to be dimmed, but you'll notice
that there's a problem here.


583
00:28:04,676 --> 00:28:06,096
Not only have we
dimmed the window


584
00:28:06,346 --> 00:28:08,506
but if we show the new
method sheet inside


585
00:28:08,506 --> 00:28:10,576
of the window then it will
become dimmed as well.


586
00:28:11,016 --> 00:28:13,086
So, now our Cancel and
Post button instead


587
00:28:13,086 --> 00:28:15,686
of being red are
desaturated to gray as well.


588
00:28:16,396 --> 00:28:17,486
So, how can we fix that problem?


589
00:28:18,956 --> 00:28:20,986
Well, when I showed you the
TintAdjustmentMode property


590
00:28:20,986 --> 00:28:23,316
earlier, I left something out
which you may have guessed


591
00:28:23,316 --> 00:28:26,826
by now and that's that there's
a second TintAdjustmentMode


592
00:28:26,876 --> 00:28:27,826
conceptually as well.


593
00:28:27,876 --> 00:28:30,456
And this has the same Specific


594
00:28:30,456 --> 00:28:33,466
and Inherited TintAdjusmentMode
just the way the Tint


595
00:28:33,466 --> 00:28:33,936
Color does.


596
00:28:35,376 --> 00:28:38,776
The specific TintAdjustmentMode
review is what you've actually


597
00:28:38,776 --> 00:28:40,566
set with the TintAdjusmentMode
setter


598
00:28:41,166 --> 00:28:43,296
and then the Inherited
TintAdjustmentMode is what you


599
00:28:43,296 --> 00:28:44,326
get back with the getter.


600
00:28:45,096 --> 00:28:46,906
So again, this works the
same way as Tint Color.


601
00:28:47,706 --> 00:28:50,026
And this is where the
AutomaticTintAdjusmentMode comes


602
00:28:50,026 --> 00:28:50,366
into play.


603
00:28:52,206 --> 00:28:55,256
When a view has the Automatic
Specific TintAdjustmentMode then


604
00:28:55,256 --> 00:28:57,866
it will inherit its
superview's TintAdjusmentMode


605
00:28:57,866 --> 00:29:00,946
and if its superview doesn't
have one it will use the system


606
00:29:00,946 --> 00:29:03,636
default TintAdjusmentMode,
which is normal.


607
00:29:04,496 --> 00:29:06,416
Again, this is the same
way the tint color works


608
00:29:06,836 --> 00:29:10,006
where if the view has a nil
specific tint color it will


609
00:29:10,006 --> 00:29:13,786
inherit its superviews and if it
has no superview it will inherit


610
00:29:13,896 --> 00:29:15,126
the system default.


611
00:29:15,716 --> 00:29:18,126
So, now if we look at the
example again from earlier


612
00:29:18,656 --> 00:29:21,206
where we set the
TintAdjustmentMode of the window


613
00:29:21,206 --> 00:29:22,996
to be dimmed we'll see


614
00:29:22,996 --> 00:29:24,916
that we're setting the
Specific TintAdjustmentMode,


615
00:29:25,726 --> 00:29:27,766
which becomes the
Inherited TintAdjustmentMode


616
00:29:27,766 --> 00:29:28,856
when its non-automatic


617
00:29:29,596 --> 00:29:31,556
and that's what desaturates
the color of the view.


618
00:29:31,556 --> 00:29:34,216
And then it sends
all of our subviews


619
00:29:34,216 --> 00:29:37,746
to Automatic TintAdjustmentMode,
they inherit their superviews


620
00:29:37,926 --> 00:29:38,906
and become dimmed as well.


621
00:29:39,696 --> 00:29:41,336
Then they become desaturated ad


622
00:29:41,666 --> 00:29:43,366
that repeats throughout
the entire window.


623
00:29:44,006 --> 00:29:47,596
So, this is where we
can take advantage


624
00:29:47,596 --> 00:29:49,686
of the same thing we did
earlier with Tint Color


625
00:29:49,926 --> 00:29:51,666
to created a green
subview hierarchy.


626
00:29:52,266 --> 00:29:55,356
Now we'll set the
TintAdjusmentMode instead


627
00:29:55,356 --> 00:29:58,246
of the Tint Color of this
subview, which is our Tab Bar


628
00:29:58,246 --> 00:29:59,886
in this case to be normal.


629
00:30:00,906 --> 00:30:03,856
Again, by setting the
TintAdjusmentMode setter we're


630
00:30:03,856 --> 00:30:05,466
setting the Specific
TintAdjustmentMode.


631
00:30:06,406 --> 00:30:10,206
Then, since it's not automatic,
our view will stop inheriting


632
00:30:10,256 --> 00:30:12,206
from its superview and
become normal as well.


633
00:30:12,866 --> 00:30:16,506
Since it's normal its color
will become resaturated and all


634
00:30:16,506 --> 00:30:18,836
of its subviews that have
Automatic TintAdjusmentModes


635
00:30:19,046 --> 00:30:20,056
will inherit that as well.


636
00:30:20,846 --> 00:30:22,886
So, we'll have this
kind of island of color


637
00:30:22,926 --> 00:30:25,346
within our greater
view-- our greater window,


638
00:30:25,416 --> 00:30:26,766
which is otherwise desaturated.


639
00:30:27,286 --> 00:30:32,876
Now that's what we can use to
bring back the color to our--


640
00:30:32,876 --> 00:30:34,086
to our new message sheets.


641
00:30:34,476 --> 00:30:35,976
But there's one last thing
that we'll need to do,


642
00:30:36,466 --> 00:30:37,926
which is what we're going to do


643
00:30:37,926 --> 00:30:39,306
when the new message
sheet disappears.


644
00:30:40,436 --> 00:30:42,896
So, if we look at the red and
green example from earlier,


645
00:30:42,986 --> 00:30:46,026
when we set the
TintAdjustmentMode of the window


646
00:30:46,026 --> 00:30:49,886
to be dimmed once again that
will replace the inherited value


647
00:30:50,166 --> 00:30:52,746
and desaturate all of
the views in that window.


648
00:30:53,396 --> 00:30:54,376
But if you look carefully,


649
00:30:54,916 --> 00:30:57,496
only the Inherited Tint
Colors are changing.


650
00:30:58,236 --> 00:31:00,506
All of the Specific Tint
Colors remain the same.


651
00:31:01,116 --> 00:31:03,656
So, the red and green are
still there, they're just kind


652
00:31:03,656 --> 00:31:05,116
of hidden by the
stimming effect.


653
00:31:05,666 --> 00:31:08,216
And the great thing
about that is


654
00:31:08,216 --> 00:31:10,426
that when we set the
TintAdjusmentMode


655
00:31:10,426 --> 00:31:11,646
of the window back


656
00:31:12,406 --> 00:31:16,596
to be automatic our Inherited
TintAdjusmentMode goes back


657
00:31:16,596 --> 00:31:19,526
to normal and all of our
colors become resaturated


658
00:31:19,716 --> 00:31:21,646
to the same colors that
they were originally.


659
00:31:22,286 --> 00:31:25,126
So, our view hierarchy returns
to all of its reds and greens.


660
00:31:26,466 --> 00:31:29,136
Alright, let's take that and
use it in our new message sheet.


661
00:31:29,936 --> 00:31:32,246
So, here we have our window
before we showed the new


662
00:31:32,246 --> 00:31:32,816
method sheet.


663
00:31:33,716 --> 00:31:36,126
Then as we show the sheet
we'll set the windows


664
00:31:36,126 --> 00:31:37,626
TintAdjustmentMode to dim


665
00:31:38,216 --> 00:31:40,696
and the sheet's
TintAdjustmentMode to normal.


666
00:31:41,286 --> 00:31:44,176
That way we get exactly what we
want where we have our Cancel


667
00:31:44,176 --> 00:31:46,556
and Post button in red,
even though the rest


668
00:31:46,556 --> 00:31:47,506
of the window is gray.


669
00:31:48,556 --> 00:31:51,396
And finally, when we dismiss
the sheet we'll set the


670
00:31:51,476 --> 00:31:53,826
TintAdjusmentMode of the
window back to be automatic,


671
00:31:54,136 --> 00:31:55,436
so return everything
to its color.


672
00:31:57,106 --> 00:31:59,406
So, that's the Tint Color and
TintAdjusmentMode properties


673
00:31:59,596 --> 00:32:02,936
and how to use them in iOS 7.


674
00:32:03,096 --> 00:32:05,766
Now, another part of
our Messages view is


675
00:32:05,766 --> 00:32:07,206
in the Navigation
Bar at the top.


676
00:32:07,826 --> 00:32:09,786
We have a Favorites
button that you can use


677
00:32:09,836 --> 00:32:11,426
to favorite messages
that you're received.


678
00:32:12,616 --> 00:32:14,606
However, this is the
artwork that we're using


679
00:32:14,756 --> 00:32:16,846
for that Bar Button
item and notice


680
00:32:16,846 --> 00:32:19,506
that it has a gold radiant
color in the artwork.


681
00:32:19,976 --> 00:32:20,986
But when we actually use it


682
00:32:20,986 --> 00:32:23,496
in the Navigation Bar it's
just getting color to be red.


683
00:32:24,626 --> 00:32:26,546
This is generally what
you want actually.


684
00:32:26,616 --> 00:32:28,636
If you look the Compose
button it's shown in red


685
00:32:28,636 --> 00:32:30,476
and that matches the
rest of the Tint Color.


686
00:32:31,096 --> 00:32:33,896
But with our Favorite button
we want to see this gold star


687
00:32:33,896 --> 00:32:35,146
so people will really feel happy


688
00:32:35,146 --> 00:32:36,516
when you favorite
their messages.


689
00:32:37,476 --> 00:32:38,826
So, how can we fix this problem?


690
00:32:40,266 --> 00:32:43,786
Well we're using a concept
called Template Images in iOS 7


691
00:32:44,236 --> 00:32:45,156
to do this recoloring.


692
00:32:46,026 --> 00:32:47,486
When an image is
a template image,


693
00:32:48,006 --> 00:32:49,206
instead of being drawn as--


694
00:32:49,306 --> 00:32:52,496
with its original colors the
image is treated as a stencil.


695
00:32:53,456 --> 00:32:55,956
So, we'll take the shape of
the image and we'll recolor it


696
00:32:56,076 --> 00:32:57,596
to be whatever the
Tint Color is.


697
00:32:58,476 --> 00:33:00,756
And the great thing
about Template Images is


698
00:33:00,756 --> 00:33:03,486
that they can be recolored
to match the rest of the UI


699
00:33:04,086 --> 00:33:05,176
as the Tint Color changes.


700
00:33:05,606 --> 00:33:09,926
However, sometimes
you'll want to opt out


701
00:33:10,696 --> 00:33:13,646
and to let you control this
behavior we have a new property


702
00:33:13,716 --> 00:33:19,846
on UIImage called Rendering
Mode lets you control whether an


703
00:33:19,846 --> 00:33:22,806
image is treated as an
original image and shown


704
00:33:22,806 --> 00:33:25,296
in its full colors or
whether it's treated


705
00:33:25,296 --> 00:33:26,066
as a template image.


706
00:33:27,196 --> 00:33:29,676
Here are the three different
values for Image Rendering Mode


707
00:33:29,676 --> 00:33:32,306
and we'll use our star
image as an example.


708
00:33:33,146 --> 00:33:35,666
Now, the important thing about
how images are rendered is


709
00:33:35,666 --> 00:33:37,746
that it depends on what
context they're used in.


710
00:33:38,546 --> 00:33:40,026
So, we'll talk about
an ImageView


711
00:33:40,486 --> 00:33:43,946
and also a BarButtonItem like
the one in our Navigation Bar.


712
00:33:45,256 --> 00:33:48,146
The Automatic Image
Rendering Mode means


713
00:33:48,236 --> 00:33:50,296
to render the image
either as a template image


714
00:33:50,426 --> 00:33:53,196
or an original image depending
on the context its used in.


715
00:33:53,946 --> 00:33:56,946
So, in our ImageView the
image will just be treated


716
00:33:56,946 --> 00:33:59,516
as its original normal form
and shown with its colors,


717
00:34:00,236 --> 00:34:02,576
but because a BarButtonItem
defaults to showing it


718
00:34:02,656 --> 00:34:05,506
as a template image it'll be
used as a template image there.


719
00:34:06,546 --> 00:34:10,146
With the AlwaysOriginal
Rendering Mode the image will


720
00:34:10,146 --> 00:34:12,246
always be treated exactly
in its original form


721
00:34:12,366 --> 00:34:13,755
and we won't touch
any of the pixels.


722
00:34:15,036 --> 00:34:18,906
With the AlwaysTemplate
Rendering Mode we'll always


723
00:34:18,906 --> 00:34:21,416
treat it as a template image
and it will always be recolored.


724
00:34:21,416 --> 00:34:24,216
So, you can think of the
Automatic Rendering Mode


725
00:34:24,216 --> 00:34:26,606
as saying you figure out
what to do with my image.


726
00:34:27,166 --> 00:34:29,565
And the AlwaysOriginal and
AlwaysTemplate Rendering Modes


727
00:34:29,735 --> 00:34:32,565
as saying I want full control
and this is what I'm specifying


728
00:34:32,565 --> 00:34:34,626
as a behavior for
this particular image.


729
00:34:35,886 --> 00:34:38,045
So, now let's go back
to our Navigation Bar


730
00:34:38,116 --> 00:34:38,976
and see how that applies.


731
00:34:39,806 --> 00:34:42,946
When we create our image, in
this case using image names,


732
00:34:44,116 --> 00:34:46,786
it's returned with the Automatic
Rendering Mode by default.


733
00:34:47,396 --> 00:34:49,525
And again, this means
to do the default


734
00:34:49,525 --> 00:34:50,585
for the context it's used in


735
00:34:50,585 --> 00:34:52,996
and that's why our image
is getting recolored to red


736
00:34:53,426 --> 00:34:54,985
when we use it in
a BarButtonItem.


737
00:34:56,306 --> 00:35:00,016
So, all we need to do is use
the Imagerendering Mode method


738
00:35:00,376 --> 00:35:01,456
on the image that we have


739
00:35:02,006 --> 00:35:03,926
and now we'll convert
the ImagesRenderingMode


740
00:35:04,096 --> 00:35:05,366
into whatever we've specified.


741
00:35:06,206 --> 00:35:08,876
So, since we're passing an
AlwaysOriginal our image now


742
00:35:08,876 --> 00:35:12,146
becomes an original image
and it's shown in full color


743
00:35:12,416 --> 00:35:13,386
in the Navigation Bar.


744
00:35:13,986 --> 00:35:19,266
Now, this same behavior
applies to the Tab Bars


745
00:35:19,546 --> 00:35:21,366
and the Tab Bar items
that shown within them.


746
00:35:22,196 --> 00:35:25,586
Here, by default an image
that you set will be recolored


747
00:35:25,586 --> 00:35:28,016
to the Tint Color when the
Tab Bar items is collected


748
00:35:28,016 --> 00:35:31,246
and it will be colored gray
when the item is uncollected.


749
00:35:32,486 --> 00:35:34,776
We used to have a method
called, Set Finished Image


750
00:35:34,776 --> 00:35:37,476
with Finished Unselected Image.


751
00:35:37,946 --> 00:35:40,626
And that allowed you to
set images that were used


752
00:35:40,736 --> 00:35:42,346
for this selected
and unselected state


753
00:35:42,746 --> 00:35:43,916
and it wouldn't be recolored.


754
00:35:44,566 --> 00:35:46,796
So, this method was
actually doing two completely


755
00:35:46,796 --> 00:35:47,406
separate things.


756
00:35:47,896 --> 00:35:50,516
One of them was specifying
that the images


757
00:35:50,516 --> 00:35:52,286
that you set should
not be recolored


758
00:35:52,836 --> 00:35:55,336
and the other was
setting different selected


759
00:35:55,336 --> 00:35:56,356
and unselected images.


760
00:35:57,266 --> 00:35:59,306
So, we've actually
deprecated this method in iOS 7


761
00:35:59,406 --> 00:36:02,886
and you can now do either of
these two things separately or,


762
00:36:02,886 --> 00:36:03,896
of course, combine
them together.


763
00:36:05,286 --> 00:36:07,946
You can use the AlwaysOriginal
Rendering Mode to specify


764
00:36:07,946 --> 00:36:10,076
that the image you set
should not be recolored


765
00:36:10,076 --> 00:36:12,346
and this was the finished
part of the old method.


766
00:36:13,666 --> 00:36:15,906
And you can use the Image
and SelectedImage properties


767
00:36:15,906 --> 00:36:18,746
that we talked about earlier
to set images that are separate


768
00:36:19,126 --> 00:36:20,756
for the unselected
and selected states.


769
00:36:21,466 --> 00:36:23,216
And, of course, you can use
either of these separately


770
00:36:23,366 --> 00:36:24,316
or combine them together


771
00:36:24,466 --> 00:36:25,906
to get exactly the
effect that you want.


772
00:36:26,406 --> 00:36:32,226
So, in the profile view
of our application we show


773
00:36:32,226 --> 00:36:35,006
that segmented control and
this left the user to choose


774
00:36:35,066 --> 00:36:36,736
to be Xs or Os in our game.


775
00:36:37,996 --> 00:36:40,296
And we're just using a standard
UI Segmented Control here.


776
00:36:40,976 --> 00:36:42,936
But we'd like to customize
it a little to better fit


777
00:36:42,936 --> 00:36:44,016
with our applications.


778
00:36:45,016 --> 00:36:47,296
So, first of we'll set a
custom background image


779
00:36:47,326 --> 00:36:50,486
for the Segmented Control and
notice that the background image


780
00:36:50,526 --> 00:36:52,546
that we set is not
getting recolored along


781
00:36:52,546 --> 00:36:53,236
with the Tint Color.


782
00:36:54,106 --> 00:36:56,126
That's because Segmented
Controls default


783
00:36:56,126 --> 00:36:58,736
to treating their background
images as original images.


784
00:36:59,756 --> 00:37:01,806
So, they won't be
recolored and, of course,


785
00:37:01,856 --> 00:37:04,416
you can use the AlwaysTemplate
Rendering Mode if you want


786
00:37:04,416 --> 00:37:06,036
to opt back on into
that behavior.


787
00:37:07,106 --> 00:37:09,916
Now the foreground images the
X and the O on the other hand,


788
00:37:10,276 --> 00:37:12,586
they're being recolored
because they're getting treated


789
00:37:12,586 --> 00:37:13,486
as Template images.


790
00:37:14,566 --> 00:37:17,376
So, to opt them out of that
we can use the same image


791
00:37:17,376 --> 00:37:19,196
with Rendering Mode
Method and pass


792
00:37:19,196 --> 00:37:20,926
in the AlwaysOriginal
Rendering Mode.


793
00:37:21,486 --> 00:37:24,926
And we'll use that here because
in our application Xs are always


794
00:37:24,926 --> 00:37:26,396
red and Os are always green.


795
00:37:26,656 --> 00:37:30,426
So, we want them to keep
their original colors.


796
00:37:30,646 --> 00:37:34,616
Now, Steppers and System buttons
have actually the same behavior


797
00:37:34,616 --> 00:37:36,336
we just talked about
for Segmented Control.


798
00:37:36,926 --> 00:37:39,216
The thing to remember is
that foreground images


799
00:37:39,246 --> 00:37:41,656
that you set default to
being Template Images


800
00:37:42,236 --> 00:37:44,996
and background images default
to being Original Images.


801
00:37:46,936 --> 00:37:49,806
Everywhere else in UIKit
that we use images defaults


802
00:37:49,806 --> 00:37:51,526
to treating them
as original images.


803
00:37:52,076 --> 00:37:54,376
This includes things like
Image Used and the images


804
00:37:54,376 --> 00:37:55,926
that you set in Table
View Cells.


805
00:37:56,876 --> 00:37:59,566
So, if you look here in this
section, the Statistics section


806
00:37:59,566 --> 00:38:02,746
of our Profile view, you'll see
that when we set those images


807
00:38:02,856 --> 00:38:05,366
on our Table View Cells
they look kind of plain


808
00:38:05,536 --> 00:38:07,416
because they're being--
they're just original images


809
00:38:07,466 --> 00:38:09,816
so they're just shown in
their original color and we'd


810
00:38:09,816 --> 00:38:11,816
like to better match with
the rest of our application


811
00:38:12,316 --> 00:38:14,756
by making them recolorized
to match the Tint Color.


812
00:38:16,096 --> 00:38:17,886
So, to do that we'll
use the same Image


813
00:38:17,886 --> 00:38:18,836
with Rendering Mode Method


814
00:38:18,836 --> 00:38:21,356
and this time we'll convert
them to Template Images.


815
00:38:22,016 --> 00:38:23,566
And this way they'll
match the Tint Color


816
00:38:23,566 --> 00:38:25,606
and they'll change along with
the rest of the application.


817
00:38:26,196 --> 00:38:28,916
So, this is a great technique
to consider if you want


818
00:38:28,916 --> 00:38:31,266
to add some color and match--


819
00:38:31,306 --> 00:38:33,296
better match with the
rest of your application


820
00:38:33,356 --> 00:38:35,096
as it changes color
and it saturates.


821
00:38:35,096 --> 00:38:40,886
So, let's talk about Status Bar,


822
00:38:40,966 --> 00:38:42,166
the Status Bar a
little bit more.


823
00:38:43,506 --> 00:38:46,986
The change to the Status Bar to
make it always transparent means


824
00:38:46,986 --> 00:38:47,976
that it's really important


825
00:38:48,116 --> 00:38:50,686
that your application applies
exactly the right background


826
00:38:50,686 --> 00:38:51,626
behind the Status Bar.


827
00:38:52,536 --> 00:38:54,496
And as I said earlier,
it's the View Controller


828
00:38:54,496 --> 00:38:55,216
that provides that.


829
00:38:56,036 --> 00:38:59,206
Well, traditionally in iOS
the Status Bar was actually


830
00:38:59,206 --> 00:39:01,236
controlled by UI
Applications properties


831
00:39:01,606 --> 00:39:03,236
where you set the
style and hiddenness.


832
00:39:04,186 --> 00:39:06,126
And this made it very
easy for different places


833
00:39:06,126 --> 00:39:08,886
in your application to set this
Status Bar style and to stomp


834
00:39:08,886 --> 00:39:11,466
on the value that
someone else had set.


835
00:39:11,606 --> 00:39:14,506
In iOS 7 we want to make it
really easy for View Controllers


836
00:39:14,586 --> 00:39:16,366
to control exactly
the Status Bar style


837
00:39:16,366 --> 00:39:18,146
that matches the background
that they've shown.


838
00:39:18,996 --> 00:39:20,866
So, we're introducing a
new system to allow you


839
00:39:20,866 --> 00:39:22,786
to control the Status
Bar's appearance.


840
00:39:24,136 --> 00:39:27,396
The way this works is in your
View Controller you can override


841
00:39:27,426 --> 00:39:28,396
either of these two methods


842
00:39:28,916 --> 00:39:31,996
to specify whether you want the
Status Bar to be hidden or not


843
00:39:32,366 --> 00:39:34,566
and what style you want it to
be shown as when its visible.


844
00:39:35,956 --> 00:39:38,896
And when you're using this
new system the UI Application


845
00:39:38,896 --> 00:39:41,576
methods to set the Status Bar
style won't do anything anymore.


846
00:39:42,006 --> 00:39:44,726
Instead we'll find the
current View Controller that's


847
00:39:44,726 --> 00:39:47,796
underneath the Status Bar
and we'll ask it what kind


848
00:39:48,006 --> 00:39:49,346
of Status Bar style it wants.


849
00:39:50,056 --> 00:39:51,996
So, this allows your View
Controller to make sure


850
00:39:51,996 --> 00:39:53,886
that its background and
its Status Bar match.


851
00:39:55,116 --> 00:39:57,036
And actually the
values that you return


852
00:39:57,036 --> 00:39:59,726
from these two methods don't
have to be static values either.


853
00:40:00,056 --> 00:40:03,036
You can change them over
time, but the important thing


854
00:40:03,036 --> 00:40:05,946
with changing them is that
after you make a change you have


855
00:40:05,946 --> 00:40:08,466
to call setNeedsStatusBar
AppearanceUpdate


856
00:40:08,836 --> 00:40:11,716
on the View Controller that's
changed and this lets us know


857
00:40:11,806 --> 00:40:13,906
to update the Status
Bar to match the changes


858
00:40:14,006 --> 00:40:14,856
that you've just applied.


859
00:40:15,586 --> 00:40:17,846
And then we'll redisplay
the Status Bar just


860
00:40:17,846 --> 00:40:18,566
as you specified.


861
00:40:19,156 --> 00:40:22,316
And these Status Bar
changes apply actually


862
00:40:22,316 --> 00:40:24,286
to container View
Controllers as well.


863
00:40:24,926 --> 00:40:28,496
So, all of our standard UIKit
Container View Controllers


864
00:40:28,876 --> 00:40:30,086
like Tab Bar controllers


865
00:40:30,086 --> 00:40:32,296
and Navigation Controllers
will implement this


866
00:40:32,376 --> 00:40:33,356
for you automatically.


867
00:40:33,926 --> 00:40:35,766
So, they'll automatically
forward control


868
00:40:35,766 --> 00:40:38,226
of the Status Bar to
whichever View Controller


869
00:40:38,506 --> 00:40:41,166
within them is underneath
the area of the Status Bar.


870
00:40:41,896 --> 00:40:43,826
And you can implement
this in your own container


871
00:40:43,826 --> 00:40:44,846
of View Controllers as well.


872
00:40:45,556 --> 00:40:46,486
It's actually very easy.


873
00:40:46,746 --> 00:40:48,476
There's another two
methods that you implement


874
00:40:48,476 --> 00:40:50,826
in your Container View
Controller to return


875
00:40:50,826 --> 00:40:52,756
which of its children
should be used


876
00:40:52,906 --> 00:40:56,356
for determining what the Status
Bar should use for its style


877
00:40:56,576 --> 00:40:57,316
or for its hiddenness.


878
00:40:58,586 --> 00:41:01,486
And once again whenever you
change the value return from one


879
00:41:01,486 --> 00:41:03,936
of these you can-- you need
to call the same method,


880
00:41:04,226 --> 00:41:07,736
setNeedStatusBar
AppearanceUpdates to let us know


881
00:41:07,736 --> 00:41:11,266
that the state of your View
Controller has changed.


882
00:41:11,396 --> 00:41:14,216
Now, this change to how
the Status Bar is set


883
00:41:14,216 --> 00:41:17,356
up is a very big
change and it's global


884
00:41:17,356 --> 00:41:18,526
to your entire application.


885
00:41:19,206 --> 00:41:22,426
So your application will either
use entirely the new system


886
00:41:22,516 --> 00:41:23,896
or entirely the old system.


887
00:41:24,616 --> 00:41:26,196
And we have a global
switch that you can use


888
00:41:26,226 --> 00:41:27,976
to specify which system to use.


889
00:41:28,916 --> 00:41:34,106
It's an info.plist key
called UIViewControllerbase


890
00:41:34,456 --> 00:41:35,286
StatusBarAppearance.


891
00:41:35,286 --> 00:41:37,586
And you can set it
to yes or no to opt


892
00:41:37,586 --> 00:41:40,126
into the new system
or remain out of it.


893
00:41:41,416 --> 00:41:43,756
We've used that- we've
opted it into the system


894
00:41:43,826 --> 00:41:46,046
in our sample application
and in most


895
00:41:46,046 --> 00:41:47,436
of our View Controllers
we haven't had


896
00:41:47,466 --> 00:41:49,806
to override the default
values of the two methods.


897
00:41:49,806 --> 00:41:53,516
But one place that we are using
them is in our Game view here.


898
00:41:54,676 --> 00:41:56,946
This view defaults to
showing a white background


899
00:41:57,376 --> 00:42:00,016
but when the game is over it'll
actually invert the background


900
00:42:00,046 --> 00:42:03,346
to be black and so it will
invert the Status Bar to match


901
00:42:03,376 --> 00:42:04,866
that change, like this.


902
00:42:05,526 --> 00:42:07,806
And this is really easy to do.


903
00:42:08,456 --> 00:42:10,246
You just have to implement
two pieces of code.


904
00:42:11,256 --> 00:42:13,686
First, override
preferredStatusBarStyle


905
00:42:14,376 --> 00:42:16,846
and then we'll check if
the game is finished or not


906
00:42:17,286 --> 00:42:20,106
and return either light
content if it's over or default


907
00:42:20,106 --> 00:42:22,326
if it's still in
progress and then


908
00:42:22,326 --> 00:42:24,736
when our game state
changes we just call


909
00:42:24,916 --> 00:42:27,176
needStatusBarAppearanceUpdate,
as I mentioned earlier.


910
00:42:27,936 --> 00:42:29,546
However, there's one
special thing here,


911
00:42:30,216 --> 00:42:31,676
which is that we've
put this call


912
00:42:31,956 --> 00:42:34,576
to update the appearance
inside of an animation block.


913
00:42:35,366 --> 00:42:38,086
And when you do this we'll
automatically animate the Status


914
00:42:38,136 --> 00:42:40,836
Bar Appearance change to
match the same animation


915
00:42:40,876 --> 00:42:42,106
as the block that
it's inside of.


916
00:42:42,556 --> 00:42:44,936
So, we can animate along with
our background color change


917
00:42:44,936 --> 00:42:48,706
and they'll both fit
together perfectly.


918
00:42:48,706 --> 00:42:52,506
So, let's take a look at
that again in slow motion.


919
00:42:53,896 --> 00:42:55,376
Great, alright now let's talk


920
00:42:55,376 --> 00:42:57,136
about how you can
create Custom Controls.


921
00:42:58,116 --> 00:43:00,166
We worked really hard
on the UIKit Controls


922
00:43:00,456 --> 00:43:01,956
to make sure they
always work great.


923
00:43:02,626 --> 00:43:04,526
And I'd like to show you how
you can make your own Custom


924
00:43:04,526 --> 00:43:07,576
Controls work just as well.


925
00:43:07,766 --> 00:43:10,656
However, before you start making
the Custom Control you should


926
00:43:10,656 --> 00:43:13,676
always consider whether
there's a standard UIKit Control


927
00:43:13,906 --> 00:43:16,716
that you can use in customized
to work the way that you'd like.


928
00:43:17,366 --> 00:43:20,866
So, in our Profile view we had a
really Custom Segmented Control


929
00:43:20,866 --> 00:43:24,046
but we were able to customize
it just by using images


930
00:43:24,166 --> 00:43:26,556
and rendering modes to get
the appearance that we wanted.


931
00:43:27,936 --> 00:43:30,586
If you use Standard Controls
then you will automatically get


932
00:43:30,586 --> 00:43:33,556
consistency for your users and
it'll be less work for you.


933
00:43:33,876 --> 00:43:35,696
This is always something
to check before you start.


934
00:43:36,236 --> 00:43:38,806
Now the first Custom Control


935
00:43:38,806 --> 00:43:41,806
in our application is this
Rating Control that's shown


936
00:43:41,806 --> 00:43:43,436
at the top of the
Game History view.


937
00:43:44,876 --> 00:43:47,596
This is a pretty simple control
that lets you set a rating,


938
00:43:47,976 --> 00:43:50,596
a number of stars for previous
games that you've played.


939
00:43:51,106 --> 00:43:55,356
And to tell you how we built
this Custom Control I'd


940
00:43:55,356 --> 00:43:56,586
like to tell you a little secret


941
00:43:56,586 --> 00:43:58,426
about how we make
our UIKit Controls.


942
00:43:58,946 --> 00:44:03,016
When we create a control
like this UI Button in iOS 7,


943
00:44:03,496 --> 00:44:05,186
we don't actually start
with a blank slate.


944
00:44:06,036 --> 00:44:10,176
Instead, we use other existing
standard UI Views as pieces,


945
00:44:10,176 --> 00:44:12,356
building blocks to put
together these controls.


946
00:44:13,056 --> 00:44:16,376
So a button consists of
Image Views and UI Labels.


947
00:44:17,236 --> 00:44:19,586
And when we do that it
automatically gives us the great


948
00:44:19,636 --> 00:44:21,666
Text Rendering support
from UI Label


949
00:44:22,246 --> 00:44:24,516
and it also gives us
support for all of UI Image


950
00:44:24,516 --> 00:44:25,366
like Rendering Modes


951
00:44:25,486 --> 00:44:27,776
and Resizable Images
in the UIImage View.


952
00:44:29,096 --> 00:44:31,666
Similarly steppers
actually consist


953
00:44:32,026 --> 00:44:33,566
of an Image View
and two buttons.


954
00:44:33,566 --> 00:44:36,986
And this gives us not only
its appearance but also a lot


955
00:44:36,986 --> 00:44:38,906
of interactivity for free.


956
00:44:39,716 --> 00:44:42,656
So, we've taken the same
approach in our Custom Control


957
00:44:44,086 --> 00:44:47,196
and here we're using an image
view to draw the background


958
00:44:48,056 --> 00:44:49,346
and we're using five
different buttons


959
00:44:49,346 --> 00:44:51,046
to draw the foreground content.


960
00:44:52,276 --> 00:44:54,706
In fact, with button it's
even easier for us here


961
00:44:55,096 --> 00:44:58,006
because we can set different
selected and unselected images


962
00:44:58,046 --> 00:44:59,736
for the button and to toggle


963
00:44:59,736 --> 00:45:02,026
between them we can just
set the Selective Properties


964
00:45:02,256 --> 00:45:05,436
of our buttons.


965
00:45:05,516 --> 00:45:08,486
Now, an important thing that we
had to do here when we wanted


966
00:45:08,486 --> 00:45:11,066
to use buttons inside
of our custom control is


967
00:45:11,066 --> 00:45:12,606
to use the UI button
type Custom.


968
00:45:13,546 --> 00:45:16,456
And when you use a Custom type
button this opts you out of all


969
00:45:16,456 --> 00:45:18,906
of the standard system
animations and appearances


970
00:45:18,906 --> 00:45:21,346
so that you can fully
customize the button to look


971
00:45:21,346 --> 00:45:24,106
like exactly what you want.


972
00:45:24,266 --> 00:45:25,736
One other thing you
can do if you want


973
00:45:25,736 --> 00:45:27,996
to customize your
button even further is


974
00:45:27,996 --> 00:45:30,756
to subclass the UI button and
override these three methods.


975
00:45:31,876 --> 00:45:34,606
This lets you exactly control
the positioning of the images


976
00:45:34,606 --> 00:45:36,506
and the text that's
shown in the button


977
00:45:36,926 --> 00:45:39,066
so you can get exactly
the effect that you want.


978
00:45:39,066 --> 00:45:44,456
So, now let's take a closer look
at the background that we show.


979
00:45:45,386 --> 00:45:47,966
As I mentioned earlier, it's
an image that's being shown


980
00:45:47,966 --> 00:45:51,226
in an ImageView and we're
actually dynamically creating


981
00:45:51,226 --> 00:45:54,046
this image at runtime,
which is really easy to do


982
00:45:54,496 --> 00:45:56,716
with the UIGraphics
function that allows you


983
00:45:56,716 --> 00:45:59,866
to create a new image context,
draw into it and then pull


984
00:45:59,866 --> 00:46:01,406
out an image from the context.


985
00:46:02,376 --> 00:46:05,926
So, we're using UI [Inaudible]
path to do our drawings here


986
00:46:06,516 --> 00:46:08,816
and one thing you will
notice in iOS 7 is


987
00:46:08,816 --> 00:46:13,226
that UI [Inaudible] path has a
new, draws rounded rectangles


988
00:46:13,226 --> 00:46:16,346
in a new way in iOS 7, a bit
smoother and more continuous.


989
00:46:16,956 --> 00:46:18,196
So you'll get better curves


990
00:46:18,196 --> 00:46:20,886
for your [Inaudible]
paths automatically


991
00:46:21,156 --> 00:46:22,926
by using UI [Inaudible] path.


992
00:46:23,636 --> 00:46:27,006
Once we have our dynamic image
we just set it on the ImageView.


993
00:46:28,036 --> 00:46:29,776
However, we'd like
this background image


994
00:46:29,816 --> 00:46:31,606
to follow the Tint Color
of the application.


995
00:46:32,256 --> 00:46:33,576
And that's really easy to do.


996
00:46:34,036 --> 00:46:37,056
Just like before we'll set the
Rendering Mode of the image


997
00:46:37,446 --> 00:46:39,246
by calling
ImagewithRenderingMode


998
00:46:39,386 --> 00:46:41,236
after we've dynamically
created the image


999
00:46:41,796 --> 00:46:43,076
and passing in AlwaysTemplate.


1000
00:46:43,976 --> 00:46:46,476
And we can actually combine
the Rendering Mode call


1001
00:46:46,866 --> 00:46:48,226
with Resizable Image calls.


1002
00:46:48,966 --> 00:46:51,106
So after we change
that Rendering Mode


1003
00:46:51,106 --> 00:46:54,156
of our image we'll pass that
Resizable Image with Cap Insets


1004
00:46:54,526 --> 00:46:57,486
to make it both a template
image and a Resizable Image.


1005
00:46:58,276 --> 00:47:01,016
And this way our-- we can use
this same background image


1006
00:47:01,236 --> 00:47:04,126
in all of our ratings controls
and no matter what size


1007
00:47:04,126 --> 00:47:07,016
that they're shown as, so we
can just reuse that one image.


1008
00:47:07,566 --> 00:47:11,676
No another way that we got
a lot of the functionality


1009
00:47:11,676 --> 00:47:15,056
of our Ratings Control for free
is by subclassing UI Control.


1010
00:47:16,256 --> 00:47:18,036
When you do that you'll
automatically be able


1011
00:47:18,286 --> 00:47:21,876
to participate in the Target
Action System the UI Control


1012
00:47:21,876 --> 00:47:25,456
Implements and, in fact, UI
Control will even send all


1013
00:47:25,456 --> 00:47:28,886
of the touch related action
methods for you automatically.


1014
00:47:30,316 --> 00:47:33,206
However we'd like to go even
further with our Rating Control


1015
00:47:33,496 --> 00:47:36,076
because we also have
a value associated


1016
00:47:36,076 --> 00:47:38,036
with the control
which is its rating.


1017
00:47:39,516 --> 00:47:41,666
So, here when a user
touches a button,


1018
00:47:42,156 --> 00:47:45,536
after we set the rating we'll
also send all target action


1019
00:47:45,536 --> 00:47:48,686
events for the Value
Changed UI Control Event.


1020
00:47:49,526 --> 00:47:51,796
In this way we can use
Value Changed Events


1021
00:47:52,256 --> 00:47:55,446
in our View Controller to add
ourself, the View Controller


1022
00:47:56,046 --> 00:47:58,476
as a target and the
Change Rating Method


1023
00:47:58,476 --> 00:48:00,676
on our View Controller will
automatically get called


1024
00:48:00,976 --> 00:48:03,296
whenever the user changes
the rating of the control.


1025
00:48:03,906 --> 00:48:07,366
So, the next view that we have,


1026
00:48:07,476 --> 00:48:10,336
Custom View in our
application is Account View.


1027
00:48:11,176 --> 00:48:13,606
In our Profile we show you
here the number of victories


1028
00:48:13,606 --> 00:48:14,546
and defeats that you have


1029
00:48:15,016 --> 00:48:17,076
and to make things a little
more fun we'll show them


1030
00:48:17,076 --> 00:48:18,026
as tally marks here.


1031
00:48:18,646 --> 00:48:22,656
So, we're doing this
just by overriding UIView


1032
00:48:22,806 --> 00:48:24,346
and by implementing
our own draw drawRect


1033
00:48:24,706 --> 00:48:27,106
because this is a
pretty simple to draw


1034
00:48:27,106 --> 00:48:28,796
and it's one single
continuous region.


1035
00:48:28,796 --> 00:48:33,716
In our drawRect we're actually
using our current Tint Color


1036
00:48:34,386 --> 00:48:37,636
which allows us-- which we can
set on the graphics context


1037
00:48:37,636 --> 00:48:39,666
and then do any drawing
that we do normally.


1038
00:48:41,036 --> 00:48:44,286
So, the Inherited Tint Color
that's returned is actually


1039
00:48:44,286 --> 00:48:45,456
guaranteed to always be nil


1040
00:48:45,856 --> 00:48:48,056
because it'll inherit
its superview


1041
00:48:48,286 --> 00:48:50,556
if the Specific Tint
Color of the view is nil


1042
00:48:50,986 --> 00:48:52,646
and it'll use the
system default color


1043
00:48:52,756 --> 00:48:53,836
if it doesn't have a superview.


1044
00:48:54,436 --> 00:48:57,186
So, we can always rely on the
tint color to be a real color


1045
00:48:57,186 --> 00:48:58,426
that we can use to draw with.


1046
00:48:59,516 --> 00:49:01,276
However, there's one last
thing that you need to know


1047
00:49:01,276 --> 00:49:04,066
about Tint Color and that's how
to update it when it changes.


1048
00:49:04,416 --> 00:49:08,626
Whenever the Tint Color changes
we automatically call the


1049
00:49:08,686 --> 00:49:11,026
tintColorDidChange method
on all of your views.


1050
00:49:11,706 --> 00:49:14,586
This is a new method that kind
of behaves as a notification


1051
00:49:14,586 --> 00:49:18,076
to your view to tell it needs
to update anything that it has


1052
00:49:18,206 --> 00:49:19,656
that was using old Tint Color.


1053
00:49:21,036 --> 00:49:23,876
So, if we look at changing the
Tint Color of the window to red


1054
00:49:24,466 --> 00:49:26,426
after the Inherited
Tint Color changes


1055
00:49:26,796 --> 00:49:28,946
that tintColorDidChange
fires to that view


1056
00:49:28,946 --> 00:49:32,266
and the same thing happens for
the subviews and their subviews.


1057
00:49:32,866 --> 00:49:35,346
So, everything in the window
will automatically get a


1058
00:49:35,376 --> 00:49:37,566
tintColorDidChange
notification either


1059
00:49:37,566 --> 00:49:38,976
when its own Tint Color changes


1060
00:49:39,456 --> 00:49:42,096
or when its Inherited
Tint Color changes due


1061
00:49:42,096 --> 00:49:43,286
to changes in superview.


1062
00:49:44,536 --> 00:49:46,476
And the same thing happens
automatically for you


1063
00:49:46,736 --> 00:49:48,996
when the TintAdjustmentMode
changes for your view.


1064
00:49:49,646 --> 00:49:51,296
So again, if we set the window


1065
00:49:51,296 --> 00:49:54,976
to be dimmed its Inherited
Tint Color will change to gray


1066
00:49:55,486 --> 00:49:58,466
and tintColorDidChange will
be called both on the window


1067
00:49:58,896 --> 00:50:00,686
and all of its subviews
and their subviews


1068
00:50:01,116 --> 00:50:04,316
as their Tint Colors
change as well.


1069
00:50:04,516 --> 00:50:06,196
So, going back to
our Count view,


1070
00:50:06,856 --> 00:50:09,676
all we need to do is
override tintColorDidChange


1071
00:50:10,576 --> 00:50:14,126
and then we'll just tell our
view that it needs to redraw


1072
00:50:14,356 --> 00:50:15,576
by calling setNeedstoSite.


1073
00:50:16,386 --> 00:50:18,336
Of course, in our Count
view we're using setNeedsto


1074
00:50:18,396 --> 00:50:21,856
[Inaudible] so that we only have
to redraw the part of our view


1075
00:50:21,856 --> 00:50:25,376
that uses the Tint Color itself.


1076
00:50:25,376 --> 00:50:27,526
Now another place that
we'd like to use Tint Color


1077
00:50:27,526 --> 00:50:29,886
in our application is
in this Table View Cell.


1078
00:50:30,776 --> 00:50:35,286
Here we use the Tint Color as
the detail labels text color


1079
00:50:35,726 --> 00:50:39,296
and this will help emphasize
the result of previous games.


1080
00:50:40,506 --> 00:50:42,676
Once again, we use
tintColorDidChange


1081
00:50:43,236 --> 00:50:46,556
and this implementation will
actually take the Tint Color


1082
00:50:46,556 --> 00:50:48,296
of our current view and set it


1083
00:50:48,296 --> 00:50:50,196
as the Text Color
of our detail label.


1084
00:50:50,756 --> 00:50:53,136
And this will make our detail
label match the Tint Color


1085
00:50:53,426 --> 00:50:56,206
and also automatically update
as the Tint Color changes


1086
00:50:56,246 --> 00:50:57,386
or becomes desaturated.


1087
00:50:57,946 --> 00:51:01,586
So, there's one last really
important thing to consider


1088
00:51:01,586 --> 00:51:03,076
when you're implementing
Custom Controls


1089
00:51:03,076 --> 00:51:04,466
and that's Accessibility.


1090
00:51:05,416 --> 00:51:07,316
It's really important to
implement accessibility


1091
00:51:07,316 --> 00:51:09,876
in your apps and in your
Custom Controls so that all


1092
00:51:09,876 --> 00:51:12,736
of your users can really
enjoy using your applications.


1093
00:51:13,706 --> 00:51:14,866
It's also really easy to do.


1094
00:51:14,866 --> 00:51:19,336
So, if we look at our Ratings
Control it acts as kind


1095
00:51:19,336 --> 00:51:21,556
of a container for the
buttons that are inside of it.


1096
00:51:22,126 --> 00:51:24,586
So, we'll return No for
is accessibility element


1097
00:51:24,726 --> 00:51:26,296
of the control itself.


1098
00:51:26,296 --> 00:51:29,336
And that will cause the
accessibility system to look


1099
00:51:29,406 --> 00:51:32,176
for the subviews of the
control and treat them


1100
00:51:32,176 --> 00:51:33,276
as accessibility elements.


1101
00:51:34,136 --> 00:51:36,206
UI Button implements
a lot of accessibility


1102
00:51:36,206 --> 00:51:38,206
for us automatically
so all we need


1103
00:51:38,206 --> 00:51:40,186
to provide is an
Accessibility Label


1104
00:51:40,376 --> 00:51:41,896
for our button, for out buttons.


1105
00:51:42,766 --> 00:51:44,846
And Accessibility Label
is essentially text


1106
00:51:45,346 --> 00:51:47,616
that describes what the
button is behaving as.


1107
00:51:48,176 --> 00:51:51,406
So, we'll just use the number of
stars as the Accessibility Label


1108
00:51:51,496 --> 00:51:54,586
for our button and, of course,
we used a localized string


1109
00:51:54,946 --> 00:51:56,576
so that they'll automatically
be translated


1110
00:51:56,576 --> 00:51:59,196
as we translate our application
into other languages.


1111
00:51:59,196 --> 00:52:03,406
Now our other custom
control is this Count view


1112
00:52:04,176 --> 00:52:06,376
and we'll also need to
add Accessibility here.


1113
00:52:07,506 --> 00:52:11,586
In this case since the view
is just a single element we'll


1114
00:52:11,586 --> 00:52:14,406
return Yes for its
Accessibility element and then


1115
00:52:14,406 --> 00:52:16,796
that top level view
we'll be treated


1116
00:52:16,796 --> 00:52:17,866
as an Accessibility element.


1117
00:52:18,786 --> 00:52:21,136
We'll also need to return what
kind of traits that it has.


1118
00:52:21,606 --> 00:52:23,466
In this case we're
essentially saying


1119
00:52:23,466 --> 00:52:25,796
that our Count view is
similar to an image,


1120
00:52:25,916 --> 00:52:27,306
so we'll turn that as its trait.


1121
00:52:28,096 --> 00:52:30,996
And finally, we'll need to
return an Accessibility label


1122
00:52:31,346 --> 00:52:34,616
that has text that described
what that view represents.


1123
00:52:35,466 --> 00:52:37,676
Since our Count view is
essentially representing a


1124
00:52:37,676 --> 00:52:42,476
number, we'll return a text
version of that number.


1125
00:52:42,626 --> 00:52:45,416
Alright, so now we've fully
customized our application


1126
00:52:45,416 --> 00:52:48,476
and let's take a look
at what it looks now.


1127
00:52:49,116 --> 00:52:51,496
So, here's our new
customized application.


1128
00:52:52,426 --> 00:52:55,576
We'll start in the Game view
and here we can just tap


1129
00:52:56,526 --> 00:53:01,326
to play our pieces
and you'll notice


1130
00:53:01,806 --> 00:53:04,786
that when the game finishes we
automatically transition the


1131
00:53:04,786 --> 00:53:07,466
background slack and
the Status Bar to match.


1132
00:53:09,516 --> 00:53:13,876
[ Applause ]


1133
00:53:14,376 --> 00:53:17,126
>> Also, when I pause
the game you'll notice


1134
00:53:17,166 --> 00:53:19,406
that our Pause button gets
the selected appearance


1135
00:53:20,066 --> 00:53:25,066
because we're using a System
button and you'll notice


1136
00:53:25,116 --> 00:53:27,686
that in our Tab Bar we
have different images


1137
00:53:27,786 --> 00:53:29,516
for the selected and
unselected states.


1138
00:53:29,946 --> 00:53:33,746
Next, let's take a
look at messages.


1139
00:53:35,046 --> 00:53:36,226
When we create a new message,


1140
00:53:36,726 --> 00:53:39,246
notice that the composed
image gets desaturated


1141
00:53:39,246 --> 00:53:40,866
in the background but the Cancel


1142
00:53:40,866 --> 00:53:42,916
and Post buttons
remain fully saturated.


1143
00:53:47,496 --> 00:53:50,176
And after we post a
message we can select it


1144
00:53:50,776 --> 00:53:51,866
and make it a favorite image


1145
00:53:52,536 --> 00:53:55,616
which we'll use our
AlwaysOriginal favorite


1146
00:53:55,616 --> 00:53:56,226
star image.


1147
00:53:57,206 --> 00:54:00,486
You can also see here a
System button that we've used


1148
00:54:01,266 --> 00:54:03,206
where we haven't set
the Rendering Mode


1149
00:54:03,566 --> 00:54:05,496
and here our image
is getting recolored.


1150
00:54:06,056 --> 00:54:11,266
In the Profile view you can
see our Segmenting Control


1151
00:54:12,096 --> 00:54:13,626
where we customized
the different images


1152
00:54:13,626 --> 00:54:17,456
and Rendering Modes and as
we change what piece we want


1153
00:54:17,456 --> 00:54:20,156
to use you'll see that we're
changing the Tint Color as well,


1154
00:54:21,066 --> 00:54:23,086
which causes all of our
Image views to update,


1155
00:54:23,696 --> 00:54:27,766
our Custom subview
and the Tab Bar.


1156
00:54:27,966 --> 00:54:32,396
Finally, in the History view
you can see our Table View Cells


1157
00:54:32,946 --> 00:54:38,466
which use the Tint Color for
their detail label and inside


1158
00:54:38,466 --> 00:54:41,266
of one of the History views
you can see previous games


1159
00:54:41,676 --> 00:54:45,546
and also our Rating Control
including its background,


1160
00:54:46,436 --> 00:54:48,036
which automatically
matches the Tint Color.


1161
00:54:49,086 --> 00:54:51,556
And finally, you can see
our Custom Back Indicator.


1162
00:54:52,166 --> 00:54:58,796
Great, so that's our
customized application.


1163
00:54:59,516 --> 00:55:05,756
[ Applause ]


1164
00:55:06,256 --> 00:55:08,526
>> So, today I've showed
you some of what's changed


1165
00:55:08,526 --> 00:55:12,066
for Customization in iOS
7, a few advance topics


1166
00:55:12,496 --> 00:55:16,506
like Tint Color and Image
Rendering Mode and finally,


1167
00:55:16,806 --> 00:55:18,916
we saw how to use your
own Custom Controls


1168
00:55:19,236 --> 00:55:20,926
to extend your application
even further.


1169
00:55:21,846 --> 00:55:24,136
So, I hope that you all go
out and use these techniques


1170
00:55:24,336 --> 00:55:25,876
to make your applications
really great.


1171
00:55:26,566 --> 00:55:26,876
Thank you.


1172
00:55:28,016 --> 00:55:30,016
[ Applause ]


1173
00:55:30,016 --> 00:55:37,936
[ Silence ]

