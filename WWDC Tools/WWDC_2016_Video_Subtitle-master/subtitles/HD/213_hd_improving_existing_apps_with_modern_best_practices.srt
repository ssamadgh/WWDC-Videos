1
00:00:08,516 --> 00:00:17,500
[ Music ]


2
00:00:25,686 --> 00:00:26,316
>> Hello, everyone.


3
00:00:27,146 --> 00:00:29,146
[ Applause ]


4
00:00:29,276 --> 00:00:29,896
>> Oh, please.


5
00:00:30,316 --> 00:00:32,676
My name's Woody.


6
00:00:32,676 --> 00:00:34,396
I work in software
engineering at Apple.


7
00:00:34,396 --> 00:00:35,926
I'd like to welcome
you to the conference,


8
00:00:36,006 --> 00:00:38,306
both those of you here in
the room and those of you


9
00:00:38,306 --> 00:00:40,326
who are watching from
home on the live screen.


10
00:00:41,906 --> 00:00:43,966
There's a couple things I'd
like to go through with you


11
00:00:43,966 --> 00:00:45,206
in the next 40 minutes.


12
00:00:45,576 --> 00:00:46,846
We're going to take
a look at some ways


13
00:00:46,996 --> 00:00:49,336
that you can today start
reducing your technical debt.


14
00:00:50,016 --> 00:00:51,576
Then, we'll take a
look at Asset Catalogs.


15
00:00:52,426 --> 00:00:54,236
We'll take a look at
the new design pattern.


16
00:00:54,236 --> 00:00:56,576
Well, it's not really new but
a design pattern we'd like you


17
00:00:56,576 --> 00:00:59,116
to start using called
Dependency Injection.


18
00:00:59,676 --> 00:01:01,806
And in the latter half of the
presentation will be an update


19
00:01:01,806 --> 00:01:05,325
from my presentation last
year about Live playgrounds.


20
00:01:06,036 --> 00:01:06,716
So, let's get going.


21
00:01:08,056 --> 00:01:11,296
Last year in the session at one
of the labs, I met one of you


22
00:01:11,586 --> 00:01:13,416
that was describing a scenario.


23
00:01:13,416 --> 00:01:15,256
You were describing something
that I think is going


24
00:01:15,256 --> 00:01:18,246
to be quite familiar
to many of you.


25
00:01:18,956 --> 00:01:22,006
You've got your boss that's
piling on these requests


26
00:01:22,006 --> 00:01:25,676
for features and the features
generate revenue and you want


27
00:01:25,676 --> 00:01:26,916
to get paid, so you do that.


28
00:01:27,756 --> 00:01:29,496
Then you've got your
customers and they want


29
00:01:29,496 --> 00:01:31,136
to fix the bugs that
cause them pain.


30
00:01:31,676 --> 00:01:34,376
And you take pride in your work
so you want to do that too.


31
00:01:34,626 --> 00:01:36,596
Some technical debt that
you want to resolve.


32
00:01:36,846 --> 00:01:39,486
Sometimes I think about building
software as like building


33
00:01:39,486 --> 00:01:40,826
up a pile of Jenga blocks.


34
00:01:40,966 --> 00:01:42,326
In the first version,
it's pretty stable


35
00:01:42,326 --> 00:01:44,066
and you start piling
on stuff on top of it


36
00:01:44,066 --> 00:01:47,346
and then it becomes unstable and
begins to fall down after that.


37
00:01:47,346 --> 00:01:49,826
So, you want to take a step
back and maybe resolve some


38
00:01:49,826 --> 00:01:51,046
of the lower-level issues.


39
00:01:52,676 --> 00:01:57,816
With all these things,
you then come to WWDC.


40
00:01:58,186 --> 00:01:59,626
And we pile on new API.


41
00:02:00,506 --> 00:02:04,586
And then we give you
a new version of Swift


42
00:02:04,586 --> 00:02:06,296
and it breaks source
code compatibility


43
00:02:06,456 --> 00:02:07,906
but introduces some
new features.


44
00:02:08,316 --> 00:02:11,276
And you were warned, so
don't complain about it.


45
00:02:12,956 --> 00:02:15,496
And then we introduced
new platforms


46
00:02:15,666 --> 00:02:18,266
and new extension points and
some of our existing apps


47
00:02:18,266 --> 00:02:19,696
like Siri and Messages.


48
00:02:20,256 --> 00:02:23,296
And if you want to think of your
role as a developer as a bit


49
00:02:23,296 --> 00:02:25,706
of a run loop with all these
events being pushed into it,


50
00:02:26,076 --> 00:02:27,136
well, you know what
happens then.


51
00:02:27,136 --> 00:02:27,956
There's too much stuff.


52
00:02:28,616 --> 00:02:30,426
So, what you do?


53
00:02:30,426 --> 00:02:32,406
What are some things
that you can start doing


54
00:02:32,736 --> 00:02:34,296
to get ready for the fall?


55
00:02:34,886 --> 00:02:37,456
First of all, if you were to
support a deployment target


56
00:02:37,456 --> 00:02:42,656
of iOS 8 and 9, you would
cover 95% of the devices.


57
00:02:42,756 --> 00:02:44,366
So, there's really no
need any more to have any


58
00:02:44,366 --> 00:02:46,056
of those deployment
targets set to 7.


59
00:02:46,596 --> 00:02:47,356
Let's get rid of that.


60
00:02:47,736 --> 00:02:49,826
In fact, the general idea is


61
00:02:49,826 --> 00:02:53,186
that you take the current
shipping version, so 9.3,


62
00:02:53,696 --> 00:02:55,306
and then set your
deployment target


63
00:02:55,306 --> 00:02:57,846
to one version back, maybe 8.4.


64
00:02:58,366 --> 00:03:01,346
But don't go to 8.3 or 8.2
anymore because then you


65
00:03:01,346 --> 00:03:03,306
and your customers don't
benefit from the improvements


66
00:03:03,306 --> 00:03:06,586
that we've implemented under
the hood in that 8.4 release.


67
00:03:07,496 --> 00:03:09,696
When we come out with iOS X
in the fall for the public,


68
00:03:10,856 --> 00:03:14,826
set your deployment
target to 9.3.


69
00:03:15,036 --> 00:03:17,416
Next, Issue Navigator.


70
00:03:17,956 --> 00:03:20,386
Resolve those issues.


71
00:03:20,766 --> 00:03:22,076
Take a look at them
and fix them.


72
00:03:23,026 --> 00:03:26,496
When we tell you that
there's, when we tell you


73
00:03:26,496 --> 00:03:29,576
that there is a deprecated API,
we deprecate API for a variety


74
00:03:29,576 --> 00:03:32,366
of reasons, including to
achieve better error handling


75
00:03:32,616 --> 00:03:34,616
or to better, have
better reporting


76
00:03:34,616 --> 00:03:37,886
or to permit more performance
or just add flexibility


77
00:03:37,886 --> 00:03:39,476
in the arguments return values.


78
00:03:39,696 --> 00:03:44,296
And there's really no excuse
for not moving on to the new API


79
00:03:44,406 --> 00:03:45,856
because we tell you right there.


80
00:03:45,856 --> 00:03:47,006
It tells you what to use.


81
00:03:47,266 --> 00:03:47,976
So, just use that.


82
00:03:48,086 --> 00:03:48,826
Switch over those.


83
00:03:50,046 --> 00:03:52,716
Next, you might decide that you
want to treat warnings as errors


84
00:03:53,246 --> 00:03:55,536
and we've had that for a
while with Objective-C.


85
00:03:55,926 --> 00:04:00,306
But now we also have it
in Xcode 8 for Swift.


86
00:04:00,306 --> 00:04:00,666
I know.


87
00:04:01,016 --> 00:04:02,986
[ Applause ]


88
00:04:02,986 --> 00:04:04,536
I think I'm the first
person to tell you that.


89
00:04:06,066 --> 00:04:07,146
I really like this idea.


90
00:04:07,146 --> 00:04:08,976
I think it's fantastic,
treating warnings as errors,


91
00:04:08,976 --> 00:04:11,806
because it forces you and your
team to address the issues.


92
00:04:12,026 --> 00:04:14,596
It's far too easy to
ignore those yellow warnings


93
00:04:14,596 --> 00:04:16,796
and think you'll come back to
them later and then you don't


94
00:04:17,005 --> 00:04:20,206
and that's the whole
technical debt thing.


95
00:04:20,416 --> 00:04:26,196
Also, do you think this would
work if you pitched maybe a 1.0


96
00:04:26,196 --> 00:04:28,876
of a new project, a new
app, and you said your team,


97
00:04:28,946 --> 00:04:30,666
we're going to ship
1.0, but we're not going


98
00:04:30,666 --> 00:04:32,186
to have any art work in
it, it's not ready yet.


99
00:04:32,476 --> 00:04:33,866
We're not going to
have any icons in it.


100
00:04:33,926 --> 00:04:35,106
We'll ship it and
we'll get those caught


101
00:04:35,106 --> 00:04:36,556
up in the .1 release.


102
00:04:37,056 --> 00:04:37,756
That would never fly.


103
00:04:37,756 --> 00:04:38,486
No one's going to do that,


104
00:04:38,486 --> 00:04:40,226
because this is how users
interact with your app.


105
00:04:41,726 --> 00:04:44,006
Well, actually it's how
many users but not all


106
00:04:44,006 --> 00:04:45,006
of them interact with your app.


107
00:04:45,466 --> 00:04:48,206
Many of them interact with your
app using the accessibility


108
00:04:48,206 --> 00:04:50,506
features that we have built
into the operating systems.


109
00:04:51,026 --> 00:04:54,876
So, why would ship your app with
artwork for people that need it


110
00:04:54,876 --> 00:04:56,856
or want it or use it but then
not have the accessibility


111
00:04:56,856 --> 00:04:57,576
features in there?


112
00:04:57,876 --> 00:04:58,646
That's not fair.


113
00:04:59,426 --> 00:05:00,946
So, resolve some of
the technical debt


114
00:05:00,946 --> 00:05:02,086
that comes to accessibility.


115
00:05:02,216 --> 00:05:03,036
Add support for that.


116
00:05:03,036 --> 00:05:05,806
We think that the accessibility
support is as much a part


117
00:05:05,806 --> 00:05:08,086
of your user interface
as the artwork is.


118
00:05:12,176 --> 00:05:13,406
It's built into Xcode,


119
00:05:13,686 --> 00:05:15,286
so you can use Interface
Builder for that.


120
00:05:15,576 --> 00:05:17,086
It's also easy to
do programmatically.


121
00:05:17,676 --> 00:05:21,496
We have a lot of
locale-aware API.


122
00:05:22,506 --> 00:05:24,136
You should be using those
and that's less code


123
00:05:24,136 --> 00:05:24,866
that you have to write.


124
00:05:25,506 --> 00:05:26,836
That generally isn't
new, though.


125
00:05:27,536 --> 00:05:28,606
But these are.


126
00:05:29,786 --> 00:05:31,166
Dimensions and measurement
formatting.


127
00:05:31,316 --> 00:05:33,036
If you've got recipe
apps or fitness apps


128
00:05:33,036 --> 00:05:35,226
and you've been converting
between metric and imperial


129
00:05:35,596 --> 00:05:37,536
on your own code,
get rid of that code


130
00:05:37,536 --> 00:05:39,866
and use our code that's now
available in the fall release.


131
00:05:41,176 --> 00:05:46,216
We'd like you to support
Peek, Pop and Quick actions.


132
00:05:46,546 --> 00:05:49,346
Right? You know, if you
have iPhone 6S right now,


133
00:05:50,636 --> 00:05:53,286
you're probably accustomed
to let's push hard on this


134
00:05:53,286 --> 00:05:54,156
and see if it does anything.


135
00:05:54,316 --> 00:05:54,856
No, nothing.


136
00:05:54,946 --> 00:05:56,586
So, let's push hard on that
and see if it does anything.


137
00:05:56,736 --> 00:05:57,566
Well, that one does something.


138
00:05:57,806 --> 00:05:58,916
It's hard to discover.


139
00:05:58,916 --> 00:06:00,406
How awesome would
it be if every app


140
00:06:00,406 --> 00:06:03,256
that we had already
had support for Peek,


141
00:06:03,256 --> 00:06:04,606
Pop and Push and the 3-D touch?


142
00:06:05,826 --> 00:06:14,756
Next. We want you to run
the Swift migrator using the


143
00:06:14,756 --> 00:06:16,056
developer preview of Xcode 8.


144
00:06:16,056 --> 00:06:19,886
If it doesn't migrate your code,
file a bug report and tell us.


145
00:06:20,346 --> 00:06:22,326
Then we have an opportunity
to fix that so


146
00:06:22,326 --> 00:06:24,486
that when you run migrator
for real in the fall


147
00:06:24,776 --> 00:06:27,806
on the final release of
Xcode 8, it'll likely work.


148
00:06:27,806 --> 00:06:31,306
If it doesn't work,
we resolve some


149
00:06:31,306 --> 00:06:32,556
of our own technical
debt with our API.


150
00:06:32,836 --> 00:06:34,106
The public interface is the same


151
00:06:34,106 --> 00:06:36,376
but the implementation might
change between releases.


152
00:06:36,746 --> 00:06:42,096
And it could be that the way
you use whatever API is a way


153
00:06:42,096 --> 00:06:42,966
that we didn't expect.


154
00:06:43,866 --> 00:06:44,896
So, you have an edge case.


155
00:06:45,516 --> 00:06:46,496
So, tell us about that too.


156
00:06:46,666 --> 00:06:48,316
This is why we do
these preview releases.


157
00:06:48,816 --> 00:06:52,256
We want you to file bug reports.


158
00:06:52,796 --> 00:06:55,386
The report isn't just
banter in the hallway.


159
00:06:55,496 --> 00:06:57,776
And it's not just
writing on a dev forum


160
00:06:58,206 --> 00:07:00,136
and is not just sending
an email to Apple.


161
00:07:00,936 --> 00:07:03,926
The proper way to file
a bug report is this.


162
00:07:04,046 --> 00:07:05,416
BugReport.Apple.com.


163
00:07:05,836 --> 00:07:06,496
Fill in the blanks.


164
00:07:07,006 --> 00:07:09,826
And then once you do
that, you get a number


165
00:07:09,826 --> 00:07:11,076
and then that's the
number that you go


166
00:07:11,236 --> 00:07:12,626
and post back into
the dev forums.


167
00:07:12,756 --> 00:07:15,056
There's a lot of Apple engineers
that read the dev forums.


168
00:07:15,216 --> 00:07:17,986
We like to hear what you are
saying but when you file,


169
00:07:17,986 --> 00:07:20,476
or when you report an
issue in those groups


170
00:07:20,556 --> 00:07:23,876
and you don't include the bug
report number, it's difficult


171
00:07:23,876 --> 00:07:25,426
for us internally to
kind of follow through


172
00:07:25,426 --> 00:07:25,976
and get traction on it.


173
00:07:26,546 --> 00:07:26,976
So, do that.


174
00:07:30,066 --> 00:07:36,206
Next, you're probably
not a great fan


175
00:07:36,206 --> 00:07:38,286
of filing bug reports with us.


176
00:07:39,316 --> 00:07:41,936
Because you've filed
them and then you wait


177
00:07:41,936 --> 00:07:43,236
and nothing seems to happen.


178
00:07:43,776 --> 00:07:44,686
You get nothing back.


179
00:07:45,416 --> 00:07:48,526
In the words of Whitney Houston,
where lonely bug reports go?


180
00:07:49,196 --> 00:07:51,326
Well, they seem to go in
this great big black hole


181
00:07:51,326 --> 00:07:52,626
because you never
get anything back.


182
00:07:53,436 --> 00:07:56,756
Or you think maybe you get
it in front of an engineer


183
00:07:56,756 --> 00:07:59,786
and the engineer kind of
ignores what you're saying.


184
00:08:01,226 --> 00:08:04,176
I want to just assure
you, this is not the case.


185
00:08:04,536 --> 00:08:05,356
One of the first things I did


186
00:08:05,356 --> 00:08:06,956
when I joined Apple
is I did a search


187
00:08:07,266 --> 00:08:10,456
in the bug tracking system,
the issue tracking system,


188
00:08:10,786 --> 00:08:14,316
to find all the issues that I
filed as an external developer.


189
00:08:14,316 --> 00:08:15,286
And a lot of them had traction.


190
00:08:15,496 --> 00:08:17,186
I just didn't have any
feedback from them.


191
00:08:17,636 --> 00:08:19,346
So, I wanted to show you
that if you do file a bug,


192
00:08:19,436 --> 00:08:20,236
we do look at them.


193
00:08:21,596 --> 00:08:23,476
The other thing that I find
is you might spend a lot


194
00:08:23,476 --> 00:08:24,266
of time filing a bug.


195
00:08:25,306 --> 00:08:27,896
A lot of time maybe you're
making some sample code.


196
00:08:28,196 --> 00:08:29,536
You're trying a couple
different devices.


197
00:08:29,536 --> 00:08:30,596
You're checking for regression.


198
00:08:30,596 --> 00:08:31,736
Like, that's great stuff to do.


199
00:08:31,996 --> 00:08:33,905
It takes you maybe half
an hour or maybe an hour,


200
00:08:33,946 --> 00:08:36,316
and then you file
it and it comes back


201
00:08:36,316 --> 00:08:37,056
and it says it's a dupe.


202
00:08:37,846 --> 00:08:39,456
And you're like, oh, I
just wasted half an hour,


203
00:08:39,456 --> 00:08:42,426
hour my life for something
that somebody else already did.


204
00:08:43,416 --> 00:08:45,066
So, I just want to
briefly talk about dupes.


205
00:08:46,456 --> 00:08:49,526
Because dupes first of all
are not a voting system.


206
00:08:49,526 --> 00:08:51,886
It's not like if you copy
somebody else's bug verbatim


207
00:08:52,076 --> 00:08:54,176
and you file a new bug with
exactly the same thing and it,


208
00:08:54,176 --> 00:08:55,806
we're going to say oh,
there's another vote for that,


209
00:08:55,806 --> 00:08:56,646
we should fix that first.


210
00:08:56,646 --> 00:08:57,776
It's not quite like that.


211
00:08:58,876 --> 00:09:00,956
What we do do with them though,
even though they're a dupe,


212
00:09:01,316 --> 00:09:02,606
it just means these
two are related.


213
00:09:03,476 --> 00:09:06,046
We need dupes too, not
for voting purposes


214
00:09:06,356 --> 00:09:09,846
but because we can have five
people file the same root bug,


215
00:09:09,976 --> 00:09:10,666
same root issue.


216
00:09:11,636 --> 00:09:15,576
The first four don't give
us enough information


217
00:09:15,576 --> 00:09:16,246
to be able to find it.


218
00:09:16,906 --> 00:09:20,366
But maybe it's your report,
maybe it's your fifth one which,


219
00:09:20,366 --> 00:09:23,406
albeit, is a dupe, but
has the information in it


220
00:09:23,406 --> 00:09:24,856
that we need to find the issue.


221
00:09:26,316 --> 00:09:29,656
In fact, an Apple engineer
that's been with the company


222
00:09:29,656 --> 00:09:36,246
for gosh, a couple decades,
made a quip a couple weeks ago.


223
00:09:36,766 --> 00:09:41,246
Paul had said that each bug
report as its host link.


224
00:09:42,336 --> 00:09:42,706
All right.


225
00:09:43,166 --> 00:09:44,556
So, in summary, things
to get going today.


226
00:09:44,906 --> 00:09:45,566
Fix your warnings.


227
00:09:45,566 --> 00:09:46,746
Replace your deprecated API.


228
00:09:47,296 --> 00:09:48,926
Localize your App if
it hasn't already.


229
00:09:49,896 --> 00:09:51,306
Use accessibility.


230
00:09:52,176 --> 00:09:53,686
Or support accessibility rather.


231
00:09:53,686 --> 00:09:54,646
Get Peek and Pop in there.


232
00:09:54,916 --> 00:09:56,896
And then take a look at
the next release of Xcode


233
00:09:57,116 --> 00:09:58,516
and give us some
feedback on that.


234
00:09:59,666 --> 00:10:01,296
With that, let's move
onto Asset Catalogs.


235
00:10:03,646 --> 00:10:06,366
It's time to move
onto Asset Catalogs.


236
00:10:07,296 --> 00:10:09,656
For you. So, if you still have
files in your File Navigator


237
00:10:09,656 --> 00:10:14,306
like this, go ahead and get them
into an Asset Catalog like that.


238
00:10:15,856 --> 00:10:20,336
The approach is you add a
catalog from the File menu.


239
00:10:20,976 --> 00:10:23,956
By the way, you don't have
to add just one catalog.


240
00:10:23,956 --> 00:10:25,956
You can have as many catalogs
as you like in the project.


241
00:10:26,536 --> 00:10:29,936
Maybe you're working on an app
and that app is a card game.


242
00:10:30,586 --> 00:10:34,596
So, you have a catalog for
the front images of the cards


243
00:10:34,596 --> 00:10:36,676
and a second catalog for the
back images of the cards.


244
00:10:36,676 --> 00:10:37,226
We can do that.


245
00:10:38,226 --> 00:10:41,156
Another example, you might have
your graphic designer download


246
00:10:41,156 --> 00:10:42,606
Xcode for free from
the App Store


247
00:10:44,166 --> 00:10:45,566
and create the Asset
Catalog for you.


248
00:10:46,546 --> 00:10:49,556
And then send it to you or
check it into a code repository.


249
00:10:49,756 --> 00:10:50,336
We could do that too.


250
00:10:51,646 --> 00:10:54,576
When we copy files into an Asset
Catalog, they are exactly that.


251
00:10:54,576 --> 00:10:55,186
They are copies.


252
00:10:55,376 --> 00:10:57,356
We don't reference the
original location ever.


253
00:10:57,696 --> 00:10:59,126
So, they do participate
in version control.


254
00:11:02,496 --> 00:11:05,016
To migrate your project,
you tap the big plus button.


255
00:11:05,796 --> 00:11:06,976
Choose Import From Project.


256
00:11:07,676 --> 00:11:10,906
We're going to give you
a list of all the Assets


257
00:11:10,906 --> 00:11:14,216
that are eligible to be
migrated from the File Navigator


258
00:11:14,216 --> 00:11:15,456
into the Asset Catalog.


259
00:11:16,006 --> 00:11:18,796
There you go.


260
00:11:19,216 --> 00:11:20,696
You migrated your image Assets.


261
00:11:21,946 --> 00:11:25,326
If you previously used
to use the bundle API,


262
00:11:25,326 --> 00:11:28,086
pathForResource etc.,
that doesn't work anymore


263
00:11:28,086 --> 00:11:29,426
because once we compile the app,


264
00:11:29,716 --> 00:11:31,216
the images aren't
free-floating around anymore.


265
00:11:31,356 --> 00:11:33,556
So you won't find anything.


266
00:11:34,206 --> 00:11:38,486
But if you're using image named,
then we'll find them if they're


267
00:11:38,486 --> 00:11:40,616
in an Asset Catalog
and we'll find them


268
00:11:40,616 --> 00:11:43,806
if they're just free-floating
in your File Navigator still.


269
00:11:44,216 --> 00:11:45,406
This API has been
around for a while.


270
00:11:45,576 --> 00:11:48,546
This API Image Name has
a lot of advantages above


271
00:11:48,546 --> 00:11:50,436
and beyond just being
able to find content


272
00:11:50,436 --> 00:11:51,256
from an image catalog.


273
00:11:52,066 --> 00:11:52,766
Asset Catalog.


274
00:11:53,436 --> 00:11:55,726
For example, it internally
caches the first time


275
00:11:55,726 --> 00:11:57,106
that you asked for
an image by name.


276
00:11:57,256 --> 00:11:58,776
We load it up, we give
you back a reference.


277
00:11:58,776 --> 00:12:00,546
The second time you ask
for the same image by name,


278
00:12:00,546 --> 00:12:02,366
we just return another
reference to the same thing.


279
00:12:03,296 --> 00:12:05,966
That's not how the
contents of file API works.


280
00:12:06,116 --> 00:12:07,996
Contents of file loads
new images every time.


281
00:12:08,526 --> 00:12:10,486
So, it's much more perform an,
especially when you're scrolling


282
00:12:10,486 --> 00:12:12,336
through a table,
to use image names.


283
00:12:12,776 --> 00:12:16,766
We support multiple
representations of an asset.


284
00:12:17,096 --> 00:12:21,216
So, with image names, you'd
give it a name, the API name.


285
00:12:22,136 --> 00:12:23,996
You'd let the framework
consider the device


286
00:12:23,996 --> 00:12:25,406
that you're running on.


287
00:12:26,016 --> 00:12:29,456
Consider the resolution of the
display, retina, non-retina,


288
00:12:29,456 --> 00:12:30,736
retina on a Plus device.


289
00:12:31,286 --> 00:12:35,966
And possibly other
differentiating factors


290
00:12:36,056 --> 00:12:39,096
for the media assets such as the
amount of memory in the device


291
00:12:39,486 --> 00:12:42,666
or the version of Metal that
is supported in the device.


292
00:12:43,206 --> 00:12:46,346
And you get an image back.


293
00:12:46,936 --> 00:12:49,806
There's two broad kinds
of asset types for images


294
00:12:49,806 --> 00:12:50,866
that you can consider.


295
00:12:50,866 --> 00:12:51,986
We have scaled images.


296
00:12:52,216 --> 00:12:55,026
Those are like PNG's, JPEG's.


297
00:12:55,026 --> 00:12:58,156
And then we have
single vector images


298
00:12:58,156 --> 00:13:01,236
or just vector-based
images, like PDFs or SPG's.


299
00:13:01,236 --> 00:13:05,406
We treat them a little
bit differently.


300
00:13:05,986 --> 00:13:08,566
On an asset by asset basis,
you can say this asset's going


301
00:13:08,566 --> 00:13:10,996
to be vector-based and that
asset's going to be scale.


302
00:13:12,186 --> 00:13:14,086
You do that by specifying
the scale factor.


303
00:13:14,646 --> 00:13:18,286
So, I'm going to talk first
about some of the scaled images


304
00:13:18,526 --> 00:13:20,546
and then move onto the
vector-based images.


305
00:13:21,276 --> 00:13:24,586
For scaled images, in this
example we're asking you


306
00:13:24,586 --> 00:13:26,806
to provide three different
renderings of the artwork


307
00:13:26,806 --> 00:13:30,246
from 1X devices,
non-retina, 2X and 3X.


308
00:13:31,056 --> 00:13:33,446
If we don't find, because
you didn't include it,


309
00:13:34,376 --> 00:13:37,556
the 2X and 3X, we'll take the 1X
image and we'll scale it up so


310
00:13:37,556 --> 00:13:40,116
that it becomes, well,
an image that's used


311
00:13:40,116 --> 00:13:46,246
on the higher end devices or
the higher density devices.


312
00:13:46,346 --> 00:13:49,676
Likewise, if you just
provided us with 3X artwork,


313
00:13:49,676 --> 00:13:51,066
we'd scale it down at runtime.


314
00:13:52,216 --> 00:13:54,346
These two scenarios
aren't that great.


315
00:13:54,586 --> 00:13:56,846
In this scenario, if I take
the 1X image and I scale it


316
00:13:56,846 --> 00:14:00,306
up for an iPhone 6S Plus, it's
going to look really jaggy.


317
00:14:00,306 --> 00:14:02,126
It's going to have a visual
artifact called aliasing.


318
00:14:02,156 --> 00:14:04,476
It's not very desirable
and the, well,


319
00:14:04,476 --> 00:14:06,566
your customers aren't
going to enjoy it.


320
00:14:07,116 --> 00:14:09,466
This one, at first
glance you might think oh,


321
00:14:09,466 --> 00:14:11,636
I'll just provide the 3X artwork
and let you scale it down.


322
00:14:12,806 --> 00:14:15,066
But there's a huge problem
with that because to scale


323
00:14:15,066 --> 00:14:17,706
down a 3X image, we
have to open a 3X image.


324
00:14:18,066 --> 00:14:18,826
And it's really big.


325
00:14:19,676 --> 00:14:23,086
And then we take an
extraction of the pixels


326
00:14:23,086 --> 00:14:25,186
and create a scaled-down
version for it.


327
00:14:26,406 --> 00:14:29,296
It's an order, two orders of
magnitude, possibly larger.


328
00:14:30,396 --> 00:14:31,186
So, consider this.


329
00:14:32,386 --> 00:14:35,466
You're on a device
like a 5S, 5C.


330
00:14:36,226 --> 00:14:37,956
There's no need for
3X images on it


331
00:14:38,566 --> 00:14:40,016
but you only provide 3X images.


332
00:14:40,776 --> 00:14:42,706
So, we start off with the
baseline of memory in use.


333
00:14:43,706 --> 00:14:46,946
That's fine, but then we
have to load up the 3X image,


334
00:14:47,196 --> 00:14:48,806
down convert it, get
rid of the 3X image


335
00:14:48,986 --> 00:14:50,766
and keep this scaled-down
version of it,


336
00:14:51,206 --> 00:14:53,116
which just temporarily
creates a memory spike.


337
00:14:53,116 --> 00:14:56,096
And if you're good, it's
probably going to be fine.


338
00:14:56,096 --> 00:14:57,166
But if you good, I mean


339
00:14:57,166 --> 00:15:01,486
if you're lucky it's
going to be fine.


340
00:15:01,546 --> 00:15:03,396
But let's say you're
scrolling at a table view


341
00:15:03,586 --> 00:15:05,456
and as you're scrolling,
we have to do this a lot.


342
00:15:05,776 --> 00:15:07,216
All of a sudden the
memory utilization


343
00:15:07,216 --> 00:15:09,426
for your app balloons
and then what happens


344
00:15:09,426 --> 00:15:10,286
when you use too much memory?


345
00:15:11,016 --> 00:15:13,586
Anybody know, just
say it out loud.


346
00:15:13,886 --> 00:15:14,506
Yeah, right.


347
00:15:14,506 --> 00:15:15,556
We terminate it.


348
00:15:15,556 --> 00:15:18,266
It's terminated because you
didn't provide the artwork.


349
00:15:18,466 --> 00:15:19,626
So, provide the artwork.


350
00:15:20,066 --> 00:15:22,826
In fact, you can do this
really easily with the task or,


351
00:15:23,046 --> 00:15:25,186
not a task but with
an Automator workflow.


352
00:15:25,746 --> 00:15:28,456
You give it a 3X image, let it
scale it down, give it a name.


353
00:15:28,456 --> 00:15:29,626
Scale it down, give it a name.


354
00:15:29,706 --> 00:15:31,586
Great, throw those all
into your Asset Catalog.


355
00:15:31,946 --> 00:15:33,706
And if you wanted to, you could,


356
00:15:34,246 --> 00:15:36,916
and this is another
best practice.


357
00:15:36,916 --> 00:15:38,116
Use this naming convention,


358
00:15:38,516 --> 00:15:41,246
the non-retina ones is
just a line justify.PNG.


359
00:15:41,246 --> 00:15:44,266
And then add 2X and
add 3X the other two.


360
00:15:44,936 --> 00:15:46,496
And then when you drag
and drop the three of them


361
00:15:46,496 --> 00:15:49,436
into an Asset Catalog, we
detect a naming convention.


362
00:15:49,436 --> 00:15:51,786
We create one asset with the
three different representations


363
00:15:52,246 --> 00:15:53,806
as opposed to three
separate assets.


364
00:15:55,026 --> 00:15:57,356
For Vector Assets,
Vector Assets are amazing


365
00:15:57,356 --> 00:15:59,856
because the file contains a
set of instructions on how


366
00:15:59,856 --> 00:16:03,356
to draw the image as opposed
to having it pre-rasturized.


367
00:16:04,176 --> 00:16:06,246
This is the same image, not
three different versions of it.


368
00:16:06,326 --> 00:16:09,326
Same image scaled
to different sizes.


369
00:16:09,476 --> 00:16:10,576
When you specify
that you're going


370
00:16:10,576 --> 00:16:12,346
to use single vector scaling,


371
00:16:12,406 --> 00:16:14,036
you're providing one
vector-based image.


372
00:16:14,196 --> 00:16:16,186
And at build time,
we rasterize it


373
00:16:16,186 --> 00:16:17,556
into the different
sizes that we need.


374
00:16:18,636 --> 00:16:19,796
It's much simpler for you.


375
00:16:19,796 --> 00:16:22,876
This is the kind of thing you'd
likely do for toolbar images


376
00:16:22,876 --> 00:16:24,296
and navigation bar images.


377
00:16:25,616 --> 00:16:27,386
There you go, scale
factor single vector.


378
00:16:28,446 --> 00:16:30,576
It's also possible
to combine both.


379
00:16:31,766 --> 00:16:35,976
You can set the scale factor
to be vector and scales.


380
00:16:36,476 --> 00:16:38,416
And what you do is you provide
us a vector-based image,


381
00:16:38,416 --> 00:16:40,536
like the limits in
the well called All.


382
00:16:41,626 --> 00:16:43,706
Then, if you want
to do any over-rides


383
00:16:43,706 --> 00:16:46,406
for the other scale factors,
you just provide those


384
00:16:46,406 --> 00:16:50,766
as either other vector images
or PNG's, JPEG scaled images.


385
00:16:52,206 --> 00:16:54,876
Then when we build it, if we see
that you're missing some assets,


386
00:16:55,016 --> 00:16:57,686
we'll just rasterize those
based on the vector image that's


387
00:16:57,686 --> 00:16:59,986
in the All truck well or target.


388
00:17:01,016 --> 00:17:02,776
Otherwise, we'll use the
scaled ones that are provided.


389
00:17:03,296 --> 00:17:08,306
New in Xcode 8, you can
adjust the compression.


390
00:17:10,896 --> 00:17:11,546
Come on, you.


391
00:17:12,156 --> 00:17:13,046
You can adjust the compression.


392
00:17:13,425 --> 00:17:15,286
So, we can say for a
JPEG image you want


393
00:17:15,286 --> 00:17:17,175
to use glossy compression
but maybe


394
00:17:17,175 --> 00:17:18,976
for a PNG we don't want
any compression all


395
00:17:18,976 --> 00:17:21,036
because it's going to be
an item in the toolbar.


396
00:17:21,116 --> 00:17:22,616
We don't want to see
any artifacts with that.


397
00:17:24,026 --> 00:17:26,136
Another issue you can resolve
by using Asset Catalogs,


398
00:17:26,266 --> 00:17:27,826
just in case the pitch
isn't strong enough yet,


399
00:17:28,476 --> 00:17:31,876
is to fix the issue or
resolve some issues.


400
00:17:31,876 --> 00:17:35,166
We're referring to
rounded corners.


401
00:17:36,516 --> 00:17:39,196
The issue with rounded
corners is we have adaptive UI.


402
00:17:39,826 --> 00:17:43,416
So, your button might
contain a text label


403
00:17:43,416 --> 00:17:46,666
that fits perfectly well
until the app is run


404
00:17:46,666 --> 00:17:49,026
in a different language and
then it changes the size.


405
00:17:49,556 --> 00:17:51,326
And when we change the size
of the button, we still want


406
00:17:51,326 --> 00:17:54,146
to preserve the beautiful
rounded corners on it.


407
00:17:55,396 --> 00:17:57,136
The way you would even
get a rounded button


408
00:17:57,136 --> 00:17:58,526
in the first place is


409
00:17:58,526 --> 00:18:00,276
in Interface Builder
you'd select a button


410
00:18:00,276 --> 00:18:02,146
and specify a background image.


411
00:18:02,946 --> 00:18:04,296
And then we apply that
as the background.


412
00:18:04,876 --> 00:18:10,996
In this example, I have an
asset called rounded rectangle


413
00:18:12,506 --> 00:18:14,696
and I apply that as my
background rectangle


414
00:18:14,696 --> 00:18:16,436
but you can see in the
two sizes of the button,


415
00:18:16,436 --> 00:18:19,986
when it's stretched out it's
really horrible looking.


416
00:18:22,276 --> 00:18:24,446
So, one way you can
fix this is the way


417
00:18:24,446 --> 00:18:25,726
that you've been
fixing it all along


418
00:18:25,726 --> 00:18:27,096
which is using Stretchable
Image.


419
00:18:28,116 --> 00:18:29,726
And you say well, I want
to preserve X number


420
00:18:29,726 --> 00:18:30,686
of pixels on both sides.


421
00:18:32,066 --> 00:18:33,796
And that's fine but
one of the themes


422
00:18:33,796 --> 00:18:36,356
of this presentation is
having you write less code


423
00:18:36,356 --> 00:18:38,546
and rely more on the frameworks
and the tools that we provide.


424
00:18:39,526 --> 00:18:42,376
So, instead this is built
into the Asset Editor.


425
00:18:42,656 --> 00:18:43,566
It's called Asset Slicer.


426
00:18:44,466 --> 00:18:47,616
And you can use it to
specify that, the portions


427
00:18:47,616 --> 00:18:49,366
in red, don't stretch these.


428
00:18:49,996 --> 00:18:51,296
Don't distort them.


429
00:18:51,996 --> 00:18:54,926
The portion that's illuminated,
repeat these pixels.


430
00:18:55,926 --> 00:18:58,356
And by doing that, you get
perfect rounded corners


431
00:18:58,356 --> 00:18:59,596
and you don't have to
do any code for it.


432
00:19:00,636 --> 00:19:02,926
This is also something you could
have your graphic designer do


433
00:19:02,926 --> 00:19:04,226
because it's part
of an Asset Catalog.


434
00:19:04,226 --> 00:19:06,896
All right, next up, let's talk


435
00:19:06,896 --> 00:19:09,616
about a design pattern
called Dependency Injection.


436
00:19:10,476 --> 00:19:12,956
Let's first of all talk about
what we're kind of fixing


437
00:19:12,956 --> 00:19:16,126
or trying to change
by introducing this.


438
00:19:16,336 --> 00:19:18,666
So, we have UITextField and
it works with the delegate


439
00:19:18,666 --> 00:19:21,006
and the delegate is called
UITextField delegate.


440
00:19:21,156 --> 00:19:23,276
Fine. And in it, it
contains methods that relate


441
00:19:23,276 --> 00:19:25,436
to text fields, like
textFieldShouldBeginEditing.


442
00:19:26,196 --> 00:19:29,976
Okay? We have WCSession.


443
00:19:30,446 --> 00:19:31,566
And WCSession delegate.


444
00:19:31,566 --> 00:19:32,396
What's inside the delegate?


445
00:19:32,496 --> 00:19:34,056
Methods that relate
to WCSession.


446
00:19:34,596 --> 00:19:35,566
You can see the pattern here.


447
00:19:36,076 --> 00:19:38,666
Which we break with this one.


448
00:19:39,276 --> 00:19:42,966
We have the app delegate
and of course it has methods


449
00:19:42,966 --> 00:19:44,606
that relate to the
application object.


450
00:19:45,276 --> 00:19:48,636
But then we stick other stuff
in there too like databases


451
00:19:48,636 --> 00:19:50,756
and essentially eventually
you have everything


452
00:19:50,756 --> 00:19:53,036
in there including the
kitchen sink just piling up.


453
00:19:53,326 --> 00:19:56,126
And we do it because it's
really easy to reach back


454
00:19:56,506 --> 00:19:58,376
through the Application
object, get the shared object,


455
00:19:58,376 --> 00:19:59,696
cast it and retrieve it.


456
00:19:59,896 --> 00:20:03,416
But it's such a strong coupling
between your view controllers


457
00:20:03,766 --> 00:20:06,396
and your app delegate and your
app delegate doesn't really need


458
00:20:06,396 --> 00:20:07,716
to be the place where that goes.


459
00:20:08,216 --> 00:20:11,666
Instead of a pattern like this


460
00:20:11,956 --> 00:20:13,386
where each view controller
reaches back


461
00:20:13,386 --> 00:20:15,206
to some common object,
maybe that you're storing


462
00:20:15,206 --> 00:20:17,686
in your app delegate,
you could switch it.


463
00:20:19,066 --> 00:20:21,866
Using Dependency Injection,
you take the model object


464
00:20:22,116 --> 00:20:24,176
that one view controller
has and you pass it forward


465
00:20:24,176 --> 00:20:25,626
to the next view
controller at the time


466
00:20:25,626 --> 00:20:26,846
that view controller
is presented.


467
00:20:27,486 --> 00:20:29,636
The idea is you give the
view control everything


468
00:20:29,636 --> 00:20:31,706
that it needs to do its job.


469
00:20:33,656 --> 00:20:36,326
So, for mail, you'd have
a list of mailboxes.


470
00:20:36,896 --> 00:20:38,116
A view controller
that shows a list


471
00:20:38,116 --> 00:20:40,496
of mailboxes would have a model
object representing an array


472
00:20:40,496 --> 00:20:41,336
of mailboxes.


473
00:20:41,726 --> 00:20:43,396
You tap on one of the mailboxes.


474
00:20:43,846 --> 00:20:46,646
Another view controller's
going to present


475
00:20:46,646 --> 00:20:48,176
to show the messages
in that mailbox.


476
00:20:48,576 --> 00:20:49,186
The middle one.


477
00:20:49,476 --> 00:20:51,866
And you pass forward the one
mailbox and it shows those


478
00:20:51,866 --> 00:20:52,866
and you keep passing it forward.


479
00:20:53,376 --> 00:20:58,576
The way you would do that in
a segue is to override prepare


480
00:20:58,576 --> 00:20:59,936
for segue and pass
it for repair.


481
00:21:00,496 --> 00:21:02,106
The way you would do it


482
00:21:02,106 --> 00:21:04,736
if you were programmatically
presenting is in the action


483
00:21:04,736 --> 00:21:06,506
for the button viewed
in instantiate.


484
00:21:06,506 --> 00:21:08,816
The view controller,
pass model object there.


485
00:21:10,416 --> 00:21:14,486
The benefit of this technique
is your view controllers are


486
00:21:14,486 --> 00:21:15,636
standalone now.


487
00:21:15,636 --> 00:21:17,756
They don't have these strong
ties and dependencies.


488
00:21:17,956 --> 00:21:19,106
You can reuse them more.


489
00:21:22,956 --> 00:21:24,796
Coming back, you've
got some choices.


490
00:21:25,166 --> 00:21:27,876
You can do what we do, which
is often to write a protocol


491
00:21:28,016 --> 00:21:30,276
and have you implement it
so that there's a call back


492
00:21:30,276 --> 00:21:31,476
to say the view controller's
dismissed


493
00:21:31,476 --> 00:21:32,846
and maybe update
your model there.


494
00:21:32,986 --> 00:21:34,216
You can pass in a closure.


495
00:21:34,726 --> 00:21:36,906
You can pass object
models by reference.


496
00:21:37,266 --> 00:21:40,166
Or, you can, if you're
using online segues,


497
00:21:40,166 --> 00:21:42,376
it's exactly the same as
overwriting prepare for segue


498
00:21:42,376 --> 00:21:43,866
because it happens in both ways,


499
00:21:44,056 --> 00:21:45,496
forward directions
and back directions.


500
00:21:46,926 --> 00:21:49,456
Another reason why
we like this is


501
00:21:49,456 --> 00:21:51,926
because view controllers are
pretty much like Lego blocks.


502
00:21:52,806 --> 00:21:55,416
They should be able to be
rearranged independently


503
00:21:55,416 --> 00:21:57,366
of each other to
create new structures.


504
00:21:57,716 --> 00:22:01,756
In this case, an iPhone SE's
overall user experience is going


505
00:22:01,756 --> 00:22:03,646
to be different for your
app than it would be


506
00:22:03,646 --> 00:22:07,066
on an iPad 12 inch,
iPadPro 12 inch.


507
00:22:08,056 --> 00:22:09,586
If your view controllers
are independent,


508
00:22:09,586 --> 00:22:12,176
it's easy to do that.


509
00:22:12,176 --> 00:22:12,486
All right.


510
00:22:13,016 --> 00:22:17,196
Now, last year at WWDC,
I gave a presentation


511
00:22:17,696 --> 00:22:22,366
on topics including playgrounds
and modernizing the UI.


512
00:22:23,446 --> 00:22:26,356
And interoperability with
Objective-C and Swift.


513
00:22:26,916 --> 00:22:31,286
And since then, we've added
things to the playgrounds,


514
00:22:31,556 --> 00:22:32,816
things that we couldn't
do last year.


515
00:22:32,816 --> 00:22:34,636
So, I want to show you
some of those things.


516
00:22:35,306 --> 00:22:39,086
With that, we're going
to move to a demo.


517
00:22:39,466 --> 00:22:42,346
So, this is the periodic
table of elements app


518
00:22:42,346 --> 00:22:43,226
that I showed you last year.


519
00:22:43,436 --> 00:22:45,296
Since then, it's been
updated a little bit.


520
00:22:45,296 --> 00:22:49,126
For example, the colors
have changed a bit.


521
00:22:49,266 --> 00:22:51,716
Instead of using states
of matter, gas, liquid,


522
00:22:51,716 --> 00:22:55,096
now it's the kind of object
like a transition metal, metal,


523
00:22:55,096 --> 00:22:57,366
halogen, that kind of thing.


524
00:22:57,366 --> 00:22:58,946
We've also added
support to render it


525
00:22:58,946 --> 00:23:01,756
out so it actually looks like
a periodic table of elements


526
00:23:02,066 --> 00:23:04,066
and that's a collection
view doing that.


527
00:23:05,996 --> 00:23:13,366
I want to show you
some of the code.


528
00:23:13,576 --> 00:23:15,406
One of the things that
changed with this code base


529
00:23:15,406 --> 00:23:17,586
since the last time
that you saw it is


530
00:23:17,586 --> 00:23:19,726
that the data model has
moved over to Swift.


531
00:23:20,686 --> 00:23:24,496
So now I have a class the
represents an atomic element


532
00:23:24,796 --> 00:23:26,456
like nitrogen or oxygen.


533
00:23:27,136 --> 00:23:29,716
And I have a class that
represents a collection


534
00:23:30,196 --> 00:23:32,986
of those called, excuse
me, periodic elements.


535
00:23:34,286 --> 00:23:37,386
This class instantiates
the elements,


536
00:23:37,386 --> 00:23:40,566
the individual atomic elements,
by reading in a property list.


537
00:23:41,486 --> 00:23:43,756
Which I've also stored
in my app here.


538
00:23:44,326 --> 00:23:48,396
But now that I've moved
the data model to Swift,


539
00:23:48,676 --> 00:23:50,526
I can show you the data
model in a playground.


540
00:23:51,096 --> 00:23:53,256
Last year when I did
this, I'm just going


541
00:23:53,256 --> 00:23:54,576
to make a new playground first.


542
00:23:55,496 --> 00:23:56,666
New file, playground.


543
00:23:57,226 --> 00:24:01,836
Last year when I did
this, I was copying,


544
00:24:01,836 --> 00:24:04,546
pasting between my
code and my playground.


545
00:24:05,116 --> 00:24:08,916
And when you do this a lot, your
playground can become really big


546
00:24:08,916 --> 00:24:09,906
with a lot of code in it.


547
00:24:09,906 --> 00:24:13,076
So, instead our playgrounds
now have subfolders


548
00:24:14,136 --> 00:24:15,756
for source code and resources.


549
00:24:16,306 --> 00:24:20,926
I can take my model
objects and put them


550
00:24:20,926 --> 00:24:21,936
into the sources folder.


551
00:24:22,516 --> 00:24:26,126
And then we compile
them behind the scenes


552
00:24:26,676 --> 00:24:29,316
and we implicitly import
all of their public symbols


553
00:24:29,316 --> 00:24:31,816
into the playground to make
them available for you.


554
00:24:33,476 --> 00:24:37,726
Which means if I take this
resource file, my property list,


555
00:24:37,776 --> 00:24:39,586
and include that in
the resources folder


556
00:24:39,836 --> 00:24:41,656
which makes it accessible
to the playground,


557
00:24:42,256 --> 00:24:48,676
I can come over to
the playground here


558
00:24:49,206 --> 00:24:51,746
and instantiate an instance
of the atomic elements.


559
00:24:53,016 --> 00:24:53,966
Here's Californium.


560
00:24:54,496 --> 00:24:57,166
Like that.


561
00:24:58,346 --> 00:25:01,656
So, the ability to
take these source files


562
00:25:02,016 --> 00:25:04,886
and have them automatically
imported into your project


563
00:25:05,566 --> 00:25:07,006
when they're in the
sources folder


564
00:25:07,006 --> 00:25:09,686
or the resources folder is a
pretty, I think powerful way


565
00:25:10,116 --> 00:25:12,266
to keep your playgrounds
themselves small


566
00:25:12,266 --> 00:25:16,586
and concise while also having
more content inside of them.


567
00:25:16,796 --> 00:25:18,756
Now, above and beyond that,
something else happened


568
00:25:18,756 --> 00:25:23,856
since last year that affects
this app in particular.


569
00:25:24,236 --> 00:25:26,986
The International Union of Pure


570
00:25:26,986 --> 00:25:30,996
and Applied Chemistry
confirmed the discovery


571
00:25:30,996 --> 00:25:32,776
of 4 additional elements.


572
00:25:33,666 --> 00:25:35,536
So, now all of a sudden
this Property List file


573
00:25:35,536 --> 00:25:37,436
that I've got embedded
inside my app doesn't seem


574
00:25:37,436 --> 00:25:38,766
like such good idea anymore.


575
00:25:39,386 --> 00:25:42,686
So, I thought well,
we can fix that.


576
00:25:42,686 --> 00:25:43,606
We'll just put it online.


577
00:25:44,836 --> 00:25:48,676
So I set up a little Web
server and put it a JSON file


578
00:25:48,676 --> 00:25:49,876
at this time with
all the elements.


579
00:25:51,116 --> 00:25:53,676
And then the idea is that
when my app launches,


580
00:25:54,196 --> 00:25:56,506
initially it'll use the
embedded built-in data file.


581
00:25:57,176 --> 00:25:58,886
That way if there's no
network connectivity,


582
00:25:58,886 --> 00:26:00,496
there's still something
for the customer to see.


583
00:26:00,496 --> 00:26:03,636
And this is also a pattern
we recommend that you do.


584
00:26:04,596 --> 00:26:06,226
Then we'll do a background
check,


585
00:26:06,596 --> 00:26:07,866
and in the background
we'll check to see


586
00:26:07,866 --> 00:26:09,266
if there's an update
to the file.


587
00:26:09,266 --> 00:26:10,836
And if so, we'll put
it in the caches folder


588
00:26:10,836 --> 00:26:13,646
and we'll reference
that inside the app.


589
00:26:14,436 --> 00:26:16,506
So, I want to do the network
request in the playground.


590
00:26:17,126 --> 00:26:21,346
And for that, we have the class
formerly known as NSURL Session


591
00:26:21,346 --> 00:26:23,136
and now known as URL Session.


592
00:26:23,986 --> 00:26:26,276
Which is shown here.


593
00:26:26,816 --> 00:26:32,286
We grabbed the Session and the
thing I like about the Session


594
00:26:32,286 --> 00:26:35,066
when I call it out on line 24,


595
00:26:36,256 --> 00:26:37,866
is I give it a completion
handler.


596
00:26:38,596 --> 00:26:40,606
Because this runs asynchronously
in the background.


597
00:26:41,356 --> 00:26:43,516
Go to the Network Request,
let my code continue to run.


598
00:26:44,756 --> 00:26:48,926
When the request either times
out or the data comes in,


599
00:26:48,926 --> 00:26:49,826
it gives us call back.


600
00:26:49,826 --> 00:26:52,436
And in the call back on line 28,


601
00:26:53,576 --> 00:26:55,916
you can see I'm printing
out one element here.


602
00:26:56,476 --> 00:27:01,106
But you actually don't
see it over there.


603
00:27:02,286 --> 00:27:02,976
That's a problem.


604
00:27:08,696 --> 00:27:10,266
So, just think about
what's happening here.


605
00:27:10,886 --> 00:27:11,896
We have a playground
that's running.


606
00:27:12,436 --> 00:27:14,076
We asked it to do a
background operation.


607
00:27:14,736 --> 00:27:16,746
At some indeterminate
time in the future,


608
00:27:17,246 --> 00:27:19,346
we get a call back saying
this is what we want to do.


609
00:27:19,946 --> 00:27:22,136
But playgrounds typically
execute like a script.


610
00:27:22,186 --> 00:27:23,406
The first line all the way


611
00:27:23,406 --> 00:27:24,776
through to the end
and they stop.


612
00:27:26,046 --> 00:27:27,076
Key word being typically.


613
00:27:27,076 --> 00:27:28,296
But they don't have to.


614
00:27:28,846 --> 00:27:31,476
We can get a runloop and
have asynchronous operations


615
00:27:31,476 --> 00:27:32,266
in our playgrounds.


616
00:27:33,246 --> 00:27:35,346
To do that we import
a new module called


617
00:27:35,586 --> 00:27:36,236
playground support.


618
00:27:37,346 --> 00:27:42,766
And then you ask the playground
for indefinite execution.


619
00:27:42,766 --> 00:27:45,826
And then it never stops,
it just keeps processing.


620
00:27:46,406 --> 00:27:49,656
So, now if I scroll
down to this section,


621
00:27:49,656 --> 00:27:52,436
you can see I'm getting
my callback.


622
00:27:53,126 --> 00:27:53,786
There's cadmium.


623
00:27:53,876 --> 00:27:54,426
All right.


624
00:27:56,996 --> 00:28:02,356
Next I want to expand
on last year.


625
00:28:02,446 --> 00:28:04,566
Last I showed a drawing,


626
00:28:04,566 --> 00:28:07,786
a rounded corner
core graphics image.


627
00:28:08,896 --> 00:28:10,706
This time I don't just want to
draw an image and preview it.


628
00:28:10,706 --> 00:28:13,206
I want to do a whole table view
controller in the playground.


629
00:28:13,676 --> 00:28:17,416
And we have some new features


630
00:28:17,416 --> 00:28:19,096
in the playgrounds
that let us do this.


631
00:28:19,826 --> 00:28:24,366
Let me just open up
some space in my app.


632
00:28:25,016 --> 00:28:27,656
Call it View.


633
00:28:28,216 --> 00:28:33,336
So, I'm going to make a subclass
of UI Table View Controller.


634
00:28:34,916 --> 00:28:40,756
This is all that it
is, a selected area.


635
00:28:41,036 --> 00:28:43,016
I'm implementing the 2
methods at every Table View


636
00:28:43,016 --> 00:28:44,836
or Table View Controller
are required to have.


637
00:28:45,236 --> 00:28:48,966
Number of objects, sorry,
rather number of items,


638
00:28:49,226 --> 00:28:51,906
self-wrote index that and
returnings themselves.


639
00:28:52,446 --> 00:28:55,076
And I'd like to see that live.


640
00:28:56,286 --> 00:28:59,616
So, this time what we do is we
instantiate the view controller


641
00:29:00,556 --> 00:29:02,826
and then using that
playground support module


642
00:29:02,996 --> 00:29:06,036
that I've already imported, the
one that's right here on line 4,


643
00:29:06,576 --> 00:29:11,346
I grab the playground's
Live View.


644
00:29:11,946 --> 00:29:16,886
And then we take that
view and we render it


645
00:29:16,886 --> 00:29:19,736
into the assistant editor who's
no longer an Assistant Editor


646
00:29:20,776 --> 00:29:22,156
but rather our Live View.


647
00:29:29,366 --> 00:29:31,006
See? It's a Live Table View.


648
00:29:31,466 --> 00:29:32,856
It scrolls, it's active.


649
00:29:34,466 --> 00:29:36,466
[ Applause ]


650
00:29:36,916 --> 00:29:37,206
Thank you.


651
00:29:37,496 --> 00:29:38,746
Is not just a static image.


652
00:29:39,226 --> 00:29:40,366
It's a real interactive
table view.


653
00:29:40,366 --> 00:29:42,876
If you wanted to try some
of our new delegate methods


654
00:29:42,876 --> 00:29:44,766
or even the existent delegate
methods, you could throw them


655
00:29:44,766 --> 00:29:46,286
into the playground and
now interact with them.


656
00:29:46,786 --> 00:29:50,406
No need to put this into
the simulator anymore.


657
00:29:51,666 --> 00:29:53,396
So, now I want to take the two
things and put them together.


658
00:29:54,536 --> 00:29:56,956
Specifically, I have this
background network request


659
00:29:56,956 --> 00:29:57,576
that's happening.


660
00:29:57,976 --> 00:30:00,546
And after I retrieve the data,
I want to reload my table view.


661
00:30:00,736 --> 00:30:09,126
So, let me show you that.


662
00:30:09,326 --> 00:30:11,316
First of all, comment this.


663
00:30:12,106 --> 00:30:15,316
And just to prove to you that
it's totally loading the data


664
00:30:15,316 --> 00:30:19,136
from that site, I'm
going to change this


665
00:30:19,226 --> 00:30:21,746
so I have an empty
array of elements.


666
00:30:21,746 --> 00:30:22,446
All right.


667
00:30:26,496 --> 00:30:28,846
So, I have an empty
array of elements.


668
00:30:28,846 --> 00:30:30,006
I do the network request.


669
00:30:30,766 --> 00:30:32,086
When the network
request comes back


670
00:30:32,086 --> 00:30:34,936
and it's call back, it's a sign.


671
00:30:35,496 --> 00:30:37,886
The new array of elements
that I just pulled in.


672
00:30:38,436 --> 00:30:39,446
And then we reload
the Table View.


673
00:30:40,036 --> 00:30:41,856
All right.


674
00:30:51,056 --> 00:30:51,786
Is that what you would expect?


675
00:30:51,786 --> 00:30:54,456
It's not what I expected the
first time that I saw that.


676
00:30:54,966 --> 00:30:56,186
Oh, that must be a bug in Xcode.


677
00:30:56,186 --> 00:30:58,006
I'll just go file a bug
report at Apple.com.


678
00:30:58,566 --> 00:30:59,426
But it's actually not.


679
00:31:00,916 --> 00:31:03,116
It's a bug in my code,
believe it or not.


680
00:31:03,356 --> 00:31:05,926
It's a bug in my code and
here's what's happening.


681
00:31:06,916 --> 00:31:09,636
We have this background
operation coming in.


682
00:31:10,456 --> 00:31:12,446
The background operation
has a background operation.


683
00:31:12,696 --> 00:31:13,506
It's not on the main thread.


684
00:31:14,176 --> 00:31:15,166
UI is in the main thread.


685
00:31:16,026 --> 00:31:19,856
So, in my closure, the
completion handler,


686
00:31:19,856 --> 00:31:21,646
I can't be updating the
main thread from there,


687
00:31:22,066 --> 00:31:25,136
which is what I'm trying to do
when I reload my Table View.


688
00:31:26,476 --> 00:31:31,066
When I tap on the cells,
we are invalidating them


689
00:31:31,066 --> 00:31:32,196
and that's why they do refresh


690
00:31:32,196 --> 00:31:36,026
and you can see them
at that time.


691
00:31:36,226 --> 00:31:37,406
This is also something
we can fix.


692
00:31:37,406 --> 00:31:40,246
We have something new in
Swift 3, which is a Swift API


693
00:31:40,526 --> 00:31:42,036
for Grand Central Dispatch.


694
00:31:43,856 --> 00:31:47,746
So, instead of that
C API we had before,


695
00:31:47,746 --> 00:31:53,196
I can now say a dispatch
cue, which cues the main cue.


696
00:31:53,476 --> 00:31:54,306
What kind of operation?


697
00:31:54,306 --> 00:31:55,226
An asynchronous one.


698
00:31:55,656 --> 00:31:56,486
We don't need that anymore.


699
00:31:57,126 --> 00:31:58,706
And here's what I wanted
to do on the main thread.


700
00:31:58,706 --> 00:32:04,106
Now it bounces back to the
main thread and it's there.


701
00:32:06,616 --> 00:32:11,006
Dispatch cue, thank you,
dispatch cue in Swift,


702
00:32:11,606 --> 00:32:14,426
Live Views in Swift and
indefinite execution.


703
00:32:15,776 --> 00:32:17,666
Let's switch back to the slides.


704
00:32:18,506 --> 00:32:20,506
[ Applause ]


705
00:32:20,996 --> 00:32:21,376
Thank you.


706
00:32:21,676 --> 00:32:24,476
So, just as a point of
summary, there's the key points


707
00:32:24,476 --> 00:32:26,996
from the previous presentation,
or the preset demonstration.


708
00:32:27,526 --> 00:32:30,196
Some other tips.


709
00:32:30,676 --> 00:32:32,806
When I dragged those files
into the sources folder


710
00:32:32,806 --> 00:32:34,496
or the resources
folder, they are copied.


711
00:32:34,536 --> 00:32:37,106
They are not referenced.


712
00:32:37,106 --> 00:32:40,686
Also, only methods that are
marked as public, methods,


713
00:32:40,686 --> 00:32:42,246
properties, and datatypes,
etc that are marked


714
00:32:42,246 --> 00:32:43,696
as public are going
to be available


715
00:32:43,966 --> 00:32:44,906
to you in the playground.


716
00:32:44,906 --> 00:32:46,796
So, you might have to go
add some public specifiers


717
00:32:46,796 --> 00:32:48,646
because the default
visibility specifier


718
00:32:48,646 --> 00:32:50,636
in Swift is internal,
not public.


719
00:32:53,196 --> 00:32:55,516
I mentioned using
a caches folder.


720
00:32:56,566 --> 00:32:58,746
Now, we still have
some devices out there


721
00:32:58,746 --> 00:33:00,976
that are constrained
storage wise.


722
00:33:01,586 --> 00:33:03,636
And those customers try
to updates to new versions


723
00:33:03,636 --> 00:33:05,046
of the operating
system and they find


724
00:33:05,046 --> 00:33:06,156
out there's not enough space.


725
00:33:07,046 --> 00:33:08,806
So, what we do when that
happens, when the device is


726
00:33:08,806 --> 00:33:11,516
under storage pressure, is we
go through the caches folders


727
00:33:11,516 --> 00:33:12,806
and we delete everything
we can find


728
00:33:12,806 --> 00:33:14,356
in all the applications
caches folders.


729
00:33:14,626 --> 00:33:15,896
This way we free up space.


730
00:33:16,966 --> 00:33:18,256
We need your help with this.


731
00:33:18,386 --> 00:33:20,306
If you are temporarily
downloading data


732
00:33:20,306 --> 00:33:22,276
and you're not putting
into caches folder,


733
00:33:22,586 --> 00:33:23,696
put it in the caches folder.


734
00:33:24,176 --> 00:33:29,656
Next. I thought it'd
be really neat to take,


735
00:33:30,316 --> 00:33:33,756
it's doing that again.


736
00:33:34,396 --> 00:33:39,266
To take the view controllers
that use dependency injection


737
00:33:39,266 --> 00:33:42,466
and rearrange them in a way that
might suit a different platform.


738
00:33:43,076 --> 00:33:45,626
So, I'm going switch
back to the demo.


739
00:33:48,216 --> 00:33:49,456
Turn on my Bluetooth.


740
00:33:55,316 --> 00:33:58,796
And take the view controllers
as is over the tvOS.


741
00:34:14,576 --> 00:34:15,806
Well, there we go.


742
00:34:15,876 --> 00:34:21,786
I have paired my
Siri remote to my Mac


743
00:34:21,786 --> 00:34:23,206
so I can use it with
the simulator.


744
00:34:24,735 --> 00:34:27,186
It's exactly the same code
from before, same view,


745
00:34:27,186 --> 00:34:30,726
same table view, all
that stuff is there.


746
00:34:30,936 --> 00:34:35,206
I can go over and I can see
the periodic table like this.


747
00:34:35,446 --> 00:34:37,956
And I get that neat TV effect
when I slide over the cells


748
00:34:37,956 --> 00:34:38,766
and its collection view.


749
00:34:39,255 --> 00:34:40,416
It's the same layout code.


750
00:34:40,416 --> 00:34:41,476
It's the same view controller.


751
00:34:41,476 --> 00:34:43,186
It's all the same as
what I had before.


752
00:34:44,626 --> 00:34:47,085
Well, almost.


753
00:34:55,896 --> 00:34:57,436
I added this line
of code so that


754
00:34:57,436 --> 00:34:59,676
when I selected a
collection view cell,


755
00:34:59,676 --> 00:35:01,916
you would get that focused item.


756
00:35:02,636 --> 00:35:05,786
And I used the OS
Compiler directive


757
00:35:06,126 --> 00:35:07,526
to say this is only for tvOS.


758
00:35:08,326 --> 00:35:09,346
Other than that,
it's the same code.


759
00:35:10,216 --> 00:35:11,536
Which kind of brings
me to another point


760
00:35:11,536 --> 00:35:14,886
that if you ever think you are
taking an app from one platform


761
00:35:14,886 --> 00:35:16,396
and just dropping it
on another platform


762
00:35:16,846 --> 00:35:18,476
with no real other changes,


763
00:35:18,476 --> 00:35:21,446
you're possibly doing something
wrong and might want to check


764
00:35:21,446 --> 00:35:23,146
out the human interface
guidelines just


765
00:35:23,146 --> 00:35:25,386
to see how you can make
that platform and that app


766
00:35:25,386 --> 00:35:30,596
on that platform more native and
feel more like it belongs there.


767
00:35:31,226 --> 00:35:34,476
Let me give you an example.


768
00:35:34,476 --> 00:35:36,706
Let's say that you made
an app that does some sort


769
00:35:36,706 --> 00:35:37,936
of like cloud-based accounting.


770
00:35:38,686 --> 00:35:41,656
And maybe you have an iPad
version and on the iPad version,


771
00:35:41,656 --> 00:35:42,746
people fill out invoices.


772
00:35:43,476 --> 00:35:44,646
Makes sense.


773
00:35:45,596 --> 00:35:48,496
It makes no sense,
in my opinion,


774
00:35:49,376 --> 00:35:52,286
to fill out invoices
on a 60-inch TV.


775
00:35:52,286 --> 00:35:53,686
You just wouldn't do it.


776
00:35:53,686 --> 00:35:54,316
Why would you do that?


777
00:35:54,916 --> 00:35:56,746
This is not an app you
would just take as is


778
00:35:56,746 --> 00:35:58,606
and launch it on tvOS.


779
00:35:59,216 --> 00:36:02,576
But, the iPad version of your
app probably has some great


780
00:36:02,576 --> 00:36:04,586
visualization about how
the company is performing.


781
00:36:04,586 --> 00:36:06,186
Maybe you've got some
graphs or charts.


782
00:36:07,446 --> 00:36:08,716
Those would be awesome on a TV.


783
00:36:09,006 --> 00:36:13,806
You could have a version of your
app that has a Live Status board


784
00:36:13,806 --> 00:36:14,816
of how the company's doing.


785
00:36:15,236 --> 00:36:17,646
And maybe in the company's
boardroom or something it's just


786
00:36:17,646 --> 00:36:19,596
on and it just animates
through and shows an update.


787
00:36:19,756 --> 00:36:20,936
It's the same data model.


788
00:36:21,046 --> 00:36:22,356
It's the same data access.


789
00:36:22,856 --> 00:36:24,536
But you pivoted that
data in a way


790
00:36:24,536 --> 00:36:26,786
that makes it more
applicable for the platform


791
00:36:26,786 --> 00:36:27,466
in which it's running.


792
00:36:27,626 --> 00:36:29,166
And that's an idea I
want you to think about.


793
00:36:29,166 --> 00:36:31,176
How can we take the same data
that we have and just pivot it


794
00:36:31,396 --> 00:36:36,536
in a way that works
for that platform?


795
00:36:36,536 --> 00:36:40,536
In summary, modernizing your
app is an ongoing process.


796
00:36:40,536 --> 00:36:42,776
We want you to rely on the
frameworks as much as you can.


797
00:36:44,086 --> 00:36:46,216
If you can get rid of
code that's in your app


798
00:36:46,216 --> 00:36:48,306
and instead use code that
we've got in our frameworks,


799
00:36:48,306 --> 00:36:49,676
that's code let's code
for you to maintain.


800
00:36:50,406 --> 00:36:51,096
We'd like you to do that.


801
00:36:52,096 --> 00:36:54,726
We want you to get started today
with finding issues with Xcode,


802
00:36:54,726 --> 00:36:56,036
with the Swift converter.


803
00:36:56,036 --> 00:36:58,496
We want you to architect
your app


804
00:36:58,496 --> 00:37:00,706
with fewer inter-object
dependencies so it's easier


805
00:37:00,706 --> 00:37:03,146
for you to rearrange your app.


806
00:37:04,436 --> 00:37:07,166
Finally, we want you to
consider bringing your app


807
00:37:07,166 --> 00:37:09,626
to other platforms
of ours [laughter]


808
00:37:14,366 --> 00:37:15,336
by pivoting your data model.


809
00:37:16,136 --> 00:37:18,146
There are some related
sessions you can check out.


810
00:37:18,776 --> 00:37:19,356
There you go.


811
00:37:20,126 --> 00:37:25,356
And other than that, you
can check out our link


812
00:37:25,356 --> 00:37:26,456
for this particular session.


813
00:37:26,716 --> 00:37:27,926
And that is it for me.


814
00:37:28,186 --> 00:37:28,796
Thanks, everyone.


815
00:37:29,516 --> 00:37:33,500
[ Applause ]

