1
00:00:07,516 --> 00:00:17,500
[ Music ]


2
00:00:27,516 --> 00:00:35,546
[ Applause ]


3
00:00:36,046 --> 00:00:39,476
>> Good afternoon and
welcome to a peek at 3D Touch,


4
00:00:39,876 --> 00:00:42,016
I'm Tyler Fox and
later I'll be joined


5
00:00:42,016 --> 00:00:43,546
by my colleague Peter Hajas.


6
00:00:43,936 --> 00:00:46,106
We're both engineers
on the UIKit Team


7
00:00:46,366 --> 00:00:49,356
and we're really excited
to tell you all today,


8
00:00:49,466 --> 00:00:51,166
how you can adopt 3D Touch


9
00:00:51,216 --> 00:00:54,096
to take your app's user
experience to the next level.


10
00:00:54,096 --> 00:00:58,366
We'd like to start
today by reviewing some


11
00:00:58,366 --> 00:01:00,116
of the fundamentals of 3D Touch


12
00:01:00,116 --> 00:01:02,896
and showing you how it
shows up across the system.


13
00:01:04,046 --> 00:01:08,156
From there, we'll talk about
Home Screen Quick Actions.


14
00:01:08,926 --> 00:01:11,446
Home Screen Quick Actions
are one of the easiest ways


15
00:01:11,446 --> 00:01:13,916
that you can add 3D
Touch to your apps today.


16
00:01:14,846 --> 00:01:17,266
They let users jump straight
from the Home screen,


17
00:01:17,616 --> 00:01:20,416
right to those key
activities in your application.


18
00:01:21,936 --> 00:01:25,266
From there, we'll talk
about Peek and Pop.


19
00:01:25,876 --> 00:01:30,046
Peek and Pop are a seamless
way for users to preview


20
00:01:30,186 --> 00:01:32,606
and navigate content
in your applications.


21
00:01:33,476 --> 00:01:36,626
We think that most apps will
benefit greatly from adding,


22
00:01:36,626 --> 00:01:40,086
for adding support with Peek
and Pop to your content.


23
00:01:41,236 --> 00:01:43,806
Finally, we're excited
to tell you all


24
00:01:43,806 --> 00:01:48,146
about UIPreviewInteraction,
this is brand new API in iOS X


25
00:01:48,146 --> 00:01:52,136
that allows you to make 3D
Touch unique to your apps.


26
00:01:52,916 --> 00:01:55,646
It's for those of you
that want advanced control


27
00:01:56,106 --> 00:01:57,666
of the 3D Touch interaction


28
00:01:57,946 --> 00:02:00,856
and it lets you use the
same force processing


29
00:02:01,136 --> 00:02:04,196
that we've honed for Peek
and Pop, but bringing


30
00:02:04,196 --> 00:02:06,066
in your own custom
user interface.


31
00:02:06,426 --> 00:02:08,476
It's really great and we can't
wait to tell you all about it.


32
00:02:09,226 --> 00:02:14,466
So with that, let's get started,
by talking about 3D Touch.


33
00:02:16,296 --> 00:02:20,366
Devices that support 3D Touch
have a force sensitive display


34
00:02:21,066 --> 00:02:22,656
that precisely measures
the pressure


35
00:02:22,656 --> 00:02:24,476
of touches on the screen.


36
00:02:25,536 --> 00:02:29,166
Now iOS has always let users
directly manipulate the content


37
00:02:29,166 --> 00:02:30,266
on the user interface.


38
00:02:31,306 --> 00:02:32,666
This has been a hallmark


39
00:02:32,916 --> 00:02:34,726
since the original
iPhone was introduced


40
00:02:35,356 --> 00:02:36,666
with its multi-touch display.


41
00:02:37,446 --> 00:02:41,496
But 3D Touch extends this
even further, allowing users


42
00:02:41,566 --> 00:02:45,276
to connect even more closely
to their content on the screen.


43
00:02:45,826 --> 00:02:50,386
Let's take a look at some of
the ways that 3D Touch shows


44
00:02:50,386 --> 00:02:53,636
up across the operating system,
starting with the Home screen.


45
00:02:54,666 --> 00:02:56,256
When you press on an app icon,


46
00:02:56,806 --> 00:02:59,336
we reveal the Home
Screen Quick Actions.


47
00:03:00,406 --> 00:03:03,616
As you can see here with Camera,
these let you jump straight


48
00:03:03,616 --> 00:03:06,046
into some of the key
activities in each app


49
00:03:06,486 --> 00:03:07,496
that you come to perform.


50
00:03:08,076 --> 00:03:10,696
For example, taking a
selfie in the camera app,


51
00:03:11,106 --> 00:03:14,416
using the front facing camera,
or taking a regular photo


52
00:03:14,416 --> 00:03:15,626
with the rear facing camera,


53
00:03:16,046 --> 00:03:18,376
recording video or
a Slow-mo video.


54
00:03:19,646 --> 00:03:24,986
Now, new in iOS X, if your app
provides a widget it will also


55
00:03:24,986 --> 00:03:27,856
show right alongside the
Home Screen Quick Actions


56
00:03:28,146 --> 00:03:30,396
when the user 3D
touches on your app icon.


57
00:03:30,986 --> 00:03:34,066
And something else to note
is that while you're pressing


58
00:03:34,066 --> 00:03:35,436
on each of this app icons,


59
00:03:35,746 --> 00:03:38,826
the device is playing haptic
feedback to let you know


60
00:03:38,826 --> 00:03:40,126
when you've reached
the threshold


61
00:03:40,416 --> 00:03:42,416
where the quick actions
will spring open.


62
00:03:42,986 --> 00:03:47,996
Now let's move into
messages, to take a look


63
00:03:48,366 --> 00:03:50,746
at an example of Peek and Pop.


64
00:03:52,196 --> 00:03:55,126
Here in messages, you can
see I've received a photo


65
00:03:55,276 --> 00:03:56,736
in a conversation with a friend.


66
00:03:57,656 --> 00:04:00,566
If I start to lightly apply
pressure to that photo,


67
00:04:01,066 --> 00:04:05,406
I can peek into it to
reveal a nice large preview


68
00:04:05,406 --> 00:04:06,196
of that content.


69
00:04:07,306 --> 00:04:10,866
Then if I continue to apply
pressure, I'll pop straight


70
00:04:10,866 --> 00:04:14,516
to that photo, which takes it
full screen and lets me interact


71
00:04:14,516 --> 00:04:16,656
with it, just like
I had tapped on it.


72
00:04:16,966 --> 00:04:20,466
Peek and Pop is really
nice because it allows you


73
00:04:20,466 --> 00:04:23,646
to preview content and
perhaps change your mind


74
00:04:24,066 --> 00:04:26,386
and release your touch
without actually having


75
00:04:26,386 --> 00:04:30,056
to go tap the back
button and navigate back.


76
00:04:30,056 --> 00:04:31,746
Now, one thing to
note here is that,


77
00:04:31,746 --> 00:04:35,476
as we're crossing these two
different thresholds for Peek


78
00:04:35,476 --> 00:04:39,306
and Pop, the device, again,
is playing haptic feedback,


79
00:04:39,746 --> 00:04:42,636
to let you know when you've
reached these two thresholds.


80
00:04:43,096 --> 00:04:45,606
That's Peek and Pop.


81
00:04:46,496 --> 00:04:48,736
Let's take a look now at Mail,


82
00:04:48,796 --> 00:04:53,876
at some of the interesting
pieces of the same interaction.


83
00:04:54,306 --> 00:04:57,056
I want you to notice
how fully interactive


84
00:04:57,226 --> 00:05:00,106
and interruptible 3D Touch is.


85
00:05:00,606 --> 00:05:02,636
As I modulate the
pressure of the touch


86
00:05:02,636 --> 00:05:04,496
on the screen, as
you'll see here.


87
00:05:05,196 --> 00:05:08,616
We're using blur and scale
effects to let you know


88
00:05:08,616 --> 00:05:10,916
that you can continue to
interact with this content.


89
00:05:11,416 --> 00:05:12,786
And note how fluid


90
00:05:12,786 --> 00:05:14,976
and responsive the
entire interaction is.


91
00:05:15,476 --> 00:05:17,226
This is one of the
hallmark features


92
00:05:17,566 --> 00:05:20,976
that differentiates 3D
Touch from traditional touch


93
00:05:20,976 --> 00:05:22,596
and gesture based interactions.


94
00:05:23,796 --> 00:05:25,366
So you might be wondering,


95
00:05:26,266 --> 00:05:28,646
why should I support 3D
Touch in my application?


96
00:05:29,266 --> 00:05:32,596
Well one of the best
uses for 3D Touch is


97
00:05:32,596 --> 00:05:36,426
that it can quickly accelerate
access to existing features


98
00:05:36,426 --> 00:05:37,906
that your app already provides.


99
00:05:38,526 --> 00:05:41,466
You saw a great example of this
with Home Screen Quick Actions,


100
00:05:41,876 --> 00:05:44,226
letting users go straight
into those screens


101
00:05:44,226 --> 00:05:48,216
within your app just like deep
links and let them get straight


102
00:05:48,216 --> 00:05:50,056
into the action that
they're trying to perform.


103
00:05:51,366 --> 00:05:54,526
But another really great
thing about 3D Touch is


104
00:05:54,526 --> 00:05:58,436
that it makes possible, brand
new immersive interactions


105
00:05:58,436 --> 00:06:00,016
that were never before possible.


106
00:06:00,886 --> 00:06:04,176
We're going to show you a
great example of this later on,


107
00:06:04,536 --> 00:06:07,896
when we go through this new
UIPreviewInteraction API.


108
00:06:09,676 --> 00:06:14,396
Finally, we've adopted 3D Touch
throughout the system in iOS X.


109
00:06:14,986 --> 00:06:18,606
And so users expect all of your
apps to support it as well.


110
00:06:23,016 --> 00:06:24,716
Let's go ahead and talk


111
00:06:24,716 --> 00:06:27,016
about how you can start
adopting 3D Touch today


112
00:06:27,096 --> 00:06:28,656
with Home Screen Quick Actions.


113
00:06:28,986 --> 00:06:33,406
And to do this, I'd like to
introduce you to AppChat.


114
00:06:34,426 --> 00:06:36,796
AppChat is a sample app
that we've been working


115
00:06:36,796 --> 00:06:39,376
on to highlight some
of the great features


116
00:06:39,376 --> 00:06:41,726
of 3D Touch in our application.


117
00:06:42,536 --> 00:06:45,276
Here you can see that 3D Touch,


118
00:06:45,406 --> 00:06:48,596
sorry AppChat is an [inaudible]
messaging application.


119
00:06:49,166 --> 00:06:52,316
You can take a photo and send
it to your friends as a chat


120
00:06:53,036 --> 00:06:54,886
and here you can see
I've received a list


121
00:06:54,886 --> 00:06:56,426
of different chats
from my friends.


122
00:06:56,426 --> 00:07:00,836
I can tap on anyone of them, and
view those chats full screen.


123
00:07:03,756 --> 00:07:05,086
Just like that.


124
00:07:05,556 --> 00:07:08,476
AppChat is a very
familiar UIKit application.


125
00:07:09,296 --> 00:07:12,146
And we'll show you the different
ways that we've added support


126
00:07:12,146 --> 00:07:16,586
for 3D Touch to it, starting
with Home Screen Quick Actions.


127
00:07:17,276 --> 00:07:19,366
So when you press on
the AppChat app icon,


128
00:07:19,836 --> 00:07:22,056
we'll reveal some Home Screen
Quick Actions for AppChat.


129
00:07:23,186 --> 00:07:25,406
You'll note, I can choose
to create a new chat


130
00:07:25,406 --> 00:07:27,406
that will open the Camera
so I can take a photo


131
00:07:27,406 --> 00:07:29,456
and then choose one of
my friends to send it to.


132
00:07:30,426 --> 00:07:32,296
But alternatively,
I can choose one


133
00:07:32,296 --> 00:07:36,306
of these bottom 3 quick
actions which are quick actions


134
00:07:36,306 --> 00:07:38,766
that will let me send
a chat directly to one


135
00:07:38,766 --> 00:07:40,186
of my top three friends.


136
00:07:40,506 --> 00:07:43,006
The friends that I communicate
with most in AppChat.


137
00:07:43,546 --> 00:07:46,726
So there are actually
two different types


138
00:07:46,836 --> 00:07:48,166
of Home Screen Quick Actions.


139
00:07:48,646 --> 00:07:49,596
Let's talk about them now.


140
00:07:50,766 --> 00:07:56,246
The first type is Static Quick
Cctions, these are specified


141
00:07:56,246 --> 00:07:58,026
by your app at build time.


142
00:07:58,836 --> 00:08:00,606
And they're great
for fixed actions


143
00:08:00,606 --> 00:08:02,356
that are always available
in your app.


144
00:08:02,936 --> 00:08:07,486
For example with AppChat, we
have the New Chat Quick Action.


145
00:08:07,796 --> 00:08:09,296
I can always create a new chat


146
00:08:09,296 --> 00:08:11,026
and then send it to
one of my friends.


147
00:08:12,166 --> 00:08:15,046
On the other hand, we have
Dynamic Quick Actions.


148
00:08:17,036 --> 00:08:19,806
Dynamic Quick Actions are also
great because they allow you


149
00:08:19,806 --> 00:08:21,866
to customize and
tailor the quick actions


150
00:08:21,866 --> 00:08:22,686
that are shown to the user.


151
00:08:22,686 --> 00:08:26,106
But let's take a quick look
at Static Quick Actions first.


152
00:08:26,986 --> 00:08:30,966
Static Quick Actions are defined
in your apps info.plist file.


153
00:08:32,756 --> 00:08:34,645
As such they're available
as soon


154
00:08:34,645 --> 00:08:37,566
as your app has been
installed on a user's device.


155
00:08:38,775 --> 00:08:40,366
Now let's take a
look at an example


156
00:08:40,366 --> 00:08:43,135
of how we add a Static
Quick Action to AppChat.


157
00:08:44,066 --> 00:08:47,426
Here's our info.plist file, you
can see with just a few lines


158
00:08:47,426 --> 00:08:49,786
of code, that we
are able to create


159
00:08:49,936 --> 00:08:51,776
and add this New
Chat Quick Action.


160
00:08:52,456 --> 00:08:53,846
I'd like to call out
a few things here.


161
00:08:53,846 --> 00:08:57,376
You'll notice we're specifying
a type, this is a string


162
00:08:57,376 --> 00:09:00,576
that your application
defines which you'll use later


163
00:09:00,576 --> 00:09:03,006
on when the user selects
one of these quick actions


164
00:09:03,396 --> 00:09:05,696
to know how to handle it.


165
00:09:05,856 --> 00:09:08,786
We also provide a title,
New Chat in this situation.


166
00:09:09,596 --> 00:09:14,356
And, also an icon type which
is a constant from a list


167
00:09:14,356 --> 00:09:16,836
of system provided icons
that you can display.


168
00:09:17,066 --> 00:09:19,556
So in this case that's how
we get that nice chat bubble.


169
00:09:20,156 --> 00:09:23,286
One thing to keep in
mind is that you'll want


170
00:09:23,286 --> 00:09:25,506
to localize any user
facing strings


171
00:09:25,746 --> 00:09:29,026
in your info plist.strings
file as a best practice.


172
00:09:30,736 --> 00:09:32,926
That's Static Quick
Actions, let's go take a look


173
00:09:32,926 --> 00:09:35,526
at Dynamic Quick Actions
which I eluded to earlier.


174
00:09:36,766 --> 00:09:40,476
So these are defined by your
app at runtime and provided,


175
00:09:40,776 --> 00:09:43,366
from your app to the
system at that point.


176
00:09:44,036 --> 00:09:47,696
As a result though, they're
only available once the user has


177
00:09:47,696 --> 00:09:49,656
launched your app for
the very first time.


178
00:09:51,436 --> 00:09:53,896
Now, Dynamic Quick
Actions are shown


179
00:09:53,956 --> 00:09:57,246
after any Static Quick
Actions, space permitting.


180
00:09:57,746 --> 00:09:59,496
You'll only get to
display a total


181
00:09:59,496 --> 00:10:01,746
of four quick actions
on the home screen.


182
00:10:02,216 --> 00:10:04,206
So you'll want to
make sure to save room


183
00:10:04,206 --> 00:10:08,746
for any Dynamic Quick Actions
if you intend to provide them.


184
00:10:10,046 --> 00:10:12,986
You can also include an
optional system icon,


185
00:10:13,776 --> 00:10:17,156
a custom icon using a template
image from your application.


186
00:10:18,056 --> 00:10:21,906
Or you can even create an icon
using an address book contact


187
00:10:22,126 --> 00:10:23,226
from the user's address book.


188
00:10:24,086 --> 00:10:26,536
This is what AppChat
is doing to pull


189
00:10:26,536 --> 00:10:29,326
in those nice profile
photos, right next to each


190
00:10:29,326 --> 00:10:31,466
of those three Dynamic
Quick Actions


191
00:10:31,616 --> 00:10:33,056
for the top three friends.


192
00:10:33,926 --> 00:10:35,346
Let's walk through
some of the code


193
00:10:35,656 --> 00:10:38,076
to see how we can
implement this.


194
00:10:39,416 --> 00:10:43,236
Well for this example we'll
start by looking for a contact


195
00:10:43,236 --> 00:10:45,446
that matches our
friend Lexi Torres.


196
00:10:45,956 --> 00:10:50,876
The first thing we want to make
sure to do is request permission


197
00:10:51,136 --> 00:10:53,026
from the user to
access their contacts.


198
00:10:53,466 --> 00:10:56,266
Assuming we have that
permission, we can go forward,


199
00:10:56,976 --> 00:11:00,886
and actually query their
contacts for a contact


200
00:11:01,136 --> 00:11:03,966
that matches this friend's
name that we're interested in.


201
00:11:05,016 --> 00:11:09,706
If we get at least one match,
we can then pass that contact


202
00:11:10,236 --> 00:11:13,486
to our UIApplicationShortcutIcon
initializer.


203
00:11:14,256 --> 00:11:17,376
That will go ahead and create
the icon that we'll use


204
00:11:17,376 --> 00:11:18,316
with this quick action.


205
00:11:19,006 --> 00:11:21,616
But of course we may not
have received access,


206
00:11:22,016 --> 00:11:24,106
permission to access
the user's contacts,


207
00:11:24,766 --> 00:11:27,166
or we may not have found
a match for this friend.


208
00:11:27,506 --> 00:11:29,026
So we'll want to
have a fall-back,


209
00:11:29,256 --> 00:11:32,336
in this case we'll use
the system's message style


210
00:11:33,046 --> 00:11:34,766
to display as the icon.


211
00:11:35,706 --> 00:11:38,016
Now that we have
the icon, we can go


212
00:11:38,016 --> 00:11:40,256
and create our actual
quick action.


213
00:11:40,846 --> 00:11:44,156
In this case we'll need to
specify a type, very similar


214
00:11:44,156 --> 00:11:45,976
to how you saw with the
static quick action.


215
00:11:46,966 --> 00:11:49,796
As well as a subtitle,
we'll use send a chat here,


216
00:11:49,906 --> 00:11:51,826
and then we'll pass all of these


217
00:11:51,826 --> 00:11:54,326
over to our [inaudible]
ApplicationshortcutItem


218
00:11:54,326 --> 00:11:57,766
initializer to create our
first Dynamic Quick Action.


219
00:11:59,096 --> 00:12:03,236
From here, we can continue to do
this as many times as we want,


220
00:12:03,856 --> 00:12:05,636
to create any additional
quick actions.


221
00:12:05,866 --> 00:12:08,296
And when we're done,
we'll package them all up,


222
00:12:08,536 --> 00:12:11,146
in a nice array,
and hand that over


223
00:12:11,736 --> 00:12:14,436
to UIApplicationsShortcutItems
property.


224
00:12:15,186 --> 00:12:16,176
This has the effect


225
00:12:16,176 --> 00:12:19,676
of registering these Dynamic
Quick Actions with the system,


226
00:12:20,026 --> 00:12:21,746
so that they can display
on the Home screen.


227
00:12:23,006 --> 00:12:24,156
One thing to keep in mind is


228
00:12:24,156 --> 00:12:28,156
that this shortcutItems property
only displays your apps,


229
00:12:28,516 --> 00:12:31,266
only contains your app's
dynamic shortcut items


230
00:12:31,266 --> 00:12:32,516
or Dynamic Quick Actions.


231
00:12:32,896 --> 00:12:34,926
The Static Quick Actions
are only specified


232
00:12:34,926 --> 00:12:37,676
in your info.plist and won't
be contained in that array.


233
00:12:38,956 --> 00:12:40,686
Let's take a look at how all


234
00:12:40,686 --> 00:12:42,626
of this comes together
back on the home screen.


235
00:12:43,806 --> 00:12:46,906
Fantastic, with just those few
lines of code, we were able


236
00:12:46,906 --> 00:12:49,496
to create one Static
Quick Action, New Chat,


237
00:12:49,916 --> 00:12:52,686
as well as three different
Dynamic Quick Actions.


238
00:12:52,686 --> 00:12:54,796
One for each of our
top three friends.


239
00:12:56,086 --> 00:12:57,976
There's now one more thing
that we need to do though,


240
00:12:58,486 --> 00:13:00,236
that's of course to
handle these quick actions


241
00:13:00,236 --> 00:13:01,306
when the user selects one.


242
00:13:02,106 --> 00:13:04,866
There are two different
scenarios to keep in mind here.


243
00:13:05,746 --> 00:13:08,856
The first one is if your
app is already running


244
00:13:08,856 --> 00:13:11,366
and is being activated,
meaning your app is


245
00:13:11,366 --> 00:13:13,456
in the inactive or
suspended state.


246
00:13:14,796 --> 00:13:17,366
In this case we'll
use the callback


247
00:13:17,366 --> 00:13:18,796
on UIApplicationDelegate,


248
00:13:18,796 --> 00:13:21,736
application
performActionForShortcutItem,


249
00:13:21,796 --> 00:13:22,776
completionHandler.


250
00:13:24,276 --> 00:13:27,036
In here, we'll use the
shortcutItem that's passed


251
00:13:27,036 --> 00:13:29,356
in to actually handle
the quick action.


252
00:13:29,756 --> 00:13:32,016
Now this could mean many
things depending on your app


253
00:13:32,016 --> 00:13:33,356
and which quick action you have,


254
00:13:33,706 --> 00:13:36,356
but generally you're
probably moving the user


255
00:13:36,406 --> 00:13:38,556
to a particular screen
within your application.


256
00:13:40,096 --> 00:13:43,516
If you handle the quick
action, you should make sure


257
00:13:43,516 --> 00:13:46,286
to call the completion
handler, passing a Bool


258
00:13:46,286 --> 00:13:50,296
that indicates whether or
not you actually handled it.


259
00:13:50,486 --> 00:13:51,726
Great, that's the
first scenario.


260
00:13:52,366 --> 00:13:54,716
The second scenario
for us to consider is


261
00:13:54,716 --> 00:13:58,306
if the app was actually launched
as a result of a quick action.


262
00:13:58,656 --> 00:14:00,806
So in this case our
app was not running.


263
00:14:01,976 --> 00:14:04,926
Here we'll use the
familiar application


264
00:14:04,926 --> 00:14:07,346
didFinishLaunchingWithOptions
callback,


265
00:14:07,346 --> 00:14:09,226
on UIApplicationDelegate.


266
00:14:09,876 --> 00:14:13,506
Inside, we'll access
the shortcutItem key


267
00:14:13,866 --> 00:14:16,906
of the launchOptions dictionary
that's passed in to see


268
00:14:16,906 --> 00:14:19,056
if our app was launched
via a quick action.


269
00:14:20,056 --> 00:14:23,466
If it was, we'll go ahead
and handle the quick action,


270
00:14:23,716 --> 00:14:25,036
just as we would
have done before.


271
00:14:25,566 --> 00:14:29,176
And then we'll make sure to
return false from this method,


272
00:14:29,646 --> 00:14:32,696
that tells the system we did
actually handle a quick action


273
00:14:33,066 --> 00:14:35,586
here, and it will prevent
it from calling the method


274
00:14:35,586 --> 00:14:36,626
on the previous slide.


275
00:14:37,946 --> 00:14:41,446
That's pretty much all there is
to it in terms of both creating


276
00:14:41,806 --> 00:14:45,196
and handling both dynamic
and static shortcutItems.


277
00:14:45,196 --> 00:14:48,446
But let's review some of the
best practices to keep in mind.


278
00:14:49,456 --> 00:14:52,966
First, every app should
provide quick actions,


279
00:14:53,306 --> 00:14:55,126
as you see here they're
really easy to create


280
00:14:55,126 --> 00:14:58,536
and they provide great
value, showing up right


281
00:14:58,536 --> 00:15:00,456
on the Home screen,
letting users go straight


282
00:15:00,456 --> 00:15:02,706
to those key activities
that your app provides.


283
00:15:04,596 --> 00:15:07,646
As such, you'll want to focus
on providing quick access


284
00:15:07,756 --> 00:15:10,456
to the highest value tasks
that your app offers.


285
00:15:10,666 --> 00:15:13,176
Remember you only
have 4 different slots


286
00:15:13,566 --> 00:15:14,886
to display quick actions.


287
00:15:15,336 --> 00:15:17,676
So decide wisely
which ones you choose.


288
00:15:18,636 --> 00:15:21,456
To help you with
that, you might want


289
00:15:21,456 --> 00:15:24,636
to use Dynamic Quick
Actions, but it's important


290
00:15:24,706 --> 00:15:26,756
to keep your quick
actions predictable.


291
00:15:28,046 --> 00:15:30,716
Users are going to be quickly
opening your Home Screen Quick


292
00:15:30,716 --> 00:15:31,886
Actions and choosing one.


293
00:15:32,146 --> 00:15:34,466
And if you're doing things
like changing up the order,


294
00:15:34,936 --> 00:15:36,916
that'll probably
confuse your users


295
00:15:37,316 --> 00:15:39,626
and they'll find a
frustrating experience.


296
00:15:40,956 --> 00:15:44,256
One interesting thing to
remember here is that,


297
00:15:44,776 --> 00:15:47,686
you should be prepared to
handle Dynamic Quick Actions


298
00:15:47,906 --> 00:15:50,166
from a previous version
of your application.


299
00:15:51,016 --> 00:15:52,646
The reason is, if you remember,


300
00:15:52,806 --> 00:15:56,466
Dynamic Quick Actions don't
take effect until your app runs


301
00:15:56,466 --> 00:15:58,736
and has the ability to
provide them to the system.


302
00:15:59,486 --> 00:16:01,956
So if your app was
just recently updated,


303
00:16:01,956 --> 00:16:05,006
it will still be showing
the Dynamic Quick Actions


304
00:16:05,186 --> 00:16:06,456
from the previous version.


305
00:16:07,446 --> 00:16:11,176
As a result, if the semantics of
your quick actions have changed,


306
00:16:11,546 --> 00:16:14,486
it's a good idea to keep
this in mind when handling it


307
00:16:14,716 --> 00:16:16,346
and to do this you might want


308
00:16:16,346 --> 00:16:18,566
to consider including
your app's version number


309
00:16:18,916 --> 00:16:22,396
in the info plist, I'm sorry,
in the user info dictionary


310
00:16:22,396 --> 00:16:25,046
that you can include with
the Dynamic Quick Actions.


311
00:16:26,416 --> 00:16:28,286
Finally, try not


312
00:16:28,286 --> 00:16:31,926
to add functionality that's only
accessible using quick actions.


313
00:16:32,096 --> 00:16:35,046
And remember, not all of
our devices support 3D Touch


314
00:16:35,216 --> 00:16:37,726
and even on ones that
do, users have the option


315
00:16:37,726 --> 00:16:38,936
to disable 3D Touch


316
00:16:38,976 --> 00:16:41,156
in the accessibility
settings of the system.


317
00:16:42,336 --> 00:16:46,036
With that, I'd like to invite
Peter on stage to tell you all


318
00:16:46,036 --> 00:16:48,236
about Peek and Pop, Peter.


319
00:16:49,516 --> 00:16:52,676
[ Applause ]


320
00:16:53,176 --> 00:16:55,066
Go for it.


321
00:16:55,066 --> 00:16:55,856
>> Thank you, Tyler.


322
00:16:57,036 --> 00:17:01,396
I'm really excited to talk to
you today about Peek and Pop.


323
00:17:02,746 --> 00:17:07,736
As Tyler showed you earlier,
Peek and Pop allows people


324
00:17:07,965 --> 00:17:12,226
to quickly preview and navigate
to content inside your app.


325
00:17:12,346 --> 00:17:15,046
And I can speak from
my personal experience,


326
00:17:15,165 --> 00:17:17,665
that it changes the
way you use the phone.


327
00:17:18,776 --> 00:17:23,276
We're going to talk through
Peek and Pop with the sample app


328
00:17:23,356 --> 00:17:26,965
that Tyler showed
you earlier, AppChat.


329
00:17:27,616 --> 00:17:30,906
As Tyler showed you,
in the last section,


330
00:17:31,556 --> 00:17:34,116
AppChat is a standard UIKit app.


331
00:17:34,986 --> 00:17:37,736
So tapping on one of the
messages, in the table,


332
00:17:38,976 --> 00:17:42,946
brings me to the message so I
can check it out full screen.


333
00:17:44,066 --> 00:17:47,346
A general rule of thumb
for adding Peek and Pop


334
00:17:47,346 --> 00:17:52,546
to your app is that if user
accessible content can be tapped


335
00:17:52,866 --> 00:17:57,816
to navigate to it, it should
also support Peek and Pop.


336
00:17:58,316 --> 00:18:00,806
So let's apply that
rule to AppChat.


337
00:18:01,976 --> 00:18:05,926
That means that when I apply
pressure to one of the cells


338
00:18:05,926 --> 00:18:09,846
in this table, we
should get a quick Peek.


339
00:18:10,966 --> 00:18:14,676
In our API, we refer
to this as preview,


340
00:18:14,906 --> 00:18:17,556
because we're getting a
preview of the View Controller


341
00:18:17,556 --> 00:18:18,926
that we could navigate to.


342
00:18:19,946 --> 00:18:21,996
Now if we continue
to apply pressure,


343
00:18:23,336 --> 00:18:27,616
that'll Pop full screen,
ready for us to interact with.


344
00:18:28,496 --> 00:18:33,766
In our API, we refer to this as
commit, because we've committed


345
00:18:34,056 --> 00:18:36,046
to navigating to
this View Controller.


346
00:18:37,396 --> 00:18:39,936
Cool, so let's go
through the components


347
00:18:40,126 --> 00:18:41,816
of a Peek and Pop interaction.


348
00:18:43,336 --> 00:18:46,976
First and foremost, we have
our registered View Controller,


349
00:18:48,036 --> 00:18:49,236
this is the View Controller


350
00:18:49,236 --> 00:18:51,776
that contains the user
interface elements


351
00:18:52,096 --> 00:18:53,556
that we'd like to preview.


352
00:18:54,296 --> 00:18:57,636
In our case, these are
our message table cells.


353
00:18:59,056 --> 00:19:03,476
Each registered View Controller
has a whole series of sources,


354
00:19:04,256 --> 00:19:06,736
these are individual
interface elements


355
00:19:06,876 --> 00:19:09,506
that each have their own
preview View Controller.


356
00:19:10,356 --> 00:19:15,156
In AppChat, this is a natural
fit for our chat table cells.


357
00:19:16,656 --> 00:19:20,066
Finally, we have the
previewed View Controller,


358
00:19:21,486 --> 00:19:24,956
this is the View Controller that
will show inside of the preview


359
00:19:25,356 --> 00:19:28,446
which represents the element
that we tapped in the table.


360
00:19:29,506 --> 00:19:32,366
Usually this is the same
element that we'd show


361
00:19:32,496 --> 00:19:34,026
after tapping on that content.


362
00:19:34,616 --> 00:19:38,606
So tapping on it, and previewing
on it, by applying pressure,


363
00:19:39,316 --> 00:19:40,706
shows us the same content.


364
00:19:41,896 --> 00:19:46,026
So with that, I'd like to
go step by step with what,


365
00:19:46,026 --> 00:19:48,506
how we adding Peek
and Pop to AppChat


366
00:19:48,936 --> 00:19:51,166
which will closely
mirror how you'll add Peek


367
00:19:51,166 --> 00:19:52,926
and Pop to your app.


368
00:20:03,056 --> 00:20:06,226
So we're going to start off in
our registered View Controller.


369
00:20:06,646 --> 00:20:09,206
Remember this is that
table View Controller


370
00:20:09,376 --> 00:20:12,086
which contains our
presentation's source view.


371
00:20:12,606 --> 00:20:15,176
We're going to conform


372
00:20:15,576 --> 00:20:18,046
to the
UIViewControllerPreviewing


373
00:20:18,046 --> 00:20:19,756
Delegate protocol.


374
00:20:20,556 --> 00:20:22,296
This delegate will
be called back


375
00:20:22,296 --> 00:20:26,126
at various stages during
the Peek and Pop interaction


376
00:20:26,506 --> 00:20:28,696
to provide information
to the system.


377
00:20:29,556 --> 00:20:31,226
It's really easy to implement.


378
00:20:32,646 --> 00:20:35,986
Next, we'll want to make sure
we registerForPreviewing.


379
00:20:36,746 --> 00:20:40,286
A great time to do
this is in viewDidLoad.


380
00:20:41,196 --> 00:20:43,156
We're going to
registerForPreviewing


381
00:20:43,576 --> 00:20:45,236
with ourself as the delegate,


382
00:20:45,886 --> 00:20:48,286
passing our tableView
as the sourceView.


383
00:20:48,986 --> 00:20:51,726
Because the tableView
is the common ancestor


384
00:20:51,956 --> 00:20:57,506
for all the interfaced elements
that we'd like to preview.


385
00:20:57,586 --> 00:21:01,936
Now let's go ahead and implement
the two required delegate


386
00:21:01,936 --> 00:21:04,606
methods in the previewing
delegate protocol.


387
00:21:05,436 --> 00:21:13,136
The first is for providing
a preview ViewController.


388
00:21:14,496 --> 00:21:16,256
This will provide
a ViewController


389
00:21:16,476 --> 00:21:20,336
for a particular location
inside the sourceView.


390
00:21:22,796 --> 00:21:25,286
The method is called
previewingContext


391
00:21:25,546 --> 00:21:29,416
ViewControllerForLocation,
and it's easy to implement.


392
00:21:30,946 --> 00:21:34,266
First, we're going to find the
indexPath representing the point


393
00:21:34,266 --> 00:21:36,866
that we were passed in
by the delegate method.


394
00:21:37,856 --> 00:21:40,466
We can do this by hit
testing the tableView.


395
00:21:42,556 --> 00:21:45,466
Next, we're going to
create a ViewController


396
00:21:45,996 --> 00:21:49,826
with the model object
represented by the indexPath,


397
00:21:50,876 --> 00:21:53,196
this is logic that you
probably already have


398
00:21:53,196 --> 00:21:55,866
and did select row at indexPath.


399
00:21:57,176 --> 00:21:59,806
Next, and this is
really important,


400
00:22:00,226 --> 00:22:01,876
we're going to set
the sourceRect


401
00:22:02,096 --> 00:22:03,566
of the previewingContext.


402
00:22:04,296 --> 00:22:07,706
Remember, the sourceView
is the entire tableView,


403
00:22:08,256 --> 00:22:11,966
and we want to make sure to
lift off just the cell off the


404
00:22:11,966 --> 00:22:15,796
screen, in that beautiful
blur and scale effect


405
00:22:15,796 --> 00:22:16,756
that Tyler showed you.


406
00:22:17,616 --> 00:22:21,216
By setting the sourceRect the
system will appropriately cut


407
00:22:21,216 --> 00:22:23,586
out that element and
lift it off the screen,


408
00:22:23,806 --> 00:22:24,726
it looks really great.


409
00:22:26,096 --> 00:22:29,156
Finally, we'll return
the ViewController back


410
00:22:29,156 --> 00:22:29,806
to the system.


411
00:22:31,126 --> 00:22:34,366
Now there are two
really important parts


412
00:22:34,526 --> 00:22:37,376
about this delegate method that
I'd like to highlight for you.


413
00:22:37,936 --> 00:22:43,946
The first is that this method
will be called every time we


414
00:22:43,946 --> 00:22:46,226
think we're going to
initiate a preview.


415
00:22:47,306 --> 00:22:51,066
As Tyler said before, we want
to keep the interaction fast


416
00:22:51,066 --> 00:22:53,996
and fluid, so we're going
to call it opportunistically


417
00:22:54,176 --> 00:22:55,726
to make sure everything's ready.


418
00:22:57,306 --> 00:23:01,346
As a result, you need to make
sure to not take too much time


419
00:23:01,726 --> 00:23:04,156
when returning a
ViewController from this method.


420
00:23:05,156 --> 00:23:07,476
If there's asynchronous
work that you can do


421
00:23:07,586 --> 00:23:10,896
in the background, before
preparing this ViewController,


422
00:23:11,346 --> 00:23:14,306
do that there, and don't
block the main queue.


423
00:23:15,276 --> 00:23:18,716
This will keep things feeling
fast, fluid, and responsive


424
00:23:19,156 --> 00:23:20,506
as we apply pressure


425
00:23:20,876 --> 00:23:23,016
to interface elements
inside your app.


426
00:23:24,316 --> 00:23:27,196
The second important piece
of advice I have for you


427
00:23:27,396 --> 00:23:29,686
about this method,
is its return type.


428
00:23:30,526 --> 00:23:35,176
UIViewControllerOptional, that
means we could return nil.


429
00:23:35,926 --> 00:23:37,906
If you return nil
from this method,


430
00:23:38,306 --> 00:23:40,616
we won't lift any
cells off the screen,


431
00:23:40,826 --> 00:23:43,716
we won't do any blurring, we
won't play any haptic feedback,


432
00:23:43,956 --> 00:23:45,336
we won't do a preview.


433
00:23:46,596 --> 00:23:48,936
But you should make
sure to only return nil


434
00:23:48,936 --> 00:23:52,246
if there truly is nothing
to preview at that location.


435
00:23:53,796 --> 00:23:56,286
You should make sure that
similar looking content


436
00:23:56,286 --> 00:23:59,136
in your app is previewable
in a similar way,


437
00:23:59,876 --> 00:24:02,346
this way people won't be
squeezing their phones trying


438
00:24:02,346 --> 00:24:05,256
to get a preview, because
similar looking stuff will be


439
00:24:05,256 --> 00:24:06,746
previewable similarly.


440
00:24:07,856 --> 00:24:09,986
Great, so with that,


441
00:24:10,386 --> 00:24:14,396
we've implemented the preview
part of this interaction.


442
00:24:23,136 --> 00:24:24,126
But we're not done yet.


443
00:24:24,556 --> 00:24:27,096
We need to implement the
second required method


444
00:24:27,256 --> 00:24:30,516
on this protocol, which is
for providing the commit.


445
00:24:31,706 --> 00:24:33,726
This one's even easier
to implement,


446
00:24:34,906 --> 00:24:38,246
it's called previewingContext
commitViewController.


447
00:24:39,366 --> 00:24:42,166
This will be called by the
system when it's time to commit,


448
00:24:42,666 --> 00:24:44,356
we've crossed that
force threshold,


449
00:24:44,396 --> 00:24:46,126
we're going to place
some haptic feedback,


450
00:24:46,636 --> 00:24:49,086
so let's get the
ViewController on screen.


451
00:24:51,196 --> 00:24:54,746
Here, we're going to do whatever
it is we need to do to get


452
00:24:54,746 --> 00:24:56,186
that ViewController on screen.


453
00:24:56,916 --> 00:25:00,926
AppChat is a simple UIKit app
that uses navigation controller,


454
00:25:01,446 --> 00:25:03,956
so we're just going
to call show.


455
00:25:05,016 --> 00:25:06,796
This will have the
default effect


456
00:25:06,966 --> 00:25:09,336
of pushing the ViewController
onto the nav stack.


457
00:25:09,996 --> 00:25:12,166
But there's something really
cool about this method.


458
00:25:13,116 --> 00:25:16,256
UIKit has made it so that
you can perform any type


459
00:25:16,256 --> 00:25:20,476
of ViewController transition in
this callback, push something


460
00:25:20,476 --> 00:25:23,676
onto the navigation stack,
do a custom presentation,


461
00:25:24,116 --> 00:25:27,036
even move the ViewController
into a custom container.


462
00:25:27,966 --> 00:25:31,386
Do whatever it is you need
to do inside your app to get


463
00:25:31,386 --> 00:25:32,826
that ViewController on screen,


464
00:25:33,226 --> 00:25:36,036
and UIKit will handle the
animation on your behalf.


465
00:25:37,116 --> 00:25:40,656
So great, we've implemented
commit ViewController,


466
00:25:41,416 --> 00:25:46,986
and now we've got that awesome
commit, which will allow us


467
00:25:46,986 --> 00:25:48,506
to navigate full screen


468
00:25:48,676 --> 00:25:50,836
and begin interacting
with that content.


469
00:25:52,636 --> 00:25:55,586
Now we've added Peek
and Pop to our app,


470
00:25:56,026 --> 00:25:58,066
but we can do a little
bit extra work


471
00:25:58,206 --> 00:26:02,766
to take the experience,
to the next level.


472
00:26:05,636 --> 00:26:09,316
Another aspect of Peek and Pop
that's really cool is preview


473
00:26:09,316 --> 00:26:10,156
quick actions.


474
00:26:10,686 --> 00:26:14,066
And by adding these to your
app, you can allow users


475
00:26:14,066 --> 00:26:16,416
to access the most
common actions


476
00:26:16,646 --> 00:26:18,646
with the content shown
inside the preview.


477
00:26:19,416 --> 00:26:21,746
This is really powerful
and allows people


478
00:26:21,746 --> 00:26:24,406
to use your apps even
faster than before.


479
00:26:25,906 --> 00:26:28,706
If we go back to our
familiar architecture diagram,


480
00:26:29,476 --> 00:26:32,336
we'll see that these preview
quick actions are owned


481
00:26:32,596 --> 00:26:34,306
by the previewed ViewController.


482
00:26:35,506 --> 00:26:38,086
This is the ViewController
that's capable of responding


483
00:26:38,086 --> 00:26:42,136
to these actions because these
take action on the content shown


484
00:26:42,136 --> 00:26:43,116
in that ViewController.


485
00:26:44,206 --> 00:26:45,426
These are easy to add.


486
00:26:46,326 --> 00:26:50,246
All we have to do is override
the preview action items


487
00:26:50,246 --> 00:26:52,136
function, in UIViewController.


488
00:26:53,146 --> 00:26:56,366
This returns an array
of UIPreviewActionItems.


489
00:26:56,876 --> 00:27:02,886
We can create UIPreviewActions
using API you're already


490
00:27:02,946 --> 00:27:04,076
probably familiar with.


491
00:27:04,806 --> 00:27:09,296
It resembles UIAlertAction
and UITableViewRowAction.


492
00:27:10,186 --> 00:27:15,796
You just pass a title, a style
and a closure, and we'll call


493
00:27:15,796 --> 00:27:18,926
that closure when the action
is selected by the user.


494
00:27:20,426 --> 00:27:22,976
Next, we'll just
return that array


495
00:27:22,976 --> 00:27:25,846
of actions back to the system.


496
00:27:26,186 --> 00:27:29,876
Now we've got one action here
for applying with a heart,


497
00:27:30,296 --> 00:27:33,206
but AppChat lets you reply
with a whole bunch of emoji.


498
00:27:33,766 --> 00:27:36,526
So what we really want to
do is group those emoji


499
00:27:36,936 --> 00:27:39,226
into one group action.


500
00:27:40,636 --> 00:27:44,836
We've got API for that too,
through UIPreviewActionGroup.


501
00:27:46,356 --> 00:27:50,536
All you have to do is create
an array of preview actions;


502
00:27:51,366 --> 00:27:54,126
here we have them for all of
the emoji you can respond with.


503
00:27:55,186 --> 00:27:59,776
And then create an action
group with a title, style,


504
00:28:00,126 --> 00:28:01,996
and the array of those actions.


505
00:28:02,166 --> 00:28:04,336
This is a great way for you


506
00:28:04,336 --> 00:28:08,256
to group related actions inside
your preview quick actions.


507
00:28:09,776 --> 00:28:11,806
There are two other
important parts


508
00:28:11,806 --> 00:28:16,306
for the preview action
API that are also handy.


509
00:28:16,856 --> 00:28:22,496
And this is through
the style enumeration


510
00:28:22,596 --> 00:28:23,706
on preview action item.


511
00:28:24,996 --> 00:28:27,396
The first is the selected style


512
00:28:27,666 --> 00:28:31,066
which will show a little
check mark next to that item,


513
00:28:31,616 --> 00:28:34,036
to let the user know that
they may have already selected


514
00:28:34,036 --> 00:28:35,206
that option previously.


515
00:28:36,146 --> 00:28:38,256
Now before we came
out with beta 1


516
00:28:38,336 --> 00:28:40,176
that check mark was
feeling a little shy,


517
00:28:40,356 --> 00:28:42,956
so you'll be noticing that it's
missing from the first seed


518
00:28:43,236 --> 00:28:45,116
but rest assured that
that bug will be fixed.


519
00:28:46,776 --> 00:28:48,656
The other style that's
really handy


520
00:28:48,656 --> 00:28:52,766
to use is the destructive style,
which we can use to indicate


521
00:28:52,766 --> 00:28:55,636
that an action may
perform a destructive act.


522
00:28:56,326 --> 00:28:59,106
You'll see that here behind
me with the block action.


523
00:28:59,526 --> 00:29:02,546
So by adding Peek and Pop,
and preview quick actions,


524
00:29:02,786 --> 00:29:05,396
we've taken the experience
inside your app


525
00:29:05,766 --> 00:29:08,536
to the next level and
sped up the interaction


526
00:29:08,626 --> 00:29:09,966
that your users can have.


527
00:29:10,876 --> 00:29:13,226
Let's review some best practices


528
00:29:13,366 --> 00:29:15,846
for adding Peek and
Pop to your app.


529
00:29:18,016 --> 00:29:21,426
First and foremost,
remember the rule of thumb,


530
00:29:22,396 --> 00:29:26,256
content that can be tapped
should also support Peek


531
00:29:26,446 --> 00:29:27,366
and Pop.


532
00:29:27,866 --> 00:29:30,156
You can look to Apple's
system apps


533
00:29:30,546 --> 00:29:34,326
for a great hint
at how to do this.


534
00:29:34,446 --> 00:29:38,606
Next, make sure to return
a preview view controller


535
00:29:38,716 --> 00:29:41,856
consistently from the
delegate call back.


536
00:29:42,676 --> 00:29:46,266
Similar looking content in
your app should be previewable


537
00:29:46,266 --> 00:29:47,256
in a similar way.


538
00:29:47,876 --> 00:29:53,396
In that same previewing
context callback make sure not


539
00:29:53,396 --> 00:29:54,256
to take too long.


540
00:29:54,956 --> 00:29:57,816
Remember, we don't want
to block the main queue


541
00:29:58,026 --> 00:30:01,596
because we want this interaction
to remain fluid and responsive.


542
00:30:03,616 --> 00:30:07,326
Make sure to set the sourceRect
of the previewing context,


543
00:30:07,616 --> 00:30:11,036
to lift the appropriate user
interface element on screen.


544
00:30:12,336 --> 00:30:14,776
So, that's it for Peek and Pop.


545
00:30:15,736 --> 00:30:17,736
Now I'd like to turn
our attention


546
00:30:18,076 --> 00:30:21,406
to some super cool
new API in iOS X.


547
00:30:22,366 --> 00:30:23,836
UIPreviewInteraction.


548
00:30:24,776 --> 00:30:29,206
UIPreviewInteraction lets you
take the Peek and Pop feel,


549
00:30:29,746 --> 00:30:32,616
which is force processing
and haptic feedback,


550
00:30:33,306 --> 00:30:35,626
but bring your own
user interface.


551
00:30:36,096 --> 00:30:40,166
And as we'll see in a moment,
this a really powerful concept.


552
00:30:40,666 --> 00:30:41,946
Let's look at an example.


553
00:30:42,516 --> 00:30:46,406
In AppChat, in our
chat detail view,


554
00:30:46,856 --> 00:30:49,866
we've got this handy Reply
button at the bottom.


555
00:30:49,866 --> 00:30:54,216
On a non-3D Touch
enabled device,


556
00:30:54,536 --> 00:30:58,356
we can tap on that Reply
button to get a whole list


557
00:30:58,356 --> 00:30:59,926
of the emoji we can reply with.


558
00:31:01,196 --> 00:31:03,426
And then we can tap
on one of these emoji,


559
00:31:04,546 --> 00:31:05,946
to send it back to our friend.


560
00:31:09,176 --> 00:31:11,776
But on a 3D Touch
capable device,


561
00:31:12,376 --> 00:31:15,006
we can make this
interaction a lot more fluid


562
00:31:15,006 --> 00:31:16,106
and a lot more fun.


563
00:31:17,576 --> 00:31:20,666
With just a few lines of code
using UIPreviewInteraction,


564
00:31:21,786 --> 00:31:23,866
we added something really neat.


565
00:31:24,896 --> 00:31:27,806
We can apply pressure
to the Reply button


566
00:31:28,256 --> 00:31:30,616
and interactively
present that sheet,


567
00:31:30,956 --> 00:31:33,236
notice how the blur
was fading in and out.


568
00:31:34,256 --> 00:31:37,896
Then while keeping my
finger down on the screen,


569
00:31:38,116 --> 00:31:42,436
I can slide around to pick
an emoji to reply with.


570
00:31:43,466 --> 00:31:44,636
Hopefully we don't
pick the devil.


571
00:31:44,706 --> 00:31:47,656
And then we'll send
it back to our friend.


572
00:31:48,976 --> 00:31:52,426
This type of one touch
interaction is something


573
00:31:52,426 --> 00:31:54,456
that 3D Touch is perfect for.


574
00:31:56,106 --> 00:31:58,756
Another thing that
3D Touch can help us


575
00:31:58,756 --> 00:32:01,106
with is accelerating actions


576
00:32:01,966 --> 00:32:04,266
that can live closer
to the user's finger.


577
00:32:05,346 --> 00:32:09,216
In iOS 7, we added
the slide back gesture


578
00:32:09,376 --> 00:32:11,416
as an alternative
for the Back button.


579
00:32:12,366 --> 00:32:15,126
And this is more convenient
because it's right next


580
00:32:15,126 --> 00:32:17,486
to where your finger is, you can
just move it over to the edge


581
00:32:17,486 --> 00:32:19,886
of the screen and slide back.


582
00:32:20,496 --> 00:32:23,546
And by using 3D Touch, we
can add that convenience


583
00:32:23,716 --> 00:32:25,156
to your app's interactions.


584
00:32:26,226 --> 00:32:29,346
So we can actually 3D Touch
anywhere in this photo


585
00:32:30,146 --> 00:32:32,636
to interactively bring
up that reply sheet


586
00:32:33,156 --> 00:32:37,376
and then we can actually
commit that reply sheet open,


587
00:32:37,966 --> 00:32:39,346
by applying some more force,


588
00:32:39,896 --> 00:32:42,606
and then pick an
emoji to reply with.


589
00:32:44,116 --> 00:32:46,596
This type of rich interaction


590
00:32:47,296 --> 00:32:50,996
that can make things feel a lot
more fluid, and a lot more fast,


591
00:32:51,506 --> 00:32:54,226
is exactly the type of thing
that we hope you'll build


592
00:32:54,406 --> 00:32:55,846
with UIPreviewInteraction.


593
00:33:04,746 --> 00:33:08,616
UIPreviewInteraction
takes the same Peek


594
00:33:08,616 --> 00:33:11,436
and Pop force processing
that we've honed


595
00:33:11,656 --> 00:33:13,706
for the system provided
Peek and Pop UI,


596
00:33:15,086 --> 00:33:18,886
and the automatic haptic
feedback as we move


597
00:33:18,886 --> 00:33:22,646
through the stages of the
interaction, but allows your app


598
00:33:22,736 --> 00:33:24,206
to bring the user interface.


599
00:33:24,756 --> 00:33:27,536
And what's really
exciting about this is


600
00:33:27,536 --> 00:33:31,526
that people can now build
muscle memory for Peek and Pop,


601
00:33:32,156 --> 00:33:34,216
and apply that same
muscle memory


602
00:33:34,616 --> 00:33:37,256
in the system standard
previewing appearance,


603
00:33:37,876 --> 00:33:41,176
but also in the custom
interactions that you'll build


604
00:33:41,406 --> 00:33:42,936
with UIPreviewInteraction.


605
00:33:43,796 --> 00:33:47,106
And that muscle memory will
be universally applicable,


606
00:33:47,756 --> 00:33:49,076
this is really cool.


607
00:33:50,226 --> 00:33:51,946
So let's walk through step


608
00:33:52,236 --> 00:33:57,986
by step how you might add
preview interaction to your app.


609
00:33:59,296 --> 00:34:01,776
We're going to start
off by conforming


610
00:34:02,106 --> 00:34:04,586
to the
UIPreviewInteractionDelegate


611
00:34:04,656 --> 00:34:05,536
protocol.


612
00:34:06,326 --> 00:34:07,916
This delegate will be informed


613
00:34:07,996 --> 00:34:10,976
at various stages during
the preview interaction


614
00:34:11,266 --> 00:34:12,626
to let you know what's going on.


615
00:34:13,835 --> 00:34:17,216
Next, we'll want to make sure to
create our preview interaction.


616
00:34:18,606 --> 00:34:21,146
Again, viewDidLoad is a
great time to do this.


617
00:34:21,985 --> 00:34:25,676
Here, we'll create our preview
interaction with a sourceView


618
00:34:26,505 --> 00:34:28,525
and set ourselves
as the delegate.


619
00:34:30,176 --> 00:34:34,496
Now, preview interaction is
all about state transitions,


620
00:34:35,005 --> 00:34:37,585
so let's talk through how
these state transitions work.


621
00:34:37,585 --> 00:34:40,686
When the interaction starts,


622
00:34:41,146 --> 00:34:44,706
if your delegate implements the
optional preview interaction


623
00:34:44,946 --> 00:34:51,085
should begin callback, we'll
call that, or if you don't,


624
00:34:51,516 --> 00:34:52,666
we'll begin the interaction.


625
00:34:53,856 --> 00:34:57,606
Now, as the force moves
from the beginning


626
00:34:57,606 --> 00:35:00,366
of the interaction
towards the preview state,


627
00:35:01,186 --> 00:35:04,576
we'll message back your delegate
with previewInteraction,


628
00:35:04,976 --> 00:35:07,476
didUpdatePreviewTransition
:ended.


629
00:35:08,676 --> 00:35:09,226
Check it out.


630
00:35:10,336 --> 00:35:12,726
These force progress
updates are given


631
00:35:12,836 --> 00:35:15,506
as a normalized value
from zero to one.


632
00:35:15,556 --> 00:35:17,086
And what's really important


633
00:35:17,086 --> 00:35:21,006
to highlight is this is not just
a direct translation of force.


634
00:35:21,906 --> 00:35:24,206
Because it's using the
algorithms that we developed,


635
00:35:24,476 --> 00:35:28,976
for Peek and Pop, we're actually
detecting the user's intent.


636
00:35:28,976 --> 00:35:32,746
So this is not just some
simple force translation.


637
00:35:34,336 --> 00:35:38,506
As we move between these two
force states, we'll be notified


638
00:35:38,506 --> 00:35:41,886
at every step along the way
with our current progress


639
00:35:42,156 --> 00:35:43,006
through the interaction.


640
00:35:43,986 --> 00:35:46,526
And once we reach the
target state of preview,


641
00:35:47,606 --> 00:35:50,356
we'll hear about it because
the progress will move to one,


642
00:35:51,236 --> 00:35:53,726
and will passed true
for the ended parameter.


643
00:35:54,206 --> 00:35:57,736
And, the device will
automatically play


644
00:35:57,986 --> 00:35:58,866
haptic feedback.


645
00:36:00,116 --> 00:36:03,176
Let's go through a sample
implementation of this method.


646
00:36:04,876 --> 00:36:07,506
Again the method is
previewInteraction,


647
00:36:07,786 --> 00:36:10,276
didUpdatePreviewTransition
:ended.


648
00:36:11,106 --> 00:36:14,086
And here we're just
going to update ourselves


649
00:36:14,086 --> 00:36:17,206
for the current progress
through the transition.


650
00:36:18,226 --> 00:36:22,066
Now notice, this is actually
plug and play with a number


651
00:36:22,066 --> 00:36:23,406
of UIKit technologies.


652
00:36:24,016 --> 00:36:27,456
We can use it to drive a
UIViewPropertyAnimator,


653
00:36:27,886 --> 00:36:29,916
a percent driven
interactive transition,


654
00:36:30,216 --> 00:36:32,436
or even a UIKit dynamic system.


655
00:36:33,666 --> 00:36:37,226
These instantaneous updates
for the state transitions work


656
00:36:37,226 --> 00:36:38,706
with all these technologies.


657
00:36:40,036 --> 00:36:41,866
And if the interaction ends,


658
00:36:42,286 --> 00:36:45,866
we'll want to show our
completed preview appearance.


659
00:36:46,546 --> 00:36:49,206
This is the first
required delegate method


660
00:36:49,536 --> 00:36:50,846
on UIPreviewInteraction.


661
00:36:51,926 --> 00:36:55,116
The second is for
responding to cancellation,


662
00:36:55,846 --> 00:36:59,006
it's called
previewInteractionDidCancel.


663
00:37:00,196 --> 00:37:03,436
This will be called whenever
the user lifts their finger


664
00:37:03,986 --> 00:37:06,986
or if the interaction should
cancel for any other reason.


665
00:37:07,286 --> 00:37:12,906
For example we got a phone call,
here we'll set our progress back


666
00:37:12,906 --> 00:37:16,356
to zero, and reset ourselves
to our initial appearance.


667
00:37:17,336 --> 00:37:20,786
But notice that we're doing this
inside an animation closure,


668
00:37:21,556 --> 00:37:24,666
we'll want to animate
ourselves back to rest


669
00:37:24,926 --> 00:37:27,786
to avoid things flashing
around when we lift our finger.


670
00:37:28,336 --> 00:37:33,456
So that's how we can respond to
the preview state transition.


671
00:37:34,696 --> 00:37:38,076
But remember in AppChat,
we also want to respond


672
00:37:38,296 --> 00:37:39,986
to the commit state transition


673
00:37:40,196 --> 00:37:42,406
for sticking our
content on screen.


674
00:37:42,936 --> 00:37:46,526
We can implement the
optional delegate method,


675
00:37:47,186 --> 00:37:50,286
previewInteraction
didUpdateCommitTransition


676
00:37:50,496 --> 00:37:53,766
:ended, to respond to our
progress through commit.


677
00:37:55,476 --> 00:37:58,586
So, when we're between the
beginning of the interaction


678
00:37:58,956 --> 00:38:00,216
and the preview state,


679
00:38:00,936 --> 00:38:03,996
we'll call back
didUpdatePreviewTransition.


680
00:38:05,166 --> 00:38:07,426
And once we reach the
target state of preview,


681
00:38:08,266 --> 00:38:12,516
we'll pass a progress value of
one and an ended value of true.


682
00:38:13,006 --> 00:38:15,356
And we'll also play
some haptic feedback,


683
00:38:16,536 --> 00:38:18,546
then we'll begin
sending messages


684
00:38:18,836 --> 00:38:22,986
to didUpdateCommitTransition
:ended, with the progress


685
00:38:23,286 --> 00:38:25,196
from preview to commit.


686
00:38:26,936 --> 00:38:28,556
This is the same sort


687
00:38:28,556 --> 00:38:31,726
of progress update normalized
values from zero to one.


688
00:38:32,756 --> 00:38:35,826
And, once we reach the
target state of commit,


689
00:38:36,526 --> 00:38:40,726
we'll pass a progress
value of one ended as true,


690
00:38:40,876 --> 00:38:44,546
and we'll play another different
piece of haptic feedback.


691
00:38:45,126 --> 00:38:50,216
Let's go through a way in which
you might implement this method.


692
00:38:50,336 --> 00:38:53,986
So in our implementation


693
00:38:54,536 --> 00:38:57,466
of previewInteraction
didUpdateCommitTransition


694
00:38:57,696 --> 00:39:01,956
:ended, here we're going to
update our progress for commit.


695
00:39:02,536 --> 00:39:04,906
Again, this works
with the whole suite


696
00:39:05,156 --> 00:39:07,596
of UIKit animation
and dynamics API.


697
00:39:09,116 --> 00:39:11,196
And once the interaction ends,


698
00:39:11,786 --> 00:39:14,936
we'll just show our
completed commit appearance.


699
00:39:16,116 --> 00:39:18,466
So that's it for
UIPreviewInteraction.


700
00:39:19,536 --> 00:39:23,106
Now if you're building
a game or a drawing app,


701
00:39:24,016 --> 00:39:27,356
there's some low level
force API that you can use.


702
00:39:29,196 --> 00:39:32,516
This API provides
normalized access


703
00:39:32,676 --> 00:39:36,806
to the force values coming
in with each UITouchObject,


704
00:39:37,216 --> 00:39:39,296
through two properties
on UITouch,


705
00:39:39,726 --> 00:39:42,516
force and maximumPossibleForce.


706
00:39:43,866 --> 00:39:46,716
These values will be
populated on all devices


707
00:39:46,716 --> 00:39:50,306
that support 3D Touch,
along with touches coming


708
00:39:50,306 --> 00:39:53,096
from an Apple Pencil that
support Apple Pencil.


709
00:39:54,216 --> 00:39:57,636
And we won't get into them
in more detail here, instead,


710
00:39:58,086 --> 00:39:59,636
I encourage you to
check out the video


711
00:39:59,776 --> 00:40:02,756
for the leveraging
touch input on iOS Talk.


712
00:40:03,146 --> 00:40:06,976
It's a really great talk and
goes into these APIs in depth.


713
00:40:08,386 --> 00:40:09,176
So let's review.


714
00:40:09,926 --> 00:40:12,126
As Tyler showed you earlier,


715
00:40:12,696 --> 00:40:16,406
Home Screen Quick Actions allow
your users to jump straight


716
00:40:16,406 --> 00:40:17,966
into action with many


717
00:40:17,966 --> 00:40:20,326
of the common activities
inside your app.


718
00:40:21,156 --> 00:40:23,796
And most applications
will really benefit


719
00:40:23,956 --> 00:40:25,876
from adding Home
Screen Quick Actions.


720
00:40:27,006 --> 00:40:32,326
Next, I showed you how Peek
and Pop allow seamless fluid


721
00:40:32,486 --> 00:40:36,346
and quick interaction like never
before and lets people interact


722
00:40:36,346 --> 00:40:38,776
with your app in
a whole new way.


723
00:40:38,896 --> 00:40:42,656
And we think that many
apps will really benefit


724
00:40:42,656 --> 00:40:43,856
from adding Peek and Pop.


725
00:40:45,436 --> 00:40:49,056
Finally, we looked at
UIPreviewInteraction,


726
00:40:49,926 --> 00:40:52,866
which allows you to explore
new depths in the ocean


727
00:40:52,866 --> 00:40:56,576
that is 3D Touch, and
really take a great look


728
00:40:56,716 --> 00:40:59,046
into the next dimension
of multi-touch.


729
00:41:00,276 --> 00:41:05,686
Finally, it's important to note
that users will expect all apps


730
00:41:05,686 --> 00:41:07,846
on their device to
support 3D touch


731
00:41:08,356 --> 00:41:11,466
so we would highly encourage
you to adopt these features.


732
00:41:12,616 --> 00:41:16,706
For more information and to
download the AppChat sample app


733
00:41:16,756 --> 00:41:18,746
that we showed you
throughout this talk,


734
00:41:18,996 --> 00:41:20,766
which uses all these
technologies,


735
00:41:21,216 --> 00:41:23,136
check out the address behind me.


736
00:41:23,976 --> 00:41:26,096
There are a few related
sessions,


737
00:41:26,556 --> 00:41:29,746
one on the new
UIKitPropertyAnimator API,


738
00:41:30,156 --> 00:41:32,456
which works great with
UIPreviewInteraction.


739
00:41:33,076 --> 00:41:37,566
And another for leveraging the
lower level touch input on iOS.


740
00:41:37,566 --> 00:41:41,086
And that's it, thank you so
much, and have a great rest


741
00:41:41,086 --> 00:41:42,326
of your conference, thank you.


742
00:41:43,516 --> 00:41:46,500
[ Applause ]

