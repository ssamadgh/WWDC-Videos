1
00:00:07,516 --> 00:00:18,500
[ Music ]


2
00:00:26,516 --> 00:00:31,886
[ Applause ]


3
00:00:32,386 --> 00:00:34,336
>> Welcome to Introduction
to Xcode.


4
00:00:34,636 --> 00:00:37,476
My name's Najla and I'm a
member of the Xcode team.


5
00:00:38,056 --> 00:00:41,006
Along with my colleague Rick
Ballard, we'll be taking you


6
00:00:41,086 --> 00:00:43,236
through the essential
components of Xcode.


7
00:00:44,356 --> 00:00:47,546
So Xcode is a development
platform for creating apps


8
00:00:47,676 --> 00:00:53,086
for iOS, watchOS,
tvOS, and OS X, macOS.


9
00:00:53,486 --> 00:00:57,326
It gives you the tools
to create a complete app,


10
00:00:57,326 --> 00:01:00,256
from designing your user
interface and implementing code,


11
00:01:00,706 --> 00:01:02,876
to testing and debugging
your application,


12
00:01:03,466 --> 00:01:08,546
to provisioning your app for
distribution on the App Store.


13
00:01:09,046 --> 00:01:10,906
So today we're going to take you


14
00:01:10,906 --> 00:01:12,446
through the most
important components


15
00:01:12,446 --> 00:01:13,806
of Xcode by creating an app.


16
00:01:15,126 --> 00:01:17,776
You'll learn how to create
a new application and run it


17
00:01:17,776 --> 00:01:21,786
in the simulator, how to test
and debug your application,


18
00:01:23,176 --> 00:01:26,026
how to review your changes and
commit them to source control,


19
00:01:27,376 --> 00:01:29,806
and how to configure your
project for distribution.


20
00:01:31,196 --> 00:01:34,426
Now, we want this session to
be more about learning how


21
00:01:34,426 --> 00:01:37,596
to use Xcode and less
about app development,


22
00:01:37,916 --> 00:01:40,186
so the app that we're going
to be using today is going


23
00:01:40,186 --> 00:01:43,066
to be very simple, but
don't let the simplicity


24
00:01:43,066 --> 00:01:44,246
of the demo app fool you.


25
00:01:44,246 --> 00:01:46,246
There's information in
this session for everyone,


26
00:01:46,636 --> 00:01:48,386
whether you're brand
new to Xcode


27
00:01:48,386 --> 00:01:49,826
or an experienced developer.


28
00:01:50,406 --> 00:01:54,806
So the best way to learn
about Xcode is by using it,


29
00:01:54,806 --> 00:01:56,796
so let's get started
at our machine.


30
00:01:57,856 --> 00:02:00,296
So what you see here is
Xcode's welcome window.


31
00:02:00,756 --> 00:02:03,476
On the right, you can
open existing projects,


32
00:02:04,026 --> 00:02:05,786
and on the left, you
can create new ones.


33
00:02:06,826 --> 00:02:07,966
Let's create a new project.


34
00:02:09,246 --> 00:02:11,666
And when you create a
new project in Xcode,


35
00:02:11,666 --> 00:02:13,936
you have a number of
templates to choose from,


36
00:02:14,176 --> 00:02:15,976
and there are basically
just starting points


37
00:02:15,976 --> 00:02:16,966
for your application.


38
00:02:18,066 --> 00:02:20,146
You can have, there
are templates available


39
00:02:20,146 --> 00:02:25,896
for all four platforms --
iOS, watchOS, tvOS, and macOS.


40
00:02:27,166 --> 00:02:29,736
Now, I'm going to choose the
simplest template available,


41
00:02:30,386 --> 00:02:32,186
which is a single
view application


42
00:02:32,266 --> 00:02:33,836
for the iOS platform.


43
00:02:34,436 --> 00:02:36,766
It's, it provides the code for,


44
00:02:36,846 --> 00:02:39,116
to support an iOS
app with one view.


45
00:02:41,656 --> 00:02:44,366
So let's name our project Hello,


46
00:02:44,586 --> 00:02:46,966
and if you have a
developer account,


47
00:02:46,966 --> 00:02:48,816
you can add it here
and select your team.


48
00:02:50,236 --> 00:02:52,726
Now, your organization name is
just the company you work for


49
00:02:52,726 --> 00:02:56,896
and your bundle identifier
is a combination


50
00:02:57,006 --> 00:02:59,836
of your organization name
and your product name.


51
00:03:00,356 --> 00:03:03,396
It's a string that uniquely
identifies your application.


52
00:03:03,986 --> 00:03:07,606
Now, when you create a
new application in Xcode,


53
00:03:08,306 --> 00:03:11,106
you can choose between
using Swift and Objective-C


54
00:03:11,106 --> 00:03:12,256
as your programming language.


55
00:03:12,826 --> 00:03:15,966
We're going to be using
Swift and our app is going


56
00:03:15,966 --> 00:03:18,396
to be universal, meaning
that it can run on


57
00:03:18,396 --> 00:03:23,206
and support both
iPhone and iPad.


58
00:03:24,016 --> 00:03:25,926
So when you create
a new template,


59
00:03:26,786 --> 00:03:28,966
there are different options
to configuring your project.


60
00:03:29,416 --> 00:03:34,936
We're going to choose
unit and UI pass.


61
00:03:35,326 --> 00:03:37,696
Now, let's save our project
in our Documents folder,


62
00:03:38,236 --> 00:03:41,496
and I'm going to click
Create Git Repository


63
00:03:41,496 --> 00:03:43,566
so that our project will be


64
00:03:43,596 --> 00:03:45,076
under version control
from the start.


65
00:03:51,556 --> 00:03:53,426
Awesome, so here's our project.


66
00:03:53,926 --> 00:03:56,626
I'm going to resize the window
by double-tapping at the top.


67
00:03:58,386 --> 00:04:01,066
Now, this is called
Xcode's main window.


68
00:04:02,046 --> 00:04:05,256
On the left is the
navigator area with all


69
00:04:05,256 --> 00:04:06,956
of your files and resources.


70
00:04:06,956 --> 00:04:11,566
In the middle is the editor
area where you can open files


71
00:04:11,706 --> 00:04:13,946
that you've, that you
click on in the navigator.


72
00:04:15,056 --> 00:04:18,836
And on the right is the utility
area, which contains useful,


73
00:04:18,836 --> 00:04:21,196
contextual information based
on what you have selected


74
00:04:21,196 --> 00:04:22,906
in the navigator
or in the editor.


75
00:04:24,556 --> 00:04:26,066
Now, if you're brand
new to Xcode,


76
00:04:26,066 --> 00:04:27,066
you're probably wondering,


77
00:04:27,456 --> 00:04:31,196
what does this app
look like on a device?


78
00:04:31,346 --> 00:04:34,466
You can run your application
by clicking the Run button


79
00:04:34,746 --> 00:04:36,066
at the top of the main window.


80
00:04:36,666 --> 00:04:38,776
But before we do that,
let's talk a little bit more


81
00:04:38,776 --> 00:04:40,836
about what actually
happens when you click Run.


82
00:04:41,406 --> 00:04:45,166
So when you click Run,
you specify what you want


83
00:04:45,166 --> 00:04:52,696
to run here and where
you want to run it here.


84
00:04:53,306 --> 00:04:56,236
Now, in your project, you can
have multiple applications


85
00:04:56,236 --> 00:04:59,546
or even multiple configurations
of the same application.


86
00:05:00,396 --> 00:05:03,036
A scheme is how you
specify what you want to run


87
00:05:03,036 --> 00:05:05,616
and it also contains information
about how you want to run it.


88
00:05:06,376 --> 00:05:09,216
For example, I could have
a project with an iOS app


89
00:05:09,216 --> 00:05:12,176
and a Watch app, and in that
case, I would have one scheme


90
00:05:12,176 --> 00:05:17,406
to run my iOS app and one
scheme to run my Watch app.


91
00:05:17,576 --> 00:05:19,596
Currently, we only have
one scheme in our project.


92
00:05:19,596 --> 00:05:21,786
It's called Hello, and
it's already selected.


93
00:05:24,716 --> 00:05:28,166
Now, your run destination
is where you specify


94
00:05:28,486 --> 00:05:30,646
where you want your
application to run,


95
00:05:30,646 --> 00:05:32,576
and in Xcode, you
have two options.


96
00:05:33,046 --> 00:05:35,036
You can run your
application in the simulator


97
00:05:35,436 --> 00:05:36,616
or you can run it on a device.


98
00:05:37,476 --> 00:05:39,856
A simulator simulates what
your application will look


99
00:05:39,856 --> 00:05:43,096
like on a device, and this is
really great for doing quick,


100
00:05:43,096 --> 00:05:45,546
iterative development and
when you want feedback


101
00:05:45,546 --> 00:05:47,746
on how your app is
looking and functioning.


102
00:05:49,426 --> 00:05:52,786
Currently we have the iPhone
SE simulator selected,


103
00:05:53,796 --> 00:05:57,046
so let's click the Run
button, and it's going


104
00:05:57,046 --> 00:06:03,856
to run our scheme Hello on
the iPhone SE simulator.


105
00:06:03,886 --> 00:06:09,526
So our application is
launching, and here it is.


106
00:06:09,886 --> 00:06:10,966
I said that we were going


107
00:06:10,966 --> 00:06:13,226
to choose the simplest
template available,


108
00:06:13,226 --> 00:06:16,566
and there's nothing here,
so let's add a feature


109
00:06:16,566 --> 00:06:18,166
to make it a little
more interesting.


110
00:06:19,666 --> 00:06:21,096
I'm going to stop the simulator


111
00:06:21,096 --> 00:06:23,676
by clicking the Stop button
next to the Run button.


112
00:06:24,946 --> 00:06:27,566
So in Xcode, you can lay
out the user interface


113
00:06:27,566 --> 00:06:29,836
of your application in
what's called a storyboard.


114
00:06:31,876 --> 00:06:34,376
Now, since we created our
project from a template,


115
00:06:35,216 --> 00:06:37,046
we have a couple
storyboards available.


116
00:06:37,606 --> 00:06:38,846
We have a launch
screen storyboard


117
00:06:38,846 --> 00:06:39,846
and a main storyboard.


118
00:06:40,596 --> 00:06:44,156
Your launch screen storyboard
contains the user interface


119
00:06:44,156 --> 00:06:46,476
for your launch screen, which is
that screen that first appears


120
00:06:46,686 --> 00:06:48,526
when you launch an
application for the first time.


121
00:06:49,016 --> 00:06:51,616
And your main.storyboard
contains a user interface


122
00:06:51,616 --> 00:06:52,826
for the rest of your
application.


123
00:06:53,506 --> 00:06:55,706
So let's open main.storyboard.


124
00:06:56,286 --> 00:07:00,746
In the storyboard, you have
what's called the canvas,


125
00:07:00,746 --> 00:07:04,866
which is this white background,
and there's a scene inside


126
00:07:04,866 --> 00:07:07,266
of your canvas, which
contains your view


127
00:07:07,266 --> 00:07:09,536
and it represents one
view of your application.


128
00:07:10,926 --> 00:07:13,716
Now, for a feature, I want
it to be really simple,


129
00:07:13,716 --> 00:07:16,756
but I also want to be able
to interact with it in code,


130
00:07:17,396 --> 00:07:19,146
so I'm going to implement
a button


131
00:07:19,146 --> 00:07:21,216
that when tapped says
Hello in a label.


132
00:07:21,806 --> 00:07:27,796
So at the bottom of the utility
area, are Xcode's libraries,


133
00:07:28,006 --> 00:07:30,466
such as the file library and
the code snippet library.


134
00:07:31,246 --> 00:07:34,316
Now, third icon from the left
takes you to the object library,


135
00:07:34,846 --> 00:07:36,826
which contains all
of the UI elements


136
00:07:36,826 --> 00:07:38,186
that you can add to your scene.


137
00:07:39,696 --> 00:07:42,126
You can view them as
a list, which is great


138
00:07:42,126 --> 00:07:44,326
when you don't exactly know
what you're looking for


139
00:07:44,326 --> 00:07:49,896
and you want more information,
or you can view them as a grid.


140
00:07:50,476 --> 00:07:54,326
Now, I already know that I
need a button and a label


141
00:07:54,616 --> 00:07:58,906
in my scene, so I can use
the filter bar at the bottom


142
00:07:58,906 --> 00:08:01,786
of the utility area to
search for a button.


143
00:08:05,636 --> 00:08:08,006
Let's drag it into our scene,


144
00:08:08,486 --> 00:08:12,706
and guides appear to
help us center it.


145
00:08:13,546 --> 00:08:15,656
Now, earlier I mentioned
the utility panel,


146
00:08:16,486 --> 00:08:22,786
so let's take a closer look at
the inspectors at the top of it.


147
00:08:23,456 --> 00:08:27,076
Now, the first two, the file
and quick help inspectors,


148
00:08:27,476 --> 00:08:29,056
they're available
throughout your project,


149
00:08:29,486 --> 00:08:32,486
no matter what you have selected
in the navigator or the editor,


150
00:08:33,206 --> 00:08:35,635
but since I have the buttons
selected in our scene,


151
00:08:36,285 --> 00:08:38,746
the rest of the inspectors
contain information


152
00:08:38,806 --> 00:08:39,556
about the button.


153
00:08:40,446 --> 00:08:44,656
For example, I can click on
the attributes inspector here


154
00:08:45,426 --> 00:08:49,386
to get information about the
text properties of the button,


155
00:08:49,766 --> 00:08:52,346
such as the size,
the font, the color.


156
00:08:53,456 --> 00:08:55,786
I can click on the size
inspector next to it


157
00:08:56,586 --> 00:08:58,676
to see information about
the size of the button


158
00:08:58,676 --> 00:09:01,526
and the position in the scene.


159
00:09:02,576 --> 00:09:06,706
I'm going to change this
button's title to say Say Hello,


160
00:09:06,706 --> 00:09:09,446
and I can do this in the
attributes inspector,


161
00:09:10,216 --> 00:09:13,076
but an easier way of doing
this is by double-clicking


162
00:09:13,076 --> 00:09:16,526
on the button and just
typing the title that I want.


163
00:09:19,536 --> 00:09:22,026
Great, so now we have
our button in our scene.


164
00:09:22,976 --> 00:09:25,636
Let's go back to the filter
bar and search for a label.


165
00:09:30,416 --> 00:09:32,966
I'm going to drag
it so that it's


166
00:09:32,966 --> 00:09:34,916
above the button
but still centered.


167
00:09:35,606 --> 00:09:40,216
And once again, I can go back
to the attributes inspector


168
00:09:40,216 --> 00:09:42,616
or the size inspector to
configure its properties,


169
00:09:42,686 --> 00:09:47,086
but I like it the way it
is, so let's just leave it.


170
00:09:48,466 --> 00:09:51,526
One thing to note about our
user interface currently is


171
00:09:51,526 --> 00:09:54,696
that we haven't specified how
the view should scale based


172
00:09:54,696 --> 00:09:56,236
on the device that it's on.


173
00:09:57,676 --> 00:10:01,376
Currently, we're viewing our
scene with the dimensions


174
00:10:01,376 --> 00:10:05,836
of the iPhone 6s simulator or
device, but if I click on this,


175
00:10:05,836 --> 00:10:07,626
I can change it to
other devices,


176
00:10:07,666 --> 00:10:10,116
such as the iPhone SE device.


177
00:10:11,076 --> 00:10:12,796
And here we can see
that our label


178
00:10:12,796 --> 00:10:14,786
and our button actually
aren't centered the way


179
00:10:14,786 --> 00:10:16,956
that we thought.


180
00:10:17,676 --> 00:10:19,306
So let's go back
to the iPhone 6s,


181
00:10:19,356 --> 00:10:23,166
and we need to add some
constraints with auto-layout


182
00:10:23,836 --> 00:10:26,486
to set some rules for how the
user interface should scale.


183
00:10:27,036 --> 00:10:31,606
We can do this using
the auto-layout icons


184
00:10:31,606 --> 00:10:33,106
at the bottom of
the canvas here.


185
00:10:34,516 --> 00:10:37,246
So for our button, I want
it to be horizontally


186
00:10:37,246 --> 00:10:40,816
and vertically centered in the
view, so I'm going to click


187
00:10:40,816 --> 00:10:45,996
on the Align icon and set
it so that it's horizontally


188
00:10:46,076 --> 00:10:47,376
and vertically in container.


189
00:10:48,086 --> 00:10:53,116
Now we can see our
constraints in the scene.


190
00:10:53,326 --> 00:10:57,716
Now for my label, I also want
it to be horizontally aligned


191
00:10:57,716 --> 00:11:01,626
in the view, so I'm going
to go back to the Align icon


192
00:11:01,716 --> 00:11:05,006
and check Horizontally
in Container.


193
00:11:05,486 --> 00:11:07,656
Now, when we did that, the
constraints showed up as red,


194
00:11:07,656 --> 00:11:09,186
meaning that something
went wrong.


195
00:11:10,136 --> 00:11:12,536
And at the top of the
documents outline,


196
00:11:12,856 --> 00:11:15,846
there's actually an arrow that
will take us to a useful error


197
00:11:15,846 --> 00:11:16,796
about what went wrong.


198
00:11:17,336 --> 00:11:20,826
And here we can see that we
never specified a y position


199
00:11:20,906 --> 00:11:21,566
for the label.


200
00:11:22,126 --> 00:11:27,346
Now, I don't actually care
what the specific y position


201
00:11:27,346 --> 00:11:28,136
of this label is.


202
00:11:28,496 --> 00:11:30,496
I just always want it
to be above the button.


203
00:11:31,956 --> 00:11:35,506
So what I can do is I can
click on the Pin icon.


204
00:11:36,186 --> 00:11:40,576
Oops, we didn't select
the label in the scene.


205
00:11:41,156 --> 00:11:44,406
So once your label is selected,
you can click the Pin icon


206
00:11:44,406 --> 00:11:48,426
and pin the bottom of the
label to the top of the button.


207
00:11:49,056 --> 00:11:52,746
It's at our constraint,
and now it's blue.


208
00:11:52,746 --> 00:11:56,266
I'm going to rerun it
in the simulator to see


209
00:11:56,266 --> 00:11:58,426
if we have the behavior
that we want.


210
00:12:04,416 --> 00:12:05,766
So here's our user interface.


211
00:12:05,766 --> 00:12:07,306
Looks pretty great.


212
00:12:07,896 --> 00:12:10,386
What were to happen if
I rotated our device?


213
00:12:11,436 --> 00:12:13,886
Well, with the simulator,
you can simulate rotation


214
00:12:13,886 --> 00:12:18,616
by clicking on Hardware and
Rotate Left or Rotate Right.


215
00:12:19,156 --> 00:12:22,116
Let's rotate left, and
it's still centered.


216
00:12:23,306 --> 00:12:24,926
Now, the great thing
about the simulator is


217
00:12:24,926 --> 00:12:27,256
that you can simulate a lot
of different kinds of things,


218
00:12:27,696 --> 00:12:31,556
such as rotation, shaking,
even specific locations.


219
00:12:32,676 --> 00:12:35,256
I'd recommend checking out
the simulator and playing


220
00:12:35,256 --> 00:12:37,516
around with it because it
comes in handy when you want


221
00:12:37,516 --> 00:12:39,226
to do some quick testing
and you don't want


222
00:12:39,226 --> 00:12:40,026
to pull out your device.


223
00:12:40,976 --> 00:12:44,406
So now that our user
interface is laid out,


224
00:12:44,586 --> 00:12:48,336
we need to add some code so
that tapping the button actually


225
00:12:48,336 --> 00:12:49,936
changes the label to say Hello.


226
00:12:51,556 --> 00:12:55,346
Let's stop our simulator
and talk a little bit more


227
00:12:55,386 --> 00:12:56,826
about scenes and
view controllers.


228
00:12:57,856 --> 00:13:01,856
So every scene in a storyboard
references some view controller


229
00:13:01,856 --> 00:13:05,616
class, which contains code
to manipulate the view.


230
00:13:07,106 --> 00:13:09,986
I only have one scene in our app


231
00:13:09,986 --> 00:13:12,446
and I only have one
view controller file


232
00:13:12,506 --> 00:13:15,866
in our navigator, so I can infer


233
00:13:15,996 --> 00:13:18,836
that this scene is
referencing the class


234
00:13:18,836 --> 00:13:19,956
in view controller's Swift.


235
00:13:21,306 --> 00:13:24,106
But what if I had multiple
scenes in our application


236
00:13:24,636 --> 00:13:26,396
and multiple view
controller files?


237
00:13:26,776 --> 00:13:28,726
How would I know which
scene is referencing


238
00:13:28,726 --> 00:13:29,986
which view controller file?


239
00:13:31,496 --> 00:13:35,416
Well, when you select a scene
in the storyboard, you can click


240
00:13:35,416 --> 00:13:38,056
on the identity inspector,
which is next


241
00:13:38,056 --> 00:13:39,286
to the attributes inspector.


242
00:13:39,886 --> 00:13:42,396
It actually lists which
class it's referencing.


243
00:13:43,076 --> 00:13:48,986
So now we know for sure where
we need to put our code.


244
00:13:49,826 --> 00:13:52,516
So I want to display
our storyboard file


245
00:13:52,516 --> 00:13:56,446
and our view controller files
side by side, and I can do this


246
00:13:56,846 --> 00:13:59,696
by clicking on the
Assistant Editor button


247
00:13:59,796 --> 00:14:01,076
at the top of the main window.


248
00:14:01,656 --> 00:14:06,756
It's looking a little
cramped, so I'm going


249
00:14:06,756 --> 00:14:08,126
to create a little bit of room


250
00:14:08,896 --> 00:14:15,676
by hiding the documents outline
using this button here and also


251
00:14:15,676 --> 00:14:22,656
by hiding the utility area
by clicking on this panel.


252
00:14:23,216 --> 00:14:25,856
Now, one thing to note is
that this bar at the top


253
00:14:25,856 --> 00:14:28,866
of our editor, it's called the
jump bar, and it contains a lot


254
00:14:28,866 --> 00:14:33,666
of useful information about the
functions in your file and even


255
00:14:33,666 --> 00:14:35,696
about the files themselves.


256
00:14:37,076 --> 00:14:39,486
Now, the great thing about
the assistant editor is


257
00:14:39,486 --> 00:14:42,416
that it actually knows
which file is related,


258
00:14:42,596 --> 00:14:44,876
which files are related to
the file that I have open


259
00:14:44,876 --> 00:14:47,856
in the primary editor and
will open it up for me


260
00:14:47,856 --> 00:14:48,816
in the assistant editor.


261
00:14:49,306 --> 00:14:52,396
For example, if we opened our
view controller's Swift file


262
00:14:52,396 --> 00:14:54,726
in the primary editor,
it would open


263
00:14:54,726 --> 00:14:57,926
up the generated
interface file for it.


264
00:14:58,546 --> 00:15:01,346
Now, another cool thing
about the assistant editor is


265
00:15:01,346 --> 00:15:04,856
that it actually, you can
actually change the relationship


266
00:15:04,856 --> 00:15:08,396
that it's using by selecting
the relationship at the top


267
00:15:08,396 --> 00:15:11,046
of the jump bar and changing
it to whatever you want.


268
00:15:11,636 --> 00:15:14,826
For example, you can change it
to Siblings, which will open


269
00:15:14,826 --> 00:15:18,226
up all of the files that inherit
from the same superclass.


270
00:15:18,966 --> 00:15:25,316
So let's go back to
our main.storyboard


271
00:15:26,316 --> 00:15:28,306
by using the back
arrow in the jump bar.


272
00:15:28,986 --> 00:15:33,706
So we have our view
controller class


273
00:15:33,706 --> 00:15:34,766
and we have our storyboard.


274
00:15:35,116 --> 00:15:37,246
We need to create
references for our button


275
00:15:37,246 --> 00:15:42,306
and our label in our class.


276
00:15:42,466 --> 00:15:48,076
Now, I can do this by selecting
the UI element that I want,


277
00:15:48,466 --> 00:15:49,416
so I have it selected.


278
00:15:49,416 --> 00:15:54,476
I'm going to Control drag from
the scene and into our class.


279
00:15:55,136 --> 00:15:56,926
Now, I want this
to be an action,


280
00:15:57,296 --> 00:16:00,976
which means that I want
it to perform something


281
00:16:01,186 --> 00:16:02,226
when I tap the button.


282
00:16:02,966 --> 00:16:05,296
And let's name it Say Hello.


283
00:16:05,846 --> 00:16:10,596
Let's do the same
thing for our label.


284
00:16:11,236 --> 00:16:14,736
I actually want this
to be an outlet,


285
00:16:15,116 --> 00:16:17,226
which means that it's a
reference that I can manipulate,


286
00:16:17,226 --> 00:16:21,326
and let's name it Hello Label.


287
00:16:22,096 --> 00:16:28,796
So now we have references
for our elements.


288
00:16:29,786 --> 00:16:31,876
We need to add some
code to our action


289
00:16:32,056 --> 00:16:33,666
that actually manipulates
our label.


290
00:16:35,106 --> 00:16:37,836
Now, I think a label has a
property that we can use,


291
00:16:38,226 --> 00:16:42,196
but I'm not exactly sure, so
here's when using Option Click


292
00:16:42,196 --> 00:16:44,376
and Command Click in
Xcode comes in handy.


293
00:16:45,466 --> 00:16:48,186
So we, when we created our
reference for our label,


294
00:16:48,556 --> 00:16:51,006
it declared it as an instance
of the UI label class.


295
00:16:51,006 --> 00:16:55,436
I can Option Click on this
label on the class name


296
00:16:56,106 --> 00:16:59,316
to get a quick help description
of what this class does


297
00:16:59,666 --> 00:17:00,886
and also its availability.


298
00:17:01,486 --> 00:17:06,146
I can also Command Click on
UI label, which will take me


299
00:17:06,185 --> 00:17:08,306
to the, to where it's declared.


300
00:17:09,906 --> 00:17:12,616
And if I just want to look
up documentation for this,


301
00:17:13,415 --> 00:17:18,326
I can navigate to Help
Documentation and API Reference


302
00:17:19,036 --> 00:17:20,996
and search for the class.


303
00:17:21,806 --> 00:17:26,086
So I'll search for UI label,
and here we have a description,


304
00:17:26,116 --> 00:17:29,626
overview, and all of the
properties of that class listed.


305
00:17:30,546 --> 00:17:33,886
So here it says that a
label has a text property,


306
00:17:34,916 --> 00:17:38,316
so that's what we can use
to actually display Hello.


307
00:17:38,866 --> 00:17:42,886
Let's close documentation
and navigate back


308
00:17:43,086 --> 00:17:46,566
to our view controller file
by clicking on the back arrow


309
00:17:46,566 --> 00:17:49,956
in the jump bar and
add some code.


310
00:17:49,956 --> 00:17:53,596
So I want to manipulate
Hello Label,


311
00:17:53,596 --> 00:17:57,226
so I'll start typing that,
and as I start typing,


312
00:17:57,226 --> 00:18:00,386
Xcode will provide suggestions
for things to autocomplete.


313
00:18:00,996 --> 00:18:02,636
This is Xcode's code completion.


314
00:18:03,786 --> 00:18:05,516
I can autocomplete
it by hitting Tab,


315
00:18:05,716 --> 00:18:10,176
and I want to access
the text property.


316
00:18:10,366 --> 00:18:11,696
I can also autocomplete that.


317
00:18:13,136 --> 00:18:15,506
And let's set it equal
to the string Hello.


318
00:18:16,106 --> 00:18:18,646
So now we have some code.


319
00:18:19,186 --> 00:18:20,246
We have our references.


320
00:18:20,246 --> 00:18:21,556
Let's see if this
actually worked


321
00:18:22,556 --> 00:18:24,816
by rerunning it in
the simulator.


322
00:18:30,436 --> 00:18:31,946
So our app is launching.


323
00:18:33,316 --> 00:18:35,916
Here's our button,
and it changed.


324
00:18:36,486 --> 00:18:37,726
Very exciting, right?


325
00:18:38,516 --> 00:18:42,386
[ Applause ]


326
00:18:42,886 --> 00:18:43,526
Yes [laughter].


327
00:18:43,726 --> 00:18:49,566
So now you know how to create
a new project in Xcode,


328
00:18:49,566 --> 00:18:52,916
how to add a simple feature, and
how to run it in the simulator.


329
00:18:53,396 --> 00:18:56,736
But it's very likely that you'll
be learning how to use Xcode


330
00:18:56,736 --> 00:18:59,566
on an existing project
that's way more complicated


331
00:18:59,566 --> 00:19:03,586
than our button and label, so
let's fast-forward a little bit.


332
00:19:03,856 --> 00:19:05,966
Now that Rick and
I know the basics,


333
00:19:06,316 --> 00:19:08,136
we've been implementing
some more features,


334
00:19:09,066 --> 00:19:12,466
so I'd like to invite Rick
up on stage to take you


335
00:19:12,466 --> 00:19:14,716
through the rest of Xcode's
development workflow.


336
00:19:17,516 --> 00:19:23,146
[ Applause ]


337
00:19:23,646 --> 00:19:24,286
>> Thanks, Najla.


338
00:19:24,536 --> 00:19:27,616
So for the past week, we've been
building our own little app.


339
00:19:27,826 --> 00:19:30,036
We decided to write
an earthquake tracker


340
00:19:30,036 --> 00:19:32,306
so we could see what earthquakes
have happened recently.


341
00:19:33,236 --> 00:19:35,876
We're nearly done, and of
course, we wrote unit tests


342
00:19:35,876 --> 00:19:37,526
so that we could make
sure that our code works,


343
00:19:37,786 --> 00:19:40,116
and I think we still have a
couple problems left to fix.


344
00:19:40,696 --> 00:19:42,586
Let's take a look and dive


345
00:19:42,586 --> 00:19:44,946
into Xcode's debugger
and unit testing.


346
00:19:45,496 --> 00:19:48,226
So to start out with, we need


347
00:19:48,226 --> 00:19:50,116
to check our project
our of source control.


348
00:19:50,896 --> 00:19:52,336
Xcode supports the Git


349
00:19:52,336 --> 00:19:54,546
and Subversion source
control systems.


350
00:19:54,986 --> 00:19:56,376
To check out our project,


351
00:19:56,826 --> 00:19:59,396
I can go to Xcode's
source control menu


352
00:19:59,816 --> 00:20:01,626
and choose the Check
Out command.


353
00:20:03,166 --> 00:20:06,056
This gives me Xcode's check
out UI, and I can enter


354
00:20:06,056 --> 00:20:13,226
in the repository path, so
mine is at example.com/repos,


355
00:20:13,486 --> 00:20:16,006
and our project is
called Quakenator.


356
00:20:17,386 --> 00:20:18,146
I'll hit Next.


357
00:20:18,756 --> 00:20:20,086
Xcode will give me
a chance to put


358
00:20:20,086 --> 00:20:22,306
in my authentication
credentials for this repository.


359
00:20:23,526 --> 00:20:30,066
Whoops. And now Xcode
will ask me where I would


360
00:20:30,066 --> 00:20:32,716
like to check it out, so our
Documents folder is fine.


361
00:20:33,106 --> 00:20:35,456
I'll say Download, and
Xcode's checked your project


362
00:20:35,456 --> 00:20:37,476
out of source control and
we're ready to work with it.


363
00:20:37,916 --> 00:20:40,286
Now that we have a project
checked out, you'll notice


364
00:20:40,286 --> 00:20:42,496
that the source control menu
gives us a lot more options.


365
00:20:42,676 --> 00:20:43,966
We'll come back to
one of these later.


366
00:20:44,966 --> 00:20:48,316
So to start out with, let's
take a look at our unit tests.


367
00:20:48,316 --> 00:20:50,776
We could browse through our
project structure on the left


368
00:20:51,016 --> 00:20:52,886
and try to manually
find our test files,


369
00:20:53,266 --> 00:20:54,536
but there are some better ways.


370
00:20:55,306 --> 00:20:58,046
At the top of the navigator
area, there are a number


371
00:20:58,046 --> 00:20:59,236
of different navigators.


372
00:20:59,526 --> 00:21:01,156
These each give you
different views


373
00:21:01,236 --> 00:21:02,866
onto the content
in your project.


374
00:21:04,076 --> 00:21:07,436
One of these views is the find
navigator, and using this,


375
00:21:07,476 --> 00:21:10,496
I can search textually through
all the content in my project.


376
00:21:10,876 --> 00:21:13,766
So for example, we know that
all our test methods begin


377
00:21:13,766 --> 00:21:18,236
with the word Test, so
I can find text starting


378
00:21:18,236 --> 00:21:20,276
with the word Test.


379
00:21:20,866 --> 00:21:22,006
Just hit Return.


380
00:21:22,236 --> 00:21:25,566
And here Xcode has found every
word that begins with Test


381
00:21:25,876 --> 00:21:28,366
in my project, including
both my test methods


382
00:21:28,366 --> 00:21:29,696
and some comments
and other hits.


383
00:21:30,646 --> 00:21:33,446
So that's great, but let's do
something a little smarter.


384
00:21:33,796 --> 00:21:37,886
If I want to find just my test
methods, I can find definitions.


385
00:21:37,886 --> 00:21:40,496
These are where my symbols, like
my test methods, are defined.


386
00:21:41,126 --> 00:21:43,356
Again, starting with
the word Test,


387
00:21:44,066 --> 00:21:46,636
and here it's found
just my test methods.


388
00:21:46,636 --> 00:21:49,786
So the find navigator
is a great way to search


389
00:21:49,786 --> 00:21:50,996
through the content
in your project,


390
00:21:51,416 --> 00:21:52,966
but since we're specifically
trying to look


391
00:21:52,966 --> 00:21:56,046
for our unit tests here, Xcode
gives us an even better way,


392
00:21:56,546 --> 00:21:58,326
and that's the test navigator.


393
00:21:59,356 --> 00:22:00,636
In the test navigator,


394
00:22:00,636 --> 00:22:03,996
Xcode automatically lists
every unit test and UI test


395
00:22:04,146 --> 00:22:06,846
and performance test that Xcode
has found in your project.


396
00:22:07,856 --> 00:22:10,536
Some of these are grayed
out like my UI tests,


397
00:22:10,976 --> 00:22:13,026
and that's because those
tests aren't configured


398
00:22:13,026 --> 00:22:14,806
to run in my current scheme.


399
00:22:15,196 --> 00:22:18,166
I have a separate scheme for
when I want to run my UI tests.


400
00:22:19,256 --> 00:22:21,746
The rest of the tests are
shown in black, and that means


401
00:22:21,746 --> 00:22:24,716
that when I perform the test
action, these tests will run,


402
00:22:25,126 --> 00:22:26,536
so let's go ahead and try that.


403
00:22:27,326 --> 00:22:30,426
From the product menu, I
have the test action as well


404
00:22:30,426 --> 00:22:32,036
as the other four
scheme actions.


405
00:22:32,786 --> 00:22:34,746
Run will run my app
in the debugger.


406
00:22:35,726 --> 00:22:37,266
Test will run my tests.


407
00:22:38,346 --> 00:22:40,186
Profile will run my
app in instruments


408
00:22:40,186 --> 00:22:41,796
so I can measure
its performance.


409
00:22:42,296 --> 00:22:44,956
Analyze will run
Xcode's static analyzer


410
00:22:44,956 --> 00:22:47,396
and help catch problems I
might otherwise have missed.


411
00:22:48,086 --> 00:22:51,046
And finally, the Archive action
will build my app for release


412
00:22:51,246 --> 00:22:53,926
and put it in the archive that
I can then use to distribute


413
00:22:53,986 --> 00:22:56,426
to my testers or to the
App Store or to save


414
00:22:56,426 --> 00:22:58,476
for future crash
log desymbolication,


415
00:22:58,476 --> 00:22:59,296
or symbolication.


416
00:22:59,936 --> 00:23:01,026
This command will become enabled


417
00:23:01,026 --> 00:23:04,296
in this menu once I select a
device as my run destination.


418
00:23:05,386 --> 00:23:08,516
I'm going to go ahead and select
a test action, and when I do,


419
00:23:08,676 --> 00:23:11,716
I want you to watch the activity
area up at the top of the window


420
00:23:11,786 --> 00:23:13,746
because it'll tell you
what Xcode is doing.


421
00:23:14,556 --> 00:23:17,726
So I'll select Test, and you can
see Xcode is now building my app


422
00:23:17,726 --> 00:23:20,656
and then it's going to build my
test code, and it would run it,


423
00:23:20,656 --> 00:23:23,126
but it looks like we
have a compiler error.


424
00:23:23,126 --> 00:23:28,216
When a compiler error
occurred, a badge showed


425
00:23:28,216 --> 00:23:30,286
up at the right-hand side
of the activity area,


426
00:23:30,336 --> 00:23:31,426
showing that there was an issue,


427
00:23:31,876 --> 00:23:33,596
and Xcode automatically
switched me


428
00:23:33,596 --> 00:23:35,296
to the issue navigator
on the left.


429
00:23:36,156 --> 00:23:38,486
This behavior, like
automatically switching


430
00:23:38,486 --> 00:23:40,976
to the navigator that shows
issues when an issue occurs,


431
00:23:40,976 --> 00:23:43,586
is something you can
actually configure in Xcode,


432
00:23:43,756 --> 00:23:46,646
and as you learn to make it work
the way you want, you might want


433
00:23:46,646 --> 00:23:48,766
to dive in and configure
these sorts of behaviors.


434
00:23:49,586 --> 00:23:52,156
You can do that in Xcode's
behaviors preferences.


435
00:23:52,756 --> 00:23:54,166
If you choose to edit behaviors,


436
00:23:54,436 --> 00:23:56,066
Xcode will give you
a preference sheet


437
00:23:56,306 --> 00:23:58,246
that lets you configure all
these sorts of behaviors.


438
00:23:58,246 --> 00:24:00,436
So when a build generates
issues,


439
00:24:00,976 --> 00:24:02,266
we show the issue navigator.


440
00:24:03,096 --> 00:24:05,266
When a test generates
issues like a test failure,


441
00:24:05,266 --> 00:24:07,136
we show the test
navigator, and so forth.


442
00:24:07,536 --> 00:24:10,616
As you start to get comfortable
in Xcode and want to start


443
00:24:10,616 --> 00:24:12,766
to make it work the way you
want with your workflow,


444
00:24:13,016 --> 00:24:14,656
I recommend checking
out behaviors.


445
00:24:16,436 --> 00:24:19,746
So let's take a look at what our
actual compiler error is here.


446
00:24:19,946 --> 00:24:22,126
I'm going to go ahead and
just click on my issue


447
00:24:22,126 --> 00:24:24,696
in the issue navigator,
and this will jump right


448
00:24:24,736 --> 00:24:27,496
to our source code where the
compiler error has occurred.


449
00:24:28,716 --> 00:24:31,436
Xcode lists the error
right on the line of code


450
00:24:31,436 --> 00:24:32,756
where it's occurred,
and it looks


451
00:24:32,756 --> 00:24:35,876
like here my data source
object doesn't have a method


452
00:24:35,876 --> 00:24:37,846
or a property named
Assorted Quakes.


453
00:24:38,576 --> 00:24:41,096
You know, I think we had
Assorted Quakes property,


454
00:24:41,176 --> 00:24:43,546
and just yesterday we
renamed it in our code,


455
00:24:43,806 --> 00:24:45,996
and I guess we forgot to
rename it in our unit tests,


456
00:24:46,256 --> 00:24:48,436
so let's figure out how
to find what the new name


457
00:24:48,436 --> 00:24:49,336
of this method is.


458
00:24:50,556 --> 00:24:53,256
To start tracking that down, I'm
going to hold the Command key


459
00:24:53,256 --> 00:24:57,216
down and click on Data Source,
and that will jump to right


460
00:24:57,216 --> 00:24:58,706
where this variable is defined.


461
00:24:58,706 --> 00:25:00,316
So I can see that
I'm initializing it


462
00:25:00,316 --> 00:25:01,876
as a quake data source
right here.


463
00:25:02,876 --> 00:25:05,856
I'm then going to hold the
Command key down again and click


464
00:25:05,856 --> 00:25:08,616
on Quake Data Source, and this
will jump right to the file


465
00:25:08,616 --> 00:25:10,106
where quake data
source is defined.


466
00:25:10,826 --> 00:25:13,296
I could start scrolling
through this file looking


467
00:25:13,296 --> 00:25:15,436
for my property, but
there's a better way.


468
00:25:15,976 --> 00:25:20,746
The jump bar at the top of the
source editor lists every method


469
00:25:20,746 --> 00:25:22,466
that Xcode has found
in this file


470
00:25:22,716 --> 00:25:24,096
in the order in which
they appear.


471
00:25:24,096 --> 00:25:26,676
There are a couple extra
ways to get around this.


472
00:25:27,006 --> 00:25:30,166
If I hold the Command key when I
pop it down, Xcode will bring it


473
00:25:30,166 --> 00:25:31,866
down in alphabetical
order instead


474
00:25:31,866 --> 00:25:33,286
of in an order of appearance.


475
00:25:34,526 --> 00:25:36,996
Or I can simply type
with this up,


476
00:25:36,996 --> 00:25:39,356
and Xcode will filter
on the list.


477
00:25:39,736 --> 00:25:41,566
So it used to be
called Sorted Quakes.


478
00:25:41,566 --> 00:25:43,146
Probably still has
Quakes in the name.


479
00:25:43,536 --> 00:25:46,516
I'll type Quakes, and here are
just the properties and methods


480
00:25:46,516 --> 00:25:47,676
that include the word Quakes.


481
00:25:48,396 --> 00:25:49,726
One of these is orderedQuakes.


482
00:25:49,926 --> 00:25:51,666
I think that's the new
name of our property.


483
00:25:52,686 --> 00:25:54,696
This is actually a
nice, fuzzy search,


484
00:25:54,946 --> 00:25:57,036
so you can find things
even easier than this.


485
00:25:57,516 --> 00:26:01,726
If I simply type OQ, Xcode
is able to find orderedQuakes


486
00:26:01,726 --> 00:26:03,776
because the letters
O and Q appear


487
00:26:03,776 --> 00:26:05,216
in this property
name in that order.


488
00:26:05,296 --> 00:26:08,486
One last thing I want
to show you here.


489
00:26:09,116 --> 00:26:10,606
You'll notice that I
have a couple headers.


490
00:26:10,606 --> 00:26:13,426
Here's a to-do item reminding me
to add more performance tests,


491
00:26:13,826 --> 00:26:16,456
and I have a header dividing
my properties from my methods.


492
00:26:16,456 --> 00:26:19,956
You can actually configure these
yourself with special comments


493
00:26:19,956 --> 00:26:24,566
in your source code like to-do:
and mark with a header name,


494
00:26:24,846 --> 00:26:27,786
and that will let you organize
the jump bar pop-up just the way


495
00:26:27,786 --> 00:26:30,046
you want to make it easy to
navigate your source code.


496
00:26:31,146 --> 00:26:32,966
All right, so let's
find our property.


497
00:26:33,166 --> 00:26:35,626
I'll type OQ again and
select orderedQuakes.


498
00:26:36,166 --> 00:26:38,616
It's found it for me right
here, so let's go ahead


499
00:26:38,616 --> 00:26:39,946
and copy this method name.


500
00:26:40,626 --> 00:26:43,326
I'm going to use the back
arrow in order to jump back


501
00:26:43,366 --> 00:26:46,656
to my test file, and
I'm going to go ahead


502
00:26:46,656 --> 00:26:48,496
and paste the new
method name in here.


503
00:26:48,806 --> 00:26:50,986
When I do that, I want you
to notice the error badge


504
00:26:50,986 --> 00:26:53,356
on the left-hand side of the
source editor and the error


505
00:26:53,356 --> 00:26:56,606
in my issue navigator
pasted in the right name,


506
00:26:56,606 --> 00:26:58,596
and both of those
badges disappeared.


507
00:26:58,876 --> 00:27:01,216
And that's because the issue
navigator is tracking what


508
00:27:01,216 --> 00:27:04,416
you're doing in real time, so we
can show the state of your code


509
00:27:04,606 --> 00:27:07,416
as you edit it without having
to wait until you hit Build


510
00:27:07,416 --> 00:27:10,246
to see whether things are right.


511
00:27:10,796 --> 00:27:13,296
Okay, so we fixed
our compiler error.


512
00:27:13,296 --> 00:27:14,996
Let's go ahead and
run our tests again.


513
00:27:15,886 --> 00:27:18,856
When I do this, Xcode's going to
compile my changes to my code,


514
00:27:19,246 --> 00:27:21,886
and it's now preparing to run
my tests in the simulator,


515
00:27:22,086 --> 00:27:23,906
as you can see from the
activity area at the top.


516
00:27:24,956 --> 00:27:27,166
Looks like our tests are
running, so let's switch


517
00:27:27,166 --> 00:27:30,386
to the test navigator to see
what's going on, and I can see


518
00:27:30,386 --> 00:27:33,166
from the spinner here
that this test is running.


519
00:27:33,166 --> 00:27:34,786
It looks like one of
my performance tests,


520
00:27:35,186 --> 00:27:36,306
and this might take a while,


521
00:27:36,306 --> 00:27:38,996
so let's actually hit the Stop
button and take a step back.


522
00:27:40,106 --> 00:27:42,846
Performance tests are great
to have, but what I'm trying


523
00:27:42,846 --> 00:27:45,516
to iterate on fixing my unit
tests I might not want to have


524
00:27:45,516 --> 00:27:47,416
to wait for my performance
tests every time.


525
00:27:47,976 --> 00:27:50,376
So we can do that by
configuring a different scheme


526
00:27:50,376 --> 00:27:52,226
that doesn't run my
performance tests.


527
00:27:53,516 --> 00:27:56,006
To configure my scheme, I'm
going to go to the Scheme pop-up


528
00:27:56,216 --> 00:27:57,646
and choose Edit Scheme.


529
00:27:58,876 --> 00:28:01,406
Here Xcode will bring down
the scheme editing sheet.


530
00:28:01,946 --> 00:28:04,456
You can see that there's a
tab on the left corresponding


531
00:28:04,456 --> 00:28:07,496
to each of the five scheme
actions as well as a Build tab


532
00:28:07,496 --> 00:28:09,376
at the top that lets
me configure


533
00:28:09,376 --> 00:28:12,186
which targets this
scheme will build in order


534
00:28:12,186 --> 00:28:14,566
to perform the actions on the
products of those targets.


535
00:28:16,046 --> 00:28:17,706
For an action like
Run, I have options


536
00:28:17,706 --> 00:28:19,766
like what executable
I want to run.


537
00:28:19,766 --> 00:28:20,756
In this case, it's my app.


538
00:28:21,636 --> 00:28:23,006
What command line arguments


539
00:28:23,006 --> 00:28:24,846
and environment variables
I might want to pass.


540
00:28:25,666 --> 00:28:27,056
Even special diagnostics


541
00:28:27,056 --> 00:28:29,136
like Xcode's powerful
address sanitizer


542
00:28:29,136 --> 00:28:30,746
that will help you
track down problems.


543
00:28:31,176 --> 00:28:35,086
Since these diagnostics are
options just on the Run action,


544
00:28:35,306 --> 00:28:38,216
they won't have any effect on
the actual app later archived


545
00:28:38,216 --> 00:28:40,136
for distribution, so
you don't have to worry


546
00:28:40,136 --> 00:28:41,976
about these diagnostics
interfering


547
00:28:41,976 --> 00:28:43,216
with what you submit
to the App Store.


548
00:28:44,396 --> 00:28:47,116
I'm going to go to the Test
action, and here you can see


549
00:28:47,116 --> 00:28:49,416
where I've configured what
tests this scheme will run.


550
00:28:50,206 --> 00:28:52,536
Before I start changing that,
I'm going to do something


551
00:28:52,536 --> 00:28:54,456
that I often do when
editing schemes,


552
00:28:54,646 --> 00:28:56,836
and that's to make
a copy of my scheme


553
00:28:57,066 --> 00:28:58,616
and make the edits in the copy.


554
00:28:59,486 --> 00:29:01,006
That's because I still
want to keep a scheme


555
00:29:01,006 --> 00:29:03,006
around that knows how to
run my performance tests


556
00:29:03,316 --> 00:29:05,016
because I do want to run
my performance tests.


557
00:29:05,016 --> 00:29:06,676
I just want a different scheme


558
00:29:06,676 --> 00:29:08,556
that lets me run
only the unit tests.


559
00:29:09,546 --> 00:29:10,736
So to do that, I'm going


560
00:29:10,736 --> 00:29:12,526
to select the Duplicate
Scheme button.


561
00:29:13,426 --> 00:29:15,606
Xcode will give me a chance to
give this new scheme a name,


562
00:29:15,646 --> 00:29:18,406
so we'll call it
QuakenatorNoPerf.


563
00:29:19,506 --> 00:29:21,316
And now I can go
to the Test action,


564
00:29:21,606 --> 00:29:22,866
find my performance tests,


565
00:29:23,196 --> 00:29:26,236
and uncheck the checkbox
to disable them.


566
00:29:26,506 --> 00:29:28,746
From here, you can
actually disable tests


567
00:29:28,746 --> 00:29:31,016
on a per-test basis
if, for example,


568
00:29:31,016 --> 00:29:32,096
you have a test that's failing


569
00:29:32,096 --> 00:29:33,556
that you're not going
to any time soon.


570
00:29:34,566 --> 00:29:37,146
All right, I think we're done
with configuring our new scheme,


571
00:29:37,516 --> 00:29:39,236
but before I go back
to running our tests,


572
00:29:39,376 --> 00:29:41,176
I want to show you one
more useful thing here,


573
00:29:41,176 --> 00:29:43,476
and that's how to
manage your schemes.


574
00:29:44,676 --> 00:29:46,416
The Manage Schemes
button at the bottom


575
00:29:46,416 --> 00:29:49,556
of this sheet will bring you to
Xcode's scheme management sheet,


576
00:29:49,916 --> 00:29:51,786
and here we show
you every scheme


577
00:29:51,786 --> 00:29:53,286
that Xcode has found
in your project.


578
00:29:54,406 --> 00:29:56,466
I'd like to especially
call your attention


579
00:29:56,746 --> 00:29:58,706
to the shared checkbox
column on the right.


580
00:29:59,706 --> 00:30:02,456
If a scheme is shared,
assuming that you also checked


581
00:30:02,456 --> 00:30:06,066
that scheme into source control,
all your coworkers will also get


582
00:30:06,166 --> 00:30:08,286
that same scheme when they
work with this project,


583
00:30:08,786 --> 00:30:10,846
and any edits they or you make,


584
00:30:11,126 --> 00:30:13,446
assuming that you check those
edits into source control,


585
00:30:13,866 --> 00:30:15,396
will be shared with
your coworkers,


586
00:30:15,646 --> 00:30:18,406
so this makes it really easy to
configure a particular scheme


587
00:30:18,406 --> 00:30:19,616
that you want everyone to use


588
00:30:19,816 --> 00:30:21,156
and share it with
your coworkers.


589
00:30:22,706 --> 00:30:25,446
Since my coworkers might want
to be able to run the unit tests


590
00:30:25,446 --> 00:30:27,846
without the performance tests
too, I'm going to go ahead


591
00:30:27,846 --> 00:30:28,856
and share my new scheme.


592
00:30:30,046 --> 00:30:32,646
Okay, I think we're done
here, so let's go back


593
00:30:32,976 --> 00:30:34,616
and run our tests one more time.


594
00:30:35,156 --> 00:30:40,016
It's preparing to run my
tests in the simulator,


595
00:30:41,026 --> 00:30:43,436
attaching to my tests, and
now it's running the tests.


596
00:30:43,676 --> 00:30:47,276
And you can see from the test
navigator on the left that most


597
00:30:47,276 --> 00:30:49,966
of my tests have passed,
but I have one test failure.


598
00:30:51,346 --> 00:30:53,116
If I want a closer look
at what just happened,


599
00:30:53,306 --> 00:30:55,886
I can find that in
Xcode's reports navigator.


600
00:30:57,296 --> 00:31:00,976
The reports navigator shows
the log for every action


601
00:31:00,976 --> 00:31:04,126
that I performed grouped by
the scheme which was used


602
00:31:04,126 --> 00:31:05,076
to perform that action.


603
00:31:05,836 --> 00:31:09,376
So here I just perform a Build
automatically when I went


604
00:31:09,376 --> 00:31:11,866
to test and then the
tests that I requested.


605
00:31:13,096 --> 00:31:15,376
If I select the Build log
and adjust the filters


606
00:31:15,376 --> 00:31:19,036
to show me everything, I can
see every command that Xcode ran


607
00:31:19,036 --> 00:31:21,976
to build both my
application and my unit tests.


608
00:31:22,856 --> 00:31:27,376
If I select the Test log, Xcode
shows me every test that it ran,


609
00:31:27,906 --> 00:31:30,366
its status, and I
can even turn this


610
00:31:30,366 --> 00:31:32,746
down to find the
test failure message.


611
00:31:32,986 --> 00:31:34,786
In this case, one of my
test assertions failed


612
00:31:34,786 --> 00:31:37,176
because an earthquake
magnitude was out of bounds.


613
00:31:38,796 --> 00:31:40,346
I'm going to hover
over one of my tests,


614
00:31:40,346 --> 00:31:42,146
and I'll get a little
jump arrow here.


615
00:31:42,856 --> 00:31:44,716
So if I select that,
Xcode will jump me right


616
00:31:44,716 --> 00:31:45,746
to the failing test.


617
00:31:46,936 --> 00:31:50,486
Here you can see where I declare
my test, and there's a badge


618
00:31:50,486 --> 00:31:52,356
to the left of the
test method indicating


619
00:31:52,356 --> 00:31:53,866
that that test is
currently failing.


620
00:31:55,016 --> 00:31:57,576
If I scroll down, I can find
the actual test failure.


621
00:31:58,306 --> 00:32:00,406
Here I have a test assertion
that's checking the range


622
00:32:00,406 --> 00:32:04,686
of my test data or earthquake
data magnitude, and it looks


623
00:32:04,686 --> 00:32:06,686
like this range check
is failing.


624
00:32:06,686 --> 00:32:08,236
Actually, this looks
pretty simple.


625
00:32:08,236 --> 00:32:10,856
I think I just have a less than
when I should have a greater


626
00:32:10,856 --> 00:32:13,696
than because I'm trying to check
the interior of this range,


627
00:32:13,986 --> 00:32:15,466
so I think that should
fix my test.


628
00:32:16,856 --> 00:32:19,676
Let's go ahead and run this test
again and see if that fixes,


629
00:32:20,286 --> 00:32:22,946
but since I'm trying to iterate
on just this one failing test,


630
00:32:23,216 --> 00:32:25,636
there's a faster way than
running all my tests every time.


631
00:32:25,916 --> 00:32:27,566
I can run just this test.


632
00:32:28,506 --> 00:32:30,556
To do that, I can go
to the test navigator


633
00:32:30,956 --> 00:32:32,566
and mouse over my test.


634
00:32:32,896 --> 00:32:35,276
You'll see that the badge
turns into a little Play button


635
00:32:35,276 --> 00:32:38,056
when I do that that would
let me run just this test


636
00:32:38,056 --> 00:32:40,406
or I can run just an
entire suite of tests,


637
00:32:41,196 --> 00:32:43,336
or if I don't want to switch
back to the test navigator,


638
00:32:43,576 --> 00:32:46,426
I can even run my test right
from the source editor simply


639
00:32:46,426 --> 00:32:48,536
by mousing over the
failure badge to the left


640
00:32:48,536 --> 00:32:51,336
of the test method and clicking
the Play button that appears.


641
00:32:52,666 --> 00:32:53,676
So let's click that now.


642
00:32:54,206 --> 00:32:56,686
It's building my change to
my tests, and it's going


643
00:32:56,686 --> 00:32:57,946
to run my tests again.


644
00:33:00,116 --> 00:33:02,246
So it's ran my tests
again, and it looks


645
00:33:02,246 --> 00:33:04,936
like my test is still failing,
so I must have another problem.


646
00:33:04,936 --> 00:33:08,836
I'm going to scroll
down, and here I see each


647
00:33:08,836 --> 00:33:11,746
of my earthquakes
has a visual badge


648
00:33:11,746 --> 00:33:13,606
that graphically
indicates its magnitude,


649
00:33:13,916 --> 00:33:16,526
and for my test earthquake
data, I'm just making sure


650
00:33:16,526 --> 00:33:18,476
that every earthquake
has a graphical badge,


651
00:33:18,476 --> 00:33:21,536
but one of them has a nil badge,
so it's missing its badge.


652
00:33:22,586 --> 00:33:24,786
This doesn't look like a
problem with my test code.


653
00:33:24,786 --> 00:33:26,796
It's probably a problem
with a code that sets


654
00:33:26,796 --> 00:33:29,226
up these earthquakes, so I'm
going to jump to that code


655
00:33:29,646 --> 00:33:31,396
and take a closer look
at what's going on.


656
00:33:32,696 --> 00:33:34,536
We're showing you a
number of ways to navigate


657
00:33:34,536 --> 00:33:35,906
around your code in Xcode today,


658
00:33:36,116 --> 00:33:38,816
but I'm about to show you the
single most useful navigational


659
00:33:38,816 --> 00:33:39,746
gesture that we have.


660
00:33:41,186 --> 00:33:43,796
In Xcode's file menu,
we have a command --


661
00:33:44,186 --> 00:33:46,106
whoop -- called Open Quickly.


662
00:33:46,916 --> 00:33:48,846
This is one keyboard shortcut
you will definitely want


663
00:33:48,846 --> 00:33:51,366
to memorize, Command
Shift O, as you'll want


664
00:33:51,366 --> 00:33:52,606
to use this all the time.


665
00:33:53,686 --> 00:33:56,856
If I select Open Quickly, I
get a textbox in the middle


666
00:33:56,856 --> 00:34:00,806
of my window, and I can type in
this to search all the symbols,


667
00:34:01,036 --> 00:34:04,366
like my method names, in
my own project as well


668
00:34:04,366 --> 00:34:08,025
as all the symbols in Apple's
API, so it makes it really easy


669
00:34:08,025 --> 00:34:10,616
to find whatever I'm looking
for, whether it's in my own code


670
00:34:10,846 --> 00:34:12,315
or in the system frameworks.


671
00:34:13,446 --> 00:34:15,926
This also is a nice, fuzzy
search, so I don't have


672
00:34:15,926 --> 00:34:18,186
to know exactly the name
of what I'm looking for.


673
00:34:18,565 --> 00:34:20,306
In this case, I think
my earthquakes are set


674
00:34:20,306 --> 00:34:22,396
up in some method
that fetches quakes,


675
00:34:22,696 --> 00:34:24,956
so let's try typing
Fetch Quakes,


676
00:34:25,545 --> 00:34:28,835
and you can see it's found my
Fetch Latest Quakes method,


677
00:34:29,235 --> 00:34:31,156
even though I didn't have
the name exactly right


678
00:34:31,156 --> 00:34:34,196
because it's a fuzzy match,
and there are three instances


679
00:34:34,196 --> 00:34:35,755
where this method
shows up in my project,


680
00:34:36,065 --> 00:34:38,036
but the first one that's
selected is where I set


681
00:34:38,036 --> 00:34:39,716
up my test data, so
that's the right one.


682
00:34:39,716 --> 00:34:43,636
So I'm just going to hit Return
to jump right to that code.


683
00:34:44,076 --> 00:34:46,726
Okay, so here I'm setting
up my test earthquakes.


684
00:34:47,045 --> 00:34:50,126
I don't see anything obviously
wrong with this, so it's time


685
00:34:50,126 --> 00:34:51,856
to take a closer look
at what's going on.


686
00:34:52,196 --> 00:34:54,646
And to do that, I'm going
to use Xcode's debugger.


687
00:34:55,755 --> 00:34:58,546
Xcode's debugger is available
whenever you perform the Run


688
00:34:58,546 --> 00:35:00,236
or Test action in Xcode.


689
00:35:00,586 --> 00:35:03,666
And you can get it to stop
on a line of code or break


690
00:35:04,076 --> 00:35:05,966
by setting a break
point on that line.


691
00:35:06,526 --> 00:35:09,856
I can set a break point by
clicking on the left-hand side


692
00:35:09,856 --> 00:35:11,226
of the editor, and you'll see


693
00:35:11,226 --> 00:35:13,136
that a break point
badge appears.


694
00:35:14,106 --> 00:35:15,946
I can click on that
again to gray it out


695
00:35:15,946 --> 00:35:18,496
and temporarily disable it
if I want to skip past it


696
00:35:18,906 --> 00:35:21,616
or I could just drag it out
when I'm done with it and let go


697
00:35:21,616 --> 00:35:22,636
to delete my break point.


698
00:35:23,856 --> 00:35:25,856
In this case, I do want my
break point, so I'm going


699
00:35:25,856 --> 00:35:28,586
to click again to create
it, and let's go ahead


700
00:35:28,586 --> 00:35:29,686
and run our test again.


701
00:35:29,686 --> 00:35:32,556
I'm going to show you one last
quick way to run the same tests.


702
00:35:32,966 --> 00:35:35,146
There's a command in
Xcode called Test Again,


703
00:35:35,146 --> 00:35:39,096
and Test Again will run whatever
test or tests I ran last,


704
00:35:39,446 --> 00:35:40,536
so it makes it really easy


705
00:35:40,536 --> 00:35:42,926
to repeatedly run the same
tests as you work on them.


706
00:35:44,186 --> 00:35:46,486
I can get at Test Again
from Xcode's product menu


707
00:35:46,956 --> 00:35:48,806
under the Perform
Action submenu.


708
00:35:48,806 --> 00:35:51,166
There's actually a number
of useful commands in here,


709
00:35:51,246 --> 00:35:55,086
but here's Test Again, so
I'll go ahead and select it.


710
00:35:55,086 --> 00:35:57,396
Xcode's going to run
just this one test.


711
00:35:58,266 --> 00:36:00,106
It's attaching to my
test in the simulator,


712
00:36:00,106 --> 00:36:02,976
starting to run my
test, and you can see


713
00:36:02,976 --> 00:36:04,046
that Xcode has now stopped


714
00:36:04,046 --> 00:36:05,716
in the debugger on
this line of code.


715
00:36:06,866 --> 00:36:09,136
When the debugger stopped,
a few things happened.


716
00:36:09,826 --> 00:36:13,466
First, at the bottom, the Debug
bar appeared, giving me a number


717
00:36:13,466 --> 00:36:15,806
of different controls to allow
me to control the debugger,


718
00:36:16,026 --> 00:36:18,256
such as Continue, Step
Over, and Step Into.


719
00:36:19,756 --> 00:36:24,096
Below that is a variable area
showing me each of the variables


720
00:36:24,096 --> 00:36:25,546
that are visible in
my current scope.


721
00:36:26,106 --> 00:36:28,186
Here I declare three
different earthquake objects,


722
00:36:28,186 --> 00:36:29,716
but I haven't assigned
their values yet,


723
00:36:29,926 --> 00:36:31,016
so it shows no value.


724
00:36:31,576 --> 00:36:34,646
On the right-hand
side is a console area


725
00:36:34,646 --> 00:36:38,026
that shows all the output my
program has printed to standard


726
00:36:38,026 --> 00:36:41,876
out or standard error, and we'll
come back to that in a minute.


727
00:36:42,206 --> 00:36:44,566
Finally, you'll notice
because Xcode is stopped


728
00:36:44,566 --> 00:36:47,066
in the debugger, one of
those behaviors kicked in,


729
00:36:47,326 --> 00:36:50,026
and Xcode automatically switched
me to the debug navigator.


730
00:36:50,886 --> 00:36:52,356
Here Xcode shows
where I'm stopped


731
00:36:52,356 --> 00:36:53,746
in my code in every thread.


732
00:36:54,236 --> 00:36:57,376
This code is actually running on
a background thread right now,


733
00:36:57,376 --> 00:37:01,556
Thread 6, and all of my stack
frames that I have source code


734
00:37:01,556 --> 00:37:05,346
for are shown in black,
whereas all of the stack frames


735
00:37:05,346 --> 00:37:08,456
that contain system code that
I don't have source code for


736
00:37:08,456 --> 00:37:11,116
and can't look at
are shown in gray.


737
00:37:12,026 --> 00:37:14,556
You'll notice that there's
actually a dashed line here


738
00:37:14,556 --> 00:37:15,826
aligning some of these frames.


739
00:37:15,826 --> 00:37:18,906
It's because I don't really need
to see 10 frames of system code


740
00:37:18,906 --> 00:37:21,266
that I don't have source code
for, but of course, if I do want


741
00:37:21,266 --> 00:37:24,626
to see exactly what's happening,
I can adjust the filter controls


742
00:37:24,626 --> 00:37:26,096
at the bottom of
the debug navigator.


743
00:37:27,776 --> 00:37:29,836
All right, let's try stepping
over this line of code


744
00:37:29,836 --> 00:37:32,276
where we initialized this first
earthquake and see what happens.


745
00:37:32,276 --> 00:37:34,606
I'm going to use the Step
Over button to do that.


746
00:37:35,566 --> 00:37:37,876
When I do that, Xcode continues
to the next line of code,


747
00:37:38,206 --> 00:37:41,116
and you'll see that my first
earthquake object has been


748
00:37:41,116 --> 00:37:42,506
initialized in the
variables view.


749
00:37:42,506 --> 00:37:46,816
I can actually twist this open
to inspect all the properties


750
00:37:46,816 --> 00:37:50,596
of this new earthquake,
and here's my visual badge.


751
00:37:50,796 --> 00:37:53,026
Since this is an image and I
might want to take a close look


752
00:37:53,026 --> 00:37:55,246
at what this is, Xcode
gives me the ability


753
00:37:55,246 --> 00:37:58,986
to quick look objects like
this, and when I quick look it,


754
00:37:58,986 --> 00:38:01,646
Xcode will read the image right
out of my program's memory


755
00:38:01,796 --> 00:38:03,356
and display it graphically here


756
00:38:03,356 --> 00:38:06,046
so you can inspect exactly what
the value of that image is.


757
00:38:07,446 --> 00:38:09,606
Well, this badge
obviously isn't the program


758
00:38:09,606 --> 00:38:11,676
since this one isn't
nil, so let's check


759
00:38:11,676 --> 00:38:12,906
out the next earthquake.


760
00:38:13,256 --> 00:38:15,376
And to do that, I'm actually
going to step into the creation


761
00:38:15,376 --> 00:38:17,156
of this next earthquake
and see what happens.


762
00:38:18,116 --> 00:38:20,826
I use the Step Into
button here to step right


763
00:38:20,826 --> 00:38:21,776
into this initializer,


764
00:38:22,336 --> 00:38:25,236
and here's where we
initialize our earthquake.


765
00:38:25,236 --> 00:38:27,486
So I can just start stepping
through each line of code.


766
00:38:28,716 --> 00:38:30,356
Here's the switch
statement where we choose


767
00:38:30,356 --> 00:38:31,966
which magnitude badge to use.


768
00:38:32,376 --> 00:38:33,946
And here's the badge
we're initializing.


769
00:38:34,246 --> 00:38:36,516
I don't think this
is quite right.


770
00:38:36,516 --> 00:38:40,146
I don't think IIII is
a valid Roman numeral.


771
00:38:41,346 --> 00:38:45,406
So that's probably the problem,
and I could try fixing my code,


772
00:38:45,406 --> 00:38:47,166
stopping it, running
my test again,


773
00:38:47,486 --> 00:38:50,096
but Xcode makes it possible to
try things out without having


774
00:38:50,096 --> 00:38:51,856
to stop and start
over every time.


775
00:38:52,286 --> 00:38:54,726
And to do that, I'm going to
use a debugger expression.


776
00:38:55,436 --> 00:39:00,036
In the console area, I'm
going to use the PO command,


777
00:39:00,506 --> 00:39:02,036
which stands for Print Object,


778
00:39:02,656 --> 00:39:04,906
and this command will
take any valid Swift


779
00:39:04,906 --> 00:39:07,236
or Objective-C expression
and execute it for me.


780
00:39:07,726 --> 00:39:10,256
So I can simply copy
this image initializer


781
00:39:10,846 --> 00:39:12,796
and paste it right
into my console area.


782
00:39:12,796 --> 00:39:15,146
So let's make this console
area a little bigger


783
00:39:15,146 --> 00:39:17,436
and let's also clear
out the existing text


784
00:39:17,436 --> 00:39:19,166
with the Clear button so
I can see what I'm doing.


785
00:39:20,486 --> 00:39:23,596
And now I'm going to hit Return
to execute this expression


786
00:39:23,646 --> 00:39:26,876
in my application, and you can
see that it's returned nil,


787
00:39:26,876 --> 00:39:28,396
so there is no image
of that name.


788
00:39:29,616 --> 00:39:31,926
I'm going to press the up arrow
to recall this expression,


789
00:39:32,386 --> 00:39:35,856
and let's try IV, which I think
is the right Roman numeral


790
00:39:35,856 --> 00:39:36,366
for 4.


791
00:39:37,106 --> 00:39:38,416
So I'll hit Return
to execute that,


792
00:39:38,416 --> 00:39:40,706
and you can see the
Xcode has returned


793
00:39:40,706 --> 00:39:42,076
in actual image instance,


794
00:39:42,256 --> 00:39:44,366
so it looks like that's the
right name for this image.


795
00:39:44,366 --> 00:39:47,686
So at this point, I'm going to
go ahead and stop the debugger


796
00:39:48,496 --> 00:39:50,826
and I'll change my image to IV,


797
00:39:51,376 --> 00:39:54,866
and let's run our test one more
time with the Test Again action.


798
00:39:55,546 --> 00:39:58,976
So Xcode is building the
changes that I made to my code.


799
00:39:58,976 --> 00:40:00,976
It's preparing to run my tests.


800
00:40:01,266 --> 00:40:02,456
Let's switch to the
test navigator


801
00:40:02,456 --> 00:40:03,646
so I can see how it goes.


802
00:40:04,546 --> 00:40:07,786
And, oh, it looks like I
still have a break point set.


803
00:40:08,526 --> 00:40:10,746
So I want it to run my tests
and not stop in the debugger,


804
00:40:10,746 --> 00:40:13,016
so let's take a look at how
to manage our break points.


805
00:40:14,406 --> 00:40:17,376
Xcode's break points navigator
shows me all the break points


806
00:40:17,376 --> 00:40:21,326
that I have set in my project,
which I can disclose here,


807
00:40:21,326 --> 00:40:23,866
and I can disable them
individually here as well


808
00:40:24,236 --> 00:40:26,176
or select them and delete
them if I'm done with them.


809
00:40:27,026 --> 00:40:29,056
I can add special
kinds of break points


810
00:40:29,056 --> 00:40:31,286
in the break point
navigator like breaking


811
00:40:31,286 --> 00:40:34,286
on any Swift error that's
thrown, any unit test


812
00:40:34,286 --> 00:40:37,636
that fails, or on any symbolic
method name that I want.


813
00:40:37,636 --> 00:40:41,586
If I find that there's a certain
break point that I always want


814
00:40:41,586 --> 00:40:44,036
to have, like, say, a
test failure break point,


815
00:40:44,436 --> 00:40:48,206
I can make it available in every
project that I work with simply


816
00:40:48,536 --> 00:40:50,676
by selecting the break
point after I add it,


817
00:40:51,556 --> 00:40:53,146
bringing up the contextual menu,


818
00:40:53,646 --> 00:40:55,906
and choosing Move
Break Point to User.


819
00:40:57,006 --> 00:40:59,076
This moves that break point
to my user break points


820
00:40:59,276 --> 00:41:01,696
and makes it available for
me no matter what project I'm


821
00:41:01,696 --> 00:41:02,196
working with.


822
00:41:03,956 --> 00:41:04,376
All right.


823
00:41:04,496 --> 00:41:06,156
In this case, I'm
not quite ready


824
00:41:06,156 --> 00:41:08,426
to delete all my break points
yet in case this doesn't work,


825
00:41:08,756 --> 00:41:10,816
so let's temporarily
disable break points


826
00:41:10,816 --> 00:41:11,966
so that we don't stop at them.


827
00:41:12,536 --> 00:41:14,486
I can temporarily
disable my break points


828
00:41:14,696 --> 00:41:16,466
with the Break Points
button in the debug bar.


829
00:41:18,016 --> 00:41:19,336
I'll now press the
Continue button


830
00:41:19,336 --> 00:41:20,466
to finish running my test.


831
00:41:21,326 --> 00:41:23,876
Let's go back to the test
navigator, and you can see


832
00:41:23,876 --> 00:41:26,356
that all my tests are passing,
so it looks like we're done.


833
00:41:27,456 --> 00:41:28,846
Let's review what
we've done here.


834
00:41:29,836 --> 00:41:31,496
To review my changes,
I'm going to go back


835
00:41:31,496 --> 00:41:34,366
to Xcode's project navigator
and I'm going to use a filter


836
00:41:34,366 --> 00:41:36,866
at the bottom called the
source control status filter.


837
00:41:38,036 --> 00:41:40,826
This will make the project
navigator show me only those


838
00:41:40,826 --> 00:41:42,936
files that have a special
source control status,


839
00:41:43,176 --> 00:41:44,176
such as Modified.


840
00:41:45,156 --> 00:41:47,106
This both lets me see
what changes I've made


841
00:41:47,316 --> 00:41:50,056
and is really useful if I
want a sort of working set,


842
00:41:50,326 --> 00:41:52,036
a set of files I'm all
working on that I want


843
00:41:52,036 --> 00:41:53,036
to jump between quickly.


844
00:41:53,406 --> 00:41:56,346
If I modified those files, I
can use this filter to narrow it


845
00:41:56,346 --> 00:41:57,936
down to just those
files I'm working on.


846
00:41:58,506 --> 00:42:01,806
If I want to see the actual
changes I've made to one


847
00:42:01,806 --> 00:42:03,096
of these files, I can select it


848
00:42:03,096 --> 00:42:05,356
and use Xcode's third
editor mode.


849
00:42:06,206 --> 00:42:08,076
So we've already shown
you the basic editor


850
00:42:08,076 --> 00:42:09,146
and the assistant editor.


851
00:42:09,686 --> 00:42:11,906
Xcode's third editor mode
is the version editor,


852
00:42:12,176 --> 00:42:14,216
and it has three variants.


853
00:42:15,076 --> 00:42:18,116
The comparison editor
lets you compare changes


854
00:42:18,116 --> 00:42:20,586
between two revisions or
your uncommitted changes


855
00:42:20,586 --> 00:42:22,116
against the last
committed changes.


856
00:42:22,906 --> 00:42:26,256
The blame mode lets you see who
has changed each line of code


857
00:42:26,256 --> 00:42:27,716
in your file and
at what revision,


858
00:42:28,236 --> 00:42:30,966
and the log mode will show
you the source control log


859
00:42:30,966 --> 00:42:31,676
for your file.


860
00:42:32,906 --> 00:42:34,986
In this case, I want
the comparison mode.


861
00:42:36,426 --> 00:42:39,656
When I select this, Xcode shows
me two versions of my file.


862
00:42:40,296 --> 00:42:42,326
On the left is my
local revision,


863
00:42:42,386 --> 00:42:43,846
so these are the
changes that I've made,


864
00:42:44,446 --> 00:42:46,856
and on the right is the
last revision I've committed


865
00:42:46,856 --> 00:42:49,676
to source control, so this
is showing me the differences


866
00:42:49,716 --> 00:42:51,636
between what I've done and
what I've last committed.


867
00:42:52,136 --> 00:42:55,456
In the bottom middle are
some arrows that let me jump


868
00:42:55,456 --> 00:42:58,266
between my changes, and when
I'm looking at a change,


869
00:42:58,436 --> 00:43:01,266
Xcode will visually show me
what line the change happened on


870
00:43:01,436 --> 00:43:02,866
and even highlight exactly


871
00:43:02,866 --> 00:43:04,466
where the change
happened in that line.


872
00:43:04,466 --> 00:43:08,066
If I want to compare
against an older revision,


873
00:43:08,216 --> 00:43:10,716
I can actually pop this up
and choose whatever revision


874
00:43:10,716 --> 00:43:12,056
to the file I want
to compare against


875
00:43:12,786 --> 00:43:15,506
or I can even compare two
revision, older revisions


876
00:43:15,506 --> 00:43:17,666
against each other by
selecting a different revision


877
00:43:17,666 --> 00:43:18,256
on the left.


878
00:43:19,816 --> 00:43:22,306
I think these changes are great,
so it looks like it's time


879
00:43:22,306 --> 00:43:24,036
to go ahead and commit
our changes.


880
00:43:25,256 --> 00:43:27,706
To commit, I'm going to go to
Xcode's source control menu


881
00:43:27,706 --> 00:43:30,366
and choose the Commit
item, and this will bring


882
00:43:30,366 --> 00:43:31,596
down Xcode's commit sheet.


883
00:43:32,846 --> 00:43:35,316
On the left, I can see all
the files I've changed,


884
00:43:35,316 --> 00:43:37,986
including some settings
files, and if I select one,


885
00:43:37,986 --> 00:43:40,306
I'll get the comparison editor
right here in the commit sheet


886
00:43:40,516 --> 00:43:42,646
to give me one last chance
to review all my changes.


887
00:43:43,966 --> 00:43:47,246
From here, I can even discard
specific changes by clicking


888
00:43:47,246 --> 00:43:49,956
on the change marker and
choosing Don't Commit


889
00:43:49,956 --> 00:43:52,366
if I only want to commit some
of the changes that I've made.


890
00:43:53,086 --> 00:43:54,856
In this case, I want
to commit everything,


891
00:43:54,856 --> 00:43:56,106
so let's give it
a Commit message.


892
00:43:56,556 --> 00:44:00,916
I'll say Fixed Tests, and I
want to push my changes right


893
00:44:00,916 --> 00:44:03,686
to my coworkers when I commit,
so I'll click the Push checkbox.


894
00:44:04,016 --> 00:44:06,296
And let's go ahead and
commit our changes.


895
00:44:07,016 --> 00:44:07,956
So Xcode's committing.


896
00:44:07,956 --> 00:44:11,646
It's pushed our changes off to
my coworkers, and we're done.


897
00:44:12,436 --> 00:44:15,036
When you're ready to go
ahead and distribute your app


898
00:44:15,506 --> 00:44:18,136
to your testers or to the App
Store and want to learn how


899
00:44:18,136 --> 00:44:20,756
to do that or if there's
anything else we didn't cover


900
00:44:20,756 --> 00:44:23,966
today that you want to learn
more about, I recommend checking


901
00:44:23,966 --> 00:44:25,076
out Xcode's Help Book.


902
00:44:25,876 --> 00:44:28,506
You can get at the Help
Book from the Help menu


903
00:44:28,796 --> 00:44:33,496
by choosing Xcode Help, and
from here, you can either search


904
00:44:33,496 --> 00:44:36,126
for whatever you want more
information about or browse


905
00:44:36,126 --> 00:44:37,186
through a list of topics.


906
00:44:37,476 --> 00:44:40,346
For example, Archive and Output
Products, Create an Archive.


907
00:44:40,706 --> 00:44:42,786
Here Xcode tells me how
to create an archive


908
00:44:42,786 --> 00:44:43,756
for distributing my app.


909
00:44:45,156 --> 00:44:47,416
All right, well, we've taken you


910
00:44:47,416 --> 00:44:49,126
through a pretty complete
workflow here today,


911
00:44:49,706 --> 00:44:51,536
but there's one more key
piece of knowledge we'd


912
00:44:51,536 --> 00:44:54,376
like to leave you with before
we finish, and that's how


913
00:44:54,376 --> 00:44:56,656
to customize your source
code and your projects --


914
00:44:56,686 --> 00:44:57,946
sorry, how to customize
your projects --


915
00:44:58,036 --> 00:45:00,386
and configure them
for your own needs.


916
00:45:01,246 --> 00:45:03,656
To take you through Xcode's
core configuration concepts,


917
00:45:03,986 --> 00:45:08,806
I'd like to invite Najla back up
on stage to take you through it.


918
00:45:09,516 --> 00:45:13,546
[ Applause ]


919
00:45:14,046 --> 00:45:14,576
>> Thanks, Rick.


920
00:45:15,626 --> 00:45:18,336
So now you know the basic
development workflow in Xcode,


921
00:45:18,336 --> 00:45:20,416
and when you're just
getting started,


922
00:45:20,846 --> 00:45:23,816
that's probably all you'll
need, but as you start working


923
00:45:23,816 --> 00:45:26,096
on more complex projects,
you'll need to know how


924
00:45:26,096 --> 00:45:28,096
to configure your
projects and settings.


925
00:45:29,686 --> 00:45:30,926
So let's take a quick tour


926
00:45:31,006 --> 00:45:33,326
of Xcode's core configuration
concepts


927
00:45:33,726 --> 00:45:36,126
so that you'll understand
what you're working with.


928
00:45:36,976 --> 00:45:40,296
So there are five concepts that
we want to talk about today --


929
00:45:41,226 --> 00:45:44,326
Xcode projects and the
targets that they contain,


930
00:45:45,586 --> 00:45:47,666
the Build settings
and capabilities


931
00:45:47,726 --> 00:45:51,956
that configure how Xcode
behaves, and workspaces


932
00:45:51,956 --> 00:45:57,886
for organizing your project.


933
00:45:57,886 --> 00:46:01,366
So let's begin by
talking about projects.


934
00:46:02,096 --> 00:46:05,186
A project is a document
that you use


935
00:46:05,186 --> 00:46:08,426
to organize your code
an resources in Xcode.


936
00:46:09,826 --> 00:46:13,566
You have references to source
code files and resource files


937
00:46:14,896 --> 00:46:19,536
on disc, targets which actually
build those files into products


938
00:46:19,886 --> 00:46:23,196
like your app, Build settings


939
00:46:23,286 --> 00:46:25,846
which configure how your
targets build their products,


940
00:46:27,486 --> 00:46:30,646
and schemes which configure
how you perform actions,


941
00:46:31,086 --> 00:46:32,736
such as Run, with your targets.


942
00:46:34,856 --> 00:46:36,616
Now, to access your
project settings,


943
00:46:37,066 --> 00:46:38,716
you select your project
in the navigator,


944
00:46:38,716 --> 00:46:42,426
you select the popover
at the top of the editor,


945
00:46:42,876 --> 00:46:44,386
and select your project there.


946
00:46:45,356 --> 00:46:48,496
Now, your project settings are
distributed between two tabs,


947
00:46:49,256 --> 00:46:51,166
your Info and Build
settings tab.


948
00:46:51,806 --> 00:46:54,236
And most common settings
are available in Info.


949
00:46:54,956 --> 00:46:56,266
There's one that I
want to point out,


950
00:46:56,316 --> 00:46:58,536
which is the deployment
target of your application.


951
00:46:59,846 --> 00:47:02,246
Your deployment target
is the minimum OS version


952
00:47:02,636 --> 00:47:04,316
that your app can
run on and support.


953
00:47:04,866 --> 00:47:08,736
Currently, our app only supports
iOS 10, but if I wanted our app


954
00:47:08,966 --> 00:47:12,226
to support iOS 9, I could change
it here in the project settings.


955
00:47:13,056 --> 00:47:16,356
Let's move on to
talking about targets.


956
00:47:16,356 --> 00:47:21,506
A target contains the
instructions to build one thing


957
00:47:22,036 --> 00:47:23,876
like an app or a framework.


958
00:47:25,166 --> 00:47:27,966
The thing that your target
produces is called its product.


959
00:47:28,186 --> 00:47:32,236
The set of steps that
your target takes


960
00:47:32,326 --> 00:47:34,836
to build its product
are called build phases.


961
00:47:35,946 --> 00:47:38,956
And lastly, a target
has Build settings


962
00:47:39,186 --> 00:47:41,606
to configure how it
builds its product.


963
00:47:43,036 --> 00:47:46,206
Now, one thing to note
is that both projects


964
00:47:46,206 --> 00:47:47,716
and targets have Build settings,


965
00:47:47,766 --> 00:47:51,406
and targets inherit the value
set at the project level


966
00:47:51,846 --> 00:47:54,896
but can override them with
a target-specific value.


967
00:47:57,076 --> 00:48:01,556
A target's build phases do
things like cause dependencies


968
00:48:01,556 --> 00:48:04,906
to build first, compile the
source files in that target,


969
00:48:04,906 --> 00:48:08,026
and link the target against
libraries and frameworks.


970
00:48:08,896 --> 00:48:13,146
You can also add what's called
a run script build phase


971
00:48:13,386 --> 00:48:15,646
to configure other aspects
of the build that you'd like.


972
00:48:16,456 --> 00:48:20,626
You can access your
target settings


973
00:48:21,376 --> 00:48:25,236
by selecting your project in the
navigator, selecting the popover


974
00:48:25,236 --> 00:48:26,416
at the top of the editor,


975
00:48:26,456 --> 00:48:28,176
and picking the target
of your choice.


976
00:48:29,106 --> 00:48:33,236
Now, your target settings are
distributed between a few tabs,


977
00:48:34,356 --> 00:48:37,186
such as the Build Settings
tab, the Capabilities tab,


978
00:48:37,396 --> 00:48:39,506
and the Build Phases tab.


979
00:48:40,236 --> 00:48:42,336
So let's talk a little bit more


980
00:48:42,396 --> 00:48:44,736
about those Build
settings and capabilities.


981
00:48:45,486 --> 00:48:51,076
A Build setting contains a
name and a value of some aspect


982
00:48:51,506 --> 00:48:54,096
that controls some aspect
of the build process.


983
00:48:54,516 --> 00:48:57,116
For example, there are Build
settings for specifying


984
00:48:57,116 --> 00:48:58,756
which architectures
you want to build,


985
00:48:59,556 --> 00:49:03,046
whether your code is optimized,
what your product is named,


986
00:49:03,386 --> 00:49:04,936
and even how you
deal with warnings.


987
00:49:05,696 --> 00:49:10,446
The Build settings are
available at both the project


988
00:49:10,446 --> 00:49:13,426
and the target level in
the Build Settings tab


989
00:49:13,886 --> 00:49:17,176
in a big table that contains
all of the names and values.


990
00:49:18,006 --> 00:49:22,256
Now, Build settings
can also vary


991
00:49:22,256 --> 00:49:25,846
by what's called a build
configuration, and by default,


992
00:49:25,846 --> 00:49:28,716
a project has a debug and
a release configuration.


993
00:49:29,826 --> 00:49:31,816
For example, when you're
building for debug,


994
00:49:32,286 --> 00:49:34,416
you probably don't want
your code to be optimized,


995
00:49:34,876 --> 00:49:36,156
but when you're building
for release,


996
00:49:36,376 --> 00:49:40,876
you do want your
code to be optimized.


997
00:49:41,416 --> 00:49:43,256
In addition to fine-grain
Build settings,


998
00:49:43,596 --> 00:49:46,336
Xcode also offers
capabilities, which allows you


999
00:49:46,336 --> 00:49:48,406
to easily turn on
specific features.


1000
00:49:49,916 --> 00:49:52,386
For example, for iOS,
there are capabilities


1001
00:49:52,386 --> 00:49:55,496
for enabling in-app purchases
and Apple Maps integration,


1002
00:49:56,236 --> 00:49:59,036
and if you want more information
about what a capability does,


1003
00:49:59,536 --> 00:50:01,916
you can twist it open in
the Capabilities panel.


1004
00:50:02,956 --> 00:50:05,216
You can also enable or
disable a capability


1005
00:50:05,306 --> 00:50:11,456
by using the On/Off switch
on the right of the editor.


1006
00:50:11,456 --> 00:50:13,366
Lastly, let's talk
about workspaces.


1007
00:50:15,096 --> 00:50:17,506
So you may find over time
that you like to work


1008
00:50:17,506 --> 00:50:19,126
on a group of projects as a set.


1009
00:50:19,816 --> 00:50:21,926
For example, you might
have two projects


1010
00:50:22,256 --> 00:50:23,776
that share the same
framework and you


1011
00:50:23,776 --> 00:50:24,966
like to work on them together.


1012
00:50:25,576 --> 00:50:30,586
In this situation, you can
create an Xcode workspace


1013
00:50:30,636 --> 00:50:31,876
that references your projects.


1014
00:50:32,846 --> 00:50:37,706
So when you open your workspace
in Xcode, it'll contain all


1015
00:50:37,706 --> 00:50:40,466
of the contents of the
projects that you've referenced,


1016
00:50:40,866 --> 00:50:43,526
which makes it easy
to edit and navigate


1017
00:50:43,526 --> 00:50:45,806
across them as related code.


1018
00:50:47,356 --> 00:50:49,166
So now you know more


1019
00:50:49,226 --> 00:50:51,536
about Xcode's core
configuration concepts.


1020
00:50:52,176 --> 00:50:53,886
Armed with this knowledge
in addition


1021
00:50:53,886 --> 00:50:56,976
to Xcode's basic development
workflow, and you have the tools


1022
00:50:57,036 --> 00:50:59,566
to make some really
awesome apps.


1023
00:51:00,496 --> 00:51:04,686
So today we showed you the most
important components of Xcode


1024
00:51:04,686 --> 00:51:05,976
by building an application.


1025
00:51:06,906 --> 00:51:09,206
You learned how to create a
new application and run it


1026
00:51:09,206 --> 00:51:12,646
in the simulator and how
to test and debug it.


1027
00:51:12,686 --> 00:51:15,516
We also talked about some
of Xcode's invaluable tools,


1028
00:51:15,516 --> 00:51:18,926
such as Command and Option
Clicking and Open Quickly.


1029
00:51:20,246 --> 00:51:22,296
We also showed you
how to navigate


1030
00:51:22,296 --> 00:51:26,876
in your project using the
filter bar and the jump bar.


1031
00:51:27,526 --> 00:51:30,956
You learned how to review and
commit your changes and also how


1032
00:51:30,956 --> 00:51:33,386
to configure your project and
settings once you're ready


1033
00:51:33,386 --> 00:51:34,396
to submit it to the store.


1034
00:51:34,396 --> 00:51:39,446
We hope that after this session
you have a better understanding


1035
00:51:39,446 --> 00:51:42,616
of all of the different kinds of
things that you can do in Xcode,


1036
00:51:42,616 --> 00:51:47,536
and we're really excited to see
all of the apps that you create.


1037
00:51:47,536 --> 00:51:47,616
If--


1038
00:51:48,516 --> 00:51:53,906
[ Applause ]


1039
00:51:54,406 --> 00:51:58,636
Yeah. So if you want more
information about our session,


1040
00:51:58,636 --> 00:52:04,486
you can navigate to
developer.apple.com/wwdc16/413.


1041
00:52:05,026 --> 00:52:09,696
And if you're interested in a
specific component of Xcode,


1042
00:52:10,186 --> 00:52:12,566
there are a few sessions that
you can attend or watch online.


1043
00:52:13,216 --> 00:52:16,246
For example, there was a session
on Tuesday on Xcode app signing,


1044
00:52:16,246 --> 00:52:17,576
which is really important
when you're


1045
00:52:17,576 --> 00:52:19,076
about to submit your
app to the store.


1046
00:52:19,876 --> 00:52:23,076
There was a session on testing
and continuous integration


1047
00:52:23,706 --> 00:52:25,476
and on debugging
tips and tricks.


1048
00:52:26,866 --> 00:52:28,246
Thanks for watching our session,


1049
00:52:28,366 --> 00:52:30,976
and we hope that you have a
great time at the conference.


1050
00:52:31,516 --> 00:52:34,500
[ Applause ]

