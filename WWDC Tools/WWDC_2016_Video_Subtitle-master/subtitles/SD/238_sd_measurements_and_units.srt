1
00:00:07,516 --> 00:00:19,500
[ Music ]


2
00:00:27,516 --> 00:00:33,546
[ Applause ]


3
00:00:34,046 --> 00:00:35,826
>> Hi, my name is Daphne Larose.


4
00:00:35,826 --> 00:00:37,696
I'm a software engineer
on the Foundation Team.


5
00:00:38,186 --> 00:00:39,066
Welcome to my talk.


6
00:00:39,476 --> 00:00:41,466
Thanks to those of you
for sticking around.


7
00:00:41,466 --> 00:00:44,896
I know it's kind
of late in the day.


8
00:00:45,096 --> 00:00:47,676
So, I wanted to start
by thinking about apps


9
00:00:47,676 --> 00:00:49,906
that we commonly
associate with measurements.


10
00:00:50,656 --> 00:00:52,356
The first thing that comes
to mind for me, I don't know


11
00:00:52,356 --> 00:00:54,036
about you, are converter apps.


12
00:00:54,516 --> 00:00:56,856
Makes sense, convert
one unit to another.


13
00:00:57,796 --> 00:01:00,216
But I wonder though,
if there are other apps


14
00:01:00,566 --> 00:01:03,276
that also use measurements but
maybe in a less obvious way.


15
00:01:04,965 --> 00:01:09,296
I don't know, but when I think
about, you know, measurements,


16
00:01:09,296 --> 00:01:12,706
it's interesting, right, because
we use them all the time.


17
00:01:13,156 --> 00:01:15,296
We just don't normally think
about them as explicitly,


18
00:01:15,456 --> 00:01:17,846
and they can pop up in
really surprising ways,


19
00:01:18,276 --> 00:01:21,476
one of those ways being when
they're not in terms of units


20
00:01:21,506 --> 00:01:24,446
that are common for whatever
our current context is.


21
00:01:24,966 --> 00:01:28,466
So, let's say I'm in
France, and I'm using an app


22
00:01:28,946 --> 00:01:30,626
that is calculating
road distance,


23
00:01:31,246 --> 00:01:34,746
and I expect the measurement to
show up in terms of kilometers,


24
00:01:35,396 --> 00:01:36,956
but they show up
in terms of miles.


25
00:01:37,126 --> 00:01:37,826
It's like, hmm.


26
00:01:38,406 --> 00:01:41,746
It makes for kind of a jarring,
not so great user experience.


27
00:01:42,706 --> 00:01:45,946
And so in this talk, we're going
to introduce to you a new suite


28
00:01:45,946 --> 00:01:48,316
of APIs that helps you ensure


29
00:01:48,316 --> 00:01:51,106
that this never happens
in your app.


30
00:01:52,416 --> 00:01:54,906
So, if we think again about
this question of, like,


31
00:01:54,956 --> 00:01:57,296
other apps that we
associate with measurements,


32
00:01:57,486 --> 00:01:59,926
I had mentioned converter
apps, which is still true.


33
00:02:00,586 --> 00:02:03,036
But another example
could be games, right?


34
00:02:03,906 --> 00:02:08,186
So, today we're talking about
this game that I'm working on.


35
00:02:08,226 --> 00:02:10,596
It's called Jammin' in
the Streetz with a z


36
00:02:10,645 --> 00:02:12,726
because z's are cool, and
I want my game to be cool.


37
00:02:13,806 --> 00:02:16,266
So, the premise of the game is
that we have to get our player


38
00:02:16,266 --> 00:02:18,056
to dance from level to level.


39
00:02:18,636 --> 00:02:22,156
I have some pretty set
goals for this game.


40
00:02:22,466 --> 00:02:24,916
One, I need this
game to be super fun.


41
00:02:24,996 --> 00:02:27,076
Like, the most fun a
game has ever been, ever.


42
00:02:27,706 --> 00:02:30,976
Two, tons of emoji,
because I love emoji.


43
00:02:31,716 --> 00:02:34,406
Three, it needs to be
available worldwide.


44
00:02:34,406 --> 00:02:35,146
I want it everywhere.


45
00:02:35,846 --> 00:02:39,296
So, when we think
about some of things


46
00:02:39,296 --> 00:02:40,896
that this game would
include, right,


47
00:02:41,516 --> 00:02:43,676
every round would be
called a jam session,


48
00:02:44,346 --> 00:02:47,686
and within this jam session,
it's tracking the total amount


49
00:02:47,686 --> 00:02:51,446
of time that it takes our player
to get from level to level,


50
00:02:51,996 --> 00:02:53,766
the distance that
they've traveled,


51
00:02:53,836 --> 00:02:55,996
the number of dance
movements they've performed,


52
00:02:56,456 --> 00:02:59,256
and maybe even, like, the rate
at which they're traveling.


53
00:02:59,256 --> 00:03:04,516
But let's think about the things
that I had just mentioned.


54
00:03:05,376 --> 00:03:06,186
Notice anything?


55
00:03:06,906 --> 00:03:07,846
They're all measureable.


56
00:03:07,906 --> 00:03:10,116
They're quantifiable
objects, right?


57
00:03:10,526 --> 00:03:14,036
And so, if we were stop
this presentation right now,


58
00:03:14,556 --> 00:03:16,326
whip out a computer,
and try to code this up,


59
00:03:17,226 --> 00:03:18,376
how would we represent this?


60
00:03:19,356 --> 00:03:21,856
Well, we could represent
them all as doubles.


61
00:03:22,586 --> 00:03:23,086
That's true.


62
00:03:24,076 --> 00:03:27,586
Easy. The problem with that
though is we're actually missing


63
00:03:27,586 --> 00:03:29,366
some context when we do that.


64
00:03:29,986 --> 00:03:31,236
And so let's look at an example.


65
00:03:32,806 --> 00:03:33,876
So we have our little player.


66
00:03:34,156 --> 00:03:36,026
I told you, lots of
emoji, I'm a big fan.


67
00:03:37,016 --> 00:03:39,886
And our little player has
moonwalked, because why not,


68
00:03:40,556 --> 00:03:42,686
and they've moonwalked
a certain distance.


69
00:03:43,326 --> 00:03:48,906
Now, if we stored this distance
as 5, it's like, hmm, okay,


70
00:03:48,906 --> 00:03:51,146
but what does five
actually mean?


71
00:03:51,516 --> 00:03:53,566
It brings up this
question of five what?


72
00:03:54,836 --> 00:03:57,286
But if we say five feet,
it's like oh, okay.


73
00:03:57,336 --> 00:03:58,616
This actually makes sense.


74
00:03:58,806 --> 00:04:00,706
It now has context
in a physical space.


75
00:04:02,206 --> 00:04:06,616
And so now, let's talk
about the way that,


76
00:04:06,616 --> 00:04:08,896
or the API that Foundation
is introducing


77
00:04:08,896 --> 00:04:11,486
to accurately represent
this entire context.


78
00:04:11,636 --> 00:04:13,626
So, you have a new struct.


79
00:04:14,306 --> 00:04:16,366
It's called Measurement, and
it's generic on the UnitType,


80
00:04:16,366 --> 00:04:19,185
and we'll get into what a
UnitType is in a little bit.


81
00:04:20,745 --> 00:04:24,846
Contains a unit as well as
a value, and an initializer.


82
00:04:25,956 --> 00:04:29,626
So, what's cool about this is
that now you're actually able


83
00:04:29,626 --> 00:04:33,346
to represent a measurement
fully with full context.


84
00:04:33,966 --> 00:04:36,696
And so if we go back
to our little player,


85
00:04:37,336 --> 00:04:39,646
let's say in the game we
are not only keeping track


86
00:04:39,646 --> 00:04:42,466
of distance traveled, but
we're also keeping track


87
00:04:42,466 --> 00:04:44,406
of the distance that the
player has left to go.


88
00:04:45,116 --> 00:04:47,876
How would we do this
with this new API?


89
00:04:48,816 --> 00:04:51,046
Well, now we can
represent distance traveled


90
00:04:51,126 --> 00:04:52,916
as a measurement of five feet.


91
00:04:53,376 --> 00:04:55,936
We could also represent
distance to go


92
00:04:56,266 --> 00:04:58,436
as a measurement of,
let's say, six feet.


93
00:04:59,716 --> 00:05:02,126
And so now, you can actually
do some really cool things


94
00:05:02,126 --> 00:05:02,496
with them.


95
00:05:02,976 --> 00:05:05,216
You can add them together
to get a total distance,


96
00:05:05,596 --> 00:05:08,126
which is a measurement
that represents 11 feet.


97
00:05:09,586 --> 00:05:12,446
You can multiply them
and get, you know,


98
00:05:12,526 --> 00:05:13,636
the value that you expect.


99
00:05:14,506 --> 00:05:16,016
You could also divide them,


100
00:05:17,196 --> 00:05:19,436
and get a similar
value, which is awesome.


101
00:05:19,436 --> 00:05:23,106
So if we go back to
thinking about a unit,


102
00:05:24,406 --> 00:05:27,946
what are some things that we
tend to associate with a unit?


103
00:05:29,056 --> 00:05:35,516
Well, first off, every unit
has a symbol, hands down.


104
00:05:35,716 --> 00:05:39,866
Units can have a dimension, and
so an example of this would be


105
00:05:39,866 --> 00:05:43,186
for the dimension length.


106
00:05:43,426 --> 00:05:46,936
It could use, like, feet
is a unit of length, right?


107
00:05:47,366 --> 00:05:51,706
Units could also be
equivalent to each other,


108
00:05:51,796 --> 00:05:55,366
so one foot could be equivalent
to approximately 0.3 meters.


109
00:05:56,086 --> 00:05:58,296
And so now we have APIs


110
00:05:58,296 --> 00:06:00,526
to actually represent
a unit object.


111
00:06:01,496 --> 00:06:04,726
Now, if you're paying close
attention, before I had said


112
00:06:04,726 --> 00:06:06,446
that every unit has a symbol,


113
00:06:06,696 --> 00:06:10,416
and so in this API we're
representing that here.


114
00:06:11,016 --> 00:06:13,346
We don't necessarily
represent the dimension in here


115
00:06:13,346 --> 00:06:16,506
or the equivalents because not
every unit can be equivalent


116
00:06:16,506 --> 00:06:19,356
to another one, and not
every unit is dimensional.


117
00:06:20,006 --> 00:06:22,416
But at the very least,
every unit has a symbol,


118
00:06:22,486 --> 00:06:23,596
so we're representing that here.


119
00:06:24,556 --> 00:06:26,026
But if we go back
to this concept


120
00:06:26,026 --> 00:06:28,296
of a dimension, what
is a dimension?


121
00:06:28,296 --> 00:06:29,276
What does that actually mean?


122
00:06:30,206 --> 00:06:33,726
Well, dimensions are categories
of units that can be expressed


123
00:06:34,066 --> 00:06:35,186
with different kinds of units.


124
00:06:35,556 --> 00:06:37,456
So, when we think of
length, as an example,


125
00:06:38,296 --> 00:06:40,436
length can be represented
as kilometers,


126
00:06:40,496 --> 00:06:44,376
feet, miles, what have you.


127
00:06:44,576 --> 00:06:47,236
Dimensions also always have
a base unit, so going back


128
00:06:47,236 --> 00:06:50,226
to the length example, the
base unit of length is meter.


129
00:06:50,306 --> 00:06:54,356
You can also perform
conversions within dimensions,


130
00:06:54,356 --> 00:06:55,446
within a single dimension.


131
00:06:55,446 --> 00:06:58,176
So you can convert
kilometers to feet, vice versa,


132
00:06:58,466 --> 00:07:00,246
meters to miles, et cetera.


133
00:07:00,846 --> 00:07:05,926
So now we have API to represent
a dimension, and so you see here


134
00:07:05,926 --> 00:07:07,356
that dimension subclass is Unit,


135
00:07:07,776 --> 00:07:11,076
which means that it inherently
acquires the symbol property.


136
00:07:12,776 --> 00:07:14,266
We have a converter property,


137
00:07:14,366 --> 00:07:17,376
and I'll go into what a unit
converter is in a little bit,


138
00:07:17,436 --> 00:07:20,486
but essentially it defines
the conversion of the unit to


139
00:07:20,486 --> 00:07:21,686
and from its base unit.


140
00:07:21,686 --> 00:07:24,476
We have an initializer,
which takes the symbol


141
00:07:24,476 --> 00:07:27,886
and a converter instance,
and as I've mentioned,


142
00:07:27,886 --> 00:07:29,236
every dimension has a base unit.


143
00:07:29,236 --> 00:07:30,456
So now we have a class property


144
00:07:30,836 --> 00:07:32,226
that will return
that unit for you.


145
00:07:33,006 --> 00:07:34,636
The important thing to
remember here, though,


146
00:07:35,166 --> 00:07:37,576
is that every instance
of a dimension is


147
00:07:37,746 --> 00:07:40,566
in and of itself a unit.


148
00:07:40,686 --> 00:07:42,936
Now, with this new API
that we're introducing,


149
00:07:42,936 --> 00:07:46,176
the cool thing is that
now we are providing


150
00:07:46,176 --> 00:07:51,086
to you some 170-plus units that
you can just use out of the box.


151
00:07:51,226 --> 00:07:52,556
You don't even have to
define them yourself.


152
00:07:52,556 --> 00:07:55,386
You can just use them, like,
after this presentation.


153
00:07:56,156 --> 00:08:01,236
And most of these
units are in accordance


154
00:08:01,236 --> 00:08:03,706
with the International System
of Units, so they're units


155
00:08:03,706 --> 00:08:05,936
that you're already used to
seeing, which is really cool.


156
00:08:07,396 --> 00:08:08,656
Now let's look at an example.


157
00:08:09,286 --> 00:08:12,906
We have the dimension of
length, and it has a whole suite


158
00:08:13,296 --> 00:08:16,046
of units that are class
properties representing


159
00:08:16,046 --> 00:08:16,786
this dimension.


160
00:08:17,076 --> 00:08:19,136
And so, if we go back
to this, you know,


161
00:08:19,166 --> 00:08:21,596
instances of a dimension
are, in fact, units,


162
00:08:22,376 --> 00:08:24,386
what happens is any time you
call these properties you're


163
00:08:24,386 --> 00:08:26,336
getting back an instance
of unit length.


164
00:08:27,226 --> 00:08:30,036
The difference between each
of these instances, that one,


165
00:08:30,036 --> 00:08:33,035
their symbols are different,
and two, the converters


166
00:08:33,035 --> 00:08:36,696
that define their
definition are different.


167
00:08:39,376 --> 00:08:43,366
So, just an overview of all of
the classes that we're providing


168
00:08:43,366 --> 00:08:44,916
to you, all the different
unit types.


169
00:08:45,126 --> 00:08:48,626
Remember I told you there's like
170-plus of them, so, you know,


170
00:08:49,106 --> 00:08:50,636
play with them to
your hearts' content.


171
00:08:51,296 --> 00:08:53,956
But we have some pretty cool
ones here, some common ones,


172
00:08:53,956 --> 00:08:56,266
like area, mass,
temperature, length.


173
00:08:56,676 --> 00:08:59,586
But also, some kind of
uncommon ones like illuminance


174
00:08:59,586 --> 00:09:04,796
and electric current, but sounds
really fun if play with them.


175
00:09:05,056 --> 00:09:07,256
So, let's go back to
our distance traveled


176
00:09:07,326 --> 00:09:09,286
and our distance
to go measurements.


177
00:09:09,696 --> 00:09:11,166
So, this is code
we've already seen.


178
00:09:12,326 --> 00:09:13,936
Now, we're going to
comment the last two lines


179
00:09:13,936 --> 00:09:15,176
out because we're
going to redefine them.


180
00:09:15,866 --> 00:09:17,306
So, we're leaving
distanceTraveled alone,


181
00:09:18,146 --> 00:09:20,916
but now we're defining
distanceToGo with the same value


182
00:09:20,916 --> 00:09:23,506
of six, but instead of
passing in feet as the unit,


183
00:09:23,506 --> 00:09:24,626
we're passing in kilometers.


184
00:09:25,426 --> 00:09:29,746
Now, this is where things
start to get a little hairy,


185
00:09:29,836 --> 00:09:32,346
because we're now
adding distanceTraveled


186
00:09:32,456 --> 00:09:35,126
and distanceToGo
together, but one's in feet


187
00:09:35,176 --> 00:09:36,166
and one's in kilometers.


188
00:09:37,076 --> 00:09:38,956
What does this mean
for totalDistance?


189
00:09:39,076 --> 00:09:40,006
Is it in terms of feet?


190
00:09:40,246 --> 00:09:41,536
It is in terms of kilometers?


191
00:09:41,716 --> 00:09:43,756
Will this stage just
blow up in five seconds?


192
00:09:43,826 --> 00:09:44,226
I don't know.


193
00:09:45,286 --> 00:09:46,976
But, phew, no, it won't.


194
00:09:47,066 --> 00:09:49,476
Actually what happened is
that the result is in terms


195
00:09:49,476 --> 00:09:51,156
of the base unit,
which is meters.


196
00:09:51,606 --> 00:09:55,176
And so what's cool about this is
that Measurement is handling all


197
00:09:55,176 --> 00:09:56,916
of this implicitly for you.


198
00:09:57,166 --> 00:09:58,596
You don't have to
worry about it at all.


199
00:09:58,846 --> 00:10:00,676
You could just use the
operators as you would


200
00:10:00,906 --> 00:10:02,086
with regular scalar values


201
00:10:02,086 --> 00:10:05,976
and you get the results
that you expect.


202
00:10:06,056 --> 00:10:09,846
So, now let's say, and
again, I wanted to be able


203
00:10:09,846 --> 00:10:14,336
to track the player at certain
points and, for the sake


204
00:10:14,336 --> 00:10:17,816
of the demo we're just printing
out strings, but maybe I want


205
00:10:17,816 --> 00:10:19,376
to do something funkier,


206
00:10:19,376 --> 00:10:21,056
add more functionality
at some point.


207
00:10:21,256 --> 00:10:22,576
But the key here is
that I want to be able


208
00:10:22,576 --> 00:10:24,966
to compare these
measurements, and now you can.


209
00:10:24,966 --> 00:10:27,776
So Measurement has support for
comparison operators for you


210
00:10:27,776 --> 00:10:28,496
to be able to do this.


211
00:10:28,926 --> 00:10:32,976
And so if we were to
friend distanceMarker,


212
00:10:33,796 --> 00:10:36,136
we would get what we expect,
which is barely started,


213
00:10:36,176 --> 00:10:38,506
because Measurement was
properly able to deduce


214
00:10:38,506 --> 00:10:41,286
that distanceTraveled is
less than distanceToGo.


215
00:10:44,576 --> 00:10:47,326
So, let's talk more
about defining a unit


216
00:10:47,406 --> 00:10:49,216
because we haven't really
delved into that yet.


217
00:10:50,716 --> 00:10:53,196
As previously mentioned,
units are always defined


218
00:10:53,196 --> 00:10:55,246
in terms of their base unit.


219
00:10:56,056 --> 00:11:00,916
There are methods that
describe this conversion to


220
00:11:01,246 --> 00:11:04,376
and from the base unit
side, but we'll talk


221
00:11:04,376 --> 00:11:07,406
about that a little bit more
when we go into UnitConverter.


222
00:11:09,276 --> 00:11:12,316
The important thing, though,
to remember with this is


223
00:11:12,316 --> 00:11:15,126
that conversion can only happen
within a single dimension.


224
00:11:15,536 --> 00:11:17,386
So, when you think of
length, for example,


225
00:11:17,666 --> 00:11:22,376
you can convert kilometers
to feet, but would you try


226
00:11:22,376 --> 00:11:25,026
to convert kilometers
to seconds?


227
00:11:25,366 --> 00:11:27,516
Conceptually that doesn't
actually make a lot of sense.


228
00:11:28,086 --> 00:11:30,496
And so, in this case, with
Measurement, if you tried


229
00:11:30,496 --> 00:11:34,126
to do that, it would
throw in Objective-C


230
00:11:34,126 --> 00:11:36,506
or it would be a
fatal error in Swift.


231
00:11:38,896 --> 00:11:42,066
So, remember I had
mentioned that we provided


232
00:11:42,066 --> 00:11:44,606
like 170 plus units
for you out of the box.


233
00:11:45,036 --> 00:11:48,506
Chances are, you won't need to
define your own custom units,


234
00:11:48,976 --> 00:11:51,586
but if you do, that's the
only time you have to think


235
00:11:51,586 --> 00:11:53,826
about defining them,
which is pretty cool.


236
00:11:53,866 --> 00:11:54,956
You can actually just use them,


237
00:11:55,066 --> 00:11:57,306
the units that are already
provided for you out of the box,


238
00:11:57,956 --> 00:12:00,696
but if you are creating a
custom unit, then you can think


239
00:12:00,696 --> 00:12:02,866
about how the converter
would be set up.


240
00:12:04,016 --> 00:12:06,256
And so, the cool thing is


241
00:12:06,256 --> 00:12:08,646
that Measurement can
handle the conversion


242
00:12:08,646 --> 00:12:11,396
for you implicitly even
with your custom unit.


243
00:12:12,326 --> 00:12:15,936
It just auto-magically works.


244
00:12:16,166 --> 00:12:17,766
So, let's talk about
some custom units.


245
00:12:17,766 --> 00:12:19,166
We're making some custom
units for the game.


246
00:12:19,896 --> 00:12:25,106
We have a jamz unit here,
because I want to be able


247
00:12:25,106 --> 00:12:28,126
to calculate total time
in a jam session in terms


248
00:12:28,126 --> 00:12:29,946
of this unit called jamz.


249
00:12:30,286 --> 00:12:31,856
Seconds is a little
boring for me.


250
00:12:32,616 --> 00:12:36,846
But if you see here, we have
this UnitConverterLinear object.


251
00:12:36,946 --> 00:12:37,456
What is that?


252
00:12:37,456 --> 00:12:38,996
We haven't really
talked about that yet.


253
00:12:39,766 --> 00:12:41,176
So let's go back to talking


254
00:12:41,176 --> 00:12:43,956
about conversions
a little bit more.


255
00:12:44,196 --> 00:12:45,936
So again, to and
from the base unit.


256
00:12:46,966 --> 00:12:49,876
UnitConverter is a root class
that defines two methods


257
00:12:50,266 --> 00:12:53,056
that describe this conversion.


258
00:12:53,416 --> 00:12:57,016
So baseUnitValue(fromValue),
and value(fromBaseUnitValue).


259
00:12:58,086 --> 00:13:01,626
UnitConverterLinear
overrides those two methods


260
00:13:01,936 --> 00:13:03,546
and defines them linearly.


261
00:13:03,546 --> 00:13:05,866
So, for all the math people
out there, it's in terms


262
00:13:05,866 --> 00:13:08,146
of A X plus B, where
A is the coefficient


263
00:13:08,146 --> 00:13:09,026
and B is the constant.


264
00:13:09,586 --> 00:13:12,476
So, if we go back
to this jamz unit,


265
00:13:13,216 --> 00:13:17,796
we see here that this
coefficient is 30,


266
00:13:17,796 --> 00:13:19,966
a scalar value of
30, so we're saying


267
00:13:19,966 --> 00:13:24,066
that one jamz unit is equivalent
to 30 seconds and so now,


268
00:13:24,146 --> 00:13:28,116
in our linear function, we have
30 times whatever the jamz value


269
00:13:28,116 --> 00:13:28,436
would be.


270
00:13:28,436 --> 00:13:32,206
So, if a jam session was
four total jamz, four jamz,


271
00:13:32,656 --> 00:13:35,076
then if we wanted to
convert it to seconds,


272
00:13:35,076 --> 00:13:37,486
it would be four times 30
to give us 120 seconds,


273
00:13:38,006 --> 00:13:39,036
and you could do the reverse.


274
00:13:39,036 --> 00:13:41,676
120 divided by 30 to
get the jamz value.


275
00:13:42,636 --> 00:13:47,026
Yeah. So let's say I wanted
to define other custom units,


276
00:13:47,356 --> 00:13:49,606
for length, for example,
because I don't want


277
00:13:49,666 --> 00:13:51,956
to calculate distance traveled
in terms of feet or meters,


278
00:13:51,956 --> 00:13:53,656
I wanted to do something a
little bit more interesting,


279
00:13:53,656 --> 00:13:54,006
like hopz.


280
00:13:55,216 --> 00:13:57,146
So, here, same concept.


281
00:13:57,696 --> 00:14:01,126
One hopz is equivalent
to 0.75 meters


282
00:14:01,546 --> 00:14:05,226
and so we're defining the
formulas for that here,


283
00:14:05,846 --> 00:14:07,916
and same with some
other custom units


284
00:14:07,916 --> 00:14:09,976
that I would create for this.


285
00:14:09,976 --> 00:14:14,026
So, you start to get the idea.


286
00:14:14,236 --> 00:14:16,476
So, if you recall
correctly, when I was talking


287
00:14:16,476 --> 00:14:19,366
about the jam session,
one of the measurements


288
00:14:19,416 --> 00:14:23,466
that I had named was the number
of dance movements performed.


289
00:14:24,426 --> 00:14:26,836
Unfortunately, the
international system


290
00:14:26,836 --> 00:14:28,616
of units does not
have a dimension


291
00:14:28,616 --> 00:14:30,336
that recognizes dance movements.


292
00:14:30,336 --> 00:14:32,966
I'm not entirely sure
why, but it's a thing


293
00:14:32,966 --> 00:14:34,386
that we are defining here today.


294
00:14:34,506 --> 00:14:36,006
And so, we have UnitDanceMove


295
00:14:36,696 --> 00:14:38,996
with a base unit of
wackyArmMovements.


296
00:14:40,486 --> 00:14:43,746
And so you see here that one
wackyArmMovement is equivalent


297
00:14:43,746 --> 00:14:45,756
to another wackyArmMovement,
so what this means,


298
00:14:45,756 --> 00:14:48,466
another way to think about how
you define your units is how


299
00:14:48,466 --> 00:14:51,626
many of the base unit make
up this particular unit.


300
00:14:52,066 --> 00:14:55,726
So, here's one-to-ones so
our coefficient is one.


301
00:14:55,926 --> 00:14:58,206
Let's say we wanted to
define a robot movement.


302
00:14:58,746 --> 00:14:59,826
It's like, approximately


303
00:14:59,826 --> 00:15:03,866
like four wackyArmMovements,
I think [laughter].


304
00:15:04,086 --> 00:15:06,716
cabbagePatch is like
three wackyArmMovements.


305
00:15:06,886 --> 00:15:11,736
Sure. And of course, no dance
movement dimension is complete


306
00:15:11,776 --> 00:15:15,166
without jazzHands, which is
about two wackyArmMovements.


307
00:15:15,636 --> 00:15:17,216
I think it's pretty accurate,
we'll stick with that for now.


308
00:15:18,566 --> 00:15:22,596
And so now, let's go back and
actually create this jam session


309
00:15:22,596 --> 00:15:23,976
that I had outlined earlier.


310
00:15:25,036 --> 00:15:27,886
So distance traveled, this
is in terms of steps taken,


311
00:15:27,886 --> 00:15:30,756
which will be in terms of this
unit hopz that we created.


312
00:15:31,336 --> 00:15:33,736
jamTime will be in
jamz, naturally,


313
00:15:34,706 --> 00:15:37,146
and dance moves will be
in terms of the robot.


314
00:15:37,206 --> 00:15:41,816
So our player will be roboting
the entire time, of course.


315
00:15:42,016 --> 00:15:44,406
And so the dance rate
will actually be terms


316
00:15:44,406 --> 00:15:46,326
of meters per second,
but if you recall,


317
00:15:46,586 --> 00:15:49,496
none of the other measurements
were in meters or in seconds,


318
00:15:49,496 --> 00:15:51,146
so how are we going
to derive that value?


319
00:15:52,216 --> 00:15:54,796
Well, we can take stepsTaken
and convert it to meters.


320
00:15:55,266 --> 00:15:58,086
We can also take the jamTime
and convert them to seconds,


321
00:15:59,126 --> 00:16:01,456
and now we can actually
return a measurement that's


322
00:16:01,456 --> 00:16:03,066
in terms of meters per second.


323
00:16:03,696 --> 00:16:07,096
And so the cool thing here
is that in very few lines


324
00:16:07,096 --> 00:16:08,506
of code we were actually able


325
00:16:08,506 --> 00:16:11,256
to completely define
our jamSession.


326
00:16:11,826 --> 00:16:18,596
So, now we know how to actually
represent measurements and units


327
00:16:18,596 --> 00:16:19,846
as model objects,
which is pretty cool.


328
00:16:20,506 --> 00:16:22,096
But I told you, though,


329
00:16:22,296 --> 00:16:24,776
that I want this game
available everywhere.


330
00:16:25,326 --> 00:16:27,916
Now to do that we actually have
to format these measurements.


331
00:16:28,566 --> 00:16:29,896
That's where things
get a little tricky.


332
00:16:31,196 --> 00:16:34,656
So, if we have our player, and
let's say instead of dancing


333
00:16:34,656 --> 00:16:38,176
for only five feet, they danced
the robot for five kilometers.


334
00:16:38,876 --> 00:16:39,346
Hard core.


335
00:16:39,986 --> 00:16:41,956
If we wanted to represent this


336
00:16:41,956 --> 00:16:43,416
across the world,
how would this look?


337
00:16:44,606 --> 00:16:47,036
Well, in Canada, we could
actually just write it


338
00:16:47,206 --> 00:16:49,516
as it was previously written,
which would be five kilometers.


339
00:16:50,016 --> 00:16:53,486
If we were to try to represent
this in Chinese, however,


340
00:16:53,486 --> 00:16:55,486
we'd actually have to
translate the unit.


341
00:16:56,736 --> 00:16:58,736
In Arabic, we'd have
to translate the unit


342
00:16:58,946 --> 00:17:01,896
and change the number
representation and make sure


343
00:17:01,896 --> 00:17:03,746
that our right-to-left
ordering is correct.


344
00:17:04,316 --> 00:17:06,425
So, all of this is more
logic that I'd have


345
00:17:06,425 --> 00:17:07,705
to add manually to my app.


346
00:17:08,715 --> 00:17:11,876
And then finally, in the
U.S., we're like, "Kilometers?


347
00:17:12,066 --> 00:17:13,116
What are those?


348
00:17:13,116 --> 00:17:14,356
What are those things?"


349
00:17:14,356 --> 00:17:19,256
So, then, not only do I have to
handle conversion, just in terms


350
00:17:19,256 --> 00:17:22,376
of my calculations, but I also
have to handle conversions just


351
00:17:22,376 --> 00:17:25,396
for formatting, which is
additional logic I have


352
00:17:25,396 --> 00:17:26,826
to add to my app.


353
00:17:27,656 --> 00:17:28,946
So, what's the solution here?


354
00:17:29,506 --> 00:17:31,576
You let Foundation do
all the work for you.


355
00:17:32,296 --> 00:17:34,516
We have a new formatter
called MeasurementFormatter.


356
00:17:35,186 --> 00:17:39,376
It formatters both measurements
and units, and its locale-aware,


357
00:17:39,376 --> 00:17:40,836
so you don't have to
worry about any of this.


358
00:17:42,156 --> 00:17:43,166
So let's take a look at it.


359
00:17:43,776 --> 00:17:44,936
Its subclass is Formatter.


360
00:17:44,936 --> 00:17:46,036
If you're familiar with any


361
00:17:46,036 --> 00:17:48,426
of our other formatters,
same concept.


362
00:17:48,936 --> 00:17:52,456
It has the unitOptions property,
and we'll talk a little bit more


363
00:17:52,456 --> 00:17:53,846
about unitOptions in a second.


364
00:17:54,776 --> 00:17:55,746
It also has unitStyle.


365
00:17:55,746 --> 00:17:56,796
So, again, if you're familiar


366
00:17:56,796 --> 00:17:58,856
with the other formatter,
short, medium, long.


367
00:17:59,436 --> 00:18:02,106
It has a locale that's setable.


368
00:18:02,276 --> 00:18:05,966
Now, chances are, you're
just going to default


369
00:18:06,076 --> 00:18:08,566
to the current locale
of the user,


370
00:18:08,566 --> 00:18:11,436
which is what this locale
will always default to,


371
00:18:11,816 --> 00:18:15,446
but if you needed to set
it explicitly, you can.


372
00:18:16,626 --> 00:18:18,456
It also takes a custom
numberFormatter.


373
00:18:18,456 --> 00:18:21,596
So, let's say you wanted your
value in your measurement


374
00:18:21,596 --> 00:18:23,926
to be represented in terms
of scientific notation,


375
00:18:24,116 --> 00:18:26,126
you can provide a
custom numberFormatter


376
00:18:26,126 --> 00:18:28,976
to do that for you.


377
00:18:29,046 --> 00:18:30,476
It also has methods that take


378
00:18:30,476 --> 00:18:32,976
in both a Measurement
object and a Unit object.


379
00:18:33,516 --> 00:18:36,916
So let's talk a little bit
more about the unit options.


380
00:18:37,976 --> 00:18:39,866
The cool thing is
that out-of-the-box,


381
00:18:39,986 --> 00:18:43,966
by default the formatter formats
according to the preferred unit


382
00:18:43,966 --> 00:18:45,066
of your user's locale.


383
00:18:45,296 --> 00:18:46,596
So, you don't even
have to think about it.


384
00:18:47,066 --> 00:18:48,776
It also takes into account
things like purpose.


385
00:18:48,806 --> 00:18:52,446
So, you know, if you're
calculating a length in terms


386
00:18:52,446 --> 00:18:55,456
of road distance verses in terms
of person height, you're going


387
00:18:55,456 --> 00:19:00,506
to want to use different units
depending on the context.


388
00:19:00,506 --> 00:19:02,726
So I'll take a look
at some of the options


389
00:19:02,726 --> 00:19:04,216
that MeasurementFormatter
provides.


390
00:19:05,466 --> 00:19:08,536
One is provided unit, and
so, let's say we have a case


391
00:19:08,536 --> 00:19:11,686
where we want to pass in a
measurement of five kilometers,


392
00:19:12,006 --> 00:19:15,766
but our locale is the U.S. Now
normally in the U.S., we would,


393
00:19:15,766 --> 00:19:18,616
for road distance for
example, change it to miles


394
00:19:18,936 --> 00:19:20,456
because that's what's
common for us here.


395
00:19:20,956 --> 00:19:23,556
But if you set provided
unit, it'll ensure


396
00:19:23,556 --> 00:19:26,726
that whatever unit you
pass in is the unit


397
00:19:26,726 --> 00:19:27,796
that actually gets formatted.


398
00:19:29,336 --> 00:19:31,416
There's also an action
called natural scale.


399
00:19:31,536 --> 00:19:36,126
So, this is great in
particular for, like, UI stuff.


400
00:19:36,156 --> 00:19:38,366
So, if your, you know, your
app is running on the watch,


401
00:19:38,696 --> 00:19:41,246
and you're really concerned
about screen real estate,


402
00:19:41,996 --> 00:19:44,066
then instead of putting
in a thousand meters,


403
00:19:44,066 --> 00:19:46,376
which would take up a
bulk of your screen,


404
00:19:46,376 --> 00:19:48,876
you can actually have it
formatted to one kilometer.


405
00:19:49,386 --> 00:19:52,896
Another is temperature
without unit.


406
00:19:53,026 --> 00:19:54,456
So let's say you
have a measurement


407
00:19:54,456 --> 00:19:56,236
that represents 90
degrees Fahrenheit,


408
00:19:56,526 --> 00:19:58,086
but you don't want
the Fahrenheit unit


409
00:19:58,086 --> 00:19:58,926
to actually show.


410
00:19:59,356 --> 00:20:03,676
You can set this to get the
result that you were expecting.


411
00:20:03,676 --> 00:20:05,356
So, let's play around
with some examples.


412
00:20:05,356 --> 00:20:06,516
We have our formatter here,


413
00:20:07,486 --> 00:20:09,996
and we have our original
distance measurement that's


414
00:20:09,996 --> 00:20:11,876
in five kilometers,
because that's how far our


415
00:20:11,876 --> 00:20:12,456
player danced.


416
00:20:13,336 --> 00:20:16,166
And now we want to get a
resulting string from that.


417
00:20:17,086 --> 00:20:20,756
You'll see that the result is
in miles and the coolest thing


418
00:20:20,756 --> 00:20:22,496
about this is that in
three lines of code,


419
00:20:22,656 --> 00:20:24,756
not only did we get the
result that we expected,


420
00:20:25,056 --> 00:20:28,016
but we didn't have to do
anything to the formatter,


421
00:20:28,246 --> 00:20:30,586
just out-of-the-box
without setting anything,


422
00:20:30,786 --> 00:20:33,046
it knew exactly what to do.


423
00:20:33,456 --> 00:20:36,206
Now let's say that we give it
our custom unit, the hopz unit.


424
00:20:36,716 --> 00:20:38,536
And Measurement,
MeasurementFormatter


425
00:20:38,536 --> 00:20:42,986
that has no conception, no idea
that hopz is actually a unit,


426
00:20:44,296 --> 00:20:48,246
but we create this hopz
distance, and we pass it


427
00:20:48,376 --> 00:20:51,896
to the formatter, and
it's actually still able


428
00:20:51,896 --> 00:20:54,326
to do the conversion
implicitly on our behalf.


429
00:20:54,816 --> 00:20:58,286
We don't have to do anything.


430
00:20:58,286 --> 00:21:01,146
Now let's say though, you know,
we have these custom units


431
00:21:01,146 --> 00:21:02,526
and we actually want
people to see them,


432
00:21:02,936 --> 00:21:04,106
so we'll set provided unit.


433
00:21:05,036 --> 00:21:07,716
We'll give it a measurement
that has our hopz unit again.


434
00:21:08,626 --> 00:21:11,726
And now the result will
be in terms of that unit.


435
00:21:11,726 --> 00:21:16,166
Now this case is a
particularly interesting case


436
00:21:16,246 --> 00:21:19,396
because not only are we
providing a custom unit,


437
00:21:19,466 --> 00:21:21,216
but we're also providing
a custom unit that's


438
00:21:21,216 --> 00:21:22,956
within a custom dimension,
right?


439
00:21:23,326 --> 00:21:25,906
And so at this point, it's
like, not really sure,


440
00:21:25,906 --> 00:21:27,386
what will MeasurementFormatter
do?


441
00:21:28,456 --> 00:21:30,486
Oh, well, it'll do
exactly what we expect,


442
00:21:30,636 --> 00:21:31,376
which is pretty awesome.


443
00:21:32,046 --> 00:21:35,896
So, now, I'm going to hand
it over to another member


444
00:21:35,896 --> 00:21:38,376
of the Foundation
team, and he's going


445
00:21:38,376 --> 00:21:41,436
to show how measurements
are used and can be used


446
00:21:41,436 --> 00:21:43,926
and formatted in the High
Scores feature of this game.


447
00:21:46,766 --> 00:21:46,966
Thanks [applause].


448
00:21:47,166 --> 00:21:49,026
>> Thank you, Daphne.


449
00:21:49,026 --> 00:21:50,666
So, my name is Peter Hosey.


450
00:21:50,906 --> 00:21:53,176
I am also an engineer
on the Foundation team,


451
00:21:53,966 --> 00:21:57,176
and like Daphne said, this
is our High Score list,


452
00:21:57,396 --> 00:21:59,986
where we're showing a list
of the levels in the game.


453
00:22:00,846 --> 00:22:04,236
As you tap on each one,
you see some basic facts


454
00:22:04,236 --> 00:22:06,536
about the level, the
name, a picture of it.


455
00:22:07,196 --> 00:22:09,256
You see some important
information


456
00:22:09,256 --> 00:22:11,356
about playing the level,
things you need to know.


457
00:22:12,496 --> 00:22:15,136
And you even see your statistics


458
00:22:15,136 --> 00:22:17,446
of how well you've
done in the game.


459
00:22:18,676 --> 00:22:21,516
You see things like
your high score,


460
00:22:21,516 --> 00:22:24,586
how many wacky arm
movements you've done.


461
00:22:25,236 --> 00:22:26,566
You see how far you've danced.


462
00:22:26,566 --> 00:22:27,876
You see how fast you've danced.


463
00:22:29,126 --> 00:22:31,956
But these values are
all just numbers.


464
00:22:32,596 --> 00:22:34,496
They lack dimension.


465
00:22:35,936 --> 00:22:39,536
So we don't know,
like, how far is 6811?


466
00:22:40,176 --> 00:22:46,986
Now you could implement an
entire unit system yourself.


467
00:22:47,366 --> 00:22:50,506
You could start small by just
tacking a unit onto the end


468
00:22:50,506 --> 00:22:51,456
of each of these numbers.


469
00:22:52,216 --> 00:22:54,316
You could maybe build out
a little more, and like,


470
00:22:55,706 --> 00:22:57,956
have a unit conversion system


471
00:22:57,956 --> 00:23:00,566
that will understand
different locales


472
00:23:00,566 --> 00:23:02,816
and translate the unit
names automatically,


473
00:23:02,816 --> 00:23:05,156
and that's a lot
of work, isn't it?


474
00:23:05,256 --> 00:23:08,716
Like Daphne said, let Foundation
do the work do the work for you.


475
00:23:08,716 --> 00:23:10,856
We now have Measurement
and Unit,


476
00:23:10,856 --> 00:23:12,556
and MeasurementFormatter
types in Foundation,


477
00:23:13,536 --> 00:23:15,976
so let's use them in our game.


478
00:23:16,566 --> 00:23:21,096
So we're going to start by
creating the custom units


479
00:23:21,286 --> 00:23:23,486
that Daphne showed you,
some of them anyway.


480
00:23:24,016 --> 00:23:27,336
We've got a couple of length
units, we've got our speed unit,


481
00:23:27,896 --> 00:23:31,136
and we have our four
custom dance movements


482
00:23:31,136 --> 00:23:32,916
that do not come
with Foundation.


483
00:23:35,156 --> 00:23:38,346
Now that we've got our custom
units, we can bring these


484
00:23:38,346 --> 00:23:40,876
into our model, which
is this levels struct,


485
00:23:41,626 --> 00:23:44,226
which has our basic
facts about the level


486
00:23:44,976 --> 00:23:47,356
and includes the
player's statistics,


487
00:23:47,356 --> 00:23:49,216
which are just numbers.


488
00:23:49,576 --> 00:23:51,796
So let's change them
to measurements.


489
00:23:52,276 --> 00:23:54,936
So, now we have a measurement
of dance moves, a measurement


490
00:23:54,936 --> 00:23:56,246
of length, and a
measurement of speed,


491
00:23:56,706 --> 00:23:58,346
and as we change the properties,


492
00:23:58,886 --> 00:24:00,596
so much we change
the initializer.


493
00:24:01,246 --> 00:24:04,056
So, now it's possible to create
a level with measurements,


494
00:24:04,866 --> 00:24:08,636
and we want to do that in
the List ViewController,


495
00:24:08,826 --> 00:24:10,976
which is a controller for this
view here, this is the list.


496
00:24:12,206 --> 00:24:16,246
Our List ViewController
queries are synchronization API,


497
00:24:16,736 --> 00:24:21,496
which returns a JSON list of
dictionaries, one per level,


498
00:24:21,726 --> 00:24:23,376
containing all of
this information.


499
00:24:24,836 --> 00:24:27,956
And particularly includes
the player's statistics


500
00:24:28,156 --> 00:24:29,166
as just numbers.


501
00:24:29,836 --> 00:24:31,626
So, we want to create
measurements


502
00:24:31,676 --> 00:24:32,976
around these numbers,


503
00:24:34,086 --> 00:24:36,516
so now this a number
of wackyArmMovements.


504
00:24:36,776 --> 00:24:38,136
This is a number of Hopz.


505
00:24:38,276 --> 00:24:40,546
This is a number of hopzPerJamz.


506
00:24:41,286 --> 00:24:48,096
Now that this information is in
our model and we've created it


507
00:24:48,096 --> 00:24:50,036
as measurements in our
List ViewController,


508
00:24:50,866 --> 00:24:52,266
and that's the only
change that you had to make


509
00:24:52,266 --> 00:24:53,116
in the List ViewController.


510
00:24:54,276 --> 00:24:56,426
Now we can go over to the
Detail ViewController,


511
00:24:56,426 --> 00:24:59,886
which is what shows this
view here, and shows this


512
00:25:00,136 --> 00:25:01,716
for every one of these levels,


513
00:25:02,286 --> 00:25:07,386
and we can use our
new measurements here.


514
00:25:07,526 --> 00:25:11,716
So, we already have
one formatter in place.


515
00:25:11,776 --> 00:25:14,756
This is a NumberFormatter, and
this is what does this padding


516
00:25:14,896 --> 00:25:17,736
to six digits with zeros,
and we want to keep that,


517
00:25:18,236 --> 00:25:19,576
but we want to build
on top of it.


518
00:25:19,576 --> 00:25:20,906
We want to make this
show the units.


519
00:25:21,476 --> 00:25:24,336
So we're going to add
two more formatters,


520
00:25:25,566 --> 00:25:27,096
and I'll explain
why to in a moment.


521
00:25:28,336 --> 00:25:29,486
Now that we've created them,


522
00:25:30,176 --> 00:25:32,856
we go to the same place we're
already configuring the number


523
00:25:32,856 --> 00:25:34,806
formatter, which is in
our viewedDidLoad method.


524
00:25:35,146 --> 00:25:37,136
This is inherited
from UIViewController,


525
00:25:37,136 --> 00:25:38,096
and here we're overwriting it.


526
00:25:39,086 --> 00:25:41,236
We configure the
highScore NumberFormatter


527
00:25:41,236 --> 00:25:44,286
with our minimum integer
digits, and now we're going


528
00:25:44,286 --> 00:25:45,976
to configure our
MeasurementFormatter


529
00:25:46,656 --> 00:25:49,226
to use our provided unit,
which is wackyArmMovements,


530
00:25:49,936 --> 00:25:51,066
which you can't tell
here, can you?


531
00:25:52,536 --> 00:25:54,346
And use our NumberFormatter


532
00:25:54,586 --> 00:25:56,886
so that we continue
to pad to six digits.


533
00:25:58,286 --> 00:26:01,056
And I mentioned we created
two new MeasurementFormatters,


534
00:26:01,056 --> 00:26:02,266
so let's configure
the other one.


535
00:26:03,076 --> 00:26:05,296
This one we want to use the
StandardNumberFormatting,


536
00:26:05,296 --> 00:26:06,846
so we're not going to
set this NumberFormatter,


537
00:26:06,976 --> 00:26:13,186
but we're still going to set
it to use the provided unit.


538
00:26:14,236 --> 00:26:18,986
And now if I run that, oops, oh.


539
00:26:19,646 --> 00:26:21,946
So, I've configured
the formatters.


540
00:26:22,576 --> 00:26:25,666
Now I need to actually use the
strings that they'll give me.


541
00:26:27,316 --> 00:26:29,266
So we're already
talking to one formatter,


542
00:26:29,606 --> 00:26:31,766
and we say sting
from this value.


543
00:26:33,136 --> 00:26:34,496
Well that worked fine
when this was a number,


544
00:26:34,496 --> 00:26:35,326
but now it's a measurement.


545
00:26:35,596 --> 00:26:37,566
So now we need to talk to
the MeasurementFormatter.


546
00:26:37,566 --> 00:26:39,286
Now, it's a simple
one-word change.


547
00:26:40,286 --> 00:26:41,596
Otherwise, it's exactly
the same.


548
00:26:42,496 --> 00:26:43,736
Works the same for
any formatter.


549
00:26:44,906 --> 00:26:47,426
The other two we're creating
string directly to the number,


550
00:26:47,736 --> 00:26:49,806
and you can imagine how
this is not very good


551
00:26:49,806 --> 00:26:50,976
for your localization effort.


552
00:26:52,366 --> 00:26:53,806
Here too we want
to use a formatter.


553
00:26:54,936 --> 00:26:57,916
So, we'll use our other
formatter, and it's,


554
00:26:58,076 --> 00:26:59,006
again, the same thing.


555
00:26:59,006 --> 00:27:01,876
We do string from, in this
case a string from Measurement,


556
00:27:02,016 --> 00:27:06,216
and this returns a string,
and we pass that to our label.


557
00:27:07,276 --> 00:27:08,636
So now we can run the app.


558
00:27:15,226 --> 00:27:17,626
And now we see our
custom units show up.


559
00:27:18,456 --> 00:27:21,196
So this is a start, but,


560
00:27:21,336 --> 00:27:24,346
we're still not really
providing real world context,


561
00:27:24,346 --> 00:27:25,426
which is our goal to start with.


562
00:27:26,216 --> 00:27:28,536
We need to show these
in real world units.


563
00:27:29,326 --> 00:27:33,226
So we could do some
conversion logic of our own,


564
00:27:33,716 --> 00:27:35,926
but MeasurementFormatter
can do that for us.


565
00:27:35,926 --> 00:27:39,596
So, we're going to create one
more MeasurementFormatter,


566
00:27:40,346 --> 00:27:42,806
and as we have the custom
units, MeasurementFormatter,


567
00:27:43,046 --> 00:27:45,056
we're also going to
have the Locale-Aware


568
00:27:45,136 --> 00:27:45,896
MeasurementFormatter.


569
00:27:46,456 --> 00:27:49,666
As we create it, same
as we configure it,


570
00:27:49,666 --> 00:27:52,186
except we don't' actually
need to do anything,


571
00:27:52,776 --> 00:27:55,896
because MeasurementFormatter
out-of-the-box converts


572
00:27:55,896 --> 00:27:58,956
automatically to the unit


573
00:27:58,956 --> 00:28:00,816
that the player expects
for their locale.


574
00:28:02,866 --> 00:28:06,806
Now, this is where it's going
to be a little bit tricky,


575
00:28:06,806 --> 00:28:07,726
so bear with me a moment.


576
00:28:08,646 --> 00:28:11,246
We're currently talking
to one formatter,


577
00:28:11,526 --> 00:28:12,686
asking it for one string,


578
00:28:12,846 --> 00:28:14,186
and passing it directly
to the label.


579
00:28:14,186 --> 00:28:21,016
So what we're going to do
instead, is we're going to talk


580
00:28:21,016 --> 00:28:23,926
to the customUnitsMeasurement
Formatter first,


581
00:28:24,206 --> 00:28:25,996
get its string for
this distance.


582
00:28:27,056 --> 00:28:29,676
Then we talk to the
localeAwareMeasurement Formatter


583
00:28:30,026 --> 00:28:31,836
and get its string
for this distance.


584
00:28:32,726 --> 00:28:35,156
And then we'll use a
Swift string interpolation


585
00:28:35,386 --> 00:28:39,006
to put these two things
together and generate one string


586
00:28:39,006 --> 00:28:42,806
that we will pass to the label,
and we did this for the distance


587
00:28:42,806 --> 00:28:44,306
and we do it also
for the dance rate.


588
00:28:44,836 --> 00:28:46,896
And that's all we have to do.


589
00:28:53,136 --> 00:28:57,766
In order to show both our
custom units and the units


590
00:28:57,766 --> 00:28:59,186
that the player expects
for their locale,


591
00:29:00,526 --> 00:29:01,626
their real world distance.


592
00:29:02,516 --> 00:29:06,596
[ Applause ]


593
00:29:07,096 --> 00:29:08,456
But we don't need to stop there,


594
00:29:08,566 --> 00:29:11,796
because remember the goal
here is to have this game all


595
00:29:11,796 --> 00:29:13,096
over the world in every country.


596
00:29:14,096 --> 00:29:16,026
So miles is great in
the United States,


597
00:29:16,026 --> 00:29:16,896
we're in the United States.


598
00:29:16,896 --> 00:29:17,646
We see miles.


599
00:29:17,646 --> 00:29:20,206
But we want to make sure
this works in every country.


600
00:29:21,236 --> 00:29:25,246
So I'm going to make use of
an Xcode feature that's part


601
00:29:25,246 --> 00:29:28,966
of your scheme, so I'm going
to edit my scheme here.


602
00:29:39,356 --> 00:29:40,846
I'm going to duplicate
the scheme,


603
00:29:41,376 --> 00:29:43,826
and when it duplicates
the scheme.


604
00:29:43,826 --> 00:29:47,556
It's going to ask me for a
name for it, so I'm going


605
00:29:47,726 --> 00:29:49,936
to give my scheme a
very distinctive name.


606
00:29:50,696 --> 00:29:56,766
And now, having named my scheme,


607
00:29:57,346 --> 00:30:00,816
I'm going to make one simple
change, under the run verb,


608
00:30:03,066 --> 00:30:06,506
Options tab, Application Region.


609
00:30:07,536 --> 00:30:14,586
I'm going to our testing into an
exotic locale, like, say Canada.


610
00:30:15,396 --> 00:30:21,776
And now, I'm going to
run with this scheme,


611
00:30:21,996 --> 00:30:24,256
and with no code
change to the app,


612
00:30:24,256 --> 00:30:26,686
with no configuration
changes in the simulator,


613
00:30:26,906 --> 00:30:29,746
just changing the scheme, we
can now see that in Canada,


614
00:30:29,796 --> 00:30:30,926
this shows kilometers.


615
00:30:32,976 --> 00:30:35,006
That's all you have to
do to make this work


616
00:30:35,006 --> 00:30:36,576
with our new Measurement
and Unit


617
00:30:36,576 --> 00:30:38,666
and MeasurementFormatter
types in Foundation.


618
00:30:38,986 --> 00:30:39,316
Thank you [applause].


619
00:30:40,276 --> 00:30:42,966
Thank you, Daphne.


620
00:30:43,396 --> 00:30:44,316
>> Thanks so much, Peter.


621
00:30:44,316 --> 00:30:46,616
So, obviously this game
is going to be a huge hit.


622
00:30:46,616 --> 00:30:50,446
I'm, like, super
pumped about it.


623
00:30:50,706 --> 00:30:51,946
Let's wrap up real quick though.


624
00:30:52,206 --> 00:30:55,966
So, we just saw throughout
this whole talk


625
00:30:55,966 --> 00:30:59,246
and in the demo how Measurements
and Units are now model objects


626
00:30:59,246 --> 00:31:01,306
that we can use in our apps,
which is really awesome.


627
00:31:01,776 --> 00:31:04,096
We also saw that it's
super easy to format them


628
00:31:04,126 --> 00:31:09,246
and they require very little
work on our part, which is cool.


629
00:31:09,246 --> 00:31:12,556
And the best part
is that we get all


630
00:31:12,556 --> 00:31:15,886
of this very powerful
localization for free,


631
00:31:15,886 --> 00:31:19,126
without having to specify
any objects, or any options,


632
00:31:19,126 --> 00:31:20,316
just right out of the box.


633
00:31:21,216 --> 00:31:22,336
So, now you don't actually have


634
00:31:22,386 --> 00:31:25,056
to suddenly become a
polyglot or, you know,


635
00:31:25,596 --> 00:31:27,876
change all the logic
and coding in your app


636
00:31:27,926 --> 00:31:29,076
to be able to support this.


637
00:31:29,136 --> 00:31:30,786
You could just use it as-is.


638
00:31:31,676 --> 00:31:34,516
If you'd like more information,
you should check out the link.


639
00:31:34,646 --> 00:31:37,776
These sessions are
actually already passed,


640
00:31:37,886 --> 00:31:39,656
but if you're super
interested in it,


641
00:31:39,656 --> 00:31:41,396
I would recommend
checking out the videos,


642
00:31:42,766 --> 00:31:43,816
and thank you so much.


643
00:31:44,516 --> 00:31:48,500
[ Applause ]

