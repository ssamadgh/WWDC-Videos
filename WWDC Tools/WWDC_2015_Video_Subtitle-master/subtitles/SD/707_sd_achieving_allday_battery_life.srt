1
00:00:24,326 --> 00:00:25,236
>> JON ANDREWS: Good morning.


2
00:00:30,306 --> 00:00:32,036
Thank you for coming
to see our session


3
00:00:32,036 --> 00:00:33,486
on achieving all-day
battery Life.


4
00:00:34,086 --> 00:00:36,726
It's an area I am really excited
to get to talk to you about.


5
00:00:37,206 --> 00:00:39,856
My name is Jon Andrews from
Core OS, and my colleague,


6
00:00:39,856 --> 00:00:42,086
Soren Spies, will
also be joining me.


7
00:00:42,916 --> 00:00:46,466
So I hope that you all
charged your phones last night


8
00:00:46,466 --> 00:00:48,246
and didn't get to see
this this morning.


9
00:00:49,316 --> 00:00:51,226
We want you to see this
much later in the day.


10
00:00:52,196 --> 00:00:53,876
In fact, we'd like you
to see it even later


11
00:00:53,876 --> 00:00:55,116
than you've been able
to see it to date.


12
00:00:55,226 --> 00:00:58,936
We are going to walk
through some aspects


13
00:00:58,936 --> 00:01:01,686
of achieving all-day
battery life under iOS.


14
00:01:02,976 --> 00:01:06,166
We will cover what users expect
from all-day battery life,


15
00:01:07,426 --> 00:01:11,376
computing energy in general,
improvements we've made


16
00:01:11,376 --> 00:01:17,106
to the OS in terms of energy,
your role in helping us


17
00:01:17,106 --> 00:01:19,096
and the customers achieve
all-day battery life,


18
00:01:19,776 --> 00:01:22,316
and then Soren will give
you a much deeper dive


19
00:01:22,316 --> 00:01:24,866
on how your software
can be modified in order


20
00:01:24,866 --> 00:01:26,006
to help achieve those goals.


21
00:01:27,896 --> 00:01:30,786
So let's look at what
all-day battery life is.


22
00:01:31,956 --> 00:01:34,876
Users don't just use
their phone for eight


23
00:01:34,876 --> 00:01:36,046
or ten hours in one go.


24
00:01:37,036 --> 00:01:39,656
They actually spend some
intense time using it,


25
00:01:39,656 --> 00:01:42,596
maybe in the morning, as
they are commuting to work,


26
00:01:43,136 --> 00:01:45,916
and then the phone's
pretty much idle,


27
00:01:46,006 --> 00:01:48,086
and then it's doing
some background work,


28
00:01:48,086 --> 00:01:50,396
some maintenance work,
talking to the network,


29
00:01:50,396 --> 00:01:51,536
maybe downloading your mail.


30
00:01:52,276 --> 00:01:54,866
But these kind of patterns
go on throughout the day,


31
00:01:54,866 --> 00:01:58,546
with bursts of workload and
then some periods of idle.


32
00:02:00,046 --> 00:02:02,126
And in order to achieve
all-day battery life,


33
00:02:02,316 --> 00:02:04,136
you really want to
keep that low.


34
00:02:04,826 --> 00:02:10,536
So the average energy
during the day is low.


35
00:02:11,246 --> 00:02:16,216
And that's what we are
looking for in efforts from you


36
00:02:16,216 --> 00:02:20,416
and we have been
looking at in the OS.


37
00:02:20,416 --> 00:02:22,576
So let's look at
the fundamentals


38
00:02:22,736 --> 00:02:24,916
of how you compute energy.


39
00:02:25,876 --> 00:02:29,086
Energy has two components,
power and time,


40
00:02:29,146 --> 00:02:32,226
and the time element is
often one that is forgotten.


41
00:02:32,806 --> 00:02:38,876
You can do a really intense
operation that uses a lot


42
00:02:38,876 --> 00:02:43,646
of power, but you want to know
how long you are doing it for.


43
00:02:43,646 --> 00:02:47,156
If we look at standby, it
doesn't use much power,


44
00:02:47,746 --> 00:02:49,416
but you are able
to stay in standby


45
00:02:49,416 --> 00:02:50,706
for a very long period of time.


46
00:02:51,626 --> 00:02:54,496
Playing audio is one of the
other very low power use cases


47
00:02:54,496 --> 00:02:56,596
that we have on our device,
and that's why we are able


48
00:02:56,596 --> 00:02:58,046
to offer great playback time.


49
00:02:59,126 --> 00:03:02,586
But as you get further up into
the more intense workloads,


50
00:03:03,106 --> 00:03:04,496
you use more power
and, therefore,


51
00:03:04,496 --> 00:03:07,516
we do expect the time you
use the device to decrease.


52
00:03:08,396 --> 00:03:12,046
So it's pretty easy to
achieve all-day battery life


53
00:03:12,396 --> 00:03:14,166
if your workload
looks like idle.


54
00:03:14,706 --> 00:03:18,296
And that doesn't mean you
can't have it be really intense


55
00:03:18,296 --> 00:03:22,936
and have high power bursts,
as long as the average is low.


56
00:03:24,896 --> 00:03:27,816
Now our devices are getting
increased dynamic range.


57
00:03:28,656 --> 00:03:32,356
We are starting to get
close to MacBook territory,


58
00:03:32,356 --> 00:03:34,136
where you can get a huge
amount of performance


59
00:03:34,136 --> 00:03:36,146
out of the system, so you
want to use it very carefully.


60
00:03:37,626 --> 00:03:38,756
The other thing to remember is


61
00:03:38,756 --> 00:03:42,096
that as we increase the
dynamic range, the efficiency


62
00:03:42,096 --> 00:03:45,426
of our hardware gets better
with every generation.


63
00:03:45,916 --> 00:03:48,286
So we are going to give
you a better ability


64
00:03:48,286 --> 00:03:50,776
to achieve those
low-power operations,


65
00:03:51,416 --> 00:03:54,816
but you can also make use of
the higher peak performance


66
00:03:55,266 --> 00:03:58,226
for intense operations and
a snappy user experience.


67
00:03:59,796 --> 00:04:03,326
So let's now look at that from
an app life cycle perspective.


68
00:04:05,096 --> 00:04:08,186
The area under this graph
represents the energy used


69
00:04:08,186 --> 00:04:08,966
by an application.


70
00:04:10,436 --> 00:04:14,266
You launch the application, and
there's some work that goes on,


71
00:04:14,676 --> 00:04:16,625
to initialize your application,


72
00:04:16,625 --> 00:04:18,356
maybe you have some
animations at the beginning.


73
00:04:19,096 --> 00:04:22,916
And then there's some bursts of
activity as your user interacts


74
00:04:22,916 --> 00:04:23,696
with your application.


75
00:04:24,966 --> 00:04:27,356
There's always some fixed cost
here that you need to keep


76
00:04:27,356 --> 00:04:31,526
in mind, and that's the one
that the system and, you know,


77
00:04:31,526 --> 00:04:32,836
the frameworks are using,


78
00:04:33,336 --> 00:04:37,186
and the user workload
is then on top of that.


79
00:04:37,386 --> 00:04:40,216
Of course, the user finishes
using your application,


80
00:04:40,396 --> 00:04:43,496
and you want to do some
operations as the app goes


81
00:04:43,496 --> 00:04:45,546
into the background,
and then ultimately,


82
00:04:45,546 --> 00:04:46,966
your application is suspended.


83
00:04:48,016 --> 00:04:50,316
But here you can see
there's the time element,


84
00:04:50,696 --> 00:04:52,746
with both the fixed
and dynamic costs.


85
00:04:54,616 --> 00:04:57,756
Now, we also need to
think about that just


86
00:04:57,806 --> 00:04:59,086
from a system perspective too.


87
00:05:00,306 --> 00:05:02,876
So let's look at what a
system looks like in standby.


88
00:05:03,786 --> 00:05:08,266
Most of the components here are
in some form of sleep state.


89
00:05:09,536 --> 00:05:14,206
The display is off, memory
is in sort of a refresh mode


90
00:05:14,986 --> 00:05:17,126
and using actually
very little power,


91
00:05:17,926 --> 00:05:20,846
and some of the radios
are on, just to allow them


92
00:05:20,846 --> 00:05:24,116
to accept incoming traffic
and wake the system up.


93
00:05:24,256 --> 00:05:27,006
This is a great low-power mode.


94
00:05:27,556 --> 00:05:31,416
Then we talked about user
idle, and here more components


95
00:05:31,416 --> 00:05:32,346
of the system are awake.


96
00:05:32,936 --> 00:05:37,056
You can see that the display is
on and active, and that brings


97
00:05:37,056 --> 00:05:40,326
up a certain amount of
soft systems with it.


98
00:05:41,256 --> 00:05:47,166
The other components, like the
CPU and GPU, are mostly inactive


99
00:05:47,726 --> 00:05:49,596
and have small periods
of inactivity,


100
00:05:49,956 --> 00:05:51,666
so the cycle here is really low.


101
00:05:52,576 --> 00:05:53,866
If we were to animate that,


102
00:05:53,866 --> 00:05:56,876
and show you what the
energy would look like,


103
00:05:57,106 --> 00:05:59,246
you get this really
nice slow drain


104
00:05:59,246 --> 00:06:01,196
on the user's battery
throughout the day,


105
00:06:01,596 --> 00:06:03,926
and hopefully now this
is going into the evening


106
00:06:03,926 --> 00:06:06,576
and you are going to bed
plugging your phone in.


107
00:06:07,996 --> 00:06:13,196
However, if you were to program
an intense game, 3D game,


108
00:06:13,766 --> 00:06:16,326
you are making the
most use of our system.


109
00:06:17,086 --> 00:06:19,806
You've really got all
the components lit up,


110
00:06:19,806 --> 00:06:23,576
you are probably using the CPU
a lot in order to feed the GPU


111
00:06:23,946 --> 00:06:28,466
for some complex rendering,
and you've got the audio system


112
00:06:28,466 --> 00:06:32,006
up because there's some game
audio that you want to play.


113
00:06:32,916 --> 00:06:37,956
So you'd expect that the power
used is higher and the time


114
00:06:37,956 --> 00:06:42,946
that the battery
will last is shorter.


115
00:06:43,316 --> 00:06:49,666
So there's three components
to a very simple strategy


116
00:06:49,666 --> 00:06:51,296
that we have for
optimizing for energy.


117
00:06:52,336 --> 00:06:53,786
You want to do less work.


118
00:06:55,576 --> 00:06:58,286
And you want to then think
about whether that work needs


119
00:06:58,286 --> 00:07:00,186
to be done now or whether
you could do it later.


120
00:07:01,546 --> 00:07:05,386
And then when you eventually
do that work, you want to do it


121
00:07:05,386 --> 00:07:06,596
as efficiently as possible.


122
00:07:07,086 --> 00:07:11,756
Soren will go into
more details on this


123
00:07:11,906 --> 00:07:12,886
in the next part of the talk.


124
00:07:15,296 --> 00:07:17,136
So let's talk about
what we did in iOS 9.


125
00:07:18,436 --> 00:07:21,486
We already had best-in-class
battery life.


126
00:07:22,346 --> 00:07:23,996
However, we really
thought we could do better,


127
00:07:24,776 --> 00:07:26,386
and our customers
wanted us to do better.


128
00:07:27,306 --> 00:07:28,286
You wanted us to do better.


129
00:07:29,566 --> 00:07:32,866
So we set out to improve battery
life on our existing hardware,


130
00:07:33,766 --> 00:07:35,876
offering up to an hour of
additional battery life


131
00:07:35,876 --> 00:07:40,156
by optimizing the OS and
many of the applications


132
00:07:40,156 --> 00:07:41,386
that are integrated inside it.


133
00:07:42,956 --> 00:07:46,826
Now, this may seem familiar to
some of you because we did this,


134
00:07:46,906 --> 00:07:48,636
a similar effort,
in OS X Mavericks.


135
00:07:50,126 --> 00:07:51,356
We eliminated polling


136
00:07:51,356 --> 00:07:53,486
from applications,
frameworks, drivers.


137
00:07:53,546 --> 00:07:56,126
We optimized the kernel.


138
00:07:56,286 --> 00:08:00,196
We applied our quality
of service to threads,


139
00:08:00,956 --> 00:08:04,666
adopted more NS operations,
scheduled IO


140
00:08:04,666 --> 00:08:07,866
with a correct quality
of service.


141
00:08:08,036 --> 00:08:13,086
We coalesced timers to reduce
the amount of wakes on the CPU


142
00:08:13,626 --> 00:08:15,696
and rate-limited applications
with things like App Nap.


143
00:08:17,366 --> 00:08:20,096
We reimplemented our CPU power
management so the overhead


144
00:08:20,096 --> 00:08:21,496
of achieving those powers


145
00:08:21,566 --> 00:08:24,526
from a system perspective
were significantly lower.


146
00:08:25,436 --> 00:08:29,166
Then we added what turned out
to be a really popular feature


147
00:08:29,166 --> 00:08:33,106
in adding the "Significant
Energy" identification


148
00:08:33,145 --> 00:08:34,956
to the battery menu
so you could see


149
00:08:34,956 --> 00:08:40,496
which applications were drawing
a lot of power from the battery.


150
00:08:40,676 --> 00:08:43,655
So going back to iOS now,
look at how we applied those,


151
00:08:44,126 --> 00:08:45,396
we really focused on the iPhone.


152
00:08:46,376 --> 00:08:49,286
That was a device that
we got the most feedback


153
00:08:49,286 --> 00:08:50,926
that people wanted to
improve battery life.


154
00:08:52,206 --> 00:08:53,816
However, these improvements
applied


155
00:08:53,816 --> 00:08:56,226
to all our iOS products,
to some extent.


156
00:08:57,536 --> 00:09:00,586
Now, let's go through
those three components


157
00:09:00,586 --> 00:09:01,166
to the strategy.


158
00:09:02,636 --> 00:09:03,456
Doing less work.


159
00:09:03,486 --> 00:09:09,456
We want to, again, optimize
for the idle workloads


160
00:09:09,456 --> 00:09:11,296
and particularly looked
at the sleep timers,


161
00:09:11,926 --> 00:09:13,956
the amount of time the
system takes to go to sleep


162
00:09:13,956 --> 00:09:15,916
after the user is finished
interacting with it.


163
00:09:16,336 --> 00:09:18,016
Those are now optimized based


164
00:09:18,016 --> 00:09:20,386
on what the user was
doing with the device.


165
00:09:21,106 --> 00:09:23,986
Did they actually not
interact with a notification


166
00:09:24,426 --> 00:09:26,106
or did they interact with it?


167
00:09:26,996 --> 00:09:29,506
So we reduced the number
of CPU wakes in idle,


168
00:09:29,506 --> 00:09:32,206
and then we've added a
pretty cool feature in terms


169
00:09:32,206 --> 00:09:33,256
of face-down detection.


170
00:09:33,936 --> 00:09:37,536
So if you have the phone with
the screen toward the table,


171
00:09:37,536 --> 00:09:43,056
say, and a notification comes
in, the screen won't light


172
00:09:43,056 --> 00:09:44,466
to process that notification.


173
00:09:44,666 --> 00:09:48,166
We'll do the minimal amount of
work to have the system ready


174
00:09:48,166 --> 00:09:50,196
so that when the user
picks the phone up,


175
00:09:50,196 --> 00:09:53,176
the notification is
available to them.


176
00:09:54,026 --> 00:09:55,606
So now moving on to
doing work later.


177
00:09:56,296 --> 00:10:00,316
We've made a lot of
effort to defer work


178
00:10:00,656 --> 00:10:02,656
until the device is plugged in.


179
00:10:03,496 --> 00:10:06,186
There's no point doing
background operation,


180
00:10:06,186 --> 00:10:09,276
maintenance operation, that the
user doesn't need right now.


181
00:10:09,666 --> 00:10:10,986
They may be a daily activity.


182
00:10:11,446 --> 00:10:12,976
You can do that when
they charge the phone


183
00:10:12,976 --> 00:10:14,466
because we know they
are going to charge it


184
00:10:14,466 --> 00:10:17,926
at some point during the day.


185
00:10:18,156 --> 00:10:22,306
And we can also, therefore,
defer networking to when you're


186
00:10:22,306 --> 00:10:24,446
on Wi-Fi because people
charge on their Wi-Fi.


187
00:10:24,446 --> 00:10:29,036
And then we've leveraged the
persistent connection API even


188
00:10:29,036 --> 00:10:31,796
more so that when
the radios are on,


189
00:10:31,796 --> 00:10:33,246
we are doing work
that's appropriate,


190
00:10:33,716 --> 00:10:36,546
even if the radios came on
to do some background work.


191
00:10:36,946 --> 00:10:40,326
Now, it's all well and
good to do that work,


192
00:10:40,326 --> 00:10:42,746
but we want to be able to do
it as efficiently as possible.


193
00:10:44,016 --> 00:10:45,176
So we made a number of changes.


194
00:10:45,616 --> 00:10:48,746
We've optimized our iOS and
networking stack to work best


195
00:10:48,746 --> 00:10:52,786
with LTE networks and
specifically our own LTE radios.


196
00:10:53,876 --> 00:10:55,676
We, again, optimized
our power management


197
00:10:55,996 --> 00:10:58,606
to reduce the overhead
of keeping the system


198
00:10:58,606 --> 00:10:59,506
in its low power state.


199
00:11:00,666 --> 00:11:03,336
And we reduced the cost of
our own logging mechanisms


200
00:11:03,826 --> 00:11:06,626
so that they don't
interact with the system.


201
00:11:06,726 --> 00:11:12,696
And, of course, we continue to
optimize our numerics libraries


202
00:11:13,186 --> 00:11:15,316
so that they are best optimized
for each piece of hardware.


203
00:11:16,056 --> 00:11:19,626
And there's a session, I
believe tomorrow, on that.


204
00:11:21,836 --> 00:11:24,986
So we talked about
user feedback and how


205
00:11:24,986 --> 00:11:26,116
that was added in Mavericks.


206
00:11:26,636 --> 00:11:30,876
We already had the
battery setting,


207
00:11:31,076 --> 00:11:35,226
which showed you application
usage and allowed for --


208
00:11:35,226 --> 00:11:38,616
gave you information
around environmental factors


209
00:11:38,696 --> 00:11:42,186
and suggestions for the user as
to who to improve battery life.


210
00:11:43,226 --> 00:11:48,816
We've gone one stage further
here and added per-app screen on


211
00:11:48,816 --> 00:11:52,256
and background time
to this setting panel.


212
00:11:53,086 --> 00:11:55,076
So you can see there's a
control in the corner there --


213
00:11:55,336 --> 00:11:56,866
let me go back and forward --


214
00:11:57,416 --> 00:11:59,946
you see that small control that
allows you to switch mode here.


215
00:12:02,406 --> 00:12:08,306
And then we've added
Low Power Mode.


216
00:12:08,936 --> 00:12:13,566
This is a user preference
that will extend battery life.


217
00:12:14,556 --> 00:12:17,596
It limits CPU, restricts
background operation


218
00:12:17,636 --> 00:12:19,916
so that the background app
refresh mechanism we introduced


219
00:12:19,916 --> 00:12:21,816
a few years ago is
disabled in this mode.


220
00:12:23,376 --> 00:12:26,736
We turn off discretionary
and background work,


221
00:12:27,106 --> 00:12:29,446
so if you have downloads that
are scheduled in the background,


222
00:12:29,446 --> 00:12:31,476
they won't happen until the
user comes out of this mode.


223
00:12:32,856 --> 00:12:34,486
And mail fetch is disabled.


224
00:12:34,486 --> 00:12:36,416
People get lots of email


225
00:12:36,416 --> 00:12:38,356
and therefore it's a big
drain on their system.


226
00:12:38,916 --> 00:12:43,136
We talked a little bit about OS.


227
00:12:43,516 --> 00:12:45,556
Now let's talk about some
things we are going to give you


228
00:12:45,556 --> 00:12:47,686
to help improve battery life.


229
00:12:49,056 --> 00:12:52,676
Well, we've brought the energy
gauges that we had in OS X


230
00:12:52,676 --> 00:12:57,216
over to iOS, and we've done
that in a rather thoughtful way


231
00:12:57,216 --> 00:13:02,276
in bringing gauges that
make the most impact on iOS.


232
00:13:02,356 --> 00:13:06,896
So we've added a location
instrument in addition


233
00:13:06,896 --> 00:13:09,506
to the other instruments
that are there.


234
00:13:09,506 --> 00:13:14,306
We've also written an entirely
new iOS Energy Guide that's


235
00:13:14,306 --> 00:13:19,066
up on our website, alongside
an improved OS X Energy Guide.


236
00:13:20,196 --> 00:13:22,226
Now, what can you do
with these instruments?


237
00:13:22,226 --> 00:13:27,106
We want you to go and optimize
the power of your application.


238
00:13:27,916 --> 00:13:29,636
Let me just give you
a very simple example.


239
00:13:32,006 --> 00:13:35,026
If you are playing full-screen
video, we have an optimization,


240
00:13:35,186 --> 00:13:37,086
like many of the TVs you
probably have at home,


241
00:13:37,466 --> 00:13:40,646
that reduces the backlight,
adjusts the gamma to compensate,


242
00:13:40,646 --> 00:13:42,856
and gives the same visual image.


243
00:13:43,876 --> 00:13:48,356
Now, that is a small
reduction in energy,


244
00:13:48,686 --> 00:13:49,886
but because of the
time component,


245
00:13:49,886 --> 00:13:52,646
the energy saved is
pretty substantial.


246
00:13:53,366 --> 00:13:55,996
And we can get an additional
hour of battery life


247
00:13:56,176 --> 00:13:57,426
if you're watching
full-screen video,


248
00:13:57,686 --> 00:13:58,966
just from this simple mechanism.


249
00:13:59,686 --> 00:14:03,916
However, if you put
any UI on the screen,


250
00:14:03,916 --> 00:14:07,176
that mechanism is disabled,
and we've seen applications


251
00:14:07,216 --> 00:14:10,336
that have full screen,
fully transparent UI layers


252
00:14:10,786 --> 00:14:12,406
that completely disable
this mechanism


253
00:14:12,406 --> 00:14:13,906
and therefore give no
benefit to the user.


254
00:14:14,166 --> 00:14:20,986
Now let's just talk
about OS X for a moment.


255
00:14:20,986 --> 00:14:22,646
We talked a little about iOS.


256
00:14:23,136 --> 00:14:25,426
We introduced the MacBook
earlier in the year.


257
00:14:25,566 --> 00:14:28,396
That's our first fanless
system and, therefore,


258
00:14:28,396 --> 00:14:30,126
it is somewhat thermally
constrained.


259
00:14:30,676 --> 00:14:34,596
It's designed to work best
with really bursty workloads.


260
00:14:35,506 --> 00:14:39,296
We've optimized the OS to work
hand in hand with that machine.


261
00:14:40,236 --> 00:14:43,256
So you should be
tagging any work


262
00:14:43,256 --> 00:14:46,166
with the appropriate
thread quality of service.


263
00:14:46,546 --> 00:14:48,456
Use the gauges and instruments


264
00:14:48,456 --> 00:14:49,976
that we already have
available on OS X.


265
00:14:49,976 --> 00:14:54,296
And then make sure you've
prioritized your work using


266
00:14:54,336 --> 00:14:55,316
NSOperation and GCD.


267
00:14:55,316 --> 00:14:59,166
If you have work that's user
initiated, make sure it's tagged


268
00:14:59,166 --> 00:15:01,996
as such, but if it's
background work, tag it as that,


269
00:15:02,656 --> 00:15:08,106
and the OS will schedule that
work to give great performance


270
00:15:08,436 --> 00:15:11,276
and also be able
to manage the power


271
00:15:11,276 --> 00:15:15,196
and thermals of that device.


272
00:15:15,336 --> 00:15:21,306
Okay. So, just to recap,
energy is power times time.


273
00:15:21,706 --> 00:15:24,156
Always remember that time
component when you are thinking


274
00:15:24,156 --> 00:15:26,936
about optimizing energy
of your application


275
00:15:26,936 --> 00:15:27,896
for all-day battery life.


276
00:15:29,046 --> 00:15:30,976
The hardware is getting
a larger dynamic range.


277
00:15:31,246 --> 00:15:34,456
So when you are doing
operations, really think


278
00:15:34,496 --> 00:15:36,476
about how you are
doing them efficiently,


279
00:15:36,746 --> 00:15:39,366
when you are doing them,
and do you, in fact,


280
00:15:39,366 --> 00:15:40,356
even need to do them at all?


281
00:15:41,686 --> 00:15:46,466
And make your application as low
power as possible on an average


282
00:15:46,686 --> 00:15:48,716
so that you are able to
achieve all-day battery life.


283
00:15:49,616 --> 00:15:51,756
And now I'm going to hand it
over to my colleague Soren


284
00:15:51,796 --> 00:15:53,296
who is going to go
into more detail.


285
00:15:54,516 --> 00:16:01,576
[ Applause ]


286
00:16:02,076 --> 00:16:02,386
>> SOREN SPIES: Good morning.


287
00:16:02,666 --> 00:16:03,036
Thank you.


288
00:16:03,386 --> 00:16:05,746
Really glad you're here to
learn about energy efficiency,


289
00:16:06,106 --> 00:16:08,756
hoping to empower you so that
you can understand how your code


290
00:16:09,006 --> 00:16:11,446
is at the center of
all-day battery life.


291
00:16:12,256 --> 00:16:16,416
We are going to talk
about two big things,


292
00:16:16,916 --> 00:16:19,266
but first we are going to
start out with some principles


293
00:16:19,266 --> 00:16:21,906
about how what Jon talked
about, and we are going to tie


294
00:16:21,906 --> 00:16:24,416
that to the user and
how the user is the key


295
00:16:24,416 --> 00:16:26,336
to getting the right
time scale in your app.


296
00:16:26,336 --> 00:16:30,006
We are going to talk about
where energy goes, in particular


297
00:16:30,006 --> 00:16:34,466
on CPU and GPU is important
for both OS X and iOS.


298
00:16:35,056 --> 00:16:36,436
Throughout this part
of the talk,


299
00:16:36,436 --> 00:16:39,336
I am going to be
explaining to you how


300
00:16:39,336 --> 00:16:42,896
to achieve low average
power so that you do get


301
00:16:42,896 --> 00:16:44,376
that all-day battery life.


302
00:16:44,376 --> 00:16:46,826
We are also going to talk
specifically about iOS.


303
00:16:46,876 --> 00:16:50,206
There's a number of hardware
components in our iOS devices


304
00:16:50,206 --> 00:16:52,896
that you can take advantage of,
which you need to be careful


305
00:16:52,896 --> 00:16:56,546
about in both the power and time
components so that you do get


306
00:16:56,546 --> 00:16:57,446
that all-day battery life.


307
00:16:57,446 --> 00:16:59,006
And then finally I
will talk a little bit


308
00:16:59,006 --> 00:17:00,996
about how you can
integrate this understanding


309
00:17:01,416 --> 00:17:02,596
into your development process


310
00:17:02,706 --> 00:17:05,376
so that each day you are
thinking a little bit


311
00:17:05,376 --> 00:17:06,215
about energy.


312
00:17:06,996 --> 00:17:11,915
Before I go a little bit
farther, I can't see too well


313
00:17:11,915 --> 00:17:13,455
out there, but can
you raise your hand


314
00:17:13,455 --> 00:17:15,445
if you have an LED light
bulb somewhere in your home.


315
00:17:16,685 --> 00:17:18,516
Okay. You know about
LED light bulbs.


316
00:17:18,516 --> 00:17:19,026
Good work.


317
00:17:19,126 --> 00:17:21,126
You probably still have
a few incandescents left.


318
00:17:21,126 --> 00:17:21,656
I know I do.


319
00:17:21,656 --> 00:17:23,576
I recently replaced
the ones in my fridge.


320
00:17:23,746 --> 00:17:25,346
That's an interesting place
to put LED light bulbs.


321
00:17:25,346 --> 00:17:31,046
Raise your hand if you leave
your lights on all the time


322
00:17:31,046 --> 00:17:33,146
when you are not home.


323
00:17:33,366 --> 00:17:34,996
Okay. We have one
person who does that,


324
00:17:34,996 --> 00:17:36,466
and he's my office
mate, so I am going


325
00:17:36,466 --> 00:17:37,746
to give him a hard
time [laughter].


326
00:17:38,376 --> 00:17:40,896
He's not even the one who leaves
his light on in the office.


327
00:17:40,896 --> 00:17:45,856
Okay. So key here, when
we switch to LED lights,


328
00:17:46,036 --> 00:17:46,996
we bring the power down,


329
00:17:46,996 --> 00:17:49,196
but we don't just leave
them running all day.


330
00:17:49,196 --> 00:17:51,286
We still turn them off
so we get the time down.


331
00:17:51,786 --> 00:17:54,166
And there's probably a lot
of equipment in your houses,


332
00:17:54,406 --> 00:17:57,586
networking, maybe DVRs,
even computers and servers,


333
00:17:58,206 --> 00:18:00,526
that is running all the time,
and you might not think about it


334
00:18:00,526 --> 00:18:01,846
because it doesn't
light up like a light.


335
00:18:01,846 --> 00:18:04,286
But I am going to try to help
you think about that better


336
00:18:04,796 --> 00:18:07,646
in software because software
ultimately controls all the


337
00:18:07,646 --> 00:18:11,076
light switches in our
hardware, and we've got


338
00:18:11,076 --> 00:18:13,406
to get those light switches
off most of the time in order


339
00:18:13,406 --> 00:18:14,386
to get all-day battery life.


340
00:18:15,006 --> 00:18:17,106
So let's talk about
the strategy.


341
00:18:17,826 --> 00:18:20,726
Ultimately, we want to be
doing user-driven work.


342
00:18:21,126 --> 00:18:22,896
We want the user
to be benefiting


343
00:18:22,896 --> 00:18:23,916
from that energy in the battery.


344
00:18:23,916 --> 00:18:24,556
They own it.


345
00:18:25,476 --> 00:18:29,166
There's a lot of times
when software is like, oh,


346
00:18:29,286 --> 00:18:30,446
I have something
to do right now.


347
00:18:30,446 --> 00:18:30,956
Can I do it?


348
00:18:30,956 --> 00:18:31,696
Oh, yeah, let's do it.


349
00:18:31,876 --> 00:18:32,876
Let's do it again.


350
00:18:33,596 --> 00:18:34,536
Don't. Just don't.


351
00:18:35,256 --> 00:18:37,636
We've got to eliminate any
kind of polling or timers.


352
00:18:37,926 --> 00:18:41,366
Computers operate so much
more quickly than people do --


353
00:18:41,646 --> 00:18:43,306
literally between keystrokes.


354
00:18:43,606 --> 00:18:45,756
Even if you are a super-fast
typist, 100 words a minute,


355
00:18:45,756 --> 00:18:48,256
between keystrokes at
a microsecond scale,


356
00:18:48,666 --> 00:18:50,676
we can idle parts of the system.


357
00:18:50,746 --> 00:18:52,856
The processor can actually go
to sleep between keystrokes,


358
00:18:53,276 --> 00:18:56,896
and typically, you know,
click or tap, there's a lot


359
00:18:56,896 --> 00:18:59,616
of computer time between
user interactions.


360
00:18:59,616 --> 00:19:02,596
So you want your software
to not be trying to run


361
00:19:02,596 --> 00:19:05,866
at computer speed unless
it's doing work directly


362
00:19:05,866 --> 00:19:06,386
for the user.


363
00:19:08,026 --> 00:19:09,576
So you want to respond
to the user.


364
00:19:09,576 --> 00:19:10,046
That's great.


365
00:19:10,296 --> 00:19:12,896
Use all of our super-powerful
hardware, and then back


366
00:19:12,896 --> 00:19:15,446
to idle, totally flat, zero.


367
00:19:16,036 --> 00:19:19,576
Jon talked about delaying work.


368
00:19:19,786 --> 00:19:22,436
A lot of times, you can actually
delay work indefinitely.


369
00:19:22,436 --> 00:19:23,216
Do I need this right now?


370
00:19:23,216 --> 00:19:23,856
I don't need this right now.


371
00:19:23,856 --> 00:19:25,526
Maybe it can wait
a little while.


372
00:19:26,586 --> 00:19:28,226
Then it turns out I
didn't need that after all.


373
00:19:28,546 --> 00:19:29,286
That's less work.


374
00:19:30,126 --> 00:19:32,126
But also if the user
doesn't need it right now,


375
00:19:32,126 --> 00:19:35,636
there's a great benefit in
deferring it, in saying hey,


376
00:19:36,206 --> 00:19:38,996
system, please do this, but
anytime in the next hour,


377
00:19:39,196 --> 00:19:41,616
ten minutes, any kind
of leeway you can give,


378
00:19:41,616 --> 00:19:44,326
whether it's a timer or
whether -- although, hopefully,


379
00:19:44,386 --> 00:19:47,486
there's no timers -- or
just a download and upload,


380
00:19:47,596 --> 00:19:49,696
because then the system will
schedule it with other work


381
00:19:50,136 --> 00:19:51,646
that may otherwise happen.


382
00:19:51,856 --> 00:19:53,796
So you can kind of
batch things together.


383
00:19:54,476 --> 00:19:58,136
Finally, batching is important
for getting efficiency.


384
00:19:58,136 --> 00:20:00,366
You want to turn on that
hardware, there is some cost


385
00:20:00,366 --> 00:20:04,806
to turn it on, you want to
use it before you turn it off.


386
00:20:04,806 --> 00:20:06,276
So you want to do as
much work as you can


387
00:20:06,276 --> 00:20:07,696
when you manage it turn it on.


388
00:20:08,206 --> 00:20:11,366
Again, bring down the power
when we can, but really pull


389
00:20:11,366 --> 00:20:13,956
in the time is a
critical factor.


390
00:20:14,716 --> 00:20:18,596
And this is an interesting key
message that I want you to get.


391
00:20:18,596 --> 00:20:20,136
We have all this
power available,


392
00:20:20,136 --> 00:20:22,106
but you just cannot run
it all day on a battery.


393
00:20:22,336 --> 00:20:24,856
The device will get too hot
and the battery will not last.


394
00:20:25,546 --> 00:20:29,416
So what we really want you to
think about is a 10 percent load


395
00:20:29,416 --> 00:20:31,026
on the system, total
system load,


396
00:20:31,126 --> 00:20:34,116
which is not just your software,
but anything you could do,


397
00:20:34,526 --> 00:20:38,046
how can you make
that 1/10 or 1/100


398
00:20:38,296 --> 00:20:41,996
of what you could possibly
achieve to shrink it down?


399
00:20:42,376 --> 00:20:43,286
That's when you are on screen.


400
00:20:43,286 --> 00:20:44,966
When you are in the
backgrounds, we want much less.


401
00:20:46,206 --> 00:20:47,246
So here's some bad news.


402
00:20:48,066 --> 00:20:50,996
Across all of our hardware --
and I did some research on this,


403
00:20:50,996 --> 00:20:52,606
and people are like oh,
it's not exactly right.


404
00:20:52,606 --> 00:20:54,106
That's not the point
of this talk.


405
00:20:54,106 --> 00:20:55,686
The point is to get you
to think about this.


406
00:20:56,616 --> 00:21:00,126
Approximately 5 percent of that
10 percent load is just turning


407
00:21:00,126 --> 00:21:00,756
on the display.


408
00:21:01,946 --> 00:21:03,376
Now, having the display
on is good


409
00:21:03,376 --> 00:21:04,906
because it means the user
is getting some value


410
00:21:04,906 --> 00:21:07,186
from the system, hopefully,
it's not just a notification.


411
00:21:07,806 --> 00:21:11,026
And then there's
this 10 percent goal,


412
00:21:11,676 --> 00:21:13,386
and our average is
to be between those.


413
00:21:13,386 --> 00:21:14,946
It sounds like you
only get 5 percent.


414
00:21:15,286 --> 00:21:17,236
And that's true on
a long time scale.


415
00:21:17,576 --> 00:21:20,006
But on a short time scale,
go for it, 100 percent,


416
00:21:20,176 --> 00:21:22,876
give us all the work
you've got, with priorities,


417
00:21:22,996 --> 00:21:25,436
and we will schedule it.


418
00:21:26,366 --> 00:21:26,966
That's that.


419
00:21:26,966 --> 00:21:30,546
You've got to get it
between 5 and 10 percent.


420
00:21:30,826 --> 00:21:34,156
Now, let's talk a little
bit about CPU and GPU.


421
00:21:34,156 --> 00:21:37,956
These are the biggest
energy consumers on OS X.


422
00:21:38,066 --> 00:21:40,186
They are the most dynamic.


423
00:21:40,186 --> 00:21:44,606
We have very powerful multicore
CPUs, massively parallel GPUs,


424
00:21:44,606 --> 00:21:46,656
we can do all kinds of work.


425
00:21:47,226 --> 00:21:50,916
However, it does consume the
battery and energy in general


426
00:21:50,916 --> 00:21:51,796
if you are plugging
into the wall.


427
00:21:52,796 --> 00:21:55,246
So you can see here we've got
a significant amount of work.


428
00:21:55,246 --> 00:21:57,636
We've got the CPU running, we've
got the GPU running for a while,


429
00:21:58,206 --> 00:22:00,906
and in fact, this is not
going to last all day.


430
00:22:01,126 --> 00:22:04,446
If this pattern continues --
and patterns are very important


431
00:22:04,446 --> 00:22:06,616
in the way you work -- if
this pattern continues,


432
00:22:06,616 --> 00:22:07,856
we are not going to get
all-day battery life.


433
00:22:08,336 --> 00:22:10,196
The average power is too high.


434
00:22:10,836 --> 00:22:16,246
So what does it look like
if we just wake up the CPU?


435
00:22:16,506 --> 00:22:17,336
Is there work to do?


436
00:22:17,506 --> 00:22:18,276
Is there work to do?


437
00:22:18,326 --> 00:22:18,826
Is there mail?


438
00:22:18,986 --> 00:22:19,586
Did the user tap?


439
00:22:19,726 --> 00:22:20,346
Anything happen?


440
00:22:21,556 --> 00:22:22,156
Hey, server.


441
00:22:23,286 --> 00:22:23,936
Let's not do that.


442
00:22:24,126 --> 00:22:28,166
When we wake up the CPU and GPU,
we take a significant amount


443
00:22:28,166 --> 00:22:31,276
of energy to ramp
it up -- zooooop!


444
00:22:32,416 --> 00:22:33,366
Is there work to do?


445
00:22:33,366 --> 00:22:36,426
I don't hear any work.


446
00:22:37,006 --> 00:22:40,186
Zoooop. But all those
triangles as you can see,


447
00:22:40,336 --> 00:22:43,136
even the iOS triangles, are
taking up a significant portion


448
00:22:43,136 --> 00:22:44,746
of that 5 to 10 percent range.


449
00:22:46,306 --> 00:22:47,916
Try not to wake up
unnecessarily.


450
00:22:48,496 --> 00:22:50,306
On OS X, if you wake
up the CPU all day,


451
00:22:50,306 --> 00:22:52,106
you will in fact not
achieve all-day battery life,


452
00:22:52,256 --> 00:22:54,636
even if you do not work, even
if you just check for work.


453
00:22:55,146 --> 00:22:55,686
Don't do that.


454
00:22:55,996 --> 00:22:59,546
The GPU is a slightly
different time scale monster,


455
00:22:59,996 --> 00:23:03,186
but this is way more often
than you need to wake the GPU,


456
00:23:03,186 --> 00:23:06,016
even for really nice graphics.


457
00:23:06,016 --> 00:23:09,406
Right? The GPU can do tons of
work in like 1 millisecond,


458
00:23:09,456 --> 00:23:12,846
then there's 15 milliseconds
before the next frame is needed.


459
00:23:12,846 --> 00:23:16,786
Now let's talk about
performance.


460
00:23:16,866 --> 00:23:18,636
You've hopefully are
here because you care


461
00:23:18,636 --> 00:23:21,366
about energy performance,
but time performance


462
00:23:21,366 --> 00:23:23,026
where you just do things
quicker, which is just good


463
00:23:23,026 --> 00:23:26,126
for users and in general, is
also key to energy efficiency.


464
00:23:26,306 --> 00:23:26,946
Let's talk about why.


465
00:23:29,166 --> 00:23:29,866
Here's a workload.


466
00:23:29,946 --> 00:23:31,196
This is a fixed workload.


467
00:23:31,196 --> 00:23:32,836
This is not a continuous
state of being.


468
00:23:32,836 --> 00:23:34,556
I just needed to do this
work and then get it done.


469
00:23:35,956 --> 00:23:36,706
Pretty big workload.


470
00:23:36,916 --> 00:23:39,006
I could probably
optimize my code.


471
00:23:39,006 --> 00:23:41,686
I could look in my inner
loops and pull stuff out


472
00:23:41,686 --> 00:23:44,786
and do less memory accesses and
traditional performance work.


473
00:23:45,576 --> 00:23:47,216
So I get a more efficient
implementation.


474
00:23:47,896 --> 00:23:48,956
The power did go up.


475
00:23:49,506 --> 00:23:52,056
However, the time is
now so much shorter


476
00:23:52,426 --> 00:23:54,026
that it's a significant
energy win.


477
00:23:54,516 --> 00:23:54,966
This is good.


478
00:23:54,966 --> 00:23:56,446
But we can do better.


479
00:23:56,686 --> 00:23:57,966
We can parallelize the work.


480
00:23:58,196 --> 00:24:00,156
We can use multiple
cores, right?


481
00:24:00,646 --> 00:24:03,596
And finally, we can really
go crazy and fire up the GPU.


482
00:24:03,726 --> 00:24:06,276
Now, the good news is
you typically don't need


483
00:24:06,276 --> 00:24:08,866
to write this optimized
code, but you do need to look


484
00:24:08,866 --> 00:24:09,866
for this optimized code.


485
00:24:09,866 --> 00:24:12,146
You need to find those
optimized numerics libraries.


486
00:24:12,706 --> 00:24:14,496
We have a link at the
end for the session


487
00:24:14,496 --> 00:24:15,656
and for our energy doc.


488
00:24:16,386 --> 00:24:19,276
You need to find the right
data structures, right?


489
00:24:19,276 --> 00:24:20,396
You need to look at your app


490
00:24:20,396 --> 00:24:22,486
and say why am I
churning all the time?


491
00:24:22,486 --> 00:24:28,026
What could I be optimizing on
the regular old time component?


492
00:24:28,026 --> 00:24:29,136
Something important
in this graph.


493
00:24:30,216 --> 00:24:33,686
The lowest power solution, which
is that naive implementation


494
00:24:33,686 --> 00:24:35,846
where the system is like oh
come on, you're just waiting


495
00:24:35,846 --> 00:24:37,376
for loads and stores
all the time,


496
00:24:37,376 --> 00:24:38,846
you've got one core running.


497
00:24:39,326 --> 00:24:41,106
If we get multiple
cores running,


498
00:24:41,406 --> 00:24:42,636
then we are really
using the system.


499
00:24:42,786 --> 00:24:43,716
But just one core?


500
00:24:44,336 --> 00:24:46,796
It's low power but
has the highest cost


501
00:24:47,036 --> 00:24:48,146
because of that time component.


502
00:24:50,466 --> 00:24:53,486
Now let's explore more
about why that is.


503
00:24:53,996 --> 00:24:57,566
There's a significant fixed
cost to running any part


504
00:24:57,566 --> 00:24:59,856
of the system, whether it's
CPU, GPU, or anything else.


505
00:25:01,126 --> 00:25:03,016
That fixed cost adds
up over time.


506
00:25:03,406 --> 00:25:06,116
The sooner you can turn off
that fixed cost, the better.


507
00:25:06,816 --> 00:25:10,176
Here I added a little extra
fixed cost for the GPU because,


508
00:25:10,176 --> 00:25:12,966
in fact, there is some more
fixed cost for using the GPU,


509
00:25:12,966 --> 00:25:17,426
but look at how much less energy
is consumed in the green part


510
00:25:18,026 --> 00:25:20,026
when we pull the time in.


511
00:25:21,376 --> 00:25:24,716
Key lesson: Fast is
also energy efficient.


512
00:25:25,446 --> 00:25:26,926
But don't forget to prioritize.


513
00:25:27,716 --> 00:25:29,846
Now let's see if these
fit under the line.


514
00:25:31,026 --> 00:25:32,846
Here is our naive
implementation.


515
00:25:33,246 --> 00:25:35,586
Anybody that's had some high
school geometry is going


516
00:25:35,586 --> 00:25:36,946
to know that's not going
to fit under our --


517
00:25:36,946 --> 00:25:39,136
we are going to pull
it down to the average.


518
00:25:39,136 --> 00:25:40,576
This is no longer
power times time.


519
00:25:40,576 --> 00:25:41,276
It's just average.


520
00:25:42,096 --> 00:25:42,786
It's not going to fit.


521
00:25:43,276 --> 00:25:44,416
But what about the other ones?


522
00:25:44,866 --> 00:25:46,726
Hey, look, efficient!


523
00:25:46,876 --> 00:25:47,406
That's better.


524
00:25:48,326 --> 00:25:49,156
But still not that good.


525
00:25:50,136 --> 00:25:53,526
Parallel are almost under the
line, but that CPU/GPU one,


526
00:25:53,726 --> 00:25:56,496
that actually fit because
the time was so short.


527
00:25:56,556 --> 00:25:59,296
Power was very tall, but
the time was very short.


528
00:25:59,296 --> 00:26:02,626
That's how you should design
your apps, but don't do it over


529
00:26:02,626 --> 00:26:03,876
and over and over again.


530
00:26:04,416 --> 00:26:07,466
Wait for the user
before you do it.


531
00:26:09,196 --> 00:26:10,666
Now let's switch
gears a little bit.


532
00:26:10,976 --> 00:26:13,636
This is all GPU and CPU
applies to OS X and iOS,


533
00:26:13,786 --> 00:26:16,396
but it's especially
important on OS X,


534
00:26:16,396 --> 00:26:19,086
and we measure basically our
energy impact on OS X both


535
00:26:19,086 --> 00:26:22,156
by CPU instructions they
consume but also by the number


536
00:26:22,156 --> 00:26:23,286
of times you wake the system.


537
00:26:24,046 --> 00:26:27,606
And let's switch over to iOS.


538
00:26:27,696 --> 00:26:30,506
iOS devices not only
have CPUs and GPUs


539
00:26:30,506 --> 00:26:33,826
that are quite powerful, but
they also have networking,


540
00:26:34,266 --> 00:26:42,386
location, and this ability
to run in the background.


541
00:26:43,036 --> 00:26:47,986
The networking has very high
costs, big networking hardware,


542
00:26:48,626 --> 00:26:51,226
and it turns out that it has
some significant time components


543
00:26:51,226 --> 00:26:51,996
that you need to think about.


544
00:26:53,016 --> 00:26:56,046
Location is a wonderful
feature, it's great to use,


545
00:26:56,376 --> 00:26:57,726
but it is designed
for, you know --


546
00:26:58,116 --> 00:26:59,666
I'm looking at the map
and watching the dot.


547
00:26:59,666 --> 00:27:00,956
I am going to walk
across the stage


548
00:27:00,956 --> 00:27:01,776
and the dot is going to move.


549
00:27:01,776 --> 00:27:03,466
I am like wow, that's
really impressive


550
00:27:03,526 --> 00:27:05,196
that it can tell I am
walking across the stage.


551
00:27:07,246 --> 00:27:10,146
Unfortunately, that API is
very easy to leave running,


552
00:27:10,516 --> 00:27:13,016
even when I am not looking
at the map, so we need to --


553
00:27:13,016 --> 00:27:16,276
we improve the API, but
we are also needing you


554
00:27:16,316 --> 00:27:19,346
to only use location
for the shortest period


555
00:27:19,346 --> 00:27:20,416
of time that you need.


556
00:27:21,076 --> 00:27:23,686
And finally, any time you are
operating in the background,


557
00:27:24,366 --> 00:27:32,276
that is causing a -- the device
to stay awake, and that adds up.


558
00:27:32,506 --> 00:27:34,476
Every time I leave your app,
I press the Home screen,


559
00:27:35,176 --> 00:27:36,746
you run for the background,
maybe a little bit,


560
00:27:36,746 --> 00:27:40,286
maybe a long time -- we want
to eliminate that as much


561
00:27:40,286 --> 00:27:43,586
as possible because we want the
device to get nice and sleepy


562
00:27:44,026 --> 00:27:45,896
so that we only have to
leave the RAM and radios


563
00:27:45,896 --> 00:27:47,196
in a very low-power mode.


564
00:27:47,746 --> 00:27:50,476
Let's talk about networking.


565
00:27:51,946 --> 00:27:53,176
There's some orange
on the slide.


566
00:27:53,176 --> 00:27:54,036
That orange is not good.


567
00:27:54,566 --> 00:27:55,656
That orange is the overhead.


568
00:27:56,566 --> 00:28:01,096
Here's what happens when
you want to send some data


569
00:28:01,096 --> 00:28:03,816
over the network, especially
on a cellular device.


570
00:28:04,666 --> 00:28:07,246
The system says, oh, look, I
have to send this data right now


571
00:28:07,246 --> 00:28:08,506
because the app told me to.


572
00:28:09,486 --> 00:28:12,076
Hasn't tagged it as a background
work, so I can't delay it.


573
00:28:12,146 --> 00:28:12,886
Got to do it right now.


574
00:28:12,886 --> 00:28:14,786
We are not connected.


575
00:28:14,786 --> 00:28:17,246
We are connected with
an inbound connection


576
00:28:17,246 --> 00:28:19,356
to the cellular system,
but we don't have outbound.


577
00:28:20,316 --> 00:28:21,096
So hold up.


578
00:28:21,756 --> 00:28:22,426
Find a cell tower.


579
00:28:22,586 --> 00:28:24,456
Okay. Got the cell tower.


580
00:28:24,456 --> 00:28:25,386
That one's not so good.


581
00:28:25,386 --> 00:28:25,946
Let me try another.


582
00:28:25,946 --> 00:28:28,436
Oh, okay, this cell
tower's really good.


583
00:28:28,796 --> 00:28:29,966
We got the connection going.


584
00:28:29,966 --> 00:28:31,196
Great. I am going
to send this data.


585
00:28:31,566 --> 00:28:32,266
Okay. I sent the data.


586
00:28:34,686 --> 00:28:36,526
There's no more data to send,
but I have this connection.


587
00:28:36,746 --> 00:28:37,466
It was expensive.


588
00:28:37,466 --> 00:28:38,146
I turned it on.


589
00:28:38,856 --> 00:28:41,046
And the way the cellular
network works,


590
00:28:41,046 --> 00:28:43,716
I have to leave it running
for at least a second or two.


591
00:28:44,416 --> 00:28:47,816
It may only take a few
milliseconds to send the data,


592
00:28:47,996 --> 00:28:49,546
but it can take up
to ten seconds


593
00:28:49,546 --> 00:28:50,696
of staying connected
to the network.


594
00:28:51,026 --> 00:28:54,166
Obviously not as high power
mode, but it is still much,


595
00:28:54,166 --> 00:28:56,186
much higher than idle waiting
for incoming connections.


596
00:28:56,856 --> 00:28:59,526
So that overhead is a
significant energy impact.


597
00:28:59,526 --> 00:29:02,876
It doesn't matter how much
networking you are doing.


598
00:29:03,236 --> 00:29:05,666
If the radios are off,
we have to fire them up


599
00:29:05,666 --> 00:29:08,356
and leave them running
for, in some cases,


600
00:29:08,356 --> 00:29:10,746
a thousand times longer
than you actually needed


601
00:29:10,826 --> 00:29:11,376
to send your data.


602
00:29:11,376 --> 00:29:14,906
And there's no way that
power is significantly


603
00:29:14,906 --> 00:29:16,046
over our low power target.


604
00:29:16,216 --> 00:29:18,026
You cannot leave the
radios on all the time


605
00:29:18,066 --> 00:29:19,346
and achieve all-day
battery life.


606
00:29:20,706 --> 00:29:22,116
This is bad news for chat apps.


607
00:29:22,316 --> 00:29:25,676
The good news is for chat apps
is the users don't actually tap


608
00:29:25,676 --> 00:29:27,096
on their phones for
ten hours straight.


609
00:29:27,096 --> 00:29:27,526
They can't.


610
00:29:28,166 --> 00:29:30,116
So as long as you are wise


611
00:29:30,116 --> 00:29:32,476
about if there's not
live chat going on,


612
00:29:32,956 --> 00:29:33,926
let the network go down,


613
00:29:35,086 --> 00:29:36,496
then you can get
all-day battery life.


614
00:29:37,016 --> 00:29:39,206
How do we fix this?


615
00:29:39,506 --> 00:29:40,356
How do we make this better?


616
00:29:40,726 --> 00:29:41,656
So this is not all-day.


617
00:29:41,946 --> 00:29:42,676
It's too tall.


618
00:29:43,386 --> 00:29:46,806
We fix it by coalescing,
bringing it together,


619
00:29:46,846 --> 00:29:48,016
putting it into a batch of work.


620
00:29:48,636 --> 00:29:51,086
So in this particular
case, we are going


621
00:29:51,086 --> 00:29:53,416
to bring the future
work into the old work.


622
00:29:53,416 --> 00:29:56,046
Now, it may be that the future
work is actually more important,


623
00:29:56,046 --> 00:29:57,566
so you would delay the old work.


624
00:29:57,566 --> 00:29:58,656
That may be easier to do.


625
00:29:58,846 --> 00:29:59,826
Whichever one is more important.


626
00:29:59,826 --> 00:30:01,556
But if you know there's
two pieces of work,


627
00:30:01,976 --> 00:30:03,786
the goal for your apps --


628
00:30:04,136 --> 00:30:05,276
which you can achieve now


629
00:30:05,276 --> 00:30:07,106
because we have these nice
new tools that will show you,


630
00:30:07,286 --> 00:30:09,776
basically, the new
tools are these graphs


631
00:30:09,886 --> 00:30:12,586
in Xcode live on your software.


632
00:30:12,856 --> 00:30:13,346
It's really good.


633
00:30:14,426 --> 00:30:16,906
You can look and say why am I
doing all this unnecessary --


634
00:30:17,006 --> 00:30:17,886
maybe not unnecessary --


635
00:30:18,786 --> 00:30:21,376
why is my networking
pattern inefficient?


636
00:30:21,546 --> 00:30:22,386
Why is it spread out?


637
00:30:22,386 --> 00:30:23,476
How can I pull it together?


638
00:30:23,896 --> 00:30:27,826
And then we can actually get to
that target: average low power.


639
00:30:28,186 --> 00:30:29,356
That means all-day battery life.


640
00:30:30,126 --> 00:30:32,106
So to sum up the networking,


641
00:30:32,566 --> 00:30:34,976
you want to do less
work in networking.


642
00:30:35,686 --> 00:30:37,986
So you've got to design
your system correctly.


643
00:30:38,406 --> 00:30:41,286
Even if you do networking
once a minute, oh,


644
00:30:41,286 --> 00:30:44,026
it's only a few seconds
of overhead, that adds up.


645
00:30:44,336 --> 00:30:46,836
Please, unless the user is
requesting you access the


646
00:30:46,836 --> 00:30:49,656
network right now,
don't access the network


647
00:30:50,116 --> 00:30:52,366
until there's something
really important.


648
00:30:52,876 --> 00:30:56,286
In terms of design, anything
that you can do to offload


649
00:30:56,286 --> 00:30:58,996
to the system and let
the system decide when,


650
00:30:59,126 --> 00:31:02,316
give it some variance of in the
next 10 minutes, the next hour,


651
00:31:02,316 --> 00:31:06,386
the next 24 hours, that will
allow us to batch it together


652
00:31:06,496 --> 00:31:08,556
for you, so you offload
that networking.


653
00:31:08,556 --> 00:31:12,606
We will wake you up and call
you back when the work is done.


654
00:31:15,176 --> 00:31:17,756
A lot of times, you
can wait on the work.


655
00:31:18,106 --> 00:31:21,756
Background update,
NSURLSession has this feature.


656
00:31:22,056 --> 00:31:23,816
Just wait, defer it.


657
00:31:24,036 --> 00:31:25,456
Go ahead and queue
it up, that's fine,


658
00:31:26,076 --> 00:31:27,736
but don't force it
to happen right away.


659
00:31:29,376 --> 00:31:33,406
And these notifications,
notifications are great,


660
00:31:33,966 --> 00:31:36,766
but they can get out
of control sometimes.


661
00:31:36,766 --> 00:31:37,816
And on the server side --


662
00:31:38,006 --> 00:31:40,436
remember I mentioned that we are
always connected to the server


663
00:31:40,436 --> 00:31:41,716
for inbound connections?


664
00:31:41,716 --> 00:31:42,586
Jon mentioned this also.


665
00:31:44,086 --> 00:31:45,156
Inbound connections are cheap.


666
00:31:45,276 --> 00:31:46,596
They are basically
always available.


667
00:31:47,026 --> 00:31:51,186
So go ahead and send something
out rather than polling up.


668
00:31:51,576 --> 00:31:52,586
It's better to send
something out.


669
00:31:52,586 --> 00:31:55,146
But tag those notifications
with PushKit


670
00:31:55,616 --> 00:31:58,566
with an appropriate priority
so we can batch them together.


671
00:31:58,626 --> 00:32:01,196
So when I get an instant
message, which is important


672
00:32:01,196 --> 00:32:03,646
to do quickly, maybe I will
also get that notification


673
00:32:03,646 --> 00:32:06,126
that there's new content to
download into your news app


674
00:32:06,156 --> 00:32:08,786
or something like that.


675
00:32:09,006 --> 00:32:10,566
Now let's talk about location.


676
00:32:11,476 --> 00:32:14,566
There's two components
of location.


677
00:32:14,566 --> 00:32:17,116
Now, the good news is the
power is relatively low,


678
00:32:17,676 --> 00:32:19,746
although if you leave
location running all the time,


679
00:32:19,746 --> 00:32:22,106
there's very little space
to do anything else,


680
00:32:22,286 --> 00:32:24,316
so don't leave precise
location running all the time.


681
00:32:24,796 --> 00:32:26,646
In fact, don't leave any
location running all the time


682
00:32:26,646 --> 00:32:30,346
unless your app is basically
an app that says I live


683
00:32:30,346 --> 00:32:33,486
to run location all the time,
and the user really wants that.


684
00:32:33,486 --> 00:32:36,436
They are going to see you in
the battery menu, and it's going


685
00:32:36,436 --> 00:32:40,546
to say location background,
25 percent of battery.


686
00:32:40,826 --> 00:32:41,376
That won't be good.


687
00:32:41,846 --> 00:32:43,296
Unless that's what your
application is about.


688
00:32:43,426 --> 00:32:45,806
And that is fine.


689
00:32:46,946 --> 00:32:48,876
So precise location
is the most expensive.


690
00:32:48,986 --> 00:32:50,836
We have to turn on more
hardware, talk to satellites --


691
00:32:51,046 --> 00:32:52,856
hey, satellite, satellite,
get all the satellites.


692
00:32:52,856 --> 00:32:53,756
Oh, okay, good.


693
00:32:56,446 --> 00:32:58,276
Imprecise location
is a lot cheaper.


694
00:32:58,276 --> 00:33:00,016
We can just say oh, what
Wi-Fi network am I on?


695
00:33:00,016 --> 00:33:01,016
What cell tower am I near?


696
00:33:01,476 --> 00:33:02,696
And then we can actually --


697
00:33:02,696 --> 00:33:05,026
you can see the green is
where the system is running,


698
00:33:05,106 --> 00:33:06,466
the display is running.


699
00:33:06,466 --> 00:33:08,836
We can actually have a system
be almost completely off


700
00:33:09,206 --> 00:33:11,456
and still track your location,
even precise location.


701
00:33:11,496 --> 00:33:13,446
It's not free, don't leave
it running all the time.


702
00:33:13,446 --> 00:33:14,756
Those leaks.


703
00:33:14,756 --> 00:33:16,786
I am sure you fix drips
in your house, right,


704
00:33:17,266 --> 00:33:19,506
especially California residents.


705
00:33:20,876 --> 00:33:22,496
Location can just
drip, drip, drip.


706
00:33:22,636 --> 00:33:25,716
So let's optimize that.


707
00:33:25,926 --> 00:33:26,616
Use it less.


708
00:33:26,906 --> 00:33:28,956
You know, if you are going to
call start updating location,


709
00:33:29,216 --> 00:33:30,196
don't call it right away.


710
00:33:30,196 --> 00:33:30,926
There are some apps


711
00:33:30,926 --> 00:33:32,786
when I launch the app,
I want my location.


712
00:33:32,786 --> 00:33:34,656
I want to know what
buses are coming when.


713
00:33:35,086 --> 00:33:36,166
Right? That's fine.


714
00:33:36,386 --> 00:33:39,116
Food around me dot app, awesome.


715
00:33:39,476 --> 00:33:40,836
Launch, get location.


716
00:33:41,186 --> 00:33:43,416
Otherwise, wait for
the user to do a search


717
00:33:43,416 --> 00:33:44,566
or whatever you need to do.


718
00:33:45,146 --> 00:33:47,606
Then as soon as the user
is done with that location,


719
00:33:47,606 --> 00:33:49,006
you've got whatever
precision you want,


720
00:33:49,246 --> 00:33:49,926
go ahead and call stop.


721
00:33:51,366 --> 00:33:54,886
For iOS 9, we've introduced a
new API that helps you do this.


722
00:33:54,886 --> 00:33:56,146
It's called request location.


723
00:33:56,946 --> 00:33:58,396
It does the start and the stop,


724
00:33:58,396 --> 00:34:00,466
makes sure you get the
appropriate precision,


725
00:34:00,746 --> 00:34:03,286
and you don't have to
manage the start and stop.


726
00:34:03,606 --> 00:34:05,266
Only available on iOS 9,
so you're going to need


727
00:34:05,266 --> 00:34:06,896
to keep doing the right
thing for the older OSes.


728
00:34:06,896 --> 00:34:09,585
We have a location talk linked
at the end of the slides.


729
00:34:09,966 --> 00:34:14,646
We are also changing how
background location behaves


730
00:34:14,646 --> 00:34:16,505
in the system, so your
app may have permission


731
00:34:16,505 --> 00:34:18,446
to use background
location, but there's going


732
00:34:18,446 --> 00:34:20,556
to be a little bit more
interaction with the user before


733
00:34:20,556 --> 00:34:23,255
that permission is granted,
and to be careful in your app


734
00:34:23,255 --> 00:34:25,146
so you don't accidentally
use it in the background,


735
00:34:25,636 --> 00:34:28,835
keep the property allows
background location updates,


736
00:34:29,346 --> 00:34:30,676
keep that set to false except


737
00:34:30,676 --> 00:34:32,886
when you are actively
doing it in the background.


738
00:34:33,596 --> 00:34:36,436
Just be conscious of when you
turn the location hardware on.


739
00:34:36,436 --> 00:34:37,926
You are actually
powering up, like turning


740
00:34:37,926 --> 00:34:40,755
on the light switch, it's a very
easy switch to leave turned on.


741
00:34:41,286 --> 00:34:44,896
And then when you are actually
using it, bring that power down.


742
00:34:45,076 --> 00:34:46,936
So we talked about time
component, pull the time in,


743
00:34:47,376 --> 00:34:49,416
pull the power down,
and I mentioned


744
00:34:49,416 --> 00:34:50,666
that we can actually offload,


745
00:34:50,666 --> 00:34:52,966
so let's say I am doing
a -- I like to bicycle.


746
00:34:52,966 --> 00:34:56,946
I can track my bicycle riding,
you know, very accurately.


747
00:34:57,336 --> 00:34:59,356
But the hardware does it
rather than the software.


748
00:34:59,606 --> 00:35:02,896
So defer those updates,
so every 15 minutes


749
00:35:02,896 --> 00:35:05,266
or so it will call
you, hey, look,


750
00:35:05,536 --> 00:35:07,216
here is all the tracking
information,


751
00:35:07,526 --> 00:35:10,516
but most of the system and your
software is completely asleep,


752
00:35:10,556 --> 00:35:12,616
and just the location
chip is running.


753
00:35:14,156 --> 00:35:15,436
Finally, our third area --


754
00:35:15,436 --> 00:35:17,286
and these are really the
three things that we want you


755
00:35:17,286 --> 00:35:19,536
to be doing in terms of
debugging your software --


756
00:35:19,706 --> 00:35:22,986
you know, reduce
networking, reduce location,


757
00:35:23,526 --> 00:35:26,806
and background running.


758
00:35:27,146 --> 00:35:30,186
This is just energy that the
user typically doesn't see,


759
00:35:30,456 --> 00:35:30,716
right?


760
00:35:30,716 --> 00:35:32,566
They may appreciate that
the app is up-to-date


761
00:35:32,566 --> 00:35:36,026
when they launch it, but try
to use background app refresh.


762
00:35:36,026 --> 00:35:37,486
Try to give good, big leeways.


763
00:35:37,486 --> 00:35:40,396
If you send notifications
and they get ignored,


764
00:35:40,396 --> 00:35:42,676
that's actually lighting
up the screen,


765
00:35:42,676 --> 00:35:45,356
it's firing up the
network, and this just --


766
00:35:45,496 --> 00:35:47,706
this alone is not
going to consume --


767
00:35:47,706 --> 00:35:48,586
I mean, if you do
it all the time,


768
00:35:48,586 --> 00:35:49,896
it will consume your
battery pretty quickly.


769
00:35:49,896 --> 00:35:57,236
But it is a -- it's basically
just shaving off the energy


770
00:35:57,236 --> 00:35:58,296
that's available
for other things.


771
00:35:58,406 --> 00:36:00,766
It's reducing -- it's
basically if I lowered the bar


772
00:36:00,766 --> 00:36:04,306
and said you've got to get under
9 percent instead of 10 percent.


773
00:36:04,836 --> 00:36:05,966
We've got to get rid of --


774
00:36:06,276 --> 00:36:10,066
and that's 20 percent worse
because you only have 5 percent


775
00:36:10,066 --> 00:36:11,146
to work with on average.


776
00:36:11,976 --> 00:36:13,346
Just make sure you are not
running in the background.


777
00:36:13,486 --> 00:36:14,596
How do you do that?


778
00:36:15,236 --> 00:36:17,686
Any time you call start
background task, we are going


779
00:36:17,686 --> 00:36:19,716
to keep the device awake for
up to a couple of minutes,


780
00:36:20,466 --> 00:36:22,656
so you want to call
end background task


781
00:36:22,656 --> 00:36:23,426
as soon as possible.


782
00:36:23,896 --> 00:36:27,776
There's a great App Guide, in
addition to the Energy Guide,


783
00:36:27,776 --> 00:36:30,686
there's also an App Life
Cycle Guide, and basically


784
00:36:31,076 --> 00:36:32,816
when you get that message
that says hey, you are going


785
00:36:32,816 --> 00:36:34,356
into the background,
that's fine.


786
00:36:35,496 --> 00:36:38,436
Do your UI state-saving
right there.


787
00:36:38,506 --> 00:36:40,236
Talk to UI, please
save my state.


788
00:36:40,636 --> 00:36:44,576
If you've got significant data
you need to save, go ahead


789
00:36:44,576 --> 00:36:49,046
and fork off a background
operation, but make sure


790
00:36:49,046 --> 00:36:50,996
that all code paths call
end background task.


791
00:36:51,086 --> 00:36:52,506
Do not leak background activity.


792
00:36:52,506 --> 00:36:56,406
And if you've got networking
to do, like maybe that saving


793
00:36:56,406 --> 00:36:58,706
to the disk, that's probably
going to happen, that's fine.


794
00:36:59,146 --> 00:37:02,236
Network activity -- this is a
great opportunity to offload


795
00:37:02,236 --> 00:37:04,876
that networking to the OS.


796
00:37:05,036 --> 00:37:06,696
Hey, I have this
networking, it needs to happen


797
00:37:06,696 --> 00:37:10,066
but it's not time critical, just
do it whenever you have a chance


798
00:37:10,066 --> 00:37:11,156
within some time scope.


799
00:37:11,646 --> 00:37:14,396
That gives the system the
opportunity to optimize.


800
00:37:15,716 --> 00:37:17,506
This is also a good
thing at design time,


801
00:37:17,956 --> 00:37:21,436
that you can design your app to
be more flexible in this regard.


802
00:37:21,966 --> 00:37:24,466
This is my ideal app.


803
00:37:24,466 --> 00:37:27,326
Jon showed a great slide, sort
of a typical app that does a lot


804
00:37:27,326 --> 00:37:28,176
of work when you launch it.


805
00:37:28,946 --> 00:37:31,696
My ideal app barely does
any work when you launch it.


806
00:37:31,986 --> 00:37:33,136
Then it doesn't do any work


807
00:37:33,776 --> 00:37:35,266
until the user actually
interacts.


808
00:37:35,576 --> 00:37:36,846
Then it goes crazy!


809
00:37:37,596 --> 00:37:38,556
Lots of work!


810
00:37:38,556 --> 00:37:38,956
Let's do it!


811
00:37:38,956 --> 00:37:39,696
Here's all the work.


812
00:37:39,886 --> 00:37:41,066
Prioritized, please.


813
00:37:41,746 --> 00:37:44,026
And then it's done
and it goes back.


814
00:37:44,516 --> 00:37:45,196
It's nice and idle.


815
00:37:45,796 --> 00:37:49,616
And that you can topple that
Transamerica pyramid down,


816
00:37:50,086 --> 00:37:51,806
and it will fit under the line.


817
00:37:54,476 --> 00:37:56,336
So how is your app doing?


818
00:37:56,636 --> 00:37:58,516
We really want you to go
home, run these new tools.


819
00:37:58,746 --> 00:38:00,786
Check out your app, run
it through all its paces.


820
00:38:00,946 --> 00:38:03,266
Because these tools will only
show you what you ask the app


821
00:38:03,396 --> 00:38:03,706
to do.


822
00:38:04,216 --> 00:38:05,866
Make sure that what
the app is doing,


823
00:38:05,866 --> 00:38:07,006
in terms of energy impact,


824
00:38:07,376 --> 00:38:09,966
corresponds to the user
benefit that's being delivered.


825
00:38:10,546 --> 00:38:14,796
So Xcode now has an energy
gauge for iOS as well as OS X,


826
00:38:15,026 --> 00:38:17,176
and it highlights exactly the
things I just talked about,


827
00:38:17,176 --> 00:38:19,546
which are CPU, networking,
location, background.


828
00:38:20,246 --> 00:38:22,276
Get all that networking
coalesced, all that location


829
00:38:22,276 --> 00:38:25,316
under control, all that
background activity eliminated.


830
00:38:25,856 --> 00:38:27,906
So come to our next
talk, learn about that.


831
00:38:28,746 --> 00:38:31,496
So as you are designing
your next feature,


832
00:38:31,806 --> 00:38:34,836
designing your next app,
think about these costs.


833
00:38:35,186 --> 00:38:38,796
Raw CPU power, CPU
patterns and GPU patterns.


834
00:38:38,796 --> 00:38:40,266
Am I waking up and
going to sleep a lot?


835
00:38:40,356 --> 00:38:42,586
Can I make it more constrained?


836
00:38:43,426 --> 00:38:45,266
Anything that kind of blinks --


837
00:38:45,556 --> 00:38:47,206
some of you probably
remember the blink tag


838
00:38:47,206 --> 00:38:48,506
from the early web pages.


839
00:38:48,826 --> 00:38:51,276
No blinking, especially
at high frequency.


840
00:38:52,476 --> 00:38:55,626
Anything faster than the user's
interaction is high frequency.


841
00:38:56,796 --> 00:38:58,766
And try to set expectations
for yourself.


842
00:38:58,766 --> 00:39:00,676
Because if you are writing
a chat app and you are going


843
00:39:00,836 --> 00:39:03,406
to be streaming videos
of yourself all day long,


844
00:39:03,406 --> 00:39:05,726
you are going to mount it
on a new hardware device,


845
00:39:06,506 --> 00:39:07,846
that user hopefully is not going


846
00:39:07,846 --> 00:39:09,116
to expect all-day battery
life from that app.


847
00:39:09,116 --> 00:39:10,706
They are going to have to
buy a separate phone --


848
00:39:10,856 --> 00:39:12,646
in fact three phones --
so that they can have


849
00:39:12,646 --> 00:39:15,446
that running all day.


850
00:39:15,716 --> 00:39:19,176
That app is not going to
sell well, I am sorry.


851
00:39:19,176 --> 00:39:21,796
So plan this when you are
like in your business model,


852
00:39:21,796 --> 00:39:23,526
be like what is the
battery life of this app?


853
00:39:24,416 --> 00:39:27,516
Am I using a lot of location,
am I using a lot of networking,


854
00:39:27,516 --> 00:39:28,756
am I doing these things
in the background,


855
00:39:29,136 --> 00:39:29,906
because they are expensive.


856
00:39:29,906 --> 00:39:32,866
Look at your implementation.


857
00:39:32,866 --> 00:39:33,936
Check out the Energy Guide,


858
00:39:34,166 --> 00:39:35,716
make sure you're passing
the best arguments


859
00:39:35,756 --> 00:39:36,846
to the various APIs.


860
00:39:37,276 --> 00:39:38,206
Look at your own code.


861
00:39:38,206 --> 00:39:38,976
Look at our code.


862
00:39:39,246 --> 00:39:41,366
If you see our code doing
something strange, file a bug.


863
00:39:41,686 --> 00:39:43,946
Finally, look at any third-party
code you might be using.


864
00:39:44,236 --> 00:39:46,336
Say you have an ad framework.


865
00:39:46,336 --> 00:39:48,466
Ads are good, they support our
platform, they support you.


866
00:39:50,006 --> 00:39:53,296
However, if they do a lot of
downloading, like every ad,


867
00:39:53,506 --> 00:39:55,506
download display, download
display, download display,


868
00:39:55,506 --> 00:39:57,786
and then we're keeping the
network on for a long time


869
00:39:57,786 --> 00:39:59,286
in between -- not good.


870
00:39:59,526 --> 00:40:00,616
Got to take an eye on that.


871
00:40:00,886 --> 00:40:02,296
Finally, test.


872
00:40:02,376 --> 00:40:04,136
Run these tools on
a regular basis


873
00:40:04,136 --> 00:40:07,436
and make sure your app is
behaving the way you expect


874
00:40:07,436 --> 00:40:07,746
it to.


875
00:40:07,956 --> 00:40:10,916
If you already did
all these things,


876
00:40:11,056 --> 00:40:13,426
which I suspect you haven't
yet, but maybe you have --


877
00:40:13,696 --> 00:40:14,726
in which case, great work --


878
00:40:15,326 --> 00:40:19,186
go ahead and check out your
background update intervals.


879
00:40:19,186 --> 00:40:22,706
Can you reduce and give you
greater leeway to the system?


880
00:40:23,396 --> 00:40:25,696
Can you use notifications
more sparingly,


881
00:40:25,696 --> 00:40:26,626
especially if you
have a VoIP app.


882
00:40:26,656 --> 00:40:28,916
We changed our API a little bit.


883
00:40:29,436 --> 00:40:31,126
Remember, those incoming
connections are cheap,


884
00:40:31,216 --> 00:40:33,286
they are not free, and
they will cause you


885
00:40:33,286 --> 00:40:36,536
to call back, but
don't pull out.


886
00:40:36,536 --> 00:40:38,156
Don't mess with the
display brightness.


887
00:40:38,466 --> 00:40:41,286
And drawing is probably the
next front of excessive --


888
00:40:41,446 --> 00:40:42,646
I talked about blink,
but there's a lot


889
00:40:42,646 --> 00:40:43,846
of other drawing
things you can do.


890
00:40:44,166 --> 00:40:46,666
Last year's talk at these
topics, linked at the end,


891
00:40:46,996 --> 00:40:48,696
is right on topic for drawing.


892
00:40:49,046 --> 00:40:49,956
Got some tools for that too.


893
00:40:50,266 --> 00:40:54,606
Finally, we now have Energy
Guides for OS X and iOS,


894
00:40:54,676 --> 00:40:57,706
so all this information I just
presented is fully documented,


895
00:40:57,706 --> 00:40:59,556
and we'll continue to
update that information


896
00:40:59,776 --> 00:41:01,316
on developer.Apple.com.


897
00:41:01,596 --> 00:41:04,136
So to summarize everything
that we talked about,


898
00:41:04,996 --> 00:41:08,046
energy is power times time.


899
00:41:08,046 --> 00:41:09,426
You want to pull that in.


900
00:41:09,626 --> 00:41:12,886
The power part is important,
but it's only important in terms


901
00:41:12,886 --> 00:41:13,566
of how long you run it.


902
00:41:13,566 --> 00:41:16,206
And we want to get you
down to nice low power,


903
00:41:16,266 --> 00:41:17,756
and that's the low -- our tools.


904
00:41:17,756 --> 00:41:19,156
Our tools have a
nice low section,


905
00:41:19,396 --> 00:41:20,296
as you will learn
in the next talk.


906
00:41:20,726 --> 00:41:23,176
That will give our users
all-day battery life.


907
00:41:24,456 --> 00:41:26,116
Do less work less often.


908
00:41:26,606 --> 00:41:27,136
Do it later.


909
00:41:27,806 --> 00:41:28,516
Do it efficiently.


910
00:41:29,776 --> 00:41:31,296
Here are those links
I talked about.


911
00:41:31,816 --> 00:41:36,296
Documentation, videos,
guides, last year's talks.


912
00:41:36,716 --> 00:41:39,846
We've got our standard forums.


913
00:41:39,846 --> 00:41:40,896
You can interact
with each other.


914
00:41:40,896 --> 00:41:42,786
You can contact us,
the DTS people.


915
00:41:43,176 --> 00:41:44,166
They have my phone number.


916
00:41:44,416 --> 00:41:45,706
You don't have my phone number.


917
00:41:45,766 --> 00:41:47,156
They do. Talk to them.


918
00:41:47,156 --> 00:41:48,106
They can probably help you.


919
00:41:48,106 --> 00:41:49,766
If they don't, they
will call me or one


920
00:41:49,766 --> 00:41:50,916
of my excellent teammates.


921
00:41:51,896 --> 00:41:52,566
Paul is here.


922
00:41:52,726 --> 00:41:56,706
His email gets to
go on the slide.


923
00:41:56,896 --> 00:41:57,856
Related sessions.


924
00:41:57,856 --> 00:42:00,606
The very next session,
please stick around.


925
00:42:00,606 --> 00:42:03,196
We've got networking,
we've got some performance,


926
00:42:03,746 --> 00:42:04,406
check these out.


927
00:42:04,506 --> 00:42:06,656
They are going to help
you think about how


928
00:42:06,656 --> 00:42:08,276
to optimize all the
things I just talked about.


929
00:42:08,786 --> 00:42:11,576
Please go optimize
your apps for energy.


930
00:42:13,516 --> 00:42:28,570
[ Applause ]

