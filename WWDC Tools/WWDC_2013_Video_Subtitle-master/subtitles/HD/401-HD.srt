1
00:00:00,506 --> 00:00:17,396
[ Silence ]


2
00:00:17,896 --> 00:00:18,736
>> Anders Bertelrud: Welcome


3
00:00:18,736 --> 00:00:22,066
to session 401, Xcode
Core Concepts.


4
00:00:22,496 --> 00:00:24,776
I'm Anders and later on in
this session I'll be joined


5
00:00:24,776 --> 00:00:25,726
by my colleague Rick.


6
00:00:27,436 --> 00:00:30,186
So, this morning in Presidio


7
00:00:30,226 --> 00:00:33,506
in the previous Xcode session
we saw what's new in Xcode 5.


8
00:00:33,506 --> 00:00:35,916
And in this session I like
to talk a little bit more


9
00:00:35,916 --> 00:00:39,366
about the core concepts
behind Xcode, both those in 4


10
00:00:39,366 --> 00:00:42,246
and also those that are
newly expressed in Xcode 5.


11
00:00:42,816 --> 00:00:45,356
And the goal is to give
you better understanding


12
00:00:45,356 --> 00:00:46,346
of what you're seeing in the UI


13
00:00:46,976 --> 00:00:49,236
and to make you a lot more
efficient as you're using Xcode.


14
00:00:49,776 --> 00:00:51,986
So specifically we're
going to start talking


15
00:00:51,986 --> 00:00:55,376
about the user interface and
the various concepts behind


16
00:00:55,376 --> 00:00:57,716
that with the special
focus on navigation.


17
00:00:58,106 --> 00:00:59,246
When you're working
with your code,


18
00:00:59,246 --> 00:01:00,836
a lot of the times you're
going back and forth


19
00:01:00,876 --> 00:01:03,286
between various source
files or UI files.


20
00:01:03,286 --> 00:01:06,416
I want to make that as efficient
as possible and Xcode has a lot


21
00:01:06,416 --> 00:01:07,306
of good features for that.


22
00:01:08,196 --> 00:01:10,046
We're going to talk
about working effectively


23
00:01:10,046 --> 00:01:13,106
with editors, with the single
editor as well as multiple ones.


24
00:01:13,816 --> 00:01:15,936
We're going to talk specifically
about some of the things


25
00:01:15,936 --> 00:01:18,416
in the source editor that you
can use to be more productive.


26
00:01:19,396 --> 00:01:21,936
I'm going to talk a little bit
about documentation integration,


27
00:01:22,256 --> 00:01:24,476
and how to customize
Xcode's behaviors.


28
00:01:24,476 --> 00:01:27,116
Xcode has fairly flexible
behavior system that you can use


29
00:01:27,116 --> 00:01:28,326
to really improve your workflow.


30
00:01:28,776 --> 00:01:31,676
After that, my colleague Rick's
going to come up on stage


31
00:01:31,676 --> 00:01:34,766
and talk about the fundamental
concepts that underlie Xcode,


32
00:01:34,816 --> 00:01:36,436
the once you're manipulating
through the UI.


33
00:01:37,096 --> 00:01:40,916
That includes workspaces,
projects, targets,


34
00:01:41,836 --> 00:01:43,766
schemes and run destinations.


35
00:01:44,006 --> 00:01:46,906
So some of this will be
familiar from Xcode 4


36
00:01:46,906 --> 00:01:48,916
but there may be a lot of things
there you don't know about


37
00:01:49,276 --> 00:01:50,736
and some will be new in Xcode 5.


38
00:01:50,946 --> 00:01:51,866
We'll start with the UI.


39
00:01:52,296 --> 00:01:54,266
This is the familiar
Xcode workspace window.


40
00:01:54,806 --> 00:01:56,846
And so I won't go
into it in detail


41
00:01:56,846 --> 00:01:58,926
because you all have
seen it before.


42
00:01:59,326 --> 00:02:02,126
But briefly, to the left
here is the navigation area.


43
00:02:02,876 --> 00:02:06,546
All of that area are
consists of different panes


44
00:02:06,626 --> 00:02:10,545
that show you a different
view into your code.


45
00:02:11,816 --> 00:02:16,586
I should say also on the right
there is the utility area


46
00:02:16,586 --> 00:02:19,416
consisting of the inspector
on the top and library


47
00:02:19,416 --> 00:02:21,676
at the bottom and in the middle
is where you do the editing,


48
00:02:21,866 --> 00:02:23,616
and of course you can
close any of these panes.


49
00:02:24,146 --> 00:02:26,386
So let's start by that
focusing and navigation.


50
00:02:26,986 --> 00:02:30,406
So the navigator area here
on the left, the very top


51
00:02:30,406 --> 00:02:33,056
of that are the selectors
for choosing


52
00:02:33,056 --> 00:02:34,396
which navigator you want to see.


53
00:02:34,756 --> 00:02:36,856
We'll go into each of
these in a bit more detail.


54
00:02:36,996 --> 00:02:40,246
We have the project
navigator, the symbol navigator,


55
00:02:40,456 --> 00:02:42,616
find, issue navigator.


56
00:02:43,396 --> 00:02:46,526
The new one in Xcode 5 is the
unit test testing navigator,


57
00:02:47,556 --> 00:02:50,076
debugging and related
is breakpoints and then


58
00:02:50,076 --> 00:02:51,346
of course the log navigator.


59
00:02:52,016 --> 00:02:54,656
So taking a closer look
at those, first of all,


60
00:02:54,656 --> 00:02:57,546
I want to show that at the
bottom of most of these,


61
00:02:57,546 --> 00:03:01,146
we have a filter bar that's
down there at the bottom--


62
00:03:01,216 --> 00:03:03,106
it's different, slightly
different for each


63
00:03:03,106 --> 00:03:05,586
of the navigators but it fills
the same function for each.


64
00:03:06,656 --> 00:03:10,256
There's usually a way to create
the new entry of the content


65
00:03:10,256 --> 00:03:12,236
that you're looking at,
whether that's a file


66
00:03:12,236 --> 00:03:13,586
or breakpoints or any of those.


67
00:03:14,256 --> 00:03:16,146
There are state filters
that are specific


68
00:03:16,146 --> 00:03:18,206
to the particular
navigator you're looking at.


69
00:03:19,216 --> 00:03:20,926
And then there's
usually, most of them,


70
00:03:20,926 --> 00:03:24,066
have a generic text filter,
where if you know the name


71
00:03:24,066 --> 00:03:26,346
or a substring of the name
of what you're looking for,


72
00:03:26,346 --> 00:03:27,996
you can just type it
in and quickly narrow


73
00:03:27,996 --> 00:03:29,626
down on what you're looking for.


74
00:03:30,696 --> 00:03:33,366
So, looking at each
the navigators in turn,


75
00:03:34,996 --> 00:03:37,126
we'll see first here with
the project navigator,


76
00:03:37,796 --> 00:03:40,346
there is a recently
edited, first of all,


77
00:03:40,346 --> 00:03:42,876
of course it shows you the
project contents, projects,


78
00:03:43,026 --> 00:03:44,366
files, those kinds of things.


79
00:03:44,776 --> 00:03:48,386
At the bottom there,
there is a recent filter


80
00:03:48,386 --> 00:03:51,376
and this could be very useful
if you have a very large project


81
00:03:51,736 --> 00:03:54,386
and you've been working
on a certain set of files,


82
00:03:54,386 --> 00:03:55,536
you have a certain working set.


83
00:03:55,536 --> 00:03:59,746
So those will show you the ones
you've been visiting recently.


84
00:03:59,746 --> 00:04:03,376
The modified filter will
focus just on those things


85
00:04:03,376 --> 00:04:05,406
that you modified since the
last time you checked anything


86
00:04:05,406 --> 00:04:07,636
into source code or that
have interesting SCM state.


87
00:04:08,096 --> 00:04:11,576
And of course there is the
filter field where you can,


88
00:04:11,576 --> 00:04:13,486
in this case, we type
in the string render


89
00:04:13,486 --> 00:04:16,755
and we see just the entries
that-- that contain that name.


90
00:04:17,245 --> 00:04:19,456
So that's pretty simple.


91
00:04:19,456 --> 00:04:21,716
Now the symbol navigator,
it shows you all kinds


92
00:04:21,716 --> 00:04:24,786
of symbolic information that
we get from indexing your code.


93
00:04:24,856 --> 00:04:28,716
So this includes of course
classes, methods, enumerations,


94
00:04:28,716 --> 00:04:29,776
all those kinds of things.


95
00:04:29,776 --> 00:04:33,436
There are filters there to
let you focus just on your own


96
00:04:33,436 --> 00:04:35,486
or the ones that are
in the system as well.


97
00:04:35,616 --> 00:04:40,226
The find navigator is where
you do workspace wide searching


98
00:04:40,226 --> 00:04:43,636
of either regular plain text
strings or regular expressions.


99
00:04:44,846 --> 00:04:49,946
And so-- one of the things
that you can do here is to go


100
00:04:50,266 --> 00:04:54,696
into replace modes, you could do
search or you could do replace.


101
00:04:54,776 --> 00:04:56,946
And as you saw yesterday we


102
00:04:56,946 --> 00:05:00,916
in Xcode 5 we streamlined the
UI here to make it a lot easier


103
00:05:00,916 --> 00:05:02,336
to get at these various things.


104
00:05:02,836 --> 00:05:06,466
You can actually delete search
results, as you go through them,


105
00:05:06,466 --> 00:05:08,886
and that doesn't delete them
from your code, it just takes it


106
00:05:08,886 --> 00:05:10,516
out of the list of the
ones you're operating on.


107
00:05:11,456 --> 00:05:16,076
There's also a scope field
and what that lets you do is


108
00:05:16,076 --> 00:05:18,296
to narrow down the
search or replace


109
00:05:18,376 --> 00:05:21,076
on just a particular
part of your workspace.


110
00:05:21,116 --> 00:05:23,996
Now that could be either
a subtree or subfolder


111
00:05:23,996 --> 00:05:27,186
or a project, or you could
define your own filters


112
00:05:27,186 --> 00:05:28,526
that define a set of files


113
00:05:28,526 --> 00:05:30,846
such as all header
files or all nib files.


114
00:05:32,196 --> 00:05:35,496
The issue navigator
shows you issues


115
00:05:35,496 --> 00:05:38,306
that Xcode has discovered
with your project.


116
00:05:38,466 --> 00:05:40,886
So this could be,
of course, warnings


117
00:05:40,886 --> 00:05:42,446
and errors form the
compiler or linker,


118
00:05:42,806 --> 00:05:44,956
but also static analysis
results.


119
00:05:45,036 --> 00:05:47,206
And also Xcode itself, you--


120
00:05:47,206 --> 00:05:50,386
before you build will check
for certain consistency issues,


121
00:05:50,386 --> 00:05:53,246
such as if you don't have
the right SDK installed


122
00:05:53,406 --> 00:05:54,546
that you'll need
for the project,


123
00:05:54,546 --> 00:05:55,416
you'll see that right away.


124
00:05:56,216 --> 00:06:00,096
And sometimes, if Xcode detects
a modernization suggestion,


125
00:06:00,166 --> 00:06:02,496
it will actually tell
you here as well.


126
00:06:02,496 --> 00:06:04,006
So that's a good
place to check and try


127
00:06:04,006 --> 00:06:05,276
to keep this as empty
as possible.


128
00:06:06,286 --> 00:06:08,786
The test navigator
is new in Xcode 5


129
00:06:09,216 --> 00:06:10,796
and this shows your unit tests


130
00:06:10,796 --> 00:06:14,276
and that also let's you create
new ones from here and run them,


131
00:06:15,236 --> 00:06:19,316
and there's a whole session
about that coming up and so,


132
00:06:19,826 --> 00:06:21,996
so I won't say much more about
that here, that's on Thursday.


133
00:06:23,216 --> 00:06:27,276
The debug navigator is of course
where you see the current state


134
00:06:27,276 --> 00:06:31,256
of your program, that's where we
have the new gauges in Xcode 5


135
00:06:31,426 --> 00:06:36,416
and there's a whole session on
that as well, so I will skip


136
00:06:36,416 --> 00:06:39,006
over that one as well because
there's a lot more to talk


137
00:06:39,006 --> 00:06:39,776
about in this session.


138
00:06:40,316 --> 00:06:42,096
That debugging session
is on Wednesday.


139
00:06:42,636 --> 00:06:44,886
The breakpoint navigator
is closely related


140
00:06:44,886 --> 00:06:48,636
to the debug navigator, and
unlike the debug navigator,


141
00:06:49,076 --> 00:06:51,006
this is one where you
can create content even


142
00:06:51,006 --> 00:06:52,096
if your program is not running.


143
00:06:52,096 --> 00:06:54,056
So for example, you can
create new breakpoints,


144
00:06:54,056 --> 00:06:56,946
new symbolic breakpoints or
just breakpoints in your code.


145
00:06:57,266 --> 00:06:59,186
One of the new things
in Xcode 5 is


146
00:06:59,246 --> 00:07:04,026
that this pane shows you
the resolved breakpoints


147
00:07:04,026 --> 00:07:05,296
of any symbolic ones you have.


148
00:07:05,296 --> 00:07:06,896
So you can enter
symbolic breakpoints


149
00:07:06,896 --> 00:07:10,366
for a certain method name and
then you can see all the places


150
00:07:10,366 --> 00:07:12,676
that match that in the code and,


151
00:07:12,676 --> 00:07:14,206
and click on them to
go directly there.


152
00:07:14,286 --> 00:07:18,336
And of course the
activity log navigator,


153
00:07:18,336 --> 00:07:22,826
that shows SCM activity, it
shows you build, warnings


154
00:07:22,826 --> 00:07:24,436
and errors and those
kinds of things.


155
00:07:24,436 --> 00:07:28,866
And in Xcode 5 it also shows
you the diagnostics and logs


156
00:07:28,866 --> 00:07:32,346
that you get from your
Xcode service bots.


157
00:07:32,436 --> 00:07:34,886
There's a whole session on that
called "Continuous Integration


158
00:07:34,886 --> 00:07:37,366
in Xcode 5" and that's going to
be this afternoon at Presidio.


159
00:07:39,176 --> 00:07:43,086
So, because these are
very commonly used


160
00:07:43,086 --> 00:07:45,986
and very useful different
entry points into your code,


161
00:07:46,046 --> 00:07:49,736
they have very convenient
keyboard shortcuts.


162
00:07:49,846 --> 00:07:54,046
So control simply 1 through
8 will put the cursor


163
00:07:54,456 --> 00:07:57,376
in the navigator, switch to
the right one, put the cursor


164
00:07:57,376 --> 00:07:59,526
in there so you can use the
arrow keys to go up and down


165
00:07:59,966 --> 00:08:02,176
and then quickly go
to the file you want.


166
00:08:02,176 --> 00:08:04,686
So even if your hands are on
the keyboard, your text's--


167
00:08:04,686 --> 00:08:06,186
you're looking at your text,


168
00:08:06,236 --> 00:08:07,776
this is the-- the
way to do that.


169
00:08:07,776 --> 00:08:09,506
Let me just very
quickly go there.


170
00:08:10,366 --> 00:08:12,476
So let's talk a little
bit about editors


171
00:08:12,476 --> 00:08:14,156
and working effectively
with editors.


172
00:08:14,156 --> 00:08:16,556
We've seen now how to navigate
between the different content


173
00:08:16,556 --> 00:08:18,416
and get different
files into the editor.


174
00:08:18,716 --> 00:08:22,306
So at the top of the editor,
on top of every editor,


175
00:08:22,306 --> 00:08:23,796
there's a jump bar
as we call it,


176
00:08:23,796 --> 00:08:25,156
and it has various components.


177
00:08:25,226 --> 00:08:27,726
So, there's the-- the
related files menu,


178
00:08:27,966 --> 00:08:30,206
I'm sure you've used before
but I hopefully I can--


179
00:08:30,386 --> 00:08:32,916
show some, some extra
tricks on how to use that.


180
00:08:33,426 --> 00:08:37,346
There's back and forth buttons,
each editor works a little bit


181
00:08:37,346 --> 00:08:39,336
like web browser in the
sense that there's a history,


182
00:08:39,336 --> 00:08:41,366
you go back and forth
not only between files


183
00:08:41,405 --> 00:08:43,756
but also the locations
within the particular file.


184
00:08:45,196 --> 00:08:47,786
The location of the file in
the workspace does two things.


185
00:08:47,786 --> 00:08:51,456
It-- it tells you what file
you're editing especially useful


186
00:08:51,456 --> 00:08:53,186
if you have multiple
files with the same name,


187
00:08:53,616 --> 00:08:55,556
but also it lets you access any


188
00:08:55,556 --> 00:08:57,786
of the other files
reachable from your workspace.


189
00:08:58,876 --> 00:09:02,366
And on the-- right here is
the issue mini navigator.


190
00:09:02,366 --> 00:09:05,926
If you have any issues at the
issue pane that are associated


191
00:09:05,926 --> 00:09:08,846
with files, you can use the
arrow keys to go back and forth


192
00:09:08,846 --> 00:09:11,516
between them or pop that menu
and just cycle through the,


193
00:09:11,566 --> 00:09:15,406
the issues and fix them.


194
00:09:15,606 --> 00:09:20,516
So, the-- starting off from the
left here, we can hit control 1


195
00:09:20,516 --> 00:09:23,696
or we go, we click
on the, the menu.


196
00:09:24,096 --> 00:09:25,736
We get to the related
files menu.


197
00:09:25,736 --> 00:09:29,226
And when Xcode indexes
your project it knows a lot


198
00:09:29,226 --> 00:09:31,526
about each file and how that
can be related to the other one,


199
00:09:31,526 --> 00:09:33,186
so obviously there
is a recent menu.


200
00:09:33,746 --> 00:09:36,326
Counterparts include most
obviously if you're looking


201
00:09:36,326 --> 00:09:38,956
at the implementation you can
see the header, vice versa,


202
00:09:39,156 --> 00:09:43,046
superclasses, pretty
straightforward, categories,


203
00:09:43,046 --> 00:09:43,966
and those kinds of things.


204
00:09:44,416 --> 00:09:49,306
Now, there's also a convenient
way to get to any other file


205
00:09:49,306 --> 00:09:51,796
that this file includes
or vice versa to get


206
00:09:51,846 --> 00:09:53,416
to any other includers
of this file.


207
00:09:53,416 --> 00:09:55,096
That's great for a header
when you're wondering


208
00:09:55,096 --> 00:09:56,746
which other files
include it and you want


209
00:09:56,746 --> 00:09:57,886
to go quickly between them.


210
00:09:59,296 --> 00:10:01,446
And then of course,
new in Xcode 5 is


211
00:10:01,486 --> 00:10:05,246
that you can get
to tests as well.


212
00:10:05,246 --> 00:10:09,416
At the bottom there are
controls to get to preprocess


213
00:10:09,416 --> 00:10:12,146
and assembly language
outputs of your current file.


214
00:10:12,526 --> 00:10:15,616
And when you do that you get
a preview of the assembler


215
00:10:15,616 --> 00:10:18,006
and you can pick if
you have let's say code


216
00:10:18,006 --> 00:10:21,666
that compiles both for iOS
and for OS X, you can pick


217
00:10:21,706 --> 00:10:24,326
which CPU you want the
assembler output for.


218
00:10:24,856 --> 00:10:26,636
The back and forth buttons
are pretty straightforward.


219
00:10:26,636 --> 00:10:28,986
I won't spend a lot
of time on those.


220
00:10:29,086 --> 00:10:30,626
But there are keyboard
equivalents for each


221
00:10:30,626 --> 00:10:36,016
of these and, and so that
will conveniently get you


222
00:10:36,016 --> 00:10:36,546
up to the menu.


223
00:10:36,546 --> 00:10:42,386
The menu that shows you the
entire workspace can be quite


224
00:10:42,386 --> 00:10:46,646
big but it uses submenus to let
you navigate really to any file


225
00:10:46,646 --> 00:10:48,236
at all that you can
reach from the workspace,


226
00:10:48,236 --> 00:10:49,366
so that can be fairly
convenient.


227
00:10:51,146 --> 00:11:00,026
And then finally, if you--
if you hit Control 5,


228
00:11:00,596 --> 00:11:03,576
you get to the menu that
shows just the files.


229
00:11:03,576 --> 00:11:07,186
Very often the other file you're
looking to go to is up here


230
00:11:07,186 --> 00:11:11,536
of the one that you're already
viewing and so control 5 put you


231
00:11:11,536 --> 00:11:13,586
on that menu, you can use
the arrow keys and return key


232
00:11:13,586 --> 00:11:17,056
to quickly go to any
one of those files.


233
00:11:17,236 --> 00:11:23,406
And control 6 pulls down to
Symbol menu which is, well,


234
00:11:23,406 --> 00:11:24,966
shows you all the
classes and methods.


235
00:11:25,046 --> 00:11:27,216
And one of the tricks
that actually works


236
00:11:27,216 --> 00:11:28,886
with all these menus
is type-aheads.


237
00:11:28,886 --> 00:11:30,526
You can just start typing
when you're looking at any


238
00:11:30,526 --> 00:11:32,496
of these menus and it
will quickly filter


239
00:11:32,496 --> 00:11:35,836
down to exactly what you're
looking for and that can be--


240
00:11:35,836 --> 00:11:38,106
that actually works in all of
them and that can be a great way


241
00:11:38,106 --> 00:11:40,106
to just very quickly get
to the menu you want.


242
00:11:41,226 --> 00:11:44,156
So, we've looked a little
bit about the jump bar


243
00:11:44,156 --> 00:11:45,146
at the top of editors.


244
00:11:45,146 --> 00:11:48,626
So let's talk about the
assistant editor, when you open


245
00:11:48,626 --> 00:11:52,736
up Xcode by default, you get
just the single standard editor,


246
00:11:52,736 --> 00:11:55,186
and whenever you choose
a new thing to look


247
00:11:55,186 --> 00:11:58,856
at though navigation, then
the content is replaced.


248
00:11:58,856 --> 00:12:00,946
Now, the assistant
editor is a secondary


249
00:12:00,946 --> 00:12:04,156
or it can even be
tertiary that opens up


250
00:12:04,156 --> 00:12:06,676
and it will track the
contents of the primary editor.


251
00:12:06,966 --> 00:12:10,406
And so this is excellent for
looking at auxiliary content.


252
00:12:10,796 --> 00:12:13,366
And one of the things that you
might not know is that you can--


253
00:12:13,366 --> 00:12:15,376
you have several
options for how to lay


254
00:12:15,376 --> 00:12:16,846
out the assistant editors.


255
00:12:16,846 --> 00:12:18,596
They can stack from
top to bottom,


256
00:12:18,596 --> 00:12:19,746
or right to left, et cetera.


257
00:12:20,106 --> 00:12:24,766
So with the Assistant
Editor, how do you invoke it?


258
00:12:25,126 --> 00:12:27,216
One of the ways you can
invoke that is most obviously


259
00:12:27,216 --> 00:12:32,506
with the tool bar and you see
here the highlighted button


260
00:12:32,506 --> 00:12:35,676
there, it gets you into standard
editor mode, just clicking


261
00:12:35,676 --> 00:12:37,286
on the assistant
editor button put you


262
00:12:37,286 --> 00:12:38,346
on assistant editor mode.


263
00:12:38,906 --> 00:12:41,956
You can conveniently access
any kind of SCM information


264
00:12:41,956 --> 00:12:43,266
about the current file as well.


265
00:12:43,666 --> 00:12:45,366
And for each of this there's,


266
00:12:45,366 --> 00:12:48,566
there's key equivalents you can
see in here, command Option,


267
00:12:48,566 --> 00:12:49,746
command Shift, et cetera.


268
00:12:50,256 --> 00:12:55,146
There's a whole session on SCM
and Xcode and that's going to be


269
00:12:55,146 --> 00:12:57,846
on Friday in Pacific Heights
and that will talk a lot more


270
00:12:57,846 --> 00:13:01,236
about the functionality that you
get underneath that, that mode.


271
00:13:02,886 --> 00:13:04,466
Going back to the
Assistant Mode here,


272
00:13:04,706 --> 00:13:06,716
regardless of how you invoke it.


273
00:13:07,566 --> 00:13:09,976
What happens when you invoke
it is you get a second editor


274
00:13:09,976 --> 00:13:12,916
that tracks and by default it
will track whatever is most


275
00:13:12,916 --> 00:13:16,226
appropriate as a counterpart to
the file and the primary editor.


276
00:13:17,136 --> 00:13:21,696
Xcode knows things like
header files being associated


277
00:13:21,696 --> 00:13:22,946
with implementation files.


278
00:13:22,946 --> 00:13:25,336
It also knows for example that
a vertex shader is associated


279
00:13:25,336 --> 00:13:26,166
with a fragment shader.


280
00:13:26,236 --> 00:13:27,996
So when you choose
counterparts here,


281
00:13:28,196 --> 00:13:32,036
it will go between the
various, various files


282
00:13:32,036 --> 00:13:34,996
and when you switch a file,
the assistant editor tracks.


283
00:13:35,506 --> 00:13:37,286
This is particularly useful


284
00:13:37,286 --> 00:13:39,146
when you have contents
such as a nib file.


285
00:13:39,406 --> 00:13:42,336
So if you're looking, for
example, at a view controller,


286
00:13:42,886 --> 00:13:46,216
you can see that
the corresponding UI


287
00:13:46,216 --> 00:13:48,226
in the right hand side there.


288
00:13:48,226 --> 00:13:50,736
And then what happens
when you're looking


289
00:13:50,736 --> 00:13:53,056
in the assistant editor
is you may very well want


290
00:13:53,056 --> 00:13:56,426
to actually focus on that for
a bit so you can choose the--


291
00:13:56,426 --> 00:13:58,686
to make that the
primary content.


292
00:13:59,126 --> 00:14:00,606
And what happens in that case is


293
00:14:00,606 --> 00:14:04,386
that the assistant content
becomes the primary content,


294
00:14:04,706 --> 00:14:07,186
and now the assistant
editor is available


295
00:14:07,186 --> 00:14:09,026
to show you related
content to that.


296
00:14:09,146 --> 00:14:11,546
So that way you can sort
of navigate back and forth


297
00:14:11,916 --> 00:14:14,356
in your graph of connectedness
between your files.


298
00:14:15,306 --> 00:14:17,736
In this case, as you
click in the nib file,


299
00:14:18,086 --> 00:14:21,006
you can see the source
files that are related


300
00:14:21,006 --> 00:14:23,696
to the various doc-- various
objects in your nib file.


301
00:14:24,136 --> 00:14:27,846
And you'll notice that the
Assistant menu now has changed


302
00:14:27,846 --> 00:14:31,786
to show you entries that are
relevant to the nib file.


303
00:14:31,786 --> 00:14:34,966
So you can very easily,
for example, go through all


304
00:14:34,966 --> 00:14:36,216
of the different
actions that are,


305
00:14:36,216 --> 00:14:37,776
that are presented
in this nib file.


306
00:14:38,946 --> 00:14:41,306
In activating the assistant
editor, how do you do that?


307
00:14:41,366 --> 00:14:43,976
Well one is of course, you can
use the button in the tool bar,


308
00:14:45,106 --> 00:14:49,616
but there's a very useful
thing throughout Xcode,


309
00:14:50,076 --> 00:14:53,746
and that is the Option key where
when you use the Option key,


310
00:14:54,126 --> 00:14:56,456
and combine that with
other modes of navigation,


311
00:14:56,826 --> 00:14:59,636
instead of putting the source
file into the primary editor,


312
00:14:59,636 --> 00:15:02,796
it'll open up an assistant,
and this could be very useful.


313
00:15:03,146 --> 00:15:04,576
It exists in a variety
of places.


314
00:15:04,576 --> 00:15:08,736
So for example, command click
on a symbol will navigate


315
00:15:08,886 --> 00:15:11,186
to the source of that symbol
to-- to where it's defined.


316
00:15:11,596 --> 00:15:16,216
If you also hold down the Option
key, it will do the same thing


317
00:15:16,216 --> 00:15:17,476
but open up an assistant editor.


318
00:15:18,026 --> 00:15:20,306
And you can do the same thing
when you click on a File


319
00:15:20,306 --> 00:15:22,966
and then any of the navigators,
hold on the Option key


320
00:15:23,126 --> 00:15:25,146
and it will instead put that
content in the assistant.


321
00:15:25,806 --> 00:15:28,366
And that can be very useful
when you're navigating


322
00:15:28,366 --> 00:15:31,366
and you don't actually want to
focus on what it is that's--


323
00:15:31,476 --> 00:15:32,826
that you're seeing, you
just want to keep it


324
00:15:32,826 --> 00:15:35,156
up as auxiliary content
to maybe for reference.


325
00:15:35,796 --> 00:15:38,786
And in addition to that, if
you want even more power,


326
00:15:39,256 --> 00:15:42,336
if you hold down the Shift
key in addition you can get


327
00:15:42,336 --> 00:15:43,496
to the navigation chooser.


328
00:15:44,036 --> 00:15:50,636
You can also get to it from
the menu, the Open in menu.


329
00:15:51,296 --> 00:15:55,446
But again, Command,
Option, Shift will bring


330
00:15:55,446 --> 00:15:56,576
up the navigation chooser.


331
00:15:56,956 --> 00:16:00,156
This is a HUD that lets you
use arrow keys and return key


332
00:16:00,676 --> 00:16:04,106
to really do anything you want.


333
00:16:04,106 --> 00:16:06,106
You can put the content
in a new tab,


334
00:16:07,326 --> 00:16:09,246
you could add a new
assistant editor


335
00:16:10,316 --> 00:16:11,736
or you can even create
a new tab,


336
00:16:11,736 --> 00:16:14,766
it will put in an existing tab
or put content in a new window.


337
00:16:16,076 --> 00:16:18,986
This is very customizable
and the user,


338
00:16:18,986 --> 00:16:21,246
perhaps you can set exactly
what happens when you hold


339
00:16:21,246 --> 00:16:23,136
on the option key, when you
double click, et cetera.


340
00:16:23,256 --> 00:16:25,706
So if you haven't customized
this you may want to take a look


341
00:16:25,706 --> 00:16:27,016
at that and see if you--


342
00:16:27,186 --> 00:16:30,716
find a better workflow for
you with these options.


343
00:16:31,236 --> 00:16:35,856
All right, so another way
to navigate is open quickly,


344
00:16:35,856 --> 00:16:37,686
and I'm sure many
of you use this.


345
00:16:38,436 --> 00:16:40,806
Command, Shift, O,
brings up open quickly,


346
00:16:41,716 --> 00:16:45,686
and here you simply type
the name or a part of a file


347
00:16:46,036 --> 00:16:50,336
or a symbol and Xcode
narrows down the list.


348
00:16:50,336 --> 00:16:51,906
And as you notice, you
actually don't have


349
00:16:51,906 --> 00:16:53,506
to type the contiguous range.


350
00:16:53,606 --> 00:16:56,586
Very often if you just remember
the first parts of various,


351
00:16:56,586 --> 00:16:58,456
of the subwords,
you could type that.


352
00:16:59,256 --> 00:17:01,706
And very quickly get to
where you want to go.


353
00:17:02,186 --> 00:17:04,636
And also the Option
key works here too,


354
00:17:04,886 --> 00:17:06,185
so if you just hit return now


355
00:17:06,185 --> 00:17:09,616
or just select this then
you'll be replacing the content


356
00:17:09,616 --> 00:17:10,546
of your primary editor.


357
00:17:10,546 --> 00:17:12,576
If you hold down the
Option key as well,


358
00:17:12,796 --> 00:17:13,986
it'll open up assistant editor.


359
00:17:14,685 --> 00:17:16,626
So let me show you few things
about the source editor.


360
00:17:16,846 --> 00:17:19,266
So that's couple things
about the assistant editor


361
00:17:19,266 --> 00:17:21,396
and the key takeaway
there is the,


362
00:17:21,396 --> 00:17:23,705
the power of the Option key,
it can really, really help you


363
00:17:23,705 --> 00:17:24,396
with your workflow there.


364
00:17:25,486 --> 00:17:28,886
With the source editor,
there are couple of things--


365
00:17:28,886 --> 00:17:30,786
there a lot of features, but
a couple of things I want


366
00:17:30,786 --> 00:17:31,636
to call out in particular.


367
00:17:32,156 --> 00:17:35,306
It's very common to want to
rename all the local variables,


368
00:17:35,306 --> 00:17:37,406
a-- a local variable,
all the occurrences


369
00:17:37,406 --> 00:17:40,136
of a local variable to,
to have a single name.


370
00:17:40,136 --> 00:17:43,936
So, you can do that by
editing each occurrence of it,


371
00:17:44,676 --> 00:17:47,256
but a better way is to
do Edit All in Scope


372
00:17:47,456 --> 00:17:48,876
and there's a menu item for that


373
00:17:48,926 --> 00:17:50,336
but there's also
command, Control E.


374
00:17:51,216 --> 00:17:55,386
And when you do that, what
Xcode does is to take what's


375
00:17:55,386 --> 00:17:58,926
under this-- the cursor, and
there's actually a submenu


376
00:17:58,926 --> 00:18:00,506
that shows up underneath
an arrow there.


377
00:18:00,646 --> 00:18:02,606
You can-- so there's
variety of ways to invoke it.


378
00:18:02,856 --> 00:18:04,796
And then as you just type,


379
00:18:05,096 --> 00:18:08,606
Xcode will replace all the
locations of that same symbol.


380
00:18:09,166 --> 00:18:11,886
And it's not purely a
textual replacement.


381
00:18:11,886 --> 00:18:14,686
It uses the index and it
knows that two variables


382
00:18:14,686 --> 00:18:16,386
with the same name
are actually different


383
00:18:16,386 --> 00:18:17,786
if they're in different scopes.


384
00:18:17,826 --> 00:18:19,156
So that-- that can
be a really great way


385
00:18:19,156 --> 00:18:22,516
to rename a variable to,
to have a better name


386
00:18:22,836 --> 00:18:24,526
if you picked the wrong
one the first time around.


387
00:18:26,276 --> 00:18:29,516
Another very useful
feature is Code Snippets.


388
00:18:29,736 --> 00:18:34,176
So, very often when you're
coding, you come to a point


389
00:18:34,176 --> 00:18:36,596
where you say, "Well
there's a sort of,


390
00:18:36,866 --> 00:18:39,356
the sort of pattern
here of function call


391
00:18:39,356 --> 00:18:41,126
or a loop that I want to use."


392
00:18:41,186 --> 00:18:44,976
And Xcode has a fairly large
library built in Code Snippets


393
00:18:44,976 --> 00:18:47,456
for common idioms into
various frameworks.


394
00:18:48,646 --> 00:18:51,446
One way to instantiate it
is to just drag and drop.


395
00:18:51,446 --> 00:18:54,816
And then what you get is you get
tokens for where you're going


396
00:18:54,816 --> 00:18:56,026
to fill in your own content.


397
00:18:56,026 --> 00:18:57,386
And you can just fill that in


398
00:18:57,866 --> 00:19:01,316
and then just have your
own-- your own code there.


399
00:19:02,296 --> 00:19:06,366
But very often, you will have
your own code where you want


400
00:19:06,366 --> 00:19:07,766
to create your own
shortcuts for it.


401
00:19:07,876 --> 00:19:11,026
So you can also create custom
Code Snippets, and to do that,


402
00:19:11,176 --> 00:19:15,926
you just select a bunch of
code and then you drag it over


403
00:19:16,016 --> 00:19:18,906
and drop, and you
see that it shows


404
00:19:18,906 --> 00:19:20,316
up right there on
the-- on the side.


405
00:19:20,706 --> 00:19:24,066
A popover comes up and
it will let you edit any


406
00:19:24,066 --> 00:19:24,956
of the content in here.


407
00:19:26,266 --> 00:19:29,446
So there are menus to let
you choose the platform


408
00:19:29,446 --> 00:19:32,036
and the scope and the language,
that's pretty straightforward.


409
00:19:32,726 --> 00:19:35,966
You edit the contents of it and
I want to call out one thing


410
00:19:35,966 --> 00:19:40,626
in particular, when you edit the
contents, you can use the syntax


411
00:19:40,626 --> 00:19:44,326
that uses angle brackets and
hash marks to surround parts


412
00:19:44,326 --> 00:19:46,596
of your text that
you want to tokenize.


413
00:19:46,596 --> 00:19:50,896
So those then become tokens when
you instantiate the Code Snippet


414
00:19:50,896 --> 00:19:53,056
that can be easily replaced.


415
00:19:54,056 --> 00:19:58,906
That turns into a token, and
then you can also crucially,


416
00:19:58,906 --> 00:20:02,446
you can set a code completion
default because as fun as it is


417
00:20:02,446 --> 00:20:04,346
to drag code snippets,
you probably don't want


418
00:20:04,346 --> 00:20:06,856
to keep the utility area open,
and certainly you don't want


419
00:20:06,856 --> 00:20:08,106
to reach for the mouse in order


420
00:20:08,106 --> 00:20:09,756
to do instantiate
a code snippet.


421
00:20:10,066 --> 00:20:13,966
So, by associating a substring
here, now it becomes avail--


422
00:20:13,966 --> 00:20:15,476
and I'm hitting OK, I'm done.


423
00:20:15,946 --> 00:20:18,946
Then it becomes available when
you go down and put your cursor


424
00:20:18,946 --> 00:20:22,646
in the code, and you
can instantiate it.


425
00:20:23,236 --> 00:20:24,496
And when you start typing,


426
00:20:25,476 --> 00:20:27,546
code completion will
include that code snippet.


427
00:20:27,546 --> 00:20:30,266
And then when you
instantiate it, it shows up


428
00:20:30,266 --> 00:20:31,226
and you can just replace it.


429
00:20:31,886 --> 00:20:37,106
So, with that I'd like to invite
my colleague Rick on stage


430
00:20:37,106 --> 00:20:38,176
to show you some
of this in action.


431
00:20:39,026 --> 00:20:39,916
>> Rick Ballard:
OK, thanks Anders.


432
00:20:40,826 --> 00:20:43,496
So, right now I'm going to
take you through a quick demo


433
00:20:43,816 --> 00:20:46,146
of using some of the features
that Anders just talked


434
00:20:46,146 --> 00:20:47,986
about to work efficiently
in Xcode.


435
00:20:48,736 --> 00:20:51,986
All right, so, I've
got my project here


436
00:20:51,986 --> 00:20:54,606
and I have a problem
I want to investigate.


437
00:20:54,606 --> 00:20:55,976
So, first of all
I want to go look


438
00:20:55,976 --> 00:20:57,466
at the method where
the problem is.


439
00:20:57,466 --> 00:21:02,826
So, as Anders told you, you
can just use Command, Shift,


440
00:21:02,826 --> 00:21:07,006
and O to bring up Open Quickly
and start typing the name


441
00:21:07,006 --> 00:21:10,656
of any symbol in your workspace
and we'll find it via the index.


442
00:21:11,186 --> 00:21:13,946
So, in this case, I'm going to
start typing part of shape class


443
00:21:13,946 --> 00:21:16,516
and it found my method,
register shape class with tag,


444
00:21:16,516 --> 00:21:20,126
and I just hit Return
and here's the method


445
00:21:20,126 --> 00:21:21,166
that I want to take a look at.


446
00:21:21,436 --> 00:21:25,126
So, this method is dispatching
something to a concurrent queue.


447
00:21:25,536 --> 00:21:28,186
And the problem I have is
that one of the callers


448
00:21:28,186 --> 00:21:30,596
of this method is passing nil
for one of the parameters.


449
00:21:30,596 --> 00:21:31,966
So, this is assert is firing.


450
00:21:32,476 --> 00:21:34,856
Now normally I'd just look
at the backtrace of my assert


451
00:21:34,856 --> 00:21:36,916
to see who called
this the wrong way.


452
00:21:37,186 --> 00:21:39,336
But since this is dispatched
to a concurrent queue,


453
00:21:39,496 --> 00:21:41,446
that backtrace just
shows dispatch machinery


454
00:21:41,446 --> 00:21:44,556
and I can't see who's calling
my method with a bad parameter.


455
00:21:44,556 --> 00:21:46,876
So, I'm going to use the
power of the assistant editor


456
00:21:47,066 --> 00:21:49,236
and our callers functionality
to track


457
00:21:49,276 --> 00:21:51,156
down who might be
causing this here.


458
00:21:51,706 --> 00:21:54,296
So, first of all I'm
going to go ahead


459
00:21:54,296 --> 00:21:58,916
and select the assistant editor
in upper right-hand corner


460
00:21:58,916 --> 00:22:03,716
and I can go and see a bunch
of different related content


461
00:22:03,716 --> 00:22:04,796
in the assistant editor.


462
00:22:05,106 --> 00:22:07,276
In this case I'm going to
go take a look at callers,


463
00:22:07,676 --> 00:22:11,116
and here Xcode through its
index has found everything


464
00:22:11,116 --> 00:22:13,166
in this workspace that
calls this method,


465
00:22:13,166 --> 00:22:14,546
there are three callers.


466
00:22:14,546 --> 00:22:17,286
So, now I can easily
just select one of them


467
00:22:17,736 --> 00:22:21,136
and here I can see this method
is definitely not passing nil


468
00:22:21,136 --> 00:22:22,166
for that parameter.


469
00:22:22,166 --> 00:22:23,486
So, this is not the problem.


470
00:22:23,486 --> 00:22:25,866
So to go to the next
one, I'm actually going


471
00:22:25,866 --> 00:22:27,106
to use a keyboard shortcut now.


472
00:22:27,106 --> 00:22:31,016
If I use control 4 it will
pop-up the assistant menu again.


473
00:22:31,016 --> 00:22:32,756
And I can just use
the Arrow keys


474
00:22:32,986 --> 00:22:34,576
and select the next caller here,


475
00:22:34,666 --> 00:22:38,366
and I see this one also is not
passing nil for that parameter.


476
00:22:38,786 --> 00:22:40,846
So, I'm going to do
that one more time,


477
00:22:41,226 --> 00:22:44,776
I'll select the last
caller and this one is--


478
00:22:44,776 --> 00:22:46,026
has forgotten to pass a tag.


479
00:22:46,026 --> 00:22:47,076
So, there's my problem.


480
00:22:47,356 --> 00:22:49,966
So, I can just say
fill in this--


481
00:22:49,966 --> 00:22:53,066
fill in this tag and
I fix that problem.


482
00:22:54,206 --> 00:22:56,356
OK, I'm going to go back
to my standard editor


483
00:22:56,356 --> 00:22:57,436
so you can see well here.


484
00:22:57,866 --> 00:22:59,076
And the next problem I want


485
00:22:59,076 --> 00:23:02,956
to solve is I have this property
isLoaded here and I maybe want


486
00:23:02,956 --> 00:23:04,616
to give that a bit more
of a descriptive name.


487
00:23:04,616 --> 00:23:07,336
That property reflects
whether my cache is loaded.


488
00:23:07,516 --> 00:23:09,906
So, I think I actually want
to call it, isCacheLoaded.


489
00:23:10,576 --> 00:23:13,066
So to rename a method,
normally I could use--


490
00:23:13,066 --> 00:23:15,986
to use Xcode's refactoring
feature to rename a method


491
00:23:15,986 --> 00:23:18,306
and it would rename that method
and all callers of that method.


492
00:23:18,886 --> 00:23:22,126
But in this case, this property
is, key-value observed by some


493
00:23:22,126 --> 00:23:24,366
of the callers and
so this method name


494
00:23:24,366 --> 00:23:26,846
or this property name just
shows up in string values


495
00:23:27,036 --> 00:23:28,106
to key-value observing


496
00:23:28,346 --> 00:23:30,106
so the rename refactoring
isn't sufficient.


497
00:23:30,106 --> 00:23:33,246
So, for this case, I'm actually
going to use a textual find


498
00:23:33,246 --> 00:23:35,176
and replace in order
to rename this method.


499
00:23:36,026 --> 00:23:38,146
So first of all I'm going
to go to the find navigator,


500
00:23:38,536 --> 00:23:40,426
command 3 will bring
that up easily.


501
00:23:41,216 --> 00:23:42,906
And I'm going to
select the word "Loaded"


502
00:23:42,906 --> 00:23:44,166
that I'm going to replace here.


503
00:23:44,486 --> 00:23:46,926
Command E will put that
in the find pasteboard.


504
00:23:46,926 --> 00:23:49,956
So, you see it's showing up here
in the upper left-hand corner.


505
00:23:50,046 --> 00:23:53,906
And if I hit Return, I can find
all instances of the word loaded


506
00:23:53,906 --> 00:23:56,806
in source code in my
workspace, just like that.


507
00:23:57,726 --> 00:23:59,546
So, I actually want to
do a replacement here.


508
00:23:59,546 --> 00:24:01,926
So, I'm going to choose
replace then I want


509
00:24:01,926 --> 00:24:04,696
to replace the word
Loaded with cacheLoaded.


510
00:24:04,696 --> 00:24:07,056
So, if I hit replace on
that it will go ahead


511
00:24:07,056 --> 00:24:08,066
and make this change.


512
00:24:08,346 --> 00:24:10,116
But before I do that,
I ought to make sure


513
00:24:10,116 --> 00:24:11,286
that all these instances


514
00:24:11,286 --> 00:24:14,596
of the word loaded are actually
references to my property name


515
00:24:14,716 --> 00:24:15,886
and not that word showing


516
00:24:15,886 --> 00:24:17,556
up somewhere else
in my source code.


517
00:24:17,996 --> 00:24:20,846
So, if I start flipping through
these, I see, here's a case


518
00:24:20,846 --> 00:24:22,866
where that property is
being key-value observed.


519
00:24:23,166 --> 00:24:25,176
Here-- here is that
key path again.


520
00:24:25,416 --> 00:24:28,296
Actually, almost of these are
my property, but there's one


521
00:24:28,296 --> 00:24:31,286
that isn't and that's the
underlying shape cache


522
00:24:31,396 --> 00:24:32,446
isLoaded property.


523
00:24:32,446 --> 00:24:33,446
I'm not renaming that.


524
00:24:33,446 --> 00:24:36,066
So, I don't want my find and
replace to touch that one.


525
00:24:36,486 --> 00:24:38,766
So as Anders said, you can
actually delete find results


526
00:24:38,766 --> 00:24:40,036
out of the find navigator.


527
00:24:40,346 --> 00:24:42,576
So, with this selected, if
I just press the Delete key,


528
00:24:42,766 --> 00:24:44,066
it deleted that find result.


529
00:24:44,296 --> 00:24:47,036
And now when I do my batch
replace, it's not going


530
00:24:47,036 --> 00:24:48,326
to touch that one case.


531
00:24:48,326 --> 00:24:50,176
So, I can just replace
the instances


532
00:24:50,176 --> 00:24:51,326
of the string that I want to.


533
00:24:51,546 --> 00:24:53,906
So, I'm going to say
replace all, I'm not going


534
00:24:53,906 --> 00:24:55,166
to use snapshots at the moment.


535
00:24:55,386 --> 00:24:56,296
And now, it's gone ahead


536
00:24:56,296 --> 00:24:58,636
and renamed our property
to isCacheLoaded.


537
00:24:58,956 --> 00:25:01,006
All right, there's one more
thing I want to show you.


538
00:25:01,286 --> 00:25:04,486
I have a method that I want to
validate that some other methods


539
00:25:04,486 --> 00:25:06,876
that I call are doing the
right with change management.


540
00:25:07,076 --> 00:25:08,886
So, first of all
I'm going to go back


541
00:25:08,886 --> 00:25:10,936
to the project navigator
to find this file.


542
00:25:10,936 --> 00:25:12,326
I could use open quickly
again, but I'm going


543
00:25:12,326 --> 00:25:13,256
to show you a different way.


544
00:25:13,736 --> 00:25:17,986
Down in the lower left, if I
select the recent files filter,


545
00:25:18,356 --> 00:25:20,666
you'll see just the files that
I've been editing recently.


546
00:25:20,666 --> 00:25:23,056
And this provides a
really nice working set.


547
00:25:23,056 --> 00:25:24,196
If I'm going back and forth


548
00:25:24,196 --> 00:25:26,016
between a few files
I edit frequently,


549
00:25:26,316 --> 00:25:27,806
I can just see them all here


550
00:25:27,806 --> 00:25:29,546
and have them all
immediately accessible.


551
00:25:29,756 --> 00:25:33,156
So, in this case the file I
want to edit is SKTDocument.


552
00:25:33,766 --> 00:25:35,716
And now, I need to find
the method I'm looking


553
00:25:35,716 --> 00:25:39,426
for so I'm going to use control
6 to bring up the symbol pop-up.


554
00:25:39,746 --> 00:25:42,176
And with type-ahead, I can
just start typing what I'm


555
00:25:42,176 --> 00:25:42,826
looking for.


556
00:25:43,166 --> 00:25:45,306
So, I'm going to
say readFromData.


557
00:25:45,306 --> 00:25:48,496
Here it is, there's the
method I want, I select that,


558
00:25:48,496 --> 00:25:51,016
and here's the method I
want to take a look at.


559
00:25:51,696 --> 00:25:55,206
So, down here this method
is removing some graphics


560
00:25:55,446 --> 00:25:57,126
and then inserting
some graphics,


561
00:25:57,346 --> 00:25:58,556
and I want to make
sure that both


562
00:25:58,556 --> 00:26:00,126
of these are doing
the right thing.


563
00:26:00,476 --> 00:26:03,856
So, if I command click on this
symbol it would jump right


564
00:26:03,856 --> 00:26:05,636
to that method and I
could see what it's doing.


565
00:26:05,636 --> 00:26:07,976
But in this case, I actually
want to see my code side


566
00:26:07,976 --> 00:26:10,596
by side, so I can see that
it's all coordinating properly,


567
00:26:10,776 --> 00:26:12,906
so to use that I'm going to
use the assistant editor.


568
00:26:13,136 --> 00:26:16,526
So as Anders said any
navigation that you can do


569
00:26:16,526 --> 00:26:18,946
if you add the option key,
it will send that navigation


570
00:26:18,946 --> 00:26:19,966
to the assistant editor.


571
00:26:20,126 --> 00:26:22,066
So, instead of command
clicking on this,


572
00:26:22,356 --> 00:26:24,356
I'm going to command
option click on it


573
00:26:24,356 --> 00:26:27,166
and that will automatically
open up the assistant editor


574
00:26:27,416 --> 00:26:28,926
and you can see here's
the method


575
00:26:28,926 --> 00:26:30,166
that I want to take a look at.


576
00:26:30,166 --> 00:26:31,306
So, that's great.


577
00:26:31,306 --> 00:26:33,996
I also want to look at
insertGraphics at the same time.


578
00:26:34,456 --> 00:26:35,586
So, I'm actually going to open


579
00:26:35,586 --> 00:26:38,296
up another assistant
editor to do that.


580
00:26:38,296 --> 00:26:41,706
So, Anders mentioned that
Option, Shift, Navigation brings


581
00:26:41,706 --> 00:26:43,606
up the navigation
chooser and let you choose


582
00:26:43,606 --> 00:26:44,976
where your concept will go.


583
00:26:45,266 --> 00:26:49,876
So, I'm going to Command, Option
Shift, click on this method.


584
00:26:50,406 --> 00:26:53,766
There's my navigation chooser,
I can just go down and tell it


585
00:26:53,766 --> 00:26:56,816
that I want to open a new
assistant editor, hit Return,


586
00:26:57,046 --> 00:26:59,236
and here's this method
opening in a new--


587
00:26:59,236 --> 00:27:00,816
you open in a new
assistant editor.


588
00:27:01,276 --> 00:27:05,256
So, I can go down here and
see that my remove method,


589
00:27:05,256 --> 00:27:07,846
before it does the remove,
it stops observing graphics.


590
00:27:08,206 --> 00:27:10,246
My insert method, after
it does the insert,


591
00:27:10,246 --> 00:27:11,956
it starts observing graphics.


592
00:27:12,186 --> 00:27:13,966
So, this looks like it's
all behaving correctly


593
00:27:13,966 --> 00:27:15,126
and works the way I want.


594
00:27:15,126 --> 00:27:17,366
So, that's just a quick example


595
00:27:17,366 --> 00:27:19,516
of how you can use
Xcode's navigation features


596
00:27:19,516 --> 00:27:20,536
and our assistant editor


597
00:27:20,826 --> 00:27:23,116
to build really efficient
nice workflows.


598
00:27:23,646 --> 00:27:25,026
Let's turn it back
over to Anders.


599
00:27:25,416 --> 00:27:26,686
>> Anders Bertelrud: So,
let's talk a little bit


600
00:27:26,686 --> 00:27:28,226
about documentation integration.


601
00:27:28,226 --> 00:27:30,646
Xcode 4 had good
documentation integration,


602
00:27:30,646 --> 00:27:32,246
and in Xcode 5 it's even better.


603
00:27:33,246 --> 00:27:35,586
One of the ways, of course,
when you want to look


604
00:27:35,586 --> 00:27:38,146
at documentation is you're
looking at your code,


605
00:27:38,146 --> 00:27:39,426
you have your hands
on the keyboard,


606
00:27:39,766 --> 00:27:41,856
and you may want information
about a certain method.


607
00:27:42,346 --> 00:27:46,296
So, in Xcode, we
provide documentation


608
00:27:46,396 --> 00:27:49,566
with the command completion.


609
00:27:49,566 --> 00:27:52,126
So, when you go to
complete code,


610
00:27:52,256 --> 00:27:53,956
you can now get information


611
00:27:53,956 --> 00:27:55,936
about the item under
your selection.


612
00:27:55,936 --> 00:27:58,216
If you have more than one
as you arrow up and down,


613
00:27:58,576 --> 00:27:59,476
you get a short summary.


614
00:27:59,476 --> 00:28:00,896
This is great if you
don't know exactly


615
00:28:00,896 --> 00:28:04,086
which method you're using,
that you want to use,


616
00:28:04,206 --> 00:28:06,436
then you can get
a summary of it.


617
00:28:06,836 --> 00:28:10,426
Another thing you can
do is to option click


618
00:28:11,096 --> 00:28:13,636
and that will get you,
instead of command click goes


619
00:28:13,636 --> 00:28:16,946
to the definition, option click
will get your documentation


620
00:28:16,946 --> 00:28:18,076
about the symbol under there.


621
00:28:18,076 --> 00:28:20,456
And as you can see, we
have complete documentation


622
00:28:20,906 --> 00:28:24,746
about the symbol without even
having to open up a utility area


623
00:28:24,746 --> 00:28:25,656
or documentation area.


624
00:28:26,276 --> 00:28:28,506
That's great when you just want
to know some more information


625
00:28:28,506 --> 00:28:30,756
about a particular method
that you see being used,


626
00:28:30,756 --> 00:28:32,716
method or function or
enumeration, et cetera.


627
00:28:33,256 --> 00:28:36,796
Sometimes though
you want to look


628
00:28:36,996 --> 00:28:39,836
at documentation a little
bit more permanently


629
00:28:39,836 --> 00:28:42,956
or less transiently, so what
you can do there is to open


630
00:28:42,956 --> 00:28:47,526
up the right side of the utility
area there, and then keep


631
00:28:47,526 --> 00:28:49,896
that open, and as you
move the cursor around,


632
00:28:50,436 --> 00:28:52,256
the quick help will
show you the information


633
00:28:52,256 --> 00:28:54,166
about whatever is
currently under your cursor.


634
00:28:54,286 --> 00:28:56,166
So as you use arrow
keys up and down


635
00:28:56,166 --> 00:28:57,806
for example the content
there will change.


636
00:28:57,996 --> 00:28:59,516
So, that's all great.


637
00:28:59,516 --> 00:29:01,876
That's for the built-in
documentation for iOS,


638
00:29:01,876 --> 00:29:03,956
for OS X, SDKs, etceteras.


639
00:29:04,176 --> 00:29:05,546
So, what about your own code?


640
00:29:05,796 --> 00:29:07,456
Well, this is what you see


641
00:29:07,456 --> 00:29:10,516
if you haven't told Xcode
anything else, all it knows is


642
00:29:10,516 --> 00:29:13,046
where you declare it which would
be in a header file usually.


643
00:29:13,656 --> 00:29:15,886
But, as you may have seen
in the previous sessions,


644
00:29:15,886 --> 00:29:17,316
in Xcode 5, you can do better.


645
00:29:17,916 --> 00:29:20,476
So, this is how your
declaration looks


646
00:29:20,476 --> 00:29:23,826
without any other adornment
and that's the help you get.


647
00:29:23,876 --> 00:29:25,616
You sort of get what
you put into it.


648
00:29:26,436 --> 00:29:29,776
If you put some comments
in, for regular comments,


649
00:29:29,876 --> 00:29:32,126
you can put some special
annotations in there,


650
00:29:32,646 --> 00:29:36,736
Xcode will parse that, in this
case we're using doxygen type


651
00:29:37,096 --> 00:29:41,696
tags there, and then Xcode
can actually show a pop-up


652
00:29:41,696 --> 00:29:43,176
that will give you a
lot more information.


653
00:29:43,386 --> 00:29:45,166
The same amount of
information that you get


654
00:29:45,166 --> 00:29:47,106
for the built-in SDKs.


655
00:29:48,486 --> 00:29:52,816
So, in this case for example,
you see how the various parts


656
00:29:52,816 --> 00:29:56,766
of your comment translate to
the various parts of the pop-up.


657
00:29:56,766 --> 00:29:57,916
And you can get more information


658
00:29:57,916 --> 00:30:01,366
about the syntax,
at doxygen.org.


659
00:30:02,276 --> 00:30:05,096
So, now if you go back
to our source code,


660
00:30:05,406 --> 00:30:06,896
when we try to use
code completion


661
00:30:06,896 --> 00:30:08,026
on our own method instead


662
00:30:08,026 --> 00:30:10,506
of just the header we
get full documentation


663
00:30:11,096 --> 00:30:13,246
and of course we get the same
thing with the option click


664
00:30:13,246 --> 00:30:16,416
for the pop-over, and we get
the same thing in the quick help


665
00:30:16,926 --> 00:30:17,886
on the right side of the screen.


666
00:30:18,996 --> 00:30:21,116
So, that way, you can
really make your own code


667
00:30:21,116 --> 00:30:24,806
for your own sake and the
sake of your teammates be


668
00:30:24,806 --> 00:30:26,726
as well documented
as Apple's APIs are.


669
00:30:27,826 --> 00:30:30,516
Let's talk a little bit more
about the documentation window.


670
00:30:30,516 --> 00:30:32,506
You've seen this one
before I think also


671
00:30:32,506 --> 00:30:33,726
in the Intro to Xcode 5.


672
00:30:34,216 --> 00:30:37,376
In Xcode 5, we've pulled
the documentation viewer


673
00:30:37,376 --> 00:30:40,946
out of the organizer and put
it into its own window which--


674
00:30:40,946 --> 00:30:43,616
and along with the new great
multi windows full-screen


675
00:30:43,616 --> 00:30:46,376
support can be a great
way to put your doc


676
00:30:46,376 --> 00:30:48,236
on one window, et cetera.


677
00:30:48,366 --> 00:30:53,716
The documentation viewer now
let's you look at the content


678
00:30:53,716 --> 00:30:57,326
and also the Table of
Contents on the right


679
00:30:57,326 --> 00:30:59,876
for whatever document
you're looking at.


680
00:31:00,966 --> 00:31:05,296
And also whenever you see
anything that you want


681
00:31:05,296 --> 00:31:06,876
to highlight that's
particularly relevant


682
00:31:06,876 --> 00:31:09,856
to what you were looking at
or what you need to work on,


683
00:31:10,226 --> 00:31:14,456
you just click on the Bookmark
icon and then that entry shows


684
00:31:14,456 --> 00:31:16,436
up in the bookmark
pane on the left


685
00:31:16,486 --> 00:31:18,386
where you can very
quickly access any part


686
00:31:18,386 --> 00:31:20,166
of the documentation
whether it's a method


687
00:31:20,166 --> 00:31:22,296
or conceptual documentation
or anything like that.


688
00:31:22,896 --> 00:31:26,226
And of course, you can
close both of those sidebars


689
00:31:26,306 --> 00:31:29,556
to see the full documentation
experience when you really want


690
00:31:29,556 --> 00:31:30,686
to read a particular document.


691
00:31:32,036 --> 00:31:35,506
Finally, I want to talk a
little about and this is--


692
00:31:35,506 --> 00:31:37,436
finally you have
UI part of this.


693
00:31:37,436 --> 00:31:40,696
I want to talk about how you
can customize Xcode's behaviors


694
00:31:40,796 --> 00:31:42,306
to increase your efficiency.


695
00:31:42,306 --> 00:31:46,146
So Xcode has a lot of
filters-- features built in,


696
00:31:46,666 --> 00:31:49,156
and there are also
a lot of triggers


697
00:31:49,156 --> 00:31:51,646
that you can associate
custom behavior with.


698
00:31:51,766 --> 00:31:54,296
So on the left side here,
this is in the PrefPane,


699
00:31:54,296 --> 00:31:55,876
and you may have seen
this before, you may not.


700
00:31:56,236 --> 00:32:00,396
In the PrefPane, there are
a bunch of built-in triggers


701
00:32:00,396 --> 00:32:03,086
of various kinds when your
program hits a breakpoint,


702
00:32:03,146 --> 00:32:07,006
when your program crashes, when
you check something into SCM,


703
00:32:07,066 --> 00:32:09,446
you can associate those with
the actions on the right.


704
00:32:10,576 --> 00:32:13,096
And so there are
several built-in actions.


705
00:32:13,646 --> 00:32:15,886
One of the ones I want to point
out which you might not be aware


706
00:32:15,886 --> 00:32:19,346
of is one that works in
conjunction with tabs.


707
00:32:19,346 --> 00:32:21,516
I didn't talk a lot
about the tabs,


708
00:32:21,606 --> 00:32:24,896
but we actually have talked
about them a lot in past years


709
00:32:24,896 --> 00:32:27,796
and there are videos from
previous WWDCs going into detail


710
00:32:27,796 --> 00:32:28,906
about how you can use those.


711
00:32:29,316 --> 00:32:31,416
One of the things you can
do is give a name to a tab,


712
00:32:31,896 --> 00:32:35,806
and then when a certain trigger
occurs, you can cause that tab


713
00:32:35,806 --> 00:32:39,136
with a certain name to be
opened in a separate window


714
00:32:39,136 --> 00:32:40,576
or in the same window,
et cetera.


715
00:32:40,886 --> 00:32:42,576
This is great for
combining with things like,


716
00:32:42,576 --> 00:32:45,216
oh there was console
output, let me go to the Tab


717
00:32:45,216 --> 00:32:46,236
that I've named Console.


718
00:32:46,236 --> 00:32:48,296
So, if you like working
in the tab format--


719
00:32:48,706 --> 00:32:52,056
with a tab workflow, that's
a great way to set it up.


720
00:32:52,056 --> 00:32:55,596
You could also create
your own custom actions,


721
00:32:55,646 --> 00:32:57,146
your custom triggers


722
00:32:57,276 --> 00:32:59,406
and associate a key
equivalent with those.


723
00:32:59,666 --> 00:33:02,906
So then, obviously that
triggers whenever you hit


724
00:33:02,906 --> 00:33:03,856
that key combination.


725
00:33:04,726 --> 00:33:05,986
And that's very useful not only


726
00:33:05,986 --> 00:33:08,926
for invoking the built-in
behaviors that Xcode has,


727
00:33:09,306 --> 00:33:11,986
but also for invoking
custom behaviors.


728
00:33:11,986 --> 00:33:14,496
You can choose any shell script
that you want to have run


729
00:33:15,016 --> 00:33:17,166
and associate that with
any action including the


730
00:33:17,166 --> 00:33:17,746
Command key.


731
00:33:17,746 --> 00:33:20,706
So, the script can get
past certain information


732
00:33:20,706 --> 00:33:22,696
about the context like the
file you're looking at.


733
00:33:22,696 --> 00:33:25,656
So, this can be a great way
to invoke custom scripts,


734
00:33:25,656 --> 00:33:28,296
really those power users you
want to do custom operations


735
00:33:28,296 --> 00:33:29,306
when you hit ceratin keys.


736
00:33:30,626 --> 00:33:34,276
And so, with that, that
was a quick view of the UI.


737
00:33:34,276 --> 00:33:37,326
I'd like to hand it back to Rick
who's going to talk about some


738
00:33:37,326 --> 00:33:39,216
of the underlying
concept of Xcode.


739
00:33:40,816 --> 00:33:41,486
>> Rick Ballard: Thanks, Anders.


740
00:33:43,046 --> 00:33:45,436
So, that's an introduction
to Xcode user interface.


741
00:33:45,806 --> 00:33:48,746
Let's talk about the underlying
conceptual model in Xcode


742
00:33:48,746 --> 00:33:51,036
that you want to know about
to get things done day to day.


743
00:33:51,936 --> 00:33:53,566
After this section,
you should come away


744
00:33:53,566 --> 00:33:55,016
with a few important takeaways.


745
00:33:55,476 --> 00:33:58,846
You should understand how set up
your own workspace with projects


746
00:33:58,846 --> 00:34:01,496
and targets, how to
configure your settings


747
00:34:01,496 --> 00:34:03,856
to produce the products
that you want to produce,


748
00:34:04,456 --> 00:34:07,516
how to use schemes to perform
actions on those products


749
00:34:07,516 --> 00:34:10,545
like running in the debugger,
testing your unit tests,


750
00:34:10,886 --> 00:34:12,106
profiling for performance,


751
00:34:12,335 --> 00:34:13,996
statically analyzing
your source code,


752
00:34:14,226 --> 00:34:16,045
and archiving your
product for distribution.


753
00:34:16,786 --> 00:34:18,766
And you should come away
with the better understanding


754
00:34:18,766 --> 00:34:21,726
of Xcode's underlying conceptual
model which will help you feel


755
00:34:21,726 --> 00:34:23,136
like you know what
you're doing in Xcode.


756
00:34:23,616 --> 00:34:25,806
So, the fundamental
concepts we're going to go


757
00:34:25,806 --> 00:34:28,806
over today are workspaces,
projects


758
00:34:28,806 --> 00:34:31,976
and the build configurations
they contain, targets


759
00:34:32,246 --> 00:34:34,696
and the build settings and
build phases that they contain,


760
00:34:35,406 --> 00:34:38,315
schemes, and finally
run destinations.


761
00:34:39,076 --> 00:34:40,616
Let's get started
with workspaces.


762
00:34:41,116 --> 00:34:44,596
Workspaces are collections of
files and projects with state.


763
00:34:45,966 --> 00:34:49,466
So, a workspace contains a
set of related Xcode projects


764
00:34:49,466 --> 00:34:51,306
that you want to work
with at the same time,


765
00:34:51,646 --> 00:34:54,056
along with any other related
files that you want to have


766
00:34:54,056 --> 00:34:57,486
like todos and notes
that go along with it.


767
00:34:57,486 --> 00:34:59,936
Your workspace provides
repository for state.


768
00:35:00,296 --> 00:35:02,226
So that means things like
the user interface state.


769
00:35:02,226 --> 00:35:03,916
What windows and tabs
did you have opened


770
00:35:03,916 --> 00:35:05,026
and what files are they showing?


771
00:35:05,346 --> 00:35:07,216
It means what breakpoints
do you have set


772
00:35:07,566 --> 00:35:10,576
and other related state,
all get saved per workspace.


773
00:35:11,836 --> 00:35:13,876
Your workspace also
provides a unique location


774
00:35:13,876 --> 00:35:15,036
for your build products.


775
00:35:15,426 --> 00:35:17,936
So, all the build products
produced by targets and projects


776
00:35:17,936 --> 00:35:20,726
in one workspace will go to
that workspace's unique location


777
00:35:20,906 --> 00:35:22,536
and won't get mixed up
with the build products


778
00:35:22,536 --> 00:35:23,596
from another workspace.


779
00:35:24,876 --> 00:35:27,396
Finally, your workspace
provides a symbol index


780
00:35:27,396 --> 00:35:29,306
of all the symbols
in that workspace.


781
00:35:29,596 --> 00:35:33,016
So, anything, any method, any
class, any symbols you have,


782
00:35:33,276 --> 00:35:35,556
in any projects in that
workspace, you can get to easily


783
00:35:35,556 --> 00:35:37,126
from anywhere else
in the workspace


784
00:35:37,126 --> 00:35:38,536
with our features
like open quickly.


785
00:35:40,136 --> 00:35:42,436
So, when should you actually
create your own explicit


786
00:35:42,436 --> 00:35:43,466
workspace document?


787
00:35:43,826 --> 00:35:46,486
Well, anytime you have
a set of Xcode projects


788
00:35:46,486 --> 00:35:48,786
that you use together,
it generally makes sense


789
00:35:48,786 --> 00:35:51,236
to create a workspace
document, put those projects


790
00:35:51,236 --> 00:35:53,836
in the document and
work with that workspace


791
00:35:53,836 --> 00:35:55,506
when you're working with them.


792
00:35:55,736 --> 00:35:57,116
Another important
reason to think


793
00:35:57,116 --> 00:35:59,936
about workspaces is what we
call implicit dependencies.


794
00:35:59,936 --> 00:36:03,076
So, you can make targets
explicitly depend on each other,


795
00:36:03,206 --> 00:36:04,816
but you don't actually
have to do that.


796
00:36:04,866 --> 00:36:08,096
If you have an application and
it links against the library


797
00:36:08,456 --> 00:36:11,166
and you put the project
that builds the application


798
00:36:11,386 --> 00:36:13,986
in the same workspace with the
project that builds the library,


799
00:36:14,336 --> 00:36:17,806
Xcode will notice that implicit
dependency and make that happen


800
00:36:17,806 --> 00:36:20,056
so that whenever you build
the application target,


801
00:36:20,416 --> 00:36:23,386
it will build the library
target first automatically


802
00:36:23,586 --> 00:36:26,496
so the application can link
against the built library.


803
00:36:27,156 --> 00:36:29,976
So, you can use workspaces
to put things in together


804
00:36:29,976 --> 00:36:32,266
when you want to detect
those implicit dependencies.


805
00:36:32,266 --> 00:36:35,996
The last thing to know about
workspaces is in Xcode,


806
00:36:35,996 --> 00:36:38,716
even if you haven't created an
explicit workspace document,


807
00:36:38,946 --> 00:36:40,466
you always have a workspace.


808
00:36:40,776 --> 00:36:43,526
Xcode projects, like if you
open a bare Xcode project,


809
00:36:43,526 --> 00:36:46,336
it will act as its
own implicit workspace


810
00:36:46,566 --> 00:36:48,766
and provide a unique
location for build products,


811
00:36:49,046 --> 00:36:50,836
saved state, and so forth.


812
00:36:50,836 --> 00:36:53,256
So, anything I say about
workspaces applies to working


813
00:36:53,256 --> 00:36:54,846
with bare Xcode projects
as well.


814
00:36:56,156 --> 00:36:57,506
So, let's talk about projects.


815
00:36:58,136 --> 00:37:01,056
Your Xcode projects are
collection of files, targets,


816
00:37:01,316 --> 00:37:03,326
schemes, and build
configurations.


817
00:37:04,576 --> 00:37:08,036
So, a project contains file
references to source files


818
00:37:08,036 --> 00:37:11,456
and resource files that you
want to use, a set of targets


819
00:37:11,616 --> 00:37:13,376
which process those
files in order


820
00:37:13,376 --> 00:37:16,686
to produce your build
products, a set of schemes


821
00:37:16,896 --> 00:37:18,846
which will tell those targets
to build their products


822
00:37:18,846 --> 00:37:21,976
and then perform actions on
the product of these targets,


823
00:37:22,456 --> 00:37:24,806
and a set of build
configurations which allow you


824
00:37:24,806 --> 00:37:26,296
to vary your build settings.


825
00:37:26,546 --> 00:37:29,936
So, build configurations
are build setting variants.


826
00:37:30,486 --> 00:37:32,676
All your settings
normally have a value,


827
00:37:32,926 --> 00:37:35,276
but when you have build
configurations you can vary


828
00:37:35,276 --> 00:37:37,536
their value across
those configurations.


829
00:37:37,896 --> 00:37:40,596
So, by default out of the
box, we give you debug


830
00:37:40,596 --> 00:37:42,216
and release build configurations


831
00:37:42,216 --> 00:37:43,726
and that's all most
of you will need.


832
00:37:43,726 --> 00:37:46,636
You generally just have
two modes, I'm, you know,


833
00:37:46,836 --> 00:37:50,146
working in the debugger or
I'm going to release my app.


834
00:37:50,146 --> 00:37:51,896
Most settings don't
actually need to vary it all.


835
00:37:51,896 --> 00:37:53,086
You generally just
need one value.


836
00:37:53,086 --> 00:37:55,766
But there's some that you do
like your optimization level.


837
00:37:56,096 --> 00:37:57,186
When you're debugging your code,


838
00:37:57,186 --> 00:37:58,746
you don't want your
code to be optimized.


839
00:37:58,936 --> 00:38:00,996
When you're releasing to the
App store you definitely do.


840
00:38:00,996 --> 00:38:02,966
So, that's when you use
build configurations.


841
00:38:03,876 --> 00:38:07,086
Finally, you can create your own
build configurations if you need


842
00:38:07,086 --> 00:38:08,946
to vary your build settings
for another purpose.


843
00:38:09,276 --> 00:38:11,306
But, most of you are
probably going to be just fine


844
00:38:11,306 --> 00:38:12,946
with just debug and release.


845
00:38:14,276 --> 00:38:15,806
You can get your
build configurations


846
00:38:15,806 --> 00:38:18,066
and your other project
settings in the project editor.


847
00:38:18,576 --> 00:38:19,936
You first select the project


848
00:38:19,936 --> 00:38:21,736
in the project navigator
on the left.


849
00:38:22,246 --> 00:38:24,666
And then from the project
editor pop-up, you make sure


850
00:38:24,666 --> 00:38:26,086
that the project is selected.


851
00:38:26,896 --> 00:38:28,956
This gives you the
project editor on the right


852
00:38:29,016 --> 00:38:31,476
which has some common
project settings and this is


853
00:38:31,476 --> 00:38:33,426
where you define your
build configurations.


854
00:38:33,926 --> 00:38:36,626
Let's talk about targets.


855
00:38:37,056 --> 00:38:40,396
Targets are the instructions
for building one build product.


856
00:38:41,056 --> 00:38:42,856
So, your targets can--


857
00:38:42,856 --> 00:38:45,186
will reference some or all
of the all source files


858
00:38:45,186 --> 00:38:47,816
and resource files in
that target's project.


859
00:38:48,556 --> 00:38:51,176
And the target contains
a set of build phases.


860
00:38:51,406 --> 00:38:53,686
The build phases are the
high level sequence of steps


861
00:38:53,686 --> 00:38:54,956
that the target is going to take


862
00:38:55,216 --> 00:38:56,756
when it produces
your build product.


863
00:38:57,656 --> 00:38:59,066
There's also a set
of build rules


864
00:38:59,066 --> 00:39:02,536
that determine how the compile
sources build phase will compile


865
00:39:02,536 --> 00:39:03,236
your sources.


866
00:39:03,546 --> 00:39:05,896
You notice a build rules
tab in the target editor,


867
00:39:05,896 --> 00:39:07,486
but most of you don't
need to mess with this.


868
00:39:08,146 --> 00:39:11,406
And finally, a set of build
settings will define pretty much


869
00:39:11,406 --> 00:39:13,916
every aspect of how that
build process works.


870
00:39:14,876 --> 00:39:17,386
Targets can also depend on
one or more other targets


871
00:39:17,686 --> 00:39:21,006
and a target you depend on will
be built first automatically


872
00:39:21,006 --> 00:39:23,566
whenever your target is built.


873
00:39:23,736 --> 00:39:25,666
So, let's talk about
target build phases.


874
00:39:25,966 --> 00:39:28,286
Build phases again are the
high level sequence of steps


875
00:39:28,286 --> 00:39:30,596
that your target will take
when producing a product.


876
00:39:31,726 --> 00:39:34,406
So, some of the common
reasons why you might want


877
00:39:34,406 --> 00:39:36,226
to go edit the build
phases are--


878
00:39:36,226 --> 00:39:38,886
you might want to set per
file compiler build settings.


879
00:39:39,636 --> 00:39:42,586
You might want to add
resources to your product


880
00:39:42,586 --> 00:39:43,726
or configure exactly


881
00:39:43,726 --> 00:39:46,066
where inside your product
those resources go.


882
00:39:46,536 --> 00:39:48,896
You might want to make a target
depend on another target.


883
00:39:49,686 --> 00:39:52,336
You might want run a script
while building in order


884
00:39:52,336 --> 00:39:54,576
to do just about anything
else that isn't covered


885
00:39:54,576 --> 00:39:55,616
by the built-in behavior.


886
00:39:55,746 --> 00:39:59,176
You get at your build
phases in the target editor.


887
00:39:59,646 --> 00:40:01,656
So, from the project
editor pop-up,


888
00:40:01,656 --> 00:40:04,176
make sure that your target is
selected that you want to edit,


889
00:40:04,376 --> 00:40:06,296
and you get the target
editor on the right.


890
00:40:06,766 --> 00:40:08,946
And this-- In the general
tab, we'll show some


891
00:40:08,946 --> 00:40:12,086
of the common target settings
you might want to get at.


892
00:40:12,296 --> 00:40:14,146
If you select the
build phases tab,


893
00:40:14,886 --> 00:40:16,766
we'll show you the high
level sequence of steps


894
00:40:16,766 --> 00:40:19,116
that your target is going to
take when building your product.


895
00:40:19,116 --> 00:40:21,216
So, let's go through
this briefly.


896
00:40:22,166 --> 00:40:24,796
The Target Dependencies
phase lists all the targets


897
00:40:24,796 --> 00:40:26,066
that your target depends on


898
00:40:26,066 --> 00:40:27,596
and you can add and
remove them here.


899
00:40:28,916 --> 00:40:31,906
The Compile Sources phase
shows all the source files


900
00:40:31,906 --> 00:40:33,286
that your target is
going to compile.


901
00:40:33,486 --> 00:40:35,616
If you want to set per
file compiler flags


902
00:40:35,616 --> 00:40:38,136
like maybe you want to turn off
ARC for just one of your files,


903
00:40:38,436 --> 00:40:41,046
you can do that on the
Compile Sources phase.


904
00:40:41,796 --> 00:40:45,046
The Link Binaries with Libraries
phase lets you setup what


905
00:40:45,046 --> 00:40:47,396
libraries and frameworks your
target's product is going


906
00:40:47,396 --> 00:40:48,196
to link against.


907
00:40:48,656 --> 00:40:52,076
If your target produces
a framework on OS X,


908
00:40:52,076 --> 00:40:55,536
you can control which headers
get copied into that framework


909
00:40:55,796 --> 00:40:57,626
with the Copy Headers
build phase.


910
00:40:58,156 --> 00:41:01,476
If your target produces any
sort of bundle type output


911
00:41:01,476 --> 00:41:04,416
like an application bundle,
you can copy resources


912
00:41:04,466 --> 00:41:07,106
in to your bundle with
the Copy Resources phase


913
00:41:07,286 --> 00:41:09,236
and by default this
will copy your resources


914
00:41:09,236 --> 00:41:11,366
into the resource's
subdirectory of the bundle.


915
00:41:11,866 --> 00:41:14,186
But if you want to copy files
anywhere else into your product,


916
00:41:14,456 --> 00:41:17,226
you can setup custom
copy file phases as well.


917
00:41:17,706 --> 00:41:20,166
This allows you to specify where
you want the file to be copied.


918
00:41:20,376 --> 00:41:23,996
And for example, here I've got
a helper tool and I'm copying it


919
00:41:23,996 --> 00:41:26,156
into the executables
directory of my bundle


920
00:41:26,156 --> 00:41:28,656
so that my application can
launch its helper tool whenever


921
00:41:28,656 --> 00:41:29,216
it needs.


922
00:41:30,376 --> 00:41:32,326
Finally, anything else
you want to do as part


923
00:41:32,326 --> 00:41:34,586
of the build process, you
can do with shell scripts


924
00:41:34,586 --> 00:41:35,946
with the run script build phase.


925
00:41:36,246 --> 00:41:38,506
They can be created and
dragged to reorder them.


926
00:41:38,806 --> 00:41:41,356
We'll provide the build
settings for the target


927
00:41:41,646 --> 00:41:44,006
in the environment of your
scripts so it can do things


928
00:41:44,006 --> 00:41:46,586
like find where your target's
product has been placed


929
00:41:46,586 --> 00:41:47,426
and manipulate it.


930
00:41:47,806 --> 00:41:49,716
Let's talk about
build settings now.


931
00:41:50,056 --> 00:41:51,376
Build settings are
the set of values


932
00:41:51,376 --> 00:41:53,846
that control exactly how
your product is built.


933
00:41:55,016 --> 00:41:56,766
So, some common reasons to want


934
00:41:56,766 --> 00:41:59,196
to go change your build
settings are you might want


935
00:41:59,196 --> 00:42:01,076
to rename your product,
it's time to ship


936
00:42:01,076 --> 00:42:02,596
and you're renaming
your application.


937
00:42:02,596 --> 00:42:03,616
There's a build setting
for that.


938
00:42:04,046 --> 00:42:06,526
You might want to set
what SDK you're targeting


939
00:42:06,686 --> 00:42:10,326
or change the preprocessor
defines that the compiler passes


940
00:42:10,326 --> 00:42:12,596
to outsource files
when it compiles.


941
00:42:13,136 --> 00:42:14,686
You might want to
update your warning flags


942
00:42:14,686 --> 00:42:17,356
to configure just what warnings
you get, and there are many,


943
00:42:17,356 --> 00:42:19,186
many more reasons to go
in to the build settings.


944
00:42:19,186 --> 00:42:19,886
So, let's take a look.


945
00:42:20,406 --> 00:42:23,226
If you select the build settings
tab from the target editor,


946
00:42:23,546 --> 00:42:26,096
you'll see the list of all
the build settings available.


947
00:42:26,306 --> 00:42:27,996
There's a basic tab
you can select


948
00:42:27,996 --> 00:42:29,206
to just see the most
common ones,


949
00:42:29,206 --> 00:42:31,246
but here I'm showing
you all build settings,


950
00:42:31,246 --> 00:42:32,716
and they're categorized as well.


951
00:42:33,466 --> 00:42:35,476
You notice that most of these
build settings only have a


952
00:42:35,476 --> 00:42:37,556
single value that's because
they don't need to vary.


953
00:42:37,886 --> 00:42:39,736
But, there are some
like optimization level,


954
00:42:39,886 --> 00:42:41,836
that vary across
build configurations.


955
00:42:41,836 --> 00:42:44,226
So, there's a different value
for debug versus release.


956
00:42:44,426 --> 00:42:45,726
There's actually another axis


957
00:42:45,796 --> 00:42:47,456
on which you can vary
your build settings,


958
00:42:47,686 --> 00:42:49,786
that you can make your build
settings have different values


959
00:42:50,026 --> 00:42:52,236
per architecture or per SDK.


960
00:42:52,236 --> 00:42:55,956
And to do that, you just hover
the mouse over one of these rows


961
00:42:56,146 --> 00:42:58,146
and a little plus button
will appear allowing you


962
00:42:58,146 --> 00:43:00,466
to vary your build settings
along another access.


963
00:43:00,656 --> 00:43:02,676
So, this is the build settings
that are set in the target.


964
00:43:02,876 --> 00:43:05,716
There's actually an inheritance
flow of build settings however.


965
00:43:05,886 --> 00:43:07,676
If you select the
levels tab at the top,


966
00:43:07,676 --> 00:43:08,586
it will show that to you.


967
00:43:09,236 --> 00:43:11,876
So, the project also has
a build settings tab,


968
00:43:12,096 --> 00:43:14,426
even if the project doesn't
directly produce anything,


969
00:43:14,796 --> 00:43:17,476
any build settings you set on
the project will be inherited


970
00:43:17,476 --> 00:43:19,116
by all targets in that project.


971
00:43:19,116 --> 00:43:21,476
So, it provides a good
way to set uniform values


972
00:43:21,476 --> 00:43:23,016
across multiple targets.


973
00:43:23,206 --> 00:43:25,436
In the levels mode, we'll
show you that inheritance.


974
00:43:26,136 --> 00:43:28,466
On the right, you'll
see the default value


975
00:43:28,466 --> 00:43:30,156
for every build setting
that would be used


976
00:43:30,156 --> 00:43:31,366
if you didn't customize it.


977
00:43:32,266 --> 00:43:34,756
To the left of that are
all the build settings


978
00:43:34,756 --> 00:43:36,166
that are set in the project.


979
00:43:36,166 --> 00:43:39,256
So, these will be inherited by
all targets in that project.


980
00:43:39,606 --> 00:43:42,406
Next come, the build
setting values


981
00:43:42,406 --> 00:43:44,746
that you've set specifically
in this one target,


982
00:43:44,886 --> 00:43:46,846
and those will override
the project build settings.


983
00:43:47,266 --> 00:43:49,416
You'll also notice that
there are green boxes drawn


984
00:43:49,416 --> 00:43:50,406
around some of these cells.


985
00:43:50,596 --> 00:43:53,746
We draw a green box to show you
exactly where the final value


986
00:43:53,746 --> 00:43:55,986
from each build setting
is being taken from.


987
00:43:55,986 --> 00:43:58,856
So, you can see that
at a glance.


988
00:43:58,856 --> 00:44:01,256
Finally, on the far left,
you see the result value


989
00:44:01,256 --> 00:44:02,186
for every build setting


990
00:44:02,186 --> 00:44:03,866
that will actually get
used when you build.


991
00:44:04,456 --> 00:44:06,296
All right, let's
talk about schemes.


992
00:44:06,806 --> 00:44:09,276
Schemes are the instructions
for building a set of targets


993
00:44:09,276 --> 00:44:11,966
to produce a product and
then performing an action


994
00:44:11,966 --> 00:44:12,956
on that product.


995
00:44:14,676 --> 00:44:17,936
We support scheme actions
for running on the debugger,


996
00:44:18,366 --> 00:44:21,416
profiling for performance,
testing your unit tests,


997
00:44:21,756 --> 00:44:24,956
statically analyzing your source
code, and archiving your product


998
00:44:24,956 --> 00:44:26,436
for distribution
to the App store


999
00:44:26,436 --> 00:44:30,046
or to just save a freeze-dried
copy of your product.


1000
00:44:30,736 --> 00:44:33,386
For each of those actions
the scheme allows you


1001
00:44:33,386 --> 00:44:35,626
to specify the set of
targets that you want to build


1002
00:44:35,626 --> 00:44:36,906
when you're performing
that action,


1003
00:44:37,176 --> 00:44:39,316
and the build configuration
that this target should build


1004
00:44:39,316 --> 00:44:41,046
with from-- when you're
going to perform that action.


1005
00:44:41,046 --> 00:44:44,236
To get at your schemes
you're going to go


1006
00:44:44,236 --> 00:44:45,266
to the upper left-hand corner


1007
00:44:45,266 --> 00:44:47,496
of the workspace window
to the scheme pop-up.


1008
00:44:48,176 --> 00:44:49,956
If you just close
this, you'll see a list


1009
00:44:49,956 --> 00:44:52,266
of the schemes available
to you in your workspace.


1010
00:44:52,756 --> 00:44:55,306
And you can choose to
edit scheme here to bring


1011
00:44:55,306 --> 00:44:57,796
up the scheme pop-up on the
currently selected scheme.


1012
00:44:58,406 --> 00:44:59,856
The scheme pop-up
is where you go


1013
00:44:59,856 --> 00:45:01,986
to edit all the settings
for that scheme.


1014
00:45:02,286 --> 00:45:04,676
To perform a scheme action,
you can use the run button


1015
00:45:04,676 --> 00:45:06,506
in the upper left-hand corner
of the workspace window


1016
00:45:06,736 --> 00:45:08,746
or the product menu
which offers all of them.


1017
00:45:08,986 --> 00:45:11,606
So, here you can see
there's a run, test, profile,


1018
00:45:11,606 --> 00:45:13,066
analyze, and archive command.


1019
00:45:13,756 --> 00:45:17,106
There are also subcommands for
building for specific actions


1020
00:45:17,106 --> 00:45:18,516
without actually
performing that action,


1021
00:45:19,136 --> 00:45:21,226
and for performing an action
without building if you want


1022
00:45:21,226 --> 00:45:24,216
to just use your last built copy
that you built for that action.


1023
00:45:26,096 --> 00:45:28,136
So, that's what your
schemes are.


1024
00:45:28,136 --> 00:45:29,426
Let's talk about
where they come from.


1025
00:45:30,176 --> 00:45:32,286
Out of the box, we
will automatically try


1026
00:45:32,286 --> 00:45:34,566
to create the schemes
we think you want and so


1027
00:45:34,566 --> 00:45:37,526
that means the first time you
open a project or workspace


1028
00:45:37,736 --> 00:45:40,126
or whenever you create a
new project that has targets


1029
00:45:40,266 --> 00:45:43,856
or a new target, we'll create
a scheme for every target


1030
00:45:43,856 --> 00:45:46,186
that we see so that you
have at least one scheme


1031
00:45:46,186 --> 00:45:47,946
that will build every target.


1032
00:45:48,726 --> 00:45:51,586
Now, I said every target,
that's not quite true


1033
00:45:51,586 --> 00:45:53,686
if you have unit
test bundle targets.


1034
00:45:53,976 --> 00:45:56,096
Instead of putting those
tests in their own scheme,


1035
00:45:56,296 --> 00:45:57,656
we'll try to put
them in the scheme


1036
00:45:57,656 --> 00:45:58,716
of the product they go with.


1037
00:45:58,716 --> 00:46:00,576
So, if your tests
test an application,


1038
00:46:00,576 --> 00:46:04,676
in that application scheme's
test action we'll add the test


1039
00:46:04,676 --> 00:46:05,366
bundle target.


1040
00:46:05,966 --> 00:46:07,936
Likewise, if you
create new test bundles,


1041
00:46:08,216 --> 00:46:10,766
you probably don't want separate
schemes for them, you can delete


1042
00:46:10,766 --> 00:46:13,756
that scheme if we create it and
instead add your test bundle


1043
00:46:13,886 --> 00:46:16,636
to the test action of
whatever it is it tests.


1044
00:46:17,396 --> 00:46:19,106
These schemes that we
create automatically


1045
00:46:19,106 --> 00:46:20,366
for you are per user.


1046
00:46:20,576 --> 00:46:23,306
So, every user will get their
own copy of these schemes.


1047
00:46:24,036 --> 00:46:27,036
Finally, you should feel free
to delete any of the schemes


1048
00:46:27,036 --> 00:46:28,316
that we create that
you don't want,


1049
00:46:28,316 --> 00:46:31,186
because you can manually create
them again anytime you want


1050
00:46:31,186 --> 00:46:32,926
later from the scheme
management sheet.


1051
00:46:32,926 --> 00:46:35,926
And you might also find that
you want to create new schemes


1052
00:46:36,136 --> 00:46:39,306
to support custom workflows
with run script scheme actions,


1053
00:46:39,306 --> 00:46:40,446
and I'll talk about
that in a moment.


1054
00:46:41,096 --> 00:46:42,476
Let's talk about why
you might want to go


1055
00:46:42,476 --> 00:46:44,966
to the scheme editing sheet
to actually change settings.


1056
00:46:46,006 --> 00:46:47,366
So, first of all, you might want


1057
00:46:47,366 --> 00:46:49,616
to change the build
configuration that's being used


1058
00:46:49,716 --> 00:46:52,296
to build your targets when
performing one of your actions.


1059
00:46:52,926 --> 00:46:55,656
You might want to change
which unit tests get run


1060
00:46:55,656 --> 00:46:57,046
when you perform the test action


1061
00:46:57,046 --> 00:47:00,326
and you can also perform your
tests in the test navigator one


1062
00:47:00,326 --> 00:47:03,086
by one or as a suite or
a bundle if you want now.


1063
00:47:03,426 --> 00:47:04,306
But, when you want to configure


1064
00:47:04,336 --> 00:47:06,856
which tests get run standard
every time you test your scheme,


1065
00:47:06,986 --> 00:47:08,186
you do that on the test action.


1066
00:47:09,156 --> 00:47:11,416
You can also set arguments
and environment variables


1067
00:47:11,416 --> 00:47:14,006
that get passed to your App when
it's running in the debugger


1068
00:47:14,186 --> 00:47:17,476
or being profiled or get
passed to your unit test,


1069
00:47:17,476 --> 00:47:20,226
and that's done in the
scheme editor as well.


1070
00:47:21,176 --> 00:47:22,826
We support a bunch
of diagnostics.


1071
00:47:22,826 --> 00:47:25,536
There's a bunch of checkboxes in
the run action that allows you


1072
00:47:25,536 --> 00:47:29,096
to easily turn on things like
malloc stack logging or zombies


1073
00:47:29,216 --> 00:47:31,606
without having to remember the
underlying environment variable


1074
00:47:31,606 --> 00:47:32,246
that controls it.


1075
00:47:32,246 --> 00:47:35,466
And there are many other options
that you'll see when you go


1076
00:47:35,466 --> 00:47:36,646
to the scheme editing sheet.


1077
00:47:36,646 --> 00:47:38,706
We also have a more
detailed walkthrough of them


1078
00:47:38,706 --> 00:47:41,606
in last year's presentation
on understanding schemes.


1079
00:47:41,976 --> 00:47:45,426
So, if you bring up the
scheme editing sheet,


1080
00:47:45,576 --> 00:47:47,906
you'll see that on the
left we have a row for each


1081
00:47:47,906 --> 00:47:49,396
of the scheme actions
we support.


1082
00:47:49,396 --> 00:47:53,856
And there's also a row for the
build action or for building.


1083
00:47:54,036 --> 00:47:55,826
Building is not actually
an action.


1084
00:47:56,066 --> 00:47:58,426
Building is a step that
happens before each


1085
00:47:58,426 --> 00:47:59,676
of the other scheme actions.


1086
00:47:59,936 --> 00:48:02,246
So, when you perform an action
usually you build the prod--


1087
00:48:02,246 --> 00:48:05,666
or the targets for that action
and then perform that action.


1088
00:48:06,446 --> 00:48:08,506
You'll also see there's
a row of checkboxes here,


1089
00:48:08,736 --> 00:48:11,376
these determines which targets
gets built for which action.


1090
00:48:11,376 --> 00:48:13,536
And this is notable in
particular for the test action.


1091
00:48:13,846 --> 00:48:15,376
There's no reason to
build your unit test


1092
00:48:15,376 --> 00:48:16,316
if you're not going to test.


1093
00:48:16,546 --> 00:48:19,396
So, the test bundle,
test bundle is only built


1094
00:48:19,396 --> 00:48:20,576
for the test action by default


1095
00:48:20,576 --> 00:48:22,006
and you can configure
this further.


1096
00:48:22,426 --> 00:48:23,806
Also I mentioned,
you notice some


1097
00:48:23,806 --> 00:48:25,686
of these checkboxes
are disabled that means


1098
00:48:25,686 --> 00:48:28,416
that that target is explicitly
being used by that action.


1099
00:48:28,676 --> 00:48:30,986
So, if you wanted to uncheck
this target you'd have


1100
00:48:30,986 --> 00:48:33,596
to go tell the action not
to use its product anymore.


1101
00:48:34,686 --> 00:48:36,606
You'll notice that there's no
build configuration in this


1102
00:48:36,606 --> 00:48:37,786
in the build tab and that's


1103
00:48:37,786 --> 00:48:40,186
because you set the build
configuration per scheme action.


1104
00:48:40,356 --> 00:48:42,396
So, if you select
another action like test,


1105
00:48:42,716 --> 00:48:45,756
you'll see that each action has
a build configuration pop-up.


1106
00:48:46,006 --> 00:48:47,716
So, for most scheme
actions you usually want


1107
00:48:47,716 --> 00:48:49,226
to use the debug
build configuration.


1108
00:48:49,466 --> 00:48:50,846
Say, when you're
running on a debugger


1109
00:48:51,006 --> 00:48:53,246
or performing your unit test,
but when you're archiving


1110
00:48:53,246 --> 00:48:54,616
for distribution, you want


1111
00:48:54,616 --> 00:48:57,096
to use the release build
configuration and so we set


1112
00:48:57,096 --> 00:48:58,806
that up by default
to do that for you.


1113
00:48:58,896 --> 00:49:03,016
We also support additional
scheme action


1114
00:49:03,016 --> 00:49:04,066
as I alluded to before.


1115
00:49:04,316 --> 00:49:07,196
If you disclose the disclosure
arrow to the left of any


1116
00:49:07,196 --> 00:49:09,266
of these actions or
before the build step,


1117
00:49:09,566 --> 00:49:11,746
you can set pre-imposed actions.


1118
00:49:11,876 --> 00:49:14,206
It will run before
or after that action


1119
00:49:14,386 --> 00:49:16,616
or before or after the build.


1120
00:49:17,126 --> 00:49:19,296
We support send e-mail
as one of these actions,


1121
00:49:19,296 --> 00:49:21,736
but more usefully there's
a run script action.


1122
00:49:21,736 --> 00:49:23,496
So, you can set up
custom schemes


1123
00:49:23,496 --> 00:49:26,086
to run any script you want to
support your custom workflows.


1124
00:49:26,536 --> 00:49:28,326
This is especially useful


1125
00:49:28,326 --> 00:49:30,146
with our continuous
integration features.


1126
00:49:30,446 --> 00:49:33,626
You can for example have
a post-archive script


1127
00:49:33,936 --> 00:49:37,126
which copies your built
archive to some shared servers.


1128
00:49:37,126 --> 00:49:40,166
So, everytime the bot produces
an archive, you put it somewhere


1129
00:49:40,166 --> 00:49:41,616
where everyone can
get at it easily.


1130
00:49:41,896 --> 00:49:44,846
The archive action provides
some things in the environment


1131
00:49:44,846 --> 00:49:47,296
to your script to tell it
where to find that product


1132
00:49:47,626 --> 00:49:49,846
and you can additionally
set a target


1133
00:49:50,216 --> 00:49:53,046
to provide its build settings in
the environment to your script.


1134
00:49:53,746 --> 00:49:57,356
The last thing I want to mention
here is, why you would use this


1135
00:49:57,486 --> 00:50:00,096
versus a run script
build phase in a target?


1136
00:50:00,656 --> 00:50:02,676
Well, if your script
is an integral part


1137
00:50:02,816 --> 00:50:06,356
of producing the products of the
target, that probably belongs


1138
00:50:06,356 --> 00:50:08,366
as a run script build
phase in the target.


1139
00:50:08,586 --> 00:50:10,686
So, no matter which scheme
is building that target


1140
00:50:10,846 --> 00:50:14,226
that script gets run and the
product gets produced correctly.


1141
00:50:14,306 --> 00:50:17,996
If on the other hand your script
is part of a custom workflow,


1142
00:50:17,996 --> 00:50:19,656
that probably belongs
in the scheme.


1143
00:50:19,656 --> 00:50:20,976
So that you can have
different schemes


1144
00:50:20,976 --> 00:50:23,436
with different custom
workflows or have a scheme


1145
00:50:23,436 --> 00:50:25,076
that doesn't run it
when you don't want to.


1146
00:50:25,076 --> 00:50:26,446
So, that's how to
edit your schemes.


1147
00:50:26,596 --> 00:50:27,866
Let's talk about
how to manage them.


1148
00:50:28,656 --> 00:50:30,536
In the scheme pop-up
in the upper left,


1149
00:50:30,976 --> 00:50:33,976
there's a Manage Schemes
option and if you choose this,


1150
00:50:33,976 --> 00:50:36,856
it will bring up the scheme
management sheet giving you all


1151
00:50:36,856 --> 00:50:39,226
the schemes in your workspace
and projects and a list


1152
00:50:39,226 --> 00:50:40,316
of settings you can change.


1153
00:50:40,316 --> 00:50:41,796
So, let's talk about these.


1154
00:50:42,246 --> 00:50:44,546
First of all, there's
a shared checkbox


1155
00:50:44,546 --> 00:50:45,656
for each of these schemes.


1156
00:50:45,966 --> 00:50:48,846
Now, I said before that every
scheme we give you is per user,


1157
00:50:49,016 --> 00:50:51,946
just for you, but sometimes
you might have authored the


1158
00:50:51,946 --> 00:50:52,766
perfect scheme.


1159
00:50:53,006 --> 00:50:55,296
It's got just the targets
that you want to build


1160
00:50:55,296 --> 00:50:56,496
and the right arguments


1161
00:50:56,496 --> 00:50:58,226
and environment variables
being passed when you run


1162
00:50:58,226 --> 00:50:59,866
in the debugger, and
you want to share this


1163
00:50:59,866 --> 00:51:02,126
with your coworkers 'cause
everybody wants to use this.


1164
00:51:02,426 --> 00:51:04,356
So, if you click the
shared checkbox here


1165
00:51:04,696 --> 00:51:07,236
that scheme will actually be
moved to a shared location


1166
00:51:07,236 --> 00:51:09,946
within the project or workspace
bundle, and everybody else


1167
00:51:09,946 --> 00:51:10,936
who works with that project


1168
00:51:10,936 --> 00:51:13,546
or workspace will get a
copy of that scheme too.


1169
00:51:13,876 --> 00:51:15,786
This also means that any
edits that anyone makes


1170
00:51:15,786 --> 00:51:17,886
that scheme will be
shared with everybody,


1171
00:51:17,886 --> 00:51:20,076
because it's a one
shared copy of the scheme.


1172
00:51:20,076 --> 00:51:22,326
You know, some times if you work
on a big team and have a lot


1173
00:51:22,326 --> 00:51:24,716
of shared schemes, you might
have some that you don't care


1174
00:51:24,716 --> 00:51:26,926
about and don't want cluttering
up your scheme pop-up.


1175
00:51:26,976 --> 00:51:29,636
For example the QA team might
have some special schemes


1176
00:51:29,636 --> 00:51:31,066
that they use for
custom workflows,


1177
00:51:31,286 --> 00:51:32,666
but you don't always
want to be wading


1178
00:51:32,666 --> 00:51:33,866
through those when
you're working.


1179
00:51:34,216 --> 00:51:36,136
So, we have a show
checkbox on the left


1180
00:51:36,356 --> 00:51:39,796
and if you uncheck this,
that scheme just won't show


1181
00:51:39,796 --> 00:51:41,626
up for you in the
scheme pop-up anymore,


1182
00:51:41,966 --> 00:51:43,676
but that won't affect
anybody else.


1183
00:51:43,676 --> 00:51:45,976
Anybody who's sharing that
scheme will still be able


1184
00:51:45,976 --> 00:51:49,096
to use it and this
checkbox is per user.


1185
00:51:49,096 --> 00:51:49,966
Let's talk a little bit


1186
00:51:49,966 --> 00:51:52,106
about where these schemes
actually are stored.


1187
00:51:52,636 --> 00:51:55,876
Actually before that, when
you have a shared scheme,


1188
00:51:55,876 --> 00:51:59,276
you may sometimes want to make
some temporary one-off changes


1189
00:51:59,276 --> 00:52:00,896
like you want to
enable a diagnostic


1190
00:52:01,196 --> 00:52:03,116
or add an additional
command line argument.


1191
00:52:03,456 --> 00:52:05,786
But if you do that to a
shared scheme it will show


1192
00:52:05,786 --> 00:52:07,906
up for everybody and that's
not always what you want.


1193
00:52:08,166 --> 00:52:09,756
So, in that case we
generally recommend


1194
00:52:09,756 --> 00:52:12,616
that you create a duplicate of
that scheme that shared scheme,


1195
00:52:12,726 --> 00:52:15,746
with the Duplicate command,
and make your modifications


1196
00:52:15,986 --> 00:52:18,656
in your own per-user
copy of that scheme.


1197
00:52:19,066 --> 00:52:21,396
When you're done with that
per-user copy, you can delete it


1198
00:52:21,396 --> 00:52:23,326
to go-- go back to
using the shared scheme.


1199
00:52:23,566 --> 00:52:25,946
So, now let's talk about
where exactly these schemes


1200
00:52:25,946 --> 00:52:26,446
are stored.


1201
00:52:26,876 --> 00:52:29,316
Every scheme is actually
stored in its own separate file


1202
00:52:29,316 --> 00:52:31,356
so that you can manage it
easily in source control.


1203
00:52:31,786 --> 00:52:34,186
And that scheme file is
stored inside a project


1204
00:52:34,186 --> 00:52:35,286
or workspace wrapper.


1205
00:52:36,336 --> 00:52:39,206
So, that container column
here shows you which project


1206
00:52:39,206 --> 00:52:41,826
or workspace wrapper each
scheme file is stored in.


1207
00:52:42,116 --> 00:52:43,946
And you can bring up
a menu here to change


1208
00:52:43,946 --> 00:52:45,626
where you want to
store that scheme.


1209
00:52:46,236 --> 00:52:47,426
This is important to think


1210
00:52:47,426 --> 00:52:49,276
about when you're working
with source control.


1211
00:52:49,726 --> 00:52:52,576
So, under source control,
you'll see inside a project


1212
00:52:52,576 --> 00:52:55,986
or workspace wrapper, there's
a separate shared data section


1213
00:52:55,986 --> 00:52:58,676
and user data section for
the data that's shared


1214
00:52:58,676 --> 00:53:01,776
between all users or the
data that's per user to you.


1215
00:53:02,236 --> 00:53:04,666
In the shared data section,
you'll see any schemes


1216
00:53:04,666 --> 00:53:06,966
that you've chosen to share,
and so generally you want


1217
00:53:06,966 --> 00:53:09,296
to commit this to source
control so that anybody else


1218
00:53:09,296 --> 00:53:10,786
in your team who
checks out your project


1219
00:53:10,786 --> 00:53:13,816
or workspace will actually get
a copy of that shared scheme.


1220
00:53:14,346 --> 00:53:17,656
In the per-user section, you see
all your own personal schemes,


1221
00:53:17,716 --> 00:53:20,836
as well as the scheme management
property list that records


1222
00:53:21,006 --> 00:53:22,946
which schemes you've
chosen to show and hide


1223
00:53:23,136 --> 00:53:25,816
and what order you want them to
show up in, in the scheme pop-up


1224
00:53:25,816 --> 00:53:27,336
since you can drag
to reorder them


1225
00:53:27,336 --> 00:53:28,446
in the scheme management sheet.


1226
00:53:29,176 --> 00:53:31,626
You might often want to check
in your own schemes here


1227
00:53:31,626 --> 00:53:33,746
as well just so you
can track changes


1228
00:53:33,936 --> 00:53:36,716
and have those personal schemes
available to you if you set


1229
00:53:36,716 --> 00:53:39,476
up any custom settings, whenever
you check out that project


1230
00:53:39,476 --> 00:53:40,706
or workspace somewhere else.


1231
00:53:41,076 --> 00:53:42,746
There's one more thing I
want to talk about today


1232
00:53:42,746 --> 00:53:44,086
and that's run destinations.


1233
00:53:44,416 --> 00:53:45,836
Run destinations are the devices


1234
00:53:45,836 --> 00:53:48,016
on which you can
perform scheme actions.


1235
00:53:48,246 --> 00:53:51,326
So, the run destinations we
give you are all the devices


1236
00:53:51,326 --> 00:53:54,036
that you want to
build for and run on,


1237
00:53:54,946 --> 00:53:58,326
and we let you choose among
all plugged in iOS devices


1238
00:53:58,326 --> 00:53:59,626
which are configured
for development,


1239
00:54:00,336 --> 00:54:03,396
all available simulators,
and the local Mac.


1240
00:54:04,276 --> 00:54:06,096
But of course we'll
only give you choices


1241
00:54:06,096 --> 00:54:09,396
of those run destinations which
are compatible with the targets


1242
00:54:09,396 --> 00:54:12,856
in your schemes,
Deployment Target setting,


1243
00:54:12,856 --> 00:54:14,106
and Base SDK setting.


1244
00:54:14,106 --> 00:54:18,236
You can get at the
run destinations


1245
00:54:18,236 --> 00:54:20,376
in the upper left-hand corner
of the workspace window,


1246
00:54:20,586 --> 00:54:22,196
just to right of
the scheme pop-up.


1247
00:54:22,826 --> 00:54:25,166
And if you disclose the run
destination pop-up you'll see


1248
00:54:25,166 --> 00:54:27,686
all the destinations that are
available to run on, again,


1249
00:54:27,686 --> 00:54:28,556
those that are compatible


1250
00:54:28,556 --> 00:54:31,356
with your Deployment
Target and Base SDK.


1251
00:54:32,016 --> 00:54:34,656
Here, I have a couple iOS
devices and several simulators.


1252
00:54:34,856 --> 00:54:38,096
If you, through the
download PrefPane in Xcode,


1253
00:54:38,276 --> 00:54:40,466
choose to install
older simulators


1254
00:54:40,696 --> 00:54:42,606
like you install
the iOS 6 simulator,


1255
00:54:42,856 --> 00:54:44,746
we'll give you those
choices as well as long


1256
00:54:44,746 --> 00:54:45,986
as your target is compatible.


1257
00:54:45,986 --> 00:54:47,726
So, you'd also say, you
have to have your target--


1258
00:54:47,726 --> 00:54:49,886
deployment target set to 6.0,


1259
00:54:50,406 --> 00:54:52,806
and with that simulator
installed now we give you choice


1260
00:54:52,806 --> 00:54:54,576
of which OS you want to simulate


1261
00:54:54,726 --> 00:54:56,236
when you're choosing
your run destination.


1262
00:54:56,376 --> 00:54:59,006
So that about wraps it up
for the fundamental concepts.


1263
00:54:59,246 --> 00:55:02,786
We've talked about
workspaces, projects, targets,


1264
00:55:03,036 --> 00:55:05,086
schemes, and run destinations.


1265
00:55:05,916 --> 00:55:09,046
After today's talk, I hope you
have a few useful takeaways.


1266
00:55:09,416 --> 00:55:11,146
You should feel comfortable
navigating


1267
00:55:11,146 --> 00:55:13,056
and editing efficiently
in Xcode.


1268
00:55:13,766 --> 00:55:15,916
You should know how to
integrate your own documentation


1269
00:55:16,076 --> 00:55:19,336
in Xcode's help and code
completion using the


1270
00:55:19,336 --> 00:55:20,486
doxygen format.


1271
00:55:21,266 --> 00:55:24,016
You should understand how to
customize Xcode's behavior,


1272
00:55:24,016 --> 00:55:26,756
so the UI behaves
just the way you want.


1273
00:55:27,306 --> 00:55:28,406
You should know how to create


1274
00:55:28,406 --> 00:55:30,796
and configure your own
workspaces, projects,


1275
00:55:30,796 --> 00:55:33,066
and targets and set their
settings appropriately.


1276
00:55:33,636 --> 00:55:35,836
And you should understand
how to manage


1277
00:55:35,836 --> 00:55:38,046
and share your schemes
with your teammates.


1278
00:55:38,526 --> 00:55:42,136
If you have more questions
I highly encourage you


1279
00:55:42,136 --> 00:55:44,586
to contact Dave Delong
who's our App Frameworks


1280
00:55:44,586 --> 00:55:45,946
and Developer Tools Evangelist.


1281
00:55:46,466 --> 00:55:48,486
We also have documentation
on Xcode


1282
00:55:48,486 --> 00:55:51,926
at developer.apple.com/xcode
as your jumping off point.


1283
00:55:52,576 --> 00:55:55,506
And if you haven't used it
already the Apple dev forums are


1284
00:55:55,506 --> 00:55:58,536
great place to come and
discuss and ask question


1285
00:55:58,786 --> 00:56:02,186
about the new versions of
Xcode or existing features.


1286
00:56:02,386 --> 00:56:04,326
That's at devforums.apple.com.


1287
00:56:04,876 --> 00:56:08,596
We have some more sessions about
Xcode coming up for you today.


1288
00:56:08,846 --> 00:56:13,776
I encourage you to take a
look at these and go to any


1289
00:56:13,776 --> 00:56:14,526
that strike your fancy.


1290
00:56:14,526 --> 00:56:16,186
We've got a lot of great
information for you.


1291
00:56:16,686 --> 00:56:28,140
[ Silence ]

