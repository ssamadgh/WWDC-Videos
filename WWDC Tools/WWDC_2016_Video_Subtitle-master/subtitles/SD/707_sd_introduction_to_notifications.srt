1
00:00:07,516 --> 00:00:18,500
[ Music ]


2
00:00:21,516 --> 00:00:25,766
[ Applause ]


3
00:00:26,266 --> 00:00:28,826
>> Good morning everybody
and welcome to our session,


4
00:00:29,006 --> 00:00:30,326
Introduction to Notifications.


5
00:00:30,886 --> 00:00:33,906
I'm Kritarth Jain an engineer
on the iOS Notifications Team,


6
00:00:33,906 --> 00:00:36,106
and today I'll be joined
by my colleague Julien


7
00:00:36,176 --> 00:00:37,526
for the later half
of the session.


8
00:00:38,306 --> 00:00:40,136
Now the team's been
working really hard


9
00:00:40,136 --> 00:00:43,136
over the last one year to
give you guys a great release


10
00:00:43,136 --> 00:00:46,266
for notifications for iOS
X and we're really excited


11
00:00:46,426 --> 00:00:47,306
to share it with you today.


12
00:00:47,896 --> 00:00:49,756
We're going to start


13
00:00:49,756 --> 00:00:52,506
out by doing an overview
of notifications.


14
00:00:53,456 --> 00:00:56,076
And today we're existing
a brand new framework


15
00:00:56,156 --> 00:00:57,746
for doing user notifications.


16
00:00:58,606 --> 00:01:01,306
As part of this, we're
going to cover registration,


17
00:01:01,986 --> 00:01:04,846
content creation, scheduling
these notifications,


18
00:01:05,495 --> 00:01:08,756
managing them, and action
handling on these notifications.


19
00:01:10,076 --> 00:01:11,366
And lastly, we're going


20
00:01:11,366 --> 00:01:14,866
to introduce a brand new feature
today called service extensions


21
00:01:15,356 --> 00:01:18,106
that we think you're
really going to like.


22
00:01:18,266 --> 00:01:21,706
But there's a lot more to cover
with notifications in iOS X


23
00:01:21,706 --> 00:01:24,046
and we're not going to get
to all of it in this session.


24
00:01:24,616 --> 00:01:26,686
So there's going to be an
Advance Notification Session


25
00:01:26,686 --> 00:01:29,006
following this one
right in this very room.


26
00:01:29,466 --> 00:01:31,656
So do make sure to check it out.


27
00:01:32,036 --> 00:01:34,736
So let's begin by talking
about user notifications.


28
00:01:35,726 --> 00:01:37,086
Now I'm sure all
of you are familiar


29
00:01:37,086 --> 00:01:38,756
with what a notification
looks like.


30
00:01:39,506 --> 00:01:42,496
This is how your
application sends information


31
00:01:42,496 --> 00:01:45,236
to your app users when your
app is not in the foreground.


32
00:01:46,406 --> 00:01:48,536
It's a push mechanism
of sending information,


33
00:01:48,836 --> 00:01:52,846
versus a pull mechanism where
your app user actively goes


34
00:01:52,846 --> 00:01:55,626
to the application to get the
content or the information.


35
00:01:57,526 --> 00:01:59,846
Now, you as app developers,
have different ways


36
00:01:59,846 --> 00:02:02,026
in which you can send these
notifications to the user.


37
00:02:03,326 --> 00:02:06,306
They can be visual alerts,
where the notification rolls


38
00:02:06,306 --> 00:02:07,356
down from the top as a banner.


39
00:02:08,276 --> 00:02:10,416
You can do sound and
vibration alerts associated


40
00:02:10,416 --> 00:02:13,546
with your notifications as
well as badge the app icon.


41
00:02:13,866 --> 00:02:14,856
So that the user knows


42
00:02:14,906 --> 00:02:18,836
which application has
data available for them.


43
00:02:19,006 --> 00:02:20,756
Depending upon the
user's context,


44
00:02:20,966 --> 00:02:23,206
there're different ways how
they see that notification.


45
00:02:23,826 --> 00:02:26,626
If the device is unlocked
the notification rolls


46
00:02:26,626 --> 00:02:27,826
down from the top as a banner.


47
00:02:28,996 --> 00:02:31,636
While the device is locked,
the notification comes right


48
00:02:31,636 --> 00:02:32,846
on the user's lock screen.


49
00:02:32,846 --> 00:02:36,026
And if the user ever
misses these notifications,


50
00:02:36,216 --> 00:02:38,136
they can always go to
the Notification Center


51
00:02:38,136 --> 00:02:40,316
and see all the pending
notifications waiting


52
00:02:40,316 --> 00:02:42,306
for them there.


53
00:02:42,496 --> 00:02:45,286
So what are the different
types of notifications that you


54
00:02:45,286 --> 00:02:48,396
as app developers can use for
sending these notifications?


55
00:02:49,066 --> 00:02:50,306
Mainly there are two types.


56
00:02:50,666 --> 00:02:52,986
Local notifications and
remote notifications,


57
00:02:53,286 --> 00:02:54,936
depending on their
source of origin.


58
00:02:55,506 --> 00:02:57,476
So let's look at
these individually.


59
00:02:58,196 --> 00:03:01,156
Now local notifications
are the ones that are used


60
00:03:01,156 --> 00:03:03,066
by applications that
are on the device.


61
00:03:04,286 --> 00:03:07,136
Examples of local notifications
use time based triggers,


62
00:03:07,136 --> 00:03:08,316
or location based triggers,


63
00:03:08,706 --> 00:03:10,936
where your application
schedules this notification


64
00:03:11,076 --> 00:03:13,206
with the system showing
the notification


65
00:03:13,206 --> 00:03:16,026
to the user's device, and
when the user handles this


66
00:03:16,026 --> 00:03:18,586
notification, your
application gets a callback.


67
00:03:19,986 --> 00:03:21,346
As I mentioned, examples


68
00:03:21,346 --> 00:03:23,506
of these can include
task reminder alerts,


69
00:03:23,906 --> 00:03:26,006
calendar alerts, or
location based triggers.


70
00:03:27,376 --> 00:03:30,316
Now, not all your
applications are contained


71
00:03:30,506 --> 00:03:31,516
on the user's device.


72
00:03:32,126 --> 00:03:35,016
A lot of them have a
server-side component as well,


73
00:03:35,016 --> 00:03:37,076
where your server-side
application lives


74
00:03:37,426 --> 00:03:39,126
across the network
on your servers.


75
00:03:39,906 --> 00:03:41,786
So to facilitate notifications


76
00:03:41,786 --> 00:03:43,986
for that we have
remote notifications.


77
00:03:44,606 --> 00:03:46,426
Let's take a look at how
remote notifications work.


78
00:03:47,536 --> 00:03:50,946
The main piece involved in
this exchange is the Apple Push


79
00:03:50,946 --> 00:03:53,256
Notification Service,
or APNs for short.


80
00:03:54,386 --> 00:03:55,706
It's part of remote
notifications.


81
00:03:56,496 --> 00:03:59,026
Your remote site application
sends the notification payload


82
00:03:59,186 --> 00:04:02,426
to APNs, which then does
a best-effort delivery


83
00:04:02,586 --> 00:04:05,386
of this notification to the
user's device, showing them


84
00:04:05,386 --> 00:04:07,936
that notification and then
forwarding your application


85
00:04:07,936 --> 00:04:11,226
to be handled when the
user interacts with it.


86
00:04:11,496 --> 00:04:14,606
Examples of remote notifications
can be news alerts,


87
00:04:14,656 --> 00:04:17,616
where your server-side
application gets the latest


88
00:04:17,616 --> 00:04:20,805
breaking news and then
forwards all these notifications


89
00:04:20,956 --> 00:04:23,386
to the different devices
on all the clients


90
00:04:23,576 --> 00:04:26,436
that have your application
installed on their device.


91
00:04:27,606 --> 00:04:30,176
Instant messaging alerts as well
where the database is managed


92
00:04:30,176 --> 00:04:33,186
on your servers, and when a new
message comes in you just pass


93
00:04:33,186 --> 00:04:35,236
that notification along
to the user's device.


94
00:04:36,976 --> 00:04:40,896
Now remote notifications in turn
have two different components,


95
00:04:41,216 --> 00:04:43,636
they can be either
user-facing or silent updates.


96
00:04:44,216 --> 00:04:46,136
Now user-facing notifications,


97
00:04:46,136 --> 00:04:48,576
as the name suggests are
the ones that are displayed


98
00:04:48,576 --> 00:04:49,746
to the user on the device.


99
00:04:50,376 --> 00:04:53,216
And by setting up your
notification payload the right


100
00:04:53,216 --> 00:04:56,346
way, you can add this content
to be shown to the user.


101
00:04:57,626 --> 00:04:59,466
As opposed to user-facing
notifications,


102
00:04:59,856 --> 00:05:02,126
we also offer silent
update notifications.


103
00:05:04,156 --> 00:05:06,786
Now, these silent
update notifications work


104
00:05:07,126 --> 00:05:10,236
where your notification payload
includes the content available


105
00:05:10,236 --> 00:05:13,786
flag when this notification
is received on the device,


106
00:05:14,046 --> 00:05:17,126
the system knows to wake your
application up in the background


107
00:05:17,416 --> 00:05:18,976
to perform a background
app refresh.


108
00:05:19,506 --> 00:05:22,876
So then your client-side
application can go and talk


109
00:05:23,126 --> 00:05:24,876
to your remote server
application


110
00:05:25,166 --> 00:05:27,166
and get the latest
greatest content available


111
00:05:27,166 --> 00:05:29,776
so that the next time your
application users come


112
00:05:29,776 --> 00:05:33,316
to your device they see the
latest information available


113
00:05:33,316 --> 00:05:36,126
to them giving them a
very good user experience.


114
00:05:38,366 --> 00:05:40,936
So that was in a nutshell
the different notifications,


115
00:05:41,106 --> 00:05:42,846
type of those notification
that you can use.


116
00:05:43,616 --> 00:05:46,296
Now before we proceed,
let's do a quick overview


117
00:05:46,296 --> 00:05:47,306
of the existing API


118
00:05:47,456 --> 00:05:51,136
for notifications
that we have in iOS.


119
00:05:51,316 --> 00:05:54,966
Now, you use UI application for
registering your application


120
00:05:55,356 --> 00:05:56,896
and then scheduling
notifications


121
00:05:57,246 --> 00:05:58,456
that your application
wants to send.


122
00:05:59,136 --> 00:06:01,926
This is part of the UI kit
framework that I'm sure most


123
00:06:01,926 --> 00:06:02,636
of you are familiar with.


124
00:06:03,626 --> 00:06:06,336
However, there were some
issues with the existing API.


125
00:06:06,336 --> 00:06:09,776
For example, there are
different callbacks for local


126
00:06:09,776 --> 00:06:11,516
and remote notifications
which could lead


127
00:06:11,516 --> 00:06:13,396
to the duplication of code.


128
00:06:14,636 --> 00:06:16,306
There's also limited control.


129
00:06:16,306 --> 00:06:19,196
After your application has
already sent the notification


130
00:06:19,296 --> 00:06:22,926
to the user and there's
different support


131
00:06:23,176 --> 00:06:25,526
for notifications across
the multiple platforms


132
00:06:25,526 --> 00:06:27,916
that Apple supports today.


133
00:06:28,106 --> 00:06:31,096
So we really wanted to
address these issues, and more,


134
00:06:31,096 --> 00:06:34,676
and on top of that give you
guys some great new features


135
00:06:35,006 --> 00:06:37,406
for really elevating the
notification experience


136
00:06:37,466 --> 00:06:38,256
for your app users.


137
00:06:38,256 --> 00:06:42,666
So today we're really excited to
announce a brand new framework


138
00:06:42,736 --> 00:06:44,276
for doing user notifications.


139
00:06:45,306 --> 00:06:47,646
Let's take a look at what's
this new framework includes.


140
00:06:48,626 --> 00:06:52,666
To start out, it has a very
familiar API with feature parity


141
00:06:52,786 --> 00:06:53,746
with what exists today.


142
00:06:54,346 --> 00:06:56,676
So transferring your code
from the existing API


143
00:06:56,726 --> 00:07:00,206
to the new framework
will be very easy.


144
00:07:00,366 --> 00:07:03,366
We've also expanded the
content options that you can set


145
00:07:03,366 --> 00:07:06,426
on the notifications for having
richer notifications sent


146
00:07:06,426 --> 00:07:06,996
to your user.


147
00:07:07,366 --> 00:07:10,666
We've combined the
code pack for local


148
00:07:10,666 --> 00:07:13,326
and remote notification handling
so that you have lesser code


149
00:07:13,566 --> 00:07:14,776
for handling the notifications.


150
00:07:15,516 --> 00:07:20,766
[ Applause ]


151
00:07:21,266 --> 00:07:23,216
We've also simplified
the delegate methods


152
00:07:23,586 --> 00:07:26,116
that your application gets
now when the user interacts


153
00:07:26,116 --> 00:07:28,106
with actions on these
notifications.


154
00:07:28,576 --> 00:07:32,326
We've also included better
notification management.


155
00:07:32,766 --> 00:07:35,506
What this means is that
your apps now have access


156
00:07:35,506 --> 00:07:37,736
to notifications that are
either pending delivery


157
00:07:37,736 --> 00:07:41,196
or already delivered to the
user, allowing you to remove


158
00:07:41,406 --> 00:07:42,956
as well update notifications.


159
00:07:43,396 --> 00:07:45,676
We'll take a look at all of this
in more detail in the session.


160
00:07:47,136 --> 00:07:50,386
Starting in iOS X we now
allow your applications


161
00:07:50,546 --> 00:07:52,886
to do in-app presentation
of notifications.


162
00:07:54,516 --> 00:07:56,546
[ Applause ]


163
00:07:57,046 --> 00:08:00,406
So now, your apps get the
exact same look and feel


164
00:08:00,566 --> 00:08:05,976
as the system supports
right in your applications.


165
00:08:06,046 --> 00:08:07,056
You can now also schedule


166
00:08:07,056 --> 00:08:12,246
and handle notifications
right to your extensions.


167
00:08:13,696 --> 00:08:15,676
And lastly, we've
added extension points


168
00:08:15,876 --> 00:08:18,526
to notifications themselves,
but more on that later.


169
00:08:20,136 --> 00:08:22,746
So what this new
framework also allows us is


170
00:08:22,746 --> 00:08:26,416
to have a single notifications
API across multiple platforms


171
00:08:26,416 --> 00:08:30,436
that Apple supports, including
iOS, watchOS, and tvOS.


172
00:08:31,406 --> 00:08:33,836
Let's take a look at what
this means individually


173
00:08:33,836 --> 00:08:35,056
for all these different
platforms.


174
00:08:37,275 --> 00:08:40,256
On iOS, we give the full
support for managing


175
00:08:40,256 --> 00:08:42,736
and scheduling notification
that the new framework supports.


176
00:08:44,186 --> 00:08:46,676
On watchOS, we continue
the existing support


177
00:08:46,676 --> 00:08:49,496
of forwarding notifications
from the user's device


178
00:08:49,666 --> 00:08:52,786
to their Watch, but
starting with watchOS 3,


179
00:08:52,786 --> 00:08:54,756
we now let your WatchOS
applications


180
00:08:54,756 --> 00:08:57,376
to do local notification
on the Watch itself.


181
00:08:58,146 --> 00:09:04,336
What this means is that
your Watch does not have


182
00:09:04,336 --> 00:09:05,516
to be connected to your device,


183
00:09:05,516 --> 00:09:07,986
and your applications can
still do notifications.


184
00:09:08,466 --> 00:09:12,006
For example, you have the
workout application and the user


185
00:09:12,006 --> 00:09:14,286
of your application
is out on a workout,


186
00:09:14,366 --> 00:09:15,896
but forgot their device behind.


187
00:09:16,386 --> 00:09:18,196
You can still send
them notifications


188
00:09:18,196 --> 00:09:19,636
of when they meet
their workout goals


189
00:09:19,636 --> 00:09:22,196
or when their workout time is
up right on the Watch itself.


190
00:09:22,926 --> 00:09:25,726
For more information about
how to do notifications


191
00:09:25,726 --> 00:09:28,276
on WatchOS we have a Quick
Interaction Techniques


192
00:09:28,276 --> 00:09:29,056
for WatchOS session.


193
00:09:30,876 --> 00:09:35,406
And continuing, for
tvOS, we now give support


194
00:09:35,736 --> 00:09:39,036
to badging app icons for both
local and remote notifications.


195
00:09:39,036 --> 00:09:41,276
This can be used
in different ways.


196
00:09:41,536 --> 00:09:43,716
For example, if your
application wants


197
00:09:43,716 --> 00:09:46,576
to let the user know the number
of unwatched episodes they have,


198
00:09:46,926 --> 00:09:48,976
you can just badge the
app icon with that number.


199
00:09:49,686 --> 00:09:51,136
Or for a turn by
turn based game,


200
00:09:51,516 --> 00:09:53,336
if the user has a
pending user turn,


201
00:09:53,656 --> 00:09:55,426
then badging the app
icon lets them know


202
00:09:55,716 --> 00:09:56,896
that that's waiting for them.


203
00:10:01,566 --> 00:10:03,666
So that's in a nutshell summary


204
00:10:03,666 --> 00:10:05,216
of what this new
framework allows you to do


205
00:10:05,506 --> 00:10:07,896
on all these different
platforms that Apple has.


206
00:10:08,546 --> 00:10:14,036
Let's continue and dive into
notification delivery on iOS.


207
00:10:14,616 --> 00:10:18,136
How does your application
actually send this notification


208
00:10:18,336 --> 00:10:20,166
to the user's device
for them to see it?


209
00:10:21,046 --> 00:10:24,186
Well, even before you can
do this, the very first step


210
00:10:24,466 --> 00:10:27,036
that your application needs
to do is registration.


211
00:10:27,746 --> 00:10:31,246
Let's take a look at
what registration means.


212
00:10:31,416 --> 00:10:34,466
Now notifications are an
interruption for the user.


213
00:10:34,576 --> 00:10:37,276
So it's very important you
get the user's authorization


214
00:10:37,276 --> 00:10:39,926
and permission before you
send them these notifications.


215
00:10:40,396 --> 00:10:44,176
So you can ask them permission
for banners, sound alerts


216
00:10:44,176 --> 00:10:47,166
or badging the app icon and the
very first time you do this the


217
00:10:47,166 --> 00:10:49,206
user gets prompted
with this message.


218
00:10:49,966 --> 00:10:53,016
You need to do this registration
for both local as well


219
00:10:53,016 --> 00:10:54,016
as remote notification.


220
00:10:55,546 --> 00:10:58,726
And performing this registration
in code is as simple


221
00:10:58,726 --> 00:11:00,386
as calling request authorization


222
00:11:00,716 --> 00:11:03,516
on the UN user notification
object associated


223
00:11:03,516 --> 00:11:06,166
with your application,
passing it the right parameters


224
00:11:06,296 --> 00:11:07,746
that you want registration for.


225
00:11:09,916 --> 00:11:11,756
However, do note
that the settings


226
00:11:11,756 --> 00:11:13,676
that the user might
approve right now are highly


227
00:11:13,676 --> 00:11:15,876
configurable in the settings
menu per application.


228
00:11:16,466 --> 00:11:19,936
So your application users can
always go back and turn these on


229
00:11:19,936 --> 00:11:21,496
or off depending on
their preferences.


230
00:11:22,516 --> 00:11:24,836
In iOS X we now give
you the ability


231
00:11:24,836 --> 00:11:27,446
to access these user
settings in your application


232
00:11:27,446 --> 00:11:30,176
so that you can be smarter about
the notifications that you want


233
00:11:30,176 --> 00:11:32,406
to send to the user depending
upon their preferences.


234
00:11:33,476 --> 00:11:37,646
[ Applause ]


235
00:11:38,146 --> 00:11:40,026
But registration
doesn't end here.


236
00:11:40,326 --> 00:11:42,506
For remote notifications,
there's another step


237
00:11:42,686 --> 00:11:43,696
for token registration,


238
00:11:43,966 --> 00:11:47,086
which uses the existing
API on UI application.


239
00:11:47,596 --> 00:11:49,676
So you register for
remote notifications,


240
00:11:50,496 --> 00:11:53,726
you need a network connection so
that the system can then go talk


241
00:11:53,726 --> 00:11:55,586
to APNs for this registration


242
00:11:55,586 --> 00:11:57,106
for your device and
your application.


243
00:11:58,306 --> 00:12:00,816
This token gets returned to
your client-side application,


244
00:12:01,096 --> 00:12:02,256
which then you need to forward


245
00:12:02,256 --> 00:12:03,606
to your servicer-side
application.


246
00:12:04,336 --> 00:12:07,216
Now this is important because
this token needs to be included


247
00:12:07,216 --> 00:12:09,066
as part of the notification
payload


248
00:12:09,356 --> 00:12:11,396
that your remote side
application is passing


249
00:12:11,396 --> 00:12:12,036
through your APNs.


250
00:12:12,776 --> 00:12:16,466
Because this token acts as the
key for identifying your device


251
00:12:16,656 --> 00:12:19,266
and the application to which it
wants to send the notification.


252
00:12:21,256 --> 00:12:22,616
So that was registration.


253
00:12:22,886 --> 00:12:24,406
Now your application is ready


254
00:12:24,406 --> 00:12:26,446
to start sending
notifications to the users.


255
00:12:26,876 --> 00:12:27,996
So the first thing
that you need to do


256
00:12:27,996 --> 00:12:31,276
after that is create the
content of that notification.


257
00:12:33,276 --> 00:12:36,206
Now I'm sure all of you have
seen the brand new notification


258
00:12:36,206 --> 00:12:38,216
looks that we've
introduced with iOS X.


259
00:12:38,656 --> 00:12:41,496
We're really excited about
what this allows you to do.


260
00:12:42,046 --> 00:12:45,266
To start with, we now show the
title of your notifications


261
00:12:45,356 --> 00:12:46,966
in all iOS notifications.


262
00:12:47,516 --> 00:12:51,216
[ Applause ]


263
00:12:51,716 --> 00:12:53,866
We've also included an
extra field for the subtitle


264
00:12:53,866 --> 00:12:55,586
so you can have more
dexterity in the type


265
00:12:55,586 --> 00:12:57,236
of information you're
sending to the user.


266
00:12:58,066 --> 00:13:00,126
And of course, there's
the body of the content.


267
00:13:00,916 --> 00:13:03,606
Let's take a look at how
to set this up in code.


268
00:13:05,276 --> 00:13:08,796
So it's as simple as creating
a UNmutableNotificationContent


269
00:13:08,796 --> 00:13:11,806
object and setting the different
properties on it, that's it.


270
00:13:13,036 --> 00:13:15,276
For remote notifications,
it's fairly similar.


271
00:13:15,766 --> 00:13:17,926
Your notification payload
is structured as shown here,


272
00:13:17,926 --> 00:13:19,916
and again you set the
different properties


273
00:13:19,916 --> 00:13:24,276
of your payload before
sending it to APNs.


274
00:13:25,516 --> 00:13:26,986
However, that's not
it for content,


275
00:13:27,246 --> 00:13:29,636
we decided to go one step
further, and starting


276
00:13:29,636 --> 00:13:33,086
in iOS X we now let all
applications do media


277
00:13:33,086 --> 00:13:34,946
attachments right in
the notifications.


278
00:13:35,516 --> 00:13:39,586
[ Applause ]


279
00:13:40,086 --> 00:13:41,406
So now you can have much richer


280
00:13:41,626 --> 00:13:44,336
and colorful notifications
that your users see.


281
00:13:45,176 --> 00:13:47,966
For more on media attachments,
we'll be doing a walkthrough


282
00:13:47,966 --> 00:13:50,456
on how to set these up in the
Advance Notifications Session.


283
00:13:52,356 --> 00:13:55,336
So now that your content
is ready, the next thing


284
00:13:55,336 --> 00:13:57,596
that your app needs to
determine is when it wants


285
00:13:57,596 --> 00:13:58,516
to send the notification.


286
00:13:58,966 --> 00:14:00,656
And for that there are triggers.


287
00:14:02,196 --> 00:14:05,616
In iOS X we support four
different triggers, mainly push,


288
00:14:05,956 --> 00:14:08,766
timer interval, calendar,
and location based triggers.


289
00:14:09,346 --> 00:14:13,006
Now the push trigger is
associated exclusively


290
00:14:13,076 --> 00:14:14,296
with remote notifications


291
00:14:14,596 --> 00:14:16,376
when your remote side
notification sends the


292
00:14:16,376 --> 00:14:19,776
notification to APNs it
arrives on the device associated


293
00:14:19,776 --> 00:14:22,766
with the push trigger, all the
other triggers are the ones


294
00:14:23,016 --> 00:14:24,716
that are associated with
local notifications.


295
00:14:27,236 --> 00:14:30,216
Now, time interval based
triggers lets you schedule a


296
00:14:30,216 --> 00:14:32,926
notification at a certain time
interval starting from now.


297
00:14:33,436 --> 00:14:35,486
For example, if you wanted
to send the notification


298
00:14:35,486 --> 00:14:36,416
in two minutes from now,


299
00:14:36,876 --> 00:14:39,696
or you want to send it every
hour starting from now.


300
00:14:40,546 --> 00:14:42,946
This also lets you schedule
the notification immediately


301
00:14:42,946 --> 00:14:44,416
by setting the time
interval to zero.


302
00:14:46,256 --> 00:14:48,526
Now as opposed to time interval
based triggers there are


303
00:14:48,526 --> 00:14:51,486
calendar triggers that
lets you set a notification


304
00:14:51,626 --> 00:14:53,786
at a specific date and
time in the future.


305
00:14:53,856 --> 00:14:56,016
So you have more
control of exactly


306
00:14:56,016 --> 00:14:57,206
when the notification gets sent.


307
00:14:58,296 --> 00:15:01,066
Example of this can be at a
certain time tomorrow morning


308
00:15:01,366 --> 00:15:06,136
or repeating it on a certain day
of the week at a certain time.


309
00:15:06,306 --> 00:15:08,716
And lastly in triggers, we
have location based triggers,


310
00:15:09,096 --> 00:15:12,486
which uses your devices absolute
location, or its location


311
00:15:12,486 --> 00:15:15,666
in relation to Bluetooth
beacons and determining


312
00:15:15,666 --> 00:15:16,636
if your device is entering


313
00:15:16,636 --> 00:15:19,066
or leaving the region you can
send notification to the user.


314
00:15:20,116 --> 00:15:23,206
Examples of this is when the
user is leaving their home


315
00:15:23,206 --> 00:15:25,346
and the device is
leaving that proximity,


316
00:15:25,666 --> 00:15:27,516
or say that the user
is at a grocery store


317
00:15:27,556 --> 00:15:28,746
and your application wants


318
00:15:28,746 --> 00:15:30,186
to send them a coupon
for a discount.


319
00:15:31,696 --> 00:15:34,516
So those are the different
triggers that we have as part


320
00:15:34,516 --> 00:15:35,266
of this new framework.


321
00:15:36,216 --> 00:15:38,706
Now that your content's ready
and you know when you want


322
00:15:38,706 --> 00:15:39,706
to send the notification,


323
00:15:40,086 --> 00:15:42,736
the next step left is
scheduling the notification


324
00:15:42,786 --> 00:15:43,366
with the system.


325
00:15:44,816 --> 00:15:49,196
For local notifications this is
as simple as calling addrequest


326
00:15:49,276 --> 00:15:51,296
on the UUserNotificationCenter
object.


327
00:15:52,076 --> 00:15:54,476
Which then on the trigger
the system then displays the


328
00:15:54,476 --> 00:15:55,606
notification to the user.


329
00:15:56,626 --> 00:15:58,406
And for remote notifications,


330
00:16:00,216 --> 00:16:03,196
your service-side application
passes the payload to APNs,


331
00:16:03,506 --> 00:16:05,336
which does a best effort
delivery sending the


332
00:16:05,336 --> 00:16:07,176
notification to the
user's device.


333
00:16:08,466 --> 00:16:10,366
So let's summarize this
whole delivery mechanism


334
00:16:10,426 --> 00:16:12,026
that we've talked about so far.


335
00:16:12,956 --> 00:16:15,846
Your application starts out by
registering with the system.


336
00:16:16,816 --> 00:16:20,356
Then it creates the content,
determines when it wants


337
00:16:20,356 --> 00:16:21,406
to send the notification


338
00:16:21,936 --> 00:16:23,486
and finally schedules
the notification


339
00:16:23,486 --> 00:16:24,766
with the system leading


340
00:16:24,766 --> 00:16:27,336
to the notification getting
shown to the user's device.


341
00:16:27,446 --> 00:16:28,256
It's as simple as that.


342
00:16:29,516 --> 00:16:31,236
Let's take a look at
the summary in code.


343
00:16:32,426 --> 00:16:35,996
Start out by doing registration,
by calling requestAuthorization,


344
00:16:37,076 --> 00:16:39,066
you create the content
of that notification.


345
00:16:39,116 --> 00:16:43,466
You create the trigger, in this
example a simple time interval


346
00:16:43,466 --> 00:16:46,666
based trigger, and then
you package all of this


347
00:16:46,706 --> 00:16:49,466
in a UNNotificationRequest
object,


348
00:16:49,666 --> 00:16:51,106
passing a unique identifier,


349
00:16:51,666 --> 00:16:53,216
which will be important
we will talk


350
00:16:53,216 --> 00:16:54,036
about later in this session.


351
00:16:54,856 --> 00:16:57,486
And then you schedule this
notification with the system,


352
00:16:58,236 --> 00:16:59,936
completing the notification's
delivery.


353
00:17:02,716 --> 00:17:04,596
So, so far we've talked
about what happens


354
00:17:04,596 --> 00:17:07,146
to a notification while your
app is in the background


355
00:17:07,306 --> 00:17:08,886
and the user's not
interacting with it,


356
00:17:09,026 --> 00:17:11,165
but what if your application
is in the foreground


357
00:17:11,205 --> 00:17:12,965
when it receives a notification?


358
00:17:13,695 --> 00:17:15,386
And for this we do offer support


359
00:17:15,556 --> 00:17:17,756
for notification handling while
your app is in the foreground.


360
00:17:19,146 --> 00:17:19,945
Your application needs


361
00:17:19,945 --> 00:17:22,096
to implement the
UNUserNotificationCenter


362
00:17:22,096 --> 00:17:22,586
delegate.


363
00:17:23,185 --> 00:17:25,556
And it has a method of
willPresent notification,


364
00:17:25,906 --> 00:17:28,726
which lets you get the
notification content as part


365
00:17:28,726 --> 00:17:32,016
of the UNNotification object
passed with this method.


366
00:17:32,896 --> 00:17:34,886
Now this method also
has a CompletionHandler,


367
00:17:35,006 --> 00:17:36,816
which must be called at
the end of this function.


368
00:17:38,116 --> 00:17:40,486
One thing to note is that
the CompletionHandler takes


369
00:17:40,666 --> 00:17:42,126
presentation options parameters.


370
00:17:43,446 --> 00:17:46,026
Now, what this enables you to
do is the in-app presentation


371
00:17:46,026 --> 00:17:47,036
that we talked about earlier.


372
00:17:48,026 --> 00:17:50,386
Let's see an example of how
you can configure it up.


373
00:17:51,476 --> 00:17:55,516
So, say your application still
wants to show the user the view


374
00:17:55,746 --> 00:17:57,996
as well as your sound alert
while your application is


375
00:17:57,996 --> 00:17:58,566
in foreground.


376
00:17:58,856 --> 00:18:01,196
So this is as simple as
calling the handler block


377
00:18:01,286 --> 00:18:02,606
with these different parameters.


378
00:18:03,346 --> 00:18:04,896
And if you don't want
in-app presentation,


379
00:18:04,896 --> 00:18:06,306
you just don't pass
any parameters.


380
00:18:07,176 --> 00:18:10,136
So that was notification
handling while your application


381
00:18:10,136 --> 00:18:11,376
is in foreground.


382
00:18:11,936 --> 00:18:14,816
Let's move on and talk about
notification management.


383
00:18:15,696 --> 00:18:18,016
Now notification management
is new with this framework


384
00:18:18,346 --> 00:18:22,426
and what this allows you to do
is have access to notification


385
00:18:22,506 --> 00:18:23,936
that are pending delivery


386
00:18:23,936 --> 00:18:27,166
for your locally scheduled
notifications, as well as access


387
00:18:27,166 --> 00:18:28,306
to delivered notification


388
00:18:28,626 --> 00:18:31,016
that the user might
never see while local


389
00:18:31,016 --> 00:18:32,146
or remove notifications.


390
00:18:32,816 --> 00:18:34,796
Now you can also
remove notifications


391
00:18:34,796 --> 00:18:38,096
that have already been sent
to the user, as well as update


392
00:18:38,096 --> 00:18:39,486
and promote these notifications.


393
00:18:40,036 --> 00:18:41,996
And important piece


394
00:18:41,996 --> 00:18:44,696
of notification management
is the request identifier.


395
00:18:45,566 --> 00:18:49,596
Now, in the summary you saw that
the request identifier is set


396
00:18:49,596 --> 00:18:51,156
on the notification
of the request object.


397
00:18:51,696 --> 00:18:54,846
And for remote notifications
there's a new request header the


398
00:18:54,846 --> 00:18:57,816
APNs collapse id that you
need to set on your payload.


399
00:18:58,936 --> 00:19:01,216
The system uses this
request identifier to know


400
00:19:01,216 --> 00:19:03,326
which notification
you're requesting


401
00:19:03,326 --> 00:19:04,556
to be removed or updated.


402
00:19:05,746 --> 00:19:06,356
Let's take a look


403
00:19:06,356 --> 00:19:08,156
at notification management
with an example.


404
00:19:09,326 --> 00:19:12,366
Say your application wants to
send notifications for a game,


405
00:19:12,756 --> 00:19:13,936
and it wants to send
notifications


406
00:19:13,936 --> 00:19:15,016
for the start time of the game.


407
00:19:15,886 --> 00:19:19,196
So you start out by creating
your UNNotification request


408
00:19:20,336 --> 00:19:21,706
and scheduling it
with the system,


409
00:19:22,156 --> 00:19:23,526
but say that the
game was cancelled.


410
00:19:23,906 --> 00:19:27,266
So this is as simple as calling
removePendingNotification


411
00:19:27,266 --> 00:19:30,676
Request, passing it the
exact same game identifier


412
00:19:30,676 --> 00:19:32,586
that you created for the
initial notification.


413
00:19:33,776 --> 00:19:35,656
But what if the game
time was updated?


414
00:19:36,426 --> 00:19:38,546
Then you create a new request,


415
00:19:39,256 --> 00:19:40,746
giving it the exact
same identifier


416
00:19:40,746 --> 00:19:44,666
for the initial request,
setting the new trigger time


417
00:19:45,326 --> 00:19:46,786
and just scheduling
it with the system.


418
00:19:47,386 --> 00:19:49,646
And this in turn leads to
updating that notification.


419
00:19:50,126 --> 00:19:54,136
Let's continue this example
for delivered notifications


420
00:19:54,386 --> 00:19:56,216
and talk about score updates.


421
00:19:57,496 --> 00:19:58,306
Again, you just start


422
00:19:58,306 --> 00:20:00,476
out by creating this
notification request


423
00:20:01,386 --> 00:20:02,566
and sending it to the system.


424
00:20:03,456 --> 00:20:05,326
But say that the wrong
score was updated,


425
00:20:06,466 --> 00:20:08,696
then you can simple
remove that notification


426
00:20:08,786 --> 00:20:10,656
by calling
removeDeliveredNotification


427
00:20:11,146 --> 00:20:12,716
giving it the same identifier.


428
00:20:14,636 --> 00:20:16,656
And what if the score
gets updated


429
00:20:16,656 --> 00:20:18,596
which of course is a very
common case for games.


430
00:20:19,366 --> 00:20:21,796
So all you can do in
this scenario is create a


431
00:20:21,796 --> 00:20:25,076
notification request, giving
it the same identifier,


432
00:20:25,946 --> 00:20:27,626
passing it the new
score content,


433
00:20:27,986 --> 00:20:30,276
and then simply scheduling
it with the system.


434
00:20:31,676 --> 00:20:34,246
Now, what this means, let's
take a look at it as an example,


435
00:20:34,516 --> 00:20:36,556
say that notification
was already there


436
00:20:36,646 --> 00:20:37,776
for initial score update.


437
00:20:38,456 --> 00:20:41,946
So by calling update, as I
showed in code, what this leads


438
00:20:41,946 --> 00:20:45,346
to is that that notification
gets updated right


439
00:20:45,346 --> 00:20:46,446
in the notification list,


440
00:20:46,686 --> 00:20:48,176
replacing the original
notification,


441
00:20:48,516 --> 00:20:51,206
so that you're not cluttering
the user's notification list


442
00:20:51,206 --> 00:20:51,526
at all.


443
00:20:52,516 --> 00:20:58,006
[ Applause ]


444
00:20:58,506 --> 00:21:01,536
And you can use this in multiple
ways for aggregating information


445
00:21:01,896 --> 00:21:03,196
that is right for
your applications.


446
00:21:04,246 --> 00:21:05,686
So that was notification
management,


447
00:21:05,926 --> 00:21:08,426
it really gives your
applications a lot of control


448
00:21:08,686 --> 00:21:10,936
on the notifications that
have been sent to the user.


449
00:21:12,126 --> 00:21:13,646
So so far in this
session we've talked


450
00:21:13,646 --> 00:21:16,136
about how your application
sends these notifications


451
00:21:16,136 --> 00:21:16,726
to the users.


452
00:21:17,196 --> 00:21:19,246
But what about the other
side of this exchange?


453
00:21:19,816 --> 00:21:22,386
Notifications are very
intractable in the form


454
00:21:22,386 --> 00:21:24,576
of default actions as
well as custom actions


455
00:21:24,646 --> 00:21:26,656
that your applications
can set on them.


456
00:21:27,416 --> 00:21:30,506
So, to talk about notification
actions let me invite my


457
00:21:30,506 --> 00:21:32,576
colleague Julien to
continue this session.


458
00:21:32,576 --> 00:21:32,976
Thank you.


459
00:21:33,516 --> 00:21:38,500
[ Applause ]


460
00:21:41,326 --> 00:21:42,096
>> Hi everyone.


461
00:21:42,646 --> 00:21:43,246
I'm Julien.


462
00:21:43,246 --> 00:21:45,936
I am a software engineer
in the Frameworks QA Team.


463
00:21:46,746 --> 00:21:48,966
Kritarth showed you the web flow


464
00:21:48,966 --> 00:21:50,996
with the current user
notifications framework


465
00:21:51,436 --> 00:21:53,966
from registration up to the time


466
00:21:53,966 --> 00:21:56,036
when notifications are
delivered to the device.


467
00:21:57,286 --> 00:21:59,056
So now let's talk
about the actions


468
00:21:59,456 --> 00:22:01,576
that the user can take
on the notifications.


469
00:22:02,546 --> 00:22:04,006
There are three types of actions


470
00:22:04,246 --> 00:22:06,536
that your applications
can be aware of.


471
00:22:08,756 --> 00:22:11,036
The first one is
the default action.


472
00:22:11,686 --> 00:22:14,756
It is when the user opens
your app from a notification.


473
00:22:16,176 --> 00:22:18,486
This can be done when
the device is unlocked


474
00:22:18,486 --> 00:22:21,206
and the user receives a
notification, they can tap


475
00:22:21,246 --> 00:22:23,486
on the banner, which
will open your app.


476
00:22:24,416 --> 00:22:27,716
It can also be done from the
lock screen when the user swipes


477
00:22:27,776 --> 00:22:32,436
from left to right, as well
as in the Notification Center


478
00:22:32,836 --> 00:22:35,736
when the user swipes down to
present the Notification Center,


479
00:22:36,156 --> 00:22:38,126
they can tap on any
of your notification


480
00:22:38,526 --> 00:22:39,526
to open your application.


481
00:22:42,436 --> 00:22:44,936
Now the second type of
actions are custom actions.


482
00:22:45,446 --> 00:22:47,676
And they are within the
actionable notifications.


483
00:22:48,386 --> 00:22:51,356
We introduced actionable
notifications in iOS 8


484
00:22:52,186 --> 00:22:53,796
and they provide
the user a quick way


485
00:22:53,796 --> 00:22:57,066
to execute an action
directly from the notification


486
00:22:57,656 --> 00:22:59,766
without the need of
launching your app.


487
00:23:01,416 --> 00:23:04,296
Now these custom actions,
they appear as buttons


488
00:23:04,396 --> 00:23:07,316
with customizable title below
the notification content.


489
00:23:09,126 --> 00:23:12,556
In iOS 9 we introduced
text input actions


490
00:23:12,976 --> 00:23:16,286
so that the user can for example
quickly reply to a message


491
00:23:16,936 --> 00:23:18,716
of directly from
the notification.


492
00:23:19,246 --> 00:23:25,606
And these custom actions can be
either background or foreground.


493
00:23:26,056 --> 00:23:28,976
A background action will
dismiss the notification


494
00:23:29,426 --> 00:23:31,726
and give you a short amount
of time in the background


495
00:23:31,836 --> 00:23:34,506
to process that custom action
that the user selected.


496
00:23:35,546 --> 00:23:38,756
On the other hand, a foreground
action will dismiss the


497
00:23:38,756 --> 00:23:41,976
notification and launch your
application in the foreground


498
00:23:41,976 --> 00:23:43,676
so that you can process
that custom action.


499
00:23:46,266 --> 00:23:47,996
Now these custom
actions are available


500
00:23:47,996 --> 00:23:50,056
on both iOS and watchOS.


501
00:23:52,036 --> 00:23:55,346
So first, let's take a look
at what it looks like on iOS.


502
00:23:56,796 --> 00:23:59,086
Here we have an example
of an iPhone 6S.


503
00:23:59,816 --> 00:24:02,506
On this device, the
user can use 3D touch


504
00:24:02,896 --> 00:24:04,166
to expand a notification.


505
00:24:05,496 --> 00:24:08,776
When they do so the custom
actions will appear below the


506
00:24:08,776 --> 00:24:09,836
notification content.


507
00:24:09,836 --> 00:24:11,526
And some of these actions,


508
00:24:11,526 --> 00:24:13,326
as you can see can
be text input actions


509
00:24:13,666 --> 00:24:19,276
so the user can quickly
reply to a message.


510
00:24:19,426 --> 00:24:23,316
Now on watchOS, same
thing, the custom actions,


511
00:24:23,716 --> 00:24:25,656
appear below the
notification content,


512
00:24:26,216 --> 00:24:30,176
and some of these actions can
also be text input actions.


513
00:24:30,726 --> 00:24:32,856
And on the watchOS, you
have the opportunity


514
00:24:32,856 --> 00:24:36,356
to provide some suggestions that
the user is likely to choose


515
00:24:37,106 --> 00:24:38,266
for your text input action.


516
00:24:40,076 --> 00:24:42,726
Now for more information
about notifications


517
00:24:42,726 --> 00:24:46,366
on watchOS you can attend the
Quick Interaction Techniques


518
00:24:46,366 --> 00:24:50,866
for watchOS Session later today.


519
00:24:51,046 --> 00:24:51,866
So now that we've talked


520
00:24:51,866 --> 00:24:54,406
about what the custom
actions look like.


521
00:24:54,796 --> 00:24:57,536
Let's first talk about how you
can register your custom actions


522
00:24:57,786 --> 00:24:59,366
and then present
them to the user.


523
00:24:59,956 --> 00:25:05,016
So for registration, the first
thing you will need to do is


524
00:25:05,016 --> 00:25:06,326
to create an action object.


525
00:25:06,976 --> 00:25:09,966
You give it a unique
identifier, as well as a title.


526
00:25:10,676 --> 00:25:13,036
The title will appear on
the customizable buttons


527
00:25:13,036 --> 00:25:15,826
that we previously saw.


528
00:25:15,966 --> 00:25:18,276
Action will be by
default background action,


529
00:25:18,816 --> 00:25:21,016
but you can also provide some
option such as if you want it


530
00:25:21,016 --> 00:25:24,026
to be a foreground action.


531
00:25:24,146 --> 00:25:25,756
Now, all your actions they need


532
00:25:25,756 --> 00:25:27,646
to be associated
with categories.


533
00:25:28,646 --> 00:25:30,876
The category requires
a unique identifier.


534
00:25:31,776 --> 00:25:33,976
You give it all the
actions you want.


535
00:25:34,296 --> 00:25:37,316
You can also provide now
some intent identifiers,


536
00:25:38,786 --> 00:25:40,676
for more information
about intents,


537
00:25:41,436 --> 00:25:43,506
you can attend the
Introducing SiriKit Session.


538
00:25:44,616 --> 00:25:45,876
There are also some options


539
00:25:45,876 --> 00:25:47,376
that you can provide
for the category.


540
00:25:47,956 --> 00:25:50,116
We will talk about one
of them in a few moments.


541
00:25:52,216 --> 00:25:54,096
Now, once you've
created all your actions


542
00:25:54,096 --> 00:25:57,106
and all your categories, the
only thing you need to do is


543
00:25:57,106 --> 00:25:57,886
to register them


544
00:25:58,156 --> 00:26:01,786
to the UNUserNotificationCenter
object associated


545
00:26:01,786 --> 00:26:04,846
with your application.


546
00:26:05,006 --> 00:26:07,446
Now let's talk about how you
can present these custom actions


547
00:26:07,446 --> 00:26:07,966
to your user.


548
00:26:09,096 --> 00:26:12,506
You can do so from both remote
and local notifications.


549
00:26:14,556 --> 00:26:16,766
So first for remote
notifications,


550
00:26:17,276 --> 00:26:20,646
the only thing you need to do
is to set a category identifier


551
00:26:20,646 --> 00:26:24,336
in the APS dictionary of the
remote notification payload.


552
00:26:25,226 --> 00:26:28,536
Now this identifier needs to
match one of the identifiers


553
00:26:28,696 --> 00:26:30,886
for the categories you
previously registered.


554
00:26:33,666 --> 00:26:36,356
For local notifications
you just need


555
00:26:36,356 --> 00:26:37,936
to set the category identifier


556
00:26:38,406 --> 00:26:40,816
on the mutable content
that you created.


557
00:26:41,326 --> 00:26:44,346
Same thing this identifier
needs to match the identifier


558
00:26:44,346 --> 00:26:49,306
that you [inaudible] before.


559
00:26:49,546 --> 00:26:51,146
Now let's talk about
the third type of action


560
00:26:51,146 --> 00:26:53,376
that your app can be aware
of is the dismiss action.


561
00:26:53,906 --> 00:26:58,116
Now the dismiss action
is new to iOS X and it is


562
00:26:58,116 --> 00:27:00,706
when the user dismisses
a specific notification.


563
00:27:02,206 --> 00:27:04,326
You could use this
if, for example,


564
00:27:04,326 --> 00:27:05,946
you have a calendar application


565
00:27:06,596 --> 00:27:09,316
and let's say you send a remote
notification to your user


566
00:27:09,316 --> 00:27:11,236
about an upcoming meeting.


567
00:27:11,996 --> 00:27:13,546
The user looks at
the notification


568
00:27:13,546 --> 00:27:16,726
and decides to dismiss it.


569
00:27:16,986 --> 00:27:18,746
When in this case you might want


570
00:27:18,746 --> 00:27:21,836
to stop sending other remote
notifications to other devices


571
00:27:21,836 --> 00:27:24,206
of this user since they have
seen the notification already.


572
00:27:25,966 --> 00:27:29,026
Now, how can the user actually
dismiss the notification?


573
00:27:29,916 --> 00:27:32,986
Well they can do that on
the lock screen by swiping


574
00:27:32,986 --> 00:27:36,036
from right to left, and
tapping on the Clear button.


575
00:27:38,776 --> 00:27:42,296
They can also do that from the
Notification Center by swiping


576
00:27:42,296 --> 00:27:45,016
from right to left as well,
and taping on the Clear button


577
00:27:45,016 --> 00:27:46,726
which will dismiss
the notification.


578
00:27:50,096 --> 00:27:53,096
Now since this is not the
common case you will need


579
00:27:53,096 --> 00:27:56,076
to update for it.


580
00:27:56,336 --> 00:27:57,646
So remember earlier
when we talked


581
00:27:57,646 --> 00:27:59,706
about the different categories
that you could register,


582
00:28:00,386 --> 00:28:02,576
we talked about some
options, this is one of them,


583
00:28:02,936 --> 00:28:04,516
the customDismissAction option.


584
00:28:05,116 --> 00:28:09,556
So let's look at the
code we used earlier


585
00:28:09,556 --> 00:28:10,776
to register our category.


586
00:28:11,736 --> 00:28:12,876
The only thing you
need to do here,


587
00:28:14,126 --> 00:28:15,946
is simply add the
customDismissAction


588
00:28:16,396 --> 00:28:17,816
to the options of this category


589
00:28:18,196 --> 00:28:20,436
and your app will
receive the actions


590
00:28:20,436 --> 00:28:22,806
when the result dismisses
specific notification


591
00:28:23,136 --> 00:28:23,846
with this category.


592
00:28:27,096 --> 00:28:29,506
So let's summarize the actions
that we talked about today.


593
00:28:30,926 --> 00:28:32,476
The first one is
a default action,


594
00:28:32,876 --> 00:28:34,686
when the user opens
your application


595
00:28:34,866 --> 00:28:35,866
from the notification.


596
00:28:37,636 --> 00:28:39,626
The second one where
the custom actions


597
00:28:39,626 --> 00:28:42,546
within actionable notifications
to provide a quick way


598
00:28:42,546 --> 00:28:45,186
for the user to execute
an action directly


599
00:28:45,186 --> 00:28:46,106
from the notification.


600
00:28:46,626 --> 00:28:50,156
And finally the third one
is the dismiss action,


601
00:28:50,936 --> 00:28:53,466
it is new to iOS X and
it allows you to know


602
00:28:53,506 --> 00:28:56,066
when a user dismisses a
specific notification.


603
00:28:58,516 --> 00:29:03,936
[ Applause ]


604
00:29:04,436 --> 00:29:07,446
Now let's talk about how you can
actually handle the responses


605
00:29:07,446 --> 00:29:10,266
from these actions
in your application.


606
00:29:11,546 --> 00:29:13,986
So until now we had
several methods based


607
00:29:13,986 --> 00:29:16,476
on if the user opened the
app from a notification,


608
00:29:16,906 --> 00:29:21,676
or if we had custom actions or
text input actions, or if it was


609
00:29:21,676 --> 00:29:23,456
from a remote or a
local notification.


610
00:29:24,466 --> 00:29:26,956
Well now with our new user
notifications framework,


611
00:29:26,956 --> 00:29:31,956
we have a single method
to do that and it is part


612
00:29:31,956 --> 00:29:35,216
of the UNUserNotificationCenter
delegate protocol.


613
00:29:36,936 --> 00:29:40,686
The method you will need to
implement is didReceive response


614
00:29:40,766 --> 00:29:41,706
with CompletionHandler.


615
00:29:43,886 --> 00:29:46,376
Now let's take a closer
look at the response object


616
00:29:46,376 --> 00:29:48,636
and what you can do with
it in your application.


617
00:29:50,886 --> 00:29:53,426
Your response object has
an action identifier,


618
00:29:53,926 --> 00:29:57,196
which can either be the
default, the dismiss action,


619
00:29:57,586 --> 00:29:59,756
or any of the custom
actions that you created.


620
00:30:01,416 --> 00:30:03,536
It can have a user
text property in case


621
00:30:03,536 --> 00:30:05,406
if it was a text input action.


622
00:30:05,786 --> 00:30:11,096
It can also have a notification
object with the request object


623
00:30:11,096 --> 00:30:14,056
and the identifier of
the notification as well


624
00:30:14,056 --> 00:30:15,196
as the trigger and the content.


625
00:30:16,166 --> 00:30:18,996
Based on the type of trigger
you can figure out if it was


626
00:30:18,996 --> 00:30:21,246
from a local or a
remote notification.


627
00:30:21,776 --> 00:30:24,946
So this is all with the new
user notification framework,


628
00:30:25,336 --> 00:30:27,426
you can handle your
responses of actions.


629
00:30:30,796 --> 00:30:32,626
Now, let's talk about
remote notifications.


630
00:30:33,126 --> 00:30:37,596
This is your current
workflow, the workflow


631
00:30:37,596 --> 00:30:40,146
with remote notification that
we saw earlier in this session.


632
00:30:41,216 --> 00:30:42,676
You have your service
identification,


633
00:30:43,176 --> 00:30:45,366
which sends a remote
notification to payload


634
00:30:45,366 --> 00:30:47,036
to Apple push notification
service.


635
00:30:47,806 --> 00:30:52,266
And then it is delivered to the
device and shown to the user.


636
00:30:52,436 --> 00:30:54,856
Now, maybe some of
you are in a situation


637
00:30:54,856 --> 00:30:58,566
where you have your server side
application and you communicate


638
00:30:58,856 --> 00:31:01,706
to your iOS application
maybe using some


639
00:31:01,706 --> 00:31:02,746
end-to-end encryption.


640
00:31:04,426 --> 00:31:07,626
Well, wouldn't that be great
if you could use that same end


641
00:31:07,626 --> 00:31:10,836
to end encryption for your
remote notification as well?


642
00:31:13,186 --> 00:31:16,046
Well for that in iOS X
we are introducing the


643
00:31:16,046 --> 00:31:16,966
service extension.


644
00:31:18,316 --> 00:31:19,246
So now we are going to talk


645
00:31:19,246 --> 00:31:21,276
about what the service
extension is


646
00:31:22,006 --> 00:31:23,646
and then how you can
actually implement it


647
00:31:23,646 --> 00:31:24,456
in your application.


648
00:31:28,316 --> 00:31:32,156
Now the service extension is
a non iOS extension available


649
00:31:32,156 --> 00:31:35,296
on iOS X, which means it
runs in the background.


650
00:31:36,476 --> 00:31:41,316
And its main purpose is to
augment or replace the content


651
00:31:41,466 --> 00:31:44,096
of visible or remote
notifications before they are


652
00:31:44,096 --> 00:31:45,016
displayed to the user.


653
00:31:46,926 --> 00:31:49,296
So let's take a look again
at your current workflow


654
00:31:49,296 --> 00:31:50,346
for remote notifications.


655
00:31:50,346 --> 00:31:55,056
So you have your server-side
application, you send a payload


656
00:31:55,056 --> 00:31:56,906
to Apple push notification
service


657
00:31:56,906 --> 00:31:58,486
and then it is sent
to the device.


658
00:32:00,186 --> 00:32:02,016
Well, now with the extension,


659
00:32:02,676 --> 00:32:04,186
you're able to modify
the content


660
00:32:04,666 --> 00:32:05,816
between the time you sent it


661
00:32:05,816 --> 00:32:07,896
from your server-side
application


662
00:32:07,976 --> 00:32:10,446
and the time it is displayed
to the user on their device.


663
00:32:11,326 --> 00:32:14,486
As you can see in this
example, I did a title,


664
00:32:14,486 --> 00:32:15,786
as well as a subtitle,


665
00:32:16,276 --> 00:32:18,426
and I modified the body
of the notification.


666
00:32:21,076 --> 00:32:23,766
Now a few more details about
that service extension.


667
00:32:24,086 --> 00:32:26,816
You will get a short execution
time, which means this is not


668
00:32:26,816 --> 00:32:28,746
for long background
running tasks.


669
00:32:30,466 --> 00:32:34,936
And in case you fail to
provide some updated content


670
00:32:34,936 --> 00:32:37,446
in a timely manner, you
will get a fallback method.


671
00:32:38,546 --> 00:32:40,756
In case you still fail to
provide some updated content,


672
00:32:41,226 --> 00:32:43,806
we will show the original
remote notification


673
00:32:44,016 --> 00:32:45,456
that you sent to the user.


674
00:32:47,336 --> 00:32:50,526
Now some potential uses of
that you could use end-to-end


675
00:32:50,526 --> 00:32:54,636
encryption for your remote
notifications and you could


676
00:32:54,636 --> 00:32:57,836
as well add some attachments
to your remote notifications


677
00:32:57,836 --> 00:32:59,166
to make them even richer.


678
00:33:00,596 --> 00:33:02,786
Now there will be a
detailed example on how to do


679
00:33:02,786 --> 00:33:05,066
that in the Advance
Notification Session.


680
00:33:07,636 --> 00:33:10,526
Now let's talk about how you
can actually implement this new


681
00:33:10,526 --> 00:33:12,446
service extension
in your application.


682
00:33:14,536 --> 00:33:17,666
The first thing you would need
to do in your Xcode project


683
00:33:18,156 --> 00:33:19,066
to add the new target.


684
00:33:19,966 --> 00:33:22,446
You can use the template,
which is located


685
00:33:22,446 --> 00:33:24,866
under the application
extension section.


686
00:33:25,856 --> 00:33:27,866
And it is known as the
notification service.


687
00:33:28,726 --> 00:33:31,536
Now this template
has one main class.


688
00:33:32,656 --> 00:33:37,846
So we are going to take a look
at a simplified version of it.


689
00:33:38,106 --> 00:33:41,076
So this class, is a subclass


690
00:33:41,076 --> 00:33:43,276
of the UNNotification
service extension


691
00:33:44,556 --> 00:33:45,706
and it has two main methods.


692
00:33:48,246 --> 00:33:52,056
The first method is
didReceive with ContentHandler.


693
00:33:53,676 --> 00:33:56,296
Now this method will give
you the current request


694
00:33:56,296 --> 00:33:58,366
which has the identifier
for the notification


695
00:33:58,646 --> 00:33:59,626
as well as the content.


696
00:34:00,936 --> 00:34:02,506
Then we have the ContentHandler.


697
00:34:03,016 --> 00:34:05,876
You will need to call this
ContentHandler when you want


698
00:34:05,876 --> 00:34:08,386
to present the notification
to your user, and you need


699
00:34:08,386 --> 00:34:12,505
to provide some content for it.


700
00:34:12,775 --> 00:34:15,775
Now, the second method is
service extension time will


701
00:34:15,775 --> 00:34:17,795
expire, and this will be called


702
00:34:17,795 --> 00:34:20,585
if you cannot provide updated
content in a timely manner.


703
00:34:21,976 --> 00:34:25,366
So now remember if you fail
to call the ContentHandler


704
00:34:25,366 --> 00:34:28,996
in this method, we will show
the original remote notification


705
00:34:28,996 --> 00:34:30,156
content that you sent.


706
00:34:33,525 --> 00:34:36,565
So now let's talk about how you
can actually trigger this code


707
00:34:36,565 --> 00:34:38,085
from a remote notification.


708
00:34:41,676 --> 00:34:43,706
Here, we have a very
simple example


709
00:34:43,706 --> 00:34:46,056
of remote notification
payload with an alert.


710
00:34:47,126 --> 00:34:50,696
And as you can see we have a new
key, the mutable content key.


711
00:34:51,716 --> 00:34:54,255
Now, you will need to use this
key to let the system know


712
00:34:54,496 --> 00:34:56,356
that you want the service
extension to be launched


713
00:34:56,856 --> 00:34:58,856
to update the remote
notification content.


714
00:35:00,476 --> 00:35:02,766
You do not need to use
this key every time,


715
00:35:03,016 --> 00:35:04,656
only use it when
you actually want


716
00:35:04,656 --> 00:35:06,546
to replace the content
of the notification.


717
00:35:10,046 --> 00:35:12,756
Now you can see that I also
added some encrypted content


718
00:35:12,756 --> 00:35:13,366
of my own.


719
00:35:14,036 --> 00:35:16,246
So let's take a look at some
code, which will be able


720
00:35:16,246 --> 00:35:18,696
to process this remote
notification payload.


721
00:35:22,276 --> 00:35:25,916
So you can see here we have
our didReceive( request method,


722
00:35:25,916 --> 00:35:30,336
and the first thing I do here is
I decrypt the encrypted content


723
00:35:30,416 --> 00:35:31,956
of the remote notification
payload.


724
00:35:35,356 --> 00:35:38,046
I then create a
MutableNotificationContent


725
00:35:38,226 --> 00:35:43,056
object and I assign the
body of this notification


726
00:35:43,626 --> 00:35:46,176
with the decrypted content
that we previously set.


727
00:35:51,436 --> 00:35:54,636
And finally we call
the ContentHandler


728
00:35:55,106 --> 00:35:57,336
to present the notification
content to the user.


729
00:35:57,966 --> 00:36:01,076
Now, this is how simple it is


730
00:36:01,076 --> 00:36:04,726
to implement the new service
extension in your application.


731
00:36:06,516 --> 00:36:13,876
[ Applause ]


732
00:36:14,376 --> 00:36:18,936
Now let's recap what
we've talked about today.


733
00:36:19,116 --> 00:36:21,906
We saw an overview of
notification with local


734
00:36:21,906 --> 00:36:23,136
and remote notifications.


735
00:36:25,176 --> 00:36:28,206
We showed you the new user
notification framework,


736
00:36:28,976 --> 00:36:32,396
where is available on
iOS, watchOS, and tvOS.


737
00:36:35,786 --> 00:36:38,946
We talked about how you can
register for notifications,


738
00:36:40,066 --> 00:36:42,076
as well as how you can
create your content.


739
00:36:42,566 --> 00:36:45,886
How you can schedule
your notifications,


740
00:36:45,886 --> 00:36:47,806
either local or remote.


741
00:36:48,776 --> 00:36:51,636
We also talked about the new
management that you can do


742
00:36:51,636 --> 00:36:56,936
on the pending and
delivered notifications.


743
00:36:57,026 --> 00:36:58,726
And then we talked about
the different actions


744
00:36:58,766 --> 00:37:00,716
that the user can take
on your notifications


745
00:37:01,306 --> 00:37:03,786
and how you can handle the
responses of these actions


746
00:37:04,166 --> 00:37:05,066
within your application.


747
00:37:07,396 --> 00:37:10,306
Finally, we presented the
brand new service extension


748
00:37:10,816 --> 00:37:13,586
which allows you to augment
or replace the content


749
00:37:13,586 --> 00:37:17,586
of visual remote notifications
before they are displayed


750
00:37:17,586 --> 00:37:18,156
to the user.


751
00:37:21,316 --> 00:37:24,506
For more information,
you can visit this link


752
00:37:24,636 --> 00:37:29,736
on developer.apple.com.


753
00:37:29,896 --> 00:37:31,276
We will have some
related sessions.


754
00:37:31,676 --> 00:37:35,336
There is an Advance Notification
Session right after this one,


755
00:37:35,366 --> 00:37:37,616
we strongly encourage you
to attend this session


756
00:37:38,036 --> 00:37:39,596
if you are interested
in notifications.


757
00:37:40,836 --> 00:37:43,726
There is also if you want more
information on notifications


758
00:37:43,726 --> 00:37:46,656
on the Watch you can attend the
Quick Interaction Techniques


759
00:37:46,656 --> 00:37:47,616
for watchOS Session.


760
00:37:49,026 --> 00:37:49,596
Thank you everyone.


761
00:37:50,508 --> 00:37:52,508
[ Applause ]

