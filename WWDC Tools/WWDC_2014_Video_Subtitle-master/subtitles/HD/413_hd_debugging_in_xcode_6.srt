1
00:00:12,271 --> 00:00:14,271
[ Applause ]


2
00:00:14,526 --> 00:00:14,936
>> Good morning.


3
00:00:15,926 --> 00:00:17,996
Welcome to "Debugging
in Xcode 6."


4
00:00:18,736 --> 00:00:21,046
So if you had seen our
debugging session last year,


5
00:00:21,726 --> 00:00:22,796
you would have noticed our quest


6
00:00:22,796 --> 00:00:25,906
to bring more relative debugging
information to your fingertips.


7
00:00:26,366 --> 00:00:28,286
This year, we're going to
continue with this mission.


8
00:00:29,376 --> 00:00:31,686
Oh, before I forget, my
colleague reminded me


9
00:00:31,686 --> 00:00:35,276
to introduce myself, but my name
has not changed from last year,


10
00:00:35,376 --> 00:00:38,316
so I'm still Han Ming Ong, and
I'm still Debugger UI Engineer.


11
00:00:39,676 --> 00:00:43,826
So, let's briefly look
at what we're going


12
00:00:43,826 --> 00:00:45,066
to talk about this year.


13
00:00:45,866 --> 00:00:49,116
I'm going to talk about
a new feature in Xcode 6


14
00:00:49,116 --> 00:00:52,436
that will help you
with debugging your use


15
00:00:52,436 --> 00:00:54,776
of Grand Central
Dispatch, which is GCD.


16
00:00:54,816 --> 00:00:58,146
This feature is called
Queue Debugging.


17
00:00:59,106 --> 00:01:02,596
Next up, Troy is going to come
up and show you amazing new way


18
00:01:02,596 --> 00:01:05,586
to explore and debug
your user interface.


19
00:01:06,436 --> 00:01:08,116
And then Kerry is going
to talk in detail,


20
00:01:08,496 --> 00:01:11,546
how to integrate your -
the Quick Look Preview


21
00:01:11,546 --> 00:01:12,546
into your custom class.


22
00:01:16,546 --> 00:01:18,606
I want to set the stage
for Queue Debugging


23
00:01:19,136 --> 00:01:20,596
so that we're all
on the same page.


24
00:01:21,196 --> 00:01:24,006
My apologies if this is a bit
of - a little bit too basic


25
00:01:24,006 --> 00:01:26,476
for some of you,
but it's important


26
00:01:26,476 --> 00:01:27,876
that we get the fundamentals
right.


27
00:01:29,136 --> 00:01:34,836
So, when your application hits a
break point, the program pauses.


28
00:01:35,486 --> 00:01:38,386
The debugger will go through
a process known as unwinding.


29
00:01:39,016 --> 00:01:41,476
What it does is, it
looks at the method


30
00:01:41,476 --> 00:01:42,726
that contains your break point,


31
00:01:43,106 --> 00:01:46,036
and follows the thread
pointer back to the call site.


32
00:01:46,726 --> 00:01:48,336
In this case, awakeFromNib.


33
00:01:48,896 --> 00:01:52,966
It goes on until it reaches
the beginning of the thread.


34
00:01:53,216 --> 00:01:54,876
Then it comes back with a series


35
00:01:54,876 --> 00:01:56,986
of stack frames known
as a backtrace.


36
00:01:57,646 --> 00:02:01,906
So a stack frame is an instance
of location of your method.


37
00:02:02,926 --> 00:02:04,066
Now backtraces are important


38
00:02:04,066 --> 00:02:06,406
because it helps you
understand the control flow


39
00:02:06,846 --> 00:02:08,076
and the state of
your application.


40
00:02:08,726 --> 00:02:14,606
So what happens - how does
GCD impact backtraces?


41
00:02:15,546 --> 00:02:16,976
But first, what is GCD?


42
00:02:17,786 --> 00:02:21,336
It is a technology
that is introduced five


43
00:02:21,336 --> 00:02:23,736
or six years ago, in the
Snow Leopard time frame.


44
00:02:23,736 --> 00:02:27,006
Since then, it has
taken off like wildfire


45
00:02:27,106 --> 00:02:31,576
because it is a very natural
way to create concurrent,


46
00:02:31,576 --> 00:02:32,796
responsive application.


47
00:02:34,276 --> 00:02:36,866
Basically you divide your task


48
00:02:36,866 --> 00:02:40,136
up into smaller work
items called blocks.


49
00:02:40,696 --> 00:02:45,686
And then you enqueue the block
to a queue using two ways:


50
00:02:47,226 --> 00:02:49,296
synchronously or asynchronously.


51
00:02:50,316 --> 00:02:51,576
We're going to focus
on the latter


52
00:02:51,576 --> 00:02:53,986
because it poses
a bigger challenge


53
00:02:54,436 --> 00:02:55,276
when it comes to debugging.


54
00:02:56,616 --> 00:03:00,046
You enqueue asynchronously
using the dispatch-async API.


55
00:03:01,056 --> 00:03:06,806
And then what you're telling
the system, the OS, is,


56
00:03:06,856 --> 00:03:11,136
at some time later, it
can dequeue your block


57
00:03:11,446 --> 00:03:14,086
and find a worker thread
to start executing it.


58
00:03:15,696 --> 00:03:19,106
Imagine that you've hit a break
point in your block right now.


59
00:03:20,776 --> 00:03:23,456
So let's look at a
backtrace of Thread 16.


60
00:03:24,816 --> 00:03:27,206
After the debugger has
finished its unwinding,


61
00:03:27,966 --> 00:03:32,116
the bottommost frame, Frame
9, represents the start


62
00:03:32,116 --> 00:03:34,486
of the worker thread,
which corresponds


63
00:03:34,486 --> 00:03:36,236
to the dequeuing event.


64
00:03:37,166 --> 00:03:38,166
So what do you have to do


65
00:03:38,166 --> 00:03:41,166
to understand the control flow
before the enqueuing event?


66
00:03:42,306 --> 00:03:45,636
Well, what I used to do
is to find the method


67
00:03:45,636 --> 00:03:47,596
that contains the
enqueuing event,


68
00:03:47,676 --> 00:03:49,246
in this case cachedGraphImage,


69
00:03:49,796 --> 00:03:51,356
paste it in the Search
Navigator,


70
00:03:52,056 --> 00:03:55,376
search for all the call sites
of it, put break points there,


71
00:03:56,156 --> 00:03:57,646
relaunch the application,


72
00:03:58,106 --> 00:04:00,006
go through all the
crazy UI gestures


73
00:04:00,416 --> 00:04:03,376
to make sure I can repeat the
similar - the same problem


74
00:04:03,376 --> 00:04:05,336
to hit the break point.


75
00:04:07,186 --> 00:04:10,946
And heaven forbids if
those call sites are also


76
00:04:10,946 --> 00:04:13,676
in another dispatch async
because that means I have


77
00:04:13,676 --> 00:04:16,185
to wash, rinse, and repeat.


78
00:04:16,896 --> 00:04:20,196
But, Xcode is not lying to you


79
00:04:20,196 --> 00:04:23,136
when it's giving you
this limited backtrace.


80
00:04:24,086 --> 00:04:25,186
That's because the thread


81
00:04:25,366 --> 00:04:29,806
that does enqueuing did it
asynchronously in the past.


82
00:04:31,316 --> 00:04:34,446
In fact, that thread is possibly
doing something completely


83
00:04:34,446 --> 00:04:36,926
different or may be
gone from memory.


84
00:04:37,756 --> 00:04:41,816
So it's not fair to accuse
a debugger of not being able


85
00:04:41,816 --> 00:04:45,866
to unwind to the past, but in
your head, you must be thinking,


86
00:04:45,866 --> 00:04:46,886
"Well, this is accurate


87
00:04:46,886 --> 00:04:50,306
but surely Xcode can present
a more logical backtrace."


88
00:04:50,826 --> 00:04:54,236
And we agree with you.


89
00:04:54,456 --> 00:05:00,026
So in the scenario that I
described above, over here,


90
00:05:01,226 --> 00:05:03,626
we're going to splice - and
Xcode 6 is going to splice


91
00:05:03,626 --> 00:05:06,306
in the backtrace of
the enqueuing event


92
00:05:07,546 --> 00:05:08,836
so that it can show them to you


93
00:05:08,836 --> 00:05:11,656
in a more logical
manner in the UI.


94
00:05:12,846 --> 00:05:16,466
And if you have one in - more
than one enqueuing event,


95
00:05:16,736 --> 00:05:18,316
Xcode is going to
follow the chain


96
00:05:18,936 --> 00:05:19,946
so that it shows you everything.


97
00:05:24,196 --> 00:05:26,006
So how did we do that?


98
00:05:26,046 --> 00:05:27,586
Well we worked through
several layers


99
00:05:27,586 --> 00:05:30,466
of the OS, down to the core OS.


100
00:05:31,036 --> 00:05:34,736
We shortcut all the backtraces
of the enqueuing event,


101
00:05:35,336 --> 00:05:37,156
so when your application
hits a break point,


102
00:05:37,426 --> 00:05:40,656
Xcode will ask the debugger
to retrieve the backtrace


103
00:05:41,516 --> 00:05:44,786
so that we can show
them to you in the UI.


104
00:05:44,946 --> 00:05:47,246
The live stack frames,
they have colored icons.


105
00:05:49,196 --> 00:05:51,626
The recorded stack frames,
they have gray icons.


106
00:05:52,246 --> 00:05:57,536
But, just like the live stack
frame, you can select it,


107
00:05:57,536 --> 00:05:59,826
and if Xcode has
its debug symbols,


108
00:05:59,826 --> 00:06:04,016
it will show you the source
code, like in this case.


109
00:06:04,576 --> 00:06:07,806
If it doesn't have debug symbol,
it will show this assembly


110
00:06:08,306 --> 00:06:10,366
that some among us
can actually decipher.


111
00:06:15,046 --> 00:06:16,616
So why are the icons gray?


112
00:06:17,636 --> 00:06:19,836
Well a recorded stack
frame's icon is gray


113
00:06:19,836 --> 00:06:22,176
because it is a visual cue


114
00:06:22,666 --> 00:06:25,276
to let you know that
it's historical.


115
00:06:26,486 --> 00:06:28,586
And because it doesn't
exist in memory anymore,


116
00:06:29,106 --> 00:06:31,966
you cannot interact
with it in the console.


117
00:06:31,966 --> 00:06:33,496
You cannot run expressions
like [inaudible].


118
00:06:33,496 --> 00:06:37,806
And Xcode will not show
you its frame variables


119
00:06:37,806 --> 00:06:40,826
because recording the frame
variables would cause the


120
00:06:40,826 --> 00:06:45,156
application to bloat up in
memory, possibly causing it


121
00:06:45,156 --> 00:06:48,286
to be jettisoned on a device.


122
00:06:48,696 --> 00:06:51,346
So that wraps up the first
part of Queue Debugging.


123
00:06:52,256 --> 00:06:54,366
Moving on to the second part.


124
00:06:55,276 --> 00:07:00,106
Xcode by default shows you the
backtraces in the threads view


125
00:07:00,186 --> 00:07:01,196
in the debug navigator.


126
00:07:01,886 --> 00:07:03,246
As you can see here, Threads 5 -


127
00:07:03,896 --> 00:07:06,306
Thread 5 is showing
you its backtrace.


128
00:07:07,116 --> 00:07:09,796
So that just means that
a backtrace is organized


129
00:07:09,856 --> 00:07:10,976
by its parent threads.


130
00:07:12,576 --> 00:07:14,666
There's another equally
interesting view known


131
00:07:14,666 --> 00:07:16,916
as Queue's View in
the debug navigator.


132
00:07:16,966 --> 00:07:19,646
And if you pay attention
to your top right corner,


133
00:07:19,646 --> 00:07:20,846
there's a little control known


134
00:07:20,846 --> 00:07:25,296
as the Process View
Option Selector.


135
00:07:26,026 --> 00:07:27,686
It is a mouthful,
but it is useful.


136
00:07:29,056 --> 00:07:34,446
So if you toggle it to the
Queue's View, Xcode switches you


137
00:07:34,526 --> 00:07:37,086
over to emphasize
the relationship


138
00:07:37,086 --> 00:07:39,146
between blocks and queues.


139
00:07:41,166 --> 00:07:43,416
So in this slide here, you see


140
00:07:43,416 --> 00:07:45,586
that the top queue has
one Executing Block.


141
00:07:46,306 --> 00:07:50,706
So what about the blocks
that here you have enqueued


142
00:07:50,806 --> 00:07:51,906
but not executing yet?


143
00:07:53,166 --> 00:07:54,156
Let's look at this scenario.


144
00:07:55,416 --> 00:07:58,236
So I'm using a Serial
Queue as an illustration,


145
00:07:58,236 --> 00:08:00,696
but this happens with
concurrent queues as well.


146
00:08:01,916 --> 00:08:05,606
The green square is your
currently Executing Block.


147
00:08:06,896 --> 00:08:09,356
As long as it has not
finished executing,


148
00:08:10,886 --> 00:08:14,366
blocks that you submit
subsequently to the queue,


149
00:08:14,366 --> 00:08:15,786
will get stacked up behind it.


150
00:08:16,426 --> 00:08:18,646
We call those gray
squares the Pending Blocks.


151
00:08:19,266 --> 00:08:22,126
So in Xcode 6, we're going


152
00:08:22,126 --> 00:08:26,766
to show you the Pending
Blocks, as well, of a queue.


153
00:08:27,516 --> 00:08:30,926
[ Applause ]


154
00:08:31,426 --> 00:08:33,645
So in this case, we have
nine Pending Blocks.


155
00:08:35,196 --> 00:08:38,556
The Pending Blocks are like
the Executing Block in that


156
00:08:38,556 --> 00:08:42,326
if you twist it down,
it will show you the -


157
00:08:42,775 --> 00:08:45,766
a backtrace which by definition,
is a recorded backtrace


158
00:08:45,766 --> 00:08:46,776
of the enqueuing event.


159
00:08:48,146 --> 00:08:50,336
So we hope that by
surfacing this information,


160
00:08:50,336 --> 00:08:52,096
you can answer questions like,


161
00:08:53,036 --> 00:08:55,926
"How many Pending Blocks have
I submitted to the queue?


162
00:08:56,256 --> 00:08:58,036
Am I'm oversaturating
the queue?"


163
00:08:59,256 --> 00:09:01,836
And if you have literally
tens and thousands of blocks -


164
00:09:01,836 --> 00:09:06,616
Pending Blocks - are there
some that are not needed,


165
00:09:07,766 --> 00:09:10,876
because you may be able
to change your algorithm


166
00:09:10,876 --> 00:09:13,756
or your granularity so
that you do less work?


167
00:09:14,656 --> 00:09:16,006
Now doing less work is important


168
00:09:16,006 --> 00:09:18,116
because that would mean
saving battery life


169
00:09:18,116 --> 00:09:19,396
on your customers' devices.


170
00:09:19,396 --> 00:09:25,156
So on top of that, it
will help us solve a class


171
00:09:25,156 --> 00:09:27,326
of programming problems
that I'm going to go


172
00:09:27,326 --> 00:09:28,336
into a demonstration now.


173
00:09:29,426 --> 00:09:33,406
So, running on the simulator is
an application called "Jogr,"


174
00:09:33,626 --> 00:09:37,106
which helps you track
your runs in San Francisco


175
00:09:37,576 --> 00:09:40,976
and keep fit while you're
at - during this WWDC.


176
00:09:41,036 --> 00:09:43,716
Well, I know, developers jogging


177
00:09:43,716 --> 00:09:46,156
and keeping fit, but
we can all dream.


178
00:09:48,136 --> 00:09:51,386
Now, I have a timer here
that tracks your time


179
00:09:51,386 --> 00:09:56,486
and your velocity,
and a map of all


180
00:09:56,486 --> 00:09:58,826
of the routes that I've done.


181
00:09:58,826 --> 00:10:01,106
And I've done exactly
one this year,


182
00:10:01,956 --> 00:10:03,256
which is one too many for me.


183
00:10:04,966 --> 00:10:08,096
If you click on the date, if you
select the date, it will slide


184
00:10:08,096 --> 00:10:10,926
in the detail page
of my velocity graph.


185
00:10:11,836 --> 00:10:16,576
So notice that it takes a
little bit of time to slide


186
00:10:16,576 --> 00:10:19,496
in the detail page, and I'm
sure you have learned from Apple


187
00:10:19,496 --> 00:10:22,506
and your customers that
they want your animation


188
00:10:22,506 --> 00:10:25,556
to be smooth: smooth
like butter.


189
00:10:26,326 --> 00:10:27,016
So this is not.


190
00:10:29,566 --> 00:10:31,636
And I want to figure out why.


191
00:10:32,366 --> 00:10:34,656
So things I know to code
pretty well, I'm just going


192
00:10:34,656 --> 00:10:37,986
to jump straight into Xcode to
the class known as GraphView.


193
00:10:39,446 --> 00:10:41,246
GraphView is the class
that draws the graph.


194
00:10:42,546 --> 00:10:45,896
And I'm going to jump straight
to awakeFromNib by going


195
00:10:45,896 --> 00:10:48,186
to the implementation field
of the [inaudible] bar


196
00:10:48,186 --> 00:10:49,166
and start typing "awake."


197
00:10:49,956 --> 00:10:52,246
There I go.


198
00:10:52,486 --> 00:10:55,446
And I've a method here that
creates my velocity path.


199
00:10:56,656 --> 00:10:59,206
And I know that it is doing
a lot of heavy-duty work,


200
00:10:59,616 --> 00:11:01,816
so let's jump into
the definition


201
00:11:01,816 --> 00:11:03,106
by doing a Command-Click on it.


202
00:11:04,486 --> 00:11:06,006
What I see here is,


203
00:11:06,256 --> 00:11:09,016
it's spending time fetching the
velocity data from the database,


204
00:11:10,086 --> 00:11:14,746
and then it takes a
lock to protect it.


205
00:11:15,006 --> 00:11:18,096
And subsequently go
through each data point


206
00:11:18,096 --> 00:11:20,476
in the velocity data
to draw the path.


207
00:11:21,246 --> 00:11:23,336
And when it's done,
it releases the lock.


208
00:11:23,336 --> 00:11:27,416
So it's doing all this
work on the main thread.


209
00:11:27,416 --> 00:11:29,726
So it's impeding the
detail page from sliding in.


210
00:11:30,946 --> 00:11:32,676
And this looks like
a good candidate


211
00:11:32,676 --> 00:11:34,526
to use this dispatch async.


212
00:11:35,516 --> 00:11:37,426
So let's do that.


213
00:11:38,296 --> 00:11:39,466
Going back to awakeFromNib.


214
00:11:39,466 --> 00:11:44,396
And I'm going to paste -
pasting a chunk of code,


215
00:11:45,006 --> 00:11:46,976
which I don't have,
but it's all right.


216
00:12:06,046 --> 00:12:09,576
All right, I'm going to move
the line that creates the path


217
00:12:09,966 --> 00:12:11,786
into the dispatch async block.


218
00:12:12,216 --> 00:12:14,456
And I'm going to
dispatch the block


219
00:12:14,456 --> 00:12:16,426
to a simple queue of the graph.


220
00:12:17,706 --> 00:12:20,896
And when I'm done calculating
the path, I will update it


221
00:12:20,896 --> 00:12:22,476
on the main thread like usual.


222
00:12:23,326 --> 00:12:25,276
So this is a pretty
simple change.


223
00:12:25,826 --> 00:12:33,236
Let's rerun by clicking on the
Run button to see if it works.


224
00:12:35,056 --> 00:12:40,306
OK, I'm going to go to the
date so that I can select it.


225
00:12:40,776 --> 00:12:45,016
So this time when
I select the date,


226
00:12:45,436 --> 00:12:52,296
the detail page should slide
in very quickly, which it does,


227
00:12:53,616 --> 00:12:55,036
but my graph is not drawing.


228
00:12:55,796 --> 00:13:00,676
So, there are many ways
to - you can try to figure


229
00:13:00,676 --> 00:13:03,996
out what is the problem, but one
of my favorite ways is to look


230
00:13:03,996 --> 00:13:05,346
at the state of the application.


231
00:13:05,346 --> 00:13:08,516
And to do that, I will
look at the backtraces


232
00:13:08,766 --> 00:13:13,826
of the application by
clicking the Pause button


233
00:13:13,826 --> 00:13:14,796
in the debug bar.


234
00:13:15,576 --> 00:13:20,996
And I know that work
for my graph is done


235
00:13:20,996 --> 00:13:22,146
on the Graph Serial Queue,


236
00:13:22,506 --> 00:13:24,806
so I found a thread,
which is Thread 22.


237
00:13:25,456 --> 00:13:33,916
I'm going to twist it open, and
you see - you may not be able


238
00:13:33,916 --> 00:13:36,586
to see at the back,
but Frame 2 shows


239
00:13:36,586 --> 00:13:38,546
that I'm trying to
wait for a lock.


240
00:13:39,576 --> 00:13:40,246
It looks like it.


241
00:13:40,306 --> 00:13:43,806
I'm going to select
Frame 3 to confirm it.


242
00:13:43,806 --> 00:13:45,626
And indeed, I'm waiting
for the lock.


243
00:13:45,906 --> 00:13:49,686
So those of us who have faced
this situation before have a


244
00:13:49,686 --> 00:13:52,386
pretty standard following
path [inaudible],


245
00:13:52,606 --> 00:13:55,406
which is to find a
thread that has the lock.


246
00:13:56,076 --> 00:13:57,446
So let's do that.


247
00:13:57,446 --> 00:14:01,116
I'm going to show you a nifty
way to show all the backtraces,


248
00:14:01,516 --> 00:14:05,376
which is to first
collapse the process item.


249
00:14:05,886 --> 00:14:09,296
And by holding down the Option
key, you can twist it open.


250
00:14:09,926 --> 00:14:13,466
So now I'm going to visually
just scan through to look


251
00:14:13,466 --> 00:14:15,706
for the thread that
has the lock.


252
00:14:15,706 --> 00:14:22,326
Well this is interesting
because besides the Thread 22,


253
00:14:22,326 --> 00:14:24,226
which is trying to
acquire the lock,


254
00:14:24,226 --> 00:14:27,276
I cannot find a thread
that has the lock.


255
00:14:28,126 --> 00:14:29,326
So this is a head scratcher.


256
00:14:29,496 --> 00:14:31,296
But what do you know?


257
00:14:31,296 --> 00:14:34,016
We just learned something
that may be able to help us.


258
00:14:34,016 --> 00:14:37,276
So I'm going to switch over
to Queue Debugging by going


259
00:14:37,276 --> 00:14:39,146
to the [inaudible] control.


260
00:14:39,826 --> 00:14:45,646
And here I'm going to use
the filter bar to focus


261
00:14:45,646 --> 00:14:47,666
on my Graph Serial Queue.


262
00:14:48,306 --> 00:14:50,806
So there it is.


263
00:14:52,086 --> 00:14:57,116
So, it says here, I have one
running block which is my -


264
00:14:57,236 --> 00:14:59,496
the block waiting for the lock.


265
00:15:00,056 --> 00:15:02,896
And I have one Pending Block.


266
00:15:03,136 --> 00:15:04,876
To show my Pending
Block, I'm going to go


267
00:15:04,876 --> 00:15:08,056
to my Debug menu
item, Debug Workflow,


268
00:15:08,226 --> 00:15:11,396
and turn on Always Show
Pending Blocks and Queues.


269
00:15:11,956 --> 00:15:14,876
Out pops my Pending Block.


270
00:15:14,876 --> 00:15:18,516
I'm going to twist it open
and select the first frame,


271
00:15:18,956 --> 00:15:19,956
which has my source code.


272
00:15:20,486 --> 00:15:24,906
So plotAccelerationGraph
- Curve,


273
00:15:24,906 --> 00:15:27,596
is a method which I enhanced
this morning as well,


274
00:15:28,076 --> 00:15:32,286
to use dispatch async so that I
can do work off the main thread.


275
00:15:32,886 --> 00:15:35,816
And it looks like in
my haste what I did is,


276
00:15:35,816 --> 00:15:39,396
I acquired a lock before
I did the dispatch async.


277
00:15:40,006 --> 00:15:43,416
So what's going on is this.


278
00:15:43,586 --> 00:15:48,056
I have an Execution
Block waiting for a lock,


279
00:15:48,596 --> 00:15:51,396
and stacked right after
it, is my Pending Block,


280
00:15:52,406 --> 00:15:54,326
which unfortunately
has the lock.


281
00:15:54,566 --> 00:15:58,096
So the Pending Block cannot
move because it has to wait


282
00:15:58,096 --> 00:15:59,566
for the Execution
Block to finish.


283
00:16:00,326 --> 00:16:05,626
So this is a kind of deadlock,
albeit in a nonclassical way.


284
00:16:06,306 --> 00:16:10,186
So thankfully the
solution is pretty simple.


285
00:16:10,346 --> 00:16:14,056
I just have to move the line
that does the locking closer


286
00:16:14,056 --> 00:16:18,236
to the place, where it's
protecting its data,


287
00:16:18,936 --> 00:16:20,106
which is velocity data.


288
00:16:20,816 --> 00:16:24,876
This ensures that it
doesn't try to get a lock


289
00:16:24,876 --> 00:16:27,666
until it's dequeued
and start executing.


290
00:16:29,106 --> 00:16:32,256
So with this second
round of simple change,


291
00:16:32,946 --> 00:16:33,886
let's see if this works.


292
00:16:43,046 --> 00:16:45,546
OK, let's get to the point where
I can select the date again.


293
00:16:46,166 --> 00:16:48,916
And voila.


294
00:16:48,956 --> 00:16:51,206
Everything looks correct now.


295
00:16:51,886 --> 00:16:54,896
So without this Queue Debugging,
what you would have to do -


296
00:16:54,896 --> 00:16:58,026
what I would have to do - is
to search for all the places


297
00:16:58,026 --> 00:17:03,536
where my velocity data lock is
used and visually look at them


298
00:17:03,536 --> 00:17:06,675
and reason really hard
about how it's used.


299
00:17:07,286 --> 00:17:08,826
And that's error
prone and tedious.


300
00:17:09,766 --> 00:17:11,726
In summary, you're going
to get Queue Debugging


301
00:17:11,726 --> 00:17:14,566
in Xcode 6, which has two parts.


302
00:17:15,195 --> 00:17:18,326
Recorded backtrace is going to
get you - show you backtrace


303
00:17:18,386 --> 00:17:21,715
of the enqueuing event when
you're using dispatch async


304
00:17:22,415 --> 00:17:24,476
and Pending Blocks, by -


305
00:17:24,846 --> 00:17:27,016
hopefully by surfacing
this information,


306
00:17:27,016 --> 00:17:29,866
you can optimize
your use of GCD.


307
00:17:30,756 --> 00:17:33,146
With that, let me bring up Troy
to talk about view debugging.


308
00:17:34,516 --> 00:17:40,886
[ Applause ]


309
00:17:41,386 --> 00:17:42,396
>> Hi, my name is Troy.


310
00:17:42,626 --> 00:17:46,566
And thank you for coming to
our "Debugging in Xcode 6."


311
00:17:47,116 --> 00:17:49,876
As you may know, Xcode
is a fantastic tool


312
00:17:50,396 --> 00:17:52,426
for discovering things
about your application


313
00:17:52,816 --> 00:17:54,086
that may be hidden
through the debugger.


314
00:17:55,296 --> 00:17:57,566
Han Ming just showed
us two new features


315
00:17:57,696 --> 00:18:00,746
through the Pending Blocks
and recorded stack traces


316
00:18:01,406 --> 00:18:04,086
that are hidden pieces
of information


317
00:18:04,086 --> 00:18:06,716
about your application
that Xcode exposes to you.


318
00:18:07,826 --> 00:18:10,086
But we all know that
not all of the bugs


319
00:18:10,086 --> 00:18:11,436
in our applications are hidden.


320
00:18:11,856 --> 00:18:13,386
Some of them are
extremely visible.


321
00:18:13,386 --> 00:18:14,626
They're staring us
right in the face,


322
00:18:15,016 --> 00:18:16,686
from the user interface
of our applications.


323
00:18:16,686 --> 00:18:20,476
And since these are visual
bugs, wouldn't it be great


324
00:18:21,066 --> 00:18:22,816
if we could debug
them visually as well?


325
00:18:23,916 --> 00:18:25,406
And now in Xcode 6, you can.


326
00:18:26,316 --> 00:18:28,046
So what kind of bugs
am I talking about?


327
00:18:28,816 --> 00:18:31,226
These are the bugs where you
have a mispositioned view


328
00:18:31,226 --> 00:18:32,626
or clipping is wrong.


329
00:18:33,496 --> 00:18:35,546
These are the squished
or the stretched views.


330
00:18:35,626 --> 00:18:37,816
And these are the views
that are missing entirely


331
00:18:37,816 --> 00:18:38,846
because the visibility


332
00:18:38,846 --> 00:18:42,206
or "is hidden" attribute is set
incorrectly in your application.


333
00:18:43,986 --> 00:18:48,676
But that's not all
that this new aspect


334
00:18:48,676 --> 00:18:50,126
of the debugger in
Xcode helps with.


335
00:18:50,906 --> 00:18:52,166
You can use it when
you're not even debugging.


336
00:18:52,306 --> 00:18:53,736
Let's say I have an
application like this,


337
00:18:54,676 --> 00:18:59,676
and I would like to add
a new button down here.


338
00:19:00,646 --> 00:19:04,476
And I don't know, maybe
it's a new code base to me,


339
00:19:04,476 --> 00:19:06,106
maybe it's been awhile
since I've read this;


340
00:19:06,106 --> 00:19:08,426
I don't know what this
view is behind it.


341
00:19:08,786 --> 00:19:13,406
Wouldn't it be great if I
could just click with the mouse


342
00:19:13,406 --> 00:19:14,486
and find out what that view is?


343
00:19:14,946 --> 00:19:15,876
Well now, you can.


344
00:19:16,956 --> 00:19:21,236
This view debugger feature is
integrated all throughout Xcode.


345
00:19:22,126 --> 00:19:24,586
So let's take a look at
the Xcode window and figure


346
00:19:24,586 --> 00:19:25,986
out where the different
pieces are


347
00:19:26,196 --> 00:19:28,486
so that we know what we're
talking about when we're talking


348
00:19:28,716 --> 00:19:30,546
about this view debugging
feature.


349
00:19:31,316 --> 00:19:33,256
Here is the Xcode window
that we all know and love.


350
00:19:34,286 --> 00:19:35,766
When your application
is running,


351
00:19:35,766 --> 00:19:37,566
down at the bottom
there's the Debug Bar.


352
00:19:37,566 --> 00:19:40,276
This is where you find
your familiar items


353
00:19:40,276 --> 00:19:42,296
such as the Pause
and Continue buttons.


354
00:19:42,656 --> 00:19:44,156
Well now there's a
new button in there,


355
00:19:44,616 --> 00:19:47,746
which is the Debug View
Hierarchy button, right here.


356
00:19:48,176 --> 00:19:50,766
Simply click this,
and Xcode is going


357
00:19:50,766 --> 00:19:53,916
to import the user
interface of your application


358
00:19:53,916 --> 00:19:56,386
into the main editor
window of Xcode.


359
00:19:57,016 --> 00:20:01,436
But it's not just imported as
a static image; it's imported


360
00:20:01,436 --> 00:20:05,546
as separate pieces so that
Xcode can actually explode it


361
00:20:05,546 --> 00:20:10,976
out into three dimensions and
rotate it around if you want.


362
00:20:11,046 --> 00:20:14,206
Seeing your application in this
3D view is very illuminating.


363
00:20:14,206 --> 00:20:17,406
It allows you to
traverse the hierarchy,


364
00:20:17,406 --> 00:20:19,606
see what the parent views are,
see where the siblings are.


365
00:20:19,606 --> 00:20:22,146
But if you want a more
concrete representation


366
00:20:22,216 --> 00:20:25,946
of your view hierarchy, we
turn to the Debug Navigator.


367
00:20:26,956 --> 00:20:28,866
This is as Han Ming
talked about,


368
00:20:28,866 --> 00:20:30,616
the place where you find
your threads and your queues.


369
00:20:31,626 --> 00:20:33,616
And that's available here


370
00:20:33,616 --> 00:20:36,096
in this Process View
Option Selector.


371
00:20:36,746 --> 00:20:40,916
If you select the View option
in there - now there's threads,


372
00:20:40,916 --> 00:20:44,396
queues, and views - down below
we have, your view hierarchy


373
00:20:44,746 --> 00:20:52,106
in the application,
which is right here.


374
00:20:52,276 --> 00:20:53,816
Down below, we have
some filtering options


375
00:20:53,816 --> 00:20:55,546
to help you tame that list.


376
00:20:56,286 --> 00:20:58,056
We have the Show
Only Primary Views,


377
00:20:58,056 --> 00:20:59,736
and we have a Show
Only Displayed Views.


378
00:20:59,736 --> 00:21:02,626
Let me stop on this second one,
because this one's important.


379
00:21:02,626 --> 00:21:04,736
If you have a view that's
missing in your application,


380
00:21:05,396 --> 00:21:08,486
and maybe the "is
hidden" is set on it.


381
00:21:08,736 --> 00:21:11,476
And so Xcode is also going
to hide it in the Xcode UI,


382
00:21:12,016 --> 00:21:14,006
but Xcode knows about it.


383
00:21:14,006 --> 00:21:15,236
It could show it to you.


384
00:21:15,286 --> 00:21:19,266
So, you can simply turn off this
option, and Xcode will show all


385
00:21:19,266 --> 00:21:21,016
of your views, even the
ones that are hidden.


386
00:21:22,326 --> 00:21:25,566
Finally, there's the string
comparison there, which we'll do


387
00:21:25,566 --> 00:21:28,556
in an exact match of that
list in the navigator


388
00:21:28,556 --> 00:21:31,556
to help you drill down to
exactly the item you're


389
00:21:31,556 --> 00:21:31,976
looking for.


390
00:21:33,096 --> 00:21:34,366
Now let's turn our attention


391
00:21:34,366 --> 00:21:37,026
over to the right-hand
side of the Xcode window.


392
00:21:37,316 --> 00:21:38,966
This is the Inspector Area.


393
00:21:39,086 --> 00:21:40,366
And you might be
familiar with this


394
00:21:40,366 --> 00:21:41,816
if you've ever used
an Interface Builder,


395
00:21:41,816 --> 00:21:42,936
because these are very similar.


396
00:21:43,616 --> 00:21:45,126
We have an object inspector,


397
00:21:45,436 --> 00:21:46,986
and there's a size
inspector as well.


398
00:21:47,966 --> 00:21:51,016
Here we see the object
inspector for a UI image view.


399
00:21:52,336 --> 00:21:54,616
And not only that, this is
a specific UI image view


400
00:21:55,016 --> 00:21:58,336
because we're selecting -
we're clicking on one that's


401
00:21:58,506 --> 00:22:00,906
in our application, so we
actually have the address


402
00:22:00,906 --> 00:22:04,466
of that object as well, which is
Resident in Memory, on your Mac


403
00:22:04,466 --> 00:22:05,756
or on your iOS device.


404
00:22:07,026 --> 00:22:10,606
We have the thumbnail and all
the other interesting attributes


405
00:22:10,876 --> 00:22:14,036
about that view listed
in this inspector.


406
00:22:14,686 --> 00:22:16,136
Finally, we have
the Size inspector.


407
00:22:16,136 --> 00:22:17,356
This is going to
show you the size


408
00:22:17,356 --> 00:22:18,916
and position, as
you might expect.


409
00:22:19,526 --> 00:22:22,916
It's also going to show a list
of the auto-layout constraints


410
00:22:22,916 --> 00:22:26,706
that are affecting that
view, with two exceptions.


411
00:22:26,706 --> 00:22:29,176
Down at the bottom,
you see two constraints


412
00:22:29,176 --> 00:22:30,346
which are de-emphasized.


413
00:22:30,346 --> 00:22:33,216
These are not affecting the
layout of your view currently,


414
00:22:33,456 --> 00:22:34,656
but they're still
attached to the view,


415
00:22:34,656 --> 00:22:36,216
and they still have meaning.


416
00:22:36,376 --> 00:22:40,926
In this case, we have
a self.width of 320,


417
00:22:41,416 --> 00:22:43,386
and in the parentheses, you
see that's content size.


418
00:22:43,386 --> 00:22:46,876
That's because the system added
this implicitly to this view


419
00:22:47,356 --> 00:22:48,806
to represent the content size.


420
00:22:49,536 --> 00:22:51,696
They're de-emphasized because
up above, they're redundant


421
00:22:51,696 --> 00:22:54,146
with two explicit
constraints that were added


422
00:22:54,146 --> 00:22:57,646
in Interface Builder, and
those also have a width of 320,


423
00:22:57,646 --> 00:22:59,836
in this case, but they
might not always match.


424
00:23:00,406 --> 00:23:01,776
So this is a great
place to check


425
00:23:01,776 --> 00:23:04,516
if you think you're
having constraint issues,


426
00:23:04,516 --> 00:23:06,406
as we're going to see
in a demo which I'd


427
00:23:06,406 --> 00:23:08,356
like to show you right now.


428
00:23:09,936 --> 00:23:12,116
All right, here we
have the application


429
00:23:12,256 --> 00:23:13,256
that Han Ming started with.


430
00:23:14,376 --> 00:23:16,916
And if you have super
eagle eyes, or maybe not,


431
00:23:17,096 --> 00:23:20,346
you'll notice that there's a
pretty bad visual bug down here.


432
00:23:20,706 --> 00:23:24,176
I wonder if the View Debugging
in Xcode can help us find that.


433
00:23:24,376 --> 00:23:27,536
So I'm going to switch
over to Xcode,


434
00:23:27,766 --> 00:23:33,606
find this Debug View Hierarchy
button, and simply press it.


435
00:23:33,876 --> 00:23:36,556
What's happening now is Xcode's
going through all of the views


436
00:23:36,556 --> 00:23:39,876
in the application and pulling
them back into the Xcode window.


437
00:23:40,556 --> 00:23:43,176
Now we see, the user
interface right here.


438
00:23:44,066 --> 00:23:46,466
And already, you're
getting a better look


439
00:23:46,466 --> 00:23:48,896
at what might be the
issue in this application.


440
00:23:48,896 --> 00:23:51,616
You see, some of the
views, some of the images


441
00:23:51,616 --> 00:23:54,676
in this UI collection
view, are outside the view


442
00:23:54,676 --> 00:23:56,096
where they are supposed
to be contained.


443
00:23:56,906 --> 00:24:01,466
That's a pretty interesting fact
to help diagnose the problem,


444
00:24:01,466 --> 00:24:04,936
but it doesn't help us solve
the problem, so we're going


445
00:24:04,936 --> 00:24:07,536
to have to dig deeper.


446
00:24:09,196 --> 00:24:12,486
To explode the view hierarchy
of you application, all you need


447
00:24:12,486 --> 00:24:14,936
to do is simply click and
drag anywhere in the canvas.


448
00:24:16,056 --> 00:24:19,666
This allows us to see the
parent-child relationships


449
00:24:19,666 --> 00:24:20,646
between some of these views.


450
00:24:21,556 --> 00:24:25,856
I have open on the right-hand
side, the Assist Editor,


451
00:24:25,856 --> 00:24:27,006
which is in Automatic mode.


452
00:24:27,626 --> 00:24:33,416
This allows Xcode to track the
file that I click over here


453
00:24:33,416 --> 00:24:35,186
in the view debugger


454
00:24:35,606 --> 00:24:37,936
with a source code file
that matches with it.


455
00:24:38,246 --> 00:24:41,836
So if I click here, I
get the source code file


456
00:24:42,406 --> 00:24:43,786
for UIImageView.


457
00:24:44,996 --> 00:24:48,776
I'm going to traverse backwards
up through the hierarchy,


458
00:24:48,986 --> 00:24:50,706
until I get to the custom cell


459
00:24:50,706 --> 00:24:52,236
that has been written
for this class.


460
00:24:53,026 --> 00:24:55,316
The parent of this
UIImageView is a UIView,


461
00:24:55,486 --> 00:24:57,486
and this is the Content
View of that cell.


462
00:24:57,976 --> 00:25:01,986
And the one behind that is the
Run-DetailsCollectionViewCell,


463
00:25:01,986 --> 00:25:03,926
which is custom code
in my application.


464
00:25:04,516 --> 00:25:09,876
I'm also going to open up
the inspector here and check


465
00:25:09,876 --> 00:25:12,086
out some of the positions
of these views as -


466
00:25:12,086 --> 00:25:14,676
because it looks like there's
probably a position bug here.


467
00:25:15,466 --> 00:25:20,256
So traversing back up the stack,
starting with one of these views


468
00:25:20,256 --> 00:25:23,626
that has a missing image, I'm
going to click here and see


469
00:25:23,626 --> 00:25:25,496
that the position is 160 45.


470
00:25:26,406 --> 00:25:32,546
Its child is 45 45 because
the position is relative


471
00:25:32,546 --> 00:25:33,316
to its parent.


472
00:25:34,446 --> 00:25:36,486
But where is this final view?


473
00:25:37,246 --> 00:25:38,556
I'm going to go over
to the Navigator


474
00:25:38,836 --> 00:25:42,126
and find the view I have
selected is this UIView,


475
00:25:42,436 --> 00:25:44,496
and I can simply find
where its child is.


476
00:25:44,606 --> 00:25:46,706
I don't know where it
is in spatial space,


477
00:25:46,736 --> 00:25:50,056
but I know where it is in the
real hierarchy of the view.


478
00:25:50,316 --> 00:25:54,626
So if I click here, I see
that the position is 160 45.


479
00:25:54,626 --> 00:25:56,506
And remember, that's
based on the parent.


480
00:25:57,016 --> 00:26:00,236
So what I'm actually looking
at is this view over here.


481
00:26:00,236 --> 00:26:01,316
I thought that was
a working one,


482
00:26:01,666 --> 00:26:06,816
but the view has been shifted
off of the cell and it's -


483
00:26:06,946 --> 00:26:07,966
that's the reason it's missing.


484
00:26:09,146 --> 00:26:14,006
So let's go back up to the
cell class and take a look


485
00:26:14,006 --> 00:26:17,016
at the implementation
of that class.


486
00:26:17,016 --> 00:26:19,926
I'm going to Command-click on
the class name here to dive


487
00:26:19,926 --> 00:26:20,816
into the implementation.


488
00:26:21,326 --> 00:26:25,596
And here you see a fairly simple
implementation for a cell view.


489
00:26:26,126 --> 00:26:28,396
All it does, is it
overrides the initWithFrame,


490
00:26:29,296 --> 00:26:33,046
it creates a new UIImageView,
and then it adds it as the -


491
00:26:33,046 --> 00:26:36,596
a subview of the
contentView right down here.


492
00:26:37,436 --> 00:26:40,416
Thinking about the
information we found earlier,


493
00:26:41,056 --> 00:26:43,746
we know that there's a
position issue, and I can see


494
00:26:43,746 --> 00:26:48,136
that we're passing the frameRect
of the cell to this subview.


495
00:26:48,946 --> 00:26:49,686
That's not what I want.


496
00:26:49,686 --> 00:26:53,186
I want the subview to have
the same bounds as the cell.


497
00:26:53,306 --> 00:26:58,776
So instead of frameRect, I'm
going to type self.bounds.


498
00:26:59,246 --> 00:27:00,576
This should be enough
to fix our problem,


499
00:27:00,576 --> 00:27:03,296
so I'm going to build and run.


500
00:27:04,366 --> 00:27:06,186
Switch over to the simulator.


501
00:27:07,176 --> 00:27:12,506
And dive back into
our Run Details view.


502
00:27:14,006 --> 00:27:18,186
Sure enough, we have the fully
functioning UI collection view


503
00:27:18,186 --> 00:27:21,196
with all our images,
tightly spaced as expected.


504
00:27:21,906 --> 00:27:24,886
Now that that bug's fixed,
I do see another issue.


505
00:27:24,886 --> 00:27:28,576
You see, this label
up here, San Fran,


506
00:27:28,576 --> 00:27:30,726
is kind of a cheeky
nickname for San Francisco,


507
00:27:30,726 --> 00:27:32,356
but this is a serious
running app.


508
00:27:33,156 --> 00:27:36,146
This is an app for those of
us that go every morning,


509
00:27:36,146 --> 00:27:38,566
and we don't call this
fair city San Fran.


510
00:27:38,716 --> 00:27:39,766
This is San Francisco.


511
00:27:40,196 --> 00:27:43,916
So let's go back to the
View Debugger and see


512
00:27:43,916 --> 00:27:45,636
if we can understand what
might be going on there.


513
00:27:54,046 --> 00:27:54,976
I'm going to take a moment


514
00:27:54,976 --> 00:27:58,176
to admire the fully
functioning UI Collection View.


515
00:27:58,296 --> 00:27:59,146
Looks great.


516
00:27:59,716 --> 00:28:02,436
I'm going then turn back
to two-dimensional mode.


517
00:28:02,436 --> 00:28:05,046
This button down here allows
us to reset the view hierarchy,


518
00:28:05,576 --> 00:28:07,346
and I'm going to
click on this label.


519
00:28:07,346 --> 00:28:13,596
All right, I know that I'm using
Auto Layout in this application,


520
00:28:13,596 --> 00:28:16,276
so let's go ahead and see if
there's anything having to do


521
00:28:16,276 --> 00:28:17,956
with constraints that
might be an issue.


522
00:28:18,516 --> 00:28:22,526
Down here is the Show
Constraints button.


523
00:28:22,526 --> 00:28:26,006
This, it shows all the
constraints, and it also dims


524
00:28:26,006 --> 00:28:28,656
out the views that are not
currently related to those -


525
00:28:28,656 --> 00:28:30,606
to that view or its constraints.


526
00:28:30,826 --> 00:28:35,106
This allows us to really
focus in on the work at hand.


527
00:28:36,016 --> 00:28:39,996
When I zoom in, it's
plain to see


528
00:28:39,996 --> 00:28:42,326
that there are two constraints
attached to this label.


529
00:28:43,166 --> 00:28:46,916
And if I look over here,
I see the width is 95.


530
00:28:47,876 --> 00:28:51,756
There's an explicit constraint
of 95, but down in the bottom,


531
00:28:51,756 --> 00:28:54,586
the content size is 109.5.


532
00:28:54,966 --> 00:28:57,796
So clearly, somebody added
an explicit constraint


533
00:28:57,796 --> 00:29:01,936
in Interface Builder and that's
clipping the implicit size


534
00:29:02,096 --> 00:29:02,946
of that label.


535
00:29:03,706 --> 00:29:06,216
So I'm just going to switch
over to my storyboard,


536
00:29:07,516 --> 00:29:10,286
find that label, and delete
that explicit constraint.


537
00:29:10,876 --> 00:29:17,106
If I had the time to show you
guys, I would add a constraint


538
00:29:17,166 --> 00:29:18,456
that properly limited that label


539
00:29:18,456 --> 00:29:20,546
so it didn't go beyond
the bounds of the screen,


540
00:29:20,546 --> 00:29:23,486
but I'm sure you can find an
Interface Builder session.


541
00:29:23,486 --> 00:29:26,446
For example, this afternoon
at 3:15 that will go


542
00:29:27,526 --> 00:29:30,166
into more detail about how
to lay out constraints.


543
00:29:31,276 --> 00:29:35,576
And then we have the full
string of that label.


544
00:29:36,696 --> 00:29:40,306
So we've seen that the View
Debugger is a fantastic way


545
00:29:40,646 --> 00:29:44,226
to look - take a look
at your application.


546
00:29:44,226 --> 00:29:45,466
And I invite you
to do just that.


547
00:29:45,726 --> 00:29:49,816
Go back today, just after the
session, open up your computers


548
00:29:49,816 --> 00:29:51,366
and just try hitting
the View Debugger button


549
00:29:51,556 --> 00:29:52,356
on your application.


550
00:29:52,356 --> 00:29:53,816
I think you'll find
it illuminating,


551
00:29:54,046 --> 00:29:57,016
and the integration
with Xcode is fantastic.


552
00:29:57,606 --> 00:29:59,156
Now I'd like to turn
it over to Kerry,


553
00:29:59,416 --> 00:30:01,046
who's going to teach
you a little bit more


554
00:30:01,046 --> 00:30:02,326
about Quick Look previews.


555
00:30:03,516 --> 00:30:06,566
[ Applause ]


556
00:30:07,066 --> 00:30:07,986
>> Thank you, Troy.


557
00:30:08,516 --> 00:30:09,566
My name is Kerry.


558
00:30:09,806 --> 00:30:12,866
And how is everyone enjoying
the conference so far?


559
00:30:13,516 --> 00:30:15,546
[ Applause ]


560
00:30:16,046 --> 00:30:16,316
That's great.


561
00:30:16,316 --> 00:30:18,536
I know that we are very
excited to be here as well,


562
00:30:18,836 --> 00:30:23,486
to show some great new
debugging features in Xcode 6.


563
00:30:23,896 --> 00:30:26,076
But first, let's
take a step back.


564
00:30:27,026 --> 00:30:31,076
Last year, Xcode 5 debuted
with this great new feature,


565
00:30:31,546 --> 00:30:34,806
whereby as you are running and
debugging your application,


566
00:30:35,246 --> 00:30:39,196
you can get a live Quick
Look preview of your data.


567
00:30:39,886 --> 00:30:44,006
So simply by clicking
on the Quick Look icon


568
00:30:44,006 --> 00:30:46,486
in the Debug bar, you
can get this popover


569
00:30:46,486 --> 00:30:47,676
that would show you a preview.


570
00:30:47,966 --> 00:30:51,266
You could even, simply by
hovering over the source


571
00:30:51,266 --> 00:30:53,266
of a variable in
the Source Editor,


572
00:30:53,856 --> 00:30:57,326
get a Quick Look preview right
from there, just by clicking


573
00:30:57,326 --> 00:31:02,306
on the Quick Look icon in
the popover that appears.


574
00:31:02,546 --> 00:31:07,196
Now, Xcode 5 debuted with
default support for a number


575
00:31:07,196 --> 00:31:11,126
of important and common
object types like images


576
00:31:11,466 --> 00:31:15,686
and Bezier paths and even
things like map locations.


577
00:31:16,646 --> 00:31:18,546
Well, we've gotten a
lot of great feedback


578
00:31:18,546 --> 00:31:21,416
from this feature, and I know
that it's been very useful


579
00:31:21,416 --> 00:31:23,896
to a number of developers,
including myself.


580
00:31:24,486 --> 00:31:29,826
So to build on the success,
in Xcode 6, there is support


581
00:31:29,826 --> 00:31:31,826
for two new object types.


582
00:31:33,116 --> 00:31:35,526
The first is Views.


583
00:31:36,536 --> 00:31:39,156
So whether it be a UI
View or an NS View,


584
00:31:39,886 --> 00:31:44,446
you can get a Quick Look preview
of that, simply by clicking


585
00:31:44,446 --> 00:31:48,976
in the Variables view and
clicking on the Quick Look icon,


586
00:31:48,976 --> 00:31:51,386
or my favorite, is
just hit the Space bar,


587
00:31:51,456 --> 00:31:53,976
and it will bring
up a nice preview.


588
00:31:54,166 --> 00:31:57,436
And considering how common
views are in most applications,


589
00:31:58,066 --> 00:32:00,196
I think this will be a
very powerful feature.


590
00:32:01,756 --> 00:32:06,816
Now the second object type
that was added is, well,


591
00:32:06,816 --> 00:32:08,336
I honestly don't know.


592
00:32:08,916 --> 00:32:11,406
That's because it's
your own custom class.


593
00:32:12,656 --> 00:32:15,646
So now for the first
time, if you have a class


594
00:32:16,256 --> 00:32:22,266
that does some custom drawing
and perhaps returns a - an image


595
00:32:22,266 --> 00:32:24,356
or a Bezier path or
something like that,


596
00:32:25,246 --> 00:32:28,026
you can now get a
preview of that as well.


597
00:32:29,016 --> 00:32:32,236
Before now, there wasn't
great support for that.


598
00:32:32,416 --> 00:32:34,346
So if you were to try
and get a preview,


599
00:32:34,346 --> 00:32:37,126
you would get this Default View


600
00:32:37,126 --> 00:32:39,766
which had some pertinent
information like the name


601
00:32:39,766 --> 00:32:42,536
and the address and the
type, but no preview.


602
00:32:43,556 --> 00:32:46,676
So I would like to show
you how to fix that.


603
00:32:46,676 --> 00:32:51,126
There's a simple method
that you can implement


604
00:32:51,336 --> 00:32:53,196
in your Classes Implementation


605
00:32:53,236 --> 00:32:56,326
and it's called
debugQuickLookObject.


606
00:32:57,756 --> 00:33:00,246
Now in this class, you can
either call your drawing code


607
00:33:00,246 --> 00:33:03,566
or implement it in there,
but the important point is,


608
00:33:03,646 --> 00:33:05,896
from this method,
you return something


609
00:33:05,896 --> 00:33:08,046
that Xcode knows how to show.


610
00:33:08,946 --> 00:33:12,376
So one of the default supported
types should be returned


611
00:33:12,376 --> 00:33:15,196
from this method, and
then you'll be good to go.


612
00:33:15,236 --> 00:33:19,186
And I would like to
show you that now.


613
00:33:20,416 --> 00:33:22,516
So here we have the
"Jogr" application


614
00:33:22,516 --> 00:33:24,726
that we've been seeing
in previous demos.


615
00:33:25,106 --> 00:33:27,036
And I'm going to click
the Routes button,


616
00:33:27,696 --> 00:33:30,196
and we'll see Han Ming's
run from this morning -


617
00:33:30,836 --> 00:33:33,886
if that's indeed the case.


618
00:33:35,576 --> 00:33:38,986
OK, so this class has a -


619
00:33:38,986 --> 00:33:42,456
an object class called
RoutePathOverlay,


620
00:33:42,936 --> 00:33:47,826
which accesses the run data
to generate this Bezier path


621
00:33:47,826 --> 00:33:49,896
that then gets overlaid
onto the map.


622
00:33:50,956 --> 00:33:53,206
So let's look at that
a little further.


623
00:33:53,206 --> 00:33:57,086
Well I'm going to click on the
map, and I'm going to hit this -


624
00:33:57,216 --> 00:33:58,896
whoa, scrolls really fast.


625
00:33:59,176 --> 00:34:00,596
I'm going to hit
this break point.


626
00:34:01,066 --> 00:34:03,496
And let's say I'm trying
to debug some issue here.


627
00:34:04,466 --> 00:34:07,226
Now down in the Variables view,
we can see we've got a number


628
00:34:07,226 --> 00:34:09,376
of local variables
like this point.


629
00:34:09,916 --> 00:34:12,835
And if I click on
the Quick Look icon,


630
00:34:12,835 --> 00:34:14,806
I can see a preview
of the point.


631
00:34:15,096 --> 00:34:16,746
This is our route path overlay.


632
00:34:17,436 --> 00:34:20,005
And if I click on that, so I'm
going to hit the Space bar,


633
00:34:20,005 --> 00:34:22,556
and what it just comes up
with is just some generic


634
00:34:22,556 --> 00:34:25,106
information, but we can
do better than that.


635
00:34:26,315 --> 00:34:27,795
So I'm going to stop here.


636
00:34:28,446 --> 00:34:32,186
I'm going to go to
our RoutePathOverlay.


637
00:34:32,786 --> 00:34:35,396
And I've got the method


638
00:34:35,396 --> 00:34:37,835
that I was talking about:
debugQuickLookObject.


639
00:34:38,025 --> 00:34:42,766
And it's a sort of a long
title but try and remember.


640
00:34:43,545 --> 00:34:45,206
OK, and if I uncomment that.


641
00:34:45,576 --> 00:34:48,216
What this method does,
it's not really important


642
00:34:48,216 --> 00:34:49,306
because it's going
to be different


643
00:34:49,306 --> 00:34:54,116
for every custom class, but
what it does is it accesses each


644
00:34:54,116 --> 00:35:00,776
of the 364 some odd points
of map location for that run.


645
00:35:01,366 --> 00:35:05,776
And then generates a Bezier
path, scales it a little bit,


646
00:35:05,776 --> 00:35:08,656
and then returns from
it, a Bezier path,


647
00:35:08,656 --> 00:35:11,386
because Xcode 6 knows
how to render


648
00:35:11,646 --> 00:35:15,536
or Quick Look preview
a Bezier path.


649
00:35:15,656 --> 00:35:18,836
So now that we've
implemented that or enabled it,


650
00:35:18,836 --> 00:35:24,606
I'm going to Run
and Debug again.


651
00:35:25,696 --> 00:35:31,706
And we'll go to our routes,
and we'll click on the map.


652
00:35:32,266 --> 00:35:37,986
And if all goes well, we should
see a nice detailed preview


653
00:35:37,986 --> 00:35:41,086
of each of those points
of data from the start


654
00:35:41,116 --> 00:35:46,646
until the ambulance picked up
Han Ming when he collapsed.


655
00:35:49,366 --> 00:35:52,486
OK. So, what have we seen today?


656
00:35:52,756 --> 00:35:56,316
We've seen Han Ming show
us how we can very easily


657
00:35:56,316 --> 00:36:00,716
and more effectively
debug queues and blocks


658
00:36:01,296 --> 00:36:02,836
with the new Queue
Debugging feature.


659
00:36:03,426 --> 00:36:07,886
And then Troy showed us
how we can more effectively


660
00:36:07,886 --> 00:36:12,006
or easily explore, our
application's View Hierarchy.


661
00:36:12,216 --> 00:36:16,326
I've used this very effectively
myself several times.


662
00:36:16,516 --> 00:36:17,376
It's been very helpful.


663
00:36:17,446 --> 00:36:21,186
And then I showed you how
to add Quick Look previews


664
00:36:21,466 --> 00:36:23,336
for your own custom classes.


665
00:36:23,726 --> 00:36:28,186
And remember, you can
also now preview any view.


666
00:36:28,616 --> 00:36:32,176
So for more information, you
can contact our great Developer


667
00:36:32,176 --> 00:36:33,956
Tools Evangelist, Dave DeLong.


668
00:36:34,516 --> 00:36:36,786
I've also got a link
here to the documentation


669
00:36:36,786 --> 00:36:38,836
for Quick Look previews,


670
00:36:38,926 --> 00:36:43,636
which documentation will show
you a full list of exactly all


671
00:36:43,636 --> 00:36:46,566
of the default supported
types in Xcode 6.


672
00:36:48,286 --> 00:36:50,426
And then, don't forget
the developer forums.


673
00:36:51,976 --> 00:36:55,406
There's a lot of great
debugging sessions this week,


674
00:36:55,536 --> 00:36:56,846
so be sure to check them out.


675
00:36:57,636 --> 00:36:59,346
Thank you very much.


676
00:37:00,516 --> 00:37:06,770
[ Applause ]

