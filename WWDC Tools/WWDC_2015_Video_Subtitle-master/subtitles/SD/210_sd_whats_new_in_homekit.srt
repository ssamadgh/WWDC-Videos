1
00:00:24,141 --> 00:00:26,141
[Applause]


2
00:00:26,266 --> 00:00:26,636
>> ANUSH NADATHUR: Thank you.


3
00:00:30,486 --> 00:00:31,136
Hello, everybody.


4
00:00:31,136 --> 00:00:31,746
Good afternoon.


5
00:00:32,336 --> 00:00:34,346
Welcome. Thanks for coming.


6
00:00:35,886 --> 00:00:37,156
My name is Anush Nadathur


7
00:00:37,156 --> 00:00:39,656
and I'm a software
engineer on HomeKit.


8
00:00:40,956 --> 00:00:43,746
Today, my colleague Naveen
and I are going to talk


9
00:00:43,746 --> 00:00:45,916
about what's new in
HomeKit for iOS 9.


10
00:00:46,566 --> 00:00:50,916
Now for the past few years
we have seen a proliferation


11
00:00:50,916 --> 00:00:53,216
of home devices in the market.


12
00:00:54,336 --> 00:00:57,486
What this gives you is
a tremendous opportunity


13
00:00:58,016 --> 00:01:01,676
to influence the experience
people have when interacting


14
00:01:01,676 --> 00:01:05,036
with these devices in the
comfort of their own home.


15
00:01:06,786 --> 00:01:11,496
Apple introduced HomeKit in iOS
8 so that we can work together


16
00:01:12,486 --> 00:01:15,376
to bring home automation
to a much wider audience


17
00:01:15,376 --> 00:01:20,246
than in the past, and to deliver
a consistent user experience


18
00:01:20,246 --> 00:01:21,086
for our customers.


19
00:01:21,596 --> 00:01:26,856
We had a great session last
year, but for those of you


20
00:01:26,856 --> 00:01:30,126
who may have not seen
it, here's a brief recap.


21
00:01:32,316 --> 00:01:36,796
HomeKit provides
a common protocol


22
00:01:36,796 --> 00:01:39,986
that all HomeKit-enabled
accesses implement


23
00:01:40,396 --> 00:01:41,996
and interact with iOS.


24
00:01:43,076 --> 00:01:46,606
On this protocol, we
have defined profiles


25
00:01:46,696 --> 00:01:50,076
that describe many of the
commonly used accessories.


26
00:01:50,466 --> 00:01:54,286
However, we also
made it flexible


27
00:01:54,496 --> 00:01:58,916
so that you can define profiles
that define custom features


28
00:01:59,006 --> 00:02:02,176
of your accessory and
still be HomeKit-enabled.


29
00:02:02,326 --> 00:02:07,616
One of the key features
in HomeKit is


30
00:02:07,616 --> 00:02:10,656
to provide a common
view of the home


31
00:02:10,656 --> 00:02:12,536
across all HomeKit applications.


32
00:02:13,146 --> 00:02:16,866
So what that means is if you
use app A and switch to app B,


33
00:02:17,206 --> 00:02:18,456
both get the same home data.


34
00:02:19,276 --> 00:02:21,396
This is critical
for our customers


35
00:02:21,396 --> 00:02:23,666
because that delivers the
consistent user experience


36
00:02:23,666 --> 00:02:25,806
that we want them to have.


37
00:02:26,576 --> 00:02:30,716
If your accessory implements one
of the Apple-defined profiles,


38
00:02:31,526 --> 00:02:35,276
Siri works right out of the box.


39
00:02:35,446 --> 00:02:40,476
Yeah. And the HomeKit framework


40
00:02:40,606 --> 00:02:43,356
on iOS models a home
very naturally.


41
00:02:44,126 --> 00:02:48,856
So we have objects which
describe rooms, zones,


42
00:02:48,856 --> 00:02:51,206
which are a collection
of rooms, and of course,


43
00:02:51,206 --> 00:02:52,576
accesses that you can control.


44
00:02:54,156 --> 00:02:57,766
Now, none of this would
matter to our customers


45
00:02:58,016 --> 00:03:00,766
if their data is not
private or secure.


46
00:03:01,626 --> 00:03:05,806
HomeKit was designed
with privacy and security


47
00:03:05,806 --> 00:03:06,696
from the very beginning.


48
00:03:07,656 --> 00:03:10,066
All communication between iOS


49
00:03:10,376 --> 00:03:13,206
and the HomeKit accessories
is end-to-end encrypted,


50
00:03:13,916 --> 00:03:17,376
and we never use keys
across different sessions.


51
00:03:17,456 --> 00:03:21,816
So when you have a key, that key
cannot be used to dig up data


52
00:03:21,816 --> 00:03:23,686
in the past or in the future.


53
00:03:24,306 --> 00:03:28,956
And all home data is encrypted
on the device using keys


54
00:03:28,956 --> 00:03:30,196
that are local to that device.


55
00:03:30,586 --> 00:03:33,136
So your data is completely
private and secure.


56
00:03:34,416 --> 00:03:36,816
So that's HomeKit in iOS 8.


57
00:03:37,346 --> 00:03:39,496
So let's talk about what we
have in store for you today.


58
00:03:40,156 --> 00:03:44,886
I'm going to go over features
and enhancements for HomeKit


59
00:03:44,886 --> 00:03:48,956
in iOS 9, and Naveen
will go over updates


60
00:03:48,956 --> 00:03:51,246
in our accessories space.


61
00:03:53,176 --> 00:03:55,586
So let's get right to it.


62
00:03:58,496 --> 00:04:01,856
We've got some great
features for HomeKit in iOS 9,


63
00:04:02,656 --> 00:04:06,516
but we have also added
enhancements based on feedback


64
00:04:06,656 --> 00:04:08,846
that we have received from
developers in the past year.


65
00:04:09,536 --> 00:04:11,156
So please keep those
feedback coming.


66
00:04:11,336 --> 00:04:13,586
We absolutely love them.


67
00:04:13,806 --> 00:04:16,896
So let's begin with a
small change that we made


68
00:04:18,026 --> 00:04:20,486
but has a tremendous impact
on your daily development.


69
00:04:20,966 --> 00:04:25,216
Let's take an example
of a light in a bedroom


70
00:04:26,226 --> 00:04:28,626
and we move it to
the living room.


71
00:04:29,556 --> 00:04:33,036
In iOS 8, if your app
comes to the foreground,


72
00:04:33,686 --> 00:04:35,386
we would have notified your app


73
00:04:35,386 --> 00:04:39,366
of this change using home
manager did update homes


74
00:04:39,646 --> 00:04:40,446
delegate callback.


75
00:04:41,316 --> 00:04:43,866
Now, this tells you
something has changed


76
00:04:43,956 --> 00:04:46,896
but also gives you a new set of
objects that now you have to use


77
00:04:46,896 --> 00:04:49,916
and figure out what exactly
has changed in your home.


78
00:04:51,176 --> 00:04:56,986
We thought we should do better,
so in iOS 9, HomeKit is going


79
00:04:56,986 --> 00:04:59,886
to maintain your objects
and only update properties


80
00:04:59,886 --> 00:05:01,046
that have actually changed.


81
00:05:01,706 --> 00:05:03,196
[Applause] Thank you.


82
00:05:06,516 --> 00:05:09,566
So what that means is, in
our example, you're going


83
00:05:09,566 --> 00:05:10,746
to get a single delegate
callback:


84
00:05:10,946 --> 00:05:12,666
home did update room
[unintelligible].


85
00:05:12,716 --> 00:05:15,856
I think this is going to
simplify your code base


86
00:05:15,966 --> 00:05:18,356
and let you focus on your
features for your app.


87
00:05:19,316 --> 00:05:22,436
That's not the only
enhancement that we have added.


88
00:05:22,746 --> 00:05:25,346
Let's talk about another
one using an example.


89
00:05:26,266 --> 00:05:29,836
Let's say I have a living
room, and I have a photo


90
00:05:29,836 --> 00:05:32,676
of the living room that I
want to show in the app.


91
00:05:33,436 --> 00:05:35,946
So what that means is you
need to be able to associate


92
00:05:35,946 --> 00:05:39,876
and find a HomeKit
object representing a room


93
00:05:39,876 --> 00:05:43,036
across relaunches of your app.


94
00:05:43,306 --> 00:05:47,536
Now, a room in HomeKit
is represented using a


95
00:05:47,536 --> 00:05:48,486
HMRoom class.


96
00:05:49,346 --> 00:05:53,386
This has a name property,
and names are not immutable.


97
00:05:53,826 --> 00:05:55,806
So any HomeKit app
can change this.


98
00:05:56,966 --> 00:05:59,776
To solve our problem, we need
something more persistent.


99
00:06:00,536 --> 00:06:04,566
So in iOS 9, we are introducing
persistent identifiers


100
00:06:04,896 --> 00:06:07,716
across all relevant
HomeKit classes.


101
00:06:08,516 --> 00:06:11,436
[Applause]


102
00:06:11,936 --> 00:06:12,336
Thank you.


103
00:06:13,416 --> 00:06:15,976
So you are going to have a
unique identifier property


104
00:06:15,976 --> 00:06:18,116
on these classes.


105
00:06:18,986 --> 00:06:22,936
These are unique applications,
and now you can use this


106
00:06:23,056 --> 00:06:28,016
to associate context data
in your app and apply that


107
00:06:28,256 --> 00:06:29,956
and associate that with
the HomeKit object.


108
00:06:29,956 --> 00:06:36,506
Next I want to talk about
user management in iOS 8.


109
00:06:37,776 --> 00:06:43,356
Your app had the following three
APIs to let users manage people


110
00:06:43,356 --> 00:06:46,426
in their homes so they can
add users, remove users,


111
00:06:46,426 --> 00:06:48,406
and list users in their homes.


112
00:06:49,056 --> 00:06:53,946
In iOS 9, we are deprecating
these and replacing it


113
00:06:53,946 --> 00:06:57,976
with a much simpler API, manage
users with completion handler.


114
00:06:58,826 --> 00:07:03,266
So this API presents a full
view controller that is going


115
00:07:03,266 --> 00:07:06,176
to let users manage
people in their homes.


116
00:07:08,216 --> 00:07:11,976
Developers need to move
to this new API in iOS 9


117
00:07:12,356 --> 00:07:15,826
so that our customers can
get a much richer experience


118
00:07:16,376 --> 00:07:17,466
with respect to home sharing.


119
00:07:17,466 --> 00:07:22,986
I want to stay on a related
topic, user capabilities.


120
00:07:24,316 --> 00:07:27,066
When you share your
home with a user,


121
00:07:27,696 --> 00:07:30,546
they can control the
accessories in the home,


122
00:07:30,546 --> 00:07:33,286
but they cannot make any
configuration changes.


123
00:07:34,876 --> 00:07:40,066
For a good user experience, your
app needs to show capabilities


124
00:07:40,066 --> 00:07:41,816
that are only relevant
to that user.


125
00:07:43,006 --> 00:07:44,616
To achieve this, you now need


126
00:07:44,616 --> 00:07:46,716
to know the privilege
level of that user.


127
00:07:46,716 --> 00:07:49,316
So, for example, if they
are not an administrator,


128
00:07:50,226 --> 00:07:53,086
you should not let them
edit the name of a room.


129
00:07:53,086 --> 00:07:56,806
So we are going to give you
APIs to let you figure this out.


130
00:07:58,246 --> 00:08:02,156
So on HMHome, we are adding
a new property, current user.


131
00:08:02,886 --> 00:08:07,276
That represents the currently
signed-in user on that device.


132
00:08:07,856 --> 00:08:12,706
You can use this and pass along
to a new method on HMHome,


133
00:08:13,476 --> 00:08:15,236
home access control for user.


134
00:08:15,956 --> 00:08:19,486
That returns a HMHome
access control object,


135
00:08:20,266 --> 00:08:23,456
which encapsulates the
privileges of that user.


136
00:08:24,456 --> 00:08:25,786
Let's see what this
class looks like.


137
00:08:26,836 --> 00:08:29,706
It has an administrative
property that will be set


138
00:08:30,306 --> 00:08:31,596
if you are the administrator
of the home.


139
00:08:32,025 --> 00:08:34,936
So now you can update your
apps and use this property


140
00:08:35,346 --> 00:08:37,856
and share only relevant
features for that user.


141
00:08:38,326 --> 00:08:46,706
Moving on, let's talk about a
great feature in iOS 8, scenes.


142
00:08:47,716 --> 00:08:52,876
Now scenes allow our customers
to control multiple accesses


143
00:08:52,876 --> 00:08:53,776
with a single command.


144
00:08:54,256 --> 00:08:58,636
So I can have a good night
scene where it switches out all


145
00:08:58,636 --> 00:09:01,936
of the lights, secures my
home, and sets the temperature


146
00:09:01,936 --> 00:09:05,016
down to a comfortable level
with a single command.


147
00:09:05,826 --> 00:09:07,266
This is a very powerful feature.


148
00:09:07,886 --> 00:09:11,576
In iOS 9 we want our customers
to use this even more.


149
00:09:11,936 --> 00:09:15,476
To help this, we are
introducing predefined scenes.


150
00:09:16,816 --> 00:09:18,566
There are four common events


151
00:09:18,626 --> 00:09:20,696
that most people
experience every day.


152
00:09:20,696 --> 00:09:26,316
They are getting up, you
leave home, you return home,


153
00:09:27,076 --> 00:09:29,426
and then you go to bed.


154
00:09:29,606 --> 00:09:32,786
Now that you know what these
four predefined scenes mean,


155
00:09:32,786 --> 00:09:34,156
you can apply context to them.


156
00:09:35,276 --> 00:09:37,976
So in your app, you can
actually make suggestions


157
00:09:38,726 --> 00:09:42,706
to let customers configure
these four predefined scenes


158
00:09:43,156 --> 00:09:44,316
with meaningful actions.


159
00:09:45,566 --> 00:09:47,956
And to have a good
experience for our customers,


160
00:09:48,616 --> 00:09:51,956
predefined scenes cannot
be deleted from a home.


161
00:09:52,156 --> 00:09:55,446
Let's walk through the APIs.


162
00:09:55,636 --> 00:09:59,576
A scene in HomeKit is
represented using a HM action


163
00:09:59,576 --> 00:10:00,446
set object.


164
00:10:01,686 --> 00:10:04,266
We have added a new
property, action set type,


165
00:10:04,516 --> 00:10:06,606
that describes the kind of scene


166
00:10:06,606 --> 00:10:08,856
that you are working
with in your app.


167
00:10:10,436 --> 00:10:12,996
We have four constants
that correspond


168
00:10:12,996 --> 00:10:15,866
to the four predefined scenes
I talked about earlier.


169
00:10:16,956 --> 00:10:19,676
We also have a fifth type,
the user defined type,


170
00:10:19,676 --> 00:10:24,816
and this is set on the
scene that your app creates.


171
00:10:24,936 --> 00:10:28,556
How do I access these
predefined scenes in a home?


172
00:10:29,516 --> 00:10:31,996
They are automatically
populated for you as part


173
00:10:31,996 --> 00:10:35,316
of the action set property
on an HMHome class.


174
00:10:35,816 --> 00:10:39,076
But we also have
a convenience API,


175
00:10:39,966 --> 00:10:41,966
built-in action set of type.


176
00:10:42,466 --> 00:10:44,096
That takes the action set type


177
00:10:45,246 --> 00:10:50,846
and returns a HM action set
object that corresponds to one


178
00:10:50,846 --> 00:10:51,906
of your predefined scenes.


179
00:10:51,906 --> 00:10:56,286
So that's the APIs, but we want


180
00:10:56,286 --> 00:10:59,816
to make scenes even much
easier for our customers.


181
00:11:01,196 --> 00:11:08,246
So now Siri works even
better with scenes in iOS 9.


182
00:11:08,446 --> 00:11:11,406
Siri now recognizes
the names of all scenes


183
00:11:11,886 --> 00:11:13,786
and simply speaking the name


184
00:11:13,786 --> 00:11:15,926
of the scene will
actually execute it.


185
00:11:16,316 --> 00:11:19,096
This is a great way for our
customers to use scenes.


186
00:11:19,246 --> 00:11:26,436
Now let's talk about
the experience


187
00:11:27,226 --> 00:11:29,526
of adding an accessory
to your home.


188
00:11:29,786 --> 00:11:34,956
Let's say I have two accessories
from the same manufacturer,


189
00:11:35,386 --> 00:11:38,016
and they can have the name
of the manufacturer as part


190
00:11:38,016 --> 00:11:40,336
of the accessory's name
and a model number,


191
00:11:40,336 --> 00:11:44,146
and when I add this accessory
to the home, I can always look


192
00:11:44,146 --> 00:11:45,286
up the packaging and figuring


193
00:11:45,286 --> 00:11:48,146
out I am adding the
right device to my home.


194
00:11:49,666 --> 00:11:52,756
But a better user experience
for our customers is


195
00:11:52,756 --> 00:11:54,796
to give some kind of indication


196
00:11:54,796 --> 00:11:57,086
that provides more
information about the accessory.


197
00:11:58,256 --> 00:12:01,296
Let's say, for example, we
can give them visual clues,


198
00:12:02,136 --> 00:12:05,046
present an icon that
tells them the type


199
00:12:05,046 --> 00:12:09,906
of accessory they are adding
is a much better experience.


200
00:12:10,516 --> 00:12:11,656
To attain this feature,


201
00:12:11,876 --> 00:12:14,916
we are adding accessory
categories in iOS 9.


202
00:12:16,226 --> 00:12:17,786
This information is available


203
00:12:17,786 --> 00:12:21,246
to your app during
setup of that accessory.


204
00:12:21,676 --> 00:12:24,226
So when you browse and you
are finding these accessories,


205
00:12:24,226 --> 00:12:25,806
it is already available for you.


206
00:12:27,316 --> 00:12:31,286
And it specifies the primary
category of that accessory.


207
00:12:33,116 --> 00:12:36,916
Moving on to the APIs for this,
we are introducing a new class,


208
00:12:37,446 --> 00:12:39,036
HM accessory category.


209
00:12:39,606 --> 00:12:45,116
This has a property category
type that gives more information


210
00:12:45,116 --> 00:12:47,086
about that category,
so, in our example,


211
00:12:47,606 --> 00:12:49,346
you will have category
type light bulb


212
00:12:50,266 --> 00:12:53,046
and category type fan.


213
00:12:53,176 --> 00:12:56,766
And the way you access this
category is use the category


214
00:12:56,766 --> 00:12:58,726
property on an HM accessory.


215
00:12:59,006 --> 00:13:01,456
So this is available when you
browse for these accessories.


216
00:13:02,056 --> 00:13:06,086
So we recommend that you use
this new feature and enhance


217
00:13:06,116 --> 00:13:07,936
that user experience
for our customers during


218
00:13:07,936 --> 00:13:08,906
first-time setup.


219
00:13:08,906 --> 00:13:20,216
Now let's talk about
HomeKit and the Apple Watch.


220
00:13:21,161 --> 00:13:23,161
[Applause]


221
00:13:23,306 --> 00:13:28,036
Yeah. As announced
in Monday's keynote,


222
00:13:28,816 --> 00:13:31,036
HomeKit is now available
on Watch OS.


223
00:13:31,816 --> 00:13:33,816
Now, this means you can
now go out for a run


224
00:13:33,816 --> 00:13:37,346
without your iPhone, come back,
and if you have your watch


225
00:13:37,346 --> 00:13:38,996
with you, you will be able


226
00:13:38,996 --> 00:13:40,466
to unlock your door
and get back in.


227
00:13:41,106 --> 00:13:42,716
How cool is that?


228
00:13:43,516 --> 00:13:47,606
[Applause]


229
00:13:48,106 --> 00:13:52,486
All your home data is
mirrored from your iOS device


230
00:13:52,836 --> 00:13:55,756
onto the watch, so you can
make changes on your phone


231
00:13:55,916 --> 00:14:00,416
and they will automatically
synch to the watch.


232
00:14:00,586 --> 00:14:05,086
You can view homes from the
watch, control your accessories,


233
00:14:05,496 --> 00:14:07,126
and execute all your scenes.


234
00:14:08,476 --> 00:14:11,616
We cannot wait to see the
creative experience you are


235
00:14:11,616 --> 00:14:13,296
going to deliver
to our customers


236
00:14:13,666 --> 00:14:15,196
with HomeKit on the Apple Watch.


237
00:14:15,596 --> 00:14:23,776
Finally, I want to talk
about a new feature in iOS 9,


238
00:14:24,426 --> 00:14:26,586
and I am really excited about it


239
00:14:26,586 --> 00:14:27,986
because I spent a
lot of time on it.


240
00:14:31,296 --> 00:14:33,146
[Laughter] Let's
talk about triggers.


241
00:14:34,166 --> 00:14:38,216
Now, in iOS 8, we
have timer triggers,


242
00:14:38,246 --> 00:14:41,776
so that lets you execute scenes
that specify time of the day.


243
00:14:41,826 --> 00:14:47,776
I can have an evening scene that
executes at 7 p.m. every day.


244
00:14:48,966 --> 00:14:52,386
But what if I could do
something like this.


245
00:14:52,596 --> 00:14:55,186
I return home, I
unlock my front door,


246
00:14:55,966 --> 00:14:56,956
now that generates an event.


247
00:14:57,606 --> 00:15:00,536
Let's say it's before 6 p.m.


248
00:15:01,466 --> 00:15:03,286
and I have a motion
sensor that's right next


249
00:15:03,286 --> 00:15:03,906
to my front door.


250
00:15:04,796 --> 00:15:06,476
That gets activated
and detects motion.


251
00:15:07,196 --> 00:15:09,176
If I have an arrive home scene,


252
00:15:09,596 --> 00:15:11,556
I want that to be
automatically executed.


253
00:15:11,986 --> 00:15:14,226
And your home is ready
and welcoming you.


254
00:15:15,166 --> 00:15:16,456
I'm happy to say
you can now do this


255
00:15:16,456 --> 00:15:21,826
in iOS 9 with event triggers.


256
00:15:22,466 --> 00:15:24,466
One or more events
activate a trigger.


257
00:15:25,646 --> 00:15:27,426
Let's talk about what
kind of events we support.


258
00:15:27,676 --> 00:15:31,276
We have events corresponding
to the state of an accessory,


259
00:15:31,276 --> 00:15:34,626
so this would correspond to
our front door unlocking.


260
00:15:35,526 --> 00:15:38,126
And we also have
geofence-based events.


261
00:15:38,486 --> 00:15:40,896
So you can generate
events corresponding


262
00:15:40,896 --> 00:15:42,646
to when I leave home
or arrive home.


263
00:15:43,826 --> 00:15:50,626
Let's go through these and how
we represent them in the APIs.


264
00:15:50,816 --> 00:15:53,476
For the state of an
accessory, we have a new class,


265
00:15:53,776 --> 00:15:55,426
HM characteristic event,


266
00:15:56,466 --> 00:15:58,626
and that takes the
characteristic you want


267
00:15:58,626 --> 00:16:02,466
to be the source of that event
and a trigger value that,


268
00:16:02,646 --> 00:16:04,556
when that characteristic
meets that value,


269
00:16:04,966 --> 00:16:07,356
that event will automatically
be fired for you.


270
00:16:09,126 --> 00:16:14,796
For location-based events, we
have a HM location event class


271
00:16:14,906 --> 00:16:16,116
that takes a CLRegion.


272
00:16:16,516 --> 00:16:21,066
You can configure the CLRegion,
and when that criteria is met,


273
00:16:21,596 --> 00:16:24,136
the HM location event class
will automatically fire.


274
00:16:24,806 --> 00:16:29,556
Let's walk through an example
of our front door being unlocked


275
00:16:29,856 --> 00:16:31,716
and capture that as a
characteristic event.


276
00:16:32,726 --> 00:16:34,366
Here's how you do it.


277
00:16:35,536 --> 00:16:38,236
Create a HM characteristic
event class,


278
00:16:39,036 --> 00:16:42,196
give it the front door
current state characteristic


279
00:16:42,196 --> 00:16:43,866
as a characteristic that
you want to capture.


280
00:16:44,536 --> 00:16:48,046
And for the trigger value,
just specify door state open.


281
00:16:48,516 --> 00:16:51,406
Now this event would
be fired when it's part


282
00:16:51,406 --> 00:16:54,236
of an event trigger as soon
as your front door unlocks.


283
00:16:54,786 --> 00:16:57,636
I talked about conditions.


284
00:16:58,756 --> 00:17:03,576
Conditions get execution of
a scene in a given trigger.


285
00:17:04,406 --> 00:17:07,336
We support three types of
conditions: time-based,


286
00:17:08,026 --> 00:17:10,306
so I can have something
corresponding


287
00:17:10,306 --> 00:17:14,526
to before 6 p.m. We also support
the state of an accessory.


288
00:17:14,726 --> 00:17:17,386
This would be our motion
sensor detecting motion.


289
00:17:18,086 --> 00:17:20,836
Finally, we also have
significant events in a day,


290
00:17:21,425 --> 00:17:22,536
like sunrise and sunset.


291
00:17:23,066 --> 00:17:25,626
Let's go through
each one of these


292
00:17:25,626 --> 00:17:29,536
and see how we create
them in the APIs.


293
00:17:29,756 --> 00:17:33,086
Conditions are represented
as predicates,


294
00:17:33,196 --> 00:17:34,946
NS predicates, in the APIs.


295
00:17:35,696 --> 00:17:39,116
And we have convenience
measures for all of these.


296
00:17:39,266 --> 00:17:40,966
You don't have to
worry about them.


297
00:17:41,216 --> 00:17:43,976
It's very simple to create them.


298
00:17:44,086 --> 00:17:49,166
On an HMEventTrigger, class, we
have a class method predicate


299
00:17:49,256 --> 00:17:52,946
for evaluating trigger occurring
before date with components.


300
00:17:53,366 --> 00:17:55,706
That takes an NS dates component
that you can configure.


301
00:17:55,986 --> 00:17:57,896
And you can use this,
for example,


302
00:17:58,886 --> 00:18:01,056
to create the before
6 p.m. condition.


303
00:18:01,966 --> 00:18:04,586
We have one for after
date with components.


304
00:18:05,206 --> 00:18:07,926
We also have the third
one, which is predicate


305
00:18:07,926 --> 00:18:11,606
for evaluating trigger occurring
on date with components.


306
00:18:12,196 --> 00:18:13,206
This is really useful.


307
00:18:13,356 --> 00:18:15,046
You can use this to
create a condition


308
00:18:15,046 --> 00:18:18,046
for a specific day --
for example, Sundays.


309
00:18:18,046 --> 00:18:24,076
Let's walk through an example
of creating our condition


310
00:18:24,076 --> 00:18:28,906
for before 6 p.m. First, we
create an NS dates component


311
00:18:29,316 --> 00:18:34,386
and set the hour
property to 6 p.m. Next,


312
00:18:34,836 --> 00:18:37,966
we just use that NS dates
component and pass it along


313
00:18:37,966 --> 00:18:39,936
to a convenience API predicate


314
00:18:39,936 --> 00:18:43,626
for evaluating trigger occurring
before date with components,


315
00:18:43,996 --> 00:18:46,406
and that's going to give you
an NS predicate corresponding


316
00:18:46,406 --> 00:18:51,946
to before 6 p.m. Next,
the state of an accessory.


317
00:18:52,726 --> 00:18:58,486
So we also have a convenience
API on the HMEventTrigger class,


318
00:18:58,876 --> 00:19:03,616
namely predicate for evaluating
trigger with characteristic,


319
00:19:04,026 --> 00:19:07,216
that takes a characteristic
and a matching value that needs


320
00:19:07,216 --> 00:19:10,926
to be met for that condition
to be evaluated through.


321
00:19:11,856 --> 00:19:13,156
So for our motion sensor,


322
00:19:13,876 --> 00:19:16,796
here's how you would create
a condition corresponding it


323
00:19:17,236 --> 00:19:19,116
to being detecting motion.


324
00:19:19,616 --> 00:19:21,896
Just call the convenience API,


325
00:19:22,226 --> 00:19:26,396
specify the front door sensor
characteristic as a source


326
00:19:26,396 --> 00:19:28,486
of the characteristic, and
for the matching value,


327
00:19:28,776 --> 00:19:29,726
set it to true.


328
00:19:30,036 --> 00:19:31,966
This would mean motion
has been detected.


329
00:19:32,306 --> 00:19:34,946
It's as simple as that.


330
00:19:35,106 --> 00:19:37,386
Finally, significant
events in the day.


331
00:19:37,856 --> 00:19:39,956
We have two convenience
APIs for this:


332
00:19:41,576 --> 00:19:44,866
predicate for evaluating trigger
occurring before significant


333
00:19:44,866 --> 00:19:47,726
event, that takes an optional
applying offset parameter,


334
00:19:47,726 --> 00:19:49,166
which is an NS dates component.


335
00:19:49,656 --> 00:19:52,846
And the second one, as you
guessed it, is predicate


336
00:19:52,846 --> 00:19:56,126
for evaluating trigger occurring
after significant event.


337
00:19:57,136 --> 00:19:58,956
We have two constants defined


338
00:19:59,116 --> 00:20:02,596
for significant events:
sunrise and sunset.


339
00:20:02,596 --> 00:20:07,746
Let's walk through an
example for condition


340
00:20:07,746 --> 00:20:10,126
for our event trigger
that would correspond


341
00:20:10,126 --> 00:20:12,896
to 30 minutes before sunset.


342
00:20:13,906 --> 00:20:14,946
How do we go about doing that?


343
00:20:15,456 --> 00:20:18,226
You first create an
NS dates component


344
00:20:18,566 --> 00:20:22,276
and specify the minute
to negative 30.


345
00:20:22,406 --> 00:20:24,596
And now, just use
our convenience API,


346
00:20:25,056 --> 00:20:28,876
predicate for evaluating trigger
occurring before significant


347
00:20:28,876 --> 00:20:32,046
event, give it sunset as
the significant event,


348
00:20:32,556 --> 00:20:35,106
and give the offset that
we just created above.


349
00:20:35,736 --> 00:20:39,706
With this, we can now
gate execution of a scene


350
00:20:40,276 --> 00:20:45,326
if that event fires
after 5:30 p.m. As long


351
00:20:45,326 --> 00:20:47,686
as it's before 5:30 p.m., it
will always execute that scene.


352
00:20:49,036 --> 00:20:54,166
So now we have events that
can trigger our event trigger,


353
00:20:54,166 --> 00:20:56,376
and then we have conditions.


354
00:20:56,556 --> 00:20:57,496
How do we tie it all together?


355
00:20:58,996 --> 00:21:01,486
That's when you create
an HMEventTrigger class,


356
00:21:02,006 --> 00:21:04,226
and the method takes the name.


357
00:21:05,526 --> 00:21:09,716
You can give one or more
events that activate a trigger.


358
00:21:09,716 --> 00:21:11,396
Once a trigger is activated,


359
00:21:11,396 --> 00:21:13,476
we evaluate the corresponding
condition.


360
00:21:13,716 --> 00:21:16,836
The condition is optional, so if
you don't specify a condition,


361
00:21:18,246 --> 00:21:19,986
it just means we
assume it to be true,


362
00:21:19,986 --> 00:21:23,556
and we will always execute the
corresponding scene associated


363
00:21:23,556 --> 00:21:28,536
with that event trigger if any
one of your events activates.


364
00:21:29,946 --> 00:21:32,476
Now let's walk through
a completer example


365
00:21:32,476 --> 00:21:34,156
that I talked about earlier.


366
00:21:35,386 --> 00:21:38,616
We have created a characteristic
event corresponding


367
00:21:38,616 --> 00:21:40,246
to the front door being locked.


368
00:21:41,286 --> 00:21:43,796
We created our two conditions,
which is before 6 p.m.


369
00:21:44,496 --> 00:21:46,836
and the motion sensor
detecting motion.


370
00:21:47,836 --> 00:21:50,456
How do we tie it all together
and create our event trigger?


371
00:21:50,456 --> 00:21:54,116
First thing you need to do is
create a compound predicate


372
00:21:54,196 --> 00:21:56,626
because we want both
our conditions


373
00:21:57,456 --> 00:21:59,826
to be ended and evaluated.


374
00:21:59,826 --> 00:22:02,786
Both have to be true for
us to execute our scene.


375
00:22:03,736 --> 00:22:07,016
For that, just use NS compound
predicate and predicate


376
00:22:07,016 --> 00:22:09,916
with subpredicates, and
specify the two subpredicates


377
00:22:09,916 --> 00:22:10,886
that we just created earlier.


378
00:22:12,046 --> 00:22:16,346
Next, create an event trigger
object, give it a name,


379
00:22:16,346 --> 00:22:20,736
arrived home, and for the events
that can activate this trigger,


380
00:22:20,776 --> 00:22:22,896
just specify an area
of one element,


381
00:22:22,976 --> 00:22:26,576
which is a front door
characteristic that corresponds


382
00:22:26,576 --> 00:22:27,416
with it being unlocked.


383
00:22:27,766 --> 00:22:30,176
Finally, we just need


384
00:22:30,656 --> 00:22:34,586
to associate the arrive
home predefined scene


385
00:22:34,976 --> 00:22:35,776
to this event trigger.


386
00:22:36,456 --> 00:22:40,386
Use our convenience API on
our home, built-in action set


387
00:22:40,386 --> 00:22:44,396
of type, give it the
home arrival type


388
00:22:44,696 --> 00:22:46,876
that now returns your
predefined scene corresponding


389
00:22:46,876 --> 00:22:50,176
to arrived home, just add
that to the event trigger.


390
00:22:50,576 --> 00:22:52,376
It's as simple as that.


391
00:22:52,506 --> 00:22:55,756
Now I'd like to show a demo
of this example I just talked


392
00:22:55,756 --> 00:23:00,126
about using our HomeKit
Accessory Simulator


393
00:23:00,196 --> 00:23:03,846
and our HomeKit catalog
sample app,


394
00:23:04,996 --> 00:23:08,146
which has been completely
rewritten in Swift.


395
00:23:09,516 --> 00:23:15,116
[Applause]


396
00:23:15,616 --> 00:23:16,086
There you go.


397
00:23:16,086 --> 00:23:19,196
So over here we have our
HomeKit Accessory Simulator.


398
00:23:19,746 --> 00:23:22,366
This simulates HomeKit
accessories that are used


399
00:23:22,366 --> 00:23:25,766
by our developers to develop
their HomeKit applications.


400
00:23:26,026 --> 00:23:29,616
And over here we have our
HomeKit sample app that,


401
00:23:30,536 --> 00:23:33,436
you know, that you can use --


402
00:23:33,436 --> 00:23:35,706
that accesses all
our HomeKit APIs.


403
00:23:36,096 --> 00:23:38,006
I want to show you a
demo of event triggers.


404
00:23:38,826 --> 00:23:44,146
Now, you can see that I have
a door lock, a motion sensor,


405
00:23:44,236 --> 00:23:46,846
and a bridge with
two lights behind it


406
00:23:46,876 --> 00:23:48,346
in the HomeKit Accessory
Simulator.


407
00:23:48,346 --> 00:23:52,696
And I have added my
accessories to my home.


408
00:23:56,716 --> 00:24:01,826
So let's go down to the
scenes section of the app,


409
00:24:01,906 --> 00:24:05,846
and I have configured two of the
predefined scenes in this app.


410
00:24:06,716 --> 00:24:09,736
I have the "bye, house," that
corresponds to leaving home.


411
00:24:10,886 --> 00:24:11,976
Let's see what that looks like.


412
00:24:12,626 --> 00:24:15,616
That sets the light to black


413
00:24:15,616 --> 00:24:18,466
and switches off all
the power on our lights.


414
00:24:18,746 --> 00:24:20,766
I am going to go ahead and hit
cancel because I don't want


415
00:24:20,766 --> 00:24:23,956
to make changes on this, and
let's go down to the "hi,


416
00:24:23,956 --> 00:24:27,056
house," that corresponds
to arriving home,


417
00:24:27,526 --> 00:24:28,776
and let's see what
that looks like.


418
00:24:29,806 --> 00:24:35,176
Now, that sets the lights to
on and sets my stereo light


419
00:24:35,296 --> 00:24:37,376
to green and the
kitchen light to blue.


420
00:24:37,866 --> 00:24:41,126
Let's try to see
these two scenes


421
00:24:41,126 --> 00:24:42,716
in action and see what happens.


422
00:24:43,986 --> 00:24:45,576
So when I execute
the "bye, house,"


423
00:24:46,236 --> 00:24:48,066
it switches off the two lights.


424
00:24:48,576 --> 00:24:53,136
And when I execute the "hi,
house," which corresponds


425
00:24:53,136 --> 00:24:54,586
to arriving home, that switches


426
00:24:54,586 --> 00:24:56,456
on the two lights
behind the bridge.


427
00:24:58,236 --> 00:25:00,016
Now, let's simulate leaving home


428
00:25:00,686 --> 00:25:02,616
and now create our
event trigger.


429
00:25:03,036 --> 00:25:07,966
I am going to go down to the
trigger section of the app


430
00:25:09,206 --> 00:25:10,336
and select add trigger.


431
00:25:10,396 --> 00:25:12,766
You are presented
with three options.


432
00:25:13,006 --> 00:25:16,276
For our example, it's the
front door being unlocked,


433
00:25:16,486 --> 00:25:18,116
which is the source
of our trigger.


434
00:25:18,836 --> 00:25:20,736
That corresponds to a
characteristic, so I am going


435
00:25:20,736 --> 00:25:22,086
to go ahead and select
characteristic.


436
00:25:22,086 --> 00:25:25,526
I am going to give
it a name now.


437
00:25:31,576 --> 00:25:33,436
So this is the name
of my event trigger.


438
00:25:34,146 --> 00:25:35,206
And now let's go ahead


439
00:25:35,206 --> 00:25:37,636
and select the characteristic
corresponding


440
00:25:37,636 --> 00:25:39,346
to the front door
being unlocked.


441
00:25:39,346 --> 00:25:42,266
So let's go down to the
characteristics event


442
00:25:43,506 --> 00:25:44,636
of the app.


443
00:25:44,746 --> 00:25:46,576
So add a characteristic.


444
00:25:46,576 --> 00:25:52,326
And now go down to the front
lock and select unsecured.


445
00:25:52,656 --> 00:25:54,566
This will correspond to
the door being unlocked.


446
00:25:54,566 --> 00:26:00,176
I am going to go
back and hit done.


447
00:26:00,396 --> 00:26:03,486
So now I have captured my
front door being unlocked


448
00:26:03,486 --> 00:26:04,486
as a source of my trigger.


449
00:26:05,186 --> 00:26:07,006
Next, let's add our
two conditions.


450
00:26:07,916 --> 00:26:09,676
For that, let's go down
to the conditions section,


451
00:26:09,976 --> 00:26:14,016
add condition, and since we
are going to use before 6 p.m.,


452
00:26:14,016 --> 00:26:14,976
that would mean it's time.


453
00:26:15,706 --> 00:26:22,576
Go to the time section,
and we have two ways


454
00:26:22,576 --> 00:26:24,546
to add time-based conditions.


455
00:26:24,546 --> 00:26:27,196
One is, of course, the
significant events, sunrise


456
00:26:27,196 --> 00:26:30,866
and sunset, but I am just going
to use 6 p.m. at my example.


457
00:26:31,006 --> 00:26:34,866
And I want to select before.


458
00:26:34,866 --> 00:26:37,946
I am going to go
ahead and hit save.


459
00:26:38,996 --> 00:26:41,036
Now I have captured
my first condition.


460
00:26:41,796 --> 00:26:43,056
Now let's do the
second condition,


461
00:26:43,056 --> 00:26:45,236
which is the motion
sensor detecting motion.


462
00:26:45,436 --> 00:26:49,436
Go add my second condition.


463
00:26:49,436 --> 00:26:51,046
Now I am going to
select characteristic


464
00:26:51,326 --> 00:26:54,446
because this is an accessory,
which would mean I need


465
00:26:54,446 --> 00:26:57,016
to capture a characteristic
as a source of that condition.


466
00:26:57,376 --> 00:27:02,616
Select condition,
find my sensor,


467
00:27:04,016 --> 00:27:07,006
and set motion to be detected.


468
00:27:07,076 --> 00:27:10,526
I am going to go
back and hit done.


469
00:27:12,066 --> 00:27:12,416
So there you go.


470
00:27:12,416 --> 00:27:15,496
I have my event trigger, given
it a name, given it the source


471
00:27:15,496 --> 00:27:18,636
of my event, specified
my two conditions


472
00:27:18,636 --> 00:27:19,626
that both need to be met.


473
00:27:20,276 --> 00:27:21,096
I tie it all together,


474
00:27:21,096 --> 00:27:23,466
I just need to associate my
arrive home scene to this.


475
00:27:23,976 --> 00:27:27,186
Let's go down to
the scene section


476
00:27:27,716 --> 00:27:29,336
and just select "hi, house."


477
00:27:29,916 --> 00:27:32,986
And go ahead, hit done.


478
00:27:33,466 --> 00:27:35,416
Now that saves the
entire event trigger.


479
00:27:35,416 --> 00:27:38,686
Now, let's see this
event trigger in action.


480
00:27:39,886 --> 00:27:41,306
For that, first I
am going to go ahead


481
00:27:41,306 --> 00:27:43,196
and unlock my door
and see what happens.


482
00:27:43,786 --> 00:27:48,766
I have a view over here
that shows the door state


483
00:27:48,766 --> 00:27:50,576
and the motion sensor so
that it's easier for you


484
00:27:50,576 --> 00:27:52,266
to see what happens
behind the bridge.


485
00:27:52,266 --> 00:27:55,696
If I hit unsecured,
which corresponds


486
00:27:55,696 --> 00:27:57,146
to opening the door,
nothing happened.


487
00:27:57,146 --> 00:27:58,216
And why is that?


488
00:27:59,326 --> 00:28:02,156
The door opens, so that causes
the event to be activated.


489
00:28:02,156 --> 00:28:05,976
It is before 6 p.m. So one
of my conditions was met,


490
00:28:05,976 --> 00:28:09,336
but the second condition was
not met because, as you can see,


491
00:28:10,026 --> 00:28:11,586
motion detected is set to no.


492
00:28:12,186 --> 00:28:15,876
So this is working as expected.


493
00:28:15,876 --> 00:28:17,776
I don't expect my
scene to be executed.


494
00:28:18,346 --> 00:28:21,316
Now let's go ahead and close
the door and set the motion


495
00:28:21,856 --> 00:28:23,246
to detected and see
what happens.


496
00:28:23,276 --> 00:28:27,476
I am going to go ahead
and unlock the door.


497
00:28:28,356 --> 00:28:28,876
There you go.


498
00:28:30,156 --> 00:28:33,526
That switched on the lights and
executed my arrive home scene.


499
00:28:34,016 --> 00:28:34,956
How cool is that?


500
00:28:35,006 --> 00:28:38,976
This is an awesome feature,
and I work on this every day.


501
00:28:39,016 --> 00:28:41,016
[Laughter]


502
00:28:41,016 --> 00:28:45,000
[Applause]


503
00:28:45,436 --> 00:28:48,766
But what is really
exciting to see this work,


504
00:28:48,766 --> 00:28:51,596
when I see that light goes
on, it just gives you,


505
00:28:51,976 --> 00:28:53,846
you know, that happy feeling.


506
00:28:54,516 --> 00:28:57,036
[Laughter]


507
00:28:57,536 --> 00:29:01,716
For those of you who have
used the Accessory Simulator,


508
00:29:01,926 --> 00:29:04,826
you see there's a motion sensor.


509
00:29:05,396 --> 00:29:07,416
This is new in iOS 9.


510
00:29:08,036 --> 00:29:10,786
We have added new
categories of accessories.


511
00:29:11,586 --> 00:29:14,966
To talk about this and
new features we have added


512
00:29:14,966 --> 00:29:18,126
for our accessory classes,
I'd like to invite Naveen.


513
00:29:19,516 --> 00:29:25,516
[Applause]


514
00:29:26,016 --> 00:29:37,000
[ Background Sounds ]


515
00:29:38,196 --> 00:29:38,746
>> NAVEEN KOMMAREDDI:
Thank you, Anush.


516
00:29:41,096 --> 00:29:42,076
Good afternoon, everybody.


517
00:29:42,426 --> 00:29:44,356
I am Naveen Kommareddi,
and I am here to present


518
00:29:44,356 --> 00:29:48,976
to you even more features in
iOS 9 for HomeKit accessories.


519
00:29:49,576 --> 00:29:56,686
Starting with remote access and
new features and enhancements


520
00:29:56,686 --> 00:29:59,136
for Bluetooth Low Energy
HomeKit accessories


521
00:29:59,746 --> 00:30:02,196
and new accessory categories.


522
00:30:03,066 --> 00:30:05,836
So let's get started
with remote access.


523
00:30:06,926 --> 00:30:09,476
With remote access,
you'd be able


524
00:30:09,476 --> 00:30:11,746
to control your accessories even


525
00:30:11,746 --> 00:30:12,736
when you are away
from your house.


526
00:30:14,056 --> 00:30:16,716
So let's take an example
of a thermostat that works


527
00:30:16,716 --> 00:30:18,036
with HomeKit here in your house.


528
00:30:18,816 --> 00:30:20,456
You would be able to
securely connect to it.


529
00:30:20,646 --> 00:30:24,116
But what if you are
away from your house?


530
00:30:24,626 --> 00:30:26,446
How do you control
this thermostat?


531
00:30:26,446 --> 00:30:28,616
Say you want to come home,
but you want to set it


532
00:30:28,616 --> 00:30:30,456
to the temperature even
before you come home?


533
00:30:31,016 --> 00:30:32,216
How do you do that securely?


534
00:30:32,766 --> 00:30:35,366
Well, in iOS 8, remote
access is supported


535
00:30:35,556 --> 00:30:39,406
if you have an Apple
TV third generation.


536
00:30:40,136 --> 00:30:43,676
All you need to do is sign
in with the same Apple ID


537
00:30:43,886 --> 00:30:46,606
as the one you used
on your iOS device,


538
00:30:46,926 --> 00:30:51,206
and you'd have secure
access to your accessories.


539
00:30:52,436 --> 00:30:55,616
Now, this is great, but what
if you don't have an Apple TV?


540
00:30:56,366 --> 00:30:58,416
Because we know that
not every one


541
00:30:58,416 --> 00:31:03,006
of our customers may
have an Apple TV.


542
00:31:05,156 --> 00:31:09,476
[Laughter] So in iOS 9, I
am very excited to announce


543
00:31:10,446 --> 00:31:13,356
that we support HomeKit
accessory protocol,


544
00:31:13,356 --> 00:31:14,936
HAP, over iCloud.


545
00:31:15,516 --> 00:31:19,546
[Applause]


546
00:31:20,046 --> 00:31:20,306
Thank you.


547
00:31:21,536 --> 00:31:22,526
Yes, it is really exciting


548
00:31:22,526 --> 00:31:27,576
because what this means is you
can now control your accessories


549
00:31:27,576 --> 00:31:30,156
and get notifications from
them no matter where you are,


550
00:31:30,246 --> 00:31:32,226
and even if you don't
have an Apple TV.


551
00:31:33,316 --> 00:31:35,086
Let's pause to think
what this really means.


552
00:31:35,816 --> 00:31:38,516
To accessory manufacturers
who have thought


553
00:31:38,516 --> 00:31:42,446
about providing secure
and remote access


554
00:31:42,446 --> 00:31:45,786
to their accessories, you know
it's a hard problem to solve.


555
00:31:47,036 --> 00:31:50,916
We built and deployed a
dedicated iCloud service


556
00:31:51,556 --> 00:31:55,576
to securely relay HAP
messages between iOS devices


557
00:31:55,966 --> 00:31:58,976
and accessories, and we
scaled the infrastructure


558
00:31:58,976 --> 00:32:05,376
that runs the service to handle
billions of HAP messages.


559
00:32:05,466 --> 00:32:08,216
And we thought: How can
we make this better?


560
00:32:09,776 --> 00:32:13,896
So to use this service,
the accessory manufacturers


561
00:32:13,946 --> 00:32:18,056
and all our customers
will now get it for free.


562
00:32:20,151 --> 00:32:22,151
[Applause]


563
00:32:22,286 --> 00:32:23,376
Well, thanks.


564
00:32:25,296 --> 00:32:28,536
But most importantly,
privacy and security.


565
00:32:28,996 --> 00:32:33,796
The end-to-end connections
between iOS devices


566
00:32:34,206 --> 00:32:39,416
and accessories are HAP secure,
and privacy is maintained.


567
00:32:39,856 --> 00:32:43,946
Even Apple can't see the
content of the communication.


568
00:32:44,646 --> 00:32:46,586
This is extremely important.


569
00:32:48,176 --> 00:32:52,536
Now, with HAP support
over iCloud and Apple TV,


570
00:32:52,746 --> 00:32:55,696
our customers will now
have more ubiquitous access


571
00:32:56,026 --> 00:32:56,996
to their accessories.


572
00:32:57,476 --> 00:33:02,686
Now, moving on from remote
access to Bluetooth Low Energy.


573
00:33:03,306 --> 00:33:07,766
So we are working with
several of our partners


574
00:33:07,866 --> 00:33:10,166
to bring more Bluetooth
Low Energy accessories


575
00:33:10,246 --> 00:33:11,656
that that work with HomeKit.


576
00:33:12,606 --> 00:33:15,026
Let's say a Bluetooth door lock.


577
00:33:16,526 --> 00:33:21,976
Now, if you are within Bluetooth
LE range within this accessory,


578
00:33:22,036 --> 00:33:24,096
let's say a door lock,
say 20 to 30 feet,


579
00:33:24,406 --> 00:33:27,786
you can securely connect
to it and control it.


580
00:33:28,676 --> 00:33:31,526
But what if you are far
away, like in the corner


581
00:33:31,526 --> 00:33:32,786
of your house or
in the backyard?


582
00:33:33,716 --> 00:33:36,686
How do you securely connect to
this accessory and control it?


583
00:33:37,116 --> 00:33:41,246
Wouldn't it be great to have
a mechanism or a feature


584
00:33:41,246 --> 00:33:43,686
that would connect these
two endpoints together?


585
00:33:44,566 --> 00:33:46,716
Well, in iOS 9, you
can do exactly


586
00:33:46,716 --> 00:33:49,246
that with HAP secure tunneling.


587
00:33:49,886 --> 00:33:57,776
HAP secure tunneling enables an
intermediate device to associate


588
00:33:57,776 --> 00:34:04,296
over Bluetooth Low Energy
and expose it as an artifact


589
00:34:04,296 --> 00:34:08,976
over Wi-Fi to an iOS device.


590
00:34:09,856 --> 00:34:13,436
Now you have a device that
is a HomeKit accessory


591
00:34:14,466 --> 00:34:19,186
that provides range extension
with HAP secure tunnelling.


592
00:34:20,666 --> 00:34:25,846
So what's even better is this
range extender will also be able


593
00:34:25,846 --> 00:34:28,916
to provide remote access
to this Bluetooth accessory


594
00:34:28,916 --> 00:34:30,146
and any other Bluetooth
accessory


595
00:34:30,146 --> 00:34:31,056
that works with HomeKit.


596
00:34:32,556 --> 00:34:37,596
What this means is not only can
you reach your accessories no


597
00:34:37,596 --> 00:34:39,085
matter where they
are in the house,


598
00:34:39,085 --> 00:34:44,136
but you can also reach them
wherever you are, home or away.


599
00:34:44,315 --> 00:34:46,616
Ultimately, privacy
and security.


600
00:34:47,476 --> 00:34:48,666
The end-to-end connection


601
00:34:48,876 --> 00:34:51,896
through this intermediate
device is still HAP secure,


602
00:34:52,396 --> 00:34:54,176
and privacy is maintained


603
00:34:54,856 --> 00:34:56,896
because this intermediate
device, the range extender,


604
00:34:57,376 --> 00:34:59,806
cannot see the content
of the communication.


605
00:35:00,316 --> 00:35:02,696
We didn't stop there.


606
00:35:03,436 --> 00:35:05,716
We added several
more enhancements,


607
00:35:06,396 --> 00:35:08,316
starting with notifications.


608
00:35:08,856 --> 00:35:13,216
Your Bluetooth Low Energy
accessories now have full


609
00:35:13,316 --> 00:35:14,606
support for notifications,


610
00:35:15,646 --> 00:35:17,246
regardless of the
state of connectivity.


611
00:35:17,916 --> 00:35:19,896
So whether they are
disconnected or connected,


612
00:35:19,896 --> 00:35:23,336
they can send HAP notifications
to your iOS devices.


613
00:35:23,956 --> 00:35:24,656
Really useful.


614
00:35:26,116 --> 00:35:27,956
We also added support
for metadata.


615
00:35:29,436 --> 00:35:33,626
This way, custom characteristics
can describe themselves fully


616
00:35:34,136 --> 00:35:35,766
to HomeKit applications.


617
00:35:36,416 --> 00:35:40,706
And finally, we added support
for multiple transports.


618
00:35:41,566 --> 00:35:46,566
With this, you can now have a
HomeKit accessory that can work


619
00:35:46,566 --> 00:35:50,086
over IP or Bluetooth
LE simultaneously,


620
00:35:50,706 --> 00:35:53,796
and the iOS device will
be able to recognize


621
00:35:54,076 --> 00:35:57,626
that it's the same accessory
regardless of the transport


622
00:35:57,626 --> 00:36:00,616
that the accessory uses
to communicate with it.


623
00:36:00,796 --> 00:36:02,006
Really a compelling feature.


624
00:36:02,566 --> 00:36:08,696
Now, let's move on to the last
topic of our presentation,


625
00:36:09,256 --> 00:36:11,086
which is accessory categories.


626
00:36:11,976 --> 00:36:16,646
Last year with iOS 8, we added
support for several accessories


627
00:36:17,406 --> 00:36:21,016
that are most commonly found in
your house, like your lights,


628
00:36:21,066 --> 00:36:24,236
fans, switches, plugs,
garage doors, et cetera.


629
00:36:25,586 --> 00:36:27,256
Now, adding native support


630
00:36:27,256 --> 00:36:30,896
for accessory categories is an
evolutionary process in iOS,


631
00:36:31,696 --> 00:36:38,016
and in iOS 9, we added
support for more devices in iOS


632
00:36:38,016 --> 00:36:42,816
so that you can connect more
accessories in your house.


633
00:36:44,246 --> 00:36:46,196
Starting with window coverings.


634
00:36:46,196 --> 00:36:49,186
You can now use iOS to
control your awnings, blinds,


635
00:36:49,186 --> 00:36:52,746
and shades, and motorized
doors and windows.


636
00:36:54,056 --> 00:36:56,536
Alarm systems are
also a new category.


637
00:36:56,816 --> 00:36:59,406
Now, this is a category
that several --


638
00:36:59,406 --> 00:37:02,216
and alarm system and security
system providers have asked


639
00:37:02,886 --> 00:37:04,526
for native support, and
which listened to them.


640
00:37:04,936 --> 00:37:08,786
But we also found that alarm
systems can be really complex


641
00:37:09,146 --> 00:37:13,156
with a lot of features, but what
we did is to distill the key


642
00:37:13,156 --> 00:37:16,346
and the most used features
in an alarm system service.


643
00:37:16,796 --> 00:37:20,216
Now, you as an accessory
manufacturer will be able


644
00:37:20,216 --> 00:37:23,556
to add more features using
custom characteristics,


645
00:37:24,086 --> 00:37:25,176
of course.


646
00:37:25,276 --> 00:37:28,956
Alarm systems typically work
hand in hand with sensors,


647
00:37:29,326 --> 00:37:33,506
so we added support for several
sensor categories: motion,


648
00:37:33,506 --> 00:37:37,426
air quality, and smoke
being just a few of them.


649
00:37:37,516 --> 00:37:38,946
And last but not least --


650
00:37:38,946 --> 00:37:40,636
and this is a category I
am very excited about --


651
00:37:41,536 --> 00:37:43,026
is programmable switches.


652
00:37:43,796 --> 00:37:48,716
A programmable switch is a
HomeKit device whose main


653
00:37:48,716 --> 00:37:52,826
purpose is to generate events.


654
00:37:52,826 --> 00:37:56,616
iOS makes this accessory
compelling.


655
00:37:56,976 --> 00:37:58,126
So to understand this better,


656
00:37:58,256 --> 00:37:59,696
let me walk you through
an example.


657
00:37:59,696 --> 00:38:04,486
So let's say it's bedtime,
and you're in your bed,


658
00:38:05,396 --> 00:38:07,926
you stow away your
electronics, charging somewhere,


659
00:38:08,866 --> 00:38:11,416
but you don't know if
your house is secure.


660
00:38:11,896 --> 00:38:14,296
Your lights are probably off in
some far corner of the house.


661
00:38:15,356 --> 00:38:16,136
But fret not.


662
00:38:17,006 --> 00:38:20,706
You have this programmable
switch, nothing


663
00:38:20,706 --> 00:38:22,156
but a simple switch
with a button.


664
00:38:22,156 --> 00:38:24,306
Now, you press the button.


665
00:38:24,886 --> 00:38:25,886
It generates an event.


666
00:38:26,526 --> 00:38:29,786
And you know now in iOS 9
we support event triggers.


667
00:38:30,716 --> 00:38:36,676
So our users will be able to
map this event to a trigger,


668
00:38:37,696 --> 00:38:40,556
which will execute this
beautiful predefined good


669
00:38:40,556 --> 00:38:41,136
night scene.


670
00:38:42,616 --> 00:38:44,846
Now, iOS, wherever it is,
wherever the phone is,


671
00:38:44,926 --> 00:38:47,476
it will get this trigger and
execute all of it magically.


672
00:38:48,056 --> 00:38:49,226
Powerful but simple.


673
00:38:49,786 --> 00:38:55,456
Now, programmable switch and
all the other new accessory


674
00:38:55,456 --> 00:38:58,476
categories are available,
as Anush mentioned,


675
00:38:58,476 --> 00:39:01,096
in our updated version of the
HomeKit Accessory Simulator,


676
00:39:01,276 --> 00:39:05,226
so that you, as developers,
can develop apps


677
00:39:05,296 --> 00:39:06,716
to support these new categories.


678
00:39:07,916 --> 00:39:10,336
The HomeKit Accessory
Simulator is one


679
00:39:10,336 --> 00:39:13,606
of the several tools
available to you as developers


680
00:39:13,606 --> 00:39:14,836
and accessory manufacturers.


681
00:39:15,956 --> 00:39:18,276
We also have HomeKit
Accessory Tester,


682
00:39:18,686 --> 00:39:22,626
which is also being updated to
support many of the new features


683
00:39:23,156 --> 00:39:24,226
that we talked about today.


684
00:39:24,896 --> 00:39:29,246
Now let me talk a minute about
HomeKit Accessory Tester, HAT.


685
00:39:29,546 --> 00:39:31,986
We urge you, as accessory
manufacturers,


686
00:39:32,436 --> 00:39:36,526
to exclusively use HAT all
through your development cycle


687
00:39:36,926 --> 00:39:40,896
because this way you will ensure
that your accessory is compliant


688
00:39:41,306 --> 00:39:46,656
to HomeKit specifications
and also ensure


689
00:39:46,656 --> 00:39:50,626
that your accessories work with
past and future versions of iOS.


690
00:39:51,246 --> 00:39:53,566
Now, HAT also provides
the debug information


691
00:39:54,056 --> 00:39:56,756
that may not be available
to you when you use iOS,


692
00:39:57,416 --> 00:40:01,206
but the most important reason
is that we use HAT at Apple


693
00:40:01,366 --> 00:40:03,006
to certify your accessories.


694
00:40:03,506 --> 00:40:07,286
Now, HAT is also
one of the tools


695
00:40:07,676 --> 00:40:12,296
that is exclusively available to
members of Apple's MFi program.


696
00:40:13,296 --> 00:40:15,436
Now, if you are already
a member of this program,


697
00:40:16,046 --> 00:40:19,346
then you'd be able to get
updated specs and tools


698
00:40:19,626 --> 00:40:21,836
in the near future
at the MFi portal.


699
00:40:23,316 --> 00:40:25,346
If you are not a member
of the MFi program


700
00:40:26,296 --> 00:40:29,836
and you are making a HomeKit
accessory, you need to enroll


701
00:40:30,086 --> 00:40:30,936
so that you would be able


702
00:40:30,936 --> 00:40:33,206
to download the specifications
and tools.


703
00:40:33,686 --> 00:40:35,476
And here is a link
to get you started.


704
00:40:37,596 --> 00:40:42,166
Now, in summary, today you
learned about many new features,


705
00:40:42,166 --> 00:40:45,606
like HomeKit and Apple
Watch, event triggers,


706
00:40:46,036 --> 00:40:48,936
a new way of remote
access, and several features


707
00:40:48,936 --> 00:40:50,546
for Bluetooth Low
Energy accessories.


708
00:40:51,386 --> 00:40:54,126
We at Apple are really excited
about all these features,


709
00:40:54,396 --> 00:40:57,406
and we can't wait to see what
you are going to do with them.


710
00:40:58,446 --> 00:41:01,676
If you have any more questions,
any questions on HomeKit,


711
00:41:02,676 --> 00:41:04,546
here's where you can get
more information from.


712
00:41:05,686 --> 00:41:07,766
Thank you very much for
attending our session.


713
00:41:08,516 --> 00:41:12,500
[Applause]

