1
00:00:07,516 --> 00:00:17,500
[ Music ]


2
00:00:22,516 --> 00:00:26,986
[ Applause ]


3
00:00:27,486 --> 00:00:28,326
>> Good Morning.


4
00:00:28,506 --> 00:00:30,206
My name is David Duncan.


5
00:00:30,656 --> 00:00:33,446
And along with Kurt Revis
we'll be talking to you today


6
00:00:33,476 --> 00:00:35,596
about making your apps adaptive.


7
00:00:36,116 --> 00:00:41,296
So, in the first part,
you got to see the tools


8
00:00:41,366 --> 00:00:45,176
that Interface Builder has
added as well as the foundation


9
00:00:45,286 --> 00:00:47,856
on how you can do adaptively.


10
00:00:48,876 --> 00:00:50,876
But in this part, we're
going to talk to you more


11
00:00:50,876 --> 00:00:55,156
about techniques that you can
use to help make adaptive apps


12
00:00:56,236 --> 00:00:57,876
as well as code that
you can write


13
00:00:57,936 --> 00:01:01,136
to build your own experiences
while still remaining adaptive.


14
00:01:02,156 --> 00:01:04,006
So, let's look at
the agenda for today.


15
00:01:05,135 --> 00:01:06,416
The first thing we're
going to talk to you


16
00:01:06,416 --> 00:01:10,356
about is just some basics on
sizes and size classes just


17
00:01:10,356 --> 00:01:11,796
to refresh everyone's memory.


18
00:01:12,996 --> 00:01:16,806
In addition, we're going to talk
about things that already exist


19
00:01:16,806 --> 00:01:19,986
in UIKit in the Tools
that can help you along


20
00:01:19,986 --> 00:01:24,106
with Interface Builder and so
you get the most out of UIKit.


21
00:01:25,106 --> 00:01:28,166
And finally, Kurt's going
to come up and talk to you


22
00:01:28,166 --> 00:01:31,306
about how you can go
beyond size classes


23
00:01:31,306 --> 00:01:32,766
to build your experiences.


24
00:01:33,356 --> 00:01:35,176
And so with that,
let's begin with sizes.


25
00:01:37,036 --> 00:01:39,086
So, sizes.


26
00:01:39,656 --> 00:01:41,956
If we go ahead and
bring all of our devices


27
00:01:41,956 --> 00:01:44,876
and their orientations and
their adaptations up on screen,


28
00:01:44,876 --> 00:01:47,816
that's pretty
complicated-looking set


29
00:01:47,816 --> 00:01:48,146
of things.


30
00:01:48,666 --> 00:01:51,606
I don't think anyone wants
to put all of those up,


31
00:01:51,606 --> 00:01:53,806
figure out what their layouts
look like and make that work.


32
00:01:53,936 --> 00:01:55,666
So let's see if we
can draw a diagram


33
00:01:55,806 --> 00:02:01,056
to simplify what all
of this looks like.


34
00:02:01,056 --> 00:02:04,046
Well, that's still
pretty complicated.


35
00:02:04,136 --> 00:02:05,096
And I don't want you to read


36
00:02:05,096 --> 00:02:06,506
that because there's a
lot of text in there.


37
00:02:06,506 --> 00:02:07,506
And it's really hard to read.


38
00:02:07,566 --> 00:02:10,306
So let's see if we can
get rid of all that text


39
00:02:10,306 --> 00:02:11,656
and color and make it simpler.


40
00:02:11,656 --> 00:02:13,276
And it's not really helping.


41
00:02:13,446 --> 00:02:15,146
So, what else can we do?


42
00:02:16,036 --> 00:02:17,436
Well, when we thought about this


43
00:02:17,436 --> 00:02:21,946
in UIKit we thought what
are some good places


44
00:02:22,136 --> 00:02:23,636
that we can divide this space


45
00:02:23,636 --> 00:02:26,846
up to create good
experiences for users?


46
00:02:28,036 --> 00:02:30,696
And as you might have guessed
already, what we're talking


47
00:02:30,696 --> 00:02:32,236
about are size classes.


48
00:02:33,006 --> 00:02:36,386
We split the grid
up and we split it


49
00:02:36,386 --> 00:02:38,616
up into the compact
width and regular width,


50
00:02:38,736 --> 00:02:40,046
compact height and
regular height.


51
00:02:40,776 --> 00:02:42,816
And what we decided
was that when you're


52
00:02:42,816 --> 00:02:46,346
in the compact space, you have
a more iPhone-like experience


53
00:02:46,346 --> 00:02:48,056
where you try and make
the best use of space.


54
00:02:48,806 --> 00:02:51,946
But in the regular
experiences, you want to be able


55
00:02:51,946 --> 00:02:54,576
to do more advanced things,
more interesting things


56
00:02:54,576 --> 00:02:57,086
with that space that really
takes advantage of it.


57
00:02:58,076 --> 00:03:00,496
And so that take
away from that is


58
00:03:00,496 --> 00:03:04,506
that when you see a regular size
class, that's your opportunity


59
00:03:04,506 --> 00:03:07,076
to make a really great
experience for the user


60
00:03:07,226 --> 00:03:09,976
with that space, going
beyond what you might do


61
00:03:10,176 --> 00:03:11,306
in a compact space.


62
00:03:12,366 --> 00:03:14,686
So, let's take a look at
what UIKit already does


63
00:03:14,686 --> 00:03:18,156
for you based on size class.


64
00:03:18,316 --> 00:03:20,986
Most views and controls
don't actually change.


65
00:03:21,766 --> 00:03:23,376
So, you take a look
at that switch.


66
00:03:23,376 --> 00:03:25,546
It's the same whether you're
in compact or regular.


67
00:03:25,906 --> 00:03:27,486
That nav bar is also
the same whether you're


68
00:03:27,486 --> 00:03:28,506
in compact or regular.


69
00:03:29,006 --> 00:03:30,486
But what things do change?


70
00:03:31,756 --> 00:03:33,426
Well, here's a presentation.


71
00:03:33,826 --> 00:03:35,486
It looks like it's a
full screen presentation.


72
00:03:35,486 --> 00:03:37,736
It's on a iPhone 6s Plus.


73
00:03:37,866 --> 00:03:40,076
But, if we rotate
and put the device


74
00:03:40,076 --> 00:03:42,136
in compact, we see a form sheet.


75
00:03:42,796 --> 00:03:45,386
And so one thing you see
is that in presentations,


76
00:03:45,436 --> 00:03:47,496
if you do a form
sheet presentation


77
00:03:47,496 --> 00:03:51,346
in regular size class, if you
move to a compact size class,


78
00:03:51,596 --> 00:03:52,966
we don't have enough
room for it.


79
00:03:52,966 --> 00:03:55,406
And so we change that to a
full screen presentation.


80
00:03:56,736 --> 00:03:58,896
Now, the thing in UIKit


81
00:03:58,896 --> 00:04:01,326
that does most complicated
adaptations based


82
00:04:01,326 --> 00:04:03,216
on size classes and
space available


83
00:04:03,616 --> 00:04:05,166
is UISplitViewController.


84
00:04:05,776 --> 00:04:07,246
Again, we're looking


85
00:04:07,246 --> 00:04:10,926
at a compact width experience
on an iPhone 6s Plus.


86
00:04:11,416 --> 00:04:14,186
And you see that, as you might
have typically experienced,


87
00:04:14,186 --> 00:04:15,806
you just got a navigation
controller


88
00:04:15,846 --> 00:04:17,226
where we push and pop things.


89
00:04:17,755 --> 00:04:20,625
But again, if we rotate
and go into compact width,


90
00:04:21,125 --> 00:04:22,256
we bring in the sidebar.


91
00:04:22,686 --> 00:04:26,796
And we think that on an iPhone
6s Plus with all of that room


92
00:04:26,796 --> 00:04:28,596
in regular width that having


93
00:04:28,596 --> 00:04:32,546
that side bar is a better
user experience than not.


94
00:04:33,056 --> 00:04:36,736
Even though we only have
so much room for it.


95
00:04:37,266 --> 00:04:41,116
Similarly on iPad, the 9.7
inch iPad in landscape,


96
00:04:41,586 --> 00:04:45,136
you can see that we keep that
sidebar up as well, allowing you


97
00:04:45,136 --> 00:04:47,136
to easily switch
between mail messages.


98
00:04:47,886 --> 00:04:49,836
But what do we do when
you rotate to portrait?


99
00:04:50,776 --> 00:04:53,396
Remember, on an iPad,
it's still regular width.


100
00:04:53,556 --> 00:04:57,606
But we've decided that on iPad
you typically have content


101
00:04:57,826 --> 00:05:01,386
that is much larger, much more
interesting, images inline


102
00:05:01,386 --> 00:05:04,096
and so forth, and you
need that extra space


103
00:05:04,196 --> 00:05:07,306
so that you can still
interface with your content.


104
00:05:08,126 --> 00:05:11,556
However, we allow you
to slide in the sidebar


105
00:05:11,556 --> 00:05:14,696
so you can still easily
switch between email messages.


106
00:05:15,476 --> 00:05:20,386
And so those are some things
that we do in UIKit in order


107
00:05:20,536 --> 00:05:24,556
to give you the best experience
based off both size classes


108
00:05:24,686 --> 00:05:26,546
and the actual amount
of space available.


109
00:05:27,626 --> 00:05:29,696
And in order to take
advantage of that,


110
00:05:29,696 --> 00:05:31,846
let's look at some
best practices in UIKit


111
00:05:31,846 --> 00:05:35,926
to make the most out
of what you have.


112
00:05:36,636 --> 00:05:40,586
So, we're going to speak to some
things in Xcode Tools in UIKit.


113
00:05:41,066 --> 00:05:44,986
And in the first part, you saw
Interface Builder's enhancements


114
00:05:45,036 --> 00:05:46,716
to building adaptive
applications.


115
00:05:47,286 --> 00:05:50,216
Being able to easily make
adjustments based on size class


116
00:05:50,296 --> 00:05:51,666
in gamut and other traits.


117
00:05:52,626 --> 00:05:55,836
But, Xcode also provides
Asset Catalogs.


118
00:05:55,836 --> 00:05:57,216
And Asset Catalogs are great,


119
00:05:57,336 --> 00:06:01,366
not just for organizing your
images, but also specifying when


120
00:06:01,366 --> 00:06:02,666
and how they should be used.


121
00:06:03,966 --> 00:06:06,466
And of course, UIKit
has lots of technologies


122
00:06:06,686 --> 00:06:08,726
that make building
adaptive apps easier.


123
00:06:09,616 --> 00:06:11,766
We've been talking about
Auto Layout for many years.


124
00:06:11,766 --> 00:06:14,146
There are many sessions
on it if you should,


125
00:06:14,146 --> 00:06:15,176
you should go review those.


126
00:06:15,546 --> 00:06:17,206
And of course, there's
a session later today


127
00:06:17,306 --> 00:06:18,486
on New Things in Auto Layout.


128
00:06:19,776 --> 00:06:21,606
And trait collections
were reviewed


129
00:06:21,606 --> 00:06:22,696
in the first half as well.


130
00:06:23,776 --> 00:06:26,166
But other things
are Dynamic Type,


131
00:06:26,576 --> 00:06:29,766
which allows your application
to adapt to the font size


132
00:06:29,946 --> 00:06:31,166
that users want to use.


133
00:06:32,516 --> 00:06:34,766
Layout Guides are a great way


134
00:06:34,766 --> 00:06:37,316
to pass Auto Layout
information down the hierarchy.


135
00:06:37,506 --> 00:06:39,046
And we're going to discuss
some of the layout guides


136
00:06:39,046 --> 00:06:40,556
that UIKit provides by default.


137
00:06:41,886 --> 00:06:44,606
And finally, UIAppearance
is a great way


138
00:06:44,606 --> 00:06:48,466
to declaratively specify how
you want your applications,


139
00:06:48,466 --> 00:06:49,856
controls and views to look.


140
00:06:50,876 --> 00:06:53,246
So let's go ahead and
start with Asset Catalogs.


141
00:06:53,496 --> 00:06:59,546
Asset catalogs allow you to
adapt images automatically based


142
00:06:59,546 --> 00:07:02,016
on the trait environment
that they're displayed in.


143
00:07:02,956 --> 00:07:04,386
And here's a small
example of it.


144
00:07:05,026 --> 00:07:07,426
So we've got our picture
of baby Sophia here.


145
00:07:07,616 --> 00:07:11,226
And we have 1, 2 and 3x
versions of that image.


146
00:07:11,226 --> 00:07:16,546
So that whether you're on an
iPad 2 or an iPhone 6s Plus,


147
00:07:16,816 --> 00:07:18,936
you can get the best
possible image


148
00:07:18,936 --> 00:07:20,726
for the resolution
of the device.


149
00:07:21,916 --> 00:07:23,716
But another advantage of it is


150
00:07:23,716 --> 00:07:27,166
that Asset Catalogs lets you
design for application thinning.


151
00:07:27,166 --> 00:07:31,126
And what that means is is that
if I deploy this application


152
00:07:31,406 --> 00:07:35,036
to an iPhone 6s, which is
a 2x device, I don't have


153
00:07:35,036 --> 00:07:37,506
to pay the space penalty
for carrying those 1


154
00:07:37,506 --> 00:07:38,846
and 3x images as well.


155
00:07:39,716 --> 00:07:43,316
Similarly, we'll also trim
based on size classes in Gamut


156
00:07:43,316 --> 00:07:44,286
and a few other things.


157
00:07:44,486 --> 00:07:46,466
So, use the Asset Catalogs


158
00:07:46,466 --> 00:07:49,036
and you can make the best
specification for your images


159
00:07:49,296 --> 00:07:50,776
and carry the least
amount with you


160
00:07:50,776 --> 00:07:52,486
when you actually
deploy to user's devices.


161
00:07:52,966 --> 00:07:57,896
Other things that Asset Catalogs
provide are pieces of metadata


162
00:07:57,896 --> 00:08:00,636
that you can attach to your
image for various purposes.


163
00:08:00,966 --> 00:08:03,436
And the first one we're going
to discuss are alignment insets.


164
00:08:03,926 --> 00:08:05,426
So let's bring baby
Sophia back here.


165
00:08:06,266 --> 00:08:08,116
And let's say that we
have an application


166
00:08:08,176 --> 00:08:10,196
where sometimes we actually want


167
00:08:10,196 --> 00:08:12,016
to crop this image
to a square crop.


168
00:08:12,796 --> 00:08:15,416
And if we just naively pick
the center part of the image,


169
00:08:15,416 --> 00:08:16,816
we'd miss most of her face.


170
00:08:17,086 --> 00:08:20,646
We really do want that square
that frames her face well.


171
00:08:21,796 --> 00:08:23,446
Now, what are you going to do?


172
00:08:23,496 --> 00:08:25,926
Well, you're going to bring in
some measurements and figure


173
00:08:25,926 --> 00:08:28,056
out how far are you away
from all of the edges?


174
00:08:28,976 --> 00:08:32,006
But, instead of having to put
it in code and associate it


175
00:08:32,006 --> 00:08:36,035
with assets, you can do that
directly in the Asset Catalog.


176
00:08:36,666 --> 00:08:38,775
And UIImage will vend
those values back


177
00:08:38,895 --> 00:08:40,265
to you whenever you need them.


178
00:08:40,666 --> 00:08:42,866
And similarly, of course, you
can create images with them.


179
00:08:43,275 --> 00:08:44,196
But being able to put them


180
00:08:44,196 --> 00:08:45,656
in the Asset Catalog
means you don't have


181
00:08:45,656 --> 00:08:48,496
to have a giant table
associating resource names


182
00:08:48,836 --> 00:08:49,496
with metadata.


183
00:08:50,856 --> 00:08:54,366
Similarly, let's say that you
have some kind of background


184
00:08:54,366 --> 00:08:57,826
for a table view or what have
you that you need to be able


185
00:08:57,826 --> 00:09:01,206
to resize to adapt to whatever
size it's actually displayed at.


186
00:09:01,816 --> 00:09:06,036
Well, you can create a nine-part
image, creating slicing edges,


187
00:09:06,516 --> 00:09:08,866
and store those in your
Asset Catalog as well.


188
00:09:09,506 --> 00:09:12,136
And then, when that image
gets sized to its final state,


189
00:09:13,206 --> 00:09:15,236
it resizes nicely
without having carry


190
00:09:15,236 --> 00:09:18,056
around large images
specifically for the sizes


191
00:09:18,056 --> 00:09:18,906
that you're working with.


192
00:09:20,316 --> 00:09:22,536
And so, that's for
Asset Catalogs.


193
00:09:22,576 --> 00:09:24,776
Let's talk about other
adaptations that you'll want


194
00:09:24,776 --> 00:09:27,306
to make for your
application with Dynamic Type.


195
00:09:28,706 --> 00:09:29,796
We love Dynamic Type.


196
00:09:30,506 --> 00:09:33,216
It gives our users the
ability to specify font sizes,


197
00:09:33,386 --> 00:09:36,456
and especially for our users
that need a little extra help


198
00:09:36,456 --> 00:09:39,026
with vision, they can
specify really large sizes


199
00:09:39,026 --> 00:09:41,066
that allow them to
easily read text.


200
00:09:41,856 --> 00:09:45,006
And so this year, we've
made it even easier for you


201
00:09:45,006 --> 00:09:47,296
to adopt Dynamic Type
in your application.


202
00:09:47,846 --> 00:09:49,246
And we've done this in two ways.


203
00:09:49,886 --> 00:09:52,516
The first, we made it part
of the trait environment.


204
00:09:52,726 --> 00:09:55,976
So you don't have to listen
for a notification anymore.


205
00:09:56,256 --> 00:09:58,566
It's just right there for
your custom text views


206
00:09:58,566 --> 00:10:00,246
to take advantage
of if you need it.


207
00:10:00,426 --> 00:10:03,246
But we figured you
shouldn't have to do


208
00:10:03,246 --> 00:10:05,446
that for regular text
views, for labels,


209
00:10:05,486 --> 00:10:07,046
text fields and text views.


210
00:10:08,026 --> 00:10:10,216
So we've made those
really easy to do.


211
00:10:10,616 --> 00:10:13,786
All you have to do is assign
the font with the style


212
00:10:13,786 --> 00:10:17,086
that you want and set the
flag that adjusts the font


213
00:10:17,086 --> 00:10:18,486
for the content size category.


214
00:10:18,936 --> 00:10:21,236
All your labels, your text
fields, your text views,


215
00:10:21,436 --> 00:10:24,116
they'll automatically adapt to
the current Dynamic Type size


216
00:10:24,116 --> 00:10:25,546
and you don't have
to do anything.


217
00:10:27,516 --> 00:10:31,506
[ Applause ]


218
00:10:32,006 --> 00:10:33,726
So of course, if
you're to adopt this,


219
00:10:33,726 --> 00:10:36,226
be certain to test
your application


220
00:10:36,226 --> 00:10:37,636
in all the Dynamic Type sizes.


221
00:10:37,636 --> 00:10:39,716
As I mentioned, there's
some really large ones.


222
00:10:40,196 --> 00:10:42,686
The Accessibility Inspector
on your Mac can connect


223
00:10:42,686 --> 00:10:45,516
to your application and allow
you to toggle back dynamically


224
00:10:45,516 --> 00:10:47,246
without having to go back
and forth between settings.


225
00:10:48,096 --> 00:10:50,916
And if you're displaying these
in table or collection views,


226
00:10:51,066 --> 00:10:52,766
you'll want to review
the "What's New


227
00:10:52,766 --> 00:10:54,596
in Collection View" session,


228
00:10:54,916 --> 00:10:57,336
because there's some really
great information on performance


229
00:10:57,336 --> 00:10:59,656
and behavior enhancements
in collection view


230
00:10:59,866 --> 00:11:01,956
that you can take advantage
to make this really great.


231
00:11:03,476 --> 00:11:05,936
And so, let's talk
about Layout Guides.


232
00:11:07,056 --> 00:11:10,076
And UIView provides
two layout guides,


233
00:11:10,646 --> 00:11:13,066
a Margin Guide the
Readable Content Guide.


234
00:11:13,066 --> 00:11:14,326
And we'll go through
those in turn.


235
00:11:15,156 --> 00:11:17,256
Both of these start
out with a view.


236
00:11:18,126 --> 00:11:19,576
Whatever content you
happen to have it in.


237
00:11:20,346 --> 00:11:24,136
The Layout Margins
Guide is defined in part


238
00:11:24,376 --> 00:11:27,556
by a property UIView that
is the layout margins,


239
00:11:28,026 --> 00:11:29,986
which defines insets
on all sides.


240
00:11:31,156 --> 00:11:33,606
And so, how do we then
create a layout guide?


241
00:11:33,956 --> 00:11:37,686
Well, that's just a rec
specified in terms of that view.


242
00:11:38,436 --> 00:11:40,666
And that Layout Margin
Guide, of course,


243
00:11:40,666 --> 00:11:42,966
provides auto layout
objects for you


244
00:11:42,966 --> 00:11:44,646
to generate your
own constraints on.


245
00:11:45,256 --> 00:11:49,226
Simple. So, what's the
Readable Content Guide


246
00:11:49,226 --> 00:11:50,206
in relation to this?


247
00:11:51,436 --> 00:11:55,696
The Readable Content Guide
is a guide that provides you


248
00:11:55,696 --> 00:11:57,706
with information on
how to layout text


249
00:11:57,706 --> 00:12:00,336
so that it has a nice,
readable line length.


250
00:12:00,456 --> 00:12:04,776
If you're on one of the
new 12.9 inch iPad Pros,


251
00:12:05,086 --> 00:12:08,186
you can layout text from side
to side and your users will kind


252
00:12:08,186 --> 00:12:09,766
of being turning their
heads as they're reading it.


253
00:12:10,556 --> 00:12:11,666
So, the first thing we want


254
00:12:11,666 --> 00:12:15,466
to calculate is what is the
ideal width for a line of text?


255
00:12:16,526 --> 00:12:18,116
And then, of course,
we don't want the text


256
00:12:18,116 --> 00:12:19,246
to flow outside of the margins.


257
00:12:19,306 --> 00:12:21,476
So we bring in that
margins guide


258
00:12:21,476 --> 00:12:22,966
as part of our calculation.


259
00:12:23,516 --> 00:12:24,846
And we combine these two


260
00:12:24,846 --> 00:12:27,786
to finally form the
readable content guide,


261
00:12:28,186 --> 00:12:30,496
another layout guide
within your UIView


262
00:12:30,886 --> 00:12:32,266
that you can lay
out text within.


263
00:12:32,736 --> 00:12:35,966
Now, the Readable
Content Guide is based


264
00:12:35,966 --> 00:12:37,166
on the dynamic text size.


265
00:12:37,736 --> 00:12:39,636
So, what happens
when that changes?


266
00:12:40,136 --> 00:12:42,426
Well, we increase
the dynamic type size


267
00:12:42,426 --> 00:12:43,996
and the ideal width increases.


268
00:12:44,546 --> 00:12:47,446
And as you can see, because the
readable content guide is based


269
00:12:47,536 --> 00:12:48,996
inside of the layout margins,


270
00:12:49,466 --> 00:12:52,316
the guide doesn't necessarily
extend past those margins.


271
00:12:52,316 --> 00:12:54,146
And then you can
lay out your text


272
00:12:54,476 --> 00:12:56,016
and get a nice readable length


273
00:12:56,016 --> 00:12:58,666
of text that's inside
of your view.


274
00:12:59,996 --> 00:13:02,586
And so with that, let's
talk about UIAppearance.


275
00:13:04,126 --> 00:13:06,966
UIAppearance, if you haven't
used it, is a declarative way


276
00:13:07,286 --> 00:13:10,436
for you to specify what your
application should look like.


277
00:13:11,046 --> 00:13:11,846
And what does that mean?


278
00:13:12,736 --> 00:13:15,376
Well, that means that
instead of writing code


279
00:13:15,436 --> 00:13:18,396
when you see a new tab bar,
for example, you write this:


280
00:13:19,156 --> 00:13:21,286
You say, for all of my tab bars,


281
00:13:21,726 --> 00:13:25,196
the appearance should have the
unselected tint color is blue.


282
00:13:25,816 --> 00:13:26,476
Really simple.


283
00:13:26,716 --> 00:13:28,456
And that any time
you create a tab bar,


284
00:13:28,896 --> 00:13:30,106
unselected items
are colored blue.


285
00:13:31,206 --> 00:13:32,506
But it's also contextual.


286
00:13:33,006 --> 00:13:35,596
And that means that
you can specify based


287
00:13:35,596 --> 00:13:40,496
on trait collections or based on
the containment of those views.


288
00:13:40,646 --> 00:13:43,896
And what does that look like?


289
00:13:43,896 --> 00:13:44,836
Let's take a look.


290
00:13:45,506 --> 00:13:48,766
So, here we have our
little application.


291
00:13:49,306 --> 00:13:53,286
And as is the style, we want
to have a giant header image


292
00:13:53,286 --> 00:13:56,016
at the top when we're in
regular vertical height.


293
00:13:56,016 --> 00:13:56,986
And we're going to have


294
00:13:56,986 --> 00:13:59,486
that image just replace
the nav bar's background.


295
00:14:00,226 --> 00:14:02,476
However, when we're in
compact vertical height,


296
00:14:02,476 --> 00:14:04,866
we're going to have a
side-by-side layout.


297
00:14:04,866 --> 00:14:06,656
And the image is not going
to necessarily extend


298
00:14:06,656 --> 00:14:07,656
to the navigation bar.


299
00:14:07,656 --> 00:14:10,546
So we want it to use
its default background.


300
00:14:11,046 --> 00:14:12,786
So let's do the default
background first.


301
00:14:13,836 --> 00:14:17,526
We create a TraitCollection
for verticalSizeClassCompact.


302
00:14:18,836 --> 00:14:21,096
We grab the navigation
bar's appearance


303
00:14:21,096 --> 00:14:22,236
for that TraitCollection.


304
00:14:23,476 --> 00:14:25,266
And we say we don't want


305
00:14:25,266 --> 00:14:27,676
to use any background
image for that appearance.


306
00:14:27,966 --> 00:14:29,986
And that will cause the
navigation bar to fall back


307
00:14:29,986 --> 00:14:31,446
to using its default appearance.


308
00:14:32,656 --> 00:14:36,476
Similarly, when we do
the regular vertical,


309
00:14:37,246 --> 00:14:41,616
we create a trait collection
for that, grab that appearance,


310
00:14:42,666 --> 00:14:45,656
and assign an empty image, which
will cause the navigation bar


311
00:14:45,876 --> 00:14:48,196
to construct no background
image whatsoever.


312
00:14:49,186 --> 00:14:51,696
Now, you might note
that the appearance API


313
00:14:52,046 --> 00:14:54,736
for trait collection, that
might read a little funny.


314
00:14:54,786 --> 00:14:57,436
We're actually going to be
changing that API for C2,


315
00:14:57,436 --> 00:14:58,576
so be on the lookout for that.


316
00:14:59,786 --> 00:15:02,196
And so with that,
let's go ahead and wrap


317
00:15:02,196 --> 00:15:03,616
up the best practices section


318
00:15:04,296 --> 00:15:06,536
where we reviewed
using Asset Catalogs


319
00:15:06,536 --> 00:15:07,756
to organize your images.


320
00:15:08,836 --> 00:15:12,306
Dynamic Type to adapt to the
user's desire for the font size.


321
00:15:13,376 --> 00:15:16,456
Layout Guides to help you
build your own layouts in ways


322
00:15:16,456 --> 00:15:20,116
that are easily adaptable to
all of your layout situations.


323
00:15:20,706 --> 00:15:22,706
And finally, Appearance


324
00:15:22,776 --> 00:15:25,466
to get your application looking
exactly like you want it.


325
00:15:25,826 --> 00:15:27,696
And so with that, I'll
hand it over to Kurt.


326
00:15:29,516 --> 00:15:34,816
[ Applause ]


327
00:15:35,316 --> 00:15:35,976
>> Thank you, David.


328
00:15:37,116 --> 00:15:40,446
So, if you remember from
"Making Apps Adaptive,


329
00:15:40,616 --> 00:15:43,946
Part 1" you'll remember the
takeaway message, which is:


330
00:15:44,346 --> 00:15:45,666
The system is going to do most


331
00:15:45,666 --> 00:15:47,246
of the work, so you
don't have to.


332
00:15:47,666 --> 00:15:50,206
Now, I'm going to talk today
about how to go beyond that.


333
00:15:51,006 --> 00:15:54,236
So, if you want to go beyond
what the system provides,


334
00:15:54,836 --> 00:15:55,806
here's how to do it.


335
00:15:56,436 --> 00:15:58,476
And the operative word
here is "if you want to."


336
00:15:58,636 --> 00:15:59,706
This isn't required.


337
00:16:00,466 --> 00:16:03,216
However, if you don't -- even
if you don't take advantage


338
00:16:03,216 --> 00:16:05,236
of this, you might learn
some things about how


339
00:16:05,236 --> 00:16:07,186
to work more effectively
with UIKit.


340
00:16:08,556 --> 00:16:10,926
So I'll talk about how
to go beyond the basics.


341
00:16:11,996 --> 00:16:15,626
I'll tell you how to design your
app to handle all combinations


342
00:16:15,626 --> 00:16:17,526
of device orientation and size.


343
00:16:17,636 --> 00:16:20,426
I'll talk about how you
can implement these designs


344
00:16:20,426 --> 00:16:21,996
and change between
them dynamically


345
00:16:22,076 --> 00:16:23,316
as your app changes size.


346
00:16:23,616 --> 00:16:26,306
And then I'll talk about
using reusable elements


347
00:16:26,306 --> 00:16:29,156
to make it quicker and
easier to build your app.


348
00:16:29,446 --> 00:16:30,746
And I'll do this in
the context of an app.


349
00:16:30,936 --> 00:16:32,046
We'll build a real app here.


350
00:16:32,756 --> 00:16:35,456
So, I'll call my app My
Incredibly Adaptive App.


351
00:16:35,916 --> 00:16:38,176
And fortunately, it's
also incredibly simple.


352
00:16:38,806 --> 00:16:41,486
We've only got three things that
we're going to show in this app.


353
00:16:42,426 --> 00:16:43,216
Three items.


354
00:16:43,346 --> 00:16:44,216
Each one has a title.


355
00:16:44,456 --> 00:16:45,966
Here they're just A, B and C.


356
00:16:46,506 --> 00:16:48,846
And then there's a longer
piece of text, a description,


357
00:16:48,846 --> 00:16:49,796
that goes with each one.


358
00:16:50,626 --> 00:16:52,166
So even though this
app is very simple,


359
00:16:52,166 --> 00:16:53,976
I'm going to use
techniques that you can use


360
00:16:53,976 --> 00:16:57,666
in your much more
complicated and bigger apps.


361
00:16:58,216 --> 00:17:00,146
So this is the model of my app.


362
00:17:00,396 --> 00:17:01,616
This is the data inside of it.


363
00:17:01,906 --> 00:17:04,195
But how should my app look
and how should it act?


364
00:17:04,646 --> 00:17:05,386
What's the design?


365
00:17:06,726 --> 00:17:08,566
Well, when I'm thinking
about these designs,


366
00:17:08,955 --> 00:17:10,796
I need to consider all
these combinations.


367
00:17:11,425 --> 00:17:14,445
But that's far too much to do
a unique design for each one.


368
00:17:14,526 --> 00:17:15,915
That would be far too much work.


369
00:17:16,486 --> 00:17:17,746
So let's try to simplify this.


370
00:17:18,546 --> 00:17:21,016
I think in my app I can do
it with just two designs.


371
00:17:21,675 --> 00:17:23,086
I'll call the first
design "Tall."


372
00:17:23,215 --> 00:17:25,776
And I'll arrange these
items vertically, A, B,


373
00:17:25,776 --> 00:17:26,976
and C vertically in the stack.


374
00:17:28,036 --> 00:17:29,526
My other design will be "Wide."


375
00:17:29,996 --> 00:17:31,706
So I'll arrange these
items horizontally.


376
00:17:32,886 --> 00:17:35,676
Now, I think no matter what
size my app actually is,


377
00:17:36,056 --> 00:17:37,646
for my app I can use one


378
00:17:37,646 --> 00:17:40,776
of these two designs
and make them fit.


379
00:17:40,776 --> 00:17:42,846
So now the question
is: Given a combination


380
00:17:42,846 --> 00:17:44,456
of device orientation and size,


381
00:17:44,456 --> 00:17:46,376
how do I choose what
design to use?


382
00:17:46,906 --> 00:17:48,326
I need to define
a rule for that.


383
00:17:48,516 --> 00:17:49,916
And again, this is
unique to my app.


384
00:17:51,086 --> 00:17:53,766
I think I'm going to
choose: If the width is less


385
00:17:53,766 --> 00:17:56,756
than the height, I'll
use the Tall design.


386
00:17:56,806 --> 00:17:58,656
Otherwise, I'll use
the Wide design.


387
00:17:59,936 --> 00:18:01,756
Now, I can run through
all these combinations


388
00:18:01,756 --> 00:18:02,816
and see how it works.


389
00:18:02,816 --> 00:18:05,306
I can do this on paper before
I even start writing any code


390
00:18:05,306 --> 00:18:05,586
at all.


391
00:18:06,406 --> 00:18:09,636
So for instance, this iPhone
in portrait, the width is less


392
00:18:09,636 --> 00:18:11,826
than the height, we'll
use the tall design.


393
00:18:11,826 --> 00:18:15,146
Now, I can continue that
with the iPhone in landscape


394
00:18:15,436 --> 00:18:19,016
and with an iPad, full screen,
or an iPad partial screen,


395
00:18:19,306 --> 00:18:21,136
and go through all the
examples and try them out


396
00:18:21,136 --> 00:18:23,726
and make sure they make sense.


397
00:18:23,906 --> 00:18:25,286
So I'll reiterate
what I just did.


398
00:18:25,386 --> 00:18:27,266
When I'm designing my
app to hand these things,


399
00:18:27,886 --> 00:18:29,596
I thought through
all the combinations.


400
00:18:30,666 --> 00:18:33,626
I came up with designs to
cover all those combinations,


401
00:18:33,626 --> 00:18:34,276
the whole range.


402
00:18:34,516 --> 00:18:38,806
And then I defined rules
to say which design to use.


403
00:18:40,376 --> 00:18:42,186
So when I'm defining
those rules,


404
00:18:42,556 --> 00:18:43,606
there's many ways I can do it.


405
00:18:43,606 --> 00:18:44,826
This is what makes
my app unique.


406
00:18:45,566 --> 00:18:48,236
But you'll note that I
could have checked to see


407
00:18:48,236 --> 00:18:50,646
if the size exactly
matched certain things.


408
00:18:50,646 --> 00:18:54,146
I could have seen is
the size 1024 by 768,


409
00:18:54,146 --> 00:18:57,256
therefore it's an iPad and
made decisions based on that.


410
00:18:57,256 --> 00:18:59,506
I don't want to do that because
there's too many combinations


411
00:18:59,506 --> 00:18:59,956
to handle.


412
00:19:00,086 --> 00:19:02,166
And those sizes will
change over time.


413
00:19:03,496 --> 00:19:06,136
So instead, I defined a
simple Boolean condition


414
00:19:06,136 --> 00:19:08,076
that would tell me
what design to use.


415
00:19:08,556 --> 00:19:09,936
And there's many
ways we can do this.


416
00:19:10,636 --> 00:19:13,206
The first one, and most obvious,
is just use size classes.


417
00:19:13,236 --> 00:19:14,816
Then we've done most
of the work for you.


418
00:19:15,036 --> 00:19:17,906
All you have to do is check
are you compact or regular.


419
00:19:19,086 --> 00:19:21,386
Also, your app will act like
other apps in the system


420
00:19:21,386 --> 00:19:23,216
because you're using
the same size classes.


421
00:19:23,856 --> 00:19:25,566
All the Xcode tooling
will help you out.


422
00:19:25,736 --> 00:19:27,456
You'll get a lot of
things just for free.


423
00:19:28,116 --> 00:19:29,906
But, you can also
do it yourself.


424
00:19:30,546 --> 00:19:32,866
For instance, I could
compare a value like width


425
00:19:32,866 --> 00:19:34,446
or height to a threshold value.


426
00:19:35,506 --> 00:19:38,296
Or I could compare two values
like I did, width versus height.


427
00:19:38,956 --> 00:19:39,906
Or I could combine these.


428
00:19:40,216 --> 00:19:43,616
The point is that I came up with
a simple and unambiguous way


429
00:19:43,616 --> 00:19:45,306
to figure out what
design to use.


430
00:19:46,806 --> 00:19:48,566
So another thing
when you're thinking


431
00:19:48,566 --> 00:19:50,996
about your designs is even
if your size is the same,


432
00:19:51,316 --> 00:19:53,966
you might be, say, on one side
of the iPad or the other side.


433
00:19:54,646 --> 00:19:58,406
So don't make your designs
specific to where the buttons


434
00:19:58,406 --> 00:20:00,756
on the device are, or
where the other app is


435
00:20:00,756 --> 00:20:04,816
if you're multitasking,
that sort of thing.


436
00:20:05,046 --> 00:20:06,676
I'll need to find
the size of the app.


437
00:20:07,696 --> 00:20:10,666
I'll need to use those rules
to decide what design to use.


438
00:20:11,346 --> 00:20:13,516
And then last, I'll apply
that design to the UI.


439
00:20:13,856 --> 00:20:16,326
So change the views of
my UI to make a match.


440
00:20:17,616 --> 00:20:19,066
Now, where should
I put this code?


441
00:20:19,886 --> 00:20:22,846
If I make a new template in
Xcode, or new view controller,


442
00:20:23,196 --> 00:20:25,126
it gives me this template
with a viewDidLoad method.


443
00:20:25,126 --> 00:20:27,136
And it says do any
additional setup here.


444
00:20:27,316 --> 00:20:28,566
So that's where I
should put it, right?


445
00:20:29,526 --> 00:20:30,906
Unfortunately, it's
not that simple.


446
00:20:31,486 --> 00:20:33,226
The reason you don't
want to do this is


447
00:20:33,226 --> 00:20:35,086
because views get
loaded on demand.


448
00:20:35,636 --> 00:20:37,596
The first time something
asks for that view


449
00:20:37,596 --> 00:20:39,116
in your view controller,
this will get called.


450
00:20:39,676 --> 00:20:40,706
And that's very early.


451
00:20:41,576 --> 00:20:43,836
So we know at that
time your view won't be


452
00:20:43,836 --> 00:20:44,756
in a superview yet.


453
00:20:45,486 --> 00:20:46,906
Layout wont' be valid yet.


454
00:20:46,906 --> 00:20:49,486
So you really can't
count on your view size


455
00:20:49,486 --> 00:20:52,076
or any parent size
or traits or so on.


456
00:20:52,156 --> 00:20:52,876
It's just too early.


457
00:20:54,016 --> 00:20:57,716
So for one-time only things
like initializers, loadView,


458
00:20:57,716 --> 00:21:00,116
viewDidLoad, you only want
to put code that's going


459
00:21:00,116 --> 00:21:03,106
to be the same across
all of your designs.


460
00:21:03,226 --> 00:21:05,606
A better place for
me to put my code is


461
00:21:05,606 --> 00:21:07,776
in a view controller's
viewWillLayoutSubViews.


462
00:21:09,596 --> 00:21:10,916
And we'll view that because


463
00:21:10,916 --> 00:21:13,486
at that time the view
is in a superview.


464
00:21:14,076 --> 00:21:15,916
Layout of all those
superviews has happened.


465
00:21:16,236 --> 00:21:17,166
Sizes are valid.


466
00:21:17,306 --> 00:21:18,446
My view size is valid.


467
00:21:18,446 --> 00:21:19,236
Traits are valid.


468
00:21:19,606 --> 00:21:21,526
Everything's good.


469
00:21:21,676 --> 00:21:24,736
And also, this is a good time
to manipulate the things inside


470
00:21:24,736 --> 00:21:25,606
of my view controller.


471
00:21:25,796 --> 00:21:28,026
So this is where I should
change this stuff inside my view


472
00:21:28,026 --> 00:21:31,746
controller views and
constraints and so on.


473
00:21:31,746 --> 00:21:33,726
Now, it's important
to be careful here.


474
00:21:34,176 --> 00:21:36,466
Because this is a very hot path.


475
00:21:36,586 --> 00:21:37,776
This is called very often.


476
00:21:37,776 --> 00:21:39,666
Often, for reasons
outside of your control.


477
00:21:40,656 --> 00:21:44,306
So, do as little work as you
possibly can in this method.


478
00:21:45,176 --> 00:21:47,326
Ideally you would find
out what's changed


479
00:21:47,526 --> 00:21:50,106
since the last time it was
called and then do as little


480
00:21:50,106 --> 00:21:51,836
as you can to update
based on that change.


481
00:21:52,216 --> 00:21:54,336
So change only the
attributes of views


482
00:21:54,336 --> 00:21:56,186
that you absolutely
need to change.


483
00:21:56,396 --> 00:22:00,756
And then finally, be careful
not to cause a layout loop.


484
00:22:01,296 --> 00:22:03,336
If you invalidate layout
of your superviews,


485
00:22:03,826 --> 00:22:05,686
they might in turn
invalidate your layout.


486
00:22:05,746 --> 00:22:08,426
And soon you're finding that
your app is doing but validating


487
00:22:08,426 --> 00:22:10,786
and invalidating layout and
nothing is actually happening.


488
00:22:11,486 --> 00:22:13,606
So to find out more about
debugging and finding


489
00:22:13,606 --> 00:22:15,426
out about layout loops,
check out the "What's New


490
00:22:15,426 --> 00:22:16,946
in Auto Layout" session
later today.


491
00:22:19,406 --> 00:22:20,916
So, here's my two designs.


492
00:22:21,696 --> 00:22:22,466
We'll go back to this.


493
00:22:22,716 --> 00:22:24,596
How am I actually going
to implement these things?


494
00:22:25,656 --> 00:22:27,596
Well, I think I can
do it with just a view


495
00:22:27,866 --> 00:22:29,446
for each item, A, B, and C.


496
00:22:29,736 --> 00:22:32,156
And then I'll us a UIStackView


497
00:22:32,156 --> 00:22:34,376
to arrange these things
horizontally or vertically.


498
00:22:34,886 --> 00:22:36,576
UIStackView will do
all the work for me.


499
00:22:36,576 --> 00:22:38,986
I don't have to think too hard.


500
00:22:39,076 --> 00:22:39,716
So here's some code.


501
00:22:40,506 --> 00:22:42,936
My simple example view
controller is a subclass


502
00:22:42,936 --> 00:22:43,906
of UIVIewController.


503
00:22:44,646 --> 00:22:45,966
And I made a storyboard
for this.


504
00:22:45,966 --> 00:22:46,996
It's got a stack view in it


505
00:22:46,996 --> 00:22:48,746
and it's already got
those three views inside.


506
00:22:50,056 --> 00:22:52,636
Now, I am going to,


507
00:22:52,746 --> 00:22:55,366
in my viewWillLayoutSubviews
method, I'll override that.


508
00:22:56,266 --> 00:22:59,106
First step, get the size,
which is view.bounds.size.


509
00:23:00,216 --> 00:23:01,566
Second, apply my rules.


510
00:23:01,976 --> 00:23:04,796
So if the width is
greater than the height --


511
00:23:04,796 --> 00:23:08,246
or equal to the height, I will
choose to use the wide design.


512
00:23:08,246 --> 00:23:11,146
And then finally I'll
apply that design.


513
00:23:11,876 --> 00:23:14,096
So, if I'm using
the wide design,


514
00:23:14,126 --> 00:23:16,686
my stack view's access
should be horizontal.


515
00:23:16,686 --> 00:23:17,766
Otherwise it should be vertical.


516
00:23:18,296 --> 00:23:19,626
That's all I have to do.


517
00:23:20,066 --> 00:23:22,246
So you'll note that here
I'm not doing a lot of work.


518
00:23:23,076 --> 00:23:24,756
And I'm also taking
advantage of the fact


519
00:23:24,836 --> 00:23:25,826
that StackView is smart.


520
00:23:26,576 --> 00:23:29,706
If I'm setting the access to
the value that it already had,


521
00:23:29,826 --> 00:23:31,446
it's not going to do
any additional work.


522
00:23:33,176 --> 00:23:34,456
So let's see this in action.


523
00:23:34,866 --> 00:23:36,716
Here's my app on an
iPhone in portrait.


524
00:23:36,886 --> 00:23:37,986
We've got that vertical layout.


525
00:23:37,986 --> 00:23:40,576
And now if I rotate
to horizontal,


526
00:23:41,246 --> 00:23:44,396
we'll see that the app
also rotates to horizontal.


527
00:23:45,256 --> 00:23:47,096
And also I got this
animation for free.


528
00:23:47,666 --> 00:23:49,476
So I'll go back to portrait
and I'll show that again.


529
00:23:53,136 --> 00:23:53,926
There we are.


530
00:23:54,136 --> 00:23:54,686
We rotated.


531
00:23:55,146 --> 00:23:56,466
So, I showed this to David,


532
00:23:56,466 --> 00:23:57,576
because I was especially
impressed


533
00:23:57,576 --> 00:23:59,386
that StackView gave me
this animation for free.


534
00:23:59,386 --> 00:24:00,256
I didn't expect that.


535
00:24:00,256 --> 00:24:01,816
And he said, "Well,
that's great.


536
00:24:01,926 --> 00:24:02,586
That's pretty amazing.


537
00:24:02,586 --> 00:24:03,836
But can you make it better?


538
00:24:04,076 --> 00:24:04,906
Could you make it pop?"


539
00:24:05,706 --> 00:24:07,896
And if you're an app developer,
maybe you've heard this before


540
00:24:07,896 --> 00:24:08,876
from one of your clients.


541
00:24:09,436 --> 00:24:11,146
So I said, "Sure, I
can make this pop."


542
00:24:11,306 --> 00:24:13,626
I can make my app a
little more interesting


543
00:24:13,626 --> 00:24:14,646
and I'll make it pop here.


544
00:24:15,136 --> 00:24:18,596
So I'll do this by,
during the rotation,


545
00:24:18,596 --> 00:24:20,246
I'll make the items
grow towards you.


546
00:24:21,266 --> 00:24:23,986
And then when I'm done, I'll
make them go back to normal,


547
00:24:24,166 --> 00:24:25,036
shrink back to normal.


548
00:24:25,406 --> 00:24:30,216
Now, this isn't something
that we necessarily advocate


549
00:24:30,516 --> 00:24:31,776
that you do in your app.


550
00:24:32,786 --> 00:24:35,506
Not this particular
technique of making it pop.


551
00:24:35,916 --> 00:24:37,926
But the point is where
I'm putting the code


552
00:24:37,926 --> 00:24:40,206
and where I'm exactly
doing this.


553
00:24:41,116 --> 00:24:44,066
So, I'm doing this code
in viewWillTransition


554
00:24:44,066 --> 00:24:45,556
to size with coordinator.


555
00:24:46,386 --> 00:24:49,256
And I'm doing this because it
will be called during an app


556
00:24:49,346 --> 00:24:50,826
size change or a rotation.


557
00:24:51,416 --> 00:24:53,056
And I'm giving this
coordinator that lets me set


558
00:24:53,056 --> 00:24:55,166
up animations alongside
the rotation


559
00:24:55,196 --> 00:24:56,296
and to happen afterwards.


560
00:24:57,206 --> 00:24:59,586
Now, why don't I put all
my layout code in here?


561
00:25:00,136 --> 00:25:01,856
That's because this isn't
called the first time


562
00:25:01,856 --> 00:25:03,216
through when your app launches.


563
00:25:03,706 --> 00:25:05,276
There's other reasons, but
that's the main reason.


564
00:25:06,676 --> 00:25:09,246
So I'll use the coordinator
and I'll set up a block


565
00:25:09,246 --> 00:25:11,046
to animate alongside
the rotation.


566
00:25:11,556 --> 00:25:13,676
And all I have to do in this
block is set the parameter


567
00:25:13,676 --> 00:25:14,816
that I want to be animated.


568
00:25:15,066 --> 00:25:16,796
It'll go alongside the rotation


569
00:25:16,796 --> 00:25:18,896
with the same curve
and the same timing.


570
00:25:19,576 --> 00:25:22,476
And I'm going to set that stack
view's transform to a scale


571
00:25:22,476 --> 00:25:24,306
up of a factor of 1.4.


572
00:25:24,306 --> 00:25:26,556
So a little bit bigger.


573
00:25:26,716 --> 00:25:28,216
Then when I'm done, I get to set


574
00:25:28,216 --> 00:25:30,096
up my own animation
with my own duration.


575
00:25:30,226 --> 00:25:31,296
Here I'm picking .5.


576
00:25:31,296 --> 00:25:32,346
And we'll go back to normal.


577
00:25:32,346 --> 00:25:34,606
We'll set the affine
transform back to the identity.


578
00:25:35,026 --> 00:25:35,666
So back to normal.


579
00:25:36,616 --> 00:25:37,406
So here we go.


580
00:25:38,096 --> 00:25:40,046
Here's the same app just with
that additional code on there.


581
00:25:41,016 --> 00:25:41,626
It'll rotate.


582
00:25:41,856 --> 00:25:46,196
And it popped towards
you and went back.


583
00:25:46,816 --> 00:25:49,706
If we rotate again, it
will do the same thing.


584
00:25:50,896 --> 00:25:51,496
So there we go.


585
00:25:51,826 --> 00:25:53,266
I got to add that pop effect.


586
00:25:53,266 --> 00:25:54,836
I got to make it a
little more interesting.


587
00:25:54,936 --> 00:25:57,176
But I didn't have to
change my core layout code.


588
00:25:57,306 --> 00:25:58,156
It remained the same.


589
00:25:58,156 --> 00:25:59,436
So I just added it on top.


590
00:25:59,916 --> 00:26:04,756
So the last thing I'd like to
talk about is reusable elements.


591
00:26:05,686 --> 00:26:08,876
And this is a way that you can
build your app out of pieces


592
00:26:08,876 --> 00:26:11,626
that can be reused
across different designs.


593
00:26:12,506 --> 00:26:15,606
This way you can build you app
more quickly and take advantage


594
00:26:15,606 --> 00:26:17,366
of these different
designs without having


595
00:26:17,366 --> 00:26:18,106
to rewrite everything.


596
00:26:19,396 --> 00:26:21,136
We'll do this by using
view controllers.


597
00:26:21,296 --> 00:26:23,196
Each piece will typically
be a view controller.


598
00:26:23,506 --> 00:26:25,336
And that's because
they package up a lot


599
00:26:25,336 --> 00:26:26,576
of useful stuff all together.


600
00:26:27,066 --> 00:26:29,316
For instance, you get
a whole tree of views,


601
00:26:29,316 --> 00:26:31,626
not just a single view,
but a whole tree of views


602
00:26:32,206 --> 00:26:33,726
and all their constraints
that go with them.


603
00:26:34,976 --> 00:26:36,986
You get to make connections
to other view controllers.


604
00:26:36,986 --> 00:26:40,056
So you might perform a segue
to different view controller


605
00:26:40,096 --> 00:26:43,906
or present something, find
your parent view controllers


606
00:26:43,906 --> 00:26:44,396
and so on.


607
00:26:45,316 --> 00:26:47,136
And also, it's a place
to make connections


608
00:26:47,136 --> 00:26:48,576
to the rest of your app.


609
00:26:48,576 --> 00:26:51,966
So you might have a connection
to model objects or an object


610
00:26:51,966 --> 00:26:54,076
that represents network
access or so on.


611
00:26:54,136 --> 00:26:57,446
Now, the view controllers
in your app are going


612
00:26:57,446 --> 00:26:59,116
to perform different roles.


613
00:26:59,886 --> 00:27:01,566
You might have a
container view controller.


614
00:27:02,196 --> 00:27:06,476
And it might contain multiple
contained view controllers.


615
00:27:06,596 --> 00:27:08,446
Now, you're probably used


616
00:27:08,446 --> 00:27:10,576
to writing contained
view controllers


617
00:27:10,576 --> 00:27:13,136
and then putting them in
containers that UIKit provides.


618
00:27:13,786 --> 00:27:15,716
For example a navigation
controller


619
00:27:15,716 --> 00:27:18,326
or split view controller or a
tab bar controller and so on.


620
00:27:18,326 --> 00:27:21,106
But you can write your own
container view controllers.


621
00:27:21,436 --> 00:27:23,756
And this lets you really
unlock a lot of power.


622
00:27:23,756 --> 00:27:25,856
You can do a lot of
things with that.


623
00:27:26,546 --> 00:27:27,876
So I'll show how to do this.


624
00:27:28,116 --> 00:27:29,016
Here's my designs again.


625
00:27:29,016 --> 00:27:33,116
And in my case, I think I can
have an outer container view


626
00:27:33,116 --> 00:27:37,846
controller that I'll call
ExampleContainerViewController.


627
00:27:38,386 --> 00:27:41,226
And inside of that I'll have
three element view controllers,


628
00:27:41,356 --> 00:27:44,166
one for each one
of these things.


629
00:27:44,346 --> 00:27:47,426
Now, thinking about it, I think
I need a little refinement


630
00:27:47,426 --> 00:27:48,206
to my design.


631
00:27:48,606 --> 00:27:51,116
So if I don't have much
space, I'm going to need


632
00:27:51,116 --> 00:27:52,966
to show just a preview
of these items.


633
00:27:52,966 --> 00:27:55,006
I don't have room for the
full text, just the title.


634
00:27:56,076 --> 00:27:59,086
So, when I click on one of
these items, or excuse me,


635
00:27:59,086 --> 00:28:01,436
tap on one of these items,
it's going to be a preview.


636
00:28:01,946 --> 00:28:04,146
I will present another
view controller


637
00:28:04,146 --> 00:28:05,326
that shows the full text.


638
00:28:06,216 --> 00:28:07,686
Then when I tap on
that thing again,


639
00:28:08,046 --> 00:28:09,426
we'll dismiss it, it'll go away.


640
00:28:10,676 --> 00:28:14,446
So I'll do this by having my
ExampleContainerViewController


641
00:28:14,446 --> 00:28:17,426
will have three small
element view controllers.


642
00:28:17,536 --> 00:28:18,426
I'll define this later.


643
00:28:19,296 --> 00:28:22,416
When we present one, when we
tap on that thing, we'll create


644
00:28:22,416 --> 00:28:24,906
and present a new large
element view controller.


645
00:28:26,306 --> 00:28:29,256
Now, if my app is big enough,
I don't have to do all that.


646
00:28:29,256 --> 00:28:32,756
I'd like to just show the large
element view controllers right


647
00:28:32,796 --> 00:28:35,836
here directly in that container.


648
00:28:36,246 --> 00:28:38,386
So my container will
just have three instances


649
00:28:38,386 --> 00:28:40,586
of another class
LargeElementViewController.


650
00:28:41,266 --> 00:28:44,876
And when the app size
changes dynamically,


651
00:28:45,126 --> 00:28:47,856
we'll change the view
controller hierarchy to go


652
00:28:47,856 --> 00:28:49,106
between one of these two states.


653
00:28:50,226 --> 00:28:51,266
So I'll show the code here.


654
00:28:51,526 --> 00:28:52,406
We're going to work our way


655
00:28:52,406 --> 00:28:55,376
up from the contained view
controllers into the containers.


656
00:28:55,556 --> 00:28:56,906
So we'll start with
the storyboard


657
00:28:56,956 --> 00:28:58,246
for these contained
view controllers.


658
00:28:58,876 --> 00:28:59,636
And it's pretty simple.


659
00:28:59,636 --> 00:29:01,966
We've just got a simple
view with the title here.


660
00:29:02,566 --> 00:29:04,206
You'll note that I
set the custom class


661
00:29:04,206 --> 00:29:05,926
to be
SmallElementViewController.


662
00:29:06,576 --> 00:29:09,816
And I also set the storyboard
identifier to small element.


663
00:29:09,976 --> 00:29:11,916
This way I can find these
things in the storyboard


664
00:29:11,916 --> 00:29:13,076
and instantiate them later.


665
00:29:13,476 --> 00:29:15,996
For the
LargeElementViewController


666
00:29:15,996 --> 00:29:16,436
it's bigger.


667
00:29:16,436 --> 00:29:17,636
It's got that extra text in it.


668
00:29:17,986 --> 00:29:18,656
The same idea.


669
00:29:18,846 --> 00:29:21,416
I set my custom class to
LargeElementViewController.


670
00:29:21,486 --> 00:29:22,956
And I set the identifier.


671
00:29:24,256 --> 00:29:26,606
So here's the code for the
SmallElementViewController.


672
00:29:27,196 --> 00:29:28,006
We'll start with this.


673
00:29:28,066 --> 00:29:30,486
And I know that every time I
show this I'm going to want


674
00:29:30,526 --> 00:29:32,406
to tap it to show the large one.


675
00:29:32,846 --> 00:29:36,256
So in my viewDidLoad, this is
an appropriate time to do this,


676
00:29:36,396 --> 00:29:38,696
I'm going to set up my
tap gesture recognizer


677
00:29:38,816 --> 00:29:40,046
and add it to my view.


678
00:29:41,196 --> 00:29:44,346
Later, when that thing is
tapped, this will be called.


679
00:29:45,386 --> 00:29:48,626
We'll go on and find our main
storyboard and instantiate


680
00:29:48,626 --> 00:29:50,866
that LargeElementViewController
using the


681
00:29:50,866 --> 00:29:52,216
identifier largeElement.


682
00:29:53,066 --> 00:29:57,606
Finally, all we have to
do is present that then.


683
00:29:57,816 --> 00:29:59,246
In the
LargeElementViewController,


684
00:29:59,376 --> 00:30:01,066
it's a little more
tricky because we need


685
00:30:01,066 --> 00:30:02,926
to know are we being
presented or not.


686
00:30:03,286 --> 00:30:05,486
If it's being presented,
we need to tap to dismiss.


687
00:30:05,566 --> 00:30:06,466
If it's not, we don't.


688
00:30:07,246 --> 00:30:08,936
So I'll put this code
in viewWillAppear.


689
00:30:09,436 --> 00:30:11,546
I'm doing that because I
can use this other method


690
00:30:12,066 --> 00:30:15,076
isBeingPresented to find out
am I being presented or not.


691
00:30:16,126 --> 00:30:18,456
So if it is, then I add
the tap gesture recognizer,


692
00:30:18,456 --> 00:30:19,346
the same way as before.


693
00:30:19,926 --> 00:30:22,146
When that's tapped, all
I have to do is dismiss.


694
00:30:24,876 --> 00:30:27,226
So now let's get on to the
ContainerViewController.


695
00:30:27,226 --> 00:30:30,526
And I'm going to add
an additional object


696
00:30:30,566 --> 00:30:35,696
to make this easier
to work with.


697
00:30:35,876 --> 00:30:37,846
We'll call this the
design object.


698
00:30:38,286 --> 00:30:41,086
And the design object
is really going to wrap


699
00:30:41,086 --> 00:30:44,626
up all the information that
describes what a design is.


700
00:30:45,216 --> 00:30:48,316
I'll make it an immutable
struct for safety.


701
00:30:48,446 --> 00:30:50,416
So I can write a function
that returns one of these,


702
00:30:50,416 --> 00:30:52,386
and after it's been
returned, it won't change.


703
00:30:52,386 --> 00:30:53,296
Nobody can change it.


704
00:30:53,606 --> 00:30:56,566
And then finally, I'll
allow comparisons.


705
00:30:56,566 --> 00:30:59,816
So I can see is my design
that I want to use different


706
00:30:59,816 --> 00:31:01,036
than what I'm currently
displaying.


707
00:31:02,296 --> 00:31:03,856
So let's actually
implement this.


708
00:31:04,476 --> 00:31:06,966
I've got just a simple
Swift struct here.


709
00:31:07,486 --> 00:31:09,426
It's going to have two
pieces of information in it.


710
00:31:09,826 --> 00:31:11,186
The first one is the axis.


711
00:31:11,606 --> 00:31:13,436
I'm reusing this
enum from stackView,


712
00:31:13,436 --> 00:31:15,036
so it's either vertical
or horizontal.


713
00:31:16,216 --> 00:31:18,636
Then I'm going to
define my own enum


714
00:31:18,636 --> 00:31:21,146
for whether I'm using the small
version or the large version


715
00:31:21,146 --> 00:31:22,356
of the view controllers inside.


716
00:31:22,516 --> 00:31:23,706
I call that elementKind.


717
00:31:24,866 --> 00:31:27,946
Finally, I've got a read-only
computed property here


718
00:31:28,136 --> 00:31:29,426
called elementIdentifier.


719
00:31:29,806 --> 00:31:32,116
And this just tells me
what identifier to use


720
00:31:32,116 --> 00:31:34,146
to make those view
controllers from the storyboard.


721
00:31:36,176 --> 00:31:39,406
Finally, I'll implement the
Equatable protocol from Swift.


722
00:31:39,786 --> 00:31:41,326
This is just function
equals equals.


723
00:31:41,326 --> 00:31:43,706
And I just compare the
data inside my two designs


724
00:31:43,706 --> 00:31:46,566
to see if they're the same.


725
00:31:46,756 --> 00:31:48,986
So finally, let's get up into
the container view controller


726
00:31:48,986 --> 00:31:50,376
and actually do this stuff.


727
00:31:50,376 --> 00:31:51,056
You'll remember it's going


728
00:31:51,056 --> 00:31:52,666
to have three child
view controllers.


729
00:31:53,196 --> 00:31:55,886
It's going to use
those rules to create


730
00:31:55,886 --> 00:31:57,326
and decide what design to use.


731
00:31:58,106 --> 00:31:59,286
And then finally we'll update.


732
00:31:59,286 --> 00:32:02,126
Every layout will
reevaluate what design to use


733
00:32:02,126 --> 00:32:03,416
and change things if we need to.


734
00:32:04,316 --> 00:32:04,796
So here we go.


735
00:32:05,526 --> 00:32:07,056
The
ExampleContainerViewController.


736
00:32:07,056 --> 00:32:08,986
I've got an array
with these three slots


737
00:32:08,986 --> 00:32:10,746
for three optional
view controllers.


738
00:32:11,366 --> 00:32:12,336
And they start out as nil.


739
00:32:12,336 --> 00:32:14,016
Because when this thing
is initially created,


740
00:32:14,016 --> 00:32:16,146
nothing is going to
be showing there yet.


741
00:32:17,056 --> 00:32:19,186
I'll also keep track
of the design


742
00:32:19,186 --> 00:32:20,446
that I'm currently displaying.


743
00:32:20,646 --> 00:32:22,216
And also that's optional
and it's nil


744
00:32:22,216 --> 00:32:23,396
because nothing has
happened yet.


745
00:32:24,846 --> 00:32:26,616
So, in my
viewWillLayoutSubviews,


746
00:32:26,656 --> 00:32:28,146
this should look
very familiar by now.


747
00:32:28,396 --> 00:32:29,546
I'm going to get my size.


748
00:32:30,176 --> 00:32:33,666
I'm going to call a function
called decideDesign based


749
00:32:33,666 --> 00:32:35,906
on the size, return
a new design to use.


750
00:32:36,766 --> 00:32:38,166
And if that design is different


751
00:32:38,166 --> 00:32:39,456
than what I'm currently
displaying,


752
00:32:39,516 --> 00:32:41,446
I'm going to apply
that design to my UI.


753
00:32:41,856 --> 00:32:43,216
So change my UI to match.


754
00:32:44,116 --> 00:32:47,136
So you'll note this
exactly like the pseudocode


755
00:32:47,136 --> 00:32:48,236
that I talked about earlier.


756
00:32:48,866 --> 00:32:51,426
And really, no matter
what your app does,


757
00:32:51,746 --> 00:32:53,456
you can probably follow
this same pattern.


758
00:32:53,826 --> 00:32:55,426
You'll have different
stuff in your design.


759
00:32:55,986 --> 00:32:57,116
Your decideDesign


760
00:32:57,116 --> 00:32:58,936
and applyDesign methods
will be different.


761
00:32:59,516 --> 00:33:02,916
But you'll probably be following
this exact same pattern.


762
00:33:03,756 --> 00:33:05,986
So let's fill in these
functions from my sample app.


763
00:33:06,796 --> 00:33:11,046
decideDesign will first
decide on the axis.


764
00:33:11,046 --> 00:33:13,526
And we've already been over
how we did this with this rule.


765
00:33:14,036 --> 00:33:16,456
For the elementKind I'm going
to use a different rule.


766
00:33:16,836 --> 00:33:20,386
So I'm going to choose
if my app's width is less


767
00:33:20,386 --> 00:33:22,806
than a threshold, choose
to use the small ones.


768
00:33:22,806 --> 00:33:24,066
Otherwise use the large ones.


769
00:33:24,666 --> 00:33:26,466
And here I'm just
comparing against a constant.


770
00:33:26,516 --> 00:33:28,616
This is just an example
that I'm using for my app.


771
00:33:28,616 --> 00:33:30,956
This isn't a value you should
necessarily use in your app.


772
00:33:30,956 --> 00:33:31,756
It's just an example.


773
00:33:33,096 --> 00:33:36,106
Finally, I'm going to wrap up
those two pieces of information


774
00:33:36,106 --> 00:33:38,126
in a design object
and return it.


775
00:33:39,116 --> 00:33:42,436
To apply a design, I need
to apply those two things.


776
00:33:42,436 --> 00:33:44,196
So I need to find out
if they've changed.


777
00:33:44,686 --> 00:33:46,216
So again, for the
axis we'll just pass


778
00:33:46,216 --> 00:33:47,386
that directly to the stack view.


779
00:33:47,386 --> 00:33:47,896
It's smart.


780
00:33:47,896 --> 00:33:49,426
It won't do anything
if doesn't need to.


781
00:33:50,626 --> 00:33:52,446
For the elementKind,
we've got more work to do.


782
00:33:53,616 --> 00:33:57,146
If we have old element
view controllers


783
00:33:57,396 --> 00:33:59,206
and the element kind is
changing, then we need


784
00:33:59,206 --> 00:34:01,276
to destroy the old ones
and create new ones.


785
00:34:01,726 --> 00:34:02,746
So here's how we'll do that.


786
00:34:03,866 --> 00:34:05,106
We'll iterate through
that array.


787
00:34:05,256 --> 00:34:07,386
And I'm using this
enumerated function here


788
00:34:07,386 --> 00:34:09,556
because it lets me get
the index and the object


789
00:34:09,556 --> 00:34:11,746
at that index simultaneously
while I'm iterating.


790
00:34:13,146 --> 00:34:15,856
And finally, if we've got an
old element view controller,


791
00:34:16,306 --> 00:34:17,116
then I need to remove it.


792
00:34:17,116 --> 00:34:18,456
I'll call this function
to remove it.


793
00:34:19,716 --> 00:34:22,485
Go to my storyboard, create
a new element view controller


794
00:34:22,485 --> 00:34:24,585
using the identifier
that the design gave me.


795
00:34:24,866 --> 00:34:26,835
And then finally call
a function to add


796
00:34:26,835 --> 00:34:28,065
that new child view controller.


797
00:34:28,646 --> 00:34:31,996
And then save it in the array
for the next time through.


798
00:34:33,516 --> 00:34:35,016
So, last slide of code.


799
00:34:35,016 --> 00:34:36,005
Thank you for sticking with me.


800
00:34:36,476 --> 00:34:37,916
These are some things
that we need to do


801
00:34:37,916 --> 00:34:40,036
to be a well-behaved
container view controller.


802
00:34:40,156 --> 00:34:42,656
So it's important to do these
steps in this exact order.


803
00:34:43,466 --> 00:34:44,815
When we're adding a
new view controller,


804
00:34:44,815 --> 00:34:47,005
we first call
addChildViewController.


805
00:34:47,106 --> 00:34:48,255
This adds that view controller


806
00:34:48,255 --> 00:34:52,775
as to self's list
of view controllers.


807
00:34:53,826 --> 00:34:56,896
Then we need to add that
new view controller's view


808
00:34:56,896 --> 00:34:57,746
to the view hierarchy.


809
00:34:58,656 --> 00:35:00,956
We do this by using
the stack view's


810
00:35:01,026 --> 00:35:02,616
addArrangedSubviews method.


811
00:35:02,706 --> 00:35:04,716
And UIKit doesn't
do this for you.


812
00:35:04,716 --> 00:35:06,976
And in fact, can't do it for
you because we don't know


813
00:35:06,976 --> 00:35:09,656
where it's going to go
in the view hierarchy.


814
00:35:09,766 --> 00:35:11,486
Only you can tell us that.


815
00:35:12,176 --> 00:35:13,796
Finally, once that's done,


816
00:35:13,976 --> 00:35:16,086
you tell that view
controller it did move


817
00:35:16,086 --> 00:35:18,026
to a new parent view
controller, and that's "self".


818
00:35:19,116 --> 00:35:22,426
To remove the old one, we
do much the same steps,


819
00:35:22,456 --> 00:35:23,426
just in the opposite order.


820
00:35:23,836 --> 00:35:25,276
So we tell it it will move


821
00:35:25,276 --> 00:35:27,006
to a new parent view
controller, which is nil.


822
00:35:27,956 --> 00:35:29,566
Remove its view from
the view hierarchy.


823
00:35:30,226 --> 00:35:32,336
And then finally, remove
it from self's list


824
00:35:33,086 --> 00:35:34,236
of child view controllers.


825
00:35:34,516 --> 00:35:36,876
So here we are.


826
00:35:36,876 --> 00:35:38,606
I'll actually show
you the app, finally.


827
00:35:39,156 --> 00:35:41,576
Here we are on the
iPad in landscape.


828
00:35:41,936 --> 00:35:43,026
We've got lots of room.


829
00:35:43,126 --> 00:35:44,676
We're using that
horizontal layout


830
00:35:44,746 --> 00:35:46,796
and we're using the
LargeElementViewControllers.


831
00:35:47,606 --> 00:35:49,206
Now, if I slide over another app


832
00:35:49,206 --> 00:35:53,306
and pin it, my app's
now smaller.


833
00:35:53,336 --> 00:35:54,806
I switched to that
vertical layout.


834
00:35:54,806 --> 00:35:57,146
But I'm using those
LargeElementViewControllers


835
00:35:57,146 --> 00:35:57,436
still.


836
00:35:57,626 --> 00:35:59,676
In fact, they're the same
instance of the view controllers


837
00:35:59,676 --> 00:36:00,726
that we were looking at earlier.


838
00:36:01,896 --> 00:36:04,436
Now, if I make that
app smaller still,


839
00:36:04,436 --> 00:36:08,876
you'll note that we switch
to that smaller design.


840
00:36:08,966 --> 00:36:09,946
So we're still vertical.


841
00:36:10,196 --> 00:36:11,706
We are using that
smaller design.


842
00:36:12,206 --> 00:36:14,916
I can now tap on one of
those small view controllers,


843
00:36:14,966 --> 00:36:15,866
present the large one.


844
00:36:16,046 --> 00:36:18,886
If I tap again, we'll
dismiss it.


845
00:36:19,796 --> 00:36:20,736
So there's my app.


846
00:36:21,216 --> 00:36:23,006
You'll note that we
went beyond the basics.


847
00:36:23,006 --> 00:36:25,796
We really decided exactly what
we wanted to do by ourselves.


848
00:36:26,536 --> 00:36:29,006
I handled designs of
all those combinations.


849
00:36:30,256 --> 00:36:31,806
I implemented each design.


850
00:36:31,806 --> 00:36:33,266
We changed between
them dynamically


851
00:36:33,856 --> 00:36:35,006
as the app changed size,


852
00:36:35,816 --> 00:36:38,066
and also used reusable
elements to do it.


853
00:36:39,076 --> 00:36:40,626
So my app is an example of this.


854
00:36:40,626 --> 00:36:42,326
Your app can do all
these things, too.


855
00:36:44,316 --> 00:36:46,056
So now we've been
through the basics.


856
00:36:46,056 --> 00:36:48,496
We've shown you what
Xcode can do.


857
00:36:48,656 --> 00:36:51,286
We've shown you some of
the incredible things


858
00:36:51,286 --> 00:36:54,196
that UIKit provides in this
whole Swiss Army knife of tools.


859
00:36:54,196 --> 00:36:56,956
And we've been through
code in a real example app.


860
00:36:57,426 --> 00:36:59,636
So, we've really barely
scratch the surface here.


861
00:36:59,636 --> 00:37:00,696
There's a lot more to go.


862
00:37:01,076 --> 00:37:03,756
So, check out our
sample code at this URL.


863
00:37:04,816 --> 00:37:07,716
Also, if you didn't see
Session 1, please review that.


864
00:37:08,016 --> 00:37:10,046
There was a great talk
about inclusive app design


865
00:37:10,046 --> 00:37:11,326
that talked about typography.


866
00:37:11,406 --> 00:37:15,136
New stuff in Collection
View and Auto Layout


867
00:37:15,316 --> 00:37:16,666
that David mentioned earlier.


868
00:37:17,186 --> 00:37:19,916
And then also the last two
years at WWDC we've talked


869
00:37:19,916 --> 00:37:21,796
about adaptive apps
and multitasking.


870
00:37:22,106 --> 00:37:24,676
And we really didn't duplicate
too much of that material.


871
00:37:24,716 --> 00:37:26,196
So, please review that stuff.


872
00:37:26,416 --> 00:37:28,586
There's a lot of great
material in those talks.


873
00:37:29,146 --> 00:37:30,146
So thank you.


874
00:37:30,286 --> 00:37:31,346
Have a fantastic Friday.


875
00:37:32,516 --> 00:37:39,530
[ Applause ]

