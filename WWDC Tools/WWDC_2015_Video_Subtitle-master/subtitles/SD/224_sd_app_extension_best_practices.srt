1
00:00:29,356 --> 00:00:30,286
>> SOPHIA TEUTSCHLER:
Good afternoon.


2
00:00:31,516 --> 00:00:33,796
[ Applause ]


3
00:00:34,296 --> 00:00:36,576
Welcome to App Extension
Best Practices.


4
00:00:36,776 --> 00:00:39,316
I am Sophia Teutschler,
I am an engineer


5
00:00:39,316 --> 00:00:41,016
in the UIKit Framework Team.


6
00:00:41,486 --> 00:00:43,196
Later in this session I will
be joined by my colleague,


7
00:00:43,236 --> 00:00:44,446
Ian Baird from CoreOS.


8
00:00:46,226 --> 00:00:49,256
The first part of the
session I would like to talk


9
00:00:49,256 --> 00:00:52,106
about the two main types
of extensions on iOS,


10
00:00:52,816 --> 00:00:54,196
Action and Share extensions.


11
00:00:55,766 --> 00:00:57,766
The later session, Ian
will join us to talk


12
00:00:57,766 --> 00:00:59,276
about Today Widget enhancements.


13
00:01:00,446 --> 00:01:02,546
Throughout the session we
will show you many real-world


14
00:01:02,546 --> 00:01:04,446
examples to help
you make the most


15
00:01:04,446 --> 00:01:09,626
out of those types
of extensions.


16
00:01:09,626 --> 00:01:11,486
Now, Action and Share
extensions.


17
00:01:11,486 --> 00:01:15,696
Let me give you a brief
overview of the two types


18
00:01:15,696 --> 00:01:17,456
of extensions, how they differ.


19
00:01:19,406 --> 00:01:23,736
Now, Action extensions are all
about changing content in place,


20
00:01:24,376 --> 00:01:26,936
where the Share extensions
are all about moving content


21
00:01:27,076 --> 00:01:28,646
from the current
host application


22
00:01:28,966 --> 00:01:31,016
to your application
or Web Service.


23
00:01:32,896 --> 00:01:35,776
Now, let me give you
more examples here.


24
00:01:36,726 --> 00:01:37,496
As I just mentioned,


25
00:01:38,006 --> 00:01:40,296
Action extensions act
on a current content.


26
00:01:41,286 --> 00:01:43,756
Because of that,
they use the content


27
00:01:43,756 --> 00:01:45,256
as the main user interface.


28
00:01:46,376 --> 00:01:50,046
I will show an example
later on about that.


29
00:01:50,256 --> 00:01:51,586
But you also have
the opportunity


30
00:01:51,856 --> 00:01:54,786
to present additional options
before you perform that action.


31
00:01:57,016 --> 00:02:01,476
Also, your application
functionality can be separated


32
00:02:01,476 --> 00:02:03,686
in different Action
extensions that live


33
00:02:03,766 --> 00:02:06,476
within that container
application.


34
00:02:08,556 --> 00:02:10,576
Now, let me show
an example here.


35
00:02:12,216 --> 00:02:13,046
We are in Safari.


36
00:02:13,046 --> 00:02:15,336
I am going to tap on the
action item on the top right,


37
00:02:15,836 --> 00:02:18,556
bring up our Share Sheet with
our two types of extensions,


38
00:02:19,446 --> 00:02:20,566
the Share extension
is on the top


39
00:02:20,806 --> 00:02:24,126
and the Action extension
on the bottom.


40
00:02:24,126 --> 00:02:27,476
We made this Translate
extension, and when we tap it,


41
00:02:27,676 --> 00:02:28,686
the following will happen.


42
00:02:29,586 --> 00:02:32,196
Safari will transfer a
webpage to that extension.


43
00:02:32,656 --> 00:02:37,106
There it is translated and then
the translated corners move back


44
00:02:37,106 --> 00:02:38,676
into place in Safari.


45
00:02:42,226 --> 00:02:43,676
Here's a variation
of the same one.


46
00:02:44,266 --> 00:02:46,886
When you tap Translate, you
bring up this form sheet


47
00:02:46,936 --> 00:02:48,906
where a user can select
one of the languages.


48
00:02:49,546 --> 00:02:53,216
Then when you tap Language,
we transfer the webpage


49
00:02:53,216 --> 00:02:57,256
to the extension, then again
it's translated and moved back


50
00:02:57,256 --> 00:03:02,986
into place in Safari So so
much about Action extensions.


51
00:03:03,036 --> 00:03:05,226
So how are Share
extensions different?


52
00:03:09,926 --> 00:03:12,396
As I said earlier,
Share extensions are all


53
00:03:12,396 --> 00:03:15,566
about sharing content
from the host application


54
00:03:15,776 --> 00:03:17,266
to your app or Web Service.


55
00:03:19,386 --> 00:03:21,026
And because of that,
it's very important


56
00:03:21,026 --> 00:03:24,266
that you offer the user
to validate and edit


57
00:03:24,266 --> 00:03:26,676
that content before it moves
out to your Web Service.


58
00:03:28,456 --> 00:03:29,846
And we offer you an API for that


59
00:03:29,846 --> 00:03:31,556
that I will show you a
few examples on later on.


60
00:03:34,586 --> 00:03:38,026
Also, your Share extension
represents your application


61
00:03:38,026 --> 00:03:40,656
in the Share Sheet, and
to prevent confusion,


62
00:03:40,656 --> 00:03:43,096
we only allow you to offer
one Share extension per


63
00:03:43,126 --> 00:03:46,626
containing app.


64
00:03:46,626 --> 00:03:49,186
Now, let me show an example
for the Share extension here.


65
00:03:50,166 --> 00:03:51,956
We have the Share in the bottom


66
00:03:52,266 --> 00:03:53,656
and our Share extension
on the top.


67
00:03:54,986 --> 00:03:57,166
Now, we select four
photos, and when we tap


68
00:03:57,256 --> 00:03:59,096
on the iCloud Photo
Sharing extension,


69
00:03:59,096 --> 00:04:01,786
the following will happen.


70
00:04:03,046 --> 00:04:06,126
We get a little preview sheet
where a user can add a comment,


71
00:04:06,586 --> 00:04:10,596
maybe tap the Shared album, and
a little preview on the right.


72
00:04:10,896 --> 00:04:12,576
But we haven't transferred
any data yet.


73
00:04:14,286 --> 00:04:17,386
Now, if the information is
correct, the user can decide


74
00:04:17,386 --> 00:04:20,576
to either cancel out or tap Post
to actually perform the Action.


75
00:04:21,766 --> 00:04:24,956
Now let's take a closer look at
this sheet here in the Center.


76
00:04:26,356 --> 00:04:29,196
This is actually the API I
was talking about earlier.


77
00:04:29,196 --> 00:04:30,956
It's called the
SLComposeServiceViewController.


78
00:04:30,956 --> 00:04:33,306
This is how it looks
straight out of the box.


79
00:04:34,266 --> 00:04:36,776
There's a text field, a
little preview on the right.


80
00:04:38,346 --> 00:04:41,466
However, it's very customizable,
and for our special service,


81
00:04:41,466 --> 00:04:43,466
for example, we like
to customize it


82
00:04:43,646 --> 00:04:45,186
to make it look more like this.


83
00:04:47,446 --> 00:04:49,396
We added a place holder,
we even added a character


84
00:04:49,436 --> 00:04:50,396
remaining property.


85
00:04:50,546 --> 00:04:52,296
We even change the preview view,


86
00:04:52,736 --> 00:04:55,336
and we have some options
on the bottom part.


87
00:04:59,166 --> 00:05:02,846
Now let's go through some
examples to build that up.


88
00:05:04,606 --> 00:05:07,576
First, to set a place holder,


89
00:05:07,576 --> 00:05:10,086
set a place holder
property on that sheet.


90
00:05:13,136 --> 00:05:13,726
There we go.


91
00:05:15,986 --> 00:05:18,866
And your Web Service might
have a maximum character limit,


92
00:05:19,316 --> 00:05:21,166
so we have a little indicator
on the bottom left for that.


93
00:05:21,396 --> 00:05:23,416
To update it, just
set a property there.


94
00:05:26,366 --> 00:05:28,836
And again, we offer you a
preview view out of the box,


95
00:05:28,836 --> 00:05:30,026
but you can have your own one.


96
00:05:30,726 --> 00:05:34,356
To support that simply subclass
the composer's controller


97
00:05:34,716 --> 00:05:36,386
and override load preview view,


98
00:05:36,826 --> 00:05:40,426
and then return your custom
view controller for the preview.


99
00:05:41,736 --> 00:05:43,676
One thing to keep
in mind, however,


100
00:05:43,676 --> 00:05:46,536
make sure that the view has --


101
00:05:46,536 --> 00:05:50,516
otherwise it might not
show up on the sheet.


102
00:05:54,366 --> 00:05:57,996
Now, there are these
options on the bottom.


103
00:05:59,076 --> 00:06:02,276
Those are simply cells
with a value on the left,


104
00:06:02,276 --> 00:06:05,486
value on the right,
and to tap on them,


105
00:06:05,606 --> 00:06:07,136
we push an option
view controller


106
00:06:07,136 --> 00:06:12,356
that can select your options,
your custom options there.


107
00:06:13,306 --> 00:06:15,136
Let me show you how you
set that up in code.


108
00:06:16,246 --> 00:06:16,896
Pretty simple.


109
00:06:17,356 --> 00:06:22,726
Subclass SL -- composer,
then override the -- method.


110
00:06:23,796 --> 00:06:27,546
Each row is represented
as an SL compose sheet


111
00:06:27,596 --> 00:06:28,536
configuration item.


112
00:06:28,946 --> 00:06:29,576
Quite a mouthful.


113
00:06:30,226 --> 00:06:34,026
On the left is the title.


114
00:06:34,606 --> 00:06:37,746
The value is on the
right-hand side.


115
00:06:40,166 --> 00:06:44,276
Now, if the user taps on a cell,
we call this tap handler here,


116
00:06:44,956 --> 00:06:46,226
and there you are supposed


117
00:06:46,296 --> 00:06:48,216
to create your custom
view controller


118
00:06:48,216 --> 00:06:49,786
for your custom option.


119
00:06:49,786 --> 00:06:53,866
And to push it, simply call push
configuration view controller.


120
00:06:54,456 --> 00:06:56,906
This works the same
way as the API


121
00:06:57,066 --> 00:06:59,146
from your navigation controller.


122
00:07:01,356 --> 00:07:05,676
And then finally,
return the area of items.


123
00:07:08,546 --> 00:07:11,356
Now, we even offer you
auto complete support


124
00:07:11,356 --> 00:07:12,346
on the compose sheet.


125
00:07:13,236 --> 00:07:16,196
To auto complete, you
set a view controller


126
00:07:16,196 --> 00:07:17,876
to update the button part here.


127
00:07:18,776 --> 00:07:21,686
In this case, it's a table view
where we auto complete names,


128
00:07:21,876 --> 00:07:23,016
but it could be really anything.


129
00:07:24,696 --> 00:07:27,736
To set it, just set the auto
completion view property,


130
00:07:28,226 --> 00:07:29,736
we do all the animations
for you.


131
00:07:30,126 --> 00:07:31,366
When you are done
auto completing,


132
00:07:31,396 --> 00:07:35,506
you set it back to nil.


133
00:07:35,846 --> 00:07:36,686
All pretty simple.


134
00:07:37,416 --> 00:07:37,596
Again,


135
00:07:37,596 --> 00:07:39,826
our
SLComposeServiceViewController


136
00:07:39,826 --> 00:07:41,656
provides a consistent
and familiar UI.


137
00:07:42,736 --> 00:07:46,086
It's very customizable for
you to adopt it in your app.


138
00:07:47,076 --> 00:07:48,626
However, if you have
different needs


139
00:07:48,656 --> 00:07:50,986
for your service extension,


140
00:07:51,256 --> 00:07:54,166
you can always go back
subclassing your view


141
00:07:54,366 --> 00:07:55,386
controller directly.


142
00:07:57,346 --> 00:08:00,826
Now, I will just show you how
to make Action Share extensions.


143
00:08:01,546 --> 00:08:02,806
Now let's change
gears a little bit


144
00:08:02,956 --> 00:08:07,716
and discuss how you can support
extensions made by someone else


145
00:08:08,136 --> 00:08:09,536
in your host application.


146
00:08:11,316 --> 00:08:14,586
For example, let's say we
made a text edit application,


147
00:08:15,236 --> 00:08:17,356
and we'd like to share
those text documents


148
00:08:17,356 --> 00:08:18,556
as well, plain text.


149
00:08:19,586 --> 00:08:22,476
However, some extensions
might not understand text.


150
00:08:23,186 --> 00:08:24,686
They might only support PDFs


151
00:08:25,556 --> 00:08:27,736
or other extensions
might only support HTML.


152
00:08:29,326 --> 00:08:31,396
Now, you would like to support
as many extensions as possible,


153
00:08:31,396 --> 00:08:35,116
so a good way would be to offer
all those three file types.


154
00:08:36,806 --> 00:08:38,525
But when you think about that,


155
00:08:39,046 --> 00:08:41,246
those are not really
three separate documents


156
00:08:41,246 --> 00:08:43,116
when you share a text document,


157
00:08:43,586 --> 00:08:46,586
but what you really have
is a single document


158
00:08:46,676 --> 00:08:48,236
that supports different
file formats.


159
00:08:49,936 --> 00:08:53,416
And exactly for that we have
an API called NSItemProvider.


160
00:08:55,296 --> 00:08:58,956
In one sentence,
NSItemProvider is a single item


161
00:08:59,046 --> 00:09:00,536
with multiple representations.


162
00:09:01,686 --> 00:09:04,266
Let me show you a code
example to explain it better.


163
00:09:05,786 --> 00:09:10,846
Now, we create NSItemProvider,
then we call register the item


164
00:09:10,846 --> 00:09:14,156
for type identifier to
add a new representation


165
00:09:14,156 --> 00:09:15,196
to that item provider.


166
00:09:16,166 --> 00:09:17,496
In that case, it's plain text.


167
00:09:19,136 --> 00:09:22,906
Now, if the extension asks for
the plain text representation,


168
00:09:23,336 --> 00:09:26,106
the system will call this
load handler block here.


169
00:09:27,546 --> 00:09:30,226
And there you are supposed
to create your text document


170
00:09:30,226 --> 00:09:32,746
on the fly and call
the completion handler


171
00:09:32,746 --> 00:09:34,976
to return the data
back to the extension.


172
00:09:34,976 --> 00:09:36,416
Same for PDF.


173
00:09:37,106 --> 00:09:41,586
As soon as the extension asks
for a PDF representation,


174
00:09:42,026 --> 00:09:45,546
we call the load handler, there
you create your PDF on the fly


175
00:09:45,546 --> 00:09:47,646
and call the completion
and let it return data back


176
00:09:48,106 --> 00:09:49,076
to the extension.


177
00:09:51,136 --> 00:09:53,146
To display Share Sheet,


178
00:09:53,506 --> 00:09:55,666
simply create a UI
activity view controller


179
00:09:56,306 --> 00:10:01,786
and offer the item provider
options in the initializer.


180
00:10:03,266 --> 00:10:06,986
Now, in the first example with
the compose sheet you saw,


181
00:10:07,456 --> 00:10:09,216
we have this little
preview in the top right.


182
00:10:09,796 --> 00:10:11,826
The hosts should offer
previews as well.


183
00:10:13,346 --> 00:10:15,696
Those previews represent
what will be shared,


184
00:10:17,076 --> 00:10:19,776
and also they need to be
simple and efficient to create.


185
00:10:19,776 --> 00:10:21,026
They can't be too large.


186
00:10:22,966 --> 00:10:25,756
Again, for that, we have an
API in NSItemProvider as well.


187
00:10:26,566 --> 00:10:28,166
It's called preview
image handler.


188
00:10:29,276 --> 00:10:32,006
And as soon as the
extension asks for a preview,


189
00:10:32,286 --> 00:10:34,876
we call this block here,
and there you are supposed


190
00:10:34,876 --> 00:10:37,886
to create your thumbnail or
your preview representation


191
00:10:37,886 --> 00:10:40,776
as an image on the fly and
call the completion handler


192
00:10:40,776 --> 00:10:41,836
to return that data back.


193
00:10:42,806 --> 00:10:44,936
Now we need to change our
perspective yet again.


194
00:10:45,526 --> 00:10:47,616
We talked first about
implementing extensions.


195
00:10:48,686 --> 00:10:51,526
Then we talked about supporting
extensions as a host app.


196
00:10:52,166 --> 00:10:53,266
Now let's look at what it's


197
00:10:53,266 --> 00:10:55,626
like to be an extension
developer again and how


198
00:10:55,626 --> 00:10:57,306
to declare your support
with the kind


199
00:10:57,306 --> 00:11:00,126
of data the host app can
offer to your extension.


200
00:11:01,556 --> 00:11:04,576
For example, maybe you like
to have full sharing service,


201
00:11:04,576 --> 00:11:07,086
and you want to declare that you
are sharing extension support


202
00:11:07,196 --> 00:11:10,086
images and movie.


203
00:11:11,656 --> 00:11:15,026
Now, let's make three
extensions in that case.


204
00:11:16,096 --> 00:11:20,236
One extension should support --
one extension supports images,


205
00:11:20,866 --> 00:11:22,416
another one can handle movies,


206
00:11:22,736 --> 00:11:25,356
and a third one handles
images and movies.


207
00:11:27,286 --> 00:11:28,116
Now let's see what happens


208
00:11:28,116 --> 00:11:30,176
if the host app shares
the single image.


209
00:11:31,896 --> 00:11:33,316
In that case, the first


210
00:11:33,316 --> 00:11:35,456
and third extension will
appear in the Share Sheet.


211
00:11:37,366 --> 00:11:39,536
Now, same way for
the movie case.


212
00:11:40,176 --> 00:11:44,616
If the host application shares
a single movie, the second


213
00:11:44,616 --> 00:11:47,356
and third extension in the
Share Sheet, that makes sense.


214
00:11:48,286 --> 00:11:50,856
However, what happens
if the host


215
00:11:51,286 --> 00:11:53,106
of a share supports
image and movie?


216
00:11:53,106 --> 00:11:55,426
You would think all the
extensions would appear


217
00:11:55,426 --> 00:11:58,786
in the sheet; however, this
is currently not the case


218
00:11:58,856 --> 00:12:02,166
since in iOS 8 the
implementation requires


219
00:12:02,276 --> 00:12:07,036
that extension can handle all
two types of file formats.


220
00:12:07,036 --> 00:12:10,246
It's a bit unfortunate


221
00:12:10,316 --> 00:12:14,276
since user extension developer
would probably like to support


222
00:12:14,276 --> 00:12:17,856
as many extensions as possible,
and to do that, you should offer


223
00:12:17,856 --> 00:12:19,866
as many representations
as possible as well.


224
00:12:20,426 --> 00:12:23,226
But in that case, you
actually get less extensions


225
00:12:23,226 --> 00:12:25,946
than by just sharing a
single representation,


226
00:12:25,946 --> 00:12:27,526
like movie or image.


227
00:12:29,176 --> 00:12:30,916
So we added a new
behavior in iOS 9.


228
00:12:32,996 --> 00:12:37,606
You can opt in by adding
the NSExtension activation


229
00:12:37,606 --> 00:12:38,396
dictionary version


230
00:12:38,806 --> 00:12:42,426
in new extensions info
plist, set it to two.


231
00:12:43,146 --> 00:12:46,836
After that, your
extension will appear even


232
00:12:46,836 --> 00:12:49,146
if the host app shares
both image and movie,


233
00:12:49,146 --> 00:12:51,896
and even if you are only
interested in movies or images.


234
00:12:54,256 --> 00:12:56,536
Now, those are high-level
activation rules,


235
00:12:57,186 --> 00:13:00,546
but we also support activation
rules that are just predicates.


236
00:13:01,896 --> 00:13:04,366
Again, predicates can be
very simple but also very,


237
00:13:04,366 --> 00:13:05,876
very powerful like
this one here.


238
00:13:06,796 --> 00:13:08,566
I won't go into details
right now,


239
00:13:08,666 --> 00:13:10,706
but check out the App
Extension Developer Guide


240
00:13:10,706 --> 00:13:11,626
for more information.


241
00:13:11,626 --> 00:13:19,546
Now, let's talk about
icons for extensions.


242
00:13:19,636 --> 00:13:23,886
As I mentioned before,


243
00:13:24,016 --> 00:13:26,866
Share extensions
represents your application


244
00:13:26,866 --> 00:13:28,516
of Web Service within
a Share Sheet.


245
00:13:29,266 --> 00:13:32,056
Because of that, we simply
use your application icon


246
00:13:32,056 --> 00:13:35,156
or a containing applications
icon as the icon


247
00:13:35,156 --> 00:13:37,226
in the Share Sheet, so
there's no additional work


248
00:13:37,226 --> 00:13:38,606
for you needed.


249
00:13:41,146 --> 00:13:44,486
Action extensions, on the other
hand, require template images.


250
00:13:44,896 --> 00:13:49,916
We require two sizes, one for
the iPad, one for the iPhone.


251
00:13:52,186 --> 00:13:53,746
And they reside in
the extension bundle.


252
00:13:54,756 --> 00:13:57,666
Now, let me explain how
template images work.


253
00:13:59,166 --> 00:14:00,976
Think of it as, like, a stencil.


254
00:14:02,006 --> 00:14:04,216
A template image is a
black-and-white representation


255
00:14:04,706 --> 00:14:07,386
with a transparent background,
and the system then takes


256
00:14:07,386 --> 00:14:09,316
that stencil of that
black-and-white image


257
00:14:10,166 --> 00:14:14,826
and creates the actual
icon for the Share Sheet.


258
00:14:15,666 --> 00:14:21,496
And again, require two sizes,
60 points for the iPhone,


259
00:14:21,986 --> 00:14:23,526
76 points for the iPad.


260
00:14:25,816 --> 00:14:30,076
However, I encourage you to use
image assets in your extension


261
00:14:30,236 --> 00:14:33,406
and offer all different --
all the different icon sizes


262
00:14:33,506 --> 00:14:35,086
that are for application icons.


263
00:14:35,756 --> 00:14:39,096
That way your app extension
will be far more future-proof.


264
00:14:42,896 --> 00:14:45,126
So much about Action
Share extensions.


265
00:14:45,126 --> 00:14:46,876
Let's invite Ian
on stage to talk


266
00:14:46,876 --> 00:14:48,136
about Today Widget enhancements.


267
00:14:49,516 --> 00:14:56,826
[ Applause ]


268
00:14:57,326 --> 00:14:59,386
>> IAN BAIRD: Thank you, Sophia.


269
00:15:00,376 --> 00:15:04,696
Hi. I'm Ian Baird, CoreOS
engineer, and today I am going


270
00:15:04,696 --> 00:15:07,096
to talk to you about
Today Widget enhancements.


271
00:15:08,576 --> 00:15:09,546
First a quick recap.


272
00:15:10,136 --> 00:15:11,386
As you remember from last year,


273
00:15:11,856 --> 00:15:15,056
Today Widgets give you quick
information at a glance,


274
00:15:15,056 --> 00:15:18,236
so your stock prices,
your sports scores.


275
00:15:18,686 --> 00:15:20,706
It tells you how long
it's going to take for you


276
00:15:20,706 --> 00:15:22,386
to get home from work.


277
00:15:23,836 --> 00:15:26,566
So today I am going to
talk to you about how


278
00:15:26,566 --> 00:15:29,506
to enhance your Today
Widget, how to make sure


279
00:15:29,566 --> 00:15:33,096
that the model data is
always up-to-date and in sync


280
00:15:33,186 --> 00:15:34,766
with your containing app.


281
00:15:35,226 --> 00:15:37,796
I'm also going to tell
you about how to make sure


282
00:15:37,996 --> 00:15:40,886
that your visual
representation is up-to-date


283
00:15:40,886 --> 00:15:42,966
and reflects your
widget's content as well.


284
00:15:44,026 --> 00:15:47,386
And then I am going to go over
some general best practices


285
00:15:47,466 --> 00:15:49,846
that you can use for
all of your extensions,


286
00:15:50,076 --> 00:15:52,156
including your Today Widgets.


287
00:15:53,726 --> 00:15:54,506
Let's get started.


288
00:15:55,316 --> 00:15:57,636
This is a view of the
Notification Center.


289
00:15:57,946 --> 00:16:00,276
It's populated by Today Widgets.


290
00:16:00,856 --> 00:16:03,076
You can scroll it to
see all of the widgets,


291
00:16:03,686 --> 00:16:07,966
and if you want more information
about anything you can see here,


292
00:16:08,376 --> 00:16:12,916
you can simply tap on the
widget, and it will take you


293
00:16:12,976 --> 00:16:15,156
to the containing app
for more information.


294
00:16:16,156 --> 00:16:18,546
Now, how do we facilitate
this interaction


295
00:16:18,746 --> 00:16:21,526
between the Today Widget
and its containing app?


296
00:16:22,256 --> 00:16:25,266
Well, we do this by
the use of URL schemes.


297
00:16:25,906 --> 00:16:28,136
And now I am going to tell you
a little bit more about those.


298
00:16:28,826 --> 00:16:33,566
Interactions use these URL
schemes and some open URL API


299
00:16:33,916 --> 00:16:38,646
on NSExtension contexts to
take the user to the app.


300
00:16:38,646 --> 00:16:41,616
Now, we have some best
practices that I'd like to talk


301
00:16:41,616 --> 00:16:44,766
about today governing the
use of these URL schemes.


302
00:16:45,616 --> 00:16:49,016
First, we'd really like
you to use and concentrate


303
00:16:49,016 --> 00:16:51,626
on your app's registered
URL schemes.


304
00:16:52,196 --> 00:16:53,086
This is great.


305
00:16:54,206 --> 00:16:55,246
The next thing you want


306
00:16:55,246 --> 00:16:59,586
to use is you can use system
URL schemes, like HTTPS.


307
00:16:59,586 --> 00:17:03,016
That's going to open
a webpage in Safari.


308
00:17:03,476 --> 00:17:06,976
You can also create
messages, start phone calls,


309
00:17:07,366 --> 00:17:10,806
and perform other interactions
and start interesting workflows


310
00:17:11,006 --> 00:17:12,346
with system components.


311
00:17:12,826 --> 00:17:15,096
And here's how you do it.


312
00:17:15,366 --> 00:17:19,846
You'll notice that I am showing
a table view, did select row


313
00:17:19,846 --> 00:17:22,286
at index path callback
because a lot


314
00:17:22,286 --> 00:17:24,096
of widgets are simply
table views.


315
00:17:25,096 --> 00:17:26,336
The first thing we
are going to want


316
00:17:26,376 --> 00:17:29,006
to do is actually
construct a URL.


317
00:17:29,246 --> 00:17:32,956
We are going to do this with
the myapp URL scheme here,


318
00:17:33,256 --> 00:17:34,816
just for the sake of example.


319
00:17:35,046 --> 00:17:38,456
This is going to take
us to my containing app.


320
00:17:38,816 --> 00:17:40,026
The next thing we
are going to want


321
00:17:40,116 --> 00:17:42,376
to do is we are actually
going to want to call


322
00:17:42,376 --> 00:17:47,766
that open URL API that you can
find on the extension context,


323
00:17:48,066 --> 00:17:50,586
which is probably attached
to your view controller.


324
00:17:51,586 --> 00:17:55,036
Now, this is a little bit
different from the API we expose


325
00:17:55,036 --> 00:17:58,856
on UI application in that
it takes a call-back block,


326
00:17:59,176 --> 00:18:02,346
and this call-back block
has one boolean parameter


327
00:18:02,486 --> 00:18:04,106
that I am going to tell
you more about now.


328
00:18:05,516 --> 00:18:09,256
The success parameter is
going to be set to true


329
00:18:09,476 --> 00:18:12,446
if we were able to take
you to the containing app


330
00:18:12,946 --> 00:18:14,816
or to the system component,


331
00:18:15,106 --> 00:18:17,106
which has registered
the URL scheme.


332
00:18:17,686 --> 00:18:20,936
It's going to be set to false
if we were not able to do this,


333
00:18:21,486 --> 00:18:24,296
like if the user has not
unlocked the phone and pulls


334
00:18:24,296 --> 00:18:26,996
down the Notification Center
when the phone is locked.


335
00:18:29,076 --> 00:18:31,826
There are many other
ways of interacting


336
00:18:31,926 --> 00:18:35,046
with the containing app and
sharing data, and today I want


337
00:18:35,046 --> 00:18:36,716
to tell you about
how to use defaults


338
00:18:36,886 --> 00:18:40,306
with your containing
app; containers;


339
00:18:41,816 --> 00:18:46,096
Keychain items; and
framework data.


340
00:18:46,166 --> 00:18:49,296
Framework data is going to be
scribbled into Shared containers


341
00:18:49,406 --> 00:18:52,076
on your behalf by
system frameworks.


342
00:18:52,776 --> 00:18:58,626
And all of this is neatly
grouped up into app groups.


343
00:18:58,776 --> 00:19:00,316
First, user defaults.


344
00:19:00,706 --> 00:19:02,546
You probably know
what user defaults are


345
00:19:02,676 --> 00:19:04,146
if you've been developing
for Cocoa


346
00:19:04,146 --> 00:19:05,436
or Cocoa Touch for a while.


347
00:19:05,676 --> 00:19:08,276
They are small pieces
of configuration data.


348
00:19:08,326 --> 00:19:11,926
They are like little
strings, numbers, booleans,


349
00:19:12,196 --> 00:19:15,456
and other things that affect
the configuration of your app.


350
00:19:15,776 --> 00:19:18,216
You can share these pieces
of configuration data


351
00:19:18,616 --> 00:19:21,516
between your containing
app and your extensions


352
00:19:21,836 --> 00:19:26,436
by using the NSUser defaults
init with suite name API.


353
00:19:26,436 --> 00:19:31,316
You are going to pass the app
group identifier to this API.


354
00:19:31,316 --> 00:19:34,626
Now there's an important
thing to remember about this,


355
00:19:35,036 --> 00:19:39,646
this API doesn't merely unlock
your containing app's defaults,


356
00:19:39,806 --> 00:19:42,566
your standard user defaults
in your containing app.


357
00:19:42,996 --> 00:19:45,996
What it does is it
creates a new default suite


358
00:19:46,266 --> 00:19:49,356
which your containing
app can also have access


359
00:19:49,356 --> 00:19:53,306
to if it participates in the app
group, so it's super important


360
00:19:53,516 --> 00:19:56,456
that you use this API, not
only in your extension,


361
00:19:56,666 --> 00:19:58,456
but in your containing
app when you want


362
00:19:58,456 --> 00:20:01,406
to change these configuration
items in the defaults.


363
00:20:02,556 --> 00:20:06,076
The next thing I want to
talk to you about are things


364
00:20:06,076 --> 00:20:08,826
that you can use inside
of the shared container


365
00:20:09,706 --> 00:20:14,196
which the containing app and its
extension all have access to.


366
00:20:14,756 --> 00:20:17,216
The first thing you can
keep in there is model data.


367
00:20:17,886 --> 00:20:22,846
Model data is stuff like SQLite
files, core data data stores


368
00:20:23,186 --> 00:20:26,426
and maybe even model
objects persisted


369
00:20:26,426 --> 00:20:28,116
to things like plist files.


370
00:20:28,116 --> 00:20:30,466
You can store all of this
inside of a shared container


371
00:20:30,856 --> 00:20:32,326
where the containing application


372
00:20:32,586 --> 00:20:36,646
and its extensions can
all have access to it.


373
00:20:37,286 --> 00:20:39,006
You can also store
documents in there.


374
00:20:39,146 --> 00:20:42,166
Earlier, Sophia was talking
about a text application,


375
00:20:42,526 --> 00:20:45,756
and maybe this text application
should store its text documents


376
00:20:46,066 --> 00:20:49,086
inside of the shared container,
where it can edit them


377
00:20:49,486 --> 00:20:53,306
and the extension can edit it.


378
00:20:53,586 --> 00:20:58,976
Next, you can also store
media, media items like images,


379
00:20:59,486 --> 00:21:03,826
video clips, audio files, and
other things that you want


380
00:21:03,826 --> 00:21:06,646
to have accessible to both
your containing application


381
00:21:07,086 --> 00:21:08,306
and its extensions.


382
00:21:09,066 --> 00:21:11,866
Now, if you are storing
cacheable items


383
00:21:11,866 --> 00:21:14,446
in the shared container, that's
probably not all that good.


384
00:21:14,446 --> 00:21:17,046
I think you want to keep that
in caches where it can be purged


385
00:21:17,046 --> 00:21:19,706
if we start running
low on space.


386
00:21:20,306 --> 00:21:26,226
Now, to set up core data to
use the shared container,


387
00:21:26,666 --> 00:21:28,926
I want to show you a
little bit of sample code,


388
00:21:29,076 --> 00:21:31,746
and this is sample code that
you are going to use both


389
00:21:31,746 --> 00:21:34,426
in your containing app
and any of its extensions.


390
00:21:35,136 --> 00:21:39,016
You are simply modifying the
code that Xcode already produced


391
00:21:39,016 --> 00:21:40,526
for you via the template.


392
00:21:41,166 --> 00:21:43,906
So the first thing you will want
to do is create a new property


393
00:21:44,186 --> 00:21:45,666
or change the existing one.


394
00:21:46,096 --> 00:21:49,816
And in this case, we are calling
it secure app group presentation


395
00:21:49,816 --> 00:21:50,706
store URL.


396
00:21:52,096 --> 00:21:54,916
Of course, the first thing we
need to do is get an instance


397
00:21:54,976 --> 00:21:56,306
of the NSFile manager.


398
00:21:57,216 --> 00:22:01,516
And next, on file manager, we
are going to call container URL


399
00:22:01,626 --> 00:22:04,976
for security application
group identifier, and again,


400
00:22:05,256 --> 00:22:08,656
pass the app group identifier
that we had set up previously.


401
00:22:10,006 --> 00:22:11,226
After that, we are going


402
00:22:11,226 --> 00:22:15,046
to append the store
file name to that URL.


403
00:22:15,416 --> 00:22:18,276
That URL points in to
the shared container,


404
00:22:18,456 --> 00:22:22,976
where both the containing app
and the extension can access it.


405
00:22:23,236 --> 00:22:25,976
Now we need to use this store
URL, so we are going to set


406
00:22:25,976 --> 00:22:27,936
up our persistent
store coordinator.


407
00:22:28,216 --> 00:22:29,356
And the way we are
going to do this is


408
00:22:29,356 --> 00:22:33,696
by first creating a store
coordinator using our manage


409
00:22:33,696 --> 00:22:37,126
object model, and then we are
going to grab the instance


410
00:22:37,126 --> 00:22:39,256
of the store URL
we just created.


411
00:22:40,526 --> 00:22:43,826
Finally, we are going to
add this persistent store


412
00:22:44,136 --> 00:22:47,546
to the store coordinator
using the URL we just created.


413
00:22:47,546 --> 00:22:49,166
This is going to
point -- remember --


414
00:22:49,166 --> 00:22:52,466
to the SQLite file that's
backing this persistent store


415
00:22:52,866 --> 00:22:53,986
in the Shared container.


416
00:22:54,906 --> 00:22:56,906
Finally, we return
it to the caller.


417
00:22:59,246 --> 00:23:03,186
Lastly, we actually want to set
up the manage object context,


418
00:23:03,266 --> 00:23:06,366
and we will do this by grabbing
our persistent store coordinator


419
00:23:06,366 --> 00:23:09,466
and then creating a
manage object context.


420
00:23:09,946 --> 00:23:12,266
And then we will
set this coordinator


421
00:23:12,326 --> 00:23:14,216
to be the persistent
store coordinator


422
00:23:14,536 --> 00:23:18,146
for the manage object
context and then return it.


423
00:23:18,586 --> 00:23:21,676
And that's all you have to
do to set up core data inside


424
00:23:21,676 --> 00:23:24,456
of your containing app
and any of its extensions


425
00:23:24,696 --> 00:23:29,046
to use a shared persistent
store which is located


426
00:23:29,296 --> 00:23:30,456
in the shared container.


427
00:23:32,196 --> 00:23:37,346
So core data may not be what
you need for your application.


428
00:23:37,746 --> 00:23:40,676
Let's pretend that you are using
the plist files that I talked


429
00:23:40,676 --> 00:23:43,366
about earlier to
serialize your model objects


430
00:23:43,656 --> 00:23:44,956
into the shared container.


431
00:23:45,576 --> 00:23:47,566
At this point, you are
going to have to worry


432
00:23:47,566 --> 00:23:51,836
about synchronization, access,
and all this kind of stuff


433
00:23:52,196 --> 00:23:56,156
in the shared container because
very potentially, your extension


434
00:23:56,596 --> 00:23:58,696
and your application
could be attempting


435
00:23:58,696 --> 00:24:01,126
to simultaneously
modify these files,


436
00:24:01,396 --> 00:24:03,326
which is not good
for data consistency.


437
00:24:04,336 --> 00:24:08,276
So you may actually have
to use exclusive locks.


438
00:24:08,586 --> 00:24:10,576
And you need to be
really super careful


439
00:24:10,576 --> 00:24:13,406
about using exclusive locks for
data in the shared container


440
00:24:13,906 --> 00:24:16,406
because when an extension
is killed,


441
00:24:16,756 --> 00:24:20,136
if it's suspended while
holding on to an exclusive lock.


442
00:24:20,766 --> 00:24:23,156
Again, this isn't good
for data consistency.


443
00:24:23,926 --> 00:24:26,726
So what do you need
to do about this?


444
00:24:27,456 --> 00:24:29,506
Well, I'd like to talk
to you a little bit more


445
00:24:29,506 --> 00:24:30,936
about task assertions.


446
00:24:31,346 --> 00:24:34,616
Task assertions are a great
way for your extension


447
00:24:34,976 --> 00:24:39,046
to tell the operating system
that, hey, I'm doing something


448
00:24:39,046 --> 00:24:40,986
that you probably
shouldn't interrupt.


449
00:24:41,636 --> 00:24:46,456
And if you interrupt it, well,
I'd like to get some sort


450
00:24:46,456 --> 00:24:48,456
of call-back so I can
clean things up first.


451
00:24:49,696 --> 00:24:52,846
Remember that extensions are
suspended pretty aggressively


452
00:24:52,846 --> 00:24:54,306
when they are no longer in use.


453
00:24:54,816 --> 00:24:59,106
When the user swipes down to
expose the Notification Center


454
00:24:59,336 --> 00:25:02,476
and then swipes back up to
dismiss it, we are going


455
00:25:02,476 --> 00:25:05,786
to suspend all of the
extensions in play at that time.


456
00:25:06,366 --> 00:25:07,866
So that could be pretty quick.


457
00:25:09,256 --> 00:25:12,356
So you are going to want
to protect serialization


458
00:25:12,436 --> 00:25:13,846
and other cleanup tasks


459
00:25:13,966 --> 00:25:16,096
with these background
task assertions.


460
00:25:17,046 --> 00:25:18,596
And I am going to
show you how to do


461
00:25:18,596 --> 00:25:22,316
that now using the
NSProcess info API.


462
00:25:23,596 --> 00:25:25,316
So the first thing
you are going to want


463
00:25:25,416 --> 00:25:28,736
to do is get the
NSProcess info instance


464
00:25:29,006 --> 00:25:31,756
by calling the process
info factory method.


465
00:25:32,256 --> 00:25:35,256
Next you are going to want


466
00:25:35,256 --> 00:25:38,766
to call the API perform
expiring activity with reason,


467
00:25:38,876 --> 00:25:41,736
and I am going to take you
through how to set up this call.


468
00:25:42,336 --> 00:25:46,666
The first parameter
you are going to pass


469
00:25:46,666 --> 00:25:49,106
to this method is a
very short string.


470
00:25:49,676 --> 00:25:53,986
This short string is for you,
not for the operating system.


471
00:25:54,336 --> 00:25:56,706
This tells you what
you are doing inside


472
00:25:56,706 --> 00:25:57,876
of the protected task.


473
00:25:58,666 --> 00:26:02,036
The next thing you
are going to pass


474
00:26:02,036 --> 00:26:04,976
to this API is a
call-back block,


475
00:26:05,646 --> 00:26:08,866
and the call-back block is going
to be used in one of two ways.


476
00:26:09,136 --> 00:26:11,036
And let me go through
the first way with you.


477
00:26:11,536 --> 00:26:14,916
First, it's going to be
called if we were able


478
00:26:14,916 --> 00:26:17,986
to acquire a background task
assertion on your behalf


479
00:26:18,236 --> 00:26:20,066
with expired set to false.


480
00:26:20,516 --> 00:26:23,086
This means to you
that it's safe for you


481
00:26:23,276 --> 00:26:26,976
to perform some sensitive
task like serializing data


482
00:26:26,976 --> 00:26:28,596
that you don't want
to be interrupted.


483
00:26:29,806 --> 00:26:32,836
Now, since a task
assertion cannot be taken


484
00:26:32,836 --> 00:26:37,196
out indefinitely, when the task
assertion is about to expire,


485
00:26:37,196 --> 00:26:39,606
it's on the cusp
of being let go,


486
00:26:41,196 --> 00:26:44,686
the operating system is going
to call your call-back again,


487
00:26:44,856 --> 00:26:47,366
this time with expired
set to true.


488
00:26:47,916 --> 00:26:51,976
This means that you need to
cancel whatever task you have


489
00:26:51,976 --> 00:26:56,926
in flight and prepare
to be suspended.


490
00:26:57,246 --> 00:27:01,606
Now, when you exit the
block, we are going


491
00:27:01,606 --> 00:27:04,226
to release the task
assertion on your behalf.


492
00:27:04,476 --> 00:27:06,456
There's nothing else
that you need to do.


493
00:27:07,386 --> 00:27:11,606
So the second way that this
can work is that we were unable


494
00:27:11,606 --> 00:27:14,446
to acquire a task
assertion for you at all.


495
00:27:14,446 --> 00:27:17,716
What we are going to do in
this case is we are going


496
00:27:17,716 --> 00:27:20,616
to immediately call
your call-back block


497
00:27:20,896 --> 00:27:22,756
with expired set to true.


498
00:27:23,726 --> 00:27:26,866
You probably don't want
to take an exclusive lock


499
00:27:26,866 --> 00:27:28,546
in the shared container
at this point


500
00:27:28,706 --> 00:27:31,996
because if you get suspended,
nothing is protecting you.


501
00:27:33,586 --> 00:27:36,586
At this point, you
want to clean up


502
00:27:37,206 --> 00:27:38,786
and get ready to be suspended.


503
00:27:38,956 --> 00:27:42,046
You only have a few brief
seconds to make sure


504
00:27:42,046 --> 00:27:43,966
to clean everything up.


505
00:27:45,456 --> 00:27:52,046
So that's a complex topic, but
I think there are three things


506
00:27:52,046 --> 00:27:55,306
that you need to come away with
this talk about task assertions.


507
00:27:56,456 --> 00:27:58,746
The first is that
they're released


508
00:27:58,816 --> 00:28:01,206
when your code exits
the call-back block.


509
00:28:02,076 --> 00:28:05,566
We grab one at the beginning,
and if everything's successful,


510
00:28:05,566 --> 00:28:08,356
we set expired to false,
and then we hold on to


511
00:28:08,356 --> 00:28:10,406
that task assertion for you


512
00:28:10,716 --> 00:28:13,966
until your code exits
that block scope.


513
00:28:15,916 --> 00:28:18,076
The next thing to remember is


514
00:28:18,076 --> 00:28:20,726
that there is potentially
re-enter and execution


515
00:28:20,846 --> 00:28:22,386
of your call-back
for the purposes


516
00:28:22,386 --> 00:28:25,196
of notifying you
about expiration.


517
00:28:25,836 --> 00:28:28,626
Again, we can call your
call-back block again


518
00:28:28,626 --> 00:28:31,846
with expired set to true to
give you a hint that, hey,


519
00:28:31,846 --> 00:28:34,246
this task assertion
is about to expire


520
00:28:34,246 --> 00:28:35,686
and it's time for
you to clean up.


521
00:28:36,976 --> 00:28:37,816
And then finally,


522
00:28:37,926 --> 00:28:41,126
task assertions are not always
available for your extension.


523
00:28:41,536 --> 00:28:44,606
Sometimes you will call and
expired will be immediately set


524
00:28:44,606 --> 00:28:47,306
to true and your call-back
block will be executed that way


525
00:28:47,306 --> 00:28:51,726
and you will not get a chance to
perform some critical operation.


526
00:28:51,726 --> 00:28:53,556
You need to be prepared
to deal with that


527
00:28:54,406 --> 00:28:55,406
because it will happen.


528
00:28:57,006 --> 00:29:01,256
Next, these task assertions only
protect the code in the scope


529
00:29:01,256 --> 00:29:03,376
of that block, so they
are generally used


530
00:29:03,416 --> 00:29:06,536
for very simple things,
like quick serialization,


531
00:29:06,536 --> 00:29:07,676
something that's synchronous.


532
00:29:08,376 --> 00:29:11,866
What do you do if you
need to coordinate


533
00:29:11,866 --> 00:29:13,416
with work on another queue?


534
00:29:13,966 --> 00:29:17,046
Because you remember that the
task assertions are scoped


535
00:29:17,106 --> 00:29:18,316
to that call-back block.


536
00:29:19,316 --> 00:29:23,266
Well, a call-back
block must synchronize


537
00:29:23,266 --> 00:29:25,016
with protected work
on other queues.


538
00:29:25,356 --> 00:29:29,146
So for instance, if you have
something on the main queue


539
00:29:29,716 --> 00:29:32,766
that you wish to protect,
you need to make sure


540
00:29:32,926 --> 00:29:36,336
that that call-back block does
not exit the original protected


541
00:29:36,386 --> 00:29:39,116
block scope before that
work has completed.


542
00:29:39,986 --> 00:29:42,696
So here's an example
of how not to do it.


543
00:29:43,266 --> 00:29:47,056
By dispatch asyncing to the main
queue from within the block,


544
00:29:47,606 --> 00:29:50,076
execution will exit
that block's scope,


545
00:29:50,466 --> 00:29:53,466
possibly before perform
interrupt will work


546
00:29:54,006 --> 00:29:54,786
has completed.


547
00:29:55,356 --> 00:29:56,286
This is pretty bad.


548
00:29:56,956 --> 00:29:58,966
So in this case,
your block needs


549
00:29:59,016 --> 00:30:02,876
to synchronize via dispatch
sync or dispatch semaphores


550
00:30:02,876 --> 00:30:06,356
or whatever method you
choose with the main queue.


551
00:30:06,656 --> 00:30:08,956
And remember that this work
that you are dispatching


552
00:30:09,506 --> 00:30:11,616
to another queue -- it
doesn't necessarily have


553
00:30:11,656 --> 00:30:14,116
to be the main queue --
needs to be cancelable


554
00:30:14,356 --> 00:30:18,426
because we might call back your
block with expired set to true,


555
00:30:18,776 --> 00:30:20,586
and at this point,
you will need to clean


556
00:30:20,586 --> 00:30:24,336
up whatever you are doing, exit,
go back to the block, drop out,


557
00:30:24,606 --> 00:30:26,226
and release the task assertion.


558
00:30:26,796 --> 00:30:31,756
And it's actually safe
for you to do this


559
00:30:31,806 --> 00:30:34,476
because this call-back
block is executing


560
00:30:34,476 --> 00:30:35,986
on a private system queue.


561
00:30:36,386 --> 00:30:37,526
You are not going to dead-lock


562
00:30:37,586 --> 00:30:39,906
because we are not going
to call back into it.


563
00:30:41,236 --> 00:30:43,816
Now, that was a lot.


564
00:30:44,646 --> 00:30:47,296
I understand.


565
00:30:47,626 --> 00:30:50,646
Moving along here.


566
00:30:50,886 --> 00:30:55,566
In our new multitasking world,
we can now run into situations


567
00:30:55,906 --> 00:30:59,166
where your extension and the
containing application are


568
00:30:59,166 --> 00:31:00,586
running simultaneously.


569
00:31:01,186 --> 00:31:03,736
And this means that if
something happens inside


570
00:31:03,736 --> 00:31:06,956
of your containing app that
changes your model data state,


571
00:31:07,696 --> 00:31:10,776
potentially your extension
could be out of sync


572
00:31:11,276 --> 00:31:13,376
with the model state,
and this is bad.


573
00:31:14,106 --> 00:31:17,776
So one way, one thing you
can use to keep everyone


574
00:31:17,776 --> 00:31:20,806
on the same page is the
Darwin Notification Center.


575
00:31:21,346 --> 00:31:24,236
Now, the API is similar to
the NSNotification Center,


576
00:31:25,306 --> 00:31:28,056
but it's a lot simpler, and
there's a smaller number


577
00:31:28,056 --> 00:31:30,036
of use cases for
which it is applicable


578
00:31:30,416 --> 00:31:32,766
to your containing
app and its extension.


579
00:31:33,366 --> 00:31:36,746
For example today, we are
going to show you how to use it


580
00:31:36,746 --> 00:31:39,536
to hint your extension
to reload the model.


581
00:31:39,536 --> 00:31:41,206
And this is how you do it.


582
00:31:41,676 --> 00:31:45,226
First, inside of that containing
app, you are going to want


583
00:31:45,226 --> 00:31:48,606
to get an instance of the
Darwin Notification Center,


584
00:31:48,976 --> 00:31:51,916
and you will do this by
calling CFNotificationCenter,


585
00:31:52,316 --> 00:31:53,926
get Darwin notify Center.


586
00:31:54,956 --> 00:31:58,816
Then you are going to pass this
notification center instance


587
00:31:59,116 --> 00:32:01,686
to CFNotificationCenter
post notification.


588
00:32:03,226 --> 00:32:06,276
The next thing you are going to
want to do is to pick a string.


589
00:32:06,406 --> 00:32:08,956
This string is going to
represent your notification,


590
00:32:09,376 --> 00:32:11,566
and you are going to use
it in your containing app


591
00:32:11,946 --> 00:32:15,786
and any extensions with which
to observe this notification.


592
00:32:16,756 --> 00:32:17,986
And then you want to pass true.


593
00:32:19,076 --> 00:32:23,506
In your extension, again,
you are going to want


594
00:32:23,506 --> 00:32:26,156
to get an instance of the
Darwin Notification Center,


595
00:32:27,646 --> 00:32:29,006
and you are going
to want to pass this


596
00:32:29,006 --> 00:32:31,406
to CFNotificationCenter
at observer.


597
00:32:31,896 --> 00:32:35,096
This allows you to observe
for this notification.


598
00:32:36,306 --> 00:32:38,616
The next thing you are going
to want to do is you are going


599
00:32:38,616 --> 00:32:40,026
to want to pass a
call-back block.


600
00:32:40,456 --> 00:32:43,106
This is the call-back
block which is executed


601
00:32:43,466 --> 00:32:45,116
when the system notices


602
00:32:45,276 --> 00:32:47,596
that this notification
has been emitted.


603
00:32:48,786 --> 00:32:50,636
Then you want to pass
the short string.


604
00:32:51,246 --> 00:32:54,866
And finally, deliver
immediately.


605
00:32:56,016 --> 00:32:58,916
This makes sure that
everything stays up-to-date


606
00:32:59,146 --> 00:33:01,836
and the model inside of
your extension is reloaded


607
00:33:01,986 --> 00:33:04,296
when the containing app
passes it this hint.


608
00:33:04,436 --> 00:33:08,076
Now, remember I am calling it a
hint so you probably don't want


609
00:33:08,076 --> 00:33:11,856
to use this for coordinating
locks between your extension


610
00:33:12,116 --> 00:33:16,816
and your containing app because
it's not always guaranteed


611
00:33:17,086 --> 00:33:18,636
that your extension
is going to be


612
00:33:18,636 --> 00:33:20,826
around to receive
these notifications.


613
00:33:21,366 --> 00:33:28,066
So that's how to keep your
data model up-to-date.


614
00:33:28,346 --> 00:33:30,506
How do you keep your
widgets visual


615
00:33:30,506 --> 00:33:31,746
representation up-to-date?


616
00:33:31,746 --> 00:33:33,756
And next I would like
to tell you about that.


617
00:33:33,756 --> 00:33:37,146
We are going to use something
called background refresh.


618
00:33:38,576 --> 00:33:42,196
And background refresh is
a way that the system works


619
00:33:42,196 --> 00:33:44,866
with your widget to
keep it up-to-date,


620
00:33:44,916 --> 00:33:49,716
to keep the visual
representation of it up-to-date.


621
00:33:49,716 --> 00:33:52,606
So again, we are going back
to the Notification Center,


622
00:33:52,896 --> 00:33:54,826
and here you can see
our stocks widget.


623
00:33:55,166 --> 00:33:58,396
The stocks widget, again,
shows the latest stock prices.


624
00:33:58,926 --> 00:34:08,646
What happens if, in the course
of the day, Apple stock changes?


625
00:34:09,366 --> 00:34:12,866
Well, this notification
will probably be emitted


626
00:34:12,866 --> 00:34:17,186
to your phone, at which point
the containing app will probably


627
00:34:17,186 --> 00:34:19,306
be expected to do
something with it.


628
00:34:20,386 --> 00:34:23,936
And this will probably change
the visual representation


629
00:34:23,936 --> 00:34:24,476
of your widget.


630
00:34:25,906 --> 00:34:29,835
Unfortunately, we will notice
here that the widget is now


631
00:34:29,835 --> 00:34:31,505
out of sync with
the stock price.


632
00:34:31,505 --> 00:34:33,846
It's showing $130.12.


633
00:34:33,846 --> 00:34:36,235
It should be $132.12.


634
00:34:36,676 --> 00:34:37,835
So how do we fix this?


635
00:34:37,976 --> 00:34:40,775
How do we make sure that
our visual representation is


636
00:34:40,835 --> 00:34:41,676
always up-to-date?


637
00:34:42,505 --> 00:34:44,696
Well, for starters,
the system is going


638
00:34:44,696 --> 00:34:47,426
to opportunistically
refresh this content.


639
00:34:47,746 --> 00:34:50,186
It's going to talk to the
widgets and see if they need


640
00:34:50,186 --> 00:34:52,126
to be updated without
having to pull


641
00:34:52,126 --> 00:34:53,565
down the Notification Center.


642
00:34:55,166 --> 00:34:58,906
Each Today Widget view
controller conforms


643
00:34:58,906 --> 00:35:00,466
to NC widget providing.


644
00:35:01,246 --> 00:35:05,596
And if the widget's view
controller implements the update


645
00:35:05,596 --> 00:35:08,956
delegate method, it gets to
participate in this system,


646
00:35:09,086 --> 00:35:10,376
and I will show you
how to do that now.


647
00:35:12,046 --> 00:35:13,846
The first thing we are
going to do is we are going


648
00:35:13,846 --> 00:35:17,156
to add widget perform update
with completion handler


649
00:35:17,536 --> 00:35:20,506
to our Today Widget view
controller that conforms


650
00:35:20,716 --> 00:35:22,446
to NC widget providing.


651
00:35:23,986 --> 00:35:26,726
As a first step, we are
going to refresh the model,


652
00:35:27,216 --> 00:35:29,486
and this is going to
do one thing for us,


653
00:35:29,486 --> 00:35:30,786
one very important thing.


654
00:35:31,096 --> 00:35:34,276
It's going to tell us whether
or not there is a change


655
00:35:34,276 --> 00:35:35,686
in the model that is going


656
00:35:35,686 --> 00:35:39,526
to materially affect the
widget's visual representation.


657
00:35:40,036 --> 00:35:43,936
If it did, then we're going
to tell the view hierarchy


658
00:35:43,996 --> 00:35:45,196
that it needs to redraw.


659
00:35:46,636 --> 00:35:49,166
And finally, inside
of it, we are going


660
00:35:49,166 --> 00:35:52,046
to take the completion
handler that was passed to us,


661
00:35:52,536 --> 00:35:54,956
and if there was
a visual change,


662
00:35:55,036 --> 00:35:56,656
we are going to pass new data.


663
00:35:57,476 --> 00:36:00,016
If there was no material
change that was going


664
00:36:00,016 --> 00:36:02,556
to affect the visual
representation of our widget,


665
00:36:02,556 --> 00:36:04,276
then we are going
to pass no data,


666
00:36:04,706 --> 00:36:07,156
and this lets our
widget be a good citizen


667
00:36:07,366 --> 00:36:09,706
in the Notification Center
because at this point,


668
00:36:09,706 --> 00:36:12,446
we are hinting the operating
system that it doesn't need


669
00:36:12,446 --> 00:36:14,206
to expend any resources


670
00:36:14,586 --> 00:36:17,346
to update the visual
representation


671
00:36:17,736 --> 00:36:18,866
of our Today Widget.


672
00:36:20,376 --> 00:36:23,056
Since we've done this, our
widget has been updated,


673
00:36:23,396 --> 00:36:31,166
and you'll notice that the
stock price is correct.


674
00:36:31,306 --> 00:36:32,986
Next, networking.


675
00:36:34,186 --> 00:36:36,886
Extensions are ephemeral
objects,


676
00:36:37,026 --> 00:36:38,456
really ephemeral processes.


677
00:36:38,546 --> 00:36:39,696
They come and they go.


678
00:36:39,746 --> 00:36:42,006
Remember, I was talking
about the user swiping down


679
00:36:42,006 --> 00:36:43,206
and then quickly swiping up.


680
00:36:43,846 --> 00:36:46,196
And this can play havoc with
things that take a while


681
00:36:46,196 --> 00:36:48,456
to work, like networking
sessions.


682
00:36:48,986 --> 00:36:53,206
And widgets are expected to
call out to cloud services


683
00:36:53,206 --> 00:36:56,306
and other things on the network
in order to process data.


684
00:36:57,046 --> 00:36:58,246
So how do we deal with this?


685
00:36:59,416 --> 00:37:01,476
Well, I'd recommend
that you take a look


686
00:37:01,476 --> 00:37:04,636
at using NSURLSession
background sessions.


687
00:37:05,026 --> 00:37:05,776
And what are these?


688
00:37:06,776 --> 00:37:10,226
These are tasks, networking
tasks, that are performed


689
00:37:10,226 --> 00:37:12,486
on your behalf by the system.


690
00:37:14,496 --> 00:37:18,366
The updates and events are
delivered to your extension


691
00:37:18,416 --> 00:37:20,096
for as long as it stays active.


692
00:37:20,776 --> 00:37:23,616
But if your extension
gets suspended or killed


693
00:37:23,616 --> 00:37:25,236
or for some reason
hangs up the phone


694
00:37:25,236 --> 00:37:27,786
with this critical system --
or with this system component,


695
00:37:28,766 --> 00:37:33,526
then the containing
application takes over error


696
00:37:33,526 --> 00:37:35,556
and event handling
on its behalf.


697
00:37:35,556 --> 00:37:37,706
And I will show you
how to set that up.


698
00:37:39,086 --> 00:37:41,616
Inside of your extension
you are going to want


699
00:37:41,616 --> 00:37:46,706
to first create an NSURLSession
configuration background session


700
00:37:46,706 --> 00:37:48,836
configuration with
identifier object.


701
00:37:49,576 --> 00:37:50,746
Or sorry, use the method.


702
00:37:51,546 --> 00:37:55,376
And, again, following in the
pattern, you are going to want


703
00:37:55,376 --> 00:37:58,426
to create an identifier
that's going to be used


704
00:37:58,756 --> 00:38:01,056
by the extension and
the containing app


705
00:38:01,056 --> 00:38:03,416
which are participating in
this background session.


706
00:38:04,206 --> 00:38:07,646
In our case, we are using
com.example.my downloadsession.


707
00:38:08,496 --> 00:38:10,146
The next thing you
are going to want


708
00:38:10,146 --> 00:38:13,526
to do is set the shared
container identifier


709
00:38:14,026 --> 00:38:15,956
on the session configuration.


710
00:38:16,476 --> 00:38:18,196
Otherwise, you are
going to have a lot


711
00:38:18,196 --> 00:38:21,166
of fun debugging while all our
sessions come back as invalid


712
00:38:21,166 --> 00:38:22,356
as soon as you start a task.


713
00:38:22,866 --> 00:38:23,686
At least I know I did.


714
00:38:23,686 --> 00:38:29,836
Next, you are going to want
to create an NSURLSession,


715
00:38:30,506 --> 00:38:32,426
passing this session
configuration


716
00:38:32,836 --> 00:38:33,896
to the initializer.


717
00:38:34,186 --> 00:38:36,326
Now, you will notice that we
are using the delegate form


718
00:38:36,326 --> 00:38:39,546
with the initializer because
the completion handler form


719
00:38:39,546 --> 00:38:42,686
of the initializer
is not valid for use


720
00:38:42,686 --> 00:38:44,386
with background URL sessions.


721
00:38:45,576 --> 00:38:48,146
Next, for the sake of
the example, we are going


722
00:38:48,146 --> 00:38:50,706
to download the apple.com
website.


723
00:38:52,116 --> 00:38:55,506
We are going to create
the task and resume it.


724
00:38:56,096 --> 00:38:59,166
And now our extension has
successfully created an


725
00:38:59,326 --> 00:39:03,186
NSURLSession in the background
and handed it off to the system,


726
00:39:03,486 --> 00:39:08,096
and the system will begin to
deliver events to the extension.


727
00:39:08,096 --> 00:39:11,296
Next, inside of our
containing app, as I was talking


728
00:39:11,296 --> 00:39:15,556
about before, we need to prepare
it for any eventualities,


729
00:39:15,766 --> 00:39:19,156
for cases where the extension
was suspended or killed


730
00:39:19,156 --> 00:39:22,586
or otherwise dismissed and can
no longer handle the events


731
00:39:22,886 --> 00:39:25,406
coming from the system
networking component.


732
00:39:25,886 --> 00:39:29,236
We do this by adding
application, handle events


733
00:39:29,386 --> 00:39:33,286
for background URL session to
our UI application delegate.


734
00:39:34,446 --> 00:39:35,806
The first step we want to take


735
00:39:35,906 --> 00:39:38,736
and the step I am taking here
again, for the sake of example,


736
00:39:39,086 --> 00:39:41,826
is to make sure the
identifier is the identifier


737
00:39:41,826 --> 00:39:42,806
that we expected.


738
00:39:43,156 --> 00:39:46,656
The system is going to pass
in the identifier associated


739
00:39:46,866 --> 00:39:51,056
with the NSURLSession for the
events that you are being asked


740
00:39:51,196 --> 00:39:53,256
to handle in the
application delegate.


741
00:39:54,706 --> 00:39:57,906
Again, just like in the
extension, we are going to set


742
00:39:57,906 --> 00:40:00,916
up an NSURLSession
configuration item


743
00:40:01,176 --> 00:40:03,466
by calling the background
session configuration


744
00:40:03,466 --> 00:40:05,626
with identifier factory method.


745
00:40:07,156 --> 00:40:10,006
And we need to set up the shared
container identifier again.


746
00:40:11,576 --> 00:40:14,206
And then we need to
call NSURLSession,


747
00:40:14,466 --> 00:40:17,066
passing this shared
configuration, and again,


748
00:40:17,146 --> 00:40:19,606
using the delegate
variant of the initializer.


749
00:40:20,146 --> 00:40:23,756
And then last but not least --
and this is very important --


750
00:40:23,756 --> 00:40:25,256
you'll miss it if
you don't look --


751
00:40:25,966 --> 00:40:28,816
is we are going to store
this completion handler back.


752
00:40:28,956 --> 00:40:31,526
We are going to save it
back in our properties


753
00:40:31,756 --> 00:40:33,246
for when we're completed,


754
00:40:33,246 --> 00:40:37,516
when we are done handling
events for this URL session.


755
00:40:37,856 --> 00:40:39,056
And you might ask,
how do you know


756
00:40:39,056 --> 00:40:40,416
when you are done
handling events?


757
00:40:40,456 --> 00:40:41,456
Well, I will show you.


758
00:40:42,536 --> 00:40:47,206
In our NSURLSession delegate,
we need to add this method.


759
00:40:47,566 --> 00:40:50,616
URL session did finish events
for background URL session.


760
00:40:50,736 --> 00:40:53,036
It will be called when
your containing app,


761
00:40:53,036 --> 00:40:54,766
or in this case the delegate


762
00:40:55,636 --> 00:40:59,436
that your containing app
dutifully appointed to take care


763
00:40:59,436 --> 00:41:04,016
of these events, is done
processing all the URL session


764
00:41:04,166 --> 00:41:06,296
events from the background
URL session.


765
00:41:06,946 --> 00:41:07,996
And the first thing we are going


766
00:41:08,076 --> 00:41:10,486
to do is get the session
configuration object,


767
00:41:11,316 --> 00:41:12,786
and then we are going
to look to make sure


768
00:41:12,786 --> 00:41:15,796
that the session configuration's
identifier matches the


769
00:41:15,796 --> 00:41:17,256
identifier that we expect.


770
00:41:18,936 --> 00:41:21,116
Then we are going to call
this completion handler


771
00:41:21,116 --> 00:41:22,426
that we saved earlier


772
00:41:23,866 --> 00:41:25,566
and release our reference
to the session.


773
00:41:25,726 --> 00:41:27,166
And at this point, we are done.


774
00:41:27,616 --> 00:41:32,026
We have successfully handled
any of the events that have come


775
00:41:32,156 --> 00:41:35,326
to our containing app
from the system component


776
00:41:35,566 --> 00:41:38,886
which was previously
started by the extension.


777
00:41:40,286 --> 00:41:42,716
Now, you can use this
technique for any


778
00:41:42,716 --> 00:41:45,506
of your other extension
types, not just Today Widgets.


779
00:41:45,506 --> 00:41:47,056
It's a really great technique.


780
00:41:47,496 --> 00:41:50,036
But one place where
you can't use it is


781
00:41:50,036 --> 00:41:52,086
for your Watch OS 1 extensions.


782
00:41:52,946 --> 00:41:55,076
Instead, we would prefer


783
00:41:55,076 --> 00:41:57,426
that you use background
task assertions


784
00:41:57,626 --> 00:42:01,276
to protect these small tasks,
and you can find out more


785
00:42:01,276 --> 00:42:04,816
about it by going to
WatchKit Tips and Tricks


786
00:42:05,466 --> 00:42:09,236
in the Presidio tomorrow
at 10 a.m., given to you


787
00:42:09,236 --> 00:42:14,806
by Jake Behrens, also
known as the man in plaid.


788
00:42:15,006 --> 00:42:19,386
Next, when you are doing network
transactions, it's inevitable


789
00:42:19,386 --> 00:42:21,946
that you are going to be
challenged for credentials.


790
00:42:22,686 --> 00:42:27,376
How do you safely and securely
protect your users' privacy


791
00:42:28,466 --> 00:42:31,216
by sharing these secrets
between your containing app


792
00:42:31,766 --> 00:42:32,706
and its extensions?


793
00:42:33,666 --> 00:42:36,836
We recommend that you use
Keychain access groups


794
00:42:36,836 --> 00:42:38,436
for this, as shown here.


795
00:42:39,346 --> 00:42:43,206
You set this up inside of the
capabilities for your extension


796
00:42:43,586 --> 00:42:45,876
and for your containing app.


797
00:42:45,876 --> 00:42:48,616
And then, using the
identifier that you set


798
00:42:48,616 --> 00:42:51,256
up in your containing
app and its extensions,


799
00:42:52,586 --> 00:42:56,556
you simply pass this identifier
as the value for the k --


800
00:42:56,626 --> 00:43:01,256
access group key whenever you
add items to the Keychain.


801
00:43:01,816 --> 00:43:04,876
As shown here.


802
00:43:06,686 --> 00:43:09,066
The next thing to
tell you about this is


803
00:43:09,066 --> 00:43:11,096
that there's automatic
search behavior


804
00:43:11,276 --> 00:43:14,096
for query API using
the Keychain API.


805
00:43:14,636 --> 00:43:16,406
So sec item update.


806
00:43:17,116 --> 00:43:18,366
Sec item delete.


807
00:43:19,036 --> 00:43:23,206
And sec item copy matching all
automatically do the right thing


808
00:43:23,326 --> 00:43:26,436
by searching every
accessible Keychain for you


809
00:43:26,436 --> 00:43:29,686
so you don't have to pass the
Keychain access group identifier


810
00:43:30,016 --> 00:43:30,626
to these APIs.


811
00:43:30,626 --> 00:43:32,396
It's just a tip to remember.


812
00:43:33,396 --> 00:43:35,626
And you can find out
more about these APIs


813
00:43:35,826 --> 00:43:43,416
by watching the Security
and Your Apps video.


814
00:43:43,846 --> 00:43:47,746
In summary, today Sophia
told you all about Action


815
00:43:47,746 --> 00:43:51,426
and Share extensions, about
what they were meant to do


816
00:43:51,576 --> 00:43:54,786
and how best to use
them to share data


817
00:43:54,976 --> 00:43:57,096
with your app and the web.


818
00:43:58,806 --> 00:44:02,156
She also showed you how
to use NS item provider


819
00:44:02,506 --> 00:44:04,896
to its fullest possible
extent and how


820
00:44:04,896 --> 00:44:08,836
to make it do the hard work
of sharing data types for you.


821
00:44:10,626 --> 00:44:14,546
She also showed you how to make
your host application a great


822
00:44:14,546 --> 00:44:18,266
environment for Action and Share
extensions, and you know what?


823
00:44:18,686 --> 00:44:22,146
This increases the
value of your host app.


824
00:44:23,156 --> 00:44:27,416
Then I showed you how to enhance
your Today Widget by making sure


825
00:44:27,666 --> 00:44:31,806
that your model objects and its
visual representation always


826
00:44:31,806 --> 00:44:33,566
stayed fresh and up-to-date.


827
00:44:35,446 --> 00:44:37,566
And then we showed
you a collection


828
00:44:37,566 --> 00:44:41,566
of general best practices, like
how to securely share secrets


829
00:44:41,566 --> 00:44:43,166
and guard your customers'
privacy.


830
00:44:43,306 --> 00:44:48,456
There are the related
sessions I referenced earlier,


831
00:44:48,636 --> 00:44:51,966
the WatchKit Tips and Tricks
one tomorrow, and Security


832
00:44:51,966 --> 00:44:53,806
and Your Apps that you can view.


833
00:44:54,266 --> 00:44:59,016
And for more information,
we'd recommend that you go


834
00:44:59,016 --> 00:45:01,906
to the App Extension
Programming Guide or talk


835
00:45:02,016 --> 00:45:04,656
to our Evangelist, Curt Rothert.


836
00:45:06,916 --> 00:45:07,916
Thanks.


837
00:45:09,516 --> 00:45:12,500
[ Applause ]

