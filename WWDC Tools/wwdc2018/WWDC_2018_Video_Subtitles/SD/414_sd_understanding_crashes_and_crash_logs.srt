1
00:00:07,016 --> 00:00:15,500
[ Music ]


2
00:00:19,806 --> 00:00:22,956
>> Oh yeah, good morning, thank


3
00:00:22,956 --> 00:00:23,606
you for coming.


4
00:00:26,556 --> 00:00:27,876
I'm going to be joined by some


5
00:00:27,876 --> 00:00:29,156
very bright people in a minute.


6
00:00:29,636 --> 00:00:30,846
We have some very cool stuff


7
00:00:30,846 --> 00:00:34,066
prepared for you today.


8
00:00:34,406 --> 00:00:37,686
So let me start first by saying


9
00:00:37,686 --> 00:00:39,616
if you never write code that


10
00:00:39,616 --> 00:00:42,536
crashes this session is not for


11
00:00:42,536 --> 00:00:42,736
you.


12
00:00:43,926 --> 00:00:45,506
This is a talk for the rest of


13
00:00:45,506 --> 00:00:47,406
us, for those of us who make


14
00:00:47,406 --> 00:00:48,006
mistakes.


15
00:00:49,536 --> 00:00:51,316
Today we're going to talk about


16
00:00:51,316 --> 00:00:53,586
the tools and techniques that


17
00:00:53,586 --> 00:00:55,006
you can use to stay on top of


18
00:00:55,006 --> 00:00:56,646
your crashes if they're


19
00:00:56,646 --> 00:00:57,596
affecting your users.


20
00:00:58,336 --> 00:01:00,256
In particular I'm going to cover


21
00:01:00,256 --> 00:01:02,496
the fundamentals of crashes, why


22
00:01:02,496 --> 00:01:03,736
do they happen, what do they


23
00:01:03,736 --> 00:01:04,226
look like.


24
00:01:05,816 --> 00:01:07,326
Then I'm going to show you some


25
00:01:07,326 --> 00:01:08,646
of the tools that we have to


26
00:01:08,646 --> 00:01:10,226
access crash logs when they're


27
00:01:10,226 --> 00:01:11,026
occurring in the wild.


28
00:01:12,496 --> 00:01:13,666
Then Greg is going to come up


29
00:01:13,996 --> 00:01:15,876
and give you some more detail on


30
00:01:16,006 --> 00:01:17,246
how to read the content of a


31
00:01:17,246 --> 00:01:18,186
crash log.


32
00:01:18,996 --> 00:01:21,026
And then he's going to go in


33
00:01:21,026 --> 00:01:22,476
depth in how to read a tricky


34
00:01:22,476 --> 00:01:24,036
memory issue with a crash log.


35
00:01:24,036 --> 00:01:26,686
And then Kuba will show you how


36
00:01:26,686 --> 00:01:28,426
to catch threading races early,


37
00:01:28,426 --> 00:01:29,446
these threading races lead to


38
00:01:29,446 --> 00:01:31,446
crashes, and these crashes are


39
00:01:31,446 --> 00:01:33,866
very hard to reproduce.


40
00:01:33,866 --> 00:01:35,856
So first we should define it,


41
00:01:36,536 --> 00:01:37,316
what is a crash?


42
00:01:38,836 --> 00:01:41,206
A crash is a sudden termination


43
00:01:41,256 --> 00:01:43,406
of your app when it attempts to


44
00:01:43,406 --> 00:01:44,596
do something that is not


45
00:01:44,596 --> 00:01:44,986
allowed.


46
00:01:44,986 --> 00:01:47,296
So what's not allowed?


47
00:01:47,796 --> 00:01:49,386
Well, sometimes it's impossible


48
00:01:49,386 --> 00:01:51,626
for the CPU to execute code, the


49
00:01:51,626 --> 00:01:53,086
CPU won't divide by zero.


50
00:01:54,126 --> 00:01:55,726
Or sometimes it's the operating


51
00:01:55,726 --> 00:01:56,976
system that's enforcing some


52
00:01:57,026 --> 00:01:57,516
policy.


53
00:01:59,066 --> 00:02:00,216
The operating system will


54
00:02:00,216 --> 00:02:01,986
preserve the user experience by


55
00:02:01,986 --> 00:02:03,886
killing your app if it's taking


56
00:02:03,886 --> 00:02:05,546
too long to launch or it's using


57
00:02:05,546 --> 00:02:08,256
too much memory.


58
00:02:08,256 --> 00:02:09,476
Sometimes the programming


59
00:02:09,476 --> 00:02:11,476
language you're using is trying


60
00:02:11,476 --> 00:02:13,006
to prevent a failure and will


61
00:02:13,006 --> 00:02:13,896
trigger a crash.


62
00:02:14,456 --> 00:02:16,596
A Swift array and NSArray will


63
00:02:16,596 --> 00:02:18,156
halt your process if you attempt


64
00:02:18,156 --> 00:02:19,146
to go outside of your array


65
00:02:19,146 --> 00:02:19,586
bounds.


66
00:02:21,006 --> 00:02:22,586
Or sometimes it's you, the


67
00:02:22,586 --> 00:02:23,536
developer that's trying to


68
00:02:23,536 --> 00:02:24,276
prevent a failure.


69
00:02:24,856 --> 00:02:26,756
You may have an API where you


70
00:02:26,756 --> 00:02:28,446
assert is a parameter is non nil


71
00:02:28,446 --> 00:02:30,726
and that's perfectly all right.


72
00:02:32,176 --> 00:02:33,546
So stop me if you've seen this


73
00:02:33,546 --> 00:02:35,686
before, this is what it looks


74
00:02:35,686 --> 00:02:38,396
like in Xcode in the debugger


75
00:02:38,446 --> 00:02:39,786
when the debugger is attached to


76
00:02:39,786 --> 00:02:41,806
your app and has paused the


77
00:02:41,806 --> 00:02:43,346
process just before your app is


78
00:02:43,346 --> 00:02:43,876
terminated.


79
00:02:44,786 --> 00:02:46,396
And let's take a closer look at


80
00:02:46,396 --> 00:02:47,566
this backtrace on the left.


81
00:02:48,996 --> 00:02:51,386
You can see here how the app was


82
00:02:51,386 --> 00:02:52,986
started by the operating system


83
00:02:53,866 --> 00:02:55,446
and while we're paused we can


84
00:02:55,446 --> 00:02:56,636
see how the main function was


85
00:02:56,666 --> 00:02:58,466
called and functions are calling


86
00:02:58,466 --> 00:02:59,756
other functions within your app


87
00:03:00,596 --> 00:03:01,946
and eventually we get to this


88
00:03:02,036 --> 00:03:04,756
point where we hit a point where


89
00:03:04,756 --> 00:03:05,926
in your code where the only


90
00:03:05,926 --> 00:03:07,236
option is to crash, something


91
00:03:07,236 --> 00:03:08,006
has gone wrong.


92
00:03:09,036 --> 00:03:10,516
And ultimately the debugger


93
00:03:10,516 --> 00:03:12,126
receives a signal that this app


94
00:03:12,126 --> 00:03:14,986
is about to crash and pauses the


95
00:03:16,026 --> 00:03:16,106
app.


96
00:03:16,366 --> 00:03:18,326
Now sometimes you're not always


97
00:03:18,326 --> 00:03:19,686
conveniently attached with the


98
00:03:19,686 --> 00:03:20,886
debugger like we are here.


99
00:03:21,996 --> 00:03:23,006
When you're not attached with


100
00:03:23,006 --> 00:03:24,736
the debugger the operating


101
00:03:24,736 --> 00:03:25,846
system will capture this


102
00:03:25,906 --> 00:03:28,666
backtrace in plaintext and save


103
00:03:28,666 --> 00:03:29,976
it out to disk in a human


104
00:03:29,976 --> 00:03:31,056
readable crash log.


105
00:03:31,666 --> 00:03:34,906
Now the truth is one a release


106
00:03:34,906 --> 00:03:36,226
build of your app crashes the


107
00:03:36,226 --> 00:03:37,476
log doesn't actually look this


108
00:03:37,546 --> 00:03:37,996
pretty.


109
00:03:38,466 --> 00:03:39,726
What's actually written out is a


110
00:03:39,726 --> 00:03:41,266
list of binary names and


111
00:03:41,266 --> 00:03:41,636
addresses.


112
00:03:41,636 --> 00:03:43,266
This is a snippet from a


113
00:03:43,266 --> 00:03:44,626
unsymbolicated crash log.


114
00:03:46,106 --> 00:03:47,566
Now thankfully Xcode takes care


115
00:03:47,566 --> 00:03:49,146
of symbolicating crash logs so


116
00:03:49,146 --> 00:03:50,256
that what you'll see are those


117
00:03:50,506 --> 00:03:51,846
pretty function names, file


118
00:03:51,846 --> 00:03:53,386
names and line numbers that


119
00:03:53,386 --> 00:03:54,006
you're familiar with.


120
00:03:54,626 --> 00:03:58,946
So there are a number of ways to


121
00:03:58,946 --> 00:04:00,256
access these crash logs.


122
00:04:00,996 --> 00:04:02,416
I'd like first to talk about how


123
00:04:02,416 --> 00:04:03,926
you can access those crash logs


124
00:04:03,926 --> 00:04:05,156
from your beta testers on


125
00:04:05,156 --> 00:04:06,976
TestFlight and your customers on


126
00:04:06,976 --> 00:04:07,476
the App Store.


127
00:04:08,886 --> 00:04:10,326
You can download these crash


128
00:04:10,326 --> 00:04:12,196
logs using a feature in Xcode


129
00:04:12,196 --> 00:04:14,116
called the Crashes Organizer,


130
00:04:14,426 --> 00:04:15,896
this is what it looks like a


131
00:04:15,896 --> 00:04:16,786
beautiful dark mode.


132
00:04:18,276 --> 00:04:19,226
And let's take a tour through


133
00:04:19,226 --> 00:04:19,546
this UI.


134
00:04:19,546 --> 00:04:22,816
On the left, you can see all of


135
00:04:22,816 --> 00:04:24,336
your apps distributed over


136
00:04:24,336 --> 00:04:25,756
TestFlight and the App Store and


137
00:04:26,156 --> 00:04:27,676
we support all of our platforms


138
00:04:27,676 --> 00:04:29,796
including watchOS and app


139
00:04:29,796 --> 00:04:30,366
extensions.


140
00:04:31,936 --> 00:04:33,586
On the right, for a given crash


141
00:04:33,636 --> 00:04:35,266
point you can see the number of


142
00:04:35,266 --> 00:04:38,196
unique devices affected and we


143
00:04:38,196 --> 00:04:39,956
group crash logs by similar


144
00:04:39,956 --> 00:04:41,886
issue, by similar crash point


145
00:04:42,286 --> 00:04:43,536
and we rank them in the source


146
00:04:43,536 --> 00:04:44,756
list by the number of unique


147
00:04:44,756 --> 00:04:45,596
devices affected.


148
00:04:46,986 --> 00:04:48,056
And you can page through a


149
00:04:48,056 --> 00:04:49,626
sampling of the individual logs


150
00:04:49,626 --> 00:04:50,536
down below.


151
00:04:51,806 --> 00:04:52,596
And when you click on this


152
00:04:52,636 --> 00:04:55,006
button you can open the crash


153
00:04:55,006 --> 00:04:56,546
log in your project, in the


154
00:04:56,546 --> 00:04:57,826
debug navigator and see it


155
00:04:57,826 --> 00:04:59,076
alongside your source code.


156
00:04:59,076 --> 00:05:00,216
This is very cool if you haven't


157
00:05:00,216 --> 00:05:01,756
seen it before, we'll see that


158
00:05:01,756 --> 00:05:02,426
in a bit.


159
00:05:03,306 --> 00:05:04,456
And in the detailed view of


160
00:05:04,456 --> 00:05:05,686
course we show you a fully


161
00:05:05,686 --> 00:05:07,636
symbolicated backtrace with the


162
00:05:07,636 --> 00:05:08,606
crash point highlighted.


163
00:05:09,786 --> 00:05:10,496
So now that we have the lay of


164
00:05:10,496 --> 00:05:12,286
the land let's play with it.


165
00:05:13,516 --> 00:05:16,866
So I have Xcode open here and


166
00:05:16,866 --> 00:05:18,096
I'm going to open up the


167
00:05:18,096 --> 00:05:21,396
Organizer window and you can see


168
00:05:21,396 --> 00:05:22,716
that I've selected the Crashes


169
00:05:22,716 --> 00:05:24,096
tab, that's the second tab here


170
00:05:24,536 --> 00:05:26,276
and I've selected this chocolate


171
00:05:26,276 --> 00:05:27,516
chip app that Kuba and I are


172
00:05:27,516 --> 00:05:28,086
working on.


173
00:05:28,896 --> 00:05:31,516
And I've uploaded this build to


174
00:05:31,516 --> 00:05:32,916
TestFlight and you can see I'm


175
00:05:32,916 --> 00:05:35,256
looking at build 5 right now and


176
00:05:35,256 --> 00:05:36,526
a number of testers are


177
00:05:36,526 --> 00:05:38,046
reporting crashes, so that's not


178
00:05:38,046 --> 00:05:38,566
too good.


179
00:05:38,566 --> 00:05:39,756
But I've worked on a couple of


180
00:05:39,756 --> 00:05:41,766
these crashes you can see, but


181
00:05:41,766 --> 00:05:42,996
this first one I haven't worked


182
00:05:42,996 --> 00:05:44,296
on yet so let's try to resolve


183
00:05:44,296 --> 00:05:45,246
that.


184
00:05:45,876 --> 00:05:48,746
So this is affecting 242 devices


185
00:05:49,036 --> 00:05:50,446
and I can see the backtrace that


186
00:05:50,446 --> 00:05:51,846
was captured from the time that


187
00:05:51,846 --> 00:05:53,136
the app crashed and the crash


188
00:05:53,136 --> 00:05:53,956
point highlighted.


189
00:05:55,056 --> 00:05:55,976
Now I'm not quite sure what's


190
00:05:55,976 --> 00:05:58,136
going on yet but I bet if I open


191
00:05:58,136 --> 00:06:00,216
this crash log in our source


192
00:06:00,216 --> 00:06:01,406
code I can reason about what's


193
00:06:01,406 --> 00:06:01,966
going on.


194
00:06:02,336 --> 00:06:03,526
So I'm going to click the Open


195
00:06:03,526 --> 00:06:05,796
in Project button, select the


196
00:06:05,796 --> 00:06:07,286
project that matches build 5 of


197
00:06:07,286 --> 00:06:10,126
my app and what I do, what you


198
00:06:10,126 --> 00:06:12,146
can see is that this crash log


199
00:06:12,146 --> 00:06:13,296
has opened up in the debug


200
00:06:13,296 --> 00:06:15,096
navigator as if this app has


201
00:06:15,096 --> 00:06:15,806
just crashed.


202
00:06:16,776 --> 00:06:17,796
And you can see here that we're


203
00:06:17,796 --> 00:06:19,296
stopped on this fatal error.


204
00:06:20,556 --> 00:06:22,416
So a good question to ask myself


205
00:06:22,416 --> 00:06:23,916
is, is this a valid use of fatal


206
00:06:23,916 --> 00:06:25,106
error, I only want to be


207
00:06:25,106 --> 00:06:26,366
crashing if it's absolutely


208
00:06:26,366 --> 00:06:26,936
necessary.


209
00:06:28,316 --> 00:06:31,136
So I can see that this is an


210
00:06:31,136 --> 00:06:33,846
initializer of an enum from an


211
00:06:33,896 --> 00:06:36,756
int and that enum can only be


212
00:06:36,756 --> 00:06:38,886
zero or one, if it's not I'll


213
00:06:38,886 --> 00:06:39,796
hit this fatal error.


214
00:06:40,246 --> 00:06:41,126
So I think that this makes


215
00:06:41,196 --> 00:06:42,136
sense, this should only be


216
00:06:42,196 --> 00:06:43,796
crashing if there's some kind of


217
00:06:43,796 --> 00:06:45,086
misuse by the programmer.


218
00:06:45,796 --> 00:06:48,856
So I can see the caller of this


219
00:06:48,856 --> 00:06:50,476
initializer if I navigate up the


220
00:06:50,536 --> 00:06:53,076
call stack here and I can see


221
00:06:53,076 --> 00:06:54,396
it's this tableView delegate


222
00:06:54,396 --> 00:06:54,836
method.


223
00:06:54,936 --> 00:06:56,666
This method is asking for a


224
00:06:56,716 --> 00:06:58,226
title for a header in a given


225
00:06:58,226 --> 00:06:58,886
section number.


226
00:06:59,636 --> 00:07:00,776
So it must be that that section


227
00:07:00,776 --> 00:07:01,996
number is not zero or one.


228
00:07:02,856 --> 00:07:03,636
So I think I have a better


229
00:07:03,636 --> 00:07:04,726
understanding of what's going


230
00:07:04,726 --> 00:07:06,516
on, but let's try to reproduce


231
00:07:06,516 --> 00:07:08,036
this issue in the app and see if


232
00:07:08,036 --> 00:07:08,736
we can learn more.


233
00:07:09,226 --> 00:07:11,606
So I've hit play.


234
00:07:11,756 --> 00:07:13,386
And Chocolate Chip is a recipe


235
00:07:13,386 --> 00:07:14,656
app I store all of my favorite


236
00:07:14,656 --> 00:07:17,246
recipes and I've been testing


237
00:07:17,246 --> 00:07:18,586
with this whipped cream recipe


238
00:07:19,126 --> 00:07:19,996
and you can see everything's


239
00:07:20,036 --> 00:07:21,386
fine, I can see my list of


240
00:07:21,386 --> 00:07:22,866
ingredients, my list of steps.


241
00:07:22,866 --> 00:07:23,796
These are the two recipe


242
00:07:23,796 --> 00:07:25,376
sections, that's ingredients


243
00:07:25,376 --> 00:07:26,886
that's section zero and steps


244
00:07:26,886 --> 00:07:27,686
that's section one.


245
00:07:28,636 --> 00:07:30,696
And if I click on another recipe


246
00:07:30,696 --> 00:07:33,456
we've hit a crash and what I can


247
00:07:33,546 --> 00:07:35,056
see is that we're stopped on the


248
00:07:35,056 --> 00:07:37,296
same fatal error and the


249
00:07:37,296 --> 00:07:39,016
backtrace looks very similar to


250
00:07:39,016 --> 00:07:40,206
the crash log that we've been


251
00:07:40,206 --> 00:07:40,716
looking at.


252
00:07:40,716 --> 00:07:41,926
So that's a very good sign that


253
00:07:41,926 --> 00:07:43,026
we're looking at the same issue.


254
00:07:43,486 --> 00:07:44,676
So I'm going to clear this crash


255
00:07:44,676 --> 00:07:47,416
log by hitting delete and let's


256
00:07:47,416 --> 00:07:49,096
look at this debug session.


257
00:07:50,136 --> 00:07:52,006
So in this fatal error I can see


258
00:07:52,006 --> 00:07:53,626
that the message is nicely


259
00:07:53,626 --> 00:07:55,166
printing out that the section


260
00:07:55,166 --> 00:07:55,886
number is eight.


261
00:07:56,126 --> 00:07:56,936
So that's the reason we're


262
00:07:56,936 --> 00:07:58,456
crashing it's not zero or one.


263
00:07:59,616 --> 00:08:00,666
And what's occurring to me now


264
00:08:00,666 --> 00:08:02,936
is that this is my fault, when I


265
00:08:02,936 --> 00:08:05,026
implemented this class I


266
00:08:05,026 --> 00:08:06,246
implemented another delegate


267
00:08:06,246 --> 00:08:08,086
method called numberOfSections.


268
00:08:08,826 --> 00:08:10,696
And numberOfSections is saying


269
00:08:10,696 --> 00:08:12,326
how many headers it should look


270
00:08:12,326 --> 00:08:14,036
for and what I'm returning here


271
00:08:14,036 --> 00:08:15,796
is the number of ingredients and


272
00:08:15,796 --> 00:08:17,246
the ingredients count is eight.


273
00:08:18,436 --> 00:08:19,576
But believe it or not I have a


274
00:08:19,576 --> 00:08:21,216
clever way to solve this.


275
00:08:21,216 --> 00:08:22,356
I know what I want to be


276
00:08:22,356 --> 00:08:24,086
returning is the number of cases


277
00:08:24,086 --> 00:08:26,186
in this recipe section enum and


278
00:08:26,186 --> 00:08:28,396
I know that in Swift 4.2 some


279
00:08:28,396 --> 00:08:30,736
new functionality was added by


280
00:08:30,736 --> 00:08:32,035
the Swift Open Source Community,


281
00:08:32,035 --> 00:08:33,885
thank you very much, a protocol


282
00:08:33,885 --> 00:08:35,176
called CaseIterable.


283
00:08:35,726 --> 00:08:37,236
If I have my recipe section


284
00:08:37,236 --> 00:08:40,596
conformed to CaseIterable I can


285
00:08:40,596 --> 00:08:41,655
reimplement this number of


286
00:08:41,655 --> 00:08:43,956
sections to return the count of


287
00:08:43,956 --> 00:08:46,266
all the cases in that recipe


288
00:08:46,266 --> 00:08:47,186
section enum.


289
00:08:47,586 --> 00:08:49,876
And that way what I'll be


290
00:08:49,876 --> 00:08:51,876
returning is two, I'll be


291
00:08:51,876 --> 00:08:53,376
returning the number of accurate


292
00:08:53,376 --> 00:08:53,956
sections.


293
00:08:53,956 --> 00:08:55,626
This is going to work out just


294
00:08:56,756 --> 00:08:56,886
great.


295
00:08:57,056 --> 00:08:59,226
So now if I check out this


296
00:08:59,226 --> 00:09:00,986
chocolate chip cookies recipe no


297
00:09:00,986 --> 00:09:02,736
crash, I see all of my


298
00:09:02,736 --> 00:09:04,066
ingredients and my steps.


299
00:09:04,066 --> 00:09:06,166
I did a very good job, I'm very


300
00:09:06,206 --> 00:09:07,196
pleased with myself.


301
00:09:08,206 --> 00:09:10,076
And I can go back to the


302
00:09:10,076 --> 00:09:12,016
Organizer and mark this issue as


303
00:09:12,016 --> 00:09:13,666
resolved, step away from the


304
00:09:13,666 --> 00:09:15,296
computer and get back to my


305
00:09:15,296 --> 00:09:15,636
baking.


306
00:09:18,516 --> 00:09:22,646
[ Applause ]


307
00:09:23,146 --> 00:09:24,816
Okay so you've just see how you


308
00:09:24,816 --> 00:09:27,256
can use the Crashes Organizer to


309
00:09:27,256 --> 00:09:28,666
download crash logs from


310
00:09:28,666 --> 00:09:30,916
TestFlight, open the log in your


311
00:09:30,916 --> 00:09:32,616
source code, and resolve an


312
00:09:32,616 --> 00:09:32,876
issue.


313
00:09:32,876 --> 00:09:35,546
So what do you need to do to get


314
00:09:35,606 --> 00:09:36,056
started?


315
00:09:36,826 --> 00:09:40,116
Very simple, your customers if


316
00:09:40,116 --> 00:09:41,256
they opt into sharing with


317
00:09:41,256 --> 00:09:42,676
third-party developers this just


318
00:09:42,676 --> 00:09:43,896
works, their crash logs are


319
00:09:43,896 --> 00:09:44,816
uploaded automatically.


320
00:09:46,326 --> 00:09:47,966
All you need to do is sign into


321
00:09:47,966 --> 00:09:50,026
Xcode with your Apple ID.


322
00:09:50,856 --> 00:09:52,576
When you upload your app you


323
00:09:52,576 --> 00:09:53,826
should include symbols so that


324
00:09:53,826 --> 00:09:54,966
you get server-side


325
00:09:54,966 --> 00:09:57,226
symbolication of your crash


326
00:09:57,836 --> 00:09:57,976
logs.


327
00:09:58,226 --> 00:09:59,926
And open up the Organizer window


328
00:09:59,926 --> 00:10:01,106
to the Crashes tab to start


329
00:10:01,106 --> 00:10:01,976
viewing those crashes.


330
00:10:05,106 --> 00:10:07,036
Okay so we have covered viewing


331
00:10:07,036 --> 00:10:08,166
crashes in the Organizer.


332
00:10:09,266 --> 00:10:10,736
But if you're not distributing


333
00:10:10,736 --> 00:10:12,586
over TestFlight or the App Store


334
00:10:12,586 --> 00:10:13,606
there are a couple of other


335
00:10:13,606 --> 00:10:14,376
options for you.


336
00:10:15,246 --> 00:10:17,246
There is the devices window.


337
00:10:18,516 --> 00:10:19,996
When you have a device connected


338
00:10:20,436 --> 00:10:21,576
you can click this View Logs


339
00:10:21,576 --> 00:10:23,326
button and will show you all the


340
00:10:23,326 --> 00:10:24,436
logs that are saved on that


341
00:10:24,436 --> 00:10:25,936
device and these logs are


342
00:10:25,936 --> 00:10:27,346
symbolicated using the local


343
00:10:27,346 --> 00:10:29,306
symbol information on your Mac.


344
00:10:30,816 --> 00:10:31,706
When you run your [inaudible]


345
00:10:31,706 --> 00:10:34,796
tests with Xcode, Xcode Server


346
00:10:34,796 --> 00:10:37,766
or Xcode Build the test results


347
00:10:37,816 --> 00:10:39,196
bundle will include any of the


348
00:10:39,196 --> 00:10:40,706
crash logs that come from your


349
00:10:40,706 --> 00:10:42,346
app that are written out during


350
00:10:42,346 --> 00:10:43,716
the execution of that test run


351
00:10:43,936 --> 00:10:45,066
and that's very convenient and


352
00:10:45,066 --> 00:10:46,676
these crash logs are also


353
00:10:46,676 --> 00:10:47,316
symbolicated.


354
00:10:47,816 --> 00:10:50,786
You can use the Mac Console app


355
00:10:50,786 --> 00:10:53,096
to view any crash logs from your


356
00:10:53,276 --> 00:10:54,226
Mac or from the Simulator.


357
00:10:55,856 --> 00:10:57,336
And on the device under


358
00:10:57,336 --> 00:10:59,816
Settings, Privacy, Analytics,


359
00:10:59,816 --> 00:11:01,476
Analytics Data you can see all


360
00:11:01,476 --> 00:11:02,516
of the logs that are saved to


361
00:11:02,516 --> 00:11:04,556
disk and your users can share a


362
00:11:04,556 --> 00:11:08,506
log directly from this screen.


363
00:11:08,696 --> 00:11:11,246
Okay so to ensure that


364
00:11:11,246 --> 00:11:13,106
symbolication just works I have


365
00:11:13,156 --> 00:11:14,766
three important best practices


366
00:11:14,766 --> 00:11:15,066
for you.


367
00:11:16,096 --> 00:11:18,816
Number one, if you use the


368
00:11:18,816 --> 00:11:20,806
Crashes Organizer upload your


369
00:11:20,806 --> 00:11:21,866
symbols with your app.


370
00:11:22,146 --> 00:11:23,906
This is the default, this will


371
00:11:23,906 --> 00:11:25,036
ensure that server-side


372
00:11:25,036 --> 00:11:27,166
symbolication works, it's very


373
00:11:27,706 --> 00:11:27,826
easy.


374
00:11:28,366 --> 00:11:31,656
Number two, be sure to save your


375
00:11:31,656 --> 00:11:32,546
app archives.


376
00:11:33,096 --> 00:11:34,956
Your archive contains a copy of


377
00:11:34,956 --> 00:11:37,736
your debug symbols, your .


378
00:11:37,736 --> 00:11:39,576
Xcode uses Spotlight to find


379
00:11:39,656 --> 00:11:41,236
these dSYMs and to perform local


380
00:11:41,236 --> 00:11:42,426
symbolication when it's


381
00:11:42,426 --> 00:11:43,486
necessary automatically.


382
00:11:43,906 --> 00:11:47,526
And if you upload an app that


383
00:11:47,526 --> 00:11:49,906
contains bitcode you should use


384
00:11:49,906 --> 00:11:51,706
the Archives Organizer Download


385
00:11:51,706 --> 00:11:53,916
Debug Symbols button to download


386
00:11:53,916 --> 00:11:55,376
any dSYMs that come from a


387
00:11:55,376 --> 00:11:56,916
store-side bitcode compilation.


388
00:11:57,476 --> 00:12:01,416
Okay we've covered all the tools


389
00:12:01,416 --> 00:12:02,876
that we offer for accessing


390
00:12:02,876 --> 00:12:04,106
crash logs when they occur in


391
00:12:04,106 --> 00:12:04,506
the field.


392
00:12:05,356 --> 00:12:06,346
Now to give you an in-depth


393
00:12:06,346 --> 00:12:07,916
guide into reading the content


394
00:12:08,146 --> 00:12:09,716
of a crash log please give a


395
00:12:09,716 --> 00:12:10,836
warm welcome to the helping,


396
00:12:10,836 --> 00:12:11,936
friendly Greg Parker.


397
00:12:12,516 --> 00:12:17,556
[ Applause ]


398
00:12:18,056 --> 00:12:18,926
>> Thank you, Chris.


399
00:12:19,346 --> 00:12:20,936
So we've just seen how you can


400
00:12:20,936 --> 00:12:23,986
use Xcode to find crashes and to


401
00:12:23,986 --> 00:12:26,356
examine them in the Xcode tools


402
00:12:26,356 --> 00:12:27,086
in the debugger.


403
00:12:28,026 --> 00:12:30,336
But the crash log file contains


404
00:12:30,336 --> 00:12:32,276
more information, it contains


405
00:12:32,276 --> 00:12:33,806
much more information than just


406
00:12:33,806 --> 00:12:34,666
the stack trace.


407
00:12:35,146 --> 00:12:37,306
It is frequently useful to look


408
00:12:37,306 --> 00:12:39,096
at that extra information in


409
00:12:39,096 --> 00:12:40,466
order to debug your problem.


410
00:12:41,376 --> 00:12:43,626
So how can you get the full text


411
00:12:43,626 --> 00:12:44,396
of a crash log?


412
00:12:45,016 --> 00:12:47,166
Here's our Xcode Organizer, if


413
00:12:47,166 --> 00:12:49,186
we bring up the contextual menu


414
00:12:49,236 --> 00:12:51,096
there's a Show In Finder button.


415
00:12:51,916 --> 00:12:53,216
The Show In Finder button will


416
00:12:53,216 --> 00:12:54,816
bring up a text file which we


417
00:12:54,816 --> 00:12:56,526
can open up in the Console app


418
00:12:56,876 --> 00:12:58,706
or your favorite text editor, it


419
00:12:58,706 --> 00:12:59,996
looks something like this.


420
00:13:00,876 --> 00:13:02,576
So what's in this file, let's


421
00:13:02,576 --> 00:13:03,116
take a look.


422
00:13:03,826 --> 00:13:05,506
The top of the file starts with


423
00:13:05,506 --> 00:13:07,866
some summary information, this


424
00:13:07,866 --> 00:13:09,496
contains your app name, the


425
00:13:09,496 --> 00:13:11,646
version number, the operating


426
00:13:11,646 --> 00:13:13,096
system version it was running


427
00:13:13,096 --> 00:13:14,846
on, and the date and time of the


428
00:13:14,846 --> 00:13:15,386
crash.


429
00:13:16,586 --> 00:13:18,496
Below that we have the reason


430
00:13:18,496 --> 00:13:19,416
for the crash.


431
00:13:19,756 --> 00:13:21,706
This was the specific error, the


432
00:13:21,706 --> 00:13:23,436
specific signal that the


433
00:13:23,436 --> 00:13:25,186
operating system sent to kill


434
00:13:25,186 --> 00:13:25,936
the process.


435
00:13:27,386 --> 00:13:29,856
We can also see some logging


436
00:13:29,856 --> 00:13:30,856
information, the


437
00:13:30,856 --> 00:13:33,016
application-specific information


438
00:13:33,056 --> 00:13:33,626
section.


439
00:13:34,286 --> 00:13:35,486
This section will include


440
00:13:35,486 --> 00:13:38,146
console logs in some cases, if


441
00:13:38,146 --> 00:13:39,786
you have an unhandled exception


442
00:13:39,786 --> 00:13:41,056
it may include the exception


443
00:13:41,056 --> 00:13:41,816
backtrace.


444
00:13:42,916 --> 00:13:44,536
This section is not always


445
00:13:44,536 --> 00:13:47,746
available, on iOS devices it is


446
00:13:47,746 --> 00:13:49,516
often hidden for personal


447
00:13:49,516 --> 00:13:50,706
privacy reasons.


448
00:13:51,146 --> 00:13:53,296
But on Simulator to macOS this


449
00:13:53,296 --> 00:13:55,226
section can include information


450
00:13:55,226 --> 00:13:55,766
that is useful.


451
00:13:57,556 --> 00:13:58,906
Below that we have the thread


452
00:13:58,906 --> 00:14:00,306
stacks, these were the


453
00:14:00,446 --> 00:14:02,166
backtraces of all the threads


454
00:14:02,166 --> 00:14:03,276
that were running at the time of


455
00:14:03,276 --> 00:14:03,906
the crash.


456
00:14:04,506 --> 00:14:05,666
One of them is marked as the


457
00:14:05,666 --> 00:14:08,436
crash thread and we also have


458
00:14:08,436 --> 00:14:09,526
whatever other threads were


459
00:14:09,526 --> 00:14:11,196
running at the time that the


460
00:14:11,196 --> 00:14:12,056
process died.


461
00:14:13,866 --> 00:14:15,676
Below that we have some


462
00:14:15,676 --> 00:14:17,326
low-level information, we have


463
00:14:17,376 --> 00:14:19,806
the register state of the thread


464
00:14:19,806 --> 00:14:21,916
that crashed and we have the


465
00:14:21,916 --> 00:14:23,816
binary images that were loaded


466
00:14:23,816 --> 00:14:25,196
into the process.


467
00:14:25,316 --> 00:14:27,046
This is the application


468
00:14:27,046 --> 00:14:28,686
executable and all the other


469
00:14:28,686 --> 00:14:29,666
libraries.


470
00:14:30,276 --> 00:14:32,176
And Xcode uses this for


471
00:14:32,176 --> 00:14:34,556
symbolication in order to look


472
00:14:34,586 --> 00:14:37,306
up the symbols, the files and


473
00:14:37,306 --> 00:14:38,866
line number information for the


474
00:14:38,866 --> 00:14:39,656
stack traces.


475
00:14:39,656 --> 00:14:42,576
So that's the content of a crash


476
00:14:42,576 --> 00:14:43,156
log file.


477
00:14:44,036 --> 00:14:45,696
So how do we debug this, how do


478
00:14:45,696 --> 00:14:47,026
we read this, what do we look


479
00:14:47,026 --> 00:14:47,306
at?


480
00:14:48,446 --> 00:14:51,066
We start with the crash reason,


481
00:14:51,176 --> 00:14:52,316
the exception type.


482
00:14:53,156 --> 00:14:54,736
In this case, the exception type


483
00:14:54,736 --> 00:14:56,796
is an EXC bad instruction


484
00:14:56,856 --> 00:15:00,816
exception, the SIGILL signal was


485
00:15:00,816 --> 00:15:02,536
the illegal instruction signal.


486
00:15:03,306 --> 00:15:05,396
That means the CPU was trying to


487
00:15:05,396 --> 00:15:07,276
execute an instruction that does


488
00:15:07,276 --> 00:15:09,546
not exist or is invalid for some


489
00:15:09,546 --> 00:15:10,916
reason and that's why the


490
00:15:10,916 --> 00:15:12,026
process died.


491
00:15:12,546 --> 00:15:16,636
We can also look at the thread


492
00:15:16,746 --> 00:15:18,946
that crashed, what code was


493
00:15:18,946 --> 00:15:19,806
running at the time of the


494
00:15:19,806 --> 00:15:20,196
crash.


495
00:15:20,816 --> 00:15:22,966
Here we see the fatal error


496
00:15:22,966 --> 00:15:25,076
message function in the Swift


497
00:15:25,886 --> 00:15:26,426
runtime.


498
00:15:26,426 --> 00:15:28,256
No guesses as to what the fatal


499
00:15:28,256 --> 00:15:29,556
error message function does.


500
00:15:30,876 --> 00:15:33,046
The error message in this case


501
00:15:33,046 --> 00:15:33,986
is included in the


502
00:15:33,986 --> 00:15:35,206
application-specific


503
00:15:35,206 --> 00:15:37,696
information, so we can see what


504
00:15:37,696 --> 00:15:39,726
the Swift runtime printed as the


505
00:15:39,726 --> 00:15:40,836
process exited.


506
00:15:45,356 --> 00:15:46,536
So let's take a closer look at


507
00:15:46,536 --> 00:15:48,476
that stack trace.


508
00:15:48,476 --> 00:15:50,276
We saw the fatal error message


509
00:15:50,276 --> 00:15:53,806
function and that was called by


510
00:15:53,966 --> 00:15:55,316
a function in our code.


511
00:15:55,396 --> 00:15:57,736
We have a recipe class, an image


512
00:15:57,736 --> 00:16:01,356
function being called and that


513
00:16:01,356 --> 00:16:03,116
function in turn called fatal


514
00:16:03,116 --> 00:16:04,736
error message as a result of


515
00:16:04,736 --> 00:16:05,476
some error.


516
00:16:06,806 --> 00:16:08,736
Because this is a symbolicated


517
00:16:08,736 --> 00:16:10,426
stack trace with full debug


518
00:16:10,426 --> 00:16:12,376
information we have a file and


519
00:16:12,376 --> 00:16:14,856
line number in our code of what


520
00:16:14,856 --> 00:16:15,566
the crash was.


521
00:16:16,516 --> 00:16:17,856
So we can take a look at that


522
00:16:17,856 --> 00:16:19,506
line, we can open up our


523
00:16:19,506 --> 00:16:20,706
project, this is


524
00:16:20,706 --> 00:16:24,316
RecipeImage.swift, line 26 was


525
00:16:24,316 --> 00:16:25,276
the one that was marked in the


526
00:16:25,276 --> 00:16:25,806
crash.


527
00:16:26,716 --> 00:16:27,926
And those of you who are


528
00:16:27,926 --> 00:16:29,436
experienced Swift programmers


529
00:16:29,436 --> 00:16:31,066
will have a pretty good guess as


530
00:16:31,066 --> 00:16:32,896
to why this line might crash.


531
00:16:33,946 --> 00:16:36,836
We have a force unwrap operator.


532
00:16:37,766 --> 00:16:40,076
We have a function, The UIImage


533
00:16:40,076 --> 00:16:41,516
Constructor which returns an


534
00:16:41,586 --> 00:16:42,746
optional value.


535
00:16:43,536 --> 00:16:45,696
If the optional value is nil the


536
00:16:45,696 --> 00:16:48,596
force unwrap operator will halt


537
00:16:48,596 --> 00:16:50,726
the process, generate a crash


538
00:16:50,726 --> 00:16:52,186
log and exit.


539
00:16:53,796 --> 00:16:54,856
If we remember the


540
00:16:54,856 --> 00:16:56,906
application-specific information


541
00:16:57,216 --> 00:16:58,926
it included the error message


542
00:16:59,046 --> 00:17:01,256
that the Swift runtime prints as


543
00:17:01,256 --> 00:17:03,516
this error check fails and it


544
00:17:03,516 --> 00:17:05,415
says, unexpectedly found nil


545
00:17:05,516 --> 00:17:06,906
while unwrapping an optional


546
00:17:06,906 --> 00:17:07,366
value.


547
00:17:08,326 --> 00:17:10,076
So that's good, that's


548
00:17:10,076 --> 00:17:12,685
consistent with the code.


549
00:17:12,886 --> 00:17:14,705
We have a force unwrap operator


550
00:17:14,705 --> 00:17:17,086
on line 26, we have an error


551
00:17:17,086 --> 00:17:19,366
message in the crash log that


552
00:17:19,366 --> 00:17:20,675
says we were unwrapping an


553
00:17:20,675 --> 00:17:21,586
optional value.


554
00:17:22,036 --> 00:17:23,036
This all makes sense as a


555
00:17:23,036 --> 00:17:25,116
consistent story for what caused


556
00:17:25,116 --> 00:17:25,856
this crash.


557
00:17:28,376 --> 00:17:32,096
So a force unwrap failure is an


558
00:17:32,096 --> 00:17:34,166
example of a precondition or an


559
00:17:34,166 --> 00:17:35,576
assertion in the code.


560
00:17:36,376 --> 00:17:38,156
Preconditions and assertions are


561
00:17:38,156 --> 00:17:39,906
error checks that deliberately


562
00:17:39,906 --> 00:17:41,946
stop the process when an error


563
00:17:41,946 --> 00:17:42,366
occurs.


564
00:17:43,456 --> 00:17:45,116
Some examples of this are of


565
00:17:45,116 --> 00:17:47,056
course the force unwrap of an


566
00:17:47,056 --> 00:17:48,176
optional that we just saw.


567
00:17:48,656 --> 00:17:50,596
The Swift runtime will assert


568
00:17:51,056 --> 00:17:53,506
that the optional is not nil and


569
00:17:53,506 --> 00:17:54,386
crash if it is.


570
00:17:55,686 --> 00:17:56,746
We have out-of-bounds


571
00:17:56,746 --> 00:17:58,556
Swift.Array access is another


572
00:17:58,596 --> 00:17:59,976
example.


573
00:17:59,976 --> 00:18:02,146
If you access an array and your


574
00:18:02,146 --> 00:18:04,156
index is out-of-bounds the Swift


575
00:18:04,156 --> 00:18:06,096
runtime will fail, interim check


576
00:18:06,096 --> 00:18:07,866
it will fail a precondition and


577
00:18:07,866 --> 00:18:08,826
halt the process.


578
00:18:10,076 --> 00:18:12,126
Swift arithmetic overflow also


579
00:18:12,126 --> 00:18:14,106
contains assertions, if you're


580
00:18:14,206 --> 00:18:15,866
adding two numbers together and


581
00:18:15,866 --> 00:18:17,256
the result is too large for an


582
00:18:17,256 --> 00:18:18,826
integer variable there is a


583
00:18:18,826 --> 00:18:20,256
precondition for that, the


584
00:18:20,256 --> 00:18:22,396
process will halt.


585
00:18:22,906 --> 00:18:24,416
Uncaught exceptions are


586
00:18:24,416 --> 00:18:25,936
frequently caused by


587
00:18:26,586 --> 00:18:28,026
preconditions in the code.


588
00:18:28,706 --> 00:18:30,216
There are many error checks


589
00:18:30,216 --> 00:18:32,386
where if the precondition fails


590
00:18:32,386 --> 00:18:34,446
it will throw an exception and


591
00:18:34,446 --> 00:18:36,036
if the exception is not caught


592
00:18:36,586 --> 00:18:38,046
the uncaught exception will


593
00:18:38,046 --> 00:18:39,506
cause a crash log.


594
00:18:39,706 --> 00:18:41,926
And of course you can write


595
00:18:42,256 --> 00:18:43,886
assertions and preconditions in


596
00:18:43,886 --> 00:18:46,336
your own code if you have errors


597
00:18:46,576 --> 00:18:47,696
that you want to crash the


598
00:18:47,696 --> 00:18:49,736
process and generate a crash log


599
00:18:49,736 --> 00:18:50,556
in response.


600
00:18:52,986 --> 00:18:54,716
Another example of a crash log


601
00:18:54,756 --> 00:18:57,046
is a case where the operating


602
00:18:57,046 --> 00:18:59,416
system kills your process from


603
00:18:59,446 --> 00:19:00,146
the outside.


604
00:19:00,216 --> 00:19:03,786
An example of this are watchdog


605
00:19:03,786 --> 00:19:05,836
events, such as timeouts.


606
00:19:06,226 --> 00:19:07,716
If your application takes too


607
00:19:07,716 --> 00:19:09,606
long to do something the


608
00:19:09,606 --> 00:19:11,216
operating system may detect


609
00:19:11,216 --> 00:19:13,206
that, kill the process of


610
00:19:13,206 --> 00:19:15,056
generate a particular crash log


611
00:19:15,056 --> 00:19:15,826
as it does so.


612
00:19:17,206 --> 00:19:18,996
Environmental conditions can


613
00:19:18,996 --> 00:19:20,746
also cause the operating system


614
00:19:20,746 --> 00:19:21,786
to halt the process.


615
00:19:21,886 --> 00:19:24,256
If the device is overheating the


616
00:19:24,256 --> 00:19:25,506
operating system will kill


617
00:19:25,506 --> 00:19:26,866
processes that are using too


618
00:19:26,866 --> 00:19:27,726
much CPU.


619
00:19:28,166 --> 00:19:29,336
If the device is running out of


620
00:19:29,336 --> 00:19:31,196
memory the operating system will


621
00:19:31,196 --> 00:19:32,656
kill processes that are using


622
00:19:32,656 --> 00:19:33,406
lots of memory.


623
00:19:34,936 --> 00:19:36,766
Another case is an invalid code


624
00:19:36,766 --> 00:19:37,376
signature.


625
00:19:37,816 --> 00:19:39,486
The operating system enforces


626
00:19:39,726 --> 00:19:41,936
that code be signed and if a


627
00:19:41,936 --> 00:19:43,686
signature is invalid or the code


628
00:19:43,686 --> 00:19:45,646
is unsigned the operating system


629
00:19:45,646 --> 00:19:47,176
will kill the process and


630
00:19:47,176 --> 00:19:48,586
generate a particular type of


631
00:19:48,586 --> 00:19:49,186
crash log.


632
00:19:51,056 --> 00:19:52,226
These terminations by the


633
00:19:52,226 --> 00:19:53,896
operating system can be found in


634
00:19:53,896 --> 00:19:55,596
the Devices window in Xcode,


635
00:19:55,766 --> 00:19:57,016
they can be found on the macOS


636
00:19:57,016 --> 00:19:57,676
console.


637
00:19:58,156 --> 00:20:00,296
They do not always appear in the


638
00:20:00,296 --> 00:20:02,446
Xcode Organizer, so be careful


639
00:20:02,446 --> 00:20:02,726
of that.


640
00:20:04,416 --> 00:20:06,706
In Apple's developer


641
00:20:06,706 --> 00:20:09,186
documentation we have a technote


642
00:20:09,186 --> 00:20:10,936
that describes many different


643
00:20:11,206 --> 00:20:13,136
signatures and structures of


644
00:20:13,136 --> 00:20:14,926
crash logs like these particular


645
00:20:14,926 --> 00:20:16,976
examples, what they look like,


646
00:20:16,976 --> 00:20:19,206
how you can recognize them, and


647
00:20:19,206 --> 00:20:20,536
it goes into much more detail


648
00:20:20,536 --> 00:20:21,796
than we have time for here.


649
00:20:23,026 --> 00:20:24,676
But let's look at one example,


650
00:20:25,426 --> 00:20:27,236
here's another crash log file


651
00:20:27,776 --> 00:20:29,896
and again in order to understand


652
00:20:29,896 --> 00:20:31,166
the crash log we start with the


653
00:20:31,166 --> 00:20:32,216
crash reason.


654
00:20:32,866 --> 00:20:34,426
In this case the crash reason is


655
00:20:34,426 --> 00:20:37,226
in EXC crash exception with the


656
00:20:37,226 --> 00:20:38,836
SIGKILL signal.


657
00:20:39,796 --> 00:20:41,766
The SIGKILL signal is commonly


658
00:20:41,766 --> 00:20:43,836
used when the operating system


659
00:20:43,836 --> 00:20:45,466
wants to stop your process.


660
00:20:46,016 --> 00:20:48,386
It sends the SIGKILL signal, the


661
00:20:48,526 --> 00:20:50,056
SIGKILL signal cannot be


662
00:20:50,056 --> 00:20:51,706
handled, it cannot be caught by


663
00:20:51,706 --> 00:20:53,846
your process, it will die in


664
00:20:53,846 --> 00:20:54,856
response to this signal.


665
00:20:56,666 --> 00:20:58,446
We can also see the reason the


666
00:20:58,446 --> 00:21:00,086
operating system sent the signal


667
00:21:00,086 --> 00:21:00,986
in the crash log.


668
00:21:01,396 --> 00:21:02,656
In this case we have a


669
00:21:02,826 --> 00:21:04,626
termination reason with a code


670
00:21:04,676 --> 00:21:05,966
ate bad food.


671
00:21:06,566 --> 00:21:08,126
If you look in the developer


672
00:21:08,126 --> 00:21:09,986
technote I mentioned earlier, it


673
00:21:09,986 --> 00:21:11,976
will describe what ate bad food


674
00:21:11,976 --> 00:21:12,566
means.


675
00:21:13,126 --> 00:21:14,186
And we have a textual


676
00:21:14,186 --> 00:21:16,506
description that says exhausted


677
00:21:16,506 --> 00:21:18,596
real clock time allowance of


678
00:21:18,656 --> 00:21:20,506
19.95 seconds.


679
00:21:20,866 --> 00:21:22,276
So if we combine this


680
00:21:22,276 --> 00:21:23,936
information with the information


681
00:21:23,936 --> 00:21:25,416
in the technote it will tell us


682
00:21:25,836 --> 00:21:28,526
our application took too long to


683
00:21:28,526 --> 00:21:29,076
launch.


684
00:21:29,356 --> 00:21:31,546
We had 20 seconds to launch, we


685
00:21:31,546 --> 00:21:32,966
weren't done in that much time,


686
00:21:33,386 --> 00:21:34,606
the operating system killed the


687
00:21:34,606 --> 00:21:35,266
process.


688
00:21:36,686 --> 00:21:38,916
Below we can see the crash logs


689
00:21:39,046 --> 00:21:40,716
at the time the process died.


690
00:21:41,256 --> 00:21:42,826
It's possible that those crash


691
00:21:42,826 --> 00:21:44,626
logs were the code that took too


692
00:21:44,626 --> 00:21:45,946
long, maybe were stuck in an


693
00:21:45,946 --> 00:21:48,426
infinite loop, maybe were stuck


694
00:21:48,426 --> 00:21:49,896
waiting for network I/O and


695
00:21:49,896 --> 00:21:51,006
that's why we took too long to


696
00:21:51,006 --> 00:21:51,506
launch.


697
00:21:52,296 --> 00:21:54,026
Or on the other hand, maybe this


698
00:21:54,026 --> 00:21:55,916
code is innocent and there's


699
00:21:55,916 --> 00:21:57,426
something earlier in the launch


700
00:21:57,426 --> 00:21:59,076
process that was too slow and


701
00:21:59,076 --> 00:22:00,466
that's why the process died.


702
00:22:03,456 --> 00:22:06,366
So launch timeouts, how can you


703
00:22:06,366 --> 00:22:06,886
avoid them.


704
00:22:07,306 --> 00:22:08,716
We want you to avoid them,


705
00:22:08,816 --> 00:22:10,626
launch timeouts are a common


706
00:22:10,626 --> 00:22:13,166
reason for app rejection during


707
00:22:13,166 --> 00:22:14,536
Apple's app review.


708
00:22:15,756 --> 00:22:17,256
So how do you avoid this?


709
00:22:17,256 --> 00:22:19,516
Well test your app of course.


710
00:22:19,626 --> 00:22:23,316
But there's a catch, the launch


711
00:22:23,316 --> 00:22:26,016
timeout watchdog is disabled in


712
00:22:26,016 --> 00:22:27,986
the Simulator and it's disabled


713
00:22:27,986 --> 00:22:29,586
in the debugger so if you're


714
00:22:29,586 --> 00:22:30,766
doing all your testing in the


715
00:22:30,766 --> 00:22:32,076
Simulator and the debugger


716
00:22:32,076 --> 00:22:33,356
you'll never see watchdog


717
00:22:33,356 --> 00:22:33,976
timeouts.


718
00:22:35,206 --> 00:22:37,596
So when you test your app be


719
00:22:37,596 --> 00:22:39,336
sure to test without the


720
00:22:39,336 --> 00:22:39,906
debugger.


721
00:22:40,346 --> 00:22:42,416
If you're a macOS app launch


722
00:22:42,416 --> 00:22:43,406
your app in the Finder.


723
00:22:43,786 --> 00:22:46,456
If you're an iOS app run in


724
00:22:46,456 --> 00:22:48,776
TestFlight or launch your app


725
00:22:49,026 --> 00:22:50,726
using the iOS App Launcher.


726
00:22:51,016 --> 00:22:52,656
All of these will run your app


727
00:22:52,656 --> 00:22:54,526
outside the debugger and the


728
00:22:54,526 --> 00:22:56,286
launch timeouts will be enabled


729
00:22:56,286 --> 00:22:57,026
and enforced.


730
00:22:58,426 --> 00:22:59,966
When you test, test on a real


731
00:22:59,966 --> 00:23:01,566
device of course, test outside


732
00:23:01,566 --> 00:23:02,376
of Simulators.


733
00:23:02,986 --> 00:23:06,096
And test your devices with older


734
00:23:06,096 --> 00:23:08,026
hardware, whatever's the oldest


735
00:23:08,026 --> 00:23:09,826
hardware you want your app to


736
00:23:09,826 --> 00:23:10,386
support.


737
00:23:11,026 --> 00:23:12,636
If you test only on newer


738
00:23:12,636 --> 00:23:14,076
hardware you might find that


739
00:23:14,076 --> 00:23:16,236
your app launches fast enough on


740
00:23:16,306 --> 00:23:18,636
a faster device, but slower


741
00:23:18,636 --> 00:23:20,306
devices might take too much


742
00:23:20,306 --> 00:23:20,646
time.


743
00:23:23,376 --> 00:23:25,296
So let's talk about another


744
00:23:25,296 --> 00:23:27,326
class of errors, let's talk


745
00:23:27,326 --> 00:23:28,836
about memory errors and what


746
00:23:28,836 --> 00:23:31,116
they look like in crash logs.


747
00:23:32,466 --> 00:23:34,306
When I say memory error I mean


748
00:23:34,306 --> 00:23:37,076
cases like reference counting of


749
00:23:37,076 --> 00:23:40,576
an object being over-released or


750
00:23:40,726 --> 00:23:42,446
using an object after it has


751
00:23:42,446 --> 00:23:45,936
been freed or a buffer overflow


752
00:23:45,936 --> 00:23:48,286
where you have a byte array or


753
00:23:48,286 --> 00:23:50,476
another C array and you access


754
00:23:50,476 --> 00:23:51,926
that array out-of-bounds.


755
00:23:53,156 --> 00:23:55,316
So let's look at another crash


756
00:23:55,316 --> 00:23:57,926
log and spoiler alert this one


757
00:23:57,926 --> 00:23:58,746
is a memory error.


758
00:23:59,846 --> 00:24:01,226
We start again with the


759
00:24:01,226 --> 00:24:02,716
exception type.


760
00:24:03,436 --> 00:24:06,086
This is an EXC bad access


761
00:24:06,086 --> 00:24:09,096
exception, the SEG violation


762
00:24:09,096 --> 00:24:09,606
signal.


763
00:24:10,236 --> 00:24:12,306
This is typically caused by a


764
00:24:12,306 --> 00:24:13,266
memory error.


765
00:24:13,706 --> 00:24:15,396
The bad access exception means


766
00:24:15,396 --> 00:24:17,666
one of two things, either we


767
00:24:17,666 --> 00:24:19,586
were writing to memory that is


768
00:24:19,586 --> 00:24:21,896
read-only or we were reading


769
00:24:21,896 --> 00:24:23,436
from memory that does not exist


770
00:24:23,436 --> 00:24:23,896
at all.


771
00:24:24,106 --> 00:24:25,936
Either of those will cause a bad


772
00:24:25,936 --> 00:24:27,976
access exception and the process


773
00:24:27,976 --> 00:24:28,516
will stop.


774
00:24:29,806 --> 00:24:32,256
We see here the address that we


775
00:24:32,256 --> 00:24:34,256
were accessing at the time of


776
00:24:35,076 --> 00:24:36,366
the crash.


777
00:24:36,626 --> 00:24:38,416
We can look at the stack trace,


778
00:24:38,416 --> 00:24:39,346
this is the function that


779
00:24:39,346 --> 00:24:40,946
performed the bad access of


780
00:24:40,946 --> 00:24:41,376
course.


781
00:24:41,896 --> 00:24:43,736
This is the objc release


782
00:24:43,736 --> 00:24:45,286
function, it's part of the


783
00:24:45,286 --> 00:24:47,106
implementation of reference


784
00:24:47,106 --> 00:24:49,316
counting in Objective-C and some


785
00:24:49,316 --> 00:24:50,386
Swift objects.


786
00:24:50,946 --> 00:24:52,836
So that again sounds like it's


787
00:24:52,836 --> 00:24:54,456
likely to have been a memory


788
00:24:54,456 --> 00:24:55,646
error that caused the bug.


789
00:24:57,126 --> 00:24:59,856
So what code caused objc


790
00:24:59,856 --> 00:25:00,486
release?


791
00:25:00,956 --> 00:25:01,806
We can look at the rest of the


792
00:25:01,806 --> 00:25:02,636
stack trace.


793
00:25:03,226 --> 00:25:05,286
We have the object dispose


794
00:25:05,286 --> 00:25:07,526
function, this is a function in


795
00:25:07,526 --> 00:25:09,376
the Objective-C runtime that is


796
00:25:09,376 --> 00:25:11,176
used to deallocate objects.


797
00:25:12,516 --> 00:25:14,086
The object dispose function


798
00:25:14,086 --> 00:25:16,426
called a function called ivar


799
00:25:16,426 --> 00:25:18,716
destroyer on one of our classes,


800
00:25:18,716 --> 00:25:20,956
our LoginViewController class.


801
00:25:21,846 --> 00:25:24,176
The ivar destroyer function is


802
00:25:24,176 --> 00:25:26,166
part of Swift code, this is a


803
00:25:26,166 --> 00:25:27,516
function that cleans up the


804
00:25:27,516 --> 00:25:29,466
properties, that cleans up the


805
00:25:29,466 --> 00:25:31,776
ivar storage of an object as it


806
00:25:31,776 --> 00:25:32,686
is deallocated.


807
00:25:33,766 --> 00:25:35,386
So that gives us part of the


808
00:25:35,386 --> 00:25:36,966
story as to what caused this


809
00:25:36,966 --> 00:25:37,446
crash.


810
00:25:37,956 --> 00:25:39,856
We were deallocating an object


811
00:25:39,946 --> 00:25:41,956
of our login view controller


812
00:25:41,956 --> 00:25:42,526
class.


813
00:25:43,536 --> 00:25:46,156
That class in its d init code


814
00:25:46,356 --> 00:25:47,556
was trying to clean up its


815
00:25:47,556 --> 00:25:49,816
properties and its ivars and


816
00:25:49,816 --> 00:25:51,536
while releasing one of those


817
00:25:51,536 --> 00:25:53,266
properties we crashed.


818
00:25:53,266 --> 00:25:55,716
So that gives us a little bit of


819
00:25:55,716 --> 00:25:56,876
detail as to what went wrong.


820
00:25:56,906 --> 00:25:58,826
Can we do better, is there more


821
00:25:58,826 --> 00:26:00,206
information in the crash log


822
00:26:00,206 --> 00:26:01,226
that will tell us more about


823
00:26:01,226 --> 00:26:02,906
what happened?


824
00:26:03,516 --> 00:26:05,256
We can look at the invalid


825
00:26:05,256 --> 00:26:08,356
address itself, sometimes the


826
00:26:08,356 --> 00:26:10,966
actual bad address value will


827
00:26:10,966 --> 00:26:12,856
contain useful information in


828
00:26:13,506 --> 00:26:13,586
it.


829
00:26:13,926 --> 00:26:16,006
And this particular bad address


830
00:26:16,006 --> 00:26:18,556
I can tell you looks like a use


831
00:26:18,606 --> 00:26:19,536
after free.


832
00:26:20,446 --> 00:26:21,566
Well how do I know that?


833
00:26:21,706 --> 00:26:22,946
Partly it's just long


834
00:26:22,946 --> 00:26:24,336
experience, when you read enough


835
00:26:24,336 --> 00:26:26,246
crash logs you start to learn


836
00:26:26,246 --> 00:26:28,316
patterns of what the bad values


837
00:26:28,396 --> 00:26:28,736
are.


838
00:26:29,856 --> 00:26:32,886
This particular bad value looks


839
00:26:32,886 --> 00:26:35,296
very much like the address range


840
00:26:35,296 --> 00:26:37,906
for the malloc memory allocator


841
00:26:38,246 --> 00:26:39,416
which we happen to have


842
00:26:39,416 --> 00:26:40,966
available in this crash log.


843
00:26:41,616 --> 00:26:43,196
So we have the address range


844
00:26:43,196 --> 00:26:44,486
that was used by the memory


845
00:26:44,486 --> 00:26:46,656
allocator and our invalid


846
00:26:46,656 --> 00:26:49,526
address looks like it's inside


847
00:26:49,526 --> 00:26:51,836
the malloc range, but it's been


848
00:26:51,836 --> 00:26:53,756
shifted by 4 bits, it's been


849
00:26:53,756 --> 00:26:55,386
rotated by 4 bits.


850
00:26:55,906 --> 00:26:57,566
So it looks like it was a valid


851
00:26:57,566 --> 00:26:59,686
malloc address rotated.


852
00:27:01,426 --> 00:27:03,936
That is a clue from the memory


853
00:27:03,936 --> 00:27:05,266
allocator itself.


854
00:27:05,266 --> 00:27:06,766
Let me show you why that is.


855
00:27:07,556 --> 00:27:08,776
Here's what our object looked


856
00:27:08,776 --> 00:27:10,756
like when it was still valid.


857
00:27:11,466 --> 00:27:13,226
An object starts with an isa


858
00:27:13,226 --> 00:27:15,516
field, the isa field points to


859
00:27:15,516 --> 00:27:16,566
the object's class.


860
00:27:17,326 --> 00:27:19,146
This is how Objective-C objects


861
00:27:19,146 --> 00:27:20,536
are laid out, this is how some


862
00:27:20,536 --> 00:27:22,096
swift objects are laid out.


863
00:27:22,736 --> 00:27:24,766
So what does the objc release


864
00:27:24,766 --> 00:27:25,486
function do?


865
00:27:26,226 --> 00:27:28,776
It reads the isa field and then


866
00:27:28,776 --> 00:27:30,796
dreferences the isa field so it


867
00:27:30,796 --> 00:27:32,556
can get to the class object and


868
00:27:32,556 --> 00:27:33,806
perform method lookups.


869
00:27:35,186 --> 00:27:37,206
Ordinarily of course this works,


870
00:27:37,206 --> 00:27:38,176
this is how it's supposed to


871
00:27:38,176 --> 00:27:38,456
work.


872
00:27:39,346 --> 00:27:40,886
What happens if our object has


873
00:27:40,956 --> 00:27:42,396
already been freed.


874
00:27:42,676 --> 00:27:46,416
When the free function deletes


875
00:27:46,416 --> 00:27:49,826
an object it inserts it into a


876
00:27:49,826 --> 00:27:52,556
free list of other dead objects.


877
00:27:53,206 --> 00:27:55,496
And it writes a free list


878
00:27:55,496 --> 00:27:57,296
pointer to the next object in


879
00:27:57,296 --> 00:27:59,356
the list where the isa field


880
00:27:59,356 --> 00:28:00,036
used to be.


881
00:28:01,356 --> 00:28:03,836
With one slight twist, it does


882
00:28:03,836 --> 00:28:05,146
not write a pointer into that


883
00:28:05,146 --> 00:28:07,536
field it writes a rotated


884
00:28:07,676 --> 00:28:08,986
pointer into that field.


885
00:28:09,586 --> 00:28:10,956
It wants to make sure that the


886
00:28:10,956 --> 00:28:13,506
value written there is not a


887
00:28:13,506 --> 00:28:16,016
valid memory address precisely


888
00:28:16,016 --> 00:28:17,786
so that bad use of the object


889
00:28:18,016 --> 00:28:18,756
will crash.


890
00:28:19,986 --> 00:28:22,366
So when objc release goes to


891
00:28:22,366 --> 00:28:24,366
read the isa field it instead


892
00:28:24,416 --> 00:28:26,246
gets a rotated free list


893
00:28:26,246 --> 00:28:26,736
pointer.


894
00:28:27,396 --> 00:28:29,056
When it dreferences the rotated


895
00:28:29,056 --> 00:28:30,926
free list pointer it crashes.


896
00:28:31,926 --> 00:28:33,296
The memory allocator did that


897
00:28:33,296 --> 00:28:34,986
for us, it deliberately rotated


898
00:28:34,986 --> 00:28:36,716
that pointer to make sure we


899
00:28:36,716 --> 00:28:38,166
would crash if we tried to use


900
00:28:38,166 --> 00:28:38,616
it again.


901
00:28:39,836 --> 00:28:42,146
So that is the signature we see


902
00:28:42,146 --> 00:28:43,196
in this crash log.


903
00:28:43,606 --> 00:28:45,716
We had the invalid address field


904
00:28:46,056 --> 00:28:48,536
looks like a pointer in the


905
00:28:48,536 --> 00:28:50,686
malloc region but rotated the


906
00:28:50,686 --> 00:28:52,626
same way that malloc rotates its


907
00:28:52,626 --> 00:28:53,566
free list pointers.


908
00:28:54,186 --> 00:28:56,076
So that's a strong sign that


909
00:28:56,976 --> 00:28:58,706
whatever object we are trying to


910
00:28:58,706 --> 00:29:00,056
release at this point in the


911
00:29:00,056 --> 00:29:01,656
code has already been


912
00:29:01,656 --> 00:29:03,606
deallocated, that's the memory


913
00:29:03,606 --> 00:29:04,486
error that occurred.


914
00:29:06,226 --> 00:29:08,006
So that's additional detail of


915
00:29:08,186 --> 00:29:09,496
what our story is.


916
00:29:09,546 --> 00:29:10,476
We have our object being


917
00:29:10,476 --> 00:29:12,336
deallocated, we're cleaning up


918
00:29:12,336 --> 00:29:14,916
its ivars, one of those ivars


919
00:29:15,386 --> 00:29:17,116
was already a freed object and


920
00:29:17,116 --> 00:29:18,266
that's what caused our crash.


921
00:29:19,506 --> 00:29:20,566
Can we do better?


922
00:29:20,566 --> 00:29:23,736
Can we figure out which object


923
00:29:23,736 --> 00:29:25,876
was being released by objc


924
00:29:25,876 --> 00:29:26,566
release?


925
00:29:27,636 --> 00:29:29,806
Ordinarily, the function calling


926
00:29:29,806 --> 00:29:31,276
objc release would give us a


927
00:29:31,326 --> 00:29:32,926
clue as to what that was.


928
00:29:33,516 --> 00:29:35,166
But the problem with the ivar


929
00:29:35,166 --> 00:29:37,186
destroyer function is it is a


930
00:29:37,186 --> 00:29:39,306
compiler generated function.


931
00:29:39,876 --> 00:29:41,016
We didn't write a function


932
00:29:41,016 --> 00:29:42,826
called ivar destroyer, which


933
00:29:42,826 --> 00:29:44,476
means there's no filename or


934
00:29:44,476 --> 00:29:46,816
line number associated with this


935
00:29:46,816 --> 00:29:48,006
point in the crash, we don't


936
00:29:48,006 --> 00:29:50,436
know which of our properties was


937
00:29:50,436 --> 00:29:52,346
being deallocated at that point.


938
00:29:53,326 --> 00:29:55,156
Here's our class, we have three


939
00:29:55,156 --> 00:29:56,696
properties in this class, we


940
00:29:56,696 --> 00:29:58,916
have a username, a database, and


941
00:29:58,916 --> 00:29:59,976
an array of views.


942
00:30:00,706 --> 00:30:02,536
And at this point in our story


943
00:30:02,536 --> 00:30:03,846
we don't know which of these


944
00:30:03,846 --> 00:30:05,876
objects was the one being


945
00:30:05,876 --> 00:30:06,926
released, it could've been any


946
00:30:06,926 --> 00:30:08,316
of them.


947
00:30:08,476 --> 00:30:10,396
Can we do better, can we work


948
00:30:10,396 --> 00:30:13,146
out which of those objects was


949
00:30:13,196 --> 00:30:14,966
the one being released from the


950
00:30:14,966 --> 00:30:16,486
information in the crash log


951
00:30:16,876 --> 00:30:18,206
because of course if we can't


952
00:30:18,206 --> 00:30:19,856
reproduce it in the debugger the


953
00:30:19,856 --> 00:30:21,306
crash log is all we have to go


954
00:30:21,306 --> 00:30:21,426
on?


955
00:30:22,326 --> 00:30:24,686
In this case we can do better.


956
00:30:25,606 --> 00:30:30,006
We can see a +42 where the file


957
00:30:30,006 --> 00:30:31,126
and line number would've been.


958
00:30:31,126 --> 00:30:35,306
And the +42 is our clue because


959
00:30:35,306 --> 00:30:37,616
the +42 is an offset in the


960
00:30:37,616 --> 00:30:39,446
assembly code of the function.


961
00:30:40,266 --> 00:30:41,936
We can disassemble the ivar


962
00:30:41,936 --> 00:30:43,876
destroyer function, look at the


963
00:30:43,876 --> 00:30:46,636
code and work out which property


964
00:30:46,636 --> 00:30:49,206
was being accessed at offset 42.


965
00:30:50,376 --> 00:30:51,526
So how does that work?


966
00:30:51,956 --> 00:30:53,926
We go into the debugger, into


967
00:30:53,926 --> 00:30:55,096
the debugger console.


968
00:30:55,796 --> 00:30:58,026
We can run lldb at a terminal.


969
00:30:58,426 --> 00:31:01,336
We can run lldb in the Xcode


970
00:31:01,526 --> 00:31:02,886
debug terminal.


971
00:31:04,306 --> 00:31:06,996
The debugger has commands to


972
00:31:07,126 --> 00:31:09,856
import a crash log a little bit


973
00:31:09,856 --> 00:31:13,396
as if it crashed inside the


974
00:31:13,396 --> 00:31:14,056
debugger.


975
00:31:14,626 --> 00:31:16,616
So we run this command to load


976
00:31:16,896 --> 00:31:18,266
the crash log interpretation


977
00:31:18,266 --> 00:31:21,026
commands and then we run another


978
00:31:21,026 --> 00:31:23,756
command to import our crash into


979
00:31:23,756 --> 00:31:24,356
the debugger.


980
00:31:25,286 --> 00:31:27,196
So we want three things to make


981
00:31:27,196 --> 00:31:27,796
this work.


982
00:31:28,076 --> 00:31:30,346
We want a copy of our crash log


983
00:31:30,396 --> 00:31:33,176
on the Mac, we also want a copy


984
00:31:33,176 --> 00:31:36,606
of our app, and a copy of the


985
00:31:36,606 --> 00:31:38,246
dSYM file that went with the


986
00:31:38,246 --> 00:31:41,076
app, all of them matching this


987
00:31:41,076 --> 00:31:43,006
crash log, all the same version


988
00:31:43,006 --> 00:31:43,566
of our app.


989
00:31:43,906 --> 00:31:45,646
So this is why we want you to


990
00:31:45,646 --> 00:31:47,596
keep your app archives.


991
00:31:48,316 --> 00:31:49,796
If we have all these files on


992
00:31:49,796 --> 00:31:51,716
the Mac, we run the crash log


993
00:31:51,716 --> 00:31:54,956
command, lldb uses Spotlight to


994
00:31:54,956 --> 00:31:56,656
find the matching executable,


995
00:31:56,816 --> 00:31:58,426
find the matching symbols, and


996
00:31:58,426 --> 00:31:59,956
load it into the debugger.


997
00:32:00,886 --> 00:32:02,696
So we see the stack trace of our


998
00:32:02,696 --> 00:32:04,876
crash thread, we see the file


999
00:32:04,876 --> 00:32:06,036
and line number information


1000
00:32:06,036 --> 00:32:07,926
where available, and now we can


1001
00:32:07,926 --> 00:32:08,526
go to work.


1002
00:32:09,076 --> 00:32:10,776
Now we can find the address of


1003
00:32:10,776 --> 00:32:13,036
the ivar destroyer function and


1004
00:32:13,036 --> 00:32:15,306
disassemble it.


1005
00:32:15,476 --> 00:32:17,336
This shows us the assembly code


1006
00:32:17,616 --> 00:32:18,636
of our function.


1007
00:32:20,066 --> 00:32:21,646
Now I don't have time to teach


1008
00:32:21,646 --> 00:32:22,946
you how to read assembly code,


1009
00:32:23,436 --> 00:32:25,556
but luckily for crash logs you


1010
00:32:25,556 --> 00:32:26,846
don't actually have to be


1011
00:32:27,006 --> 00:32:29,436
completely fluent in reading


1012
00:32:29,436 --> 00:32:30,346
assembly code.


1013
00:32:30,656 --> 00:32:32,146
It often is sufficient to be


1014
00:32:32,146 --> 00:32:33,996
able to skim the assembly code


1015
00:32:33,996 --> 00:32:35,486
and get a general idea of what


1016
00:32:35,486 --> 00:32:37,016
is going on, you don't have to


1017
00:32:37,016 --> 00:32:38,286
understand every single


1018
00:32:38,286 --> 00:32:39,966
instruction to be able to get


1019
00:32:39,966 --> 00:32:41,656
useful information out of a


1020
00:32:41,656 --> 00:32:42,296
crash log.


1021
00:32:43,456 --> 00:32:45,626
If we read through this function


1022
00:32:46,006 --> 00:32:47,776
and we know about the call


1023
00:32:47,906 --> 00:32:50,106
instruction and the jump


1024
00:32:50,106 --> 00:32:51,876
instruction which are how you


1025
00:32:51,876 --> 00:32:54,486
call functions, we can separate


1026
00:32:54,486 --> 00:32:56,606
this code into three blocks.


1027
00:32:57,476 --> 00:33:00,566
We have this top section which


1028
00:33:00,566 --> 00:33:03,506
is making a function call into a


1029
00:33:03,506 --> 00:33:04,766
reference count releasing


1030
00:33:04,766 --> 00:33:06,446
function and this one is


1031
00:33:06,446 --> 00:33:08,656
releasing our username property.


1032
00:33:10,076 --> 00:33:12,346
The next region is releasing the


1033
00:33:12,346 --> 00:33:13,636
database property.


1034
00:33:14,166 --> 00:33:16,566
And the next region is releasing


1035
00:33:16,566 --> 00:33:17,876
the views property.


1036
00:33:18,966 --> 00:33:21,186
So we don't understand what all


1037
00:33:21,186 --> 00:33:22,766
these instructions mean, but we


1038
00:33:22,766 --> 00:33:24,576
have a general sense of what


1039
00:33:24,626 --> 00:33:26,026
each region in the code is


1040
00:33:26,026 --> 00:33:26,326
doing.


1041
00:33:26,326 --> 00:33:27,826
It's a little bit like having a


1042
00:33:27,826 --> 00:33:30,266
line number associated with the


1043
00:33:30,266 --> 00:33:30,556
code.


1044
00:33:31,756 --> 00:33:33,546
So now we go back to the


1045
00:33:33,546 --> 00:33:35,106
information in our crash log.


1046
00:33:35,516 --> 00:33:37,956
We had the ivar destroyer


1047
00:33:37,956 --> 00:33:41,416
function +42 calling objc


1048
00:33:41,416 --> 00:33:42,026
release.


1049
00:33:43,416 --> 00:33:46,346
So there is instruction at +42,


1050
00:33:47,266 --> 00:33:48,946
but there is one more catch.


1051
00:33:49,496 --> 00:33:51,736
The catch is in a stack trace


1052
00:33:52,126 --> 00:33:54,086
the assembly level offset of


1053
00:33:54,086 --> 00:33:56,436
most stack frames is the return


1054
00:33:56,476 --> 00:33:58,436
address, it is the instruction


1055
00:33:58,636 --> 00:34:00,226
after the function call.


1056
00:34:00,886 --> 00:34:02,146
So the instruction of the called


1057
00:34:02,146 --> 00:34:04,346
objc release was the previous


1058
00:34:04,346 --> 00:34:05,436
instruction, it's this


1059
00:34:05,436 --> 00:34:05,986
instruction.


1060
00:34:06,916 --> 00:34:09,786
If we read this it's the call of


1061
00:34:09,786 --> 00:34:11,815
objc release which is good,


1062
00:34:11,906 --> 00:34:13,746
that's consistent with what we


1063
00:34:13,746 --> 00:34:15,286
saw in the stack trace in the


1064
00:34:15,286 --> 00:34:16,755
crash log which was a call to


1065
00:34:16,755 --> 00:34:19,295
objc release at this offset.


1066
00:34:20,156 --> 00:34:22,606
And this release function is


1067
00:34:22,606 --> 00:34:24,916
releasing the database property.


1068
00:34:25,646 --> 00:34:28,085
So now we have more detail about


1069
00:34:28,085 --> 00:34:29,146
what our crash is doing.


1070
00:34:29,735 --> 00:34:31,295
We released the username


1071
00:34:31,295 --> 00:34:32,396
property and that was


1072
00:34:32,396 --> 00:34:33,056
successful.


1073
00:34:33,795 --> 00:34:35,596
We have not yet gotten to the


1074
00:34:35,596 --> 00:34:37,366
views property, it might be


1075
00:34:37,366 --> 00:34:38,896
valid, it might be invalid we


1076
00:34:38,896 --> 00:34:39,416
don't know.


1077
00:34:39,866 --> 00:34:41,966
What we do know is we tried to


1078
00:34:41,966 --> 00:34:43,696
release the database property


1079
00:34:44,166 --> 00:34:46,206
and that object looked like it


1080
00:34:46,206 --> 00:34:49,186
was already freed object based


1081
00:34:49,186 --> 00:34:50,676
on the malloc free list pointer


1082
00:34:50,676 --> 00:34:51,156
signature.


1083
00:34:52,315 --> 00:34:53,456
So that gives us a pretty good


1084
00:34:53,456 --> 00:34:55,416
story of what caused this crash.


1085
00:34:56,025 --> 00:34:57,936
We were freeing a login view


1086
00:34:57,936 --> 00:34:59,996
controller object and the


1087
00:34:59,996 --> 00:35:02,026
database property was invalid.


1088
00:35:04,446 --> 00:35:06,496
So we haven't actually found a


1089
00:35:06,566 --> 00:35:08,036
bug yet, none of this code is


1090
00:35:08,036 --> 00:35:09,706
incorrect, the ivar destroyer


1091
00:35:09,706 --> 00:35:11,656
function is not wrong, something


1092
00:35:11,656 --> 00:35:13,716
else was buggy in our code.


1093
00:35:14,376 --> 00:35:15,856
But from the crash log we have


1094
00:35:15,856 --> 00:35:17,966
been able to narrow down where


1095
00:35:17,966 --> 00:35:20,326
our testing should go, where our


1096
00:35:20,326 --> 00:35:22,036
attempts to reproduce the bug


1097
00:35:22,036 --> 00:35:22,596
should go.


1098
00:35:22,596 --> 00:35:24,086
We should be exercising this


1099
00:35:24,086 --> 00:35:26,396
class, we should be exercising


1100
00:35:26,396 --> 00:35:27,876
the database field, we should be


1101
00:35:27,876 --> 00:35:30,176
reading the code that uses that


1102
00:35:30,176 --> 00:35:32,246
database object and try and find


1103
00:35:32,246 --> 00:35:32,616
the bug.


1104
00:35:32,996 --> 00:35:36,206
So what have we just done?


1105
00:35:37,036 --> 00:35:38,296
We read a crash log from


1106
00:35:38,296 --> 00:35:38,886
scratch.


1107
00:35:38,886 --> 00:35:40,096
We started with the crash


1108
00:35:40,156 --> 00:35:42,396
reason, we read the exception


1109
00:35:42,396 --> 00:35:43,606
type, we understand what the


1110
00:35:43,606 --> 00:35:44,886
exception type means.


1111
00:35:45,996 --> 00:35:48,656
We examined the stack trace of


1112
00:35:48,656 --> 00:35:49,986
the thread that crashed,


1113
00:35:50,246 --> 00:35:51,806
understand what it was doing,


1114
00:35:52,186 --> 00:35:54,146
and what the actual error that


1115
00:35:54,146 --> 00:35:55,126
failed was.


1116
00:35:55,126 --> 00:35:57,426
And we looked for clues


1117
00:35:57,516 --> 00:35:59,466
elsewhere in the crash log, in


1118
00:35:59,466 --> 00:36:00,716
this case we used the bad


1119
00:36:00,716 --> 00:36:03,056
address of the memory error and


1120
00:36:03,056 --> 00:36:05,006
we used the disassembly of the


1121
00:36:05,006 --> 00:36:06,026
crashing function.


1122
00:36:07,836 --> 00:36:12,506
So memory errors are a wide


1123
00:36:12,506 --> 00:36:14,556
variety of crashes, there are


1124
00:36:14,556 --> 00:36:16,186
many different signatures in


1125
00:36:16,186 --> 00:36:18,076
crash logs that can be caused by


1126
00:36:18,076 --> 00:36:18,986
memory errors.


1127
00:36:19,826 --> 00:36:21,936
Here are some examples for you.


1128
00:36:22,456 --> 00:36:24,476
Crashes in the Objective-C


1129
00:36:24,476 --> 00:36:26,856
message send function or in the


1130
00:36:26,856 --> 00:36:28,486
reference counting machinery or


1131
00:36:28,486 --> 00:36:31,086
deallocation machinery in Swift


1132
00:36:31,086 --> 00:36:32,966
and Objective-C are very


1133
00:36:32,966 --> 00:36:34,966
commonly caused by memory


1134
00:36:34,966 --> 00:36:35,396
errors.


1135
00:36:37,116 --> 00:36:38,866
Another common memory error


1136
00:36:38,866 --> 00:36:40,766
symptom is an unrecognized


1137
00:36:40,766 --> 00:36:42,266
selector exception.


1138
00:36:43,216 --> 00:36:45,126
These are often caused when you


1139
00:36:45,126 --> 00:36:47,656
have an object of some type, a


1140
00:36:47,656 --> 00:36:49,806
code that is using that object,


1141
00:36:50,426 --> 00:36:51,486
and then the object gets


1142
00:36:51,606 --> 00:36:53,586
deallocated and used again.


1143
00:36:54,416 --> 00:36:55,496
But instead of getting the


1144
00:36:55,496 --> 00:36:57,696
malloc free list signature that


1145
00:36:57,696 --> 00:36:59,356
we saw in that previous crash


1146
00:36:59,356 --> 00:37:02,306
log, instead a new object is


1147
00:37:02,306 --> 00:37:04,636
allocated at the same address


1148
00:37:04,636 --> 00:37:06,106
where the old object used to be.


1149
00:37:06,906 --> 00:37:09,196
So when the code tries to use


1150
00:37:09,196 --> 00:37:11,176
the old object, call a function


1151
00:37:11,176 --> 00:37:13,046
on the old object, we have a


1152
00:37:13,146 --> 00:37:14,966
different object of a different


1153
00:37:14,966 --> 00:37:17,656
type at that same address and it


1154
00:37:17,656 --> 00:37:19,206
doesn't recognize that function


1155
00:37:19,206 --> 00:37:20,516
at all and we get an


1156
00:37:20,516 --> 00:37:22,326
unrecognized selector exception.


1157
00:37:24,636 --> 00:37:27,046
One other common symptom of


1158
00:37:27,046 --> 00:37:30,006
memory errors is an abort inside


1159
00:37:30,006 --> 00:37:31,696
the memory allocator itself,


1160
00:37:31,726 --> 00:37:33,226
inside the malloc and free


1161
00:37:33,226 --> 00:37:33,796
functions.


1162
00:37:33,796 --> 00:37:35,976
This is an example of a


1163
00:37:35,976 --> 00:37:37,966
precondition like we saw


1164
00:37:37,966 --> 00:37:39,456
earlier, this is a precondition


1165
00:37:39,566 --> 00:37:41,366
inside the memory allocator.


1166
00:37:42,016 --> 00:37:44,206
It may be identifying cases


1167
00:37:44,206 --> 00:37:47,776
where the heap data structure of


1168
00:37:47,776 --> 00:37:49,616
the malloc memory itself has


1169
00:37:49,616 --> 00:37:51,366
been corrupted by a memory error


1170
00:37:51,606 --> 00:37:52,826
and it halts the process and


1171
00:37:52,826 --> 00:37:53,546
response.


1172
00:37:54,106 --> 00:37:56,426
Or it may be detecting incorrect


1173
00:37:56,426 --> 00:37:59,056
use of the malloc APIs.


1174
00:37:59,056 --> 00:38:01,096
For example, if you free an


1175
00:38:01,096 --> 00:38:03,676
object twice in a row the malloc


1176
00:38:03,676 --> 00:38:04,946
allocator can sometimes


1177
00:38:04,946 --> 00:38:06,816
recognize that as a double free


1178
00:38:07,136 --> 00:38:08,396
and immediately halt the


1179
00:38:08,396 --> 00:38:09,106
process.


1180
00:38:11,136 --> 00:38:13,006
So let me give you some final


1181
00:38:13,006 --> 00:38:15,656
tips for analyzing crash logs in


1182
00:38:15,656 --> 00:38:17,446
general and analyzing memory


1183
00:38:17,446 --> 00:38:18,486
errors in particular.


1184
00:38:20,756 --> 00:38:22,186
In the crash we just looked at


1185
00:38:22,186 --> 00:38:23,286
we spent most of our time


1186
00:38:23,286 --> 00:38:24,286
looking at the code that


1187
00:38:24,366 --> 00:38:26,266
crashed, the specific lines of


1188
00:38:26,266 --> 00:38:27,646
code that crashed, and the


1189
00:38:27,646 --> 00:38:28,736
thread that crashed.


1190
00:38:29,296 --> 00:38:31,006
It is important to look at the


1191
00:38:31,006 --> 00:38:33,636
other code in your process


1192
00:38:33,636 --> 00:38:35,006
related to the code that


1193
00:38:35,006 --> 00:38:35,536
crashed.


1194
00:38:35,656 --> 00:38:39,016
For example, in this crash the


1195
00:38:39,016 --> 00:38:40,736
ivar destroyer function is not


1196
00:38:40,786 --> 00:38:42,046
wrong, that's not where the bug


1197
00:38:42,166 --> 00:38:42,636
is.


1198
00:38:42,936 --> 00:38:45,246
The bug is somewhere else, some


1199
00:38:45,246 --> 00:38:47,376
other code is incorrect.


1200
00:38:49,286 --> 00:38:50,286
You should also look at the


1201
00:38:50,286 --> 00:38:52,696
stack traces in the crash log


1202
00:38:52,966 --> 00:38:54,846
other than the crashed thread.


1203
00:38:55,586 --> 00:38:58,046
The crash log contains all the


1204
00:38:58,046 --> 00:38:59,826
stack traces in the process and


1205
00:38:59,826 --> 00:39:01,016
that can contain useful


1206
00:39:01,016 --> 00:39:03,116
information and clues for


1207
00:39:03,116 --> 00:39:04,326
helping you puzzle out what the


1208
00:39:04,326 --> 00:39:05,386
process was doing.


1209
00:39:06,006 --> 00:39:07,856
Perhaps the other threads show


1210
00:39:08,276 --> 00:39:10,266
more details about where in the


1211
00:39:10,266 --> 00:39:11,666
application it was running,


1212
00:39:11,766 --> 00:39:13,196
maybe it was performing network


1213
00:39:13,256 --> 00:39:14,716
code and that's visible on one


1214
00:39:14,716 --> 00:39:16,556
of the other stack traces.


1215
00:39:17,136 --> 00:39:18,086
Or perhaps there's a


1216
00:39:18,086 --> 00:39:20,416
multithreading error and the


1217
00:39:20,416 --> 00:39:22,346
other threads may provide clues


1218
00:39:22,346 --> 00:39:25,116
as to what the thread race was.


1219
00:39:26,796 --> 00:39:28,916
You should also look at more


1220
00:39:28,916 --> 00:39:31,006
than one crash log for a


1221
00:39:31,006 --> 00:39:32,816
particular crash cause.


1222
00:39:33,676 --> 00:39:35,676
The Xcode Organizer helpfully


1223
00:39:35,676 --> 00:39:37,866
groups your crashes based on


1224
00:39:37,866 --> 00:39:39,466
where in the code they crashed.


1225
00:39:40,346 --> 00:39:43,506
And sometimes there will be


1226
00:39:43,506 --> 00:39:45,636
multiple crashes at a same crash


1227
00:39:45,706 --> 00:39:47,826
point, but some of the logs will


1228
00:39:47,826 --> 00:39:49,726
contain more information than


1229
00:39:49,806 --> 00:39:50,416
others.


1230
00:39:50,756 --> 00:39:52,386
For example, the malloc free


1231
00:39:52,386 --> 00:39:54,286
list signature that we just saw


1232
00:39:54,796 --> 00:39:56,666
that might appear in some crash


1233
00:39:56,666 --> 00:39:57,976
logs but not in others.


1234
00:39:58,176 --> 00:40:00,436
So it is useful to browse


1235
00:40:00,436 --> 00:40:02,606
through multiple crashes in the


1236
00:40:02,606 --> 00:40:04,876
same crash set to see if some of


1237
00:40:04,876 --> 00:40:06,136
them have information that is


1238
00:40:06,136 --> 00:40:07,456
more useful than others.


1239
00:40:08,326 --> 00:40:11,296
In addition, the Organizer as a


1240
00:40:11,396 --> 00:40:13,596
group crashes together will


1241
00:40:13,596 --> 00:40:15,586
sometimes put crashes with


1242
00:40:15,856 --> 00:40:18,086
different causes together in the


1243
00:40:18,086 --> 00:40:18,916
same group.


1244
00:40:19,396 --> 00:40:21,466
There may be other threads or


1245
00:40:21,546 --> 00:40:22,936
the backtrace of a crashed


1246
00:40:22,936 --> 00:40:26,016
thread that identify to you, to


1247
00:40:26,016 --> 00:40:28,246
a human eye you will recognize


1248
00:40:28,246 --> 00:40:29,766
that there are multiple causes


1249
00:40:29,806 --> 00:40:31,956
of this group of crashes even


1250
00:40:31,956 --> 00:40:33,296
though the Xcode Organizer put


1251
00:40:33,296 --> 00:40:34,036
them all together.


1252
00:40:34,856 --> 00:40:36,486
If you only looked at one crash


1253
00:40:36,486 --> 00:40:38,686
log you might not even know that


1254
00:40:38,686 --> 00:40:40,436
that second crash is occurring


1255
00:40:40,826 --> 00:40:42,886
until you fix the first one and


1256
00:40:42,886 --> 00:40:44,896
ship it and start getting crash


1257
00:40:44,896 --> 00:40:45,986
logs from your users.


1258
00:40:48,616 --> 00:40:50,036
Once you've done some analysis


1259
00:40:50,036 --> 00:40:51,056
of your crash, once you've


1260
00:40:51,056 --> 00:40:53,416
narrowed down where in your


1261
00:40:53,416 --> 00:40:55,146
process it might be occurring or


1262
00:40:55,146 --> 00:40:56,476
which objects it might've been


1263
00:40:56,476 --> 00:40:58,896
using you can use tools like the


1264
00:40:58,896 --> 00:41:00,546
Address Sanitizer and the


1265
00:41:00,546 --> 00:41:02,576
Zombies instrument to try and


1266
00:41:02,576 --> 00:41:03,726
reproduce the crash.


1267
00:41:04,116 --> 00:41:05,976
Because even though we did a


1268
00:41:05,976 --> 00:41:07,636
good job with the malloc free


1269
00:41:07,636 --> 00:41:09,936
list crash log of narrowing down


1270
00:41:09,936 --> 00:41:11,996
what happened it's a lot easier


1271
00:41:11,996 --> 00:41:13,636
to debug crashes when they occur


1272
00:41:13,716 --> 00:41:16,456
in a debugger, in a test with


1273
00:41:16,456 --> 00:41:18,396
Sanitization error messages


1274
00:41:18,396 --> 00:41:19,546
telling you what went on.


1275
00:41:20,066 --> 00:41:23,106
So a moment ago I mentioned


1276
00:41:23,106 --> 00:41:24,586
looking up multiple stack


1277
00:41:24,586 --> 00:41:26,826
traces, multiple thread stacks


1278
00:41:27,066 --> 00:41:28,286
in order to diagnose


1279
00:41:28,286 --> 00:41:29,516
multithreading errors.


1280
00:41:30,066 --> 00:41:32,616
And to talk more about debugging


1281
00:41:32,616 --> 00:41:34,156
multithreading errors let me


1282
00:41:34,156 --> 00:41:34,976
introduce Kuba.


1283
00:41:35,516 --> 00:41:40,696
[ Applause ]


1284
00:41:41,196 --> 00:41:41,466
>> Thank you.


1285
00:41:43,646 --> 00:41:44,076
Thank you.


1286
00:41:45,236 --> 00:41:47,356
As Greg mentioned, some memory


1287
00:41:47,356 --> 00:41:49,036
corruptions can be caused by


1288
00:41:49,036 --> 00:41:50,126
multithreading issues.


1289
00:41:51,146 --> 00:41:52,906
Multithreading bugs are often


1290
00:41:52,906 --> 00:41:54,496
one of the hardest types of bugs


1291
00:41:54,646 --> 00:41:56,436
to diagnose and reproduce.


1292
00:41:57,236 --> 00:41:58,436
They get especially hard to


1293
00:41:58,436 --> 00:41:59,866
reproduce because they only


1294
00:41:59,866 --> 00:42:01,296
cause crashes once in a while,


1295
00:42:01,546 --> 00:42:03,506
so your code might seem to work


1296
00:42:03,506 --> 00:42:05,546
fine in 99% of cases.


1297
00:42:06,016 --> 00:42:08,056
And these bugs can go unnoticed


1298
00:42:08,056 --> 00:42:10,146
for a very long time.


1299
00:42:11,306 --> 00:42:12,996
Often monitoring bugs cause


1300
00:42:13,236 --> 00:42:14,446
memory corruptions and what


1301
00:42:14,446 --> 00:42:16,076
you'll see in crash logs looks


1302
00:42:16,076 --> 00:42:17,506
just like memory corruptions as


1303
00:42:17,506 --> 00:42:19,676
well and we've seen examples of


1304
00:42:19,676 --> 00:42:20,856
those in the previous section.


1305
00:42:21,316 --> 00:42:22,186
So when you're dealing with


1306
00:42:22,186 --> 00:42:23,706
crashes inside the malloc or


1307
00:42:23,706 --> 00:42:25,516
free or retained counting


1308
00:42:25,516 --> 00:42:27,466
operations those are typical


1309
00:42:27,466 --> 00:42:29,176
symptoms of memory corruptions.


1310
00:42:30,556 --> 00:42:31,966
There's specific symptoms of


1311
00:42:31,966 --> 00:42:32,996
multithreading bugs as well.


1312
00:42:33,916 --> 00:42:35,546
The crashing thread often


1313
00:42:35,806 --> 00:42:37,566
contains, sorry the crash log


1314
00:42:37,566 --> 00:42:39,136
often contains multiple threads


1315
00:42:39,576 --> 00:42:41,416
that are executing related parts


1316
00:42:41,416 --> 00:42:41,956
of your code.


1317
00:42:42,436 --> 00:42:44,046
So if a particular class or a


1318
00:42:44,046 --> 00:42:45,996
method shows up in a crash log


1319
00:42:45,996 --> 00:42:48,006
in multiple threads that's an


1320
00:42:48,006 --> 00:42:49,256
indication of a potential


1321
00:42:49,256 --> 00:42:50,136
multithreading bug.


1322
00:42:51,646 --> 00:42:53,576
The memory corruptions that are


1323
00:42:53,576 --> 00:42:55,036
caused by multithreading issues


1324
00:42:55,186 --> 00:42:56,436
are often very random.


1325
00:42:56,616 --> 00:42:58,486
So you might see crashes


1326
00:42:58,486 --> 00:43:00,016
happening at slightly different


1327
00:43:00,096 --> 00:43:01,606
lines of code or slightly


1328
00:43:01,606 --> 00:43:02,406
different addresses.


1329
00:43:02,836 --> 00:43:04,556
And as Greg mentioned, you can


1330
00:43:04,556 --> 00:43:06,956
see those show up as different


1331
00:43:07,946 --> 00:43:09,716
crash points in Xcode even


1332
00:43:09,716 --> 00:43:10,746
though it's the same bug.


1333
00:43:12,086 --> 00:43:13,696
And also the crashing thread


1334
00:43:13,756 --> 00:43:14,836
might not actually be the


1335
00:43:14,836 --> 00:43:15,966
culprit of the bug, so it's


1336
00:43:15,966 --> 00:43:18,016
important to look at the stack


1337
00:43:18,016 --> 00:43:19,406
traces of the other threads in a


1338
00:43:19,406 --> 00:43:19,856
crash log.


1339
00:43:20,546 --> 00:43:22,286
So now let's take a closer look


1340
00:43:22,376 --> 00:43:23,436
at an example of a


1341
00:43:23,436 --> 00:43:24,746
multithreading bug and I will


1342
00:43:24,746 --> 00:43:26,056
show you how we can diagnose


1343
00:43:26,056 --> 00:43:27,856
such a bug using a tool called


1344
00:43:27,856 --> 00:43:29,296
Thread Sanitizer which is part


1345
00:43:29,296 --> 00:43:29,886
of Xcode.


1346
00:43:39,046 --> 00:43:40,066
So let's take another look at


1347
00:43:40,066 --> 00:43:41,716
our cookies recipe app that


1348
00:43:41,886 --> 00:43:43,416
Chris and I made and let's look


1349
00:43:43,416 --> 00:43:44,766
at some more crash logs that we


1350
00:43:44,766 --> 00:43:46,066
received from our users.


1351
00:43:46,666 --> 00:43:49,116
Let's focus on this second app


1352
00:43:49,116 --> 00:43:50,546
crasher of our app, this one.


1353
00:43:52,066 --> 00:43:53,476
This crash log indicates that


1354
00:43:53,476 --> 00:43:54,746
there's something wrong going on


1355
00:43:54,746 --> 00:43:56,256
when we're doing with a class


1356
00:43:56,256 --> 00:43:58,066
called LazyImageView, which is a


1357
00:43:58,066 --> 00:43:59,836
class that I wrote and we'll


1358
00:43:59,836 --> 00:44:00,996
look at it in just a second.


1359
00:44:01,516 --> 00:44:02,706
But let's try to understand more


1360
00:44:02,706 --> 00:44:03,836
from the crash logs first.


1361
00:44:03,916 --> 00:44:07,116
Let's look at the entire stack


1362
00:44:07,116 --> 00:44:08,466
of this thread which I can do by


1363
00:44:08,466 --> 00:44:09,606
clicking this button right here


1364
00:44:09,966 --> 00:44:11,296
that also shows all other


1365
00:44:11,296 --> 00:44:11,636
threads.


1366
00:44:13,026 --> 00:44:14,906
And if we focus at the top most


1367
00:44:14,906 --> 00:44:16,566
frames here we'll see that


1368
00:44:16,566 --> 00:44:18,246
what's really going on is that


1369
00:44:18,246 --> 00:44:19,776
the free function is calling


1370
00:44:19,776 --> 00:44:21,556
abort which indicates a heap


1371
00:44:21,556 --> 00:44:22,966
corruption, a type of memory


1372
00:44:22,966 --> 00:44:23,166
error.


1373
00:44:23,166 --> 00:44:26,396
If we look at the stack traces


1374
00:44:26,396 --> 00:44:27,756
of some other threads, like


1375
00:44:27,756 --> 00:44:30,076
thread 5 here, we'll see that


1376
00:44:30,076 --> 00:44:31,856
it's executing also some code


1377
00:44:31,946 --> 00:44:33,256
inside LazyImageView.


1378
00:44:33,256 --> 00:44:36,786
Let's look at another crash in


1379
00:44:36,786 --> 00:44:39,606
this group of crashes and we'll


1380
00:44:39,606 --> 00:44:41,016
see that this a common theme in


1381
00:44:41,016 --> 00:44:41,906
all these crash logs.


1382
00:44:42,376 --> 00:44:44,226
One thread is reporting a heap


1383
00:44:44,226 --> 00:44:45,506
corruption when the free


1384
00:44:45,506 --> 00:44:47,666
function is calling abort and a


1385
00:44:47,666 --> 00:44:50,246
secondary thread is processing


1386
00:44:50,886 --> 00:44:52,476
in a very related part of the


1387
00:44:52,476 --> 00:44:53,516
code, actually in the same


1388
00:44:53,516 --> 00:44:55,026
class, inside LazyImageView


1389
00:44:55,026 --> 00:44:55,366
again.


1390
00:44:55,996 --> 00:44:57,156
That's most likely not a


1391
00:44:57,156 --> 00:44:59,166
coincidence, I highly suspect


1392
00:44:59,166 --> 00:45:00,136
that this is a multithreading


1393
00:45:00,136 --> 00:45:00,496
issue.


1394
00:45:01,656 --> 00:45:04,096
So let's actually take a look at


1395
00:45:04,096 --> 00:45:05,156
our LazyImageView class.


1396
00:45:05,156 --> 00:45:07,256
So I'll click this button right


1397
00:45:07,256 --> 00:45:08,656
here to jump straight to this


1398
00:45:08,656 --> 00:45:10,006
line of code and open it in our


1399
00:45:10,006 --> 00:45:10,436
project.


1400
00:45:11,866 --> 00:45:13,126
And you can see the source of


1401
00:45:13,126 --> 00:45:14,816
LazyImageView right here.


1402
00:45:15,306 --> 00:45:17,396
It's a subclass of UIImageView,


1403
00:45:17,706 --> 00:45:19,116
but it has an extra feature


1404
00:45:19,116 --> 00:45:21,036
because it loads images lazily


1405
00:45:21,036 --> 00:45:22,136
and asynchronously.


1406
00:45:22,776 --> 00:45:24,096
And we can the logic for this


1407
00:45:24,096 --> 00:45:25,196
right here in the initializer.


1408
00:45:25,826 --> 00:45:28,026
What we do is we dispatch a job


1409
00:45:28,026 --> 00:45:30,106
to a background queue where we


1410
00:45:30,106 --> 00:45:31,476
will create the image on a


1411
00:45:31,476 --> 00:45:33,356
background thread and once that


1412
00:45:33,356 --> 00:45:35,206
is done we will dispatch back to


1413
00:45:35,206 --> 00:45:36,876
the main queue to actually


1414
00:45:36,876 --> 00:45:37,956
display the image on the screen.


1415
00:45:39,046 --> 00:45:40,976
The crash log points us to this


1416
00:45:40,976 --> 00:45:43,096
line of code here where we are


1417
00:45:43,286 --> 00:45:45,986
accessing an image cache which


1418
00:45:45,986 --> 00:45:47,506
we are using to make sure that


1419
00:45:47,506 --> 00:45:49,156
we don't unnecessarily create


1420
00:45:49,376 --> 00:45:50,806
the same image multiple times.


1421
00:45:51,346 --> 00:45:52,616
So maybe there is some bug in


1422
00:45:52,616 --> 00:45:54,246
the way my cache is implemented.


1423
00:45:54,896 --> 00:45:56,146
Let's try to avoid guessing,


1424
00:45:56,246 --> 00:45:58,246
instead I'll run the app in the


1425
00:45:58,246 --> 00:45:59,496
Simulator and we will try to


1426
00:45:59,496 --> 00:46:00,336
reproduce this crash.


1427
00:46:00,656 --> 00:46:02,496
And let me close the crash log


1428
00:46:02,496 --> 00:46:03,076
session first.


1429
00:46:03,076 --> 00:46:05,616
All right, so this is our


1430
00:46:05,616 --> 00:46:07,386
cookies recipe again and you'll


1431
00:46:07,386 --> 00:46:09,256
notice that if I try to add a


1432
00:46:09,256 --> 00:46:11,256
new recipe by clicking this +


1433
00:46:11,256 --> 00:46:14,076
button right here we get asked


1434
00:46:14,246 --> 00:46:16,166
to select an image for our new


1435
00:46:16,166 --> 00:46:16,536
recipe.


1436
00:46:17,266 --> 00:46:18,876
So this controller which is on


1437
00:46:18,876 --> 00:46:20,726
the screen right now displays


1438
00:46:20,786 --> 00:46:22,186
all these images using


1439
00:46:22,186 --> 00:46:23,046
LazyImageView.


1440
00:46:23,566 --> 00:46:25,346
So just showing it up on the


1441
00:46:25,346 --> 00:46:27,146
screen and scrolling through the


1442
00:46:27,146 --> 00:46:29,216
content already exercises all of


1443
00:46:29,216 --> 00:46:31,296
the code inside LazyImageView,


1444
00:46:31,506 --> 00:46:32,606
but I don't see any crashes.


1445
00:46:33,546 --> 00:46:34,766
Unfortunately, it's a very


1446
00:46:34,766 --> 00:46:35,666
common problem with


1447
00:46:35,666 --> 00:46:37,196
multithreading bugs, they are


1448
00:46:37,196 --> 00:46:38,566
notoriously hard to reproduce.


1449
00:46:38,566 --> 00:46:40,886
So even when you repeatedly test


1450
00:46:41,016 --> 00:46:43,016
the code that has such a bug you


1451
00:46:43,016 --> 00:46:44,326
might not actually see a crush.


1452
00:46:45,126 --> 00:46:46,706
Let's try actually doing that,


1453
00:46:46,706 --> 00:46:48,706
let's try closing and opening


1454
00:46:48,706 --> 00:46:50,476
this controller a couple times


1455
00:46:50,476 --> 00:46:51,646
and let's see if maybe


1456
00:46:51,646 --> 00:46:53,426
eventually we will be lucky and


1457
00:46:53,746 --> 00:46:54,816
we will be able to trigger this


1458
00:46:54,816 --> 00:46:54,956
crash.


1459
00:47:00,176 --> 00:47:01,976
All right here we go, the


1460
00:47:01,976 --> 00:47:04,406
debugger has stopped because it


1461
00:47:04,406 --> 00:47:05,936
has crashed, but even when you


1462
00:47:05,936 --> 00:47:07,806
actually do catch this crash in


1463
00:47:07,806 --> 00:47:08,826
the debugger it doesn't really


1464
00:47:08,826 --> 00:47:09,806
help us.


1465
00:47:10,256 --> 00:47:11,536
All the debugger provides is


1466
00:47:11,536 --> 00:47:13,636
that this is some sort of XC bad


1467
00:47:13,636 --> 00:47:15,906
excess but it does not what


1468
00:47:15,906 --> 00:47:17,646
caused the corruption or why did


1469
00:47:17,646 --> 00:47:19,036
it actually happen.


1470
00:47:19,806 --> 00:47:21,866
Luckily Xcode has a tool that's


1471
00:47:21,916 --> 00:47:23,356
perfect just for this situation


1472
00:47:23,356 --> 00:47:24,616
and it's called Thread Sanitizer


1473
00:47:24,616 --> 00:47:25,676
and that's what I'm going to use


1474
00:47:25,676 --> 00:47:25,876
here.


1475
00:47:26,266 --> 00:47:27,816
So let's open up the scheme


1476
00:47:27,816 --> 00:47:29,206
editor of our project which I


1477
00:47:29,206 --> 00:47:30,446
can do by clicking the name of


1478
00:47:30,446 --> 00:47:32,066
our app here and choosing Edit


1479
00:47:32,066 --> 00:47:32,426
Scheme.


1480
00:47:33,336 --> 00:47:35,536
And if I then switch over to the


1481
00:47:35,786 --> 00:47:37,576
tab called Diagnostics you'll


1482
00:47:37,576 --> 00:47:40,006
see that we have several runtime


1483
00:47:40,006 --> 00:47:41,426
diagnostic tools here, like


1484
00:47:41,426 --> 00:47:42,676
Address Sanitizer which is great


1485
00:47:42,676 --> 00:47:44,136
at finding buffer overflows.


1486
00:47:45,486 --> 00:47:46,746
Let me choose Thread Sanitizer


1487
00:47:46,746 --> 00:47:48,396
and I'll also select Pause on


1488
00:47:48,396 --> 00:47:49,876
Issues which means that the


1489
00:47:49,876 --> 00:47:51,206
debugger will break every time


1490
00:47:51,446 --> 00:47:52,826
that Sanitizer detects a bug.


1491
00:47:54,636 --> 00:47:56,086
Let's run the app in the


1492
00:47:56,086 --> 00:47:57,556
Simulator with Thread Sanitizer


1493
00:47:57,556 --> 00:47:58,566
enabled and let's see what


1494
00:47:58,566 --> 00:48:00,366
happens now if I try to add a


1495
00:48:00,366 --> 00:48:00,986
new recipe.


1496
00:48:03,056 --> 00:48:05,056
If I click the + button now


1497
00:48:05,926 --> 00:48:06,796
you'll see that he app gets


1498
00:48:06,796 --> 00:48:07,966
immediately stopped because


1499
00:48:08,056 --> 00:48:09,246
Thread Sanitizer found the bug.


1500
00:48:09,636 --> 00:48:11,056
And notice that I didn't have to


1501
00:48:11,056 --> 00:48:12,776
try multiple times, Thread


1502
00:48:12,776 --> 00:48:14,056
Sanitizer reproduces


1503
00:48:14,056 --> 00:48:15,706
multithreading issues extremely


1504
00:48:15,706 --> 00:48:16,226
reliably.


1505
00:48:16,406 --> 00:48:18,616
So let's look at some details of


1506
00:48:18,616 --> 00:48:18,986
this bug.


1507
00:48:20,056 --> 00:48:22,106
We see that it's a Swift access


1508
00:48:22,106 --> 00:48:22,456
race.


1509
00:48:22,686 --> 00:48:25,306
And if we look at the left side


1510
00:48:25,306 --> 00:48:27,106
into the debug navigator we get


1511
00:48:27,106 --> 00:48:28,556
even some more details about


1512
00:48:28,556 --> 00:48:28,976
this bug.


1513
00:48:29,556 --> 00:48:31,606
We see that there's two accesses


1514
00:48:31,996 --> 00:48:33,076
performed by two different


1515
00:48:33,076 --> 00:48:34,976
threads, here is thread 2 and


1516
00:48:34,976 --> 00:48:37,086
thread 4, that are both trying


1517
00:48:37,086 --> 00:48:38,306
to access the same memory


1518
00:48:38,306 --> 00:48:40,266
location at the same time, which


1519
00:48:40,266 --> 00:48:40,926
is not allowed.


1520
00:48:41,446 --> 00:48:44,286
So if we take a look at these


1521
00:48:44,336 --> 00:48:45,756
two lines of code that are


1522
00:48:45,756 --> 00:48:47,686
forming the race we see that


1523
00:48:47,686 --> 00:48:49,486
they are both accessing the


1524
00:48:49,576 --> 00:48:50,526
image cache again.


1525
00:48:51,396 --> 00:48:52,806
So since this is a data


1526
00:48:52,806 --> 00:48:54,826
structure that is shared between


1527
00:48:54,826 --> 00:48:56,266
multiple threads as we see here


1528
00:48:56,536 --> 00:48:57,696
it needs to be a thread data


1529
00:48:57,696 --> 00:48:58,136
structure.


1530
00:48:58,866 --> 00:49:00,136
So let's look at how it's


1531
00:49:00,136 --> 00:49:01,826
implemented, let's jump to


1532
00:49:01,956 --> 00:49:03,016
storage here which is what we're


1533
00:49:03,016 --> 00:49:04,036
using and let's see if it


1534
00:49:04,036 --> 00:49:06,326
actually is thread safe.


1535
00:49:06,436 --> 00:49:08,466
So here's the source of image


1536
00:49:08,466 --> 00:49:09,656
cache, right here at the top of


1537
00:49:09,656 --> 00:49:11,326
the file and we can immediately


1538
00:49:11,326 --> 00:49:12,196
spot what's wrong.


1539
00:49:12,696 --> 00:49:14,306
This is just a plain Swift


1540
00:49:14,306 --> 00:49:16,196
dictionary so that's not good.


1541
00:49:16,446 --> 00:49:17,886
Swift dictionaries are not


1542
00:49:17,886 --> 00:49:19,156
thread safe by default.


1543
00:49:19,636 --> 00:49:21,586
So if we want to share a mutable


1544
00:49:21,676 --> 00:49:22,866
Swift dictionary between


1545
00:49:22,866 --> 00:49:25,146
multiple threads we have to


1546
00:49:25,146 --> 00:49:26,926
protect it with synchronization,


1547
00:49:27,476 --> 00:49:28,656
which means we have to make sure


1548
00:49:28,656 --> 00:49:30,336
that only one thread accesses it


1549
00:49:30,336 --> 00:49:30,876
at a time.


1550
00:49:31,846 --> 00:49:33,326
So now let's actually work on


1551
00:49:33,326 --> 00:49:34,656
fixing this problem and making


1552
00:49:34,656 --> 00:49:36,876
the class thread safe and I'll


1553
00:49:36,876 --> 00:49:37,806
do that in two steps.


1554
00:49:37,806 --> 00:49:41,186
First, I'll refactor this code a


1555
00:49:41,186 --> 00:49:42,836
little bit so that we have more


1556
00:49:42,836 --> 00:49:44,886
control over storage and then in


1557
00:49:44,886 --> 00:49:46,366
a second step I will use a


1558
00:49:46,366 --> 00:49:47,696
dispatch queue to actually make


1559
00:49:47,696 --> 00:49:48,696
this class thread safe.


1560
00:49:50,006 --> 00:49:52,106
So first of all what I don't


1561
00:49:52,106 --> 00:49:53,506
like here is that storage is


1562
00:49:53,506 --> 00:49:54,916
declared as a public variable.


1563
00:49:55,396 --> 00:49:56,896
That means that potentially any


1564
00:49:56,896 --> 00:49:58,496
code inside my app can be


1565
00:49:58,496 --> 00:49:58,976
accessing it.


1566
00:49:59,566 --> 00:50:01,056
And it will be really hard to


1567
00:50:01,056 --> 00:50:02,246
make sure that all the code in


1568
00:50:02,246 --> 00:50:04,466
my app does it correctly, so


1569
00:50:04,466 --> 00:50:06,316
let's change it to private


1570
00:50:06,316 --> 00:50:06,686
instead.


1571
00:50:07,116 --> 00:50:09,536
And let me introduce a different


1572
00:50:09,536 --> 00:50:11,726
way of accessing image cache and


1573
00:50:11,726 --> 00:50:13,536
I'll do that by introducing a


1574
00:50:13,536 --> 00:50:14,076
subscript.


1575
00:50:15,206 --> 00:50:16,806
That means that users of image


1576
00:50:16,806 --> 00:50:19,056
cache can use brackets to load


1577
00:50:19,056 --> 00:50:20,236
and store data from the cache.


1578
00:50:21,596 --> 00:50:24,546
So subscripting needs a getter,


1579
00:50:25,846 --> 00:50:27,086
like this one and a setter.


1580
00:50:28,446 --> 00:50:30,016
And for now let's just implement


1581
00:50:30,016 --> 00:50:31,986
these by directly accessing the


1582
00:50:31,986 --> 00:50:32,896
underlying storage.


1583
00:50:34,586 --> 00:50:36,206
And to make the rest of this


1584
00:50:36,456 --> 00:50:37,936
file actually build I need to


1585
00:50:37,936 --> 00:50:39,976
update the users, so instead of


1586
00:50:40,456 --> 00:50:41,876
accessing the storage property


1587
00:50:42,056 --> 00:50:43,646
we should be using brackets and


1588
00:50:43,646 --> 00:50:45,526
index into image cache directly


1589
00:50:46,226 --> 00:50:47,216
like this.


1590
00:50:47,436 --> 00:50:49,886
So if I hit Build Now you'll see


1591
00:50:49,886 --> 00:50:52,176
that the code will compile fine


1592
00:50:52,176 --> 00:50:53,586
now, but I didn't really fix any


1593
00:50:53,586 --> 00:50:54,176
bugs yet.


1594
00:50:55,006 --> 00:50:56,716
But I did achieve something, I


1595
00:50:56,716 --> 00:50:59,276
now have direct control over all


1596
00:50:59,276 --> 00:51:00,476
the code that can access


1597
00:51:00,536 --> 00:51:00,946
storage.


1598
00:51:01,146 --> 00:51:02,676
It's either going to be code in


1599
00:51:02,676 --> 00:51:04,536
this getter or the setter, no


1600
00:51:04,536 --> 00:51:06,066
other code in my app has access


1601
00:51:06,116 --> 00:51:06,336
to it.


1602
00:51:06,646 --> 00:51:08,046
So I'm in a very good position


1603
00:51:08,046 --> 00:51:09,696
to actually fix this Swift


1604
00:51:09,696 --> 00:51:10,436
access race.


1605
00:51:11,796 --> 00:51:13,216
And let me do that by using a


1606
00:51:13,216 --> 00:51:13,856
dispatch queue.


1607
00:51:14,066 --> 00:51:15,976
So let's create a new private


1608
00:51:15,976 --> 00:51:17,766
variable called queue and let's


1609
00:51:17,766 --> 00:51:19,976
assign a new dispatch queue into


1610
00:51:19,976 --> 00:51:20,076
it.


1611
00:51:21,346 --> 00:51:23,296
Dispatch queues are serial by


1612
00:51:23,296 --> 00:51:24,446
default, so this one is also


1613
00:51:24,446 --> 00:51:25,886
serial, which means that it will


1614
00:51:25,886 --> 00:51:28,136
only allow one piece of code to


1615
00:51:28,136 --> 00:51:30,336
execute inside that queue at a


1616
00:51:30,336 --> 00:51:30,726
time.


1617
00:51:31,046 --> 00:51:32,556
So that's perfect, that's


1618
00:51:32,556 --> 00:51:33,776
exactly what we need here.


1619
00:51:34,676 --> 00:51:36,236
How do we actually execute code


1620
00:51:36,236 --> 00:51:37,406
inside a dispatch queue?


1621
00:51:37,766 --> 00:51:40,066
We can use queue.sync and


1622
00:51:40,066 --> 00:51:42,076
whatever code I move into


1623
00:51:42,186 --> 00:51:45,756
queue.sync will be executed


1624
00:51:45,856 --> 00:51:47,246
inside that serial queue and


1625
00:51:47,246 --> 00:51:48,146
only one at a time.


1626
00:51:48,676 --> 00:51:50,256
And I can return a value here


1627
00:51:50,256 --> 00:51:51,446
because I need to return


1628
00:51:51,446 --> 00:51:52,316
something from the getter.


1629
00:51:53,476 --> 00:51:55,406
And I can fix the same thing in


1630
00:51:55,406 --> 00:51:56,146
the setter as well.


1631
00:51:56,316 --> 00:51:58,926
And if I move this line of code


1632
00:51:59,126 --> 00:52:01,296
into this queue.sync it will be


1633
00:52:01,296 --> 00:52:02,456
executed as part of that


1634
00:52:02,696 --> 00:52:03,286
dispatch queue.


1635
00:52:03,796 --> 00:52:06,076
So this way the code is now


1636
00:52:06,076 --> 00:52:07,856
thread safe because every single


1637
00:52:08,096 --> 00:52:09,316
line of code that accesses


1638
00:52:09,316 --> 00:52:11,576
storage is always executed


1639
00:52:11,666 --> 00:52:13,426
inside a serial dispatch queue,


1640
00:52:13,546 --> 00:52:15,126
which means it will only be


1641
00:52:15,126 --> 00:52:16,706
executed one at a time and is


1642
00:52:16,706 --> 00:52:18,376
[inaudible] thread safe.


1643
00:52:18,376 --> 00:52:20,286
Now it might be tempting to only


1644
00:52:20,286 --> 00:52:22,596
use the synchronization in the


1645
00:52:22,596 --> 00:52:24,736
setter where we are modifying


1646
00:52:24,736 --> 00:52:26,686
the storage and avoiding it in


1647
00:52:26,686 --> 00:52:27,546
the getter like this.


1648
00:52:28,496 --> 00:52:29,866
But that's not correct, that can


1649
00:52:29,866 --> 00:52:31,286
still cause memory corruptions


1650
00:52:31,286 --> 00:52:32,316
and still cause crashes.


1651
00:52:32,586 --> 00:52:33,956
Let me actually prove that to


1652
00:52:33,956 --> 00:52:35,706
you by running this version of


1653
00:52:35,706 --> 00:52:37,466
the code in the Simulator and


1654
00:52:37,466 --> 00:52:39,146
let's see if the Sanitizer finds


1655
00:52:39,146 --> 00:52:40,766
this little more subtle bug now.


1656
00:52:41,316 --> 00:52:44,926
As I expected it does.


1657
00:52:45,246 --> 00:52:47,056
We really have to protect both


1658
00:52:47,056 --> 00:52:49,046
the getter and the setter with


1659
00:52:49,046 --> 00:52:49,866
the synchronization.


1660
00:52:50,036 --> 00:52:52,596
So let me run my app one last


1661
00:52:52,596 --> 00:52:53,716
time in the Simulator and you


1662
00:52:53,716 --> 00:52:55,706
will see it if I try to a new


1663
00:52:55,706 --> 00:52:56,586
recipe this time.


1664
00:52:57,076 --> 00:52:58,406
The controller loads up just


1665
00:52:58,406 --> 00:52:59,866
fine and we don't get any more


1666
00:52:59,866 --> 00:53:01,206
warnings because the class is


1667
00:53:01,206 --> 00:53:02,806
now correctly thread safe.


1668
00:53:02,846 --> 00:53:04,126
So I can actually go back to our


1669
00:53:04,126 --> 00:53:06,476
Organizer window and mark this


1670
00:53:07,576 --> 00:53:08,756
crash as resolved because we


1671
00:53:08,756 --> 00:53:10,486
have found, identified, and


1672
00:53:10,486 --> 00:53:10,976
fixed this bug.


1673
00:53:11,516 --> 00:53:18,500
[ Applause ]


1674
00:53:21,286 --> 00:53:23,446
All right so what we've just


1675
00:53:23,446 --> 00:53:25,426
seen is that I've started with a


1676
00:53:25,426 --> 00:53:27,256
set of crash logs that all have


1677
00:53:27,256 --> 00:53:28,746
symptoms of a multithreading


1678
00:53:28,746 --> 00:53:28,946
bug.


1679
00:53:29,436 --> 00:53:30,596
And then I've used this tool


1680
00:53:30,636 --> 00:53:32,056
called Thread Sanitizer to


1681
00:53:32,056 --> 00:53:34,186
identify and eventually fix this


1682
00:53:34,186 --> 00:53:34,436
bug.


1683
00:53:35,576 --> 00:53:36,756
Thread Sanitizer not only


1684
00:53:36,756 --> 00:53:38,406
detects multithreading issues,


1685
00:53:38,456 --> 00:53:40,626
but it also makes them reproduce


1686
00:53:40,626 --> 00:53:41,626
much more reliably.


1687
00:53:42,276 --> 00:53:43,866
Notice that in the demo I didn't


1688
00:53:43,866 --> 00:53:45,356
have to invoke the controller


1689
00:53:45,356 --> 00:53:46,256
multiple times.


1690
00:53:47,436 --> 00:53:49,386
This tool works on macOS and in


1691
00:53:49,386 --> 00:53:51,846
the Simulator, but just like all


1692
00:53:51,846 --> 00:53:53,446
other runtime diagnostic tools


1693
00:53:53,506 --> 00:53:56,176
it only finds bugs in codes that


1694
00:53:56,176 --> 00:53:57,786
you exercise by actually running


1695
00:53:57,786 --> 00:53:57,906
it.


1696
00:53:58,536 --> 00:54:00,126
So you should keep that in mind


1697
00:54:00,126 --> 00:54:01,356
and make sure that your


1698
00:54:01,686 --> 00:54:03,966
automated or manual testing uses


1699
00:54:03,966 --> 00:54:05,366
Thread Sanitizer, especially on


1700
00:54:05,366 --> 00:54:06,996
any code that is using threading


1701
00:54:06,996 --> 00:54:07,356
or GCD.


1702
00:54:07,356 --> 00:54:10,846
And if you'd like to know more I


1703
00:54:10,846 --> 00:54:12,366
recommend that you watch a video


1704
00:54:12,366 --> 00:54:15,486
from my WWDC 2016 session called


1705
00:54:15,486 --> 00:54:16,786
Thread Sanitizer and Static


1706
00:54:16,786 --> 00:54:18,206
Analysis where we have


1707
00:54:18,336 --> 00:54:20,346
introduced this tool and we also


1708
00:54:20,486 --> 00:54:21,936
talked about how it works under


1709
00:54:21,936 --> 00:54:22,226
the hood.


1710
00:54:22,596 --> 00:54:25,566
As a reminder, Thread Sanitizer


1711
00:54:25,566 --> 00:54:26,926
can be found in the Scheme


1712
00:54:26,926 --> 00:54:27,206
Editor.


1713
00:54:27,686 --> 00:54:29,686
So if you go to Product, Scheme


1714
00:54:29,956 --> 00:54:32,006
and Edit Scheme that will bring


1715
00:54:32,006 --> 00:54:32,956
up the Scheme Editor.


1716
00:54:32,956 --> 00:54:34,646
And then we can switch over to


1717
00:54:34,646 --> 00:54:36,026
the Diagnostics tab where you


1718
00:54:36,026 --> 00:54:37,836
can find Thread Sanitizer among


1719
00:54:37,836 --> 00:54:39,536
the other runtime diagnostic


1720
00:54:39,586 --> 00:54:39,976
tools.


1721
00:54:41,216 --> 00:54:43,546
I have one more debugging tip


1722
00:54:43,546 --> 00:54:44,516
that I would like to share with


1723
00:54:44,516 --> 00:54:46,136
you that's useful when dealing


1724
00:54:46,176 --> 00:54:46,986
with multithreading.


1725
00:54:48,046 --> 00:54:49,686
When you are creating dispatch


1726
00:54:49,686 --> 00:54:51,906
queues you can provide a custom


1727
00:54:51,906 --> 00:54:53,216
label in the initializer.


1728
00:54:54,576 --> 00:54:56,266
You can assign a custom name to


1729
00:54:56,266 --> 00:54:58,566
an operation queue and if you're


1730
00:54:58,566 --> 00:55:00,326
working with threads you can use


1731
00:55:00,326 --> 00:55:01,646
custom names with threads as


1732
00:55:01,646 --> 00:55:01,876
well.


1733
00:55:03,086 --> 00:55:04,406
These names and labels are


1734
00:55:04,406 --> 00:55:05,756
displayed in the debugger but


1735
00:55:05,756 --> 00:55:07,606
they also appear in some types


1736
00:55:07,606 --> 00:55:09,646
of crash logs and that can help


1737
00:55:09,646 --> 00:55:11,306
you often narrow down possible


1738
00:55:11,306 --> 00:55:14,616
causes of multithreading bugs.


1739
00:55:15,556 --> 00:55:16,896
Okay so to stay on top of


1740
00:55:16,896 --> 00:55:19,116
crashes I have three takeaway


1741
00:55:19,116 --> 00:55:19,776
points for you.


1742
00:55:20,556 --> 00:55:22,656
Number one, always test your


1743
00:55:22,656 --> 00:55:25,276
apps on real devices before


1744
00:55:25,276 --> 00:55:26,356
submitting them to the App


1745
00:55:26,356 --> 00:55:28,626
Store, that will help you avoid


1746
00:55:28,626 --> 00:55:30,506
getting rejected in App Review.


1747
00:55:31,796 --> 00:55:33,416
Number two, when you do get


1748
00:55:33,606 --> 00:55:35,386
crashes from your users you


1749
00:55:35,386 --> 00:55:36,686
should always try to reproduce


1750
00:55:36,686 --> 00:55:36,866
them.


1751
00:55:37,506 --> 00:55:39,126
Look at the crash logs and look


1752
00:55:39,126 --> 00:55:40,356
at the stack traces and try to


1753
00:55:40,356 --> 00:55:41,846
figure out which parts of your


1754
00:55:41,846 --> 00:55:43,886
app do you need to exercise to


1755
00:55:43,886 --> 00:55:45,456
trigger a crash or to try to


1756
00:55:45,456 --> 00:55:46,336
reproduce the crash.


1757
00:55:46,906 --> 00:55:49,166
And finally, for crashes that


1758
00:55:49,166 --> 00:55:50,936
are hard to reproduce I


1759
00:55:50,936 --> 00:55:52,446
recommend using bug finding


1760
00:55:52,446 --> 00:55:54,216
tools, such as Address Sanitizer


1761
00:55:54,216 --> 00:55:56,486
or Thread Sanitizer which work


1762
00:55:56,486 --> 00:55:58,096
for editing memory corruption


1763
00:55:58,096 --> 00:55:59,216
bugs and multithreading


1764
00:55:59,216 --> 00:55:59,706
problems.


1765
00:56:00,396 --> 00:56:04,056
So now let's recap what we've


1766
00:56:04,056 --> 00:56:04,706
learned today.


1767
00:56:05,786 --> 00:56:07,636
Chris has showed us how we can


1768
00:56:07,636 --> 00:56:08,976
and should use the Organizer


1769
00:56:08,976 --> 00:56:10,796
window in Xcode to get


1770
00:56:11,126 --> 00:56:12,466
statistics and also details


1771
00:56:12,466 --> 00:56:13,186
about crash logs.


1772
00:56:14,286 --> 00:56:15,996
Greg showed us how to read and


1773
00:56:15,996 --> 00:56:17,926
analyze the text of crash logs.


1774
00:56:18,736 --> 00:56:19,756
In many cases, they can be


1775
00:56:19,756 --> 00:56:21,386
reproduced like if you are


1776
00:56:21,386 --> 00:56:22,826
dealing with app lunch timeouts.


1777
00:56:24,076 --> 00:56:26,716
Then we've crash log crashes


1778
00:56:26,716 --> 00:56:27,796
that are hard to reproduce


1779
00:56:27,796 --> 00:56:28,966
because they happen randomly


1780
00:56:28,966 --> 00:56:30,096
like memory corruptions.


1781
00:56:30,486 --> 00:56:32,466
And we have mentioned what signs


1782
00:56:32,846 --> 00:56:33,936
they leave in crash logs.


1783
00:56:34,796 --> 00:56:36,646
And finally, I've shown how bug


1784
00:56:36,646 --> 00:56:37,486
finding tools like the


1785
00:56:37,486 --> 00:56:39,106
Sanitizers can help you


1786
00:56:39,106 --> 00:56:41,606
reproduce issues that are memory


1787
00:56:41,606 --> 00:56:42,916
corruptions and threading issues


1788
00:56:43,026 --> 00:56:44,116
and I recommend that you use


1789
00:56:44,116 --> 00:56:45,006
these tools as well.


1790
00:56:45,956 --> 00:56:47,576
For more information please


1791
00:56:47,576 --> 00:56:49,466
visit our session's webpage


1792
00:56:49,466 --> 00:56:51,006
where we will also include links


1793
00:56:51,056 --> 00:56:52,036
to the technotes that we


1794
00:56:52,036 --> 00:56:53,366
mentioned and also the other


1795
00:56:53,366 --> 00:56:54,406
documents that provides


1796
00:56:54,466 --> 00:56:55,966
debugging tips that are helpful


1797
00:56:56,196 --> 00:56:57,076
when dealing with crashes.


1798
00:56:57,596 --> 00:56:58,846
And I'd like to remind you that


1799
00:56:58,846 --> 00:57:00,166
there is a crash logs lab


1800
00:57:00,166 --> 00:57:01,496
starting right after this


1801
00:57:01,496 --> 00:57:03,736
session at 12 p.m. in Technology


1802
00:57:03,736 --> 00:57:05,256
Lab 8, so please stop by if you


1803
00:57:05,256 --> 00:57:06,636
have any questions about crashes


1804
00:57:06,636 --> 00:57:07,206
and crash logs.


1805
00:57:07,636 --> 00:57:09,026
And enjoy the rest of WWDC,


1806
00:57:09,026 --> 00:57:09,936
thank you very much.


1807
00:57:10,508 --> 00:57:12,508
[ Applause ]

