1
00:00:07,516 --> 00:00:18,500
[ Music ]


2
00:00:28,516 --> 00:00:30,576
[ Applause ]


3
00:00:31,076 --> 00:00:32,006
>> So, good morning, everyone.


4
00:00:33,966 --> 00:00:35,016
So, my name is Tom Witkin,


5
00:00:35,016 --> 00:00:37,136
and I'm an Engineer here
at Apple on watchOS.


6
00:00:37,486 --> 00:00:39,006
And this morning, we're
going to be talking


7
00:00:39,006 --> 00:00:40,316
about building quick
interactions


8
00:00:40,316 --> 00:00:41,736
into your Apple Watch apps.


9
00:00:42,336 --> 00:00:44,186
And first off, we'd like to
start with the question -


10
00:00:44,946 --> 00:00:46,936
what do we even mean
by a quick interaction?


11
00:00:47,676 --> 00:00:49,656
So I'm sure that many of
you have developed apps


12
00:00:49,656 --> 00:00:51,636
for iOS or for Mac OS.


13
00:00:52,176 --> 00:00:54,786
And on those platforms, we're
typically measuring the amount


14
00:00:54,786 --> 00:00:57,416
of time a user is spending
in your applications in terms


15
00:00:57,416 --> 00:00:59,056
of minutes or even hours.


16
00:00:59,456 --> 00:01:01,476
But in watchOS, it's
just not the case.


17
00:01:01,476 --> 00:01:04,296
A user wants to be able to raise
their wrist and quickly get


18
00:01:04,336 --> 00:01:07,036
to specific information or
perform a certain action,


19
00:01:07,336 --> 00:01:08,606
and then drop their
wrist and go back


20
00:01:08,606 --> 00:01:09,506
to whatever they were doing.


21
00:01:09,736 --> 00:01:12,076
And so the interaction
model is entirely different.


22
00:01:12,746 --> 00:01:13,626
So here are some examples


23
00:01:13,626 --> 00:01:15,536
of what a quick interaction
on Apple Watch are.


24
00:01:17,216 --> 00:01:23,516
So, for example, starting a
timer, or checking the weather,


25
00:01:27,396 --> 00:01:29,576
or marking an item
off your grocery list.


26
00:01:30,156 --> 00:01:33,366
And so we think that these are
some of the prototypical types


27
00:01:33,366 --> 00:01:34,886
of interactions on Apple Watch,


28
00:01:34,886 --> 00:01:36,766
and there are some key
philosophies behind these


29
00:01:36,766 --> 00:01:37,806
that you've probably
heard this week.


30
00:01:38,816 --> 00:01:40,686
So, first off, apps
on Apple Watch --


31
00:01:40,826 --> 00:01:41,796
they need to be glanceable.


32
00:01:41,906 --> 00:01:43,406
Which means that,
with just a glance,


33
00:01:43,696 --> 00:01:46,046
your users should be able to get
the information that they need.


34
00:01:46,676 --> 00:01:48,546
Apps need to be actionable,


35
00:01:48,846 --> 00:01:51,296
which means that your users
should be able to make quick


36
00:01:51,536 --> 00:01:52,816
and well-informed decisions.


37
00:01:53,196 --> 00:01:55,226
And lastly, they
should be responsive.


38
00:01:55,286 --> 00:01:57,066
You should never be
making your users wait.


39
00:01:57,066 --> 00:01:59,866
And if you're interested in
learning more about these,


40
00:01:59,866 --> 00:02:01,166
I highly recommend
that you check


41
00:02:01,166 --> 00:02:03,716
out the Designing Great Apple
Watch Experiences talk this


42
00:02:03,716 --> 00:02:05,466
afternoon, or watch the video


43
00:02:05,466 --> 00:02:08,726
of the What's New in
watchOS 3 session.


44
00:02:09,746 --> 00:02:11,996
And so now we know a
bit about what we mean


45
00:02:11,996 --> 00:02:12,936
by a quick interaction.


46
00:02:13,356 --> 00:02:17,116
But how long is a quick
interaction on Apple Watch?


47
00:02:17,986 --> 00:02:19,896
And so we think that
the ideal length


48
00:02:19,896 --> 00:02:23,586
of interaction is
only 2 seconds long.


49
00:02:23,946 --> 00:02:24,666
So, 2 seconds.


50
00:02:24,666 --> 00:02:25,816
That's not very long at all.


51
00:02:25,816 --> 00:02:29,186
And so you have to be very
deliberate in how you design


52
00:02:29,246 --> 00:02:30,626
and build your applications.


53
00:02:30,926 --> 00:02:32,896
But we think that it's
more than possible,


54
00:02:32,896 --> 00:02:35,236
especially with all the
new features and API


55
00:02:35,436 --> 00:02:37,276
that we've added in watchOS 3.


56
00:02:37,946 --> 00:02:39,236
And so that's how we're
going to start off --


57
00:02:39,236 --> 00:02:41,476
is by talking about these
new features and API.


58
00:02:41,476 --> 00:02:43,506
And then afterward,
we're going to look


59
00:02:43,506 --> 00:02:46,036
at some practical techniques
that you can use in your apps


60
00:02:46,236 --> 00:02:48,206
to build these types
of quick interactions.


61
00:02:48,846 --> 00:02:51,046
And with that, I'd like to hand
the stage over to my colleague


62
00:02:51,266 --> 00:02:52,836
to talk through the
new features and API.


63
00:02:53,031 --> 00:02:55,031
[ Applause ]


64
00:02:55,046 --> 00:02:55,546
>> Thanks, Tom.


65
00:02:56,216 --> 00:02:56,896
Hi, everybody.


66
00:02:57,046 --> 00:02:57,786
My name is Miguel.


67
00:02:58,536 --> 00:03:01,246
I'll be giving you a quick
overview of the new APIs


68
00:03:01,246 --> 00:03:03,956
that we're introducing
in WatchKit to allow you


69
00:03:03,956 --> 00:03:05,406
to implement quick interactions.


70
00:03:05,906 --> 00:03:10,296
I'll be talking about five
sets of API that allow you


71
00:03:10,296 --> 00:03:12,836
to make your apps glanceable,
actionable, and responsive.


72
00:03:13,976 --> 00:03:17,266
The first has to do with
giving you more access


73
00:03:17,266 --> 00:03:18,336
to new kinds of input.


74
00:03:19,116 --> 00:03:20,436
You can now do gestures


75
00:03:20,436 --> 00:03:22,176
with gesture recognizers
in your apps.


76
00:03:23,686 --> 00:03:24,806
We are giving you access


77
00:03:24,806 --> 00:03:27,036
to the rotation events
in the Digital Crown.


78
00:03:28,696 --> 00:03:31,796
And we're also having
three other areas.


79
00:03:32,366 --> 00:03:35,006
One is for improved
table navigation,


80
00:03:35,546 --> 00:03:38,456
the support for the new
user notification framework,


81
00:03:38,816 --> 00:03:41,526
as well as integration with
SpriteKit and SceneKit.


82
00:03:42,446 --> 00:03:43,496
So let's jump right in.


83
00:03:44,196 --> 00:03:46,376
I'll be giving you an
overview of the API,


84
00:03:46,376 --> 00:03:49,326
and then Tom will come back
on stage and show you examples


85
00:03:49,326 --> 00:03:51,526
of how he combines
multiple of these APIs.


86
00:03:52,536 --> 00:03:56,236
So if you have used
gesture recognizers in iOS,


87
00:03:56,236 --> 00:03:58,876
you pretty much already
know all there is to know


88
00:03:58,876 --> 00:04:01,246
for gesture recognition
in watchOS.


89
00:04:01,246 --> 00:04:04,546
If you haven't, gesture
recognizers are objects


90
00:04:05,086 --> 00:04:07,596
that help you parse the
lower-level touch events


91
00:04:07,656 --> 00:04:09,886
into recognizable gestures.


92
00:04:10,516 --> 00:04:13,246
We're writing support
for four recognizers.


93
00:04:13,276 --> 00:04:18,736
Two discretes -- the
SwipeGesture, the TapGesture.


94
00:04:18,926 --> 00:04:20,995
And two continuous
gesture recognizers --


95
00:04:22,996 --> 00:04:27,786
the PanGesture, and
the LongPress.


96
00:04:29,106 --> 00:04:32,286
So the way you use this, like
most of the development you do


97
00:04:32,286 --> 00:04:35,316
in WatchKit, is an interface
builder in your storyboard.


98
00:04:36,106 --> 00:04:38,826
You are dragging the
objects into your interface.


99
00:04:39,406 --> 00:04:40,836
So if you look at the library,


100
00:04:40,836 --> 00:04:43,546
you can now see four
instances of the recognizers.


101
00:04:43,926 --> 00:04:46,316
These are dragged into
the elements that you want


102
00:04:46,716 --> 00:04:48,336
to have gestures
attached to them.


103
00:04:48,996 --> 00:04:51,226
And you do the configuration
interface builder


104
00:04:51,226 --> 00:04:52,086
in the inspector.


105
00:04:53,376 --> 00:04:56,426
The last thing you do is drag
the action of the recognizer


106
00:04:56,426 --> 00:04:58,726
into a function within
your code.


107
00:04:59,186 --> 00:05:00,686
This is a function
that's invoked


108
00:05:00,686 --> 00:05:02,766
when the gesture is
recognized by the system.


109
00:05:03,436 --> 00:05:04,256
As you can see, one


110
00:05:04,256 --> 00:05:07,066
of the parameters is the
gesture recognizer itself.


111
00:05:07,916 --> 00:05:10,586
From it, you can
now get the location


112
00:05:11,256 --> 00:05:13,286
where the gesture
was recognized,


113
00:05:13,286 --> 00:05:15,476
the bounds of the object,
as well as the state


114
00:05:15,476 --> 00:05:16,646
that the gesture is in.


115
00:05:18,076 --> 00:05:20,686
So, a few words about
the state of gestures.


116
00:05:21,826 --> 00:05:25,366
Gestures begin in the possible
state before they're recognized,


117
00:05:25,366 --> 00:05:26,506
and they can transition either


118
00:05:26,506 --> 00:05:28,476
to a recognized or
a failed state.


119
00:05:28,986 --> 00:05:30,836
When you're dealing
with discrete gestures,


120
00:05:30,886 --> 00:05:33,256
you really don't think too
much in terms of states.


121
00:05:33,606 --> 00:05:36,616
All you need to know is that
when the gesture is recognized,


122
00:05:36,616 --> 00:05:37,996
your action method is called.


123
00:05:39,186 --> 00:05:42,066
This is slightly different
from continuous gestures.


124
00:05:42,796 --> 00:05:44,806
They also begin in
the possible state.


125
00:05:45,006 --> 00:05:48,766
But as their name
implies, they progress


126
00:05:48,766 --> 00:05:51,456
over multiple updates
into your code.


127
00:05:51,456 --> 00:05:54,986
So just assume that your action
method will be called multiple


128
00:05:54,986 --> 00:05:58,526
times as your gesture is
changing, giving you a chance


129
00:05:58,526 --> 00:06:00,116
to update your user interface.


130
00:06:01,616 --> 00:06:04,836
Some tips for using
gestures in watchOS.


131
00:06:05,966 --> 00:06:09,016
We recommend that
you attach them


132
00:06:09,016 --> 00:06:11,236
to the group elements
rather than the controls.


133
00:06:11,236 --> 00:06:13,196
You can do that, but you
might conflict with some


134
00:06:13,196 --> 00:06:15,516
of the gestures that are
already present in the controls.


135
00:06:16,366 --> 00:06:19,126
And remember that you have
a smaller screen real estate


136
00:06:19,126 --> 00:06:21,606
in the Watch app,
so the groups tend


137
00:06:21,606 --> 00:06:24,226
to be the bigger interface
elements in your application.


138
00:06:25,866 --> 00:06:29,086
You can still set dependency
relationships between gestures.


139
00:06:29,826 --> 00:06:33,026
But for watchOS, this is only
possible in the inspector


140
00:06:33,026 --> 00:06:35,656
and interface builder.


141
00:06:35,806 --> 00:06:37,596
And be mindful that some


142
00:06:37,596 --> 00:06:39,726
of the system gestures
will take precedence


143
00:06:39,726 --> 00:06:41,266
over the gestures
that you will define.


144
00:06:42,326 --> 00:06:45,236
For example, if you
have an element


145
00:06:45,236 --> 00:06:48,876
that already has scrolling
enabled and you're trying


146
00:06:48,876 --> 00:06:51,976
to attach a SwipeDown gesture,
that will not be recognized.


147
00:06:51,976 --> 00:06:53,336
The scrolling will
take precedence.


148
00:06:53,886 --> 00:06:56,276
The same thing for the
ForceTouch and the LongPress.


149
00:06:58,226 --> 00:07:00,166
Now let's move onto our
second input element --


150
00:07:00,166 --> 00:07:01,416
the Digital Crown.


151
00:07:02,346 --> 00:07:05,596
This is a unique element
for the Apple Watch


152
00:07:05,736 --> 00:07:09,726
that allows your users quick and
precise control of their input.


153
00:07:10,166 --> 00:07:12,976
You've had access to the
Crown since watchOS 2


154
00:07:13,356 --> 00:07:15,466
through the WKInterfacePicker
object.


155
00:07:16,856 --> 00:07:19,176
To use that, you
are giving us a list


156
00:07:19,176 --> 00:07:21,406
of picker items and
setting a style.


157
00:07:22,866 --> 00:07:25,246
And WatchKit takes care of
drawing the element for you.


158
00:07:25,246 --> 00:07:26,526
Here is the list style.


159
00:07:26,656 --> 00:07:31,676
You have the stacks style
and the image sequence style.


160
00:07:32,266 --> 00:07:36,676
But for this element,
WatchKit is taking care


161
00:07:36,676 --> 00:07:38,216
of a lot of stuff for you.


162
00:07:38,216 --> 00:07:40,416
We're drawing the
element, we're taking care


163
00:07:40,416 --> 00:07:42,786
of interpreting the
Crown events,


164
00:07:42,786 --> 00:07:45,836
and we're simply calling your
action when a selection is made.


165
00:07:46,956 --> 00:07:50,036
So, in watchOS 3, we are
now giving you direct access


166
00:07:50,036 --> 00:07:53,456
to the rotation events so
that you can write your own UI


167
00:07:53,456 --> 00:07:56,106
elements and drive them
with the rotation values.


168
00:07:58,016 --> 00:08:00,346
This is achieved
through two new objects


169
00:08:00,406 --> 00:08:03,446
through new classes we're
introducing -- WKCrownSequencer,


170
00:08:03,446 --> 00:08:05,666
which gives you access
to the rotation events --


171
00:08:06,596 --> 00:08:08,076
I'm sorry, the rotations
per second.


172
00:08:08,346 --> 00:08:11,216
And the new delegate
protocol, WKCrownDelegate,


173
00:08:11,606 --> 00:08:13,626
with callbacks on
rotational deltas.


174
00:08:14,326 --> 00:08:16,706
So you have two kinds of
values you're receiving --


175
00:08:16,706 --> 00:08:19,326
rotations per second
and rotational deltas.


176
00:08:19,986 --> 00:08:22,496
What do you do with each one of
them, or how do you access them?


177
00:08:23,286 --> 00:08:26,016
If you're interested in
rotations per second,


178
00:08:26,676 --> 00:08:29,056
you want to access the
crownSequencer property


179
00:08:29,056 --> 00:08:30,376
which is now present in all


180
00:08:30,376 --> 00:08:32,135
of the interface
controller classes.


181
00:08:33,256 --> 00:08:36,996
And you query its rotations
per second property.


182
00:08:37,366 --> 00:08:39,066
This is probably something
you're going to be using


183
00:08:39,066 --> 00:08:41,686
when you're interested in the
speed of the Crown rotation


184
00:08:41,856 --> 00:08:43,816
in maybe a physics-based
animation,


185
00:08:43,816 --> 00:08:47,796
a game, something like that.


186
00:08:47,796 --> 00:08:50,456
Rotational deltas are
communicated to you


187
00:08:50,456 --> 00:08:51,786
through the delegate protocol.


188
00:08:52,346 --> 00:08:55,936
This is how you're able to
count how many times the Crown


189
00:08:55,936 --> 00:08:56,806
has rotated.


190
00:08:57,736 --> 00:09:00,466
So you will get a callback
in the crownDidRotate method.


191
00:09:00,696 --> 00:09:02,276
You will have the
rotationalDelta


192
00:09:02,276 --> 00:09:03,626
as one of its arguments.


193
00:09:05,536 --> 00:09:07,746
And what you want to do
in this method is you want


194
00:09:07,746 --> 00:09:09,646
to maintain an accumulator
variable


195
00:09:09,736 --> 00:09:12,296
where you add the deltas
that we're passing on to you.


196
00:09:13,186 --> 00:09:17,256
The math you want to use
is a full rotation is equal


197
00:09:17,256 --> 00:09:19,066
to accumulated deltas of 1.


198
00:09:20,786 --> 00:09:22,726
Another example is if
you're only interested


199
00:09:22,726 --> 00:09:26,326
in detecting half rotations, you
accumulate your deltas up to .5.


200
00:09:26,636 --> 00:09:28,906
So you're adding the deltas
as we give them to you.


201
00:09:28,906 --> 00:09:30,646
And when they cross
this threshold,


202
00:09:30,646 --> 00:09:32,426
you know that a rotation
has occurred.


203
00:09:33,966 --> 00:09:35,806
It's really up to you to figure


204
00:09:35,806 --> 00:09:39,196
out how these rotation counts
correspond to the sensitivity


205
00:09:39,196 --> 00:09:40,736
of the content that
you want to display.


206
00:09:43,836 --> 00:09:47,126
When we're communicating values
to you, keep in mind the sign --


207
00:09:47,276 --> 00:09:48,566
either positive or negative.


208
00:09:49,346 --> 00:09:51,986
When your users are
scrolling with the intent


209
00:09:51,986 --> 00:09:53,316
of moving their content up,


210
00:09:53,316 --> 00:09:55,586
we will be giving
you positive values.


211
00:09:56,106 --> 00:09:57,506
And when they're
scrolling with the intent


212
00:09:57,506 --> 00:09:58,646
to moving the content down,


213
00:09:58,646 --> 00:09:59,976
we're giving you
negative values.


214
00:10:00,416 --> 00:10:03,756
And these values are orientation
agnostic, so you don't have


215
00:10:03,796 --> 00:10:05,556
to worry about what
counter-clockwise


216
00:10:05,556 --> 00:10:06,486
or clockwise means.


217
00:10:06,486 --> 00:10:12,376
If your users change their Crown
orientation, we will continue


218
00:10:12,376 --> 00:10:15,946
to give you a positive value
or a negative value for up


219
00:10:15,946 --> 00:10:19,216
and down, so you don't
have to worry about that.


220
00:10:19,336 --> 00:10:21,766
Finally, there's a concept
of focus on the Crown.


221
00:10:22,246 --> 00:10:25,666
The focus can be taken away
by other interface elements --


222
00:10:25,666 --> 00:10:29,116
for example, a picker, a
slider, any scrolling element.


223
00:10:29,486 --> 00:10:31,426
So it's up to you to determine


224
00:10:31,426 --> 00:10:33,746
when your interface
element needs


225
00:10:33,746 --> 00:10:35,026
to be the focus of the Crown.


226
00:10:35,496 --> 00:10:38,436
This is a great place to
be using the new gestures.


227
00:10:40,006 --> 00:10:44,246
And once you determine that
your element needs to be


228
00:10:44,246 --> 00:10:47,286
in focus again, please
call the function "focus".


229
00:10:47,356 --> 00:10:49,336
And don't forget to
call this initially


230
00:10:49,336 --> 00:10:54,366
when your interface
controller first comes up.


231
00:10:55,606 --> 00:10:59,046
Now let's put aside the input
elements and let's talk a lot


232
00:10:59,046 --> 00:11:01,466
about the vertical paging
that we're introducing.


233
00:11:03,156 --> 00:11:08,216
The typical way that your users
navigate in your tables is


234
00:11:08,216 --> 00:11:10,626
by selecting a row
and seeing the detail


235
00:11:10,626 --> 00:11:12,576
for that particular row
in a separate controller.


236
00:11:13,376 --> 00:11:15,986
They need to navigate
back into the master table


237
00:11:16,296 --> 00:11:21,056
to select another row before
they're able to see that detail.


238
00:11:21,226 --> 00:11:24,876
In watchOS 3, we have the
vertical paging concept.


239
00:11:25,286 --> 00:11:28,976
So when you enable this in
your tables, once your users go


240
00:11:28,976 --> 00:11:33,246
into their first detail, they're
able to swipe with their fingers


241
00:11:33,246 --> 00:11:35,176
or with the Crown up and down


242
00:11:35,176 --> 00:11:37,286
and see the subsequent
row detail.


243
00:11:38,256 --> 00:11:42,126
So this eliminates their need to
go back into the master table,


244
00:11:42,746 --> 00:11:44,936
making your app seem
a lot more responsive.


245
00:11:46,376 --> 00:11:48,086
So how do you opt
into this mode?


246
00:11:48,366 --> 00:11:49,866
It's actually pretty
straightforward.


247
00:11:49,866 --> 00:11:53,786
All you need to do is enable
the Item Pagination checkbox


248
00:11:53,826 --> 00:11:56,266
in your table inspector.


249
00:11:56,266 --> 00:11:57,946
But you also need to make sure


250
00:11:57,946 --> 00:12:01,306
that your table is
using the segues API.


251
00:12:02,016 --> 00:12:04,456
That's where you're giving
us what context you want


252
00:12:04,456 --> 00:12:06,916
to instantiate a controller
with and we instantiate it


253
00:12:06,916 --> 00:12:07,846
with the given context.


254
00:12:07,846 --> 00:12:09,586
You're probably already
doing that.


255
00:12:10,856 --> 00:12:13,426
So the API itself
hasn't changed much.


256
00:12:13,426 --> 00:12:15,116
There's a couple of changes.


257
00:12:15,196 --> 00:12:17,726
There's a single method
that allows you to jump


258
00:12:17,726 --> 00:12:19,686
into the segue mode from code.


259
00:12:20,376 --> 00:12:22,716
This is useful when you're
launching your application


260
00:12:22,716 --> 00:12:26,686
from tapping on a complication
or tapping from a notification


261
00:12:26,686 --> 00:12:28,366
and you want to directly go


262
00:12:28,366 --> 00:12:31,146
into a specific row
in the segue mode.


263
00:12:32,736 --> 00:12:36,676
The second thing you need to be
aware of is WatchKit is trying


264
00:12:36,676 --> 00:12:37,806
to be smart and help you


265
00:12:37,806 --> 00:12:39,356
out with the speed
of your application.


266
00:12:39,356 --> 00:12:41,396
So we're doing preheating
of controllers,


267
00:12:41,396 --> 00:12:43,586
anticipating what the
user could do in terms


268
00:12:43,586 --> 00:12:44,696
of scrolling up and down.


269
00:12:45,256 --> 00:12:47,006
So some of the lifecycle methods


270
00:12:47,006 --> 00:12:50,466
for your controllers will be
called before your elements are


271
00:12:50,466 --> 00:12:51,066
on screen.


272
00:12:51,936 --> 00:12:54,206
I won't be going too much
into detail about this.


273
00:12:54,206 --> 00:12:57,506
But we have a whole new session,
Architecting for Performance,


274
00:12:57,506 --> 00:12:59,416
where they give a
fairly detailed example


275
00:12:59,506 --> 00:13:01,976
on all the badging of
the lifecycle methods.


276
00:13:03,486 --> 00:13:05,646
Now let's talk about
notifications.


277
00:13:05,646 --> 00:13:09,186
These are the ultimate
quick interactions


278
00:13:09,186 --> 00:13:10,986
that we've introduced
since the beginning


279
00:13:11,086 --> 00:13:12,506
of the Apple Watch product.


280
00:13:14,276 --> 00:13:17,696
So from a user's point of view,
your user's point of view,


281
00:13:18,696 --> 00:13:22,526
the way they interact with
notifications is simply


282
00:13:22,526 --> 00:13:24,446
by feeling the haptic
in their arm.


283
00:13:25,316 --> 00:13:28,766
They raise their wrist and
they automatically see this


284
00:13:28,766 --> 00:13:31,176
short-look interface
for your notification.


285
00:13:31,936 --> 00:13:36,036
If they keep their hand
raised, we transition


286
00:13:36,036 --> 00:13:38,296
into the long-look
of the notification.


287
00:13:41,236 --> 00:13:44,016
The way they respond to
your notifications is --


288
00:13:44,256 --> 00:13:46,586
I'm going to walk through
the long-look example,


289
00:13:46,586 --> 00:13:48,456
which is the one that
has the most detail here.


290
00:13:49,776 --> 00:13:52,286
So if you've done
a good job in terms


291
00:13:52,286 --> 00:13:55,226
of communicating the
content of your notification


292
00:13:55,226 --> 00:13:57,866
through the text,
they'll do nothing other


293
00:13:57,866 --> 00:13:59,266
than dismiss the notification.


294
00:13:59,266 --> 00:14:01,006
That is the shortest
quick interaction.


295
00:14:02,356 --> 00:14:08,226
They could also tap on the
notification to launch your app.


296
00:14:08,486 --> 00:14:13,106
Or, remember that notifications
can have custom actions


297
00:14:13,106 --> 00:14:14,166
associated with them.


298
00:14:14,716 --> 00:14:16,236
In this case, I'm
showing three --


299
00:14:16,346 --> 00:14:18,426
the Accept, Maybe,
and Decline button.


300
00:14:18,726 --> 00:14:20,456
You can have up to
a total of four.


301
00:14:21,456 --> 00:14:24,016
When you're associating
actions with your notifications,


302
00:14:24,656 --> 00:14:26,896
they can either be
foreground actions --


303
00:14:27,266 --> 00:14:29,536
meaning that if the
user taps on the button,


304
00:14:29,536 --> 00:14:33,246
your application will become
active -- or background actions.


305
00:14:34,306 --> 00:14:38,426
Background actions in watchOS
2 were always forwarded


306
00:14:38,426 --> 00:14:39,056
to your phone.


307
00:14:41,756 --> 00:14:45,756
The big change in watchOS
3 for a notification is


308
00:14:45,756 --> 00:14:49,086
that there's a whole new
notification framework.


309
00:14:50,786 --> 00:14:53,776
Please go to the Introduction
to Notifications session


310
00:14:53,776 --> 00:14:57,206
to learn all of the details
about the new framework itself.


311
00:14:57,206 --> 00:15:00,036
But the high-level
points for you


312
00:15:00,036 --> 00:15:01,936
as WatchKit developers
are three.


313
00:15:04,256 --> 00:15:08,366
You now have a set of
similar notification APIs


314
00:15:08,366 --> 00:15:11,716
across platforms --
iOS, tvOS, and watchOS.


315
00:15:13,456 --> 00:15:16,826
You can now schedule local
notifications on your watch.


316
00:15:18,996 --> 00:15:20,916
And notifications


317
00:15:20,916 --> 00:15:24,106
with background actions will now
be delivered to your extension


318
00:15:24,666 --> 00:15:26,936
as long as they were
scheduled on the Watch.


319
00:15:30,116 --> 00:15:33,246
Let's look at the API.


320
00:15:33,246 --> 00:15:35,806
The new object,
UNUserNotificationCenter,


321
00:15:36,056 --> 00:15:38,816
you want to become the
delegate of that object probably


322
00:15:38,816 --> 00:15:40,356
when your application
is launching


323
00:15:40,356 --> 00:15:42,126
in the
applicationDidFinishLaunching


324
00:15:42,126 --> 00:15:42,506
method.


325
00:15:43,536 --> 00:15:44,586
And you want to indicate


326
00:15:44,586 --> 00:15:47,526
that you are adopting
the notification center


327
00:15:47,526 --> 00:15:48,526
delegate protocol.


328
00:15:49,296 --> 00:15:50,746
There are two methods
of interest


329
00:15:50,746 --> 00:15:51,906
to you in this protocol.


330
00:15:52,256 --> 00:15:54,206
The first is the
willPresent method.


331
00:15:54,986 --> 00:15:57,666
This is called when your
application is already active


332
00:15:58,546 --> 00:16:03,216
on the watch face and the system
is giving you an opportunity


333
00:16:03,216 --> 00:16:05,936
to tell it how you want it
to handle that notification.


334
00:16:06,746 --> 00:16:09,166
So, depending on the
option that you use


335
00:16:09,166 --> 00:16:10,736
in the completion handler there,


336
00:16:11,276 --> 00:16:13,206
the system will do
one of two things.


337
00:16:14,446 --> 00:16:17,026
If you say that you want
to use the alert option,


338
00:16:17,756 --> 00:16:21,406
we will revert back to the
regular long-look interface


339
00:16:21,406 --> 00:16:25,186
for the notification and it will
be overlaid on top of your app.


340
00:16:25,546 --> 00:16:27,716
If you say that you
want to do nothing,


341
00:16:27,716 --> 00:16:29,916
that means that system
should do nothing.


342
00:16:30,616 --> 00:16:32,196
Since your app is
already active,


343
00:16:32,336 --> 00:16:33,736
you are the ones taking care


344
00:16:33,736 --> 00:16:36,236
of displaying the
notification content somehow


345
00:16:36,236 --> 00:16:37,446
in your application.


346
00:16:38,766 --> 00:16:41,666
The second method is
the didReceive response.


347
00:16:42,486 --> 00:16:44,996
This is when your users
act on your notification.


348
00:16:45,906 --> 00:16:48,806
So this is the callback when
the app becomes foreground


349
00:16:48,806 --> 00:16:50,336
because the user
tapped on a button.


350
00:16:50,606 --> 00:16:54,406
And this is also the new
entry point in watchOS 3


351
00:16:54,406 --> 00:16:57,306
where you're getting a
callback for background actions.


352
00:16:57,786 --> 00:16:59,806
But, remember, this is
only for background actions


353
00:16:59,806 --> 00:17:01,836
that are scheduled
on the Watch itself.


354
00:17:03,736 --> 00:17:06,906
This is a good moment to make a
quick review of the scheduling


355
00:17:06,906 --> 00:17:10,026
and delivery of notifications
on Apple Watch.


356
00:17:11,106 --> 00:17:15,526
Anytime a notification fires
on your phone, it is forwarded


357
00:17:15,526 --> 00:17:18,606
to the Watch if the
screen on the phone is off


358
00:17:18,606 --> 00:17:21,175
and you have your Watch on
your wrist and it's unlocked.


359
00:17:21,806 --> 00:17:23,675
That's always been the behavior.


360
00:17:25,076 --> 00:17:27,656
But now in watchOS 3,
you have the ability


361
00:17:27,656 --> 00:17:29,416
to schedule your
own notifications


362
00:17:29,416 --> 00:17:30,426
on the Apple Watch.


363
00:17:31,316 --> 00:17:34,236
So keep in mind that these are
only delivered on the Watch.


364
00:17:34,646 --> 00:17:36,206
And if your application needs


365
00:17:36,206 --> 00:17:40,126
to also have a corresponding
notification on the phone side,


366
00:17:40,496 --> 00:17:42,626
it's up to you to
communicate to the phone


367
00:17:42,956 --> 00:17:44,706
and schedule your
notification there.


368
00:17:45,566 --> 00:17:46,586
Now you might be wondering,


369
00:17:46,586 --> 00:17:48,526
"If I schedule multiple
notifications,


370
00:17:48,526 --> 00:17:50,036
what happens when
they both fire?"


371
00:17:51,326 --> 00:17:55,476
Well, you have the ability to
dedupe the notifications as long


372
00:17:55,476 --> 00:17:58,416
as you use the same identifier
both on the Watch side


373
00:17:58,416 --> 00:18:00,386
and on the iPhone side
of the notification.


374
00:18:01,166 --> 00:18:02,966
So if we're in a situation


375
00:18:02,966 --> 00:18:05,696
where we're forwarding the
notification to the Watch,


376
00:18:06,816 --> 00:18:08,246
we look at the ID first.


377
00:18:08,796 --> 00:18:11,746
And if there's a similar
ID notification firing


378
00:18:11,746 --> 00:18:14,176
at that moment on the Watch,
that is giving precedence


379
00:18:14,176 --> 00:18:15,286
and that's the one
that's displayed


380
00:18:15,286 --> 00:18:18,106
so your users don't see two
things fire at the same time.


381
00:18:21,536 --> 00:18:25,646
Finally, let's talk about the
SpriteKit and SceneKit objects.


382
00:18:27,276 --> 00:18:30,886
So SpriteKit and SceneKit are
very rich APIs that allow you


383
00:18:30,966 --> 00:18:34,196
to do the 2D and 3D
graphics, and they allow you


384
00:18:34,196 --> 00:18:36,876
to expand significantly
the visual language


385
00:18:36,876 --> 00:18:38,006
of your applications.


386
00:18:39,256 --> 00:18:42,246
We have two new classes
for WatchKit


387
00:18:42,856 --> 00:18:48,246
that support these frameworks --
WKInterfaceSKScene for SpriteKit


388
00:18:48,986 --> 00:18:53,646
and WKInterfaceSCNScene
for the SceneKit.


389
00:18:54,176 --> 00:18:57,406
Again, you do all of the
configuration in the storyboard


390
00:18:57,406 --> 00:18:58,336
and interface builder.


391
00:18:59,476 --> 00:19:02,486
You will now see the two
classes appear in the library.


392
00:19:02,576 --> 00:19:06,646
All you do is drag them
into your controller,


393
00:19:06,646 --> 00:19:08,836
and they really pretty
much give you the canvas


394
00:19:08,836 --> 00:19:10,166
where you're going to
be drawing your scene.


395
00:19:10,636 --> 00:19:13,706
And the configuration
is done on the inspector


396
00:19:13,706 --> 00:19:14,586
and interface builder.


397
00:19:17,496 --> 00:19:19,906
Once you're ready to
display your scenes,


398
00:19:20,786 --> 00:19:22,056
all of your SpriteKit


399
00:19:22,056 --> 00:19:24,156
and SceneKit code
continues to be that.


400
00:19:24,316 --> 00:19:26,316
You continue to use the APIs.


401
00:19:26,316 --> 00:19:29,196
I won't be going into the APIs
of those frameworks themselves.


402
00:19:29,196 --> 00:19:32,866
But once you have your
scene ready to present,


403
00:19:33,446 --> 00:19:35,176
the integration with
WatchKit is simply


404
00:19:35,176 --> 00:19:36,366
in the presenting of the scene.


405
00:19:37,106 --> 00:19:39,276
So if you're dealing
with a SpriteKit scene,


406
00:19:39,336 --> 00:19:43,056
you call the percent function
or functions depending


407
00:19:43,056 --> 00:19:44,436
on whether you have
a transition.


408
00:19:45,576 --> 00:19:47,456
And if you have a
SceneKit scene,


409
00:19:47,896 --> 00:19:52,026
all you do is set the scene
property on the object.


410
00:19:52,026 --> 00:19:56,506
And that's all there is in
terms of the integration.


411
00:19:58,316 --> 00:20:00,526
So I've given you
a quick overview


412
00:20:00,526 --> 00:20:02,856
of the new ToolKit
items that you have


413
00:20:03,586 --> 00:20:05,516
for creating glanceable,
actionable,


414
00:20:05,516 --> 00:20:07,856
and responsive applications.


415
00:20:08,376 --> 00:20:11,236
Now Tom will come back and
give you specific examples


416
00:20:11,236 --> 00:20:13,806
of how he combines
multiple of these interfaces


417
00:20:14,526 --> 00:20:15,916
to make your app
more responsive.


418
00:20:16,216 --> 00:20:16,596
Thank you.


419
00:20:17,516 --> 00:20:22,936
[ Applause ]


420
00:20:23,436 --> 00:20:23,726
>> All right.


421
00:20:23,726 --> 00:20:25,946
And so now we have that
ToolKit, so we can look


422
00:20:25,946 --> 00:20:28,556
at some practical techniques
to actually build these types


423
00:20:28,556 --> 00:20:29,476
of quick interactions.


424
00:20:30,196 --> 00:20:32,896
So we're going to talk
through adding complications


425
00:20:33,026 --> 00:20:34,306
and notifications in your app.


426
00:20:34,476 --> 00:20:37,196
And now these are not new, but
we're going to talk through them


427
00:20:37,196 --> 00:20:38,406
in some unique and new ways.


428
00:20:38,476 --> 00:20:40,986
Then afterward, we're
going to talk


429
00:20:40,986 --> 00:20:43,756
about having a simple navigation
model within your apps.


430
00:20:44,666 --> 00:20:46,016
And then lastly,
we're going to talk


431
00:20:46,016 --> 00:20:48,516
about giving your users the
confidence to drop their wrist


432
00:20:48,736 --> 00:20:50,486
as soon as they're
done interacting inside


433
00:20:50,486 --> 00:20:51,266
your applications.


434
00:20:52,036 --> 00:20:54,666
And so we'll start off with
actionable complications.


435
00:20:55,046 --> 00:20:57,606
And so we introduced
complications


436
00:20:57,606 --> 00:20:59,326
for third-party apps
in watchOS 2.


437
00:20:59,686 --> 00:21:02,146
And now in watchOS 3, they're
playing an even larger role.


438
00:21:02,716 --> 00:21:05,636
And now there are more faces
that have complications,


439
00:21:06,076 --> 00:21:07,686
and there's some of
the existing faces


440
00:21:07,686 --> 00:21:09,416
that have even more
complication slots.


441
00:21:10,356 --> 00:21:13,506
So, also, now you have the
ability to quickly swipe


442
00:21:13,846 --> 00:21:17,606
across your faces to see
all your complications.


443
00:21:17,926 --> 00:21:20,456
So because of this, we
think that every app


444
00:21:20,456 --> 00:21:22,636
on Apple Watch should
have a complication.


445
00:21:22,986 --> 00:21:25,736
And you'll now see that all the
native apps have complications


446
00:21:25,736 --> 00:21:27,696
as well, as you can see
with the Workout app


447
00:21:27,696 --> 00:21:29,836
or the Heartrate app.


448
00:21:29,836 --> 00:21:30,796
So why complications?


449
00:21:31,446 --> 00:21:32,586
They're extremely glanceable.


450
00:21:32,586 --> 00:21:33,976
They're on their
wrist at all times.


451
00:21:33,976 --> 00:21:35,516
And with just a glance,
you can see a lot


452
00:21:35,516 --> 00:21:36,876
of really important information.


453
00:21:38,266 --> 00:21:39,696
They are frequently updated.


454
00:21:39,696 --> 00:21:42,276
If your app has a complication
on the current face,


455
00:21:42,606 --> 00:21:44,466
it's updated at least
twice an hour.


456
00:21:44,726 --> 00:21:46,836
And so you can always ensure
that you have really fresh


457
00:21:46,836 --> 00:21:49,446
and current data always
available to your users.


458
00:21:50,826 --> 00:21:52,176
Your app is kept in memory.


459
00:21:52,176 --> 00:21:55,086
And this is really important
because it makes the launch


460
00:21:55,086 --> 00:21:58,146
of your app extremely fast
and makes all the interactions


461
00:21:58,146 --> 00:22:00,476
within your applications
a lot more responsive.


462
00:22:01,986 --> 00:22:03,766
And complications
provide a great way


463
00:22:03,766 --> 00:22:05,996
to accelerate your
users into your app


464
00:22:06,296 --> 00:22:08,416
to perform specific
types of functionality.


465
00:22:09,366 --> 00:22:12,366
So, for example, if we look
at the Music complication,


466
00:22:12,886 --> 00:22:14,626
I tap on that and
I'm sent directly


467
00:22:14,626 --> 00:22:15,646
to the Now Playing screen


468
00:22:15,646 --> 00:22:16,996
because that's what's
most important


469
00:22:16,996 --> 00:22:18,416
to me if I'm playing music.


470
00:22:18,676 --> 00:22:21,016
I can play and pause the
song or skip the track.


471
00:22:21,396 --> 00:22:23,626
And it makes the whole
interaction a lot faster


472
00:22:24,016 --> 00:22:26,076
because I'm sent
directly to where I need.


473
00:22:27,596 --> 00:22:31,796
Also new in watchOS 3 and
iOS 10 is the new Gallery


474
00:22:31,796 --> 00:22:33,326
in the Apple Watch
app on iPhone.


475
00:22:34,026 --> 00:22:35,196
This is great because
it allows you


476
00:22:35,196 --> 00:22:37,126
to add new faces to
your Apple Watch.


477
00:22:37,716 --> 00:22:40,006
But it also allows you
to customize the faces


478
00:22:40,356 --> 00:22:42,226
and choose among all
the complications.


479
00:22:42,226 --> 00:22:44,696
And third-party complications
appear here as well,


480
00:22:44,946 --> 00:22:46,456
so it's a great way
for your users


481
00:22:46,456 --> 00:22:47,946
to discover your complications


482
00:22:48,156 --> 00:22:49,956
and add them directly
to the watch face.


483
00:22:50,046 --> 00:22:53,306
And if you want to be part
of the list of complications,


484
00:22:53,306 --> 00:22:54,826
you create a complication
bundle.


485
00:22:54,956 --> 00:22:57,376
And there's documentation for
that on the developer website.


486
00:22:57,716 --> 00:22:59,546
So I highly recommend
that you check that out.


487
00:23:00,386 --> 00:23:03,396
So complications on Apple Watch
are just a really fantastic


488
00:23:03,396 --> 00:23:05,326
mechanism to get your
users into your app


489
00:23:05,486 --> 00:23:07,686
and really provide a lot
of these fast interactions.


490
00:23:07,926 --> 00:23:10,256
So if you don't have a
complication in your current app


491
00:23:10,566 --> 00:23:14,566
or you're building a new app,
make sure to include them.


492
00:23:14,776 --> 00:23:17,666
Next up, we're going to move
onto glanceable notifications.


493
00:23:18,076 --> 00:23:20,206
And so we all know
that notifications


494
00:23:20,206 --> 00:23:22,166
on Apple Watch are
really fantastic,


495
00:23:22,526 --> 00:23:23,946
and one of the main reasons is


496
00:23:23,946 --> 00:23:26,036
that they're entirely
customizable.


497
00:23:26,286 --> 00:23:29,066
And so you can make them
look however you want.


498
00:23:29,166 --> 00:23:30,916
But also, it allows you


499
00:23:30,996 --> 00:23:34,366
to display really valuable
information right inline


500
00:23:34,366 --> 00:23:35,336
in the notification.


501
00:23:35,696 --> 00:23:37,996
So, for example, here in
the Calendar notification,


502
00:23:37,996 --> 00:23:40,966
I can see the name of the event
and when it is and where it is.


503
00:23:41,496 --> 00:23:44,706
And ultimately, this can often
times remove the necessity


504
00:23:44,706 --> 00:23:46,366
to even go and launch
the Watch app


505
00:23:46,366 --> 00:23:49,406
because all the important
information is right inline


506
00:23:49,506 --> 00:23:50,496
in the notification.


507
00:23:51,276 --> 00:23:54,816
And now in watchOS 3, all
notifications support SpriteKit,


508
00:23:54,816 --> 00:23:57,056
and SceneKit, and inline video.


509
00:23:57,056 --> 00:23:59,996
And so you can provide even
more customization inside


510
00:23:59,996 --> 00:24:00,756
of your notifications.


511
00:24:01,916 --> 00:24:03,456
So, SpriteKit and SceneKit --


512
00:24:03,646 --> 00:24:06,056
I'm sure a lot of you think
of these in terms of gaming.


513
00:24:06,206 --> 00:24:07,266
And they're great for gaming.


514
00:24:07,546 --> 00:24:08,846
And there's a session on Friday


515
00:24:08,846 --> 00:24:10,476
about game technologies
for Apple Watch.


516
00:24:11,156 --> 00:24:13,046
But here, we'd like to
talk about them in terms


517
00:24:13,046 --> 00:24:15,176
of nongaming types
of interfaces.


518
00:24:15,376 --> 00:24:17,686
And so why are they
important for nongaming?


519
00:24:18,356 --> 00:24:22,246
They allow you entire
customization over the content,


520
00:24:22,336 --> 00:24:25,226
and the layout, and the
animation of your interfaces.


521
00:24:25,446 --> 00:24:28,916
And so it allows you to create
really custom types of looks.


522
00:24:29,326 --> 00:24:30,706
And so, here, we're
going to look


523
00:24:30,706 --> 00:24:32,536
at an example of a Photos app.


524
00:24:32,916 --> 00:24:35,256
So, here, you can see I got a
notification from my friend,


525
00:24:35,256 --> 00:24:37,506
Ivy, and she has shared
some photos with me.


526
00:24:38,226 --> 00:24:40,346
But this does not include
a lot of information.


527
00:24:40,346 --> 00:24:41,896
I have no idea what
the photos are.


528
00:24:42,086 --> 00:24:44,436
I have to read the text in order
to see who has shared them.


529
00:24:44,886 --> 00:24:48,056
And so we can definitely
take a lot more advantage


530
00:24:48,056 --> 00:24:49,916
of the customization
possibilities


531
00:24:50,146 --> 00:24:51,046
in our notification.


532
00:24:52,076 --> 00:24:52,946
So here's an alternative


533
00:24:53,246 --> 00:24:55,406
which is now using
SpriteKit along the top.


534
00:24:55,666 --> 00:24:57,886
It actually has the photos
that were shared with me.


535
00:24:58,156 --> 00:24:59,826
It has the photo
of my friend, Ivy.


536
00:25:00,176 --> 00:25:02,756
And with just a glance, I can
see a lot more information.


537
00:25:02,846 --> 00:25:05,836
And ultimately, I can make a
more well-informed decision


538
00:25:05,836 --> 00:25:08,606
on whether I want to go launch
the Watch app or even go


539
00:25:08,606 --> 00:25:10,796
and grab my iPhone and
check these photos out more.


540
00:25:12,006 --> 00:25:14,116
And if we look at
how this was done,


541
00:25:14,116 --> 00:25:17,506
across the top we have the
new WKInterfaceSKScene object.


542
00:25:18,026 --> 00:25:20,496
And then below that, we
just have a regular label.


543
00:25:20,626 --> 00:25:22,586
And the key thing I want
to point out here is


544
00:25:22,586 --> 00:25:25,116
that you can mix and
match your SpriteKit


545
00:25:25,116 --> 00:25:26,836
and your WatchKit user
interface elements.


546
00:25:27,256 --> 00:25:29,986
And so maybe you already
are using an animated image


547
00:25:29,986 --> 00:25:31,396
or the view animation API.


548
00:25:31,946 --> 00:25:34,226
You can swap those
out with SpriteKit.


549
00:25:34,226 --> 00:25:36,096
Or if you just have an
existing interface and want


550
00:25:36,096 --> 00:25:38,396
to add animation, you don't
have to rewrite everything


551
00:25:38,396 --> 00:25:39,516
in order to adopt SpriteKit.


552
00:25:39,956 --> 00:25:42,686
So it provides a really powerful
way to add a lot of richness


553
00:25:42,776 --> 00:25:45,536
to your interfaces without
having to throw everything out


554
00:25:45,536 --> 00:25:48,696
and start over, which
is really cool.


555
00:25:48,776 --> 00:25:50,736
And so if you have
notifications within your app,


556
00:25:50,736 --> 00:25:53,356
make sure to take full advantage
of what they have to offer.


557
00:25:53,466 --> 00:25:55,506
If you just kind of have
the default interface,


558
00:25:55,866 --> 00:25:58,476
think about what information
is really important inside the


559
00:25:58,476 --> 00:26:03,966
notification and add a custom
interface to reflect that.


560
00:26:03,966 --> 00:26:05,246
OK. So, next up, we're moving


561
00:26:05,246 --> 00:26:09,716
on to a simple navigation
model within your app.


562
00:26:09,796 --> 00:26:13,126
Earlier, we talked about the new
vertical paging API for tables.


563
00:26:13,126 --> 00:26:15,336
And that's great for
any hierarchical app.


564
00:26:15,796 --> 00:26:18,226
But here, we'd like to talk
about navigation in terms


565
00:26:18,226 --> 00:26:20,486
of two other of the technologies
that we talked about --


566
00:26:20,906 --> 00:26:23,386
and those are Gestures
and the Digital Crown.


567
00:26:23,716 --> 00:26:26,736
And so the Digital Crown
is unique to Apple Watch,


568
00:26:26,736 --> 00:26:29,136
and it's a really
fantastic input mechanism.


569
00:26:29,646 --> 00:26:30,786
It allows you to quickly


570
00:26:30,786 --> 00:26:32,556
and precisely interact
with the interface.


571
00:26:32,886 --> 00:26:35,436
And it can be used in
many, many different ways.


572
00:26:36,116 --> 00:26:38,956
So, for example, in the Timer
application, it can be used


573
00:26:38,956 --> 00:26:41,416
to scrub through durations
and choose the time you want.


574
00:26:42,526 --> 00:26:45,476
Or in the Photos application,
it can be used to zoom


575
00:26:45,476 --> 00:26:46,846
in and out of the photo.


576
00:26:47,616 --> 00:26:49,266
So you can get really creative


577
00:26:49,266 --> 00:26:51,396
with how you use the Digital
Crown in your applications,


578
00:26:51,396 --> 00:26:53,866
and we're really excited to
see how you'll be doing that.


579
00:26:53,936 --> 00:26:55,896
And here, though, we'd like
to talk through an example


580
00:26:55,896 --> 00:26:59,276
of a running app that puts both
Gestures and the Digital Crown


581
00:26:59,366 --> 00:27:01,026
to use to simplify
the navigation.


582
00:27:02,276 --> 00:27:04,136
So, here, we have one
version of a running app.


583
00:27:04,346 --> 00:27:07,316
The goal is to show my
previous run, and to show kind


584
00:27:07,316 --> 00:27:10,386
of the average time, and
distance, and the altitude.


585
00:27:11,076 --> 00:27:13,946
So one version is just to kind
of have a list of every mile.


586
00:27:14,046 --> 00:27:16,546
And maybe I can tap in on the
mile and see more information,


587
00:27:16,986 --> 00:27:19,376
or I can scroll the list
and see the entire run.


588
00:27:19,536 --> 00:27:22,336
And while this version
has all the information


589
00:27:22,336 --> 00:27:25,126
that I would need, you kind of
have to hunt around in order


590
00:27:25,126 --> 00:27:26,296
to find what you're looking for.


591
00:27:26,526 --> 00:27:28,616
You have to tap in on rows,
you have to scroll the list,


592
00:27:28,826 --> 00:27:31,356
and the information just isn't
that dense or glanceable.


593
00:27:31,356 --> 00:27:34,026
And so it can definitely be
done in a lot better way.


594
00:27:35,346 --> 00:27:37,886
So here's an alternative
which now is using SpriteKit


595
00:27:37,886 --> 00:27:40,836
to have a graph at the top,
and it shows the entire run.


596
00:27:40,836 --> 00:27:41,846
And so with just a glance,


597
00:27:41,846 --> 00:27:43,886
I can actually see a lot
more of the information.


598
00:27:44,526 --> 00:27:47,066
And now with the use of
gestures, I can tap on the graph


599
00:27:47,366 --> 00:27:50,306
and it will animate between
the pace and the altitude.


600
00:27:51,136 --> 00:27:53,266
And then I can also use
the Digital Crown to scrub


601
00:27:53,266 --> 00:27:55,826
through the graph to
specific data points.


602
00:27:56,146 --> 00:27:59,436
So even though there's a lot
more information on screen,


603
00:27:59,436 --> 00:28:01,316
it's actually a lot
easier to navigate


604
00:28:01,316 --> 00:28:03,876
to the specific information
that I'm looking for,


605
00:28:04,066 --> 00:28:06,886
and it makes the overall
interaction a lot faster.


606
00:28:07,506 --> 00:28:09,516
And so, as you can see
now, we're starting to mix


607
00:28:09,516 --> 00:28:11,916
and match all the technologies
that we introduced earlier --


608
00:28:11,916 --> 00:28:14,586
so Gestures, and the Digital
Crown, and SpriteKit --


609
00:28:14,936 --> 00:28:17,136
and they create some really
powerful combinations.


610
00:28:17,606 --> 00:28:19,746
So as you're building
your own applications,


611
00:28:19,746 --> 00:28:20,886
you should make sure to take


612
00:28:21,066 --> 00:28:22,896
into account all
the technologies


613
00:28:23,126 --> 00:28:24,256
and see how they can help


614
00:28:24,256 --> 00:28:26,216
to simplify the navigation
within your app.


615
00:28:26,586 --> 00:28:31,116
A lot of focus has gone into
navigation in watchOS 3,


616
00:28:31,116 --> 00:28:32,776
and we really want to
make sure that carries


617
00:28:32,776 --> 00:28:35,106
through to all of
your apps as well.


618
00:28:35,106 --> 00:28:42,006
And so, last up, we're going
to talk about a technique


619
00:28:42,496 --> 00:28:45,406
that allows your users to
drop their wrist as soon


620
00:28:45,406 --> 00:28:46,436
as they're done interacting.


621
00:28:47,216 --> 00:28:49,516
And so a key aspect in
making a quick interaction


622
00:28:49,516 --> 00:28:53,146
on Apple Watch is that your app
feels very, very responsive.


623
00:28:53,486 --> 00:28:56,116
And this is especially true
if you're doing any type


624
00:28:56,116 --> 00:28:59,156
of networking or communicating
with a companion iPhone.


625
00:28:59,686 --> 00:29:01,386
Because often times,
that can lead


626
00:29:01,386 --> 00:29:03,726
to loading indicators,
which are not good.


627
00:29:04,446 --> 00:29:05,966
And one aspect of this is


628
00:29:05,966 --> 00:29:08,126
if you're updating the
data within your app.


629
00:29:08,126 --> 00:29:09,646
And that's a large enough topic


630
00:29:09,646 --> 00:29:11,016
that there's actually
a whole talk


631
00:29:11,016 --> 00:29:12,756
on keeping your Watch
app current and fresh.


632
00:29:13,056 --> 00:29:14,256
So make sure and check that out.


633
00:29:15,016 --> 00:29:17,196
But here, we'd like to talk
about networking in terms


634
00:29:17,196 --> 00:29:19,066
of responding to user action.


635
00:29:19,646 --> 00:29:23,086
So, for example, you have a
food-delivery app, and you want


636
00:29:23,086 --> 00:29:25,026
to buy some food and
you tap the Buy button.


637
00:29:25,346 --> 00:29:27,896
How does your app respond
in that type of situation?


638
00:29:29,316 --> 00:29:32,856
And we want to recommend that
you provide instant feedback


639
00:29:32,856 --> 00:29:35,436
to your users rather than
showing a loading indicator.


640
00:29:35,936 --> 00:29:37,906
So we'll walk through an
example of what that means.


641
00:29:38,506 --> 00:29:40,426
So, here, we have that
food delivery app I was


642
00:29:40,426 --> 00:29:40,986
talking about.


643
00:29:40,986 --> 00:29:43,396
I can tap on one of
my favorite items


644
00:29:43,396 --> 00:29:45,466
and there's a big Buy button,
and so we think this is going


645
00:29:45,466 --> 00:29:47,176
to be a really fast
and quick interaction.


646
00:29:47,726 --> 00:29:50,816
And I tap on Buy and I
get a loading indicator.


647
00:29:51,036 --> 00:29:54,606
And that's because the app has
to go talk with the server,


648
00:29:54,606 --> 00:29:57,536
it has to process the order, it
has to get that confirmation.


649
00:29:57,536 --> 00:30:01,346
And then once it's done that, it
has to send back to the Watch.


650
00:30:01,346 --> 00:30:04,696
And only then is it going to
remove the loading indicator


651
00:30:04,866 --> 00:30:06,276
and say, "Hey, your
order is on its way."


652
00:30:07,336 --> 00:30:08,686
And if we look at
a timeline of this,


653
00:30:08,686 --> 00:30:09,766
it really shows the problem.


654
00:30:10,076 --> 00:30:11,466
Right? We start with
choosing the item.


655
00:30:11,466 --> 00:30:12,806
We tap Buy.


656
00:30:13,826 --> 00:30:15,276
And then we show the
loading indicator.


657
00:30:15,846 --> 00:30:18,076
And during this time, the
user just raises their wrist


658
00:30:18,076 --> 00:30:21,396
and stares at your app until
you can show that confirmation.


659
00:30:21,856 --> 00:30:24,356
And so the user is only
actively interacting with this


660
00:30:24,356 --> 00:30:25,546
at the beginning and the end,


661
00:30:25,546 --> 00:30:28,226
and so most of the time
is just spent waiting.


662
00:30:28,756 --> 00:30:31,756
So we can definitely improve
on this type of interaction.


663
00:30:33,036 --> 00:30:36,356
So, alternatively, if we
go back to our food app


664
00:30:36,356 --> 00:30:40,016
and now we tap the Buy button,
we have instant feedback.


665
00:30:40,556 --> 00:30:42,496
The key thing here is
this isn't confirmation


666
00:30:42,496 --> 00:30:44,086
because we haven't
done any networking.


667
00:30:44,406 --> 00:30:46,156
We can't actually say
the order is on its way


668
00:30:46,156 --> 00:30:47,196
because we have no idea.


669
00:30:47,536 --> 00:30:49,346
But we want to provide
this feedback


670
00:30:49,346 --> 00:30:51,356
and ultimately give
the user confidence


671
00:30:51,696 --> 00:30:53,556
that the app is taking
care of their order.


672
00:30:54,036 --> 00:30:56,616
And this allows the user then
to go and drop their wrist


673
00:30:56,616 --> 00:30:58,786
and not have to wait
on the application.


674
00:30:59,336 --> 00:31:00,796
And now, in the background,


675
00:31:00,796 --> 00:31:05,376
the app will use a background
NSURLSession to go talk


676
00:31:05,376 --> 00:31:08,076
with the server, and then
eventually gets a response.


677
00:31:08,676 --> 00:31:10,906
And then, in the background,
the app is woken up


678
00:31:11,336 --> 00:31:14,706
and it can use the new local
notification support to say,


679
00:31:14,706 --> 00:31:16,506
"OK, now your order
is actually confirmed.


680
00:31:16,506 --> 00:31:17,246
It's on its way."


681
00:31:17,796 --> 00:31:20,516
And then you have all the same
information that you had before.


682
00:31:21,636 --> 00:31:22,946
And looking at a
timeline of this,


683
00:31:22,946 --> 00:31:25,976
it really shows how much it
helps and improves things.


684
00:31:26,326 --> 00:31:27,706
So we choose an item,
we tap Buy,


685
00:31:27,706 --> 00:31:28,866
and so we start out
the same way.


686
00:31:30,036 --> 00:31:32,236
And then instead of showing
the loading indicator,


687
00:31:32,236 --> 00:31:33,166
we show the feedback.


688
00:31:33,946 --> 00:31:35,476
And then after we
do the networking,


689
00:31:35,776 --> 00:31:36,756
we show the notification.


690
00:31:37,726 --> 00:31:39,546
And so as far as the
app is concerned,


691
00:31:39,546 --> 00:31:41,836
the overall interaction
is actually about the same


692
00:31:41,836 --> 00:31:43,746
as it was in the first example.


693
00:31:44,506 --> 00:31:47,976
But from the user's point
of view, it feels far faster


694
00:31:47,976 --> 00:31:49,476
and far more responsive.


695
00:31:49,746 --> 00:31:51,886
And so it's just a better
interaction overall.


696
00:31:51,966 --> 00:31:54,956
I do want to point out here
how you can actually do


697
00:31:54,956 --> 00:31:57,436
that processing after the
user has dropped their wrist.


698
00:31:57,666 --> 00:31:58,556
If you're doing networking,


699
00:31:58,556 --> 00:32:02,196
you can use a background
NSURLSession.


700
00:32:02,196 --> 00:32:03,836
And make sure to
use a download task


701
00:32:03,836 --> 00:32:05,566
because that will enable
your app to be woken


702
00:32:05,566 --> 00:32:07,556
up in the background
after it's been done.


703
00:32:07,636 --> 00:32:10,056
And then at that point, you
can do a local notification


704
00:32:10,056 --> 00:32:11,526
that makes sense in
your application.


705
00:32:12,856 --> 00:32:16,196
Or if you have to do
processing on the Watch itself,


706
00:32:16,196 --> 00:32:18,166
you can take out a
background task assertion.


707
00:32:18,166 --> 00:32:19,796
We had a great walkthrough
of this


708
00:32:19,796 --> 00:32:22,066
in a session last year called
WatchKit Tips and Tricks,


709
00:32:22,336 --> 00:32:24,396
so make sure to check that
out if you need to do any type


710
00:32:24,396 --> 00:32:26,406
of processing on
the Watch itself.


711
00:32:27,146 --> 00:32:29,906
So 2 seconds is a very
audacious goal in terms


712
00:32:29,906 --> 00:32:32,586
of how fast interactions
on Apple Watch should be.


713
00:32:32,966 --> 00:32:34,776
But we really think that
it should be the goal


714
00:32:34,776 --> 00:32:36,176
as you're building
your applications


715
00:32:36,176 --> 00:32:39,956
because it can really inform
how you design and build them.


716
00:32:40,786 --> 00:32:43,756
So as you're going about
creating new applications


717
00:32:43,756 --> 00:32:46,796
or thinking about your existing
ones, make sure to focus


718
00:32:46,796 --> 00:32:48,796
on quick interactions right
from the very beginning.


719
00:32:48,976 --> 00:32:50,876
And think about what
are the features


720
00:32:50,876 --> 00:32:52,836
that your users are
going to want to be using


721
00:32:52,836 --> 00:32:55,566
in your applications, and make
sure that those are surfaced


722
00:32:55,566 --> 00:32:58,436
to the very front and are
really fast and responsive.


723
00:32:59,816 --> 00:33:01,846
Use complications
and notifications


724
00:33:01,846 --> 00:33:04,736
because they just create really
fast interactions overall,


725
00:33:05,236 --> 00:33:09,306
and they just provide a lot
more utility to the user


726
00:33:09,306 --> 00:33:10,266
for your applications.


727
00:33:12,236 --> 00:33:15,976
Use SceneKit and SpriteKit
to create really rich


728
00:33:16,106 --> 00:33:18,126
but also interactive
types of interfaces.


729
00:33:18,426 --> 00:33:20,456
And they can add a lot of power


730
00:33:20,456 --> 00:33:23,106
to your existing
apps or new apps.


731
00:33:23,106 --> 00:33:24,596
And so we're really excited
about what you're going


732
00:33:24,596 --> 00:33:26,786
to be doing with those.


733
00:33:27,166 --> 00:33:28,496
Simplify the navigation.


734
00:33:28,496 --> 00:33:31,486
Again, a lot of work
has been done in watchOS


735
00:33:31,676 --> 00:33:34,236
to simplify the navigation
at a system level.


736
00:33:34,236 --> 00:33:36,686
But we also want that to
carry through within all


737
00:33:36,686 --> 00:33:37,996
of our applications as well.


738
00:33:39,456 --> 00:33:41,666
And, again, never
make the user wait.


739
00:33:41,666 --> 00:33:43,536
If you're showing a
loading indicator on screen,


740
00:33:43,716 --> 00:33:45,246
try and reorganize your app


741
00:33:45,336 --> 00:33:47,336
to allow the user
to drop their wrist.


742
00:33:47,636 --> 00:33:49,006
Provide the instant
type of feedback,


743
00:33:49,006 --> 00:33:50,546
and just give the
user confidence


744
00:33:50,546 --> 00:33:53,426
that your app is
taking care of things.


745
00:33:53,426 --> 00:33:55,876
And so for more information on
anything that we talked about,


746
00:33:56,236 --> 00:33:57,606
go and check out the
developer website.


747
00:33:57,606 --> 00:33:59,976
And there are tons
of sessions all week.


748
00:33:59,976 --> 00:34:02,496
I highly recommend the Designing
Great Apple Watch Experiences


749
00:34:02,496 --> 00:34:06,156
talk this afternoon or the
watchOS talks tomorrow as well.


750
00:34:06,156 --> 00:34:08,706
With that, I want to
thank you all for coming.


751
00:34:08,706 --> 00:34:09,976
And enjoy the rest of the
week in San Francisco.


752
00:34:10,507 --> 00:34:12,507
[ Applause ]

