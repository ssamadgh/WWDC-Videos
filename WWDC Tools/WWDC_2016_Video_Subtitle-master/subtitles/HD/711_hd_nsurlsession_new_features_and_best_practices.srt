1
00:00:07,516 --> 00:00:17,500
[ Music ]


2
00:00:24,516 --> 00:00:29,326
[ Applause ]


3
00:00:29,826 --> 00:00:30,266
>> Thank you.


4
00:00:30,306 --> 00:00:30,856
Thank you.


5
00:00:30,856 --> 00:00:31,646
Good morning.


6
00:00:34,066 --> 00:00:35,636
Thanks for coming
and being here today.


7
00:00:35,636 --> 00:00:41,056
This is NSURLSession: New
Features and Best Practices.


8
00:00:41,466 --> 00:00:42,946
My name is Jeff Jenkins.


9
00:00:42,946 --> 00:00:44,246
I'm a Software Engineer


10
00:00:44,246 --> 00:00:46,096
in the Internet Technologies
Department.


11
00:00:46,096 --> 00:00:48,696
I think we have some great
information that we'd


12
00:00:48,696 --> 00:00:51,886
like to share with you today
within the NSURLSession.


13
00:00:51,886 --> 00:00:54,726
So why don't we just get started
and jump right into an agenda


14
00:00:54,726 --> 00:00:57,526
and show you some of the
things we're going to look at.


15
00:00:58,256 --> 00:01:02,626
The NSURLSession API provides
really a rich set of classes


16
00:01:03,016 --> 00:01:05,286
and methods that
simplify the complexities


17
00:01:05,286 --> 00:01:06,836
of modern day networking.


18
00:01:07,276 --> 00:01:09,636
Today I'm going to discuss


19
00:01:09,636 --> 00:01:12,996
with you how the
NSURLSession API has evolved.


20
00:01:12,996 --> 00:01:15,036
And I'm going to share
with you some new features


21
00:01:15,516 --> 00:01:17,766
and enhancements that
we've made to this API.


22
00:01:17,766 --> 00:01:20,656
And we're going to have a
demonstration that'll show you


23
00:01:20,656 --> 00:01:23,846
some of these features and
actions in a real application.


24
00:01:24,396 --> 00:01:28,696
I'll spend some time
discussing security.


25
00:01:29,406 --> 00:01:31,866
It's important for your
users that their data


26
00:01:32,066 --> 00:01:34,056
and privacy be safeguarded.


27
00:01:34,236 --> 00:01:37,276
If it's important to your users,
we know it's important to you


28
00:01:37,276 --> 00:01:38,646
and to your applications.


29
00:01:39,236 --> 00:01:40,496
So I'm going to share
with you some


30
00:01:40,496 --> 00:01:43,336
of the enhancements we've made
to technologies in NSURLSession


31
00:01:43,336 --> 00:01:44,826
with regards to use security.


32
00:01:45,406 --> 00:01:50,636
Now, during the entirety of this
session I'm going to be sharing


33
00:01:50,636 --> 00:01:53,146
with you some best
practices and tips


34
00:01:53,416 --> 00:01:56,086
so that you can make your
apps even more incredible.


35
00:01:56,086 --> 00:02:02,946
Now, let's start by looking at
the highest level APIs available


36
00:02:02,946 --> 00:02:05,686
to applications across
all of Apple's platforms.


37
00:02:06,956 --> 00:02:09,235
For many years, Foundation
provided the


38
00:02:09,235 --> 00:02:10,816
NSURLConnection API.


39
00:02:11,656 --> 00:02:15,346
Now, NSURLConnection was a
great network abstraction.


40
00:02:15,546 --> 00:02:18,116
It enabled a lot of great
fundamental networking


41
00:02:18,216 --> 00:02:20,466
functionality for you
developers in your apps.


42
00:02:21,096 --> 00:02:22,756
But you know, we
asked ourselves:


43
00:02:23,126 --> 00:02:24,066
What could we do better?


44
00:02:24,796 --> 00:02:27,486
And what is it that you
developers are asking us to do?


45
00:02:27,796 --> 00:02:30,346
And we sat down and
we talked about this.


46
00:02:30,346 --> 00:02:32,616
And we found that a lot
of the answers had to do


47
00:02:32,616 --> 00:02:34,926
with configuring networking --


48
00:02:34,926 --> 00:02:37,586
that configuring network
in an app can be difficult,


49
00:02:37,586 --> 00:02:39,276
especially if you need
to do different types


50
00:02:39,276 --> 00:02:41,786
of networking all from
the same application.


51
00:02:43,456 --> 00:02:44,496
So, we took action.


52
00:02:45,186 --> 00:02:50,626
We officially deprecated the
NSURLConnection API in 2015.


53
00:02:50,626 --> 00:02:53,436
And this really means we're not
adding new features to that API.


54
00:02:53,436 --> 00:02:56,046
And it's really receiving
very minimal maintenance.


55
00:02:57,506 --> 00:03:02,346
But prior to the official
deprecation at WWDC 2013,


56
00:03:02,806 --> 00:03:06,396
we introduced NSURLSession
as the replacement API


57
00:03:06,396 --> 00:03:08,236
for Foundation layer networking.


58
00:03:09,116 --> 00:03:11,986
Now, we encouraged you then, we
continue to encourage you now


59
00:03:12,576 --> 00:03:14,946
to move your networking
code to the NSURLSession API


60
00:03:15,006 --> 00:03:17,866
in your applications today
and apps that you're going


61
00:03:17,866 --> 00:03:21,416
to be developing in the future.


62
00:03:21,586 --> 00:03:25,036
Now, since NSURLSession
is the best high-level API


63
00:03:25,036 --> 00:03:28,876
for network programming
on Apple's platforms,


64
00:03:29,386 --> 00:03:32,576
let's review some of the
basics of NSURLSession.


65
00:03:33,066 --> 00:03:36,726
Now, if you want a real
in-depth detail, you know,


66
00:03:37,836 --> 00:03:41,396
inside into NSURLSession, I
recommend that you go back


67
00:03:41,396 --> 00:03:47,246
to WWDC of 2015, and
especially 2014, and take a look


68
00:03:47,246 --> 00:03:48,876
at the videos and slides


69
00:03:49,296 --> 00:03:53,986
with the sessions
regarding NSURLSession.


70
00:03:55,656 --> 00:03:57,856
So, I've been praising
NSURLSession API


71
00:03:57,856 --> 00:04:00,756
and recommending that
your apps use this API.


72
00:04:01,726 --> 00:04:04,206
So what really makes
NSURLSession worthy


73
00:04:04,206 --> 00:04:05,366
of all this praise?


74
00:04:05,366 --> 00:04:09,436
Well, some of the benefits,
we continue our great support


75
00:04:09,756 --> 00:04:13,936
for the HTTP/1.1 protocol.


76
00:04:13,936 --> 00:04:16,315
We also have support
for the SPDY protocol.


77
00:04:16,745 --> 00:04:20,136
Now, we don't recommend that
you build new Web services based


78
00:04:20,136 --> 00:04:22,646
on SPDY, but really
that you look ahead


79
00:04:22,876 --> 00:04:26,686
to HTTP/2 and that protocol.


80
00:04:26,906 --> 00:04:31,176
We obviously have support
for HTTP/2 in NSURLSession.


81
00:04:31,806 --> 00:04:34,886
Our support is based
on RFC 7540.


82
00:04:35,436 --> 00:04:41,026
And we're adding new features
of this protocol all the time.


83
00:04:41,236 --> 00:04:43,576
The app transport
security, or ATS.


84
00:04:43,576 --> 00:04:46,706
This is a great feature
built into NSURLSession.


85
00:04:47,176 --> 00:04:50,396
It's a security feature
that improves the privacy


86
00:04:50,666 --> 00:04:52,726
and data integrity
of connections


87
00:04:52,726 --> 00:04:55,526
between apps and Web processes.


88
00:04:56,876 --> 00:04:59,506
One of the most important
aspects of ATS is


89
00:04:59,856 --> 00:05:03,166
that your apps must
use the HTTPS protocol.


90
00:05:04,016 --> 00:05:06,346
Now, at the same time it
allows you, the developer,


91
00:05:06,346 --> 00:05:09,316
to implement best practices
when making connections


92
00:05:09,696 --> 00:05:12,146
to remote servers
over the HTTPS.


93
00:05:13,746 --> 00:05:18,086
The HTTP Strict Transport
Security, or HSTS,


94
00:05:18,366 --> 00:05:20,716
another great feature
built into NSURLSession.


95
00:05:21,216 --> 00:05:24,086
This feature protects your
users' data and privacy.


96
00:05:24,086 --> 00:05:28,356
Now, it can be configured
via an HTTP header delivered


97
00:05:28,446 --> 00:05:29,716
from your Web service.


98
00:05:30,206 --> 00:05:33,616
Or it can be configured using
a preloaded list embedded


99
00:05:33,926 --> 00:05:35,966
in the system along
with your application.


100
00:05:36,516 --> 00:05:39,986
Once configured, all the data
that is transmitted, sent,


101
00:05:39,986 --> 00:05:41,986
received over a secure
connection.


102
00:05:42,656 --> 00:05:45,586
The great thing about HSTS is
it does not require any code


103
00:05:45,586 --> 00:05:47,316
changes in your applications.


104
00:05:50,096 --> 00:05:53,776
All the great built-in
support subsystems built


105
00:05:53,776 --> 00:05:57,946
in for the handling of
caches, cookies, proxies,


106
00:05:58,336 --> 00:05:59,876
authentication challenges,


107
00:05:59,876 --> 00:06:02,036
all these things are
built into NSURLSession.


108
00:06:02,036 --> 00:06:05,536
And last but not
least, configuration.


109
00:06:05,536 --> 00:06:08,506
As I said, we talked a lot
about how can we make networking


110
00:06:08,506 --> 00:06:11,676
or configuring networking
easier in your applications?


111
00:06:12,436 --> 00:06:15,056
We feel that we need to have
better control over networking.


112
00:06:15,056 --> 00:06:17,176
So, we looked at
configuration hard.


113
00:06:17,176 --> 00:06:21,406
So what we did to achieve
fine-grade and control


114
00:06:21,406 --> 00:06:23,606
over your networking
in NSURLSession,


115
00:06:23,606 --> 00:06:27,156
we created this new class called
NSURLSessionConfiguration.


116
00:06:27,926 --> 00:06:30,236
Now, this class contains
many properties


117
00:06:30,236 --> 00:06:31,346
that you can configure.


118
00:06:32,746 --> 00:06:34,916
You can create configurations
based


119
00:06:34,916 --> 00:06:38,036
on different networking needs
within your application.


120
00:06:39,466 --> 00:06:42,166
Now, here's a sample of
just some of the properties


121
00:06:42,526 --> 00:06:45,636
that you can set with
NSURLSessionConfiguration.


122
00:06:46,836 --> 00:06:50,806
The Transport Layer
Security or TLS version.


123
00:06:51,836 --> 00:06:54,856
You can control the minimum
and maximum versions of TLS


124
00:06:54,856 --> 00:06:56,806
that your app wants to support.


125
00:06:57,246 --> 00:07:02,666
We default the minimum TLS to
1.0 and the maximum TLS to 1.2.


126
00:07:03,356 --> 00:07:09,296
You can control the use of
cellular by your application.


127
00:07:09,296 --> 00:07:12,126
Do you want to let your app
use the cellular network or no?


128
00:07:12,416 --> 00:07:14,346
Maybe you want Wi-Fi
only networking.


129
00:07:14,346 --> 00:07:16,276
This is the place to do that.


130
00:07:16,796 --> 00:07:22,106
You can specify your
network service type.


131
00:07:22,626 --> 00:07:24,936
Some examples of this
might be just default,


132
00:07:24,936 --> 00:07:27,906
which is the standard
internet data traffic.


133
00:07:27,906 --> 00:07:33,146
Your app might have VoiP control
or video data or voice data.


134
00:07:33,506 --> 00:07:34,586
All sorts of different
types of data.


135
00:07:34,586 --> 00:07:37,986
And really, this is just a
hint to lower networking layers


136
00:07:38,416 --> 00:07:42,166
of what type of data to expect
so that it can create a quality


137
00:07:42,166 --> 00:07:43,766
of service that's
best for your app


138
00:07:44,156 --> 00:07:46,426
on the device that
it's running on.


139
00:07:48,136 --> 00:07:49,376
Cookie policy.


140
00:07:49,556 --> 00:07:52,776
Now, maybe you want your
cookies to be a session duration


141
00:07:52,776 --> 00:07:54,206
or a persistent cookies.


142
00:07:54,206 --> 00:07:56,156
This is the place to
set the policy for that.


143
00:07:56,636 --> 00:07:57,786
Similar for cache.


144
00:07:57,786 --> 00:07:59,436
Maybe you want an
ephemeral cache,


145
00:07:59,826 --> 00:08:02,746
persistent cache that's
used between app launches.


146
00:08:03,316 --> 00:08:04,996
This is a place to
set that policy.


147
00:08:06,366 --> 00:08:09,196
You can also specify
storage objects.


148
00:08:09,556 --> 00:08:13,086
Well, maybe you want to share
caches between different types


149
00:08:13,086 --> 00:08:15,936
of networking or cookies between
different types of networking,


150
00:08:15,936 --> 00:08:16,966
all within your same app.


151
00:08:17,586 --> 00:08:20,336
This is a place that you
can set the storage object


152
00:08:20,336 --> 00:08:21,586
for that configuration.


153
00:08:22,716 --> 00:08:24,316
And time-out specifiers.


154
00:08:24,426 --> 00:08:27,896
You can set resource
and request time-outs


155
00:08:28,236 --> 00:08:31,596
so that your app can handle
error conditions in the network.


156
00:08:32,145 --> 00:08:36,635
Now, I expect many of
you have some exposure


157
00:08:36,635 --> 00:08:38,006
to NSURLSession API.


158
00:08:38,385 --> 00:08:40,296
If not, really, go
ahead and look back


159
00:08:40,296 --> 00:08:43,606
at the WWDC 2014
on NSURLSession.


160
00:08:43,606 --> 00:08:45,746
You're going to get a lot
more in-depth instruction


161
00:08:46,176 --> 00:08:47,896
on how that API works.


162
00:08:48,236 --> 00:08:50,836
But I think for us in the
remainder of the talk here,


163
00:08:50,836 --> 00:08:55,136
it's good for us to take a
look at how NSURLSession works


164
00:08:55,286 --> 00:08:56,526
from a code perspective.


165
00:08:57,806 --> 00:09:00,486
So very simply, the first
thing we do is we're going


166
00:09:00,486 --> 00:09:02,716
to create a configuration
object.


167
00:09:02,756 --> 00:09:03,556
First thing we do.


168
00:09:03,556 --> 00:09:05,746
Here we call
NSURLSessionConfigurations


169
00:09:06,086 --> 00:09:08,306
.defaultSessionConfiguration.


170
00:09:08,996 --> 00:09:10,686
We take all the defaults


171
00:09:10,996 --> 00:09:13,366
and we've got a very
simple config ready to go.


172
00:09:13,366 --> 00:09:18,746
Now, we take that config
and we give it to a session.


173
00:09:18,746 --> 00:09:21,446
We create a session by
calling NSURLSessions emitter


174
00:09:21,806 --> 00:09:23,126
that takes a config object.


175
00:09:23,296 --> 00:09:26,216
And boom! We've got a very
simple session ready to go.


176
00:09:26,826 --> 00:09:30,386
Now that we've got this session,
we're ready to do some work.


177
00:09:30,386 --> 00:09:34,136
Now, the first thing we're
going to do is create an NSURL


178
00:09:34,756 --> 00:09:37,376
and specify what's the
endpoint that we want


179
00:09:37,376 --> 00:09:39,646
to retrieve or request
data from?


180
00:09:40,366 --> 00:09:43,046
Once we have that,
we can create a task.


181
00:09:43,286 --> 00:09:45,256
Here we call the
dataTask function.


182
00:09:45,256 --> 00:09:47,096
And we pass the NSURL object


183
00:09:47,686 --> 00:09:49,726
that we created to
that dataTask.


184
00:09:51,626 --> 00:09:53,586
We also provide a closure.


185
00:09:54,056 --> 00:09:56,766
Now, this closure is
called asynchronously


186
00:09:57,146 --> 00:09:58,806
when our task is
finished loading


187
00:09:59,196 --> 00:10:02,746
and the requested
resource is returned to us.


188
00:10:04,296 --> 00:10:07,856
Now always, don't forget, make
sure you call task.resume.


189
00:10:08,266 --> 00:10:10,856
All of our tasks are
created in a suspended state.


190
00:10:10,856 --> 00:10:14,406
So you must call task.resume
to get that task executed.


191
00:10:14,896 --> 00:10:16,186
All right.


192
00:10:16,186 --> 00:10:18,346
So in review, very
simple review,


193
00:10:19,056 --> 00:10:21,746
NSURLSession is really
a three-step process.


194
00:10:22,956 --> 00:10:24,846
First you're going to create
your configuration object.


195
00:10:27,516 --> 00:10:30,246
Once you have that config you're
going to create your session.


196
00:10:30,836 --> 00:10:35,276
And now you're ready with that
session to make it do some work


197
00:10:35,276 --> 00:10:37,416
and you're going to create
tasks on that session.


198
00:10:37,906 --> 00:10:40,526
Now, I want to suggest to
you a best practice here.


199
00:10:41,056 --> 00:10:45,736
Want to make sure that
you avoid the one-task


200
00:10:45,736 --> 00:10:47,456
to one-session model.


201
00:10:48,826 --> 00:10:51,866
You should really not set
up your networking this way.


202
00:10:52,756 --> 00:10:55,356
Really, what you want
to do and how you want


203
00:10:55,356 --> 00:10:58,846
to design this is have
one session service many,


204
00:10:58,846 --> 00:10:59,566
many tasks.


205
00:10:59,566 --> 00:11:01,296
So of course, you can
have multiple sessions.


206
00:11:01,756 --> 00:11:05,936
But avoid the one-session
to one-task model.


207
00:11:06,226 --> 00:11:07,346
And the reason for that,


208
00:11:07,346 --> 00:11:09,056
it really boils down
to performance.


209
00:11:09,436 --> 00:11:11,246
You're going to get
better memory management


210
00:11:11,346 --> 00:11:13,426
and OS resource utilization


211
00:11:13,426 --> 00:11:20,256
by having few sessions
servicing many, many tasks.


212
00:11:20,256 --> 00:11:23,376
Now, as I mentioned, the
NSURLSession API is evolving.


213
00:11:24,006 --> 00:11:27,056
I'd like to talk about
the HTTP/2 protocol


214
00:11:27,056 --> 00:11:28,636
and what we've been doing


215
00:11:28,636 --> 00:11:31,266
in this protocol
within NSURLSession.


216
00:11:32,676 --> 00:11:36,616
Now, the support of
the HTTP/2 protocol


217
00:11:36,616 --> 00:11:39,746
within the NSURLSession was
introduced last year at WWDC.


218
00:11:39,746 --> 00:11:42,946
And it's increasing
in popularity.


219
00:11:43,946 --> 00:11:48,556
You know, large Internet service
providers are supporting HTTP/2.


220
00:11:49,716 --> 00:11:53,196
Now, what makes HTTP/2
such a compelling protocol?


221
00:11:53,196 --> 00:11:55,486
Well, let's look at
some of its features.


222
00:11:55,866 --> 00:11:58,956
One of the great features
of HTTP/2 is multiplexing


223
00:11:58,956 --> 00:12:00,356
and concurrency support.


224
00:12:00,946 --> 00:12:05,116
Now, this feature allows
multiple requests and responses


225
00:12:05,256 --> 00:12:07,386
to be in flight concurrently.


226
00:12:08,046 --> 00:12:11,186
Responses can be received
out of order and all


227
00:12:11,186 --> 00:12:13,606
on the same single
TCP connection.


228
00:12:14,836 --> 00:12:17,736
Another great feature of the
protocol is header compression.


229
00:12:18,256 --> 00:12:22,076
This reduces the size
of the HTTP/2 headers.


230
00:12:22,546 --> 00:12:24,736
It cuts down on network
round trips.


231
00:12:24,986 --> 00:12:27,366
This is better for
bandwidth, and really better


232
00:12:27,366 --> 00:12:29,196
for performance for
your application.


233
00:12:30,566 --> 00:12:33,506
Another great feature
is stream priorities.


234
00:12:33,876 --> 00:12:38,026
As a client of HTTP/2 you
can indicate the priority


235
00:12:38,026 --> 00:12:40,756
at which resources are
returned from the server.


236
00:12:41,076 --> 00:12:42,726
And this really allows
you to look out


237
00:12:42,726 --> 00:12:46,056
and tune the networking
for your application.


238
00:12:47,516 --> 00:12:51,486
So in essence, HTTP/2 is
all about performance.


239
00:12:51,716 --> 00:12:55,216
Now, this will result in an
improved end user experience


240
00:12:55,216 --> 00:12:56,796
as they interact with your apps.


241
00:12:57,396 --> 00:12:59,856
Now, there's one more
feature that we have


242
00:12:59,856 --> 00:13:02,196
to take a look at of HTTP/2.


243
00:13:02,896 --> 00:13:06,176
Today we're introducing
support in NSURLSession


244
00:13:06,176 --> 00:13:10,166
for HTTP/2's Server
Push feature.


245
00:13:11,516 --> 00:13:15,496
[ Applause ]


246
00:13:15,996 --> 00:13:18,016
So what is Server Push?


247
00:13:18,016 --> 00:13:20,476
Well, when a client
makes a request,


248
00:13:20,526 --> 00:13:22,796
a server will respond
to that request.


249
00:13:23,286 --> 00:13:26,776
But concurrently, it can
push additional responses


250
00:13:26,776 --> 00:13:27,506
to the client.


251
00:13:27,716 --> 00:13:30,306
So if you think about a Web
page, it's made up of lots


252
00:13:30,306 --> 00:13:31,566
and lots of resources.


253
00:13:32,006 --> 00:13:35,066
Instead of the client having to
fetch each individual resource


254
00:13:35,066 --> 00:13:37,376
over the network, a server can,


255
00:13:37,696 --> 00:13:42,036
in parallel to the original
response, push information


256
00:13:42,356 --> 00:13:45,326
about additional resources
the client is likely to need.


257
00:13:47,056 --> 00:13:50,296
So, Server Push prevents
multiple network round trips


258
00:13:50,296 --> 00:13:56,526
that HTTP/1.1 and non-Server
Push HTTP/2 requires today.


259
00:13:57,976 --> 00:13:59,896
Now, I want to bring to
your attention something


260
00:13:59,896 --> 00:14:03,396
that the server obviously
has to support this protocol,


261
00:14:03,396 --> 00:14:07,436
has to support HTTP/2 and
it has to be configured


262
00:14:07,866 --> 00:14:10,066
to enable the Server
Push feature.


263
00:14:10,896 --> 00:14:13,976
Now, Server Push is
available now to applications


264
00:14:14,916 --> 00:14:16,696
that use NSURLSession.


265
00:14:16,876 --> 00:14:18,616
There's no need to opt in.


266
00:14:18,876 --> 00:14:21,076
No funny properties
that you have to set.


267
00:14:21,326 --> 00:14:22,306
It's just there.


268
00:14:22,386 --> 00:14:23,626
And it just works.


269
00:14:24,256 --> 00:14:26,046
So this is all more
reason we feel


270
00:14:26,046 --> 00:14:28,886
that NSURLSession
API is the best API


271
00:14:28,886 --> 00:14:30,336
for your applications today.


272
00:14:30,926 --> 00:14:34,016
Now, let's take a minute here
and look a little bit deeper


273
00:14:34,016 --> 00:14:36,706
about how Server Push
will benefit your app.


274
00:14:39,306 --> 00:14:42,136
Here I've got a graph that
represents an app's use


275
00:14:42,136 --> 00:14:46,256
of NSURLSession using
the HTTP/1.1 protocol


276
00:14:46,686 --> 00:14:48,146
to do some network loading.


277
00:14:48,736 --> 00:14:50,626
Now, as we move down this graph,


278
00:14:50,786 --> 00:14:52,746
we're going to accumulate
more time.


279
00:14:52,746 --> 00:14:55,086
And this will be
our total latency


280
00:14:55,296 --> 00:14:57,806
for our network loading
for our application.


281
00:14:58,996 --> 00:15:02,396
So, first our app is
going to resume a task.


282
00:15:02,896 --> 00:15:06,976
And that task is going
to request index.html.


283
00:15:08,096 --> 00:15:09,656
We'll assume that
everything's working great


284
00:15:09,656 --> 00:15:10,936
because networks just do that.


285
00:15:10,936 --> 00:15:14,066
And we're going to get our
response from the server


286
00:15:14,066 --> 00:15:15,386
with the requested data.


287
00:15:16,506 --> 00:15:19,606
Now, in addition to the
data for index.html,


288
00:15:19,866 --> 00:15:21,366
we note that time has passed.


289
00:15:21,806 --> 00:15:24,926
And that our total latency has
accumulated, has increased.


290
00:15:26,346 --> 00:15:29,076
Now, our app is going
to resume another task


291
00:15:29,076 --> 00:15:32,036
and request style.css
from the server.


292
00:15:32,366 --> 00:15:34,506
And again, assuming
everything's working properly,


293
00:15:34,506 --> 00:15:36,206
we're going to get
that response.


294
00:15:36,946 --> 00:15:38,636
And now we have style.css


295
00:15:38,636 --> 00:15:42,686
and our total latency has now
increased by the time required


296
00:15:42,686 --> 00:15:44,666
to fetch that resource
over the network.


297
00:15:45,286 --> 00:15:49,736
Here the application will
make the final task resume


298
00:15:49,736 --> 00:15:51,386
and request background.jpg.


299
00:15:52,266 --> 00:15:54,066
We get the response
from the server.


300
00:15:54,586 --> 00:15:56,456
And here we've got
background.jpg.


301
00:15:56,456 --> 00:16:01,386
Our application is now finished
with its network loading.


302
00:16:01,836 --> 00:16:03,216
And we look at the graph,


303
00:16:03,216 --> 00:16:09,146
we see this is our total latency
cost for an HTTP/1.1 load.


304
00:16:10,256 --> 00:16:13,016
Now, let's take a look at our
application when it's able


305
00:16:13,016 --> 00:16:15,926
to use HTTP/2 and Server Push.


306
00:16:16,396 --> 00:16:19,356
And I'm just going to shift
the HTTP/1.1 result graph


307
00:16:19,356 --> 00:16:20,866
over to the side
just for reference.


308
00:16:21,806 --> 00:16:26,696
So again, our app will resume
a task request index.html.


309
00:16:27,156 --> 00:16:31,426
Again, our total latency,
we receive our response.


310
00:16:31,526 --> 00:16:36,766
And our total latency is pretty
much exactly the same as it was


311
00:16:36,766 --> 00:16:38,726
for the non-Server Push case.


312
00:16:39,436 --> 00:16:40,276
That's expected.


313
00:16:40,276 --> 00:16:44,316
What will happen, however,
is that concurrently


314
00:16:44,316 --> 00:16:47,246
to our response for
the original request,


315
00:16:47,636 --> 00:16:50,836
the server will push other
resources to NSURLSession.


316
00:16:52,296 --> 00:16:55,956
Now, this comes along with the
original request or a response


317
00:16:55,956 --> 00:16:57,246
from the original request.


318
00:16:58,496 --> 00:17:02,016
When our application
resumes the second task


319
00:17:02,496 --> 00:17:06,896
and requests style.css we get
an almost immediate response.


320
00:17:07,185 --> 00:17:10,185
And this is because Server
Push gave us the data before we


321
00:17:10,496 --> 00:17:12,406
really knew we needed it.


322
00:17:12,986 --> 00:17:16,806
Now we have style.css and we
notice that the accumulated time


323
00:17:16,806 --> 00:17:20,136
for style.css is substantially
shorter when compared


324
00:17:20,136 --> 00:17:24,455
to the HTTP/1.1 needed to
load the exact same resource.


325
00:17:24,455 --> 00:17:29,406
Now the app makes
some final task resume


326
00:17:29,406 --> 00:17:30,536
and requests background.jpg.


327
00:17:30,536 --> 00:17:33,446
Again, we get a real
quick response.


328
00:17:33,916 --> 00:17:35,576
The app has background.jpg.


329
00:17:35,576 --> 00:17:39,566
And we add the total time
to our accumulated total.


330
00:17:39,706 --> 00:17:43,456
At this point the app is done
with its network loading.


331
00:17:44,716 --> 00:17:46,826
And we see that the HTTP/2


332
00:17:46,826 --> 00:17:51,556
with Server Push latency is much
smaller than that of the HTTP/1


333
00:17:51,556 --> 00:17:53,256
or the non-Server Push load.


334
00:17:53,996 --> 00:17:56,046
The reason for this
improved performance is


335
00:17:56,046 --> 00:17:59,776
that with Server Push we were
able to save the latency cost


336
00:17:59,776 --> 00:18:03,386
of network round trips needed
when requesting resources.


337
00:18:03,946 --> 00:18:09,816
Now, I'd like to
invite Andreas Garkuscha


338
00:18:10,016 --> 00:18:11,916
to show us what Server
Push looks


339
00:18:11,916 --> 00:18:14,356
like in a real application.


340
00:18:14,486 --> 00:18:15,136
Andreas.


341
00:18:16,516 --> 00:18:19,636
[ Applause ]


342
00:18:20,136 --> 00:18:20,776
>> Thank you, Jeff.


343
00:18:21,886 --> 00:18:22,816
Good morning everyone.


344
00:18:23,516 --> 00:18:26,006
Today I'm going to
demonstrate the advantages


345
00:18:26,006 --> 00:18:30,136
of using HTTP/2 Server Push when
loading resources for your apps.


346
00:18:39,256 --> 00:18:42,276
You are looking at the very
common part of an app that many


347
00:18:42,276 --> 00:18:44,796
of you may already
have implemented


348
00:18:44,796 --> 00:18:47,876
or at least have seen while
using some of the existing apps.


349
00:18:48,776 --> 00:18:52,456
What you see now could
be a social network app


350
00:18:52,456 --> 00:18:55,236
for photographers showing
the most popular pictures


351
00:18:55,726 --> 00:18:58,316
where you can list the
most popular picture


352
00:18:58,316 --> 00:18:59,786
for a certain photographer.


353
00:19:00,386 --> 00:19:01,836
View the individual pictures.


354
00:19:02,966 --> 00:19:03,946
Go to the next.


355
00:19:04,886 --> 00:19:07,256
Go back. Go back
to the top list.


356
00:19:07,256 --> 00:19:08,406
Choose another one to view.


357
00:19:09,096 --> 00:19:10,006
And so on.


358
00:19:11,206 --> 00:19:14,076
This app could be
a food recipe app


359
00:19:14,286 --> 00:19:16,986
or a music streaming app
showing the album artwork.


360
00:19:17,376 --> 00:19:21,766
So an app which is loading
resources from your server.


361
00:19:22,196 --> 00:19:26,216
In this case, it is loading
and showing some images.


362
00:19:27,116 --> 00:19:30,406
Now notice here for demo
purposes there is a switch.


363
00:19:31,346 --> 00:19:34,006
It allows us to choose
between the initial URL


364
00:19:34,006 --> 00:19:37,216
with Server Push configured
and one with no Server Push.


365
00:19:38,386 --> 00:19:43,426
In both cases, first we request
the initial document containing


366
00:19:43,456 --> 00:19:45,426
the image URLs to load.


367
00:19:46,096 --> 00:19:47,426
Then we request the images.


368
00:19:48,116 --> 00:19:51,316
If the Server Push is off,
nothing is getting pushed.


369
00:19:51,616 --> 00:19:53,126
So we need to send the requests


370
00:19:53,346 --> 00:19:55,576
for every image over
the network.


371
00:19:56,826 --> 00:19:59,616
In case of the Server Push,
and now I'm going to switch


372
00:19:59,616 --> 00:20:05,156
to this mode, as Jeff explained
previously, the requesting


373
00:20:05,156 --> 00:20:08,546
of the initial document
will trigger the push


374
00:20:08,546 --> 00:20:11,996
of the resources from the
server to your application.


375
00:20:13,156 --> 00:20:15,166
There will be no need
to send the request


376
00:20:15,166 --> 00:20:17,076
for every image over
the network.


377
00:20:17,486 --> 00:20:20,306
The data for your data
tasks will be delivered


378
00:20:20,306 --> 00:20:24,216
out of the Server Push storage
directly to your application.


379
00:20:26,346 --> 00:20:29,546
Now, let's compare the
performance of the Server Push


380
00:20:29,546 --> 00:20:30,806
and non-Server Push loads.


381
00:20:31,666 --> 00:20:36,326
I'm going to switch between the
initial URL with Server Push


382
00:20:36,326 --> 00:20:43,876
and non-Server Push a couple
of times so that you can see


383
00:20:44,236 --> 00:20:45,956
when the Server Push is on,


384
00:20:47,196 --> 00:20:50,326
this entire collection
view is loaded faster.


385
00:20:51,646 --> 00:20:52,576
But how much faster?


386
00:20:52,886 --> 00:20:54,666
Well, let me show you that.


387
00:20:55,626 --> 00:20:59,836
Now the demo application is
going to provide the results.


388
00:21:00,456 --> 00:21:01,886
It's the bottom of
the current view.


389
00:21:02,296 --> 00:21:05,686
For the fastest non-Server
Push load in red.


390
00:21:06,206 --> 00:21:09,226
And for the fastest
Server Push load in green.


391
00:21:11,356 --> 00:21:12,736
Let me do it a couple of times.


392
00:21:17,546 --> 00:21:19,716
Now the same with
the artist view.


393
00:21:21,366 --> 00:21:23,856
A couple of times.


394
00:21:23,856 --> 00:21:24,606
Server Push off.


395
00:21:24,606 --> 00:21:25,386
Server Push on.


396
00:21:26,526 --> 00:21:29,756
You can see here that
the Server Push load is


397
00:21:29,756 --> 00:21:32,536
at least two times faster.


398
00:21:34,276 --> 00:21:38,106
Pushing the images is about
two to three times faster


399
00:21:38,246 --> 00:21:42,016
than loading them on the high
latency network we are actually


400
00:21:42,016 --> 00:21:42,716
using here.


401
00:21:43,286 --> 00:21:46,186
The kind of network your
applications can experience


402
00:21:46,566 --> 00:21:48,476
when on cellular or slow Wi-Fi.


403
00:21:49,666 --> 00:21:53,226
I prepared a video showing
the Server Push load


404
00:21:53,226 --> 00:21:56,516
and non-Server Push
loads side by side.


405
00:21:56,736 --> 00:21:57,976
Well, let me show you that.


406
00:22:07,356 --> 00:22:11,876
So, you can see when the Server
Push user is already viewing the


407
00:22:11,876 --> 00:22:16,426
pictures, the other guy is just
trying to load the artist view.


408
00:22:16,836 --> 00:22:19,976
Let's see it one more time.


409
00:22:20,766 --> 00:22:25,066
Once again, the Server Push
user on the right is getting


410
00:22:25,436 --> 00:22:27,916
through much faster than
the non-Server Push user


411
00:22:27,916 --> 00:22:28,536
on the left.


412
00:22:36,346 --> 00:22:38,406
Two to three times faster.


413
00:22:38,406 --> 00:22:39,596
Just think about it.


414
00:22:40,156 --> 00:22:43,016
Think about the user experience
you can provide your customers


415
00:22:43,486 --> 00:22:46,906
if you configure the Server
Push on your HTTP/2 server.


416
00:22:47,526 --> 00:22:50,526
And you don't even have to
change any code in your app.


417
00:22:50,626 --> 00:22:51,596
And this is great.


418
00:22:51,876 --> 00:22:52,496
Just awesome.


419
00:22:53,066 --> 00:22:54,566
This was the Server Push demo.


420
00:22:54,566 --> 00:22:55,306
Thank you very much.


421
00:22:55,306 --> 00:22:56,236
Have a great conference.


422
00:22:56,696 --> 00:22:58,956
And now, back to Jeff.


423
00:22:59,516 --> 00:23:03,666
[ Applause ]


424
00:23:04,166 --> 00:23:05,436
>> All right, thanks, Andreas.


425
00:23:07,876 --> 00:23:10,136
So let's summarize
what we've seen


426
00:23:10,136 --> 00:23:14,106
and discussed regarding
HTTP/2 and Server Push.


427
00:23:15,436 --> 00:23:18,736
Server Push is supported
only in NSURLSession API.


428
00:23:18,916 --> 00:23:22,276
So if you're writing new apps
or you're on NSURLConnection,


429
00:23:22,946 --> 00:23:26,786
we highly recommend that you
move to NSURLSession APIs today.


430
00:23:28,076 --> 00:23:30,776
There's no coding
that you have to do


431
00:23:30,776 --> 00:23:32,436
to take advantage
of Server Push.


432
00:23:32,436 --> 00:23:33,336
It's not an opt-in.


433
00:23:33,336 --> 00:23:34,586
It just works.


434
00:23:36,026 --> 00:23:38,436
And with Server Push
your apps will perform


435
00:23:38,436 --> 00:23:39,776
in the most optimal manner,


436
00:23:40,176 --> 00:23:42,806
giving your users an
even better experience


437
00:23:42,806 --> 00:23:44,196
with your applications.


438
00:23:46,336 --> 00:23:51,046
Now, another evolution to the
NSURLSession API is the addition


439
00:23:51,046 --> 00:23:52,876
of Network Statistics.


440
00:23:55,576 --> 00:23:57,846
Now, who out here
loves statistics?


441
00:23:57,846 --> 00:23:59,046
We have any statistic people?


442
00:23:59,046 --> 00:24:00,496
We got some folks
that love statistics?


443
00:24:00,496 --> 00:24:01,936
All right, I've got
a stat for you.


444
00:24:01,936 --> 00:24:03,996
Are you ready?


445
00:24:03,996 --> 00:24:05,596
Here it is.


446
00:24:06,306 --> 00:24:07,366
All right.


447
00:24:07,366 --> 00:24:08,246
Right. Sorry about that.


448
00:24:08,246 --> 00:24:11,786
Sorry. We're going to get to
some actual useful statistics.


449
00:24:11,786 --> 00:24:14,436
And this is, we believe,
network statistics are part


450
00:24:14,436 --> 00:24:16,406
of that 2% useful values.


451
00:24:16,906 --> 00:24:19,146
So, why is it useful?


452
00:24:19,146 --> 00:24:21,936
Have you ever had slow
network performance


453
00:24:21,936 --> 00:24:22,976
in your applications?


454
00:24:23,806 --> 00:24:24,896
Imagine some of you have.


455
00:24:24,896 --> 00:24:27,756
And how did you go about
figuring out what was wrong?


456
00:24:28,406 --> 00:24:29,716
You know, how did
you debug that?


457
00:24:30,726 --> 00:24:34,746
We believe network statistics is
going to be great for you guys


458
00:24:34,746 --> 00:24:36,366
to be able to use
in the development


459
00:24:36,366 --> 00:24:37,716
and debugging environment.


460
00:24:37,826 --> 00:24:40,406
You could use this to
collect information,


461
00:24:40,616 --> 00:24:41,766
possibly out in the field.


462
00:24:41,766 --> 00:24:43,366
Maybe you could leverage
Test Flight


463
00:24:43,676 --> 00:24:44,906
and collect some information


464
00:24:44,906 --> 00:24:46,506
about your app running
in the field.


465
00:24:47,746 --> 00:24:50,706
Network statistics is
about analyzing performance


466
00:24:50,846 --> 00:24:52,536
of network loading
within your app.


467
00:24:52,846 --> 00:24:56,356
It's about finding and fixing
networking-related bugs.


468
00:24:56,356 --> 00:24:58,996
And it's about giving
you better understanding


469
00:24:59,156 --> 00:25:02,486
of what your networking is doing
inside of your application.


470
00:25:04,116 --> 00:25:07,546
Currently, network
statistics is supported in iOS,


471
00:25:07,756 --> 00:25:10,816
macOS and on tvOS platforms.


472
00:25:12,546 --> 00:25:15,846
Now, before we get started with
the actual statistics values,


473
00:25:15,846 --> 00:25:18,266
let me explain to you how you're
going to get all these values.


474
00:25:18,676 --> 00:25:22,286
And to do this, we need to
look at a little bit of code.


475
00:25:22,476 --> 00:25:25,246
Here we have a brand
new delegate called


476
00:25:25,246 --> 00:25:27,926
didFinishCollecting metrics.


477
00:25:28,416 --> 00:25:29,596
This is a delegate method


478
00:25:29,596 --> 00:25:32,376
of the NSURLSession
Task Delegate class.


479
00:25:33,026 --> 00:25:35,806
Now, when you implement
this delegate,


480
00:25:36,156 --> 00:25:38,326
it's going to be passed a task


481
00:25:38,326 --> 00:25:40,006
for which the metrics
were collected


482
00:25:40,316 --> 00:25:42,086
and a new class object.


483
00:25:42,086 --> 00:25:45,036
This is NSURLSessionTaskMetrics.


484
00:25:47,156 --> 00:25:50,486
The NSURLSessionTaskMetrics
class has a property


485
00:25:50,486 --> 00:25:52,216
named taskInterval.


486
00:25:53,566 --> 00:25:55,816
This is the interval of
time from a task creation


487
00:25:55,816 --> 00:25:58,336
to the point in time when all
the statistics are collected


488
00:25:58,336 --> 00:25:59,776
and are ready to be delivered


489
00:25:59,776 --> 00:26:01,926
to your
didFinishCollectingMetrics


490
00:26:01,926 --> 00:26:02,456
delegate.


491
00:26:03,236 --> 00:26:06,406
Another property I'm showing
you here is the redirectCount.


492
00:26:06,996 --> 00:26:08,376
Now, that's fairly
straightforward.


493
00:26:08,376 --> 00:26:11,176
And as the name indicates,
this is the number of times


494
00:26:11,176 --> 00:26:14,706
that an HTTP redirection
occurred during the


495
00:26:14,706 --> 00:26:16,116
task's execution.


496
00:26:17,216 --> 00:26:18,396
The last property


497
00:26:20,016 --> 00:26:23,966
of NSURLSessionTaskMetrics
called transactionMetrics.


498
00:26:24,486 --> 00:26:26,276
Now, this property
is really the core.


499
00:26:26,276 --> 00:26:28,506
This is the meat of
our network statistics.


500
00:26:28,506 --> 00:26:30,416
This is where you get an array


501
00:26:30,416 --> 00:26:33,966
of NSURLTaskTransactionMetric
objects.


502
00:26:34,096 --> 00:26:37,446
Now, let's take a closer look
at this particular new class


503
00:26:37,446 --> 00:26:38,646
because this is really
where some


504
00:26:38,646 --> 00:26:40,596
of the great metrics
are located.


505
00:26:42,126 --> 00:26:44,826
Now, in order to understand
all of these metrics,


506
00:26:44,826 --> 00:26:47,496
we're going to chop them
up into four categories.


507
00:26:48,006 --> 00:26:53,216
Now, the first two properties of
NSURLTaskTransactionMetrics make


508
00:26:53,216 --> 00:26:54,406
up the first category.


509
00:26:54,406 --> 00:26:57,116
And I'm going to call
that Request and Response.


510
00:26:58,376 --> 00:27:02,986
There's two properties here
called Request" and "Response.


511
00:27:03,676 --> 00:27:05,096
And they really allow you


512
00:27:05,096 --> 00:27:07,596
to analyze what was
it that I asked for?


513
00:27:08,046 --> 00:27:12,686
And what was the response
to that original question?


514
00:27:14,356 --> 00:27:16,816
The second category of
statistics has to do


515
00:27:16,816 --> 00:27:18,916
with protocol and connection.


516
00:27:21,456 --> 00:27:25,416
The property networkProtocolName
is just --


517
00:27:25,416 --> 00:27:26,796
it tells you what type


518
00:27:26,796 --> 00:27:28,596
of protocol was used
during the time


519
00:27:28,596 --> 00:27:31,566
at which statistics
were collected.


520
00:27:31,866 --> 00:27:34,256
And here's a possible list
of names you might see here:


521
00:27:34,766 --> 00:27:37,716
HTTP/1.1, HTTP/2, or SPDY.


522
00:27:37,716 --> 00:27:40,056
Now, this list can and
will change over time.


523
00:27:41,136 --> 00:27:44,376
Another property you'll
have is isProxyConnection.


524
00:27:45,006 --> 00:27:47,976
This tells you whether
the transaction was part,


525
00:27:48,276 --> 00:27:51,106
or had a proxy connection
involved during the time


526
00:27:51,106 --> 00:27:52,336
collections were gathered,


527
00:27:52,946 --> 00:27:55,096
or statistics were
gathered or collected.


528
00:27:55,596 --> 00:27:59,166
And the isReusedConnection.


529
00:27:59,166 --> 00:28:00,976
This property is set to Yes


530
00:28:00,976 --> 00:28:04,326
if a persistent connection
was used during the fetch


531
00:28:04,326 --> 00:28:05,256
of the resource.


532
00:28:08,126 --> 00:28:10,876
Now, the third category of
metrics has only one property.


533
00:28:10,876 --> 00:28:12,436
And it deals with
the information


534
00:28:12,436 --> 00:28:15,416
about the resource
loading or load info.


535
00:28:16,706 --> 00:28:19,446
The single property
is resourceFetchType.


536
00:28:20,026 --> 00:28:22,466
Now, it tells you how a
resource was obtained.


537
00:28:22,776 --> 00:28:26,326
Now, some of the values you
would see here are network load.


538
00:28:26,416 --> 00:28:29,246
This indicates that the resource
was loaded over a network or,


539
00:28:29,506 --> 00:28:31,496
as commonly referred
to, an origin load.


540
00:28:32,416 --> 00:28:33,876
You might see local cache,


541
00:28:34,206 --> 00:28:36,616
which indicates the resource
was fetched from a local cache.


542
00:28:36,616 --> 00:28:38,096
It was stored local
to your application.


543
00:28:38,096 --> 00:28:40,776
No network transaction
was really required.


544
00:28:41,346 --> 00:28:42,526
And Server Push.


545
00:28:42,916 --> 00:28:45,096
This tells that the resource
was found as a result


546
00:28:45,096 --> 00:28:50,006
of a Server Push cache hit
when you made that request.


547
00:28:50,876 --> 00:28:53,886
The fourth category of
transaction has to do


548
00:28:53,886 --> 00:28:56,386
with connection establishment
and transmission.


549
00:28:57,576 --> 00:29:01,226
Now, the first group of
metrics measure time related


550
00:29:01,226 --> 00:29:03,186
to the setup of a
network connection.


551
00:29:04,476 --> 00:29:08,436
The second group of metrics
measure HTTP-related activities


552
00:29:08,436 --> 00:29:09,326
of a network load.


553
00:29:10,006 --> 00:29:13,346
These properties are timestamps
and are taken at a time


554
00:29:13,346 --> 00:29:15,016
when the event actually
occurred.


555
00:29:15,196 --> 00:29:17,316
So let's take a closer
look at these metrics


556
00:29:17,316 --> 00:29:20,076
and when they are collected
during the execution


557
00:29:20,076 --> 00:29:20,906
of a network load.


558
00:29:21,676 --> 00:29:24,876
To do this, we're going to look
at a very simple network load.


559
00:29:25,076 --> 00:29:28,146
Now note that this is just
one model of one type of load.


560
00:29:28,146 --> 00:29:29,676
There's all sorts of activities


561
00:29:30,076 --> 00:29:31,766
that happen during
network loading.


562
00:29:32,036 --> 00:29:33,276
You've got cache lookups.


563
00:29:33,546 --> 00:29:34,826
You've got cookie lookups.


564
00:29:34,826 --> 00:29:36,406
You're dealing with
redirections,


565
00:29:36,406 --> 00:29:38,166
sometimes authentication
challenges.


566
00:29:38,316 --> 00:29:39,916
But we're going to keep
it real simple just


567
00:29:39,916 --> 00:29:41,326
for our purposes here.


568
00:29:41,606 --> 00:29:47,136
The NSURLTaskTransactionMetrics
class contains properties


569
00:29:47,216 --> 00:29:49,836
that contain all these time
stamps at various points.


570
00:29:50,146 --> 00:29:53,856
So, we begin with fetchStart.


571
00:29:54,476 --> 00:29:57,986
fetchStart is a time when the
application begins requesting


572
00:29:57,986 --> 00:29:58,706
a resource.


573
00:29:58,706 --> 00:30:01,016
A fetch could be satisfied
from a local cache,


574
00:30:01,426 --> 00:30:03,796
or possibly resource
that was origin loaded.


575
00:30:05,256 --> 00:30:07,576
So now we're looking
at domainLookup.


576
00:30:09,066 --> 00:30:11,266
So the domainLookupStart
property.


577
00:30:11,266 --> 00:30:13,446
This is the time just
before a name lookup


578
00:30:13,446 --> 00:30:14,786
for a resource begins.


579
00:30:15,116 --> 00:30:16,496
Now, this is the DNS query.


580
00:30:16,976 --> 00:30:19,596
And this converts a host
name to an IP address.


581
00:30:20,006 --> 00:30:23,886
So, domainLookupEnd is
when that lookup completes.


582
00:30:24,146 --> 00:30:26,076
And an IP address is
sent back to the caller.


583
00:30:26,646 --> 00:30:30,776
Here we're going to take a
look at what metrics we collect


584
00:30:30,776 --> 00:30:32,456
for connection establishment.


585
00:30:33,596 --> 00:30:37,016
The connectStart property is the
time just before an app begins


586
00:30:37,016 --> 00:30:40,036
to start or establish
a TCP connection


587
00:30:40,036 --> 00:30:41,016
with the remote server.


588
00:30:41,526 --> 00:30:43,106
Now, this value could be nil


589
00:30:43,106 --> 00:30:45,376
if the response is
found in a local cache.


590
00:30:46,256 --> 00:30:48,656
I'll discuss the connectEnd
property in just a moment.


591
00:30:52,236 --> 00:30:57,006
If you're doing HTTPS you're
going to need a TLS handshake.


592
00:30:57,006 --> 00:30:58,606
So we've got a statistic
for that.


593
00:30:59,186 --> 00:31:01,526
The secureConnectionStart
metric,


594
00:31:01,766 --> 00:31:04,176
the point in time just before
the application starts the


595
00:31:04,176 --> 00:31:07,636
security handshake to secure
the current connection.


596
00:31:08,136 --> 00:31:09,606
And secureConnectionEnd, well,


597
00:31:09,606 --> 00:31:12,376
that's when the secure
handshake is completed.


598
00:31:13,156 --> 00:31:14,216
It's finished.


599
00:31:14,256 --> 00:31:16,166
Now, as I mentioned, connectEnd.


600
00:31:16,586 --> 00:31:19,586
Now, that's the time immediately
after an app has connected


601
00:31:19,586 --> 00:31:22,016
to the remote server,
including all the


602
00:31:22,016 --> 00:31:23,756
security-related handshakes.


603
00:31:24,196 --> 00:31:26,536
This is the point in
which a connection is


604
00:31:26,536 --> 00:31:28,016
considered established.


605
00:31:28,476 --> 00:31:31,906
Now that we have an
established connection,


606
00:31:32,136 --> 00:31:35,616
we can actually do some HTTP.


607
00:31:35,846 --> 00:31:37,926
So, we have a few stats
that we can collect


608
00:31:37,926 --> 00:31:40,246
for you regarding the
request and response.


609
00:31:40,246 --> 00:31:42,686
So first we have requestStart.


610
00:31:42,686 --> 00:31:44,656
And this is the time when
the app begins requesting the


611
00:31:44,656 --> 00:31:47,236
resource regardless of whether
the resource was fetched


612
00:31:47,236 --> 00:31:49,556
from a local cache
or a remote server.


613
00:31:50,086 --> 00:31:52,626
If an origin load was
needed, this is the time


614
00:31:52,966 --> 00:31:57,166
at which the first byte of the
HTTP header began transmission.


615
00:31:57,886 --> 00:32:00,676
requestEnd is the time
when the last byte


616
00:32:00,676 --> 00:32:02,736
of the request was
written to the network.


617
00:32:06,656 --> 00:32:07,776
responseStart.


618
00:32:08,466 --> 00:32:10,576
This represents a time
when the first byte


619
00:32:10,576 --> 00:32:13,326
of the response is
received from the server.


620
00:32:13,836 --> 00:32:15,116
Now, if this is a cache load,


621
00:32:15,116 --> 00:32:18,956
this is when the cache response
was received from the cache.


622
00:32:19,376 --> 00:32:22,006
And responseEnd was
the time immediately


623
00:32:22,006 --> 00:32:24,586
after the application
receives the last byte


624
00:32:25,476 --> 00:32:27,486
of the resource requested.


625
00:32:27,986 --> 00:32:32,106
Now that we've been looking


626
00:32:32,106 --> 00:32:34,336
at stats collected
during an origin load.


627
00:32:35,016 --> 00:32:37,536
That is, we had to send bytes
over a physical network.


628
00:32:38,136 --> 00:32:42,006
It's possible that the
networking could have been


629
00:32:42,006 --> 00:32:43,466
satisfied from a local cache.


630
00:32:43,466 --> 00:32:44,286
And I've mentioned that.


631
00:32:44,286 --> 00:32:48,026
So if a local cache contains
the response for our request,


632
00:32:48,376 --> 00:32:49,416
then there's no need for DNS.


633
00:32:49,416 --> 00:32:52,756
So there's no need to make
a TCP connection, et cetera.


634
00:32:53,316 --> 00:32:56,366
Those statistics will be set
to nil in this cache case.


635
00:32:56,366 --> 00:32:57,446
So just be aware of that


636
00:32:57,446 --> 00:32:58,946
as you're looking
at these statistics.


637
00:32:59,496 --> 00:33:03,776
Now, you might be asking,
"Okay, this is really cool.


638
00:33:03,776 --> 00:33:06,206
How do I get these
stats into my code?"


639
00:33:06,536 --> 00:33:10,146
So, to do that, let's
look at some code.


640
00:33:10,146 --> 00:33:12,366
Now, as I showed you earlier,
we start with the delegate.


641
00:33:12,766 --> 00:33:14,426
And here I have an
implementation


642
00:33:14,426 --> 00:33:17,246
of the NSURLSessionTaskDelegate.


643
00:33:17,736 --> 00:33:21,796
This implements the new
didFinishCollectingMetrics


644
00:33:21,796 --> 00:33:22,686
delegate callback.


645
00:33:23,086 --> 00:33:25,276
And the one I'm showing you
here doesn't do really anything


646
00:33:25,276 --> 00:33:26,666
of any interest at the moment.


647
00:33:26,976 --> 00:33:28,606
I totally expect
you guys are going


648
00:33:28,606 --> 00:33:30,196
to do some really
cool stuff here.


649
00:33:30,196 --> 00:33:31,566
Maybe you're going
to do some logging.


650
00:33:31,956 --> 00:33:33,926
A good point to do some
debugging and take a look


651
00:33:33,926 --> 00:33:35,516
at what's happening
with your networking.


652
00:33:35,816 --> 00:33:38,476
Again, maybe leverage Test
Flight and do some logging


653
00:33:38,766 --> 00:33:40,766
so you can collect some
information from the field


654
00:33:40,766 --> 00:33:44,756
about how the networking is
performing in your applications.


655
00:33:45,696 --> 00:33:46,556
That's all up to you.


656
00:33:47,226 --> 00:33:49,886
So, let's keep looking
at this example here.


657
00:33:49,886 --> 00:33:52,316
Maybe a little bit
of housekeeping code.


658
00:33:52,636 --> 00:33:53,566
First thing we have to do


659
00:33:53,566 --> 00:33:57,376
with our delegate implementation
is instantiate an instance


660
00:33:57,376 --> 00:33:58,246
of it.


661
00:33:59,786 --> 00:34:02,336
Now, we're going to create a
default configuration object.


662
00:34:02,336 --> 00:34:03,726
We take all the defaults just


663
00:34:03,726 --> 00:34:05,976
by calling
defaultSessionConfiguration.


664
00:34:06,406 --> 00:34:10,106
Next, we're going to
create an instance --


665
00:34:10,536 --> 00:34:13,576
or we're going to create an
NSOperatonQueue instance.


666
00:34:13,576 --> 00:34:16,186
And we have to do that because
we have to have some place,


667
00:34:16,186 --> 00:34:23,636
some queue, so that our delegate
can actually do some work.


668
00:34:23,636 --> 00:34:27,826
And as I mentioned earlier,
I recreate an NSURLSession


669
00:34:27,826 --> 00:34:29,226
with that configuration object.


670
00:34:29,226 --> 00:34:32,565
But here I'm calling
NSURLSession's init function


671
00:34:32,966 --> 00:34:34,676
that takes additional
parameters.


672
00:34:34,676 --> 00:34:38,005
And namely, those are the
instantiated instant delegate


673
00:34:38,076 --> 00:34:42,216
object and the NSOperationQueue
object that we created.


674
00:34:42,746 --> 00:34:45,956
So now we can actually
do some work.


675
00:34:45,956 --> 00:34:47,766
We create a task
with our session.


676
00:34:47,766 --> 00:34:50,866
And what do we want
our task to do?


677
00:34:50,866 --> 00:34:53,596
Well, let's just simply load
this server's root Web page.


678
00:34:54,076 --> 00:34:56,906
And here I'm using,
again, the dataTask method.


679
00:34:57,526 --> 00:35:00,936
And this requires a
closure as a parameter.


680
00:35:01,856 --> 00:35:04,116
Now, note with this closure


681
00:35:04,116 --> 00:35:06,506
that our
didFinishCollectingMetrics


682
00:35:06,506 --> 00:35:10,626
delegate callback will be
called first and called before


683
00:35:10,926 --> 00:35:12,626
that closure is invoked.


684
00:35:13,626 --> 00:35:18,196
So, oh, and also, don't forget
your good old task.Resume.


685
00:35:18,326 --> 00:35:19,736
Got to make sure
you resume that task


686
00:35:19,736 --> 00:35:21,526
so that the work can
actually execute.


687
00:35:21,866 --> 00:35:24,746
Now, this is an overly
simply review of how


688
00:35:24,746 --> 00:35:27,356
to implement
networkStatisticDelegate


689
00:35:27,356 --> 00:35:30,356
callback and the code
needed to make it work.


690
00:35:30,736 --> 00:35:31,646
I'm sure that you guys are going


691
00:35:31,646 --> 00:35:34,636
to do much more interesting
things and be much more creative


692
00:35:34,636 --> 00:35:37,576
with your use of Network
Statistics that I've been here.


693
00:35:38,166 --> 00:35:42,026
Now, I hope you like what you've
seen with Network Statistics.


694
00:35:42,026 --> 00:35:42,826
What do you think of those?


695
00:35:43,016 --> 00:35:44,526
[ Applause ]


696
00:35:44,526 --> 00:35:44,876
All right.


697
00:35:47,696 --> 00:35:51,266
Now you can access information
about what's really happening


698
00:35:51,266 --> 00:35:54,306
under the hood with your
network transactions.


699
00:35:55,096 --> 00:35:58,646
This will help you in your
debugging and development


700
00:35:58,826 --> 00:36:00,456
to be able to get, you
know, fix your apps


701
00:36:00,456 --> 00:36:03,136
and make your apps work
the best that they can be.


702
00:36:03,406 --> 00:36:07,326
And tune, really tune the Web
services and the types of apps


703
00:36:07,326 --> 00:36:08,556
that you're making so
that they will work


704
00:36:08,556 --> 00:36:09,706
in the most optimal way.


705
00:36:09,796 --> 00:36:14,996
And again, this new feature is
available in NSURLSession APIs.


706
00:36:14,996 --> 00:36:17,876
It's a great time to
be using NSURLSession.


707
00:36:18,026 --> 00:36:22,706
Now, in the final
section I'm going


708
00:36:22,706 --> 00:36:24,926
to discuss a topic that's
critical to everybody.


709
00:36:24,926 --> 00:36:27,196
And now, as developers,


710
00:36:27,356 --> 00:36:30,906
we all care about guarding
the privacy of user data.


711
00:36:31,506 --> 00:36:34,496
The NSURLSession API
has some great built-in


712
00:36:34,496 --> 00:36:35,376
security features.


713
00:36:35,376 --> 00:36:37,286
And I want to share with you
just a few enhancements we've


714
00:36:37,286 --> 00:36:38,986
made to these features.


715
00:36:40,376 --> 00:36:43,156
Transport Layer Security,
or TLS, is a protocol


716
00:36:43,156 --> 00:36:47,506
that protects data transmitted
by endpoints over a network.


717
00:36:47,506 --> 00:36:49,566
So sometimes you've
heard the term SSL.


718
00:36:49,866 --> 00:36:51,526
This was the predecessor to TLS.


719
00:36:51,526 --> 00:36:54,606
So, TLS and SSL are sometimes
used interchangeably.


720
00:36:55,226 --> 00:36:58,996
TLS makes use of ciphers
to achieve this protection.


721
00:36:59,096 --> 00:37:01,226
Ciphers scramble
data on one side --


722
00:37:01,536 --> 00:37:03,666
scramble data sent
over the network.


723
00:37:04,036 --> 00:37:06,496
And the other receiving
side uses the same cipher


724
00:37:06,496 --> 00:37:09,556
to unscramble that data so that
it can use and understand it.


725
00:37:09,556 --> 00:37:12,846
If somebody were to grab
that data in the middle,


726
00:37:12,846 --> 00:37:14,856
it's just big glob of blah.


727
00:37:14,856 --> 00:37:15,556
They can't use it.


728
00:37:15,556 --> 00:37:16,646
So it protects the data.


729
00:37:17,666 --> 00:37:19,916
Now, one of the things
that has changed,


730
00:37:19,916 --> 00:37:21,266
and I want to make you aware of,


731
00:37:21,266 --> 00:37:26,366
is that Apple's platforms no
longer support the RC4 cipher.


732
00:37:27,386 --> 00:37:32,236
So for more details, I recommend
that you take a look at,


733
00:37:32,396 --> 00:37:35,606
review the security sessions
that occurred on Tuesday.


734
00:37:36,096 --> 00:37:37,976
Possibly attend one
of their labs


735
00:37:37,976 --> 00:37:39,036
and ask some questions there


736
00:37:39,036 --> 00:37:40,606
for a little bit
more detail on that.


737
00:37:41,256 --> 00:37:44,036
So, what this means to
your applications, however,


738
00:37:44,036 --> 00:37:45,986
is that connections
that you used


739
00:37:45,986 --> 00:37:49,626
to make successfully could
possibly fail suddenly.


740
00:37:50,006 --> 00:37:51,656
And this could be due to servers


741
00:37:51,656 --> 00:37:54,596
that are supporting
only the RC4 cipher.


742
00:37:55,186 --> 00:37:58,036
Now, we have a way that you can
kind of test this theory out.


743
00:37:59,316 --> 00:38:02,786
There is a command line
tool on macOS called nscurl.


744
00:38:02,786 --> 00:38:07,236
And this could be used to test
for RC4-only ciphers on servers


745
00:38:07,236 --> 00:38:08,746
that your apps communicate with.


746
00:38:09,316 --> 00:38:12,626
Now, here I'm going
to use nscurl simply


747
00:38:12,626 --> 00:38:15,556
to grab the root
document of this server.


748
00:38:15,986 --> 00:38:18,826
So if I execute this
command -- whoa!


749
00:38:18,826 --> 00:38:22,046
I see that, hey, the
HTTP Load failed.


750
00:38:22,246 --> 00:38:22,876
Hmm. That's funny.


751
00:38:22,876 --> 00:38:24,406
I used to be able to
connect that server.


752
00:38:24,796 --> 00:38:28,196
Let's find out if our theory
about RC4 is true or not.


753
00:38:29,616 --> 00:38:33,666
Here I've added a flag to
nscurl called enable-rc4.


754
00:38:33,786 --> 00:38:37,626
And that means that I am
going to force the use of RC4


755
00:38:37,756 --> 00:38:39,516
on the client's side
of the connection.


756
00:38:39,916 --> 00:38:40,736
So I run this.


757
00:38:41,416 --> 00:38:43,376
Wow! This worked
all of a sudden.


758
00:38:43,376 --> 00:38:46,296
So this proves to me that this
server is only supporting RC4.


759
00:38:46,346 --> 00:38:49,376
I'm going to have to go have
a talk with that server admin


760
00:38:49,736 --> 00:38:52,636
and figure out what could we
do to get some secure ciphers


761
00:38:52,636 --> 00:38:56,036
onto that server so we
can protect our user data


762
00:38:56,036 --> 00:38:57,166
within our application.


763
00:38:57,166 --> 00:38:58,556
So I hope you get
the point here.


764
00:38:59,056 --> 00:39:01,976
The RC4 cipher is no longer
supported on our platforms.


765
00:39:01,976 --> 00:39:03,686
And this could affect
your applications.


766
00:39:03,686 --> 00:39:05,226
So just be aware of that.


767
00:39:06,166 --> 00:39:08,266
App Transport Security, or ATS.


768
00:39:08,266 --> 00:39:09,946
This is a great security
feature.


769
00:39:09,946 --> 00:39:13,206
It allows you to set the policy,
security policies for your app.


770
00:39:13,206 --> 00:39:15,516
You specify keys that
grant entitlements.


771
00:39:15,976 --> 00:39:18,496
And these become your
policies for your applications.


772
00:39:18,496 --> 00:39:20,826
Now, we've added two new keys
that I want to share with you.


773
00:39:21,686 --> 00:39:24,806
The first one is
NSAllowsArbitraryLoadsIn


774
00:39:24,806 --> 00:39:25,726
WebContent.


775
00:39:26,066 --> 00:39:30,876
So, if you have a WK Web
view and have scoped only


776
00:39:30,876 --> 00:39:34,466
to that class, if you have
that class in your application


777
00:39:34,466 --> 00:39:37,616
and you have this key present,
that object will be allowed


778
00:39:37,616 --> 00:39:40,326
to make any sort of network
loads that you have specified.


779
00:39:40,326 --> 00:39:43,226
It'll ignore whatever other
policy you have in your app.


780
00:39:43,566 --> 00:39:45,716
But again, that's contained
only to that one object.


781
00:39:45,716 --> 00:39:48,456
Any loads outside of
that object will conform


782
00:39:48,776 --> 00:39:50,256
to your security policy.


783
00:39:52,436 --> 00:39:56,396
The other value we have
is NSRequiresCertificate


784
00:39:56,396 --> 00:39:57,336
Transparency.


785
00:39:57,766 --> 00:39:59,366
Now, this requires that certs


786
00:39:59,796 --> 00:40:03,366
that your app receives must
support these certificate


787
00:40:03,366 --> 00:40:05,166
transparency feature.


788
00:40:05,636 --> 00:40:09,286
Certificate Transparency is
a feature of signedCerts.


789
00:40:09,646 --> 00:40:12,496
This allows you to use
a provided certificate


790
00:40:12,496 --> 00:40:15,866
with greater assurance that
the certificate is legitimate.


791
00:40:15,866 --> 00:40:17,746
And that you can
trust the endpoint


792
00:40:17,746 --> 00:40:19,066
that gave you that certificate.


793
00:40:19,636 --> 00:40:23,826
For more details on that
particular subject, again,


794
00:40:23,826 --> 00:40:26,366
recommend that you take a look
at these security sessions


795
00:40:26,366 --> 00:40:29,046
or attend one of their
labs to get more details


796
00:40:29,046 --> 00:40:30,846
on Certificate Transparency.


797
00:40:31,456 --> 00:40:34,446
Everything that I've discussed
relates to the NSURLSession API.


798
00:40:35,176 --> 00:40:37,086
We've seen this API evolve


799
00:40:37,606 --> 00:40:39,186
with new features
that have been added.


800
00:40:39,476 --> 00:40:42,106
And we're really excited to see
what you guys are going to do


801
00:40:42,106 --> 00:40:44,476
with your applications as
you take advantage of some


802
00:40:44,476 --> 00:40:45,646
of these great new features.


803
00:40:46,546 --> 00:40:51,046
I introduced support for the
HTTP/2 Server Push feature.


804
00:40:51,696 --> 00:40:53,716
This means that your
apps are going to be able


805
00:40:53,716 --> 00:40:54,956
to perform even better.


806
00:40:56,536 --> 00:40:58,826
I introduced Network Statistics.


807
00:40:59,456 --> 00:41:02,596
Now you can introspect your
application network behavior


808
00:41:02,596 --> 00:41:03,936
like never before.


809
00:41:04,386 --> 00:41:07,316
This will result in an
improved end user experience


810
00:41:07,426 --> 00:41:08,836
for your applications.


811
00:41:09,786 --> 00:41:13,626
I shared with you some
security-related features in ATS


812
00:41:13,626 --> 00:41:15,786
and the deprecation
of the RC4 cipher.


813
00:41:16,286 --> 00:41:19,456
Your apps can now implement
best security practices


814
00:41:19,456 --> 00:41:22,726
and keep your user data
safe and protected.


815
00:41:22,726 --> 00:41:27,046
Now, we hope that you
will use NSURLSession


816
00:41:27,046 --> 00:41:30,056
in your applications for
not just these reasons,


817
00:41:30,056 --> 00:41:31,346
but for all the great features


818
00:41:31,346 --> 00:41:33,276
that are inside of
NSURLSession API.


819
00:41:35,076 --> 00:41:36,856
If you want more information,


820
00:41:36,856 --> 00:41:38,876
this is the URL for
this session.


821
00:41:38,876 --> 00:41:40,126
So you can go back
and review some


822
00:41:40,126 --> 00:41:41,366
of the things we
discussed today.


823
00:41:42,756 --> 00:41:45,466
Some related sessions we think
that you will be interested


824
00:41:45,466 --> 00:41:48,486
in on this subject I've
got listed up here for you.


825
00:41:49,436 --> 00:41:50,186
Well, that's it.


826
00:41:50,186 --> 00:41:50,666
Thank you.


827
00:41:50,666 --> 00:41:52,956
Hope you have a great
rest of the WWDC.


828
00:41:53,506 --> 00:41:53,856
Thank you.


829
00:41:54,508 --> 00:41:56,508
[ Applause ]

