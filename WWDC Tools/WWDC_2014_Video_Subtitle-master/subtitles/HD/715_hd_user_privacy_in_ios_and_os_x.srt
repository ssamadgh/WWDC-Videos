1
00:00:00,506 --> 00:00:10,516
[ Silence ]


2
00:00:11,016 --> 00:00:19,000
[ Applause ]


3
00:00:19,656 --> 00:00:20,516
>> Good afternoon.


4
00:00:20,676 --> 00:00:22,616
My name is Katie
Skinner and I work


5
00:00:22,616 --> 00:00:24,436
at Apple Product
Security and Privacy.


6
00:00:24,906 --> 00:00:28,756
That means I work with teams
all across Apple on user privacy


7
00:00:28,756 --> 00:00:29,936
and protecting our users.


8
00:00:30,446 --> 00:00:34,696
This includes our
platforms like iOS, Siri,


9
00:00:34,846 --> 00:00:36,386
and applications like iPhoto.


10
00:00:37,366 --> 00:00:40,586
Today, in this session, David
Stites and I are going to talk


11
00:00:40,586 --> 00:00:45,336
about ways you can protect your
users' privacy and changes made


12
00:00:45,336 --> 00:00:48,306
to the Apple ecosystem
to improve user privacy.


13
00:00:50,656 --> 00:00:51,486
Thank you.


14
00:00:51,656 --> 00:00:57,756
So, we're going to start
out talking about privacy


15
00:00:57,756 --> 00:01:00,996
and reputation, identifiers
in iOS,


16
00:01:00,996 --> 00:01:07,436
how to prompt your users well,
new classes for data isolation,


17
00:01:07,846 --> 00:01:09,576
and some privacy best practices.


18
00:01:10,266 --> 00:01:18,426
So, privacy and reputation: your
users are so important to you.


19
00:01:18,616 --> 00:01:19,726
They're the key to your success.


20
00:01:21,486 --> 00:01:23,376
So maintaining your relationship


21
00:01:23,376 --> 00:01:25,676
with them is your
most important thing.


22
00:01:26,826 --> 00:01:28,936
They're the people
who download your app,


23
00:01:28,936 --> 00:01:31,356
tell their friends
how great it is,


24
00:01:31,386 --> 00:01:33,526
don't think twice
before uploading photos,


25
00:01:34,146 --> 00:01:36,006
or granting you access
to contents.


26
00:01:36,616 --> 00:01:38,796
Or alternately, those
are the users


27
00:01:38,796 --> 00:01:43,736
who will uninstall your
application, or think twice


28
00:01:43,736 --> 00:01:46,036
about using location with you.


29
00:01:47,166 --> 00:01:51,976
So, privacy and how you protect
your users' data is a big part


30
00:01:51,976 --> 00:01:52,706
of this.


31
00:01:54,226 --> 00:01:57,316
Lately there's been an appetite
in the media for stories


32
00:01:57,316 --> 00:01:59,816
about privacy, from
large stories


33
00:01:59,816 --> 00:02:01,926
like Target, to smaller ones.


34
00:02:02,206 --> 00:02:04,436
But, they continue to
appear over and over again.


35
00:02:05,266 --> 00:02:08,356
The best bet is to be
trustworthy with your users,


36
00:02:09,276 --> 00:02:11,706
because rebuilding
user trust is hard.


37
00:02:12,016 --> 00:02:15,496
It's much more difficult than
maintaining your users' trust.


38
00:02:15,826 --> 00:02:21,166
Now, I'm going to talk about the
identifiers available in iOS.


39
00:02:21,726 --> 00:02:24,116
There are three purpose-scoped
identifiers.


40
00:02:25,196 --> 00:02:30,786
The first one is the application
identifier, NSUUID UUID.


41
00:02:31,816 --> 00:02:33,906
The second one is the
vendor identifier,


42
00:02:34,896 --> 00:02:38,396
UIDevice currentDevice,
identifierForVendor.


43
00:02:39,196 --> 00:02:41,686
The third one, advertising
identifier,


44
00:02:42,196 --> 00:02:45,876
UIDevice currentDevice
identifierForAdvertising.


45
00:02:46,446 --> 00:02:50,986
Now, I'm not going to talk about
these in a lot of detail today.


46
00:02:51,326 --> 00:02:54,856
Last year, we talked about
them, how to use them,


47
00:02:55,126 --> 00:02:56,836
their behavior, lifetime.


48
00:02:57,066 --> 00:02:59,736
So, if you're new to the
platform, you should go and look


49
00:02:59,736 --> 00:03:03,186
at "Protecting User's
Privacy" from last year's WWDC.


50
00:03:03,246 --> 00:03:05,236
It's a great place to start.


51
00:03:06,176 --> 00:03:08,776
Now, this is a great
reference slide to look


52
00:03:08,776 --> 00:03:11,586
at when you're thinking
about which identifier to use


53
00:03:11,586 --> 00:03:12,796
for a particular use-case.


54
00:03:12,926 --> 00:03:14,876
I'm going to pull
out a couple points.


55
00:03:16,076 --> 00:03:17,956
The application identifier
is used


56
00:03:17,956 --> 00:03:21,706
to identify something
uniquely within a single app.


57
00:03:22,476 --> 00:03:24,606
The vendor identifier
can be used


58
00:03:24,606 --> 00:03:28,116
across multiple applications
and it's all in the same device


59
00:03:28,416 --> 00:03:30,346
with the same team ID.


60
00:03:30,676 --> 00:03:34,356
Now, the application identifier
you need to manage yourself,


61
00:03:35,406 --> 00:03:38,366
but the vendor identifier
iOS will manage for you.


62
00:03:39,326 --> 00:03:42,166
The advertising identifier
should be used


63
00:03:42,166 --> 00:03:44,746
for all user tracking
for advertising,


64
00:03:44,746 --> 00:03:46,156
or related to advertising.


65
00:03:46,686 --> 00:03:52,306
Now, there's been a lot
of discussion about how


66
00:03:52,306 --> 00:03:54,016
to use the advertising
identifier -


67
00:03:54,016 --> 00:03:55,666
what are the supported
use-cases?


68
00:03:56,286 --> 00:03:58,946
But, before we get into that
I want to allay one point


69
00:03:58,946 --> 00:04:01,626
with you guys, is be
clear with your users


70
00:04:02,006 --> 00:04:03,846
about how you advertise,


71
00:04:04,096 --> 00:04:06,816
especially if you're using
their user data as part


72
00:04:06,816 --> 00:04:08,256
of your advertising practices.


73
00:04:09,616 --> 00:04:12,346
You should not cache the
advertising identifier.


74
00:04:12,756 --> 00:04:14,586
You need to respect
a user's ability


75
00:04:14,586 --> 00:04:16,245
to reset this identifier.


76
00:04:17,106 --> 00:04:19,565
They can reset it under
Settings, Privacy,


77
00:04:19,696 --> 00:04:24,206
Advertising using the Reset
Advertising ID button.


78
00:04:25,516 --> 00:04:27,736
Also this year, for
TestFlight apps,


79
00:04:28,066 --> 00:04:31,676
the advertising identifier will
be different each time you call


80
00:04:31,676 --> 00:04:32,086
the API.


81
00:04:32,926 --> 00:04:34,726
This is another reason
why you shouldn't count


82
00:04:34,726 --> 00:04:37,646
on the advertising identifier
to be a stable value.


83
00:04:38,196 --> 00:04:44,146
In iOS we've given users a
choice about how they want


84
00:04:44,146 --> 00:04:45,476
to be served advertising


85
00:04:45,926 --> 00:04:48,346
and that really comes
back to Limit Ad Tracking.


86
00:04:52,376 --> 00:04:55,136
Before using the advertising
identifier you need


87
00:04:55,136 --> 00:04:57,446
to check the value
of Limit Ad Tracking.


88
00:04:57,796 --> 00:05:01,346
This is ASIdentifierManager
sharedManager


89
00:05:01,346 --> 00:05:03,396
advertisingTrackingEnabled.


90
00:05:05,336 --> 00:05:08,916
Note, this may be controlled --


91
00:05:08,916 --> 00:05:10,576
this can be controlled
by restrictions,


92
00:05:11,176 --> 00:05:14,386
and with Family Sharing this
year this may affect more


93
00:05:14,386 --> 00:05:15,116
of your users.


94
00:05:15,756 --> 00:05:19,306
Even if you, yourself,
are not writing the code


95
00:05:19,516 --> 00:05:21,216
to handle the advertising
identifier


96
00:05:21,466 --> 00:05:24,176
and you're using a third
party advertising library,


97
00:05:24,506 --> 00:05:28,066
you need to ensure that that
library is also checking Limit


98
00:05:28,136 --> 00:05:31,056
Ad Tracking before using
the advertising identifier.


99
00:05:31,576 --> 00:05:36,626
When advertisingTracking
Enabled is set to No,


100
00:05:37,096 --> 00:05:40,886
the advertising identifier
is not permitted to be used


101
00:05:41,196 --> 00:05:45,456
to collect data for, or to
serve, targeted advertising.


102
00:05:45,936 --> 00:05:51,496
You can use it only for
the purposes enumerated


103
00:05:51,496 --> 00:05:54,136
in the iOS Program
License Agreement.


104
00:05:54,616 --> 00:05:58,086
This includes frequency
capping, conversion events,


105
00:05:58,976 --> 00:06:03,566
fraud detection for advertising,
and debugging for advertising.


106
00:06:03,896 --> 00:06:05,536
Note, for fraud detection


107
00:06:05,536 --> 00:06:07,986
and debugging this
can only be used -


108
00:06:08,066 --> 00:06:10,586
not for all fraud detection,
not for all debugging -


109
00:06:10,716 --> 00:06:12,846
only debugging advertising
issues.


110
00:06:15,916 --> 00:06:19,416
This year in iTunes Connect,
now you need to explain


111
00:06:19,926 --> 00:06:22,886
and attribute why you're using
the advertising identifier


112
00:06:22,886 --> 00:06:24,226
for which of these uses.


113
00:06:24,956 --> 00:06:27,076
You should select one,
two, or three depending


114
00:06:27,076 --> 00:06:29,506
on how you use the
advertising identifier.


115
00:06:30,366 --> 00:06:34,176
The first one's pretty
clear: serve advertisements.


116
00:06:34,756 --> 00:06:37,876
The second one: attribute
app installation,


117
00:06:38,146 --> 00:06:41,396
now once a user installs
your application,


118
00:06:41,556 --> 00:06:44,186
this means attributing
that installation


119
00:06:44,406 --> 00:06:46,316
to an advertisement
they may have seen


120
00:06:46,496 --> 00:06:48,356
in a different application.


121
00:06:48,916 --> 00:06:52,256
The last one: attribute
an action.


122
00:06:52,256 --> 00:06:55,736
This could be Coins Bot or
any other in-app purchase.


123
00:06:56,996 --> 00:07:00,386
Attribute that action taken to a
previously served advertisement,


124
00:07:00,386 --> 00:07:05,046
either within your app
or another application.


125
00:07:06,936 --> 00:07:09,776
Now, here's where you go


126
00:07:09,776 --> 00:07:11,726
and make these choices
in iTunes Connect.


127
00:07:11,726 --> 00:07:15,356
You can see the first thing that
you do is say, "Are you going


128
00:07:15,356 --> 00:07:17,406
to use the advertising
identifier, or not?"


129
00:07:18,216 --> 00:07:21,556
Then, select which of the three
choices, or more than one,


130
00:07:21,696 --> 00:07:24,146
that you'll be using the
advertising identifier for.


131
00:07:24,726 --> 00:07:26,716
And then, lastly, you must say


132
00:07:26,716 --> 00:07:29,606
that you will check Limit
Ad Tracking before using the


133
00:07:29,606 --> 00:07:30,786
advertising identifier.


134
00:07:31,136 --> 00:07:37,856
Now, I'm going to talk about a
couple changes coming to iOS 8


135
00:07:37,926 --> 00:07:41,086
and OS X Yosemite that
are privacy-related.


136
00:07:41,656 --> 00:07:45,996
The first one's Family Sharing.


137
00:07:46,906 --> 00:07:50,186
This means that this year
there'll be an increased number


138
00:07:50,186 --> 00:07:53,096
of child accounts within
the Apple ecosystem.


139
00:07:55,056 --> 00:07:58,376
There's a great talk by Chris
Espinosa right after ours


140
00:07:58,376 --> 00:08:00,446
that will go further
into the implications


141
00:08:00,446 --> 00:08:03,066
that you should be thinking
about as a result of this,


142
00:08:03,356 --> 00:08:05,596
so I would encourage everyone
to stick around after our talk


143
00:08:05,596 --> 00:08:06,746
to hear "Kids and Apps".


144
00:08:07,556 --> 00:08:10,276
He'll talk a little bit
more about the relevant laws


145
00:08:10,356 --> 00:08:13,076
like COPPA to be
thinking about for this;


146
00:08:13,416 --> 00:08:19,436
for the additional number
of children on this system.


147
00:08:19,436 --> 00:08:22,646
So, here's the talk,
right in here.


148
00:08:22,846 --> 00:08:26,316
In iOS 8 the Mac address
during probe requests


149
00:08:26,816 --> 00:08:29,436
and probe responses, as
well as region monitoring,


150
00:08:29,586 --> 00:08:32,246
will be locally administrated
and random.


151
00:08:33,336 --> 00:08:36,376
This means if you
interact or design a piece


152
00:08:36,376 --> 00:08:38,525
of external hardware,
you should not count


153
00:08:38,686 --> 00:08:41,616
on a stable Mac address
until after authentication.


154
00:08:42,936 --> 00:08:44,436
Go test some iOS 8


155
00:08:44,436 --> 00:08:46,616
and understand the impact
this may have for you.


156
00:08:47,116 --> 00:08:51,506
This year in Safari
there's a new setting.


157
00:08:51,976 --> 00:08:54,806
This will allow users to
block third party cookies


158
00:08:54,976 --> 00:08:59,446
and it is available
both on iOS and OS X.


159
00:08:59,746 --> 00:09:02,386
Now, I assume most of
you, if not all of you,


160
00:09:02,386 --> 00:09:04,226
in the audience have
a web presence,


161
00:09:04,596 --> 00:09:07,726
even if it's only a website
that points and has a link


162
00:09:07,726 --> 00:09:09,906
to the App Store, you
have a web presence.


163
00:09:10,166 --> 00:09:13,546
So, go on iOS, enable
this setting,


164
00:09:13,546 --> 00:09:14,676
and visit your web presence.


165
00:09:14,786 --> 00:09:18,056
Understand the impact that this
will have on you and ensure


166
00:09:18,236 --> 00:09:20,686
that your users will still be
able to do the things they need


167
00:09:20,686 --> 00:09:25,826
to do on your website; go to the
App Store, FAQ, whatever it is.


168
00:09:26,936 --> 00:09:29,606
Here you can see where you
can go and find this setting.


169
00:09:29,926 --> 00:09:32,586
On iOS it's under
Settings, Safari,


170
00:09:32,816 --> 00:09:34,736
in the Privacy and
Security Section.


171
00:09:35,956 --> 00:09:38,986
On OS X you can find this


172
00:09:39,276 --> 00:09:42,266
under Safari Preferences
on the Privacy tab.


173
00:09:42,606 --> 00:09:44,866
Note, this setting
is not on by default


174
00:09:45,106 --> 00:09:47,206
but this is a choice
that users can make.


175
00:09:50,896 --> 00:09:54,816
Also in iOS, we've now
given the ability for you


176
00:09:54,816 --> 00:09:56,666
to utilize the People Picker


177
00:09:56,846 --> 00:09:59,656
without requesting
Contacts access


178
00:09:59,656 --> 00:10:01,696
to the full address
book from your users.


179
00:10:02,056 --> 00:10:03,366
This is a great win for apps


180
00:10:03,366 --> 00:10:04,886
that don't need the
whole address book,


181
00:10:05,606 --> 00:10:08,186
that maybe only you
need to send an invite


182
00:10:08,186 --> 00:10:10,406
to one person you're
going to share every


183
00:10:10,406 --> 00:10:12,036
so often with a single user.


184
00:10:12,796 --> 00:10:15,856
But, note, this will
provide only a static --


185
00:10:16,256 --> 00:10:17,306
static information.


186
00:10:17,306 --> 00:10:21,946
If the user then, later,
goes and decides to change


187
00:10:22,046 --> 00:10:24,376
or update this contact
you will not receive any


188
00:10:24,376 --> 00:10:25,436
of that information.


189
00:10:25,946 --> 00:10:31,966
In a future seed, some of the
iOS 7 delegate methods are going


190
00:10:31,966 --> 00:10:35,716
to be deprecated, so you
need to update and migrate


191
00:10:35,716 --> 00:10:37,386
if you're currently
using the People Picker.


192
00:10:38,176 --> 00:10:41,356
We have a great sample code
project for you to go and check


193
00:10:41,356 --> 00:10:44,456
out and see how to
implement on iOS 8.


194
00:10:44,456 --> 00:10:49,136
These are the delegate methods
that will be deprecated:


195
00:10:49,326 --> 00:10:52,166
ABPeoplePicker
NavigationController Delegate


196
00:10:52,566 --> 00:10:54,316
peoplePicker
NavigationController


197
00:10:54,496 --> 00:10:56,596
shouldContinueAfterSelecting
Person


198
00:10:56,966 --> 00:10:59,006
and shouldContinue
AfterSelectingPerson


199
00:10:59,226 --> 00:11:00,426
:property:identifier.


200
00:11:02,376 --> 00:11:05,346
And, we also have some new
properties and delegates


201
00:11:05,346 --> 00:11:09,326
in iOS 8; ABPeoplePicker
NavigationController


202
00:11:09,326 --> 00:11:15,176
.predicateForEnablingPerson,
predicateFor SelectionOfPerson,


203
00:11:15,336 --> 00:11:17,466
and predicateFor
SelectionOfProperty.


204
00:11:18,026 --> 00:11:20,806
And then new delegates
are ABPeoplePicker


205
00:11:21,556 --> 00:11:24,306
NaviagionControllerDelegate
peoplePicker


206
00:11:24,306 --> 00:11:26,706
NavigationController
:didSelectPerson


207
00:11:27,046 --> 00:11:29,676
and didSelectPerson
:property :identifier.


208
00:11:30,146 --> 00:11:32,146
So, go and update,
and migrate early.


209
00:11:32,146 --> 00:11:37,736
Now, I've gone through several
different privacy changes


210
00:11:37,736 --> 00:11:40,466
and what I want to encourage
everyone here to do is,


211
00:11:40,466 --> 00:11:42,936
if they're not already
have a device on iOS 8


212
00:11:43,196 --> 00:11:45,156
and OS X Yosemite, update now.


213
00:11:45,876 --> 00:11:48,196
Understand the impact these
changes will have on you


214
00:11:48,196 --> 00:11:51,566
because you have a great
experience for your users today,


215
00:11:51,566 --> 00:11:54,646
and you don't want to mess it
up as they move and migrate


216
00:11:54,856 --> 00:11:57,116
to iOS 8; keep a
consistent great experience.


217
00:11:58,436 --> 00:12:00,086
Now, I'm going to
hand it over to David,


218
00:12:00,086 --> 00:12:02,576
who's going to talk more
about the keys to prompting


219
00:12:02,576 --> 00:12:05,546
with purpose and how to
be successful at that.


220
00:12:07,516 --> 00:12:11,626
[ Applause ]


221
00:12:12,126 --> 00:12:13,366
>> Thank you, and
good afternoon.


222
00:12:13,716 --> 00:12:15,586
As Katie mentioned, I'm
going to talk to you


223
00:12:15,586 --> 00:12:19,456
about both prompting your users
with purpose and then dive


224
00:12:19,456 --> 00:12:25,636
into data isolation, and how
it works on both iOS and OS X.


225
00:12:26,356 --> 00:12:27,426
Prompting with purpose,


226
00:12:27,546 --> 00:12:30,656
means designing the experience
your users will receive


227
00:12:30,706 --> 00:12:32,736
when they're confronted
with a privacy dialog.


228
00:12:32,736 --> 00:12:36,826
There are five core
principles that form the basis


229
00:12:36,926 --> 00:12:41,536
for prompting with purpose:
consent, transparency, context,


230
00:12:42,046 --> 00:12:44,526
clarity, and minimization,
and we'll talk


231
00:12:44,526 --> 00:12:46,586
about all of those coming up.


232
00:12:47,386 --> 00:12:50,336
The first principle is consent.


233
00:12:51,016 --> 00:12:53,466
Consent is getting
your user's approval


234
00:12:53,466 --> 00:12:54,836
to access their user data.


235
00:12:55,006 --> 00:12:56,646
This should already
be familiar to you.


236
00:12:57,246 --> 00:12:59,836
The model that Apple has
chosen to adopt is the Just


237
00:12:59,836 --> 00:13:03,026
in Time model, meaning that
consent is only presented


238
00:13:03,026 --> 00:13:06,286
to the user at the exact
time that the access occurs.


239
00:13:07,396 --> 00:13:10,706
We think that Just in Time
access is a key-differentiating


240
00:13:10,706 --> 00:13:12,006
feature of our platform.


241
00:13:12,246 --> 00:13:14,496
If the user decides
to allow access,


242
00:13:14,496 --> 00:13:15,486
then you'll get data back.


243
00:13:15,856 --> 00:13:18,756
And, if they decide not to allow
access, you won't get anything.


244
00:13:20,696 --> 00:13:23,356
Transparency, is the
second principle.


245
00:13:24,126 --> 00:13:26,386
Transparency is complementary
to consent


246
00:13:26,746 --> 00:13:28,106
in that it answers the question


247
00:13:28,106 --> 00:13:30,746
of why an app needs
access to user data.


248
00:13:31,886 --> 00:13:34,766
Apps are given a dedicated
space to tell users,


249
00:13:34,766 --> 00:13:35,786
called a purpose string.


250
00:13:36,276 --> 00:13:38,266
And purpose strings
are as an apps chance


251
00:13:38,266 --> 00:13:41,706
to explain the proposition
value of allowing that access.


252
00:13:41,856 --> 00:13:44,926
If the user understands that
there might be more willing


253
00:13:44,926 --> 00:13:46,616
to allow your application
access.


254
00:13:46,946 --> 00:13:49,586
In this example, Calendar
wants to use Location


255
00:13:49,586 --> 00:13:52,376
to estimate travel times and
improve location searches.


256
00:13:52,936 --> 00:13:58,226
The third principle is context.


257
00:13:58,906 --> 00:14:02,676
Context is making it clear
to your users what action led


258
00:14:02,676 --> 00:14:03,906
to the consent dialog.


259
00:14:04,536 --> 00:14:05,676
Consider this example.


260
00:14:06,486 --> 00:14:09,626
Here we have the App Store,
and, when the user goes


261
00:14:09,626 --> 00:14:12,416
to the Near Me tab and
taps the Show Popular


262
00:14:12,416 --> 00:14:15,596
and Near Me link
they're presented


263
00:14:15,596 --> 00:14:18,906
with this dialog saying the app
would like to use their location


264
00:14:19,366 --> 00:14:21,456
to find relevant apps near them.


265
00:14:22,986 --> 00:14:27,816
Contrast this with a conga line
of alerts that are presented


266
00:14:27,816 --> 00:14:30,726
to the user right when the
application first opens,


267
00:14:31,076 --> 00:14:32,656
not a great user experience.


268
00:14:33,196 --> 00:14:36,086
Conga lines don't work
because they're not presented


269
00:14:36,086 --> 00:14:38,326
at the correct time,
so make sure you choose


270
00:14:38,326 --> 00:14:41,936
to present yours at
the correct time.


271
00:14:42,776 --> 00:14:45,976
The fourth principle is clarity.


272
00:14:46,666 --> 00:14:49,506
Clarity is distilling the
purpose of your request


273
00:14:49,506 --> 00:14:52,686
down to its essence because it
helps users build clear mental


274
00:14:52,686 --> 00:14:56,116
models about what you're going
to do with their user data.


275
00:14:56,276 --> 00:14:56,966
You can think of this


276
00:14:56,996 --> 00:14:59,876
as improving the why,
and when, and where.


277
00:15:00,716 --> 00:15:03,786
Give the user a guide
of what they can expect


278
00:15:03,786 --> 00:15:04,876
from your application.


279
00:15:05,186 --> 00:15:07,756
Be concise, but include
sufficient detail.


280
00:15:08,306 --> 00:15:10,916
In this example, Reminders
clearly states what its using


281
00:15:10,916 --> 00:15:11,696
Location for.


282
00:15:13,916 --> 00:15:17,036
The last and fifth
principle is minimization,


283
00:15:17,106 --> 00:15:18,446
and this one's super simple


284
00:15:18,836 --> 00:15:21,236
because it's exactly
what it sounds like.


285
00:15:21,446 --> 00:15:24,866
If you don't need access to that
data, then you shouldn't ask.


286
00:15:25,416 --> 00:15:31,106
Scared users are more
likely to tap Don't Allow.


287
00:15:31,986 --> 00:15:34,966
All of the consent dialogs
support a purpose string,


288
00:15:35,686 --> 00:15:37,546
and their use is
highly encouraged


289
00:15:37,586 --> 00:15:39,306
because it makes what
you're going to do


290
00:15:39,306 --> 00:15:41,646
with the user data,
very transparent.


291
00:15:42,996 --> 00:15:46,426
All of the data classes
support one purpose string,


292
00:15:46,566 --> 00:15:50,076
except for Location Services
in iOS 8, which supports two,


293
00:15:50,076 --> 00:15:52,386
and we'll talk about
that coming up.


294
00:15:52,656 --> 00:15:54,156
You can set these
purpose strings


295
00:15:54,186 --> 00:15:56,086
in your application's
info.plist.


296
00:15:56,476 --> 00:15:58,836
And for those of you who
localize your applications,


297
00:15:59,056 --> 00:16:00,716
you can set the localized
versions


298
00:16:00,866 --> 00:16:02,526
in Localizeable.strings.


299
00:16:03,286 --> 00:16:07,956
What you need to do is
you need to go to X code,


300
00:16:08,146 --> 00:16:11,226
select your target,
select the info.plist,


301
00:16:12,156 --> 00:16:13,976
and then fill out the strings.


302
00:16:14,596 --> 00:16:17,606
You should look for the
privacy-data class keys.


303
00:16:18,236 --> 00:16:22,706
Now, X code is simply a
front-end to the info.plist so,


304
00:16:22,706 --> 00:16:25,716
if you want to, you can always
edit the info.plist manually.


305
00:16:26,206 --> 00:16:28,816
In this example we see we have a
new application here that wants


306
00:16:28,816 --> 00:16:32,796
to access Camera and Microphone
so that they can help you record


307
00:16:32,796 --> 00:16:34,946
that new music video
for your album.


308
00:16:35,546 --> 00:16:41,406
Now, there are several new
purpose string keys on iOS,


309
00:16:42,006 --> 00:16:46,366
including Location, Camera,
HealthKit, and Motion Activity.


310
00:16:47,026 --> 00:16:49,336
The reason Motion
Activity is listed here is


311
00:16:49,336 --> 00:16:53,406
because it was announced
after WWDC last year.


312
00:16:54,206 --> 00:16:57,296
You can always find the full
list of purpose string keys


313
00:16:57,716 --> 00:17:00,846
in the Information Property
List Key Reference located


314
00:17:00,846 --> 00:17:02,236
on the Apple Developer website.


315
00:17:02,756 --> 00:17:08,386
When a user wants to go manage
their privacy settings on iOS,


316
00:17:08,935 --> 00:17:11,945
they understand that they need
to look in the Settings app,


317
00:17:12,175 --> 00:17:14,965
then Privacy, and then
look for the data class


318
00:17:14,965 --> 00:17:15,886
that they want to manage.


319
00:17:16,546 --> 00:17:20,256
Similarly, on OS X, users
will go to System Preferences,


320
00:17:20,526 --> 00:17:23,036
Security and Privacy,
then Privacy.


321
00:17:23,626 --> 00:17:25,876
This is what Apple and
developers have tried


322
00:17:25,876 --> 00:17:27,286
to communicate with users.


323
00:17:28,606 --> 00:17:30,106
However, users may want


324
00:17:30,106 --> 00:17:32,406
to update their privacy
settings from time to time.


325
00:17:33,156 --> 00:17:35,186
Perhaps your application
came out with a new feature


326
00:17:35,186 --> 00:17:36,416
and they want to
take advantage of it,


327
00:17:37,126 --> 00:17:39,446
or perhaps they've just simply
changed their mind on one


328
00:17:39,446 --> 00:17:40,616
of their privacy settings.


329
00:17:41,456 --> 00:17:45,276
We're excited to give you
a brand new ability today


330
00:17:45,616 --> 00:17:48,426
to send users directly
to their privacy settings


331
00:17:48,616 --> 00:17:49,826
so that they can manage them.


332
00:17:51,186 --> 00:17:55,176
You can do that with
UIApplication sharedApplication


333
00:17:55,566 --> 00:17:57,966
openURL and then pass it a URL


334
00:17:57,966 --> 00:18:01,356
with a string UIApplication
OpenSettings URLString.


335
00:18:03,076 --> 00:18:07,026
This is going to
drop them directly


336
00:18:07,026 --> 00:18:08,256
into their settings bundle.


337
00:18:08,436 --> 00:18:11,286
For each application
installed on iOS 8,


338
00:18:11,636 --> 00:18:14,146
the device will now have
their own settings entries,


339
00:18:14,406 --> 00:18:16,616
as well as full privacy
settings.


340
00:18:17,216 --> 00:18:20,016
Users can go to these settings
and manage those settings.


341
00:18:20,436 --> 00:18:23,366
If your application already
has a settings bundle,


342
00:18:23,746 --> 00:18:25,826
then these entries
will be prepended to it


343
00:18:26,716 --> 00:18:30,096
so you don't have to worry
about losing your settings.


344
00:18:30,466 --> 00:18:37,166
All of the things
that we've talked


345
00:18:37,166 --> 00:18:40,046
about so far form the
principles for data isolation.


346
00:18:40,306 --> 00:18:42,316
For the developers
who are new out there,


347
00:18:42,316 --> 00:18:46,036
data isolation is a technical
design where the OS intervenes


348
00:18:46,036 --> 00:18:48,576
between an application
and the user's data


349
00:18:48,576 --> 00:18:49,866
on behalf of the user.


350
00:18:50,386 --> 00:18:53,826
This occurs outside the address
space of your process, however,


351
00:18:53,826 --> 00:18:56,036
it's completely transparent
to your application.


352
00:18:56,686 --> 00:19:00,146
Just simply calling the existing
APIs will help you gather


353
00:19:00,146 --> 00:19:02,006
consent and inform the user.


354
00:19:02,366 --> 00:19:05,366
If they decide to
allow the application


355
00:19:05,366 --> 00:19:07,076
to access the data,
you'll get data back.


356
00:19:07,586 --> 00:19:08,966
And, if they don't allow access,


357
00:19:09,006 --> 00:19:11,046
then you will receive
nothing back.


358
00:19:12,416 --> 00:19:17,006
There are several new data
classes and updated data classes


359
00:19:17,006 --> 00:19:19,846
on iOS 8, including
Location, Contacts,


360
00:19:21,366 --> 00:19:25,646
Camera (which is now worldwide),
Motion Activity, and HealthKit.


361
00:19:26,116 --> 00:19:32,286
OS X Yosemite supports all the
same data classes that it did


362
00:19:32,286 --> 00:19:36,626
in OS X Mavericks:
Location, Contacts, Calendars,


363
00:19:36,626 --> 00:19:37,926
Reminders, and Social.


364
00:19:37,926 --> 00:19:40,586
However, there were no
new additions or updates.


365
00:19:44,256 --> 00:19:46,486
If you're already
shipping an application


366
00:19:46,486 --> 00:19:47,616
on the App Store, that's great!


367
00:19:48,006 --> 00:19:51,746
This data isolation applies to
your application from day-one.


368
00:19:51,746 --> 00:19:53,216
You don't have to recompile


369
00:19:53,336 --> 00:19:55,506
or resubmit your
application to the App Store.


370
00:19:55,996 --> 00:19:58,266
However, certain changes
can help you improve the


371
00:19:58,266 --> 00:19:59,396
user experience.


372
00:19:59,606 --> 00:20:02,516
For example, if you
are accessing Camera,


373
00:20:02,766 --> 00:20:05,146
new this year we've added
that to data isolation,


374
00:20:05,466 --> 00:20:08,326
so additional UI might
be helpful to explain


375
00:20:08,326 --> 00:20:11,016
to the user why they're
receiving a black screen,


376
00:20:11,016 --> 00:20:13,306
or essentially all zeroes
in their video stream.


377
00:20:14,196 --> 00:20:18,246
Also, adding purpose strings can
help clarify why you need access


378
00:20:18,336 --> 00:20:21,366
to this data.


379
00:20:21,866 --> 00:20:23,776
So, now that we know
what data isolation is,


380
00:20:24,396 --> 00:20:28,696
let's briefly discuss what
that looks like on OS X.


381
00:20:30,486 --> 00:20:35,146
On OS X, when an application
calls the purpose specific API,


382
00:20:35,806 --> 00:20:37,736
the OS will handle that request


383
00:20:37,736 --> 00:20:39,406
and present the dialog
to the user.


384
00:20:39,506 --> 00:20:43,046
For example, if you call
ABAddressBook sharedAddressBook


385
00:20:43,396 --> 00:20:46,166
ABPerson alloc init then


386
00:20:46,196 --> 00:20:48,746
that will call the system
to pop up the dialog.


387
00:20:49,196 --> 00:20:51,686
On OS X the calls
are synchronous.


388
00:20:51,686 --> 00:20:55,006
So, you're going to want to
use Grand Central Dispatch


389
00:20:55,316 --> 00:20:58,006
and wrap the invocation
in a block


390
00:20:58,006 --> 00:21:00,816
to keep the UI responsive
while your user decides.


391
00:21:01,576 --> 00:21:03,846
After the user has made
their initial decision,


392
00:21:04,226 --> 00:21:06,266
the APIs will return
immediately.


393
00:21:09,346 --> 00:21:13,396
As I said before, when the
user makes their decision,


394
00:21:13,396 --> 00:21:15,166
if they decide to
grant you access,


395
00:21:15,416 --> 00:21:17,266
then you will receive
populated objects.


396
00:21:17,686 --> 00:21:19,326
And, if they decide
not to allow access,


397
00:21:19,326 --> 00:21:22,086
then you will either receive
nil objects or no objects.


398
00:21:22,916 --> 00:21:26,966
For applications that use system
services, such as Spotlight


399
00:21:26,966 --> 00:21:29,706
or AppleScript, then
the OS will still prompt


400
00:21:29,706 --> 00:21:30,956
on the user's behalf.


401
00:21:33,976 --> 00:21:38,696
On OS X applications can
participate in the app Sandbox,


402
00:21:38,816 --> 00:21:41,446
and if you ship on the Mac App
Store then you are required


403
00:21:41,446 --> 00:21:42,266
to participate.


404
00:21:42,556 --> 00:21:44,226
For the new developers
out there,


405
00:21:44,936 --> 00:21:48,306
the Sandbox is a security design
that isolates your process


406
00:21:48,376 --> 00:21:50,286
from the other processes
on the system,


407
00:21:50,286 --> 00:21:52,766
as well as the operating system.


408
00:21:53,346 --> 00:21:56,586
Applications that are Sandboxed
typically have a tight set


409
00:21:56,586 --> 00:21:58,506
of restrictions that
are imposed upon them.


410
00:21:59,386 --> 00:22:03,536
So, if you're going to Sandbox
your application there's going


411
00:22:03,536 --> 00:22:05,166
to be more work that
you'll have to do


412
00:22:05,166 --> 00:22:07,656
to get these consent
dialogs to show up.


413
00:22:08,696 --> 00:22:11,416
You'll need to add entitlements
to your entitlements plist,


414
00:22:11,416 --> 00:22:12,966
which we'll talk about
here in a second.


415
00:22:13,856 --> 00:22:16,736
An important note is that if
the permissions ever change


416
00:22:16,736 --> 00:22:18,786
in the future while your
application is running,


417
00:22:19,376 --> 00:22:21,526
the system will prompt the
user of whether they want


418
00:22:21,526 --> 00:22:25,246
to terminate the app immediately
or wait until its next launch


419
00:22:25,446 --> 00:22:26,996
to make the Sandbox consistent.


420
00:22:27,556 --> 00:22:33,776
To add the entitlements to
the application all you have


421
00:22:33,776 --> 00:22:37,786
to do is go to the
entitlements plist or use Xcode


422
00:22:38,356 --> 00:22:39,796
to modify those entitlements.


423
00:22:40,326 --> 00:22:42,576
What you would do is you
would go to the targets,


424
00:22:42,806 --> 00:22:46,466
My Application, Capabilities,
turn on the App Sandbox,


425
00:22:47,026 --> 00:22:49,086
and then select the
entitlements that you want.


426
00:22:49,446 --> 00:22:52,226
You should only build with the
entitlements that you need.


427
00:22:52,606 --> 00:22:56,726
If you're interested in learning
more about the App Sandbox,


428
00:22:56,916 --> 00:22:59,916
there's a reference at the end
of the talk to a practical guide


429
00:22:59,916 --> 00:23:03,476
to the App Sandbox that
was presented in WWDC 2013.


430
00:23:03,996 --> 00:23:09,186
So now that we've talked
about data isolation on OS X,


431
00:23:09,416 --> 00:23:13,256
let's talk a little bit
about data isolation on iOS


432
00:23:13,706 --> 00:23:19,866
and contrast it to that.


433
00:23:20,626 --> 00:23:25,976
On iOS, data isolation
is obligatory


434
00:23:26,166 --> 00:23:29,696
because applications are built
on top of the App Sandbox.


435
00:23:30,066 --> 00:23:32,396
However, you don't need
to add entitlements


436
00:23:32,396 --> 00:23:34,556
to your application
as you did in OS X.


437
00:23:35,396 --> 00:23:37,846
Also, access is asynchronous


438
00:23:38,026 --> 00:23:40,456
so API calls will
return immediately,


439
00:23:40,926 --> 00:23:44,406
and then data would be returned
via a block or a delegate call.


440
00:23:47,246 --> 00:23:50,856
Unlike OS X, if the user decides
to change the permissions


441
00:23:50,856 --> 00:23:53,326
of your application, then
you will receive a SIGKILL


442
00:23:53,326 --> 00:23:55,156
signal immediately.


443
00:23:55,236 --> 00:23:56,526
There is no chance to wait


444
00:23:56,736 --> 00:23:58,746
or have the user
decide at a later time.


445
00:24:00,726 --> 00:24:03,196
You need to be prepared
to handle changes


446
00:24:03,706 --> 00:24:08,316
in permission status via change
notifications and, honestly,


447
00:24:08,316 --> 00:24:09,606
this was a good idea anyway


448
00:24:09,606 --> 00:24:12,526
because the user can change
their permissions at any time.


449
00:24:14,976 --> 00:24:19,746
There's multiple ways to trigger
these data consent popups


450
00:24:20,696 --> 00:24:23,096
and all you have to do
is simply call the API.


451
00:24:24,026 --> 00:24:26,006
There's four new APIs in iOS


452
00:24:26,006 --> 00:24:29,416
that will trigger these
consents: Location, Photos,


453
00:24:29,596 --> 00:24:31,836
Camera, and HealthKit;
and, we're going to go


454
00:24:31,836 --> 00:24:37,956
over some examples
of that right now.


455
00:24:39,096 --> 00:24:43,226
Location Services in iOS 8 now
supports two different modes


456
00:24:43,296 --> 00:24:47,196
of updating device location:
when in use and always.


457
00:24:47,876 --> 00:24:49,806
And the functionality
that is provided


458
00:24:49,806 --> 00:24:51,886
in both sounds similar
to how they're named.


459
00:24:52,806 --> 00:24:55,926
Also, depending on what
targets you want to support


460
00:24:55,926 --> 00:24:59,036
with your binary, you may need
to conditionalize your logic


461
00:24:59,646 --> 00:25:01,146
to call the appropriate methods.


462
00:25:03,176 --> 00:25:06,806
When In Use is exactly
what it sounds like.


463
00:25:07,906 --> 00:25:11,436
You're only able to access
the devices location while the


464
00:25:11,436 --> 00:25:13,086
application is in
the foreground.


465
00:25:14,406 --> 00:25:17,806
The API that you would call is
CLLocationManager requestWhenIn


466
00:25:17,806 --> 00:25:20,916
UseAuthorization and
the info.plist key


467
00:25:20,916 --> 00:25:23,166
that you would use
is NSLocationWhen


468
00:25:23,366 --> 00:25:25,316
InUseUsage Description.


469
00:25:26,236 --> 00:25:28,816
This is a more privacy-friendly
mode


470
00:25:29,116 --> 00:25:32,256
because applications cannot
update location while they're


471
00:25:32,256 --> 00:25:33,056
in the background.


472
00:25:33,636 --> 00:25:37,856
Additionally, applications won't
have access to functionalities


473
00:25:37,856 --> 00:25:39,166
such as Region Monitoring,


474
00:25:39,636 --> 00:25:44,566
the Significant Location
Change API, or the Visits API.


475
00:25:45,756 --> 00:25:50,476
Also, if your application
implements the UI Capability's


476
00:25:50,616 --> 00:25:54,176
Background modes for
Location, in their plist,


477
00:25:54,686 --> 00:25:57,216
then if you start updating
Location in the foreground,


478
00:25:57,576 --> 00:25:59,966
and then serialize the
application to the background,


479
00:26:00,666 --> 00:26:03,946
then the OS will implicate your
application as using Location


480
00:26:03,946 --> 00:26:07,406
in the background by drawing
a double height status bar.


481
00:26:08,156 --> 00:26:11,056
Here we can see that where
Fitness is using our Location


482
00:26:11,056 --> 00:26:14,966
in the background.


483
00:26:15,526 --> 00:26:17,666
Always Authorization
is the second mode.


484
00:26:18,496 --> 00:26:21,966
Its API is CLLocationManager
requestAlways Authorization


485
00:26:21,966 --> 00:26:23,976
and the info.plist
key that you'll need


486
00:26:23,976 --> 00:26:27,286
to implement is NSLocationAlways
UsageDescription.


487
00:26:28,046 --> 00:26:32,296
You should only try and use
this mode when necessary


488
00:26:32,736 --> 00:26:35,636
because it has an increased
privacy impact to the user,


489
00:26:37,496 --> 00:26:40,736
because applications can
start accessing Location data


490
00:26:40,946 --> 00:26:43,346
in the background and
the app has access


491
00:26:43,346 --> 00:26:46,516
to the significant Location
Change APIs, the Visits APIs,


492
00:26:46,896 --> 00:26:49,106
as well as the Region
Monitoring APIs.


493
00:26:49,896 --> 00:26:53,656
The default mode
for applications


494
00:26:53,656 --> 00:26:55,866
that are not updated
to take advantage


495
00:26:55,866 --> 00:26:59,276
of these new APIs will
be Always Authorization.


496
00:26:59,976 --> 00:27:04,236
And, if you use Always
Authorization then the OS will


497
00:27:04,236 --> 00:27:07,536
occasionally re-prompt the
user for access to Location.


498
00:27:08,096 --> 00:27:10,046
You should only use this mode


499
00:27:10,076 --> 00:27:12,796
if you think your users
will thank you for doing so.


500
00:27:16,476 --> 00:27:19,146
So, previously on iOS 7,


501
00:27:19,636 --> 00:27:21,466
you could implement
this info.plist key,


502
00:27:21,466 --> 00:27:23,596
NSLocation UsageDescription.


503
00:27:24,266 --> 00:27:25,496
That's now deprecated.


504
00:27:26,196 --> 00:27:29,366
And, on iOS 8 there are
two new purpose strings,


505
00:27:29,486 --> 00:27:32,036
NSLocationWhen
InUseUsageDescription


506
00:27:32,416 --> 00:27:35,406
and NSLocationAlways
UsageDescription.


507
00:27:35,936 --> 00:27:40,246
You must put one or two of these
plist keys in your info.plist.


508
00:27:40,706 --> 00:27:43,986
Calling the APIs without
these keys will not work.


509
00:27:45,026 --> 00:27:47,496
If you want to target
multiple operating systems


510
00:27:47,496 --> 00:27:50,726
in a single binary then
you may need multiple keys.


511
00:27:50,726 --> 00:27:55,736
So, let's take a look at what
a code example might look


512
00:27:55,736 --> 00:27:57,016
like for this.


513
00:27:57,856 --> 00:28:01,506
On iOS 7 you probably would have
had some code that looks similar


514
00:28:01,506 --> 00:28:03,546
to this, CLLocationManager.


515
00:28:03,546 --> 00:28:05,056
You get a shared manager object,


516
00:28:05,436 --> 00:28:07,796
and then you call
startUpdatingLocation.


517
00:28:09,706 --> 00:28:13,666
This is what implicitly prompted
the user for access to location.


518
00:28:14,496 --> 00:28:17,436
In iOS 8 we're changing that so


519
00:28:17,436 --> 00:28:21,226
that you explicitly request
access to a user's Location


520
00:28:21,226 --> 00:28:23,926
by calling requestWhenIn
UseAuthorization.


521
00:28:24,226 --> 00:28:28,246
In this example we see we're
asking the Objective-C runtime,


522
00:28:28,246 --> 00:28:29,766
"Do you respond to
the selector Request


523
00:28:29,766 --> 00:28:31,056
When in Use Authorization?"


524
00:28:31,366 --> 00:28:34,506
And if not, then we call
the old way of doing it.


525
00:28:34,956 --> 00:28:38,016
Alternatively, you can
also call requestWhenInUse


526
00:28:38,016 --> 00:28:39,826
or requestAlways Authorization.


527
00:28:41,446 --> 00:28:44,106
Note that if you fail
a particular request,


528
00:28:44,586 --> 00:28:47,396
either Request Always
or Request When in Use,


529
00:28:47,766 --> 00:28:50,726
you can't request the
other mode; you're done.


530
00:28:51,476 --> 00:28:55,316
You can't prompt up or down,
in terms of access rights.


531
00:28:56,836 --> 00:29:00,756
So, we've talked a lot about
Location, and the changes


532
00:29:00,756 --> 00:29:02,986
to Location, and what's new.


533
00:29:03,706 --> 00:29:05,566
Here are the important
takeaway points.


534
00:29:05,966 --> 00:29:08,776
There's two new modes
in iOS 8 versus iOS 7,


535
00:29:09,546 --> 00:29:11,316
and there's two new
info.plist keys


536
00:29:11,316 --> 00:29:12,846
that you'll have to implement.


537
00:29:14,386 --> 00:29:17,466
While there is a
bunch of implications


538
00:29:17,966 --> 00:29:21,606
to which modes you use, you
should check out what's right


539
00:29:21,606 --> 00:29:24,316
for your application by
going to see "What's New


540
00:29:24,316 --> 00:29:25,996
in Core Location"
that was presented


541
00:29:25,996 --> 00:29:27,216
on Tuesday of this week.


542
00:29:27,686 --> 00:29:33,036
The second example I would
like to talk about is Camera.


543
00:29:33,856 --> 00:29:38,846
In iOS 8 Camera is a
data isolated data class.


544
00:29:39,686 --> 00:29:42,086
Here, we create an
ABCapture Session,


545
00:29:42,556 --> 00:29:45,216
and then we create
an ABCaptureDevice,


546
00:29:46,236 --> 00:29:49,516
and simply calling the
API AVCapture DeviceInput


547
00:29:49,976 --> 00:29:53,736
deviceInput WithDeviceError will
present the dialog to the user.


548
00:29:54,406 --> 00:29:58,836
While the user decides, the
video stream will be all zeroes,


549
00:29:58,836 --> 00:30:01,596
or essentially a black
screen, so you need to be able


550
00:30:01,596 --> 00:30:03,096
to explain that to your user.


551
00:30:03,766 --> 00:30:06,216
Then below, you can
either handle the failure


552
00:30:06,286 --> 00:30:10,626
or the success as you choose.


553
00:30:11,176 --> 00:30:13,366
The last code example I
want to show is HealthKit.


554
00:30:13,896 --> 00:30:20,656
On this code example,
we're checking first to see


555
00:30:20,986 --> 00:30:23,986
if HealthKit data is
available on this device.


556
00:30:24,376 --> 00:30:27,586
Then, we're allocinatting
an HKHealthStore and asking


557
00:30:27,836 --> 00:30:30,876
for access to the heart
rate type identifier.


558
00:30:31,106 --> 00:30:34,026
This is an important
point because access


559
00:30:34,026 --> 00:30:37,236
to HealthKit data types
is very, very granular.


560
00:30:37,806 --> 00:30:41,136
And you should only ask for
access to the data classes


561
00:30:41,136 --> 00:30:42,936
that you're going
to actively use.


562
00:30:43,426 --> 00:30:44,986
What you would do then ,


563
00:30:45,196 --> 00:30:49,566
s call requestAuthorization
ToShareTypes completion


564
00:30:49,626 --> 00:30:50,626
to prompt the user.


565
00:30:51,456 --> 00:30:53,606
Now, you can't check
to see whether


566
00:30:53,606 --> 00:30:57,216
or not the user gave you access
to read or if there, in fact,


567
00:30:57,216 --> 00:30:58,986
is any data at all
of that data type.


568
00:30:58,986 --> 00:31:00,476
That's part of the
privacy design.


569
00:31:01,276 --> 00:31:02,616
So, the success variable


570
00:31:02,946 --> 00:31:06,466
in the block actually indicates
whether the user was prompted


571
00:31:06,466 --> 00:31:10,806
or not, not what the
response of the user was.


572
00:31:11,696 --> 00:31:15,986
If the request was not
successful, then the error,


573
00:31:16,096 --> 00:31:17,626
the NS error, will be populated.


574
00:31:20,226 --> 00:31:22,526
Writing is slightly different.


575
00:31:22,526 --> 00:31:25,246
You can check to see if you
have authorization to write,


576
00:31:25,646 --> 00:31:28,686
and you do that by calling
authorizationStatus ForDataType.


577
00:31:29,126 --> 00:31:31,746
This will return you back
in authorization status,


578
00:31:32,616 --> 00:31:35,156
which you then can then
conditionalize your logic on.


579
00:31:36,286 --> 00:31:44,146
Also, applications can only
edit, or modify, or delete data


580
00:31:44,146 --> 00:31:48,006
that they have written, not
other applications' data.


581
00:31:48,756 --> 00:31:51,016
So, you should check your
authorization status first,


582
00:31:51,476 --> 00:31:54,606
and then if you need to,
ask the user for permission.


583
00:31:58,366 --> 00:31:59,686
Calling saveObject


584
00:32:00,116 --> 00:32:03,516
and deleteObject will modify
those particular objects.


585
00:32:04,076 --> 00:32:09,486
So, we've talked
about data isolation -


586
00:32:09,846 --> 00:32:11,926
what are the differences on
the different platforms -


587
00:32:11,926 --> 00:32:13,736
and that's a lot of information.


588
00:32:13,876 --> 00:32:16,286
So, we need to be
able to test it,


589
00:32:16,286 --> 00:32:18,006
and it's really easy to test.


590
00:32:18,006 --> 00:32:20,516
All you need to do is
run your application.


591
00:32:21,076 --> 00:32:23,236
You should already
be testing on-device,


592
00:32:23,466 --> 00:32:26,116
however the simulator
does support a lot


593
00:32:26,116 --> 00:32:28,296
of the data isolated classes.


594
00:32:29,036 --> 00:32:32,116
Note that apps can only trigger
the prompt once, so if you need


595
00:32:32,116 --> 00:32:36,196
to go back and retrigger it,
on the iOS, you need to go


596
00:32:36,196 --> 00:32:40,746
to Settings, General, Reset,
Reset Location and Privacy,


597
00:32:41,026 --> 00:32:43,736
or, on OS X, use tccutil.


598
00:32:45,056 --> 00:32:49,106
Consider all of the different
test cases, and there's four


599
00:32:49,106 --> 00:32:51,586
of them: permission
being sought and denied,


600
00:32:52,366 --> 00:32:54,626
permission being
sought and granted,


601
00:32:55,276 --> 00:32:58,536
permission previously denied,
and permission restricted.


602
00:32:59,486 --> 00:33:02,046
You might even want to
consider building these


603
00:33:02,046 --> 00:33:06,236
in to your unit tests so that
you don't ship any regressions.


604
00:33:07,136 --> 00:33:09,956
I'd like to talk a little bit
about permission restricted,


605
00:33:10,176 --> 00:33:15,586
as that's a special,
interesting case.


606
00:33:16,066 --> 00:33:18,356
Restrictions can
prevent your users


607
00:33:18,476 --> 00:33:21,096
from changing their privacy
settings even if they want to.


608
00:33:21,806 --> 00:33:24,086
For example, enterprise
restriction


609
00:33:24,116 --> 00:33:27,126
or on-device restrictions
can prevent the user


610
00:33:27,346 --> 00:33:28,996
from changing their
privacy settings.


611
00:33:29,616 --> 00:33:31,756
So, you should try to
send users to Settings,


612
00:33:32,216 --> 00:33:33,866
but your code should
be resilient


613
00:33:33,866 --> 00:33:35,366
to the lack of data returned.


614
00:33:36,086 --> 00:33:38,786
The OS can help you
fail gracefully.


615
00:33:39,266 --> 00:33:40,526
Some of the picker classes


616
00:33:40,526 --> 00:33:44,446
in iOS will actually show a lock
page indicating the user has


617
00:33:44,486 --> 00:33:47,046
previously declined
access to that data type,


618
00:33:47,696 --> 00:33:51,286
so you shouldn't design dialogs
that say go flip the switch


619
00:33:51,286 --> 00:33:52,586
in the case that
you're restricted


620
00:33:52,936 --> 00:33:56,426
because users may not actually
be able to flip the switch.


621
00:33:58,096 --> 00:34:00,626
It's easy to test
with restrictions.


622
00:34:00,996 --> 00:34:04,336
All you have to do is go to
Settings, General Restrictions,


623
00:34:04,726 --> 00:34:06,346
and then choose the
data type that you want


624
00:34:06,346 --> 00:34:07,386
to test restrictions with.


625
00:34:07,976 --> 00:34:12,306
So, we have some
great iOS sample code


626
00:34:12,306 --> 00:34:13,426
out there for you today.


627
00:34:13,956 --> 00:34:15,775
It's called "Checking
and Requesting Access


628
00:34:15,775 --> 00:34:19,216
to Data Classes in Privacy
Settings" and it's available


629
00:34:19,216 --> 00:34:20,876
on the iOS Developer Library.


630
00:34:22,235 --> 00:34:23,926
You can use it directly
in your project


631
00:34:24,005 --> 00:34:26,306
or just download it
and play with it.


632
00:34:27,196 --> 00:34:29,366
So, that's data isolation


633
00:34:29,505 --> 00:34:31,735
and prompting your
users with purpose.


634
00:34:32,116 --> 00:34:34,585
I'm now going to give it back
to Katie so she can take you


635
00:34:34,585 --> 00:34:36,126
through privacy best practices.


636
00:34:36,436 --> 00:34:36,786
Thank you.


637
00:34:38,516 --> 00:34:43,106
[ Applause ]


638
00:34:43,606 --> 00:34:44,235
>> Thanks, David.


639
00:34:44,516 --> 00:34:47,335
So now, I'm going to finish
off talking about some things


640
00:34:47,335 --> 00:34:50,025
that you can do and apply
in your application.


641
00:34:50,616 --> 00:34:55,616
I'm going to talk about
transparency, data collection,


642
00:34:56,436 --> 00:35:00,516
avoiding fingerprinting, and
how to protect your users' data.


643
00:35:01,336 --> 00:35:05,706
So, David talked about
transparency already.


644
00:35:05,706 --> 00:35:08,986
He talked about in terms of
consent and Just in Time alerts,


645
00:35:09,576 --> 00:35:11,956
but transparency is
important even wider.


646
00:35:12,266 --> 00:35:13,796
This is all about insuring


647
00:35:13,796 --> 00:35:17,046
that your users understand
what's happening to them


648
00:35:17,216 --> 00:35:18,576
and what's happening
to their data.


649
00:35:19,826 --> 00:35:22,546
Users should never be
surprised if you explain


650
00:35:22,546 --> 00:35:25,906
to them how your code works or
what's happening to their data.


651
00:35:27,416 --> 00:35:29,956
Think about what the
user expectations are.


652
00:35:29,956 --> 00:35:32,276
This is what you should go
back to and think about.


653
00:35:32,276 --> 00:35:34,216
What would users think
is happening here?


654
00:35:35,096 --> 00:35:38,066
So, there's other ways
that we can be transparent.


655
00:35:38,926 --> 00:35:40,596
Logging is one of those places.


656
00:35:40,926 --> 00:35:45,186
For instance, both on iOS and
OS X, if the user has selected


657
00:35:45,746 --> 00:35:48,576
to submit logs to
Apple via Diagnostics


658
00:35:48,576 --> 00:35:50,926
and Usage the user can
go and look at these.


659
00:35:51,076 --> 00:35:55,506
You can go in iOS under
Settings, Privacy, Diagnostics


660
00:35:55,506 --> 00:35:58,236
and Usage, and look at all the
logs that will be sent to Apple.


661
00:35:59,036 --> 00:36:03,646
You can also see them
via the console on OS X.


662
00:36:04,436 --> 00:36:07,996
Another example of this on
OS X is for Crash Reports.


663
00:36:08,506 --> 00:36:11,356
You can then expand
out and view the data


664
00:36:11,356 --> 00:36:12,546
that would be sent to Apple.


665
00:36:13,176 --> 00:36:16,266
I would also encourage
you to think about his


666
00:36:16,266 --> 00:36:19,386
when you have a data
store of user data.


667
00:36:20,546 --> 00:36:23,206
Figure out a way to
visualize this data


668
00:36:23,206 --> 00:36:25,766
and let them see what
information you're storing.


669
00:36:26,686 --> 00:36:29,606
Users like when they have
the control to be able to see


670
00:36:29,606 --> 00:36:32,626
and understand what's happening.


671
00:36:32,976 --> 00:36:35,056
Your Privacy Policy
is another way


672
00:36:35,056 --> 00:36:37,116
that you can be transparent
to users.


673
00:36:37,116 --> 00:36:37,966
It's a great tool.


674
00:36:38,686 --> 00:36:42,646
Your Privacy Policy should
include: what data you collect,


675
00:36:43,386 --> 00:36:48,086
what you plan to do with
that data, and if you plan


676
00:36:48,086 --> 00:36:49,786
to share it with any third
parties, who they are.


677
00:36:51,246 --> 00:36:55,926
As a family's sharing, you may
need to include a kid section


678
00:36:55,926 --> 00:36:57,426
of your Privacy Policy, as well.


679
00:36:58,926 --> 00:37:01,716
There are four different areas
this year where we are going


680
00:37:01,716 --> 00:37:04,826
to be requiring a Privacy Policy
if you're taking advantage


681
00:37:04,826 --> 00:37:05,756
of this functionality.


682
00:37:06,276 --> 00:37:09,236
The first one is apps that
link against HealthKit.


683
00:37:10,276 --> 00:37:11,916
Second, HomeKit.


684
00:37:13,226 --> 00:37:15,216
Third, third party keyboards.


685
00:37:15,886 --> 00:37:19,456
And lastly, if you want your app
to show up in the kids' section


686
00:37:19,456 --> 00:37:22,376
of the app store, you will
also require a Privacy Policy.


687
00:37:23,296 --> 00:37:26,456
We make it easy to submit a
link and you can do it right


688
00:37:26,456 --> 00:37:29,416
in iTunes Connect, and
then this will be visible


689
00:37:29,676 --> 00:37:30,916
in all of the App Stores.


690
00:37:32,286 --> 00:37:34,916
So, here you can see
in iTunes Connect,


691
00:37:34,976 --> 00:37:35,996
you probably know this page,


692
00:37:35,996 --> 00:37:37,156
it's where you write
the description


693
00:37:37,156 --> 00:37:39,956
of what your app does, what
it is, and at the bottom,


694
00:37:40,176 --> 00:37:42,796
here's where you add a link
to your Privacy Policy.


695
00:37:44,616 --> 00:37:48,746
Then, in the App Store - on the
first page, if you scroll down -


696
00:37:49,096 --> 00:37:51,626
you can see, and users
can go and click on,


697
00:37:51,686 --> 00:37:53,486
your Privacy Policy
and go read it.


698
00:37:53,906 --> 00:37:56,086
Now this, users can see it


699
00:37:56,086 --> 00:37:58,926
and read it before they
have downloaded this app,


700
00:37:59,536 --> 00:38:00,486
so it gives them the ability


701
00:38:00,486 --> 00:38:03,866
to understand what's happening
before it happens to their data.


702
00:38:03,866 --> 00:38:08,596
Next, I'm going to talk
about data collection.


703
00:38:08,716 --> 00:38:11,916
So, data collection is
a really powerful tool.


704
00:38:12,416 --> 00:38:15,046
It's great to understand where
users are having problems,


705
00:38:15,356 --> 00:38:17,366
where they're running
into issues or crashing,


706
00:38:18,196 --> 00:38:20,326
where users are spending
the most time in your apps


707
00:38:20,326 --> 00:38:22,646
so you can expand more
engineering resources there.


708
00:38:23,646 --> 00:38:27,776
But, we believe that all data
collection does have privacy


709
00:38:27,776 --> 00:38:32,166
impact, so you want a weigh
the benefits against the risks.


710
00:38:33,676 --> 00:38:36,476
The thing that I work with teams
and talk to teams about is think


711
00:38:36,476 --> 00:38:38,976
about the decision that
you're trying to achieve,


712
00:38:38,976 --> 00:38:41,216
the decision you're trying to
make with the data collection,


713
00:38:41,546 --> 00:38:43,036
and the question
you're trying to answer.


714
00:38:44,516 --> 00:38:46,746
That's where you should
start with data collection.


715
00:38:47,116 --> 00:38:50,696
And, if you can't think of
a question, you can't think


716
00:38:50,696 --> 00:38:53,096
of anything that you're
going to do with the data,


717
00:38:53,096 --> 00:38:55,216
the best question is - because
I think it sounds interesting,


718
00:38:55,506 --> 00:38:57,726
because I wondered -
then that's a good sign


719
00:38:57,726 --> 00:38:59,936
that we shouldn't be
collecting that amount


720
00:38:59,936 --> 00:39:01,786
of data, and that data.


721
00:39:02,546 --> 00:39:04,246
So, we've all heard about,


722
00:39:04,246 --> 00:39:06,346
and heard in the
industry about, breaches.


723
00:39:07,156 --> 00:39:10,266
And, one thing to think
about is, unfortunately,


724
00:39:10,266 --> 00:39:12,296
if this happens to you,
you want to be able


725
00:39:12,296 --> 00:39:15,566
to explain how you plan you use
and have a clear explanation


726
00:39:15,566 --> 00:39:17,326
for all the data
that you're storing.


727
00:39:18,066 --> 00:39:21,136
If you don't have a good
explanation, and users want


728
00:39:21,136 --> 00:39:23,816
to understand, this will
have more of an impact


729
00:39:23,816 --> 00:39:26,736
to your reputation and
your company's reputation.


730
00:39:28,216 --> 00:39:32,976
Now, this is true both for
applications and servers,


731
00:39:33,046 --> 00:39:37,036
so you shouldn't think of just
this on the iOS or OS X side.


732
00:39:38,936 --> 00:39:41,796
There are six data collection
techniques on this slide.


733
00:39:42,316 --> 00:39:46,456
Now, last year we got into depth
about them, we talked about


734
00:39:46,556 --> 00:39:50,626
and defined them, we gave
examples on how to apply them.


735
00:39:51,206 --> 00:39:54,256
So, if you're interested in
these, and they're great to use


736
00:39:54,256 --> 00:39:57,316
to protect your users' privacy
when doing data collection,


737
00:39:57,856 --> 00:39:59,456
go and watch last year's talk.


738
00:40:00,056 --> 00:40:05,016
And, these are great techniques
to use to avoid fingerprinting.


739
00:40:05,016 --> 00:40:07,106
That's really one
of their main uses.


740
00:40:08,046 --> 00:40:09,556
So, what is fingerprinting?


741
00:40:09,556 --> 00:40:12,046
I mean, we hear about
fingerprinting, but what is it?


742
00:40:12,496 --> 00:40:14,016
This is when a large number


743
00:40:14,016 --> 00:40:17,636
of fairly static
metrics are collected.


744
00:40:18,466 --> 00:40:21,366
A configuration, collecting
configurations is a good example


745
00:40:21,366 --> 00:40:23,766
of this, and then they
can be pieced together


746
00:40:23,766 --> 00:40:28,426
to form a fairly stable,
semi-persistent fingerprint.


747
00:40:28,836 --> 00:40:31,626
So, then, any other
data that is logged


748
00:40:31,626 --> 00:40:34,586
with this information is then
associated to this device.


749
00:40:36,036 --> 00:40:40,216
This can happen very easily,
it can happen accidentally,


750
00:40:40,376 --> 00:40:42,766
and it can happen
without collecting any


751
00:40:42,766 --> 00:40:43,946
personal information.


752
00:40:44,626 --> 00:40:48,046
You may think, "Well, there's no
personal information in my logs,


753
00:40:48,336 --> 00:40:51,226
in my logging, so there's
no privacy impact."


754
00:40:52,076 --> 00:40:53,076
This is not true.


755
00:40:53,466 --> 00:40:56,146
You should go back, look at
what you're logging to see


756
00:40:56,146 --> 00:40:58,456
if you have accidentally been
fingerprinting your users.


757
00:40:59,116 --> 00:41:01,956
Now, I'm going to take
us through an example


758
00:41:01,956 --> 00:41:03,596
that helps illustrate
a little bit more


759
00:41:03,596 --> 00:41:05,576
about how easy fingerprinting
can happen,


760
00:41:05,576 --> 00:41:06,536
and how accidentally.


761
00:41:07,096 --> 00:41:09,576
So, here we have an
initial user population.


762
00:41:09,806 --> 00:41:11,276
All these dots, they're devices.


763
00:41:12,606 --> 00:41:14,856
So, first we're going
to take all the devices


764
00:41:14,856 --> 00:41:16,736
that have OS X Yosemite
installed,


765
00:41:18,116 --> 00:41:23,666
then have a certain screen
resolution, a certain time zone,


766
00:41:24,006 --> 00:41:25,006
Pacific Standard Time.


767
00:41:25,526 --> 00:41:28,556
Do they have Java installed?


768
00:41:29,326 --> 00:41:31,236
Are cookies enabled?


769
00:41:31,766 --> 00:41:37,196
A certain version of Flash?


770
00:41:37,346 --> 00:41:40,456
And, with a User-Agent string
of Safari OS X Yosemite,


771
00:41:40,676 --> 00:41:43,336
we're down to a single
device, Alice.


772
00:41:44,636 --> 00:41:47,706
So, this is where I encourage
all of you to go and look


773
00:41:47,706 --> 00:41:48,726
at your data collection
and think


774
00:41:48,726 --> 00:41:50,296
about if this is
happening to you.


775
00:41:50,296 --> 00:41:52,436
And, this is where you
can easily apply some


776
00:41:52,436 --> 00:41:53,746
of the data collection
techniques.


777
00:41:54,866 --> 00:41:56,206
Maybe what you're doing,


778
00:41:56,206 --> 00:41:58,546
it doesn't really matter what
screen resolution they have.


779
00:41:58,916 --> 00:42:03,156
Bucketing it into high,
medium, and low maybe enough


780
00:42:03,186 --> 00:42:06,176
for your use, but it'll
have more people fall


781
00:42:06,176 --> 00:42:11,876
into each bucket.


782
00:42:12,036 --> 00:42:14,006
We all are creating way
more data these days,


783
00:42:14,206 --> 00:42:16,896
and users are sharing
it with us.


784
00:42:16,976 --> 00:42:18,516
So, you need to be mindful


785
00:42:18,516 --> 00:42:20,946
about how you're
protecting all this data


786
00:42:21,066 --> 00:42:22,716
that users are entrusting
you with.


787
00:42:23,346 --> 00:42:25,846
So, there are a bunch


788
00:42:25,916 --> 00:42:31,346
of different tools,
in both iOS and OS X.


789
00:42:31,346 --> 00:42:34,876
And, we have provided a
help and make it easier


790
00:42:34,876 --> 00:42:36,356
to protect your users' data.


791
00:42:37,016 --> 00:42:38,486
The first one is the keychain.


792
00:42:39,016 --> 00:42:43,276
All application credentials
should be stored


793
00:42:43,276 --> 00:42:44,096
in the keychain.


794
00:42:45,316 --> 00:42:47,716
Think about whether they
need to be synchronized


795
00:42:48,146 --> 00:42:50,476
or if they can be stored
only on a single device.


796
00:42:51,496 --> 00:42:56,606
Also, think about Touch ID,
presence APIs, can you use this


797
00:42:56,676 --> 00:42:59,526
to help protect your
users' data?


798
00:43:00,036 --> 00:43:05,146
All client-server communication
should be encrypted.


799
00:43:06,386 --> 00:43:09,036
Also, for the data you
are storing on-disk,


800
00:43:09,386 --> 00:43:10,586
use data protection.


801
00:43:11,006 --> 00:43:14,046
This is great on iOS that we
have different data protection


802
00:43:14,046 --> 00:43:18,506
classes so then you can pick out
data that may be most sensitive


803
00:43:18,506 --> 00:43:23,066
and store it at the
highest level.


804
00:43:23,066 --> 00:43:28,126
Now, we've talked about a
bunch of different changes,


805
00:43:29,176 --> 00:43:32,346
new data classes for data
isolation, but the thing I want


806
00:43:32,346 --> 00:43:34,386
to leave you with is a
couple of things you can do


807
00:43:34,386 --> 00:43:35,496
and act on immediately.


808
00:43:36,526 --> 00:43:40,196
Make sure, if you don't have a
device that's upgraded to iOS 8


809
00:43:40,566 --> 00:43:43,006
or OS X Yosemite,
that you do today.


810
00:43:43,926 --> 00:43:45,216
Test on them.


811
00:43:45,316 --> 00:43:47,326
Understand the impact
this has to your users


812
00:43:47,566 --> 00:43:50,926
to ensure there's not going
to be user impact upon launch.


813
00:43:52,356 --> 00:43:55,816
Prompt users well, and this
really means purpose strings.


814
00:43:55,816 --> 00:44:00,376
If you don't have purpose
strings, go add them.


815
00:44:00,376 --> 00:44:01,696
Look into the new data classes,


816
00:44:01,756 --> 00:44:03,326
see if you can provide
a great experience


817
00:44:03,326 --> 00:44:05,036
by taking advantage
of the new classes.


818
00:44:05,436 --> 00:44:07,926
If you don't have a
Privacy Policy link,


819
00:44:08,326 --> 00:44:10,056
go submit one to iTunes Connect.


820
00:44:10,786 --> 00:44:15,426
And lastly, think about privacy
throughout the design process.


821
00:44:16,046 --> 00:44:20,736
And this will help you
maintain your reputation


822
00:44:21,236 --> 00:44:28,486
and a strong relationship
with your users.


823
00:44:28,906 --> 00:44:34,056
Now, Paul is our Evangelist
and he is a great resource,


824
00:44:34,056 --> 00:44:37,536
if you have any questions after
today, to go and reach out to.


825
00:44:39,246 --> 00:44:42,336
Also, we have two pieces of
great sample code projects.


826
00:44:42,336 --> 00:44:43,816
We have two sample
code projects.


827
00:44:44,136 --> 00:44:49,136
The first one, privacy prompts:
this is a help start for how


828
00:44:49,136 --> 00:44:53,286
to adopt data isolation,
and especially great to look


829
00:44:53,286 --> 00:44:55,136
out for the new data
isolation classes.


830
00:44:56,376 --> 00:44:58,746
Then, people picker:
this is good to look


831
00:44:58,746 --> 00:45:00,706
at if you currently
use the people picker,


832
00:45:00,706 --> 00:45:02,816
or are wanting to
adopt it in iOS 8.


833
00:45:03,256 --> 00:45:08,966
We talked about today
a few best practices


834
00:45:09,316 --> 00:45:10,786
for maintaining your
users' privacy,


835
00:45:10,906 --> 00:45:11,946
but there are a lot more.


836
00:45:12,476 --> 00:45:14,546
Go look at this documentation
and see


837
00:45:14,546 --> 00:45:16,066
which other ones you can adopt.


838
00:45:16,986 --> 00:45:19,456
Also, there's always great
information to be found


839
00:45:19,456 --> 00:45:20,776
at the Apple Developers' Forums.


840
00:45:22,116 --> 00:45:26,316
We mentioned several talks, the
first one is "Kids and Apps".


841
00:45:26,316 --> 00:45:28,146
It's happening right
here after ours


842
00:45:28,146 --> 00:45:29,906
and I would encourage
you guys all to stay.


843
00:45:31,516 --> 00:45:35,556
"What's New in Core Location",
and "Keychain Authentication


844
00:45:35,556 --> 00:45:37,566
with Touch ID" already
happened this week,


845
00:45:37,566 --> 00:45:38,836
but are great to go watch.


846
00:45:39,066 --> 00:45:41,716
And then from last
year or previous years,


847
00:45:41,966 --> 00:45:43,486
"Protecting your
User's Privacy",


848
00:45:44,406 --> 00:45:45,656
"Protecting User's Data",


849
00:45:45,726 --> 00:45:48,246
and "A Practical Guide
to the App Sandbox".


850
00:45:49,686 --> 00:45:52,576
From David and I,
thank you very much.


851
00:45:53,516 --> 00:45:57,880
[ Applause ]

