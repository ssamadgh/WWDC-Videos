1
00:00:06,516 --> 00:00:13,500
[ Music ]


2
00:00:27,516 --> 00:00:34,236
[ Applause ]


3
00:00:34,736 --> 00:00:35,746
>> Good afternoon.


4
00:00:35,746 --> 00:00:36,576
I'm Geoff Coffey.


5
00:00:36,756 --> 00:00:38,076
I'm an engineer on App Store


6
00:00:38,076 --> 00:00:39,826
Connect and I'm here to talk to


7
00:00:39,826 --> 00:00:41,226
about automating App Store


8
00:00:41,226 --> 00:00:41,556
Connect.


9
00:00:42,226 --> 00:00:43,286
And I got to be honest with you,


10
00:00:43,286 --> 00:00:44,496
I'm really excited about what


11
00:00:44,496 --> 00:00:45,446
we're going to talk about today.


12
00:00:47,006 --> 00:00:48,356
So let's start by talking about


13
00:00:48,426 --> 00:00:49,716
where we are with automation in


14
00:00:49,716 --> 00:00:51,056
App Store Connect today.


15
00:00:51,726 --> 00:00:52,946
As I'm sure you all know, you


16
00:00:52,946 --> 00:00:54,666
can use Xcode to upload your


17
00:00:54,666 --> 00:00:56,676
builds to App Store Connect and


18
00:00:56,676 --> 00:00:58,056
to download your crash reports


19
00:00:58,686 --> 00:01:00,096
and we have the Transporter tool


20
00:01:00,176 --> 00:01:01,816
that lets you automate uploading


21
00:01:01,816 --> 00:01:04,146
the metadata.xml and also


22
00:01:04,146 --> 00:01:05,385
automate your build uploads.


23
00:01:05,796 --> 00:01:07,406
And then we have Reporter, the


24
00:01:07,406 --> 00:01:08,336
command line tool for


25
00:01:08,336 --> 00:01:09,756
downloading your sales and


26
00:01:09,756 --> 00:01:10,746
financial reports.


27
00:01:11,596 --> 00:01:12,566
And these tools are great.


28
00:01:12,976 --> 00:01:14,506
A lot of you use them but we've


29
00:01:14,506 --> 00:01:15,536
heard from you that you want


30
00:01:15,536 --> 00:01:16,156
even more.


31
00:01:16,406 --> 00:01:18,506
You want access to more areas in


32
00:01:18,506 --> 00:01:20,146
App Store Connect and you want


33
00:01:20,146 --> 00:01:21,436
to integrate with more diverse


34
00:01:21,436 --> 00:01:22,116
workflows.


35
00:01:22,866 --> 00:01:23,976
And so we're really happy to


36
00:01:23,976 --> 00:01:25,536
introduce the new App Store


37
00:01:25,536 --> 00:01:25,966
Connect API.


38
00:01:26,516 --> 00:01:33,606
[ Applause ]


39
00:01:34,106 --> 00:01:34,846
We're excited too.


40
00:01:35,236 --> 00:01:37,656
So this is a standards-based


41
00:01:37,656 --> 00:01:39,546
REST API for App Store Connect.


42
00:01:40,326 --> 00:01:41,796
And if you ask me, that's the


43
00:01:41,796 --> 00:01:43,216
best part about it, it's a stock


44
00:01:43,286 --> 00:01:45,356
standard REST API with JSON


45
00:01:45,356 --> 00:01:46,896
responses, so it's going to feel


46
00:01:46,896 --> 00:01:48,146
familiar to a lot of you right


47
00:01:48,146 --> 00:01:48,826
out of the box.


48
00:01:49,506 --> 00:01:50,726
That also means you can use this


49
00:01:50,726 --> 00:01:52,906
API from any platform, almost


50
00:01:52,906 --> 00:01:54,396
any programming language, and


51
00:01:54,396 --> 00:01:55,406
using the tools that you're


52
00:01:55,406 --> 00:01:57,046
probably already using today.


53
00:01:57,046 --> 00:01:59,656
And of course, the API needs to


54
00:01:59,656 --> 00:02:00,346
be secure.


55
00:02:00,346 --> 00:02:02,376
So we use industry-standard JSON


56
00:02:02,376 --> 00:02:04,686
web tokens for authentication.


57
00:02:04,746 --> 00:02:06,006
And that just means you don't


58
00:02:06,006 --> 00:02:07,136
have to pass usernames and


59
00:02:07,136 --> 00:02:09,205
passwords around, and you don't


60
00:02:09,205 --> 00:02:10,395
have to have your code tied to


61
00:02:10,395 --> 00:02:12,506
any specific person on your team


62
00:02:12,916 --> 00:02:14,206
but you still maintain control


63
00:02:14,206 --> 00:02:15,796
of who can access your data and


64
00:02:15,796 --> 00:02:16,506
what they can do.


65
00:02:17,036 --> 00:02:19,866
From an ease-of-use standpoint,


66
00:02:19,866 --> 00:02:21,256
we focus really closely on


67
00:02:21,256 --> 00:02:22,606
consistency with this API.


68
00:02:23,276 --> 00:02:25,096
We have a single unified REST


69
00:02:25,096 --> 00:02:27,006
resource model, which just means


70
00:02:27,256 --> 00:02:28,416
that you can take what you learn


71
00:02:28,416 --> 00:02:29,996
in any one part of the API and


72
00:02:30,226 --> 00:02:31,716
apply it to every other part.


73
00:02:32,266 --> 00:02:33,136
And we've also built


74
00:02:33,136 --> 00:02:34,736
discoverability into the API


75
00:02:34,876 --> 00:02:37,066
itself, in simple ways like when


76
00:02:37,066 --> 00:02:38,956
we return JSON data to you, it's


77
00:02:38,956 --> 00:02:40,826
nicely formatted and indented so


78
00:02:40,826 --> 00:02:42,066
if you need to, you can dump it


79
00:02:42,066 --> 00:02:43,516
out to the console and read it


80
00:02:43,516 --> 00:02:45,076
right on the screen and we


81
00:02:45,076 --> 00:02:46,046
include links and those


82
00:02:46,046 --> 00:02:48,046
responses to related information


83
00:02:48,046 --> 00:02:49,166
to help you figure out how the


84
00:02:49,166 --> 00:02:50,296
parts fit together.


85
00:02:50,296 --> 00:02:53,286
And, of course, the API will be


86
00:02:53,286 --> 00:02:54,256
fully documented.


87
00:02:54,556 --> 00:02:55,266
If you haven't seen this


88
00:02:55,266 --> 00:02:56,546
already, the documentation


89
00:02:56,546 --> 00:02:58,186
platform that you already use at


90
00:02:58,186 --> 00:03:00,706
developer.apple.com and in Xcode


91
00:03:00,846 --> 00:03:02,796
was extended this year to also


92
00:03:02,796 --> 00:03:04,226
include Apple's REST APIs.


93
00:03:04,546 --> 00:03:05,926
So the same format you're


94
00:03:05,926 --> 00:03:07,166
familiar with your framework


95
00:03:07,166 --> 00:03:08,946
docs will apply to the App Store


96
00:03:08,946 --> 00:03:10,226
Connect API as well.


97
00:03:12,056 --> 00:03:14,466
Now we started with a focus on


98
00:03:14,466 --> 00:03:15,716
the areas of App Store Connect


99
00:03:16,146 --> 00:03:18,166
that don't already have an


100
00:03:18,166 --> 00:03:19,606
automation story and that you


101
00:03:19,606 --> 00:03:20,796
have to visit over and over


102
00:03:20,796 --> 00:03:21,986
again and in particular we're


103
00:03:21,986 --> 00:03:23,656
starting with these four areas


104
00:03:23,986 --> 00:03:24,566
you see here.


105
00:03:24,566 --> 00:03:25,866
So let's look at what all is


106
00:03:25,866 --> 00:03:26,416
included.


107
00:03:26,826 --> 00:03:28,326
First, we have comprehensive


108
00:03:28,356 --> 00:03:29,286
coverage of TestFlight.


109
00:03:29,646 --> 00:03:30,896
You can manage your testers and


110
00:03:30,896 --> 00:03:31,296
groups.


111
00:03:31,436 --> 00:03:32,676
You can submit your builds for


112
00:03:32,676 --> 00:03:33,176
review.


113
00:03:33,606 --> 00:03:34,586
And if you saw the session


114
00:03:34,586 --> 00:03:35,726
yesterday, the What's New in App


115
00:03:35,726 --> 00:03:36,946
Store Connect Session, you know


116
00:03:36,946 --> 00:03:38,166
we just announced a new public


117
00:03:38,166 --> 00:03:39,706
links feature for tester


118
00:03:39,706 --> 00:03:40,376
acquisition.


119
00:03:40,856 --> 00:03:42,176
And this works hand-in-hand with


120
00:03:42,226 --> 00:03:42,526
the API.


121
00:03:42,526 --> 00:03:44,946
You can use the API to manage


122
00:03:44,946 --> 00:03:46,466
your public links and you can


123
00:03:46,466 --> 00:03:47,716
use the two of them together to


124
00:03:47,716 --> 00:03:49,286
run your beta test program in


125
00:03:49,286 --> 00:03:51,096
whatever way works best for you.


126
00:03:51,716 --> 00:03:54,206
On the Users and Roles side, you


127
00:03:54,206 --> 00:03:55,836
can add and remove users and


128
00:03:55,836 --> 00:03:56,876
keep the permissions on your


129
00:03:56,876 --> 00:03:58,676
users in sync with your actual


130
00:03:58,676 --> 00:03:59,446
organization.


131
00:04:00,116 --> 00:04:01,436
And as we announced yesterday,


132
00:04:01,436 --> 00:04:02,516
this includes your complete


133
00:04:02,656 --> 00:04:04,426
unified user base across


134
00:04:04,616 --> 00:04:06,606
developer website and App Store


135
00:04:06,606 --> 00:04:06,976
Connect.


136
00:04:06,976 --> 00:04:08,736
So you have one set of users and


137
00:04:08,736 --> 00:04:09,696
one set of roles.


138
00:04:10,516 --> 00:04:15,576
[ Applause ]


139
00:04:16,076 --> 00:04:17,596
We have provisioning APIs that


140
00:04:17,596 --> 00:04:19,226
let you add development devices


141
00:04:19,226 --> 00:04:20,866
and register bundle IDs and


142
00:04:20,866 --> 00:04:22,065
manage your certificates and


143
00:04:22,065 --> 00:04:24,196
profiles, and then we have


144
00:04:24,196 --> 00:04:25,536
reports APIs that let you


145
00:04:25,536 --> 00:04:27,136
download the sales and financial


146
00:04:27,136 --> 00:04:27,786
report files.


147
00:04:28,256 --> 00:04:29,576
And if you use the Reporter tool


148
00:04:29,576 --> 00:04:30,896
today, this will feel really


149
00:04:30,896 --> 00:04:31,806
familiar to you because the


150
00:04:31,806 --> 00:04:33,236
parameters you send to Reporter


151
00:04:33,396 --> 00:04:34,626
are very similar to the ones you


152
00:04:34,626 --> 00:04:35,376
send to the API.


153
00:04:35,836 --> 00:04:36,966
So it's really easy to make the


154
00:04:36,966 --> 00:04:37,456
switch.


155
00:04:38,906 --> 00:04:39,776
And I said there were four


156
00:04:39,776 --> 00:04:41,366
things and this last part isn't


157
00:04:41,366 --> 00:04:42,856
really part of the API itself


158
00:04:42,856 --> 00:04:43,836
but I wanted to bring it up


159
00:04:43,836 --> 00:04:44,906
because it's an important part


160
00:04:44,906 --> 00:04:46,116
of our automation story.


161
00:04:46,636 --> 00:04:47,756
We've made a couple of important


162
00:04:47,756 --> 00:04:49,006
changes the Transporter to help


163
00:04:49,006 --> 00:04:50,326
smooth all of this out for you.


164
00:04:50,806 --> 00:04:52,186
First of all, Transporter will


165
00:04:52,186 --> 00:04:53,256
officially be supported on


166
00:04:53,256 --> 00:04:53,706
Linux.


167
00:04:54,436 --> 00:04:56,126
And also, you can take the API


168
00:04:56,126 --> 00:04:58,116
tokens that you use for the new


169
00:04:58,116 --> 00:04:59,296
API and send those through to


170
00:04:59,296 --> 00:05:00,076
Transporter and it can use those


171
00:05:00,076 --> 00:05:00,976
for authentication as well.


172
00:05:01,066 --> 00:05:04,206
It just makes the process easier


173
00:05:04,206 --> 00:05:04,956
to manage for you.


174
00:05:05,456 --> 00:05:08,066
Okay, we have a whole bunch to


175
00:05:08,066 --> 00:05:08,466
get through.


176
00:05:08,466 --> 00:05:09,536
We're going to go kind of fast


177
00:05:09,536 --> 00:05:09,826
today.


178
00:05:10,136 --> 00:05:11,276
I apologize for that but we have


179
00:05:11,276 --> 00:05:11,936
a lot to cover.


180
00:05:12,086 --> 00:05:12,746
We're going to talk about


181
00:05:12,796 --> 00:05:14,286
getting data and changing data


182
00:05:14,286 --> 00:05:14,856
with the API.


183
00:05:15,326 --> 00:05:16,596
We'll talk about relationships


184
00:05:16,596 --> 00:05:17,686
which is how the different parts


185
00:05:17,686 --> 00:05:19,386
of the API fit together and how


186
00:05:19,386 --> 00:05:20,296
you work with those.


187
00:05:20,726 --> 00:05:21,626
We'll talk about how to handle


188
00:05:21,626 --> 00:05:23,256
errors, how to get access to the


189
00:05:23,256 --> 00:05:24,436
API and authenticate your


190
00:05:24,436 --> 00:05:26,046
request, then we'll wrap up with


191
00:05:26,046 --> 00:05:27,066
some best practices.


192
00:05:28,676 --> 00:05:29,446
So, you ready to get started?


193
00:05:30,516 --> 00:05:33,586
[ Applause ]


194
00:05:34,086 --> 00:05:35,646
So like I said, we're going to


195
00:05:35,646 --> 00:05:36,766
start with getting data and that


196
00:05:36,766 --> 00:05:37,906
means we start right here,


197
00:05:38,206 --> 00:05:40,996
api.appstoreconnect.apple.com.


198
00:05:41,296 --> 00:05:42,966
This is the home base of the API


199
00:05:43,426 --> 00:05:44,336
and from here we want to


200
00:05:44,336 --> 00:05:45,586
construct a URL.


201
00:05:46,286 --> 00:05:48,126
First we will add a version.


202
00:05:48,836 --> 00:05:50,356
Now all API endpoints have a


203
00:05:50,356 --> 00:05:51,566
version and right now that's


204
00:05:51,566 --> 00:05:51,976
always v1.


205
00:05:51,976 --> 00:05:54,216
But inevitably as App Store


206
00:05:54,216 --> 00:05:55,936
Connect grows and changes over


207
00:05:55,936 --> 00:05:57,536
time, we'll have to make changes


208
00:05:57,536 --> 00:05:59,056
to the API that might cause your


209
00:05:59,056 --> 00:06:00,116
code to stop working.


210
00:06:00,596 --> 00:06:01,986
So when that ever happens, we'll


211
00:06:01,986 --> 00:06:03,496
change this version number and


212
00:06:03,496 --> 00:06:04,466
the old version will keep


213
00:06:04,466 --> 00:06:06,046
working for a period of time so


214
00:06:06,046 --> 00:06:07,366
you have time to adjust to our


215
00:06:07,366 --> 00:06:07,856
changes.


216
00:06:08,746 --> 00:06:10,716
Now after the version, we have


217
00:06:10,716 --> 00:06:11,506
to add something called the


218
00:06:11,506 --> 00:06:12,906
resource type name.


219
00:06:13,356 --> 00:06:14,376
This is a really important


220
00:06:14,376 --> 00:06:15,306
concept in the API.


221
00:06:15,806 --> 00:06:17,216
The resource is like the


222
00:06:17,216 --> 00:06:19,106
fundamental unit of the API.


223
00:06:19,816 --> 00:06:20,876
Conceptually, you can almost


224
00:06:20,876 --> 00:06:22,176
think of the API as a big


225
00:06:22,176 --> 00:06:24,096
collection of resources that you


226
00:06:24,096 --> 00:06:24,796
operate on.


227
00:06:25,546 --> 00:06:26,446
We have a whole bunch of


228
00:06:26,446 --> 00:06:27,586
resources in the API.


229
00:06:28,336 --> 00:06:29,366
Most of them map to things


230
00:06:29,366 --> 00:06:30,306
you're familiar with in App


231
00:06:30,306 --> 00:06:31,156
Store Connect and we're not


232
00:06:31,156 --> 00:06:32,266
going to talk about all of those


233
00:06:32,266 --> 00:06:32,616
today.


234
00:06:32,956 --> 00:06:34,566
We'll focus on just a few and


235
00:06:34,566 --> 00:06:36,346
we'll start with Users.


236
00:06:36,996 --> 00:06:38,916
And so here we have a complete


237
00:06:38,916 --> 00:06:41,216
API URL: api.appstoreconnect


238
00:06:41,396 --> 00:06:44,876
.apple.com/v1/users.


239
00:06:45,296 --> 00:06:46,556
This URL represents all the


240
00:06:46,556 --> 00:06:47,866
users on your team.


241
00:06:48,566 --> 00:06:49,536
And, of course, you can go get


242
00:06:49,536 --> 00:06:51,766
this URL and you'll get back a


243
00:06:51,766 --> 00:06:52,696
JSON object.


244
00:06:53,526 --> 00:06:54,186
And the first thing you'll


245
00:06:54,186 --> 00:06:55,546
notice about this subject is it


246
00:06:55,546 --> 00:06:57,176
has a data property.


247
00:06:57,826 --> 00:06:59,316
Anytime we send you a successful


248
00:06:59,316 --> 00:07:01,136
response with data in it, we


249
00:07:01,136 --> 00:07:02,336
include this data property.


250
00:07:02,906 --> 00:07:04,666
In this case, it's an array of


251
00:07:04,736 --> 00:07:06,036
user resources.


252
00:07:06,736 --> 00:07:08,136
Now, you can only see one user


253
00:07:08,136 --> 00:07:09,136
on the screen right now but if


254
00:07:09,136 --> 00:07:10,106
the screen were much, much


255
00:07:10,176 --> 00:07:11,576
taller, you'd see that all the


256
00:07:11,576 --> 00:07:13,116
users in your team are in this


257
00:07:13,116 --> 00:07:13,406
array.


258
00:07:13,406 --> 00:07:15,726
Now I want to focus in on some


259
00:07:15,726 --> 00:07:17,366
of the data we return to you


260
00:07:17,426 --> 00:07:18,776
with each of these resource


261
00:07:18,776 --> 00:07:19,406
responses.


262
00:07:20,086 --> 00:07:21,856
Every resource has a type just


263
00:07:21,856 --> 00:07:23,536
telling you what it is and an ID


264
00:07:23,536 --> 00:07:25,476
that uniquely identifies this


265
00:07:25,476 --> 00:07:27,446
resource across all of App Store


266
00:07:27,446 --> 00:07:27,796
Connect.


267
00:07:28,846 --> 00:07:30,046
Then we have the attributes.


268
00:07:30,506 --> 00:07:31,666
This is probably the stuff that


269
00:07:31,666 --> 00:07:32,596
you're most interested in.


270
00:07:32,756 --> 00:07:33,996
For users, it's things like


271
00:07:34,026 --> 00:07:36,026
their first name, last name, and


272
00:07:36,026 --> 00:07:36,826
email address.


273
00:07:37,596 --> 00:07:38,906
The values of these attributes


274
00:07:38,906 --> 00:07:40,086
are usually simple types like


275
00:07:40,126 --> 00:07:42,286
this, strings, numbers, dates


276
00:07:42,286 --> 00:07:44,066
and times or Booleans but they


277
00:07:44,066 --> 00:07:45,246
can also be complex types


278
00:07:45,246 --> 00:07:46,346
sometimes, like arrays and


279
00:07:46,346 --> 00:07:46,876
objects.


280
00:07:48,076 --> 00:07:49,326
After the attributes, we have


281
00:07:49,326 --> 00:07:50,156
relationships.


282
00:07:50,686 --> 00:07:51,606
We're going to skip those for


283
00:07:51,606 --> 00:07:51,826
now.


284
00:07:51,826 --> 00:07:52,756
We'll come back and look at them


285
00:07:52,756 --> 00:07:52,996
later.


286
00:07:53,656 --> 00:07:54,896
And then we have links and in


287
00:07:54,896 --> 00:07:55,976
particular what we call the


288
00:07:55,976 --> 00:07:57,766
resource self link.


289
00:07:58,286 --> 00:08:00,016
Now this is a URL that uniquely


290
00:08:00,016 --> 00:08:01,336
identifies this particular


291
00:08:01,336 --> 00:08:03,226
resource, in this case the first


292
00:08:03,226 --> 00:08:04,736
user in the result here.


293
00:08:04,896 --> 00:08:06,246
Every resource we send back to


294
00:08:06,246 --> 00:08:08,066
you includes this resource self


295
00:08:08,066 --> 00:08:08,306
link.


296
00:08:09,736 --> 00:08:10,846
It always looks like this:


297
00:08:11,066 --> 00:08:13,476
api.appstoreconnect.apple.com


298
00:08:13,726 --> 00:08:15,206
and then the version, v1, and


299
00:08:15,576 --> 00:08:17,316
then the resource type, users,


300
00:08:17,686 --> 00:08:19,246
and then the identifier of that


301
00:08:19,246 --> 00:08:19,746
resource.


302
00:08:20,216 --> 00:08:22,006
And you can go get it and you


303
00:08:22,006 --> 00:08:23,236
get back data that looks almost


304
00:08:23,236 --> 00:08:24,636
exactly like what we just saw.


305
00:08:25,076 --> 00:08:26,306
The only difference here is


306
00:08:26,306 --> 00:08:27,796
we're seeing just this one user


307
00:08:27,796 --> 00:08:29,726
now instead of all the users on


308
00:08:29,726 --> 00:08:30,256
your team.


309
00:08:30,826 --> 00:08:34,145
So that's two ways to get data.


310
00:08:34,756 --> 00:08:36,405
You get a list of resources or


311
00:08:36,405 --> 00:08:37,916
an individual resource, but of


312
00:08:37,916 --> 00:08:38,696
course you're going to want to


313
00:08:38,696 --> 00:08:40,186
change data as well.


314
00:08:40,186 --> 00:08:42,216
And to do that, we lean on


315
00:08:42,306 --> 00:08:44,246
common REST conventions, so this


316
00:08:44,246 --> 00:08:45,826
will also feel familiar to a lot


317
00:08:45,826 --> 00:08:46,136
of you.


318
00:08:46,916 --> 00:08:47,976
You've already seen how to get


319
00:08:47,976 --> 00:08:48,556
resources.


320
00:08:49,046 --> 00:08:50,846
To create a new resource, you'll


321
00:08:50,846 --> 00:08:52,726
use the http POST method.


322
00:08:53,296 --> 00:08:54,826
To change a resource, you'll use


323
00:08:54,876 --> 00:08:57,036
PATCH, and to delete a resource,


324
00:08:57,266 --> 00:08:58,536
you'll use the DELETE method.


325
00:08:59,366 --> 00:09:00,336
So let's try this.


326
00:09:00,466 --> 00:09:01,626
Let's say we want to add a new


327
00:09:01,626 --> 00:09:03,086
user to your team.


328
00:09:03,836 --> 00:09:04,656
Now a quick aside.


329
00:09:04,786 --> 00:09:06,466
We can't add the user directly.


330
00:09:06,806 --> 00:09:08,156
Just like in App Store Connect


331
00:09:08,156 --> 00:09:09,706
itself, you have to invite the


332
00:09:09,706 --> 00:09:11,476
user to your team and then they


333
00:09:11,476 --> 00:09:12,986
can accept that invitation.


334
00:09:13,246 --> 00:09:15,596
So we're going to create a user


335
00:09:15,596 --> 00:09:17,066
invitation resource.


336
00:09:17,696 --> 00:09:18,546
It looks like this.


337
00:09:18,796 --> 00:09:20,016
We do a POST because we're


338
00:09:20,016 --> 00:09:20,546
creating.


339
00:09:21,236 --> 00:09:22,726
And the URL is the user


340
00:09:22,726 --> 00:09:24,296
Invitations resource URL.


341
00:09:24,296 --> 00:09:26,046
And then we have to send in the


342
00:09:26,046 --> 00:09:27,846
data for this user.


343
00:09:28,246 --> 00:09:29,796
Now this data looks a lot like


344
00:09:29,796 --> 00:09:31,396
what you've seen when we fetched


345
00:09:31,396 --> 00:09:32,606
users before.


346
00:09:32,736 --> 00:09:33,686
But there's one important


347
00:09:33,686 --> 00:09:34,666
difference I want to point out.


348
00:09:35,296 --> 00:09:37,546
We have a type user Invitations


349
00:09:38,016 --> 00:09:38,846
but we don't have an ID.


350
00:09:39,946 --> 00:09:41,316
Now Apple will assign an ID to


351
00:09:41,386 --> 00:09:42,946
every resource you create for


352
00:09:42,946 --> 00:09:43,176
you.


353
00:09:43,176 --> 00:09:44,806
So you don't include that in the


354
00:09:44,806 --> 00:09:45,256
POST.


355
00:09:45,876 --> 00:09:47,066
We've also left off links


356
00:09:47,196 --> 00:09:48,246
because they're not required for


357
00:09:48,246 --> 00:09:48,736
creation.


358
00:09:48,736 --> 00:09:50,336
And we've left off relationships


359
00:09:50,376 --> 00:09:51,606
because they're not relevant in


360
00:09:51,606 --> 00:09:52,516
this particular case.


361
00:09:53,216 --> 00:09:54,856
If we run this request, we get a


362
00:09:54,856 --> 00:09:55,476
response.


363
00:09:56,116 --> 00:09:58,346
In particular, this is a 201


364
00:09:58,566 --> 00:09:59,756
CREATED response.


365
00:10:00,066 --> 00:10:01,226
That's just standard REST


366
00:10:01,286 --> 00:10:02,316
behavior to tell you that the


367
00:10:02,316 --> 00:10:03,506
resource was successfully


368
00:10:03,506 --> 00:10:03,976
created.


369
00:10:05,266 --> 00:10:06,976
And we also include the full


370
00:10:06,976 --> 00:10:08,446
resource information in the


371
00:10:08,446 --> 00:10:10,086
response data and this is


372
00:10:10,086 --> 00:10:11,336
important for two reasons.


373
00:10:11,606 --> 00:10:13,656
First, it gives you the ID and


374
00:10:14,046 --> 00:10:15,736
the resource self link of the


375
00:10:15,736 --> 00:10:17,396
resource that was created, which


376
00:10:17,396 --> 00:10:18,426
is stuff you're probably going


377
00:10:18,426 --> 00:10:19,676
to need later so you can come


378
00:10:19,676 --> 00:10:21,136
back and operate on this


379
00:10:21,136 --> 00:10:21,676
resource.


380
00:10:22,226 --> 00:10:23,816
And also if you look at the


381
00:10:23,816 --> 00:10:25,286
attributes, you may see


382
00:10:25,286 --> 00:10:27,076
attributes in this response that


383
00:10:27,076 --> 00:10:28,686
you didn't include in the POST.


384
00:10:29,626 --> 00:10:30,636
For example with user


385
00:10:30,636 --> 00:10:32,036
invitations, Apple will assign


386
00:10:32,036 --> 00:10:34,056
an expiration Date to every user


387
00:10:34,056 --> 00:10:35,166
invitation you create.


388
00:10:35,476 --> 00:10:37,106
Now you don't set that, so you


389
00:10:37,106 --> 00:10:38,416
don't include it in the POST.


390
00:10:38,656 --> 00:10:39,746
And that's why this response


391
00:10:39,796 --> 00:10:41,296
data is really important to you.


392
00:10:41,296 --> 00:10:42,346
It shows you the complete


393
00:10:42,346 --> 00:10:44,376
picture of this resource after


394
00:10:44,376 --> 00:10:46,166
it's been created and all of our


395
00:10:46,166 --> 00:10:48,966
rules have been applied to it.


396
00:10:49,226 --> 00:10:50,496
Now if this user accepts,


397
00:10:50,496 --> 00:10:51,746
they'll become a user on our


398
00:10:51,836 --> 00:10:52,126
team.


399
00:10:52,526 --> 00:10:53,846
And suppose we want to come back


400
00:10:53,846 --> 00:10:55,656
later and modify them in some


401
00:10:55,656 --> 00:10:57,116
way, like for instance you can


402
00:10:57,116 --> 00:10:58,356
see from the attributes here


403
00:10:58,356 --> 00:10:59,726
this user has the developer


404
00:10:59,726 --> 00:11:00,066
role.


405
00:11:00,696 --> 00:11:01,846
So let's change that so they


406
00:11:01,846 --> 00:11:02,896
have the developer and the


407
00:11:02,896 --> 00:11:03,556
marketing role.


408
00:11:04,676 --> 00:11:05,706
We're changing an existing


409
00:11:05,706 --> 00:11:06,236
resource.


410
00:11:06,336 --> 00:11:07,656
So we do a PATCH request.


411
00:11:08,386 --> 00:11:09,766
The URL this time is the


412
00:11:09,766 --> 00:11:12,256
resource self link of the user


413
00:11:12,256 --> 00:11:13,046
we're changing.


414
00:11:13,746 --> 00:11:14,396
And if you look at the


415
00:11:14,396 --> 00:11:16,326
attributes, we're only including


416
00:11:16,776 --> 00:11:17,676
the roles attribute.


417
00:11:17,846 --> 00:11:19,236
This request says change this


418
00:11:19,236 --> 00:11:21,016
user so that they have the roles


419
00:11:21,016 --> 00:11:22,776
of DEVELOPER and MARKETING.


420
00:11:23,066 --> 00:11:23,796
We didn't want to change


421
00:11:23,796 --> 00:11:25,066
anything else about the user, so


422
00:11:25,066 --> 00:11:26,546
we specifically didn't include


423
00:11:26,856 --> 00:11:27,836
the other attributes.


424
00:11:28,836 --> 00:11:30,336
If we run this request, again we


425
00:11:30,336 --> 00:11:32,656
get a successful response and we


426
00:11:32,656 --> 00:11:33,646
get the full resource


427
00:11:33,646 --> 00:11:35,646
representation of the resource


428
00:11:35,766 --> 00:11:36,956
with our changes applied.


429
00:11:37,586 --> 00:11:39,776
Now the last thing you probably


430
00:11:39,776 --> 00:11:40,746
want to do with the resource is


431
00:11:40,746 --> 00:11:41,776
delete it and this is the


432
00:11:41,776 --> 00:11:43,176
simplest operation of them all.


433
00:11:43,396 --> 00:11:45,326
We just do a DELETE request to


434
00:11:45,326 --> 00:11:47,056
the resource self link and we


435
00:11:47,056 --> 00:11:49,536
get a 204 NO CONTENT response.


436
00:11:49,856 --> 00:11:51,046
If you're familiar with REST,


437
00:11:51,046 --> 00:11:52,336
you know that any status code in


438
00:11:52,336 --> 00:11:54,376
the 200s means success.


439
00:11:54,886 --> 00:11:56,316
So this is the API telling you


440
00:11:56,316 --> 00:11:57,806
that the user has successfully


441
00:11:57,806 --> 00:11:58,556
been deleted.


442
00:11:58,956 --> 00:12:00,156
And we didn't need to include


443
00:12:00,156 --> 00:12:01,436
any additional data this time,


444
00:12:01,706 --> 00:12:03,286
so we use the NO CONTENT version


445
00:12:03,446 --> 00:12:04,606
of a success response.


446
00:12:05,156 --> 00:12:07,886
Now before we move on to the


447
00:12:07,886 --> 00:12:09,056
next segment, I'd like to invite


448
00:12:09,056 --> 00:12:10,656
my colleague Sehoon Shon up to


449
00:12:10,656 --> 00:12:12,126
show you some examples of how to


450
00:12:12,126 --> 00:12:13,406
use these resources in


451
00:12:13,406 --> 00:12:14,356
real-world scenarios.


452
00:12:14,596 --> 00:12:14,956
Sehoon.


453
00:12:15,516 --> 00:12:21,436
[ Applause ]


454
00:12:21,936 --> 00:12:22,626
>> Thanks, Geoff.


455
00:12:23,996 --> 00:12:24,846
Hi, everyone.


456
00:12:24,906 --> 00:12:26,356
My name is Sehoon Shon and I'm a


457
00:12:26,356 --> 00:12:27,626
software engineer in TestFlight


458
00:12:27,626 --> 00:12:29,476
team and I'm here today to show


459
00:12:29,476 --> 00:12:31,196
you the live demo on App Store


460
00:12:31,196 --> 00:12:31,776
Connect API.


461
00:12:33,306 --> 00:12:34,726
We'll look at one use case and


462
00:12:34,726 --> 00:12:36,446
see how we can apply the API on


463
00:12:36,446 --> 00:12:37,246
users resource.


464
00:12:38,316 --> 00:12:39,496
Let's say someone in our team


465
00:12:39,496 --> 00:12:41,166
has left our company and we'd


466
00:12:41,166 --> 00:12:42,716
like to find this user and


467
00:12:42,716 --> 00:12:43,986
remove this user from the team


468
00:12:44,086 --> 00:12:44,876
in App Store Connect.


469
00:12:44,946 --> 00:12:45,976
So let's go see a demo.


470
00:13:01,856 --> 00:13:04,036
We'll begin by getting the list


471
00:13:04,036 --> 00:13:05,556
of all the users in our team by


472
00:13:05,556 --> 00:13:07,596
sending GET request to the users


473
00:13:07,596 --> 00:13:10,156
resource, which is GET v1/users.


474
00:13:10,986 --> 00:13:12,346
And this returns all the users


475
00:13:12,346 --> 00:13:14,046
we have access to in our team.


476
00:13:15,196 --> 00:13:16,416
Now let's try to find the user


477
00:13:16,416 --> 00:13:17,796
we're looking for and we can


478
00:13:17,796 --> 00:13:19,176
search by the email of the user


479
00:13:19,176 --> 00:13:20,356
by applying the filter


480
00:13:20,356 --> 00:13:20,896
parameter.


481
00:13:21,206 --> 00:13:22,606
So this filter parameter of


482
00:13:22,606 --> 00:13:24,246
email specified that we would


483
00:13:24,246 --> 00:13:25,536
like to find the users that


484
00:13:25,536 --> 00:13:28,116
matches JohnAppleseed@mac.com.


485
00:13:28,366 --> 00:13:29,526
So let's send this request.


486
00:13:30,976 --> 00:13:32,126
And we get a response with a


487
00:13:32,126 --> 00:13:33,686
user that contains the email of


488
00:13:33,686 --> 00:13:34,496
John Appleseed.


489
00:13:35,836 --> 00:13:39,166
Now let's use the ID of this


490
00:13:39,166 --> 00:13:41,126
user to get the instance of this


491
00:13:41,126 --> 00:13:46,766
user, which is users/ID and this


492
00:13:46,766 --> 00:13:48,176
should return the instance of


493
00:13:48,176 --> 00:13:49,746
the user with a matching ID.


494
00:13:50,346 --> 00:13:53,106
And we get a response with the


495
00:13:53,106 --> 00:13:54,526
username John Appleseed.


496
00:13:55,516 --> 00:13:56,596
So we found the user that we're


497
00:13:56,596 --> 00:13:57,236
looking for.


498
00:13:57,666 --> 00:13:59,376
Let's try to remove this user by


499
00:13:59,376 --> 00:14:01,376
sending DELETE request to self


500
00:14:01,376 --> 00:14:02,276
link of this user.


501
00:14:03,416 --> 00:14:05,496
So we'll replace GET with


502
00:14:05,496 --> 00:14:05,886
DELETE.


503
00:14:07,116 --> 00:14:08,526
And this should remove the user


504
00:14:08,526 --> 00:14:09,386
with the matching ID.


505
00:14:09,996 --> 00:14:14,816
And we get a 204, which means


506
00:14:14,816 --> 00:14:16,326
the deletion was successful and


507
00:14:16,356 --> 00:14:18,056
NO CONTENT since the content of


508
00:14:18,056 --> 00:14:19,636
user is no longer available.


509
00:14:20,276 --> 00:14:21,786
Finally, let's confirm that the


510
00:14:21,786 --> 00:14:23,376
user is indeed removed by


511
00:14:23,376 --> 00:14:24,756
sending GET request to the self


512
00:14:24,756 --> 00:14:25,536
link once again.


513
00:14:25,536 --> 00:14:29,306
And now we get 404 NOT FOUND and


514
00:14:29,306 --> 00:14:30,926
it looks like the user is indeed


515
00:14:30,926 --> 00:14:31,286
removed.


516
00:14:31,826 --> 00:14:35,926
So in this demo, we saw how to


517
00:14:35,926 --> 00:14:37,616
get collections of user, how to


518
00:14:37,616 --> 00:14:40,116
find instance of user, how to


519
00:14:40,116 --> 00:14:41,936
search user by applying filter,


520
00:14:42,416 --> 00:14:43,886
and how to remove user by


521
00:14:44,096 --> 00:14:44,956
sending DELETE request.


522
00:14:45,796 --> 00:14:47,136
And this concludes the demo on


523
00:14:47,136 --> 00:14:48,226
how to use App Source Connect


524
00:14:48,226 --> 00:14:49,986
API with the users resource.


525
00:14:50,456 --> 00:14:51,626
And I'll give the stage back to


526
00:14:51,626 --> 00:14:51,796
Geoff.


527
00:14:51,796 --> 00:14:51,976
Thank you.


528
00:14:52,516 --> 00:14:58,746
[ Applause ]


529
00:14:59,246 --> 00:15:02,296
>> Thanks, Sehoon.


530
00:15:02,446 --> 00:15:04,456
So now you know how to create,


531
00:15:04,666 --> 00:15:07,086
read, update, and delete all


532
00:15:07,086 --> 00:15:08,326
these various resources and it


533
00:15:08,326 --> 00:15:09,326
and might feel like that's


534
00:15:09,576 --> 00:15:10,666
basically it, that's all you


535
00:15:10,666 --> 00:15:12,426
need to be able to do but isn't


536
00:15:12,426 --> 00:15:14,086
the whole story and that brings


537
00:15:14,086 --> 00:15:15,566
us to relationships.


538
00:15:16,046 --> 00:15:16,966
Sometimes it's not the


539
00:15:16,966 --> 00:15:18,406
individual resources that you're


540
00:15:18,406 --> 00:15:19,776
most interested in but the


541
00:15:19,776 --> 00:15:21,246
connections between them.


542
00:15:21,576 --> 00:15:22,816
It helps if I give you an


543
00:15:22,816 --> 00:15:23,296
example.


544
00:15:23,846 --> 00:15:25,066
We have a resource called Beta


545
00:15:25,066 --> 00:15:25,606
Groups.


546
00:15:25,756 --> 00:15:27,116
These represent all your groups


547
00:15:27,206 --> 00:15:27,876
in TestFlight.


548
00:15:28,426 --> 00:15:29,556
We have another one called Beta


549
00:15:29,636 --> 00:15:31,256
Testers that represent all of


550
00:15:31,256 --> 00:15:32,636
the people who can test your


551
00:15:32,636 --> 00:15:33,436
applications.


552
00:15:33,916 --> 00:15:35,106
And as you know, you can put


553
00:15:35,106 --> 00:15:36,946
those testers into groups.


554
00:15:37,696 --> 00:15:38,726
So how do we model something


555
00:15:38,726 --> 00:15:40,336
like this in the API?


556
00:15:41,316 --> 00:15:42,536
Let's start by getting Beta


557
00:15:42,536 --> 00:15:42,956
Groups.


558
00:15:43,426 --> 00:15:46,026
We go a GET v1/beta Groups and


559
00:15:46,026 --> 00:15:47,536
we get back an array of Groups.


560
00:15:47,986 --> 00:15:48,886
And if we look at the first


561
00:15:48,886 --> 00:15:50,576
group and in particular the


562
00:15:50,576 --> 00:15:52,616
relationship section, we see


563
00:15:52,616 --> 00:15:53,616
that this group has three


564
00:15:53,616 --> 00:15:55,796
relationships: app, beta


565
00:15:55,796 --> 00:15:57,016
testers, and builds.


566
00:15:57,286 --> 00:15:58,416
We're only going to talk about


567
00:15:58,416 --> 00:15:59,426
Beta Testers today.


568
00:15:59,756 --> 00:16:00,856
So we'll pop that one open.


569
00:16:01,246 --> 00:16:03,226
And again, we see another links


570
00:16:03,386 --> 00:16:03,886
section.


571
00:16:04,566 --> 00:16:05,886
These are links associated with


572
00:16:05,886 --> 00:16:07,576
this beta testers relationship


573
00:16:07,876 --> 00:16:09,796
on this first group in the list.


574
00:16:09,996 --> 00:16:11,036
You'd have a section like this


575
00:16:11,136 --> 00:16:12,486
in each of the groups in the


576
00:16:12,486 --> 00:16:12,746
array.


577
00:16:13,216 --> 00:16:15,016
There're two links here, the


578
00:16:15,016 --> 00:16:16,026
first one we call the


579
00:16:16,026 --> 00:16:17,756
relationship self link.


580
00:16:18,046 --> 00:16:19,776
And it's a URL that represents


581
00:16:19,946 --> 00:16:21,616
the relationship itself.


582
00:16:22,616 --> 00:16:25,116
And we use this URL to operate


583
00:16:25,386 --> 00:16:26,846
on this relationship.


584
00:16:27,796 --> 00:16:28,686
Now let me explain that.


585
00:16:29,126 --> 00:16:30,376
We said we want to add testers


586
00:16:30,416 --> 00:16:32,436
to this group, right, but I want


587
00:16:32,436 --> 00:16:32,826
to be clear.


588
00:16:32,826 --> 00:16:33,966
The testers are already in


589
00:16:33,966 --> 00:16:35,536
TestFlight and the group is


590
00:16:35,536 --> 00:16:36,556
already in TestFlight.


591
00:16:36,866 --> 00:16:37,796
So we want to take these


592
00:16:37,796 --> 00:16:39,646
existing testers and put them


593
00:16:39,646 --> 00:16:41,646
into this existing group and


594
00:16:41,646 --> 00:16:43,456
that's a operation that doesn't


595
00:16:43,456 --> 00:16:44,546
fit with any of the things we've


596
00:16:44,546 --> 00:16:45,516
learned about already, if you


597
00:16:45,516 --> 00:16:46,516
think about it, right, like


598
00:16:46,516 --> 00:16:48,006
we're not creating or editing or


599
00:16:48,006 --> 00:16:49,426
deleting testers and we're not


600
00:16:49,426 --> 00:16:51,226
really editing the group either,


601
00:16:51,616 --> 00:16:53,036
at least not the attributes of


602
00:16:53,036 --> 00:16:53,396
the group.


603
00:16:53,996 --> 00:16:55,366
So conceptually, you might say


604
00:16:55,366 --> 00:16:56,366
that we're creating new


605
00:16:56,366 --> 00:16:58,166
connections between this group


606
00:16:58,526 --> 00:17:00,036
and its related beta testers.


607
00:17:00,306 --> 00:17:00,966
And this is where the


608
00:17:00,966 --> 00:17:02,766
relationship self link comes in.


609
00:17:03,486 --> 00:17:04,296
It looks like this.


610
00:17:04,415 --> 00:17:05,976
We do a POST request to the


611
00:17:05,976 --> 00:17:07,236
relationship self link.


612
00:17:07,465 --> 00:17:09,016
And if you look at the data


613
00:17:09,016 --> 00:17:10,326
we're sending, it's these type


614
00:17:10,326 --> 00:17:12,556
and id pairs of the two testers


615
00:17:12,556 --> 00:17:13,705
in this case that we want to add


616
00:17:13,705 --> 00:17:14,356
to this group.


617
00:17:14,796 --> 00:17:16,236
So this request says take these


618
00:17:16,236 --> 00:17:17,756
two testers and put them into


619
00:17:17,756 --> 00:17:18,286
this group.


620
00:17:18,376 --> 00:17:19,296
We don't have to include more


621
00:17:19,296 --> 00:17:20,415
tester information because the


622
00:17:20,415 --> 00:17:21,406
testers are already in


623
00:17:21,406 --> 00:17:21,896
TestFlight.


624
00:17:22,496 --> 00:17:25,096
If we run it, we get a 204 NO


625
00:17:25,096 --> 00:17:26,236
CONTENT response again.


626
00:17:26,496 --> 00:17:27,685
That's the API telling you that


627
00:17:27,685 --> 00:17:28,786
the testers have been added to


628
00:17:28,786 --> 00:17:29,186
the group.


629
00:17:30,266 --> 00:17:31,106
I'm sure some of you are


630
00:17:31,106 --> 00:17:32,036
wondering "What if I want to


631
00:17:32,036 --> 00:17:33,266
take testers out of the group


632
00:17:33,266 --> 00:17:33,726
instead?"


633
00:17:33,726 --> 00:17:34,986
And the answer is you do it in


634
00:17:34,986 --> 00:17:35,916
exactly the same way.


635
00:17:35,916 --> 00:17:36,926
It's the same URL.


636
00:17:37,296 --> 00:17:38,486
It's the same data format.


637
00:17:38,786 --> 00:17:39,716
You'll just use the DELETE


638
00:17:39,716 --> 00:17:41,126
method instead of the POST


639
00:17:41,126 --> 00:17:41,496
method.


640
00:17:41,496 --> 00:17:44,486
Now let's take a look at Beta


641
00:17:44,486 --> 00:17:46,256
Groups again and look at that


642
00:17:46,336 --> 00:17:46,926
second link.


643
00:17:47,896 --> 00:17:50,716
This is what we call the related


644
00:17:50,716 --> 00:17:50,956
link.


645
00:17:51,546 --> 00:17:53,186
This URL represents the actual


646
00:17:53,186 --> 00:17:54,836
related data, in this case the


647
00:17:54,836 --> 00:17:56,076
testers in this group.


648
00:17:56,076 --> 00:17:58,246
If we go and get this data, we


649
00:17:58,246 --> 00:17:59,266
get back an array of beta


650
00:17:59,266 --> 00:17:59,816
testers.


651
00:18:00,206 --> 00:18:01,576
The format here looks exactly


652
00:18:01,576 --> 00:18:03,646
like what you'd get if you did a


653
00:18:03,796 --> 00:18:05,666
Get of v1/beta testers.


654
00:18:05,926 --> 00:18:06,776
The only difference is we're


655
00:18:06,776 --> 00:18:07,866
getting the testers in this


656
00:18:07,866 --> 00:18:09,386
group rather than all the


657
00:18:09,386 --> 00:18:10,406
testers in your TestFlight


658
00:18:10,406 --> 00:18:10,866
program.


659
00:18:11,366 --> 00:18:13,766
And I want to pause there and


660
00:18:13,766 --> 00:18:14,776
make sure I'm being clear.


661
00:18:15,276 --> 00:18:16,216
We're getting the testers in


662
00:18:16,216 --> 00:18:17,586
this group and when I say "this


663
00:18:17,586 --> 00:18:18,566
group," I mean the group whose


664
00:18:18,566 --> 00:18:20,506
identifier is in that URL.


665
00:18:20,506 --> 00:18:22,756
So this URL get the testers in


666
00:18:22,756 --> 00:18:23,246
one group.


667
00:18:23,606 --> 00:18:24,576
If I want to get the testers in


668
00:18:24,576 --> 00:18:25,696
a bunch of different groups


669
00:18:26,056 --> 00:18:27,456
using this mechanism, I'd have


670
00:18:27,486 --> 00:18:28,476
to make a bunch of different


671
00:18:28,476 --> 00:18:30,356
requests, which can sometimes be


672
00:18:30,356 --> 00:18:30,956
inconvenient.


673
00:18:31,476 --> 00:18:32,636
So we do have one more way to


674
00:18:32,636 --> 00:18:33,456
get related data.


675
00:18:33,676 --> 00:18:34,496
It's called the include


676
00:18:34,496 --> 00:18:34,966
parameter.


677
00:18:35,606 --> 00:18:36,406
It looks like this.


678
00:18:36,546 --> 00:18:39,106
We do a GET of v1/beta Groups


679
00:18:39,506 --> 00:18:40,496
and then we add this query


680
00:18:40,566 --> 00:18:42,866
parameter: include = beta


681
00:18:42,866 --> 00:18:43,386
testers.


682
00:18:43,716 --> 00:18:45,316
And this tells the API while


683
00:18:45,316 --> 00:18:46,596
you're bringing me back the beta


684
00:18:46,596 --> 00:18:48,426
groups, also include information


685
00:18:48,426 --> 00:18:49,766
about the related testers in


686
00:18:49,986 --> 00:18:50,936
each group.


687
00:18:51,296 --> 00:18:54,096
Here's what it looks like.


688
00:18:54,726 --> 00:18:55,706
We get our array of beta


689
00:18:55,706 --> 00:18:57,616
testers, of beta Groups, excuse


690
00:18:57,616 --> 00:18:59,006
me, and if you look at the beta


691
00:18:59,006 --> 00:19:00,616
testers relationship in the


692
00:19:00,616 --> 00:19:02,316
first group, you see this new


693
00:19:02,316 --> 00:19:03,376
section called data.


694
00:19:03,376 --> 00:19:06,046
And this has the type and id


695
00:19:06,086 --> 00:19:07,966
pairs of the testers in this


696
00:19:07,966 --> 00:19:08,246
group.


697
00:19:08,786 --> 00:19:09,736
Now if you could see the whole


698
00:19:09,736 --> 00:19:11,006
response here, you'd see a data


699
00:19:11,006 --> 00:19:12,706
section like this inside each


700
00:19:12,706 --> 00:19:14,856
beta testers relationship inside


701
00:19:14,856 --> 00:19:16,736
each group that's in this array,


702
00:19:17,376 --> 00:19:17,586
right.


703
00:19:18,216 --> 00:19:19,616
But this is just the type and


704
00:19:19,616 --> 00:19:19,806
IDs.


705
00:19:19,846 --> 00:19:20,606
I'm sure you're wondering where


706
00:19:20,606 --> 00:19:21,876
the actual tester information


707
00:19:21,876 --> 00:19:22,066
is.


708
00:19:22,316 --> 00:19:23,426
And if we scroll all the way


709
00:19:23,426 --> 00:19:24,646
down to the end of this


710
00:19:24,646 --> 00:19:26,236
response, we also have a new


711
00:19:26,236 --> 00:19:27,466
section called include.


712
00:19:28,156 --> 00:19:29,506
And this is an array of beta


713
00:19:29,506 --> 00:19:30,986
testers with the full tester


714
00:19:30,986 --> 00:19:31,646
information.


715
00:19:32,096 --> 00:19:33,396
More generally the include


716
00:19:33,536 --> 00:19:35,696
section has a full resource


717
00:19:35,696 --> 00:19:37,606
representation of every resource


718
00:19:37,646 --> 00:19:39,636
that you have included by way of


719
00:19:39,636 --> 00:19:40,456
relationships.


720
00:19:40,796 --> 00:19:42,616
And then we can match by type


721
00:19:42,616 --> 00:19:44,706
and id, figure out which testers


722
00:19:45,006 --> 00:19:46,056
belong to which group.


723
00:19:46,516 --> 00:19:48,936
Now you might be wondering why


724
00:19:48,936 --> 00:19:49,586
we do this.


725
00:19:49,586 --> 00:19:50,876
We have the data section with


726
00:19:50,876 --> 00:19:52,276
all of our groups and then we


727
00:19:52,276 --> 00:19:53,436
have the include section with


728
00:19:53,436 --> 00:19:54,816
all of our included testers.


729
00:19:55,146 --> 00:19:56,096
And we do this for an important


730
00:19:56,096 --> 00:19:56,406
reason.


731
00:19:56,406 --> 00:19:57,576
We have this test on the screen


732
00:19:57,576 --> 00:19:59,476
John Appleseed and that tester


733
00:19:59,476 --> 00:20:00,756
might be in multiple groups,


734
00:20:00,876 --> 00:20:01,086
right.


735
00:20:01,416 --> 00:20:02,546
The way we have this structured,


736
00:20:03,046 --> 00:20:04,316
the data for John Appleseed is


737
00:20:04,316 --> 00:20:05,796
only in the response one time,


738
00:20:05,956 --> 00:20:07,286
no matter how many groups they


739
00:20:07,286 --> 00:20:08,786
appear in, in the response.


740
00:20:08,906 --> 00:20:09,286
Make sense?


741
00:20:09,916 --> 00:20:12,896
Okay. Sehoon is going to come


742
00:20:12,896 --> 00:20:14,256
back up now and show us some


743
00:20:14,256 --> 00:20:16,086
more real-world examples with


744
00:20:16,086 --> 00:20:16,746
relationships.


745
00:20:16,836 --> 00:20:17,196
Sehoon.


746
00:20:18,516 --> 00:20:22,976
[ Applause ]


747
00:20:23,476 --> 00:20:24,046
>> Thanks, Geoff.


748
00:20:26,336 --> 00:20:28,176
So for this part of the demo


749
00:20:28,256 --> 00:20:29,666
we'll look at TestFlight and see


750
00:20:29,666 --> 00:20:30,746
how we can create new beta


751
00:20:30,746 --> 00:20:32,276
groups and add some external


752
00:20:32,276 --> 00:20:33,566
testers and we'll see some


753
00:20:33,566 --> 00:20:35,216
relationship between testers and


754
00:20:35,216 --> 00:20:35,636
groups.


755
00:20:35,916 --> 00:20:36,976
So let's go see the demo.


756
00:20:46,176 --> 00:20:48,116
We'll start by creating a new


757
00:20:48,116 --> 00:20:49,746
beta group by posting to the


758
00:20:49,746 --> 00:20:51,296
beta groups endpoint which is


759
00:20:51,416 --> 00:20:52,806
v1/beta Groups.


760
00:20:52,916 --> 00:20:55,546
When we're creating a resource,


761
00:20:55,546 --> 00:20:56,696
we also need to provide the


762
00:20:56,696 --> 00:20:57,926
payload that looks like this.


763
00:20:57,986 --> 00:20:59,476
We have the data with the type


764
00:20:59,476 --> 00:21:00,816
of beta Groups and a set of


765
00:21:00,816 --> 00:21:01,366
attributes.


766
00:21:01,366 --> 00:21:03,296
And since the name is the only


767
00:21:03,296 --> 00:21:04,696
required field when we're


768
00:21:04,696 --> 00:21:06,516
creating a group, let's give it


769
00:21:06,516 --> 00:21:08,776
a name and we'll simply call it


770
00:21:09,116 --> 00:21:09,606
Test Group.


771
00:21:10,606 --> 00:21:11,866
And I'll send the request now


772
00:21:12,566 --> 00:21:15,136
and we get a 409 CONFLICT


773
00:21:15,136 --> 00:21:15,636
response.


774
00:21:15,936 --> 00:21:18,316
So let's look at the details.


775
00:21:18,606 --> 00:21:19,686
It says, "You must provide a


776
00:21:19,686 --> 00:21:21,106
value for the relationship app


777
00:21:21,386 --> 00:21:22,106
with this request."


778
00:21:22,886 --> 00:21:24,266
So in TestFlight, you cannot


779
00:21:24,266 --> 00:21:25,746
create a beta Group that does


780
00:21:25,746 --> 00:21:27,486
not belong to any app and, thus,


781
00:21:27,486 --> 00:21:28,916
we must create a relationship to


782
00:21:28,916 --> 00:21:30,366
an app while we're creating beta


783
00:21:30,366 --> 00:21:30,726
Group.


784
00:21:31,106 --> 00:21:31,946
And how do we do this?


785
00:21:32,296 --> 00:21:33,666
We can include the relationship


786
00:21:33,666 --> 00:21:37,496
in the payload like this.


787
00:21:37,676 --> 00:21:38,836
So now we have the relationship


788
00:21:38,836 --> 00:21:40,936
in the payload of an app with a


789
00:21:40,936 --> 00:21:42,926
data type of apps and the id


790
00:21:43,006 --> 00:21:44,776
specifies which apps the beta


791
00:21:44,776 --> 00:21:46,396
Groups should be linked to.


792
00:21:46,676 --> 00:21:48,006
So this will create beta Groups


793
00:21:48,006 --> 00:21:49,546
with the name of Test Group and


794
00:21:49,546 --> 00:21:52,436
link to an app with the id.


795
00:21:52,546 --> 00:21:53,936
So let's resend this request.


796
00:21:54,936 --> 00:21:56,506
And now we get a 201 CREATED


797
00:21:56,506 --> 00:21:56,876
response.


798
00:21:57,356 --> 00:21:58,796
In the response, we have the id


799
00:21:58,946 --> 00:21:59,846
that is generated.


800
00:21:59,846 --> 00:22:04,006
So let's copy this id.


801
00:22:04,136 --> 00:22:05,156
So we just created a group


802
00:22:05,156 --> 00:22:05,986
called Test Group.


803
00:22:06,066 --> 00:22:07,236
But what if you don't like the


804
00:22:07,236 --> 00:22:08,136
name of the group we just


805
00:22:08,136 --> 00:22:08,736
created?


806
00:22:09,446 --> 00:22:10,936
We can modify the existing group


807
00:22:11,046 --> 00:22:12,836
by sending PATCH request to the


808
00:22:12,836 --> 00:22:13,786
self link of this group.


809
00:22:15,156 --> 00:22:18,066
We'll send PATCH and then beta


810
00:22:18,496 --> 00:22:22,646
Groups/the id and we'll also


811
00:22:22,646 --> 00:22:24,306
need to provide the payload that


812
00:22:24,306 --> 00:22:25,236
looks like this.


813
00:22:25,816 --> 00:22:27,806
This looks a lot like payload


814
00:22:27,806 --> 00:22:29,336
for posting but we also need to


815
00:22:29,336 --> 00:22:31,296
provide the id to make sure that


816
00:22:31,296 --> 00:22:32,286
we're modifying the correct


817
00:22:32,286 --> 00:22:32,576
data.


818
00:22:32,656 --> 00:22:35,736
And let's paste the id of the


819
00:22:35,736 --> 00:22:36,476
beta Group.


820
00:22:36,476 --> 00:22:38,096
And the only information we'd


821
00:22:38,096 --> 00:22:39,586
like to change is the name.


822
00:22:39,986 --> 00:22:42,746
So let's rename it to WWDC


823
00:22:44,216 --> 00:22:44,346
Group.


824
00:22:44,516 --> 00:22:46,546
And I'm sending the request and


825
00:22:46,546 --> 00:22:47,926
now we get a 200 response and it


826
00:22:47,926 --> 00:22:48,926
looks like the name has been


827
00:22:48,926 --> 00:22:49,666
updated.


828
00:22:50,686 --> 00:22:51,896
So now we have the group that we


829
00:22:51,896 --> 00:22:52,376
wanted.


830
00:22:52,486 --> 00:22:53,996
Let's start adding some external


831
00:22:53,996 --> 00:22:54,506
testers.


832
00:22:55,186 --> 00:22:57,146
To create tester, we send POST


833
00:22:57,146 --> 00:22:58,676
request to the beta testers


834
00:22:58,676 --> 00:23:02,736
endpoint, which is v1/beta


835
00:23:02,936 --> 00:23:03,616
testers.


836
00:23:04,976 --> 00:23:06,746
And we'll also need to provide


837
00:23:06,746 --> 00:23:08,086
the payload that looks like


838
00:23:08,086 --> 00:23:08,286
this.


839
00:23:08,286 --> 00:23:10,996
It has a type of beta testers


840
00:23:11,126 --> 00:23:12,136
and a set of attribute.


841
00:23:12,326 --> 00:23:13,906
So we'll create tester that's


842
00:23:13,906 --> 00:23:16,396
called Kate Bell and this also


843
00:23:16,396 --> 00:23:18,736
has a relationship to the beta


844
00:23:18,736 --> 00:23:20,266
Groups and this will create Beta


845
00:23:20,266 --> 00:23:22,046
Tester and also assign to the


846
00:23:22,046 --> 00:23:23,226
beta Group at the same time.


847
00:23:24,086 --> 00:23:25,246
So if you paste the id of the


848
00:23:25,246 --> 00:23:27,396
beta Group we just created, this


849
00:23:27,396 --> 00:23:29,396
will assign the tester to the


850
00:23:29,396 --> 00:23:30,056
WWDC Group.


851
00:23:30,056 --> 00:23:33,666
And we get a 201 CREATED


852
00:23:33,666 --> 00:23:35,076
response and it looks like the


853
00:23:35,076 --> 00:23:36,746
tester is created and also


854
00:23:36,746 --> 00:23:37,586
assigned to the group at the


855
00:23:37,586 --> 00:23:38,156
same time.


856
00:23:39,086 --> 00:23:40,526
While we're here, let's add one


857
00:23:40,526 --> 00:23:42,366
more tester and all we need to


858
00:23:42,366 --> 00:23:43,786
do is simply replace this


859
00:23:43,786 --> 00:23:45,646
attribute portion with a


860
00:23:45,646 --> 00:23:48,436
different person's name and this


861
00:23:48,436 --> 00:23:50,216
will create John Appleseed to


862
00:23:50,416 --> 00:23:52,926
the same group.


863
00:23:54,626 --> 00:23:56,916
And again, we get a 201 CREATED


864
00:23:56,916 --> 00:23:57,456
response.


865
00:23:58,196 --> 00:23:59,766
So we just added two testers to


866
00:23:59,766 --> 00:24:01,796
the group and now let's confirm


867
00:24:01,796 --> 00:24:03,476
that these two testers are


868
00:24:03,476 --> 00:24:04,636
indeed inside the group by


869
00:24:04,736 --> 00:24:07,246
sending GET request to the


870
00:24:07,246 --> 00:24:09,576
related link between beta Groups


871
00:24:09,636 --> 00:24:10,546
and beta testers.


872
00:24:11,856 --> 00:24:14,536
So this link, /the id of the


873
00:24:14,536 --> 00:24:17,966
group/betaTesters, this will


874
00:24:18,006 --> 00:24:19,916
return all the beta Tester that


875
00:24:19,916 --> 00:24:21,206
are assigned to the beta Groups


876
00:24:21,336 --> 00:24:23,516
with the specified id.


877
00:24:24,576 --> 00:24:26,166
And as you can see, we have John


878
00:24:26,166 --> 00:24:28,076
Appleseed that's added earlier.


879
00:24:29,256 --> 00:24:30,756
And this response we have a lot


880
00:24:30,756 --> 00:24:32,926
of information including list of


881
00:24:32,926 --> 00:24:33,886
attribute as well as


882
00:24:33,886 --> 00:24:34,756
relationship.


883
00:24:34,886 --> 00:24:36,556
But what if you only care about


884
00:24:36,556 --> 00:24:37,856
maybe the email of the tester?


885
00:24:38,896 --> 00:24:40,446
We can trim down the response by


886
00:24:40,446 --> 00:24:41,786
applying the special parameter


887
00:24:41,786 --> 00:24:43,516
called fields and this will


888
00:24:43,516 --> 00:24:45,046
allow us to trim down the body


889
00:24:45,186 --> 00:24:46,796
and only look at what we would


890
00:24:46,796 --> 00:24:48,316
like to see.


891
00:24:48,416 --> 00:24:51,046
If you do fields of beta testers


892
00:24:52,316 --> 00:24:56,196
equals email, as you can see now


893
00:24:56,196 --> 00:24:57,606
the response only contains the


894
00:24:57,606 --> 00:24:59,086
email of the user and nothing


895
00:24:59,086 --> 00:24:59,326
else.


896
00:25:00,326 --> 00:25:01,926
And we have the two testers that


897
00:25:01,926 --> 00:25:03,426
are added to this beta Groups.


898
00:25:09,656 --> 00:25:12,086
So in this demo, we saw how to


899
00:25:12,086 --> 00:25:13,506
create beta Groups and beta


900
00:25:13,506 --> 00:25:15,286
testers and so some relationship


901
00:25:15,286 --> 00:25:16,486
between testers and groups.


902
00:25:17,376 --> 00:25:18,696
And this concludes the demo on


903
00:25:18,746 --> 00:25:20,086
How to Use App Store Connect API


904
00:25:20,306 --> 00:25:20,946
with TestFlight.


905
00:25:20,946 --> 00:25:22,316
And I'll give the stage back to


906
00:25:22,316 --> 00:25:22,566
Geoff.


907
00:25:22,616 --> 00:25:22,976
Thank you.


908
00:25:23,516 --> 00:25:29,386
[ Applause ]


909
00:25:29,886 --> 00:25:30,706
>> Thanks again, Sehoon.


910
00:25:30,706 --> 00:25:31,476
That was awesome.


911
00:25:32,706 --> 00:25:36,746
So that's getting data, changing


912
00:25:36,746 --> 00:25:37,996
data, and relationships.


913
00:25:37,996 --> 00:25:38,986
It kind of covers the basic


914
00:25:38,986 --> 00:25:39,976
features of the API.


915
00:25:40,566 --> 00:25:41,736
But as you saw a glimpse in


916
00:25:41,736 --> 00:25:43,446
Sehoon's demo, sometimes you


917
00:25:43,446 --> 00:25:44,806
make mistakes and we can't


918
00:25:44,806 --> 00:25:45,916
process your request.


919
00:25:46,236 --> 00:25:47,166
So we're going to shift gears


920
00:25:47,166 --> 00:25:48,616
now and talk about how the API


921
00:25:48,836 --> 00:25:50,576
communicates these errors back


922
00:25:50,666 --> 00:25:51,036
to you.


923
00:25:52,186 --> 00:25:53,636
Anytime a request fails, you'll


924
00:25:53,636 --> 00:25:54,736
get a response that looks like


925
00:25:54,736 --> 00:25:55,076
this.


926
00:25:56,536 --> 00:25:58,546
Now the first thing to notice is


927
00:25:58,546 --> 00:25:59,286
that we'll send back an


928
00:25:59,286 --> 00:26:01,416
appropriate HTTP response status


929
00:26:01,976 --> 00:26:03,256
indicating what went wrong,


930
00:26:03,356 --> 00:26:04,866
usually something in the 400s.


931
00:26:05,166 --> 00:26:06,286
And this is often all you really


932
00:26:06,286 --> 00:26:06,596
need.


933
00:26:06,596 --> 00:26:08,256
Most REST client libraries have


934
00:26:08,256 --> 00:26:10,136
a Did Succeed or it Is Success


935
00:26:10,136 --> 00:26:11,716
function and you can call that


936
00:26:11,716 --> 00:26:13,096
and it will correctly tell you


937
00:26:13,096 --> 00:26:14,806
if the request was successful or


938
00:26:14,806 --> 00:26:15,016
not.


939
00:26:15,516 --> 00:26:16,656
But if you want to know more


940
00:26:16,656 --> 00:26:18,036
about what went wrong, you can


941
00:26:18,036 --> 00:26:19,416
look down into the response.


942
00:26:19,956 --> 00:26:21,416
When a request fails, instead of


943
00:26:21,416 --> 00:26:22,756
that data property we've been


944
00:26:22,756 --> 00:26:24,246
seeing all along, we'll give you


945
00:26:24,246 --> 00:26:25,316
an error's property.


946
00:26:25,546 --> 00:26:26,856
This is an array of error


947
00:26:26,856 --> 00:26:27,376
objects.


948
00:26:27,746 --> 00:26:28,876
But there can be multiple of


949
00:26:28,876 --> 00:26:30,706
them, each one representing some


950
00:26:30,706 --> 00:26:31,986
problem with the request you


951
00:26:31,986 --> 00:26:32,326
sent.


952
00:26:33,456 --> 00:26:35,206
They have an id that uniquely


953
00:26:35,206 --> 00:26:36,786
identifies this particular error


954
00:26:37,246 --> 00:26:38,456
of this particular response.


955
00:26:38,726 --> 00:26:40,586
You might log this away and if


956
00:26:40,586 --> 00:26:41,416
you think there's a problem on


957
00:26:41,416 --> 00:26:42,446
our end, send it to us.


958
00:26:42,446 --> 00:26:43,706
It'll help us track it down.


959
00:26:44,486 --> 00:26:46,336
More useful for you is the title


960
00:26:46,336 --> 00:26:46,986
and detail.


961
00:26:47,496 --> 00:26:48,606
These together give you an


962
00:26:48,606 --> 00:26:50,556
English language explanation of


963
00:26:50,556 --> 00:26:51,266
what went wrong.


964
00:26:51,536 --> 00:26:52,716
From the title here, I can see


965
00:26:52,716 --> 00:26:53,596
that I have something wrong with


966
00:26:53,596 --> 00:26:54,366
my parameters.


967
00:26:54,916 --> 00:26:56,766
And from the detail, it tells me


968
00:26:56,766 --> 00:26:58,106
that I'm filtering by email and


969
00:26:58,106 --> 00:26:59,556
right away I see that I spelled


970
00:26:59,556 --> 00:27:00,716
email incorrectly.


971
00:27:01,296 --> 00:27:03,056
So these are great values to log


972
00:27:03,056 --> 00:27:04,546
and use in your troubleshooting


973
00:27:04,786 --> 00:27:07,246
and learning the API, but you


974
00:27:07,246 --> 00:27:08,566
don't want to use these in your


975
00:27:08,566 --> 00:27:08,886
code.


976
00:27:08,886 --> 00:27:09,506
You don't want to try and


977
00:27:09,506 --> 00:27:10,856
interpret these with your code.


978
00:27:10,856 --> 00:27:12,296
I don't make any promises that


979
00:27:12,296 --> 00:27:13,436
we won't change the wording on


980
00:27:13,436 --> 00:27:15,326
these messages over time without


981
00:27:15,326 --> 00:27:15,716
warning.


982
00:27:17,056 --> 00:27:18,646
For programmatic error handling,


983
00:27:19,056 --> 00:27:19,926
you want to use the code


984
00:27:19,926 --> 00:27:20,846
property instead.


985
00:27:21,366 --> 00:27:22,216
This is a stable


986
00:27:22,216 --> 00:27:23,466
machine-readable string that


987
00:27:23,466 --> 00:27:24,906
represents what went wrong.


988
00:27:25,376 --> 00:27:27,186
It's a hierarchical value with


989
00:27:27,186 --> 00:27:28,506
dots between levels of


990
00:27:28,506 --> 00:27:29,296
specificity.


991
00:27:29,626 --> 00:27:30,786
So in this example, I can see


992
00:27:30,786 --> 00:27:32,086
that I have a parameter error,


993
00:27:32,086 --> 00:27:33,926
generally, and more specifically


994
00:27:34,086 --> 00:27:35,146
one of those parameters is


995
00:27:35,206 --> 00:27:35,786
invalid.


996
00:27:36,196 --> 00:27:37,686
Now these codes can get very


997
00:27:37,686 --> 00:27:39,756
long and very specific and


998
00:27:39,756 --> 00:27:40,786
sometimes you don't care about


999
00:27:40,786 --> 00:27:41,986
all that specificity.


1000
00:27:41,986 --> 00:27:43,046
In fact, usually you don't.


1001
00:27:43,046 --> 00:27:44,796
So we structure them this way so


1002
00:27:44,796 --> 00:27:46,036
that you can do a prefix match


1003
00:27:46,036 --> 00:27:47,906
on the code and be as generic or


1004
00:27:47,906 --> 00:27:49,866
a specific as you need to be for


1005
00:27:49,866 --> 00:27:51,156
your particular use case.


1006
00:27:51,816 --> 00:27:53,086
But if you need to be specific,


1007
00:27:53,186 --> 00:27:54,466
say so you can report back to


1008
00:27:54,466 --> 00:27:56,076
your own users with clarity


1009
00:27:56,076 --> 00:27:57,556
about what went wrong, we try to


1010
00:27:57,556 --> 00:27:58,746
give you enough information to


1011
00:27:58,746 --> 00:27:59,206
do that.


1012
00:28:00,046 --> 00:28:02,006
And we help with that also with


1013
00:28:02,006 --> 00:28:02,896
the source parameter.


1014
00:28:03,246 --> 00:28:05,166
And whenever possible, we track


1015
00:28:05,206 --> 00:28:06,666
this error back to the place in


1016
00:28:06,666 --> 00:28:07,776
the request that caused the


1017
00:28:07,776 --> 00:28:08,326
problem.


1018
00:28:08,656 --> 00:28:09,656
Here I can see that it's the


1019
00:28:09,656 --> 00:28:11,406
filter bracket email parameter,


1020
00:28:11,406 --> 00:28:12,906
specifically, that produced this


1021
00:28:12,906 --> 00:28:13,306
error.


1022
00:28:14,006 --> 00:28:15,106
The source can be a parameter


1023
00:28:15,106 --> 00:28:16,946
like this or it could be a JSON


1024
00:28:16,996 --> 00:28:18,546
pointer pinpointing the spot in


1025
00:28:18,546 --> 00:28:20,486
the JSON data you sent us where


1026
00:28:20,486 --> 00:28:21,596
the problem originates.


1027
00:28:22,246 --> 00:28:24,846
And that's basically everything


1028
00:28:24,846 --> 00:28:25,776
there is to know about the App


1029
00:28:25,776 --> 00:28:27,666
Store Connect API except how to


1030
00:28:27,746 --> 00:28:29,046
get to the App Store Connect API


1031
00:28:29,046 --> 00:28:30,816
and successfully send requests.


1032
00:28:30,846 --> 00:28:32,716
So Julie Richards is going to


1033
00:28:32,716 --> 00:28:34,216
come up on stage now and help


1034
00:28:34,216 --> 00:28:34,656
you with that.


1035
00:28:34,656 --> 00:28:34,776
Julie.


1036
00:28:35,516 --> 00:28:38,500
[ Applause ]


1037
00:28:45,116 --> 00:28:46,226
>> Hi, everyone.


1038
00:28:46,336 --> 00:28:48,246
I'm Julie and I'm an engineer on


1039
00:28:48,246 --> 00:28:49,566
the App Store Connect team.


1040
00:28:49,796 --> 00:28:51,506
I'm here today to talk to you


1041
00:28:51,506 --> 00:28:53,496
about access and authentication.


1042
00:28:54,526 --> 00:28:56,806
So at this point you've seen a


1043
00:28:56,806 --> 00:28:58,356
bunch of different examples of


1044
00:28:58,356 --> 00:28:59,476
endpoints that will be


1045
00:28:59,476 --> 00:29:00,106
available.


1046
00:29:00,706 --> 00:29:01,976
And when you're ready to start


1047
00:29:01,976 --> 00:29:03,226
testing out some of these new


1048
00:29:03,226 --> 00:29:05,326
features, you might start by


1049
00:29:05,326 --> 00:29:07,316
sending a simple GET request


1050
00:29:07,316 --> 00:29:10,286
like this; however, if you were


1051
00:29:10,286 --> 00:29:12,556
to simply curl this endpoint or


1052
00:29:12,726 --> 00:29:13,956
type it into your browser,


1053
00:29:14,406 --> 00:29:15,816
you'll end up with a response


1054
00:29:16,066 --> 00:29:17,196
that looks like this.


1055
00:29:18,436 --> 00:29:20,476
So as Geoff mentioned, we're


1056
00:29:20,476 --> 00:29:22,456
still missing one very important


1057
00:29:22,456 --> 00:29:24,076
step stat and that is


1058
00:29:24,406 --> 00:29:25,746
authentication credentials.


1059
00:29:26,306 --> 00:29:29,616
Now this step is necessary for


1060
00:29:29,616 --> 00:29:30,586
two reasons.


1061
00:29:31,506 --> 00:29:33,776
First, authentication


1062
00:29:33,776 --> 00:29:35,526
credentials give context to your


1063
00:29:35,526 --> 00:29:35,776
request.


1064
00:29:36,086 --> 00:29:38,126
After all, you don't want all


1065
00:29:38,296 --> 00:29:38,436
apps.


1066
00:29:38,646 --> 00:29:40,606
You want your app.


1067
00:29:40,606 --> 00:29:42,876
And most importantly, these


1068
00:29:42,876 --> 00:29:45,286
credentials secure the API and


1069
00:29:45,286 --> 00:29:47,406
ensure that no one but you will


1070
00:29:47,406 --> 00:29:48,656
have access to your data.


1071
00:29:49,336 --> 00:29:53,026
So to add these credentials to


1072
00:29:53,026 --> 00:29:54,966
your request, you'll need to


1073
00:29:54,966 --> 00:29:57,196
first create an API Key.


1074
00:29:57,776 --> 00:30:00,136
You'll then use that key to


1075
00:30:00,136 --> 00:30:02,806
generate tokens and those tokens


1076
00:30:02,806 --> 00:30:04,326
will need to be sent with every


1077
00:30:04,376 --> 00:30:04,626
request.


1078
00:30:05,856 --> 00:30:06,936
So let's start with API Key.


1079
00:30:07,156 --> 00:30:12,136
Each key is actually a public


1080
00:30:12,136 --> 00:30:13,456
key, private key pair.


1081
00:30:14,716 --> 00:30:16,946
The private key belongs to you


1082
00:30:17,086 --> 00:30:18,886
and will be used to add a unique


1083
00:30:18,886 --> 00:30:20,296
signature to your token.


1084
00:30:20,836 --> 00:30:23,886
The public key will be used by


1085
00:30:24,036 --> 00:30:26,596
Apple to verify that signature


1086
00:30:26,596 --> 00:30:28,426
and ensure that it was in fact


1087
00:30:28,576 --> 00:30:30,486
signed by the associated private


1088
00:30:30,586 --> 00:30:30,826
key.


1089
00:30:31,376 --> 00:30:34,606
To create one of the keys,


1090
00:30:34,746 --> 00:30:36,876
you'll need to log in to App


1091
00:30:37,086 --> 00:30:39,626
Store Connect and navigate to a


1092
00:30:39,626 --> 00:30:41,456
new API Keys tab.


1093
00:30:42,756 --> 00:30:45,396
Your admin users will be able to


1094
00:30:45,396 --> 00:30:47,216
manage your team's API Keys.


1095
00:30:47,926 --> 00:30:50,056
You can create new Keys and


1096
00:30:50,056 --> 00:30:51,106
revoke them when they're no


1097
00:30:51,106 --> 00:30:51,816
longer needed.


1098
00:30:52,386 --> 00:30:54,996
Each key will need to be


1099
00:30:54,996 --> 00:30:56,576
assigned a level of access and


1100
00:30:57,326 --> 00:30:59,886
this will determine what API


1101
00:30:59,936 --> 00:31:01,446
services the key can be used


1102
00:31:01,446 --> 00:31:01,726
for.


1103
00:31:03,406 --> 00:31:05,466
Once created, new keys will


1104
00:31:05,466 --> 00:31:07,366
appear in this list and the


1105
00:31:07,366 --> 00:31:09,186
private key file, that's the


1106
00:31:09,186 --> 00:31:10,976
part that belongs to you, will


1107
00:31:10,976 --> 00:31:12,396
be available to download.


1108
00:31:13,726 --> 00:31:15,796
Now it's important to note that


1109
00:31:16,066 --> 00:31:17,936
each private key can only be


1110
00:31:17,936 --> 00:31:18,886
downloaded once.


1111
00:31:19,846 --> 00:31:21,436
That is because these keys are


1112
00:31:21,436 --> 00:31:22,766
not stored by Apple.


1113
00:31:23,296 --> 00:31:25,676
In fact, your key is not even


1114
00:31:25,676 --> 00:31:27,926
generated until the moment you


1115
00:31:27,926 --> 00:31:29,026
decide to download it.


1116
00:31:30,206 --> 00:31:31,836
So you can think of these keys


1117
00:31:31,836 --> 00:31:32,826
like real keys.


1118
00:31:33,486 --> 00:31:35,306
They belong to you and they must


1119
00:31:35,346 --> 00:31:39,176
be managed and protected by you.


1120
00:31:39,386 --> 00:31:42,766
Also much like real keys, these


1121
00:31:42,766 --> 00:31:45,386
keys do not expire, so if the


1122
00:31:45,386 --> 00:31:47,486
key is lost or stolen it will


1123
00:31:47,486 --> 00:31:49,456
continue to have access to your


1124
00:31:50,096 --> 00:31:51,706
data until it is revoked through


1125
00:31:51,706 --> 00:31:52,506
App Store Connect.


1126
00:31:53,516 --> 00:31:55,106
So for this reason, it is very


1127
00:31:55,106 --> 00:31:57,066
important to keep your keys safe


1128
00:31:57,066 --> 00:31:57,716
and secure.


1129
00:31:59,196 --> 00:32:00,956
Once you have your private key


1130
00:32:00,956 --> 00:32:03,026
file, you'll be ready to start


1131
00:32:03,026 --> 00:32:04,836
generating JSON web tokens.


1132
00:32:05,896 --> 00:32:07,166
Now each of these tokens will


1133
00:32:07,166 --> 00:32:08,916
need to contain a few pieces of


1134
00:32:08,916 --> 00:32:09,676
information.


1135
00:32:10,906 --> 00:32:12,246
First, you'll need to add your


1136
00:32:12,246 --> 00:32:14,246
Issuer ID, that's your account


1137
00:32:14,326 --> 00:32:17,156
identifier, and this ID can be


1138
00:32:17,156 --> 00:32:18,896
found at the top of that new


1139
00:32:18,946 --> 00:32:19,416
page.


1140
00:32:20,946 --> 00:32:22,726
You'll also need to find or


1141
00:32:22,726 --> 00:32:24,176
you'll also need to add the ID


1142
00:32:24,176 --> 00:32:25,086
of your key.


1143
00:32:25,786 --> 00:32:28,596
This ID can also be found on


1144
00:32:28,596 --> 00:32:31,526
this new page and it is specific


1145
00:32:31,526 --> 00:32:33,246
to the key that you'll be using.


1146
00:32:33,786 --> 00:32:37,836
Now each token will also need an


1147
00:32:37,836 --> 00:32:39,126
expiration timestamp.


1148
00:32:39,466 --> 00:32:41,886
As I mentioned before, your keys


1149
00:32:41,886 --> 00:32:44,236
do not expire but these tokens


1150
00:32:44,236 --> 00:32:45,816
can only be used for up to 20


1151
00:32:45,816 --> 00:32:46,036
minutes.


1152
00:32:46,036 --> 00:32:49,056
And the last two pieces of


1153
00:32:49,056 --> 00:32:51,166
information are simply constant.


1154
00:32:51,846 --> 00:32:54,106
By that, I mean they will remain


1155
00:32:54,106 --> 00:32:56,576
the same across all tokens and


1156
00:32:56,696 --> 00:32:58,706
for all App Store Connect APIs,


1157
00:32:59,186 --> 00:33:00,906
the first is the Audience for


1158
00:33:00,906 --> 00:33:02,466
the token and that will always


1159
00:33:02,526 --> 00:33:03,736
be App Store Connect.


1160
00:33:04,206 --> 00:33:07,036
And finally, you'll need to


1161
00:33:07,036 --> 00:33:09,976
assign or you'll need to add the


1162
00:33:09,976 --> 00:33:12,076
algorithm that was used to sign


1163
00:33:12,076 --> 00:33:12,666
the token.


1164
00:33:13,096 --> 00:33:15,976
And for this, we have chosen to


1165
00:33:15,976 --> 00:33:16,686
use ES256.


1166
00:33:17,406 --> 00:33:19,006
Now this algorithm corresponds


1167
00:33:19,096 --> 00:33:21,256
to a JWT-supported algorithm


1168
00:33:21,626 --> 00:33:23,346
that we have chosen to have you


1169
00:33:23,346 --> 00:33:25,256
use but don't worry, you don't


1170
00:33:25,256 --> 00:33:26,826
need to implement this


1171
00:33:26,826 --> 00:33:27,596
algorithm.


1172
00:33:28,216 --> 00:33:30,326
Fortunately, JWT provides


1173
00:33:30,786 --> 00:33:32,486
multiple libraries across


1174
00:33:32,546 --> 00:33:34,556
virtually any language that


1175
00:33:34,556 --> 00:33:36,056
makes creating and signing these


1176
00:33:36,136 --> 00:33:37,866
tokens as easy as possible.


1177
00:33:39,066 --> 00:33:40,816
This example behind me is


1178
00:33:40,816 --> 00:33:42,676
written in Ruby and, as you can


1179
00:33:42,736 --> 00:33:45,026
see, all I need to do is pass in


1180
00:33:45,026 --> 00:33:46,686
these few pieces of information


1181
00:33:47,046 --> 00:33:48,726
along with my private key and


1182
00:33:48,726 --> 00:33:50,856
this encode method returns to me


1183
00:33:50,856 --> 00:33:52,376
a complete and signed token.


1184
00:33:53,696 --> 00:33:56,706
That token can then be added to


1185
00:33:56,706 --> 00:33:59,586
my request by simply placing it


1186
00:33:59,586 --> 00:34:00,806
inside of an authorization


1187
00:34:00,806 --> 00:34:01,086
header.


1188
00:34:03,626 --> 00:34:06,006
So now that we know how to


1189
00:34:06,006 --> 00:34:08,606
create these keys and how to use


1190
00:34:08,606 --> 00:34:10,406
these keys to add tokens to our


1191
00:34:10,406 --> 00:34:12,576
requests, let's go ahead and


1192
00:34:12,576 --> 00:34:12,976
give it a try.


1193
00:34:22,856 --> 00:34:25,025
Okay, so here's that new API


1194
00:34:25,025 --> 00:34:27,356
Keys page and I don't have any


1195
00:34:27,426 --> 00:34:27,906
keys yet.


1196
00:34:28,545 --> 00:34:30,056
So I'll go ahead and create one.


1197
00:34:30,735 --> 00:34:33,466
I'll call it demo and I'll have


1198
00:34:33,466 --> 00:34:35,735
to assign a level of access.


1199
00:34:35,735 --> 00:34:36,835
So here, if I were to choose


1200
00:34:36,835 --> 00:34:39,076
something like finance, I'd get


1201
00:34:39,076 --> 00:34:40,735
a key that has access to things


1202
00:34:40,735 --> 00:34:42,585
like financial reports or sales


1203
00:34:42,585 --> 00:34:44,295
reports but it won't have access


1204
00:34:44,295 --> 00:34:47,116
to things like beta testers or


1205
00:34:47,116 --> 00:34:47,626
builds.


1206
00:34:48,106 --> 00:34:50,766
I can add on levels of access or


1207
00:34:50,856 --> 00:34:52,916
I can choose admin and I'll have


1208
00:34:52,916 --> 00:34:54,646
a key that has access to all


1209
00:34:54,646 --> 00:34:54,835
APIs.


1210
00:34:54,835 --> 00:34:56,366
So I'm going to stick with


1211
00:34:56,366 --> 00:34:57,056
admin.


1212
00:34:57,056 --> 00:34:59,226
And when I generate my key, I


1213
00:34:59,576 --> 00:35:00,986
can see that my private key is


1214
00:35:00,986 --> 00:35:01,976
available to download.


1215
00:35:02,086 --> 00:35:06,386
As I mentioned earlier, my


1216
00:35:06,386 --> 00:35:07,466
private key can only be


1217
00:35:07,466 --> 00:35:08,356
downloaded once.


1218
00:35:08,806 --> 00:35:10,706
If I lose my key or accidentally


1219
00:35:10,706 --> 00:35:12,276
delete it, I can't come back


1220
00:35:12,336 --> 00:35:13,386
here to re-download it.


1221
00:35:13,946 --> 00:35:16,026
So for that reason, I'm prompted


1222
00:35:16,026 --> 00:35:17,186
to make sure that I'm ready to


1223
00:35:17,186 --> 00:35:18,186
download this now.


1224
00:35:19,256 --> 00:35:20,796
And I am, so let's go ahead and


1225
00:35:20,796 --> 00:35:21,366
download.


1226
00:35:21,886 --> 00:35:24,816
Now that I have my private key


1227
00:35:24,816 --> 00:35:26,806
in my Downloads folder, I can


1228
00:35:26,806 --> 00:35:28,586
pull up that script we saw


1229
00:35:28,586 --> 00:35:29,046
earlier.


1230
00:35:29,046 --> 00:35:31,796
And I'll need to copy over my


1231
00:35:31,796 --> 00:35:31,976
ISSUER ID.


1232
00:35:37,616 --> 00:35:39,126
That's the one that's shared


1233
00:35:39,126 --> 00:35:40,416
across your API Keys.


1234
00:35:41,026 --> 00:35:43,426
And I'll also need to copy that


1235
00:35:43,426 --> 00:35:44,576
ID of the private key I just


1236
00:35:44,576 --> 00:35:44,976
downloaded.


1237
00:35:49,516 --> 00:35:51,326
And once I have those IDs in


1238
00:35:51,326 --> 00:35:53,136
place, my private key will be


1239
00:35:53,136 --> 00:35:54,676
loaded in from my Downloads


1240
00:35:54,726 --> 00:35:55,136
folder.


1241
00:35:55,136 --> 00:35:57,106
And I'll generate a new token.


1242
00:35:58,426 --> 00:36:02,456
So if we pull up the terminal, I


1243
00:36:02,456 --> 00:36:06,226
can curl that apps endpoint.


1244
00:36:06,226 --> 00:36:08,566
And as we expected, we get that


1245
00:36:08,566 --> 00:36:09,576
401 response.


1246
00:36:09,576 --> 00:36:10,976
So let's call my script.


1247
00:36:17,816 --> 00:36:19,536
And I get a new token.


1248
00:36:20,126 --> 00:36:22,496
So I can take that token and add


1249
00:36:22,496 --> 00:36:23,966
it to my request


1250
00:36:28,996 --> 00:36:30,366
by putting it in an


1251
00:36:30,926 --> 00:36:31,876
authorization header.


1252
00:36:31,876 --> 00:36:32,976
Make sure I spelled that right.


1253
00:36:38,036 --> 00:36:39,626
And I get back the list of my


1254
00:36:39,876 --> 00:36:39,976
apps.


1255
00:36:40,516 --> 00:36:45,316
[ Applause ]


1256
00:36:45,816 --> 00:36:47,896
So as you can see, with just a


1257
00:36:47,896 --> 00:36:50,646
few easy steps I was able to get


1258
00:36:50,646 --> 00:36:52,366
access to the API and start


1259
00:36:52,366 --> 00:36:53,376
getting back real data.


1260
00:36:53,376 --> 00:36:54,466
Thank you.


1261
00:36:54,466 --> 00:36:54,966
Back to Geoff.


1262
00:36:55,516 --> 00:37:01,796
[ Applause ]


1263
00:37:02,296 --> 00:37:02,896
>> Alright.


1264
00:37:02,896 --> 00:37:03,476
Thanks, Julie.


1265
00:37:04,626 --> 00:37:05,976
Pretty cool, huh?


1266
00:37:06,466 --> 00:37:07,856
So that's access and


1267
00:37:07,856 --> 00:37:08,666
authentication.


1268
00:37:08,976 --> 00:37:09,976
And now in the few minutes that


1269
00:37:09,976 --> 00:37:11,046
we have remaining, I want to


1270
00:37:11,046 --> 00:37:12,446
talk about some best practices


1271
00:37:12,446 --> 00:37:13,346
when using the API.


1272
00:37:14,396 --> 00:37:15,576
We're going to start with those


1273
00:37:15,576 --> 00:37:15,956
keys.


1274
00:37:16,146 --> 00:37:17,716
Now as Julie said, those keys


1275
00:37:17,716 --> 00:37:19,496
belong to you and it's your job


1276
00:37:19,496 --> 00:37:20,266
to protect them.


1277
00:37:20,536 --> 00:37:22,176
Anybody who has the keys can


1278
00:37:22,176 --> 00:37:23,066
access your data.


1279
00:37:23,496 --> 00:37:24,806
So ideally, you're going to put


1280
00:37:24,806 --> 00:37:26,116
those keys in some kind of a


1281
00:37:26,116 --> 00:37:27,966
secure key store and your code


1282
00:37:27,966 --> 00:37:29,676
will check them out, use them in


1283
00:37:29,676 --> 00:37:31,126
memory, and never store them


1284
00:37:31,126 --> 00:37:32,696
anywhere, like in a database or


1285
00:37:32,696 --> 00:37:33,306
on disc.


1286
00:37:33,656 --> 00:37:34,946
If you do have to store the keys


1287
00:37:34,946 --> 00:37:36,536
on disc, make sure you check


1288
00:37:36,576 --> 00:37:37,706
your file system permissions


1289
00:37:37,706 --> 00:37:38,536
very carefully.


1290
00:37:39,006 --> 00:37:40,156
And, of course, if you have any


1291
00:37:40,156 --> 00:37:41,506
reason to think a key has been


1292
00:37:41,506 --> 00:37:42,626
compromised in some way,


1293
00:37:42,936 --> 00:37:44,336
immediately log in to App Store


1294
00:37:44,336 --> 00:37:47,256
Connect and revoke that key.


1295
00:37:47,436 --> 00:37:48,306
I also want to talk about the


1296
00:37:48,386 --> 00:37:50,586
tokens that you create from your


1297
00:37:50,586 --> 00:37:51,006
keys.


1298
00:37:51,006 --> 00:37:51,986
Now there's no reason that you


1299
00:37:51,986 --> 00:37:53,186
have to send a different token


1300
00:37:53,186 --> 00:37:54,206
with every request.


1301
00:37:54,426 --> 00:37:55,186
In fact, you'll get better


1302
00:37:55,186 --> 00:37:56,956
performance in your code and on


1303
00:37:56,956 --> 00:37:58,676
our end if you reuse those


1304
00:37:58,676 --> 00:38:00,136
tokens over and over again.


1305
00:38:00,516 --> 00:38:01,966
And usually this is really easy,


1306
00:38:02,016 --> 00:38:02,236
right.


1307
00:38:02,296 --> 00:38:03,566
You just generate a token at the


1308
00:38:03,566 --> 00:38:05,266
top of the script, send it with


1309
00:38:05,266 --> 00:38:06,226
every request until you're


1310
00:38:06,226 --> 00:38:06,686
finished.


1311
00:38:07,266 --> 00:38:08,356
And we let you control the


1312
00:38:08,356 --> 00:38:09,776
expiration time because you're


1313
00:38:09,776 --> 00:38:11,776
the best person to know how long


1314
00:38:11,776 --> 00:38:13,176
it should last, long enough to


1315
00:38:13,176 --> 00:38:14,666
complete that process and not


1316
00:38:14,716 --> 00:38:16,176
significantly longer than it


1317
00:38:16,176 --> 00:38:17,666
needs to be.


1318
00:38:17,906 --> 00:38:18,716
Of course, you might have


1319
00:38:18,786 --> 00:38:20,096
processes that run for longer


1320
00:38:20,096 --> 00:38:21,066
than 20 minutes or run


1321
00:38:21,066 --> 00:38:22,516
continuously and when that's the


1322
00:38:22,516 --> 00:38:23,506
case you'll want to structure


1323
00:38:23,506 --> 00:38:24,586
your code a little differently.


1324
00:38:25,236 --> 00:38:26,096
Maybe you'll generate a


1325
00:38:26,096 --> 00:38:28,046
20-minute token and use it as


1326
00:38:28,086 --> 00:38:29,776
needed and then throw it away


1327
00:38:29,776 --> 00:38:31,096
and issue a new one before the


1328
00:38:31,096 --> 00:38:32,816
old one expires, say every 18


1329
00:38:32,816 --> 00:38:33,216
minutes.


1330
00:38:33,576 --> 00:38:34,646
That way, you're getting maximum


1331
00:38:34,646 --> 00:38:35,876
token reuse for the best


1332
00:38:35,876 --> 00:38:37,166
performance and you're never


1333
00:38:37,166 --> 00:38:38,556
sending expired tokens.


1334
00:38:38,556 --> 00:38:41,446
The next think I want to talk


1335
00:38:41,446 --> 00:38:42,416
about is the links that we


1336
00:38:42,416 --> 00:38:43,646
include in the responses.


1337
00:38:44,206 --> 00:38:45,316
Now we've talked about these


1338
00:38:45,356 --> 00:38:47,056
today as a sort of nice form of


1339
00:38:47,056 --> 00:38:48,566
self-documentation, a way for


1340
00:38:48,566 --> 00:38:50,126
you to look at the data and see


1341
00:38:50,126 --> 00:38:51,366
what else is available, but


1342
00:38:51,366 --> 00:38:52,306
that's not the only reason


1343
00:38:52,306 --> 00:38:52,746
they're there.


1344
00:38:52,976 --> 00:38:54,076
They're actually intended to be


1345
00:38:54,076 --> 00:38:55,676
used by your code.


1346
00:38:56,346 --> 00:38:57,486
When you're doing a multistep


1347
00:38:57,536 --> 00:38:59,856
process, whenever possible take


1348
00:38:59,856 --> 00:39:01,196
the link we gave you out of the


1349
00:39:01,196 --> 00:39:03,076
response and use it for the next


1350
00:39:03,076 --> 00:39:03,886
part of the process.


1351
00:39:04,286 --> 00:39:05,546
This will help you in two ways.


1352
00:39:05,686 --> 00:39:07,336
One, it makes your code more


1353
00:39:07,336 --> 00:39:08,726
generically applicable to


1354
00:39:08,726 --> 00:39:09,856
different parts of the API.


1355
00:39:09,856 --> 00:39:11,946
And two, when that inevitable v2


1356
00:39:11,946 --> 00:39:13,816
API comes along, this will


1357
00:39:13,816 --> 00:39:14,966
reduce the amount of work you


1358
00:39:14,966 --> 00:39:16,516
have to do to adjust to the


1359
00:39:16,516 --> 00:39:17,036
changes.


1360
00:39:18,406 --> 00:39:19,516
And finally, I want to talk


1361
00:39:19,516 --> 00:39:20,606
about the documentation.


1362
00:39:22,046 --> 00:39:23,096
We've talked about the


1363
00:39:23,096 --> 00:39:24,786
consistency of this API today


1364
00:39:24,786 --> 00:39:26,016
and we really focused on that.


1365
00:39:26,016 --> 00:39:27,486
And so any time a resource can


1366
00:39:27,486 --> 00:39:28,966
do something, it will do it in


1367
00:39:28,966 --> 00:39:30,426
the same way as all the other


1368
00:39:30,426 --> 00:39:32,216
resources but of course not


1369
00:39:32,216 --> 00:39:33,436
every resource can do


1370
00:39:33,436 --> 00:39:34,226
everything.


1371
00:39:34,596 --> 00:39:35,566
You already saw an example of


1372
00:39:35,566 --> 00:39:36,396
this with users.


1373
00:39:36,396 --> 00:39:37,716
We had to create an invitation.


1374
00:39:37,806 --> 00:39:39,426
There's no API to create a user.


1375
00:39:39,856 --> 00:39:41,066
So the documentation is how you


1376
00:39:41,066 --> 00:39:41,736
figure this out.


1377
00:39:41,906 --> 00:39:43,496
It tells you what the resource


1378
00:39:43,496 --> 00:39:45,046
can do, what operations are


1379
00:39:45,046 --> 00:39:46,346
available, what parameters it


1380
00:39:46,346 --> 00:39:47,636
supports, and so forth.


1381
00:39:48,176 --> 00:39:50,376
And that's the App Store Connect


1382
00:39:50,376 --> 00:39:50,686
API.


1383
00:39:51,326 --> 00:39:52,116
It's a consistent


1384
00:39:52,176 --> 00:39:53,536
standards-based REST API.


1385
00:39:54,056 --> 00:39:55,146
We're really excited about it.


1386
00:39:55,146 --> 00:39:57,256
And one thing that we love about


1387
00:39:57,256 --> 00:39:59,146
this API is that we designed it


1388
00:39:59,336 --> 00:40:00,616
to be really flexible so that


1389
00:40:00,616 --> 00:40:01,946
you can take App Store Connect


1390
00:40:02,376 --> 00:40:03,456
and you can put it into your


1391
00:40:03,456 --> 00:40:05,096
workflow into the way that you


1392
00:40:05,096 --> 00:40:06,736
work and using the tools that


1393
00:40:06,736 --> 00:40:07,346
you like best.


1394
00:40:07,916 --> 00:40:08,986
We're really excited for you to


1395
00:40:08,986 --> 00:40:09,706
start doing that.


1396
00:40:10,156 --> 00:40:11,376
It'll be available to all app


1397
00:40:11,376 --> 00:40:12,496
developers this summer.


1398
00:40:13,716 --> 00:40:14,456
And I know you guys have


1399
00:40:14,456 --> 00:40:15,916
questions, so come and see us in


1400
00:40:15,916 --> 00:40:16,846
the App Store Connect Lab.


1401
00:40:16,846 --> 00:40:17,776
It's actually happening right


1402
00:40:17,776 --> 00:40:18,046
now.


1403
00:40:18,376 --> 00:40:19,296
So we'll head down there as soon


1404
00:40:19,296 --> 00:40:20,676
as I stop talking and we can


1405
00:40:20,676 --> 00:40:21,596
answer those questions.


1406
00:40:21,636 --> 00:40:23,066
We have a lab tomorrow as well


1407
00:40:23,066 --> 00:40:25,026
at 1:00 p.m. and also check out


1408
00:40:25,056 --> 00:40:26,056
the What's New in App Store


1409
00:40:26,056 --> 00:40:27,146
Connect Session if you missed it


1410
00:40:27,146 --> 00:40:27,606
yesterday.


1411
00:40:27,606 --> 00:40:29,336
It had some more about the API


1412
00:40:29,336 --> 00:40:30,926
and about App Store Connect


1413
00:40:30,926 --> 00:40:31,386
itself.


1414
00:40:31,916 --> 00:40:33,086
And bookmark this link because


1415
00:40:33,086 --> 00:40:34,266
we'll post the documentation


1416
00:40:34,266 --> 00:40:35,356
there just as soon as it's


1417
00:40:35,356 --> 00:40:35,826
available.


1418
00:40:35,826 --> 00:40:36,386
Thank you so much.


1419
00:40:36,386 --> 00:40:36,926
We'll see you in the labs.


1420
00:40:37,516 --> 00:40:40,500
[ Applause ]

