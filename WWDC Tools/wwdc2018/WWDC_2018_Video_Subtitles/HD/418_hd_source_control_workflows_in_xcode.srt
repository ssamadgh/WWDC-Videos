1
00:00:07,516 --> 00:00:17,386
[ Music ]


2
00:00:17,886 --> 00:00:19,716
>> Hi. I'm Eric Dudiak, an


3
00:00:19,716 --> 00:00:21,316
engineer on the Xcode team.


4
00:00:21,756 --> 00:00:22,746
And today we're going to talk


5
00:00:22,746 --> 00:00:24,156
about source control workflows


6
00:00:24,386 --> 00:00:25,026
in Xcode.


7
00:00:25,466 --> 00:00:27,216
Now, developing apps requires


8
00:00:27,216 --> 00:00:28,976
making lots of changes in your


9
00:00:28,976 --> 00:00:30,106
source code and projects.


10
00:00:30,526 --> 00:00:32,286
To help manage that change Xcode


11
00:00:32,286 --> 00:00:33,366
provides a number of source


12
00:00:33,366 --> 00:00:33,976
control tools.


13
00:00:36,046 --> 00:00:36,906
So, today we're going to take a


14
00:00:36,906 --> 00:00:38,006
look at a few of them.


15
00:00:38,806 --> 00:00:40,146
To start, we're going to take a


16
00:00:40,146 --> 00:00:41,316
look at how you create your


17
00:00:41,316 --> 00:00:42,786
first project using source


18
00:00:42,786 --> 00:00:43,136
control.


19
00:00:45,396 --> 00:00:47,186
Next, we'll look at making and


20
00:00:47,186 --> 00:00:48,566
viewing changes to your project


21
00:00:48,566 --> 00:00:49,376
using source control.


22
00:00:51,926 --> 00:00:53,216
We're also going to look at how


23
00:00:53,216 --> 00:00:54,416
you host and share your


24
00:00:54,416 --> 00:00:55,726
repositories with your team,


25
00:00:55,846 --> 00:00:57,296
including synchronizing changes.


26
00:00:59,326 --> 00:01:00,426
We'll take a brief look at


27
00:01:00,426 --> 00:01:01,516
resolving and avoiding


28
00:01:01,516 --> 00:01:02,306
conflicts.


29
00:01:03,526 --> 00:01:05,075
And finally, take a quick look


30
00:01:05,075 --> 00:01:06,756
at pull requests and forking.


31
00:01:09,236 --> 00:01:10,746
So first, let's take a look at


32
00:01:10,746 --> 00:01:12,296
creating a new project using


33
00:01:12,296 --> 00:01:13,796
Git, the industry standard


34
00:01:13,796 --> 00:01:15,506
source control system, supported


35
00:01:15,606 --> 00:01:16,916
and included in Xcode.


36
00:01:19,196 --> 00:01:21,146
The first step to using Git is


37
00:01:21,146 --> 00:01:22,706
to set up your author name and


38
00:01:22,706 --> 00:01:23,016
email.


39
00:01:23,646 --> 00:01:24,866
This identifies you in Git


40
00:01:24,866 --> 00:01:26,666
commits and makes it easy to


41
00:01:26,666 --> 00:01:28,616
identify who made what changes


42
00:01:28,906 --> 00:01:30,026
when working on a team.


43
00:01:30,896 --> 00:01:32,236
Xcode supports quickly setting


44
00:01:32,236 --> 00:01:35,226
this up in the preferences under


45
00:01:35,226 --> 00:01:36,826
the Git options of the Source


46
00:01:36,826 --> 00:01:37,566
Control tab.


47
00:01:41,206 --> 00:01:42,666
When creating a new project in


48
00:01:42,716 --> 00:01:44,646
Xcode, you can also choose to


49
00:01:44,646 --> 00:01:45,976
create a Git repository.


50
00:01:47,976 --> 00:01:49,346
During the Save operation for a


51
00:01:49,346 --> 00:01:50,996
new project you can simply check


52
00:01:50,996 --> 00:01:52,746
the box shown here, and Xcode


53
00:01:52,746 --> 00:01:54,396
will create one automatically.


54
00:01:55,446 --> 00:01:57,136
Now let's look at what that does


55
00:01:57,136 --> 00:01:58,696
and what a Git repository is.


56
00:02:00,096 --> 00:02:01,536
So you may be familiar with the


57
00:02:01,536 --> 00:02:03,116
typical Xcode project,


58
00:02:03,546 --> 00:02:05,346
represented here by a folder on


59
00:02:05,346 --> 00:02:05,796
disk.


60
00:02:06,536 --> 00:02:07,876
This includes your source files


61
00:02:08,336 --> 00:02:09,205
and things like that.


62
00:02:10,496 --> 00:02:11,746
Now, when you check the box to


63
00:02:11,786 --> 00:02:13,456
also create a Git repository,


64
00:02:14,506 --> 00:02:16,246
you'll get a .Git folder.


65
00:02:17,246 --> 00:02:18,906
This represents the repository


66
00:02:18,906 --> 00:02:20,276
for your project and will be


67
00:02:20,276 --> 00:02:21,396
hidden from you normally.


68
00:02:23,276 --> 00:02:24,526
Now it gets put into your


69
00:02:24,526 --> 00:02:26,786
project folder, making it a


70
00:02:26,786 --> 00:02:27,926
working copy.


71
00:02:30,256 --> 00:02:31,576
The first thing that happens


72
00:02:31,636 --> 00:02:33,156
with a new repository created in


73
00:02:33,156 --> 00:02:35,686
Xcode is that the whole copy of


74
00:02:35,686 --> 00:02:37,356
your project is made and


75
00:02:37,356 --> 00:02:39,246
snapshotted at a point in time.


76
00:02:40,236 --> 00:02:41,596
This snapshot of your project is


77
00:02:41,596 --> 00:02:42,416
known as a commit.


78
00:02:47,636 --> 00:02:49,166
Each commit in Xcode gets a


79
00:02:49,166 --> 00:02:50,296
unique identifier.


80
00:02:51,816 --> 00:02:53,046
As you make changes to our


81
00:02:53,046 --> 00:02:54,076
project source code you can


82
00:02:54,076 --> 00:02:55,406
create commits, which will take


83
00:02:55,406 --> 00:02:56,476
further snapshots of your


84
00:02:56,476 --> 00:02:58,606
project throughout time, while


85
00:02:58,606 --> 00:03:00,456
you see those changes at the


86
00:03:00,456 --> 00:03:01,426
point they were created.


87
00:03:04,576 --> 00:03:06,636
These snapshots make up your


88
00:03:06,636 --> 00:03:07,636
project's history.


89
00:03:08,166 --> 00:03:10,436
As you make more, they form


90
00:03:10,436 --> 00:03:11,646
something of a timeline.


91
00:03:14,176 --> 00:03:16,296
And this information is what


92
00:03:16,296 --> 00:03:17,606
makes up your repository.


93
00:03:19,876 --> 00:03:21,056
So now that we've discussed


94
00:03:21,056 --> 00:03:22,616
conceptually how this works,


95
00:03:22,986 --> 00:03:24,146
let's take a look at making


96
00:03:24,146 --> 00:03:26,276
changes and easily tracking them


97
00:03:26,506 --> 00:03:27,186
in Xcode.


98
00:03:29,116 --> 00:03:30,776
One of the easiest ways to do


99
00:03:30,776 --> 00:03:32,186
this is with the Source Control


100
00:03:32,186 --> 00:03:32,946
Change bar.


101
00:03:33,606 --> 00:03:35,126
It highlights the lines of code


102
00:03:35,256 --> 00:03:36,956
you change as you change them.


103
00:03:38,516 --> 00:03:40,066
The change bar makes it easy to


104
00:03:40,066 --> 00:03:42,026
see where in a file you've made


105
00:03:42,026 --> 00:03:42,966
changes when you come back


106
00:03:42,966 --> 00:03:43,366
later.


107
00:03:44,106 --> 00:03:46,166
As changes are made, the bar


108
00:03:46,166 --> 00:03:47,536
highlights the lines of files


109
00:03:47,536 --> 00:03:48,666
with modifications.


110
00:03:51,806 --> 00:03:53,586
In large files, it also makes it


111
00:03:53,586 --> 00:03:54,746
quick to jump between your


112
00:03:54,746 --> 00:03:55,216
changes.


113
00:03:55,656 --> 00:03:57,176
In fact, you can quickly jump


114
00:03:57,176 --> 00:03:58,756
between them from the Navigate


115
00:03:58,756 --> 00:03:59,656
menu in Xcode.


116
00:04:01,476 --> 00:04:03,316
In addition to the change bar,


117
00:04:03,506 --> 00:04:04,926
you'll see status flags in the


118
00:04:04,926 --> 00:04:06,506
project navigator telling you


119
00:04:06,506 --> 00:04:08,006
which files have changed since


120
00:04:08,006 --> 00:04:08,856
you last committed.


121
00:04:12,096 --> 00:04:13,256
So now that we've made some


122
00:04:13,256 --> 00:04:14,726
changes, let's talk about


123
00:04:14,726 --> 00:04:15,326
committing.


124
00:04:16,106 --> 00:04:17,216
These are snapshots of your


125
00:04:17,216 --> 00:04:19,255
project at a point in time that


126
00:04:19,625 --> 00:04:20,826
you can reference later.


127
00:04:21,206 --> 00:04:22,526
Let's take a brief look at


128
00:04:22,526 --> 00:04:24,516
creating these commits in Xcode.


129
00:04:27,186 --> 00:04:28,996
So we've seen you can easily see


130
00:04:28,996 --> 00:04:30,156
changes as you make them in your


131
00:04:30,156 --> 00:04:30,726
project.


132
00:04:30,726 --> 00:04:32,636
Now, when you're ready to record


133
00:04:32,636 --> 00:04:33,986
these changes to your


134
00:04:33,986 --> 00:04:35,996
repository, use the Source


135
00:04:35,996 --> 00:04:37,706
Control menu to create a commit.


136
00:04:44,246 --> 00:04:45,776
The commit sheet will show all


137
00:04:45,776 --> 00:04:47,296
of the changes currently in your


138
00:04:47,296 --> 00:04:47,896
project.


139
00:04:48,716 --> 00:04:49,886
They show the side-by-side


140
00:04:49,886 --> 00:04:51,516
comparison for you to review.


141
00:04:52,026 --> 00:04:54,026
You can select which files and


142
00:04:54,026 --> 00:04:56,006
even which specific changes to


143
00:04:56,006 --> 00:04:57,116
include in the commit.


144
00:04:58,416 --> 00:04:59,816
With the appropriate changes


145
00:04:59,816 --> 00:05:02,236
selected, enter a message to


146
00:05:02,236 --> 00:05:03,346
record the reason for your


147
00:05:03,346 --> 00:05:03,916
changes.


148
00:05:04,626 --> 00:05:05,906
This message makes it easy to


149
00:05:05,906 --> 00:05:07,126
understand the reason for the


150
00:05:07,126 --> 00:05:08,906
changes later when going back to


151
00:05:08,906 --> 00:05:09,506
review them.


152
00:05:12,206 --> 00:05:13,236
Now that we've made a couple


153
00:05:13,236 --> 00:05:15,486
commits, let's talk about


154
00:05:15,486 --> 00:05:16,116
viewing them.


155
00:05:16,616 --> 00:05:18,336
You may want to refer back to


156
00:05:18,336 --> 00:05:20,116
them to better understand how


157
00:05:20,116 --> 00:05:21,566
your code and project have


158
00:05:21,566 --> 00:05:22,626
changed over time.


159
00:05:23,296 --> 00:05:24,216
This can be useful for


160
00:05:24,216 --> 00:05:25,606
discovering the timeline of when


161
00:05:25,606 --> 00:05:26,656
code was introduced in your


162
00:05:26,656 --> 00:05:28,486
project, and why specific


163
00:05:28,486 --> 00:05:29,306
changes were made.


164
00:05:30,146 --> 00:05:31,616
Xcode offers several ways to


165
00:05:31,616 --> 00:05:32,416
view this history.


166
00:05:34,876 --> 00:05:36,736
First is the comparison mode,


167
00:05:36,806 --> 00:05:38,066
which we just saw a little bit


168
00:05:38,066 --> 00:05:38,856
in the commit sheet.


169
00:05:39,606 --> 00:05:41,386
Xcode lets you view every file


170
00:05:41,386 --> 00:05:42,626
in your project as it has


171
00:05:42,626 --> 00:05:43,846
changed through time in this


172
00:05:43,936 --> 00:05:44,286
way.


173
00:05:45,706 --> 00:05:47,206
To access it, use the Version


174
00:05:47,206 --> 00:05:48,706
Editor mode from the toolbar,


175
00:05:49,236 --> 00:05:49,816
seen here.


176
00:05:52,776 --> 00:05:54,056
Clicking and holding the


177
00:05:54,056 --> 00:05:55,896
selector will let you jump to a


178
00:05:55,896 --> 00:05:57,516
specific mode of the version


179
00:05:57,516 --> 00:05:57,866
editor.


180
00:06:01,336 --> 00:06:03,206
The comparison mode provides a


181
00:06:03,206 --> 00:06:05,146
side-by-side view of source code


182
00:06:05,146 --> 00:06:06,996
changes, allowing you to compare


183
00:06:06,996 --> 00:06:08,556
the file between two points in


184
00:06:08,556 --> 00:06:08,986
time.


185
00:06:10,456 --> 00:06:11,856
While in the comparison mode,


186
00:06:12,316 --> 00:06:13,736
you can change what version of


187
00:06:13,736 --> 00:06:15,516
the file you are viewing using


188
00:06:15,516 --> 00:06:17,216
the jump bar at the bottom.


189
00:06:19,516 --> 00:06:21,616
Next is the Author View of the


190
00:06:21,616 --> 00:06:22,346
version editor.


191
00:06:23,436 --> 00:06:24,856
It is accessed in the same way


192
00:06:25,286 --> 00:06:25,956
in the toolbar.


193
00:06:29,536 --> 00:06:31,746
The Author View groups code by


194
00:06:31,746 --> 00:06:33,486
the author who made the most


195
00:06:33,486 --> 00:06:35,396
recent change to a particular


196
00:06:35,396 --> 00:06:36,356
line in the file.


197
00:06:37,566 --> 00:06:39,886
It shows the author, message,


198
00:06:40,036 --> 00:06:41,166
and date of the commit.


199
00:06:42,116 --> 00:06:43,456
Additional information about the


200
00:06:43,456 --> 00:06:45,166
commit can be seen by clicking


201
00:06:45,166 --> 00:06:46,136
on one of the slices.


202
00:06:48,146 --> 00:06:49,756
Last, it is possible to see a


203
00:06:49,756 --> 00:06:51,546
log of each change made to a


204
00:06:51,546 --> 00:06:51,996
file.


205
00:06:52,836 --> 00:06:53,666
Just like authors and


206
00:06:53,666 --> 00:06:55,586
comparison, it is accessed from


207
00:06:55,586 --> 00:06:56,136
the toolbar.


208
00:06:59,596 --> 00:07:01,876
The source control log looks at


209
00:07:01,876 --> 00:07:04,066
a file's entire history so you


210
00:07:04,066 --> 00:07:06,326
can see who made changes and why


211
00:07:06,806 --> 00:07:08,036
over the entire history of the


212
00:07:08,036 --> 00:07:08,396
file.


213
00:07:10,026 --> 00:07:11,426
Now, sometimes you want a way to


214
00:07:11,426 --> 00:07:12,806
see changes made using source


215
00:07:12,806 --> 00:07:14,506
control across not just a single


216
00:07:14,506 --> 00:07:16,836
file, but your entire project.


217
00:07:17,646 --> 00:07:18,896
To see this, you can select the


218
00:07:18,896 --> 00:07:21,956
Source Control Navigator as the


219
00:07:21,956 --> 00:07:23,376
second navigator in Xcode.


220
00:07:27,196 --> 00:07:28,626
The Source Control Navigator


221
00:07:28,966 --> 00:07:30,726
provides a view of your whole


222
00:07:30,726 --> 00:07:32,466
repository by listing branches


223
00:07:32,466 --> 00:07:33,166
and tags.


224
00:07:34,476 --> 00:07:35,656
Branches are the individual


225
00:07:35,656 --> 00:07:37,136
streams of history that make up


226
00:07:37,136 --> 00:07:38,616
your project, such as the


227
00:07:38,616 --> 00:07:39,796
current in development work.


228
00:07:40,796 --> 00:07:42,026
When you start a new project,


229
00:07:42,376 --> 00:07:43,586
you'll have just one branch,


230
00:07:44,066 --> 00:07:45,306
typically named Master.


231
00:07:46,666 --> 00:07:47,876
Selecting it will show the


232
00:07:47,876 --> 00:07:49,336
history of that branch, which


233
00:07:49,336 --> 00:07:50,226
can be seen here.


234
00:07:51,786 --> 00:07:53,676
In this history view, you can


235
00:07:53,676 --> 00:07:54,956
see the history is marked with


236
00:07:54,956 --> 00:07:56,616
tags shown in purple.


237
00:07:57,396 --> 00:07:58,566
Tags are bookmarks of


238
00:07:58,566 --> 00:08:00,606
particularly important points in


239
00:08:00,606 --> 00:08:02,566
your project such as shipped


240
00:08:02,566 --> 00:08:03,186
versions.


241
00:08:04,646 --> 00:08:05,846
For more information on


242
00:08:05,846 --> 00:08:07,646
branches, viewing history, and


243
00:08:07,646 --> 00:08:11,776
tags, please see the 2017 WWDC


244
00:08:11,776 --> 00:08:13,826
Session, GitHub, and the new


245
00:08:13,826 --> 00:08:15,106
Source control Workflows in


246
00:08:15,106 --> 00:08:15,866
Xcode 9.


247
00:08:22,196 --> 00:08:23,036
Now that we've looked at the


248
00:08:23,036 --> 00:08:24,306
benefits of having a project


249
00:08:24,306 --> 00:08:25,606
under source control, let's look


250
00:08:25,606 --> 00:08:27,116
at taking things to the next


251
00:08:27,116 --> 00:08:27,426
level.


252
00:08:29,606 --> 00:08:31,226
So far we've seen what happens


253
00:08:31,226 --> 00:08:32,936
when a project is just locally


254
00:08:32,936 --> 00:08:34,726
managed by Git on your machine.


255
00:08:35,606 --> 00:08:37,046
But in many cases, you'll want


256
00:08:37,046 --> 00:08:38,736
to store a copy on a server.


257
00:08:39,486 --> 00:08:41,346
This provides an off-site backup


258
00:08:41,346 --> 00:08:42,515
as well as a means to


259
00:08:42,515 --> 00:08:43,895
synchronize your changes from


260
00:08:43,895 --> 00:08:45,516
one machine to another.


261
00:08:45,556 --> 00:08:47,866
This is also the basis of


262
00:08:47,866 --> 00:08:50,366
collaboration in Xcode projects.


263
00:08:54,116 --> 00:08:56,126
Xcode works with any server that


264
00:08:56,126 --> 00:08:57,166
supports hosting Git


265
00:08:57,166 --> 00:08:58,026
repositories.


266
00:08:58,806 --> 00:09:00,596
In these cases, the features are


267
00:09:00,596 --> 00:09:01,866
limited to standard Git


268
00:09:01,866 --> 00:09:04,086
operations such as push and


269
00:09:04,086 --> 00:09:04,356
pull.


270
00:09:04,356 --> 00:09:06,356
And there is no account to sign


271
00:09:06,356 --> 00:09:06,696
into.


272
00:09:07,386 --> 00:09:09,066
You just authenticate on demand


273
00:09:09,066 --> 00:09:09,586
as needed.


274
00:09:11,276 --> 00:09:13,456
Xcode also supports many common


275
00:09:13,456 --> 00:09:15,416
hosting solutions such as


276
00:09:15,566 --> 00:09:17,896
GitHub, BitBucket, and


277
00:09:17,896 --> 00:09:19,026
GitLab.com.


278
00:09:19,956 --> 00:09:21,696
With these services, additional


279
00:09:21,696 --> 00:09:23,836
features are supported, such as


280
00:09:23,836 --> 00:09:25,086
searching for repositories to


281
00:09:25,086 --> 00:09:26,726
clone and creating new


282
00:09:26,726 --> 00:09:28,066
repositories on the server


283
00:09:28,406 --> 00:09:29,456
directly from Xcode.


284
00:09:30,236 --> 00:09:31,856
In addition to the cloud


285
00:09:31,856 --> 00:09:33,076
versions of these services,


286
00:09:33,716 --> 00:09:34,986
self-hosted and enterprise


287
00:09:34,986 --> 00:09:36,776
versions used on premise by


288
00:09:36,776 --> 00:09:38,946
larger teams are also supported


289
00:09:38,946 --> 00:09:39,546
in Xcode.


290
00:09:42,096 --> 00:09:43,486
So let's take a look at adding


291
00:09:43,486 --> 00:09:44,706
one of these hosted accounts.


292
00:09:45,236 --> 00:09:47,816
You can add this account type


293
00:09:47,976 --> 00:09:50,326
from Xcode's preferences under


294
00:09:50,326 --> 00:09:51,696
the Account Preference pane.


295
00:09:52,236 --> 00:09:55,636
You just sign into the account


296
00:09:56,146 --> 00:09:57,476
using your username and


297
00:09:57,476 --> 00:09:59,336
password, just like you would on


298
00:09:59,336 --> 00:09:59,866
the website.


299
00:10:00,486 --> 00:10:01,336
If you're signing into a


300
00:10:01,336 --> 00:10:03,666
self-hosted version, you'll also


301
00:10:03,666 --> 00:10:05,256
get a chance to provide the URL


302
00:10:05,256 --> 00:10:06,506
for the specific server that you


303
00:10:06,506 --> 00:10:09,806
want to connect to.


304
00:10:09,806 --> 00:10:11,486
Now that Xcode is signed into a


305
00:10:11,486 --> 00:10:13,126
hosted source control account,


306
00:10:13,566 --> 00:10:15,026
we can start sending our changes


307
00:10:15,026 --> 00:10:16,686
up to the server and getting


308
00:10:16,686 --> 00:10:19,426
other changes from it.


309
00:10:19,716 --> 00:10:20,956
But before we start pushing and


310
00:10:20,956 --> 00:10:23,456
pulling code in Xcode, let's


311
00:10:23,456 --> 00:10:25,006
take a brief moment to discuss


312
00:10:25,006 --> 00:10:26,956
how Git and these hosting


313
00:10:26,956 --> 00:10:28,716
solutions handle security.


314
00:10:32,296 --> 00:10:34,106
Git supports two main methods


315
00:10:34,106 --> 00:10:35,266
for securing changes when


316
00:10:35,266 --> 00:10:36,456
connecting to a server.


317
00:10:36,956 --> 00:10:40,546
The first, HTTPS, is the same


318
00:10:40,546 --> 00:10:42,226
way most websites are secured.


319
00:10:43,146 --> 00:10:44,726
It trusts the server based on a


320
00:10:44,726 --> 00:10:46,986
certificate and uses a username


321
00:10:46,986 --> 00:10:48,536
and password to authenticate you


322
00:10:48,536 --> 00:10:49,046
as a user.


323
00:10:50,626 --> 00:10:53,676
The other method, SSH, works a


324
00:10:53,676 --> 00:10:55,396
bit differently, particularly


325
00:10:55,396 --> 00:10:56,846
with these hosted solutions.


326
00:10:58,186 --> 00:11:00,236
In general, SSH connections for


327
00:11:00,236 --> 00:11:02,576
Git are secured using a public


328
00:11:02,846 --> 00:11:05,636
and private key pair that is


329
00:11:05,636 --> 00:11:07,396
generated on each machine.


330
00:11:08,586 --> 00:11:09,936
The public portion of the pair


331
00:11:09,936 --> 00:11:11,906
is then uploaded to the hosting


332
00:11:11,906 --> 00:11:12,336
site.


333
00:11:13,336 --> 00:11:14,266
This means that it is easy to


334
00:11:14,266 --> 00:11:16,136
have one set of keys per


335
00:11:16,136 --> 00:11:16,836
machine.


336
00:11:16,936 --> 00:11:18,956
And often even one per service


337
00:11:19,516 --> 00:11:20,936
so they can be managed and


338
00:11:20,936 --> 00:11:22,696
revoked much more easily than a


339
00:11:22,696 --> 00:11:23,276
password.


340
00:11:24,956 --> 00:11:27,116
Xcode can help you easily do


341
00:11:27,116 --> 00:11:28,886
these setup steps for SSH.


342
00:11:28,986 --> 00:11:31,566
When you sign into an account


343
00:11:31,566 --> 00:11:33,436
but have not created an SSH key


344
00:11:33,436 --> 00:11:35,966
pair locally, Xcode will offer


345
00:11:35,966 --> 00:11:38,226
to create a pair.


346
00:11:38,416 --> 00:11:40,096
The private portion of the SSH


347
00:11:40,096 --> 00:11:41,956
key should be protected by a


348
00:11:41,956 --> 00:11:42,836
pass phrase.


349
00:11:43,876 --> 00:11:45,426
This adds an additional layer of


350
00:11:45,426 --> 00:11:47,426
security and prevents it from


351
00:11:47,426 --> 00:11:49,246
being used even in the event


352
00:11:49,246 --> 00:11:50,906
someone else were to get a copy


353
00:11:50,906 --> 00:11:54,136
of your private key.


354
00:11:54,366 --> 00:11:55,796
Once the key pair has been


355
00:11:55,796 --> 00:11:58,586
created, Xcode can also upload


356
00:11:58,586 --> 00:12:00,076
the public portion of the key


357
00:12:00,536 --> 00:12:01,956
directly to the hosting site.


358
00:12:03,116 --> 00:12:04,766
With the public key upload


359
00:12:04,766 --> 00:12:07,246
complete, Xcode can transmit Git


360
00:12:07,246 --> 00:12:09,636
data securely to the server over


361
00:12:09,636 --> 00:12:11,776
the SSH protocol in addition to


362
00:12:11,776 --> 00:12:12,736
HTTPS.


363
00:12:13,466 --> 00:12:14,586
That also means we can now


364
00:12:14,586 --> 00:12:16,076
create new repositories on the


365
00:12:16,076 --> 00:12:18,176
server and clone existing ones.


366
00:12:18,766 --> 00:12:19,796
So let's take a quick look at


367
00:12:19,796 --> 00:12:20,016
that.


368
00:12:21,766 --> 00:12:23,596
If we go back to our local only


369
00:12:23,596 --> 00:12:26,046
repository, we can now create a


370
00:12:26,046 --> 00:12:27,076
new remote for it.


371
00:12:27,736 --> 00:12:29,316
This is a full copy of that


372
00:12:29,316 --> 00:12:31,456
repository up on the hosted


373
00:12:31,456 --> 00:12:31,896
site.


374
00:12:32,446 --> 00:12:34,236
We can do this from the Source


375
00:12:34,236 --> 00:12:36,356
Control Navigator in the Context


376
00:12:36,356 --> 00:12:38,506
menu by selecting Create New


377
00:12:38,506 --> 00:12:38,936
Remote.


378
00:12:41,216 --> 00:12:42,516
We then have a few options


379
00:12:42,546 --> 00:12:43,936
depending on the hosting site.


380
00:12:44,366 --> 00:12:45,626
And we can choose to make it


381
00:12:45,626 --> 00:12:48,086
either public or private, based


382
00:12:48,086 --> 00:12:49,426
on our exact needs for this


383
00:12:49,526 --> 00:12:50,036
project.


384
00:12:51,156 --> 00:12:52,246
It can then be shared with other


385
00:12:52,246 --> 00:12:54,016
developers or synched across


386
00:12:54,016 --> 00:12:54,606
machines.


387
00:12:55,406 --> 00:12:56,766
And when you want to download a


388
00:12:56,766 --> 00:12:57,946
project that has already been


389
00:12:57,946 --> 00:12:59,896
hosted on a server, such as on a


390
00:12:59,896 --> 00:13:01,406
new machine or when joining a


391
00:13:01,406 --> 00:13:03,576
team, you can browse and search


392
00:13:03,576 --> 00:13:05,206
for a repository in the clone


393
00:13:05,206 --> 00:13:07,366
window, accessed from the source


394
00:13:07,366 --> 00:13:09,516
control menu in Xcode.


395
00:13:13,176 --> 00:13:14,786
If you already had the URL to


396
00:13:14,786 --> 00:13:16,416
use for the repository, you can


397
00:13:16,416 --> 00:13:17,776
directly enter it in the search


398
00:13:17,776 --> 00:13:18,096
field.


399
00:13:18,596 --> 00:13:20,296
Additionally, all of the hosting


400
00:13:20,296 --> 00:13:21,706
solutions supported in Xcode


401
00:13:21,806 --> 00:13:22,836
offer the option to clone


402
00:13:22,836 --> 00:13:25,116
projects directly in Xcode via a


403
00:13:25,116 --> 00:13:26,236
button on their websites.


404
00:13:27,676 --> 00:13:29,506
For additional information on


405
00:13:29,506 --> 00:13:31,396
using hosted services including


406
00:13:31,396 --> 00:13:33,766
creating remote repositories and


407
00:13:33,766 --> 00:13:35,066
the varies clone workflows,


408
00:13:35,606 --> 00:13:38,146
please refer to the 2017 WWDC


409
00:13:38,146 --> 00:13:39,906
session GitHub and the New


410
00:13:39,906 --> 00:13:41,266
Source control Workflows in


411
00:13:41,266 --> 00:13:42,036
Xcode 9.


412
00:13:45,646 --> 00:13:47,086
Now that we have a local and


413
00:13:47,086 --> 00:13:49,766
remote copy of our project, we


414
00:13:49,766 --> 00:13:51,036
need to make sure that they stay


415
00:13:51,336 --> 00:13:51,906
in sync.


416
00:13:53,046 --> 00:13:54,976
In Git that is done by


417
00:13:54,976 --> 00:13:57,596
operations known as pulling and


418
00:13:57,596 --> 00:13:58,056
pushing.


419
00:14:00,156 --> 00:14:02,166
After you commit one or more


420
00:14:02,166 --> 00:14:03,986
changes locally, you will want


421
00:14:03,986 --> 00:14:05,586
to push to upload them to the


422
00:14:05,586 --> 00:14:06,056
server.


423
00:14:06,916 --> 00:14:08,286
This can be done either directly


424
00:14:08,286 --> 00:14:10,656
while committing, right in the


425
00:14:10,656 --> 00:14:13,696
commit sheet, or from the Xcode


426
00:14:13,696 --> 00:14:14,586
source control menu.


427
00:14:17,676 --> 00:14:18,976
The push sheet allows you to


428
00:14:18,976 --> 00:14:20,436
select exactly what branch you


429
00:14:20,436 --> 00:14:22,706
want to push to and optionally


430
00:14:22,706 --> 00:14:24,166
allows you to include tags


431
00:14:24,166 --> 00:14:26,176
you've created locally during


432
00:14:26,176 --> 00:14:26,666
the push.


433
00:14:29,526 --> 00:14:30,826
Now, when working with others,


434
00:14:30,936 --> 00:14:32,416
it'll often be necessary to get


435
00:14:32,416 --> 00:14:33,516
their changes locally.


436
00:14:34,526 --> 00:14:36,306
For this you'll need to do what


437
00:14:36,306 --> 00:14:37,896
is referred to in Git as a pull.


438
00:14:38,606 --> 00:14:40,226
This, similarly, can be done


439
00:14:40,356 --> 00:14:41,536
from the source control menu.


440
00:14:43,916 --> 00:14:46,396
Now, Xcode offers two options


441
00:14:46,396 --> 00:14:47,976
for pulling, either the Git


442
00:14:47,976 --> 00:14:50,516
default of using a merge, or


443
00:14:50,516 --> 00:14:52,396
Xcode can pull using a rebase


444
00:14:52,396 --> 00:14:53,016
operation.


445
00:14:53,806 --> 00:14:55,096
These work slightly differently


446
00:14:55,096 --> 00:14:55,466
in Git.


447
00:14:55,886 --> 00:14:57,066
So let's take a look at them.


448
00:14:59,276 --> 00:15:00,316
Here we will look at a


449
00:15:00,316 --> 00:15:02,066
conceptual timeline of commits.


450
00:15:02,716 --> 00:15:04,376
If you've made local changes and


451
00:15:04,376 --> 00:15:05,816
others have also made changes


452
00:15:05,816 --> 00:15:07,346
while you were working, you will


453
00:15:07,346 --> 00:15:09,536
have to pull before you push.


454
00:15:10,466 --> 00:15:12,506
In this situation, your work,


455
00:15:13,196 --> 00:15:14,696
shown in green, has diverged


456
00:15:14,696 --> 00:15:16,406
from your coworker's work, shown


457
00:15:16,406 --> 00:15:17,076
here in blue.


458
00:15:19,876 --> 00:15:21,766
To rectify this, you'll have two


459
00:15:21,766 --> 00:15:24,586
options in Git: merging and


460
00:15:24,586 --> 00:15:25,146
rebasing.


461
00:15:26,026 --> 00:15:26,956
Let's take a look at both.


462
00:15:28,016 --> 00:15:29,086
So again, in this scenario you


463
00:15:29,086 --> 00:15:31,056
have two changes to push and


464
00:15:31,056 --> 00:15:31,676
three to pull.


465
00:15:32,486 --> 00:15:34,016
When merging, this situation is


466
00:15:34,016 --> 00:15:35,526
resolved by creating a new


467
00:15:35,526 --> 00:15:37,756
commit, after both yours and


468
00:15:37,756 --> 00:15:39,796
your coworker's, that indicates


469
00:15:39,796 --> 00:15:40,936
how the divergence should be


470
00:15:40,936 --> 00:15:41,506
handled.


471
00:15:42,756 --> 00:15:44,036
With the commits now unified


472
00:15:44,036 --> 00:15:46,356
back into a single branch, this


473
00:15:46,356 --> 00:15:47,556
can be pushed up to the server


474
00:15:47,556 --> 00:15:49,186
and synchronized across all your


475
00:15:49,186 --> 00:15:49,686
machines.


476
00:15:50,956 --> 00:15:52,496
A rebase pull works a little


477
00:15:52,496 --> 00:15:53,046
differently.


478
00:15:53,456 --> 00:15:54,776
Instead of creating a new merge


479
00:15:54,776 --> 00:15:56,306
commit, your local changes are


480
00:15:56,306 --> 00:15:58,266
set aside and then replayed


481
00:15:58,566 --> 00:15:59,776
after the changes you just


482
00:15:59,846 --> 00:16:00,266
pulled.


483
00:16:02,186 --> 00:16:03,436
This can make looking back at


484
00:16:03,436 --> 00:16:05,536
history much more simple, as


485
00:16:05,536 --> 00:16:07,266
there is no merge commit or


486
00:16:07,266 --> 00:16:08,726
divergence in history.


487
00:16:11,356 --> 00:16:12,666
Sometimes when pulling, you will


488
00:16:12,666 --> 00:16:14,586
have made local commits that


489
00:16:14,586 --> 00:16:16,326
change something in the same


490
00:16:16,326 --> 00:16:17,726
place as someone else is making


491
00:16:17,726 --> 00:16:18,176
changes.


492
00:16:18,976 --> 00:16:20,176
This can cause what is known in


493
00:16:20,176 --> 00:16:22,336
Git as a conflict, where it is


494
00:16:22,336 --> 00:16:24,266
unclear how to have both changes


495
00:16:24,266 --> 00:16:25,006
coexist.


496
00:16:27,736 --> 00:16:29,856
Xcode allows you to resolve


497
00:16:29,856 --> 00:16:31,086
conflicts when pulling or


498
00:16:31,086 --> 00:16:32,026
merging a branch.


499
00:16:33,006 --> 00:16:34,196
Xcode will present a sheet


500
00:16:34,196 --> 00:16:35,976
similar to the commit sheet with


501
00:16:36,056 --> 00:16:38,466
options to take your change, or


502
00:16:38,466 --> 00:16:39,226
the other change.


503
00:16:39,566 --> 00:16:41,716
It is also possible to manually


504
00:16:41,716 --> 00:16:43,786
edit the file, or take both


505
00:16:43,786 --> 00:16:45,406
changes if there are better ways


506
00:16:45,406 --> 00:16:46,236
to combine the work.


507
00:16:48,576 --> 00:16:50,376
In this case, we see that two


508
00:16:50,376 --> 00:16:51,976
users have both made changes on


509
00:16:51,976 --> 00:16:52,786
the same line.


510
00:16:53,896 --> 00:16:55,106
It seems that the local changes


511
00:16:55,106 --> 00:16:56,936
are a bit more up to date, so


512
00:16:56,936 --> 00:16:58,406
the easiest way to resolve this


513
00:16:58,486 --> 00:16:59,776
is to take the left changes.


514
00:17:01,526 --> 00:17:02,806
Now, with all the conflicts


515
00:17:02,806 --> 00:17:04,516
resolved, the pull can continue.


516
00:17:05,705 --> 00:17:06,935
If this were a merge pull,


517
00:17:07,566 --> 00:17:08,626
conflicts are all resolved at


518
00:17:08,626 --> 00:17:09,866
once and the resolution is


519
00:17:09,866 --> 00:17:11,256
stored in the merge commit.


520
00:17:12,796 --> 00:17:14,556
If we were doing a pull rebase,


521
00:17:14,896 --> 00:17:15,955
it is possible to have to


522
00:17:15,955 --> 00:17:17,425
resolve a set of conflicts


523
00:17:17,756 --> 00:17:19,226
multiple times as each


524
00:17:19,226 --> 00:17:21,146
individual commit is replayed on


525
00:17:21,266 --> 00:17:23,056
top of your coworker's changes.


526
00:17:23,906 --> 00:17:25,086
The resolution information in


527
00:17:25,086 --> 00:17:27,296
this case is stored on the


528
00:17:27,296 --> 00:17:29,576
original commit as if it never


529
00:17:29,576 --> 00:17:29,976
occurred.


530
00:17:31,536 --> 00:17:32,656
Now, because conflicts can be a


531
00:17:32,656 --> 00:17:34,316
bit annoying to resolve, it can


532
00:17:34,316 --> 00:17:36,206
be very useful to anticipate


533
00:17:36,206 --> 00:17:37,956
conflicts and avoid having them


534
00:17:37,956 --> 00:17:39,156
happen in the first place.


535
00:17:40,496 --> 00:17:41,566
In Xcode Source Control


536
00:17:41,566 --> 00:17:43,746
Preferences, the Change bar can


537
00:17:43,916 --> 00:17:45,166
optionally be shown to show


538
00:17:45,166 --> 00:17:47,416
coworker's changes as they push


539
00:17:47,416 --> 00:17:47,636
them.


540
00:17:50,536 --> 00:17:52,806
This makes it easy to tell what


541
00:17:52,806 --> 00:17:54,406
part of a file is out of date.


542
00:17:55,046 --> 00:17:56,226
The changes are fetched from the


543
00:17:56,226 --> 00:17:57,886
server at a 10-minute interval.


544
00:18:00,036 --> 00:18:02,396
Here we see the Change bar that


545
00:18:02,396 --> 00:18:04,726
we saw before, when upstream


546
00:18:04,726 --> 00:18:07,366
changes are showing, turns to


547
00:18:07,366 --> 00:18:09,256
red to indicate where our


548
00:18:09,436 --> 00:18:10,436
coworkers have been making


549
00:18:10,436 --> 00:18:10,956
changes.


550
00:18:11,846 --> 00:18:13,536
This indicates a conflict will


551
00:18:13,536 --> 00:18:14,976
have to be resolved to


552
00:18:14,976 --> 00:18:16,446
reintegrate the local changes.


553
00:18:17,156 --> 00:18:18,706
In many cases it can be easier


554
00:18:18,706 --> 00:18:20,446
to pull before making changes to


555
00:18:20,446 --> 00:18:22,356
a file that already has changes


556
00:18:22,356 --> 00:18:22,956
upstream.


557
00:18:24,496 --> 00:18:25,926
Some details about the


558
00:18:25,926 --> 00:18:27,786
conflicting commit can be seen


559
00:18:27,826 --> 00:18:29,076
by clicking on the Change bar.


560
00:18:32,416 --> 00:18:33,726
All of the hosting solutions


561
00:18:33,796 --> 00:18:35,676
supported in Xcode also support


562
00:18:35,776 --> 00:18:37,926
two other common workflows, pull


563
00:18:37,926 --> 00:18:39,376
requests and forks.


564
00:18:40,266 --> 00:18:41,686
These are based on Git concepts


565
00:18:41,686 --> 00:18:43,546
and features, but are distinct


566
00:18:43,586 --> 00:18:44,616
from Git's feature set.


567
00:18:45,896 --> 00:18:47,556
Pull requests are a method for


568
00:18:47,556 --> 00:18:48,586
doing code reviews.


569
00:18:49,846 --> 00:18:51,306
It is usually best practice to


570
00:18:51,306 --> 00:18:52,596
do all disruptive work to a


571
00:18:52,596 --> 00:18:54,166
project on a branch.


572
00:18:54,616 --> 00:18:55,996
This is an isolated line of


573
00:18:55,996 --> 00:18:58,256
commit history that is separate


574
00:18:58,386 --> 00:18:59,576
from the other history of a


575
00:18:59,576 --> 00:19:00,146
project.


576
00:19:01,496 --> 00:19:03,666
Just like when pulling, the work


577
00:19:03,666 --> 00:19:04,976
done on a branch will diverge


578
00:19:04,976 --> 00:19:06,306
from the main branch of code.


579
00:19:06,626 --> 00:19:08,116
So a merge will be necessary to


580
00:19:08,116 --> 00:19:10,196
resolve any conflicts and


581
00:19:10,196 --> 00:19:11,186
reintegrate the work.


582
00:19:12,356 --> 00:19:13,956
A pull request, shown here in


583
00:19:13,956 --> 00:19:16,236
yellow, is a way to see what


584
00:19:16,236 --> 00:19:18,336
will be merged and allow the


585
00:19:18,336 --> 00:19:20,126
commenting on that work by other


586
00:19:20,126 --> 00:19:20,756
individuals.


587
00:19:21,426 --> 00:19:22,456
Often this will mean making


588
00:19:22,456 --> 00:19:24,136
additional changes on the branch


589
00:19:24,476 --> 00:19:25,776
before merging and integrating


590
00:19:25,776 --> 00:19:25,916
it.


591
00:19:27,046 --> 00:19:28,476
Since pull requests are built on


592
00:19:28,476 --> 00:19:30,246
Git's branching model, you can


593
00:19:30,246 --> 00:19:31,836
always locally check out that


594
00:19:31,836 --> 00:19:33,326
branch from the source control


595
00:19:33,326 --> 00:19:35,196
navigator in Xcode when


596
00:19:35,196 --> 00:19:35,766
reviewing it.


597
00:19:36,746 --> 00:19:38,036
This lets you build and test the


598
00:19:38,036 --> 00:19:39,426
work on your local machine


599
00:19:39,866 --> 00:19:42,016
before approving it and merging


600
00:19:42,016 --> 00:19:43,346
it back into the main branch.


601
00:19:44,756 --> 00:19:46,316
Forks take advantage of the


602
00:19:46,316 --> 00:19:48,076
distributed nature of Git.


603
00:19:49,296 --> 00:19:50,646
Just like how the server copy of


604
00:19:50,646 --> 00:19:52,386
the repository and the local


605
00:19:52,386 --> 00:19:54,356
copy on your machine are two


606
00:19:54,356 --> 00:19:55,996
copies of the same repository,


607
00:19:56,726 --> 00:19:58,466
you can create multiple copies


608
00:19:58,466 --> 00:20:00,006
of a repository on the same


609
00:20:00,006 --> 00:20:00,526
server.


610
00:20:01,616 --> 00:20:04,346
This is often useful when there


611
00:20:04,346 --> 00:20:06,066
is a canonical copy that is


612
00:20:06,106 --> 00:20:08,416
tightly managed, such as a large


613
00:20:08,966 --> 00:20:10,126
open-source project.


614
00:20:11,156 --> 00:20:12,496
A fork can be useful for making


615
00:20:12,496 --> 00:20:14,506
experimental changes without


616
00:20:14,506 --> 00:20:15,946
disrupting the main copy.


617
00:20:16,856 --> 00:20:18,056
This can be more useful than a


618
00:20:18,056 --> 00:20:19,756
branch when there are many


619
00:20:19,756 --> 00:20:21,786
contributors, because each fork


620
00:20:21,786 --> 00:20:23,436
can have its own named branches,


621
00:20:23,856 --> 00:20:25,556
minimizing the amount of noise


622
00:20:25,626 --> 00:20:26,886
in the main repository.


623
00:20:27,886 --> 00:20:29,576
Just like the local copy, the


624
00:20:29,576 --> 00:20:30,836
fork can be synced with the main


625
00:20:30,836 --> 00:20:31,296
copy.


626
00:20:31,906 --> 00:20:33,186
This is often done in the form


627
00:20:33,186 --> 00:20:34,916
of PR's and is where pull


628
00:20:34,916 --> 00:20:36,196
requests get their name.


629
00:20:36,946 --> 00:20:38,516
Xcode and Git allow setting


630
00:20:38,646 --> 00:20:41,186
multiple remotes on your local


631
00:20:41,186 --> 00:20:41,936
repository.


632
00:20:42,526 --> 00:20:43,766
So you can sync with both the


633
00:20:43,766 --> 00:20:46,186
name and the fork from the same


634
00:20:46,186 --> 00:20:47,366
local copy on your machine.


635
00:20:50,126 --> 00:20:51,606
So that covers the basics of


636
00:20:51,606 --> 00:20:53,326
using source control and Git in


637
00:20:53,326 --> 00:20:53,766
Xcode.


638
00:20:54,866 --> 00:20:55,766
We've seen how to use Git


639
00:20:55,766 --> 00:20:57,556
locally to manage your project.


640
00:20:58,376 --> 00:20:59,596
We've taken a look at making and


641
00:20:59,596 --> 00:21:01,346
viewing changes in your project.


642
00:21:02,346 --> 00:21:03,996
We also saw how repositories can


643
00:21:03,996 --> 00:21:05,226
be hosted and changes


644
00:21:05,226 --> 00:21:06,266
synchronized when working with


645
00:21:06,336 --> 00:21:06,836
teams.


646
00:21:07,396 --> 00:21:08,816
And when syncing those changes,


647
00:21:09,276 --> 00:21:10,966
how you resolve and even avoid


648
00:21:10,966 --> 00:21:11,656
conflicts.


649
00:21:12,246 --> 00:21:13,956
And last, we took a brief look


650
00:21:14,156 --> 00:21:15,166
at some additional hosting


651
00:21:15,166 --> 00:21:17,176
features like pull requests and


652
00:21:17,176 --> 00:21:17,656
forks.


653
00:21:19,746 --> 00:21:20,646
More information for this


654
00:21:20,646 --> 00:21:21,676
session is available at


655
00:21:21,676 --> 00:21:23,106
Developer.apple.com.


656
00:21:24,596 --> 00:21:25,366
And thank you.

