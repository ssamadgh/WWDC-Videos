1
00:00:11,516 --> 00:00:16,206
[ Applause ]


2
00:00:16,706 --> 00:00:17,436
>> Hello everyone.


3
00:00:17,656 --> 00:00:18,336
My name is Jacques.


4
00:00:18,336 --> 00:00:20,886
I have the pleasure of managing
this game technologist team.


5
00:00:21,506 --> 00:00:24,376
I'm here today to start you
off for the best practices


6
00:00:24,376 --> 00:00:25,796
for building SpriteKit games.


7
00:00:26,286 --> 00:00:29,516
So, we're going to start this
off with talking a little


8
00:00:29,806 --> 00:00:30,796
about the history of SpriteKit.


9
00:00:30,796 --> 00:00:31,766
It's now one year old.


10
00:00:32,076 --> 00:00:36,146
You guys have made thousands
of games in SpriteKit.


11
00:00:36,756 --> 00:00:38,916
And I'm sure you've seen some
of the successful ones out there


12
00:00:38,916 --> 00:00:40,406
like "100 Balls" for example,


13
00:00:40,896 --> 00:00:43,506
even achieving the
top one free spot.


14
00:00:44,626 --> 00:00:47,906
So, what you guys have done
with it is absolutely amazing.


15
00:00:48,066 --> 00:00:50,116
And we hope that some of the new
features we've added are really


16
00:00:50,116 --> 00:00:51,646
going to help you
make that next game.


17
00:00:52,696 --> 00:00:56,286
So, let's go through what this
talk is going to be about.


18
00:00:57,706 --> 00:00:59,936
We're going to discuss
scalability best practices


19
00:01:00,276 --> 00:01:02,946
to help you save on cost
as you develop your game


20
00:01:03,126 --> 00:01:04,786
and also set yourself
up for the future.


21
00:01:04,946 --> 00:01:08,226
We're going to talk about
game structure best practices.


22
00:01:08,676 --> 00:01:10,676
And then, Nick is
going to talk to you


23
00:01:10,676 --> 00:01:12,126
about performance
best practices.


24
00:01:12,916 --> 00:01:15,996
So, let me dive straight in
to scalability best practices.


25
00:01:17,216 --> 00:01:20,446
So, what I'm talking about
here is setting yourself up so


26
00:01:20,446 --> 00:01:23,056
that you can add
content to your game


27
00:01:23,056 --> 00:01:26,206
with the smallest possible
cost so you can collaborate


28
00:01:26,756 --> 00:01:30,496
with the rest of your team
and also perhaps work better


29
00:01:31,326 --> 00:01:33,636
for the future, learning
better techniques.


30
00:01:34,156 --> 00:01:36,096
So, one of the problems
that you can see


31
00:01:36,096 --> 00:01:39,956
as a beginning game developer,
and I used to be one of those,


32
00:01:40,646 --> 00:01:42,366
is you get really,
really excited.


33
00:01:42,796 --> 00:01:44,836
And so, you're starting on
this idea that you have.


34
00:01:45,256 --> 00:01:46,806
And I mean the idea is right.


35
00:01:46,806 --> 00:01:48,996
You want to get your game
going as fast as possible.


36
00:01:49,296 --> 00:01:51,156
So, you dive in your hardcode.


37
00:01:51,896 --> 00:01:53,266
Everything is done in one scene.


38
00:01:54,126 --> 00:01:57,206
All the references are
done in one place in code.


39
00:01:57,206 --> 00:02:00,936
You hardcode level 1.


40
00:02:01,796 --> 00:02:04,306
Level 2 was a bit more
work to make it different.


41
00:02:05,076 --> 00:02:07,826
Level 3 looks the
same because face it,


42
00:02:07,826 --> 00:02:08,966
you just did copy and paste.


43
00:02:08,966 --> 00:02:12,076
And-- well, you're
probably stuck on level 4.


44
00:02:12,576 --> 00:02:15,096
You're thinking different--
it's going to take time.


45
00:02:15,096 --> 00:02:18,056
We're probably going to
do copy and paste again.


46
00:02:18,426 --> 00:02:23,626
The second problem is you tend
to get tempted to write data


47
00:02:23,796 --> 00:02:26,976
as code, and here is
just the example of some


48
00:02:27,046 --> 00:02:28,936
of you could get stuck
doing even in SpriteKit.


49
00:02:28,936 --> 00:02:30,496
Obviously, SpriteKit
is excellent.


50
00:02:30,496 --> 00:02:31,546
You probably won't
get stuck with this,


51
00:02:31,546 --> 00:02:33,696
but you might get stuck
with this in other APIs.


52
00:02:34,656 --> 00:02:36,666
You're encoding things
like the position


53
00:02:37,106 --> 00:02:39,616
of your nodes inside code.


54
00:02:40,186 --> 00:02:41,706
You're encoding rotations.


55
00:02:42,286 --> 00:02:44,246
You're probably even
encoding the number


56
00:02:44,246 --> 00:02:45,826
of objects you have in code.


57
00:02:46,466 --> 00:02:47,976
You may be encoding properties


58
00:02:47,976 --> 00:02:50,676
like how many hit points you
get, what types you're going


59
00:02:50,676 --> 00:02:53,336
to start, the colors in code.


60
00:02:53,456 --> 00:02:57,406
And what you end up with is


61
00:02:57,406 --> 00:03:02,446
that you made changing art
assets meaning changing code,


62
00:03:02,446 --> 00:03:02,626
right?


63
00:03:03,206 --> 00:03:05,076
So, now the artist and
the coder both have


64
00:03:05,076 --> 00:03:06,156
to make some changes
that take time.


65
00:03:07,116 --> 00:03:10,496
The only visual feedback you get
is your Build and Run, right?


66
00:03:10,496 --> 00:03:12,256
Iteration time has
been worsened.


67
00:03:12,916 --> 00:03:14,916
And you're forcing your
designers to be programmers


68
00:03:14,916 --> 00:03:18,116
because they need to edit code
to change the game design.


69
00:03:19,946 --> 00:03:21,346
On the second level here,


70
00:03:21,956 --> 00:03:23,746
you're also duplicating
structural code.


71
00:03:24,836 --> 00:03:27,786
And code as data is not
very efficient, right?


72
00:03:27,846 --> 00:03:30,946
There are better ways of
describing data, namely data.


73
00:03:31,056 --> 00:03:34,306
And also, it's hard to
change collaboratively


74
00:03:34,306 --> 00:03:37,886
because you're probably doing
these edits in the same M


75
00:03:37,886 --> 00:03:40,306
or MM file for all the changes.


76
00:03:40,306 --> 00:03:42,956
So, your artist has
changed another asset.


77
00:03:43,456 --> 00:03:44,656
Well, that's an M file change.


78
00:03:45,176 --> 00:03:47,216
So, in your virtual control
system it looks exactly the same


79
00:03:47,216 --> 00:03:49,436
as the game design you're
changing a parameter.


80
00:03:50,896 --> 00:03:53,466
So, the solution.


81
00:03:54,126 --> 00:03:56,416
Well, you got a separate
game content from game logic.


82
00:03:56,866 --> 00:03:57,946
That's the one we
touched on earlier.


83
00:03:58,866 --> 00:04:02,066
You want to separate scene
structure from assets.


84
00:04:02,546 --> 00:04:04,686
So, structure we're
seeing might be different


85
00:04:04,686 --> 00:04:06,006
from the actual artwork
delivered.


86
00:04:06,766 --> 00:04:08,746
And you want to separate
data from code.


87
00:04:09,666 --> 00:04:12,256
We also want to make
sure you're visualizing


88
00:04:12,256 --> 00:04:13,116
as early as possible.


89
00:04:13,586 --> 00:04:15,676
Build and Run is not the
best system in the world


90
00:04:15,676 --> 00:04:18,156
to visualize what is done.


91
00:04:18,156 --> 00:04:24,036
So, implementing solution
consists of putting a game logic


92
00:04:24,036 --> 00:04:25,986
in MyScene.m. I'm
referencing that here


93
00:04:25,986 --> 00:04:27,576
because that's what you
get in the template.


94
00:04:28,536 --> 00:04:31,256
You put your game structure
inside the SceneKit serialized


95
00:04:31,256 --> 00:04:33,016
file, this MyScene.sks.


96
00:04:33,016 --> 00:04:36,896
And you put your scene
assets in separate SKS files


97
00:04:36,896 --> 00:04:37,806
that you're referencing.


98
00:04:38,656 --> 00:04:40,086
And if you can do sidecar data,


99
00:04:40,086 --> 00:04:44,196
we have a fantastic format
called .plist which is XML


100
00:04:44,336 --> 00:04:46,266
when you edit, when you deploy.


101
00:04:46,866 --> 00:04:49,936
So, the tools that we
provided for you to do this


102
00:04:50,276 --> 00:04:53,116
in Xcode 6 is we also have
a SpriteKit template both


103
00:04:53,116 --> 00:04:54,556
for Objective-C and Swift.


104
00:04:55,356 --> 00:04:57,426
The editor, as Norman
showed earlier,


105
00:04:58,046 --> 00:05:00,356
let's you do visual
feedback, visual editing,


106
00:05:00,866 --> 00:05:01,806
feedback is immediate.


107
00:05:02,786 --> 00:05:06,526
And you can also
simulate the physics live.


108
00:05:08,036 --> 00:05:10,156
We also have, and have
had for the long time,


109
00:05:10,636 --> 00:05:13,696
the ability for you to edit
.plist files inside Xcode.


110
00:05:14,216 --> 00:05:16,416
And it's as simple as
creating a .plist file,


111
00:05:16,416 --> 00:05:19,446
adding and raise dictionaries to
them, and then reading them back


112
00:05:19,446 --> 00:05:20,556
into your code; it's
super simple.


113
00:05:21,056 --> 00:05:26,576
So, I'm going to show you a
demo of the SpriteKit template


114
00:05:26,676 --> 00:05:27,696
and how we see this get set


115
00:05:27,696 --> 00:05:29,966
up both the wrong way
and the right way.


116
00:05:32,286 --> 00:05:45,236
OK. So, let me show you
here my very rushed example


117
00:05:45,236 --> 00:05:50,796
on making a sort of topple
over the towers game.


118
00:05:52,396 --> 00:05:55,186
So, I made a little
hammer throwing game here.


119
00:05:55,436 --> 00:05:59,026
I just throw them at
totem and I get a score.


120
00:05:59,446 --> 00:06:01,796
I was really excited
about making this,


121
00:06:01,906 --> 00:06:06,136
so I just threw everything
inside the game scene, OK.


122
00:06:06,136 --> 00:06:10,326
I'm sure now that you've
never seen this before.


123
00:06:10,676 --> 00:06:13,886
You see here I'm referencing
art right inside the scene file.


124
00:06:14,636 --> 00:06:17,206
I'm setting positions of things
and changing the properties.


125
00:06:17,806 --> 00:06:19,086
So, I got this going
really quickly.


126
00:06:19,086 --> 00:06:20,976
And it must seem it's
totally wrong for you to do.


127
00:06:21,646 --> 00:06:24,776
Whatever you do to make money
and get success is great.


128
00:06:24,776 --> 00:06:26,656
I'm just going to
provide an alternative.


129
00:06:27,826 --> 00:06:31,556
So, this run did the
job, that's great.


130
00:06:33,346 --> 00:06:37,556
However, you could structure
this slightly differently.


131
00:06:38,386 --> 00:06:41,956
So, here I have a scene
which-first of all,


132
00:06:42,026 --> 00:06:43,756
let's make sure this
operates in a similar fashion.


133
00:06:44,806 --> 00:06:49,106
OK. Yup. That's the same stuff.


134
00:06:49,106 --> 00:06:50,356
It seems to be the same game.


135
00:06:51,506 --> 00:06:54,566
What I have done here is I've
used the SpriteKit template


136
00:06:55,206 --> 00:07:01,486
which provides you the start of
separating the code and assets.


137
00:07:02,086 --> 00:07:05,546
And the key here you're going to
see is right on this line here:


138
00:07:06,936 --> 00:07:09,116
GameScene unarchiveFromFile.


139
00:07:09,716 --> 00:07:10,696
That seems kind of cool.


140
00:07:11,396 --> 00:07:12,276
What's actually happening?


141
00:07:12,276 --> 00:07:15,146
Well, the template here
has set you up with some


142
00:07:15,146 --> 00:07:16,586
of these amazing
APIs that we have,


143
00:07:16,646 --> 00:07:18,576
that we're already
using from Foundation.


144
00:07:18,956 --> 00:07:20,776
It's called NSKeyedUnarchiver.


145
00:07:20,976 --> 00:07:25,586
This is how you load and
save all data that's related


146
00:07:25,586 --> 00:07:26,776
to SpriteKit.


147
00:07:28,506 --> 00:07:31,116
So, there's a super
special piece of magic


148
00:07:31,166 --> 00:07:31,916
that we're doing in here.


149
00:07:32,686 --> 00:07:34,096
We're telling the
KeyedUnarchiver


150
00:07:34,636 --> 00:07:38,716
to replace any instance of
SKScene with our own class.


151
00:07:39,336 --> 00:07:41,846
So, this means that any
SKScene that you've made,


152
00:07:42,446 --> 00:07:44,426
you can make it automatically
load one


153
00:07:44,426 --> 00:07:45,516
of your own scene files.


154
00:07:46,056 --> 00:07:48,156
So, now we've typed logic
together with assets,


155
00:07:48,476 --> 00:07:50,156
even though they're
designed separately.


156
00:07:50,896 --> 00:07:54,336
OK. Now let's go to the
actual game scene here.


157
00:07:55,876 --> 00:08:01,166
Notice the setupLevel1 is
markedly smaller than it was


158
00:08:01,166 --> 00:08:02,066
in the previous example.


159
00:08:03,846 --> 00:08:05,656
So, what's happening here?


160
00:08:05,756 --> 00:08:09,096
Well, we're using SpriteKit's
powerful search features


161
00:08:09,456 --> 00:08:11,496
to enumerate through
the content of the scene


162
00:08:12,206 --> 00:08:15,976
and by bringing upon no
names and conventions


163
00:08:15,976 --> 00:08:18,516
with your artists, we
could make it really easy


164
00:08:19,256 --> 00:08:22,226
to pull the logical elements
out of the scene by name


165
00:08:22,226 --> 00:08:23,756
and hooking them up to code.


166
00:08:24,276 --> 00:08:28,136
And here we said there's a
totemNode and we're going


167
00:08:28,136 --> 00:08:30,686
to attach children
based on level 1.


168
00:08:30,786 --> 00:08:33,826
So, let's go through
the scene here.


169
00:08:33,826 --> 00:08:37,676
This is the basic structure
of this first scene.


170
00:08:37,966 --> 00:08:38,806
That's a base.


171
00:08:38,806 --> 00:08:42,236
It's got a background and it's
got a little empty node here


172
00:08:42,716 --> 00:08:43,676
which I named totem.


173
00:08:44,966 --> 00:08:47,326
So, in code I'm going
to load up the scene.


174
00:08:47,636 --> 00:08:50,876
I'm going to fetch
the node called totem.


175
00:08:52,536 --> 00:08:56,556
At that node I'm going
to attach level 1.


176
00:08:56,556 --> 00:09:01,056
And level 1 looks like that.


177
00:09:01,056 --> 00:09:03,356
So, I've separated out the
structure of the theme,


178
00:09:03,826 --> 00:09:06,586
which is my game, with
the contents of level 1,


179
00:09:07,056 --> 00:09:08,126
which is just a stack.


180
00:09:09,776 --> 00:09:15,226
And continuing this theme
when I do my game logic,


181
00:09:16,196 --> 00:09:19,916
I keep using names in
order to evaluate whether


182
00:09:19,916 --> 00:09:21,246
or not an object says totem.


183
00:09:21,936 --> 00:09:24,316
This means like the artist
can add incidental objects


184
00:09:24,316 --> 00:09:25,506
but they're not named totem.


185
00:09:25,506 --> 00:09:29,086
Adding them to the scene don't
affect the scoring of your game.


186
00:09:29,526 --> 00:09:34,316
So, just as a simple example of
what you should do to separate


187
00:09:34,316 --> 00:09:36,486
out your game logic
from the game lessons.


188
00:09:37,256 --> 00:09:38,086
OK, thanks.


189
00:09:39,516 --> 00:09:46,276
[ Pause ]


190
00:09:46,776 --> 00:09:48,346
OK. Let's recap this.


191
00:09:48,416 --> 00:09:50,356
So, you saw the SpriteKit
template.


192
00:09:50,356 --> 00:09:54,666
What we're doing is we're
taking scene file which,


193
00:09:54,666 --> 00:09:56,246
in this case is MyScene.sks,


194
00:09:57,306 --> 00:10:00,376
and your basic code file
is MyScene.h and MyScene.m.


195
00:10:01,096 --> 00:10:03,756
And we're separating out
the logic from the assets.


196
00:10:05,086 --> 00:10:07,096
The key here is to
use NSKeyedUnarchiver,


197
00:10:07,456 --> 00:10:09,276
which some of you might not
be familiar with already.


198
00:10:09,496 --> 00:10:14,286
You insert the class
replacement,


199
00:10:14,876 --> 00:10:18,316
in this case arch
setClass:MyScene.class


200
00:10:18,366 --> 00:10:20,556
forClassName:@"SKScene".


201
00:10:21,126 --> 00:10:22,886
This replaces any reference


202
00:10:22,886 --> 00:10:25,486
to SKScene inside the scene
file with your own class.


203
00:10:25,556 --> 00:10:29,696
And it's as simple as that.


204
00:10:29,806 --> 00:10:32,956
So, let's go on to Game
Structure Best Practices,


205
00:10:33,326 --> 00:10:34,756
like you've seen in the example.


206
00:10:36,296 --> 00:10:38,926
Motivation here is of
course get your game running


207
00:10:38,926 --> 00:10:39,826
on the first day.


208
00:10:40,806 --> 00:10:42,906
How are you going to know
that your game is fun


209
00:10:43,216 --> 00:10:44,906
if you're not playing it?


210
00:10:45,016 --> 00:10:46,336
So, get it up and
going on the first day.


211
00:10:47,606 --> 00:10:50,136
You won't do this without
compromising scalability, OK.


212
00:10:50,706 --> 00:10:53,586
So, don't rushing into
it, and set yourself


213
00:10:53,586 --> 00:10:55,256
up to iterate collaboratively.


214
00:10:55,836 --> 00:10:58,246
Designers want to be designers,
artists want to be artists,


215
00:10:58,896 --> 00:11:03,846
coders want to be
all of the above.


216
00:11:04,886 --> 00:11:08,356
So, make your generic level,
as I showed in the example.


217
00:11:09,036 --> 00:11:11,526
To make it simple, get
your designer to commit


218
00:11:11,526 --> 00:11:13,766
to where the general gameplay
is going to be happen,


219
00:11:14,376 --> 00:11:16,146
what object is interacting
with what.


220
00:11:18,426 --> 00:11:19,966
Add placeholder content.


221
00:11:20,456 --> 00:11:21,856
I'll go through that shortly.


222
00:11:21,856 --> 00:11:23,736
Hook up with interactions.


223
00:11:23,786 --> 00:11:26,776
So, this is you as a coder
and the designer working


224
00:11:26,776 --> 00:11:28,746
out what interactions
would need to be there.


225
00:11:29,366 --> 00:11:30,406
Get the game logic working.


226
00:11:30,636 --> 00:11:33,316
And then, of course the
easiest part of all,


227
00:11:33,956 --> 00:11:35,626
which is finish the game.


228
00:11:37,176 --> 00:11:37,616
All right.


229
00:11:37,616 --> 00:11:39,316
So, make your generic level.


230
00:11:40,496 --> 00:11:42,246
This should be logical
layout only.


231
00:11:42,406 --> 00:11:44,116
So, if you don't have
any artwork right now,


232
00:11:44,116 --> 00:11:45,966
don't worry about it.


233
00:11:46,626 --> 00:11:49,776
Place markers, where you
think content is meant to go.


234
00:11:50,586 --> 00:11:53,126
So, if you have action going
from left to right, well,


235
00:11:53,126 --> 00:11:54,446
structure your scene that way.


236
00:11:55,696 --> 00:11:57,516
Place markers where you think
the hero is going to begin,


237
00:11:57,926 --> 00:11:59,346
name that marker "hero".


238
00:11:59,686 --> 00:12:01,806
Place markers where you think
enemies are going to start


239
00:12:01,806 --> 00:12:03,816
out a new scene, probably
name them "enemy".


240
00:12:03,816 --> 00:12:08,016
And any logical layers you
have, such as platforms


241
00:12:08,416 --> 00:12:09,426
or maybe the background.


242
00:12:09,426 --> 00:12:11,116
You want to make sure you're not
putting anything accidentally


243
00:12:11,116 --> 00:12:11,686
on the background.


244
00:12:13,506 --> 00:12:16,716
Then you move on, you
add placeholder content.


245
00:12:17,016 --> 00:12:18,946
This is often what
we called red boxing.


246
00:12:19,686 --> 00:12:24,916
So, pick a color that
you like for your heroes.


247
00:12:24,916 --> 00:12:26,126
Blue perhaps is perfect.


248
00:12:27,076 --> 00:12:29,256
Add them as colored SpriteNodes.


249
00:12:29,656 --> 00:12:32,166
Don't bother with the texture
right now, just put them


250
00:12:32,166 --> 00:12:33,846
in the right spot, right size.


251
00:12:34,016 --> 00:12:37,416
This is a key to your artist
that you're saying I want this


252
00:12:37,446 --> 00:12:39,396
to be roughly the
size over here, right,


253
00:12:39,966 --> 00:12:41,866
because your artist can
only make crazy assets.


254
00:12:43,356 --> 00:12:46,576
OK. Now, make the parent-child
relationships here too.


255
00:12:46,896 --> 00:12:49,736
So, particle emission locations,
if you're making a train game,


256
00:12:50,036 --> 00:12:52,876
it is highly likely that
smoke is going to come


257
00:12:52,876 --> 00:12:55,536
out of a smoke stack and that
smoke should probably move


258
00:12:55,536 --> 00:12:56,116
with the train.


259
00:12:56,706 --> 00:13:00,746
And so, I've set that up as
a parent-child relationship.


260
00:13:01,136 --> 00:13:04,036
Next stop, hook up
the interactions.


261
00:13:04,096 --> 00:13:06,136
So, this is the pass
where you're going


262
00:13:06,136 --> 00:13:07,276
through the physics interactions


263
00:13:07,276 --> 00:13:08,236
and making sure that
they're right.


264
00:13:08,896 --> 00:13:11,736
So, for example if our object
is meant to topple over


265
00:13:11,736 --> 00:13:14,956
or our object is meant to stay
absolutely put when they're hit


266
00:13:15,006 --> 00:13:16,196
by the hammer for example.


267
00:13:17,566 --> 00:13:20,026
Sort out your collision
masks, which objects are meant


268
00:13:20,026 --> 00:13:22,336
to interact with
which and make sure


269
00:13:22,336 --> 00:13:24,156
that you simulate this
right within Xcode.


270
00:13:24,156 --> 00:13:27,136
Get it right from the start.


271
00:13:27,566 --> 00:13:28,786
Then you get the
game logic working.


272
00:13:29,396 --> 00:13:31,146
And this is where you
initialize your scene logic


273
00:13:31,146 --> 00:13:32,076
and game logic together.


274
00:13:32,076 --> 00:13:34,366
So, you're using those names
that you set up in the scene


275
00:13:34,366 --> 00:13:36,826
and you're hooking them
up which is search code


276
00:13:36,826 --> 00:13:39,166
within your actual game code.


277
00:13:40,226 --> 00:13:44,096
And we had a placeholder
inside the sample before,


278
00:13:44,126 --> 00:13:46,686
which was a totem where
we loaded a level scene


279
00:13:46,686 --> 00:13:49,336
and then replaced it wherever
the totem empty locator was.


280
00:13:50,016 --> 00:13:53,526
This is where you
want to do that.


281
00:13:53,866 --> 00:13:57,706
So, here's a sample of me
having the scene structure found


282
00:13:57,876 --> 00:14:00,836
on one side and the actual
scene code on the right


283
00:14:00,836 --> 00:14:04,096
and I'm just making sure that
my code matches what I think the


284
00:14:04,156 --> 00:14:06,946
scene structure is.


285
00:14:07,316 --> 00:14:11,036
So, of course just hooking
it up is probably not going


286
00:14:11,036 --> 00:14:12,206
to make your game great and fun.


287
00:14:12,246 --> 00:14:15,416
You're going to make sure that
it's doing what it's meant


288
00:14:15,416 --> 00:14:18,106
to be doing and that you've
got unit stats loaded,


289
00:14:18,496 --> 00:14:19,956
scores and similar things.


290
00:14:20,276 --> 00:14:23,246
There are two logical places
within your scene to do this.


291
00:14:24,466 --> 00:14:25,876
There's one which
is on first load


292
00:14:26,256 --> 00:14:27,736
which is called initWithCoder.


293
00:14:27,826 --> 00:14:30,286
And this is going to
get called automatically


294
00:14:30,356 --> 00:14:31,626
by the KeyedUnarchiver.


295
00:14:32,716 --> 00:14:35,166
The second is didMoveToView
and this is


296
00:14:35,166 --> 00:14:38,516
when you're presenting it
as a scene on your SKView.


297
00:14:40,546 --> 00:14:43,376
So, let's jump into
the details with that.


298
00:14:43,946 --> 00:14:45,366
So, on first load, as I said,


299
00:14:45,366 --> 00:14:47,456
automatically called
by NSKeyedUnarchiver.


300
00:14:47,786 --> 00:14:49,546
This is where you're
reloading sidecar data.


301
00:14:50,056 --> 00:14:54,026
Sound, for example,
AI, or any unit stats


302
00:14:54,026 --> 00:14:54,846
that aren't going to change.


303
00:14:55,956 --> 00:14:58,756
That's called initWithCoder,
make sure you go super init


304
00:14:58,756 --> 00:15:01,836
or initWithCoder depending upon
what your super class needs.


305
00:15:02,846 --> 00:15:04,176
And load up the enemy
stats here.


306
00:15:04,326 --> 00:15:07,216
I just loaded NSArray
from a .plist,


307
00:15:07,686 --> 00:15:09,566
very simple just a one-liner.


308
00:15:11,226 --> 00:15:14,626
Next up, you can move
to your node first shown


309
00:15:14,626 --> 00:15:15,536
in this message point.


310
00:15:16,146 --> 00:15:19,266
So, this is called an
SKView.presentScene:is called


311
00:15:19,266 --> 00:15:19,886
with your scene.


312
00:15:20,236 --> 00:15:22,816
And this is a great place to
cache your visual elements.


313
00:15:23,626 --> 00:15:27,516
So, SKScene is going to get
loaded by the KeyedUnarchiver.


314
00:15:28,196 --> 00:15:30,616
And all the visual elements,
the PNGs that are referenced


315
00:15:30,616 --> 00:15:33,046
in there are going to get loaded
well before you get to here.


316
00:15:33,746 --> 00:15:37,386
So, you can actually do quite a
bit of work inside didMoveToView


317
00:15:37,986 --> 00:15:40,266
without worrying about a lot
of loading costs and latencies.


318
00:15:40,616 --> 00:15:43,346
If you have a lot of visual
elements you can interact with,


319
00:15:43,506 --> 00:15:44,296
cache them right here.


320
00:15:45,256 --> 00:15:47,086
In this case, I'm
finding all the enemies


321
00:15:47,456 --> 00:15:49,996
and I'm saving them
away in my enemy array.


322
00:15:50,976 --> 00:15:58,536
So, the motivation for
doing this is that you want


323
00:15:58,536 --> 00:16:02,956
to have a simple way of taking
your logical scene elements


324
00:16:02,956 --> 00:16:04,476
and hooking them
up to your code.


325
00:16:04,706 --> 00:16:09,016
There are two different methods
for searching, childNodeNamed


326
00:16:09,416 --> 00:16:13,616
for finding a single element
and enumerateChildNodesWithName


327
00:16:13,616 --> 00:16:16,576
for multiple elements
and that's the results.


328
00:16:17,066 --> 00:16:20,156
I really can't stress it enough.


329
00:16:22,146 --> 00:16:25,466
You saw in the previous
slide just a quick hint


330
00:16:25,926 --> 00:16:29,016
of a search syntax that
might not have been apparent


331
00:16:29,016 --> 00:16:29,706
to you at first.


332
00:16:31,046 --> 00:16:35,016
We have an Xpath-style
search in your scene which,


333
00:16:35,306 --> 00:16:37,286
in this case, was //enemy.


334
00:16:38,126 --> 00:16:41,496
What that means is
find all enemies


335
00:16:42,246 --> 00:16:44,336
from the root, recursive down.


336
00:16:45,036 --> 00:16:46,696
Some examples here: @"hero"


337
00:16:47,236 --> 00:16:49,546
which is find the child called
hero, without recursive.


338
00:16:49,856 --> 00:16:55,016
//hero would find all the nodes
in hero in recursive order.


339
00:16:56,096 --> 00:16:59,006
We can also search by class,
not just name but class.


340
00:16:59,036 --> 00:17:00,896
So, we can go //EmitterNode,


341
00:17:01,256 --> 00:17:03,686
we'd find all the emitter
nodes in your scene.


342
00:17:04,685 --> 00:17:08,046
And you can also use
blob-style partial matches,


343
00:17:08,685 --> 00:17:11,435
such as the wildcard
here where it's anything,


344
00:17:11,435 --> 00:17:14,556
any node named starting
with "he".


345
00:17:16,056 --> 00:17:18,506
Super powerful, and this is
going to be your best way


346
00:17:18,506 --> 00:17:21,226
of lodging up-of linking
up your logical scene


347
00:17:21,516 --> 00:17:24,665
with the actual game code.


348
00:17:25,175 --> 00:17:26,806
And obviously that's
what we did.


349
00:17:27,256 --> 00:17:28,746
In the sample that
you saw before,


350
00:17:29,456 --> 00:17:32,466
we can see child node remain
being used extensively


351
00:17:32,466 --> 00:17:33,666
to find the actual objects


352
00:17:33,666 --> 00:17:35,626
within the scene
inside the game code.


353
00:17:35,626 --> 00:17:38,666
This is very fast, so
you can do it often


354
00:17:39,496 --> 00:17:41,556
but we do recommend
your cache results


355
00:17:42,126 --> 00:17:43,696
if it becomes a performance
problem.


356
00:17:44,206 --> 00:17:45,216
All right.


357
00:17:45,216 --> 00:17:46,746
Last step, I'm just
going to gloss


358
00:17:46,746 --> 00:17:47,956
over this one because it's easy.


359
00:17:48,816 --> 00:17:52,386
Finish the game-that's
totally up to you, of course.


360
00:17:52,836 --> 00:17:53,616
Add the artwork.


361
00:17:54,366 --> 00:17:57,036
You can then replace the
textures on the red boxes,


362
00:17:57,036 --> 00:17:58,696
because hopefully your
artist has delivered them


363
00:17:59,006 --> 00:17:59,716
at the right size.


364
00:18:00,456 --> 00:18:03,246
Add the levels that you
need, which should be easy


365
00:18:03,246 --> 00:18:05,906
if you followed all the
points, add any effects.


366
00:18:06,026 --> 00:18:08,326
Norman showed you how easy it
is to add shaders to things.


367
00:18:08,326 --> 00:18:11,206
You can also use Corelmage
filters on the effect nodes


368
00:18:11,206 --> 00:18:14,306
to add that special image
post processing effects.


369
00:18:14,716 --> 00:18:16,556
And of course, play
test-iterate.


370
00:18:16,786 --> 00:18:21,376
I can't stress this
enough: have fun.


371
00:18:21,966 --> 00:18:23,296
This is what games is all about.


372
00:18:23,856 --> 00:18:26,356
Make sure you're having fun
when you're making a game.


373
00:18:26,356 --> 00:18:28,786
OK. Let me hand you
over to Nick now to talk


374
00:18:28,786 --> 00:18:30,056
about performance
best practices.


375
00:18:30,496 --> 00:18:30,926
Thank you so much.


376
00:18:31,516 --> 00:18:37,916
[ Applause ]


377
00:18:38,416 --> 00:18:40,416
>> Thanks, Jacques.


378
00:18:41,106 --> 00:18:44,506
Today I want to talk about
my two favorite things, well,


379
00:18:44,756 --> 00:18:45,816
two of my favorite things.


380
00:18:46,186 --> 00:18:50,526
One, which is improving
performance in order to squeeze


381
00:18:50,526 --> 00:18:52,246
down the amount of time
that your game takes


382
00:18:52,246 --> 00:18:56,866
to execute 60 times a second
and then increasing the awesome


383
00:18:56,866 --> 00:18:58,996
that you can squeeze into
that space that you made


384
00:18:58,996 --> 00:19:00,436
by improving your performance.


385
00:19:02,346 --> 00:19:05,776
So, I have a bunch of topics
to go through and just


386
00:19:05,776 --> 00:19:08,166
to quickly give you a
preview and then talk


387
00:19:08,166 --> 00:19:11,336
about understanding what
is involved in drawing


388
00:19:11,336 --> 00:19:13,126
and where their time
is going to go.


389
00:19:13,456 --> 00:19:15,246
I'm going to talk about
actions and constraints,


390
00:19:15,686 --> 00:19:16,986
how they're the secret window


391
00:19:17,136 --> 00:19:19,576
into the underlying
SpriteKit engine.


392
00:19:20,026 --> 00:19:22,686
And physics, there's a
cost hierarchy there,


393
00:19:22,686 --> 00:19:23,996
it's just very helpful
to understand,


394
00:19:24,586 --> 00:19:26,066
similarly for shape nodes.


395
00:19:26,606 --> 00:19:30,456
Talk a little bit about effects
and some good to know facts


396
00:19:30,456 --> 00:19:31,896
about our lighting systems.


397
00:19:34,216 --> 00:19:36,346
So, drawing performance.


398
00:19:39,016 --> 00:19:43,056
There's two things that impact
your drawing performance


399
00:19:43,756 --> 00:19:45,116
in a big, big way.


400
00:19:45,646 --> 00:19:48,696
One is the choice of draw order,


401
00:19:49,066 --> 00:19:51,566
how it is that you submit
your sprites to the engine,


402
00:19:52,156 --> 00:19:56,046
and two is sharing the
resources that are used


403
00:19:56,046 --> 00:19:57,186
to accomplish that drawing.


404
00:19:57,836 --> 00:20:06,696
Now, SpriteKit has by default
a sibling order draw rule


405
00:20:06,696 --> 00:20:08,976
which influence the
standard painter's algorithm.


406
00:20:09,786 --> 00:20:11,856
There are two rules,
your parent--


407
00:20:11,946 --> 00:20:14,296
the parent draws first
then recurses down


408
00:20:14,296 --> 00:20:16,476
and draws the children
and then their children


409
00:20:16,476 --> 00:20:17,736
and so on as it goes.


410
00:20:18,346 --> 00:20:20,076
And children are
rendered in the order


411
00:20:20,076 --> 00:20:21,376
that they appear
in the child array.


412
00:20:22,196 --> 00:20:25,836
Now, in this diagram here,
obviously the helicopter has got


413
00:20:25,836 --> 00:20:27,536
at its very bottom
some missiles,


414
00:20:27,936 --> 00:20:30,266
then the body and the rotors.


415
00:20:30,786 --> 00:20:34,206
And it's straightforward
to create this in code just


416
00:20:34,206 --> 00:20:35,616
by adding the various parts.


417
00:20:36,306 --> 00:20:41,256
Now, this is very convenient for
prototyping, but what is it do


418
00:20:41,256 --> 00:20:42,316
to drawing performance?


419
00:20:43,426 --> 00:20:47,906
So, here's my amazing
game scene and it's going


420
00:20:47,906 --> 00:20:49,786
to have a bunch of
helicopters in it.


421
00:20:52,356 --> 00:20:54,826
The each piece as we recurse


422
00:20:54,826 --> 00:20:58,036
down the draw order
comes down one at a time.


423
00:20:58,266 --> 00:20:59,426
It's a little draw call.


424
00:20:59,926 --> 00:21:02,136
And that's a lot of
individual draw calls.


425
00:21:02,136 --> 00:21:04,466
It's going to take some
time and you get the idea,


426
00:21:04,466 --> 00:21:05,536
let's just fill them
all in there.


427
00:21:06,156 --> 00:21:08,936
Now, what SpriteKit
gives you in order


428
00:21:08,936 --> 00:21:16,726
to avoid this problem is
the magical third dimension.


429
00:21:18,016 --> 00:21:20,476
So, let's have a look at
what we can do with that.


430
00:21:21,526 --> 00:21:24,266
If we set ignoreSiblingOrder
to YES,


431
00:21:24,796 --> 00:21:29,086
we can use depth to
control the order.


432
00:21:29,696 --> 00:21:30,696
That's going to be
pretty helpful.


433
00:21:30,786 --> 00:21:32,486
So, we've got the
helicopter, we are going


434
00:21:32,486 --> 00:21:34,616
to arbitrarily set
it on level 100.


435
00:21:36,006 --> 00:21:37,936
Let's stretch out the rotors


436
00:21:37,936 --> 00:21:41,506
and pull them towards
the camera at level 1.


437
00:21:42,716 --> 00:21:45,806
Now, let's push the
missiles back like that.


438
00:21:46,536 --> 00:21:47,796
So, now they're stacked.


439
00:21:49,076 --> 00:21:53,346
Now, SpriteKit knows what you
intended with your composite.


440
00:21:53,346 --> 00:21:55,796
It's not based on the order
that was added in code


441
00:21:55,796 --> 00:21:56,576
or anything like that.


442
00:21:56,576 --> 00:21:58,556
It's based on something
absolute, which is,


443
00:21:58,996 --> 00:22:00,416
where is my parent in space.


444
00:22:00,636 --> 00:22:04,466
So, what does that
do for a drawing?


445
00:22:04,626 --> 00:22:07,026
Well, bit by bit, you can see


446
00:22:07,486 --> 00:22:09,486
that we've got a
lot less draw calls


447
00:22:09,486 --> 00:22:10,446
because we're done already.


448
00:22:10,446 --> 00:22:12,266
So, that's great.


449
00:22:12,886 --> 00:22:13,966
And you've got a whole bunch


450
00:22:13,966 --> 00:22:16,186
of performance back right away
especially if you have lots


451
00:22:16,186 --> 00:22:20,916
of objects, but you can
go further of course.


452
00:22:21,086 --> 00:22:22,246
Use texture atlases.


453
00:22:22,646 --> 00:22:26,606
So, here I've put all of
the sprites onto one texture


454
00:22:27,126 --> 00:22:28,896
and how is that going
to help me?


455
00:22:29,736 --> 00:22:32,406
Well, here's my magical
scene again with lots


456
00:22:32,406 --> 00:22:35,056
of helicopters and
boom, I'm done.


457
00:22:35,536 --> 00:22:38,176
SpriteKit can know
that's one texture.


458
00:22:38,456 --> 00:22:40,376
It knows what order all the
bits have to be drawn in


459
00:22:40,376 --> 00:22:44,346
and just batch it all up for
the GPU and blast it on out


460
00:22:44,586 --> 00:22:47,116
and potentially with
just one single call,


461
00:22:47,116 --> 00:22:48,086
so that's pretty awesome.


462
00:22:48,696 --> 00:22:53,416
Now, there's a whole bunch of
other things that can be shared


463
00:22:53,736 --> 00:22:55,916
and you should be
aware of those things.


464
00:22:56,486 --> 00:22:58,916
We have a new normal
map generation scheme.


465
00:22:59,406 --> 00:23:02,166
And you can see that there
is a little flower block.


466
00:23:02,756 --> 00:23:06,646
And because SpriteKit
textures are keyed off a name


467
00:23:07,176 --> 00:23:12,776
and normal maps were generated
on the fly and without a name


468
00:23:12,886 --> 00:23:13,966
and just assigned somewhere.


469
00:23:14,416 --> 00:23:16,726
If you're going to use that
normal map on the block,


470
00:23:17,076 --> 00:23:18,666
you need to know--
let the engine know


471
00:23:18,796 --> 00:23:20,516
that it's generating
a shared thing.


472
00:23:20,986 --> 00:23:24,456
So, generate your normal
map, store it on a texture


473
00:23:24,456 --> 00:23:26,376
and then assign that texture
all the sprites they're going


474
00:23:26,376 --> 00:23:30,406
to use it as opposed to every
time you have that block asking


475
00:23:30,406 --> 00:23:31,446
for it to be generated.


476
00:23:32,296 --> 00:23:35,286
Similarly, we've got some
cool procedural noise


477
00:23:35,286 --> 00:23:37,536
which you might be like
to using your shaders


478
00:23:37,536 --> 00:23:40,186
or to provide some sort of, you
know, television snow effect


479
00:23:40,186 --> 00:23:40,946
or something like that.


480
00:23:41,416 --> 00:23:44,116
If you can reuse the noise at
the scale that you've generated,


481
00:23:44,516 --> 00:23:46,596
cache that off because
every noise texture


482
00:23:46,596 --> 00:23:48,686
that you make is going to
consume memory, and once again,


483
00:23:49,126 --> 00:23:50,836
SpriteKit won't know
unless if you tell it


484
00:23:50,836 --> 00:23:54,066
by sharing a variable in
a cache pointer somewhere


485
00:23:54,066 --> 00:23:56,116
that it is actually the
same texture it won't know


486
00:23:56,266 --> 00:24:00,186
and it won't be able to batch.


487
00:24:00,396 --> 00:24:01,706
Couple of other similar points.


488
00:24:02,166 --> 00:24:04,906
If you reference shaders from
files, SpriteKit will know


489
00:24:05,156 --> 00:24:09,446
that vortex.fsh is vortex.fsh
everywhere you reference it.


490
00:24:10,096 --> 00:24:13,106
So, when you're prototyping,
it's often very convenient


491
00:24:13,106 --> 00:24:15,616
to reference shaders from
strings, so go ahead and do


492
00:24:15,616 --> 00:24:16,576
that during prototyping.


493
00:24:16,896 --> 00:24:18,626
But SpriteKit doesn't really
have any way of knowing


494
00:24:18,626 --> 00:24:20,806
that genuinely these two shaders
are the same even though the


495
00:24:20,806 --> 00:24:21,906
source code might be the same.


496
00:24:22,366 --> 00:24:24,846
If you reference it from a
file, then we can do all kinds


497
00:24:24,846 --> 00:24:27,396
of pre-analysis beforehand
to just cache it all off


498
00:24:27,796 --> 00:24:29,726
and it's going to
go that much faster


499
00:24:30,106 --> 00:24:32,496
because if all those helicopters
have the same shader,


500
00:24:32,496 --> 00:24:35,106
once again, it knows it can just
blast them all off like that.


501
00:24:35,106 --> 00:24:38,666
And then, finally,
slightly esoteric point


502
00:24:38,666 --> 00:24:41,986
on batching here is we offer
a number of blend modes


503
00:24:42,376 --> 00:24:46,236
such as additive or
multiplicative or whatever.


504
00:24:46,866 --> 00:24:50,096
Because changing a blend
mode changes the GPU stage,


505
00:24:50,736 --> 00:24:53,746
we have to actually interrupt
the drawing every time we change


506
00:24:53,746 --> 00:24:56,766
that stage in order to
allow the bind to occur.


507
00:24:57,196 --> 00:24:59,836
So, a trick you can use,
you can imagine for example


508
00:24:59,836 --> 00:25:02,246
if you had some sort of a
misty forest scene with a layer


509
00:25:02,246 --> 00:25:05,586
of trees and then a layer of
creatures and then another layer


510
00:25:05,586 --> 00:25:07,376
of trees and the trees
have alpha in them.


511
00:25:08,026 --> 00:25:10,246
If you put all those
things on the same Z,


512
00:25:10,246 --> 00:25:12,106
like literally exactly
the same Z,


513
00:25:12,666 --> 00:25:14,646
then SpriteKit will know
these things go together


514
00:25:15,066 --> 00:25:18,166
with their blend mode and,
for example, all of the trees


515
00:25:18,166 --> 00:25:21,166
in the front can go out in one
draw call with one blend mode


516
00:25:21,656 --> 00:25:25,456
and that may or may not be
just that little extra bit


517
00:25:25,456 --> 00:25:27,676
that you needed to get a
little more time to squeeze


518
00:25:27,676 --> 00:25:28,726
in that little more awesome.


519
00:25:29,316 --> 00:25:34,986
Now, there's tools to help you
evaluate graphics performance.


520
00:25:35,316 --> 00:25:36,866
So, you don't just need to have


521
00:25:36,866 --> 00:25:39,386
like a mysterious mental
model of these things.


522
00:25:39,696 --> 00:25:44,566
And there is actual, you know,
quantitative things you can do


523
00:25:44,786 --> 00:25:47,266
to get some insight into what
SpriteKit is doing behind


524
00:25:47,266 --> 00:25:47,836
the scenes.


525
00:25:49,196 --> 00:25:53,996
So, first of all, there's a
number of flags on the view


526
00:25:54,296 --> 00:25:57,306
which you can turn on and off
in order to get some insight.


527
00:25:58,026 --> 00:26:01,496
There is the obvious frame
counter, FPS, frames per second.


528
00:26:02,126 --> 00:26:05,016
There's a DrawCount
which is actually going


529
00:26:05,016 --> 00:26:07,406
to tell you how many
batches did I get;


530
00:26:08,056 --> 00:26:09,996
and there is your NodeCount


531
00:26:10,306 --> 00:26:14,006
which is how many SK-like
SpriteKit nodes-actually went


532
00:26:14,006 --> 00:26:16,326
down the pipeline, and
finally the QuadCount.


533
00:26:16,996 --> 00:26:18,526
If you're using something
like a shape,


534
00:26:18,526 --> 00:26:22,206
it might be comprised
of multiple subquads.


535
00:26:22,836 --> 00:26:27,756
So, it's going to tell you
that and I have just a quick,


536
00:26:27,756 --> 00:26:29,066
little thing here
to show you that.


537
00:26:29,066 --> 00:26:33,116
I have all these gears
and it's showing 12 nodes.


538
00:26:33,116 --> 00:26:34,376
You'd have to inspect
my scene graph


539
00:26:34,376 --> 00:26:35,556
to discover why there's 12.


540
00:26:35,986 --> 00:26:38,456
But there's six gears, you
can probably guess sort


541
00:26:38,456 --> 00:26:39,466
of what might be going on there.


542
00:26:39,966 --> 00:26:43,106
There's a heck of a lot of
quads, like really a lot,


543
00:26:43,756 --> 00:26:46,816
I have 12 draws but it's
running at 60 frames a second.


544
00:26:46,816 --> 00:26:48,616
So, I'm pretty happy
with that right now


545
00:26:48,616 --> 00:26:50,026
for my magical gear game.


546
00:26:50,586 --> 00:26:56,816
So, the other thing
you've got is the GL frame,


547
00:26:57,706 --> 00:26:58,766
the GL frame debugger.


548
00:26:59,316 --> 00:27:01,096
So, there's all kinds
of cool gauges


549
00:27:01,406 --> 00:27:03,306
and tell you what
proportion of this


550
00:27:03,306 --> 00:27:04,896
and that is happening
throughout your frame


551
00:27:05,396 --> 00:27:06,736
and it will give
you some insight


552
00:27:06,736 --> 00:27:08,756
into what GL calls are
being evoked on the fly.


553
00:27:09,286 --> 00:27:11,376
And there's a heck of
a lot of documentation


554
00:27:11,376 --> 00:27:12,476
and information about this.


555
00:27:12,476 --> 00:27:14,026
It's a really fantastic tool


556
00:27:14,376 --> 00:27:16,916
for understanding the runtime
characteristics of your game.


557
00:27:17,426 --> 00:27:20,426
You'll notice as you run
this thing what's going


558
00:27:20,426 --> 00:27:23,056
on in the hardware and
corresponding to what's going


559
00:27:23,056 --> 00:27:26,266
on in your game and study that
will give you good insight


560
00:27:26,266 --> 00:27:28,586
into what the engine
is doing for you.


561
00:27:29,716 --> 00:27:33,646
So, to kind of roll that all up.


562
00:27:34,336 --> 00:27:38,046
The idea here is compose
your scenes as layers,


563
00:27:38,526 --> 00:27:40,806
common Z values are
going to help you a lot


564
00:27:40,806 --> 00:27:41,826
for the reasons I mentioned.


565
00:27:43,316 --> 00:27:45,856
Put overlapping things in
different layers in order


566
00:27:45,856 --> 00:27:47,526
to control the draw
order instead


567
00:27:47,526 --> 00:27:51,616
of using the SiblingOrder
and SiblingOrder = YES.


568
00:27:52,036 --> 00:27:52,996
Share your stuff.


569
00:27:53,436 --> 00:27:54,906
Blend modes go together.


570
00:27:55,656 --> 00:27:57,636
And use the HUDs and profilers


571
00:27:57,636 --> 00:27:59,776
to really understand
what the engine is doing.


572
00:28:01,936 --> 00:28:05,156
All right, next up:
Actions and Constraints.


573
00:28:05,576 --> 00:28:08,026
As I mentioned in
the introduction,


574
00:28:08,626 --> 00:28:13,136
cool thing about actions is
they really are a magic window


575
00:28:13,416 --> 00:28:16,106
into the very guts of the
SpriteKit execution engine.


576
00:28:16,796 --> 00:28:20,116
Deep down inside we continuously
improve the performance


577
00:28:20,336 --> 00:28:22,766
of the various operations
SpriteKit provides.


578
00:28:23,616 --> 00:28:26,816
Actions, or these
little Objective-C things


579
00:28:26,816 --> 00:28:28,606
that you might think,
"That might be heavy."


580
00:28:28,836 --> 00:28:29,386
But it's not.


581
00:28:30,046 --> 00:28:32,966
It really queues up instructions
for the execution engine,


582
00:28:33,216 --> 00:28:34,606
just a couple of
bytes here and there,


583
00:28:34,926 --> 00:28:35,986
to tell you what's
going to happen.


584
00:28:35,986 --> 00:28:39,096
And then it puts it off
into our internal queues


585
00:28:39,096 --> 00:28:42,306
and whatnot to run.


586
00:28:43,476 --> 00:28:46,116
So, making action.


587
00:28:46,916 --> 00:28:50,236
Here I've got a node
and I'm going to rotate


588
00:28:50,236 --> 00:28:52,406
by pi apparently for one second.


589
00:28:52,996 --> 00:28:55,646
You can chain them,
group them, reuse them.


590
00:28:57,056 --> 00:29:00,506
Here, the little airplanes that
you might all be familiar with.


591
00:29:01,066 --> 00:29:03,636
And they're rotating
continuously


592
00:29:03,826 --> 00:29:05,836
for a period of a second.


593
00:29:05,916 --> 00:29:07,436
They're moving around
and they're scaling.


594
00:29:08,416 --> 00:29:10,536
It's really simple
to set this stuff up.


595
00:29:10,946 --> 00:29:13,056
The execution engine
is ticking it over.


596
00:29:13,056 --> 00:29:13,846
It's almost free.


597
00:29:14,496 --> 00:29:16,666
It's great to let the
SpriteKit engine do this stuff


598
00:29:16,666 --> 00:29:19,046
for you rather than coding
it all up in your update.


599
00:29:20,256 --> 00:29:22,816
So, a little bit
about sequencing.


600
00:29:23,766 --> 00:29:28,096
Say I've got something that I
have got waiting off stage left,


601
00:29:28,096 --> 00:29:30,666
like a secret monster who
will make his appearance


602
00:29:30,666 --> 00:29:31,566
in less than one second.


603
00:29:32,216 --> 00:29:35,266
And I can have it
wait and then move.


604
00:29:35,906 --> 00:29:38,436
So, that's like a sequence.


605
00:29:40,726 --> 00:29:44,366
Also, when my monster comes,
he might rotate and scale


606
00:29:44,366 --> 00:29:48,006
and then fade away because
he was merely a ghost.


607
00:29:48,206 --> 00:29:51,886
So, that's the use of
like an SKAction group.


608
00:29:52,486 --> 00:29:57,076
And then you can compose
those things as deeply


609
00:29:57,216 --> 00:29:59,656
and "complexively" as you like.


610
00:30:00,466 --> 00:30:01,646
Am I allowed to make up words?


611
00:30:03,796 --> 00:30:04,376
All right.


612
00:30:04,666 --> 00:30:07,276
So, in this case my
monster is going to move.


613
00:30:07,276 --> 00:30:10,886
He's going to scale and rotate
and he's going to fade away.


614
00:30:11,116 --> 00:30:13,816
Now, SKAction.h is your friend.


615
00:30:13,816 --> 00:30:15,036
This is the documentation here.


616
00:30:15,526 --> 00:30:18,756
And I'd like you all to
carefully write these all down.


617
00:30:19,186 --> 00:30:20,936
No. Actually go look
at the documentation


618
00:30:20,936 --> 00:30:22,036
because there's a lot of it.


619
00:30:22,306 --> 00:30:24,126
Now, there's a ton
of power in there.


620
00:30:24,126 --> 00:30:24,976
It's a lot of fun to play with.


621
00:30:25,946 --> 00:30:29,116
Constraints, and you're here
for the previous section.


622
00:30:29,596 --> 00:30:31,456
Norman introduced it quite well.


623
00:30:31,886 --> 00:30:34,956
I have just got a quick
little summary slide here.


624
00:30:35,446 --> 00:30:39,156
Constraints are another
thing which gives you access


625
00:30:39,156 --> 00:30:41,296
to the high-performance engine
running underneath SpriteKit.


626
00:30:41,296 --> 00:30:43,126
In this case it's running
inverse kinematics.


627
00:30:43,586 --> 00:30:45,816
And this little scene
was set up in Xcode.


628
00:30:46,196 --> 00:30:49,886
And very quickly just
clicking and setting


629
00:30:50,086 --> 00:30:51,736
up a couple of parameters.


630
00:30:54,596 --> 00:30:57,516
Here's another one that's
actually new and cool.


631
00:30:57,596 --> 00:31:01,966
You can create a followpath node
which just takes the CGPathRef.


632
00:31:02,516 --> 00:31:05,136
And if you've ever spent any
time with Bezier's points


633
00:31:05,136 --> 00:31:06,986
and whatnot, the math
is kind of hairy,


634
00:31:07,296 --> 00:31:08,796
and especially making
things move


635
00:31:09,106 --> 00:31:11,356
at a uniform speed is
particularly hairy.


636
00:31:11,856 --> 00:31:14,926
So, we went ahead and
given you an SKAction


637
00:31:14,926 --> 00:31:17,906
to follow a path along a
spline that you create,


638
00:31:17,976 --> 00:31:19,436
it's a Catmull-Rom
spline if you care.


639
00:31:20,006 --> 00:31:23,196
And we'll move things along it
at a constant velocity for you.


640
00:31:23,756 --> 00:31:28,796
Click, here we go.


641
00:31:28,866 --> 00:31:30,016
All right.


642
00:31:30,716 --> 00:31:33,026
OrientToNode, similar
sort of thing.


643
00:31:34,156 --> 00:31:36,166
You don't need to bother
with, you know, arc tangents


644
00:31:36,166 --> 00:31:36,996
and all that sort of thing.


645
00:31:37,336 --> 00:31:39,536
The blue ball is moving around,
the arrow is following it.


646
00:31:43,376 --> 00:31:47,486
And the other really cool thing
about actions is they're kind


647
00:31:47,486 --> 00:31:49,136
of latent in memory
when you create them.


648
00:31:49,776 --> 00:31:54,006
Build them once, take advantage
of the fact that they're copying


649
00:31:54,006 --> 00:31:56,336
on add and that they run
when you add it to a scene.


650
00:31:57,156 --> 00:32:00,106
My example here is that
he might have a spaceship


651
00:32:00,456 --> 00:32:03,636
or a monster that's going
to enter from stage left


652
00:32:03,636 --> 00:32:04,716
in the same way every time


653
00:32:04,716 --> 00:32:06,196
and maybe follow a
path and then leave.


654
00:32:06,826 --> 00:32:10,136
If you create that node with
the spaceship and the action,


655
00:32:11,206 --> 00:32:15,156
cache it on a pointer and
then copy it and add it


656
00:32:15,566 --> 00:32:18,106
to your scene, it will
run every single time,


657
00:32:18,516 --> 00:32:21,426
and exactly the same way with
very, very little overhead.


658
00:32:24,156 --> 00:32:28,836
And another fun thing that's
easy to overlook is the purpose


659
00:32:28,886 --> 00:32:30,256
of naming your actions.


660
00:32:30,786 --> 00:32:35,556
So, in this example here,
what I've got is the idea


661
00:32:35,946 --> 00:32:39,146
that I have a sprite that is
basically going to do something


662
00:32:39,146 --> 00:32:40,476
like say follow a touch point.


663
00:32:41,166 --> 00:32:43,806
I might run an action that
is like "move to point".


664
00:32:43,806 --> 00:32:48,406
If I give it the name
"move", now I can override


665
00:32:48,406 --> 00:32:51,256
that action anytime I want
just by using the same key.


666
00:32:51,376 --> 00:32:52,656
So, it might be in progress.


667
00:32:52,886 --> 00:32:54,686
If I run the action
again with a new point,


668
00:32:54,686 --> 00:32:57,626
it will immediately segue
without a hitch or stutter


669
00:32:57,956 --> 00:32:59,666
onto the new action
and continue on.


670
00:33:00,366 --> 00:33:03,346
And finally, if my monster is
coming in here and then he saw


671
00:33:03,346 --> 00:33:06,106
that I had, you know, the
Big Monster Ray Repeller 2000


672
00:33:06,466 --> 00:33:08,436
and he decides he doesn't
want to go all the way


673
00:33:08,436 --> 00:33:11,656
into the scene, we can
just use removeActionForKey


674
00:33:11,936 --> 00:33:15,946
with his move key and that will
cancel that action right away.


675
00:33:16,336 --> 00:33:17,656
And you can go and
do something else.


676
00:33:17,656 --> 00:33:20,146
So, we don't have to wait
for the execution now


677
00:33:20,146 --> 00:33:24,386
to play out to the end.


678
00:33:24,386 --> 00:33:24,696
All right.


679
00:33:26,036 --> 00:33:27,086
Next, physics.


680
00:33:28,436 --> 00:33:29,346
Physics are a lot of fun.


681
00:33:29,986 --> 00:33:34,096
I really, really love the new
simulation tool that we've got


682
00:33:34,096 --> 00:33:37,996
in Xcode because the
hardest thing about working


683
00:33:37,996 --> 00:33:40,316
with physics is getting
the parameters right.


684
00:33:41,086 --> 00:33:43,576
Now, we set things up
with good defaults.


685
00:33:43,576 --> 00:33:46,586
For example, if you set a
mass of 1 and a strength of 1


686
00:33:46,706 --> 00:33:49,936
on a rigid body and a strength
of 1 on a field, they're going


687
00:33:49,936 --> 00:33:52,166
to interact in kind of an
interesting way out of the bat.


688
00:33:52,506 --> 00:33:54,796
But that's just the starting
point for your iteration.


689
00:33:55,966 --> 00:33:59,826
So, rigid bodies, I just
mentioned rigid bodies.


690
00:33:59,826 --> 00:34:00,906
That's all the things
in your game.


691
00:34:00,906 --> 00:34:02,816
They're bouncing, falling,
rolling and sliding.


692
00:34:03,706 --> 00:34:06,836
The things that the
physics engine has


693
00:34:06,836 --> 00:34:10,706
to do each frame are your rigid
bodies, handling collisions


694
00:34:10,706 --> 00:34:11,926
and letting you know
that they have occurred


695
00:34:12,386 --> 00:34:13,255
and physics fields.


696
00:34:14,716 --> 00:34:19,666
Now, a primary thing for
getting access to iteration


697
00:34:19,946 --> 00:34:21,096
and understanding what's going


698
00:34:21,096 --> 00:34:24,206
on is the new physics
visualizer.


699
00:34:24,775 --> 00:34:27,996
So, let's just go back
to my gear scheme here.


700
00:34:27,996 --> 00:34:29,856
I'm dropping in these
wonderful gears.


701
00:34:30,466 --> 00:34:32,275
And wait a second.


702
00:34:33,616 --> 00:34:35,795
His teeth weren't
acting properly.


703
00:34:36,036 --> 00:34:36,806
What's up with that?


704
00:34:38,025 --> 00:34:41,356
The other ones are interlocking
but just not that one.


705
00:34:42,216 --> 00:34:45,045
So, I'll turn on the
visualizer and you can see,


706
00:34:45,045 --> 00:34:47,126
oh, that one is a circle.


707
00:34:47,536 --> 00:34:48,815
I made a mistake somewhere.


708
00:34:49,005 --> 00:34:52,545
So, I can go either in Xcode
and click on my thing or,


709
00:34:52,545 --> 00:34:55,076
if it's procedural, I can
look at my code and I can find


710
00:34:55,076 --> 00:34:57,306
out why did this one
slips through the cracks.


711
00:34:57,686 --> 00:35:01,596
So, this is your-- This is your
great first line of defense


712
00:35:01,596 --> 00:35:03,876
for just understanding what
the dynamic behavior is


713
00:35:03,876 --> 00:35:05,066
if it's not what you expected.


714
00:35:05,696 --> 00:35:07,066
You can also use this mode


715
00:35:07,416 --> 00:35:10,726
for identifying quickly
what is the cause


716
00:35:11,006 --> 00:35:13,296
of physics performance issues.


717
00:35:13,676 --> 00:35:15,586
An object might be
stuck in a wall


718
00:35:15,876 --> 00:35:17,386
and it might be an
invisible wall


719
00:35:17,386 --> 00:35:19,396
because it was only
there as a physics body.


720
00:35:19,866 --> 00:35:21,746
Now, you'll just be
able to see that, oh,


721
00:35:21,866 --> 00:35:23,526
it's continuously
pushing in and out


722
00:35:23,526 --> 00:35:24,956
of collision and can't escape.


723
00:35:25,566 --> 00:35:27,626
And the next steps to solve


724
00:35:27,626 --> 00:35:29,626
that problem will
probably occur to you.


725
00:35:32,196 --> 00:35:38,446
So, in order to take best
advantage of physics in order


726
00:35:38,446 --> 00:35:42,036
to get performance, so you can
squeeze down the amount of time


727
00:35:42,036 --> 00:35:43,906
that you're spending, you
can squeeze in more awesome,


728
00:35:44,716 --> 00:35:46,676
is to understand
the cost hierarchy.


729
00:35:47,066 --> 00:35:52,016
First of all, dynamic
objects cost more,


730
00:35:52,156 --> 00:35:55,126
because their collisions need
to be resolved and they need


731
00:35:55,126 --> 00:35:59,096
to be moved out of intersection,
than objects that are static,


732
00:35:59,396 --> 00:36:01,516
like hopefully the stage
that I'm standing on.


733
00:36:02,386 --> 00:36:08,576
So, if you can set an object
to dynamic = NO, you're going


734
00:36:08,576 --> 00:36:10,256
to get a lot of performance
back right away.


735
00:36:10,936 --> 00:36:16,746
At the most efficient end
of the scale are circles.


736
00:36:17,886 --> 00:36:21,666
You can have dozens of
circles for every other kind


737
00:36:21,666 --> 00:36:22,946
or shape that you can have.


738
00:36:23,776 --> 00:36:27,416
And circles might work really,
really good for a lot of things,


739
00:36:27,416 --> 00:36:30,346
especially if they're
circular or they're small.


740
00:36:30,346 --> 00:36:32,206
So you're not going to really
notice what the interaction is.


741
00:36:32,866 --> 00:36:34,616
The circle doesn't fit
very well on that hammer.


742
00:36:35,176 --> 00:36:37,586
That's a bit better.


743
00:36:37,726 --> 00:36:39,946
The hammer at least, you
know, has edges and stuff.


744
00:36:41,096 --> 00:36:43,316
This is more expensive
than the circle


745
00:36:43,776 --> 00:36:45,236
where you could have
dozens of circles.


746
00:36:45,236 --> 00:36:48,356
You can have maybe, I
don't know, eight of these.


747
00:36:48,616 --> 00:36:50,356
Just, you know, being a
little bit silly there.


748
00:36:50,966 --> 00:36:52,956
And polygons are better.


749
00:36:53,496 --> 00:36:56,886
This is probably going to
be the one that serves a lot


750
00:36:56,886 --> 00:36:58,336
of complicated shapes the best.


751
00:36:58,876 --> 00:37:00,816
It's more expensive
than the rectangle


752
00:37:00,816 --> 00:37:02,296
because there's more
edges to compute.


753
00:37:03,456 --> 00:37:07,376
Compound objects
need to be iterated


754
00:37:07,376 --> 00:37:09,296
through all the way
for all the pieces.


755
00:37:10,026 --> 00:37:12,596
Lots of circles compounded
are a lot cheaper


756
00:37:12,596 --> 00:37:14,066
than a lot of boxes compounded.


757
00:37:14,636 --> 00:37:22,696
And finally, there is the
perfect pixel alpha mask bodies.


758
00:37:23,406 --> 00:37:26,346
These are potentially cheap.


759
00:37:26,506 --> 00:37:29,086
If it was a circle, it's
going to be cheap actually.


760
00:37:29,616 --> 00:37:33,196
But if it's got a convex or
complex, convoluted shape,


761
00:37:33,636 --> 00:37:36,406
there might be a lot of
computation involved there.


762
00:37:36,406 --> 00:37:38,166
So, just be careful with these.


763
00:37:38,676 --> 00:37:41,476
You need to pick
the representation


764
00:37:41,586 --> 00:37:43,746
that best serves your game.


765
00:37:44,286 --> 00:37:48,066
You might find that the per
pixel thing is actually better


766
00:37:48,486 --> 00:37:51,826
than having like say 20 little
circles to describe something.


767
00:37:52,366 --> 00:37:56,906
But prefer things on the
efficient side of the chart


768
00:37:56,906 --> 00:37:59,826
as much as you can,
serve your gameplay.


769
00:38:02,006 --> 00:38:02,656
All right.


770
00:38:03,306 --> 00:38:06,606
Collision Masks is another
thing that you can use


771
00:38:06,866 --> 00:38:12,096
to regain performance,
especially in a case like this.


772
00:38:12,096 --> 00:38:16,036
I've got these two jars, a
white jar with white marbles


773
00:38:16,036 --> 00:38:17,786
and a green jar with
green marbles.


774
00:38:18,376 --> 00:38:21,846
Now, the funny thing about this
is they're pretty close together


775
00:38:22,156 --> 00:38:25,606
and it might be hard for the
engine to actually understand


776
00:38:26,076 --> 00:38:28,476
that the white marbles
have no way of getting


777
00:38:28,476 --> 00:38:30,146
in the green jar and vice versa.


778
00:38:31,146 --> 00:38:33,026
So, you can help the engine out.


779
00:38:33,876 --> 00:38:35,536
This is what the engine sees.


780
00:38:36,096 --> 00:38:42,286
It's like, for every one
of those green marbles


781
00:38:42,286 --> 00:38:45,046
and every one of those white
marbles, are they hitting?


782
00:38:45,736 --> 00:38:48,416
So, just imagine how
many comparisons that is.


783
00:38:51,996 --> 00:38:53,416
Putting the jar back again.


784
00:38:54,556 --> 00:38:57,016
Now, if you use a
collision mask,


785
00:38:57,616 --> 00:39:02,096
give the white marbles mask 1
and the green marbles mask 2,


786
00:39:03,326 --> 00:39:05,246
you're going to get a whole
ton of performance back.


787
00:39:05,766 --> 00:39:07,906
This is an order
N squared problem.


788
00:39:08,376 --> 00:39:10,996
And so, by cutting the
number of comparisons


789
00:39:10,996 --> 00:39:13,706
in half, well, do the math.


790
00:39:15,196 --> 00:39:18,146
A lot of computation that
you can get back just


791
00:39:18,326 --> 00:39:19,626
through this simple experience.


792
00:39:21,076 --> 00:39:21,716
All right.


793
00:39:22,176 --> 00:39:24,826
Norman introduced force fields
very nicely in the previous one,


794
00:39:24,826 --> 00:39:27,676
so I'm not going to belabor
what all the force fields are


795
00:39:27,676 --> 00:39:29,146
and their fields and
things like that.


796
00:39:29,946 --> 00:39:33,006
But I am going to point out
that they're building blocks,


797
00:39:33,476 --> 00:39:37,876
use them together and use
actions to fade in and out.


798
00:39:38,316 --> 00:39:41,176
I have a big, nasty
particle system here.


799
00:39:41,526 --> 00:39:43,406
And what I've done is
just made a whole bunch


800
00:39:43,406 --> 00:39:45,346
of force fields throughout
the center of the screen.


801
00:39:45,836 --> 00:39:49,236
And I'm just using an action
to modulate the strength


802
00:39:49,296 --> 00:39:51,936
of each force field so that
they smoothly segue one


803
00:39:51,936 --> 00:39:52,566
into the other.


804
00:39:53,136 --> 00:39:55,296
That's a lot nicer than
just turning them on or off.


805
00:39:55,706 --> 00:39:59,016
Well, I love playing with
these things endlessly.


806
00:39:59,076 --> 00:40:00,706
I had to throw that slide in.


807
00:40:01,226 --> 00:40:06,236
Now, here's another example of
how force fields can help you


808
00:40:06,236 --> 00:40:09,646
out in reducing game logic
and simplifying updates,


809
00:40:09,876 --> 00:40:12,946
similarly to the
way that the actions


810
00:40:12,946 --> 00:40:14,646
or the window into the engine.


811
00:40:15,276 --> 00:40:18,326
Force fields are another
thing that you can use


812
00:40:18,636 --> 00:40:19,896
to replace game logic.


813
00:40:20,396 --> 00:40:24,186
So, you can kind of tell without
even telling you what kind


814
00:40:24,186 --> 00:40:25,356
of a game this one
is going to be.


815
00:40:25,536 --> 00:40:27,446
But let's just see what it
looks like for a second.


816
00:40:28,036 --> 00:40:32,886
You can see the little guys are
following the cursor around.


817
00:40:34,266 --> 00:40:37,086
And they're doing their
darndest not to run


818
00:40:37,086 --> 00:40:40,016
into those green planet things.


819
00:40:40,256 --> 00:40:42,356
I guess my spaceships are
nearly as big as a planet,


820
00:40:42,356 --> 00:40:46,386
that's kind of amazing.


821
00:40:46,536 --> 00:40:47,186
It's hypnotic.


822
00:40:47,186 --> 00:40:51,466
OK. I think I can stop
staring at that now.


823
00:40:52,696 --> 00:40:53,056
All right.


824
00:40:53,526 --> 00:40:54,926
Wait, that's the big reveal.


825
00:40:54,996 --> 00:40:56,106
Let's go back to the picture


826
00:40:56,316 --> 00:40:59,376
of the-of movie again,
or maybe not.


827
00:40:59,816 --> 00:41:01,216
Before I show you
that next slide,


828
00:41:01,676 --> 00:41:06,086
what I want to tell you is,
using Xcode I made that level.


829
00:41:06,506 --> 00:41:10,416
So, I used an idea like-that
I like to call prefabs,


830
00:41:10,416 --> 00:41:13,566
like prefabricated objects,
to make a little scene graph


831
00:41:13,936 --> 00:41:15,556
with the spaceship's picture


832
00:41:16,076 --> 00:41:17,766
and a force field
right underneath it.


833
00:41:18,106 --> 00:41:20,806
I gave the force field on the
spaceship a negative strength,


834
00:41:20,806 --> 00:41:22,016
so they push each other apart.


835
00:41:22,506 --> 00:41:26,286
I gave the planet of child,
which is a force field


836
00:41:26,476 --> 00:41:27,536
with a negative strength,


837
00:41:27,846 --> 00:41:30,906
so that it pushes
little spaceships away.


838
00:41:31,256 --> 00:41:32,746
I made the planets not dynamic


839
00:41:33,246 --> 00:41:34,906
and I made the spaceships
dynamic.


840
00:41:35,186 --> 00:41:36,946
OK. Now, we can look
at that code.


841
00:41:37,306 --> 00:41:37,616
All right.


842
00:41:38,226 --> 00:41:42,636
So, this is the whole entire
of that game aside from the bit


843
00:41:42,636 --> 00:41:43,626
that I built in Xcode.


844
00:41:44,316 --> 00:41:47,656
It's next to nothing and
you're getting the same sort


845
00:41:47,656 --> 00:41:50,116
of behavior that you see in
classic RTSs like, you know,


846
00:41:50,116 --> 00:41:51,066
Star Craft or whatever.


847
00:41:51,726 --> 00:41:57,026
So, what it's doing from top
to bottom is just the target is


848
00:41:57,026 --> 00:41:59,446
where I tapped the
screen and well,


849
00:41:59,446 --> 00:42:00,846
you know what the
ship's position is.


850
00:42:01,266 --> 00:42:04,126
I'm calculating and I don't
want to divide by zero


851
00:42:04,126 --> 00:42:05,766
so I'm checking for that
little minimum length.


852
00:42:06,446 --> 00:42:08,666
I'm getting the velocity
from the physics body.


853
00:42:09,186 --> 00:42:11,806
I'm finding out what
direction the velocity is in.


854
00:42:12,016 --> 00:42:15,186
Little arc tangent gives me an
angle to slap on Z-rotation.


855
00:42:15,776 --> 00:42:20,716
I'm taking the position
difference of where I want


856
00:42:20,716 --> 00:42:21,846
to go from where I am.


857
00:42:22,476 --> 00:42:24,586
Subtracting the velocity.


858
00:42:25,896 --> 00:42:31,016
Multiplying it by a magic number
which I arrived at by iterating,


859
00:42:31,826 --> 00:42:34,846
and then I'm just
applying an impulse using


860
00:42:34,896 --> 00:42:36,136
that calculated magic number.


861
00:42:36,696 --> 00:42:40,536
And you basically get what looks
like artificial intelligence


862
00:42:40,806 --> 00:42:42,056
for having done nothing at all.


863
00:42:43,016 --> 00:42:44,776
Now, if you want to learn
more about that stuff,


864
00:42:44,776 --> 00:42:47,146
you can like search
the internet for Boids.


865
00:42:47,696 --> 00:42:49,786
There is a wonderful
body of work


866
00:42:49,786 --> 00:42:51,016
around these kinds
of techniques.


867
00:42:51,796 --> 00:42:56,616
Now, just like physics debug
drawing can give you insight


868
00:42:56,616 --> 00:42:59,696
into what's going on,
here is, you know,


869
00:42:59,876 --> 00:43:01,086
the wizard behind the curtain.


870
00:43:01,746 --> 00:43:04,356
I've turned on the
field debug drawing.


871
00:43:04,906 --> 00:43:06,596
You can see the fields
around the ships,


872
00:43:06,686 --> 00:43:09,276
the fields around the
planets, and how they interact.


873
00:43:10,006 --> 00:43:12,546
And I don't know.


874
00:43:12,646 --> 00:43:15,166
It's a crazy amount of fun
for like 10 minutes of coding.


875
00:43:16,006 --> 00:43:19,186
So, you all go out and make
classic, cool spaceship games


876
00:43:19,186 --> 00:43:20,146
for me to download and play.


877
00:43:20,456 --> 00:43:25,666
I don't want to let
that slide go away


878
00:43:25,666 --> 00:43:27,226
because I'll just
watch it forever.


879
00:43:27,816 --> 00:43:33,076
OK. So, physics,
choose I don't know


880
00:43:33,076 --> 00:43:34,056
which way I'm supposed
to gesture.


881
00:43:34,186 --> 00:43:37,176
I had cheap down at the--
that side of the screen.


882
00:43:38,246 --> 00:43:41,806
Choose the cheapest one that's
going to best serve your game.


883
00:43:42,546 --> 00:43:44,646
Use the expensive
ones judiciously


884
00:43:44,646 --> 00:43:45,506
to serve your gameplay.


885
00:43:46,626 --> 00:43:48,186
Separate your groups with mask


886
00:43:48,186 --> 00:43:49,916
so the engine knows
what your intent is


887
00:43:49,916 --> 00:43:52,056
because that's the only way
that they can read your mind.


888
00:43:52,866 --> 00:43:56,576
And fields replace update logic,


889
00:43:57,066 --> 00:43:59,076
use a little creative
thinking and imagination.


890
00:43:59,736 --> 00:44:02,386
And the debug drawing is going
to give you all kinds of insight


891
00:44:02,756 --> 00:44:04,896
into what the engine is doing
for you behind the scenes.


892
00:44:06,146 --> 00:44:09,486
So, my next topic: shapes.


893
00:44:09,486 --> 00:44:14,646
I have a little refresher
here on the difference


894
00:44:14,646 --> 00:44:17,956
between bitmap art
and vector art.


895
00:44:18,106 --> 00:44:22,786
Anyone care to guess
which is the vector art?


896
00:44:23,046 --> 00:44:27,046
Now, there's a cost
hierarchy of shapes just


897
00:44:27,046 --> 00:44:29,276
like there's a cost
hierarchy of physics.


898
00:44:30,126 --> 00:44:31,516
You know, what I'm
going to say there.


899
00:44:32,046 --> 00:44:33,996
Choose the one that
best serves your game.


900
00:44:34,776 --> 00:44:38,286
These guys, in particular
squares


901
00:44:38,626 --> 00:44:41,146
and rectangles, are
really cheap.


902
00:44:41,816 --> 00:44:46,276
I'm going to say that
sprites are way, way,


903
00:44:46,276 --> 00:44:51,106
way off the cheap scale beyond
these guys but not that far off.


904
00:44:51,496 --> 00:44:53,466
You can use these things a
lot where it's appropriate.


905
00:44:54,866 --> 00:44:56,316
These are just a
bit more expensive.


906
00:44:57,466 --> 00:44:58,316
You can use them a lot.


907
00:44:59,346 --> 00:45:02,916
These have had a ton
of love put into them


908
00:45:02,916 --> 00:45:04,206
in this iteration of SpriteKit.


909
00:45:04,706 --> 00:45:08,536
And you can draw little
mini maps and, you know,


910
00:45:08,536 --> 00:45:12,206
compass roses, all kinds of
things like that with vectors


911
00:45:12,206 --> 00:45:14,156
that in previous iterations


912
00:45:14,156 --> 00:45:17,466
of SpriteKit you might have had
them in the judicious column.


913
00:45:17,866 --> 00:45:19,686
Now, they're in the
delicious column.


914
00:45:21,556 --> 00:45:22,186
All right.


915
00:45:22,706 --> 00:45:27,476
Stroked curves, now I wish
I could have, you know,


916
00:45:27,476 --> 00:45:29,296
a hockey stick to you
show you the cost here.


917
00:45:30,046 --> 00:45:34,526
These things look really
great and use a few of them


918
00:45:34,746 --> 00:45:36,606
and you're not going to really
hit your performance at all.


919
00:45:36,816 --> 00:45:39,936
Use a bunch, you know, you
might get a call from mom.


920
00:45:41,456 --> 00:45:43,496
Finally, filling them
in costs even more.


921
00:45:43,496 --> 00:45:47,756
So, I just put a little
bracket there so you know


922
00:45:48,206 --> 00:45:50,316
which is the cheap half and
which is the expensive half.


923
00:45:51,496 --> 00:45:53,706
Use the thing that's
appropriate to your game.


924
00:45:54,916 --> 00:45:59,486
Just because I can't stop myself
I made a fractal space pulling


925
00:45:59,486 --> 00:46:03,626
curve thing with tens of
thousands of points in it


926
00:46:04,036 --> 00:46:08,386
and just to kind of say
hey, they're cheap use them.


927
00:46:08,976 --> 00:46:10,276
All right.


928
00:46:10,936 --> 00:46:16,466
EffectNodes, use EffectNodes
when you want to have a subtree


929
00:46:16,936 --> 00:46:21,356
of sprites or whatever that are
all going together have some


930
00:46:21,356 --> 00:46:25,936
kind of effect applied to them,
such as tinting or blurring.


931
00:46:25,936 --> 00:46:32,296
They have to be drawn
offscreen and then brought back


932
00:46:32,516 --> 00:46:34,346
to the frame buffer for feeling.


933
00:46:34,706 --> 00:46:35,756
So, there's a cost.


934
00:46:37,046 --> 00:46:40,276
You can get really
powerful Corelmage support.


935
00:46:41,416 --> 00:46:45,356
You can run very sophisticated
filters and all kinds


936
00:46:45,356 --> 00:46:47,816
of amazing things,
but it's expensive.


937
00:46:49,386 --> 00:46:50,336
Use them when you need to.


938
00:46:51,796 --> 00:46:54,546
Shaders are an awesome option.


939
00:46:55,326 --> 00:46:59,866
Whenever you don't need to have
things composited offscreen


940
00:46:59,976 --> 00:47:02,356
particularly and you can
just go ahead and draw,


941
00:47:02,856 --> 00:47:05,276
shaders will save your
performance bacon.


942
00:47:06,236 --> 00:47:07,886
If you want to just
tint everything green,


943
00:47:08,286 --> 00:47:09,626
that's a really simple shader.


944
00:47:09,626 --> 00:47:12,976
You can just bypass, you know,
the whole processing stack,


945
00:47:12,976 --> 00:47:14,486
just go right out
to the hardware.


946
00:47:14,816 --> 00:47:16,916
So, learn about that.


947
00:47:18,136 --> 00:47:22,436
And shouldRasterize
just gives us a hint


948
00:47:22,606 --> 00:47:25,976
about what can be cached and
will hang around for a while


949
00:47:25,976 --> 00:47:28,216
and what needs to be
recomposited every screen.


950
00:47:28,506 --> 00:47:33,736
If you've got things that are
going to be static for a while,


951
00:47:34,496 --> 00:47:37,266
for example, maybe you've got
some kind of a HUD display


952
00:47:37,266 --> 00:47:39,696
that only updates once every 10
seconds but you want to have,


953
00:47:40,146 --> 00:47:45,076
you know, N cool glows and blurs
and real distorts and all kinds


954
00:47:45,076 --> 00:47:47,096
of things going on,
raster it out.


955
00:47:47,716 --> 00:47:50,016
There's a couple of cool
things that you can do here.


956
00:47:50,416 --> 00:47:54,446
You can create a texture from a
node and just specify the node,


957
00:47:54,796 --> 00:47:56,176
ask the view to raster
it for you


958
00:47:56,176 --> 00:47:57,796
and now you've got a
texture, just slap that up,


959
00:47:57,796 --> 00:47:58,906
it's going to cost
almost nothing.


960
00:47:59,376 --> 00:48:01,656
You have a CI filter.


961
00:48:02,156 --> 00:48:03,346
There is the other
variant right there.


962
00:48:03,346 --> 00:48:03,966
All right.


963
00:48:05,456 --> 00:48:07,716
So, that's what I have
to say about effects.


964
00:48:09,156 --> 00:48:10,326
Now, for lighting.


965
00:48:10,996 --> 00:48:14,806
We have some good
introduction from Norman


966
00:48:14,806 --> 00:48:16,056
in the last section
about lighting.


967
00:48:16,446 --> 00:48:18,326
So, I'm going to talk about
the performance costs.


968
00:48:19,166 --> 00:48:23,416
So, the first thing that you
need to know is that, well,


969
00:48:23,526 --> 00:48:25,766
we're going to compute
the lighting per pixel.


970
00:48:26,176 --> 00:48:28,566
So, the cost is there
for proportional


971
00:48:28,566 --> 00:48:30,596
to the amount of lit pixels.


972
00:48:31,626 --> 00:48:34,786
You can optimize
that with bit masks.


973
00:48:34,996 --> 00:48:36,616
If you say some things
aren't going to be lit,


974
00:48:36,616 --> 00:48:38,566
then you're not going
to pay that cost.


975
00:48:39,016 --> 00:48:40,426
So, that's what that's
all about.


976
00:48:41,006 --> 00:48:42,316
Ambient light is free.


977
00:48:46,856 --> 00:48:50,996
You can have 8 lights
per sprite.


978
00:48:51,806 --> 00:48:53,316
Now, you're going to
pay for, you know,


979
00:48:53,316 --> 00:48:57,716
8 times the processing per pixel
per sprite, so weigh if you want


980
00:48:57,716 --> 00:49:01,866
to do that and keep the cost
down with the bit masks.


981
00:49:02,686 --> 00:49:04,486
Normal maps are cheap.


982
00:49:05,226 --> 00:49:08,816
The shader just sees those
up, so stick normal maps on.


983
00:49:08,816 --> 00:49:09,336
They look great.


984
00:49:09,816 --> 00:49:12,946
Remember to share them.


985
00:49:13,156 --> 00:49:18,036
Shadows are cost proportional
to the number of lights.


986
00:49:18,456 --> 00:49:19,606
It's pretty much constant.


987
00:49:20,216 --> 00:49:23,916
So, if you turn on one shadow,
that's going to cost you one.


988
00:49:24,376 --> 00:49:25,986
Two shadows is going
to cost you two.


989
00:49:26,666 --> 00:49:29,546
So, keep the number
of those things down.


990
00:49:30,916 --> 00:49:34,156
You potentially have to shadow
the whole entire screen.


991
00:49:34,636 --> 00:49:36,746
So, they look really great.


992
00:49:36,746 --> 00:49:38,816
They're going to add a
lot of impact and awesome.


993
00:49:39,336 --> 00:49:43,356
Use them, don't abuse them.


994
00:49:43,536 --> 00:49:43,856
All right.


995
00:49:44,446 --> 00:49:48,036
So, we talked about
drawing performance,


996
00:49:48,726 --> 00:49:52,546
understand what controls
batching and draw order.


997
00:49:53,146 --> 00:49:56,716
And learn about the tools to get
insight into what's going on.


998
00:49:58,176 --> 00:50:00,886
Actions and constraints
are your window


999
00:50:01,176 --> 00:50:02,406
into the SpriteKit engine.


1000
00:50:03,046 --> 00:50:04,706
We improve the efficiency
all the time.


1001
00:50:04,706 --> 00:50:06,956
The more you use actions,
the more you're going


1002
00:50:06,956 --> 00:50:08,486
to get performance
back over time


1003
00:50:08,486 --> 00:50:10,156
as we iterate the frameworks.


1004
00:50:11,436 --> 00:50:14,226
Physics, understand
the cost hierarchy.


1005
00:50:14,776 --> 00:50:16,676
Choose appropriately to
serve your game play,


1006
00:50:18,066 --> 00:50:19,086
same with shapes.


1007
00:50:20,286 --> 00:50:23,556
Effects: understand the
cost, use them wisely.


1008
00:50:24,646 --> 00:50:27,816
And lighting is a cheap and
easy way to extra awesome.


1009
00:50:28,276 --> 00:50:29,656
And I'd like you all
to make your games


1010
00:50:29,656 --> 00:50:31,246
as awesome as possible.


1011
00:50:31,896 --> 00:50:33,346
All right.


1012
00:50:34,356 --> 00:50:38,766
So, today we talked about
structuring your games


1013
00:50:38,766 --> 00:50:43,976
for scalability, understanding
how to set up scene graphs


1014
00:50:44,036 --> 00:50:46,816
and scene graph snippets so
that you can put things together


1015
00:50:46,816 --> 00:50:47,756
in a data-driven away.


1016
00:50:48,766 --> 00:50:50,656
And we talked a whole
bunch about performance.


1017
00:50:52,146 --> 00:50:54,906
For more information,
I encourage you


1018
00:50:55,476 --> 00:50:58,426
to contact Allan
Schafer and Filip Iliescu


1019
00:50:58,906 --> 00:51:00,736
who are our games evangelists.


1020
00:51:01,416 --> 00:51:03,626
The SpriteKit programming
guide, recently refreshed,


1021
00:51:03,826 --> 00:51:05,546
has a ton of interesting
information in it.


1022
00:51:06,106 --> 00:51:09,476
And of course, there's
always the forums.


1023
00:51:09,476 --> 00:51:13,096
And tomorrow I would love if
you could all come and visit us


1024
00:51:13,096 --> 00:51:16,946
in the labs and talk about
what you've got going


1025
00:51:16,946 --> 00:51:18,716
on and, you know, say hi.


1026
00:51:19,626 --> 00:51:24,436
And with that, thanks very much
and I'll see you all later.


1027
00:51:25,508 --> 00:51:27,508
[ Applause ]

