1
00:00:00,506 --> 00:00:10,726
[ Silence ]


2
00:00:11,226 --> 00:00:12,086
>> Howard Miller: Okay welcome


3
00:00:12,086 --> 00:00:16,085
to the WWDC 2013
AirPrint Session.


4
00:00:16,085 --> 00:00:16,936
I'm Howard Miller.


5
00:00:16,936 --> 00:00:19,206
I manage everything
that's related to AirPrint.


6
00:00:19,936 --> 00:00:22,006
How many people here
are iOS developers?


7
00:00:22,006 --> 00:00:23,346
Show of hands, alright.


8
00:00:23,346 --> 00:00:25,136
How many of your
apps already print?


9
00:00:26,326 --> 00:00:27,746
A few of you, okay.


10
00:00:27,906 --> 00:00:30,246
If they don't print, by
the time you leave today,


11
00:00:30,246 --> 00:00:33,776
your app should be printing via
what we tell you here or the lab


12
00:00:33,776 --> 00:00:35,306
that immediately follows this.


13
00:00:36,076 --> 00:00:39,006
Today's agenda, I'm going
to talk about AirPrint,


14
00:00:39,006 --> 00:00:41,206
the success that we've had
in AirPrint and the market.


15
00:00:41,206 --> 00:00:43,126
We're going to focus
a little bit


16
00:00:43,126 --> 00:00:45,356
on AirPrint in the Enterprise.


17
00:00:45,546 --> 00:00:47,916
We've got a lot of new printers
that have come to market


18
00:00:48,226 --> 00:00:51,536
that I think will solve a
lot of enterprise issues.


19
00:00:51,536 --> 00:00:53,336
And then we're going
to spend the majority


20
00:00:53,336 --> 00:00:57,896
of today's session helping you
and your app be able to print.


21
00:00:58,386 --> 00:01:01,056
So let's start with the
printing architecture.


22
00:01:01,286 --> 00:01:02,796
Apple has a long tradition.


23
00:01:02,796 --> 00:01:05,736
We invented desktop
publishing back in the 80's


24
00:01:05,786 --> 00:01:07,636
with the Introduction
to PostScript,


25
00:01:07,896 --> 00:01:10,396
the original LaserWriter,
partnership with Adobe.


26
00:01:11,166 --> 00:01:12,746
With Mac OS X we brought


27
00:01:12,746 --> 00:01:16,356
in a full featured rich printing
system, two sets of API's,


28
00:01:16,356 --> 00:01:18,736
high level API's for
your applications,


29
00:01:18,736 --> 00:01:20,936
some low level cups API's.


30
00:01:20,936 --> 00:01:24,176
We've built in the most robust
printing system in the world,


31
00:01:24,176 --> 00:01:25,876
the common Unix Printing System.


32
00:01:26,116 --> 00:01:28,726
And as you know there's a
myriad of printer drivers


33
00:01:28,726 --> 00:01:31,646
that are available to talk to
tens of thousands of printers.


34
00:01:32,336 --> 00:01:37,006
We adapted this system to
eliminate the need for drivers.


35
00:01:37,496 --> 00:01:40,616
We built a new printing
standard,


36
00:01:40,616 --> 00:01:43,236
which we call AirPrint,
which well,


37
00:01:43,366 --> 00:01:44,696
you know marketing
called it AirPrint.


38
00:01:44,696 --> 00:01:48,556
It does work on wireless but
it also works on Ethernet


39
00:01:48,826 --> 00:01:51,526
and starting next year it
will work on USB as well.


40
00:01:52,596 --> 00:01:56,926
This provided a very rich and
complete printing system though


41
00:01:56,926 --> 00:01:59,336
because of its history may
be a little bit complicated


42
00:01:59,336 --> 00:02:00,946
for application developers.


43
00:02:01,506 --> 00:02:07,856
So what we have done is for
iOS we've brought over the best


44
00:02:08,506 --> 00:02:13,126
of the printing system, we've
put a thin layer of API's


45
00:02:13,176 --> 00:02:16,226
that get to the essence of
what your app needs to do


46
00:02:16,226 --> 00:02:17,696
to print and to print well.


47
00:02:18,166 --> 00:02:22,196
So with a minimum amount of
code, maybe 10 lines of code


48
00:02:22,196 --> 00:02:25,756
if you already have predefined
content such as PDF or JPEG,


49
00:02:26,036 --> 00:02:30,006
you can get desktop quality
output from your application.


50
00:02:30,366 --> 00:02:33,396
Okay if you want to do a little
bit more we still have the full


51
00:02:33,396 --> 00:02:36,226
richness and powerful
printing system underlying you


52
00:02:36,516 --> 00:02:40,066
and you can get desktop
quality output and all the level


53
00:02:40,066 --> 00:02:41,396
of control that you would expect


54
00:02:41,396 --> 00:02:44,226
from your application
using the AirPrint API's.


55
00:02:45,006 --> 00:02:47,536
So let's talk a little
bit about the technology.


56
00:02:47,536 --> 00:02:51,546
When we came to iOS the goal
was pretty straight forward,


57
00:02:51,866 --> 00:02:55,326
what is the best that
we can do for the user?


58
00:02:56,536 --> 00:02:59,586
Printing has been a pain, it's
been a pain since the dawn


59
00:02:59,586 --> 00:03:02,116
of time when they were
carving them on stone tablets


60
00:03:02,116 --> 00:03:03,316
and putting them in pyramids.


61
00:03:03,746 --> 00:03:06,156
Printing is hard and it
doesn't have to be hard.


62
00:03:06,626 --> 00:03:09,846
So our goal is to have
the best quality output


63
00:03:10,306 --> 00:03:13,236
with the least amount of
friction for the end user.


64
00:03:13,356 --> 00:03:16,466
And to that end we've
completely eliminated drivers,


65
00:03:16,686 --> 00:03:21,026
no software to install, there's
no setup, there's no settings,


66
00:03:21,026 --> 00:03:24,786
there's no tweaking,
the right thing happens.


67
00:03:24,786 --> 00:03:26,836
You get full quality
output and now


68
00:03:26,836 --> 00:03:28,986
for you application
developers we ask you


69
00:03:28,986 --> 00:03:30,166
to be a partner in this.


70
00:03:30,496 --> 00:03:32,896
So for example, if your
app is a photo app,


71
00:03:33,346 --> 00:03:37,206
when you print your photo, it's
nice, that's sort of required,


72
00:03:37,206 --> 00:03:39,666
that you tell the printing
system, yes it is my intent


73
00:03:39,666 --> 00:03:41,256
to be printing a color photo.


74
00:03:41,836 --> 00:03:45,366
That will let us optimize the
printing path and the settings


75
00:03:45,366 --> 00:03:48,846
in the printer so the user will
get the full quality output,


76
00:03:49,186 --> 00:03:52,016
full bleed, edge to edge,
correctly matched with color,


77
00:03:52,016 --> 00:03:55,466
pulled from the right tray
without having to pick anything.


78
00:03:56,326 --> 00:04:00,466
AirPrint was released
in iOS 4.2 so iOS 4.2


79
00:04:00,466 --> 00:04:01,646
and later will support that.


80
00:04:01,946 --> 00:04:08,696
It's also on OS X starting in
10.7, became our default in 10.8


81
00:04:08,696 --> 00:04:10,456
and continues in Mavericks.


82
00:04:10,906 --> 00:04:14,006
If a customer comes across an
AirPrint printer it will just


83
00:04:14,006 --> 00:04:16,745
appear in their print
dialogue on either platform,


84
00:04:16,745 --> 00:04:18,086
they pick it and they print.


85
00:04:18,786 --> 00:04:20,116
It's all standards based.


86
00:04:20,476 --> 00:04:23,366
Of course we put some Apple
secret sauce on top of that.


87
00:04:23,746 --> 00:04:27,236
But yet everything that we've
done is available under license


88
00:04:27,236 --> 00:04:30,026
at no cost to all
printer manufactures


89
00:04:30,026 --> 00:04:32,716
and starting last year
server manufacturers.


90
00:04:33,556 --> 00:04:36,496
So we have a few
printer manufacturers


91
00:04:36,496 --> 00:04:38,076
that have adopted AirPrint.


92
00:04:38,326 --> 00:04:41,306
Just this week you saw
announcements from Xerox


93
00:04:41,356 --> 00:04:45,006
and Kyocera, both
bringing midsize business


94
00:04:45,006 --> 00:04:48,076
and enterprise class printers
to market with AirPrint in them.


95
00:04:48,076 --> 00:04:51,186
You'll notice all of your
favorite vendors probably are


96
00:04:51,186 --> 00:04:52,066
on this slide.


97
00:04:52,886 --> 00:04:55,886
We have a list of licensees,
some of which I will talk


98
00:04:55,886 --> 00:04:58,196
about as we go through
today's presentation.


99
00:04:58,786 --> 00:05:01,806
This list of licensees that
I show you have printers


100
00:05:01,806 --> 00:05:03,816
that have AirPrint
and are currently


101
00:05:03,816 --> 00:05:05,636
with Apple under certification.


102
00:05:06,966 --> 00:05:11,256
If you want to know is your
printer an AirPrint printer,


103
00:05:11,256 --> 00:05:13,966
we have this AirPrint basics
knowledge base article


104
00:05:13,966 --> 00:05:15,276
which turned out to become one


105
00:05:15,276 --> 00:05:18,546
of the 10 most popular
knowledge base articles


106
00:05:18,546 --> 00:05:21,626
in Apple's history, this
has the definitive list.


107
00:05:22,056 --> 00:05:25,146
For a printer to be on this
list, first the vendor has


108
00:05:25,146 --> 00:05:27,326
to have a license,
second they have


109
00:05:27,326 --> 00:05:30,166
to have provided working
functional prototypes to Apple


110
00:05:30,166 --> 00:05:32,506
when we run a complete
certification sweep.


111
00:05:32,896 --> 00:05:35,726
So this is a pretty good
definitive source if you want


112
00:05:35,726 --> 00:05:36,766
to find out what's there.


113
00:05:37,816 --> 00:05:43,976
So new printers for 2013
so we're going to start


114
00:05:43,976 --> 00:05:45,476
with a couple of my favorites.


115
00:05:45,476 --> 00:05:47,896
Roll fed printers,
there's a myriad


116
00:05:47,896 --> 00:05:49,896
of roll fed printers
in the industry.


117
00:05:49,896 --> 00:05:50,966
You see them everywhere.


118
00:05:51,156 --> 00:05:52,776
We have, and we'll
demonstrate it later,


119
00:05:52,776 --> 00:05:55,646
this is a Brother
Label Roll fed printer.


120
00:05:55,816 --> 00:05:57,656
It will come to market
later this year.


121
00:05:57,656 --> 00:06:00,266
Actually it's a firmware
update for an existing printer.


122
00:06:00,786 --> 00:06:02,086
Awesome printer and we're going


123
00:06:02,086 --> 00:06:03,886
to demo it live with
some demo code.


124
00:06:04,106 --> 00:06:10,366
I hold in my hand this which
is an iPhone 5 panorama.


125
00:06:10,636 --> 00:06:14,956
This was taken recently
and this has been printed


126
00:06:14,956 --> 00:06:17,096
on a printer from ZINK.


127
00:06:17,356 --> 00:06:20,416
For those who know ZINK,
ZINK stands for zero ink.


128
00:06:21,016 --> 00:06:24,276
Their patented technology lets
the customer just buy paper


129
00:06:24,836 --> 00:06:26,356
and always have ink available.


130
00:06:26,706 --> 00:06:29,666
This roll fed is 2
inches by 9 inches.


131
00:06:29,666 --> 00:06:32,136
It's a beautiful
California scene.


132
00:06:32,136 --> 00:06:39,426
And for those in the
back who can't see it,


133
00:06:40,376 --> 00:06:42,666
we have a slightly
larger version.


134
00:06:42,746 --> 00:06:46,686
This one is 160 some
odd inches by 36 inches.


135
00:06:47,056 --> 00:06:49,476
This has been printed
using AirPrint off


136
00:06:49,476 --> 00:06:52,796
of shipping HP Designjet T520.


137
00:06:52,796 --> 00:06:56,136
That roll fed printer came out
earlier this year with AirPrint


138
00:06:56,136 --> 00:06:59,606
and HP's bringing AirPrint to
many other Designjet printers.


139
00:07:00,326 --> 00:07:01,196
Okay thank you guys.


140
00:07:05,726 --> 00:07:08,636
I mentioned the enterprise
class, laser printers,


141
00:07:08,846 --> 00:07:10,476
one of the preeminent printers


142
00:07:10,476 --> 00:07:13,016
in the enterprise
space has been Lexmark.


143
00:07:13,466 --> 00:07:16,186
Lexmark makes a wide
array of laser printers.


144
00:07:16,656 --> 00:07:20,856
Every printer sold by
Lexmark is AirPrint certified,


145
00:07:20,856 --> 00:07:22,216
AirPrint enabled today.


146
00:07:22,696 --> 00:07:24,666
They also have enterprise
classes on some


147
00:07:24,666 --> 00:07:28,066
of their printers where you set
your printer up in your shop,


148
00:07:28,066 --> 00:07:30,386
you connect it to your
active directory server,


149
00:07:31,266 --> 00:07:33,766
that printer will
then present itself


150
00:07:33,766 --> 00:07:39,636
to iOS users supporting
users in groups, IPPS,


151
00:07:40,126 --> 00:07:43,226
using TLS for security so
encrypted data channels.


152
00:07:43,556 --> 00:07:45,846
You get all the functionality,
all the capability


153
00:07:45,846 --> 00:07:48,096
and all the security
that you would expect


154
00:07:48,096 --> 00:07:50,106
in an enterprise class printer.


155
00:07:50,576 --> 00:07:52,436
So those are available
from Lexmark.


156
00:07:52,696 --> 00:07:56,946
Many of the other vendors, HP,
the Ricoh and the Ricoh family,


157
00:07:56,946 --> 00:07:59,916
I mentioned Kyocera and Xerox,
there's a lot of printers made


158
00:07:59,916 --> 00:08:01,646
for the Enterprise class.


159
00:08:01,646 --> 00:08:03,866
Label printers, I
mentioned Brother already,


160
00:08:04,116 --> 00:08:07,236
Dye Sub printers, again I
don't have big ones of these


161
00:08:07,236 --> 00:08:11,896
so you won't be able to
see them in the back,


162
00:08:12,376 --> 00:08:16,606
but these printers are off of a
Cannon Selphy Dye-sub Printer,


163
00:08:16,606 --> 00:08:19,386
also in certification and
will also be available later


164
00:08:19,386 --> 00:08:19,906
this year.


165
00:08:20,216 --> 00:08:23,166
I think this will be the must
have Christmas peripheral


166
00:08:23,536 --> 00:08:25,036
because straight
from your iPhone


167
00:08:25,036 --> 00:08:29,276
with two clicks you
get production quality,


168
00:08:29,596 --> 00:08:33,145
color photos, there's tabs on
it so it comes out borderless,


169
00:08:33,145 --> 00:08:34,395
right from your iPhone.


170
00:08:34,916 --> 00:08:40,496
And then we will see later
this year our first round


171
00:08:40,496 --> 00:08:42,296
of certified servers.


172
00:08:42,586 --> 00:08:45,576
Yes, these will be the first
AirPrint certified servers


173
00:08:45,576 --> 00:08:46,146
in the world.


174
00:08:46,326 --> 00:08:49,826
The first one we expect will
probably be from Lexmark.


175
00:08:49,826 --> 00:08:52,026
They're bringing their
Enterprise class print


176
00:08:52,026 --> 00:08:55,736
and release capability and
the full server capability


177
00:08:55,736 --> 00:08:56,446
for printing.


178
00:08:56,696 --> 00:08:58,656
They're going to add
AirPrint right on top of that


179
00:08:58,656 --> 00:09:00,536
and you'll be able
to print to all


180
00:09:00,536 --> 00:09:02,976
of their printers plus
other third party printers.


181
00:09:04,336 --> 00:09:07,816
So let me drill down just a
little bit into the Enterprise,


182
00:09:07,816 --> 00:09:09,136
I think I've talked about this.


183
00:09:10,136 --> 00:09:12,766
AirPrint itself uses
Bonjour for discovery


184
00:09:12,766 --> 00:09:14,386
which works great in the home.


185
00:09:14,386 --> 00:09:15,416
We're a small network.


186
00:09:15,416 --> 00:09:17,376
You see the printers there
immediately available


187
00:09:17,376 --> 00:09:18,666
so you pick it and you print.


188
00:09:19,696 --> 00:09:23,346
AirPrint from the beginning
is also supported static DNS


189
00:09:23,626 --> 00:09:24,666
entries for printers.


190
00:09:24,706 --> 00:09:27,716
So you can define all of
your AirPrint printers


191
00:09:27,716 --> 00:09:30,396
and your DNS server and for
whatever search domain your


192
00:09:30,396 --> 00:09:33,976
users using they will get a list
of printers that are available


193
00:09:33,976 --> 00:09:35,246
and reachable so you can print


194
00:09:35,246 --> 00:09:37,546
across the internet
with AirPrint today.


195
00:09:38,956 --> 00:09:43,686
New in iOS 7 we've added
iOS profile support


196
00:09:43,686 --> 00:09:48,346
so from the Apple Configuration
Utility and it's all documented


197
00:09:48,346 --> 00:09:51,806
so hopefully third party
utilities that create profiles,


198
00:09:51,806 --> 00:09:54,466
you'll be able to
define AirPrint printers


199
00:09:54,876 --> 00:09:56,746
and your users will be
able to print to them


200
00:09:56,746 --> 00:09:58,136
from any place in the world.


201
00:09:58,706 --> 00:10:04,086
AirPrint natively supports
IPPS which secure IPP with TLS


202
00:10:04,536 --> 00:10:06,976
and we support users in groups.


203
00:10:08,676 --> 00:10:12,566
We've also added some higher
end features to laser printers.


204
00:10:12,746 --> 00:10:14,526
In Mavericks you will find


205
00:10:14,526 --> 00:10:17,856
that if an AirPrint printer
is selected we support all the


206
00:10:17,856 --> 00:10:21,296
finishing options that one
would expect, fold, staple,


207
00:10:21,536 --> 00:10:24,736
three hole punch, jog, output.


208
00:10:25,046 --> 00:10:26,516
If you have a server,


209
00:10:27,246 --> 00:10:29,056
this Lexmark server
I'm talking about,


210
00:10:29,056 --> 00:10:30,796
and servers from
other manufacturers,


211
00:10:31,036 --> 00:10:33,386
print and release will
become a standard feature.


212
00:10:33,386 --> 00:10:36,276
You can print from your
phone, go to your printer,


213
00:10:36,916 --> 00:10:39,286
type in your code or put
your badge on the printer,


214
00:10:39,506 --> 00:10:41,906
see your print jobs and
release them at the printer.


215
00:10:41,906 --> 00:10:45,706
And there's also native
support for quotas now built in.


216
00:10:48,196 --> 00:10:51,326
So let's talk about
OS X printing.


217
00:10:52,296 --> 00:10:54,356
We have all these great
features in AirPrint


218
00:10:54,356 --> 00:10:57,136
and if you're an OS X
developer there's a few things


219
00:10:57,136 --> 00:10:58,016
that you need to know,


220
00:10:58,016 --> 00:11:00,046
well really you don't
need to know anything.


221
00:11:00,176 --> 00:11:02,156
All of these changes are
immediately available


222
00:11:02,156 --> 00:11:02,916
to the user.


223
00:11:03,426 --> 00:11:08,036
There's no new API's, there's no
new code changes at all in OS X.


224
00:11:09,106 --> 00:11:12,386
iOS, which hopefully is
why most everybody is here,


225
00:11:12,736 --> 00:11:16,666
we have created what we think
is a really simple way to print


226
00:11:16,666 --> 00:11:18,566
but to get really great
quality out there.


227
00:11:19,276 --> 00:11:21,296
So I've got just a couple
things I want to mention.


228
00:11:22,376 --> 00:11:25,596
On other platforms it's
acceptable to just sort


229
00:11:25,596 --> 00:11:27,756
of screen scrape and
drop that to the printer.


230
00:11:27,756 --> 00:11:29,996
On our platform that's
not what we are about.


231
00:11:30,286 --> 00:11:34,006
We want full quality,
desktop quality output.


232
00:11:34,006 --> 00:11:39,036
We want you to use the space
that you would have available


233
00:11:39,036 --> 00:11:41,996
on paper and bring the
information to bear


234
00:11:41,996 --> 00:11:46,366
that a customer would want to
see on an 8 1/2 by 11 piece


235
00:11:46,366 --> 00:11:48,346
of paper or even larger.


236
00:11:49,356 --> 00:11:51,556
It's not about a little
screen at that point.


237
00:11:51,556 --> 00:11:53,326
It's about what the
user is going to need


238
00:11:53,466 --> 00:11:55,086
when they get themselves
to paper.


239
00:11:55,086 --> 00:11:57,456
So you should be able
to enhance your content.


240
00:11:58,406 --> 00:12:01,966
You should be able to draw
everything at print time


241
00:12:02,366 --> 00:12:05,566
in high quality and you should
be able to use the real estate.


242
00:12:05,566 --> 00:12:08,266
So the example that I
always like to use is Maps.


243
00:12:08,266 --> 00:12:10,156
And you've seen this
on an iPhone 5.


244
00:12:10,156 --> 00:12:10,946
It's gorgeous.


245
00:12:11,246 --> 00:12:14,006
It's got a bunch of exciting
features, turn right,


246
00:12:14,006 --> 00:12:16,546
turn navigation and they've
even fixed a lot of it


247
00:12:16,546 --> 00:12:17,896
so it takes you to
the right place.


248
00:12:18,786 --> 00:12:21,576
On the iPad there's
more real estate.


249
00:12:21,576 --> 00:12:22,496
You get more maps.


250
00:12:22,496 --> 00:12:25,156
There's more interesting
things that they could bring.


251
00:12:25,706 --> 00:12:29,666
But when you go to paper, you
don't have the phone telling you


252
00:12:29,666 --> 00:12:33,356
to turn by turn and you
have a lot more pixels


253
00:12:33,796 --> 00:12:34,656
to bring to bear.


254
00:12:35,016 --> 00:12:38,286
So on paper they show you
the same view so you can see


255
00:12:38,286 --> 00:12:40,546
where you're going but
they also give you the turn


256
00:12:40,546 --> 00:12:41,726
by turn on the side.


257
00:12:42,646 --> 00:12:46,496
There is example after
example of this, web browsers


258
00:12:46,496 --> 00:12:47,886
where you see all kinds of stuff


259
00:12:47,886 --> 00:12:50,526
but when you print you get
the article of interest,


260
00:12:50,526 --> 00:12:53,786
receipt point of sale
programs where it's an entry


261
00:12:54,376 --> 00:12:56,386
for buying stuff on the iPad


262
00:12:56,386 --> 00:12:59,846
but when you hit print you
actually get an itemized receipt


263
00:12:59,846 --> 00:13:02,286
with the address of the
return procedures printed


264
00:13:02,286 --> 00:13:02,876
on the bottom.


265
00:13:02,976 --> 00:13:08,366
So we expect your apps to look
at print as a larger output form


266
00:13:08,966 --> 00:13:11,556
and a static output form, the
thing that somebody's going


267
00:13:11,556 --> 00:13:13,936
to fold up and put in their
pocket or put in their binder.


268
00:13:14,956 --> 00:13:16,616
Take advantage of that space.


269
00:13:17,596 --> 00:13:22,776
Okay so for printing we have
two ways for you to print,


270
00:13:22,776 --> 00:13:23,656
I kind of mentioned this.


271
00:13:23,656 --> 00:13:25,846
If you already have
pre-formed content,


272
00:13:25,846 --> 00:13:29,836
a JPEG or any other image
format supported on the platform


273
00:13:29,836 --> 00:13:34,566
or PDF, 10 lines of code,
we'll take care of the rest.


274
00:13:35,146 --> 00:13:39,506
You'll tell us what your intent
is for the category of output


275
00:13:39,506 --> 00:13:42,146
of photo or general
document or some others


276
00:13:42,486 --> 00:13:44,206
and we will make all
the right settings


277
00:13:44,206 --> 00:13:46,536
and get the right
output for the user.


278
00:13:46,536 --> 00:13:50,196
If you don't already have a PDF
it's a long way around the horn


279
00:13:50,196 --> 00:13:53,006
to go and create a PDF to hand
it to the printing system.


280
00:13:53,486 --> 00:13:56,266
So in those situations
we'd like your app


281
00:13:56,916 --> 00:13:59,466
to do fine grain
drawing at print time.


282
00:13:59,816 --> 00:14:02,516
And we have a couple of
different classes that are set


283
00:14:02,516 --> 00:14:06,286
up that will make this
structured and simple for you.


284
00:14:06,766 --> 00:14:08,826
And to show you all
those details I'm going


285
00:14:08,826 --> 00:14:10,646
to bring up Todd Ritland.


286
00:14:10,646 --> 00:14:13,896
And he is going to
go through the API's


287
00:14:13,896 --> 00:14:18,416
and give us a demo showing you
how to make your app print.


288
00:14:19,126 --> 00:14:19,576
Thank you, Todd.


289
00:14:20,076 --> 00:14:24,076
[ Applause ]


290
00:14:24,576 --> 00:14:26,076
>> Todd Ritland: I'm Todd
Ritland, AirPrint Engineer.


291
00:14:26,586 --> 00:14:28,496
So let's talk about some
iOS printing stuff here.


292
00:14:29,136 --> 00:14:31,506
So first I'm going to talk
about picking what to print.


293
00:14:32,566 --> 00:14:33,896
We're going to go over the API.


294
00:14:34,416 --> 00:14:36,926
We'll talk about your
different UI options for ways


295
00:14:36,926 --> 00:14:38,606
to present the printing UI.


296
00:14:39,436 --> 00:14:41,066
We'll talk about some
new types of printers


297
00:14:41,066 --> 00:14:43,836
like Howard mentioned, roll
fed and label printers,


298
00:14:44,116 --> 00:14:47,136
and we'll do a demo
roll fed sample app.


299
00:14:48,306 --> 00:14:50,056
So first it's important
to keep in mind


300
00:14:50,056 --> 00:14:51,456
that iOS printing is easy.


301
00:14:51,976 --> 00:14:54,876
It was designed to be really
easy for users with a simple UI


302
00:14:55,126 --> 00:14:58,406
and it's actually really pretty
simple for you as a developer


303
00:14:58,406 --> 00:14:59,766
to add printing to your app.


304
00:15:00,646 --> 00:15:02,266
But first the most
important part


305
00:15:02,266 --> 00:15:04,416
of printing is providing
really good content,


306
00:15:05,406 --> 00:15:06,206
as Howard mentioned.


307
00:15:06,656 --> 00:15:10,956
The best apps provide useful,
attractive, high quality output.


308
00:15:12,016 --> 00:15:14,716
It's best to think of this as
like high end graphic design.


309
00:15:15,646 --> 00:15:18,066
I recommend kind of
designing your output first


310
00:15:18,446 --> 00:15:21,396
and then using the classes to
actually make it happen instead


311
00:15:21,396 --> 00:15:23,346
of approaching it
the other way around.


312
00:15:24,306 --> 00:15:25,486
As Howard mentioned,
what looks good


313
00:15:25,486 --> 00:15:28,056
on screen doesn't always
look good on paper.


314
00:15:28,826 --> 00:15:30,536
Make use of the dynamic
printing system.


315
00:15:30,966 --> 00:15:32,736
The paper size can
actually be anything.


316
00:15:33,076 --> 00:15:34,066
A lot of people don't realize


317
00:15:34,106 --> 00:15:37,246
but there are two major
paper sizes in the world


318
00:15:37,246 --> 00:15:42,106
for documents, A4, which is
taller and thinner then letter,


319
00:15:42,166 --> 00:15:44,346
and letter, what we use
in the United States.


320
00:15:44,766 --> 00:15:46,876
The iOS printing system will
figure out the correct one


321
00:15:46,876 --> 00:15:49,606
to use and your app needs to be
dynamic about the way it lays


322
00:15:49,606 --> 00:15:51,076
out its content to best fit.


323
00:15:51,386 --> 00:15:53,576
If you're expecting US
letter and you get A4


324
00:15:53,576 --> 00:15:56,946
which is narrower you might
get your content clipped off


325
00:15:56,946 --> 00:15:59,406
on the sides and you have
a huge market of people


326
00:15:59,406 --> 00:16:00,846
that their output is
not going to look right.


327
00:16:01,546 --> 00:16:03,686
Printers also have
paper size sensors.


328
00:16:03,686 --> 00:16:05,596
A lot of new printers, all
future AirPrint printers,


329
00:16:05,596 --> 00:16:07,096
will have paper size sensors


330
00:16:07,976 --> 00:16:09,796
so whatever the user actually
has loaded in the printer,


331
00:16:10,306 --> 00:16:14,376
iOS will dynamically figure that
out and pass it on to the app


332
00:16:14,376 --> 00:16:16,326
so the best apps are
dynamic about the way


333
00:16:16,326 --> 00:16:17,246
that they load up their content.


334
00:16:17,946 --> 00:16:20,166
Printer hardware margins
also vary quite a bit.


335
00:16:20,166 --> 00:16:23,046
A lot of Inkjets that do
duplexing need a bunch of space


336
00:16:23,046 --> 00:16:24,636
at the bottom to
hold on to the page


337
00:16:24,636 --> 00:16:27,956
so you might have a really big
margin at the bottom or margins


338
00:16:27,956 --> 00:16:30,476
on the left and right and top
can be any number of things


339
00:16:31,236 --> 00:16:33,356
so apps that are
dynamic make sure


340
00:16:33,356 --> 00:16:34,756
that their content
won't get clipped.


341
00:16:35,476 --> 00:16:37,436
So for all these
reasons it's best not


342
00:16:37,436 --> 00:16:39,936
to just produce a fixed
sized PDF and hand it


343
00:16:39,936 --> 00:16:40,796
to the printing system.


344
00:16:41,296 --> 00:16:42,956
We've built classes
for you to be dynamic.


345
00:16:43,666 --> 00:16:47,056
So a really good example of
this is Bloomberg for iPad.


346
00:16:47,506 --> 00:16:49,456
So here we're looking
at an article


347
00:16:49,676 --> 00:16:51,446
about the new spaceship
campus at Apple.


348
00:16:51,446 --> 00:16:54,926
And if you print this out,
this is the output you get.


349
00:16:55,716 --> 00:16:57,166
We have a nice title at the top.


350
00:16:57,166 --> 00:16:58,526
It has the Bloomberg logo.


351
00:16:59,206 --> 00:17:02,696
There's you know the picture
has a caption, we have footers


352
00:17:02,696 --> 00:17:04,675
at the bottom that tell
us what page we're on


353
00:17:04,756 --> 00:17:06,346
and nice margins on the side.


354
00:17:06,346 --> 00:17:09,566
And if the user actually
has US legal,


355
00:17:09,566 --> 00:17:11,576
which is a taller paper
loaded in the printer,


356
00:17:12,465 --> 00:17:14,695
the Bloomberg app will
be dynamic about things


357
00:17:14,695 --> 00:17:16,376
and it will make
the content larger.


358
00:17:16,496 --> 00:17:19,435
In this case we can print the
whole thing in just one page.


359
00:17:22,336 --> 00:17:24,256
So we'll go over some
of the API's here.


360
00:17:25,195 --> 00:17:28,455
The basic steps are first
your app will get the printer


361
00:17:28,455 --> 00:17:30,436
controller or the
activity controller


362
00:17:30,436 --> 00:17:31,536
if you're using the share sheet.


363
00:17:32,766 --> 00:17:35,596
You'll set up the attributes
for the job like the type of job


364
00:17:35,596 --> 00:17:36,986
that it is, the job name.


365
00:17:37,736 --> 00:17:40,576
You'll provide content and
then you'll present the UI.


366
00:17:40,846 --> 00:17:44,806
At this point iOS will
present the user interface.


367
00:17:44,806 --> 00:17:45,946
The user can select the printer.


368
00:17:46,266 --> 00:17:47,736
iOS will communicate
with the printer,


369
00:17:47,736 --> 00:17:49,466
figure out all the
relevant information.


370
00:17:49,766 --> 00:17:52,366
The daemon will take
over managing the jobs.


371
00:17:52,366 --> 00:17:53,516
The user can cancel it.


372
00:17:53,716 --> 00:17:56,496
If it's a print release job
we'll hold on to the job.


373
00:17:56,496 --> 00:17:57,926
You know all these
things you don't have


374
00:17:57,926 --> 00:17:59,336
to manage in your app.


375
00:18:00,996 --> 00:18:02,896
So here's the basic
classes that we'll be using.


376
00:18:03,416 --> 00:18:05,346
I'll just briefly go over them
now and then we'll go on to some


377
00:18:05,346 --> 00:18:06,236
of these in more detail.


378
00:18:06,806 --> 00:18:09,856
First we have UIPrintInfo
which is basically what you use


379
00:18:09,856 --> 00:18:13,116
to put those attributes for
the job like orientation,


380
00:18:13,116 --> 00:18:14,556
the job name, the type of job.


381
00:18:15,346 --> 00:18:18,956
UIPrintPaper, just
basically represents the paper


382
00:18:18,956 --> 00:18:19,466
at the printer.


383
00:18:20,376 --> 00:18:22,736
We have a print formatter
which formats content


384
00:18:22,796 --> 00:18:24,116
to be put onto the page.


385
00:18:25,136 --> 00:18:27,486
Print page renderer which
lets you take full control


386
00:18:27,486 --> 00:18:28,086
over the drawing.


387
00:18:28,526 --> 00:18:32,376
For the UI we have
UIPrintInteractionController


388
00:18:32,376 --> 00:18:35,736
which is the main printing
UI and UIActivityController


389
00:18:35,736 --> 00:18:37,356
which is the share
sheet, essentially.


390
00:18:40,506 --> 00:18:42,256
So first let's talk
about UIPrintIinfo.


391
00:18:44,076 --> 00:18:45,716
First you'll set the job name.


392
00:18:46,386 --> 00:18:47,656
Now this is really important.


393
00:18:47,776 --> 00:18:50,076
It's shown in the
UI print center


394
00:18:50,076 --> 00:18:51,396
when the user's managing
the job.


395
00:18:51,896 --> 00:18:54,266
It also gets shown on the front
panel of a lot of printers.


396
00:18:55,336 --> 00:18:58,446
This is the way the user is
going to identify your job.


397
00:18:58,876 --> 00:19:02,126
Howard mentioned servers, for
print and release situations


398
00:19:02,126 --> 00:19:04,856
and stuff, users will
be identifying their job


399
00:19:04,856 --> 00:19:08,256
by the job name so it needs to
be really specific and something


400
00:19:08,256 --> 00:19:11,516
that the user would
actually be able to find.


401
00:19:11,556 --> 00:19:13,596
Next a really important
one is output type.


402
00:19:14,426 --> 00:19:16,596
This is how you'll tell the
printing system the type


403
00:19:16,596 --> 00:19:17,736
of content you're printing.


404
00:19:19,026 --> 00:19:20,806
We'll change the
default paper size.


405
00:19:21,166 --> 00:19:23,306
We'll pick a correct
print quality mode.


406
00:19:23,436 --> 00:19:25,396
And we'll show the
appropriate UI based


407
00:19:25,396 --> 00:19:27,076
on the content that you tell us.


408
00:19:27,416 --> 00:19:28,676
So we have four of these.


409
00:19:29,066 --> 00:19:31,926
The first one is just
a general document.


410
00:19:32,346 --> 00:19:33,676
Safari is an example of this.


411
00:19:33,676 --> 00:19:35,426
It's just mixed text
and graphics.


412
00:19:35,756 --> 00:19:40,106
We'll choose a document
size like A4 or letter,


413
00:19:40,106 --> 00:19:41,016
depending on the region.


414
00:19:41,396 --> 00:19:44,206
Duplex control will be
allowed and page range control,


415
00:19:44,206 --> 00:19:45,566
things you would
expect from a document.


416
00:19:46,366 --> 00:19:47,776
And we choose normal quality.


417
00:19:49,566 --> 00:19:52,976
Next a very similar one
is document Grayscale.


418
00:19:53,596 --> 00:19:55,886
This is monochrome
text and graphics.


419
00:19:56,646 --> 00:19:58,996
Now you can choose this
and we'll optimize things


420
00:19:58,996 --> 00:20:01,096
so that the data over
the network is lower.


421
00:20:01,396 --> 00:20:04,036
We'll tell the printer to print
it using just its black ink


422
00:20:04,036 --> 00:20:05,696
so it can save the
user some ink.


423
00:20:06,826 --> 00:20:08,226
And just like the
previous example,


424
00:20:08,386 --> 00:20:09,806
duplex and page range
is allowed.


425
00:20:10,956 --> 00:20:11,916
Next we have photo.


426
00:20:12,616 --> 00:20:14,616
This is you know
printing photos.


427
00:20:14,616 --> 00:20:17,266
Users want high quality,
borderless


428
00:20:17,546 --> 00:20:19,126
and when we show the
UI, when you tell us


429
00:20:19,126 --> 00:20:22,016
that you're printing a photo,
we won't show the duplex control


430
00:20:22,016 --> 00:20:24,926
or page range because these
don't make sense for a photo.


431
00:20:25,796 --> 00:20:29,816
And new in iOS 7 we have
UIPrintInfoOutputPhotoGrayscale.


432
00:20:30,316 --> 00:20:31,916
So similar to the last one


433
00:20:31,916 --> 00:20:35,296
where we have photo paper sizes
we'll choose the photo tray,


434
00:20:35,296 --> 00:20:37,106
if the printer has
one, borderless,


435
00:20:37,376 --> 00:20:39,346
but we'll actually tell
the printer to print this


436
00:20:39,346 --> 00:20:40,746
in high quality Grayscale.


437
00:20:40,966 --> 00:20:44,336
Some printers that are like high
end Cannon printers have a bunch


438
00:20:44,336 --> 00:20:47,626
of gray inks and really
excellent gray quality printing


439
00:20:47,696 --> 00:20:49,026
and we'll tell the
printer to use


440
00:20:49,026 --> 00:20:53,606
that if you choose
this output type.


441
00:20:53,606 --> 00:20:55,006
Okay so that's UIPrintInfo.


442
00:20:56,486 --> 00:20:58,136
Next we'll go over UIPrintPaper.


443
00:20:58,546 --> 00:21:03,506
It's basically just the size
of the page at the printer


444
00:21:04,106 --> 00:21:06,796
and then inside of that we
have the printable area.


445
00:21:07,536 --> 00:21:10,726
This is the size minus the
hardware margins of the printer,


446
00:21:10,726 --> 00:21:12,536
the area where the
printer can't print


447
00:21:12,606 --> 00:21:14,796
because you know it
can't shoot its laser


448
00:21:14,796 --> 00:21:16,506
or the print head
can't move towards it.


449
00:21:18,396 --> 00:21:21,346
Next we'll talk about
providing content.


450
00:21:21,346 --> 00:21:23,366
As Howard mentioned, there's
basically two types of printing,


451
00:21:23,946 --> 00:21:26,976
you either have items like PDF's
and images that already exist


452
00:21:27,316 --> 00:21:29,526
or you're going to be creating
your pages dynamically.


453
00:21:29,716 --> 00:21:32,246
If you're creating pages
dynamically you'll use these


454
00:21:32,246 --> 00:21:34,426
formatters and renderer
classes that I've mentioned.


455
00:21:35,246 --> 00:21:37,136
If you already have
content like PDF and images,


456
00:21:37,586 --> 00:21:39,876
you don't use these things.


457
00:21:40,016 --> 00:21:42,776
So the easy example
is printing items.


458
00:21:42,856 --> 00:21:45,966
It could be a single item or
you can actually send an array


459
00:21:45,966 --> 00:21:48,266
of items like an array
of photos for example


460
00:21:48,266 --> 00:21:49,966
that the user selects
in a bunch of photos.


461
00:21:50,126 --> 00:21:54,906
This could be JPEG's or any
image type that iOS understands.


462
00:21:55,886 --> 00:21:59,746
These can be in the form of
NSURL's, file URL on disk


463
00:21:59,746 --> 00:22:03,646
or elsewhere, it could be in
memory in the form of NS data


464
00:22:04,146 --> 00:22:08,166
or a UI image or CI image
or it could be something


465
00:22:08,166 --> 00:22:12,446
in the photo library in the form
of an ALAsset or ALAssetURL.


466
00:22:12,756 --> 00:22:14,266
If you provide an
array of items,


467
00:22:14,266 --> 00:22:15,386
each one will be a separate job.


468
00:22:15,916 --> 00:22:19,986
So here's all the code that
you would need to print a PDF.


469
00:22:21,246 --> 00:22:23,486
First we'll ask the
UIPrintInteractionController


470
00:22:23,776 --> 00:22:25,206
if it can print the URL.


471
00:22:25,496 --> 00:22:28,586
This is a method that gets
the URL to a PDF file.


472
00:22:29,916 --> 00:22:31,936
Examples when it wouldn't
be able to print it are


473
00:22:31,936 --> 00:22:34,106
if the PDF had password
protection


474
00:22:34,336 --> 00:22:35,906
or if it was malformed
in some way


475
00:22:36,156 --> 00:22:37,526
and the
UIPrinterActionController


476
00:22:37,526 --> 00:22:39,956
actually can tell you
if it can be printed.


477
00:22:39,956 --> 00:22:43,206
Next we'll grab the shared
UIPrinterInteractionController.


478
00:22:43,406 --> 00:22:45,286
It's a shared object so
you don't initialize it.


479
00:22:45,286 --> 00:22:46,346
You just grab the shared one.


480
00:22:47,616 --> 00:22:49,346
We'll set the printing
item property


481
00:22:49,406 --> 00:22:51,596
to be the URL of our PDF file.


482
00:22:53,386 --> 00:22:54,926
We'll set up a UI print info.


483
00:22:55,056 --> 00:22:56,406
Those are the attributes
for the job


484
00:22:57,356 --> 00:22:58,846
so we'll initialize
the UI print info.


485
00:22:59,176 --> 00:23:02,386
We'll set the output type
to be output general.


486
00:23:02,526 --> 00:23:05,566
This makes sense for PDF because
PDF typically have, you know,


487
00:23:05,876 --> 00:23:08,736
photos in them or other
color content plus text.


488
00:23:09,076 --> 00:23:11,286
We'll set the job name
to be name of the file.


489
00:23:11,966 --> 00:23:14,626
And then we'll set the
controllers print info property


490
00:23:14,626 --> 00:23:15,916
to be the print info
we just created.


491
00:23:16,116 --> 00:23:20,896
We'll tell the controller to
turn on the page range control.


492
00:23:21,436 --> 00:23:23,576
By default it doesn't show
the page range control.


493
00:23:24,446 --> 00:23:26,216
But when our user's printing
a PDF they're probably going


494
00:23:26,216 --> 00:23:29,516
to want to be able to choose a
page range inside of the page,


495
00:23:29,896 --> 00:23:33,246
I mean inside of the PDF
and then we'll just present.


496
00:23:34,026 --> 00:23:36,226
So that's all that it
takes to print a PDF.


497
00:23:36,226 --> 00:23:39,386
At this point the iOS will take
control of everything else.


498
00:23:39,386 --> 00:23:42,416
If the printer has a bunch of
trays and we actually notice


499
00:23:42,416 --> 00:23:44,936
that the PDF file matches
exactly one of those trays


500
00:23:44,936 --> 00:23:48,996
like say it's an 11 by 17 PDF,
we'll choose the right tray,


501
00:23:48,996 --> 00:23:50,776
everything will just
happen magically.


502
00:23:50,776 --> 00:23:51,956
[ laughter ]


503
00:23:51,956 --> 00:23:56,826
Okay so formatters, if you're
actually formatting content


504
00:23:56,826 --> 00:23:58,426
or rendering content
dynamically,


505
00:23:58,426 --> 00:24:00,116
formatters are the first
thing to get to know.


506
00:24:01,356 --> 00:24:02,706
Now what exactly is a formatter?


507
00:24:03,506 --> 00:24:08,216
Formatter basically takes
some data in your app


508
00:24:08,216 --> 00:24:12,076
and some rectangle on a printed
page and it figures out how


509
00:24:12,076 --> 00:24:13,326
to format that for printing.


510
00:24:14,366 --> 00:24:16,776
That's just in the
abstract sense here.


511
00:24:17,616 --> 00:24:20,996
So an example of this
would be string of text,


512
00:24:20,996 --> 00:24:22,446
we use a simple text formatter.


513
00:24:22,446 --> 00:24:25,806
The simple text formatter
will just take that string,


514
00:24:25,916 --> 00:24:29,046
it will figure out how best
to put it into the rectangle


515
00:24:29,116 --> 00:24:32,206
and it will format it.


516
00:24:32,826 --> 00:24:36,566
It will figure out the
line breaks, line spacing,


517
00:24:36,656 --> 00:24:39,106
you can set font,
color, things like that.


518
00:24:39,546 --> 00:24:42,146
Now all of this text doesn't
actually fit in this rectangle


519
00:24:42,596 --> 00:24:44,276
so a formatter knows
that it needs


520
00:24:44,276 --> 00:24:45,846
to continue on to the next page.


521
00:24:48,016 --> 00:24:49,656
So you can use a
formatter directly


522
00:24:49,656 --> 00:24:51,546
if all you're doing is
formatting the content.


523
00:24:52,066 --> 00:24:54,116
You can use it with
UIPrintInteractionController


524
00:24:54,596 --> 00:24:56,856
or you can add it to the
array of activity items


525
00:24:56,966 --> 00:24:58,116
if you're using the share sheet.


526
00:24:59,356 --> 00:25:02,586
You can also use formatters
as a helper in a full renderer


527
00:25:02,656 --> 00:25:03,676
and we'll go over that later.


528
00:25:04,326 --> 00:25:07,356
For plain text, as I
mentioned you can use


529
00:25:07,356 --> 00:25:11,266
UISimpleTextFormatter, you
can specify font, color,


530
00:25:11,766 --> 00:25:14,036
alignment like center,
left, justified.


531
00:25:14,216 --> 00:25:18,016
For HTML we have a really
handy markup text formatter


532
00:25:18,486 --> 00:25:21,266
and that knows how to
layout your HTML according


533
00:25:21,266 --> 00:25:23,066
to all the HTML rules on a page.


534
00:25:25,146 --> 00:25:29,756
So by default a formatter
uses the printable rect inside


535
00:25:29,756 --> 00:25:32,046
of the page which is the
area that's printable


536
00:25:32,546 --> 00:25:34,666
but some printers have
really small margins,


537
00:25:34,666 --> 00:25:36,926
some printers can print you
know up to 1/10 of an inch


538
00:25:36,926 --> 00:25:40,316
to the edge of the page and
so that's not probably ideal


539
00:25:40,806 --> 00:25:42,636
so that's why we
have content insets.


540
00:25:43,806 --> 00:25:47,016
You can specify area
inside the printable rect,


541
00:25:47,256 --> 00:25:48,156
left, right and top.


542
00:25:49,526 --> 00:25:51,956
Upper page renderer will just
keep rendering the content


543
00:25:52,546 --> 00:25:54,036
until it uses up all the content


544
00:25:54,536 --> 00:25:56,306
so the bottom content
inside is ignored.


545
00:25:56,796 --> 00:26:01,326
So here's an easy example
of using a formatter


546
00:26:01,326 --> 00:26:04,076
to print some HTML text.


547
00:26:04,076 --> 00:26:06,486
Here we just create our
UIMarkupTextFormatter.


548
00:26:07,506 --> 00:26:09,676
We're initializing
it with the HTML text


549
00:26:09,776 --> 00:26:11,246
that was provided
into this method.


550
00:26:12,216 --> 00:26:14,016
And then we set the
URIPrinterAction


551
00:26:14,016 --> 00:26:16,926
ControllersPrintFormatter
property to be our formatter.


552
00:26:17,376 --> 00:26:19,766
So this is all that it takes


553
00:26:19,806 --> 00:26:21,976
to print some HTML
text onto a page.


554
00:26:22,496 --> 00:26:27,786
And we set up our UIPrintInfo,
general, job name and so


555
00:26:27,786 --> 00:26:32,756
on and then we present.


556
00:26:32,856 --> 00:26:35,516
Now all of viewers actually
have print formatters so a lot


557
00:26:35,516 --> 00:26:37,726
of times you don't need to
create a formatter yourself.


558
00:26:38,336 --> 00:26:40,726
In this case we have
a web view in our app.


559
00:26:41,086 --> 00:26:44,136
Instead of initializing our own
print formatter we can just grab


560
00:26:44,216 --> 00:26:46,486
the view print formatter
from our web view.


561
00:26:47,586 --> 00:26:49,876
Another view that this is
really useful for is a map view,


562
00:26:49,876 --> 00:26:52,606
if you need to format map
content to put onto a page,


563
00:26:52,956 --> 00:26:54,426
you can just grab the
ViewPrintFormatter


564
00:26:54,426 --> 00:26:55,196
from the map view.


565
00:26:55,596 --> 00:26:59,616
Okay so that's formatters.


566
00:27:00,486 --> 00:27:02,086
Next, page renderers.


567
00:27:04,376 --> 00:27:06,036
Now renderers you can use,


568
00:27:06,436 --> 00:27:07,796
they're completely
control content.


569
00:27:07,796 --> 00:27:09,826
This is total custom printing.


570
00:27:11,316 --> 00:27:12,566
What is a renderer
exactly though?


571
00:27:13,686 --> 00:27:14,856
Here's our renderer class.


572
00:27:15,456 --> 00:27:17,546
It needs to know the number
of pages it's going to print.


573
00:27:17,926 --> 00:27:22,216
And then the system basically
asks it to draw each page.


574
00:27:22,976 --> 00:27:27,356
It says you know draw first
page and it goes and draws.


575
00:27:28,676 --> 00:27:30,996
It can use any of the
screen drawing methods,


576
00:27:30,996 --> 00:27:32,126
you know it can use cores.


577
00:27:32,166 --> 00:27:33,776
If you want to have
find viewing control


578
00:27:33,776 --> 00:27:35,956
over text you can use core text.


579
00:27:36,306 --> 00:27:38,616
Basically anything you
print to screen you can use.


580
00:27:40,876 --> 00:27:42,276
So we have full drawing control.


581
00:27:42,496 --> 00:27:45,666
It will calculate the page count
and then draw the page contents.


582
00:27:46,356 --> 00:27:49,256
The class also has capability
to add space for headers


583
00:27:49,256 --> 00:27:51,536
and footers and for
more information


584
00:27:51,536 --> 00:27:53,986
on that you can take a look
at the developer documentation


585
00:27:54,626 --> 00:27:58,036
or come to our lab later
and you can add formatters.


586
00:27:58,516 --> 00:28:01,276
Now what does a renderer
with a formatter look like?


587
00:28:02,316 --> 00:28:03,516
Well here we have
our render object.


588
00:28:04,226 --> 00:28:05,576
It's told to draw a page.


589
00:28:05,856 --> 00:28:09,486
In this case it's just
drawing some accents at the top


590
00:28:09,486 --> 00:28:10,426
and bottom of the page.


591
00:28:11,106 --> 00:28:14,026
Then the area in the middle
we want to put some text.


592
00:28:14,476 --> 00:28:17,996
So the render has a
simple text formatter.


593
00:28:18,676 --> 00:28:22,056
Once it's done drawing the
outside part it will use the UI


594
00:28:22,056 --> 00:28:25,616
simple text formatter to draw
our Gettysburg Address here.


595
00:28:26,126 --> 00:28:28,556
So you can see how you can kind


596
00:28:28,556 --> 00:28:29,786
of combine these
things together.


597
00:28:30,306 --> 00:28:31,956
You can think of
the renderer as kind


598
00:28:31,956 --> 00:28:34,216
of the captain that's
controlling everything.


599
00:28:34,216 --> 00:28:36,996
It can kind of draw
using any method possible


600
00:28:36,996 --> 00:28:39,466
and a renderer is just one of
those tools that it can use.


601
00:28:41,196 --> 00:28:43,326
So you'll subclass
UIPrintPageRenderer.


602
00:28:44,586 --> 00:28:46,506
At a minimum you'll
override number of pages


603
00:28:47,276 --> 00:28:49,086
and drop content
for page and index.


604
00:28:49,896 --> 00:28:52,356
You can also override
draw header for content,


605
00:28:52,826 --> 00:28:55,286
draw header for page and
index and draw footer for page


606
00:28:55,286 --> 00:28:56,546
and index and some other things.


607
00:28:57,126 --> 00:28:58,526
So you'll set, if you're using


608
00:28:58,526 --> 00:28:59,776
with a print interaction
controller,


609
00:29:00,266 --> 00:29:02,146
you'll set the print
page renderer property


610
00:29:02,146 --> 00:29:05,306
to be the instantiated
object that you just created


611
00:29:05,306 --> 00:29:06,836
of your custom print
page renderer.


612
00:29:07,676 --> 00:29:10,236
Or you can add that object
to the array of items


613
00:29:10,236 --> 00:29:12,856
when you are creating a
UIActivityViewController


614
00:29:12,906 --> 00:29:13,986
when you're doing
the view share sheet.


615
00:29:14,386 --> 00:29:17,446
To use formatters you'll
actually create your formatter


616
00:29:17,446 --> 00:29:19,986
object and then you'll
call add, print formatter,


617
00:29:19,986 --> 00:29:22,056
starting at page index.


618
00:29:22,156 --> 00:29:25,876
Formatters can start
at any page.


619
00:29:26,076 --> 00:29:28,246
Now showing UI, we have a
couple different options


620
00:29:28,246 --> 00:29:29,196
for showing UPrintUI.


621
00:29:30,016 --> 00:29:31,916
As I've mentioned we have
printing from the share sheet.


622
00:29:32,576 --> 00:29:35,466
This is probably where most
people I think expect printing.


623
00:29:35,946 --> 00:29:40,226
This is where it appears in
most of the built in iOS apps.


624
00:29:40,226 --> 00:29:41,486
And you also get other things


625
00:29:41,726 --> 00:29:43,326
like AirDrop, a cool
new feature.


626
00:29:43,866 --> 00:29:46,846
So to add printing
to a share sheet,


627
00:29:47,436 --> 00:29:48,636
if you're sharing something


628
00:29:48,636 --> 00:29:52,756
like in this case we're sharing
our URL text and UI will figure


629
00:29:52,756 --> 00:29:54,746
out all the different sharing
items that should be shown.


630
00:29:55,366 --> 00:29:57,956
But if the user is sharing a
web page and they're printing,


631
00:29:58,076 --> 00:30:01,126
they're probably going to want
the actual web page printed out.


632
00:30:01,656 --> 00:30:05,116
So here we're actually adding a
renderer to our activity items


633
00:30:05,606 --> 00:30:07,056
and we can add our print info


634
00:30:07,056 --> 00:30:10,736
which has our job
name and output type.


635
00:30:10,736 --> 00:30:14,346
So we just create
that array and we set,


636
00:30:14,346 --> 00:30:18,076
when we create our
UIActivityViewController we just


637
00:30:18,076 --> 00:30:19,696
set the activity items
to be those items


638
00:30:20,156 --> 00:30:24,506
and present using
standard present methods.


639
00:30:24,616 --> 00:30:28,666
Now if you're printing using
a print button that goes right


640
00:30:28,666 --> 00:30:29,426
into the printing UI,


641
00:30:30,216 --> 00:30:32,426
that's when you'll be using
UIPrintInteractionController.


642
00:30:32,826 --> 00:30:34,926
On iPhone you just imply
call presentAnimated:


643
00:30:34,926 --> 00:30:36,256
completionHandler on iPad.


644
00:30:36,256 --> 00:30:40,336
It will be a pop over so you'll
be calling presentFromRect


645
00:30:40,336 --> 00:30:41,686
or presentFromBarButtonItem.


646
00:30:42,136 --> 00:30:48,296
Now if you're printing as a
menu item, in this case pages,


647
00:30:49,656 --> 00:30:53,046
we have an embedded printing
control inside of your control,


648
00:30:54,426 --> 00:30:55,876
you'll set your class
as a delegate


649
00:30:55,876 --> 00:30:58,046
for the shared
UIPrinterActionController.


650
00:30:58,686 --> 00:31:01,426
Your class will implement
printInteractionController


651
00:31:01,486 --> 00:31:02,536
ParentViewController.


652
00:31:03,196 --> 00:31:05,456
The printer action controller
will call this to figure


653
00:31:05,456 --> 00:31:07,416
out what its parent
view controller is.


654
00:31:07,986 --> 00:31:11,376
Then when the user taps print
you'll call presentAnimated:


655
00:31:11,616 --> 00:31:12,416
CompletionHandler.


656
00:31:13,506 --> 00:31:16,306
And if your parent view is the
UINavigationController it will


657
00:31:16,306 --> 00:31:19,036
get a push, and that is what
the case is I'm showing here,


658
00:31:19,806 --> 00:31:22,626
if it's a ViewControl it will
get a modal presentation.


659
00:31:23,656 --> 00:31:26,216
You'll have access to the
object but just don't peek at it


660
00:31:26,216 --> 00:31:28,296
because everything
inside of it is subject


661
00:31:28,296 --> 00:31:29,416
to change at any time.


662
00:31:30,786 --> 00:31:34,906
If you need control over paper
size like pages, for example,


663
00:31:34,906 --> 00:31:36,356
at the document center gap


664
00:31:36,356 --> 00:31:39,296
where the user is designing
their layout with the page


665
00:31:39,356 --> 00:31:42,176
in mind, we also have
capabilities to do that


666
00:31:42,176 --> 00:31:43,996
and so first you'll
design your UI


667
00:31:43,996 --> 00:31:46,086
for the user to select the page.


668
00:31:46,086 --> 00:31:48,866
And you'll use the
delegate method,


669
00:31:48,936 --> 00:31:50,946
print interaction
controller choose paper.


670
00:31:52,246 --> 00:31:54,676
There'll be an array of papers
that get passed into this


671
00:31:54,676 --> 00:31:58,036
and your delegate is responsible
for picking the one to use.


672
00:31:59,146 --> 00:32:01,316
This gets called after the
user has selected the printer,


673
00:32:02,126 --> 00:32:03,696
iOS communicates with
the printer to figure


674
00:32:03,696 --> 00:32:05,196
out what sizes are available


675
00:32:05,196 --> 00:32:10,166
and then some printers
have paper size sensors,


676
00:32:10,166 --> 00:32:12,186
like I mentioned, that can
tell the types of papers


677
00:32:12,186 --> 00:32:12,846
that are at the printer.


678
00:32:13,496 --> 00:32:14,386
The array that gets passed


679
00:32:14,386 --> 00:32:17,186
to your app will actually be
those papers that are available


680
00:32:17,186 --> 00:32:18,356
at the printer in that case.


681
00:32:18,416 --> 00:32:20,156
So this array of
papers that gets passed


682
00:32:20,156 --> 00:32:21,826
to you could be a lot
of different things


683
00:32:21,826 --> 00:32:23,946
but you'll be responsible
for selecting it.


684
00:32:24,026 --> 00:32:25,506
So here's an example of that.


685
00:32:25,866 --> 00:32:27,366
Here we're just creating
a paper size,


686
00:32:27,666 --> 00:32:30,516
CGSize that's just
basically 8 1/2 by 11.


687
00:32:31,476 --> 00:32:35,656
We'll use UI print paper's
best paper for page size method


688
00:32:35,656 --> 00:32:38,226
so we provided this as
a great way for matching


689
00:32:38,606 --> 00:32:40,626
because paper matching is
actually pretty complicated


690
00:32:40,626 --> 00:32:42,846
if you want to find the closest
match so we've provided this


691
00:32:42,846 --> 00:32:44,466
for you and we recommend
that you use this.


692
00:32:44,556 --> 00:32:48,156
Next we have roll paper, this
is what Howard mentioned,


693
00:32:48,156 --> 00:32:49,536
and this is new in iOS 7.


694
00:32:50,136 --> 00:32:52,036
Basically you'll use
the delegate method,


695
00:32:52,576 --> 00:32:54,786
print interaction controller,
cut length for paper.


696
00:32:55,126 --> 00:32:57,826
So this works pretty
similarly to the choose paper


697
00:32:57,826 --> 00:33:00,746
but in this case you're
passed in a UI print paper.


698
00:33:01,706 --> 00:33:04,296
Once the user selected a
printer that has a roll loaded,


699
00:33:04,296 --> 00:33:07,436
the UI printer paper
will have the width,


700
00:33:07,436 --> 00:33:10,626
will be the roll width, and
the height will be the maximum


701
00:33:10,626 --> 00:33:12,626
height that's possible
on this roll printer.


702
00:33:13,236 --> 00:33:15,626
So by default if your app
doesn't implement this cut


703
00:33:15,626 --> 00:33:18,316
length for paper and the
user chooses a roll printer,


704
00:33:18,706 --> 00:33:20,966
the default length will be
proportional to the height.


705
00:33:21,016 --> 00:33:22,916
So if you normally would
be printing US letter,


706
00:33:22,916 --> 00:33:25,656
we'll choose a paper size
proportional to US letter


707
00:33:26,596 --> 00:33:28,626
or if you have a photo,
4 by 6 or something,


708
00:33:28,626 --> 00:33:30,906
we'll choose a size that's
proportional to that.


709
00:33:31,546 --> 00:33:34,816
So here's an example of telling
the printer system how long


710
00:33:34,816 --> 00:33:35,176
to cut.


711
00:33:35,176 --> 00:33:38,186
In this case all we're doing
is returning 2 times the width.


712
00:33:41,866 --> 00:33:43,386
So next we'll go
over the demo here.


713
00:33:43,386 --> 00:33:44,786
This is what our UI's
going to look like.


714
00:33:45,506 --> 00:33:46,646
And I have bad news.


715
00:33:47,616 --> 00:33:50,226
I did not win the Apple
design award for this UI.


716
00:33:50,226 --> 00:33:50,566
[ laughter ]


717
00:33:50,566 --> 00:33:52,256
It's pretty simple.


718
00:33:52,256 --> 00:33:55,676
It's just like a text field
and a couple different ways


719
00:33:55,676 --> 00:33:57,496
for the user to select
the font and the color.


720
00:33:59,006 --> 00:34:01,636
And then when user
selects a roll printer,


721
00:34:01,636 --> 00:34:03,476
we'll be printing a
banner so it will come


722
00:34:03,476 --> 00:34:05,306
out as a banner printed
across the roll.


723
00:34:05,666 --> 00:34:07,216
So how are we going to do this?


724
00:34:08,306 --> 00:34:12,275
We'll have our string of
text, here's our roll of paper


725
00:34:12,335 --> 00:34:13,716
that we just found
at the printer.


726
00:34:15,126 --> 00:34:17,315
We'll tell the printing
system that we're going


727
00:34:17,315 --> 00:34:18,706
to be doing a landscape job


728
00:34:18,706 --> 00:34:20,866
so that we print the
text along the roll.


729
00:34:20,866 --> 00:34:24,196
We're going to use a UI
simple text formatter


730
00:34:24,196 --> 00:34:27,266
to format the text with
the font the user selected.


731
00:34:27,266 --> 00:34:29,956
We're going to figure out
how big we can make it.


732
00:34:31,045 --> 00:34:35,466
We'll calculate that total size
and we'll return a cut length.


733
00:34:38,106 --> 00:34:39,306
And I'll show that demo now.


734
00:34:39,585 --> 00:34:45,176
Okay so here we have our
print banner project.


735
00:34:45,456 --> 00:34:47,795
So this is available in
the prerelease section


736
00:34:47,795 --> 00:34:49,576
of the developer documentation


737
00:34:49,576 --> 00:34:51,126
so it's been available
this week.


738
00:34:53,565 --> 00:34:56,976
So basically everything that's
going on in this app happens


739
00:34:56,976 --> 00:34:57,886
in the view controller.


740
00:34:58,456 --> 00:35:02,816
We have some pretty
boiler plate things


741
00:35:02,816 --> 00:35:05,826
that are just finding the
font that the user selected


742
00:35:05,826 --> 00:35:08,776
and finding a color that
the user selected in the UI.


743
00:35:10,276 --> 00:35:11,236
Here's our print method.


744
00:35:11,946 --> 00:35:14,466
First we're grabbing the shared
UIPrintInteractionController.


745
00:35:15,016 --> 00:35:18,356
We're setting the controller's
delegate to be ourselves


746
00:35:18,486 --> 00:35:20,986
because we want to be called
for cut length for paper.


747
00:35:22,986 --> 00:35:24,946
We setup a completion handler


748
00:35:24,946 --> 00:35:27,186
which just basically logs an
error if something goes wrong.


749
00:35:28,836 --> 00:35:31,686
Here we're setting our printInfo
output type to be general


750
00:35:31,686 --> 00:35:34,196
because the user can
select any number of colors


751
00:35:34,366 --> 00:35:35,286
so it's not Grayscale.


752
00:35:36,876 --> 00:35:39,226
Here we're setting the
orientation to be landscape


753
00:35:39,226 --> 00:35:40,506
so we're printing
along the roll.


754
00:35:41,036 --> 00:35:43,686
Here we're setting the job name


755
00:35:43,886 --> 00:35:47,096
to be just whatever the user
has entered into the text field


756
00:35:47,196 --> 00:35:50,006
and then we set the
printInfo on the controller.


757
00:35:52,576 --> 00:35:54,526
Next we create our
simple text formatter.


758
00:35:54,886 --> 00:35:57,056
We're initializing it with
the text from the text field.


759
00:35:58,256 --> 00:36:02,176
We set the text formatters color
to be the users chosen color


760
00:36:02,686 --> 00:36:04,606
and the font to be
the users chosen font.


761
00:36:04,996 --> 00:36:08,636
We set the controller
print formatter property


762
00:36:08,636 --> 00:36:11,316
to be our simple text
formatter we created


763
00:36:11,316 --> 00:36:13,966
and then we just present the UI.


764
00:36:14,076 --> 00:36:16,186
Now when the user selects
the printer it has a roll.


765
00:36:18,356 --> 00:36:20,816
This delegate will be
called cut length for paper


766
00:36:21,306 --> 00:36:23,746
with the UIPrintPaper
representing the roll.


767
00:36:24,176 --> 00:36:28,796
Here we're just calculating
the size


768
00:36:28,796 --> 00:36:31,226
of our text based
on the default font.


769
00:36:33,336 --> 00:36:35,566
We'll do a simple calculation
to figure out how big


770
00:36:35,566 --> 00:36:37,566
that we can actually
make it on the page.


771
00:36:38,106 --> 00:36:42,226
And we'll create a new
font based on that size


772
00:36:42,226 --> 00:36:43,086
that we just calculated.


773
00:36:46,016 --> 00:36:49,086
Here we're finding how big our
final text size is going to be


774
00:36:49,086 --> 00:36:52,326
with that font that we
calculated using just a size


775
00:36:52,326 --> 00:36:53,086
with attributes.


776
00:36:53,386 --> 00:36:58,526
And we set our simple text
formatters font to be the font


777
00:36:58,526 --> 00:37:00,536
that we just calculated
with the size we calculated.


778
00:37:02,926 --> 00:37:05,866
Now next we actually have
to figure out the margins.


779
00:37:05,996 --> 00:37:08,336
So we figured out how wide
our text is going to be


780
00:37:08,446 --> 00:37:10,576
but if we just returned


781
00:37:10,576 --> 00:37:13,796
that length we wouldn't be
accounting for the margins.


782
00:37:14,296 --> 00:37:17,456
Even roll printers can have
margins on top, bottom,


783
00:37:17,456 --> 00:37:20,146
left and right so we need
to add in our margins.


784
00:37:21,086 --> 00:37:25,536
To figure out margins we just
subtract our printable rect


785
00:37:25,536 --> 00:37:28,686
from our paper size so that
gives us margins on both sides.


786
00:37:29,246 --> 00:37:33,776
So we'll return the width
of our text plus the length


787
00:37:33,776 --> 00:37:37,086
of these margins and plus
some small padding factor


788
00:37:37,176 --> 00:37:38,606
to make sure things fit.


789
00:37:40,506 --> 00:37:41,246
So we'll run this


790
00:37:41,246 --> 00:37:49,996
in the simulator here
and here's our UI.


791
00:37:50,476 --> 00:37:51,186
I'll choose script.


792
00:37:52,606 --> 00:37:53,696
We'll enter some text in here.


793
00:37:54,196 --> 00:38:01,266
[ Silence ]


794
00:38:01,766 --> 00:38:03,966
San Francisco is
full of hipsters.


795
00:38:04,896 --> 00:38:05,536
[laughter] This is true.


796
00:38:06,116 --> 00:38:09,176
So next, what are we
going to print this on?


797
00:38:10,306 --> 00:38:11,696
Well we ship a really great tool


798
00:38:11,696 --> 00:38:14,366
with Xcode that's
a printer simulator


799
00:38:14,366 --> 00:38:16,056
so as you're developing
your app you don't have


800
00:38:16,056 --> 00:38:17,016
to be wasting paper.


801
00:38:17,856 --> 00:38:18,886
To get to this simulator,


802
00:38:18,966 --> 00:38:21,366
from the iOS simulator
we can just go file,


803
00:38:21,366 --> 00:38:27,416
open printer simulator or we
can, from Xcodes developer menu,


804
00:38:29,306 --> 00:38:32,126
we can choose open developer
tool, that's available here too.


805
00:38:32,436 --> 00:38:38,656
So the printer simulator has
a bunch of simulated printers.


806
00:38:38,656 --> 00:38:41,706
We have different
types, color lasers,


807
00:38:41,706 --> 00:38:43,266
Inkjets, two sided printers.


808
00:38:44,356 --> 00:38:46,476
New in the latest
Xcode, Xcode 5,


809
00:38:47,616 --> 00:38:49,446
we have a 36 inch roll printer


810
00:38:49,976 --> 00:38:51,506
and we have a simulated
label printer.


811
00:38:54,446 --> 00:38:56,656
Now roll printers
always detect the size


812
00:38:56,656 --> 00:38:57,646
of the roll that's loaded.


813
00:38:57,646 --> 00:38:58,776
You always know the size.


814
00:38:59,496 --> 00:39:02,106
So how do we set a size
with our simulated printer?


815
00:39:03,586 --> 00:39:06,476
Well we have this load
paper button here in the UI.


816
00:39:07,236 --> 00:39:10,486
We can tap that and
here we get a view


817
00:39:10,486 --> 00:39:12,126
of all the different
simulated printers


818
00:39:12,126 --> 00:39:13,556
and which size is
loaded in each.


819
00:39:14,616 --> 00:39:16,206
We'll go to the simulated
label printer


820
00:39:16,816 --> 00:39:19,036
and actually load a 2
inch roll so we're going


821
00:39:19,036 --> 00:39:20,416
to print a 2 inch roll banner.


822
00:39:22,476 --> 00:39:23,266
Click okay.


823
00:39:25,246 --> 00:39:26,186
We'll choose the label printer.


824
00:39:31,276 --> 00:39:32,636
And there we have our output


825
00:39:32,786 --> 00:39:36,146
so it's been formatted
correctly and spans the roll.


826
00:39:36,536 --> 00:39:43,486
Now we're dynamic here,
we're dynamic here


827
00:39:43,486 --> 00:39:44,816
so we can choose
a different font.


828
00:39:45,176 --> 00:39:48,306
We can go in, load a 4
inch roll if we want,


829
00:39:51,906 --> 00:39:55,096
print that same content
to the label printer


830
00:39:55,096 --> 00:39:56,106
and then fills the roll.


831
00:39:56,106 --> 00:40:00,876
Now as Howard mentioned we have
an actual real printer here.


832
00:40:01,646 --> 00:40:04,486
We'll go ahead and choose that.


833
00:40:08,106 --> 00:40:08,786
We'll print that out.


834
00:40:08,786 --> 00:40:11,186
So Brother makes really
great, very reliable printers


835
00:40:11,186 --> 00:40:12,336
and this one, like
Howard mentioned,


836
00:40:12,336 --> 00:40:15,006
will actually be getting
an AirPrint upgrade later


837
00:40:15,006 --> 00:40:15,556
this year.


838
00:40:15,556 --> 00:40:16,386
It's shipping right now.


839
00:40:17,206 --> 00:40:18,616
It takes a little
bit of time for it


840
00:40:18,616 --> 00:40:20,036
to get warmed up
here as it prints.


841
00:40:20,796 --> 00:40:24,846
It's a thermal printer so the
array needs to get warmed up.


842
00:40:24,846 --> 00:40:26,036
We haven't printed to
it in quite a while.


843
00:40:26,456 --> 00:40:27,766
And here we go.


844
00:40:27,766 --> 00:40:29,276
[ Noise ]


845
00:40:29,276 --> 00:40:38,706
And so there we have it, so
there's our printed roll.


846
00:40:43,176 --> 00:40:48,706
So I hope we've shown
you that printing


847
00:40:48,706 --> 00:40:50,006
in your app is really easy.


848
00:40:51,026 --> 00:40:53,896
Printing items like PDF's
and images can be really just


849
00:40:53,896 --> 00:40:55,156
like 10 lines of code.


850
00:40:55,856 --> 00:40:57,376
We provide formatters
and renderers


851
00:40:57,376 --> 00:40:58,796
to give you full
control of printing


852
00:40:58,796 --> 00:41:00,046
so you can make beautiful
output.


853
00:41:00,426 --> 00:41:03,526
And like I mentioned the printer
banner sample app is available


854
00:41:03,556 --> 00:41:04,696
on the developer website.


855
00:41:05,076 --> 00:41:06,296
With that I'll hand it
back over to Howard.


856
00:41:07,246 --> 00:41:13,436
>> Howard Miller:
Thanks for coming.


857
00:41:13,936 --> 00:41:16,080
[ Applause ]

