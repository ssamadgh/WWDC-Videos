1
00:00:08,516 --> 00:00:16,500
[ Music ]


2
00:00:23,516 --> 00:00:28,556
[ Applause And Cheering ]


3
00:00:29,056 --> 00:00:29,566
>> Hello everybody.


4
00:00:30,866 --> 00:00:33,436
Welcome back, if you came to
last year's Apple Pay session.


5
00:00:34,146 --> 00:00:34,836
My name is Nick.


6
00:00:35,576 --> 00:00:37,736
I'm here today with
my colleague Anders.


7
00:00:38,076 --> 00:00:40,846
And we are going to talk
about a brand-new feature,


8
00:00:41,426 --> 00:00:43,496
Apple Pay on the web.


9
00:00:44,656 --> 00:00:47,246
But first, I want to
ask you a question.


10
00:00:48,486 --> 00:00:51,906
How many of you, and put your
hands up, or yell at your screen


11
00:00:52,036 --> 00:00:54,136
if you are watching
downstairs or online,


12
00:00:54,276 --> 00:00:57,566
how many of you have tried to
buy something online but given


13
00:00:57,566 --> 00:00:59,986
up because the checkout
was just too confusing?


14
00:01:00,486 --> 00:01:02,566
I'm seeing a lot of hands.


15
00:01:03,396 --> 00:01:04,495
That's true isn't it?


16
00:01:04,495 --> 00:01:05,226
It's a big problem.


17
00:01:05,406 --> 00:01:08,016
Here's a site I went
to yesterday,


18
00:01:08,146 --> 00:01:09,136
completely legitimate.


19
00:01:10,136 --> 00:01:12,146
Ignore the name, Honest
Bob; he's a great guy.


20
00:01:13,176 --> 00:01:15,156
But his checkout was
a little confusing.


21
00:01:15,806 --> 00:01:18,646
And so I typed in my name, which
in this example has been changed


22
00:01:18,886 --> 00:01:20,706
to protect the innocent,
to Johnny Appleseed.


23
00:01:21,386 --> 00:01:22,626
And I typed in my
account number.


24
00:01:22,626 --> 00:01:24,146
And I got this confusing error.


25
00:01:24,146 --> 00:01:27,606
It said the card number needed
to be a series of numbers.


26
00:01:28,586 --> 00:01:30,606
So I thought, "Well,
I guess it didn't


27
00:01:30,606 --> 00:01:33,106
like the fact I had some spaces
there even though that's how it


28
00:01:33,106 --> 00:01:33,896
was written on my card.


29
00:01:34,686 --> 00:01:35,466
So I changed it.


30
00:01:36,556 --> 00:01:37,616
And then I got this other error.


31
00:01:37,616 --> 00:01:39,736
So apparently the
month's not entered,


32
00:01:39,846 --> 00:01:41,966
which wasn't even the month
I'd chosen; didn't exist.


33
00:01:43,096 --> 00:01:44,686
This is very confusing.


34
00:01:45,426 --> 00:01:47,756
Now hopefully the checkouts
you've seen aren't quite


35
00:01:47,756 --> 00:01:48,546
as bad as this.


36
00:01:49,266 --> 00:01:51,936
But Internet checkouts,
they are pretty poor.


37
00:01:52,756 --> 00:01:53,986
And we think we can solve that.


38
00:01:54,616 --> 00:01:56,666
We think we can solve
it with Apple Pay.


39
00:01:56,666 --> 00:01:59,286
And we are going to talk today


40
00:01:59,736 --> 00:02:02,256
about how we can solve
the problem of checkouts


41
00:02:02,256 --> 00:02:05,546
on the web using
the great interface


42
00:02:05,746 --> 00:02:07,176
and the great benefits
of Apple Pay.


43
00:02:07,176 --> 00:02:09,705
We have got a lot to
cover, so we are going


44
00:02:09,705 --> 00:02:11,026
to start off with
an introduction.


45
00:02:11,026 --> 00:02:14,156
We are going to run through some
of the things about Apple Pay,


46
00:02:14,156 --> 00:02:16,986
if you are not familiar with
it, and what it can do for you.


47
00:02:16,986 --> 00:02:19,606
Then we are going to talk
about the actual API,


48
00:02:19,606 --> 00:02:22,626
the new API that we've added
into Safari, the JavaScript API.


49
00:02:22,626 --> 00:02:25,506
And then we'll move on
to payment processing,


50
00:02:25,506 --> 00:02:27,216
how you can actually get paid.


51
00:02:28,626 --> 00:02:30,536
And finally we'll look at
designing for Apple Pay,


52
00:02:30,726 --> 00:02:33,806
how to make your sites
really shine and really work


53
00:02:33,806 --> 00:02:36,106
and have a great
Apple Pay experience.


54
00:02:36,516 --> 00:02:38,606
So let's get started.


55
00:02:40,316 --> 00:02:41,506
What is Apple Pay?


56
00:02:42,536 --> 00:02:45,016
Hopefully most of you are
familiar with Apple Pay.


57
00:02:45,516 --> 00:02:49,346
It's an easy, secure,
and private way to pay.


58
00:02:50,516 --> 00:02:54,186
And you can pay both
in-store and you can pay


59
00:02:54,356 --> 00:02:56,366
within iOS applications.


60
00:02:57,596 --> 00:02:58,476
Maybe you've tried that.


61
00:02:58,576 --> 00:02:59,686
If you haven't, give it a go.


62
00:02:59,686 --> 00:03:02,966
There are some great apps
like Lyft or Uber or DoorDash


63
00:03:02,966 --> 00:03:04,886
that you can use while you
are here at the conference.


64
00:03:06,416 --> 00:03:09,636
And Apple Pay within apps
enables best-in-class


65
00:03:09,636 --> 00:03:11,006
eCommerce experiences.


66
00:03:11,366 --> 00:03:13,166
They are apps that really shine.


67
00:03:14,466 --> 00:03:19,136
And thousands of applications
have adopted Apple Pay today


68
00:03:19,666 --> 00:03:23,896
across the world, in China,
in the UK, in America.


69
00:03:25,156 --> 00:03:28,006
And these apps are
seeing great results.


70
00:03:28,176 --> 00:03:31,296
They are seeing higher
conversion rates.


71
00:03:31,716 --> 00:03:33,656
Users who pay with Apple
Pay are more likely


72
00:03:33,656 --> 00:03:35,306
to convert to paying customers.


73
00:03:36,316 --> 00:03:38,696
And they are also seeing
increased engagement.


74
00:03:39,296 --> 00:03:40,876
These users aren't
just buying things;


75
00:03:40,876 --> 00:03:43,776
they are spending more
time in these applications.


76
00:03:44,016 --> 00:03:46,146
And finally, users are happier.


77
00:03:47,156 --> 00:03:50,266
Apple Pay has one of the highest
customer satisfaction rates


78
00:03:50,476 --> 00:03:52,046
of any payment method ever.


79
00:03:52,946 --> 00:03:54,986
It's so easy to use,
and users love it.


80
00:03:55,096 --> 00:03:58,676
And that's great
in applications.


81
00:03:59,366 --> 00:04:00,876
But I think there is
something missing.


82
00:04:02,026 --> 00:04:06,416
A large amount of
eCommerce happens outside


83
00:04:06,416 --> 00:04:07,476
of the app ecosystem.


84
00:04:08,336 --> 00:04:09,006
Apps are great.


85
00:04:09,326 --> 00:04:10,016
I love apps.


86
00:04:10,346 --> 00:04:13,396
But many of us still pay
for things through the web.


87
00:04:14,566 --> 00:04:17,406
Most payment on the
web is pretty slow.


88
00:04:17,406 --> 00:04:18,266
It's laborious.


89
00:04:18,266 --> 00:04:19,086
And it's unclear.


90
00:04:19,086 --> 00:04:20,606
The checkout flow is different


91
00:04:20,606 --> 00:04:22,866
for every single
merchant, every single site.


92
00:04:22,936 --> 00:04:23,506
It's different.


93
00:04:23,626 --> 00:04:26,856
And so we are going
to solve that today.


94
00:04:26,896 --> 00:04:28,806
And we are going to solve
it by bringing Apple Pay


95
00:04:28,806 --> 00:04:32,116
to more places and
to more people.


96
00:04:32,656 --> 00:04:35,636
And we call that
Apple Pay Everywhere,


97
00:04:36,056 --> 00:04:38,186
because there's three main
places we are bringing it to.


98
00:04:39,556 --> 00:04:40,666
One of them is WatchKit.


99
00:04:40,666 --> 00:04:42,916
You may have seen this
in the keynote yesterday;


100
00:04:43,126 --> 00:04:45,116
and Kevin talked about how
we are bringing Apple Pay


101
00:04:45,116 --> 00:04:46,066
to WatchKit apps.


102
00:04:46,486 --> 00:04:49,676
And we are also bringing it to
all of the great new extensions


103
00:04:49,676 --> 00:04:53,296
that you saw: SiriKit,
maps, and message apps.


104
00:04:54,106 --> 00:04:56,386
But perhaps the biggest
place we are bringing it to,


105
00:04:56,386 --> 00:05:00,806
and the reason you are here
today, is the web and Safari.


106
00:05:01,486 --> 00:05:04,816
We are going to talk about
WatchKit and extensions


107
00:05:04,816 --> 00:05:06,246
in the session right after this.


108
00:05:06,346 --> 00:05:08,396
So if you like the sound of
my voice, don't go anywhere.


109
00:05:09,426 --> 00:05:13,366
But for now let's focus
on Safari, and let's focus


110
00:05:13,366 --> 00:05:15,326
on Apple Pay on the web.


111
00:05:15,396 --> 00:05:17,786
I have already talked to you


112
00:05:17,786 --> 00:05:20,946
about how eCommerce
today is pretty bad.


113
00:05:22,476 --> 00:05:24,396
Large amounts of retail
happen on the web.


114
00:05:24,996 --> 00:05:27,876
But these checkouts are
lengthy, they are complicated,


115
00:05:27,876 --> 00:05:29,166
and they are hard to use.


116
00:05:29,286 --> 00:05:31,796
And that's doubly
true on mobile.


117
00:05:32,316 --> 00:05:34,766
The screens are smaller, but
the checkouts are still just


118
00:05:34,766 --> 00:05:35,576
as complicated.


119
00:05:37,046 --> 00:05:39,686
Users also want the same
experience that they get


120
00:05:39,686 --> 00:05:41,376
from apps, the same ease of use,


121
00:05:41,376 --> 00:05:43,586
the same security,
the same privacy.


122
00:05:43,586 --> 00:05:45,516
How many of you have
had to get a new card


123
00:05:45,516 --> 00:05:47,406
because you got an
e-mail telling you


124
00:05:47,406 --> 00:05:50,056
that some site you shopped at
three years ago was hacked?


125
00:05:50,786 --> 00:05:51,566
I know I have.


126
00:05:52,766 --> 00:05:54,946
And so Apple Pay solves that.


127
00:05:55,906 --> 00:05:57,776
And Apple Pay on
the web is available


128
00:05:57,776 --> 00:06:00,306
on any Apple Pay device today.


129
00:06:01,176 --> 00:06:03,326
That's iPhone and iPad.


130
00:06:03,966 --> 00:06:08,836
And it's available on Safari
and on SafariViewController.


131
00:06:09,256 --> 00:06:13,226
It's the same Apple Pay
experience but on the web,


132
00:06:13,316 --> 00:06:16,456
the exact UI, the
exact experience.


133
00:06:16,456 --> 00:06:18,326
If you are familiar
with Apple Pay in app,


134
00:06:18,496 --> 00:06:19,406
you'll be right at home.


135
00:06:20,406 --> 00:06:22,846
But there is something
missing there,


136
00:06:22,846 --> 00:06:26,116
and that's on the desktop.


137
00:06:27,326 --> 00:06:28,736
Now in some countries
like China,


138
00:06:28,806 --> 00:06:31,596
mobile eCommerce is the
majority of eCommerce.


139
00:06:31,596 --> 00:06:34,816
But here in the U.S., the
majority of people still pay


140
00:06:34,816 --> 00:06:36,016
for things on their desktop.


141
00:06:36,356 --> 00:06:39,486
You have probably bought
your WWDC ticket on your Mac.


142
00:06:40,666 --> 00:06:43,436
And we think Apple Pay should
be available wherever you are.


143
00:06:43,986 --> 00:06:49,156
And so we are also bringing
Apple Pay to Mac OS Sierra.


144
00:06:50,386 --> 00:06:53,246
Now you can pay directly
from your Mac,


145
00:06:53,306 --> 00:06:55,916
but with the same security
you get from Apple Pay


146
00:06:56,296 --> 00:06:59,106
on your iPhone and
on your Apple Watch.


147
00:06:59,416 --> 00:07:02,986
You can simply tap through
continuity to authorize.


148
00:07:03,586 --> 00:07:06,526
It's really easy to use, and
it's really straightforward.


149
00:07:06,876 --> 00:07:09,446
It's available on any
Handoff-enabled Mac


150
00:07:09,756 --> 00:07:11,076
that can run Mac OS Sierra.


151
00:07:11,366 --> 00:07:14,706
So that's pretty much every Mac
sold for the past four years.


152
00:07:15,346 --> 00:07:17,106
It's fully supported in Safari.


153
00:07:17,816 --> 00:07:20,196
And you authorize the
payment on your iPhone


154
00:07:20,636 --> 00:07:21,596
or on your Apple Watch.


155
00:07:22,556 --> 00:07:26,336
Now because Apple Pay
on Mac OS is so quick,


156
00:07:26,726 --> 00:07:29,196
you might have missed the
demo that we gave yesterday.


157
00:07:29,196 --> 00:07:30,486
So I am going to
give you another one.


158
00:07:31,026 --> 00:07:31,456
Don't worry.


159
00:07:31,866 --> 00:07:32,486
It's very quick.


160
00:07:33,516 --> 00:07:34,456
Let me switch over here.


161
00:07:34,616 --> 00:07:42,546
So I have got, on
the left, a website,


162
00:07:42,546 --> 00:07:43,846
and on the right
I've got an iPhone.


163
00:07:43,956 --> 00:07:47,576
Now Craig booked a few
tickets for an off-site to see


164
00:07:47,576 --> 00:07:48,876
"Finding Dory" on Thursday.


165
00:07:48,996 --> 00:07:51,156
I am going to crash
it, actually Friday.


166
00:07:51,226 --> 00:07:52,246
I am going to crash that.


167
00:07:52,246 --> 00:07:53,186
We are going to join him.


168
00:07:53,186 --> 00:07:56,516
I am going to take 10 of my
engineers, my colleagues, over.


169
00:07:57,416 --> 00:07:58,936
Yeah, we'll go say hi to Craig.


170
00:07:59,926 --> 00:08:02,036
OK. I clicked the buy
with Apple Pay button,


171
00:08:02,196 --> 00:08:04,356
and that's what happened
instantly.


172
00:08:04,836 --> 00:08:05,746
Let's do that again.


173
00:08:05,746 --> 00:08:06,696
I'm going to cancel it.


174
00:08:06,696 --> 00:08:08,516
And you'll see when I
cancel, it cancels this


175
00:08:08,516 --> 00:08:09,666
from the phone as well.


176
00:08:09,666 --> 00:08:12,006
So I' m going to tap
buy with Apple Pay.


177
00:08:12,626 --> 00:08:14,776
It's immediate.


178
00:08:15,156 --> 00:08:16,186
It came up straightaway.


179
00:08:16,186 --> 00:08:17,976
And then I just Touch
ID on the phone.


180
00:08:23,336 --> 00:08:23,916
And we're done.


181
00:08:24,366 --> 00:08:25,446
We paid in seconds.


182
00:08:25,796 --> 00:08:27,786
It was instant between
these two devices.


183
00:08:27,786 --> 00:08:30,356
And I get a notification telling
me about the payment I've made.


184
00:08:30,886 --> 00:08:35,106
That's how easy and quick
Apple Pay is to use on Mac OS.


185
00:08:35,436 --> 00:08:38,506
It's blindingly fast.


186
00:08:40,256 --> 00:08:43,086
So hopefully I have sold you
on how great Apple Pay is.


187
00:08:43,676 --> 00:08:46,936
Let's talk a bit about
actually integrating it.


188
00:08:47,716 --> 00:08:50,056
Now before we dive into the
web API, I just want to run


189
00:08:50,056 --> 00:08:51,646
over a few basics of Apple Pay


190
00:08:51,646 --> 00:08:53,886
because perhaps you
haven't integrated it


191
00:08:53,886 --> 00:08:54,796
into your application.


192
00:08:54,796 --> 00:08:56,616
Perhaps you are solely
a web developer.


193
00:08:57,116 --> 00:09:01,806
So Apple Pay provides you
with a unique payment token.


194
00:09:03,346 --> 00:09:06,966
And you send this token to your
payment processor, like Stripe


195
00:09:06,966 --> 00:09:09,046
or Braintree, or
Chase Paymentech.


196
00:09:10,416 --> 00:09:13,186
Now this token is unique
to that transaction.


197
00:09:13,186 --> 00:09:14,786
It can only be used one time,


198
00:09:14,846 --> 00:09:16,286
and for the amount
that you asked for.


199
00:09:17,096 --> 00:09:20,296
But when you use Apple Pay
in an app or on a website,


200
00:09:20,386 --> 00:09:22,846
it's also unique to
you, the merchant.


201
00:09:23,166 --> 00:09:23,896
It's encrypted.


202
00:09:24,586 --> 00:09:27,096
So even if the token
was compromised somehow,


203
00:09:27,096 --> 00:09:28,516
if the connection the user is


204
00:09:28,516 --> 00:09:31,116
on was an unsecured
WiFi connection,


205
00:09:31,526 --> 00:09:33,276
the token is still
completely safe


206
00:09:33,316 --> 00:09:35,816
because it's encrypted
using a merchant certificate


207
00:09:36,116 --> 00:09:37,896
and a merchant identifier.


208
00:09:38,396 --> 00:09:41,476
Now the merchant identifier


209
00:09:41,476 --> 00:09:44,536
and certificate identify
you as a merchant.


210
00:09:45,486 --> 00:09:48,256
They look like this, like
standard reverse DNS strings.


211
00:09:48,256 --> 00:09:49,616
If you are an iOS developer,


212
00:09:49,616 --> 00:09:51,026
you'll be familiar
with that format.


213
00:09:51,336 --> 00:09:54,346
And they're generated
at our developer portal.


214
00:09:55,036 --> 00:09:56,336
And because they
are unique to you,


215
00:09:56,336 --> 00:09:59,246
and because only you can
decrypt these tokens,


216
00:10:00,366 --> 00:10:02,696
only you can read your
customer's Apple Pay tokens.


217
00:10:04,576 --> 00:10:05,996
Now let's see how
that flow works


218
00:10:05,996 --> 00:10:08,656
in an actual application today.


219
00:10:08,656 --> 00:10:12,956
So in an iOS app, Apple
Pay starts with the Buy


220
00:10:12,956 --> 00:10:13,746
with Apple Pay button.


221
00:10:14,346 --> 00:10:18,076
Now when the Buy with Apple
Pay button is pressed,


222
00:10:19,116 --> 00:10:21,376
iOS authorizes the payment.


223
00:10:21,516 --> 00:10:23,356
It displays the Apple Pay sheet.


224
00:10:24,216 --> 00:10:27,056
And the user Touch IDs
or uses their passcode.


225
00:10:27,576 --> 00:10:31,386
And so payment data is generated
from the secure elements chip


226
00:10:31,646 --> 00:10:34,076
on the phone; that's the
unique Apple Pay chip


227
00:10:34,076 --> 00:10:37,016
that securely holds
your card data.


228
00:10:37,196 --> 00:10:40,196
Now what happens next
when you're paying


229
00:10:40,196 --> 00:10:43,916
in an app is this data is sent
to our servers, where it goes


230
00:10:43,916 --> 00:10:45,526
through a process
that we call Rewrap.


231
00:10:45,526 --> 00:10:49,016
And that's when it's reencrypted
to you as a merchant.


232
00:10:49,656 --> 00:10:51,016
This happens behind the scenes.


233
00:10:52,386 --> 00:10:54,106
And so when your
app gets a callback,


234
00:10:54,406 --> 00:10:56,296
it just receives
this reencrypted,


235
00:10:56,296 --> 00:10:59,726
rewrapped payment data
that you can then forward


236
00:11:00,716 --> 00:11:04,116
to your merchant or your
payment processor's server


237
00:11:04,116 --> 00:11:07,016
and then just dismiss the sheet
once that charge has been made.


238
00:11:07,596 --> 00:11:11,506
Now the flow is very
similar on the web.


239
00:11:11,936 --> 00:11:13,326
There's a couple of differences


240
00:11:13,546 --> 00:11:16,536
around how we actually validate
merchants, because in iOS


241
00:11:16,536 --> 00:11:18,536
when you have an app, it's
an app on the App Store.


242
00:11:18,686 --> 00:11:19,816
It's a signed binary.


243
00:11:20,586 --> 00:11:22,346
Before we go into
that, let me just run


244
00:11:22,346 --> 00:11:24,656
through a few requirements
for Apple Pay.


245
00:11:25,996 --> 00:11:28,046
Apple Pay on the
web is available


246
00:11:28,046 --> 00:11:29,746
to any website that
wants to use it.


247
00:11:30,596 --> 00:11:33,036
But you have to have an
Apple developer account,


248
00:11:33,556 --> 00:11:39,416
and your site has to
be served over HTTPS.


249
00:11:39,576 --> 00:11:42,896
Finally, your site has to comply
with the Apple Pay guidelines.


250
00:11:43,066 --> 00:11:44,906
Now these are very
straightforward guidelines.


251
00:11:44,906 --> 00:11:47,586
Most payment processors have
similar ones about the types


252
00:11:47,586 --> 00:11:49,116
of goods you can
and cannot sell.


253
00:11:49,686 --> 00:11:55,256
Now some eCommerce platforms
will actually support Apple Pay


254
00:11:55,626 --> 00:11:57,446
on your behalf.


255
00:11:57,756 --> 00:11:59,546
We'll talk about the exact
eCommerce platforms we are


256
00:11:59,546 --> 00:12:02,806
partnering with in the next
section on payment processing.


257
00:12:02,926 --> 00:12:04,936
But if you are partnered with
those eCommerce platforms,


258
00:12:04,936 --> 00:12:06,566
you won't actually need to
have a developer account;


259
00:12:06,596 --> 00:12:07,786
it can be taken care of for you.


260
00:12:09,776 --> 00:12:12,336
So assuming your site
is compliant with all


261
00:12:12,336 --> 00:12:16,726
of these requirements, the
first step to using Apple Pay is


262
00:12:16,726 --> 00:12:19,706
to register your site.


263
00:12:19,966 --> 00:12:21,816
Registering your
site is really easy.


264
00:12:21,936 --> 00:12:24,426
You just create a merchant
identifier and certificate


265
00:12:24,426 --> 00:12:25,556
at the developer portal.


266
00:12:26,086 --> 00:12:29,726
And then you register
your domain and link it


267
00:12:29,986 --> 00:12:31,416
to this merchant identifier.


268
00:12:31,626 --> 00:12:34,776
This is the fully qualified
domain so for example,


269
00:12:34,776 --> 00:12:39,236
store.apple.com, that you want
the actual payment to happen on.


270
00:12:40,366 --> 00:12:41,776
Now when you register
your domain,


271
00:12:41,906 --> 00:12:43,096
we'll go off and validate it.


272
00:12:44,726 --> 00:12:46,706
And you'll also obtain
a certificate back,


273
00:12:46,846 --> 00:12:48,886
a TLS certificate that we issue.


274
00:12:49,096 --> 00:12:50,776
And we call this the
Session certificate.


275
00:12:50,966 --> 00:12:52,126
So I just want to recap.


276
00:12:52,126 --> 00:12:53,956
We have got three
pieces of information


277
00:12:53,956 --> 00:12:55,486
from registering for Apple Pay.


278
00:12:55,486 --> 00:12:57,186
We have got our merchant
identifier


279
00:12:57,396 --> 00:12:58,556
and our merchant certificate.


280
00:12:58,876 --> 00:13:00,306
They identify us as a merchant.


281
00:13:00,486 --> 00:13:03,196
And then we have the Apple
Pay Session certificate,


282
00:13:03,196 --> 00:13:04,576
which identifies our domain.


283
00:13:04,766 --> 00:13:06,956
And when you register
on the portal,


284
00:13:06,956 --> 00:13:08,496
it's very easy, very
straightforward.


285
00:13:08,726 --> 00:13:09,936
It should be enabled right now.


286
00:13:10,186 --> 00:13:11,266
It looks something like this.


287
00:13:11,926 --> 00:13:12,896
And just add a domain.


288
00:13:13,506 --> 00:13:15,896
We validate it by checking
the presence of a file


289
00:13:15,896 --> 00:13:17,816
that we ask you to
place on that domain.


290
00:13:18,256 --> 00:13:20,206
And you're done.


291
00:13:21,786 --> 00:13:24,176
So let's look at how
this fits into our flow.


292
00:13:24,176 --> 00:13:28,566
Let's look at the Apple
Pay on the web flow.


293
00:13:29,226 --> 00:13:33,326
Now just like Apple Pay within
an app, the process starts


294
00:13:33,426 --> 00:13:36,316
when you press or tap the
Buy with Apple Pay button.


295
00:13:36,796 --> 00:13:39,546
Now there's a key
difference on the web.


296
00:13:40,266 --> 00:13:43,606
You create the payment
request; that's the object


297
00:13:43,606 --> 00:13:45,516
that tells us what
you want to charge.


298
00:13:46,866 --> 00:13:48,576
And then something
extra happens.


299
00:13:48,856 --> 00:13:50,156
This is a piece of validation.


300
00:13:50,256 --> 00:13:52,106
You create a merchant session.


301
00:13:52,506 --> 00:13:55,686
And this is requested from
your web server to Apple.


302
00:13:57,136 --> 00:13:59,856
It's returned back to
you, and you forward it


303
00:13:59,856 --> 00:14:01,446
on with your payment request.


304
00:14:01,926 --> 00:14:05,626
That's the only difference.


305
00:14:05,726 --> 00:14:07,676
That's the only difference
in the flow between Apple Pay


306
00:14:07,676 --> 00:14:10,396
within an app and
Apple Pay on the web --


307
00:14:10,736 --> 00:14:12,326
this merchant validation piece.


308
00:14:12,826 --> 00:14:16,126
Let's focus a little more
on this merchant validation.


309
00:14:16,126 --> 00:14:21,086
Let's talk about why we do it.


310
00:14:22,056 --> 00:14:24,976
So I mentioned just a moment ago


311
00:14:24,976 --> 00:14:27,636
that the web is a
little different to apps.


312
00:14:28,026 --> 00:14:32,076
In an iOS app, security of
various features like Apple Pay


313
00:14:32,076 --> 00:14:35,216
or Location is protected
with signed entitlements.


314
00:14:35,216 --> 00:14:37,216
If you are not familiar
with those, these are pieces


315
00:14:37,216 --> 00:14:39,006
of information that
are digitally signed


316
00:14:39,006 --> 00:14:40,396
into your binary
in the App Store.


317
00:14:40,816 --> 00:14:44,976
And this protects both
users and developers and,


318
00:14:44,976 --> 00:14:46,906
in the case of Apple
Pay, merchants.


319
00:14:47,426 --> 00:14:49,436
Now obviously on the web
we don't have an app store,


320
00:14:49,436 --> 00:14:51,126
and we don't have
the entitlements.


321
00:14:51,306 --> 00:14:53,756
So instead we have this
merchant validation process.


322
00:14:54,736 --> 00:14:58,226
It protects both your users, and
it protects you as merchants.


323
00:14:58,406 --> 00:15:00,746
If your site is compromised, for
example, you have an easy way


324
00:15:00,746 --> 00:15:02,566
to stop Apple Pay
from being used there.


325
00:15:03,056 --> 00:15:05,746
Merchant validation
is really simple


326
00:15:05,746 --> 00:15:06,676
and really straightforward.


327
00:15:06,676 --> 00:15:07,816
It's not that tricky.


328
00:15:08,426 --> 00:15:10,776
You take an Apple
Pay server URL,


329
00:15:11,556 --> 00:15:13,946
and this URL is provided
from Safari.


330
00:15:14,486 --> 00:15:18,246
You send this URL
to your web server,


331
00:15:19,556 --> 00:15:21,266
which then requests
the merchant session.


332
00:15:22,846 --> 00:15:25,686
Now to request the merchant
session you simply provide the


333
00:15:25,686 --> 00:15:28,236
TLS certificate that we
generated for that domain.


334
00:15:28,486 --> 00:15:29,756
It's a challenge response.


335
00:15:30,886 --> 00:15:33,136
And if that certificate
looks good, if it's valid,


336
00:15:33,466 --> 00:15:35,126
if it matches the domain


337
00:15:35,606 --> 00:15:37,296
that you are requesting
a payment from,


338
00:15:37,636 --> 00:15:38,766
we'll return a session.


339
00:15:41,306 --> 00:15:43,686
Now this session is opaque.


340
00:15:43,686 --> 00:15:45,346
You don't need to worry
about the contents of it.


341
00:15:45,606 --> 00:15:47,736
It's basically a unique
token that's linked


342
00:15:47,736 --> 00:15:49,196
with a single Apple Pay request.


343
00:15:49,656 --> 00:15:52,486
And it's used to ensure that
your site is still secure.


344
00:15:52,856 --> 00:15:56,056
You have to request this
for every Apple Pay payment,


345
00:15:56,376 --> 00:15:58,336
but it's a very lightweight
call,


346
00:15:58,336 --> 00:15:59,796
it doesn't take very
much to request it.


347
00:16:00,946 --> 00:16:02,776
And you request it
from your web server.


348
00:16:03,096 --> 00:16:05,146
You don't request
it from the client.


349
00:16:05,236 --> 00:16:09,956
I have got some tips for
this merchant validation.


350
00:16:10,536 --> 00:16:13,506
The first one is to always
obtain the session request URL


351
00:16:13,506 --> 00:16:16,126
from the client, because
it may vary depending


352
00:16:16,126 --> 00:16:17,306
on the country the user is in.


353
00:16:17,346 --> 00:16:19,276
Apple Pay has many
servers worldwide,


354
00:16:19,496 --> 00:16:21,446
and we'll use the one
that's closest to the user


355
00:16:21,446 --> 00:16:23,216
in the region they
are currently in.


356
00:16:23,646 --> 00:16:25,986
Now for some of you,
you made need to know


357
00:16:25,986 --> 00:16:29,556
up front the IP addresses
because you'll need to go


358
00:16:29,556 --> 00:16:31,176
through your firewalls
on your web servers.


359
00:16:31,176 --> 00:16:32,306
And we'll provide a list


360
00:16:32,546 --> 00:16:35,166
on developmentalapple.com
so you can do that.


361
00:16:36,676 --> 00:16:39,136
You should also only request a
session where the user interacts


362
00:16:39,136 --> 00:16:40,036
with the Apple Pay button.


363
00:16:40,126 --> 00:16:42,126
Don't request it on every
page load; there is no need.


364
00:16:42,306 --> 00:16:44,356
You only need to request it
when the user taps the button.


365
00:16:44,646 --> 00:16:46,876
We actually display the
Apple Pay sheet while you are


366
00:16:46,876 --> 00:16:47,876
requesting the session.


367
00:16:48,386 --> 00:16:50,596
So from a user's perspective
it's instantaneous.


368
00:16:50,846 --> 00:16:52,616
They tap or click
the Apple Pay button.


369
00:16:52,616 --> 00:16:55,146
They'll see the sheet, and we'll
just hold it in a loading state


370
00:16:55,146 --> 00:16:56,716
until this validation
is complete.


371
00:16:57,236 --> 00:16:59,376
You'll see how that works in
the next section when we talk


372
00:16:59,376 --> 00:17:01,336
about the JavaScript API.


373
00:17:02,016 --> 00:17:05,046
Finally, don't generate a
merchant session client-side.


374
00:17:05,786 --> 00:17:08,576
That's because you have to
have this session certificate;


375
00:17:08,636 --> 00:17:10,546
this certificate is
linked to your domain.


376
00:17:10,546 --> 00:17:12,776
You don't want to embed that on
your web pages on your client.


377
00:17:12,776 --> 00:17:14,675
It's very important
that you keep it secret.


378
00:17:15,695 --> 00:17:19,746
And so you perform the
validation on your web server.


379
00:17:19,925 --> 00:17:21,516
OK, let's recap.


380
00:17:22,016 --> 00:17:23,576
We have got ourself set up.


381
00:17:23,576 --> 00:17:25,195
We made sure that
our site complied


382
00:17:25,896 --> 00:17:26,866
with Apple's requirements.


383
00:17:27,736 --> 00:17:29,386
And we created our
virtual identifier


384
00:17:29,476 --> 00:17:30,576
and our merchant certificate,


385
00:17:30,576 --> 00:17:32,556
and we linked it
to our domain name.


386
00:17:33,096 --> 00:17:36,556
And then we learned
how to validate --


387
00:17:36,556 --> 00:17:39,926
how to validate our site
for every Apple Pay payment.


388
00:17:40,406 --> 00:17:44,916
So that covers this
portion of the flow.


389
00:17:45,706 --> 00:17:47,826
What about this portion?


390
00:17:49,246 --> 00:17:53,996
I said it was the same
as Apple Pay within app.


391
00:17:55,036 --> 00:17:56,696
But it's obviously
not the same API


392
00:17:56,836 --> 00:17:59,686
because sadly we can't
call Swift from the web.


393
00:18:00,676 --> 00:18:02,076
And so we are going to talk now


394
00:18:02,076 --> 00:18:05,236
about the new JavaScript API
that's supporting this feature.


395
00:18:05,696 --> 00:18:07,496
And to do that, I'd
like to ask Anders


396
00:18:07,576 --> 00:18:09,436
from the WebKit Team
onto the stage.


397
00:18:09,706 --> 00:18:09,976
Anders.


398
00:18:10,516 --> 00:18:16,500
[ Applause ]


399
00:18:19,426 --> 00:18:20,366
>> Thanks Nick.


400
00:18:21,826 --> 00:18:24,006
I am really excited
to be here today


401
00:18:24,006 --> 00:18:25,656
and show you how easy it is


402
00:18:25,656 --> 00:18:29,236
to use the Apple
Pay JavaScript API.


403
00:18:30,966 --> 00:18:35,576
As Nick mentioned, the Apple
Pay JavaScript API is available


404
00:18:35,576 --> 00:18:39,886
in iOS X in Safari,
as well as apps


405
00:18:39,886 --> 00:18:41,306
that use SafariViewController.


406
00:18:42,116 --> 00:18:47,456
And now, with Mac OS Sierra, you
can use Apple Pay on your Mac,


407
00:18:48,196 --> 00:18:51,936
in Safari, using your
Apple Watch or iPhone


408
00:18:51,936 --> 00:18:53,546
to do the actual authorization.


409
00:18:54,096 --> 00:18:57,816
It's a relatively simple API.


410
00:18:57,916 --> 00:19:01,026
It's got a single entry
point called ApplePaySession.


411
00:19:01,546 --> 00:19:04,066
And it's influenced
by the PassKit API


412
00:19:04,066 --> 00:19:06,166
for doing Apple Pay with an app.


413
00:19:06,696 --> 00:19:09,136
So if you are familiar
with that API,


414
00:19:09,136 --> 00:19:10,866
you'll notice a lot
of similarities.


415
00:19:13,106 --> 00:19:16,956
Now before we dive
in, I have to tell you


416
00:19:16,956 --> 00:19:18,386
about this friend of mine.


417
00:19:19,706 --> 00:19:25,746
She owns a store that sells
high-end designer clothes


418
00:19:27,016 --> 00:19:27,896
for dogs.


419
00:19:29,676 --> 00:19:33,466
And a couple of months
ago, she launched a website


420
00:19:33,466 --> 00:19:35,116
where you can buy these clothes.


421
00:19:35,116 --> 00:19:37,676
You can order them
online and pay for them


422
00:19:37,706 --> 00:19:39,186
and have them shipped
to your door.


423
00:19:40,426 --> 00:19:45,076
But unfortunately business
has been a little rough.


424
00:19:47,996 --> 00:19:52,616
She's getting a lot of traffic
to the website, but not a lot


425
00:19:52,616 --> 00:19:54,526
of actual orders go through.


426
00:19:55,016 --> 00:19:57,456
So let's take a look
at the website and see


427
00:19:57,456 --> 00:19:58,716
if we can figure out why.


428
00:20:02,236 --> 00:20:03,916
So this is our website.


429
00:20:04,266 --> 00:20:07,996
And let's say I want to
buy this lovely scarf here.


430
00:20:09,156 --> 00:20:13,436
Well first I have to
add it to my cart.


431
00:20:15,696 --> 00:20:17,076
Then I have to check out.


432
00:20:18,956 --> 00:20:20,906
Then I'm at the Checkout page,


433
00:20:20,906 --> 00:20:23,306
and I have to enter
my shipping address.


434
00:20:23,796 --> 00:20:27,446
And then I have to go
and get my credit card


435
00:20:27,446 --> 00:20:30,386
and enter the credit card
number and billing address.


436
00:20:31,836 --> 00:20:37,096
And then I can place my order,
and my scarf will be on its way.


437
00:20:38,496 --> 00:20:41,516
So let's see how we can
use the Apple Pay API


438
00:20:41,676 --> 00:20:45,156
to make this process
simpler and more streamlined.


439
00:20:46,306 --> 00:20:50,296
For example, what if we could
take this Add To Cart button


440
00:20:50,466 --> 00:20:54,586
and supplement it with
an Apple Pay button


441
00:20:54,806 --> 00:20:59,926
so that you can place orders
right on the main product page?


442
00:21:00,166 --> 00:21:03,606
Now we only want to display
this button if we know


443
00:21:03,606 --> 00:21:06,056
that the user can actually
make payments with Apple Pay.


444
00:21:06,526 --> 00:21:08,606
So in order to do that,


445
00:21:08,716 --> 00:21:12,596
we can use the function
ApplePaySession.canMakePayments.


446
00:21:13,516 --> 00:21:15,386
This is a pretty
simple function to use.


447
00:21:15,576 --> 00:21:17,136
This is how it would
look like in code.


448
00:21:17,676 --> 00:21:21,026
Note here that I am
checking for the existence


449
00:21:21,026 --> 00:21:25,146
of the window.ApplePaySession
object before I try to use it.


450
00:21:25,146 --> 00:21:26,796
So I am not checking


451
00:21:26,796 --> 00:21:30,106
for a specific version
of WebKit or Safari.


452
00:21:30,106 --> 00:21:32,566
I am just checking for the
existence of the object.


453
00:21:33,466 --> 00:21:35,316
And if it exists, I call it --


454
00:21:35,316 --> 00:21:38,356
it returns a boolean and
I check the return value.


455
00:21:38,776 --> 00:21:42,396
If it returns true, I call this
function showApplePayButtons.


456
00:21:43,066 --> 00:21:44,206
And that will show the button.


457
00:21:45,396 --> 00:21:47,706
It's important to note, though,


458
00:21:47,706 --> 00:21:50,986
that this function only tells
you whether Apple Pay is


459
00:21:50,986 --> 00:21:52,466
supported by the device.


460
00:21:53,026 --> 00:21:55,856
So if you are on an
iPhone or an iPad,


461
00:21:56,076 --> 00:21:58,276
it'll tell you whether
it has a secure element.


462
00:21:58,866 --> 00:22:00,206
And if you are on a Mac,


463
00:22:00,356 --> 00:22:03,666
it'll tell you whether there
is an iPhone or Apple Watch


464
00:22:04,026 --> 00:22:05,436
that can authorize the payment.


465
00:22:06,166 --> 00:22:09,746
It does not tell you whether
the user has a card added.


466
00:22:10,476 --> 00:22:12,126
So in order to check for that,


467
00:22:12,696 --> 00:22:16,486
we can use the function
ApplePaySession.canMakePayments


468
00:22:16,486 --> 00:22:17,446
WithActiveCard.


469
00:22:19,016 --> 00:22:22,536
You pass this function,
your merchant identifier.


470
00:22:23,096 --> 00:22:27,826
And it actually goes out to the
Apple Pay servers and validates


471
00:22:27,856 --> 00:22:30,146
that the merchant
identifier is correct


472
00:22:30,516 --> 00:22:33,816
and that it's properly
associated with the domain


473
00:22:33,816 --> 00:22:35,206
where you are making
the call from.


474
00:22:36,496 --> 00:22:38,436
Because of this,
it is asynchronous


475
00:22:38,466 --> 00:22:40,616
and returns a JavaScript
promise.


476
00:22:41,666 --> 00:22:44,566
Now if you don't know what
a JavaScript promise is,


477
00:22:44,566 --> 00:22:47,276
you can just think of
it as a more robust way


478
00:22:47,276 --> 00:22:49,906
of doing callback-based
programming.


479
00:22:51,016 --> 00:22:54,696
There are also some
restrictions as to


480
00:22:54,696 --> 00:22:56,176
when you can use this function.


481
00:22:56,276 --> 00:22:58,186
You can use it if
you want to default


482
00:22:58,186 --> 00:23:01,756
to Apple Pay during your
checkout flow or if you want


483
00:23:01,826 --> 00:23:04,346
to add an Apple Pay button
to your product page.


484
00:23:04,736 --> 00:23:07,296
Now in our case we want
to add an Apple Pay button


485
00:23:07,296 --> 00:23:10,056
to our main product page,
so we can use this function.


486
00:23:10,366 --> 00:23:13,816
Otherwise we would have used
ApplePaySession.canMakePayments.


487
00:23:14,766 --> 00:23:17,506
But here is how we
use the function.


488
00:23:18,146 --> 00:23:20,096
Again, I am checking
for the existence


489
00:23:20,136 --> 00:23:21,706
of the Apple Pay session object.


490
00:23:22,816 --> 00:23:25,446
Then I call canMakePayments
WithActiveCard.


491
00:23:25,786 --> 00:23:27,646
I tap in my merchant identifier.


492
00:23:28,246 --> 00:23:32,406
And then I use this
promise.then function so that


493
00:23:32,546 --> 00:23:35,536
when the promise is resolved,
in this case it's resolved


494
00:23:35,536 --> 00:23:37,176
to a boolean that's
true or false,


495
00:23:37,746 --> 00:23:40,616
the function I specified
inside will be called.


496
00:23:40,926 --> 00:23:44,466
And if canMakePayments is true,
I call showApplePayButton.


497
00:23:44,466 --> 00:23:49,216
So now we've got our
nice-looking buttons


498
00:23:49,216 --> 00:23:51,216
for every single
product on the page.


499
00:23:51,726 --> 00:23:54,296
And the next step is to
present the payment sheet


500
00:23:54,666 --> 00:23:56,116
when the user clicks
on the button.


501
00:23:56,686 --> 00:23:59,266
So in order to do that,


502
00:23:59,696 --> 00:24:01,686
we'll create a new
ApplePaySession


503
00:24:01,686 --> 00:24:02,796
JavaScript object.


504
00:24:03,206 --> 00:24:07,286
The ApplePaySession constructor
takes two parameters.


505
00:24:07,746 --> 00:24:10,296
One is an API version number.


506
00:24:10,996 --> 00:24:12,386
This is something
that we've added


507
00:24:12,386 --> 00:24:15,016
so that we can extend
the ApplePaySession API


508
00:24:15,166 --> 00:24:17,526
in a backwards-compatible way


509
00:24:17,856 --> 00:24:19,576
without breaking
existing clients.


510
00:24:20,426 --> 00:24:25,896
The current API version number
is 1 so just always has 1.


511
00:24:27,636 --> 00:24:31,326
The second parameter you pass
in is the payment request.


512
00:24:31,906 --> 00:24:34,076
If you are familiar
with the PassKit API,


513
00:24:34,076 --> 00:24:36,136
this is the JavaScript
equivalent


514
00:24:36,136 --> 00:24:37,746
of a PKPaymentRequest.


515
00:24:38,486 --> 00:24:41,266
So it then takes all the
necessary information needed


516
00:24:41,266 --> 00:24:44,976
to display the sheet, things
like currency and country


517
00:24:44,976 --> 00:24:48,686
where the payment will be
processed, the total amount,


518
00:24:48,876 --> 00:24:54,096
and optional list of line items,
as well as shipping information


519
00:24:54,096 --> 00:24:55,086
that might be required.


520
00:24:55,896 --> 00:24:59,326
And then when you get back your
new ApplePaySession object,


521
00:24:59,586 --> 00:25:01,976
you simply call Begin and
that'll present the sheet.


522
00:25:02,046 --> 00:25:06,476
This is what it looks
like in JavaScript code.


523
00:25:06,906 --> 00:25:10,076
So first we declare our
paymentRequest object.


524
00:25:10,756 --> 00:25:13,836
We specify the currencyCode
and countryCode.


525
00:25:14,976 --> 00:25:17,796
And here I specified
the total amount


526
00:25:18,516 --> 00:25:21,926
and the supported
card networks as well


527
00:25:21,926 --> 00:25:23,486
as the merchant capabilities.


528
00:25:24,056 --> 00:25:28,926
And lastly, I specified that
I need the full postal address


529
00:25:29,176 --> 00:25:30,766
for shipping purposes.


530
00:25:31,316 --> 00:25:35,106
And then I simply create
my new ApplePaySession.


531
00:25:35,286 --> 00:25:37,446
I pass in the merchant
number, which is 1,


532
00:25:37,766 --> 00:25:39,086
and the payment request.


533
00:25:39,626 --> 00:25:45,486
And I call sessions up again
on the returned object.


534
00:25:45,636 --> 00:25:49,726
Now with any payment API,
it's really important


535
00:25:49,726 --> 00:25:52,116
that we get all the
details right.


536
00:25:52,436 --> 00:26:00,086
And because of this, before we
present the sheet we perform a


537
00:26:00,086 --> 00:26:01,926
series of validation steps.


538
00:26:02,796 --> 00:26:07,696
And if any of these
steps fail, we'll stop


539
00:26:07,696 --> 00:26:09,386
and just throw a
JavaScript exception.


540
00:26:09,876 --> 00:26:14,446
And because of this, creating
an Apple Pay session can throw a


541
00:26:14,446 --> 00:26:15,586
JavaScript exception.


542
00:26:16,056 --> 00:26:19,176
For example, if you call
in from an insecure page,


543
00:26:19,586 --> 00:26:21,306
a page that it's not served


544
00:26:21,306 --> 00:26:26,056
over HTTPS using the best
practice encryption protocols.


545
00:26:27,116 --> 00:26:31,746
In fact, every single Apple
Pay session API will throw an


546
00:26:31,746 --> 00:26:34,906
exception if you try to call
it from an insecure web page.


547
00:26:37,156 --> 00:26:40,306
Creating an Apple Pay session
can also throw an exception


548
00:26:40,306 --> 00:26:42,696
if you pass in an
invalid payment request.


549
00:26:43,156 --> 00:26:45,776
For example, if you
didn't specify the list


550
00:26:45,776 --> 00:26:49,976
of supported networks, or
if you have a total amount


551
00:26:49,976 --> 00:26:51,366
that is negative, for example,


552
00:26:51,796 --> 00:26:54,396
or if you spell the
property wrong


553
00:26:54,396 --> 00:26:56,326
so that it's something
we don't recognize,


554
00:26:56,696 --> 00:26:57,786
that will throw an exception.


555
00:27:00,236 --> 00:27:04,956
In addition, calling Begin can
throw an exception if you call


556
00:27:04,956 --> 00:27:07,106
in -- try to call
it in from outside


557
00:27:07,106 --> 00:27:09,496
of an onclick handler,
for example.


558
00:27:10,006 --> 00:27:13,736
We do not allow displaying
the sheet unless the user has


559
00:27:13,736 --> 00:27:15,366
explicitly asked for it


560
00:27:15,366 --> 00:27:19,026
to be presented using
a click or a tap.


561
00:27:19,426 --> 00:27:23,056
Or if there is already a sheet
up, and we try to call Begin,


562
00:27:23,366 --> 00:27:24,906
we'll throw a JavaScript
exception


563
00:27:25,616 --> 00:27:28,786
because we only allow showing
a single sheet at a time.


564
00:27:29,766 --> 00:27:33,346
And if you get one
of these errors,


565
00:27:33,826 --> 00:27:37,486
you can use the Web
Inspector's Error Console


566
00:27:37,796 --> 00:27:40,616
to get a more detailed look
at what could be wrong.


567
00:27:42,816 --> 00:27:50,536
But if everything is good and
all the steps are correct,


568
00:27:50,906 --> 00:27:52,496
we'll display the sheet.


569
00:27:53,646 --> 00:27:57,706
But notice that you can't
actually confirm the payment


570
00:27:57,706 --> 00:28:00,456
yet; we have this
loading spinner going.


571
00:28:00,896 --> 00:28:02,096
And that's because we haven't


572
00:28:02,096 --> 00:28:04,096
yet handled the merchant
validation


573
00:28:04,126 --> 00:28:05,346
that Nick mentioned earlier.


574
00:28:06,046 --> 00:28:09,876
So shortly after the
sheet is presented,


575
00:28:10,136 --> 00:28:12,966
we will send a validateherchant
DOM event


576
00:28:13,096 --> 00:28:14,656
to the ApplePaySession object.


577
00:28:15,536 --> 00:28:18,906
This DOM event has a
validationURL property,


578
00:28:19,366 --> 00:28:22,576
and this is the URL that
you pass to your server


579
00:28:22,576 --> 00:28:26,136
and have it load to create
the merchant session.


580
00:28:27,006 --> 00:28:29,916
And then when you get back
your merchantsession object


581
00:28:30,206 --> 00:28:34,106
from your server, you simply
call completeMerchantValidation,


582
00:28:34,406 --> 00:28:36,506
pass in the session,
and you're good to go.


583
00:28:37,706 --> 00:28:40,636
Here is what a validatemerchant
event handler looks like.


584
00:28:42,456 --> 00:28:45,136
So here I call this
performvalidation function


585
00:28:45,136 --> 00:28:45,906
that I have written.


586
00:28:46,256 --> 00:28:49,416
It returns a promise,
and the promise resolves


587
00:28:49,416 --> 00:28:51,216
to the merchant session.


588
00:28:51,756 --> 00:28:53,356
So when the promise is resolved,


589
00:28:53,716 --> 00:28:56,036
I simply call
completemerchantvalidation,


590
00:28:56,336 --> 00:28:57,876
I pass in the merchant session,


591
00:28:58,036 --> 00:28:59,626
And that's how you do
merchant validation.


592
00:29:00,556 --> 00:29:04,656
So now, when merchant
validation is done,


593
00:29:04,786 --> 00:29:06,846
the user can authorize
the payment


594
00:29:06,846 --> 00:29:09,176
on their phone or
their Apple Watch.


595
00:29:09,566 --> 00:29:12,456
And when the payment
is authorized,


596
00:29:12,676 --> 00:29:15,256
we'll send a paymentauthorized
DOM event


597
00:29:15,506 --> 00:29:16,986
to the Apple Pay session.


598
00:29:18,606 --> 00:29:20,986
This DOM event contains
a payment property


599
00:29:21,446 --> 00:29:24,516
that has all the necessary
information about the payment.


600
00:29:24,996 --> 00:29:27,836
So it's got things like
the full shipping address,


601
00:29:28,316 --> 00:29:31,756
information about the
payment network that was used


602
00:29:31,756 --> 00:29:35,846
to make the payment; and it's
got the encrypted payment token


603
00:29:35,846 --> 00:29:38,586
itself that you send to
your payment processor.


604
00:29:40,036 --> 00:29:44,706
And when you have sent that and
the payment has been processed,


605
00:29:45,406 --> 00:29:48,276
and you get back a reply,
you call completePayment


606
00:29:48,436 --> 00:29:51,926
and that will dismiss
the sheet, like this.


607
00:29:52,956 --> 00:29:56,046
So here we have a
paymentauthorized event handler.


608
00:29:57,146 --> 00:29:58,826
I call sendPaymentToken.


609
00:29:58,826 --> 00:29:59,976
I pass in the token.


610
00:30:00,726 --> 00:30:04,346
And this returns a promise
that resolves through boolean


611
00:30:04,916 --> 00:30:06,776
that is either true
or false based


612
00:30:06,776 --> 00:30:10,736
on whether the payment was
processed successfully or not.


613
00:30:11,306 --> 00:30:13,746
So if it's true, I set my status


614
00:30:13,796 --> 00:30:16,276
to ApplePaySession.STATUS
SUCCESS.


615
00:30:17,226 --> 00:30:20,106
If it's false, for example, if
the payment didn't go through,


616
00:30:20,586 --> 00:30:23,646
I set my status to
ApplePaySession.STATUS FAILURE.


617
00:30:25,026 --> 00:30:27,076
Then I call completePayment.


618
00:30:27,076 --> 00:30:30,106
I pass in the status, which
will dismiss the sheet.


619
00:30:30,456 --> 00:30:32,786
And then I call this
showConfirmation function,


620
00:30:32,786 --> 00:30:36,436
which will show a nice little
order confirmation pop-up.


621
00:30:36,436 --> 00:30:38,816
And when you call
completePayment and pass


622
00:30:38,816 --> 00:30:41,806
in Success, you get
this nice check mark


623
00:30:42,016 --> 00:30:44,166
and the sheet will be dismissed.


624
00:30:45,066 --> 00:30:49,336
OK. So now let's take a
look at a demo and see how


625
00:30:49,336 --> 00:30:49,976
to do all of these things.


626
00:30:57,096 --> 00:30:59,216
Here we go.


627
00:30:59,446 --> 00:31:02,646
So first of all,
this is the website.


628
00:31:04,546 --> 00:31:07,506
And now let's take a
look at the source code.


629
00:31:08,046 --> 00:31:12,066
But before we start adding
JavaScript, I'd like to point


630
00:31:12,066 --> 00:31:13,246
out a couple of things.


631
00:31:13,686 --> 00:31:16,726
Here I have added
these touch icons.


632
00:31:17,206 --> 00:31:20,756
These are used in the Safari
Favorites view, for example;


633
00:31:20,756 --> 00:31:25,066
but they are also used in the
Apple Pay authorization sheet,


634
00:31:25,116 --> 00:31:26,096
which we will see later.


635
00:31:27,636 --> 00:31:30,276
And here I have listed
all the products,


636
00:31:30,316 --> 00:31:33,636
and I have actually gone ahead
and added the Apple Pay buttons.


637
00:31:33,636 --> 00:31:36,486
I am just keeping them
invisible with CSS.


638
00:31:36,486 --> 00:31:40,576
So let's take a look at that.


639
00:31:40,686 --> 00:31:42,866
Here is my CSS, and
this is the declaration


640
00:31:42,866 --> 00:31:44,046
for the Apple Pay button.


641
00:31:44,476 --> 00:31:47,416
So I set this visibility
to hidden here.


642
00:31:47,886 --> 00:31:50,066
And for the actual image itself,


643
00:31:50,066 --> 00:31:52,556
I am using this
WebKit-named-image feature


644
00:31:52,846 --> 00:31:56,166
so we can grab the Apple Pay
logo directly from the system


645
00:31:56,166 --> 00:31:58,216
so you don't have to
host it on your website.


646
00:31:59,466 --> 00:32:01,816
OK. So the first thing we want


647
00:32:01,816 --> 00:32:05,716
to do now is add the code
that'll display the buttons


648
00:32:05,766 --> 00:32:07,806
if Apple Pay is enabled.


649
00:32:08,686 --> 00:32:11,806
So I have already started
writing some code here.


650
00:32:11,806 --> 00:32:15,246
I have created an EventListener
for the DOMContentLoaded event.


651
00:32:15,726 --> 00:32:16,906
This event is dispatched


652
00:32:16,906 --> 00:32:18,896
when the main document
is finished loading


653
00:32:18,896 --> 00:32:21,206
but before any remaining images


654
00:32:21,206 --> 00:32:22,976
from other resources
have been loaded.


655
00:32:22,976 --> 00:32:24,356
So it's a good place to do that.


656
00:32:24,896 --> 00:32:27,186
So let me add the
code to do that.


657
00:32:27,906 --> 00:32:29,686
Again, I am checking
for the existence


658
00:32:29,686 --> 00:32:31,536
of the ApplePaySession object.


659
00:32:31,696 --> 00:32:33,896
Then I call
canMakePaymentsWithActiveCard.


660
00:32:34,526 --> 00:32:37,986
And inside my promise function,
I check the return value,


661
00:32:37,986 --> 00:32:40,396
and if it's true I call
showApplePayButton.


662
00:32:41,026 --> 00:32:43,656
So I -- let me save
and go back here.


663
00:32:44,066 --> 00:32:44,806
And we load.


664
00:32:44,846 --> 00:32:46,836
And now we got our
Apple Pay buttons.


665
00:32:47,766 --> 00:32:50,946
So the next step is
to show the sheets


666
00:32:50,946 --> 00:32:52,616
when a user clicks on a button.


667
00:32:52,616 --> 00:32:55,746
So I have written this
applePayButtonClicked function


668
00:32:56,226 --> 00:32:59,856
that is invoked whenever
the user clicks on a button.


669
00:33:00,526 --> 00:33:04,766
So here is where we want to add
our code to present the sheet.


670
00:33:05,416 --> 00:33:08,716
So again I have declared my
paymentRequest object here.


671
00:33:08,716 --> 00:33:12,156
I have hard-coded the amounts
here and, since this is a demo,


672
00:33:12,156 --> 00:33:16,206
but in real life we would
get this from somewhere else.


673
00:33:16,466 --> 00:33:19,376
And I then create my new
ApplePaySession object,


674
00:33:19,376 --> 00:33:20,456
and I call Begin.


675
00:33:20,576 --> 00:33:24,616
So let me save and reload
and present the sheet.


676
00:33:28,296 --> 00:33:31,306
OK. So it looks like
the sheet did not show.


677
00:33:31,306 --> 00:33:35,046
So let me open the Error console
and try to figure out why.


678
00:33:37,366 --> 00:33:38,596
OK, so it says that


679
00:33:38,596 --> 00:33:41,596
"supportednetwork" is not
a valid property name.


680
00:33:41,646 --> 00:33:44,236
And it looks like I
misspelled "supported" here.


681
00:33:44,696 --> 00:33:50,906
So let me just go back
and fix that and reload.


682
00:33:52,576 --> 00:33:54,026
And now we have the sheet.


683
00:33:54,646 --> 00:33:57,276
But I can still not
confirm the payment


684
00:33:57,356 --> 00:33:59,566
because I haven't handled
the merchant validation.


685
00:33:59,956 --> 00:34:03,536
So let's go ahead and do that.


686
00:34:03,736 --> 00:34:06,586
So I want to add my
validateMerchant event handler.


687
00:34:06,586 --> 00:34:09,606
And I'll do it here after
we have created the session


688
00:34:09,846 --> 00:34:11,315
but before we call Begin.


689
00:34:11,886 --> 00:34:14,166
And again I call
performValidation.


690
00:34:14,596 --> 00:34:18,116
And when the promise that this
function returns is resolved,


691
00:34:18,536 --> 00:34:20,356
I call
completeMerchantValidation.


692
00:34:20,396 --> 00:34:21,956
I pass in my merchant session.


693
00:34:22,436 --> 00:34:28,356
And then I should be able
to confirm the payment.


694
00:34:28,766 --> 00:34:29,896
And the last thing we need


695
00:34:29,896 --> 00:34:33,206
to do now is add our
payment authorization code.


696
00:34:34,556 --> 00:34:40,356
And this will send the
payment token to the server


697
00:34:40,856 --> 00:34:42,866
and confirm the payment.


698
00:34:42,866 --> 00:34:45,795
And if we are successful,
I set my status to SUCCESS;


699
00:34:46,286 --> 00:34:47,735
otherwise I set it to FAILURE.


700
00:34:48,126 --> 00:34:51,286
And then I call completePayment
and showConfirmation.


701
00:34:51,636 --> 00:34:56,636
So now I want to
bring up QuickTime


702
00:34:56,636 --> 00:34:59,976
so we can actually see what this
looks like on the phone as well.


703
00:35:00,166 --> 00:35:04,066
So let me reload, and I hit Pay.


704
00:35:05,166 --> 00:35:06,476
And now I can confirm.


705
00:35:06,476 --> 00:35:09,546
And as you can see, I get
this little site icon.


706
00:35:09,546 --> 00:35:12,206
That's because I added
those link icon attributes.


707
00:35:12,876 --> 00:35:16,146
And now I can pay
and we're done.


708
00:35:16,636 --> 00:35:17,976
And the scarf is on its way.


709
00:35:21,516 --> 00:35:27,906
[ Applause ]


710
00:35:28,406 --> 00:35:32,016
So that's how easy it is to
add Apple Pay to a website.


711
00:35:32,666 --> 00:35:35,816
And I think that
with these changes,


712
00:35:36,386 --> 00:35:39,546
Canine Clothing sales are really
going to be through the woof.


713
00:35:40,086 --> 00:35:40,946
Back to you, Nick.


714
00:35:41,516 --> 00:35:46,846
[ Applause ]


715
00:35:47,346 --> 00:35:49,956
>> You know all this -- I
think whoever on WebKit came


716
00:35:49,956 --> 00:35:52,136
up with all those dog
puns should be thrown


717
00:35:52,136 --> 00:35:53,136
in the doghouse.


718
00:35:54,286 --> 00:35:56,126
Aw, come on.


719
00:35:56,126 --> 00:35:56,806
Throw me a bone.


720
00:35:59,306 --> 00:36:00,776
I'm wasted in software
engineering.


721
00:36:01,306 --> 00:36:01,936
All right.


722
00:36:02,036 --> 00:36:08,476
So we have seen how to build
our sites to enable Apple Pay.


723
00:36:08,716 --> 00:36:11,176
Let's talk about something
that's probably very important


724
00:36:11,176 --> 00:36:11,476
to you.


725
00:36:11,736 --> 00:36:13,256
That's how you'll
actually get paid,


726
00:36:13,386 --> 00:36:16,476
how to get some money
from Apple Pay.


727
00:36:16,916 --> 00:36:21,886
So Anders covered these steps up
to receiving the payment data.


728
00:36:22,426 --> 00:36:24,246
What happens next?


729
00:36:25,856 --> 00:36:29,346
Well you have two options,
really, with the payment token.


730
00:36:29,896 --> 00:36:35,086
The first option is to decrypt
the payment token yourself


731
00:36:35,086 --> 00:36:36,876
on your own servers.


732
00:36:38,236 --> 00:36:40,606
That's a good option if you
are already using Apple Pay


733
00:36:40,606 --> 00:36:42,836
or you have a very large
eCommerce back end.


734
00:36:42,896 --> 00:36:45,186
You're familiar with the
cryptography involved.


735
00:36:45,186 --> 00:36:46,846
It is documented, though,
on our developer site.


736
00:36:47,576 --> 00:36:50,306
But another option
that's a little easier is


737
00:36:50,306 --> 00:36:52,406
to just pass this
encrypted payment data


738
00:36:52,706 --> 00:36:56,486
to your payment provider, and
they can decrypt it for you


739
00:36:56,486 --> 00:36:58,866
on your behalf if you
provide them with the keys.


740
00:37:00,456 --> 00:37:02,216
This is a really easy option,


741
00:37:02,216 --> 00:37:05,246
and many payment
processors today offer SDKs


742
00:37:05,246 --> 00:37:06,856
to do this in-app.


743
00:37:06,856 --> 00:37:07,986
We are highly confident


744
00:37:07,986 --> 00:37:10,236
that these payment processors
will be offering similar


745
00:37:10,236 --> 00:37:12,316
JavaScript-based SDKs;


746
00:37:12,316 --> 00:37:14,636
these integrate directly
into your websites.


747
00:37:15,456 --> 00:37:18,476
In fact, in the U.S. and Europe


748
00:37:18,476 --> 00:37:22,036
over 40 payment processors
support Apple Pay today --


749
00:37:22,086 --> 00:37:23,886
too many for me to
put on a site.


750
00:37:24,276 --> 00:37:26,736
But there's a full list
on developer.apple.com.


751
00:37:28,176 --> 00:37:31,026
And as I said, many of these
providers offer SDKs today


752
00:37:31,026 --> 00:37:33,506
for in-app; and they'll
be offering SDKs


753
00:37:33,506 --> 00:37:34,246
for the web as well.


754
00:37:35,516 --> 00:37:39,116
I also want to highlight
some new payment processors.


755
00:37:39,326 --> 00:37:41,886
As you may know, Apple
Pay launched in China.


756
00:37:41,886 --> 00:37:44,366
And of course this feature
works in China as well


757
00:37:44,366 --> 00:37:45,356
as in the U.S. and Europe.


758
00:37:45,676 --> 00:37:47,716
And we have four payment
processors in China


759
00:37:47,956 --> 00:37:49,496
that support Apple Pay.


760
00:37:49,776 --> 00:37:53,856
They are China UMS, LianLianPay,
PayEase, and YeePay.


761
00:37:54,126 --> 00:37:56,306
So if you are looking to
distribute an app or a site


762
00:37:56,306 --> 00:37:58,716
in Asia, you have got great
support there as well.


763
00:38:00,666 --> 00:38:04,736
Now one thing I mentioned at the
start is eCommerce platforms.


764
00:38:05,416 --> 00:38:08,316
Many sites don't build
their own eCommerce systems.


765
00:38:08,316 --> 00:38:11,866
They use the platforms provided
by an eCommerce provider.


766
00:38:12,366 --> 00:38:13,196
And we are partnering


767
00:38:13,196 --> 00:38:16,016
with multiple eCommerce
platforms today.


768
00:38:16,426 --> 00:38:18,466
We are partnering with
three major platforms.


769
00:38:18,786 --> 00:38:20,626
They are Demandware,
IBM, and Shopify.


770
00:38:20,626 --> 00:38:25,036
And if you are using any
of these three platforms,


771
00:38:25,036 --> 00:38:28,016
you will be able to use
Apple Pay, and in many cases,


772
00:38:28,016 --> 00:38:30,386
you will be able to use
Apple Pay without even having


773
00:38:30,386 --> 00:38:31,576
to have a developer account.


774
00:38:32,456 --> 00:38:34,946
These platforms can
make that easy for you.


775
00:38:34,946 --> 00:38:36,846
They can handle all
of this process


776
00:38:36,846 --> 00:38:38,976
with their deep Apple
Pay integration.


777
00:38:43,266 --> 00:38:45,166
Now you are probably
pretty desperate


778
00:38:45,166 --> 00:38:46,066
to go off and try this.


779
00:38:46,066 --> 00:38:46,666
I hope you are.


780
00:38:47,606 --> 00:38:50,066
I want to talk a
bit about testing.


781
00:38:51,386 --> 00:38:53,736
So testing your sites:


782
00:38:54,046 --> 00:38:55,816
We are introducing a
new testing environment


783
00:38:55,816 --> 00:38:58,306
for Apple Pay called
the Apple Pay Sandbox.


784
00:38:58,826 --> 00:39:00,856
It's a new way to test.


785
00:39:00,856 --> 00:39:03,886
And initially Apple Pay for
the web will be available


786
00:39:03,936 --> 00:39:05,046
within this sandbox.


787
00:39:05,746 --> 00:39:07,446
Now if you'd like
more information,


788
00:39:07,536 --> 00:39:09,366
we don't quite have enough
time in this session.


789
00:39:09,616 --> 00:39:12,026
But you can check the
session right after this one;


790
00:39:12,026 --> 00:39:13,726
we are going to be
talking about the Sandbox.


791
00:39:13,876 --> 00:39:16,476
Or if you go to our site
at developer.apple.com,


792
00:39:16,726 --> 00:39:18,606
we have some information
about how


793
00:39:18,606 --> 00:39:19,836
to use the Apple Pay Sandbox.


794
00:39:20,026 --> 00:39:21,986
But for the initial seeds,
that's how you'll be able


795
00:39:21,986 --> 00:39:23,296
to test Apple Pay on the web.


796
00:39:23,586 --> 00:39:25,626
Then we'll roll it out into
our production environments


797
00:39:25,826 --> 00:39:28,946
as we near the release of
iOS X and Mac OS Sierra.


798
00:39:36,856 --> 00:39:39,836
Now also, when testing
and developing your sites,


799
00:39:39,836 --> 00:39:43,456
please give us some feedback,
[inaudible] some bugs.


800
00:39:43,736 --> 00:39:46,926
We really want to hear about
all the issues you are having


801
00:39:46,926 --> 00:39:48,346
and all the great
things you're seeing.


802
00:39:48,346 --> 00:39:49,416
If you just have compliments,


803
00:39:49,466 --> 00:39:51,276
I'd love to receive
those as well.


804
00:39:52,416 --> 00:39:59,116
OK. Let's talk about the final
piece: Designing for Apple Pay.


805
00:39:59,556 --> 00:40:02,976
How to build a compelling
experience for your websites.


806
00:40:03,176 --> 00:40:06,716
And a lot of these tips are
applicable to apps as well.


807
00:40:07,276 --> 00:40:10,826
At the start of this
session I talked


808
00:40:10,826 --> 00:40:15,456
about how Apple Pay has three
main principles: They're easy,


809
00:40:15,646 --> 00:40:18,466
secure, and private way to pay.


810
00:40:19,006 --> 00:40:21,846
And your designs
should reflect that.


811
00:40:22,476 --> 00:40:23,686
They shouldn't make
it complicated.


812
00:40:23,726 --> 00:40:26,276
They shouldn't make it
hard to use Apple Pay.


813
00:40:26,816 --> 00:40:29,576
There are three main
phases of Apple Pay as well.


814
00:40:30,096 --> 00:40:31,386
There's pre-payment,


815
00:40:32,016 --> 00:40:35,476
that's before you have seen the
Apple Pay sheet, the experience


816
00:40:35,476 --> 00:40:38,066
of using Apple Pay before
the sheet has come onscreen.


817
00:40:39,316 --> 00:40:42,266
There's payment itself,
actually taking payment


818
00:40:42,356 --> 00:40:44,776
when the sheet's
looking towards the user.


819
00:40:45,226 --> 00:40:46,136
You can customize that.


820
00:40:46,136 --> 00:40:47,196
How should you customize it?


821
00:40:47,376 --> 00:40:47,996
We'll find out.


822
00:40:49,286 --> 00:40:50,726
There's also post-payments.


823
00:40:51,686 --> 00:40:54,566
That's the experience after
the sheet has been dismissed.


824
00:40:55,496 --> 00:40:57,786
So let's run through
these three phases


825
00:40:57,786 --> 00:41:01,446
and discuss how your
designs can work


826
00:41:01,446 --> 00:41:04,146
with Apple Pay for each phase.


827
00:41:04,956 --> 00:41:07,656
Prepayment starts with
the Apple Pay button.


828
00:41:08,156 --> 00:41:11,056
And the Apple Pay button is
available both in Cocoa Touch,


829
00:41:11,056 --> 00:41:15,606
and, as I've just shown you,
we have some artwork in WebKit


830
00:41:15,606 --> 00:41:16,726
that you can use as well.


831
00:41:17,116 --> 00:41:19,156
It's available in a
variety of styles.


832
00:41:19,236 --> 00:41:20,816
Here are a couple of them.


833
00:41:20,816 --> 00:41:23,346
And Anders showed you the CSS,


834
00:41:23,346 --> 00:41:28,536
but just to reiterate we have
a WebKit-image-named property


835
00:41:28,536 --> 00:41:29,276
that you can use.


836
00:41:29,746 --> 00:41:32,446
You can get an Apple
Pay logo, so you can use


837
00:41:32,446 --> 00:41:34,606
that for your buttons
on the web.


838
00:41:35,516 --> 00:41:37,806
There are some do's and
there are some don'ts


839
00:41:37,846 --> 00:41:38,986
when you are using
the Apple Pay button.


840
00:41:39,636 --> 00:41:41,856
Do use the built-in assets.


841
00:41:42,626 --> 00:41:45,196
Sometimes, you never know,
we might change the logo.


842
00:41:45,196 --> 00:41:46,746
You want to make sure
you're up to date.


843
00:41:47,616 --> 00:41:50,886
Also, place wherever a user
might want to purchase.


844
00:41:50,886 --> 00:41:51,756
Don't hide it away.


845
00:41:51,756 --> 00:41:54,106
Don't make it difficult
for the user to pay


846
00:41:54,106 --> 00:41:56,336
with what is a very
easy payment method.


847
00:41:57,086 --> 00:41:58,726
There is also some don'ts.


848
00:41:59,446 --> 00:42:03,586
Don't modify the button, or
don't change its behavior.


849
00:42:04,286 --> 00:42:06,666
It's very important
that if a user taps


850
00:42:06,666 --> 00:42:08,646
on an Apple Pay button,
they see an Apple Pay sheet.


851
00:42:08,646 --> 00:42:10,496
We want that expectation
to be there.


852
00:42:10,996 --> 00:42:12,896
And also don't suppress
the button.


853
00:42:12,896 --> 00:42:16,056
As part of the Apple Pay
guidelines, you are not able


854
00:42:16,056 --> 00:42:17,536
to suppress the button.


855
00:42:17,536 --> 00:42:20,606
It needs to be at the same level
as your other payment methods.


856
00:42:21,106 --> 00:42:25,306
Let's talk about where
you can place the button.


857
00:42:26,706 --> 00:42:28,876
Now Anders' demo showed you how


858
00:42:28,876 --> 00:42:31,436
to place the Apple Pay button
early on in your purchase flow.


859
00:42:32,556 --> 00:42:35,866
And placing it on product pages
can increase user engagement.


860
00:42:35,866 --> 00:42:38,686
We've seen some great data from
apps that have adopted Apple Pay


861
00:42:38,686 --> 00:42:41,226
to show they've seen
drastic conversion increases


862
00:42:41,226 --> 00:42:44,066
when they place the Apple Pay
button on their product page.


863
00:42:44,746 --> 00:42:46,306
Now obviously you
can also place it


864
00:42:46,306 --> 00:42:48,676
in regular checkout
and in carts.


865
00:42:49,376 --> 00:42:50,566
Let's look at a few examples.


866
00:42:50,566 --> 00:42:54,946
We gave the Apple Pay API to
some websites, and we asked them


867
00:42:54,946 --> 00:42:57,186
to come up with some designs


868
00:42:57,696 --> 00:42:59,376
and some experiences
that use Apple Pay.


869
00:43:00,736 --> 00:43:02,106
Here's one from StubHub.


870
00:43:03,636 --> 00:43:05,946
Now StubHub has decided to a Buy


871
00:43:05,946 --> 00:43:08,236
with Apple Pay button during
their checkout process.


872
00:43:08,236 --> 00:43:09,796
You select the number
of tickets you want,


873
00:43:09,796 --> 00:43:12,796
and then you just
buy with Apple Pay.


874
00:43:13,036 --> 00:43:14,746
You can also bring
that a step earlier.


875
00:43:14,746 --> 00:43:17,486
You can do what I call
an express checkout.


876
00:43:17,586 --> 00:43:19,326
This is from Warby Parker.


877
00:43:20,186 --> 00:43:21,926
This is after you have
selected a product.


878
00:43:22,736 --> 00:43:23,716
You see we have two options.


879
00:43:23,716 --> 00:43:26,576
We can add the product to our
cart and continue shopping,


880
00:43:27,126 --> 00:43:29,746
or you can just buy it there
and then with Apple Pay.


881
00:43:31,096 --> 00:43:33,566
Finally, you can place
the Apple Pay button


882
00:43:33,566 --> 00:43:34,946
on your actual product pages.


883
00:43:35,616 --> 00:43:37,396
Here's an example
from Lululemon.


884
00:43:37,786 --> 00:43:40,646
The Apple Pay button right
there on the product page.


885
00:43:40,766 --> 00:43:42,646
Let me show you that
on iPad as well.


886
00:43:42,646 --> 00:43:45,396
Here you can see there's
still an Add to Bag.


887
00:43:45,396 --> 00:43:48,806
So if I want to create my
cart as normal, I can do that.


888
00:43:49,106 --> 00:43:53,506
Or I can just buy
it there and then.


889
00:43:53,716 --> 00:43:55,956
Now one thing that
really enhances buying


890
00:43:55,956 --> 00:43:59,216
on the product pages is
enabling a guest checkout.


891
00:43:59,776 --> 00:44:03,166
Required registration is a
major source of user friction.


892
00:44:03,166 --> 00:44:05,776
I don't know about you, but I've
definitely not purchased things


893
00:44:05,986 --> 00:44:08,316
because the site I didn't
really know wanted me


894
00:44:08,316 --> 00:44:09,836
to create an account up front.


895
00:44:11,486 --> 00:44:14,146
And so Apple Pay can help
reduce these abandoned purchases


896
00:44:14,146 --> 00:44:17,086
by making guest checkout
flows really ease to use.


897
00:44:18,356 --> 00:44:20,876
Also, you can optionally
leverage the information you


898
00:44:20,876 --> 00:44:22,266
collect in the Apple Pay sheet


899
00:44:22,786 --> 00:44:25,296
to create accounts
post-purchase.


900
00:44:25,936 --> 00:44:28,676
I'll show you an example of that
in the post-payment section.


901
00:44:29,226 --> 00:44:33,566
Let's move on now to actual
payment, the Apple Pay sheet.


902
00:44:34,116 --> 00:44:37,946
Now the Apple Pay sheet
offers a flexible payment flow


903
00:44:37,946 --> 00:44:38,746
for merchants.


904
00:44:38,896 --> 00:44:40,256
It's highly customizable,


905
00:44:40,746 --> 00:44:44,826
but it also offers a
consistent experience for users.


906
00:44:45,546 --> 00:44:48,366
You can decide what
fields you want to show,


907
00:44:48,366 --> 00:44:50,956
but the user always
knows what to expect.


908
00:44:51,576 --> 00:44:54,866
Here is an example of
an Apple Pay sheet.


909
00:44:54,866 --> 00:44:56,676
I am using the Mac OS sheet.


910
00:44:57,236 --> 00:45:00,546
But the same fields
are available on iOS


911
00:45:00,546 --> 00:45:03,976
if you're making a web payment
in Safari, on iPhone, or iPad.


912
00:45:05,446 --> 00:45:08,606
The first field is where
you select your card.


913
00:45:08,606 --> 00:45:11,346
It's also optionally where you
can input your billing address,


914
00:45:11,386 --> 00:45:13,036
although billing
addresses aren't required


915
00:45:13,036 --> 00:45:14,296
to process an Apple Pay payment.


916
00:45:15,616 --> 00:45:17,606
The next field is shipping.


917
00:45:19,016 --> 00:45:21,666
This is where you request
information from your users.


918
00:45:22,156 --> 00:45:25,816
You can request billing,
shipping,


919
00:45:25,816 --> 00:45:27,806
and contact information
if you need it;


920
00:45:28,126 --> 00:45:31,646
and you can also specify
shipping methods or pickup.


921
00:45:32,256 --> 00:45:33,696
You can change the terminology.


922
00:45:33,696 --> 00:45:34,626
If you don't like it saying --


923
00:45:34,626 --> 00:45:37,286
to say "shipping," you can
say "delivery" or "pickup."


924
00:45:37,896 --> 00:45:39,446
It's good if you're
a ridesharing app


925
00:45:39,446 --> 00:45:41,036
or maybe a takeaway service.


926
00:45:44,276 --> 00:45:46,946
Now you can list
shipping costs as well.


927
00:45:47,396 --> 00:45:49,036
You can list them
in summary items,


928
00:45:49,236 --> 00:45:50,716
which we'll talk
about in a second.


929
00:45:51,086 --> 00:45:54,336
But when you're collecting
this information,


930
00:45:54,336 --> 00:45:56,666
make sure you have a
clear privacy policy.


931
00:45:56,946 --> 00:45:59,506
When you use Apple Pay within
an app, when you upload it


932
00:45:59,506 --> 00:46:00,686
to the App Store
you are required


933
00:46:00,686 --> 00:46:02,436
to provide a link
to a privacy policy.


934
00:46:02,876 --> 00:46:04,206
Now when you are
designing for the web,


935
00:46:04,586 --> 00:46:06,266
obviously there is
no way to do that.


936
00:46:06,266 --> 00:46:09,356
So instead we just ask that you
place a privacy policy somewhere


937
00:46:09,356 --> 00:46:12,106
on your site that clearly
describes what you are intending


938
00:46:12,106 --> 00:46:13,166
to do with this information.


939
00:46:13,576 --> 00:46:17,656
Now you can also
enable shipping methods


940
00:46:18,316 --> 00:46:20,276
that lets you select
things like delivery.


941
00:46:21,596 --> 00:46:24,796
And just like the shipping
address, it's customizable.


942
00:46:25,776 --> 00:46:27,566
Users can pick from
a list of methods.


943
00:46:27,656 --> 00:46:29,836
Now these methods can
be updated in response


944
00:46:29,836 --> 00:46:31,316
to address changes perhaps


945
00:46:31,316 --> 00:46:33,866
if you already offer express
shipping in New York City,


946
00:46:34,056 --> 00:46:36,226
you can easily reflect that.


947
00:46:36,636 --> 00:46:39,616
Methods could also be free if
you want to offer free shipping.


948
00:46:40,266 --> 00:46:41,526
And just like shipping
addresses,


949
00:46:41,706 --> 00:46:43,976
the naming can be
customized to suit your needs.


950
00:46:47,606 --> 00:46:49,826
Now although you
request address, e-mail,


951
00:46:49,826 --> 00:46:52,426
and phone number in
the same property,


952
00:46:52,846 --> 00:46:54,426
they are separate
fields on the sheet.


953
00:46:55,266 --> 00:46:56,786
So this field here,
the contact field,


954
00:46:56,786 --> 00:46:58,656
is where you enter
the information other


955
00:46:58,656 --> 00:46:59,546
than postal address.


956
00:46:59,906 --> 00:47:01,746
Now we support collecting
phone number.


957
00:47:02,296 --> 00:47:03,916
We support collecting
e-mail address.


958
00:47:04,156 --> 00:47:06,186
And if you are not
requesting a shipping address,


959
00:47:06,386 --> 00:47:08,536
we also allow you to
request the user's name.


960
00:47:08,826 --> 00:47:12,516
That's useful if maybe you
are a ridesharing app or site


961
00:47:12,516 --> 00:47:14,046
and you want to have
the name of the user


962
00:47:14,046 --> 00:47:15,826
but you don't need
their shipping address.


963
00:47:18,596 --> 00:47:21,936
Now is the most important field,
it's the summary items field.


964
00:47:22,896 --> 00:47:25,426
This highlights the amount
that is being paid to the user,


965
00:47:25,646 --> 00:47:27,096
sorry, that the user
is paying you.


966
00:47:28,246 --> 00:47:30,066
And you can use this
summary of items sheet


967
00:47:30,296 --> 00:47:33,036
to display a concise indication
of what's being charged.


968
00:47:33,396 --> 00:47:36,406
Things like subtotals,
shipping, or discounts.


969
00:47:36,926 --> 00:47:40,076
Now it's not a line-by-line
itemized list.


970
00:47:40,076 --> 00:47:42,016
It's not intended to
be a bill of sale.


971
00:47:42,416 --> 00:47:44,746
So you should keep it concise.


972
00:47:45,916 --> 00:47:48,616
Also, be upfront and clear
about what you're charging.


973
00:47:49,316 --> 00:47:52,356
Make sure that the total amount
reflects what the user is


974
00:47:52,356 --> 00:47:55,326
actually going to be
charged on their card.


975
00:47:55,326 --> 00:47:57,496
That being said,
there are some cases


976
00:47:57,496 --> 00:47:59,886
where you don't necessarily know
the amount you want to charge.


977
00:48:00,766 --> 00:48:02,396
Sometimes you don't
know the final cost.


978
00:48:02,936 --> 00:48:05,016
Maybe it's a hotel
reservation that's open-ended,


979
00:48:05,316 --> 00:48:07,826
or car hire, or a taxi service.


980
00:48:08,756 --> 00:48:11,016
And you can use the
pending item type


981
00:48:11,016 --> 00:48:12,996
on our summary item
to indicate this.


982
00:48:14,636 --> 00:48:16,836
Now again, just make
estimates clear.


983
00:48:17,486 --> 00:48:19,316
Why do I keep saying
"Make estimates clear"?


984
00:48:19,806 --> 00:48:22,646
Well as you may have seen
in the demos, after you pay


985
00:48:22,646 --> 00:48:25,976
with Apple Pay normally you'll
actually see a notification


986
00:48:26,056 --> 00:48:28,256
from your bank with the
amount that's charged.


987
00:48:28,256 --> 00:48:29,876
So you want to make sure
that the amount that's


988
00:48:29,876 --> 00:48:32,956
on the sheet matches this,
at least as best you can


989
00:48:32,956 --> 00:48:34,556
in the case where you
don't necessarily know the


990
00:48:34,556 --> 00:48:35,806
final amount.


991
00:48:37,456 --> 00:48:40,396
Summary items also support
free and discounted items.


992
00:48:40,936 --> 00:48:42,366
Items can be marked as free.


993
00:48:43,086 --> 00:48:46,216
And summary items can also be
negative except for the total.


994
00:48:46,336 --> 00:48:48,776
The total amount needs
to be a positive number.


995
00:48:49,066 --> 00:48:50,166
But anything before that,


996
00:48:50,166 --> 00:48:52,766
if you want to indicate a
discount that's totally fine.


997
00:48:53,326 --> 00:48:58,766
Now there's one other
field on the Mac OS sheet,


998
00:48:59,266 --> 00:49:03,156
and that's the field that tells
you which device to confirm on.


999
00:49:04,486 --> 00:49:06,386
Which brings me to
a point others raise


1000
00:49:07,766 --> 00:49:09,076
around the site icon.


1001
00:49:09,356 --> 00:49:13,056
So this is a sheet on iPhone
when you are paying on your Mac.


1002
00:49:13,576 --> 00:49:15,356
You can't customize
anything on here.


1003
00:49:15,536 --> 00:49:17,586
We inform you of the card,
but you can't change it;


1004
00:49:17,586 --> 00:49:18,716
you need to do that on a Mac.


1005
00:49:19,366 --> 00:49:20,656
By the way, if you
change any options


1006
00:49:20,656 --> 00:49:22,876
on the Mac the price here
will automatically update.


1007
00:49:22,906 --> 00:49:24,866
So if you change shipping
methods to something


1008
00:49:24,866 --> 00:49:27,086
that costs more, we'll
sync that straight over.


1009
00:49:27,086 --> 00:49:32,006
But this site icon is
downloaded from your site.


1010
00:49:32,206 --> 00:49:34,416
You can specify it
in a number of ways.


1011
00:49:34,976 --> 00:49:40,126
It uses the existing Apple Touch
icon, and you need to provide it


1012
00:49:40,126 --> 00:49:44,686
for Apple Pay at 180
and 120-pixel sizes.


1013
00:49:45,266 --> 00:49:49,046
The easiest way to specify this
is to just use a link attribute.


1014
00:49:49,856 --> 00:49:54,126
But you can also specify at
the root node of your domain.


1015
00:49:55,616 --> 00:49:57,016
Whatever works best for you.


1016
00:49:58,216 --> 00:49:59,966
I'd also like to briefly
touch upon something else.


1017
00:50:00,086 --> 00:50:01,996
That's semantic markup.


1018
00:50:02,346 --> 00:50:05,216
So many of you may already
be using semantic markup


1019
00:50:05,216 --> 00:50:08,156
on your pages to indicate
the types of products


1020
00:50:08,156 --> 00:50:10,156
that are available for
search engine indexing.


1021
00:50:10,466 --> 00:50:13,076
We actually index the
product type ourselves


1022
00:50:13,076 --> 00:50:14,986
in Spotlight on iOS.


1023
00:50:15,656 --> 00:50:17,886
You can also indicate that
your site takes Apple Pay using


1024
00:50:17,886 --> 00:50:19,816
appropriate semantic markup.


1025
00:50:19,816 --> 00:50:22,976
We think this will benefit,
for example, search engines,


1026
00:50:23,106 --> 00:50:25,256
people who want to know where
Apple Pay is being used,


1027
00:50:25,356 --> 00:50:28,056
if you'd like to
consider doing that.


1028
00:50:29,126 --> 00:50:31,096
OK, let's move on
to the last phase


1029
00:50:31,096 --> 00:50:32,766
of payment, the confirmation.


1030
00:50:33,346 --> 00:50:35,686
Now in your confirmation
you want


1031
00:50:35,686 --> 00:50:38,286
to reflect the appropriate
status in the Apple Pay sheet.


1032
00:50:38,806 --> 00:50:42,036
So for example, don't
display a success page


1033
00:50:42,036 --> 00:50:43,046
if you returned a failure.


1034
00:50:43,296 --> 00:50:43,956
That would be silly.


1035
00:50:43,956 --> 00:50:47,276
You can also leverage
information collected


1036
00:50:47,276 --> 00:50:49,226
by Apple Pay to offer
account creation.


1037
00:50:49,226 --> 00:50:50,146
I mentioned this earlier.


1038
00:50:50,146 --> 00:50:53,266
I want to show you an example
of that from Lululemon.


1039
00:50:53,266 --> 00:50:55,196
Here's an example.


1040
00:50:55,346 --> 00:50:57,196
After you have made
an Apple Pay payment,


1041
00:50:57,736 --> 00:50:58,956
you get a confirmation page


1042
00:50:59,376 --> 00:51:03,356
and you actually get a create
an account field that's


1043
00:51:03,356 --> 00:51:04,756
pre-populated with
the e-mail address


1044
00:51:04,756 --> 00:51:05,676
that came from Apple Pay.


1045
00:51:05,896 --> 00:51:08,156
So I can create an
account on my own terms.


1046
00:51:08,396 --> 00:51:10,376
I can enter into a
relationship if I want to,


1047
00:51:10,506 --> 00:51:11,636
and it's easy to do so.


1048
00:51:14,006 --> 00:51:16,446
OK. We covered quite
a bit today.


1049
00:51:17,166 --> 00:51:18,286
What did we cover?


1050
00:51:19,486 --> 00:51:21,446
We covered Apply Pay merchant
validation on the web.


1051
00:51:21,526 --> 00:51:24,696
We learned about the differences
between ActiveWeb for Apple Pay.


1052
00:51:25,876 --> 00:51:28,566
We also covered the Apple
Pay session JavaScript API


1053
00:51:28,566 --> 00:51:29,116
with Anders.


1054
00:51:29,276 --> 00:51:33,176
And we also talked
about taking advantage


1055
00:51:33,176 --> 00:51:35,396
of Apple Pay in our designs.


1056
00:51:35,396 --> 00:51:39,496
Now we have a lot of information
about Apple Pay on the web.


1057
00:51:39,986 --> 00:51:43,096
You can check out our developer
page and our microsite here.


1058
00:51:43,806 --> 00:51:45,386
We've also got the
related sessions.


1059
00:51:46,176 --> 00:51:47,586
Firstly, don't go anywhere.


1060
00:51:48,006 --> 00:51:48,816
Stay right here.


1061
00:51:48,976 --> 00:51:49,636
Don't you even leave.


1062
00:51:49,636 --> 00:51:52,326
I am going to be right back here
at 3 o'clock talking about news


1063
00:51:52,326 --> 00:51:53,336
with Wallet & Apple Pay.


1064
00:51:53,586 --> 00:51:54,986
We're going to talk
about the Sandbox.


1065
00:51:55,186 --> 00:51:56,416
We're going to talk
about WatchKit.


1066
00:51:56,586 --> 00:51:57,876
We're going to talk
about extensions.


1067
00:51:57,976 --> 00:52:00,636
And we're going to talk about
some of the new things in Wallet


1068
00:52:00,636 --> 00:52:03,036
and Apple Pay for
banks and retailers.


1069
00:52:03,366 --> 00:52:06,256
There's also a session
for web people:


1070
00:52:06,346 --> 00:52:08,416
Optimizing Web Content
in Your App.


1071
00:52:08,866 --> 00:52:10,336
That is Friday at 4:00.


1072
00:52:10,966 --> 00:52:12,116
That's everything from us.


1073
00:52:12,396 --> 00:52:13,636
Thank you so much for coming.


1074
00:52:13,686 --> 00:52:16,126
I can't wait to see all the
sites you're going to build


1075
00:52:16,126 --> 00:52:16,956
with Apple Pay on the web.


1076
00:52:17,336 --> 00:52:18,976
Thank you, and have
a great WWDC.


1077
00:52:19,016 --> 00:52:21,000
[ Applause ]

