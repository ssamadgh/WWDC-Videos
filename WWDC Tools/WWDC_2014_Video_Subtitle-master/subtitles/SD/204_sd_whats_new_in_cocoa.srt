1
00:00:12,046 --> 00:00:12,646
>> Good morning.


2
00:00:12,646 --> 00:00:13,946
Welcome to "What's
New in Cocoa."


3
00:00:13,946 --> 00:00:14,976
My name is Ali Ozer.


4
00:00:14,976 --> 00:00:17,376
I'm the Director of Cocoa
Frameworks at Apple.


5
00:00:17,616 --> 00:00:19,566
So I got a packed agenda today.


6
00:00:19,566 --> 00:00:21,006
We're going to give you
a high-level coverage


7
00:00:21,006 --> 00:00:24,786
of the changes in Cocoa in OS
X Yosemite, and we're going


8
00:00:24,786 --> 00:00:26,296
to give pointers
to related sessions


9
00:00:26,296 --> 00:00:27,816
and relevant labs as well.


10
00:00:27,816 --> 00:00:31,876
And the topics we're covering
are New Look, Extensions


11
00:00:31,876 --> 00:00:34,996
and Handoff, which are big user
features you saw yesterday.


12
00:00:34,996 --> 00:00:37,196
And then we're going
to talk about some APIs


13
00:00:37,196 --> 00:00:38,896
such as Storyboards
and View Controllers,


14
00:00:39,176 --> 00:00:41,226
API Modernization
effort we've been doing.


15
00:00:41,226 --> 00:00:42,876
Of course, we're going
to talk about Swift


16
00:00:43,276 --> 00:00:45,986
and some implications on
Cocoa and Cocoa Touch APIs,


17
00:00:46,056 --> 00:00:47,646
and a number of other
topics as well.


18
00:00:48,226 --> 00:00:50,216
And since I don't
want to put this badge


19
00:00:50,216 --> 00:00:52,576
on every single slide, pretty
much everything we're talking


20
00:00:52,576 --> 00:00:55,376
about today is new
in OS X Yosemite


21
00:00:55,376 --> 00:00:57,066
or in some case to
iOS 8 as well.


22
00:00:58,266 --> 00:01:01,456
OK, so with that, let's
get started with New Look.


23
00:01:03,236 --> 00:01:05,886
There are various
components to New Look.


24
00:01:05,886 --> 00:01:07,836
You saw them yesterday and
you've probably seen them


25
00:01:07,836 --> 00:01:09,956
if you installed
Yosemite on your machines.


26
00:01:10,196 --> 00:01:12,746
There's an updated look for
controls, there's translucency


27
00:01:12,746 --> 00:01:14,676
and vibrancy, there's
new window styles,


28
00:01:14,936 --> 00:01:17,256
and there's also a
new font in Yosemite.


29
00:01:18,156 --> 00:01:20,546
So let's take a look at
updated look for controls.


30
00:01:20,896 --> 00:01:25,876
Here is the good old Sound
Preferences Panel in Mavericks,


31
00:01:26,446 --> 00:01:28,346
and here is the same
panel in Yosemite.


32
00:01:28,766 --> 00:01:32,226
So one thing to notice is that,
you know, there is a lighter -


33
00:01:32,226 --> 00:01:34,186
there is lighter,
brighter colors,


34
00:01:34,506 --> 00:01:37,006
there is a clean
and simpler look.


35
00:01:37,006 --> 00:01:38,856
I'm not going to go
into the details here.


36
00:01:38,856 --> 00:01:41,036
We're going to do more of
that in some other talks.


37
00:01:41,406 --> 00:01:44,176
But it is sort of a lighter,
fresher look of course.


38
00:01:44,176 --> 00:01:45,226
And another thing to notice is


39
00:01:45,226 --> 00:01:48,486
that the controls are pretty
much metrics compatible,


40
00:01:48,646 --> 00:01:50,666
so that's important
thing to note.


41
00:01:51,216 --> 00:01:52,776
Here's another comparison.


42
00:01:52,776 --> 00:01:55,436
This is the Add a New
Mail Account panel.


43
00:01:55,826 --> 00:01:58,376
One thing you'll notice of
course is the default button


44
00:01:58,376 --> 00:01:59,716
in Mavericks is pulsing,


45
00:01:59,896 --> 00:02:03,376
continuously pulsing while the
one in Yosemite is not pulsing.


46
00:02:03,716 --> 00:02:05,496
Another thing to notice
is the focus ring.


47
00:02:05,906 --> 00:02:08,826
The one in Yosemite is a
lot cleaner while the one


48
00:02:08,826 --> 00:02:10,196
in Mavericks is a bit fuzzy.


49
00:02:10,476 --> 00:02:11,926
They both sort of
wrap the control,


50
00:02:11,926 --> 00:02:14,206
but the Yosemite one has a
cleaner look that's of course


51
00:02:14,206 --> 00:02:17,086
in line with the
overall look of Yosemite.


52
00:02:18,306 --> 00:02:21,536
Now, we have gotten rid of
these long-running animations


53
00:02:21,536 --> 00:02:22,906
like the Default button,


54
00:02:23,196 --> 00:02:26,376
but we have some subtle
animations in its place.


55
00:02:26,886 --> 00:02:29,616
You'll notice the Radio
buttons, as you operate them,


56
00:02:29,616 --> 00:02:32,096
they sort of gently
respond to your clicks


57
00:02:32,096 --> 00:02:33,446
or your touches just like that.


58
00:02:33,546 --> 00:02:35,766
And you'll see this in other
- some other cases as well


59
00:02:35,766 --> 00:02:39,156
such as checkboxes
and search fields.


60
00:02:39,156 --> 00:02:42,616
Now, the good thing about all
these, all these updated looks


61
00:02:42,616 --> 00:02:46,156
for controls, they're all
automatic in your applications.


62
00:02:46,736 --> 00:02:49,656
When your application
runs on Yosemite,


63
00:02:49,906 --> 00:02:52,776
it will pretty much inherit
all these looks and behaviors.


64
00:02:53,056 --> 00:02:55,726
I mean unless you're doing
something very custom using


65
00:02:55,726 --> 00:02:58,406
custom artwork on Saw and your
apps will get the Yosemite look.


66
00:02:58,406 --> 00:03:01,056
In fact, we do not even
support the Mavericks look


67
00:03:01,386 --> 00:03:02,946
for applications on Yosemite.


68
00:03:05,466 --> 00:03:08,596
OK, let me talk now about
translucency and vibrancy.


69
00:03:08,946 --> 00:03:11,436
So translucency, as
you saw yesterday,


70
00:03:11,666 --> 00:03:14,736
translucency is the combination
of transparency and blur,


71
00:03:14,896 --> 00:03:18,316
and it enables the personality
of the desktop or the content


72
00:03:18,316 --> 00:03:21,356
that you're looking at to
come through in your windows,


73
00:03:22,556 --> 00:03:24,506
and in a very aesthetically
pleasing way.


74
00:03:24,506 --> 00:03:28,846
So let's look at places
where we use translucency.


75
00:03:28,846 --> 00:03:31,746
Here is your default
desktop picture.


76
00:03:32,616 --> 00:03:35,216
You bring up a Safari
window and this is sort


77
00:03:35,216 --> 00:03:36,126
of the Favorites view.


78
00:03:36,276 --> 00:03:38,256
You'll see that the whole
window has a translucent


79
00:03:38,256 --> 00:03:39,096
background here.


80
00:03:39,316 --> 00:03:41,596
This is usually not
the case in most cases.


81
00:03:41,596 --> 00:03:43,346
You know, once you start
looking at content,


82
00:03:43,766 --> 00:03:45,966
the translucency is usually
limited to the sidebar.


83
00:03:46,466 --> 00:03:48,336
For instance here in your -


84
00:03:48,336 --> 00:03:51,636
and I'm sure what's your
favorite app, Xcode.


85
00:03:51,916 --> 00:03:54,226
Mail also has the same sort
of treatment in sidebar


86
00:03:54,226 --> 00:03:57,206
where you get the translucency
in the sidebar area.


87
00:03:57,826 --> 00:03:59,676
Another use of translucency
is something


88
00:03:59,676 --> 00:04:01,376
like a preview application.


89
00:04:01,706 --> 00:04:03,846
Here I have an image and
I haven't scrolled it yet


90
00:04:03,966 --> 00:04:05,416
but once I start to scroll,


91
00:04:05,796 --> 00:04:08,096
you'll see that the image
is going to start coming


92
00:04:08,096 --> 00:04:10,886
through the toolbar, title
bar area of the window.


93
00:04:11,466 --> 00:04:15,406
Now note that this case is what
we call in-window translucency


94
00:04:15,406 --> 00:04:17,836
while the other cases
were behind the window


95
00:04:17,836 --> 00:04:19,546
or through the window
translucency.


96
00:04:19,546 --> 00:04:21,116
There you're seeing
to the desktop.


97
00:04:21,326 --> 00:04:24,566
Here we're just seeing through
the title bar for the content


98
00:04:24,706 --> 00:04:28,286
of the window to
my document view.


99
00:04:28,496 --> 00:04:31,666
Other cases of translucency
include the menu bar.


100
00:04:32,266 --> 00:04:36,126
I'm sorry, the menus and
sheets as well, and popovers


101
00:04:36,126 --> 00:04:37,856
as well have this
sort of treatment.


102
00:04:37,956 --> 00:04:42,246
So, translucency is automatic
in many cases, sheets,


103
00:04:42,246 --> 00:04:43,856
menus, popovers, etcetera.


104
00:04:44,456 --> 00:04:47,466
Source lists, these are the
table views and outline views


105
00:04:47,466 --> 00:04:50,156
which are configured to
look like those sidebars,


106
00:04:50,446 --> 00:04:53,916
will also get a translucency
automatically in most cases,


107
00:04:54,346 --> 00:04:57,446
and also title bars and
toolbars will get translucency


108
00:04:57,746 --> 00:04:58,966
in a number of cases.


109
00:04:59,056 --> 00:05:01,476
Let me talk about that.


110
00:05:01,666 --> 00:05:04,536
Whenever you have a window and
you have a scroll view next


111
00:05:04,596 --> 00:05:06,906
to the title bar like
in the case of Preview,


112
00:05:07,196 --> 00:05:08,846
you will get translucency
treatment


113
00:05:09,046 --> 00:05:11,986
for that title bar area
just like Preview does.


114
00:05:12,266 --> 00:05:15,166
This is the case for an
app like TextEdit as well.


115
00:05:15,166 --> 00:05:18,736
Now, in other cases
where you want


116
00:05:18,736 --> 00:05:20,106
to do more sophisticated things


117
00:05:20,106 --> 00:05:21,916
or you're not getting
translucency automatically


118
00:05:21,916 --> 00:05:25,336
for your title bar, you can
use this new Window Style Mask


119
00:05:25,546 --> 00:05:29,116
called
NSFullSizeContentViewWindowMask.


120
00:05:30,266 --> 00:05:33,796
In addition, we have properties
such as titleVisibility


121
00:05:33,796 --> 00:05:35,966
and titlebarAppearsTransparent
on NSWindow.


122
00:05:36,196 --> 00:05:38,356
And we'll have other talks
where we're going to depth


123
00:05:38,356 --> 00:05:41,476
about these, but these
new features allow you


124
00:05:41,476 --> 00:05:44,886
to do highly customized
windows with translucency.


125
00:05:44,886 --> 00:05:47,176
An example is the
Messages window.


126
00:05:47,176 --> 00:05:49,516
For instance, the Messages
window has the sort


127
00:05:49,516 --> 00:05:51,956
of split look with the
content area on the right


128
00:05:52,146 --> 00:05:55,556
and then the sidebar on the left
for your - for the messages.


129
00:05:55,836 --> 00:05:59,216
And if you put this on
top of our desktop here,


130
00:05:59,216 --> 00:06:01,886
you'll see that there is
through window translucency


131
00:06:01,886 --> 00:06:04,466
on the left side and
in-window translucency


132
00:06:04,466 --> 00:06:06,606
for the messages content
on your right side.


133
00:06:06,926 --> 00:06:10,566
The good news is we have APIs
for you to do this sort of thing


134
00:06:10,566 --> 00:06:12,666
in your own applications
as well where appropriate.


135
00:06:13,006 --> 00:06:15,366
So you can do sophisticated
designs like this.


136
00:06:16,716 --> 00:06:20,196
Now vibrancy goes very much
hand in hand with translucency.


137
00:06:20,396 --> 00:06:22,376
Now translucency in general is


138
00:06:22,376 --> 00:06:25,566
of course averaging the
foreground and the background


139
00:06:25,566 --> 00:06:27,466
as it blurs the background.


140
00:06:27,756 --> 00:06:31,186
And sometimes this could
result in reduced contrast


141
00:06:31,186 --> 00:06:33,436
and it could even result
- reduce overall impact


142
00:06:34,016 --> 00:06:35,846
of what you're trying
to show the user.


143
00:06:36,576 --> 00:06:40,016
Now, vibrancy, what vibrancy
does is it helps pull the


144
00:06:40,016 --> 00:06:43,406
elements out by blending
in fancy ways, for instance


145
00:06:43,406 --> 00:06:45,886
by using Color Dodge,
Color Burn or variants


146
00:06:45,886 --> 00:06:47,036
of such blending modes.


147
00:06:47,106 --> 00:06:49,566
Let me show you an
example here what I mean.


148
00:06:49,926 --> 00:06:55,396
Here is a little view, vibrant
view which includes some texts


149
00:06:55,396 --> 00:06:58,636
and an image and they're now
being treated with vibrancy.


150
00:06:58,636 --> 00:07:02,716
If I were to remove vibrancy
from this, you get the sort


151
00:07:02,716 --> 00:07:05,696
of slightly, you know,
less punch to that.


152
00:07:05,696 --> 00:07:07,406
It's more grayish.


153
00:07:07,626 --> 00:07:08,686
It's not as impactful.


154
00:07:08,686 --> 00:07:11,336
I'm going to put the vibrancy
back in, and it's really adding


155
00:07:11,336 --> 00:07:14,156
that punch that allows the
user's content to come through


156
00:07:14,156 --> 00:07:16,916
and separated from the
background and, you know,


157
00:07:16,916 --> 00:07:17,826
present it to the user.


158
00:07:17,826 --> 00:07:18,856
So this is vibrancy.


159
00:07:19,466 --> 00:07:22,846
Now, vibrancy is automatic
in contexts in most cases


160
00:07:22,846 --> 00:07:24,426
where we're applying
translucency,


161
00:07:24,666 --> 00:07:27,636
and it's for controls and other
NSViews where appropriate,


162
00:07:27,696 --> 00:07:30,706
but it's not appropriate for all
cases, and I'll give an example


163
00:07:30,706 --> 00:07:31,706
of that in a few seconds.


164
00:07:31,846 --> 00:07:36,326
Now, to enable vibrancy and
also translucency explicitly


165
00:07:36,326 --> 00:07:39,626
in your applications,
we have a new view


166
00:07:39,626 --> 00:07:41,096
called NSVisualEffectView.


167
00:07:41,656 --> 00:07:43,216
You create it.


168
00:07:43,426 --> 00:07:45,936
You specify what kind of
translucency you want,


169
00:07:45,936 --> 00:07:48,006
either in-window
or behind-window,


170
00:07:48,396 --> 00:07:50,836
and you specify what kind of
vibrant appearance you want.


171
00:07:50,836 --> 00:07:52,226
You have choice of
dark or light.


172
00:07:53,466 --> 00:07:56,646
And then, you populate it
with vibrant-capable controls.


173
00:07:57,016 --> 00:08:00,116
And you can recognize such
controls because they return YES


174
00:08:00,116 --> 00:08:02,236
from this new property
called allowsVibrancy.


175
00:08:02,886 --> 00:08:07,476
And as I mentioned earlier,
some controls offer vibrancy.


176
00:08:07,736 --> 00:08:11,416
They opt-in to vibrancy
at appropriate times.


177
00:08:11,596 --> 00:08:12,926
Let me give you an
example of that.


178
00:08:13,386 --> 00:08:15,516
Here's a window with
two image views in it.


179
00:08:16,146 --> 00:08:18,676
On the left, we have an image
view with a template image,


180
00:08:18,736 --> 00:08:20,006
and on the right we
have an image view


181
00:08:20,006 --> 00:08:21,576
with just a regular image.


182
00:08:22,166 --> 00:08:25,116
Now, this is on a regular
no translucency window.


183
00:08:25,116 --> 00:08:26,936
I'm going to put this
on dark vibrancy.


184
00:08:27,516 --> 00:08:29,896
And as you saw, the
viewed imagery


185
00:08:29,896 --> 00:08:32,135
on the left is applying
the vibrancy


186
00:08:32,226 --> 00:08:35,586
and treating the template image
to give it the appropriate look


187
00:08:35,586 --> 00:08:38,015
on top of a dark vibrant
background while the elephant


188
00:08:38,015 --> 00:08:39,306
image remains put.


189
00:08:39,306 --> 00:08:40,566
It's not affected at all.


190
00:08:40,836 --> 00:08:43,086
Similarly, if I'd switch
to a light vibrancy, again,


191
00:08:43,086 --> 00:08:45,776
you're getting the
vibrancy applied


192
00:08:45,776 --> 00:08:48,376
to the template image while the
elephant image again stays put.


193
00:08:48,376 --> 00:08:51,136
So the NSImageView is
dynamically deciding


194
00:08:51,136 --> 00:08:53,696
between being vibrant and
not depending on its content.


195
00:08:55,576 --> 00:08:57,566
We made some changes in NSColor.


196
00:08:57,566 --> 00:09:02,196
We've updated existing system
colors to be consistent with,


197
00:09:02,196 --> 00:09:06,046
of course, the overall look of
Yosemite, and we also made it


198
00:09:06,046 --> 00:09:09,516
so that some NSColors have
appearance-specific variants.


199
00:09:10,046 --> 00:09:12,786
So what that means is - well,
let me give you an example.


200
00:09:13,046 --> 00:09:17,316
Here's some text views drawing
- drawn with the system color,


201
00:09:17,496 --> 00:09:20,556
and here is the same text drawn
on a dark vibrant surface.


202
00:09:21,016 --> 00:09:23,556
These are both using a new
system color we've added called


203
00:09:23,556 --> 00:09:26,186
secondaryLabelColor,
and you'll know that -


204
00:09:26,406 --> 00:09:29,016
note that in the dark vibrant
case the text is actually


205
00:09:29,016 --> 00:09:29,836
appearing white.


206
00:09:30,026 --> 00:09:31,806
So it's a fairly
different color.


207
00:09:32,056 --> 00:09:34,476
So you need to - you know,
if you're ever assuming


208
00:09:35,046 --> 00:09:38,186
that colors stay put through
the lifetime of an app


209
00:09:38,186 --> 00:09:40,506
or in different contexts,
you know, it's good to stop


210
00:09:40,506 --> 00:09:43,186
that assumption and
just use NSColors as is


211
00:09:43,186 --> 00:09:44,126
without taking them apart.


212
00:09:44,656 --> 00:09:48,596
We have a new font
and you've seen that.


213
00:09:49,136 --> 00:09:51,206
It's - the new font
is Helvetica Neue.


214
00:09:51,206 --> 00:09:53,046
It's been optimized for OS X


215
00:09:53,226 --> 00:09:55,676
with metrics similar
to Lucida Grande.


216
00:09:57,146 --> 00:09:58,876
Now, you should obtain
this font with methods


217
00:09:58,876 --> 00:10:02,296
such as systemFontOfSize,
which is of course what happens


218
00:10:02,566 --> 00:10:03,976
by default when you
drag elements


219
00:10:03,976 --> 00:10:08,966
out in Xcode Interface Builder.


220
00:10:09,046 --> 00:10:14,716
And now, for compatibility, if
you're - for existing binaries,


221
00:10:14,716 --> 00:10:17,316
so applications are already
out there, the applications


222
00:10:17,316 --> 00:10:20,336
which are linked
against the 10.9 SDK or -


223
00:10:20,336 --> 00:10:22,456
and earlier, we do two things.


224
00:10:22,956 --> 00:10:25,746
One, if we see explicit
references to Lucida Grande


225
00:10:25,746 --> 00:10:29,606
in a UI element, we assume that
you really meant Helvetica Neue,


226
00:10:30,116 --> 00:10:31,286
and we just do a replacement.


227
00:10:32,096 --> 00:10:35,996
In addition, if we find
that the text clips or wraps


228
00:10:35,996 --> 00:10:38,576
because it's too wide
for the area it has,


229
00:10:38,976 --> 00:10:41,646
we will compress it so it fits.


230
00:10:41,756 --> 00:10:44,366
So that, of course,
ensures compatibility


231
00:10:44,366 --> 00:10:45,566
for existing applications.


232
00:10:46,026 --> 00:10:48,636
Now, note that we do not do
this once your application is


233
00:10:48,636 --> 00:10:51,516
relinked, rebuilt
against the 10.10 SDK.


234
00:10:51,796 --> 00:10:53,816
There, we want you to
take a look at your app


235
00:10:53,816 --> 00:10:56,616
and correct any places
where there may be problems.


236
00:10:57,126 --> 00:10:58,766
Now, for instance if
you're finding that some


237
00:10:58,766 --> 00:11:00,836
of your controls are too
tight and not fitting,


238
00:11:01,166 --> 00:11:03,416
now I'd like to recommend you
actually look at Auto Layout


239
00:11:03,416 --> 00:11:05,806
as a way to not only
fix this problem


240
00:11:05,806 --> 00:11:09,016
but also make your
application more forward looking


241
00:11:09,016 --> 00:11:10,986
and more easily localizable
and so on.


242
00:11:11,046 --> 00:11:14,856
The last thing I want
to talk about here


243
00:11:14,856 --> 00:11:16,806
in this section is
NSSegmentedControl.


244
00:11:16,806 --> 00:11:20,206
We have a new style of segmented
control, SegmentStyleSeparated.


245
00:11:20,616 --> 00:11:21,986
It allows you to do things


246
00:11:21,986 --> 00:11:24,526
like the back/forward button
you see here in Safari.


247
00:11:24,526 --> 00:11:26,566
It's also visible in a
few other apps as well.


248
00:11:26,856 --> 00:11:28,316
And that's the new
style of button


249
00:11:28,316 --> 00:11:31,046
that represents the back/forward
buttons and other similar kinds


250
00:11:31,046 --> 00:11:33,116
of uses that you can switch it.


251
00:11:33,236 --> 00:11:36,626
We have two related
sessions for the new look,


252
00:11:36,886 --> 00:11:40,456
one this afternoon, "Adapting
Your App to the New Look


253
00:11:40,456 --> 00:11:44,756
of Yosemite" and the another
- another one, tomorrow,


254
00:11:45,006 --> 00:11:48,136
which is more advanced talk
where you can learn about how


255
00:11:48,136 --> 00:11:50,546
to use vibrancy in
more sophisticated ways


256
00:11:50,546 --> 00:11:53,856
and create windows like
that Messages app you saw.


257
00:11:54,306 --> 00:11:56,726
OK, so now let me talk
a bit about extensions.


258
00:11:56,986 --> 00:11:59,636
Again, extensions is a
feature you saw yesterday.


259
00:12:01,636 --> 00:12:04,646
Extensions provide access
to your app's functionality


260
00:12:04,646 --> 00:12:06,506
and content in other apps.


261
00:12:06,936 --> 00:12:09,106
For those of you familiar
with the services menu


262
00:12:09,106 --> 00:12:12,936
from earlier OS X
releases, so it's sort of -


263
00:12:12,986 --> 00:12:14,036
the services menu is sort


264
00:12:14,036 --> 00:12:16,296
of a spiritual precursor
to this feature.


265
00:12:16,296 --> 00:12:18,126
It's a much more
limited scope version


266
00:12:18,126 --> 00:12:19,396
of the extensions feature.


267
00:12:21,796 --> 00:12:24,636
Extensions run in a
separate process from the app


268
00:12:24,636 --> 00:12:26,436
in which they have been
invoked, which, of course,


269
00:12:26,436 --> 00:12:28,786
means there is security,
performance


270
00:12:28,786 --> 00:12:29,696
and stability benefits.


271
00:12:30,366 --> 00:12:34,876
And extensions are delivered
with apps as distinct bundles


272
00:12:34,876 --> 00:12:36,376
within the application.


273
00:12:36,376 --> 00:12:39,156
So, as you ship an
app on the App Store


274
00:12:39,156 --> 00:12:42,446
or wherever you may ship it, you
may bundle the extensions inside


275
00:12:42,446 --> 00:12:44,846
of it and the users can
enable those extensions


276
00:12:44,846 --> 00:12:46,126
if they find them useful.


277
00:12:46,546 --> 00:12:50,356
Now, to add an extension to
your application, in Xcode,


278
00:12:50,546 --> 00:12:53,126
you would go ahead and specify
that you want a new target


279
00:12:53,126 --> 00:12:54,526
within your application project.


280
00:12:55,126 --> 00:12:58,176
And then, on OS X, you have
choice of four extensions.


281
00:12:58,626 --> 00:13:03,686
Action Extensions are, like the
extensions you saw yesterday,


282
00:13:03,966 --> 00:13:05,106
the Markup Extension.


283
00:13:05,496 --> 00:13:08,426
They work within
NSTextViews and WebViews and -


284
00:13:08,426 --> 00:13:13,976
the translate extension you
saw in the afternoon is a -


285
00:13:13,976 --> 00:13:15,586
or maybe in the morning
after which,


286
00:13:15,586 --> 00:13:17,456
was also another
example of this.


287
00:13:18,116 --> 00:13:21,136
Finder Sync Extensions let
you customize Finder's drawing


288
00:13:21,136 --> 00:13:21,996
in a safe manner.


289
00:13:23,106 --> 00:13:25,746
Share Extensions allow you
to extend the Share menu.


290
00:13:26,296 --> 00:13:30,656
And Today Extensions allow
you to augment to Today view


291
00:13:30,836 --> 00:13:33,646
in the Notification Center,
for instance like reminders,


292
00:13:33,646 --> 00:13:35,846
and you saw examples
of this yesterday.


293
00:13:36,186 --> 00:13:37,846
Now, to use extensions,


294
00:13:37,936 --> 00:13:40,176
there are three new
APIs, three new classes.


295
00:13:41,116 --> 00:13:42,686
Let me just show you
how you would use these


296
00:13:42,686 --> 00:13:43,556
in your extension.


297
00:13:44,206 --> 00:13:47,296
Inside of your extension,
you have a Principal class.


298
00:13:47,826 --> 00:13:50,656
This is something you
typically specify and tell us.


299
00:13:50,896 --> 00:13:53,546
For UI-based extension
it would be a subclass


300
00:13:53,546 --> 00:13:55,756
of NSViewController
or UIViewController.


301
00:13:56,076 --> 00:13:58,896
The principal class has a point
with the ExtensionContext,


302
00:13:59,316 --> 00:14:03,196
which is basically the central
point for that extensions data,


303
00:14:03,196 --> 00:14:07,466
and ExtensionContext has an
array of NSExtensionItems


304
00:14:07,836 --> 00:14:10,566
where each NSExtensionItem
represents a data


305
00:14:10,746 --> 00:14:13,236
that the user want
to operate on.


306
00:14:13,236 --> 00:14:15,436
For instance, in the case
of the Markup Extension,


307
00:14:15,766 --> 00:14:18,776
the image that the user wants
to edit will be represented


308
00:14:18,776 --> 00:14:20,106
by an NSExtensionItem.


309
00:14:21,066 --> 00:14:23,796
In turn, each NSExtensionItem
points in an array


310
00:14:23,796 --> 00:14:24,866
of ItemProviders,


311
00:14:24,866 --> 00:14:28,246
and ItemProviders are
basically what makes the data


312
00:14:28,336 --> 00:14:30,286
for that ExtensionItem
available.


313
00:14:30,916 --> 00:14:32,406
There might be one,
there might be more,


314
00:14:32,406 --> 00:14:35,396
and the extension can choose
which provider it wants to use.


315
00:14:35,646 --> 00:14:38,646
It's pretty straightforward
to use these APIs.


316
00:14:38,646 --> 00:14:41,956
Inside of your extension,
to get the array of items,


317
00:14:41,956 --> 00:14:44,836
you would just say
extensionContext.inputItems,


318
00:14:45,386 --> 00:14:47,856
and then, you know, you work on
them or you let the user work


319
00:14:47,856 --> 00:14:49,876
on them as in the
case of markup.


320
00:14:50,156 --> 00:14:52,876
When you're done and you want to
return the results, you put them


321
00:14:52,876 --> 00:14:55,436
in an array, or maybe that's
an array of one, of course,


322
00:14:55,436 --> 00:14:56,496
if there's only one result,


323
00:14:56,496 --> 00:14:59,406
and then you call this API
completeRequestReturningItems


324
00:14:59,406 --> 00:15:00,406
completionHandler.


325
00:15:00,686 --> 00:15:03,866
Now, if it turns out the
user canceled the operation


326
00:15:04,086 --> 00:15:05,896
or there was an error,
you can call this other


327
00:15:05,896 --> 00:15:07,866
API cancelRequestWithError.


328
00:15:08,016 --> 00:15:09,116
So, it's pretty straightforward.


329
00:15:09,116 --> 00:15:13,266
We have two sessions for
extensions, one this afternoon,


330
00:15:13,266 --> 00:15:15,306
"Creating Extensions Part 1,"


331
00:15:15,656 --> 00:15:17,056
and another one tomorrow
morning.


332
00:15:17,516 --> 00:15:19,536
So, let's talk about handoff.


333
00:15:19,626 --> 00:15:22,116
Again, a feature you saw
yesterday at the keynote.


334
00:15:22,906 --> 00:15:26,686
Handoff enables users to
seamlessly transition activities


335
00:15:26,686 --> 00:15:27,726
between their devices.


336
00:15:28,646 --> 00:15:32,746
And there is a simple base
API here called NSUserActivity


337
00:15:33,426 --> 00:15:36,566
and their related APIs in
NSApplication, NSDocument,


338
00:15:36,566 --> 00:15:39,836
NSResponder, and also in
their UIKit counterparts


339
00:15:39,836 --> 00:15:40,756
as well because, as you know,


340
00:15:40,756 --> 00:15:42,026
this is a cross-platform
feature.


341
00:15:43,656 --> 00:15:47,796
NSUserActivity encapsulates
handoff information


342
00:15:47,796 --> 00:15:49,776
about a single user activity.


343
00:15:51,696 --> 00:15:55,236
So, you create one with
initWithActvityType,


344
00:15:55,236 --> 00:15:57,826
and you specify a
sort of an identifier


345
00:15:57,826 --> 00:15:59,636
or the activity the
user might be doing,


346
00:15:59,636 --> 00:16:02,106
whether it's browsing a
web page, playing a game,


347
00:16:02,106 --> 00:16:03,536
editing a document, whatever.


348
00:16:04,166 --> 00:16:06,676
And then you go ahead and
you set various information


349
00:16:06,986 --> 00:16:10,426
that would enable re-creating
that activity on another device,


350
00:16:10,756 --> 00:16:13,676
as we can see here maybe
the level, the location,


351
00:16:13,676 --> 00:16:15,006
the score that you're
in the game.


352
00:16:15,136 --> 00:16:16,916
And then you can go
ahead and set a title


353
00:16:16,916 --> 00:16:19,276
which is user-visible
title for that activity,


354
00:16:19,576 --> 00:16:22,466
and then at appropriate
times you make that current


355
00:16:22,666 --> 00:16:24,306
or you tell it's
no longer current.


356
00:16:24,646 --> 00:16:26,736
And the system apparently
- the system looks


357
00:16:26,736 --> 00:16:29,376
at what activity is current
and makes it available


358
00:16:29,376 --> 00:16:31,326
to other nearby devices
as appropriate.


359
00:16:31,326 --> 00:16:33,916
So, you just need to worry about
telling us when it's current


360
00:16:33,916 --> 00:16:34,806
and when it's not current.


361
00:16:35,236 --> 00:16:37,216
That's pretty straightforward.


362
00:16:37,576 --> 00:16:40,096
In NSApplication, we
have several APIs.


363
00:16:40,496 --> 00:16:42,676
The first one here
indicates to you


364
00:16:42,676 --> 00:16:45,516
that the user has indicated an
interest in moving an activity


365
00:16:45,516 --> 00:16:48,156
to your device, and
you can return yes


366
00:16:48,356 --> 00:16:51,556
if you are handling it,
or you can return no


367
00:16:51,556 --> 00:16:52,736
and let the system handle it.


368
00:16:53,096 --> 00:16:56,756
The next API application
continueUserActivity actually


369
00:16:56,756 --> 00:16:59,096
gives you the NSUserActivity,
which has the data


370
00:16:59,096 --> 00:17:00,656
from which you can
re-create the activity.


371
00:17:01,116 --> 00:17:03,876
Now, if you're using NSDocument,


372
00:17:04,486 --> 00:17:06,925
there's easy handoff
support for iCloud documents.


373
00:17:06,925 --> 00:17:09,445
You really just have to
do one thing and that is


374
00:17:09,445 --> 00:17:11,685
to add this key to
your Info.plist


375
00:17:11,685 --> 00:17:13,726
for your document
type indicating


376
00:17:13,726 --> 00:17:15,846
that you are supporting
handoff for this document,


377
00:17:16,046 --> 00:17:19,096
and you specify a unique type
identifier as you can see here,


378
00:17:19,096 --> 00:17:20,986
com.apple.TextEdit.editing.


379
00:17:20,986 --> 00:17:23,636
Now, if you're going to do
something more sophisticated,


380
00:17:23,675 --> 00:17:25,496
for instance, specify
the selection


381
00:17:25,846 --> 00:17:30,416
or some other viewing parameters
with that handoff information,


382
00:17:30,686 --> 00:17:32,776
you do have a handle
to the UserActivity off


383
00:17:32,776 --> 00:17:35,416
of the NSDocument that you
can set the parameters in.


384
00:17:36,286 --> 00:17:37,866
Next, I want to talk
about Storyboards


385
00:17:37,866 --> 00:17:40,136
and View Controllers,
which is a set


386
00:17:40,136 --> 00:17:41,816
of new APIs we're
adding to OS X.


387
00:17:41,916 --> 00:17:44,076
Now, if you've done
iOS development,


388
00:17:44,166 --> 00:17:46,996
you're very likely familiar
with the concept of Storyboard,


389
00:17:47,266 --> 00:17:49,186
and Storyboard is a
visual representation


390
00:17:49,186 --> 00:17:51,326
of the user interface
of your application.


391
00:17:51,716 --> 00:17:54,566
So, it's giving you
a higher level view


392
00:17:54,976 --> 00:17:56,226
of your user interface.


393
00:17:56,226 --> 00:17:59,056
It's higher level than
creating individual nibs


394
00:17:59,056 --> 00:18:00,916
and maybe setting targets
and actions together.


395
00:18:01,426 --> 00:18:06,076
And if you want to just create
a Storyboard application fairly


396
00:18:06,076 --> 00:18:08,506
straightforward in Xcode as
you're creating your new app,


397
00:18:08,506 --> 00:18:09,956
you just go check this checkbox.


398
00:18:10,196 --> 00:18:10,896
Be simple.


399
00:18:11,016 --> 00:18:11,936
That's it.


400
00:18:12,166 --> 00:18:13,716
And will give you
a default template


401
00:18:13,746 --> 00:18:15,476
that you can modify from there.


402
00:18:15,476 --> 00:18:18,766
Now, Storyboards specify
different parts of your UI


403
00:18:18,766 --> 00:18:22,146
as different scenes, and then
you would use segues to connect


404
00:18:22,146 --> 00:18:24,746
or transition between
these Storyboards,


405
00:18:24,746 --> 00:18:25,736
between these scenes.


406
00:18:26,206 --> 00:18:31,006
There are two classes,
NSStoryboard, NSStoryboardSegue.


407
00:18:31,006 --> 00:18:35,776
These are very parallel to
their UIKit counterparts.


408
00:18:36,266 --> 00:18:38,946
We also have a new
protocol, SeguePerforming.


409
00:18:39,656 --> 00:18:41,996
This collects the
SeguePerforming methods


410
00:18:41,996 --> 00:18:44,656
because on OS X, we have
two classes that respond


411
00:18:44,656 --> 00:18:46,376
to these methods
that's ViewController


412
00:18:46,656 --> 00:18:49,786
and WindowController as
well, so they both respond


413
00:18:49,786 --> 00:18:51,576
to these SeguePerforming
methods.


414
00:18:52,046 --> 00:18:54,386
In addition, these two
classes also provide access


415
00:18:54,386 --> 00:18:56,316
to the Storyboard
via a property.


416
00:18:56,706 --> 00:18:59,006
So, you can get - find out the
Storyboard that they came from,


417
00:18:59,066 --> 00:19:00,396
that they were created from.


418
00:19:00,886 --> 00:19:03,486
Now, we have two new
View Controllers as well


419
00:19:03,486 --> 00:19:06,676
that of course help you
create better Storyboards,


420
00:19:07,026 --> 00:19:10,466
TabViewController and
SplitViewController and they -


421
00:19:10,786 --> 00:19:13,096
they've - you know, in
spirit they're similar


422
00:19:13,096 --> 00:19:14,236
to the iOS counterparts.


423
00:19:14,236 --> 00:19:15,186
There's a few differences.


424
00:19:15,186 --> 00:19:16,566
Let me tell you how these work.


425
00:19:16,566 --> 00:19:20,676
So, you have a
TabViewController,


426
00:19:20,906 --> 00:19:24,186
the TabViewController has
an array of NSTabViewItems.


427
00:19:24,186 --> 00:19:26,206
Now you might be familiar
with NSTabViewItem -


428
00:19:26,486 --> 00:19:28,056
it's a class we had
for a long time.


429
00:19:28,356 --> 00:19:31,046
We augmented just a bit to
work with ViewControllers.


430
00:19:32,126 --> 00:19:35,686
Each TabViewItem, in turn, has
a new property ViewController,


431
00:19:35,966 --> 00:19:38,346
and that might point to a
ViewController in the case


432
00:19:38,346 --> 00:19:40,006
of a TabViewController
setup like this.


433
00:19:40,416 --> 00:19:42,466
So, that's pretty
straightforward.


434
00:19:42,716 --> 00:19:45,576
Let me show you how you create
one of these structures.


435
00:19:46,776 --> 00:19:48,586
There are two ways to do it.


436
00:19:49,276 --> 00:19:52,546
To add a child-view controller
to a TabViewController,


437
00:19:53,106 --> 00:19:56,126
one way you could do it is
you just first create an item,


438
00:19:56,126 --> 00:19:58,686
NSTabViewItem
tabViewItemWithViewController.


439
00:19:59,696 --> 00:20:02,616
You go set - and that
creates, so that creates


440
00:20:02,616 --> 00:20:03,896
that relationship there.


441
00:20:04,286 --> 00:20:07,646
You can go ahead and set
the properties on the item -


442
00:20:08,856 --> 00:20:11,136
for instance it's a label
and whatever else you want.


443
00:20:11,196 --> 00:20:13,506
And then you go ahead
and add the item


444
00:20:13,626 --> 00:20:15,616
to the ViewController
with addTabViewItem.


445
00:20:15,826 --> 00:20:17,376
So, this is one way to do it.


446
00:20:17,656 --> 00:20:21,296
Another way to do it is simply
take the ChildViewController,


447
00:20:21,366 --> 00:20:24,086
this guy here, and add it to
the TabViewController directly


448
00:20:24,086 --> 00:20:25,746
with addChildViewController,


449
00:20:25,746 --> 00:20:28,316
which is a generic API we
expose NSViewController.


450
00:20:28,756 --> 00:20:31,036
This will automatically
create the TabViewItem for you


451
00:20:31,036 --> 00:20:31,946
and insert it in there.


452
00:20:31,946 --> 00:20:34,236
So, this is the - this is
the approach you want to use


453
00:20:34,236 --> 00:20:35,906
if you don't want to deal
with the item at all.


454
00:20:36,356 --> 00:20:39,116
But if you do want to set
properties on the item later,


455
00:20:39,336 --> 00:20:41,326
you can still get the
item corresponding


456
00:20:41,326 --> 00:20:42,676
to that ChildViewController,


457
00:20:42,896 --> 00:20:44,516
and then you can set
the properties just


458
00:20:44,516 --> 00:20:48,816
like you did in the other case.


459
00:20:48,886 --> 00:20:50,326
Now, let's look at
SplitViewController,


460
00:20:50,326 --> 00:20:53,446
and no surprise, it turns
out to be very parallel.


461
00:20:53,706 --> 00:20:56,756
SplitViewController has an
array of SplitViewItems,


462
00:20:56,756 --> 00:20:58,546
which point to their
ViewControllers.


463
00:20:58,546 --> 00:21:00,986
To create it, you do
the item, you add it,


464
00:21:00,986 --> 00:21:02,966
or you create
addChildViewController.


465
00:21:03,406 --> 00:21:04,126
Got it? OK.


466
00:21:04,126 --> 00:21:05,606
Very parallel.


467
00:21:06,106 --> 00:21:08,556
OK, now we have some methods for
View Controller presentation.


468
00:21:08,556 --> 00:21:11,516
If you want to do your own
manual presentation rather


469
00:21:11,516 --> 00:21:14,606
than going through segues, you
can present a View Controller


470
00:21:14,606 --> 00:21:16,956
as sheet, you can controller
- you can present it


471
00:21:16,956 --> 00:21:19,746
as a modal window or as
a popover, you can also


472
00:21:19,746 --> 00:21:21,336
of course dismiss
View Controllers.


473
00:21:22,236 --> 00:21:24,266
You can transition
between View Controllers


474
00:21:24,266 --> 00:21:25,356
with this method here.


475
00:21:25,616 --> 00:21:28,466
The options give you the -
how you want to transition.


476
00:21:28,786 --> 00:21:33,846
One little tip there, the
options let you go slide left


477
00:21:33,846 --> 00:21:36,756
or right; you can also choose
to slide forward or backward,


478
00:21:37,046 --> 00:21:39,096
which is a much more
international savvy way


479
00:21:39,096 --> 00:21:40,596
of doing it because in an art -


480
00:21:40,596 --> 00:21:44,506
the right to left language
it will go the other way,


481
00:21:44,726 --> 00:21:47,186
which is appropriate
for the user's UI.


482
00:21:49,516 --> 00:21:52,886
We also have methods which will
be familiar to you from iOS,


483
00:21:52,946 --> 00:21:57,706
methods that lets you
see a - well - thanks.


484
00:21:58,396 --> 00:22:01,416
I should have talked
about this first, I guess.


485
00:22:02,166 --> 00:22:05,496
Anyway, viewWillAppear and the
like and also methods to find


486
00:22:05,496 --> 00:22:06,486
out when layout appear.


487
00:22:06,486 --> 00:22:07,886
So, pretty straightforward stuff


488
00:22:07,886 --> 00:22:09,026
and a good addition
to the class.


489
00:22:10,116 --> 00:22:12,346
One more thing about
View Controller is


490
00:22:12,346 --> 00:22:15,646
that it's now automatically
added into the responder chain.


491
00:22:15,876 --> 00:22:16,526
Oh there you go.


492
00:22:17,516 --> 00:22:20,806
[ Applause ]


493
00:22:21,306 --> 00:22:22,956
And again, let me
just show a picture.


494
00:22:22,956 --> 00:22:24,376
I've been trying to
read those two bullets.


495
00:22:24,376 --> 00:22:26,776
Here's your view, here's
your responder chain,


496
00:22:26,776 --> 00:22:27,986
you have your ParentViews
all the way


497
00:22:27,986 --> 00:22:29,246
up to the Window's
ViewController.


498
00:22:29,246 --> 00:22:31,446
You have Child Views
pointing at the View,


499
00:22:31,446 --> 00:22:34,406
and the ViewController would
sort of hang on in the side -


500
00:22:34,776 --> 00:22:36,796
you know, I'm not part of
that whole group there.


501
00:22:37,356 --> 00:22:38,606
Well, now it's part
of that group.


502
00:22:38,836 --> 00:22:41,156
Note that we tried doing
this for all apps and we ran


503
00:22:41,156 --> 00:22:43,456
into responder chain
cycles, not a good idea.


504
00:22:43,866 --> 00:22:46,836
So, this happens - this change
is effective only for apps built


505
00:22:46,836 --> 00:22:48,786
against the 10.10 SDK.


506
00:22:49,436 --> 00:22:53,096
Let me now talk about
something a little different,


507
00:22:53,096 --> 00:22:54,386
API Modernization.


508
00:22:55,046 --> 00:22:58,556
There have been many advances
in Objective-C in recent years,


509
00:22:59,226 --> 00:23:03,196
for instance @property, that's
been around for a while now,


510
00:23:03,196 --> 00:23:06,516
instancetype, enums with
explicit underlying types,


511
00:23:06,926 --> 00:23:10,436
NS-REQUIRES-SUPER and a
new one we just added,


512
00:23:10,436 --> 00:23:11,656
NS-DESIGNATED-INITIALIZER


513
00:23:11,656 --> 00:23:14,056
that lets you identify
designated initializers.


514
00:23:14,876 --> 00:23:19,366
And then 10.10 and iOS 8 SDKs
- we made a concerted effort


515
00:23:19,366 --> 00:23:22,456
to adopt these in a
lot more of our APIs.


516
00:23:24,286 --> 00:23:25,926
And why are we doing this?


517
00:23:27,256 --> 00:23:31,136
Well, these allow us to state
the APIs more precisely,


518
00:23:31,136 --> 00:23:33,886
more correctly, and that of
course has many benefits.


519
00:23:33,886 --> 00:23:36,346
The APIs are now more
self-documenting.


520
00:23:36,346 --> 00:23:38,286
You don't have to go to
the documentation as much.


521
00:23:38,286 --> 00:23:39,426
It's much clearer, right?


522
00:23:39,426 --> 00:23:41,276
They're on the other
file when the API does.


523
00:23:41,816 --> 00:23:44,016
It allows the APIs to
be more consistent.


524
00:23:44,016 --> 00:23:45,486
You don't ever ask
a question now.


525
00:23:45,486 --> 00:23:47,696
Why is this a property and this
other thing that looks very much


526
00:23:47,696 --> 00:23:49,066
like it not a property?


527
00:23:50,166 --> 00:23:52,206
It allows Xcode to
be more helpful -


528
00:23:52,376 --> 00:23:55,066
you now get much better
context-sensitive completions


529
00:23:55,066 --> 00:23:55,816
in some cases.


530
00:23:56,696 --> 00:24:02,046
It allows the - it enables the
compiler to warn and to detect


531
00:24:02,046 --> 00:24:04,816
and warn about potential bugs,
and this is really a big win,


532
00:24:04,816 --> 00:24:06,626
I mean it will really
find some errors.


533
00:24:07,666 --> 00:24:09,176
And last but not least,


534
00:24:09,176 --> 00:24:11,926
it allows better exposure
of our APIs in Swift.


535
00:24:11,926 --> 00:24:15,016
Swift, for instance, has
a stricter definition


536
00:24:15,096 --> 00:24:17,316
for the property is


537
00:24:17,696 --> 00:24:20,676
and by declaring the properties
explicitly in Objective-C,


538
00:24:20,676 --> 00:24:26,436
we allow them to be exposed
properly in Swift as well.


539
00:24:26,636 --> 00:24:29,666
Now, one consequence
of all this is


540
00:24:29,666 --> 00:24:31,306
that as you build
your applications


541
00:24:31,306 --> 00:24:33,646
against the new SDKs,
you may see new warnings


542
00:24:33,646 --> 00:24:34,836
and errors in your build.


543
00:24:35,026 --> 00:24:36,516
Please pay attention
to them because some


544
00:24:36,516 --> 00:24:38,146
of them might actually
be potential


545
00:24:38,396 --> 00:24:40,376
or real bugs lurking
around in your code.


546
00:24:41,696 --> 00:24:45,306
OK, now I will just talk a bit
about one of these areas here


547
00:24:45,306 --> 00:24:47,086
and that's the @property change.


548
00:24:48,356 --> 00:24:50,216
Now, we've converted
many accessors,


549
00:24:50,216 --> 00:24:51,756
many getter/setter
pairs and getters


550
00:24:51,756 --> 00:24:53,416
in our APIs to @property.


551
00:24:54,706 --> 00:24:57,516
And obvious ones, for instance
if you look at NSControl,


552
00:24:57,516 --> 00:24:58,466
the target property


553
00:24:58,466 --> 00:25:00,856
and objectValue property
are now real properties,


554
00:25:01,216 --> 00:25:02,936
and you'll notice that the
target property is weak,


555
00:25:02,936 --> 00:25:04,406
and I'm going to talk
about that in a second.


556
00:25:05,626 --> 00:25:08,716
But we also converted with
our computed properties


557
00:25:08,716 --> 00:25:10,976
or possibly computed
properties to @property.


558
00:25:11,296 --> 00:25:13,166
For instance integerValue
and stringValue


559
00:25:13,166 --> 00:25:17,786
and NSControl might be computed
off of the objectValue property,


560
00:25:17,786 --> 00:25:20,706
but we don't want to expose
that implementation detail


561
00:25:20,706 --> 00:25:23,296
in our API, so we make
them all into properties.


562
00:25:23,906 --> 00:25:25,736
Now, you don't care
as the API consumer.


563
00:25:26,326 --> 00:25:28,276
Another thing we have converted
into property is something


564
00:25:28,276 --> 00:25:30,466
like description, which
is obviously a computed.


565
00:25:30,526 --> 00:25:32,906
Every time you call it, it's
going to generate a description.


566
00:25:33,396 --> 00:25:35,766
But that's also a good
property we believe,


567
00:25:35,766 --> 00:25:36,856
and we made it into a property.


568
00:25:38,876 --> 00:25:42,056
So, use property for anything
that's about the value or state


569
00:25:42,056 --> 00:25:44,366
of an object or its
relationship to other objects.


570
00:25:44,696 --> 00:25:47,676
So, then you might be wondering,
what is not a property?


571
00:25:48,926 --> 00:25:51,656
Well, OK, not every method
which can be expressed


572
00:25:51,656 --> 00:25:53,026
as a property should be.


573
00:25:53,326 --> 00:25:55,486
Not every method that looks
like a property should be.


574
00:25:55,486 --> 00:25:58,996
You know, sometimes if it looks
like a duck, it's not a duck.


575
00:25:59,606 --> 00:26:02,136
The canonical example is
the retain method, you know,


576
00:26:02,136 --> 00:26:03,566
the good old retain
method for those of you


577
00:26:03,566 --> 00:26:04,736
who still remember what that is.


578
00:26:05,036 --> 00:26:08,566
It returns a value, it takes no
argument, it looks like a getter


579
00:26:09,276 --> 00:26:12,676
but it's not a duck, it's
neither on a property either.


580
00:26:13,076 --> 00:26:16,536
So, what are some
examples of bad -


581
00:26:16,586 --> 00:26:18,316
what are bad candidates
for @property?


582
00:26:20,076 --> 00:26:24,006
So, methods which do things
such as load, parse and toggle -


583
00:26:24,166 --> 00:26:25,826
these might return
like a parse state,


584
00:26:25,826 --> 00:26:27,836
they might return a result,
they might return a Boolean,


585
00:26:28,316 --> 00:26:29,676
and they might take
no arguments,


586
00:26:29,816 --> 00:26:30,856
but they are not properties.


587
00:26:30,986 --> 00:26:32,206
You can usually recognize these


588
00:26:32,206 --> 00:26:34,236
because they have a
verb prefix on the name.


589
00:26:35,016 --> 00:26:37,176
Generators like init
methods, copy methods,


590
00:26:37,216 --> 00:26:38,816
some of these also have
hit the first rule,


591
00:26:38,816 --> 00:26:40,446
of course, or objectEnumerator.


592
00:26:40,886 --> 00:26:43,796
These guys are returning
new results every time.


593
00:26:43,796 --> 00:26:46,876
They are not returning
values that are results


594
00:26:46,876 --> 00:26:49,036
that are item potent,
meaning the same every time.


595
00:26:49,036 --> 00:26:52,026
So, they're not good
candidates for properties.


596
00:26:52,086 --> 00:26:54,626
Another category is
methods which change state


597
00:26:54,626 --> 00:26:58,736
such as nextObject, not a good
candidate for property as well.


598
00:26:59,956 --> 00:27:03,156
So, you have to make sure the
methods also swim like a duck


599
00:27:03,156 --> 00:27:05,316
and quack like a duck before
you make them into properties.


600
00:27:06,296 --> 00:27:08,706
Now, earlier you saw a
weak property on NS -


601
00:27:09,006 --> 00:27:10,896
on the target property.


602
00:27:11,996 --> 00:27:14,976
We use zeroing weak for
targets now, that's declared


603
00:27:14,976 --> 00:27:16,766
with the weak attribute
on the target.


604
00:27:17,206 --> 00:27:19,416
Now, this is effective
only in applications linked


605
00:27:19,416 --> 00:27:21,996
against the 10.10 SDK.


606
00:27:22,186 --> 00:27:24,376
Previous or other
applications' existing binaries,


607
00:27:24,656 --> 00:27:27,156
targets still have
the assigned behavior.


608
00:27:27,706 --> 00:27:29,826
Now, we're also using
weak for delegates


609
00:27:29,826 --> 00:27:32,506
and data sources moving
forward in new APIs.


610
00:27:32,506 --> 00:27:34,846
For instance, here's a new
API we added this release.


611
00:27:35,196 --> 00:27:37,256
However, we're not changing
the existing delegate


612
00:27:37,256 --> 00:27:40,206
and data source methods
to use weak properties.


613
00:27:40,376 --> 00:27:44,136
There's too many compatible
illustrations for that one.


614
00:27:44,326 --> 00:27:46,416
Now, as I said, we've
done these in our APIs,


615
00:27:46,416 --> 00:27:49,856
but you can also modernize your
code as well if you'd like,


616
00:27:50,206 --> 00:27:52,476
and it's a good idea because
it might help you find bugs


617
00:27:52,476 --> 00:27:54,876
in your code and, you know,
get the benefit I've shown.


618
00:27:55,666 --> 00:28:00,496
The Convert to Modern
Objective-C syntax refactoring


619
00:28:00,496 --> 00:28:03,226
tool, which is actually in
Xcode today, has been augmented


620
00:28:03,546 --> 00:28:06,506
to do some of these
changes as well.


621
00:28:06,966 --> 00:28:10,696
You can see some of them
in this panel you get,


622
00:28:10,696 --> 00:28:12,346
and you can choose which
ones you want to do


623
00:28:12,346 --> 00:28:13,396
and go ahead and do them.


624
00:28:13,546 --> 00:28:14,946
Now, one word of warning though,


625
00:28:14,946 --> 00:28:18,246
this tool doesn't
do all the changes.


626
00:28:18,596 --> 00:28:21,366
It also may not get
everything right.


627
00:28:21,366 --> 00:28:23,296
For instance, it might
not get the exact type


628
00:28:23,296 --> 00:28:24,386
of property right.


629
00:28:24,676 --> 00:28:28,216
So, you really need to
review the changes offered


630
00:28:28,216 --> 00:28:31,436
up by this tool and accept
them or tweak them as needed.


631
00:28:35,236 --> 00:28:38,186
The next - I'm going to talk
about Swift, and there are a lot


632
00:28:38,186 --> 00:28:40,146
of sessions about Swift,
so I'm not going to go


633
00:28:40,146 --> 00:28:42,806
into any language details
or anything else about -


634
00:28:42,806 --> 00:28:44,636
I'll try to teach you
Swift, anything like that.


635
00:28:44,636 --> 00:28:46,236
So, I hope you'll be able to go


636
00:28:46,236 --> 00:28:47,616
to those sessions
and enjoy those.


637
00:28:47,616 --> 00:28:51,666
Swift - I'm just going
to talk to you basically


638
00:28:51,666 --> 00:28:53,836
about the API interactions
within the context


639
00:28:53,836 --> 00:28:55,096
of Cocoa and Cocoa Touch.


640
00:28:55,366 --> 00:28:57,086
Swift is a new language
for Cocoa,


641
00:28:57,086 --> 00:28:58,976
and it provides seamless
interoperability


642
00:28:58,976 --> 00:29:05,396
with the Cocoa APIs and of
course Objective-C code.


643
00:29:05,676 --> 00:29:08,016
Now, as you know, API
is - API design is near


644
00:29:08,866 --> 00:29:10,636
and dear to our hearts.


645
00:29:10,636 --> 00:29:12,916
I've given a few API
design talks in the past,


646
00:29:13,036 --> 00:29:15,896
so we think deeply about
API considerations.


647
00:29:16,406 --> 00:29:21,806
And existing API
guidelines we have in Cocoa


648
00:29:21,806 --> 00:29:24,956
for Objective-C pretty much
apply to Swift as well.


649
00:29:25,266 --> 00:29:27,836
And with just one exception
that I'll talk about later,


650
00:29:27,836 --> 00:29:31,406
the init methods, there's
really no changes in APIs


651
00:29:31,406 --> 00:29:33,326
as they're exposed in Swift.


652
00:29:33,986 --> 00:29:38,066
Now, this doesn't mean of
course as we start adopting more


653
00:29:38,066 --> 00:29:41,376
of Swift features in our APIs
as with more APIs forward,


654
00:29:41,376 --> 00:29:43,056
we won't be taking
advantage of some of the new


655
00:29:43,056 --> 00:29:45,996
and exciting features of Swift
that Objective-C does not offer.


656
00:29:46,346 --> 00:29:48,396
So, we're going to be doing
that over time of course.


657
00:29:48,396 --> 00:29:52,956
So, let me just show you
how some Cocoa APIs come


658
00:29:52,956 --> 00:29:54,046
across in Swift.


659
00:29:54,366 --> 00:29:56,976
First, properties, here's
a pretty obvious one.


660
00:29:57,296 --> 00:30:02,526
The NSRect - the frame property
in NSView type, that's NSRect,


661
00:30:02,816 --> 00:30:03,686
pretty straightforward.


662
00:30:03,686 --> 00:30:04,986
Here's how it looks
like in Swift.


663
00:30:06,226 --> 00:30:08,606
Now, as I'm showing you these
slides, if you're ever confused


664
00:30:08,606 --> 00:30:10,826
about which line is Objective-C,
which line is Swift,


665
00:30:10,826 --> 00:30:12,626
just look for the
lack of semicolon


666
00:30:12,696 --> 00:30:14,296
that identifies the Swift lines.


667
00:30:15,086 --> 00:30:17,446
Here's another one,
Storyboard property off


668
00:30:17,446 --> 00:30:20,206
of NSViewController, here is
what it looks like in Swift.


669
00:30:20,806 --> 00:30:23,386
Note the exclamation mark
there on the Storyboard


670
00:30:23,386 --> 00:30:25,756
which indicates that the
property of this could be nil


671
00:30:25,756 --> 00:30:27,366
and the get, which indicates


672
00:30:27,366 --> 00:30:28,856
that this is a read-only
property.


673
00:30:29,156 --> 00:30:32,716
And here is one more case, this
is the subviews property off


674
00:30:32,716 --> 00:30:35,736
of NSArray which is of
course declared as an NSArray


675
00:30:35,736 --> 00:30:39,956
in Objective-C which implicitly
means an NSArray of ID.


676
00:30:40,376 --> 00:30:43,376
It comes across to Swift
as an array of AnyObject,


677
00:30:43,656 --> 00:30:46,596
where AnyObject is
the counterpart to ID.


678
00:30:46,596 --> 00:30:49,466
Now, this is one of the
refinements I'm talking about.


679
00:30:49,466 --> 00:30:52,756
As we move forward, you know, we
want to declare this API better


680
00:30:52,916 --> 00:30:55,516
because we - this is really
an array of NSViews of course.


681
00:30:56,546 --> 00:30:58,936
Right now, this is not coming
through to the APIs here,


682
00:30:58,936 --> 00:31:00,156
but these are refinement
that we'd


683
00:31:00,156 --> 00:31:01,486
like to do here and
other places.


684
00:31:01,486 --> 00:31:04,656
And more importantly, as you
define your own APIs and Swift


685
00:31:04,656 --> 00:31:06,346
within your programs,
you know, take advantage


686
00:31:06,346 --> 00:31:10,376
of Swift's unique features to
express your programs better.


687
00:31:10,886 --> 00:31:15,226
Now, let me show you
some mapping of methods,


688
00:31:15,226 --> 00:31:16,696
for instance methods
with no arguments.


689
00:31:17,106 --> 00:31:18,896
Here's a simple case,
displayIfNeeded.


690
00:31:18,896 --> 00:31:20,726
Here's what it looks
like in Swift,


691
00:31:21,046 --> 00:31:24,716
and here's what the call looks
like in Swift, displayIfNeeded


692
00:31:24,716 --> 00:31:26,836
with open and close paren
at the end to indicate


693
00:31:26,836 --> 00:31:29,026
that this is a method call,
pretty straightforward.


694
00:31:29,476 --> 00:31:34,606
Here's a method with one
argument, an addSubview method.


695
00:31:35,166 --> 00:31:38,776
And here's what it
looks like in Swift.


696
00:31:38,776 --> 00:31:41,976
Now, note this aView here,
and one thing to note is


697
00:31:41,976 --> 00:31:44,366
that this aView:
is not a label -


698
00:31:44,706 --> 00:31:46,376
the name of this
method is addSubview.


699
00:31:46,456 --> 00:31:49,196
This aView is simply the
name of the variable,


700
00:31:49,506 --> 00:31:52,416
the name of the local variable
for that argument as it exists


701
00:31:52,416 --> 00:31:54,746
in the Objective-C
header making its way


702
00:31:54,746 --> 00:31:56,296
into the Swift interface here.


703
00:31:56,566 --> 00:31:59,526
So, really the method signature
of this method is addSubview,


704
00:31:59,526 --> 00:32:00,636
and it takes an NSView.


705
00:32:01,876 --> 00:32:04,476
Calling something like
this is again also pretty


706
00:32:04,476 --> 00:32:07,406
straightforward, addSubview and
then your arguments right there.


707
00:32:07,986 --> 00:32:11,956
Now let's look at the case
with multiple arguments.


708
00:32:12,476 --> 00:32:14,906
Here's a new method,
performSegueWithIdentifier


709
00:32:14,906 --> 00:32:17,326
that takes a segueID
and a sender.


710
00:32:17,846 --> 00:32:22,546
And the first part of the
name goes outside the paren,


711
00:32:22,546 --> 00:32:24,396
and then any labels for second


712
00:32:24,396 --> 00:32:26,776
and further arguments go
inside the paren like this.


713
00:32:27,606 --> 00:32:30,786
Note that the segueID is
again the variable name


714
00:32:30,786 --> 00:32:33,786
for the local argument
that goes there,


715
00:32:33,786 --> 00:32:36,266
and the sender goes right
there with the sender.


716
00:32:36,266 --> 00:32:38,996
Since the label and the
argument name are the same,


717
00:32:39,376 --> 00:32:41,246
Swift collapses them
for you into one.


718
00:32:41,246 --> 00:32:42,676
It doesn't repeat
the word sender.


719
00:32:43,006 --> 00:32:46,226
So, note that in this case,
the segueID is not part of -


720
00:32:46,336 --> 00:32:48,626
and it's not a label,
it's not part of the name


721
00:32:48,626 --> 00:32:50,206
of the method but the sender is.


722
00:32:50,656 --> 00:32:51,896
So, really the method signature


723
00:32:51,896 --> 00:32:54,096
for this is
performSegueWithIdentifier,


724
00:32:54,096 --> 00:32:56,046
a string argument
and then sender:


725
00:32:56,046 --> 00:32:58,226
which is an AnyObject argument.


726
00:32:58,716 --> 00:33:02,036
An invocation of this is
pretty straightforward


727
00:33:02,036 --> 00:33:05,296
as you can see here.


728
00:33:05,506 --> 00:33:09,046
So, Cocoa APIs omit explicit
label on the first argument.


729
00:33:09,206 --> 00:33:12,966
We saw that with the example
from the previous slide.


730
00:33:14,056 --> 00:33:14,996
Here's another example.


731
00:33:14,996 --> 00:33:16,866
For instance this is how
you call a delegate method,


732
00:33:16,866 --> 00:33:19,866
splitView canCollapseSubview,
it works very well.


733
00:33:20,056 --> 00:33:23,026
The first part of the
name includes the type


734
00:33:23,026 --> 00:33:25,666
of the first argument, and then
the other labels describe the


735
00:33:25,666 --> 00:33:26,336
other arguments.


736
00:33:26,626 --> 00:33:27,766
Here's another example


737
00:33:27,766 --> 00:33:29,426
with three arguments,
setResourceValue.


738
00:33:29,426 --> 00:33:31,336
Value is the first
argument and forKey


739
00:33:31,336 --> 00:33:34,526
and error are explicit labels
on the subsequent arguments.


740
00:33:34,976 --> 00:33:38,036
This results in natural method
names that are easy to read,


741
00:33:38,286 --> 00:33:40,696
easy to speak, and
easy to really craft


742
00:33:40,836 --> 00:33:43,946
as you're developing APIs.


743
00:33:44,086 --> 00:33:46,156
Now, you might be
thinking when to use -


744
00:33:46,236 --> 00:33:48,496
when should you consider
labels on the first argument


745
00:33:48,496 --> 00:33:50,826
because Swift will - does
allow you to put labels


746
00:33:50,826 --> 00:33:52,406
on the first argument
in method names,


747
00:33:52,836 --> 00:33:54,336
it's just not the
default behavior.


748
00:33:55,676 --> 00:33:59,086
One case is where arguments
are equally weighed subparts


749
00:33:59,086 --> 00:33:59,556
of a whole.


750
00:33:59,556 --> 00:34:02,636
For instance let's say you
had a method called moveToX y.


751
00:34:02,636 --> 00:34:04,526
In Swift it would
come across like this,


752
00:34:04,526 --> 00:34:06,386
and maybe this doesn't
look so good.


753
00:34:06,766 --> 00:34:09,255
Why is X treated somewhat
differently than Y?


754
00:34:09,856 --> 00:34:11,746
You might consider
method names like this.


755
00:34:12,676 --> 00:34:15,286
It is actually the kind
of structure you will see


756
00:34:15,326 --> 00:34:18,456
in free form functions in Swift
where you have the ability


757
00:34:18,456 --> 00:34:19,646
to put labels on the argument.


758
00:34:20,146 --> 00:34:24,016
But it's better in these
cases to sort of think


759
00:34:24,016 --> 00:34:26,696
about if these are all equally
weighed subparts of a whole,


760
00:34:26,696 --> 00:34:28,906
is there some combo type
that represents them?


761
00:34:29,216 --> 00:34:31,576
For instance, in this case
a CGPoint or an NSPoint.


762
00:34:32,196 --> 00:34:34,376
There are many other benefits
to using a combo type.


763
00:34:34,456 --> 00:34:36,626
You're not schlepping all those
arguments all over the place.


764
00:34:36,976 --> 00:34:40,926
Also, using a combined single
type is a more atomic approach


765
00:34:40,926 --> 00:34:41,656
to APIs.


766
00:34:41,656 --> 00:34:43,886
Rather than specifying
the arguments one by one,


767
00:34:43,886 --> 00:34:47,106
you're specifying this one
whole thing to represent them.


768
00:34:47,485 --> 00:34:48,926
And, you know, we
have many other types


769
00:34:48,926 --> 00:34:51,916
to represent combined types,
NSDate, NSDateComponents,


770
00:34:52,896 --> 00:34:55,656
UIColor, NSColor,
NSRange, CGRect,


771
00:34:55,656 --> 00:34:58,406
we have a new SCNVector3
type to represent the points


772
00:34:58,406 --> 00:34:59,876
in 3D space and so on.


773
00:34:59,876 --> 00:35:02,576
So, you know, use such types
where appropriate and it -


774
00:35:02,766 --> 00:35:04,266
and it gets rid of this problem.


775
00:35:05,386 --> 00:35:06,866
Now, earlier I mentioned
init methods.


776
00:35:07,376 --> 00:35:11,456
Init methods are an
exception to the label thing,


777
00:35:11,456 --> 00:35:15,766
it's another case to the rule
with - about the first argument.


778
00:35:16,166 --> 00:35:18,806
Here's initWithFrame
in Objective-C.


779
00:35:18,806 --> 00:35:22,036
Here is how it comes
across in Swift.


780
00:35:22,376 --> 00:35:25,046
Again, frame here is a label,


781
00:35:25,616 --> 00:35:30,066
and the way you call this
is NSView - this is the sort


782
00:35:30,066 --> 00:35:32,416
of the constructor
syntax, initializer syntax


783
00:35:32,766 --> 00:35:35,146
with the frame argument
as a label in this case.


784
00:35:35,656 --> 00:35:37,376
So, you've now at
least seen this in some


785
00:35:37,376 --> 00:35:39,516
of the code you read
and in slides yesterday.


786
00:35:40,056 --> 00:35:43,966
And there is the -
yeah, the frame label.


787
00:35:44,726 --> 00:35:46,286
Now, convenience constructors -


788
00:35:46,286 --> 00:35:50,246
as you know in Objective-C we've
had initializers, init methods.


789
00:35:50,576 --> 00:35:52,756
We've also had what we call
these constructor methods


790
00:35:52,756 --> 00:35:55,416
like this one in NSColor,
colorWithPatternImage.


791
00:35:56,116 --> 00:35:57,156
And these were just another way


792
00:35:57,156 --> 00:35:59,846
to say the init method except
you didn't have to call alloc,


793
00:35:59,846 --> 00:36:01,406
hence the convenience aspect.


794
00:36:02,416 --> 00:36:07,976
Swift recognizes these patterns
and it - in fact, it reflects it


795
00:36:07,976 --> 00:36:10,016
as an initializer
method just like this.


796
00:36:10,016 --> 00:36:12,416
So, Swift recognizes that
this method is really init


797
00:36:12,906 --> 00:36:14,346
with a patternImage argument.


798
00:36:14,686 --> 00:36:16,976
So, this actually comes
across in Swift just


799
00:36:16,976 --> 00:36:19,116
like initializer does
which is actually great


800
00:36:19,116 --> 00:36:20,916
because it simplifies
that dichotomy


801
00:36:20,916 --> 00:36:23,186
between convenience constructors
and regular init methods.


802
00:36:23,326 --> 00:36:27,566
Now, let me talk about
one more thing about APIs


803
00:36:27,566 --> 00:36:29,586
and that's enumerated types


804
00:36:29,586 --> 00:36:31,766
because this one is
really, really pretty cool.


805
00:36:32,716 --> 00:36:35,346
Here's a new enum
we've added recently,


806
00:36:35,346 --> 00:36:39,036
a few releases ago
ByteCountFormatterCountStyle.


807
00:36:39,416 --> 00:36:42,176
Note that it's got four values,
but it's sort of hard to figure


808
00:36:42,176 --> 00:36:44,196
out what's different
about those four.


809
00:36:44,196 --> 00:36:46,546
You know, they are these
long words which are nice


810
00:36:46,546 --> 00:36:49,016
and descriptive, but it's sort
of like, what's going on there?


811
00:36:49,546 --> 00:36:50,826
Here's what this
looks like in Swift -


812
00:36:50,956 --> 00:36:53,616
it's really like a breath of
fresh air like wow, you know,


813
00:36:53,616 --> 00:36:56,336
file, memory, decimal,
binary, that's really cool.


814
00:36:56,576 --> 00:36:58,246
And the usage is
pretty neat too.


815
00:36:58,246 --> 00:36:59,126
Here is that enum.


816
00:36:59,646 --> 00:37:02,536
To call it you might
say NSByteCountFormatter


817
00:37:02,536 --> 00:37:04,196
CountStyle.File.


818
00:37:04,546 --> 00:37:07,316
However in context where the
argument's type is known,


819
00:37:07,406 --> 00:37:10,016
you really just have to
use .File and, you know,


820
00:37:10,016 --> 00:37:12,036
now I can fit that
bullet into one line,


821
00:37:12,066 --> 00:37:14,336
and I'll improve our
slides moving forward,


822
00:37:14,386 --> 00:37:14,936
that's pretty cool.


823
00:37:16,226 --> 00:37:17,146
So-- thanks.


824
00:37:19,516 --> 00:37:21,546
[ Applause ]


825
00:37:22,046 --> 00:37:23,386
So, let's talk about
Gesture Recognizers,


826
00:37:23,386 --> 00:37:24,916
which is another
new API we've added.


827
00:37:24,916 --> 00:37:28,956
And again if you use Gesture
Recognizers on iOS this is -


828
00:37:28,956 --> 00:37:30,596
this will feel familiar to you.


829
00:37:31,076 --> 00:37:34,266
Gesture Recognizers allow you to
eliminate large chunks of code


830
00:37:34,686 --> 00:37:37,456
by doing the mouse
tracking for you


831
00:37:37,456 --> 00:37:39,336
and just generating
an action at the end


832
00:37:39,336 --> 00:37:40,446
for the appropriate gesture.


833
00:37:40,836 --> 00:37:44,286
It also helps disintegrate
between various types of clicks


834
00:37:44,286 --> 00:37:46,246
and drags which might
sometimes be hard to figure out.


835
00:37:46,286 --> 00:37:48,016
There's a new class
GestureRecognizer;


836
00:37:48,696 --> 00:37:49,836
it's got five subclasses.


837
00:37:49,836 --> 00:37:53,036
And you can also create
your own subclasses


838
00:37:53,036 --> 00:37:56,276
because we provide API
that's specifically designed


839
00:37:56,386 --> 00:37:58,386
for subclassing an
NSGestureRecognizer.


840
00:37:59,346 --> 00:38:01,246
There's going to be more
about gesture recognizers


841
00:38:01,246 --> 00:38:03,016
at the Storyboards
and Controllers talk,


842
00:38:03,016 --> 00:38:04,756
which is this afternoon at 4:30.


843
00:38:04,756 --> 00:38:09,126
Now, if you must deal with
events yourself or deal


844
00:38:09,126 --> 00:38:11,006
with other kinds of events
other than mouse events,


845
00:38:11,376 --> 00:38:13,376
there is a block-based
events tracking API.


846
00:38:13,876 --> 00:38:17,436
This also helps eliminate a lot
of code by taking over that loop


847
00:38:17,826 --> 00:38:20,006
that you might often
have to write.


848
00:38:20,386 --> 00:38:23,366
This - whoops, let me show
you the thing, there you go.


849
00:38:23,726 --> 00:38:26,656
So, this allows you to pass the
mask of events you're interested


850
00:38:26,656 --> 00:38:28,796
in a timeout and there's
a block that's called


851
00:38:29,126 --> 00:38:33,036
and the tracking will continue
until you tell it to stop


852
00:38:33,266 --> 00:38:35,516
or until timeout,
timeout is achieved.


853
00:38:35,516 --> 00:38:36,926
Thanks.


854
00:38:37,516 --> 00:38:43,586
[ Applause ]


855
00:38:44,086 --> 00:38:46,196
We have some new
Accessibility APIs.


856
00:38:46,196 --> 00:38:47,446
The new APIs are simpler.


857
00:38:48,576 --> 00:38:50,686
They are expressed - the
accessibility values,


858
00:38:50,686 --> 00:38:52,996
the accessibility values
for various UI elements


859
00:38:52,996 --> 00:38:57,226
and UI properties are expressed
directly as properties.


860
00:38:58,356 --> 00:38:59,516
There's no need to subclass.


861
00:39:00,286 --> 00:39:03,386
Good, somebody's
used the old APIs.


862
00:39:03,566 --> 00:39:06,196
And there are better
compile time warnings as well


863
00:39:06,196 --> 00:39:08,636
because there are now the actual
properties being used here.


864
00:39:08,636 --> 00:39:09,946
Let me give you an example.


865
00:39:10,276 --> 00:39:12,716
Before you've had this
accessibility attribute value


866
00:39:12,716 --> 00:39:14,886
method which you had to
overwrite, and you had a series


867
00:39:14,886 --> 00:39:16,186
of if statements
to deal with it.


868
00:39:16,446 --> 00:39:17,726
Now you can either just go ahead


869
00:39:17,726 --> 00:39:19,806
and overwrite the
accessibilityLabel method,


870
00:39:20,196 --> 00:39:21,006
fairly straightforward,


871
00:39:21,006 --> 00:39:22,826
or you can actually just
set the property as well


872
00:39:22,826 --> 00:39:24,326
if you're not subclassing the,


873
00:39:24,456 --> 00:39:26,086
subclassing that class
for other reasons.


874
00:39:26,606 --> 00:39:28,886
So, you know, much cleaner
- a much cleaner approach.


875
00:39:29,286 --> 00:39:32,746
Let me talk a bit about
power, and here I'm talking


876
00:39:32,746 --> 00:39:35,366
about power, the kind of power
that comes out of a wall socket.


877
00:39:36,136 --> 00:39:38,076
But even that kind of
- even with that kind


878
00:39:38,076 --> 00:39:39,806
of power comes great
responsibility,


879
00:39:39,936 --> 00:39:41,786
because we need to
use it wisely.


880
00:39:42,396 --> 00:39:46,096
A new API we've added across the
system in a number of classes


881
00:39:46,096 --> 00:39:48,406
in Cocoa is this concept
of quality of service.


882
00:39:49,526 --> 00:39:50,716
It's NSOperation,


883
00:39:50,716 --> 00:39:52,766
NSOperationQueue,
NSThread and so on.


884
00:39:53,896 --> 00:39:56,286
This allows indicating
the nature and importance


885
00:39:56,286 --> 00:40:00,536
of the work you're doing and
lets system manage resources


886
00:40:01,206 --> 00:40:05,976
between your process and even
across processes where possible.


887
00:40:06,046 --> 00:40:07,276
So let me talk about
what the values


888
00:40:07,276 --> 00:40:10,136
of this QualityOfService
property are.


889
00:40:10,136 --> 00:40:13,236
I'll just go through
use cases for it.


890
00:40:13,716 --> 00:40:16,636
The first one, UserInteractive,
is an interactive session


891
00:40:16,636 --> 00:40:19,336
with the user such
as a drawing program


892
00:40:19,336 --> 00:40:21,606
or maybe scrolling
an email message.


893
00:40:21,606 --> 00:40:25,256
You really want 60 frames per
second there for the user,


894
00:40:25,256 --> 00:40:27,116
and that represents
that kind of work.


895
00:40:27,606 --> 00:40:30,276
The next layer here,
UserInitiated is


896
00:40:30,276 --> 00:40:32,956
like when the user clicks on
email message, they want it


897
00:40:32,956 --> 00:40:34,016
to appear there very quickly,


898
00:40:34,016 --> 00:40:36,986
but maybe you don't have the
same 60 fps continuous behavior,


899
00:40:37,206 --> 00:40:39,816
although you still want to give,
you know, whatever is possible


900
00:40:39,816 --> 00:40:41,806
to get that to happen
as quickly as possible.


901
00:40:42,306 --> 00:40:44,656
Utility QualityOfService
is something


902
00:40:44,656 --> 00:40:45,886
like periodic mail fetch.


903
00:40:45,886 --> 00:40:48,456
The user expects it to happen,
expects it to happen fast


904
00:40:48,456 --> 00:40:50,676
on a regular basis but,
you know, it can be off


905
00:40:50,676 --> 00:40:53,046
by a few seconds if the system
is busy with other things.


906
00:40:53,606 --> 00:40:55,306
We have a Background
QualityOfService,


907
00:40:55,306 --> 00:40:57,426
which is like indexing,
which needs to happen


908
00:40:57,426 --> 00:40:59,346
but could be delayed if
there are more important


909
00:40:59,346 --> 00:41:00,066
things happening.


910
00:41:00,306 --> 00:41:03,626
And then the Default which
allows the QualityOfService


911
00:41:03,626 --> 00:41:07,186
to be inferred from other
operations that are going on.


912
00:41:07,226 --> 00:41:09,066
Sometimes you might have
a dependent operation


913
00:41:09,066 --> 00:41:12,916
that will dictate what the
resulting QualityOfService


914
00:41:12,986 --> 00:41:13,496
here is.


915
00:41:14,796 --> 00:41:16,036
We also have a new API,


916
00:41:16,206 --> 00:41:18,556
new class called
NSBackgroundActvityScheduler.


917
00:41:18,556 --> 00:41:22,346
This is basically a Cocoa-level
interface to XPC Activity APIs.


918
00:41:23,226 --> 00:41:26,116
This allows you to schedule
maintenance or background kinds


919
00:41:26,116 --> 00:41:28,996
of tasks, for instance,
periodic fetching of mail


920
00:41:28,996 --> 00:41:31,026
or maybe indexing, and so on,


921
00:41:31,026 --> 00:41:33,496
and you can provide
again quality of service


922
00:41:33,496 --> 00:41:35,276
that you want on this operation.


923
00:41:35,526 --> 00:41:37,526
We have a number of
talks about power.


924
00:41:37,956 --> 00:41:39,316
Here's pointers to two of them.


925
00:41:39,506 --> 00:41:41,686
One is tomorrow morning,
"Writing Energy Efficient Code,


926
00:41:41,686 --> 00:41:44,526
Part 1" and also Part 2
as well that you can go


927
00:41:44,526 --> 00:41:47,126
through after this one if you
want, and "Power, Performance


928
00:41:47,126 --> 00:41:49,306
and Diagnostics: What's
New in GCD and XPC,"


929
00:41:49,396 --> 00:41:51,136
and that's Thursday
afternoon at 2.


930
00:41:51,136 --> 00:41:56,366
Now, let me talk to you
a bit about NSStrings.


931
00:41:57,646 --> 00:42:00,446
We have a new API,
NSString Encoding Detector.


932
00:42:01,936 --> 00:42:06,556
This is to allow detecting
encodings of random bags


933
00:42:06,556 --> 00:42:09,996
of bytes which come
from who knows where,


934
00:42:09,996 --> 00:42:12,226
who knows where they've
been, but you need to show it


935
00:42:12,226 --> 00:42:15,496
to the user and, you know,
typically we - the encodings


936
00:42:15,496 --> 00:42:17,186
if there are some bad
characters in there


937
00:42:17,186 --> 00:42:19,776
or either badly generated
or corrupted along the way,


938
00:42:19,776 --> 00:42:21,936
it becomes pretty hard to
make heads or tails out of it,


939
00:42:21,936 --> 00:42:23,626
and that's what this
API tries to do.


940
00:42:24,116 --> 00:42:25,346
We have a number of options.


941
00:42:26,206 --> 00:42:29,326
Among the options are
the ability to specify


942
00:42:29,326 --> 00:42:32,256
which encodings to
include, consider for sure,


943
00:42:32,256 --> 00:42:33,866
or which encodings to exclude.


944
00:42:33,866 --> 00:42:37,236
So we can give hints to make
the operation more focused.


945
00:42:37,666 --> 00:42:41,026
You can tell us whether you
want lossy conversion or not.


946
00:42:41,266 --> 00:42:45,256
If encoding conversion is
not possible without loss,


947
00:42:45,406 --> 00:42:48,066
we'll just do it anyway and
maybe some characters are lost.


948
00:42:48,466 --> 00:42:50,836
And finally, or not finally,
this is just another option,


949
00:42:50,836 --> 00:42:52,126
you can provide a language hint


950
00:42:52,126 --> 00:42:55,556
which allows the encoding
conversion to again focus more


951
00:42:55,556 --> 00:42:57,956
if it knows what language
the encoding it was intended


952
00:42:58,016 --> 00:42:58,426
to be in.


953
00:42:58,976 --> 00:43:03,636
We have two small new
APIs, containsString


954
00:43:03,636 --> 00:43:05,546
and localizedCaseInsensitive
ContainsString.


955
00:43:05,546 --> 00:43:07,776
You might be thinking, you mean
though these weren't there?


956
00:43:08,196 --> 00:43:10,276
Well, they were, you know,
you could use range of string,


957
00:43:10,626 --> 00:43:12,896
but after some years
we've decided, you know,


958
00:43:12,896 --> 00:43:14,976
even though these
are just one liners--


959
00:43:15,516 --> 00:43:19,826
[ Applause ]


960
00:43:20,326 --> 00:43:21,046
Yeah, even-- thank you.


961
00:43:21,046 --> 00:43:23,306
Even though these are
one liners and, you know,


962
00:43:23,306 --> 00:43:25,576
that sort of offends
the API sensibility


963
00:43:25,576 --> 00:43:28,696
of why create a one line
convenience, they're really good


964
00:43:28,696 --> 00:43:30,536
for discoverability, you know,


965
00:43:30,536 --> 00:43:32,226
containsString is a
little more discoverable


966
00:43:32,226 --> 00:43:33,096
than a range of string.


967
00:43:33,096 --> 00:43:35,366
So, here we have them.


968
00:43:35,366 --> 00:43:37,276
OK, the one other thing
I want to talk to you


969
00:43:37,276 --> 00:43:39,636
about since this might
impact your apps is Tagged


970
00:43:39,636 --> 00:43:40,466
Pointer Strings.


971
00:43:40,886 --> 00:43:44,036
What we do here is we take
a whole NSString object


972
00:43:44,036 --> 00:43:46,946
and we stuff it into
the base pointer.


973
00:43:46,946 --> 00:43:49,066
Now, this is something we're
already doing with some objects


974
00:43:49,066 --> 00:43:51,256
like NSNumbers and NSDates,
and now we're doing them


975
00:43:51,256 --> 00:43:52,386
with NSStrings as well.


976
00:43:52,386 --> 00:43:55,386
Let me give you a visual
guide of how this works.


977
00:43:55,706 --> 00:43:57,786
Here you're creating
a UTF8String.


978
00:43:59,296 --> 00:44:02,426
Typically you have your object
pointer, the base pointer


979
00:44:02,426 --> 00:44:06,016
which is the pointer, and then
that in turn points to an object


980
00:44:06,016 --> 00:44:09,076
which contains the isa plus
some bookkeeping information


981
00:44:09,076 --> 00:44:11,076
and then the bytes
of the string.


982
00:44:11,566 --> 00:44:14,646
So, we just take all that and
we shove it just like that


983
00:44:14,646 --> 00:44:15,586
into the base pointer.


984
00:44:15,586 --> 00:44:16,586
I mean, you saw how that works.


985
00:44:17,096 --> 00:44:19,136
And now we don't need -
it's not a pointer anymore,


986
00:44:19,136 --> 00:44:20,206
so we can get rid
of the pointer.


987
00:44:20,206 --> 00:44:23,936
So, now in that 64 bits, we
have the whole string with -


988
00:44:23,936 --> 00:44:25,966
along with some bit
keeping information.


989
00:44:26,126 --> 00:44:29,156
Now, it turns out we can do
this for about 25 to 40 percent


990
00:44:29,156 --> 00:44:31,016
of your strings in
some applications.


991
00:44:31,806 --> 00:44:33,146
There are some things
to watch for.


992
00:44:33,856 --> 00:44:34,776
There is no isa pointer.


993
00:44:35,196 --> 00:44:37,026
Now, you weren't supposed to
be accessing the isa pointer,


994
00:44:37,026 --> 00:44:39,516
but if you were, you will
really crash for now.


995
00:44:41,156 --> 00:44:43,006
There are different
performance characteristics:


996
00:44:43,006 --> 00:44:46,326
Some operations get much faster
and some get a little slower.


997
00:44:46,846 --> 00:44:49,886
And there are better
out-of-bounds checking.


998
00:44:49,886 --> 00:44:52,116
We've made sure that
these can do much better


999
00:44:52,116 --> 00:44:53,106
for out-of-bounds checking.


1000
00:44:53,106 --> 00:44:54,686
We try to do a bit of
out-of-bounds checking,


1001
00:44:54,686 --> 00:44:55,986
but there are some
cases where we miss


1002
00:44:56,046 --> 00:44:57,396
and this actually
does a better job.


1003
00:44:57,836 --> 00:45:00,166
Since all of these three
are potential compatibility


1004
00:45:00,166 --> 00:45:03,676
concerns, we actually make it
so that these changes enabled


1005
00:45:04,036 --> 00:45:07,796
for 10.10 linked apps or
later but not earlier apps.


1006
00:45:07,916 --> 00:45:11,606
And so of course only for 64-bit
apps because trying to shove all


1007
00:45:11,606 --> 00:45:13,526
of them to a 30-bit
pointer is not fun.


1008
00:45:14,046 --> 00:45:16,826
Let me talk a bit
about formatters.


1009
00:45:16,826 --> 00:45:19,206
And here we have a bunch


1010
00:45:19,206 --> 00:45:21,466
of new formatter classes,
NSFormatter classes.


1011
00:45:22,376 --> 00:45:26,026
The first three are fairly
straightforward, MassFormatter,


1012
00:45:26,756 --> 00:45:28,956
EnergyFormatter and
LengthFormatter.


1013
00:45:30,956 --> 00:45:33,026
We also have a
DateIntervalFormatter


1014
00:45:33,026 --> 00:45:35,796
that will - should take two
dates and show you this -


1015
00:45:36,191 --> 00:45:38,191
[ Applause ]


1016
00:45:38,366 --> 00:45:38,836
Thank you.


1017
00:45:39,806 --> 00:45:43,156
And a DateComponentsFormatter,
which will show you a duration


1018
00:45:43,406 --> 00:45:46,756
such as 3 hours, 25 minutes.


1019
00:45:46,756 --> 00:45:49,356
And these have some various
customization options.


1020
00:45:49,356 --> 00:45:51,996
For instance the last one
could be customized to say,


1021
00:45:51,996 --> 00:45:53,976
you know about 10
minutes remaining.


1022
00:45:54,516 --> 00:45:58,276
[ Applause ]


1023
00:45:58,776 --> 00:46:01,506
And now note that these
are for formatting only,


1024
00:46:01,626 --> 00:46:07,916
not for parsing, so
it's for output of data.


1025
00:46:07,916 --> 00:46:09,726
We have a formatting
context property


1026
00:46:09,726 --> 00:46:14,286
on all our NSFormatters, and
here is what it looks like,


1027
00:46:14,406 --> 00:46:16,836
and I'll just explain to
you what some of these are.


1028
00:46:17,356 --> 00:46:19,896
Well, what formatting context
does is it tells the formatter


1029
00:46:20,096 --> 00:46:22,596
where the result of the
formatting is intended


1030
00:46:22,646 --> 00:46:24,266
to be used, and that allows it


1031
00:46:24,266 --> 00:46:26,816
to give a different
result where possible.


1032
00:46:27,576 --> 00:46:32,636
For instance, if you're
formatting dates in French,


1033
00:46:33,136 --> 00:46:34,996
BeginningOfSentence
would look like this,


1034
00:46:35,046 --> 00:46:37,936
Juin with a capital J, while
the MiddleOfSentence would use a


1035
00:46:37,936 --> 00:46:38,766
little j.


1036
00:46:39,176 --> 00:46:41,006
Now, this dynamic here,
one is pretty cool


1037
00:46:41,046 --> 00:46:44,156
because what it does
is depending


1038
00:46:44,156 --> 00:46:48,066
on whether the result
is used in the context


1039
00:46:48,066 --> 00:46:51,156
of NSString formatting,
depending on whether it's used


1040
00:46:51,156 --> 00:46:53,936
at the BeginningOfSentence,
MiddleOfSentence or Standalone,


1041
00:46:53,936 --> 00:46:55,736
it will use one of the
other three options


1042
00:46:55,786 --> 00:46:56,456
to do the right thing.


1043
00:46:56,716 --> 00:46:58,716
So, it's - that one is
usually the one you want


1044
00:46:58,716 --> 00:47:03,416
to use unless you definitely
know where the result is going.


1045
00:47:03,516 --> 00:47:05,966
There was internationalization
talk this morning.


1046
00:47:05,966 --> 00:47:09,036
If you missed it, you can
catch it on video of course.


1047
00:47:10,006 --> 00:47:13,276
Let me talk a bit about
iCloud, and you heard


1048
00:47:13,276 --> 00:47:14,996
about iCloud yesterday,
of course.


1049
00:47:15,206 --> 00:47:17,576
We have new APIs,
the CloudKit APIs.


1050
00:47:17,576 --> 00:47:19,776
This is a new framework for
managing structured data


1051
00:47:19,776 --> 00:47:23,526
on iCloud and for sharing such
data between users as well.


1052
00:47:24,146 --> 00:47:27,096
And CloudKit is also, as
an implementation detail,


1053
00:47:27,096 --> 00:47:30,456
the back-end for iCloud
document storage as well.


1054
00:47:30,456 --> 00:47:35,346
I'm not going to talk about
CloudKit anymore other


1055
00:47:35,346 --> 00:47:37,506
than just telling you there are
two great sessions you can go


1056
00:47:37,506 --> 00:47:39,176
to this afternoon and
Thursday afternoon.


1057
00:47:39,176 --> 00:47:42,726
Now, iCloud document
storage, as you know,


1058
00:47:42,726 --> 00:47:45,106
iCloud document storage is
something we've had for a while,


1059
00:47:45,106 --> 00:47:48,446
and NSDocument and UIDocument
provide support for it.


1060
00:47:50,216 --> 00:47:52,656
So, it has a new back-end
in the form of CloudKit,


1061
00:47:53,776 --> 00:47:54,906
and we also have another feature


1062
00:47:54,906 --> 00:47:57,526
where document versions are
now available on iCloud.


1063
00:47:59,116 --> 00:48:01,736
In addition, you've heard
about iCloud Drive yesterday


1064
00:48:01,736 --> 00:48:04,956
where all applications can
now read and write files


1065
00:48:04,956 --> 00:48:10,936
from iCloud, thanks to
the iCloud Drive as well.


1066
00:48:11,126 --> 00:48:16,346
Now, in moving to the new
back-end and taking advantages


1067
00:48:16,346 --> 00:48:19,826
of some of these other changes,
some of the way we worked


1068
00:48:19,826 --> 00:48:21,596
with iCloud documents
has changed.


1069
00:48:21,896 --> 00:48:24,976
Now, of course if you're using
NSDocument and UIDocument,


1070
00:48:26,016 --> 00:48:28,816
perhaps you don't have to worry
about these, perhaps you do.


1071
00:48:29,026 --> 00:48:32,116
Handling of non-downloaded
files has changed.


1072
00:48:32,116 --> 00:48:34,346
Previously, there would be
a file with the same name


1073
00:48:34,346 --> 00:48:37,606
as the non-downloaded document,
and we just fill in over time.


1074
00:48:37,986 --> 00:48:39,316
Now, such files are tracked


1075
00:48:39,316 --> 00:48:41,166
with invisible files
with different names.


1076
00:48:41,376 --> 00:48:44,406
If you're using APIs such as
MetadataQuery, MetadataItem,


1077
00:48:44,406 --> 00:48:46,466
FileCoordinator, you're
probably in good shape


1078
00:48:46,466 --> 00:48:47,896
and you probably don't
have to worry about this.


1079
00:48:48,346 --> 00:48:50,756
Well, if you're enumerating
the iCloud container yourself,


1080
00:48:51,176 --> 00:48:54,946
you need to ignore hidden
or unrecognized files,


1081
00:48:55,096 --> 00:48:57,846
but better yet, just switch
to one of these other APIs


1082
00:48:57,846 --> 00:48:59,446
if you can, and the
higher level the better.


1083
00:48:59,836 --> 00:49:04,636
We also have some APIs on NSURL
that allow you to get metadata


1084
00:49:04,636 --> 00:49:07,826
for possibly undownloaded
elements,


1085
00:49:07,826 --> 00:49:08,306
and this is


1086
00:49:08,306 --> 00:49:10,276
like
getPromisedItemResourceValue


1087
00:49:10,276 --> 00:49:13,096
forKey error and there are few
other methods like this as well.


1088
00:49:13,526 --> 00:49:19,526
Just a quick update on
Core Data: We have a number


1089
00:49:19,526 --> 00:49:20,826
of new APIs in Core Data.


1090
00:49:21,346 --> 00:49:24,606
NSBatchUpdateRequest allows
you to do batch updates,


1091
00:49:25,976 --> 00:49:28,196
and that's actually
pretty cool on, you know,


1092
00:49:28,196 --> 00:49:30,376
small memory situations as well
if you're going to do a lot


1093
00:49:30,376 --> 00:49:31,426
of updates efficiently.


1094
00:49:32,096 --> 00:49:34,616
NSAsynchronousFetchRequest
is a new class


1095
00:49:34,616 --> 00:49:36,066
for doing asynchronous fetching.


1096
00:49:36,446 --> 00:49:38,856
It provides NSProgress
support, which allows you


1097
00:49:38,856 --> 00:49:41,446
to monitor progress and also


1098
00:49:41,446 --> 00:49:43,316
in fact cancel the
operation as well.


1099
00:49:44,066 --> 00:49:45,666
And finally, of course,
it's worth mentioning


1100
00:49:45,666 --> 00:49:51,486
that the new back-end for iCloud
is also underneath Core Data


1101
00:49:51,486 --> 00:49:51,936
as well.


1102
00:49:52,256 --> 00:49:53,696
So, there's infrastructure
improvements.


1103
00:49:54,476 --> 00:49:55,706
We do have a related session,


1104
00:49:55,706 --> 00:49:57,496
"What's New in Core
Data," Thursday morning.


1105
00:49:59,276 --> 00:50:01,086
Auto Layout, we have some -


1106
00:50:01,256 --> 00:50:03,556
we've been improving
Auto Layout all along.


1107
00:50:03,556 --> 00:50:07,586
Auto Layout remains a
very important facility


1108
00:50:07,586 --> 00:50:11,906
in our frameworks
both on iOS and OS X.


1109
00:50:12,076 --> 00:50:13,986
We have some new APIs
here, I'm just going


1110
00:50:14,276 --> 00:50:15,876
to talk about a few of them.


1111
00:50:16,006 --> 00:50:18,726
These allow you to activate
NSLayoutConstraints directly.


1112
00:50:18,726 --> 00:50:21,236
As you might know, a
LayoutConstraint has pointer


1113
00:50:21,236 --> 00:50:25,506
to the views that it's
defining a relationship for.


1114
00:50:25,746 --> 00:50:28,916
So, rather than talking to
the views, you can now talk


1115
00:50:28,916 --> 00:50:31,176
to the LayoutConstraints
directly to activate them,


1116
00:50:31,176 --> 00:50:34,136
deactivate them, which
is a much cleaner model.


1117
00:50:34,396 --> 00:50:36,686
So, what this means is
these three methods here -


1118
00:50:36,686 --> 00:50:40,366
the two methods plus the
property replace these four


1119
00:50:40,366 --> 00:50:41,676
existing methods effectively.


1120
00:50:43,856 --> 00:50:46,476
NSCell is on its way
to formal deprecation,


1121
00:50:46,476 --> 00:50:48,506
I think we've been saying
this for a few years now.


1122
00:50:48,986 --> 00:50:52,206
I mean it still is.


1123
00:50:53,716 --> 00:50:55,916
So, some NSCell APIs
have been promoted


1124
00:50:55,916 --> 00:50:57,846
to their corresponding
control subclasses,


1125
00:50:58,296 --> 00:51:01,146
and so you should use the
controls where possible,


1126
00:51:01,356 --> 00:51:03,476
you know, don't use
cells controls now,


1127
00:51:03,536 --> 00:51:07,336
have the APIs hopefully
and you can refer to them.


1128
00:51:07,466 --> 00:51:09,456
NSCell-based TableView
has been deprecated,


1129
00:51:09,456 --> 00:51:12,126
use the view-based TableView
that also allows you to get some


1130
00:51:12,126 --> 00:51:14,156
of our new - the new features
we've been showing you


1131
00:51:14,156 --> 00:51:16,216
with new look and so
on much more easily.


1132
00:51:17,006 --> 00:51:19,386
NSMatrix-based NSBrowser
is deprecated.


1133
00:51:19,386 --> 00:51:21,046
Use the item-based
NSBrowser APIs.


1134
00:51:21,046 --> 00:51:25,646
And NSMatrix is also on its way
out since it's so NSCell-based.


1135
00:51:26,886 --> 00:51:30,246
One of the most common uses
for NSMatrixes was of course


1136
00:51:30,246 --> 00:51:32,296
that radio button behavior
where you click one


1137
00:51:32,296 --> 00:51:33,366
and all the others turn off.


1138
00:51:33,706 --> 00:51:35,146
Now, sibling radio buttons


1139
00:51:35,146 --> 00:51:38,106
with the same action will
now operate as a group.


1140
00:51:38,106 --> 00:51:40,126
So, this is a way to get
NSMatrix functionality


1141
00:51:40,126 --> 00:51:41,406
without using NSMatrix.


1142
00:51:41,856 --> 00:51:47,726
OK, now I'm going to go quickly
through some other new stuff.


1143
00:51:48,036 --> 00:51:50,886
You can slow this down when
you're watching the video,


1144
00:51:50,886 --> 00:51:52,216
if you want to catch
more about it.


1145
00:51:52,716 --> 00:51:55,186
So, NSTableView and
OutlineViews,


1146
00:51:55,186 --> 00:51:56,846
you can create these
statically now.


1147
00:51:56,846 --> 00:51:59,176
If you just have a fixed
TableView with like five rows


1148
00:51:59,176 --> 00:52:01,216
and you don't want to do
anything else, you don't want


1149
00:52:01,216 --> 00:52:02,896
to provide data source,
you can do that now.


1150
00:52:02,896 --> 00:52:04,556
There's a way to do it.


1151
00:52:04,556 --> 00:52:07,906
NSImage allows you to specify
fancy resizing behaviors.


1152
00:52:07,906 --> 00:52:09,486
You can specify capInsets.


1153
00:52:09,486 --> 00:52:11,926
You can also specify
resizingMode,


1154
00:52:11,926 --> 00:52:14,056
and you can also use
such NSImages as masks


1155
00:52:14,376 --> 00:52:18,256
for a digital effect viewpoint,
so that's pretty good.


1156
00:52:18,256 --> 00:52:21,956
NSBitmapImageReps allow
you to specify in DNS


1157
00:52:22,026 --> 00:52:25,516
and other bitmap format so you
can actually support BGRA data


1158
00:52:25,886 --> 00:52:29,286
for instance, if you're
into that sort of thing.


1159
00:52:29,856 --> 00:52:35,406
And asset catalogs in Xcode
now support more formats


1160
00:52:35,406 --> 00:52:39,886
like JPEG images, and PDFs, and
also allow you to do slicing


1161
00:52:39,886 --> 00:52:43,266
and then use of course the
NSImage capInsets API to expose


1162
00:52:43,266 --> 00:52:44,376
that slice information.


1163
00:52:44,706 --> 00:52:48,386
You can do letterpress text
effects with AttributedString.


1164
00:52:49,826 --> 00:52:52,316
Popovers now have a much
easier way to detach.


1165
00:52:52,846 --> 00:52:54,766
You don't have to worry about
creating the window or whatever,


1166
00:52:54,806 --> 00:52:56,826
just respond to this
delegate method.


1167
00:52:57,456 --> 00:52:59,736
ComboBox, DatePicker,
PopupButton, SearchField,


1168
00:52:59,736 --> 00:53:02,506
and SplitView now all do
right-to-left properly


1169
00:53:02,506 --> 00:53:05,196
and will flip as you might
- as the user might expect,


1170
00:53:05,366 --> 00:53:07,936
and so you don't have
to worry about this.


1171
00:53:08,936 --> 00:53:11,766
NibLoading has a new
API to do custom setup


1172
00:53:11,766 --> 00:53:14,446
in your view subclass
for live views support


1173
00:53:14,446 --> 00:53:15,356
in Interface Builder.


1174
00:53:15,686 --> 00:53:18,246
So this is just to use in the
context of Interface Builder


1175
00:53:18,246 --> 00:53:20,026
if you want to do
something custom, well,


1176
00:53:20,176 --> 00:53:21,176
for debugging purposes.


1177
00:53:22,456 --> 00:53:25,016
OpenGLContext, you can
now query some properties


1178
00:53:25,016 --> 00:53:26,956
so you don't have to go
down to the CGLContext.


1179
00:53:27,576 --> 00:53:31,726
FileCoordinator has methods
for asynchronous waiting.


1180
00:53:32,206 --> 00:53:34,286
So, rather than having
to call these methods


1181
00:53:34,286 --> 00:53:35,626
on your own background queues,


1182
00:53:35,626 --> 00:53:38,266
you let the file coordinator
create and manage the queues


1183
00:53:38,266 --> 00:53:39,966
for you, it's a much
better way to do this.


1184
00:53:41,176 --> 00:53:44,066
NSWorkspace has methods
- as you're opening URLs,


1185
00:53:44,066 --> 00:53:47,796
you can now specify exactly
which app you want to be used.


1186
00:53:49,416 --> 00:53:52,156
And NSURL also has
a lot of new APIs.


1187
00:53:52,156 --> 00:53:54,656
One for instance will allow
you to resolve alias files


1188
00:53:54,756 --> 00:53:57,636
with
URLByResolvingAliasFileAtURL.


1189
00:54:00,026 --> 00:54:03,656
OK, and we have last two,
NSProcessInfo has methods


1190
00:54:03,686 --> 00:54:04,976
to get the
operatingSystemVersion,


1191
00:54:04,976 --> 00:54:06,656
and you can do
operatingSystemVersion


1192
00:54:06,656 --> 00:54:08,006
comparisons if you must.


1193
00:54:08,776 --> 00:54:11,596
And NSXPCConnection has
support for NSProgress support


1194
00:54:11,736 --> 00:54:14,476
across processes, which actually
is a pretty cool feature


1195
00:54:14,476 --> 00:54:14,836
as well.


1196
00:54:16,116 --> 00:54:20,306
OK. So no more pictures of
food because we're done.


1197
00:54:20,336 --> 00:54:23,706
Here are the things we talked
about, many exciting features,


1198
00:54:23,706 --> 00:54:25,266
some of these are
free, some not.


1199
00:54:25,936 --> 00:54:28,886
Now, as you go down to lunch, I
expect you to try to adopt these


1200
00:54:28,886 --> 00:54:31,246
in your applications, see how
it's working and come find us


1201
00:54:31,246 --> 00:54:33,896
at the labs, so if
it doesn't work.


1202
00:54:33,896 --> 00:54:36,886
And here is information about
who to contact, Jake Behrens,


1203
00:54:37,256 --> 00:54:39,326
he's sitting right there,
he's a pretty great guy.


1204
00:54:39,796 --> 00:54:41,526
And one note, our release notes


1205
00:54:41,796 --> 00:54:44,626
for Yosemite are
not yet available.


1206
00:54:44,626 --> 00:54:46,406
We hope to make them
available very soon.


1207
00:54:47,626 --> 00:54:50,216
And the related sessions
I've shown you most of these,


1208
00:54:50,216 --> 00:54:51,326
"What's New in Interface
Builder,"


1209
00:54:51,326 --> 00:54:52,316
I hadn't shown you that before.


1210
00:54:52,316 --> 00:54:53,356
That's tomorrow afternoon.


1211
00:54:53,556 --> 00:54:54,976
And with that, thank
you very much.


1212
00:54:55,516 --> 00:55:03,890
[ Applause ]

