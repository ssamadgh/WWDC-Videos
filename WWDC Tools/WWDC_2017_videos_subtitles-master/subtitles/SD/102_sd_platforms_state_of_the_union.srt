1
00:00:17,316 --> 00:00:18,796
>> Ladies and gentlemen, please


2
00:00:18,796 --> 00:00:20,286
welcome Vice President of


3
00:00:20,286 --> 00:00:22,636
Platform Technologies, Andreas


4
00:00:22,636 --> 00:00:23,216
Wendker.


5
00:00:24,516 --> 00:00:33,496
[ Applause ]


6
00:00:33,996 --> 00:00:36,226
>> Good afternoon.


7
00:00:36,226 --> 00:00:37,606
Welcome to WWDC.


8
00:00:38,266 --> 00:00:39,616
As you heard this morning in the


9
00:00:39,716 --> 00:00:41,516
keynote, this is a year with a


10
00:00:41,516 --> 00:00:43,096
strong focus on technology


11
00:00:43,096 --> 00:00:44,666
fundamentals and refinements


12
00:00:44,666 --> 00:00:46,216
across all Apple product lines.


13
00:00:47,416 --> 00:00:49,016
We're introducing numerous APIs


14
00:00:49,016 --> 00:00:51,456
that enable new use cases for


15
00:00:51,456 --> 00:00:52,816
your apps, covering a broad


16
00:00:52,816 --> 00:00:53,886
spectrum that ranges from


17
00:00:53,886 --> 00:00:55,816
machine learning to augmented


18
00:00:55,816 --> 00:00:57,426
and virtual reality, to access


19
00:00:57,706 --> 00:00:59,486
to the music, to the Apple Music


20
00:00:59,486 --> 00:00:59,866
Library.


21
00:01:01,616 --> 00:01:03,346
We're also making improvements


22
00:01:03,396 --> 00:01:04,396
to many of our core


23
00:01:04,396 --> 00:01:05,075
technologies.


24
00:01:05,446 --> 00:01:07,486
For example, our new modern file


25
00:01:07,596 --> 00:01:09,496
system, APFS, is now even more


26
00:01:09,496 --> 00:01:09,946
powerful.


27
00:01:10,556 --> 00:01:12,426
That created a new, much faster


28
00:01:12,426 --> 00:01:14,486
version of method, and we helped


29
00:01:14,486 --> 00:01:15,926
define and adopt a new


30
00:01:16,066 --> 00:01:17,546
high-efficiency image format


31
00:01:17,786 --> 00:01:18,876
with advanced compression.


32
00:01:20,196 --> 00:01:21,916
Now, most of these technologies


33
00:01:21,916 --> 00:01:23,476
and APIs apply to all our


34
00:01:23,476 --> 00:01:24,706
operating systems across the


35
00:01:24,706 --> 00:01:26,066
board, so they're moving forward


36
00:01:26,066 --> 00:01:26,406
together.


37
00:01:27,486 --> 00:01:28,476
But let's also take a look at


38
00:01:28,476 --> 00:01:29,796
some specific highlights that


39
00:01:29,796 --> 00:01:31,226
affect you as software


40
00:01:33,076 --> 00:01:33,526
developers.


41
00:01:33,526 --> 00:01:35,406
iOS 11 has a huge number of


42
00:01:35,406 --> 00:01:37,466
incredible features, but perhaps


43
00:01:37,466 --> 00:01:38,746
most importantly, it is the


44
00:01:38,746 --> 00:01:40,726
biggest iPad release ever, and


45
00:01:41,066 --> 00:01:42,626
it turns iPad into a major


46
00:01:42,626 --> 00:01:44,076
productivity device with a new


47
00:01:44,076 --> 00:01:46,236
Dock, drag and drop, find


48
00:01:46,236 --> 00:01:47,426
management, and enhanced


49
00:01:47,426 --> 00:01:48,216
multitasking.


50
00:01:48,696 --> 00:01:51,516
In macOS, you really took the


51
00:01:51,516 --> 00:01:52,926
time to broadly clean up


52
00:01:52,926 --> 00:01:54,236
performance and animations.


53
00:01:54,236 --> 00:01:56,796
And for the additional support


54
00:01:56,796 --> 00:01:58,476
for Fusion Drives and for disk


55
00:01:58,476 --> 00:02:00,336
encryption, APFS is now ready to


56
00:02:00,336 --> 00:02:01,516
come to the Mac as a fully


57
00:02:01,516 --> 00:02:02,576
supported file system.


58
00:02:03,116 --> 00:02:05,576
You also laid the groundwork for


59
00:02:05,576 --> 00:02:06,696
turning the Mac into a virtual


60
00:02:06,696 --> 00:02:07,716
reality powerhouse.


61
00:02:08,276 --> 00:02:11,876
And for watchOS, you made our UI


62
00:02:11,876 --> 00:02:13,506
components for flexible so that


63
00:02:13,506 --> 00:02:14,966
you can create more custom user


64
00:02:14,966 --> 00:02:15,716
experiences.


65
00:02:16,576 --> 00:02:18,566
New modes for navigation and


66
00:02:18,566 --> 00:02:20,226
audio recording allow your apps


67
00:02:20,276 --> 00:02:22,106
to continue processing data and


68
00:02:22,106 --> 00:02:23,376
providing feedback to the user,


69
00:02:23,376 --> 00:02:24,076
even when running in the


70
00:02:24,076 --> 00:02:24,526
background.


71
00:02:24,526 --> 00:02:26,656
And the new unified app runtime


72
00:02:26,796 --> 00:02:28,086
keeps your apps more responsive.


73
00:02:28,716 --> 00:02:31,236
You also added support for Core


74
00:02:31,236 --> 00:02:32,396
Bluetooth so that you can now


75
00:02:32,396 --> 00:02:34,466
directly connect to BTLE devices


76
00:02:34,776 --> 00:02:36,406
and display data from them right


77
00:02:36,406 --> 00:02:37,216
on the user's wrist.


78
00:02:37,216 --> 00:02:40,896
And in tvOS, we implemented a


79
00:02:40,896 --> 00:02:42,346
wide variety of enhancements


80
00:02:42,346 --> 00:02:43,486
that you can take advantage of


81
00:02:43,486 --> 00:02:44,646
for rounding out your apps'


82
00:02:44,646 --> 00:02:46,046
functionality for all your


83
00:02:46,046 --> 00:02:47,546
users, including right-to-left


84
00:02:47,546 --> 00:02:48,656
support for the appropriate


85
00:02:48,656 --> 00:02:49,166
languages.


86
00:02:49,476 --> 00:02:52,556
And beyond our operating


87
00:02:52,556 --> 00:02:53,816
systems, you're also hard at


88
00:02:53,886 --> 00:02:55,546
work on improving our general


89
00:02:55,546 --> 00:02:57,086
developer ecosystem and the


90
00:02:57,236 --> 00:02:58,666
support they give you for


91
00:02:58,666 --> 00:03:00,726
marketing and shipping apps.


92
00:03:01,316 --> 00:03:03,026
We increased the number of users


93
00:03:03,026 --> 00:03:03,946
you can have, and you shipped


94
00:03:03,946 --> 00:03:05,376
beta versions of your apps in


95
00:03:05,376 --> 00:03:05,946
TestFlight.


96
00:03:06,726 --> 00:03:08,206
And the App Store now allows you


97
00:03:08,206 --> 00:03:10,096
to rule out updates to your apps


98
00:03:10,096 --> 00:03:11,396
over a period of several days.


99
00:03:12,176 --> 00:03:13,606
You'll be able to respond to


100
00:03:13,606 --> 00:03:15,406
user feedback, user reviews of


101
00:03:15,456 --> 00:03:15,926
your apps.


102
00:03:16,306 --> 00:03:17,036
You'll be able to post


103
00:03:17,036 --> 00:03:18,386
promotional materials on your


104
00:03:18,386 --> 00:03:20,006
Store pages and much, much more.


105
00:03:22,096 --> 00:03:23,836
And we are modernizing the


106
00:03:23,836 --> 00:03:25,416
content in our App Stores.


107
00:03:25,916 --> 00:03:26,946
We've been working for a while


108
00:03:26,946 --> 00:03:28,856
now on getting all iOS software


109
00:03:28,856 --> 00:03:30,306
to take advantage of the power


110
00:03:30,306 --> 00:03:32,296
and performance for our 64-bit


111
00:03:32,296 --> 00:03:32,896
processors.


112
00:03:33,306 --> 00:03:35,206
With iOS 11, you're completing


113
00:03:35,206 --> 00:03:35,906
this transition.


114
00:03:36,456 --> 00:03:38,146
You're going to thin iOS 11 to


115
00:03:38,146 --> 00:03:40,756
be 64-bit only, and 32-bit apps


116
00:03:40,886 --> 00:03:42,196
are not going to be supported


117
00:03:42,196 --> 00:03:42,616
anymore.


118
00:03:43,106 --> 00:03:45,826
And with that, it's now time to


119
00:03:45,826 --> 00:03:47,176
turn our attention to doing the


120
00:03:47,246 --> 00:03:48,326
same with macOS.


121
00:03:48,876 --> 00:03:50,306
The transition to 64-bit-only


122
00:03:50,306 --> 00:03:51,836
Mac apps is going to take place


123
00:03:51,836 --> 00:03:53,496
very similarly to how we handled


124
00:03:53,496 --> 00:03:54,516
it on iOS.


125
00:03:55,306 --> 00:03:57,416
Most importantly, High Sierra is


126
00:03:57,416 --> 00:03:58,806
going to be the last macOS


127
00:03:58,806 --> 00:04:00,836
release to fully support 32-bit


128
00:04:00,836 --> 00:04:02,376
apps without compromises.


129
00:04:03,126 --> 00:04:04,506
In the next major release after


130
00:04:04,506 --> 00:04:05,616
High Sierra, you're going to


131
00:04:05,616 --> 00:04:07,336
aggressively start warning users


132
00:04:07,906 --> 00:04:09,466
if apps are not compatible for


133
00:04:09,466 --> 00:04:12,186
64-bit.


134
00:04:12,386 --> 00:04:13,416
You're updating the Mac App


135
00:04:13,416 --> 00:04:14,536
Store rules accordingly.


136
00:04:14,976 --> 00:04:16,375
In about six months, you'll


137
00:04:16,375 --> 00:04:17,875
require that all new apps


138
00:04:17,875 --> 00:04:19,185
submitted to the Mac App Store


139
00:04:19,185 --> 00:04:21,776
will be 64-bit capable and, in a


140
00:04:21,776 --> 00:04:23,396
year from now, will require all


141
00:04:23,396 --> 00:04:25,406
new apps and updates to existing


142
00:04:25,406 --> 00:04:27,486
apps to be 64-bit only when


143
00:04:27,486 --> 00:04:28,746
submitted to the Mac App Store.


144
00:04:29,296 --> 00:04:32,616
So for the next 90 minutes or


145
00:04:32,616 --> 00:04:34,106
so, they're going to go deep on


146
00:04:34,106 --> 00:04:35,546
the most important APIs and


147
00:04:35,546 --> 00:04:36,366
technologies that we're


148
00:04:36,366 --> 00:04:37,286
announcing today.


149
00:04:37,636 --> 00:04:38,656
They're also going to cover our


150
00:04:38,656 --> 00:04:40,136
developer tools in depth.


151
00:04:40,576 --> 00:04:41,606
In fact, they're going to start


152
00:04:41,606 --> 00:04:42,496
with Swift Playgrounds.


153
00:04:42,636 --> 00:04:44,146
I'm going to hand it over to


154
00:04:44,146 --> 00:04:45,666
Matthew [inaudible] for that.


155
00:04:46,516 --> 00:04:51,116
[ Applause ]


156
00:04:51,616 --> 00:04:52,496
>> Thank you, Andreas.


157
00:04:53,276 --> 00:04:54,726
Swift Playgrounds has brought


158
00:04:54,726 --> 00:04:56,366
something new and important to


159
00:04:56,366 --> 00:04:58,106
education -- teaching


160
00:04:58,176 --> 00:04:59,976
programming to kids in a fun way


161
00:05:00,356 --> 00:05:01,256
using real code.


162
00:05:01,696 --> 00:05:03,076
And the response has been


163
00:05:03,186 --> 00:05:03,966
tremendous.


164
00:05:04,416 --> 00:05:06,016
After less than ten months on


165
00:05:06,016 --> 00:05:07,606
the App Store, over one million


166
00:05:07,606 --> 00:05:09,056
people have started to code with


167
00:05:09,056 --> 00:05:09,996
Swift Playgrounds.


168
00:05:10,546 --> 00:05:12,056
And these users are from all


169
00:05:12,056 --> 00:05:13,406
over the world, as we made the


170
00:05:13,406 --> 00:05:15,716
app and content available in six


171
00:05:15,806 --> 00:05:16,596
localizations.


172
00:05:17,176 --> 00:05:19,536
In fact, almost two-thirds of


173
00:05:19,536 --> 00:05:21,396
these users are from outside the


174
00:05:21,396 --> 00:05:23,266
United States, making Swift


175
00:05:23,266 --> 00:05:24,966
Playgrounds an international


176
00:05:25,036 --> 00:05:25,586
success.


177
00:05:27,736 --> 00:05:29,006
Since our first release last


178
00:05:29,006 --> 00:05:30,296
year, we've added a number of


179
00:05:30,296 --> 00:05:31,876
new features to the application,


180
00:05:32,416 --> 00:05:33,296
such as line-by-line


181
00:05:33,296 --> 00:05:34,516
highlighting of your code as


182
00:05:34,516 --> 00:05:36,116
it's running, content


183
00:05:36,116 --> 00:05:37,936
notifications when new content's


184
00:05:37,936 --> 00:05:39,796
available, and the ability to


185
00:05:39,796 --> 00:05:41,456
add new Playground pages.


186
00:05:42,206 --> 00:05:43,496
These features and others


187
00:05:43,546 --> 00:05:45,466
alongside new content has given


188
00:05:45,466 --> 00:05:47,216
Swift Playgrounds fantastic


189
00:05:47,296 --> 00:05:47,716
momentum.


190
00:05:48,606 --> 00:05:49,856
Now, as you may have already


191
00:05:49,856 --> 00:05:51,636
heard, today we're making a new


192
00:05:51,636 --> 00:05:53,126
version of Swift Playgrounds


193
00:05:53,126 --> 00:05:55,136
available, version 1.5.


194
00:05:55,736 --> 00:05:57,006
And in this release, we're


195
00:05:57,006 --> 00:05:58,926
making it easier for users to


196
00:05:58,926 --> 00:06:00,526
connect to Bluetooth robots,


197
00:06:00,816 --> 00:06:02,236
drones, and devices.


198
00:06:03,086 --> 00:06:05,356
And this takes Swift out into


199
00:06:05,356 --> 00:06:07,116
the real world, venturing even


200
00:06:07,276 --> 00:06:08,216
outdoors.


201
00:06:08,666 --> 00:06:10,686
And it harmonizes naturally as


202
00:06:10,686 --> 00:06:12,016
your programming skills evolve.


203
00:06:12,016 --> 00:06:14,376
Now, with this release, we have


204
00:06:14,376 --> 00:06:15,796
worked with some amazing


205
00:06:15,876 --> 00:06:17,386
partners who also wanted to


206
00:06:17,386 --> 00:06:19,176
design great experiences for


207
00:06:19,176 --> 00:06:22,596
their devices using Swift, like


208
00:06:22,776 --> 00:06:24,226
Parrot with their mini-drones


209
00:06:24,226 --> 00:06:27,126
who can fly and flip, UBTECH


210
00:06:27,326 --> 00:06:28,916
with their buildable and


211
00:06:28,916 --> 00:06:32,786
programmable MeeBot, Sphero with


212
00:06:32,786 --> 00:06:34,906
their dynamic Sprk+ robotic


213
00:06:35,006 --> 00:06:37,936
ball, Wonder Workshop and the


214
00:06:37,936 --> 00:06:39,936
racing and talking Dash,


215
00:06:41,266 --> 00:06:43,126
Skoogmusic and their Tactile


216
00:06:43,196 --> 00:06:47,716
Musical cube, and MINDSTORMS EV3


217
00:06:47,816 --> 00:06:48,606
by LEGO.


218
00:06:50,516 --> 00:06:55,966
[ Applause ]


219
00:06:56,466 --> 00:06:57,876
The limitless possibilities you


220
00:06:57,876 --> 00:06:59,526
can build with MINDSTORMS make


221
00:06:59,526 --> 00:07:01,286
it a perfect pairing with Swift


222
00:07:01,286 --> 00:07:01,936
Playgrounds.


223
00:07:02,406 --> 00:07:03,806
In fact, all of our partners


224
00:07:03,806 --> 00:07:04,996
have truly embraced the


225
00:07:04,996 --> 00:07:06,416
interactivity of the app,


226
00:07:06,996 --> 00:07:08,686
designing intuitive APIs you can


227
00:07:08,686 --> 00:07:10,436
drag and drop and presenting


228
00:07:10,476 --> 00:07:12,166
up-to-date device and sensor


229
00:07:12,166 --> 00:07:13,486
data in the live view.


230
00:07:14,146 --> 00:07:16,256
And this combination is truly


231
00:07:16,256 --> 00:07:17,656
captivating as you see your


232
00:07:17,726 --> 00:07:19,716
thoughts become code and bring


233
00:07:19,716 --> 00:07:20,876
devices to life.


234
00:07:22,006 --> 00:07:23,416
Now, all of our partners have


235
00:07:23,416 --> 00:07:24,936
designed Playgrounds to work


236
00:07:24,936 --> 00:07:26,466
with their devices, and you can


237
00:07:26,466 --> 00:07:28,396
find them in the new Accessories


238
00:07:28,426 --> 00:07:29,956
tab of the app, where there are


239
00:07:29,956 --> 00:07:31,436
samples to play with and


240
00:07:31,436 --> 00:07:33,126
templates to create your own


241
00:07:33,836 --> 00:07:34,286
file.


242
00:07:34,286 --> 00:07:35,696
And we are truly eager to see


243
00:07:35,696 --> 00:07:37,946
how users of all ages take


244
00:07:37,946 --> 00:07:39,036
advantage of the new Swift


245
00:07:39,036 --> 00:07:40,556
Playgrounds because we believe


246
00:07:40,556 --> 00:07:42,476
it is the best way to control


247
00:07:42,476 --> 00:07:44,946
robots and drones with code you


248
00:07:44,946 --> 00:07:45,436
write yourself.


249
00:07:46,816 --> 00:07:47,886
The new version of Swift


250
00:07:47,886 --> 00:07:49,576
Playgrounds is available today


251
00:07:49,576 --> 00:07:51,766
for free in the App Store, and


252
00:07:51,766 --> 00:07:52,706
you can find many of the


253
00:07:52,706 --> 00:07:53,816
Bluetooth accessories from our


254
00:07:53,816 --> 00:07:55,886
partners at an Apple Store near


255
00:07:55,886 --> 00:07:56,046
you.


256
00:07:56,596 --> 00:07:59,226
Now, there's another version of


257
00:07:59,226 --> 00:08:00,166
Swift Playgrounds I'd like to


258
00:08:00,166 --> 00:08:01,606
share with you today, and that's


259
00:08:01,606 --> 00:08:03,416
Swift Playgrounds 2, shipping


260
00:08:03,416 --> 00:08:04,096
later this fall.


261
00:08:05,176 --> 00:08:07,736
Today, we have engaging content,


262
00:08:07,826 --> 00:08:09,056
like our Learn to Code series,


263
00:08:09,296 --> 00:08:10,916
challenges, and the new


264
00:08:10,916 --> 00:08:12,206
Playgrounds from our partners,


265
00:08:12,756 --> 00:08:14,426
but we also know that you have


266
00:08:14,426 --> 00:08:16,966
many inspired ideas too, so this


267
00:08:16,966 --> 00:08:17,646
fall, we're going to make it


268
00:08:17,646 --> 00:08:19,106
easy for everyone to share


269
00:08:19,376 --> 00:08:19,936
Playgrounds.


270
00:08:21,406 --> 00:08:22,676
With Swift Playgrounds 2, we


271
00:08:22,676 --> 00:08:23,906
will support feeds of


272
00:08:23,996 --> 00:08:25,756
third-party content that users


273
00:08:25,756 --> 00:08:26,546
can subscribe to.


274
00:08:27,536 --> 00:08:29,696
And this content makes it really


275
00:08:29,696 --> 00:08:31,056
easy for schools to host


276
00:08:31,056 --> 00:08:32,826
curriculum, developers to post


277
00:08:32,905 --> 00:08:35,416
API explorations, and friends


278
00:08:35,486 --> 00:08:36,916
have a simple way to share


279
00:08:36,916 --> 00:08:37,256
ideas.


280
00:08:38,566 --> 00:08:40,046
This release will also include


281
00:08:40,046 --> 00:08:41,366
an integrated documentation


282
00:08:41,366 --> 00:08:43,645
experience, support for Swift 4


283
00:08:43,645 --> 00:08:46,486
in the iOS 11SDK, and enable the


284
00:08:46,486 --> 00:08:48,306
use of camera and augmented


285
00:08:48,346 --> 00:08:49,376
reality APIs.


286
00:08:49,376 --> 00:08:52,536
And we're going to extend global


287
00:08:52,536 --> 00:08:54,106
reach of the application by


288
00:08:54,106 --> 00:08:55,556
adding in localizations for


289
00:08:55,556 --> 00:08:57,286
eight additional languages.


290
00:08:58,696 --> 00:09:00,206
Beta versions of Swift


291
00:09:00,206 --> 00:09:01,236
Playgrounds 2 will be made


292
00:09:01,236 --> 00:09:02,856
available via TestFlight, and


293
00:09:03,376 --> 00:09:04,246
you can sign up at


294
00:09:04,246 --> 00:09:06,406
developer.apple.com to try out


295
00:09:06,626 --> 00:09:07,066
these releases.


296
00:09:08,556 --> 00:09:10,586
So two big versions of Swift


297
00:09:10,586 --> 00:09:11,766
Playgrounds for you.


298
00:09:12,386 --> 00:09:14,296
I'd like to switch topics and


299
00:09:14,296 --> 00:09:16,456
start talking about Xcode 9.


300
00:09:17,416 --> 00:09:20,036
Xcode 9 is a major release.


301
00:09:20,486 --> 00:09:21,656
We have made significant


302
00:09:21,656 --> 00:09:23,376
investments in our foundations,


303
00:09:23,596 --> 00:09:25,306
work flows, and performance


304
00:09:25,526 --> 00:09:27,416
across the tools with some


305
00:09:27,416 --> 00:09:28,776
pretty substantial results.


306
00:09:29,376 --> 00:09:30,586
I'd like to start today by


307
00:09:30,586 --> 00:09:32,056
talking about our Source Editor.


308
00:09:33,796 --> 00:09:35,406
In Xcode 9, we have completely


309
00:09:35,506 --> 00:09:36,336
re-implemented our Source


310
00:09:36,336 --> 00:09:36,596
Editor.


311
00:09:37,276 --> 00:09:38,266
It's been rewritten from the


312
00:09:38,266 --> 00:09:39,886
ground up in Swift.


313
00:09:40,516 --> 00:09:47,226
[ Applause ]


314
00:09:47,726 --> 00:09:48,236
And I agree.


315
00:09:48,236 --> 00:09:49,016
It's a pretty big deal.


316
00:09:50,196 --> 00:09:51,936
So at first glance, you'll see


317
00:09:51,936 --> 00:09:53,626
the familiar crisp presentation


318
00:09:53,736 --> 00:09:55,436
of multiple fonts and weights,


319
00:09:55,856 --> 00:09:57,166
but now with more options for


320
00:09:57,166 --> 00:09:59,336
line spacing, cursor types, and


321
00:09:59,386 --> 00:09:59,596
more.


322
00:10:00,416 --> 00:10:01,606
And we took the notion of


323
00:10:01,606 --> 00:10:03,726
semantic presentation and didn't


324
00:10:03,726 --> 00:10:05,296
stop at source code because we


325
00:10:05,296 --> 00:10:07,066
now have an integrated Markdown


326
00:10:07,066 --> 00:10:08,466
editor as well.


327
00:10:10,516 --> 00:10:14,436
[ Applause ]


328
00:10:14,936 --> 00:10:16,676
In addition to stylized editing,


329
00:10:16,766 --> 00:10:18,166
you'll find the familiar editor


330
00:10:18,166 --> 00:10:19,816
experiences, like using the Jump


331
00:10:19,816 --> 00:10:20,886
bar for navigation,


332
00:10:21,126 --> 00:10:22,826
Command-clicking on links, even


333
00:10:22,826 --> 00:10:24,326
using Edit All in Scope to


334
00:10:24,326 --> 00:10:25,146
change references.


335
00:10:26,676 --> 00:10:27,706
Now, when you start working with


336
00:10:27,706 --> 00:10:29,186
your source code, you'll find


337
00:10:29,186 --> 00:10:31,026
that issues now display smartly,


338
00:10:31,306 --> 00:10:32,706
no longer adjusting the layout


339
00:10:32,706 --> 00:10:33,226
of your code.


340
00:10:34,166 --> 00:10:35,766
Issues now include more detail


341
00:10:36,026 --> 00:10:36,146
-- yep.


342
00:10:37,516 --> 00:10:41,776
[ Applause ]


343
00:10:42,276 --> 00:10:43,346
Issues now display with more


344
00:10:43,346 --> 00:10:45,196
detail and have the Fix-it work


345
00:10:45,196 --> 00:10:47,026
flow integrated right alongside,


346
00:10:47,466 --> 00:10:48,786
including the ability to apply


347
00:10:48,786 --> 00:10:50,716
multiple Fix-its with a single


348
00:10:50,896 --> 00:10:51,176
click.


349
00:10:52,516 --> 00:10:55,876
[ Applause ]


350
00:10:56,376 --> 00:10:58,086
And this new issue presentation


351
00:10:58,086 --> 00:10:59,606
is the perfect canvas for the


352
00:10:59,606 --> 00:11:01,486
over 300 new diagnostics,


353
00:11:01,536 --> 00:11:02,876
analyzers, and Fix-its we've


354
00:11:02,876 --> 00:11:04,626
added to help you all write


355
00:11:04,706 --> 00:11:06,536
great code.


356
00:11:07,366 --> 00:11:08,786
Now, performance is also


357
00:11:08,786 --> 00:11:10,116
important, and in this release,


358
00:11:10,116 --> 00:11:11,596
you'll find the editor opens


359
00:11:11,596 --> 00:11:13,966
files three times faster, you'll


360
00:11:14,016 --> 00:11:15,946
find smooth scrolling at 60


361
00:11:15,946 --> 00:11:17,036
frames per second as you move


362
00:11:17,036 --> 00:11:18,606
about the file, and jumping to


363
00:11:18,606 --> 00:11:20,716
lines is 50 times faster than


364
00:11:20,906 --> 00:11:21,946
before.


365
00:11:22,516 --> 00:11:27,286
[ Applause ]


366
00:11:27,786 --> 00:11:28,836
To put it simply, everything


367
00:11:28,836 --> 00:11:30,196
happens instantaneously.


368
00:11:31,646 --> 00:11:33,406
Now, the editing experience is


369
00:11:33,486 --> 00:11:34,946
also new in Xcode 9.


370
00:11:35,796 --> 00:11:37,466
Our editor now has more semantic


371
00:11:37,516 --> 00:11:39,036
awareness, and we've brought


372
00:11:39,036 --> 00:11:40,366
over the tokenized editing


373
00:11:40,366 --> 00:11:41,506
experience from Swift


374
00:11:41,576 --> 00:11:41,956
Playgrounds.


375
00:11:43,156 --> 00:11:44,436
As you move about your source,


376
00:11:44,436 --> 00:11:45,596
we're going to highlight the


377
00:11:45,596 --> 00:11:46,846
structure underneath.


378
00:11:48,516 --> 00:11:55,366
[ Applause ]


379
00:11:55,866 --> 00:11:58,386
And when you click on one of the


380
00:11:58,386 --> 00:11:59,376
tokens, we're going to present


381
00:11:59,376 --> 00:12:01,036
an Action menu full of symbolic


382
00:12:01,036 --> 00:12:02,666
transformations to help you


383
00:12:02,666 --> 00:12:03,256
evolve your code.


384
00:12:04,516 --> 00:12:08,996
[ Applause ]


385
00:12:09,496 --> 00:12:10,586
And I'm guessing some of you


386
00:12:10,586 --> 00:12:12,806
know where this is going next.


387
00:12:13,646 --> 00:12:14,736
And yes, it is true.


388
00:12:14,776 --> 00:12:16,366
Xcode 9 has a brand-new


389
00:12:16,366 --> 00:12:17,386
refactoring system for it.


390
00:12:18,516 --> 00:12:27,206
[ Applause ]


391
00:12:27,706 --> 00:12:29,196
Indeed. Our refactoring system


392
00:12:29,196 --> 00:12:30,956
works with Swift, Objective-C,


393
00:12:31,066 --> 00:12:33,356
C, and C++, so you can use it


394
00:12:33,636 --> 00:12:34,926
throughout your projects.


395
00:12:35,406 --> 00:12:36,806
And the refactoring work flow


396
00:12:36,916 --> 00:12:38,436
takes advantage of the new


397
00:12:38,436 --> 00:12:40,396
tokenized editing experience to


398
00:12:40,396 --> 00:12:41,926
present contextual actions, like


399
00:12:41,926 --> 00:12:44,376
Extract and Rename, and all of


400
00:12:44,376 --> 00:12:45,686
these actions are bindable, so


401
00:12:45,796 --> 00:12:47,376
you can set key equivalents for


402
00:12:47,376 --> 00:12:48,376
ones you use frequently.


403
00:12:49,366 --> 00:12:50,936
And we also have a gorgeous


404
00:12:50,986 --> 00:12:52,586
presentation to help you review


405
00:12:52,586 --> 00:12:52,926
changes.


406
00:12:53,826 --> 00:12:54,966
And to show you what this is


407
00:12:54,966 --> 00:12:56,026
like, I'd like to bring up Ken


408
00:12:56,026 --> 00:12:57,286
Orr to give you a demonstration


409
00:12:57,286 --> 00:12:58,536
of the new Source Editor with


410
00:12:58,536 --> 00:12:58,986
refactoring.


411
00:13:00,516 --> 00:13:05,566
[ Applause ]


412
00:13:06,066 --> 00:13:06,656
>> Thanks, Matthew.


413
00:13:07,246 --> 00:13:09,166
So Xcode 9 has a brand-new


414
00:13:09,166 --> 00:13:10,816
Source Editor rewritten from the


415
00:13:10,816 --> 00:13:13,736
ground up to be fast, and I


416
00:13:13,736 --> 00:13:16,096
think speed is one of the very


417
00:13:16,096 --> 00:13:18,546
first things you'll notice.


418
00:13:19,076 --> 00:13:20,866
Scrolling in this 10,000-line


419
00:13:20,916 --> 00:13:25,326
file is super smooth all the way


420
00:13:25,326 --> 00:13:26,736
down to the bottom, and I can


421
00:13:26,736 --> 00:13:28,766
just instantly right back to the


422
00:13:28,766 --> 00:13:29,096
top.


423
00:13:29,666 --> 00:13:31,536
And of course, code, it looks


424
00:13:31,626 --> 00:13:33,206
absolutely gorgeous.


425
00:13:33,286 --> 00:13:34,626
Let me make that a little bit


426
00:13:34,626 --> 00:13:35,726
bigger so it's easier for you to


427
00:13:35,726 --> 00:13:35,916
see.


428
00:13:35,916 --> 00:13:38,036
I'll just press Command+ a few


429
00:13:38,036 --> 00:13:38,606
times for you.


430
00:13:39,516 --> 00:13:43,796
[ Applause ]


431
00:13:44,296 --> 00:13:45,956
It's the little things, right.


432
00:13:48,246 --> 00:13:50,596
So my project here is an iOS


433
00:13:50,596 --> 00:13:52,956
app, and it lets users explore


434
00:13:52,956 --> 00:13:53,756
our solar system.


435
00:13:53,826 --> 00:13:55,286
And I want to add a little bit


436
00:13:55,286 --> 00:13:55,846
of code.


437
00:13:55,846 --> 00:13:56,966
I'm going to jump over to this


438
00:13:56,966 --> 00:14:00,456
Objective-C file, and this bit


439
00:14:00,456 --> 00:14:01,586
of code that I just added, it


440
00:14:01,586 --> 00:14:03,426
has a small problem.


441
00:14:03,576 --> 00:14:05,146
So first off, you can see the


442
00:14:05,146 --> 00:14:06,866
brand-new issues presentation,


443
00:14:07,186 --> 00:14:09,236
and it's got Fix-its built right


444
00:14:09,766 --> 00:14:09,833
in.


445
00:14:10,286 --> 00:14:12,156
Now, this particular issue is


446
00:14:12,156 --> 00:14:14,156
new in Objective-C, and it's


447
00:14:14,156 --> 00:14:16,106
warning me that I'm using iOS 11


448
00:14:16,106 --> 00:14:18,346
API, but my project here, it


449
00:14:18,346 --> 00:14:21,046
deploys back to iOS X, where


450
00:14:21,046 --> 00:14:21,556
this would crash [applause].


451
00:14:22,216 --> 00:14:28,886
And this issue has a Fix-it,


452
00:14:28,886 --> 00:14:29,586
which I'll accept.


453
00:14:30,246 --> 00:14:32,986
And when I do, Xcode wraps my


454
00:14:32,986 --> 00:14:35,086
code using the new Objective-C


455
00:14:35,086 --> 00:14:36,686
keyword, atAvailable.


456
00:14:37,106 --> 00:14:38,736
So now, that little bit of code,


457
00:14:38,736 --> 00:14:41,066
it'll only run on iOS 11.


458
00:14:42,516 --> 00:14:46,076
[ Applause ]


459
00:14:46,576 --> 00:14:47,676
There's another new Fix-it I


460
00:14:47,676 --> 00:14:48,386
want to show you.


461
00:14:48,386 --> 00:14:49,866
I'm going to jump over to this


462
00:14:49,956 --> 00:14:50,856
SWF file here.


463
00:14:51,096 --> 00:14:52,756
This is the class that


464
00:14:52,756 --> 00:14:54,106
represents a moon in our solar


465
00:14:54,106 --> 00:14:56,126
system, and I'm going to adopt


466
00:14:56,126 --> 00:14:59,336
the physics body protocol.


467
00:14:59,946 --> 00:15:01,186
It's got a few different


468
00:15:01,186 --> 00:15:01,816
methods.


469
00:15:01,816 --> 00:15:04,766
Whoops. It's got a few different


470
00:15:04,766 --> 00:15:05,586
methods that I need to


471
00:15:05,586 --> 00:15:06,086
implement.


472
00:15:06,086 --> 00:15:07,536
Of course, I haven't implemented


473
00:15:07,536 --> 00:15:09,226
them yet, so I get an issue.


474
00:15:10,156 --> 00:15:13,526
And now, with just one click on


475
00:15:13,526 --> 00:15:16,386
the single Fix-it, it'll add all


476
00:15:16,386 --> 00:15:17,796
the methods that I haven't yet


477
00:15:17,796 --> 00:15:18,206
implemented.


478
00:15:19,516 --> 00:15:24,576
[ Applause ]


479
00:15:25,076 --> 00:15:26,686
So Xcode 9 can also help me


480
00:15:26,686 --> 00:15:29,316
transform and refactor my code.


481
00:15:29,686 --> 00:15:30,426
So let me show you that.


482
00:15:30,426 --> 00:15:32,626
I'm going to jump over to this


483
00:15:32,626 --> 00:15:35,856
solarsystem.swf file and I'm


484
00:15:35,856 --> 00:15:36,926
going to hold down the Command


485
00:15:36,926 --> 00:15:38,776
key and move my mouse.


486
00:15:39,186 --> 00:15:41,586
And when I do, Xcode shows me


487
00:15:41,586 --> 00:15:43,486
the structure of my code.


488
00:15:44,156 --> 00:15:46,076
When I click, I get a set of


489
00:15:46,076 --> 00:15:48,146
options and transformations that


490
00:15:48,146 --> 00:15:49,706
are specific to the expression


491
00:15:49,706 --> 00:15:50,396
that I clicked on.


492
00:15:50,936 --> 00:15:51,856
So here I clicked on an


493
00:15:51,856 --> 00:15:52,996
expression that's creating a


494
00:15:52,996 --> 00:15:54,926
moon object and then adding that


495
00:15:55,086 --> 00:15:55,566
to the Earth.


496
00:15:56,476 --> 00:15:58,226
And, you know, I actually


497
00:15:58,266 --> 00:16:00,586
personally prefer to capture all


498
00:16:00,586 --> 00:16:01,976
the objects I create in


499
00:16:01,976 --> 00:16:03,196
variables, so I'm just going to


500
00:16:03,196 --> 00:16:04,976
extract this out into an


501
00:16:04,976 --> 00:16:06,976
expression, and I'll use Edit


502
00:16:06,976 --> 00:16:08,586
All in Scope to give this a


503
00:16:08,586 --> 00:16:09,346
better name, Luna.


504
00:16:10,826 --> 00:16:12,046
And, you know, while we're at


505
00:16:12,046 --> 00:16:13,516
it, actually, I like my methods


506
00:16:13,516 --> 00:16:15,856
to be short and to the point, so


507
00:16:15,856 --> 00:16:16,936
I think I'm going to pull out


508
00:16:16,936 --> 00:16:18,956
this If block into its own


509
00:16:18,956 --> 00:16:19,346
method.


510
00:16:20,126 --> 00:16:22,926
And when I do, Xcode creates a


511
00:16:22,926 --> 00:16:24,756
new method for me, adds all of


512
00:16:24,756 --> 00:16:26,856
that code to it, and then leaves


513
00:16:26,856 --> 00:16:28,036
me with a call to that method


514
00:16:28,036 --> 00:16:29,086
back where we started.


515
00:16:30,216 --> 00:16:31,406
Let's give that a new name too.


516
00:16:32,516 --> 00:16:37,806
[ Applause ]


517
00:16:38,306 --> 00:16:39,886
So those are a couple local


518
00:16:39,886 --> 00:16:41,866
transformations, but a lot of


519
00:16:41,866 --> 00:16:43,466
times what I want to do, I want


520
00:16:43,466 --> 00:16:44,556
to refactor the name of


521
00:16:44,556 --> 00:16:45,586
something that's used throughout


522
00:16:45,586 --> 00:16:46,626
my entire project.


523
00:16:47,586 --> 00:16:48,836
In fact, I've got a great


524
00:16:48,836 --> 00:16:51,026
candidate for that here -- this


525
00:16:51,486 --> 00:16:52,276
position method.


526
00:16:52,276 --> 00:16:53,966
That's kind of a generic name.


527
00:16:53,966 --> 00:16:54,866
I think I could come up with


528
00:16:54,866 --> 00:16:56,006
something a little bit more


529
00:16:56,006 --> 00:16:56,566
descriptive.


530
00:16:56,566 --> 00:16:57,806
So I'm going to hold down the


531
00:16:57,806 --> 00:17:00,376
Command key, click, say


532
00:17:00,416 --> 00:17:03,226
"rename," and when I do, Xcode


533
00:17:03,226 --> 00:17:05,786
folds down the file that I'm


534
00:17:05,786 --> 00:17:05,976
in--


535
00:17:06,516 --> 00:17:11,586
[ Applause ]


536
00:17:12,086 --> 00:17:13,816
Folds down that file and it


537
00:17:13,945 --> 00:17:16,306
pulls in slices from across my


538
00:17:16,366 --> 00:17:18,205
project where I'm using that


539
00:17:18,205 --> 00:17:18,566
method.


540
00:17:19,195 --> 00:17:21,346
So I'll pick a new name here.


541
00:17:21,346 --> 00:17:22,536
Let's go with something like


542
00:17:22,856 --> 00:17:25,246
"orbital position."


543
00:17:26,046 --> 00:17:27,866
As I type, it updates live


544
00:17:27,866 --> 00:17:29,376
across all those slides.


545
00:17:29,976 --> 00:17:31,636
I can rename parameter names


546
00:17:31,636 --> 00:17:32,056
too.


547
00:17:32,426 --> 00:17:33,756
First parameter name, that seems


548
00:17:33,756 --> 00:17:34,116
OK.


549
00:17:34,436 --> 00:17:35,666
Instead of "date" for the second


550
00:17:35,666 --> 00:17:36,816
one, I'll with something like


551
00:17:36,856 --> 00:17:39,696
"moment in time."


552
00:17:40,926 --> 00:17:43,726
Click Rename, and that's it.


553
00:17:43,806 --> 00:17:46,926
So rename factoring works great


554
00:17:47,186 --> 00:17:48,416
for methods like this.


555
00:17:48,936 --> 00:17:50,486
Also works for classes too.


556
00:17:50,976 --> 00:17:53,596
So up here I've got this class,


557
00:17:53,936 --> 00:17:55,776
"trans-Neptunian object."


558
00:17:56,426 --> 00:17:58,606
That's kind of a mouthful, so


559
00:17:58,606 --> 00:18:00,026
let's give that a little bit


560
00:18:00,026 --> 00:18:00,666
simpler name.


561
00:18:01,466 --> 00:18:02,976
I'm going to rename this guy


562
00:18:03,076 --> 00:18:05,206
"minor planet."


563
00:18:06,236 --> 00:18:07,696
So refactoring, it works for


564
00:18:07,886 --> 00:18:09,186
everything you'd expect.


565
00:18:09,566 --> 00:18:11,696
In my project here, that means


566
00:18:11,856 --> 00:18:14,876
SWF files, Objective-C files,


567
00:18:15,936 --> 00:18:17,566
and even storyboards.


568
00:18:18,516 --> 00:18:26,506
[ Applause ]


569
00:18:27,006 --> 00:18:29,856
When I'm done, click Rename, and


570
00:18:30,056 --> 00:18:31,056
that's it.


571
00:18:31,056 --> 00:18:32,016
Really simple.


572
00:18:32,356 --> 00:18:33,236
Really powerful.


573
00:18:33,826 --> 00:18:35,246
That's the new Source Editor and


574
00:18:35,246 --> 00:18:36,246
refactoring in Xcode 9.


575
00:18:36,726 --> 00:18:37,326
Matthew?


576
00:18:38,516 --> 00:18:43,766
[ Applause ]


577
00:18:44,266 --> 00:18:44,706
>> Thank you, Ken.


578
00:18:44,796 --> 00:18:45,946
I told you it was gorgeous.


579
00:18:48,346 --> 00:18:50,246
So new refactoring is a great


580
00:18:50,246 --> 00:18:51,506
way to evolve your code.


581
00:18:51,906 --> 00:18:53,536
In addition to the rename


582
00:18:53,536 --> 00:18:54,996
refactoring, we're also going to


583
00:18:54,996 --> 00:18:56,206
include a number of local


584
00:18:56,206 --> 00:18:57,916
transformations, like extract,


585
00:18:58,336 --> 00:19:00,026
adding missing overrides, and


586
00:19:00,026 --> 00:19:01,246
working with localized strings.


587
00:19:02,176 --> 00:19:03,516
But this is just the beginning


588
00:19:04,186 --> 00:19:05,256
because we're going to be open


589
00:19:05,256 --> 00:19:06,856
sourcing the refactoring engine


590
00:19:07,146 --> 00:19:08,846
as part of the Apple, Clang, and


591
00:19:08,846 --> 00:19:09,896
Swift compilers.


592
00:19:11,516 --> 00:19:16,086
[ Applause ]


593
00:19:16,586 --> 00:19:17,986
Xcode will automatically pick up


594
00:19:18,016 --> 00:19:19,556
transformations you build in


595
00:19:19,556 --> 00:19:21,216
local toolchains, so you have a


596
00:19:21,216 --> 00:19:22,856
great way to prototype new


597
00:19:22,856 --> 00:19:23,526
transformations.


598
00:19:24,926 --> 00:19:26,906
So our new Source Editor --


599
00:19:27,326 --> 00:19:28,916
great look and feel, awesome


600
00:19:28,916 --> 00:19:30,506
performance, and now with


601
00:19:30,546 --> 00:19:31,156
refactoring.


602
00:19:31,706 --> 00:19:33,456
A great start to Xcode 9.


603
00:19:33,556 --> 00:19:36,566
And we also have some big news


604
00:19:36,706 --> 00:19:38,596
in Swift, and for that, I'd like


605
00:19:38,596 --> 00:19:40,106
to bring up Ted Kremenek to tell


606
00:19:40,106 --> 00:19:40,416
you more.


607
00:19:42,516 --> 00:19:47,096
[ Applause ]


608
00:19:47,596 --> 00:19:49,626
>> With Swift, we set out on a


609
00:19:49,626 --> 00:19:51,316
mission to make programming


610
00:19:51,486 --> 00:19:55,046
easier, faster, safer, and more


611
00:19:55,046 --> 00:19:55,476
modern.


612
00:19:56,556 --> 00:19:58,066
And in a little less than three


613
00:19:58,066 --> 00:19:59,676
years, the pace of adoption


614
00:19:59,676 --> 00:20:00,946
remains phenomenal.


615
00:20:01,666 --> 00:20:05,376
In that time, over 250,000 apps


616
00:20:05,796 --> 00:20:07,596
have been written in Swift and


617
00:20:07,646 --> 00:20:09,246
submitted to the App Store.


618
00:20:10,026 --> 00:20:11,736
And it's not just the number of


619
00:20:11,736 --> 00:20:12,766
apps that's exciting.


620
00:20:12,766 --> 00:20:14,396
It's that companies are building


621
00:20:14,396 --> 00:20:16,186
apps in Swift that they really


622
00:20:16,186 --> 00:20:17,746
do depend on.


623
00:20:18,186 --> 00:20:19,346
And beyond the App Store,


624
00:20:20,106 --> 00:20:21,336
enterprise and business have


625
00:20:21,406 --> 00:20:22,616
also embraced Swift.


626
00:20:23,116 --> 00:20:25,346
IBM has authored more than 100


627
00:20:25,346 --> 00:20:27,286
of their MobileFirst iOS apps in


628
00:20:27,286 --> 00:20:29,526
Swift, and both IBM and SAP have


629
00:20:29,606 --> 00:20:32,826
released SDKs that allow Swift


630
00:20:32,826 --> 00:20:34,606
developers to take advantage of


631
00:20:34,606 --> 00:20:35,976
their services infrastructure.


632
00:20:37,006 --> 00:20:39,096
So we're thrilled at how Swift


633
00:20:39,096 --> 00:20:40,846
has been doing, but Swift, of


634
00:20:40,846 --> 00:20:42,486
course, isn't standing still.


635
00:20:43,766 --> 00:20:45,336
Xcode 9 includes a new release


636
00:20:45,336 --> 00:20:47,726
of Swift, Swift 4, and we're


637
00:20:47,726 --> 00:20:49,136
excited about what it brings.


638
00:20:50,276 --> 00:20:52,066
Now, the focus of this release


639
00:20:52,066 --> 00:20:53,686
really is on the core


640
00:20:53,956 --> 00:20:56,266
fundamentals, getting those rock


641
00:20:56,396 --> 00:20:58,086
solid, because we want Swift to


642
00:20:58,086 --> 00:21:00,026
be a great foundation for


643
00:21:00,026 --> 00:21:01,726
everyone to build their software


644
00:21:01,726 --> 00:21:01,966
upon.


645
00:21:03,186 --> 00:21:04,976
And so just, I'll be able to


646
00:21:04,976 --> 00:21:05,896
touch on just a few of the


647
00:21:05,966 --> 00:21:07,456
things in this release, but we


648
00:21:07,456 --> 00:21:08,996
think these are just great


649
00:21:08,996 --> 00:21:11,006
improvements across the board.


650
00:21:11,556 --> 00:21:13,406
The first thing I want to talk


651
00:21:13,406 --> 00:21:15,376
about is a vastly improved


652
00:21:15,616 --> 00:21:16,096
string.


653
00:21:17,356 --> 00:21:19,946
String is, string processing is


654
00:21:19,946 --> 00:21:22,716
a fundamental aspect of just


655
00:21:23,066 --> 00:21:24,166
writing software, right.


656
00:21:24,166 --> 00:21:26,056
We work with strings all the


657
00:21:26,146 --> 00:21:26,306
time.


658
00:21:26,656 --> 00:21:28,136
And we've always had the goal


659
00:21:28,136 --> 00:21:29,806
that string processing in Swift


660
00:21:29,806 --> 00:21:31,596
is first in class without


661
00:21:31,596 --> 00:21:33,176
compromising on Unicode


662
00:21:33,176 --> 00:21:33,706
correctness.


663
00:21:34,376 --> 00:21:35,426
And so we've made three


664
00:21:35,426 --> 00:21:37,306
important strides towards this


665
00:21:37,306 --> 00:21:38,376
goal in Swift 4.


666
00:21:39,276 --> 00:21:41,416
First, you want to make the API


667
00:21:41,416 --> 00:21:43,636
a lot easier to use, right,


668
00:21:43,636 --> 00:21:44,866
because you're using string all


669
00:21:44,866 --> 00:21:45,136
the time.


670
00:21:46,036 --> 00:21:48,316
We also wanted to double down on


671
00:21:48,316 --> 00:21:49,966
improving fidelity with Unicode.


672
00:21:50,296 --> 00:21:51,216
This is something that string


673
00:21:51,216 --> 00:21:52,686
has been good at, but it's not


674
00:21:52,826 --> 00:21:54,406
entirely where we wanted it to


675
00:21:55,056 --> 00:21:56,056
be, and we wanted to make


676
00:21:56,056 --> 00:21:58,066
strings really fast.


677
00:21:59,036 --> 00:22:00,556
So it's not hard to look at it


678
00:22:00,556 --> 00:22:01,986
for opportunities of how we


679
00:22:01,986 --> 00:22:03,366
wanted to make string easier to


680
00:22:03,366 --> 00:22:04,076
use, right.


681
00:22:04,106 --> 00:22:05,526
So here's some fragments of code


682
00:22:05,526 --> 00:22:06,666
that you may have written in


683
00:22:06,666 --> 00:22:07,746
Swift 3 when you're working with


684
00:22:07,746 --> 00:22:09,816
string, like iterating over the


685
00:22:09,816 --> 00:22:11,366
characters, or querying to see


686
00:22:11,366 --> 00:22:12,346
if a string has a given


687
00:22:12,346 --> 00:22:13,746
character, or stitching strings


688
00:22:13,746 --> 00:22:14,016
together.


689
00:22:14,016 --> 00:22:16,266
And what we've found is that we


690
00:22:16,266 --> 00:22:18,116
were frequently reaching down


691
00:22:18,116 --> 00:22:20,236
for this characters view, right.


692
00:22:20,236 --> 00:22:21,046
I mean, you want to get to the


693
00:22:21,046 --> 00:22:22,226
underlying characters, but it's


694
00:22:22,226 --> 00:22:23,106
one step removed.


695
00:22:23,386 --> 00:22:25,736
It also creates this unnecessary


696
00:22:25,736 --> 00:22:26,236
friction.


697
00:22:26,736 --> 00:22:29,066
So in Swift 4, we have vastly


698
00:22:29,146 --> 00:22:30,966
simplified this by removing all


699
00:22:30,966 --> 00:22:33,236
this impedance, and now strings


700
00:22:33,236 --> 00:22:34,216
are range-replaceable


701
00:22:34,216 --> 00:22:36,546
collections of characters.


702
00:22:37,426 --> 00:22:39,336
Not only does the code, you


703
00:22:39,336 --> 00:22:40,746
know, read and write exactly as


704
00:22:40,926 --> 00:22:42,436
you would expect, but you have


705
00:22:42,436 --> 00:22:43,576
all the power of generic


706
00:22:43,576 --> 00:22:44,736
algorithms on the collections


707
00:22:45,036 --> 00:22:46,926
directly on working with


708
00:22:46,926 --> 00:22:47,296
strings.


709
00:22:48,656 --> 00:22:50,566
We've also added great syntactic


710
00:22:50,636 --> 00:22:51,666
[inaudible] such as multi-line


711
00:22:51,666 --> 00:22:53,056
string literals, which include,


712
00:22:53,056 --> 00:22:54,596
you know, support for white


713
00:22:54,686 --> 00:22:54,936
space.


714
00:22:55,806 --> 00:22:57,536
String slicing is even more


715
00:22:57,536 --> 00:22:58,986
lightweight with the support


716
00:22:58,986 --> 00:23:00,236
from one-sided ranges.


717
00:23:00,956 --> 00:23:02,316
So you could just very nimbly


718
00:23:02,356 --> 00:23:03,876
specify the fragment of the


719
00:23:03,936 --> 00:23:05,376
string you want in a slice.


720
00:23:06,736 --> 00:23:07,756
Now, these improvements to the


721
00:23:07,756 --> 00:23:09,646
core ergonomics also must be


722
00:23:09,646 --> 00:23:10,606
accompanied with improvements


723
00:23:10,656 --> 00:23:11,806
for our Unicode support.


724
00:23:12,086 --> 00:23:13,726
And if, when you were working


725
00:23:13,726 --> 00:23:15,076
with strings in Swift 3, you may


726
00:23:15,076 --> 00:23:18,336
have noticed some oddities like


727
00:23:18,426 --> 00:23:20,066
this just kind of leaving you


728
00:23:20,066 --> 00:23:24,046
wondering, what is going on?


729
00:23:24,766 --> 00:23:26,806
And it really comes down to the


730
00:23:26,806 --> 00:23:28,376
richness of Unicode.


731
00:23:28,966 --> 00:23:30,706
Our concept of the character is


732
00:23:30,706 --> 00:23:32,116
actually a composition of


733
00:23:32,116 --> 00:23:34,096
multiple Unicode scalar values,


734
00:23:34,456 --> 00:23:36,356
and decomposing these correctly


735
00:23:36,356 --> 00:23:37,336
is critical to getting that


736
00:23:37,416 --> 00:23:40,786
fidelity with Unicode, the


737
00:23:40,786 --> 00:23:42,656
characters, and the string API.


738
00:23:43,846 --> 00:23:45,096
So in Swift 4, we've moved to


739
00:23:45,096 --> 00:23:46,516
the Unicode 9 Grapheme Breaking


740
00:23:46,516 --> 00:23:47,106
algorithm.


741
00:23:47,106 --> 00:23:48,686
It now properly separates these


742
00:23:48,686 --> 00:23:49,736
strings out or these characters


743
00:23:49,736 --> 00:23:51,456
out as you would expect, giving


744
00:23:51,456 --> 00:23:53,336
you full fidelity with the


745
00:23:53,336 --> 00:23:54,896
underlying character set.


746
00:23:55,006 --> 00:23:56,346
And this is also really


747
00:23:56,346 --> 00:23:58,266
important since we're now,


748
00:23:58,266 --> 00:23:59,236
strings are collections of


749
00:23:59,236 --> 00:23:59,896
characters.


750
00:24:00,786 --> 00:24:02,446
Now, this improvement to Unicode


751
00:24:02,446 --> 00:24:04,786
support has not come at a cost


752
00:24:04,786 --> 00:24:05,436
to performance.


753
00:24:05,966 --> 00:24:07,256
We've actually finely-tuned


754
00:24:07,256 --> 00:24:08,546
strings implementation.


755
00:24:08,926 --> 00:24:10,336
So for most string-processing


756
00:24:10,336 --> 00:24:12,416
operations, for English, French,


757
00:24:12,456 --> 00:24:14,736
German, Spanish, and really any


758
00:24:14,736 --> 00:24:15,856
language using a Latin-derived


759
00:24:15,856 --> 00:24:16,736
script, you'll see about a


760
00:24:16,796 --> 00:24:17,666
three-and-a-half times


761
00:24:17,666 --> 00:24:18,766
performance improvement for


762
00:24:18,766 --> 00:24:19,126
String.


763
00:24:20,516 --> 00:24:25,356
[ Applause ]


764
00:24:25,856 --> 00:24:27,336
And similarly, you see huge


765
00:24:27,336 --> 00:24:28,316
improvements working with


766
00:24:28,366 --> 00:24:30,286
simplified Chinese and most


767
00:24:30,286 --> 00:24:32,556
modern Japanese texts


768
00:24:33,056 --> 00:24:35,146
[applause].


769
00:24:35,646 --> 00:24:37,736
And that is the improved String


770
00:24:38,036 --> 00:24:40,206
-- faster, much easier to use,


771
00:24:40,456 --> 00:24:41,176
and more powerful.


772
00:24:42,646 --> 00:24:43,566
The second feature I want to


773
00:24:43,566 --> 00:24:46,516
talk about has, is about giving


774
00:24:46,516 --> 00:24:48,096
you the ability to easily


775
00:24:48,786 --> 00:24:51,066
convert Swift types to encodable


776
00:24:51,066 --> 00:24:53,546
formats, like JSON and property


777
00:24:53,546 --> 00:24:55,096
lists, while adding, providing


778
00:24:55,136 --> 00:24:56,676
powerful opportunities for


779
00:24:56,676 --> 00:24:57,546
customization.


780
00:24:58,416 --> 00:25:01,116
In Swift, we use both value and


781
00:25:01,116 --> 00:25:02,766
reference types, and while


782
00:25:02,766 --> 00:25:04,556
NSCoding supports classes, it


783
00:25:04,556 --> 00:25:06,996
doesn't work at all with structs


784
00:25:07,126 --> 00:25:07,706
or enums.


785
00:25:08,296 --> 00:25:09,126
This new feature works


786
00:25:09,156 --> 00:25:10,726
beautifully with all of them.


787
00:25:11,946 --> 00:25:12,776
Let's see this in action.


788
00:25:13,156 --> 00:25:14,856
So here I have a simple value


789
00:25:14,906 --> 00:25:15,146
type.


790
00:25:15,356 --> 00:25:16,046
This is a struct.


791
00:25:16,046 --> 00:25:16,676
It's a form.


792
00:25:17,156 --> 00:25:18,126
It's got some properties.


793
00:25:18,756 --> 00:25:19,556
And I want to make this


794
00:25:19,556 --> 00:25:21,706
encodable and decodable to JSON,


795
00:25:21,706 --> 00:25:23,196
property list, whatever.


796
00:25:23,196 --> 00:25:25,276
I could easily do this by adding


797
00:25:25,276 --> 00:25:27,856
conformance to a new protocol


798
00:25:28,126 --> 00:25:28,706
called Codable.


799
00:25:30,126 --> 00:25:32,376
And if the properties of this


800
00:25:32,476 --> 00:25:34,086
type have types that also


801
00:25:34,086 --> 00:25:35,806
conform to Codable, this is


802
00:25:35,906 --> 00:25:38,206
literally all the code I need to


803
00:25:38,206 --> 00:25:40,296
write because the conformance to


804
00:25:40,296 --> 00:25:41,876
this protocol is synthesized by


805
00:25:41,876 --> 00:25:42,526
the compiler.


806
00:25:43,516 --> 00:25:49,836
[ Applause ]


807
00:25:50,336 --> 00:25:51,266
So works as you would expect.


808
00:25:51,266 --> 00:25:52,956
I can construct a value of this


809
00:25:53,006 --> 00:25:55,856
type, and with a single line of


810
00:25:55,856 --> 00:25:57,506
code, I can serialize this out


811
00:25:57,506 --> 00:25:57,806
to JSON.


812
00:25:58,516 --> 00:26:04,196
[ Applause ]


813
00:26:04,696 --> 00:26:07,156
And once I have the JSON value I


814
00:26:07,156 --> 00:26:08,996
can simply reconstitute it back


815
00:26:08,996 --> 00:26:10,966
with a single line of code, back


816
00:26:10,966 --> 00:26:13,026
into a foreign value, and this


817
00:26:13,026 --> 00:26:15,016
is also 100% type safe.


818
00:26:16,516 --> 00:26:20,866
[ Applause ]


819
00:26:21,366 --> 00:26:22,956
So simple, easy to use.


820
00:26:23,826 --> 00:26:24,636
We think you're going to enjoy


821
00:26:24,636 --> 00:26:24,726
it.


822
00:26:24,726 --> 00:26:26,356
Now, there's a lot of great


823
00:26:26,386 --> 00:26:29,816
features in Swift 4, and we've


824
00:26:29,816 --> 00:26:31,386
also been excited about the


825
00:26:31,386 --> 00:26:32,736
adoption of Swift.


826
00:26:33,406 --> 00:26:35,656
And so another key goal in Swift


827
00:26:35,656 --> 00:26:37,746
4 is we wanted to make all the


828
00:26:37,776 --> 00:26:40,646
features easy to adopt.


829
00:26:41,256 --> 00:26:44,026
And that's why in Xcode 9 you


830
00:26:44,026 --> 00:26:45,976
can take your Swift 3 projects,


831
00:26:46,616 --> 00:26:49,066
open them up, and build them


832
00:26:49,066 --> 00:26:50,366
with no modifications.


833
00:26:51,656 --> 00:26:52,686
This means you can be on the


834
00:26:52,686 --> 00:26:56,596
latest OS, tools, and even make


835
00:26:56,596 --> 00:26:58,036
use of many of the new language


836
00:26:58,036 --> 00:26:59,776
features in a release without


837
00:26:59,776 --> 00:27:01,416
having to convert your code.


838
00:27:02,326 --> 00:27:04,196
So how does this work?


839
00:27:05,926 --> 00:27:07,066
In Xcode, there is a build


840
00:27:07,066 --> 00:27:08,436
setting Swift language version.


841
00:27:09,606 --> 00:27:11,706
It has two values, Swift 3.2 and


842
00:27:11,706 --> 00:27:14,686
Swift 4.0.


843
00:27:14,856 --> 00:27:16,296
What this is is there's one


844
00:27:16,296 --> 00:27:18,246
compiler here that supports


845
00:27:18,296 --> 00:27:19,276
these two different language


846
00:27:19,316 --> 00:27:19,556
modes.


847
00:27:21,016 --> 00:27:22,376
And what you can do is you could


848
00:27:22,376 --> 00:27:24,076
have a single project that can


849
00:27:24,076 --> 00:27:26,136
mix and match targets that are


850
00:27:26,136 --> 00:27:28,276
built, it's either 3.2 or 4.0.


851
00:27:28,786 --> 00:27:29,746
It also means you could have an


852
00:27:29,746 --> 00:27:31,366
app that's written using all the


853
00:27:31,366 --> 00:27:33,416
new Swift 4 features but uses a


854
00:27:33,416 --> 00:27:34,836
package or framework that's


855
00:27:34,876 --> 00:27:36,306
built using Swift 3.2.


856
00:27:37,206 --> 00:27:38,586
So it's this extremely easy


857
00:27:38,586 --> 00:27:40,026
on-ramp to taking advantage of


858
00:27:40,026 --> 00:27:41,236
the latest features in Swift.


859
00:27:41,306 --> 00:27:44,146
So what is Swift 3.2?


860
00:27:45,496 --> 00:27:46,246
It's a language mode.


861
00:27:47,026 --> 00:27:47,876
You can basically build your


862
00:27:47,876 --> 00:27:49,486
projects pretty much with no


863
00:27:49,486 --> 00:27:50,196
modifications.


864
00:27:50,936 --> 00:27:52,156
You can access pretty much all


865
00:27:52,156 --> 00:27:52,986
the new language features --


866
00:27:52,986 --> 00:27:56,076
String, codable, all of them.


867
00:27:56,076 --> 00:27:57,916
You can access all the new APIs


868
00:27:58,216 --> 00:27:58,886
from the SDK.


869
00:28:00,006 --> 00:28:01,456
The only thing you don't get is


870
00:28:01,456 --> 00:28:02,916
any Swift-related improvements


871
00:28:02,946 --> 00:28:04,986
to existing APIs that you may


872
00:28:04,986 --> 00:28:05,836
have been using before.


873
00:28:06,476 --> 00:28:07,536
That's what gives you that easy


874
00:28:07,536 --> 00:28:08,866
onboarding without having to


875
00:28:08,866 --> 00:28:09,746
modify your project.


876
00:28:10,346 --> 00:28:12,936
To get those benefits, there's a


877
00:28:12,936 --> 00:28:13,716
Swift 4 mode.


878
00:28:14,566 --> 00:28:16,026
You have access to essentially


879
00:28:16,026 --> 00:28:16,866
all the new stuff.


880
00:28:17,426 --> 00:28:18,226
There's also some new


881
00:28:18,226 --> 00:28:19,786
opportunities to further improve


882
00:28:19,786 --> 00:28:21,226
the performance of your app,


883
00:28:21,786 --> 00:28:23,726
including reducing the size of


884
00:28:23,726 --> 00:28:24,246
your binaries.


885
00:28:25,136 --> 00:28:25,966
There's a lot of great


886
00:28:26,016 --> 00:28:27,716
improvements in the SDK for


887
00:28:27,716 --> 00:28:29,656
Swift developers, but to take


888
00:28:29,656 --> 00:28:31,006
advantage of those, there is


889
00:28:31,066 --> 00:28:32,746
some migration of your code


890
00:28:32,746 --> 00:28:33,256
required.


891
00:28:33,256 --> 00:28:35,096
But these are refinements.


892
00:28:35,536 --> 00:28:36,886
These are very evolutionary


893
00:28:36,886 --> 00:28:37,636
changes.


894
00:28:37,976 --> 00:28:39,646
And compared to moving from


895
00:28:39,646 --> 00:28:41,696
Swift 2 to Swift 3, moving from


896
00:28:41,696 --> 00:28:43,526
Swift 3 to Swift 4 is very


897
00:28:43,526 --> 00:28:43,936
simple.


898
00:28:45,636 --> 00:28:46,866
Now, we've been thrilled about


899
00:28:46,866 --> 00:28:48,216
the investment everyone has been


900
00:28:48,216 --> 00:28:49,436
making in Swift, and as we've


901
00:28:49,506 --> 00:28:51,236
seen that investment grow, so


902
00:28:51,236 --> 00:28:53,776
have the size of large Swift


903
00:28:54,086 --> 00:28:55,476
projects, right.


904
00:28:55,476 --> 00:28:56,476
People are writing more code in


905
00:28:56,476 --> 00:28:56,746
Swift.


906
00:28:57,866 --> 00:28:59,796
And we recognize that this is an


907
00:28:59,796 --> 00:29:01,616
important area for us to focus


908
00:29:01,616 --> 00:29:02,806
our efforts on the tools.


909
00:29:03,436 --> 00:29:05,786
And so we've focused on two key


910
00:29:05,786 --> 00:29:07,376
areas to reduce build times for


911
00:29:07,376 --> 00:29:08,236
large projects.


912
00:29:09,076 --> 00:29:10,836
The first is mix-and-match


913
00:29:10,836 --> 00:29:12,796
Objective-C and Swift projects.


914
00:29:14,516 --> 00:29:18,106
[ Applause ]


915
00:29:18,606 --> 00:29:19,916
By pre-compiling the bridging


916
00:29:19,916 --> 00:29:21,266
header, we've seen up to about a


917
00:29:21,266 --> 00:29:23,006
40% improvement in built times,


918
00:29:23,006 --> 00:29:24,216
particularly for debug builds.


919
00:29:24,216 --> 00:29:25,326
And we saw this ourselves on


920
00:29:25,326 --> 00:29:26,626
our, compiling our own


921
00:29:26,626 --> 00:29:27,376
music.app.


922
00:29:27,376 --> 00:29:29,996
And similarly, if you're using


923
00:29:29,996 --> 00:29:32,436
whole-module optimization, we've


924
00:29:32,436 --> 00:29:34,176
vastly improved the utilization


925
00:29:34,176 --> 00:29:35,186
of parallelism across the


926
00:29:35,186 --> 00:29:37,376
compiler and the build system,


927
00:29:37,376 --> 00:29:38,726
and you can see up to a 2x


928
00:29:38,726 --> 00:29:40,076
improvement in build times.


929
00:29:41,316 --> 00:29:42,996
Now, this optimization was so


930
00:29:42,996 --> 00:29:45,596
important that we didn't want to


931
00:29:45,596 --> 00:29:47,356
hold it back for Xcode 9, and so


932
00:29:47,356 --> 00:29:48,476
we actually aggressively


933
00:29:48,476 --> 00:29:50,996
released it in the Xcode 8.3.2.


934
00:29:51,716 --> 00:29:53,256
And so many of you have already


935
00:29:53,256 --> 00:29:54,486
been experiencing the benefits


936
00:29:54,956 --> 00:29:56,176
of this build improvement.


937
00:29:56,646 --> 00:29:58,116
And for those of you who haven't


938
00:29:58,116 --> 00:29:58,956
been using whole-module


939
00:29:58,956 --> 00:30:01,116
optimization, I encourage you to


940
00:30:01,116 --> 00:30:02,776
give it a try, given the huge


941
00:30:02,776 --> 00:30:03,306
wins here.


942
00:30:04,266 --> 00:30:06,536
And that is just a taste of some


943
00:30:06,536 --> 00:30:08,126
of the things in Swift 4.


944
00:30:08,536 --> 00:30:09,446
We think you're going to enjoy


945
00:30:09,446 --> 00:30:09,516
it.


946
00:30:09,546 --> 00:30:12,636
With that, I hand it back to


947
00:30:12,636 --> 00:30:12,976
Matthew.


948
00:30:14,516 --> 00:30:17,316
[ Applause ]


949
00:30:17,816 --> 00:30:18,236
>> Thank you, Ted.


950
00:30:19,476 --> 00:30:21,396
Another key area of Xcode 9 is


951
00:30:21,396 --> 00:30:23,266
our core technologies, and I'd


952
00:30:23,266 --> 00:30:24,816
like to start with our indexers.


953
00:30:25,856 --> 00:30:27,806
Our source and text indexes


954
00:30:27,806 --> 00:30:29,196
provide the back end for many


955
00:30:29,196 --> 00:30:31,116
work flows, like navigation,


956
00:30:31,166 --> 00:30:32,696
searching, and refactoring.


957
00:30:33,356 --> 00:30:34,456
And in Xcode 9, we have


958
00:30:34,456 --> 00:30:35,856
re-architected them to store


959
00:30:35,856 --> 00:30:37,806
richer data and have improved


960
00:30:37,866 --> 00:30:38,266
performance.


961
00:30:39,176 --> 00:30:40,456
In fact, you'll see work flows,


962
00:30:40,456 --> 00:30:42,556
like Open Quickly runs 35 times


963
00:30:42,556 --> 00:30:43,926
faster across your projects.


964
00:30:46,456 --> 00:30:47,846
And searching in large projects


965
00:30:47,846 --> 00:30:49,366
is up to 50 times faster.


966
00:30:50,516 --> 00:30:53,546
[ Applause ]


967
00:30:54,046 --> 00:30:55,616
So our new indexers make a huge


968
00:30:55,616 --> 00:30:55,946
difference.


969
00:30:57,006 --> 00:30:58,416
Additionally, Xcode 9 will


970
00:30:58,416 --> 00:31:00,426
include indexing while building.


971
00:31:01,276 --> 00:31:02,406
Xcode will still index in the


972
00:31:02,406 --> 00:31:02,896
background--


973
00:31:04,516 --> 00:31:07,606
[ Applause ]


974
00:31:08,106 --> 00:31:09,256
Xcode will still index in the


975
00:31:09,256 --> 00:31:10,566
background but, when you're


976
00:31:10,566 --> 00:31:12,096
building, will take advantage of


977
00:31:12,096 --> 00:31:13,586
work already being done to


978
00:31:13,586 --> 00:31:15,086
generate and update the index.


979
00:31:15,436 --> 00:31:16,366
So when you're done building,


980
00:31:16,596 --> 00:31:18,336
your index is up to date and all


981
00:31:18,336 --> 00:31:19,836
the associated functionality is


982
00:31:19,836 --> 00:31:21,106
available to you quicker than


983
00:31:21,106 --> 00:31:21,256
ever.


984
00:31:22,516 --> 00:31:26,256
[ Applause ]


985
00:31:26,756 --> 00:31:27,996
Now, our build system is also a


986
00:31:28,106 --> 00:31:29,886
key component and one we've made


987
00:31:30,006 --> 00:31:31,906
significant investments into to


988
00:31:31,906 --> 00:31:33,156
improve performance, add


989
00:31:33,226 --> 00:31:35,156
features, and support future


990
00:31:35,156 --> 00:31:35,586
goals.


991
00:31:36,236 --> 00:31:37,156
And I'm excited to share with


992
00:31:37,156 --> 00:31:39,476
you today we have a new build


993
00:31:39,476 --> 00:31:39,816
system.


994
00:31:41,196 --> 00:31:42,736
Written in Swift, our new build


995
00:31:42,776 --> 00:31:44,746
system layers on top our open


996
00:31:44,746 --> 00:31:46,596
source lower-level build system,


997
00:31:46,946 --> 00:31:47,376
llbuild.


998
00:31:47,376 --> 00:31:49,336
It uses a modern,


999
00:31:49,336 --> 00:31:50,586
forward-looking architecture


1000
00:31:50,586 --> 00:31:52,176
that has delivered some major


1001
00:31:52,176 --> 00:31:52,656
improvements.


1002
00:31:54,266 --> 00:31:55,296
Our new build system uses


1003
00:31:55,296 --> 00:31:56,646
process separation, has a


1004
00:31:56,646 --> 00:31:58,296
unified dependency graph, and


1005
00:31:58,296 --> 00:32:00,046
has improved configuration


1006
00:32:00,246 --> 00:32:00,846
analysis.


1007
00:32:01,646 --> 00:32:02,646
And we've used our new


1008
00:32:02,646 --> 00:32:04,096
architecture to improve


1009
00:32:04,146 --> 00:32:06,116
parallelism and caching to


1010
00:32:06,116 --> 00:32:07,326
reduce overall build times.


1011
00:32:08,106 --> 00:32:09,186
I'd like to dig into this for a


1012
00:32:09,186 --> 00:32:09,366
moment.


1013
00:32:10,796 --> 00:32:12,456
The build process involves two


1014
00:32:12,456 --> 00:32:13,136
main pieces.


1015
00:32:13,136 --> 00:32:14,866
There's the build system that


1016
00:32:14,866 --> 00:32:16,296
manages and coordinates tasks


1017
00:32:16,846 --> 00:32:18,266
and the build tools like


1018
00:32:18,266 --> 00:32:19,266
compilers and linkers.


1019
00:32:20,026 --> 00:32:21,036
Together, these make up the


1020
00:32:21,036 --> 00:32:21,906
total build time.


1021
00:32:23,166 --> 00:32:23,826
Now, the work for these


1022
00:32:23,826 --> 00:32:25,626
components grows with the size


1023
00:32:25,626 --> 00:32:26,146
of your project.


1024
00:32:26,786 --> 00:32:28,026
The larger the project, the more


1025
00:32:28,026 --> 00:32:29,356
work there is for each


1026
00:32:29,356 --> 00:32:29,816
component.


1027
00:32:31,476 --> 00:32:32,986
Now, this view represents a full


1028
00:32:32,986 --> 00:32:33,266
build.


1029
00:32:33,846 --> 00:32:35,326
But most of the time, we are


1030
00:32:35,326 --> 00:32:36,396
incrementally building our


1031
00:32:36,396 --> 00:32:37,916
projects, only changing a few


1032
00:32:37,966 --> 00:32:38,796
files at a time.


1033
00:32:39,746 --> 00:32:40,946
While there is a less work in


1034
00:32:40,946 --> 00:32:42,666
these cases for the build tools,


1035
00:32:43,166 --> 00:32:44,316
for larger projects, there are


1036
00:32:44,426 --> 00:32:45,816
still a number of details to


1037
00:32:45,816 --> 00:32:46,236
manage.


1038
00:32:47,206 --> 00:32:48,636
This is an area we've focused on


1039
00:32:48,736 --> 00:32:49,566
with Xcode 9.


1040
00:32:49,946 --> 00:32:51,376
In our new build system, we've


1041
00:32:51,376 --> 00:32:52,666
made the build operations


1042
00:32:52,666 --> 00:32:54,476
two-and-a-half times faster than


1043
00:32:54,476 --> 00:32:55,096
they were before.


1044
00:32:55,096 --> 00:32:57,596
And if you add on top of this --


1045
00:32:57,866 --> 00:33:00,606
yep, it's fast [laughter] -- and


1046
00:33:00,606 --> 00:33:01,816
if you add on top of this the


1047
00:33:01,816 --> 00:33:03,796
40% improvement we've seen in


1048
00:33:03,796 --> 00:33:05,536
compilation with mix-and-match


1049
00:33:05,536 --> 00:33:07,476
projects, then you can see a


1050
00:33:07,476 --> 00:33:09,336
marked improvement with Xcode 9


1051
00:33:09,336 --> 00:33:10,476
in the build, new build system


1052
00:33:10,736 --> 00:33:11,696
compared to the previous


1053
00:33:11,696 --> 00:33:11,906
release.


1054
00:33:13,906 --> 00:33:14,716
Now, the new build system is


1055
00:33:14,716 --> 00:33:16,036
designed to be compatible with


1056
00:33:16,036 --> 00:33:17,556
your projects, and we've made a


1057
00:33:17,556 --> 00:33:19,076
preview available in Xcode 9.


1058
00:33:20,096 --> 00:33:21,506
You can opt in in the Workspace


1059
00:33:21,506 --> 00:33:23,276
Settings to try it out, and


1060
00:33:23,276 --> 00:33:24,316
we'll be making it the default


1061
00:33:24,316 --> 00:33:26,186
build system coming soon.


1062
00:33:27,446 --> 00:33:29,096
Now, another core technology


1063
00:33:29,096 --> 00:33:30,886
area we've invested in is source


1064
00:33:30,886 --> 00:33:32,386
control, and I'm curious.


1065
00:33:32,416 --> 00:33:32,966
A show of hands.


1066
00:33:33,056 --> 00:33:34,416
How many of you have GitHub


1067
00:33:35,326 --> 00:33:35,516
accounts?


1068
00:33:36,036 --> 00:33:37,476
All right.


1069
00:33:38,286 --> 00:33:40,236
Craig raised his hand.


1070
00:33:41,306 --> 00:33:42,996
So you are in great company


1071
00:33:43,186 --> 00:33:43,966
because our good friends at


1072
00:33:43,966 --> 00:33:45,736
GitHub let us know that on the


1073
00:33:45,736 --> 00:33:48,086
desktop, two-thirds of all pull


1074
00:33:48,086 --> 00:33:49,386
request related activities


1075
00:33:49,646 --> 00:33:50,786
happen from a Mac.


1076
00:33:52,126 --> 00:33:53,456
So we thought we could do


1077
00:33:53,456 --> 00:33:55,186
something special here, which is


1078
00:33:55,186 --> 00:33:56,136
why we have integrated


1079
00:33:56,136 --> 00:33:58,046
GitHub.com and GitHub Enterprise


1080
00:33:58,326 --> 00:33:59,186
with Xcode 9.


1081
00:34:00,516 --> 00:34:06,746
[ Applause ]


1082
00:34:07,246 --> 00:34:08,366
After you add your GitHub


1083
00:34:08,366 --> 00:34:10,386
account, you can use Xcode's new


1084
00:34:10,516 --> 00:34:12,186
cloning work flow that presents


1085
00:34:12,186 --> 00:34:13,876
all of your projects and search


1086
00:34:13,876 --> 00:34:14,815
results from GitHub.


1087
00:34:15,696 --> 00:34:17,116
You can add stars, review


1088
00:34:17,156 --> 00:34:19,126
project details, even check out


1089
00:34:19,126 --> 00:34:20,746
ReadMe's before you access the


1090
00:34:20,746 --> 00:34:21,136
project.


1091
00:34:22,335 --> 00:34:24,025
Once you clone a project, you


1092
00:34:24,025 --> 00:34:25,716
can use Xcode's new source


1093
00:34:25,716 --> 00:34:27,826
control navigator, and this


1094
00:34:27,826 --> 00:34:28,946
presents all of your working


1095
00:34:28,946 --> 00:34:30,466
copies, including details like


1096
00:34:30,516 --> 00:34:33,166
branches, tags, remotes, even


1097
00:34:33,166 --> 00:34:34,466
push and pull counts.


1098
00:34:35,505 --> 00:34:37,025
And this is just the start of


1099
00:34:37,025 --> 00:34:38,386
some of the amazing new source


1100
00:34:38,386 --> 00:34:39,505
control work flows we have for


1101
00:34:39,505 --> 00:34:39,636
you.


1102
00:34:40,065 --> 00:34:41,096
And to show you more, I'd like


1103
00:34:41,096 --> 00:34:42,306
to bring up Mike Ferris to give


1104
00:34:42,306 --> 00:34:43,005
you a demonstration.


1105
00:34:44,516 --> 00:34:48,616
[ Applause ]


1106
00:34:49,116 --> 00:34:50,596
>> Hi. Thanks, Matthew.


1107
00:34:51,096 --> 00:34:53,346
Hello. I'm going to show you


1108
00:34:53,346 --> 00:34:55,626
today some of the great new ways


1109
00:34:55,626 --> 00:34:57,005
to work with source control in


1110
00:34:57,005 --> 00:34:57,356
Xcode.


1111
00:34:58,066 --> 00:34:59,266
Let's get started with GitHub.


1112
00:35:01,196 --> 00:35:03,116
I'm already c1nnected, and here


1113
00:35:03,116 --> 00:35:04,646
in the new clone window, all of


1114
00:35:04,646 --> 00:35:06,336
my GitHub repositories are front


1115
00:35:06,336 --> 00:35:06,776
and center.


1116
00:35:08,176 --> 00:35:09,796
Today, I actually want to find


1117
00:35:09,796 --> 00:35:11,356
the Swift Foundation Project, so


1118
00:35:11,356 --> 00:35:12,976
I'm going to search GitHub.


1119
00:35:18,966 --> 00:35:19,936
Great. There it is.


1120
00:35:20,366 --> 00:35:23,486
Let's go ahead and clone it.


1121
00:35:24,276 --> 00:35:26,156
Once the clone completes, Xcode


1122
00:35:26,156 --> 00:35:27,216
opens the project.


1123
00:35:28,546 --> 00:35:29,876
Now, my friend Felipe has been


1124
00:35:29,876 --> 00:35:31,226
telling me about some recent


1125
00:35:31,226 --> 00:35:32,626
changes to the data class, and I


1126
00:35:32,626 --> 00:35:33,446
wanted to take a look.


1127
00:35:35,326 --> 00:35:37,016
The new source control navigator


1128
00:35:37,156 --> 00:35:38,896
allows me to explore a project.


1129
00:35:40,556 --> 00:35:42,436
I can select the current branch


1130
00:35:42,436 --> 00:35:43,896
to show its history, and I see


1131
00:35:43,896 --> 00:35:45,966
all of the commits, including


1132
00:35:45,966 --> 00:35:48,256
avatars for the commit authors


1133
00:35:48,976 --> 00:35:50,796
and annotations for things like


1134
00:35:52,636 --> 00:35:52,796
tags.


1135
00:35:53,166 --> 00:35:55,136
I can filter commits by author


1136
00:35:55,136 --> 00:35:57,116
or commit message, so I'll start


1137
00:35:57,836 --> 00:36:01,936
by finding Felipe's commits, and


1138
00:36:01,936 --> 00:36:02,806
then I'll narrow it down a


1139
00:36:02,806 --> 00:36:04,356
little bit more to just the


1140
00:36:04,356 --> 00:36:05,366
commits that have to do with


1141
00:36:05,366 --> 00:36:05,746
beta.


1142
00:36:06,766 --> 00:36:09,396
This is the one that I was


1143
00:36:09,426 --> 00:36:10,006
looking for.


1144
00:36:11,666 --> 00:36:13,066
When I double-click a commit, I


1145
00:36:13,066 --> 00:36:14,476
go to the new commit viewer


1146
00:36:14,616 --> 00:36:15,746
where I can see the actual


1147
00:36:15,746 --> 00:36:16,636
source changes.


1148
00:36:17,436 --> 00:36:18,856
It's really easy to browse


1149
00:36:18,856 --> 00:36:20,996
history and to find specific


1150
00:36:20,996 --> 00:36:21,516
commits.


1151
00:36:23,956 --> 00:36:25,856
Now, I can also seamlessly use


1152
00:36:25,996 --> 00:36:27,386
source control while I'm making


1153
00:36:27,386 --> 00:36:28,916
changes, and I have another


1154
00:36:28,916 --> 00:36:30,386
project that needs a little work


1155
00:36:30,796 --> 00:36:31,576
that I'll open now.


1156
00:36:31,576 --> 00:36:37,036
Before I get started, I want to


1157
00:36:37,036 --> 00:36:37,866
make a branch.


1158
00:36:39,436 --> 00:36:40,436
In the new source control


1159
00:36:40,436 --> 00:36:42,806
navigator, I'll use the Context


1160
00:36:42,806 --> 00:36:44,086
menu to make a new branch for


1161
00:36:44,086 --> 00:36:44,606
"master."


1162
00:36:49,106 --> 00:36:51,416
And, OK. I'm all checked out on


1163
00:36:51,416 --> 00:36:52,546
my new branch, and I'm ready to


1164
00:36:52,546 --> 00:36:52,816
go.


1165
00:36:54,316 --> 00:36:55,576
In my projects, I like the


1166
00:36:55,576 --> 00:36:57,026
groups to match up with the


1167
00:36:57,026 --> 00:36:58,886
folders, and this project is


1168
00:36:58,886 --> 00:37:00,066
already set up that way.


1169
00:37:00,686 --> 00:37:02,046
But it's been bugging me that


1170
00:37:02,046 --> 00:37:03,846
these two camera model classes


1171
00:37:03,946 --> 00:37:05,186
are in the wrong group.


1172
00:37:07,006 --> 00:37:09,146
It's OK, though, because now


1173
00:37:09,146 --> 00:37:10,516
when I move these files to the


1174
00:37:10,516 --> 00:37:13,346
correct group, Xcode finally


1175
00:37:13,396 --> 00:37:14,816
also moves them to the correct


1176
00:37:14,906 --> 00:37:15,286
folder.


1177
00:37:16,516 --> 00:37:24,316
[ Applause ]


1178
00:37:24,816 --> 00:37:26,346
So in projects where the group


1179
00:37:26,346 --> 00:37:27,916
and folder layout are the same,


1180
00:37:27,916 --> 00:37:29,266
Xcode will now keep them the


1181
00:37:29,266 --> 00:37:29,656
same.


1182
00:37:31,356 --> 00:37:34,336
And when I commit, all the


1183
00:37:34,336 --> 00:37:36,446
changes will be recorded, so


1184
00:37:36,446 --> 00:37:37,466
I'll go ahead and commit this


1185
00:37:37,466 --> 00:37:41,026
now, and I think I'm ready to


1186
00:37:41,026 --> 00:37:41,956
land this branch.


1187
00:37:43,506 --> 00:37:44,516
Back in the source control


1188
00:37:44,516 --> 00:37:46,316
navigator, I'll select the


1189
00:37:46,316 --> 00:37:48,436
destination branch and again use


1190
00:37:48,436 --> 00:37:50,576
the Context menu to merge in the


1191
00:37:50,576 --> 00:37:52,116
changes for my working branch.


1192
00:37:52,736 --> 00:37:54,806
And that's it.


1193
00:37:54,896 --> 00:37:56,696
I can see that my new commit is


1194
00:37:56,696 --> 00:37:58,896
now on the master branch, and I


1195
00:37:58,896 --> 00:37:59,936
think I'm ready for my first


1196
00:37:59,936 --> 00:38:00,566
beta release.


1197
00:38:01,356 --> 00:38:02,696
So I should probably make a tag.


1198
00:38:03,626 --> 00:38:05,926
I can use the Context menu here


1199
00:38:05,926 --> 00:38:07,576
to make a tag from any commit.


1200
00:38:08,776 --> 00:38:11,956
OK, I think I'm ready to share


1201
00:38:11,956 --> 00:38:12,296
this.


1202
00:38:13,236 --> 00:38:14,716
Now, this project isn't on


1203
00:38:14,716 --> 00:38:16,686
GitHub yet, but I can easily put


1204
00:38:16,686 --> 00:38:17,026
it there.


1205
00:38:18,526 --> 00:38:20,026
I'll just choose to create a new


1206
00:38:20,026 --> 00:38:20,836
GitHub remote.


1207
00:38:22,356 --> 00:38:23,596
All these defaults look pretty


1208
00:38:23,596 --> 00:38:24,736
good, so let's go.


1209
00:38:25,636 --> 00:38:27,316
Xcode is now creating a project


1210
00:38:27,316 --> 00:38:29,276
on GitHub and pushing up my


1211
00:38:29,276 --> 00:38:31,046
repository with its entire


1212
00:38:31,046 --> 00:38:31,526
history.


1213
00:38:32,266 --> 00:38:33,976
And now, my project is hosted on


1214
00:38:33,976 --> 00:38:34,356
GitHub.


1215
00:38:35,596 --> 00:38:37,016
I have a new origin remote.


1216
00:38:37,836 --> 00:38:39,076
And from there, I can jump


1217
00:38:39,076 --> 00:38:40,546
directly to the Project page on


1218
00:38:40,546 --> 00:38:43,006
GitHub.com.


1219
00:38:43,216 --> 00:38:43,826
Here it is.


1220
00:38:45,146 --> 00:38:46,386
Now, we've worked really closely


1221
00:38:46,386 --> 00:38:48,106
with the GitHub folks on all


1222
00:38:48,106 --> 00:38:50,896
this integration, and GitHub.com


1223
00:38:50,896 --> 00:38:52,456
has a great new feature as well.


1224
00:38:53,556 --> 00:38:55,336
Xcode users can now directly


1225
00:38:55,336 --> 00:38:58,196
clone and open in Xcode using


1226
00:38:58,196 --> 00:38:59,716
this new Open in Xcode button.


1227
00:39:01,516 --> 00:39:07,386
[ Applause ]


1228
00:39:07,886 --> 00:39:09,846
Yeah. And that is Source Control


1229
00:39:09,846 --> 00:39:11,476
and GitHub in Xcode 9.


1230
00:39:12,496 --> 00:39:12,906
Matthew?


1231
00:39:14,516 --> 00:39:17,736
[ Applause ]


1232
00:39:18,236 --> 00:39:18,736
>> Thank you, Mike.


1233
00:39:19,846 --> 00:39:21,336
Xcode 9 also includes some


1234
00:39:21,336 --> 00:39:22,726
advancements in our debugging


1235
00:39:22,846 --> 00:39:24,326
and runtime analysis tools.


1236
00:39:24,846 --> 00:39:25,916
I'd like to start with the view


1237
00:39:25,916 --> 00:39:26,286
debugger.


1238
00:39:27,466 --> 00:39:28,466
View controllers play an


1239
00:39:28,466 --> 00:39:29,866
important role in UI


1240
00:39:29,866 --> 00:39:31,276
development, so we're going to


1241
00:39:31,276 --> 00:39:32,456
incorporate them into the view


1242
00:39:32,456 --> 00:39:33,416
debugging experience.


1243
00:39:34,406 --> 00:39:35,726
Captures will now include view


1244
00:39:35,726 --> 00:39:37,806
controllers in the hierarchy and


1245
00:39:37,806 --> 00:39:39,326
draw them on the canvas above


1246
00:39:39,326 --> 00:39:40,456
the views they manage.


1247
00:39:41,176 --> 00:39:42,026
Together, these will help you


1248
00:39:42,026 --> 00:39:43,886
navigate and give you a sense of


1249
00:39:43,886 --> 00:39:45,246
your view controller boundaries.


1250
00:39:46,866 --> 00:39:48,216
The view debugger will now also


1251
00:39:48,216 --> 00:39:50,146
include details from SpriteKit


1252
00:39:50,276 --> 00:39:52,026
scenes, and the view debugger is


1253
00:39:52,026 --> 00:39:53,636
a perfect way to expand and


1254
00:39:53,636 --> 00:39:55,226
rotate your scenes, scope


1255
00:39:55,226 --> 00:39:57,086
ranges, even look at clipped


1256
00:39:57,216 --> 00:39:57,516
regions.


1257
00:39:59,176 --> 00:40:00,396
We'll also include support for


1258
00:40:00,566 --> 00:40:01,816
SceneKit scenes as well.


1259
00:40:02,456 --> 00:40:03,326
And here you can use the


1260
00:40:03,376 --> 00:40:05,256
familiar SceneKit editor to


1261
00:40:05,256 --> 00:40:07,446
rotate the camera, navigate, and


1262
00:40:07,446 --> 00:40:08,306
inspect objects.


1263
00:40:09,256 --> 00:40:10,886
So view controller's SpriteKit


1264
00:40:10,986 --> 00:40:12,476
and SceneKit are now great


1265
00:40:12,476 --> 00:40:13,616
additions to our visual


1266
00:40:13,616 --> 00:40:13,936
debugging.


1267
00:40:15,516 --> 00:40:20,026
[ Applause ]


1268
00:40:20,526 --> 00:40:21,696
Over the last few years, we've


1269
00:40:21,696 --> 00:40:23,826
added runtime sanitizers to our


1270
00:40:23,826 --> 00:40:25,286
debugging experience, and they


1271
00:40:25,286 --> 00:40:27,026
have been wildly successful at


1272
00:40:27,026 --> 00:40:28,586
helping track down issues.


1273
00:40:29,436 --> 00:40:30,676
In addition to advancements in


1274
00:40:30,676 --> 00:40:32,396
our two existing sanitizers,


1275
00:40:32,736 --> 00:40:34,396
this year, we're adding two new


1276
00:40:34,396 --> 00:40:36,706
runtime analysis tools, the


1277
00:40:36,706 --> 00:40:38,556
Undefined Behavior Sanitizer and


1278
00:40:38,556 --> 00:40:40,356
the Main Thread API Checker.


1279
00:40:42,476 --> 00:40:44,136
Programming languages have some


1280
00:40:44,206 --> 00:40:45,776
undefined behaviors, such as


1281
00:40:45,776 --> 00:40:46,746
what to do with misaligned


1282
00:40:46,786 --> 00:40:48,376
pointers or when encountering


1283
00:40:48,376 --> 00:40:49,746
signed integer overflows.


1284
00:40:50,486 --> 00:40:51,806
When these situations occur,


1285
00:40:52,026 --> 00:40:53,016
they are very difficult to


1286
00:40:53,016 --> 00:40:53,376
debug.


1287
00:40:54,466 --> 00:40:56,056
The Undefined Behavior Sanitizer


1288
00:40:56,096 --> 00:40:58,116
catches many of these cases and


1289
00:40:58,116 --> 00:40:59,446
displays details to help you


1290
00:40:59,446 --> 00:40:59,976
investigate.


1291
00:41:00,506 --> 00:41:03,546
Now, the Main Thread API Checker


1292
00:41:03,546 --> 00:41:04,786
is one you're all going to love.


1293
00:41:05,606 --> 00:41:07,626
Calling UI-related APIs from a


1294
00:41:07,626 --> 00:41:09,436
background thread is a common


1295
00:41:09,436 --> 00:41:11,366
mistake and can lead to visual


1296
00:41:11,366 --> 00:41:13,296
defects and random crashes.


1297
00:41:14,236 --> 00:41:15,756
The Main Thread API Checker


1298
00:41:15,976 --> 00:41:18,086
catches AppKit and UIKit APIs


1299
00:41:18,456 --> 00:41:20,146
not called from the main thread


1300
00:41:21,236 --> 00:41:22,446
and then surfaces issues for you


1301
00:41:22,446 --> 00:41:22,986
to investigate.


1302
00:41:24,516 --> 00:41:30,106
[ Applause ]


1303
00:41:30,606 --> 00:41:32,056
We love this one so much that


1304
00:41:32,056 --> 00:41:33,506
we've enabled it by default.


1305
00:41:33,916 --> 00:41:34,836
So when you start debugging with


1306
00:41:34,836 --> 00:41:36,176
Xcode 9, you're going to get


1307
00:41:36,176 --> 00:41:37,096
this behavior for free.


1308
00:41:38,196 --> 00:41:39,796
Now, our two new runtime


1309
00:41:39,796 --> 00:41:41,396
sanitizers are available in the


1310
00:41:41,396 --> 00:41:43,126
Diagnostic Options of your


1311
00:41:43,126 --> 00:41:44,766
scheme, and all of our


1312
00:41:44,766 --> 00:41:46,266
diagnostic tools are available


1313
00:41:46,296 --> 00:41:48,226
for the Run and Test actions,


1314
00:41:48,826 --> 00:41:50,346
making them perfect for use with


1315
00:41:50,346 --> 00:41:52,466
continuous integration, which is


1316
00:41:52,466 --> 00:41:54,216
also a perfect segue into our


1317
00:41:54,216 --> 00:41:55,006
next section.


1318
00:41:56,636 --> 00:41:57,536
We believe that continuous


1319
00:41:57,536 --> 00:41:59,166
integration is an essential


1320
00:41:59,276 --> 00:42:00,816
piece of developing great


1321
00:42:00,866 --> 00:42:02,216
software, so we're making it


1322
00:42:02,216 --> 00:42:04,096
easier to use Xcode Server by


1323
00:42:04,096 --> 00:42:04,806
including all of the


1324
00:42:04,806 --> 00:42:06,526
functionality in Xcode itself.


1325
00:42:07,016 --> 00:42:08,356
You no longer need to install


1326
00:42:08,536 --> 00:42:09,506
the macOS Server app.


1327
00:42:11,516 --> 00:42:15,526
[ Applause ]


1328
00:42:16,026 --> 00:42:17,536
A new, simplified UI in the


1329
00:42:17,536 --> 00:42:19,196
Preferences takes just a few


1330
00:42:19,196 --> 00:42:21,136
clicks to get started, and we've


1331
00:42:21,136 --> 00:42:22,396
integrated new provisioning work


1332
00:42:22,396 --> 00:42:24,246
flows, including automatic and


1333
00:42:24,246 --> 00:42:25,596
manual code signing to


1334
00:42:25,596 --> 00:42:26,966
streamline your configuration.


1335
00:42:28,516 --> 00:42:29,526
Now, on the testing side, a


1336
00:42:29,526 --> 00:42:30,996
popular request we've integrated


1337
00:42:31,286 --> 00:42:33,266
is support for testing multiple


1338
00:42:33,266 --> 00:42:33,916
applications.


1339
00:42:35,166 --> 00:42:37,066
Your UI tests can now branch out


1340
00:42:37,066 --> 00:42:39,206
into many other apps, which is a


1341
00:42:39,206 --> 00:42:41,106
great improvement for working


1342
00:42:41,106 --> 00:42:43,036
with app extensions, settings,


1343
00:42:43,296 --> 00:42:44,686
and other integrated work flows.


1344
00:42:46,056 --> 00:42:47,176
Additionally, you'll find that


1345
00:42:47,176 --> 00:42:48,756
we've focused on performance for


1346
00:42:48,756 --> 00:42:49,796
UI testing as well.


1347
00:42:50,746 --> 00:42:52,326
UI testing queries run three


1348
00:42:52,326 --> 00:42:53,556
times faster than they did


1349
00:42:53,556 --> 00:42:53,986
before.


1350
00:42:54,486 --> 00:42:57,086
And if you adopt new query APIs,


1351
00:42:57,316 --> 00:42:58,986
your own tests can run up to ten


1352
00:42:59,026 --> 00:43:00,526
times faster than before.


1353
00:43:02,516 --> 00:43:06,026
[ Applause ]


1354
00:43:06,526 --> 00:43:08,116
But we didn't stop there because


1355
00:43:08,116 --> 00:43:09,296
you'll also find testing with


1356
00:43:09,326 --> 00:43:11,026
xcodebuild now defaults to


1357
00:43:11,026 --> 00:43:12,966
running in parallel for multiple


1358
00:43:12,966 --> 00:43:13,746
destinations.


1359
00:43:15,516 --> 00:43:18,916
[ Applause ]


1360
00:43:19,416 --> 00:43:20,426
This means your command-line


1361
00:43:20,426 --> 00:43:21,986
testing and your Xcode Server


1362
00:43:21,986 --> 00:43:23,826
bots can evaluate tests on many


1363
00:43:23,826 --> 00:43:26,196
devices and simulators all at


1364
00:43:26,196 --> 00:43:27,586
the same time.


1365
00:43:27,826 --> 00:43:29,046
And speaking of the simulator,


1366
00:43:30,066 --> 00:43:31,646
the simulator app now supports


1367
00:43:31,646 --> 00:43:33,876
multiple booted devices for iOS,


1368
00:43:33,876 --> 00:43:36,236
tvOS, and watchOS all in one


1369
00:43:36,656 --> 00:43:36,723
app.


1370
00:43:37,516 --> 00:43:43,046
[ Applause ]


1371
00:43:43,546 --> 00:43:45,146
Multiple simulator sessions is a


1372
00:43:45,146 --> 00:43:46,916
huge productivity win when


1373
00:43:46,916 --> 00:43:48,376
testing different configurations


1374
00:43:48,626 --> 00:43:50,236
and when evaluating multi-client


1375
00:43:50,386 --> 00:43:50,786
scenarios.


1376
00:43:52,066 --> 00:43:53,076
You'll also find the simulator


1377
00:43:53,076 --> 00:43:54,136
has a new experience.


1378
00:43:54,516 --> 00:43:55,826
We've added in a bezel around


1379
00:43:55,826 --> 00:43:57,026
the side to give you familiar


1380
00:43:57,126 --> 00:43:59,046
access to hardware controls and


1381
00:43:59,046 --> 00:44:00,476
enable interactivity, such as


1382
00:44:00,476 --> 00:44:01,946
swipe gestures from the edge.


1383
00:44:02,576 --> 00:44:03,306
And we've also made the


1384
00:44:03,376 --> 00:44:04,966
simulator fully resizable.


1385
00:44:06,516 --> 00:44:10,556
[ Applause ]


1386
00:44:11,056 --> 00:44:12,686
So there's one more feature in


1387
00:44:12,686 --> 00:44:13,746
Xcode 9 that I'd like to share


1388
00:44:13,746 --> 00:44:15,366
with you, and it starts by


1389
00:44:15,436 --> 00:44:16,266
something that we're taking


1390
00:44:16,266 --> 00:44:18,796
away, and it's the need to use


1391
00:44:18,796 --> 00:44:19,256
one of these.


1392
00:44:20,516 --> 00:44:32,446
[ Applause ]


1393
00:44:32,946 --> 00:44:33,916
You know, I was going to say, I


1394
00:44:33,916 --> 00:44:34,956
know you all love your USB


1395
00:44:34,956 --> 00:44:36,136
cables, but that's apparently


1396
00:44:36,136 --> 00:44:36,766
not true [laughter].


1397
00:44:37,736 --> 00:44:39,026
But it doesn't matter because in


1398
00:44:39,026 --> 00:44:40,066
Xcode 9, it's no longer


1399
00:44:40,066 --> 00:44:40,916
necessary.


1400
00:44:40,916 --> 00:44:42,046
We are adding in wireless


1401
00:44:42,046 --> 00:44:42,456
development.


1402
00:44:43,516 --> 00:44:50,976
[ Applause ]


1403
00:44:51,476 --> 00:44:52,776
With Xcode 9, you can use the


1404
00:44:52,776 --> 00:44:54,736
connection type best suited for


1405
00:44:55,476 --> 00:44:57,046
your needs -- USB, Wi-Fi, or


1406
00:44:57,046 --> 00:44:58,286
Ethernet -- when connecting to


1407
00:44:58,286 --> 00:45:00,436
your iOS and tvOS devices.


1408
00:45:01,356 --> 00:45:02,396
All of the development work


1409
00:45:02,396 --> 00:45:03,476
flows are supported with


1410
00:45:03,476 --> 00:45:04,276
wireless development.


1411
00:45:04,906 --> 00:45:06,066
In fact, you can also use


1412
00:45:06,066 --> 00:45:07,316
wireless development with other


1413
00:45:07,316 --> 00:45:08,696
apps, like Accessibility


1414
00:45:08,696 --> 00:45:10,686
Inspector, QuickTime Player, and


1415
00:45:10,686 --> 00:45:11,096
Console.


1416
00:45:11,506 --> 00:45:12,556
So this will be a natural


1417
00:45:12,556 --> 00:45:13,986
addition to your development


1418
00:45:14,606 --> 00:45:15,576
work flows.


1419
00:45:16,146 --> 00:45:17,566
So that's just a taste of what


1420
00:45:17,566 --> 00:45:19,806
we have for you in Xcode 9 -- a


1421
00:45:19,806 --> 00:45:20,936
new Source Editor with


1422
00:45:20,936 --> 00:45:23,856
refactoring alongside Swift 4; a


1423
00:45:23,856 --> 00:45:25,476
new indexer, build system, and


1424
00:45:25,476 --> 00:45:26,586
source control work flows


1425
00:45:26,586 --> 00:45:28,246
integrating GitHub; and


1426
00:45:28,246 --> 00:45:29,526
advancements in our debugging,


1427
00:45:29,636 --> 00:45:31,656
analysis, and testing tools to


1428
00:45:31,656 --> 00:45:32,876
go alongside wireless


1429
00:45:32,926 --> 00:45:33,426
development.


1430
00:45:34,176 --> 00:45:36,046
All that and more is in Xcode 9,


1431
00:45:36,566 --> 00:45:37,696
and that's our tools update for


1432
00:45:37,696 --> 00:45:37,886
today.


1433
00:45:39,516 --> 00:45:48,306
[ Applause ]


1434
00:45:48,806 --> 00:45:49,686
Next, we'd like to share with


1435
00:45:49,686 --> 00:45:51,256
you some of the new APIs we have


1436
00:45:51,256 --> 00:45:52,476
for you, and for that, I'm going


1437
00:45:52,476 --> 00:45:53,616
to invite up Josh Shaffer.


1438
00:45:54,516 --> 00:45:59,436
[ Applause ]


1439
00:45:59,936 --> 00:46:00,536
>> Thanks, Matthew.


1440
00:46:01,606 --> 00:46:03,156
I'm really excited to tell you


1441
00:46:03,156 --> 00:46:05,506
about so many of the new and


1442
00:46:05,506 --> 00:46:07,356
enhanced APIs in iOS 11.


1443
00:46:10,206 --> 00:46:12,356
There's a ton of new things, so


1444
00:46:12,356 --> 00:46:13,216
let's start with the most


1445
00:46:13,216 --> 00:46:15,416
important new API, drag and


1446
00:46:15,416 --> 00:46:15,786
drop.


1447
00:46:17,186 --> 00:46:18,746
Drag and drop is simple to use,


1448
00:46:18,746 --> 00:46:20,106
with consistent interactions


1449
00:46:20,106 --> 00:46:21,696
across the system, and of


1450
00:46:21,696 --> 00:46:23,096
course, it's also really easy to


1451
00:46:23,096 --> 00:46:24,746
add to your apps as well.


1452
00:46:26,136 --> 00:46:27,486
While simple, it's also


1453
00:46:27,486 --> 00:46:29,016
incredibly flexible and


1454
00:46:29,016 --> 00:46:31,136
customizable, and it takes full


1455
00:46:31,136 --> 00:46:33,016
advantage of iPad's multi-touch


1456
00:46:33,016 --> 00:46:33,676
capabilities.


1457
00:46:34,566 --> 00:46:35,916
And of course, it's secure by


1458
00:46:35,916 --> 00:46:38,046
design, allowing access to the


1459
00:46:38,156 --> 00:46:39,786
data being dragged only once a


1460
00:46:39,786 --> 00:46:40,706
drop occurs.


1461
00:46:41,296 --> 00:46:43,726
Adding drag and drop to your


1462
00:46:43,726 --> 00:46:45,856
apps is almost as easy as using


1463
00:46:45,856 --> 00:46:46,026
it.


1464
00:46:46,926 --> 00:46:48,676
It's completely automatic for


1465
00:46:48,676 --> 00:46:50,536
standard text and web controls,


1466
00:46:50,946 --> 00:46:52,336
so your apps may actually


1467
00:46:52,336 --> 00:46:53,356
already support it.


1468
00:46:54,656 --> 00:46:56,836
Existing apps like Slack can


1469
00:46:56,836 --> 00:46:58,436
already participate -- for


1470
00:46:58,436 --> 00:47:00,126
example, by accepting drops of


1471
00:47:00,126 --> 00:47:02,706
text in their existing text


1472
00:47:03,296 --> 00:47:03,446
views.


1473
00:47:03,636 --> 00:47:04,856
For other cases, you'll need to


1474
00:47:04,856 --> 00:47:05,556
do a little work.


1475
00:47:06,426 --> 00:47:07,496
Now, if you're displaying your


1476
00:47:07,496 --> 00:47:09,206
content in a table view or a


1477
00:47:09,206 --> 00:47:11,096
collection view, new delegate


1478
00:47:11,096 --> 00:47:12,596
methods make it really easy to


1479
00:47:12,596 --> 00:47:14,126
add drag-and-drop support with


1480
00:47:14,126 --> 00:47:15,316
just a few lines of code.


1481
00:47:16,286 --> 00:47:17,946
Beginning a drag is as easy as


1482
00:47:17,946 --> 00:47:19,206
providing the data, and


1483
00:47:19,716 --> 00:47:21,496
accepting a drop is just as


1484
00:47:21,496 --> 00:47:21,816
simple.


1485
00:47:23,356 --> 00:47:24,446
For everything else, there's an


1486
00:47:24,446 --> 00:47:28,356
easy-to-use, standard API that


1487
00:47:28,356 --> 00:47:29,646
can integrate with all of your


1488
00:47:29,646 --> 00:47:30,446
custom views.


1489
00:47:31,976 --> 00:47:33,886
By default, the API provides


1490
00:47:33,886 --> 00:47:34,936
standard gestures and


1491
00:47:34,936 --> 00:47:36,836
animations, but it's fully


1492
00:47:36,836 --> 00:47:37,626
customizable.


1493
00:47:38,276 --> 00:47:39,496
You can customize the lift


1494
00:47:39,496 --> 00:47:40,636
animations that occur at the


1495
00:47:40,636 --> 00:47:42,866
start of a drag, add multiple


1496
00:47:42,866 --> 00:47:44,586
items to an already in-progress


1497
00:47:44,586 --> 00:47:46,886
drag, generate custom preview


1498
00:47:46,886 --> 00:47:49,236
images for each item, choose the


1499
00:47:49,236 --> 00:47:50,686
badge to display on the dragged


1500
00:47:50,686 --> 00:47:52,146
item to indicate that it will be


1501
00:47:52,146 --> 00:47:54,396
moved or copied, and even


1502
00:47:54,396 --> 00:47:55,916
provide fully custom set-down


1503
00:47:55,916 --> 00:47:57,656
animations to play when the drop


1504
00:47:57,656 --> 00:47:58,206
occurs.


1505
00:47:59,196 --> 00:48:01,566
The API is flexible enough that


1506
00:48:01,566 --> 00:48:02,906
even the really custom,


1507
00:48:02,906 --> 00:48:04,986
gesture-based event creation and


1508
00:48:04,986 --> 00:48:06,826
reordering in the Calendars app


1509
00:48:06,826 --> 00:48:08,416
was able to be re-implemented on


1510
00:48:08,516 --> 00:48:09,536
top of the drag-and-drop APIs.


1511
00:48:09,536 --> 00:48:12,406
And the flexibility doesn't just


1512
00:48:12,406 --> 00:48:13,526
end with the appearance.


1513
00:48:13,596 --> 00:48:15,486
The data model is incredibly


1514
00:48:15,556 --> 00:48:16,386
flexible as well.


1515
00:48:17,396 --> 00:48:18,406
It can work with any type of


1516
00:48:18,406 --> 00:48:19,956
data that your app uses,


1517
00:48:20,386 --> 00:48:21,696
allowing you to support really


1518
00:48:21,696 --> 00:48:22,836
rich interactions.


1519
00:48:23,596 --> 00:48:25,446
For example, locations dragged


1520
00:48:25,446 --> 00:48:27,116
out of maps include rich


1521
00:48:27,116 --> 00:48:29,446
location information and really


1522
00:48:29,446 --> 00:48:30,596
detailed drag previews.


1523
00:48:31,866 --> 00:48:33,306
Now, with drag and drop, even


1524
00:48:33,306 --> 00:48:34,536
existing interactions get


1525
00:48:34,576 --> 00:48:34,896
better.


1526
00:48:35,926 --> 00:48:37,586
Reminders uses UITableView's


1527
00:48:37,586 --> 00:48:38,946
built-in reordering support to


1528
00:48:38,946 --> 00:48:40,586
allow you to quickly reorder and


1529
00:48:40,586 --> 00:48:41,706
organize your tasks.


1530
00:48:42,276 --> 00:48:44,636
You can begin a drag to drag an


1531
00:48:44,636 --> 00:48:46,446
item, to move it to a different


1532
00:48:46,446 --> 00:48:48,546
spot, and now even pick up


1533
00:48:48,546 --> 00:48:50,556
multiple reminders and move them


1534
00:48:50,556 --> 00:48:52,486
between lists so that you can


1535
00:48:52,486 --> 00:48:54,186
really quickly organize all of


1536
00:48:54,186 --> 00:48:54,946
your tasks.


1537
00:48:56,136 --> 00:48:57,526
Because all of this is built on


1538
00:48:57,696 --> 00:48:59,916
top of a common API, it works


1539
00:48:59,916 --> 00:49:01,476
seamlessly together as well.


1540
00:49:02,306 --> 00:49:03,616
You can bring out Calendar, and


1541
00:49:03,616 --> 00:49:04,826
begin dragging one of those


1542
00:49:04,826 --> 00:49:06,836
events, and drag it over into


1543
00:49:06,876 --> 00:49:08,696
Reminders, where you can drop it


1544
00:49:08,736 --> 00:49:12,266
to quickly add it to your to-do


1545
00:49:12,416 --> 00:49:12,536
list.


1546
00:49:12,536 --> 00:49:13,426
Now, while a drag is in


1547
00:49:13,506 --> 00:49:15,096
progress, the system handles


1548
00:49:15,156 --> 00:49:16,866
that touch, leaving your app


1549
00:49:17,166 --> 00:49:18,666
fully interactive and free to


1550
00:49:18,666 --> 00:49:20,526
respond to any other touches.


1551
00:49:21,406 --> 00:49:22,816
This makes it really easy to


1552
00:49:22,816 --> 00:49:24,216
support even complex


1553
00:49:24,216 --> 00:49:25,436
interactions that require


1554
00:49:25,436 --> 00:49:27,636
navigation within your app, such


1555
00:49:27,636 --> 00:49:29,766
as moving photos between albums.


1556
00:49:30,936 --> 00:49:33,106
Now, on the iPad, the entire OS


1557
00:49:33,106 --> 00:49:34,276
remains fully interactive,


1558
00:49:34,766 --> 00:49:36,226
allowing you to pick up multiple


1559
00:49:36,226 --> 00:49:37,836
items in one place and then


1560
00:49:37,836 --> 00:49:39,506
navigate freely around the


1561
00:49:39,556 --> 00:49:41,076
system, even switching apps,


1562
00:49:41,396 --> 00:49:42,526
bringing those dragged items


1563
00:49:42,526 --> 00:49:43,956
with you so that you can use


1564
00:49:43,956 --> 00:49:45,526
them somewhere else.


1565
00:49:46,376 --> 00:49:48,346
During all this navigation, the


1566
00:49:48,346 --> 00:49:50,366
data behind the drag is being


1567
00:49:50,366 --> 00:49:52,896
protected from unintended access


1568
00:49:52,976 --> 00:49:54,146
by any other apps that you're


1569
00:49:54,186 --> 00:49:54,966
dragging it over.


1570
00:49:55,776 --> 00:49:58,366
Until a drag is completed, only


1571
00:49:58,366 --> 00:50:00,046
metadata is made available to


1572
00:50:00,046 --> 00:50:01,466
potential drop destinations.


1573
00:50:02,506 --> 00:50:03,946
When a drop does occur, the data


1574
00:50:04,046 --> 00:50:05,506
is quickly made available to the


1575
00:50:05,506 --> 00:50:06,356
receiving app.


1576
00:50:07,156 --> 00:50:08,386
Now, the security provided by


1577
00:50:08,386 --> 00:50:09,836
this lazy delivery doesn't have


1578
00:50:09,876 --> 00:50:10,786
to come at the cost of


1579
00:50:10,786 --> 00:50:12,526
performance either because even


1580
00:50:12,526 --> 00:50:13,946
really large files can be


1581
00:50:14,036 --> 00:50:15,656
transferred almost instantly


1582
00:50:15,856 --> 00:50:17,016
with APFS cloning.


1583
00:50:18,356 --> 00:50:19,466
Now, this is all just the


1584
00:50:19,466 --> 00:50:19,976
beginning.


1585
00:50:20,916 --> 00:50:22,346
To show you some other exciting


1586
00:50:22,346 --> 00:50:23,796
use cases and to give you an


1587
00:50:23,796 --> 00:50:25,206
idea of how easy it can be to


1588
00:50:25,206 --> 00:50:26,436
add drag and drop to your apps


1589
00:50:26,436 --> 00:50:28,096
as well, Eliza Block will now


1590
00:50:28,096 --> 00:50:29,056
come up and give us a demo.


1591
00:50:30,096 --> 00:50:30,466
Eliza?


1592
00:50:31,516 --> 00:50:36,466
[ Applause ]


1593
00:50:36,966 --> 00:50:37,496
>> Thanks, Josh.


1594
00:50:37,826 --> 00:50:39,996
So I'd like to begin by showing


1595
00:50:39,996 --> 00:50:41,146
an improvement that we've made


1596
00:50:41,146 --> 00:50:43,386
to the iOS Home screen by


1597
00:50:43,386 --> 00:50:44,566
leveraging the drag-and-drop


1598
00:50:44,566 --> 00:50:44,786
API.


1599
00:50:45,606 --> 00:50:48,076
So here on this iPad, I can


1600
00:50:48,246 --> 00:50:53,186
press and hold to begin


1601
00:50:53,186 --> 00:50:54,546
reordering my apps.


1602
00:50:54,546 --> 00:50:55,886
For example, I could create, I


1603
00:50:55,886 --> 00:50:57,546
could drag reminders over the


1604
00:50:57,546 --> 00:50:59,236
Calendar to create a


1605
00:50:59,456 --> 00:51:00,376
Productivity folder.


1606
00:51:01,856 --> 00:51:03,796
Now, in iOS 11, we have


1607
00:51:03,886 --> 00:51:05,606
completely rewritten app


1608
00:51:05,826 --> 00:51:07,866
reordering using drag and drop,


1609
00:51:07,866 --> 00:51:09,056
and we've made it a whole lot


1610
00:51:09,056 --> 00:51:09,776
more powerful.


1611
00:51:10,616 --> 00:51:11,346
Let's find some more


1612
00:51:11,346 --> 00:51:12,786
productivity apps to add to this


1613
00:51:12,866 --> 00:51:13,176
folder.


1614
00:51:13,906 --> 00:51:16,006
Here's Pages.


1615
00:51:16,006 --> 00:51:17,946
I'll begin dragging it, and as I


1616
00:51:17,946 --> 00:51:19,766
do, the Home screen remains


1617
00:51:19,766 --> 00:51:21,406
fully interactive, so with my


1618
00:51:21,486 --> 00:51:23,266
other hand, I can swipe between


1619
00:51:23,266 --> 00:51:25,376
pages, navigate in and out of


1620
00:51:25,376 --> 00:51:27,616
folders, and the best part is


1621
00:51:27,616 --> 00:51:28,856
I'm no longer limited to


1622
00:51:28,856 --> 00:51:30,416
dragging a single app at a time.


1623
00:51:30,576 --> 00:51:33,486
I can tap Keynote to add it to


1624
00:51:33,536 --> 00:51:35,496
my ongoing drag, close the


1625
00:51:35,496 --> 00:51:36,956
folder, and let's look around


1626
00:51:36,956 --> 00:51:38,176
and see if we can find Numbers.


1627
00:51:39,516 --> 00:51:43,086
[ Applause ]


1628
00:51:43,586 --> 00:51:44,956
There it is, so I'll tap it,


1629
00:51:45,296 --> 00:51:47,426
grab it, and now I can drag all


1630
00:51:47,426 --> 00:51:48,796
three of these apps back over to


1631
00:51:48,796 --> 00:51:50,436
the first page and drop them


1632
00:51:50,436 --> 00:51:52,156
into my folder in one fell


1633
00:51:52,216 --> 00:51:52,396
swoop.


1634
00:51:53,516 --> 00:51:58,376
[ Applause ]


1635
00:51:58,876 --> 00:52:00,336
So that's app reordering with


1636
00:52:00,336 --> 00:52:01,586
drag and drop, and you can do


1637
00:52:01,586 --> 00:52:02,656
this kind of thing in your own


1638
00:52:02,656 --> 00:52:03,586
applications too.


1639
00:52:04,496 --> 00:52:06,356
To see an example, let me launch


1640
00:52:06,416 --> 00:52:08,426
this app called Byte Swap that


1641
00:52:08,426 --> 00:52:10,556
my team has written to help me


1642
00:52:10,556 --> 00:52:12,686
view and organize my Swift


1643
00:52:12,876 --> 00:52:14,316
Playgrounds trading cards.


1644
00:52:15,756 --> 00:52:18,476
So it's composed of a Swift,


1645
00:52:18,476 --> 00:52:19,846
sorry, a split-view controller,


1646
00:52:20,286 --> 00:52:22,276
and on the right here, you can


1647
00:52:22,276 --> 00:52:23,866
see that my cards are displayed


1648
00:52:23,866 --> 00:52:25,146
in a collection view using a


1649
00:52:25,146 --> 00:52:26,256
basic flow layout.


1650
00:52:27,136 --> 00:52:28,856
Now, I think it would be cool if


1651
00:52:28,856 --> 00:52:30,406
I could pick up these cards and


1652
00:52:30,406 --> 00:52:31,576
drag them around to reorder


1653
00:52:31,576 --> 00:52:32,936
them, move them between my


1654
00:52:32,936 --> 00:52:35,156
different albums, and so let's


1655
00:52:35,156 --> 00:52:36,486
actually go ahead and implement


1656
00:52:36,486 --> 00:52:37,016
that now.


1657
00:52:37,556 --> 00:52:40,606
I'll switch over to Xcode, where


1658
00:52:40,606 --> 00:52:42,426
I have the Cards View controller


1659
00:52:42,426 --> 00:52:42,876
open.


1660
00:52:47,096 --> 00:52:48,936
Now, because Table View and


1661
00:52:48,936 --> 00:52:50,566
Collection View already contain


1662
00:52:50,676 --> 00:52:52,096
built-in support for drag and


1663
00:52:52,096 --> 00:52:54,386
drop, adding drag and drop if


1664
00:52:54,386 --> 00:52:55,196
you're using one of these


1665
00:52:55,226 --> 00:52:56,786
classes is really simple.


1666
00:52:57,746 --> 00:52:59,836
I'll start by just declaring


1667
00:52:59,836 --> 00:53:01,626
conformance to the new


1668
00:53:01,626 --> 00:53:03,426
UICollectionView drag/delegate


1669
00:53:03,426 --> 00:53:03,776
protocol.


1670
00:53:03,776 --> 00:53:07,476
When I do that, Xcode helpfully


1671
00:53:07,476 --> 00:53:09,016
informs me that I have not yet


1672
00:53:09,016 --> 00:53:10,346
implemented one of the required


1673
00:53:10,346 --> 00:53:12,116
methods in that protocol, and I


1674
00:53:12,116 --> 00:53:13,806
can tap the issue and accept the


1675
00:53:13,856 --> 00:53:16,046
Fix-it to add the protocol


1676
00:53:16,046 --> 00:53:17,636
[inaudible].


1677
00:53:17,636 --> 00:53:19,496
So this method, Items for


1678
00:53:19,496 --> 00:53:21,186
Beginning Session, is prompting


1679
00:53:21,186 --> 00:53:22,646
me to package up the data for


1680
00:53:22,716 --> 00:53:24,256
the item being dragged, and I'm


1681
00:53:24,286 --> 00:53:25,736
going to do that by calling out


1682
00:53:25,876 --> 00:53:28,106
to a helper method that I wrote


1683
00:53:28,106 --> 00:53:29,866
before, which just packages up


1684
00:53:29,866 --> 00:53:31,556
the data as an image and makes


1685
00:53:31,556 --> 00:53:32,106
it draggable.


1686
00:53:32,106 --> 00:53:35,396
That's actually all I have to do


1687
00:53:35,396 --> 00:53:36,666
to get the bare bones of drag


1688
00:53:36,666 --> 00:53:39,096
working in this application, but


1689
00:53:39,096 --> 00:53:40,766
I also want to make it possible


1690
00:53:40,866 --> 00:53:44,846
to tap to add items to an


1691
00:53:44,846 --> 00:53:45,636
ongoing drag.


1692
00:53:45,816 --> 00:53:47,226
So I'm going to add a second


1693
00:53:47,316 --> 00:53:48,376
method to do that, and then


1694
00:53:48,376 --> 00:53:53,136
we'll go ahead and run this.


1695
00:53:53,336 --> 00:53:54,896
I'll switch over to my iPad.


1696
00:53:54,896 --> 00:53:57,176
Whoops. And here it is.


1697
00:53:57,176 --> 00:53:59,726
As you can see, now I can pick


1698
00:53:59,726 --> 00:54:01,126
this guy up and drag him around.


1699
00:54:01,696 --> 00:54:03,626
But I can't reorder yet because


1700
00:54:03,626 --> 00:54:04,926
I haven't implemented drop in


1701
00:54:04,926 --> 00:54:05,676
this application.


1702
00:54:06,326 --> 00:54:07,856
However, I still can freely


1703
00:54:07,856 --> 00:54:10,636
interact with the app and I can


1704
00:54:10,636 --> 00:54:12,186
pick up a second item to add it


1705
00:54:12,186 --> 00:54:14,266
to my existing drag, and this is


1706
00:54:14,266 --> 00:54:15,506
actually more useful than it


1707
00:54:15,506 --> 00:54:17,836
looks because, in addition to


1708
00:54:17,836 --> 00:54:18,726
being able to drag these


1709
00:54:18,726 --> 00:54:20,956
arounds, I can interact with


1710
00:54:21,036 --> 00:54:22,426
other apps which may have


1711
00:54:22,426 --> 00:54:23,546
implemented drop already.


1712
00:54:23,546 --> 00:54:25,116
For example, Mail.


1713
00:54:26,436 --> 00:54:28,846
So I can go into Mail, tap to


1714
00:54:28,846 --> 00:54:30,536
compose a message, and then drop


1715
00:54:30,536 --> 00:54:32,526
these two cards in the message


1716
00:54:33,456 --> 00:54:34,106
just like that.


1717
00:54:34,306 --> 00:54:35,816
So that's with only two delegate


1718
00:54:35,816 --> 00:54:37,546
methods added to my existing


1719
00:54:37,546 --> 00:54:38,086
application.


1720
00:54:39,256 --> 00:54:40,836
All right, switching back over


1721
00:54:41,516 --> 00:54:43,126
to Xcode, let's go ahead and


1722
00:54:43,126 --> 00:54:44,006
implement drop.


1723
00:54:45,176 --> 00:54:48,006
So I will start once again by


1724
00:54:48,006 --> 00:54:50,146
declaring conformance to a new


1725
00:54:50,146 --> 00:54:51,116
delegate protocol,


1726
00:54:51,116 --> 00:54:52,436
UICollectionView drop delegate.


1727
00:54:52,436 --> 00:54:55,676
And Xcode will once again offer


1728
00:54:55,676 --> 00:54:57,886
to fill in the missing protocol


1729
00:54:58,556 --> 00:54:58,686
step.


1730
00:54:59,536 --> 00:55:02,196
So this perform drop method is a


1731
00:55:02,196 --> 00:55:03,346
little bit more involved.


1732
00:55:04,086 --> 00:55:08,266
I have to update my model for


1733
00:55:08,776 --> 00:55:10,156
the, to, by receiving the new


1734
00:55:10,156 --> 00:55:12,696
drop data, and, also, I'm


1735
00:55:12,696 --> 00:55:14,046
customizing the animation here a


1736
00:55:14,046 --> 00:55:15,146
little bit with a helper method.


1737
00:55:15,616 --> 00:55:18,246
And there's one other method I


1738
00:55:18,246 --> 00:55:21,786
need to add as well, which is


1739
00:55:21,826 --> 00:55:24,506
called as I drag my finger over


1740
00:55:24,506 --> 00:55:26,516
one of the drop targets, and it,


1741
00:55:26,516 --> 00:55:27,456
that's what causes the


1742
00:55:27,456 --> 00:55:28,656
Collection View to open up a gap


1743
00:55:28,836 --> 00:55:30,306
so that I can reorganize within


1744
00:55:30,306 --> 00:55:31,056
a particular list.


1745
00:55:32,366 --> 00:55:35,366
So switching over to my iPad


1746
00:55:35,586 --> 00:55:38,186
again, this time when I pick up


1747
00:55:38,586 --> 00:55:41,056
a card, the other ones move out


1748
00:55:41,056 --> 00:55:43,816
of the way, and I can still


1749
00:55:43,906 --> 00:55:46,286
switch between lists, grab a


1750
00:55:46,286 --> 00:55:49,276
couple more, and then I can drop


1751
00:55:49,276 --> 00:55:50,796
them all together in my


1752
00:55:50,796 --> 00:55:51,396
Favorites album.


1753
00:55:52,006 --> 00:55:54,376
So easy. So that's adding drag


1754
00:55:54,376 --> 00:55:55,796
and drop to your applications.


1755
00:55:56,476 --> 00:55:58,386
And switching gears, we've been


1756
00:55:58,386 --> 00:55:59,396
working with a number of


1757
00:55:59,396 --> 00:56:01,166
partners who have been working


1758
00:56:01,166 --> 00:56:03,336
on getting drag and drop in


1759
00:56:03,336 --> 00:56:04,176
their applications.


1760
00:56:04,486 --> 00:56:05,906
And one partner that has really


1761
00:56:05,996 --> 00:56:07,636
stood out for their creative use


1762
00:56:07,636 --> 00:56:09,386
of this API is Adobe.


1763
00:56:09,856 --> 00:56:11,046
So now, I would like to invite


1764
00:56:11,046 --> 00:56:13,056
up Brooke Francesi from Adobe to


1765
00:56:13,056 --> 00:56:13,856
show you what they've built.


1766
00:56:15,516 --> 00:56:20,876
[ Applause ]


1767
00:56:21,376 --> 00:56:22,016
>> Thanks, Eliza.


1768
00:56:22,416 --> 00:56:24,946
I cannot wait to show you what


1769
00:56:24,946 --> 00:56:26,266
drag and drop can mean for the


1770
00:56:26,266 --> 00:56:27,296
creative professional.


1771
00:56:27,946 --> 00:56:30,596
This is Adobe Photoshop Sketch,


1772
00:56:31,056 --> 00:56:32,526
and it's a focused painting and


1773
00:56:32,526 --> 00:56:33,486
drawing app with some of the


1774
00:56:33,486 --> 00:56:35,066
best natural media brushes,


1775
00:56:35,416 --> 00:56:36,746
including all of My Photoshop


1776
00:56:36,746 --> 00:56:37,166
Brushes.


1777
00:56:37,676 --> 00:56:38,506
I've been working on this


1778
00:56:38,506 --> 00:56:40,166
illustration, and before I


1779
00:56:40,166 --> 00:56:41,336
finish it up, I want to add a


1780
00:56:41,336 --> 00:56:42,636
few elements to the background.


1781
00:56:43,096 --> 00:56:44,296
And in order to do that, I'm


1782
00:56:44,416 --> 00:56:46,996
going to open another Adobe app


1783
00:56:46,996 --> 00:56:47,746
called Capture.


1784
00:56:48,506 --> 00:56:50,066
Capture is an app that allows me


1785
00:56:50,066 --> 00:56:52,046
to capture inspiration from the


1786
00:56:52,046 --> 00:56:53,866
world around me to create things


1787
00:56:53,866 --> 00:56:57,036
like patterns, color themes, and


1788
00:56:57,036 --> 00:56:59,096
even custom brushes, which I've


1789
00:56:59,096 --> 00:57:00,116
been using to work on this


1790
00:57:00,116 --> 00:57:00,546
project.


1791
00:57:01,386 --> 00:57:03,456
Now, in order to add some


1792
00:57:03,456 --> 00:57:04,826
elements to the background, I


1793
00:57:04,826 --> 00:57:06,296
need to load the color theme


1794
00:57:06,296 --> 00:57:08,416
into my toolbar in Photoshop


1795
00:57:08,416 --> 00:57:08,926
Sketch.


1796
00:57:09,676 --> 00:57:11,306
In the past, I would've had to


1797
00:57:11,306 --> 00:57:13,276
go find all those colors,


1798
00:57:13,616 --> 00:57:15,336
manually load every single one


1799
00:57:15,336 --> 00:57:17,616
of them into my toolbar, go


1800
00:57:17,616 --> 00:57:18,886
back, find the brushes.


1801
00:57:19,256 --> 00:57:19,736
You get it.


1802
00:57:19,736 --> 00:57:21,456
It's a pretty long and arduous


1803
00:57:21,506 --> 00:57:21,936
process.


1804
00:57:23,046 --> 00:57:25,056
But with drag and drop, I can


1805
00:57:25,056 --> 00:57:27,126
select all five colors at once,


1806
00:57:27,996 --> 00:57:29,576
navigate to my Brushes tab,


1807
00:57:30,286 --> 00:57:32,086
select the two brushes that I've


1808
00:57:32,086 --> 00:57:33,166
been using to work on in this


1809
00:57:33,226 --> 00:57:36,566
project, and simultaneously drag


1810
00:57:36,566 --> 00:57:38,096
them over into my toolbar.


1811
00:57:38,556 --> 00:57:39,676
Pretty awesome, right?


1812
00:57:41,516 --> 00:57:44,866
[ Applause ]


1813
00:57:45,366 --> 00:57:46,956
Something that would've taken me


1814
00:57:47,096 --> 00:57:49,256
a ton of steps before took me


1815
00:57:49,256 --> 00:57:50,046
just seconds.


1816
00:57:50,506 --> 00:57:51,796
We even took advantage of the


1817
00:57:51,796 --> 00:57:53,896
API to create our own custom


1818
00:57:53,896 --> 00:57:54,596
animations.


1819
00:57:56,016 --> 00:57:57,346
Once we got our hands on the new


1820
00:57:57,346 --> 00:57:59,206
drag and drop, we were amazed at


1821
00:57:59,206 --> 00:58:00,546
how simple and straightforward


1822
00:58:00,546 --> 00:58:01,326
it was to implement.


1823
00:58:01,726 --> 00:58:03,996
Within just two days, we had one


1824
00:58:03,996 --> 00:58:05,786
engineer who had the basic API


1825
00:58:05,856 --> 00:58:08,136
feature working in one app, and


1826
00:58:08,136 --> 00:58:09,236
so we just decided to keep


1827
00:58:09,236 --> 00:58:09,836
going.


1828
00:58:10,176 --> 00:58:11,486
The possibilities with drag and


1829
00:58:11,486 --> 00:58:12,946
drop are literally endless.


1830
00:58:13,796 --> 00:58:15,486
The cool thing is is I'm not


1831
00:58:15,486 --> 00:58:18,516
limited to just images, and


1832
00:58:18,516 --> 00:58:19,956
brushes, and color themes.


1833
00:58:20,266 --> 00:58:21,896
I can actually drag and drop


1834
00:58:21,896 --> 00:58:23,926
layers between multiple apps.


1835
00:58:24,326 --> 00:58:25,486
Now, I want to see what this is


1836
00:58:25,486 --> 00:58:26,876
going to look like in Context.


1837
00:58:27,356 --> 00:58:28,376
Actually, let me draw a little


1838
00:58:28,376 --> 00:58:28,946
bit on here.


1839
00:58:29,206 --> 00:58:30,526
I want to see what this is going


1840
00:58:30,526 --> 00:58:32,526
to look like in Context, and so


1841
00:58:32,526 --> 00:58:33,716
I'm going to take these layers


1842
00:58:33,716 --> 00:58:35,296
that I've been working on by


1843
00:58:35,366 --> 00:58:39,446
selecting them, I'm going to


1844
00:58:39,536 --> 00:58:41,106
open up my Dock, and I'm going


1845
00:58:41,326 --> 00:58:43,526
to drag them into another Adobe


1846
00:58:43,526 --> 00:58:44,976
app, Photoshop Mix, which is an


1847
00:58:44,976 --> 00:58:46,346
image compositing tool.


1848
00:58:46,766 --> 00:58:48,176
Now, what's really cool is once


1849
00:58:48,176 --> 00:58:49,586
I'm in here, I have options.


1850
00:58:49,836 --> 00:58:51,416
I can target any specific


1851
00:58:51,416 --> 00:58:53,116
coordinates on my canvas if I


1852
00:58:53,116 --> 00:58:54,426
know exactly where I want those


1853
00:58:54,426 --> 00:58:57,326
layers to be, or I can just drag


1854
00:58:57,326 --> 00:58:58,716
them right into my layer stack.


1855
00:58:59,326 --> 00:59:02,316
That's pretty awesome, right?


1856
00:59:02,316 --> 00:59:03,556
I never get tired of seeing that


1857
00:59:03,556 --> 00:59:04,046
happen.


1858
00:59:05,516 --> 00:59:09,936
[ Applause ]


1859
00:59:10,436 --> 00:59:11,676
Now, in case you've all been


1860
00:59:11,676 --> 00:59:13,176
asleep for the past two minutes,


1861
00:59:13,496 --> 00:59:15,426
I just dragged three completely


1862
00:59:15,426 --> 00:59:16,636
different types of assets


1863
00:59:16,676 --> 00:59:18,196
between three completely


1864
00:59:18,196 --> 00:59:19,466
different applications.


1865
00:59:19,466 --> 00:59:21,336
And that's why drag and drop


1866
00:59:21,336 --> 00:59:22,786
isn't just saving steps in my


1867
00:59:22,786 --> 00:59:23,336
process.


1868
00:59:23,736 --> 00:59:26,076
It's an entirely new mobile work


1869
00:59:26,076 --> 00:59:27,736
flow for creative professionals


1870
00:59:27,736 --> 00:59:28,146
on the iPad.


1871
00:59:28,366 --> 00:59:29,536
Thank you.


1872
00:59:31,516 --> 00:59:37,126
[ Applause ]


1873
00:59:37,626 --> 00:59:38,086
>> Thanks, Brooke.


1874
00:59:38,856 --> 00:59:40,076
Drag and drop is a really


1875
00:59:40,076 --> 00:59:41,816
exciting, new API, and we can't


1876
00:59:41,816 --> 00:59:42,656
wait to see what you're all


1877
00:59:42,656 --> 00:59:44,146
going to do with it, but there


1878
00:59:44,146 --> 00:59:45,096
are a number of other


1879
00:59:45,096 --> 00:59:46,886
enhancements in iOS 11 that you


1880
00:59:46,886 --> 00:59:47,846
should be aware of as well.


1881
00:59:47,846 --> 00:59:49,996
So let's start with some updates


1882
00:59:49,996 --> 00:59:51,096
to the user interface.


1883
00:59:52,236 --> 00:59:53,236
The top level of most


1884
00:59:53,236 --> 00:59:54,696
applications now features a


1885
00:59:54,696 --> 00:59:56,856
large title featured prominently


1886
00:59:56,856 --> 00:59:58,596
in the navigation bar, along


1887
00:59:58,596 --> 01:00:00,166
with a new integrated search


1888
01:00:00,166 --> 01:00:00,836
field design.


1889
01:00:01,756 --> 01:00:02,766
You'll find this at the top of


1890
01:00:02,766 --> 01:00:04,676
most applications, including


1891
01:00:04,676 --> 01:00:06,886
Messages, Mail, the new App


1892
01:00:07,016 --> 01:00:09,696
Store, Photos, and many more.


1893
01:00:09,696 --> 01:00:11,686
And enabling this appearance in


1894
01:00:11,686 --> 01:00:13,316
your own apps couldn't be any


1895
01:00:13,316 --> 01:00:13,756
simpler.


1896
01:00:14,596 --> 01:00:16,366
With just a few properties, you


1897
01:00:16,366 --> 01:00:18,186
can adopt and control the


1898
01:00:18,266 --> 01:00:19,706
appearance of the new large


1899
01:00:19,756 --> 01:00:21,446
title and adopt the new


1900
01:00:21,606 --> 01:00:22,716
integrated search field.


1901
01:00:24,036 --> 01:00:26,076
You'll also find that in iOS 11,


1902
01:00:26,076 --> 01:00:27,666
UITableView has now enabled


1903
01:00:27,836 --> 01:00:29,596
self-sizing cells by default,


1904
01:00:30,156 --> 01:00:31,706
helping to make it even easier


1905
01:00:31,866 --> 01:00:33,046
for you to have great support


1906
01:00:33,046 --> 01:00:33,856
for dynamic type.


1907
01:00:35,516 --> 01:00:38,846
[ Applause ]


1908
01:00:39,346 --> 01:00:40,916
This has also helped to make iOS


1909
01:00:40,916 --> 01:00:43,176
11's UI more responsive to text


1910
01:00:43,176 --> 01:00:44,936
size changes than ever before.


1911
01:00:45,706 --> 01:00:47,156
And with a wide range of dynamic


1912
01:00:47,206 --> 01:00:49,116
type sizes available, your users


1913
01:00:49,116 --> 01:00:50,416
are going to choose the size


1914
01:00:50,416 --> 01:00:51,566
that's most comfortable for


1915
01:00:51,566 --> 01:00:51,706
them.


1916
01:00:53,286 --> 01:00:54,736
Dynamic type is a really


1917
01:00:54,836 --> 01:00:56,216
commonly used user preference,


1918
01:00:56,366 --> 01:00:57,316
so you definitely want to make


1919
01:00:57,316 --> 01:00:58,736
sure that you test with it and


1920
01:00:58,736 --> 01:00:59,736
respond to it well.


1921
01:01:00,606 --> 01:01:02,216
And don't forget to design for


1922
01:01:02,216 --> 01:01:02,656
everyone.


1923
01:01:03,326 --> 01:01:04,296
Tests with a larger


1924
01:01:04,296 --> 01:01:05,966
accessibility size is enabled as


1925
01:01:05,966 --> 01:01:07,876
well because in these instances,


1926
01:01:07,876 --> 01:01:09,106
your table view rows will get


1927
01:01:09,106 --> 01:01:10,916
even taller, so you'll want to


1928
01:01:10,916 --> 01:01:12,386
make sure that your content lays


1929
01:01:12,386 --> 01:01:14,146
out well and remains legible,


1930
01:01:14,386 --> 01:01:15,686
even at those really large


1931
01:01:15,686 --> 01:01:16,246
sizes.


1932
01:01:16,766 --> 01:01:19,616
Next, let's talk about files.


1933
01:01:20,846 --> 01:01:21,906
File management has been


1934
01:01:21,906 --> 01:01:23,816
completely revamped in iOS 11.


1935
01:01:24,616 --> 01:01:25,776
Now, of course, you can access


1936
01:01:25,776 --> 01:01:27,316
files from the new Files app


1937
01:01:27,316 --> 01:01:27,976
that you heard about this


1938
01:01:27,976 --> 01:01:30,336
morning, but, even better, a new


1939
01:01:30,336 --> 01:01:32,136
document browser with all of the


1940
01:01:32,186 --> 01:01:34,016
same capabilities can be brought


1941
01:01:34,016 --> 01:01:35,566
up and displayed right within


1942
01:01:35,726 --> 01:01:36,636
your own apps.


1943
01:01:39,656 --> 01:01:40,946
You can filter the types of


1944
01:01:40,986 --> 01:01:42,056
files that will be displayed


1945
01:01:42,056 --> 01:01:44,526
within the browser.


1946
01:01:45,106 --> 01:01:46,736
Excuse me, add custom actions


1947
01:01:46,736 --> 01:01:48,116
right into the navigation bar,


1948
01:01:48,216 --> 01:01:50,046
and even allow the creation of


1949
01:01:50,046 --> 01:01:51,416
new documents right from within


1950
01:01:51,416 --> 01:01:52,816
the same interface.


1951
01:01:53,636 --> 01:01:54,756
And of course, you can also


1952
01:01:54,756 --> 01:01:57,676
customize its appearance so that


1953
01:01:57,676 --> 01:01:59,216
it best fits in with the rest of


1954
01:01:59,216 --> 01:01:59,976
your applications.


1955
01:02:01,456 --> 01:02:03,036
The document browser also offers


1956
01:02:03,036 --> 01:02:04,456
really quick access to iCloud


1957
01:02:04,546 --> 01:02:06,086
Drive's new document sharing


1958
01:02:06,086 --> 01:02:07,836
support, enabling easy


1959
01:02:07,836 --> 01:02:09,916
collaboration across iOS and


1960
01:02:09,916 --> 01:02:10,656
macOS.


1961
01:02:11,506 --> 01:02:13,206
Using NSFileCoordinator, you can


1962
01:02:13,206 --> 01:02:14,906
easily find out about changes to


1963
01:02:14,906 --> 01:02:16,516
these documents as they occur,


1964
01:02:16,956 --> 01:02:18,586
even if the changes are made by


1965
01:02:18,586 --> 01:02:19,236
another user.


1966
01:02:19,916 --> 01:02:21,646
And on macOS, NSDocument


1967
01:02:21,646 --> 01:02:22,896
includes built-in support for


1968
01:02:22,896 --> 01:02:24,146
file sharing right within your


1969
01:02:25,136 --> 01:02:25,236
apps.


1970
01:02:25,916 --> 01:02:27,696
Finally, let's talk about iOS


1971
01:02:27,696 --> 01:02:29,636
11's new multitasking features,


1972
01:02:30,376 --> 01:02:31,536
enabling your apps to


1973
01:02:31,536 --> 01:02:32,606
participate in the new


1974
01:02:32,606 --> 01:02:34,456
multitasking work flows enabled


1975
01:02:34,456 --> 01:02:35,696
by the new floating Dock,


1976
01:02:36,186 --> 01:02:37,976
slide-over apps, pinned apps,


1977
01:02:38,316 --> 01:02:39,576
and the brand-new App Switcher


1978
01:02:39,826 --> 01:02:40,946
is really straightforward.


1979
01:02:41,806 --> 01:02:43,416
If you've adopted size classes,


1980
01:02:43,556 --> 01:02:44,896
flexible layouts, and default


1981
01:02:44,896 --> 01:02:46,206
storyboards over the last few


1982
01:02:46,206 --> 01:02:47,566
years, then you're actually


1983
01:02:47,566 --> 01:02:48,286
already done.


1984
01:02:49,176 --> 01:02:50,966
iOS 11 builds on top of these


1985
01:02:50,966 --> 01:02:52,766
existing technologies to enable


1986
01:02:52,766 --> 01:02:54,526
a whole bunch of new work flows.


1987
01:02:55,496 --> 01:02:56,666
Now, if you haven't adopted them


1988
01:02:56,666 --> 01:02:58,286
yet, there's never been a better


1989
01:03:00,136 --> 01:03:00,236
time.


1990
01:03:00,636 --> 01:03:01,646
That's all just the start.


1991
01:03:02,196 --> 01:03:03,776
There's a ton of other new and


1992
01:03:03,776 --> 01:03:05,626
enhanced APIs available in iOS


1993
01:03:05,626 --> 01:03:05,986
11.


1994
01:03:06,696 --> 01:03:08,506
For example, password autofill


1995
01:03:08,776 --> 01:03:10,676
makes it really quick and secure


1996
01:03:10,676 --> 01:03:12,226
to get login credentials out of


1997
01:03:12,226 --> 01:03:14,046
iCloud Keychain and right into


1998
01:03:14,046 --> 01:03:15,886
your apps, which can really


1999
01:03:15,886 --> 01:03:17,196
streamline the login flow for


2000
01:03:17,196 --> 01:03:18,056
your applications.


2001
01:03:19,076 --> 01:03:20,676
It's really great [applause].


2002
01:03:22,616 --> 01:03:23,966
Named color assets and vector


2003
01:03:23,966 --> 01:03:25,226
assets can now be stored in your


2004
01:03:25,226 --> 01:03:26,886
asset catalogs, and


2005
01:03:26,886 --> 01:03:29,516
UIFontMetrics make it really


2006
01:03:29,516 --> 01:03:30,866
easy even to have your own


2007
01:03:30,866 --> 01:03:32,496
custom fonts participate in


2008
01:03:32,496 --> 01:03:33,126
dynamic type.


2009
01:03:34,516 --> 01:03:37,676
[ Applause ]


2010
01:03:38,176 --> 01:03:39,336
In addition to all of this,


2011
01:03:39,336 --> 01:03:40,736
there's also some really great


2012
01:03:40,736 --> 01:03:42,696
enhancements to APIs for various


2013
01:03:42,696 --> 01:03:44,516
Apple services, so let's talk


2014
01:03:44,516 --> 01:03:46,246
about just a few, starting with


2015
01:03:46,386 --> 01:03:46,916
iMessage.


2016
01:03:47,426 --> 01:03:50,476
With the new app strip in iOS


2017
01:03:50,476 --> 01:03:52,486
11, Messages apps are now more


2018
01:03:52,486 --> 01:03:53,926
discoverable and they're a lot


2019
01:03:53,926 --> 01:03:55,076
more powerful as well.


2020
01:03:55,666 --> 01:03:57,196
Your apps can now render live


2021
01:03:57,296 --> 01:03:58,786
content in the message bubbles


2022
01:03:58,876 --> 01:03:59,956
right in line in the


2023
01:04:00,026 --> 01:04:00,656
conversation.


2024
01:04:01,956 --> 01:04:03,146
And with the new direct send


2025
01:04:03,146 --> 01:04:05,106
API, you can remove a common


2026
01:04:05,146 --> 01:04:05,996
point of friction for your


2027
01:04:05,996 --> 01:04:07,886
users, making it possible to


2028
01:04:07,886 --> 01:04:09,506
really easily send messages with


2029
01:04:09,506 --> 01:04:11,326
just a single tap from right


2030
01:04:11,326 --> 01:04:12,756
within your app extensions.


2031
01:04:14,076 --> 01:04:15,736
Next, SiriKit.


2032
01:04:16,776 --> 01:04:17,996
The list of supported domains


2033
01:04:17,996 --> 01:04:20,346
has expanded to include a number


2034
01:04:20,346 --> 01:04:21,476
of new domains, including


2035
01:04:21,516 --> 01:04:24,236
payment accounts, lists, notes,


2036
01:04:24,866 --> 01:04:26,566
QR code display, and more.


2037
01:04:27,096 --> 01:04:29,006
And if you missed it, earlier


2038
01:04:29,006 --> 01:04:30,596
this year, we greatly simplified


2039
01:04:30,596 --> 01:04:32,146
SiriKit development with the


2040
01:04:32,146 --> 01:04:33,556
addition of simulator support


2041
01:04:33,716 --> 01:04:35,836
for both iOS and watchOS.


2042
01:04:37,076 --> 01:04:38,416
And finally, Apple Music.


2043
01:04:39,196 --> 01:04:40,706
With MusicKit, adding music


2044
01:04:40,766 --> 01:04:42,036
playback to your apps has never


2045
01:04:42,036 --> 01:04:42,576
been easier.


2046
01:04:43,136 --> 01:04:44,706
Your users can now play any of


2047
01:04:44,706 --> 01:04:46,456
the 40 million songs available


2048
01:04:46,456 --> 01:04:48,276
to Apple Music subscribers right


2049
01:04:48,276 --> 01:04:49,216
from within your apps.


2050
01:04:50,066 --> 01:04:51,186
This is especially great for


2051
01:04:51,186 --> 01:04:53,336
fitness apps, now enabling full


2052
01:04:53,336 --> 01:04:55,696
access to songs, playlists, and


2053
01:04:55,696 --> 01:04:57,426
radio stations without ever


2054
01:04:57,426 --> 01:04:58,396
interrupting your workout.


2055
01:04:59,536 --> 01:05:00,806
Now, these are just some of the


2056
01:05:00,806 --> 01:05:02,316
enhancements to the APIs for


2057
01:05:02,316 --> 01:05:03,566
Apple's various services.


2058
01:05:04,466 --> 01:05:05,816
Next, to tell us about some of


2059
01:05:05,816 --> 01:05:07,366
our exciting new photo and


2060
01:05:07,366 --> 01:05:08,716
imaging APIs, Sebastien


2061
01:05:08,716 --> 01:05:09,816
Marineau-Mes will come up to the


2062
01:05:09,816 --> 01:05:10,356
stage.


2063
01:05:10,796 --> 01:05:11,056
Seb?


2064
01:05:12,516 --> 01:05:15,006
[ Applause ]


2065
01:05:15,506 --> 01:05:16,156
>> Thank you, Josh.


2066
01:05:17,216 --> 01:05:17,656
Thank you.


2067
01:05:17,786 --> 01:05:18,756
Really excited to be here.


2068
01:05:18,756 --> 01:05:20,076
I've got a lot to cover today,


2069
01:05:20,076 --> 01:05:21,556
so let me get started.


2070
01:05:21,976 --> 01:05:23,286
First, let's talk about our new


2071
01:05:23,286 --> 01:05:25,096
photos project extension on


2072
01:05:25,096 --> 01:05:25,946
macOS.


2073
01:05:26,236 --> 01:05:27,386
You're now able to bring


2074
01:05:27,626 --> 01:05:29,326
creative, project-based features


2075
01:05:29,596 --> 01:05:30,576
directly to photos.


2076
01:05:31,236 --> 01:05:32,696
Users can easily discover your


2077
01:05:32,696 --> 01:05:33,936
new extension through a Mac App


2078
01:05:34,056 --> 01:05:34,396
Store.


2079
01:05:34,396 --> 01:05:35,966
And once you've got that wired


2080
01:05:35,966 --> 01:05:38,196
up, users can select photos,


2081
01:05:38,196 --> 01:05:40,066
memories, or albums and then


2082
01:05:40,066 --> 01:05:41,316
choose your extension from the


2083
01:05:41,316 --> 01:05:42,056
Create menu.


2084
01:05:42,596 --> 01:05:43,876
The Photos app [inaudible]


2085
01:05:44,026 --> 01:05:45,526
extension to not only images,


2086
01:05:45,726 --> 01:05:47,486
but also the rich context so


2087
01:05:47,486 --> 01:05:48,996
that project creation feels


2088
01:05:48,996 --> 01:05:49,816
completely natural.


2089
01:05:50,386 --> 01:05:51,846
Additionally, we allow you to


2090
01:05:51,846 --> 01:05:53,506
persist your own project data.


2091
01:05:54,266 --> 01:05:56,356
Now, your extension runs within


2092
01:05:56,656 --> 01:05:57,906
the Photos application, so it


2093
01:05:57,906 --> 01:05:59,096
really feels like a seamless


2094
01:05:59,096 --> 01:05:59,666
experience.


2095
01:06:00,556 --> 01:06:01,696
We, of course, designed it to


2096
01:06:01,756 --> 01:06:02,786
support print products.


2097
01:06:02,786 --> 01:06:03,986
Here's a great example of this.


2098
01:06:04,456 --> 01:06:06,006
But you could do a lot more with


2099
01:06:06,006 --> 01:06:06,196
this.


2100
01:06:07,256 --> 01:06:08,676
Here's an example of someone


2101
01:06:08,676 --> 01:06:09,966
that's built a web publishing


2102
01:06:09,966 --> 01:06:11,956
application or even directly


2103
01:06:11,956 --> 01:06:14,026
ordering framed prints from your


2104
01:06:14,096 --> 01:06:14,766
favorite photo.


2105
01:06:15,506 --> 01:06:16,746
So we think our users are really


2106
01:06:16,746 --> 01:06:18,056
going to love the new extensions


2107
01:06:18,056 --> 01:06:19,126
that you're going to create with


2108
01:06:19,126 --> 01:06:20,356
this extending photos.


2109
01:06:21,336 --> 01:06:23,256
Next, let's talk about Camera.


2110
01:06:24,196 --> 01:06:26,556
In iOS 11, the camera has a


2111
01:06:26,556 --> 01:06:28,986
lightweight QR detector, and all


2112
01:06:28,986 --> 01:06:29,926
you need to do is point your


2113
01:06:29,926 --> 01:06:30,636
camera at one.


2114
01:06:31,036 --> 01:06:32,576
The QR code is automatically


2115
01:06:32,576 --> 01:06:34,446
decoded and will offer to open a


2116
01:06:34,446 --> 01:06:35,996
deep link into the appropriate


2117
01:06:35,996 --> 01:06:36,576
app.


2118
01:06:36,686 --> 01:06:37,186
There you go.


2119
01:06:38,516 --> 01:06:42,356
[ Applause ]


2120
01:06:42,856 --> 01:06:43,966
Now, it's really simple to use


2121
01:06:43,966 --> 01:06:44,656
as a developer.


2122
01:06:44,656 --> 01:06:45,676
You simply need to adopt


2123
01:06:45,676 --> 01:06:47,136
Universal Links, and we even


2124
01:06:47,136 --> 01:06:49,246
support common QR formats, such


2125
01:06:49,246 --> 01:06:51,666
as location, contacts, and Wi-Fi


2126
01:06:51,666 --> 01:06:52,076
networks.


2127
01:06:52,936 --> 01:06:54,596
Next, let's talk about


2128
01:06:54,596 --> 01:06:55,596
compression and formats.


2129
01:06:56,246 --> 01:06:57,306
We've, we're making really big


2130
01:06:57,306 --> 01:06:59,006
advances here this year.


2131
01:07:00,196 --> 01:07:01,356
Now, of course, JPEG is


2132
01:07:01,356 --> 01:07:02,706
ubiquitous and has served us


2133
01:07:02,706 --> 01:07:04,466
really well over the last 25


2134
01:07:04,466 --> 01:07:05,956
years, but today we know that a


2135
01:07:05,956 --> 01:07:07,966
number of technologies offer


2136
01:07:07,966 --> 01:07:09,066
better compression and


2137
01:07:09,066 --> 01:07:09,786
flexibility.


2138
01:07:10,516 --> 01:07:12,786
And similarly for H.264, which


2139
01:07:12,786 --> 01:07:13,816
is over a decade old.


2140
01:07:14,486 --> 01:07:15,786
Now, compression's important,


2141
01:07:15,846 --> 01:07:17,456
but we must consider other


2142
01:07:17,456 --> 01:07:18,896
requirements, so let's look at


2143
01:07:18,896 --> 01:07:19,396
some of these.


2144
01:07:20,106 --> 01:07:21,806
So for example, today the line


2145
01:07:21,806 --> 01:07:23,706
between photos and videos is


2146
01:07:23,766 --> 01:07:24,696
blurred, and a lot of what we


2147
01:07:24,696 --> 01:07:26,186
capture is actually a


2148
01:07:26,186 --> 01:07:27,266
combination of both of these


2149
01:07:27,316 --> 01:07:28,086
types of assets.


2150
01:07:29,016 --> 01:07:30,846
We also have new sensors that


2151
01:07:30,846 --> 01:07:32,936
capture much richer images and


2152
01:07:32,936 --> 01:07:34,306
display them, displays that


2153
01:07:34,306 --> 01:07:35,016
bring them to life.


2154
01:07:35,566 --> 01:07:37,176
And finally, whatever we choose


2155
01:07:37,206 --> 01:07:38,226
has to keep pace with


2156
01:07:38,226 --> 01:07:40,106
ever-increasing resolutions.


2157
01:07:40,846 --> 01:07:41,916
And so for the codec, we've


2158
01:07:41,916 --> 01:07:44,216
selected HEVC because it meets


2159
01:07:44,456 --> 01:07:45,506
all of these requirements.


2160
01:07:45,926 --> 01:07:47,736
It offers up the 2x compression


2161
01:07:47,806 --> 01:07:49,396
at equivalent image quality, and


2162
01:07:49,396 --> 01:07:50,646
when you add up the billions of


2163
01:07:50,716 --> 01:07:52,096
photos and videos, or trillions


2164
01:07:52,096 --> 01:07:54,086
I should say, that adds up to a


2165
01:07:54,086 --> 01:07:56,046
lot of saved space.


2166
01:07:56,046 --> 01:07:57,396
HEVC is also hardware


2167
01:07:57,396 --> 01:07:59,026
accelerated across many of our


2168
01:07:59,026 --> 01:07:59,806
devices.


2169
01:07:59,806 --> 01:08:01,506
And finally, it supports photos,


2170
01:08:01,786 --> 01:08:04,326
videos, 4K and beyond, and a


2171
01:08:04,326 --> 01:08:05,846
number of new technologies for


2172
01:08:05,936 --> 01:08:07,136
capture and display.


2173
01:08:08,146 --> 01:08:10,576
We've also selected a new image


2174
01:08:10,576 --> 01:08:13,206
container called HEIF, or, as I


2175
01:08:13,206 --> 01:08:14,546
like to call it, "heef."


2176
01:08:14,546 --> 01:08:16,845
You can repeat after me, "heef."


2177
01:08:18,276 --> 01:08:19,845
HEIF supports the concept of


2178
01:08:19,845 --> 01:08:21,446
compound assets, so in a single


2179
01:08:21,526 --> 01:08:22,765
file, you can have one or more


2180
01:08:22,765 --> 01:08:24,055
photos or one or more images.


2181
01:08:24,055 --> 01:08:25,076
You can have videos.


2182
01:08:25,076 --> 01:08:27,586
You can have auxiliary data such


2183
01:08:27,586 --> 01:08:28,765
as alpha and Depth.


2184
01:08:28,765 --> 01:08:30,446
It's also highly extensible.


2185
01:08:30,666 --> 01:08:32,366
It supports rich metadata,


2186
01:08:32,366 --> 01:08:34,486
animations and sequences, and


2187
01:08:34,486 --> 01:08:35,906
other media types, such as


2188
01:08:35,906 --> 01:08:36,366
audio.


2189
01:08:36,366 --> 01:08:38,486
And finally, HEIF is an ISO


2190
01:08:38,586 --> 01:08:40,305
standard, which is critical for


2191
01:08:40,305 --> 01:08:41,326
ecosystem adoption.


2192
01:08:42,416 --> 01:08:44,506
Now, our standard APIs provide


2193
01:08:44,506 --> 01:08:46,916
direct support for HEVC and


2194
01:08:46,986 --> 01:08:47,446
HEIF.


2195
01:08:47,836 --> 01:08:49,446
And generally, it's transparent.


2196
01:08:49,526 --> 01:08:50,716
No opt in is required.


2197
01:08:51,236 --> 01:08:52,586
But there may be cases where you


2198
01:08:52,586 --> 01:08:54,316
want to explicitly control the


2199
01:08:54,316 --> 01:08:54,866
format.


2200
01:08:55,026 --> 01:08:56,706
So for example, if you're trying


2201
01:08:56,706 --> 01:08:58,426
to play a high-resolution movie


2202
01:08:58,685 --> 01:09:00,046
on an older device that doesn't


2203
01:09:00,046 --> 01:09:02,296
have hardware acceleration, in


2204
01:09:02,296 --> 01:09:03,886
this case, we'd provide you an


2205
01:09:03,886 --> 01:09:05,106
API that you can use to


2206
01:09:05,106 --> 01:09:06,866
determine whether a given file


2207
01:09:06,866 --> 01:09:08,426
-- in this case, an HEVC movie


2208
01:09:08,606 --> 01:09:09,386
-- would play well on this


2209
01:09:09,386 --> 01:09:09,845
device.


2210
01:09:09,845 --> 01:09:11,725
And if it doesn't, we can


2211
01:09:11,725 --> 01:09:13,316
automatically fall back to one


2212
01:09:13,316 --> 01:09:15,086
of the older formats to maintain


2213
01:09:15,086 --> 01:09:16,305
a great user experience.


2214
01:09:17,666 --> 01:09:19,546
So now, within our ecosystem, we


2215
01:09:19,546 --> 01:09:21,506
automatically use HEVC and HEIF


2216
01:09:21,756 --> 01:09:22,826
as we share between all


2217
01:09:22,826 --> 01:09:23,886
compatible devices.


2218
01:09:24,496 --> 01:09:26,265
But where, when we're unsure


2219
01:09:26,265 --> 01:09:28,185
that the recipient can decode


2220
01:09:28,185 --> 01:09:30,326
these new formats, we'll err on


2221
01:09:30,326 --> 01:09:31,935
the side of compatibility and


2222
01:09:31,935 --> 01:09:33,526
automatically transcode the JPEG


2223
01:09:33,555 --> 01:09:35,206
and H.264.


2224
01:09:35,206 --> 01:09:36,386
An example of this would be


2225
01:09:36,736 --> 01:09:38,496
putting photos in an email


2226
01:09:38,496 --> 01:09:39,055
attachment.


2227
01:09:39,616 --> 01:09:40,685
I'd really encourage you as you


2228
01:09:40,685 --> 01:09:41,946
adopt these new formats to be


2229
01:09:42,015 --> 01:09:43,895
thoughtful about compatibility


2230
01:09:43,895 --> 01:09:44,736
as you build this into your


2231
01:09:44,736 --> 01:09:44,956
apps.


2232
01:09:45,935 --> 01:09:47,276
So that concludes compression,


2233
01:09:47,276 --> 01:09:49,026
and let me now talk about


2234
01:09:49,026 --> 01:09:51,246
another new topic, Depth.


2235
01:09:52,196 --> 01:09:53,456
Now, we've all see Portrait Mode


2236
01:09:53,456 --> 01:09:54,956
on the iPhone 7 Plus, which


2237
01:09:55,006 --> 01:09:56,626
generates the Depth effect using


2238
01:09:56,936 --> 01:09:57,606
the two cameras.


2239
01:09:58,286 --> 01:09:59,846
Here's how we do it.


2240
01:10:00,456 --> 01:10:02,536
We capture simultaneous images


2241
01:10:02,956 --> 01:10:04,746
from both cameras and we then


2242
01:10:04,746 --> 01:10:06,796
use stereoscopy to compute


2243
01:10:06,796 --> 01:10:07,096
Depth.


2244
01:10:07,096 --> 01:10:08,226
This is the same as human


2245
01:10:08,226 --> 01:10:08,626
vision.


2246
01:10:09,226 --> 01:10:10,526
We store this in what we call


2247
01:10:10,526 --> 01:10:12,876
the depth map.


2248
01:10:13,156 --> 01:10:14,436
So in Portrait Mode, we take the


2249
01:10:14,436 --> 01:10:15,966
photo, the depth map, and then


2250
01:10:15,966 --> 01:10:17,806
we use this to blur the objects


2251
01:10:17,806 --> 01:10:18,696
that are in the background.


2252
01:10:19,526 --> 01:10:21,026
But what's really cool is that


2253
01:10:21,026 --> 01:10:22,966
in iOS 11, we're now storing the


2254
01:10:22,966 --> 01:10:24,526
depth map as part of what we


2255
01:10:24,526 --> 01:10:26,656
capture, and we're giving you


2256
01:10:26,656 --> 01:10:29,586
and your app access to the photo


2257
01:10:29,586 --> 01:10:30,386
and the depth map.


2258
01:10:30,386 --> 01:10:32,406
So you can load it up and then


2259
01:10:32,406 --> 01:10:34,466
you can use this to do your own


2260
01:10:34,726 --> 01:10:35,486
creative effects.


2261
01:10:35,486 --> 01:10:36,826
And let me show you a couple of


2262
01:10:36,826 --> 01:10:37,666
examples of this.


2263
01:10:37,976 --> 01:10:40,696
So I might take this photo and I


2264
01:10:40,696 --> 01:10:42,286
might decide to turn the


2265
01:10:42,286 --> 01:10:44,356
background into monochrome,


2266
01:10:44,896 --> 01:10:46,306
really highlighting the subject.


2267
01:10:46,306 --> 01:10:47,466
I might apply a more artistic


2268
01:10:47,466 --> 01:10:48,196
effect.


2269
01:10:48,456 --> 01:10:49,696
Maybe I'll replace this with


2270
01:10:49,696 --> 01:10:51,096
this pumpkin patch with blur


2271
01:10:51,096 --> 01:10:51,436
effect.


2272
01:10:53,376 --> 01:10:54,846
And you can imagine even more


2273
01:10:54,846 --> 01:10:55,486
creative effects.


2274
01:10:55,486 --> 01:10:56,246
In fact, these are just


2275
01:10:56,246 --> 01:10:56,876
examples.


2276
01:10:57,226 --> 01:10:58,796
The possibilities here are


2277
01:10:58,796 --> 01:10:59,206
endless.


2278
01:11:00,196 --> 01:11:02,506
Now, this is Depth for still


2279
01:11:02,506 --> 01:11:02,896
images.


2280
01:11:03,296 --> 01:11:05,246
We're also giving you access to


2281
01:11:05,246 --> 01:11:06,986
a lower-fidelity, real-time


2282
01:11:06,986 --> 01:11:08,756
Depth stream using the Camera


2283
01:11:08,756 --> 01:11:08,946
APIs.


2284
01:11:08,946 --> 01:11:10,926
And this lets you build


2285
01:11:10,926 --> 01:11:12,376
Camera-based applications that


2286
01:11:12,376 --> 01:11:14,206
will use Depth in a novel way.


2287
01:11:15,546 --> 01:11:17,016
So Depth is really a simple


2288
01:11:17,016 --> 01:11:18,346
extension to both our still


2289
01:11:18,346 --> 01:11:20,496
image and Camera capture APIs,


2290
01:11:20,496 --> 01:11:21,916
and we look forward to


2291
01:11:21,916 --> 01:11:23,236
everything that you're going to


2292
01:11:23,236 --> 01:11:24,316
be building on top of these new


2293
01:11:24,316 --> 01:11:24,516
APIs.


2294
01:11:24,516 --> 01:11:25,526
Really, really exciting.


2295
01:11:26,256 --> 01:11:27,126
Next -- yeah.


2296
01:11:27,586 --> 01:11:29,836
There you go.


2297
01:11:30,516 --> 01:11:34,236
[ Applause ]


2298
01:11:34,736 --> 01:11:36,006
Next, let's talk about our new


2299
01:11:36,006 --> 01:11:36,896
Vision APIs.


2300
01:11:36,896 --> 01:11:38,546
Now, of course, computer vision


2301
01:11:38,546 --> 01:11:39,716
and machine learning already


2302
01:11:39,716 --> 01:11:41,716
underpin many of the features in


2303
01:11:41,716 --> 01:11:42,476
Apple's products.


2304
01:11:42,476 --> 01:11:43,356
You saw that this morning.


2305
01:11:43,866 --> 01:11:45,226
You've also seen apps in the


2306
01:11:45,336 --> 01:11:47,176
Store that use computer vision.


2307
01:11:47,696 --> 01:11:48,896
One of them is the hot dog


2308
01:11:48,896 --> 01:11:50,316
detection app that was featured


2309
01:11:50,316 --> 01:11:51,876
in HBO's Silicon Valley.


2310
01:11:51,876 --> 01:11:54,416
But of course, these apps have


2311
01:11:54,416 --> 01:11:56,336
all had to roll computer vision,


2312
01:11:56,336 --> 01:11:57,396
the computer vision technology


2313
01:11:57,396 --> 01:11:57,876
on their own.


2314
01:11:58,306 --> 01:11:59,626
And what we're doing this year


2315
01:11:59,626 --> 01:12:00,856
is bring all of our great


2316
01:12:00,856 --> 01:12:02,756
built-in capabilities and making


2317
01:12:02,756 --> 01:12:04,376
them available to all of you.


2318
01:12:05,166 --> 01:12:06,836
So things you can do -- face and


2319
01:12:06,836 --> 01:12:07,886
landmark detection.


2320
01:12:08,816 --> 01:12:09,746
We've seen the rectangle


2321
01:12:09,746 --> 01:12:10,466
detection.


2322
01:12:11,096 --> 01:12:15,206
Text. Here's another one with


2323
01:12:15,206 --> 01:12:16,346
barcode detection.


2324
01:12:16,926 --> 01:12:18,206
And object tracking.


2325
01:12:18,206 --> 01:12:19,636
And many, many more things.


2326
01:12:20,446 --> 01:12:22,306
And one of those is actually the


2327
01:12:22,306 --> 01:12:24,256
integration between Vision and


2328
01:12:24,256 --> 01:12:24,856
Core ML.


2329
01:12:24,976 --> 01:12:26,036
And that allows you to bring


2330
01:12:26,036 --> 01:12:27,386
your own machine learning and


2331
01:12:27,386 --> 01:12:29,326
computer vision models and run


2332
01:12:29,326 --> 01:12:30,426
them as part of Vision's


2333
01:12:30,426 --> 01:12:31,856
imaging, image processing


2334
01:12:31,856 --> 01:12:33,736
pipeline so that we can extend


2335
01:12:33,736 --> 01:12:35,286
our vision framework in very


2336
01:12:35,286 --> 01:12:35,936
novel ways.


2337
01:12:36,576 --> 01:12:37,756
And to show you an example of


2338
01:12:37,756 --> 01:12:38,996
this, I'm going to invite Emily


2339
01:12:38,996 --> 01:12:41,166
Kim up on stage that will show


2340
01:12:41,166 --> 01:12:43,636
you, show us a great demo app.


2341
01:12:43,786 --> 01:12:44,136
Emily?


2342
01:12:45,516 --> 01:12:50,646
[ Applause ]


2343
01:12:51,146 --> 01:12:52,846
>> Hi. I'd like to show all of


2344
01:12:52,846 --> 01:12:53,966
you a demo app that we've


2345
01:12:53,966 --> 01:12:55,296
written to showcase three of the


2346
01:12:55,296 --> 01:12:57,166
new technologies in iOS 11 --


2347
01:12:57,646 --> 01:13:00,196
Core ML, Vision, and Depth.


2348
01:13:00,406 --> 01:13:01,526
Now, I've asked Seb to help me


2349
01:13:01,526 --> 01:13:02,726
out a little bit in this demo,


2350
01:13:02,966 --> 01:13:04,306
so it looks like he's just about


2351
01:13:04,306 --> 01:13:04,616
ready.


2352
01:13:07,286 --> 01:13:07,746
All right.


2353
01:13:08,066 --> 01:13:09,326
So first, we're going to launch


2354
01:13:09,356 --> 01:13:10,066
the application.


2355
01:13:10,636 --> 01:13:13,886
You can see here that the app


2356
01:13:13,886 --> 01:13:15,316
has recognized that Seb is


2357
01:13:15,316 --> 01:13:17,716
holding a piano keyboard, and


2358
01:13:17,716 --> 01:13:18,786
we've placed a speech bubble


2359
01:13:18,786 --> 01:13:20,436
next to his mouth with a little


2360
01:13:20,436 --> 01:13:22,766
piano emoji inside.


2361
01:13:22,766 --> 01:13:25,456
Now, let's take a quick photo.


2362
01:13:25,456 --> 01:13:26,806
And, well, I guess that's a


2363
01:13:26,806 --> 01:13:28,026
picture of Seb holding a


2364
01:13:28,026 --> 01:13:28,586
keyboard.


2365
01:13:29,166 --> 01:13:31,086
I hate to break it to you, Seb,


2366
01:13:31,186 --> 01:13:32,816
but you look a little boring.


2367
01:13:33,116 --> 01:13:35,006
Can we maybe try something else?


2368
01:13:35,146 --> 01:13:35,966
>> All right.


2369
01:13:37,076 --> 01:13:38,556
>> I mean that in the kindest


2370
01:13:38,556 --> 01:13:39,336
way possible.


2371
01:13:41,826 --> 01:13:42,736
All right.


2372
01:13:42,736 --> 01:13:44,276
Let's see if our app can


2373
01:13:44,276 --> 01:13:46,376
recognize something that's not


2374
01:13:47,106 --> 01:13:47,476
piano.


2375
01:13:47,476 --> 01:13:49,396
So we'll go back.


2376
01:13:50,316 --> 01:13:50,736
All right.


2377
01:13:50,736 --> 01:13:51,746
We can see now that Seb's


2378
01:13:51,746 --> 01:13:52,556
holding a guitar.


2379
01:13:52,656 --> 01:13:54,376
The app knows this and has


2380
01:13:54,376 --> 01:13:55,816
placed a little guitar emoji in


2381
01:13:55,816 --> 01:13:56,766
the speech bubble next to his


2382
01:13:56,766 --> 01:13:57,006
mouth.


2383
01:13:57,006 --> 01:13:58,426
So we'll take another photo.


2384
01:14:00,396 --> 01:14:01,916
Whoa, Seb, you look way cooler


2385
01:14:01,916 --> 01:14:02,696
than you did before.


2386
01:14:03,416 --> 01:14:03,866
You've got some--


2387
01:14:04,016 --> 01:14:05,016
[ Laughter ]


2388
01:14:05,516 --> 01:14:11,006
[ Applause ]


2389
01:14:11,506 --> 01:14:12,596
Yeah, if you'll notice, he's got


2390
01:14:12,636 --> 01:14:14,486
some cool rock star sunglasses


2391
01:14:14,546 --> 01:14:16,296
and some cheering fans behind


2392
01:14:16,296 --> 01:14:19,366
him, so before we jump over to


2393
01:14:19,366 --> 01:14:20,676
Xcode to take a look at just how


2394
01:14:20,676 --> 01:14:21,716
easy it was to write an


2395
01:14:21,716 --> 01:14:23,026
application that can make even


2396
01:14:23,076 --> 01:14:24,646
Seb look cool, let's please give


2397
01:14:24,646 --> 01:14:25,706
a round of applause for Seb for


2398
01:14:25,706 --> 01:14:26,336
being a good sport.


2399
01:14:27,516 --> 01:14:32,806
[ Applause ]


2400
01:14:33,306 --> 01:14:34,096
All right.


2401
01:14:34,356 --> 01:14:35,436
So this was a pretty standard


2402
01:14:35,436 --> 01:14:36,746
UIKit and AVFoundation


2403
01:14:36,746 --> 01:14:37,906
application, so I'm not going to


2404
01:14:37,906 --> 01:14:39,016
go over the details of that.


2405
01:14:39,596 --> 01:14:41,136
Instead, I'd like to focus on


2406
01:14:41,136 --> 01:14:42,306
the three new areas that you


2407
01:14:42,306 --> 01:14:44,966
saw: object classification, face


2408
01:14:44,966 --> 01:14:46,946
landmark detection, and Depth.


2409
01:14:47,076 --> 01:14:48,166
So first, let's take a look at


2410
01:14:48,166 --> 01:14:49,276
object classification.


2411
01:14:50,086 --> 01:14:51,536
Using the power of Core ML, you


2412
01:14:51,536 --> 01:14:52,856
can now integrate trained


2413
01:14:52,856 --> 01:14:54,026
machine learning models into


2414
01:14:54,026 --> 01:14:54,796
your app.


2415
01:14:54,796 --> 01:14:55,866
Now, many of you will probably


2416
01:14:55,866 --> 01:14:56,846
be rolling your own.


2417
01:14:57,096 --> 01:14:58,216
However, we wanted to show you


2418
01:14:58,216 --> 01:14:59,966
just how easy this was, so we


2419
01:14:59,966 --> 01:15:01,066
simply took an off-the-shelf


2420
01:15:01,066 --> 01:15:02,206
model and dropped it into our


2421
01:15:02,256 --> 01:15:02,626
project.


2422
01:15:02,876 --> 01:15:03,626
Super easy.


2423
01:15:04,836 --> 01:15:06,106
You can see here that all we had


2424
01:15:06,106 --> 01:15:07,386
to do was load this model file


2425
01:15:07,386 --> 01:15:09,756
in Core ML and then pass that


2426
01:15:09,756 --> 01:15:11,076
along to Vision so that we could


2427
01:15:11,076 --> 01:15:12,226
run this against images.


2428
01:15:13,506 --> 01:15:14,996
Now, as the frames come in from


2429
01:15:14,996 --> 01:15:16,606
the Camera preview, we simply


2430
01:15:16,606 --> 01:15:18,496
create a Core ML request to run


2431
01:15:18,496 --> 01:15:19,466
on each of these frames.


2432
01:15:19,946 --> 01:15:21,536
Once we recognize an object --


2433
01:15:21,606 --> 01:15:23,336
for example, the guitar -- the


2434
01:15:23,336 --> 01:15:24,426
results come back from this


2435
01:15:24,426 --> 01:15:25,666
request indicating that it's


2436
01:15:25,666 --> 01:15:27,246
found a guitar in the scene, and


2437
01:15:27,246 --> 01:15:28,236
then we can place that little


2438
01:15:28,236 --> 01:15:29,656
guitar emoji inside the speech


2439
01:15:29,656 --> 01:15:29,966
bubble.


2440
01:15:30,706 --> 01:15:32,006
Now, if you also recall from the


2441
01:15:32,006 --> 01:15:33,466
demo, the speech bubble was


2442
01:15:33,466 --> 01:15:34,756
placed right next to Seb's


2443
01:15:34,796 --> 01:15:35,086
mouth.


2444
01:15:35,426 --> 01:15:36,676
So how did, how exactly did we


2445
01:15:36,676 --> 01:15:37,966
know where to put that?


2446
01:15:38,256 --> 01:15:39,236
Let's take a look at the face


2447
01:15:39,266 --> 01:15:40,136
landmark detector.


2448
01:15:41,246 --> 01:15:42,876
Using Vision, you can now find


2449
01:15:42,876 --> 01:15:44,066
the face landmarks, which


2450
01:15:44,066 --> 01:15:45,566
include for each of your eyes,


2451
01:15:46,016 --> 01:15:47,316
your nose, and what we're


2452
01:15:47,316 --> 01:15:48,506
interested in, which was the


2453
01:15:48,506 --> 01:15:48,836
mouth.


2454
01:15:49,246 --> 01:15:52,486
So again, we simply create a


2455
01:15:52,556 --> 01:15:54,466
face landmarks request and run


2456
01:15:54,466 --> 01:15:55,426
that on the frames that are


2457
01:15:55,426 --> 01:15:56,546
coming in from the camera.


2458
01:15:57,306 --> 01:15:58,646
When the request comes back and


2459
01:15:58,646 --> 01:15:59,716
says that it's found landmarks


2460
01:15:59,716 --> 01:16:02,156
on a face, we simply ask for


2461
01:16:02,156 --> 01:16:03,896
where the mouth was and then we


2462
01:16:03,896 --> 01:16:04,976
can anchor the speech bubble


2463
01:16:04,976 --> 01:16:06,056
appropriately so that it looks


2464
01:16:06,056 --> 01:16:06,966
like it's coming out of Seb's


2465
01:16:07,006 --> 01:16:07,276
mouth.


2466
01:16:08,086 --> 01:16:09,426
We also used face landmarks to


2467
01:16:09,426 --> 01:16:10,916
find each of Seb's eyeballs to


2468
01:16:10,956 --> 01:16:11,676
figure out where to put the


2469
01:16:11,676 --> 01:16:13,166
sunglasses on his face in that


2470
01:16:13,166 --> 01:16:14,126
cool guitar photo.


2471
01:16:15,066 --> 01:16:16,896
Now, also in that photo, if you


2472
01:16:16,896 --> 01:16:17,906
remember, we replaced the


2473
01:16:17,906 --> 01:16:18,916
background and put it in front


2474
01:16:18,916 --> 01:16:20,176
of his adoring fans.


2475
01:16:20,426 --> 01:16:21,806
So we used Depth to do that, and


2476
01:16:21,806 --> 01:16:22,776
let's take a closer look.


2477
01:16:26,156 --> 01:16:28,186
So it's really easy to get Depth


2478
01:16:28,266 --> 01:16:29,666
data now when you capture images


2479
01:16:29,666 --> 01:16:31,316
on the camera, so all you have


2480
01:16:31,316 --> 01:16:32,366
to do once you've captured the


2481
01:16:32,366 --> 01:16:34,786
image is extract that Depth


2482
01:16:34,786 --> 01:16:36,366
information, and then we wrote a


2483
01:16:36,366 --> 01:16:37,736
custom kernel to simply apply


2484
01:16:37,736 --> 01:16:39,116
that Depth information to the


2485
01:16:39,116 --> 01:16:41,486
captured image in order to


2486
01:16:41,486 --> 01:16:43,276
teleport Seb into his rock star


2487
01:16:43,276 --> 01:16:43,946
universe.


2488
01:16:44,486 --> 01:16:46,026
So I hope you've seen just how


2489
01:16:46,026 --> 01:16:47,716
easy it is to incorporate Core


2490
01:16:47,716 --> 01:16:49,926
ML, Vision, and Depth into your


2491
01:16:49,926 --> 01:16:50,606
applications.


2492
01:16:50,896 --> 01:16:52,936
Back to you, Seb.


2493
01:16:53,516 --> 01:16:57,756
[ Applause ]


2494
01:16:58,256 --> 01:16:59,986
>> I have to say that rock star


2495
01:16:59,986 --> 01:17:01,596
universe was pretty exciting for


2496
01:17:02,186 --> 01:17:03,396
the couple minutes I got to live


2497
01:17:03,396 --> 01:17:04,276
in it.


2498
01:17:04,956 --> 01:17:07,056
So thank you, Emily.


2499
01:17:07,056 --> 01:17:07,726
That was really great.


2500
01:17:07,726 --> 01:17:09,306
Now, let's look at Core ML more


2501
01:17:09,306 --> 01:17:09,846
closely.


2502
01:17:10,336 --> 01:17:11,636
Core ML is really about helping


2503
01:17:11,636 --> 01:17:12,946
you create new experiences in


2504
01:17:12,946 --> 01:17:14,416
your app by making it easy for


2505
01:17:14,416 --> 01:17:15,786
you to incorporate machine


2506
01:17:15,786 --> 01:17:16,406
learning models.


2507
01:17:17,296 --> 01:17:19,206
And so your application can make


2508
01:17:19,206 --> 01:17:20,306
use of domain specific


2509
01:17:20,306 --> 01:17:20,896
frameworks.


2510
01:17:21,036 --> 01:17:21,836
We've seen Vision.


2511
01:17:21,836 --> 01:17:22,866
We also have natural language


2512
01:17:22,866 --> 01:17:23,586
processing.


2513
01:17:23,876 --> 01:17:25,506
Or directly use the machine


2514
01:17:25,506 --> 01:17:26,476
learning framework.


2515
01:17:26,966 --> 01:17:28,256
Now, all of this is powered by


2516
01:17:28,256 --> 01:17:29,936
Accelerate and Metal Shaders to


2517
01:17:30,156 --> 01:17:31,366
really give you the best


2518
01:17:31,366 --> 01:17:32,336
possible performance.


2519
01:17:33,406 --> 01:17:34,946
Core ML itself provides a rich


2520
01:17:34,946 --> 01:17:36,496
set of primitives to integrate


2521
01:17:36,566 --> 01:17:37,576
state-of-the-art machine


2522
01:17:37,576 --> 01:17:39,266
learning models into your apps.


2523
01:17:40,166 --> 01:17:40,986
We've seen some of those this


2524
01:17:41,026 --> 01:17:41,536
morning.


2525
01:17:41,806 --> 01:17:42,926
So in addition to supporting


2526
01:17:42,926 --> 01:17:44,546
extensive deep learning models


2527
01:17:44,546 --> 01:17:46,666
with over 30 layers, it supports


2528
01:17:46,716 --> 01:17:47,586
standard machine learning


2529
01:17:47,586 --> 01:17:48,946
models, like tree ensembles,


2530
01:17:48,946 --> 01:17:51,416
SVMs, generalized linear models.


2531
01:17:51,526 --> 01:17:52,676
Really, the point of this is to


2532
01:17:52,676 --> 01:17:54,626
allow you to target a broad


2533
01:17:54,626 --> 01:17:55,956
variety of applications, from


2534
01:17:55,956 --> 01:17:57,276
handwriting recognition.


2535
01:17:57,646 --> 01:17:58,966
We talk about image


2536
01:17:58,966 --> 01:18:00,956
classification, music tagging,


2537
01:18:00,956 --> 01:18:02,416
handwriting recognition, and


2538
01:18:02,416 --> 01:18:03,106
much, much more.


2539
01:18:03,106 --> 01:18:04,186
Many, many other domains are


2540
01:18:04,186 --> 01:18:05,236
available to you.


2541
01:18:05,406 --> 01:18:06,436
Now, how do you get the models?


2542
01:18:06,946 --> 01:18:08,576
Well, we give you access to this


2543
01:18:08,576 --> 01:18:10,376
great machine learning community


2544
01:18:10,466 --> 01:18:12,426
with tools such as Turi, Caffe,


2545
01:18:12,426 --> 01:18:13,926
or Keras, which is a popular


2546
01:18:13,926 --> 01:18:15,466
library for TensorFlow.


2547
01:18:16,086 --> 01:18:17,076
Now, what does your work flow


2548
01:18:17,076 --> 01:18:18,156
look like as a developer?


2549
01:18:18,756 --> 01:18:20,326
Well, let's say that you train


2550
01:18:20,326 --> 01:18:22,216
your own models using Caffe, or


2551
01:18:22,216 --> 01:18:24,326
perhaps, as Emily did, you pick


2552
01:18:24,326 --> 01:18:25,346
a pre-trained model that's


2553
01:18:25,346 --> 01:18:26,336
available on the Internet.


2554
01:18:26,676 --> 01:18:28,326
You then take that model and run


2555
01:18:28,326 --> 01:18:29,586
it through the Converter tool,


2556
01:18:29,586 --> 01:18:31,076
and that Converter tool will


2557
01:18:31,076 --> 01:18:33,586
produce a Core ML compatible


2558
01:18:33,586 --> 01:18:34,096
format.


2559
01:18:34,416 --> 01:18:36,106
You take that, you drag it into


2560
01:18:36,106 --> 01:18:37,886
Xcode, and then you simply start


2561
01:18:37,886 --> 01:18:39,556
using it in your application.


2562
01:18:40,156 --> 01:18:41,526
Now, we're also open sourcing


2563
01:18:41,526 --> 01:18:43,236
the Core ML Converter tool so


2564
01:18:43,236 --> 01:18:45,006
that we can get even broader


2565
01:18:45,006 --> 01:18:46,666
community adoption over time.


2566
01:18:47,616 --> 01:18:48,616
We're also focused on


2567
01:18:48,616 --> 01:18:50,126
performance so that it runs


2568
01:18:50,126 --> 01:18:50,816
great on device.


2569
01:18:51,786 --> 01:18:53,326
Examples of what we do: graph


2570
01:18:53,326 --> 01:18:54,746
optimizations and fusing


2571
01:18:54,746 --> 01:18:56,046
multiple operations together


2572
01:18:56,046 --> 01:18:56,716
automatically.


2573
01:18:57,136 --> 01:18:58,286
And we also automatically


2574
01:18:58,286 --> 01:18:59,916
analyze your neural network to


2575
01:18:59,916 --> 01:19:01,566
make best use of hardware


2576
01:19:01,566 --> 01:19:02,196
acceleration.


2577
01:19:03,106 --> 01:19:04,336
So when you bring all of this


2578
01:19:04,406 --> 01:19:06,246
together, Core ML really allows


2579
01:19:06,246 --> 01:19:07,556
you to easily leverage the power


2580
01:19:07,556 --> 01:19:09,096
of machine learning to create


2581
01:19:09,096 --> 01:19:10,596
truly intelligent applications.


2582
01:19:11,356 --> 01:19:13,186
It's simple to use, it delivers


2583
01:19:13,186 --> 01:19:14,686
great performance and efficiency


2584
01:19:14,686 --> 01:19:16,446
across all of our platforms, and


2585
01:19:16,446 --> 01:19:17,906
it really lets you target your


2586
01:19:17,906 --> 01:19:19,486
next-generation intelligent app


2587
01:19:19,486 --> 01:19:21,286
at all, at hundreds of millions


2588
01:19:21,286 --> 01:19:22,996
of devices that are Core ML


2589
01:19:22,996 --> 01:19:23,416
enabled.


2590
01:19:23,416 --> 01:19:24,766
So we really can't wait to see


2591
01:19:24,766 --> 01:19:25,986
what you're going to create with


2592
01:19:25,986 --> 01:19:28,376
this along many of the other


2593
01:19:28,376 --> 01:19:30,046
APIs that we've talked about


2594
01:19:30,046 --> 01:19:30,346
today.


2595
01:19:30,936 --> 01:19:32,636
So with that, I'd like to call


2596
01:19:32,636 --> 01:19:34,706
up Jeremy Sandmel up on stage to


2597
01:19:34,706 --> 01:19:36,216
talk about Metal and graphics.


2598
01:19:36,646 --> 01:19:37,006
Jeremy?


2599
01:19:37,006 --> 01:19:37,426
>> Thanks, Seb.


2600
01:19:41,146 --> 01:19:43,146
[ Applause ]


2601
01:19:43,276 --> 01:19:43,646
Thanks, Seb.


2602
01:19:45,216 --> 01:19:46,646
So we developed Metal to be the


2603
01:19:46,646 --> 01:19:48,706
fastest and most efficient way


2604
01:19:48,706 --> 01:19:50,286
to drive the incredibly powerful


2605
01:19:50,286 --> 01:19:53,386
GPUs in our iOS, macOS, and tvOS


2606
01:19:53,386 --> 01:19:53,946
products.


2607
01:19:55,456 --> 01:19:56,656
And since its introduction,


2608
01:19:56,896 --> 01:19:58,226
we've dramatically expanded


2609
01:19:58,226 --> 01:19:59,646
Metal to support the advanced


2610
01:19:59,646 --> 01:20:01,446
rendering, graphics, and compute


2611
01:20:01,506 --> 01:20:03,386
features most requested by our


2612
01:20:03,386 --> 01:20:04,016
developers.


2613
01:20:04,016 --> 01:20:06,026
And the results have been


2614
01:20:06,026 --> 01:20:06,556
amazing.


2615
01:20:07,366 --> 01:20:09,356
There are more than 143,000


2616
01:20:09,456 --> 01:20:11,076
Metal apps in the iOS App Store


2617
01:20:11,076 --> 01:20:12,356
created by our developers who


2618
01:20:12,706 --> 01:20:13,926
are directly calling the Metal


2619
01:20:13,926 --> 01:20:14,086
API.


2620
01:20:14,086 --> 01:20:16,876
But we're also building our own


2621
01:20:16,876 --> 01:20:18,096
system frameworks on top of


2622
01:20:18,096 --> 01:20:18,346
Metal.


2623
01:20:18,896 --> 01:20:19,666
You've heard about a number of


2624
01:20:19,666 --> 01:20:20,176
them today.


2625
01:20:20,646 --> 01:20:21,596
For instance, if you're drawing


2626
01:20:21,596 --> 01:20:23,226
your user interface with UIKit


2627
01:20:23,536 --> 01:20:25,456
or your maps with MapKit, you're


2628
01:20:25,456 --> 01:20:26,226
also using Metal.


2629
01:20:26,826 --> 01:20:29,466
In fact, over 1.7 million apps


2630
01:20:29,596 --> 01:20:31,546
are in the App Store using Metal


2631
01:20:31,666 --> 01:20:33,186
through Apple system frameworks


2632
01:20:33,386 --> 01:20:34,506
and benefitting from Metal's


2633
01:20:34,506 --> 01:20:35,826
performance and power


2634
01:20:35,826 --> 01:20:37,416
efficiencies automatically.


2635
01:20:38,646 --> 01:20:40,216
Developers are using Metal in


2636
01:20:40,216 --> 01:20:42,276
truly awe-inspiring ways, such


2637
01:20:42,276 --> 01:20:43,756
as the professional image and


2638
01:20:43,756 --> 01:20:45,296
photo editing in the new


2639
01:20:45,296 --> 01:20:47,206
Affinity Photo for iPad from


2640
01:20:47,206 --> 01:20:47,806
Serif Labs.


2641
01:20:49,166 --> 01:20:50,936
And 3D modeling and rendering in


2642
01:20:50,936 --> 01:20:53,906
MAXON's upcoming Cinema 4D with


2643
01:20:53,906 --> 01:20:55,446
AMD's Metal accelerated


2644
01:20:55,486 --> 01:20:56,606
ProRender technology.


2645
01:20:57,886 --> 01:20:59,416
The gorgeous sci-fi adventure


2646
01:20:59,416 --> 01:21:01,666
game Obduction from Cyan, the


2647
01:21:01,666 --> 01:21:03,356
legendary creators of the game


2648
01:21:03,356 --> 01:21:03,656
Myst.


2649
01:21:04,466 --> 01:21:07,216
And the truly stunning F1 2016


2650
01:21:07,216 --> 01:21:08,436
racing game from Feral


2651
01:21:08,436 --> 01:21:08,946
Interactive.


2652
01:21:09,876 --> 01:21:11,956
In fact, Ian Bullock of Feral


2653
01:21:11,956 --> 01:21:13,936
has said that, "Metal's richer


2654
01:21:13,936 --> 01:21:15,526
feature set and lower overhead


2655
01:21:15,526 --> 01:21:16,906
have allowed them to bring


2656
01:21:16,906 --> 01:21:18,186
cutting edge games to the Mac


2657
01:21:18,646 --> 01:21:19,736
with frame rates and effects


2658
01:21:19,796 --> 01:21:21,056
that simply weren't possible


2659
01:21:21,196 --> 01:21:21,546
before."


2660
01:21:22,046 --> 01:21:24,886
Metal is broadly supported


2661
01:21:24,886 --> 01:21:27,016
across i, our iOS devices since


2662
01:21:27,126 --> 01:21:30,396
2013 and our Macs since 2012.


2663
01:21:30,396 --> 01:21:32,526
And this means there are more


2664
01:21:32,526 --> 01:21:35,286
than 900 million products


2665
01:21:35,366 --> 01:21:37,566
supporting Metal across macOS,


2666
01:21:37,896 --> 01:21:39,036
iOS, and tvOS.


2667
01:21:39,126 --> 01:21:40,566
This is truly stunning, and


2668
01:21:40,566 --> 01:21:42,256
that's why we're so incredibly


2669
01:21:42,256 --> 01:21:43,536
excited today to announce the


2670
01:21:43,536 --> 01:21:45,356
next generation of Metal, Metal


2671
01:21:45,356 --> 01:21:45,566
2.


2672
01:21:46,846 --> 01:21:48,506
Now, Metal 2 is made up of six


2673
01:21:48,716 --> 01:21:50,056
key advancements that we're


2674
01:21:50,056 --> 01:21:51,116
going to describe to you today.


2675
01:21:51,736 --> 01:21:53,976
The first is GPU-driven


2676
01:21:54,086 --> 01:21:54,456
rendering.


2677
01:21:55,006 --> 01:21:57,626
This means that we're continuing


2678
01:21:57,626 --> 01:21:59,076
to reduce the amount of work


2679
01:21:59,076 --> 01:22:01,056
required by the CPU in order to


2680
01:22:01,056 --> 01:22:02,516
execute your GPU commands.


2681
01:22:02,916 --> 01:22:03,946
Now, you may recall that the


2682
01:22:03,946 --> 01:22:06,156
overhead of OpenGL could often


2683
01:22:06,156 --> 01:22:07,616
steal a major portion of your


2684
01:22:07,616 --> 01:22:09,816
app's per-frame rendering time,


2685
01:22:10,266 --> 01:22:11,786
significantly limiting your


2686
01:22:11,786 --> 01:22:12,956
application's performance.


2687
01:22:13,436 --> 01:22:14,836
And Metal dramatically reduced


2688
01:22:14,896 --> 01:22:17,096
that CPU time, giving it back to


2689
01:22:17,226 --> 01:22:18,066
your application.


2690
01:22:18,976 --> 01:22:20,406
Well, with Metal 2, we're going


2691
01:22:20,406 --> 01:22:20,966
even further.


2692
01:22:21,396 --> 01:22:22,676
We've introduced a number of new


2693
01:22:22,736 --> 01:22:24,286
features designed to off-load


2694
01:22:24,286 --> 01:22:26,206
the CPU as much as possible and


2695
01:22:26,206 --> 01:22:27,966
to allow the GPU to much more


2696
01:22:27,966 --> 01:22:29,266
efficiently schedule its own


2697
01:22:29,266 --> 01:22:29,446
work.


2698
01:22:30,426 --> 01:22:31,656
One of these features is called


2699
01:22:31,656 --> 01:22:32,876
Metal argument buffers.


2700
01:22:33,146 --> 01:22:33,726
Now, as a little bit of


2701
01:22:33,726 --> 01:22:35,796
background, Metal render passes


2702
01:22:35,796 --> 01:22:37,876
are made of graphic state and


2703
01:22:37,876 --> 01:22:39,386
references to resources, such as


2704
01:22:39,386 --> 01:22:40,826
textures and buffers.


2705
01:22:41,296 --> 01:22:42,096
And these resources


2706
01:22:42,096 --> 01:22:43,016
traditionally needed to be


2707
01:22:43,016 --> 01:22:45,646
specified individually with each


2708
01:22:45,716 --> 01:22:46,256
draw call.


2709
01:22:46,936 --> 01:22:48,766
With Metal 2, you can assign


2710
01:22:48,766 --> 01:22:50,326
your resources to argument


2711
01:22:50,326 --> 01:22:52,446
buffers once during your app's


2712
01:22:52,446 --> 01:22:53,996
initialization, and then you can


2713
01:22:53,996 --> 01:22:55,646
rapidly switch between these


2714
01:22:55,646 --> 01:22:57,446
argument buffers that you've


2715
01:22:57,446 --> 01:22:58,786
already set up with each draw


2716
01:22:58,786 --> 01:23:00,566
call, which can be dramatically


2717
01:23:00,566 --> 01:23:01,166
more efficient.


2718
01:23:01,746 --> 01:23:03,516
In fact, the more resources you


2719
01:23:03,516 --> 01:23:04,796
use, the more complex your


2720
01:23:04,796 --> 01:23:05,996
rendering, the greater the


2721
01:23:05,996 --> 01:23:06,806
savings can be.


2722
01:23:06,806 --> 01:23:08,486
And in this example using Metal


2723
01:23:08,486 --> 01:23:10,296
argument buffers, we reduced the


2724
01:23:10,296 --> 01:23:11,916
CPU time required for our draw


2725
01:23:11,916 --> 01:23:18,266
calls by more than 10x.


2726
01:23:18,386 --> 01:23:20,386
Next, Metal 2 has taken major


2727
01:23:20,386 --> 01:23:22,306
steps forward towards a common


2728
01:23:22,336 --> 01:23:23,886
feature set across our product


2729
01:23:23,916 --> 01:23:24,386
families.


2730
01:23:24,826 --> 01:23:25,956
We've strongly emphasized


2731
01:23:25,956 --> 01:23:27,456
compatibility across our


2732
01:23:27,456 --> 01:23:29,386
platforms while still providing


2733
01:23:29,386 --> 01:23:30,906
developers with access to


2734
01:23:30,906 --> 01:23:32,236
hardware specific features


2735
01:23:32,316 --> 01:23:33,246
required for optimal


2736
01:23:33,246 --> 01:23:33,766
performance.


2737
01:23:34,746 --> 01:23:36,036
We're bringing key features from


2738
01:23:36,036 --> 01:23:38,466
macOS to iOS and vice versa.


2739
01:23:39,396 --> 01:23:41,316
One of these examples is called


2740
01:23:41,316 --> 01:23:42,306
Metal Resource Heaps.


2741
01:23:42,956 --> 01:23:44,046
This can provide a much more


2742
01:23:44,046 --> 01:23:45,226
efficient way of managing your


2743
01:23:45,226 --> 01:23:46,566
Metal textures and buffers


2744
01:23:46,806 --> 01:23:48,496
without requiring you to become


2745
01:23:48,496 --> 01:23:49,996
an expert in how each individual


2746
01:23:49,996 --> 01:23:51,866
GPU manages and allocates


2747
01:23:51,866 --> 01:23:52,146
memory.


2748
01:23:53,476 --> 01:23:55,116
Traditionally, each Metal


2749
01:23:55,176 --> 01:23:56,026
texture would require a


2750
01:23:56,126 --> 01:23:57,466
separate, individual memory


2751
01:23:57,466 --> 01:23:58,616
allocation from the OS.


2752
01:23:58,996 --> 01:24:00,126
Now, this was simple to use.


2753
01:24:00,126 --> 01:24:01,396
It's simple to understand but


2754
01:24:01,396 --> 01:24:02,416
could be quite expensive.


2755
01:24:03,356 --> 01:24:04,326
But with Metal Heaps, you can


2756
01:24:04,326 --> 01:24:05,836
allocate a single memory buffer


2757
01:24:06,556 --> 01:24:08,566
and then store multiple textures


2758
01:24:08,566 --> 01:24:08,886
within it.


2759
01:24:09,676 --> 01:24:11,046
You can also do incredibly fast


2760
01:24:11,136 --> 01:24:12,976
reallocations and you can


2761
01:24:12,976 --> 01:24:15,496
reinterpret existing memory for


2762
01:24:15,496 --> 01:24:16,046
a new texture.


2763
01:24:17,896 --> 01:24:19,846
Interestingly, Metal Heaps also


2764
01:24:19,846 --> 01:24:21,506
allows you to reuse previously


2765
01:24:21,506 --> 01:24:22,756
allocated memory from textures


2766
01:24:22,756 --> 01:24:24,326
you don't need simultaneously,


2767
01:24:24,506 --> 01:24:25,856
which can save you significant


2768
01:24:25,856 --> 01:24:26,996
amounts of memory per frame.


2769
01:24:27,586 --> 01:24:29,466
This is all very simple and easy


2770
01:24:29,666 --> 01:24:30,726
and doesn't sacrifice any


2771
01:24:30,726 --> 01:24:31,216
performance.


2772
01:24:32,576 --> 01:24:34,246
Now, Metal is not just for


2773
01:24:34,246 --> 01:24:34,666
graphics.


2774
01:24:34,776 --> 01:24:36,006
The Metal Performance Shaders


2775
01:24:36,186 --> 01:24:37,486
Library provides an optimized


2776
01:24:37,486 --> 01:24:39,946
set of image processing, linear


2777
01:24:39,946 --> 01:24:41,366
algebra, and other compute


2778
01:24:41,366 --> 01:24:42,136
operations.


2779
01:24:43,296 --> 01:24:46,136
And Metal 2 extends this support


2780
01:24:46,636 --> 01:24:48,366
for accelerating machine


2781
01:24:48,456 --> 01:24:48,776
learning.


2782
01:24:50,206 --> 01:24:51,326
We've included a number of


2783
01:24:51,326 --> 01:24:52,726
GPU-accelerated machine learning


2784
01:24:52,726 --> 01:24:54,666
primitives and new graph API for


2785
01:24:54,666 --> 01:24:56,676
convolutional neural networks,


2786
01:24:57,236 --> 01:24:58,326
and it can all be efficiently


2787
01:24:58,326 --> 01:24:59,646
integrated into your Metal


2788
01:24:59,776 --> 01:25:03,026
graphics and compute code.


2789
01:25:03,236 --> 01:25:04,296
Machine learning kernels such as


2790
01:25:04,296 --> 01:25:06,506
LSTMs, convolutions, and neuron


2791
01:25:06,506 --> 01:25:07,806
layers are included as well as


2792
01:25:07,806 --> 01:25:09,586
an expanded set of matrix math


2793
01:25:09,586 --> 01:25:10,236
operations.


2794
01:25:10,616 --> 01:25:12,586
And most importantly, MPS also


2795
01:25:12,586 --> 01:25:14,026
enables everyone using the


2796
01:25:14,026 --> 01:25:15,786
powerful, new Core ML framework


2797
01:25:15,836 --> 01:25:17,266
that Seb just described to get


2798
01:25:17,266 --> 01:25:19,126
the full performance of the GPU


2799
01:25:19,126 --> 01:25:19,846
for machine learning


2800
01:25:20,336 --> 01:25:20,936
automatically.


2801
01:25:21,406 --> 01:25:24,876
Next, we're very excited to talk


2802
01:25:24,876 --> 01:25:26,466
about VR in Metal 2.


2803
01:25:27,576 --> 01:25:29,036
With Metal 2 and macOS High


2804
01:25:29,136 --> 01:25:30,896
Sierra, we're enabling VR


2805
01:25:30,896 --> 01:25:32,276
content development on the Mac


2806
01:25:32,646 --> 01:25:34,016
for the first time with


2807
01:25:34,046 --> 01:25:36,276
optimized support for 360-degree


2808
01:25:36,276 --> 01:25:38,106
video editing and 3D content


2809
01:25:38,106 --> 01:25:38,556
creation.


2810
01:25:39,306 --> 01:25:40,246
And we've added support for


2811
01:25:40,246 --> 01:25:42,056
low-latency stereoscopic


2812
01:25:42,056 --> 01:25:43,316
rendering on head-mounted


2813
01:25:43,316 --> 01:25:44,766
displays and powerful, new


2814
01:25:44,766 --> 01:25:46,446
developer tools to optimize your


2815
01:25:46,446 --> 01:25:47,446
VR app's performance.


2816
01:25:48,466 --> 01:25:49,846
We're incredibly excited to say


2817
01:25:49,846 --> 01:25:50,936
we've been working closely with


2818
01:25:50,936 --> 01:25:52,156
Valve, and they've announced


2819
01:25:52,156 --> 01:25:53,136
they're bringing their full


2820
01:25:53,136 --> 01:25:56,086
SteamVR runtime and SDK to the


2821
01:25:56,086 --> 01:25:57,966
Mac with beta versions available


2822
01:25:58,196 --> 01:25:58,736
today.


2823
01:25:59,496 --> 01:25:59,586
Yeah.


2824
01:26:01,516 --> 01:26:04,696
[ Applause ]


2825
01:26:05,196 --> 01:26:06,386
This also includes support for


2826
01:26:06,386 --> 01:26:07,846
the HTC Vive headset and


2827
01:26:07,846 --> 01:26:08,516
controllers.


2828
01:26:09,026 --> 01:26:10,296
And as you saw this morning,


2829
01:26:10,546 --> 01:26:11,906
we've also been partnering with


2830
01:26:11,906 --> 01:26:13,536
Epic Games, who's announced


2831
01:26:13,536 --> 01:26:15,116
macOS VR support in Unreal


2832
01:26:15,116 --> 01:26:16,556
Engine in their upcoming release


2833
01:26:16,556 --> 01:26:18,346
later this year with early


2834
01:26:18,346 --> 01:26:19,806
access available from GitHub


2835
01:26:19,926 --> 01:26:21,056
starting in September.


2836
01:26:21,966 --> 01:26:23,316
This includes support for Epic's


2837
01:26:23,316 --> 01:26:25,486
immersive VR Mode Editor that


2838
01:26:25,486 --> 01:26:27,236
you saw this morning, allowing


2839
01:26:27,236 --> 01:26:28,516
you to step inside the VR


2840
01:26:28,686 --> 01:26:30,186
environments as you're creating


2841
01:26:30,846 --> 01:26:30,936
them.


2842
01:26:31,496 --> 01:26:33,266
We're also very excited to be


2843
01:26:33,266 --> 01:26:34,346
partnering with Unity, who has


2844
01:26:34,346 --> 01:26:35,816
announced they too are adding


2845
01:26:35,856 --> 01:26:37,206
macOS VR support to their


2846
01:26:37,206 --> 01:26:38,916
incredibly powerful engine and


2847
01:26:38,916 --> 01:26:40,286
editing environment behind many


2848
01:26:40,286 --> 01:26:41,416
of the most popular games.


2849
01:26:42,316 --> 01:26:43,506
This has enabled the developer


2850
01:26:43,506 --> 01:26:45,196
I-Illusions to use Unity to


2851
01:26:45,196 --> 01:26:47,996
bring the addictive and exciting


2852
01:26:48,056 --> 01:26:49,996
VR space game Space Pirates


2853
01:26:49,996 --> 01:26:51,336
Trainer to the Mac in just a


2854
01:26:51,336 --> 01:26:52,616
matter of just a few days.


2855
01:26:54,086 --> 01:26:55,516
Now, a word about performance,


2856
01:26:56,146 --> 01:26:57,336
which is incredibly important


2857
01:26:57,336 --> 01:26:58,806
for building compelling VR apps.


2858
01:26:59,246 --> 01:27:00,546
Many developers are familiar


2859
01:27:00,546 --> 01:27:01,496
with optimizing their


2860
01:27:01,496 --> 01:27:03,566
applications to fit within 60


2861
01:27:03,566 --> 01:27:05,846
frames per second, and this


2862
01:27:05,846 --> 01:27:06,736
would mean you would have a


2863
01:27:06,736 --> 01:27:08,786
fairly generous 16.7


2864
01:27:08,786 --> 01:27:11,116
milliseconds per frame all


2865
01:27:11,116 --> 01:27:12,156
devoted to your application's


2866
01:27:12,156 --> 01:27:12,486
rendering.


2867
01:27:13,376 --> 01:27:14,786
However, to create an immersive


2868
01:27:14,786 --> 01:27:16,796
VR experience, you need to


2869
01:27:16,856 --> 01:27:18,906
render a full stereoscopic pair


2870
01:27:18,906 --> 01:27:20,816
of views at 90 frames a second,


2871
01:27:20,976 --> 01:27:22,326
which can leave you only about


2872
01:27:22,326 --> 01:27:23,706
11 milliseconds per frame.


2873
01:27:24,776 --> 01:27:25,776
But actually, you don't even get


2874
01:27:25,776 --> 01:27:26,956
all of that quite all to


2875
01:27:26,956 --> 01:27:28,186
yourself because there's a VR


2876
01:27:28,186 --> 01:27:30,236
compositor in the mix, which


2877
01:27:30,236 --> 01:27:32,136
uses the GPU to combine the


2878
01:27:32,136 --> 01:27:33,846
left- and right-eye images to


2879
01:27:33,846 --> 01:27:35,266
compensate for HMD lens


2880
01:27:35,316 --> 01:27:36,596
distortion and for head


2881
01:27:36,656 --> 01:27:36,996
movement.


2882
01:27:37,276 --> 01:27:38,536
And this leaves you only about


2883
01:27:38,536 --> 01:27:39,886
ten milliseconds per frame.


2884
01:27:40,236 --> 01:27:41,186
In other words, you need to


2885
01:27:41,186 --> 01:27:43,166
target your VR app to achieve


2886
01:27:43,396 --> 01:27:44,946
100 frames per second.


2887
01:27:46,056 --> 01:27:47,426
Now, this can be very


2888
01:27:47,556 --> 01:27:49,786
challenging, but Metal 2


2889
01:27:49,786 --> 01:27:51,326
provides some awesome, new tools


2890
01:27:51,326 --> 01:27:53,386
for optimizing your VR app's


2891
01:27:53,386 --> 01:27:53,786
performance.


2892
01:27:54,196 --> 01:27:55,516
We've include built-in support


2893
01:27:55,516 --> 01:27:57,006
for SteamVR's compositor


2894
01:27:57,006 --> 01:27:58,246
tracepoints within the Metal


2895
01:27:58,246 --> 01:27:59,046
system trace.


2896
01:27:59,806 --> 01:28:02,046
This allows you to see exactly


2897
01:28:02,046 --> 01:28:04,016
where the GPU time is going and


2898
01:28:04,016 --> 01:28:05,686
precisely when your frames will


2899
01:28:05,686 --> 01:28:06,386
hit the glass.


2900
01:28:07,676 --> 01:28:09,486
With Metal 2 and the powerful,


2901
01:28:09,636 --> 01:28:11,106
new GPUs in the latest iMacs


2902
01:28:11,106 --> 01:28:11,776
that we announced that we're


2903
01:28:11,776 --> 01:28:14,026
shipping today, we fully enabled


2904
01:28:14,026 --> 01:28:17,006
VR content development on your


2905
01:28:17,586 --> 01:28:18,576
Mac desktop.


2906
01:28:18,676 --> 01:28:20,346
Now, many professional content


2907
01:28:20,346 --> 01:28:22,416
creators love the mobility of


2908
01:28:22,416 --> 01:28:23,706
working with our MacBook Pros,


2909
01:28:24,306 --> 01:28:25,746
but intensive VR development can


2910
01:28:25,746 --> 01:28:27,996
require powerful GPUs that don't


2911
01:28:27,996 --> 01:28:29,186
always fit in the thinnest and


2912
01:28:29,186 --> 01:28:30,126
lightest laptops.


2913
01:28:31,036 --> 01:28:33,016
This is why Metal 2 is bringing


2914
01:28:33,016 --> 01:28:34,496
first-class support for external


2915
01:28:34,496 --> 01:28:36,966
GPUs to your MacBook Pro and to


2916
01:28:36,966 --> 01:28:37,866
macOS High Sierra.


2917
01:28:38,936 --> 01:28:39,836
Yeah, thanks [applause].


2918
01:28:42,326 --> 01:28:44,236
So you could very easily add


2919
01:28:44,276 --> 01:28:45,786
support to your app for external


2920
01:28:45,786 --> 01:28:46,006
GPUs.


2921
01:28:46,006 --> 01:28:47,826
It takes just a few lines of


2922
01:28:47,826 --> 01:28:49,266
code, and you register for


2923
01:28:49,266 --> 01:28:50,646
external GPU device connection


2924
01:28:50,646 --> 01:28:52,396
callbacks and identify which


2925
01:28:52,396 --> 01:28:54,206
GPUs in your system are


2926
01:28:54,206 --> 01:28:54,706
removable.


2927
01:28:56,116 --> 01:28:57,336
This enables the best of both


2928
01:28:57,336 --> 01:28:59,316
worlds -- the GPU horsepower for


2929
01:28:59,316 --> 01:29:00,406
building immersive VR


2930
01:29:00,406 --> 01:29:03,186
applications on our most mobile


2931
01:29:03,186 --> 01:29:05,246
Macs -- and we're really excited


2932
01:29:05,246 --> 01:29:05,516
about it.


2933
01:29:06,016 --> 01:29:07,176
So to get you started, we're


2934
01:29:07,176 --> 01:29:08,476
offering an external GPU


2935
01:29:08,476 --> 01:29:10,046
Developer Kit through our


2936
01:29:10,046 --> 01:29:10,886
Developer program.


2937
01:29:11,636 --> 01:29:13,136
It includes everything you need


2938
01:29:13,136 --> 01:29:14,536
for VR content development on


2939
01:29:14,536 --> 01:29:16,416
your MacBook Pro, including a


2940
01:29:16,416 --> 01:29:18,296
discount on the HTC Vive


2941
01:29:18,496 --> 01:29:19,796
head-mounted display, and it's


2942
01:29:19,836 --> 01:29:21,556
all available today from


2943
01:29:21,556 --> 01:29:24,896
developer.apple.com.


2944
01:29:25,116 --> 01:29:27,366
And last but not least, Metal 2


2945
01:29:27,366 --> 01:29:29,326
enables and provides our most


2946
01:29:29,326 --> 01:29:30,806
advanced graphics developer


2947
01:29:30,806 --> 01:29:32,536
optimization tools yet.


2948
01:29:33,496 --> 01:29:34,796
We've added the top-requested


2949
01:29:34,796 --> 01:29:36,656
tools and features to enable


2950
01:29:36,656 --> 01:29:38,396
rapid debugging, analysis, and


2951
01:29:38,396 --> 01:29:40,136
optimization of your GPU


2952
01:29:40,136 --> 01:29:40,946
performance bottlenecks.


2953
01:29:40,946 --> 01:29:43,066
And it's all integrated directly


2954
01:29:43,066 --> 01:29:45,206
into Xcode and Instruments.


2955
01:29:46,196 --> 01:29:47,886
We've included powerful, new GPU


2956
01:29:47,966 --> 01:29:49,706
hardware performance and


2957
01:29:49,706 --> 01:29:50,916
software performance counters,


2958
01:29:50,916 --> 01:29:52,186
giving you deep insight into the


2959
01:29:52,186 --> 01:29:55,016
GPU's operation and automatic


2960
01:29:55,066 --> 01:29:56,256
bottleneck detection that can


2961
01:29:56,256 --> 01:29:58,026
take you exactly to the source


2962
01:29:58,026 --> 01:29:59,106
of your performance problems.


2963
01:29:59,586 --> 01:30:01,076
It's all very powerful.


2964
01:30:01,076 --> 01:30:03,086
And to show you a demo of Metal


2965
01:30:03,086 --> 01:30:05,066
2 Developer tools in action, I'd


2966
01:30:05,066 --> 01:30:06,186
like to invite Eric Sunnel


2967
01:30:06,426 --> 01:30:06,926
[phonetic] to the stage.


2968
01:30:07,176 --> 01:30:07,296
Eric?


2969
01:30:07,616 --> 01:30:07,846
>> Jeremy.


2970
01:30:10,846 --> 01:30:11,326
Thanks Jeremy.


2971
01:30:12,096 --> 01:30:12,666
Hi, everyone.


2972
01:30:12,826 --> 01:30:13,626
Today I'd like to show you a


2973
01:30:13,626 --> 01:30:14,556
couple of the new features in


2974
01:30:14,556 --> 01:30:17,456
Metal, like our GPU profile


2975
01:30:17,456 --> 01:30:19,606
counter tool in Xcode.


2976
01:30:20,136 --> 01:30:21,736
So what I have here is a Metal


2977
01:30:21,736 --> 01:30:22,866
application rendering thousands


2978
01:30:22,866 --> 01:30:24,116
of asteroids on the screen.


2979
01:30:24,556 --> 01:30:26,456
And it's, all is individual draw


2980
01:30:26,456 --> 01:30:27,386
calls, and it's important to


2981
01:30:27,386 --> 01:30:28,346
note that each of these draw


2982
01:30:28,346 --> 01:30:29,796
calls is using a number of


2983
01:30:30,146 --> 01:30:31,386
unique Metal resources all


2984
01:30:31,386 --> 01:30:32,176
chosen at runtime.


2985
01:30:32,806 --> 01:30:33,626
So now what I'm going to do here


2986
01:30:33,626 --> 01:30:34,796
is add a couple more asteroids


2987
01:30:34,796 --> 01:30:35,316
to the scene.


2988
01:30:35,316 --> 01:30:38,056
All right, that's not performing


2989
01:30:38,056 --> 01:30:40,276
quite as well as I want, so


2990
01:30:40,276 --> 01:30:41,386
let's exit out of full screen,


2991
01:30:42,536 --> 01:30:45,386
and take a GPU capture, and see


2992
01:30:45,636 --> 01:30:46,876
if we can get a better idea of


2993
01:30:46,946 --> 01:30:47,916
what's going on.


2994
01:30:48,506 --> 01:30:49,426
So not only is it taking a GPU


2995
01:30:49,516 --> 01:30:51,106
capture and analyzing all of our


2996
01:30:51,106 --> 01:30:52,636
shaders, but now it's also


2997
01:30:52,636 --> 01:30:53,936
capturing all of the hardware


2998
01:30:53,936 --> 01:30:55,826
performance counters and


2999
01:30:56,666 --> 01:30:57,746
actually on a per draw call


3000
01:30:57,746 --> 01:30:58,046
basis.


3001
01:30:58,046 --> 01:30:59,866
It'll be able to visualize that


3002
01:30:59,866 --> 01:31:00,236
in a second.


3003
01:31:01,466 --> 01:31:02,096
All right, so now on the


3004
01:31:02,096 --> 01:31:02,886
left-hand -- actually, let me


3005
01:31:02,886 --> 01:31:05,246
change my system editor here.


3006
01:31:05,246 --> 01:31:06,836
And on the left-hand side, now I


3007
01:31:06,836 --> 01:31:08,776
have access to a GPU report that


3008
01:31:09,166 --> 01:31:11,056
now brings up in the standard


3009
01:31:11,056 --> 01:31:12,706
editor a summary of all the


3010
01:31:12,706 --> 01:31:13,676
performance counters on the


3011
01:31:13,676 --> 01:31:14,736
timeline for all of the draw


3012
01:31:14,736 --> 01:31:15,066
calls.


3013
01:31:15,276 --> 01:31:16,166
And on the right-hand side, I


3014
01:31:16,166 --> 01:31:17,086
have all the detailed


3015
01:31:17,236 --> 01:31:18,346
performance counters as well.


3016
01:31:18,346 --> 01:31:20,276
So if I select a particular draw


3017
01:31:20,276 --> 01:31:21,966
call -- let's say this one for


3018
01:31:21,966 --> 01:31:22,706
instance -- all of the


3019
01:31:22,706 --> 01:31:23,856
right-hand side updates with all


3020
01:31:23,856 --> 01:31:24,726
the detailed performance


3021
01:31:24,726 --> 01:31:25,606
counters that we've captured.


3022
01:31:26,106 --> 01:31:28,526
If I hover over the vertices


3023
01:31:28,526 --> 01:31:29,916
row, here I can get an idea of,


3024
01:31:29,956 --> 01:31:30,946
OK, what's the summary for that


3025
01:31:30,946 --> 01:31:32,666
draw call for the vertices


3026
01:31:32,666 --> 01:31:33,666
submitted to the scenes?


3027
01:31:33,786 --> 01:31:34,786
Almost 8000.


3028
01:31:34,786 --> 01:31:35,436
Seems pretty high.


3029
01:31:36,056 --> 01:31:37,356
If I look at the pixels stored,


3030
01:31:37,356 --> 01:31:38,686
it looks like I'm only storing


3031
01:31:38,686 --> 01:31:40,626
about 11 pixels for that draw


3032
01:31:40,626 --> 01:31:42,136
call, which seems a lot lower in


3033
01:31:42,136 --> 01:31:42,666
comparison.


3034
01:31:43,356 --> 01:31:44,176
So now, if we look in the upper


3035
01:31:44,176 --> 01:31:45,676
right-hand side, we can see some


3036
01:31:45,676 --> 01:31:46,906
of the recommendations provided


3037
01:31:46,906 --> 01:31:47,456
by Xcode.


3038
01:31:47,896 --> 01:31:49,486
The top one here, pixels per


3039
01:31:49,486 --> 01:31:50,786
triangle ratio, is very low.


3040
01:31:51,436 --> 01:31:52,356
Seems about right.


3041
01:31:52,786 --> 01:31:54,136
Now, if we disclose this, we get


3042
01:31:54,136 --> 01:31:55,396
some of the recommendations made


3043
01:31:55,396 --> 01:31:55,916
by Xcode.


3044
01:31:56,406 --> 01:31:57,416
So we can see here it says,


3045
01:31:57,416 --> 01:31:58,706
"Consider reducing the number of


3046
01:31:58,706 --> 01:32:00,236
triangles and consider reducing


3047
01:32:00,236 --> 01:32:01,336
the work in the vertex shader."


3048
01:32:01,906 --> 01:32:03,046
Now, if we click on the top one


3049
01:32:03,046 --> 01:32:04,216
and click on the link here,


3050
01:32:04,366 --> 01:32:05,206
it'll take us right to all the


3051
01:32:05,206 --> 01:32:06,436
bound resources for the draw


3052
01:32:06,436 --> 01:32:06,826
call.


3053
01:32:07,436 --> 01:32:08,496
We can see here that we're


3054
01:32:08,496 --> 01:32:09,846
actually loading our high poly


3055
01:32:09,846 --> 01:32:10,856
model of the asteroid, which


3056
01:32:10,856 --> 01:32:12,246
doesn't make much sense for this


3057
01:32:12,246 --> 01:32:12,516
scene.


3058
01:32:13,026 --> 01:32:14,086
So we're going to go over here


3059
01:32:14,086 --> 01:32:15,726
and make a source code change.


3060
01:32:16,476 --> 01:32:17,476
Get rid of the editor.


3061
01:32:18,466 --> 01:32:18,876
All right.


3062
01:32:18,876 --> 01:32:20,606
And let's change this to the


3063
01:32:20,606 --> 01:32:22,506
reduced model that I've prepared


3064
01:32:22,506 --> 01:32:23,146
ahead of time.


3065
01:32:23,956 --> 01:32:24,276
All right.


3066
01:32:24,986 --> 01:32:25,966
Now, let's make one more change


3067
01:32:25,966 --> 01:32:26,576
in this project.


3068
01:32:26,576 --> 01:32:27,796
Let's see if we can make useful


3069
01:32:27,796 --> 01:32:28,496
argument buffers.


3070
01:32:29,076 --> 01:32:30,136
So what I have here is our for


3071
01:32:30,136 --> 01:32:31,636
loop that's making, that's doing


3072
01:32:31,636 --> 01:32:33,126
the per draw call for each


3073
01:32:33,126 --> 01:32:33,586
asteroid.


3074
01:32:34,056 --> 01:32:35,446
And above each draw call, I'm


3075
01:32:35,446 --> 01:32:37,236
setting a number of resources.


3076
01:32:37,706 --> 01:32:38,816
So with argument buffers, I can


3077
01:32:38,816 --> 01:32:41,476
remove this code and, instead,


3078
01:32:41,476 --> 01:32:42,806
insert a call to binding our


3079
01:32:42,806 --> 01:32:44,066
argument buffer ahead of time


3080
01:32:44,696 --> 01:32:47,526
and basically allow the GPU now


3081
01:32:47,526 --> 01:32:49,216
to make the dynamic selection of


3082
01:32:49,216 --> 01:32:50,346
which resources to use.


3083
01:32:50,916 --> 01:32:52,316
So with these two simple changes


3084
01:32:52,316 --> 01:32:53,396
in place, let's run and see


3085
01:32:53,396 --> 01:32:54,836
where our performance is now.


3086
01:32:59,616 --> 01:33:00,096
All right.


3087
01:33:00,096 --> 01:33:02,696
OK, that's looking good.


3088
01:33:02,906 --> 01:33:03,716
Let's add some more.


3089
01:33:03,716 --> 01:33:04,896
OK, that's looking a lot better.


3090
01:33:04,926 --> 01:33:06,026
That's exactly what I like to


3091
01:33:06,026 --> 01:33:06,256
see.


3092
01:33:06,256 --> 01:33:07,596
All right, so the, yeah, with


3093
01:33:07,836 --> 01:33:09,726
the new features in Metal 2, we


3094
01:33:09,726 --> 01:33:11,176
hope you get deeper insight into


3095
01:33:11,176 --> 01:33:12,476
where your application is


3096
01:33:12,476 --> 01:33:14,326
spending time, and we'll offer


3097
01:33:14,326 --> 01:33:15,486
even more code from the critical


3098
01:33:15,486 --> 01:33:15,756
path.


3099
01:33:15,756 --> 01:33:16,746
Thanks very much.


3100
01:33:17,116 --> 01:33:17,676
Back to you, Jeremy.


3101
01:33:18,516 --> 01:33:23,586
[ Applause ]


3102
01:33:24,086 --> 01:33:25,036
>> Well, thanks, Eric.


3103
01:33:25,596 --> 01:33:27,856
So that's Metal 2 -- GPU-driven


3104
01:33:27,856 --> 01:33:29,676
rendering, a unified feature


3105
01:33:29,736 --> 01:33:31,796
platform, machine learning


3106
01:33:31,796 --> 01:33:34,406
acceleration, support for VR


3107
01:33:34,406 --> 01:33:36,086
content development on your Mac


3108
01:33:36,716 --> 01:33:38,206
with support for external GPUs,


3109
01:33:38,206 --> 01:33:40,826
and our most advanced developer


3110
01:33:40,826 --> 01:33:42,526
optimization tools to date.


3111
01:33:42,946 --> 01:33:44,126
We can't wait to see what you're


3112
01:33:44,126 --> 01:33:45,786
going to build with Metal next.


3113
01:33:46,226 --> 01:33:47,036
Thank you very much.


3114
01:33:47,606 --> 01:33:48,876
And now, I'd like to invite to


3115
01:33:48,876 --> 01:33:50,996
the stage Vice President of AR


3116
01:33:50,996 --> 01:33:52,656
and VR Technologies, Mike


3117
01:33:52,656 --> 01:33:53,146
Rockwell.


3118
01:33:54,516 --> 01:33:56,546
[ Applause ]


3119
01:33:57,046 --> 01:33:57,706
>> Thanks, Jeremy.


3120
01:33:59,146 --> 01:34:01,156
So I am incredibly excited to


3121
01:34:01,156 --> 01:34:03,606
talk to you about ARKit, Apple's


3122
01:34:03,606 --> 01:34:05,846
new framework that enables the


3123
01:34:05,846 --> 01:34:07,516
creation of augmented reality


3124
01:34:07,516 --> 01:34:08,496
apps on iOS.


3125
01:34:09,806 --> 01:34:11,576
One of our primary goals in


3126
01:34:11,576 --> 01:34:13,596
creating ARKit was to make sure


3127
01:34:13,596 --> 01:34:15,146
we could support a broad range


3128
01:34:15,146 --> 01:34:16,836
of devices from day one.


3129
01:34:17,006 --> 01:34:18,466
We didn't want to require


3130
01:34:18,466 --> 01:34:20,396
specialized hardware, and I'm


3131
01:34:20,476 --> 01:34:21,996
happy to say that we achieved


3132
01:34:23,036 --> 01:34:23,216
that.


3133
01:34:23,216 --> 01:34:27,856
ARKit runs on iPhone 6s or later


3134
01:34:27,856 --> 01:34:29,596
and iPad Pro and later.


3135
01:34:30,016 --> 01:34:31,296
That means it will run on


3136
01:34:31,296 --> 01:34:33,596
hundreds of millions of devices


3137
01:34:33,936 --> 01:34:34,986
from day one.


3138
01:34:35,656 --> 01:34:38,396
It makes iOS the largest AR


3139
01:34:38,396 --> 01:34:39,966
platform in the world.


3140
01:34:41,176 --> 01:34:42,696
So what do you need to do to


3141
01:34:42,696 --> 01:34:43,776
create great AR?


3142
01:34:44,526 --> 01:34:46,056
The first thing you need to know


3143
01:34:46,276 --> 01:34:48,346
is where the camera is in space


3144
01:34:48,586 --> 01:34:49,426
and where it's looking.


3145
01:34:50,156 --> 01:34:51,776
We use a technique called


3146
01:34:51,776 --> 01:34:53,466
visual-inertial odometry to do


3147
01:34:53,466 --> 01:34:53,666
that.


3148
01:34:53,866 --> 01:34:54,866
Let's see how that works.


3149
01:34:56,276 --> 01:34:57,616
So we've got our scene and we've


3150
01:34:57,616 --> 01:34:58,286
got our camera.


3151
01:34:58,806 --> 01:34:59,816
And the camera's looking at the


3152
01:34:59,816 --> 01:35:00,136
world.


3153
01:35:01,126 --> 01:35:03,466
We identify feature points in


3154
01:35:03,466 --> 01:35:06,476
the world and we track them from


3155
01:35:06,476 --> 01:35:08,776
frame to frame.


3156
01:35:08,966 --> 01:35:10,506
From that, we are able to


3157
01:35:10,616 --> 01:35:13,256
back-calculate the location of


3158
01:35:13,346 --> 01:35:14,636
the camera, and create a


3159
01:35:14,636 --> 01:35:16,506
coordinate system, and then give


3160
01:35:16,506 --> 01:35:18,306
you that location in real time


3161
01:35:18,796 --> 01:35:20,226
at 60 frames per second.


3162
01:35:21,706 --> 01:35:23,326
Now, if we were going to do that


3163
01:35:23,376 --> 01:35:24,956
calculation at 60 frames per


3164
01:35:24,956 --> 01:35:26,556
second, it would take a lot of


3165
01:35:26,556 --> 01:35:27,366
CPU horsepower.


3166
01:35:27,366 --> 01:35:30,216
What we do instead is we fuse


3167
01:35:30,216 --> 01:35:31,946
the data from the accelerometer


3168
01:35:32,506 --> 01:35:35,226
and the gyro with that tracking


3169
01:35:35,226 --> 01:35:36,676
information and we're able to


3170
01:35:36,676 --> 01:35:37,806
reduce the compute load


3171
01:35:37,806 --> 01:35:38,426
dramatically.


3172
01:35:38,876 --> 01:35:40,416
In fact, to get this information


3173
01:35:40,416 --> 01:35:42,376
only takes a fraction of a


3174
01:35:42,376 --> 01:35:43,386
single CPU.


3175
01:35:44,496 --> 01:35:46,226
That leaves the GPU available to


3176
01:35:46,226 --> 01:35:48,376
you to do fantastic rendering of


3177
01:35:48,546 --> 01:35:49,526
3D objects.


3178
01:35:51,416 --> 01:35:53,086
The second thing you need is to


3179
01:35:53,086 --> 01:35:54,666
be able to understand the scene.


3180
01:35:54,926 --> 01:35:56,246
So what's in there so that you


3181
01:35:56,246 --> 01:35:57,266
can put things in there and have


3182
01:35:57,266 --> 01:36:00,506
them integrate and feel natural.


3183
01:36:01,536 --> 01:36:03,406
We use those feature points that


3184
01:36:03,406 --> 01:36:05,436
we tracked earlier to identify


3185
01:36:05,436 --> 01:36:06,936
major planes in the scene.


3186
01:36:07,636 --> 01:36:09,136
We look for ones that coplanar,


3187
01:36:09,706 --> 01:36:11,536
and then we find the extents of


3188
01:36:11,536 --> 01:36:13,356
those planes across the scene.


3189
01:36:13,726 --> 01:36:15,236
That allows you to integrate


3190
01:36:15,236 --> 01:36:16,226
objects and have them be


3191
01:36:16,226 --> 01:36:17,096
completely natural.


3192
01:36:17,096 --> 01:36:18,676
So I can, for example, set that


3193
01:36:18,676 --> 01:36:20,966
vase on the table, and it feels


3194
01:36:20,966 --> 01:36:22,436
like it's in the scene itself.


3195
01:36:23,066 --> 01:36:25,226
Now, if you didn't know what the


3196
01:36:25,226 --> 01:36:26,956
size of the table was, your vase


3197
01:36:26,956 --> 01:36:28,506
might come out and be gigantic.


3198
01:36:29,046 --> 01:36:30,626
So in addition to identifying


3199
01:36:30,626 --> 01:36:32,026
those planes, we make sure that


3200
01:36:32,026 --> 01:36:33,496
the coordinate system is


3201
01:36:33,496 --> 01:36:33,886
accurate.


3202
01:36:33,946 --> 01:36:35,656
In fact, it's accurate to within


3203
01:36:35,766 --> 01:36:38,326
5 percent, so your objects feel


3204
01:36:38,506 --> 01:36:39,776
like that they're natural in the


3205
01:36:39,776 --> 01:36:40,056
scene.


3206
01:36:42,396 --> 01:36:44,616
The final thing you need in


3207
01:36:44,616 --> 01:36:45,776
order to enable those objects to


3208
01:36:45,776 --> 01:36:47,206
feel right in the scene is to


3209
01:36:47,206 --> 01:36:48,746
have the lighting be accurate.


3210
01:36:49,136 --> 01:36:51,516
So we provide accurate light


3211
01:36:51,516 --> 01:36:53,246
estimations so that as the scene


3212
01:36:53,246 --> 01:36:54,516
would darken, you can darken


3213
01:36:54,516 --> 01:36:55,636
your objects as well.


3214
01:36:55,836 --> 01:36:58,046
If you don't have that, then


3215
01:36:58,046 --> 01:36:59,396
objects appear to glow in the


3216
01:36:59,396 --> 01:37:00,546
scene and they won't appear


3217
01:37:00,546 --> 01:37:00,936
natural.


3218
01:37:02,296 --> 01:37:04,036
So let's look at how you can


3219
01:37:04,036 --> 01:37:05,966
access this incredibly powerful


3220
01:37:05,966 --> 01:37:06,486
framework.


3221
01:37:06,876 --> 01:37:08,026
It's really very easy.


3222
01:37:08,836 --> 01:37:11,286
All of this is available through


3223
01:37:11,286 --> 01:37:11,696
ARKit.


3224
01:37:11,696 --> 01:37:16,116
All you have to do is create a


3225
01:37:16,116 --> 01:37:18,926
session configuration, include


3226
01:37:18,926 --> 01:37:20,136
things like whether you want to


3227
01:37:20,136 --> 01:37:21,906
have plane estimation, whether


3228
01:37:21,906 --> 01:37:23,216
you want to have a light probe,


3229
01:37:23,646 --> 01:37:24,796
and then you start an AR


3230
01:37:24,796 --> 01:37:25,266
session.


3231
01:37:26,846 --> 01:37:28,586
Once that's started, your frames


3232
01:37:28,586 --> 01:37:30,826
will be either delivered to you


3233
01:37:30,826 --> 01:37:32,696
in the AR session delegate or


3234
01:37:32,696 --> 01:37:33,806
you can access them as a


3235
01:37:33,806 --> 01:37:35,496
property off of the AR session.


3236
01:37:36,216 --> 01:37:37,276
Each one of those frames


3237
01:37:37,276 --> 01:37:38,606
contains things like a time


3238
01:37:38,606 --> 01:37:40,806
stamp, the captured image, the


3239
01:37:40,806 --> 01:37:43,446
camera direction and position,


3240
01:37:43,906 --> 01:37:45,176
the major planes in the scene,


3241
01:37:45,176 --> 01:37:46,006
and the light probe.


3242
01:37:47,346 --> 01:37:48,166
So now that you've got your


3243
01:37:48,166 --> 01:37:50,206
scene set up, you're ready to


3244
01:37:50,206 --> 01:37:50,536
render.


3245
01:37:51,186 --> 01:37:53,796
And ARKit supports a broad range


3246
01:37:53,796 --> 01:37:54,926
of options for rendering.


3247
01:37:55,966 --> 01:37:59,206
You can use Metal 2, as Jeremy


3248
01:37:59,206 --> 01:38:00,396
just talked about -- that


3249
01:38:00,396 --> 01:38:02,126
incredibly powerful low-level


3250
01:38:02,126 --> 01:38:03,866
engine for accessing the GPU --


3251
01:38:04,336 --> 01:38:05,436
but you might want to use a


3252
01:38:05,436 --> 01:38:06,616
higher-level framework because


3253
01:38:06,616 --> 01:38:07,646
that's what your abstraction


3254
01:38:07,646 --> 01:38:07,926
would like.


3255
01:38:08,656 --> 01:38:11,846
So we've optimized both SceneKit


3256
01:38:11,846 --> 01:38:13,596
and SpriteKit to work with


3257
01:38:13,596 --> 01:38:15,616
ARKit, and it's very efficient.


3258
01:38:16,766 --> 01:38:18,666
In addition, we've been spending


3259
01:38:18,666 --> 01:38:20,166
the last few months partnering


3260
01:38:20,166 --> 01:38:21,936
with the large 3D engine


3261
01:38:21,936 --> 01:38:23,296
providers to make sure that


3262
01:38:23,296 --> 01:38:25,436
their engines were optimized for


3263
01:38:25,516 --> 01:38:25,966
ARKit.


3264
01:38:27,296 --> 01:38:29,046
And I'm really happy to announce


3265
01:38:29,086 --> 01:38:30,796
that Unity is releasing an open


3266
01:38:30,796 --> 01:38:32,876
source plug-in this week that


3267
01:38:32,876 --> 01:38:34,816
works just like ARKit, so it's


3268
01:38:34,816 --> 01:38:36,056
incredibly easy to use.


3269
01:38:36,896 --> 01:38:39,896
In addition, Epic is releasing


3270
01:38:39,896 --> 01:38:42,196
support in the Unreal Engine so


3271
01:38:42,196 --> 01:38:44,296
that, in a developer preview


3272
01:38:44,296 --> 01:38:45,616
today, and they'll be shipping


3273
01:38:45,616 --> 01:38:46,516
it later on this year.


3274
01:38:47,606 --> 01:38:48,626
So that's a little bit of a


3275
01:38:48,626 --> 01:38:51,086
preview, a look at ARKit.


3276
01:38:51,266 --> 01:38:53,086
I'd like to invite Martin


3277
01:38:53,086 --> 01:38:55,286
Sanders from LEGO to the stage


3278
01:38:55,286 --> 01:38:56,986
to give us a little demo of some


3279
01:38:56,986 --> 01:38:57,966
of the fun things they've been


3280
01:38:57,966 --> 01:38:58,436
working on.


3281
01:38:58,726 --> 01:38:59,196
Thank you.


3282
01:39:00,516 --> 01:39:04,166
[ Applause ]


3283
01:39:04,666 --> 01:39:05,216
>> Hi, everybody.


3284
01:39:05,646 --> 01:39:06,436
Great to be here.


3285
01:39:07,146 --> 01:39:09,606
At LEGO, we've been using ARKit


3286
01:39:09,606 --> 01:39:11,256
to develop some fun, exciting


3287
01:39:11,256 --> 01:39:13,506
experiences that can bring your


3288
01:39:13,506 --> 01:39:15,566
LEGO creations to life in


3289
01:39:15,566 --> 01:39:16,616
real-world environments.


3290
01:39:17,516 --> 01:39:18,786
So it all begins with the


3291
01:39:18,786 --> 01:39:20,386
automatic plane detection.


3292
01:39:20,926 --> 01:39:22,526
So as that helicopter moves


3293
01:39:22,526 --> 01:39:24,106
around, it gives us that


3294
01:39:24,106 --> 01:39:25,826
surface, and we know we have


3295
01:39:25,826 --> 01:39:26,866
that surface to start building.


3296
01:39:27,166 --> 01:39:28,786
So let's go ahead and add some


3297
01:39:28,916 --> 01:39:31,846
sets from our recent collection


3298
01:39:32,076 --> 01:39:33,576
and The LEGO Batman Movie.


3299
01:39:34,006 --> 01:39:35,956
So here we have Arkham Asylum,


3300
01:39:36,106 --> 01:39:38,316
and with those realistic shadows


3301
01:39:38,466 --> 01:39:40,286
and that dynamic lighting, it


3302
01:39:40,286 --> 01:39:41,406
really adds that sense of


3303
01:39:41,406 --> 01:39:41,956
realism.


3304
01:39:41,956 --> 01:39:43,786
And on top of that, when we put


3305
01:39:43,786 --> 01:39:45,626
in things like animations and


3306
01:39:45,686 --> 01:39:47,316
effects, it really adds that


3307
01:39:47,406 --> 01:39:48,856
sense of magic and life to them.


3308
01:39:49,586 --> 01:39:51,526
And with size estimation, all of


3309
01:39:51,526 --> 01:39:53,046
the sets that we bring in come


3310
01:39:53,046 --> 01:39:54,616
out one-to-one scale, so we know


3311
01:39:54,616 --> 01:39:55,776
that they're actually matching


3312
01:39:55,776 --> 01:39:56,426
LEGO sets.


3313
01:39:57,656 --> 01:39:58,946
So this is looking like a cool


3314
01:39:58,946 --> 01:40:00,446
Gotham City scene, but it


3315
01:40:00,446 --> 01:40:01,426
definitely feels like


3316
01:40:01,486 --> 01:40:02,636
something's missing, doesn't it?


3317
01:40:03,236 --> 01:40:05,256
So let's go ahead and add the


3318
01:40:05,256 --> 01:40:07,376
one and only LEGO Batmobile.


3319
01:40:08,526 --> 01:40:09,786
And the man himself, the Caped


3320
01:40:09,786 --> 01:40:11,556
Crusader, LEGO Batman, of


3321
01:40:11,556 --> 01:40:11,866
course.


3322
01:40:12,476 --> 01:40:14,326
Now, it's a really cool model to


3323
01:40:14,326 --> 01:40:14,846
check out.


3324
01:40:14,916 --> 01:40:15,866
There's no doubt about it.


3325
01:40:15,916 --> 01:40:17,406
But we can go a little further


3326
01:40:17,406 --> 01:40:17,646
here.


3327
01:40:18,086 --> 01:40:19,956
We can start investigating how


3328
01:40:19,956 --> 01:40:21,546
models are actually constructed


3329
01:40:21,796 --> 01:40:23,696
and made by exploring it in this


3330
01:40:23,756 --> 01:40:23,986
view.


3331
01:40:24,586 --> 01:40:26,176
Now, Batman doesn't look too


3332
01:40:26,176 --> 01:40:27,546
happy about this, so let's put


3333
01:40:27,546 --> 01:40:28,666
that back together for now, I


3334
01:40:28,666 --> 01:40:29,036
think.


3335
01:40:31,166 --> 01:40:33,826
Now, we also have the power to


3336
01:40:33,826 --> 01:40:34,806
scale up our models.


3337
01:40:34,846 --> 01:40:35,966
Now, imagine what it's like when


3338
01:40:35,966 --> 01:40:37,306
you can go inside your LEGO


3339
01:40:37,306 --> 01:40:39,276
creations and explore and view


3340
01:40:39,276 --> 01:40:40,416
them from new perspectives.


3341
01:40:40,416 --> 01:40:42,026
And with the Batmobile at this


3342
01:40:42,106 --> 01:40:44,026
scale, who wouldn't want to go


3343
01:40:44,026 --> 01:40:45,686
inside and check out all the


3344
01:40:45,686 --> 01:40:48,206
cool gadgets and cockpit things


3345
01:40:48,436 --> 01:40:49,236
from there?


3346
01:40:50,316 --> 01:40:51,846
[applause] And maybe even


3347
01:40:51,846 --> 01:40:53,286
involve some friends in there as


3348
01:40:53,366 --> 01:40:53,536
well.


3349
01:40:53,536 --> 01:40:53,896
I don't know.


3350
01:40:53,976 --> 01:40:55,896
Get some selfies.


3351
01:40:55,896 --> 01:40:56,646
It's fun stuff.


3352
01:40:57,536 --> 01:40:59,706
So as our LEGO sets start to


3353
01:40:59,706 --> 01:41:01,596
come to life and animate, we can


3354
01:41:01,596 --> 01:41:03,046
even then take on the role of


3355
01:41:03,046 --> 01:41:04,096
being the moviemaker.


3356
01:41:04,676 --> 01:41:06,536
So imagine now capturing all of


3357
01:41:06,536 --> 01:41:08,076
those scenes and those epic


3358
01:41:08,076 --> 01:41:10,226
shots as we go into [inaudible].


3359
01:41:11,516 --> 01:41:13,886
[ Music ]


3360
01:41:14,386 --> 01:41:14,886
Full time.


3361
01:41:17,116 --> 01:41:19,766
At LEGO, we've been looking into


3362
01:41:19,766 --> 01:41:21,026
augmented reality for quite a


3363
01:41:21,096 --> 01:41:21,646
few years.


3364
01:41:21,646 --> 01:41:22,176
Yeah, yeah.


3365
01:41:22,486 --> 01:41:23,426
Pretty epic shot, right?


3366
01:41:25,456 --> 01:41:25,646
[inaudible] time.


3367
01:41:26,501 --> 01:41:28,501
[ Applause ]


3368
01:41:28,986 --> 01:41:30,456
And we've had plenty of ideas in


3369
01:41:30,456 --> 01:41:31,696
this space for sure, but it's


3370
01:41:31,696 --> 01:41:33,546
only recently with the power and


3371
01:41:33,546 --> 01:41:35,146
ease of ARKit that we can


3372
01:41:35,146 --> 01:41:36,576
finally turn them into reality.


3373
01:41:37,066 --> 01:41:38,676
So later this year, we are


3374
01:41:38,746 --> 01:41:39,546
really looking forward to


3375
01:41:39,546 --> 01:41:40,236
bringing some of those


3376
01:41:40,236 --> 01:41:42,406
experiences to life for you and


3377
01:41:42,406 --> 01:41:44,086
everyone else in the App Store.


3378
01:41:44,466 --> 01:41:45,376
Thank you very much.


3379
01:41:46,516 --> 01:41:51,556
[ Applause ]


3380
01:41:52,056 --> 01:41:52,356
>> All right.


3381
01:41:52,456 --> 01:41:53,346
Thank you.


3382
01:41:53,346 --> 01:41:56,306
That was a great demo.


3383
01:41:56,496 --> 01:41:57,986
OK, so if you would like to get


3384
01:41:57,986 --> 01:41:59,356
more ideas for how you can


3385
01:41:59,356 --> 01:42:01,196
leverage AR in your own apps, I


3386
01:42:01,196 --> 01:42:02,356
recommend that you walk over to


3387
01:42:02,356 --> 01:42:04,006
our Hands On area that is open


3388
01:42:04,006 --> 01:42:05,406
now and will be open until 7:00


3389
01:42:05,406 --> 01:42:06,106
p.m. tonight.


3390
01:42:06,456 --> 01:42:07,536
You'll find many more demos


3391
01:42:07,596 --> 01:42:08,906
there from partners we've been


3392
01:42:08,906 --> 01:42:10,196
working with on AR.


3393
01:42:11,256 --> 01:42:12,276
And that already brings us to


3394
01:42:12,276 --> 01:42:13,226
the end of this session.


3395
01:42:13,586 --> 01:42:14,936
There are a ton of new


3396
01:42:14,936 --> 01:42:16,956
technologies and APIs here that


3397
01:42:16,956 --> 01:42:18,026
you should get your hands on.


3398
01:42:18,026 --> 01:42:20,376
We are enabling entirely new


3399
01:42:20,376 --> 01:42:22,066
types of applications and we're


3400
01:42:22,066 --> 01:42:23,146
providing you with building


3401
01:42:23,146 --> 01:42:24,326
blocks for forward-looking


3402
01:42:24,326 --> 01:42:25,576
technologies like machine


3403
01:42:25,576 --> 01:42:27,076
learning and augmented reality.


3404
01:42:27,526 --> 01:42:28,936
So go take a closer look and see


3405
01:42:28,936 --> 01:42:30,166
how we can leverage these for


3406
01:42:30,166 --> 01:42:31,366
creating even more compelling


3407
01:42:33,506 --> 01:42:33,636
apps.


3408
01:42:33,636 --> 01:42:35,736
Now, downloads for our developer


3409
01:42:35,736 --> 01:42:37,126
previews for all our operating


3410
01:42:37,186 --> 01:42:38,786
systems and developer tools will


3411
01:42:38,786 --> 01:42:40,026
be available from the WWDC


3412
01:42:40,026 --> 01:42:41,746
Attendee Portal this afternoon,


3413
01:42:41,746 --> 01:42:43,146
so you can take a whole, get a


3414
01:42:43,146 --> 01:42:44,456
hold of them right away and


3415
01:42:44,456 --> 01:42:45,576
learn about all the things we


3416
01:42:45,576 --> 01:42:45,916
announced.


3417
01:42:46,786 --> 01:42:47,766
And yes, of course, many


3418
01:42:47,816 --> 01:42:49,006
sessions here at the conference


3419
01:42:49,006 --> 01:42:50,056
that will cover many of these


3420
01:42:50,056 --> 01:42:52,466
topics more deeply, and I also


3421
01:42:52,466 --> 01:42:53,586
recommend that you make good use


3422
01:42:53,586 --> 01:42:55,076
of the many labs we organize.


3423
01:42:55,416 --> 01:42:56,706
You can meet the Apple engineers


3424
01:42:56,706 --> 01:42:57,866
right here on site to answer


3425
01:42:57,866 --> 01:42:58,546
your questions.


3426
01:42:58,766 --> 01:43:00,516
And with that, I hope you have a


3427
01:43:00,516 --> 01:43:01,546
great conference, and I'll see


3428
01:43:01,546 --> 01:43:02,256
you around this week.


3429
01:43:03,516 --> 01:43:06,500
[ Applause ]

