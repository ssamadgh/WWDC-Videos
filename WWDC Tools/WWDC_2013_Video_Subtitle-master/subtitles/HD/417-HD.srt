1
00:00:00,506 --> 00:00:10,156
[ Silence ]


2
00:00:10,656 --> 00:00:16,556
>> Sal Soghoian: Welcome to
WWDC and especially welcome


3
00:00:16,556 --> 00:00:19,836
to the first session
on automation today.


4
00:00:20,066 --> 00:00:20,806
We have two.


5
00:00:20,806 --> 00:00:25,486
This one's an overview of
all the new different things


6
00:00:25,486 --> 00:00:28,296
in automation, and there's
a lot to talk about today.


7
00:00:29,206 --> 00:00:33,726
I'll be joined in this
presentation by Chris Nebel.


8
00:00:33,726 --> 00:00:38,306
He's the Senior Automation
Engineer and, when he comes back


9
00:00:38,306 --> 00:00:40,296
from being wired up,
he'll stand over here


10
00:00:40,296 --> 00:00:42,096
and do some of the demos.


11
00:00:42,416 --> 00:00:45,436
But, like I said, we
have a lot to talk about.


12
00:00:45,986 --> 00:00:48,316
There's been a lot of
work and a lot of changes,


13
00:00:48,316 --> 00:00:50,376
and I think you're going to
enjoy some of these things.


14
00:00:50,376 --> 00:00:51,206
So let's begin.


15
00:00:54,076 --> 00:00:56,676
So what's new in the
world of automation?


16
00:00:56,956 --> 00:01:00,636
Well, without actually just
bullet pointing the whole list,


17
00:01:01,196 --> 00:01:05,465
we're going to be talking about
Automator and AppleScript.


18
00:01:06,066 --> 00:01:09,376
Especially we're going to
introduce some new features.


19
00:01:09,716 --> 00:01:11,086
They're very powerful.


20
00:01:11,086 --> 00:01:12,426
Some of them are
pretty dramatic.


21
00:01:12,426 --> 00:01:14,616
I think you're going to find


22
00:01:14,756 --> 00:01:18,126
that they become your
favorite things to work with.


23
00:01:19,456 --> 00:01:23,806
And we're going to look at
multiple computer file access.


24
00:01:24,786 --> 00:01:29,306
We'll be looking at some
security transparency issues,


25
00:01:29,886 --> 00:01:35,056
some new OS X integration
that we've created,


26
00:01:35,056 --> 00:01:38,186
and getting your
computer to pay attention


27
00:01:38,186 --> 00:01:39,886
to what you want
it to do for you.


28
00:01:40,766 --> 00:01:43,906
So those are my mystery
topics here, and we'll begin


29
00:01:43,906 --> 00:01:48,296
with the simplest
multicomputer file integration


30
00:01:48,296 --> 00:01:50,466
which is iCloud support,


31
00:01:51,206 --> 00:01:53,236
specifically documents
in the Cloud.


32
00:01:53,896 --> 00:01:56,366
Now, you're all familiar
with how this works.


33
00:01:56,366 --> 00:01:58,676
You can create a
document on one computer.


34
00:01:58,676 --> 00:02:02,376
You store it in the Cloud, and
it automatically gets pushed


35
00:02:02,756 --> 00:02:06,386
to another computer using
your same iCloud account.


36
00:02:07,186 --> 00:02:10,116
Now, through the magic of
automation and iCloud support,


37
00:02:10,406 --> 00:02:16,406
we've incorporated this into the
AppleScript Editor, and it works


38
00:02:16,546 --> 00:02:18,526
in the same way that
you're used to working


39
00:02:18,526 --> 00:02:19,906
with other applications


40
00:02:19,906 --> 00:02:22,136
that have document
in the Cloud support.


41
00:02:22,136 --> 00:02:25,476
You can drag your favorite
scripts and applets right


42
00:02:25,476 --> 00:02:28,256
into the iCloud window.


43
00:02:28,506 --> 00:02:31,576
They'll automatically load
and go up to the server.


44
00:02:31,766 --> 00:02:36,596
And then you can search based
upon tags that you've applied:


45
00:02:37,106 --> 00:02:39,676
key words, names,
those kind of things.


46
00:02:40,366 --> 00:02:43,036
And, in addition, you can
use some of the resources


47
00:02:43,166 --> 00:02:48,886
of the iCloud viewer to sort
and organize your scripts


48
00:02:49,226 --> 00:02:53,036
and to be able to use the
shared menu to send them,


49
00:02:53,926 --> 00:02:58,586
share them over iDrop,
AirDrop or iMessage


50
00:02:58,586 --> 00:02:59,516
or something like that.


51
00:02:59,516 --> 00:03:04,456
So here's an AirDrop example
where you're taking something


52
00:03:04,456 --> 00:03:06,616
from your Cloud and
you're sharing it across.


53
00:03:06,976 --> 00:03:07,486
Hello there.


54
00:03:08,026 --> 00:03:12,456
And we've incorporated this,
too, for Automator as well.


55
00:03:13,196 --> 00:03:16,106
So not overly dramatic,
but you know what?


56
00:03:16,206 --> 00:03:20,616
Being a script hoarder like
me, I'm actually starting


57
00:03:20,616 --> 00:03:23,146
to like having one
place that I can go


58
00:03:23,146 --> 00:03:26,776
to where I know I'll
find what I'm looking for


59
00:03:27,026 --> 00:03:28,686
and copy it to the machine.


60
00:03:28,686 --> 00:03:30,226
It's been very, very useful.


61
00:03:30,226 --> 00:03:32,286
I think you're going
to find it useful too;


62
00:03:32,696 --> 00:03:36,536
and you'll soon make
this just part


63
00:03:36,536 --> 00:03:39,736
of your normal everyday
life with the editors.


64
00:03:41,196 --> 00:03:44,906
Next we're going to look at
automation applets and security.


65
00:03:45,706 --> 00:03:48,236
So the other day I get
an email from a friend


66
00:03:48,236 --> 00:03:49,606
of mine, Trudy Anchover.


67
00:03:49,986 --> 00:03:50,796
She's head of the --


68
00:03:50,926 --> 00:03:53,756
she's Director for the
Bay Area Forest Scouts,


69
00:03:54,146 --> 00:03:55,906
and she was at a
conference with me.


70
00:03:55,906 --> 00:03:58,886
She saw me demonstrate
this little photo droplet.


71
00:03:59,446 --> 00:04:01,096
And she asked me in
an email, you know,


72
00:04:01,096 --> 00:04:02,806
Can you share that with me?


73
00:04:02,806 --> 00:04:04,086
It would really help me out.


74
00:04:04,316 --> 00:04:06,106
So I didn't think
twice about it.


75
00:04:06,106 --> 00:04:09,406
I just, you know, instantly
replied in an email message


76
00:04:09,406 --> 00:04:11,306
to her, addressed
the email message.


77
00:04:11,726 --> 00:04:14,176
I found the droplet, added it


78
00:04:14,176 --> 00:04:16,065
to the email message,
and sent it to her.


79
00:04:16,065 --> 00:04:18,406
I didn't think twice about this.


80
00:04:19,016 --> 00:04:20,565
And then I send it to Trudy.


81
00:04:20,896 --> 00:04:26,786
So when Trudy gets it on her
machine, she takes the droplet


82
00:04:26,786 --> 00:04:29,126
from mail, drags
it to the desktop,


83
00:04:29,436 --> 00:04:31,586
and is ready to use the droplet.


84
00:04:31,586 --> 00:04:34,646
She selects an image and drags
it on top of the droplet.


85
00:04:35,236 --> 00:04:37,116
And, instead of getting
processing,


86
00:04:37,116 --> 00:04:41,386
she gets this dialog saying
that this droplet can't be run


87
00:04:41,386 --> 00:04:44,186
because it's from an
unidentified developer


88
00:04:44,516 --> 00:04:47,576
and that her settings
for security are set


89
00:04:47,576 --> 00:04:53,396
to only use apple --
applets from the Apple Store


90
00:04:53,396 --> 00:04:55,436
or from known developers.


91
00:04:55,946 --> 00:04:59,026
Now, that's because,
in the Security


92
00:04:59,026 --> 00:05:04,166
and Privacy Control Panel, she's
using a default setting which is


93
00:05:04,166 --> 00:05:07,036
for Mac App Store and
identified developers.


94
00:05:07,486 --> 00:05:10,686
Trudy's not a particularly
sophisticated user,


95
00:05:10,686 --> 00:05:13,356
and so she doesn't know how
to bypass this or anything.


96
00:05:13,636 --> 00:05:16,046
It just -- to her,
it's just broken.


97
00:05:16,426 --> 00:05:20,546
And it's really my fault because
I forgot a very important thing


98
00:05:20,796 --> 00:05:24,196
is that Automator and
AppleScript droplets


99
00:05:24,196 --> 00:05:26,806
and applets are applications.


100
00:05:26,996 --> 00:05:30,016
And, because they are
applications, they're subject


101
00:05:30,016 --> 00:05:32,406
to the same level
of security scrutiny


102
00:05:32,406 --> 00:05:35,216
as any other application
on the OS.


103
00:05:35,876 --> 00:05:38,526
So, in order for them
to function correctly,


104
00:05:38,736 --> 00:05:43,556
they really do need to be signed
to be Gatekeeper approved.


105
00:05:44,576 --> 00:05:47,386
And you can try doing
that with the Terminal


106
00:05:47,386 --> 00:05:49,916
and some magic commands,
if you like;


107
00:05:50,326 --> 00:05:54,646
but now in Mavericks we are
introducing code signing support


108
00:05:54,646 --> 00:05:56,696
built into our editing apps.


109
00:05:58,516 --> 00:06:01,546
[ Applause ]


110
00:06:02,046 --> 00:06:02,726
Yeah. Really nice.


111
00:06:03,136 --> 00:06:06,766
And it requires that you have,
you know, your developer ID,


112
00:06:06,926 --> 00:06:11,396
which you do, and that you
have the Xcode installed


113
00:06:11,396 --> 00:06:12,956
with the command line tools.


114
00:06:12,956 --> 00:06:16,146
And, since we're
all developers here,


115
00:06:16,146 --> 00:06:17,776
you're used to this concept


116
00:06:18,076 --> 00:06:21,296
because you've been preparing
your apps for the Store anyway.


117
00:06:21,296 --> 00:06:24,076
So you're used to
sending out signed copies.


118
00:06:24,396 --> 00:06:26,846
And you already have
your developer ID


119
00:06:26,846 --> 00:06:29,496
and certificates
installed into the keychain.


120
00:06:30,286 --> 00:06:33,586
So, once you do, then you
can use this new feature.


121
00:06:33,586 --> 00:06:35,466
And let me show you
what it looks like.


122
00:06:35,946 --> 00:06:37,666
Here, in the AppleScript Editor,


123
00:06:38,196 --> 00:06:40,836
I'm going to export
the droplet for Trudy.


124
00:06:41,266 --> 00:06:44,746
And so I go to the File
menu and choose Export.


125
00:06:48,436 --> 00:06:51,156
And when I do, I get
the dropdown sheet.


126
00:06:51,486 --> 00:06:56,416
You'll notice that there's a
new pop-up menu at the bottom


127
00:06:56,416 --> 00:07:00,256
of the Save sheet and
it says code sign.


128
00:07:00,926 --> 00:07:03,296
It's for code signing
and, by default,


129
00:07:03,296 --> 00:07:05,666
it's set to don't code sign.


130
00:07:06,136 --> 00:07:08,766
But if you do click
that pop-up menu,


131
00:07:09,016 --> 00:07:12,006
all of your developer
identities that are installed


132
00:07:12,006 --> 00:07:14,426
on that computer will
appear in this list.


133
00:07:14,946 --> 00:07:16,796
It's just simply a
matter at that point


134
00:07:16,796 --> 00:07:19,076
of choosing the identity
that you want


135
00:07:20,176 --> 00:07:23,646
and then clicking the Save
button, and it will save a copy


136
00:07:23,646 --> 00:07:28,666
of that droplet or applet
signed ready to deliver.


137
00:07:28,836 --> 00:07:31,376
So, if I had done this for
Trudy, she wouldn't have had any


138
00:07:31,376 --> 00:07:33,876
of the problems that
she came across.


139
00:07:35,106 --> 00:07:38,186
For Automator, it's
a similar process.


140
00:07:38,186 --> 00:07:41,916
So here I have a workflow
open in Automator.


141
00:07:41,916 --> 00:07:45,526
This is one I use for
video editing quite a bit


142
00:07:46,106 --> 00:07:50,256
and creating a compressed
video version from raw source.


143
00:07:50,776 --> 00:07:53,616
And so, to do the same export,


144
00:07:53,616 --> 00:07:56,666
I just go to the File
menu, choose Export.


145
00:07:57,506 --> 00:08:00,076
I get the Save sheet
in Automator.


146
00:08:00,466 --> 00:08:01,836
And at the bottom
of the Save sheet


147
00:08:01,836 --> 00:08:06,256
in Automator is also a
code sign pop-up menu.


148
00:08:06,406 --> 00:08:10,126
Again, I can select from that
menu the developer identity


149
00:08:10,126 --> 00:08:14,146
that I'm looking for, pick
that, and then just click Save.


150
00:08:15,696 --> 00:08:19,196
The applet will be saved
to wherever I indicated,


151
00:08:19,196 --> 00:08:21,616
and it's signed and
ready to be distributed.


152
00:08:22,066 --> 00:08:24,196
It's really that
easy to use these.


153
00:08:24,526 --> 00:08:28,256
And, to show you that, I'm going
to turn to my friend Chris Nebel


154
00:08:28,706 --> 00:08:30,516
and have Chris demonstrate.


155
00:08:31,216 --> 00:08:32,456
Thank you.


156
00:08:33,515 --> 00:08:36,546
[ Applause ]


157
00:08:37,046 --> 00:08:37,566
>> Chris Nebel: Thank you, Sal.


158
00:08:38,616 --> 00:08:40,916
So let's take a look at how
Maverick makes it easier


159
00:08:40,916 --> 00:08:44,786
to code sign your workflows,
applets, applications


160
00:08:45,126 --> 00:08:47,036
so you can distribute
them to other users.


161
00:08:49,066 --> 00:08:52,366
So I've got an applet
I've been working on here.


162
00:08:52,366 --> 00:08:53,896
Notice getting this
out of iCloud.


163
00:08:54,586 --> 00:08:57,496
It's working on another machine.


164
00:08:58,116 --> 00:09:00,206
And I worked long and
hard on this applet.


165
00:09:00,206 --> 00:09:01,026
I'm very proud of it.


166
00:09:01,196 --> 00:09:04,736
I'm ready to send
it out to the world.


167
00:09:04,736 --> 00:09:07,916
And, historically, what I
would do is I'd just, you know,


168
00:09:08,056 --> 00:09:10,486
stick this in an email
message, send it off,


169
00:09:10,486 --> 00:09:12,316
and the other person
would grab it from there.


170
00:09:12,686 --> 00:09:15,226
So I have an applet
that simulates uploading


171
00:09:15,226 --> 00:09:18,326
and downloading it, so it will
pop up in the Downloads folder.


172
00:09:18,916 --> 00:09:28,256
And, if I open this now, I get
this dialog, and it's saying


173
00:09:28,256 --> 00:09:29,776
that it can't open
this because it's


174
00:09:29,776 --> 00:09:30,956
from an unidentified developer.


175
00:09:30,956 --> 00:09:34,096
This is the default Gatekeeper
policy on everyone's system.


176
00:09:34,476 --> 00:09:38,046
And OK here doesn't mean
"okay, go ahead and run it".


177
00:09:38,046 --> 00:09:39,706
It means "okay, we're done".


178
00:09:39,706 --> 00:09:40,936
There's nothing to do here.


179
00:09:40,936 --> 00:09:42,396
This applet simply won't run.


180
00:09:43,436 --> 00:09:45,286
And there is a workaround.


181
00:09:45,436 --> 00:09:47,996
You can Control click on the
applet, open the long way


182
00:09:47,996 --> 00:09:49,276
and you'll get a
different dialog.


183
00:09:49,276 --> 00:09:50,576
But, for most users, as far


184
00:09:50,576 --> 00:09:52,716
as they're concerned,
it's busted, right?


185
00:09:52,716 --> 00:09:58,076
All they can really do
is throw it in the trash.


186
00:09:58,076 --> 00:10:01,346
So how do I -- how do I make
life easier on my users here


187
00:10:01,756 --> 00:10:03,926
and not have them think
I'm a complete idiot


188
00:10:04,466 --> 00:10:05,876
for sending them broken applets?


189
00:10:05,966 --> 00:10:09,676
So, in Mountain Lion, we
added an Export command


190
00:10:09,676 --> 00:10:10,446
to Script Editor.


191
00:10:10,446 --> 00:10:11,486
The whole point of Export is


192
00:10:11,486 --> 00:10:13,376
to save the script
for distribution.


193
00:10:13,806 --> 00:10:16,306
In Mountain Lion, the main thing
that it did was it allows you


194
00:10:16,306 --> 00:10:19,806
to save the script as run only,
taking that out of the Save


195
00:10:19,806 --> 00:10:24,236
As dialog because who here has
accidentally saved a run-only


196
00:10:24,236 --> 00:10:26,506
copy of their script
over their real one?


197
00:10:27,836 --> 00:10:29,016
Uh-huh. I thought so.


198
00:10:29,116 --> 00:10:32,746
So Export makes that
a little harder to do.


199
00:10:33,246 --> 00:10:38,766
And now, in Mavericks,
here's run only


200
00:10:38,766 --> 00:10:40,666
but here also is code sign.


201
00:10:41,906 --> 00:10:44,666
So last year we showed you
how to do this in Terminal,


202
00:10:44,666 --> 00:10:45,766
but now it's built right


203
00:10:45,766 --> 00:10:48,346
into Script Editor
and into Automator.


204
00:10:49,066 --> 00:10:51,416
And so, if I pick my --
my developer ID here,


205
00:10:52,206 --> 00:10:55,126
I will save that to the desktop.


206
00:10:58,006 --> 00:10:59,286
Yes, I want to allow this.


207
00:11:00,596 --> 00:11:02,066
So now I have my
code-signed version.


208
00:11:03,206 --> 00:11:07,366
If I up and download
that and run it,


209
00:11:08,066 --> 00:11:09,086
now I get a different dialog.


210
00:11:09,086 --> 00:11:11,476
It says this is downloaded
from the Internet.


211
00:11:11,666 --> 00:11:14,126
Gatekeeper is still not too
sure about this Internet thing.


212
00:11:14,336 --> 00:11:16,306
Kind of new.


213
00:11:16,356 --> 00:11:18,996
But now it's Cancel
and it's Open.


214
00:11:19,366 --> 00:11:24,086
So, if I open, it goes
ahead and run -- and runs.


215
00:11:25,516 --> 00:11:27,836
[ Applause ]


216
00:11:28,336 --> 00:11:31,186
So that is how -- so code
signing will make your


217
00:11:31,186 --> 00:11:31,846
life easier.


218
00:11:31,846 --> 00:11:34,546
Mavericks makes your life
easier code signing your applets


219
00:11:34,546 --> 00:11:35,456
because it's now built right


220
00:11:35,456 --> 00:11:36,786
into the editor you're
already using.


221
00:11:37,206 --> 00:11:40,386
And it makes life easier on your
user because they don't have


222
00:11:40,446 --> 00:11:43,646
to worry about long
hand waves of dealing


223
00:11:43,646 --> 00:11:44,896
with nonsigned applets.


224
00:11:45,476 --> 00:11:47,036
Sal, back to you.


225
00:11:47,736 --> 00:11:48,626
>> Sal Soghoian: Thank you.


226
00:11:49,096 --> 00:11:51,356
So it works with Automator


227
00:11:51,356 --> 00:11:53,626
and AppleScript applets
and droplets.


228
00:11:53,906 --> 00:11:55,096
They're applications.


229
00:11:55,376 --> 00:11:57,196
You have to remember
that, if you're going


230
00:11:57,196 --> 00:12:00,106
to distribute them now that
we have Gatekeeper, it --


231
00:12:00,106 --> 00:12:02,196
its default settings,
you might want


232
00:12:02,196 --> 00:12:03,946
to just quickly do an export.


233
00:12:04,146 --> 00:12:06,356
Code signing will even
save it as run only


234
00:12:06,356 --> 00:12:07,576
if you like to as well.


235
00:12:07,756 --> 00:12:09,456
And this has all
been integrated.


236
00:12:09,656 --> 00:12:11,866
You can see it's a
very simple process.


237
00:12:12,596 --> 00:12:14,036
Take advantage of it.


238
00:12:14,486 --> 00:12:16,556
Next we're going to talk


239
00:12:16,556 --> 00:12:19,356
about extending the
power of AppleScript.


240
00:12:20,336 --> 00:12:24,266
And we're going to be doing that
with something that's brand new,


241
00:12:24,476 --> 00:12:27,876
and it's called AppleScript
libraries.


242
00:12:30,486 --> 00:12:32,566
Now, why libraries?


243
00:12:33,066 --> 00:12:36,066
Well, I assume that
many of you are like me.


244
00:12:36,866 --> 00:12:41,656
You're the kind of person
has hundreds and hundreds


245
00:12:42,336 --> 00:12:47,226
of your favorite routines that
you've written over and over


246
00:12:47,226 --> 00:12:50,906
and over for lots of different
situations and scenarios,


247
00:12:51,516 --> 00:12:54,926
and you want to be able to
use those in multiple scripts.


248
00:12:54,926 --> 00:12:58,616
So I have four or five things if
I have a script that's dealing


249
00:12:58,616 --> 00:13:00,716
with text I'm going
to be pasting these


250
00:13:00,716 --> 00:13:03,056
in the bottom part of my script.


251
00:13:04,066 --> 00:13:07,526
Now, if you also are the
type of person that relies


252
00:13:07,526 --> 00:13:09,586
on third-party scripting
additions


253
00:13:09,586 --> 00:13:13,956
to provide a missing command
like especially something


254
00:13:13,956 --> 00:13:17,596
with text handling, you're
going to like libraries.


255
00:13:18,236 --> 00:13:21,936
And if you just want to
simplify your scripts,


256
00:13:22,416 --> 00:13:24,276
you're going to like libraries.


257
00:13:25,286 --> 00:13:29,336
Now, it started for me by having
a routine that I like to use,


258
00:13:29,336 --> 00:13:33,496
and then I started using
it in multiple scripts.


259
00:13:34,156 --> 00:13:36,186
And it was quite useful.


260
00:13:36,186 --> 00:13:38,796
I would just copy this
thing from, like a clipping.


261
00:13:38,796 --> 00:13:39,906
I would paste in.


262
00:13:40,236 --> 00:13:42,436
Then I found another
routine that I used,


263
00:13:42,436 --> 00:13:45,826
and then I would paste that into
some of the scripts that I had.


264
00:13:46,216 --> 00:13:48,806
But then I started changing
some of the routines


265
00:13:48,806 --> 00:13:51,836
and then I added new ones and
then it just became this thing


266
00:13:51,836 --> 00:13:56,186
of I couldn't keep track of all
the different stuff that I had.


267
00:13:57,036 --> 00:14:01,366
So new in Mavericks we're
introducing AppleScript


268
00:14:01,366 --> 00:14:04,306
libraries that will
help address this issue.


269
00:14:04,906 --> 00:14:08,016
And what they are is a
new plug-in architecture


270
00:14:08,016 --> 00:14:13,276
for AppleScript that allows you
to create your own libraries


271
00:14:13,726 --> 00:14:19,716
of commands and gives you
quick and easy access to them


272
00:14:19,716 --> 00:14:21,766
without having to go
through a bunch of --


273
00:14:22,296 --> 00:14:24,636
of hoo-ha to get
to your handlers.


274
00:14:25,276 --> 00:14:26,906
Now, they're different


275
00:14:26,906 --> 00:14:29,326
than scripting editions
in a couple ways.


276
00:14:29,436 --> 00:14:31,796
First of all, you can
write them in AppleScript.


277
00:14:32,276 --> 00:14:34,946
You don't have to write
these in C or C++.


278
00:14:34,946 --> 00:14:36,476
You can write them
in AppleScript.


279
00:14:37,126 --> 00:14:42,066
And they're controlled by the
script that's calling them,


280
00:14:42,396 --> 00:14:45,726
so that manages your
script libraries.


281
00:14:46,196 --> 00:14:49,076
It means that the
library is only loaded


282
00:14:49,076 --> 00:14:52,616
and it's only available when
your script tells it to load.


283
00:14:52,666 --> 00:14:55,966
And it helps avoid
terminology conflicts that way.


284
00:14:56,226 --> 00:14:58,206
It helps deal with resources.


285
00:14:58,496 --> 00:15:00,936
And the script library
commands are run


286
00:15:00,936 --> 00:15:03,656
by the process that's
executing the script.


287
00:15:04,386 --> 00:15:08,006
So it's a lot smoother
to deal with.


288
00:15:08,516 --> 00:15:11,366
In addition, these
libraries can take advantage


289
00:15:11,366 --> 00:15:15,586
of AppleScript Objective-C,
so the wealth


290
00:15:15,586 --> 00:15:20,006
of the Cocoa frameworks
and all of those classes


291
00:15:20,006 --> 00:15:24,336
and methods now come into
play in the libraries


292
00:15:24,336 --> 00:15:25,686
that you write yourself.


293
00:15:25,686 --> 00:15:29,496
You can use some AppleScript
Objective-C and talk


294
00:15:29,576 --> 00:15:34,546
to the NS string class and use
some of its methods as well.


295
00:15:35,656 --> 00:15:40,876
In addition, your libraries can
contain their own terminology.


296
00:15:41,006 --> 00:15:43,786
They can publish
their own terminology.


297
00:15:44,656 --> 00:15:47,746
So you can make custom terms


298
00:15:47,746 --> 00:15:51,026
that represent the
complex handlers


299
00:15:51,026 --> 00:15:52,846
that are parts of your library.


300
00:15:53,316 --> 00:15:54,936
Yes. It's really, really nice.


301
00:15:54,936 --> 00:15:58,366
So, instead of remembering a
handler name, I can just put


302
00:15:58,366 --> 00:16:01,086
in some terminology and
it will work perfectly.


303
00:16:02,006 --> 00:16:05,536
Now, in support of that, we've
created two new constructs.


304
00:16:06,036 --> 00:16:07,156
The first is something


305
00:16:07,156 --> 00:16:09,926
that we're calling a
script library reference.


306
00:16:10,056 --> 00:16:13,226
And what it does is it
does a couple of functions.


307
00:16:13,226 --> 00:16:16,756
It locates the script
library for you automatically


308
00:16:17,166 --> 00:16:20,166
and prepares it for loading
and use in your script.


309
00:16:20,856 --> 00:16:23,116
The second is something
brand new.


310
00:16:23,116 --> 00:16:27,316
It's called a use clause,
and it is really a command


311
00:16:27,316 --> 00:16:29,266
for importing terminology


312
00:16:29,466 --> 00:16:32,476
and making it globally
available in your script.


313
00:16:33,236 --> 00:16:34,266
Very powerful.


314
00:16:34,566 --> 00:16:36,096
A lot of fun to use.


315
00:16:36,366 --> 00:16:37,596
Let's take a look at this.


316
00:16:38,356 --> 00:16:43,486
So, in its simplest
form, simplest form,


317
00:16:43,486 --> 00:16:48,646
an AppleScript library can
just be in AppleScript routine


318
00:16:48,936 --> 00:16:51,746
that you have like this
simple routine here


319
00:16:51,746 --> 00:16:55,086
for converting the
case of some text


320
00:16:55,086 --> 00:16:56,966
from uppercase to lowercase.


321
00:16:57,466 --> 00:17:01,126
You can have this very
simple AppleScript handler


322
00:17:01,126 --> 00:17:02,146
that you've created.


323
00:17:02,676 --> 00:17:06,006
You take that, you
place it into a script.


324
00:17:07,185 --> 00:17:08,796
Then you compile it.


325
00:17:09,925 --> 00:17:11,165
You save it.


326
00:17:11,266 --> 00:17:13,886
And, in this case, you just
save it as a script file.


327
00:17:15,455 --> 00:17:18,965
Next, in your home
library folder,


328
00:17:19,705 --> 00:17:23,096
you create a new folder
called script libraries


329
00:17:23,955 --> 00:17:25,906
and then drag your script file,


330
00:17:26,306 --> 00:17:29,206
your new script library,
into that folder.


331
00:17:30,446 --> 00:17:33,216
Now you've installed it
into the script library,


332
00:17:33,216 --> 00:17:34,756
AppleScript library system.


333
00:17:35,016 --> 00:17:36,046
That's all you have to do.


334
00:17:36,046 --> 00:17:42,126
So, to use it, it's just a
matter of typing the word


335
00:17:42,126 --> 00:17:46,156
"script" followed by the
name of your library.


336
00:17:46,496 --> 00:17:49,526
And you don't have to
use .scbt or anything,


337
00:17:49,736 --> 00:17:51,486
just the name of your library.


338
00:17:52,526 --> 00:17:54,636
And, when you compile this,


339
00:17:54,826 --> 00:17:58,376
it becomes a script
library identifier.


340
00:17:58,716 --> 00:18:04,936
That is now a representation
of your script library.


341
00:18:05,556 --> 00:18:08,926
The AppleScript architecture
automatically located it


342
00:18:08,926 --> 00:18:10,926
in the script libraries folder.


343
00:18:10,926 --> 00:18:13,006
It's prepared it,
ready for load.


344
00:18:13,246 --> 00:18:16,106
And now that it's an identifier,


345
00:18:16,646 --> 00:18:21,346
you can target it using a
tell verb or a tell block


346
00:18:21,346 --> 00:18:24,626
like this example where
I will be calling one


347
00:18:24,626 --> 00:18:26,946
of the subroutines or
one of the handlers


348
00:18:26,946 --> 00:18:30,876
within that library
script, pass it some text --


349
00:18:30,876 --> 00:18:34,916
how now brown cow -- and
use a numeric indicator


350
00:18:34,916 --> 00:18:36,946
to indicate I want uppercase.


351
00:18:37,456 --> 00:18:40,836
So when this gets run,
the library is loaded,


352
00:18:40,836 --> 00:18:42,736
the information is passed,


353
00:18:43,056 --> 00:18:45,576
and the results come back
to you automatically.


354
00:18:46,886 --> 00:18:50,276
Very simple way to
make a library.


355
00:18:50,276 --> 00:18:52,896
Just very functional
but easy to do,


356
00:18:52,896 --> 00:18:55,586
easy to install,
and easy to use.


357
00:18:56,586 --> 00:18:59,706
Now, in its more advanced forms,


358
00:19:00,036 --> 00:19:03,426
a library can have
its own terminology.


359
00:19:03,576 --> 00:19:06,026
And here is the dictionary
window


360
00:19:06,466 --> 00:19:08,936
for an AppleScript library.


361
00:19:09,486 --> 00:19:13,746
It has a single suite, and the
suite is called AppleScript


362
00:19:13,806 --> 00:19:15,006
Text Utilities.


363
00:19:15,416 --> 00:19:20,626
This suite has two commands
in it: one for changing,


364
00:19:20,626 --> 00:19:23,256
transforming text; one
for replacing text.


365
00:19:23,786 --> 00:19:27,866
It has a definition for the
suite and shows the definition


366
00:19:27,866 --> 00:19:30,966
for each one of the
individual commands.


367
00:19:31,606 --> 00:19:34,366
So in an advanced
form of a library,


368
00:19:34,626 --> 00:19:39,426
you can have this
terminology available for you


369
00:19:39,426 --> 00:19:42,906
and for your customers and
for everybody else to use.


370
00:19:43,656 --> 00:19:48,656
So no longer are you calling
a handler name or having


371
00:19:48,656 --> 00:19:50,146
to remember a handler name.


372
00:19:50,486 --> 00:19:55,026
Instead, you can now use
terminology like transform text,


373
00:19:55,246 --> 00:19:58,126
how now brown cow to uppercase.


374
00:19:58,736 --> 00:20:02,016
And this will function
exactly the same way


375
00:20:02,266 --> 00:20:04,156
as a library did before.


376
00:20:04,826 --> 00:20:07,126
Now, that's in the
more advanced format.


377
00:20:07,926 --> 00:20:12,056
So here's an example
script talking


378
00:20:12,056 --> 00:20:14,016
to the Finder application,


379
00:20:14,326 --> 00:20:18,306
and this contains a
tell block addressing an


380
00:20:18,306 --> 00:20:19,956
AppleScript library.


381
00:20:20,586 --> 00:20:22,176
You can see it right
there where it's going


382
00:20:22,176 --> 00:20:28,316
to basically take the name
of some selected folders


383
00:20:28,316 --> 00:20:30,816
in the Finder, and it's
going to iterate all


384
00:20:30,816 --> 00:20:33,716
of these folders getting
their lowercase names


385
00:20:33,716 --> 00:20:35,756
and converting them
to uppercase names.


386
00:20:36,166 --> 00:20:38,506
So that's the purpose
of the script.


387
00:20:39,326 --> 00:20:44,926
Now, you'll notice that, by
having an individual tell block


388
00:20:44,926 --> 00:20:48,666
for every time I want to talk to
this library, in a small script


389
00:20:48,666 --> 00:20:51,416
like that, I can
get away with it.


390
00:20:51,416 --> 00:20:55,516
But, in a larger script where
you repeatedly might go back


391
00:20:55,516 --> 00:20:57,006
and refer to this library,


392
00:20:57,186 --> 00:20:59,046
that's a little clunky
to deal with.


393
00:20:59,926 --> 00:21:03,496
In addition, there's
another issue going on here.


394
00:21:03,566 --> 00:21:06,386
You'll notice that there
is a variable called


395
00:21:06,386 --> 00:21:08,636
"adjusted name" that's
actually going


396
00:21:08,636 --> 00:21:13,206
to store the transformation
result, hold it for a second


397
00:21:13,206 --> 00:21:17,886
because it was within a tell
block, and then use it later


398
00:21:17,886 --> 00:21:21,686
on in the script for the
Finder to assign the name


399
00:21:21,686 --> 00:21:25,416
of the selected item to
that transformed name.


400
00:21:25,416 --> 00:21:27,566
So you're doing this
little dance


401
00:21:27,566 --> 00:21:29,006
because of this tell block.


402
00:21:29,526 --> 00:21:31,936
And, again, this makes
it a little clunkier.


403
00:21:32,146 --> 00:21:36,396
It works, but it's
not smooth syntax.


404
00:21:36,896 --> 00:21:40,256
So we've come up with
something to address this issue.


405
00:21:40,946 --> 00:21:43,256
And I'm just going to make
a little room at the top


406
00:21:43,256 --> 00:21:46,246
of the script, and were going
to insert something new.


407
00:21:46,426 --> 00:21:48,596
It's called a use clause.


408
00:21:49,266 --> 00:21:52,646
And this use clause is
an importing command


409
00:21:53,236 --> 00:21:56,466
that says "Use this library."


410
00:21:56,466 --> 00:21:58,766
There's a script
library identifier.


411
00:21:59,116 --> 00:22:03,136
And that means it will take it,
load it, and make its resources


412
00:22:03,136 --> 00:22:06,856
and handlers available
for the script globally.


413
00:22:07,326 --> 00:22:10,876
So, because I have a use
clause here, I don't need


414
00:22:10,876 --> 00:22:16,066
to have the tell block around my
statement that calls my library.


415
00:22:16,066 --> 00:22:17,206
I can remove that.


416
00:22:17,796 --> 00:22:21,336
And I can also deal with
that little back and forth


417
00:22:21,336 --> 00:22:24,786
about having you create a
variable to store the contents


418
00:22:24,786 --> 00:22:28,546
of the command and then reapply
it and instead put everything


419
00:22:28,546 --> 00:22:32,386
on one line so that the
Finder can say "Set the name


420
00:22:32,386 --> 00:22:36,166
of the selected file to the
results of this transformation."


421
00:22:36,576 --> 00:22:40,666
And then it just becomes one
seamless, transparent line.


422
00:22:41,546 --> 00:22:45,666
So we can go from
this little clunkiness


423
00:22:46,016 --> 00:22:51,496
to a very smooth example with
this new use clause ability.


424
00:22:51,956 --> 00:22:55,306
And it works the same
way as anything else.


425
00:22:55,616 --> 00:22:57,186
It works totally smooth.


426
00:22:57,186 --> 00:22:58,276
It's transparent.


427
00:22:59,246 --> 00:23:02,166
Now, let's talk about the
use clause for just a second.


428
00:23:02,586 --> 00:23:06,256
It's about importing
terminology, and it allows you


429
00:23:06,306 --> 00:23:08,186
to import the terminology


430
00:23:08,186 --> 00:23:11,606
of script libraries
and applications.


431
00:23:12,496 --> 00:23:14,996
So the importing commands,


432
00:23:14,996 --> 00:23:18,956
when you import an
applications terminology


433
00:23:18,956 --> 00:23:20,696
or a script libraries
terminology,


434
00:23:21,066 --> 00:23:23,636
they are available
globally through the script.


435
00:23:23,636 --> 00:23:25,366
You no longer have to address


436
00:23:25,366 --> 00:23:27,276
that application
or that library.


437
00:23:27,526 --> 00:23:28,856
It's not necessary.


438
00:23:29,716 --> 00:23:36,536
And you can also use this use
-- use clause to specify the use


439
00:23:36,576 --> 00:23:39,176
of a particular version
of AppleScript


440
00:23:39,456 --> 00:23:41,756
or a particular version
of an application


441
00:23:41,756 --> 00:23:45,466
or even a particular
version of a script library.


442
00:23:45,886 --> 00:23:48,086
And it sure does make --


443
00:23:48,086 --> 00:23:51,186
streamline the script
syntax that you have.


444
00:23:51,366 --> 00:23:55,816
It makes things easier to
see, conceive, and use.


445
00:23:56,496 --> 00:24:00,636
So here to show you the
use clause is my friend,


446
00:24:00,636 --> 00:24:01,246
Chris Nebel.


447
00:24:02,216 --> 00:24:02,536
>> Chris Nebel: Okay.


448
00:24:02,856 --> 00:24:05,116
I personally am really
excited about this feature.


449
00:24:05,116 --> 00:24:07,236
This is, like, my favorite
AppleScript feature


450
00:24:07,236 --> 00:24:08,186
in a long time.


451
00:24:08,186 --> 00:24:09,526
It's one of those ones


452
00:24:09,526 --> 00:24:11,806
that makes you wonder why
it didn't always work this


453
00:24:11,806 --> 00:24:12,056
way [laughter].


454
00:24:13,666 --> 00:24:17,666
So let's see how it
affects an actual script.


455
00:24:17,666 --> 00:24:22,686
So I am the team mom --
that's the actual job title --


456
00:24:22,996 --> 00:24:24,566
for my neighborhood soccer team.


457
00:24:24,696 --> 00:24:27,126
Basically, it's handle all
the administrative stuff


458
00:24:27,126 --> 00:24:29,666
so the coach doesn't have to.


459
00:24:29,826 --> 00:24:32,906
And part of the job is
forwarding email around.


460
00:24:33,226 --> 00:24:36,706
Someone -- someone on the
team sends me an email.


461
00:24:36,706 --> 00:24:38,286
I have to send it out to
the rest of the group.


462
00:24:38,746 --> 00:24:40,246
But the rules are
a little tricky.


463
00:24:40,506 --> 00:24:43,046
I want to send it to everyone
else in the group except


464
00:24:43,046 --> 00:24:44,136
for the original sender.


465
00:24:44,136 --> 00:24:46,476
Them, I want to Cc.


466
00:24:46,476 --> 00:24:50,176
And mail can almost
do this but not quite.


467
00:24:50,176 --> 00:24:54,206
If you put an address book or
contacts group in the To field,


468
00:24:54,206 --> 00:24:56,056
it can expand it out
to all the people.


469
00:24:56,386 --> 00:24:58,436
But then it's up to me to
actually find the right person


470
00:24:58,436 --> 00:24:59,836
and pull them over
to the Cc group.


471
00:24:59,836 --> 00:25:02,066
It gets a bit out of -- it
gets a bit messy after a while,


472
00:25:02,066 --> 00:25:03,536
especially when you have
to do ten of these a day.


473
00:25:04,536 --> 00:25:07,306
So -- but, automation, one
of the things it's for is


474
00:25:07,466 --> 00:25:09,956
for filling in the gaps when the
system almost does what you want


475
00:25:10,186 --> 00:25:10,796
but not quite.


476
00:25:10,796 --> 00:25:15,256
So here's the script that I
wrote to handle this for me.


477
00:25:15,836 --> 00:25:19,736
So we tell application mail get
the current selected message;


478
00:25:21,006 --> 00:25:22,066
forward that message.


479
00:25:22,066 --> 00:25:25,776
It creates a new forwarding
message ready to be filled in.


480
00:25:25,976 --> 00:25:28,136
And then we flip
over to Contacts.


481
00:25:28,336 --> 00:25:30,526
I have a group defined
Neighborhood Team so --


482
00:25:30,526 --> 00:25:34,306
with every person in that group,
filled out an email address


483
00:25:34,306 --> 00:25:37,396
for them, and then we flip
back to application mail.


484
00:25:38,716 --> 00:25:43,386
And, if the sender of the
original message contains


485
00:25:43,386 --> 00:25:46,606
that name, then we want to
add them as a Cc recipient;


486
00:25:47,056 --> 00:25:49,076
otherwise, it's a To recipient.


487
00:25:50,746 --> 00:25:52,306
And this works well enough.


488
00:25:52,466 --> 00:25:53,716
Let's see it in action.


489
00:25:54,326 --> 00:25:59,906
And the message was
originally from John.


490
00:25:59,906 --> 00:26:00,816
He's been Cc'd.


491
00:26:00,996 --> 00:26:02,686
Everyone else, it goes "To."


492
00:26:03,296 --> 00:26:07,466
So, obviously, the script works.


493
00:26:07,466 --> 00:26:13,106
But you notice the sort
of back and forth tell --


494
00:26:13,106 --> 00:26:17,206
tell this, tell this, tell
that, tell this, tell that.


495
00:26:17,646 --> 00:26:20,196
And that's very typical of
any script when you're talking


496
00:26:20,196 --> 00:26:21,416
to more than one application.


497
00:26:21,416 --> 00:26:23,246
You have to flip back and
forth between them a lot.


498
00:26:24,446 --> 00:26:27,606
So wouldn't it be nice if the --


499
00:26:27,606 --> 00:26:28,796
if AppleScript could figure


500
00:26:28,796 --> 00:26:31,136
out which application you're
actually talking to just


501
00:26:31,136 --> 00:26:32,436
by the terms that you're using.


502
00:26:32,876 --> 00:26:34,476
Well, that's pretty
much what use does.


503
00:26:34,476 --> 00:26:36,256
Let's look at how
the script changes.


504
00:26:39,076 --> 00:26:42,836
So two use statements
at the top.


505
00:26:43,166 --> 00:26:44,716
The first one is
application mail,


506
00:26:45,056 --> 00:26:47,256
and I'm also defining
a shorthand name


507
00:26:47,256 --> 00:26:48,616
for it that I can use later.


508
00:26:48,746 --> 00:26:51,436
It's essentially a property
whose value is application mail.


509
00:26:51,546 --> 00:26:54,136
I'm also going to use
application contacts.


510
00:26:55,236 --> 00:26:56,646
The first line is
pretty much the same.


511
00:26:56,886 --> 00:26:58,546
Get the selection of mail.


512
00:26:58,546 --> 00:27:00,396
I have to specify that
it's mail selection


513
00:27:00,396 --> 00:27:02,096
because contacts
has a selection to.


514
00:27:02,096 --> 00:27:03,476
So got to be explicit there.


515
00:27:04,026 --> 00:27:07,056
But then we can forward
the message.


516
00:27:07,056 --> 00:27:08,476
And notice there's
no tell block here.


517
00:27:08,776 --> 00:27:13,206
The compiler knows that,
forward, mail is the only thing


518
00:27:13,206 --> 00:27:16,096
that defined forward; so
it will send that to mail.


519
00:27:16,616 --> 00:27:20,246
And then we repeat with
every person in a group.


520
00:27:20,676 --> 00:27:22,566
No tell blocks again
because it knows that person


521
00:27:22,566 --> 00:27:24,746
in group are defined by
contacts and not by mail.


522
00:27:25,306 --> 00:27:29,706
You're building up the
mail address if the sender


523
00:27:29,706 --> 00:27:31,976
of the original message were
actually getting this straight


524
00:27:31,976 --> 00:27:34,036
from mail instead
of prefetching it,


525
00:27:34,856 --> 00:27:37,816
and this actually
comes from contacts.


526
00:27:37,816 --> 00:27:42,946
We're mixing two applications
in the same statement making you


527
00:27:42,946 --> 00:27:44,556
to Cc or To recipient.


528
00:27:44,556 --> 00:27:46,706
And, again, there's no
tell blocks anywhere here.


529
00:27:47,236 --> 00:27:52,596
And, yet, it works
exactly the same.


530
00:27:53,516 --> 00:27:58,546
[ Pause ]


531
00:27:59,046 --> 00:28:02,466
So, essentially, what use
does is it lets you get rid


532
00:28:02,466 --> 00:28:04,996
of all the bookkeeping that
the computer really ought


533
00:28:04,996 --> 00:28:06,276
to be able to do for you.


534
00:28:06,846 --> 00:28:10,266
Notice that this script, this
new script, is much narrower


535
00:28:10,836 --> 00:28:11,686
than the original one.


536
00:28:12,916 --> 00:28:14,596
It gets rid of all
the tell blocks


537
00:28:14,806 --> 00:28:18,746
so you can concentrate just
on your application logic


538
00:28:18,906 --> 00:28:21,026
and not have to worry
so much about exactly


539
00:28:21,066 --> 00:28:22,806
which application
you're telling to do what


540
00:28:23,186 --> 00:28:25,826
because AppleScript should
be able to do that for you.


541
00:28:26,016 --> 00:28:28,426
Now it can.


542
00:28:29,516 --> 00:28:34,656
[ Applause ]


543
00:28:35,156 --> 00:28:35,396
>> Sal Soghoian: Yeah.


544
00:28:35,396 --> 00:28:38,136
It's going to take me
a while to wrap my head


545
00:28:38,136 --> 00:28:41,816
around all the different places
I can use the use clause,


546
00:28:42,436 --> 00:28:45,886
but I'm very excited by
it because I've been able


547
00:28:45,886 --> 00:28:48,026
to do some really
interesting things


548
00:28:48,026 --> 00:28:50,076
in a single line statement


549
00:28:50,306 --> 00:28:53,246
that it would usually
take me multiple lines


550
00:28:53,246 --> 00:28:55,026
and multiple tell blocks to do.


551
00:28:55,516 --> 00:28:58,456
It's a very powerful
construct and especially


552
00:28:58,456 --> 00:28:59,846
when it's used with libraries.


553
00:29:00,036 --> 00:29:00,666
It's great.


554
00:29:01,786 --> 00:29:05,536
So, AppleScript libraries, they
are a new plug-in architecture


555
00:29:05,536 --> 00:29:08,626
that allows you to get at
your favorite handlers.


556
00:29:08,866 --> 00:29:10,606
You can create these yourself.


557
00:29:11,166 --> 00:29:13,376
They're different than
scripting additions


558
00:29:13,476 --> 00:29:15,466
because you can write
them in AppleScript


559
00:29:16,576 --> 00:29:19,436
and that the script
manages their use


560
00:29:19,526 --> 00:29:22,166
and use of resources as well.


561
00:29:22,756 --> 00:29:25,896
They can also have access
to AppleScript Objective-C,


562
00:29:25,896 --> 00:29:29,566
so that means the
world of Cocoa, methods


563
00:29:29,746 --> 00:29:31,886
and classes are at
your disposal.


564
00:29:32,686 --> 00:29:36,676
And you can publish your own
terminology for them as well.


565
00:29:36,986 --> 00:29:41,076
In support, we've added the new
script library reference and,


566
00:29:41,076 --> 00:29:44,276
as we just demonstrated,
the new use clause


567
00:29:44,486 --> 00:29:47,076
to help automatically
find, locate,


568
00:29:47,076 --> 00:29:49,256
and load these things
globally for you.


569
00:29:50,216 --> 00:29:55,406
Now, we have a session this
afternoon on just libraries


570
00:29:55,406 --> 00:29:59,026
where we get into
detail and show you how


571
00:29:59,026 --> 00:30:03,416
to construct a library, not
only a simple one but one


572
00:30:03,416 --> 00:30:07,786
in AppleScript Objective-C, one
that actually has a terminology.


573
00:30:07,786 --> 00:30:10,816
And, for the first time
anywhere in the world,


574
00:30:11,046 --> 00:30:16,116
we will show you how to write
a scripting dictionary file


575
00:30:16,276 --> 00:30:17,316
or an sdef [laughter].


576
00:30:19,516 --> 00:30:22,556
[ Applause ]


577
00:30:23,056 --> 00:30:24,066
It is sick, sick, sick.


578
00:30:24,426 --> 00:30:25,416
You can't miss it.


579
00:30:25,806 --> 00:30:27,536
So that's this afternoon.


580
00:30:27,536 --> 00:30:29,116
It's right in this same room.


581
00:30:29,116 --> 00:30:32,146
It session 416 at 3:15 pm.


582
00:30:32,456 --> 00:30:35,916
If this is interesting you, I
suggest please come to this.


583
00:30:35,916 --> 00:30:38,366
When you're done, you'll
really understand them


584
00:30:38,556 --> 00:30:40,396
and be able to start
using these.


585
00:30:40,396 --> 00:30:41,446
They're very powerful.


586
00:30:42,876 --> 00:30:45,376
Next we're going to talk
about notifications.


587
00:30:45,756 --> 00:30:47,776
Informing the user
of what's going on.


588
00:30:48,266 --> 00:30:50,806
So the other day I
was reading this blog


589
00:30:50,806 --> 00:30:53,416
about how they got
it right in OS X


590
00:30:53,416 --> 00:30:54,976
with the Notification Center.


591
00:30:54,976 --> 00:30:56,666
And the guy says, "Yeah, man.


592
00:30:56,916 --> 00:31:00,536
You know, they -- they're
located in a central location.


593
00:31:00,536 --> 00:31:03,416
They're organized
by application.


594
00:31:03,816 --> 00:31:06,406
And they disappear quickly


595
00:31:06,406 --> 00:31:09,856
so that there is no
clutter on your screen.


596
00:31:10,046 --> 00:31:12,196
It's really nice
that they're there.


597
00:31:12,436 --> 00:31:16,406
And it can even provide a
mechanism for you to respond.


598
00:31:16,556 --> 00:31:18,566
And, in the new version
that you've seen,


599
00:31:18,986 --> 00:31:21,706
you can even have replies
and stuff like that.


600
00:31:22,346 --> 00:31:24,806
And, you know, they're
designed not


601
00:31:24,806 --> 00:31:27,046
to annoy you or get in the way.


602
00:31:27,946 --> 00:31:31,186
[Laughter] And they should
never, ever leap, jump,


603
00:31:31,186 --> 00:31:34,846
or hop and definitely
not bounce."


604
00:31:35,456 --> 00:31:39,806
So I'm showing you this
because, for many, many years,


605
00:31:39,806 --> 00:31:45,136
this is the way that scripts
tried to notify you until now.


606
00:31:45,976 --> 00:31:48,806
So we've added notifications
support


607
00:31:48,806 --> 00:31:50,786
in Automator and AppleScript.


608
00:31:51,256 --> 00:31:53,316
And we've integrated
it [applause] -- yes.


609
00:31:55,706 --> 00:32:00,026
And we've integrated it in
both applications and --


610
00:32:00,476 --> 00:32:04,916
so that there's no more need
for these mobile dialogs


611
00:32:04,916 --> 00:32:06,656
that just kind of hang around,


612
00:32:06,926 --> 00:32:09,126
and you can now create
your automations


613
00:32:09,126 --> 00:32:11,496
that are 100 percent
bounce-free [laughter].


614
00:32:13,486 --> 00:32:15,406
So let's take a look
at how this works.


615
00:32:15,876 --> 00:32:19,336
There's a Notifications Control
-- System Preference pane,


616
00:32:19,336 --> 00:32:20,896
right, in the Master
Preference pane.


617
00:32:20,896 --> 00:32:25,466
If you open that in Mavericks,
you'll see that your favorite,


618
00:32:25,466 --> 00:32:30,666
you know, automation applets
and droplets appear in the list


619
00:32:30,666 --> 00:32:33,176
of applications like
everything else.


620
00:32:33,266 --> 00:32:36,666
And you can select them
and set their preferences.


621
00:32:36,666 --> 00:32:40,406
For example, I can select my
photo droplet, and I can choose


622
00:32:40,466 --> 00:32:42,676
that it will display
as an alert.


623
00:32:43,096 --> 00:32:45,546
Or I can even say, No; I
don't want any display.


624
00:32:45,546 --> 00:32:46,786
Just use the sound.


625
00:32:47,476 --> 00:32:50,246
Or, if I have something
that I use quite a lot


626
00:32:50,736 --> 00:32:53,036
and doesn't require
a notification,


627
00:32:53,276 --> 00:32:55,176
then I can just turn
it off and take it


628
00:32:55,176 --> 00:32:59,036
out of the Notification system
by just clicking that checkbox.


629
00:32:59,826 --> 00:33:04,626
So, when it comes to Automator,
many people don't know that,


630
00:33:04,626 --> 00:33:08,616
when you run an Automator
workflow or applet,


631
00:33:09,146 --> 00:33:11,036
it does provide some feedback.


632
00:33:11,366 --> 00:33:14,096
And you'll notice
at the very top


633
00:33:14,246 --> 00:33:16,856
of your menu bar there's a gear.


634
00:33:17,256 --> 00:33:20,736
And, if you've ever seen that
or even caught your eye with it,


635
00:33:20,876 --> 00:33:25,166
if you click on that, it will
show you every workflow that's


636
00:33:25,166 --> 00:33:27,276
running and generally
give you an idea


637
00:33:27,276 --> 00:33:29,096
about where the workflow is.


638
00:33:29,516 --> 00:33:31,886
But you have to hold
the cursor down.


639
00:33:32,166 --> 00:33:34,756
And, if you're still holding,
you might get this notice


640
00:33:34,756 --> 00:33:36,326
that says the workflow ended.


641
00:33:37,266 --> 00:33:41,026
But most people don't know
about that and so, generally,


642
00:33:41,026 --> 00:33:43,346
the way that you know
that a workflow is --


643
00:33:43,756 --> 00:33:45,636
is finished is nothing.


644
00:33:45,636 --> 00:33:47,566
There's nothing there
to show you.


645
00:33:48,476 --> 00:33:52,246
Now, with the Automator
in Mavericks,


646
00:33:52,316 --> 00:33:55,376
we've introduced a new
notification action,


647
00:33:56,156 --> 00:33:58,976
and this will cause a
notification to occur.


648
00:33:59,616 --> 00:34:02,896
And you can insert
it more than once


649
00:34:02,896 --> 00:34:04,326
in your workflow if you want.


650
00:34:04,326 --> 00:34:05,326
You could put it into the start.


651
00:34:05,326 --> 00:34:07,476
You could put it in key
points in the workflow.


652
00:34:07,696 --> 00:34:09,136
You could just put
it at the end.


653
00:34:09,136 --> 00:34:10,606
Whatever works for you.


654
00:34:11,426 --> 00:34:14,906
And, in addition, it provides
various options for which one


655
00:34:14,906 --> 00:34:16,596
of the fields you want to do,


656
00:34:16,596 --> 00:34:20,326
and it also supports Automator
variables, workflow variables.


657
00:34:20,706 --> 00:34:22,976
So we can have dynamic
information


658
00:34:22,976 --> 00:34:26,646
in that dialog related to
the workflow that was run.


659
00:34:28,275 --> 00:34:32,446
Now, why would you need this
kind of thing in a workflow?


660
00:34:32,536 --> 00:34:36,266
Well, here's a workflow that
I use myself for home movies,


661
00:34:36,266 --> 00:34:38,396
and it's a video
compressing workflow.


662
00:34:38,646 --> 00:34:43,456
Anytime I shoot a bunch of
stuff on my iPhone or a camera,


663
00:34:44,065 --> 00:34:47,025
I take the raw files and I
run it through this droplet.


664
00:34:47,025 --> 00:34:48,786
And let me just walk you
through it real quick.


665
00:34:49,136 --> 00:34:51,906
So it's an applet,
so you can see


666
00:34:51,906 --> 00:34:55,076
at the top it says it receives
whatever you drop onto it.


667
00:34:55,426 --> 00:34:58,176
And then the first
action, I have a find --


668
00:34:58,236 --> 00:35:01,736
filter finder items, so it
looks just for movie files.


669
00:35:01,736 --> 00:35:04,096
In case something else
gets accidentally dropped


670
00:35:04,096 --> 00:35:05,306
on it, it ignores it.


671
00:35:05,906 --> 00:35:10,086
Then, the next action is
creating a workflow variable


672
00:35:10,086 --> 00:35:14,256
that stores the references
to the raw movie files.


673
00:35:14,776 --> 00:35:18,396
Then I proceed to do the first
encoding at a lower thing


674
00:35:18,396 --> 00:35:21,836
of 480p to a certain
location on my drive.


675
00:35:22,796 --> 00:35:28,046
Next, I append a -480p
to the end of the name


676
00:35:28,046 --> 00:35:30,856
of all the created
video files so I know


677
00:35:30,856 --> 00:35:32,716
which ones are the
lower resolution.


678
00:35:33,606 --> 00:35:35,376
Then I use a workflow variable.


679
00:35:35,376 --> 00:35:37,466
I call back that
workflow variable.


680
00:35:37,466 --> 00:35:41,046
I get the original list
of source references.


681
00:35:41,396 --> 00:35:47,176
I perform another encoding pass
using 720p or 1080p depending


682
00:35:47,176 --> 00:35:50,316
on where I'm going to,
to a certain location.


683
00:35:50,726 --> 00:35:53,486
And then again I append
to the end of the name.


684
00:35:54,066 --> 00:35:58,006
So this workflow can take
quite a while to run.


685
00:35:58,006 --> 00:36:02,586
If you drag four or five
10GB files onto this,


686
00:36:02,806 --> 00:36:06,656
it can go on for quite a while,
and you have no idea of knowing


687
00:36:06,656 --> 00:36:08,506
where you are in this process.


688
00:36:08,556 --> 00:36:11,646
So this is an example of a
workflow that you would want


689
00:36:11,646 --> 00:36:13,246
to add a notification to.


690
00:36:13,826 --> 00:36:15,536
And to do that it's pretty easy.


691
00:36:15,536 --> 00:36:17,666
You just open up
your library view.


692
00:36:17,956 --> 00:36:20,966
You search in the Search
field for notification.


693
00:36:21,386 --> 00:36:23,876
And you'll see that
it appears in the list


694
00:36:23,876 --> 00:36:26,066
of available Automator actions.


695
00:36:26,326 --> 00:36:28,326
Hit the Return key;
it becomes selected.


696
00:36:28,326 --> 00:36:30,736
You can see the display
of information


697
00:36:30,736 --> 00:36:32,706
about the new notification
action.


698
00:36:32,996 --> 00:36:36,456
Hit the Return key again and it
will automatically inserted it


699
00:36:36,456 --> 00:36:38,286
into the bottom of my workflow.


700
00:36:38,696 --> 00:36:40,576
Then it's just a
matter of me filling


701
00:36:40,576 --> 00:36:43,676
out the fields the
way I want, saving it.


702
00:36:44,056 --> 00:36:47,746
So now I drag my video
file on top of that.


703
00:36:47,746 --> 00:36:51,806
And I hit the gear, but
after a period of time,


704
00:36:52,556 --> 00:36:55,386
the first encoding thing
appears on my desktop.


705
00:36:55,806 --> 00:36:57,666
Then some more time goes by,


706
00:36:58,156 --> 00:37:01,176
and the second encoded
file appears along


707
00:37:01,176 --> 00:37:02,536
with a notification.


708
00:37:02,956 --> 00:37:05,676
So now I know what's
been processed.


709
00:37:05,676 --> 00:37:09,426
If I come back from eating my
doughnut or lunch, whatever,


710
00:37:09,656 --> 00:37:12,116
and I just look at the
machine, I can say, "Oh, great.


711
00:37:12,116 --> 00:37:13,406
The encoding went fine.


712
00:37:13,636 --> 00:37:15,966
Okay. I'm ready to do the
next batch or something."


713
00:37:16,426 --> 00:37:19,646
And because the parameters
are settable


714
00:37:19,646 --> 00:37:22,806
in the System Preference
pane, I can choose to have


715
00:37:22,806 --> 00:37:27,386
that be an alert that demands
that I close that alert so just


716
00:37:27,386 --> 00:37:29,026
as a confirmation as well.


717
00:37:30,166 --> 00:37:34,546
Now, for AppleScript, what we
did is we added a new command


718
00:37:34,546 --> 00:37:36,996
that's part of the
standard editions,


719
00:37:37,386 --> 00:37:40,586
and it's called Display
Notification, of course.


720
00:37:41,246 --> 00:37:43,116
And here's the verb.


721
00:37:43,386 --> 00:37:46,336
There's an optional
parameter with title.


722
00:37:46,336 --> 00:37:51,206
There's another optional
parameter here for subtitle.


723
00:37:51,626 --> 00:37:54,216
And you can put the
name of the sound file


724
00:37:54,216 --> 00:37:55,676
that you want to have play.


725
00:37:55,776 --> 00:37:58,166
Now, all those are
optional parameters,


726
00:37:58,166 --> 00:37:59,706
but you have to use one of them.


727
00:38:00,286 --> 00:38:02,656
And it creates a notification.


728
00:38:03,356 --> 00:38:06,316
So, in that example
I sent to Trudy,


729
00:38:06,576 --> 00:38:09,846
this is basically
the repeat routine.


730
00:38:10,106 --> 00:38:13,056
I would just open some
space here after the repeat,


731
00:38:13,336 --> 00:38:16,956
insert that into there so now
there's display notification.


732
00:38:17,306 --> 00:38:21,566
And I can add custom data
like the number of items


733
00:38:21,566 --> 00:38:25,216
that were processed into
the final message so that,


734
00:38:25,216 --> 00:38:27,206
when I drag a bunch of images


735
00:38:27,206 --> 00:38:30,696
onto the photo droplet,
it processes.


736
00:38:30,786 --> 00:38:33,906
And, then, after a while, it
will display the notification


737
00:38:33,906 --> 00:38:35,356
with the custom information.


738
00:38:35,836 --> 00:38:37,356
It's that simple to use.


739
00:38:37,806 --> 00:38:40,436
So here to show you
notifications


740
00:38:40,436 --> 00:38:42,216
in action is Chris Nebel.


741
00:38:42,476 --> 00:38:42,816
Thank you.


742
00:38:43,436 --> 00:38:43,976
>> Chris Nebel: Thank you, Sal.


743
00:38:44,516 --> 00:38:47,756
[ Applause ]


744
00:38:48,256 --> 00:38:51,426
Okay. So I've got Sal's
encoding workflow here.


745
00:38:51,736 --> 00:38:52,986
Let me get that started.


746
00:38:54,006 --> 00:38:59,246
And, like he said, you
can see that it's running


747
00:38:59,296 --> 00:39:00,546
from the spinning gear menu.


748
00:39:00,606 --> 00:39:04,706
But, when it's done, all you
get is just the gear disappears.


749
00:39:04,706 --> 00:39:06,506
You'd like some better
notification of this.


750
00:39:07,046 --> 00:39:10,626
And in the past you'd use
a modal dialog to do this,


751
00:39:10,626 --> 00:39:12,746
but that's really the
wrong interaction method


752
00:39:13,106 --> 00:39:15,826
because a modal dialog
is an alert.


753
00:39:16,056 --> 00:39:18,436
It is saying, "Oh, oh, here.


754
00:39:18,616 --> 00:39:19,256
Sir, sir, sir.


755
00:39:19,306 --> 00:39:20,146
You've got to see this.


756
00:39:20,226 --> 00:39:21,946
You've got to do
something about this.


757
00:39:22,096 --> 00:39:22,776
It's right here.


758
00:39:23,176 --> 00:39:26,466
Are you even paying
attention to this?"


759
00:39:27,956 --> 00:39:31,296
Whereas a notification
is much more passive.


760
00:39:31,826 --> 00:39:34,096
It says, "Oh, hi.


761
00:39:34,166 --> 00:39:38,516
So, yeah. This thing
happened and, yeah.


762
00:39:38,516 --> 00:39:40,426
If you want I can hook you
up with, you know, a guy.


763
00:39:40,856 --> 00:39:43,476
But, you know, if
you don't, it's cool.


764
00:39:44,906 --> 00:39:46,816
See you [laughter]."


765
00:39:47,706 --> 00:39:49,716
And that's what we just got


766
00:39:49,836 --> 00:39:51,526
if you weren't paying
attention as it flowed by.


767
00:39:52,416 --> 00:39:53,756
Our notification showed up and,


768
00:39:53,756 --> 00:39:56,396
if we look in Notification
Center, it's still there


769
00:39:56,436 --> 00:39:58,236
if we happen to be away at
a coffee break or something.


770
00:39:59,386 --> 00:40:01,236
So let's see how we did that.


771
00:40:01,666 --> 00:40:05,076
I have it open in
Automator over here.


772
00:40:05,786 --> 00:40:09,556
So the basic workflow Sal
explained to you already,


773
00:40:09,746 --> 00:40:14,136
filter out the movies, encode
them, encode them, add the name,


774
00:40:14,136 --> 00:40:15,536
encode then again, add
the different name.


775
00:40:15,896 --> 00:40:19,146
And, at the end, we have display
notification, finished encoding.


776
00:40:19,936 --> 00:40:22,346
So this is nice, but we
can do a little better.


777
00:40:22,846 --> 00:40:24,386
We'd like to get a notification


778
00:40:24,386 --> 00:40:28,046
about what items
just got encoded


779
00:40:28,506 --> 00:40:31,166
because we might have several
of these in flight at once.


780
00:40:32,986 --> 00:40:36,556
Now, we happen to already
have the input file stored


781
00:40:36,556 --> 00:40:37,236
in a variable.


782
00:40:37,236 --> 00:40:39,646
We had to save them
because we were going to --


783
00:40:39,646 --> 00:40:43,216
we have to feed them into two
different encode media actions.


784
00:40:44,116 --> 00:40:47,706
So we can just take
that variable and put it


785
00:40:47,706 --> 00:40:50,716
into the message here because
all these fields support --


786
00:40:50,716 --> 00:40:51,946
support variables.


787
00:40:53,506 --> 00:40:54,056
Save that.


788
00:40:55,466 --> 00:40:57,746
And now, if we do
our workflow again --


789
00:40:57,746 --> 00:40:59,266
I'm using a shorter
movie this time


790
00:40:59,656 --> 00:41:01,086
so it won't take quite as long.


791
00:41:01,306 --> 00:41:02,496
There's one file;
there's the next


792
00:41:03,136 --> 00:41:07,576
and says finished
encoding, menomena.


793
00:41:08,516 --> 00:41:13,546
[ Pause ]


794
00:41:14,046 --> 00:41:16,646
So let's try something now
a little more complicated


795
00:41:16,646 --> 00:41:17,926
and a lot more geeky.


796
00:41:21,206 --> 00:41:22,986
So there are lots
of system services,


797
00:41:22,986 --> 00:41:24,316
low-level system services


798
00:41:24,316 --> 00:41:28,576
that tell you what they're doing
simply by writing out to a file.


799
00:41:28,576 --> 00:41:29,896
They write out to a system log.


800
00:41:30,636 --> 00:41:33,776
And, you know, that's
okay as far as it goes.


801
00:41:33,906 --> 00:41:35,616
But, you know, here's
an example.


802
00:41:35,766 --> 00:41:39,306
I have a machine that
other people log into.


803
00:41:39,376 --> 00:41:40,726
And, you know, they
are nice enough folks,


804
00:41:40,726 --> 00:41:43,836
but they get a little, shall
we say, overenthusiastic


805
00:41:43,836 --> 00:41:48,176
about using Pseudo, and I
like to keep an eye on them.


806
00:41:48,976 --> 00:41:52,526
Now, Pseudo is one of
the system services.


807
00:41:52,526 --> 00:41:53,496
It writes into a log.


808
00:41:53,596 --> 00:41:56,636
So anytime something
goes on, you know,


809
00:41:56,636 --> 00:41:58,426
we can keep an eye
on that using Syslog.


810
00:41:58,926 --> 00:42:01,286
So this just writes


811
00:42:01,286 --> 00:42:04,936
out a message anytime
Pseudo logs a message.


812
00:42:06,316 --> 00:42:10,096
And I'm going to pipe this
through sed to clean it


813
00:42:10,096 --> 00:42:13,176
up a little bit so I just
get a simplified version.


814
00:42:13,826 --> 00:42:19,116
And, if I come over here
and say Pseudo-something,


815
00:42:24,916 --> 00:42:26,356
there's my message popping out.


816
00:42:27,206 --> 00:42:29,166
So this is nice as
far as it goes.


817
00:42:29,266 --> 00:42:30,766
But, you know, I've got lots


818
00:42:30,766 --> 00:42:32,716
of Terminal windows
blabbing text at me all day.


819
00:42:32,716 --> 00:42:34,236
Odds are good I'm
going to miss this one.


820
00:42:34,236 --> 00:42:36,516
You know, it might
get covered up.


821
00:42:36,516 --> 00:42:38,156
I'm not necessarily
looking at Terminal.


822
00:42:38,526 --> 00:42:39,346
But, you know, hey.


823
00:42:39,346 --> 00:42:40,196
Notifications.


824
00:42:40,196 --> 00:42:42,426
Let's see what we
can do with that.


825
00:42:43,726 --> 00:42:46,186
So I have a script
that I wrote here.


826
00:42:46,916 --> 00:42:49,646
If you don't know
Perl, don't be afraid.


827
00:42:49,646 --> 00:42:51,346
This is just what I'm
more comfortable with.


828
00:42:53,016 --> 00:42:55,866
So what this does is
it's going to just sit


829
00:42:55,866 --> 00:42:58,196
in the loop reading lines
of text as they come in.


830
00:42:58,266 --> 00:42:59,196
And, for every line of test,


831
00:42:59,196 --> 00:43:00,586
it's going to run the
rest of the script.


832
00:43:00,586 --> 00:43:05,836
So this little hunk of line
noise breaks up the input line


833
00:43:05,836 --> 00:43:07,756
into three chunks,
breaking on colons.


834
00:43:07,756 --> 00:43:11,036
So we wind up with three
pieces: dollar one,


835
00:43:11,036 --> 00:43:12,006
dollar two, dollar three.


836
00:43:12,516 --> 00:43:16,236
And then we'll use those
to build up the parameters


837
00:43:16,236 --> 00:43:18,226
for a display notification
command.


838
00:43:18,226 --> 00:43:21,066
That's how you do
notification from AppleScript.


839
00:43:21,886 --> 00:43:23,376
And then we're going to run


840
00:43:23,556 --> 00:43:26,516
that assembled script
using osascript.


841
00:43:27,006 --> 00:43:29,336
Osascript is how you run
a script from Terminal.


842
00:43:31,596 --> 00:43:37,956
So, if we run that -- and if
I can spell it correctly --


843
00:43:44,416 --> 00:43:47,056
we can give it some
text, break up by colons,


844
00:43:48,686 --> 00:43:50,256
and watch the corner
of the screen there.


845
00:43:51,256 --> 00:43:54,846
We get our little notification.


846
00:43:55,296 --> 00:43:58,666
So now let's take the
previous command we had,


847
00:43:58,796 --> 00:44:03,906
the Syslog command, and pipe
it through notification filter.


848
00:44:05,716 --> 00:44:07,186
So, now, this will
just sit here running.


849
00:44:07,186 --> 00:44:08,676
I can minimize this
window or whatever.


850
00:44:10,836 --> 00:44:12,396
But someone comes
along and does Pseudo;


851
00:44:13,216 --> 00:44:18,596
I get an actual notification
that shows up wherever I am.


852
00:44:19,516 --> 00:44:24,546
[ Applause ]


853
00:44:25,046 --> 00:44:27,446
And that is just a few ways
you can use notifications


854
00:44:27,746 --> 00:44:31,326
to improve the awareness
of your workflows


855
00:44:31,326 --> 00:44:32,246
that are running
on your machine.


856
00:44:32,736 --> 00:44:32,986
Sal?


857
00:44:34,346 --> 00:44:35,166
>> Sal Soghoian: Very cool.


858
00:44:36,306 --> 00:44:38,726
I like to know everything
that's going on in my house


859
00:44:39,096 --> 00:44:40,596
on every computer everywhere.


860
00:44:40,636 --> 00:44:44,006
I want total awareness
through notifications.


861
00:44:44,586 --> 00:44:49,546
So notification support in
Automator and AppleScript,


862
00:44:50,456 --> 00:44:54,516
it's been integrated right
into the editing applications,


863
00:44:54,616 --> 00:44:57,216
that you have resources
for Automator to do it,


864
00:44:57,576 --> 00:44:59,586
for AppleScript to
do it as well.


865
00:44:59,776 --> 00:45:00,886
This means you don't have


866
00:45:00,886 --> 00:45:04,016
to create these modal
confirmation dialogs,


867
00:45:04,316 --> 00:45:07,556
and now you can be 100
percent bounce free.


868
00:45:08,536 --> 00:45:10,536
So that's notification support.


869
00:45:12,066 --> 00:45:15,706
Next I'd like to talk about
accessibility integration.


870
00:45:17,676 --> 00:45:21,706
Now, some of you might be
familiar with Speakable Items.


871
00:45:21,706 --> 00:45:24,026
How many people in here
have used Speakable Items?


872
00:45:25,446 --> 00:45:26,286
Quite a few.


873
00:45:26,366 --> 00:45:27,076
Quite a few.


874
00:45:27,546 --> 00:45:32,726
And it's an architecture
built into OS X


875
00:45:33,556 --> 00:45:38,356
in the accessibility frameworks
and allows you to speak commands


876
00:45:38,356 --> 00:45:40,796
to your computer and have
them perform them for you.


877
00:45:41,476 --> 00:45:43,186
And it has a lot of integration.


878
00:45:43,186 --> 00:45:45,286
There is a lot of
customization built


879
00:45:45,286 --> 00:45:47,196
into the standard
set of commands.


880
00:45:47,196 --> 00:45:49,846
For example, you can
say, Mail this to mom,


881
00:45:49,846 --> 00:45:52,116
and it will understand
who mom is.


882
00:45:52,566 --> 00:45:54,776
You could say meet with
Karl Whelan [phonetic],


883
00:45:55,016 --> 00:45:58,616
and it will look up Karl
Whelan in your address book


884
00:45:58,616 --> 00:46:02,626
and then create a new
meeting for you in Calendar.


885
00:46:03,146 --> 00:46:05,666
It has a lot of other commands
that are just basically,


886
00:46:05,666 --> 00:46:08,286
you know, work things
like open iPhoto,


887
00:46:08,286 --> 00:46:10,836
bring this window forward,
that kind of stuff.


888
00:46:10,896 --> 00:46:12,106
But it's very useful.


889
00:46:12,106 --> 00:46:16,546
So a lot of people use
this who are not involved


890
00:46:16,546 --> 00:46:17,726
in accessibility issues.


891
00:46:17,726 --> 00:46:20,266
It's just a nice
power feature to have.


892
00:46:21,056 --> 00:46:27,216
So what we've done in Mavericks
is we've created a new entity


893
00:46:27,216 --> 00:46:29,076
called Speakable Workflows.


894
00:46:29,076 --> 00:46:31,756
It's a way of saving
your workflows


895
00:46:32,196 --> 00:46:36,716
into the Speakable Items'
architecture and have it work


896
00:46:36,716 --> 00:46:37,976
for you automatically.


897
00:46:37,976 --> 00:46:41,646
So you can extend a set of
commands that are available


898
00:46:41,646 --> 00:46:43,636
by voice using Automator.


899
00:46:44,386 --> 00:46:46,376
And this is how it works.


900
00:46:46,376 --> 00:46:49,056
So, to turn on Speakable Items,


901
00:46:49,096 --> 00:46:52,616
you just go to the
Accessibility Preference pane.


902
00:46:52,916 --> 00:46:54,776
At the bottom of the list


903
00:46:54,776 --> 00:46:58,366
of different accessibility
features is Speakable Items.


904
00:46:58,596 --> 00:47:01,206
You select that and then
just click the radio button


905
00:47:01,206 --> 00:47:01,996
to turn it on.


906
00:47:02,746 --> 00:47:05,986
As confirmation, you'll see
this floating round window.


907
00:47:05,986 --> 00:47:08,116
That's the Speech
Feedback window.


908
00:47:08,426 --> 00:47:11,756
When that's available,
the computer is ready


909
00:47:11,756 --> 00:47:13,496
to respond to your commands.


910
00:47:13,946 --> 00:47:16,746
And, by default, you just
press down the Escape key


911
00:47:16,746 --> 00:47:19,226
and say your command and it
will start working for you.


912
00:47:20,156 --> 00:47:24,546
Now, in Automator, if you want
to create a Speakable Workflow,


913
00:47:24,546 --> 00:47:26,066
I have an example here.


914
00:47:26,686 --> 00:47:30,536
So I use USB keys all the time.


915
00:47:30,536 --> 00:47:31,226
I have one here.


916
00:47:31,226 --> 00:47:32,946
I call it Digital Briefcase.


917
00:47:33,546 --> 00:47:36,726
And, you know, I'm constantly
plugging them into the computer,


918
00:47:36,726 --> 00:47:38,356
and then I have to
go eject them.


919
00:47:38,616 --> 00:47:41,676
So I have to find some dialog,
whether it's an open dialog


920
00:47:41,676 --> 00:47:44,506
or finder window, find the
stupid little down thing,


921
00:47:44,506 --> 00:47:46,476
click that, and then
wait for the thing


922
00:47:46,476 --> 00:47:47,736
to eject and then grab it.


923
00:47:48,076 --> 00:47:51,136
I would really like to just
be able to tell the computer


924
00:47:51,136 --> 00:47:53,386
"Eject Digital Briefcase"
and, plop,


925
00:47:53,386 --> 00:47:55,016
it will just pull it out for me.


926
00:47:55,416 --> 00:47:58,776
So this is the workflow that
does that, and I'll walk you


927
00:47:58,776 --> 00:48:00,496
through it to show
you how to do this.


928
00:48:01,256 --> 00:48:04,616
So it's an applet by default,


929
00:48:05,296 --> 00:48:10,176
and the first action is a
Find Finder Items action,


930
00:48:10,556 --> 00:48:12,496
and it looks for two parameters.


931
00:48:12,496 --> 00:48:17,286
One, it looks for volume whose
name is Digital Briefcase.


932
00:48:17,996 --> 00:48:21,006
Once it finds that
volume, it will pass


933
00:48:21,006 --> 00:48:24,936
that to the next action which
is just simply Eject Disc,


934
00:48:25,066 --> 00:48:27,056
and it will eject
for us automatically.


935
00:48:27,936 --> 00:48:32,856
Then the next step is to specify
some text I want as a response.


936
00:48:33,436 --> 00:48:35,676
And I type the word Done!


937
00:48:35,926 --> 00:48:40,556
and then have that
spoken by a certain voice.


938
00:48:40,736 --> 00:48:42,076
I've chosen Samantha.


939
00:48:42,746 --> 00:48:46,396
So then I choose to
save this workflow.


940
00:48:46,396 --> 00:48:48,146
This will be my Speakable
Workflow.


941
00:48:48,396 --> 00:48:52,996
And in the Save sheet you'll see
that there is a File Format menu


942
00:48:53,496 --> 00:48:54,776
that says Application.


943
00:48:55,286 --> 00:49:00,326
Well, if I click on that,
there's a new file format.


944
00:49:00,516 --> 00:49:03,696
If you have Speakable Items
architecture turned on


945
00:49:03,696 --> 00:49:08,326
and installed on your machine,
you will see this in Automator


946
00:49:08,326 --> 00:49:10,096
and it's called a
Speakable Item.


947
00:49:10,696 --> 00:49:14,056
So, therefore, I can save
this as a Speakable Item.


948
00:49:14,626 --> 00:49:16,886
You'll notice that
Speakable Item appears


949
00:49:16,936 --> 00:49:18,636
on the File Format menu,


950
00:49:18,906 --> 00:49:22,636
but it also automatically
locates the Speakable Items


951
00:49:22,636 --> 00:49:25,576
folder which is within
your Speech folder which is


952
00:49:25,616 --> 00:49:26,876
within your Home folder.


953
00:49:27,546 --> 00:49:29,906
In other words, that's
the location


954
00:49:30,196 --> 00:49:32,276
that the speech architecture
uses.


955
00:49:32,636 --> 00:49:36,606
So, when you save,
you want to save it


956
00:49:36,606 --> 00:49:40,116
with a name being the
name of the command.


957
00:49:40,116 --> 00:49:43,696
So, in this case, I'm going to
say Eject Digital Briefcase,


958
00:49:43,896 --> 00:49:46,196
and that's what I want to be
able to say to my computer.


959
00:49:46,596 --> 00:49:47,536
I save that.


960
00:49:47,536 --> 00:49:52,106
It will install it into the
Speakable Items architecture


961
00:49:52,106 --> 00:49:53,316
for me automatically.


962
00:49:53,886 --> 00:49:58,246
So the next time my thumb drive
is plugged into the computer


963
00:49:58,246 --> 00:50:02,956
like it is here, if I want to,
no matter what program I'm in,


964
00:50:03,286 --> 00:50:06,516
if I want to eject
it, I just simply --


965
00:50:07,156 --> 00:50:10,296
I just simply say the command -


966
00:50:11,426 --> 00:50:13,626
>> "Eject Digital
Briefcase" [laughter].


967
00:50:13,986 --> 00:50:18,206
>> It does it.


968
00:50:18,316 --> 00:50:18,676
>> "Done!"


969
00:50:19,246 --> 00:50:20,296
>> -- and then says done.


970
00:50:21,466 --> 00:50:26,886
So there's a very simple example
of how you can take workflows


971
00:50:26,886 --> 00:50:31,996
and integrate them in with the
speech recognition architecture


972
00:50:31,996 --> 00:50:35,286
in the operating system
to perform custom actions.


973
00:50:35,966 --> 00:50:40,736
Now, in preparation for release
of Mavericks in the fall,


974
00:50:41,056 --> 00:50:45,796
we'll be posting a new website
called Speakable Workflows.com


975
00:50:46,146 --> 00:50:49,576
that will have hundreds of
examples that you can download.


976
00:50:50,046 --> 00:50:52,656
In addition, they'll be a
feedback mechanism there


977
00:50:52,656 --> 00:50:56,416
that you can send us response
about how you use this,


978
00:50:56,516 --> 00:50:59,216
the kind of things that you're
looking for, that kind of thing.


979
00:50:59,216 --> 00:51:02,636
So we encourage you to give
this a try in Mavericks.


980
00:51:03,666 --> 00:51:08,186
So, in summary, this has been
a great release for automation.


981
00:51:08,556 --> 00:51:10,546
We've had a lot of
new stuff happening.


982
00:51:10,546 --> 00:51:13,346
Specifically, we
added iCloud support


983
00:51:13,416 --> 00:51:16,336
so that you can have your
scripts just distributed


984
00:51:16,336 --> 00:51:19,086
across all the computers
that you use.


985
00:51:19,486 --> 00:51:23,556
We added code signing so that
you can distribute your applets


986
00:51:23,556 --> 00:51:27,226
and droplets to every -- to your
customers or to your friends


987
00:51:27,526 --> 00:51:30,716
without invoking any of
the Gatekeeper responses.


988
00:51:31,206 --> 00:51:35,066
We now have a new construct
for extending the power


989
00:51:35,066 --> 00:51:38,146
of AppleScript through
AppleScript libraries


990
00:51:38,626 --> 00:51:43,306
which you can write yourself in
AppleScript and expose commands


991
00:51:43,306 --> 00:51:46,456
and terminology that you
didn't have available before.


992
00:51:47,396 --> 00:51:50,506
And we now have introduced
the new use clause


993
00:51:50,506 --> 00:51:54,256
that will really streamline
the syntax of your scripts


994
00:51:54,256 --> 00:51:57,016
and add a lot of power
and ability to them.


995
00:51:58,166 --> 00:52:01,666
And we've implemented
notification support in addition


996
00:52:01,666 --> 00:52:03,796
to our new Speakable Workflows.


997
00:52:04,346 --> 00:52:07,586
So that's quite a bit that's
been going on this year.


998
00:52:07,586 --> 00:52:09,476
This is a great release for us.


999
00:52:09,476 --> 00:52:10,996
We're really excited about it.


1000
00:52:11,596 --> 00:52:14,706
Now, if you have questions or
more information I'll point


1001
00:52:14,706 --> 00:52:18,346
to these four guys that you can
probably beat up with Nerf bats


1002
00:52:18,346 --> 00:52:21,786
or something to get
answers out of them.


1003
00:52:21,826 --> 00:52:25,076
And, in additional,
remember the session


1004
00:52:25,076 --> 00:52:26,306
on AppleScript libraries.


1005
00:52:26,476 --> 00:52:28,956
And there's one more
thing: Did you know this?


1006
00:52:29,516 --> 00:52:33,816
Some of you might not know
this but this is a special day


1007
00:52:33,816 --> 00:52:39,506
for us because, 20
years ago at WWDC,


1008
00:52:39,506 --> 00:52:41,956
AppleScript was released
to the world.


1009
00:52:42,516 --> 00:52:52,586
[ Applause ]


1010
00:52:53,086 --> 00:52:57,406
And it's been a very, very
powerful boon to our customers,


1011
00:52:57,406 --> 00:53:01,376
to us, to engineers,
to everybody to use it


1012
00:53:01,376 --> 00:53:05,196
to create automations that
really empower and change lives.


1013
00:53:05,196 --> 00:53:07,696
It has been a fantastic
language.


1014
00:53:07,976 --> 00:53:10,616
It's constantly growing,
expanding.


1015
00:53:10,616 --> 00:53:12,456
And, as you can see,
with this release,


1016
00:53:12,696 --> 00:53:14,826
there's new things
happening all the time.


1017
00:53:15,496 --> 00:53:17,966
So we just want to take
this one opportunity


1018
00:53:17,966 --> 00:53:22,556
on the 20th anniversary of this
technology to say thank you


1019
00:53:22,806 --> 00:53:26,016
to all the developers who
made their apps scriptable.


1020
00:53:26,386 --> 00:53:29,456
We want to say thank you to
all the scripters that wrote


1021
00:53:29,456 --> 00:53:31,606
and shared scripts
with the community.


1022
00:53:31,816 --> 00:53:34,706
We want to say thank
you to all the customers


1023
00:53:34,706 --> 00:53:38,036
that use AppleScript and
rely on it every day.


1024
00:53:38,336 --> 00:53:42,086
And to the engineers that
make their apps scriptable


1025
00:53:42,086 --> 00:53:44,926
and to the engineers at Apple
that implemented AppleScript,


1026
00:53:45,056 --> 00:53:47,146
we want to say thank
you as well.


1027
00:53:47,496 --> 00:53:48,896
So have a great conference.


1028
00:53:48,896 --> 00:53:50,986
We'll see you later
this afternoon, guys.


1029
00:53:51,136 --> 00:53:51,646
[applause] Thank you.


1030
00:53:52,516 --> 00:54:02,340
[ Silence ]

