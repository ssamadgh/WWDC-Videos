1
00:00:00,506 --> 00:00:10,836
[ Silence ]


2
00:00:11,336 --> 00:00:12,176
>> Good morning.


3
00:00:12,676 --> 00:00:15,116
My name is Gregory Hughes and
I'm the engineering manager


4
00:00:15,186 --> 00:00:16,896
for accessibility on OS X.


5
00:00:16,896 --> 00:00:20,336
I'm really excited to be able
to have the opportunity to speak


6
00:00:20,336 --> 00:00:21,216
to you this morning about some


7
00:00:21,216 --> 00:00:24,356
of the great new accessibility
features in OS X Mavericks.


8
00:00:26,226 --> 00:00:29,356
Here at Apple, we care very
deeply about accessibility


9
00:00:29,616 --> 00:00:32,195
and we work really
hard to deliver a lot


10
00:00:32,195 --> 00:00:33,706
of great accessibility features.


11
00:00:34,166 --> 00:00:37,136
We work on all sorts of
products, like VoiceOver


12
00:00:37,136 --> 00:00:40,256
and closed captioning,
Zoom and Guided Access.


13
00:00:40,876 --> 00:00:43,446
And if I were to
summarize what our does,


14
00:00:43,446 --> 00:00:46,856
I would say that we solve
problems and remove barriers


15
00:00:46,926 --> 00:00:48,356
for users with disabilities.


16
00:00:49,146 --> 00:00:51,106
The two big problems
that we look


17
00:00:51,106 --> 00:00:54,816
at everyday are how can we
deliver an outstanding operating


18
00:00:54,816 --> 00:00:58,146
system that's fully usable
by all users regardless


19
00:00:58,146 --> 00:00:59,596
of their abilities
or disabilities?


20
00:01:00,636 --> 00:01:04,626
The second problem we look
at is how can we provide you,


21
00:01:04,626 --> 00:01:07,876
the developers, with outstanding
API and developer support


22
00:01:07,916 --> 00:01:11,576
to help you do the same thing,
to help you deliver applications


23
00:01:11,576 --> 00:01:13,576
that are accessible and
usable by everybody?


24
00:01:14,336 --> 00:01:17,226
So to start off, I want to
talk that first problem.


25
00:01:17,836 --> 00:01:20,596
What features do we deliver as
part of the operating system


26
00:01:20,596 --> 00:01:24,646
to help users with disabilities,
because you're maybe aware one


27
00:01:24,646 --> 00:01:26,586
of the flagship products
is called VoiceOver.


28
00:01:27,146 --> 00:01:28,996
VoiceOver is a screen
reader which is a piece


29
00:01:28,996 --> 00:01:31,156
of software designed
for users who are blind.


30
00:01:32,166 --> 00:01:34,746
A screen reader converts all
the graphical user inter--


31
00:01:35,176 --> 00:01:36,916
graphical user information--


32
00:01:37,246 --> 00:01:40,376
sorry, screen reader converts
the graphical user interface


33
00:01:40,706 --> 00:01:43,426
into a spoken interface so
that somebody who's blind can


34
00:01:43,426 --> 00:01:46,376
navigate OS X and get
all the same information


35
00:01:46,376 --> 00:01:48,166
that you would get, sighted,
looking at the screen.


36
00:01:48,756 --> 00:01:50,656
VoiceOver also has
the capability


37
00:01:50,656 --> 00:01:51,706
of outputting to Braille.


38
00:01:52,256 --> 00:01:53,896
And now, this is
really important,


39
00:01:53,896 --> 00:01:56,026
both of these features
within VoiceOver.


40
00:01:56,986 --> 00:01:58,806
Because what this means
is someone who is blind


41
00:01:58,806 --> 00:02:00,836
and deaf can use
all of the features


42
00:02:00,836 --> 00:02:03,716
and all the functionality of
OS X to its fullest potential.


43
00:02:03,976 --> 00:02:06,966
And because VoiceOver ships
with the operating system,


44
00:02:07,236 --> 00:02:09,716
this means that the computer's
operable right out of the box


45
00:02:09,716 --> 00:02:11,006
for this class of users.


46
00:02:12,456 --> 00:02:13,696
Now, VoiceOver shipping as part


47
00:02:13,696 --> 00:02:17,876
of the OS also has a
really significant impact


48
00:02:18,056 --> 00:02:18,946
across the board.


49
00:02:20,456 --> 00:02:23,236
Now, gone are the days where
student who's blind has to work


50
00:02:23,236 --> 00:02:25,176
in a separate room, work
on a separate computer


51
00:02:25,906 --> 00:02:29,326
with assistive technology,
because VoiceOver ships standard


52
00:02:29,326 --> 00:02:32,066
with OS X, a blind student
can use the same computer


53
00:02:32,066 --> 00:02:32,966
as everybody else.


54
00:02:33,256 --> 00:02:34,686
They just need to
turn on VoiceOver.


55
00:02:35,046 --> 00:02:36,926
The same is true
in the workplace.


56
00:02:37,306 --> 00:02:40,306
Corporations no longer need to
buy expensive assistive pieces


57
00:02:40,306 --> 00:02:43,276
of technology and colleagues
no longer have difficulty


58
00:02:43,276 --> 00:02:46,886
collaborating because
VoiceOver is standard in OS X.


59
00:02:47,316 --> 00:02:50,066
Furthermore, because
VoiceOver is standard in OS X,


60
00:02:50,296 --> 00:02:52,806
you have a world class
screen reader built right


61
00:02:52,806 --> 00:02:54,666
in to help test your
applications.


62
00:02:55,006 --> 00:02:57,776
So, it's incredibly powerful
and incredibly enabling


63
00:02:57,916 --> 00:03:00,336
for both users with
disabilities and developers


64
00:03:00,336 --> 00:03:03,166
who are developing to help
these users with disabilities.


65
00:03:03,766 --> 00:03:07,086
So that's a brief
introduction about VoiceOver.


66
00:03:07,526 --> 00:03:09,436
We also look at a lot
of other disabilities.


67
00:03:09,656 --> 00:03:12,546
We work really hard across
the board to deliver closed--


68
00:03:12,546 --> 00:03:14,486
an outstanding closed
captioned experience.


69
00:03:15,266 --> 00:03:17,446
There are really great
closed captions in iTunes,


70
00:03:17,446 --> 00:03:19,896
on iOS and even the
iPod Classic.


71
00:03:20,386 --> 00:03:21,986
So whenever you open
up your media


72
00:03:21,986 --> 00:03:23,416
that has closed caption content,


73
00:03:23,686 --> 00:03:26,386
you can enable a closed caption
track right on the device.


74
00:03:26,976 --> 00:03:30,056
But we've gone above and
beyond that in OS X Mavericks.


75
00:03:30,286 --> 00:03:32,816
We're happy to introduce some
great new closed caption support


76
00:03:33,116 --> 00:03:34,006
for users who are deaf.


77
00:03:35,126 --> 00:03:37,246
In the Accessibility
Preference pane,


78
00:03:37,246 --> 00:03:38,936
you'll now notice
the Captioning tab.


79
00:03:40,246 --> 00:03:41,966
One feature that I'd like
to draw your attention


80
00:03:41,966 --> 00:03:43,696
to is this checkbox
here that says


81
00:03:43,786 --> 00:03:46,016
"prefer closed captioning
in SDH."


82
00:03:46,326 --> 00:03:48,986
If you're unaware, SDH
stands for "Subtitles


83
00:03:48,986 --> 00:03:50,226
for the deaf and
hard-of-hearing".


84
00:03:51,136 --> 00:03:54,486
What this checkbox does is it
provides a single global place


85
00:03:54,486 --> 00:03:57,456
for user who's deaf to
basically tell the OS


86
00:03:57,616 --> 00:03:59,456
that they want captions
whenever possible.


87
00:04:00,546 --> 00:04:02,656
Now, under the hood, it's
actually pretty complex.


88
00:04:03,196 --> 00:04:05,006
In every application
across the system,


89
00:04:05,216 --> 00:04:07,426
whenever media is played,
we're going to look


90
00:04:07,426 --> 00:04:09,566
and find the best
caption track we can.


91
00:04:09,896 --> 00:04:11,986
We're going to cascade
through some complex rules,


92
00:04:11,986 --> 00:04:14,646
try to find a closed captioning
track, try to find the subtitles


93
00:04:14,646 --> 00:04:17,245
for deaf and hard-of-heard
track, and leaving cascade


94
00:04:17,245 --> 00:04:19,196
down to just a regular
subtitle track based


95
00:04:19,196 --> 00:04:20,136
on the system locale.


96
00:04:21,245 --> 00:04:23,036
So, this is really,
really helpful


97
00:04:23,036 --> 00:04:25,206
because now a user doesn't
have to dig through settings


98
00:04:25,206 --> 00:04:27,056
in each application
to try to find how


99
00:04:27,056 --> 00:04:28,356
to enable closed captioning.


100
00:04:28,506 --> 00:04:30,926
They don't have to dig
through a track list of 10


101
00:04:30,926 --> 00:04:34,026
to 15 text tracks to figure
out which one is best for them.


102
00:04:34,496 --> 00:04:36,776
Users now just have to check
one checkbox and we're going


103
00:04:36,776 --> 00:04:37,926
to do all the work
under the hood.


104
00:04:38,476 --> 00:04:40,676
Users can still override
our choice if they want to.


105
00:04:40,996 --> 00:04:43,166
But we found that generally
that's not necessary.


106
00:04:43,796 --> 00:04:46,756
As you'll notice here too,
we have closed captions


107
00:04:47,016 --> 00:04:48,196
with captioning styles.


108
00:04:49,086 --> 00:04:51,506
By default, we're going to ship
the system with three styles


109
00:04:51,966 --> 00:04:53,606
that our [inaudible]
team has designed


110
00:04:53,606 --> 00:04:54,596
and they look really great.


111
00:04:54,596 --> 00:04:57,706
We have the default
style, the classic style


112
00:04:58,166 --> 00:04:59,506
and the large text style.


113
00:05:00,096 --> 00:05:02,156
So just like that checkbox,
these are going to apply


114
00:05:02,156 --> 00:05:05,026
across the system to all the
applications that adopt this API


115
00:05:05,026 --> 00:05:06,606
that are displaying captioning.


116
00:05:07,446 --> 00:05:09,226
So now, it's really
simple to create--


117
00:05:09,226 --> 00:05:11,406
to select the style
that suits your needs.


118
00:05:11,696 --> 00:05:13,836
You're sitting across
the room from your iMac,


119
00:05:13,836 --> 00:05:15,706
it might be easier to
use large text style.


120
00:05:15,786 --> 00:05:18,796
If you're watching a movie on
an airplane on your laptop,


121
00:05:19,016 --> 00:05:20,476
you might prefer default style.


122
00:05:21,446 --> 00:05:25,686
And, for users with needs to
aren't suited by these styles,


123
00:05:26,186 --> 00:05:29,176
with-- for users with needs
that aren't met by these styles,


124
00:05:29,176 --> 00:05:31,366
rather, you can create
your own style.


125
00:05:31,766 --> 00:05:33,826
And this is really
great, for example,


126
00:05:33,826 --> 00:05:37,046
for a user with a vision
impairment that prefers a font


127
00:05:37,146 --> 00:05:38,776
that has all capital letters.


128
00:05:39,136 --> 00:05:41,346
You can also customize
the color, the opacity,


129
00:05:41,556 --> 00:05:44,786
and really create a great closed
caption experience regardless


130
00:05:44,786 --> 00:05:45,466
of your needs.


131
00:05:45,886 --> 00:05:47,796
And as I said, this is
where it all applies


132
00:05:47,796 --> 00:05:51,156
across the system whether you're
in iTunes, in QuickTime and even


133
00:05:51,156 --> 00:05:53,896
on appropriately tagged
webpages, so really,


134
00:05:53,896 --> 00:05:56,786
really powerful and really
enabling for these users.


135
00:05:57,346 --> 00:06:02,126
Now, we're not going to have
time today to go into the nuts


136
00:06:02,126 --> 00:06:04,146
and bolts specifically
of closed captioning.


137
00:06:04,456 --> 00:06:06,316
There's a whole talk
tomorrow on preparing


138
00:06:06,316 --> 00:06:08,076
and presenting media
for accessibility.


139
00:06:08,436 --> 00:06:10,126
They're going to talk
a lot about the APIs


140
00:06:10,126 --> 00:06:12,586
and preparing media to be
displayed in your application.


141
00:06:12,586 --> 00:06:14,776
So if you have an
application that displays a lot


142
00:06:14,776 --> 00:06:16,626
of video content, I
strongly encourage you


143
00:06:16,626 --> 00:06:19,016
to attend this talk
tomorrow morning at 10:15.


144
00:06:19,496 --> 00:06:21,606
Or otherwise, the video,


145
00:06:21,606 --> 00:06:23,056
just like all videos
will be available.


146
00:06:23,686 --> 00:06:28,426
So the last topic that I
want to talk about are users


147
00:06:28,426 --> 00:06:29,696
with mobility impairments.


148
00:06:29,696 --> 00:06:32,996
So, we've delivered a lot of
really great features for users


149
00:06:32,996 --> 00:06:33,976
with mobility impairments.


150
00:06:34,376 --> 00:06:37,286
We have things like Sticky Keys
and Slow Keys which help user


151
00:06:37,286 --> 00:06:38,486
that have difficulty typing.


152
00:06:38,486 --> 00:06:41,166
We have Mouse Keys
which help users


153
00:06:41,166 --> 00:06:44,916
who don't have the physical
dexterity to use a mouse.


154
00:06:44,986 --> 00:06:48,726
And in OS X Mavericks,
we're really happy


155
00:06:48,726 --> 00:06:51,016
to introduce a great
new feature for users


156
00:06:51,016 --> 00:06:52,676
with severely limited mobility.


157
00:06:53,726 --> 00:06:55,616
This class of users
that we're talking


158
00:06:55,616 --> 00:06:57,906
about quite literally
only have the capability


159
00:06:57,906 --> 00:06:59,586
to operate a single button.


160
00:07:00,186 --> 00:07:02,526
In some cases, this maybe a
button mounted on the side


161
00:07:02,526 --> 00:07:04,756
of a wheelchair that these
will activate with their head.


162
00:07:05,306 --> 00:07:07,126
It could be also called
"sip-and-puff straw"


163
00:07:07,126 --> 00:07:09,386
that these will activate
by blowing air into


164
00:07:09,386 --> 00:07:10,796
or sucking air out of a straw.


165
00:07:11,546 --> 00:07:13,276
Some buttons even
manifests themselves


166
00:07:13,276 --> 00:07:14,726
as a small sensor
they might place


167
00:07:14,726 --> 00:07:16,916
in their cheek that's activated
by clinching their jaw.


168
00:07:17,986 --> 00:07:20,166
But in all of these cases,
the common denominator is


169
00:07:20,166 --> 00:07:22,236
that the user has
some physical mobility


170
00:07:22,236 --> 00:07:23,436
to operate a single button.


171
00:07:24,466 --> 00:07:27,456
And we thought about this
problem and the more we thought


172
00:07:27,456 --> 00:07:30,886
about it, the more we realized,
this is a really hard problem.


173
00:07:32,036 --> 00:07:34,406
How do we take all
of the power of OS X


174
00:07:34,406 --> 00:07:36,306
and fit it in one button?


175
00:07:37,056 --> 00:07:39,166
How do you use an
entire operating system,


176
00:07:39,366 --> 00:07:42,466
all the functionality and
features with just one button?


177
00:07:42,466 --> 00:07:45,016
And the problem really boils


178
00:07:45,016 --> 00:07:47,096
down to the standard
user interface,


179
00:07:47,126 --> 00:07:48,956
the standard input
available to a user.


180
00:07:50,026 --> 00:07:52,596
The average user has a
keyboard with 78 keys,


181
00:07:52,826 --> 00:07:55,356
a Trackpad with two
dimensions of movement.


182
00:07:55,626 --> 00:07:58,726
It also has acceleration
between one and five buttons


183
00:07:58,726 --> 00:08:00,136
and scrolling capabilities.


184
00:08:00,136 --> 00:08:03,656
The case with the Trackpad, you
also have Multi-Touch gestures.


185
00:08:04,326 --> 00:08:06,796
How do you take all of this
input and fit it in one button.


186
00:08:06,796 --> 00:08:09,116
All right, it's not
an easy task.


187
00:08:10,306 --> 00:08:18,276
So after much deliberation and
much kind of intense iteration


188
00:08:18,276 --> 00:08:21,166
on how to fit all of the
functionality of OS X


189
00:08:21,166 --> 00:08:23,716
into a single button,
we're really happy


190
00:08:23,716 --> 00:08:26,566
to introduce Switch
software for OS X.


191
00:08:27,446 --> 00:08:30,496
What does this software
does, it enables a user


192
00:08:30,496 --> 00:08:31,816
who can only operate one button


193
00:08:31,816 --> 00:08:33,806
to use all the functionality
in OS X.


194
00:08:34,866 --> 00:08:38,496
When you turn on Switch Control,
it appears there's a small menu


195
00:08:38,496 --> 00:08:39,736
on the top right of your screen.


196
00:08:40,035 --> 00:08:42,476
This menu here that you see
is what we call the Home Menu.


197
00:08:43,296 --> 00:08:46,076
And now, with only one button,
you don't have the option


198
00:08:46,076 --> 00:08:48,356
to select Next, Previous,
Up or Down.


199
00:08:49,266 --> 00:08:50,826
So, we're going to stand
through the interface


200
00:08:50,826 --> 00:08:53,226
for the user automatically
and the user can set the rate


201
00:08:53,226 --> 00:08:54,806
of scanning speed
that they desire.


202
00:08:55,286 --> 00:08:57,026
So as we scan through
the interface,


203
00:08:57,026 --> 00:08:59,636
you notice each button
gets highlighted on screen.


204
00:08:59,936 --> 00:09:01,376
You need to press your Switch


205
00:09:01,376 --> 00:09:02,816
when the appropriate
button is highlighted.


206
00:09:03,036 --> 00:09:05,396
In this case, if we want
to open up keyboard,


207
00:09:05,976 --> 00:09:07,706
we press the Switch, the
keyboard would appear.


208
00:09:08,856 --> 00:09:09,716
Now, as you can imagine,


209
00:09:09,716 --> 00:09:11,216
navigating through
your keyboard button


210
00:09:11,216 --> 00:09:13,046
by button would take
a really long time.


211
00:09:13,306 --> 00:09:14,576
So, we grouped each row.


212
00:09:15,326 --> 00:09:16,976
So, we navigate down,
grouping rows.


213
00:09:16,976 --> 00:09:18,366
And then each row has groups


214
00:09:18,366 --> 00:09:19,856
and you press your
button to drill in.


215
00:09:20,186 --> 00:09:22,186
And eventually, really
intuitively,


216
00:09:22,186 --> 00:09:25,166
get to the single letter
that you want to type.


217
00:09:25,276 --> 00:09:26,536
As you'll notice up at the top,


218
00:09:26,536 --> 00:09:28,326
we also offer spelling
suggestions.


219
00:09:28,656 --> 00:09:30,846
That gets populated with
the next most likely letter


220
00:09:31,106 --> 00:09:34,476
and next mostly like word
that you're trying to type.


221
00:09:34,776 --> 00:09:37,226
And we use the incredibly
powerful spelling


222
00:09:37,226 --> 00:09:39,456
and spell checking engine
built right into OS X


223
00:09:39,506 --> 00:09:42,016
to help provide us some great
spelling suggestions here.


224
00:09:43,206 --> 00:09:45,186
So now, I'm sure you're
thinking to yourself


225
00:09:45,186 --> 00:09:47,236
that there's lot more to
OS X than just a keyboard.


226
00:09:47,406 --> 00:09:51,196
Now, we do have access to the
other keyboard keys, of course,


227
00:09:51,236 --> 00:09:54,166
like the media keys and
even the hardware buttons


228
00:09:54,166 --> 00:09:55,146
that might appear
on your monitor


229
00:09:55,146 --> 00:09:56,426
like the brightness controls.


230
00:09:57,146 --> 00:10:00,806
But going beyond that, we have
full functionality of the mouse.


231
00:10:01,476 --> 00:10:03,636
And this problem
alone is really hard.


232
00:10:03,636 --> 00:10:07,286
How do you take a trackpad, a
mouse with that two dimensions


233
00:10:07,286 --> 00:10:09,906
of movement, and boil it
down into a single button.


234
00:10:10,946 --> 00:10:13,426
Well, I'm fortunate enough
to be able to work with some


235
00:10:13,426 --> 00:10:14,686
of the brightest
people on the planet.


236
00:10:15,246 --> 00:10:17,986
And they've came up-- they came
up with a really great solution.


237
00:10:18,796 --> 00:10:20,216
When you want to move the mouse,


238
00:10:20,216 --> 00:10:22,086
you'd select Move
from this menu here.


239
00:10:22,586 --> 00:10:24,226
And if we take an
example of Calculator,


240
00:10:24,856 --> 00:10:27,096
if we want to move the mouse
to select the Five button,


241
00:10:27,326 --> 00:10:30,366
we're first going to scan the
x-axis and the user is going


242
00:10:30,366 --> 00:10:32,766
to press their Switch when the
appropriate region is selected.


243
00:10:33,436 --> 00:10:35,466
You then press your Switch
again to select the point


244
00:10:35,466 --> 00:10:38,706
within that region and we repeat
the process on the y-axis.


245
00:10:39,656 --> 00:10:42,136
So, really, really
simple and fast.


246
00:10:42,466 --> 00:10:43,566
Just using one button,


247
00:10:43,566 --> 00:10:45,796
we're able to move the mouse
anywhere on the screen.


248
00:10:46,716 --> 00:10:49,776
So this is incredibly powerful
because now that we have access


249
00:10:49,776 --> 00:10:52,926
to the keyboard and mouse,
the full functionality


250
00:10:52,926 --> 00:10:55,156
of OS X is usable with
just a single switch.


251
00:10:55,896 --> 00:10:58,566
At this point, you may note,
a user could do a left click,


252
00:10:58,566 --> 00:11:00,526
a right click, they can
even do click and hold


253
00:11:00,526 --> 00:11:02,046
to do Drag and Drop operations.


254
00:11:02,436 --> 00:11:05,426
So, really powerful and all
the functionality is available


255
00:11:05,426 --> 00:11:08,176
to the user right with
their single switch.


256
00:11:08,176 --> 00:11:12,026
So, these are just some
of the build-in features


257
00:11:12,026 --> 00:11:13,236
of Switch Control in OS X.


258
00:11:13,236 --> 00:11:15,866
And we've gone above
and beyond that.


259
00:11:16,326 --> 00:11:19,236
Switch Control and these
panels are also fully editable


260
00:11:19,236 --> 00:11:20,046
by the user.


261
00:11:20,796 --> 00:11:23,906
We have a fully functional
Panel Editor for users


262
00:11:23,906 --> 00:11:25,836
to create their own
panels, to create panels


263
00:11:25,836 --> 00:11:26,836
of their own shortcuts.


264
00:11:27,146 --> 00:11:29,716
And this is incredibly critical
for this class of users.


265
00:11:30,196 --> 00:11:32,586
As you may imagine, it can
be a little bit tedious


266
00:11:32,586 --> 00:11:34,916
to navigate an entire
OS with just one button.


267
00:11:35,406 --> 00:11:38,086
And just like you or I might
create keyboard shortcuts,


268
00:11:38,516 --> 00:11:41,496
especially in tools like
Xcode or professional tools


269
00:11:41,496 --> 00:11:43,906
like Final Cut, Switch
users need to be able


270
00:11:43,906 --> 00:11:46,366
to create their own
shortcuts, their own panels.


271
00:11:47,266 --> 00:11:48,286
We've seen a lot of users--


272
00:11:48,816 --> 00:11:50,776
a lot Switch users
do video editing


273
00:11:50,776 --> 00:11:52,296
and really enjoy video editing.


274
00:11:52,586 --> 00:11:55,206
And this class of users
really like creating panels


275
00:11:55,206 --> 00:11:58,386
that have commonly used
functionality come in macros,


276
00:11:58,596 --> 00:12:01,276
things like insert a Crossfade,
insert a Fade to Black,


277
00:12:01,376 --> 00:12:03,226
or trim this Clip
by Five Seconds.


278
00:12:03,796 --> 00:12:05,496
So with this tool,
users have the ability


279
00:12:05,496 --> 00:12:07,596
to create their own panels,
create their own shortcuts,


280
00:12:07,786 --> 00:12:10,476
and really design an interface
that works for their workflow.


281
00:12:10,476 --> 00:12:15,546
Now, one another that I didn't
get into with Switch Control is,


282
00:12:15,546 --> 00:12:17,636
just like on iOS, Switch
Control has the ability


283
00:12:17,636 --> 00:12:19,236
to navigate the user interface.


284
00:12:19,616 --> 00:12:22,516
And to do this, it uses
the Accessibility API just


285
00:12:22,516 --> 00:12:23,226
like VoiceOver.


286
00:12:23,786 --> 00:12:27,086
So now, more than ever,
it's absolutely critical


287
00:12:27,086 --> 00:12:29,406
that your application implements
the Accessibility API.


288
00:12:30,246 --> 00:12:32,386
And as I started out this talk,


289
00:12:32,386 --> 00:12:34,186
I said that we solve
two problems,


290
00:12:34,186 --> 00:12:37,716
and the first problem is
we try to deliver some


291
00:12:37,716 --> 00:12:40,216
of the best features
within the operating system


292
00:12:40,216 --> 00:12:41,546
for users with disabilities.


293
00:12:41,956 --> 00:12:44,916
But the truth of the matter is
no matter how great our features


294
00:12:44,916 --> 00:12:47,556
are, no matter how many
weekends we spend in the office,


295
00:12:47,556 --> 00:12:49,996
no matter how many late
nights we spend in toiling


296
00:12:49,996 --> 00:12:53,126
over these interfaces,
users don't buy our products


297
00:12:53,126 --> 00:12:55,636
because of the features
we build into the OS.


298
00:12:56,106 --> 00:12:58,406
Users buy our products because
of the great applications


299
00:12:58,406 --> 00:12:58,956
you make.


300
00:12:59,716 --> 00:13:02,496
Users buy our products because
of the extended functionality


301
00:13:02,496 --> 00:13:05,036
and integration that
your apps provide.


302
00:13:05,926 --> 00:13:08,486
So now, more than ever,
it's absolutely critical


303
00:13:08,486 --> 00:13:11,196
for your applications to be
accessible and work correctly


304
00:13:11,196 --> 00:13:12,236
with the Accessibility API.


305
00:13:13,246 --> 00:13:14,486
To help show you
a little bit more


306
00:13:14,486 --> 00:13:16,846
about making your application
accessible, I'd like to bring


307
00:13:16,846 --> 00:13:17,906
up my colleague,
Patti Hoa [phonetic].


308
00:13:18,406 --> 00:13:23,516
[applause]


309
00:13:24,016 --> 00:13:28,000
[ Background Noise ]


310
00:13:28,556 --> 00:13:29,746
>> Okay, my name is Patti Hoa.


311
00:13:29,916 --> 00:13:32,556
I'm a software engineer
on the accessibility team.


312
00:13:32,966 --> 00:13:35,376
Today, I'm going to help
you guide you through some


313
00:13:35,376 --> 00:13:39,076
of the basics of accessibility
technology on OS X.


314
00:13:39,296 --> 00:13:41,936
And then I'm going to
present to you some


315
00:13:41,936 --> 00:13:44,246
of the UI challenges
we have and some


316
00:13:44,246 --> 00:13:48,116
of the new APIs we've introduced
to solve some of those problems.


317
00:13:48,796 --> 00:13:50,776
And last, I'm going to
also talk about some


318
00:13:50,776 --> 00:13:52,866
of the security improvements
we've made.


319
00:13:53,776 --> 00:13:55,236
So, let's first talk


320
00:13:55,236 --> 00:13:58,746
about accessibility
technology on OS X.


321
00:13:59,616 --> 00:14:03,526
First, there is your application
that presents lots of pretty UIs


322
00:14:03,866 --> 00:14:06,466
and fancy cool features.


323
00:14:07,116 --> 00:14:10,716
And then there's a few
software, what we call,


324
00:14:10,716 --> 00:14:14,456
"assistive software" that
uses Accessibility APIs


325
00:14:14,586 --> 00:14:18,096
to obtain informations
from other applications.


326
00:14:18,836 --> 00:14:21,786
Some examples of
those are VoiceOver


327
00:14:21,786 --> 00:14:24,276
and the Switch software
that Greg just talked about.


328
00:14:24,886 --> 00:14:29,996
So the way it works is the
assistive software will request


329
00:14:29,996 --> 00:14:33,216
accessibility information
from your app


330
00:14:33,216 --> 00:14:36,736
and the application vents
those accessibility information


331
00:14:36,736 --> 00:14:37,206
back out.


332
00:14:38,056 --> 00:14:41,756
To use a specific
example, VoiceOver here


333
00:14:41,756 --> 00:14:46,566
as the assistive software and
then just a generic application


334
00:14:46,566 --> 00:14:49,026
that perhaps just has a
Play button in the window.


335
00:14:49,916 --> 00:14:53,176
So the way they communicate
with each other is through,


336
00:14:53,356 --> 00:14:56,386
what we call, the
NSAccessibility Protocol.


337
00:14:58,776 --> 00:15:03,476
And the way it works is that
every UI, like this Play button,


338
00:15:04,046 --> 00:15:08,576
is conveying its accessibility
information through attributes.


339
00:15:09,496 --> 00:15:13,656
So, VoiceOver can simply
ask for a specific attribute


340
00:15:14,036 --> 00:15:15,516
and get some information back.


341
00:15:16,106 --> 00:15:19,676
In this case, VoiceOver to
ask for role description


342
00:15:20,056 --> 00:15:21,216
and get the type


343
00:15:21,216 --> 00:15:24,086
of UI information
back which is button.


344
00:15:25,416 --> 00:15:27,776
Or, it could ask
for AX description


345
00:15:27,986 --> 00:15:31,466
which describes what kind of
function this UI presents.


346
00:15:31,686 --> 00:15:34,916
In this case, you could
return the string Play.


347
00:15:35,766 --> 00:15:38,446
So, VoiceOver could
then take these two keys


348
00:15:38,446 --> 00:15:42,456
of attribute information
and either speak or output


349
00:15:42,456 --> 00:15:44,846
to Braille the words
Play button.


350
00:15:45,456 --> 00:15:51,826
So let's take a quick look at
the NSAccessibility Protocol.


351
00:15:52,626 --> 00:15:54,276
There's methods to determine


352
00:15:54,346 --> 00:15:56,656
if any particular
element is ignored


353
00:15:56,706 --> 00:15:58,466
in accessibility hierarchies.


354
00:15:58,996 --> 00:16:02,616
And then there's methods
to get attributes in such.


355
00:16:03,306 --> 00:16:08,186
And there are methods to
perform actions [inaudible] UIs


356
00:16:08,186 --> 00:16:10,366
that you could interact with.


357
00:16:11,386 --> 00:16:13,806
And then there's
hit-testings and focused testing


358
00:16:13,806 --> 00:16:16,006
that you could do
with accessibility.


359
00:16:16,496 --> 00:16:17,886
And last but not
least, you could do--


360
00:16:18,296 --> 00:16:21,136
you could post notification
when things change.


361
00:16:21,206 --> 00:16:25,806
I'm not going to go into details
about how this protocol works.


362
00:16:25,806 --> 00:16:28,556
If you're new to the
NSAccessibility Protocol,


363
00:16:28,856 --> 00:16:33,966
I encourage to you look at the
previous WWDC videos or look


364
00:16:33,966 --> 00:16:35,556
at our documentation online.


365
00:16:37,576 --> 00:16:41,416
What I do want to do right now
is to show you a tool we have


366
00:16:41,736 --> 00:16:45,626
on OS X to help you
going at information


367
00:16:46,066 --> 00:16:48,266
about any particular
piece of UI.


368
00:16:49,516 --> 00:16:58,576
[ Background Noise ]


369
00:16:59,076 --> 00:17:03,406
So this tool is called
Accessibility Inspector


370
00:17:03,406 --> 00:17:06,526
and the good thing is, now,
it's a bundled with Xcode.


371
00:17:07,066 --> 00:17:08,986
So you could simply go to Xcode,


372
00:17:08,986 --> 00:17:12,586
open Developer Tool
and launch the app.


373
00:17:13,516 --> 00:17:18,846
[ Background Noise ]


374
00:17:19,346 --> 00:17:20,646
And Xcode won't hide.


375
00:17:20,646 --> 00:17:21,195
There you go.


376
00:17:21,786 --> 00:17:26,396
So the way Inspector works
is it does hit-testing.


377
00:17:26,396 --> 00:17:30,366
So whenever UI you're
pointing under mouse,


378
00:17:31,136 --> 00:17:33,496
it's going to display
it in the Inspector.


379
00:17:34,156 --> 00:17:37,726
So I'm going to use this app
I have called Accessibility


380
00:17:37,726 --> 00:17:38,986
UI examples.


381
00:17:39,146 --> 00:17:45,156
If you came here last year, you
know that we used this demo app.


382
00:17:45,876 --> 00:17:48,326
So you've seen some of
the examples we had.


383
00:17:48,826 --> 00:17:52,646
This is a great app to
use to determine how


384
00:17:52,646 --> 00:17:55,656
to accessorize various
type of UI.


385
00:17:56,716 --> 00:18:01,036
So this year, we added four
more examples for you here.


386
00:18:03,346 --> 00:18:07,746
Now, what I want to do is use
Inspector, take my mouse over,


387
00:18:08,316 --> 00:18:11,656
say, for example,
this Recycle icon.


388
00:18:11,906 --> 00:18:17,096
I'm going to lock the screen
so that way I could continue


389
00:18:17,096 --> 00:18:20,366
to move my mouse while we're
inspecting the content.


390
00:18:20,776 --> 00:18:25,506
So this icon has its AX image.


391
00:18:25,946 --> 00:18:29,516
This shows you the
hierarchy of this image


392
00:18:30,266 --> 00:18:34,166
and then underneath all the
attributes that it supports.


393
00:18:35,286 --> 00:18:39,436
For example, here it tells
you, it has a role of AX image,


394
00:18:39,626 --> 00:18:41,756
a role description of image,


395
00:18:42,426 --> 00:18:45,406
description of recycle,
et cetera.


396
00:18:45,406 --> 00:18:49,616
I encourage you to take
a look at this Inspector


397
00:18:49,616 --> 00:18:52,956
and use it while you're
implementing your accessibility


398
00:18:52,956 --> 00:18:54,466
to support for your app.


399
00:18:55,516 --> 00:19:05,296
[ Background Noise ]


400
00:19:05,796 --> 00:19:07,276
So now, I'm going to tell you


401
00:19:07,276 --> 00:19:09,956
about all the exciting
new APIs we have coming


402
00:19:09,956 --> 00:19:11,586
up in OS X Maverick.


403
00:19:12,956 --> 00:19:17,576
So we came up with
a few UI challenges


404
00:19:17,716 --> 00:19:18,806
that we're trying to solve.


405
00:19:19,046 --> 00:19:23,296
So in OS 10.9, we
introduced some new APIs


406
00:19:23,296 --> 00:19:24,736
to solve those UI problems.


407
00:19:24,866 --> 00:19:26,506
So I'm going to talk about some


408
00:19:26,506 --> 00:19:29,446
of the new subroles
we've introduced, some--


409
00:19:29,546 --> 00:19:32,066
a new set a of APIs to support--


410
00:19:32,646 --> 00:19:37,066
excuse me, set of new APIs
to support Transient UIs


411
00:19:38,166 --> 00:19:40,736
and also notification
support to--


412
00:19:41,626 --> 00:19:43,466
for accessibility announcement.


413
00:19:44,416 --> 00:19:49,196
So let's first take a look at
some of the UI challenges we had


414
00:19:49,196 --> 00:19:51,506
or some of the new
behavior we've noticed.


415
00:19:52,516 --> 00:19:55,276
So, traditionally,
NSSegmentedControl,


416
00:19:55,276 --> 00:19:57,836
you can only select
one segment at a time.


417
00:19:58,826 --> 00:20:02,826
But we noticed that developer
have altered the behavior


418
00:20:03,106 --> 00:20:07,326
so that you could select
multiple segments at a time,


419
00:20:07,686 --> 00:20:15,286
like the Xcode for View
Controller in this example.


420
00:20:16,166 --> 00:20:18,586
So to solve that problem,


421
00:20:18,906 --> 00:20:21,376
we introduced a new
subrole several called the


422
00:20:21,376 --> 00:20:22,936
Toggle Subrole.


423
00:20:25,016 --> 00:20:27,776
Similarly, we also
noticed that a lot


424
00:20:27,776 --> 00:20:31,556
of developers are creating
UIs that look like a switch


425
00:20:32,186 --> 00:20:34,486
to do a function that
where, traditionally,


426
00:20:34,486 --> 00:20:38,506
they might have used a checkbox,
like in a time machine perhaps


427
00:20:38,686 --> 00:20:40,696
where you could use
a switch looking UI


428
00:20:40,836 --> 00:20:42,256
to turn something on and off.


429
00:20:42,976 --> 00:20:43,816
And to support that,


430
00:20:44,726 --> 00:20:47,576
we introduced a new subrole
called the Switch Subrole.


431
00:20:48,496 --> 00:20:53,696
In the Accessibility UI example
demo app, there's example


432
00:20:53,696 --> 00:20:57,146
of the Switch, you could
take a look at that


433
00:20:57,146 --> 00:20:59,526
and see how that's accessorized.


434
00:21:00,036 --> 00:21:05,536
Next, I want to talk about
UIs that appears and disappear


435
00:21:05,666 --> 00:21:08,096
as a result of user actions.


436
00:21:08,556 --> 00:21:12,476
And the most common one we're
seeing are mouse hovering.


437
00:21:12,476 --> 00:21:16,526
So the example I have up
here is the Reminders app.


438
00:21:17,186 --> 00:21:20,106
When you take your mouse
over of the Reminder item,


439
00:21:20,526 --> 00:21:22,136
the Information button appears.


440
00:21:22,866 --> 00:21:25,406
And similarly, if you
take your mouse away,


441
00:21:26,006 --> 00:21:27,876
the Information button
disappears.


442
00:21:28,536 --> 00:21:34,136
So this is a mouse-only
function that, you know,


443
00:21:34,136 --> 00:21:37,976
if you're not a mouse-user
like VoiceOver user,


444
00:21:38,446 --> 00:21:41,726
then there's no way to bring
up that Information button.


445
00:21:42,316 --> 00:21:48,366
We could tell you to add
keyboard support like we've done


446
00:21:48,366 --> 00:21:51,986
for many years, but we know
that's not always possible.


447
00:21:52,956 --> 00:21:55,326
And even if you did add
the keyboard support,


448
00:21:55,566 --> 00:21:59,076
shortcut support, it
may not be discoverable.


449
00:22:00,016 --> 00:22:05,296
So in 10.9, we introduced new
APIs to solve this problem.


450
00:22:06,456 --> 00:22:07,906
All you have to do
are two things.


451
00:22:09,026 --> 00:22:14,456
First, when VoiceOver
wants to show or hide UIs,


452
00:22:15,576 --> 00:22:19,966
you simply need to implement
the Show Alternate UI action


453
00:22:20,036 --> 00:22:23,056
or the Show Default UI action.


454
00:22:23,136 --> 00:22:27,456
And when VoiceOver wants to know
when UI changes on the screen,


455
00:22:27,776 --> 00:22:30,716
you simply need to post
the notification layout,


456
00:22:30,716 --> 00:22:31,816
change notification.


457
00:22:33,266 --> 00:22:38,016
This notification takes a user
information dictionary, a key--


458
00:22:38,016 --> 00:22:41,646
UI elements key that takes in
a rate of changed elements.


459
00:22:42,486 --> 00:22:44,376
So if you've ever implemented


460
00:22:44,376 --> 00:22:47,106
or posted accessibility
notification,


461
00:22:47,396 --> 00:22:50,146
you may be wondering
right now, "How do I pass


462
00:22:50,336 --> 00:22:52,746
in this user information key?"


463
00:22:53,176 --> 00:22:53,816
Guess what.


464
00:22:53,816 --> 00:22:58,366
In 10.9, we introduced a new
API for you to do just that.


465
00:22:58,586 --> 00:23:01,436
This post notification
was user info.


466
00:23:01,756 --> 00:23:04,166
API takes in additional
parameter


467
00:23:04,676 --> 00:23:06,766
which is the User
Information Dictionary.


468
00:23:07,556 --> 00:23:09,176
So to see how this all works,


469
00:23:09,176 --> 00:23:14,866
I'm going to go ahead
and demo it to you.


470
00:23:15,516 --> 00:23:29,516
[ Background Noise ]


471
00:23:30,016 --> 00:23:33,576
So in this app here, the
Accessibility UI examples,


472
00:23:33,946 --> 00:23:36,366
there's the Transient
UI example.


473
00:23:36,366 --> 00:23:41,626
So note that as I take my
mouse over here, the Previous


474
00:23:41,626 --> 00:23:43,276
and Next buttons appear.


475
00:23:43,276 --> 00:23:46,696
And you could click on
this to change the page.


476
00:23:46,696 --> 00:23:51,156
And if you take your mouse away
from this, the UIs disappear.


477
00:23:52,266 --> 00:23:54,226
So obviously, this
is not possible


478
00:23:54,226 --> 00:23:58,666
for a VoiceOver user
to use currently.


479
00:23:58,666 --> 00:24:05,566
So let's see how you can add
those API support to solve that.


480
00:24:09,416 --> 00:24:12,576
I have the Accessibility
UI example project.


481
00:24:13,276 --> 00:24:17,906
In that Transient UI folder,


482
00:24:17,906 --> 00:24:23,666
there's a Transient
UI Trigger view


483
00:24:24,366 --> 00:24:26,706
which is just a subclass
of the NSView.


484
00:24:27,716 --> 00:24:30,306
This is the view that
holds the two buttons.


485
00:24:31,656 --> 00:24:35,796
So what I want to do is add
the NSAccessibility Protocol


486
00:24:36,146 --> 00:24:36,876
for this view.


487
00:24:37,536 --> 00:24:39,766
So I created a category
for that.


488
00:24:40,346 --> 00:24:45,816
So the first thing I
want to do is make sure


489
00:24:45,816 --> 00:24:47,706
that this view is exposed


490
00:24:47,836 --> 00:24:49,576
through the Accessibility
hierarchy.


491
00:24:50,086 --> 00:24:54,096
NSViews, by default, will not
exposed through accessibility.


492
00:24:54,706 --> 00:25:00,536
So I have to explicitly return
No for Accessibility is Ignored.


493
00:25:02,136 --> 00:25:06,546
So once this element is
exposed through the hierarchy,


494
00:25:06,546 --> 00:25:08,856
the next you want
to do is, well,


495
00:25:08,856 --> 00:25:12,646
define what type of UI this is.


496
00:25:13,176 --> 00:25:16,616
So in the accessibility
attribute value,


497
00:25:17,396 --> 00:25:19,136
this is when you
ask for the role,


498
00:25:19,136 --> 00:25:21,876
I'll just return the group role


499
00:25:21,976 --> 00:25:25,646
since the only function this
view does is hold other UIs.


500
00:25:26,906 --> 00:25:30,646
For any attributes that you
don't explicitly support,


501
00:25:31,246 --> 00:25:35,596
call Super because [inaudible]
underneath will do all the work


502
00:25:35,596 --> 00:25:36,126
for you.


503
00:25:36,686 --> 00:25:40,966
So now, we're ready to
add some of the new APIs.


504
00:25:41,426 --> 00:25:43,266
The first thing is
the new actions.


505
00:25:45,016 --> 00:25:49,476
Depending on if those
buttons are visible or not,


506
00:25:49,916 --> 00:25:54,126
you can support the
Show Default UI action


507
00:25:54,836 --> 00:25:56,716
or the Show Alternate UI action.


508
00:25:57,306 --> 00:26:02,726
Then when you're asked
to perform those actions,


509
00:26:03,726 --> 00:26:07,826
you could go ahead and
make those buttons appear


510
00:26:07,976 --> 00:26:08,696
or disappear.


511
00:26:09,256 --> 00:26:16,316
Every time those UI appear or
disappear, you want to remember


512
00:26:16,316 --> 00:26:17,906
to post the notification.


513
00:26:17,906 --> 00:26:20,606
And this is where we
can use that new API,


514
00:26:20,656 --> 00:26:22,976
the post notification
with user info API,


515
00:26:23,696 --> 00:26:25,736
pass in the Layout
Change notification,


516
00:26:25,736 --> 00:26:28,016
and the User Information
Dictionary


517
00:26:28,636 --> 00:26:30,796
with those changed elements.


518
00:26:34,006 --> 00:26:39,916
So with that, I want to show you
how this works with VoiceOver.


519
00:26:41,166 --> 00:26:42,896
You can launch VoiceOver
with command F5


520
00:26:42,896 --> 00:26:46,126
and the very first
time you launch that,


521
00:26:46,346 --> 00:26:49,356
it's going to ask you if you
want to run through a tutorial.


522
00:26:49,586 --> 00:26:52,296
If you never used VoiceOver,
I really encourage you


523
00:26:52,296 --> 00:26:54,086
to try it out, the tutorial.


524
00:26:54,876 --> 00:26:58,236
For now, I'm going to skip that.


525
00:26:58,446 --> 00:26:59,496
>> Welcome to VoiceOver.


526
00:27:00,136 --> 00:27:02,656
VoiceOver speaks descriptions
of items on the screen


527
00:27:02,656 --> 00:27:05,526
and can be used to control
the computer using only


528
00:27:05,526 --> 00:27:06,306
your keyboard.


529
00:27:07,276 --> 00:27:11,156
If you already know how to use
VoiceOver, press the V key now.


530
00:27:12,186 --> 00:27:14,136
If you want to learn
how to use VoiceOver,


531
00:27:14,466 --> 00:27:15,936
press the Space Bar now.


532
00:27:16,826 --> 00:27:20,616
>> Okay, so I'm going
to go and continue.


533
00:27:20,616 --> 00:27:22,686
>> VoiceOver Accessibility
UI examples,


534
00:27:22,936 --> 00:27:26,256
Accessibility UI examples
window, table, Transient UI,


535
00:27:26,466 --> 00:27:27,786
selected has keyboard focus.


536
00:27:29,296 --> 00:27:32,236
>> Okay, so the way it works
is there's a VoiceOver cursor


537
00:27:32,336 --> 00:27:36,036
which is the black box
around the UI I'm focused on.


538
00:27:36,376 --> 00:27:38,966
And I can simply use
VoiceOver key commands


539
00:27:39,206 --> 00:27:41,286
to move that cursor around.


540
00:27:43,236 --> 00:27:45,126
>> This is page 3 of 10.


541
00:27:45,236 --> 00:27:46,286
Has Alternate UI action.


542
00:27:46,956 --> 00:27:49,486
>> So, it tells me this one
has Alternate UI action.


543
00:27:49,796 --> 00:27:52,896
So now, I could use
another key command to bring


544
00:27:52,896 --> 00:27:54,786
up the VoiceOver Action Menu.


545
00:27:55,566 --> 00:27:57,496
>> Actions Menu, one item.


546
00:27:58,366 --> 00:27:59,136
Show Alternate UI.


547
00:27:59,136 --> 00:28:01,546
>> I'll go ahead
and select that.


548
00:28:01,776 --> 00:28:03,456
>> Two items available
in the Update Items Menu.


549
00:28:03,456 --> 00:28:05,856
>> And note that
now I could bring


550
00:28:05,856 --> 00:28:07,496
up the Previous and
Next buttons.


551
00:28:08,326 --> 00:28:09,256
So let's jump there.


552
00:28:10,396 --> 00:28:14,476
>> This, stop inter-- Previous
button displaying Alternate UI,


553
00:28:14,476 --> 00:28:16,816
Next button displaying
Alternative UI.


554
00:28:17,196 --> 00:28:19,176
>> And I could interact with it.


555
00:28:19,406 --> 00:28:20,956
>> Press Next button.


556
00:28:21,186 --> 00:28:22,276
Press Next button.


557
00:28:22,946 --> 00:28:25,146
>> Okay. And we could
do the same thing


558
00:28:25,146 --> 00:28:26,696
to hide these buttons.


559
00:28:27,766 --> 00:28:28,906
>> Previous button.


560
00:28:29,156 --> 00:28:31,886
This is page 5 of 10
displaying Alternative UI.


561
00:28:32,516 --> 00:28:37,016
Actions Menu one item,
Show Default UI, Table,


562
00:28:37,266 --> 00:28:38,746
Transient UI selected.


563
00:28:39,896 --> 00:28:40,606
VoiceOver off.


564
00:28:40,606 --> 00:28:43,176
>> Okay, with the
few lines of code,


565
00:28:43,436 --> 00:28:46,896
now you're giving VoiceOver
the same experience to be able


566
00:28:46,896 --> 00:28:48,306
to access those buttons.


567
00:28:49,516 --> 00:28:57,816
[ Background Noise ]


568
00:28:58,316 --> 00:28:59,136
The next thing I want to talk


569
00:28:59,136 --> 00:29:01,736
about is Accessibility
Announcement.


570
00:29:02,666 --> 00:29:04,956
In your app, there may
be times where you want


571
00:29:05,176 --> 00:29:08,306
to convey some status
to the user.


572
00:29:08,356 --> 00:29:11,556
And the example I have here
of the Keyboard Preference


573
00:29:12,006 --> 00:29:16,066
where when a user assigns
a key that conflicts


574
00:29:16,066 --> 00:29:20,416
with the existing key, Keyboard
Prefs will display a little


575
00:29:20,556 --> 00:29:24,126
status text at the
bottom of the screen.


576
00:29:24,396 --> 00:29:27,746
Now, this is a-- what I
call, a "visual announcement"


577
00:29:27,846 --> 00:29:29,556
which works great
if you're sighted.


578
00:29:29,556 --> 00:29:34,166
But if you're not,
this is useless.


579
00:29:35,216 --> 00:29:38,536
So to help you make
the experience the same


580
00:29:38,536 --> 00:29:43,056
for every user, we've introduced
a new notification called


581
00:29:43,056 --> 00:29:45,436
Announcement Requested
Notification.


582
00:29:45,996 --> 00:29:50,536
It takes an Announcement key
so you could pass on a string


583
00:29:50,576 --> 00:29:53,556
of what you want the
assistive software to announce.


584
00:29:54,166 --> 00:29:57,766
So with that information,
once we post that,


585
00:29:57,766 --> 00:30:01,356
VoiceOver can then either
determine to speak it,


586
00:30:01,356 --> 00:30:03,586
output to Braille, or
do something about it.


587
00:30:04,586 --> 00:30:07,736
Now, not every announcement
has the same priority,


588
00:30:08,186 --> 00:30:11,266
so we also have a new priority
key that you could pass


589
00:30:11,326 --> 00:30:13,546
in to determine the priority.


590
00:30:13,796 --> 00:30:19,916
We've predefined some priorities
for you, Low, Medium and High.


591
00:30:20,136 --> 00:30:23,236
So, so far, I've talked
about APIs that help


592
00:30:23,296 --> 00:30:25,056
to solve UI challenges.


593
00:30:25,056 --> 00:30:27,476
Next, I want to talk about some


594
00:30:27,476 --> 00:30:29,386
of the security improvements
we've made.


595
00:30:29,966 --> 00:30:37,386
Two things, specifically, one
is the text content protection


596
00:30:38,216 --> 00:30:40,956
and the other one is
a more secure usage


597
00:30:41,016 --> 00:30:43,556
of Accessibility API.


598
00:30:44,336 --> 00:30:46,746
So let's first talk
about content protection.


599
00:30:47,306 --> 00:30:50,696
If you run apps such
as the eBook


600
00:30:50,696 --> 00:30:54,196
that display copyrighted
content like a book,


601
00:30:54,906 --> 00:30:56,966
or if you have a medical app


602
00:30:57,146 --> 00:31:00,786
that display valuable
sensitive patient informations,


603
00:31:01,576 --> 00:31:03,436
what I'm going to
say next is for you.


604
00:31:04,526 --> 00:31:07,456
If you have not made
your app accessible


605
00:31:07,456 --> 00:31:10,926
because of text content
protection concern,


606
00:31:11,926 --> 00:31:15,886
we now have one more reason for
you to make your app accessible.


607
00:31:17,086 --> 00:31:18,486
We've heard your feedback


608
00:31:18,486 --> 00:31:20,886
and now we're introducing
a new attribute


609
00:31:21,046 --> 00:31:24,866
that you could implement to
make your content more secure.


610
00:31:25,536 --> 00:31:29,316
So this attribute is called
the Contents Protected


611
00:31:29,316 --> 00:31:30,666
Content Attribute.


612
00:31:31,116 --> 00:31:33,106
If you pass in Yes for this,


613
00:31:33,816 --> 00:31:38,196
then your text content string
will no longer be viewable


614
00:31:38,196 --> 00:31:39,666
by other applications.


615
00:31:40,766 --> 00:31:43,436
There is one exception
and those are the system--


616
00:31:44,906 --> 00:31:46,826
system assistive software apps


617
00:31:47,196 --> 00:31:49,496
such as VoiceOver
for obvious reasons.


618
00:31:50,406 --> 00:31:55,676
To use this new attribute, you
will also need to make API call.


619
00:31:56,416 --> 00:32:00,186
This is called the Set Make
Contents Protected Content API.


620
00:32:01,406 --> 00:32:03,126
So to see how these works,


621
00:32:04,106 --> 00:32:06,406
I'm going to go ahead
and demo to you.


622
00:32:07,516 --> 00:32:15,856
[ Background Noise ]


623
00:32:16,356 --> 00:32:18,996
So in the Accessibility
UI example,


624
00:32:18,996 --> 00:32:23,796
there's the protected text.


625
00:32:23,796 --> 00:32:27,946
And I simply have a view that
display a paragraph of text.


626
00:32:28,546 --> 00:32:31,206
And for demo purpose, I
also included a checkbox


627
00:32:31,476 --> 00:32:35,486
so we could toggle the
protection on and off.


628
00:32:35,746 --> 00:32:39,986
Now, let's take a look at
this using the Inspector.


629
00:32:44,176 --> 00:32:46,276
So I'm going to lock this thing.


630
00:32:47,516 --> 00:32:54,176
[ Background Noise ]


631
00:32:54,676 --> 00:32:55,986
What I want you to look


632
00:32:55,986 --> 00:32:59,616
at specifically is this
AX Value attribute.


633
00:33:00,066 --> 00:33:02,766
Note that, right now, you
could see their entire string


634
00:33:03,026 --> 00:33:06,086
of that content.


635
00:33:06,166 --> 00:33:09,736
So if I go and check this
Protect Content checkbox


636
00:33:10,316 --> 00:33:11,756
and refresh the Inspector,


637
00:33:11,756 --> 00:33:15,716
note that you can no longer
see the string anymore.


638
00:33:16,296 --> 00:33:20,076
And we can do the same thing


639
00:33:20,076 --> 00:33:26,136
with VoiceOver and
see what happens.


640
00:33:26,136 --> 00:33:29,686
>> VoiceOver Accessibility
UI-- Apple designs Macs,


641
00:33:29,826 --> 00:33:32,346
the best personal computers
in the world along with OS X,


642
00:33:32,346 --> 00:33:34,086
iLife, iWork, and
professional software.


643
00:33:34,416 --> 00:33:36,466
Apple leads the digital music
revolution with its iPods


644
00:33:36,466 --> 00:33:37,366
and iTunes online store.


645
00:33:38,536 --> 00:33:39,546
VoiceOver off.


646
00:33:39,546 --> 00:33:42,766
>> Great. So, it allows
assistive software to continue


647
00:33:42,926 --> 00:33:44,386
to use and see the content


648
00:33:44,446 --> 00:33:47,106
but it doesn't allow other
apps to see the content.


649
00:33:48,146 --> 00:33:50,846
So let's see how that
works in the code.


650
00:33:54,756 --> 00:33:58,386
The example is under the
Protected Text folder.


651
00:33:59,626 --> 00:34:03,496
In there, I just have a
subclass of the NSTextField,


652
00:34:03,746 --> 00:34:06,576
so that displayed the content.


653
00:34:07,086 --> 00:34:17,906
And so, I want to override some
of the Accessibility APIs here.


654
00:34:18,616 --> 00:34:22,936
So since what I'm doing here is
dynamically toggling the text


655
00:34:23,235 --> 00:34:26,835
content protection on and
off, I'll make the API call


656
00:34:26,835 --> 00:34:29,246
in a place where I'm setting
the protection turning--


657
00:34:29,315 --> 00:34:30,616
toggling that protection.


658
00:34:31,286 --> 00:34:34,216
So I could just call
NSAccessibility Set Make


659
00:34:34,216 --> 00:34:37,366
Contents Protected
Content, turn it yes or no.


660
00:34:38,226 --> 00:34:41,065
In your app, you probably
want the protection


661
00:34:41,065 --> 00:34:43,775
to last throughout the
lifespan of your app.


662
00:34:44,335 --> 00:34:49,335
So, you could power it like
in the app launch time.


663
00:34:50,676 --> 00:34:53,166
Next, I want to add
this new attribute,


664
00:34:53,266 --> 00:34:55,556
so in Accessibility
Attribute Names.


665
00:34:56,326 --> 00:34:58,176
In addition to all
the attributes


666
00:34:58,176 --> 00:35:02,196
that app already supports
for the text field cell,


667
00:35:03,416 --> 00:35:06,256
we're also going to add
this new Contents Protected


668
00:35:06,256 --> 00:35:07,396
Content attribute.


669
00:35:07,726 --> 00:35:11,096
And then when you're being
asked for this attribute,


670
00:35:11,336 --> 00:35:14,806
this is where you return
yes or no if you want to--


671
00:35:15,126 --> 00:35:16,336
if you want that protection.


672
00:35:17,656 --> 00:35:20,796
So that's all you have to
do to protect a content.


673
00:35:21,516 --> 00:35:28,776
[ Pause ]


674
00:35:29,276 --> 00:35:31,846
So, so far, I've been
talking about your app


675
00:35:31,846 --> 00:35:35,226
and how events various
accessibility information


676
00:35:35,226 --> 00:35:37,636
to enhance the user experience.


677
00:35:38,336 --> 00:35:41,676
Now, I want to switch gear
and talk about some changes


678
00:35:41,726 --> 00:35:43,566
that affect assistive software.


679
00:35:44,256 --> 00:35:52,256
At Apple, we really care about
protecting end-user's privacy,


680
00:35:53,066 --> 00:35:54,396
basically, all of
their information.


681
00:35:54,486 --> 00:36:00,136
So in OS X, if any
application that wants


682
00:36:00,406 --> 00:36:03,376
to use the end-user's
location information


683
00:36:03,636 --> 00:36:08,856
or context information will have
to get the users permission.


684
00:36:09,646 --> 00:36:12,216
We're taking that
great mechanism


685
00:36:12,216 --> 00:36:15,756
to accessibility too in 10.9.


686
00:36:16,496 --> 00:36:21,496
So in 10.9, any application that
wants to use Accessibility API


687
00:36:21,976 --> 00:36:23,536
to obtain information


688
00:36:23,536 --> 00:36:26,696
about other applications
will also need gain the


689
00:36:26,696 --> 00:36:27,736
user's permission.


690
00:36:28,376 --> 00:36:32,766
So the very first time the app
uses the Accessibility API,


691
00:36:33,646 --> 00:36:37,256
the system will prompt
the end-user


692
00:36:37,256 --> 00:36:38,616
for permission on your behalf.


693
00:36:40,096 --> 00:36:47,996
And until your app is
on the approved list,


694
00:36:47,996 --> 00:36:49,406
the APIs would be disabled.


695
00:36:49,736 --> 00:36:53,966
So if you're an app that heavily
depends on the use of the API,


696
00:36:54,666 --> 00:36:58,786
you will probably want to
remind the end-user more often.


697
00:36:59,306 --> 00:37:01,896
So we created an API
for you to do just that.


698
00:37:02,446 --> 00:37:06,526
It's called the AX is Trusted,
Process Trusted with Options


699
00:37:06,976 --> 00:37:09,036
that takes in a dictionary.


700
00:37:09,676 --> 00:37:13,916
So in your app launch
time, you could simply pass


701
00:37:14,126 --> 00:37:17,856
in the Trusted Check Option
prompt, it has Boolean for the--


702
00:37:17,856 --> 00:37:22,446
Boolean true for that into
the dictionary and set


703
00:37:22,446 --> 00:37:24,366
that as the argument
for your API.


704
00:37:25,146 --> 00:37:28,056
And when that happens, then
every time your app launch,


705
00:37:28,606 --> 00:37:31,556
it'll prompt the user
for permission again.


706
00:37:32,916 --> 00:37:36,406
So if you want more
information, there's e-mail list


707
00:37:36,486 --> 00:37:40,046
for you to join or a contact.


708
00:37:40,666 --> 00:37:45,806
And if you miss the
accessibility


709
00:37:45,806 --> 00:37:49,826
in iOS session earlier today
in this room, you can watch it


710
00:37:49,826 --> 00:37:51,556
on video once it's available.


711
00:37:52,026 --> 00:37:55,246
And if you want to hear more
about the close captioning stuff


712
00:37:55,656 --> 00:37:59,876
that Greg talked about, tomorrow
morning in Uphill [phonetic],


713
00:37:59,876 --> 00:38:00,766
you can listen to that.


714
00:38:01,016 --> 00:38:05,926
So to recap, Apple is
really committed to ensure


715
00:38:05,926 --> 00:38:10,736
that every user have equal
access to the rich experience


716
00:38:10,736 --> 00:38:14,486
of using all of our
Apple products.


717
00:38:14,486 --> 00:38:17,616
On our end, we work
really hard to continue


718
00:38:17,616 --> 00:38:21,896
to improve our existing products
like VoiceOver and new products


719
00:38:21,896 --> 00:38:25,246
like the Switch software,
and to continue


720
00:38:25,246 --> 00:38:28,916
to enhance our existing
set of APIs.


721
00:38:29,136 --> 00:38:33,936
However, all of that are
just tools to help the user


722
00:38:33,936 --> 00:38:35,466
to use your application.


723
00:38:36,356 --> 00:38:39,776
So, your application
is the important thing


724
00:38:39,776 --> 00:38:40,756
in this equation.


725
00:38:41,676 --> 00:38:45,166
I'm hoping that I've given you
some basic information on how


726
00:38:45,166 --> 00:38:48,216
to use the Accessibility
APIs and the tool


727
00:38:48,416 --> 00:38:50,456
to make your application
accessible.


728
00:38:50,756 --> 00:38:57,866
If you have further questions,
contact us, watch videos,


729
00:38:58,106 --> 00:39:03,086
previous WWDC videos, or look
online for documentations.


730
00:39:03,596 --> 00:39:07,886
Today, I have also
presented some UI challenges


731
00:39:07,886 --> 00:39:11,206
and how we have new APIs to
help solve those problems.


732
00:39:11,876 --> 00:39:14,836
If, in your application,
you have any of those UIs


733
00:39:14,896 --> 00:39:18,056
that I presented, I
really encourage you


734
00:39:18,056 --> 00:39:20,376
to implement those new APIs.


735
00:39:20,836 --> 00:39:22,186
As you've see in the demo,


736
00:39:22,186 --> 00:39:23,806
they're really easy
to implement.


737
00:39:24,336 --> 00:39:27,676
And I've also talked about some


738
00:39:27,676 --> 00:39:31,726
of the security improvements
too.


739
00:39:31,956 --> 00:39:35,816
So, I'm hoping that you go
away with this and start


740
00:39:36,146 --> 00:39:37,936
to make your application
accessible.


741
00:39:37,936 --> 00:39:39,916
If you have further
question, again,


742
00:39:39,916 --> 00:39:43,226
come to our lab this
afternoon at 12:45.


743
00:39:43,366 --> 00:39:45,696
And if I don't see you at
the lab, have a great day.


744
00:39:45,886 --> 00:39:46,396
Thank you.


745
00:39:47,516 --> 00:39:56,050
[ Applause ]

